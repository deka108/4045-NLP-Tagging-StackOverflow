O	0	8	Question
O	8	9	-
O	9	16	5455794

O	17	18	I
O	19	23	have
O	24	25	a
O	26	32	string
O	33	37	like
O	38	42	this
O	42	43	:
O	44	48	mysz
O	49	50	=
O	51	64	StringLiteral
O	64	65	;
O	66	67	I
O	68	72	want
O	73	75	to
O	76	82	remove
O	83	86	the
O	87	98	whitespaces
O	99	101	in
O	102	105	the
O	106	112	string
O	112	113	.

O	114	115	I
O	116	121	tried
B-api_mention	122	126	trim
I-api_mention	126	127	(
I-api_mention	127	131	args
I-api_mention	131	132	)
O	133	136	but
O	137	141	this
O	142	149	removes
O	150	154	only
O	155	166	whitespaces
O	167	173	before
O	174	177	and
O	178	183	after
O	184	187	the
O	188	193	whole
O	194	200	string
O	200	201	.

O	202	203	I
O	204	208	also
O	209	214	tried
B-api_mention	215	225	replaceAll
I-api_mention	225	226	(
I-api_mention	226	230	args
I-api_mention	230	231	)
O	232	235	but
O	236	240	then
O	241	244	the
O	245	246	=
O	247	251	also
O	252	256	gets
O	257	264	removed
O	264	265	.

O	266	269	How
O	270	273	can
O	274	275	I
O	276	283	achieve
O	284	285	a
O	286	292	string
O	293	297	with
O	297	298	:
O	299	304	mysz2
O	305	306	=
O	307	320	StringLiteral

O	322	330	Question
O	330	331	-
O	331	338	4645020

O	339	341	It
O	342	344	is
O	345	353	supposed
O	354	356	to
O	357	359	be
O	360	369	generally
O	370	380	preferable
O	381	383	to
O	384	387	use
O	388	389	a
B-api_mention	390	403	StringBuilder
O	404	407	for
O	408	414	string
O	415	428	concatenation
O	429	431	in
O	432	436	Java
O	436	437	.

O	438	440	Is
O	441	445	this
O	446	452	always
O	453	456	the
O	457	461	case
O	461	462	?

O	463	467	What
O	468	469	I
O	470	474	mean
O	475	477	is
O	478	482	this
O	482	483	:
O	484	486	Is
O	487	490	the
O	491	499	overhead
O	500	502	of
O	503	511	creating
O	512	513	a
B-api_mention	514	527	StringBuilder
O	528	534	object
O	534	535	,
O	536	543	calling
O	544	547	the
B-api_mention	548	554	append
I-api_mention	554	555	(
I-api_mention	555	559	args
I-api_mention	559	560	)
O	561	567	method
O	568	571	and
O	572	579	finally
B-api_mention	580	588	toString
I-api_mention	588	589	(
I-api_mention	589	593	args
I-api_mention	593	594	)
O	595	602	already
O	603	610	smaller
O	611	615	then
O	616	629	concatenating
O	630	638	existing
O	639	646	strings
O	647	651	with
O	652	655	the
O	656	657	+
O	658	666	operator
O	667	670	for
O	671	674	two
O	675	682	strings
O	682	683	,
O	684	686	or
O	687	689	is
O	690	692	it
O	693	697	only
O	698	707	advisable
O	708	711	for
O	712	716	more
O	717	718	(
O	718	722	than
O	723	726	two
O	726	727	)
O	728	735	strings
O	735	736	?

O	737	739	If
O	740	745	there
O	746	748	is
O	749	753	such
O	754	755	a
O	756	765	threshold
O	765	766	,
O	767	771	what
O	772	776	does
O	777	779	it
O	780	786	depend
O	787	789	on
O	790	791	(
O	791	798	perhaps
O	799	802	the
O	803	809	string
O	810	816	length
O	816	817	,
O	818	821	but
O	822	824	in
O	825	830	which
O	831	834	way
O	834	835	)
O	835	836	?

O	837	840	And
O	841	848	finally
O	848	849	,
O	850	855	would
O	856	859	you
O	860	865	trade
O	866	869	the
O	870	881	readability
O	882	885	and
O	886	897	conciseness
O	898	900	of
O	901	904	the
O	905	906	+
O	907	920	concatenation
O	921	924	for
O	925	928	the
O	929	940	performance
O	941	943	of
O	944	947	the
B-api_mention	948	961	StringBuilder
O	962	964	in
O	965	972	smaller
O	973	978	cases
O	979	983	like
O	984	987	two
O	987	988	,
O	989	994	three
O	995	997	or
O	998	1002	four
O	1003	1010	strings
O	1010	1011	?

O	1012	1016	EDIT
O	1017	1025	Explicit
O	1026	1029	use
O	1030	1032	of
B-api_mention	1033	1046	StringBuilder
O	1047	1050	for
O	1051	1058	regular
O	1059	1073	concatenations
O	1074	1076	is
O	1077	1082	being
O	1083	1092	mentioned
O	1093	1095	as
O	1096	1104	obsolete
O	1105	1107	at
O	1108	1116	obsolete
O	1117	1121	java
O	1122	1134	optimization
O	1135	1139	tips
O	1140	1142	as
O	1143	1147	well
O	1148	1150	as
O	1151	1153	at
O	1154	1158	java
O	1159	1164	urban
O	1165	1170	myths
O	1171	1172	.

O	1174	1182	Question
O	1182	1183	-
O	1183	1190	4576352

O	1191	1192	I
O	1193	1196	can
O	1197	1200	use
O	1201	1205	this
O	1205	1206	:
O	1207	1208	#
O	1208	1211	pre
O	1212	1214	Is
O	1215	1220	there
O	1221	1222	a
O	1223	1226	way
O	1227	1229	to
O	1230	1236	remove
O	1237	1240	all
O	1241	1252	occurrences
O	1253	1255	of
O	1256	1265	character
O	1266	1267	X
O	1268	1272	from
O	1273	1274	a
O	1275	1281	String
O	1282	1284	in
O	1285	1289	Java
O	1289	1290	?

O	1291	1292	I
O	1293	1298	tried
O	1299	1303	this
O	1304	1307	and
O	1308	1310	is
O	1311	1314	not
O	1315	1319	what
O	1320	1321	I
O	1322	1326	want
O	1326	1327	:
B-api_mention	1328	1331	str
I-api_mention	1331	1332	.
I-api_mention	1332	1339	replace
I-api_mention	1339	1340	(
I-api_mention	1340	1344	args
I-api_mention	1344	1345	)
O	1345	1346	;
O	1347	1348	/
O	1348	1349	/
O	1349	1356	replace
O	1357	1361	with
O	1362	1367	space

O	1369	1377	Question
O	1377	1378	-
O	1378	1385	5031614

O	1386	1391	There
O	1392	1396	have
O	1397	1401	been
O	1402	1406	some
O	1407	1418	discussions
O	1419	1423	here
O	1424	1429	about
O	1430	1433	JPA
O	1434	1442	entities
O	1443	1446	and
O	1447	1452	which
B-api_mention	1453	1461	hashCode
I-api_mention	1461	1462	(
I-api_mention	1462	1466	args
I-api_mention	1466	1467	)
O	1468	1469	/
B-api_mention	1470	1476	equals
I-api_mention	1476	1477	(
I-api_mention	1477	1481	args
I-api_mention	1481	1482	)
O	1483	1497	implementation
O	1498	1504	should
O	1505	1507	be
O	1508	1512	used
O	1513	1516	for
O	1517	1520	JPA
O	1521	1527	entity
O	1528	1535	classes
O	1535	1536	.

O	1537	1541	Most
O	1542	1543	(
O	1543	1545	if
O	1546	1549	not
O	1550	1553	all
O	1553	1554	)
O	1555	1557	of
O	1558	1562	them
O	1563	1569	depend
O	1570	1572	on
O	1573	1582	Hibernate
O	1582	1583	,
O	1584	1587	but
O	1588	1589	I
O	1589	1590	'
O	1590	1591	d
O	1592	1596	like
O	1597	1599	to
O	1600	1607	discuss
O	1608	1612	them
O	1613	1616	JPA
O	1616	1617	-
O	1617	1631	implementation
O	1631	1632	-
O	1632	1641	neutrally
O	1642	1643	(
O	1643	1644	I
O	1645	1647	am
O	1648	1653	using
O	1654	1665	EclipseLink
O	1665	1666	,
O	1667	1669	by
O	1670	1673	the
O	1674	1677	way
O	1677	1678	)
O	1678	1679	.

O	1680	1683	All
O	1684	1692	possible
O	1693	1708	implementations
O	1709	1712	are
O	1713	1719	having
O	1720	1725	their
O	1726	1729	own
O	1730	1740	advantages
O	1741	1744	and
O	1745	1758	disadvantages
O	1759	1768	regarding
O	1768	1769	:
O	1770	1771	#
O	1771	1773	li
B-api_mention	1774	1782	hashCode
I-api_mention	1782	1783	(
I-api_mention	1783	1787	args
I-api_mention	1787	1788	)
O	1789	1790	/
B-api_mention	1791	1797	equals
I-api_mention	1797	1798	(
I-api_mention	1798	1802	args
I-api_mention	1802	1803	)
O	1804	1812	contract
O	1813	1823	conformity
O	1824	1825	(
O	1825	1837	immutability
O	1837	1838	)
O	1839	1842	for
O	1843	1847	List
O	1848	1849	/
O	1850	1853	Set
O	1854	1864	operations
O	1865	1866	#
O	1866	1868	li
O	1869	1876	Whether
O	1877	1886	identical
O	1887	1894	objects
O	1895	1896	(
O	1896	1897	e
O	1897	1898	.
O	1898	1899	g
O	1899	1900	.
O	1901	1905	from
O	1906	1915	different
O	1916	1924	sessions
O	1924	1925	,
O	1926	1933	dynamic
O	1934	1941	proxies
O	1942	1946	from
O	1947	1953	lazily
O	1953	1954	-
O	1954	1960	loaded
O	1961	1965	data
O	1966	1976	structures
O	1976	1977	)
O	1978	1981	can
O	1982	1984	be
O	1985	1993	detected
O	1994	1995	#
O	1995	1997	li
O	1998	2005	Whether
O	2006	2014	entities
O	2015	2021	behave
O	2022	2031	correctly
O	2032	2034	in
O	2035	2043	detached
O	2044	2045	(
O	2045	2047	or
O	2048	2051	non
O	2051	2052	-
O	2052	2061	persisted
O	2061	2062	)
O	2063	2068	state
O	2069	2071	As
O	2072	2075	far
O	2076	2077	I
O	2078	2081	can
O	2082	2085	see
O	2085	2086	,
O	2087	2092	there
O	2093	2096	are
O	2097	2102	three
O	2103	2110	options
O	2111	2112	:
O	2113	2114	#
O	2114	2116	li
O	2117	2119	Do
O	2120	2123	not
O	2124	2132	override
O	2133	2137	them
O	2137	2138	;
O	2139	2143	rely
O	2144	2146	on
B-api_mention	2147	2153	Object
I-api_mention	2153	2154	.
I-api_mention	2154	2160	equals
I-api_mention	2160	2161	(
I-api_mention	2161	2165	args
I-api_mention	2165	2166	)
O	2167	2170	and
B-api_mention	2171	2177	Object
I-api_mention	2177	2178	.
I-api_mention	2178	2186	hashCode
I-api_mention	2186	2187	(
I-api_mention	2187	2191	args
I-api_mention	2191	2192	)
O	2193	2194	#
O	2194	2196	li
B-api_mention	2197	2205	hashCode
I-api_mention	2205	2206	(
I-api_mention	2206	2210	args
I-api_mention	2210	2211	)
O	2212	2213	/
B-api_mention	2214	2220	equals
I-api_mention	2220	2221	(
I-api_mention	2221	2225	args
I-api_mention	2225	2226	)
O	2227	2231	work
O	2232	2233	#
O	2233	2235	li
O	2236	2242	cannot
O	2243	2251	identify
O	2252	2261	identical
O	2262	2269	objects
O	2269	2270	,
O	2271	2279	problems
O	2280	2284	with
O	2285	2292	dynamic
O	2293	2300	proxies
O	2301	2302	#
O	2302	2304	li
O	2305	2307	no
O	2308	2316	problems
O	2317	2321	with
O	2322	2330	detached
O	2331	2339	entities
O	2340	2341	#
O	2341	2343	li
O	2344	2352	Override
O	2353	2357	them
O	2357	2358	,
O	2359	2364	based
O	2365	2367	on
O	2368	2371	the
O	2372	2379	primary
O	2380	2383	key
O	2384	2385	#
O	2385	2387	li
B-api_mention	2388	2396	hashCode
I-api_mention	2396	2397	(
I-api_mention	2397	2401	args
I-api_mention	2401	2402	)
O	2403	2404	/
B-api_mention	2405	2411	equals
I-api_mention	2411	2412	(
I-api_mention	2412	2416	args
I-api_mention	2416	2417	)
O	2418	2421	are
O	2422	2428	broken
O	2429	2430	#
O	2430	2432	li
O	2433	2440	correct
O	2441	2449	identity
O	2450	2451	(
O	2451	2454	for
O	2455	2458	all
O	2459	2466	managed
O	2467	2475	entities
O	2475	2476	)
O	2477	2478	#
O	2478	2480	li
O	2481	2489	problems
O	2490	2494	with
O	2495	2503	detached
O	2504	2512	entities
O	2513	2514	#
O	2514	2516	li
O	2517	2525	Override
O	2526	2530	them
O	2530	2531	,
O	2532	2537	based
O	2538	2540	on
O	2541	2544	the
O	2545	2553	Business
O	2553	2554	-
O	2554	2556	Id
O	2557	2558	(
O	2558	2561	non
O	2561	2562	-
O	2562	2569	primary
O	2570	2573	key
O	2574	2580	fields
O	2580	2581	;
O	2582	2586	what
O	2587	2592	about
O	2593	2600	foreign
O	2601	2605	keys
O	2605	2606	?
O	2606	2607	)
O	2608	2609	#
O	2609	2611	li
B-api_mention	2612	2620	hashCode
I-api_mention	2620	2621	(
I-api_mention	2621	2625	args
I-api_mention	2625	2626	)
O	2627	2628	/
B-api_mention	2629	2635	equals
I-api_mention	2635	2636	(
I-api_mention	2636	2640	args
I-api_mention	2640	2641	)
O	2642	2645	are
O	2646	2652	broken
O	2653	2654	#
O	2654	2656	li
O	2657	2664	correct
O	2665	2673	identity
O	2674	2675	(
O	2675	2678	for
O	2679	2682	all
O	2683	2690	managed
O	2691	2699	entities
O	2699	2700	)
O	2701	2702	#
O	2702	2704	li
O	2705	2707	no
O	2708	2716	problems
O	2717	2721	with
O	2722	2730	detached
O	2731	2739	entities
O	2740	2742	My
O	2743	2752	questions
O	2753	2756	are
O	2756	2757	:
O	2758	2759	#
O	2759	2761	li
O	2762	2765	Did
O	2766	2767	I
O	2768	2772	miss
O	2773	2775	an
O	2776	2782	option
O	2783	2786	and
O	2786	2787	/
O	2787	2789	or
O	2790	2793	pro
O	2793	2794	/
O	2794	2797	con
O	2798	2803	point
O	2803	2804	?

O	2805	2806	#
O	2806	2808	li
O	2809	2813	What
O	2814	2820	option
O	2821	2824	did
O	2825	2828	you
O	2829	2835	choose
O	2836	2839	and
O	2840	2843	why
O	2843	2844	?

O	2845	2851	UPDATE
O	2852	2853	1
O	2853	2854	:
O	2855	2857	By
O	2858	2859	"
B-api_mention	2860	2868	hashCode
I-api_mention	2868	2869	(
I-api_mention	2869	2873	args
I-api_mention	2873	2874	)
O	2875	2876	/
B-api_mention	2877	2883	equals
I-api_mention	2883	2884	(
I-api_mention	2884	2888	args
I-api_mention	2888	2889	)
O	2890	2893	are
O	2894	2900	broken
O	2900	2901	"
O	2901	2902	,
O	2903	2904	I
O	2905	2909	mean
O	2910	2914	that
O	2915	2925	successive
B-api_mention	2926	2934	hashCode
I-api_mention	2934	2935	(
I-api_mention	2935	2939	args
I-api_mention	2939	2940	)
O	2941	2952	invocations
O	2953	2956	may
O	2957	2963	return
O	2964	2973	differing
O	2974	2980	values
O	2980	2981	,
O	2982	2987	which
O	2988	2990	is
O	2991	2992	(
O	2992	2996	when
O	2997	3006	correctly
O	3007	3018	implemented
O	3018	3019	)
O	3020	3023	not
O	3024	3030	broken
O	3031	3033	in
O	3034	3037	the
O	3038	3043	sense
O	3044	3046	of
O	3047	3050	the
O	3051	3057	Object
O	3058	3061	API
O	3062	3075	documentation
O	3075	3076	,
O	3077	3080	but
O	3081	3086	which
O	3087	3093	causes
O	3094	3102	problems
O	3103	3107	when
O	3108	3114	trying
O	3115	3117	to
O	3118	3126	retrieve
O	3127	3128	a
O	3129	3136	changed
O	3137	3143	entity
O	3144	3148	from
O	3149	3150	a
O	3151	3154	Map
O	3155	3156	,
O	3157	3160	Set
O	3161	3163	or
O	3164	3169	other
O	3170	3174	hash
O	3174	3175	-
O	3175	3180	based
O	3181	3191	Collection
O	3192	3193	.

O	3194	3206	Consequently
O	3206	3207	,
O	3208	3211	JPA
O	3212	3227	implementations
O	3228	3229	(
O	3229	3231	at
O	3232	3237	least
O	3238	3249	EclipseLink
O	3249	3250	)
O	3251	3255	will
O	3256	3259	not
O	3260	3264	work
O	3265	3274	correctly
O	3275	3277	in
O	3278	3282	some
O	3283	3288	cases
O	3288	3289	.

O	3290	3296	UPDATE
O	3297	3298	2
O	3298	3299	:
O	3300	3305	Thank
O	3306	3309	you
O	3310	3313	for
O	3314	3318	your
O	3319	3326	answers
O	3327	3328	-
O	3328	3329	-
O	3330	3334	most
O	3335	3337	of
O	3338	3342	them
O	3343	3347	have
O	3348	3358	remarkable
O	3359	3366	quality
O	3366	3367	.

O	3368	3381	Unfortunately
O	3381	3382	,
O	3383	3384	I
O	3385	3387	am
O	3388	3393	still
O	3394	3400	unsure
O	3401	3406	which
O	3407	3415	approach
O	3416	3420	will
O	3421	3423	be
O	3424	3427	the
O	3428	3432	best
O	3433	3436	for
O	3437	3438	a
O	3439	3443	real
O	3443	3444	-
O	3444	3448	life
O	3449	3460	application
O	3460	3461	,
O	3462	3464	or
O	3465	3468	how
O	3469	3471	to
O	3472	3481	determine
O	3482	3485	the
O	3486	3490	best
O	3491	3499	approach
O	3500	3503	for
O	3504	3506	my
O	3507	3518	application
O	3518	3519	.

O	3520	3522	So
O	3522	3523	,
O	3524	3525	I
O	3525	3526	'
O	3526	3528	ll
O	3529	3533	keep
O	3534	3537	the
O	3538	3546	question
O	3547	3551	open
O	3552	3555	and
O	3556	3560	hope
O	3561	3564	for
O	3565	3569	some
O	3570	3574	more
O	3575	3586	discussions
O	3587	3590	and
O	3590	3591	/
O	3591	3593	or
O	3594	3602	opinions
O	3602	3603	.

O	3605	3613	Question
O	3613	3614	-
O	3614	3621	5011932

O	3622	3623	I
O	3624	3626	am
O	3627	3634	storing
O	3635	3636	a
O	3637	3640	SQL
O	3641	3646	query
O	3647	3649	in
O	3650	3652	my
O	3653	3660	strings
O	3660	3661	.
O	3661	3664	xml
O	3665	3669	file
O	3670	3673	and
O	3674	3675	I
O	3676	3680	want
O	3681	3683	to
O	3684	3687	use
B-api_mention	3688	3694	String
I-api_mention	3694	3695	.
I-api_mention	3695	3701	Format
O	3702	3704	to
O	3705	3710	build
O	3711	3714	the
O	3715	3720	final
O	3721	3727	string
O	3728	3730	in
O	3731	3735	code
O	3735	3736	.

O	3737	3740	The
O	3741	3747	SELECT
O	3748	3757	statement
O	3758	3762	uses
O	3763	3764	a
O	3765	3769	like
O	3769	3770	,
O	3771	3780	something
O	3781	3785	like
O	3786	3790	this
O	3790	3791	:
O	3792	3798	SELECT
O	3799	3805	Field1
O	3805	3806	,
O	3807	3813	Field2
O	3814	3818	FROM
O	3819	3826	mytable
O	3827	3832	WHERE
O	3833	3839	Field1
O	3840	3844	LIKE
O	3845	3846	'
O	3846	3847	%
O	3847	3856	something
O	3856	3857	%
O	3857	3858	'
O	3859	3861	In
O	3862	3867	order
O	3868	3870	to
O	3871	3877	format
O	3878	3882	that
O	3883	3884	I
O	3885	3892	replace
O	3893	3894	'
O	3894	3903	something
O	3903	3904	'
O	3905	3909	with
O	3910	3911	%
O	3911	3912	1
O	3912	3913	$
O	3913	3914	s
O	3915	3917	so
O	3918	3920	it
O	3921	3928	becomes
O	3928	3929	:
O	3930	3936	SELECT
O	3937	3943	Field1
O	3943	3944	,
O	3945	3951	Field2
O	3952	3956	FROM
O	3957	3964	mytable
O	3965	3970	WHERE
O	3971	3977	Field1
O	3978	3982	LIKE
O	3983	3984	\
O	3984	3985	'
O	3985	3986	%
O	3986	3987	%
O	3987	3988	1
O	3988	3989	$
O	3989	3990	s
O	3990	3991	%
O	3991	3992	\
O	3992	3993	'
O	3994	3995	I
O	3996	4002	escape
O	4003	4006	the
O	4007	4013	single
O	4014	4020	quotes
O	4021	4025	with
O	4026	4029	the
O	4030	4039	backslash
O	4039	4040	.

O	4041	4048	However
O	4049	4050	I
O	4051	4053	am
O	4054	4057	not
O	4058	4062	able
O	4063	4065	to
O	4066	4072	escape
O	4073	4076	the
O	4077	4078	%
O	4079	4083	sign
O	4083	4084	.

O	4085	4088	How
O	4089	4092	can
O	4093	4094	I
O	4095	4102	include
O	4103	4104	a
O	4105	4109	like
O	4110	4119	statement
O	4120	4122	in
O	4123	4125	my
O	4126	4133	strings
O	4133	4134	.
O	4134	4137	xml
O	4138	4142	file
O	4142	4143	?

O	4145	4153	Question
O	4153	4154	-
O	4154	4161	5439529

O	4162	4163	I
O	4163	4164	'
O	4164	4165	m
O	4166	4172	trying
O	4173	4175	to
O	4176	4185	determine
O	4186	4188	if
O	4189	4190	a
O	4191	4201	particular
O	4202	4206	item
O	4207	4209	in
O	4210	4212	an
B-api_mention	4213	4218	Array
O	4219	4221	of
O	4222	4229	strings
O	4230	4232	is
O	4233	4235	an
O	4236	4243	integer
O	4244	4246	or
O	4247	4250	not
O	4250	4251	.

O	4252	4253	I
O	4254	4256	am
B-api_mention	4257	4258	.
I-api_mention	4258	4263	split
I-api_mention	4263	4264	(
I-api_mention	4264	4268	args
I-api_mention	4268	4269	)
O	4269	4270	'
O	4270	4273	ing
O	4274	4276	an
O	4277	4282	infix
O	4283	4293	expression
O	4294	4296	in
B-api_mention	4297	4303	String
O	4304	4308	form
O	4308	4309	,
O	4310	4313	and
O	4314	4318	then
O	4319	4325	trying
O	4326	4328	to
O	4329	4334	split
O	4335	4338	the
O	4339	4348	resultant
O	4349	4354	array
O	4355	4359	into
O	4360	4363	two
O	4364	4370	arrays
O	4370	4371	;
O	4372	4375	one
O	4376	4379	for
O	4380	4388	integers
O	4388	4389	,
O	4390	4393	one
O	4394	4397	for
O	4398	4407	operators
O	4407	4408	,
O	4409	4415	whilst
O	4416	4426	discarding
O	4427	4438	parentheses
O	4438	4439	,
O	4440	4443	and
O	4444	4449	other
O	4450	4463	miscellaneous
O	4464	4469	items
O	4469	4470	.

O	4471	4475	What
O	4476	4481	would
O	4482	4484	be
O	4485	4488	the
O	4489	4493	best
O	4494	4497	way
O	4498	4500	to
O	4501	4511	accomplish
O	4512	4516	this
O	4516	4517	?

O	4518	4519	I
O	4520	4527	thought
O	4528	4529	I
O	4530	4535	might
O	4536	4538	be
O	4539	4543	able
O	4544	4546	to
O	4547	4551	find
O	4552	4553	a
B-api_mention	4554	4561	Integer
I-api_mention	4561	4562	.
I-api_mention	4562	4571	isInteger
I-api_mention	4571	4572	(
I-api_mention	4572	4576	args
I-api_mention	4576	4577	)
O	4578	4584	method
O	4585	4587	or
O	4588	4597	something
O	4597	4598	,
O	4599	4602	but
O	4603	4605	no
O	4606	4610	such
O	4611	4615	luck
O	4615	4616	.

O	4618	4626	Question
O	4626	4627	-
O	4627	4634	5243754

O	4635	4639	What
O	4640	4642	is
O	4643	4646	the
O	4647	4657	difference
O	4658	4665	between
B-api_mention	4666	4678	getAttribute
I-api_mention	4678	4679	(
I-api_mention	4679	4683	args
I-api_mention	4683	4684	)
O	4685	4688	and
B-api_mention	4689	4701	getParameter
I-api_mention	4701	4702	(
I-api_mention	4702	4706	args
I-api_mention	4706	4707	)
O	4708	4715	methods
O	4716	4722	within
B-api_mention	4723	4741	HttpServletRequest
O	4742	4747	class
O	4747	4748	?

O	4750	4758	Question
O	4758	4759	-
O	4759	4766	4812570

O	4767	4770	How
O	4771	4774	can
O	4775	4776	I
O	4777	4780	get
O	4781	4784	the
O	4785	4786	e
B-api_mention	4786	4787	.
I-api_mention	4787	4802	printStackTrace
I-api_mention	4802	4803	(
I-api_mention	4803	4807	args
I-api_mention	4807	4808	)
O	4809	4812	and
O	4813	4818	store
O	4819	4821	it
O	4822	4826	into
O	4827	4828	a
B-api_mention	4829	4835	String
O	4836	4844	variable
O	4844	4845	?

O	4846	4847	I
O	4848	4852	want
O	4853	4855	to
O	4856	4859	use
O	4860	4863	the
O	4864	4870	string
O	4871	4880	generated
O	4881	4883	by
O	4884	4885	e
B-api_mention	4885	4886	.
I-api_mention	4886	4901	printStackTrace
I-api_mention	4901	4902	(
I-api_mention	4902	4906	args
I-api_mention	4906	4907	)
O	4908	4913	later
O	4914	4916	in
O	4917	4919	my
O	4920	4927	program
O	4927	4928	.

O	4929	4930	I
O	4930	4931	'
O	4931	4932	m
O	4933	4938	still
O	4939	4942	new
O	4943	4945	to
O	4946	4950	Java
O	4951	4953	so
O	4954	4955	I
O	4955	4956	'
O	4956	4957	m
O	4958	4961	not
O	4962	4965	too
O	4966	4974	familiar
O	4975	4979	with
B-api_mention	4980	4992	StringWriter
O	4993	4997	that
O	4998	4999	I
O	5000	5005	think
O	5006	5010	will
O	5011	5013	be
O	5014	5017	the
O	5018	5026	solution
O	5026	5027	.

O	5028	5030	Or
O	5031	5033	if
O	5034	5037	you
O	5038	5042	have
O	5043	5046	any
O	5047	5052	other
O	5053	5058	ideas
O	5059	5065	please
O	5066	5069	let
O	5070	5072	me
O	5073	5077	know
O	5077	5078	.

O	5079	5085	Thanks

O	5087	5095	Question
O	5095	5096	-
O	5096	5103	6470651
O	5103	5104	,
O	5105	5111	answer
O	5111	5112	-
O	5112	5119	6470695

O	5120	5121	A
O	5122	5128	simple
O	5129	5134	thing
O	5135	5137	to
O	5138	5140	do
O	5141	5143	is
O	5144	5146	to
O	5147	5150	use
O	5151	5152	a
B-api_mention	5153	5160	HashSet
O	5161	5165	with
O	5166	5168	an
O	5169	5178	incorrect
O	5179	5180	(
O	5180	5182	or
O	5183	5186	non
O	5186	5187	-
O	5187	5195	existent
O	5195	5196	)
B-api_mention	5197	5205	hashCode
I-api_mention	5205	5206	(
I-api_mention	5206	5210	args
I-api_mention	5210	5211	)
O	5212	5214	or
B-api_mention	5215	5221	equals
I-api_mention	5221	5222	(
I-api_mention	5222	5226	args
I-api_mention	5226	5227	)
O	5228	5229	,
O	5230	5233	and
O	5234	5238	then
O	5239	5243	keep
O	5244	5250	adding
O	5251	5252	"
O	5252	5262	duplicates
O	5262	5263	"
O	5263	5264	.

O	5265	5272	Instead
O	5273	5275	of
O	5276	5284	ignoring
O	5285	5295	duplicates
O	5296	5298	as
O	5299	5301	it
O	5302	5308	should
O	5308	5309	,
O	5310	5313	the
O	5314	5317	set
O	5318	5322	will
O	5323	5327	only
O	5328	5332	ever
O	5333	5337	grow
O	5338	5341	and
O	5342	5345	you
O	5346	5349	won
O	5349	5350	'
O	5350	5351	t
O	5352	5354	be
O	5355	5359	able
O	5360	5362	to
O	5363	5369	remove
O	5370	5374	them
O	5374	5375	.

O	5376	5378	If
O	5379	5382	you
O	5383	5387	want
O	5388	5393	these
O	5394	5397	bad
O	5398	5402	keys
O	5402	5403	/
O	5403	5411	elements
O	5412	5414	to
O	5415	5419	hang
O	5420	5426	around
O	5427	5430	you
O	5431	5434	can
O	5435	5438	use
O	5439	5440	a
O	5441	5447	static
O	5448	5453	field
O	5454	5458	like
O	5459	5460	#
O	5460	5463	pre

O	5465	5473	Question
O	5473	5474	-
O	5474	5481	6470651
O	5481	5482	,
O	5483	5489	answer
O	5489	5490	-
O	5490	5497	6540248

O	5498	5503	Below
O	5504	5509	there
O	5510	5514	will
O	5515	5517	be
O	5518	5519	a
O	5520	5523	non
O	5523	5524	-
O	5524	5531	obvious
O	5532	5536	case
O	5537	5542	where
O	5543	5547	Java
O	5548	5553	leaks
O	5553	5554	,
O	5555	5562	besides
O	5563	5566	the
O	5567	5575	standard
O	5576	5580	case
O	5581	5583	of
O	5584	5593	forgotten
O	5594	5603	listeners
O	5603	5604	,
O	5605	5611	static
O	5612	5622	references
O	5622	5623	,
O	5624	5629	bogus
O	5629	5630	/
O	5630	5640	modifiable
O	5641	5645	keys
O	5646	5648	in
O	5649	5657	hashmaps
O	5657	5658	,
O	5659	5661	or
O	5662	5666	just
O	5667	5674	threads
O	5675	5680	stuck
O	5681	5688	without
O	5689	5692	any
O	5693	5699	chance
O	5700	5702	to
O	5703	5706	end
O	5707	5712	their
O	5713	5717	life
O	5717	5718	-
O	5718	5723	cycle
O	5723	5724	.

O	5725	5726	#
O	5726	5728	li
B-api_mention	5729	5733	File
I-api_mention	5733	5734	.
I-api_mention	5734	5746	deleteOnExit
I-api_mention	5746	5747	(
I-api_mention	5747	5751	args
I-api_mention	5751	5752	)
O	5753	5754	-
O	5755	5761	always
O	5762	5767	leaks
O	5768	5771	the
O	5772	5778	string
O	5778	5779	,
O	5780	5782	if
O	5783	5786	the
O	5787	5793	string
O	5794	5796	is
O	5797	5798	a
O	5799	5808	substring
O	5808	5809	,
O	5810	5813	the
O	5814	5818	leak
O	5819	5821	is
O	5822	5826	even
O	5827	5832	worse
O	5833	5834	(
O	5834	5837	the
O	5838	5848	underlying
O	5849	5853	char
O	5853	5854	[
O	5854	5855	]
O	5856	5858	is
O	5859	5863	also
O	5864	5870	leaked
O	5870	5871	)
O	5872	5873	-
O	5874	5876	in
O	5877	5881	Java
O	5882	5883	7
O	5884	5893	substring
O	5894	5898	also
O	5899	5905	copies
O	5906	5909	the
O	5910	5914	char
O	5914	5915	[
O	5915	5916	]
O	5917	5918	,
O	5919	5921	so
O	5922	5925	the
O	5926	5931	later
O	5932	5937	doesn
O	5937	5938	'
O	5938	5939	t
O	5940	5945	apply
O	5946	5947	;
O	5948	5949	@
O	5949	5955	Daniel
O	5955	5956	,
O	5957	5959	no
O	5960	5965	needs
O	5966	5969	for
O	5970	5975	votes
O	5975	5976	,
O	5977	5983	though
O	5983	5984	.

O	5985	5986	I
O	5986	5987	'
O	5987	5989	ll
O	5990	6001	concentrate
O	6002	6004	on
O	6005	6012	threads
O	6013	6015	to
O	6016	6020	show
O	6021	6024	the
O	6025	6031	danger
O	6032	6034	of
O	6035	6044	unmanaged
O	6045	6052	threads
O	6053	6059	mostly
O	6059	6060	,
O	6061	6064	don
O	6064	6065	'
O	6065	6066	t
O	6067	6071	wish
O	6072	6074	to
O	6075	6079	even
O	6080	6085	touch
O	6086	6091	swing
O	6091	6092	.

O	6093	6094	#
O	6094	6096	li
B-api_mention	6097	6104	Runtime
I-api_mention	6104	6105	.
I-api_mention	6105	6120	addShutdownHook
O	6121	6124	and
O	6125	6128	not
O	6129	6135	remove
O	6135	6136	.
O	6136	6137	.
O	6137	6138	.
O	6139	6142	and
O	6143	6147	then
O	6148	6152	even
O	6153	6157	with
B-api_mention	6158	6176	removeShutdownHook
O	6177	6180	due
O	6181	6183	to
O	6184	6185	a
O	6186	6189	bug
O	6190	6192	in
B-api_mention	6193	6204	ThreadGroup
O	6205	6210	class
O	6211	6220	regarding
O	6221	6230	unstarted
O	6231	6238	threads
O	6239	6241	it
O	6242	6245	may
O	6246	6249	not
O	6250	6253	get
O	6254	6263	collected
O	6263	6264	,
O	6265	6276	effectively
O	6277	6281	leak
O	6282	6285	the
B-api_mention	6286	6297	ThreadGroup
O	6297	6298	.

O	6299	6305	JGroup
O	6306	6309	has
O	6310	6313	the
O	6314	6318	leak
O	6319	6321	in
O	6322	6334	GossipRouter
O	6334	6335	.

O	6336	6337	#
O	6337	6339	li
O	6340	6348	Creating
O	6348	6349	,
O	6350	6353	but
O	6354	6357	not
O	6358	6366	starting
O	6366	6367	,
O	6368	6369	a
B-api_mention	6370	6376	Thread
O	6377	6381	goes
O	6382	6386	into
O	6387	6390	the
O	6391	6395	same
O	6396	6404	category
O	6405	6407	as
O	6408	6413	above
O	6413	6414	.

O	6415	6416	#
O	6416	6418	li
O	6419	6427	Creating
O	6428	6429	a
O	6430	6436	thread
O	6437	6445	inherits
O	6446	6449	the
B-api_mention	6450	6468	ContextClassLoader
O	6469	6472	and
B-api_mention	6473	6493	AccessControlContext
O	6494	6495	,
O	6496	6500	plus
O	6501	6504	the
B-api_mention	6505	6516	ThreadGroup
O	6517	6520	and
O	6521	6524	any
B-api_mention	6525	6545	InheritedThreadLocal
O	6546	6547	,
O	6548	6551	all
O	6552	6557	those
O	6558	6568	references
O	6569	6572	are
O	6573	6582	potential
O	6583	6588	leaks
O	6588	6589	,
O	6590	6595	along
O	6596	6600	with
O	6601	6604	the
O	6605	6611	entire
O	6612	6619	classes
O	6620	6626	loaded
O	6627	6629	by
O	6630	6633	the
O	6634	6645	classloader
O	6646	6649	and
O	6650	6653	all
O	6654	6660	static
O	6661	6671	references
O	6671	6672	,
O	6673	6676	and
O	6677	6679	ja
O	6679	6680	-
O	6680	6682	ja
O	6682	6683	.

O	6684	6687	The
O	6688	6694	effect
O	6695	6697	is
O	6698	6708	especially
O	6709	6716	visible
O	6717	6721	with
O	6722	6725	the
O	6726	6732	entire
O	6733	6734	j
O	6734	6735	.
O	6735	6736	u
O	6736	6737	.
O	6737	6738	c
O	6738	6739	.
O	6739	6747	Executor
O	6748	6757	framework
O	6758	6762	that
O	6763	6771	features
O	6772	6773	a
O	6774	6779	super
O	6780	6786	simple
B-api_mention	6787	6800	ThreadFactory
O	6801	6810	interface
O	6810	6811	,
O	6812	6815	yet
O	6816	6820	most
O	6821	6831	developers
O	6832	6836	have
O	6837	6839	no
O	6840	6844	clue
O	6845	6847	of
O	6848	6851	the
O	6852	6859	lurking
O	6860	6866	danger
O	6866	6867	.

O	6868	6872	Also
O	6873	6874	a
O	6875	6878	lot
O	6879	6881	of
O	6882	6891	libraries
O	6892	6894	do
O	6895	6900	start
O	6901	6908	threads
O	6909	6913	upon
O	6914	6921	request
O	6922	6923	(
O	6923	6926	way
O	6927	6930	too
O	6931	6935	many
O	6936	6944	industry
O	6945	6952	popular
O	6953	6962	libraries
O	6962	6963	)
O	6963	6964	.

O	6965	6966	#
O	6966	6968	li
O	6969	6980	ThreadLocal
O	6981	6987	caches
O	6987	6988	;
O	6989	6994	those
O	6995	6998	are
O	6999	7003	evil
O	7004	7006	in
O	7007	7011	many
O	7012	7017	cases
O	7017	7018	.

O	7019	7020	I
O	7021	7023	am
O	7024	7028	sure
O	7029	7037	everyone
O	7038	7041	has
O	7042	7046	seen
O	7047	7052	quite
O	7053	7054	a
O	7055	7058	bit
O	7059	7061	of
O	7062	7068	simple
O	7069	7075	caches
O	7076	7081	based
O	7082	7084	on
B-api_mention	7085	7096	ThreadLocal
O	7096	7097	,
O	7098	7102	well
O	7103	7106	the
O	7107	7110	bad
O	7111	7115	news
O	7115	7116	:
O	7117	7119	if
O	7120	7123	the
O	7124	7130	thread
O	7131	7136	keeps
O	7137	7142	going
O	7143	7147	more
O	7148	7152	than
O	7153	7161	expected
O	7162	7165	the
O	7166	7170	life
O	7171	7174	the
O	7175	7182	context
B-api_mention	7183	7194	ClassLoader
O	7194	7195	,
O	7196	7198	it
O	7199	7201	is
O	7202	7203	a
O	7204	7208	pure
O	7209	7213	nice
O	7214	7220	little
O	7221	7225	leak
O	7225	7226	.

O	7227	7229	Do
O	7230	7233	not
O	7234	7237	use
B-api_mention	7238	7249	ThreadLocal
O	7250	7256	caches
O	7257	7263	unless
O	7264	7270	really
O	7271	7277	needed
O	7277	7278	.

O	7279	7280	#
O	7280	7282	li
O	7283	7290	Calling
B-api_mention	7291	7302	ThreadGroup
I-api_mention	7302	7303	.
I-api_mention	7303	7310	destroy
I-api_mention	7310	7311	(
I-api_mention	7311	7315	args
I-api_mention	7315	7316	)
O	7317	7321	when
O	7322	7325	the
B-api_mention	7326	7337	ThreadGroup
O	7338	7341	has
O	7342	7344	no
O	7345	7352	threads
O	7353	7359	itself
O	7359	7360	,
O	7361	7364	but
O	7365	7367	it
O	7368	7373	still
O	7374	7379	keeps
O	7380	7385	child
B-api_mention	7386	7398	ThreadGroups
O	7398	7399	.

O	7400	7401	A
O	7402	7405	bad
O	7406	7410	leak
O	7411	7415	that
O	7416	7420	will
O	7421	7428	prevent
O	7429	7432	the
B-api_mention	7433	7444	ThreadGroup
O	7445	7447	to
O	7448	7454	remove
O	7455	7459	from
O	7460	7463	its
O	7464	7470	parent
O	7470	7471	,
O	7472	7475	but
O	7476	7479	all
O	7480	7483	the
O	7484	7492	children
O	7493	7499	become
O	7500	7502	un
O	7502	7503	-
O	7503	7516	enumerateable
O	7516	7517	.

O	7518	7519	#
O	7519	7521	li
O	7522	7527	Using
B-api_mention	7528	7539	WeakHashMap
O	7540	7543	and
O	7544	7547	the
O	7548	7553	value
O	7554	7555	(
O	7555	7557	in
O	7557	7558	)
O	7558	7566	directly
O	7567	7577	references
O	7578	7581	the
O	7582	7585	key
O	7585	7586	.

O	7587	7591	This
O	7592	7594	is
O	7595	7596	a
O	7597	7601	hard
O	7602	7605	one
O	7606	7608	to
O	7609	7613	find
O	7614	7621	without
O	7622	7623	a
O	7624	7628	heap
O	7629	7633	dump
O	7633	7634	.

O	7635	7639	That
O	7640	7647	applies
O	7648	7650	to
O	7651	7654	all
O	7655	7663	extended
O	7664	7668	Weak
O	7668	7669	/
B-api_mention	7669	7682	SoftReference
O	7683	7687	that
O	7688	7693	might
O	7694	7698	keep
O	7699	7700	a
O	7701	7705	hard
O	7706	7715	reference
O	7716	7720	back
O	7721	7723	to
O	7724	7727	the
O	7728	7735	guarded
O	7736	7742	object
O	7742	7743	.

O	7744	7745	#
O	7745	7747	li
O	7748	7753	Using
B-api_mention	7754	7758	java
I-api_mention	7758	7759	.
I-api_mention	7759	7762	net
I-api_mention	7762	7763	.
I-api_mention	7763	7766	URL
O	7767	7771	with
O	7772	7775	the
O	7776	7780	HTTP
O	7780	7781	(
O	7781	7782	S
O	7782	7783	)
O	7784	7792	protocol
O	7793	7796	and
O	7797	7804	loading
O	7805	7808	the
O	7809	7817	resource
O	7818	7822	from
O	7822	7823	(
O	7823	7824	!
O	7824	7825	)
O	7825	7826	.

O	7827	7831	This
O	7832	7835	one
O	7836	7838	is
O	7839	7846	special
O	7846	7847	,
O	7848	7851	the
B-api_mention	7852	7866	KeepAliveCache
O	7867	7874	creates
O	7875	7876	a
O	7877	7880	new
O	7881	7887	thread
O	7888	7890	in
O	7891	7894	the
O	7895	7901	system
B-api_mention	7902	7913	ThreadGroup
O	7914	7919	which
O	7920	7925	leaks
O	7926	7929	the
O	7930	7937	current
O	7938	7944	thread
O	7944	7945	'
O	7945	7946	s
O	7947	7954	context
O	7955	7966	classloader
O	7966	7967	.

O	7968	7971	The
O	7972	7978	thread
O	7979	7981	is
O	7982	7989	created
O	7990	7994	upon
O	7995	7998	the
O	7999	8004	first
O	8005	8012	request
O	8013	8017	when
O	8018	8020	no
O	8021	8026	alive
O	8027	8033	thread
O	8034	8040	exists
O	8040	8041	,
O	8042	8044	so
O	8045	8051	either
O	8052	8055	you
O	8056	8059	may
O	8060	8063	get
O	8064	8069	lucky
O	8070	8072	or
O	8073	8077	just
O	8078	8082	leak
O	8082	8083	.

O	8084	8087	The
O	8088	8092	leak
O	8093	8095	is
O	8096	8103	already
O	8104	8109	fixed
O	8110	8112	in
O	8113	8117	Java
O	8118	8119	7
O	8120	8123	and
O	8124	8127	the
O	8128	8132	code
O	8133	8137	that
O	8138	8145	creates
O	8146	8152	thread
O	8153	8161	properly
O	8162	8169	removes
O	8170	8173	the
O	8174	8181	context
O	8182	8193	classloader
O	8193	8194	.

O	8195	8200	There
O	8201	8204	are
O	8205	8208	few
O	8209	8213	more
O	8214	8219	cases
O	8220	8221	(
O	8222	8226	like
B-api_mention	8227	8239	ImageFetcher
O	8240	8241	,
O	8242	8246	also
O	8247	8252	fixed
O	8253	8254	)
O	8255	8257	of
O	8258	8266	creating
O	8267	8274	similar
O	8275	8282	threads
O	8282	8283	.

O	8284	8285	#
O	8285	8287	li
O	8288	8293	Using
B-api_mention	8294	8313	InflaterInputStream
O	8314	8321	passing
O	8322	8325	new
B-api_mention	8326	8330	java
I-api_mention	8330	8331	.
I-api_mention	8331	8335	util
I-api_mention	8335	8336	.
I-api_mention	8336	8339	zip
I-api_mention	8339	8340	.
I-api_mention	8340	8348	Inflater
I-api_mention	8348	8349	(
I-api_mention	8349	8353	args
I-api_mention	8353	8354	)
O	8355	8357	in
O	8358	8361	the
O	8362	8373	constructor
O	8374	8375	(
B-api_mention	8376	8391	PNGImageDecoder
O	8392	8395	for
O	8396	8404	instance
O	8404	8405	)
O	8406	8409	and
O	8410	8413	not
O	8414	8421	calling
B-api_mention	8422	8425	end
I-api_mention	8425	8426	(
I-api_mention	8426	8430	args
I-api_mention	8430	8431	)
O	8432	8434	of
O	8435	8438	the
O	8439	8447	inflater
O	8447	8448	.

O	8449	8453	Well
O	8453	8454	,
O	8455	8457	if
O	8458	8461	you
O	8462	8466	pass
O	8467	8469	in
O	8470	8473	the
O	8474	8485	constructor
O	8486	8490	with
O	8491	8495	just
O	8496	8499	new
O	8500	8501	,
O	8502	8504	no
O	8505	8511	chance
O	8511	8512	.
O	8512	8513	.
O	8513	8514	.

O	8515	8518	And
O	8519	8522	yes
O	8522	8523	,
O	8524	8531	calling
B-api_mention	8532	8537	close
I-api_mention	8537	8538	(
I-api_mention	8538	8542	args
I-api_mention	8542	8543	)
O	8544	8546	on
O	8547	8550	the
O	8551	8557	stream
O	8558	8562	does
O	8563	8566	not
O	8567	8572	close
O	8573	8576	the
O	8577	8585	inflater
O	8586	8588	if
O	8589	8591	it
O	8591	8592	'
O	8592	8593	s
O	8594	8602	manually
O	8603	8609	passed
O	8610	8612	as
O	8613	8624	constructor
O	8625	8634	parameter
O	8634	8635	.

O	8636	8640	This
O	8641	8643	is
O	8644	8647	not
O	8648	8649	a
O	8650	8654	true
O	8655	8659	leak
O	8660	8665	since
O	8666	8668	it
O	8668	8669	'
O	8669	8670	d
O	8671	8673	be
O	8674	8682	released
O	8683	8685	by
O	8686	8689	the
O	8690	8699	finalizer
O	8699	8700	.
O	8700	8701	.
O	8701	8702	.
O	8703	8707	when
O	8708	8710	it
O	8711	8716	deems
O	8717	8719	it
O	8720	8729	necessary
O	8729	8730	.

O	8731	8735	Till
O	8736	8740	that
O	8741	8747	moment
O	8748	8750	it
O	8751	8755	eats
O	8756	8762	native
O	8763	8769	memory
O	8770	8772	so
O	8773	8778	badly
O	8779	8781	it
O	8782	8785	can
O	8786	8791	cause
O	8792	8797	Linux
O	8798	8801	oom
O	8801	8802	_
O	8802	8808	killer
O	8809	8811	to
O	8812	8816	kill
O	8817	8820	the
O	8821	8828	process
O	8829	8833	with
O	8834	8842	impunity
O	8842	8843	.

O	8844	8847	The
O	8848	8852	main
O	8853	8858	issue
O	8859	8861	is
O	8862	8866	that
O	8867	8879	finalization
O	8880	8882	in
O	8883	8887	Java
O	8888	8890	is
O	8891	8895	very
O	8896	8906	unreliable
O	8907	8910	and
O	8911	8913	G1
O	8914	8918	made
O	8919	8921	it
O	8922	8927	worse
O	8928	8932	till
O	8933	8934	7
O	8934	8935	.
O	8935	8936	0
O	8936	8937	.
O	8937	8938	2
O	8938	8939	.

O	8940	8945	Moral
O	8946	8948	of
O	8949	8952	the
O	8953	8958	story
O	8958	8959	:
O	8960	8967	release
O	8968	8974	native
O	8975	8984	resources
O	8985	8987	as
O	8988	8992	soon
O	8993	8995	as
O	8996	8999	you
O	9000	9003	can
O	9003	9004	;
O	9005	9008	the
O	9009	9018	finalizer
O	9019	9021	is
O	9022	9026	just
O	9027	9030	too
O	9031	9035	poor
O	9035	9036	.

O	9037	9038	#
O	9038	9040	li
O	9041	9044	The
O	9045	9049	same
O	9050	9054	case
O	9055	9059	with
B-api_mention	9060	9064	java
I-api_mention	9064	9065	.
I-api_mention	9065	9069	util
I-api_mention	9069	9070	.
I-api_mention	9070	9073	zip
I-api_mention	9073	9074	.
I-api_mention	9074	9082	Deflater
O	9083	9084	.

O	9085	9089	This
O	9090	9093	one
O	9094	9096	is
O	9097	9100	far
O	9101	9106	worse
O	9107	9112	since
B-api_mention	9113	9121	Deflater
O	9122	9124	is
O	9125	9131	memory
O	9132	9138	hungry
O	9139	9141	in
O	9142	9146	Java
O	9146	9147	,
O	9148	9149	i
O	9149	9150	.
O	9150	9151	e
O	9151	9152	.
O	9153	9159	always
O	9160	9164	uses
O	9165	9167	15
O	9168	9172	bits
O	9173	9174	(
O	9174	9177	max
O	9177	9178	)
O	9179	9182	and
O	9183	9184	8
O	9185	9191	memory
O	9192	9198	levels
O	9199	9200	(
O	9200	9201	9
O	9202	9204	is
O	9205	9208	max
O	9208	9209	)
O	9210	9220	allocating
O	9221	9228	several
O	9229	9237	hundreds
O	9238	9240	KB
O	9241	9243	of
O	9244	9250	native
O	9251	9257	memory
O	9257	9258	.

O	9259	9270	Fortunately
O	9270	9271	,
O	9272	9280	Deflater
O	9281	9283	is
O	9284	9287	not
O	9288	9294	widely
O	9295	9299	used
O	9300	9303	and
O	9304	9306	to
O	9307	9309	my
O	9310	9319	knowledge
O	9320	9323	JDK
O	9324	9332	contains
O	9333	9335	no
O	9336	9343	misuses
O	9343	9344	.

O	9345	9351	Always
O	9352	9356	call
B-api_mention	9357	9360	end
I-api_mention	9360	9361	(
I-api_mention	9361	9365	args
I-api_mention	9365	9366	)
O	9367	9369	if
O	9370	9373	you
O	9374	9382	manually
O	9383	9389	create
O	9390	9391	a
B-api_mention	9392	9400	Deflater
O	9401	9403	or
B-api_mention	9404	9412	Inflater
O	9413	9414	.

O	9415	9418	The
O	9419	9423	best
O	9424	9428	part
O	9429	9431	of
O	9432	9435	the
O	9436	9440	last
O	9441	9444	two
O	9444	9445	:
O	9446	9449	you
O	9450	9453	can
O	9453	9454	'
O	9454	9455	t
O	9456	9460	find
O	9461	9465	them
O	9466	9469	via
O	9470	9476	normal
O	9477	9486	profiling
O	9487	9492	tools
O	9493	9502	available
O	9502	9503	.

O	9504	9505	(
O	9505	9506	I
O	9507	9510	can
O	9511	9514	add
O	9515	9519	some
O	9520	9524	more
O	9525	9529	time
O	9530	9537	wasters
O	9538	9539	I
O	9540	9544	have
O	9545	9556	encountered
O	9557	9561	upon
O	9562	9569	request
O	9569	9570	.
O	9570	9571	)
O	9572	9576	Good
O	9577	9581	luck
O	9582	9585	and
O	9586	9590	stay
O	9591	9595	safe
O	9595	9596	;
O	9597	9602	leaks
O	9603	9606	are
O	9607	9611	evil
O	9611	9612	!

O	9614	9622	Question
O	9622	9623	-
O	9623	9630	6470651
O	9630	9631	,
O	9632	9638	answer
O	9638	9639	-
O	9639	9646	6548647

O	9647	9653	Static
O	9654	9659	field
O	9660	9667	holding
O	9668	9674	object
O	9675	9684	reference
O	9685	9686	[
O	9686	9689	esp
O	9690	9695	final
O	9696	9701	field
O	9701	9702	]
O	9703	9704	#
O	9704	9707	pre
O	9708	9715	Calling
B-api_mention	9716	9722	String
I-api_mention	9722	9723	.
I-api_mention	9723	9729	intern
I-api_mention	9729	9730	(
I-api_mention	9730	9731	)
O	9732	9734	on
O	9735	9742	lengthy
B-api_mention	9743	9749	String
O	9750	9751	#
O	9751	9754	pre
O	9755	9756	(
O	9756	9764	Unclosed
O	9764	9765	)
O	9766	9770	open
O	9771	9778	streams
O	9779	9780	(
O	9781	9785	file
O	9786	9787	,
O	9788	9795	network
O	9796	9799	etc
O	9799	9800	.
O	9800	9801	.
O	9801	9802	.
O	9803	9804	)
O	9805	9806	#
O	9806	9809	pre
O	9810	9818	Unclosed
O	9819	9830	connections
O	9831	9832	#
O	9832	9835	pre
O	9836	9841	Areas
O	9842	9846	that
O	9847	9850	are
O	9851	9862	unreachable
O	9863	9867	from
O	9868	9871	JVM
O	9871	9872	'
O	9872	9873	s
O	9874	9881	garbage
O	9882	9891	collector
O	9892	9893	,
O	9894	9898	such
O	9899	9901	as
O	9902	9908	memory
O	9909	9918	allocated
O	9919	9926	through
O	9927	9933	native
O	9934	9941	methods
O	9942	9944	In
O	9945	9948	web
O	9949	9961	applications
O	9961	9962	,
O	9963	9967	some
O	9968	9975	objects
O	9976	9979	are
O	9980	9986	stored
O	9987	9989	in
O	9990	10001	application
O	10002	10007	scope
O	10008	10013	until
O	10014	10017	the
O	10018	10029	application
O	10030	10032	is
O	10033	10043	explicitly
O	10044	10051	stopped
O	10052	10054	or
O	10055	10062	removed
O	10062	10063	.

B-api_mention	10064	10081	getServletContext
I-api_mention	10081	10082	(
I-api_mention	10082	10086	args
I-api_mention	10086	10087	)
I-api_mention	10087	10088	.
I-api_mention	10088	10100	setAttribute
I-api_mention	10100	10101	(
I-api_mention	10101	10105	args
I-api_mention	10105	10106	)
O	10106	10107	;
O	10108	10117	Incorrect
O	10118	10120	or
O	10121	10134	inappropriate
O	10135	10138	JVM
O	10139	10146	options
O	10147	10148	,
O	10149	10153	such
O	10154	10156	as
O	10157	10160	the
O	10161	10170	noclassgc
O	10171	10177	option
O	10178	10180	on
O	10181	10184	IBM
O	10185	10188	JDK
O	10189	10193	that
O	10194	10202	prevents
O	10203	10209	unused
O	10210	10215	class
O	10216	10223	garbage
O	10224	10234	collection
O	10235	10238	See
O	10239	10242	IBM
O	10243	10246	jdk
O	10247	10255	settings
O	10256	10257	.

O	10259	10267	Question
O	10267	10268	-
O	10268	10275	6470651
O	10275	10276	,
O	10277	10283	answer
O	10283	10284	-
O	10284	10291	6780439

O	10292	10296	Here
O	10296	10297	'
O	10297	10298	s
O	10299	10300	a
O	10301	10307	simple
O	10307	10308	/
O	10308	10316	sinister
O	10317	10320	one
O	10321	10324	via
O	10325	10326	#
O	10326	10327	a
O	10328	10329	.

O	10330	10331	#
O	10331	10334	pre
O	10335	10342	Because
O	10343	10346	the
O	10347	10356	substring
O	10357	10363	refers
O	10364	10366	to
O	10367	10370	the
O	10371	10379	internal
O	10380	10394	representation
O	10395	10397	of
O	10398	10401	the
O	10402	10410	original
O	10410	10411	,
O	10412	10416	much
O	10417	10423	longer
O	10424	10430	string
O	10430	10431	,
O	10432	10435	the
O	10436	10444	original
O	10445	10450	stays
O	10451	10453	in
O	10454	10460	memory
O	10460	10461	.

O	10462	10466	Thus
O	10466	10467	,
O	10468	10470	as
O	10471	10475	long
O	10476	10478	as
O	10479	10482	you
O	10483	10487	have
O	10488	10489	a
B-api_mention	10490	10502	StringLeaker
O	10503	10505	in
O	10506	10510	play
O	10510	10511	,
O	10512	10515	you
O	10516	10520	have
O	10521	10524	the
O	10525	10530	whole
O	10531	10539	original
O	10540	10546	string
O	10547	10549	in
O	10550	10556	memory
O	10556	10557	,
O	10558	10561	too
O	10561	10562	,
O	10563	10567	even
O	10568	10574	though
O	10575	10578	you
O	10579	10584	might
O	10585	10590	think
O	10591	10594	you
O	10594	10595	'
O	10595	10597	re
O	10598	10602	just
O	10603	10610	holding
O	10611	10613	on
O	10614	10616	to
O	10617	10618	a
O	10619	10625	single
O	10625	10626	-
O	10626	10635	character
O	10636	10642	string
O	10642	10643	.

O	10644	10647	The
O	10648	10651	way
O	10652	10654	to
O	10655	10660	avoid
O	10661	10668	storing
O	10669	10671	an
O	10672	10680	unwanted
O	10681	10690	reference
O	10691	10693	to
O	10694	10697	the
O	10698	10706	original
O	10707	10713	string
O	10714	10716	is
O	10717	10719	to
O	10720	10722	do
O	10723	10732	something
O	10733	10737	like
O	10738	10742	this
O	10742	10743	:
O	10744	10745	#
O	10745	10748	pre
O	10749	10752	For
O	10753	10758	added
O	10759	10766	badness
O	10766	10767	,
O	10768	10771	you
O	10772	10777	might
O	10778	10782	also
B-api_mention	10783	10784	.
I-api_mention	10784	10790	intern
I-api_mention	10790	10791	(
I-api_mention	10791	10795	args
I-api_mention	10795	10796	)
O	10797	10800	the
O	10801	10810	substring
O	10810	10811	:
O	10812	10813	#
O	10813	10816	pre
O	10817	10822	Doing
O	10823	10825	so
O	10826	10830	will
O	10831	10835	keep
O	10836	10840	both
O	10841	10844	the
O	10845	10853	original
O	10854	10858	long
O	10859	10865	string
O	10866	10869	and
O	10870	10873	the
O	10874	10881	derived
O	10882	10891	substring
O	10892	10894	in
O	10895	10901	memory
O	10902	10906	even
O	10907	10912	after
O	10913	10916	the
B-api_mention	10917	10929	StringLeaker
O	10930	10938	instance
O	10939	10942	has
O	10943	10947	been
O	10948	10957	discarded
O	10957	10958	.

O	10960	10968	Question
O	10968	10969	-
O	10969	10976	6470651
O	10976	10977	,
O	10978	10984	answer
O	10984	10985	-
O	10985	10993	18544736

O	10994	11001	Threads
O	11002	11005	are
O	11006	11009	not
O	11010	11019	collected
O	11020	11025	until
O	11026	11030	they
O	11031	11040	terminate
O	11040	11041	.

O	11042	11046	They
O	11047	11052	serve
O	11053	11055	as
O	11056	11061	roots
O	11062	11064	of
O	11065	11072	garbage
O	11073	11083	collection
O	11083	11084	.

O	11085	11089	They
O	11090	11093	are
O	11094	11097	one
O	11098	11100	of
O	11101	11104	the
O	11105	11108	few
O	11109	11116	objects
O	11117	11121	that
O	11122	11125	won
O	11125	11126	'
O	11126	11127	t
O	11128	11130	be
O	11131	11140	reclaimed
O	11141	11147	simply
O	11148	11150	by
O	11151	11161	forgetting
O	11162	11167	about
O	11168	11172	them
O	11173	11175	or
O	11176	11184	clearing
O	11185	11195	references
O	11196	11198	to
O	11199	11203	them
O	11203	11204	.

O	11205	11213	Consider
O	11213	11214	:
O	11215	11218	the
O	11219	11224	basic
O	11225	11232	pattern
O	11233	11235	to
O	11236	11245	terminate
O	11246	11247	a
O	11248	11254	worker
O	11255	11261	thread
O	11262	11264	is
O	11265	11267	to
O	11268	11271	set
O	11272	11276	some
O	11277	11286	condition
O	11287	11295	variable
O	11296	11300	seen
O	11301	11303	by
O	11304	11307	the
O	11308	11314	thread
O	11314	11315	.

O	11316	11319	The
O	11320	11326	thread
O	11327	11330	can
O	11331	11336	check
O	11337	11340	the
O	11341	11349	variable
O	11350	11362	periodically
O	11363	11366	and
O	11367	11370	use
O	11371	11375	that
O	11376	11378	as
O	11379	11380	a
O	11381	11387	signal
O	11388	11390	to
O	11391	11400	terminate
O	11400	11401	.

O	11402	11404	If
O	11405	11408	the
O	11409	11417	variable
O	11418	11420	is
O	11421	11424	not
O	11425	11433	declared
O	11434	11442	volatile
O	11443	11444	,
O	11445	11449	then
O	11450	11453	the
O	11454	11460	change
O	11461	11463	to
O	11464	11467	the
O	11468	11476	variable
O	11477	11482	might
O	11483	11486	not
O	11487	11489	be
O	11490	11494	seen
O	11495	11497	by
O	11498	11501	the
O	11502	11508	thread
O	11508	11509	,
O	11510	11512	so
O	11513	11515	it
O	11516	11519	won
O	11519	11520	'
O	11520	11521	t
O	11522	11526	know
O	11527	11529	to
O	11530	11539	terminate
O	11539	11540	.

O	11541	11543	Or
O	11544	11551	imagine
O	11552	11554	if
O	11555	11559	some
O	11560	11567	threads
O	11568	11572	want
O	11573	11575	to
O	11576	11582	update
O	11583	11584	a
O	11585	11591	shared
O	11592	11598	object
O	11598	11599	,
O	11600	11603	but
O	11604	11612	deadlock
O	11613	11618	while
O	11619	11625	trying
O	11626	11628	to
O	11629	11633	lock
O	11634	11636	on
O	11637	11639	it
O	11639	11640	.

O	11641	11643	If
O	11644	11647	you
O	11648	11652	only
O	11653	11657	have
O	11658	11659	a
O	11660	11667	handful
O	11668	11670	of
O	11671	11678	threads
O	11679	11684	these
O	11685	11689	bugs
O	11690	11694	will
O	11695	11703	probably
O	11704	11706	be
O	11707	11714	obvious
O	11715	11722	because
O	11723	11727	your
O	11728	11735	program
O	11736	11740	will
O	11741	11745	stop
O	11746	11753	working
O	11754	11762	properly
O	11762	11763	.

O	11764	11766	If
O	11767	11770	you
O	11771	11775	have
O	11776	11777	a
O	11778	11784	thread
O	11785	11789	pool
O	11790	11794	that
O	11795	11802	creates
O	11803	11807	more
O	11808	11815	threads
O	11816	11818	as
O	11819	11825	needed
O	11825	11826	,
O	11827	11831	then
O	11832	11835	the
O	11836	11844	obsolete
O	11844	11845	/
O	11845	11850	stuck
O	11851	11858	threads
O	11859	11864	might
O	11865	11868	not
O	11869	11871	be
O	11872	11879	noticed
O	11879	11880	,
O	11881	11884	and
O	11885	11889	will
O	11890	11900	accumulate
O	11901	11913	indefinitely
O	11913	11914	,
O	11915	11922	causing
O	11923	11924	a
O	11925	11931	memory
O	11932	11936	leak
O	11936	11937	.

O	11938	11945	Threads
O	11946	11949	are
O	11950	11956	likely
O	11957	11959	to
O	11960	11963	use
O	11964	11969	other
O	11970	11974	data
O	11975	11977	in
O	11978	11982	your
O	11983	11994	application
O	11994	11995	,
O	11996	11998	so
O	11999	12003	will
O	12004	12008	also
O	12009	12016	prevent
O	12017	12025	anything
O	12026	12030	they
O	12031	12039	directly
O	12040	12049	reference
O	12050	12054	from
O	12055	12059	ever
O	12060	12065	being
O	12066	12075	collected
O	12075	12076	.

O	12077	12079	As
O	12080	12081	a
O	12082	12085	toy
O	12086	12093	example
O	12093	12094	:
O	12095	12096	#
O	12096	12099	pre
O	12100	12104	Call
B-api_mention	12105	12111	System
I-api_mention	12111	12112	.
I-api_mention	12112	12114	gc
I-api_mention	12114	12115	(
I-api_mention	12115	12119	args
I-api_mention	12119	12120	)
O	12121	12124	all
O	12125	12128	you
O	12129	12133	like
O	12133	12134	,
O	12135	12138	but
O	12139	12142	the
O	12143	12149	object
O	12150	12156	passed
O	12157	12159	to
O	12160	12166	leakMe
O	12167	12171	will
O	12172	12177	never
O	12178	12181	die
O	12181	12182	.

O	12183	12184	(
O	12184	12185	*
O	12185	12191	edited
O	12191	12192	*
O	12192	12193	)

O	12195	12203	Question
O	12203	12204	-
O	12204	12211	5585779
O	12211	12212	,
O	12213	12219	answer
O	12219	12220	-
O	12220	12227	5585800

O	12228	12231	int
O	12232	12235	foo
O	12236	12237	=
B-api_mention	12238	12245	Integer
I-api_mention	12245	12246	.
I-api_mention	12246	12254	parseInt
I-api_mention	12254	12255	(
I-api_mention	12255	12259	args
I-api_mention	12259	12260	)
O	12260	12261	;
O	12262	12265	See
O	12266	12269	the
O	12270	12274	Java
O	12275	12288	Documentation
O	12289	12292	for
O	12293	12297	more
O	12298	12309	information
O	12309	12310	.

O	12311	12312	(
O	12312	12314	If
O	12315	12318	you
O	12319	12323	have
O	12324	12326	it
O	12327	12329	in
O	12330	12331	a
B-api_mention	12332	12345	StringBuilder
O	12346	12347	(
O	12347	12349	or
O	12350	12353	the
O	12354	12361	ancient
B-api_mention	12362	12374	StringBuffer
O	12375	12376	)
O	12376	12377	,
O	12378	12381	you
O	12381	12382	'
O	12382	12384	ll
O	12385	12389	need
O	12390	12392	to
O	12393	12395	do
B-api_mention	12396	12403	Integer
I-api_mention	12403	12404	.
I-api_mention	12404	12412	parseInt
I-api_mention	12412	12413	(
I-api_mention	12413	12417	args
I-api_mention	12417	12418	)
O	12418	12419	;
O	12420	12427	instead
O	12427	12428	)
O	12428	12429	.

O	12431	12439	Question
O	12439	12440	-
O	12440	12447	5585779
O	12447	12448	,
O	12449	12455	answer
O	12455	12456	-
O	12456	12463	5585876

O	12464	12467	For
O	12468	12475	example
O	12475	12476	,
O	12477	12481	here
O	12482	12485	are
O	12486	12489	two
O	12490	12494	ways
O	12494	12495	:
O	12496	12497	#
O	12497	12500	pre
O	12501	12506	There
O	12507	12509	is
O	12510	12511	a
O	12512	12518	slight
O	12519	12529	difference
O	12530	12537	between
O	12538	12543	these
O	12544	12551	methods
O	12551	12552	:
O	12553	12554	#
O	12554	12556	li
B-api_mention	12557	12564	valueOf
O	12565	12572	returns
O	12573	12574	a
O	12575	12578	new
O	12579	12581	or
O	12582	12588	cached
O	12589	12597	instance
O	12598	12600	of
B-api_mention	12601	12605	java
I-api_mention	12605	12606	.
I-api_mention	12606	12610	lang
I-api_mention	12610	12611	.
I-api_mention	12611	12618	Integer
O	12619	12620	#
O	12620	12622	li
B-api_mention	12623	12631	parseInt
O	12632	12639	returns
O	12640	12649	primitive
O	12650	12653	int
O	12654	12655	.

O	12656	12659	The
O	12660	12664	same
O	12665	12667	is
O	12668	12671	for
O	12672	12675	all
O	12676	12681	cases
O	12681	12682	:
B-api_mention	12683	12688	Short
I-api_mention	12688	12689	.
I-api_mention	12689	12696	valueOf
O	12697	12698	/
B-api_mention	12699	12709	parseShort
O	12710	12711	,
B-api_mention	12712	12716	Long
I-api_mention	12716	12717	.
I-api_mention	12717	12724	valueOf
O	12725	12726	/
B-api_mention	12727	12736	parseLong
O	12737	12738	,
O	12739	12742	etc
O	12742	12743	.

O	12745	12753	Question
O	12753	12754	-
O	12754	12761	5585779
O	12761	12762	,
O	12763	12769	answer
O	12769	12770	-
O	12770	12778	33233407

O	12779	12781	We
O	12782	12785	can
O	12786	12789	use
O	12790	12793	the
B-api_mention	12794	12802	parseInt
I-api_mention	12802	12803	(
I-api_mention	12803	12807	args
I-api_mention	12807	12808	)
O	12809	12815	method
O	12816	12818	of
O	12819	12822	the
B-api_mention	12823	12830	Integer
O	12831	12838	wrapper
O	12839	12844	class
O	12845	12848	for
O	12849	12859	converting
O	12860	12861	a
B-api_mention	12862	12868	String
O	12869	12874	value
O	12875	12877	to
O	12878	12880	an
O	12881	12888	integer
O	12889	12894	value
O	12894	12895	.

O	12896	12899	For
O	12900	12907	example
O	12907	12908	:
O	12909	12910	#
O	12910	12913	pre
O	12914	12917	The
B-api_mention	12918	12925	Integer
O	12926	12931	class
O	12932	12936	also
O	12937	12945	provides
O	12946	12949	the
B-api_mention	12950	12957	valueOf
I-api_mention	12957	12958	(
I-api_mention	12958	12962	args
I-api_mention	12962	12963	)
O	12964	12970	method
O	12970	12971	:
O	12972	12973	#
O	12973	12976	pre
O	12977	12979	We
O	12980	12983	can
O	12984	12988	also
O	12989	12992	use
B-api_mention	12993	12998	toInt
I-api_mention	12998	12999	(
I-api_mention	12999	13003	args
O	13003	13004	)
O	13005	13007	of
B-api_mention	13008	13019	NumberUtils
O	13020	13027	Utility
O	13028	13033	Class
O	13034	13037	for
O	13038	13041	the
O	13042	13052	conversion
O	13052	13053	:
O	13054	13055	#
O	13055	13058	pre

O	13060	13068	Question
O	13068	13069	-
O	13069	13076	5585779
O	13076	13077	,
O	13078	13084	answer
O	13084	13085	-
O	13085	13093	35834484

B-api_mention	13094	13101	Integer
I-api_mention	13101	13102	.
I-api_mention	13102	13108	decode
O	13109	13112	You
O	13113	13116	can
O	13117	13121	also
O	13122	13125	use
O	13126	13132	public
O	13133	13139	static
B-api_mention	13140	13147	Integer
I-api_mention	13148	13154	decode
I-api_mention	13154	13155	(
I-api_mention	13155	13159	args
I-api_mention	13159	13160	)
O	13161	13167	throws
B-api_mention	13168	13189	NumberFormatException
O	13190	13191	.

O	13192	13194	It
O	13195	13199	also
O	13200	13205	works
O	13206	13209	for
O	13210	13214	base
O	13215	13216	8
O	13217	13220	and
O	13221	13223	16
O	13223	13224	:
O	13225	13226	#
O	13226	13229	pre
O	13230	13232	If
O	13233	13236	you
O	13237	13241	want
O	13242	13244	to
O	13245	13248	get
O	13249	13252	int
O	13253	13260	instead
O	13261	13263	of
O	13264	13271	Integer
O	13272	13275	you
O	13276	13279	can
O	13280	13283	use
O	13283	13284	:
O	13285	13286	#
O	13286	13288	li
O	13289	13297	Unboxing
O	13297	13298	:
O	13299	13302	int
O	13303	13306	val
O	13307	13308	=
B-api_mention	13309	13316	Integer
I-api_mention	13316	13317	.
I-api_mention	13317	13323	decode
I-api_mention	13323	13324	(
I-api_mention	13324	13328	args
I-api_mention	13328	13329	)
O	13329	13330	;
O	13331	13332	#
O	13332	13334	li
B-api_mention	13335	13343	intValue
I-api_mention	13343	13344	(
I-api_mention	13344	13348	args
I-api_mention	13348	13349	)
O	13350	13351	:
B-api_mention	13352	13359	Integer
I-api_mention	13359	13360	.
I-api_mention	13360	13366	decode
I-api_mention	13366	13367	(
I-api_mention	13367	13371	args
I-api_mention	13371	13372	)
I-api_mention	13372	13373	.
I-api_mention	13373	13381	intValue
I-api_mention	13381	13382	(
I-api_mention	13382	13386	args
I-api_mention	13386	13387	)
O	13387	13388	;

O	13390	13398	Question
O	13398	13399	-
O	13399	13406	5585779
O	13406	13407	,
O	13408	13414	answer
O	13414	13415	-
O	13415	13423	36394016

O	13424	13432	Whenever
O	13433	13438	there
O	13439	13441	is
O	13442	13445	the
O	13446	13455	slightest
O	13456	13467	possibility
O	13468	13472	that
O	13473	13476	the
O	13477	13482	given
B-api_mention	13483	13489	String
O	13490	13494	does
O	13495	13498	not
O	13499	13506	contain
O	13507	13509	an
O	13510	13517	Integer
O	13517	13518	,
O	13519	13522	you
O	13523	13527	have
O	13528	13530	to
O	13531	13537	handle
O	13538	13542	this
O	13543	13550	special
O	13551	13555	case
O	13555	13556	.

O	13557	13562	Sadly
O	13562	13563	,
O	13564	13567	the
O	13568	13576	standard
O	13577	13581	Java
O	13582	13589	methods
B-api_mention	13590	13597	Integer
I-api_mention	13597	13598	:
I-api_mention	13598	13599	:
I-api_mention	13599	13607	parseInt
O	13608	13611	and
B-api_mention	13612	13619	Integer
I-api_mention	13619	13620	:
I-api_mention	13620	13621	:
I-api_mention	13621	13628	valueOf
O	13629	13634	throw
O	13635	13636	a
B-api_mention	13637	13658	NumberFormatException
O	13659	13661	to
O	13662	13668	signal
O	13669	13673	this
O	13674	13681	special
O	13682	13686	case
O	13686	13687	.

O	13688	13692	Thus
O	13692	13693	,
O	13694	13697	you
O	13698	13702	have
O	13703	13705	to
O	13706	13709	use
O	13710	13720	exceptions
O	13721	13724	for
O	13725	13729	flow
O	13730	13737	control
O	13737	13738	,
O	13739	13744	which
O	13745	13747	is
O	13748	13757	generally
O	13758	13768	considered
O	13769	13772	bad
O	13773	13779	coding
O	13780	13785	style
O	13785	13786	.

O	13787	13789	In
O	13790	13792	my
O	13793	13800	opinion
O	13800	13801	,
O	13802	13806	this
O	13807	13814	special
O	13815	13819	case
O	13820	13826	should
O	13827	13829	be
O	13830	13837	handled
O	13838	13840	by
O	13841	13850	returning
O	13851	13853	an
B-api_mention	13854	13862	Optional
I-api_mention	13862	13863	<
I-api_mention	13863	13864	T
I-api_mention	13864	13865	>
O	13866	13867	.

O	13868	13873	Since
O	13874	13878	Java
O	13879	13883	does
O	13884	13887	not
O	13888	13893	offer
O	13894	13898	such
O	13899	13900	a
O	13901	13907	method
O	13907	13908	,
O	13909	13910	I
O	13911	13914	use
O	13915	13918	the
O	13919	13928	following
O	13929	13936	wrapper
O	13936	13937	:
O	13938	13939	#
O	13939	13942	pre
O	13943	13948	Usage
O	13948	13949	:
O	13950	13951	#
O	13951	13954	pre
O	13955	13960	While
O	13961	13965	this
O	13966	13968	is
O	13969	13974	still
O	13975	13980	using
O	13981	13991	exceptions
O	13992	13995	for
O	13996	14000	flow
O	14001	14008	control
O	14009	14019	internally
O	14019	14020	,
O	14021	14024	the
O	14025	14030	usage
O	14031	14035	code
O	14036	14043	becomes
O	14044	14048	very
O	14049	14054	clean
O	14054	14055	.

O	14057	14065	Question
O	14065	14066	-
O	14066	14073	5374311
O	14073	14074	,
O	14075	14081	answer
O	14081	14082	-
O	14082	14089	5374346

O	14090	14094	What
O	14095	14097	is
O	14098	14107	happening
O	14108	14110	is
O	14111	14115	that
O	14116	14121	stock
O	14121	14122	_
O	14122	14126	list
B-api_mention	14126	14127	.
I-api_mention	14127	14134	toArray
I-api_mention	14134	14135	(
I-api_mention	14135	14139	args
I-api_mention	14139	14140	)
O	14141	14143	is
O	14144	14152	creating
O	14153	14155	an
B-api_mention	14156	14162	Object
O	14162	14163	[
O	14163	14164	]
O	14165	14171	rather
O	14172	14176	than
O	14177	14178	a
B-api_mention	14179	14185	String
O	14185	14186	[
O	14186	14187	]
O	14188	14191	and
O	14192	14197	hence
O	14198	14201	the
O	14202	14210	typecast
O	14211	14213	is
O	14214	14221	failing
O	14221	14222	.

O	14223	14226	The
O	14227	14234	correct
O	14235	14239	code
O	14240	14245	would
O	14246	14248	be
O	14248	14249	:
B-api_mention	14250	14256	String
O	14257	14258	[
O	14258	14259	]
O	14260	14268	stockArr
O	14269	14270	=
O	14271	14280	stockList
B-api_mention	14280	14281	.
I-api_mention	14281	14288	toArray
I-api_mention	14288	14289	(
I-api_mention	14289	14293	args
I-api_mention	14293	14294	)
O	14294	14295	;
O	14296	14298	or
O	14299	14303	even
B-api_mention	14304	14310	String
O	14311	14312	[
O	14312	14313	]
O	14314	14322	stockArr
O	14323	14324	=
O	14325	14334	stockList
B-api_mention	14334	14335	.
I-api_mention	14335	14342	toArray
I-api_mention	14342	14343	(
I-api_mention	14343	14347	args
I-api_mention	14347	14348	)
O	14348	14349	;
O	14350	14353	For
O	14354	14358	more
O	14359	14366	details
O	14366	14367	,
O	14368	14373	refer
O	14374	14376	to
O	14377	14380	the
O	14381	14389	javadocs
O	14390	14393	for
O	14394	14397	the
O	14398	14401	two
O	14402	14411	overloads
O	14412	14414	of
B-api_mention	14415	14419	List
I-api_mention	14419	14420	.
I-api_mention	14420	14427	toArray
O	14428	14429	.

O	14430	14431	(
O	14431	14435	From
O	14436	14437	a
O	14438	14447	technical
O	14448	14459	perspective
O	14459	14460	,
O	14461	14464	the
O	14465	14471	reason
O	14472	14475	for
O	14476	14480	this
O	14481	14484	API
O	14485	14494	behaviour
O	14495	14496	/
O	14497	14503	design
O	14504	14506	is
O	14507	14511	that
O	14512	14514	an
O	14515	14529	implementation
O	14530	14532	of
O	14533	14536	the
B-api_mention	14537	14541	List
I-api_mention	14541	14542	<
I-api_mention	14542	14543	T
I-api_mention	14543	14544	>
I-api_mention	14544	14545	.
I-api_mention	14545	14552	toArray
I-api_mention	14552	14553	(
I-api_mention	14553	14557	args
I-api_mention	14557	14558	)
O	14559	14565	method
O	14566	14569	has
O	14570	14572	no
O	14573	14584	information
O	14585	14587	of
O	14588	14592	what
O	14593	14596	the
O	14597	14598	<
O	14598	14599	T
O	14599	14600	>
O	14601	14603	is
O	14604	14606	at
O	14607	14614	runtime
O	14614	14615	.

O	14616	14619	All
O	14620	14622	it
O	14623	14628	knows
O	14629	14631	is
O	14632	14636	that
O	14637	14640	the
O	14641	14644	raw
O	14645	14652	element
O	14653	14657	type
O	14658	14660	is
B-api_mention	14661	14667	Object
O	14668	14669	.

O	14670	14672	By
O	14673	14681	contrast
O	14681	14682	,
O	14683	14685	in
O	14686	14689	the
O	14690	14695	other
O	14696	14700	case
O	14700	14701	,
O	14702	14705	the
O	14706	14711	array
O	14712	14721	parameter
O	14722	14727	gives
O	14728	14731	the
O	14732	14736	base
O	14737	14741	type
O	14742	14744	of
O	14745	14748	the
O	14749	14754	array
O	14754	14755	.

O	14756	14757	(
O	14757	14759	If
O	14760	14763	the
O	14764	14772	supplied
O	14773	14778	array
O	14779	14781	is
O	14782	14785	big
O	14786	14792	enough
O	14792	14793	,
O	14794	14796	it
O	14797	14799	is
O	14800	14804	used
O	14804	14805	.
O	14806	14815	Otherwise
O	14816	14817	a
O	14818	14821	new
O	14822	14827	array
O	14828	14830	of
O	14831	14834	the
O	14835	14839	same
O	14840	14844	type
O	14845	14848	and
O	14849	14850	a
O	14851	14857	larger
O	14858	14862	size
O	14863	14867	will
O	14868	14870	be
O	14871	14880	allocated
O	14881	14884	and
O	14885	14893	returned
O	14894	14896	as
O	14897	14900	the
O	14901	14907	result
O	14907	14908	.
O	14908	14909	)

O	14911	14919	Question
O	14919	14920	-
O	14920	14927	5374311
O	14927	14928	,
O	14929	14935	answer
O	14935	14936	-
O	14936	14944	17909134

O	14945	14946	I
O	14947	14950	can
O	14951	14954	see
O	14955	14959	many
O	14960	14967	answers
O	14968	14975	showing
O	14976	14979	how
O	14980	14982	to
O	14983	14988	solve
O	14989	14996	problem
O	14996	14997	,
O	14998	15001	but
O	15002	15006	only
O	15007	15014	Stephen
O	15014	15015	'
O	15015	15016	s
O	15017	15023	answer
O	15024	15026	is
O	15027	15033	trying
O	15034	15036	to
O	15037	15044	explain
O	15045	15048	why
O	15049	15056	problem
O	15057	15063	occurs
O	15064	15066	so
O	15067	15068	I
O	15069	15073	will
O	15074	15077	try
O	15078	15080	to
O	15081	15084	add
O	15085	15094	something
O	15095	15099	more
O	15100	15102	on
O	15103	15107	this
O	15108	15115	subject
O	15115	15116	.

O	15117	15119	It
O	15120	15122	is
O	15123	15124	a
O	15125	15130	story
O	15131	15136	about
O	15137	15145	possible
O	15146	15153	reasons
O	15154	15157	why
B-api_mention	15158	15164	Object
O	15164	15165	[
O	15165	15166	]
B-api_mention	15167	15174	toArray
O	15175	15179	wasn
O	15179	15180	'
O	15180	15181	t
O	15182	15189	changed
O	15190	15192	to
O	15193	15194	T
O	15194	15195	[
O	15195	15196	]
B-api_mention	15197	15204	toArray
O	15205	15210	where
O	15211	15219	generics
O	15220	15224	ware
O	15225	15235	introduced
O	15236	15238	to
O	15239	15243	Java
O	15243	15244	.

O	15245	15248	Why
B-api_mention	15249	15255	String
O	15255	15256	[
O	15256	15257	]
O	15258	15266	stockArr
O	15267	15268	=
O	15269	15270	(
B-api_mention	15270	15276	String
O	15276	15277	[
O	15277	15278	]
O	15278	15279	)
O	15280	15285	stock
O	15285	15286	_
O	15286	15290	list
B-api_mention	15290	15291	.
I-api_mention	15291	15298	toArray
I-api_mention	15298	15299	(
I-api_mention	15299	15303	args
I-api_mention	15303	15304	)
O	15304	15305	;
O	15306	15310	wont
O	15311	15315	work
O	15315	15316	?

O	15317	15319	In
O	15320	15324	Java
O	15324	15325	,
O	15326	15333	generic
O	15334	15338	type
O	15339	15345	exists
O	15346	15348	at
O	15349	15356	compile
O	15356	15357	-
O	15357	15361	time
O	15362	15366	only
O	15367	15368	.

O	15369	15371	At
O	15372	15379	runtime
O	15380	15391	information
O	15392	15397	about
O	15398	15405	generic
O	15406	15410	type
O	15411	15412	(
O	15412	15416	like
O	15417	15419	in
O	15420	15424	your
O	15425	15429	case
O	15430	15431	<
B-api_mention	15431	15437	String
O	15437	15438	>
O	15439	15440	)
O	15441	15443	is
O	15444	15451	removed
O	15452	15455	and
O	15456	15464	replaced
O	15465	15469	with
B-api_mention	15470	15476	Object
O	15477	15481	type
O	15482	15483	(
O	15483	15487	take
O	15488	15489	a
O	15490	15494	look
O	15495	15497	at
O	15498	15502	type
O	15503	15510	erasure
O	15511	15512	)
O	15512	15513	.

O	15514	15518	That
O	15519	15521	is
O	15522	15525	why
O	15526	15528	at
O	15529	15536	runtime
B-api_mention	15537	15544	toArray
I-api_mention	15544	15545	(
I-api_mention	15545	15549	args
I-api_mention	15549	15550	)
O	15551	15555	have
O	15556	15558	no
O	15559	15563	idea
O	15564	15569	about
O	15570	15574	what
O	15575	15582	precise
O	15583	15587	type
O	15588	15590	to
O	15591	15594	use
O	15595	15597	to
O	15598	15604	create
O	15605	15608	new
O	15609	15614	array
O	15614	15615	,
O	15616	15618	so
O	15619	15621	it
O	15622	15626	uses
B-api_mention	15627	15633	Object
O	15634	15636	as
O	15637	15643	safest
O	15644	15648	type
O	15648	15649	,
O	15650	15657	because
O	15658	15662	each
O	15663	15668	class
O	15669	15676	extends
B-api_mention	15677	15683	Object
O	15684	15686	so
O	15687	15689	it
O	15690	15693	can
O	15694	15700	safely
O	15701	15706	store
O	15707	15715	instance
O	15716	15718	of
O	15719	15722	any
O	15723	15728	class
O	15728	15729	.

O	15730	15733	Now
O	15734	15737	the
O	15738	15745	problem
O	15746	15748	is
O	15749	15753	that
O	15754	15757	you
O	15758	15761	can
O	15761	15762	'
O	15762	15763	t
O	15764	15768	cast
O	15769	15777	instance
O	15778	15780	of
B-api_mention	15781	15787	Object
O	15787	15788	[
O	15788	15789	]
O	15790	15792	to
B-api_mention	15793	15799	String
O	15799	15800	[
O	15800	15801	]
O	15802	15803	.

O	15804	15807	Why
O	15807	15808	?

O	15809	15813	Take
O	15814	15815	a
O	15816	15820	look
O	15821	15823	at
O	15824	15828	this
O	15829	15836	example
O	15837	15838	(
O	15838	15842	lets
O	15843	15849	assume
O	15850	15854	that
O	15855	15860	class
O	15861	15862	B
O	15863	15870	extends
O	15871	15872	A
O	15873	15874	)
O	15874	15875	:
O	15876	15877	#
O	15877	15880	pre
O	15881	15889	Although
O	15890	15894	such
O	15895	15899	code
O	15900	15904	will
O	15905	15912	compile
O	15912	15913	,
O	15914	15916	at
O	15917	15924	runtime
O	15925	15927	we
O	15928	15932	will
O	15933	15936	see
O	15937	15943	thrown
B-api_mention	15944	15962	ClassCastException
O	15963	15970	because
O	15971	15979	instance
O	15980	15984	held
O	15985	15987	by
O	15988	15997	reference
O	15998	15999	a
O	16000	16002	is
O	16003	16006	not
O	16007	16015	actually
O	16016	16018	of
O	16019	16023	type
O	16024	16025	B
O	16026	16027	(
O	16027	16029	or
O	16030	16033	its
O	16034	16042	subtypes
O	16042	16043	)
O	16043	16044	.

O	16045	16048	Why
O	16049	16051	is
O	16052	16056	this
O	16057	16064	problem
O	16065	16066	(
O	16066	16069	why
O	16070	16074	this
O	16075	16084	exception
O	16085	16090	needs
O	16091	16093	to
O	16094	16096	be
O	16097	16101	cast
O	16101	16102	)
O	16102	16103	?

O	16104	16107	One
O	16108	16110	of
O	16111	16114	the
O	16115	16122	reasons
O	16123	16125	is
O	16126	16130	that
O	16131	16132	B
O	16133	16138	could
O	16139	16143	have
O	16144	16147	new
O	16148	16155	methods
O	16155	16156	/
O	16156	16162	fields
O	16163	16168	which
O	16169	16170	A
O	16171	16176	doesn
O	16176	16177	'
O	16177	16178	t
O	16178	16179	,
O	16180	16182	so
O	16183	16185	it
O	16186	16188	is
O	16189	16197	possible
O	16198	16202	that
O	16203	16210	someone
O	16211	16215	will
O	16216	16219	try
O	16220	16222	to
O	16223	16226	use
O	16227	16232	these
O	16233	16236	new
O	16237	16244	members
O	16245	16248	via
O	16249	16250	b
O	16251	16260	reference
O	16261	16265	even
O	16266	16268	if
O	16269	16273	held
O	16274	16282	instance
O	16283	16288	doesn
O	16288	16289	'
O	16289	16290	t
O	16291	16295	have
O	16296	16297	(
O	16297	16302	doesn
O	16302	16303	'
O	16303	16304	t
O	16305	16312	support
O	16312	16313	)
O	16314	16318	them
O	16318	16319	.

O	16320	16322	In
O	16323	16328	other
O	16329	16334	words
O	16335	16337	we
O	16338	16343	could
O	16344	16347	end
O	16348	16350	up
O	16351	16357	trying
O	16358	16360	to
O	16361	16364	use
O	16365	16369	data
O	16370	16375	which
O	16376	16381	doesn
O	16381	16382	'
O	16382	16383	t
O	16384	16389	exist
O	16389	16390	,
O	16391	16396	which
O	16397	16402	could
O	16403	16407	lead
O	16408	16410	to
O	16411	16415	many
O	16416	16424	problems
O	16424	16425	.

O	16426	16428	So
O	16429	16431	to
O	16432	16439	prevent
O	16440	16444	such
O	16445	16454	situation
O	16455	16458	JVM
O	16459	16465	throws
O	16466	16475	exception
O	16475	16476	,
O	16477	16480	and
O	16481	16485	stop
O	16486	16493	further
O	16494	16505	potentially
O	16506	16515	dangerous
O	16516	16520	code
O	16520	16521	.

O	16522	16525	You
O	16526	16531	could
O	16532	16535	ask
O	16536	16539	now
O	16540	16541	"
O	16541	16543	So
O	16544	16547	why
O	16548	16552	aren
O	16552	16553	'
O	16553	16554	t
O	16555	16557	we
O	16558	16565	stopped
O	16566	16570	even
O	16571	16578	earlier
O	16578	16579	?

O	16580	16583	Why
O	16584	16588	code
O	16589	16598	involving
O	16599	16603	such
O	16604	16611	casting
O	16612	16614	is
O	16615	16619	even
O	16620	16630	compilable
O	16630	16631	?

O	16632	16639	Shouldn
O	16639	16640	'
O	16640	16641	t
O	16642	16650	compiler
O	16651	16655	stop
O	16656	16658	it
O	16658	16659	?
O	16659	16660	"
O	16660	16661	.

O	16662	16668	Answer
O	16669	16671	is
O	16671	16672	:
O	16673	16675	no
O	16676	16683	because
O	16684	16692	compiler
O	16693	16696	can
O	16696	16697	'
O	16697	16698	t
O	16699	16703	know
O	16704	16707	for
O	16708	16712	sure
O	16713	16717	what
O	16718	16720	is
O	16721	16724	the
O	16725	16731	actual
O	16732	16736	type
O	16737	16739	of
O	16740	16748	instance
O	16749	16753	held
O	16754	16756	by
O	16757	16758	a
O	16759	16768	reference
O	16768	16769	,
O	16770	16773	and
O	16774	16779	there
O	16780	16782	is
O	16783	16784	a
O	16785	16791	chance
O	16792	16796	that
O	16797	16799	it
O	16800	16804	will
O	16805	16809	hold
O	16810	16818	instance
O	16819	16821	of
O	16822	16827	class
O	16828	16829	B
O	16830	16835	which
O	16836	16840	will
O	16841	16848	support
O	16849	16858	interface
O	16859	16861	of
O	16862	16863	b
O	16864	16873	reference
O	16873	16874	.

O	16875	16879	Take
O	16880	16881	a
O	16882	16886	look
O	16887	16889	at
O	16890	16894	this
O	16895	16902	example
O	16902	16903	:
O	16904	16905	#
O	16905	16908	pre
O	16909	16912	Now
O	16913	16917	lets
O	16918	16920	go
O	16921	16925	back
O	16926	16928	to
O	16929	16933	your
O	16934	16940	arrays
O	16940	16941	.

O	16942	16944	As
O	16945	16948	you
O	16949	16952	see
O	16953	16955	in
O	16956	16964	question
O	16964	16965	,
O	16966	16968	we
O	16969	16972	can
O	16972	16973	'
O	16973	16974	t
O	16975	16979	cast
O	16980	16988	instance
O	16989	16991	of
B-api_mention	16992	16998	Object
O	16998	16999	[
O	16999	17000	]
O	17001	17006	array
O	17007	17009	to
O	17010	17014	more
O	17015	17022	precise
O	17023	17027	type
B-api_mention	17028	17034	String
O	17034	17035	[
O	17035	17036	]
O	17037	17041	like
O	17042	17043	#
O	17043	17046	pre
O	17047	17051	Here
O	17052	17059	problem
O	17060	17062	is
O	17063	17064	a
O	17065	17071	little
O	17072	17081	different
O	17081	17082	.

O	17083	17086	Now
O	17087	17089	we
O	17090	17093	are
O	17094	17098	sure
O	17099	17103	that
B-api_mention	17104	17110	String
O	17110	17111	[
O	17111	17112	]
O	17113	17118	array
O	17119	17123	will
O	17124	17127	not
O	17128	17132	have
O	17133	17143	additional
O	17144	17150	fields
O	17151	17153	or
O	17154	17161	methods
O	17162	17169	because
O	17170	17175	every
O	17176	17181	array
O	17182	17189	support
O	17190	17194	only
O	17194	17195	:
O	17196	17197	#
O	17197	17199	li
O	17200	17201	[
O	17201	17202	]
O	17203	17211	operator
O	17211	17212	,
O	17213	17214	#
O	17214	17216	li
O	17217	17223	length
O	17224	17229	filed
O	17229	17230	,
O	17231	17232	#
O	17232	17234	li
O	17235	17242	methods
O	17243	17252	inherited
O	17253	17257	from
B-api_mention	17258	17264	Object
O	17265	17274	supertype
O	17274	17275	,
O	17276	17278	So
O	17279	17281	it
O	17282	17284	is
O	17285	17288	not
O	17289	17295	arrays
O	17296	17305	interface
O	17306	17311	which
O	17312	17314	is
O	17315	17321	making
O	17322	17324	it
O	17325	17335	impossible
O	17335	17336	.

O	17337	17344	Problem
O	17345	17347	is
O	17348	17352	that
B-api_mention	17353	17359	Object
O	17359	17360	[
O	17360	17361	]
O	17362	17367	array
O	17368	17374	beside
O	17375	17382	Strings
O	17383	17386	can
O	17387	17392	store
O	17393	17396	any
O	17397	17404	objects
O	17405	17406	(
O	17406	17409	for
O	17410	17418	instance
O	17419	17427	Integers
O	17428	17429	)
O	17430	17432	so
O	17433	17435	it
O	17436	17438	is
O	17439	17447	possible
O	17448	17452	that
O	17453	17456	one
O	17457	17466	beautiful
O	17467	17470	day
O	17471	17473	we
O	17474	17478	will
O	17479	17482	end
O	17483	17485	up
O	17486	17490	with
O	17491	17497	trying
O	17498	17500	to
O	17501	17507	invoke
O	17508	17514	method
O	17515	17519	like
O	17520	17528	strArray
O	17528	17529	[
O	17529	17530	i
O	17530	17531	]
B-api_mention	17531	17532	.
I-api_mention	17532	17541	substring
I-api_mention	17541	17542	(
I-api_mention	17542	17546	args
I-api_mention	17546	17547	)
O	17548	17550	on
O	17551	17559	instance
O	17560	17562	of
O	17563	17570	Integer
O	17571	17576	which
O	17577	17582	doesn
O	17582	17583	'
O	17583	17584	t
O	17585	17589	have
O	17590	17594	such
O	17595	17601	method
O	17601	17602	.

O	17603	17605	So
O	17606	17608	to
O	17609	17613	make
O	17614	17618	sure
O	17619	17623	that
O	17624	17628	this
O	17629	17638	situation
O	17639	17643	will
O	17644	17649	never
O	17650	17656	happen
O	17656	17657	,
O	17658	17660	in
O	17661	17665	Java
O	17666	17671	array
O	17672	17682	references
O	17683	17686	can
O	17687	17691	hold
O	17692	17696	only
O	17697	17698	#
O	17698	17700	li
O	17701	17710	instances
O	17711	17713	of
O	17714	17719	array
O	17720	17722	of
O	17723	17727	same
O	17728	17732	type
O	17733	17735	as
O	17736	17745	reference
O	17746	17747	(
O	17747	17756	reference
B-api_mention	17757	17763	String
O	17763	17764	[
O	17764	17765	]
O	17766	17772	strArr
O	17773	17776	can
O	17777	17781	hold
B-api_mention	17782	17788	String
O	17788	17789	[
O	17789	17790	]
O	17791	17792	)
O	17793	17794	#
O	17794	17796	li
O	17797	17806	instances
O	17807	17809	of
O	17810	17815	array
O	17816	17818	of
O	17819	17826	subtype
O	17827	17828	(
B-api_mention	17829	17835	Object
O	17835	17836	[
O	17836	17837	]
O	17838	17841	can
O	17842	17846	hold
B-api_mention	17847	17853	String
O	17853	17854	[
O	17854	17855	]
O	17856	17863	because
B-api_mention	17864	17870	String
O	17871	17873	is
O	17874	17881	subtype
O	17882	17884	of
B-api_mention	17885	17891	Object
O	17892	17893	)
O	17893	17894	,
O	17895	17898	but
O	17899	17902	can
O	17902	17903	'
O	17903	17904	t
O	17905	17909	hold
O	17910	17911	#
O	17911	17913	li
O	17914	17919	array
O	17920	17922	of
O	17923	17932	supertype
O	17933	17935	of
O	17936	17940	type
O	17941	17943	of
O	17944	17949	array
O	17950	17954	from
O	17955	17964	reference
O	17965	17966	(
B-api_mention	17967	17973	String
O	17973	17974	[
O	17974	17975	]
O	17976	17979	can
O	17979	17980	'
O	17980	17981	t
O	17982	17986	hold
B-api_mention	17987	17993	Object
O	17993	17994	[
O	17994	17995	]
O	17996	17997	)
O	17998	17999	#
O	17999	18001	li
O	18002	18007	array
O	18008	18010	of
O	18011	18015	type
O	18016	18021	which
O	18022	18024	is
O	18025	18028	not
O	18029	18036	related
O	18037	18039	to
O	18040	18044	type
O	18045	18049	from
O	18050	18059	reference
O	18060	18061	(
B-api_mention	18062	18069	Integer
O	18069	18070	[
O	18070	18071	]
O	18072	18075	can
O	18075	18076	'
O	18076	18077	t
O	18078	18082	hold
B-api_mention	18083	18089	String
O	18089	18090	[
O	18090	18091	]
O	18092	18093	)
O	18094	18096	In
O	18097	18102	other
O	18103	18108	words
O	18109	18118	something
O	18119	18123	like
O	18124	18128	this
O	18129	18131	is
O	18132	18134	OK
O	18135	18136	#
O	18136	18139	pre
O	18140	18143	You
O	18144	18149	could
O	18150	18153	say
O	18154	18158	that
O	18159	18162	one
O	18163	18166	way
O	18167	18169	to
O	18170	18177	resolve
O	18178	18182	this
O	18183	18190	problem
O	18191	18193	is
O	18194	18196	to
O	18197	18201	find
O	18202	18204	at
O	18205	18212	runtime
O	18213	18217	most
O	18218	18224	common
O	18225	18229	type
O	18230	18237	between
O	18238	18241	all
O	18242	18246	list
O	18247	18255	elements
O	18256	18259	and
O	18260	18266	create
O	18267	18272	array
O	18273	18275	of
O	18276	18280	that
O	18281	18285	type
O	18285	18286	,
O	18287	18290	but
O	18291	18295	this
O	18296	18300	wont
O	18301	18305	work
O	18306	18308	in
O	18309	18319	situations
O	18320	18325	where
O	18326	18329	all
O	18330	18338	elements
O	18339	18341	of
O	18342	18346	list
O	18347	18351	will
O	18352	18354	be
O	18355	18357	of
O	18358	18361	one
O	18362	18366	type
O	18367	18374	derived
O	18375	18379	from
O	18380	18387	generic
O	18388	18391	one
O	18391	18392	.

O	18393	18397	Take
O	18398	18399	a
O	18400	18404	look
O	18405	18406	#
O	18406	18409	pre
O	18410	18413	now
O	18414	18418	most
O	18419	18425	common
O	18426	18430	type
O	18431	18433	is
O	18434	18435	B
O	18436	18437	,
O	18438	18441	not
O	18442	18443	A
O	18444	18446	so
B-api_mention	18447	18454	toArray
I-api_mention	18454	18455	(
I-api_mention	18455	18459	args
I-api_mention	18459	18460	)
O	18461	18462	A
O	18462	18463	[
O	18463	18464	]
O	18465	18468	arr
O	18469	18470	=
O	18471	18479	elements
B-api_mention	18479	18480	.
I-api_mention	18480	18487	toArray
I-api_mention	18487	18488	(
I-api_mention	18488	18492	args
I-api_mention	18492	18493	)
O	18493	18494	;
O	18495	18500	would
O	18501	18507	return
O	18508	18513	array
O	18514	18516	of
O	18517	18518	B
O	18519	18524	class
O	18525	18528	new
O	18529	18530	B
O	18530	18531	[
O	18531	18532	]
O	18533	18534	.

O	18535	18542	Problem
O	18543	18547	with
O	18548	18552	this
O	18553	18558	array
O	18559	18561	is
O	18562	18566	that
O	18567	18572	while
O	18573	18581	compiler
O	18582	18587	would
O	18588	18593	allow
O	18594	18597	you
O	18598	18600	to
O	18601	18605	edit
O	18606	18609	its
O	18610	18617	content
O	18618	18620	by
O	18621	18627	adding
O	18628	18631	new
O	18632	18633	A
O	18633	18634	(
O	18634	18638	args
O	18638	18639	)
O	18640	18647	element
O	18648	18650	to
O	18651	18653	it
O	18653	18654	,
O	18655	18658	you
O	18659	18664	would
O	18665	18668	get
B-api_mention	18669	18688	ArrayStoreException
O	18689	18696	because
O	18697	18698	B
O	18698	18699	[
O	18699	18700	]
O	18701	18706	array
O	18707	18710	can
O	18711	18715	hold
O	18716	18720	only
O	18721	18729	elements
O	18730	18732	of
O	18733	18738	class
O	18739	18740	B
O	18741	18743	or
O	18744	18747	its
O	18748	18756	subclass
O	18756	18757	,
O	18758	18760	to
O	18761	18765	make
O	18766	18770	sure
O	18771	18775	that
O	18776	18779	all
O	18780	18788	elements
O	18789	18793	will
O	18794	18801	support
O	18802	18811	interface
O	18812	18814	of
O	18815	18816	B
O	18817	18818	,
O	18819	18822	but
O	18823	18831	instance
O	18832	18834	of
O	18835	18836	A
O	18837	18840	may
O	18841	18844	not
O	18845	18849	have
O	18850	18853	all
O	18854	18861	methods
O	18861	18862	/
O	18862	18868	fields
O	18869	18871	of
O	18872	18873	B
O	18874	18875	.

O	18876	18878	So
O	18879	18883	this
O	18884	18892	solution
O	18893	18895	is
O	18896	18899	not
O	18900	18907	perfect
O	18907	18908	.

O	18909	18913	Best
O	18914	18922	solution
O	18923	18925	to
O	18926	18930	this
O	18931	18938	problem
O	18939	18941	is
O	18942	18952	explicitly
O	18953	18957	tell
O	18958	18962	what
O	18963	18967	type
O	18968	18970	of
O	18971	18976	array
B-api_mention	18977	18984	toArray
I-api_mention	18984	18985	(
I-api_mention	18985	18989	args
I-api_mention	18989	18990	)
O	18991	18997	should
O	18998	19000	be
O	19001	19009	returned
O	19010	19012	by
O	19013	19020	passing
O	19021	19025	this
O	19026	19030	type
O	19031	19033	as
O	19034	19040	method
O	19041	19049	argument
O	19050	19054	like
B-api_mention	19055	19061	String
O	19061	19062	[
O	19062	19063	]
O	19064	19067	arr
O	19068	19069	=
O	19070	19074	list
B-api_mention	19074	19075	.
I-api_mention	19075	19082	toArray
I-api_mention	19082	19083	(
I-api_mention	19083	19087	args
I-api_mention	19087	19088	)
O	19088	19089	;
O	19090	19092	or
B-api_mention	19093	19099	String
O	19099	19100	[
O	19100	19101	]
O	19102	19105	arr
O	19106	19107	=
O	19108	19112	list
B-api_mention	19112	19113	.
I-api_mention	19113	19120	toArray
I-api_mention	19120	19121	(
I-api_mention	19121	19125	args
I-api_mention	19125	19126	)
O	19126	19127	;
O	19128	19129	/
O	19129	19130	/
O	19130	19132	if
O	19133	19137	size
O	19138	19140	of
O	19141	19146	array
O	19147	19149	is
O	19150	19157	smaller
O	19158	19162	then
O	19163	19167	list
O	19168	19170	it
O	19171	19175	will
O	19176	19178	be
O	19179	19192	automatically
O	19193	19201	adjusted
O	19201	19202	.

O	19204	19212	Question
O	19212	19213	-
O	19213	19220	5374311
O	19220	19221	,
O	19222	19228	answer
O	19228	19229	-
O	19229	19237	17909839

O	19238	19241	The
O	19242	19249	correct
O	19250	19253	way
O	19254	19256	to
O	19257	19259	do
O	19260	19264	this
O	19265	19267	is
O	19267	19268	:
B-api_mention	19269	19275	String
O	19275	19276	[
O	19276	19277	]
O	19278	19286	stockArr
O	19287	19288	=
O	19289	19294	stock
O	19294	19295	_
O	19295	19299	list
B-api_mention	19299	19300	.
I-api_mention	19300	19307	toArray
I-api_mention	19307	19308	(
I-api_mention	19308	19312	args
I-api_mention	19312	19313	)
O	19313	19314	;
O	19315	19316	I
O	19316	19317	'
O	19317	19318	d
O	19319	19323	like
O	19324	19326	to
O	19327	19330	add
O	19331	19333	to
O	19334	19337	the
O	19338	19343	other
O	19344	19349	great
O	19350	19357	answers
O	19358	19362	here
O	19363	19366	and
O	19367	19374	explain
O	19375	19378	how
O	19379	19382	you
O	19383	19388	could
O	19389	19393	have
O	19394	19398	used
O	19399	19402	the
O	19403	19411	Javadocs
O	19412	19414	to
O	19415	19421	answer
O	19422	19426	your
O	19427	19435	question
O	19435	19436	.

O	19437	19440	The
O	19441	19448	Javadoc
O	19449	19452	for
B-api_mention	19453	19460	toArray
I-api_mention	19460	19461	(
I-api_mention	19461	19465	args
I-api_mention	19465	19466	)
O	19467	19468	(
O	19468	19470	no
O	19471	19480	arguments
O	19480	19481	)
O	19482	19484	is
O	19485	19489	here
O	19490	19491	.

O	19492	19494	As
O	19495	19498	you
O	19499	19502	can
O	19503	19506	see
O	19506	19507	,
O	19508	19512	this
O	19513	19519	method
O	19520	19527	returns
O	19528	19530	an
B-api_mention	19531	19537	Object
O	19537	19538	[
O	19538	19539	]
O	19540	19543	and
O	19544	19547	not
B-api_mention	19548	19554	String
O	19554	19555	[
O	19555	19556	]
O	19557	19562	which
O	19563	19565	is
O	19566	19568	an
O	19569	19574	array
O	19575	19577	of
O	19578	19581	the
O	19582	19589	runtime
O	19590	19594	type
O	19595	19597	of
O	19598	19602	your
O	19603	19607	list
O	19607	19608	:
O	19609	19610	#
O	19610	19620	blockquote
O	19621	19626	Right
O	19627	19632	below
O	19633	19637	that
O	19638	19644	method
O	19644	19645	,
O	19646	19652	though
O	19652	19653	,
O	19654	19656	is
O	19657	19660	the
O	19661	19668	Javadoc
O	19669	19672	for
B-api_mention	19673	19680	toArray
I-api_mention	19680	19681	(
I-api_mention	19681	19685	args
I-api_mention	19685	19686	)
O	19687	19688	.

O	19689	19691	As
O	19692	19695	you
O	19696	19699	can
O	19700	19703	see
O	19703	19704	,
O	19705	19709	this
O	19710	19716	method
O	19717	19724	returns
O	19725	19726	a
O	19727	19728	T
O	19728	19729	[
O	19729	19730	]
O	19731	19736	where
O	19737	19738	T
O	19739	19741	is
O	19742	19745	the
O	19746	19750	type
O	19751	19753	of
O	19754	19757	the
O	19758	19763	array
O	19764	19767	you
O	19768	19772	pass
O	19773	19775	in
O	19775	19776	.

O	19777	19779	At
O	19780	19785	first
O	19786	19790	this
O	19791	19796	seems
O	19797	19801	like
O	19802	19806	what
O	19807	19810	you
O	19810	19811	'
O	19811	19813	re
O	19814	19821	looking
O	19822	19825	for
O	19825	19826	,
O	19827	19830	but
O	19831	19833	it
O	19833	19834	'
O	19834	19835	s
O	19836	19843	unclear
O	19844	19851	exactly
O	19852	19855	why
O	19856	19859	you
O	19859	19860	'
O	19860	19862	re
O	19863	19870	passing
O	19871	19873	in
O	19874	19876	an
O	19877	19882	array
O	19883	19884	(
O	19884	19887	are
O	19888	19891	you
O	19892	19898	adding
O	19899	19901	to
O	19902	19904	it
O	19904	19905	,
O	19906	19911	using
O	19912	19914	it
O	19915	19918	for
O	19919	19923	just
O	19924	19927	the
O	19928	19932	type
O	19932	19933	,
O	19934	19937	etc
O	19937	19938	)
O	19938	19939	.

O	19940	19943	The
O	19944	19957	documentation
O	19958	19963	makes
O	19964	19966	it
O	19967	19972	clear
O	19973	19977	that
O	19978	19981	the
O	19982	19989	purpose
O	19990	19992	of
O	19993	19996	the
O	19997	20003	passed
O	20004	20009	array
O	20010	20012	is
O	20013	20024	essentially
O	20025	20027	to
O	20028	20034	define
O	20035	20038	the
O	20039	20043	type
O	20044	20046	of
O	20047	20052	array
O	20053	20055	to
O	20056	20062	return
O	20063	20064	(
O	20064	20069	which
O	20070	20072	is
O	20073	20080	exactly
O	20081	20085	your
O	20086	20089	use
O	20090	20094	case
O	20094	20095	)
O	20095	20096	:
O	20097	20098	#
O	20098	20108	blockquote
O	20109	20111	Of
O	20112	20118	course
O	20118	20119	,
O	20120	20122	an
O	20123	20136	understanding
O	20137	20139	of
O	20140	20148	generics
O	20149	20150	(
O	20150	20152	as
O	20153	20162	described
O	20163	20165	in
O	20166	20169	the
O	20170	20175	other
O	20176	20183	answers
O	20183	20184	)
O	20185	20187	is
O	20188	20196	required
O	20197	20199	to
O	20200	20206	really
O	20207	20217	understand
O	20218	20221	the
O	20222	20232	difference
O	20233	20240	between
O	20241	20246	these
O	20247	20250	two
O	20251	20258	methods
O	20258	20259	.

O	20260	20272	Nevertheless
O	20272	20273	,
O	20274	20276	if
O	20277	20280	you
O	20281	20286	first
O	20287	20289	go
O	20290	20292	to
O	20293	20296	the
O	20297	20305	Javadocs
O	20305	20306	,
O	20307	20310	you
O	20311	20315	will
O	20316	20323	usually
O	20324	20328	find
O	20329	20333	your
O	20334	20340	answer
O	20341	20344	and
O	20345	20349	then
O	20350	20353	see
O	20354	20357	for
O	20358	20366	yourself
O	20367	20371	what
O	20372	20376	else
O	20377	20380	you
O	20381	20385	need
O	20386	20388	to
O	20389	20394	learn
O	20395	20396	(
O	20396	20398	if
O	20399	20402	you
O	20403	20409	really
O	20410	20412	do
O	20412	20413	)
O	20413	20414	.

O	20415	20419	Also
O	20420	20424	note
O	20425	20429	that
O	20430	20437	reading
O	20438	20441	the
O	20442	20450	Javadocs
O	20451	20455	here
O	20456	20461	helps
O	20462	20465	you
O	20466	20468	to
O	20469	20479	understand
O	20480	20484	what
O	20485	20488	the
O	20489	20498	structure
O	20499	20501	of
O	20502	20505	the
O	20506	20511	array
O	20512	20515	you
O	20516	20520	pass
O	20521	20523	in
O	20524	20530	should
O	20531	20533	be
O	20533	20534	.

O	20535	20541	Though
O	20542	20544	it
O	20545	20548	may
O	20549	20552	not
O	20553	20559	really
O	20560	20571	practically
O	20572	20578	matter
O	20578	20579	,
O	20580	20583	you
O	20584	20590	should
O	20591	20594	not
O	20595	20599	pass
O	20600	20602	in
O	20603	20605	an
O	20606	20611	empty
O	20612	20617	array
O	20618	20622	like
O	20623	20627	this
O	20627	20628	:
B-api_mention	20629	20635	String
O	20636	20637	[
O	20637	20638	]
O	20639	20647	stockArr
O	20648	20649	=
O	20650	20659	stockList
B-api_mention	20659	20660	.
I-api_mention	20660	20667	toArray
I-api_mention	20667	20668	(
I-api_mention	20668	20672	args
I-api_mention	20672	20673	)
O	20673	20674	;
O	20675	20682	Because
O	20682	20683	,
O	20684	20688	from
O	20689	20692	the
O	20693	20696	doc
O	20696	20697	,
O	20698	20702	this
O	20703	20717	implementation
O	20718	20724	checks
O	20725	20727	if
O	20728	20731	the
O	20732	20737	array
O	20738	20740	is
O	20741	20746	large
O	20747	20753	enough
O	20754	20756	to
O	20757	20764	contain
O	20765	20768	the
O	20769	20779	collection
O	20779	20780	;
O	20781	20783	if
O	20784	20787	not
O	20787	20788	,
O	20789	20791	it
O	20792	20801	allocates
O	20802	20803	a
O	20804	20807	new
O	20808	20813	array
O	20814	20816	of
O	20817	20820	the
O	20821	20828	correct
O	20829	20833	size
O	20834	20837	and
O	20838	20842	type
O	20843	20844	(
O	20844	20849	using
O	20850	20860	reflection
O	20860	20861	)
O	20861	20862	.

O	20863	20868	There
O	20868	20869	'
O	20869	20870	s
O	20871	20873	no
O	20874	20878	need
O	20879	20882	for
O	20883	20886	the
O	20887	20892	extra
O	20893	20901	overhead
O	20902	20904	in
O	20905	20913	creating
O	20914	20915	a
O	20916	20919	new
O	20920	20925	array
O	20926	20930	when
O	20931	20934	you
O	20935	20940	could
O	20941	20947	easily
O	20948	20952	pass
O	20953	20955	in
O	20956	20959	the
O	20960	20964	size
O	20964	20965	.

O	20966	20968	As
O	20969	20971	is
O	20972	20979	usually
O	20980	20983	the
O	20984	20988	case
O	20988	20989	,
O	20990	20993	the
O	20994	21002	Javadocs
O	21003	21010	provide
O	21011	21014	you
O	21015	21019	with
O	21020	21021	a
O	21022	21028	wealth
O	21029	21031	of
O	21032	21043	information
O	21044	21047	and
O	21048	21057	direction
O	21057	21058	.

O	21059	21062	Hey
O	21063	21067	wait
O	21068	21069	a
O	21070	21076	minute
O	21076	21077	,
O	21078	21082	what
O	21082	21083	'
O	21083	21084	s
O	21085	21095	reflection
O	21095	21096	?

O	21098	21106	Question
O	21106	21107	-
O	21107	21114	5778658
O	21114	21115	,
O	21116	21122	answer
O	21122	21123	-
O	21123	21130	5778863

O	21131	21133	An
B-api_mention	21134	21146	OutputStream
O	21147	21149	is
O	21150	21153	one
O	21154	21159	where
O	21160	21163	you
O	21164	21169	write
O	21170	21174	data
O	21175	21177	to
O	21177	21178	.

O	21179	21181	If
O	21182	21186	some
O	21187	21193	module
O	21194	21201	exposes
O	21202	21204	an
B-api_mention	21205	21217	OutputStream
O	21218	21219	,
O	21220	21223	the
O	21224	21235	expectation
O	21236	21238	is
O	21239	21243	that
O	21244	21249	there
O	21250	21252	is
O	21253	21262	something
O	21263	21265	at
O	21266	21269	the
O	21270	21275	other
O	21276	21279	end
O	21280	21284	that
O	21285	21287	is
O	21288	21295	reading
O	21295	21296	.

O	21297	21306	Something
O	21307	21311	that
O	21312	21319	exposes
O	21320	21322	an
B-api_mention	21323	21334	InputStream
O	21335	21337	on
O	21338	21341	the
O	21342	21347	other
O	21348	21352	hand
O	21353	21355	is
O	21356	21366	indicating
O	21367	21371	that
O	21372	21375	you
O	21376	21380	will
O	21381	21385	need
O	21386	21388	to
O	21389	21395	listen
O	21396	21398	to
O	21399	21403	this
O	21404	21410	stream
O	21410	21411	,
O	21412	21415	and
O	21416	21421	there
O	21422	21426	will
O	21427	21429	be
O	21430	21434	data
O	21435	21439	that
O	21440	21443	you
O	21444	21447	can
O	21448	21452	read
O	21452	21453	.

O	21454	21456	So
O	21457	21459	it
O	21460	21462	is
O	21463	21471	possible
O	21472	21474	to
O	21475	21482	connect
O	21483	21485	an
B-api_mention	21486	21497	InputStream
O	21498	21500	to
O	21501	21503	an
B-api_mention	21504	21516	OutputStream
I-api_mention	21517	21528	InputStream
O	21528	21529	-
O	21529	21530	-
O	21530	21531	-
O	21531	21532	-
O	21532	21536	read
O	21536	21537	-
O	21537	21538	-
O	21538	21539	-
O	21539	21540	>
O	21541	21558	intermediateBytes
O	21558	21559	[
O	21559	21560	n
O	21560	21561	]
O	21562	21563	-
O	21563	21564	-
O	21564	21565	-
O	21565	21566	-
O	21566	21571	write
O	21571	21572	-
O	21572	21573	-
O	21573	21574	-
O	21574	21575	-
O	21575	21576	>
B-api_mention	21577	21589	OutputStream
O	21590	21592	As
O	21593	21600	someone
O	21601	21609	metioned
O	21609	21610	,
O	21611	21615	this
O	21616	21618	is
O	21619	21623	what
O	21624	21627	the
B-api_mention	21628	21632	copy
I-api_mention	21632	21633	(
I-api_mention	21633	21637	args
I-api_mention	21637	21638	)
O	21639	21645	method
O	21646	21650	from
B-api_mention	21651	21658	IOUtils
O	21659	21663	lets
O	21664	21667	you
O	21668	21670	do
O	21670	21671	.

O	21672	21674	It
O	21675	21679	does
O	21680	21683	not
O	21684	21688	make
O	21689	21694	sense
O	21695	21697	to
O	21698	21700	go
O	21701	21704	the
O	21705	21710	other
O	21711	21714	way
O	21714	21715	.
O	21715	21716	.
O	21716	21717	.
O	21718	21727	hopefully
O	21728	21732	this
O	21733	21738	makes
O	21739	21743	some
O	21744	21749	sense
O	21750	21756	UPDATE
O	21756	21757	:
O	21758	21760	Of
O	21761	21767	course
O	21768	21771	the
O	21772	21776	more
O	21777	21778	I
O	21779	21784	think
O	21785	21787	of
O	21788	21792	this
O	21792	21793	,
O	21794	21797	the
O	21798	21802	more
O	21803	21804	I
O	21805	21808	can
O	21809	21812	see
O	21813	21816	how
O	21817	21821	this
O	21822	21830	actually
O	21831	21836	would
O	21837	21839	be
O	21840	21841	a
O	21842	21853	requirement
O	21853	21854	.

O	21855	21856	I
O	21857	21861	know
O	21862	21866	some
O	21867	21869	of
O	21870	21873	the
O	21874	21882	comments
O	21883	21892	mentioned
O	21893	21898	Piped
O	21899	21904	input
O	21904	21905	/
O	21905	21910	ouput
O	21911	21918	streams
O	21918	21919	,
O	21920	21923	but
O	21924	21929	there
O	21930	21932	is
O	21933	21940	another
O	21941	21952	possibility
O	21952	21953	.

O	21954	21956	If
O	21957	21960	the
O	21961	21967	output
O	21968	21974	stream
O	21975	21979	that
O	21980	21982	is
O	21983	21990	exposed
O	21991	21993	is
O	21994	21995	a
B-api_mention	21996	22017	ByteArrayOutputStream
O	22018	22019	,
O	22020	22024	then
O	22025	22028	you
O	22029	22032	can
O	22033	22039	always
O	22040	22043	get
O	22044	22047	the
O	22048	22052	full
O	22053	22061	contents
O	22062	22064	by
O	22065	22072	calling
O	22073	22076	the
B-api_mention	22077	22088	toByteArray
I-api_mention	22088	22089	(
I-api_mention	22089	22093	args
I-api_mention	22093	22094	)
O	22095	22101	method
O	22101	22102	.

O	22103	22107	Then
O	22108	22111	you
O	22112	22115	can
O	22116	22122	create
O	22123	22125	an
O	22126	22131	input
O	22132	22138	stream
O	22139	22146	wrapper
O	22147	22149	by
O	22150	22155	using
O	22156	22159	the
B-api_mention	22160	22180	ByteArrayInputStream
O	22181	22184	sub
O	22184	22185	-
O	22185	22190	class
O	22190	22191	.

O	22192	22197	These
O	22198	22201	two
O	22202	22205	are
O	22206	22212	pseudo
O	22212	22213	-
O	22213	22220	streams
O	22220	22221	,
O	22222	22226	they
O	22227	22231	both
O	22232	22241	basically
O	22242	22246	just
O	22247	22251	wrap
O	22252	22254	an
O	22255	22260	array
O	22261	22263	of
O	22264	22269	bytes
O	22269	22270	.

O	22271	22276	Using
O	22277	22280	the
O	22281	22288	streams
O	22289	22293	this
O	22294	22297	way
O	22297	22298	,
O	22299	22308	therefore
O	22308	22309	,
O	22310	22312	is
O	22313	22324	technically
O	22325	22333	possible
O	22333	22334	,
O	22335	22338	but
O	22339	22341	to
O	22342	22344	me
O	22345	22347	it
O	22348	22350	is
O	22351	22356	still
O	22357	22361	very
O	22362	22369	strange
O	22369	22370	.
O	22370	22371	.
O	22371	22372	.

O	22374	22382	Question
O	22382	22383	-
O	22383	22390	5778658
O	22390	22391	,
O	22392	22398	answer
O	22398	22399	-
O	22399	22407	10768914

O	22408	22411	You
O	22412	22416	will
O	22417	22421	need
O	22422	22424	an
O	22425	22437	intermediate
O	22438	22443	class
O	22444	22449	which
O	22450	22454	will
O	22455	22461	buffer
O	22462	22469	between
O	22469	22470	.

O	22471	22475	Each
O	22476	22480	time
B-api_mention	22481	22492	InputStream
I-api_mention	22492	22493	.
I-api_mention	22493	22497	read
I-api_mention	22497	22498	(
I-api_mention	22498	22502	args
I-api_mention	22502	22503	)
O	22504	22506	is
O	22507	22513	called
O	22513	22514	,
O	22515	22518	the
O	22519	22528	buffering
O	22529	22534	class
O	22535	22539	will
O	22540	22544	fill
O	22545	22548	the
O	22549	22555	passed
O	22556	22558	in
O	22559	22563	byte
O	22564	22569	array
O	22570	22574	with
O	22575	22578	the
O	22579	22583	next
O	22584	22589	chunk
O	22590	22596	passed
O	22597	22599	in
O	22600	22604	from
B-api_mention	22605	22617	OutputStream
I-api_mention	22617	22618	.
I-api_mention	22618	22623	write
I-api_mention	22623	22624	(
I-api_mention	22624	22628	args
I-api_mention	22628	22629	)
O	22630	22631	.

O	22632	22637	Since
O	22638	22641	the
O	22642	22647	sizes
O	22648	22650	of
O	22651	22654	the
O	22655	22661	chunks
O	22662	22665	may
O	22666	22669	not
O	22670	22672	be
O	22673	22676	the
O	22677	22681	same
O	22681	22682	,
O	22683	22686	the
O	22687	22694	adapter
O	22695	22700	class
O	22701	22705	will
O	22706	22710	need
O	22711	22713	to
O	22714	22719	store
O	22720	22721	a
O	22722	22729	certain
O	22730	22736	amount
O	22737	22742	until
O	22743	22745	it
O	22746	22749	has
O	22750	22756	enough
O	22757	22759	to
O	22760	22764	fill
O	22765	22768	the
O	22769	22773	read
O	22774	22780	buffer
O	22781	22784	and
O	22784	22785	/
O	22785	22787	or
O	22788	22790	be
O	22791	22795	able
O	22796	22798	to
O	22799	22804	store
O	22805	22807	up
O	22808	22811	any
O	22812	22818	buffer
O	22819	22827	overflow
O	22827	22828	.

O	22829	22833	This
O	22834	22841	article
O	22842	22845	has
O	22846	22847	a
O	22848	22852	nice
O	22853	22862	breakdown
O	22863	22865	of
O	22866	22867	a
O	22868	22871	few
O	22872	22881	different
O	22882	22892	approaches
O	22893	22895	to
O	22896	22900	this
O	22901	22908	problem
O	22908	22909	:
O	22910	22911	#
O	22911	22912	a

O	22914	22922	Question
O	22922	22923	-
O	22923	22930	5243754
O	22930	22931	,
O	22932	22938	answer
O	22938	22939	-
O	22939	22946	5243798

O	22947	22948	#
O	22948	22950	li
B-api_mention	22951	22963	getParameter
I-api_mention	22963	22964	(
I-api_mention	22964	22968	args
I-api_mention	22968	22969	)
O	22970	22977	returns
O	22978	22982	http
O	22983	22990	request
O	22991	23001	parameters
O	23001	23002	.

O	23003	23008	Those
O	23009	23015	passed
O	23016	23020	from
O	23021	23024	the
O	23025	23031	client
O	23032	23034	to
O	23035	23038	the
O	23039	23045	server
O	23045	23046	.

O	23047	23050	For
O	23051	23058	example
O	23059	23063	http
O	23063	23064	:
O	23064	23065	/
O	23065	23066	/
O	23066	23073	example
O	23073	23074	.
O	23074	23077	com
O	23077	23078	/
O	23078	23085	servlet
O	23085	23086	?
O	23086	23095	parameter
O	23095	23096	=
O	23096	23097	1
O	23098	23099	.

O	23100	23103	Can
O	23104	23108	only
O	23109	23115	return
B-api_mention	23116	23122	String
O	23123	23124	#
O	23124	23126	li
B-api_mention	23127	23139	getAttribute
I-api_mention	23139	23140	(
I-api_mention	23140	23144	args
I-api_mention	23144	23145	)
O	23146	23148	is
O	23149	23152	for
O	23153	23159	server
O	23159	23160	-
O	23160	23164	side
O	23165	23170	usage
O	23171	23175	only
O	23176	23177	-
O	23178	23181	you
O	23182	23186	fill
O	23187	23190	the
O	23191	23198	request
O	23199	23203	with
O	23204	23214	attributes
O	23215	23219	that
O	23220	23223	you
O	23224	23227	can
O	23228	23231	use
O	23232	23238	within
O	23239	23242	the
O	23243	23247	same
O	23248	23255	request
O	23255	23256	.

O	23257	23260	For
O	23261	23268	example
O	23269	23270	-
O	23271	23274	you
O	23275	23278	set
O	23279	23281	an
O	23282	23291	attribute
O	23292	23294	in
O	23295	23296	a
O	23297	23304	servlet
O	23304	23305	,
O	23306	23309	and
O	23310	23314	read
O	23315	23317	it
O	23318	23322	from
O	23323	23324	a
O	23325	23328	JSP
O	23328	23329	.

O	23330	23333	Can
O	23334	23336	be
O	23337	23341	used
O	23342	23345	for
O	23346	23349	any
O	23350	23356	object
O	23356	23357	,
O	23358	23361	not
O	23362	23366	just
O	23367	23373	string
O	23373	23374	.

O	23376	23384	Question
O	23384	23385	-
O	23385	23392	5243754
O	23392	23393	,
O	23394	23400	answer
O	23400	23401	-
O	23401	23409	13612866

O	23410	23412	It
O	23413	23415	is
O	23416	23423	crucial
O	23424	23426	to
O	23427	23431	know
O	23432	23436	that
O	23437	23447	attributes
O	23448	23451	are
O	23452	23455	not
O	23456	23466	parameters
O	23467	23468	.

O	23469	23472	The
O	23473	23479	return
O	23480	23484	type
O	23485	23488	for
O	23489	23499	attributes
O	23500	23502	is
O	23503	23505	an
B-api_mention	23506	23512	Object
O	23513	23514	,
O	23515	23522	whereas
O	23523	23526	the
O	23527	23533	return
O	23534	23538	type
O	23539	23542	for
O	23543	23544	a
O	23545	23554	parameter
O	23555	23557	is
O	23558	23559	a
B-api_mention	23560	23566	String
O	23567	23568	.

O	23569	23573	When
O	23574	23581	calling
O	23582	23585	the
B-api_mention	23586	23598	getAttribute
I-api_mention	23598	23599	(
I-api_mention	23599	23603	args
I-api_mention	23603	23604	)
O	23605	23611	method
O	23611	23612	,
O	23613	23617	bear
O	23618	23620	in
O	23621	23625	mind
O	23626	23630	that
O	23631	23634	the
O	23635	23645	attributes
O	23646	23650	must
O	23651	23653	be
O	23654	23658	cast
O	23658	23659	.

O	23660	23672	Additionally
O	23672	23673	,
O	23674	23679	there
O	23680	23682	is
O	23683	23685	no
O	23686	23693	servlet
O	23694	23702	specific
O	23703	23713	attributes
O	23714	23715	,
O	23716	23719	and
O	23720	23725	there
O	23726	23729	are
O	23730	23732	no
O	23733	23740	session
O	23741	23751	parameters
O	23752	23753	.

O	23754	23758	This
O	23759	23763	post
O	23764	23766	is
O	23767	23774	written
O	23775	23779	with
O	23780	23783	the
O	23784	23791	purpose
O	23792	23794	to
O	23795	23802	connect
O	23803	23805	on
O	23806	23807	@
O	23807	23812	Bozho
O	23812	23813	'
O	23813	23814	s
O	23815	23823	response
O	23823	23824	,
O	23825	23827	as
O	23828	23838	additional
O	23839	23850	information
O	23851	23855	that
O	23856	23859	can
O	23860	23862	be
O	23863	23869	useful
O	23870	23873	for
O	23874	23879	other
O	23880	23886	people
O	23886	23887	.

O	23889	23897	Question
O	23897	23898	-
O	23898	23905	5243754
O	23905	23906	,
O	23907	23913	answer
O	23913	23914	-
O	23914	23922	25074487

O	23923	23924	-
B-api_mention	23925	23937	getParameter
I-api_mention	23937	23938	(
I-api_mention	23938	23939	)
O	23940	23941	:
O	23942	23943	#
O	23943	23946	pre
O	23947	23954	request
B-api_mention	23954	23955	.
I-api_mention	23955	23967	getParameter
I-api_mention	23967	23968	(
I-api_mention	23968	23972	args
I-api_mention	23972	23973	)
O	23974	23978	will
O	23979	23982	get
O	23983	23986	the
O	23987	23992	value
O	23993	23997	from
O	23998	24001	the
O	24002	24008	posted
O	24009	24013	form
O	24014	24016	of
O	24017	24020	the
O	24021	24026	input
O	24027	24030	box
O	24031	24036	named
O	24037	24038	"
O	24038	24047	testParam
O	24047	24048	"
O	24049	24054	which
O	24055	24057	is
O	24058	24059	"
O	24059	24065	Client
O	24066	24071	param
O	24071	24072	"
O	24072	24073	.

O	24074	24076	It
O	24077	24081	will
O	24082	24086	then
O	24087	24092	print
O	24093	24095	it
O	24096	24099	out
O	24099	24100	,
O	24101	24103	so
O	24104	24107	you
O	24108	24114	should
O	24115	24118	see
O	24119	24120	"
O	24120	24126	Client
O	24127	24132	Param
O	24132	24133	"
O	24134	24136	on
O	24137	24140	the
O	24141	24147	screen
O	24147	24148	.

O	24149	24151	So
O	24152	24159	request
B-api_mention	24159	24160	.
I-api_mention	24160	24172	getParameter
I-api_mention	24172	24173	(
I-api_mention	24173	24174	)
O	24175	24179	will
O	24180	24188	retrieve
O	24189	24190	a
O	24191	24196	value
O	24197	24201	that
O	24202	24205	the
O	24206	24212	client
O	24213	24216	has
O	24217	24226	submitted
O	24226	24227	.

O	24228	24231	You
O	24232	24236	will
O	24237	24240	get
O	24241	24244	the
O	24245	24250	value
O	24251	24253	on
O	24254	24257	the
O	24258	24264	server
O	24265	24269	side
O	24269	24270	.

O	24271	24272	-
B-api_mention	24273	24285	getAttribute
I-api_mention	24285	24286	(
I-api_mention	24286	24287	)
O	24288	24289	:
O	24290	24297	request
B-api_mention	24297	24298	.
I-api_mention	24298	24310	getAttribute
I-api_mention	24310	24311	(
I-api_mention	24311	24315	args
I-api_mention	24315	24316	)
O	24317	24318	,
O	24319	24323	this
O	24324	24326	is
O	24327	24330	all
O	24331	24335	done
O	24336	24342	server
O	24343	24347	side
O	24347	24348	.

O	24349	24352	YOU
O	24353	24356	add
O	24357	24360	the
O	24361	24370	attribute
O	24371	24373	to
O	24374	24377	the
O	24378	24385	request
O	24386	24389	and
O	24390	24393	YOU
O	24394	24400	submit
O	24401	24404	the
O	24405	24412	request
O	24413	24415	to
O	24416	24423	another
O	24424	24432	resource
O	24432	24433	,
O	24434	24437	the
O	24438	24444	client
O	24445	24449	does
O	24450	24453	not
O	24454	24458	know
O	24459	24464	about
O	24465	24469	this
O	24469	24470	.

O	24471	24473	So
O	24474	24477	all
O	24478	24481	the
O	24482	24486	code
O	24487	24495	handling
O	24496	24500	this
O	24501	24506	would
O	24507	24516	typically
O	24517	24519	be
O	24520	24522	in
O	24523	24531	servlets
B-api_mention	24531	24532	.
I-api_mention	24532	24544	getAttribute
O	24545	24551	always
O	24552	24558	return
O	24559	24565	object
O	24565	24566	.

O	24568	24576	Question
O	24576	24577	-
O	24577	24584	5243754
O	24584	24585	,
O	24586	24592	answer
O	24592	24593	-
O	24593	24601	34295445

O	24602	24609	request
B-api_mention	24609	24610	.
I-api_mention	24610	24622	getParameter
I-api_mention	24622	24623	(
I-api_mention	24623	24624	)
O	24625	24627	We
O	24628	24631	use
O	24632	24639	request
B-api_mention	24639	24640	.
I-api_mention	24640	24652	getParameter
I-api_mention	24652	24653	(
I-api_mention	24653	24657	args
I-api_mention	24657	24658	)
O	24659	24661	to
O	24662	24669	extract
O	24670	24677	request
O	24678	24688	parameters
O	24689	24690	(
O	24690	24691	i
O	24691	24692	.
O	24692	24693	e
O	24693	24694	.
O	24695	24699	data
O	24700	24704	sent
O	24705	24707	by
O	24708	24715	posting
O	24716	24717	a
O	24718	24722	html
O	24723	24727	form
O	24728	24729	)
O	24729	24730	.

O	24731	24734	The
O	24735	24742	request
B-api_mention	24742	24743	.
I-api_mention	24743	24755	getParameter
I-api_mention	24755	24756	(
I-api_mention	24756	24760	args
I-api_mention	24760	24761	)
O	24762	24768	always
O	24769	24776	returns
B-api_mention	24777	24783	String
O	24784	24789	value
O	24790	24793	and
O	24794	24797	the
O	24798	24802	data
O	24803	24807	come
O	24808	24812	from
O	24813	24819	client
O	24819	24820	.
O	24821	24828	request
B-api_mention	24828	24829	.
I-api_mention	24829	24841	getAttribute
I-api_mention	24841	24842	(
I-api_mention	24842	24843	)
O	24844	24846	We
O	24847	24850	use
O	24851	24858	request
B-api_mention	24858	24859	.
I-api_mention	24859	24871	getAttribute
I-api_mention	24871	24872	(
I-api_mention	24872	24876	args
I-api_mention	24876	24877	)
O	24878	24880	to
O	24881	24884	get
O	24885	24887	an
O	24888	24894	object
O	24895	24900	added
O	24901	24903	to
O	24904	24907	the
O	24908	24915	request
O	24916	24921	scope
O	24922	24924	on
O	24925	24928	the
O	24929	24935	server
O	24936	24940	side
O	24941	24942	i
O	24942	24943	.
O	24943	24944	e
O	24944	24945	.
O	24946	24951	using
O	24952	24959	request
B-api_mention	24959	24960	.
I-api_mention	24960	24972	setAttribute
I-api_mention	24972	24973	(
I-api_mention	24973	24977	args
I-api_mention	24977	24978	)
O	24979	24980	.

O	24981	24984	You
O	24985	24988	can
O	24989	24992	add
O	24993	24996	any
O	24997	25001	type
O	25002	25004	of
O	25005	25011	object
O	25012	25015	you
O	25016	25020	like
O	25021	25025	here
O	25025	25026	,
O	25027	25034	Strings
O	25035	25036	,
O	25037	25043	Custom
O	25044	25051	objects
O	25051	25052	,
O	25053	25055	in
O	25056	25060	fact
O	25061	25064	any
O	25065	25071	object
O	25071	25072	.

O	25073	25076	You
O	25077	25080	add
O	25081	25084	the
O	25085	25094	attribute
O	25095	25097	to
O	25098	25101	the
O	25102	25109	request
O	25110	25113	and
O	25114	25121	forward
O	25122	25125	the
O	25126	25133	request
O	25134	25136	to
O	25137	25144	another
O	25145	25153	resource
O	25153	25154	,
O	25155	25158	the
O	25159	25165	client
O	25166	25170	does
O	25171	25174	not
O	25175	25179	know
O	25180	25185	about
O	25186	25190	this
O	25190	25191	.

O	25192	25194	So
O	25195	25198	all
O	25199	25202	the
O	25203	25207	code
O	25208	25216	handling
O	25217	25221	this
O	25222	25227	would
O	25228	25237	typically
O	25238	25240	be
O	25241	25243	in
O	25244	25247	JSP
O	25247	25248	/
O	25248	25256	servlets
O	25256	25257	.

O	25258	25261	You
O	25262	25265	can
O	25266	25269	use
O	25270	25277	request
B-api_mention	25277	25278	.
I-api_mention	25278	25290	setAttribute
I-api_mention	25290	25291	(
I-api_mention	25291	25295	args
I-api_mention	25295	25296	)
O	25297	25299	to
O	25300	25303	add
O	25304	25309	extra
O	25309	25310	-
O	25310	25321	information
O	25322	25325	and
O	25326	25333	forward
O	25333	25334	/
O	25334	25342	redirect
O	25343	25346	the
O	25347	25354	current
O	25355	25362	request
O	25363	25365	to
O	25366	25373	another
O	25374	25382	resource
O	25382	25383	.

O	25384	25387	For
O	25388	25395	example
O	25395	25396	,
O	25396	25404	consider
O	25405	25410	about
O	25411	25416	first
O	25416	25417	.
O	25417	25420	jsp
O	25420	25421	,
O	25422	25423	#
O	25423	25426	pre
O	25427	25430	and
O	25431	25437	second
O	25437	25438	.
O	25438	25441	jsp
O	25441	25442	:
O	25443	25444	#
O	25444	25447	pre
O	25448	25452	From
O	25453	25457	your
O	25458	25465	browser
O	25465	25466	,
O	25467	25470	run
O	25471	25476	first
O	25476	25477	.
O	25477	25480	jsp
O	25480	25481	?
O	25481	25487	CLIENT
O	25487	25488	=
O	25488	25491	you
O	25492	25495	and
O	25496	25499	the
O	25500	25506	output
O	25507	25509	on
O	25510	25514	your
O	25515	25522	browser
O	25523	25525	is
O	25526	25527	#
O	25527	25530	pre
O	25531	25534	The
O	25535	25540	basic
O	25541	25551	difference
O	25552	25559	between
B-api_mention	25560	25572	getAttribute
I-api_mention	25572	25573	(
I-api_mention	25573	25577	args
I-api_mention	25577	25578	)
O	25579	25582	and
B-api_mention	25583	25595	getParameter
I-api_mention	25595	25596	(
I-api_mention	25596	25600	args
I-api_mention	25600	25601	)
O	25602	25604	is
O	25605	25609	that
O	25610	25613	the
O	25614	25619	first
O	25620	25626	method
O	25627	25635	extracts
O	25636	25637	a
O	25638	25639	(
O	25639	25649	serialized
O	25649	25650	)
O	25651	25655	Java
O	25656	25662	object
O	25663	25666	and
O	25667	25670	the
O	25671	25676	other
O	25677	25685	provides
O	25686	25687	a
B-api_mention	25688	25694	String
O	25695	25700	value
O	25700	25701	.

O	25702	25705	For
O	25706	25710	both
O	25711	25716	cases
O	25717	25718	a
O	25719	25723	name
O	25724	25726	is
O	25727	25732	given
O	25733	25735	so
O	25736	25740	that
O	25741	25744	its
O	25745	25750	value
O	25751	25752	(
O	25752	25754	be
O	25755	25757	it
O	25758	25764	string
O	25765	25767	or
O	25768	25769	a
O	25770	25774	java
O	25775	25779	bean
O	25779	25780	)
O	25781	25784	can
O	25785	25787	be
O	25788	25794	looked
O	25795	25797	up
O	25798	25801	and
O	25802	25811	extracted
O	25811	25812	.

O	25814	25822	Question
O	25822	25823	-
O	25823	25830	4871051
O	25830	25831	,
O	25832	25838	answer
O	25838	25839	-
O	25839	25846	4871135

O	25847	25854	Current
O	25855	25862	working
O	25863	25872	directory
O	25873	25875	is
O	25876	25883	defined
O	25884	25895	differently
O	25896	25898	in
O	25899	25908	different
O	25909	25913	Java
O	25914	25929	implementations
O	25930	25933	For
O	25934	25941	certain
O	25942	25947	prior
O	25948	25950	to
O	25951	25955	Java
O	25956	25957	7
O	25958	25963	there
O	25964	25967	was
O	25968	25970	no
O	25971	25981	consistent
O	25982	25985	way
O	25986	25988	to
O	25989	25992	get
O	25993	25996	the
O	25997	26004	working
O	26005	26014	directory
O	26014	26015	.

O	26016	26019	You
O	26020	26025	could
O	26026	26030	work
O	26031	26037	around
O	26038	26042	this
O	26043	26045	by
O	26046	26055	launching
O	26056	26060	Java
O	26061	26065	with
O	26066	26067	-
O	26067	26068	D
O	26069	26072	and
O	26073	26081	defining
O	26082	26083	a
O	26084	26092	variable
O	26093	26095	to
O	26096	26100	hold
O	26101	26104	the
O	26105	26109	info
O	26110	26119	Something
O	26120	26124	like
O	26125	26129	java
O	26130	26131	-
O	26131	26135	Dcom
O	26135	26136	.
O	26136	26145	mycompany
O	26145	26146	.
O	26146	26156	workingDir
O	26156	26157	=
O	26157	26170	StringLiteral
O	26171	26175	That
O	26175	26176	'
O	26176	26177	s
O	26178	26181	not
O	26182	26187	quite
O	26188	26193	right
O	26193	26194	,
O	26195	26198	but
O	26199	26202	you
O	26203	26206	get
O	26207	26210	the
O	26211	26215	idea
O	26215	26216	.

O	26217	26221	Then
B-api_mention	26222	26228	System
I-api_mention	26228	26229	.
I-api_mention	26229	26240	getProperty
I-api_mention	26240	26241	(
I-api_mention	26241	26245	args
I-api_mention	26245	26246	)
O	26247	26248	.
O	26248	26249	.
O	26249	26250	.

O	26252	26260	Question
O	26260	26261	-
O	26261	26268	4871051
O	26268	26269	,
O	26270	26276	answer
O	26276	26277	-
O	26277	26285	20810612

O	26286	26287	I
O	26287	26288	'
O	26288	26289	m
O	26290	26292	on
O	26293	26298	Linux
O	26299	26302	and
O	26303	26306	get
O	26307	26311	same
O	26312	26318	result
O	26319	26322	for
O	26323	26327	both
O	26328	26330	of
O	26331	26336	these
O	26337	26347	approaches
O	26347	26348	:
O	26349	26350	#
O	26350	26353	pre
B-api_mention	26354	26359	Paths
I-api_mention	26359	26360	.
I-api_mention	26360	26363	get
I-api_mention	26363	26364	(
I-api_mention	26364	26365	"
I-api_mention	26365	26366	"
I-api_mention	26366	26367	)
O	26368	26372	docs
B-api_mention	26373	26379	System
I-api_mention	26379	26380	.
I-api_mention	26380	26391	getProperty
I-api_mention	26391	26392	(
I-api_mention	26392	26393	"
I-api_mention	26393	26397	user
I-api_mention	26397	26398	.
I-api_mention	26398	26401	dir
I-api_mention	26401	26402	"
I-api_mention	26402	26403	)
O	26404	26408	docs

O	26410	26418	Question
O	26418	26419	-
O	26419	26426	4871051
O	26426	26427	,
O	26428	26434	answer
O	26434	26435	-
O	26435	26443	21274808

O	26444	26447	Use
B-api_mention	26448	26458	CodeSource
I-api_mention	26458	26459	#
I-api_mention	26459	26470	getLocation
I-api_mention	26470	26471	(
I-api_mention	26471	26472	)
O	26473	26474	.

O	26475	26479	This
O	26480	26485	works
O	26486	26490	fine
O	26491	26493	in
O	26494	26497	JAR
O	26498	26503	files
O	26504	26506	as
O	26507	26511	well
O	26511	26512	.

O	26513	26516	You
O	26517	26520	can
O	26521	26527	obtain
B-api_mention	26528	26538	CodeSource
O	26539	26541	by
B-api_mention	26542	26558	ProtectionDomain
I-api_mention	26558	26559	#
I-api_mention	26559	26572	getCodeSource
I-api_mention	26572	26573	(
I-api_mention	26573	26574	)
O	26575	26578	and
O	26579	26582	the
B-api_mention	26583	26599	ProtectionDomain
O	26600	26602	in
O	26603	26607	turn
O	26608	26611	can
O	26612	26614	be
O	26615	26623	obtained
O	26624	26626	by
B-api_mention	26627	26632	Class
I-api_mention	26632	26633	#
I-api_mention	26633	26652	getProtectionDomain
I-api_mention	26652	26653	(
I-api_mention	26653	26654	)
O	26655	26656	.

O	26657	26658	#
O	26658	26661	pre

O	26663	26671	Question
O	26671	26672	-
O	26672	26679	4871051
O	26679	26680	,
O	26681	26687	answer
O	26687	26688	-
O	26688	26696	27760556

B-api_mention	26697	26703	System
I-api_mention	26703	26704	.
I-api_mention	26704	26715	getProperty
I-api_mention	26715	26716	(
I-api_mention	26716	26720	args
I-api_mention	26720	26721	)

O	26723	26731	Question
O	26731	26732	-
O	26732	26739	5868369
O	26739	26740	,
O	26741	26747	answer
O	26747	26748	-
O	26748	26755	5868454

O	26756	26759	You
O	26760	26764	need
O	26765	26767	to
O	26768	26771	use
O	26772	26775	the
B-api_mention	26776	26784	readLine
I-api_mention	26784	26785	(
I-api_mention	26785	26789	args
I-api_mention	26789	26790	)
O	26791	26797	method
O	26798	26800	in
O	26801	26806	class
B-api_mention	26807	26821	BufferedReader
O	26822	26823	.

O	26824	26830	Create
O	26831	26832	a
O	26833	26836	new
O	26837	26843	object
O	26844	26848	from
O	26849	26853	that
O	26854	26859	class
O	26860	26863	and
O	26864	26871	operate
O	26872	26876	this
O	26877	26883	method
O	26884	26886	on
O	26887	26890	him
O	26891	26894	and
O	26895	26899	save
O	26900	26902	it
O	26903	26905	to
O	26906	26907	a
O	26908	26914	string
O	26914	26915	.

B-api_mention	26916	26928	BufferReader
O	26929	26932	API

O	26934	26942	Question
O	26942	26943	-
O	26943	26950	5868369
O	26950	26951	,
O	26952	26958	answer
O	26958	26959	-
O	26959	26967	20593147

O	26968	26970	In
O	26971	26975	Java
O	26976	26977	8
O	26977	26978	,
O	26979	26982	you
O	26983	26988	could
O	26989	26991	do
O	26991	26992	:
O	26993	26994	#
O	26994	26997	pre
O	26998	27002	Some
O	27003	27008	notes
O	27008	27009	:
O	27010	27013	The
O	27014	27020	stream
O	27021	27029	returned
O	27030	27032	by
B-api_mention	27033	27038	Files
I-api_mention	27038	27039	.
I-api_mention	27039	27044	lines
O	27045	27046	(
O	27046	27052	unlike
O	27053	27057	most
O	27058	27065	streams
O	27065	27066	)
O	27067	27072	needs
O	27073	27075	to
O	27076	27078	be
O	27079	27085	closed
O	27085	27086	.

O	27087	27090	For
O	27091	27094	the
O	27095	27102	reasons
O	27103	27112	mentioned
O	27113	27117	here
O	27118	27119	I
O	27120	27125	avoid
O	27126	27131	using
B-api_mention	27132	27139	forEach
I-api_mention	27139	27140	(
I-api_mention	27140	27144	args
I-api_mention	27144	27145	)
O	27146	27147	.

O	27148	27151	The
O	27152	27159	strange
O	27160	27164	code
O	27165	27166	(
B-api_mention	27166	27174	Iterable
I-api_mention	27174	27175	<
I-api_mention	27175	27176	T
I-api_mention	27176	27177	>
O	27177	27178	)
B-api_mention	27179	27184	lines
I-api_mention	27184	27185	:
I-api_mention	27185	27186	:
I-api_mention	27186	27194	iterator
O	27195	27200	casts
O	27201	27202	a
B-api_mention	27203	27209	Stream
O	27210	27212	to
O	27213	27215	an
B-api_mention	27216	27224	Iterable
O	27224	27225	.

O	27227	27235	Question
O	27235	27236	-
O	27236	27243	5868369
O	27243	27244	,
O	27245	27251	answer
O	27251	27252	-
O	27252	27260	31265714

O	27261	27263	In
O	27264	27268	Java
O	27269	27270	8
O	27270	27271	,
O	27272	27277	there
O	27278	27280	is
O	27281	27285	also
O	27286	27288	an
O	27289	27300	alternative
O	27301	27303	to
O	27304	27309	using
B-api_mention	27310	27315	Files
I-api_mention	27315	27316	.
I-api_mention	27316	27321	lines
I-api_mention	27321	27322	(
I-api_mention	27322	27323	)
O	27324	27325	.

O	27326	27328	If
O	27329	27333	your
O	27334	27339	input
O	27340	27346	source
O	27347	27350	isn
O	27350	27351	'
O	27351	27352	t
O	27353	27354	a
O	27355	27359	file
O	27360	27363	but
O	27364	27373	something
O	27374	27378	more
O	27379	27387	abstract
O	27388	27392	like
O	27393	27394	a
B-api_mention	27395	27401	Reader
O	27402	27404	or
O	27405	27407	an
B-api_mention	27408	27419	InputStream
O	27420	27421	,
O	27422	27425	you
O	27426	27429	can
O	27430	27436	stream
O	27437	27440	the
O	27441	27446	lines
O	27447	27450	via
O	27451	27454	the
B-api_mention	27455	27469	BufferedReader
O	27470	27471	s
B-api_mention	27472	27477	lines
I-api_mention	27477	27478	(
I-api_mention	27478	27482	args
I-api_mention	27482	27483	)
O	27484	27490	method
O	27490	27491	.

O	27492	27495	For
O	27496	27503	example
O	27503	27504	:
O	27505	27506	#
O	27506	27509	pre
O	27510	27514	will
O	27515	27519	call
B-api_mention	27520	27531	processLine
I-api_mention	27531	27532	(
I-api_mention	27532	27536	args
I-api_mention	27536	27537	)
O	27538	27541	for
O	27542	27546	each
O	27547	27552	input
O	27553	27557	line
O	27558	27562	read
O	27563	27565	by
O	27566	27569	the
B-api_mention	27570	27584	BufferedReader
O	27585	27586	.

O	27588	27596	Question
O	27596	27597	-
O	27597	27604	5868369
O	27604	27605	,
O	27606	27612	answer
O	27612	27613	-
O	27613	27621	32542424

O	27622	27626	What
O	27627	27630	you
O	27631	27634	can
O	27635	27637	do
O	27638	27640	is
O	27641	27645	scan
O	27646	27649	the
O	27650	27656	entire
O	27657	27661	text
O	27662	27667	using
B-api_mention	27668	27675	Scanner
O	27676	27679	and
O	27680	27682	go
O	27683	27690	through
O	27691	27694	the
O	27695	27699	text
O	27700	27704	line
O	27705	27707	by
O	27708	27712	line
O	27712	27713	.

O	27714	27716	Of
O	27717	27723	course
O	27724	27727	you
O	27728	27734	should
O	27735	27741	import
O	27742	27745	the
O	27746	27755	following
O	27755	27756	:
O	27757	27758	#
O	27758	27761	pre
B-api_mention	27762	27769	Scanner
O	27770	27779	basically
O	27780	27785	scans
O	27786	27789	all
O	27790	27793	the
O	27794	27798	text
O	27798	27799	.

O	27800	27803	The
O	27804	27809	while
O	27810	27814	loop
O	27815	27817	is
O	27818	27822	used
O	27823	27825	to
O	27826	27834	traverse
O	27835	27842	through
O	27843	27846	the
O	27847	27853	entire
O	27854	27858	text
O	27858	27859	.

O	27860	27863	The
B-api_mention	27864	27865	.
I-api_mention	27865	27876	hasNextLine
I-api_mention	27876	27877	(
I-api_mention	27877	27881	args
I-api_mention	27881	27882	)
O	27883	27891	function
O	27892	27894	is
O	27895	27896	a
O	27897	27904	boolean
O	27905	27909	that
O	27910	27917	returns
O	27918	27922	true
O	27923	27925	if
O	27926	27931	there
O	27932	27935	are
O	27936	27941	still
O	27942	27946	more
O	27947	27952	lines
O	27953	27955	in
O	27956	27959	the
O	27960	27964	text
O	27964	27965	.

O	27966	27969	The
B-api_mention	27970	27971	.
I-api_mention	27971	27979	nextLine
I-api_mention	27979	27980	(
I-api_mention	27980	27984	args
I-api_mention	27984	27985	)
O	27986	27994	function
O	27995	28000	gives
O	28001	28004	you
O	28005	28007	an
O	28008	28014	entire
O	28015	28019	line
O	28020	28022	as
O	28023	28024	a
B-api_mention	28025	28031	String
O	28032	28037	which
O	28038	28041	you
O	28042	28045	can
O	28046	28050	then
O	28051	28054	use
O	28055	28058	the
O	28059	28062	way
O	28063	28066	you
O	28067	28071	want
O	28071	28072	.

O	28073	28076	Try
B-api_mention	28077	28083	System
I-api_mention	28083	28084	.
I-api_mention	28084	28087	out
I-api_mention	28087	28088	.
I-api_mention	28088	28095	println
I-api_mention	28095	28096	(
I-api_mention	28096	28100	args
I-api_mention	28100	28101	)
O	28102	28104	to
O	28105	28110	print
O	28111	28114	the
O	28115	28119	text
O	28119	28120	.

O	28121	28125	Side
O	28126	28130	Note
O	28130	28131	:
O	28132	28133	.
O	28133	28136	txt
O	28137	28139	is
O	28140	28143	the
O	28144	28148	file
O	28149	28153	type
O	28154	28158	text
O	28158	28159	.

O	28161	28169	Question
O	28169	28170	-
O	28170	28177	5982447
O	28177	28178	,
O	28179	28185	answer
O	28185	28186	-
O	28186	28193	5982478

O	28194	28197	Use
O	28198	28201	the
B-api_mention	28202	28205	Set
I-api_mention	28205	28206	#
I-api_mention	28206	28213	toArray
I-api_mention	28213	28214	(
I-api_mention	28214	28215	T
I-api_mention	28215	28216	[
I-api_mention	28216	28217	]
I-api_mention	28217	28218	)
O	28219	28225	method
O	28226	28232	taking
O	28233	28234	a
O	28235	28240	typed
O	28241	28246	array
O	28247	28255	argument
O	28256	28258	of
O	28259	28262	the
O	28263	28267	same
O	28268	28272	size
O	28272	28273	.

B-api_mention	28274	28280	String
O	28280	28281	[
O	28281	28282	]
O	28283	28292	GPXFILES1
O	28293	28294	=
O	28295	28300	myset
B-api_mention	28300	28301	.
I-api_mention	28301	28308	toArray
I-api_mention	28308	28309	(
I-api_mention	28309	28313	args
I-api_mention	28313	28314	)
O	28314	28315	;
O	28316	28317	A
O	28318	28327	different
O	28328	28332	size
O	28333	28336	can
O	28337	28341	also
O	28341	28342	,
O	28343	28346	but
O	28347	28351	that
O	28352	28357	would
O	28358	28363	force
O	28364	28367	the
B-api_mention	28368	28375	toArray
I-api_mention	28375	28376	(
I-api_mention	28376	28380	args
I-api_mention	28380	28381	)
O	28382	28388	method
O	28389	28391	to
O	28392	28398	create
O	28399	28400	a
O	28401	28404	new
O	28405	28410	array
O	28411	28413	to
O	28414	28420	return
O	28421	28428	instead
O	28429	28431	of
O	28432	28439	reusing
O	28440	28443	the
O	28444	28452	provided
O	28453	28461	argument
O	28461	28462	,
O	28463	28468	which
O	28469	28472	may
O	28473	28476	end
O	28477	28479	up
O	28480	28482	to
O	28483	28485	be
O	28486	28490	less
O	28491	28500	efficient
O	28500	28501	.

O	28502	28505	See
O	28506	28510	also
O	28511	28514	the
O	28515	28521	source
O	28522	28526	code
O	28527	28529	of
B-api_mention	28530	28548	AbstractCollection
I-api_mention	28548	28549	#
I-api_mention	28549	28556	toArray
I-api_mention	28556	28557	(
I-api_mention	28557	28558	)
O	28559	28560	.

O	28562	28570	Question
O	28570	28571	-
O	28571	28578	5455794
O	28578	28579	,
O	28580	28586	answer
O	28586	28587	-
O	28587	28594	5455809

O	28595	28597	st
B-api_mention	28597	28598	.
I-api_mention	28598	28608	replaceAll
I-api_mention	28608	28609	(
I-api_mention	28609	28613	args
I-api_mention	28613	28614	)
O	28615	28622	removes
O	28623	28626	all
O	28627	28638	whitespaces
O	28639	28642	and
O	28643	28646	non
O	28646	28647	-
O	28647	28654	visible
O	28655	28665	characters
O	28666	28667	(
O	28667	28668	e
O	28668	28669	.
O	28669	28670	g
O	28670	28671	.
O	28671	28672	,
O	28673	28676	tab
O	28676	28677	,
O	28678	28679	\
O	28679	28680	n
O	28681	28682	)
O	28682	28683	.

O	28684	28686	st
B-api_mention	28686	28687	.
I-api_mention	28687	28697	replaceAll
I-api_mention	28697	28698	(
I-api_mention	28698	28702	args
I-api_mention	28702	28703	)
O	28704	28707	and
O	28708	28710	st
B-api_mention	28710	28711	.
I-api_mention	28711	28721	replaceAll
I-api_mention	28721	28722	(
I-api_mention	28722	28726	args
I-api_mention	28726	28727	)
O	28728	28735	produce
O	28736	28739	the
O	28740	28744	same
O	28745	28751	result
O	28751	28752	.

O	28753	28756	The
O	28757	28763	second
O	28764	28769	regex
O	28770	28772	is
O	28773	28775	20
O	28775	28776	%
O	28777	28783	faster
O	28784	28788	than
O	28789	28792	the
O	28793	28798	first
O	28799	28802	one
O	28802	28803	,
O	28804	28807	but
O	28808	28810	as
O	28811	28814	the
O	28815	28821	number
O	28822	28833	consecutive
O	28834	28840	spaces
O	28841	28850	increases
O	28850	28851	,
O	28852	28855	the
O	28856	28861	first
O	28862	28865	one
O	28866	28874	performs
O	28875	28881	better
O	28882	28886	than
O	28887	28890	the
O	28891	28897	second
O	28898	28901	one
O	28901	28902	.

O	28903	28909	Assign
O	28910	28913	the
O	28914	28919	value
O	28920	28922	to
O	28923	28924	a
O	28925	28933	variable
O	28933	28934	,
O	28935	28937	if
O	28938	28941	not
O	28942	28946	used
O	28947	28955	directly
O	28955	28956	:
O	28957	28959	st
O	28960	28961	=
O	28962	28964	st
B-api_mention	28964	28965	.
I-api_mention	28965	28975	replaceAll
I-api_mention	28975	28976	(
I-api_mention	28976	28980	args
I-api_mention	28980	28981	)

O	28983	28991	Question
O	28991	28992	-
O	28992	28999	5455794
O	28999	29000	,
O	29001	29007	answer
O	29007	29008	-
O	29008	29015	5455820

O	29016	29019	How
O	29020	29025	about
B-api_mention	29026	29036	replaceAll
I-api_mention	29036	29037	(
I-api_mention	29037	29041	args
I-api_mention	29041	29042	)
O	29043	29044	.

O	29045	29050	Refer
O	29051	29055	here
O	29056	29057	.

O	29059	29067	Question
O	29067	29068	-
O	29068	29075	5769669
O	29075	29076	,
O	29077	29083	answer
O	29083	29084	-
O	29084	29091	5769679

O	29092	29095	You
O	29096	29099	can
O	29100	29103	use
B-api_mention	29104	29110	Double
I-api_mention	29110	29111	.
I-api_mention	29111	29122	parseDouble
I-api_mention	29122	29123	(
I-api_mention	29123	29124	)
O	29125	29127	to
O	29128	29135	convert
O	29136	29137	a
B-api_mention	29138	29144	String
O	29145	29147	to
O	29148	29149	a
O	29150	29156	double
O	29157	29158	:
O	29159	29160	#
O	29160	29163	pre
O	29164	29167	For
O	29168	29172	your
O	29173	29177	case
O	29178	29180	it
O	29181	29186	looks
O	29187	29191	like
O	29192	29195	you
O	29196	29200	want
O	29200	29201	:
O	29202	29203	#
O	29203	29206	pre

O	29208	29216	Question
O	29216	29217	-
O	29217	29224	5192512
O	29224	29225	,
O	29226	29232	answer
O	29232	29233	-
O	29233	29240	5192545

O	29241	29245	Edit
O	29246	29253	Updated
O	29254	29256	to
O	29257	29262	bring
O	29263	29265	in
O	29266	29274	feedback
O	29274	29275	.

O	29276	29278	So
O	29279	29282	two
O	29283	29287	ways
O	29288	29292	that
O	29293	29297	work
O	29297	29298	:
O	29299	29300	#
O	29300	29302	li
O	29303	29306	Use
B-api_mention	29307	29322	StringBulderObj
I-api_mention	29322	29323	.
I-api_mention	29323	29332	setLength
I-api_mention	29332	29333	(
I-api_mention	29333	29337	args
I-api_mention	29337	29338	)
O	29339	29340	.

O	29341	29342	#
O	29342	29344	li
O	29345	29353	Allocate
O	29354	29355	a
O	29356	29359	new
O	29360	29363	one
O	29364	29371	instead
O	29372	29374	of
O	29375	29383	clearing
O	29384	29387	the
O	29388	29394	buffer

O	29396	29404	Question
O	29404	29405	-
O	29405	29412	5192512
O	29412	29413	,
O	29414	29420	answer
O	29420	29421	-
O	29421	29428	5193094

O	29429	29434	There
O	29435	29438	are
O	29439	29448	basically
O	29449	29452	two
O	29453	29465	alternatives
O	29465	29466	,
O	29467	29472	using
B-api_mention	29473	29482	setLength
I-api_mention	29482	29483	(
I-api_mention	29483	29487	args
I-api_mention	29487	29488	)
O	29489	29491	to
O	29492	29497	reset
O	29498	29501	the
B-api_mention	29502	29515	StringBuilder
O	29516	29518	or
O	29519	29527	creating
O	29528	29529	a
O	29530	29533	new
O	29534	29537	one
O	29538	29540	in
O	29541	29545	each
O	29546	29555	iteration
O	29555	29556	.

O	29557	29561	Both
O	29562	29565	can
O	29566	29570	have
O	29571	29575	pros
O	29576	29579	and
O	29580	29584	cons
O	29585	29594	depending
O	29595	29597	on
O	29598	29601	the
O	29602	29607	usage
O	29607	29608	.

O	29609	29611	If
O	29612	29615	you
O	29616	29620	know
O	29621	29624	the
O	29625	29633	expected
O	29634	29642	capacity
O	29643	29645	of
O	29646	29649	the
B-api_mention	29650	29663	StringBuilder
O	29664	29674	beforehand
O	29674	29675	,
O	29676	29684	creating
O	29685	29686	a
O	29687	29690	new
O	29691	29694	one
O	29695	29699	each
O	29700	29704	time
O	29705	29711	should
O	29712	29714	be
O	29715	29719	just
O	29720	29722	as
O	29723	29727	fast
O	29728	29730	as
O	29731	29738	setting
O	29739	29740	a
O	29741	29744	new
O	29745	29751	length
O	29751	29752	.

O	29753	29755	It
O	29756	29760	will
O	29761	29765	also
O	29766	29770	help
O	29771	29774	the
O	29775	29782	garbage
O	29783	29792	collector
O	29792	29793	,
O	29794	29799	since
O	29800	29804	each
B-api_mention	29805	29818	StringBuilder
O	29819	29823	will
O	29824	29826	be
O	29827	29837	relatively
O	29838	29843	short
O	29843	29844	-
O	29844	29849	lived
O	29850	29853	and
O	29854	29857	the
O	29858	29860	gc
O	29861	29863	is
O	29864	29873	optimized
O	29874	29877	for
O	29878	29882	that
O	29882	29883	.

O	29884	29888	When
O	29889	29892	you
O	29893	29896	don
O	29896	29897	'
O	29897	29898	t
O	29899	29903	know
O	29904	29907	the
O	29908	29916	capacity
O	29916	29917	,
O	29918	29925	reusing
O	29926	29929	the
O	29930	29934	same
B-api_mention	29935	29948	StringBuilder
O	29949	29954	might
O	29955	29957	be
O	29958	29964	faster
O	29964	29965	.

O	29966	29970	Each
O	29971	29975	time
O	29976	29979	you
O	29980	29986	exceed
O	29987	29990	the
O	29991	29999	capacity
O	30000	30004	when
O	30005	30014	appending
O	30014	30015	,
O	30016	30017	a
O	30018	30021	new
O	30022	30029	backing
O	30030	30035	array
O	30036	30039	has
O	30040	30042	to
O	30043	30045	be
O	30046	30055	allocated
O	30056	30059	and
O	30060	30063	the
O	30064	30072	previous
O	30073	30080	content
O	30081	30084	has
O	30085	30087	to
O	30088	30090	be
O	30091	30097	copied
O	30097	30098	.

O	30099	30101	By
O	30102	30109	reusing
O	30110	30113	the
O	30114	30118	same
B-api_mention	30119	30132	StringBuilder
O	30132	30133	,
O	30134	30136	it
O	30137	30141	will
O	30142	30147	reach
O	30148	30151	the
O	30152	30158	needed
O	30159	30167	capacity
O	30168	30173	after
O	30174	30178	some
O	30179	30189	iterations
O	30190	30193	and
O	30194	30199	there
O	30200	30203	won
O	30203	30204	'
O	30204	30205	t
O	30206	30208	be
O	30209	30212	any
O	30213	30220	copying
O	30221	30231	thereafter
O	30231	30232	.

O	30234	30242	Question
O	30242	30243	-
O	30243	30250	5192512
O	30250	30251	,
O	30252	30258	answer
O	30258	30259	-
O	30259	30267	22694891

O	30268	30269	I
O	30270	30275	think
O	30276	30280	many
O	30281	30283	of
O	30284	30287	the
O	30288	30295	answers
O	30296	30300	here
O	30301	30304	may
O	30305	30307	be
O	30308	30315	missing
O	30316	30317	a
O	30318	30325	quality
O	30326	30332	method
O	30333	30341	included
O	30342	30344	in
B-api_mention	30345	30358	StringBuilder
O	30359	30360	:
B-api_mention	30361	30362	.
I-api_mention	30362	30368	delete
I-api_mention	30368	30369	(
I-api_mention	30369	30373	args
I-api_mention	30373	30374	)
O	30375	30376	.

O	30377	30378	I
O	30379	30383	know
O	30384	30388	this
O	30389	30391	is
O	30392	30393	a
O	30394	30398	late
O	30399	30404	reply
O	30404	30405	;
O	30406	30413	however
O	30413	30414	,
O	30415	30419	this
O	30420	30426	should
O	30427	30429	be
O	30430	30434	made
O	30435	30440	known
O	30441	30442	(
O	30442	30445	and
O	30446	30455	explained
O	30456	30457	a
O	30458	30461	bit
O	30462	30466	more
O	30467	30477	thoroughly
O	30477	30478	)
O	30478	30479	.

O	30480	30483	Let
O	30483	30484	'
O	30484	30485	s
O	30486	30489	say
O	30490	30493	you
O	30494	30498	have
O	30499	30500	a
B-api_mention	30501	30514	StringBuilder
O	30515	30520	table
O	30521	30522	-
O	30523	30528	which
O	30529	30532	you
O	30533	30537	wish
O	30538	30540	to
O	30541	30547	modify
O	30547	30548	,
O	30549	30560	dynamically
O	30560	30561	,
O	30562	30572	throughout
O	30573	30577	your
O	30578	30585	program
O	30586	30587	(
O	30587	30590	one
O	30591	30592	I
O	30593	30595	am
O	30596	30603	working
O	30604	30606	on
O	30607	30612	right
O	30613	30616	now
O	30617	30621	does
O	30622	30626	this
O	30626	30627	)
O	30627	30628	,
O	30629	30630	e
O	30630	30631	.
O	30631	30632	g
O	30632	30633	.
B-api_mention	30634	30647	StringBuilder
O	30648	30653	table
O	30654	30655	=
O	30656	30659	new
B-api_mention	30660	30673	StringBuilder
I-api_mention	30673	30674	(
I-api_mention	30674	30678	args
I-api_mention	30678	30679	)
O	30679	30680	;
O	30681	30683	If
O	30684	30687	you
O	30688	30691	are
O	30692	30699	looping
O	30700	30707	through
O	30708	30711	the
O	30712	30718	method
O	30719	30722	and
O	30723	30728	alter
O	30729	30732	the
O	30733	30740	content
O	30740	30741	,
O	30742	30745	use
O	30746	30749	the
O	30750	30757	content
O	30757	30758	,
O	30759	30763	then
O	30764	30768	wish
O	30769	30771	to
O	30772	30779	discard
O	30780	30783	the
O	30784	30791	content
O	30792	30794	to
O	30795	30796	"
O	30796	30801	clean
O	30802	30804	up
O	30804	30805	"
O	30806	30809	the
B-api_mention	30810	30823	StringBuilder
O	30824	30827	for
O	30828	30831	the
O	30832	30836	next
O	30837	30846	iteration
O	30846	30847	,
O	30848	30851	you
O	30852	30855	can
O	30856	30862	delete
O	30863	30865	it
O	30865	30866	'
O	30866	30867	s
O	30868	30876	contents
O	30876	30877	,
O	30878	30879	e
O	30879	30880	.
O	30880	30881	g
O	30881	30882	.
O	30883	30888	table
B-api_mention	30888	30889	.
I-api_mention	30889	30895	delete
I-api_mention	30895	30896	(
I-api_mention	30896	30900	args
I-api_mention	30900	30901	)
O	30901	30902	.
O	30903	30908	start
O	30909	30912	and
O	30913	30916	end
O	30917	30922	being
O	30923	30926	the
O	30927	30934	indices
O	30935	30937	of
O	30938	30941	the
O	30942	30947	chars
O	30948	30951	you
O	30952	30956	wish
O	30957	30959	to
O	30960	30966	remove
O	30966	30967	.

O	30968	30971	Don
O	30971	30972	'
O	30972	30973	t
O	30974	30978	know
O	30979	30982	the
O	30983	30989	length
O	30990	30992	in
O	30993	30998	chars
O	30999	31002	and
O	31003	31007	want
O	31008	31010	to
O	31011	31017	delete
O	31018	31021	the
O	31022	31027	whole
O	31028	31033	thing
O	31033	31034	?

O	31035	31040	table
B-api_mention	31040	31041	.
I-api_mention	31041	31047	delete
I-api_mention	31047	31048	(
I-api_mention	31048	31052	args
I-api_mention	31052	31053	)
O	31053	31054	;
O	31055	31058	NOW
O	31058	31059	,
O	31060	31063	for
O	31064	31067	the
O	31068	31074	kicker
O	31074	31075	.

O	31076	31090	StringBuilders
O	31091	31092	,
O	31093	31095	as
O	31096	31105	mentioned
O	31106	31116	previously
O	31116	31117	,
O	31118	31122	take
O	31123	31124	a
O	31125	31128	lot
O	31129	31131	of
O	31132	31140	overhead
O	31141	31145	when
O	31146	31153	altered
O	31154	31164	frequently
O	31165	31166	(
O	31166	31169	and
O	31170	31173	can
O	31174	31179	cause
O	31180	31186	safety
O	31187	31193	issues
O	31194	31198	with
O	31199	31205	regard
O	31206	31208	to
O	31209	31218	threading
O	31218	31219	)
O	31219	31220	;
O	31221	31230	therefore
O	31230	31231	,
O	31232	31235	use
B-api_mention	31236	31248	StringBuffer
O	31249	31250	-
O	31251	31255	same
O	31256	31258	as
B-api_mention	31259	31272	StringBuilder
O	31273	31274	(
O	31274	31278	with
O	31279	31280	a
O	31281	31284	few
O	31285	31295	exceptions
O	31295	31296	)
O	31297	31298	-
O	31299	31301	if
O	31302	31306	your
B-api_mention	31307	31320	StringBuilder
O	31321	31323	is
O	31324	31328	used
O	31329	31332	for
O	31333	31336	the
O	31337	31344	purpose
O	31345	31347	of
O	31348	31359	interfacing
O	31360	31364	with
O	31365	31368	the
O	31369	31373	user
O	31373	31374	.

O	31376	31384	Question
O	31384	31385	-
O	31385	31392	5192512
O	31392	31393	,
O	31394	31400	answer
O	31400	31401	-
O	31401	31409	30190425

O	31410	31411	I
O	31411	31412	'
O	31412	31414	ll
O	31415	31419	vote
O	31420	31423	for
O	31424	31426	sb
B-api_mention	31426	31427	.
I-api_mention	31427	31436	setLength
I-api_mention	31436	31437	(
I-api_mention	31437	31441	args
I-api_mention	31441	31442	)
O	31442	31443	;
O	31444	31447	not
O	31448	31452	only
O	31453	31460	because
O	31461	31463	it
O	31463	31464	'
O	31464	31465	s
O	31466	31469	one
O	31470	31478	function
O	31479	31483	call
O	31484	31487	but
O	31488	31495	because
O	31496	31498	it
O	31499	31502	don
O	31502	31503	'
O	31503	31504	t
O	31505	31513	actually
O	31514	31518	copy
O	31519	31522	the
O	31523	31528	array
O	31529	31533	into
O	31534	31541	another
O	31542	31547	array
O	31548	31552	like
O	31553	31555	sb
B-api_mention	31555	31556	.
I-api_mention	31556	31562	delete
I-api_mention	31562	31563	(
I-api_mention	31563	31567	args
I-api_mention	31567	31568	)
O	31568	31569	;
O	31570	31571	,
O	31572	31574	It
O	31575	31579	just
O	31580	31584	fill
O	31585	31588	the
O	31589	31598	remaining
O	31599	31609	characters
O	31610	31612	to
O	31613	31615	be
O	31616	31617	0
O	31618	31621	and
O	31622	31625	set
O	31626	31629	the
O	31630	31636	length
O	31637	31645	variable
O	31646	31648	to
O	31649	31652	the
O	31653	31656	new
O	31657	31663	length
O	31663	31664	.

O	31665	31668	You
O	31669	31672	can
O	31673	31677	take
O	31678	31679	a
O	31680	31684	look
O	31685	31689	into
O	31690	31695	their
O	31696	31710	implementation
O	31711	31713	to
O	31714	31722	validate
O	31723	31725	my
O	31726	31731	point
O	31732	31736	from
O	31737	31741	here
O	31742	31744	at
B-api_mention	31745	31754	setLength
O	31755	31763	function
O	31764	31767	and
O	31768	31775	delete0
O	31776	31784	function
O	31784	31785	.

O	31787	31795	Question
O	31795	31796	-
O	31796	31803	6094575
O	31803	31804	,
O	31805	31811	answer
O	31811	31812	-
O	31812	31819	6094600

O	31820	31823	You
O	31824	31827	can
O	31828	31831	use
B-api_mention	31832	31837	Class
I-api_mention	31837	31838	.
I-api_mention	31838	31845	forName
I-api_mention	31845	31846	(
I-api_mention	31846	31847	)
O	31848	31850	to
O	31851	31854	get
O	31855	31856	a
B-api_mention	31857	31862	Class
O	31863	31869	object
O	31870	31872	of
O	31873	31876	the
O	31877	31884	desired
O	31885	31890	class
O	31890	31891	.

O	31892	31896	Then
O	31897	31900	use
B-api_mention	31901	31915	getConstructor
I-api_mention	31915	31916	(
I-api_mention	31916	31917	)
O	31918	31920	to
O	31921	31925	find
O	31926	31929	the
O	31930	31937	desired
B-api_mention	31938	31949	Constructor
O	31950	31956	object
O	31956	31957	.

O	31958	31965	Finally
O	31965	31966	,
O	31967	31971	call
B-api_mention	31972	31983	newInstance
I-api_mention	31983	31984	(
I-api_mention	31984	31985	)
O	31986	31988	on
O	31989	31993	that
O	31994	32000	object
O	32001	32003	to
O	32004	32007	get
O	32008	32012	your
O	32013	32016	new
O	32017	32025	instance
O	32025	32026	.

O	32027	32028	#
O	32028	32031	pre

O	32033	32041	Question
O	32041	32042	-
O	32042	32049	6094575
O	32049	32050	,
O	32051	32057	answer
O	32057	32058	-
O	32058	32065	6094602

O	32066	32069	Yes
O	32069	32070	,
O	32071	32080	something
O	32081	32085	like
O	32085	32086	:
O	32087	32088	#
O	32088	32091	pre
O	32092	32096	That
O	32097	32101	will
O	32102	32106	only
O	32107	32111	work
O	32112	32115	for
O	32116	32117	a
O	32118	32124	single
O	32125	32131	string
O	32132	32141	parameter
O	32142	32144	of
O	32145	32151	course
O	32151	32152	,
O	32153	32156	but
O	32157	32160	you
O	32161	32164	can
O	32165	32171	modify
O	32172	32174	it
O	32175	32181	pretty
O	32182	32188	easily
O	32188	32189	.

O	32190	32194	Note
O	32195	32199	that
O	32200	32203	the
O	32204	32209	class
O	32210	32214	name
O	32215	32218	has
O	32219	32221	to
O	32222	32224	be
O	32225	32226	a
O	32227	32232	fully
O	32232	32233	-
O	32233	32242	qualified
O	32243	32246	one
O	32246	32247	,
O	32248	32249	i
O	32249	32250	.
O	32250	32251	e
O	32251	32252	.
O	32253	32262	including
O	32263	32266	the
O	32267	32276	namespace
O	32276	32277	.

O	32278	32281	For
O	32282	32288	nested
O	32289	32296	classes
O	32296	32297	,
O	32298	32301	you
O	32302	32306	need
O	32307	32309	to
O	32310	32313	use
O	32314	32315	a
O	32316	32322	dollar
O	32323	32324	(
O	32324	32326	as
O	32327	32331	that
O	32331	32332	'
O	32332	32333	s
O	32334	32338	what
O	32339	32342	the
O	32343	32351	compiler
O	32352	32356	uses
O	32356	32357	)
O	32357	32358	.

O	32359	32362	For
O	32363	32370	example
O	32370	32371	:
O	32372	32373	#
O	32373	32376	pre
O	32377	32379	To
O	32380	32386	obtain
O	32387	32390	the
B-api_mention	32391	32396	Class
O	32397	32403	object
O	32404	32407	for
O	32408	32412	that
O	32412	32413	,
O	32414	32417	you
O	32417	32418	'
O	32418	32419	d
O	32420	32424	need
B-api_mention	32425	32430	Class
I-api_mention	32430	32431	.
I-api_mention	32431	32438	forName
I-api_mention	32438	32439	(
I-api_mention	32439	32443	args
I-api_mention	32443	32444	)
O	32445	32446	.

O	32448	32456	Question
O	32456	32457	-
O	32457	32464	6094575
O	32464	32465	,
O	32466	32472	answer
O	32472	32473	-
O	32473	32481	26159586

O	32482	32486	when
O	32487	32492	using
O	32493	32494	(
O	32494	32495	i
O	32495	32496	.
O	32496	32497	e
O	32497	32498	.
O	32498	32499	)
B-api_mention	32500	32514	getConstructor
I-api_mention	32514	32515	(
I-api_mention	32515	32519	args
I-api_mention	32519	32520	)
O	32521	32524	the
O	32525	32536	constructor
O	32537	32540	has
O	32541	32543	to
O	32544	32546	be
O	32547	32555	declared
O	32556	32562	public
O	32562	32563	.

O	32564	32573	Otherwise
O	32574	32575	a
B-api_mention	32576	32597	NoSuchMethodException
O	32598	32600	is
O	32601	32607	thrown
O	32607	32608	.

O	32609	32611	if
O	32612	32615	you
O	32616	32620	want
O	32621	32623	to
O	32624	32630	access
O	32631	32632	a
O	32633	32636	non
O	32636	32637	-
O	32637	32643	public
O	32644	32655	constructor
O	32656	32659	you
O	32660	32664	have
O	32665	32667	to
O	32668	32671	use
O	32672	32679	instead
O	32680	32681	(
O	32681	32682	i
O	32682	32683	.
O	32683	32684	e
O	32684	32685	.
O	32685	32686	)
B-api_mention	32687	32709	getDeclaredConstructor
I-api_mention	32709	32710	(
I-api_mention	32710	32714	args
I-api_mention	32714	32715	)
O	32716	32717	.

O	32719	32727	Question
O	32727	32728	-
O	32728	32735	5175728
O	32735	32736	,
O	32737	32743	answer
O	32743	32744	-
O	32744	32751	5175771

O	32752	32756	Have
O	32757	32758	a
O	32759	32763	look
O	32764	32766	at
O	32767	32770	the
B-api_mention	32771	32775	Date
O	32776	32781	class
O	32781	32782	.

O	32783	32788	There
O	32788	32789	'
O	32789	32790	s
O	32791	32795	also
O	32796	32799	the
O	32800	32805	newer
O	32806	32814	Calendar
O	32815	32820	class
O	32821	32826	which
O	32827	32829	is
O	32830	32833	the
O	32834	32843	preferred
O	32844	32850	method
O	32851	32853	of
O	32854	32859	doing
O	32860	32864	many
O	32865	32869	date
O	32870	32871	/
O	32872	32876	time
O	32877	32887	operations
O	32888	32889	(
O	32889	32890	a
O	32891	32894	lot
O	32895	32897	of
O	32898	32901	the
O	32902	32909	methods
O	32910	32912	on
B-api_mention	32913	32917	Date
O	32918	32922	have
O	32923	32927	been
O	32928	32938	deprecated
O	32938	32939	.
O	32939	32940	)
O	32941	32943	If
O	32944	32947	you
O	32948	32952	just
O	32953	32957	want
O	32958	32961	the
O	32962	32969	current
O	32970	32974	date
O	32974	32975	,
O	32976	32980	then
O	32981	32987	either
O	32988	32994	create
O	32995	32996	a
O	32997	33000	new
B-api_mention	33001	33005	Date
O	33006	33012	object
O	33013	33015	or
O	33016	33020	call
B-api_mention	33021	33029	Calendar
I-api_mention	33029	33030	.
I-api_mention	33030	33041	getInstance
I-api_mention	33041	33042	(
I-api_mention	33042	33046	args
I-api_mention	33046	33047	)
O	33047	33048	;
O	33049	33050	.

O	33052	33060	Question
O	33060	33061	-
O	33061	33068	5175728
O	33068	33069	,
O	33070	33076	answer
O	33076	33077	-
O	33077	33084	5175900

O	33085	33087	It
O	33088	33095	depends
O	33096	33098	on
O	33099	33103	what
O	33104	33108	form
O	33109	33111	of
O	33112	33116	date
O	33117	33118	/
O	33119	33123	time
O	33124	33127	you
O	33128	33132	want
O	33132	33133	:
O	33134	33135	#
O	33135	33137	li
O	33138	33140	If
O	33141	33144	you
O	33145	33149	want
O	33150	33153	the
O	33154	33158	date
O	33159	33160	/
O	33161	33165	time
O	33166	33168	as
O	33169	33170	a
O	33171	33177	single
O	33178	33185	numeric
O	33186	33191	value
O	33191	33192	,
O	33193	33197	then
B-api_mention	33198	33204	System
I-api_mention	33204	33205	.
I-api_mention	33205	33222	currentTimeMillis
I-api_mention	33222	33223	(
I-api_mention	33223	33227	args
I-api_mention	33227	33228	)
O	33229	33234	gives
O	33235	33238	you
O	33239	33243	that
O	33243	33244	,
O	33245	33254	expressed
O	33255	33257	as
O	33258	33261	the
O	33262	33268	number
O	33269	33271	of
O	33272	33284	milliseconds
O	33285	33290	after
O	33291	33294	the
O	33295	33299	UNIX
O	33300	33305	epoch
O	33306	33307	(
O	33307	33309	as
O	33310	33311	a
O	33312	33316	Java
O	33317	33321	long
O	33322	33323	)
O	33323	33324	.

O	33325	33329	This
O	33330	33335	value
O	33336	33338	is
O	33339	33340	a
O	33341	33346	delta
O	33347	33351	from
O	33352	33353	a
O	33354	33357	UTC
O	33358	33362	time
O	33362	33363	-
O	33363	33368	point
O	33368	33369	,
O	33370	33373	and
O	33374	33376	is
O	33377	33388	independent
O	33389	33391	of
O	33392	33395	the
O	33396	33401	local
O	33402	33406	time
O	33406	33407	-
O	33407	33411	zone
O	33412	33413	.
O	33413	33414	.
O	33414	33415	.
O	33416	33424	assuming
O	33425	33429	that
O	33430	33433	the
O	33434	33440	system
O	33441	33446	clock
O	33447	33450	has
O	33451	33455	been
O	33456	33459	set
O	33460	33469	correctly
O	33469	33470	.

O	33471	33472	#
O	33472	33474	li
O	33475	33477	If
O	33478	33481	you
O	33482	33486	want
O	33487	33490	the
O	33491	33495	date
O	33496	33497	/
O	33498	33502	time
O	33503	33505	in
O	33506	33507	a
O	33508	33512	form
O	33513	33517	that
O	33518	33524	allows
O	33525	33528	you
O	33529	33531	to
O	33532	33538	access
O	33539	33542	the
O	33543	33553	components
O	33554	33555	(
O	33555	33559	year
O	33559	33560	,
O	33561	33566	month
O	33566	33567	,
O	33568	33571	etc
O	33571	33572	)
O	33573	33584	numerically
O	33584	33585	,
O	33586	33589	you
O	33590	33595	could
O	33596	33599	use
O	33600	33603	one
O	33604	33606	of
O	33607	33610	the
O	33611	33620	following
O	33620	33621	:
O	33622	33623	#
O	33623	33625	li
O	33626	33629	new
B-api_mention	33630	33634	Date
I-api_mention	33634	33635	(
I-api_mention	33635	33639	args
I-api_mention	33639	33640	)
O	33641	33646	gives
O	33647	33650	you
O	33651	33652	a
B-api_mention	33653	33657	Date
O	33658	33664	object
O	33665	33676	initialized
O	33677	33681	with
O	33682	33685	the
O	33686	33693	current
O	33694	33698	date
O	33699	33700	/
O	33701	33705	time
O	33705	33706	.

O	33707	33710	The
O	33711	33718	problem
O	33719	33721	is
O	33722	33726	that
O	33727	33730	the
B-api_mention	33731	33735	Date
O	33736	33739	API
O	33740	33747	methods
O	33748	33751	are
O	33752	33758	mostly
O	33759	33765	flawed
O	33766	33767	.
O	33767	33768	.
O	33768	33769	.
O	33770	33773	and
O	33774	33784	deprecated
O	33784	33785	.

O	33786	33787	#
O	33787	33789	li
B-api_mention	33790	33798	Calendar
I-api_mention	33798	33799	.
I-api_mention	33799	33810	getInstance
I-api_mention	33810	33811	(
I-api_mention	33811	33815	args
I-api_mention	33815	33816	)
O	33817	33822	gives
O	33823	33826	you
O	33827	33828	a
B-api_mention	33829	33837	Calendar
O	33838	33844	object
O	33845	33856	initialized
O	33857	33861	with
O	33862	33865	the
O	33866	33873	current
O	33874	33878	date
O	33879	33880	/
O	33881	33885	time
O	33885	33886	,
O	33887	33892	using
O	33893	33896	the
O	33897	33904	default
B-api_mention	33905	33911	Locale
O	33912	33915	and
B-api_mention	33916	33924	TimeZone
O	33925	33926	.

O	33927	33932	Other
O	33933	33942	overloads
O	33943	33948	allow
O	33949	33952	you
O	33953	33955	to
O	33956	33959	use
O	33960	33961	a
O	33962	33970	specific
B-api_mention	33971	33977	Locale
O	33978	33981	and
O	33981	33982	/
O	33982	33984	or
B-api_mention	33985	33993	TimeZone
O	33994	33995	.

B-api_mention	33996	34004	Calendar
O	34005	34010	works
O	34011	34012	.
O	34012	34013	.
O	34013	34014	.
O	34015	34018	but
O	34019	34022	the
O	34023	34027	APIs
O	34028	34031	are
O	34032	34037	still
O	34038	34048	cumbersome
O	34048	34049	.

O	34050	34051	#
O	34051	34053	li
O	34054	34057	new
B-api_mention	34058	34061	org
I-api_mention	34061	34062	.
I-api_mention	34062	34066	joda
I-api_mention	34066	34067	.
I-api_mention	34067	34071	time
I-api_mention	34071	34072	.
I-api_mention	34072	34080	DateTime
I-api_mention	34080	34081	(
I-api_mention	34081	34085	args
I-api_mention	34085	34086	)
O	34087	34092	gives
O	34093	34096	you
O	34097	34098	a
O	34099	34103	Joda
O	34103	34104	-
O	34104	34108	time
O	34109	34115	object
O	34116	34127	initialized
O	34128	34132	with
O	34133	34136	the
O	34137	34144	current
O	34145	34149	date
O	34150	34151	/
O	34152	34156	time
O	34156	34157	,
O	34158	34163	using
O	34164	34167	the
O	34168	34175	default
O	34176	34180	time
O	34181	34185	zone
O	34186	34189	and
O	34190	34200	chronology
O	34200	34201	.

O	34202	34207	There
O	34208	34211	are
O	34212	34216	lots
O	34217	34219	of
O	34220	34225	other
O	34226	34230	Joda
O	34231	34243	alternatives
O	34244	34245	.
O	34245	34246	.
O	34246	34247	.
O	34248	34251	too
O	34252	34256	many
O	34257	34259	to
O	34260	34268	describe
O	34269	34273	here
O	34273	34274	.

O	34275	34276	#
O	34276	34278	li
O	34279	34281	in
O	34282	34286	Java
O	34287	34288	8
O	34288	34289	,
O	34290	34297	calling
B-api_mention	34298	34311	LocalDateTime
I-api_mention	34311	34312	.
I-api_mention	34312	34315	now
I-api_mention	34315	34316	(
I-api_mention	34316	34320	args
I-api_mention	34320	34321	)
O	34322	34325	and
B-api_mention	34326	34339	ZonedDateTime
I-api_mention	34339	34340	.
I-api_mention	34340	34343	now
I-api_mention	34343	34344	(
I-api_mention	34344	34348	args
I-api_mention	34348	34349	)
O	34350	34354	will
O	34355	34359	give
O	34360	34363	you
O	34364	34379	representations
O	34380	34383	for
O	34384	34387	the
O	34388	34395	current
O	34396	34400	date
O	34401	34402	/
O	34403	34407	time
O	34407	34408	.

O	34409	34414	Prior
O	34415	34417	to
O	34418	34422	Java
O	34423	34424	8
O	34424	34425	,
O	34426	34430	most
O	34431	34437	people
O	34438	34441	who
O	34442	34446	know
O	34447	34452	about
O	34453	34458	these
O	34459	34465	things
O	34466	34477	recommended
O	34478	34482	Joda
O	34482	34483	-
O	34483	34487	time
O	34488	34490	as
O	34491	34497	having
O	34498	34499	(
O	34499	34501	by
O	34502	34505	far
O	34505	34506	)
O	34507	34510	the
O	34511	34515	best
O	34516	34520	Java
O	34521	34525	APIs
O	34526	34529	for
O	34530	34535	doing
O	34536	34542	things
O	34543	34552	involving
O	34553	34557	time
O	34558	34563	point
O	34564	34567	and
O	34568	34576	duration
O	34577	34589	calculations
O	34589	34590	.

O	34591	34595	With
O	34596	34600	Java
O	34601	34602	8
O	34602	34603	,
O	34604	34608	this
O	34609	34611	is
O	34612	34614	no
O	34615	34621	longer
O	34622	34626	true
O	34626	34627	.

O	34628	34635	However
O	34635	34636	,
O	34637	34639	if
O	34640	34643	you
O	34644	34647	are
O	34648	34655	already
O	34656	34661	using
O	34662	34666	Joda
O	34667	34671	time
O	34672	34674	in
O	34675	34679	your
O	34680	34688	codebase
O	34688	34689	,
O	34690	34695	there
O	34696	34698	is
O	34699	34701	no
O	34702	34708	strong
O	34709	34715	reason
O	34716	34718	to
O	34719	34726	migrate
O	34726	34727	.

O	34729	34737	Question
O	34737	34738	-
O	34738	34745	4772425
O	34745	34746	,
O	34747	34753	answer
O	34753	34754	-
O	34754	34761	4772461

O	34762	34765	Use
B-api_mention	34766	34779	LocalDateTime
I-api_mention	34779	34780	#
I-api_mention	34780	34785	parse
I-api_mention	34785	34786	(
I-api_mention	34786	34787	)
O	34788	34789	(
O	34789	34791	or
B-api_mention	34792	34805	ZonedDateTime
I-api_mention	34805	34806	#
I-api_mention	34806	34811	parse
I-api_mention	34811	34812	(
I-api_mention	34812	34813	)
O	34814	34816	if
O	34817	34820	the
O	34821	34827	string
O	34828	34835	happens
O	34836	34838	to
O	34839	34846	contain
O	34847	34848	a
O	34849	34853	time
O	34854	34858	zone
O	34859	34863	part
O	34863	34864	)
O	34865	34867	to
O	34868	34873	parse
O	34874	34875	a
B-api_mention	34876	34882	String
O	34883	34885	in
O	34886	34887	a
O	34888	34895	certain
O	34896	34903	pattern
O	34904	34908	into
O	34909	34910	a
B-api_mention	34911	34924	LocalDateTime
O	34925	34926	.

O	34927	34928	#
O	34928	34931	pre
O	34932	34935	Use
B-api_mention	34936	34949	LocalDateTime
I-api_mention	34949	34950	#
I-api_mention	34950	34956	format
I-api_mention	34956	34957	(
I-api_mention	34957	34958	)
O	34959	34960	(
O	34960	34962	or
B-api_mention	34963	34976	ZonedDateTime
I-api_mention	34976	34977	#
I-api_mention	34977	34983	format
I-api_mention	34983	34984	(
I-api_mention	34984	34985	)
O	34986	34987	)
O	34988	34990	to
O	34991	34997	format
O	34998	34999	a
B-api_mention	35000	35013	LocalDateTime
O	35014	35018	into
O	35019	35020	a
B-api_mention	35021	35027	String
O	35028	35030	in
O	35031	35032	a
O	35033	35040	certain
O	35041	35048	pattern
O	35048	35049	.

O	35050	35051	#
O	35051	35054	pre
O	35055	35057	Or
O	35058	35059	,
O	35060	35064	when
O	35065	35068	you
O	35068	35069	'
O	35069	35071	re
O	35072	35075	not
O	35076	35078	on
O	35079	35083	Java
O	35084	35085	8
O	35086	35089	yet
O	35089	35090	,
O	35091	35094	use
B-api_mention	35095	35111	SimpleDateFormat
I-api_mention	35111	35112	#
I-api_mention	35112	35117	parse
I-api_mention	35117	35118	(
I-api_mention	35118	35119	)
O	35120	35122	to
O	35123	35128	parse
O	35129	35130	a
B-api_mention	35131	35137	String
O	35138	35140	in
O	35141	35142	a
O	35143	35150	certain
O	35151	35158	pattern
O	35159	35163	into
O	35164	35165	a
B-api_mention	35166	35170	Date
O	35171	35172	.

O	35173	35174	#
O	35174	35177	pre
O	35178	35181	Use
B-api_mention	35182	35198	SimpleDateFormat
I-api_mention	35198	35199	#
I-api_mention	35199	35205	format
I-api_mention	35205	35206	(
I-api_mention	35206	35207	)
O	35208	35210	to
O	35211	35217	format
O	35218	35219	a
B-api_mention	35220	35224	Date
O	35225	35229	into
O	35230	35231	a
B-api_mention	35232	35238	String
O	35239	35241	in
O	35242	35243	a
O	35244	35251	certain
O	35252	35259	pattern
O	35259	35260	.

O	35261	35262	#
O	35262	35265	pre
O	35266	35269	See
O	35270	35274	also
O	35274	35275	:
O	35276	35277	#
O	35277	35279	li
O	35280	35284	Java
O	35285	35291	string
O	35292	35294	to
O	35295	35299	date
O	35300	35310	conversion
O	35311	35317	Update
O	35318	35319	:
O	35320	35322	as
O	35323	35326	per
O	35327	35331	your
O	35332	35338	failed
O	35339	35346	attempt
O	35346	35347	:
O	35348	35351	the
O	35352	35360	patterns
O	35361	35364	are
O	35365	35369	case
O	35370	35379	sensitive
O	35380	35381	.

O	35382	35386	Read
O	35387	35390	the
B-api_mention	35391	35395	java
I-api_mention	35395	35396	.
I-api_mention	35396	35400	text
I-api_mention	35400	35401	.
I-api_mention	35401	35417	SimpleDateFormat
O	35418	35425	javadoc
O	35426	35430	what
O	35431	35434	the
O	35435	35445	individual
O	35446	35451	parts
O	35452	35458	stands
O	35459	35462	for
O	35462	35463	.

O	35464	35466	So
O	35467	35473	stands
O	35474	35477	for
O	35478	35485	example
O	35486	35487	M
O	35488	35491	for
O	35492	35498	months
O	35499	35502	and
O	35503	35504	m
O	35505	35508	for
O	35509	35516	minutes
O	35516	35517	.

O	35518	35522	Also
O	35522	35523	,
O	35524	35529	years
O	35530	35535	exist
O	35536	35538	of
O	35539	35543	four
O	35544	35550	digits
O	35551	35555	yyyy
O	35556	35557	,
O	35558	35561	not
O	35562	35566	five
O	35567	35572	yyyyy
O	35573	35574	.

O	35575	35579	Look
O	35580	35586	closer
O	35587	35589	at
O	35590	35593	the
O	35594	35598	code
O	35599	35607	snippets
O	35608	35609	I
O	35610	35616	posted
O	35617	35621	here
O	35622	35627	above
O	35627	35628	.

O	35630	35638	Question
O	35638	35639	-
O	35639	35646	4772425
O	35646	35647	,
O	35648	35654	answer
O	35654	35655	-
O	35655	35663	18953213

O	35664	35670	remove
O	35671	35674	one
O	35675	35676	y
O	35677	35681	form
B-api_mention	35682	35698	SimpleDateFormat
O	35699	35702	dt1
O	35703	35704	=
O	35705	35708	new
B-api_mention	35709	35725	SimpleDateFormat
I-api_mention	35725	35726	(
I-api_mention	35726	35730	args
I-api_mention	35730	35731	)
O	35731	35732	;
O	35733	35739	should
O	35740	35742	be
B-api_mention	35743	35759	SimpleDateFormat
O	35760	35763	dt1
O	35764	35765	=
O	35766	35769	new
B-api_mention	35770	35786	SimpleDateFormat
I-api_mention	35786	35787	(
I-api_mention	35787	35791	args
I-api_mention	35791	35792	)
O	35792	35793	;

O	35795	35803	Question
O	35803	35804	-
O	35804	35811	5839359
O	35811	35812	,
O	35813	35819	answer
O	35819	35820	-
O	35820	35827	5839392

O	35828	35831	You
O	35831	35832	'
O	35832	35834	re
O	35835	35846	essentially
O	35847	35854	running
O	35855	35858	out
O	35859	35861	of
O	35862	35868	memory
O	35869	35871	to
O	35872	35875	run
O	35876	35879	the
O	35880	35887	process
O	35888	35896	smoothly
O	35896	35897	.

O	35898	35905	Options
O	35906	35910	that
O	35911	35915	come
O	35916	35918	to
O	35919	35923	mind
O	35923	35924	:
O	35925	35926	#
O	35926	35928	li
O	35929	35936	Specify
O	35937	35941	more
O	35942	35948	memory
O	35949	35953	like
O	35954	35957	you
O	35958	35967	mentioned
O	35967	35968	,
O	35969	35972	try
O	35973	35982	something
O	35983	35985	in
O	35986	35993	between
O	35994	35998	like
O	35999	36000	-
O	36000	36007	Xmx512m
O	36008	36013	first
O	36014	36015	#
O	36015	36017	li
O	36018	36022	Work
O	36023	36027	with
O	36028	36035	smaller
O	36036	36043	batches
O	36044	36046	of
B-api_mention	36047	36054	HashMap
O	36055	36062	objects
O	36063	36065	to
O	36066	36073	process
O	36074	36076	at
O	36077	36081	once
O	36082	36084	if
O	36085	36093	possible
O	36094	36095	#
O	36095	36097	li
O	36098	36100	If
O	36101	36104	you
O	36105	36109	have
O	36110	36111	a
O	36112	36115	lot
O	36116	36118	of
O	36119	36128	duplicate
O	36129	36136	strings
O	36136	36137	,
O	36138	36141	use
B-api_mention	36142	36148	String
I-api_mention	36148	36149	.
I-api_mention	36149	36155	intern
I-api_mention	36155	36156	(
I-api_mention	36156	36157	)
O	36158	36160	on
O	36161	36165	them
O	36166	36172	before
O	36173	36180	putting
O	36181	36185	them
O	36186	36190	into
O	36191	36194	the
B-api_mention	36195	36202	HashMap
O	36203	36204	#
O	36204	36206	li
O	36207	36210	Use
O	36211	36214	the
B-api_mention	36215	36222	HashMap
I-api_mention	36222	36223	(
I-api_mention	36223	36226	int
I-api_mention	36227	36242	initialCapacity
I-api_mention	36242	36243	,
I-api_mention	36244	36249	float
I-api_mention	36250	36260	loadFactor
I-api_mention	36260	36261	)
O	36262	36273	constructor
O	36274	36276	to
O	36277	36281	tune
O	36282	36285	for
O	36286	36290	your
O	36291	36295	case

O	36297	36305	Question
O	36305	36306	-
O	36306	36313	6252678
O	36313	36314	,
O	36315	36321	answer
O	36321	36322	-
O	36322	36329	6252802

O	36330	36333	You
O	36334	36338	need
O	36339	36340	a
B-api_mention	36341	36358	DateTimeFormatter
O	36359	36370	appropriate
O	36371	36373	to
O	36374	36377	the
O	36378	36384	format
O	36385	36388	you
O	36388	36389	'
O	36389	36391	re
O	36392	36397	using
O	36397	36398	.

O	36399	36403	Take
O	36404	36405	a
O	36406	36410	look
O	36411	36413	at
O	36414	36417	the
O	36418	36422	docs
O	36423	36426	for
O	36427	36439	instructions
O	36440	36442	on
O	36443	36446	how
O	36447	36449	to
O	36450	36455	build
O	36456	36459	one
O	36459	36460	.

O	36461	36464	Off
O	36465	36468	the
O	36469	36473	cuff
O	36473	36474	,
O	36475	36476	I
O	36477	36482	think
O	36483	36486	you
O	36487	36491	need
O	36492	36498	format
O	36499	36500	=
B-api_mention	36501	36515	DateTimeFormat
I-api_mention	36515	36516	.
I-api_mention	36516	36526	forPattern
I-api_mention	36526	36527	(
I-api_mention	36527	36531	args
I-api_mention	36531	36532	)

O	36534	36542	Question
O	36542	36543	-
O	36543	36550	4709175
O	36550	36551	,
O	36552	36558	answer
O	36558	36559	-
O	36559	36566	4709284

O	36567	36568	#
O	36568	36578	blockquote
O	36579	36582	You
O	36583	36586	can
O	36587	36590	use
O	36591	36593	an
B-api_mention	36594	36598	Enum
O	36599	36601	to
O	36602	36611	represent
O	36612	36613	a
O	36614	36622	smallish
O	36623	36628	fixed
O	36629	36632	set
O	36633	36635	of
O	36636	36645	constants
O	36646	36648	or
O	36649	36651	an
O	36652	36660	internal
O	36661	36666	class
O	36667	36671	mode
O	36672	36677	while
O	36678	36688	increasing
O	36689	36700	readability
O	36700	36701	.

O	36702	36706	Also
O	36706	36707	,
O	36708	36713	Enums
O	36714	36717	can
O	36718	36725	enforce
O	36726	36727	a
O	36728	36735	certain
O	36736	36744	rigidity
O	36745	36749	when
O	36750	36754	used
O	36755	36757	in
O	36758	36764	method
O	36765	36775	parameters
O	36775	36776	.

O	36777	36781	They
O	36782	36787	offer
O	36788	36791	the
O	36792	36803	interesting
O	36804	36815	possibility
O	36816	36818	of
O	36819	36826	passing
O	36827	36838	information
O	36839	36841	to
O	36842	36843	a
O	36844	36855	constructor
O	36856	36860	like
O	36861	36863	in
O	36864	36867	the
O	36868	36875	Planets
O	36876	36883	example
O	36884	36886	on
O	36887	36893	Oracle
O	36893	36894	'
O	36894	36895	s
O	36896	36900	site
O	36901	36904	and
O	36904	36905	,
O	36906	36908	as
O	36909	36912	you
O	36912	36913	'
O	36913	36915	ve
O	36916	36926	discovered
O	36926	36927	,
O	36928	36932	also
O	36933	36938	allow
O	36939	36940	a
O	36941	36947	simple
O	36948	36951	way
O	36952	36954	to
O	36955	36961	create
O	36962	36963	a
O	36964	36973	singleton
O	36974	36981	pattern
O	36981	36982	.

O	36983	36985	ex
O	36985	36986	:
B-api_mention	36987	36993	Locale
I-api_mention	36993	36994	.
I-api_mention	36994	37004	setDefault
I-api_mention	37004	37005	(
I-api_mention	37005	37009	args
I-api_mention	37009	37010	)
O	37011	37016	reads
O	37017	37023	better
O	37024	37028	than
B-api_mention	37029	37035	Locale
I-api_mention	37035	37036	.
I-api_mention	37036	37046	setDefault
I-api_mention	37046	37047	(
I-api_mention	37047	37051	args
I-api_mention	37051	37052	)
O	37053	37056	and
O	37057	37065	enforces
O	37066	37069	the
O	37070	37073	use
O	37074	37076	of
O	37077	37082	fixed
O	37083	37086	set
O	37087	37089	of
O	37090	37096	values
O	37097	37102	shown
O	37103	37105	in
O	37106	37108	an
O	37109	37112	IDE
O	37113	37117	when
O	37118	37121	you
O	37122	37125	add
O	37126	37129	the
O	37130	37131	.
O	37132	37141	separator
O	37142	37149	instead
O	37150	37152	of
O	37153	37156	all
O	37157	37165	integers
O	37165	37166	.

O	37168	37176	Question
O	37176	37177	-
O	37177	37184	4709175
O	37184	37185	,
O	37186	37192	answer
O	37192	37193	-
O	37193	37200	4709892

O	37201	37210	Something
O	37211	37215	none
O	37216	37218	of
O	37219	37222	the
O	37223	37228	other
O	37229	37236	answers
O	37237	37241	have
O	37242	37249	covered
O	37250	37254	that
O	37255	37259	make
O	37260	37265	enums
O	37266	37278	particularly
O	37279	37287	powerful
O	37288	37291	are
O	37292	37295	the
O	37296	37303	ability
O	37304	37306	to
O	37307	37311	have
O	37312	37320	template
O	37321	37328	methods
O	37329	37330	.

O	37331	37338	Methods
O	37339	37342	can
O	37343	37345	be
O	37346	37350	part
O	37351	37353	of
O	37354	37357	the
O	37358	37362	base
O	37363	37367	enum
O	37368	37371	and
O	37372	37382	overridden
O	37383	37385	by
O	37386	37390	each
O	37391	37395	type
O	37395	37396	.

O	37397	37400	And
O	37400	37401	,
O	37402	37406	with
O	37407	37410	the
O	37411	37419	behavior
O	37420	37428	attached
O	37429	37431	to
O	37432	37435	the
O	37436	37440	enum
O	37440	37441	,
O	37442	37444	it
O	37445	37450	often
O	37451	37461	eliminates
O	37462	37465	the
O	37466	37470	need
O	37471	37474	for
O	37475	37477	if
O	37477	37478	-
O	37478	37482	else
O	37483	37493	constructs
O	37494	37496	or
O	37497	37503	switch
O	37504	37514	statements
O	37515	37517	as
O	37518	37522	this
O	37523	37527	blog
O	37528	37532	post
O	37533	37545	demonstrates
O	37546	37547	-
O	37548	37553	where
O	37554	37558	enum
O	37558	37559	.
O	37559	37565	method
O	37565	37566	(
O	37566	37570	args
O	37570	37571	)
O	37572	37576	does
O	37577	37581	what
O	37582	37592	originally
O	37593	37598	would
O	37599	37601	be
O	37602	37610	executed
O	37611	37617	inside
O	37618	37621	the
O	37622	37633	conditional
O	37633	37634	.

O	37635	37638	The
O	37639	37643	same
O	37644	37651	example
O	37652	37656	also
O	37657	37662	shows
O	37663	37666	the
O	37667	37670	use
O	37671	37673	of
O	37674	37680	static
O	37681	37688	imports
O	37689	37693	with
O	37694	37699	enums
O	37700	37702	as
O	37703	37707	well
O	37708	37717	producing
O	37718	37722	much
O	37723	37730	cleaner
O	37731	37734	DSL
O	37735	37739	like
O	37740	37744	code
O	37744	37745	.

O	37746	37750	Some
O	37751	37756	other
O	37757	37768	interesting
O	37769	37778	qualities
O	37779	37786	include
O	37787	37790	the
O	37791	37795	fact
O	37796	37800	that
O	37801	37806	enums
O	37807	37814	provide
O	37815	37829	implementation
O	37830	37833	for
B-api_mention	37834	37840	equals
I-api_mention	37840	37841	(
I-api_mention	37841	37845	args
I-api_mention	37845	37846	)
O	37847	37848	,
B-api_mention	37849	37857	toString
I-api_mention	37857	37858	(
I-api_mention	37858	37862	args
I-api_mention	37862	37863	)
O	37864	37867	and
B-api_mention	37868	37876	hashCode
I-api_mention	37876	37877	(
I-api_mention	37877	37881	args
I-api_mention	37881	37882	)
O	37883	37886	and
O	37887	37896	implement
B-api_mention	37897	37909	Serializable
O	37910	37913	and
B-api_mention	37914	37924	Comparable
O	37925	37926	.

O	37927	37930	For
O	37931	37932	a
O	37933	37941	complete
O	37942	37949	rundown
O	37950	37952	of
O	37953	37956	all
O	37957	37961	that
O	37962	37967	enums
O	37968	37972	have
O	37973	37975	to
O	37976	37981	offer
O	37982	37983	I
O	37984	37990	highly
O	37991	38000	recommend
O	38001	38006	Bruce
O	38007	38012	Eckel
O	38012	38013	'
O	38013	38014	s
O	38015	38023	Thinking
O	38024	38026	in
O	38027	38031	Java
O	38032	38035	4th
O	38036	38043	edition
O	38044	38049	which
O	38050	38057	devotes
O	38058	38060	an
O	38061	38067	entire
O	38068	38075	chapter
O	38076	38078	to
O	38079	38082	the
O	38083	38088	topic
O	38088	38089	.

O	38090	38102	Particularly
O	38103	38115	illuminating
O	38116	38119	are
O	38120	38123	the
O	38124	38132	examples
O	38133	38142	involving
O	38143	38144	a
O	38145	38149	Rock
O	38149	38150	,
O	38151	38156	Paper
O	38156	38157	,
O	38158	38166	Scissors
O	38167	38168	(
O	38168	38169	i
O	38169	38170	.
O	38170	38171	e
O	38171	38172	.
O	38173	38181	RoShamBo
O	38181	38182	)
O	38183	38187	game
O	38188	38190	as
O	38191	38196	enums
O	38196	38197	.

O	38199	38207	Question
O	38207	38208	-
O	38208	38215	4818699
O	38215	38216	,
O	38217	38223	answer
O	38223	38224	-
O	38224	38231	4818753

O	38232	38237	There
O	38238	38241	are
O	38242	38245	two
O	38246	38250	main
O	38251	38255	uses
O	38256	38258	of
B-api_mention	38259	38272	AtomicInteger
O	38273	38274	:
O	38275	38276	#
O	38276	38278	li
O	38279	38281	As
O	38282	38284	an
O	38285	38291	atomic
O	38292	38299	counter
O	38300	38301	(
B-api_mention	38302	38317	incrementAndGet
I-api_mention	38317	38318	(
I-api_mention	38318	38322	args
I-api_mention	38322	38323	)
O	38324	38325	,
O	38326	38329	etc
O	38329	38330	)
O	38331	38335	that
O	38336	38339	can
O	38340	38342	be
O	38343	38347	used
O	38348	38350	by
O	38351	38355	many
O	38356	38363	threads
O	38364	38376	concurrently
O	38377	38378	#
O	38378	38380	li
O	38381	38383	As
O	38384	38385	a
O	38386	38395	primitive
O	38396	38400	that
O	38401	38409	supports
O	38410	38417	compare
O	38417	38418	-
O	38418	38421	and
O	38421	38422	-
O	38422	38426	swap
O	38427	38438	instruction
O	38439	38440	(
B-api_mention	38441	38454	compareAndSet
I-api_mention	38454	38455	(
I-api_mention	38455	38459	args
I-api_mention	38459	38460	)
O	38461	38462	)
O	38463	38465	to
O	38466	38475	implement
O	38476	38479	non
O	38479	38480	-
O	38480	38488	blocking
O	38489	38499	algorithms
O	38499	38500	.

O	38501	38505	Here
O	38506	38508	is
O	38509	38511	an
O	38512	38519	example
O	38520	38522	of
O	38523	38526	non
O	38526	38527	-
O	38527	38535	blocking
O	38536	38542	random
O	38543	38549	number
O	38550	38559	generator
O	38560	38564	from
O	38565	38570	Brian
O	38571	38572	G
O	38572	38573	ö
O	38573	38576	etz
O	38576	38577	'
O	38577	38578	s
O	38579	38583	Java
O	38584	38595	Concurrency
O	38596	38598	In
O	38599	38607	Practice
O	38608	38609	:
O	38610	38611	#
O	38611	38614	pre
O	38615	38617	As
O	38618	38621	you
O	38622	38625	can
O	38626	38629	see
O	38629	38630	,
O	38631	38633	it
O	38634	38643	basically
O	38644	38649	works
O	38650	38656	almost
O	38657	38660	the
O	38661	38665	same
O	38666	38669	way
O	38670	38672	as
B-api_mention	38673	38688	incrementAndGet
I-api_mention	38688	38689	(
I-api_mention	38689	38693	args
I-api_mention	38693	38694	)
O	38695	38696	,
O	38697	38700	but
O	38701	38709	performs
O	38710	38719	arbitrary
O	38720	38731	calculation
O	38732	38733	(
B-api_mention	38734	38747	calculateNext
I-api_mention	38747	38748	(
I-api_mention	38748	38752	args
I-api_mention	38752	38753	)
O	38754	38755	)
O	38756	38763	instead
O	38764	38766	of
O	38767	38776	increment
O	38777	38778	(
O	38778	38781	and
O	38782	38791	processes
O	38792	38795	the
O	38796	38802	result
O	38803	38809	before
O	38810	38816	return
O	38816	38817	)
O	38817	38818	.

O	38820	38828	Question
O	38828	38829	-
O	38829	38836	4818699
O	38836	38837	,
O	38838	38844	answer
O	38844	38845	-
O	38845	38852	4818783

O	38853	38856	The
O	38857	38865	absolute
O	38866	38874	simplest
O	38875	38882	example
O	38883	38884	I
O	38885	38888	can
O	38889	38894	think
O	38895	38897	of
O	38898	38900	is
O	38901	38903	to
O	38904	38908	make
O	38909	38921	incrementing
O	38922	38924	an
O	38925	38931	atomic
O	38932	38941	operation
O	38941	38942	.

O	38943	38947	With
O	38948	38956	standard
O	38957	38961	ints
O	38961	38962	:
O	38963	38964	#
O	38964	38967	pre
O	38968	38972	With
B-api_mention	38973	38986	AtomicInteger
O	38986	38987	:
O	38988	38989	#
O	38989	38992	pre
O	38993	38996	The
O	38997	39003	latter
O	39004	39006	is
O	39007	39008	a
O	39009	39013	very
O	39014	39020	simple
O	39021	39024	way
O	39025	39027	to
O	39028	39035	perform
O	39036	39042	simple
O	39043	39052	mutations
O	39053	39060	effects
O	39061	39062	(
O	39062	39072	especially
O	39073	39081	counting
O	39081	39082	,
O	39083	39085	or
O	39086	39092	unique
O	39092	39093	-
O	39093	39101	indexing
O	39101	39102	)
O	39102	39103	,
O	39104	39111	without
O	39112	39118	having
O	39119	39121	to
O	39122	39128	resort
O	39129	39131	to
O	39132	39145	synchronizing
O	39146	39149	all
O	39150	39156	access
O	39156	39157	.

O	39158	39162	More
O	39163	39170	complex
O	39171	39186	synchronization
O	39186	39187	-
O	39187	39191	free
O	39192	39197	logic
O	39198	39201	can
O	39202	39204	be
O	39205	39213	employed
O	39214	39216	by
O	39217	39222	using
B-api_mention	39223	39236	compareAndSet
I-api_mention	39236	39237	(
I-api_mention	39237	39241	args
I-api_mention	39241	39242	)
O	39243	39245	as
O	39246	39247	a
O	39248	39252	type
O	39253	39255	of
O	39256	39266	optimistic
O	39267	39274	locking
O	39275	39276	-
O	39277	39280	get
O	39281	39284	the
O	39285	39292	current
O	39293	39298	value
O	39298	39299	,
O	39300	39307	compute
O	39308	39314	result
O	39315	39320	based
O	39321	39323	on
O	39324	39328	this
O	39328	39329	,
O	39330	39333	set
O	39334	39338	this
O	39339	39345	result
O	39346	39349	iff
O	39350	39355	value
O	39356	39358	is
O	39359	39364	still
O	39365	39368	the
O	39369	39374	input
O	39375	39379	used
O	39380	39382	to
O	39383	39385	do
O	39386	39389	the
O	39390	39401	calculation
O	39401	39402	,
O	39403	39407	else
O	39408	39413	start
O	39414	39419	again
O	39420	39421	-
O	39422	39425	but
O	39426	39429	the
O	39430	39438	counting
O	39439	39447	examples
O	39448	39451	are
O	39452	39456	very
O	39457	39463	useful
O	39463	39464	,
O	39465	39468	and
O	39469	39470	I
O	39470	39471	'
O	39471	39473	ll
O	39474	39479	often
O	39480	39483	use
O	39484	39498	AtomicIntegers
O	39499	39502	for
O	39503	39511	counting
O	39512	39515	and
O	39516	39518	VM
O	39518	39519	-
O	39519	39523	wide
O	39524	39530	unique
O	39531	39541	generators
O	39542	39544	if
O	39545	39550	there
O	39550	39551	'
O	39551	39552	s
O	39553	39556	any
O	39557	39561	hint
O	39562	39564	of
O	39565	39573	multiple
O	39574	39581	threads
O	39582	39587	being
O	39588	39596	involved
O	39596	39597	,
O	39598	39605	because
O	39606	39610	they
O	39610	39611	'
O	39611	39613	re
O	39614	39616	so
O	39617	39621	easy
O	39622	39624	to
O	39625	39629	work
O	39630	39634	with
O	39635	39636	I
O	39636	39637	'
O	39637	39638	d
O	39639	39645	almost
O	39646	39654	consider
O	39655	39657	it
O	39658	39667	premature
O	39668	39680	optimisation
O	39681	39683	to
O	39684	39687	use
O	39688	39693	plain
O	39694	39698	ints
O	39699	39700	.

O	39701	39706	While
O	39707	39710	you
O	39711	39714	can
O	39715	39721	almost
O	39722	39728	always
O	39729	39736	achieve
O	39737	39740	the
O	39741	39745	same
O	39746	39761	synchronization
O	39762	39772	guarantees
O	39773	39777	with
O	39778	39782	ints
O	39783	39786	and
O	39787	39798	appropriate
O	39799	39811	synchronized
O	39812	39824	declarations
O	39824	39825	,
O	39826	39829	the
O	39830	39836	beauty
O	39837	39839	of
B-api_mention	39840	39853	AtomicInteger
O	39854	39856	is
O	39857	39861	that
O	39862	39865	the
O	39866	39872	thread
O	39872	39873	-
O	39873	39879	safety
O	39880	39882	is
O	39883	39888	built
O	39889	39893	into
O	39894	39897	the
O	39898	39904	actual
O	39905	39911	object
O	39912	39918	itself
O	39918	39919	,
O	39920	39926	rather
O	39927	39931	than
O	39932	39935	you
O	39936	39943	needing
O	39944	39946	to
O	39947	39952	worry
O	39953	39958	about
O	39959	39962	the
O	39963	39971	possible
O	39972	39985	interleavings
O	39985	39986	,
O	39987	39990	and
O	39991	39999	monitors
O	40000	40004	held
O	40004	40005	,
O	40006	40008	of
O	40009	40014	every
O	40015	40021	method
O	40022	40026	that
O	40027	40034	happens
O	40035	40037	to
O	40038	40044	access
O	40045	40048	the
O	40049	40052	int
O	40053	40058	value
O	40058	40059	.

O	40060	40062	It
O	40062	40063	'
O	40063	40064	s
O	40065	40069	much
O	40070	40076	harder
O	40077	40079	to
O	40080	40092	accidentally
O	40093	40100	violate
O	40101	40113	threadsafety
O	40114	40118	when
O	40119	40126	calling
B-api_mention	40127	40142	getAndIncrement
I-api_mention	40142	40143	(
I-api_mention	40143	40147	args
I-api_mention	40147	40148	)
O	40149	40153	than
O	40154	40158	when
O	40159	40168	returning
O	40169	40170	i
O	40170	40171	+
O	40171	40172	+
O	40173	40176	and
O	40177	40188	remembering
O	40189	40190	(
O	40190	40192	or
O	40193	40196	not
O	40196	40197	)
O	40198	40200	to
O	40201	40208	acquire
O	40209	40212	the
O	40213	40220	correct
O	40221	40224	set
O	40225	40227	of
O	40228	40236	monitors
O	40237	40247	beforehand
O	40247	40248	.

O	40250	40258	Question
O	40258	40259	-
O	40259	40266	4818699
O	40266	40267	,
O	40268	40274	answer
O	40274	40275	-
O	40275	40282	4818916

O	40283	40286	The
O	40287	40294	primary
O	40295	40298	use
O	40299	40301	of
B-api_mention	40302	40315	AtomicInteger
O	40316	40318	is
O	40319	40323	when
O	40324	40327	you
O	40328	40331	are
O	40332	40334	in
O	40335	40336	a
O	40337	40350	multithreaded
O	40351	40358	context
O	40359	40362	and
O	40363	40366	you
O	40367	40371	need
O	40372	40374	to
O	40375	40382	perform
O	40383	40389	thread
O	40390	40394	safe
O	40395	40405	operations
O	40406	40408	on
O	40409	40411	an
O	40412	40419	integer
O	40420	40427	without
O	40428	40433	using
O	40434	40446	synchronized
O	40447	40448	.

O	40449	40452	The
O	40453	40464	assignation
O	40465	40468	and
O	40469	40478	retrieval
O	40479	40481	on
O	40482	40485	the
O	40486	40495	primitive
O	40496	40500	type
O	40501	40504	int
O	40505	40508	are
O	40509	40516	already
O	40517	40523	atomic
O	40524	40527	but
B-api_mention	40528	40541	AtomicInteger
O	40542	40547	comes
O	40548	40552	with
O	40553	40557	many
O	40558	40568	operations
O	40569	40574	which
O	40575	40578	are
O	40579	40582	not
O	40583	40589	atomic
O	40590	40592	on
O	40593	40596	int
O	40597	40598	.

O	40599	40602	The
O	40603	40611	simplest
O	40612	40615	are
O	40616	40619	the
O	40620	40629	getAndXXX
O	40630	40632	or
O	40633	40642	xXXAndGet
O	40643	40644	.

O	40645	40648	For
O	40649	40657	instance
B-api_mention	40658	40673	getAndIncrement
I-api_mention	40673	40674	(
I-api_mention	40674	40678	args
I-api_mention	40678	40679	)
O	40680	40682	is
O	40683	40685	an
O	40686	40692	atomic
O	40693	40703	equivalent
O	40704	40706	to
O	40707	40708	i
O	40708	40709	+
O	40709	40710	+
O	40711	40716	which
O	40717	40719	is
O	40720	40723	not
O	40724	40730	atomic
O	40731	40738	because
O	40739	40741	it
O	40742	40744	is
O	40745	40753	actually
O	40754	40755	a
O	40756	40761	short
O	40762	40765	cut
O	40766	40769	for
O	40770	40775	three
O	40776	40786	operations
O	40786	40787	:
O	40788	40797	retrieval
O	40797	40798	,
O	40799	40807	addition
O	40808	40811	and
O	40812	40823	assignation
O	40823	40824	.

B-api_mention	40825	40838	compareAndSet
O	40839	40841	is
O	40842	40846	very
O	40847	40853	useful
O	40854	40856	to
O	40857	40867	implements
O	40868	40878	semaphores
O	40878	40879	,
O	40880	40885	locks
O	40885	40886	,
O	40887	40894	latches
O	40894	40895	,
O	40896	40899	etc
O	40899	40900	.

O	40901	40906	Using
O	40907	40910	the
B-api_mention	40911	40924	AtomicInteger
O	40925	40927	is
O	40928	40934	faster
O	40935	40938	and
O	40939	40943	more
O	40944	40952	readable
O	40953	40957	than
O	40958	40968	performing
O	40969	40972	the
O	40973	40977	same
O	40978	40983	using
O	40984	40999	synchronization
O	40999	41000	.

O	41001	41002	A
O	41003	41009	simple
O	41010	41014	test
O	41014	41015	:
O	41016	41017	#
O	41017	41020	pre
O	41021	41023	On
O	41024	41026	my
O	41027	41029	PC
O	41030	41034	with
O	41035	41039	Java
O	41040	41041	1
O	41041	41042	.
O	41042	41043	6
O	41044	41047	the
O	41048	41054	atomic
O	41055	41059	test
O	41060	41064	runs
O	41065	41067	in
O	41068	41069	3
O	41070	41077	seconds
O	41078	41083	while
O	41084	41087	the
O	41088	41100	synchronized
O	41101	41104	one
O	41105	41109	runs
O	41110	41112	in
O	41113	41118	about
O	41119	41120	5
O	41120	41121	.
O	41121	41122	5
O	41123	41130	seconds
O	41130	41131	.

O	41132	41135	The
O	41136	41143	problem
O	41144	41148	here
O	41149	41151	is
O	41152	41156	that
O	41157	41160	the
O	41161	41170	operation
O	41171	41173	to
O	41174	41185	synchronize
O	41186	41187	(
O	41188	41197	notAtomic
O	41197	41198	+
O	41198	41199	+
O	41200	41201	)
O	41202	41204	is
O	41205	41211	really
O	41212	41217	short
O	41217	41218	.

O	41219	41221	So
O	41222	41225	the
O	41226	41230	cost
O	41231	41233	of
O	41234	41237	the
O	41238	41253	synchronization
O	41254	41256	is
O	41257	41263	really
O	41264	41273	important
O	41274	41282	compared
O	41283	41285	to
O	41286	41289	the
O	41290	41299	operation
O	41299	41300	.

O	41301	41307	Beside
O	41308	41317	atomicity
B-api_mention	41318	41331	AtomicInteger
O	41332	41335	can
O	41336	41338	be
O	41339	41342	use
O	41343	41345	as
O	41346	41347	a
O	41348	41355	mutable
O	41356	41363	version
O	41364	41366	of
B-api_mention	41367	41374	Integer
O	41375	41378	for
O	41379	41387	instance
O	41388	41390	in
B-api_mention	41391	41394	Map
O	41395	41396	s
O	41397	41399	as
O	41400	41406	values
O	41406	41407	.

O	41409	41417	Question
O	41417	41418	-
O	41418	41425	4818699
O	41425	41426	,
O	41427	41433	answer
O	41433	41434	-
O	41434	41441	4819109

O	41442	41444	If
O	41445	41448	you
O	41449	41453	look
O	41454	41456	at
O	41457	41460	the
O	41461	41468	methods
B-api_mention	41469	41482	AtomicInteger
O	41483	41486	has
O	41486	41487	,
O	41488	41491	you
O	41491	41492	'
O	41492	41494	ll
O	41495	41501	notice
O	41502	41506	that
O	41507	41511	they
O	41512	41516	tend
O	41517	41519	to
O	41520	41530	correspond
O	41531	41533	to
O	41534	41540	common
O	41541	41551	operations
O	41552	41554	on
O	41555	41559	ints
O	41559	41560	.

O	41561	41564	For
O	41565	41573	instance
O	41573	41574	:
O	41575	41576	#
O	41576	41579	pre
O	41580	41582	is
O	41583	41586	the
O	41587	41593	thread
O	41593	41594	-
O	41594	41598	safe
O	41599	41606	version
O	41607	41609	of
O	41610	41614	this
O	41614	41615	:
O	41616	41617	#
O	41617	41620	pre
O	41621	41624	The
O	41625	41632	methods
O	41633	41636	map
O	41637	41641	like
O	41642	41646	this
O	41646	41647	:
O	41648	41649	+
O	41649	41650	+
O	41650	41651	i
O	41652	41654	is
O	41655	41656	i
B-api_mention	41656	41657	.
I-api_mention	41657	41672	incrementAndGet
I-api_mention	41672	41673	(
I-api_mention	41673	41677	args
I-api_mention	41677	41678	)
O	41679	41680	i
O	41680	41681	+
O	41681	41682	+
O	41683	41685	is
O	41686	41687	i
B-api_mention	41687	41688	.
I-api_mention	41688	41703	getAndIncrement
I-api_mention	41703	41704	(
I-api_mention	41704	41708	args
I-api_mention	41708	41709	)
O	41710	41711	-
O	41711	41712	-
O	41712	41713	i
O	41714	41716	is
O	41717	41718	i
B-api_mention	41718	41719	.
I-api_mention	41719	41734	decrementAndGet
I-api_mention	41734	41735	(
I-api_mention	41735	41739	args
I-api_mention	41739	41740	)
O	41741	41742	i
O	41742	41743	-
O	41743	41744	-
O	41745	41747	is
O	41748	41749	i
B-api_mention	41749	41750	.
I-api_mention	41750	41765	getAndDecrement
I-api_mention	41765	41766	(
I-api_mention	41766	41770	args
I-api_mention	41770	41771	)
O	41772	41773	i
O	41774	41775	=
O	41776	41777	x
O	41778	41780	is
O	41781	41782	i
B-api_mention	41782	41783	.
I-api_mention	41783	41786	set
I-api_mention	41786	41787	(
I-api_mention	41787	41791	args
I-api_mention	41791	41792	)
O	41793	41794	x
O	41795	41796	=
O	41797	41798	i
O	41799	41801	is
O	41802	41803	x
O	41804	41805	=
O	41806	41807	i
B-api_mention	41807	41808	.
I-api_mention	41808	41811	get
I-api_mention	41811	41812	(
I-api_mention	41812	41816	args
I-api_mention	41816	41817	)
O	41818	41823	There
O	41824	41827	are
O	41828	41833	other
O	41834	41845	convenience
O	41846	41853	methods
O	41854	41856	as
O	41857	41861	well
O	41861	41862	,
O	41863	41867	like
B-api_mention	41868	41881	compareAndSet
O	41882	41884	or
B-api_mention	41885	41894	addAndGet

O	41896	41904	Question
O	41904	41905	-
O	41905	41912	4759570
O	41912	41913	,
O	41914	41920	answer
O	41920	41921	-
O	41921	41929	19459145

O	41930	41934	This
O	41935	41940	works
O	41941	41943	on
O	41944	41951	Windows
O	41952	41956	with
O	41957	41963	Cygwin
O	41964	41973	installed
O	41973	41974	:
B-api_mention	41975	41981	System
I-api_mention	41981	41982	.
I-api_mention	41982	41988	getenv
I-api_mention	41988	41989	(
I-api_mention	41989	41993	args
I-api_mention	41993	41994	)

O	41996	42004	Question
O	42004	42005	-
O	42005	42012	6271417
O	42012	42013	,
O	42014	42020	answer
O	42020	42021	-
O	42021	42028	6271460

O	42029	42032	The
O	42033	42034	"
O	42034	42035	$
O	42035	42036	1
O	42036	42037	"
O	42038	42040	is
O	42041	42044	not
O	42045	42046	"
O	42046	42053	useless
O	42054	42057	non
O	42057	42058	-
O	42058	42063	sense
O	42063	42064	"
O	42064	42065	.

O	42066	42068	If
O	42069	42073	your
O	42074	42079	class
O	42080	42082	is
O	42083	42092	anonymous
O	42092	42093	,
O	42094	42095	a
O	42096	42102	number
O	42103	42105	is
O	42106	42114	appended
O	42114	42115	.

O	42116	42118	If
O	42119	42122	you
O	42123	42126	don
O	42126	42127	'
O	42127	42128	t
O	42129	42133	want
O	42134	42137	the
O	42138	42143	class
O	42144	42150	itself
O	42150	42151	,
O	42152	42155	but
O	42156	42159	its
O	42160	42169	declaring
O	42170	42175	class
O	42175	42176	,
O	42177	42181	then
O	42182	42185	you
O	42186	42189	can
O	42190	42193	use
B-api_mention	42194	42211	getEnclosingClass
I-api_mention	42211	42212	(
I-api_mention	42212	42216	args
I-api_mention	42216	42217	)
O	42218	42219	.

O	42220	42223	For
O	42224	42231	example
O	42231	42232	:
O	42233	42234	#
O	42234	42237	pre
O	42238	42241	You
O	42242	42245	can
O	42246	42250	move
O	42251	42255	that
O	42256	42258	in
O	42259	42263	some
O	42264	42270	static
O	42271	42278	utility
O	42279	42285	method
O	42285	42286	.

O	42287	42290	But
O	42291	42295	note
O	42296	42300	that
O	42301	42305	this
O	42306	42308	is
O	42309	42312	not
O	42313	42316	the
O	42317	42324	current
O	42325	42330	class
O	42331	42335	name
O	42335	42336	.

O	42337	42340	The
O	42341	42350	anonymous
O	42351	42356	class
O	42357	42359	is
O	42360	42369	different
O	42370	42375	class
O	42376	42380	than
O	42381	42384	its
O	42385	42394	enclosing
O	42395	42400	class
O	42400	42401	.

O	42402	42405	The
O	42406	42410	case
O	42411	42413	is
O	42414	42421	similar
O	42422	42425	for
O	42426	42431	inner
O	42432	42439	classes
O	42439	42440	.

O	42442	42450	Question
O	42450	42451	-
O	42451	42458	6271417
O	42458	42459	,
O	42460	42466	answer
O	42466	42467	-
O	42467	42474	6271520

O	42475	42478	Try
O	42479	42484	using
O	42485	42489	this
B-api_mention	42489	42490	.
I-api_mention	42490	42498	getClass
I-api_mention	42498	42499	(
I-api_mention	42499	42503	args
I-api_mention	42503	42504	)
I-api_mention	42504	42505	.
I-api_mention	42505	42521	getCanonicalName
I-api_mention	42521	42522	(
I-api_mention	42522	42526	args
I-api_mention	42526	42527	)
O	42528	42530	or
O	42531	42535	this
B-api_mention	42535	42536	.
I-api_mention	42536	42544	getClass
I-api_mention	42544	42545	(
I-api_mention	42545	42549	args
I-api_mention	42549	42550	)
I-api_mention	42550	42551	.
I-api_mention	42551	42564	getSimpleName
I-api_mention	42564	42565	(
I-api_mention	42565	42569	args
I-api_mention	42569	42570	)
O	42571	42572	.

O	42573	42575	If
O	42576	42578	it
O	42578	42579	'
O	42579	42580	s
O	42581	42583	an
O	42584	42593	anonymous
O	42594	42599	class
O	42599	42600	,
O	42601	42604	use
O	42605	42609	this
B-api_mention	42609	42610	.
I-api_mention	42610	42618	getClass
I-api_mention	42618	42619	.
I-api_mention	42619	42632	getSuperclass
I-api_mention	42632	42633	.
I-api_mention	42633	42640	getName
I-api_mention	42640	42641	(
I-api_mention	42641	42645	args
I-api_mention	42645	42646	)

O	42648	42656	Question
O	42656	42657	-
O	42657	42664	6271417
O	42664	42665	,
O	42666	42672	answer
O	42672	42673	-
O	42673	42680	6271668

O	42681	42682	I
O	42682	42683	'
O	42683	42684	m
O	42685	42693	assuming
O	42694	42698	this
O	42699	42701	is
O	42702	42711	happening
O	42712	42715	for
O	42716	42718	an
O	42719	42728	anonymous
O	42729	42734	class
O	42734	42735	.

O	42736	42740	When
O	42741	42744	you
O	42745	42751	create
O	42752	42754	an
O	42755	42764	anonymous
O	42765	42770	class
O	42771	42774	you
O	42775	42783	actually
O	42784	42790	create
O	42791	42792	a
O	42793	42798	class
O	42799	42803	that
O	42804	42811	extends
O	42812	42815	the
O	42816	42821	class
O	42822	42827	whose
O	42828	42832	name
O	42833	42836	you
O	42837	42840	got
O	42840	42841	.

O	42842	42845	The
O	42846	42847	"
O	42847	42854	cleaner
O	42854	42855	"
O	42856	42859	way
O	42860	42862	to
O	42863	42866	get
O	42867	42870	the
O	42871	42875	name
O	42876	42879	you
O	42880	42884	want
O	42885	42887	is
O	42887	42888	:
O	42889	42891	If
O	42892	42896	your
O	42897	42902	class
O	42903	42905	is
O	42906	42908	an
O	42909	42918	anonymous
O	42919	42924	inner
O	42925	42930	class
O	42930	42931	,
B-api_mention	42932	42945	getSuperClass
I-api_mention	42945	42946	(
I-api_mention	42946	42950	args
I-api_mention	42950	42951	)
O	42952	42958	should
O	42959	42963	give
O	42964	42967	you
O	42968	42971	the
O	42972	42977	class
O	42978	42982	that
O	42983	42985	it
O	42986	42989	was
O	42990	42997	created
O	42998	43002	from
O	43002	43003	.

O	43004	43006	If
O	43007	43010	you
O	43011	43018	created
O	43019	43021	it
O	43022	43026	from
O	43027	43029	an
O	43030	43039	interface
O	43040	43044	than
O	43045	43048	you
O	43048	43049	'
O	43049	43051	re
O	43052	43056	sort
O	43057	43059	of
O	43060	43063	SOL
O	43064	43071	because
O	43072	43075	the
O	43076	43080	best
O	43081	43084	you
O	43085	43088	can
O	43089	43091	do
O	43092	43094	is
B-api_mention	43095	43108	getInterfaces
I-api_mention	43108	43109	(
I-api_mention	43109	43113	args
I-api_mention	43113	43114	)
O	43115	43120	which
O	43121	43126	might
O	43127	43131	give
O	43132	43135	you
O	43136	43140	more
O	43141	43145	than
O	43146	43149	one
O	43150	43159	interface
O	43159	43160	.

O	43161	43164	The
O	43165	43166	"
O	43166	43171	hacky
O	43171	43172	"
O	43173	43176	way
O	43177	43179	is
O	43180	43182	to
O	43183	43187	just
O	43188	43191	get
O	43192	43195	the
O	43196	43200	name
O	43201	43205	with
B-api_mention	43206	43218	getClassName
I-api_mention	43218	43219	(
I-api_mention	43219	43223	args
I-api_mention	43223	43224	)
O	43225	43228	and
O	43229	43232	use
O	43233	43234	a
O	43235	43240	regex
O	43241	43243	to
O	43244	43248	drop
O	43249	43252	the
O	43253	43254	$
O	43254	43255	1
O	43256	43257	.

O	43259	43267	Question
O	43267	43268	-
O	43268	43275	6271417
O	43275	43276	,
O	43277	43283	answer
O	43283	43284	-
O	43284	43292	29938300

O	43293	43296	Use
O	43297	43301	this
O	43302	43308	method
O	43308	43309	,
O	43309	43312	but
O	43313	43315	be
O	43316	43323	careful
O	43324	43326	to
O	43327	43331	make
O	43332	43334	an
O	43335	43341	object
O	43342	43344	in
O	43345	43349	your
O	43350	43354	main
O	43354	43355	.
O	43356	43362	public
O	43363	43369	static
O	43370	43374	void
B-api_mention	43375	43382	setName
I-api_mention	43382	43383	(
I-api_mention	43383	43387	args
I-api_mention	43387	43388	)
O	43388	43389	{
B-api_mention	43390	43395	Class
O	43396	43404	setClass
O	43405	43406	=
O	43407	43410	obj
B-api_mention	43410	43411	.
I-api_mention	43411	43419	getClass
I-api_mention	43419	43420	(
I-api_mention	43420	43424	args
I-api_mention	43424	43425	)
O	43425	43426	;
B-api_mention	43427	43433	String
O	43434	43443	className
O	43444	43445	=
O	43446	43454	setClass
B-api_mention	43454	43455	.
I-api_mention	43455	43462	getName
I-api_mention	43462	43463	(
I-api_mention	43463	43467	args
I-api_mention	43467	43468	)
O	43468	43469	;
B-api_mention	43470	43476	System
I-api_mention	43476	43477	.
I-api_mention	43477	43480	out
I-api_mention	43480	43481	.
I-api_mention	43481	43488	println
I-api_mention	43488	43489	(
I-api_mention	43489	43493	args
I-api_mention	43493	43494	)
O	43494	43495	;
O	43496	43497	}

O	43499	43507	Question
O	43507	43508	-
O	43508	43515	5263187
O	43515	43516	,
O	43517	43523	answer
O	43523	43524	-
O	43524	43531	5263201

B-api_mention	43532	43538	System
I-api_mention	43538	43539	.
I-api_mention	43539	43542	out
I-api_mention	43542	43543	.
I-api_mention	43543	43550	println
I-api_mention	43550	43551	(
I-api_mention	43551	43555	args
I-api_mention	43555	43556	)
O	43556	43557	;

O	43559	43567	Question
O	43567	43568	-
O	43568	43575	5038204
O	43575	43576	,
O	43577	43583	answer
O	43583	43584	-
O	43584	43591	5039178

O	43592	43595	The
O	43596	43603	commons
O	43603	43604	/
O	43604	43608	lang
O	43609	43617	builders
O	43618	43621	are
O	43622	43627	great
O	43628	43631	and
O	43632	43633	I
O	43634	43638	have
O	43639	43643	been
O	43644	43649	using
O	43650	43654	them
O	43655	43658	for
O	43659	43664	years
O	43665	43672	without
O	43673	43683	noticeable
O	43684	43695	performance
O	43696	43704	overhead
O	43705	43706	(
O	43706	43710	with
O	43711	43714	and
O	43715	43722	without
O	43723	43732	hibernate
O	43732	43733	)
O	43733	43734	.

O	43735	43738	But
O	43739	43741	as
O	43742	43747	Alain
O	43748	43754	writes
O	43754	43755	,
O	43756	43759	the
O	43760	43765	Guava
O	43766	43769	way
O	43770	43772	is
O	43773	43777	even
O	43778	43783	nicer
O	43783	43784	:
O	43785	43789	Here
O	43789	43790	'
O	43790	43791	s
O	43792	43793	a
O	43794	43800	sample
O	43801	43805	Bean
O	43805	43806	:
O	43807	43808	#
O	43808	43811	pre
O	43812	43816	Here
O	43816	43817	'
O	43817	43818	s
B-api_mention	43819	43825	equals
I-api_mention	43825	43826	(
I-api_mention	43826	43827	)
O	43828	43831	and
B-api_mention	43832	43840	hashCode
I-api_mention	43840	43841	(
I-api_mention	43841	43842	)
O	43843	43854	implemented
O	43855	43859	with
O	43860	43867	Commons
O	43867	43868	/
O	43868	43872	Lang
O	43872	43873	:
O	43874	43875	#
O	43875	43878	pre
O	43879	43882	and
O	43883	43887	here
O	43888	43892	with
O	43893	43898	Guava
O	43898	43899	:
O	43900	43901	#
O	43901	43904	pre
O	43905	43907	As
O	43908	43911	you
O	43912	43915	can
O	43916	43919	see
O	43920	43923	the
O	43924	43929	Guava
O	43930	43937	version
O	43938	43940	is
O	43941	43948	shorter
O	43949	43952	and
O	43953	43959	avoids
O	43960	43971	superfluous
O	43972	43978	helper
O	43979	43986	objects
O	43986	43987	.

O	43988	43990	In
O	43991	43995	case
O	43996	43998	of
O	43999	44005	equals
O	44005	44006	,
O	44007	44009	it
O	44010	44014	even
O	44015	44021	allows
O	44022	44025	for
O	44026	44031	short
O	44031	44032	-
O	44032	44042	circuiting
O	44043	44046	the
O	44047	44057	evaluation
O	44058	44060	if
O	44061	44063	an
O	44064	44071	earlier
B-api_mention	44072	44078	Object
I-api_mention	44078	44079	.
I-api_mention	44079	44084	equal
I-api_mention	44084	44085	(
I-api_mention	44085	44089	args
I-api_mention	44089	44090	)
O	44091	44095	call
O	44096	44103	returns
O	44104	44109	false
O	44110	44111	(
O	44111	44113	to
O	44114	44116	be
O	44117	44121	fair
O	44121	44122	:
O	44123	44130	commons
O	44131	44132	/
O	44133	44137	lang
O	44138	44141	has
O	44142	44144	an
B-api_mention	44145	44156	ObjectUtils
I-api_mention	44156	44157	.
I-api_mention	44157	44163	equals
I-api_mention	44163	44164	(
I-api_mention	44164	44168	args
I-api_mention	44168	44169	)
O	44170	44176	method
O	44177	44181	with
O	44182	44191	identical
O	44192	44201	semantics
O	44202	44207	which
O	44208	44213	could
O	44214	44216	be
O	44217	44221	used
O	44222	44229	instead
O	44230	44232	of
B-api_mention	44233	44246	EqualsBuilder
O	44247	44249	to
O	44250	44255	allow
O	44256	44261	short
O	44261	44262	-
O	44262	44272	circuiting
O	44273	44275	as
O	44276	44281	above
O	44281	44282	)
O	44282	44283	.

O	44284	44286	So
O	44286	44287	:
O	44288	44291	yes
O	44291	44292	,
O	44293	44296	the
O	44297	44304	commons
O	44305	44309	lang
O	44310	44318	builders
O	44319	44322	are
O	44323	44327	very
O	44328	44338	preferable
O	44339	44343	over
O	44344	44352	manually
O	44353	44364	constructed
B-api_mention	44365	44371	equals
I-api_mention	44371	44372	(
I-api_mention	44372	44376	args
I-api_mention	44376	44377	)
O	44378	44381	and
B-api_mention	44382	44390	hashCode
I-api_mention	44390	44391	(
I-api_mention	44391	44395	args
I-api_mention	44395	44396	)
O	44397	44404	methods
O	44405	44406	(
O	44406	44408	or
O	44409	44414	those
O	44415	44420	awful
O	44421	44429	monsters
O	44430	44437	Eclipse
O	44438	44442	will
O	44443	44451	generate
O	44452	44455	for
O	44456	44459	you
O	44459	44460	)
O	44460	44461	,
O	44462	44465	but
O	44466	44469	the
O	44470	44475	Guava
O	44476	44484	versions
O	44485	44488	are
O	44489	44493	even
O	44494	44500	better
O	44500	44501	.

O	44502	44505	And
O	44506	44507	a
O	44508	44512	note
O	44513	44518	about
O	44519	44528	Hibernate
O	44528	44529	:
O	44530	44532	be
O	44533	44540	careful
O	44541	44546	about
O	44547	44552	using
O	44553	44557	lazy
O	44558	44569	collections
O	44570	44572	in
O	44573	44577	your
B-api_mention	44578	44584	equals
I-api_mention	44584	44585	(
I-api_mention	44585	44586	)
O	44586	44587	,
B-api_mention	44588	44596	hashCode
I-api_mention	44596	44597	(
I-api_mention	44597	44598	)
O	44599	44602	and
B-api_mention	44603	44611	toString
I-api_mention	44611	44612	(
I-api_mention	44612	44613	)
O	44614	44629	implementations
O	44629	44630	.

O	44631	44635	That
O	44636	44640	will
O	44641	44645	fail
O	44646	44655	miserably
O	44656	44658	if
O	44659	44662	you
O	44663	44666	don
O	44666	44667	'
O	44667	44668	t
O	44669	44673	have
O	44674	44676	an
O	44677	44681	open
B-api_mention	44682	44689	Session
O	44689	44690	.

O	44691	44695	Note
O	44696	44697	(
O	44697	44702	about
B-api_mention	44703	44709	equals
I-api_mention	44709	44710	(
I-api_mention	44710	44711	)
O	44711	44712	)
O	44712	44713	:
O	44714	44715	a
O	44715	44716	)
O	44717	44719	in
O	44720	44724	both
O	44725	44733	versions
O	44734	44736	of
B-api_mention	44737	44743	equals
I-api_mention	44743	44744	(
I-api_mention	44744	44745	)
O	44746	44751	above
O	44751	44752	,
O	44753	44756	you
O	44757	44762	might
O	44763	44767	want
O	44768	44770	to
O	44771	44774	use
O	44775	44778	one
O	44779	44781	or
O	44782	44786	both
O	44787	44789	of
O	44790	44795	these
O	44796	44805	shortcuts
O	44806	44810	also
O	44810	44811	:
O	44812	44813	#
O	44813	44816	pre
O	44817	44818	b
O	44818	44819	)
O	44820	44829	depending
O	44830	44832	on
O	44833	44837	your
O	44838	44852	interpretation
O	44853	44855	of
O	44856	44859	the
B-api_mention	44860	44866	equals
I-api_mention	44866	44867	(
I-api_mention	44867	44868	)
O	44869	44877	contract
O	44877	44878	,
O	44879	44882	you
O	44883	44888	might
O	44889	44893	also
O	44894	44900	change
O	44901	44904	the
O	44905	44909	line
O	44909	44910	(
O	44910	44911	s
O	44911	44912	)
O	44913	44915	if
O	44915	44916	(
O	44916	44920	args
O	44920	44921	)
O	44921	44922	{
O	44923	44925	to
O	44926	44927	#
O	44927	44930	pre
O	44931	44933	If
O	44934	44937	you
O	44938	44941	use
O	44942	44945	the
O	44946	44952	second
O	44953	44960	version
O	44960	44961	,
O	44962	44965	you
O	44966	44974	probably
O	44975	44979	also
O	44980	44984	want
O	44985	44987	to
O	44988	44992	call
B-api_mention	44993	44998	super
I-api_mention	44998	44999	(
I-api_mention	44999	45003	args
I-api_mention	45003	45004	)
O	45005	45011	inside
O	45012	45016	your
B-api_mention	45017	45023	equals
I-api_mention	45023	45024	(
I-api_mention	45024	45028	args
I-api_mention	45028	45029	)
O	45030	45036	method
O	45036	45037	.

O	45038	45046	Opinions
O	45047	45053	differ
O	45054	45058	here
O	45058	45059	,
O	45060	45063	the
O	45064	45069	topic
O	45070	45072	is
O	45073	45082	discussed
O	45083	45085	in
O	45086	45090	this
O	45091	45099	question
O	45099	45100	:
O	45101	45102	#
O	45102	45112	blockquote
O	45113	45114	(
O	45114	45122	although
O	45123	45125	it
O	45125	45126	'
O	45126	45127	s
O	45128	45133	about
B-api_mention	45134	45142	hashCode
I-api_mention	45142	45143	(
I-api_mention	45143	45147	args
I-api_mention	45147	45148	)
O	45149	45150	,
O	45151	45154	the
O	45155	45159	same
O	45160	45167	applies
O	45168	45170	to
B-api_mention	45171	45177	equals
I-api_mention	45177	45178	(
I-api_mention	45178	45182	args
I-api_mention	45182	45183	)
O	45184	45185	)
O	45186	45190	Note
O	45191	45192	(
O	45192	45200	inspired
O	45201	45203	by
O	45204	45211	Comment
O	45212	45216	from
O	45217	45223	kayahr
O	45224	45225	)
B-api_mention	45226	45233	Objects
I-api_mention	45233	45234	.
I-api_mention	45234	45242	hashCode
I-api_mention	45242	45243	(
I-api_mention	45243	45247	args
I-api_mention	45247	45248	)
O	45249	45250	(
O	45250	45254	just
O	45255	45257	as
O	45258	45261	the
O	45262	45272	underlying
B-api_mention	45273	45279	Arrays
I-api_mention	45279	45280	.
I-api_mention	45280	45288	hashCode
I-api_mention	45288	45289	(
I-api_mention	45289	45293	args
I-api_mention	45293	45294	)
O	45295	45296	)
O	45297	45302	might
O	45303	45310	perform
O	45311	45316	badly
O	45317	45319	if
O	45320	45323	you
O	45324	45328	have
O	45329	45333	many
O	45334	45343	primitive
O	45344	45350	fields
O	45350	45351	.

O	45352	45354	In
O	45355	45359	such
O	45360	45365	cases
O	45365	45366	,
B-api_mention	45367	45380	EqualsBuilder
O	45381	45384	may
O	45385	45393	actually
O	45394	45396	be
O	45397	45400	the
O	45401	45407	better
O	45408	45416	solution
O	45416	45417	.

O	45419	45427	Question
O	45427	45428	-
O	45428	45435	4812570
O	45435	45436	,
O	45437	45443	answer
O	45443	45444	-
O	45444	45451	4812585

O	45452	45455	You
O	45456	45460	have
O	45461	45463	to
O	45464	45467	use
B-api_mention	45468	45481	getStackTrace
I-api_mention	45481	45482	(
I-api_mention	45482	45486	args
I-api_mention	45486	45487	)
O	45488	45494	method
O	45495	45502	instead
O	45503	45505	of
B-api_mention	45506	45521	printStackTrace
I-api_mention	45521	45522	(
I-api_mention	45522	45526	args
I-api_mention	45526	45527	)
O	45528	45529	.

O	45530	45534	Here
O	45535	45537	is
O	45538	45539	a
O	45540	45544	good
O	45545	45552	example
O	45553	45554	:
O	45555	45556	#
O	45556	45559	pre

O	45561	45569	Question
O	45569	45570	-
O	45570	45577	4812570
O	45577	45578	,
O	45579	45585	answer
O	45585	45586	-
O	45586	45594	21765043

O	45595	45598	You
O	45599	45602	can
O	45603	45606	use
O	45607	45610	the
B-api_mention	45611	45625	ExceptionUtils
I-api_mention	45625	45626	.
I-api_mention	45626	45639	getStackTrace
I-api_mention	45639	45640	(
I-api_mention	45640	45644	args
I-api_mention	45644	45645	)
O	45645	45646	;
O	45647	45651	from
O	45652	45658	Apache
O	45659	45666	Commons
O	45667	45668	3
O	45669	45674	class
B-api_mention	45675	45678	org
I-api_mention	45678	45679	.
I-api_mention	45679	45685	apache
I-api_mention	45685	45686	.
I-api_mention	45686	45693	commons
I-api_mention	45693	45694	.
I-api_mention	45694	45699	lang3
I-api_mention	45699	45700	.
I-api_mention	45700	45709	exception
I-api_mention	45709	45710	.
I-api_mention	45710	45724	ExceptionUtils
O	45725	45726	.

O	45727	45728	#
O	45728	45729	a

O	45731	45739	Question
O	45739	45740	-
O	45740	45747	5071040
O	45747	45748	,
O	45749	45755	answer
O	45755	45756	-
O	45756	45763	5071064

O	45764	45769	There
O	45770	45773	are
O	45774	45782	multiple
O	45783	45787	ways
O	45787	45788	:
O	45789	45790	#
O	45790	45792	li
B-api_mention	45793	45799	String
I-api_mention	45799	45800	.
I-api_mention	45800	45807	valueOf
I-api_mention	45807	45808	(
I-api_mention	45808	45812	args
I-api_mention	45812	45813	)
O	45814	45815	(
O	45815	45817	my
O	45818	45828	preference
O	45828	45829	)
O	45830	45831	#
O	45831	45833	li
O	45834	45847	StringLiteral
O	45848	45849	+
O	45850	45856	number
O	45857	45858	(
O	45858	45859	I
O	45860	45863	don
O	45863	45864	'
O	45864	45865	t
O	45866	45870	know
O	45871	45874	how
O	45875	45878	the
O	45879	45887	compiler
O	45888	45895	handles
O	45896	45898	it
O	45898	45899	,
O	45900	45907	perhaps
O	45908	45910	it
O	45911	45913	is
O	45914	45916	as
O	45917	45926	efficient
O	45927	45929	as
O	45930	45933	the
O	45934	45939	above
O	45939	45940	)
O	45941	45942	#
O	45942	45944	li
B-api_mention	45945	45952	Integer
I-api_mention	45952	45953	.
I-api_mention	45953	45961	toString
I-api_mention	45961	45962	(
I-api_mention	45962	45966	args
I-api_mention	45966	45967	)

O	45969	45977	Question
O	45977	45978	-
O	45978	45985	5071040
O	45985	45986	,
O	45987	45993	answer
O	45993	45994	-
O	45994	46002	22547954

O	46003	46009	Always
O	46010	46013	use
O	46014	46020	either
B-api_mention	46021	46027	String
I-api_mention	46027	46028	.
I-api_mention	46028	46035	valueOf
I-api_mention	46035	46036	(
I-api_mention	46036	46040	args
I-api_mention	46040	46041	)
O	46042	46044	or
B-api_mention	46045	46052	Integer
I-api_mention	46052	46053	.
I-api_mention	46053	46061	toString
I-api_mention	46061	46062	(
I-api_mention	46062	46066	args
I-api_mention	46066	46067	)
O	46068	46069	.

O	46070	46075	Using
O	46076	46077	"
O	46077	46078	"
O	46079	46080	+
O	46081	46087	number
O	46088	46090	is
O	46091	46093	an
O	46094	46102	overhead
O	46103	46106	and
O	46107	46111	does
O	46112	46115	the
O	46116	46125	following
O	46125	46126	:
O	46127	46128	#
O	46128	46131	pre

O	46133	46141	Question
O	46141	46142	-
O	46142	46149	4576352
O	46149	46150	,
O	46151	46157	answer
O	46157	46158	-
O	46158	46165	4576367

O	46166	46171	using
O	46172	46178	public
B-api_mention	46179	46185	String
I-api_mention	46186	46196	replaceAll
I-api_mention	46196	46197	(
I-api_mention	46197	46201	args
I-api_mention	46201	46202	)
O	46203	46207	will
O	46208	46212	work
O	46213	46218	usage
O	46219	46224	would
O	46225	46227	be
O	46228	46231	str
B-api_mention	46231	46232	.
I-api_mention	46232	46239	replace
I-api_mention	46239	46240	(
I-api_mention	46240	46244	args
I-api_mention	46244	46245	)
O	46245	46246	;
O	46247	46256	executing
O	46257	46270	StringLiteral
B-api_mention	46270	46271	.
I-api_mention	46271	46281	replaceAll
I-api_mention	46281	46282	(
I-api_mention	46282	46286	args
I-api_mention	46286	46287	)
O	46287	46288	;
O	46289	46296	returns
O	46296	46297	:
O	46298	46305	lakjsdf
O	46306	46308	xx

O	46310	46318	Question
O	46318	46319	-
O	46319	46326	4576352
O	46326	46327	,
O	46328	46334	answer
O	46334	46335	-
O	46335	46343	11325546

O	46344	46347	You
O	46348	46351	can
O	46352	46355	use
O	46356	46359	str
O	46360	46361	=
O	46362	46365	str
B-api_mention	46365	46366	.
I-api_mention	46366	46373	replace
I-api_mention	46373	46374	(
I-api_mention	46374	46378	args
I-api_mention	46378	46379	)
O	46379	46380	;
O	46381	46383	as
O	46384	46393	mentioned
O	46394	46400	before
O	46401	46404	and
O	46405	46408	you
O	46409	46413	will
O	46414	46416	be
O	46417	46421	fine
O	46421	46422	.

O	46423	46426	For
O	46427	46431	your
O	46432	46443	information
O	46444	46455	CharLiteral
O	46456	46458	is
O	46459	46462	not
O	46463	46465	an
O	46466	46471	empty
O	46472	46473	(
O	46473	46475	or
O	46476	46477	a
O	46478	46483	valid
O	46483	46484	)
O	46485	46494	character
O	46495	46498	but
O	46499	46510	CharLiteral
O	46511	46513	is
O	46513	46514	.

O	46515	46517	So
O	46518	46521	you
O	46522	46527	could
O	46528	46531	use
O	46532	46535	str
O	46536	46537	=
O	46538	46541	str
B-api_mention	46541	46542	.
I-api_mention	46542	46549	replace
I-api_mention	46549	46550	(
I-api_mention	46550	46554	args
I-api_mention	46554	46555	)
O	46555	46556	;
O	46557	46564	instead
O	46564	46565	.

O	46567	46575	Question
O	46575	46576	-
O	46576	46583	5031614
O	46583	46584	,
O	46585	46591	answer
O	46591	46592	-
O	46592	46599	5032837

O	46600	46602	If
O	46603	46606	you
O	46607	46611	want
O	46612	46614	to
O	46615	46618	use
B-api_mention	46619	46625	equals
I-api_mention	46625	46626	(
I-api_mention	46626	46630	args
I-api_mention	46630	46631	)
O	46631	46632	/
B-api_mention	46632	46640	hashCode
I-api_mention	46640	46641	(
I-api_mention	46641	46645	args
I-api_mention	46645	46646	)
O	46647	46650	for
O	46651	46655	your
O	46656	46660	Sets
O	46660	46661	,
O	46662	46664	in
O	46665	46668	the
O	46669	46674	sense
O	46675	46679	that
O	46680	46683	the
O	46684	46688	same
O	46689	46695	entity
O	46696	46699	can
O	46700	46704	only
O	46705	46707	be
O	46708	46710	in
O	46711	46716	there
O	46717	46721	once
O	46721	46722	,
O	46723	46727	then
O	46728	46733	there
O	46734	46736	is
O	46737	46741	only
O	46742	46745	one
O	46746	46752	option
O	46752	46753	:
O	46754	46760	Option
O	46761	46762	2
O	46762	46763	.

O	46764	46768	That
O	46768	46769	'
O	46769	46770	s
O	46771	46778	because
O	46779	46780	a
O	46781	46788	primary
O	46789	46792	key
O	46793	46796	for
O	46797	46799	an
O	46800	46806	entity
O	46807	46809	by
O	46810	46820	definition
O	46821	46826	never
O	46827	46834	changes
O	46835	46836	(
O	46836	46838	if
O	46839	46847	somebody
O	46848	46854	indeed
O	46855	46862	updates
O	46863	46865	it
O	46865	46866	,
O	46867	46869	it
O	46869	46870	'
O	46870	46871	s
O	46872	46875	not
O	46876	46879	the
O	46880	46884	same
O	46885	46891	entity
O	46892	46899	anymore
O	46899	46900	)
O	46901	46904	You
O	46905	46911	should
O	46912	46916	take
O	46917	46921	that
O	46922	46931	literally
O	46931	46932	:
O	46933	46938	Since
O	46939	46943	your
B-api_mention	46944	46950	equals
I-api_mention	46950	46951	(
I-api_mention	46951	46955	args
I-api_mention	46955	46956	)
O	46956	46957	/
B-api_mention	46957	46965	hashCode
I-api_mention	46965	46966	(
I-api_mention	46966	46970	args
I-api_mention	46970	46971	)
O	46972	46975	are
O	46976	46981	based
O	46982	46984	on
O	46985	46988	the
O	46989	46996	primary
O	46997	47000	key
O	47000	47001	,
O	47002	47005	you
O	47006	47010	must
O	47011	47014	not
O	47015	47018	use
O	47019	47024	these
O	47025	47032	methods
O	47032	47033	,
O	47034	47039	until
O	47040	47043	the
O	47044	47051	primary
O	47052	47055	key
O	47056	47058	is
O	47059	47062	set
O	47062	47063	.

O	47064	47066	So
O	47067	47070	you
O	47071	47078	shouldn
O	47078	47079	'
O	47079	47080	t
O	47081	47084	put
O	47085	47093	entities
O	47094	47096	in
O	47097	47100	the
O	47101	47104	set
O	47104	47105	,
O	47106	47111	until
O	47112	47116	they
O	47116	47117	'
O	47117	47119	re
O	47120	47128	assigned
O	47129	47130	a
O	47131	47138	primary
O	47139	47142	key
O	47142	47143	.

O	47144	47145	(
O	47145	47148	Yes
O	47148	47149	,
O	47150	47155	UUIDs
O	47156	47159	and
O	47160	47167	similar
O	47168	47176	concepts
O	47177	47180	may
O	47181	47185	help
O	47186	47188	to
O	47189	47195	assign
O	47196	47203	primary
O	47204	47208	keys
O	47209	47214	early
O	47214	47215	.
O	47215	47216	)
O	47217	47220	Now
O	47220	47221	,
O	47222	47224	it
O	47224	47225	'
O	47225	47226	s
O	47227	47240	theoretically
O	47241	47245	also
O	47246	47254	possible
O	47255	47257	to
O	47258	47265	achieve
O	47266	47270	that
O	47271	47275	with
O	47276	47282	Option
O	47283	47284	3
O	47284	47285	,
O	47286	47290	even
O	47291	47297	though
O	47298	47300	so
O	47300	47301	-
O	47301	47307	called
O	47308	47309	"
O	47309	47317	business
O	47317	47318	-
O	47318	47322	keys
O	47322	47323	"
O	47324	47328	have
O	47329	47332	the
O	47333	47338	nasty
O	47339	47347	drawback
O	47348	47352	that
O	47353	47357	they
O	47358	47361	can
O	47362	47368	change
O	47368	47369	:
O	47370	47371	"
O	47371	47374	All
O	47375	47378	you
O	47378	47379	'
O	47379	47381	ll
O	47382	47386	have
O	47387	47389	to
O	47390	47392	do
O	47393	47395	is
O	47396	47402	delete
O	47403	47406	the
O	47407	47414	already
O	47415	47423	inserted
O	47424	47432	entities
O	47433	47437	from
O	47438	47441	the
O	47442	47445	set
O	47445	47446	(
O	47446	47447	s
O	47447	47448	)
O	47448	47449	,
O	47450	47453	and
O	47454	47456	re
O	47456	47457	-
O	47457	47463	insert
O	47464	47468	them
O	47468	47469	.
O	47469	47470	"
O	47471	47475	That
O	47476	47478	is
O	47479	47483	true
O	47484	47485	-
O	47486	47489	but
O	47490	47492	it
O	47493	47497	also
O	47498	47503	means
O	47503	47504	,
O	47505	47509	that
O	47510	47512	in
O	47513	47514	a
O	47515	47526	distributed
O	47527	47533	system
O	47533	47534	,
O	47535	47538	you
O	47538	47539	'
O	47539	47541	ll
O	47542	47546	have
O	47547	47549	to
O	47550	47554	make
O	47555	47559	sure
O	47559	47560	,
O	47561	47565	that
O	47566	47570	this
O	47571	47573	is
O	47574	47578	done
O	47579	47589	absolutely
O	47590	47600	everywhere
O	47601	47604	the
O	47605	47609	data
O	47610	47613	has
O	47614	47618	been
O	47619	47627	inserted
O	47628	47630	to
O	47631	47632	(
O	47632	47635	and
O	47636	47639	you
O	47639	47640	'
O	47640	47642	ll
O	47643	47647	have
O	47648	47650	to
O	47651	47655	make
O	47656	47660	sure
O	47660	47661	,
O	47662	47666	that
O	47667	47670	the
O	47671	47677	update
O	47678	47680	is
O	47681	47690	performed
O	47690	47691	,
O	47692	47698	before
O	47699	47704	other
O	47705	47711	things
O	47712	47717	occur
O	47717	47718	)
O	47718	47719	.

O	47720	47723	You
O	47723	47724	'
O	47724	47726	ll
O	47727	47731	need
O	47732	47733	a
O	47734	47747	sophisticated
O	47748	47754	update
O	47755	47764	mechanism
O	47764	47765	,
O	47766	47776	especially
O	47777	47779	if
O	47780	47784	some
O	47785	47791	remote
O	47792	47799	systems
O	47800	47804	aren
O	47804	47805	'
O	47805	47806	t
O	47807	47816	currently
O	47817	47826	reachable
O	47826	47827	.
O	47827	47828	.
O	47828	47829	.

O	47830	47836	Option
O	47837	47838	1
O	47839	47842	can
O	47843	47847	only
O	47848	47850	be
O	47851	47855	used
O	47855	47856	,
O	47857	47859	if
O	47860	47863	all
O	47864	47867	the
O	47868	47875	objects
O	47876	47878	in
O	47879	47883	your
O	47884	47888	sets
O	47889	47892	are
O	47893	47897	from
O	47898	47901	the
O	47902	47906	same
O	47907	47916	Hibernate
O	47917	47924	session
O	47924	47925	.

O	47926	47929	The
O	47930	47939	Hibernate
O	47940	47953	documentation
O	47954	47959	makes
O	47960	47964	this
O	47965	47969	very
O	47970	47975	clear
O	47976	47978	in
O	47979	47986	chapter
O	47987	47989	13
O	47989	47990	.
O	47990	47991	1
O	47991	47992	.
O	47992	47993	3
O	47993	47994	.

O	47995	48006	Considering
O	48007	48013	object
O	48014	48022	identity
O	48023	48024	:
O	48025	48026	#
O	48026	48036	blockquote
O	48037	48039	It
O	48040	48049	continues
O	48050	48052	to
O	48053	48058	argue
O	48059	48061	in
O	48062	48067	favor
O	48068	48070	of
O	48071	48077	Option
O	48078	48079	3
O	48079	48080	:
O	48081	48082	#
O	48082	48092	blockquote
O	48093	48097	This
O	48098	48100	is
O	48101	48105	true
O	48105	48106	,
O	48107	48109	if
O	48110	48113	you
O	48114	48115	#
O	48115	48117	li
O	48118	48124	cannot
O	48125	48131	assign
O	48132	48135	the
O	48136	48138	id
O	48139	48144	early
O	48145	48146	(
O	48146	48147	e
O	48147	48148	.
O	48148	48149	g
O	48149	48150	.
O	48151	48153	by
O	48154	48159	using
O	48160	48165	UUIDs
O	48165	48166	)
O	48167	48168	#
O	48168	48170	li
O	48171	48174	and
O	48175	48178	yet
O	48179	48182	you
O	48183	48193	absolutely
O	48194	48198	want
O	48199	48201	to
O	48202	48205	put
O	48206	48210	your
O	48211	48218	objects
O	48219	48221	in
O	48222	48226	sets
O	48227	48232	while
O	48233	48237	they
O	48237	48238	'
O	48238	48240	re
O	48241	48243	in
O	48244	48253	transient
O	48254	48259	state
O	48259	48260	.

O	48261	48270	Otherwise
O	48270	48271	,
O	48272	48275	you
O	48275	48276	'
O	48276	48278	re
O	48279	48283	free
O	48284	48286	to
O	48287	48293	choose
O	48294	48300	Option
O	48301	48302	2
O	48302	48303	.

O	48304	48308	Then
O	48309	48311	it
O	48312	48320	mentions
O	48321	48324	the
O	48325	48329	need
O	48330	48333	for
O	48334	48335	a
O	48336	48344	relative
O	48345	48354	stability
O	48354	48355	:
O	48356	48357	#
O	48357	48367	blockquote
O	48368	48372	This
O	48373	48375	is
O	48376	48383	correct
O	48383	48384	.

O	48385	48388	The
O	48389	48398	practical
O	48399	48406	problem
O	48407	48408	I
O	48409	48412	see
O	48413	48417	with
O	48418	48422	this
O	48423	48425	is
O	48425	48426	:
O	48427	48429	If
O	48430	48433	you
O	48434	48437	can
O	48437	48438	'
O	48438	48439	t
O	48440	48449	guarantee
O	48450	48458	absolute
O	48459	48468	stability
O	48468	48469	,
O	48470	48473	how
O	48474	48478	will
O	48479	48482	you
O	48483	48485	be
O	48486	48490	able
O	48491	48493	to
O	48494	48503	guarantee
O	48504	48513	stability
O	48514	48515	"
O	48515	48517	as
O	48518	48522	long
O	48523	48525	as
O	48526	48529	the
O	48530	48537	objects
O	48538	48541	are
O	48542	48544	in
O	48545	48548	the
O	48549	48553	same
O	48554	48557	Set
O	48557	48558	"
O	48558	48559	.

O	48560	48561	I
O	48562	48565	can
O	48566	48573	imagine
O	48574	48578	some
O	48579	48586	special
O	48587	48592	cases
O	48593	48594	(
O	48594	48598	like
O	48599	48604	using
O	48605	48609	sets
O	48610	48614	only
O	48615	48618	for
O	48619	48620	a
O	48621	48633	conversation
O	48634	48637	and
O	48638	48642	then
O	48643	48651	throwing
O	48652	48654	it
O	48655	48659	away
O	48659	48660	)
O	48660	48661	,
O	48662	48665	but
O	48666	48667	I
O	48668	48673	would
O	48674	48682	question
O	48683	48686	the
O	48687	48694	general
O	48695	48709	practicability
O	48710	48712	of
O	48713	48717	this
O	48717	48718	.

O	48719	48724	Short
O	48725	48732	version
O	48732	48733	:
O	48734	48735	#
O	48735	48737	li
O	48738	48744	Option
O	48745	48746	1
O	48747	48750	can
O	48751	48755	only
O	48756	48758	be
O	48759	48763	used
O	48764	48768	with
O	48769	48776	objects
O	48777	48783	within
O	48784	48785	a
O	48786	48792	single
O	48793	48800	session
O	48800	48801	.

O	48802	48803	#
O	48803	48805	li
O	48806	48808	If
O	48809	48812	you
O	48813	48816	can
O	48816	48817	,
O	48818	48821	use
O	48822	48828	Option
O	48829	48830	2
O	48830	48831	.

O	48832	48833	(
O	48833	48839	Assign
O	48840	48842	PK
O	48843	48845	as
O	48846	48851	early
O	48852	48854	as
O	48855	48863	possible
O	48863	48864	,
O	48865	48872	because
O	48873	48876	you
O	48877	48880	can
O	48880	48881	'
O	48881	48882	t
O	48883	48886	use
O	48887	48890	the
O	48891	48898	objects
O	48899	48901	in
O	48902	48906	sets
O	48907	48912	until
O	48913	48916	the
O	48917	48919	PK
O	48920	48922	is
O	48923	48931	assigned
O	48931	48932	.
O	48932	48933	)
O	48934	48935	#
O	48935	48937	li
O	48938	48940	If
O	48941	48944	you
O	48945	48948	can
O	48949	48958	guarantee
O	48959	48967	relative
O	48968	48977	stability
O	48977	48978	,
O	48979	48982	you
O	48983	48986	can
O	48987	48990	use
O	48991	48997	Option
O	48998	48999	3
O	48999	49000	.

O	49001	49004	But
O	49005	49007	be
O	49008	49015	careful
O	49016	49020	with
O	49021	49025	this
O	49025	49026	.

O	49028	49036	Question
O	49036	49037	-
O	49037	49044	5031614
O	49044	49045	,
O	49046	49052	answer
O	49052	49053	-
O	49053	49060	5103360

O	49061	49063	We
O	49064	49071	usually
O	49072	49076	have
O	49077	49080	two
O	49081	49084	IDs
O	49085	49087	in
O	49088	49091	our
O	49092	49100	entities
O	49100	49101	:
O	49102	49103	#
O	49103	49105	li
O	49106	49108	Is
O	49109	49112	for
O	49113	49124	persistence
O	49125	49130	layer
O	49131	49135	only
O	49136	49137	(
O	49137	49139	so
O	49140	49144	that
O	49145	49156	persistence
O	49157	49165	provider
O	49166	49169	and
O	49170	49178	database
O	49179	49182	can
O	49183	49189	figure
O	49190	49193	out
O	49194	49207	relationships
O	49208	49215	between
O	49216	49223	objects
O	49223	49224	)
O	49224	49225	.

O	49226	49227	#
O	49227	49229	li
O	49230	49232	Is
O	49233	49236	for
O	49237	49240	our
O	49241	49252	application
O	49253	49258	needs
O	49259	49260	(
O	49261	49267	equals
O	49267	49268	(
O	49268	49272	args
O	49272	49273	)
O	49274	49277	and
O	49278	49286	hashCode
O	49286	49287	(
O	49287	49291	args
O	49291	49292	)
O	49293	49295	in
O	49296	49306	particular
O	49306	49307	)
O	49308	49312	Take
O	49313	49314	a
O	49315	49319	look
O	49319	49320	:
O	49321	49322	#
O	49322	49325	pre
O	49326	49330	EDIT
O	49330	49331	:
O	49332	49334	to
O	49335	49342	clarify
O	49343	49345	my
O	49346	49351	point
O	49352	49361	regarding
O	49362	49367	calls
O	49368	49370	to
O	49371	49378	setUuid
O	49378	49379	(
O	49379	49383	args
O	49383	49384	)
O	49385	49391	method
O	49391	49392	.

O	49393	49397	Here
O	49397	49398	'
O	49398	49399	s
O	49400	49401	a
O	49402	49409	typical
O	49410	49418	scenario
O	49418	49419	:
O	49420	49421	#
O	49421	49424	pre
O	49425	49429	When
O	49430	49431	I
O	49432	49435	run
O	49436	49438	my
O	49439	49444	tests
O	49445	49448	and
O	49449	49452	see
O	49453	49456	the
O	49457	49460	log
O	49461	49467	output
O	49468	49469	I
O	49470	49473	fix
O	49474	49477	the
O	49478	49485	problem
O	49485	49486	:
O	49487	49488	#
O	49488	49491	pre
O	49492	49505	Alternatively
O	49505	49506	,
O	49507	49510	one
O	49511	49514	can
O	49515	49522	provide
O	49523	49524	a
O	49525	49533	separate
O	49534	49545	constructor
O	49545	49546	:
O	49547	49548	#
O	49548	49551	pre
O	49552	49554	So
O	49555	49557	my
O	49558	49565	example
O	49566	49571	would
O	49572	49576	look
O	49577	49581	like
O	49582	49586	this
O	49586	49587	:
O	49588	49589	#
O	49589	49592	pre
O	49593	49594	I
O	49595	49598	use
O	49599	49600	a
O	49601	49608	default
O	49609	49620	constructor
O	49621	49624	and
O	49625	49626	a
O	49627	49633	setter
O	49633	49634	,
O	49635	49638	but
O	49639	49642	you
O	49643	49646	may
O	49647	49651	find
O	49652	49655	two
O	49655	49656	-
O	49656	49668	constructors
O	49669	49677	approach
O	49678	49682	more
O	49683	49691	suitable
O	49692	49695	for
O	49696	49699	you
O	49699	49700	.

O	49702	49710	Question
O	49710	49711	-
O	49711	49718	5031614
O	49718	49719	,
O	49720	49726	answer
O	49726	49727	-
O	49727	49735	26826084

O	49736	49737	#
O	49737	49739	li
O	49740	49742	If
O	49743	49746	you
O	49747	49751	have
O	49752	49753	a
O	49754	49762	business
O	49763	49766	key
O	49767	49768	,
O	49769	49773	then
O	49774	49777	you
O	49778	49784	should
O	49785	49788	use
O	49789	49793	that
O	49794	49797	for
B-api_mention	49798	49804	equals
O	49805	49806	/
B-api_mention	49807	49815	hashCode
O	49816	49817	.

O	49818	49819	#
O	49819	49821	li
O	49822	49824	If
O	49825	49828	you
O	49829	49832	don
O	49832	49833	'
O	49833	49834	t
O	49835	49839	have
O	49840	49841	a
O	49842	49850	business
O	49851	49854	key
O	49854	49855	,
O	49856	49859	you
O	49860	49866	should
O	49867	49870	not
O	49871	49876	leave
O	49877	49879	it
O	49880	49884	with
O	49885	49888	the
O	49889	49896	default
B-api_mention	49897	49903	Object
I-api_mention	49904	49910	equals
O	49911	49914	and
B-api_mention	49915	49923	hashCode
O	49924	49939	implementations
O	49940	49947	because
O	49948	49952	that
O	49953	49957	does
O	49958	49961	not
O	49962	49966	work
O	49967	49972	after
O	49973	49976	you
O	49977	49982	merge
O	49983	49986	and
O	49987	49993	entity
O	49993	49994	.

O	49995	49996	#
O	49996	49998	li
O	49999	50002	You
O	50003	50006	can
O	50007	50010	use
O	50011	50014	the
O	50015	50021	entity
O	50022	50032	identifier
O	50033	50035	as
O	50036	50045	suggested
O	50046	50048	in
O	50049	50053	this
O	50054	50058	post
O	50059	50060	.

O	50061	50064	The
O	50065	50069	only
O	50070	50075	catch
O	50076	50078	is
O	50079	50083	that
O	50084	50087	you
O	50088	50092	need
O	50093	50095	to
O	50096	50099	use
O	50100	50101	a
B-api_mention	50102	50110	hashCode
O	50111	50125	implementation
O	50126	50130	that
O	50131	50137	always
O	50138	50144	return
O	50145	50148	the
O	50149	50153	same
O	50154	50159	value
O	50159	50160	,
O	50161	50165	like
O	50166	50170	this
O	50170	50171	:
O	50172	50173	#
O	50173	50176	pre

O	50178	50186	Question
O	50186	50187	-
O	50187	50194	5554217
O	50194	50195	,
O	50196	50202	answer
O	50202	50203	-
O	50203	50211	17300003

O	50212	50219	Another
O	50220	50223	way
O	50224	50226	is
O	50227	50229	to
O	50230	50233	use
O	50234	50236	an
O	50237	50242	array
O	50243	50245	as
O	50246	50247	a
O	50248	50252	type
O	50252	50253	,
O	50254	50255	e
O	50255	50256	.
O	50256	50257	g
O	50257	50258	.
O	50258	50259	:
O	50260	50267	MyClass
O	50267	50268	[
O	50268	50269	]
O	50270	50277	mcArray
O	50278	50279	=
O	50280	50284	gson
B-api_mention	50284	50285	.
I-api_mention	50285	50293	fromJson
I-api_mention	50293	50294	(
I-api_mention	50294	50298	args
I-api_mention	50298	50299	)
O	50299	50300	;
O	50301	50305	This
O	50306	50309	way
O	50310	50313	you
O	50314	50319	avoid
O	50320	50323	all
O	50324	50327	the
O	50328	50334	hassle
O	50335	50339	with
O	50340	50343	the
B-api_mention	50344	50348	Type
O	50349	50355	object
O	50355	50356	,
O	50357	50360	and
O	50361	50363	if
O	50364	50367	you
O	50368	50374	really
O	50375	50379	need
O	50380	50381	a
O	50382	50386	list
O	50387	50390	you
O	50391	50394	can
O	50395	50401	always
O	50402	50409	convert
O	50410	50413	the
O	50414	50419	array
O	50420	50422	to
O	50423	50424	a
O	50425	50429	list
O	50430	50432	by
O	50432	50433	:
B-api_mention	50434	50438	List
I-api_mention	50438	50439	<
I-api_mention	50439	50440	T
I-api_mention	50440	50441	>
O	50442	50448	mcList
O	50449	50450	=
B-api_mention	50451	50457	Arrays
I-api_mention	50457	50458	.
I-api_mention	50458	50464	asList
I-api_mention	50464	50465	(
I-api_mention	50465	50469	args
I-api_mention	50469	50470	)
O	50470	50471	;
O	50472	50476	IMHO
O	50477	50481	this
O	50482	50484	is
O	50485	50489	much
O	50490	50494	more
O	50495	50503	readable
O	50503	50504	.

O	50505	50508	And
O	50509	50511	to
O	50512	50516	make
O	50517	50519	it
O	50520	50522	be
O	50523	50525	an
O	50526	50532	actual
O	50533	50537	list
O	50538	50539	(
O	50539	50543	that
O	50544	50547	can
O	50548	50550	be
O	50551	50559	modified
O	50559	50560	,
O	50561	50564	see
O	50565	50576	limitations
O	50577	50579	of
B-api_mention	50580	50586	Arrays
I-api_mention	50586	50587	.
I-api_mention	50587	50593	asList
I-api_mention	50593	50594	(
I-api_mention	50594	50598	args
I-api_mention	50598	50599	)
O	50600	50601	)
O	50602	50606	then
O	50607	50611	just
O	50612	50614	do
O	50615	50618	the
O	50619	50628	following
O	50628	50629	:
B-api_mention	50630	50634	List
I-api_mention	50634	50635	<
I-api_mention	50635	50636	T
I-api_mention	50636	50637	>
O	50638	50644	mcList
O	50645	50646	=
O	50647	50650	new
B-api_mention	50651	50660	ArrayList
I-api_mention	50660	50661	<
I-api_mention	50661	50662	T
I-api_mention	50662	50663	>
I-api_mention	50663	50664	(
I-api_mention	50664	50668	args
I-api_mention	50668	50669	)
O	50669	50670	;

O	50672	50680	Question
O	50680	50681	-
O	50681	50688	5673260
O	50688	50689	,
O	50690	50696	answer
O	50696	50697	-
O	50697	50704	5673356

O	50705	50706	#
O	50706	50709	pre
O	50710	50719	Generally
O	50720	50728	speaking
O	50728	50729	,
O	50730	50734	when
O	50735	50738	you
O	50739	50743	have
O	50744	50752	response
B-api_mention	50752	50753	.
I-api_mention	50753	50768	getOutputStream
I-api_mention	50768	50769	(
I-api_mention	50769	50773	args
I-api_mention	50773	50774	)
O	50775	50776	,
O	50777	50780	you
O	50781	50784	can
O	50785	50790	write
O	50791	50799	anything
O	50800	50805	there
O	50805	50806	.

O	50807	50810	You
O	50811	50814	can
O	50815	50819	pass
O	50820	50824	this
O	50825	50831	output
O	50832	50838	stream
O	50839	50841	as
O	50842	50843	a
O	50844	50849	place
O	50850	50852	to
O	50853	50856	put
O	50857	50866	generated
O	50867	50870	PDF
O	50871	50873	to
O	50874	50878	your
O	50879	50888	generator
O	50888	50889	.

O	50890	50894	Also
O	50894	50895	,
O	50896	50898	if
O	50899	50902	you
O	50903	50907	know
O	50908	50912	what
O	50913	50917	file
O	50918	50922	type
O	50923	50926	you
O	50927	50930	are
O	50931	50938	sending
O	50938	50939	,
O	50940	50943	you
O	50944	50947	can
O	50948	50951	set
O	50952	50960	response
B-api_mention	50960	50961	.
I-api_mention	50961	50975	setContentType
I-api_mention	50975	50976	(
I-api_mention	50976	50980	args
I-api_mention	50980	50981	)
O	50981	50982	;

O	50984	50992	Question
O	50992	50993	-
O	50993	51000	5673260
O	51000	51001	,
O	51002	51008	answer
O	51008	51009	-
O	51009	51016	5673375

O	51017	51020	You
O	51021	51027	should
O	51028	51030	be
O	51031	51035	able
O	51036	51038	to
O	51039	51044	write
O	51045	51048	the
O	51049	51053	file
O	51054	51056	on
O	51057	51060	the
O	51061	51069	response
O	51070	51078	directly
O	51078	51079	.

O	51080	51089	Something
O	51090	51094	like
O	51095	51096	#
O	51096	51099	pre
O	51100	51103	and
O	51104	51108	then
O	51109	51114	write
O	51115	51118	the
O	51119	51123	file
O	51124	51126	as
O	51127	51128	a
O	51129	51135	binary
O	51136	51142	stream
O	51143	51145	on
O	51146	51154	response
B-api_mention	51154	51155	.
I-api_mention	51155	51170	getOutputStream
I-api_mention	51170	51171	(
I-api_mention	51171	51175	args
I-api_mention	51175	51176	)
O	51177	51178	.

O	51179	51187	Remember
O	51188	51190	to
O	51191	51193	do
O	51194	51202	response
B-api_mention	51202	51203	.
I-api_mention	51203	51208	flush
I-api_mention	51208	51209	(
I-api_mention	51209	51213	args
I-api_mention	51213	51214	)
O	51215	51217	at
O	51218	51221	the
O	51222	51225	end
O	51226	51229	and
O	51230	51234	that
O	51235	51241	should
O	51242	51244	do
O	51245	51247	it
O	51247	51248	.

O	51250	51258	Question
O	51258	51259	-
O	51259	51266	5785745
O	51266	51267	,
O	51268	51274	answer
O	51274	51275	-
O	51275	51283	15962949

O	51284	51286	If
O	51287	51290	you
O	51291	51295	want
O	51296	51298	to
O	51299	51303	make
O	51304	51305	a
O	51306	51310	copy
O	51311	51313	of
O	51313	51314	:
O	51315	51318	int
O	51318	51319	[
O	51319	51320	]
O	51321	51322	a
O	51323	51324	=
O	51325	51326	{
O	51326	51327	1
O	51327	51328	,
O	51328	51329	2
O	51329	51330	,
O	51330	51331	3
O	51331	51332	,
O	51332	51333	4
O	51333	51334	,
O	51334	51335	5
O	51335	51336	}
O	51336	51337	;
O	51338	51342	This
O	51343	51345	is
O	51346	51349	the
O	51350	51353	way
O	51354	51356	to
O	51357	51359	go
O	51359	51360	:
O	51361	51364	int
O	51364	51365	[
O	51365	51366	]
O	51367	51368	b
O	51369	51370	=
B-api_mention	51371	51377	Arrays
I-api_mention	51377	51378	.
I-api_mention	51378	51384	copyOf
I-api_mention	51384	51385	(
I-api_mention	51385	51389	args
I-api_mention	51389	51390	)
O	51390	51391	;
B-api_mention	51392	51398	Arrays
I-api_mention	51398	51399	.
I-api_mention	51399	51405	copyOf
O	51406	51409	may
O	51410	51412	be
O	51413	51419	faster
O	51420	51424	than
O	51425	51426	a
B-api_mention	51426	51427	.
I-api_mention	51427	51432	clone
I-api_mention	51432	51433	(
I-api_mention	51433	51437	args
I-api_mention	51437	51438	)
O	51439	51441	on
O	51442	51447	small
O	51448	51454	arrays
O	51454	51455	.

O	51456	51460	Both
O	51461	51465	copy
O	51466	51474	elements
O	51475	51482	equally
O	51483	51487	fast
O	51488	51491	but
B-api_mention	51492	51497	clone
I-api_mention	51497	51498	(
I-api_mention	51498	51499	)
O	51500	51507	returns
B-api_mention	51508	51514	Object
O	51515	51517	so
O	51518	51521	the
O	51522	51530	compiler
O	51531	51534	has
O	51535	51537	to
O	51538	51544	insert
O	51545	51547	an
O	51548	51556	implicit
O	51557	51561	cast
O	51562	51564	to
O	51565	51568	int
O	51568	51569	[
O	51569	51570	]
O	51571	51572	.

O	51573	51576	You
O	51577	51580	can
O	51581	51584	see
O	51585	51587	it
O	51588	51590	in
O	51591	51594	the
O	51595	51603	bytecode
O	51603	51604	,
O	51605	51614	something
O	51615	51619	like
O	51620	51624	this
O	51624	51625	:
O	51626	51627	#
O	51627	51630	pre

O	51632	51640	Question
O	51640	51641	-
O	51641	51648	5785745
O	51648	51649	,
O	51650	51656	answer
O	51656	51657	-
O	51657	51665	34845194

O	51666	51669	You
O	51670	51673	can
O	51674	51678	also
O	51679	51682	use
B-api_mention	51683	51689	Arrays
I-api_mention	51689	51690	.
I-api_mention	51690	51701	copyOfRange
O	51702	51703	.

O	51704	51711	Example
O	51712	51713	:
O	51714	51715	#
O	51715	51718	pre
O	51719	51723	This
O	51724	51730	method
O	51731	51733	is
O	51734	51741	similar
O	51742	51744	to
B-api_mention	51745	51751	Arrays
I-api_mention	51751	51752	.
I-api_mention	51752	51758	copyOf
O	51759	51760	,
O	51761	51764	but
O	51765	51767	it
O	51767	51768	'
O	51768	51769	s
O	51770	51774	more
O	51775	51783	flexible
O	51783	51784	.

O	51785	51789	Both
O	51790	51792	of
O	51793	51797	them
O	51798	51801	use
B-api_mention	51802	51808	System
I-api_mention	51808	51809	.
I-api_mention	51809	51818	arraycopy
O	51819	51824	under
O	51825	51828	the
O	51829	51833	hood
O	51833	51834	.

O	51835	51838	See
O	51839	51840	:
O	51841	51842	#
O	51842	51844	li
O	51845	51846	#
O	51846	51847	a
O	51848	51849	#
O	51849	51851	li
O	51852	51853	#
O	51853	51854	a
O	51855	51856	#
O	51856	51858	li
O	51859	51860	#
O	51860	51861	a

O	51863	51871	Question
O	51871	51872	-
O	51872	51879	5694385
O	51879	51880	,
O	51881	51887	answer
O	51887	51888	-
O	51888	51895	5694464

O	51896	51902	Rather
O	51903	51907	than
O	51908	51913	spoon
O	51913	51914	-
O	51914	51918	feed
O	51919	51922	you
O	51923	51927	code
O	51927	51928	,
O	51929	51933	here
O	51933	51934	'
O	51934	51935	s
O	51936	51939	how
O	51940	51942	to
O	51943	51947	look
O	51948	51950	in
O	51951	51954	the
O	51955	51968	documentation
O	51969	51970	.

O	51971	51976	First
O	51976	51977	,
O	51978	51981	you
O	51981	51982	'
O	51982	51984	re
O	51985	51992	dealing
O	51993	51997	with
O	51998	52000	IO
O	52000	52001	,
O	52002	52004	so
O	52005	52009	look
O	52010	52012	in
O	52013	52016	the
O	52017	52021	java
O	52021	52022	.
O	52022	52024	io
O	52025	52032	package
O	52033	52034	.

O	52035	52040	There
O	52041	52044	are
O	52045	52048	two
O	52049	52056	classes
O	52057	52061	that
O	52062	52066	look
O	52067	52078	interesting
O	52078	52079	:
B-api_mention	52080	52090	FileFilter
O	52091	52094	and
B-api_mention	52095	52109	FileNameFilter
O	52110	52111	.

O	52112	52116	When
O	52117	52118	I
O	52119	52126	clicked
O	52127	52129	on
O	52130	52133	the
O	52134	52139	first
O	52139	52140	,
O	52141	52143	it
O	52144	52150	showed
O	52151	52153	me
O	52154	52158	that
O	52159	52164	there
O	52165	52168	was
O	52169	52170	a
O	52171	52172	a
B-api_mention	52173	52182	listFiles
I-api_mention	52182	52183	(
I-api_mention	52183	52187	args
I-api_mention	52187	52188	)
O	52189	52195	method
O	52196	52198	in
O	52199	52202	the
B-api_mention	52203	52207	File
O	52208	52213	class
O	52213	52214	.

O	52215	52218	And
O	52219	52222	the
O	52223	52236	documentation
O	52237	52240	for
O	52241	52245	that
O	52246	52252	method
O	52253	52257	says
O	52257	52258	:
O	52259	52260	#
O	52260	52270	blockquote
O	52271	52280	Scrolling
O	52281	52283	up
O	52284	52286	in
O	52287	52290	the
O	52291	52295	File
O	52296	52303	JavaDoc
O	52303	52304	,
O	52305	52306	I
O	52307	52310	see
O	52311	52314	the
O	52315	52327	constructors
O	52327	52328	.

O	52329	52332	And
O	52333	52337	that
O	52337	52338	'
O	52338	52339	s
O	52340	52346	really
O	52347	52350	all
O	52351	52352	I
O	52353	52357	need
O	52358	52360	to
O	52361	52363	be
O	52364	52368	able
O	52369	52371	to
O	52372	52378	create
O	52379	52380	a
O	52381	52385	File
O	52386	52394	instance
O	52395	52398	and
O	52399	52403	call
B-api_mention	52404	52413	listFiles
I-api_mention	52413	52414	(
I-api_mention	52414	52418	args
I-api_mention	52418	52419	)
O	52420	52422	on
O	52423	52425	it
O	52425	52426	.

O	52427	52436	Scrolling
O	52437	52442	still
O	52443	52450	further
O	52450	52451	,
O	52452	52453	I
O	52454	52457	can
O	52458	52461	see
O	52462	52466	some
O	52467	52478	information
O	52479	52484	about
O	52485	52488	how
O	52489	52494	files
O	52495	52498	are
O	52499	52504	named
O	52505	52507	in
O	52508	52517	different
O	52518	52527	operating
O	52528	52535	systems
O	52535	52536	.

O	52538	52546	Question
O	52546	52547	-
O	52547	52554	5694385
O	52554	52555	,
O	52556	52562	answer
O	52562	52563	-
O	52563	52570	5694473

O	52571	52577	Create
O	52578	52579	a
B-api_mention	52580	52584	File
O	52585	52591	object
O	52591	52592	,
O	52593	52600	passing
O	52601	52604	the
O	52605	52614	directory
O	52615	52619	path
O	52620	52622	to
O	52623	52626	the
O	52627	52638	constructor
O	52638	52639	.

O	52640	52643	Use
O	52644	52647	the
B-api_mention	52648	52657	listFiles
I-api_mention	52657	52658	(
I-api_mention	52658	52662	args
I-api_mention	52662	52663	)
O	52664	52666	to
O	52667	52675	retrieve
O	52676	52678	an
O	52679	52684	array
O	52685	52687	of
B-api_mention	52688	52692	File
O	52693	52700	objects
O	52701	52704	for
O	52705	52709	each
O	52710	52714	file
O	52715	52717	in
O	52718	52721	the
O	52722	52731	directory
O	52731	52732	,
O	52733	52736	and
O	52737	52741	then
O	52742	52746	call
O	52747	52750	the
B-api_mention	52751	52758	getName
I-api_mention	52758	52759	(
I-api_mention	52759	52763	args
I-api_mention	52763	52764	)
O	52765	52771	method
O	52772	52774	to
O	52775	52778	get
O	52779	52782	the
O	52783	52791	filename
O	52791	52792	.

O	52793	52794	#
O	52794	52797	pre

O	52799	52807	Question
O	52807	52808	-
O	52808	52815	5439529
O	52815	52816	,
O	52817	52823	answer
O	52823	52824	-
O	52824	52831	5439543

O	52832	52835	You
O	52836	52839	can
O	52840	52843	use
B-api_mention	52844	52851	Integer
I-api_mention	52851	52852	.
I-api_mention	52852	52860	parseInt
I-api_mention	52860	52861	(
I-api_mention	52861	52865	args
I-api_mention	52865	52866	)
O	52867	52869	or
B-api_mention	52870	52877	Integer
I-api_mention	52877	52878	.
I-api_mention	52878	52885	valueOf
I-api_mention	52885	52886	(
I-api_mention	52886	52890	args
I-api_mention	52890	52891	)
O	52892	52894	to
O	52895	52898	get
O	52899	52902	the
O	52903	52910	integer
O	52911	52915	from
O	52916	52919	the
O	52920	52926	string
O	52926	52927	,
O	52928	52931	and
O	52932	52937	catch
O	52938	52941	the
O	52942	52951	exception
O	52952	52954	if
O	52955	52957	it
O	52958	52960	is
O	52961	52964	not
O	52965	52966	a
O	52967	52975	parsable
O	52976	52979	int
O	52979	52980	.

O	52981	52984	You
O	52985	52989	want
O	52990	52992	to
O	52993	52995	be
O	52996	53000	sure
O	53001	53003	to
O	53004	53009	catch
O	53010	53013	the
B-api_mention	53014	53035	NumberFormatException
O	53036	53038	it
O	53039	53042	can
O	53043	53048	throw
O	53048	53049	.

O	53050	53052	It
O	53053	53056	may
O	53057	53059	be
O	53060	53067	helpful
O	53068	53070	to
O	53071	53075	note
O	53076	53080	that
B-api_mention	53081	53088	valueOf
I-api_mention	53088	53089	(
I-api_mention	53089	53090	)
O	53091	53095	will
O	53096	53102	return
O	53103	53105	an
B-api_mention	53106	53113	Integer
O	53114	53120	object
O	53120	53121	,
O	53122	53125	not
O	53126	53129	the
O	53130	53139	primitive
O	53140	53143	int
O	53143	53144	.

O	53146	53154	Question
O	53154	53155	-
O	53155	53162	5439529
O	53162	53163	,
O	53164	53170	answer
O	53170	53171	-
O	53171	53178	5439600

O	53179	53181	As
O	53182	53184	an
O	53185	53196	alternative
O	53197	53199	to
O	53200	53206	trying
O	53207	53209	to
O	53210	53215	parse
O	53216	53219	the
O	53220	53226	string
O	53227	53230	and
O	53231	53239	catching
B-api_mention	53240	53261	NumberFormatException
O	53262	53263	,
O	53264	53267	you
O	53268	53273	could
O	53274	53277	use
O	53278	53279	a
O	53280	53285	regex
O	53285	53286	;
O	53287	53288	e
O	53288	53289	.
O	53289	53290	g
O	53290	53291	.
O	53292	53293	#
O	53293	53296	pre
O	53297	53301	This
O	53302	53304	is
O	53305	53311	likely
O	53312	53314	to
O	53315	53317	be
O	53318	53324	faster
O	53324	53325	,
O	53326	53336	especially
O	53337	53339	if
O	53340	53343	you
O	53344	53354	precompile
O	53355	53358	and
O	53359	53364	reuse
O	53365	53368	the
O	53369	53374	regex
O	53374	53375	.

O	53376	53383	However
O	53383	53384	,
O	53385	53388	the
O	53389	53394	catch
O	53395	53397	is
O	53398	53402	that
B-api_mention	53403	53410	Integer
I-api_mention	53410	53411	.
I-api_mention	53411	53419	parseInt
I-api_mention	53419	53420	(
I-api_mention	53420	53424	args
I-api_mention	53424	53425	)
O	53426	53430	will
O	53431	53436	still
O	53437	53441	fail
O	53442	53444	if
O	53445	53448	str
O	53449	53459	represents
O	53460	53461	a
O	53462	53468	number
O	53469	53473	that
O	53474	53476	is
O	53477	53484	outside
O	53485	53490	range
O	53491	53493	of
O	53494	53499	legal
O	53500	53503	int
O	53504	53510	values
O	53510	53511	.

O	53513	53521	Question
O	53521	53522	-
O	53522	53529	5439529
O	53529	53530	,
O	53531	53537	answer
O	53537	53538	-
O	53538	53545	9991624

O	53546	53549	You
O	53550	53553	can
O	53554	53557	use
B-api_mention	53558	53565	Integer
I-api_mention	53565	53566	.
I-api_mention	53566	53574	parseInt
I-api_mention	53574	53575	(
I-api_mention	53575	53579	args
I-api_mention	53579	53580	)
O	53581	53584	and
O	53585	53590	catch
O	53591	53594	the
B-api_mention	53595	53616	NumberFormatException
O	53617	53619	if
O	53620	53623	the
O	53624	53630	string
O	53631	53633	is
O	53634	53637	not
O	53638	53639	a
O	53640	53645	valid
O	53646	53653	integer
O	53653	53654	,
O	53655	53657	in
O	53658	53661	the
O	53662	53671	following
O	53672	53679	fashion
O	53680	53681	(
O	53681	53683	as
O	53684	53691	pointed
O	53692	53695	out
O	53696	53698	by
O	53699	53702	all
O	53703	53710	answers
O	53710	53711	)
O	53711	53712	:
O	53713	53714	#
O	53714	53717	pre
O	53718	53725	However
O	53725	53726	,
O	53727	53731	note
O	53732	53736	here
O	53737	53741	that
O	53742	53744	if
O	53745	53748	the
O	53749	53758	evaluated
O	53759	53766	integer
O	53767	53776	overflows
O	53776	53777	,
O	53778	53781	the
O	53782	53786	same
O	53787	53796	exception
O	53797	53801	will
O	53802	53804	be
O	53805	53811	thrown
O	53811	53812	.

O	53813	53817	Your
O	53818	53825	purpose
O	53826	53829	was
O	53830	53832	to
O	53833	53837	find
O	53838	53841	out
O	53842	53849	whether
O	53850	53852	or
O	53853	53856	not
O	53856	53857	,
O	53858	53860	it
O	53861	53864	was
O	53865	53866	a
O	53867	53872	valid
O	53873	53880	integer
O	53880	53881	.

O	53882	53884	So
O	53885	53888	its
O	53889	53894	safer
O	53895	53897	to
O	53898	53902	make
O	53903	53907	your
O	53908	53911	own
O	53912	53918	method
O	53919	53921	to
O	53922	53927	check
O	53928	53931	for
O	53932	53940	validity
O	53940	53941	:
O	53942	53943	#
O	53943	53946	pre

O	53948	53956	Question
O	53956	53957	-
O	53957	53964	5439529
O	53964	53965	,
O	53966	53972	answer
O	53972	53973	-
O	53973	53981	15357940

O	53982	53984	Or
O	53985	53991	simply
O	53992	54000	mystring
B-api_mention	54000	54001	.
I-api_mention	54001	54008	matches
I-api_mention	54008	54009	(
I-api_mention	54009	54013	args
I-api_mention	54013	54014	)
O	54015	54021	though
O	54022	54024	it
O	54025	54030	would
O	54031	54037	return
O	54038	54042	true
O	54043	54046	for
O	54047	54054	numbers
O	54055	54061	larger
O	54062	54066	than
O	54067	54069	an
O	54070	54073	int

O	54075	54083	Question
O	54083	54084	-
O	54084	54091	6416706
O	54091	54092	,
O	54093	54099	answer
O	54099	54100	-
O	54100	54107	6416788

O	54108	54110	As
O	54111	54115	soon
O	54116	54118	as
O	54119	54122	you
O	54123	54127	call
B-api_mention	54128	54136	contains
O	54137	54138	,
B-api_mention	54139	54150	containsAll
O	54151	54152	,
B-api_mention	54153	54159	equals
O	54160	54161	,
B-api_mention	54162	54170	hashCode
O	54171	54172	,
B-api_mention	54173	54179	remove
O	54180	54181	,
B-api_mention	54182	54191	retainAll
O	54192	54193	,
B-api_mention	54194	54198	size
O	54199	54201	or
B-api_mention	54202	54209	toArray
O	54210	54211	,
O	54212	54215	you
O	54215	54216	'
O	54216	54217	d
O	54218	54222	have
O	54223	54225	to
O	54226	54234	traverse
O	54235	54238	the
O	54239	54247	elements
O	54248	54254	anyway
O	54254	54255	.

O	54256	54258	If
O	54259	54262	you
O	54262	54263	'
O	54263	54265	re
O	54266	54278	occasionally
O	54279	54283	only
O	54284	54291	calling
O	54292	54299	methods
O	54300	54304	such
O	54305	54307	as
B-api_mention	54308	54315	isEmpty
O	54316	54318	or
O	54319	54324	clear
O	54325	54326	I
O	54327	54334	suppose
O	54335	54338	you
O	54338	54339	'
O	54339	54340	d
O	54341	54343	be
O	54344	54350	better
O	54351	54353	of
O	54354	54356	by
O	54357	54365	creating
O	54366	54369	the
O	54370	54380	collection
O	54381	54387	lazily
O	54387	54388	.

O	54389	54392	You
O	54393	54398	could
O	54399	54402	for
O	54403	54411	instance
O	54412	54416	have
O	54417	54418	a
O	54419	54426	backing
B-api_mention	54427	54436	ArrayList
O	54437	54440	for
O	54441	54448	storing
O	54449	54459	previously
O	54460	54468	iterated
O	54469	54477	elements
O	54477	54478	.

O	54479	54480	I
O	54481	54484	don
O	54484	54485	'
O	54485	54486	t
O	54487	54491	know
O	54492	54494	of
O	54495	54498	any
O	54499	54503	such
O	54504	54509	class
O	54510	54512	in
O	54513	54516	any
O	54517	54524	library
O	54524	54525	,
O	54526	54529	but
O	54530	54532	it
O	54533	54539	should
O	54540	54542	be
O	54543	54544	a
O	54545	54551	fairly
O	54552	54558	simple
O	54559	54567	exercise
O	54568	54570	to
O	54571	54576	write
O	54577	54579	up
O	54579	54580	.

O	54582	54590	Question
O	54590	54591	-
O	54591	54598	6416706
O	54598	54599	,
O	54600	54606	answer
O	54606	54607	-
O	54607	54614	6416800

O	54615	54619	With
O	54620	54625	Guava
O	54626	54629	you
O	54630	54633	can
O	54634	54637	use
B-api_mention	54638	54643	Lists
I-api_mention	54643	54644	.
I-api_mention	54644	54656	newArrayList
I-api_mention	54656	54657	(
I-api_mention	54657	54665	Iterable
I-api_mention	54665	54666	)
O	54667	54669	or
B-api_mention	54670	54674	Sets
I-api_mention	54674	54675	.
I-api_mention	54675	54685	newHashSet
I-api_mention	54685	54686	(
I-api_mention	54686	54694	Iterable
I-api_mention	54694	54695	)
O	54696	54697	,
O	54698	54703	among
O	54704	54709	other
O	54710	54717	similar
O	54718	54725	methods
O	54725	54726	.

O	54727	54731	This
O	54732	54736	will
O	54737	54739	of
O	54740	54746	course
O	54747	54751	copy
O	54752	54755	all
O	54756	54759	the
O	54760	54768	elements
O	54769	54771	in
O	54772	54774	to
O	54775	54781	memory
O	54781	54782	.

O	54783	54785	If
O	54786	54790	that
O	54791	54794	isn
O	54794	54795	'
O	54795	54796	t
O	54797	54807	acceptable
O	54807	54808	,
O	54809	54810	I
O	54811	54816	think
O	54817	54821	your
O	54822	54826	code
O	54827	54831	that
O	54832	54837	works
O	54838	54842	with
O	54843	54848	these
O	54849	54854	ought
O	54855	54857	to
O	54858	54862	take
B-api_mention	54863	54871	Iterable
O	54872	54878	rather
O	54879	54883	than
B-api_mention	54884	54894	Collection
O	54895	54896	.

O	54897	54902	Guava
O	54903	54907	also
O	54908	54915	happens
O	54916	54918	to
O	54919	54926	provide
O	54927	54937	convenient
O	54938	54945	methods
O	54946	54949	for
O	54950	54955	doing
O	54956	54962	things
O	54963	54966	you
O	54967	54970	can
O	54971	54973	do
O	54974	54976	on
O	54977	54978	a
B-api_mention	54979	54989	Collection
O	54990	54995	using
O	54996	54998	an
B-api_mention	54999	55007	Iterable
O	55008	55009	(
O	55009	55013	such
O	55014	55016	as
B-api_mention	55017	55026	Iterables
I-api_mention	55026	55027	.
I-api_mention	55027	55034	isEmpty
I-api_mention	55034	55035	(
I-api_mention	55035	55039	args
I-api_mention	55039	55040	)
O	55041	55043	or
B-api_mention	55044	55053	Iterables
I-api_mention	55053	55054	.
I-api_mention	55054	55062	contains
I-api_mention	55062	55063	(
I-api_mention	55063	55067	args
I-api_mention	55067	55068	)
O	55069	55070	)
O	55070	55071	,
O	55072	55075	but
O	55076	55079	the
O	55080	55091	performance
O	55092	55104	implications
O	55105	55108	are
O	55109	55113	more
O	55114	55121	obvious
O	55121	55122	.
