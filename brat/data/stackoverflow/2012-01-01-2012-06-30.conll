O	0	8	Question
O	8	9	-
O	9	16	8881291

O	17	19	In
O	20	25	Swing
O	25	26	,
O	27	30	the
O	31	39	password
O	40	45	field
O	46	49	has
O	50	51	a
B-api_mention	52	63	getPassword
I-api_mention	63	64	(
I-api_mention	64	68	args
I-api_mention	68	69	)
O	70	71	(
O	71	78	returns
O	79	83	char
O	83	84	[
O	84	85	]
O	86	87	)
O	88	94	method
O	95	102	instead
O	103	105	of
O	106	109	the
O	110	115	usual
B-api_mention	116	123	getText
I-api_mention	123	124	(
I-api_mention	124	128	args
I-api_mention	128	129	)
O	130	131	(
O	131	138	returns
B-api_mention	139	145	String
O	146	147	)
O	148	154	method
O	154	155	.

O	156	165	Similarly
O	165	166	,
O	167	168	I
O	169	173	have
O	174	178	come
O	179	185	across
O	186	187	a
O	188	198	suggestion
O	199	202	not
O	203	205	to
O	206	209	use
B-api_mention	210	216	String
O	217	219	to
O	220	226	handle
O	227	236	passwords
O	236	237	.

O	238	241	Why
O	242	246	does
B-api_mention	247	253	String
O	254	258	pose
O	259	260	a
O	261	267	threat
O	268	270	to
O	271	279	security
O	280	284	when
O	285	287	it
O	288	293	comes
O	294	296	to
O	297	306	passwords
O	306	307	?

O	308	310	It
O	311	316	feels
O	317	329	inconvenient
O	330	332	to
O	333	336	use
O	337	341	char
O	341	342	[
O	342	343	]
O	344	345	.

O	347	355	Question
O	355	356	-
O	356	364	10786042

O	365	368	Say
O	369	370	I
O	371	375	have
O	376	377	a
O	378	381	URL
O	382	386	http
O	386	387	:
O	387	388	/
O	388	389	/
O	389	396	example
O	396	397	.
O	397	400	com
O	400	401	/
O	401	406	query
O	406	407	?
O	407	408	q
O	408	409	=
O	410	413	and
O	414	415	I
O	416	420	have
O	421	422	a
O	423	428	query
O	429	436	entered
O	437	439	by
O	440	443	the
O	444	448	user
O	449	453	such
O	454	456	as
O	456	457	:
O	458	459	#
O	459	469	blockquote
O	470	471	I
O	472	476	want
O	477	480	the
O	481	487	result
O	488	490	to
O	491	493	be
O	494	495	a
O	496	504	properly
O	505	512	encoded
O	513	516	URL
O	516	517	:
O	518	522	http
O	522	523	:
O	523	524	/
O	524	525	/
O	525	532	example
O	532	533	.
O	533	536	com
O	536	537	/
O	537	542	query
O	542	543	?
O	543	544	q
O	544	545	=
O	545	551	random
O	551	552	%
O	552	558	20word
O	558	559	%
O	559	561	20
O	561	562	%
O	562	567	A3500
O	567	568	%
O	568	574	20bank
O	574	575	%
O	575	577	20
O	577	578	%
O	578	580	24
O	581	585	What
O	585	586	'
O	586	587	s
O	588	591	the
O	592	596	best
O	597	600	way
O	601	603	to
O	604	611	achieve
O	612	616	this
O	616	617	?

O	618	619	I
O	620	625	tried
B-api_mention	626	636	URLEncoder
O	637	640	and
O	641	649	creating
O	650	653	URI
O	653	654	/
O	654	657	URL
O	658	665	objects
O	666	669	but
O	670	674	none
O	675	677	of
O	678	682	them
O	683	687	come
O	688	691	out
O	692	697	quite
O	698	703	right
O	703	704	.

O	706	714	Question
O	714	715	-
O	715	722	8725387

O	723	725	In
O	726	730	Java
O	731	736	there
O	737	740	are
O	741	744	the
B-api_mention	745	754	SortedSet
O	755	758	and
B-api_mention	759	768	SortedMap
O	769	779	interfaces
O	779	780	.

O	781	785	Both
O	786	792	belong
O	793	795	to
O	796	800	Java
O	800	801	'
O	801	802	s
O	803	811	standard
B-api_mention	812	823	Collections
O	824	833	framework
O	834	837	and
O	838	845	provide
O	846	847	a
O	848	854	sorted
O	855	858	way
O	859	861	to
O	862	868	access
O	869	872	the
O	873	881	elements
O	881	882	.

O	883	890	However
O	890	891	,
O	892	894	in
O	895	897	my
O	898	911	understanding
O	912	917	there
O	918	920	is
O	921	923	no
O	924	934	SortedList
O	935	937	in
O	938	942	Java
O	942	943	.

O	944	947	You
O	948	951	can
O	952	955	use
O	956	960	java
O	960	961	.
O	961	965	util
O	965	966	.
B-api_mention	966	977	Collections
I-api_mention	977	978	.
I-api_mention	978	982	sort
I-api_mention	982	983	(
I-api_mention	983	987	args
I-api_mention	987	988	)
O	989	991	to
O	992	996	sort
O	997	998	a
O	999	1003	list
O	1003	1004	.

O	1005	1008	Any
O	1009	1013	idea
O	1014	1017	why
O	1018	1020	it
O	1021	1023	is
O	1024	1032	designed
O	1033	1037	like
O	1038	1042	that
O	1042	1043	?

O	1045	1053	Question
O	1053	1054	-
O	1054	1061	9297899

O	1062	1064	We
O	1065	1068	can
O	1069	1078	determine
O	1079	1082	the
O	1083	1089	length
O	1090	1092	of
O	1093	1095	an
B-api_mention	1096	1105	ArrayList
I-api_mention	1105	1106	<
I-api_mention	1106	1107	T
I-api_mention	1107	1108	>
O	1109	1114	using
O	1115	1118	its
O	1119	1125	public
O	1126	1132	method
B-api_mention	1133	1137	size
I-api_mention	1137	1138	(
I-api_mention	1138	1142	args
I-api_mention	1142	1143	)
O	1144	1145	,
O	1146	1150	like
O	1151	1152	#
O	1152	1155	pre
O	1156	1165	Similarly
O	1166	1168	we
O	1169	1172	can
O	1173	1182	determine
O	1183	1186	the
O	1187	1193	length
O	1194	1196	of
O	1197	1199	an
O	1200	1205	Array
O	1206	1212	object
O	1213	1218	using
O	1219	1222	the
O	1223	1229	length
O	1230	1238	property
O	1239	1240	#
O	1240	1243	pre
O	1244	1251	Whereas
O	1252	1255	the
B-api_mention	1256	1260	size
I-api_mention	1260	1261	(
I-api_mention	1261	1265	args
I-api_mention	1265	1266	)
O	1267	1273	method
O	1274	1276	of
B-api_mention	1277	1286	ArrayList
O	1287	1289	is
O	1290	1297	defined
O	1298	1304	inside
O	1305	1308	the
B-api_mention	1309	1318	ArrayList
O	1319	1324	class
O	1324	1325	,
O	1326	1331	where
O	1332	1334	is
O	1335	1339	this
O	1340	1346	length
O	1347	1355	property
O	1356	1358	of
O	1359	1364	Array
O	1365	1372	defined
O	1372	1373	?

O	1375	1383	Question
O	1383	1384	-
O	1384	1391	9324933

O	1392	1393	I
O	1394	1400	looked
O	1401	1403	at
O	1404	1407	the
O	1408	1415	default
B-api_mention	1416	1419	Zip
O	1420	1427	library
O	1428	1432	that
O	1433	1438	comes
O	1439	1443	with
O	1444	1447	the
O	1448	1451	JDK
O	1452	1455	and
O	1456	1459	the
O	1460	1466	Apache
O	1467	1478	compression
O	1479	1483	libs
O	1484	1487	and
O	1488	1489	I
O	1490	1492	am
O	1493	1500	unhappy
O	1501	1505	with
O	1506	1510	them
O	1511	1514	for
O	1515	1516	3
O	1517	1524	reasons
O	1524	1525	:
O	1526	1527	#
O	1527	1529	li
O	1530	1534	They
O	1535	1538	are
O	1539	1546	bloated
O	1547	1550	and
O	1551	1555	have
O	1556	1559	bad
O	1560	1563	API
O	1564	1570	design
O	1570	1571	.

O	1572	1573	I
O	1574	1578	have
O	1579	1581	to
O	1582	1587	write
O	1588	1590	50
O	1591	1596	lines
O	1597	1599	of
O	1600	1606	boiler
O	1607	1612	plate
O	1613	1617	byte
O	1618	1623	array
O	1624	1630	output
O	1630	1631	,
O	1632	1635	zip
O	1636	1641	input
O	1641	1642	,
O	1643	1647	file
O	1648	1651	out
O	1652	1659	streams
O	1660	1663	and
O	1664	1669	close
O	1670	1678	relevant
O	1679	1686	streams
O	1687	1690	and
O	1691	1696	catch
O	1697	1707	exceptions
O	1708	1711	and
O	1712	1716	move
O	1717	1721	byte
O	1722	1729	buffers
O	1730	1732	on
O	1733	1735	my
O	1736	1739	own
O	1740	1741	?

O	1742	1745	Why
O	1746	1749	can
O	1749	1750	'
O	1750	1751	t
O	1752	1753	I
O	1754	1758	have
O	1759	1760	a
O	1761	1767	simple
O	1768	1771	API
O	1772	1776	that
O	1777	1782	looks
O	1783	1787	like
O	1788	1792	this
B-api_mention	1793	1799	Zipper
I-api_mention	1799	1800	.
I-api_mention	1800	1805	unzip
I-api_mention	1805	1806	(
I-api_mention	1806	1810	args
I-api_mention	1810	1811	)
O	1812	1815	and
B-api_mention	1816	1822	Zipper
I-api_mention	1822	1823	.
I-api_mention	1823	1826	zip
I-api_mention	1826	1827	(
I-api_mention	1827	1831	args
I-api_mention	1831	1832	)
O	1833	1837	that
O	1838	1842	just
O	1843	1848	works
O	1848	1849	?

O	1850	1851	#
O	1851	1853	li
O	1854	1856	It
O	1857	1862	seems
O	1863	1870	zipping
O	1871	1880	unzipping
O	1881	1889	destroys
O	1890	1894	file
O	1895	1899	meta
O	1899	1900	-
O	1900	1904	data
O	1905	1908	and
O	1909	1917	password
O	1918	1926	handling
O	1927	1929	is
O	1930	1936	broken
O	1936	1937	.

O	1938	1939	#
O	1939	1941	li
O	1942	1946	Also
O	1946	1947	,
O	1948	1951	all
O	1952	1955	the
O	1956	1965	libraries
O	1966	1967	I
O	1968	1973	tried
O	1974	1978	were
O	1979	1980	2
O	1980	1981	-
O	1981	1983	3x
O	1984	1988	slow
O	1989	1997	compared
O	1998	2000	to
O	2001	2004	the
O	2005	2012	command
O	2013	2017	line
O	2018	2021	zip
O	2022	2027	tools
O	2028	2029	I
O	2030	2033	get
O	2034	2038	with
O	2039	2043	UNIX
O	2043	2044	?

O	2045	2048	For
O	2049	2051	me
O	2052	2053	(
O	2053	2054	2
O	2054	2055	)
O	2056	2059	and
O	2060	2061	(
O	2061	2062	3
O	2062	2063	)
O	2064	2067	are
O	2068	2073	minor
O	2074	2080	points
O	2081	2084	but
O	2085	2086	I
O	2087	2093	really
O	2094	2098	want
O	2099	2100	a
O	2101	2105	good
O	2106	2112	tested
O	2113	2120	library
O	2121	2125	with
O	2126	2127	a
O	2128	2131	one
O	2131	2132	-
O	2132	2136	line
O	2137	2146	interface
O	2146	2147	.

O	2149	2157	Question
O	2157	2158	-
O	2158	2165	9481865

O	2166	2167	I
O	2168	2170	am
O	2171	2177	trying
O	2178	2180	to
O	2181	2188	develop
O	2189	2190	a
O	2191	2197	system
O	2198	2203	where
O	2204	2209	there
O	2210	2213	are
O	2214	2223	different
O	2224	2229	nodes
O	2230	2234	that
O	2235	2238	are
O	2239	2242	run
O	2243	2245	on
O	2246	2255	different
O	2256	2262	system
O	2263	2265	or
O	2266	2268	on
O	2269	2278	different
O	2279	2284	ports
O	2285	2287	on
O	2288	2291	the
O	2292	2296	same
O	2297	2303	system
O	2303	2304	.

O	2305	2308	Now
O	2309	2312	all
O	2313	2316	the
O	2317	2322	nodes
O	2323	2329	create
O	2330	2331	a
B-api_mention	2332	2338	Socket
O	2339	2343	with
O	2344	2345	a
O	2346	2352	target
O	2353	2355	IP
O	2356	2358	as
O	2359	2362	the
O	2363	2365	IP
O	2366	2368	of
O	2369	2370	a
O	2371	2378	special
O	2379	2383	node
O	2384	2389	known
O	2390	2392	as
O	2393	2394	a
O	2395	2408	bootstrapping
O	2409	2413	node
O	2413	2414	.

O	2415	2418	The
O	2419	2424	nodes
O	2425	2429	then
O	2430	2436	create
O	2437	2442	their
O	2443	2446	own
B-api_mention	2447	2459	ServerSocket
O	2460	2463	and
O	2464	2469	start
O	2470	2479	listening
O	2480	2483	for
O	2484	2495	connections
O	2495	2496	.

O	2497	2500	The
O	2501	2514	bootstrapping
O	2515	2519	node
O	2520	2529	maintains
O	2530	2531	a
O	2532	2536	list
O	2537	2539	of
O	2540	2545	Nodes
O	2546	2549	and
O	2550	2557	returns
O	2558	2562	them
O	2563	2565	on
O	2566	2571	being
O	2572	2578	quired
O	2578	2579	.

O	2580	2583	Now
O	2584	2588	what
O	2589	2590	I
O	2591	2595	need
O	2596	2598	is
O	2599	2602	the
O	2603	2607	node
O	2608	2612	must
O	2613	2621	register
O	2622	2625	its
O	2626	2628	IP
O	2629	2631	to
O	2632	2635	the
O	2636	2649	bootstrapping
O	2650	2654	node
O	2654	2655	.

O	2656	2657	I
O	2658	2663	tried
O	2664	2669	using
B-api_mention	2670	2673	cli
I-api_mention	2673	2674	.
I-api_mention	2674	2688	getInetAddress
I-api_mention	2688	2689	(
I-api_mention	2689	2693	args
I-api_mention	2693	2694	)
O	2695	2699	once
O	2700	2703	the
O	2704	2710	client
O	2711	2719	connects
O	2720	2722	to
O	2723	2726	the
B-api_mention	2727	2739	ServerSocket
O	2740	2742	of
O	2743	2756	bootstrapping
O	2757	2761	node
O	2762	2765	but
O	2766	2770	that
O	2771	2775	didn
O	2775	2776	'
O	2776	2777	t
O	2778	2782	work
O	2782	2783	.

O	2784	2785	#
O	2785	2787	li
O	2788	2789	I
O	2790	2794	need
O	2795	2798	the
O	2799	2805	client
O	2806	2808	to
O	2809	2817	register
O	2818	2821	its
O	2822	2825	PPP
O	2826	2828	IP
O	2829	2831	if
O	2832	2841	available
O	2841	2842	;
O	2843	2844	#
O	2844	2846	li
O	2847	2856	Otherwise
O	2857	2860	the
O	2861	2864	LAN
O	2865	2867	IP
O	2868	2870	if
O	2871	2880	available
O	2880	2881	;
O	2882	2883	#
O	2883	2885	li
O	2886	2895	Otherwise
O	2896	2898	it
O	2899	2903	must
O	2904	2912	register
O	2913	2916	127
O	2916	2917	.
O	2917	2918	0
O	2918	2919	.
O	2919	2920	0
O	2920	2921	.
O	2921	2922	1
O	2923	2931	assuming
O	2932	2935	its
O	2936	2939	the
O	2940	2944	same
O	2945	2953	computer
O	2953	2954	.

O	2955	2961	Please
O	2962	2966	help
O	2967	2969	me
O	2970	2974	with
O	2975	2979	this
O	2979	2980	.

O	2981	2985	EDIT
O	2986	2991	using
O	2992	2995	the
O	2996	3000	code
O	3000	3001	:
B-api_mention	3002	3008	System
I-api_mention	3008	3009	.
I-api_mention	3009	3012	out
I-api_mention	3012	3013	.
I-api_mention	3013	3020	println
I-api_mention	3020	3021	(
I-api_mention	3021	3025	args
I-api_mention	3025	3026	)
O	3026	3027	;
O	3028	3030	or
B-api_mention	3031	3037	System
I-api_mention	3037	3038	.
I-api_mention	3038	3041	out
I-api_mention	3041	3042	.
I-api_mention	3042	3049	println
I-api_mention	3049	3050	(
I-api_mention	3050	3054	args
I-api_mention	3054	3055	)
O	3055	3056	;
O	3057	3059	My
O	3060	3063	PPP
O	3064	3074	Connection
O	3075	3077	IP
O	3078	3085	address
O	3086	3088	is
O	3088	3089	:
O	3090	3093	117
O	3093	3094	.
O	3094	3097	204
O	3097	3098	.
O	3098	3100	44
O	3100	3101	.
O	3101	3104	192
O	3105	3108	but
O	3109	3112	the
O	3113	3118	above
O	3119	3126	returns
O	3127	3129	me
O	3130	3133	192
O	3133	3134	.
O	3134	3137	168
O	3137	3138	.
O	3138	3139	1
O	3139	3140	.
O	3140	3141	2
O	3142	3147	EDIT2
O	3148	3149	I
O	3150	3152	am
O	3153	3158	using
O	3159	3162	the
O	3163	3172	following
O	3173	3177	code
O	3177	3178	:
O	3179	3180	#
O	3180	3183	pre
O	3184	3185	I
O	3186	3188	am
O	3189	3193	able
O	3194	3196	to
O	3197	3200	get
O	3201	3204	all
O	3205	3208	the
O	3209	3211	IP
O	3212	3221	addresses
O	3222	3232	associated
O	3233	3236	all
B-api_mention	3237	3253	NetworkInterface
O	3254	3255	s
O	3255	3256	,
O	3257	3260	but
O	3261	3264	how
O	3265	3267	do
O	3268	3269	I
O	3270	3281	distinguish
O	3282	3286	them
O	3286	3287	?
O	3287	3288	?

O	3289	3293	This
O	3294	3296	is
O	3297	3300	the
O	3301	3307	output
O	3308	3309	I
O	3310	3312	am
O	3313	3320	getting
O	3320	3321	:
O	3322	3323	#
O	3323	3326	pre

O	3328	3336	Question
O	3336	3337	-
O	3337	3344	9749746

O	3345	3348	How
O	3349	3351	do
B-api_mention	3352	3358	atomic
O	3359	3360	/
O	3361	3369	volatile
O	3370	3371	/
O	3372	3384	synchronized
O	3385	3389	work
O	3390	3400	internally
O	3400	3401	?

O	3402	3406	What
O	3407	3409	is
O	3410	3413	the
O	3414	3424	difference
O	3425	3432	between
O	3433	3436	the
O	3437	3446	following
O	3447	3451	code
O	3452	3458	blocks
O	3458	3459	?

O	3460	3464	Code
O	3465	3466	1
O	3467	3468	#
O	3468	3471	pre
O	3472	3476	Code
O	3477	3478	2
O	3479	3480	#
O	3480	3483	pre
O	3484	3488	Code
O	3489	3490	3
O	3491	3492	#
O	3492	3495	pre
O	3496	3500	Does
O	3501	3509	volatile
O	3510	3514	work
O	3515	3517	in
O	3518	3521	the
O	3522	3531	following
O	3532	3535	way
O	3535	3536	?

O	3537	3539	Is
O	3540	3541	#
O	3541	3544	pre
O	3545	3555	equivalent
O	3556	3558	to
O	3559	3560	#
O	3560	3563	pre
O	3564	3565	I
O	3566	3571	think
O	3572	3576	that
O	3577	3580	two
O	3581	3588	threads
O	3589	3595	cannot
O	3596	3601	enter
O	3602	3603	a
O	3604	3616	synchronized
O	3617	3622	block
O	3623	3625	at
O	3626	3629	the
O	3630	3634	same
O	3635	3639	time
O	3639	3640	.
O	3640	3641	.
O	3641	3642	.

O	3643	3645	am
O	3646	3647	I
O	3648	3653	right
O	3653	3654	?

O	3655	3657	If
O	3658	3662	this
O	3663	3665	is
O	3666	3670	true
O	3671	3675	then
O	3676	3679	how
O	3680	3684	does
B-api_mention	3685	3691	atomic
I-api_mention	3691	3692	.
I-api_mention	3692	3707	incrementAndGet
I-api_mention	3707	3708	(
I-api_mention	3708	3712	args
I-api_mention	3712	3713	)
O	3714	3718	work
O	3719	3726	without
O	3727	3739	synchronized
O	3740	3741	?

O	3742	3745	And
O	3746	3748	is
O	3749	3751	it
O	3752	3758	thread
O	3758	3759	-
O	3759	3763	safe
O	3763	3764	?

O	3765	3768	And
O	3769	3773	what
O	3774	3776	is
O	3777	3780	the
O	3781	3791	difference
O	3792	3799	between
O	3800	3808	internal
O	3809	3816	reading
O	3817	3820	and
O	3821	3828	writing
O	3829	3831	to
O	3832	3840	volatile
O	3841	3850	variables
O	3851	3852	/
B-api_mention	3853	3859	atomic
O	3860	3869	variables
O	3869	3870	?

O	3871	3872	I
O	3873	3877	read
O	3878	3880	in
O	3881	3885	some
O	3886	3893	article
O	3894	3898	that
O	3899	3902	the
O	3903	3909	thread
O	3910	3913	has
O	3914	3915	a
O	3916	3921	local
O	3922	3926	copy
O	3927	3929	of
O	3930	3933	the
O	3934	3943	variables
O	3944	3945	-
O	3946	3950	what
O	3951	3953	is
O	3954	3958	that
O	3958	3959	?

O	3961	3969	Question
O	3969	3970	-
O	3970	3978	10066590

O	3979	3983	With
O	3984	3991	Mockito
O	3991	3992	,
O	3993	3994	I
O	3995	3999	want
O	4000	4002	to
B-api_mention	4003	4009	verify
I-api_mention	4009	4010	(
I-api_mention	4010	4014	args
I-api_mention	4014	4015	)
O	4016	4017	a
O	4018	4024	method
O	4025	4029	call
O	4030	4034	with
O	4035	4039	byte
O	4039	4040	[
O	4040	4041	]
O	4042	4044	in
O	4045	4048	its
O	4049	4057	argument
O	4058	4062	list
O	4062	4063	,
O	4064	4067	but
O	4068	4069	I
O	4070	4074	didn
O	4074	4075	'
O	4075	4076	t
O	4077	4081	find
O	4082	4085	how
O	4086	4088	to
O	4089	4094	write
O	4095	4099	this
O	4099	4100	.

O	4101	4109	myMethod
O	4109	4110	(
O	4110	4114	args
O	4114	4115	)
O	4116	4117	I
O	4118	4122	just
O	4123	4127	want
O	4128	4137	something
O	4138	4142	like
O	4143	4155	anyByteArray
O	4155	4156	(
O	4156	4160	args
O	4160	4161	)
O	4162	4163	,
O	4164	4167	how
O	4168	4170	to
O	4171	4173	do
O	4174	4178	that
O	4179	4183	with
O	4184	4191	Mockito
O	4192	4193	?

O	4195	4203	Question
O	4203	4204	-
O	4204	4211	8894258

O	4212	4214	In
O	4215	4219	Java
O	4219	4220	,
O	4221	4225	what
O	4226	4231	would
O	4232	4235	the
O	4236	4243	fastest
O	4244	4247	way
O	4248	4250	to
O	4251	4258	iterate
O	4259	4263	over
O	4264	4267	all
O	4268	4271	the
O	4272	4277	chars
O	4278	4280	in
O	4281	4282	a
B-api_mention	4283	4289	String
O	4289	4290	,
O	4291	4295	this
O	4295	4296	:
O	4297	4298	#
O	4298	4301	pre
O	4302	4304	Or
O	4305	4309	this
O	4309	4310	:
O	4311	4312	#
O	4312	4315	pre
O	4316	4320	EDIT
O	4321	4322	:
O	4323	4327	What
O	4328	4329	I
O	4329	4330	'
O	4330	4331	d
O	4332	4336	like
O	4337	4339	to
O	4340	4344	know
O	4345	4347	is
O	4348	4350	if
O	4351	4354	the
O	4355	4359	cost
O	4360	4362	of
O	4363	4373	repeatedly
O	4374	4381	calling
O	4382	4385	the
B-api_mention	4386	4392	charAt
O	4393	4399	method
O	4400	4406	during
O	4407	4408	a
O	4409	4413	long
O	4414	4423	iteration
O	4424	4428	ends
O	4429	4431	up
O	4432	4437	being
O	4438	4444	either
O	4445	4449	less
O	4450	4454	than
O	4455	4457	or
O	4458	4465	greater
O	4466	4470	than
O	4471	4474	the
O	4475	4479	cost
O	4480	4482	of
O	4483	4493	performing
O	4494	4495	a
O	4496	4502	single
O	4503	4507	call
O	4508	4510	to
B-api_mention	4511	4522	toCharArray
O	4523	4525	at
O	4526	4529	the
O	4530	4539	beginning
O	4540	4543	and
O	4544	4548	then
O	4549	4557	directly
O	4558	4567	accessing
O	4568	4571	the
O	4572	4577	array
O	4578	4584	during
O	4585	4588	the
O	4589	4598	iteration
O	4598	4599	.

O	4600	4602	It
O	4602	4603	'
O	4603	4604	d
O	4605	4607	be
O	4608	4613	great
O	4614	4616	if
O	4617	4624	someone
O	4625	4630	could
O	4631	4638	provide
O	4639	4640	a
O	4641	4647	robust
O	4648	4657	benchmark
O	4658	4661	for
O	4662	4671	different
O	4672	4678	string
O	4679	4686	lengths
O	4686	4687	,
O	4688	4694	having
O	4695	4697	in
O	4698	4702	mind
O	4703	4706	JIT
O	4707	4711	warm
O	4711	4712	-
O	4712	4714	up
O	4715	4719	time
O	4719	4720	,
O	4721	4724	JVM
O	4725	4730	start
O	4730	4731	-
O	4731	4733	up
O	4734	4738	time
O	4738	4739	,
O	4740	4743	etc
O	4743	4744	.
O	4745	4748	and
O	4749	4752	not
O	4753	4757	just
O	4758	4761	the
O	4762	4772	difference
O	4773	4780	between
O	4781	4784	two
O	4785	4790	calls
O	4791	4793	to
B-api_mention	4794	4800	System
I-api_mention	4800	4801	.
I-api_mention	4801	4818	currentTimeMillis
I-api_mention	4818	4819	(
I-api_mention	4819	4823	args
I-api_mention	4823	4824	)
O	4825	4826	.

O	4828	4836	Question
O	4836	4837	-
O	4837	4845	10827872

O	4846	4850	What
O	4850	4851	'
O	4851	4852	s
O	4853	4856	the
O	4857	4867	difference
O	4868	4875	between
B-api_mention	4876	4880	java
I-api_mention	4880	4881	.
I-api_mention	4881	4885	lang
I-api_mention	4885	4886	.
I-api_mention	4886	4892	String
O	4893	4894	'
O	4894	4895	s
B-api_mention	4896	4903	replace
I-api_mention	4903	4904	(
I-api_mention	4904	4908	args
I-api_mention	4908	4909	)
O	4910	4913	and
B-api_mention	4914	4924	replaceAll
I-api_mention	4924	4925	(
I-api_mention	4925	4929	args
I-api_mention	4929	4930	)
O	4931	4938	methods
O	4938	4939	,
O	4940	4945	other
O	4946	4950	than
O	4951	4956	later
O	4957	4961	uses
O	4962	4967	regex
O	4967	4968	?

O	4969	4972	For
O	4973	4979	simple
O	4980	4993	substitutions
O	4994	4998	like
O	4998	4999	,
O	5000	5007	replace
O	5008	5009	.
O	5010	5014	with
O	5015	5016	/
O	5017	5018	,
O	5019	5021	is
O	5022	5027	there
O	5028	5031	any
O	5032	5042	difference
O	5042	5043	?

O	5045	5053	Question
O	5053	5054	-
O	5054	5061	9510125

O	5062	5067	Swing
O	5068	5078	components
O	5079	5083	have
O	5084	5092	multiple
O	5093	5100	methods
O	5101	5108	related
O	5109	5111	to
O	5112	5119	updates
O	5120	5122	of
O	5123	5129	screen
O	5130	5136	layout
O	5136	5137	,
O	5138	5140	in
O	5141	5151	particular
O	5151	5152	:
O	5153	5154	#
O	5154	5156	li
B-api_mention	5157	5165	validate
I-api_mention	5165	5166	(
I-api_mention	5166	5167	)
O	5168	5169	#
O	5169	5171	li
B-api_mention	5172	5182	invalidate
I-api_mention	5182	5183	(
I-api_mention	5183	5184	)
O	5185	5186	#
O	5186	5188	li
B-api_mention	5189	5199	revalidate
I-api_mention	5199	5200	(
I-api_mention	5200	5201	)
O	5202	5205	The
O	5206	5210	Java
O	5211	5224	documentation
O	5225	5232	defines
O	5233	5238	these
O	5239	5247	somewhat
O	5248	5252	from
O	5253	5254	a
O	5255	5264	technical
O	5265	5276	perspective
O	5276	5277	,
O	5278	5281	but
O	5282	5284	it
O	5284	5285	'
O	5285	5286	s
O	5287	5290	not
O	5291	5303	particularly
O	5304	5309	clear
O	5310	5313	how
O	5314	5318	they
O	5319	5322	are
O	5323	5328	meant
O	5329	5331	to
O	5332	5334	be
O	5335	5339	used
O	5339	5340	.

O	5341	5345	What
O	5346	5348	is
O	5349	5352	the
O	5353	5363	difference
O	5364	5371	between
O	5372	5377	these
O	5377	5378	,
O	5379	5382	and
O	5383	5385	in
O	5386	5390	what
O	5391	5404	circumstances
O	5405	5411	should
O	5412	5415	you
O	5416	5419	use
O	5420	5423	one
O	5424	5430	rather
O	5431	5435	than
O	5436	5439	the
O	5440	5446	others
O	5446	5447	?

O	5449	5457	Question
O	5457	5458	-
O	5458	5466	10904911

O	5467	5468	I
O	5469	5471	am
O	5472	5477	using
O	5478	5484	trying
O	5485	5487	to
O	5488	5491	use
O	5492	5495	the
B-api_mention	5496	5504	toString
I-api_mention	5504	5505	(
I-api_mention	5505	5509	args
I-api_mention	5509	5510	)
O	5511	5517	method
O	5517	5518	,
O	5519	5522	but
O	5523	5524	I
O	5525	5530	think
O	5531	5532	I
O	5533	5535	am
O	5536	5541	doing
O	5542	5544	it
O	5545	5550	wrong
O	5550	5551	:
O	5552	5553	#
O	5553	5554	a
O	5555	5557	My
O	5558	5562	code
O	5562	5563	:
O	5564	5565	#
O	5565	5568	pre
O	5569	5572	The
O	5573	5579	output
O	5580	5582	is
O	5582	5583	:
O	5584	5585	[
O	5585	5586	I
O	5586	5587	@
O	5587	5595	23fc4bec
O	5596	5600	Also
O	5601	5602	I
O	5603	5608	tried
O	5609	5617	printing
O	5618	5622	like
O	5623	5627	this
O	5627	5628	,
O	5629	5632	but
O	5632	5633	:
O	5634	5635	#
O	5635	5638	pre
O	5639	5640	I
O	5641	5645	took
O	5646	5650	this
O	5651	5655	code
O	5656	5659	out
O	5660	5662	of
O	5663	5669	bigger
O	5670	5673	and
O	5674	5678	more
O	5679	5686	complex
O	5687	5691	code
O	5691	5692	,
O	5693	5696	but
O	5697	5698	I
O	5699	5702	can
O	5703	5706	add
O	5707	5709	it
O	5710	5712	if
O	5713	5719	needed
O	5719	5720	.

O	5721	5724	But
O	5725	5729	this
O	5730	5736	should
O	5737	5741	give
O	5742	5749	general
O	5750	5761	information
O	5761	5762	.

O	5763	5764	I
O	5765	5767	am
O	5768	5775	looking
O	5776	5779	for
O	5780	5786	output
O	5786	5787	,
O	5788	5792	like
O	5793	5795	in
O	5796	5802	Oracle
O	5802	5803	'
O	5803	5804	s
O	5805	5818	documentation
O	5818	5819	:
O	5820	5821	#
O	5821	5831	blockquote

O	5833	5841	Question
O	5841	5842	-
O	5842	5850	10977992

O	5851	5852	#
O	5852	5855	pre
O	5856	5858	We
O	5859	5862	can
O	5863	5866	use
B-api_mention	5867	5875	Iterator
O	5876	5878	to
O	5879	5887	traverse
O	5888	5889	a
B-api_mention	5890	5893	Set
O	5894	5896	or
O	5897	5898	a
B-api_mention	5899	5903	List
O	5904	5906	or
O	5907	5908	a
B-api_mention	5909	5912	Map
O	5913	5914	.

O	5915	5918	But
B-api_mention	5919	5931	ListIterator
O	5932	5935	can
O	5936	5940	only
O	5941	5943	be
O	5944	5948	used
O	5949	5951	to
O	5952	5960	traverse
O	5961	5962	a
B-api_mention	5963	5967	List
O	5968	5969	,
O	5970	5972	it
O	5973	5976	can
O	5976	5977	'
O	5977	5978	t
O	5979	5987	traverse
O	5988	5989	a
B-api_mention	5990	5993	Set
O	5994	5995	.

O	5996	5999	Why
O	5999	6000	?

O	6001	6002	I
O	6003	6007	know
O	6008	6012	that
O	6013	6016	the
O	6017	6021	main
O	6022	6032	difference
O	6033	6035	is
O	6036	6040	that
O	6041	6045	with
B-api_mention	6046	6054	iterator
O	6055	6057	we
O	6058	6061	can
O	6062	6068	travel
O	6069	6071	in
O	6072	6076	only
O	6077	6080	one
O	6081	6090	direction
O	6091	6094	but
O	6095	6099	with
B-api_mention	6100	6112	ListIterator
O	6113	6115	we
O	6116	6119	can
O	6120	6126	travel
O	6127	6131	both
O	6132	6142	directions
O	6142	6143	.

O	6144	6147	Are
O	6148	6153	there
O	6154	6157	any
O	6158	6163	other
O	6164	6175	differences
O	6175	6176	?

O	6177	6180	And
O	6181	6184	any
O	6185	6195	advantages
O	6196	6198	of
B-api_mention	6199	6211	ListIterator
O	6212	6216	over
B-api_mention	6217	6225	Iterator
O	6226	6227	?

O	6229	6237	Question
O	6237	6238	-
O	6238	6245	8881291
O	6245	6246	,
O	6247	6253	answer
O	6253	6254	-
O	6254	6262	14060804

O	6263	6264	#
O	6264	6266	li
O	6267	6274	Strings
O	6275	6278	are
O	6279	6288	immutable
O	6289	6291	in
O	6292	6296	Java
O	6297	6299	if
O	6300	6303	you
O	6304	6309	store
O	6310	6318	password
O	6319	6321	as
O	6322	6327	plain
O	6328	6332	text
O	6333	6335	it
O	6336	6340	will
O	6341	6343	be
O	6344	6353	available
O	6354	6356	in
O	6357	6363	memory
O	6364	6369	until
O	6370	6377	Garbage
O	6378	6387	collector
O	6388	6394	clears
O	6395	6397	it
O	6398	6401	and
O	6402	6407	since
O	6408	6415	Strings
O	6416	6419	are
O	6420	6424	used
O	6425	6427	in
B-api_mention	6428	6434	String
O	6435	6439	pool
O	6440	6443	for
O	6444	6446	re
O	6446	6447	-
O	6447	6456	usability
O	6457	6462	there
O	6463	6465	is
O	6466	6472	pretty
O	6473	6477	high
O	6478	6484	chance
O	6485	6489	that
O	6490	6492	it
O	6493	6497	will
O	6498	6500	be
O	6501	6507	remain
O	6508	6510	in
O	6511	6517	memory
O	6518	6521	for
O	6522	6526	long
O	6527	6535	duration
O	6535	6536	,
O	6537	6542	which
O	6543	6547	pose
O	6548	6549	a
O	6550	6558	security
O	6559	6565	threat
O	6565	6566	.

O	6567	6572	Since
O	6573	6576	any
O	6577	6580	one
O	6581	6584	who
O	6585	6588	has
O	6589	6595	access
O	6596	6598	to
O	6599	6605	memory
O	6606	6610	dump
O	6611	6614	can
O	6615	6619	find
O	6620	6623	the
O	6624	6632	password
O	6633	6635	in
O	6636	6641	clear
O	6642	6646	text
O	6647	6648	#
O	6648	6650	li
O	6651	6655	Java
O	6656	6670	recommendation
O	6671	6676	using
B-api_mention	6677	6688	getPassword
I-api_mention	6688	6689	(
I-api_mention	6689	6693	args
I-api_mention	6693	6694	)
O	6695	6701	method
O	6702	6704	of
O	6705	6719	JPasswordField
O	6720	6725	which
O	6726	6733	returns
O	6734	6735	a
O	6736	6740	char
O	6740	6741	[
O	6741	6742	]
O	6743	6746	and
O	6747	6757	deprecated
B-api_mention	6758	6765	getText
I-api_mention	6765	6766	(
I-api_mention	6766	6770	args
I-api_mention	6770	6771	)
O	6772	6778	method
O	6779	6784	which
O	6785	6792	returns
O	6793	6801	password
O	6802	6804	in
O	6805	6810	clear
O	6811	6815	text
O	6816	6823	stating
O	6824	6832	security
O	6833	6839	reason
O	6839	6840	.

O	6841	6842	#
O	6842	6844	li
B-api_mention	6845	6853	toString
I-api_mention	6853	6854	(
I-api_mention	6854	6855	)
O	6856	6861	there
O	6862	6864	is
O	6865	6871	always
O	6872	6873	a
O	6874	6878	risk
O	6879	6881	of
O	6882	6890	printing
O	6891	6896	plain
O	6897	6901	text
O	6902	6904	in
O	6905	6908	log
O	6909	6913	file
O	6914	6916	or
O	6917	6924	console
O	6925	6928	but
O	6929	6931	if
O	6932	6935	use
O	6936	6941	Array
O	6942	6945	you
O	6946	6949	won
O	6949	6950	'
O	6950	6951	t
O	6952	6957	print
O	6958	6966	contents
O	6967	6969	of
O	6970	6975	array
O	6976	6983	instead
O	6984	6987	its
O	6988	6994	memory
O	6995	7003	location
O	7004	7007	get
O	7008	7015	printed
O	7015	7016	.

O	7017	7018	#
O	7018	7021	pre
O	7022	7023	#
O	7023	7033	blockquote
O	7034	7039	Final
O	7040	7048	thoughts
O	7048	7049	:
O	7050	7056	Though
O	7057	7062	using
O	7063	7067	char
O	7067	7068	[
O	7068	7069	]
O	7070	7072	is
O	7073	7076	not
O	7077	7081	just
O	7082	7088	enough
O	7089	7092	you
O	7093	7097	need
O	7098	7100	to
O	7101	7106	erase
O	7107	7114	content
O	7115	7117	to
O	7118	7120	be
O	7121	7125	more
O	7126	7132	secure
O	7132	7133	.

O	7134	7135	I
O	7136	7140	also
O	7141	7148	suggest
O	7149	7156	working
O	7157	7161	with
O	7162	7166	hash
O	7166	7167	'
O	7167	7168	d
O	7169	7171	or
O	7172	7181	encrypted
O	7182	7190	password
O	7191	7198	instead
O	7199	7201	of
O	7202	7211	plaintext
O	7212	7215	and
O	7216	7224	clearing
O	7225	7227	it
O	7228	7232	from
O	7233	7239	memory
O	7240	7242	as
O	7243	7247	soon
O	7248	7250	as
O	7251	7265	authentication
O	7266	7268	is
O	7269	7278	completed
O	7278	7279	.

O	7281	7289	Question
O	7289	7290	-
O	7290	7298	10796160
O	7298	7299	,
O	7300	7306	answer
O	7306	7307	-
O	7307	7315	10796174

O	7316	7319	You
O	7320	7324	need
O	7325	7329	test
O	7329	7330	.
B-api_mention	7330	7335	split
I-api_mention	7335	7336	(
I-api_mention	7336	7340	args
I-api_mention	7340	7341	)
O	7341	7342	;
B-api_mention	7343	7348	split
O	7349	7353	uses
O	7354	7361	regular
O	7362	7372	expression
O	7373	7376	and
O	7377	7379	in
O	7380	7385	regex
O	7386	7387	|
O	7388	7390	is
O	7391	7404	metacharacter
O	7405	7417	representing
O	7418	7420	OR
O	7421	7429	operator
O	7429	7430	.

O	7431	7434	You
O	7435	7439	need
O	7440	7442	to
O	7443	7449	escape
O	7450	7454	that
O	7455	7464	character
O	7465	7470	using
O	7471	7472	\
O	7473	7474	(
O	7474	7481	written
O	7482	7484	in
B-api_mention	7485	7491	String
O	7492	7494	as
O	7495	7508	StringLiteral
O	7509	7514	since
O	7515	7516	\
O	7517	7519	is
O	7520	7524	also
O	7525	7538	metacharacter
O	7539	7541	in
O	7542	7548	String
O	7549	7557	literals
O	7558	7561	and
O	7562	7569	require
O	7570	7577	another
O	7578	7579	\
O	7580	7582	to
O	7583	7589	escape
O	7590	7592	it
O	7592	7593	)
O	7593	7594	.

O	7595	7598	You
O	7599	7602	can
O	7603	7607	also
O	7608	7611	use
O	7612	7616	test
O	7616	7617	.
B-api_mention	7617	7622	split
I-api_mention	7622	7623	(
I-api_mention	7623	7627	args
I-api_mention	7627	7628	)
O	7628	7629	;
O	7630	7633	and
O	7634	7637	let
B-api_mention	7638	7645	Pattern
I-api_mention	7645	7646	.
I-api_mention	7646	7651	quote
O	7652	7658	create
O	7659	7666	escaped
O	7667	7674	version
O	7675	7677	of
O	7678	7683	regex
O	7684	7696	representing
O	7697	7698	|
O	7699	7700	.

O	7702	7710	Question
O	7710	7711	-
O	7711	7719	10796160
O	7719	7720	,
O	7721	7727	answer
O	7727	7728	-
O	7728	7736	21025279

O	7737	7740	Use
O	7741	7747	proper
O	7748	7756	escaping
O	7756	7757	:
B-api_mention	7758	7764	string
I-api_mention	7764	7765	.
I-api_mention	7765	7770	split
I-api_mention	7770	7771	(
I-api_mention	7771	7775	args
I-api_mention	7775	7776	)
O	7777	7779	Or
O	7780	7783	the
O	7784	7790	helper
B-api_mention	7791	7797	Regexp
I-api_mention	7797	7798	.
I-api_mention	7798	7803	quote
I-api_mention	7803	7804	(
I-api_mention	7804	7808	args
I-api_mention	7808	7809	)
O	7810	7815	which
O	7816	7819	has
O	7820	7824	been
O	7825	7832	created
O	7833	7836	for
O	7837	7844	exactly
O	7845	7849	this
O	7850	7857	purpose
O	7857	7858	:
B-api_mention	7859	7865	string
I-api_mention	7865	7866	.
I-api_mention	7866	7871	split
I-api_mention	7871	7872	(
I-api_mention	7872	7876	args
I-api_mention	7876	7877	)
O	7878	7883	which
O	7884	7889	works
O	7890	7894	with
O	7895	7904	arbitrary
O	7905	7910	input
O	7911	7918	strings
O	7918	7919	.

O	7920	7924	Very
O	7925	7931	useful
O	7932	7936	when
O	7937	7940	you
O	7941	7945	need
O	7946	7948	to
O	7949	7954	quote
O	7955	7956	/
O	7957	7963	escape
O	7964	7968	user
O	7969	7974	input
O	7974	7975	.

O	7977	7985	Question
O	7985	7986	-
O	7986	7994	10786042
O	7994	7995	,
O	7996	8002	answer
O	8002	8003	-
O	8003	8011	10786112

B-api_mention	8012	8022	URLEncoder
O	8023	8029	should
O	8030	8032	be
O	8033	8036	the
O	8037	8040	way
O	8041	8043	to
O	8044	8046	go
O	8046	8047	.

O	8048	8051	You
O	8052	8056	only
O	8057	8061	need
O	8062	8064	to
O	8065	8069	keep
O	8070	8072	in
O	8073	8077	mind
O	8078	8080	to
O	8081	8087	encode
O	8088	8092	only
O	8093	8096	the
O	8097	8107	individual
O	8108	8113	query
O	8114	8120	string
O	8121	8130	parameter
O	8131	8135	name
O	8136	8139	and
O	8139	8140	/
O	8140	8142	or
O	8143	8148	value
O	8148	8149	,
O	8150	8153	not
O	8154	8157	the
O	8158	8164	entire
O	8165	8168	URL
O	8168	8169	,
O	8170	8173	for
O	8174	8178	sure
O	8179	8182	not
O	8183	8186	the
O	8187	8192	query
O	8193	8199	string
O	8200	8209	parameter
O	8210	8219	separator
O	8220	8229	character
O	8230	8231	&
O	8232	8235	nor
O	8236	8239	the
O	8240	8249	parameter
O	8250	8254	name
O	8254	8255	-
O	8255	8260	value
O	8261	8270	separator
O	8271	8280	character
O	8281	8282	=
O	8283	8284	.

O	8285	8286	#
O	8286	8289	pre
O	8290	8294	Note
O	8295	8299	that
O	8300	8306	spaces
O	8307	8309	in
O	8310	8315	query
O	8316	8326	parameters
O	8327	8330	are
O	8331	8342	represented
O	8343	8345	by
O	8346	8347	+
O	8348	8349	,
O	8350	8353	not
O	8354	8355	%
O	8355	8357	20
O	8358	8359	,
O	8360	8365	which
O	8366	8368	is
O	8369	8381	legitimately
O	8382	8387	valid
O	8387	8388	.

O	8389	8392	The
O	8393	8394	%
O	8394	8396	20
O	8397	8399	is
O	8400	8407	usually
O	8408	8410	to
O	8411	8413	be
O	8414	8418	used
O	8419	8421	to
O	8422	8431	represent
O	8432	8438	spaces
O	8439	8441	in
O	8442	8445	URI
O	8446	8452	itself
O	8453	8454	(
O	8454	8457	the
O	8458	8462	part
O	8463	8469	before
O	8470	8473	the
O	8474	8477	URI
O	8477	8478	-
O	8478	8483	query
O	8484	8490	string
O	8491	8500	separator
O	8501	8510	character
O	8511	8512	?
O	8513	8514	)
O	8514	8515	,
O	8516	8519	not
O	8520	8522	in
O	8523	8528	query
O	8529	8535	string
O	8536	8537	(
O	8537	8540	the
O	8541	8545	part
O	8546	8551	after
O	8552	8553	?
O	8554	8555	)
O	8555	8556	.

O	8557	8561	Also
O	8562	8566	note
O	8567	8571	that
O	8572	8577	there
O	8578	8581	are
O	8582	8585	two
B-api_mention	8586	8592	encode
I-api_mention	8592	8593	(
I-api_mention	8593	8597	args
I-api_mention	8597	8598	)
O	8599	8606	methods
O	8606	8607	.

O	8608	8611	One
O	8612	8619	without
O	8620	8627	charset
O	8628	8636	argument
O	8637	8640	and
O	8641	8648	another
O	8649	8653	with
O	8653	8654	.

O	8655	8658	The
O	8659	8662	one
O	8663	8670	without
O	8671	8678	charset
O	8679	8687	argument
O	8688	8690	is
O	8691	8701	deprecated
O	8701	8702	.

O	8703	8708	Never
O	8709	8712	use
O	8713	8715	it
O	8716	8719	and
O	8720	8726	always
O	8727	8734	specify
O	8735	8738	the
O	8739	8746	charset
O	8747	8755	argument
O	8755	8756	.

O	8757	8760	The
O	8761	8768	javadoc
O	8769	8773	even
O	8774	8784	explicitly
O	8785	8795	recommends
O	8796	8798	to
O	8799	8802	use
O	8803	8806	the
O	8807	8810	UTF
O	8810	8811	-
O	8811	8812	8
O	8813	8821	encoding
O	8821	8822	,
O	8823	8825	as
O	8826	8834	mandated
O	8835	8837	by
O	8838	8845	RFC3986
O	8846	8849	and
O	8850	8853	W3C
O	8854	8855	.

O	8856	8857	#
O	8857	8867	blockquote
O	8868	8871	See
O	8872	8876	also
O	8876	8877	:
O	8878	8879	#
O	8879	8881	li
O	8882	8886	What
O	8887	8892	every
O	8893	8896	web
O	8897	8906	developer
O	8907	8911	must
O	8912	8916	know
O	8917	8922	about
O	8923	8926	URL
O	8927	8935	encoding

O	8937	8945	Question
O	8945	8946	-
O	8946	8954	10786042
O	8954	8955	,
O	8956	8962	answer
O	8962	8963	-
O	8963	8971	16226168

O	8972	8973	I
O	8974	8979	would
O	8980	8983	not
O	8984	8987	use
B-api_mention	8988	8998	URLEncoder
O	8999	9000	.

O	9001	9008	Besides
O	9009	9014	being
O	9015	9026	incorrectly
O	9027	9032	named
O	9033	9034	(
B-api_mention	9035	9045	URLEncoder
O	9046	9049	has
O	9050	9057	nothing
O	9058	9060	to
O	9061	9063	do
O	9064	9068	with
O	9069	9073	URLs
O	9073	9074	)
O	9074	9075	,
O	9076	9087	inefficient
O	9088	9089	(
O	9089	9091	it
O	9092	9096	uses
O	9097	9098	a
B-api_mention	9099	9111	StringBuffer
O	9112	9119	instead
O	9120	9122	of
B-api_mention	9123	9130	Builder
O	9131	9134	and
O	9135	9139	does
O	9140	9141	a
O	9142	9148	couple
O	9149	9151	of
O	9152	9157	other
O	9158	9164	things
O	9165	9169	that
O	9170	9173	are
O	9174	9178	slow
O	9178	9179	)
O	9180	9183	Its
O	9184	9188	also
O	9189	9192	way
O	9193	9196	too
O	9197	9201	easy
O	9202	9204	to
O	9205	9210	screw
O	9211	9213	it
O	9214	9216	up
O	9216	9217	.

O	9218	9225	Instead
O	9226	9227	I
O	9228	9233	would
O	9234	9237	use
B-api_mention	9238	9248	URIBuilder
O	9249	9251	or
O	9252	9258	Spring
O	9258	9259	'
O	9259	9260	s
B-api_mention	9261	9269	URIUtils
O	9270	9272	or
O	9273	9280	Commons
O	9281	9287	Apache
B-api_mention	9288	9298	HttpClient
O	9299	9300	.

O	9301	9304	The
O	9305	9311	reason
O	9312	9317	being
O	9318	9321	you
O	9322	9326	have
O	9327	9329	to
O	9330	9336	escape
O	9337	9340	the
O	9341	9346	query
O	9347	9357	parameters
O	9358	9362	name
O	9363	9364	(
O	9364	9366	ie
O	9367	9373	BalusC
O	9373	9374	'
O	9374	9375	s
O	9376	9382	answer
O	9383	9384	q
O	9385	9386	)
O	9387	9398	differently
O	9399	9403	than
O	9404	9407	the
O	9408	9417	parameter
O	9418	9423	value
O	9423	9424	.

O	9425	9428	The
O	9429	9433	only
O	9434	9442	downside
O	9443	9445	to
O	9446	9449	the
O	9450	9455	above
O	9456	9457	(
O	9457	9461	that
O	9462	9463	I
O	9464	9469	found
O	9470	9473	out
O	9474	9483	painfully
O	9483	9484	)
O	9485	9487	is
O	9488	9492	that
O	9493	9496	URL
O	9496	9497	'
O	9497	9498	s
O	9499	9502	are
O	9503	9506	not
O	9507	9508	a
O	9509	9513	true
O	9514	9520	subset
O	9521	9523	of
O	9524	9527	URI
O	9527	9528	'
O	9528	9529	s
O	9530	9531	.

O	9532	9537	Since
O	9538	9539	I
O	9539	9540	'
O	9540	9541	m
O	9542	9546	just
O	9547	9554	linking
O	9555	9557	to
O	9558	9563	other
O	9564	9571	answers
O	9572	9573	I
O	9574	9580	marked
O	9581	9585	this
O	9586	9588	as
O	9589	9590	a
O	9591	9600	community
O	9601	9605	wiki
O	9605	9606	.

O	9607	9611	Feel
O	9612	9616	free
O	9617	9619	to
O	9620	9624	edit
O	9624	9625	.

O	9627	9635	Question
O	9635	9636	-
O	9636	9644	10786042
O	9644	9645	,
O	9646	9652	answer
O	9652	9653	-
O	9653	9661	25735202

O	9662	9665	You
O	9666	9670	need
O	9671	9673	to
O	9674	9679	first
O	9680	9686	create
O	9687	9688	a
O	9689	9692	URI
O	9693	9697	like
O	9697	9698	:
O	9699	9700	#
O	9700	9703	pre
O	9704	9708	Then
O	9709	9716	convert
O	9717	9721	that
O	9722	9725	Uri
O	9726	9728	to
O	9729	9734	ASCII
O	9735	9741	string
O	9741	9742	:
O	9743	9749	urlStr
O	9749	9750	=
B-api_mention	9750	9753	uri
I-api_mention	9753	9754	.
I-api_mention	9754	9767	toASCIIString
I-api_mention	9767	9768	(
I-api_mention	9768	9772	args
I-api_mention	9772	9773	)
O	9773	9774	;
O	9775	9778	Now
O	9779	9783	your
O	9784	9787	url
O	9788	9794	string
O	9795	9797	is
O	9798	9808	completely
O	9809	9816	encoded
O	9817	9822	first
O	9823	9825	we
O	9826	9829	did
O	9830	9836	simple
O	9837	9840	url
O	9841	9849	encoding
O	9850	9853	and
O	9854	9858	then
O	9859	9861	we
O	9862	9871	converted
O	9872	9874	it
O	9875	9877	to
O	9878	9883	ASCII
O	9884	9890	String
O	9891	9893	to
O	9894	9898	make
O	9899	9903	sure
O	9904	9906	no
O	9907	9916	character
O	9917	9924	outside
O	9925	9927	US
O	9927	9928	-
O	9928	9933	ASCII
O	9934	9937	are
O	9938	9947	remaining
O	9948	9950	in
O	9951	9957	string
O	9957	9958	.

O	9959	9963	This
O	9964	9966	is
O	9967	9974	exactly
O	9975	9978	how
O	9979	9987	browsers
O	9988	9990	do
O	9990	9991	.

O	9993	10001	Question
O	10001	10002	-
O	10002	10009	8894258
O	10009	10010	,
O	10011	10017	answer
O	10017	10018	-
O	10018	10025	8894348

O	10026	10029	The
O	10030	10035	first
O	10036	10039	one
O	10040	10045	using
B-api_mention	10046	10049	str
I-api_mention	10049	10050	.
I-api_mention	10050	10056	charAt
O	10057	10063	should
O	10064	10066	be
O	10067	10073	faster
O	10073	10074	.

O	10075	10077	If
O	10078	10081	you
O	10082	10085	dig
O	10086	10092	inside
O	10093	10096	the
O	10097	10103	source
O	10104	10108	code
O	10109	10111	of
O	10112	10118	String
O	10119	10124	class
O	10124	10125	,
O	10126	10128	we
O	10129	10132	can
O	10133	10136	see
O	10137	10141	that
O	10142	10148	charAt
O	10149	10151	is
O	10152	10163	implemented
O	10164	10166	as
O	10167	10174	follows
O	10174	10175	:
O	10176	10177	#
O	10177	10180	pre
O	10181	10185	Here
O	10185	10186	,
O	10187	10190	all
O	10191	10193	it
O	10194	10198	does
O	10199	10201	is
O	10202	10207	index
O	10208	10210	an
O	10211	10216	array
O	10217	10220	and
O	10221	10227	return
O	10228	10231	the
O	10232	10237	value
O	10237	10238	.

O	10239	10242	Now
O	10242	10243	,
O	10244	10246	if
O	10247	10249	we
O	10250	10253	see
O	10254	10257	the
O	10258	10272	implementation
O	10273	10275	of
B-api_mention	10276	10287	toCharArray
O	10288	10289	,
O	10290	10292	we
O	10293	10297	will
O	10298	10302	find
O	10303	10306	the
O	10307	10312	below
O	10312	10313	:
O	10314	10315	#
O	10315	10318	pre
O	10319	10321	As
O	10322	10325	you
O	10326	10329	see
O	10329	10330	,
O	10331	10333	it
O	10334	10336	is
O	10337	10342	doing
O	10343	10344	a
B-api_mention	10345	10351	System
I-api_mention	10351	10352	.
I-api_mention	10352	10361	arraycopy
O	10362	10367	which
O	10368	10370	is
O	10371	10381	definitely
O	10382	10387	going
O	10388	10390	to
O	10391	10393	be
O	10394	10395	a
O	10396	10399	tad
O	10400	10406	slower
O	10407	10411	than
O	10412	10415	not
O	10416	10421	doing
O	10422	10424	it
O	10424	10425	.

O	10427	10435	Question
O	10435	10436	-
O	10436	10443	8894258
O	10443	10444	,
O	10445	10451	answer
O	10451	10452	-
O	10452	10459	8894356

O	10460	10465	Looks
O	10466	10470	like
O	10471	10478	niether
O	10479	10481	is
O	10482	10488	faster
O	10489	10491	or
O	10492	10498	slower
O	10499	10500	#
O	10500	10503	pre
O	10504	10507	For
O	10508	10512	long
O	10513	10520	strings
O	10521	10522	I
O	10522	10523	'
O	10523	10525	ll
O	10526	10531	chose
O	10532	10535	the
O	10536	10541	first
O	10542	10545	one
O	10545	10546	.

O	10547	10550	Why
O	10551	10555	copy
O	10556	10562	around
O	10563	10567	long
O	10568	10575	strings
O	10575	10576	?

O	10577	10591	Documentations
O	10592	10596	says
O	10596	10597	:
O	10598	10599	#
O	10599	10609	blockquote
O	10610	10611	/
O	10611	10612	/
O	10612	10616	Edit
O	10617	10618	1
O	10619	10620	I
O	10620	10621	'
O	10621	10623	ve
O	10624	10631	changed
O	10632	10635	the
O	10636	10640	test
O	10641	10643	to
O	10644	10649	trick
O	10650	10653	JIT
O	10654	10666	optimisation
O	10666	10667	.

O	10668	10669	/
O	10669	10670	/
O	10670	10674	Edit
O	10675	10676	2
O	10677	10683	Repeat
O	10684	10688	test
O	10689	10691	10
O	10692	10697	times
O	10698	10700	to
O	10701	10704	let
O	10705	10708	JVM
O	10709	10713	warm
O	10714	10716	up
O	10716	10717	.

O	10718	10719	/
O	10719	10720	/
O	10720	10724	Edit
O	10725	10726	3
O	10727	10738	Conclusions
O	10738	10739	:
O	10740	10745	First
O	10746	10748	of
O	10749	10752	all
B-api_mention	10753	10756	str
I-api_mention	10756	10757	.
I-api_mention	10757	10768	toCharArray
I-api_mention	10768	10769	(
I-api_mention	10769	10773	args
I-api_mention	10773	10774	)
O	10774	10775	;
O	10776	10782	copies
O	10783	10789	entire
O	10790	10796	string
O	10797	10799	in
O	10800	10806	memory
O	10806	10807	.

O	10808	10810	It
O	10811	10814	can
O	10815	10817	be
O	10818	10824	memory
O	10825	10834	consuming
O	10835	10838	for
O	10839	10843	long
O	10844	10851	strings
O	10851	10852	.

O	10853	10859	Method
B-api_mention	10860	10866	String
I-api_mention	10866	10867	.
I-api_mention	10867	10873	charAt
I-api_mention	10873	10874	(
I-api_mention	10874	10878	args
I-api_mention	10878	10879	)
O	10880	10885	looks
O	10886	10888	up
O	10889	10893	char
O	10894	10896	in
O	10897	10901	char
O	10902	10907	array
O	10908	10914	inside
O	10915	10921	String
O	10922	10927	class
O	10928	10936	checking
O	10937	10942	index
O	10943	10949	before
O	10949	10950	.

O	10951	10953	It
O	10954	10959	looks
O	10960	10964	like
O	10965	10968	for
O	10969	10974	short
O	10975	10981	enough
B-api_mention	10982	10989	Strings
O	10990	10995	first
O	10996	11002	method
O	11003	11004	(
O	11004	11005	i
O	11005	11006	.
O	11006	11007	e
O	11007	11008	.
B-api_mention	11009	11015	chatAt
O	11016	11022	method
O	11022	11023	)
O	11024	11026	is
O	11027	11028	a
O	11029	11032	bit
O	11033	11039	slower
O	11040	11043	due
O	11044	11046	to
O	11047	11051	this
O	11052	11057	index
O	11058	11063	check
O	11063	11064	.

O	11065	11068	But
O	11069	11071	if
O	11072	11075	the
O	11076	11082	String
O	11083	11085	is
O	11086	11090	long
O	11091	11097	enough
O	11097	11098	,
O	11099	11106	copying
O	11107	11112	whole
O	11113	11117	char
O	11118	11123	array
O	11124	11128	gets
O	11129	11135	slower
O	11135	11136	,
O	11137	11140	and
O	11141	11144	the
O	11145	11150	first
O	11151	11157	method
O	11158	11160	is
O	11161	11167	faster
O	11167	11168	.

O	11169	11172	The
O	11173	11179	longer
O	11180	11183	the
O	11184	11190	string
O	11191	11193	is
O	11193	11194	,
O	11195	11198	the
O	11199	11205	slower
B-api_mention	11206	11217	toCharArray
O	11218	11226	performs
O	11226	11227	.

O	11228	11231	Try
O	11232	11234	to
O	11235	11241	change
O	11242	11247	limit
O	11248	11250	in
O	11251	11254	for
O	11254	11255	(
O	11255	11259	args
O	11259	11260	)
O	11261	11265	loop
O	11266	11268	to
O	11269	11272	see
O	11273	11275	it
O	11275	11276	.

O	11277	11279	If
O	11280	11282	we
O	11283	11286	let
O	11287	11290	JVM
O	11291	11295	warm
O	11296	11298	up
O	11299	11303	code
O	11304	11308	runs
O	11309	11315	faster
O	11315	11316	,
O	11317	11320	but
O	11321	11332	proportions
O	11333	11336	are
O	11337	11340	the
O	11341	11345	same
O	11345	11346	.

O	11347	11352	After
O	11353	11356	all
O	11357	11359	it
O	11359	11360	'
O	11360	11361	s
O	11362	11366	just
O	11367	11372	micro
O	11372	11373	-
O	11373	11385	optimisation
O	11385	11386	.

O	11388	11396	Question
O	11396	11397	-
O	11397	11404	8894258
O	11404	11405	,
O	11406	11412	answer
O	11412	11413	-
O	11413	11420	8894384

O	11421	11425	This
O	11426	11428	is
O	11429	11433	just
O	11434	11439	micro
O	11439	11440	-
O	11440	11452	optimisation
O	11453	11457	that
O	11458	11461	you
O	11462	11469	shouldn
O	11469	11470	'
O	11470	11471	t
O	11472	11477	worry
O	11478	11483	about
O	11483	11484	.

O	11485	11489	char
O	11489	11490	[
O	11490	11491	]
O	11492	11497	chars
O	11498	11499	=
B-api_mention	11500	11503	str
I-api_mention	11503	11504	.
I-api_mention	11504	11515	toCharArray
I-api_mention	11515	11516	(
I-api_mention	11516	11520	args
I-api_mention	11520	11521	)
O	11521	11522	;
O	11523	11530	returns
O	11531	11534	you
O	11535	11536	a
O	11537	11541	copy
O	11542	11544	of
O	11545	11548	str
O	11549	11558	character
O	11559	11565	arrays
O	11566	11567	(
O	11567	11569	in
O	11570	11573	JDK
O	11573	11574	,
O	11575	11577	it
O	11578	11585	returns
O	11586	11587	a
O	11588	11592	copy
O	11593	11595	of
O	11596	11606	characters
O	11607	11609	by
O	11610	11617	calling
O	11618	11624	System
O	11624	11625	.
O	11625	11634	arrayCopy
O	11635	11636	)
O	11636	11637	.

O	11638	11643	Other
O	11644	11648	than
O	11649	11653	that
O	11653	11654	,
B-api_mention	11655	11658	str
I-api_mention	11658	11659	.
I-api_mention	11659	11665	charAt
I-api_mention	11665	11666	(
I-api_mention	11666	11670	args
I-api_mention	11670	11671	)
O	11672	11676	only
O	11677	11683	checks
O	11684	11686	if
O	11687	11690	the
O	11691	11696	index
O	11697	11699	is
O	11700	11706	indeed
O	11707	11709	in
O	11710	11716	bounds
O	11717	11720	and
O	11721	11728	returns
O	11729	11730	a
O	11731	11740	character
O	11741	11747	within
O	11748	11751	the
O	11752	11757	array
O	11758	11763	index
O	11763	11764	.

O	11765	11768	The
O	11769	11774	first
O	11775	11778	one
O	11779	11784	doesn
O	11784	11785	'
O	11785	11786	t
O	11787	11793	create
O	11794	11804	additional
O	11805	11811	memory
O	11812	11814	in
O	11815	11818	JVM
O	11818	11819	.

O	11821	11829	Question
O	11829	11830	-
O	11830	11837	8894258
O	11837	11838	,
O	11839	11845	answer
O	11845	11846	-
O	11846	11854	22676782

O	11855	11862	Despite
O	11863	11864	@
O	11864	11869	Saint
O	11870	11874	Hill
O	11874	11875	'
O	11875	11876	s
O	11877	11883	answer
O	11884	11886	if
O	11887	11890	you
O	11891	11899	consider
O	11900	11903	the
O	11904	11908	time
O	11909	11919	complexity
O	11920	11922	of
O	11923	11926	str
B-api_mention	11926	11927	.
I-api_mention	11927	11938	toCharArray
I-api_mention	11938	11939	(
I-api_mention	11939	11940	)
O	11941	11942	,
O	11943	11946	the
O	11947	11952	first
O	11953	11956	one
O	11957	11959	is
O	11960	11966	faster
O	11967	11971	even
O	11972	11975	for
O	11976	11980	very
O	11981	11986	large
O	11987	11994	strings
O	11994	11995	.

O	11996	11999	You
O	12000	12003	can
O	12004	12007	run
O	12008	12011	the
O	12012	12016	code
O	12017	12022	below
O	12023	12025	to
O	12026	12029	see
O	12030	12032	it
O	12033	12036	for
O	12037	12045	yourself
O	12045	12046	.

O	12047	12048	#
O	12048	12051	pre
O	12052	12058	output
O	12058	12059	:
O	12060	12061	#
O	12061	12064	pre

O	12066	12074	Question
O	12074	12075	-
O	12075	12083	10827872
O	12083	12084	,
O	12085	12091	answer
O	12091	12092	-
O	12092	12100	10827900

O	12101	12103	In
B-api_mention	12104	12108	java
I-api_mention	12108	12109	.
I-api_mention	12109	12113	lang
I-api_mention	12113	12114	.
I-api_mention	12114	12120	String
O	12121	12122	,
O	12123	12126	the
O	12127	12134	replace
O	12135	12141	method
O	12142	12148	either
O	12149	12154	takes
O	12155	12156	a
O	12157	12161	pair
O	12162	12164	of
O	12165	12169	char
O	12169	12170	'
O	12170	12171	s
O	12172	12174	or
O	12175	12176	a
O	12177	12181	pair
O	12182	12184	of
B-api_mention	12185	12197	CharSequence
O	12198	12199	'
O	12199	12200	s
O	12201	12202	(
O	12202	12204	of
O	12205	12210	which
O	12211	12217	String
O	12218	12220	is
O	12221	12222	a
O	12223	12231	subclass
O	12231	12232	,
O	12233	12235	so
O	12236	12238	it
O	12238	12239	'
O	12239	12241	ll
O	12242	12249	happily
O	12250	12254	take
O	12255	12256	a
O	12257	12261	pair
O	12262	12264	of
O	12265	12271	String
O	12271	12272	'
O	12272	12273	s
O	12273	12274	)
O	12274	12275	.

O	12276	12279	The
O	12280	12287	replace
O	12288	12294	method
O	12295	12299	will
O	12300	12307	replace
O	12308	12311	all
O	12312	12323	occurrences
O	12324	12326	of
O	12327	12328	a
O	12329	12333	char
O	12334	12336	or
B-api_mention	12337	12349	CharSequence
O	12350	12351	.

O	12352	12354	On
O	12355	12358	the
O	12359	12364	other
O	12365	12369	hand
O	12369	12370	,
O	12371	12375	both
O	12376	12382	String
O	12383	12392	arguments
O	12393	12395	to
B-api_mention	12396	12408	replaceFirst
O	12409	12412	and
B-api_mention	12413	12423	replaceAll
O	12424	12427	are
O	12428	12435	regular
O	12436	12447	expressions
O	12448	12449	(
O	12449	12454	regex
O	12454	12455	)
O	12455	12456	.

O	12457	12462	Using
O	12463	12466	the
O	12467	12472	wrong
O	12473	12481	function
O	12482	12485	can
O	12486	12490	lead
O	12491	12493	to
O	12494	12500	subtle
O	12501	12505	bugs
O	12505	12506	.

O	12508	12516	Question
O	12516	12517	-
O	12517	12525	10827872
O	12525	12526	,
O	12527	12533	answer
O	12533	12534	-
O	12534	12542	10827945

O	12543	12546	The
B-api_mention	12547	12554	replace
I-api_mention	12554	12555	(
I-api_mention	12555	12559	args
I-api_mention	12559	12560	)
O	12561	12567	method
O	12568	12570	is
O	12571	12581	overloaded
O	12582	12584	to
O	12585	12591	accept
O	12592	12596	both
O	12597	12598	a
O	12599	12608	primitive
O	12609	12613	char
O	12614	12617	and
O	12618	12619	a
O	12620	12632	CharSequence
O	12633	12635	as
O	12636	12645	arguments
O	12645	12646	.

O	12647	12650	Now
O	12651	12653	as
O	12654	12657	far
O	12658	12660	as
O	12661	12664	the
O	12665	12676	performance
O	12677	12679	is
O	12680	12689	concerned
O	12689	12690	,
O	12691	12694	the
B-api_mention	12695	12702	replace
I-api_mention	12702	12703	(
I-api_mention	12703	12707	args
I-api_mention	12707	12708	)
O	12709	12715	method
O	12716	12718	is
O	12719	12720	a
O	12721	12724	bit
O	12725	12731	faster
O	12732	12736	than
B-api_mention	12737	12747	replaceAll
I-api_mention	12747	12748	(
I-api_mention	12748	12752	args
I-api_mention	12752	12753	)
O	12754	12761	because
O	12762	12765	the
O	12766	12771	later
O	12772	12777	first
O	12778	12786	compiles
O	12787	12790	the
O	12791	12796	regex
O	12797	12804	pattern
O	12805	12808	and
O	12809	12813	then
O	12814	12821	matches
O	12822	12828	before
O	12829	12836	finally
O	12837	12846	replacing
O	12847	12854	whereas
O	12855	12858	the
O	12859	12865	former
O	12866	12872	simply
O	12873	12880	matches
O	12881	12884	for
O	12885	12888	the
O	12889	12897	provided
O	12898	12906	argument
O	12907	12910	and
O	12911	12919	replaces
O	12919	12920	.

O	12921	12926	Since
O	12927	12929	we
O	12930	12934	know
O	12935	12938	the
O	12939	12944	regex
O	12945	12952	pattern
O	12953	12961	matching
O	12962	12964	is
O	12965	12966	a
O	12967	12970	bit
O	12971	12975	more
O	12976	12983	complex
O	12984	12987	and
O	12988	13000	consequently
O	13001	13007	slower
O	13007	13008	,
O	13009	13013	then
O	13014	13024	preferring
B-api_mention	13025	13032	replace
I-api_mention	13032	13033	(
I-api_mention	13033	13037	args
I-api_mention	13037	13038	)
O	13039	13043	over
B-api_mention	13044	13054	replaceAll
I-api_mention	13054	13055	(
I-api_mention	13055	13059	args
I-api_mention	13059	13060	)
O	13061	13063	is
O	13064	13073	suggested
O	13074	13082	whenever
O	13083	13091	possible
O	13091	13092	.

O	13093	13096	For
O	13097	13104	example
O	13104	13105	,
O	13106	13109	for
O	13110	13116	simple
O	13117	13130	substitutions
O	13131	13135	like
O	13136	13139	you
O	13140	13149	mentioned
O	13149	13150	,
O	13151	13153	it
O	13154	13156	is
O	13157	13163	better
O	13164	13166	to
O	13167	13170	use
O	13170	13171	:
B-api_mention	13172	13179	replace
I-api_mention	13179	13180	(
I-api_mention	13180	13184	args
I-api_mention	13184	13185	)
O	13185	13186	;
O	13187	13194	instead
O	13195	13197	of
O	13197	13198	:
B-api_mention	13199	13209	replaceAll
I-api_mention	13209	13210	(
I-api_mention	13210	13214	args
I-api_mention	13214	13215	)
O	13215	13216	;
O	13217	13221	Note
O	13221	13222	:
O	13223	13226	the
O	13227	13232	above
O	13233	13243	conversion
O	13244	13250	method
O	13251	13260	arguments
O	13261	13264	are
O	13265	13271	system
O	13271	13272	-
O	13272	13281	dependent
O	13281	13282	.

O	13284	13292	Question
O	13292	13293	-
O	13293	13301	10827872
O	13301	13302	,
O	13303	13309	answer
O	13309	13310	-
O	13310	13318	22578124

O	13319	13322	Old
O	13323	13329	thread
O	13330	13331	I
O	13332	13336	know
O	13337	13340	but
O	13341	13342	I
O	13343	13345	am
O	13346	13350	sort
O	13351	13353	of
O	13354	13357	new
O	13358	13360	to
O	13361	13365	Java
O	13366	13369	and
O	13370	13378	discover
O	13379	13382	one
O	13383	13385	of
O	13386	13388	it
O	13388	13389	'
O	13389	13390	s
O	13391	13398	strange
O	13399	13405	things
O	13405	13406	.

O	13407	13408	I
O	13409	13413	have
O	13414	13418	used
B-api_mention	13419	13425	String
I-api_mention	13425	13426	.
I-api_mention	13426	13436	replaceAll
I-api_mention	13436	13437	(
I-api_mention	13437	13441	args
I-api_mention	13441	13442	)
O	13443	13446	but
O	13447	13450	get
O	13451	13464	unpredictable
O	13465	13472	results
O	13472	13473	.

O	13474	13483	Something
O	13484	13488	like
O	13489	13493	this
O	13494	13498	mess
O	13499	13501	up
O	13502	13505	the
O	13506	13512	string
O	13512	13513	:
O	13514	13518	sUrl
O	13519	13520	=
O	13521	13525	sUrl
B-api_mention	13525	13526	.
I-api_mention	13526	13536	replaceAll
I-api_mention	13536	13537	(
I-api_mention	13537	13541	args
I-api_mention	13541	13542	)
I-api_mention	13542	13543	.
I-api_mention	13543	13553	replaceAll
I-api_mention	13553	13554	(
I-api_mention	13554	13558	args
I-api_mention	13558	13559	)
O	13559	13560	;
O	13561	13563	So
O	13564	13565	I
O	13566	13574	designed
O	13575	13579	this
O	13580	13588	function
O	13589	13591	to
O	13592	13595	get
O	13596	13602	around
O	13603	13606	the
O	13607	13612	weird
O	13613	13620	problem
O	13620	13621	:
O	13622	13623	#
O	13623	13626	pre
O	13627	13632	Which
O	13633	13637	make
O	13638	13641	you
O	13642	13646	able
O	13647	13649	to
O	13650	13652	do
O	13652	13653	:
O	13654	13655	#
O	13655	13658	pre

O	13660	13668	Question
O	13668	13669	-
O	13669	13677	10827872
O	13677	13678	,
O	13679	13685	answer
O	13685	13686	-
O	13686	13694	30749407

B-api_mention	13695	13702	replace
I-api_mention	13702	13703	(
I-api_mention	13703	13707	args
I-api_mention	13707	13708	)
O	13709	13715	method
O	13716	13721	doesn
O	13721	13722	'
O	13722	13723	t
O	13724	13728	uses
O	13729	13734	regex
O	13735	13742	pattern
O	13743	13750	whereas
B-api_mention	13751	13761	replaceAll
I-api_mention	13761	13762	(
I-api_mention	13762	13766	args
I-api_mention	13766	13767	)
O	13768	13774	method
O	13775	13779	uses
O	13780	13785	regex
O	13786	13793	pattern
O	13793	13794	.

O	13795	13797	So
B-api_mention	13798	13805	replace
I-api_mention	13805	13806	(
I-api_mention	13806	13810	args
I-api_mention	13810	13811	)
O	13812	13820	performs
O	13821	13827	faster
O	13828	13832	than
B-api_mention	13833	13843	replaceAll
I-api_mention	13843	13844	(
I-api_mention	13844	13848	args
I-api_mention	13848	13849	)
O	13850	13851	.

O	13853	13861	Question
O	13861	13862	-
O	13862	13869	8725387
O	13869	13870	,
O	13871	13877	answer
O	13877	13878	-
O	13878	13885	8725453

O	13886	13891	Since
O	13892	13895	all
O	13896	13901	lists
O	13902	13905	are
O	13906	13913	already
O	13914	13915	"
O	13915	13921	sorted
O	13921	13922	"
O	13923	13925	by
O	13926	13929	the
O	13930	13935	order
O	13936	13939	the
O	13940	13945	items
O	13946	13950	were
O	13951	13956	added
O	13957	13958	(
O	13958	13962	FIFO
O	13963	13971	ordering
O	13971	13972	)
O	13972	13973	,
O	13974	13977	you
O	13978	13981	can
O	13982	13983	"
O	13983	13989	resort
O	13989	13990	"
O	13991	13995	them
O	13996	14000	with
O	14001	14008	another
O	14009	14017	ordering
O	14017	14018	,
O	14019	14028	including
O	14029	14032	the
O	14033	14040	natural
O	14041	14049	ordering
O	14050	14052	of
O	14053	14061	elements
O	14061	14062	,
O	14063	14068	using
B-api_mention	14069	14073	java
I-api_mention	14073	14074	.
I-api_mention	14074	14078	util
I-api_mention	14078	14079	.
I-api_mention	14079	14090	Collections
I-api_mention	14090	14091	.
I-api_mention	14091	14095	sort
I-api_mention	14095	14096	(
I-api_mention	14096	14100	args
I-api_mention	14100	14101	)
O	14102	14103	.

O	14104	14108	EDIT
O	14108	14109	:
B-api_mention	14110	14115	Lists
O	14116	14118	as
O	14119	14123	data
O	14124	14134	structures
O	14135	14138	are
O	14139	14144	based
O	14145	14147	in
O	14148	14152	what
O	14153	14155	is
O	14156	14167	interesting
O	14168	14170	is
O	14171	14174	the
O	14175	14183	ordering
O	14184	14186	in
O	14187	14192	which
O	14193	14196	the
O	14197	14202	items
O	14203	14208	where
O	14209	14217	inserted
O	14217	14218	.

O	14219	14223	Sets
O	14224	14226	do
O	14227	14230	not
O	14231	14235	have
O	14236	14240	that
O	14241	14252	information
O	14252	14253	.

O	14254	14256	If
O	14257	14260	you
O	14261	14265	want
O	14266	14268	to
O	14269	14274	order
O	14275	14277	by
O	14278	14286	addition
O	14287	14291	time
O	14291	14292	,
O	14293	14296	use
B-api_mention	14297	14301	List
O	14302	14303	.

O	14304	14306	If
O	14307	14310	you
O	14311	14315	want
O	14316	14318	to
O	14319	14324	order
O	14325	14327	by
O	14328	14333	other
O	14334	14342	criteria
O	14342	14343	,
O	14344	14347	use
B-api_mention	14348	14357	SortedSet
O	14358	14359	.

O	14361	14369	Question
O	14369	14370	-
O	14370	14377	8725387
O	14377	14378	,
O	14379	14385	answer
O	14385	14386	-
O	14386	14393	8725470

B-api_mention	14394	14398	List
O	14399	14408	iterators
O	14409	14418	guarantee
O	14419	14424	first
O	14425	14428	and
O	14429	14437	foremost
O	14438	14442	that
O	14443	14446	you
O	14447	14450	get
O	14451	14454	the
O	14455	14459	list
O	14459	14460	'
O	14460	14461	s
O	14462	14470	elements
O	14471	14473	in
O	14474	14477	the
O	14478	14486	internal
O	14487	14492	order
O	14493	14495	of
O	14496	14499	the
O	14500	14504	list
O	14505	14506	(
O	14506	14509	aka
O	14509	14510	.
O	14511	14520	insertion
O	14521	14526	order
O	14527	14528	)
O	14528	14529	.

O	14530	14534	More
O	14535	14547	specifically
O	14548	14550	it
O	14551	14553	is
O	14554	14556	in
O	14557	14560	the
O	14561	14566	order
O	14567	14570	you
O	14570	14571	'
O	14571	14573	ve
O	14574	14582	inserted
O	14583	14586	the
O	14587	14595	elements
O	14596	14598	or
O	14599	14601	on
O	14602	14605	how
O	14606	14609	you
O	14609	14610	'
O	14610	14612	ve
O	14613	14624	manipulated
O	14625	14628	the
O	14629	14633	list
O	14633	14634	.

O	14635	14642	Sorting
O	14643	14646	can
O	14647	14649	be
O	14650	14654	seen
O	14655	14657	as
O	14658	14659	a
O	14660	14672	manipulation
O	14673	14675	of
O	14676	14679	the
O	14680	14684	data
O	14685	14694	structure
O	14694	14695	,
O	14696	14699	and
O	14700	14705	there
O	14706	14709	are
O	14710	14717	several
O	14718	14722	ways
O	14723	14725	to
O	14726	14730	sort
O	14731	14734	the
O	14735	14739	list
O	14739	14740	.

O	14741	14742	I
O	14742	14743	'
O	14743	14745	ll
O	14746	14751	order
O	14752	14755	the
O	14756	14760	ways
O	14761	14763	in
O	14764	14767	the
O	14768	14773	order
O	14774	14776	of
O	14777	14787	usefulness
O	14788	14790	as
O	14791	14792	I
O	14793	14803	personally
O	14804	14807	see
O	14808	14810	it
O	14810	14811	:
O	14812	14813	1
O	14813	14814	.

O	14815	14823	Consider
O	14824	14829	using
B-api_mention	14830	14833	Set
O	14834	14836	or
B-api_mention	14837	14840	Bag
O	14841	14852	collections
O	14853	14860	instead
O	14861	14865	NOTE
O	14865	14866	:
O	14867	14868	I
O	14869	14872	put
O	14873	14877	this
O	14878	14884	option
O	14885	14887	at
O	14888	14891	the
O	14892	14895	top
O	14896	14903	because
O	14904	14908	this
O	14909	14911	is
O	14912	14916	what
O	14917	14920	you
O	14921	14929	normally
O	14930	14934	want
O	14935	14937	to
O	14938	14940	do
O	14941	14947	anyway
O	14947	14948	.

O	14949	14950	A
O	14951	14957	sorted
O	14958	14961	set
O	14962	14975	automatically
O	14976	14981	sorts
O	14982	14985	the
O	14986	14996	collection
O	14997	14999	at
O	15000	15009	insertion
O	15010	15011	,
O	15012	15019	meaning
O	15020	15024	that
O	15025	15027	it
O	15028	15032	does
O	15033	15036	the
O	15037	15044	sorting
O	15045	15050	while
O	15051	15054	you
O	15055	15058	add
O	15059	15067	elements
O	15068	15072	into
O	15073	15076	the
O	15077	15087	collection
O	15087	15088	.

O	15089	15091	It
O	15092	15096	also
O	15097	15102	means
O	15103	15106	you
O	15107	15110	don
O	15110	15111	'
O	15111	15112	t
O	15113	15117	need
O	15118	15120	to
O	15121	15129	manually
O	15130	15134	sort
O	15135	15137	it
O	15137	15138	.

O	15139	15150	Furthermore
O	15151	15153	if
O	15154	15157	you
O	15158	15161	are
O	15162	15166	sure
O	15167	15171	that
O	15172	15175	you
O	15176	15179	don
O	15179	15180	'
O	15180	15181	t
O	15182	15186	need
O	15187	15189	to
O	15190	15195	worry
O	15196	15201	about
O	15202	15203	(
O	15203	15205	or
O	15206	15210	have
O	15210	15211	)
O	15212	15221	duplicate
O	15222	15230	elements
O	15231	15235	then
O	15236	15239	you
O	15240	15243	can
O	15244	15247	use
O	15248	15251	the
B-api_mention	15252	15259	TreeSet
I-api_mention	15259	15260	<
I-api_mention	15260	15261	T
I-api_mention	15261	15262	>
O	15263	15270	instead
O	15270	15271	.

O	15272	15274	It
O	15275	15285	implements
B-api_mention	15286	15295	SortedSet
O	15296	15299	and
B-api_mention	15300	15312	NavigableSet
O	15313	15323	interfaces
O	15324	15327	and
O	15328	15333	works
O	15334	15336	as
O	15337	15340	you
O	15340	15341	'
O	15341	15342	d
O	15343	15351	probably
O	15352	15358	expect
O	15359	15363	from
O	15364	15365	a
O	15366	15370	list
O	15370	15371	:
O	15372	15373	#
O	15373	15376	pre
O	15377	15379	If
O	15380	15383	you
O	15384	15387	don
O	15387	15388	'
O	15388	15389	t
O	15390	15394	want
O	15395	15398	the
O	15399	15406	natural
O	15407	15415	ordering
O	15416	15419	you
O	15420	15423	can
O	15424	15427	use
O	15428	15431	the
O	15432	15443	constructor
O	15444	15453	parameter
O	15454	15458	that
O	15459	15464	takes
O	15465	15466	a
B-api_mention	15467	15477	Comparator
I-api_mention	15477	15478	<
I-api_mention	15478	15479	T
I-api_mention	15479	15480	>
O	15481	15482	.

O	15483	15496	Alternatively
O	15497	15500	you
O	15501	15504	can
O	15505	15508	use
B-api_mention	15509	15518	Multisets
O	15519	15520	(
O	15520	15524	also
O	15525	15530	known
O	15531	15533	as
B-api_mention	15534	15538	Bags
O	15539	15540	)
O	15541	15542	,
O	15543	15547	that
O	15548	15550	is
O	15551	15552	a
B-api_mention	15553	15556	Set
O	15557	15561	that
O	15562	15568	allows
O	15569	15578	duplicate
O	15579	15587	elements
O	15587	15588	,
O	15589	15596	instead
O	15597	15600	and
O	15601	15606	there
O	15607	15610	are
O	15611	15616	third
O	15617	15622	party
O	15623	15638	implementations
O	15639	15641	of
O	15642	15646	them
O	15646	15647	.

O	15648	15652	Most
O	15653	15660	notably
O	15661	15665	from
O	15666	15669	the
O	15670	15675	Guava
O	15676	15685	libraries
O	15686	15691	there
O	15692	15694	is
O	15695	15696	a
B-api_mention	15697	15709	TreeMultiset
O	15710	15711	,
O	15712	15716	that
O	15717	15722	works
O	15723	15724	a
O	15725	15728	lot
O	15729	15733	like
O	15734	15737	the
B-api_mention	15738	15745	TreeSet
O	15746	15747	.

O	15748	15749	2
O	15749	15750	.

O	15751	15755	Sort
O	15756	15760	your
O	15761	15765	list
O	15766	15770	with
B-api_mention	15771	15782	Collections
I-api_mention	15782	15783	.
I-api_mention	15783	15787	sort
I-api_mention	15787	15788	(
I-api_mention	15788	15792	args
I-api_mention	15792	15793	)
O	15794	15796	As
O	15797	15806	mentioned
O	15807	15812	above
O	15812	15813	,
O	15814	15821	sorting
O	15822	15824	of
B-api_mention	15825	15829	List
O	15830	15831	s
O	15832	15834	is
O	15835	15837	an
O	15838	15850	manipulation
O	15851	15853	of
O	15854	15857	the
O	15858	15862	data
O	15863	15872	structure
O	15872	15873	.

O	15874	15876	So
O	15877	15880	for
O	15881	15891	situations
O	15892	15897	where
O	15898	15901	you
O	15902	15906	need
O	15907	15908	"
O	15908	15911	one
O	15912	15918	source
O	15919	15921	of
O	15922	15927	truth
O	15927	15928	"
O	15929	15933	that
O	15934	15938	will
O	15939	15941	be
O	15942	15948	sorted
O	15949	15951	in
O	15952	15953	a
O	15954	15961	variety
O	15962	15964	of
O	15965	15969	ways
O	15970	15974	then
O	15975	15982	sorting
O	15983	15985	it
O	15986	15994	manually
O	15995	15997	is
O	15998	16001	the
O	16002	16005	way
O	16006	16008	to
O	16009	16011	go
O	16011	16012	.

O	16013	16016	You
O	16017	16020	can
O	16021	16025	sort
O	16026	16030	your
O	16031	16035	list
O	16036	16040	with
O	16041	16044	the
B-api_mention	16045	16049	java
I-api_mention	16049	16050	.
I-api_mention	16050	16054	util
I-api_mention	16054	16055	.
I-api_mention	16055	16066	Collections
I-api_mention	16066	16067	.
I-api_mention	16067	16071	sort
I-api_mention	16071	16072	(
I-api_mention	16072	16073	)
O	16074	16080	method
O	16080	16081	.

O	16082	16086	Here
O	16087	16089	is
O	16090	16091	a
O	16092	16096	code
O	16097	16103	sample
O	16104	16106	on
O	16107	16110	how
O	16110	16111	:
O	16112	16113	#
O	16113	16116	pre
O	16117	16122	Using
O	16123	16134	comparators
O	16135	16138	One
O	16139	16144	clear
O	16145	16152	benefit
O	16153	16155	is
O	16156	16160	that
O	16161	16164	you
O	16165	16168	may
O	16169	16172	use
B-api_mention	16173	16183	Comparator
O	16184	16186	in
O	16187	16190	the
B-api_mention	16191	16195	sort
O	16196	16202	method
O	16202	16203	.

O	16204	16208	Java
O	16209	16213	also
O	16214	16222	provides
O	16223	16227	some
O	16228	16243	implementations
O	16244	16247	for
O	16248	16251	the
B-api_mention	16252	16262	Comparator
O	16263	16267	such
O	16268	16270	as
O	16271	16274	the
B-api_mention	16275	16283	Collator
O	16284	16289	which
O	16290	16292	is
O	16293	16299	useful
O	16300	16303	for
O	16304	16310	locale
O	16311	16320	sensitive
O	16321	16328	sorting
O	16329	16336	strings
O	16336	16337	.

O	16338	16342	Here
O	16343	16345	is
O	16346	16349	one
O	16350	16357	example
O	16357	16358	:
O	16359	16360	#
O	16360	16363	pre
O	16364	16371	Sorting
O	16372	16374	in
O	16375	16385	concurrent
O	16386	16398	environments
O	16399	16401	Do
O	16402	16406	note
O	16407	16413	though
O	16414	16418	that
O	16419	16424	using
O	16425	16428	the
B-api_mention	16429	16433	sort
O	16434	16440	method
O	16441	16443	is
O	16444	16447	not
O	16448	16456	friendly
O	16457	16459	in
O	16460	16470	concurrent
O	16471	16483	environments
O	16483	16484	,
O	16485	16490	since
O	16491	16494	the
O	16495	16505	collection
O	16506	16514	instance
O	16515	16519	will
O	16520	16522	be
O	16523	16534	manipulated
O	16534	16535	,
O	16536	16539	and
O	16540	16543	you
O	16544	16550	should
O	16551	16559	consider
O	16560	16565	using
O	16566	16575	immutable
O	16576	16587	collections
O	16588	16595	instead
O	16595	16596	.

O	16597	16601	This
O	16602	16604	is
O	16605	16614	something
O	16615	16620	Guava
O	16621	16629	provides
O	16630	16632	in
O	16633	16636	the
B-api_mention	16637	16645	Ordering
O	16646	16651	class
O	16652	16655	and
O	16656	16658	is
O	16659	16660	a
O	16661	16667	simple
O	16668	16671	one
O	16671	16672	-
O	16672	16677	liner
O	16677	16678	:
B-api_mention	16679	16683	List
I-api_mention	16683	16684	<
I-api_mention	16684	16685	T
I-api_mention	16685	16686	>
O	16687	16693	sorted
O	16694	16695	=
B-api_mention	16696	16704	Ordering
I-api_mention	16704	16705	.
I-api_mention	16705	16712	natural
I-api_mention	16712	16713	(
I-api_mention	16713	16717	args
I-api_mention	16717	16718	)
I-api_mention	16718	16719	.
I-api_mention	16719	16729	sortedCopy
I-api_mention	16729	16730	(
I-api_mention	16730	16734	args
I-api_mention	16734	16735	)
O	16735	16736	;
O	16737	16738	3
O	16738	16739	.

O	16740	16744	Wrap
O	16745	16749	your
O	16750	16754	list
O	16755	16759	with
B-api_mention	16760	16764	java
I-api_mention	16764	16765	.
I-api_mention	16765	16769	util
I-api_mention	16769	16770	.
I-api_mention	16770	16783	PriorityQueue
O	16784	16790	Though
O	16791	16796	there
O	16797	16799	is
O	16800	16802	no
O	16803	16809	sorted
O	16810	16814	list
O	16815	16817	in
O	16818	16822	Java
O	16823	16828	there
O	16829	16831	is
O	16832	16839	however
O	16840	16841	a
O	16842	16848	sorted
O	16849	16854	queue
O	16855	16860	which
O	16861	16866	would
O	16867	16875	probably
O	16876	16880	work
O	16881	16885	just
O	16886	16888	as
O	16889	16893	well
O	16894	16897	for
O	16898	16901	you
O	16901	16902	.

O	16903	16905	It
O	16906	16908	is
O	16909	16912	the
B-api_mention	16913	16917	java
I-api_mention	16917	16918	.
I-api_mention	16918	16922	util
I-api_mention	16922	16923	.
I-api_mention	16923	16936	PriorityQueue
O	16937	16942	class
O	16942	16943	.

O	16944	16948	Nico
O	16949	16954	Haase
O	16955	16961	linked
O	16962	16964	in
O	16965	16968	the
O	16969	16977	comments
O	16978	16980	to
O	16981	16982	a
O	16983	16990	related
O	16991	16999	question
O	17000	17004	that
O	17005	17009	also
O	17010	17017	answers
O	17018	17022	this
O	17022	17023	.

O	17024	17026	In
O	17027	17028	a
O	17029	17035	sorted
O	17036	17046	collection
O	17047	17050	you
O	17051	17055	most
O	17056	17062	likely
O	17063	17066	don
O	17066	17067	'
O	17067	17068	t
O	17069	17073	want
O	17074	17076	to
O	17077	17087	manipulate
O	17088	17091	the
O	17092	17100	internal
O	17101	17105	data
O	17106	17115	structure
O	17116	17121	which
O	17122	17124	is
O	17125	17128	why
B-api_mention	17129	17142	PriorityQueue
O	17143	17148	doesn
O	17148	17149	'
O	17149	17150	t
O	17151	17160	implement
O	17161	17164	the
B-api_mention	17165	17169	List
O	17170	17179	interface
O	17180	17181	(
O	17181	17188	because
O	17189	17193	that
O	17194	17199	would
O	17200	17204	give
O	17205	17208	you
O	17209	17215	direct
O	17216	17222	access
O	17223	17225	to
O	17226	17228	it
O	17228	17229	'
O	17229	17230	s
O	17231	17239	elements
O	17239	17240	)
O	17240	17241	.

O	17242	17248	Caveat
O	17249	17251	on
O	17252	17255	the
B-api_mention	17256	17269	PriorityQueue
O	17270	17278	iterator
O	17279	17282	The
B-api_mention	17283	17296	PriorityQueue
O	17297	17302	class
O	17303	17313	implements
O	17314	17317	the
B-api_mention	17318	17326	Iterable
I-api_mention	17326	17327	<
I-api_mention	17327	17328	T
I-api_mention	17328	17329	>
O	17330	17333	and
B-api_mention	17334	17344	Collection
I-api_mention	17344	17345	<
I-api_mention	17345	17346	T
I-api_mention	17346	17347	>
O	17348	17358	interfaces
O	17359	17361	so
O	17362	17364	it
O	17365	17368	can
O	17369	17371	be
O	17372	17380	iterated
O	17381	17383	as
O	17384	17389	usual
O	17389	17390	.

O	17391	17398	However
O	17399	17402	the
O	17403	17411	iterator
O	17412	17414	is
O	17415	17418	not
O	17419	17429	guaranteed
O	17430	17432	to
O	17433	17439	return
O	17440	17448	elements
O	17449	17451	in
O	17452	17455	the
O	17456	17462	sorted
O	17463	17468	order
O	17468	17469	.

O	17470	17477	Instead
O	17478	17479	(
O	17479	17481	as
O	17482	17490	Alderath
O	17491	17497	points
O	17498	17501	out
O	17502	17504	in
O	17505	17508	the
O	17509	17517	comments
O	17517	17518	)
O	17519	17522	you
O	17523	17527	need
O	17528	17530	to
B-api_mention	17531	17535	poll
I-api_mention	17535	17536	(
I-api_mention	17536	17540	args
I-api_mention	17540	17541	)
O	17542	17545	the
O	17546	17551	queue
O	17552	17557	until
O	17558	17563	empty
O	17563	17564	.

O	17565	17569	Note
O	17570	17574	that
O	17575	17578	you
O	17579	17582	can
O	17583	17590	convert
O	17591	17592	a
O	17593	17597	list
O	17598	17600	to
O	17601	17602	a
O	17603	17611	priority
O	17612	17617	queue
O	17618	17621	via
O	17622	17625	the
O	17626	17637	constructor
O	17638	17642	that
O	17643	17648	takes
O	17649	17652	any
O	17653	17663	collection
O	17664	17665	:
O	17666	17667	#
O	17667	17670	pre
O	17671	17672	4
O	17672	17673	.

O	17674	17679	Write
O	17680	17684	your
O	17685	17688	own
B-api_mention	17689	17699	SortedList
O	17700	17705	class
O	17706	17710	NOTE
O	17710	17711	:
O	17712	17715	You
O	17716	17723	shouldn
O	17723	17724	'
O	17724	17725	t
O	17726	17730	have
O	17731	17733	to
O	17734	17736	do
O	17737	17741	this
O	17741	17742	.

O	17743	17746	You
O	17747	17750	can
O	17751	17756	write
O	17757	17761	your
O	17762	17765	own
B-api_mention	17766	17770	List
O	17771	17776	class
O	17777	17781	that
O	17782	17787	sorts
O	17788	17792	each
O	17793	17797	time
O	17798	17801	you
O	17802	17805	add
O	17806	17807	a
O	17808	17811	new
O	17812	17819	element
O	17819	17820	.

O	17821	17825	This
O	17826	17829	can
O	17830	17833	get
O	17834	17840	rather
O	17841	17852	computation
O	17853	17858	heavy
O	17859	17868	depending
O	17869	17871	on
O	17872	17876	your
O	17877	17891	implementation
O	17892	17895	and
O	17896	17898	is
O	17899	17908	pointless
O	17909	17910	,
O	17911	17917	unless
O	17918	17921	you
O	17922	17926	want
O	17927	17929	to
O	17930	17932	do
O	17933	17935	it
O	17936	17938	as
O	17939	17941	an
O	17942	17950	exercise
O	17950	17951	,
O	17952	17959	because
O	17960	17962	of
O	17963	17966	two
O	17967	17971	main
O	17972	17979	reasons
O	17979	17980	:
O	17981	17982	#
O	17982	17984	li
O	17985	17987	It
O	17988	17994	breaks
O	17995	17998	the
O	17999	18007	contract
O	18008	18012	that
B-api_mention	18013	18017	List
I-api_mention	18017	18018	<
I-api_mention	18018	18019	T
I-api_mention	18019	18020	>
O	18021	18030	interface
O	18031	18034	has
O	18034	18035	,
O	18036	18043	because
O	18044	18047	the
B-api_mention	18048	18051	add
O	18052	18059	methods
O	18060	18066	should
O	18067	18073	ensure
O	18074	18078	that
O	18079	18082	the
O	18083	18090	element
O	18091	18095	will
O	18096	18102	reside
O	18103	18105	in
O	18106	18109	the
O	18110	18115	index
O	18116	18120	that
O	18121	18124	the
O	18125	18129	user
O	18130	18139	specifies
O	18139	18140	.

O	18141	18142	#
O	18142	18144	li
O	18145	18148	Why
O	18149	18157	reinvent
O	18158	18161	the
O	18162	18167	wheel
O	18167	18168	?

O	18169	18172	You
O	18173	18179	should
O	18180	18182	be
O	18183	18188	using
O	18189	18192	the
B-api_mention	18193	18200	TreeSet
O	18201	18203	or
B-api_mention	18204	18213	Multisets
O	18214	18221	instead
O	18222	18224	as
O	18225	18232	pointed
O	18233	18236	out
O	18237	18239	in
O	18240	18243	the
O	18244	18249	first
O	18250	18255	point
O	18256	18261	above
O	18261	18262	.

O	18263	18270	However
O	18271	18273	if
O	18274	18277	you
O	18278	18282	want
O	18283	18285	to
O	18286	18288	do
O	18289	18291	it
O	18292	18294	as
O	18295	18297	an
O	18298	18306	exercise
O	18307	18311	here
O	18312	18314	is
O	18315	18316	a
O	18317	18321	code
O	18322	18328	sample
O	18329	18331	to
O	18332	18335	get
O	18336	18339	you
O	18340	18347	started
O	18347	18348	,
O	18349	18351	it
O	18352	18356	uses
O	18357	18360	the
B-api_mention	18361	18373	AbstractList
O	18374	18382	abstract
O	18383	18388	class
O	18388	18389	:
O	18390	18391	#
O	18391	18394	pre
O	18395	18399	Note
O	18400	18404	that
O	18405	18407	if
O	18408	18411	you
O	18412	18417	haven
O	18417	18418	'
O	18418	18419	t
O	18420	18430	overridden
O	18431	18434	the
O	18435	18442	methods
O	18443	18446	you
O	18447	18451	need
O	18451	18452	,
O	18453	18457	then
O	18458	18461	the
O	18462	18469	default
O	18470	18485	implementations
O	18486	18490	from
B-api_mention	18491	18503	AbstractList
O	18504	18508	will
O	18509	18514	throw
B-api_mention	18515	18544	UnsupportedOperationException
O	18545	18546	s
O	18546	18547	.

O	18549	18557	Question
O	18557	18558	-
O	18558	18565	8725387
O	18565	18566	,
O	18567	18573	answer
O	18573	18574	-
O	18574	18581	8725518

O	18582	18589	Because
O	18590	18593	the
O	18594	18601	concept
O	18602	18604	of
O	18605	18606	a
B-api_mention	18607	18611	List
O	18612	18614	is
O	18615	18627	incompatible
O	18628	18632	with
O	18633	18636	the
O	18637	18644	concept
O	18645	18647	of
O	18648	18650	an
O	18651	18664	automatically
O	18665	18671	sorted
O	18672	18682	collection
O	18682	18683	.

O	18684	18687	The
O	18688	18693	point
O	18694	18696	of
O	18697	18698	a
B-api_mention	18699	18703	List
O	18704	18706	is
O	18707	18711	that
O	18712	18717	after
O	18718	18725	calling
B-api_mention	18726	18730	list
I-api_mention	18730	18731	.
I-api_mention	18731	18734	add
I-api_mention	18734	18735	(
I-api_mention	18735	18739	args
I-api_mention	18739	18740	)
O	18741	18742	,
O	18743	18744	a
O	18745	18749	call
O	18750	18752	to
B-api_mention	18753	18757	list
I-api_mention	18757	18758	.
I-api_mention	18758	18761	get
I-api_mention	18761	18762	(
I-api_mention	18762	18766	args
I-api_mention	18766	18767	)
O	18768	18772	will
O	18773	18779	return
O	18780	18784	elem
O	18785	18786	.

O	18787	18791	With
O	18792	18794	an
O	18795	18799	auto
O	18799	18800	-
O	18800	18806	sorted
O	18807	18811	list
O	18811	18812	,
O	18813	18816	the
O	18817	18824	element
O	18825	18830	could
O	18831	18834	end
O	18835	18837	up
O	18838	18840	in
O	18841	18843	an
O	18844	18853	arbitrary
O	18854	18862	position
O	18862	18863	.

O	18865	18873	Question
O	18873	18874	-
O	18874	18881	8725387
O	18881	18882	,
O	18883	18889	answer
O	18889	18890	-
O	18890	18897	8725550

O	18898	18903	Think
O	18904	18906	of
O	18907	18909	it
O	18910	18914	like
O	18915	18919	this
O	18919	18920	:
O	18921	18924	the
B-api_mention	18925	18929	List
O	18930	18939	interface
O	18940	18943	has
O	18944	18951	methods
O	18952	18956	like
B-api_mention	18957	18960	add
I-api_mention	18960	18961	(
I-api_mention	18961	18965	args
I-api_mention	18965	18966	)
O	18967	18968	,
B-api_mention	18969	18972	set
I-api_mention	18972	18973	(
I-api_mention	18973	18977	args
I-api_mention	18977	18978	)
O	18979	18980	.

O	18981	18984	The
O	18985	18993	contract
O	18994	18996	is
O	18997	19001	that
O	19002	19006	once
O	19007	19010	you
O	19011	19016	added
O	19017	19019	an
O	19020	19027	element
O	19028	19030	at
O	19031	19039	position
O	19040	19041	X
O	19042	19045	you
O	19046	19050	will
O	19051	19055	find
O	19056	19058	it
O	19059	19064	there
O	19065	19071	unless
O	19072	19075	you
O	19076	19079	add
O	19080	19082	or
O	19083	19089	remove
O	19090	19098	elements
O	19099	19105	before
O	19106	19108	it
O	19108	19109	.

O	19110	19112	If
O	19113	19116	any
O	19117	19121	list
O	19122	19136	implementation
O	19137	19142	would
O	19143	19148	store
O	19149	19157	elements
O	19158	19160	in
O	19161	19165	some
O	19166	19171	order
O	19172	19177	other
O	19178	19182	than
O	19183	19188	based
O	19189	19191	on
O	19192	19195	the
O	19196	19201	index
O	19201	19202	,
O	19203	19206	the
O	19207	19212	above
O	19213	19217	list
O	19218	19225	methods
O	19226	19231	would
O	19232	19236	make
O	19237	19239	no
O	19240	19245	sense
O	19245	19246	.

O	19248	19256	Question
O	19256	19257	-
O	19257	19264	8725387
O	19264	19265	,
O	19266	19272	answer
O	19272	19273	-
O	19273	19280	8727998

O	19281	19288	Another
O	19289	19294	point
O	19295	19297	is
O	19298	19301	the
O	19302	19306	time
O	19307	19317	complexity
O	19318	19320	of
O	19321	19327	insert
O	19328	19338	operations
O	19338	19339	.

O	19340	19343	For
O	19344	19345	a
O	19346	19350	list
O	19351	19357	insert
O	19357	19358	,
O	19359	19362	one
O	19363	19370	expects
O	19371	19372	a
O	19373	19383	complexity
O	19384	19386	of
O	19387	19388	O
O	19388	19389	(
O	19389	19390	1
O	19390	19391	)
O	19391	19392	.

O	19393	19396	But
O	19397	19401	this
O	19402	19407	could
O	19408	19411	not
O	19412	19414	be
O	19415	19425	guaranteed
O	19426	19430	with
O	19431	19432	a
O	19433	19439	sorted
O	19440	19444	list
O	19444	19445	.

O	19446	19449	And
O	19450	19453	the
O	19454	19458	most
O	19459	19468	important
O	19469	19474	point
O	19475	19477	is
O	19478	19482	that
O	19483	19488	lists
O	19489	19495	assume
O	19496	19503	nothing
O	19504	19509	about
O	19510	19515	their
O	19516	19524	elements
O	19524	19525	.

O	19526	19529	For
O	19530	19537	example
O	19537	19538	,
O	19539	19542	you
O	19543	19546	can
O	19547	19551	make
O	19552	19557	lists
O	19558	19560	of
O	19561	19567	things
O	19568	19572	that
O	19573	19575	do
O	19576	19579	not
O	19580	19589	implement
B-api_mention	19590	19596	equals
O	19597	19599	or
B-api_mention	19600	19607	compare
O	19608	19609	.

O	19611	19619	Question
O	19619	19620	-
O	19620	19627	8725387
O	19627	19628	,
O	19629	19635	answer
O	19635	19636	-
O	19636	19644	34405789

B-api_mention	19645	19648	Set
O	19649	19652	and
B-api_mention	19653	19656	Map
O	19657	19660	are
O	19661	19664	non
O	19664	19665	-
O	19665	19671	linear
O	19672	19676	data
O	19677	19686	structure
O	19686	19687	.

B-api_mention	19688	19692	List
O	19693	19695	is
O	19696	19702	linear
O	19703	19707	data
O	19708	19717	structure
O	19717	19718	.

O	19719	19722	The
O	19723	19727	tree
O	19728	19732	data
O	19733	19742	structure
B-api_mention	19743	19752	SortedSet
O	19753	19756	and
B-api_mention	19757	19766	SortedMap
O	19767	19777	interfaces
O	19778	19788	implements
B-api_mention	19789	19796	TreeSet
O	19797	19800	and
B-api_mention	19801	19808	TreeMap
O	19809	19821	respectively
O	19822	19827	using
O	19828	19832	used
O	19833	19836	Red
O	19836	19837	-
O	19837	19842	Black
O	19843	19847	tree
O	19848	19862	implementation
O	19863	19872	algorithm
O	19872	19873	.

O	19874	19876	So
O	19877	19879	it
O	19880	19886	ensure
O	19887	19891	that
O	19892	19897	there
O	19898	19901	are
O	19902	19904	no
O	19905	19915	duplicated
O	19916	19921	items
O	19922	19923	(
O	19923	19925	or
O	19926	19930	keys
O	19931	19933	in
O	19934	19938	case
O	19939	19941	of
O	19942	19945	Map
O	19946	19947	)
O	19947	19948	.

O	19949	19950	#
O	19950	19952	li
O	19953	19957	Tree
O	19958	19960	by
O	19961	19971	definition
O	19972	19978	cannot
O	19979	19986	contain
O	19987	19997	duplicates
O	19997	19998	.

O	19999	20000	#
O	20000	20002	li
O	20003	20005	In
B-api_mention	20006	20010	List
O	20011	20013	we
O	20014	20017	can
O	20018	20022	have
O	20023	20033	duplicates
O	20033	20034	,
O	20035	20037	so
O	20038	20043	there
O	20044	20046	is
O	20047	20049	no
B-api_mention	20050	20058	TreeList
O	20059	20060	.

O	20061	20063	So
O	20064	20066	if
O	20067	20069	we
O	20070	20074	want
O	20075	20077	to
O	20078	20082	sort
O	20083	20086	the
O	20087	20091	list
O	20092	20094	we
O	20095	20099	have
O	20100	20102	to
O	20103	20106	use
B-api_mention	20107	20111	java
I-api_mention	20111	20112	.
I-api_mention	20112	20116	util
I-api_mention	20116	20117	.
I-api_mention	20117	20128	Collections
I-api_mention	20128	20129	.
I-api_mention	20129	20133	sort
I-api_mention	20133	20134	(
I-api_mention	20134	20138	args
I-api_mention	20138	20139	)
O	20140	20141	.

O	20143	20151	Question
O	20151	20152	-
O	20152	20159	9297899
O	20159	20160	,
O	20161	20167	answer
O	20167	20168	-
O	20168	20176	25816501

O	20177	20181	Even
O	20182	20188	though
O	20189	20193	this
O	20194	20196	is
O	20197	20200	not
O	20201	20202	a
O	20203	20209	direct
O	20210	20216	answer
O	20217	20219	to
O	20220	20223	the
O	20224	20232	question
O	20232	20233	,
O	20234	20236	it
O	20237	20239	is
O	20240	20242	an
O	20243	20251	addition
O	20252	20254	to
O	20255	20258	the
B-api_mention	20259	20260	.
I-api_mention	20260	20266	length
O	20267	20269	vs
B-api_mention	20270	20271	.
I-api_mention	20271	20275	size
I-api_mention	20275	20276	(
I-api_mention	20276	20280	args
I-api_mention	20280	20281	)
O	20282	20290	argument
O	20290	20291	.

O	20292	20293	I
O	20294	20297	was
O	20298	20309	researching
O	20310	20319	something
O	20320	20327	related
O	20328	20330	to
O	20331	20335	this
O	20336	20344	question
O	20345	20347	so
O	20348	20352	when
O	20353	20354	I
O	20355	20359	came
O	20360	20366	across
O	20367	20369	it
O	20370	20371	I
O	20372	20379	noticed
O	20380	20384	that
O	20385	20388	the
O	20389	20399	definition
O	20399	20400	(
O	20400	20401	s
O	20401	20402	)
O	20403	20411	provided
O	20412	20416	here
O	20417	20418	#
O	20418	20428	blockquote
O	20429	20431	is
O	20432	20435	not
O	20436	20437	"
O	20437	20444	exactly
O	20444	20445	"
O	20446	20453	correct
O	20453	20454	.

O	20455	20458	The
O	20459	20464	field
O	20465	20471	length
O	20472	20480	contains
O	20481	20484	the
O	20485	20491	number
O	20492	20494	of
O	20495	20504	available
O	20505	20511	places
O	20512	20514	to
O	20515	20518	put
O	20519	20520	a
O	20521	20530	component
O	20530	20531	,
O	20532	20535	not
O	20536	20539	the
O	20540	20546	number
O	20547	20549	of
O	20550	20560	components
O	20561	20568	present
O	20569	20571	in
O	20572	20575	the
O	20576	20581	array
O	20581	20582	.

O	20583	20585	So
O	20586	20588	it
O	20589	20599	represents
O	20600	20603	the
O	20604	20609	total
O	20610	20619	available
O	20620	20626	memory
O	20627	20636	allocated
O	20637	20639	to
O	20640	20644	that
O	20645	20650	array
O	20650	20651	,
O	20652	20655	not
O	20656	20659	how
O	20660	20664	much
O	20665	20667	of
O	20668	20672	that
O	20673	20679	memory
O	20680	20682	is
O	20683	20689	filled
O	20689	20690	.

O	20691	20692	#
O	20692	20695	img
O	20696	20703	Example
O	20703	20704	:
O	20705	20706	#
O	20706	20709	pre
O	20710	20716	Output
O	20716	20717	:
O	20718	20719	#
O	20719	20722	pre
O	20723	20730	However
O	20730	20731	,
O	20732	20735	the
O	20736	20737	.
B-api_mention	20737	20741	size
I-api_mention	20741	20742	(
I-api_mention	20742	20746	args
I-api_mention	20746	20747	)
O	20748	20756	property
O	20757	20759	of
O	20760	20763	the
B-api_mention	20764	20773	ArrayList
O	20774	20778	does
O	20779	20783	give
O	20784	20787	the
O	20788	20794	number
O	20795	20797	of
O	20798	20806	elements
O	20807	20809	in
O	20810	20813	the
O	20814	20818	list
O	20818	20819	:
O	20820	20821	#
O	20821	20824	pre
O	20825	20831	Output
O	20831	20832	:
O	20833	20834	#
O	20834	20837	pre

O	20839	20847	Question
O	20847	20848	-
O	20848	20856	10631715
O	20856	20857	,
O	20858	20864	answer
O	20864	20865	-
O	20865	20873	10631738

O	20874	20877	You
O	20878	20883	could
O	20884	20886	do
O	20887	20891	this
O	20891	20892	:
O	20893	20894	#
O	20894	20897	pre
O	20898	20907	Basically
O	20908	20911	the
B-api_mention	20912	20913	.
I-api_mention	20913	20918	split
I-api_mention	20918	20919	(
I-api_mention	20919	20920	)
O	20921	20927	method
O	20928	20932	will
O	20933	20938	split
O	20939	20942	the
O	20943	20949	string
O	20950	20959	according
O	20960	20962	to
O	20963	20964	(
O	20964	20966	in
O	20967	20971	this
O	20972	20976	case
O	20976	20977	)
O	20978	20987	delimiter
O	20988	20991	you
O	20992	20995	are
O	20996	21003	passing
O	21004	21007	and
O	21008	21012	will
O	21013	21019	return
O	21020	21022	an
O	21023	21028	array
O	21029	21031	of
O	21032	21039	strings
O	21039	21040	.

O	21041	21048	However
O	21048	21049	,
O	21050	21053	you
O	21054	21058	seem
O	21059	21061	to
O	21062	21064	be
O	21065	21070	after
O	21071	21072	a
B-api_mention	21073	21077	List
O	21078	21080	of
O	21081	21088	Strings
O	21089	21095	rather
O	21096	21100	than
O	21101	21103	an
O	21104	21109	array
O	21109	21110	,
O	21111	21113	so
O	21114	21117	the
O	21118	21123	array
O	21124	21128	must
O	21129	21131	be
O	21132	21138	turned
O	21139	21143	into
O	21144	21145	a
O	21146	21150	list
O	21151	21153	by
O	21154	21159	using
O	21160	21163	the
B-api_mention	21164	21170	Arrays
I-api_mention	21170	21171	.
I-api_mention	21171	21177	asList
I-api_mention	21177	21178	(
I-api_mention	21178	21179	)
O	21180	21187	utility
O	21187	21188	.

O	21189	21193	Just
O	21194	21196	as
O	21197	21199	an
O	21200	21203	FYI
O	21204	21207	you
O	21208	21213	could
O	21214	21218	also
O	21219	21221	do
O	21222	21231	something
O	21232	21236	like
O	21237	21239	so
O	21239	21240	:
O	21241	21242	#
O	21242	21245	pre
O	21246	21249	But
O	21250	21252	it
O	21253	21255	is
O	21256	21263	usually
O	21264	21270	better
O	21271	21279	practice
O	21280	21282	to
O	21283	21290	program
O	21291	21293	to
O	21294	21296	an
O	21297	21306	interface
O	21307	21313	rather
O	21314	21318	than
O	21319	21321	to
O	21322	21324	an
O	21325	21331	actual
O	21332	21340	concrete
O	21341	21355	implementation
O	21355	21356	,
O	21357	21359	so
O	21360	21361	I
O	21362	21367	would
O	21368	21377	recommend
O	21378	21381	the
O	21382	21385	1st
O	21386	21392	option
O	21392	21393	.

O	21395	21403	Question
O	21403	21404	-
O	21404	21412	10631715
O	21412	21413	,
O	21414	21420	answer
O	21420	21421	-
O	21421	21429	30270403

O	21430	21435	There
O	21436	21438	is
O	21439	21440	a
O	21441	21449	function
O	21450	21456	called
B-api_mention	21457	21467	replaceAll
I-api_mention	21467	21468	(
I-api_mention	21468	21472	args
I-api_mention	21472	21473	)
O	21474	21478	that
O	21479	21482	can
O	21483	21489	remove
O	21490	21493	all
O	21494	21505	whitespaces
O	21506	21508	by
O	21509	21518	replacing
O	21519	21523	them
O	21524	21528	with
O	21529	21537	whatever
O	21538	21541	you
O	21542	21546	want
O	21546	21547	.

O	21548	21550	As
O	21551	21553	an
O	21554	21561	example
O	21562	21563	#
O	21563	21566	pre
O	21567	21571	will
O	21572	21576	give
O	21577	21580	you
O	21580	21581	:
O	21582	21587	First
O	21587	21588	:
O	21588	21590	15
O	21590	21591	.
O	21591	21593	94
O	21593	21594	,
O	21595	21601	Second
O	21601	21602	:
O	21602	21604	16
O	21604	21605	.
O	21605	21607	01

O	21609	21617	Question
O	21617	21618	-
O	21618	21626	10631715
O	21626	21627	,
O	21628	21634	answer
O	21634	21635	-
O	21635	21643	32362691

O	21644	21647	For
O	21648	21660	completeness
O	21660	21661	,
O	21662	21667	using
O	21668	21671	the
O	21672	21677	Guava
O	21678	21685	library
O	21685	21686	,
O	21687	21690	you
O	21690	21691	'
O	21691	21692	d
O	21693	21695	do
O	21695	21696	:
B-api_mention	21697	21705	Splitter
I-api_mention	21705	21706	.
I-api_mention	21706	21708	on
I-api_mention	21708	21709	(
I-api_mention	21709	21713	args
I-api_mention	21713	21714	)
I-api_mention	21714	21715	.
I-api_mention	21715	21720	split
I-api_mention	21720	21721	(
I-api_mention	21721	21725	args
I-api_mention	21725	21726	)
O	21727	21734	Another
O	21735	21742	example
O	21742	21743	:
O	21744	21745	#
O	21745	21748	pre
B-api_mention	21749	21757	Splitter
I-api_mention	21757	21758	.
I-api_mention	21758	21763	split
I-api_mention	21763	21764	(
I-api_mention	21764	21768	args
I-api_mention	21768	21769	)
O	21770	21777	returns
O	21778	21780	an
O	21781	21789	Iterable
O	21789	21790	,
O	21791	21793	so
O	21794	21796	if
O	21797	21800	you
O	21801	21805	need
O	21806	21807	a
O	21808	21812	List
O	21812	21813	,
O	21814	21818	wrap
O	21819	21821	it
O	21822	21824	in
B-api_mention	21825	21830	Lists
I-api_mention	21830	21831	.
I-api_mention	21831	21843	newArrayList
I-api_mention	21843	21844	(
I-api_mention	21844	21848	args
I-api_mention	21848	21849	)
O	21850	21852	as
O	21853	21858	above
O	21858	21859	.

O	21860	21869	Otherwise
O	21870	21874	just
O	21875	21877	go
O	21878	21882	with
O	21883	21886	the
O	21887	21895	Iterable
O	21895	21896	,
O	21897	21900	for
O	21901	21908	example
O	21908	21909	:
O	21910	21911	#
O	21911	21914	pre
O	21915	21919	Note
O	21920	21923	how
B-api_mention	21924	21935	trimResults
I-api_mention	21935	21936	(
I-api_mention	21936	21940	args
I-api_mention	21940	21941	)
O	21942	21949	handles
O	21950	21953	all
O	21954	21958	your
O	21959	21967	trimming
O	21968	21973	needs
O	21974	21981	without
O	21982	21988	having
O	21989	21991	to
O	21992	21997	tweak
O	21998	22005	regexes
O	22006	22009	for
O	22010	22016	corner
O	22017	22022	cases
O	22023	22024	,
O	22025	22027	as
O	22028	22032	with
B-api_mention	22033	22039	String
I-api_mention	22039	22040	.
I-api_mention	22040	22045	split
I-api_mention	22045	22046	(
I-api_mention	22046	22050	args
I-api_mention	22050	22051	)
O	22052	22053	.

O	22054	22056	If
O	22057	22061	your
O	22062	22069	project
O	22070	22074	uses
O	22075	22080	Guava
O	22081	22088	already
O	22088	22089	,
O	22090	22094	this
O	22095	22101	should
O	22102	22104	be
O	22105	22109	your
O	22110	22119	preferred
O	22120	22128	solution
O	22128	22129	.

O	22130	22133	See
B-api_mention	22134	22142	Splitter
O	22143	22156	documentation
O	22157	22159	in
O	22160	22165	Guava
O	22166	22170	User
O	22171	22176	Guide
O	22177	22179	or
O	22180	22183	the
O	22184	22192	javadocs
O	22193	22196	for
O	22197	22201	more
O	22202	22215	configuration
O	22216	22223	options
O	22223	22224	.

O	22226	22234	Question
O	22234	22235	-
O	22235	22243	10977992
O	22243	22244	,
O	22245	22251	answer
O	22251	22252	-
O	22252	22260	17939167

O	22261	22266	There
O	22267	22270	are
O	22271	22274	two
O	22275	22286	differences
O	22286	22287	:
O	22288	22289	#
O	22289	22291	li
O	22292	22294	We
O	22295	22298	can
O	22299	22302	use
O	22303	22311	Iterator
O	22312	22314	to
O	22315	22323	traverse
B-api_mention	22324	22327	Set
O	22328	22331	and
B-api_mention	22332	22336	List
O	22337	22340	and
O	22341	22345	also
B-api_mention	22346	22349	Map
O	22350	22354	type
O	22355	22357	of
O	22358	22365	Objects
O	22365	22366	.

O	22367	22372	While
O	22373	22374	a
B-api_mention	22375	22387	ListIterator
O	22388	22391	can
O	22392	22394	be
O	22395	22399	used
O	22400	22402	to
O	22403	22411	traverse
O	22412	22415	for
O	22416	22420	List
O	22420	22421	-
O	22421	22425	type
O	22426	22433	Objects
O	22433	22434	,
O	22435	22438	but
O	22439	22442	not
O	22443	22446	for
O	22447	22450	Set
O	22450	22451	-
O	22451	22455	type
O	22456	22458	of
O	22459	22466	Objects
O	22466	22467	.

O	22468	22472	That
O	22473	22475	is
O	22475	22476	,
O	22477	22479	we
O	22480	22483	can
O	22484	22487	get
O	22488	22489	a
O	22490	22498	Iterator
O	22499	22505	object
O	22506	22508	by
O	22509	22514	using
B-api_mention	22515	22518	Set
O	22519	22522	and
B-api_mention	22523	22527	List
O	22527	22528	,
O	22529	22532	see
O	22533	22537	here
O	22537	22538	:
O	22539	22541	By
O	22542	22547	using
O	22548	22556	Iterator
O	22557	22559	we
O	22560	22563	can
O	22564	22572	retrieve
O	22573	22576	the
O	22577	22585	elements
O	22586	22590	from
B-api_mention	22591	22601	Collection
O	22602	22608	Object
O	22609	22611	in
O	22612	22619	forward
O	22620	22629	direction
O	22630	22634	only
O	22634	22635	.

O	22636	22643	Methods
O	22644	22646	in
O	22647	22655	Iterator
O	22655	22656	:
O	22657	22658	#
O	22658	22660	li
B-api_mention	22661	22668	hasNext
I-api_mention	22668	22669	(
I-api_mention	22669	22673	args
I-api_mention	22673	22674	)
O	22675	22676	#
O	22676	22678	li
B-api_mention	22679	22683	next
I-api_mention	22683	22684	(
I-api_mention	22684	22688	args
I-api_mention	22688	22689	)
O	22690	22691	#
O	22691	22693	li
B-api_mention	22694	22700	remove
I-api_mention	22700	22701	(
I-api_mention	22701	22705	args
I-api_mention	22705	22706	)
O	22707	22708	#
O	22708	22711	pre
O	22712	22713	#
O	22713	22715	li
O	22716	22719	But
O	22720	22722	we
O	22723	22726	get
B-api_mention	22727	22739	ListIterator
O	22740	22746	object
O	22747	22751	only
O	22752	22756	from
O	22757	22760	the
B-api_mention	22761	22765	List
O	22766	22775	interface
O	22775	22776	,
O	22777	22780	see
O	22781	22785	here
O	22785	22786	:
O	22787	22792	where
O	22793	22795	as
O	22796	22797	a
B-api_mention	22798	22810	ListIterator
O	22811	22817	allows
O	22818	22821	you
O	22822	22824	to
O	22825	22833	traverse
O	22834	22836	in
O	22837	22843	either
O	22844	22854	directions
O	22855	22856	(
O	22856	22860	Both
O	22861	22868	forward
O	22869	22872	and
O	22873	22881	backward
O	22881	22882	)
O	22882	22883	.

O	22884	22886	So
O	22887	22889	it
O	22890	22893	has
O	22894	22897	two
O	22898	22902	more
O	22903	22910	methods
O	22911	22915	like
B-api_mention	22916	22927	hasPrevious
I-api_mention	22927	22928	(
I-api_mention	22928	22932	args
I-api_mention	22932	22933	)
O	22934	22937	and
B-api_mention	22938	22946	previous
I-api_mention	22946	22947	(
I-api_mention	22947	22951	args
I-api_mention	22951	22952	)
O	22953	22958	other
O	22959	22963	than
O	22964	22969	those
O	22970	22972	of
B-api_mention	22973	22981	Iterator
O	22981	22982	.

O	22983	22987	Also
O	22987	22988	,
O	22989	22991	we
O	22992	22995	can
O	22996	22999	get
O	23000	23007	indexes
O	23008	23010	of
O	23011	23014	the
O	23015	23019	next
O	23020	23022	or
O	23023	23031	previous
O	23032	23040	elements
O	23041	23042	(
O	23042	23047	using
B-api_mention	23048	23057	nextIndex
I-api_mention	23057	23058	(
I-api_mention	23058	23062	args
I-api_mention	23062	23063	)
O	23064	23067	and
B-api_mention	23068	23081	previousIndex
I-api_mention	23081	23082	(
I-api_mention	23082	23086	args
I-api_mention	23086	23087	)
O	23088	23100	respectively
O	23101	23102	)
O	23103	23110	Methods
O	23111	23113	in
B-api_mention	23114	23126	ListIterator
O	23126	23127	:
O	23128	23129	#
O	23129	23131	li
B-api_mention	23132	23139	hasNext
I-api_mention	23139	23140	(
I-api_mention	23140	23141	)
O	23142	23143	#
O	23143	23145	li
B-api_mention	23146	23150	next
I-api_mention	23150	23151	(
I-api_mention	23151	23152	)
O	23153	23154	#
O	23154	23156	li
B-api_mention	23157	23165	previous
I-api_mention	23165	23166	(
I-api_mention	23166	23167	)
O	23168	23169	#
O	23169	23171	li
B-api_mention	23172	23183	hasPrevious
I-api_mention	23183	23184	(
I-api_mention	23184	23185	)
O	23186	23187	#
O	23187	23189	li
B-api_mention	23190	23196	remove
I-api_mention	23196	23197	(
I-api_mention	23197	23198	)
O	23199	23200	#
O	23200	23202	li
B-api_mention	23203	23212	nextIndex
I-api_mention	23212	23213	(
I-api_mention	23213	23214	)
O	23215	23216	#
O	23216	23218	li
B-api_mention	23219	23232	previousIndex
I-api_mention	23232	23233	(
I-api_mention	23233	23234	)
I-api_mention	23235	23247	ListIterator
O	23248	23260	listiterator
O	23261	23262	=
B-api_mention	23263	23267	List
I-api_mention	23267	23268	.
I-api_mention	23268	23280	listIterator
I-api_mention	23280	23281	(
I-api_mention	23281	23285	args
I-api_mention	23285	23286	)
O	23286	23287	;
O	23288	23289	i
O	23289	23290	.
O	23290	23291	e
O	23291	23292	.
O	23292	23293	,
O	23294	23296	we
O	23297	23300	can
O	23300	23301	'
O	23301	23302	t
O	23303	23306	get
B-api_mention	23307	23319	ListIterator
O	23320	23326	object
O	23327	23331	from
B-api_mention	23332	23335	Set
O	23336	23345	interface
O	23345	23346	.

O	23348	23356	Question
O	23356	23357	-
O	23357	23364	9510125
O	23364	23365	,
O	23366	23372	answer
O	23372	23373	-
O	23373	23380	9511578

O	23381	23385	Just
O	23386	23390	IMHO
O	23390	23391	.

O	23392	23395	Not
O	23396	23400	sure
O	23401	23403	it
O	23403	23404	'
O	23404	23405	s
O	23406	23409	100
O	23409	23410	%
O	23411	23418	correct
O	23418	23419	.

B-api_mention	23420	23430	invalidate
I-api_mention	23430	23431	(
I-api_mention	23431	23435	args
I-api_mention	23435	23436	)
O	23437	23442	marks
O	23443	23446	the
O	23447	23456	container
O	23457	23459	as
O	23460	23467	invalid
O	23467	23468	.

O	23469	23474	Means
O	23475	23478	the
O	23479	23486	content
O	23487	23489	is
O	23490	23497	somehow
O	23498	23503	wrong
O	23504	23507	and
O	23508	23512	must
O	23513	23515	be
O	23516	23523	relayed
O	23524	23527	out
O	23527	23528	.

O	23529	23532	But
O	23533	23535	it
O	23535	23536	'
O	23536	23537	s
O	23538	23542	just
O	23543	23544	a
O	23545	23549	kind
O	23550	23552	of
O	23553	23557	mark
O	23557	23558	/
O	23558	23562	flag
O	23562	23563	.

O	23564	23566	It
O	23566	23567	'
O	23567	23568	s
O	23569	23577	possible
O	23578	23582	that
O	23583	23591	multiple
O	23592	23599	invalid
O	23600	23610	containers
O	23611	23615	must
O	23616	23618	be
O	23619	23628	refreshed
O	23629	23634	later
O	23634	23635	.

B-api_mention	23636	23644	validate
I-api_mention	23644	23645	(
I-api_mention	23645	23649	args
I-api_mention	23649	23650	)
O	23651	23659	performs
O	23660	23668	relayout
O	23668	23669	.

O	23670	23672	It
O	23673	23678	means
O	23679	23686	invalid
O	23687	23694	content
O	23695	23697	is
O	23698	23703	asked
O	23704	23707	for
O	23708	23711	all
O	23712	23715	the
O	23716	23721	sizes
O	23722	23725	and
O	23726	23729	all
O	23730	23733	the
O	23734	23747	subcomponents
O	23747	23748	'
O	23749	23754	sizes
O	23755	23758	are
O	23759	23762	set
O	23763	23765	to
O	23766	23772	proper
O	23773	23779	values
O	23780	23782	by
B-api_mention	23783	23796	LayoutManager
O	23797	23798	.

B-api_mention	23799	23809	revalidate
I-api_mention	23809	23810	(
I-api_mention	23810	23814	args
I-api_mention	23814	23815	)
O	23816	23818	is
O	23819	23823	just
O	23824	23827	sum
O	23828	23830	of
O	23831	23835	both
O	23835	23836	.

O	23837	23839	It
O	23840	23845	marks
O	23846	23849	the
O	23850	23859	container
O	23860	23862	as
O	23863	23870	invalid
O	23871	23874	and
O	23875	23883	performs
O	23884	23890	layout
O	23891	23893	of
O	23894	23897	the
O	23898	23907	container
O	23907	23908	.

O	23910	23918	Question
O	23918	23919	-
O	23919	23926	9510125
O	23926	23927	,
O	23928	23934	answer
O	23934	23935	-
O	23935	23942	9511880

B-api_mention	23943	23951	validate
I-api_mention	23951	23952	(
I-api_mention	23952	23956	args
I-api_mention	23956	23957	)
O	23958	23959	:
O	23960	23962	In
O	23963	23968	Swing
O	23969	23973	when
O	23974	23977	you
O	23978	23984	create
O	23985	23994	Component
O	23994	23995	,
O	23996	23998	it
O	23999	24001	is
O	24002	24005	not
O	24006	24011	valid
O	24012	24013	i
O	24013	24014	.
O	24014	24015	e
O	24015	24016	.
O	24017	24019	it
O	24019	24020	'
O	24020	24021	s
O	24022	24027	valid
O	24028	24036	property
O	24037	24039	is
O	24040	24045	false
O	24046	24047	.

O	24048	24049	A
O	24050	24059	component
O	24060	24062	is
O	24063	24067	said
O	24068	24070	to
O	24071	24073	be
O	24074	24079	valid
O	24079	24080	,
O	24081	24085	when
O	24086	24088	it
O	24088	24089	'
O	24089	24090	s
O	24091	24096	width
O	24096	24097	,
O	24098	24104	height
O	24104	24105	,
O	24106	24114	location
O	24115	24118	and
O	24119	24124	stuff
O	24125	24128	has
O	24129	24133	been
O	24134	24144	determined
O	24144	24145	.

O	24146	24150	This
O	24151	24153	is
O	24154	24161	usually
O	24162	24166	done
O	24167	24169	by
O	24170	24177	calling
O	24178	24183	their
B-api_mention	24184	24192	validate
I-api_mention	24192	24193	(
I-api_mention	24193	24197	args
I-api_mention	24197	24198	)
O	24199	24205	method
O	24205	24206	,
O	24207	24215	directly
O	24216	24218	or
O	24219	24229	indirectly
O	24229	24230	.

O	24231	24235	When
O	24236	24238	we
O	24239	24243	call
B-api_mention	24244	24252	validate
I-api_mention	24252	24253	(
I-api_mention	24253	24257	args
I-api_mention	24257	24258	)
O	24259	24261	on
O	24262	24272	containers
O	24272	24273	,
O	24274	24276	it
O	24277	24281	will
O	24282	24290	validate
O	24291	24294	the
O	24295	24304	container
O	24305	24306	(
O	24306	24308	if
O	24309	24311	it
O	24312	24314	is
O	24315	24322	invalid
O	24322	24323	)
O	24324	24326	by
O	24327	24334	calling
O	24335	24338	its
B-api_mention	24339	24347	doLayout
I-api_mention	24347	24348	(
I-api_mention	24348	24352	args
I-api_mention	24352	24353	)
O	24354	24360	method
O	24360	24361	,
O	24362	24367	which
O	24368	24377	typically
O	24378	24382	will
O	24383	24389	invoke
O	24390	24393	the
B-api_mention	24394	24407	LayoutManager
O	24408	24409	.

O	24410	24413	Now
O	24414	24418	each
O	24419	24424	child
O	24425	24431	placed
O	24432	24434	on
O	24435	24439	this
O	24440	24449	container
O	24450	24454	will
O	24455	24457	be
O	24458	24467	validated
O	24468	24479	recursively
O	24479	24480	,
O	24481	24483	so
O	24484	24488	that
O	24489	24492	the
O	24493	24499	entire
O	24500	24504	tree
O	24505	24509	will
O	24510	24512	be
O	24513	24517	laid
O	24518	24521	out
O	24522	24525	and
O	24526	24530	will
O	24531	24537	become
O	24538	24543	valid
O	24543	24544	.

B-api_mention	24545	24555	revalidate
I-api_mention	24555	24556	(
I-api_mention	24556	24560	args
I-api_mention	24560	24561	)
O	24562	24563	:
B-api_mention	24564	24574	revalidate
I-api_mention	24574	24575	(
I-api_mention	24575	24579	args
I-api_mention	24579	24580	)
O	24581	24583	is
O	24584	24586	to
O	24587	24589	be
O	24590	24596	called
O	24597	24601	when
O	24602	24605	you
O	24606	24612	change
O	24613	24615	an
O	24616	24625	attribute
O	24626	24630	that
O	24631	24636	would
O	24637	24643	affect
O	24644	24649	their
O	24650	24655	width
O	24655	24656	/
O	24656	24662	height
O	24663	24666	and
O	24667	24671	call
O	24672	24679	repaint
O	24679	24680	(
O	24680	24681	)
O	24682	24686	when
O	24687	24690	you
O	24691	24697	change
O	24698	24700	an
O	24701	24710	attribute
O	24711	24715	that
O	24716	24721	would
O	24722	24728	affect
O	24729	24734	their
O	24735	24745	appearance
O	24745	24746	.

O	24747	24750	For
O	24751	24758	Example
O	24758	24759	,
O	24760	24762	If
O	24763	24767	your
O	24768	24774	JFrame
O	24775	24783	contains
O	24784	24785	a
O	24786	24792	JPanel
O	24793	24794	,
O	24795	24798	now
O	24799	24801	at
O	24802	24809	certain
O	24810	24815	point
O	24816	24818	of
O	24819	24823	time
O	24824	24827	you
O	24828	24835	removed
O	24836	24840	that
O	24841	24847	JPanel
O	24848	24851	and
O	24852	24860	inserted
O	24861	24862	a
O	24863	24866	new
O	24867	24870	one
O	24871	24873	in
O	24874	24876	it
O	24876	24877	'
O	24877	24878	s
O	24879	24884	place
O	24884	24885	,
O	24886	24895	depending
O	24896	24898	on
O	24899	24902	the
O	24903	24911	contents
O	24912	24914	of
O	24915	24918	the
O	24919	24924	newly
O	24925	24931	placed
O	24932	24938	JPanel
O	24939	24940	,
O	24941	24944	the
O	24945	24949	size
O	24950	24952	of
O	24953	24956	the
O	24957	24967	components
O	24968	24974	inside
O	24975	24978	the
O	24979	24985	JPanel
O	24986	24988	as
O	24989	24993	well
O	24994	24996	as
O	24997	25000	The
O	25001	25010	CONTAINER
O	25011	25017	itself
O	25018	25019	(
O	25019	25021	by
O	25022	25028	virtue
O	25029	25031	of
O	25032	25035	the
O	25036	25042	layout
O	25043	25050	manager
O	25051	25055	used
O	25056	25058	by
O	25059	25061	it
O	25061	25062	)
O	25062	25063	,
O	25064	25071	changes
O	25071	25072	.

O	25073	25078	Which
O	25079	25085	pushes
O	25086	25088	it
O	25089	25091	to
O	25092	25095	the
O	25096	25106	invalidate
O	25107	25112	state
O	25112	25113	.

O	25114	25116	So
O	25117	25119	in
O	25120	25125	order
O	25126	25128	to
O	25129	25137	validate
O	25138	25142	this
O	25143	25149	change
O	25149	25150	,
O	25151	25154	you
O	25155	25159	have
O	25160	25162	to
O	25163	25173	explicitly
O	25174	25178	call
B-api_mention	25179	25189	revalidate
I-api_mention	25189	25190	(
I-api_mention	25190	25194	args
I-api_mention	25194	25195	)
O	25196	25197	.

B-api_mention	25198	25208	invalidate
I-api_mention	25208	25209	(
I-api_mention	25209	25213	args
I-api_mention	25213	25214	)
O	25215	25216	:
O	25217	25221	This
O	25222	25227	thing
O	25228	25230	is
O	25231	25240	something
O	25240	25241	,
O	25242	25243	I
O	25244	25247	had
O	25248	25253	never
O	25254	25258	used
O	25258	25259	,
O	25260	25262	so
O	25263	25268	might
O	25269	25271	be
O	25272	25275	not
O	25276	25280	much
O	25281	25283	of
O	25284	25287	the
O	25288	25292	info
O	25293	25294	I
O	25295	25298	can
O	25299	25303	give
O	25303	25304	.

O	25305	25308	But
O	25309	25314	seems
O	25315	25319	like
O	25320	25323	the
O	25324	25332	scenario
O	25333	25342	presented
O	25343	25348	above
O	25348	25349	,
O	25350	25353	can
O	25354	25358	give
O	25359	25360	a
O	25361	25364	bit
O	25365	25367	of
O	25368	25372	hint
O	25372	25373	,
O	25374	25376	as
O	25377	25379	to
O	25380	25384	what
O	25385	25392	happens
O	25393	25395	in
B-api_mention	25396	25406	invalidate
I-api_mention	25406	25407	(
I-api_mention	25407	25411	args
I-api_mention	25411	25412	)
O	25413	25414	.

O	25416	25424	Question
O	25424	25425	-
O	25425	25433	10904911
O	25433	25434	,
O	25435	25441	answer
O	25441	25442	-
O	25442	25450	10904956

O	25451	25455	What
O	25456	25459	you
O	25460	25464	want
O	25465	25467	is
O	25468	25471	the
B-api_mention	25472	25478	Arrays
I-api_mention	25478	25479	.
I-api_mention	25479	25487	toString
I-api_mention	25487	25488	(
I-api_mention	25488	25492	args
I-api_mention	25492	25493	)
O	25494	25500	method
O	25500	25501	:
O	25502	25503	#
O	25503	25506	pre
O	25507	25512	There
O	25513	25515	is
O	25516	25517	a
O	25518	25524	static
B-api_mention	25525	25531	Arrays
I-api_mention	25531	25532	.
I-api_mention	25532	25540	toString
O	25541	25547	helper
O	25548	25554	method
O	25555	25558	for
O	25559	25564	every
O	25565	25574	different
O	25575	25584	primitive
O	25585	25589	java
O	25590	25594	type
O	25594	25595	;
O	25596	25599	the
O	25600	25603	one
O	25604	25607	for
O	25608	25611	int
O	25611	25612	[
O	25612	25613	]
O	25614	25618	says
O	25619	25623	this
O	25624	25625	:
O	25626	25627	#
O	25627	25637	blockquote

O	25639	25647	Question
O	25647	25648	-
O	25648	25655	9481865
O	25655	25656	,
O	25657	25663	answer
O	25663	25664	-
O	25664	25671	9481939

O	25672	25675	You
O	25676	25679	can
O	25680	25683	use
B-api_mention	25684	25688	java
I-api_mention	25688	25689	.
I-api_mention	25689	25692	net
I-api_mention	25692	25693	.
I-api_mention	25693	25704	InetAddress
O	25705	25708	API
O	25708	25709	.

O	25710	25713	Try
O	25714	25718	this
O	25719	25720	:
B-api_mention	25721	25732	InetAddress
I-api_mention	25732	25733	.
I-api_mention	25733	25745	getLocalHost
I-api_mention	25745	25746	(
I-api_mention	25746	25750	args
I-api_mention	25750	25751	)
I-api_mention	25751	25752	.
I-api_mention	25752	25766	getHostAddress
I-api_mention	25766	25767	(
I-api_mention	25767	25771	args
I-api_mention	25771	25772	)
O	25772	25773	;

O	25775	25783	Question
O	25783	25784	-
O	25784	25791	9481865
O	25791	25792	,
O	25793	25799	answer
O	25799	25800	-
O	25800	25807	9482369

O	25808	25812	This
O	25813	25818	could
O	25819	25821	be
O	25822	25823	a
O	25824	25827	bit
O	25828	25834	tricky
O	25835	25837	in
O	25838	25841	the
O	25842	25846	most
O	25847	25854	general
O	25855	25859	case
O	25859	25860	.

O	25861	25863	On
O	25864	25867	the
O	25868	25872	face
O	25873	25875	of
O	25876	25878	it
O	25878	25879	,
B-api_mention	25880	25891	InetAddress
I-api_mention	25891	25892	.
I-api_mention	25892	25904	getLocalHost
I-api_mention	25904	25905	(
I-api_mention	25905	25909	args
I-api_mention	25909	25910	)
O	25911	25917	should
O	25918	25922	give
O	25923	25926	you
O	25927	25930	the
O	25931	25933	IP
O	25934	25941	address
O	25942	25944	of
O	25945	25949	this
O	25950	25954	host
O	25954	25955	.

O	25956	25959	The
O	25960	25967	problem
O	25968	25970	is
O	25971	25975	that
O	25976	25977	a
O	25978	25982	host
O	25983	25988	could
O	25989	25993	have
O	25994	25998	lots
O	25999	26001	of
O	26002	26009	network
O	26010	26020	interfaces
O	26020	26021	,
O	26022	26025	and
O	26026	26028	an
O	26029	26038	interface
O	26039	26044	could
O	26045	26047	be
O	26048	26053	bound
O	26054	26056	to
O	26057	26061	more
O	26062	26066	than
O	26067	26070	one
O	26071	26073	IP
O	26074	26081	address
O	26081	26082	.

O	26083	26086	And
O	26087	26089	to
O	26090	26093	top
O	26094	26098	that
O	26098	26099	,
O	26100	26103	not
O	26104	26107	all
O	26108	26110	IP
O	26111	26120	addresses
O	26121	26125	will
O	26126	26128	be
O	26129	26138	reachable
O	26139	26146	outside
O	26147	26149	of
O	26150	26154	your
O	26155	26162	machine
O	26163	26165	or
O	26166	26170	your
O	26171	26174	LAN
O	26174	26175	.

O	26176	26179	For
O	26180	26187	example
O	26187	26188	,
O	26189	26193	they
O	26194	26199	could
O	26200	26202	be
O	26203	26205	IP
O	26206	26215	addresses
O	26216	26219	for
O	26220	26227	virtual
O	26228	26235	network
O	26236	26243	devices
O	26243	26244	,
O	26245	26252	private
O	26253	26260	network
O	26261	26263	IP
O	26264	26273	addresses
O	26273	26274	,
O	26275	26278	and
O	26279	26281	so
O	26282	26284	on
O	26284	26285	.

O	26286	26290	What
O	26291	26295	this
O	26296	26301	means
O	26302	26304	is
O	26305	26309	that
O	26310	26313	the
O	26314	26316	IP
O	26317	26324	address
O	26325	26333	returned
O	26334	26336	by
B-api_mention	26337	26348	InetAddress
I-api_mention	26348	26349	.
I-api_mention	26349	26361	getLocalHost
I-api_mention	26361	26362	(
I-api_mention	26362	26366	args
I-api_mention	26366	26367	)
O	26368	26373	might
O	26374	26377	not
O	26378	26380	be
O	26381	26384	the
O	26385	26390	right
O	26391	26394	one
O	26395	26397	to
O	26398	26401	use
O	26401	26402	.

O	26403	26406	How
O	26407	26410	can
O	26411	26414	you
O	26415	26419	deal
O	26420	26424	with
O	26425	26429	this
O	26429	26430	?

O	26431	26432	#
O	26432	26434	li
O	26435	26438	One
O	26439	26447	approach
O	26448	26450	is
O	26451	26453	to
O	26454	26457	use
B-api_mention	26458	26474	NetworkInterface
I-api_mention	26474	26475	.
I-api_mention	26475	26495	getNetworkInterfaces
I-api_mention	26495	26496	(
I-api_mention	26496	26500	args
I-api_mention	26500	26501	)
O	26502	26504	to
O	26505	26508	get
O	26509	26512	all
O	26513	26515	of
O	26516	26519	the
O	26520	26525	known
O	26526	26533	network
O	26534	26544	interfaces
O	26545	26547	on
O	26548	26551	the
O	26552	26556	host
O	26556	26557	,
O	26558	26561	and
O	26562	26566	then
O	26567	26574	iterate
O	26575	26579	over
O	26580	26584	each
O	26585	26587	NI
O	26587	26588	'
O	26588	26589	s
O	26590	26599	addresses
O	26599	26600	.

O	26601	26602	#
O	26602	26604	li
O	26605	26612	Another
O	26613	26621	approach
O	26622	26624	is
O	26625	26627	to
O	26628	26629	(
O	26629	26636	somehow
O	26636	26637	)
O	26638	26641	get
O	26642	26645	the
O	26646	26656	externally
O	26657	26667	advertized
O	26668	26672	FQDN
O	26673	26676	for
O	26677	26680	the
O	26681	26685	host
O	26685	26686	,
O	26687	26690	and
O	26691	26694	use
B-api_mention	26695	26706	InetAddress
I-api_mention	26706	26707	.
I-api_mention	26707	26716	getByName
I-api_mention	26716	26717	(
I-api_mention	26717	26721	args
I-api_mention	26721	26722	)
O	26723	26725	to
O	26726	26730	look
O	26731	26733	up
O	26734	26737	the
O	26738	26745	primary
O	26746	26748	IP
O	26749	26756	address
O	26756	26757	.

O	26758	26759	(
O	26759	26762	But
O	26763	26766	how
O	26767	26769	do
O	26770	26773	you
O	26774	26777	get
O	26778	26780	it
O	26780	26781	,
O	26782	26785	and
O	26786	26789	how
O	26790	26792	do
O	26793	26796	you
O	26797	26801	deal
O	26802	26806	with
O	26807	26808	a
O	26809	26812	DNS
O	26812	26813	-
O	26813	26818	based
O	26819	26823	load
O	26824	26832	balancer
O	26832	26833	?
O	26833	26834	)
O	26835	26836	#
O	26836	26838	li
O	26839	26840	A
O	26841	26850	variation
O	26851	26853	of
O	26854	26857	the
O	26858	26866	previous
O	26867	26869	is
O	26870	26872	to
O	26873	26876	get
O	26877	26880	the
O	26881	26890	preferred
O	26891	26895	FQDN
O	26896	26900	from
O	26901	26902	a
O	26903	26909	config
O	26910	26914	file
O	26915	26917	or
O	26918	26919	a
O	26920	26927	command
O	26928	26932	line
O	26933	26942	parameter
O	26942	26943	.

O	26944	26945	#
O	26945	26947	li
O	26948	26955	Another
O	26956	26965	variation
O	26966	26968	is
O	26969	26971	to
O	26972	26975	get
O	26976	26979	the
O	26980	26989	preferred
O	26990	26992	IP
O	26993	27000	address
O	27001	27005	from
O	27006	27007	a
O	27008	27014	config
O	27015	27019	file
O	27020	27022	or
O	27023	27024	a
O	27025	27032	command
O	27033	27037	line
O	27038	27047	parameter
O	27047	27048	.

O	27049	27051	In
O	27052	27059	summary
O	27059	27060	,
B-api_mention	27061	27072	InetAddress
I-api_mention	27072	27073	.
I-api_mention	27073	27085	getLocalHost
I-api_mention	27085	27086	(
I-api_mention	27086	27090	args
I-api_mention	27090	27091	)
O	27092	27096	will
O	27097	27106	typically
O	27107	27111	work
O	27111	27112	,
O	27113	27116	but
O	27117	27120	you
O	27121	27124	may
O	27125	27129	need
O	27130	27132	to
O	27133	27140	provide
O	27141	27143	an
O	27144	27155	alternative
O	27156	27162	method
O	27163	27166	for
O	27167	27170	the
O	27171	27176	cases
O	27177	27182	where
O	27183	27187	your
O	27188	27192	code
O	27193	27195	is
O	27196	27199	run
O	27200	27202	in
O	27203	27205	an
O	27206	27217	environment
O	27218	27222	with
O	27223	27224	"
O	27224	27235	complicated
O	27235	27236	"
O	27237	27247	networking
O	27247	27248	.

O	27249	27250	#
O	27250	27260	blockquote
O	27261	27262	#
O	27262	27264	li
O	27265	27268	Any
O	27269	27276	address
O	27277	27279	in
O	27280	27283	the
O	27284	27289	range
O	27290	27293	127
O	27293	27294	.
O	27294	27297	xxx
O	27297	27298	.
O	27298	27301	xxx
O	27301	27302	.
O	27302	27305	xxx
O	27306	27308	is
O	27309	27310	a
O	27311	27312	"
O	27312	27320	loopback
O	27320	27321	"
O	27322	27329	address
O	27329	27330	.

O	27331	27333	It
O	27334	27336	is
O	27337	27341	only
O	27342	27349	visible
O	27350	27352	to
O	27353	27354	"
O	27354	27358	this
O	27358	27359	"
O	27360	27364	host
O	27364	27365	.

O	27366	27367	#
O	27367	27369	li
O	27370	27373	Any
O	27374	27381	address
O	27382	27384	in
O	27385	27388	the
O	27389	27394	range
O	27395	27398	192
O	27398	27399	.
O	27399	27402	168
O	27402	27403	.
O	27403	27406	xxx
O	27406	27407	.
O	27407	27410	xxx
O	27411	27413	is
O	27414	27415	a
O	27416	27423	private
O	27424	27425	(
O	27425	27428	aka
O	27429	27433	site
O	27434	27439	local
O	27439	27440	)
O	27441	27443	IP
O	27444	27451	address
O	27451	27452	.

O	27453	27458	These
O	27459	27462	are
O	27463	27471	reserved
O	27472	27475	for
O	27476	27479	use
O	27480	27486	within
O	27487	27489	an
O	27490	27502	organization
O	27502	27503	.

O	27504	27507	The
O	27508	27512	same
O	27513	27520	applies
O	27521	27523	to
O	27524	27526	10
O	27526	27527	.
O	27527	27530	xxx
O	27530	27531	.
O	27531	27534	xxx
O	27534	27535	.
O	27535	27538	xxx
O	27539	27548	addresses
O	27548	27549	,
O	27550	27553	and
O	27554	27557	172
O	27557	27558	.
O	27558	27560	16
O	27560	27561	.
O	27561	27564	xxx
O	27564	27565	.
O	27565	27568	xxx
O	27569	27576	through
O	27577	27580	172
O	27580	27581	.
O	27581	27583	31
O	27583	27584	.
O	27584	27587	xxx
O	27587	27588	.
O	27588	27591	xxx
O	27591	27592	.

O	27593	27594	#
O	27594	27596	li
O	27597	27606	Addresses
O	27607	27609	in
O	27610	27613	the
O	27614	27619	range
O	27620	27623	169
O	27623	27624	.
O	27624	27627	254
O	27627	27628	.
O	27628	27631	xxx
O	27631	27632	.
O	27632	27635	xxx
O	27636	27639	are
O	27640	27644	link
O	27645	27650	local
O	27651	27653	IP
O	27654	27663	addresses
O	27663	27664	.

O	27665	27670	These
O	27671	27674	are
O	27675	27683	reserved
O	27684	27687	for
O	27688	27691	use
O	27692	27694	on
O	27695	27696	a
O	27697	27703	single
O	27704	27711	network
O	27712	27719	segment
O	27719	27720	.

O	27721	27722	#
O	27722	27724	li
O	27725	27734	Addresses
O	27735	27737	in
O	27738	27741	the
O	27742	27747	range
O	27748	27751	224
O	27751	27752	.
O	27752	27755	xxx
O	27755	27756	.
O	27756	27759	xxx
O	27759	27760	.
O	27760	27763	xxx
O	27764	27771	through
O	27772	27775	239
O	27775	27776	.
O	27776	27779	xxx
O	27779	27780	.
O	27780	27783	xxx
O	27783	27784	.
O	27784	27787	xxx
O	27788	27791	are
O	27792	27801	multicast
O	27802	27811	addresses
O	27811	27812	.

O	27813	27814	#
O	27814	27816	li
O	27817	27820	The
O	27821	27828	address
O	27829	27832	255
O	27832	27833	.
O	27833	27836	255
O	27836	27837	.
O	27837	27840	255
O	27840	27841	.
O	27841	27844	255
O	27845	27847	is
O	27848	27851	the
O	27852	27861	broadcast
O	27862	27869	address
O	27869	27870	.

O	27871	27872	#
O	27872	27874	li
O	27875	27883	Anything
O	27884	27888	else
O	27889	27895	should
O	27896	27898	be
O	27899	27900	a
O	27901	27906	valid
O	27907	27913	public
O	27914	27919	point
O	27919	27920	-
O	27920	27922	to
O	27922	27923	-
O	27923	27928	point
O	27929	27933	IPv4
O	27934	27941	address
O	27941	27942	.

O	27943	27945	In
O	27946	27950	fact
O	27950	27951	,
O	27952	27955	the
B-api_mention	27956	27967	InetAddress
O	27968	27971	API
O	27972	27980	provides
O	27981	27988	methods
O	27989	27992	for
O	27993	28000	testing
O	28001	28004	for
O	28005	28013	loopback
O	28013	28014	,
O	28015	28019	link
O	28020	28025	local
O	28025	28026	,
O	28027	28031	site
O	28032	28037	local
O	28037	28038	,
O	28039	28048	multicast
O	28049	28052	and
O	28053	28062	broadcast
O	28063	28072	addresses
O	28072	28073	.

O	28074	28077	You
O	28078	28081	can
O	28082	28085	use
O	28086	28091	these
O	28092	28094	to
O	28095	28099	sort
O	28100	28103	out
O	28104	28109	which
O	28110	28112	of
O	28113	28116	the
O	28117	28119	IP
O	28120	28129	addresses
O	28130	28133	you
O	28134	28137	get
O	28138	28142	back
O	28143	28145	is
O	28146	28150	most
O	28151	28162	appropriate
O	28162	28163	.

O	28165	28173	Question
O	28173	28174	-
O	28174	28181	9481865
O	28181	28182	,
O	28183	28189	answer
O	28189	28190	-
O	28190	28198	33093380

O	28199	28202	You
O	28203	28206	may
O	28207	28210	try
B-api_mention	28211	28222	isReachable
I-api_mention	28222	28223	(
I-api_mention	28223	28227	args
I-api_mention	28227	28228	)
O	28229	28235	method
O	28236	28238	of
O	28239	28250	InetAddress
O	28251	28256	class
O	28257	28259	to
O	28260	28266	figure
O	28267	28270	out
O	28271	28276	which
O	28277	28279	IP
O	28280	28287	address
O	28288	28290	is
O	28291	28295	your
O	28296	28300	real
O	28301	28309	publicly
O	28310	28319	available
O	28320	28322	IP
O	28323	28330	address
O	28330	28331	.

O	28332	28333	I
O	28334	28339	think
O	28340	28345	other
O	28346	28350	type
O	28351	28353	of
O	28354	28363	addresses
O	28364	28365	(
O	28365	28369	site
O	28370	28375	local
O	28375	28376	,
O	28376	28380	link
O	28381	28386	local
O	28386	28387	)
O	28388	28391	are
O	28392	28395	not
O	28396	28405	reachable
O	28406	28410	from
O	28411	28418	outside
O	28418	28419	.

O	28420	28421	#
O	28421	28424	pre

O	28426	28434	Question
O	28434	28435	-
O	28435	28442	8777257
O	28442	28443	,
O	28444	28450	answer
O	28450	28451	-
O	28451	28458	8777266

O	28459	28461	It
O	28461	28462	'
O	28462	28463	s
O	28464	28465	a
O	28466	28472	famous
O	28473	28480	problem
O	28480	28481	:
B-api_mention	28482	28483	.
I-api_mention	28483	28489	equals
I-api_mention	28489	28490	(
I-api_mention	28490	28494	args
I-api_mention	28494	28495	)
O	28496	28499	for
O	28500	28506	arrays
O	28507	28509	is
O	28510	28515	badly
O	28516	28522	broken
O	28522	28523	,
O	28524	28528	just
O	28529	28532	don
O	28532	28533	'
O	28533	28534	t
O	28535	28538	use
O	28539	28541	it
O	28541	28542	,
O	28543	28547	ever
O	28547	28548	.

O	28549	28553	That
O	28554	28558	said
O	28558	28559	,
O	28560	28562	it
O	28562	28563	'
O	28563	28564	s
O	28565	28568	not
O	28569	28570	"
O	28570	28576	broken
O	28576	28577	"
O	28578	28580	as
O	28581	28583	in
O	28584	28585	"
O	28585	28592	someone
O	28593	28596	has
O	28597	28601	done
O	28602	28604	it
O	28605	28607	in
O	28608	28609	a
O	28610	28616	really
O	28617	28622	wrong
O	28623	28626	way
O	28626	28627	"
O	28628	28629	—
O	28630	28632	it
O	28632	28633	'
O	28633	28634	s
O	28635	28639	just
O	28640	28645	doing
O	28646	28650	what
O	28650	28651	'
O	28651	28652	s
O	28653	28660	defined
O	28661	28664	and
O	28665	28668	not
O	28669	28673	what
O	28673	28674	'
O	28674	28675	s
O	28676	28683	usually
O	28684	28692	expected
O	28692	28693	.

O	28694	28696	So
O	28697	28700	for
O	28701	28708	purists
O	28708	28709	:
O	28710	28712	it
O	28712	28713	'
O	28713	28714	s
O	28715	28724	perfectly
O	28725	28729	fine
O	28729	28730	,
O	28731	28734	and
O	28735	28739	that
O	28740	28744	also
O	28745	28750	means
O	28750	28751	,
O	28752	28755	don
O	28755	28756	'
O	28756	28757	t
O	28758	28761	use
O	28762	28764	it
O	28764	28765	,
O	28766	28770	ever
O	28770	28771	.

O	28772	28775	Now
O	28776	28779	the
O	28780	28788	expected
O	28789	28798	behaviour
O	28799	28802	for
B-api_mention	28803	28809	equals
O	28810	28812	is
O	28813	28815	to
O	28816	28823	compare
O	28824	28828	data
O	28828	28829	.

O	28830	28833	The
O	28834	28841	default
O	28842	28851	behaviour
O	28852	28854	is
O	28855	28857	to
O	28858	28865	compare
O	28866	28869	the
O	28870	28878	identity
O	28878	28879	,
O	28880	28882	as
B-api_mention	28883	28889	Object
O	28890	28894	does
O	28895	28898	not
O	28899	28903	have
O	28904	28907	any
O	28908	28912	data
O	28913	28914	(
O	28914	28917	for
O	28918	28925	purists
O	28925	28926	:
O	28927	28930	yes
O	28931	28933	it
O	28934	28937	has
O	28937	28938	,
O	28939	28942	but
O	28943	28945	it
O	28945	28946	'
O	28946	28947	s
O	28948	28951	not
O	28952	28955	the
O	28956	28961	point
O	28961	28962	)
O	28962	28963	;
O	28964	28974	assumption
O	28975	28977	is
O	28977	28978	,
O	28979	28981	if
O	28982	28985	you
O	28986	28990	need
B-api_mention	28991	28997	equals
O	28998	29000	in
O	29001	29011	subclasses
O	29011	29012	,
O	29013	29016	you
O	29016	29017	'
O	29017	29019	ll
O	29020	29029	implement
O	29030	29032	it
O	29032	29033	.

O	29034	29036	In
O	29037	29043	arrays
O	29043	29044	,
O	29045	29050	there
O	29050	29051	'
O	29051	29052	s
O	29053	29055	no
O	29056	29070	implementation
O	29071	29074	for
O	29075	29078	you
O	29078	29079	,
O	29080	29082	so
O	29083	29086	you
O	29086	29087	'
O	29087	29089	re
O	29090	29093	not
O	29094	29102	supposed
O	29103	29105	to
O	29106	29109	use
O	29110	29112	it
O	29112	29113	.

O	29114	29116	So
O	29117	29120	the
O	29121	29131	difference
O	29132	29134	is
O	29134	29135	,
B-api_mention	29136	29142	Arrays
I-api_mention	29142	29143	.
I-api_mention	29143	29149	equals
I-api_mention	29149	29150	(
I-api_mention	29150	29154	args
I-api_mention	29154	29155	)
O	29156	29161	works
O	29162	29164	as
O	29165	29168	you
O	29169	29174	would
O	29175	29181	expect
O	29182	29183	(
O	29183	29184	i
O	29184	29185	.
O	29185	29186	e
O	29186	29187	.
O	29188	29196	compares
O	29197	29204	content
O	29204	29205	)
O	29205	29206	,
O	29207	29213	array1
B-api_mention	29213	29214	.
I-api_mention	29214	29220	equals
I-api_mention	29220	29221	(
I-api_mention	29221	29225	args
I-api_mention	29225	29226	)
O	29227	29232	falls
O	29233	29237	back
O	29238	29240	to
B-api_mention	29241	29247	Object
I-api_mention	29247	29248	.
I-api_mention	29248	29254	equals
O	29255	29269	implementation
O	29269	29270	,
O	29271	29276	which
O	29277	29279	in
O	29280	29284	turn
O	29285	29293	compares
O	29294	29302	identity
O	29302	29303	,
O	29304	29307	and
O	29308	29312	thus
O	29313	29319	better
O	29320	29328	replaced
O	29329	29331	by
O	29332	29333	=
O	29333	29334	=
O	29335	29336	(
O	29336	29339	for
O	29340	29347	purists
O	29347	29348	:
O	29349	29352	yes
O	29353	29354	I
O	29355	29359	know
O	29360	29365	about
O	29366	29370	null
O	29371	29372	)
O	29372	29373	.

O	29374	29381	Problem
O	29382	29384	is
O	29384	29385	,
O	29386	29390	even
B-api_mention	29391	29397	Arrays
I-api_mention	29397	29398	.
I-api_mention	29398	29404	equals
I-api_mention	29404	29405	(
I-api_mention	29405	29409	args
I-api_mention	29409	29410	)
O	29411	29415	will
O	29416	29420	bite
O	29421	29424	you
O	29425	29429	hard
O	29430	29432	if
O	29433	29441	elements
O	29442	29444	of
O	29445	29450	array
O	29451	29453	do
O	29454	29457	not
O	29458	29467	implement
B-api_mention	29468	29474	equals
O	29475	29483	properly
O	29483	29484	.

O	29485	29487	It
O	29487	29488	'
O	29488	29489	s
O	29490	29491	a
O	29492	29496	very
O	29497	29502	naive
O	29503	29512	statement
O	29512	29513	,
O	29514	29515	I
O	29516	29520	know
O	29520	29521	,
O	29522	29525	but
O	29526	29531	there
O	29531	29532	'
O	29532	29533	s
O	29534	29535	a
O	29536	29540	very
O	29541	29550	important
O	29551	29555	less
O	29555	29556	-
O	29556	29560	than
O	29560	29561	-
O	29561	29568	obvious
O	29569	29573	case
O	29573	29574	:
O	29575	29583	consider
O	29584	29585	a
O	29586	29588	2D
O	29589	29594	array
O	29594	29595	.

O	29596	29598	2D
O	29599	29604	array
O	29605	29607	in
O	29608	29612	Java
O	29613	29615	is
O	29616	29618	an
O	29619	29624	array
O	29625	29627	of
O	29628	29634	arrays
O	29634	29635	,
O	29636	29639	and
O	29640	29646	arrays
O	29646	29647	'
B-api_mention	29648	29654	equals
O	29655	29657	is
O	29658	29664	broken
O	29665	29666	(
O	29666	29668	or
O	29669	29676	useless
O	29677	29679	if
O	29680	29683	you
O	29684	29690	prefer
O	29690	29691	)
O	29691	29692	,
O	29693	29695	so
B-api_mention	29696	29702	Arrays
I-api_mention	29702	29703	.
I-api_mention	29703	29709	equals
I-api_mention	29709	29710	(
I-api_mention	29710	29714	args
I-api_mention	29714	29715	)
O	29716	29720	will
O	29721	29724	not
O	29725	29729	work
O	29730	29732	as
O	29733	29736	you
O	29737	29743	expect
O	29744	29746	on
O	29747	29749	2D
O	29750	29756	arrays
O	29756	29757	.

O	29758	29762	Hope
O	29763	29767	that
O	29768	29773	helps
O	29773	29774	.

O	29776	29784	Question
O	29784	29785	-
O	29785	29792	8777257
O	29792	29793	,
O	29794	29800	answer
O	29800	29801	-
O	29801	29808	8777279

O	29809	29815	array1
B-api_mention	29815	29816	.
I-api_mention	29816	29822	equals
I-api_mention	29822	29823	(
I-api_mention	29823	29827	args
I-api_mention	29827	29828	)
O	29829	29831	is
O	29832	29835	the
O	29836	29840	same
O	29841	29843	as
O	29844	29850	array1
O	29851	29852	=
O	29852	29853	=
O	29854	29860	array2
O	29861	29862	,
O	29863	29864	i
O	29864	29865	.
O	29865	29866	e
O	29866	29867	.
O	29868	29870	is
O	29871	29873	it
O	29874	29877	the
O	29878	29882	same
O	29883	29888	array
O	29888	29889	.

O	29890	29892	As
O	29893	29894	@
O	29894	29897	alf
O	29898	29904	points
O	29905	29908	out
O	29909	29911	it
O	29911	29912	'
O	29912	29913	s
O	29914	29917	not
O	29918	29922	what
O	29923	29927	most
O	29928	29934	people
O	29935	29941	expect
O	29941	29942	.

B-api_mention	29943	29949	Arrays
I-api_mention	29949	29950	.
I-api_mention	29950	29956	equals
I-api_mention	29956	29957	(
I-api_mention	29957	29961	args
I-api_mention	29961	29962	)
O	29963	29971	compares
O	29972	29975	the
O	29976	29984	contents
O	29985	29987	of
O	29988	29991	the
O	29992	29998	arrays
O	29998	29999	.

O	30000	30009	Similarly
O	30010	30015	array
B-api_mention	30015	30016	.
I-api_mention	30016	30024	toString
I-api_mention	30024	30025	(
I-api_mention	30025	30029	args
I-api_mention	30029	30030	)
O	30031	30034	may
O	30035	30038	not
O	30039	30041	be
O	30042	30046	very
O	30047	30053	useful
O	30054	30057	and
O	30058	30061	you
O	30062	30066	need
O	30067	30069	to
O	30070	30073	use
B-api_mention	30074	30080	Arrays
I-api_mention	30080	30081	.
I-api_mention	30081	30089	toString
I-api_mention	30089	30090	(
I-api_mention	30090	30094	args
I-api_mention	30094	30095	)
O	30096	30097	.

O	30099	30107	Question
O	30107	30108	-
O	30108	30115	8777257
O	30115	30116	,
O	30117	30123	answer
O	30123	30124	-
O	30124	30131	8777292

O	30132	30135	The
B-api_mention	30136	30142	equals
I-api_mention	30142	30143	(
I-api_mention	30143	30147	args
I-api_mention	30147	30148	)
O	30149	30151	of
O	30152	30158	arrays
O	30159	30161	is
O	30162	30171	inherited
O	30172	30176	from
O	30177	30183	Object
O	30184	30185	,
O	30186	30188	so
O	30189	30191	it
O	30192	30196	does
O	30197	30200	not
O	30201	30205	look
O	30206	30208	at
O	30209	30212	the
O	30213	30221	contents
O	30222	30224	of
O	30225	30228	the
O	30229	30236	arrrays
O	30236	30237	,
O	30238	30240	it
O	30241	30245	only
O	30246	30255	considers
O	30256	30260	each
O	30261	30266	array
O	30267	30272	equal
O	30273	30275	to
O	30276	30282	itself
O	30282	30283	.

O	30284	30287	The
B-api_mention	30288	30294	Arrays
I-api_mention	30294	30295	.
I-api_mention	30295	30301	equals
I-api_mention	30301	30302	(
I-api_mention	30302	30306	args
I-api_mention	30306	30307	)
O	30308	30315	methods
O	30316	30318	do
O	30319	30326	compare
O	30327	30330	the
O	30331	30337	arrays
O	30337	30338	'
O	30339	30347	contents
O	30347	30348	.

O	30349	30354	There
O	30354	30355	'
O	30355	30356	s
O	30357	30366	overloads
O	30367	30370	for
O	30371	30374	all
O	30375	30384	primitive
O	30385	30390	types
O	30390	30391	,
O	30392	30395	and
O	30396	30399	the
O	30400	30403	one
O	30404	30407	for
O	30408	30415	objects
O	30416	30420	uses
O	30421	30424	the
O	30425	30432	objects
O	30432	30433	'
O	30434	30437	own
B-api_mention	30438	30444	equals
I-api_mention	30444	30445	(
I-api_mention	30445	30449	args
I-api_mention	30449	30450	)
O	30451	30458	methods
O	30458	30459	.

O	30461	30469	Question
O	30469	30470	-
O	30470	30477	8777257
O	30477	30478	,
O	30479	30485	answer
O	30485	30486	-
O	30486	30493	8777311

O	30494	30497	The
B-api_mention	30498	30504	Arrays
I-api_mention	30504	30505	.
I-api_mention	30505	30511	equals
I-api_mention	30511	30512	(
I-api_mention	30512	30516	args
I-api_mention	30516	30517	)
O	30518	30519	:
O	30520	30525	check
O	30526	30528	if
O	30529	30533	both
O	30534	30540	arrays
O	30541	30548	contain
O	30549	30552	the
O	30553	30557	same
O	30558	30564	number
O	30565	30567	of
O	30568	30576	elements
O	30576	30577	,
O	30578	30581	and
O	30582	30585	all
O	30586	30599	corresponding
O	30600	30605	pairs
O	30606	30608	of
O	30609	30617	elements
O	30618	30620	in
O	30621	30624	the
O	30625	30628	two
O	30629	30635	arrays
O	30636	30639	are
O	30640	30645	equal
O	30645	30646	.

O	30647	30650	The
O	30651	30657	array1
B-api_mention	30657	30658	.
I-api_mention	30658	30664	equals
I-api_mention	30664	30665	(
I-api_mention	30665	30669	args
I-api_mention	30669	30670	)
O	30671	30672	:
O	30673	30680	compare
O	30681	30684	the
O	30685	30691	object
O	30692	30694	to
O	30695	30702	another
O	30703	30709	object
O	30710	30713	and
O	30714	30720	return
O	30721	30725	true
O	30726	30730	only
O	30731	30733	if
O	30734	30737	the
O	30738	30747	reference
O	30748	30750	of
O	30751	30754	the
O	30755	30758	two
O	30759	30765	object
O	30766	30769	are
O	30770	30775	equal
O	30776	30778	as
O	30779	30781	in
O	30782	30785	the
O	30786	30792	Object
B-api_mention	30792	30793	.
I-api_mention	30793	30799	equals
I-api_mention	30799	30800	(
I-api_mention	30800	30804	args
I-api_mention	30804	30805	)

O	30807	30815	Question
O	30815	30816	-
O	30816	30823	8777257
O	30823	30824	,
O	30825	30831	answer
O	30831	30832	-
O	30832	30839	8777312

O	30840	30846	Arrays
O	30847	30854	inherit
B-api_mention	30855	30861	equals
I-api_mention	30861	30862	(
I-api_mention	30862	30866	args
I-api_mention	30866	30867	)
O	30868	30872	from
O	30873	30879	Object
O	30880	30883	and
O	30884	30889	hence
O	30890	30897	compare
O	30898	30902	only
O	30903	30910	returns
O	30911	30915	true
O	30916	30918	if
O	30919	30928	comparing
O	30929	30931	an
O	30932	30937	array
O	30938	30945	against
O	30946	30952	itself
O	30952	30953	.

O	30954	30956	On
O	30957	30960	the
O	30961	30966	other
O	30967	30971	hand
O	30971	30972	,
B-api_mention	30973	30979	Arrays
I-api_mention	30979	30980	.
I-api_mention	30980	30986	equals
O	30987	30995	compares
O	30996	30999	the
O	31000	31008	elements
O	31009	31011	of
O	31012	31015	the
O	31016	31022	arrays
O	31022	31023	.

O	31024	31028	This
O	31029	31036	snippet
O	31037	31047	elucidates
O	31048	31051	the
O	31052	31062	difference
O	31062	31063	:
O	31064	31065	#
O	31065	31068	pre
O	31069	31072	See
O	31073	31077	also
B-api_mention	31078	31084	Arrays
I-api_mention	31084	31085	.
I-api_mention	31085	31091	equals
I-api_mention	31091	31092	(
I-api_mention	31092	31093	)
O	31094	31095	.

O	31096	31103	Another
O	31104	31110	static
O	31111	31117	method
O	31118	31123	there
O	31124	31127	may
O	31128	31132	also
O	31133	31135	be
O	31136	31138	of
O	31139	31147	interest
O	31147	31148	:
B-api_mention	31149	31155	Arrays
I-api_mention	31155	31156	.
I-api_mention	31156	31166	deepEquals
I-api_mention	31166	31167	(
I-api_mention	31167	31168	)
O	31169	31170	.

O	31172	31180	Question
O	31180	31181	-
O	31181	31188	9749746
O	31188	31189	,
O	31190	31196	answer
O	31196	31197	-
O	31197	31204	9749864

O	31205	31208	You
O	31209	31212	are
O	31213	31225	specifically
O	31226	31232	asking
O	31233	31238	about
O	31239	31242	how
O	31243	31247	they
O	31248	31258	internally
O	31259	31263	work
O	31264	31265	,
O	31266	31268	so
O	31269	31273	here
O	31274	31277	you
O	31278	31281	are
O	31281	31282	:
O	31283	31285	No
O	31286	31301	synchronization
O	31302	31303	#
O	31303	31306	pre
O	31307	31309	It
O	31310	31319	basically
O	31320	31325	reads
O	31326	31331	value
O	31332	31336	from
O	31337	31343	memory
O	31343	31344	,
O	31345	31355	increments
O	31356	31358	it
O	31359	31362	and
O	31363	31367	puts
O	31368	31372	back
O	31373	31375	to
O	31376	31382	memory
O	31382	31383	.

O	31384	31388	This
O	31389	31394	works
O	31395	31397	in
O	31398	31404	single
O	31405	31411	thread
O	31412	31415	but
O	31416	31424	nowadays
O	31424	31425	,
O	31426	31428	in
O	31429	31432	the
O	31433	31436	era
O	31437	31439	of
O	31440	31445	multi
O	31445	31446	-
O	31446	31450	core
O	31450	31451	,
O	31452	31457	multi
O	31457	31458	-
O	31458	31461	CPU
O	31461	31462	,
O	31463	31468	multi
O	31468	31469	-
O	31469	31474	level
O	31475	31481	caches
O	31482	31484	it
O	31485	31488	won
O	31488	31489	'
O	31489	31490	t
O	31491	31495	work
O	31496	31505	correctly
O	31505	31506	.

O	31507	31512	First
O	31513	31515	of
O	31516	31519	all
O	31520	31522	it
O	31523	31533	introduces
O	31534	31538	race
O	31539	31548	condition
O	31549	31550	(
O	31550	31557	several
O	31558	31565	threads
O	31566	31569	can
O	31570	31574	read
O	31575	31578	the
O	31579	31584	value
O	31585	31587	at
O	31588	31591	the
O	31592	31596	same
O	31597	31601	time
O	31601	31602	)
O	31602	31603	,
O	31604	31607	but
O	31608	31612	also
O	31613	31623	visibility
O	31624	31632	problems
O	31632	31633	.

O	31634	31637	The
O	31638	31643	value
O	31644	31649	might
O	31650	31654	only
O	31655	31657	be
O	31658	31664	stored
O	31665	31667	in
O	31668	31669	"
O	31670	31675	local
O	31676	31677	"
O	31678	31681	CPU
O	31682	31688	memory
O	31689	31690	(
O	31690	31694	some
O	31695	31700	cache
O	31700	31701	)
O	31702	31705	and
O	31706	31709	not
O	31710	31712	be
O	31713	31720	visible
O	31721	31724	for
O	31725	31730	other
O	31731	31735	CPUs
O	31735	31736	/
O	31736	31741	cores
O	31742	31743	(
O	31743	31746	and
O	31747	31751	thus
O	31752	31753	-
O	31754	31761	threads
O	31761	31762	)
O	31762	31763	.

O	31764	31768	This
O	31769	31771	is
O	31772	31775	why
O	31776	31780	many
O	31781	31786	refer
O	31787	31789	to
O	31790	31795	local
O	31796	31800	copy
O	31801	31803	of
O	31804	31805	a
O	31806	31814	variable
O	31815	31817	in
O	31818	31819	a
O	31820	31826	thread
O	31826	31827	.

O	31828	31830	It
O	31831	31833	is
O	31834	31838	very
O	31839	31845	unsafe
O	31845	31846	.

O	31847	31855	Consider
O	31856	31860	this
O	31861	31868	popular
O	31869	31872	but
O	31873	31879	broken
O	31880	31886	thread
O	31886	31887	-
O	31887	31895	stopping
O	31896	31900	code
O	31900	31901	:
O	31902	31903	#
O	31903	31906	pre
O	31907	31910	Add
O	31911	31919	volatile
O	31920	31922	to
O	31923	31930	stopped
O	31931	31939	variable
O	31940	31943	and
O	31944	31946	it
O	31947	31952	works
O	31953	31957	fine
O	31958	31959	-
O	31960	31962	if
O	31963	31966	any
O	31967	31972	other
O	31973	31979	thread
O	31980	31988	modifies
O	31989	31996	stopped
O	31997	32005	variable
O	32006	32009	via
B-api_mention	32010	32020	pleaseStop
I-api_mention	32020	32021	(
I-api_mention	32021	32025	args
I-api_mention	32025	32026	)
O	32027	32033	method
O	32033	32034	,
O	32035	32038	you
O	32039	32042	are
O	32043	32053	guaranteed
O	32054	32056	to
O	32057	32060	see
O	32061	32065	that
O	32066	32072	change
O	32073	32084	immediately
O	32085	32087	in
O	32088	32095	working
O	32096	32102	thread
O	32102	32103	'
O	32103	32104	s
O	32105	32110	while
O	32110	32111	(
O	32111	32115	args
O	32115	32116	)
O	32117	32121	loop
O	32121	32122	.

O	32123	32126	BTW
O	32127	32131	this
O	32132	32134	is
O	32135	32138	not
O	32139	32140	a
O	32141	32145	good
O	32146	32149	way
O	32150	32152	to
O	32153	32162	interrupt
O	32163	32164	a
O	32165	32171	thread
O	32172	32178	either
O	32178	32179	,
O	32180	32183	see
O	32183	32184	:
O	32185	32188	How
O	32189	32191	to
O	32192	32196	stop
O	32197	32198	a
O	32199	32205	thread
O	32206	32210	that
O	32211	32213	is
O	32214	32221	running
O	32222	32229	forever
O	32230	32237	without
O	32238	32241	any
O	32242	32245	use
O	32246	32249	and
O	32250	32258	Stopping
O	32259	32260	a
O	32261	32269	specific
O	32270	32274	java
O	32275	32281	thread
O	32282	32283	.

O	32284	32297	AtomicInteger
O	32298	32299	#
O	32299	32302	pre
O	32303	32306	The
B-api_mention	32307	32320	AtomicInteger
O	32321	32326	class
O	32327	32331	uses
O	32332	32335	CAS
O	32336	32337	(
O	32338	32345	compare
O	32345	32346	-
O	32346	32349	and
O	32349	32350	-
O	32350	32354	swap
O	32355	32356	)
O	32357	32360	low
O	32360	32361	-
O	32361	32366	level
O	32367	32370	CPU
O	32371	32381	operations
O	32382	32383	(
O	32383	32385	no
O	32386	32401	synchronization
O	32402	32408	needed
O	32408	32409	!
O	32409	32410	)
O	32411	32415	They
O	32416	32421	allow
O	32422	32425	you
O	32426	32428	to
O	32429	32435	modify
O	32436	32437	a
O	32438	32448	particular
O	32449	32457	variable
O	32458	32462	only
O	32463	32465	if
O	32466	32469	the
O	32470	32477	present
O	32478	32483	value
O	32484	32486	is
O	32487	32492	equal
O	32493	32495	to
O	32496	32505	something
O	32506	32510	else
O	32511	32512	(
O	32512	32515	and
O	32516	32518	is
O	32519	32527	returned
O	32528	32540	successfully
O	32540	32541	)
O	32541	32542	.

O	32543	32545	So
O	32546	32550	when
O	32551	32554	you
O	32555	32562	execute
B-api_mention	32563	32578	getAndIncrement
I-api_mention	32578	32579	(
I-api_mention	32579	32583	args
I-api_mention	32583	32584	)
O	32585	32587	it
O	32588	32596	actually
O	32597	32601	runs
O	32602	32604	in
O	32605	32606	a
O	32607	32611	loop
O	32612	32613	(
O	32613	32623	simplified
O	32624	32628	real
O	32629	32643	implementation
O	32643	32644	)
O	32644	32645	:
O	32646	32647	#
O	32647	32650	pre
O	32651	32653	So
O	32654	32663	basically
O	32663	32664	:
O	32665	32669	read
O	32669	32670	;
O	32671	32674	try
O	32675	32677	to
O	32678	32683	store
O	32684	32695	incremented
O	32696	32701	value
O	32701	32702	;
O	32703	32705	if
O	32706	32709	not
O	32710	32720	successful
O	32721	32722	(
O	32722	32725	the
O	32726	32731	value
O	32732	32734	is
O	32735	32737	no
O	32738	32744	longer
O	32745	32750	equal
O	32751	32753	to
O	32754	32761	current
O	32762	32763	)
O	32763	32764	,
O	32765	32769	read
O	32770	32773	and
O	32774	32777	try
O	32778	32783	again
O	32783	32784	.

O	32785	32788	The
B-api_mention	32789	32802	compareAndSet
I-api_mention	32802	32803	(
I-api_mention	32803	32807	args
I-api_mention	32807	32808	)
O	32809	32811	is
O	32812	32823	implemented
O	32824	32826	in
O	32827	32833	native
O	32834	32838	code
O	32839	32840	(
O	32840	32848	assembly
O	32848	32849	)
O	32849	32850	.
O	32851	32859	volatile
O	32860	32867	without
O	32868	32883	synchronization
O	32884	32885	#
O	32885	32888	pre
O	32889	32893	This
O	32894	32898	code
O	32899	32901	is
O	32902	32905	not
O	32906	32913	correct
O	32913	32914	.

O	32915	32917	It
O	32918	32923	fixes
O	32924	32927	the
O	32928	32938	visibility
O	32939	32944	issue
O	32945	32946	(
O	32947	32955	volatile
O	32956	32961	makes
O	32962	32966	sure
O	32967	32972	other
O	32973	32980	threads
O	32981	32984	can
O	32985	32988	see
O	32989	32995	change
O	32996	33000	made
O	33001	33003	to
O	33004	33011	counter
O	33012	33013	)
O	33014	33017	but
O	33018	33023	still
O	33024	33027	has
O	33028	33029	a
O	33030	33034	race
O	33035	33044	condition
O	33044	33045	.

O	33046	33050	This
O	33051	33054	has
O	33055	33059	been
O	33060	33069	explained
O	33070	33078	multiple
O	33079	33084	times
O	33084	33085	:
O	33086	33089	pre
O	33089	33090	/
O	33090	33094	post
O	33094	33095	-
O	33095	33109	incrementation
O	33110	33112	is
O	33113	33116	not
B-api_mention	33117	33123	atomic
O	33123	33124	.

O	33125	33128	The
O	33129	33133	only
O	33134	33138	side
O	33139	33145	effect
O	33146	33148	of
O	33149	33157	volatile
O	33158	33160	is
O	33161	33162	"
O	33163	33171	flushing
O	33172	33173	"
O	33174	33180	caches
O	33181	33183	so
O	33184	33188	that
O	33189	33192	all
O	33193	33198	other
O	33199	33206	parties
O	33207	33210	see
O	33211	33214	the
O	33215	33223	freshest
O	33224	33231	version
O	33232	33234	of
O	33235	33238	the
O	33239	33243	data
O	33243	33244	.

O	33245	33249	This
O	33250	33252	is
O	33253	33256	too
O	33257	33263	strict
O	33264	33266	in
O	33267	33271	most
O	33272	33282	situations
O	33282	33283	;
O	33284	33288	that
O	33289	33291	is
O	33292	33295	why
O	33296	33304	volatile
O	33305	33307	is
O	33308	33311	not
O	33312	33319	default
O	33319	33320	.
O	33321	33329	volatile
O	33330	33337	without
O	33338	33353	synchronization
O	33354	33355	(
O	33355	33356	2
O	33356	33357	)
O	33358	33359	#
O	33359	33362	pre
O	33363	33366	The
O	33367	33371	same
O	33372	33379	problem
O	33380	33382	as
O	33383	33388	above
O	33388	33389	,
O	33390	33393	but
O	33394	33398	even
O	33399	33404	worse
O	33405	33412	because
O	33413	33414	i
O	33415	33417	is
O	33418	33421	not
O	33422	33429	private
O	33430	33431	.

O	33432	33435	The
O	33436	33440	race
O	33441	33450	condition
O	33451	33453	is
O	33454	33459	still
O	33460	33467	present
O	33467	33468	.

O	33469	33472	Why
O	33473	33475	is
O	33476	33478	it
O	33479	33480	a
O	33481	33488	problem
O	33488	33489	?

O	33490	33492	If
O	33492	33493	,
O	33494	33497	say
O	33497	33498	,
O	33499	33502	two
O	33503	33510	threads
O	33511	33514	run
O	33515	33519	this
O	33520	33524	code
O	33525	33539	simultaneously
O	33539	33540	,
O	33541	33544	the
O	33545	33551	output
O	33552	33557	might
O	33558	33560	be
O	33561	33562	+
O	33563	33564	5
O	33565	33567	or
O	33568	33569	+
O	33570	33572	10
O	33573	33574	.

O	33575	33582	However
O	33582	33583	,
O	33584	33587	you
O	33588	33591	are
O	33592	33602	guaranteed
O	33603	33605	to
O	33606	33609	see
O	33610	33613	the
O	33614	33620	change
O	33620	33621	.

O	33622	33630	Multiple
O	33631	33642	independent
O	33643	33655	synchronized
O	33656	33657	#
O	33657	33660	pre
O	33661	33669	Surprise
O	33669	33670	,
O	33671	33675	this
O	33676	33680	code
O	33681	33683	is
O	33684	33693	incorrect
O	33694	33696	as
O	33697	33701	well
O	33701	33702	.

O	33703	33705	In
O	33706	33710	fact
O	33710	33711	,
O	33712	33714	it
O	33715	33717	is
O	33718	33728	completely
O	33729	33734	wrong
O	33734	33735	.

O	33736	33741	First
O	33742	33744	of
O	33745	33748	all
O	33749	33752	you
O	33753	33756	are
O	33757	33770	synchronizing
O	33771	33773	on
O	33774	33775	i
O	33776	33777	,
O	33778	33783	which
O	33784	33786	is
O	33787	33792	about
O	33793	33795	to
O	33796	33798	be
O	33799	33806	changed
O	33807	33808	(
O	33808	33816	moreover
O	33816	33817	,
O	33818	33819	i
O	33820	33822	is
O	33823	33824	a
O	33825	33834	primitive
O	33834	33835	,
O	33836	33838	so
O	33839	33840	I
O	33841	33846	guess
O	33847	33850	you
O	33851	33854	are
O	33855	33868	synchronizing
O	33869	33871	on
O	33872	33873	a
O	33874	33883	temporary
O	33884	33891	Integer
O	33892	33899	created
O	33900	33903	via
O	33904	33914	autoboxing
O	33914	33915	.
O	33915	33916	.
O	33916	33917	.
O	33917	33918	)
O	33919	33929	Completely
O	33930	33936	flawed
O	33936	33937	.

O	33938	33941	You
O	33942	33947	could
O	33948	33952	also
O	33953	33958	write
O	33958	33959	:
O	33960	33961	#
O	33961	33964	pre
O	33965	33967	No
O	33968	33971	two
O	33972	33979	threads
O	33980	33983	can
O	33984	33989	enter
O	33990	33993	the
O	33994	33998	same
O	33999	34011	synchronized
O	34012	34017	block
O	34018	34022	with
O	34023	34026	the
O	34027	34031	same
O	34032	34036	lock
O	34037	34038	.

O	34039	34041	In
O	34042	34046	this
O	34047	34051	case
O	34052	34053	(
O	34053	34056	and
O	34057	34066	similarly
O	34067	34069	in
O	34070	34074	your
O	34075	34079	code
O	34079	34080	)
O	34081	34084	the
O	34085	34089	lock
O	34090	34096	object
O	34097	34104	changes
O	34105	34109	upon
O	34110	34115	every
O	34116	34125	execution
O	34125	34126	,
O	34127	34129	so
O	34130	34142	synchronized
O	34143	34154	effectively
O	34155	34158	has
O	34159	34161	no
O	34162	34168	effect
O	34168	34169	.

O	34170	34174	Even
O	34175	34177	if
O	34178	34181	you
O	34182	34186	have
O	34187	34191	used
O	34192	34193	a
O	34194	34199	final
O	34200	34208	variable
O	34209	34210	(
O	34210	34212	or
O	34213	34217	this
O	34218	34219	)
O	34220	34223	for
O	34224	34239	synchronization
O	34239	34240	,
O	34241	34244	the
O	34245	34249	code
O	34250	34252	is
O	34253	34258	still
O	34259	34268	incorrect
O	34268	34269	.

O	34270	34273	Two
O	34274	34281	threads
O	34282	34285	can
O	34286	34291	first
O	34292	34296	read
O	34297	34298	i
O	34299	34301	to
O	34302	34306	temp
O	34307	34320	synchronously
O	34321	34322	(
O	34322	34328	having
O	34329	34332	the
O	34333	34337	same
O	34338	34343	value
O	34344	34351	locally
O	34352	34354	in
O	34355	34359	temp
O	34360	34361	)
O	34361	34362	,
O	34363	34367	then
O	34368	34371	the
O	34372	34377	first
O	34378	34385	assigns
O	34386	34387	a
O	34388	34391	new
O	34392	34397	value
O	34398	34400	to
O	34401	34402	i
O	34403	34404	(
O	34404	34407	say
O	34407	34408	,
O	34409	34413	from
O	34414	34415	1
O	34416	34418	to
O	34419	34420	6
O	34420	34421	)
O	34422	34425	and
O	34426	34429	the
O	34430	34435	other
O	34436	34439	one
O	34440	34444	does
O	34445	34448	the
O	34449	34453	same
O	34454	34459	thing
O	34460	34461	(
O	34461	34465	from
O	34466	34467	1
O	34468	34470	to
O	34471	34472	6
O	34472	34473	)
O	34473	34474	.

O	34475	34478	The
O	34479	34494	synchronization
O	34495	34499	must
O	34500	34504	span
O	34505	34509	from
O	34510	34517	reading
O	34518	34520	to
O	34521	34530	assigning
O	34531	34532	a
O	34533	34538	value
O	34538	34539	.

O	34540	34544	Your
O	34545	34550	first
O	34551	34566	synchronization
O	34567	34570	has
O	34571	34573	no
O	34574	34580	effect
O	34581	34582	(
O	34582	34589	reading
O	34590	34592	an
O	34593	34596	int
O	34597	34599	is
O	34600	34606	atomic
O	34606	34607	)
O	34608	34611	and
O	34612	34615	the
O	34616	34622	second
O	34623	34625	as
O	34626	34630	well
O	34630	34631	.

O	34632	34634	In
O	34635	34637	my
O	34638	34645	opinion
O	34645	34646	,
O	34647	34652	these
O	34653	34656	are
O	34657	34660	the
O	34661	34668	correct
O	34669	34674	forms
O	34674	34675	:
O	34676	34677	#
O	34677	34680	pre
