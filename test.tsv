Question	O
-	O
32859038	O
,	O
answer	O
-	O
32918035	O
Eran	O
'	O
s	O
answer	O
is	O
usually	O
the	O
best	O
approach	O
for	O
random	O
-	O
access	O
lists	O
.	O
If	O
your	O
List	B-api_mention
isn	O
'	O
t	O
random	O
access	O
,	O
or	O
if	O
you	O
have	O
a	O
Stream	B-api_mention
instead	O
of	O
a	O
List	B-api_mention
,	O
you	O
can	O
use	O
forEachOrdered	O
:	O
#	O
pre	O
This	O
is	O
safe	O
,	O
if	O
the	O
stream	O
is	O
parallel	O
,	O
even	O
though	O
the	O
destination	O
map	O
is	O
thread	O
-	O
unsafe	O
and	O
is	O
operated	O
upon	O
as	O
a	O
side	O
effect	O
.	O
The	O
forEachOrdered	O
guarantees	O
that	O
items	O
are	O
processed	O
one	O
-	O
at	O
-	O
a	O
-	O
time	O
,	O
in	O
order	O
.	O
For	O
this	O
reason	O
it	O
'	O
s	O
unlikely	O
that	O
any	O
speedup	O
will	O
result	O
from	O
running	O
in	O
parallel	O
.	O
(	O
There	O
might	O
be	O
some	O
speedup	O
if	O
there	O
are	O
expensive	O
operations	O
in	O
the	O
pipeline	O
before	O
the	O
forEachOrdered	O
.	O
)	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
8579702	O
If	O
you	O
just	O
invoke	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
directly	O
,	O
it	O
'	O
s	O
executed	O
on	O
the	O
calling	O
thread	O
,	O
just	O
like	O
any	O
other	O
method	O
call	O
.	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
required	O
to	O
actually	O
create	O
a	O
new	O
thread	O
so	O
that	O
the	O
runnable	O
'	O
s	O
run	O
method	O
is	O
executed	O
in	O
parallel	O
.	O
Question	O
-	O
19418427	O
,	O
answer	O
-	O
19418553	O
If	O
you	O
take	O
a	O
look	O
at	O
this	O
methods	O
#	O
pre	O
and	O
its	O
decompiled	O
with	O
javap	O
-	O
c	O
ClassWithTheseMethods	O
versions	O
you	O
will	O
see	O
#	O
pre	O
and	O
#	O
pre	O
So	O
if	O
Strings	O
are	O
not	O
final	O
compiler	O
will	O
have	O
to	O
use	O
StringBuilder	B-api_mention
to	O
concatenate	O
str1	O
and	O
str2	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
will	O
be	O
compiled	O
to	O
String	B-api_mention
concat	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
means	O
that	O
concat	O
will	O
be	O
created	O
at	O
runtime	O
so	O
will	O
not	O
come	O
from	O
String	B-api_mention
pool	O
.	O
Also	O
if	O
Strings	O
are	O
final	O
then	O
compiler	O
can	O
assume	O
that	O
they	O
will	O
never	O
change	O
so	O
instead	O
of	O
using	O
StringBuilder	B-api_mention
it	O
can	O
safely	O
concatenate	O
its	O
values	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
can	O
be	O
changed	O
to	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
+	O
StringLiteral	O
;	O
and	O
concatenated	O
into	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
;	O
which	O
means	O
that	O
concate	O
will	O
become	O
sting	O
literal	O
which	O
will	O
be	O
interned	O
in	O
string	O
pool	O
and	O
then	O
compared	O
with	O
same	O
string	O
literal	O
from	O
that	O
pool	O
in	O
if	O
statement	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276498	O
Assuming	O
all	O
the	O
streams	O
get	O
created	O
okay	O
,	O
yes	O
,	O
just	O
closing	O
bw	O
is	O
fine	O
with	O
those	O
stream	O
implementations	O
;	O
but	O
that	O
'	O
s	O
a	O
big	O
assumption	O
.	O
I	O
'	O
d	O
use	O
try	O
-	O
with	O
-	O
resources	O
(	O
tutorial	O
)	O
so	O
that	O
any	O
issues	O
constructing	O
the	O
subsequent	O
streams	O
that	O
throw	O
exceptions	O
don	O
'	O
t	O
leave	O
the	O
previous	O
streams	O
hanging	O
,	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
rely	O
on	O
the	O
stream	O
implementation	O
having	O
the	O
call	O
to	O
close	O
the	O
underlying	O
stream	O
:	O
#	O
pre	O
Note	O
you	O
no	O
longer	O
call	O
close	O
at	O
all	O
.	O
Important	O
note	O
:	O
To	O
have	O
try	O
-	O
with	O
-	O
resources	O
close	O
them	O
,	O
you	O
must	O
assign	O
the	O
streams	O
to	O
variables	O
as	O
you	O
open	O
them	O
,	O
you	O
cannot	O
use	O
nesting	O
.	O
If	O
you	O
use	O
nesting	O
,	O
an	O
exception	O
during	O
construction	O
of	O
one	O
of	O
the	O
later	O
streams	O
(	O
say	O
,	O
GZIPOutputStream	O
)	O
will	O
leave	O
any	O
stream	O
constructed	O
by	O
the	O
nested	O
calls	O
inside	O
it	O
open	O
.	O
From	O
JLS	O
ยง	O
14	O
.	O
20	O
.	O
3	O
:	O
#	O
blockquote	O
Note	O
the	O
word	O
"	O
variables	O
"	O
(	O
my	O
emphasis	O
)	O
.	O
E	O
.	O
g	O
.	O
,	O
don	O
'	O
t	O
do	O
this	O
:	O
#	O
pre	O
.	O
.	O
.	O
because	O
an	O
exception	O
from	O
the	O
GZIPOutputStream	O
(	O
OutputStream	O
)	O
constructor	O
(	O
which	O
says	O
it	O
may	O
throw	O
IOException	O
,	O
and	O
writes	O
a	O
header	O
to	O
the	O
underlying	O
stream	O
)	O
would	O
leave	O
the	O
FileOutputStream	B-api_mention
open	O
.	O
Since	O
some	O
resources	O
have	O
constructors	O
that	O
may	O
throw	O
and	O
others	O
don	O
'	O
t	O
,	O
it	O
'	O
s	O
a	O
good	O
habit	O
to	O
just	O
list	O
them	O
separately	O
.	O
We	O
can	O
double	O
-	O
check	O
our	O
interpretation	O
of	O
that	O
JLS	O
section	O
with	O
this	O
program	O
:	O
#	O
pre	O
.	O
.	O
.	O
which	O
has	O
the	O
output	O
:	O
#	O
pre	O
Note	O
that	O
there	O
are	O
no	O
calls	O
to	O
close	O
there	O
.	O
If	O
we	O
fix	O
main	O
:	O
#	O
pre	O
then	O
we	O
get	O
the	O
appropriate	O
close	O
calls	O
:	O
#	O
pre	O
(	O
Yes	O
,	O
two	O
calls	O
to	O
InnerMost	O
#	O
close	O
is	O
correct	O
;	O
one	O
is	O
from	O
Middle	O
,	O
the	O
other	O
from	O
try	O
-	O
with	O
-	O
resources	O
.	O
)	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
20593147	O
In	O
Java	O
8	O
,	O
you	O
could	O
do	O
:	O
#	O
pre	O
Some	O
notes	O
:	O
The	O
stream	O
returned	O
by	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	O
unlike	O
most	O
streams	O
)	O
needs	O
to	O
be	O
closed	O
.	O
For	O
the	O
reasons	O
mentioned	O
here	O
I	O
avoid	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
strange	O
code	O
(	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
lines	B-api_mention
:	I-api_mention
:	I-api_mention
iterator	I-api_mention
casts	O
a	O
Stream	B-api_mention
to	O
an	O
Iterable	B-api_mention
.	O
Question	O
-	O
24649842	O
,	O
answer	O
-	O
24649939	O
Try	O
adding	O
a	O
Thread	B-api_mention
.	I-api_mention
sleep	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
within	O
your	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
.	O
.	O
Basically	O
it	O
'	O
s	O
the	O
difference	O
between	O
scheduling	O
something	O
based	O
on	O
when	O
the	O
previous	O
execution	O
ends	O
and	O
when	O
it	O
(	O
logically	O
)	O
starts	O
.	O
For	O
example	O
,	O
suppose	O
I	O
schedule	O
an	O
alarm	O
to	O
go	O
off	O
with	O
a	O
fixed	O
rate	O
of	O
once	O
an	O
hour	O
,	O
and	O
every	O
time	O
it	O
goes	O
off	O
,	O
I	O
have	O
a	O
cup	O
of	O
coffee	O
,	O
which	O
takes	O
10	O
minutes	O
.	O
Suppose	O
that	O
starts	O
at	O
midnight	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
If	O
I	O
schedule	O
with	O
a	O
fixed	O
delay	O
of	O
one	O
hour	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
Which	O
one	O
you	O
want	O
depends	O
on	O
your	O
task	O
.	O
Question	O
-	O
14491966	O
I	O
made	O
a	O
class	O
called	O
QuickRandom	B-api_mention
,	O
and	O
its	O
job	O
is	O
to	O
produce	O
random	O
numbers	O
quickly	O
.	O
It	O
'	O
s	O
really	O
simple	O
:	O
just	O
take	O
the	O
old	O
value	O
,	O
multiply	O
by	O
a	O
double	O
,	O
and	O
take	O
the	O
decimal	O
part	O
.	O
Here	O
is	O
my	O
QuickRandom	B-api_mention
class	O
in	O
its	O
entirety	O
:	O
#	O
pre	O
And	O
here	O
is	O
the	O
code	O
I	O
wrote	O
to	O
test	O
it	O
:	O
#	O
pre	O
It	O
is	O
a	O
very	O
simple	O
algorithm	O
that	O
simply	O
multiplies	O
the	O
previous	O
double	O
by	O
a	O
"	O
magic	O
number	O
"	O
double	O
.	O
I	O
threw	O
it	O
together	O
pretty	O
quickly	O
,	O
so	O
I	O
could	O
probably	O
make	O
it	O
better	O
,	O
but	O
strangely	O
,	O
it	O
seems	O
to	O
be	O
working	O
fine	O
.	O
This	O
is	O
sample	O
output	O
of	O
the	O
commented	O
-	O
out	O
lines	O
in	O
the	O
main	O
method	O
:	O
#	O
pre	O
Hm	O
.	O
Pretty	O
random	O
.	O
In	O
fact	O
,	O
that	O
would	O
work	O
for	O
a	O
random	O
number	O
generator	O
in	O
a	O
game	O
.	O
Here	O
is	O
sample	O
output	O
of	O
the	O
non	O
-	O
commented	O
out	O
part	O
:	O
#	O
pre	O
Wow	O
!	O
It	O
performs	O
almost	O
4	O
times	O
faster	O
than	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
.	O
I	O
remember	O
reading	O
somewhere	O
that	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
tons	O
of	O
crazy	O
modulus	O
and	O
division	O
stuff	O
.	O
Is	O
that	O
really	O
necessary	O
?	O
My	O
algorithm	O
performs	O
a	O
lot	O
faster	O
and	O
it	O
seems	O
pretty	O
random	O
.	O
I	O
have	O
two	O
questions	O
:	O
#	O
li	O
Is	O
my	O
algorithm	O
"	O
good	O
enough	O
"	O
(	O
for	O
,	O
say	O
,	O
a	O
game	O
,	O
where	O
really	O
random	O
numbers	O
aren	O
'	O
t	O
too	O
important	O
)	O
?	O
#	O
li	O
Why	O
does	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
do	O
so	O
much	O
when	O
it	O
seems	O
just	O
simple	O
multiplication	O
and	O
cutting	O
out	O
the	O
decimal	O
will	O
suffice	O
?	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23885950	O
Short	O
answer	O
:	O
#	O
pre	O
Explanation	O
:	O
(	O
based	O
on	O
this	O
question	O
about	O
LocalDate	B-api_mention
)	O
Despite	O
its	O
name	O
,	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
represents	O
an	O
instant	O
on	O
the	O
time	O
-	O
line	O
,	O
not	O
a	O
"	O
date	O
"	O
.	O
The	O
actual	O
data	O
stored	O
within	O
the	O
object	O
is	O
a	O
long	O
count	O
of	O
milliseconds	O
since	O
1970	O
-	O
01	O
-	O
01T00	O
:	O
00Z	O
(	O
midnight	O
at	O
the	O
start	O
of	O
1970	O
GMT	O
/	O
UTC	O
)	O
.	O
The	O
equivalent	O
class	O
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
in	O
JSR	O
-	O
310	O
is	O
Instant	B-api_mention
,	O
thus	O
there	O
are	O
convenient	O
methods	O
to	O
provide	O
the	O
conversion	O
to	O
and	O
fro	O
:	O
#	O
pre	O
A	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
instance	O
has	O
no	O
concept	O
of	O
time	O
-	O
zone	O
.	O
This	O
might	O
seem	O
strange	O
if	O
you	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
,	O
because	O
the	O
toString	B-api_mention
is	O
relative	O
to	O
a	O
time	O
-	O
zone	O
.	O
However	O
that	O
method	O
actually	O
uses	O
Java	O
'	O
s	O
default	O
time	O
-	O
zone	O
on	O
the	O
fly	O
to	O
provide	O
the	O
string	O
.	O
The	O
time	O
-	O
zone	O
is	O
not	O
part	O
of	O
the	O
actual	O
state	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
.	O
An	O
Instant	O
also	O
does	O
not	O
contain	O
any	O
information	O
about	O
the	O
time	O
-	O
zone	O
.	O
Thus	O
,	O
to	O
convert	O
from	O
an	O
Instant	O
to	O
a	O
local	O
date	O
-	O
time	O
it	O
is	O
necessary	O
to	O
specify	O
a	O
time	O
-	O
zone	O
.	O
This	O
might	O
be	O
the	O
default	O
zone	O
-	O
ZoneId	B-api_mention
.	I-api_mention
systemDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
or	O
it	O
might	O
be	O
a	O
time	O
-	O
zone	O
that	O
your	O
application	O
controls	O
,	O
such	O
as	O
a	O
time	O
-	O
zone	O
from	O
user	O
preferences	O
.	O
LocalDateTime	B-api_mention
has	O
a	O
convenient	O
factory	O
method	O
that	O
takes	O
both	O
the	O
instant	O
and	O
time	O
-	O
zone	O
:	O
#	O
pre	O
In	O
reverse	O
,	O
the	O
LocalDateTime	B-api_mention
the	O
time	O
-	O
zone	O
is	O
specified	O
by	O
calling	O
the	O
atZone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
ZonedDateTime	B-api_mention
can	O
then	O
be	O
converted	O
directly	O
to	O
an	O
Instant	B-api_mention
:	O
#	O
pre	O
Note	O
that	O
the	O
conversion	O
from	O
LocalDateTime	B-api_mention
to	O
ZonedDateTime	B-api_mention
has	O
the	O
potential	O
to	O
introduce	O
unexpected	O
behaviour	O
.	O
This	O
is	O
because	O
not	O
every	O
local	O
date	O
-	O
time	O
exists	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
In	O
autumn	O
/	O
fall	O
,	O
there	O
is	O
an	O
overlap	O
in	O
the	O
local	O
time	O
-	O
line	O
where	O
the	O
same	O
local	O
date	O
-	O
time	O
occurs	O
twice	O
.	O
In	O
spring	O
,	O
there	O
is	O
a	O
gap	O
,	O
where	O
an	O
hour	O
disappears	O
.	O
See	O
the	O
Javadoc	O
of	O
atZone	B-api_mention
(	I-api_mention
ZoneId	I-api_mention
)	I-api_mention
for	O
more	O
the	O
definition	O
of	O
what	O
the	O
conversion	O
will	O
do	O
.	O
Summary	O
,	O
if	O
you	O
round	O
-	O
trip	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
to	O
a	O
LocalDateTime	B-api_mention
and	O
back	O
to	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
you	O
may	O
end	O
up	O
with	O
a	O
different	O
instant	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
Question	O
-	O
21524642	O
,	O
answer	O
-	O
21524694	O
Or	O
.	O
.	O
Pattern	B-api_mention
#	I-api_mention
quote	I-api_mention
:	O
String	B-api_mention
[	O
]	O
value	O
_	O
split	O
=	O
rat	O
_	O
values	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
happening	O
because	O
String	B-api_mention
#	I-api_mention
split	I-api_mention
accepts	O
a	O
regex	O
:	O
|	O
has	O
a	O
special	O
meaning	O
in	O
regex	O
.	O
quote	B-api_mention
will	O
return	O
a	O
String	B-api_mention
representation	O
for	O
the	O
regex	O
.	O
Question	O
-	O
24609564	O
,	O
answer	O
-	O
24609841	O
If	O
you	O
will	O
read	O
comment	O
above	O
the	O
code	O
,	O
It	O
is	O
mentioned	O
that	O
.	O
.	O
.	O
If	O
the	O
caller	O
is	O
not	O
a	O
ForkJoinTask	B-api_mention
,	O
this	O
method	O
is	O
behaviorally	O
equivalent	O
to	O
#	O
pre	O
So	O
it	O
is	O
just	O
another	O
form	O
to	O
implement	O
above	O
code	O
in	O
else	O
part	O
.	O
.	O
.	O
!	O
!	O
In	O
Style	O
notes	O
it	O
is	O
mentioned	O
that	O
,	O
#	O
blockquote	O
And	O
if	O
you	O
will	O
see	O
implementation	O
of	O
ManagedLocker	B-api_mention
#	I-api_mention
isReleasable	I-api_mention
,	O
It	O
is	O
updating	O
the	O
lock	O
and	O
returns	O
true	O
if	O
blocking	O
is	O
unnecessary	O
.	O
Interpretation	O
:	O
Blank	O
while	O
loops	O
are	O
used	O
to	O
provide	O
an	O
interrupt	O
until	O
some	O
condition	O
reset	O
to	O
true	O
/	O
false	O
.	O
Here	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
is	O
a	O
blocker	O
/	O
interrupt	O
until	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
true	O
when	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
false	O
.	O
Loop	O
will	O
continue	O
execution	O
while	O
blocker	O
is	O
not	O
releasable	O
(	O
!	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
and	O
blocker	O
is	O
not	O
blocked	O
!	O
!	O
Execution	O
will	O
be	O
out	O
of	O
loop	O
as	O
soon	O
as	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
set	O
to	O
true	O
.	O
Note	O
that	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
does	O
not	O
update	O
CAS	O
variable	O
,	O
but	O
it	O
guarantee	O
that	O
program	O
will	O
wait	O
until	O
variable	O
gets	O
updated	O
(	O
force	O
to	O
wait	O
until	O
variable	O
gets	O
updated	O
)	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
33375616	O
Most	O
of	O
these	O
answers	O
miss	O
the	O
big	O
picture	O
,	O
which	O
is	O
that	O
,	O
as	O
far	O
as	O
the	O
Java	O
language	O
is	O
concerned	O
,	O
there	O
is	O
no	O
more	O
difference	O
between	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
than	O
there	O
is	O
between	O
any	O
other	O
two	O
methods	O
.	O
They	O
'	O
re	O
both	O
just	O
methods	O
.	O
They	O
both	O
run	O
in	O
the	O
thread	O
that	O
called	O
them	O
.	O
They	O
both	O
do	O
whatever	O
they	O
were	O
coded	O
to	O
do	O
,	O
and	O
then	O
they	O
both	O
return	O
,	O
still	O
in	O
the	O
same	O
thread	O
,	O
to	O
their	O
callers	O
.	O
The	O
biggest	O
difference	O
is	O
that	O
most	O
of	O
the	O
code	O
for	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
native	O
code	O
while	O
,	O
in	O
most	O
cases	O
,	O
the	O
code	O
for	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
going	O
to	O
be	O
pure	O
Java	O
.	O
But	O
that	O
'	O
s	O
not	O
much	O
of	O
a	O
difference	O
.	O
Code	O
is	O
code	O
.	O
Native	O
code	O
is	O
harder	O
to	O
find	O
,	O
and	O
harder	O
to	O
understand	O
when	O
you	O
find	O
it	O
,	O
but	O
it	O
'	O
s	O
still	O
just	O
code	O
that	O
tells	O
the	O
computer	O
what	O
to	O
do	O
.	O
So	O
,	O
what	O
does	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
do	O
?	O
It	O
creates	O
a	O
new	O
native	O
thread	O
,	O
it	O
arranges	O
for	O
that	O
thread	O
to	O
call	O
t	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
it	O
tells	O
the	O
OS	O
to	O
let	O
the	O
new	O
thread	O
run	O
.	O
Then	O
it	O
returns	O
.	O
And	O
what	O
does	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
do	O
?	O
The	O
funny	O
thing	O
is	O
,	O
the	O
person	O
asking	O
this	O
question	O
is	O
the	O
person	O
who	O
wrote	O
it	O
.	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
whatever	O
you	O
(	O
i	O
.	O
e	O
.	O
,	O
the	O
developer	O
who	O
wrote	O
it	O
)	O
designed	O
it	O
to	O
do	O
.	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
method	O
that	O
the	O
library	O
provides	O
for	O
your	O
code	O
to	O
call	O
when	O
you	O
want	O
a	O
new	O
thread	O
.	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
method	O
that	O
you	O
provide	O
for	O
the	O
library	O
to	O
call	O
in	O
the	O
new	O
thread	O
.	O
Question	O
-	O
4709175	O
,	O
answer	O
-	O
4709284	O
#	O
blockquote	O
You	O
can	O
use	O
an	O
Enum	B-api_mention
to	O
represent	O
a	O
smallish	O
fixed	O
set	O
of	O
constants	O
or	O
an	O
internal	O
class	O
mode	O
while	O
increasing	O
readability	O
.	O
Also	O
,	O
Enums	O
can	O
enforce	O
a	O
certain	O
rigidity	O
when	O
used	O
in	O
method	O
parameters	O
.	O
They	O
offer	O
the	O
interesting	O
possibility	O
of	O
passing	O
information	O
to	O
a	O
constructor	O
like	O
in	O
the	O
Planets	O
example	O
on	O
Oracle	O
'	O
s	O
site	O
and	O
,	O
as	O
you	O
'	O
ve	O
discovered	O
,	O
also	O
allow	O
a	O
simple	O
way	O
to	O
create	O
a	O
singleton	O
pattern	O
.	O
ex	O
:	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
reads	O
better	O
than	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
enforces	O
the	O
use	O
of	O
fixed	O
set	O
of	O
values	O
shown	O
in	O
an	O
IDE	O
when	O
you	O
add	O
the	O
.	O
separator	O
instead	O
of	O
all	O
integers	O
.	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20889556	O
To	O
complement	O
the	O
given	O
answers	O
,	O
also	O
take	O
note	O
of	O
the	O
following	O
:	O
#	O
pre	O
This	O
code	O
will	O
also	O
print	O
:	O
false	O
As	O
user	O
Jay	O
has	O
claimed	O
in	O
a	O
comment	O
for	O
the	O
accepted	O
answer	O
,	O
care	O
must	O
be	O
taken	O
when	O
using	O
operator	O
=	O
=	O
on	O
objects	O
,	O
here	O
you	O
'	O
re	O
checking	O
if	O
both	O
references	O
are	O
the	O
same	O
,	O
which	O
is	O
not	O
,	O
because	O
they	O
are	O
different	O
objets	O
,	O
although	O
they	O
represent	O
the	O
very	O
same	O
value	O
.	O
To	O
compare	O
objects	O
,	O
you	O
should	O
use	O
the	O
equals	O
method	O
instead	O
:	O
#	O
pre	O
This	O
will	O
print	O
:	O
true	O
You	O
may	O
ask	O
,	O
But	O
then	O
why	O
the	O
first	O
line	O
printed	O
true	O
?	O
.	O
Checking	O
the	O
source	O
code	O
for	O
the	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
method	O
,	O
you	O
can	O
see	O
the	O
following	O
:	O
#	O
pre	O
If	O
the	O
param	O
is	O
an	O
integer	O
between	O
IntegerCache	B-api_mention
.	I-api_mention
low	I-api_mention
(	O
defaulted	O
to	O
-	O
128	O
)	O
and	O
IntegerCache	B-api_mention
.	I-api_mention
high	I-api_mention
(	O
calculated	O
at	O
runtime	O
with	O
minimum	O
value	O
127	O
)	O
then	O
a	O
pre	O
-	O
allocated	O
(	O
cached	O
)	O
object	O
is	O
returned	O
.	O
So	O
when	O
you	O
use	O
127	O
as	O
parameter	O
,	O
you	O
'	O
re	O
getting	O
two	O
references	O
to	O
same	O
cached	O
object	O
and	O
getting	O
true	O
in	O
the	O
comparison	O
of	O
the	O
references	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
36242382	O
You	O
can	O
use	O
Predicates	O
from	O
Eclipse	O
Collections	O
#	O
pre	O
If	O
you	O
can	O
'	O
t	O
change	O
the	O
strings	O
from	O
List	B-api_mention
:	O
#	O
pre	O
If	O
you	O
only	O
need	O
a	O
negation	O
of	O
String	B-api_mention
.	I-api_mention
isEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
can	O
also	O
use	O
StringPredicates	B-api_mention
.	I-api_mention
notEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Note	O
:	O
I	O
am	O
a	O
contributor	O
to	O
Eclipse	O
Collections	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791724	O
Use	O
the	O
replaceEach	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
from	O
Apache	O
Commons	O
StringUtils	B-api_mention
:	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
28770822	O
,	O
answer	O
-	O
28853754	O
TLDR	O
:	O
Jump	O
to	O
the	O
conclusion	O
#	O
blockquote	O
A	O
brief	O
history	O
of	O
@	O
Native	O
I	O
made	O
some	O
search	O
on	O
the	O
mailing	O
lists	O
.	O
I	O
found	O
some	O
interesting	O
things	O
.	O
At	O
first	O
an	O
annotation	O
(	O
1	O
2	O
)	O
javax	O
.	O
tools	O
.	O
annotation	O
.	O
ForceNativeHeader	O
was	O
introduced	O
to	O
#	O
blockquote	O
It	O
is	O
used	O
by	O
com	O
.	O
sun	O
.	O
tools	O
.	O
javac	O
.	O
processing	O
.	O
NativeapiVisitor	O
.	O
By	O
looking	O
at	O
the	O
code	O
we	O
can	O
see	O
that	O
the	O
native	O
header	O
is	O
generated	O
if	O
the	O
class	O
declare	O
some	O
native	O
methods	O
or	O
if	O
the	O
class	O
is	O
annotated	O
@	O
ForceNativeHeader	O
.	O
Later	O
this	O
annotation	O
was	O
renamed	O
to	O
GenerateNativeHeader	O
(	O
1	O
2	O
)	O
.	O
Then	O
this	O
annotation	O
was	O
added	O
to	O
several	O
types	O
(	O
especially	O
Integer	B-api_mention
and	O
Long	B-api_mention
)	O
with	O
an	O
interresting	O
comment	O
:	O
#	O
pre	O
But	O
by	O
adding	O
this	O
annotation	O
it	O
add	O
a	O
problematic	O
dependency	O
from	O
base	O
module	O
to	O
the	O
module	O
containing	O
javax	O
.	O
tools	O
.	O
So	O
the	O
annotation	O
were	O
removed	O
from	O
Integer	B-api_mention
and	O
Long	B-api_mention
and	O
these	O
files	O
were	O
explicitly	O
added	O
to	O
the	O
build	O
process	O
since	O
the	O
header	O
were	O
no	O
more	O
automatically	O
generated	O
.	O
.	O
.	O
a	O
"	O
(	O
hopefully	O
temporary	O
)	O
hack	O
"	O
.	O
So	O
a	O
new	O
annotation	O
java	O
.	O
lang	O
.	O
annotation	O
.	O
Native	O
was	O
created	O
and	O
used	O
in	O
Integer	B-api_mention
and	O
Long	B-api_mention
.	O
The	O
annotation	O
was	O
set	O
a	O
TargetType	O
FIELD	O
.	O
#	O
blockquote	O
All	O
the	O
purpose	O
of	O
this	O
stuff	O
is	O
:	O
#	O
blockquote	O
It	O
is	O
the	O
case	O
of	O
Integer	B-api_mention
and	O
Long	B-api_mention
this	O
was	O
a	O
part	O
of	O
the	O
JEP	O
139	O
:	O
Enhance	O
javac	O
to	O
Improve	O
Build	O
Speed	O
:	O
#	O
blockquote	O
A	O
basic	O
experimentation	O
I	O
made	O
a	O
basic	O
experimentation	O
on	O
the	O
JDK	O
.	O
I	O
clone	O
the	O
open	O
-	O
jdk	O
forest	O
and	O
i	O
successfully	O
build	O
it	O
.	O
As	O
expected	O
the	O
header	O
files	O
where	O
generated	O
for	O
Integer	B-api_mention
and	O
Long	B-api_mention
(	O
thanks	O
to	O
@	O
Native	O
)	O
and	O
for	O
Float	B-api_mention
and	O
Double	B-api_mention
(	O
thanks	O
to	O
their	O
native	O
methods	O
)	O
but	O
not	O
for	O
Byte	B-api_mention
,	O
Short	B-api_mention
.	O
.	O
.	O
#	O
pre	O
Then	O
i	O
tried	O
to	O
remove	O
the	O
@	O
Native	O
from	O
the	O
Integer	B-api_mention
fields	O
and	O
i	O
tried	O
to	O
build	O
again	O
the	O
jdk	O
but	O
i	O
get	O
an	O
error	O
:	O
#	O
pre	O
logically	O
since	O
the	O
header	O
have	O
not	O
been	O
generated	O
.	O
I	O
have	O
also	O
confirmed	O
that	O
java	O
_	O
lang	O
_	O
Integer	O
.	O
h	O
is	O
included	O
in	O
several	O
c	O
and	O
cpp	O
files	O
:	O
#	O
pre	O
like	O
Long	B-api_mention
#	O
pre	O
like	O
Float	B-api_mention
#	O
pre	O
and	O
like	O
Double	B-api_mention
#	O
pre	O
but	O
neither	O
Short	B-api_mention
find	O
.	O
\	O
(	O
-	O
name	O
StringLiteral	O
-	O
o	O
-	O
name	O
StringLiteral	O
\	O
)	O
-	O
exec	O
grep	O
StringLiteral	O
{	O
}	O
\	O
;	O
-	O
print	O
nor	O
Byte	B-api_mention
,	O
nor	O
Character	B-api_mention
.	O
Conclusion	O
Among	O
all	O
these	O
types	O
,	O
only	O
Integer	B-api_mention
,	O
Long	B-api_mention
,	O
Float	B-api_mention
,	O
Double	B-api_mention
are	O
used	O
in	O
the	O
native	O
source	O
code	O
of	O
the	O
jdk	O
.	O
And	O
only	O
the	O
Integer	B-api_mention
and	O
Long	B-api_mention
fields	O
are	O
annotated	O
with	O
@	O
Native	O
because	O
they	O
have	O
no	O
native	O
methods	O
(	O
as	O
opposed	O
to	O
Float	B-api_mention
and	O
Double	B-api_mention
)	O
Question	O
-	O
23674624	O
I	O
'	O
m	O
looking	O
at	O
the	O
docs	O
for	O
the	O
IntStream	B-api_mention
,	O
and	O
I	O
see	O
an	O
toArray	B-api_mention
method	O
,	O
but	O
no	O
way	O
to	O
go	O
directly	O
to	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Surely	O
there	O
is	O
a	O
way	O
to	O
convert	O
a	O
Stream	B-api_mention
to	O
a	O
List	B-api_mention
?	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
21008747	O
[	O
Disclaimer	O
this	O
is	O
a	O
deliberately	O
opinionated	O
style	O
of	O
answer	O
as	O
I	O
feel	O
a	O
more	O
"	O
don	O
'	O
t	O
do	O
this	O
at	O
home	O
kids	O
"	O
answer	O
is	O
warranted	O
]	O
The	O
sin	O
is	O
the	O
line	O
field	O
.	B-api_mention
setAccessible	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
says	O
to	O
violate	O
the	O
public	O
api	O
by	O
allowing	O
access	O
to	O
a	O
private	O
field	O
.	O
Thats	O
a	O
giant	O
security	O
hole	O
which	O
can	O
be	O
locked	O
down	O
by	O
configuring	O
a	O
security	O
manager	O
.	O
The	O
phenomenon	O
in	O
the	O
question	O
are	O
implementation	O
details	O
which	O
you	O
would	O
never	O
see	O
when	O
not	O
using	O
that	O
dangerous	O
line	O
of	O
code	O
to	O
violate	O
the	O
access	O
modifiers	O
via	O
reflection	O
.	O
Clearly	O
two	O
(	O
normally	O
)	O
immutable	O
strings	O
can	O
share	O
the	O
same	O
char	O
array	O
.	O
Whether	O
a	O
substring	O
shares	O
the	O
same	O
array	O
depends	O
on	O
whether	O
it	O
can	O
and	O
whether	O
the	O
developer	O
thought	O
to	O
share	O
it	O
.	O
Normally	O
these	O
are	O
invisible	O
implementation	O
details	O
which	O
you	O
should	O
not	O
have	O
to	O
know	O
unless	O
you	O
shoot	O
the	O
access	O
modifier	O
through	O
the	O
head	O
with	O
that	O
line	O
of	O
code	O
.	O
It	O
is	O
simply	O
not	O
a	O
good	O
idea	O
to	O
rely	O
upon	O
such	O
details	O
which	O
cannot	O
be	O
experienced	O
without	O
violating	O
the	O
access	O
modifiers	O
using	O
reflection	O
.	O
The	O
owner	O
of	O
that	O
class	O
only	O
supports	O
the	O
normal	O
public	O
API	O
and	O
is	O
free	O
to	O
make	O
implementation	O
changes	O
in	O
the	O
future	O
.	O
Having	O
said	O
all	O
that	O
the	O
line	O
of	O
code	O
is	O
really	O
very	O
useful	O
when	O
you	O
have	O
a	O
gun	O
held	O
you	O
your	O
head	O
forcing	O
you	O
to	O
do	O
such	O
dangerous	O
things	O
.	O
Using	O
that	O
back	O
door	O
is	O
usually	O
a	O
code	O
smell	O
that	O
you	O
need	O
to	O
upgrade	O
to	O
better	O
library	O
code	O
where	O
you	O
don	O
'	O
t	O
have	O
to	O
sin	O
.	O
Another	O
common	O
use	O
of	O
that	O
dangerous	O
line	O
of	O
code	O
is	O
to	O
write	O
a	O
"	O
voodoo	O
framework	O
"	O
(	O
orm	O
,	O
injection	O
container	O
,	O
.	O
.	O
.	O
)	O
.	O
Many	O
folks	O
get	O
religious	O
about	O
such	O
frameworks	O
(	O
both	O
for	O
and	O
against	O
them	O
)	O
so	O
I	O
will	O
avoid	O
inviting	O
a	O
flame	O
war	O
by	O
saying	O
nothing	O
other	O
than	O
the	O
vast	O
majority	O
of	O
programmers	O
don	O
'	O
t	O
have	O
to	O
go	O
there	O
.	O
Question	O
-	O
19431234	O
Java	O
8	O
has	O
a	O
completely	O
new	O
API	O
for	O
date	O
and	O
time	O
.	O
One	O
of	O
the	O
most	O
useful	O
classes	O
in	O
this	O
API	O
is	O
LocalDateTime	B-api_mention
,	O
for	O
holding	O
a	O
timezone	O
-	O
independent	O
date	O
-	O
with	O
-	O
time	O
value	O
.	O
There	O
are	O
probably	O
millions	O
of	O
lines	O
of	O
code	O
using	O
the	O
legacy	O
class	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
for	O
this	O
purpose	O
.	O
As	O
such	O
,	O
when	O
interfacing	O
old	O
and	O
new	O
code	O
there	O
will	O
be	O
a	O
need	O
for	O
converting	O
between	O
the	O
two	O
.	O
As	O
there	O
seems	O
to	O
be	O
no	O
direct	O
methods	O
for	O
accomplishing	O
this	O
,	O
how	O
can	O
it	O
be	O
done	O
?	O
Question	O
-	O
23932061	O
,	O
answer	O
-	O
23932216	O
You	O
can	O
easily	O
create	O
a	O
Stream	B-api_mention
out	O
of	O
an	O
Iterable	B-api_mention
or	O
Iterator	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26877910	O
What	O
I	O
can	O
only	O
share	O
is	O
my	O
own	O
method	O
.	O
You	O
can	O
use	O
a	O
temporary	O
String	B-api_mention
temp	O
=	O
StringLiteral	O
;	O
or	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
my	O
example	O
code	O
created	O
in	O
console	O
application	O
via	O
c	O
#	O
-	O
"	O
Idea	O
Only	O
,	O
Not	O
Exact	O
Answer	O
"	O
.	O
#	O
pre	O
Or	O
you	O
can	O
also	O
use	O
the	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
pre	O
Output	O
:	O
time	O
upon	O
a	O
Once	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
foo	O
.	O
Question	O
-	O
22501230	O
,	O
answer	O
-	O
22511214	O
I	O
don	O
'	O
t	O
like	O
any	O
of	O
the	O
solutions	O
presented	O
except	O
for	O
JAB	O
'	O
s	O
.	O
None	O
of	O
the	O
others	O
make	O
it	O
easy	O
to	O
read	O
the	O
code	O
and	O
understand	O
what	O
is	O
being	O
computed	O
.	O
Here	O
'	O
s	O
how	O
I	O
would	O
write	O
this	O
code	O
-	O
-	O
I	O
only	O
know	O
C	O
#	O
,	O
not	O
Java	O
,	O
but	O
you	O
get	O
the	O
picture	O
:	O
#	O
pre	O
Now	O
it	O
is	O
much	O
more	O
clear	O
what	O
is	O
being	O
computed	O
here	O
:	O
this	O
emphasizes	O
that	O
we	O
are	O
computing	O
who	O
gets	O
hit	O
by	O
what	O
attack	O
,	O
and	O
returning	O
both	O
results	O
.	O
However	O
this	O
could	O
be	O
even	O
better	O
;	O
that	O
Boolean	B-api_mention
array	O
is	O
somewhat	O
opaque	O
.	O
I	O
like	O
the	O
table	O
lookup	O
approach	O
but	O
I	O
would	O
be	O
inclined	O
to	O
write	O
it	O
in	O
such	O
a	O
way	O
that	O
made	O
it	O
clear	O
what	O
the	O
intended	O
game	O
semantics	O
were	O
.	O
That	O
is	O
,	O
rather	O
than	O
"	O
an	O
attack	O
of	O
zero	O
and	O
a	O
defense	O
of	O
one	O
results	O
in	O
no	O
hit	O
"	O
,	O
instead	O
find	O
a	O
way	O
to	O
make	O
the	O
code	O
more	O
clearly	O
imply	O
"	O
a	O
low	O
kick	O
attack	O
and	O
a	O
low	O
block	O
defense	O
results	O
in	O
no	O
hit	O
"	O
.	O
Make	O
the	O
code	O
reflect	O
the	O
business	O
logic	O
of	O
the	O
game	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31922994	O
I	O
think	O
that	O
is	O
because	O
you	O
usually	O
write	O
your	O
functions	O
to	O
manipulate	O
data	O
,	O
and	O
then	O
lift	O
it	O
to	O
Optional	B-api_mention
using	O
map	O
and	O
similar	O
functions	O
.	O
This	O
adds	O
the	O
default	O
Optional	B-api_mention
behavior	O
to	O
it	O
.	O
Of	O
course	O
,	O
there	O
might	O
be	O
cases	O
,	O
when	O
it	O
is	O
necessary	O
to	O
write	O
your	O
own	O
auxilary	O
function	O
that	O
works	O
on	O
Optional	B-api_mention
.	O
Question	O
-	O
31445024	O
I	O
'	O
m	O
trying	O
to	O
determine	O
whether	O
the	O
following	O
statements	O
are	O
guaranteed	O
to	O
be	O
true	O
:	O
#	O
pre	O
I	O
'	O
ve	O
always	O
assumed	O
that	O
autoboxing	O
was	O
equivalent	O
to	O
calling	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
the	O
corresponding	O
type	O
.	O
Every	O
discussion	O
that	O
I	O
'	O
ve	O
seen	O
on	O
the	O
topic	O
seems	O
to	O
support	O
my	O
assumption	O
.	O
But	O
all	O
I	O
could	O
find	O
in	O
the	O
JLS	O
was	O
the	O
following	O
(	O
ยง	O
5	O
.	O
1	O
.	O
7	O
)	O
:	O
#	O
blockquote	O
That	O
describes	O
behavior	O
identical	O
to	O
that	O
of	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
there	O
doesn	O
'	O
t	O
seem	O
to	O
be	O
any	O
guarantee	O
that	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
actually	O
invoked	O
,	O
meaning	O
there	O
could	O
theoretically	O
be	O
an	O
implementation	O
that	O
keeps	O
a	O
separate	O
,	O
dedicated	O
cache	O
for	O
autoboxed	O
values	O
.	O
In	O
such	O
a	O
case	O
,	O
there	O
might	O
not	O
be	O
identity	O
equality	O
between	O
cached	O
autoboxed	O
values	O
and	O
regular	O
cached	O
boxed	O
values	O
.	O
Oracle	O
'	O
s	O
autoboxing	O
tutorial	O
states	O
matter	O
-	O
of	O
-	O
factly	O
that	O
li	O
.	O
add	O
(	O
args	O
)	O
is	O
compiled	O
to	O
li	O
.	O
add	O
(	O
args	O
)	O
,	O
where	O
i	O
is	O
an	O
int	O
.	O
But	O
I	O
don	O
'	O
t	O
know	O
whether	O
the	O
tutorial	O
should	O
be	O
considered	O
an	O
authoritative	O
source	O
.	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
24296741	O
Here	O
'	O
s	O
another	O
technique	O
I	O
ran	O
across	O
the	O
other	O
day	O
:	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
call	O
creates	O
a	O
List	B-api_mention
containing	O
n	O
copies	O
of	O
whatever	O
value	O
you	O
provide	O
.	O
In	O
this	O
case	O
it	O
'	O
s	O
the	O
boxed	O
Integer	O
value	O
1	O
.	O
Of	O
course	O
it	O
doesn	O
'	O
t	O
actually	O
create	O
a	O
list	O
with	O
n	O
elements	O
;	O
it	O
creates	O
a	O
"	O
virtualized	O
"	O
list	O
that	O
contains	O
only	O
the	O
value	O
and	O
the	O
length	O
,	O
and	O
any	O
call	O
to	O
get	O
within	O
range	O
just	O
returns	O
the	O
value	O
.	O
The	O
nCopies	B-api_mention
method	O
has	O
been	O
around	O
since	O
the	O
Collections	B-api_mention
Framework	O
was	O
introduced	O
way	O
back	O
in	O
JDK	O
1	O
.	O
2	O
.	O
Of	O
course	O
,	O
the	O
ability	O
to	O
create	O
a	O
stream	O
from	O
its	O
result	O
was	O
added	O
in	O
Java	O
SE	O
8	O
.	O
Big	O
deal	O
,	O
another	O
way	O
to	O
do	O
the	O
same	O
thing	O
in	O
about	O
the	O
same	O
number	O
of	O
lines	O
.	O
However	O
,	O
this	O
technique	O
is	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
generate	I-api_mention
and	O
IntStream	B-api_mention
.	I-api_mention
iterate	I-api_mention
approaches	O
,	O
and	O
surprisingly	O
,	O
it	O
'	O
s	O
also	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
approach	O
.	O
For	O
iterate	O
and	O
generate	O
the	O
result	O
is	O
perhaps	O
not	O
too	O
surprising	O
.	O
The	O
streams	O
framework	O
(	O
really	O
,	O
the	O
Spliterators	O
for	O
these	O
streams	O
)	O
is	O
built	O
on	O
the	O
assumption	O
that	O
the	O
lambdas	O
will	O
potentially	O
generate	O
different	O
values	O
each	O
time	O
,	O
and	O
that	O
they	O
will	O
generate	O
an	O
unbounded	O
number	O
of	O
results	O
.	O
This	O
makes	O
parallel	O
splitting	O
particularly	O
difficult	O
.	O
The	O
iterate	O
method	O
is	O
also	O
problematic	O
for	O
this	O
case	O
because	O
each	O
call	O
requires	O
the	O
result	O
of	O
the	O
previous	O
one	O
.	O
So	O
the	O
streams	O
using	O
generate	O
and	O
iterate	O
don	O
'	O
t	O
do	O
very	O
well	O
for	O
generating	O
repeated	O
constants	O
.	O
The	O
relatively	O
poor	O
performance	O
of	O
range	O
is	O
surprising	O
.	O
This	O
too	O
is	O
virtualized	O
,	O
so	O
the	O
elements	O
don	O
'	O
t	O
actually	O
all	O
exist	O
in	O
memory	O
,	O
and	O
the	O
size	O
is	O
known	O
up	O
front	O
.	O
This	O
should	O
make	O
for	O
a	O
fast	O
and	O
easily	O
parallelizable	O
spliterator	O
.	O
But	O
it	O
surprisingly	O
didn	O
'	O
t	O
do	O
very	O
well	O
.	O
Perhaps	O
the	O
reason	O
is	O
that	O
range	O
has	O
to	O
compute	O
a	O
value	O
for	O
each	O
element	O
of	O
the	O
range	O
and	O
then	O
call	O
a	O
function	O
on	O
it	O
.	O
But	O
this	O
function	O
just	O
ignores	O
its	O
input	O
and	O
returns	O
a	O
constant	O
,	O
so	O
I	O
'	O
m	O
surprised	O
this	O
isn	O
'	O
t	O
inlined	O
and	O
killed	O
.	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
technique	O
has	O
to	O
do	O
boxing	O
/	O
unboxing	O
in	O
order	O
to	O
handle	O
the	O
values	O
,	O
since	O
there	O
are	O
no	O
primitive	O
specializations	O
of	O
List	B-api_mention
.	O
Since	O
the	O
value	O
is	O
the	O
same	O
every	O
time	O
,	O
it	O
'	O
s	O
basically	O
boxed	O
once	O
and	O
that	O
box	O
is	O
shared	O
by	O
all	O
n	O
copies	O
.	O
I	O
suspect	O
boxing	O
/	O
unboxing	O
is	O
highly	O
optimized	O
,	O
even	O
intrinsified	O
,	O
and	O
it	O
can	O
be	O
inlined	O
well	O
.	O
Here	O
'	O
s	O
the	O
code	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
JMH	O
results	O
:	O
(	O
2	O
.	O
8GHz	O
Core2Duo	O
)	O
#	O
pre	O
There	O
is	O
a	O
fair	O
amount	O
of	O
variance	O
in	O
the	O
ncopies	O
version	O
,	O
but	O
overall	O
it	O
seems	O
comfortably	O
20x	O
faster	O
than	O
the	O
range	O
version	O
.	O
(	O
I	O
'	O
d	O
be	O
quite	O
willing	O
to	O
believe	O
that	O
I	O
'	O
ve	O
done	O
something	O
wrong	O
,	O
though	O
.	O
)	O
I	O
'	O
m	O
surprised	O
at	O
how	O
well	O
the	O
nCopies	B-api_mention
technique	O
works	O
.	O
Internally	O
it	O
doesn	O
'	O
t	O
do	O
very	O
much	O
special	O
,	O
with	O
the	O
stream	O
of	O
the	O
virtualized	O
list	O
simply	O
being	O
implemented	O
using	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
!	O
I	O
had	O
expected	O
that	O
it	O
would	O
be	O
necessary	O
to	O
create	O
a	O
specialized	O
spliterator	O
to	O
get	O
this	O
to	O
go	O
fast	O
,	O
but	O
it	O
already	O
seems	O
to	O
be	O
pretty	O
good	O
.	O
Question	O
-	O
28671903	O
,	O
answer	O
-	O
28672583	O
The	O
behaviour	O
is	O
(	O
somewhat	O
)	O
documented	O
in	O
the	O
javadoc	O
:	O
#	O
blockquote	O
What	O
this	O
means	O
in	O
practice	O
,	O
when	O
you	O
call	O
source	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
:	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
a	O
smaller	O
size	O
than	O
source	O
,	O
the	O
remove	O
method	O
of	O
HashSet	B-api_mention
is	O
called	O
,	O
which	O
is	O
fast	O
.	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
equal	O
or	O
larger	O
size	O
than	O
the	O
source	O
,	O
then	O
removals	O
.	O
contains	O
is	O
called	O
,	O
which	O
is	O
slow	O
for	O
an	O
ArrayList	B-api_mention
.	O
Quick	O
fix	O
:	O
Collection	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
removals	O
=	O
new	O
HashSet	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
that	O
there	O
is	O
an	O
open	O
bug	O
that	O
is	O
very	O
similar	O
to	O
what	O
you	O
describe	O
.	O
The	O
bottom	O
line	O
seems	O
to	O
be	O
that	O
it	O
is	O
probably	O
a	O
poor	O
choice	O
but	O
can	O
'	O
t	O
be	O
changed	O
because	O
it	O
is	O
documented	O
in	O
the	O
javadoc	O
.	O
For	O
reference	O
,	O
this	O
is	O
the	O
code	O
of	O
removeAll	B-api_mention
(	O
in	O
Java	O
8	O
-	O
haven	O
'	O
t	O
checked	O
other	O
versions	O
)	O
:	O
#	O
pre	O
Question	O
-	O
7520432	O
I	O
wanted	O
to	O
clarify	O
if	O
I	O
understand	O
this	O
correctly	O
:	O
#	O
li	O
=	O
=	O
-	O
>	O
is	O
a	O
reference	O
comparison	O
,	O
i	O
.	O
e	O
.	O
both	O
objects	O
point	O
to	O
the	O
same	O
memory	O
location	O
#	O
li	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
>	O
evaluates	O
to	O
the	O
comparison	O
of	O
values	O
in	O
the	O
objects	O
Am	O
I	O
correct	O
in	O
my	O
understanding	O
?	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723704	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
.	O
You	O
can	O
also	O
call	O
methods	O
which	O
handle	O
a	O
null	O
as	O
an	O
argument	O
,	O
e	O
.	O
g	O
.	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
,	O
but	O
you	O
cannot	O
reference	O
a	O
null	O
value	O
and	O
call	O
a	O
method	O
on	O
it	O
.	O
BTW	O
There	O
is	O
a	O
tricky	O
situation	O
where	O
it	O
appears	O
you	O
can	O
call	O
static	O
methods	O
on	O
null	O
values	O
.	O
#	O
pre	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667354	O
Enum	O
is	O
just	O
a	O
little	O
bit	O
special	O
class	O
.	O
Enums	O
can	O
store	O
additional	O
fields	O
,	O
implement	O
methods	O
etc	O
.	O
For	O
example	O
#	O
pre	O
Now	O
you	O
can	O
say	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
see	O
output	O
:	O
a	O
Question	O
-	O
5982447	O
,	O
answer	O
-	O
5982478	O
Use	O
the	O
Set	B-api_mention
#	I-api_mention
toArray	I-api_mention
(	I-api_mention
T	I-api_mention
[	I-api_mention
]	I-api_mention
)	I-api_mention
method	O
taking	O
a	O
typed	O
array	O
argument	O
of	O
the	O
same	O
size	O
.	O
String	B-api_mention
[	O
]	O
GPXFILES1	O
=	O
myset	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
A	O
different	O
size	O
can	O
also	O
,	O
but	O
that	O
would	O
force	O
the	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
create	O
a	O
new	O
array	O
to	O
return	O
instead	O
of	O
reusing	O
the	O
provided	O
argument	O
,	O
which	O
may	O
end	O
up	O
to	O
be	O
less	O
efficient	O
.	O
See	O
also	O
the	O
source	O
code	O
of	O
AbstractCollection	B-api_mention
#	I-api_mention
toArray	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
36875991	O
Basically	O
,	O
=	O
=	O
compares	O
if	O
two	O
objects	O
have	O
the	O
same	O
reference	O
on	O
the	O
heap	O
,	O
so	O
unless	O
two	O
references	O
are	O
linked	O
to	O
the	O
same	O
object	O
,	O
this	O
comparison	O
will	O
be	O
false	O
.	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
method	O
inherited	O
from	O
Object	B-api_mention
class	O
.	O
This	O
method	O
by	O
default	O
compares	O
if	O
two	O
objects	O
have	O
the	O
same	O
referece	O
.	O
It	O
means	O
:	O
object1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
<	O
=	O
>	O
object1	O
=	O
=	O
object2	O
However	O
,	O
if	O
you	O
want	O
to	O
establish	O
equality	O
between	O
two	O
objects	O
of	O
the	O
same	O
class	O
you	O
should	O
override	O
this	O
method	O
.	O
It	O
is	O
also	O
very	O
important	O
to	O
override	O
the	O
method	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
you	O
have	O
overriden	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Implement	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
establishing	O
equality	O
is	O
part	O
of	O
the	O
Java	O
Object	B-api_mention
Contract	O
.	O
If	O
you	O
are	O
working	O
with	O
collections	O
,	O
and	O
you	O
haven	O
'	O
t	O
implemented	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
Strange	O
Bad	O
Things	O
could	O
happen	O
:	O
#	O
pre	O
null	O
will	O
be	O
printed	O
after	O
executing	O
the	O
previous	O
code	O
if	O
you	O
haven	O
'	O
t	O
implemented	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32863263	O
Don	O
'	O
t	O
feel	O
like	O
you	O
have	O
to	O
do	O
everything	O
in	O
/	O
with	O
the	O
stream	O
.	O
I	O
would	O
just	O
do	O
:	O
#	O
pre	O
As	O
long	O
as	O
you	O
don	O
'	O
t	O
parallelise	O
the	O
stream	O
this	O
will	O
work	O
and	O
it	O
avoids	O
potentially	O
expensive	O
and	O
/	O
or	O
problematic	O
(	O
in	O
the	O
case	O
of	O
duplicates	O
)	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
indexOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
operations	O
.	O
(	O
You	O
cannot	O
use	O
a	O
regular	O
int	O
variable	O
in	O
place	O
of	O
the	O
AtomicInteger	O
because	O
variables	O
used	O
from	O
outside	O
a	O
lambda	O
expression	O
must	O
be	O
effectively	O
final	O
.	O
Note	O
that	O
when	O
uncontested	O
(	O
as	O
in	O
this	O
case	O
)	O
,	O
AtomicInteger	O
is	O
very	O
fast	O
and	O
won	O
'	O
t	O
pose	O
a	O
performance	O
problem	O
.	O
But	O
if	O
it	O
worries	O
you	O
you	O
can	O
use	O
a	O
non	O
-	O
thread	O
-	O
safe	O
counter	O
.	O
)	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175175	O
Note	O
that	O
a	O
.	O
b	O
and	O
c	O
are	O
instances	O
of	O
primitive	O
wrapper	O
classes	O
(	O
such	O
as	O
Integer	B-api_mention
,	O
Double	B-api_mention
,	O
etc	O
.	O
.	O
.	O
)	O
.	O
These	O
classes	O
are	O
final	O
and	O
cannot	O
be	O
extended	O
,	O
so	O
you	O
can	O
'	O
t	O
override	O
their	O
equals	O
implementation	O
.	O
Therefore	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
,	O
since	O
those	O
classes	O
implement	O
equals	O
properly	O
.	O
Question	O
-	O
18410035	O
Being	O
somewhat	O
new	O
to	O
the	O
Java	O
language	O
I	O
'	O
m	O
trying	O
to	O
familiarize	O
myself	O
with	O
all	O
the	O
ways	O
(	O
or	O
at	O
least	O
the	O
non	O
-	O
pathological	O
ones	O
)	O
that	O
one	O
might	O
iterate	O
through	O
a	O
list	O
(	O
or	O
perhaps	O
other	O
collections	O
)	O
and	O
the	O
advantages	O
or	O
disadvantages	O
of	O
each	O
.	O
Given	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
object	O
,	O
I	O
know	O
of	O
the	O
following	O
ways	O
to	O
loop	O
through	O
all	O
elements	O
:	O
Basic	O
for	O
loop	O
(	O
of	O
course	O
,	O
there	O
'	O
re	O
equivalent	O
while	O
/	O
do	O
while	O
loops	O
as	O
well	O
)	O
#	O
pre	O
Note	O
:	O
As	O
@	O
amarseillan	O
pointed	O
out	O
,	O
this	O
form	O
is	O
a	O
poor	O
choice	O
for	O
iterating	O
over	O
List	B-api_mention
s	O
because	O
the	O
actual	O
implementation	O
of	O
the	O
get	O
method	O
may	O
not	O
be	O
as	O
efficient	O
as	O
when	O
using	O
an	O
Iterator	B-api_mention
.	O
For	O
example	O
,	O
LinkedList	B-api_mention
implementations	O
must	O
traverse	O
all	O
of	O
the	O
elements	O
preceding	O
i	O
to	O
get	O
the	O
i	O
-	O
th	O
element	O
.	O
In	O
the	O
above	O
example	O
there	O
'	O
s	O
no	O
way	O
for	O
the	O
List	B-api_mention
implementation	O
to	O
"	O
save	O
its	O
place	O
"	O
to	O
make	O
future	O
iterations	O
more	O
efficient	O
.	O
For	O
an	O
ArrayList	B-api_mention
it	O
doesn	O
'	O
t	O
really	O
matter	O
because	O
the	O
complexity	O
/	O
cost	O
of	O
get	O
is	O
constant	O
time	O
(	O
O	O
(	O
1	O
)	O
)	O
whereas	O
for	O
a	O
LinkedList	B-api_mention
is	O
it	O
proportional	O
to	O
the	O
size	O
of	O
the	O
list	O
(	O
O	O
(	O
n	O
)	O
)	O
.	O
For	O
more	O
information	O
about	O
the	O
computational	O
complexity	O
of	O
the	O
built	O
-	O
in	O
Collections	B-api_mention
implementations	O
,	O
check	O
out	O
this	O
question	O
.	O
Enhanced	O
for	O
loop	O
(	O
nicely	O
explained	O
in	O
this	O
question	O
)	O
#	O
pre	O
Iterator	B-api_mention
#	O
pre	O
EDIT	O
:	O
Added	O
ListIterator	B-api_mention
ListIterator	I-api_mention
#	O
pre	O
EDIT	O
:	O
Added	O
"	O
functional	O
-	O
style	O
"	O
solution	O
(	O
thanks	O
Dave	O
Newton	O
)	O
Functional	O
Java	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
can	O
apply	O
a	O
transformation	O
function	O
for	O
e	O
EDIT	O
:	O
Added	O
map	O
method	O
from	O
Java	O
8	O
'	O
s	O
Stream	O
API	O
(	O
see	O
@	O
i	O
_	O
am	O
_	O
zero	O
'	O
s	O
answer	O
)	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
.	O
.	O
.	O
In	O
Java	O
8	O
collection	O
classes	O
that	O
implement	O
Iterable	B-api_mention
(	O
for	O
example	O
all	O
List	B-api_mention
s	O
)	O
now	O
have	O
a	O
forEach	B-api_mention
method	O
,	O
which	O
can	O
be	O
used	O
instead	O
of	O
the	O
for	O
loop	O
statement	O
demonstrated	O
above	O
.	O
(	O
Here	O
is	O
another	O
question	O
that	O
provides	O
a	O
good	O
comparison	O
.	O
)	O
#	O
pre	O
What	O
other	O
ways	O
are	O
there	O
,	O
if	O
any	O
?	O
I	O
feel	O
like	O
this	O
has	O
got	O
to	O
be	O
a	O
duplicate	O
,	O
but	O
I	O
haven	O
'	O
t	O
been	O
able	O
to	O
find	O
what	O
I	O
'	O
m	O
looking	O
for	O
,	O
so	O
I	O
apologize	O
for	O
this	O
question	O
potentially	O
being	O
redundant	O
.	O
(	O
BTW	O
,	O
my	O
interest	O
does	O
not	O
stem	O
at	O
all	O
from	O
a	O
desire	O
to	O
optimize	O
performance	O
;	O
I	O
just	O
want	O
to	O
know	O
what	O
forms	O
are	O
available	O
to	O
me	O
as	O
a	O
developer	O
.	O
)	O
EDIT	O
:	O
Moved	O
ListIterationExample	O
.	O
java	O
to	O
a	O
suggested	O
answer	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032180	O
The	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
removes	O
all	O
the	O
elements	O
of	O
a	O
single	O
ArrayList	B-api_mention
.	O
It	O
'	O
s	O
a	O
fast	O
operation	O
,	O
as	O
it	O
just	O
sets	O
some	O
array	O
elements	O
to	O
null	O
.	O
The	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
is	O
inherited	O
from	O
AbstractCollection	B-api_mention
,	O
removes	O
all	O
the	O
elements	O
that	O
are	O
in	O
the	O
argument	O
collection	O
from	O
the	O
collection	O
you	O
call	O
the	O
method	O
on	O
.	O
It	O
'	O
s	O
a	O
relatively	O
slow	O
operation	O
,	O
as	O
it	O
has	O
to	O
search	O
through	O
one	O
of	O
the	O
collections	O
involved	O
.	O
Question	O
-	O
23699371	O
,	O
answer	O
-	O
23733628	O
The	O
easiest	O
way	O
to	O
implement	O
this	O
is	O
to	O
jump	O
on	O
the	O
sort	O
feature	O
as	O
it	O
already	O
provides	O
an	O
optional	O
Comparator	B-api_mention
which	O
can	O
be	O
created	O
using	O
an	O
element	O
โ	O
s	O
property	O
.	O
Then	O
you	O
have	O
to	O
filter	O
duplicates	O
out	O
which	O
can	O
be	O
done	O
using	O
a	O
statefull	O
Predicate	B-api_mention
which	O
uses	O
the	O
fact	O
that	O
for	O
a	O
sorted	O
stream	O
all	O
equal	O
elements	O
are	O
adjacent	O
:	O
#	O
pre	O
Of	O
course	O
,	O
a	O
statefull	O
Predicate	B-api_mention
is	O
not	O
thread	O
-	O
safe	O
,	O
however	O
if	O
that	O
โ	O
s	O
your	O
need	O
you	O
can	O
move	O
this	O
logic	O
into	O
a	O
Collector	B-api_mention
and	O
let	O
the	O
stream	O
take	O
care	O
of	O
the	O
thread	O
-	O
safety	O
when	O
using	O
your	O
Collector	B-api_mention
.	O
This	O
depends	O
on	O
what	O
you	O
want	O
to	O
do	O
with	O
the	O
stream	O
of	O
distinct	O
elements	O
which	O
you	O
didn	O
โ	O
t	O
tell	O
us	O
in	O
your	O
question	O
.	O
Question	O
-	O
29328785	O
#	O
pre	O
Compile	O
>	O
javac	O
BigDecimalTest	O
.	O
java	O
Execute	O
>	O
java	O
BigDecimalTest	O
Output	O
#	O
pre	O
The	O
value	O
of	O
z	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
output	O
is	O
correct	O
4	O
.	O
883242e	O
+	O
888	O
/	O
7	O
.	O
115109e	O
+	O
302	O
=	O
6	O
.	O
863200e	O
+	O
585	O
as	O
is	O
the	O
value	O
of	O
y	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
notice	O
that	O
the	O
value	O
given	O
for	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
completely	O
wrong	O
.	O
Why	O
is	O
this	O
?	O
Strangely	O
,	O
if	O
the	O
scale	O
(	O
i	O
.	O
e	O
.	O
desired	O
decimal	O
places	O
)	O
of	O
the	O
result	O
of	O
the	O
division	O
is	O
changed	O
BigDecimal	B-api_mention
z	O
=	O
x	O
.	B-api_mention
divide	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
produce	O
the	O
correct	O
value	O
for	O
x	O
.	O
Or	O
,	O
if	O
the	O
operands	O
are	O
swapped	O
BigDecimal	B-api_mention
z	O
=	O
y	O
.	B-api_mention
divide	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
also	O
then	O
produce	O
the	O
correct	O
value	O
.	O
Or	O
,	O
if	O
the	O
exponent	O
of	O
x	O
is	O
changed	O
from	O
e	O
+	O
888	O
to	O
e	O
.	O
g	O
.	O
e	O
+	O
878	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
correct	O
.	O
Or	O
,	O
if	O
another	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
is	O
added	O
above	O
the	O
divide	O
operation	O
,	O
then	O
both	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
will	O
produce	O
the	O
correct	O
value	O
!	O
On	O
the	O
machine	O
I	O
'	O
m	O
testing	O
this	O
,	O
Windows	O
7	O
64	O
bit	O
,	O
the	O
behaviour	O
is	O
the	O
same	O
using	O
java	O
7	O
and	O
8	O
,	O
both	O
32bit	O
and	O
64	O
bit	O
versions	O
,	O
but	O
testing	O
online	O
at	O
#	O
a	O
produces	O
different	O
results	O
for	O
java	O
7	O
and	O
java	O
8	O
.	O
Using	O
java	O
7	O
,	O
the	O
value	O
of	O
x	O
is	O
given	O
correctly	O
:	O
#	O
a	O
,	O
but	O
using	O
java	O
8	O
its	O
value	O
is	O
incorrect	O
:	O
#	O
a	O
.	O
Also	O
,	O
this	O
behaviour	O
is	O
not	O
unique	O
to	O
this	O
particular	O
value	O
of	O
x	O
,	O
as	O
calling	O
toString	B-api_mention
on	O
other	O
BigDecimals	O
with	O
more	O
than	O
about	O
1500	O
digits	O
after	O
passing	O
them	O
as	O
the	O
first	O
operand	O
to	O
a	O
divide	O
operation	O
will	O
also	O
produce	O
incorrect	O
values	O
.	O
What	O
is	O
the	O
explanation	O
for	O
this	O
?	O
The	O
divide	O
operation	O
seems	O
to	O
be	O
mutating	O
the	O
value	O
produced	O
by	O
subsequent	O
toString	B-api_mention
calls	O
on	O
its	O
operands	O
.	O
Does	O
this	O
happen	O
on	O
your	O
platform	O
?	O
Edit	O
:	O
The	O
issue	O
seems	O
to	O
be	O
with	O
the	O
java	O
8	O
runtime	O
only	O
,	O
as	O
the	O
above	O
program	O
compiled	O
with	O
java	O
7	O
produces	O
correct	O
output	O
when	O
executed	O
with	O
the	O
java	O
7	O
runtime	O
,	O
but	O
incorrect	O
output	O
when	O
executed	O
with	O
the	O
java	O
8	O
runtime	O
.	O
Edit	O
:	O
I	O
'	O
ve	O
tested	O
with	O
the	O
early	O
access	O
jre1	O
.	O
8	O
.	O
0	O
_	O
60	O
and	O
the	O
bug	O
does	O
not	O
appear	O
,	O
and	O
according	O
to	O
Marco13	O
'	O
s	O
answer	O
it	O
was	O
fixed	O
in	O
build	O
51	O
.	O
The	O
Oracle	O
JDK	O
8	O
product	O
binaries	O
are	O
only	O
at	O
update	O
40	O
though	O
so	O
it	O
may	O
be	O
some	O
time	O
before	O
the	O
fixed	O
versions	O
are	O
widely	O
used	O
.	O
Question	O
-	O
16232833	O
,	O
answer	O
-	O
16250729	O
change	O
your	O
return	O
type	O
to	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
then	O
you	O
can	O
use	O
below	O
for	O
400	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
for	O
correct	O
request	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
UPDATE	O
1	O
after	O
spring	O
4	O
.	O
1	O
there	O
are	O
helper	O
methods	O
in	O
ResponseEntity	B-api_mention
could	O
be	O
used	O
as	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
status	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
body	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
ok	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489376	O
String	B-api_mention
gets	O
special	O
treatment	O
in	O
the	O
JLS	O
:	O
it	O
'	O
s	O
one	O
of	O
the	O
two	O
non	O
-	O
primitive	O
types	O
for	O
which	O
literals	O
exist	O
(	O
the	O
other	O
is	O
Class	B-api_mention
)	O
*	O
.	O
From	O
the	O
JLS	O
:	O
#	O
blockquote	O
*	O
well	O
,	O
there	O
'	O
s	O
also	O
the	O
"	O
null	O
type	O
"	O
with	O
it	O
'	O
s	O
"	O
null	O
literal	O
"	O
null	O
,	O
but	O
most	O
people	O
don	O
'	O
t	O
think	O
of	O
the	O
"	O
null	O
type	O
"	O
as	O
a	O
proper	O
type	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
18481387	O
If	O
you	O
code	O
in	O
Android	O
,	O
there	O
is	O
SparseArray	B-api_mention
,	O
mapping	O
integer	O
to	O
object	O
.	O
Question	O
-	O
32294367	O
,	O
answer	O
-	O
32294898	O
#	O
blockquote	O
Let	O
me	O
ask	O
a	O
counterquestion	O
:	O
why	O
do	O
you	O
think	O
Thread	B-api_mention
.	I-api_mention
stop	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
been	O
deprecated	O
for	O
more	O
than	O
a	O
decade	O
?	O
The	O
reason	O
why	O
is	O
precisely	O
the	O
negation	O
of	O
your	O
statement	O
above	O
.	O
To	O
give	O
two	O
specific	O
examples	O
:	O
you	O
stop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
a	O
thread	O
while	O
it	O
'	O
s	O
executing	O
something	O
as	O
innocuous	O
-	O
sounding	O
as	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Result	O
:	O
those	O
two	O
features	O
are	O
now	O
broken	O
for	O
the	O
entire	O
JVM	O
.	O
The	O
same	O
pertains	O
to	O
any	O
other	O
synchronized	O
code	O
your	O
application	O
may	O
execute	O
.	O
#	O
blockquote	O
The	O
application	O
may	O
theoretically	O
be	O
coded	O
such	O
that	O
absolutely	O
no	O
shared	O
resource	O
protected	O
by	O
locks	O
is	O
ever	O
used	O
;	O
however	O
that	O
will	O
only	O
help	O
to	O
point	O
out	O
the	O
exact	O
extent	O
to	O
which	O
Java	O
threads	O
are	O
codependent	O
.	O
And	O
the	O
"	O
independence	O
"	O
achieved	O
will	O
only	O
pertain	O
to	O
the	O
request	O
-	O
processing	O
threads	O
,	O
not	O
to	O
all	O
threads	O
in	O
such	O
an	O
application	O
.	O
Question	O
-	O
24651403	O
,	O
answer	O
-	O
24651855	O
OK	O
,	O
first	O
of	O
all	O
,	O
your	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
will	O
not	O
work	O
as	O
intended	O
,	O
chained	O
if	O
-	O
elseif	O
will	O
maximally	O
execute	O
1	O
branch	O
of	O
code	O
,	O
for	O
example	O
:	O
#	O
pre	O
Even	O
if	O
e	O
contains	O
both	O
N	O
and	O
W	O
,	O
only	O
bexits	O
[	O
0	O
]	O
will	O
be	O
set	O
.	O
Also	O
this	O
method	O
will	O
only	O
add	O
exits	O
(	O
for	O
example	O
calling	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
delete	O
any	O
existing	O
exits	O
.	O
I	O
would	O
change	O
that	O
method	O
to	O
:	O
#	O
pre	O
Also	O
,	O
i	O
definetly	O
wouldn	O
'	O
t	O
remember	O
that	O
north	O
is	O
on	O
index	O
0	O
,	O
west	O
in	O
on	O
1	O
,	O
.	O
.	O
.	O
so	O
a	O
common	O
practice	O
is	O
to	O
name	O
your	O
indexes	O
using	O
final	O
static	O
constants	O
:	O
#	O
pre	O
Then	O
you	O
can	O
write	O
in	O
your	O
setExits	B-api_mention
method	O
:	O
#	O
pre	O
(	O
much	O
more	O
readible	O
)	O
Finally	O
,	O
if	O
you	O
want	O
your	O
code	O
even	O
more	O
well	O
-	O
arranged	O
,	O
you	O
can	O
make	O
a	O
Exits	B-api_mention
class	O
representing	O
avaliable	O
exits	O
,	O
and	O
backed	O
by	O
boolean	O
array	O
.	O
Then	O
on	O
place	O
where	O
you	O
create	O
your	O
String	B-api_mention
,	O
you	O
could	O
create	O
this	O
class	O
instead	O
and	O
save	O
yourself	O
work	O
with	O
generating	O
and	O
then	O
parsing	O
a	O
string	O
.	O
EDIT	O
:	O
as	O
@	O
gexicide	O
answers	O
,	O
there	O
is	O
a	O
really	O
handy	O
class	O
EnumSet	B-api_mention
which	O
would	O
be	O
probably	O
better	O
for	O
representing	O
the	O
exits	O
than	O
bollean	O
array	O
.	O
Question	O
-	O
5694385	O
,	O
answer	O
-	O
5694464	O
Rather	O
than	O
spoon	O
-	O
feed	O
you	O
code	O
,	O
here	O
'	O
s	O
how	O
to	O
look	O
in	O
the	O
documentation	O
.	O
First	O
,	O
you	O
'	O
re	O
dealing	O
with	O
IO	O
,	O
so	O
look	O
in	O
the	O
java	O
.	O
io	O
package	O
.	O
There	O
are	O
two	O
classes	O
that	O
look	O
interesting	O
:	O
FileFilter	B-api_mention
and	O
FileNameFilter	B-api_mention
.	O
When	O
I	O
clicked	O
on	O
the	O
first	O
,	O
it	O
showed	O
me	O
that	O
there	O
was	O
a	O
a	O
listFiles	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
the	O
File	B-api_mention
class	O
.	O
And	O
the	O
documentation	O
for	O
that	O
method	O
says	O
:	O
#	O
blockquote	O
Scrolling	O
up	O
in	O
the	O
File	O
JavaDoc	O
,	O
I	O
see	O
the	O
constructors	O
.	O
And	O
that	O
'	O
s	O
really	O
all	O
I	O
need	O
to	O
be	O
able	O
to	O
create	O
a	O
File	O
instance	O
and	O
call	O
listFiles	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
it	O
.	O
Scrolling	O
still	O
further	O
,	O
I	O
can	O
see	O
some	O
information	O
about	O
how	O
files	O
are	O
named	O
in	O
different	O
operating	O
systems	O
.	O
Question	O
-	O
27504925	O
,	O
answer	O
-	O
27505121	O
I	O
'	O
d	O
like	O
to	O
point	O
out	O
this	O
article	O
.	O
It	O
seems	O
as	O
though	O
arrays	O
and	O
objects	O
follow	O
different	O
opcodes	O
.	O
I	O
can	O
'	O
t	O
honestly	O
summarize	O
it	O
more	O
than	O
that	O
however	O
it	O
seems	O
,	O
arrays	O
are	O
simply	O
not	O
treated	O
as	O
Objects	B-api_mention
like	O
we	O
'	O
re	O
normally	O
used	O
to	O
so	O
they	O
don	O
'	O
t	O
inherit	O
Object	B-api_mention
methods	O
.	O
Full	O
credits	O
to	O
the	O
author	O
of	O
that	O
post	O
as	O
it	O
'	O
s	O
a	O
very	O
interesting	O
read	O
,	O
both	O
short	O
&	O
detailed	O
.	O
Upon	O
further	O
digging	O
into	O
the	O
topic	O
via	O
multiple	O
sources	O
I	O
'	O
ve	O
decided	O
to	O
give	O
a	O
more	O
elaborate	O
version	O
of	O
my	O
previous	O
answer	O
.	O
The	O
first	O
thing	O
to	O
note	O
that	O
instantiation	O
of	O
Objects	B-api_mention
and	O
Arrays	B-api_mention
are	O
very	O
different	O
within	O
the	O
JVM	O
,	O
their	O
follow	O
their	O
respective	O
bytecode	O
.	O
Object	O
:	O
Object	B-api_mention
instantiation	O
follows	O
a	O
simple	O
Opcode	O
new	O
which	O
is	O
a	O
combination	O
of	O
two	O
operands	O
-	O
indexbyte1	O
&	O
indexbyte2	O
.	O
Once	O
instantiated	O
the	O
JVM	O
pushes	O
the	O
reference	O
to	O
this	O
object	O
onto	O
the	O
stack	O
.	O
This	O
occurs	O
for	O
all	O
objects	O
irrespective	O
of	O
their	O
types	O
.	O
Arrays	O
:	O
Array	B-api_mention
Opcodes	O
(	O
regarding	O
instantiation	O
of	O
an	O
array	O
)	O
however	O
are	O
divided	O
into	O
three	O
different	O
codes	O
.	O
#	O
blockquote	O
newarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
that	O
involve	O
primitive	O
datatypes	O
(	O
byte	O
short	O
char	O
int	O
long	O
float	O
double	O
boolean	O
)	O
rather	O
than	O
object	O
references	O
.	O
#	O
blockquote	O
anewarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
of	O
object	O
references	O
#	O
blockquote	O
multianewarray	O
instruction	O
is	O
used	O
when	O
allocating	O
multi	O
-	O
dimensional	O
arrays	O
Object	B-api_mention
can	O
be	O
a	O
class	O
instance	O
or	O
an	O
array	O
.	O
Take	O
from	O
Oracle	O
Docs	O
#	O
blockquote	O
BUT	O
#	O
blockquote	O
This	O
goes	O
hand	O
in	O
hand	O
with	O
the	O
information	O
regarding	O
the	O
opcodes	O
.	O
Arrays	O
are	O
simply	O
not	O
developed	O
to	O
be	O
class	O
interfaces	O
but	O
are	O
instead	O
explicitly	O
created	O
by	O
array	O
creation	O
expression	O
thus	O
naturally	O
wouldn	O
'	O
t	O
implicitly	O
be	O
able	O
to	O
inherit	O
and	O
/	O
or	O
override	O
Object	B-api_mention
.	O
As	O
we	O
have	O
seen	O
,	O
it	O
has	O
nothing	O
to	O
do	O
with	O
the	O
fact	O
that	O
arrays	O
may	O
hold	O
primitive	O
datatypes	O
.	O
After	O
giving	O
it	O
some	O
thought	O
though	O
,	O
it	O
isn	O
'	O
t	O
very	O
common	O
to	O
come	O
across	O
situations	O
where	O
one	O
might	O
want	O
to	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
however	O
was	O
still	O
a	O
very	O
interesting	O
question	O
to	O
try	O
and	O
answer	O
.	O
Resources	O
:	O
Oracle	O
-	O
Docs	O
chapter	O
4	O
.	O
3	O
.	O
1	O
Oracle	O
-	O
Docs	O
chapter	O
15	O
.	O
10	O
.	O
1	O
Artima	O
-	O
UnderTheHood	O
Question	O
-	O
27845223	O
I	O
'	O
m	O
looking	O
at	O
a	O
piece	O
of	O
Java	O
code	O
right	O
now	O
,	O
and	O
it	O
takes	O
a	O
path	O
as	O
a	O
String	B-api_mention
and	O
gets	O
its	O
URL	O
using	O
URL	B-api_mention
resource	O
=	O
ClassLoader	B-api_mention
.	I-api_mention
getSystemClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
then	O
calls	O
String	B-api_mention
path	O
=	O
resource	O
.	B-api_mention
getPath	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
finally	O
executes	O
new	O
File	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Oh	O
,	O
and	O
there	O
are	O
also	O
calls	O
to	O
URL	B-api_mention
url	O
=	O
resource	O
.	B-api_mention
toURI	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
String	B-api_mention
file	O
=	O
resource	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
'	O
m	O
totally	O
confused	O
right	O
now	O
-	O
mostly	O
because	O
of	O
the	O
terminology	O
,	O
I	O
guess	O
.	O
Can	O
someone	O
please	O
walk	O
me	O
through	O
the	O
differences	O
,	O
or	O
provide	O
a	O
few	O
links	O
to	O
Dummy	O
-	O
proof	O
material	O
?	O
Especially	O
URI	B-api_mention
to	O
URL	B-api_mention
and	O
Resource	B-api_mention
to	O
File	B-api_mention
?	O
To	O
me	O
,	O
it	O
feels	O
like	O
they	O
should	O
be	O
the	O
same	O
thing	O
,	O
respectively	O
.	O
.	O
.	O
The	O
difference	O
between	O
getFile	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getPath	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
explained	O
here	O
:	O
What	O
'	O
s	O
the	O
difference	O
between	O
url	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
getpath	B-api_mention
(	I-api_mention
)	I-api_mention
?	O
(	O
Interestingly	O
they	O
both	O
seem	O
to	O
return	O
Strings	O
,	O
which	O
probably	O
adds	O
a	O
whole	O
lot	O
to	O
my	O
state	O
of	O
mind	O
.	O
.	O
.	O
)	O
Now	O
,	O
if	O
I	O
have	O
a	O
locator	O
that	O
references	O
a	O
class	O
or	O
package	O
in	O
a	O
jar	O
file	O
,	O
will	O
those	O
two	O
(	O
i	O
.	O
e	O
.	O
path	O
an	O
file	O
strings	O
)	O
differ	O
?	O
resource	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
give	O
you	O
jar	O
:	O
file	O
:	O
/	O
C	O
:	O
/	O
path	O
/	O
to	O
/	O
my	O
.	O
jar	O
!	O
/	O
com	O
/	O
example	O
/	O
,	O
after	O
all	O
(	O
note	O
the	O
exclamation	O
mark	O
)	O
.	O
Is	O
the	O
difference	O
between	O
URI	B-api_mention
and	O
URL	B-api_mention
in	O
Java	O
that	O
the	O
former	O
doesn	O
'	O
t	O
encode	O
spaces	O
?	O
Cf	O
.	O
Files	O
,	O
URIs	O
,	O
and	O
URLs	O
conflicting	O
in	O
Java	O
(	O
This	O
answer	O
explains	O
the	O
general	O
,	O
conceptual	O
difference	O
between	O
the	O
two	O
terms	O
fairly	O
well	O
:	O
URIs	O
identify	O
and	O
URLs	O
locate	O
;	O
)	O
Lastly	O
-	O
and	O
most	O
importantly	O
-	O
why	O
do	O
I	O
need	O
File	B-api_mention
object	O
;	O
why	O
isn	O
'	O
t	O
a	O
Resource	B-api_mention
(	O
URL	B-api_mention
)	O
enough	O
?	O
(	O
And	O
is	O
there	O
a	O
Resource	B-api_mention
object	O
?	O
)	O
Sorry	O
if	O
this	O
question	O
is	O
a	O
bit	O
unorganized	O
;	O
it	O
just	O
reflects	O
the	O
confusion	O
I	O
have	O
.	O
.	O
.	O
:	O
)	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14847046	O
Most	O
of	O
the	O
time	O
we	O
use	O
a	O
constructor	O
to	O
create	O
a	O
new	O
empty	O
map	O
.	O
But	O
the	O
Collections	B-api_mention
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
to	O
create	O
an	O
empty	O
map	O
using	O
static	O
method	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
emptyMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
blockquote	O
Question	O
-	O
20918650	O
,	O
answer	O
-	O
20918709	O
A	O
subsequent	O
post	O
by	O
the	O
same	O
user	O
in	O
the	O
same	O
conversation	O
:	O
#	O
blockquote	O
(	O
This	O
was	O
in	O
response	O
to	O
a	O
statement	O
by	O
another	O
user	O
,	O
namely	O
that	O
"	O
it	O
seems	O
in	O
some	O
situations	O
'	O
new	O
T	B-api_mention
'	O
would	O
be	O
better	O
"	O
,	O
the	O
idea	O
being	O
that	O
new	O
T	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
impossible	O
due	O
to	O
type	O
erasure	O
.	O
(	O
This	O
is	O
debatable	O
โ	O
even	O
if	O
T	B-api_mention
were	O
available	O
at	O
runtime	O
,	O
it	O
could	O
be	O
an	O
abstract	O
class	O
or	O
interface	O
,	O
or	O
it	O
could	O
be	O
Void	O
,	O
or	O
it	O
could	O
lack	O
a	O
no	O
-	O
arg	O
constructor	O
,	O
or	O
its	O
no	O
-	O
arg	O
constructor	O
could	O
be	O
private	O
(	O
e	O
.	O
g	O
.	O
,	O
because	O
it	O
'	O
s	O
supposed	O
to	O
be	O
a	O
singleton	O
class	O
)	O
,	O
or	O
its	O
no	O
-	O
arg	O
constructor	O
could	O
specify	O
a	O
checked	O
exception	O
that	O
the	O
generic	O
method	O
does	O
not	O
catch	O
or	O
specify	O
โ	O
but	O
that	O
was	O
the	O
premise	O
.	O
Regardless	O
,	O
it	O
'	O
s	O
true	O
that	O
without	O
erasure	O
you	O
could	O
at	O
least	O
write	O
T	B-api_mention
.	I-api_mention
class	I-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
handles	O
those	O
issues	O
.	O
)	O
)	O
This	O
view	O
,	O
that	O
types	O
are	O
isomorphic	O
to	O
propositions	O
,	O
suggests	O
that	O
the	O
user	O
has	O
a	O
background	O
in	O
formal	O
type	O
theory	O
.	O
(	O
S	O
)	O
he	O
very	O
likely	O
does	O
not	O
like	O
"	O
dynamic	O
types	O
"	O
or	O
"	O
runtime	O
-	O
types	O
"	O
and	O
would	O
prefer	O
a	O
Java	O
without	O
downcasts	O
and	O
instanceof	B-api_mention
and	O
reflection	O
and	O
so	O
on	O
.	O
(	O
Think	O
of	O
a	O
language	O
like	O
Standard	O
ML	O
,	O
which	O
has	O
a	O
very	O
rich	O
(	O
static	O
)	O
type	O
system	O
and	O
whose	O
dynamic	O
semantics	O
do	O
not	O
depend	O
on	O
any	O
type	O
information	O
whatsoever	O
.	O
)	O
It	O
'	O
s	O
worth	O
keeping	O
in	O
mind	O
,	O
by	O
the	O
way	O
,	O
that	O
the	O
user	O
is	O
trolling	O
:	O
while	O
(	O
s	O
)	O
he	O
likely	O
sincerely	O
prefers	O
(	O
statically	O
)	O
typed	O
languages	O
,	O
(	O
s	O
)	O
he	O
is	O
not	O
sincerely	O
trying	O
to	O
persuade	O
others	O
of	O
that	O
view	O
.	O
Rather	O
,	O
the	O
main	O
purpose	O
of	O
the	O
original	O
tweet	O
was	O
to	O
mock	O
those	O
who	O
disagree	O
,	O
and	O
after	O
some	O
of	O
those	O
disagree	O
-	O
ers	O
chimed	O
in	O
,	O
the	O
user	O
posted	O
follow	O
-	O
up	O
tweets	O
such	O
as	O
"	O
the	O
reason	O
java	O
has	O
type	O
erasure	O
is	O
that	O
Wadler	O
et	O
al	O
know	O
what	O
they	O
are	O
doing	O
,	O
unlike	O
users	O
of	O
java	O
"	O
.	O
Unfortunately	O
,	O
this	O
makes	O
it	O
hard	O
to	O
find	O
out	O
what	O
(	O
s	O
)	O
he	O
'	O
s	O
actually	O
thinking	O
;	O
but	O
fortunately	O
,	O
it	O
also	O
likely	O
means	O
that	O
it	O
'	O
s	O
not	O
very	O
important	O
to	O
do	O
so	O
.	O
People	O
with	O
actual	O
depth	O
to	O
their	O
views	O
don	O
'	O
t	O
generally	O
resort	O
to	O
trolls	O
that	O
are	O
quite	O
this	O
content	O
-	O
free	O
.	O
Question	O
-	O
16232833	O
I	O
'	O
m	O
using	O
Spring	O
MVC	O
for	O
a	O
simple	O
JSON	O
API	O
,	O
with	O
@	O
ResponseBody	O
based	O
approach	O
like	O
the	O
following	O
.	O
(	O
I	O
already	O
have	O
a	O
service	O
layer	O
producing	O
JSON	O
directly	O
.	O
)	O
#	O
pre	O
Question	O
is	O
,	O
in	O
the	O
given	O
scenario	O
,	O
what	O
is	O
the	O
simplest	O
,	O
cleanest	O
way	O
to	O
respond	O
with	O
a	O
HTTP	O
400	O
error	O
?	O
I	O
did	O
come	O
across	O
approaches	O
like	O
:	O
return	O
new	O
ResponseEntity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
.	O
.	O
but	O
I	O
can	O
'	O
t	O
use	O
it	O
here	O
since	O
my	O
method	O
'	O
s	O
return	O
type	O
is	O
String	B-api_mention
,	O
not	O
ResponseEntity	B-api_mention
.	O
Question	O
-	O
22694884	O
,	O
answer	O
-	O
39385411	O
As	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
a	O
throwing	O
merger	O
to	O
handle	O
multiple	O
entries	O
with	O
the	O
same	O
key	O
it	O
is	O
easy	O
:	O
#	O
pre	O
You	O
will	O
get	O
a	O
IllegalStateException	B-api_mention
for	O
duplicate	O
keys	O
.	O
But	O
at	O
the	O
end	O
I	O
am	O
not	O
sure	O
if	O
the	O
code	O
would	O
not	O
be	O
even	O
more	O
readable	O
using	O
an	O
if	O
.	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
21172732	O
The	O
parallel	O
streams	O
use	O
the	O
default	O
ForkJoinPool	B-api_mention
which	O
by	O
default	O
has	O
one	O
less	O
threads	O
as	O
you	O
have	O
processors	O
,	O
as	O
returned	O
by	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
availableProcessors	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
so	O
parallel	O
streams	O
use	O
all	O
your	O
processors	O
because	O
they	O
also	O
use	O
the	O
main	O
thread	O
)	O
:	O
#	O
blockquote	O
To	O
change	O
the	O
way	O
parallel	O
streams	O
are	O
executed	O
,	O
you	O
can	O
either	O
#	O
li	O
submit	O
the	O
parallel	O
stream	O
execution	O
to	O
your	O
own	O
ForkJoinPool	B-api_mention
:	O
yourFJP	O
.	B-api_mention
submit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
#	O
li	O
you	O
can	O
change	O
the	O
size	O
of	O
the	O
common	O
pool	O
using	O
system	O
properties	O
:	O
System	B-api_mention
.	I-api_mention
setProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
a	O
target	O
parallelism	O
of	O
20	O
threads	O
.	O
Example	O
of	O
the	O
latter	O
on	O
my	O
machine	O
which	O
has	O
8	O
processors	O
.	O
If	O
I	O
run	O
the	O
following	O
program	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
#	O
blockquote	O
So	O
you	O
can	O
see	O
that	O
the	O
parallel	O
stream	O
processes	O
8	O
items	O
at	O
a	O
time	O
,	O
i	O
.	O
e	O
.	O
it	O
uses	O
8	O
threads	O
.	O
However	O
if	O
I	O
uncomment	O
the	O
commented	O
line	O
,	O
the	O
output	O
is	O
:	O
#	O
blockquote	O
This	O
time	O
the	O
parallel	O
stream	O
has	O
used	O
20	O
threads	O
and	O
all	O
20	O
elements	O
in	O
the	O
stream	O
have	O
been	O
processed	O
comcurrently	O
.	O
Question	O
-	O
27504925	O
The	O
Java	O
language	O
specification	O
specifies	O
that	O
#	O
blockquote	O
So	O
,	O
considering	O
arrays	O
are	O
objects	O
โ	O
why	O
did	O
the	O
Java	O
designers	O
make	O
the	O
decision	O
not	O
to	O
allow	O
inherit	O
and	O
override	O
from	O
it	O
,	O
for	O
example	O
,	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
The	O
current	O
syntax	O
wouldn	O
'	O
t	O
allow	O
creating	O
anonymous	O
classes	O
with	O
an	O
array	O
as	O
the	O
base	O
class	O
,	O
but	O
I	O
don	O
'	O
t	O
think	O
that	O
was	O
the	O
reason	O
for	O
their	O
decision	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29495065	O
#	O
li	O
It	O
is	O
checking	O
if	O
newType	O
is	O
array	O
of	O
Objects	O
or	O
not	O
:	O
#	O
pre	O
Why	O
to	O
do	O
that	O
?	O
Because	O
new	O
Object	B-api_mention
[	O
n	O
]	O
is	O
faster	O
than	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
an	O
array	O
of	O
types	O
defined	O
by	O
the	O
first	O
argument	O
,	O
eg	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
-	O
>	O
String	B-api_mention
[	O
]	O
.	O
Note	O
that	O
String	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
.	I-api_mention
getComponentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
#	O
li	O
You	O
cannot	O
use	O
it	O
like	O
that	O
,	O
but	O
it	O
can	O
be	O
like	O
this	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
in	O
this	O
case	O
it	O
depends	O
only	O
on	O
actual	O
type	O
of	O
elements	O
,	O
eg	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
fail	O
,	O
you	O
cannot	O
write	O
in	O
Integer	B-api_mention
[	O
]	O
anything	O
but	O
Integer	B-api_mention
Question	O
-	O
23699371	O
,	O
answer	O
-	O
34731808	O
You	O
can	O
use	O
the	O
distinct	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
Eclipse	O
Collections	B-api_mention
.	O
#	O
pre	O
If	O
you	O
can	O
refactor	O
persons	O
to	O
implement	O
an	O
Eclipse	O
Collections	B-api_mention
interface	O
,	O
you	O
can	O
call	O
the	O
method	O
directly	O
on	O
the	O
list	O
.	O
#	O
pre	O
HashingStrategy	O
is	O
simply	O
a	O
strategy	O
interface	O
that	O
allows	O
you	O
to	O
define	O
custom	O
implementations	O
of	O
equals	O
and	O
hashcode	O
.	O
#	O
pre	O
Note	O
:	O
I	O
am	O
a	O
committer	O
for	O
Eclipse	O
Collections	O
.	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173110	O
Flipping	O
the	O
limit	O
and	O
the	O
filter	O
clauses	O
has	O
different	O
behaviors	O
.	O
If	O
you	O
put	O
the	O
limit	O
first	O
,	O
the	O
stream	O
will	O
first	O
generate	O
10	O
integers	O
[	O
1	O
.	O
.	O
10	O
]	O
,	O
and	O
then	O
filter	O
them	O
leaving	O
only	O
those	O
smaller	O
than	O
5	O
.	O
In	O
the	O
original	O
ordering	O
,	O
with	O
the	O
filter	O
applied	O
first	O
,	O
integers	O
are	O
generated	O
and	O
filtered	O
until	O
you	O
reach	O
10	O
elements	O
.	O
This	O
isn	O
'	O
t	O
an	O
infinite	O
operator	O
,	O
as	O
i	O
in	O
the	O
supplier	O
will	O
eventually	O
overflow	O
,	O
but	O
it	O
will	O
take	O
a	O
while	O
,	O
especially	O
on	O
a	O
slow	O
computer	O
,	O
to	O
reach	O
MAX	O
_	O
INT	O
.	O
Question	O
-	O
14014086	O
,	O
answer	O
-	O
20784007	O
Ken	O
'	O
s	O
answer	O
is	O
basically	O
right	O
but	O
I	O
'	O
d	O
like	O
to	O
chime	O
in	O
on	O
the	O
"	O
why	O
would	O
you	O
want	O
to	O
use	O
one	O
over	O
the	O
other	O
?	O
"	O
part	O
of	O
your	O
question	O
.	O
Basics	O
The	O
base	O
interface	O
you	O
choose	O
for	O
your	O
repository	O
has	O
two	O
main	O
purposes	O
.	O
First	O
,	O
you	O
allow	O
the	O
Spring	O
Data	O
repository	O
infrastructure	O
to	O
find	O
your	O
interface	O
and	O
trigger	O
the	O
proxy	O
creation	O
so	O
that	O
you	O
inject	O
instances	O
of	O
the	O
interface	O
into	O
clients	O
.	O
The	O
second	O
purpose	O
is	O
to	O
pull	O
in	O
as	O
much	O
functionality	O
as	O
needed	O
into	O
the	O
interface	O
without	O
having	O
to	O
declare	O
extra	O
methods	O
.	O
The	O
common	O
interfaces	O
The	O
Spring	O
Data	O
core	O
library	O
ships	O
with	O
two	O
base	O
interfaces	O
that	O
expose	O
a	O
dedicated	O
set	O
of	O
functionalities	O
:	O
#	O
li	O
CrudRepository	B-api_mention
-	O
CRUD	O
methods	O
#	O
li	O
PagingAndSortingRepository	B-api_mention
-	O
methods	O
for	O
pagination	O
and	O
sorting	O
(	O
extends	O
CrudRepository	B-api_mention
)	O
Store	O
-	O
specific	O
interfaces	O
The	O
individual	O
store	O
modules	O
(	O
e	O
.	O
g	O
.	O
for	O
JPA	O
or	O
MongoDB	O
)	O
expose	O
store	O
-	O
specific	O
extensions	O
of	O
these	O
base	O
interfaces	O
to	O
allow	O
access	O
to	O
store	O
-	O
specific	O
functionality	O
like	O
flushing	O
or	O
dedicated	O
batching	O
that	O
take	O
some	O
store	O
specifics	O
into	O
account	O
.	O
An	O
example	O
for	O
this	O
is	O
deleteInBatch	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
JpaRepository	B-api_mention
which	O
is	O
different	O
from	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
it	O
uses	O
a	O
query	O
to	O
delete	O
the	O
given	O
entities	O
which	O
is	O
more	O
performant	O
but	O
comes	O
with	O
the	O
side	O
effect	O
of	O
not	O
triggering	O
the	O
JPA	O
-	O
defined	O
cascades	O
(	O
as	O
the	O
spec	O
defines	O
it	O
)	O
.	O
We	O
generally	O
recommend	O
not	O
to	O
use	O
these	O
base	O
interfaces	O
as	O
they	O
expose	O
the	O
underlying	O
persistence	O
technology	O
to	O
the	O
clients	O
and	O
thus	O
tighten	O
the	O
coupling	O
between	O
them	O
and	O
the	O
repository	O
.	O
Plus	O
,	O
you	O
get	O
a	O
bit	O
away	O
from	O
the	O
original	O
definition	O
of	O
a	O
repository	O
which	O
is	O
basically	O
"	O
a	O
collection	O
of	O
entities	O
"	O
.	O
So	O
if	O
you	O
can	O
,	O
stay	O
with	O
PagingAndSortingRepository	B-api_mention
.	O
Custom	O
repository	O
base	O
interfaces	O
The	O
downside	O
of	O
directly	O
depending	O
on	O
one	O
of	O
the	O
provided	O
base	O
interfaces	O
is	O
two	O
-	O
fold	O
.	O
Both	O
of	O
them	O
might	O
be	O
considered	O
as	O
theoretical	O
but	O
I	O
think	O
they	O
'	O
re	O
important	O
to	O
be	O
aware	O
of	O
:	O
#	O
li	O
Depending	O
on	O
a	O
a	O
Spring	O
Data	O
repository	O
interface	O
couples	O
your	O
repository	O
interface	O
to	O
the	O
library	O
.	O
I	O
don	O
'	O
t	O
think	O
this	O
is	O
a	O
particular	O
issue	O
as	O
you	O
'	O
ll	O
probably	O
use	O
abstractions	O
like	O
Page	B-api_mention
or	O
Pageable	B-api_mention
in	O
your	O
code	O
anyway	O
.	O
Spring	O
Data	O
is	O
not	O
any	O
different	O
from	O
any	O
other	O
general	O
purpose	O
library	O
like	O
commons	O
-	O
lang	O
or	O
Guava	O
.	O
As	O
long	O
as	O
it	O
provides	O
reasonable	O
benefit	O
,	O
it	O
'	O
s	O
just	O
fine	O
.	O
#	O
li	O
By	O
extending	O
e	O
.	O
g	O
.	O
CrudRepository	B-api_mention
,	O
you	O
expose	O
a	O
complete	O
set	O
of	O
persistence	O
method	O
at	O
once	O
.	O
This	O
is	O
probably	O
fine	O
in	O
most	O
circumstances	O
as	O
well	O
but	O
you	O
might	O
run	O
into	O
situations	O
where	O
you	O
'	O
d	O
like	O
to	O
gain	O
more	O
fine	O
-	O
grained	O
control	O
over	O
the	O
methods	O
expose	O
,	O
e	O
.	O
g	O
.	O
to	O
create	O
a	O
ReadOnlyRepository	B-api_mention
that	O
doesn	O
'	O
t	O
include	O
the	O
save	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
of	O
CrudRepository	B-api_mention
.	O
The	O
solution	O
to	O
both	O
of	O
these	O
downsides	O
is	O
to	O
craft	O
your	O
own	O
base	O
repository	O
interface	O
or	O
even	O
a	O
set	O
of	O
them	O
.	O
In	O
a	O
lot	O
of	O
applications	O
we	O
'	O
ve	O
seen	O
something	O
like	O
this	O
:	O
#	O
pre	O
The	O
first	O
repository	O
interface	O
is	O
some	O
general	O
purpose	O
base	O
interface	O
that	O
actually	O
only	O
fixes	O
point	O
1	O
but	O
also	O
ties	O
the	O
ID	O
type	O
to	O
be	O
Long	O
for	O
consistency	O
.	O
The	O
second	O
interface	O
usually	O
has	O
all	O
the	O
find	O
โฆ	O
(	O
โฆ	O
)	O
methods	O
copied	O
from	O
CrudRepository	B-api_mention
and	O
PagingAndSortingRepository	B-api_mention
but	O
does	O
not	O
expose	O
the	O
manipulating	O
ones	O
.	O
Read	O
more	O
on	O
that	O
approach	O
in	O
the	O
reference	O
documentation	O
.	O
Summary	O
-	O
tl	O
;	O
dr	O
The	O
repository	O
abstraction	O
allows	O
you	O
to	O
pickt	O
the	O
base	O
repository	O
totally	O
driven	O
by	O
you	O
architectural	O
and	O
functional	O
needs	O
.	O
Use	O
the	O
ones	O
provided	O
out	O
of	O
the	O
box	O
if	O
they	O
suit	O
,	O
craft	O
your	O
own	O
repository	O
base	O
interfaces	O
if	O
necessary	O
.	O
Stay	O
away	O
from	O
the	O
store	O
specific	O
repository	O
interfaces	O
unless	O
unavoidable	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29099896	O
This	O
is	O
a	O
very	O
interesting	O
problem	O
.	O
I	O
came	O
up	O
with	O
a	O
one	O
line	O
solution	O
.	O
It	O
might	O
not	O
very	O
performant	O
but	O
it	O
works	O
.	O
#	O
pre	O
It	O
is	O
a	O
similar	O
idea	O
that	O
@	O
Rohit	O
Jain	O
came	O
up	O
with	O
.	O
I	O
'	O
m	O
grouping	O
the	O
space	O
between	O
the	O
null	O
values	O
.	O
If	O
you	O
really	O
want	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
you	O
may	O
append	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ll	O
=	O
cl	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725550	O
Think	O
of	O
it	O
like	O
this	O
:	O
the	O
List	B-api_mention
interface	O
has	O
methods	O
like	O
add	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
set	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
contract	O
is	O
that	O
once	O
you	O
added	O
an	O
element	O
at	O
position	O
X	O
you	O
will	O
find	O
it	O
there	O
unless	O
you	O
add	O
or	O
remove	O
elements	O
before	O
it	O
.	O
If	O
any	O
list	O
implementation	O
would	O
store	O
elements	O
in	O
some	O
order	O
other	O
than	O
based	O
on	O
the	O
index	O
,	O
the	O
above	O
list	O
methods	O
would	O
make	O
no	O
sense	O
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28584954	O
Because	O
thats	O
the	O
standard	O
.	O
Infinity	O
represents	O
a	O
number	O
greater	O
than	O
or	O
less	O
than	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
/	O
-	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
NaN	O
represents	O
the	O
outcome	O
of	O
an	O
operation	O
that	O
didn	O
'	O
t	O
make	O
sense	O
.	O
That	O
is	O
,	O
the	O
operation	O
didn	O
'	O
t	O
possibly	O
come	O
out	O
with	O
a	O
number	O
.	O
I	O
would	O
guess	O
the	O
logic	O
is	O
once	O
a	O
number	O
gets	O
big	O
enough	O
(	O
infinity	O
)	O
and	O
because	O
of	O
the	O
limitation	O
of	O
floating	O
point	O
numbers	O
,	O
adding	O
numbers	O
to	O
it	O
won	O
'	O
t	O
change	O
the	O
outcome	O
,	O
so	O
its	O
'	O
like	O
'	O
infinity	O
.	O
So	O
if	O
you	O
want	O
to	O
compare	O
to	O
really	O
big	O
numbers	O
,	O
at	O
some	O
point	O
you	O
might	O
just	O
say	O
those	O
two	O
big	O
numbers	O
are	O
close	O
enough	O
for	O
all	O
intents	O
and	O
purposes	O
.	O
But	O
if	O
you	O
want	O
to	O
compare	O
two	O
things	O
that	O
both	O
aren	O
'	O
t	O
numbers	O
,	O
you	O
can	O
'	O
t	O
compare	O
them	O
so	O
its	O
false	O
.	O
At	O
least	O
you	O
couldn	O
'	O
t	O
compare	O
them	O
as	O
a	O
primitive	O
.	O
Question	O
-	O
31471444	O
,	O
answer	O
-	O
31471530	O
You	O
should	O
not	O
.	O
The	O
INTEGER	O
_	O
ONE	O
name	O
is	O
no	O
more	O
meaningful	O
than	O
1	O
.	O
If	O
however	O
this	O
value	O
has	O
some	O
other	O
meaning	O
(	O
for	O
example	O
,	O
month	O
in	O
the	O
year	O
)	O
,	O
then	O
using	O
a	O
constant	O
(	O
like	O
Calendar	B-api_mention
.	I-api_mention
FEBRUARY	I-api_mention
)	O
will	O
make	O
your	O
code	O
clearer	O
.	O
I	O
can	O
guess	O
that	O
this	O
constant	O
in	O
Commons	O
Math	O
library	O
was	O
created	O
in	O
Java	O
1	O
.	O
4	O
when	O
there	O
were	O
no	O
Integer	B-api_mention
cache	O
and	O
autoboxing	O
,	O
so	O
it	O
had	O
sense	O
in	O
terms	O
that	O
you	O
may	O
reuse	O
the	O
same	O
Integer	B-api_mention
object	O
(	O
not	O
primitive	O
int	O
)	O
in	O
different	O
places	O
to	O
save	O
memory	O
.	O
So	O
it	O
was	O
added	O
for	O
performance	O
reasons	O
,	O
not	O
for	O
code	O
clarity	O
.	O
Now	O
it	O
'	O
s	O
obsolete	O
:	O
even	O
if	O
you	O
need	O
an	O
Integer	B-api_mention
object	O
,	O
you	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
implicit	O
autoboxing	O
and	O
get	O
the	O
cached	O
one	O
.	O
Question	O
-	O
32294367	O
,	O
answer	O
-	O
32378895	O
#	O
blockquote	O
Yes	O
and	O
No	O
.	O
I	O
explain	O
:	O
#	O
li	O
Referring	O
to	O
shared	O
memory	O
:	O
Different	O
threads	O
in	O
a	O
Java	O
process	O
share	O
the	O
whole	O
heap	O
,	O
therefore	O
threads	O
can	O
interact	O
in	O
a	O
huge	O
number	O
of	O
planned	O
and	O
unplanned	O
ways	O
.	O
However	O
objects	O
in	O
the	O
stack	O
(	O
e	O
.	O
g	O
.	O
a	O
context	O
you	O
pass	O
down	O
to	O
called	O
method	O
)	O
or	O
a	O
ThreadLocal	O
are	O
their	O
own	O
thread	O
'	O
s	O
(	O
unless	O
they	O
start	O
sharing	O
references	O
)	O
.	O
#	O
li	O
Crashing	O
:	O
If	O
a	O
thread	O
crashes	O
in	O
Java	O
(	O
a	O
Throwable	B-api_mention
is	O
propagated	O
into	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
or	O
something	O
gets	O
looped	O
or	O
blocked	O
)	O
,	O
that	O
mishap	O
might	O
not	O
affect	O
other	O
threads	O
(	O
e	O
.	O
g	O
.	O
a	O
pool	O
of	O
connections	O
in	O
a	O
server	O
will	O
continue	O
to	O
operate	O
)	O
.	O
However	O
as	O
different	O
threads	O
interact	O
.	O
Other	O
threads	O
will	O
easily	O
get	O
stranded	O
if	O
one	O
of	O
them	O
ends	O
abnormally	O
(	O
e	O
.	O
g	O
.	O
one	O
thread	O
trying	O
to	O
read	O
from	O
an	O
empty	O
pipe	O
from	O
another	O
thread	O
which	O
did	O
not	O
close	O
its	O
end	O
)	O
.	O
So	O
unless	O
the	O
developers	O
are	O
highly	O
paranoid	O
careful	O
,	O
it	O
is	O
very	O
likely	O
that	O
side	O
effects	O
will	O
occur	O
.	O
I	O
doubt	O
that	O
any	O
other	O
paradigm	O
intends	O
threads	O
to	O
operate	O
as	O
totally	O
independent	O
islands	O
.	O
They	O
must	O
share	O
information	O
and	O
coordinate	O
somehow	O
.	O
And	O
then	O
there	O
will	O
be	O
the	O
chance	O
to	O
mess	O
things	O
up	O
.	O
It	O
is	O
just	O
they	O
will	O
take	O
a	O
more	O
defensive	O
approach	O
that	O
"	O
gives	O
you	O
less	O
rope	O
to	O
hang	O
yourself	O
"	O
(	O
same	O
idiom	O
as	O
with	O
pointers	O
)	O
.	O
Question	O
-	O
23932061	O
,	O
answer	O
-	O
23936723	O
There	O
'	O
s	O
a	O
much	O
better	O
answer	O
than	O
using	O
spliteratorUnknownSize	B-api_mention
directly	O
,	O
which	O
is	O
both	O
easier	O
and	O
gets	O
a	O
better	O
result	O
.	O
Iterable	O
has	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
so	O
you	O
should	O
just	O
use	O
that	O
to	O
get	O
your	O
spliterator	O
.	O
In	O
the	O
worst	O
case	O
,	O
its	O
the	O
same	O
code	O
(	O
the	O
default	O
implementation	O
uses	O
spliteratorUnknownSize	B-api_mention
)	O
,	O
but	O
in	O
the	O
more	O
common	O
case	O
,	O
where	O
your	O
Iterable	O
is	O
already	O
a	O
collection	O
,	O
you	O
'	O
ll	O
get	O
a	O
better	O
spliterator	O
,	O
and	O
therefore	O
better	O
stream	O
performance	O
(	O
maybe	O
even	O
good	O
parallelism	O
.	O
)	O
Its	O
also	O
less	O
code	O
:	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
moreStreamOps	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
As	O
you	O
can	O
see	O
,	O
getting	O
a	O
stream	O
from	O
an	O
Iterable	B-api_mention
(	O
see	O
Why	O
does	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
provide	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
methods	O
?	O
)	O
is	O
not	O
very	O
painful	O
.	O
Question	O
-	O
31370403	O
,	O
answer	O
-	O
31466466	O
Idea	O
#	O
1	O
,	O
storing	O
the	O
Graphics	B-api_mention
objects	O
simply	O
wouldn	O
'	O
t	O
work	O
.	O
The	O
Graphics	B-api_mention
should	O
not	O
be	O
considered	O
as	O
"	O
holding	O
"	O
some	O
display	O
memory	O
,	O
but	O
rather	O
as	O
a	O
handle	O
to	O
access	O
an	O
area	O
of	O
display	O
memory	O
.	O
In	O
the	O
case	O
of	O
BufferedImage	O
,	O
each	O
Graphics	B-api_mention
object	O
will	O
be	O
always	O
the	O
handle	O
to	O
the	O
same	O
given	O
image	O
memory	O
buffer	O
,	O
so	O
they	O
all	O
will	O
represent	O
the	O
same	O
image	O
.	O
Even	O
more	O
importantly	O
,	O
you	O
can	O
'	O
t	O
actually	O
do	O
anything	O
with	O
the	O
stored	O
Graphics	B-api_mention
:	O
As	O
they	O
do	O
not	O
store	O
anything	O
,	O
there	O
is	O
no	O
way	O
whatsoever	O
they	O
could	O
"	O
re	O
-	O
store	O
"	O
anything	O
.	O
Idea	O
#	O
2	O
,	O
cloning	O
the	O
BufferedImage	O
s	O
is	O
a	O
much	O
better	O
idea	O
,	O
but	O
you	O
'	O
ll	O
indeed	O
be	O
wasting	O
memory	O
,	O
and	O
quickly	O
run	O
out	O
of	O
it	O
.	O
It	O
helps	O
only	O
to	O
store	O
those	O
parts	O
of	O
the	O
image	O
affected	O
by	O
the	O
draw	O
,	O
for	O
example	O
using	O
rectangular	O
areas	O
,	O
but	O
it	O
still	O
costs	O
a	O
lot	O
of	O
memory	O
.	O
Buffering	O
those	O
undo	O
images	O
to	O
disk	O
could	O
help	O
,	O
but	O
it	O
will	O
make	O
your	O
UI	O
slow	O
and	O
unresponsive	O
,	O
and	O
that	O
'	O
s	O
bad	O
;	O
furthermore	O
,	O
it	O
makes	O
you	O
application	O
more	O
complex	O
and	O
error	O
-	O
prone	O
.	O
My	O
alternative	O
would	O
be	O
to	O
store	O
store	O
the	O
image	O
modifications	O
in	O
a	O
list	O
,	O
rendered	O
from	O
first	O
to	O
last	O
on	O
top	O
of	O
the	O
image	O
.	O
An	O
undo	O
operation	O
then	O
simply	O
consists	O
of	O
removing	O
the	O
modification	O
from	O
the	O
list	O
.	O
This	O
requires	O
you	O
to	O
"	O
reify	O
"	O
the	O
image	O
modifications	O
,	O
i	O
.	O
e	O
.	O
create	O
a	O
class	O
that	O
implements	O
a	O
single	O
modification	O
,	O
by	O
providing	O
a	O
void	O
draw	O
(	O
args	O
)	O
method	O
which	O
performs	O
the	O
actual	O
drawing	O
.	O
As	O
you	O
said	O
,	O
random	O
modifications	O
pose	O
an	O
additional	O
problem	O
.	O
However	O
,	O
the	O
key	O
problem	O
is	O
your	O
use	O
of	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
create	O
random	O
numbers	O
.	O
Instead	O
,	O
perform	O
each	O
random	O
modification	O
with	O
a	O
Random	B-api_mention
created	O
from	O
a	O
fixed	O
seed	O
value	O
,	O
so	O
that	O
the	O
(	O
pseudo	O
-	O
)	O
random	O
number	O
sequences	O
are	O
the	O
same	O
on	O
each	O
invocation	O
of	O
draw	O
(	O
args	O
)	O
,	O
i	O
.	O
e	O
.	O
,	O
each	O
draw	O
has	O
exactly	O
the	O
same	O
effects	O
.	O
(	O
That	O
'	O
s	O
why	O
they	O
are	O
called	O
"	O
pseudo	O
-	O
random	O
"	O
-	O
-	O
the	O
generated	O
numbers	O
look	O
random	O
,	O
but	O
they	O
are	O
just	O
as	O
deterministic	O
as	O
any	O
other	O
function	O
.	O
)	O
In	O
contrast	O
to	O
the	O
image	O
storing	O
technique	O
,	O
which	O
has	O
memory	O
problems	O
,	O
the	O
problem	O
with	O
this	O
technique	O
is	O
that	O
many	O
modifications	O
may	O
make	O
the	O
GUI	O
slow	O
,	O
especially	O
if	O
the	O
modifications	O
are	O
computationally	O
intensive	O
.	O
To	O
prevent	O
this	O
,	O
the	O
simplest	O
way	O
would	O
be	O
to	O
fix	O
an	O
appropriate	O
maximum	O
size	O
of	O
the	O
list	O
of	O
undoable	O
modifications	O
.	O
If	O
this	O
limit	O
would	O
be	O
exceeded	O
by	O
adding	O
a	O
new	O
modification	O
,	O
remove	O
the	O
oldest	O
modification	O
the	O
list	O
and	O
apply	O
it	O
to	O
the	O
backing	O
BufferedImage	O
itself	O
.	O
The	O
following	O
simple	O
demo	O
application	O
shows	O
that	O
(	O
and	O
how	O
)	O
this	O
all	O
works	O
together	O
.	O
It	O
also	O
includes	O
a	O
nice	O
"	O
redo	O
"	O
feature	O
for	O
redoing	O
undone	O
actions	O
.	O
#	O
pre	O
Question	O
-	O
24885223	O
I	O
don	O
'	O
t	O
know	O
whether	O
I	O
am	O
asking	O
the	O
right	O
question	O
.	O
I	O
was	O
exploring	O
RecyclerView	B-api_mention
and	O
I	O
was	O
surprised	O
to	O
see	O
that	O
RecyclerView	B-api_mention
does	O
not	O
have	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Because	O
RecyclerView	B-api_mention
extends	O
#	O
blockquote	O
and	O
ListView	B-api_mention
extends	O
#	O
blockquote	O
.	O
However	O
I	O
solved	O
my	O
problem	O
by	O
writing	O
onClick	B-api_mention
in	O
my	O
RecyclerView	B-api_mention
.	I-api_mention
Adapter	I-api_mention
:	O
#	O
pre	O
But	O
still	O
I	O
want	O
to	O
know	O
why	O
Google	O
removed	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Is	O
there	O
a	O
performance	O
issue	O
or	O
something	O
else	O
?	O
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056878	O
We	O
can	O
take	O
a	O
look	O
into	O
the	O
source	O
code	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
regex	I-api_mention
.	I-api_mention
Pattern	I-api_mention
which	O
is	O
behind	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
.	O
Way	O
down	O
the	O
rabbit	O
hole	O
the	O
method	O
public	O
String	B-api_mention
[	O
]	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
invoked	O
.	O
Input	O
StringLiteral	O
For	O
input	O
StringLiteral	O
this	O
method	O
is	O
called	O
as	O
String	B-api_mention
[	O
]	O
parts	O
=	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
intersting	O
part	O
of	O
this	O
method	O
is	O
:	O
#	O
pre	O
And	O
that	O
is	O
what	O
happens	O
:	O
new	O
String	B-api_mention
[	O
]	O
{	O
input	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
)	I-api_mention
}	O
is	O
returned	O
.	O
Input	O
StringLiteral	O
For	O
input	O
StringLiteral	O
the	O
intersting	O
part	O
is	O
#	O
pre	O
Here	O
resultSize	O
=	O
=	O
0	O
and	O
limit	O
=	O
=	O
0	O
so	O
new	O
String	B-api_mention
[	O
0	O
]	O
is	O
returned	O
.	O
Question	O
-	O
30081520	O
I	O
am	O
aware	O
that	O
it	O
is	O
better	O
to	O
call	O
the	O
equals	O
method	O
over	O
using	O
the	O
=	O
=	O
operator	O
(	O
see	O
this	O
question	O
)	O
.	O
I	O
want	O
two	O
strings	O
to	O
compare	O
as	O
equal	O
if	O
they	O
are	O
both	O
null	O
or	O
if	O
they	O
represent	O
the	O
same	O
string	O
.	O
Unfortunately	O
the	O
equals	B-api_mention
method	O
will	O
throw	O
an	O
NPE	O
if	O
the	O
strings	O
are	O
null	O
.	O
My	O
code	O
is	O
currently	O
:	O
#	O
pre	O
This	O
is	O
inelegant	O
.	O
What	O
is	O
the	O
correct	O
way	O
to	O
perform	O
this	O
test	O
?	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5032837	O
If	O
you	O
want	O
to	O
use	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
your	O
Sets	O
,	O
in	O
the	O
sense	O
that	O
the	O
same	O
entity	O
can	O
only	O
be	O
in	O
there	O
once	O
,	O
then	O
there	O
is	O
only	O
one	O
option	O
:	O
Option	O
2	O
.	O
That	O
'	O
s	O
because	O
a	O
primary	O
key	O
for	O
an	O
entity	O
by	O
definition	O
never	O
changes	O
(	O
if	O
somebody	O
indeed	O
updates	O
it	O
,	O
it	O
'	O
s	O
not	O
the	O
same	O
entity	O
anymore	O
)	O
You	O
should	O
take	O
that	O
literally	O
:	O
Since	O
your	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
based	O
on	O
the	O
primary	O
key	O
,	O
you	O
must	O
not	O
use	O
these	O
methods	O
,	O
until	O
the	O
primary	O
key	O
is	O
set	O
.	O
So	O
you	O
shouldn	O
'	O
t	O
put	O
entities	O
in	O
the	O
set	O
,	O
until	O
they	O
'	O
re	O
assigned	O
a	O
primary	O
key	O
.	O
(	O
Yes	O
,	O
UUIDs	O
and	O
similar	O
concepts	O
may	O
help	O
to	O
assign	O
primary	O
keys	O
early	O
.	O
)	O
Now	O
,	O
it	O
'	O
s	O
theoretically	O
also	O
possible	O
to	O
achieve	O
that	O
with	O
Option	O
3	O
,	O
even	O
though	O
so	O
-	O
called	O
"	O
business	O
-	O
keys	O
"	O
have	O
the	O
nasty	O
drawback	O
that	O
they	O
can	O
change	O
:	O
"	O
All	O
you	O
'	O
ll	O
have	O
to	O
do	O
is	O
delete	O
the	O
already	O
inserted	O
entities	O
from	O
the	O
set	O
(	O
s	O
)	O
,	O
and	O
re	O
-	O
insert	O
them	O
.	O
"	O
That	O
is	O
true	O
-	O
but	O
it	O
also	O
means	O
,	O
that	O
in	O
a	O
distributed	O
system	O
,	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
,	O
that	O
this	O
is	O
done	O
absolutely	O
everywhere	O
the	O
data	O
has	O
been	O
inserted	O
to	O
(	O
and	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
,	O
that	O
the	O
update	O
is	O
performed	O
,	O
before	O
other	O
things	O
occur	O
)	O
.	O
You	O
'	O
ll	O
need	O
a	O
sophisticated	O
update	O
mechanism	O
,	O
especially	O
if	O
some	O
remote	O
systems	O
aren	O
'	O
t	O
currently	O
reachable	O
.	O
.	O
.	O
Option	O
1	O
can	O
only	O
be	O
used	O
,	O
if	O
all	O
the	O
objects	O
in	O
your	O
sets	O
are	O
from	O
the	O
same	O
Hibernate	O
session	O
.	O
The	O
Hibernate	O
documentation	O
makes	O
this	O
very	O
clear	O
in	O
chapter	O
13	O
.	O
1	O
.	O
3	O
.	O
Considering	O
object	O
identity	O
:	O
#	O
blockquote	O
It	O
continues	O
to	O
argue	O
in	O
favor	O
of	O
Option	O
3	O
:	O
#	O
blockquote	O
This	O
is	O
true	O
,	O
if	O
you	O
#	O
li	O
cannot	O
assign	O
the	O
id	O
early	O
(	O
e	O
.	O
g	O
.	O
by	O
using	O
UUIDs	O
)	O
#	O
li	O
and	O
yet	O
you	O
absolutely	O
want	O
to	O
put	O
your	O
objects	O
in	O
sets	O
while	O
they	O
'	O
re	O
in	O
transient	O
state	O
.	O
Otherwise	O
,	O
you	O
'	O
re	O
free	O
to	O
choose	O
Option	O
2	O
.	O
Then	O
it	O
mentions	O
the	O
need	O
for	O
a	O
relative	O
stability	O
:	O
#	O
blockquote	O
This	O
is	O
correct	O
.	O
The	O
practical	O
problem	O
I	O
see	O
with	O
this	O
is	O
:	O
If	O
you	O
can	O
'	O
t	O
guarantee	O
absolute	O
stability	O
,	O
how	O
will	O
you	O
be	O
able	O
to	O
guarantee	O
stability	O
"	O
as	O
long	O
as	O
the	O
objects	O
are	O
in	O
the	O
same	O
Set	O
"	O
.	O
I	O
can	O
imagine	O
some	O
special	O
cases	O
(	O
like	O
using	O
sets	O
only	O
for	O
a	O
conversation	O
and	O
then	O
throwing	O
it	O
away	O
)	O
,	O
but	O
I	O
would	O
question	O
the	O
general	O
practicability	O
of	O
this	O
.	O
Short	O
version	O
:	O
#	O
li	O
Option	O
1	O
can	O
only	O
be	O
used	O
with	O
objects	O
within	O
a	O
single	O
session	O
.	O
#	O
li	O
If	O
you	O
can	O
,	O
use	O
Option	O
2	O
.	O
(	O
Assign	O
PK	O
as	O
early	O
as	O
possible	O
,	O
because	O
you	O
can	O
'	O
t	O
use	O
the	O
objects	O
in	O
sets	O
until	O
the	O
PK	O
is	O
assigned	O
.	O
)	O
#	O
li	O
If	O
you	O
can	O
guarantee	O
relative	O
stability	O
,	O
you	O
can	O
use	O
Option	O
3	O
.	O
But	O
be	O
careful	O
with	O
this	O
.	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818916	O
The	O
primary	O
use	O
of	O
AtomicInteger	B-api_mention
is	O
when	O
you	O
are	O
in	O
a	O
multithreaded	O
context	O
and	O
you	O
need	O
to	O
perform	O
thread	O
safe	O
operations	O
on	O
an	O
integer	O
without	O
using	O
synchronized	O
.	O
The	O
assignation	O
and	O
retrieval	O
on	O
the	O
primitive	O
type	O
int	O
are	O
already	O
atomic	O
but	O
AtomicInteger	B-api_mention
comes	O
with	O
many	O
operations	O
which	O
are	O
not	O
atomic	O
on	O
int	O
.	O
The	O
simplest	O
are	O
the	O
getAndXXX	O
or	O
xXXAndGet	O
.	O
For	O
instance	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
an	O
atomic	O
equivalent	O
to	O
i	O
+	O
+	O
which	O
is	O
not	O
atomic	O
because	O
it	O
is	O
actually	O
a	O
short	O
cut	O
for	O
three	O
operations	O
:	O
retrieval	O
,	O
addition	O
and	O
assignation	O
.	O
compareAndSet	B-api_mention
is	O
very	O
useful	O
to	O
implements	O
semaphores	O
,	O
locks	O
,	O
latches	O
,	O
etc	O
.	O
Using	O
the	O
AtomicInteger	B-api_mention
is	O
faster	O
and	O
more	O
readable	O
than	O
performing	O
the	O
same	O
using	O
synchronization	O
.	O
A	O
simple	O
test	O
:	O
#	O
pre	O
On	O
my	O
PC	O
with	O
Java	O
1	O
.	O
6	O
the	O
atomic	O
test	O
runs	O
in	O
3	O
seconds	O
while	O
the	O
synchronized	O
one	O
runs	O
in	O
about	O
5	O
.	O
5	O
seconds	O
.	O
The	O
problem	O
here	O
is	O
that	O
the	O
operation	O
to	O
synchronize	O
(	O
notAtomic	O
+	O
+	O
)	O
is	O
really	O
short	O
.	O
So	O
the	O
cost	O
of	O
the	O
synchronization	O
is	O
really	O
important	O
compared	O
to	O
the	O
operation	O
.	O
Beside	O
atomicity	O
AtomicInteger	B-api_mention
can	O
be	O
use	O
as	O
a	O
mutable	O
version	O
of	O
Integer	B-api_mention
for	O
instance	O
in	O
Map	B-api_mention
s	O
as	O
values	O
.	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781168	O
The	O
value	O
you	O
are	O
looking	O
for	O
is	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
#	O
blockquote	O
That	O
'	O
s	O
off	O
-	O
topic	O
for	O
Stack	O
Exchange	O
.	O
But	O
you	O
could	O
do	O
it	O
starting	O
from	O
the	O
definition	O
of	O
Java	O
integers	O
(	O
JLS	O
4	O
.	O
2	O
)	O
#	O
blockquote	O
and	O
#	O
blockquote	O
and	O
the	O
definition	O
of	O
the	O
Java	O
unary	O
'	O
-	O
'	O
operator	O
(	O
JLS	O
15	O
.	O
15	O
.	O
4	O
)	O
:	O
#	O
blockquote	O
Question	O
-	O
5839359	O
,	O
answer	O
-	O
5839392	O
You	O
'	O
re	O
essentially	O
running	O
out	O
of	O
memory	O
to	O
run	O
the	O
process	O
smoothly	O
.	O
Options	O
that	O
come	O
to	O
mind	O
:	O
#	O
li	O
Specify	O
more	O
memory	O
like	O
you	O
mentioned	O
,	O
try	O
something	O
in	O
between	O
like	O
-	O
Xmx512m	O
first	O
#	O
li	O
Work	O
with	O
smaller	O
batches	O
of	O
HashMap	B-api_mention
objects	O
to	O
process	O
at	O
once	O
if	O
possible	O
#	O
li	O
If	O
you	O
have	O
a	O
lot	O
of	O
duplicate	O
strings	O
,	O
use	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
them	O
before	O
putting	O
them	O
into	O
the	O
HashMap	B-api_mention
#	O
li	O
Use	O
the	O
HashMap	B-api_mention
(	I-api_mention
int	I-api_mention
initialCapacity	I-api_mention
,	I-api_mention
float	I-api_mention
loadFactor	I-api_mention
)	I-api_mention
constructor	O
to	O
tune	O
for	O
your	O
case	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
29226136	O
Also	O
note	O
that	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
normally	O
contains	O
=	O
=	O
for	O
testing	O
as	O
this	O
is	O
the	O
first	O
thing	O
you	O
would	O
wish	O
to	O
test	O
for	O
if	O
you	O
wanted	O
to	O
test	O
if	O
two	O
objects	O
are	O
equal	O
.	O
And	O
=	O
=	O
actually	O
does	O
look	O
at	O
values	O
for	O
primitive	O
types	O
,	O
for	O
objects	O
it	O
checks	O
the	O
reference	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
38560612	O
This	O
is	O
part	O
of	O
JDK	O
9	O
in	O
the	O
form	O
of	O
or	O
,	O
which	O
takes	O
a	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Your	O
example	O
would	O
then	O
be	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
;	O
For	O
details	O
see	O
the	O
(	O
preliminary	O
)	O
Javadoc	O
or	O
this	O
post	O
I	O
wrote	O
.	O
Question	O
-	O
28681737	O
,	O
answer	O
-	O
28684917	O
The	O
short	O
answer	O
is	O
:	O
it	O
'	O
s	O
safe	O
if	O
you	O
use	O
them	O
safely	O
:	O
)	O
The	O
snarky	O
answer	O
:	O
tell	O
me	O
what	O
you	O
mean	O
by	O
traits	O
,	O
and	O
maybe	O
I	O
'	O
ll	O
give	O
you	O
a	O
better	O
answer	O
:	O
)	O
In	O
all	O
seriousness	O
,	O
the	O
term	O
"	O
trait	O
"	O
is	O
not	O
well	O
-	O
defined	O
.	O
Many	O
Java	O
developers	O
are	O
most	O
familiar	O
with	O
traits	O
as	O
they	O
are	O
expressed	O
in	O
Scala	O
,	O
but	O
Scala	O
is	O
far	O
from	O
the	O
first	O
language	O
to	O
have	O
traits	O
,	O
either	O
in	O
name	O
or	O
in	O
effect	O
.	O
For	O
example	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
stateful	O
(	O
can	O
have	O
var	O
variables	O
)	O
;	O
in	O
Fortress	O
they	O
are	O
pure	O
behavior	O
.	O
Java	O
'	O
s	O
interfaces	O
with	O
default	O
methods	O
are	O
stateless	O
;	O
does	O
this	O
mean	O
they	O
are	O
not	O
traits	O
?	O
(	O
Hint	O
:	O
that	O
was	O
a	O
trick	O
question	O
.	O
)	O
Again	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
composed	O
through	O
linearization	O
;	O
if	O
class	O
A	O
extends	O
traits	O
X	O
and	O
Y	O
,	O
then	O
the	O
order	O
in	O
which	O
X	O
and	O
Y	O
are	O
mixed	O
in	O
determines	O
how	O
conflicts	O
between	O
X	O
and	O
Y	O
are	O
resolved	O
.	O
In	O
Java	O
,	O
this	O
linearization	O
mechanism	O
is	O
not	O
present	O
(	O
it	O
was	O
rejected	O
,	O
in	O
part	O
,	O
because	O
it	O
was	O
too	O
"	O
un	O
-	O
Java	O
-	O
like	O
"	O
.	O
)	O
The	O
proximate	O
reason	O
for	O
adding	O
default	O
methods	O
to	O
interfaces	O
was	O
to	O
support	O
interface	O
evolution	O
,	O
but	O
we	O
were	O
well	O
aware	O
that	O
we	O
were	O
going	O
beyond	O
that	O
.	O
Whether	O
you	O
consider	O
that	O
to	O
be	O
"	O
interface	O
evolution	O
+	O
+	O
"	O
or	O
"	O
traits	O
-	O
-	O
"	O
is	O
a	O
matter	O
of	O
personal	O
interpretation	O
.	O
So	O
,	O
to	O
answer	O
your	O
question	O
about	O
safety	O
.	O
.	O
.	O
so	O
long	O
as	O
you	O
stick	O
to	O
what	O
the	O
mechanism	O
actually	O
supports	O
,	O
rather	O
than	O
trying	O
to	O
wishfully	O
stretch	O
it	O
to	O
something	O
it	O
does	O
not	O
support	O
,	O
you	O
should	O
be	O
fine	O
.	O
A	O
key	O
design	O
goal	O
was	O
that	O
,	O
from	O
the	O
perspective	O
of	O
the	O
client	O
of	O
an	O
interface	O
,	O
default	O
methods	O
should	O
be	O
indistinguishable	O
from	O
"	O
regular	O
"	O
interface	O
methods	O
.	O
The	O
default	O
-	O
ness	O
of	O
a	O
method	O
,	O
therefore	O
,	O
is	O
only	O
interesting	O
to	O
the	O
designer	O
and	O
implementor	O
of	O
the	O
interface	O
.	O
Here	O
are	O
some	O
use	O
cases	O
that	O
are	O
well	O
within	O
the	O
design	O
goals	O
:	O
#	O
li	O
Interface	O
evolution	O
.	O
Here	O
,	O
we	O
are	O
adding	O
a	O
new	O
method	O
to	O
an	O
existing	O
interface	O
,	O
which	O
has	O
a	O
sensible	O
default	O
implementation	O
in	O
terms	O
of	O
existing	O
methods	O
on	O
that	O
interface	O
.	O
An	O
example	O
would	O
be	O
adding	O
the	O
forEach	O
method	O
to	O
Collection	B-api_mention
,	O
where	O
the	O
default	O
implementation	O
is	O
written	O
in	O
terms	O
of	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
li	O
"	O
Optional	O
"	O
methods	O
.	O
Here	O
,	O
the	O
designer	O
of	O
an	O
interface	O
is	O
saying	O
"	O
Implementors	O
need	O
not	O
implement	O
this	O
method	O
if	O
they	O
are	O
willing	O
to	O
live	O
with	O
the	O
limitations	O
in	O
functionality	O
that	O
entails	O
"	O
.	O
For	O
example	O
,	O
Iterator	B-api_mention
.	I-api_mention
remove	I-api_mention
was	O
given	O
a	O
default	O
which	O
throws	O
UnsupportedOperationException	O
;	O
since	O
the	O
vast	O
majority	O
of	O
implementations	O
of	O
Iterator	O
have	O
this	O
behavior	O
anyway	O
,	O
the	O
default	O
makes	O
this	O
method	O
essentially	O
optional	O
.	O
(	O
If	O
the	O
behavior	O
from	O
AbstractCollection	B-api_mention
were	O
expressed	O
as	O
defaults	O
on	O
Collection	B-api_mention
,	O
we	O
might	O
do	O
the	O
same	O
for	O
the	O
mutative	O
methods	O
.	O
)	O
#	O
li	O
Convenience	O
methods	O
.	O
These	O
are	O
methods	O
that	O
are	O
strictly	O
for	O
convenience	O
,	O
again	O
generally	O
implemented	O
in	O
terms	O
of	O
non	O
-	O
default	O
methods	O
on	O
the	O
class	O
.	O
The	O
logger	O
(	O
args	O
)	O
method	O
in	O
your	O
first	O
example	O
is	O
a	O
reasonable	O
illustration	O
of	O
this	O
.	O
#	O
li	O
Combinators	O
.	O
These	O
are	O
compositional	O
methods	O
that	O
instantiate	O
new	O
instances	O
of	O
the	O
interface	O
based	O
on	O
the	O
current	O
instance	O
.	O
For	O
example	O
,	O
the	O
methods	O
Predicate	B-api_mention
.	I-api_mention
and	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Comparator	B-api_mention
.	I-api_mention
thenComparing	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
examples	O
of	O
combinators	O
.	O
If	O
you	O
provide	O
a	O
default	O
implementation	O
,	O
you	O
should	O
also	O
provide	O
some	O
specification	O
for	O
the	O
default	O
(	O
in	O
the	O
JDK	O
,	O
we	O
use	O
the	O
@	O
implSpec	O
javadoc	O
tag	O
for	O
this	O
)	O
to	O
aid	O
implementors	O
in	O
understanding	O
whether	O
they	O
want	O
to	O
override	O
the	O
method	O
or	O
not	O
.	O
Some	O
defaults	O
,	O
like	O
convenience	O
methods	O
and	O
combinators	O
,	O
are	O
almost	O
never	O
overridden	O
;	O
others	O
,	O
like	O
optional	O
methods	O
,	O
are	O
often	O
overridden	O
.	O
You	O
need	O
to	O
provide	O
enough	O
specification	O
(	O
not	O
just	O
documentation	O
)	O
about	O
what	O
the	O
default	O
promises	O
to	O
do	O
,	O
so	O
the	O
implementor	O
can	O
make	O
a	O
sensible	O
decision	O
about	O
whether	O
they	O
need	O
to	O
override	O
it	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29502668	O
#	O
blockquote	O
It	O
'	O
s	O
checking	O
simple	O
equality	O
(	O
likely	O
for	O
the	O
purpose	O
of	O
a	O
micro	O
-	O
optimization	O
,	O
but	O
more	O
on	O
that	O
later	O
)	O
.	O
The	O
unusual	O
casting	O
is	O
necessary	O
because	O
Class	O
<	O
T	O
>	O
(	O
the	O
type	O
of	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
and	O
Class	O
<	O
T	O
>	O
are	O
incomparable	O
types	O
.	O
Basically	O
,	O
for	O
an	O
equality	O
comparison	O
with	O
=	O
=	O
to	O
compile	O
,	O
one	O
of	O
the	O
sides	O
has	O
to	O
be	O
a	O
subtype	O
or	O
supertype	O
of	O
the	O
other	O
.	O
I	O
.	O
e	O
.	O
we	O
can	O
'	O
t	O
do	O
:	O
#	O
pre	O
The	O
rules	O
for	O
generic	O
types	O
are	O
a	O
bit	O
more	O
complicated	O
and	O
there	O
are	O
a	O
few	O
cases	O
where	O
a	O
comparison	O
doesn	O
'	O
t	O
compile	O
,	O
but	O
it	O
may	O
still	O
evaluate	O
to	O
true	O
.	O
The	O
reason	O
Class	O
<	O
T	O
>	O
is	O
not	O
a	O
supertype	O
of	O
Class	O
<	O
T	O
>	O
,	O
despite	O
Object	B-api_mention
[	O
]	O
being	O
a	O
supertype	O
of	O
all	O
object	O
array	O
types	O
,	O
is	O
that	O
Java	O
generics	O
are	O
invariant	O
without	O
the	O
presence	O
of	O
a	O
wildcard	O
.	O
Another	O
way	O
to	O
do	O
the	O
comparison	O
would	O
be	O
:	O
(	O
newType	O
=	O
=	O
(	O
Class	O
<	O
T	O
>	O
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
#	O
blockquote	O
#	O
li	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
creates	O
an	O
array	O
the	O
normal	O
way	O
,	O
of	O
a	O
type	O
that	O
is	O
statically	O
known	O
.	O
Remember	O
,	O
the	O
code	O
has	O
just	O
checked	O
that	O
T	O
[	O
]	O
is	O
Object	B-api_mention
[	O
]	O
.	O
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
reflection	O
to	O
dynamically	O
create	O
an	O
array	O
of	O
the	O
Class	O
type	O
passed	O
in	O
.	O
#	O
blockquote	O
An	O
operation	O
using	O
reflection	O
is	O
generally	O
slower	O
than	O
its	O
non	O
-	O
reflective	O
counterpart	O
.	O
The	O
reflection	O
tutorial	O
says	O
:	O
#	O
blockquote	O
Java	O
SE	O
is	O
filled	O
with	O
micro	O
-	O
optimization	O
like	O
this	O
.	O
The	O
writers	O
of	O
SE	O
try	O
to	O
squeeze	O
everything	O
they	O
can	O
out	O
of	O
it	O
.	O
But	O
I	O
wouldn	O
'	O
t	O
be	O
worried	O
about	O
a	O
performance	O
hit	O
in	O
this	O
case	O
:	O
newInstance	O
and	O
copyOf	B-api_mention
are	O
HotSpot	O
intrinsics	O
.	O
This	O
means	O
that	O
ideally	O
calls	O
to	O
these	O
methods	O
get	O
replaced	O
with	O
machine	O
-	O
specific	O
assembly	O
.	O
Anecdotally	O
,	O
I	O
ran	O
some	O
tests	O
and	O
found	O
the	O
difference	O
between	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
and	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
be	O
negligible	O
.	O
The	O
code	O
in	O
the	O
question	O
is	O
probably	O
a	O
relic	O
,	O
although	O
it	O
may	O
still	O
be	O
useful	O
on	O
less	O
well	O
-	O
equipped	O
JVMs	O
.	O
Reflection	O
can	O
also	O
be	O
disabled	O
in	O
certain	O
contexts	O
with	O
strict	O
security	O
(	O
such	O
as	O
an	O
applet	O
)	O
,	O
but	O
not	O
typically	O
for	O
a	O
normal	O
desktop	O
application	O
.	O
#	O
blockquote	O
In	O
general	O
,	O
you	O
will	O
probably	O
never	O
use	O
this	O
overload	O
.	O
This	O
overload	O
is	O
only	O
useful	O
if	O
you	O
want	O
to	O
change	O
the	O
type	O
of	O
the	O
array	O
.	O
#	O
li	O
Widening	O
:	O
#	O
pre	O
#	O
li	O
Narrowing	O
:	O
#	O
pre	O
It	O
'	O
s	O
more	O
typical	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
T	I-api_mention
[	I-api_mention
]	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
29333689	O
,	O
answer	O
-	O
29341981	O
The	O
best	O
answer	O
is	O
already	O
given	O
(	O
XOR	O
-	O
ing	O
the	O
elements	O
)	O
,	O
this	O
is	O
to	O
provide	O
an	O
alternative	O
,	O
more	O
general	O
way	O
.	O
If	O
the	O
input	O
array	O
would	O
be	O
sorted	O
(	O
we	O
can	O
make	O
it	O
sorted	O
)	O
,	O
we	O
could	O
simply	O
iterate	O
over	O
the	O
elements	O
in	O
pairs	O
(	O
stepping	O
by	O
2	O
)	O
and	O
if	O
the	O
elements	O
of	O
the	O
"	O
pair	O
"	O
are	O
different	O
,	O
we	O
'	O
re	O
done	O
:	O
#	O
pre	O
Note	O
:	O
This	O
solution	O
sorts	O
the	O
input	O
array	O
;	O
if	O
this	O
is	O
unwanted	O
or	O
not	O
allowed	O
,	O
it	O
can	O
be	O
cloned	O
first	O
:	O
arr	O
=	O
arr	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
input	O
array	O
is	O
sorted	O
,	O
the	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
can	O
be	O
left	O
out	O
of	O
course	O
.	O
Generalization	O
The	O
advantage	O
of	O
this	O
solution	O
is	O
that	O
it	O
can	O
be	O
applied	O
to	O
all	O
types	O
which	O
are	O
comparable	O
and	O
therefore	O
can	O
be	O
sorted	O
(	O
types	O
which	O
implement	O
Comparable	B-api_mention
)	O
,	O
for	O
example	O
String	B-api_mention
or	O
Date	B-api_mention
.	O
The	O
XOR	O
solution	O
is	O
limited	O
to	O
numbers	O
only	O
.	O
Here	O
is	O
a	O
slightly	O
modified	O
version	O
which	O
takes	O
an	O
input	O
array	O
of	O
any	O
element	O
type	O
which	O
is	O
comparable	O
:	O
#	O
pre	O
Note	O
:	O
In	O
most	O
cases	O
you	O
could	O
also	O
use	O
arr	O
[	O
i	O
]	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
compare	O
elements	O
instead	O
of	O
using	O
Comparable	B-api_mention
.	I-api_mention
compareTo	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
For	O
details	O
read	O
the	O
linked	O
javadoc	O
.	O
Quoting	O
the	O
relevant	O
part	O
:	O
#	O
blockquote	O
Now	O
you	O
can	O
call	O
this	O
with	O
a	O
String	B-api_mention
[	O
]	O
for	O
example	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Output	O
:	O
2	O
Final	O
notes	O
:	O
Starting	O
from	O
the	O
problem	O
statement	O
it	O
is	O
not	O
checked	O
whether	O
there	O
are	O
more	O
than	O
2	O
occurrences	O
of	O
the	O
elements	O
,	O
and	O
neither	O
is	O
whether	O
the	O
array	O
length	O
is	O
odd	O
.	O
Also	O
the	O
second	O
example	O
doesn	O
'	O
t	O
check	O
for	O
null	O
values	O
,	O
these	O
are	O
to	O
be	O
added	O
if	O
necessary	O
.	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488669	O
Two	O
steps	O
:	O
#	O
li	O
String	B-api_mention
[	O
]	O
items	O
=	O
commaSeparated	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
container	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725453	O
Since	O
all	O
lists	O
are	O
already	O
"	O
sorted	O
"	O
by	O
the	O
order	O
the	O
items	O
were	O
added	O
(	O
FIFO	O
ordering	O
)	O
,	O
you	O
can	O
"	O
resort	O
"	O
them	O
with	O
another	O
ordering	O
,	O
including	O
the	O
natural	O
ordering	O
of	O
elements	O
,	O
using	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
EDIT	O
:	O
Lists	B-api_mention
as	O
data	O
structures	O
are	O
based	O
in	O
what	O
is	O
interesting	O
is	O
the	O
ordering	O
in	O
which	O
the	O
items	O
where	O
inserted	O
.	O
Sets	O
do	O
not	O
have	O
that	O
information	O
.	O
If	O
you	O
want	O
to	O
order	O
by	O
addition	O
time	O
,	O
use	O
List	B-api_mention
.	O
If	O
you	O
want	O
to	O
order	O
by	O
other	O
criteria	O
,	O
use	O
SortedSet	B-api_mention
.	O
Question	O
-	O
30581531	O
What	O
is	O
the	O
maximum	O
number	O
of	O
parameters	O
that	O
a	O
method	O
in	O
Java	O
can	O
have	O
and	O
why	O
?	O
I	O
am	O
using	O
Java	O
1	O
.	O
8	O
on	O
a	O
64	O
-	O
bit	O
Windows	O
system	O
.	O
All	O
the	O
answers	O
on	O
StackOverflow	O
about	O
this	O
say	O
that	O
the	O
technical	O
limit	O
is	O
255	O
parameters	O
without	O
specifying	O
why	O
.	O
To	O
be	O
precise	O
,	O
255	O
for	O
static	O
and	O
254	O
for	O
non	O
-	O
static	O
(	O
this	O
will	O
be	O
the	O
255th	O
in	O
this	O
case	O
)	O
methods	O
.	O
I	O
thought	O
this	O
could	O
be	O
specified	O
in	O
some	O
sort	O
of	O
specification	O
and	O
that	O
this	O
was	O
simply	O
a	O
statically	O
defined	O
maximum	O
number	O
of	O
parameters	O
allowed	O
.	O
But	O
this	O
was	O
only	O
valid	O
for	O
int	O
and	O
all	O
4	O
-	O
bytes	O
types	O
.	O
I	O
did	O
some	O
tests	O
with	O
long	O
parameters	O
,	O
and	O
I	O
was	O
only	O
able	O
to	O
declare	O
127	O
parameters	O
in	O
that	O
case	O
.	O
With	O
String	B-api_mention
parameters	O
,	O
the	O
allowed	O
number	O
i	O
deduced	O
from	O
testing	O
is	O
255	O
(	O
it	O
may	O
be	O
because	O
the	O
reference	O
size	O
is	O
4	O
bytes	O
in	O
Java	O
?	O
)	O
.	O
But	O
since	O
I	O
am	O
using	O
a	O
64	O
-	O
bit	O
system	O
,	O
references	O
size	O
should	O
be	O
8	O
bytes	O
wide	O
and	O
so	O
with	O
String	B-api_mention
parameters	O
the	O
maximum	O
allowed	O
number	O
should	O
be	O
127	O
,	O
similar	O
to	O
long	O
types	O
.	O
How	O
does	O
this	O
limit	O
is	O
exactly	O
applied	O
?	O
Does	O
the	O
limit	O
have	O
anything	O
to	O
do	O
with	O
the	O
stack	O
size	O
of	O
the	O
method	O
?	O
Note	O
:	O
I	O
am	O
not	O
really	O
going	O
to	O
use	O
these	O
many	O
parameters	O
in	O
any	O
method	O
,	O
but	O
this	O
question	O
is	O
only	O
to	O
clarify	O
the	O
exact	O
behavior	O
.	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27949581	O
Imagine	O
you	O
have	O
a	O
phone	O
book	O
,	O
which	O
contains	O
people	O
,	O
which	O
have	O
a	O
String	B-api_mention
firstName	O
and	O
a	O
String	O
lastName	O
.	O
And	O
it	O
happens	O
that	O
in	O
your	O
phone	O
book	O
,	O
100	O
,	O
000	O
people	O
have	O
the	O
same	O
firstName	O
=	O
StringLiteral	O
.	O
Because	O
you	O
get	O
the	O
data	O
from	O
a	O
database	O
or	O
a	O
file	O
those	O
strings	O
are	O
not	O
interned	O
so	O
your	O
JVM	O
memory	O
contains	O
the	O
char	O
array	O
{	O
CharLiteral	O
,	O
CharLiteral	O
,	O
CharLiteral	O
,	O
CharLiteral	O
}	O
100	O
thousand	O
times	O
,	O
one	O
per	O
John	O
string	O
.	O
Each	O
of	O
these	O
arrays	O
takes	O
,	O
say	O
,	O
20	O
bytes	O
of	O
memory	O
so	O
those	O
100k	O
Johns	O
take	O
up	O
2	O
MB	O
of	O
memory	O
.	O
With	O
deduplication	O
,	O
the	O
JVM	O
will	O
realise	O
that	O
"	O
John	O
"	O
is	O
duplicated	O
many	O
times	O
and	O
make	O
all	O
those	O
John	O
strings	O
point	O
to	O
the	O
same	O
underlying	O
char	O
array	O
,	O
decreasing	O
the	O
memory	O
usage	O
from	O
2MB	O
to	O
20	O
bytes	O
.	O
You	O
can	O
find	O
a	O
more	O
detailed	O
explanation	O
in	O
the	O
JEP	O
.	O
In	O
particular	O
:	O
#	O
blockquote	O
Question	O
-	O
7935858	O
I	O
have	O
prepared	O
a	O
simple	O
code	O
snippet	O
in	O
order	O
to	O
separate	O
the	O
erroneous	O
portion	O
from	O
my	O
web	O
application	O
.	O
#	O
pre	O
I	O
have	O
tested	O
it	O
while	O
building	O
a	O
web	O
application	O
JSF	O
.	O
I	O
just	O
want	O
to	O
know	O
why	O
in	O
the	O
above	O
code	O
temp	O
.	O
split	O
(	O
args	O
)	O
does	O
not	O
work	O
.	O
The	O
statement	O
,	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
displays	O
nothing	O
on	O
the	O
console	O
means	O
that	O
it	O
doesn	O
'	O
t	O
go	O
through	O
the	O
loop	O
.	O
When	O
I	O
change	O
the	O
argument	O
of	O
the	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
other	O
characters	O
,	O
It	O
works	O
just	O
fine	O
as	O
usual	O
.	O
What	O
might	O
be	O
the	O
problem	O
?	O
Question	O
-	O
12862659	O
,	O
answer	O
-	O
12862662	O
use	O
the	O
second	O
argument	O
on	O
the	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
method	O
,	O
as	O
in	O
:	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
someMethod	O
(	O
args	O
)	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
7056786	O
It	O
'	O
s	O
because	O
when	O
you	O
enter	O
a	O
number	O
then	O
press	O
Enter	O
,	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
consumes	O
only	O
the	O
number	O
,	O
not	O
the	O
"	O
end	O
of	O
line	O
"	O
.	O
When	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
executes	O
,	O
it	O
consumes	O
the	O
"	O
end	O
of	O
line	O
"	O
still	O
in	O
the	O
buffer	O
from	O
the	O
first	O
input	O
.	O
Instead	O
,	O
use	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
immediately	O
after	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
31202946	O
,	O
answer	O
-	O
31203252	O
#	O
blockquote	O
This	O
question	O
actually	O
boils	O
down	O
to	O
the	O
fact	O
that	O
you	O
should	O
always	O
prefer	O
composition	O
over	O
inheritance	O
.	O
If	O
the	O
Thread	B-api_mention
class	O
was	O
declared	O
as	O
abstract	O
,	O
the	O
language	O
would	O
have	O
to	O
provide	O
another	O
class	O
that	O
extended	O
from	O
it	O
which	O
programmers	O
could	O
use	O
to	O
create	O
a	O
Thread	B-api_mention
.	O
Your	O
question	O
would	O
then	O
be	O
about	O
why	O
this	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
is	O
not	O
abstract	O
.	O
If	O
the	O
language	O
did	O
not	O
provide	O
another	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
,	O
programmers	O
would	O
have	O
to	O
create	O
their	O
own	O
class	O
that	O
extend	O
s	O
from	O
Thread	B-api_mention
and	O
override	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
blockquote	O
The	O
only	O
possible	O
explanation	O
I	O
can	O
give	O
is	O
that	O
the	O
developers	O
of	O
the	O
language	O
saw	O
some	O
use	O
-	O
cases	O
for	O
overriding	O
start	O
when	O
the	O
class	O
was	O
introduced	O
to	O
the	O
JDK	O
.	O
The	O
first	O
version	O
of	O
Java	O
that	O
I	O
used	O
was	O
1	O
.	O
5	O
and	O
I	O
personally	O
have	O
not	O
come	O
across	O
a	O
use	O
-	O
case	O
where	O
I	O
found	O
the	O
need	O
to	O
override	O
start	O
.	O
As	O
JB	O
Nizet	O
stated	O
in	O
his	O
answer	O
#	O
blockquote	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23526153	O
Everything	O
is	O
here	O
:	O
#	O
a	O
The	O
answer	O
with	O
"	O
round	O
-	O
tripping	O
"	O
is	O
not	O
exact	O
:	O
when	O
you	O
do	O
LocalDateTime	B-api_mention
ldt	O
=	O
LocalDateTime	B-api_mention
.	I-api_mention
ofInstant	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
if	O
your	O
system	O
timezone	O
is	O
not	O
UTC	O
/	O
GMT	O
,	O
you	O
change	O
the	O
time	O
!	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275761	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
defined	O
in	O
Object	B-api_mention
class	O
with	O
the	O
following	O
signature	O
:	O
#	O
blockquote	O
Since	O
it	O
is	O
not	O
defined	O
as	O
static	O
,	O
you	O
can	O
not	O
call	O
it	O
within	O
a	O
static	O
code	O
block	O
.	O
See	O
these	O
answers	O
for	O
more	O
information	O
:	O
Q1	O
,	O
Q2	O
,	O
Q3	O
.	O
If	O
you	O
'	O
re	O
in	O
a	O
static	O
context	O
,	O
then	O
you	O
have	O
to	O
use	O
the	O
class	O
literal	O
expression	O
to	O
get	O
the	O
Class	B-api_mention
,	O
so	O
you	O
basically	O
have	O
to	O
do	O
like	O
:	O
#	O
blockquote	O
This	O
type	O
of	O
expression	O
is	O
called	O
Class	B-api_mention
Literals	O
and	O
they	O
are	O
explained	O
in	O
Java	O
Language	O
Specification	O
Book	O
as	O
follows	O
:	O
#	O
blockquote	O
You	O
can	O
also	O
find	O
information	O
about	O
this	O
subject	O
on	O
API	O
documentation	O
for	O
Class	B-api_mention
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
31707746	O
One	O
of	O
most	O
upleasing	O
functional	O
forEach	B-api_mention
'	O
s	O
limitations	O
is	O
lack	O
of	O
checked	O
exceptions	O
support	O
.	O
One	O
possible	O
workaround	O
is	O
to	O
replace	O
terminal	O
forEach	B-api_mention
with	O
plain	O
old	O
foreach	O
loop	O
:	O
#	O
pre	O
Here	O
is	O
list	O
of	O
most	O
popular	O
questions	O
with	O
other	O
workarounds	O
on	O
checked	O
exception	O
handling	O
within	O
lambdas	O
and	O
streams	O
:	O
Java	O
8	O
Lambda	O
function	O
that	O
throws	O
exception	O
?	O
Java	O
8	O
:	O
Lambda	O
-	O
Streams	O
,	O
Filter	O
by	O
Method	O
with	O
Exception	B-api_mention
How	O
can	O
I	O
throw	O
CHECKED	O
exceptions	O
from	O
inside	O
Java	O
8	O
streams	O
?	O
Java	O
8	O
:	O
Mandatory	O
checked	O
exceptions	O
handling	O
in	O
lambda	O
expressions	O
.	O
Why	O
mandatory	O
,	O
not	O
optional	O
?	O
Question	O
-	O
21242110	O
,	O
answer	O
-	O
27378709	O
Better	O
way	O
is	O
:	O
#	O
pre	O
Advantages	O
of	O
this	O
version	O
:	O
#	O
li	O
works	O
regardless	O
the	O
input	O
is	O
an	O
instance	O
of	O
java	O
.	O
util	O
.	O
Date	O
or	O
it	O
'	O
s	O
subclass	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
(	O
unlike	O
@	O
JodaStephen	O
'	O
s	O
way	O
)	O
.	O
This	O
is	O
common	O
with	O
JDBC	O
originated	O
data	O
.	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
toInstant	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
throws	O
an	O
exception	O
.	O
#	O
li	O
it	O
'	O
s	O
the	O
same	O
for	O
JDK8	O
and	O
JDK7	O
with	O
JSR	O
-	O
310	O
backport	O
I	O
personally	O
use	O
an	O
utility	O
class	O
(	O
but	O
this	O
is	O
not	O
backport	O
-	O
compatible	O
)	O
:	O
#	O
pre	O
The	O
asLocalDate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
here	O
is	O
null	O
-	O
safe	O
,	O
uses	O
toLocalDate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
if	O
input	O
is	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
(	O
it	O
may	O
be	O
overriden	O
by	O
the	O
JDBC	O
driver	O
to	O
avoid	O
timezone	O
problems	O
or	O
unnecessary	O
calculations	O
)	O
,	O
otherwise	O
uses	O
the	O
abovementioned	O
method	O
.	O
Question	O
-	O
31922866	O
I	O
'	O
ve	O
read	O
on	O
many	O
Web	O
sites	O
Optional	B-api_mention
should	O
be	O
used	O
as	O
a	O
return	O
type	O
only	O
,	O
and	O
not	O
used	O
in	O
method	O
arguments	O
.	O
I	O
'	O
m	O
struggling	O
to	O
find	O
a	O
logical	O
reason	O
why	O
.	O
For	O
example	O
I	O
have	O
a	O
piece	O
of	O
logic	O
which	O
has	O
2	O
optional	O
parameters	O
.	O
Therefore	O
I	O
think	O
it	O
would	O
make	O
sense	O
to	O
write	O
my	O
method	O
signature	O
like	O
this	O
(	O
solution	O
1	O
)	O
:	O
#	O
pre	O
Many	O
web	O
pages	O
specify	O
Optional	B-api_mention
should	O
not	O
be	O
used	O
as	O
method	O
arguments	O
.	O
With	O
this	O
in	O
mind	O
I	O
could	O
use	O
the	O
following	O
method	O
signature	O
and	O
add	O
a	O
clear	O
Javadoc	O
comment	O
specifying	O
the	O
arguments	O
maybe	O
null	O
hoping	O
future	O
future	O
maintainers	O
will	O
read	O
the	O
javadoc	O
and	O
therefore	O
always	O
carry	O
out	O
null	O
checks	O
prior	O
to	O
using	O
the	O
arguments	O
(	O
solution	O
2	O
)	O
:	O
#	O
pre	O
Alternatively	O
I	O
could	O
replace	O
my	O
method	O
with	O
4	O
public	O
methods	O
to	O
provide	O
a	O
nicer	O
interface	O
and	O
make	O
it	O
more	O
obvious	O
p1	O
and	O
p2	O
are	O
optional	O
(	O
solution	O
3	O
)	O
:	O
#	O
pre	O
Now	O
I	O
try	O
writing	O
the	O
code	O
of	O
the	O
class	O
which	O
invokes	O
this	O
piece	O
of	O
logic	O
for	O
each	O
approach	O
.	O
I	O
first	O
retrieve	O
the	O
2	O
input	O
parameters	O
from	O
another	O
object	O
which	O
returns	O
optionals	O
and	O
then	O
I	O
invoke	O
calculateSomething	O
.	O
Therefore	O
if	O
solution	O
1	O
is	O
used	O
the	O
calling	O
code	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
if	O
solution	O
2	O
is	O
used	O
the	O
calling	O
code	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
if	O
solution	O
3	O
is	O
used	O
I	O
could	O
use	O
the	O
code	O
above	O
or	O
I	O
could	O
use	O
the	O
following	O
(	O
but	O
its	O
a	O
significant	O
amount	O
more	O
code	O
)	O
:	O
#	O
pre	O
So	O
my	O
question	O
is	O
why	O
is	O
it	O
considered	O
bad	O
practice	O
to	O
use	O
Optionals	O
as	O
method	O
arguments	O
as	O
in	O
solution	O
1	O
?	O
It	O
looks	O
like	O
the	O
most	O
readable	O
solution	O
to	O
me	O
and	O
makes	O
it	O
most	O
obvious	O
that	O
the	O
parameters	O
could	O
be	O
empty	O
/	O
null	O
to	O
future	O
maintainers	O
.	O
(	O
I	O
'	O
m	O
aware	O
the	O
designers	O
of	O
Optional	B-api_mention
intended	O
it	O
to	O
only	O
be	O
used	O
as	O
a	O
return	O
type	O
,	O
but	O
I	O
can	O
'	O
t	O
find	O
any	O
logical	O
reasons	O
not	O
to	O
use	O
it	O
in	O
this	O
scenario	O
)	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31190722	O
We	O
can	O
draw	O
a	O
parallel	O
with	O
abstract	O
class	O
.	O
An	O
abstract	O
class	O
is	O
intended	O
to	O
be	O
subclassed	O
so	O
that	O
the	O
abstract	O
methods	O
can	O
be	O
implemented	O
.	O
The	O
abstract	O
class	O
itself	O
contains	O
concrete	O
methods	O
that	O
invoke	O
the	O
abstract	O
methods	O
.	O
The	O
abstract	O
class	O
is	O
free	O
to	O
evolve	O
by	O
adding	O
more	O
concrete	O
methods	O
;	O
and	O
this	O
practice	O
may	O
break	O
subclasses	O
.	O
Therefore	O
the	O
exact	O
problem	O
you	O
described	O
existed	O
even	O
before	O
Java8	O
.	O
The	O
problem	O
is	O
much	O
more	O
manifested	O
on	O
Collection	B-api_mention
APIs	O
because	O
there	O
are	O
a	O
lot	O
of	O
subclasses	O
out	O
in	O
the	O
wild	O
.	O
While	O
the	O
leading	O
motivation	O
of	O
default	O
method	O
was	O
to	O
add	O
some	O
useful	O
methods	O
to	O
existing	O
Collection	B-api_mention
APIs	O
without	O
breaking	O
subclasses	O
,	O
they	O
had	O
to	O
exercise	O
great	O
self	O
-	O
control	O
of	O
doing	O
it	O
too	O
much	O
,	O
for	O
fear	O
of	O
breaking	O
subclasses	O
.	O
A	O
default	O
method	O
is	O
added	O
only	O
if	O
it	O
'	O
s	O
absolutely	O
necessary	O
.	O
The	O
real	O
question	O
here	O
is	O
,	O
why	O
List	B-api_mention
.	I-api_mention
sort	I-api_mention
is	O
considered	O
absolutely	O
necessary	O
.	O
I	O
think	O
that	O
is	O
debatable	O
.	O
Regardless	O
of	O
why	O
default	O
method	O
was	O
introduced	O
in	O
the	O
1st	O
place	O
,	O
it	O
is	O
now	O
a	O
great	O
tool	O
for	O
API	O
designers	O
,	O
and	O
we	O
ought	O
to	O
treat	O
it	O
the	O
same	O
as	O
concrete	O
methods	O
in	O
abstract	O
classes	O
-	O
they	O
need	O
to	O
be	O
designed	O
carefully	O
up	O
front	O
;	O
and	O
new	O
ones	O
must	O
be	O
introduced	O
with	O
great	O
caution	O
.	O
Question	O
-	O
7707556	O
,	O
answer	O
-	O
15870428	O
There	O
is	O
a	O
subtle	O
issue	O
here	O
that	O
is	O
a	O
bit	O
of	O
a	O
gotcha	O
.	O
The	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
a	O
base	O
implementation	O
in	O
Object	B-api_mention
.	O
CharSequence	B-api_mention
is	O
an	O
interface	O
;	O
and	O
although	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
appears	O
as	O
part	O
of	O
that	O
interface	O
,	O
there	O
is	O
nothing	O
at	O
compile	O
-	O
time	O
that	O
will	O
force	O
you	O
to	O
override	O
it	O
and	O
honor	O
the	O
additional	O
constraints	O
that	O
the	O
CharSequence	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
'	O
s	O
javadoc	O
puts	O
on	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
;	O
ie	O
that	O
it	O
should	O
return	O
a	O
string	O
containing	O
the	O
characters	O
in	O
the	O
order	O
returned	O
by	O
charAt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Your	O
IDE	O
won	O
'	O
t	O
even	O
help	O
you	O
out	O
by	O
reminding	O
that	O
you	O
that	O
you	O
probably	O
should	O
override	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
For	O
example	O
,	O
in	O
intellij	O
,	O
this	O
is	O
what	O
you	O
'	O
ll	O
see	O
if	O
you	O
create	O
a	O
new	O
CharSequence	B-api_mention
implementation	O
:	O
#	O
a	O
.	O
Note	O
the	O
absence	O
of	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
.	O
If	O
you	O
rely	O
on	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
on	O
an	O
arbitrary	O
CharSequence	B-api_mention
,	O
it	O
should	O
work	O
provided	O
the	O
CharSequence	B-api_mention
implementer	O
did	O
their	O
job	O
properly	O
.	O
But	O
if	O
you	O
want	O
to	O
avoid	O
any	O
uncertainty	O
altogether	O
,	O
you	O
should	O
use	O
a	O
StringBuilder	B-api_mention
and	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
like	O
so	O
:	O
#	O
pre	O
Question	O
-	O
12552863	O
The	O
Java	O
7	O
try	O
-	O
with	O
-	O
resources	O
syntax	O
(	O
also	O
known	O
as	O
ARM	O
block	O
(	O
Automatic	O
Resource	O
Management	O
)	O
)	O
is	O
nice	O
,	O
short	O
and	O
straightforward	O
when	O
using	O
only	O
one	O
AutoCloseable	B-api_mention
resource	O
.	O
However	O
,	O
I	O
am	O
not	O
sure	O
what	O
is	O
the	O
correct	O
idiom	O
when	O
I	O
need	O
to	O
declare	O
multiple	O
resources	O
that	O
are	O
dependent	O
on	O
each	O
other	O
,	O
for	O
example	O
a	O
FileWriter	B-api_mention
and	O
a	O
BufferedWriter	B-api_mention
that	O
wraps	O
it	O
.	O
Of	O
course	O
,	O
this	O
question	O
concerns	O
any	O
case	O
when	O
some	O
AutoCloseable	B-api_mention
resources	O
are	O
wrapped	O
,	O
not	O
only	O
these	O
two	O
specific	O
classes	O
.	O
I	O
came	O
up	O
with	O
the	O
three	O
following	O
alternatives	O
:	O
1	O
)	O
The	O
naive	O
idiom	O
I	O
have	O
seen	O
is	O
to	O
declare	O
only	O
the	O
top	O
-	O
level	O
wrapper	O
in	O
the	O
ARM	O
-	O
managed	O
variable	O
:	O
#	O
pre	O
This	O
is	O
nice	O
and	O
short	O
,	O
but	O
it	O
is	O
broken	O
.	O
Because	O
the	O
underlying	O
FileWriter	B-api_mention
is	O
not	O
declared	O
in	O
a	O
variable	O
,	O
it	O
will	O
never	O
be	O
closed	O
directly	O
in	O
the	O
generated	O
finally	O
block	O
.	O
It	O
will	O
be	O
closed	O
only	O
through	O
the	O
close	O
method	O
of	O
the	O
wrapping	O
BufferedWriter	B-api_mention
.	O
The	O
problem	O
is	O
,	O
that	O
if	O
an	O
exception	O
is	O
thrown	O
from	O
the	O
bw	O
'	O
s	O
constructor	O
,	O
it	O
'	O
s	O
close	B-api_mention
will	O
not	O
be	O
called	O
and	O
therefore	O
the	O
underlying	O
FileWriter	B-api_mention
will	O
not	O
be	O
closed	O
.	O
2	O
)	O
#	O
pre	O
Here	O
,	O
both	O
the	O
underlying	O
and	O
the	O
wrapping	O
resource	O
are	O
declared	O
in	O
the	O
ARM	O
-	O
managed	O
variables	O
,	O
so	O
both	O
of	O
them	O
will	O
be	O
certainly	O
closed	O
,	O
so	O
certainly	O
that	O
the	O
underlying	O
fw	O
.	B-api_mention
close	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
called	O
twice	O
,	O
first	O
directly	O
and	O
for	O
the	O
second	O
time	O
through	O
the	O
wrapping	O
bw	O
.	B-api_mention
close	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
should	O
not	O
be	O
a	O
problem	O
for	O
these	O
two	O
specific	O
classes	O
that	O
both	O
implement	O
Closeable	B-api_mention
(	O
which	O
is	O
a	O
subtype	O
of	O
AutoCloseable	B-api_mention
)	O
,	O
whose	O
contract	O
states	O
that	O
multiple	O
calls	O
to	O
close	O
are	O
permitted	O
:	O
#	O
blockquote	O
However	O
,	O
in	O
a	O
general	O
case	O
,	O
I	O
can	O
have	O
resources	O
that	O
do	O
implement	O
only	O
AutoCloseable	B-api_mention
(	O
and	O
not	O
Closeable	B-api_mention
)	O
,	O
which	O
doesn	O
'	O
t	O
guarantee	O
that	O
the	O
close	B-api_mention
can	O
be	O
called	O
multiple	O
times	O
:	O
#	O
blockquote	O
3	O
)	O
#	O
pre	O
This	O
version	O
should	O
be	O
theoretically	O
correct	O
,	O
because	O
only	O
the	O
fw	O
represents	O
a	O
real	O
resource	O
that	O
needs	O
to	O
be	O
cleaned	O
up	O
.	O
The	O
bw	O
does	O
'	O
t	O
itself	O
hold	O
any	O
resource	O
,	O
it	O
only	O
delegates	O
to	O
the	O
fw	O
,	O
so	O
it	O
should	O
be	O
sufficient	O
to	O
only	O
close	O
the	O
underlying	O
fw	O
.	O
On	O
the	O
other	O
hand	O
,	O
the	O
syntax	O
is	O
a	O
bit	O
irregular	O
and	O
also	O
,	O
Eclipse	O
issues	O
a	O
warning	O
,	O
which	O
I	O
believe	O
is	O
a	O
false	O
alarm	O
,	O
but	O
it	O
is	O
still	O
a	O
warning	O
that	O
one	O
has	O
to	O
deal	O
with	O
:	O
#	O
blockquote	O
So	O
,	O
which	O
approach	O
to	O
go	O
for	O
?	O
Or	O
have	O
I	O
missed	O
some	O
other	O
idiom	O
that	O
is	O
the	O
correct	O
one	O
?	O
Question	O
-	O
5031614	O
There	O
have	O
been	O
some	O
discussions	O
here	O
about	O
JPA	O
entities	O
and	O
which	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
implementation	O
should	O
be	O
used	O
for	O
JPA	O
entity	O
classes	O
.	O
Most	O
(	O
if	O
not	O
all	O
)	O
of	O
them	O
depend	O
on	O
Hibernate	O
,	O
but	O
I	O
'	O
d	O
like	O
to	O
discuss	O
them	O
JPA	O
-	O
implementation	O
-	O
neutrally	O
(	O
I	O
am	O
using	O
EclipseLink	O
,	O
by	O
the	O
way	O
)	O
.	O
All	O
possible	O
implementations	O
are	O
having	O
their	O
own	O
advantages	O
and	O
disadvantages	O
regarding	O
:	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
contract	O
conformity	O
(	O
immutability	O
)	O
for	O
List	O
/	O
Set	O
operations	O
#	O
li	O
Whether	O
identical	O
objects	O
(	O
e	O
.	O
g	O
.	O
from	O
different	O
sessions	O
,	O
dynamic	O
proxies	O
from	O
lazily	O
-	O
loaded	O
data	O
structures	O
)	O
can	O
be	O
detected	O
#	O
li	O
Whether	O
entities	O
behave	O
correctly	O
in	O
detached	O
(	O
or	O
non	O
-	O
persisted	O
)	O
state	O
As	O
far	O
I	O
can	O
see	O
,	O
there	O
are	O
three	O
options	O
:	O
#	O
li	O
Do	O
not	O
override	O
them	O
;	O
rely	O
on	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Object	B-api_mention
.	I-api_mention
hashCode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
work	O
#	O
li	O
cannot	O
identify	O
identical	O
objects	O
,	O
problems	O
with	O
dynamic	O
proxies	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
primary	O
key	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
Business	O
-	O
Id	O
(	O
non	O
-	O
primary	O
key	O
fields	O
;	O
what	O
about	O
foreign	O
keys	O
?	O
)	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
My	O
questions	O
are	O
:	O
#	O
li	O
Did	O
I	O
miss	O
an	O
option	O
and	O
/	O
or	O
pro	O
/	O
con	O
point	O
?	O
#	O
li	O
What	O
option	O
did	O
you	O
choose	O
and	O
why	O
?	O
UPDATE	O
1	O
:	O
By	O
"	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
"	O
,	O
I	O
mean	O
that	O
successive	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invocations	O
may	O
return	O
differing	O
values	O
,	O
which	O
is	O
(	O
when	O
correctly	O
implemented	O
)	O
not	O
broken	O
in	O
the	O
sense	O
of	O
the	O
Object	O
API	O
documentation	O
,	O
but	O
which	O
causes	O
problems	O
when	O
trying	O
to	O
retrieve	O
a	O
changed	O
entity	O
from	O
a	O
Map	O
,	O
Set	O
or	O
other	O
hash	O
-	O
based	O
Collection	O
.	O
Consequently	O
,	O
JPA	O
implementations	O
(	O
at	O
least	O
EclipseLink	O
)	O
will	O
not	O
work	O
correctly	O
in	O
some	O
cases	O
.	O
UPDATE	O
2	O
:	O
Thank	O
you	O
for	O
your	O
answers	O
-	O
-	O
most	O
of	O
them	O
have	O
remarkable	O
quality	O
.	O
Unfortunately	O
,	O
I	O
am	O
still	O
unsure	O
which	O
approach	O
will	O
be	O
the	O
best	O
for	O
a	O
real	O
-	O
life	O
application	O
,	O
or	O
how	O
to	O
determine	O
the	O
best	O
approach	O
for	O
my	O
application	O
.	O
So	O
,	O
I	O
'	O
ll	O
keep	O
the	O
question	O
open	O
and	O
hope	O
for	O
some	O
more	O
discussions	O
and	O
/	O
or	O
opinions	O
.	O
Question	O
-	O
32693704	O
I	O
noticed	O
something	O
strange	O
in	O
the	O
implementation	O
of	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
how	O
it	O
looked	O
in	O
OpenJDK	O
7u40	O
:	O
#	O
pre	O
And	O
this	O
is	O
how	O
it	O
looks	O
as	O
of	O
OpenJDK	O
8u40	O
:	O
#	O
pre	O
I	O
understand	O
that	O
now	O
the	O
table	O
can	O
be	O
null	O
for	O
empty	O
an	O
map	O
,	O
thus	O
the	O
additional	O
check	O
and	O
caching	O
in	O
a	O
local	O
variable	O
is	O
required	O
.	O
But	O
why	O
was	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
replaced	O
with	O
a	O
for	O
-	O
loop	O
?	O
It	O
seems	O
that	O
the	O
change	O
was	O
introduced	O
in	O
this	O
commit	O
.	O
Unfortunately	O
I	O
found	O
no	O
explanation	O
for	O
why	O
a	O
plain	O
for	O
loop	O
might	O
be	O
better	O
than	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Is	O
it	O
faster	O
?	O
Or	O
safer	O
?	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
5585800	O
int	O
foo	O
=	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
See	O
the	O
Java	O
Documentation	O
for	O
more	O
information	O
.	O
(	O
If	O
you	O
have	O
it	O
in	O
a	O
StringBuilder	B-api_mention
(	O
or	O
the	O
ancient	O
StringBuffer	B-api_mention
)	O
,	O
you	O
'	O
ll	O
need	O
to	O
do	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
)	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
33233407	O
We	O
can	O
use	O
the	O
parseInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
Integer	B-api_mention
wrapper	O
class	O
for	O
converting	O
a	O
String	B-api_mention
value	O
to	O
an	O
integer	O
value	O
.	O
For	O
example	O
:	O
#	O
pre	O
The	O
Integer	B-api_mention
class	O
also	O
provides	O
the	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
We	O
can	O
also	O
use	O
toInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
of	O
NumberUtils	B-api_mention
Utility	O
Class	O
for	O
the	O
conversion	O
:	O
#	O
pre	O
Question	O
-	O
32323081	O
I	O
have	O
a	O
question	O
regarding	O
Java	O
8	O
inference	O
with	O
respect	O
to	O
lambdas	O
and	O
their	O
related	O
exception	O
signatures	O
.	O
If	O
I	O
define	O
some	O
method	O
foo	O
:	O
#	O
pre	O
then	O
I	O
get	O
the	O
nice	O
and	O
concise	O
semantic	O
of	O
being	O
able	O
to	O
write	O
foo	O
(	O
args	O
)	O
;	O
in	O
most	O
cases	O
for	O
a	O
given	O
T	O
.	O
However	O
,	O
in	O
this	O
example	O
,	O
if	O
my	O
getTheT	O
operation	O
declares	O
that	O
it	O
throws	O
Exception	O
,	O
my	O
foo	O
method	O
which	O
takes	O
a	O
Supplier	B-api_mention
no	O
longer	O
compiles	O
:	O
the	O
Supplier	B-api_mention
method	O
signature	O
for	O
get	O
doesn	O
'	O
t	O
throw	O
exceptions	O
.	O
It	O
seems	O
like	O
a	O
decent	O
way	O
to	O
get	O
around	O
this	O
would	O
be	O
to	O
overload	O
foo	O
to	O
accept	O
either	O
option	O
,	O
with	O
the	O
overloaded	O
definition	O
being	O
:	O
#	O
pre	O
where	O
ThrowingSupplier	O
is	O
defined	O
as	O
#	O
pre	O
In	O
this	O
way	O
,	O
we	O
have	O
one	O
Supplier	B-api_mention
type	O
which	O
throws	O
exceptions	O
and	O
one	O
which	O
doesn	O
'	O
t	O
.	O
The	O
desired	O
syntax	O
would	O
be	O
something	O
like	O
this	O
:	O
#	O
pre	O
However	O
,	O
this	O
causes	O
issues	O
due	O
to	O
the	O
lambda	O
type	O
being	O
ambiguous	O
(	O
presumably	O
unable	O
to	O
resolve	O
between	O
Supplier	B-api_mention
and	O
ThrowingSupplier	O
)	O
.	O
Doing	O
an	O
explicit	O
cast	O
a	O
la	O
foo	O
(	O
args	O
)	O
;	O
would	O
work	O
,	O
but	O
it	O
gets	O
rid	O
of	O
most	O
of	O
the	O
conciseness	O
of	O
the	O
desired	O
syntax	O
.	O
I	O
guess	O
the	O
underlying	O
question	O
is	O
:	O
if	O
the	O
Java	O
compiler	O
is	O
able	O
to	O
resolve	O
the	O
fact	O
that	O
one	O
of	O
my	O
lambdas	O
is	O
incompatible	O
due	O
to	O
it	O
throwing	O
an	O
exception	O
in	O
the	O
Supplier	O
-	O
only	O
case	O
,	O
why	O
isn	O
'	O
t	O
it	O
able	O
to	O
use	O
that	O
same	O
information	O
to	O
derive	O
the	O
type	O
of	O
the	O
lambda	O
in	O
the	O
secondary	O
,	O
type	O
-	O
inference	O
case	O
?	O
Any	O
information	O
or	O
resources	O
which	O
anyone	O
could	O
point	O
me	O
to	O
would	O
likewise	O
be	O
much	O
appreciated	O
,	O
as	O
I	O
'	O
m	O
just	O
not	O
too	O
sure	O
where	O
to	O
look	O
for	O
more	O
information	O
on	O
the	O
matter	O
.	O
Thanks	O
!	O
Question	O
-	O
30125296	O
,	O
answer	O
-	O
35035659	O
You	O
can	O
use	O
reduce	O
method	O
:	O
long	O
creditAmountSum	O
=	O
result	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173658	O
If	O
you	O
want	O
to	O
stop	O
either	O
if	O
number	O
5	O
is	O
reached	O
or	O
10	O
elements	O
are	O
collected	O
,	O
there	O
'	O
s	O
Stream	B-api_mention
.	I-api_mention
takeWhile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
added	O
in	O
Java	O
-	O
9	O
:	O
#	O
pre	O
Question	O
-	O
8189466	O
,	O
answer	O
-	O
8189786	O
Here	O
'	O
s	O
why	O
:	O
As	O
it	O
is	O
says	O
in	O
the	O
Javadoc	O
:	O
#	O
blockquote	O
This	O
check	O
is	O
done	O
in	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
iterator	O
(	O
as	O
you	O
can	O
see	O
by	O
the	O
stacktrace	O
)	O
.	O
But	O
we	O
will	O
reach	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
only	O
if	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
delivered	O
true	O
,	O
which	O
is	O
what	O
is	O
called	O
by	O
the	O
for	O
each	O
to	O
check	O
if	O
the	O
boundary	O
is	O
met	O
.	O
In	O
your	O
remove	O
method	O
,	O
when	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
checks	O
if	O
it	O
needs	O
to	O
return	O
another	O
element	O
,	O
it	O
will	O
see	O
that	O
it	O
returned	O
two	O
elements	O
,	O
and	O
now	O
after	O
one	O
element	O
was	O
removed	O
the	O
list	O
only	O
contains	O
two	O
elements	O
.	O
So	O
all	O
is	O
peachy	O
and	O
we	O
are	O
done	O
with	O
iterating	O
.	O
The	O
check	O
for	O
concurrent	O
modifications	O
does	O
not	O
occur	O
,	O
as	O
this	O
is	O
done	O
in	O
the	O
next	O
(	O
args	O
)	O
method	O
which	O
is	O
never	O
called	O
.	O
Next	O
we	O
get	O
to	O
the	O
second	O
loop	O
.	O
After	O
we	O
remove	O
the	O
second	O
number	O
the	O
hasNext	B-api_mention
method	O
will	O
check	O
again	O
if	O
can	O
return	O
more	O
values	O
.	O
It	O
has	O
returned	O
two	O
values	O
already	O
,	O
but	O
the	O
list	O
now	O
only	O
contains	O
one	O
.	O
But	O
the	O
code	O
here	O
is	O
:	O
#	O
pre	O
1	O
!	O
=	O
2	O
,	O
so	O
we	O
continue	O
to	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
now	O
realizes	O
that	O
someone	O
has	O
been	O
messing	O
with	O
the	O
list	O
and	O
fires	O
the	O
exception	O
.	O
Hope	O
that	O
clears	O
your	O
question	O
up	O
.	O
Question	O
-	O
19757300	O
,	O
answer	O
-	O
19759653	O
You	O
can	O
also	O
propagate	O
your	O
static	O
pain	O
with	O
lambdas	O
,	O
so	O
the	O
whole	O
thing	O
looks	O
readable	O
:	O
s	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
propagate	O
here	O
receives	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
concurrent	I-api_mention
.	I-api_mention
Callable	I-api_mention
as	O
a	O
parameter	O
and	O
converts	O
any	O
exception	O
caught	O
during	O
the	O
call	O
into	O
RuntimeException	B-api_mention
.	O
There	O
is	O
a	O
similar	O
conversion	O
method	O
Throwables	B-api_mention
#	I-api_mention
propagate	I-api_mention
(	I-api_mention
Throwable	I-api_mention
)	I-api_mention
in	O
Guava	O
.	O
This	O
method	O
seems	O
being	O
essential	O
for	O
lambda	O
method	O
chaining	O
,	O
so	O
I	O
hope	O
one	O
day	O
it	O
will	O
be	O
added	O
to	O
one	O
of	O
the	O
popular	O
libs	O
or	O
this	O
propagating	O
behavior	O
would	O
be	O
by	O
default	O
.	O
#	O
pre	O
Question	O
-	O
10066590	O
With	O
Mockito	O
,	O
I	O
want	O
to	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
a	O
method	O
call	O
with	O
byte	O
[	O
]	O
in	O
its	O
argument	O
list	O
,	O
but	O
I	O
didn	O
'	O
t	O
find	O
how	O
to	O
write	O
this	O
.	O
myMethod	O
(	O
args	O
)	O
I	O
just	O
want	O
something	O
like	O
anyByteArray	O
(	O
args	O
)	O
,	O
how	O
to	O
do	O
that	O
with	O
Mockito	O
?	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684822	O
You	O
can	O
'	O
t	O
just	O
take	O
the	O
returned	O
string	O
and	O
construct	O
a	O
string	O
from	O
it	O
.	O
.	O
.	O
it	O
'	O
s	O
not	O
a	O
byte	O
[	O
]	O
data	O
type	O
anymore	O
,	O
it	O
'	O
s	O
already	O
a	O
string	O
;	O
you	O
need	O
to	O
parse	O
it	O
.	O
For	O
example	O
:	O
#	O
pre	O
*	O
*	O
EDIT	O
*	O
*	O
You	O
get	O
an	O
hint	O
of	O
your	O
problem	O
in	O
your	O
question	O
,	O
where	O
you	O
say	O
"	O
Whatever	O
I	O
seem	O
to	O
try	O
I	O
end	O
up	O
getting	O
a	O
byte	O
array	O
which	O
looks	O
as	O
follows	O
.	O
.	O
.	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
"	O
,	O
because	O
91	O
is	O
the	O
byte	O
value	O
for	O
[	O
,	O
so	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
is	O
the	O
byte	O
array	O
of	O
the	O
string	O
"	O
[	O
-	O
45	O
,	O
1	O
,	O
16	O
,	O
.	O
.	O
.	O
"	O
string	O
.	O
The	O
method	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
a	O
String	B-api_mention
representation	O
of	O
the	O
specified	O
array	O
;	O
meaning	O
that	O
the	O
returned	O
value	O
will	O
not	O
be	O
a	O
array	O
anymore	O
.	O
For	O
example	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
s1	O
holds	O
the	O
string	O
representation	O
of	O
the	O
array	O
b1	O
,	O
while	O
s2	O
holds	O
the	O
string	O
representation	O
of	O
the	O
bytes	O
contained	O
in	O
b1	O
.	O
Now	O
,	O
in	O
your	O
problem	O
,	O
your	O
server	O
returns	O
a	O
string	O
similar	O
to	O
s1	O
,	O
therefore	O
to	O
get	O
the	O
array	O
representation	O
back	O
,	O
you	O
need	O
the	O
opposite	O
constructor	O
method	O
.	O
If	O
s2	O
.	B-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
opposite	O
of	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
need	O
to	O
find	O
the	O
opposite	O
of	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
thus	O
the	O
code	O
I	O
pasted	O
in	O
the	O
first	O
snippet	O
of	O
this	O
answer	O
.	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32357149	O
Disclaimer	O
:	O
I	O
am	O
not	O
a	O
JDK	O
author	O
.	O
I	O
agree	O
that	O
it	O
'	O
s	O
correct	O
to	O
write	O
your	O
own	O
code	O
to	O
interfaces	O
,	O
but	O
if	O
you	O
'	O
re	O
going	O
return	O
a	O
mutable	O
collection	O
to	O
a	O
third	O
party	O
,	O
it	O
'	O
s	O
important	O
to	O
let	O
the	O
third	O
party	O
know	O
what	O
sort	O
of	O
List	B-api_mention
they	O
'	O
re	O
getting	O
back	O
.	O
LinkedList	B-api_mention
and	O
ArrayList	B-api_mention
are	O
very	O
different	O
,	O
performance	O
wise	O
,	O
for	O
various	O
operations	O
.	O
For	O
example	O
,	O
removing	O
the	O
first	O
element	O
of	O
an	O
ArrayList	B-api_mention
is	O
O	O
(	O
args	O
)	O
,	O
but	O
removing	O
the	O
first	O
element	O
of	O
a	O
LinkedList	B-api_mention
is	O
O	O
(	O
args	O
)	O
.	O
By	O
fully	O
specifying	O
the	O
return	O
type	O
,	O
the	O
JDK	O
authors	O
are	O
communicating	O
extra	O
information	O
,	O
in	O
unambiguous	O
code	O
,	O
about	O
what	O
sort	O
of	O
object	O
they	O
'	O
re	O
giving	O
back	O
to	O
you	O
,	O
so	O
you	O
can	O
write	O
your	O
code	O
to	O
use	O
this	O
method	O
properly	O
.	O
If	O
you	O
really	O
need	O
a	O
LinkedList	B-api_mention
,	O
you	O
know	O
that	O
you	O
have	O
to	O
specify	O
one	O
here	O
.	O
Finally	O
,	O
the	O
main	O
reason	O
to	O
code	O
to	O
an	O
interface	O
over	O
an	O
implementation	O
is	O
if	O
you	O
think	O
that	O
the	O
implementation	O
will	O
change	O
.	O
The	O
JDK	O
authors	O
probably	O
figure	O
they	O
are	O
never	O
going	O
to	O
change	O
this	O
method	O
;	O
it	O
'	O
s	O
never	O
going	O
to	O
return	O
a	O
LinkedList	B-api_mention
or	O
a	O
Collections	B-api_mention
.	I-api_mention
UnmodifiableList	I-api_mention
.	O
However	O
,	O
in	O
most	O
cases	O
,	O
you	O
would	O
probably	O
still	O
do	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
29095967	O
I	O
have	O
this	O
list	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
:	O
[	O
StringLiteral	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
StringLiteral	O
]	O
And	O
I	O
'	O
d	O
like	O
something	O
like	O
this	O
:	O
[	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
]	O
In	O
other	O
words	O
I	O
want	O
to	O
split	O
my	O
list	O
in	O
sublists	O
using	O
the	O
null	O
value	O
as	O
separator	O
,	O
in	O
order	O
to	O
obtain	O
a	O
list	O
of	O
lists	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
.	O
I	O
'	O
m	O
looking	O
for	O
a	O
Java	O
8	O
solution	O
.	O
I	O
'	O
ve	O
tried	O
with	O
Collectors	B-api_mention
.	I-api_mention
partitioningBy	I-api_mention
but	O
I	O
'	O
m	O
not	O
sure	O
it	O
is	O
what	O
I	O
'	O
m	O
looking	O
for	O
.	O
Thanks	O
!	O
Question	O
-	O
12468764	O
,	O
answer	O
-	O
24537575	O
I	O
'	O
ve	O
found	O
a	O
very	O
nice	O
and	O
concise	O
solution	O
,	O
especially	O
useful	O
when	O
you	O
cannot	O
modify	O
enum	O
classes	O
as	O
it	O
was	O
in	O
my	O
case	O
.	O
Then	O
you	O
should	O
provide	O
a	O
custom	O
ObjectMapper	B-api_mention
with	O
a	O
certain	O
feature	O
enabled	O
.	O
Those	O
features	O
are	O
available	O
since	O
Jackson	O
1	O
.	O
6	O
.	O
So	O
you	O
only	O
need	O
to	O
write	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
your	O
enum	O
.	O
#	O
pre	O
There	O
are	O
more	O
enum	O
-	O
related	O
features	O
available	O
,	O
see	O
here	O
:	O
#	O
a	O
#	O
a	O
Question	O
-	O
31370403	O
I	O
'	O
m	O
currently	O
in	O
the	O
process	O
of	O
writing	O
a	O
paint	O
program	O
in	O
java	O
,	O
designed	O
to	O
have	O
flexible	O
and	O
comprehensive	O
functionalities	O
.	O
It	O
stemmed	O
from	O
my	O
final	O
project	O
,	O
that	O
I	O
wrote	O
overnight	O
the	O
day	O
before	O
.	O
Because	O
of	O
that	O
,	O
it	O
'	O
s	O
got	O
tons	O
and	O
tons	O
of	O
bugs	O
,	O
which	O
I	O
'	O
ve	O
been	O
tackling	O
one	O
by	O
one	O
(	O
e	O
.	O
g	O
.	O
I	O
can	O
only	O
save	O
files	O
that	O
will	O
be	O
empty	O
,	O
my	O
rectangles	O
don	O
'	O
t	O
draw	O
right	O
but	O
my	O
circles	O
do	O
.	O
.	O
.	O
)	O
.	O
This	O
time	O
,	O
I	O
'	O
ve	O
been	O
trying	O
to	O
add	O
undo	O
/	O
redo	O
functionality	O
to	O
my	O
program	O
.	O
However	O
,	O
I	O
can	O
'	O
t	O
"	O
undo	O
"	O
something	O
that	O
I	O
have	O
done	O
.	O
Therefore	O
,	O
I	O
got	O
an	O
idea	O
to	O
save	O
copies	O
of	O
my	O
BufferedImage	O
each	O
time	O
a	O
mouseReleased	O
event	O
was	O
fired	O
.	O
However	O
,	O
with	O
some	O
of	O
the	O
images	O
going	O
to	O
1920x1080	O
resolution	O
,	O
I	O
figured	O
that	O
this	O
wouldn	O
'	O
t	O
be	O
efficient	O
:	O
storing	O
them	O
would	O
probably	O
take	O
gigabytes	O
of	O
memory	O
.	O
The	O
reason	O
for	O
why	O
I	O
can	O
'	O
t	O
simply	O
paint	O
the	O
same	O
thing	O
with	O
the	O
background	O
colour	O
to	O
undo	O
is	O
because	O
I	O
have	O
many	O
different	O
brushes	O
,	O
which	O
paint	O
based	O
on	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
because	O
there	O
are	O
many	O
different	O
layers	O
(	O
in	O
a	O
single	O
layer	O
)	O
.	O
Then	O
,	O
I	O
'	O
ve	O
considered	O
cloning	O
the	O
Graphics	O
objects	O
that	O
I	O
use	O
to	O
paint	O
to	O
the	O
BufferedImage	O
.	O
Like	O
this	O
:	O
#	O
pre	O
I	O
haven	O
'	O
t	O
done	O
this	O
before	O
,	O
so	O
I	O
have	O
a	O
couple	O
questions	O
:	O
#	O
li	O
Would	O
I	O
still	O
be	O
wasting	O
pointless	O
memory	O
by	O
doing	O
this	O
,	O
like	O
cloning	O
my	O
BufferedImages	O
?	O
#	O
li	O
Is	O
there	O
necessarily	O
a	O
different	O
way	O
I	O
can	O
do	O
this	O
?	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032144	O
The	O
source	O
code	O
for	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
The	O
source	O
code	O
for	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
As	O
defined	O
in	O
AbstractCollection	B-api_mention
)	O
:	O
#	O
pre	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
much	O
faster	O
since	O
it	O
doesn	O
'	O
t	O
have	O
to	O
deal	O
with	O
all	O
those	O
extra	O
method	O
calls	O
.	O
And	O
as	O
Atrey	O
points	O
out	O
,	O
c	O
.	B-api_mention
contains	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
increases	O
the	O
time	O
complexity	O
of	O
removeAll	B-api_mention
to	O
O	O
(	O
n	O
^	O
2	O
)	O
as	O
opposed	O
to	O
clear	O
'	O
s	O
O	O
(	O
n	O
)	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777312	O
Arrays	O
inherit	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
Object	O
and	O
hence	O
compare	O
only	O
returns	O
true	O
if	O
comparing	O
an	O
array	O
against	O
itself	O
.	O
On	O
the	O
other	O
hand	O
,	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
compares	O
the	O
elements	O
of	O
the	O
arrays	O
.	O
This	O
snippet	O
elucidates	O
the	O
difference	O
:	O
#	O
pre	O
See	O
also	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Another	O
static	O
method	O
there	O
may	O
also	O
be	O
of	O
interest	O
:	O
Arrays	B-api_mention
.	I-api_mention
deepEquals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
25575077	O
You	O
could	O
override	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
each	O
enum	O
value	O
.	O
Example	O
:	O
#	O
pre	O
Usage	O
:	O
#	O
pre	O
Question	O
-	O
32046078	O
I	O
have	O
a	O
server	O
side	O
implemented	O
in	O
Scala	O
and	O
React	O
/	O
Flux	O
based	O
front	O
end	O
.	O
My	O
services	O
return	O
Futures	O
and	O
they	O
are	O
handled	O
within	O
Scalatra	O
'	O
s	O
AsyncResult	O
for	O
JSON	O
responses	O
.	O
For	O
isomorphic	O
/	O
server	O
side	O
rendering	O
setup	O
I	O
did	O
not	O
want	O
to	O
change	O
services	O
to	O
be	O
blocking	O
so	O
I	O
started	O
with	O
Scala	O
Future	O
-	O
>	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	I-api_mention
Function	I-api_mention
conversion	O
shown	O
here	O
.	O
But	O
the	O
dispatcher	O
in	O
Flux	O
would	O
like	O
to	O
have	O
JS	O
Promise	O
.	O
So	O
far	O
I	O
found	O
only	O
rather	O
complicated	O
sounding	O
way	O
around	O
this	O
Slides	O
68	O
-	O
81	O
Is	O
there	O
any	O
recommended	O
way	O
to	O
deal	O
with	O
this	O
Scala	O
Future	O
-	O
>	O
JS	O
Promise	O
conversion	O
?	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
20130131	O
There	O
are	O
already	O
people	O
asked	O
the	O
same	O
on	O
the	O
mailing	O
list	O
โบ	O
.	O
The	O
main	O
reason	O
is	O
Iterable	B-api_mention
also	O
has	O
a	O
re	O
-	O
iterable	O
semantic	O
,	O
while	O
Stream	B-api_mention
is	O
not	O
.	O
#	O
blockquote	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
22676782	O
Despite	O
@	O
Saint	O
Hill	O
'	O
s	O
answer	O
if	O
you	O
consider	O
the	O
time	O
complexity	O
of	O
str	O
.	B-api_mention
toCharArray	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
the	O
first	O
one	O
is	O
faster	O
even	O
for	O
very	O
large	O
strings	O
.	O
You	O
can	O
run	O
the	O
code	O
below	O
to	O
see	O
it	O
for	O
yourself	O
.	O
#	O
pre	O
output	O
:	O
#	O
pre	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29096777	O
The	O
only	O
solution	O
I	O
come	O
up	O
with	O
for	O
the	O
moment	O
is	O
by	O
implementing	O
your	O
own	O
custom	O
collector	O
.	O
Before	O
reading	O
the	O
solution	O
,	O
I	O
want	O
to	O
add	O
a	O
few	O
notes	O
about	O
this	O
.	O
I	O
took	O
this	O
question	O
more	O
as	O
a	O
programming	O
exercise	O
,	O
I	O
'	O
m	O
not	O
sure	O
if	O
it	O
can	O
be	O
done	O
with	O
a	O
parallel	O
stream	O
.	O
So	O
you	O
have	O
to	O
be	O
aware	O
that	O
it	O
'	O
ll	O
silently	O
break	O
if	O
the	O
pipeline	O
is	O
run	O
in	O
parallel	O
.	O
This	O
is	O
not	O
a	O
desirable	O
behavior	O
and	O
should	O
be	O
avoided	O
.	O
This	O
is	O
why	O
I	O
throw	O
an	O
exception	O
in	O
the	O
combiner	O
part	O
(	O
instead	O
of	O
(	O
l1	O
,	O
l2	O
)	O
-	O
>	O
{	O
l1	O
.	O
addAll	O
(	O
args	O
)	O
;	O
return	O
l1	O
;	O
}	O
)	O
,	O
as	O
it	O
'	O
s	O
used	O
in	O
parallel	O
when	O
combining	O
the	O
two	O
lists	O
,	O
so	O
that	O
you	O
have	O
an	O
exception	O
instead	O
of	O
a	O
wrong	O
result	O
.	O
Also	O
this	O
is	O
not	O
very	O
efficient	O
due	O
to	O
list	O
copying	O
(	O
although	O
it	O
uses	O
a	O
native	O
method	O
to	O
copy	O
the	O
underlying	O
array	O
)	O
.	O
So	O
here	O
'	O
s	O
the	O
collector	O
implementation	O
:	O
#	O
pre	O
and	O
how	O
to	O
use	O
it	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ll	O
=	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Output	O
:	O
[	O
[	O
a	O
,	O
b	O
]	O
,	O
[	O
c	O
]	O
,	O
[	O
d	O
,	O
e	O
]	O
]	O
As	O
the	O
answer	O
of	O
Joop	O
Eggen	O
is	O
out	O
,	O
it	O
appears	O
that	O
it	O
can	O
be	O
done	O
in	O
parallel	O
(	O
give	O
him	O
credit	O
for	O
that	O
!	O
)	O
.	O
With	O
that	O
it	O
reduces	O
the	O
custom	O
collector	O
implementation	O
to	O
:	O
#	O
pre	O
which	O
let	O
the	O
paragraph	O
about	O
parallelism	O
a	O
bit	O
obsolete	O
,	O
however	O
I	O
let	O
it	O
as	O
it	O
can	O
be	O
a	O
good	O
reminder	O
.	O
Note	O
that	O
the	O
Stream	B-api_mention
API	O
is	O
not	O
always	O
a	O
substitute	O
.	O
There	O
are	O
tasks	O
that	O
are	O
easier	O
and	O
more	O
suitable	O
using	O
the	O
streams	O
and	O
there	O
are	O
tasks	O
that	O
are	O
not	O
.	O
In	O
your	O
case	O
,	O
you	O
could	O
also	O
create	O
a	O
utility	O
method	O
for	O
that	O
:	O
#	O
pre	O
and	O
call	O
it	O
like	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
splitBySeparator	O
(	O
args	O
)	O
;	O
.	O
It	O
can	O
be	O
improved	O
for	O
checking	O
edge	O
-	O
cases	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725518	O
Because	O
the	O
concept	O
of	O
a	O
List	B-api_mention
is	O
incompatible	O
with	O
the	O
concept	O
of	O
an	O
automatically	O
sorted	O
collection	O
.	O
The	O
point	O
of	O
a	O
List	B-api_mention
is	O
that	O
after	O
calling	O
list	B-api_mention
.	I-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
a	O
call	O
to	O
list	B-api_mention
.	I-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
elem	O
.	O
With	O
an	O
auto	O
-	O
sorted	O
list	O
,	O
the	O
element	O
could	O
end	O
up	O
in	O
an	O
arbitrary	O
position	O
.	O
Question	O
-	O
7283338	O
,	O
answer	O
-	O
7283475	O
Because	O
any	O
particular	O
implementation	O
of	O
Set	O
may	O
or	O
may	O
not	O
be	O
random	O
access	O
.	O
You	O
can	O
always	O
get	O
an	O
iterator	O
and	O
step	O
through	O
the	O
Set	B-api_mention
,	O
using	O
the	O
iterators	O
'	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
return	O
the	O
result	O
you	O
want	O
once	O
you	O
find	O
the	O
equal	O
element	O
.	O
This	O
works	O
regardless	O
of	O
the	O
implementation	O
.	O
If	O
the	O
implementation	O
is	O
NOT	O
random	O
access	O
(	O
picture	O
a	O
linked	O
-	O
list	O
backed	O
Set	B-api_mention
)	O
,	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
the	O
interface	O
would	O
be	O
deceptive	O
,	O
since	O
it	O
would	O
have	O
to	O
iterate	O
the	O
collection	O
to	O
find	O
the	O
element	O
to	O
return	O
,	O
and	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
seem	O
to	O
imply	O
this	O
would	O
be	O
necessary	O
,	O
that	O
the	O
Set	B-api_mention
could	O
jump	O
directly	O
to	O
the	O
element	O
to	O
get	O
.	O
contains	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
or	O
may	O
not	O
have	O
to	O
do	O
the	O
same	O
thing	O
,	O
of	O
course	O
,	O
depending	O
on	O
the	O
implementation	O
,	O
but	O
the	O
name	O
doesn	O
'	O
t	O
seem	O
to	O
lend	O
itself	O
to	O
the	O
same	O
sort	O
of	O
misunderstandings	O
.	O
Question	O
-	O
12576156	O
,	O
answer	O
-	O
12576308	O
Have	O
you	O
considered	O
@	O
Autowired	O
ing	O
the	O
constructor	O
or	O
a	O
setter	O
and	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
ing	O
in	O
the	O
body	O
?	O
#	O
pre	O
I	O
tend	O
to	O
prefer	O
doing	O
my	O
autowiring	O
in	O
one	O
of	O
these	O
ways	O
to	O
enhance	O
the	O
testability	O
of	O
my	O
code	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14513598	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
is	O
not	O
much	O
different	O
,	O
a	O
basic	O
LCG	O
described	O
by	O
Knuth	O
.	O
However	O
it	O
has	O
main	O
2	O
main	O
advantages	O
/	O
differences	O
:	O
#	O
li	O
thread	O
safe	O
-	O
each	O
update	O
is	O
a	O
CAS	O
which	O
is	O
more	O
expensive	O
than	O
a	O
simple	O
write	O
and	O
needs	O
a	O
branch	O
(	O
even	O
if	O
perfectly	O
predicted	O
single	O
threaded	O
)	O
.	O
Depending	O
on	O
the	O
CPU	O
it	O
could	O
be	O
significant	O
difference	O
.	O
#	O
li	O
undisclosed	O
internal	O
state	O
-	O
this	O
is	O
very	O
important	O
for	O
anything	O
non	O
-	O
trivial	O
.	O
You	O
wish	O
the	O
random	O
numbers	O
not	O
to	O
be	O
predictable	O
.	O
Below	O
it	O
'	O
s	O
the	O
main	O
routine	O
generating	O
'	O
random	O
'	O
integers	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
.	O
#	O
pre	O
If	O
you	O
remove	O
the	O
AtomicLong	B-api_mention
and	O
the	O
undisclosed	O
sate	O
(	O
i	O
.	O
e	O
.	O
using	O
all	O
bits	O
of	O
the	O
long	O
)	O
,	O
you	O
'	O
d	O
get	O
more	O
performance	O
than	O
the	O
double	O
multiplication	O
/	O
modulo	O
.	O
Last	O
note	O
:	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
should	O
not	O
be	O
used	O
for	O
anything	O
but	O
simple	O
tests	O
,	O
it	O
'	O
s	O
prone	O
to	O
contention	O
and	O
if	O
you	O
have	O
even	O
a	O
couple	O
of	O
threads	O
calling	O
it	O
concurrently	O
the	O
performance	O
degrades	O
.	O
One	O
little	O
known	O
historical	O
feature	O
of	O
it	O
is	O
the	O
introduction	O
of	O
CAS	O
in	O
java	O
-	O
to	O
beat	O
an	O
infamous	O
benchmark	O
(	O
first	O
by	O
IBM	O
via	O
intrinsics	O
and	O
then	O
Sun	O
made	O
"	O
CAS	O
from	O
Java	O
"	O
)	O
Question	O
-	O
24885223	O
,	O
answer	O
-	O
29841832	O
Thanks	O
to	O
@	O
marmor	O
,	O
I	O
updated	O
my	O
answer	O
.	O
I	O
think	O
it	O
'	O
s	O
a	O
good	O
solution	O
to	O
handle	O
the	O
onClick	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
the	O
ViewHolder	B-api_mention
class	O
constructor	O
and	O
pass	O
it	O
to	O
the	O
parent	O
class	O
via	O
OnItemClickListener	B-api_mention
interface	O
.	O
MyAdapter	O
.	O
java	O
#	O
pre	O
Usage	O
of	O
adapter	O
in	O
other	O
classes	O
:	O
MyFragment	O
.	O
java	O
#	O
pre	O
Question	O
-	O
6094575	O
,	O
answer	O
-	O
26159586	O
when	O
using	O
(	O
i	O
.	O
e	O
.	O
)	O
getConstructor	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
the	O
constructor	O
has	O
to	O
be	O
declared	O
public	O
.	O
Otherwise	O
a	O
NoSuchMethodException	B-api_mention
is	O
thrown	O
.	O
if	O
you	O
want	O
to	O
access	O
a	O
non	O
-	O
public	O
constructor	O
you	O
have	O
to	O
use	O
instead	O
(	O
i	O
.	O
e	O
.	O
)	O
getDeclaredConstructor	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908402	O
Although	O
there	O
is	O
no	O
explicit	O
guarantee	O
of	O
this	O
,	O
the	O
end	O
result	O
is	O
bound	O
to	O
be	O
such	O
that	O
the	O
comparison	O
always	O
succeeds	O
for	O
enum	O
constants	O
with	O
identical	O
names	O
:	O
#	O
pre	O
The	O
reason	O
for	O
this	O
is	O
that	O
Java	O
compiler	O
constructs	O
subclasses	O
of	O
Enum	O
in	O
such	O
a	O
way	O
that	O
they	O
end	O
up	O
calling	O
Enum	O
'	O
s	O
sole	O
protected	O
constructor	O
,	O
passing	O
it	O
the	O
name	O
of	O
enum	O
value	O
:	O
protected	O
Enum	O
(	O
args	O
)	O
;	O
The	O
name	O
is	O
embedded	O
into	O
the	O
generated	O
code	O
in	O
the	O
form	O
of	O
a	O
string	O
literal	O
.	O
According	O
to	O
String	B-api_mention
documentation	O
,	O
#	O
blockquote	O
This	O
amounts	O
to	O
an	O
implicit	O
guarantee	O
of	O
your	O
expression	O
succeeding	O
when	O
names	O
of	O
enum	O
constants	O
are	O
identical	O
.	O
However	O
,	O
I	O
would	O
not	O
rely	O
on	O
this	O
behavior	O
,	O
and	O
use	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
,	O
because	O
anyone	O
reading	O
my	O
code	O
would	O
be	O
scratching	O
his	O
head	O
,	O
thinking	O
that	O
I	O
made	O
a	O
mistake	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
20177092	O
The	O
better	O
practice	O
is	O
to	O
use	O
for	O
-	O
each	O
.	O
Besides	O
violating	O
the	O
Keep	O
It	O
Simple	O
,	O
Stupid	O
principle	O
,	O
the	O
new	O
-	O
fangled	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
at	O
least	O
the	O
following	O
deficiencies	O
:	O
#	O
li	O
Can	O
'	O
t	O
use	O
non	O
-	O
final	O
variables	O
.	O
So	O
,	O
code	O
like	O
the	O
following	O
can	O
'	O
t	O
be	O
turned	O
into	O
a	O
forEach	B-api_mention
lambda	O
:	O
#	O
blockquote	O
#	O
li	O
Can	O
'	O
t	O
handle	O
checked	O
exceptions	O
.	O
Lambdas	O
aren	O
'	O
t	O
actually	O
forbidden	O
from	O
throwing	O
checked	O
exceptions	O
,	O
but	O
common	O
functional	O
interfaces	O
like	O
Consumer	B-api_mention
don	O
'	O
t	O
declare	O
any	O
.	O
Therefore	O
,	O
any	O
code	O
that	O
throws	O
checked	O
exceptions	O
must	O
wrap	O
them	O
in	O
try	O
-	O
catch	O
or	O
Throwables	B-api_mention
.	I-api_mention
propagate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
even	O
if	O
you	O
do	O
that	O
,	O
it	O
'	O
s	O
not	O
always	O
clear	O
what	O
happens	O
to	O
the	O
thrown	O
exception	O
.	O
It	O
could	O
get	O
swallowed	O
somewhere	O
in	O
the	O
guts	O
of	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
Limited	O
flow	O
-	O
control	O
.	O
A	O
return	O
in	O
a	O
lambda	O
equals	O
a	O
continue	O
in	O
a	O
for	O
-	O
each	O
,	O
but	O
there	O
is	O
no	O
equivalent	O
to	O
a	O
break	O
.	O
It	O
'	O
s	O
also	O
difficult	O
to	O
do	O
things	O
like	O
return	O
values	O
,	O
short	O
circuit	O
,	O
or	O
set	O
flags	O
(	O
which	O
would	O
have	O
alleviated	O
things	O
a	O
bit	O
,	O
if	O
it	O
wasn	O
'	O
t	O
a	O
violation	O
of	O
the	O
no	O
non	O
-	O
final	O
variables	O
rule	O
)	O
.	O
"	O
This	O
is	O
not	O
just	O
an	O
optimization	O
,	O
but	O
critical	O
when	O
you	O
consider	O
that	O
some	O
sequences	O
(	O
like	O
reading	O
the	O
lines	O
in	O
a	O
file	O
)	O
may	O
have	O
side	O
-	O
effects	O
,	O
or	O
you	O
may	O
have	O
an	O
infinite	O
sequence	O
.	O
"	O
#	O
li	O
Might	O
execute	O
in	O
parallel	O
,	O
which	O
is	O
a	O
horrible	O
,	O
horrible	O
thing	O
for	O
all	O
but	O
the	O
0	O
.	O
1	O
%	O
of	O
your	O
code	O
that	O
needs	O
to	O
be	O
optimized	O
.	O
Any	O
parallel	O
code	O
has	O
to	O
be	O
thought	O
through	O
(	O
even	O
if	O
it	O
doesn	O
'	O
t	O
use	O
locks	O
,	O
volatiles	O
,	O
and	O
other	O
particularly	O
nasty	O
aspects	O
of	O
traditional	O
multi	O
-	O
threaded	O
execution	O
)	O
.	O
Any	O
bug	O
will	O
be	O
tough	O
to	O
find	O
.	O
#	O
li	O
Might	O
hurt	O
performance	O
,	O
because	O
the	O
JIT	O
can	O
'	O
t	O
optimize	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
+	O
lambda	O
to	O
the	O
same	O
extent	O
as	O
plain	O
loops	O
,	O
especially	O
now	O
that	O
lambdas	O
are	O
new	O
.	O
By	O
"	O
optimization	O
"	O
I	O
do	O
not	O
mean	O
the	O
overhead	O
of	O
calling	O
lambdas	O
(	O
which	O
is	O
small	O
)	O
,	O
but	O
to	O
the	O
sophisticated	O
analysis	O
and	O
transformation	O
that	O
the	O
modern	O
JIT	O
compiler	O
performs	O
on	O
running	O
code	O
.	O
#	O
li	O
If	O
you	O
do	O
need	O
parallelism	O
,	O
it	O
is	O
probably	O
much	O
faster	O
and	O
not	O
much	O
more	O
difficult	O
to	O
use	O
an	O
ExecutorService	B-api_mention
.	O
Streams	O
are	O
both	O
automagical	O
(	O
read	O
:	O
don	O
'	O
t	O
know	O
much	O
about	O
your	O
problem	O
)	O
and	O
use	O
a	O
specialized	O
(	O
read	O
:	O
inefficient	O
for	O
the	O
general	O
case	O
)	O
parallelization	O
strategy	O
(	O
fork	O
-	O
join	O
recursive	O
decomposition	O
)	O
.	O
#	O
li	O
Makes	O
debugging	O
more	O
confusing	O
,	O
because	O
of	O
the	O
nested	O
call	O
hierarchy	O
and	O
,	O
god	O
forbid	O
,	O
parallel	O
execution	O
.	O
The	O
debugger	O
may	O
have	O
issues	O
displaying	O
variables	O
from	O
the	O
surrounding	O
code	O
,	O
and	O
things	O
like	O
step	O
-	O
through	O
may	O
not	O
work	O
as	O
expected	O
.	O
#	O
li	O
Streams	O
in	O
general	O
are	O
more	O
difficult	O
to	O
code	O
,	O
read	O
,	O
and	O
debug	O
.	O
Actually	O
,	O
this	O
is	O
true	O
of	O
complex	O
"	O
fluent	O
"	O
APIs	O
in	O
general	O
.	O
The	O
combination	O
of	O
complex	O
single	O
statements	O
,	O
heavy	O
use	O
of	O
generics	O
,	O
and	O
lack	O
of	O
intermediate	O
variables	O
conspire	O
to	O
produce	O
confusing	O
error	O
messages	O
and	O
frustrate	O
debugging	O
.	O
Instead	O
of	O
"	O
this	O
method	O
doesn	O
'	O
t	O
have	O
an	O
overload	O
for	O
type	O
X	O
"	O
you	O
get	O
an	O
error	O
message	O
closer	O
to	O
"	O
somewhere	O
you	O
messed	O
up	O
the	O
types	O
,	O
but	O
we	O
don	O
'	O
t	O
know	O
where	O
or	O
how	O
.	O
"	O
Similarly	O
,	O
you	O
can	O
'	O
t	O
step	O
through	O
and	O
examine	O
things	O
in	O
a	O
debugger	O
as	O
easily	O
as	O
when	O
the	O
code	O
is	O
broken	O
into	O
multiple	O
statements	O
,	O
and	O
intermediate	O
values	O
are	O
saved	O
to	O
variables	O
.	O
Finally	O
,	O
reading	O
the	O
code	O
and	O
understanding	O
the	O
types	O
and	O
behavior	O
at	O
each	O
stage	O
of	O
execution	O
may	O
be	O
non	O
-	O
trivial	O
.	O
#	O
li	O
Sticks	O
out	O
like	O
a	O
sore	O
thumb	O
.	O
The	O
Java	O
language	O
already	O
has	O
the	O
for	O
-	O
each	O
statement	O
.	O
Why	O
replace	O
it	O
with	O
a	O
function	O
call	O
?	O
Why	O
encourage	O
hiding	O
side	O
-	O
effects	O
somewhere	O
in	O
expressions	O
?	O
Why	O
encourage	O
unwieldy	O
one	O
-	O
liners	O
?	O
Mixing	O
regular	O
for	O
-	O
each	O
and	O
new	O
forEach	B-api_mention
willy	O
-	O
nilly	O
is	O
bad	O
style	O
.	O
Code	O
should	O
speak	O
in	O
idioms	O
(	O
patterns	O
that	O
are	O
quick	O
to	O
comprehend	O
due	O
to	O
their	O
repetition	O
)	O
,	O
and	O
the	O
fewer	O
idioms	O
are	O
used	O
the	O
clearer	O
the	O
code	O
is	O
and	O
less	O
time	O
is	O
spent	O
deciding	O
which	O
idiom	O
to	O
use	O
(	O
a	O
big	O
time	O
-	O
drain	O
for	O
perfectionists	O
like	O
myself	O
!	O
)	O
.	O
As	O
you	O
can	O
see	O
,	O
I	O
'	O
m	O
not	O
a	O
big	O
fan	O
of	O
the	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
except	O
in	O
cases	O
when	O
it	O
makes	O
sense	O
.	O
Particularly	O
offensive	O
to	O
me	O
is	O
the	O
fact	O
that	O
Stream	B-api_mention
does	O
not	O
implement	O
Iterable	B-api_mention
(	O
despite	O
actually	O
having	O
method	O
iterator	O
)	O
and	O
cannot	O
be	O
used	O
in	O
a	O
for	O
-	O
each	O
,	O
only	O
with	O
a	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
.	O
I	O
recommend	O
casting	O
Streams	O
into	O
Iterables	O
with	O
(	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
stream	O
:	O
:	O
iterator	O
.	O
A	O
better	O
alternative	O
is	O
to	O
use	O
StreamEx	O
which	O
fixes	O
a	O
number	O
of	O
Stream	B-api_mention
API	O
problems	O
,	O
including	O
implementing	O
Iterable	B-api_mention
.	O
That	O
said	O
,	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
useful	O
for	O
the	O
following	O
:	O
#	O
li	O
Atomically	O
iterating	O
over	O
a	O
synchronized	O
list	O
.	O
Prior	O
to	O
this	O
,	O
a	O
list	O
generated	O
with	O
Collections	B-api_mention
.	I-api_mention
synchronizedList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
atomic	O
with	O
respect	O
to	O
things	O
like	O
get	O
or	O
set	O
,	O
but	O
was	O
not	O
thread	O
-	O
safe	O
when	O
iterating	O
.	O
#	O
li	O
Parallel	O
execution	O
(	O
using	O
an	O
appropriate	O
parallel	O
stream	O
)	O
.	O
This	O
saves	O
you	O
a	O
few	O
lines	O
of	O
code	O
vs	O
using	O
an	O
ExecutorService	B-api_mention
,	O
if	O
your	O
problem	O
matches	O
the	O
performance	O
assumptions	O
built	O
into	O
Streams	O
and	O
Spliterators	O
.	O
#	O
li	O
Specific	O
containers	O
which	O
,	O
like	O
the	O
synchronized	O
list	O
,	O
benefit	O
from	O
being	O
in	O
control	O
of	O
iteration	O
(	O
although	O
this	O
is	O
largely	O
theoretical	O
unless	O
people	O
can	O
bring	O
up	O
more	O
examples	O
)	O
#	O
li	O
Calling	O
a	O
single	O
function	O
more	O
cleanly	O
by	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
a	O
method	O
reference	O
argument	O
(	O
ie	O
,	O
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
However	O
,	O
keep	O
in	O
mind	O
the	O
points	O
on	O
checked	O
exceptions	O
,	O
more	O
difficult	O
debugging	O
,	O
and	O
reducing	O
the	O
number	O
of	O
idioms	O
you	O
use	O
when	O
writing	O
code	O
.	O
Articles	O
I	O
used	O
for	O
reference	O
:	O
#	O
li	O
Everything	O
about	O
Java	O
8	O
#	O
li	O
Iteration	O
Inside	O
and	O
Out	O
(	O
as	O
pointed	O
out	O
by	O
another	O
poster	O
)	O
EDIT	O
:	O
Looks	O
like	O
some	O
of	O
the	O
original	O
proposals	O
for	O
lambdas	O
(	O
such	O
as	O
#	O
a	O
)	O
solved	O
some	O
of	O
the	O
issues	O
I	O
mentioned	O
(	O
while	O
adding	O
their	O
own	O
complications	O
,	O
of	O
course	O
)	O
.	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
15962949	O
If	O
you	O
want	O
to	O
make	O
a	O
copy	O
of	O
:	O
int	O
[	O
]	O
a	O
=	O
{	O
1	O
,	O
2	O
,	O
3	O
,	O
4	O
,	O
5	O
}	O
;	O
This	O
is	O
the	O
way	O
to	O
go	O
:	O
int	O
[	O
]	O
b	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
may	O
be	O
faster	O
than	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
small	O
arrays	O
.	O
Both	O
copy	O
elements	O
equally	O
fast	O
but	O
clone	B-api_mention
(	I-api_mention
)	I-api_mention
returns	O
Object	B-api_mention
so	O
the	O
compiler	O
has	O
to	O
insert	O
an	O
implicit	O
cast	O
to	O
int	O
[	O
]	O
.	O
You	O
can	O
see	O
it	O
in	O
the	O
bytecode	O
,	O
something	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056821	O
Documentation	O
:	O
For	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
It	O
will	O
simply	O
return	O
the	O
entire	O
string	O
that	O
'	O
s	O
why	O
it	O
returns	O
1	O
.	O
For	O
the	O
second	O
case	O
,	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
will	O
discard	O
the	O
,	O
so	O
the	O
result	O
will	O
be	O
empty	O
.	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
silently	O
discards	O
trailing	O
separators	O
see	O
guava	O
StringsExplained	B-api_mention
too	O
Question	O
-	O
11774099	O
,	O
answer	O
-	O
11774137	O
iterate	O
through	O
the	O
whole	O
65k	O
chars	O
and	O
ask	O
Character	B-api_mention
.	I-api_mention
isJavaIdentifierStart	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
answer	O
is	O
:	O
"	O
undertie	O
"	O
decimal	O
8255	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
36394016	O
Whenever	O
there	O
is	O
the	O
slightest	O
possibility	O
that	O
the	O
given	O
String	B-api_mention
does	O
not	O
contain	O
an	O
Integer	O
,	O
you	O
have	O
to	O
handle	O
this	O
special	O
case	O
.	O
Sadly	O
,	O
the	O
standard	O
Java	O
methods	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
parseInt	I-api_mention
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
valueOf	I-api_mention
throw	O
a	O
NumberFormatException	B-api_mention
to	O
signal	O
this	O
special	O
case	O
.	O
Thus	O
,	O
you	O
have	O
to	O
use	O
exceptions	O
for	O
flow	O
control	O
,	O
which	O
is	O
generally	O
considered	O
bad	O
coding	O
style	O
.	O
In	O
my	O
opinion	O
,	O
this	O
special	O
case	O
should	O
be	O
handled	O
by	O
returning	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Since	O
Java	O
does	O
not	O
offer	O
such	O
a	O
method	O
,	O
I	O
use	O
the	O
following	O
wrapper	O
:	O
#	O
pre	O
Usage	O
:	O
#	O
pre	O
While	O
this	O
is	O
still	O
using	O
exceptions	O
for	O
flow	O
control	O
internally	O
,	O
the	O
usage	O
code	O
becomes	O
very	O
clean	O
.	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32820984	O
Let	O
'	O
s	O
rewrite	O
that	O
lambda	O
expression	O
with	O
parentheses	O
to	O
make	O
it	O
more	O
clear	O
:	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
curriedAdd	O
=	O
a	O
-	O
>	O
(	O
b	O
-	O
>	O
(	O
a	O
+	O
b	O
)	O
)	O
;	O
So	O
we	O
are	O
declaring	O
a	O
function	O
taking	O
an	O
int	O
which	O
returns	O
a	O
Function	B-api_mention
.	O
More	O
specifically	O
,	O
the	O
function	O
returned	O
takes	O
an	O
int	O
and	O
returns	O
an	O
int	O
(	O
the	O
sum	O
of	O
the	O
two	O
elements	O
)	O
:	O
this	O
can	O
be	O
represented	O
as	O
an	O
IntUnaryOperator	O
.	O
Therefore	O
,	O
curriedAdd	O
is	O
a	O
function	O
taking	O
an	O
int	O
and	O
returning	O
an	O
IntUnaryOperator	O
,	O
so	O
it	O
can	O
be	O
represented	O
as	O
IntFunction	B-api_mention
<	I-api_mention
IntUnaryOperator	I-api_mention
>	I-api_mention
.	O
Question	O
-	O
29183904	O
I	O
used	O
to	O
define	O
a	O
set	O
of	O
related	O
constants	O
like	O
Bundle	O
keys	O
together	O
in	O
an	O
interface	O
like	O
below	O
:	O
#	O
pre	O
This	O
provides	O
me	O
a	O
nicer	O
way	O
to	O
group	O
related	O
constants	O
together	O
and	O
used	O
them	O
by	O
making	O
a	O
static	O
import	O
(	O
not	O
implements	O
)	O
.	O
I	O
know	O
Android	O
framework	O
also	O
uses	O
the	O
constants	O
in	O
same	O
way	O
like	O
Toast	O
.	O
LENTH	O
_	O
LONG	O
,	O
View	O
.	O
GONE	O
.	O
However	O
,	O
I	O
often	O
feel	O
that	O
the	O
Java	O
Enums	O
provide	O
much	O
better	O
and	O
powerful	O
way	O
to	O
represent	O
the	O
constant	O
.	O
But	O
is	O
there	O
a	O
performence	O
issue	O
in	O
using	O
enums	O
on	O
Android	O
?	O
With	O
a	O
bit	O
of	O
research	O
I	O
ended	O
up	O
in	O
confusion	O
.	O
From	O
this	O
question	O
"	O
Avoid	O
Enums	O
Where	O
You	O
Only	O
Need	O
Ints	O
โ	O
removed	O
from	O
Android	O
'	O
s	O
performance	O
tips	O
?	O
it	O
'	O
s	O
clear	O
that	O
Google	O
has	O
removed	O
"	O
Avoid	O
enums	O
"	O
from	O
its	O
performance	O
tips	O
,	O
but	O
from	O
it	O
'	O
s	O
official	O
training	O
docs	O
Be	O
aware	O
of	O
memory	O
overhead	O
section	O
it	O
clearly	O
says	O
:	O
"	O
Enums	O
often	O
require	O
more	O
than	O
twice	O
as	O
much	O
memory	O
as	O
static	O
constants	O
.	O
You	O
should	O
strictly	O
avoid	O
using	O
enums	O
on	O
Android	O
.	O
"	O
Is	O
this	O
still	O
holds	O
good	O
?	O
(	O
say	O
in	O
Java	O
versions	O
after	O
1	O
.	O
6	O
)	O
One	O
more	O
issue	O
that	O
I	O
observed	O
is	O
to	O
send	O
enums	O
across	O
intents	O
using	O
Bundle	O
I	O
should	O
send	O
them	O
by	O
serializing	O
(	O
i	O
.	O
e	O
putSerializable	O
(	O
args	O
)	O
,	O
that	O
I	O
think	O
an	O
expensive	O
operation	O
compared	O
to	O
primitive	O
putString	O
(	O
args	O
)	O
method	O
,	O
eventhough	O
enums	O
provides	O
it	O
for	O
free	O
)	O
.	O
Can	O
someone	O
please	O
clarify	O
which	O
one	O
is	O
the	O
best	O
way	O
to	O
represent	O
the	O
same	O
in	O
Android	O
?	O
Should	O
I	O
strictly	O
avoid	O
using	O
enums	O
on	O
Android	O
?	O
Question	O
-	O
5011932	O
I	O
am	O
storing	O
a	O
SQL	O
query	O
in	O
my	O
strings	O
.	O
xml	O
file	O
and	O
I	O
want	O
to	O
use	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
to	O
build	O
the	O
final	O
string	O
in	O
code	O
.	O
The	O
SELECT	O
statement	O
uses	O
a	O
like	O
,	O
something	O
like	O
this	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
'	O
%	O
something	O
%	O
'	O
In	O
order	O
to	O
format	O
that	O
I	O
replace	O
'	O
something	O
'	O
with	O
%	O
1	O
$	O
s	O
so	O
it	O
becomes	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
\	O
'	O
%	O
%	O
1	O
$	O
s	O
%	O
\	O
'	O
I	O
escape	O
the	O
single	O
quotes	O
with	O
the	O
backslash	O
.	O
However	O
I	O
am	O
not	O
able	O
to	O
escape	O
the	O
%	O
sign	O
.	O
How	O
can	O
I	O
include	O
a	O
like	O
statement	O
in	O
my	O
strings	O
.	O
xml	O
file	O
?	O
Question	O
-	O
20945049	O
We	O
all	O
know	O
that	O
String	B-api_mention
is	O
immutable	O
in	O
Java	O
,	O
but	O
check	O
the	O
following	O
code	O
:	O
#	O
pre	O
Why	O
does	O
this	O
program	O
operate	O
like	O
this	O
?	O
And	O
why	O
is	O
the	O
value	O
of	O
s1	O
and	O
s2	O
changed	O
,	O
but	O
not	O
s3	O
?	O
Question	O
-	O
4812570	O
,	O
answer	O
-	O
4812585	O
You	O
have	O
to	O
use	O
getStackTrace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
instead	O
of	O
printStackTrace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Here	O
is	O
a	O
good	O
example	O
:	O
#	O
pre	O
Question	O
-	O
9749746	O
,	O
answer	O
-	O
9749864	O
You	O
are	O
specifically	O
asking	O
about	O
how	O
they	O
internally	O
work	O
,	O
so	O
here	O
you	O
are	O
:	O
No	O
synchronization	O
#	O
pre	O
It	O
basically	O
reads	O
value	O
from	O
memory	O
,	O
increments	O
it	O
and	O
puts	O
back	O
to	O
memory	O
.	O
This	O
works	O
in	O
single	O
thread	O
but	O
nowadays	O
,	O
in	O
the	O
era	O
of	O
multi	O
-	O
core	O
,	O
multi	O
-	O
CPU	O
,	O
multi	O
-	O
level	O
caches	O
it	O
won	O
'	O
t	O
work	O
correctly	O
.	O
First	O
of	O
all	O
it	O
introduces	O
race	O
condition	O
(	O
several	O
threads	O
can	O
read	O
the	O
value	O
at	O
the	O
same	O
time	O
)	O
,	O
but	O
also	O
visibility	O
problems	O
.	O
The	O
value	O
might	O
only	O
be	O
stored	O
in	O
"	O
local	O
"	O
CPU	O
memory	O
(	O
some	O
cache	O
)	O
and	O
not	O
be	O
visible	O
for	O
other	O
CPUs	O
/	O
cores	O
(	O
and	O
thus	O
-	O
threads	O
)	O
.	O
This	O
is	O
why	O
many	O
refer	O
to	O
local	O
copy	O
of	O
a	O
variable	O
in	O
a	O
thread	O
.	O
It	O
is	O
very	O
unsafe	O
.	O
Consider	O
this	O
popular	O
but	O
broken	O
thread	O
-	O
stopping	O
code	O
:	O
#	O
pre	O
Add	O
volatile	O
to	O
stopped	O
variable	O
and	O
it	O
works	O
fine	O
-	O
if	O
any	O
other	O
thread	O
modifies	O
stopped	O
variable	O
via	O
pleaseStop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
that	O
change	O
immediately	O
in	O
working	O
thread	O
'	O
s	O
while	O
(	O
args	O
)	O
loop	O
.	O
BTW	O
this	O
is	O
not	O
a	O
good	O
way	O
to	O
interrupt	O
a	O
thread	O
either	O
,	O
see	O
:	O
How	O
to	O
stop	O
a	O
thread	O
that	O
is	O
running	O
forever	O
without	O
any	O
use	O
and	O
Stopping	O
a	O
specific	O
java	O
thread	O
.	O
AtomicInteger	O
#	O
pre	O
The	O
AtomicInteger	B-api_mention
class	O
uses	O
CAS	O
(	O
compare	O
-	O
and	O
-	O
swap	O
)	O
low	O
-	O
level	O
CPU	O
operations	O
(	O
no	O
synchronization	O
needed	O
!	O
)	O
They	O
allow	O
you	O
to	O
modify	O
a	O
particular	O
variable	O
only	O
if	O
the	O
present	O
value	O
is	O
equal	O
to	O
something	O
else	O
(	O
and	O
is	O
returned	O
successfully	O
)	O
.	O
So	O
when	O
you	O
execute	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
actually	O
runs	O
in	O
a	O
loop	O
(	O
simplified	O
real	O
implementation	O
)	O
:	O
#	O
pre	O
So	O
basically	O
:	O
read	O
;	O
try	O
to	O
store	O
incremented	O
value	O
;	O
if	O
not	O
successful	O
(	O
the	O
value	O
is	O
no	O
longer	O
equal	O
to	O
current	O
)	O
,	O
read	O
and	O
try	O
again	O
.	O
The	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
implemented	O
in	O
native	O
code	O
(	O
assembly	O
)	O
.	O
volatile	O
without	O
synchronization	O
#	O
pre	O
This	O
code	O
is	O
not	O
correct	O
.	O
It	O
fixes	O
the	O
visibility	O
issue	O
(	O
volatile	O
makes	O
sure	O
other	O
threads	O
can	O
see	O
change	O
made	O
to	O
counter	O
)	O
but	O
still	O
has	O
a	O
race	O
condition	O
.	O
This	O
has	O
been	O
explained	O
multiple	O
times	O
:	O
pre	O
/	O
post	O
-	O
incrementation	O
is	O
not	O
atomic	B-api_mention
.	O
The	O
only	O
side	O
effect	O
of	O
volatile	O
is	O
"	O
flushing	O
"	O
caches	O
so	O
that	O
all	O
other	O
parties	O
see	O
the	O
freshest	O
version	O
of	O
the	O
data	O
.	O
This	O
is	O
too	O
strict	O
in	O
most	O
situations	O
;	O
that	O
is	O
why	O
volatile	O
is	O
not	O
default	O
.	O
volatile	O
without	O
synchronization	O
(	O
2	O
)	O
#	O
pre	O
The	O
same	O
problem	O
as	O
above	O
,	O
but	O
even	O
worse	O
because	O
i	O
is	O
not	O
private	O
.	O
The	O
race	O
condition	O
is	O
still	O
present	O
.	O
Why	O
is	O
it	O
a	O
problem	O
?	O
If	O
,	O
say	O
,	O
two	O
threads	O
run	O
this	O
code	O
simultaneously	O
,	O
the	O
output	O
might	O
be	O
+	O
5	O
or	O
+	O
10	O
.	O
However	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
the	O
change	O
.	O
Multiple	O
independent	O
synchronized	O
#	O
pre	O
Surprise	O
,	O
this	O
code	O
is	O
incorrect	O
as	O
well	O
.	O
In	O
fact	O
,	O
it	O
is	O
completely	O
wrong	O
.	O
First	O
of	O
all	O
you	O
are	O
synchronizing	O
on	O
i	O
,	O
which	O
is	O
about	O
to	O
be	O
changed	O
(	O
moreover	O
,	O
i	O
is	O
a	O
primitive	O
,	O
so	O
I	O
guess	O
you	O
are	O
synchronizing	O
on	O
a	O
temporary	O
Integer	O
created	O
via	O
autoboxing	O
.	O
.	O
.	O
)	O
Completely	O
flawed	O
.	O
You	O
could	O
also	O
write	O
:	O
#	O
pre	O
No	O
two	O
threads	O
can	O
enter	O
the	O
same	O
synchronized	O
block	O
with	O
the	O
same	O
lock	O
.	O
In	O
this	O
case	O
(	O
and	O
similarly	O
in	O
your	O
code	O
)	O
the	O
lock	O
object	O
changes	O
upon	O
every	O
execution	O
,	O
so	O
synchronized	O
effectively	O
has	O
no	O
effect	O
.	O
Even	O
if	O
you	O
have	O
used	O
a	O
final	O
variable	O
(	O
or	O
this	O
)	O
for	O
synchronization	O
,	O
the	O
code	O
is	O
still	O
incorrect	O
.	O
Two	O
threads	O
can	O
first	O
read	O
i	O
to	O
temp	O
synchronously	O
(	O
having	O
the	O
same	O
value	O
locally	O
in	O
temp	O
)	O
,	O
then	O
the	O
first	O
assigns	O
a	O
new	O
value	O
to	O
i	O
(	O
say	O
,	O
from	O
1	O
to	O
6	O
)	O
and	O
the	O
other	O
one	O
does	O
the	O
same	O
thing	O
(	O
from	O
1	O
to	O
6	O
)	O
.	O
The	O
synchronization	O
must	O
span	O
from	O
reading	O
to	O
assigning	O
a	O
value	O
.	O
Your	O
first	O
synchronization	O
has	O
no	O
effect	O
(	O
reading	O
an	O
int	O
is	O
atomic	O
)	O
and	O
the	O
second	O
as	O
well	O
.	O
In	O
my	O
opinion	O
,	O
these	O
are	O
the	O
correct	O
forms	O
:	O
#	O
pre	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
34845194	O
You	O
can	O
also	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOfRange	I-api_mention
.	O
Example	O
:	O
#	O
pre	O
This	O
method	O
is	O
similar	O
to	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
,	O
but	O
it	O
'	O
s	O
more	O
flexible	O
.	O
Both	O
of	O
them	O
use	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
under	O
the	O
hood	O
.	O
See	O
:	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
Question	O
-	O
31170459	O
I	O
was	O
testing	O
boundary	O
conditions	O
on	O
some	O
code	O
involving	O
a	O
BigDecimal	B-api_mention
,	O
and	O
I	O
noticed	O
that	O
when	O
a	O
BigDecimal	B-api_mention
is	O
initialized	O
with	O
the	O
String	B-api_mention
StringLiteral	O
it	O
behaves	O
unexpectedly	O
.	O
It	O
seems	O
to	O
have	O
a	O
value	O
between	O
0	O
and	O
1e	O
-	O
2147483647	O
.	O
When	O
I	O
try	O
calling	O
intValue	O
(	O
args	O
)	O
,	O
I	O
get	O
a	O
NegativeArraySizeException	O
.	O
I	O
should	O
note	O
that	O
2147483647	O
is	O
the	O
max	O
value	O
of	O
an	O
integer	O
on	O
my	O
system	O
.	O
Am	O
I	O
doing	O
something	O
wrong	O
,	O
or	O
is	O
this	O
a	O
problem	O
with	O
BigDecimal	B-api_mention
?	O
#	O
pre	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32357142	O
When	O
returning	O
List	B-api_mention
,	O
you	O
'	O
ll	O
be	O
promoting	O
program	O
to	O
an	O
interface	O
,	O
which	O
is	O
a	O
very	O
good	O
practice	O
.	O
However	O
,	O
this	O
approach	O
has	O
its	O
limitation	O
.	O
For	O
example	O
,	O
you	O
cannot	O
use	O
some	O
methods	O
that	O
are	O
defined	O
for	O
ArrayList	B-api_mention
and	O
don	O
'	O
t	O
exist	O
in	O
the	O
List	B-api_mention
interface	O
-	O
See	O
this	O
answer	O
for	O
details	O
.	O
I	O
'	O
m	O
quoting	O
the	O
API	O
Design	O
from	O
the	O
The	O
Java	O
โข	O
Tutorials	O
:	O
#	O
blockquote	O
Since	O
ArrayList	B-api_mention
is	O
essentially	O
an	O
array	O
,	O
they	O
are	O
my	O
first	O
choice	O
when	O
I	O
need	O
to	O
have	O
a	O
"	O
collection	O
-	O
array	O
"	O
.	O
So	O
if	O
I	O
want	O
to	O
convert	O
enumeration	O
to	O
a	O
list	O
,	O
my	O
choice	O
would	O
be	O
an	O
array	O
list	O
.	O
In	O
any	O
other	O
cases	O
,	O
it	O
'	O
s	O
still	O
valid	O
to	O
write	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
5374346	O
What	O
is	O
happening	O
is	O
that	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
creating	O
an	O
Object	B-api_mention
[	O
]	O
rather	O
than	O
a	O
String	B-api_mention
[	O
]	O
and	O
hence	O
the	O
typecast	O
is	O
failing	O
.	O
The	O
correct	O
code	O
would	O
be	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
even	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
more	O
details	O
,	O
refer	O
to	O
the	O
javadocs	O
for	O
the	O
two	O
overloads	O
of	O
List	B-api_mention
.	I-api_mention
toArray	I-api_mention
.	O
(	O
From	O
a	O
technical	O
perspective	O
,	O
the	O
reason	O
for	O
this	O
API	O
behaviour	O
/	O
design	O
is	O
that	O
an	O
implementation	O
of	O
the	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	I-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
no	O
information	O
of	O
what	O
the	O
<	O
T	O
>	O
is	O
at	O
runtime	O
.	O
All	O
it	O
knows	O
is	O
that	O
the	O
raw	O
element	O
type	O
is	O
Object	B-api_mention
.	O
By	O
contrast	O
,	O
in	O
the	O
other	O
case	O
,	O
the	O
array	O
parameter	O
gives	O
the	O
base	O
type	O
of	O
the	O
array	O
.	O
(	O
If	O
the	O
supplied	O
array	O
is	O
big	O
enough	O
,	O
it	O
is	O
used	O
.	O
Otherwise	O
a	O
new	O
array	O
of	O
the	O
same	O
type	O
and	O
a	O
larger	O
size	O
will	O
be	O
allocated	O
and	O
returned	O
as	O
the	O
result	O
.	O
)	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923211	O
This	O
advice	O
is	O
a	O
variant	O
of	O
the	O
"	O
be	O
as	O
unspecific	O
as	O
possible	O
regarding	O
inputs	O
and	O
as	O
specific	O
as	O
possible	O
regarding	O
outputs	O
"	O
rule	O
of	O
thumb	O
.	O
Usually	O
if	O
you	O
have	O
a	O
method	O
that	O
takes	O
a	O
plain	O
non	O
-	O
null	O
value	O
,	O
you	O
can	O
map	O
it	O
over	O
the	O
Optional	B-api_mention
,	O
so	O
the	O
plain	O
version	O
is	O
strictly	O
more	O
unspecific	O
regarding	O
inputs	O
.	O
However	O
there	O
are	O
a	O
bunch	O
of	O
possible	O
reasons	O
why	O
you	O
would	O
want	O
to	O
require	O
an	O
Optional	B-api_mention
argument	O
nonetheless	O
:	O
#	O
li	O
you	O
want	O
your	O
function	O
to	O
be	O
used	O
in	O
conjunction	O
with	O
another	O
API	O
that	O
returns	O
an	O
Optional	B-api_mention
#	O
li	O
Your	O
function	O
should	O
return	O
something	O
other	O
than	O
an	O
empty	O
Optional	B-api_mention
if	O
the	O
given	O
value	O
is	O
empty	O
#	O
li	O
You	O
think	O
Optional	B-api_mention
is	O
so	O
awesome	O
that	O
whoever	O
uses	O
your	O
API	O
should	O
be	O
required	O
to	O
learn	O
about	O
it	O
;	O
-	O
)	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271520	O
Try	O
using	O
this	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getCanonicalName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
this	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getSimpleName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
'	O
s	O
an	O
anonymous	O
class	O
,	O
use	O
this	O
.	B-api_mention
getClass	I-api_mention
.	I-api_mention
getSuperclass	I-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777279	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
same	O
as	O
array1	O
=	O
=	O
array2	O
,	O
i	O
.	O
e	O
.	O
is	O
it	O
the	O
same	O
array	O
.	O
As	O
@	O
alf	O
points	O
out	O
it	O
'	O
s	O
not	O
what	O
most	O
people	O
expect	O
.	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
compares	O
the	O
contents	O
of	O
the	O
arrays	O
.	O
Similarly	O
array	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
not	O
be	O
very	O
useful	O
and	O
you	O
need	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32859065	O
You	O
can	O
create	O
a	O
Stream	B-api_mention
of	O
the	O
indices	O
using	O
an	O
IntStream	B-api_mention
and	O
then	O
convert	O
them	O
to	O
a	O
Map	O
:	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
map	O
=	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
boxed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29098447	O
The	O
solution	O
is	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
collect	I-api_mention
.	O
To	O
create	O
a	O
Collector	B-api_mention
using	O
its	O
builder	O
pattern	O
is	O
already	O
given	O
as	O
solution	O
.	O
The	O
alternative	O
is	O
the	O
other	O
overloaded	O
collect	O
being	O
a	O
tiny	O
bit	O
more	O
primitive	O
.	O
#	O
pre	O
As	O
one	O
sees	O
,	O
I	O
make	O
a	O
list	O
of	O
string	O
lists	O
,	O
where	O
there	O
always	O
is	O
at	O
least	O
one	O
last	O
(	O
empty	O
)	O
string	O
list	O
.	O
#	O
li	O
The	O
first	O
function	O
creates	O
a	O
starting	O
list	O
of	O
string	O
lists	O
.	O
It	O
specifies	O
the	O
result	O
(	O
typed	O
)	O
object	O
.	O
#	O
li	O
The	O
second	O
function	O
is	O
called	O
to	O
process	O
each	O
element	O
.	O
It	O
is	O
an	O
action	O
on	O
the	O
partial	O
result	O
and	O
an	O
element	O
.	O
#	O
li	O
The	O
third	O
is	O
not	O
really	O
used	O
,	O
it	O
comes	O
into	O
play	O
on	O
parallelising	O
the	O
processing	O
,	O
when	O
partial	O
results	O
must	O
be	O
combined	O
.	O
A	O
solution	O
with	O
an	O
accumulator	O
:	O
As	O
@	O
StuartMarks	O
points	O
out	O
,	O
the	O
combiner	O
does	O
not	O
fullfill	O
the	O
contract	O
for	O
parallelism	O
.	O
Due	O
to	O
the	O
comment	O
of	O
@	O
ArnaudDenoyelle	O
a	O
version	O
using	O
reduce	O
.	O
#	O
pre	O
#	O
li	O
The	O
first	O
parameter	O
is	O
the	O
accumulated	O
object	O
.	O
#	O
li	O
The	O
second	O
function	O
accumulates	O
.	O
#	O
li	O
The	O
third	O
is	O
the	O
aforementioned	O
combiner	O
.	O
Question	O
-	O
9297899	O
We	O
can	O
determine	O
the	O
length	O
of	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
using	O
its	O
public	O
method	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
like	O
#	O
pre	O
Similarly	O
we	O
can	O
determine	O
the	O
length	O
of	O
an	O
Array	O
object	O
using	O
the	O
length	O
property	O
#	O
pre	O
Whereas	O
the	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
ArrayList	B-api_mention
is	O
defined	O
inside	O
the	O
ArrayList	B-api_mention
class	O
,	O
where	O
is	O
this	O
length	O
property	O
of	O
Array	O
defined	O
?	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908302	O
With	O
strings	O
you	O
'	O
re	O
going	O
to	O
want	O
to	O
use	O
the	O
equals	O
method	O
of	O
Strings	O
.	O
That	O
aside	O
,	O
you	O
already	O
have	O
the	O
enum	O
that	O
you	O
could	O
compare	O
with	O
the	O
equality	O
operator	O
.	O
Under	O
what	O
scenario	O
would	O
this	O
arise	O
?	O
That	O
being	O
said	O
,	O
yes	O
,	O
the	O
.	O
equals	O
method	O
will	O
return	O
true	O
if	O
they	O
are	O
the	O
same	O
.	O
I	O
'	O
m	O
not	O
sure	O
about	O
equality	O
operator	O
,	O
and	O
without	O
looking	O
it	O
up	O
,	O
I	O
can	O
tell	O
you	O
that	O
it	O
'	O
s	O
poor	O
programming	O
to	O
use	O
it	O
if	O
it	O
is	O
.	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
16226168	O
I	O
would	O
not	O
use	O
URLEncoder	B-api_mention
.	O
Besides	O
being	O
incorrectly	O
named	O
(	O
URLEncoder	B-api_mention
has	O
nothing	O
to	O
do	O
with	O
URLs	O
)	O
,	O
inefficient	O
(	O
it	O
uses	O
a	O
StringBuffer	B-api_mention
instead	O
of	O
Builder	B-api_mention
and	O
does	O
a	O
couple	O
of	O
other	O
things	O
that	O
are	O
slow	O
)	O
Its	O
also	O
way	O
too	O
easy	O
to	O
screw	O
it	O
up	O
.	O
Instead	O
I	O
would	O
use	O
URIBuilder	B-api_mention
or	O
Spring	O
'	O
s	O
URIUtils	B-api_mention
or	O
Commons	O
Apache	O
HttpClient	B-api_mention
.	O
The	O
reason	O
being	O
you	O
have	O
to	O
escape	O
the	O
query	O
parameters	O
name	O
(	O
ie	O
BalusC	O
'	O
s	O
answer	O
q	O
)	O
differently	O
than	O
the	O
parameter	O
value	O
.	O
The	O
only	O
downside	O
to	O
the	O
above	O
(	O
that	O
I	O
found	O
out	O
painfully	O
)	O
is	O
that	O
URL	O
'	O
s	O
are	O
not	O
a	O
true	O
subset	O
of	O
URI	O
'	O
s	O
.	O
Since	O
I	O
'	O
m	O
just	O
linking	O
to	O
other	O
answers	O
I	O
marked	O
this	O
as	O
a	O
community	O
wiki	O
.	O
Feel	O
free	O
to	O
edit	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846960	O
From	O
Effective	O
Java	O
,	O
Item	O
#	O
43	O
-	O
StringLiteral	O
demonstrates	O
returning	O
an	O
empty	O
collection	O
and	O
perhaps	O
even	O
demonstrates	O
using	O
these	O
emptyList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
emptySet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
emptyMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
the	O
Collections	B-api_mention
class	O
to	O
get	O
an	O
empty	O
collection	O
that	O
also	O
has	O
the	O
additional	O
benefit	O
of	O
being	O
immutable	O
.	O
From	O
Item	O
#	O
15	O
StringLiteral	O
.	O
From	O
Collections	B-api_mention
-	O
emptySet	B-api_mention
-	O
Collections	B-api_mention
-	O
emptyList	B-api_mention
-	O
Collections	B-api_mention
#	O
blockquote	O
Note	O
:	O
Below	O
code	O
is	O
just	O
an	O
example	O
(	O
change	O
it	O
according	O
to	O
your	O
use	O
case	O
)	O
:	O
#	O
pre	O
These	O
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
:	O
#	O
li	O
They	O
'	O
re	O
more	O
concise	O
because	O
you	O
don	O
'	O
t	O
need	O
to	O
explicitly	O
type	O
out	O
the	O
generic	O
type	O
of	O
the	O
collection	O
-	O
it	O
'	O
s	O
generally	O
just	O
inferred	O
from	O
the	O
context	O
of	O
the	O
method	O
call	O
.	O
#	O
li	O
They	O
'	O
re	O
more	O
efficient	O
because	O
they	O
don	O
'	O
t	O
bother	O
creating	O
new	O
objects	O
;	O
they	O
just	O
re	O
-	O
use	O
an	O
existing	O
empty	O
and	O
immutable	O
object	O
.	O
This	O
effect	O
is	O
generally	O
very	O
minor	O
,	O
but	O
it	O
'	O
s	O
occasionally	O
(	O
well	O
,	O
rarely	O
)	O
important	O
.	O
Question	O
-	O
34250207	O
As	O
I	O
recall	O
,	O
before	O
Java	O
8	O
,	O
the	O
default	O
capacity	O
of	O
ArrayList	B-api_mention
was	O
10	O
.	O
Surprisingly	O
,	O
the	O
comment	O
on	O
the	O
default	O
(	O
void	O
)	O
constructor	O
still	O
says	O
:	O
Constructs	O
an	O
empty	O
list	O
with	O
an	O
initial	O
capacity	O
of	O
ten	O
.	O
From	O
ArrayList	O
.	O
java	O
:	O
#	O
pre	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28319221	O
Don	O
'	O
t	O
worry	O
about	O
any	O
performance	O
differences	O
,	O
they	O
'	O
re	O
going	O
to	O
be	O
minimal	O
in	O
this	O
case	O
normally	O
.	O
Method	O
2	O
is	O
preferable	O
because	O
#	O
li	O
it	O
doesn	O
'	O
t	O
require	O
mutating	O
a	O
collection	O
that	O
exists	O
outside	O
the	O
lambda	O
expression	O
,	O
#	O
li	O
it	O
'	O
s	O
more	O
readable	O
because	O
the	O
different	O
steps	O
that	O
are	O
performed	O
in	O
the	O
collection	O
pipeline	O
are	O
written	O
sequentially	O
(	O
first	O
a	O
filter	O
operation	O
,	O
then	O
a	O
map	O
operation	O
,	O
then	O
collecting	O
the	O
result	O
)	O
,	O
(	O
for	O
more	O
info	O
on	O
the	O
benefits	O
of	O
collection	O
pipelines	O
,	O
see	O
Martin	O
Fowler	O
'	O
s	O
excellent	O
article	O
)	O
#	O
li	O
you	O
can	O
easily	O
change	O
the	O
way	O
values	O
are	O
collected	O
by	O
replacing	O
the	O
Collector	B-api_mention
that	O
is	O
used	O
.	O
In	O
some	O
cases	O
you	O
may	O
need	O
to	O
write	O
your	O
own	O
Collector	B-api_mention
,	O
but	O
then	O
the	O
benefit	O
is	O
that	O
you	O
can	O
easily	O
reuse	O
that	O
.	O
Question	O
-	O
7935858	O
,	O
answer	O
-	O
7935873	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
.	I-api_mention
split	I-api_mention
splits	O
on	O
regular	O
expressions	O
,	O
and	O
.	O
in	O
a	O
regular	O
expression	O
means	O
"	O
any	O
character	O
"	O
.	O
Try	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
38628203	O
In	O
intellij	O
you	O
can	O
auto	O
generate	O
toString	B-api_mention
method	O
by	O
pressing	O
alt	O
+	O
inset	O
and	O
then	O
selecting	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
here	O
is	O
an	O
out	O
put	O
for	O
a	O
test	O
class	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
generates	O
a	O
String	B-api_mention
by	O
concatenating	O
,	O
several	O
attributes	O
of	O
the	O
class	O
,	O
for	O
primitives	O
it	O
will	O
print	O
their	O
values	O
and	O
for	O
reference	O
types	O
it	O
will	O
use	O
their	O
class	O
type	O
(	O
in	O
this	O
case	O
to	O
string	O
method	O
of	O
Test2	O
)	O
.	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271668	O
I	O
'	O
m	O
assuming	O
this	O
is	O
happening	O
for	O
an	O
anonymous	O
class	O
.	O
When	O
you	O
create	O
an	O
anonymous	O
class	O
you	O
actually	O
create	O
a	O
class	O
that	O
extends	O
the	O
class	O
whose	O
name	O
you	O
got	O
.	O
The	O
"	O
cleaner	O
"	O
way	O
to	O
get	O
the	O
name	O
you	O
want	O
is	O
:	O
If	O
your	O
class	O
is	O
an	O
anonymous	O
inner	O
class	O
,	O
getSuperClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
give	O
you	O
the	O
class	O
that	O
it	O
was	O
created	O
from	O
.	O
If	O
you	O
created	O
it	O
from	O
an	O
interface	O
than	O
you	O
'	O
re	O
sort	O
of	O
SOL	O
because	O
the	O
best	O
you	O
can	O
do	O
is	O
getInterfaces	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
might	O
give	O
you	O
more	O
than	O
one	O
interface	O
.	O
The	O
"	O
hacky	O
"	O
way	O
is	O
to	O
just	O
get	O
the	O
name	O
with	O
getClassName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
use	O
a	O
regex	O
to	O
drop	O
the	O
$	O
1	O
.	O
Question	O
-	O
24676877	O
,	O
answer	O
-	O
24681959	O
I	O
have	O
a	O
few	O
points	O
to	O
add	O
to	O
Brian	O
Goetz	O
'	O
excellent	O
answer	O
.	O
It	O
'	O
s	O
quite	O
common	O
to	O
return	O
a	O
Stream	B-api_mention
from	O
a	O
"	O
getter	O
"	O
style	O
method	O
call	O
.	O
See	O
the	O
Stream	B-api_mention
usage	O
page	O
in	O
the	O
Java	O
8	O
javadoc	O
and	O
look	O
for	O
"	O
methods	O
.	O
.	O
.	O
that	O
return	O
Stream	B-api_mention
"	O
for	O
the	O
packages	O
other	O
than	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
.	O
These	O
methods	O
are	O
usually	O
on	O
classes	O
that	O
represent	O
or	O
can	O
contain	O
multiple	O
values	O
or	O
aggregations	O
of	O
something	O
.	O
In	O
such	O
cases	O
,	O
APIs	O
typically	O
have	O
returned	O
collections	O
or	O
arrays	O
of	O
them	O
.	O
For	O
all	O
the	O
reasons	O
that	O
Brian	O
noted	O
in	O
his	O
answer	O
,	O
it	O
'	O
s	O
very	O
flexible	O
to	O
add	O
Stream	O
-	O
returning	O
methods	O
here	O
.	O
Many	O
of	O
these	O
classes	O
have	O
collections	O
-	O
or	O
array	O
-	O
returning	O
methods	O
already	O
,	O
because	O
the	O
classes	O
predate	O
the	O
Streams	B-api_mention
API	O
.	O
If	O
you	O
'	O
re	O
designing	O
a	O
new	O
API	O
,	O
and	O
it	O
makes	O
sense	O
to	O
provide	O
Stream	O
-	O
returning	O
methods	O
,	O
it	O
might	O
not	O
be	O
necessary	O
to	O
add	O
collection	O
-	O
returning	O
methods	O
as	O
well	O
.	O
Brian	O
mentioned	O
the	O
cost	O
of	O
"	O
materializing	O
"	O
the	O
values	O
into	O
a	O
collection	O
.	O
To	O
amplify	O
this	O
point	O
,	O
there	O
are	O
actually	O
two	O
costs	O
here	O
:	O
the	O
cost	O
of	O
storing	O
values	O
in	O
the	O
collection	O
(	O
memory	O
allocation	O
and	O
copying	O
)	O
and	O
also	O
the	O
cost	O
of	O
creating	O
the	O
values	O
in	O
the	O
first	O
place	O
.	O
The	O
latter	O
cost	O
can	O
often	O
be	O
reduced	O
or	O
avoided	O
by	O
taking	O
advantage	O
of	O
a	O
Stream	O
'	O
s	O
laziness	O
-	O
seeking	O
behavior	O
.	O
A	O
good	O
example	O
of	O
this	O
are	O
the	O
APIs	O
in	O
java	B-api_mention
.	I-api_mention
nio	I-api_mention
.	I-api_mention
file	I-api_mention
.	I-api_mention
Files	I-api_mention
:	O
#	O
pre	O
Not	O
only	O
does	O
readAllLines	B-api_mention
have	O
to	O
hold	O
the	O
entire	O
file	O
contents	O
in	O
memory	O
in	O
order	O
to	O
store	O
it	O
into	O
the	O
result	O
list	O
,	O
it	O
also	O
has	O
to	O
read	O
the	O
file	O
to	O
the	O
very	O
end	O
before	O
it	O
returns	O
the	O
list	O
.	O
The	O
lines	B-api_mention
method	O
can	O
return	O
almost	O
immediately	O
after	O
it	O
has	O
performed	O
some	O
setup	O
,	O
leaving	O
file	O
reading	O
and	O
line	O
breaking	O
until	O
later	O
when	O
it	O
'	O
s	O
necessary	O
-	O
-	O
or	O
not	O
at	O
all	O
.	O
This	O
is	O
a	O
huge	O
benefit	O
,	O
if	O
for	O
example	O
,	O
the	O
caller	O
is	O
interested	O
only	O
in	O
the	O
first	O
ten	O
lines	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
firstTen	O
=	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Of	O
course	O
considerable	O
memory	O
space	O
can	O
be	O
saved	O
if	O
the	O
caller	O
filters	O
the	O
stream	O
to	O
return	O
only	O
lines	O
matching	O
a	O
pattern	O
,	O
etc	O
.	O
An	O
idiom	O
that	O
seems	O
to	O
be	O
emerging	O
is	O
to	O
name	O
stream	O
-	O
returning	O
methods	O
after	O
the	O
plural	O
of	O
the	O
name	O
of	O
the	O
things	O
that	O
it	O
represents	O
or	O
contains	O
,	O
without	O
a	O
get	O
prefix	O
.	O
Also	O
,	O
while	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
reasonable	O
name	O
for	O
a	O
stream	O
-	O
returning	O
method	O
when	O
there	O
is	O
only	O
one	O
possible	O
set	O
of	O
values	O
to	O
be	O
returned	O
,	O
sometimes	O
there	O
are	O
classes	O
that	O
have	O
aggregations	O
of	O
multiple	O
types	O
of	O
values	O
.	O
For	O
example	O
,	O
suppose	O
you	O
have	O
some	O
object	O
that	O
contains	O
both	O
attributes	O
and	O
elements	O
.	O
You	O
might	O
provide	O
two	O
stream	O
-	O
returning	O
APIs	O
:	O
#	O
pre	O
Question	O
-	O
19235606	O
,	O
answer	O
-	O
19235863	O
You	O
should	O
almost	O
certainly	O
never	O
have	O
to	O
deal	O
with	O
Spliterator	B-api_mention
as	O
a	O
user	O
;	O
it	O
should	O
only	O
be	O
necessary	O
if	O
you	O
'	O
re	O
writing	O
Collection	B-api_mention
types	O
yourself	O
and	O
also	O
intending	O
to	O
optimize	O
parallelized	O
operations	O
on	O
them	O
.	O
For	O
what	O
it	O
'	O
s	O
worth	O
,	O
a	O
Spliterator	B-api_mention
is	O
a	O
way	O
of	O
operating	O
over	O
the	O
elements	O
of	O
a	O
collection	O
in	O
a	O
way	O
that	O
it	O
'	O
s	O
easy	O
to	O
split	O
off	O
part	O
of	O
the	O
collection	O
,	O
e	O
.	O
g	O
.	O
because	O
you	O
'	O
re	O
parallelizing	O
and	O
want	O
one	O
thread	O
to	O
work	O
on	O
one	O
part	O
of	O
the	O
collection	O
,	O
one	O
thread	O
to	O
work	O
on	O
another	O
part	O
,	O
etc	O
.	O
You	O
should	O
essentially	O
never	O
be	O
saving	O
values	O
of	O
type	O
Stream	B-api_mention
to	O
a	O
variable	O
,	O
either	O
.	O
Stream	B-api_mention
is	O
sort	O
of	O
like	O
an	O
Iterator	B-api_mention
,	O
in	O
that	O
it	O
'	O
s	O
a	O
one	O
-	O
time	O
-	O
use	O
object	O
that	O
you	O
'	O
ll	O
almost	O
always	O
use	O
in	O
a	O
fluent	O
chain	O
,	O
as	O
in	O
the	O
Javadoc	O
example	O
:	O
int	O
sum	O
=	O
widgets	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
mapToInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sum	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Collector	B-api_mention
is	O
the	O
most	O
generalized	O
,	O
abstract	O
possible	O
version	O
of	O
a	O
"	O
reduce	O
"	O
operation	O
a	O
la	O
map	O
/	O
reduce	O
;	O
in	O
particular	O
,	O
it	O
needs	O
to	O
support	O
parallelization	O
and	O
finalization	O
steps	O
.	O
Examples	O
of	O
Collector	B-api_mention
s	O
include	O
:	O
#	O
li	O
summing	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
reducing	I-api_mention
(	O
args	O
)	O
#	O
li	O
StringBuilder	B-api_mention
appending	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
18448671	O
,	O
answer	O
-	O
18448699	O
Use	O
an	O
Iterator	B-api_mention
and	O
call	O
remove	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375716	O
String	B-api_mention
is	O
immutable	O
irrespective	O
of	O
how	O
it	O
is	O
instantiated	O
1	O
)	O
Short	O
answer	O
is	O
yes	O
,	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
immutable	O
too	O
.	O
Because	O
every	O
possible	O
mutable	O
operation	O
(	O
like	O
replace	O
,	O
toLowerCase	B-api_mention
etcetra	O
)	O
that	O
you	O
perform	O
on	O
String	B-api_mention
does	O
not	O
affect	O
the	O
original	O
String	B-api_mention
instance	O
and	O
returns	O
you	O
a	O
new	O
instance	O
.	O
You	O
may	O
check	O
this	O
in	O
Javadoc	O
for	O
String	B-api_mention
.	O
Each	O
public	O
method	O
of	O
String	B-api_mention
that	O
is	O
exposed	O
returns	O
a	O
new	O
String	B-api_mention
instance	O
and	O
does	O
not	O
alter	O
the	O
present	O
instance	O
on	O
which	O
you	O
called	O
the	O
method	O
.	O
This	O
is	O
very	O
helpful	O
in	O
Multi	O
-	O
threaded	O
environment	O
as	O
you	O
don	O
'	O
t	O
have	O
to	O
think	O
about	O
mutability	O
(	O
someone	O
will	O
change	O
the	O
value	O
)	O
every	O
time	O
you	O
pass	O
or	O
share	O
the	O
String	B-api_mention
around	O
.	O
String	B-api_mention
can	O
easily	O
be	O
the	O
most	O
used	O
data	O
type	O
,	O
so	O
the	O
designers	O
have	O
blessed	O
us	O
all	O
to	O
not	O
think	O
about	O
mutability	O
everytime	O
and	O
saved	O
us	O
a	O
lot	O
of	O
pain	O
.	O
Immutability	O
allowed	O
String	B-api_mention
pool	O
or	O
caching	O
It	O
is	O
because	O
of	O
immutability	O
property	O
that	O
the	O
internal	O
pool	O
of	O
string	O
was	O
possible	O
,	O
as	O
when	O
same	O
String	B-api_mention
value	O
is	O
required	O
at	O
some	O
other	O
place	O
then	O
that	O
immutable	O
reference	O
is	O
returned	O
.	O
If	O
String	B-api_mention
would	O
have	O
been	O
mutable	O
then	O
it	O
would	O
not	O
have	O
been	O
possible	O
to	O
share	O
String	B-api_mention
s	O
like	O
this	O
to	O
save	O
memory	O
.	O
String	B-api_mention
immutablity	O
was	O
not	O
because	O
of	O
pooling	O
,	O
but	O
immutability	O
has	O
more	O
benefits	O
attached	O
to	O
it	O
.	O
String	B-api_mention
interning	O
or	O
pooling	O
is	O
an	O
example	O
of	O
Flyweight	O
Design	O
pattern	O
2	O
)	O
Yes	O
it	O
will	O
be	O
interned	O
like	O
any	O
other	O
String	B-api_mention
as	O
a	O
blank	O
String	B-api_mention
is	O
also	O
as	O
much	O
a	O
String	B-api_mention
as	O
other	O
String	B-api_mention
instances	O
.	O
References	O
:	O
#	O
li	O
Immutability	O
benefits	O
of	O
String	B-api_mention
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489410	O
Java	O
String	B-api_mention
is	O
Special	O
#	O
blockquote	O
For	O
example	O
#	O
pre	O
#	O
img	O
Note	O
:	O
String	B-api_mention
literals	O
are	O
stored	O
in	O
a	O
common	O
pool	O
.	O
This	O
facilitates	O
sharing	O
of	O
storage	O
for	O
strings	O
with	O
the	O
same	O
contents	O
to	O
conserve	O
storage	O
.	O
String	B-api_mention
objects	O
allocated	O
via	O
new	O
operator	O
are	O
stored	O
in	O
the	O
heap	O
,	O
and	O
there	O
is	O
no	O
sharing	O
of	O
storage	O
for	O
the	O
same	O
contents	O
.	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5103360	O
We	O
usually	O
have	O
two	O
IDs	O
in	O
our	O
entities	O
:	O
#	O
li	O
Is	O
for	O
persistence	O
layer	O
only	O
(	O
so	O
that	O
persistence	O
provider	O
and	O
database	O
can	O
figure	O
out	O
relationships	O
between	O
objects	O
)	O
.	O
#	O
li	O
Is	O
for	O
our	O
application	O
needs	O
(	O
equals	O
(	O
args	O
)	O
and	O
hashCode	O
(	O
args	O
)	O
in	O
particular	O
)	O
Take	O
a	O
look	O
:	O
#	O
pre	O
EDIT	O
:	O
to	O
clarify	O
my	O
point	O
regarding	O
calls	O
to	O
setUuid	O
(	O
args	O
)	O
method	O
.	O
Here	O
'	O
s	O
a	O
typical	O
scenario	O
:	O
#	O
pre	O
When	O
I	O
run	O
my	O
tests	O
and	O
see	O
the	O
log	O
output	O
I	O
fix	O
the	O
problem	O
:	O
#	O
pre	O
Alternatively	O
,	O
one	O
can	O
provide	O
a	O
separate	O
constructor	O
:	O
#	O
pre	O
So	O
my	O
example	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
use	O
a	O
default	O
constructor	O
and	O
a	O
setter	O
,	O
but	O
you	O
may	O
find	O
two	O
-	O
constructors	O
approach	O
more	O
suitable	O
for	O
you	O
.	O
Question	O
-	O
25903137	O
,	O
answer	O
-	O
25905196	O
Here	O
are	O
some	O
variations	O
on	O
Sotirios	O
Delimanolis	O
'	O
answer	O
,	O
which	O
was	O
pretty	O
good	O
to	O
begin	O
with	O
(	O
+	O
1	O
)	O
.	O
Consider	O
the	O
following	O
:	O
#	O
pre	O
A	O
couple	O
points	O
here	O
.	O
First	O
is	O
the	O
use	O
of	O
wildcards	O
in	O
the	O
generics	O
;	O
this	O
makes	O
the	O
function	O
somewhat	O
more	O
flexible	O
.	O
A	O
wildcard	O
would	O
be	O
necessary	O
if	O
,	O
for	O
example	O
,	O
you	O
wanted	O
the	O
output	O
map	O
to	O
have	O
a	O
key	O
that	O
'	O
s	O
a	O
superclass	O
of	O
the	O
input	O
map	O
'	O
s	O
key	O
:	O
#	O
pre	O
(	O
There	O
is	O
also	O
an	O
example	O
for	O
the	O
map	O
'	O
s	O
values	O
,	O
but	O
it	O
'	O
s	O
really	O
contrived	O
,	O
and	O
I	O
admit	O
that	O
having	O
the	O
bounded	O
wildcard	O
for	O
Y	O
only	O
helps	O
in	O
edge	O
cases	O
.	O
)	O
A	O
second	O
point	O
is	O
that	O
instead	O
of	O
running	O
the	O
stream	O
over	O
the	O
input	O
map	O
'	O
s	O
entrySet	B-api_mention
,	O
I	O
ran	O
it	O
over	O
the	O
keySet	B-api_mention
.	O
This	O
makes	O
the	O
code	O
a	O
little	O
cleaner	O
,	O
I	O
think	O
,	O
at	O
the	O
cost	O
of	O
having	O
to	O
fetch	O
values	O
out	O
of	O
the	O
map	O
instead	O
of	O
from	O
the	O
map	O
entry	O
.	O
Incidentally	O
,	O
I	O
initially	O
had	O
key	O
-	O
>	O
key	O
as	O
the	O
first	O
argument	O
to	O
toMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
this	O
failed	O
with	O
a	O
type	O
inference	O
error	O
for	O
some	O
reason	O
.	O
Changing	O
it	O
to	O
(	O
X	O
key	O
)	O
-	O
>	O
key	O
worked	O
,	O
as	O
did	O
Function	B-api_mention
.	I-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Still	O
another	O
variation	O
is	O
as	O
follows	O
:	O
#	O
pre	O
This	O
uses	O
Map	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
streams	O
.	O
This	O
is	O
even	O
simpler	O
,	O
I	O
think	O
,	O
because	O
it	O
dispenses	O
with	O
the	O
collectors	O
,	O
which	O
are	O
somewhat	O
clumsy	O
to	O
use	O
with	O
maps	O
.	O
The	O
reason	O
is	O
that	O
Map	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
the	O
key	O
and	O
value	O
as	O
separate	O
parameters	O
,	O
whereas	O
the	O
stream	O
has	O
only	O
one	O
value	O
-	O
-	O
and	O
you	O
have	O
to	O
choose	O
whether	O
to	O
use	O
the	O
key	O
or	O
the	O
map	O
entry	O
as	O
that	O
value	O
.	O
On	O
the	O
minus	O
side	O
,	O
this	O
lacks	O
the	O
rich	O
,	O
streamy	O
goodness	O
of	O
the	O
other	O
approaches	O
.	O
:	O
-	O
)	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28588854	O
The	O
correct	O
answer	O
is	O
a	O
simple	O
"	O
because	O
the	O
standard	O
(	O
and	O
the	O
docs	O
)	O
say	O
so	O
"	O
.	O
But	O
I	O
'	O
m	O
not	O
gonna	O
be	O
cynical	O
because	O
it	O
'	O
s	O
obvious	O
that	O
'	O
s	O
not	O
what	O
you	O
are	O
after	O
.	O
In	O
addition	O
to	O
the	O
other	O
answers	O
here	O
,	O
I	O
'	O
ll	O
try	O
to	O
relate	O
the	O
infinities	O
to	O
saturating	O
arithmetic	O
.	O
Other	O
answers	O
have	O
already	O
stated	O
that	O
the	O
reason	O
the	O
comparisons	O
on	O
NaNs	O
result	O
in	O
true	O
,	O
so	O
I	O
'	O
m	O
not	O
gonna	O
beat	O
a	O
dead	O
horse	O
.	O
Let	O
'	O
s	O
say	O
I	O
have	O
a	O
saturating	O
integer	O
that	O
represents	O
grayscale	O
colors	O
.	O
Why	O
am	O
I	O
using	O
saturating	O
arithmetic	O
?	O
Because	O
anything	O
brighter	O
than	O
white	O
is	O
still	O
white	O
,	O
and	O
anything	O
darker	O
than	O
black	O
is	O
still	O
black	O
(	O
except	O
orange	O
)	O
.	O
That	O
means	O
BLACK	O
-	O
x	O
=	O
=	O
BLACK	O
and	O
WHITE	O
+	O
x	O
=	O
=	O
WHITE	O
.	O
Makes	O
sense	O
?	O
Now	O
,	O
let	O
'	O
s	O
say	O
we	O
want	O
to	O
represent	O
those	O
grayscale	O
colors	O
with	O
a	O
(	O
signed	O
)	O
1s	O
complement	O
8	O
-	O
bit	O
integer	O
where	O
BLACK	O
=	O
=	O
-	O
127	O
and	O
WHITE	O
=	O
=	O
127	O
.	O
Why	O
1s	O
complement	O
?	O
Because	O
it	O
gives	O
us	O
a	O
signed	O
zero	O
like	O
IEEE	O
754	O
floating	O
point	O
.	O
And	O
,	O
because	O
we	O
are	O
using	O
saturating	O
arithmetic	O
,	O
-	O
127	O
-	O
x	O
=	O
=	O
-	O
127	O
and	O
127	O
+	O
x	O
=	O
=	O
127	O
.	O
How	O
does	O
this	O
relate	O
to	O
floating	O
point	O
infinities	O
?	O
Replace	O
the	O
integer	O
with	O
floating	O
point	O
,	O
BLACK	O
with	O
NEGATIVE	O
_	O
INFINITY	O
,	O
and	O
WHITE	O
with	O
POSITIVE	O
_	O
INFINITY	O
and	O
what	O
do	O
you	O
get	O
?	O
NEGATIVE	O
_	O
INFINITY	O
-	O
x	O
=	O
=	O
NEGATIVE	O
_	O
INFINITY	O
and	O
POSITIVE	O
_	O
INFINITY	O
+	O
x	O
=	O
=	O
POSITIVE	O
_	O
INFINITY	O
.	O
Since	O
you	O
used	O
POSITIVE	O
_	O
INFINITY	O
,	O
I	O
'	O
ll	O
use	O
it	O
also	O
.	O
First	O
we	O
need	O
a	O
class	O
to	O
represent	O
our	O
saturating	O
integer	O
-	O
based	O
color	O
;	O
let	O
'	O
s	O
call	O
it	O
SaturatedColor	O
and	O
assume	O
it	O
works	O
like	O
any	O
other	O
integer	O
in	O
Java	O
.	O
Now	O
,	O
let	O
'	O
s	O
take	O
your	O
code	O
and	O
replace	O
double	O
with	O
our	O
own	O
SaturatedColor	O
and	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
with	O
SaturatedColor	O
.	O
WHITE	O
:	O
#	O
pre	O
As	O
we	O
established	O
above	O
,	O
SaturatedColor	O
.	O
WHITE	O
(	O
just	O
WHITE	O
above	O
)	O
is	O
127	O
,	O
so	O
let	O
'	O
s	O
do	O
that	O
here	O
:	O
#	O
pre	O
Now	O
we	O
take	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
statements	O
you	O
used	O
and	O
replace	O
a	O
and	O
b	O
with	O
their	O
value	O
(	O
values	O
?	O
)	O
:	O
#	O
pre	O
It	O
should	O
be	O
obvious	O
what	O
this	O
will	O
print	O
.	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
34295445	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
)	I-api_mention
We	O
use	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
extract	O
request	O
parameters	O
(	O
i	O
.	O
e	O
.	O
data	O
sent	O
by	O
posting	O
a	O
html	O
form	O
)	O
.	O
The	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
returns	O
String	B-api_mention
value	O
and	O
the	O
data	O
come	O
from	O
client	O
.	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
)	I-api_mention
We	O
use	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
an	O
object	O
added	O
to	O
the	O
request	O
scope	O
on	O
the	O
server	O
side	O
i	O
.	O
e	O
.	O
using	O
request	O
.	B-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
can	O
add	O
any	O
type	O
of	O
object	O
you	O
like	O
here	O
,	O
Strings	O
,	O
Custom	O
objects	O
,	O
in	O
fact	O
any	O
object	O
.	O
You	O
add	O
the	O
attribute	O
to	O
the	O
request	O
and	O
forward	O
the	O
request	O
to	O
another	O
resource	O
,	O
the	O
client	O
does	O
not	O
know	O
about	O
this	O
.	O
So	O
all	O
the	O
code	O
handling	O
this	O
would	O
typically	O
be	O
in	O
JSP	O
/	O
servlets	O
.	O
You	O
can	O
use	O
request	O
.	B-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
add	O
extra	O
-	O
information	O
and	O
forward	O
/	O
redirect	O
the	O
current	O
request	O
to	O
another	O
resource	O
.	O
For	O
example	O
,	O
consider	O
about	O
first	O
.	O
jsp	O
,	O
#	O
pre	O
and	O
second	O
.	O
jsp	O
:	O
#	O
pre	O
From	O
your	O
browser	O
,	O
run	O
first	O
.	O
jsp	O
?	O
CLIENT	O
=	O
you	O
and	O
the	O
output	O
on	O
your	O
browser	O
is	O
#	O
pre	O
The	O
basic	O
difference	O
between	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
that	O
the	O
first	O
method	O
extracts	O
a	O
(	O
serialized	O
)	O
Java	O
object	O
and	O
the	O
other	O
provides	O
a	O
String	B-api_mention
value	O
.	O
For	O
both	O
cases	O
a	O
name	O
is	O
given	O
so	O
that	O
its	O
value	O
(	O
be	O
it	O
string	O
or	O
a	O
java	O
bean	O
)	O
can	O
be	O
looked	O
up	O
and	O
extracted	O
.	O
Question	O
-	O
31993377	O
Question	O
How	O
is	O
it	O
that	O
for	O
a	O
scanner	O
object	O
the	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
true	O
while	O
the	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
false	O
?	O
Note	O
:	O
Based	O
on	O
the	O
input	O
file	O
,	O
the	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
returning	O
the	O
result	O
as	O
expected	O
;	O
the	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
seem	O
to	O
be	O
returning	O
the	O
correct	O
result	O
.	O
Code	O
Here	O
'	O
s	O
the	O
code	O
I	O
'	O
m	O
running	O
that	O
'	O
s	O
creating	O
the	O
results	O
below	O
:	O
#	O
pre	O
Input	O
File	O
The	O
following	O
is	O
the	O
actual	O
content	O
of	O
the	O
file	O
that	O
I	O
'	O
m	O
passing	O
to	O
this	O
scanner	O
:	O
#	O
pre	O
Result	O
The	O
following	O
is	O
the	O
end	O
of	O
what	O
'	O
s	O
printed	O
in	O
the	O
console	O
when	O
I	O
run	O
my	O
code	O
,	O
and	O
includes	O
the	O
portion	O
I	O
can	O
'	O
t	O
make	O
sense	O
of	O
:	O
#	O
pre	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331243	O
Create	O
a	O
DateTimeFormatter	B-api_mention
using	O
DateTimeFormat	B-api_mention
.	I-api_mention
forPattern	I-api_mention
(	O
String	B-api_mention
)	O
Using	O
Joda	O
time	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
Also	O
,	O
if	O
you	O
wanted	O
to	O
use	O
standard	O
Java	O
,	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408482	O
The	O
Java	O
language	O
provides	O
special	O
support	O
for	O
the	O
string	O
concatenation	O
operator	O
(	O
+	O
)	O
and	O
for	O
conversion	O
of	O
other	O
objects	O
to	O
strings	O
.	O
String	B-api_mention
concatenation	O
is	O
implemented	O
through	O
the	O
StringBuilder	B-api_mention
(	O
or	O
StringBuffer	B-api_mention
)	O
class	O
and	O
its	O
append	O
method	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25850622	O
a	O
.	O
I	O
have	O
always	O
seen	O
them	O
as	O
a	O
design	O
pattern	O
and	O
nothing	O
JVM	O
-	O
Special	O
I	O
have	O
used	O
that	O
pattern	O
in	O
several	O
situations	O
.	O
c	O
.	O
I	O
beleive	O
that	O
using	O
Annotations	B-api_mention
to	O
mark	O
something	O
is	O
a	O
better	O
solution	O
then	O
using	O
marker	O
interfaces	O
.	O
Simply	O
because	O
Interfaces	B-api_mention
are	O
in	O
the	O
first	O
place	O
aimed	O
to	O
define	O
common	O
interfaces	O
of	O
Types	O
/	O
Classes	O
.	O
They	O
are	O
part	O
of	O
the	O
class	O
-	O
hierachy	O
.	O
Annotations	O
are	O
aimed	O
to	O
provide	O
Meta	O
-	O
Informations	O
to	O
Code	O
,	O
and	O
I	O
think	O
that	O
marker	O
are	O
meta	O
-	O
informations	O
.	O
So	O
they	O
are	O
exactly	O
for	O
that	O
use	O
-	O
case	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923105	O
Oh	O
,	O
those	O
coding	O
styles	O
are	O
to	O
be	O
taken	O
with	O
a	O
bit	O
of	O
salt	O
.	O
#	O
li	O
(	O
+	O
)	O
Passing	O
an	O
Option	O
result	O
to	O
another	O
method	O
,	O
without	O
any	O
semantic	O
analysis	O
;	O
leaving	O
that	O
to	O
the	O
method	O
,	O
is	O
quite	O
alright	O
.	O
#	O
li	O
(	O
-	O
)	O
Using	O
Optional	O
parameters	O
causing	O
conditional	O
logic	O
inside	O
the	O
methods	O
is	O
literally	O
contra	O
-	O
productive	O
.	O
#	O
li	O
(	O
-	O
)	O
Needing	O
to	O
pack	O
an	O
argument	O
in	O
an	O
Optional	B-api_mention
,	O
is	O
suboptimal	O
for	O
the	O
compiler	O
,	O
and	O
does	O
an	O
unnecessary	O
wrapping	O
.	O
#	O
li	O
(	O
-	O
)	O
In	O
comparison	O
to	O
nullable	O
parameters	O
Optional	B-api_mention
is	O
more	O
costly	O
.	O
In	O
general	O
:	O
Optional	B-api_mention
unifies	O
two	O
states	O
,	O
which	O
have	O
to	O
be	O
unraveled	O
.	O
Hence	O
better	O
suited	O
for	O
result	O
than	O
input	O
,	O
for	O
the	O
complexity	O
of	O
the	O
data	O
flow	O
.	O
Question	O
-	O
29229373	O
I	O
have	O
the	O
following	O
sample	O
code	O
:	O
#	O
pre	O
The	O
output	O
is	O
as	O
follows	O
:	O
#	O
pre	O
From	O
here	O
I	O
see	O
that	O
in	O
first	O
case	O
stream	O
really	O
behaves	O
lazily	O
-	O
we	O
use	O
findFirst	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
once	O
we	O
have	O
first	O
element	O
our	O
filtering	O
lambda	O
is	O
not	O
invoked	O
.	O
However	O
,	O
in	O
second	O
case	O
which	O
uses	O
flatMaps	O
we	O
see	O
that	O
despite	O
first	O
element	O
which	O
fulfils	O
the	O
filter	O
condition	O
is	O
found	O
(	O
it	O
'	O
s	O
just	O
any	O
first	O
element	O
as	O
lambda	O
always	O
returns	O
true	O
)	O
further	O
contents	O
of	O
the	O
stream	O
are	O
still	O
being	O
fed	O
through	O
filtering	O
function	O
.	O
I	O
am	O
trying	O
to	O
understand	O
why	O
it	O
behaves	O
like	O
this	O
rather	O
than	O
giving	O
up	O
after	O
first	O
element	O
is	O
calculated	O
as	O
in	O
the	O
first	O
case	O
.	O
Any	O
helpful	O
information	O
would	O
be	O
appreciated	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
31265714	O
In	O
Java	O
8	O
,	O
there	O
is	O
also	O
an	O
alternative	O
to	O
using	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
If	O
your	O
input	O
source	O
isn	O
'	O
t	O
a	O
file	O
but	O
something	O
more	O
abstract	O
like	O
a	O
Reader	B-api_mention
or	O
an	O
InputStream	B-api_mention
,	O
you	O
can	O
stream	O
the	O
lines	O
via	O
the	O
BufferedReader	B-api_mention
s	O
lines	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
For	O
example	O
:	O
#	O
pre	O
will	O
call	O
processLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
each	O
input	O
line	O
read	O
by	O
the	O
BufferedReader	B-api_mention
.	O
Question	O
-	O
29945627	O
,	O
answer	O
-	O
29945754	O
The	O
lambda	O
:	O
(	O
)	O
-	O
>	O
{	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
}	O
;	O
actually	O
represents	O
an	O
implementation	O
for	O
an	O
interface	O
like	O
:	O
#	O
pre	O
which	O
is	O
completely	O
different	O
than	O
the	O
one	O
you	O
'	O
ve	O
defined	O
.	O
That	O
'	O
s	O
why	O
you	O
get	O
an	O
error	O
.	O
Since	O
you	O
can	O
'	O
t	O
extend	O
your	O
@	O
FunctionalInterface	O
,	O
nor	O
introduce	O
a	O
brand	O
new	O
one	O
,	O
then	O
I	O
think	O
you	O
don	O
'	O
t	O
have	O
much	O
options	O
.	O
You	O
can	O
use	O
the	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interfaces	O
to	O
denote	O
that	O
some	O
of	O
the	O
values	O
(	O
return	O
type	O
or	O
method	O
parameter	O
)	O
is	O
missing	O
,	O
though	O
.	O
However	O
,	O
this	O
won	O
'	O
t	O
make	O
the	O
lambda	O
body	O
simpler	O
.	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31188818	O
Ironically	O
default	O
methods	O
in	O
interfaces	O
were	O
introduced	O
to	O
allow	O
existing	O
libraries	O
using	O
those	O
interfaces	O
not	O
to	O
break	O
,	O
while	O
introducing	O
massive	O
new	O
functionality	O
in	O
the	O
interfaces	O
.	O
(	O
backward	O
compatibility	O
.	O
)	O
Conflicts	O
like	O
that	O
sort	O
method	O
might	O
arise	O
.	O
Something	O
to	O
pay	O
for	O
the	O
extra	O
functionality	O
.	O
In	O
your	O
case	O
also	O
something	O
to	O
investigate	O
(	O
should	O
new	O
functionality	O
be	O
used	O
instead	O
?	O
)	O
.	O
Java	O
forward	O
compatibility	O
breaks	O
are	O
little	O
,	O
more	O
in	O
its	O
typing	O
system	O
,	O
which	O
was	O
constantly	O
enlarged	O
.	O
First	O
with	O
generic	O
types	O
and	O
now	O
with	O
inferred	O
types	O
from	O
functional	O
interfaces	O
.	O
From	O
version	O
to	O
version	O
and	O
from	O
compiler	O
to	O
compiler	O
there	O
were	O
slight	O
differences	O
.	O
Question	O
-	O
20363719	O
,	O
answer	O
-	O
34675066	O
I	O
was	O
trying	O
to	O
do	O
this	O
and	O
found	O
that	O
,	O
using	O
the	O
answers	O
above	O
,	O
when	O
using	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
key	O
to	O
the	O
Map	B-api_mention
,	O
then	O
I	O
had	O
issues	O
with	O
using	O
a	O
local	O
method	O
like	O
this	O
:	O
:	O
localMethodName	O
to	O
actually	O
work	O
because	O
of	O
typing	O
issues	O
.	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
actually	O
does	O
something	O
to	O
the	O
typing	O
in	O
this	O
case	O
so	O
the	O
method	O
would	O
only	O
work	O
by	O
returning	O
Object	B-api_mention
and	O
accepting	O
a	O
param	O
of	O
Object	B-api_mention
To	O
solve	O
this	O
,	O
I	O
ended	O
up	O
ditching	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
using	O
s	O
-	O
>	O
s	O
instead	O
.	O
So	O
my	O
code	O
,	O
in	O
my	O
case	O
to	O
list	O
all	O
directories	O
inside	O
a	O
directory	O
,	O
and	O
for	O
each	O
one	O
use	O
the	O
name	O
of	O
the	O
directory	O
as	O
the	O
key	O
to	O
the	O
map	O
and	O
then	O
call	O
a	O
method	O
with	O
the	O
directory	O
name	O
and	O
return	O
a	O
collection	O
of	O
items	O
,	O
looks	O
like	O
:	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
items	O
=	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
32676771	O
,	O
answer	O
-	O
32677400	O
Despite	O
of	O
the	O
fact	O
that	O
there	O
is	O
no	O
AtomicDouble	O
or	O
AtomicDoubleArray	O
in	O
java	O
,	O
you	O
can	O
easily	O
create	O
your	O
own	O
based	O
on	O
AtomicLongArray	O
.	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
I	O
use	O
Double	B-api_mention
.	I-api_mention
doubleToLongBits	I-api_mention
and	O
Double	B-api_mention
.	I-api_mention
longBitsToDouble	I-api_mention
to	O
store	O
Doubles	O
as	O
Longs	O
in	O
AtomicLongArray	O
.	O
They	O
both	O
have	O
the	O
same	O
size	O
in	O
bits	O
,	O
so	O
precision	O
is	O
not	O
lost	O
(	O
except	O
for	O
-	O
NaN	O
,	O
but	O
I	O
don	O
'	O
t	O
think	O
it	O
is	O
important	O
)	O
.	O
In	O
Java	O
8	O
the	O
implementation	O
of	O
add	O
can	O
be	O
even	O
easier	O
,	O
as	O
you	O
can	O
use	O
accumulateAndGet	O
method	O
of	O
AtomicLongArray	O
that	O
was	O
added	O
in	O
java	O
1	O
.	O
8	O
.	O
Upd	O
:	O
It	O
appears	O
that	O
I	O
virtually	O
re	O
-	O
implemented	O
guava	O
'	O
s	O
AtomicDoubleArray	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175224	O
Since	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
is	O
not	O
a	O
final	O
method	O
of	O
Object	B-api_mention
,	O
yes	O
,	O
it	O
is	O
very	O
well	O
be	O
possible	O
in	O
a	O
different	O
situation	O
.	O
#	O
pre	O
This	O
question	O
,	O
however	O
,	O
specifically	O
says	O
that	O
these	O
are	O
primitive	O
wrappers	O
(	O
e	O
.	O
g	O
.	O
Integer	B-api_mention
,	O
Boolean	B-api_mention
,	O
etc	O
.	O
)	O
and	O
since	O
these	O
classes	O
are	O
final	O
,	O
you	O
cannot	O
extend	O
them	O
,	O
thus	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
.	O
Question	O
-	O
27908213	O
Are	O
enum	O
names	O
interned	O
in	O
Java	O
?	O
I	O
.	O
e	O
.	O
is	O
it	O
guaranteed	O
that	O
enum1	O
.	O
name	O
(	O
args	O
)	O
=	O
=	O
enum2	O
.	O
name	O
(	O
args	O
)	O
in	O
case	O
of	O
the	O
same	O
name	O
?	O
And	O
is	O
it	O
safe	O
to	O
compare	O
enum	O
.	O
name	O
(	O
args	O
)	O
to	O
a	O
String	B-api_mention
that	O
is	O
guaranteed	O
to	O
be	O
interned	O
.	O
Question	O
-	O
25222811	O
,	O
answer	O
-	O
26676046	O
To	O
begin	O
with	O
(	O
and	O
unrelated	O
)	O
,	O
instantiating	O
the	O
Application	B-api_mention
class	O
by	O
yourself	O
does	O
not	O
seem	O
to	O
be	O
its	O
intended	O
use	O
.	O
From	O
what	O
one	O
can	O
read	O
from	O
its	O
source	O
,	O
you	O
are	O
rather	O
expected	O
to	O
use	O
the	O
static	O
instance	O
returned	O
by	O
getApplication	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Now	O
let	O
'	O
s	O
get	O
to	O
the	O
error	O
Eclipse	O
reports	O
.	O
I	O
'	O
ve	O
ran	O
into	O
a	O
similar	O
issue	O
recently	O
:	O
Access	O
restriction	O
:	O
The	O
method	O
.	O
.	O
.	O
is	O
not	O
API	O
(	O
args	O
)	O
.	O
I	O
called	O
the	O
method	O
in	O
question	O
as	O
a	O
method	O
of	O
an	O
object	O
which	O
inherited	O
that	O
method	O
from	O
a	O
super	O
class	O
.	O
All	O
I	O
had	O
to	O
do	O
was	O
to	O
add	O
the	O
package	O
the	O
super	O
class	O
was	O
in	O
to	O
the	O
packages	O
imported	O
by	O
my	O
plugin	O
.	O
However	O
,	O
there	O
is	O
a	O
lot	O
of	O
different	O
causes	O
for	O
errors	O
based	O
on	O
"	O
restriction	O
on	O
required	O
project	O
/	O
library	O
"	O
.	O
Similar	O
to	O
the	O
problem	O
described	O
above	O
,	O
the	O
type	O
you	O
are	O
using	O
might	O
have	O
dependencies	O
to	O
packages	O
that	O
are	O
not	O
exported	O
by	O
the	O
library	O
or	O
might	O
not	O
be	O
exported	O
itself	O
.	O
In	O
that	O
case	O
you	O
can	O
try	O
to	O
track	O
down	O
the	O
missing	O
packages	O
and	O
export	O
them	O
my	O
yourself	O
,	O
as	O
suggested	O
here	O
,	O
or	O
try	O
Access	O
Rules	O
.	O
Other	O
possible	O
scenarios	O
include	O
:	O
#	O
li	O
Eclipse	O
wants	O
to	O
keep	O
you	O
from	O
using	O
available	O
packages	O
that	O
are	O
not	O
part	O
of	O
the	O
public	O
Java	O
API	O
(	O
solution	O
1	O
,	O
2	O
)	O
#	O
li	O
Dependencies	O
are	O
satisfied	O
by	O
multiple	O
sources	O
,	O
versions	O
are	O
conflicting	O
etc	O
.	O
(	O
solution	O
1	O
,	O
2	O
,	O
3	O
)	O
#	O
li	O
Eclipse	O
is	O
using	O
a	O
JRE	O
where	O
a	O
JDK	O
is	O
necessary	O
(	O
which	O
might	O
be	O
the	O
case	O
here	O
,	O
from	O
what	O
your	O
errors	O
say	O
;	O
solution	O
)	O
or	O
JRE	O
/	O
JDK	O
version	O
in	O
project	O
build	O
path	O
is	O
not	O
the	O
right	O
one	O
This	O
ended	O
up	O
as	O
more	O
like	O
a	O
medley	O
of	O
restriction	O
-	O
related	O
issues	O
than	O
an	O
actual	O
answer	O
.	O
But	O
since	O
restriction	O
on	O
required	O
projects	O
is	O
such	O
a	O
versatile	O
error	O
to	O
be	O
reported	O
,	O
the	O
perfect	O
recipe	O
is	O
probably	O
still	O
to	O
be	O
found	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148619	O
use	O
int	O
as	O
Object	B-api_mention
not	O
as	O
primitive	O
type	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17832168	O
I	O
think	O
the	O
number	O
displayed	O
is	O
the	O
number	O
of	O
time	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
call	O
throws	O
the	O
Stackoverflow	O
exception	O
.	O
It	O
probably	O
depend	O
on	O
the	O
implementation	O
of	O
the	O
println	B-api_mention
and	O
the	O
number	O
of	O
stacking	O
call	O
it	O
is	O
made	O
in	O
it	O
.	O
As	O
an	O
illustration	O
:	O
The	O
main	O
(	O
args	O
)	O
call	O
trigger	O
the	O
Stackoverflow	O
exception	O
at	O
call	O
i	O
.	O
The	O
i	O
-	O
1	O
call	O
of	O
main	O
catch	O
the	O
exception	O
and	O
call	O
println	B-api_mention
which	O
trigger	O
a	O
second	O
Stackoverflow	O
.	O
cnt	O
get	O
increment	O
to	O
1	O
.	O
The	O
i	O
-	O
2	O
call	O
of	O
main	O
catch	O
now	O
the	O
exception	O
and	O
call	O
println	B-api_mention
.	O
In	O
println	B-api_mention
a	O
method	O
is	O
called	O
triggering	O
a	O
3rd	O
exception	O
.	O
cnt	O
get	O
increment	O
to	O
2	O
.	O
this	O
continue	O
until	O
println	B-api_mention
can	O
make	O
all	O
its	O
needed	O
call	O
and	O
finally	O
display	O
the	O
value	O
of	O
cnt	O
.	O
This	O
is	O
then	O
dependent	O
of	O
the	O
actual	O
implementation	O
of	O
println	B-api_mention
.	O
For	O
the	O
JDK7	O
either	O
it	O
detect	O
cycling	O
call	O
and	O
throws	O
the	O
exception	O
earlier	O
either	O
it	O
keep	O
some	O
stack	O
resource	O
and	O
throw	O
the	O
exception	O
before	O
reaching	O
the	O
limit	O
to	O
give	O
some	O
room	O
for	O
remediation	O
logic	O
either	O
the	O
println	O
implementation	O
doesn	O
'	O
t	O
make	O
calls	O
either	O
the	O
+	O
+	O
operation	O
is	O
done	O
after	O
the	O
println	B-api_mention
call	O
thus	O
is	O
by	O
pass	O
by	O
the	O
exception	O
.	O
Question	O
-	O
18263489	O
,	O
answer	O
-	O
29873100	O
It	O
isn	O
'	O
t	O
pretty	O
,	O
but	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
allows	O
you	O
to	O
use	O
a	O
null	O
String	B-api_mention
in	O
a	O
switch	O
.	O
If	O
it	O
finds	O
null	O
,	O
it	O
converts	O
it	O
to	O
StringLiteral	O
,	O
otherwise	O
it	O
just	O
returns	O
the	O
same	O
String	B-api_mention
you	O
passed	O
it	O
.	O
If	O
you	O
don	O
'	O
t	O
handle	O
StringLiteral	O
explicitly	O
,	O
then	O
it	O
will	O
go	O
to	O
default	O
.	O
The	O
only	O
caveat	O
is	O
that	O
there	O
is	O
no	O
way	O
of	O
distinguishing	O
between	O
the	O
String	B-api_mention
StringLiteral	O
and	O
an	O
actual	O
null	O
String	B-api_mention
.	O
#	O
pre	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894348	O
The	O
first	O
one	O
using	O
str	B-api_mention
.	I-api_mention
charAt	I-api_mention
should	O
be	O
faster	O
.	O
If	O
you	O
dig	O
inside	O
the	O
source	O
code	O
of	O
String	O
class	O
,	O
we	O
can	O
see	O
that	O
charAt	O
is	O
implemented	O
as	O
follows	O
:	O
#	O
pre	O
Here	O
,	O
all	O
it	O
does	O
is	O
index	O
an	O
array	O
and	O
return	O
the	O
value	O
.	O
Now	O
,	O
if	O
we	O
see	O
the	O
implementation	O
of	O
toCharArray	B-api_mention
,	O
we	O
will	O
find	O
the	O
below	O
:	O
#	O
pre	O
As	O
you	O
see	O
,	O
it	O
is	O
doing	O
a	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
which	O
is	O
definitely	O
going	O
to	O
be	O
a	O
tad	O
slower	O
than	O
not	O
doing	O
it	O
.	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561687	O
This	O
works	O
because	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
min	I-api_mention
resolves	O
to	O
an	O
implementation	O
of	O
the	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
.	O
The	O
method	O
reference	O
of	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
min	I-api_mention
resolves	O
to	O
Integer	B-api_mention
.	I-api_mention
min	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
resolved	O
to	O
IntBinaryOperator	B-api_mention
,	O
and	O
presumably	O
autoboxing	O
occurs	O
somewhere	O
making	O
it	O
a	O
BinaryOperator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
And	O
the	O
min	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
resp	O
max	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
of	O
the	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ask	O
the	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
to	O
be	O
implemented	O
.	O
Now	O
this	O
resolves	O
to	O
the	O
single	O
method	O
Integer	B-api_mention
compareTo	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Which	O
is	O
of	O
type	O
BinaryOperator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
And	O
thus	O
the	O
magic	O
has	O
happened	O
as	O
both	O
methods	O
are	O
a	O
BinaryOperator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Question	O
-	O
23674624	O
,	O
answer	O
-	O
23674719	O
IntStream	B-api_mention
.	I-api_mention
boxed	I-api_mention
turns	O
an	O
IntStream	B-api_mention
into	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
you	O
can	O
then	O
collect	O
into	O
a	O
list	O
:	O
theIntStream	O
.	B-api_mention
boxed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16636899	O
I	O
feel	O
that	O
I	O
need	O
to	O
extend	O
my	O
comment	O
a	O
bit	O
.	O
.	O
.	O
About	O
paradigm	O
\	O
style	O
That	O
'	O
s	O
probably	O
the	O
most	O
notable	O
aspect	O
.	O
FP	O
became	O
popular	O
due	O
to	O
what	O
you	O
can	O
get	O
avoiding	O
side	O
-	O
effects	O
.	O
I	O
won	O
'	O
t	O
delve	O
deep	O
into	O
what	O
pros	O
\	O
cons	O
you	O
can	O
get	O
from	O
this	O
,	O
since	O
this	O
is	O
not	O
related	O
to	O
the	O
question	O
.	O
However	O
,	O
I	O
will	O
say	O
that	O
the	O
iteration	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
inspired	O
by	O
FP	O
and	O
rather	O
result	O
of	O
bringing	O
more	O
FP	O
to	O
Java	O
(	O
ironically	O
,	O
I	O
'	O
d	O
say	O
that	O
there	O
is	O
no	O
much	O
use	O
for	O
forEach	B-api_mention
in	O
pure	O
FP	O
,	O
since	O
it	O
does	O
nothing	O
except	O
introducing	O
side	O
-	O
effects	O
)	O
.	O
In	O
the	O
end	O
I	O
would	O
say	O
that	O
it	O
is	O
rather	O
a	O
matter	O
of	O
taste	O
\	O
style	O
\	O
paradigm	O
you	O
are	O
currently	O
writing	O
in	O
.	O
About	O
parallelism	O
.	O
From	O
performance	O
point	O
of	O
view	O
there	O
is	O
no	O
promised	O
notable	O
benefits	O
from	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
over	O
foreach	O
(	O
.	O
.	O
.	O
)	O
.	O
According	O
to	O
official	O
docs	O
on	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
:	O
#	O
blockquote	O
.	O
.	O
.	O
i	O
.	O
e	O
.	O
docs	O
pretty	O
much	O
clear	O
that	O
there	O
will	O
be	O
no	O
implicit	O
parallelism	O
.	O
Adding	O
one	O
would	O
be	O
LSP	O
violation	O
.	O
Now	O
,	O
there	O
are	O
"	O
parallell	O
collections	O
"	O
that	O
are	O
promised	O
in	O
Java	O
8	O
,	O
but	O
to	O
work	O
with	O
those	O
you	O
need	O
to	O
me	O
more	O
explicit	O
and	O
put	O
some	O
extra	O
care	O
to	O
use	O
them	O
(	O
see	O
mschenk74	O
'	O
s	O
answer	O
for	O
example	O
)	O
.	O
BTW	O
:	O
in	O
this	O
case	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
be	O
used	O
,	O
and	O
it	O
doesn	O
'	O
t	O
guarantee	O
that	O
actual	O
work	O
will	O
be	O
done	O
in	O
parallell	O
(	O
depends	O
on	O
underlying	O
collection	O
)	O
.	O
UPDATE	O
:	O
might	O
be	O
not	O
that	O
obvious	O
and	O
a	O
little	O
stretched	O
at	O
a	O
glance	O
but	O
there	O
is	O
another	O
facet	O
of	O
style	O
and	O
readability	O
perspective	O
.	O
First	O
of	O
all	O
-	O
plain	O
old	O
forloops	O
are	O
plain	O
and	O
old	O
.	O
Everybody	O
already	O
knows	O
them	O
.	O
Second	O
,	O
and	O
more	O
important	O
-	O
you	O
probably	O
want	O
to	O
use	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
only	O
with	O
one	O
-	O
liner	O
lambdas	O
.	O
If	O
"	O
body	O
"	O
gets	O
heavier	O
-	O
they	O
tend	O
to	O
be	O
not	O
-	O
that	O
readable	O
.	O
You	O
have	O
2	O
options	O
from	O
here	O
-	O
use	O
inner	O
classes	O
(	O
yuck	O
)	O
or	O
use	O
plain	O
old	O
forloop	O
.	O
People	O
often	O
gets	O
annoyed	O
when	O
they	O
see	O
the	O
same	O
things	O
(	O
iteratins	O
over	O
collections	O
)	O
being	O
done	O
various	O
vays	O
/	O
styles	O
in	O
the	O
same	O
codebase	O
,	O
and	O
this	O
seems	O
to	O
be	O
the	O
case	O
.	O
Again	O
,	O
this	O
might	O
or	O
might	O
not	O
be	O
an	O
issue	O
.	O
Depends	O
on	O
people	O
working	O
on	O
code	O
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28584932	O
Your	O
reasoning	O
is	O
that	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
should	O
not	O
be	O
equal	O
to	O
itself	O
because	O
it	O
is	O
โ	O
likely	O
โ	O
to	O
have	O
been	O
obtained	O
as	O
the	O
result	O
of	O
a	O
loss	O
of	O
accuracy	O
.	O
This	O
line	O
of	O
reasoning	O
applies	O
to	O
all	O
of	O
floating	O
-	O
point	O
.	O
Any	O
finite	O
value	O
can	O
be	O
obtained	O
as	O
the	O
result	O
of	O
an	O
inaccurate	O
operation	O
.	O
That	O
did	O
not	O
push	O
the	O
IEEE	O
754	O
standardization	O
committee	O
to	O
define	O
=	O
=	O
as	O
always	O
evaluating	O
to	O
false	O
for	O
finite	O
values	O
,	O
so	O
why	O
should	O
infinities	O
be	O
different	O
?	O
As	O
defined	O
,	O
=	O
=	O
is	O
useful	O
for	O
people	O
who	O
understand	O
what	O
it	O
does	O
(	O
that	O
is	O
,	O
test	O
the	O
floating	O
-	O
point	O
values	O
that	O
have	O
been	O
obtained	O
,	O
and	O
certainly	O
not	O
the	O
values	O
that	O
should	O
have	O
been	O
obtained	O
with	O
real	O
computations	O
)	O
.	O
For	O
anyone	O
who	O
understands	O
that	O
,	O
and	O
you	O
need	O
to	O
understand	O
it	O
to	O
use	O
floating	O
-	O
point	O
even	O
for	O
computations	O
that	O
do	O
not	O
involve	O
infinity	O
,	O
having	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
=	O
=	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
evaluate	O
to	O
true	O
is	O
convenient	O
,	O
if	O
only	O
to	O
test	O
if	O
the	O
floating	O
-	O
point	O
result	O
of	O
a	O
floating	O
-	O
point	O
computation	O
is	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
.	O
That	O
leaves	O
the	O
question	O
of	O
why	O
NaN	O
can	O
afford	O
to	O
have	O
special	O
behavior	O
,	O
and	O
infinities	O
should	O
follow	O
the	O
same	O
general	O
principles	O
as	O
finite	O
values	O
.	O
NaN	O
is	O
different	O
from	O
infinities	O
:	O
the	O
underlying	O
principle	O
of	O
the	O
IEEE	O
754	O
standard	O
is	O
that	O
values	O
are	O
exactly	O
what	O
they	O
are	O
,	O
but	O
the	O
result	O
of	O
an	O
operation	O
can	O
be	O
approximated	O
with	O
respect	O
to	O
the	O
real	O
result	O
,	O
and	O
in	O
this	O
case	O
,	O
the	O
resulting	O
floating	O
-	O
point	O
value	O
is	O
obtained	O
according	O
to	O
the	O
rounding	O
mode	O
.	O
Forget	O
for	O
an	O
instant	O
that	O
1	O
.	O
0	O
/	O
0	O
.	O
0	O
is	O
defined	O
as	O
+	O
inf	O
,	O
which	O
is	O
an	O
annoyance	O
in	O
this	O
discussion	O
.	O
Think	O
for	O
the	O
moment	O
of	O
Double	O
.	O
POSITIVE	O
_	O
INFINITY	O
only	O
as	O
the	O
result	O
of	O
operations	O
such	O
as	O
1	O
.	O
0e100	O
/	O
1	O
.	O
0e	O
-	O
300	O
or	O
Double	O
.	O
MAX	O
_	O
VALUE	O
+	O
Double	O
.	O
MAX	O
_	O
VALUE	O
.	O
For	O
these	O
operations	O
,	O
+	O
inf	O
is	O
the	O
closest	O
approximation	O
of	O
the	O
real	O
result	O
,	O
just	O
like	O
for	O
operations	O
that	O
produce	O
a	O
finite	O
result	O
.	O
By	O
contrast	O
,	O
NaN	O
is	O
the	O
result	O
you	O
obtain	O
when	O
the	O
operation	O
doesn	O
'	O
t	O
make	O
sense	O
.	O
It	O
is	O
defensible	O
to	O
have	O
NaN	O
behave	O
specially	O
,	O
but	O
inf	O
is	O
just	O
an	O
approximation	O
of	O
all	O
the	O
values	O
too	O
large	O
to	O
represent	O
.	O
In	O
reality	O
,	O
1	O
.	O
0	O
/	O
0	O
.	O
0	O
also	O
produces	O
+	O
inf	O
,	O
but	O
that	O
should	O
be	O
considered	O
an	O
exception	O
.	O
It	O
would	O
have	O
been	O
just	O
as	O
coherent	O
to	O
define	O
the	O
result	O
of	O
that	O
operation	O
as	O
NaN	O
,	O
but	O
defining	O
it	O
as	O
+	O
inf	O
was	O
more	O
convenient	O
in	O
the	O
implementation	O
of	O
some	O
algorithms	O
.	O
An	O
example	O
is	O
provided	O
page	O
10	O
in	O
Kahan	O
'	O
s	O
notes	O
.	O
More	O
details	O
than	O
most	O
will	O
wish	O
for	O
are	O
in	O
the	O
article	O
โ	O
Branch	O
Cuts	O
for	O
Complex	O
Elementary	O
Functions	O
,	O
or	O
Much	O
Ado	O
About	O
Nothing	O
'	O
s	O
Sign	O
Bit	O
โ	O
.	O
I	O
would	O
also	O
interpret	O
the	O
existence	O
in	O
IEEE	O
754	O
of	O
a	O
โ	O
division	O
by	O
zero	O
โ	O
flag	O
separate	O
from	O
the	O
NaN	O
flag	O
as	O
recognition	O
that	O
the	O
user	O
may	O
want	O
to	O
treat	O
division	O
by	O
zero	O
specially	O
although	O
it	O
is	O
not	O
defined	O
as	O
producing	O
NaN	O
.	O
Question	O
-	O
24676877	O
,	O
answer	O
-	O
24679745	O
The	O
answer	O
is	O
,	O
as	O
always	O
,	O
"	O
it	O
depends	O
"	O
.	O
It	O
depends	O
on	O
how	O
big	O
the	O
returned	O
collection	O
will	O
be	O
.	O
It	O
depends	O
on	O
whether	O
the	O
result	O
changes	O
over	O
time	O
,	O
and	O
how	O
important	O
consistency	O
of	O
the	O
returned	O
result	O
is	O
.	O
And	O
it	O
depends	O
very	O
much	O
on	O
how	O
the	O
user	O
is	O
likely	O
to	O
use	O
the	O
answer	O
.	O
First	O
,	O
note	O
that	O
you	O
can	O
always	O
get	O
a	O
Collection	B-api_mention
from	O
a	O
Stream	B-api_mention
,	O
and	O
vice	O
versa	O
:	O
/	O
/	O
If	O
API	O
returns	O
Collection	B-api_mention
,	O
convert	O
with	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
getFoo	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
/	O
/	O
If	O
API	O
returns	O
Stream	B-api_mention
,	O
use	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Collection	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
c	O
=	O
getFooStream	O
(	O
args	O
)	O
.	B-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
the	O
question	O
is	O
,	O
which	O
is	O
more	O
useful	O
to	O
your	O
callers	O
.	O
If	O
your	O
result	O
might	O
be	O
infinite	O
,	O
there	O
'	O
s	O
only	O
one	O
choice	O
:	O
Stream	B-api_mention
.	O
If	O
your	O
result	O
might	O
be	O
very	O
large	O
,	O
you	O
probably	O
prefer	O
Stream	B-api_mention
,	O
since	O
there	O
may	O
not	O
be	O
any	O
value	O
in	O
materializing	O
it	O
all	O
at	O
once	O
,	O
and	O
doing	O
so	O
could	O
create	O
significant	O
heap	O
pressure	O
.	O
If	O
all	O
the	O
caller	O
is	O
going	O
to	O
do	O
is	O
iterate	O
through	O
it	O
(	O
search	O
,	O
filter	O
,	O
aggregate	O
)	O
,	O
you	O
should	O
prefer	O
Stream	B-api_mention
,	O
since	O
Stream	B-api_mention
has	O
these	O
built	O
-	O
in	O
already	O
and	O
there	O
'	O
s	O
no	O
need	O
to	O
materialize	O
a	O
collection	O
(	O
especially	O
if	O
the	O
user	O
might	O
not	O
process	O
the	O
whole	O
result	O
.	O
)	O
This	O
is	O
a	O
very	O
common	O
case	O
.	O
Even	O
if	O
you	O
know	O
that	O
the	O
user	O
will	O
iterate	O
it	O
multiple	O
times	O
or	O
otherwise	O
keep	O
it	O
around	O
,	O
you	O
still	O
may	O
want	O
to	O
return	O
a	O
Stream	B-api_mention
instead	O
,	O
for	O
the	O
simple	O
fact	O
that	O
whatever	O
Collection	B-api_mention
you	O
choose	O
to	O
put	O
it	O
in	O
(	O
e	O
.	O
g	O
.	O
,	O
ArrayList	B-api_mention
)	O
may	O
not	O
be	O
the	O
form	O
they	O
want	O
,	O
and	O
then	O
the	O
caller	O
has	O
to	O
copy	O
it	O
anyway	O
.	O
if	O
you	O
return	O
a	O
stream	O
,	O
they	O
can	O
do	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
get	O
it	O
in	O
exactly	O
the	O
form	O
they	O
want	O
.	O
The	O
above	O
"	O
prefer	O
Stream	O
"	O
cases	O
mostly	O
derive	O
from	O
the	O
fact	O
that	O
Stream	B-api_mention
is	O
more	O
flexible	O
;	O
you	O
can	O
late	O
-	O
bind	O
to	O
how	O
you	O
use	O
it	O
without	O
incurring	O
the	O
costs	O
and	O
constraints	O
of	O
materializing	O
it	O
to	O
a	O
Collection	B-api_mention
.	O
The	O
one	O
case	O
where	O
you	O
must	O
return	O
a	O
Collection	B-api_mention
is	O
when	O
there	O
are	O
strong	O
consistency	O
requirements	O
,	O
and	O
you	O
have	O
to	O
produce	O
a	O
consistent	O
snapshot	O
of	O
a	O
moving	O
target	O
.	O
Then	O
,	O
you	O
will	O
want	O
put	O
the	O
elements	O
into	O
a	O
collection	O
that	O
will	O
not	O
change	O
.	O
So	O
I	O
would	O
say	O
that	O
most	O
of	O
the	O
time	O
,	O
Stream	B-api_mention
is	O
the	O
right	O
answer	O
-	O
-	O
it	O
is	O
more	O
flexible	O
,	O
it	O
doesn	O
'	O
t	O
impose	O
usually	O
-	O
unnecessary	O
materialization	O
costs	O
,	O
and	O
can	O
be	O
easily	O
turned	O
into	O
the	O
Collection	B-api_mention
of	O
your	O
choice	O
if	O
needed	O
.	O
But	O
sometimes	O
,	O
you	O
may	O
have	O
to	O
return	O
a	O
Collection	B-api_mention
(	O
say	O
,	O
due	O
to	O
strong	O
consistency	O
requirements	O
)	O
,	O
or	O
you	O
may	O
want	O
to	O
return	O
Collection	B-api_mention
because	O
you	O
know	O
how	O
the	O
user	O
will	O
be	O
using	O
it	O
and	O
know	O
this	O
is	O
the	O
most	O
convenient	O
thing	O
for	O
them	O
.	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
22269778	O
There	O
actually	O
is	O
a	O
trick	O
how	O
to	O
execute	O
a	O
parallel	O
operation	O
in	O
a	O
specific	O
fork	O
-	O
join	O
pool	O
.	O
If	O
you	O
execute	O
it	O
as	O
a	O
task	O
in	O
a	O
fork	O
-	O
join	O
pool	O
,	O
it	O
stays	O
there	O
and	O
does	O
not	O
use	O
the	O
common	O
one	O
.	O
#	O
pre	O
The	O
trick	O
is	O
based	O
on	O
ForkJoinTask	B-api_mention
.	I-api_mention
fork	I-api_mention
which	O
specifies	O
:	O
"	O
Arranges	O
to	O
asynchronously	O
execute	O
this	O
task	O
in	O
the	O
pool	O
the	O
current	O
task	O
is	O
running	O
in	O
,	O
if	O
applicable	O
,	O
or	O
using	O
the	O
ForkJoinPool	B-api_mention
.	I-api_mention
commonPool	I-api_mention
(	I-api_mention
)	I-api_mention
if	O
not	O
inForkJoinPool	B-api_mention
(	I-api_mention
)	I-api_mention
"	O
Question	O
-	O
22036885	O
,	O
answer	O
-	O
22037068	O
As	O
said	O
in	O
API	O
#	O
blockquote	O
It	O
'	O
s	O
because	O
of	O
cannot	O
represent	O
double	O
value	O
exactly	O
.	O
So	O
you	O
have	O
to	O
use	O
BigDecimal	B-api_mention
bigDecimal	O
=	O
BigDecimal	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
of	O
BigDecimal	B-api_mention
bigDecimal	O
=	O
new	O
BigDecimal	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
23453287	O
One	O
of	O
the	O
most	O
useful	O
features	O
of	O
Java	O
8	O
are	O
the	O
new	O
default	O
methods	O
on	O
interfaces	O
.	O
There	O
are	O
essentially	O
two	O
reasons	O
(	O
there	O
may	O
be	O
others	O
)	O
why	O
they	O
have	O
been	O
introduced	O
:	O
#	O
li	O
Providing	O
actual	O
default	O
implementations	O
.	O
Example	O
:	O
Iterator	B-api_mention
.	I-api_mention
remove	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
Allowing	O
for	O
JDK	O
API	O
evolution	O
.	O
Example	O
:	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
)	I-api_mention
From	O
an	O
API	O
designer	O
'	O
s	O
perspective	O
,	O
I	O
would	O
have	O
liked	O
to	O
be	O
able	O
to	O
use	O
other	O
modifiers	O
on	O
interface	O
methods	O
,	O
e	O
.	O
g	O
.	O
final	O
.	O
This	O
would	O
be	O
useful	O
when	O
adding	O
convenience	O
methods	O
,	O
preventing	O
"	O
accidental	O
"	O
overrides	O
in	O
implementing	O
classes	O
:	O
#	O
pre	O
The	O
above	O
is	O
already	O
common	O
practice	O
if	O
Sender	O
were	O
a	O
class	O
:	O
#	O
pre	O
Now	O
,	O
default	O
and	O
final	O
are	O
obviously	O
contradicting	O
keywords	O
,	O
but	O
the	O
default	O
keyword	O
itself	O
would	O
not	O
have	O
been	O
strictly	O
required	O
,	O
so	O
I	O
'	O
m	O
assuming	O
that	O
this	O
contradiction	O
is	O
deliberate	O
,	O
to	O
reflect	O
the	O
subtle	O
differences	O
between	O
"	O
class	O
methods	O
with	O
body	O
"	O
(	O
just	O
methods	O
)	O
and	O
"	O
interface	O
methods	O
with	O
body	O
"	O
(	O
default	O
methods	O
)	O
,	O
i	O
.	O
e	O
.	O
differences	O
which	O
I	O
have	O
not	O
yet	O
understood	O
.	O
At	O
some	O
point	O
of	O
time	O
,	O
support	O
for	O
modifiers	O
like	O
static	O
and	O
final	O
on	O
interface	O
methods	O
was	O
not	O
yet	O
fully	O
explored	O
,	O
citing	O
Brian	O
Goetz	O
:	O
#	O
blockquote	O
Since	O
that	O
time	O
in	O
late	O
2011	O
,	O
obviously	O
,	O
support	O
for	O
static	O
methods	O
in	O
interfaces	O
was	O
added	O
.	O
Clearly	O
,	O
this	O
added	O
a	O
lot	O
of	O
value	O
to	O
the	O
JDK	O
libraries	O
themselves	O
,	O
such	O
as	O
with	O
Comparator	B-api_mention
.	I-api_mention
comparing	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
:	O
What	O
is	O
the	O
reason	O
final	O
(	O
and	O
also	O
static	O
final	O
)	O
never	O
made	O
it	O
to	O
Java	O
8	O
interfaces	O
?	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
14534791	O
Escape	O
should	O
be	O
done	O
with	O
\	O
,	O
not	O
/	O
.	O
So	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
work	O
(	O
StringBuilder	B-api_mention
has	O
overloaded	O
methods	O
for	O
char	O
and	O
String	B-api_mention
type	O
)	O
.	O
Question	O
-	O
32714194	O
String	B-api_mention
is	O
a	O
special	O
case	O
in	O
Java	O
.	O
It	O
'	O
s	O
a	O
class	O
,	O
which	O
I	O
can	O
examine	O
in	O
the	O
source	O
code	O
,	O
but	O
it	O
also	O
has	O
its	O
own	O
infix	O
operator	O
+	O
,	O
which	O
seems	O
to	O
be	O
syntactic	O
sugar	O
for	O
StringBuilder	B-api_mention
.	O
For	O
example	O
,	O
StringLiteral	O
+	O
yourName	O
;	O
could	O
become	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
There	O
are	O
no	O
user	O
-	O
defined	O
operators	O
in	O
Java	O
,	O
so	O
where	O
is	O
+	O
specified	O
for	O
String	B-api_mention
?	O
Could	O
the	O
same	O
mechanism	O
be	O
used	O
to	O
make	O
additional	O
operators	O
,	O
such	O
as	O
for	O
vectors	O
?	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723651	O
Println	O
(	O
args	O
)	O
uses	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
Print	O
(	O
args	O
)	O
does	O
null	O
check	O
.	O
#	O
pre	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
25855691	O
TL	O
;	O
DR	O
:	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
the	O
fastest	O
.	O
I	O
felt	O
I	O
should	O
add	O
my	O
results	O
from	O
benchmarking	O
iteration	O
.	O
I	O
took	O
a	O
very	O
simple	O
approach	O
(	O
no	O
benchmarking	O
frameworks	O
)	O
and	O
benchmarked	O
5	O
different	O
methods	O
:	O
#	O
li	O
classic	O
for	O
#	O
li	O
classic	O
foreach	O
#	O
li	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
the	O
testing	O
procedure	O
and	O
parameters	O
#	O
pre	O
The	O
list	O
in	O
this	O
class	O
shall	O
be	O
iterated	O
over	O
and	O
have	O
some	O
doIt	O
(	O
args	O
)	O
applied	O
to	O
all	O
it	O
'	O
s	O
members	O
,	O
each	O
time	O
via	O
a	O
different	O
method	O
.	O
in	O
the	O
Main	O
class	O
I	O
run	O
the	O
tested	O
method	O
three	O
times	O
to	O
warm	O
up	O
the	O
JVM	O
.	O
I	O
then	O
run	O
the	O
test	O
method	O
1000	O
times	O
summing	O
the	O
time	O
it	O
takes	O
for	O
each	O
iteration	O
method	O
(	O
using	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
After	O
that	O
'	O
s	O
done	O
i	O
divide	O
that	O
sum	O
by	O
1000	O
and	O
that	O
'	O
s	O
the	O
result	O
,	O
average	O
time	O
.	O
example	O
:	O
#	O
pre	O
I	O
ran	O
this	O
on	O
a	O
i5	O
4	O
core	O
CPU	O
,	O
with	O
java	O
version	O
1	O
.	O
8	O
.	O
0	O
_	O
05	O
classic	O
for	O
#	O
pre	O
execution	O
time	O
:	O
4	O
.	O
21	O
ms	O
classic	O
foreach	O
#	O
pre	O
execution	O
time	O
:	O
5	O
.	O
95	O
ms	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
11	O
ms	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
2	O
.	O
79	O
ms	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
list	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
6	O
ms	O
Question	O
-	O
5071040	O
,	O
answer	O
-	O
22547954	O
Always	O
use	O
either	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Using	O
"	O
"	O
+	O
number	O
is	O
an	O
overhead	O
and	O
does	O
the	O
following	O
:	O
#	O
pre	O
Question	O
-	O
15430247	O
The	O
usual	O
constructor	O
of	O
ArrayList	B-api_mention
is	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
there	O
is	O
also	O
an	O
overloaded	O
constructor	O
with	O
a	O
parameter	O
for	O
its	O
initial	O
capacity	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Why	O
is	O
it	O
useful	O
to	O
create	O
an	O
ArrayList	B-api_mention
with	O
an	O
initial	O
capacity	O
when	O
we	O
can	O
append	O
to	O
it	O
as	O
we	O
please	O
?	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
10796174	O
You	O
need	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
split	B-api_mention
uses	O
regular	O
expression	O
and	O
in	O
regex	O
|	O
is	O
metacharacter	O
representing	O
OR	O
operator	O
.	O
You	O
need	O
to	O
escape	O
that	O
character	O
using	O
\	O
(	O
written	O
in	O
String	B-api_mention
as	O
StringLiteral	O
since	O
\	O
is	O
also	O
metacharacter	O
in	O
String	O
literals	O
and	O
require	O
another	O
\	O
to	O
escape	O
it	O
)	O
.	O
You	O
can	O
also	O
use	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
let	O
Pattern	B-api_mention
.	I-api_mention
quote	I-api_mention
create	O
escaped	O
version	O
of	O
regex	O
representing	O
|	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
30506585	O
Predicate	B-api_mention
has	O
methods	O
and	O
,	O
or	O
and	O
negate	O
.	O
However	O
,	O
String	B-api_mention
:	I-api_mention
:	I-api_mention
isEmpty	I-api_mention
is	O
not	O
a	O
Predicate	B-api_mention
.	O
It	O
could	O
as	O
well	O
be	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
or	O
MyProprietaryClass	B-api_mention
.	O
The	O
type	O
information	O
is	O
inferred	O
from	O
the	O
variable	O
or	O
the	O
call	O
.	O
So	O
,	O
you	O
need	O
to	O
cast	O
a	O
method	O
reference	O
explicitly	O
(	O
as	O
@	O
axtavt	O
mentioned	O
)	O
:	O
(	O
(	O
Predicate	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
String	B-api_mention
:	I-api_mention
:	I-api_mention
isEmpty	I-api_mention
)	O
.	B-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
But	O
it	O
'	O
s	O
absolutely	O
ugly	O
and	O
Predicate	B-api_mention
seems	O
to	O
use	O
lambdas	O
under	O
the	O
hood	O
anyway	O
.	O
So	O
I	O
think	O
you	O
are	O
better	O
off	O
writing	O
a	O
lambda	O
or	O
even	O
your	O
own	O
not	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
e	O
.	O
g	O
.	O
in	O
utility	O
,	O
static	O
import	O
)	O
.	O
Question	O
-	O
28770822	O
I	O
understand	O
the	O
use	O
of	O
the	O
@	O
Native	O
annotation	O
.	O
#	O
blockquote	O
However	O
,	O
while	O
reading	O
the	O
java	O
source	O
code	O
I	O
noticed	O
that	O
in	O
the	O
class	O
Integer	B-api_mention
and	O
Long	B-api_mention
the	O
SIZE	O
constant	O
is	O
@	O
Native	O
while	O
it	O
is	O
not	O
for	O
the	O
Float	B-api_mention
,	O
Byte	B-api_mention
,	O
Double	B-api_mention
,	O
Short	B-api_mention
and	O
Character	B-api_mention
.	O
Note	O
that	O
the	O
SIZE	O
constant	O
represents	O
the	O
number	O
of	O
bits	O
used	O
to	O
represent	O
the	O
actual	O
value	O
.	O
#	O
pre	O
Edit	O
:	O
I	O
just	O
noticed	O
that	O
this	O
also	O
applies	O
for	O
MAX	O
_	O
VALUE	O
and	O
MIN	O
_	O
VALUE	O
of	O
the	O
same	O
classes	O
.	O
Edit	O
2	O
:	O
I	O
had	O
spare	O
time	O
to	O
do	O
some	O
research	O
on	O
this	O
,	O
and	O
looking	O
at	O
the	O
header	O
files	O
of	O
the	O
Long	B-api_mention
,	O
Float	B-api_mention
etc	O
.	O
classes	O
I	O
had	O
hope	O
to	O
figure	O
out	O
that	O
the	O
constants	O
were	O
not	O
present	O
in	O
the	O
other	O
headers	O
,	O
but	O
unfortunately	O
they	O
are	O
.	O
#	O
pre	O
Why	O
is	O
the	O
SIZE	O
constant	O
only	O
@	O
Native	O
for	O
Integer	B-api_mention
and	O
Long	B-api_mention
?	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
14534798	O
It	O
should	O
be	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
I	O
recommend	O
you	O
to	O
do	O
as	O
below	O
,	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
system	O
-	O
dependent	O
newline	O
in	O
java	O
.	O
Also	O
from	O
Java	O
7	O
there	O
'	O
s	O
a	O
method	O
that	O
returns	O
the	O
value	O
directly	O
:	O
System	B-api_mention
.	I-api_mention
lineSeparator	I-api_mention
(	I-api_mention
)	I-api_mention
Question	O
-	O
5243754	O
What	O
is	O
the	O
difference	O
between	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
within	O
HttpServletRequest	B-api_mention
class	O
?	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
8172439	O
You	O
can	O
use	O
Character	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
char	I-api_mention
)	I-api_mention
.	O
Note	O
that	O
this	O
method	O
simply	O
returns	O
a	O
call	O
to	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
char	I-api_mention
)	I-api_mention
,	O
which	O
also	O
works	O
.	O
As	O
others	O
have	O
noted	O
,	O
string	O
concatenation	O
works	O
as	O
a	O
shortcut	O
as	O
well	O
:	O
String	B-api_mention
s	O
=	O
StringLiteral	O
+	O
CharLiteral	O
;	O
But	O
this	O
compiles	O
down	O
to	O
:	O
String	B-api_mention
s	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
is	O
less	O
efficient	O
because	O
the	O
StringBuilder	B-api_mention
is	O
backed	O
by	O
a	O
char	O
[	O
]	O
(	O
over	O
-	O
allocated	O
by	O
StringBuilder	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
16	O
)	O
,	O
only	O
for	O
that	O
array	O
to	O
be	O
defensively	O
copied	O
by	O
the	O
resulting	O
String	B-api_mention
.	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
"	O
gets	O
in	O
the	O
back	O
door	O
"	O
by	O
wrapping	O
the	O
char	O
in	O
a	O
single	O
-	O
element	O
array	O
and	O
passing	O
it	O
to	O
the	O
package	O
private	O
constructor	O
String	B-api_mention
(	I-api_mention
char	I-api_mention
[	I-api_mention
]	I-api_mention
,	I-api_mention
boolean	I-api_mention
)	I-api_mention
,	O
which	O
avoids	O
the	O
array	O
copy	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28821352	O
It	O
'	O
s	O
not	O
pretty	O
,	O
but	O
this	O
will	O
work	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
;	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
is	O
a	O
fairly	O
handy	O
pattern	O
for	O
use	O
with	O
Optional	B-api_mention
.	O
It	O
means	O
"	O
If	O
this	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
give	O
me	O
func	O
(	O
args	O
)	O
,	O
otherwise	O
give	O
me	O
sup	O
.	O
get	O
(	O
args	O
)	O
"	O
.	O
In	O
this	O
case	O
,	O
we	O
call	O
serviceA	O
(	O
args	O
)	O
and	O
get	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
If	O
that	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
we	O
want	O
to	O
get	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
if	O
it	O
is	O
empty	O
,	O
we	O
want	O
to	O
get	O
serviceB	O
(	O
args	O
)	O
.	O
Rinse	O
-	O
repeat	O
with	O
more	O
alternatives	O
.	O
Other	O
uses	O
of	O
this	O
pattern	O
are	O
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16149160	O
HashMap	B-api_mention
does	O
not	O
allow	O
primitive	O
data	O
types	O
as	O
arguments	O
.	O
It	O
can	O
only	O
accept	O
objects	O
so	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
not	O
work	O
.	O
You	O
have	O
to	O
change	O
the	O
declaration	O
to	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
so	O
even	O
when	O
you	O
do	O
the	O
following	O
myMap	O
.	O
put	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
primitive	O
data	O
type	O
is	O
autoboxed	O
to	O
an	O
Integer	O
object	O
.	O
8	O
(	O
args	O
)	O
=	O
=	O
=	O
boxing	O
=	O
=	O
=	O
>	O
8	O
(	O
args	O
)	O
You	O
can	O
read	O
more	O
on	O
autoboxing	O
here	O
#	O
a	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27949367	O
The	O
strategy	O
they	O
describe	O
is	O
to	O
simply	O
reuse	O
the	O
internal	O
character	O
array	O
of	O
one	O
String	B-api_mention
in	O
possibly	O
many	O
equal	O
Strings	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
each	O
String	B-api_mention
to	O
have	O
its	O
own	O
copy	O
if	O
they	O
are	O
equal	O
.	O
In	O
order	O
to	O
more	O
quickly	O
determine	O
if	O
2	O
strings	O
are	O
equal	O
,	O
the	O
hash	O
code	O
is	O
used	O
as	O
a	O
first	O
step	O
,	O
as	O
it	O
is	O
a	O
fast	O
way	O
to	O
determine	O
if	O
Strings	O
may	O
be	O
equal	O
.	O
Hence	O
their	O
statement	O
:	O
#	O
blockquote	O
This	O
is	O
to	O
make	O
a	O
certain	O
(	O
but	O
slower	O
)	O
comparison	O
for	O
equality	O
once	O
possible	O
equality	O
has	O
been	O
determined	O
using	O
the	O
hash	O
code	O
.	O
In	O
the	O
end	O
,	O
equal	O
Strings	O
will	O
share	O
a	O
single	O
underlying	O
char	O
array	O
.	O
Java	O
has	O
had	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
a	O
long	O
time	O
,	O
to	O
do	O
more	O
or	O
less	O
the	O
same	O
(	O
i	O
.	O
e	O
.	O
save	O
memory	O
by	O
deduplicating	O
equal	O
Strings	O
)	O
.	O
What	O
'	O
s	O
novel	O
about	O
this	O
is	O
that	O
it	O
happens	O
during	O
garbage	O
collection	O
time	O
and	O
can	O
be	O
externally	O
controlled	O
.	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
17909134	O
I	O
can	O
see	O
many	O
answers	O
showing	O
how	O
to	O
solve	O
problem	O
,	O
but	O
only	O
Stephen	O
'	O
s	O
answer	O
is	O
trying	O
to	O
explain	O
why	O
problem	O
occurs	O
so	O
I	O
will	O
try	O
to	O
add	O
something	O
more	O
on	O
this	O
subject	O
.	O
It	O
is	O
a	O
story	O
about	O
possible	O
reasons	O
why	O
Object	B-api_mention
[	O
]	O
toArray	B-api_mention
wasn	O
'	O
t	O
changed	O
to	O
T	O
[	O
]	O
toArray	B-api_mention
where	O
generics	O
ware	O
introduced	O
to	O
Java	O
.	O
Why	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
(	O
String	B-api_mention
[	O
]	O
)	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
wont	O
work	O
?	O
In	O
Java	O
,	O
generic	O
type	O
exists	O
at	O
compile	O
-	O
time	O
only	O
.	O
At	O
runtime	O
information	O
about	O
generic	O
type	O
(	O
like	O
in	O
your	O
case	O
<	O
String	B-api_mention
>	O
)	O
is	O
removed	O
and	O
replaced	O
with	O
Object	B-api_mention
type	O
(	O
take	O
a	O
look	O
at	O
type	O
erasure	O
)	O
.	O
That	O
is	O
why	O
at	O
runtime	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
have	O
no	O
idea	O
about	O
what	O
precise	O
type	O
to	O
use	O
to	O
create	O
new	O
array	O
,	O
so	O
it	O
uses	O
Object	B-api_mention
as	O
safest	O
type	O
,	O
because	O
each	O
class	O
extends	O
Object	B-api_mention
so	O
it	O
can	O
safely	O
store	O
instance	O
of	O
any	O
class	O
.	O
Now	O
the	O
problem	O
is	O
that	O
you	O
can	O
'	O
t	O
cast	O
instance	O
of	O
Object	B-api_mention
[	O
]	O
to	O
String	B-api_mention
[	O
]	O
.	O
Why	O
?	O
Take	O
a	O
look	O
at	O
this	O
example	O
(	O
lets	O
assume	O
that	O
class	O
B	O
extends	O
A	O
)	O
:	O
#	O
pre	O
Although	O
such	O
code	O
will	O
compile	O
,	O
at	O
runtime	O
we	O
will	O
see	O
thrown	O
ClassCastException	B-api_mention
because	O
instance	O
held	O
by	O
reference	O
a	O
is	O
not	O
actually	O
of	O
type	O
B	O
(	O
or	O
its	O
subtypes	O
)	O
.	O
Why	O
is	O
this	O
problem	O
(	O
why	O
this	O
exception	O
needs	O
to	O
be	O
cast	O
)	O
?	O
One	O
of	O
the	O
reasons	O
is	O
that	O
B	O
could	O
have	O
new	O
methods	O
/	O
fields	O
which	O
A	O
doesn	O
'	O
t	O
,	O
so	O
it	O
is	O
possible	O
that	O
someone	O
will	O
try	O
to	O
use	O
these	O
new	O
members	O
via	O
b	O
reference	O
even	O
if	O
held	O
instance	O
doesn	O
'	O
t	O
have	O
(	O
doesn	O
'	O
t	O
support	O
)	O
them	O
.	O
In	O
other	O
words	O
we	O
could	O
end	O
up	O
trying	O
to	O
use	O
data	O
which	O
doesn	O
'	O
t	O
exist	O
,	O
which	O
could	O
lead	O
to	O
many	O
problems	O
.	O
So	O
to	O
prevent	O
such	O
situation	O
JVM	O
throws	O
exception	O
,	O
and	O
stop	O
further	O
potentially	O
dangerous	O
code	O
.	O
You	O
could	O
ask	O
now	O
"	O
So	O
why	O
aren	O
'	O
t	O
we	O
stopped	O
even	O
earlier	O
?	O
Why	O
code	O
involving	O
such	O
casting	O
is	O
even	O
compilable	O
?	O
Shouldn	O
'	O
t	O
compiler	O
stop	O
it	O
?	O
"	O
.	O
Answer	O
is	O
:	O
no	O
because	O
compiler	O
can	O
'	O
t	O
know	O
for	O
sure	O
what	O
is	O
the	O
actual	O
type	O
of	O
instance	O
held	O
by	O
a	O
reference	O
,	O
and	O
there	O
is	O
a	O
chance	O
that	O
it	O
will	O
hold	O
instance	O
of	O
class	O
B	O
which	O
will	O
support	O
interface	O
of	O
b	O
reference	O
.	O
Take	O
a	O
look	O
at	O
this	O
example	O
:	O
#	O
pre	O
Now	O
lets	O
go	O
back	O
to	O
your	O
arrays	O
.	O
As	O
you	O
see	O
in	O
question	O
,	O
we	O
can	O
'	O
t	O
cast	O
instance	O
of	O
Object	B-api_mention
[	O
]	O
array	O
to	O
more	O
precise	O
type	O
String	B-api_mention
[	O
]	O
like	O
#	O
pre	O
Here	O
problem	O
is	O
a	O
little	O
different	O
.	O
Now	O
we	O
are	O
sure	O
that	O
String	B-api_mention
[	O
]	O
array	O
will	O
not	O
have	O
additional	O
fields	O
or	O
methods	O
because	O
every	O
array	O
support	O
only	O
:	O
#	O
li	O
[	O
]	O
operator	O
,	O
#	O
li	O
length	O
filed	O
,	O
#	O
li	O
methods	O
inherited	O
from	O
Object	B-api_mention
supertype	O
,	O
So	O
it	O
is	O
not	O
arrays	O
interface	O
which	O
is	O
making	O
it	O
impossible	O
.	O
Problem	O
is	O
that	O
Object	B-api_mention
[	O
]	O
array	O
beside	O
Strings	O
can	O
store	O
any	O
objects	O
(	O
for	O
instance	O
Integers	O
)	O
so	O
it	O
is	O
possible	O
that	O
one	O
beautiful	O
day	O
we	O
will	O
end	O
up	O
with	O
trying	O
to	O
invoke	O
method	O
like	O
strArray	O
[	O
i	O
]	O
.	B-api_mention
substring	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
instance	O
of	O
Integer	O
which	O
doesn	O
'	O
t	O
have	O
such	O
method	O
.	O
So	O
to	O
make	O
sure	O
that	O
this	O
situation	O
will	O
never	O
happen	O
,	O
in	O
Java	O
array	O
references	O
can	O
hold	O
only	O
#	O
li	O
instances	O
of	O
array	O
of	O
same	O
type	O
as	O
reference	O
(	O
reference	O
String	B-api_mention
[	O
]	O
strArr	O
can	O
hold	O
String	B-api_mention
[	O
]	O
)	O
#	O
li	O
instances	O
of	O
array	O
of	O
subtype	O
(	O
Object	B-api_mention
[	O
]	O
can	O
hold	O
String	B-api_mention
[	O
]	O
because	O
String	B-api_mention
is	O
subtype	O
of	O
Object	B-api_mention
)	O
,	O
but	O
can	O
'	O
t	O
hold	O
#	O
li	O
array	O
of	O
supertype	O
of	O
type	O
of	O
array	O
from	O
reference	O
(	O
String	B-api_mention
[	O
]	O
can	O
'	O
t	O
hold	O
Object	B-api_mention
[	O
]	O
)	O
#	O
li	O
array	O
of	O
type	O
which	O
is	O
not	O
related	O
to	O
type	O
from	O
reference	O
(	O
Integer	B-api_mention
[	O
]	O
can	O
'	O
t	O
hold	O
String	B-api_mention
[	O
]	O
)	O
In	O
other	O
words	O
something	O
like	O
this	O
is	O
OK	O
#	O
pre	O
You	O
could	O
say	O
that	O
one	O
way	O
to	O
resolve	O
this	O
problem	O
is	O
to	O
find	O
at	O
runtime	O
most	O
common	O
type	O
between	O
all	O
list	O
elements	O
and	O
create	O
array	O
of	O
that	O
type	O
,	O
but	O
this	O
wont	O
work	O
in	O
situations	O
where	O
all	O
elements	O
of	O
list	O
will	O
be	O
of	O
one	O
type	O
derived	O
from	O
generic	O
one	O
.	O
Take	O
a	O
look	O
#	O
pre	O
now	O
most	O
common	O
type	O
is	O
B	O
,	O
not	O
A	O
so	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
A	O
[	O
]	O
arr	O
=	O
elements	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
would	O
return	O
array	O
of	O
B	O
class	O
new	O
B	O
[	O
]	O
.	O
Problem	O
with	O
this	O
array	O
is	O
that	O
while	O
compiler	O
would	O
allow	O
you	O
to	O
edit	O
its	O
content	O
by	O
adding	O
new	O
A	O
(	O
args	O
)	O
element	O
to	O
it	O
,	O
you	O
would	O
get	O
ArrayStoreException	B-api_mention
because	O
B	O
[	O
]	O
array	O
can	O
hold	O
only	O
elements	O
of	O
class	O
B	O
or	O
its	O
subclass	O
,	O
to	O
make	O
sure	O
that	O
all	O
elements	O
will	O
support	O
interface	O
of	O
B	O
,	O
but	O
instance	O
of	O
A	O
may	O
not	O
have	O
all	O
methods	O
/	O
fields	O
of	O
B	O
.	O
So	O
this	O
solution	O
is	O
not	O
perfect	O
.	O
Best	O
solution	O
to	O
this	O
problem	O
is	O
explicitly	O
tell	O
what	O
type	O
of	O
array	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
be	O
returned	O
by	O
passing	O
this	O
type	O
as	O
method	O
argument	O
like	O
String	B-api_mention
[	O
]	O
arr	O
=	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
String	B-api_mention
[	O
]	O
arr	O
=	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
if	O
size	O
of	O
array	O
is	O
smaller	O
then	O
list	O
it	O
will	O
be	O
automatically	O
adjusted	O
.	O
Question	O
-	O
18410035	O
,	O
answer	O
-	O
37409771	O
In	O
Java	O
8	O
collection	O
classes	O
that	O
implement	O
Iterable	B-api_mention
(	O
for	O
example	O
all	O
lists	O
)	O
now	O
have	O
forEach	B-api_mention
method	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
above	O
example	O
makes	O
use	O
of	O
method	O
-	O
reference	O
introduced	O
in	O
Java	O
8	O
.	O
We	O
can	O
also	O
iterate	O
over	O
a	O
list	O
using	O
Stream	B-api_mention
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
advantage	O
with	O
later	O
option	O
is	O
that	O
we	O
can	O
also	O
make	O
use	O
of	O
parallel	O
streams	O
wherever	O
appropriate	O
.	O
If	O
the	O
objective	O
is	O
only	O
to	O
print	O
the	O
items	O
irrespective	O
of	O
the	O
order	O
then	O
we	O
can	O
use	O
parallel	O
stream	O
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29500496	O
First	O
of	O
all	O
,	O
the	O
cast	O
in	O
that	O
line	O
(	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
are	O
absobuletly	O
needed	O
.	O
Removing	O
them	O
will	O
result	O
in	O
a	O
compilation	O
error	O
:	O
#	O
pre	O
Now	O
to	O
answer	O
your	O
question	O
What	O
is	O
this	O
line	O
checking	O
?	O
It	O
simply	O
verify	O
if	O
the	O
given	O
array	O
is	O
of	O
object	O
type	O
,	O
which	O
is	O
part	O
of	O
the	O
answer	O
for	O
your	O
other	O
question	O
Why	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
not	O
good	O
enough	O
for	O
both	O
cases	O
?	O
In	O
the	O
first	O
case	O
,	O
we	O
already	O
know	O
that	O
the	O
array	O
is	O
of	O
Object	B-api_mention
type	O
so	O
there	O
is	O
no	O
point	O
in	O
calling	O
the	O
newInstance	O
method	O
to	O
retrieve	O
the	O
correct	O
type	O
,	O
this	O
would	O
only	O
result	O
in	O
performance	O
loss	O
.	O
As	O
for	O
your	O
final	O
example	O
,	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
That	O
it	O
does	O
compile	O
,	O
it	O
is	O
true	O
.	O
Because	O
the	O
given	O
arguments	O
to	O
the	O
method	O
are	O
all	O
valids	O
.	O
It	O
will	O
certainly	O
fail	O
at	O
runtime	O
;	O
what	O
would	O
be	O
the	O
expected	O
output	O
of	O
converting	O
"	O
a	O
"	O
to	O
Integer	B-api_mention
type	O
?	O
Now	O
,	O
when	O
to	O
use	O
copyOf	B-api_mention
?	O
When	O
you	O
already	O
know	O
the	O
both	O
types	O
,	O
and	O
already	O
know	O
that	O
they	O
are	O
valid	O
together	O
.	O
It	O
main	O
usage	O
is	O
to	O
return	O
a	O
copy	O
but	O
truncated	O
or	O
padded	O
with	O
[	O
null	O
/	O
default	O
values	O
]	O
to	O
the	O
original	O
array	O
.	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877161	O
Integer	B-api_mention
objects	O
caches	O
between	O
-	O
128	O
and	O
127	O
of	O
256	O
Integer	B-api_mention
You	O
should	O
not	O
compare	O
object	O
references	O
with	O
=	O
=	O
or	O
!	O
=	O
.	O
You	O
should	O
use	O
.	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
instead	O
,	O
or	O
better	O
-	O
use	O
the	O
primitive	O
int	O
rather	O
than	O
Integer	B-api_mention
.	O
parseInt	B-api_mention
:	O
Parses	O
the	O
string	O
argument	O
as	O
a	O
signed	O
decimal	O
integer	O
.	O
The	O
characters	O
in	O
the	O
string	O
must	O
all	O
be	O
decimal	O
digits	O
,	O
except	O
that	O
the	O
first	O
character	O
may	O
be	O
an	O
ASCII	O
minus	O
sign	O
'	O
-	O
'	O
(	O
'	O
\	O
u002D	O
'	O
)	O
to	O
indicate	O
a	O
negative	O
value	O
.	O
The	O
resulting	O
integer	O
value	O
is	O
returned	O
,	O
exactly	O
as	O
if	O
the	O
argument	O
and	O
the	O
radix	O
10	O
were	O
given	O
as	O
arguments	O
to	O
the	O
parseInt	B-api_mention
(	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
int	O
)	O
method	O
.	O
valueOf	B-api_mention
Returns	O
an	O
Integer	B-api_mention
object	O
holding	O
the	O
value	O
extracted	O
from	O
the	O
specified	O
String	B-api_mention
when	O
parsed	O
with	O
the	O
radix	O
given	O
by	O
the	O
second	O
argument	O
.	O
The	O
first	O
argument	O
is	O
interpreted	O
as	O
representing	O
a	O
signed	O
integer	O
in	O
the	O
radix	O
specified	O
by	O
the	O
second	O
argument	O
,	O
exactly	O
as	O
if	O
the	O
arguments	O
were	O
given	O
to	O
the	O
parseInt	B-api_mention
(	I-api_mention
java	I-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
method	O
.	O
The	O
result	O
is	O
an	O
Integer	B-api_mention
object	O
that	O
represents	O
the	O
integer	O
value	O
specified	O
by	O
the	O
string	O
.	O
equivalent	O
to	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
radix	O
-	O
the	O
radix	O
to	O
be	O
used	O
in	O
interpreting	O
s	O
so	O
if	O
you	O
equal	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
integer	O
inbetween	O
-	O
128	O
to	O
127	O
it	O
returns	O
true	O
in	O
your	O
condition	O
for	O
lesser	O
than	O
-	O
128	O
and	O
greater	O
than	O
127	O
it	O
gives	O
false	O
Question	O
-	O
19235606	O
I	O
am	O
having	O
trouble	O
understanding	O
the	O
Stream	B-api_mention
interface	O
in	O
Java	O
8	O
,	O
especially	O
where	O
it	O
has	O
to	O
do	O
with	O
the	O
Spliterator	B-api_mention
and	O
Collector	B-api_mention
interfaces	O
.	O
My	O
problem	O
is	O
that	O
I	O
simply	O
can	O
'	O
t	O
understand	O
yet	O
the	O
Spliterator	B-api_mention
and	O
the	O
Collector	B-api_mention
interfaces	O
,	O
and	O
as	O
a	O
result	O
the	O
Stream	B-api_mention
interface	O
is	O
still	O
somewhat	O
obscure	O
to	O
me	O
.	O
What	O
exactly	O
is	O
a	O
Spliterator	B-api_mention
and	O
a	O
Collector	B-api_mention
,	O
and	O
how	O
can	O
I	O
use	O
them	O
?	O
If	O
I	O
am	O
willing	O
to	O
write	O
my	O
own	O
Spliterator	B-api_mention
or	O
Collector	B-api_mention
(	O
and	O
probably	O
my	O
own	O
Stream	B-api_mention
in	O
that	O
process	O
)	O
,	O
what	O
should	O
I	O
do	O
and	O
not	O
do	O
?	O
I	O
read	O
some	O
examples	O
scattered	O
around	O
the	O
web	O
,	O
but	O
since	O
everything	O
here	O
is	O
stil	O
new	O
and	O
subject	O
to	O
changes	O
,	O
examples	O
and	O
tutorials	O
are	O
still	O
very	O
sparse	O
.	O
Question	O
-	O
15336477	O
All	O
I	O
'	O
m	O
trying	O
to	O
do	O
is	O
download	O
some	O
JSON	O
and	O
deserialize	O
it	O
into	O
an	O
object	O
.	O
I	O
haven	O
'	O
t	O
got	O
as	O
far	O
as	O
downloading	O
the	O
JSON	O
yet	O
.	O
Almost	O
every	O
single	O
HttpClient	B-api_mention
example	O
I	O
can	O
find	O
,	O
including	O
those	O
on	O
the	O
apache	O
site	O
looks	O
something	O
like	O
.	O
.	O
.	O
#	O
pre	O
However	O
,	O
Netbeans	O
tells	O
me	O
that	O
DefaultHttpClient	B-api_mention
is	O
deprecated	O
.	O
I	O
'	O
ve	O
tried	O
googling	O
for	O
DefaultHttpClient	B-api_mention
deprecated	O
and	O
as	O
many	O
other	O
variations	O
as	O
I	O
can	O
think	O
of	O
and	O
can	O
'	O
t	O
find	O
any	O
useful	O
results	O
,	O
so	O
I	O
'	O
m	O
obviously	O
missing	O
something	O
.	O
What	O
is	O
the	O
correct	O
Java7	O
way	O
to	O
download	O
the	O
contents	O
of	O
a	O
webpage	O
?	O
Is	O
there	O
really	O
no	O
decent	O
Http	O
Client	O
as	O
part	O
of	O
the	O
language	O
?	O
I	O
find	O
that	O
hard	O
to	O
believe	O
.	O
My	O
Maven	O
dependency	O
for	O
this	O
is	O
.	O
.	O
.	O
#	O
pre	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28459604	O
Background	O
While	O
the	O
question	O
appears	O
simple	O
,	O
the	O
actual	O
answer	O
requires	O
some	O
background	O
to	O
make	O
sense	O
.	O
If	O
you	O
want	O
to	O
skip	O
to	O
the	O
conclusion	O
,	O
scroll	O
down	O
.	O
.	O
.	O
Pick	O
your	O
comparison	O
point	O
-	O
Basic	O
functionality	O
Using	O
basic	O
concepts	O
,	O
C	O
#	O
'	O
s	O
IEnumerable	O
concept	O
is	O
more	O
closely	O
related	O
to	O
Java	O
'	O
s	O
Iterable	B-api_mention
,	O
which	O
is	O
able	O
to	O
create	O
as	O
many	O
Iterators	O
as	O
you	O
want	O
.	O
IEnumerables	O
create	O
IEnumerators	O
.	O
Java	O
'	O
s	O
Iterable	B-api_mention
create	O
Iterators	O
The	O
history	O
of	O
each	O
concept	O
is	O
similar	O
,	O
in	O
that	O
both	O
IEnumerable	O
and	O
Iterable	B-api_mention
have	O
a	O
basic	O
motivation	O
to	O
allow	O
'	O
for	O
-	O
each	O
'	O
style	O
looping	O
over	O
the	O
members	O
of	O
data	O
collections	O
.	O
That	O
'	O
s	O
an	O
oversimplification	O
as	O
they	O
both	O
allow	O
more	O
than	O
just	O
that	O
,	O
and	O
they	O
also	O
arrived	O
at	O
that	O
stage	O
via	O
different	O
progressions	O
,	O
but	O
it	O
is	O
a	O
significant	O
common	O
feature	O
regardless	O
.	O
Let	O
'	O
s	O
compare	O
that	O
feature	O
:	O
in	O
both	O
languages	O
,	O
if	O
a	O
class	O
implements	O
the	O
IEnumerable	O
/	O
Iterable	B-api_mention
,	O
then	O
that	O
class	O
must	O
implement	O
at	O
least	O
a	O
single	O
method	O
(	O
for	O
C	O
#	O
,	O
it	O
'	O
s	O
GetEnumerator	O
and	O
for	O
Java	O
it	O
'	O
s	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
In	O
each	O
case	O
,	O
the	O
instance	O
returned	O
from	O
that	O
(	O
IEnumerator	O
/	O
Iterator	B-api_mention
)	O
allows	O
you	O
to	O
access	O
the	O
current	O
and	O
subsequent	O
members	O
of	O
the	O
data	O
.	O
This	O
feature	O
is	O
used	O
in	O
the	O
for	O
-	O
each	O
language	O
syntax	O
.	O
Pick	O
your	O
comparison	O
point	O
-	O
Enhanced	O
functionality	O
IEnumerable	O
in	O
C	O
#	O
has	O
been	O
extended	O
to	O
allow	O
a	O
number	O
of	O
other	O
language	O
features	O
(	O
mostly	O
related	O
to	O
Linq	O
)	O
.	O
Features	O
added	O
include	O
selections	O
,	O
projections	O
,	O
aggregations	O
,	O
etc	O
.	O
These	O
extensions	O
have	O
a	O
strong	O
motivation	O
from	O
use	O
in	O
set	O
-	O
theory	O
,	O
similar	O
to	O
SQL	O
and	O
Relational	O
Database	O
concepts	O
.	O
Java	O
8	O
has	O
also	O
had	O
functionality	O
added	O
to	O
enable	O
a	O
degree	O
of	O
functional	O
programming	O
using	O
Streams	O
and	O
Lambdas	O
.	O
Note	O
that	O
Java	O
8	O
streams	O
are	O
not	O
primarily	O
motivated	O
by	O
set	O
theory	O
,	O
but	O
by	O
functional	O
programming	O
.	O
Regardless	O
,	O
there	O
are	O
a	O
lot	O
of	O
parallels	O
.	O
So	O
,	O
this	O
is	O
the	O
second	O
point	O
.	O
The	O
enhancements	O
made	O
to	O
C	O
#	O
were	O
implemented	O
as	O
an	O
enhancement	O
to	O
the	O
IEnumerable	O
concept	O
.	O
In	O
Java	O
,	O
though	O
,	O
the	O
enhancements	O
made	O
were	O
implemented	O
by	O
creating	O
new	O
base	O
concepts	O
of	O
Lambdas	O
and	O
Streams	O
,	O
and	O
then	O
also	O
creating	O
a	O
relatively	O
trivial	O
way	O
to	O
convert	O
from	O
Iterators	O
and	O
Iterables	O
to	O
Streams	O
,	O
and	O
visa	O
-	O
versa	O
.	O
So	O
,	O
comparing	O
IEnumerable	O
to	O
Java	O
'	O
s	O
Stream	B-api_mention
concept	O
is	O
incomplete	O
.	O
You	O
need	O
to	O
compare	O
it	O
to	O
the	O
combined	O
Streams	O
and	O
Collections	O
API	O
'	O
s	O
in	O
Java	O
.	O
In	O
Java	O
,	O
Streams	O
are	O
not	O
the	O
same	O
as	O
Iterables	O
,	O
or	O
Iterators	O
Streams	O
are	O
not	O
designed	O
to	O
solve	O
problems	O
the	O
same	O
way	O
that	O
iterators	O
are	O
:	O
#	O
li	O
Iterators	O
are	O
a	O
way	O
of	O
describing	O
the	O
sequence	O
of	O
data	O
.	O
#	O
li	O
Streams	O
are	O
a	O
way	O
of	O
describing	O
a	O
sequence	O
of	O
data	O
transformations	O
.	O
With	O
an	O
Iterator	O
,	O
you	O
get	O
a	O
data	O
value	O
,	O
process	O
it	O
,	O
and	O
then	O
get	O
another	O
data	O
value	O
.	O
With	O
Streams	O
,	O
you	O
chain	O
a	O
sequence	O
of	O
functions	O
together	O
,	O
then	O
you	O
feed	O
an	O
input	O
value	O
to	O
the	O
stream	O
,	O
and	O
get	O
the	O
output	O
value	O
from	O
the	O
combined	O
sequence	O
.	O
Note	O
,	O
in	O
Java	O
terms	O
,	O
each	O
function	O
is	O
encapsulated	O
in	O
a	O
single	O
Stream	B-api_mention
instance	O
.	O
The	O
Streams	O
API	O
allows	O
you	O
to	O
link	O
a	O
sequence	O
of	O
Stream	O
instances	O
in	O
a	O
way	O
that	O
chains	O
a	O
sequence	O
of	O
transformation	O
expressions	O
.	O
In	O
order	O
to	O
complete	O
the	O
Stream	B-api_mention
concept	O
,	O
you	O
need	O
a	O
source	O
of	O
data	O
to	O
feed	O
the	O
stream	O
,	O
and	O
a	O
terminal	O
function	O
that	O
consumes	O
the	O
stream	O
.	O
The	O
way	O
you	O
feed	O
values	O
in	O
to	O
the	O
stream	O
may	O
in	O
fact	O
be	O
from	O
an	O
Iterable	B-api_mention
,	O
but	O
the	O
Stream	O
sequence	O
itself	O
is	O
not	O
an	O
Iterable	B-api_mention
,	O
it	O
is	O
a	O
compound	O
function	O
.	O
A	O
Stream	B-api_mention
is	O
also	O
intended	O
to	O
be	O
lazy	O
,	O
in	O
the	O
sense	O
that	O
it	O
only	O
does	O
work	O
when	O
you	O
request	O
a	O
value	O
from	O
it	O
.	O
Note	O
these	O
significant	O
assumptions	O
and	O
features	O
of	O
Streams	O
:	O
#	O
li	O
A	O
Stream	B-api_mention
in	O
Java	O
is	O
a	O
transformation	O
engine	O
,	O
it	O
transforms	O
a	O
data	O
item	O
in	O
one	O
state	O
,	O
to	O
being	O
in	O
another	O
state	O
.	O
#	O
li	O
streams	O
have	O
no	O
concept	O
of	O
the	O
data	O
order	O
or	O
position	O
,	O
the	O
simply	O
transform	O
whatever	O
they	O
are	O
asked	O
to	O
.	O
#	O
li	O
streams	O
can	O
be	O
supplied	O
with	O
data	O
from	O
many	O
sources	O
,	O
including	O
other	O
streams	O
,	O
Iterators	O
,	O
Iterables	O
,	O
Collections	B-api_mention
,	O
#	O
li	O
you	O
cannot	O
"	O
reset	O
"	O
a	O
stream	O
,	O
that	O
would	O
be	O
like	O
"	O
reprogramming	O
the	O
transformation	O
"	O
.	O
Resetting	O
the	O
data	O
source	O
is	O
probably	O
what	O
you	O
want	O
.	O
#	O
li	O
there	O
is	O
logically	O
only	O
1	O
data	O
item	O
'	O
in	O
flight	O
'	O
in	O
the	O
stream	O
at	O
any	O
time	O
(	O
unless	O
the	O
stream	O
is	O
a	O
parallel	O
stream	O
,	O
at	O
which	O
point	O
,	O
there	O
is	O
1	O
item	O
per	O
thread	O
)	O
.	O
This	O
is	O
independent	O
of	O
the	O
data	O
source	O
which	O
may	O
have	O
more	O
than	O
the	O
current	O
items	O
'	O
ready	O
'	O
to	O
be	O
supplied	O
to	O
the	O
stream	O
,	O
or	O
the	O
stream	O
collector	O
which	O
may	O
need	O
to	O
aggregate	O
and	O
reduce	O
multiple	O
values	O
.	O
#	O
li	O
Streams	O
can	O
be	O
unbound	O
(	O
infinite	O
)	O
,	O
limited	O
only	O
by	O
the	O
data	O
source	O
,	O
or	O
collector	O
(	O
which	O
can	O
be	O
infinite	O
too	O
)	O
.	O
#	O
li	O
Streams	O
are	O
'	O
chainable	O
'	O
,	O
the	O
output	O
of	O
filtering	O
one	O
stream	O
,	O
is	O
another	O
stream	O
.	O
Values	O
input	O
to	O
and	O
transformed	O
by	O
a	O
stream	O
can	O
in	O
turn	O
be	O
supplied	O
to	O
another	O
stream	O
which	O
does	O
a	O
different	O
transformation	O
.	O
The	O
data	O
,	O
in	O
its	O
transformed	O
state	O
flows	O
from	O
one	O
stream	O
to	O
the	O
next	O
.	O
You	O
do	O
not	O
need	O
to	O
intervene	O
and	O
pull	O
the	O
data	O
from	O
one	O
stream	O
and	O
plug	O
it	O
in	O
to	O
the	O
next	O
.	O
C	O
#	O
Comparison	O
When	O
you	O
consider	O
that	O
a	O
Java	O
Stream	B-api_mention
is	O
just	O
a	O
part	O
of	O
a	O
supply	O
,	O
stream	O
,	O
and	O
collect	O
system	O
,	O
and	O
that	O
Streams	O
and	O
Iterators	O
are	O
often	O
used	O
together	O
with	O
Collections	O
,	O
then	O
it	O
is	O
no	O
wonder	O
that	O
it	O
is	O
hard	O
to	O
relate	O
to	O
the	O
same	O
concepts	O
which	O
are	O
almost	O
all	O
embedded	O
in	O
to	O
a	O
single	O
IEnumerable	O
concept	O
in	O
C	O
#	O
.	O
Parts	O
of	O
IEnumerable	O
(	O
and	O
close	O
related	O
concepts	O
)	O
are	O
apparent	O
in	O
all	O
of	O
the	O
Java	O
Iterator	B-api_mention
,	O
Iterable	B-api_mention
,	O
Lambda	O
,	O
and	O
Stream	B-api_mention
concepts	O
.	O
There	O
are	O
small	O
things	O
that	O
the	O
Java	O
concepts	O
can	O
do	O
that	O
are	O
harder	O
in	O
IEnumerable	O
,	O
and	O
visa	O
-	O
versa	O
.	O
Conclusion	O
#	O
li	O
There	O
'	O
s	O
no	O
design	O
problem	O
here	O
,	O
just	O
a	O
problem	O
in	O
matching	O
concepts	O
between	O
the	O
languages	O
.	O
#	O
li	O
Streams	O
solve	O
problems	O
in	O
a	O
different	O
way	O
#	O
li	O
Streams	O
add	O
functionality	O
to	O
Java	O
(	O
they	O
add	O
a	O
different	O
way	O
of	O
doing	O
things	O
,	O
they	O
do	O
not	O
take	O
functionality	O
away	O
)	O
Adding	O
Streams	O
gives	O
you	O
more	O
choices	O
when	O
solving	O
problems	O
,	O
which	O
is	O
fair	O
to	O
classify	O
as	O
'	O
enhancing	O
power	O
'	O
,	O
not	O
'	O
reducing	O
'	O
,	O
'	O
taking	O
away	O
'	O
,	O
or	O
'	O
restricting	O
'	O
it	O
.	O
Why	O
are	O
Java	O
Streams	O
once	O
-	O
off	O
?	O
This	O
question	O
is	O
misguided	O
,	O
because	O
streams	O
are	O
function	O
sequences	O
,	O
not	O
data	O
.	O
Depending	O
on	O
the	O
data	O
source	O
that	O
feeds	O
the	O
stream	O
,	O
you	O
can	O
reset	O
the	O
data	O
source	O
,	O
and	O
feed	O
the	O
same	O
,	O
or	O
different	O
stream	O
.	O
Unlike	O
C	O
#	O
'	O
s	O
IEnumerable	O
,	O
where	O
an	O
execution	O
pipeline	O
can	O
be	O
executed	O
as	O
many	O
times	O
as	O
we	O
want	O
,	O
in	O
Java	O
a	O
stream	O
can	O
be	O
'	O
iterated	O
'	O
only	O
once	O
.	O
Comparing	O
an	O
IEnumerable	O
to	O
a	O
Stream	B-api_mention
is	O
misguided	O
.	O
The	O
context	O
you	O
are	O
using	O
to	O
say	O
IEnumerable	O
can	O
be	O
executed	O
as	O
many	O
times	O
as	O
you	O
want	O
,	O
is	O
best	O
compared	O
to	O
Java	O
Iterables	O
,	O
which	O
can	O
be	O
iterated	O
as	O
many	O
times	O
as	O
you	O
want	O
.	O
A	O
Java	O
Stream	B-api_mention
represents	O
a	O
subset	O
of	O
the	O
IEnumerable	O
concept	O
,	O
and	O
not	O
the	O
subset	O
that	O
supplies	O
data	O
,	O
and	O
thus	O
cannot	O
be	O
'	O
rerun	O
'	O
.	O
Any	O
call	O
to	O
a	O
terminal	O
operation	O
closes	O
the	O
stream	O
,	O
rendering	O
it	O
unusable	O
.	O
This	O
'	O
feature	O
'	O
takes	O
away	O
a	O
lot	O
of	O
power	O
.	O
The	O
first	O
statement	O
is	O
true	O
,	O
in	O
a	O
sense	O
.	O
The	O
'	O
takes	O
away	O
power	O
'	O
statement	O
is	O
not	O
.	O
You	O
are	O
still	O
comparing	O
Streams	O
it	O
IEnumerables	O
.	O
The	O
terminal	O
operation	O
in	O
the	O
stream	O
is	O
like	O
a	O
'	O
break	O
'	O
clause	O
in	O
a	O
for	O
loop	O
.	O
You	O
are	O
always	O
free	O
to	O
have	O
another	O
stream	O
,	O
if	O
you	O
want	O
,	O
and	O
if	O
you	O
can	O
re	O
-	O
supply	O
the	O
data	O
you	O
need	O
.	O
Again	O
,	O
if	O
you	O
consider	O
the	O
IEnumerable	O
to	O
be	O
more	O
like	O
an	O
Iterable	B-api_mention
,	O
for	O
this	O
statement	O
,	O
Java	O
does	O
it	O
just	O
fine	O
.	O
I	O
imagine	O
the	O
reason	O
for	O
this	O
is	O
not	O
technical	O
.	O
What	O
were	O
the	O
design	O
considerations	O
behind	O
this	O
strange	O
restriction	O
?	O
The	O
reason	O
is	O
technical	O
,	O
and	O
for	O
the	O
simple	O
reason	O
that	O
a	O
Stream	B-api_mention
a	O
subset	O
of	O
what	O
think	O
it	O
is	O
.	O
The	O
stream	O
subset	O
does	O
not	O
control	O
the	O
data	O
supply	O
,	O
so	O
you	O
should	O
reset	O
the	O
supply	O
,	O
not	O
the	O
stream	O
.	O
In	O
that	O
context	O
,	O
it	O
is	O
not	O
so	O
strange	O
.	O
QuickSort	O
example	O
Your	O
quicksort	O
example	O
has	O
the	O
signature	O
:	O
IEnumerable	O
<	O
T	O
>	O
QuickSort	O
(	O
args	O
)	O
You	O
are	O
treating	O
the	O
input	O
IEnumerable	O
as	O
a	O
data	O
source	O
:	O
IEnumerable	O
<	O
T	O
>	O
lt	O
=	O
ints	O
.	O
Where	O
(	O
args	O
)	O
;	O
Additionally	O
,	O
return	O
value	O
is	O
IEnumerable	O
too	O
,	O
which	O
is	O
a	O
supply	O
of	O
data	O
,	O
and	O
since	O
this	O
is	O
a	O
Sort	O
operation	O
,	O
the	O
order	O
of	O
that	O
supply	O
is	O
significant	O
.	O
If	O
you	O
consider	O
the	O
Java	O
Iterable	B-api_mention
class	O
to	O
be	O
the	O
appropriate	O
match	O
for	O
this	O
,	O
specifically	O
the	O
List	B-api_mention
specialization	O
of	O
Iterable	B-api_mention
,	O
since	O
List	B-api_mention
is	O
a	O
supply	O
of	O
data	O
which	O
has	O
a	O
guaranteed	O
order	O
or	O
iteration	O
,	O
then	O
the	O
equivalent	O
Java	O
code	O
to	O
your	O
code	O
would	O
be	O
:	O
#	O
pre	O
Note	O
there	O
is	O
a	O
bug	O
(	O
which	O
I	O
have	O
reproduced	O
)	O
,	O
in	O
that	O
the	O
sort	O
does	O
not	O
handle	O
duplicate	O
values	O
gracefully	O
,	O
it	O
is	O
a	O
'	O
unique	O
value	O
'	O
sort	O
.	O
Also	O
note	O
how	O
the	O
Java	O
code	O
uses	O
data	O
source	O
(	O
List	O
)	O
,	O
and	O
stream	O
concepts	O
at	O
different	O
point	O
,	O
and	O
that	O
in	O
C	O
#	O
those	O
two	O
'	O
personalities	O
'	O
can	O
be	O
expressed	O
in	O
just	O
IEnumerable	O
.	O
Also	O
,	O
although	O
I	O
have	O
use	O
List	B-api_mention
as	O
the	O
base	O
type	O
,	O
I	O
could	O
have	O
used	O
the	O
more	O
general	O
Collection	B-api_mention
,	O
and	O
with	O
a	O
small	O
iterator	O
-	O
to	O
-	O
Stream	O
conversion	O
,	O
I	O
could	O
have	O
used	O
the	O
even	O
more	O
general	O
Iterable	B-api_mention
Question	O
-	O
8157755	O
,	O
answer	O
-	O
8157791	O
If	O
you	O
want	O
the	O
value	O
you	O
are	O
assigning	O
in	O
the	O
constructor	O
,	O
you	O
need	O
to	O
add	O
a	O
method	O
in	O
the	O
enum	O
definition	O
to	O
return	O
that	O
value	O
.	O
If	O
you	O
want	O
a	O
unique	O
number	O
that	O
represent	O
the	O
enum	O
value	O
,	O
you	O
can	O
use	O
ordinal	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
12619799	O
I	O
would	O
say	O
don	O
'	O
t	O
use	O
ARM	O
and	O
go	O
on	O
with	O
Closeable	B-api_mention
.	O
Use	O
method	O
like	O
,	O
#	O
pre	O
Also	O
you	O
should	O
consider	O
calling	O
close	O
of	O
BufferedWriter	B-api_mention
as	O
it	O
is	O
not	O
just	O
delegating	O
the	O
close	O
to	O
FileWriter	B-api_mention
,	O
but	O
it	O
does	O
some	O
cleanup	O
like	O
flushBuffer	B-api_mention
.	O
Question	O
-	O
24603186	O
,	O
answer	O
-	O
24603187	O
The	O
Javadocs	O
for	O
Collection	B-api_mention
.	I-api_mention
(	I-api_mention
parallelS	I-api_mention
|	I-api_mention
s	I-api_mention
)	I-api_mention
tream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Stream	B-api_mention
itself	O
don	O
'	O
t	O
answer	O
the	O
question	O
,	O
so	O
it	O
'	O
s	O
off	O
to	O
the	O
mailing	O
lists	O
for	O
the	O
rationale	O
.	O
I	O
went	O
through	O
the	O
lambda	O
-	O
libs	O
-	O
spec	O
-	O
observers	O
archives	O
and	O
found	O
one	O
thread	O
specifically	O
about	O
Collection	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
another	O
thread	O
that	O
touched	O
on	O
whether	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Arrays	I-api_mention
should	O
provide	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
match	O
(	O
or	O
actually	O
,	O
whether	O
it	O
should	O
be	O
removed	O
)	O
.	O
There	O
was	O
no	O
once	O
-	O
and	O
-	O
for	O
-	O
all	O
conclusion	O
,	O
so	O
perhaps	O
I	O
'	O
ve	O
missed	O
something	O
from	O
another	O
list	O
or	O
the	O
matter	O
was	O
settled	O
in	O
private	O
discussion	O
.	O
(	O
Perhaps	O
Brian	O
Goetz	O
,	O
one	O
of	O
the	O
principals	O
of	O
this	O
discussion	O
,	O
can	O
fill	O
in	O
anything	O
missing	O
.	O
)	O
The	O
participants	O
made	O
their	O
points	O
well	O
,	O
so	O
this	O
answer	O
is	O
mostly	O
just	O
an	O
organization	O
of	O
the	O
relevant	O
quotes	O
,	O
with	O
a	O
few	O
clarifications	O
in	O
[	O
brackets	O
]	O
,	O
presented	O
in	O
order	O
of	O
importance	O
(	O
as	O
I	O
interpret	O
it	O
)	O
.	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
covers	O
a	O
very	O
common	O
case	O
Brian	O
Goetz	O
in	O
the	O
first	O
thread	O
,	O
explaining	O
why	O
Collections	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
valuable	O
enough	O
to	O
keep	O
even	O
after	O
other	O
parallel	O
stream	O
factory	O
methods	O
have	O
been	O
removed	O
:	O
#	O
blockquote	O
Brian	O
Goetz	O
stands	O
by	O
this	O
position	O
in	O
the	O
later	O
discussion	O
about	O
Arrays	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
more	O
performant	O
Brian	O
Goetz	O
:	O
#	O
blockquote	O
In	O
response	O
to	O
Kevin	O
Bourrillion	O
'	O
s	O
skepticism	O
about	O
whether	O
the	O
effect	O
is	O
significant	O
,	O
Brian	O
again	O
:	O
#	O
blockquote	O
Doug	O
Lea	O
follows	O
up	O
,	O
but	O
hedges	O
his	O
position	O
:	O
#	O
blockquote	O
Indeed	O
,	O
the	O
later	O
discussion	O
about	O
Arrays	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
takes	O
notice	O
of	O
lower	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
cost	O
.	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
statefulness	O
complicates	O
the	O
future	O
At	O
the	O
time	O
of	O
the	O
discussion	O
,	O
switching	O
a	O
stream	O
from	O
sequential	O
to	O
parallel	O
and	O
back	O
could	O
be	O
interleaved	O
with	O
other	O
stream	O
operations	O
.	O
Brian	O
Goetz	O
,	O
on	O
behalf	O
of	O
Doug	O
Lea	O
,	O
explains	O
why	O
sequential	O
/	O
parallel	O
mode	O
switching	O
may	O
complicate	O
future	O
development	O
of	O
the	O
Java	O
platform	O
:	O
#	O
blockquote	O
This	O
mode	O
switching	O
was	O
removed	O
after	O
further	O
discussion	O
.	O
In	O
the	O
current	O
version	O
of	O
the	O
library	O
,	O
a	O
stream	O
pipeline	O
is	O
either	O
sequential	O
or	O
parallel	O
;	O
last	O
call	O
to	O
sequential	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
wins	O
.	O
Besides	O
side	O
-	O
stepping	O
the	O
statefulness	O
problem	O
,	O
this	O
change	O
also	O
improved	O
the	O
performance	O
of	O
using	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
set	O
up	O
a	O
parallel	O
pipeline	O
from	O
a	O
sequential	O
stream	O
factory	O
.	O
exposing	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
as	O
a	O
first	O
-	O
class	O
citizen	O
improves	O
programmer	O
perception	O
of	O
the	O
library	O
,	O
leading	O
them	O
to	O
write	O
better	O
code	O
Brian	O
Goetz	O
again	O
,	O
in	O
response	O
to	O
Tim	O
Peierls	O
'	O
s	O
argument	O
that	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
allows	O
programmers	O
to	O
understand	O
streams	O
sequentially	O
before	O
going	O
parallel	O
:	O
#	O
blockquote	O
Question	O
-	O
32475166	O
,	O
answer	O
-	O
32476850	O
When	O
you	O
think	O
about	O
the	O
type	O
of	O
the	O
operands	O
,	O
the	O
problem	O
becomes	O
more	O
apparent	O
:	O
this	O
.	O
method	O
!	O
=	O
null	O
?	O
this	O
.	O
method	O
:	O
this	O
.	O
constructor	O
has	O
as	O
type	O
the	O
most	O
specialized	O
common	O
type	O
of	O
both	O
the	O
operands	O
,	O
i	O
.	O
e	O
.	O
the	O
most	O
specialized	O
type	O
common	O
to	O
both	O
this	O
.	O
method	O
and	O
this	O
.	O
constructor	O
.	O
In	O
Java	O
7	O
this	O
is	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Member	O
,	O
however	O
the	O
Java	O
8	O
class	O
library	O
introduces	O
a	O
new	O
type	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Executable	O
which	O
is	O
more	O
specialized	O
than	O
the	O
generic	O
Member	O
.	O
Hence	O
with	O
a	O
Java	O
8	O
class	O
library	O
the	O
result	O
type	O
of	O
the	O
ternary	O
expression	O
is	O
Executable	O
rather	O
than	O
Member	O
.	O
Some	O
(	O
pre	O
-	O
release	O
)	O
versions	O
of	O
the	O
Java	O
8	O
compiler	O
seem	O
to	O
have	O
produced	O
an	O
explicit	O
reference	O
to	O
Executable	O
inside	O
generated	O
code	O
when	O
compiling	O
the	O
ternary	O
operator	O
.	O
This	O
would	O
trigger	O
a	O
class	O
load	O
,	O
and	O
thus	O
in	O
turn	O
a	O
ClassNotFoundException	O
at	O
runtime	O
when	O
running	O
with	O
a	O
class	O
library	O
<	O
JDK	O
8	O
,	O
because	O
Executable	O
only	O
exists	O
for	O
JDK	O
โฅ	O
8	O
.	O
As	O
noted	O
by	O
Tagir	O
Valeev	O
in	O
this	O
answer	O
,	O
this	O
is	O
actually	O
a	O
bug	O
in	O
pre	O
-	O
release	O
versions	O
of	O
JDK	O
8	O
and	O
has	O
since	O
been	O
fixed	O
,	O
so	O
both	O
the	O
if	O
-	O
else	O
workaround	O
and	O
the	O
explanatory	O
comment	O
are	O
now	O
obsolete	O
.	O
Additional	O
note	O
:	O
One	O
might	O
come	O
to	O
the	O
conclusion	O
that	O
this	O
compiler	O
bug	O
was	O
present	O
before	O
Java	O
8	O
.	O
However	O
,	O
the	O
byte	O
code	O
generated	O
for	O
the	O
ternary	O
by	O
OpenJDK	O
7	O
is	O
the	O
same	O
as	O
the	O
byte	O
code	O
generated	O
by	O
OpenJDK	O
8	O
.	O
In	O
fact	O
,	O
the	O
type	O
of	O
the	O
expression	O
goes	O
completely	O
unmentioned	O
at	O
runtime	O
,	O
the	O
code	O
is	O
really	O
only	O
test	O
,	O
branch	O
,	O
load	O
,	O
return	O
without	O
any	O
additional	O
checks	O
going	O
on	O
.	O
So	O
rest	O
assured	O
that	O
this	O
is	O
not	O
a	O
problem	O
(	O
anymore	O
)	O
and	O
indeed	O
seems	O
to	O
have	O
been	O
a	O
temporary	O
problem	O
during	O
development	O
of	O
Java	O
8	O
.	O
Question	O
-	O
6608795	O
I	O
wonder	O
what	O
the	O
difference	O
is	O
between	O
Class	B-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
ClassLoader	B-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
edit	O
:	O
I	O
especially	O
want	O
to	O
know	O
if	O
any	O
caching	O
is	O
involved	O
on	O
file	O
/	O
directory	O
level	O
.	O
As	O
in	O
"	O
are	O
directory	O
listings	O
cached	O
in	O
the	O
Class	B-api_mention
version	O
?	O
"	O
AFAIK	O
the	O
following	O
should	O
essentially	O
do	O
the	O
same	O
,	O
but	O
they	O
are	O
not	O
:	O
#	O
pre	O
I	O
discovered	O
this	O
when	O
fiddling	O
with	O
some	O
report	O
generation	O
code	O
that	O
creates	O
a	O
new	O
file	O
in	O
WEB	O
-	O
INF	O
/	O
classes	O
/	O
from	O
an	O
existing	O
file	O
in	O
that	O
directory	O
.	O
When	O
using	O
the	O
method	O
from	O
Class	B-api_mention
,	O
I	O
could	O
find	O
files	O
that	O
were	O
there	O
at	O
deployment	O
using	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
when	O
trying	O
to	O
fetch	O
the	O
newly	O
created	O
file	O
,	O
I	O
recieved	O
a	O
null	O
object	O
.	O
Browsing	O
the	O
directory	O
clearly	O
shows	O
that	O
the	O
new	O
file	O
is	O
there	O
.	O
The	O
filenames	O
were	O
prepended	O
with	O
a	O
forward	O
slash	O
as	O
in	O
"	O
/	O
myFile	O
.	O
txt	O
"	O
.	O
The	O
ClassLoader	B-api_mention
version	O
of	O
getResource	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
the	O
other	O
hand	O
did	O
find	O
the	O
generated	O
file	O
.	O
From	O
this	O
experience	O
it	O
seems	O
that	O
there	O
is	O
some	O
kind	O
of	O
caching	O
of	O
the	O
directory	O
listing	O
going	O
on	O
.	O
Am	O
I	O
right	O
,	O
and	O
if	O
so	O
,	O
where	O
is	O
this	O
documented	O
?	O
From	O
the	O
API	O
docs	O
on	O
Class	B-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
blockquote	O
To	O
me	O
,	O
this	O
reads	O
"	O
Class	B-api_mention
.	I-api_mention
getResource	I-api_mention
is	O
really	O
calling	O
its	O
own	O
classloader	O
'	O
s	O
getResource	B-api_mention
(	I-api_mention
)	I-api_mention
"	O
.	O
Which	O
would	O
be	O
the	O
same	O
as	O
doing	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
it	O
is	O
obviously	O
not	O
.	O
Could	O
someone	O
please	O
provide	O
me	O
with	O
some	O
illumination	O
into	O
this	O
matter	O
?	O
Question	O
-	O
6840803	O
,	O
answer	O
-	O
6840856	O
SimpleDateFormat	B-api_mention
stores	O
intermediate	O
results	O
in	O
instance	O
fields	O
.	O
So	O
if	O
one	O
instance	O
is	O
used	O
by	O
two	O
threads	O
they	O
can	O
mess	O
each	O
other	O
'	O
s	O
results	O
.	O
Looking	O
at	O
the	O
source	O
code	O
reveals	O
that	O
there	O
is	O
a	O
Calendar	B-api_mention
instance	O
field	O
,	O
which	O
is	O
used	O
by	O
operations	O
on	O
DateFormat	B-api_mention
/	O
SimpleDateFormat	B-api_mention
For	O
example	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
calendar	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
initially	O
and	O
then	O
calendar	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
another	O
thread	O
invokes	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
the	O
completion	O
of	O
the	O
first	O
invocation	O
,	O
it	O
will	O
clear	O
the	O
calendar	O
,	O
but	O
the	O
other	O
invocation	O
will	O
expect	O
it	O
to	O
be	O
populated	O
with	O
intermediate	O
results	O
of	O
the	O
calculation	O
.	O
One	O
way	O
to	O
reuse	O
date	O
formats	O
without	O
trading	O
thread	O
-	O
safety	O
is	O
to	O
put	O
them	O
in	O
a	O
ThreadLocal	B-api_mention
-	O
some	O
libraries	O
do	O
that	O
.	O
That	O
'	O
s	O
if	O
you	O
need	O
to	O
use	O
the	O
same	O
format	O
multiple	O
times	O
within	O
one	O
thread	O
.	O
But	O
in	O
case	O
you	O
are	O
using	O
a	O
servlet	O
container	O
(	O
that	O
has	O
a	O
thread	O
pool	O
)	O
,	O
remember	O
to	O
clean	O
the	O
thread	O
-	O
local	O
after	O
you	O
finish	O
.	O
To	O
be	O
honest	O
,	O
I	O
don	O
'	O
t	O
understand	O
why	O
they	O
need	O
the	O
instance	O
field	O
,	O
but	O
that	O
'	O
s	O
the	O
way	O
it	O
is	O
.	O
You	O
can	O
also	O
use	O
joda	O
-	O
time	O
DateTimeFormat	B-api_mention
which	O
is	O
threadsafe	O
.	O
Question	O
-	O
9749746	O
How	O
do	O
atomic	B-api_mention
/	O
volatile	O
/	O
synchronized	O
work	O
internally	O
?	O
What	O
is	O
the	O
difference	O
between	O
the	O
following	O
code	O
blocks	O
?	O
Code	O
1	O
#	O
pre	O
Code	O
2	O
#	O
pre	O
Code	O
3	O
#	O
pre	O
Does	O
volatile	O
work	O
in	O
the	O
following	O
way	O
?	O
Is	O
#	O
pre	O
equivalent	O
to	O
#	O
pre	O
I	O
think	O
that	O
two	O
threads	O
cannot	O
enter	O
a	O
synchronized	O
block	O
at	O
the	O
same	O
time	O
.	O
.	O
.	O
am	O
I	O
right	O
?	O
If	O
this	O
is	O
true	O
then	O
how	O
does	O
atomic	B-api_mention
.	I-api_mention
incrementAndGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
work	O
without	O
synchronized	O
?	O
And	O
is	O
it	O
thread	O
-	O
safe	O
?	O
And	O
what	O
is	O
the	O
difference	O
between	O
internal	O
reading	O
and	O
writing	O
to	O
volatile	O
variables	O
/	O
atomic	B-api_mention
variables	O
?	O
I	O
read	O
in	O
some	O
article	O
that	O
the	O
thread	O
has	O
a	O
local	O
copy	O
of	O
the	O
variables	O
-	O
what	O
is	O
that	O
?	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
19629304	O
If	O
you	O
do	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
main	O
method	O
,	O
the	O
thread	O
of	O
main	O
method	O
will	O
invoke	O
the	O
run	O
method	O
instead	O
of	O
the	O
thread	O
you	O
require	O
to	O
run	O
.	O
The	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
creates	O
new	O
thread	O
and	O
for	O
which	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
to	O
be	O
done	O
Question	O
-	O
5263187	O
,	O
answer	O
-	O
5263201	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846963	O
#	O
blockquote	O
For	O
the	O
same	O
reason	O
you	O
'	O
d	O
use	O
Collections	B-api_mention
.	I-api_mention
unmodifiableMap	I-api_mention
(	I-api_mention
)	I-api_mention
at	O
some	O
point	O
.	O
You	O
want	O
to	O
return	O
a	O
Map	B-api_mention
instance	O
that	O
throws	O
an	O
exception	O
if	O
the	O
user	O
attempts	O
to	O
modify	O
it	O
.	O
It	O
'	O
s	O
just	O
a	O
special	O
case	O
:	O
the	O
empty	O
Map	B-api_mention
.	O
Question	O
-	O
9510125	O
,	O
answer	O
-	O
9511880	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
In	O
Swing	O
when	O
you	O
create	O
Component	O
,	O
it	O
is	O
not	O
valid	O
i	O
.	O
e	O
.	O
it	O
'	O
s	O
valid	O
property	O
is	O
false	O
.	O
A	O
component	O
is	O
said	O
to	O
be	O
valid	O
,	O
when	O
it	O
'	O
s	O
width	O
,	O
height	O
,	O
location	O
and	O
stuff	O
has	O
been	O
determined	O
.	O
This	O
is	O
usually	O
done	O
by	O
calling	O
their	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
directly	O
or	O
indirectly	O
.	O
When	O
we	O
call	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
containers	O
,	O
it	O
will	O
validate	O
the	O
container	O
(	O
if	O
it	O
is	O
invalid	O
)	O
by	O
calling	O
its	O
doLayout	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
typically	O
will	O
invoke	O
the	O
LayoutManager	B-api_mention
.	O
Now	O
each	O
child	O
placed	O
on	O
this	O
container	O
will	O
be	O
validated	O
recursively	O
,	O
so	O
that	O
the	O
entire	O
tree	O
will	O
be	O
laid	O
out	O
and	O
will	O
become	O
valid	O
.	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
to	O
be	O
called	O
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
width	O
/	O
height	O
and	O
call	O
repaint	O
(	O
)	O
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
appearance	O
.	O
For	O
Example	O
,	O
If	O
your	O
JFrame	O
contains	O
a	O
JPanel	O
,	O
now	O
at	O
certain	O
point	O
of	O
time	O
you	O
removed	O
that	O
JPanel	O
and	O
inserted	O
a	O
new	O
one	O
in	O
it	O
'	O
s	O
place	O
,	O
depending	O
on	O
the	O
contents	O
of	O
the	O
newly	O
placed	O
JPanel	O
,	O
the	O
size	O
of	O
the	O
components	O
inside	O
the	O
JPanel	O
as	O
well	O
as	O
The	O
CONTAINER	O
itself	O
(	O
by	O
virtue	O
of	O
the	O
layout	O
manager	O
used	O
by	O
it	O
)	O
,	O
changes	O
.	O
Which	O
pushes	O
it	O
to	O
the	O
invalidate	O
state	O
.	O
So	O
in	O
order	O
to	O
validate	O
this	O
change	O
,	O
you	O
have	O
to	O
explicitly	O
call	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
This	O
thing	O
is	O
something	O
,	O
I	O
had	O
never	O
used	O
,	O
so	O
might	O
be	O
not	O
much	O
of	O
the	O
info	O
I	O
can	O
give	O
.	O
But	O
seems	O
like	O
the	O
scenario	O
presented	O
above	O
,	O
can	O
give	O
a	O
bit	O
of	O
hint	O
,	O
as	O
to	O
what	O
happens	O
in	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271460	O
The	O
"	O
$	O
1	O
"	O
is	O
not	O
"	O
useless	O
non	O
-	O
sense	O
"	O
.	O
If	O
your	O
class	O
is	O
anonymous	O
,	O
a	O
number	O
is	O
appended	O
.	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
class	O
itself	O
,	O
but	O
its	O
declaring	O
class	O
,	O
then	O
you	O
can	O
use	O
getEnclosingClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
For	O
example	O
:	O
#	O
pre	O
You	O
can	O
move	O
that	O
in	O
some	O
static	O
utility	O
method	O
.	O
But	O
note	O
that	O
this	O
is	O
not	O
the	O
current	O
class	O
name	O
.	O
The	O
anonymous	O
class	O
is	O
different	O
class	O
than	O
its	O
enclosing	O
class	O
.	O
The	O
case	O
is	O
similar	O
for	O
inner	O
classes	O
.	O
Question	O
-	O
22463062	O
,	O
answer	O
-	O
28324294	O
You	O
can	O
also	O
use	O
LocalDate	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
LocalDateTime	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
String	B-api_mention
without	O
providing	O
it	O
with	O
a	O
pattern	O
,	O
if	O
the	O
String	B-api_mention
is	O
in	O
ISO	O
-	O
8601	O
format	O
.	O
for	O
example	O
,	O
#	O
pre	O
Output	O
,	O
#	O
pre	O
and	O
use	O
DateTimeFormatter	B-api_mention
only	O
if	O
you	O
have	O
to	O
deal	O
with	O
other	O
date	O
patterns	O
,	O
For	O
example	O
,	O
dd	O
MMM	O
uuuu	O
represents	O
the	O
day	O
of	O
the	O
month	O
(	O
two	O
digits	O
)	O
,	O
three	O
letters	O
of	O
the	O
name	O
of	O
the	O
month	O
(	O
Jan	O
,	O
Feb	O
,	O
Mar	O
,	O
.	O
.	O
.	O
)	O
,	O
and	O
a	O
four	O
-	O
digit	O
year	O
:	O
#	O
pre	O
Output	O
04	O
Aug	O
2015	O
parses	O
to	O
2015	O
-	O
08	O
-	O
04	O
also	O
remember	O
that	O
the	O
DateTimeFormatter	B-api_mention
object	O
is	O
bidirectional	O
;	O
it	O
can	O
both	O
parse	O
input	O
and	O
format	O
output	O
.	O
#	O
pre	O
Output	O
2015	O
-	O
08	O
-	O
04	O
formats	O
as	O
04	O
Aug	O
2015	O
(	O
see	O
complete	O
list	O
of	O
Patterns	O
for	O
Formatting	O
and	O
Parsing	O
DateFormatter	B-api_mention
)	O
#	O
pre	O
Question	O
-	O
25168062	O
Why	O
is	O
i	O
+	O
+	O
not	O
atomic	O
in	O
Java	O
?	O
To	O
get	O
a	O
bit	O
deeper	O
in	O
Java	O
I	O
tried	O
to	O
count	O
how	O
often	O
the	O
loop	O
in	O
threads	O
are	O
executed	O
.	O
So	O
I	O
used	O
a	O
private	O
static	O
int	O
total	O
=	O
0	O
;	O
in	O
the	O
main	O
class	O
.	O
I	O
have	O
two	O
threads	O
.	O
#	O
li	O
Thread	O
1	O
:	O
Prints	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
Thread	O
2	O
:	O
Prints	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
I	O
count	O
the	O
lines	O
printed	O
by	O
thread	O
1	O
and	O
thread	O
2	O
.	O
But	O
the	O
lines	O
of	O
thread	O
1	O
+	O
lines	O
of	O
thread	O
2	O
don	O
'	O
t	O
match	O
the	O
total	O
number	O
of	O
lines	O
printed	O
out	O
.	O
Here	O
is	O
my	O
code	O
:	O
#	O
pre	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7800008	O
Strictly	O
speaking	O
-	O
you	O
have	O
no	O
choice	O
but	O
calling	O
either	O
hostname	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
-	O
on	O
Unix	O
gethostname	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
the	O
name	O
of	O
your	O
computer	O
.	O
Any	O
attempt	O
to	O
determine	O
the	O
hostname	O
by	O
an	O
IP	O
address	O
like	O
this	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
bound	O
to	O
fail	O
in	O
some	O
circumstances	O
:	O
#	O
li	O
The	O
IP	O
address	O
might	O
not	O
resolve	O
into	O
any	O
name	O
.	O
Bad	O
DNS	O
setup	O
,	O
bad	O
system	O
setup	O
or	O
bad	O
provider	O
setup	O
may	O
be	O
the	O
reason	O
for	O
this	O
.	O
#	O
li	O
A	O
name	O
in	O
DNS	O
can	O
have	O
many	O
aliases	O
called	O
CNAMEs	O
.	O
These	O
can	O
only	O
be	O
resolved	O
in	O
one	O
direction	O
properly	O
:	O
name	O
to	O
address	O
.	O
The	O
reverse	O
direction	O
is	O
ambiguous	O
.	O
Which	O
one	O
is	O
the	O
"	O
official	O
"	O
name	O
?	O
#	O
li	O
A	O
host	O
can	O
have	O
many	O
different	O
IP	O
addresses	O
-	O
and	O
each	O
address	O
can	O
have	O
many	O
different	O
names	O
.	O
Two	O
common	O
cases	O
are	O
:	O
One	O
ethernet	O
port	O
has	O
several	O
"	O
logical	O
"	O
IP	O
addresses	O
or	O
the	O
computer	O
has	O
several	O
ethernet	O
ports	O
.	O
It	O
is	O
configurable	O
whether	O
they	O
share	O
an	O
IP	O
or	O
have	O
different	O
IPs	O
.	O
This	O
is	O
called	O
"	O
multihomed	O
"	O
.	O
#	O
li	O
One	O
Name	O
in	O
DNS	O
can	O
resolve	O
to	O
several	O
IP	O
Addresses	O
.	O
And	O
not	O
all	O
of	O
those	O
addresses	O
must	O
be	O
located	O
on	O
the	O
same	O
computer	O
!	O
(	O
Usecase	O
:	O
A	O
simple	O
form	O
of	O
load	O
-	O
balancing	O
)	O
#	O
li	O
Let	O
'	O
s	O
not	O
even	O
start	O
talking	O
about	O
dynamic	O
IP	O
addresses	O
.	O
Also	O
don	O
'	O
t	O
confuse	O
the	O
name	O
of	O
an	O
IP	O
-	O
address	O
with	O
the	O
name	O
of	O
the	O
host	O
(	O
hostname	O
)	O
.	O
A	O
metaphor	O
might	O
make	O
it	O
clearer	O
:	O
#	O
blockquote	O
This	O
illustrates	O
it	O
pretty	O
much	O
I	O
think	O
.	O
The	O
good	O
news	O
is	O
:	O
The	O
real	O
hostname	O
is	O
usually	O
not	O
necessary	O
.	O
In	O
most	O
cases	O
any	O
name	O
which	O
resolves	O
into	O
an	O
IP	O
address	O
on	O
this	O
host	O
will	O
do	O
.	O
(	O
The	O
stranger	O
might	O
enter	O
the	O
city	O
by	O
Northgate	O
,	O
but	O
helpful	O
locals	O
translate	O
the	O
"	O
2nd	O
left	O
"	O
part	O
.	O
)	O
If	O
the	O
remaining	O
corner	O
cases	O
you	O
must	O
use	O
the	O
definitive	O
source	O
of	O
this	O
configuration	O
setting	O
-	O
which	O
is	O
the	O
C	O
function	O
gethostname	O
(	O
args	O
)	O
.	O
That	O
function	O
is	O
also	O
called	O
by	O
the	O
program	O
hostname	O
.	O
