{"items": [{"body": "<p>I have a string like this: </p>\n\n<pre><code>mysz = \"name=john age=13 year=2001\";\n</code></pre>\n\n<p>I want to remove the whitespaces in the string. I tried <code>trim()</code> but this removes only whitespaces before and after the whole string. I also tried <code>replaceAll(\"\\\\W\", \"\")</code> but then the <code>=</code> also gets removed.</p>\n\n<p>How can I achieve a string with:</p>\n\n<pre><code>mysz2 = \"name=johnage=13year=2001\"\n</code></pre>\n", "title": "Removing whitespace from strings in Java", "tags": ["java", "whitespace"], "link": "http://stackoverflow.com/questions/5455794/removing-whitespace-from-strings-in-java", "post_type": "question", "question_id": 5455794}, {"body": "<p>It is supposed to be generally preferable to use a <code>StringBuilder</code> for string concatenation in Java. Is this always the case?</p>\n\n<p>What I mean is this: Is the overhead of creating a <code>StringBuilder</code> object, calling the <code>append()</code> method and finally <code>toString()</code> already smaller then concatenating existing strings with the <code>+</code> operator for two strings, or is it only advisable for more (than two) strings?</p>\n\n<p>If there is such a threshold, what does it depend on (perhaps the string length, but in which way)?</p>\n\n<p>And finally, would you trade the readability and conciseness of the <code>+</code> concatenation for the performance of the <code>StringBuilder</code> in smaller cases like two, three or four strings?</p>\n\n<p><strong>EDIT</strong><br>\nExplicit use of <code>StringBuilder</code> for regular concatenations is being mentioned as obsolete at <a href=\"http://stackoverflow.com/questions/4019180/obsolete-java-optimization-tips\">obsolete java optimization tips</a> as well as at <a href=\"http://stackoverflow.com/questions/2248278/java-urban-myths\">java urban myths</a>. </p>\n", "title": "when to use StringBuilder in java", "tags": ["java", "string", "performance"], "link": "http://stackoverflow.com/questions/4645020/when-to-use-stringbuilder-in-java", "post_type": "question", "question_id": 4645020}, {"body": "<p>I can use this:</p>\n\n<pre><code>String str = \"TextX Xto modifyX\";\nstr = str.replace('X','');//that does not work because there is no such character ''\n</code></pre>\n\n<p>Is there a way to remove all occurrences of character <code>X</code> from a String in Java?</p>\n\n<p>I tried this and is not what I want: <code>str.replace('X',' '); //replace with space</code></p>\n", "title": "Remove all occurrences of char from string", "tags": ["java", "string", "character"], "link": "http://stackoverflow.com/questions/4576352/remove-all-occurrences-of-char-from-string", "post_type": "question", "question_id": 4576352}, {"body": "<p>There have been <a href=\"http://stackoverflow.com/questions/4762573/should-embeddable-jpa-class-implement-equals-and-hashcode\">some</a> <a href=\"http://stackoverflow.com/questions/3147166/how-to-implement-equals-and-hashcode-methods-in-baseentity-of-jpa\">discussions</a> here about JPA entities and which <code>hashCode()</code>/<code>equals()</code> implementation should be used for JPA entity classes.  Most (if not all) of them depend on Hibernate, but I'd like to discuss them JPA-implementation-neutrally (I am using EclipseLink, by the way).</p>\n\n<p>All possible implementations are having their own <strong>advantages</strong> and <strong>disadvantages</strong> regarding:</p>\n\n<ul>\n<li><strong><code>hashCode()</code>/<code>equals()</code></strong> contract <strong>conformity</strong> (immutability) for <code>List</code>/<code>Set</code> operations</li>\n<li>Whether <strong>identical</strong> objects (e.g. from different sessions, dynamic proxies from lazily-loaded data structures) can be detected</li>\n<li>Whether entities behave correctly in <strong>detached (or non-persisted) state</strong> \n<br></li>\n</ul>\n\n<p>As far I can see, there are <strong>three options</strong>: </p>\n\n<ol>\n<li>Do not override them; rely on <code>Object.equals()</code> and <code>Object.hashCode()</code>\n<ul>\n<li><code>hashCode()</code>/<code>equals()</code> work</li>\n<li>cannot identify identical objects, problems with dynamic proxies</li>\n<li>no problems with detached entities</li>\n</ul></li>\n<li>Override them, based on the <strong>primary key</strong>\n<ul>\n<li><code>hashCode()</code>/<code>equals()</code> are broken</li>\n<li>correct identity (for all managed entities)</li>\n<li>problems with detached entities</li>\n</ul></li>\n<li>Override them, based on the <strong>Business-Id</strong> (non-primary key fields; what about foreign keys?)\n<ul>\n<li><code>hashCode()</code>/<code>equals()</code> are broken</li>\n<li>correct identity (for all managed entities)</li>\n<li>no problems with detached entities</li>\n</ul></li>\n</ol>\n\n<p><strong>My questions are:</strong></p>\n\n<ol>\n<li>Did I miss an option and/or pro/con point?<br></li>\n<li>What option did you choose and why?</li>\n</ol>\n\n<p><br><br>\n<strong>UPDATE 1:</strong></p>\n\n<p>By \"<code>hashCode()</code>/<code>equals()</code> are broken\", I mean that successive <code>hashCode()</code> invocations may return differing values, which is (when correctly implemented) not broken in the sense of the <code>Object</code> API documentation, but which causes problems when trying to retrieve a changed entity from a <code>Map</code>,  <code>Set</code> or other hash-based <code>Collection</code>.  Consequently, JPA implementations (at least EclipseLink) will not work correctly in some cases.</p>\n\n<p><strong>UPDATE 2:</strong></p>\n\n<p>Thank you for your answers -- most of them have remarkable quality.<br>\nUnfortunately, I am still unsure which approach will be the best for a real-life application, or how to determine the best approach for my application.  So, I'll keep the question open and hope for some more discussions and/or opinions.</p>\n", "title": "The JPA hashCode() / equals() dilemma", "tags": ["java", "hibernate", "jpa", "identity", "eclipselink"], "link": "http://stackoverflow.com/questions/5031614/the-jpa-hashcode-equals-dilemma", "post_type": "question", "question_id": 5031614}, {"body": "<p>I am storing a SQL query in my strings.xml file and I want to use <code>String.Format</code> to build the final string in code.  The <code>SELECT</code> statement uses a like, something like this:</p>\n\n<pre><code>SELECT Field1, Field2 FROM mytable WHERE Field1 LIKE '%something%'\n</code></pre>\n\n<p>In order to format that I replace 'something' with %1$s so it becomes:</p>\n\n<pre><code>SELECT Field1, Field2 FROM mytable WHERE Field1 LIKE \\'%%1$s%\\'\n</code></pre>\n\n<p>I escape the single quotes with the backslash.  However I am not able to escape the % sign.  </p>\n\n<p>How can I include a like statement in my strings.xml file?</p>\n", "title": "How to escape % in String.Format?", "tags": ["java", "android", "syntax"], "link": "http://stackoverflow.com/questions/5011932/how-to-escape-in-string-format", "post_type": "question", "question_id": 5011932}, {"body": "<p>I'm trying to determine if a particular item in an Array of strings is an integer or not.</p>\n\n<p>I am <code>.split(\" \")'ing</code> an infix expression in <code>String</code> form, and then trying to split the resultant array into two arrays; one for integers, one for operators, whilst discarding parentheses, and other miscellaneous items. What would be the best way to accomplish this? </p>\n\n<p>I thought I might be able to find a <code>Integer.isInteger(String arg)</code> method or something, but no such luck.</p>\n", "title": "Determine if a String is an Integer in Java", "tags": ["java", "string", "int"], "link": "http://stackoverflow.com/questions/5439529/determine-if-a-string-is-an-integer-in-java", "post_type": "question", "question_id": 5439529}, {"body": "<p>What is the difference between <code>getAttribute()</code> and <code>getParameter()</code> methods within <code>HttpServletRequest</code> class?</p>\n", "title": "Difference between getAttribute() and getParameter()", "tags": ["java", "jsp", "servlets"], "link": "http://stackoverflow.com/questions/5243754/difference-between-getattribute-and-getparameter", "post_type": "question", "question_id": 5243754}, {"body": "<p>How can I get the <code>e.printStackTrace()</code> and store it into a <code>String</code> variable?\nI want to use the string generated by <code>e.printStackTrace()</code> later in my program.</p>\n\n<p>I'm still new to Java so I'm not too familiar with <code>StringWriter</code> that I think\nwill be the solution. Or if you have any other ideas please let me know.  Thanks</p>\n", "title": "How to store printStackTrace into a string", "tags": ["java", "stack-trace"], "link": "http://stackoverflow.com/questions/4812570/how-to-store-printstacktrace-into-a-string", "post_type": "question", "question_id": 4812570}, {"body": "<p>A simple thing to do is to use a HashSet with an incorrect (or non-existent) <code>hashCode()</code> or <code>equals()</code>, and then keep adding \"duplicates\".  Instead of ignoring duplicates as it should, the set will only ever grow and you won't be able to remove them.</p>\n\n<p>If you want these bad keys/elements to hang around you can use a static field like </p>\n\n<pre><code>class BadKey {\n   // no hashCode or equals();\n   public final String key;\n   public BadKey(String key) { this.key = key; }\n}\n\nMap map = System.getProperties();\nmap.put(new BadKey(\"key\"), \"value\"); // Memory leak even if your threads die.\n</code></pre>\n", "title": "Creating a memory leak with Java", "tags": ["java", "memory", "memory-leaks"], "link": "http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java/6470695#6470695", "post_type": "answer", "question_id": 6470651, "answer_id": 6470695}, {"body": "<p>Below there will be a non-obvious case where Java leaks, besides the standard case of forgotten listeners, static references, bogus/modifiable keys in hashmaps, or just threads stuck without any chance to end their life-cycle.</p>\n\n<ul>\n<li><code>File.deleteOnExit()</code> - always leaks the string, <del>if the string is a substring, the leak is even worse (the underlying char[] is also leaked)</del> - <em>in Java&nbsp;7 substring also copies the <code>char[]</code>, so the later doesn't apply</em>; @Daniel, no needs for votes, though.</li>\n</ul>\n\n<p>I'll concentrate on threads to show the danger of unmanaged threads mostly, don't wish to even touch swing.</p>\n\n<ul>\n<li><p><code>Runtime.addShutdownHook</code> and not remove... and then even with removeShutdownHook due to a bug in ThreadGroup class regarding unstarted threads it may not get collected, effectively leak the ThreadGroup. JGroup has the leak in GossipRouter.</p></li>\n<li><p>Creating, but not starting, a <code>Thread</code> goes into the same category as above.</p></li>\n<li><p>Creating a thread inherits the <code>ContextClassLoader</code> and <code>AccessControlContext</code>, plus the <code>ThreadGroup</code> and any <code>InheritedThreadLocal</code>, all those references are potential leaks, along with the entire classes loaded by the classloader and all static references, and ja-ja. The effect is especially visible with the entire j.u.c.Executor framework that features a super simple <code>ThreadFactory</code> interface, yet most developers have no clue of the lurking danger. Also a lot of libraries do start threads upon request (way too many industry popular libraries).</p></li>\n<li><p><code>ThreadLocal</code> caches; those are evil in many cases. I am sure everyone has seen quite a bit of simple caches based on ThreadLocal, well the bad news: if the thread keeps going more than expected the life the context ClassLoader, it is a pure nice little leak. Do not use ThreadLocal caches unless really needed.</p></li>\n<li><p>Calling <code>ThreadGroup.destroy()</code> when the ThreadGroup has no threads itself, but it still keeps child ThreadGroups. A bad leak that will prevent the ThreadGroup to remove from its parent, but all the children become un-enumerateable.</p></li>\n<li><p>Using WeakHashMap and the value (in)directly references the key. This is a hard one to find without a heap dump. That applies to all extended <code>Weak/SoftReference</code> that might keep a hard reference back to the guarded object.</p></li>\n<li><p>Using <code>java.net.URL</code> with the HTTP(S) protocol and loading the resource from(!). This one is special, the <code>KeepAliveCache</code> creates a new thread in the system ThreadGroup which leaks the current thread's context classloader. The thread is created upon the first request when no alive thread exists, so either you may get lucky or just leak. <em>The leak is already fixed in Java&nbsp;7 and the code that creates thread properly removes the context classloader.</em> There are few more cases (<del>like ImageFetcher</del>, <em>also fixed</em>) of creating similar threads.</p></li>\n<li><p>Using <code>InflaterInputStream</code> passing <code>new java.util.zip.Inflater()</code> in the constructor (<code>PNGImageDecoder</code> for instance) and not calling <code>end()</code> of the inflater. Well, if you pass in the constructor with just <code>new</code>, no chance... And yes, calling <code>close()</code> on the stream does not close the inflater if it's manually passed as constructor parameter. This is not a true leak since it'd be released by the finalizer... when it deems it necessary. Till that moment it eats native memory so badly it can cause Linux oom_killer to kill the process with impunity. The main issue is that finalization in Java is very unreliable and G1 made it worse till 7.0.2. Moral of the story: release native resources as soon as you can; the finalizer is just too poor.</p></li>\n<li><p>The same case with <code>java.util.zip.Deflater</code>. This one is far worse since Deflater is memory hungry in Java, i.e. always uses 15&nbsp;bits (max) and 8&nbsp;memory levels (9 is max) allocating several hundreds KB of native memory. Fortunately, <code>Deflater</code> is not widely used and to my knowledge JDK contains no misuses. Always call <code>end()</code> if you manually create a <code>Deflater</code> or <code>Inflater</code>. The best part of the last two: <em>you can't find them via normal profiling tools available.</em></p></li>\n</ul>\n\n<p><em>(I can add some more time wasters I have encountered upon request.)</em></p>\n\n<p>Good luck and stay safe; leaks are evil!</p>\n", "title": "Creating a memory leak with Java", "tags": ["java", "memory", "memory-leaks"], "link": "http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java/6540248#6540248", "post_type": "answer", "question_id": 6470651, "answer_id": 6540248}, {"body": "<p><strong>Static field holding object reference [esp final field]</strong></p>\n\n<pre><code>class MemorableClass {\n    static final ArrayList list = new ArrayList(100);\n}\n</code></pre>\n\n<p><strong>Calling <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/String.html#intern%28%29\"><code>String.intern()</code></a> on lengthy String</strong></p>\n\n<pre><code>String str=readString(); // read lengthy string any source db,textbox/jsp etc..\n// This will place the string in memory pool from which you cant remove\nstr.intern();\n</code></pre>\n\n<p><strong>(Unclosed) open streams ( file , network etc... )</strong></p>\n\n<pre><code>try {\n    BufferedReader br = new BufferedReader(new FileReader(inputFile));\n    ...\n    ...\n} catch (Exception e) {\n    e.printStacktrace();\n}\n</code></pre>\n\n<p><strong>Unclosed connections</strong></p>\n\n<pre><code>try {\n    Connection conn = ConnectionFactory.getConnection();\n    ...\n    ...\n} catch (Exception e) {\n    e.printStacktrace();\n}\n</code></pre>\n\n<p><strong>Areas that are unreachable from JVM's garbage collector</strong>, such as memory allocated through native methods</p>\n\n<p>In web applications, some objects are stored in application scope until the application is explicitly stopped or removed.</p>\n\n<pre><code>getServletContext().setAttribute(\"SOME_MAP\", map);\n</code></pre>\n\n<p><strong>Incorrect or inappropriate JVM options</strong>, such as the <code>noclassgc</code> option on IBM JDK that prevents unused class garbage collection </p>\n\n<p>See <a href=\"http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.express.doc/info/exp/ae/tprf_tunejvm.html\">IBM jdk settings</a>.</p>\n", "title": "Creating a memory leak with Java", "tags": ["java", "memory", "memory-leaks"], "link": "http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java/6548647#6548647", "post_type": "answer", "question_id": 6470651, "answer_id": 6548647}, {"body": "<p>Here's a simple/sinister one via <a href=\"http://wiki.eclipse.org/Performance_Bloopers#String.substring.28.29\">http://wiki.eclipse.org/Performance_Bloopers#String.substring.28.29</a>.</p>\n\n<pre><code>public class StringLeaker\n{\n    private final String muchSmallerString;\n\n    public StringLeaker()\n    {\n        // Imagine the whole Declaration of Independence here\n        String veryLongString = \"We hold these truths to be self-evident...\";\n\n        // The substring here maintains a reference to the internal char[]\n        // representation of the original string.\n        this.muchSmallerString = veryLongString.substring(0, 1);\n    }\n}\n</code></pre>\n\n<p>Because the substring refers to the internal representation of the original, much longer string, the original stays in memory. Thus, as long as you have a StringLeaker in play, you have the whole original string in memory, too, even though you might think you're just holding on to a single-character string.</p>\n\n<p>The way to avoid storing an unwanted reference to the original string is to do something like this:</p>\n\n<pre><code>...\nthis.muchSmallerString = new String(veryLongString.substring(0, 1));\n...\n</code></pre>\n\n<p>For added badness, you might also <code>.intern()</code> the substring:</p>\n\n<pre><code>...\nthis.muchSmallerString = veryLongString.substring(0, 1).intern();\n...\n</code></pre>\n\n<p>Doing so will keep both the original long string and the derived substring in memory even after the StringLeaker instance has been discarded.</p>\n", "title": "Creating a memory leak with Java", "tags": ["java", "memory", "memory-leaks"], "link": "http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java/6780439#6780439", "post_type": "answer", "question_id": 6470651, "answer_id": 6780439}, {"body": "<p>Threads are not collected until they terminate. They serve as <a href=\"http://stackoverflow.com/questions/6366211/what-are-the-roots\">roots</a> of garbage collection. They are one of the few objects that won't be reclaimed simply by forgetting about them or clearing references to them.</p>\n\n<p>Consider: the basic pattern to terminate a worker thread is to set some condition variable seen by the thread. The thread can check the variable periodically and use that as a signal to terminate. If the variable is not declared <code>volatile</code>, then the change to the variable might not be seen by the thread, so it won't know to terminate. Or imagine if some threads want to update a shared object, but deadlock while trying to lock on it.</p>\n\n<p>If you only have a handful of threads these bugs will probably be obvious because your program will stop working properly. If you have a thread pool that creates more threads as needed, then the obsolete/stuck threads might not be noticed, and will accumulate indefinitely, causing a memory leak. Threads are likely to use other data in your application, so will also prevent anything they directly reference from ever being collected.</p>\n\n<p>As a toy example:</p>\n\n<pre><code>static void leakMe(final Object object) {\n    new Thread() {\n        public void run() {\n            Object o = object;\n            for (;;) {\n                try {\n                    sleep(Long.MAX_VALUE);\n                } catch (InterruptedException e) {}\n            }\n        }\n    }.start();\n}\n</code></pre>\n\n<p>Call <code>System.gc()</code> all you like, but the object passed to <code>leakMe</code> will never die.</p>\n\n<p>(*edited*)</p>\n", "title": "Creating a memory leak with Java", "tags": ["java", "memory", "memory-leaks"], "link": "http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java/18544736#18544736", "post_type": "answer", "question_id": 6470651, "answer_id": 18544736}, {"body": "<pre><code>int foo = Integer.parseInt(\"1234\");\n</code></pre>\n\n<p>See the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#parseInt-java.lang.String-\">Java Documentation</a> for more information.</p>\n\n<p><em>(If you have it in a <code>StringBuilder</code> (or the ancient <code>StringBuffer</code>), you'll need to do <code>Integer.parseInt(myBuilderOrBuffer.toString());</code> instead).</em></p>\n", "title": "Converting String to Int in Java?", "tags": ["java", "string", "type-conversion"], "link": "http://stackoverflow.com/questions/5585779/converting-string-to-int-in-java/5585800#5585800", "post_type": "answer", "question_id": 5585779, "answer_id": 5585800}, {"body": "<p>For example, here are two ways:</p>\n\n<pre><code>Integer x = Integer.valueOf(str);\n// or\nint y = Integer.parseInt(str);\n</code></pre>\n\n<p>There is a slight difference between these methods: </p>\n\n<ul>\n<li><code>valueOf</code> returns a new or cached instance of <code>java.lang.Integer</code></li>\n<li><code>parseInt</code> returns primitive <code>int</code>. </li>\n</ul>\n\n<p>The same is for all cases: <code>Short.valueOf</code>/<code>parseShort</code>, <code>Long.valueOf</code>/<code>parseLong</code>, etc.</p>\n", "title": "Converting String to Int in Java?", "tags": ["java", "string", "type-conversion"], "link": "http://stackoverflow.com/questions/5585779/converting-string-to-int-in-java/5585876#5585876", "post_type": "answer", "question_id": 5585779, "answer_id": 5585876}, {"body": "<p>We can use the <code>parseInt(String str)</code> method of the <code>Integer</code> wrapper class for converting a String value to an integer value.</p>\n\n<p>For example:</p>\n\n<pre><code>String strValue = \"12345\";\nInteger intValue = Integer.parseInt(strVal);\n</code></pre>\n\n<p>The <code>Integer</code> class also provides the <code>valueOf(String str)</code> method:</p>\n\n<pre><code>String strValue = \"12345\";\nInteger intValue = Integer.valueOf(strValue);\n</code></pre>\n\n<p>We can also use <code>toInt(String strValue)</code> of <a href=\"https://commons.apache.org/proper/commons-lang/javadocs/api-3.4/org/apache/commons/lang3/math/NumberUtils.html\">NumberUtils Utility Class</a> for the conversion:</p>\n\n<pre><code>String strValue = \"12345\";\nInteger intValue = NumberUtils.toInt(strValue);\n</code></pre>\n", "title": "Converting String to Int in Java?", "tags": ["java", "string", "type-conversion"], "link": "http://stackoverflow.com/questions/5585779/converting-string-to-int-in-java/33233407#33233407", "post_type": "answer", "question_id": 5585779, "answer_id": 33233407}, {"body": "<h3><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#decode-java.lang.String-\"><code>Integer.decode</code></a></h3>\n\n<p>You can also use <code>public static Integer decode(String nm) throws NumberFormatException</code>.</p>\n\n<p>It also works for base 8 and 16:</p>\n\n<pre><code>// base 10\nInteger.parseInt(\"12\");     // 12 - int\nInteger.valueOf(\"12\");      // 12 - Integer\nInteger.decode(\"12\");       // 12 - Integer\n// base 8\n// 10 (0,1,...,7,10,11,12)\nInteger.parseInt(\"12\", 8);  // 10 - int\nInteger.valueOf(\"12\", 8);   // 10 - Integer\nInteger.decode(\"012\");      // 10 - Integer\n// base 16\n// 18 (0,1,...,F,10,11,12)\nInteger.parseInt(\"12\",16);  // 18 - int\nInteger.valueOf(\"12\",16);   // 18 - Integer\nInteger.decode(\"#12\");      // 18 - Integer\nInteger.decode(\"0x12\");     // 18 - Integer\nInteger.decode(\"0X12\");     // 18 - Integer\n// base 2\nInteger.parseInt(\"11\",2);   // 3 - int\nInteger.valueOf(\"11\",2);    // 3 - Integer\n</code></pre>\n\n<p>If you want to get <code>int</code> instead of <code>Integer</code> you can use:</p>\n\n<ol>\n<li><p>Unboxing:</p>\n\n<pre><code>int val = Integer.decode(\"12\"); \n</code></pre></li>\n<li><p><code>intValue()</code>:</p>\n\n<pre><code>Integer.decode(\"12\").intValue();\n</code></pre></li>\n</ol>\n", "title": "Converting String to Int in Java?", "tags": ["java", "string", "type-conversion"], "link": "http://stackoverflow.com/questions/5585779/converting-string-to-int-in-java/35834484#35834484", "post_type": "answer", "question_id": 5585779, "answer_id": 35834484}, {"body": "<p>Whenever there is the slightest possibility that the given String does not contain an Integer, you have to handle this special case. Sadly, the standard Java methods <code>Integer::parseInt</code> and <code>Integer::valueOf</code> throw a <code>NumberFormatException</code> to signal this special case. Thus, you have to use exceptions for flow control, which is generally considered bad coding style.</p>\n\n<p>In my opinion, this special case should be handled by returning an <code>Optional&lt;Integer&gt;</code>. Since Java does not offer such a method, I use the following wrapper:</p>\n\n<pre><code>private Optional&lt;Integer&gt; tryParseInteger(String string) {\n    try {\n        return Optional.of(Integer.valueOf(string));\n    } catch (NumberFormatException e) {\n        return Optional.empty();\n    }\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>// prints 1234\nSystem.out.println(tryParseInteger(\"1234\").orElse(-1));\n// prints -1\nSystem.out.println(tryParseInteger(\"foobar\").orElse(-1));\n</code></pre>\n\n<p>While this is still using exceptions for flow control internally, the usage code becomes very clean.</p>\n", "title": "Converting String to Int in Java?", "tags": ["java", "string", "type-conversion"], "link": "http://stackoverflow.com/questions/5585779/converting-string-to-int-in-java/36394016#36394016", "post_type": "answer", "question_id": 5585779, "answer_id": 36394016}, {"body": "<p>What is happening is that <code>stock_list.toArray()</code> is creating an <code>Object[]</code> rather than a <code>String[]</code> and hence the typecast is failing.</p>\n\n<p>The correct code would be:</p>\n\n<pre><code>  String [] stockArr = stockList.toArray(new String[stockList.size()]);\n</code></pre>\n\n<p>or even</p>\n\n<pre><code>  String [] stockArr = stockList.toArray(new String[0]);\n</code></pre>\n\n<p>For more details, refer to the javadocs for the two overloads of <code>List.toArray</code>.</p>\n\n<p>(From a technical perspective, the reason for this API behaviour / design is that an implementation of the <code>List&lt;T&gt;.toArray()</code> method has no information of what the <code>&lt;T&gt;</code> is at runtime.  All it knows is that the raw element type is <code>Object</code>.  By contrast, in the other case, the array parameter gives the base type of the array.  (If the supplied array is big enough, it is used.  Otherwise a new array of the same type and a larger size will be allocated and returned as the result.)</p>\n", "title": "Convert ArrayList&lt;String&gt; to String[] array", "tags": ["java", "arraylist"], "link": "http://stackoverflow.com/questions/5374311/convert-arrayliststring-to-string-array/5374346#5374346", "post_type": "answer", "question_id": 5374311, "answer_id": 5374346}, {"body": "<p><sub>I can see many answers showing how to solve problem, but only <a href=\"http://stackoverflow.com/a/5374346/1393766\">Stephen's answer</a> is trying to explain why problem occurs so I will try to add something more on this subject. It is a story about possible reasons why <code>Object[] toArray</code> wasn't changed to <code>T[] toArray</code> where generics ware introduced to Java.</sub></p>\n\n<hr>\n\n<h3>Why <code>String[] stockArr = (String[]) stock_list.toArray();</code> wont work?</h3>\n\n<p>In Java, <strong><em>generic type exists at compile-time only</em></strong>. At runtime information about generic type (like in your case <code>&lt;String&gt;</code>) is removed and replaced with <code>Object</code> type (take a look at <a href=\"http://docs.oracle.com/javase/tutorial/java/generics/erasure.html\" rel=\"nofollow\">type erasure</a>). That is why at runtime <code>toArray()</code> have no idea about what precise type to use to create new array, so it uses <code>Object</code> as safest type, because each class extends Object so it can safely store instance of any class. </p>\n\n<h3>Now the problem is that you can't cast instance of <code>Object[]</code> to <code>String[]</code>.</h3>\n\n<p>Why? Take a look at this example (lets assume that <code>class B extends A</code>): </p>\n\n<pre><code>//B extends A\nA a = new A();\nB b = (B)a;\n</code></pre>\n\n<p>Although such code will compile, at runtime we will see thrown <code>ClassCastException</code> because instance held by reference <code>a</code> is not actually of type <code>B</code> (or its subtypes). Why is this problem (why this exception needs to be cast)? One of the reasons is that <code>B</code> could have new methods/fields which <code>A</code> doesn't, so it is possible that someone will try to use these new members via <code>b</code> reference even if held instance doesn't have (doesn't support) them. In other words we could end up trying to use data which doesn't exist, which could lead to many problems. So to prevent such situation JVM throws exception, and stop further potentially dangerous code.</p>\n\n<p>You could ask now \"So why aren't we stopped even earlier? Why code involving such casting is even compilable? Shouldn't compiler stop it?\". Answer is: no because compiler can't know for sure what is the actual type of instance held by <code>a</code> reference, and there is a chance that it will hold instance of class <code>B</code> which will support interface of <code>b</code> reference. Take a look at this example:</p>\n\n<pre><code>A a = new B(); \n      //  ^------ Here reference \"a\" holds instance of type B\nB b = (B)a;    // so now casting is safe, now JVM is sure that `b` reference can \n               // safely access all members of B class\n</code></pre>\n\n<hr>\n\n<p>Now lets go back to your arrays. As you see in question, we can't cast instance of <code>Object[]</code> array to more precise type <code>String[]</code> like</p>\n\n<pre><code>Object[] arr = new Object[] { \"ab\", \"cd\" };\nString[] arr2 = (String[]) arr;//ClassCastException will be thrown\n</code></pre>\n\n<p>Here problem is a little different. Now we are sure that <code>String[]</code> array will not have additional fields or methods because every array support only:</p>\n\n<ul>\n<li><code>[]</code> operator, </li>\n<li><code>length</code> filed, </li>\n<li>methods inherited from Object supertype, </li>\n</ul>\n\n<p>So it is <em>not</em> arrays interface which is making it impossible. Problem is that <strong><em><code>Object[]</code> array beside <code>Strings</code> can store any objects</em></strong> (for instance <code>Integers</code>) so it is possible that one beautiful day we will end up with trying to invoke method like <code>strArray[i].substring(1,3)</code> on instance of <code>Integer</code> which doesn't have such method. </p>\n\n<p>So to make <em>sure</em> that this situation will <em>never</em> happen, in Java array references can hold only</p>\n\n<ul>\n<li>instances of array of same type as reference (reference <code>String[] strArr</code> can hold <code>String[]</code>)</li>\n<li>instances of array of subtype (<code>Object[]</code> can hold <code>String[]</code> because <code>String</code> is subtype of <code>Object</code>), </li>\n</ul>\n\n<p>but can't hold </p>\n\n<ul>\n<li>array of supertype of type of array from reference (<code>String[]</code> can't hold <code>Object[]</code>)</li>\n<li>array of type which is not related to type from reference (<code>Integer[]</code> can't hold <code>String[]</code>)</li>\n</ul>\n\n<p>In other words something like this is OK</p>\n\n<pre><code>Object[] arr = new String[] { \"ab\", \"cd\" }; //OK - because\n               //  ^^^^^^^^                  `arr` holds array of subtype of Object (String)\nString[] arr2 = (String[]) arr; //OK - `arr2` reference will hold same array of same type as \n                                //     reference\n</code></pre>\n\n<hr>\n\n<p>You could say that one way to resolve this problem is to find at runtime most common type between all list elements and create array of that type, but this wont work in situations where all elements of list will be of one type derived from generic one. Take a look</p>\n\n<pre><code>//B extends A\nList&lt;A&gt; elements = new ArrayList&lt;A&gt;();\nelements.add(new B());\nelements.add(new B());\n</code></pre>\n\n<p>now most common type is <code>B</code>, not <code>A</code> so <code>toArray()</code> </p>\n\n<pre><code>A[] arr = elements.toArray();\n</code></pre>\n\n<p>would return array of <code>B</code> class <code>new B[]</code>. Problem with this array is that while compiler would allow you to edit its content by adding <code>new A()</code> element to it, you would get <code>ArrayStoreException</code> because <code>B[]</code> array can hold only elements of class <code>B</code> or its subclass, to make sure that all elements will support interface of <code>B</code>, but instance of <code>A</code> may not have all methods/fields of <code>B</code>. So this solution is not perfect.</p>\n\n<hr>\n\n<p>Best solution to this problem is explicitly tell what type of array <code>toArray()</code> should be returned by passing this type as method argument like </p>\n\n<pre><code>String[] arr = list.toArray(new String[list.size()]);\n</code></pre>\n\n<p>or </p>\n\n<pre><code>String[] arr = list.toArray(new String[0]); //if size of array is smaller then list it will be automatically adjusted.\n</code></pre>\n", "title": "Convert ArrayList&lt;String&gt; to String[] array", "tags": ["java", "arraylist"], "link": "http://stackoverflow.com/questions/5374311/convert-arrayliststring-to-string-array/17909134#17909134", "post_type": "answer", "question_id": 5374311, "answer_id": 17909134}, {"body": "<p>The correct way to do this is:  </p>\n\n<pre><code>String[] stockArr = stock_list.toArray(new String[stock_list.size()]);\n</code></pre>\n\n<p>I'd like to add to the other great answers here and explain how you could have used the Javadocs to answer your question.</p>\n\n<p>The Javadoc for <code>toArray()</code> (no arguments) is <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/util/AbstractCollection.html#toArray%28%29\">here</a>. As you can see, this method returns an <code>Object[]</code> and <em>not</em> <code>String[]</code> which is an array of the runtime type of your list:</p>\n\n<blockquote>\n  <p><code>public Object[] toArray()</code>   </p>\n  \n  <p>Returns an array containing all of the\n  elements in this collection. If the collection makes any guarantees as\n  to what order its elements are returned by its iterator, this method\n  must return the elements in the same order. The returned array will be\n  \"safe\" in that no references to it are maintained by the collection.\n  (In other words, this method must allocate a new array even if the\n  collection is backed by an Array). The caller is thus free to modify\n  the returned array.</p>\n</blockquote>\n\n<p>Right below that method, though, is <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/util/AbstractCollection.html#toArray%28T%5b%5d%29\">the Javadoc</a> for <code>toArray(T[] a)</code>. As you can see, this method returns a <code>T[]</code> where <code>T</code> is the type of the array you pass in. At first this seems like what you're looking for, but it's unclear exactly why you're passing in an array (are you adding to it, using it for just the type, etc). The documentation makes it clear that the purpose of the passed array is essentially to define the type of array to return (which is exactly your use case):  </p>\n\n<blockquote>\n  <p><code>public &lt;T&gt; T[] toArray(T[] a)</code></p>\n  \n  <p>Returns an array containing all of the\n  elements in this collection; <strong>the runtime type of the returned array is\n  that of the specified array.</strong> If the collection fits in the specified\n  array, it is returned therein. Otherwise, a new array is allocated\n  with the runtime type of the specified array and the size of this\n  collection. If the collection fits in the specified array with room to\n  spare (i.e., the array has more elements than the collection), the\n  element in the array immediately following the end of the collection\n  is set to null. This is useful in determining the length of the\n  collection only if the caller knows that the collection does not\n  contain any null elements.)</p>\n  \n  <p>If this collection makes any guarantees as to what order its elements\n  are returned by its iterator, this method must return the elements in\n  the same order.</p>\n  \n  <p>This implementation checks if the array is large enough to contain the\n  collection; if not, it allocates a new array of the correct size and\n  type (using reflection). Then, it iterates over the collection,\n  storing each object reference in the next consecutive element of the\n  array, starting with element 0. If the array is larger than the\n  collection, a null is stored in the first location after the end of\n  the collection.</p>\n</blockquote>\n\n<p>Of course, an understanding of generics (as described in the other answers) is required to really understand the difference between these two methods. Nevertheless, if you first go to the Javadocs, you will usually find your answer and then see for yourself what else you need to learn (if you really do).  </p>\n\n<p>Also note that reading the Javadocs here helps you to understand what the structure of the array you pass in should be. Though it may not really practically matter, you should not pass in an empty array like this:  </p>\n\n<pre><code>String [] stockArr = stockList.toArray(new String[0]);  \n</code></pre>\n\n<p>Because, from the doc, this implementation checks if the array is large enough to contain the collection; <em>if not, it allocates a new array of the correct size and type (using reflection).</em> There's no need for the extra overhead in creating a new array when you could easily pass in the size.  </p>\n\n<p>As is usually the case, the Javadocs provide you with a wealth of information and direction.  </p>\n\n<p>Hey wait a minute, what's reflection?</p>\n", "title": "Convert ArrayList&lt;String&gt; to String[] array", "tags": ["java", "arraylist"], "link": "http://stackoverflow.com/questions/5374311/convert-arrayliststring-to-string-array/17909839#17909839", "post_type": "answer", "question_id": 5374311, "answer_id": 17909839}, {"body": "<p>An <code>OutputStream</code> is one where you write data to. If some module exposes an <code>OutputStream</code>, the expectation is that there is something at the other end that is reading.</p>\n\n<p>Something that exposes an <code>InputStream</code> on the other hand is indicating that you will need to listen to this stream, and there will be data that you can read. </p>\n\n<p>So it is possible to connect an <code>InputStream</code> to an <code>OutputStream</code></p>\n\n<p><code>InputStream----read---&gt; intermediateBytes[n] ----write----&gt; OutputStream</code></p>\n\n<p>As someone metioned, this is what the <code>copy()</code> method from <a href=\"http://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/IOUtils.html\" rel=\"nofollow\">IOUtils</a> lets you do. It does not make sense to go the other way... hopefully this makes some sense</p>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>Of course the more I think of this, the more I can see how this actually would be a requirement. I know some of the comments mentioned <code>Piped</code> input/ouput streams, but there is another possibility.</p>\n\n<p>If the output stream that is exposed is a <code>ByteArrayOutputStream</code>, then you can always get the full contents by calling the <code>toByteArray()</code> method. Then you can create an input stream wrapper by using the <code>ByteArrayInputStream</code> sub-class. These two are pseudo-streams, they both basically just wrap an array of bytes. Using the streams this way, therefore, is technically possible, but to me it is still very strange...</p>\n", "title": "How to convert OutputStream to InputStream?", "tags": ["java", "inputstream", "outputstream"], "link": "http://stackoverflow.com/questions/5778658/how-to-convert-outputstream-to-inputstream/5778863#5778863", "post_type": "answer", "question_id": 5778658, "answer_id": 5778863}, {"body": "<p>You will need an intermediate class which will buffer between. Each time <code>InputStream.read(byte[]...)</code> is called, the buffering class will fill the passed in byte array with the next chunk passed in from <code>OutputStream.write(byte[]...)</code>. Since the sizes of the chunks may not be the same, the adapter class will need to store a certain amount until it has enough to fill the read buffer and/or be able to store up any buffer overflow.</p>\n\n<p>This article has a nice breakdown of a few different approaches to this problem:</p>\n\n<p><a href=\"http://blog.ostermiller.org/convert-java-outputstream-inputstream\" rel=\"nofollow\">http://blog.ostermiller.org/convert-java-outputstream-inputstream</a></p>\n", "title": "How to convert OutputStream to InputStream?", "tags": ["java", "inputstream", "outputstream"], "link": "http://stackoverflow.com/questions/5778658/how-to-convert-outputstream-to-inputstream/10768914#10768914", "post_type": "answer", "question_id": 5778658, "answer_id": 10768914}, {"body": "<ul>\n<li><p><code>getParameter()</code> returns http request parameters. Those passed from the client to the server. For example <code>http://example.com/servlet?parameter=1</code>. Can only return <code>String</code></p></li>\n<li><p><code>getAttribute()</code> is for server-side usage only - you fill the request with attributes that you can use within the same request. For example - you set an attribute in a servlet, and read it from a JSP. Can be used for any object, not just string.</p></li>\n</ul>\n", "title": "Difference between getAttribute() and getParameter()", "tags": ["java", "jsp", "servlets"], "link": "http://stackoverflow.com/questions/5243754/difference-between-getattribute-and-getparameter/5243798#5243798", "post_type": "answer", "question_id": 5243754, "answer_id": 5243798}, {"body": "<p>It is crucial to know that <strong>attributes</strong> are not <strong>parameters</strong>.</p>\n\n<p>The return type for attributes is an <strong>Object</strong>, whereas the return type for a parameter is a <strong>String</strong>. When calling the <code>getAttribute(String name)</code> method, bear in mind that the attributes must be cast. </p>\n\n<p>Additionally, there is <strong>no servlet specific attributes</strong>, and there are no <strong>session parameters</strong>. </p>\n\n<p>This post is written with the purpose to connect on @Bozho's response, as additional information that can be useful for other people. </p>\n", "title": "Difference between getAttribute() and getParameter()", "tags": ["java", "jsp", "servlets"], "link": "http://stackoverflow.com/questions/5243754/difference-between-getattribute-and-getparameter/13612866#13612866", "post_type": "answer", "question_id": 5243754, "answer_id": 13612866}, {"body": "<p>-<strong>getParameter()</strong> :</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;form name=\"testForm\" method=\"post\" action=\"testJSP.jsp\"&gt;\n&lt;input type=\"text\" name=\"testParam\" value=\"ClientParam\"&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n    &lt;html&gt;\n    &lt;body&gt;\n    &lt;%\n    String sValue = request.getParameter(\"testParam\");\n    %&gt;\n    &lt;%= sValue %&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n\n<p><code>request.getParameter(\"testParam\")</code> will get the value from the posted form of the input box named \"testParam\" which is \"Client param\". It will then print it out, so you should see \"Client Param\" on the screen. So request.getParameter() will retrieve a value that the client has submitted. You will get the value on the server side.</p>\n\n<p>-<strong>getAttribute() :</strong>\n <code>request.getAttribute()</code>, this is all done server side. YOU add the attribute to the request and YOU submit the request to another resource, the client does not know about this. So all the code handling this would typically be in servlets.getAttribute always return object.</p>\n", "title": "Difference between getAttribute() and getParameter()", "tags": ["java", "jsp", "servlets"], "link": "http://stackoverflow.com/questions/5243754/difference-between-getattribute-and-getparameter/25074487#25074487", "post_type": "answer", "question_id": 5243754, "answer_id": 25074487}, {"body": "<p><strong>request.getParameter()</strong></p>\n\n<p>We use <code>request.getParameter()</code> to extract request parameters (i.e. data sent by posting a html form ). The <code>request.getParameter()</code> always returns <code>String</code> value and the data come from client.</p>\n\n<p><strong>request.getAttribute()</strong></p>\n\n<p>We use <code>request.getAttribute()</code> to get an object added to the request scope on the server side i.e. using <code>request.setAttribute()</code>. You can add any type of object you like here, <code>Strings</code>, Custom objects, in fact any object. You add the attribute to the request and forward the request to another resource, the client does not know about this. So all the code handling this would typically be in JSP/servlets. You can use <code>request.setAttribute()</code> to add extra-information and forward/redirect the current request to another resource.</p>\n\n<p>For example,consider about first.jsp, </p>\n\n<pre><code>//First Page : first.jsp\n&lt;%@ page import=\"java.util.*\" import=\"java.io.*\"%&gt;\n&lt;% request.setAttribute(\"PAGE\", \"first.jsp\");%&gt;\n&lt;jsp:forward page=\"/second.jsp\"/&gt;\n</code></pre>\n\n<p>and second.jsp:</p>\n\n<pre><code>&lt;%@ page import=\"java.util.*\" import=\"java.io.*\"%&gt;\nFrom Which Page : &lt;%=request.getAttribute(\"PAGE\")%&gt;&lt;br&gt;\nData From Client : &lt;%=request.getParameter(\"CLIENT\")%&gt;\n</code></pre>\n\n<p>From your browser, run <em>first.jsp?CLIENT=you</em> and the output on your browser is</p>\n\n<pre><code>From Which Page : *first.jsp*\nData From Client : you\n</code></pre>\n\n<p>The basic difference between <code>getAttribute()</code> and <code>getParameter()</code> is that the first method extracts a (serialized) Java object and the other provides a String value. For both cases a name is given so that its value (be it string or a java bean) can be looked up and extracted.</p>\n", "title": "Difference between getAttribute() and getParameter()", "tags": ["java", "jsp", "servlets"], "link": "http://stackoverflow.com/questions/5243754/difference-between-getattribute-and-getparameter/34295445#34295445", "post_type": "answer", "question_id": 5243754, "answer_id": 34295445}, {"body": "<p>Current working directory is defined differently in different Java implementations For certain prior to Java 7 there was no consistent way to get the working directory. You could work around this by launching Java with <code>-D</code> and defining a variable to hold the info</p>\n\n<p>Something like</p>\n\n<pre><code>java -Dcom.mycompany.workingDir=\"%0\"\n</code></pre>\n\n<p>That's not quite right, but you get the idea. Then <code>System.getProperty(\"com.mycompany.workingDir\")</code>...</p>\n", "title": "Getting the Current Working Directory in Java", "tags": ["java", "working-directory"], "link": "http://stackoverflow.com/questions/4871051/getting-the-current-working-directory-in-java/4871135#4871135", "post_type": "answer", "question_id": 4871051, "answer_id": 4871135}, {"body": "<p>I'm on Linux and get same result for both of these approaches:</p>\n\n<pre><code>@Test\npublic void aaa()\n{\n    System.err.println(Paths.get(\"\").toAbsolutePath().toString());\n\n    System.err.println(System.getProperty(\"user.dir\"));\n}\n</code></pre>\n\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/file/Paths.html#get%28java.lang.String,%20java.lang.String...%29\"><code>Paths.get(\"\")</code> docs</a></p>\n\n<p><a href=\"http://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html\"><code>System.getProperty(\"user.dir\")</code> docs</a></p>\n", "title": "Getting the Current Working Directory in Java", "tags": ["java", "working-directory"], "link": "http://stackoverflow.com/questions/4871051/getting-the-current-working-directory-in-java/20810612#20810612", "post_type": "answer", "question_id": 4871051, "answer_id": 20810612}, {"body": "<p>Use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/security/CodeSource.html#getLocation--\"><code>CodeSource#getLocation()</code></a>. </p>\n\n<p>This works fine in JAR files as well. You can obtain <code>CodeSource</code> by <a href=\"http://docs.oracle.com/javase/8/docs/api/java/security/ProtectionDomain.html#getCodeSource--\"><code>ProtectionDomain#getCodeSource()</code></a> and the <code>ProtectionDomain</code> in turn can be obtained by <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getProtectionDomain--\"><code>Class#getProtectionDomain()</code></a>.</p>\n\n<pre><code>public class Test {\n    public static void main(String... args) throws Exception {\n        URL location = Test.class.getProtectionDomain().getCodeSource().getLocation();\n        System.out.println(location.getFile());\n    }\n}\n</code></pre>\n", "title": "Getting the Current Working Directory in Java", "tags": ["java", "working-directory"], "link": "http://stackoverflow.com/questions/4871051/getting-the-current-working-directory-in-java/21274808#21274808", "post_type": "answer", "question_id": 4871051, "answer_id": 21274808}, {"body": "<p><code>System.getProperty(\"java.class.path\")</code></p>\n", "title": "Getting the Current Working Directory in Java", "tags": ["java", "working-directory"], "link": "http://stackoverflow.com/questions/4871051/getting-the-current-working-directory-in-java/27760556#27760556", "post_type": "answer", "question_id": 4871051, "answer_id": 27760556}, {"body": "<p>You need to use the <code>readLine()</code> method in <code>class BufferedReader</code>.\nCreate a new object from that class and operate this method on him and save it to a string.</p>\n\n<p><a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/io/BufferedReader.html\" rel=\"nofollow\">BufferReader API</a></p>\n", "title": "How to read a large text file line by line using Java?", "tags": ["java", "performance", "file-io", "io"], "link": "http://stackoverflow.com/questions/5868369/how-to-read-a-large-text-file-line-by-line-using-java/5868454#5868454", "post_type": "answer", "question_id": 5868369, "answer_id": 5868454}, {"body": "<p>In Java 8, you could do:</p>\n\n<pre><code>try (Stream&lt;String&gt; lines = Files.lines (file, StandardCharsets.UTF_8))\n{\n    for (String line : (Iterable&lt;String&gt;) lines::iterator)\n    {\n        ;\n    }\n}\n</code></pre>\n\n<p>Some notes: The stream returned by <code>Files.lines</code> (unlike most streams) needs to be closed. For the reasons <a href=\"http://stackoverflow.com/a/20177092/1151521\">mentioned here</a> I avoid using <code>forEach()</code>. The strange code <code>(Iterable&lt;String&gt;) lines::iterator</code> casts a Stream to an Iterable.</p>\n", "title": "How to read a large text file line by line using Java?", "tags": ["java", "performance", "file-io", "io"], "link": "http://stackoverflow.com/questions/5868369/how-to-read-a-large-text-file-line-by-line-using-java/20593147#20593147", "post_type": "answer", "question_id": 5868369, "answer_id": 20593147}, {"body": "<p>In Java 8, there is also an alternative to using <a href=\"http://stackoverflow.com/a/17866514/2986905\"><code>Files.lines()</code></a>. If your input source isn't a file but something more abstract like a <code>Reader</code> or an <code>InputStream</code>, you can <em>stream</em> the lines via the <code>BufferedReader</code>s <code>lines()</code> method.</p>\n\n<p>For example:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>try( BufferedReader reader = new BufferedReader( ... ) ) {\n  reader.lines().foreach( line -&gt; processLine( line ) );\n}\n</code></pre>\n\n<p>will call <code>processLine()</code> for each input line read by the <code>BufferedReader</code>.</p>\n", "title": "How to read a large text file line by line using Java?", "tags": ["java", "performance", "file-io", "io"], "link": "http://stackoverflow.com/questions/5868369/how-to-read-a-large-text-file-line-by-line-using-java/31265714#31265714", "post_type": "answer", "question_id": 5868369, "answer_id": 31265714}, {"body": "<p>What you can do is scan the entire text using Scanner and go through the text line by line.\nOf course you should import the following:</p>\n\n<pre><code>import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\npublic static void readText throws FileNotFoundException {\n    Scanner scan = new Scanner(new File(\"samplefilename.txt\"));\n    while(scan.hasNextLine()){\n        String line = scan.nextLine();\n        //Here you can manipulate the string the way you want\n    }\n}\n</code></pre>\n\n<p>Scanner basically scans all the text. The while loop is used to traverse through the entire text.</p>\n\n<p>The <code>.hasNextLine()</code> function is a boolean that returns true if there are still more lines in the text. The <code>.nextLine()</code> function gives you an entire line as a String which you can then use the way you want. Try <code>System.out.println(line)</code> to print the text.</p>\n\n<p>Side Note: .txt is the file type text.</p>\n", "title": "How to read a large text file line by line using Java?", "tags": ["java", "performance", "file-io", "io"], "link": "http://stackoverflow.com/questions/5868369/how-to-read-a-large-text-file-line-by-line-using-java/32542424#32542424", "post_type": "answer", "question_id": 5868369, "answer_id": 32542424}, {"body": "<p>Use the <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/AbstractCollection.html#toArray(T[])\"><code>Set#toArray(T[])</code></a> method taking a typed array argument of the same size.</p>\n\n<pre><code>String[] GPXFILES1 = myset.toArray(new String[myset.size()]);\n</code></pre>\n\n<p>A different size can also, but that would force the <code>toArray()</code> method to create a new array to return instead of reusing the provided argument, which may end up to be less efficient. See also <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/util/AbstractCollection.java#AbstractCollection.toArray%28java.lang.Object%5B%5D%29\">the source code of <code>AbstractCollection#toArray()</code></a>.</p>\n", "title": "How to convert Set&lt;String&gt; to String[]?", "tags": ["java"], "link": "http://stackoverflow.com/questions/5982447/how-to-convert-setstring-to-string/5982478#5982478", "post_type": "answer", "question_id": 5982447, "answer_id": 5982478}, {"body": "<p><code>st.replaceAll(\"\\\\s+\",\"\")</code> removes all whitespaces and non-visible characters (e.g., tab, <code>\\n</code>).</p>\n\n<hr>\n\n<p><code>st.replaceAll(\"\\\\s+\",\"\")</code> and <code>st.replaceAll(\"\\\\s\",\"\")</code> produce the same result.</p>\n\n<p>The second regex is 20% faster than the first one, but as the number consecutive spaces increases, the first one performs better than the second one.</p>\n\n<hr>\n\n<p>Assign the value to a variable, if not used directly:</p>\n\n<pre><code>st = st.replaceAll(\"\\\\s+\",\"\")\n</code></pre>\n", "title": "Removing whitespace from strings in Java", "tags": ["java", "whitespace"], "link": "http://stackoverflow.com/questions/5455794/removing-whitespace-from-strings-in-java/5455809#5455809", "post_type": "answer", "question_id": 5455794, "answer_id": 5455809}, {"body": "<p>How about <code>replaceAll(\"\\\\s\", \"\")</code>. Refer <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html\">here</a>.</p>\n", "title": "Removing whitespace from strings in Java", "tags": ["java", "whitespace"], "link": "http://stackoverflow.com/questions/5455794/removing-whitespace-from-strings-in-java/5455820#5455820", "post_type": "answer", "question_id": 5455794, "answer_id": 5455820}, {"body": "<p>You can use <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Double.html#parseDouble%28java.lang.String%29\"><code>Double.parseDouble()</code></a> to convert a <code>String</code> to a <code>double</code>:</p>\n\n<pre><code>String text = \"12.34\"; // example String\ndouble value = Double.parseDouble(text);\n</code></pre>\n\n<p>For your case it looks like you want:</p>\n\n<pre><code>double total = Double.parseDouble(jlbTotal.getText());\ndouble price = Double.parseDouble(jlbPrice.getText());\n</code></pre>\n", "title": "Convert String to double in Java", "tags": ["java", "string", "casting", "double", "type-conversion"], "link": "http://stackoverflow.com/questions/5769669/convert-string-to-double-in-java/5769679#5769679", "post_type": "answer", "question_id": 5769669, "answer_id": 5769679}, {"body": "<p><em>Edit</em> Updated to bring in feedback.</p>\n\n<p>So two ways that work:</p>\n\n<ol>\n<li>Use <code>StringBulderObj.setLength(0)</code>.</li>\n<li>Allocate a new one instead of clearing the buffer</li>\n</ol>\n", "title": "How can I clear or empty a StringBuilder?", "tags": ["java", "stringbuilder"], "link": "http://stackoverflow.com/questions/5192512/how-can-i-clear-or-empty-a-stringbuilder/5192545#5192545", "post_type": "answer", "question_id": 5192512, "answer_id": 5192545}, {"body": "<p>There are basically two alternatives, using <code>setLength(0)</code> to reset the StringBuilder or creating a new one in each iteration. Both can have pros and cons depending on the usage.</p>\n\n<p>If you know the expected capacity of the StringBuilder beforehand, creating a new one each time should be just as fast as setting a new length. It will also help the garbage collector, since each StringBuilder will be relatively short-lived and the gc is optimized for that.</p>\n\n<p>When you don't know the capacity, reusing the same StringBuilder might be faster. Each time you exceed the capacity when appending, a new backing array has to be allocated and the previous content has to be copied. By reusing the same StringBuilder, it will reach the needed capacity after some iterations and there won't be any copying thereafter.</p>\n", "title": "How can I clear or empty a StringBuilder?", "tags": ["java", "stringbuilder"], "link": "http://stackoverflow.com/questions/5192512/how-can-i-clear-or-empty-a-stringbuilder/5193094#5193094", "post_type": "answer", "question_id": 5192512, "answer_id": 5193094}, {"body": "<p>I think many of the answers here may be missing a quality method included in <code>StringBuilder</code>: <code>.delete(int start, [int] end)</code>. I know this is a late reply; however, this should be made known (and explained a bit more thoroughly).</p>\n\n<p>Let's say you have a StringBuilder table - which you wish to modify, dynamically, throughout your program (one I am working on right now does this), e.g. </p>\n\n<pre><code>StringBuilder table = new StringBuilder();\n</code></pre>\n\n<p>If you are looping through the method and alter the content, use the content, then wish to discard the content to \"clean up\" the <code>StringBuilder</code> for the next iteration, you can delete it's contents, e.g. </p>\n\n<pre><code>table.delete(int start, int end). \n</code></pre>\n\n<p>start and end being the indices of the chars you wish to remove. Don't know the length in chars and want to delete the whole thing?</p>\n\n<pre><code>table.delete(0, table.length());\n</code></pre>\n\n<p>NOW, for the kicker. <code>StringBuilders</code>, as mentioned previously, take a lot of overhead when altered  frequently (and can cause safety issues with regard to threading); therefore, use <code>StringBuffer</code> - same as <code>StringBuilder</code> (with a few exceptions) - if your <code>StringBuilder</code> is used for the purpose of interfacing with the user. </p>\n", "title": "How can I clear or empty a StringBuilder?", "tags": ["java", "stringbuilder"], "link": "http://stackoverflow.com/questions/5192512/how-can-i-clear-or-empty-a-stringbuilder/22694891#22694891", "post_type": "answer", "question_id": 5192512, "answer_id": 22694891}, {"body": "<p>I'll vote for <code>sb.setLength(0);</code> not only because it's one function call but <strong>because it don't actually copy the array into another array</strong> like <code>sb.delete(0, builder.length());</code>, It just fill the remaining characters to be 0 and set the length variable to the new length.</p>\n\n<p>You can take a look into their implementation to validate my point from <a href=\"https://android.googlesource.com/platform/libcore/+/android-5.1.1_r2/luni/src/main/java/java/lang/AbstractStringBuilder.java\" rel=\"nofollow\">here</a> at <code>setLength</code> function and <code>delete0</code> function.</p>\n", "title": "How can I clear or empty a StringBuilder?", "tags": ["java", "stringbuilder"], "link": "http://stackoverflow.com/questions/5192512/how-can-i-clear-or-empty-a-stringbuilder/30190425#30190425", "post_type": "answer", "question_id": 5192512, "answer_id": 30190425}, {"body": "<p>You can use <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Class.html#forName%28java.lang.String%29\"><code>Class.forName()</code></a> to get a <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Class.html\"><code>Class</code></a> object of the desired class.</p>\n\n<p>Then use <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/Class.html#getConstructor%28java.lang.Class...%29\"><code>getConstructor()</code></a> to find the desired <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/reflect/Constructor.html\"><code>Constructor</code></a> object.</p>\n\n<p>Finally, call <a href=\"http://download.oracle.com/javase/6/docs/api/java/lang/reflect/Constructor.html#newInstance%28java.lang.Object...%29\"><code>newInstance()</code></a> on that object to get your new instance.</p>\n\n<pre><code>Class&lt;?&gt; c = Class.forName(\"mypackage.MyClass\");\nConstructor&lt;?&gt; cons = c.getConstructor(String.class);\nObject object = cons.newInstance(\"MyAttributeValue\");\n</code></pre>\n", "title": "Creating an instance using the class name and calling constructor", "tags": ["java", "reflection", "instantiation"], "link": "http://stackoverflow.com/questions/6094575/creating-an-instance-using-the-class-name-and-calling-constructor/6094600#6094600", "post_type": "answer", "question_id": 6094575, "answer_id": 6094600}, {"body": "<p>Yes, something like:</p>\n\n<pre><code>Class&lt;?&gt; clazz = Class.forName(className);\nConstructor&lt;?&gt; ctor = clazz.getConstructor(String.class);\nObject object = ctor.newInstance(new Object[] { ctorArgument });\n</code></pre>\n\n<p>That will only work for a single string parameter of course, but you can modify it pretty easily.</p>\n\n<p>Note that the class name has to be a fully-qualified one, i.e. including the namespace. For nested classes, you need to use a dollar (as that's what the compiler uses). For example:</p>\n\n<pre><code>package foo;\n\npublic class Outer\n{\n    public static class Nested {}\n}\n</code></pre>\n\n<p>To obtain the <code>Class</code> object for that, you'd need <code>Class.forName(\"foo.Outer$Nested\")</code>.</p>\n", "title": "Creating an instance using the class name and calling constructor", "tags": ["java", "reflection", "instantiation"], "link": "http://stackoverflow.com/questions/6094575/creating-an-instance-using-the-class-name-and-calling-constructor/6094602#6094602", "post_type": "answer", "question_id": 6094575, "answer_id": 6094602}, {"body": "<p>when using (i.e.) <code>getConstructor(String.lang)</code> the constructor has to be declared public.\nOtherwise a <code>NoSuchMethodException</code> is thrown.</p>\n\n<p>if you want to access a <strong>non-public constructor</strong> you have to use instead (i.e.) <code>getDeclaredConstructor(String.lang)</code>.</p>\n", "title": "Creating an instance using the class name and calling constructor", "tags": ["java", "reflection", "instantiation"], "link": "http://stackoverflow.com/questions/6094575/creating-an-instance-using-the-class-name-and-calling-constructor/26159586#26159586", "post_type": "answer", "question_id": 6094575, "answer_id": 26159586}, {"body": "<p>Have a look at the <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/util/Date.html\" rel=\"nofollow\">Date</a> class. There's also the newer <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/util/Calendar.html\" rel=\"nofollow\">Calendar</a> class which is the preferred method of doing many date / time operations (a lot of the methods on Date have been deprecated.)</p>\n\n<p>If you just want the current date, then either create a new Date object or call <code>Calendar.getInstance();</code>.</p>\n", "title": "How to get the current date/time in java", "tags": ["java", "datetime"], "link": "http://stackoverflow.com/questions/5175728/how-to-get-the-current-date-time-in-java/5175771#5175771", "post_type": "answer", "question_id": 5175728, "answer_id": 5175771}, {"body": "<p>It depends on what form of date / time you want:</p>\n\n<ul>\n<li><p>If you want the date / time as a single numeric value, then <code>System.currentTimeMillis()</code> gives you that, expressed as the number of milliseconds after the UNIX epoch (as a Java <code>long</code>).  This value is a delta from a UTC time-point, and is independent of the local time-zone ... assuming that the system clock has been set correctly.</p></li>\n<li><p>If you want the date / time in a form that allows you to access the components (year, month, etc) numerically, you could use one of the following:</p>\n\n<ul>\n<li><p><code>new Date()</code> gives you a <code>Date</code> object initialized with the current date / time.  The problem is that the <code>Date</code> API methods are mostly flawed ... and deprecated.</p></li>\n<li><p><code>Calendar.getInstance()</code> gives you a <code>Calendar</code> object initialized with the current date / time, using the default <code>Locale</code> and <code>TimeZone</code>.  Other overloads allow you to use a specific <code>Locale</code> and/or <code>TimeZone</code>.  Calendar works ... but the APIs are still cumbersome.</p></li>\n<li><p><code>new org.joda.time.DateTime()</code> gives you a <a href=\"http://www.joda.org/joda-time/\">Joda-time</a> object initialized with the current date / time, using the default time zone and chronology.  There are lots of other Joda alternatives ... too many to describe here.</p></li>\n<li><p>in Java 8, calling <code>LocalDateTime.now()</code> and <code>ZonedDateTime.now()</code> will give you representations for the current date / time.</p></li>\n</ul></li>\n</ul>\n\n<p>Prior to Java 8, most people who know about these things recommended <a href=\"http://www.joda.org/joda-time/\">Joda-time</a> as having (by far) the best Java APIs for doing things involving time point and duration calculations.  With Java 8, this is no longer true.  However, if you are already using Joda time in your codebase, there is no strong reason to migrate.</p>\n", "title": "How to get the current date/time in java", "tags": ["java", "datetime"], "link": "http://stackoverflow.com/questions/5175728/how-to-get-the-current-date-time-in-java/5175900#5175900", "post_type": "answer", "question_id": 5175728, "answer_id": 5175900}, {"body": "<p>Use <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html#parse-java.lang.CharSequence-java.time.format.DateTimeFormatter-\"><code>LocalDateTime#parse()</code></a> (or <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html#parse-java.lang.CharSequence-java.time.format.DateTimeFormatter-\"><code>ZonedDateTime#parse()</code></a> if the string happens to contain a time zone part) to parse a <code>String</code> in a certain pattern into a <code>LocalDateTime</code>.</p>\n\n<pre><code>String oldstring = \"2011-01-18 00:00:00.0\";\nLocalDateTime datetime = LocalDateTime.parse(oldstring, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.S\"));\n</code></pre>\n\n<p>Use <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html#format-java.time.format.DateTimeFormatter-\"><code>LocalDateTime#format()</code></a> (or <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html#format-java.time.format.DateTimeFormatter-\"><code>ZonedDateTime#format()</code></a>) to format a <code>LocalDateTime</code> into a <code>String</code> in a certain pattern.</p>\n\n<pre><code>String newstring = datetime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\nSystem.out.println(newstring); // 2011-01-18\n</code></pre>\n\n<p><strong>Or</strong>, when you're not on Java 8 yet, use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/text/DateFormat.html#parse-java.lang.String-\"><code>SimpleDateFormat#parse()</code></a> to parse a <code>String</code> in a certain pattern into a <code>Date</code>.</p>\n\n<pre><code>String oldstring = \"2011-01-18 00:00:00.0\";\nDate date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\").parse(oldstring);\n</code></pre>\n\n<p>Use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/text/DateFormat.html#format-java.util.Date-\"><code>SimpleDateFormat#format()</code></a> to format a <code>Date</code> into a <code>String</code> in a certain pattern.</p>\n\n<pre><code>String newstring = new SimpleDateFormat(\"yyyy-MM-dd\").format(date);\nSystem.out.println(newstring); // 2011-01-18\n</code></pre>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4216745/java-string-to-date-conversion/\">Java string to date conversion</a></li>\n</ul>\n\n<hr>\n\n<p><strong>Update</strong>: as per your failed attempt: the patterns are <strong>case sensitive</strong>. Read the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html\"><code>java.text.SimpleDateFormat</code> javadoc</a> what the individual parts stands for. So stands for example <code>M</code> for months and <code>m</code> for minutes. Also, years exist of four digits <code>yyyy</code>, not five <code>yyyyy</code>. Look closer at the code snippets I posted here above.</p>\n", "title": "Change date format in a Java string", "tags": ["java", "string", "date", "formatting"], "link": "http://stackoverflow.com/questions/4772425/change-date-format-in-a-java-string/4772461#4772461", "post_type": "answer", "question_id": 4772425, "answer_id": 4772461}, {"body": "<p>remove one y form <code>SimpleDateFormat dt1 = new SimpleDateFormat(\"yyyyy-mm-dd\");</code> should be <code>SimpleDateFormat dt1 = new SimpleDateFormat(\"yyyy-mm-dd\");</code></p>\n", "title": "Change date format in a Java string", "tags": ["java", "string", "date", "formatting"], "link": "http://stackoverflow.com/questions/4772425/change-date-format-in-a-java-string/18953213#18953213", "post_type": "answer", "question_id": 4772425, "answer_id": 18953213}, {"body": "<p>You're essentially running out of memory to run the process smoothly. Options that come to mind:</p>\n\n<ol>\n<li>Specify more memory like you mentioned, try something in between like <code>-Xmx512m</code> first</li>\n<li>Work with smaller batches of <code>HashMap</code> objects to process at once if possible</li>\n<li>If you have a lot of duplicate strings, use <a href=\"http://java.sun.com/javase/7/docs/api/java/lang/String.html#intern%28%29\"><code>String.intern()</code></a> on them before putting them into the <code>HashMap</code></li>\n<li>Use the <a href=\"http://download.oracle.com/javase/6/docs/api/java/util/HashMap.html#HashMap%28int,%20float%29\"><code>HashMap(int initialCapacity, float loadFactor)</code></a> constructor to tune for your case</li>\n</ol>\n", "title": "java.lang.OutOfMemoryError: GC overhead limit exceeded", "tags": ["java", "hashmap", "heap", "heap-memory", "g1gc"], "link": "http://stackoverflow.com/questions/5839359/java-lang-outofmemoryerror-gc-overhead-limit-exceeded/5839392#5839392", "post_type": "answer", "question_id": 5839359, "answer_id": 5839392}, {"body": "<p>You need a <a href=\"http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormatter.html\" rel=\"nofollow\">DateTimeFormatter</a> appropriate to the format you're using.  Take a look at the docs for instructions on how to build one.</p>\n\n<p>Off the cuff, I think you need <code>format = DateTimeFormat.forPattern(\"M/d/y H:m:s\")</code></p>\n", "title": "Converting a date string to a DateTime object using Joda Time library", "tags": ["java", "datetime", "jodatime"], "link": "http://stackoverflow.com/questions/6252678/converting-a-date-string-to-a-datetime-object-using-joda-time-library/6252802#6252802", "post_type": "answer", "question_id": 6252678, "answer_id": 6252802}, {"body": "<blockquote>\n  <p>Now why and what for should I used\n  enum in day to day programing?</p>\n</blockquote>\n\n<p>You can use an Enum to represent a smallish fixed set of constants or an internal class mode while increasing readability. Also, Enums can enforce a certain rigidity when used in method parameters. They offer the interesting possibility of passing information to a constructor like in the <a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\" rel=\"nofollow\">Planets example on Oracle's site</a> and, as you've discovered, also allow a simple way to create a singleton pattern.</p>\n\n<p>ex: <code>Locale.setDefault(Locale.US)</code> reads better than <code>Locale.setDefault(1)</code> and enforces the use of fixed set of values shown in an IDE when you add the <code>.</code> separator instead of all integers.</p>\n", "title": "What are enums and why are they useful?", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/4709175/what-are-enums-and-why-are-they-useful/4709284#4709284", "post_type": "answer", "question_id": 4709175, "answer_id": 4709284}, {"body": "<p>Something none of the other answers have covered that make enums particularly powerful are the ability to have <a href=\"http://en.wikipedia.org/wiki/Template_method_pattern\">template methods</a>. Methods can be part of the base enum and overridden by each type. And, with the behavior attached to the enum, it often eliminates the need for if-else constructs or switch statements as this <a href=\"http://www.ajaxonomy.com/2007/java/making-the-most-of-java-50-enum-tricks\">blog post demonstrates</a> - where <code>enum.method()</code> does what originally would be executed inside the conditional. The same example also shows the use of static imports with enums as well producing much cleaner DSL like code. </p>\n\n<p>Some other interesting qualities include the fact that enums provide implementation for <code>equals()</code>, <code>toString()</code> and <code>hashCode()</code> and implement <code>Serializable</code> and <code>Comparable</code>. </p>\n\n<p>For a complete rundown of all that enums have to offer I highly recommend Bruce Eckel's <a href=\"http://www.mindview.net/Books/TIJ4\">Thinking in Java 4th edition</a> which devotes an entire chapter to the topic. Particularly illuminating are the examples involving a Rock, Paper, Scissors (i.e. RoShamBo) game as enums. </p>\n", "title": "What are enums and why are they useful?", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/4709175/what-are-enums-and-why-are-they-useful/4709892#4709892", "post_type": "answer", "question_id": 4709175, "answer_id": 4709892}, {"body": "<p>There are two main uses of <code>AtomicInteger</code>:</p>\n\n<ul>\n<li><p>As an atomic counter (<code>incrementAndGet()</code>, etc) that can be used by many threads concurrently</p></li>\n<li><p>As a primitive that supports <a href=\"http://en.wikipedia.org/wiki/Compare-and-swap\">compare-and-swap</a> instruction (<code>compareAndSet()</code>) to implement non-blocking algorithms. </p>\n\n<p>Here is an example of non-blocking random number generator from <a href=\"http://rads.stackoverflow.com/amzn/click/0321349601\">Brian G\u00f6etz's Java Concurrency In Practice</a>:</p>\n\n<pre><code>public class AtomicPseudoRandom extends PseudoRandom {\n    private AtomicInteger seed;\n    AtomicPseudoRandom(int seed) {\n        this.seed = new AtomicInteger(seed);\n    }\n\n    public int nextInt(int n) {\n        while (true) {\n            int s = seed.get();\n            int nextSeed = calculateNext(s);\n            if (seed.compareAndSet(s, nextSeed)) {\n                int remainder = s % n;\n                return remainder &gt; 0 ? remainder : remainder + n;\n            }\n        }\n    }\n    ...\n}\n</code></pre>\n\n<p>As you can see, it basically works almost the same way as <code>incrementAndGet()</code>, but performs arbitrary calculation (<code>calculateNext()</code>) instead of increment (and processes the result before return).</p></li>\n</ul>\n", "title": "Practical uses for AtomicInteger", "tags": ["java", "concurrency", "atomic"], "link": "http://stackoverflow.com/questions/4818699/practical-uses-for-atomicinteger/4818753#4818753", "post_type": "answer", "question_id": 4818699, "answer_id": 4818753}, {"body": "<p>The absolute simplest example I can think of is to make incrementing an atomic operation.</p>\n\n<p>With standard ints:</p>\n\n<pre><code>private volatile int counter;\n\npublic int getNextUniqueIndex() {\n    return counter++; // Not atomic, multiple threads could get the same result\n}\n</code></pre>\n\n<p>With AtomicInteger:</p>\n\n<pre><code>private AtomicInteger counter;\n\npublic int getNextUniqueIndex() {\n    return counter.getAndIncrement();\n}\n</code></pre>\n\n<p>The latter is a very simple way to perform simple mutations effects (especially counting, or unique-indexing), without having to resort to synchronizing all access.</p>\n\n<p>More complex synchronization-free logic can be employed by using <code>compareAndSet()</code> as a type of optimistic locking - get the current value, compute result based on this, set this result <em>iff</em> value is still the input used to do the calculation, else start again - but the counting examples are very useful, and I'll often use <code>AtomicIntegers</code> for counting and VM-wide unique generators if there's any hint of multiple threads being involved, because they're so easy to work with I'd almost consider it premature optimisation to use plain <code>ints</code>.</p>\n\n<p>While you can almost always achieve the same synchronization guarantees with <code>ints</code> and appropriate <code>synchronized</code> declarations, the beauty of <code>AtomicInteger</code> is that the thread-safety is built into the actual object itself, rather than you needing to worry about the possible interleavings, and monitors held, of every method that happens to access the <code>int</code> value.  It's much harder to accidentally violate threadsafety when calling <code>getAndIncrement()</code> than when returning <code>i++</code> and remembering (or not) to acquire the correct set of monitors beforehand.</p>\n", "title": "Practical uses for AtomicInteger", "tags": ["java", "concurrency", "atomic"], "link": "http://stackoverflow.com/questions/4818699/practical-uses-for-atomicinteger/4818783#4818783", "post_type": "answer", "question_id": 4818699, "answer_id": 4818783}, {"body": "<p>The primary use of <code>AtomicInteger</code> is when you are in a multithreaded context and you need to perform thread safe operations on an integer without using <code>synchronized</code>. The assignation and retrieval on the primitive type <code>int</code> are already atomic but <code>AtomicInteger</code> comes with many operations which are not atomic on <code>int</code>.</p>\n\n<p>The simplest are the <code>getAndXXX</code> or <code>xXXAndGet</code>. For instance <code>getAndIncrement()</code> is an atomic equivalent to <code>i++</code> which is not atomic because it is actually a short cut for three operations: retrieval, addition and assignation. <code>compareAndSet</code> is very useful to implements semaphores, locks, latches, etc.</p>\n\n<p>Using the <code>AtomicInteger</code> is faster and more readable than performing the same using synchronization.</p>\n\n<p>A simple test:</p>\n\n<pre><code>public synchronized int incrementNotAtomic() {\n    return notAtomic++;\n}\n\npublic void performTestNotAtomic() {\n    final long start = System.currentTimeMillis();\n    for (int i = 0 ; i &lt; NUM ; i++) {\n        incrementNotAtomic();\n    }\n    System.out.println(\"Not atomic: \"+(System.currentTimeMillis() - start));\n}\n\npublic void performTestAtomic() {\n    final long start = System.currentTimeMillis();\n    for (int i = 0 ; i &lt; NUM ; i++) {\n        atomic.getAndIncrement();\n    }\n    System.out.println(\"Atomic: \"+(System.currentTimeMillis() - start));\n}\n</code></pre>\n\n<p>On my PC with Java 1.6 the atomic test runs in 3 seconds while the synchronized one runs in about 5.5 seconds. The problem here is that the operation to synchronize (<code>notAtomic++</code>) is really short. So the cost of the synchronization is really important compared to the operation.</p>\n\n<p>Beside atomicity AtomicInteger can be use as a mutable version of <code>Integer</code> for instance in <code>Map</code>s as values.</p>\n", "title": "Practical uses for AtomicInteger", "tags": ["java", "concurrency", "atomic"], "link": "http://stackoverflow.com/questions/4818699/practical-uses-for-atomicinteger/4818916#4818916", "post_type": "answer", "question_id": 4818699, "answer_id": 4818916}, {"body": "<p>If you look at the methods AtomicInteger has, you'll notice that they tend to correspond to common operations on ints.  For instance:</p>\n\n<pre><code>static AtomicInteger i;\n\n// Later, in a thread\nint current = i.incrementAndGet();\n</code></pre>\n\n<p>is the thread-safe version of this:</p>\n\n<pre><code>static int i;\n\n// Later, in a thread\nint current = ++i;\n</code></pre>\n\n<p>The methods map like this:<br>\n<code>++i</code> is <code>i.incrementAndGet()</code><br>\n<code>i++</code> is <code>i.getAndIncrement()</code><br>\n<code>--i</code> is <code>i.decrementAndGet()</code><br>\n<code>i--</code> is <code>i.getAndDecrement()</code><br>\n<code>i = x</code> is <code>i.set(x)</code><br>\n<code>x = i</code> is <code>x = i.get()</code>  </p>\n\n<p>There are other convenience methods as well, like <code>compareAndSet</code> or <code>addAndGet</code></p>\n", "title": "Practical uses for AtomicInteger", "tags": ["java", "concurrency", "atomic"], "link": "http://stackoverflow.com/questions/4818699/practical-uses-for-atomicinteger/4819109#4819109", "post_type": "answer", "question_id": 4818699, "answer_id": 4819109}, {"body": "<p>This works on Windows with Cygwin installed:</p>\n\n<p><code>System.getenv(\"NUMBER_OF_PROCESSORS\")</code></p>\n", "title": "Finding Number of Cores in Java", "tags": ["java"], "link": "http://stackoverflow.com/questions/4759570/finding-number-of-cores-in-java/19459145#19459145", "post_type": "answer", "question_id": 4759570, "answer_id": 19459145}, {"body": "<p>The \"$1\" is not \"useless non-sense\". If your class is anonymous, a number is appended.</p>\n\n<p>If you don't want the class itself, but its declaring class, then you can use <code>getEnclosingClass()</code>. For example:</p>\n\n<pre><code>Class&lt;?&gt; enclosingClass = getClass().getEnclosingClass();\nif (enclosingClass != null) {\n  System.out.println(enclosingClass.getName());\n} else {\n  System.out.println(getClass().getName());\n}\n</code></pre>\n\n<p>You can move that in some static utility method.</p>\n\n<p>But note that this is not the current class name. The anonymous class is different class than its enclosing class. The case is similar for inner classes.</p>\n", "title": "Java - get the current class name?", "tags": ["java", "class", "classname"], "link": "http://stackoverflow.com/questions/6271417/java-get-the-current-class-name/6271460#6271460", "post_type": "answer", "question_id": 6271417, "answer_id": 6271460}, {"body": "<p>Try using\n<code>this.getClass().getCanonicalName()</code> or <code>this.getClass().getSimpleName()</code>.  If it's an anonymous class, use <code>this.getClass.getSuperclass.getName()</code></p>\n", "title": "Java - get the current class name?", "tags": ["java", "class", "classname"], "link": "http://stackoverflow.com/questions/6271417/java-get-the-current-class-name/6271520#6271520", "post_type": "answer", "question_id": 6271417, "answer_id": 6271520}, {"body": "<p>I'm assuming this is happening for an anonymous class. When you create an anonymous class you actually create a class that extends the class whose name you got.</p>\n\n<p>The \"cleaner\" way to get the name you want is:</p>\n\n<p>If your class is an anonymous inner class, <code>getSuperClass()</code> should give you the class that it was created from. If you created it from an interface than you're sort of SOL because the best you can do is <code>getInterfaces()</code> which might give you more than one interface.</p>\n\n<p>The \"hacky\" way is to just get the name with <code>getClassName()</code> and use a regex to drop the <code>$1</code>.</p>\n", "title": "Java - get the current class name?", "tags": ["java", "class", "classname"], "link": "http://stackoverflow.com/questions/6271417/java-get-the-current-class-name/6271668#6271668", "post_type": "answer", "question_id": 6271417, "answer_id": 6271668}, {"body": "<p>Use this method,but be careful to make an object in your main.</p>\n\n<p><code>public static void setName(Object obj){\n        Class setClass = obj.getClass();\n        String className = setClass.getName();\n        System.out.println(className);\n    }</code></p>\n", "title": "Java - get the current class name?", "tags": ["java", "class", "classname"], "link": "http://stackoverflow.com/questions/6271417/java-get-the-current-class-name/29938300#29938300", "post_type": "answer", "question_id": 6271417, "answer_id": 29938300}, {"body": "<p><code>System.out.println(Integer.toBinaryString(343));</code></p>\n", "title": "Print an integer in binary format in Java", "tags": ["java"], "link": "http://stackoverflow.com/questions/5263187/print-an-integer-in-binary-format-in-java/5263201#5263201", "post_type": "answer", "question_id": 5263187, "answer_id": 5263201}, {"body": "<p>The commons/lang builders are great and I have been using them for years without noticeable performance overhead (with and without hibernate). But as Alain writes, the Guava way is even nicer:</p>\n\n<p>Here's a sample Bean:</p>\n\n<pre><code>public class Bean{\n\n    private String name;\n    private int length;\n    private List&lt;Bean&gt; children;\n\n}\n</code></pre>\n\n<p>Here's equals() and hashCode() implemented with Commons/Lang:</p>\n\n<pre><code>@Override\npublic int hashCode(){\n    return new HashCodeBuilder()\n        .append(name)\n        .append(length)\n        .append(children)\n        .toHashCode();\n}\n\n@Override\npublic boolean equals(final Object obj){\n    if(obj instanceof Bean){\n        final Bean other = (Bean) obj;\n        return new EqualsBuilder()\n            .append(name, other.name)\n            .append(length, other.length)\n            .append(children, other.children)\n            .isEquals();\n    } else{\n        return false;\n    }\n}\n</code></pre>\n\n<p>and here with Guava:</p>\n\n<pre><code>@Override\npublic int hashCode(){\n    return Objects.hashCode(name, length, children);\n}\n\n@Override\npublic boolean equals(final Object obj){\n    if(obj instanceof Bean){\n        final Bean other = (Bean) obj;\n        return Objects.equal(name, other.name)\n            &amp;&amp; length == other.length // special handling for primitives\n            &amp;&amp; Objects.equal(children, other.children);\n    } else{\n        return false;\n    }\n}\n</code></pre>\n\n<p>As you can see the Guava version is shorter and avoids superfluous helper objects. In case of equals, it even allows for short-circuiting the evaluation if an earlier <code>Object.equal()</code> call returns false (to be fair: commons / lang has an <code>ObjectUtils.equals(obj1, obj2)</code> method with identical semantics which could be used instead of <code>EqualsBuilder</code> to allow short-circuiting as above).</p>\n\n<p>So: yes, the commons lang builders are very preferable over manually constructed <code>equals()</code> and <code>hashCode()</code> methods (or those awful monsters Eclipse will generate for you), but the Guava versions are even better.</p>\n\n<p>And a note about Hibernate:</p>\n\n<p>be careful about using lazy collections in your equals(), hashCode() and toString() implementations. That will fail miserably if you don't have an open Session.</p>\n\n<hr>\n\n<p>Note (about equals()):</p>\n\n<p>a) in both versions of equals() above, you might want to use one or both of these shortcuts also:</p>\n\n<pre><code>@Override\npublic boolean equals(final Object obj){\n    if(obj == this) return true;  // test for reference equality\n    if(obj == null) return false; // test for null\n    // continue as above\n</code></pre>\n\n<p>b) depending on your interpretation of the equals() contract, you might also change the line(s)</p>\n\n<pre><code>    if(obj instanceof Bean){\n</code></pre>\n\n<p>to</p>\n\n<pre><code>    // make sure you run a null check before this\n    if(obj.getClass() == getClass()){ \n</code></pre>\n\n<p>If you use the second version, you probably also want to call <code>super(equals())</code> inside your <code>equals()</code> method. Opinions differ here, the topic is discussed in this question: </p>\n\n<blockquote>\n  <p><a href=\"http://stackoverflow.com/q/8248970/342852\">right way to incorporate superclass into a Guava Objects.hashcode() implementation?</a></p>\n</blockquote>\n\n<p>(although it's about <code>hashCode()</code>, the same applies to <code>equals()</code>)</p>\n\n<hr>\n\n<p><strong>Note (inspired by Comment from <a href=\"http://stackoverflow.com/users/274473/kayahr\">kayahr</a>)</strong></p>\n\n<p><code>Objects.hashCode(..)</code> (just as the underlying <code>Arrays.hashCode(...)</code>) might perform badly if you have many primitive fields. In such cases, <code>EqualsBuilder</code> may actually be the better solution.</p>\n", "title": "Apache Commons equals/hashCode builder", "tags": ["java", "hibernate", "equals", "apache-commons", "hashcode"], "link": "http://stackoverflow.com/questions/5038204/apache-commons-equals-hashcode-builder/5039178#5039178", "post_type": "answer", "question_id": 5038204, "answer_id": 5039178}, {"body": "<p>You have to use <code>getStackTrace ()</code> method instead of <code>printStackTrace()</code>. Here is a <a href=\"http://www.javapractices.com/topic/TopicAction.do?Id=78\">good example</a>:</p>\n\n<pre><code>import java.io.*;\n\n/**\n* Simple utilities to return the stack trace of an\n* exception as a String.\n*/\npublic final class StackTraceUtil {\n\n  public static String getStackTrace(Throwable aThrowable) {\n    final Writer result = new StringWriter();\n    final PrintWriter printWriter = new PrintWriter(result);\n    aThrowable.printStackTrace(printWriter);\n    return result.toString();\n  }\n\n  /**\n  * Defines a custom format for the stack trace as String.\n  */\n  public static String getCustomStackTrace(Throwable aThrowable) {\n    //add the class name and any message passed to constructor\n    final StringBuilder result = new StringBuilder( \"BOO-BOO: \" );\n    result.append(aThrowable.toString());\n    final String NEW_LINE = System.getProperty(\"line.separator\");\n    result.append(NEW_LINE);\n\n    //add each element of the stack trace\n    for (StackTraceElement element : aThrowable.getStackTrace() ){\n      result.append( element );\n      result.append( NEW_LINE );\n    }\n    return result.toString();\n  }\n\n  /** Demonstrate output.  */\n  public static void main (String... aArguments){\n    final Throwable throwable = new IllegalArgumentException(\"Blah\");\n    System.out.println( getStackTrace(throwable) );\n    System.out.println( getCustomStackTrace(throwable) );\n  }\n} \n</code></pre>\n", "title": "How to store printStackTrace into a string", "tags": ["java", "stack-trace"], "link": "http://stackoverflow.com/questions/4812570/how-to-store-printstacktrace-into-a-string/4812585#4812585", "post_type": "answer", "question_id": 4812570, "answer_id": 4812585}, {"body": "<p>You can use the <code>ExceptionUtils.getStackTrace(Throwable t);</code> from Apache Commons 3 class <code>org.apache.commons.lang3.exception.ExceptionUtils</code>. </p>\n\n<p><a href=\"http://commons.apache.org/proper/commons-lang/\">http://commons.apache.org/proper/commons-lang/</a></p>\n", "title": "How to store printStackTrace into a string", "tags": ["java", "stack-trace"], "link": "http://stackoverflow.com/questions/4812570/how-to-store-printstacktrace-into-a-string/21765043#21765043", "post_type": "answer", "question_id": 4812570, "answer_id": 21765043}, {"body": "<p>There are multiple ways:</p>\n\n<ul>\n<li><code>String.valueOf(number)</code> (my preference)</li>\n<li><code>\"\" + number</code> (I don't know how the compiler handles it, perhaps it is as efficient as the above)</li>\n<li><code>Integer.toString(number)</code></li>\n</ul>\n", "title": "Java - Convert integer to string", "tags": ["java", "string", "numbers", "int"], "link": "http://stackoverflow.com/questions/5071040/java-convert-integer-to-string/5071064#5071064", "post_type": "answer", "question_id": 5071040, "answer_id": 5071064}, {"body": "<p>Always use either <code>String.valueOf(number)</code> or <code>Integer.toString(number)</code>.</p>\n\n<p>Using \"\" + number is an overhead and does the following:</p>\n\n<pre><code>StringBuilder sb = new StringBuilder();\nsb.append(\"\");\nsb.append(number);\nreturn sb.toString();\n</code></pre>\n", "title": "Java - Convert integer to string", "tags": ["java", "string", "numbers", "int"], "link": "http://stackoverflow.com/questions/5071040/java-convert-integer-to-string/22547954#22547954", "post_type": "answer", "question_id": 5071040, "answer_id": 22547954}, {"body": "<p>using</p>\n\n<pre><code>public String replaceAll(String regex, String replacement)\n</code></pre>\n\n<p>will work</p>\n\n<p>usage would be <code>str.replace(\"X\", \"\");</code></p>\n\n<p>executing </p>\n\n<pre><code>\"Xlakjsdf Xxx\".replaceAll(\"X\", \"\");\n</code></pre>\n\n<p>returns:</p>\n\n<pre><code>lakjsdf xx\n</code></pre>\n", "title": "Remove all occurrences of char from string", "tags": ["java", "string", "character"], "link": "http://stackoverflow.com/questions/4576352/remove-all-occurrences-of-char-from-string/4576367#4576367", "post_type": "answer", "question_id": 4576352, "answer_id": 4576367}, {"body": "<p>You can use <code>str = str.replace(\"X\", \"\");</code> as mentioned before and you will be fine. For your information <code>''</code> is not an empty (or a valid) character but <code>'\\0'</code> is. </p>\n\n<p>So you could use <code>str = str.replace('X', '\\0');</code> instead.</p>\n", "title": "Remove all occurrences of char from string", "tags": ["java", "string", "character"], "link": "http://stackoverflow.com/questions/4576352/remove-all-occurrences-of-char-from-string/11325546#11325546", "post_type": "answer", "question_id": 4576352, "answer_id": 11325546}, {"body": "<p>If you want to use <code>equals()/hashCode()</code> for your Sets, in the sense that the <em>same entity</em> can only be in there once, then there is only one option: Option 2. That's because a <strong>primary key</strong> for an entity by definition never changes (if somebody indeed updates it, it's not the same entity anymore)</p>\n\n<p>You should take that literally: Since your <code>equals()/hashCode()</code> are based on the primary key, you must not use these methods, until the primary key is set. So you shouldn't put entities in the set, until they're assigned a primary key. (Yes, UUIDs and similar concepts may help to assign primary keys early.)</p>\n\n<p>Now, it's theoretically also possible to achieve that with Option 3, even though so-called \"business-keys\" have the nasty drawback that they can change: \"All you'll have to do is delete the already inserted entities from the set(s), and re-insert them.\" That is true - but it also means, that in a distributed system, you'll have to make sure, that this is done absolutely everywhere the data has been inserted to (and you'll have to make sure, that the update is performed, before other things occur). You'll need a sophisticated update mechanism, especially if some remote systems aren't currently reachable...</p>\n\n<p>Option 1 can only be used, if all the objects in your sets are from the same Hibernate session. The Hibernate documentation makes this very clear in chapter <a href=\"http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html/transactions.html#transactions-basics-identity\">13.1.3. Considering object identity</a>:</p>\n\n<blockquote>\n  <p>Within a Session the application can safely use == to compare objects.</p>\n  \n  <p>However, an application that uses == outside of a Session might produce unexpected results. This might occur even in some unexpected places. For example, if you put two detached instances into the same Set, both might have the same database identity (i.e., they represent the same row). JVM identity, however, is by definition not guaranteed for instances in a detached state. The developer has to override the equals() and hashCode() methods in persistent classes and implement their own notion of object equality.</p>\n</blockquote>\n\n<p>It continues to argue in favor of Option 3:</p>\n\n<blockquote>\n  <p>There is one caveat: never use the database identifier to implement equality. Use a business key that is a combination of unique, usually immutable, attributes. The database identifier will change if a transient object is made persistent. If the transient instance (usually together with detached instances) is held in a Set, changing the hashcode breaks the contract of the Set.</p>\n</blockquote>\n\n<p>This is true, <strong>if</strong> you </p>\n\n<ul>\n<li>cannot assign the id early (e.g. by using UUIDs)</li>\n<li>and yet you absolutely want to put your objects in sets while they're in transient state.</li>\n</ul>\n\n<p>Otherwise, you're free to choose Option 2.</p>\n\n<p>Then it mentions the need for a relative stability:</p>\n\n<blockquote>\n  <p>Attributes for business keys do not have to be as stable as database primary keys; you only have to guarantee stability as long as the objects are in the same Set.</p>\n</blockquote>\n\n<p>This is correct. The practical problem I see with this is: If you can't guarantee absolute stability, how will you be able to guarantee stability \"as long as the objects are in the same Set\". I can imagine some special cases (like using sets only for a conversation and then throwing it away), but I would question the general practicability of this.</p>\n\n<hr>\n\n<p>Short version:</p>\n\n<ul>\n<li>Option 1 can only be used with objects within a single session.</li>\n<li>If you can, use Option 2. (Assign PK as early as possible, because you can't use the objects in sets until the PK is assigned.)</li>\n<li>If you can guarantee relative stability, you can use Option 3. But be careful with this.</li>\n</ul>\n", "title": "The JPA hashCode() / equals() dilemma", "tags": ["java", "hibernate", "jpa", "identity", "eclipselink"], "link": "http://stackoverflow.com/questions/5031614/the-jpa-hashcode-equals-dilemma/5032837#5032837", "post_type": "answer", "question_id": 5031614, "answer_id": 5032837}, {"body": "<p>We usually have two IDs in our entities: </p>\n\n<ol>\n<li>Is for persistence layer only (so that persistence provider and database can figure out relationships between objects).</li>\n<li>Is for our application needs (<code>equals()</code> and <code>hashCode()</code> in particular)</li>\n</ol>\n\n<p>Take a look: </p>\n\n<pre><code>@Entity\npublic class User {\n\n    @Id\n    private int id;  // Persistence ID\n    private UUID uuid; // Business ID\n\n    // assuming all fields are subject to change\n    // If we forbid users change their email or screenName we can use these\n    // fields for business ID instead, but generally that's not the case\n    private String screenName;\n    private String email;\n\n    // I don't put UUID generation in constructor for performance reasons. \n    // I call setUuid() when I create a new entity\n    public User() {\n    }\n\n    // This method is only called when a brand new entity is added to \n    // persistence context - I add it as a safety net only but it might work \n    // for you. In some cases (say, when I add this entity to some set before \n    // calling em.persist()) setting a UUID might be too late. If I get a log \n    // output it means that I forgot to call setUuid() somewhere.\n    @PrePersist\n    public void ensureUuid() {\n        if (getUuid() == null) {\n            log.warn(format(\"User's UUID wasn't set on time. \" \n                + \"uuid: %s, name: %s, email: %s\",\n                getUuid(), getScreenName(), getEmail()));\n            setUuid(UUID.randomUUID());\n        }\n    }\n\n    // equals() and hashCode() rely on non-changing data only. Thus we \n    // guarantee that no matter how field values are changed we won't \n    // lose our entity in hash-based Sets.\n    @Override\n    public int hashCode() {\n        return getUuid().hashCode();\n    }\n\n    // Note that I don't use direct field access inside my entity classes and\n    // call getters instead. That's because Persistence provider (PP) might\n    // want to load entity data lazily. And I don't use \n    //    this.getClass() == other.getClass() \n    // for the same reason. In order to support laziness PP might need to wrap\n    // my entity object in some kind of proxy, i.e. subclassing it.\n    @Override\n    public boolean equals(final Object obj) {\n        if (this == obj)\n            return true;\n        if (!(obj instanceof User))\n            return false;\n        return getUuid().equals(((User) obj).getUuid());\n    }\n\n    // Getters and setters follow\n}\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT:</strong> to clarify my point regarding calls to <code>setUuid()</code> method. Here's a typical scenario:</p>\n\n<pre><code>User user = new User();\n// user.setUuid(UUID.randomUUID()); // I should have called it here\nuser.setName(\"Master Yoda\");\nuser.setEmail(\"yoda@jedicouncil.org\");\n\njediSet.add(user); // here's bug - we forgot to set UUID and \n                   //we won't find Yoda in Jedi set\n\nem.persist(user); // ensureUuid() was called and printed the log for me.\n\njediCouncilSet.add(user); // Ok, we got a UUID now\n</code></pre>\n\n<p>When I run my tests and see the log output I fix the problem:</p>\n\n<pre><code>User user = new User();\nuser.setUuid(UUID.randomUUID());\n</code></pre>\n\n<p>Alternatively, one can provide a separate constructor:</p>\n\n<pre><code>@Entity\npublic class User {\n\n    @Id\n    private int id;  // Persistence ID\n    private UUID uuid; // Business ID\n\n    ... // fields\n\n    // Constructor for Persistence provider to use\n    public User() {\n    }\n\n    // Constructor I use when creating new entities\n    public User(UUID uuid) {\n        setUuid(uuid);\n    }\n\n    ... // rest of the entity.\n}\n</code></pre>\n\n<p>So my example would look like this:</p>\n\n<pre><code>User user = new User(UUID.randomUUID());\n...\njediSet.add(user); // no bug this time\n\nem.persist(user); // and no log output\n</code></pre>\n\n<p>I use a default constructor and a setter, but you may find two-constructors approach more suitable for you.</p>\n", "title": "The JPA hashCode() / equals() dilemma", "tags": ["java", "hibernate", "jpa", "identity", "eclipselink"], "link": "http://stackoverflow.com/questions/5031614/the-jpa-hashcode-equals-dilemma/5103360#5103360", "post_type": "answer", "question_id": 5031614, "answer_id": 5103360}, {"body": "<ol>\n<li>If you have a <a href=\"http://vladmihalcea.com/2013/10/23/hibernate-facts-equals-and-hashcode/\" rel=\"nofollow\">business key</a>, then you should use that for <code>equals</code>/<code>hashCode</code>.</li>\n<li>If you don't have a business key, you should not leave it with the default <code>Object</code> equals and hashCode implementations because that does not work after you <code>merge</code> and entity.</li>\n<li><p>You can <a href=\"https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-entity-identifier/\" rel=\"nofollow\">use the entity identifier as suggested in this post</a>. The only catch is that you need to use a <code>hashCode</code> implementation that always return the same value, like this:</p>\n\n<pre><code>@Entity\npublic class Book implements Identifiable&lt;Long&gt; {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String title;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Book)) return false;\n        Book book = (Book) o;\n        return Objects.equals(getId(), book.getId());\n    }\n\n    @Override\n    public int hashCode() {\n        return 31;\n    }\n\n    //Getters and setters omitted for brevity\n}\n</code></pre></li>\n</ol>\n", "title": "The JPA hashCode() / equals() dilemma", "tags": ["java", "hibernate", "jpa", "identity", "eclipselink"], "link": "http://stackoverflow.com/questions/5031614/the-jpa-hashcode-equals-dilemma/26826084#26826084", "post_type": "answer", "question_id": 5031614, "answer_id": 26826084}, {"body": "<p>Another way is to use an array as a type, e.g.:</p>\n\n<pre><code>MyClass[] mcArray = gson.fromJson(jsonString, MyClass[].class);\n</code></pre>\n\n<p>This way you avoid all the hassle with the Type object, and if you really need a list you can always convert the array to a list by:</p>\n\n<pre><code>List&lt;MyClass&gt; mcList = Arrays.asList(mcArray);\n</code></pre>\n\n<p>IMHO this is much more readable.</p>\n\n<p>And to make it be an actual list (that can be modified, see limitations of <code>Arrays.asList()</code>) then just do the following:</p>\n\n<pre><code>List&lt;MyClass&gt; mcList = new ArrayList&lt;&gt;(Arrays.asList(mcArray));\n</code></pre>\n", "title": "Google Gson - deserialize list&lt;class&gt; object? (generic type)", "tags": ["java", "json", "generics", "gson"], "link": "http://stackoverflow.com/questions/5554217/google-gson-deserialize-listclass-object-generic-type/17300003#17300003", "post_type": "answer", "question_id": 5554217, "answer_id": 17300003}, {"body": "<pre><code>@RequestMapping(value = \"/files/{file_name}\", method = RequestMethod.GET)\npublic void getFile(\n    @PathVariable(\"file_name\") String fileName, \n    HttpServletResponse response) {\n    try {\n      // get your file as InputStream\n      InputStream is = ...;\n      // copy it to response's OutputStream\n      org.apache.commons.io.IOUtils.copy(is, response.getOutputStream());\n      response.flushBuffer();\n    } catch (IOException ex) {\n      log.info(\"Error writing file to output stream. Filename was '{}'\", fileName, ex);\n      throw new RuntimeException(\"IOError writing file to output stream\");\n    }\n\n}\n</code></pre>\n\n<p>Generally speaking, when you have <code>response.getOutputStream()</code>, you can write anything there. You can pass this output stream as a place to put generated PDF to your generator. Also, if you know what file type you are sending, you can set </p>\n\n<pre><code>response.setContentType(\"application/pdf\");\n</code></pre>\n", "title": "Downloading a file from spring controllers", "tags": ["java", "spring", "file", "download", "controller"], "link": "http://stackoverflow.com/questions/5673260/downloading-a-file-from-spring-controllers/5673356#5673356", "post_type": "answer", "question_id": 5673260, "answer_id": 5673356}, {"body": "<p>You should be able to write the file on the response directly. Something like </p>\n\n<pre><code>response.setContentType(\"application/pdf\");      \nresponse.setHeader(\"Content-Disposition\", \"attachment; filename=somefile.pdf\"); \n</code></pre>\n\n<p>and then write the file as a binary stream on <code>response.getOutputStream()</code>. Remember to do <code>response.flush()</code> at the end and that should do it.</p>\n", "title": "Downloading a file from spring controllers", "tags": ["java", "spring", "file", "download", "controller"], "link": "http://stackoverflow.com/questions/5673260/downloading-a-file-from-spring-controllers/5673375#5673375", "post_type": "answer", "question_id": 5673260, "answer_id": 5673375}, {"body": "<p>If you want to make a copy of:</p>\n\n<pre><code>int[] a = {1,2,3,4,5};\n</code></pre>\n\n<p>This is the way to go:</p>\n\n<pre><code>int[] b = Arrays.copyOf(a, a.length);\n</code></pre>\n\n<p><code>Arrays.copyOf</code> may be faster than <code>a.clone()</code> on small arrays. Both copy elements equally fast but clone() returns <code>Object</code> so the compiler has to insert an implicit cast to <code>int[]</code>. You can see it in the bytecode, something like this:</p>\n\n<pre><code>ALOAD 1\nINVOKEVIRTUAL [I.clone ()Ljava/lang/Object;\nCHECKCAST [I\nASTORE 2\n</code></pre>\n", "title": "Make copy of array Java", "tags": ["java", "arrays", "copy"], "link": "http://stackoverflow.com/questions/5785745/make-copy-of-array-java/15962949#15962949", "post_type": "answer", "question_id": 5785745, "answer_id": 15962949}, {"body": "<p>You can also use <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOfRange-int:A-int-int-\"><code>Arrays.copyOfRange</code></a>.</p>\n\n<p><strong>Example</strong>:</p>\n\n<pre><code>public static void main(String[] args) {\n    int[] a = {1,2,3};\n    int[] b = Arrays.copyOfRange(a, 0, a.length);\n    a[0] = 5;\n    System.out.println(Arrays.toString(a)); // [5,2,3]\n    System.out.println(Arrays.toString(b)); // [1,2,3]\n}\n</code></pre>\n\n<p>This method is similar to <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOf-int:A-int-\"><code>Arrays.copyOf</code></a>, but it's more flexible. Both of them use <code>System.arraycopy</code> under the hood. </p>\n\n<p><strong>See</strong>:</p>\n\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html\">https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html</a></li>\n<li><a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/util/Arrays.java?av=f\">http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/util/Arrays.java?av=f</a></li>\n</ul>\n", "title": "Make copy of array Java", "tags": ["java", "arrays", "copy"], "link": "http://stackoverflow.com/questions/5785745/make-copy-of-array-java/34845194#34845194", "post_type": "answer", "question_id": 5785745, "answer_id": 34845194}, {"body": "<p>Rather than spoon-feed you code, here's how to look in the <a href=\"http://download.oracle.com/javase/6/docs/api/\">documentation</a>.</p>\n\n<p>First, you're dealing with IO, so look in the <code>java.io</code> <a href=\"http://download.oracle.com/javase/6/docs/api/java/io/package-summary.html\">package</a>. </p>\n\n<p>There are two classes that look interesting: <a href=\"http://download.oracle.com/javase/6/docs/api/java/io/FileFilter.html\">FileFilter</a> and <a href=\"http://download.oracle.com/javase/6/docs/api/java/io/FilenameFilter.html\">FileNameFilter</a>. When I clicked on the first, it showed me that there was a a <code>listFiles()</code> method in the <a href=\"http://download.oracle.com/javase/6/docs/api/java/io/File.html\">File</a> class. And the documentation for that method says:</p>\n\n<blockquote>\n  <p>Returns an array of abstract pathnames\n  denoting the files in the directory\n  denoted by this abstract pathname.</p>\n</blockquote>\n\n<p>Scrolling up in the <code>File</code> JavaDoc, I see the constructors. And that's really all I need to be able to create a <code>File</code> instance and call <code>listFiles()</code> on it. Scrolling still further, I can see some information about how files are named in different operating systems.</p>\n", "title": "Getting the filenames of all files in a folder", "tags": ["java", "file", "folder", "filenames"], "link": "http://stackoverflow.com/questions/5694385/getting-the-filenames-of-all-files-in-a-folder/5694464#5694464", "post_type": "answer", "question_id": 5694385, "answer_id": 5694464}, {"body": "<p>Create a <a href=\"http://download.oracle.com/javase/6/docs/api/java/io/File.html\"><code>File</code></a> object, passing the directory path to the constructor. Use the <code>listFiles()</code> to retrieve an array of <code>File</code> objects for each file in the directory, and then call the <code>getName()</code> method to get the filename.</p>\n\n<pre><code>List&lt;String&gt; results = new ArrayList&lt;String&gt;();\n\n\nFile[] files = new File(\"/path/to/the/directory\").listFiles();\n//If this pathname does not denote a directory, then listFiles() returns null. \n\nfor (File file : files) {\n    if (file.isFile()) {\n        results.add(file.getName());\n    }\n}\n</code></pre>\n", "title": "Getting the filenames of all files in a folder", "tags": ["java", "file", "folder", "filenames"], "link": "http://stackoverflow.com/questions/5694385/getting-the-filenames-of-all-files-in-a-folder/5694473#5694473", "post_type": "answer", "question_id": 5694385, "answer_id": 5694473}, {"body": "<p>You can use <code>Integer.parseInt()</code> or <code>Integer.valueOf()</code> to get the integer from the string, and catch the exception if it is not a parsable int.  You want to be sure to catch the <code>NumberFormatException</code> it can throw.</p>\n\n<p>It may be helpful to note that valueOf() will return an Integer object, not the primitive int.  </p>\n", "title": "Determine if a String is an Integer in Java", "tags": ["java", "string", "int"], "link": "http://stackoverflow.com/questions/5439529/determine-if-a-string-is-an-integer-in-java/5439543#5439543", "post_type": "answer", "question_id": 5439529, "answer_id": 5439543}, {"body": "<p>As an alternative to trying to parse the string and catching <code>NumberFormatException</code>, you could use a regex; e.g.</p>\n\n<pre><code>if (Pattern.compile(\"-?[0-9]+\").matches(str)) {\n    // its an integer\n}\n</code></pre>\n\n<p>This is likely to be faster, especially if you precompile and reuse the regex.  However, the catch is that <code>Integer.parseInt(str)</code> will still fail if <code>str</code> represents a number that is outside range of legal <code>int</code> values.</p>\n", "title": "Determine if a String is an Integer in Java", "tags": ["java", "string", "int"], "link": "http://stackoverflow.com/questions/5439529/determine-if-a-string-is-an-integer-in-java/5439600#5439600", "post_type": "answer", "question_id": 5439529, "answer_id": 5439600}, {"body": "<p>You can use <code>Integer.parseInt(str)</code> and catch the <code>NumberFormatException</code> if the string is not a valid integer, in the following fashion (as pointed out by all answers):</p>\n\n<pre><code>static boolean isInt(String s)\n{\n try\n  { int i = Integer.parseInt(s); return true; }\n\n catch(NumberFormatException er)\n  { return false; }\n}\n</code></pre>\n\n<p>However, note here that if the evaluated integer overflows, the same exception will be thrown. Your purpose was to find out whether or not, it was a valid integer. So its safer to make your own method to check for validity:</p>\n\n<pre><code>static boolean isInt(String s)  // assuming integer is in decimal number system\n{\n for(int a=0;a&lt;s.length();a++)\n {\n    if(a==0 &amp;&amp; s.charAt(a) == '-') continue;\n    if( !Character.isDigit(s.charAt(a)) ) return false;\n }\n return true;\n}\n</code></pre>\n", "title": "Determine if a String is an Integer in Java", "tags": ["java", "string", "int"], "link": "http://stackoverflow.com/questions/5439529/determine-if-a-string-is-an-integer-in-java/9991624#9991624", "post_type": "answer", "question_id": 5439529, "answer_id": 9991624}, {"body": "<p>Or simply</p>\n\n<p><code>mystring.matches(\"\\\\d+\")</code></p>\n\n<p>though it would return true for numbers larger than an int</p>\n", "title": "Determine if a String is an Integer in Java", "tags": ["java", "string", "int"], "link": "http://stackoverflow.com/questions/5439529/determine-if-a-string-is-an-integer-in-java/15357940#15357940", "post_type": "answer", "question_id": 5439529, "answer_id": 15357940}, {"body": "<p>As soon as you call <code>contains</code>, <code>containsAll</code>, <code>equals</code>, <code>hashCode</code>, <code>remove</code>, <code>retainAll</code>, <code>size</code> or <code>toArray</code>, you'd have to traverse the elements anyway.</p>\n\n<p>If you're occasionally only calling methods such as <code>isEmpty</code> or <code>clear</code> I suppose you'd be better of by creating the collection lazily. You could for instance have a backing <code>ArrayList</code> for storing previously iterated elements.</p>\n\n<p>I don't know of any such class in any library, but it should be a fairly simple exercise to write up.</p>\n", "title": "Easy way to change Iterable into Collection", "tags": ["java", "collections"], "link": "http://stackoverflow.com/questions/6416706/easy-way-to-change-iterable-into-collection/6416788#6416788", "post_type": "answer", "question_id": 6416706, "answer_id": 6416788}, {"body": "<p>With <a href=\"https://github.com/google/guava\">Guava</a> you can use <a href=\"https://google.github.io/guava/releases/18.0/api/docs/com/google/common/collect/Lists.html#newArrayList%28java.lang.Iterable%29\">Lists.newArrayList(Iterable)</a> or <a href=\"https://google.github.io/guava/releases/18.0/api/docs/com/google/common/collect/Sets.html#newHashSet%28java.lang.Iterable%29\">Sets.newHashSet(Iterable)</a>, among other similar methods. This will of course copy all the elements in to memory. If that isn't acceptable, I think your code that works with these ought to take <code>Iterable</code> rather than <code>Collection</code>. Guava also happens to provide convenient methods for doing things you can do on a <code>Collection</code> using an <code>Iterable</code> (such as <code>Iterables.isEmpty(Iterable)</code> or <code>Iterables.contains(Iterable, Object)</code>), but the performance implications are more obvious.</p>\n", "title": "Easy way to change Iterable into Collection", "tags": ["java", "collections"], "link": "http://stackoverflow.com/questions/6416706/easy-way-to-change-iterable-into-collection/6416800#6416800", "post_type": "answer", "question_id": 6416706, "answer_id": 6416800}]}