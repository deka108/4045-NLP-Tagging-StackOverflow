{"items": [{"body": "<p>I was reading Java's <code>ArrayList</code> source code and noticed some comparisons in if-statements.</p>\n\n<p>In Java 7, the method <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/util/ArrayList.java#ArrayList.grow%28int%29\"><code>grow(int)</code></a> uses</p>\n\n<pre><code>if (newCapacity - minCapacity &lt; 0)\n    newCapacity = minCapacity;\n</code></pre>\n\n<p>In Java 6, <code>grow</code> didn't exist. The method <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b27/java/util/ArrayList.java#ArrayList.ensureCapacity%28int%29\"><code>ensureCapacity(int)</code></a> however uses</p>\n\n<pre><code>if (newCapacity &lt; minCapacity)\n    newCapacity = minCapacity;\n</code></pre>\n\n<p>What was the reason behind the change? Was it a performance issue or just a style? </p>\n\n<p>I could imagine that comparing against zero is faster, but performing a complete subtraction just to check whether it's negative seems a bit overkill to me. Also in terms of bytecode, this would involve two instructions (<code>ISUB</code> and <code>IF_ICMPGE</code>) instead of one (<code>IFGE</code>).</p>\n", "title": "Difference between if (a - b &lt; 0) and if (a &lt; b)", "tags": ["java", "if-statement", "arraylist"], "link": "http://stackoverflow.com/questions/33147339/difference-between-if-a-b-0-and-if-a-b", "post_type": "question", "question_id": 33147339}, {"body": "<p>I'm trying to get the exact JSON that is being sent in the request. Here is my code:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>OkHttpClient client = new OkHttpClient();\nclient.interceptors().add(new Interceptor(){\n   @Override public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {\n      Request request = chain.request();\n      Log.e(String.format(\"\\nrequest:\\n%s\\nheaders:\\n%s\",\n                          request.body().toString(), request.headers()));\n      com.squareup.okhttp.Response response = chain.proceed(request);\n      return response;\n   }\n});\nRetrofit retrofit = new Retrofit.Builder()\n   .baseUrl(API_URL)\n   .addConverterFactory(GsonConverterFactory.create())\n   .client(client).build();\n</code></pre>\n\n<p>But I only see this in the logs:</p>\n\n<pre><code>request:\ncom.squareup.okhttp.RequestBody$1@3ff4074d\nheaders:\nContent-Type: application/vnd.ll.event.list+json\n</code></pre>\n\n<p>How am I supposed to do proper logging, given the removal of <code>setLog()</code> and <code>setLogLevel()</code> which we used to use with Retrofit 1?</p>\n", "title": "Logging with Retrofit 2", "tags": ["java", "retrofit", "retrofit2", "okhttp3"], "link": "http://stackoverflow.com/questions/32514410/logging-with-retrofit-2", "post_type": "question", "question_id": 32514410}, {"body": "<p><code>a &lt; b</code> and <code>a - b &lt; 0</code> can mean two different things. Consider the following code:</p>\n\n<pre><code>int a = Integer.MAX_VALUE;\nint b = Integer.MIN_VALUE;\nif (a &lt; b) {\n    System.out.println(\"a &lt; b\");\n}\nif (a - b &lt; 0) {\n    System.out.println(\"a - b &lt; 0\");\n}\n</code></pre>\n\n<p>When run, this will only print <code>a - b &lt; 0</code>. What happens is that <code>a &lt; b</code> is clearly false, but <code>a - b</code> overflows and becomes <code>-1</code>, which is negative.</p>\n\n<p>Now, having said that, consider that the array has a length that is really close to <code>Integer.MAX_VALUE</code>. The code in <code>ArrayList</code> goes like this:</p>\n\n<pre><code>int oldCapacity = elementData.length;\nint newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);\nif (newCapacity - minCapacity &lt; 0)\n    newCapacity = minCapacity;\nif (newCapacity - MAX_ARRAY_SIZE &gt; 0)\n    newCapacity = hugeCapacity(minCapacity);\n</code></pre>\n\n<p><code>oldCapacity</code> is really close to <code>Integer.MAX_VALUE</code> so <code>newCapacity</code> (which is <code>oldCapacity + 0.5 * oldCapacity</code>) might overflow and become <code>Integer.MIN_VALUE</code> (i.e. negative). Then, subtracting <code>minCapacity</code> <em>underflows</em> back into a positive number.</p>\n\n<p>This check ensures that the <code>if</code> is not executed. If the code were written as <code>if (newCapacity &lt; minCapacity)</code>, it would be <code>true</code> in this case (since <code>newCapacity</code> is negative) so the <code>newCapacity</code> would be forced to <code>minCapacity</code> regardless of the <code>oldCapacity</code>.</p>\n\n<p>This overflow case is handled by the next if. When <code>newCapacity</code> has overflowed, this will be <code>true</code>: <code>MAX_ARRAY_SIZE</code> is defined as <code>Integer.MAX_VALUE - 8</code> and <code>Integer.MIN_VALUE - (Integer.MAX_VALUE - 8) &gt; 0</code> is <code>true</code>. The <code>newCapacity</code> is therefore rightly handled: <code>hugeCapacity</code> method returns <code>MAX_ARRAY_SIZE</code> or <code>Integer.MAX_VALUE</code>.</p>\n\n<p>NB: this is what the <code>// overflow-conscious code</code> comment in this method is saying.</p>\n", "title": "Difference between if (a - b &lt; 0) and if (a &lt; b)", "tags": ["java", "if-statement", "arraylist"], "link": "http://stackoverflow.com/questions/33147339/difference-between-if-a-b-0-and-if-a-b/33147610#33147610", "post_type": "answer", "question_id": 33147339, "answer_id": 33147610}, {"body": "<p>Looking at the code:</p>\n\n<pre><code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);\n</code></pre>\n\n<p>If <code>oldCapacity</code> is quite large, this will overflow, and <code>newCapacity</code> will be a negative number. A comparison like <code>newCapacity &lt; oldCapacity</code> will incorrectly evaluate <code>true</code> and the <code>ArrayList</code> will fail to grow.</p>\n\n<p>Instead, the code as written (<code>newCapacity - minCapacity &lt; 0</code> returns false) will allow the negative value of <code>newCapacity</code> to be further evaluated in the next line, resulting in recalculating <code>newCapacity</code> by invoking <code>hugeCapacity</code> (<code>newCapacity = hugeCapacity(minCapacity);</code>) to allow for the <code>ArrayList</code> to grow up to <code>MAX_ARRAY_SIZE</code>.</p>\n\n<p>This is what the <code>// overflow-conscious code</code> comment is trying to communicate, though rather obliquely.</p>\n\n<p>So, bottom line, the new comparison protects against allocating an <code>ArrayList</code> larger than the predefined <code>MAX_ARRAY_SIZE</code> while allowing it to grow right up to that limit if needed.</p>\n", "title": "Difference between if (a - b &lt; 0) and if (a &lt; b)", "tags": ["java", "if-statement", "arraylist"], "link": "http://stackoverflow.com/questions/33147339/difference-between-if-a-b-0-and-if-a-b/33148103#33148103", "post_type": "answer", "question_id": 33147339, "answer_id": 33148103}, {"body": "<p>I don't know if setLogLevel() will return in the final 2.0 version of Retrofit but for now you can use an interceptor for logging.</p>\n\n<p>A good example can found in OkHttp wiki: <a href=\"https://github.com/square/okhttp/wiki/Interceptors\" rel=\"nofollow\">https://github.com/square/okhttp/wiki/Interceptors</a></p>\n\n<pre><code>OkHttpClient client = new OkHttpClient();\nclient.interceptors().add(new LoggingInterceptor());\n\nRetrofit retrofit = new Retrofit.Builder()\n        .baseUrl(\"http://www.yourjsonapi.com\")\n        .addConverterFactory(GsonConverterFactory.create())\n        .client(client)\n        .build();\n</code></pre>\n", "title": "Logging with Retrofit 2", "tags": ["java", "retrofit", "retrofit2", "okhttp3"], "link": "http://stackoverflow.com/questions/32514410/logging-with-retrofit-2/32597816#32597816", "post_type": "answer", "question_id": 32514410, "answer_id": 32597816}]}