{"items": [{"body": "<p>What is the maximum number of parameters that a method in Java can have and why?</p>\n\n<p>I am using Java 1.8 on a 64-bit Windows system.</p>\n\n<p>All the answers on StackOverflow about this say that the technical limit is 255 parameters without specifying why.</p>\n\n<p>To be precise, 255 for static and 254 for non-static (<code>this</code> will be the 255th in this case) methods.</p>\n\n<p>I thought this could be specified in some sort of specification and that this was simply a statically defined maximum number of parameters allowed. But this was only valid for <strong><code>int</code> and all 4-bytes types</strong>.\nI did some tests with <code>long</code> parameters, and I was only able to declare 127 parameters in that case.</p>\n\n<p>With <code>String</code> parameters, the allowed number i deduced from testing is 255 (it may be because the reference size is 4 bytes in Java?).</p>\n\n<p>But since I am using a 64-bit system, references size should be 8 bytes wide and so with <code>String</code> parameters the maximum allowed number should be 127, similar to <code>long</code> types.</p>\n\n<p>How does this limit is exactly applied? </p>\n\n<p>Does the limit have anything to do with the <strong>stack size</strong> of the method?</p>\n\n<p>Note: I am not really going to use these many parameters in any method, but this question is only to clarify the exact behavior.</p>\n", "title": "Maximum number of parameters in Java method declaration", "tags": ["java", "jvm"], "link": "http://stackoverflow.com/questions/30581531/maximum-number-of-parameters-in-java-method-declaration", "post_type": "question", "question_id": 30581531}, {"body": "<p>I have a class defined as follows:</p>\n\n<pre><code>public class Person {\n  private String name;\n\n  // constructor and getter/setter omitted\n}\n</code></pre>\n\n<p>I tried to print an instance of my class:</p>\n\n<pre><code>System.out.println(myPerson);\n</code></pre>\n\n<p>but I got the following output: <code>com.foo.Person@2f92e0f4</code>.  A similar thing happened when I tried to print an array of <code>Person</code> objects:</p>\n\n<pre><code>Person[] people = //...\nSystem.out.println(people); \n</code></pre>\n\n<p>I got the output: <code>[Lcom.foo.Person;@28a418fc</code></p>\n\n<p>What does this output mean? How do I change this output so it contains the name of my person? And how do I print collections of my objects?</p>\n\n<p><sub><strong>Note</strong>: this is intended as a canonical Q&amp;A about this subject.</sub></p>\n", "title": "How do I print my Java object without getting &quot;SomeType@2f92e0f4&quot;?", "tags": ["java", "string", "object", "tostring"], "link": "http://stackoverflow.com/questions/29140402/how-do-i-print-my-java-object-without-getting-sometype2f92e0f4", "post_type": "question", "question_id": 29140402}, {"body": "<p>I have a set \u2013 a HashSet I want to remove some items from it\u2026 none of the items in the \"removals\" collection will be in the original set. </p>\n\n<p>I specify the size of the \"source\" set and the size of the \"removals\" collection on the command line, and build both of them. The source set contains only non-negative integers; the removals set contains only negative integers. \nI measure how long it takes to remove all the elements using System.currentTimeMillis(), which isn\u2019t the world most accurate stopwatch but is more than adequate in this case, as you\u2019ll see. Here\u2019s the code:</p>\n\n<pre><code>import java.util.*;\npublic class Test \n{ \n public static void main(String[] args) \n { \n    int sourceSize = Integer.parseInt(args[0]); \n    int removalsSize = Integer.parseInt(args[1]); \n\n    Set&lt;Integer&gt; source = new HashSet&lt;Integer&gt;(); \n    Collection&lt;Integer&gt; removals = new ArrayList&lt;Integer&gt;(); \n\n    for (int i = 0; i &lt; sourceSize; i++) \n    { \n        source.add(i); \n    } \n    for (int i = 1; i &lt;= removalsSize; i++) \n    { \n        removals.add(-i); \n    } \n\n    long start = System.currentTimeMillis(); \n    source.removeAll(removals); \n    long end = System.currentTimeMillis(); \n    System.out.println(\"Time taken: \" + (end \u2013 start) + \"ms\"); \n} \n }\n</code></pre>\n\n<p>Let\u2019s start off by giving it an easy job: <strong>a source set of 100 items, and 100 to remove:</strong></p>\n\n<pre><code> c:UsersJonTest&gt;java Test 100 100\n Time taken: 1ms\n</code></pre>\n\n<p>Okay, That's fast as I expected. </p>\n\n<p>Next i tried source of one million items and 300,000 items to remove?</p>\n\n<pre><code>c:UsersJonTest&gt;java Test 1000000 300000\nTime taken: 38ms\n</code></pre>\n\n<p>That still seems pretty speedy.\n  Now make it a bit easier \u2013 300,000 source items and 300,000 removals:</p>\n\n<pre><code>c:UsersJonTest&gt;java Test 300000 300000\nTime taken: 178131ms\n</code></pre>\n\n<p><strong>Nearly three minutes?</strong> </p>\n\n<p>Really confused !! can some one explain why this is happening.</p>\n", "title": "HashSet removeAll method is surprisingly slow", "tags": ["java", "performance", "hashset"], "link": "http://stackoverflow.com/questions/28671903/hashset-removeall-method-is-surprisingly-slow", "post_type": "question", "question_id": 28671903}, {"body": "<p>Are enum names interned in Java?</p>\n\n<p>I.e. is it guaranteed that <code>enum1.name() == enum2.name()</code> in case of the same name? And is it safe to compare <code>enum.name()</code> to a String that is guaranteed to be interned.</p>\n", "title": "Are enum names interned in Java?", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/27908213/are-enum-names-interned-in-java", "post_type": "question", "question_id": 27908213}, {"body": "<p>I'm looking at a piece of Java code right now, and it takes a path as a String and gets its URL using <code>URL resource = ClassLoader.getSystemClassLoader().getResource(pathAsString);</code>, then calls <code>String path = resource.getPath()</code> and finally executes <code>new File(path);</code>. </p>\n\n<p>Oh, and there are also calls to <code>URL url = resource.toURI();</code> and <code>String file = resource.getFile()</code>.</p>\n\n<p>I'm totally confused right now - mostly because of the terminology, I guess. Can someone please walk me through the differences, or provide a few links to Dummy-proof material? Especially URI to URL and <em>Resource to File</em>? To me, it feels like they should be the same thing, respectively...</p>\n\n<p>The difference between <strong><code>getFile()</code></strong> and <strong><code>getPath()</code></strong> is explained here: <a href=\"http://stackoverflow.com/a/11928221/2018047\">What's the difference between url.getFile() and getpath()?</a> (Interestingly they both seem to return Strings, which probably adds a whole lot to my state of mind...)</p>\n\n<p>Now, if I have a locator that references a class or package in a jar file, will those two (i.e. path an file strings) differ?</p>\n\n<p><code>resource.toString()</code> would give you <code>jar:file:/C:/path/to/my.jar!/com/example/</code>, after all (note the exclamation mark).</p>\n\n<p>Is the difference between <strong>URI</strong> and <strong>URL</strong> <em>in Java</em> that the former doesn't encode spaces? Cf. <a href=\"http://stackoverflow.com/a/6818370/2018047\">Files, URIs, and URLs conflicting in Java</a> (This answer explains the <em>general, conceptual</em> difference between the two terms fairly well: <a href=\"http://stackoverflow.com/questions/176264/whats-the-difference-between-a-uri-and-a-url/1984225#1984225\">URIs identify and URLs locate;</a>)</p>\n\n<p>Lastly - and most importantly - <strong>why do I need <code>File</code> object; why isn't a Resource (<code>URL</code>) enough?</strong> (And is there a Resource object?)</p>\n\n<p>Sorry if this question is a bit unorganized; it just reflects the confusion I have... :)</p>\n", "title": "What&#39;s the difference between a Resource, URI, URL, Path and File in Java?", "tags": ["java", "url", "terminology"], "link": "http://stackoverflow.com/questions/27845223/whats-the-difference-between-a-resource-uri-url-path-and-file-in-java", "post_type": "question", "question_id": 27845223}, {"body": "<p>Why doesn't infinity comparison follow the logic applied to NaNs? This code prints out <code>false</code> three times:</p>\n\n<pre><code>double a = Double.NaN;\ndouble b = Double.NaN;\nSystem.out.println(a == b); // false\nSystem.out.println(a &lt; b); //  false\nSystem.out.println(a &gt; b); //  false\n</code></pre>\n\n<p>However, if I change <code>Double.NaN</code> to <code>Double.POSITIVE_INFINITY</code>, I get <code>true</code> for equality, but <code>false</code> for the greater-than and less-than comparisons:</p>\n\n<pre><code>double a = Double.POSITIVE_INFINITY;\ndouble b = Double.POSITIVE_INFINITY;\nSystem.out.println(a == b); // true\nSystem.out.println(a &lt; b); //  false\nSystem.out.println(a &gt; b); //  false\n</code></pre>\n\n<p>This seems dangerous. Assuming that infinite values result from overflows, I imagine it's more likely that two variables that ended up as infinities wouldn't actually be equal in perfect arithmetic.</p>\n", "title": "Why are floating point infinities, unlike NaNs, equal?", "tags": ["java", "floating-point", "comparison", "nan", "infinity"], "link": "http://stackoverflow.com/questions/28584669/why-are-floating-point-infinities-unlike-nans-equal", "post_type": "question", "question_id": 28584669}, {"body": "<p>Some time ago, <a href=\"http://blog.jooq.org/2014/02/28/java-8-friday-goodies-easy-as-pie-local-caching\">I've blogged about a Java 8 functional way of calculating fibonacci numbers recursively</a>, with a <code>ConcurrentHashMap</code> cache and the new, useful <code>computeIfAbsent()</code> method:</p>\n\n<pre><code>import java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class Test {\n    static Map&lt;Integer, Integer&gt; cache = new ConcurrentHashMap&lt;&gt;();\n\n    public static void main(String[] args) {\n        System.out.println(\n            \"f(\" + 8 + \") = \" + fibonacci(8));\n    }\n\n    static int fibonacci(int i) {\n        if (i == 0)\n            return i;\n\n        if (i == 1)\n            return 1;\n\n        return cache.computeIfAbsent(i, (key) -&gt; {\n            System.out.println(\n                \"Slow calculation of \" + key);\n\n            return fibonacci(i - 2) + fibonacci(i - 1);\n        });\n    }\n}\n</code></pre>\n\n<p>I chose <code>ConcurrentHashMap</code> because I was thinking of making this example even more sophisticated by introducing parallelism (which I didn't in the end).</p>\n\n<p>Now, let's increase the number from <code>8</code> to <code>25</code> and observe what happens:</p>\n\n<pre><code>        System.out.println(\n            \"f(\" + 25 + \") = \" + fibonacci(25));\n</code></pre>\n\n<p>The program never halts. Inside the method, there's a loop that just runs forever:</p>\n\n<pre><code>for (Node&lt;K,V&gt;[] tab = table;;) {\n    // ...\n}\n</code></pre>\n\n<p>I'm using:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>C:\\Users\\Lukas&gt;java -version\njava version \"1.8.0_40-ea\"\nJava(TM) SE Runtime Environment (build 1.8.0_40-ea-b23)\nJava HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)\n</code></pre>\n\n<p><a href=\"http://blog.jooq.org/2014/02/28/java-8-friday-goodies-easy-as-pie-local-caching/#comment-121821\">Matthias, a reader of that blog post also confirmed the issue (he actually found it)</a>.</p>\n\n<p>This is weird. I would have expected any of the following two:</p>\n\n<ul>\n<li>It works</li>\n<li>It throws a <code>ConcurrentModificationException</code></li>\n</ul>\n\n<p>But just never halting? That seems dangerous. Is it a bug? Or did I misunderstand some contract?</p>\n", "title": "Recursive ConcurrentHashMap.computeIfAbsent() call never terminates. Bug or &quot;feature&quot;?", "tags": ["java", "recursion", "java-8", "concurrenthashmap"], "link": "http://stackoverflow.com/questions/28840047/recursive-concurrenthashmap-computeifabsent-call-never-terminates-bug-or-fea", "post_type": "question", "question_id": 28840047}, {"body": "<p>I'm wondering what the best way is in Java 8 to work with all the values of an enum. Specifically when you need to get all the values and add it to somewhere, for example, supposing that we have the following enum:</p>\n\n<pre><code>public enum Letter {\n A, B, C, D;\n}\n</code></pre>\n\n<p>I could of course do the following:</p>\n\n<pre><code>for (Letter l : Letter.values()) {\n    foo(l);\n}\n</code></pre>\n\n<p>But, I could also add the following method to the enum definition:</p>\n\n<pre><code>public static Stream&lt;Letter&gt; stream() {\n    return Arrays.stream(Letter.values());\n}\n</code></pre>\n\n<p>And then replace the for from above with:</p>\n\n<pre><code>Letter.stream().forEach(l -&gt; foo(l));\n</code></pre>\n\n<p>Is this approach OK or does it have some fault in design or performance? Moreover, why don't enums have a stream() method?</p>\n", "title": "Java 8 way to work with an enum", "tags": ["java", "design", "enums", "java-8"], "link": "http://stackoverflow.com/questions/29922296/java-8-way-to-work-with-an-enum", "post_type": "question", "question_id": 29922296}, {"body": "<p>Running the following stream example in Java8:</p>\n\n<pre><code>    System.out.println(Stream\n        .of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n        .reduce(\"\", (s1, s2) -&gt; s1 + \"/\" + s2)\n    );\n</code></pre>\n\n<p>yields:</p>\n\n<pre><code>/a/b/c/d/e/f\n</code></pre>\n\n<p>Which is - of course - no surprise.\nDue to <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?overview-summary.html\">http://docs.oracle.com/javase/8/docs/api/index.html?overview-summary.html</a> it shouldn't matter whether the stream is executed sequentially or parallel: </p>\n\n<blockquote>\n  <p>Except for operations identified as explicitly nondeterministic, such as findAny(), whether a stream executes sequentially or in parallel should not change the result of the computation. </p>\n</blockquote>\n\n<p>AFAIK <code>reduce()</code> is deterministic and <code>(s1, s2) -&gt; s1 + \"/\" + s2</code> is associative, so that adding <code>parallel()</code> should yield the same result:</p>\n\n<pre><code>    System.out.println(Stream\n            .of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n            .parallel()\n            .reduce(\"\", (s1, s2) -&gt; s1 + \"/\" + s2)\n    );\n</code></pre>\n\n<p>However the result on my machine is:</p>\n\n<pre><code>/a//b//c//d//e//f\n</code></pre>\n\n<p>What's wrong here?</p>\n\n<p>BTW: using (the preferred) <code>.collect(Collectors.joining(\"/\"))</code> instead of <code>reduce(...)</code> yields the same result <code>a/b/c/d/e/f</code> for sequential and parallel execution.</p>\n\n<p>JVM details:</p>\n\n<pre><code>java.specification.version: 1.8\njava.version: 1.8.0_31\njava.vm.version: 25.31-b07\njava.runtime.version: 1.8.0_31-b13\n</code></pre>\n", "title": "Java8 streams sequential and parallel execution produce different results?", "tags": ["java", "lambda", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/28724850/java8-streams-sequential-and-parallel-execution-produce-different-results", "post_type": "question", "question_id": 28724850}, {"body": "<h1>The problem</h1>\n\n<p>I would like to be able to override my apps resources such as R.colour.brand_colour or R.drawable.ic_action_start at runtime.  My application connects to a CMS system that will provide branding colours and images.  Once the app has downloaded the CMS data it needs to be able to re-skin itself.</p>\n\n<p>I know what you are about to say - overriding resources at runtime is not possible.</p>\n\n<p>Except that it kinda is.  In particular I have found this <a href=\"http://comserv.cs.ut.ee/forms/ati_report/downloader.php?file=FE07EAE132DBEEBE7231CEFB0E0200EA2E6E508E\">Bachelor Thesis</a> from 2012 which explains the basic concept - The Activity class in android extends <code>ContextWrapper</code>, which contains the attachBaseContext method.  You can override attachBaseContext to wrap the Context with your own custom class which overrides methods such as getColor and getDrawable.  Your own implementation of getColor could look the colour up however it wanted.  The <a href=\"https://github.com/chrisjenx/Calligraphy\">Calligraphy library</a> uses a similar approach to inject a custom LayoutInflator which can deal with loading custom fonts.</p>\n\n<h1>The code</h1>\n\n<p>I have created a simple Activity which uses this approach to override the loading of a colour.</p>\n\n<pre><code>public class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    @Override\n    protected void attachBaseContext(Context newBase) {\n        super.attachBaseContext(new CmsThemeContextWrapper(newBase));\n    }\n\n    private class CmsThemeContextWrapper extends ContextWrapper{\n\n        private Resources resources;\n\n        public CmsThemeContextWrapper(Context base) {\n            super(base);\n            resources = new Resources(base.getAssets(), base.getResources().getDisplayMetrics(), base.getResources().getConfiguration()){\n                @Override\n                public void getValue(int id, TypedValue outValue, boolean resolveRefs) throws NotFoundException {\n                    Log.i(\"ThemeTest\", \"Getting value for resource \" + getResourceName(id));\n                    super.getValue(id, outValue, resolveRefs);\n                    if(id == R.color.theme_colour){\n                        outValue.data = Color.GREEN;\n                    }\n                }\n\n                @Override\n                public int getColor(int id) throws NotFoundException {\n                    Log.i(\"ThemeTest\", \"Getting colour for resource \" + getResourceName(id));\n                    if(id == R.color.theme_colour){\n                        return Color.GREEN;\n                    }\n                    else{\n                        return super.getColor(id);\n                    }\n                }\n            };\n        }\n\n        @Override\n        public Resources getResources() {\n            return resources;\n        }\n    }\n}\n</code></pre>\n\n<p>The problem is, it doesn't work!  The logging shows calls to load resources such as layout/activity_main and mipmap/ic_launcher however color/theme_colour is never loaded.  It seems that the context is being used to create the window and action bar, but not the activity's content view. </p>\n\n<p>My questions is - <strong>Where does the layout inflator load resources from, if not the activities context?</strong>  I would also like to know - <strong>Is there a workable way to override the loading of colours and drawables at runtime?</strong></p>\n\n<h1>A word about alternative approaches</h1>\n\n<p>I know its possible to theme an app from CMS data other ways - for example we could create a method <code>getCMSColour(String key)</code> then inside our <code>onCreate()</code> we have a bunch of code along the lines of:</p>\n\n<pre><code>myTextView.setTextColour(getCMSColour(\"heading_text_colour\"))\n</code></pre>\n\n<p>A similar approach could be taken for drawables, strings, etc.  However this would result in a large amount of boilerplate code - all of which needs maintaining.  When modifying the UI it would be easy to forget to set the colour on a particular view.</p>\n\n<p>Wrapping the Context to return our own custom values is 'cleaner' and less prone to breakage.  I would like to understand why it doesn't work, before exploring alternative approaches.</p>\n", "title": "Overriding resources at runtime", "tags": ["java", "android", "android-activity"], "link": "http://stackoverflow.com/questions/30522698/overriding-resources-at-runtime", "post_type": "question", "question_id": 30522698}, {"body": "<p>The following is taken from a job interview: </p>\n\n<blockquote>\n  <p>In a given array, which contains integers, each number repeats itself\n  once except for one, which doesn't repeat. Write a function that finds\n  the number that doesn't repeat.</p>\n</blockquote>\n\n<p>I thought about using an HashSet, but it might complicate everything...</p>\n\n<p>Any ideas of a simple solution?</p>\n", "title": "How to find the only number in an array that doesn&#39;t occur twice", "tags": ["java", "arrays", "algorithm"], "link": "http://stackoverflow.com/questions/29333689/how-to-find-the-only-number-in-an-array-that-doesnt-occur-twice", "post_type": "question", "question_id": 29333689}, {"body": "<p>In the following code, a dowcast to an apparently incompatible type passes compilation:</p>\n\n<pre><code>public class Item {\n  List&lt;Item&gt; items() { return asList(new Item()); }\n  Item m = (Item) items();\n}\n</code></pre>\n\n<p><code>Item</code> and <code>List&lt;Item&gt;</code> are disparate types so the cast can never succeed. Why did the compiler allow this?</p>\n", "title": "Unexpected type safety violation", "tags": ["java", "casting"], "link": "http://stackoverflow.com/questions/27747562/unexpected-type-safety-violation", "post_type": "question", "question_id": 27747562}, {"body": "<p>I understand the use of the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Native.html\" rel=\"nofollow\"><code>@Native</code></a> annotation.</p>\n\n<blockquote>\n  <p>Indicates that a field defining a constant value may be referenced\n  from native code. The annotation may be used as a hint by tools that\n  generate native header files to determine whether a header file is\n  required, and if so, what declarations it should contain.</p>\n</blockquote>\n\n<p>However, while reading the java source code I noticed that in the class <code>Integer</code> and <code>Long</code> the <code>SIZE</code> constant is <code>@Native</code> while it is not for the Float, Byte, Double, Short and Character.</p>\n\n<p>Note that the SIZE constant represents the number of bits used to represent the actual value.</p>\n\n<pre><code>public static final int SIZE = 8;//Byte\npublic static final int SIZE = 16;//Character\npublic static final int SIZE = 16;//Short\npublic static final int SIZE = 32;//Float\n@Native public static final int SIZE = 32;//Integer\n@Native public static final int SIZE = 64;//Long\npublic static final int SIZE = 64;//Double\n</code></pre>\n\n<hr>\n\n<p><strong>Edit :</strong> I just noticed that this also applies for <code>MAX_VALUE</code> and <code>MIN_VALUE</code> of the same classes.</p>\n\n<hr>\n\n<p><strong>Edit 2 :</strong> I had spare time to do some research on this, and looking at the header files of the Long, Float etc. classes I had hope to figure out that the constants were not present in the other headers, but unfortunately they are.</p>\n\n<pre><code>static const jint SIZE = 8L;//java/lang/Byte.h\nstatic const jint SIZE = 16L;//java/lang/Character.h\nstatic const jint SIZE = 16L;//java/lang/Short.h\nstatic const jint SIZE = 32L;//java/lang/Float.h\nstatic const jint SIZE = 32L;//java/lang/Integer.h\nstatic const jint SIZE = 64L;//java/lang/Double.h\nstatic const jint SIZE = 64L;//java/lang/Long.h\n</code></pre>\n\n<hr>\n\n<p><strong>Why is the SIZE constant only @Native for Integer and Long ?</strong></p>\n", "title": "Why is the SIZE constant only @Native for Integer and Long?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/28770822/why-is-the-size-constant-only-native-for-integer-and-long", "post_type": "question", "question_id": 28770822}, {"body": "<p>I used to define a set of related constants like <code>Bundle</code> keys together in an interface like below:</p>\n\n<pre><code>public interface From{\n    String LOGIN_SCREEN = \"LoginSCreen\";\n    String NOTIFICATION = \"Notification\";\n    String WIDGET = \"widget\";\n}\n</code></pre>\n\n<p>This provides me a nicer way to group related constants together and used them by making a static import (not implements). I know <code>Android</code> framework also uses the constants in same way like <code>Toast.LENTH_LONG</code>, <code>View.GONE</code>.</p>\n\n<p>However, I often feel that the <code>Java Enums</code> provide much better and powerful way to represent the constant.</p>\n\n<p>But is there a performence issue in using <code>enums</code> on <code>Android</code>?</p>\n\n<p>With a bit of research I ended up in confusion. From this question \n<a href=\"http://stackoverflow.com/questions/5143256/why-was-avoid-enums-where-you-only-need-ints-removed-from-androids-performanc\">\"Avoid Enums Where You Only Need Ints\u201d removed from Android's performance tips?</a> it's clear that <code>Google</code> has removed <em>\"Avoid enums\"</em> from its performance tips, but from it's official training docs <a href=\"http://developer.android.com/training/articles/memory.html#Overhead\">Be aware of memory overhead</a> section it clearly says: <em>\"Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.\"</em> Is this still holds good? (say in <code>Java</code> versions after 1.6)</p>\n\n<p>One more issue that I observed is to send <code>enums</code> across <code>intents</code> using <code>Bundle</code> I should send them by serializing (i.e <code>putSerializable()</code>, that I think an expensive operation compared to primitive <code>putString()</code> method, eventhough <code>enums</code> provides it for free).</p>\n\n<p>Can someone please clarify which one is the best way to represent the same in <code>Android</code>? Should I strictly avoid using <code>enums</code> on <code>Android</code>?</p>\n", "title": "Should I strictly avoid using enums on Android?", "tags": ["java", "android", "enums"], "link": "http://stackoverflow.com/questions/29183904/should-i-strictly-avoid-using-enums-on-android", "post_type": "question", "question_id": 29183904}, {"body": "<p>I've been working with the new <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\">Optional type in Java 8</a>, and I've come across what seems like a common operation that isn't supported functionally: an \"orElseOptional\"</p>\n\n<p>Consider the following pattern:</p>\n\n<pre><code>Optional&lt;Result&gt; resultFromServiceA = serviceA(args);\nif (resultFromServiceA.isPresent) return result;\nelse {\n    Optional&lt;Result&gt; resultFromServiceB = serviceB(args);\n    if (resultFromServiceB.isPresent) return resultFromServiceB;\n    else return serviceC(args);\n}\n</code></pre>\n\n<p>There are many forms of this pattern, but it boils down to wanting an \"orElse\" on an optional that takes a function producing a new optional, called only if the current one does not exist.</p>\n\n<p>It's implementation would look like this:</p>\n\n<pre><code>public Optional&lt;T&gt; orElse(Supplier&lt;Optional&lt;? extends T&gt;&gt; otherSupplier) {\n    return value != null ? this : other.get();\n}\n</code></pre>\n\n<p>I'm curious if there's a reason such a method doesn't exist, if I'm just using Optional in an unintended way, and what other ways people have come up with to deal with this case.</p>\n\n<p>I should say that I think that solutions involving custom utility classes/methods aren't elegant because people working with my code won't necessarily know they exist.</p>\n\n<p>Also, if anyone knows, will such a method be included in JDK 9, and where might I propose such a method? This seems like a pretty glaring omission to the API to me.</p>\n", "title": "Java 8 Optional orElse optional", "tags": ["java", "lambda", "java-8", "optional", "java-9"], "link": "http://stackoverflow.com/questions/28818506/java-8-optional-orelse-optional", "post_type": "question", "question_id": 28818506}, {"body": "<pre><code>import java.math.BigDecimal;\nimport java.math.RoundingMode;\n\npublic class BigDecimalTest {\n\n  public static void main (String[] args) {\n\n    // 4.88...e+888 (1817 digits)\n    BigDecimal x = new BigDecimal(\"4.8832420563130171734733855852454330503023811919919497272520875234748556667894678622576481754268427107559208829679871295885797242917923401597269406065677191699322289667695163278484184288979073748578074654323955355081326227413484377691676742424283166095829482224974429868654315166151274143385980609237680132582337344627820946638217515894542788180511625488217105374918015830882194114839900966043221545533114607439892553114356192220778082796185122942407317178325055570254731781136589172583464356709469398354084238614163644229733602505332671951571644165960364672255033809137641462904872690406789293887232669588297154237004709334039097468524122773548736567569610163195984254280720739773383424940292419418795538600322135358425131164741597944425501875163782825762694824406500718290697914964822219714335320528259344719705157913218736206355811213275685167080292570345461898557739737178480700932922510537942188898832900701474604169230215866582286672118698263686941093382945779882215421032414999405126831495224267159359035083987132591639397950272617333366716471522059176764287433877865132652162238979110053714139119937420203828830308427979430335027147927304099711225033972679405835031675622271744826476172494554124259735452592820489036311645033355738586053207859638698142614469753279404304130088308403735928520706825401977138623732336487326694527108332032932321484204820451539099031068139840323111890984119271864483907126875945501867099986131423579718697889448836497435592993168391953327829695391643033262276364164246663414855044991442223872210174626308430613254236633497864858897399515832571171741522071020097519091890029843359547212185712419638040776450730043492270253991396124987467648536016180816769990203447616590740625203442076233929983869509074724986395815800482885710533831896927860285993286232937744729344906236207008084e+888\");\n    BigDecimal y = new BigDecimal(\"7.11510949782866099699296193137700951609335763543887012748548458182417747578081585833524887774072570691956766860384875364912060891737185872746005419263400444156198098581226885923291670353816772414798224148927688218647602446762953730527741703572368727049379249227044080281137229152770971832240631944592537904743732558993126e+302\");\n    BigDecimal z = x.divide(y, 0, RoundingMode.HALF_UP);\n\n    System.out.println(\"x: \" + x.toString());\n    System.out.println();\n    System.out.println(\"y: \" + y.toString());\n    System.out.println();\n    System.out.println(\"z: \" + z.toString());\n  }\n}\n</code></pre>\n\n<p>Compile</p>\n\n<pre><code>&gt;javac BigDecimalTest.java\n</code></pre>\n\n<p>Execute</p>\n\n<pre><code> &gt;java BigDecimalTest\n</code></pre>\n\n<p>Output</p>\n\n<pre><code>x: 625054983208066198204593354911415430438704792574969565088267203004781525349051886368978966454635866976757873019902352587338204709349419540445048397640668053751325307746498089964597558898932143981799355575346628545040975710892600034453462303030824526026617372479672702318775234126736309035340551798242305697053918011236108116969184203450147688710548806249178948798950602635292084669950732365353235782823866975230624679863759260425959459791169573662813659882560711299260566798548341409068343765881208298932278254261294646140590112068258200980117045324292667804864432756961810725182370437206902961756578170730203574233660279475700447597108771501423828064891010088908598454793225469099307839235742968560582894084123332587841678908692453688646424002096420169762493752403209194120933311549724412343492102761719612412226021289199823441354383529928770138627744900421912301539068635884552971941408134.8856600179050611289788749333661467630922532694031193377751928459953017059824923573892149119923856234431388706196397956490750352971729842937634895018670939708354823574625828791536366736979476766589326086875409807351989786090090279478781367082883474934694924763036804348502963946884054479650783337788950079302927905246137931881022596647890564269534539014810606033753362254652128419763750928651303475678198850650473651453073743837739070377816899469866500215337149978217017797004675976721899561358322045967266798653940112240121024238988798224822218203993329849451071671755903125554170025962201010130308257571374613023572917101445758904604655642902352167479118496542289087726701938867138026569109982914825090572482443761923819950022043159771189713669219385693445567010592510898703998395859012610071144546558746041294923614800026040585757943037935297161564798258664422461809370948330482806766116607140637816031325356147998234497034752\n\ny: 711510949782866099699296193137700951609335763543887012748548458182417747578081585833524887774072570691956766860384875364912060891737185872746005419263400444156198098581226885923291670353816772414798224148927688218647602446762953730527741703572368727049379249227044080281137229152770971832240631944592537.904743732558993126\n\nz: 6863200148645991450016700150728475158275817266239021182863526677885700921863906334312309256001619020949572592642200844420107346867400206096485382274175041601107978676753014927820457112641389679172479926134263590581506384223135957016211147412682886175625161361918270282067511320630977561140325469899962049739132122854543111824994613211802165652292305592183629295330885779837415870933600699791946039851356918600890315497940083093271504897016557099915008808164166772999720870505507779642391694002178573568389923682384862328430119487673749084566046514914589822168578412569408216619911686172\n</code></pre>\n\n<p>The value of <code>z.toString()</code> in the output is correct</p>\n\n<pre><code>4.883242e+888 / 7.115109e+302 = 6.863200e+585\n</code></pre>\n\n<p>as is the value of <code>y.toString()</code>, but notice that the value given for <code>x.toString()</code> is completely wrong.</p>\n\n<p>Why is this?</p>\n\n<p>Strangely, if the scale (i.e. desired decimal places) of the result of the division is changed </p>\n\n<pre><code>BigDecimal z = x.divide(y, 3, RoundingMode.HALF_UP);\n</code></pre>\n\n<p>then <code>x.toString()</code> will produce the correct value for <code>x</code>.</p>\n\n<p>Or, if the operands are swapped</p>\n\n<pre><code>BigDecimal z = y.divide(x, 0, RoundingMode.HALF_UP);\n</code></pre>\n\n<p>then <code>x.toString()</code> will also then produce the correct value.</p>\n\n<p>Or, if the exponent of <code>x</code> is changed from <code>e+888</code> to e.g. <code>e+878</code> then  <code>x.toString()</code> will be correct.</p>\n\n<p>Or, if another <code>x.toString()</code> call is added above the <code>divide</code> operation, then <em>both</em> <code>x.toString()</code> calls will produce the correct value!</p>\n\n<p>On the machine I'm testing this, Windows 7 64 bit, the behaviour is the same using java 7 and 8, both 32bit and 64 bit versions, but testing online at <a href=\"https://ideone.com/\">https://ideone.com/</a> produces different results for java 7 and java 8. </p>\n\n<p>Using java 7, the value of <code>x</code> is given correctly: <a href=\"http://ideone.com/P1sXQQ\">http://ideone.com/P1sXQQ</a>, but using java 8 its value is incorrect: <a href=\"http://ideone.com/OMAq7a\">http://ideone.com/OMAq7a</a>.</p>\n\n<p>Also, this behaviour is not unique to this particular value of <code>x</code>, as calling <code>toString</code> on other BigDecimals with more than about 1500 digits after passing them as the first operand to a <code>divide</code> operation will also produce incorrect values.</p>\n\n<p>What is the explanation for this? </p>\n\n<p>The <code>divide</code> operation seems to be mutating the value produced by subsequent <code>toString</code> calls on its operands.</p>\n\n<p>Does this happen on your platform?</p>\n\n<p><em>Edit:</em></p>\n\n<p>The issue seems to be with the java 8 runtime only, as the above program compiled with java 7 produces correct output when executed with the java 7 runtime, but incorrect output when executed with the java 8 runtime.</p>\n\n<p><em>Edit:</em></p>\n\n<p>I've tested with the early access <a href=\"https://jdk8.java.net/download.html\">jre1.8.0_60</a> and the bug does not appear, and according to Marco13's answer it was fixed in build 51. The Oracle JDK 8 product binaries are only at update 40 though so it may be some time before the fixed versions are widely used.</p>\n", "title": "Why does toString fail to produce the correct value on an immutable BigDecimal?", "tags": ["java", "bigdecimal"], "link": "http://stackoverflow.com/questions/29328785/why-does-tostring-fail-to-produce-the-correct-value-on-an-immutable-bigdecimal", "post_type": "question", "question_id": 29328785}, {"body": "<p>I am aware that it is better to call the <code>equals</code> method over using the <code>==</code> operator (see <a href=\"http://stackoverflow.com/questions/513832/how-do-i-compare-strings-in-java\">this question</a>). I want two strings to compare as equal if they are both null or if they represent the same string. Unfortunately the <code>equals</code> method will throw an <code>NPE</code> if the strings are <code>null</code>. My code is currently:</p>\n\n<pre><code>boolean equals(String s1, String s2) {\n  if (s1 == null &amp;&amp; s2 == null) {\n    return true;\n  }\n  if (s1 == null || s2 == null) {\n    return false;\n  }\n  return s1.equals(s2);\n}\n</code></pre>\n\n<p>This is inelegant. What is the correct way to perform this test?</p>\n", "title": "How to compare two Strings when both can be null?", "tags": ["java", "equals", "equality"], "link": "http://stackoverflow.com/questions/30081520/how-to-compare-two-strings-when-both-can-be-null", "post_type": "question", "question_id": 30081520}, {"body": "<p>I have the following sample code:</p>\n\n<pre><code>System.out.println(\n       \"Result: \" +\n        Stream.of(1, 2, 3)\n                .filter(i -&gt; {\n                    System.out.println(i);\n                    return true;\n                })\n                .findFirst()\n                .get()\n);\nSystem.out.println(\"-----------\");\nSystem.out.println(\n       \"Result: \" +\n        Stream.of(1, 2, 3)\n                .flatMap(i -&gt; Stream.of(i - 1, i, i + 1))\n                .flatMap(i -&gt; Stream.of(i - 1, i, i + 1))\n                .filter(i -&gt; {\n                    System.out.println(i);\n                    return true;\n                })\n                .findFirst()\n                .get()\n);\n</code></pre>\n\n<p>The output is as follows:</p>\n\n<pre><code>1\nResult: 1\n-----------\n-1\n0\n1\n0\n1\n2\n1\n2\n3\nResult: -1\n</code></pre>\n\n<p>From here I see that in first case <code>stream</code> really behaves lazily - we use <code>findFirst()</code> so once we have first element our filtering lambda is not invoked.\nHowever, in second case which uses <code>flatMaps</code> we see that despite first element which <code>fulfils</code> the filter condition is found (it's just any first element as lambda always returns true) further contents of the stream are still being fed through filtering function.</p>\n\n<p>I am trying to understand why it behaves like this rather than giving up after first element is calculated as in the first case.\nAny helpful information would be appreciated.</p>\n", "title": "Why filter() after flatMap() is &quot;not completely&quot; lazy in Java streams?", "tags": ["java", "lambda", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/29229373/why-filter-after-flatmap-is-not-completely-lazy-in-java-streams", "post_type": "question", "question_id": 29229373}, {"body": "<p>I have trouble understanding the source code of <code>Arrays.copyOf</code>.</p>\n\n<pre><code>public static &lt;T,U&gt; T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]&gt; newType) {\n    T[] copy = ((Object)newType == (Object)Object[].class)\n        ? (T[]) new Object[newLength]\n        : (T[]) Array.newInstance(newType.getComponentType(), newLength);\n    System.arraycopy(original, 0, copy, 0,\n                     Math.min(original.length, newLength));\n    return copy;\n}\n</code></pre>\n\n<ol>\n<li><p>what is this line checking?</p>\n\n<pre><code>(Object)newType == (Object)Object[].class\n</code></pre></li>\n<li><p>What are the differences between <code>(T[]) new Object[newLength]</code> and <code>(T[]) Array.newInstance(newType.getComponentType(), newLength)</code>. why <code>Array.newInstance</code> not good enough for both cases?</p></li>\n<li><p>This following line compiles, but crashes at run time (as expected). When should I use this method?</p>\n\n<pre><code>Integer[] nums = Arrays.copyOf(new String[]{\"a\", \"b\"}, 2, Integer[].class) \n</code></pre></li>\n</ol>\n", "title": "Do not understand the source code of Arrays.copyOf", "tags": ["java", "arrays", "generics"], "link": "http://stackoverflow.com/questions/29494800/do-not-understand-the-source-code-of-arrays-copyof", "post_type": "question", "question_id": 29494800}, {"body": "<p>Since <code>String</code> in Java (like other languages) consumes a lot of memory because each character consumes two bytes, Java 8 has introduced a new feature called <strong><em>String Deduplication</em></strong> which takes advantage of the fact that the char arrays are internal to strings and final, so the JVM can mess around with them.</p>\n\n<p>I have read <a href=\"https://blog.codecentric.de/en/2014/08/string-deduplication-new-feature-java-8-update-20-2/\">this example</a> so far but since I am not a pro java coder, I am having a hard time grasping the concept.</p>\n\n<p>Here is what it says,</p>\n\n<blockquote>\n  <p>Various strategies for String Duplication have been considered, but\n  the one implemented now follows the following approach: Whenever the\n  garbage collector visits String objects it takes note of the char\n  arrays. It takes their hash value and stores it alongside with a weak\n  reference to the array. As soon as it finds another String which has\n  the same hash code it compares them char by char. If they match as\n  well, one String will be modified and point to the char array of the\n  second String. The first char array then is no longer referenced\n  anymore and can be garbage collected.</p>\n  \n  <p>This whole process of course brings some overhead, but is controlled\n  by tight limits. For example if a string is not found to have\n  duplicates for a while it will be no longer checked.</p>\n</blockquote>\n\n<p><strong>My First question,</strong></p>\n\n<p>There is still a lack of resources on this topic since it is recently added in Java 8 update 20, could anyone here share some practical examples on how it help in reducing the memory consumed by <code>String</code> in Java ?</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>The above link says,</p>\n\n<blockquote>\n  <p>As soon as it finds another String which has the same hash code it\n  compares them char by char</p>\n</blockquote>\n\n<p><strong>My 2nd question,</strong></p>\n\n<p>If hash code of two <code>String</code> are same then the <code>Strings</code> are already the same, then why compare them <code>char</code> by <code>char</code> once it is found that the two <code>String</code> have same hash code ?</p>\n", "title": "String Deduplication feature of Java 8", "tags": ["java", "string", "java-8"], "link": "http://stackoverflow.com/questions/27949213/string-deduplication-feature-of-java-8", "post_type": "question", "question_id": 27949213}, {"body": "<p>I have this list (<code>List&lt;String&gt;</code>):</p>\n\n<pre><code>[\"a\", \"b\", null, \"c\", null, \"d\", \"e\"]\n</code></pre>\n\n<p>And I'd like something like this:</p>\n\n<pre><code>[[\"a\", \"b\"], [\"c\"], [\"d\", \"e\"]]\n</code></pre>\n\n<p>In other words I want to split my list in sublists using the <code>null</code> value as separator, in order to obtain a list of lists (<code>List&lt;List&lt;String&gt;&gt;</code>). I'm looking for a Java 8 solution. I've tried with <code>Collectors.partitioningBy</code> but I'm not sure it is what I'm looking for. Thanks!</p>\n", "title": "Splitting List into sublists along elements", "tags": ["java", "list", "java-8", "collectors"], "link": "http://stackoverflow.com/questions/29095967/splitting-list-into-sublists-along-elements", "post_type": "question", "question_id": 29095967}, {"body": "<p>Since this hasn\u2019t addressed yet, here an explanation, why the translation of Unicode escapes happens before any other source code processing:</p>\n\n<p>The idea behind it was that it allows lossless translations of Java source code between different character encodings. Today, there is widespread Unicode support, and this doesn\u2019t look like a problem, but back then it wasn\u2019t easy for a developer from a western country to receive some source code from his Asian colleague containing Asian characters, make some changes (including compiling and testing it) and sending the result back, all without damaging something.</p>\n\n<p>So, Java source code can be written in any encoding and allows a wide range of characters within identifiers, character and <code>String</code> literals and comments. Then, in order to transfer it losslessly, all characters not supported by the target encoding are replaced by their Unicode escapes.</p>\n\n<p>This is a reversible process and the interesting point is that the translation can be done by a tool which doesn\u2019t need to know anything about the Java source code syntax as the translation rule is not dependent on it. This works as the translation to their actual Unicode characters inside the compiler happens independently to the Java source code syntax as well. It implies that you can perform an arbitrary number of translation steps in both directions without ever changing the meaning of the source code.</p>\n\n<p>This is the reason for another weird feature which hasn\u2019t even mentioned: the <code>\\uuuuuuxxxx</code> syntax:</p>\n\n<p>When a translation tool is escaping characters and encounters a sequence that is already an escaped sequence, it should insert an additional <code>u</code> into the sequence, converting <code>\\ucafe</code> to <code>\\uucafe</code>. The meaning doesn\u2019t change, but when converting into the other direction, the tool should just remove one <code>u</code> and replace only sequences containing a single <code>u</code> by their Unicode characters. That way, even Unicode escapes are retained in their original form when converting back and forth. I guess, no-one ever used that feature\u2026</p>\n", "title": "Why is executing Java code in comments with certain Unicode characters allowed?", "tags": ["java", "unicode", "comments"], "link": "http://stackoverflow.com/questions/30727515/why-is-executing-java-code-in-comments-with-certain-unicode-characters-allowed/30739477#30739477", "post_type": "answer", "question_id": 30727515, "answer_id": 30739477}, {"body": "<p>A <code>List&lt;Item&gt;</code> could very well be an Item. See for example:</p>\n\n<pre><code>public class Foo extends Item implements List&lt;Item&gt; {\n    // implement required methods\n}\n</code></pre>\n\n<p>A cast tells the compiler: \"I know you can't be sure that this is a object of type Item, but I know better than you, so please compile\". The compiler will only refuse to compile that if it's impossible for the returned object to be an instance of Item (like, for example, <code>Integer</code> can't ever be a <code>String</code>)</p>\n\n<p>At runtime, the type of the actual object returned by the method will be checked, and if it's not actually an object of type Item, you'll get a ClassCastException.</p>\n", "title": "Unexpected type safety violation", "tags": ["java", "casting"], "link": "http://stackoverflow.com/questions/27747562/unexpected-type-safety-violation/27747702#27747702", "post_type": "answer", "question_id": 27747562, "answer_id": 27747702}, {"body": "<p>Use <code>enum</code> when you need its features. <strong>Don't avoid it <em>strictly</em></strong>.</p>\n\n<p>Java enum is more powerful, but if you don't need its features, use constants, they occupy less space and they can be primitive itself.</p>\n\n<h3>When to use enum:</h3>\n\n<ul>\n<li>type checking - you can accept <em>only</em> listed values, and they are not continuous (see below what I call <em>continuous</em> here)</li>\n<li><p>method overloading - every enum constant has its own implementation of a method<br/></p>\n\n<pre><code>public enum UnitConverter{\n    METERS{\n        @Override\n        public double toMiles(final double meters){\n            return meters * 0.00062137D;\n        }\n\n        @Override\n        public double toMeters(final double meters){\n            return meters;\n        }\n    },\n    MILES{\n        @Override\n        public double toMiles(final double miles){\n            return miles;\n        }\n\n        @Override\n        public double toMeters(final double miles){\n            return miles / 0.00062137D;\n        }\n    };\n\n    public abstract double toMiles(double unit);\n    public abstract double toMeters(double unit);\n}\n</code></pre></li>\n<li><p>more data - your one constant contains more than one information that cannot be put in one variable</p></li>\n<li>complicated data - your constant need methods to operate on the data</li>\n</ul>\n\n<h3>When <em>not</em> to use enum:</h3>\n\n<ul>\n<li>you can accept all values of one type, and your constants contain only these most used</li>\n<li><p>you can accept continuous data<br/></p>\n\n<pre><code>public class Month{\n    public static final int JANUARY = 1;\n    public static final int FEBRUARY = 2;\n    public static final int MARCH = 3;\n    ...\n\n    public static String getName(final int month){\n        if(month &lt;= 0 || month &gt; 12){\n            throw new IllegalArgumentException(\"Invalid month number: \" + month);\n        }\n\n        ...\n    }\n}\n</code></pre></li>\n<li>for names (like in your example)</li>\n<li>for everything other that really doesn't need an enum</li>\n</ul>\n\n<h3>Enum occupies more space</h3>\n\n<ul>\n<li>a single reference to an enum constant occupy <strong>4 bytes</strong></li>\n<li>every enum constant occupy space that is a <strong>sum of its fields' sizes</strong> aligned to 8 bytes + <strong>overhead of the object</strong></li>\n<li>the enum class itself occupy some space</li>\n</ul>\n\n<h3>Constant occupies less space</h3>\n\n<ul>\n<li>a constant doesn't have a reference so it's a pure data (even if it's a reference, then enum instance would be a reference to another reference)</li>\n<li>constants may be added to existing class - it's not necessary to add another class</li>\n<li>constants may be inlined; it brings extended compile-time features (such as null checking, finding dead code etc.)</li>\n</ul>\n", "title": "Should I strictly avoid using enums on Android?", "tags": ["java", "android", "enums"], "link": "http://stackoverflow.com/questions/29183904/should-i-strictly-avoid-using-enums-on-android/29972028#29972028", "post_type": "answer", "question_id": 29183904, "answer_id": 29972028}, {"body": "<p>Perhaps this is what you're after: <a href=\"http://stackoverflow.com/questions/24599996/get-value-from-one-optional-or-another\">Get value from one Optional or another</a></p>\n\n<p>Otherwise, you may want to have a look at <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElseGet-java.util.function.Supplier-\"><code>Optional.orElseGet</code></a>. Here's an example of what I <em>think</em> that you're after:</p>\n\n<pre><code>result = Optional.ofNullable(serviceA().orElseGet(\n                                 () -&gt; serviceB().orElseGet(\n                                     () -&gt; serviceC().orElse(null))));\n</code></pre>\n", "title": "Java 8 Optional orElse optional", "tags": ["java", "lambda", "java-8", "optional", "java-9"], "link": "http://stackoverflow.com/questions/28818506/java-8-optional-orelse-optional/28818627#28818627", "post_type": "answer", "question_id": 28818506, "answer_id": 28818627}, {"body": "<p>It's not pretty, but this will work:</p>\n\n<pre><code>return serviceA(args)\n  .map(Optional::of).orElseGet(() -&gt; serviceB(args))\n  .map(Optional::of).orElseGet(() -&gt; serviceC(args))\n  .map(Optional::of).orElseGet(() -&gt; serviceD(args));\n</code></pre>\n\n<p><code>.map(func).orElseGet(sup)</code> is a fairly handy pattern for use with <code>Optional</code>.  It means \"If this <code>Optional</code> contains value <code>v</code>, give me <code>func(v)</code>, otherwise give me <code>sup.get()</code>\".  </p>\n\n<p>In this case, we call <code>serviceA(args)</code> and get an <code>Optional&lt;Result&gt;</code>.  If that <code>Optional</code> contains value <code>v</code>, we want to get <code>Optional.of(v)</code>, but if it is empty, we want to get <code>serviceB(args)</code>. Rinse-repeat with more alternatives.</p>\n\n<p>Other uses of this pattern are </p>\n\n<ul>\n<li><code>.map(Stream::of).orElseGet(Stream::empty)</code></li>\n<li><code>.map(Collections::singleton).orElseGet(Collections::emptySet)</code></li>\n</ul>\n", "title": "Java 8 Optional orElse optional", "tags": ["java", "lambda", "java-8", "optional", "java-9"], "link": "http://stackoverflow.com/questions/28818506/java-8-optional-orelse-optional/28821352#28821352", "post_type": "answer", "question_id": 28818506, "answer_id": 28821352}, {"body": "<p>The cleanest \u201ctry services\u201d approach given the current API would be:</p>\n\n<pre><code>Optional&lt;Result&gt; o = Stream.&lt;Supplier&lt;Optional&lt;Result&gt;&gt;&gt;of(\n    ()-&gt;serviceA(args), \n    ()-&gt;serviceB(args), \n    ()-&gt;serviceC(args), \n    ()-&gt;serviceD(args))\n.map(Supplier::get)\n.filter(Optional::isPresent)\n.map(Optional::get)\n.findFirst();\n</code></pre>\n\n<p>The important aspect is not the (constant) chain of operations you have to write once but how easy it is to add another service (or modify the list of services is general). Here, adding or removing a single <code>()-&gt;serviceX(args)</code> is enough.</p>\n\n<p>Due to the lazy evaluation of streams, no service will be invoked if a preceding service returned a non-empty <code>Optional</code>.</p>\n", "title": "Java 8 Optional orElse optional", "tags": ["java", "lambda", "java-8", "optional", "java-9"], "link": "http://stackoverflow.com/questions/28818506/java-8-optional-orelse-optional/28833677#28833677", "post_type": "answer", "question_id": 28818506, "answer_id": 28833677}, {"body": "<p>This is looks like a good fit for pattern matching and a more traditional Option interface with Some and None implementations (such as those in <a href=\"https://github.com/javaslang/javaslang\" rel=\"nofollow\">Javaslang</a>, <a href=\"https://github.com/functionaljava/functionaljava\" rel=\"nofollow\">FunctionalJava</a>) or a lazy <a href=\"http://www.javadoc.io/doc/com.aol.simplereact/cyclops-react/1.0.0-RC3\" rel=\"nofollow\">Maybe</a> implementation in <a href=\"https://github.com/aol/cyclops-react\" rel=\"nofollow\">cyclops-react</a>.I'm the author of this library. </p>\n\n<p>With <a href=\"https://github.com/aol/cyclops-react\" rel=\"nofollow\">cyclops-react</a> you can also use structural <a href=\"http://gist.asciidoctor.org/?github-aol/simple-react//user-guide/pattern-matching.adoc\" rel=\"nofollow\">pattern matching</a> on JDK types. For Optional you can match on the present and absent cases via the <a href=\"http://gist.asciidoctor.org/?github-aol/simple-react//user-guide/visitor-pattern.adoc\" rel=\"nofollow\">visitor pattern</a>.  it would look something like this -</p>\n\n<pre><code>  import static com.aol.cyclops.Matchables.optional;\n\n  optional(serviceA(args)).visit(some -&gt; some , \n                                 () -&gt; optional(serviceB(args)).visit(some -&gt; some,\n                                                                      () -&gt; serviceC(args)));\n</code></pre>\n", "title": "Java 8 Optional orElse optional", "tags": ["java", "lambda", "java-8", "optional", "java-9"], "link": "http://stackoverflow.com/questions/28818506/java-8-optional-orelse-optional/32653133#32653133", "post_type": "answer", "question_id": 28818506, "answer_id": 32653133}, {"body": "<p>This is part of JDK 9 in the form of <code>or</code>, which takes a <code>Supplier&lt;Optional&lt;T&gt;&gt;</code>. Your example would then be:</p>\n\n<pre><code>return serviceA(args)\n    .or(() -&gt; serviceB(args))\n    .or(() -&gt; serviceC(args));\n</code></pre>\n\n<p>For details see <a href=\"http://download.java.net/java/jdk9/docs/api/java/util/Optional.html#or-java.util.function.Supplier-\" rel=\"nofollow\">the (preliminary) Javadoc</a> or <a href=\"http://blog.codefx.org/java/dev/java-9-optional/#or\" rel=\"nofollow\">this post</a> I wrote.</p>\n", "title": "Java 8 Optional orElse optional", "tags": ["java", "lambda", "java-8", "optional", "java-9"], "link": "http://stackoverflow.com/questions/28818506/java-8-optional-orelse-optional/38560612#38560612", "post_type": "answer", "question_id": 28818506, "answer_id": 38560612}, {"body": "<p>It's not so hard to track down the <em>reason</em> for the odd behavior. </p>\n\n<p>The <code>divide</code> call goes to </p>\n\n<pre><code>public BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode) {\n    return divide(divisor, scale, roundingMode.oldMode);\n}\n</code></pre>\n\n<p>This, internally, delegates to another <code>divide</code> method, based on the rounding mode:</p>\n\n<pre><code>public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) {\n    if (roundingMode &lt; ROUND_UP || roundingMode &gt; ROUND_UNNECESSARY)\n        throw new IllegalArgumentException(\"Invalid rounding mode\");\n    if (this.intCompact != INFLATED) {\n        if ((divisor.intCompact != INFLATED)) {\n            return divide(this.intCompact, this.scale, divisor.intCompact, divisor.scale, scale, roundingMode);\n        } else {\n            return divide(this.intCompact, this.scale, divisor.intVal, divisor.scale, scale, roundingMode);\n        }\n    } else {\n        if ((divisor.intCompact != INFLATED)) {\n            return divide(this.intVal, this.scale, divisor.intCompact, divisor.scale, scale, roundingMode);\n        } else {\n            return divide(this.intVal, this.scale, divisor.intVal, divisor.scale, scale, roundingMode);\n        }\n    }\n}\n</code></pre>\n\n<p>In this case, the last call applies. Note that the <code>intVal</code> (which is a <code>BigInteger</code> that is stored in the <code>BigDecimal</code>) is passed directly to this method as the first argument:</p>\n\n<pre><code>private static BigDecimal divide(BigInteger dividend, int dividendScale, BigInteger divisor, int divisorScale, int scale, int roundingMode) {\n    if (checkScale(dividend,(long)scale + divisorScale) &gt; dividendScale) {\n        int newScale = scale + divisorScale;\n        int raise = newScale - dividendScale;\n        BigInteger scaledDividend = bigMultiplyPowerTen(dividend, raise);\n        return divideAndRound(scaledDividend, divisor, scale, roundingMode, scale);\n    } else {\n        int newScale = checkScale(divisor,(long)dividendScale - scale);\n        int raise = newScale - divisorScale;\n        BigInteger scaledDivisor = bigMultiplyPowerTen(divisor, raise);\n        return divideAndRound(dividend, scaledDivisor, scale, roundingMode, scale);\n    }\n}\n</code></pre>\n\n<p>Finally, the path to the <strong>second</strong> <code>divideAndRound</code> is taken here, again passing the <code>dividend</code> on (which was the <code>intVal</code> of the original <code>BigDecimal</code>), ending up with this code:</p>\n\n<pre><code>private static BigDecimal divideAndRound(BigInteger bdividend, BigInteger bdivisor, int scale, int roundingMode,\n                                         int preferredScale) {\n    boolean isRemainderZero; // record remainder is zero or not\n    int qsign; // quotient sign\n    // Descend into mutables for faster remainder checks\n    MutableBigInteger mdividend = new MutableBigInteger(bdividend.mag);\n    MutableBigInteger mq = new MutableBigInteger();\n    MutableBigInteger mdivisor = new MutableBigInteger(bdivisor.mag);\n    MutableBigInteger mr = mdividend.divide(mdivisor, mq);\n    ...\n</code></pre>\n\n<p>And this is where the error is introduced: The <code>mdivididend</code> is a <strong>mutable</strong> <code>BigInteger</code>, that was created as a mutable view on the <code>mag</code> array of the <code>BigInteger</code> that is stored in the <code>BigDecimal</code> <code>x</code> from the original call. The division modifies the <code>mag</code> field, and thus, the state of the (now not-so-immutable) <code>BigDecimal</code>.</p>\n\n<p>This is clearly a bug in the implementation of one of the <code>divide</code> methods. I already started tracking the change sets of the OpenJDK, but have not yet spotted the definite culprit. (<em>Edit: See updates below</em>)</p>\n\n<p>(A side note: Calling <code>x.toString()</code> before doing the division does not really <em>avoid</em>, but only <em>hide</em> the bug: It causes a string cache of the correct state to be created internally. The right value is printed, but the internal state is still wrong - which is concerning, to say the least...)</p>\n\n<hr>\n\n<blockquote>\n  <p><strong>Update</strong>: To confirm what <code>@MikeM</code> said: Bug has been listed on <a href=\"https://bugs.openjdk.java.net/browse/JDK-8066842\">openjdk bug list</a> and it has been resolved in <code>JDK8 Build 51</code></p>\n  \n  <p><strong>Update</strong> : Kudos to Mike and exex zian for digging out the bug reports. According to the discussion there, the bug was introduced with <a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/ffada2ce20e5#l1.1174\">this changeset</a>. \n  <sub>(Admittedly, while skimming through the changes, I also considered this as a hot candidate, but could not believe that this was introduced <em>four years ago</em> and remained unnoticed until now...)</sub></p>\n</blockquote>\n", "title": "Why does toString fail to produce the correct value on an immutable BigDecimal?", "tags": ["java", "bigdecimal"], "link": "http://stackoverflow.com/questions/29328785/why-does-tostring-fail-to-produce-the-correct-value-on-an-immutable-bigdecimal/29330741#29330741", "post_type": "answer", "question_id": 29328785, "answer_id": 29330741}, {"body": "<p>Looking at the issue and fix, it looks like this has been done to resolve a handling of a header file generation for special classes in jigsaw</p>\n\n<p>Jigsaw is a module system designated to use in Java SE Platform and JDK. More details <a href=\"http://openjdk.java.net/projects/jigsaw/\" rel=\"nofollow\">here</a> </p>\n\n<p>Here is a corresponding <a href=\"http://hg.openjdk.java.net/build-infra/jdk8/jdk/rev/9fe81cc79176\" rel=\"nofollow\">changeset</a>. You can see a comment,</p>\n\n<blockquote>\n  <p>Special handling of header file generation for classes in the jigsaw\n  base module which currently can't add the annotaion\n  GenerateNativeHeaders. For these specific classes the java file and\n  the class have the same names which enables shortcutting the\n  dependencies.</p>\n</blockquote>\n\n<p>From the changeset I see that for the sake of purpose in addition to<code>java.lang.Integer</code> and <code>java.lang.Long</code> , also some properties in <code>java.net.SocketOptions</code>, <code>sun.nio.ch.IOStatus</code>, <code>java.io.FileSystem</code> have been changed to <code>@Native</code>. </p>\n\n<p>So I assume only those were needed to solve the dependency with jigsaw.</p>\n", "title": "Why is the SIZE constant only @Native for Integer and Long?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/28770822/why-is-the-size-constant-only-native-for-integer-and-long/28816219#28816219", "post_type": "answer", "question_id": 28770822, "answer_id": 28816219}, {"body": "<p><strong>TLDR</strong>: Jump to the conclusion</p>\n\n<hr>\n\n<blockquote>\n  <p>Why is the SIZE constant only @Native for Integer and Long?</p>\n</blockquote>\n\n<h2>A brief history of <code>@Native</code></h2>\n\n<p>I made some search on the mailing lists. I found some interesting things.</p>\n\n<p><strong>At first</strong> an annotation (<a href=\"http://mail.openjdk.java.net/pipermail/build-infra-dev/2011-November/000234.html\">1</a> <a href=\"http://mail.openjdk.java.net/pipermail/build-infra-dev/2011-November/000234.html\">2</a>) <a href=\"http://hg.openjdk.java.net/build-infra/jdk7/langtools/file/5d684df20334/src/share/classes/javax/tools/ForceNativeHeader.java\"><code>javax.tools.annotation.ForceNativeHeader</code></a>\n was introduced to</p>\n\n<blockquote>\n  <p>to trigger javah on a class.</p>\n</blockquote>\n\n<p>It is used by <a href=\"http://hg.openjdk.java.net/build-infra/jdk7/langtools/file/5d684df20334/src/share/classes/com/sun/tools/javac/processing/NativeapiVisitor.java\"><code>com.sun.tools.javac.processing.NativeapiVisitor</code></a>. By looking at the code we can see that the native header is generated if the class declare some native methods or if the class is annotated <code>@ForceNativeHeader</code>.</p>\n\n<p><strong>Later</strong> this annotation was renamed to <a href=\"http://hg.openjdk.java.net/build-infra/jdk8/langtools/file/27344710eaf1/src/share/classes/javax/tools/annotation/GenerateNativeHeader.java\"><code>GenerateNativeHeader</code></a> (<a href=\"http://mail.openjdk.java.net/pipermail/build-infra-dev/2012-March/000546.html\">1</a> <a href=\"http://mail.openjdk.java.net/pipermail/build-infra-dev/2012-March/000545.html\">2</a>).</p>\n\n<p><strong>Then</strong> <a href=\"http://cr.openjdk.java.net/~ohair/openjdk8/generateHeaders1/webrev/\">this annotation was added to several types</a> (especially <a href=\"http://cr.openjdk.java.net/~ohair/openjdk8/generateHeaders1/webrev/src/share/classes/java/lang/Integer.java.udiff.html\">Integer</a> and <a href=\"http://cr.openjdk.java.net/~ohair/openjdk8/generateHeaders1/webrev/src/share/classes/java/lang/Long.java.udiff.html\">Long</a>) with an interresting comment:</p>\n\n<pre><code>/* No native methods here, but the constants are needed in the supporting JNI code */\n@GenerateNativeHeader\npublic final class Long extends Number implements Comparable&lt;Long&gt; {...\n</code></pre>\n\n<p><strong>But</strong> by adding this annotation it add <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8000404\">a problematic dependency</a> from base module to the module containing javax.tools. So the annotation were removed from <a href=\"http://cr.openjdk.java.net/~erikj/build-infra-m1.1/jdk-base-headers/src/share/classes/java/lang/Integer.java.udiff.html\"><code>Integer</code></a> and <a href=\"http://cr.openjdk.java.net/~erikj/build-infra-m1.1/jdk-base-headers/src/share/classes/java/lang/Long.java.udiff.html\"><code>Long</code></a> and these files were explicitly <a href=\"http://cr.openjdk.java.net/~erikj/build-infra-m1.1/jdk-base-headers/makefiles/CompileJavaClasses.gmk.udiff.html\">added to the build process</a> since the header were no more automatically generated... a <a href=\"http://mail.openjdk.java.net/pipermail/build-dev/2012-June/006238.html\">\"(hopefully temporary) hack\"</a>.</p>\n\n<p><strong>So</strong> a new annotation <code>java.lang.annotation.Native</code> <a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/369709a13823\">was created</a> and used in <a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/f92ab6dbbff8/src/share/classes/java/lang/Integer.java\">Integer</a> and <a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/f92ab6dbbff8/src/share/classes/java/lang/Long.java\">Long</a>. The annotation was set a <code>TargetType FIELD</code>.</p>\n\n<blockquote>\n  <p>the annotation should be directly applied to the constant fields that need to be exported -- and not to the class as a whole. </p>\n</blockquote>\n\n<hr>\n\n<p>All the purpose of this stuff is:</p>\n\n<blockquote>\n  <p>javac could generate native headers for classes containing native methods.</p>\n</blockquote>\n\n<p>It is the case of <code>Integer</code> and <code>Long</code></p>\n\n<p>this was a part of the <a href=\"http://openjdk.java.net/jeps/139\">JEP 139: Enhance javac to Improve Build Speed</a>:</p>\n\n<blockquote>\n  <p>javah will be automatically run on any class that contains native methods and the generated C-headers will be put in the (-h) headerdir. A new annotation @ForceNativeHeader is used for classes that have final static primitives that need to be exported to JNI, but no native methods.</p>\n</blockquote>\n\n<hr>\n\n<h2>A basic experimentation</h2>\n\n<p>I made a basic experimentation on the JDK. I clone the open-jdk forest and i successfully build it. As expected the header files where generated for <code>Integer</code> and <code>Long</code> (thanks to <code>@Native</code>) and for <code>Float</code> and <code>Double</code> (thanks to their native methods) but not for <code>Byte</code>, <code>Short</code>...</p>\n\n<pre><code>    ls -l build/macosx-x86_64-normal-server-release/support/headers/java.base/java_lang_*\n    ...\n    java_lang_Double.h\n    java_lang_Float.h\n    java_lang_Integer.h\n    java_lang_Long.h\n    java_lang_Object.h\n    java_lang_Package.h\n    ...\n</code></pre>\n\n<p>Then i tried to remove the <code>@Native</code> from the <code>Integer</code> fields and i tried to build again the <code>jdk</code> but i get an error:</p>\n\n<pre><code>jdk/src/java.base/unix/native/libnio/ch/FileChannelImpl.c:35:10: fatal error: 'java_lang_Integer.h' file not found\n#include \"java_lang_Integer.h\"\n         ^\n1 error generated.\n</code></pre>\n\n<p>logically since the header have not been generated.</p>\n\n<p>I have also confirmed that <code>java_lang_Integer.h</code> is included <strong>in several c and cpp files</strong>:</p>\n\n<pre><code>find .  \\( -name \"*.c\" -o -name \"*.cpp\" \\) -exec grep \"java_lang_Integer.h\" {} \\; -print\n#include \"java_lang_Integer.h\"\n./jdk/src/java.base/unix/native/libnio/ch/FileChannelImpl.c\n#include \"java_lang_Integer.h\"\n./jdk/src/java.base/unix/native/libnio/ch/IOUtil.c\n#include \"java_lang_Integer.h\"\n./jdk/src/java.base/windows/native/libnet/TwoStacksPlainSocketImpl.c\n#include \"java_lang_Integer.h\"\n./jdk/src/java.base/windows/native/libnio/ch/FileChannelImpl.c\n#include &lt;java_lang_Integer.h&gt;\n./jdk/src/java.desktop/windows/native/libawt/windows/awt_Frame.cpp\n</code></pre>\n\n<p>like <code>Long</code></p>\n\n<pre><code>find .  \\( -name \"*.c\" -o -name \"*.cpp\" \\) -exec grep \"java_lang_Long.h\" {} \\; -print\n#include \"java_lang_Long.h\"\n./jdk/src/java.base/unix/native/libnio/ch/FileDispatcherImpl.c\n</code></pre>\n\n<p>like <code>Float</code></p>\n\n<pre><code>find .  \\( -name \"*.c\" -o -name \"*.cpp\" \\) -exec grep \"java_lang_Float.h\" {} \\; -print\n#include \"java_lang_Float.h\"\n./jdk/src/java.base/share/native/libjava/Float.c\n#include \"java_lang_Float.h\"\n./jdk/src/java.base/share/native/libjava/ObjectInputStream.c\n#include \"java_lang_Float.h\"\n./jdk/src/java.base/share/native/libjava/ObjectOutputStream.c\n</code></pre>\n\n<p>and like <code>Double</code></p>\n\n<pre><code>find .  \\( -name \"*.c\" -o -name \"*.cpp\" \\) -exec grep \"java_lang_Double.h\" {} \\; -print\n#include \"java_lang_Double.h\"\n./jdk/src/java.base/share/native/libjava/Double.c\n#include \"java_lang_Double.h\"\n./jdk/src/java.base/share/native/libjava/ObjectInputStream.c\n#include \"java_lang_Double.h\"\n./jdk/src/java.base/share/native/libjava/ObjectOutputStream.c\n</code></pre>\n\n<p>but neither <code>Short</code></p>\n\n<pre><code>find .  \\( -name \"*.c\" -o -name \"*.cpp\" \\) -exec grep \"java_lang_Short.h\" {} \\; -print\n</code></pre>\n\n<p>nor <code>Byte</code>, nor <code>Character</code>.</p>\n\n<hr>\n\n<h1>Conclusion</h1>\n\n<p>Among all these types, <strong>only</strong> <code>Integer</code>, <code>Long</code>, <code>Float</code>, <code>Double</code> are used in the <strong>native source code of the jdk</strong>.</p>\n\n<p>And only the <code>Integer</code> and <code>Long</code> fields are annotated with <strong><code>@Native</code></strong> because they have <strong>no native methods</strong> (as opposed to <code>Float</code> and <code>Double</code>)</p>\n", "title": "Why is the SIZE constant only @Native for Integer and Long?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/28770822/why-is-the-size-constant-only-native-for-integer-and-long/28853754#28853754", "post_type": "answer", "question_id": 28770822, "answer_id": 28853754}, {"body": "<h1>Background</h1>\n\n<p>While the question appears simple, the actual answer requires some background to make sense. If you want to skip to the conclusion, scroll down...</p>\n\n<h2>Pick your comparison point - Basic functionality</h2>\n\n<p>Using basic concepts, C#'s <code>IEnumerable</code> concept is more closely related to <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Java's <code>Iterable</code></a>, which is able to create as many <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\">Iterators</a> as you want. <a href=\"https://msdn.microsoft.com/en-us/library/System.Collections.IEnumerable(v=vs.110).aspx\"><code>IEnumerables</code></a> create <a href=\"https://msdn.microsoft.com/en-us/library/system.collections.ienumerator(v=vs.110).aspx\"><code>IEnumerators</code></a>. Java's <code>Iterable</code> create <code>Iterators</code></p>\n\n<p>The history of each concept is similar, in that both <code>IEnumerable</code> and <code>Iterable</code> have a basic motivation to allow 'for-each' style looping over the members of data collections. That's an oversimplification as they both allow more than just that, and they also arrived at that stage via different progressions, but it is a significant common feature regardless.</p>\n\n<p>Let's compare that feature: in both languages, if a class implements the <code>IEnumerable</code>/<code>Iterable</code>, then that class must implement at least a single method (for C#, it's <code>GetEnumerator</code> and for Java it's <code>iterator()</code>). In each case, the instance returned from that (<code>IEnumerator</code>/<code>Iterator</code>) allows you to access the current and subsequent members of the data. This feature is used in the for-each language syntax.</p>\n\n<h2>Pick your comparison point - Enhanced functionality</h2>\n\n<p><code>IEnumerable</code> in C# has been extended to allow a number of other language features (<a href=\"https://msdn.microsoft.com/en-us/library/vstudio/system.linq.enumerable(v=vs.100).aspx\">mostly related to Linq</a>). Features added include selections, projections, aggregations, etc. These extensions have a strong motivation from use in set-theory, similar to SQL and Relational Database concepts.</p>\n\n<p>Java 8 has also had functionality added to enable a degree of functional programming using Streams and Lambdas. Note that Java 8 streams are not primarily motivated by set theory, but by functional programming. Regardless, there are a lot of parallels.</p>\n\n<p>So, this is the second point. The enhancements made to C# were implemented as an enhancement to the <code>IEnumerable</code> concept. In Java, though, the enhancements made were implemented by creating new base concepts of Lambdas and Streams, and then also creating a relatively trivial way to convert from <code>Iterators</code> and <code>Iterables</code> to Streams, and visa-versa.</p>\n\n<p>So, comparing IEnumerable to Java's Stream concept is incomplete. You need to compare it to the combined Streams and Collections API's in Java.</p>\n\n<h2>In Java, Streams are not the same as Iterables, or Iterators</h2>\n\n<p>Streams are not designed to solve problems the same way that iterators are:</p>\n\n<ul>\n<li>Iterators are a way of describing the sequence of data.</li>\n<li>Streams are a way of describing a sequence of data transformations.</li>\n</ul>\n\n<p>With an <code>Iterator</code>, you get a data value, process it, and then get another data value.</p>\n\n<p>With Streams, you chain a sequence of functions together, then you feed an input value to the stream, and get the output value from the combined sequence. Note, in Java terms, each function is encapsulated in a single <code>Stream</code> instance. The Streams API allows you to link a sequence of <code>Stream</code> instances in a way that chains a sequence of transformation expressions.</p>\n\n<p>In order to complete the <code>Stream</code> concept, you need a source of data to feed the stream, and a terminal function that consumes the stream.</p>\n\n<p>The way you feed values in to the stream may in fact be from an <code>Iterable</code>, but the <code>Stream</code> sequence itself is not an <code>Iterable</code>, it is a compound function.</p>\n\n<p>A <code>Stream</code> is also intended to be lazy, in the sense that it only does work when you request a value from it.</p>\n\n<p>Note these significant assumptions and features of Streams:</p>\n\n<ul>\n<li>A <code>Stream</code> in Java is a transformation engine, it transforms a data item in one state, to being in another state.</li>\n<li>streams have no concept of the data order or position, the simply transform whatever they are asked to.</li>\n<li>streams can be supplied with data from many sources, including other streams, Iterators, Iterables, Collections, </li>\n<li>you cannot \"reset\" a stream, that would be like \"reprogramming the transformation\". Resetting the data source is probably what you want.</li>\n<li>there is logically only 1 data item 'in flight' in the stream at any time (unless the stream is a parallel stream, at which point, there is 1 item per thread). This is independent of the data source which may have more than the current items 'ready' to be supplied to the stream, or the stream collector which  may need to aggregate and reduce multiple values.</li>\n<li>Streams can be unbound (infinite), limited only by the data source, or collector (which can be infinite too).</li>\n<li>Streams are 'chainable', the output of filtering one stream, is another stream. Values input to and transformed by a stream can in turn be supplied to another stream which does a different transformation. The data, in its transformed state flows from one stream to the next. You do not need to intervene and pull the data from one stream and plug it in to the next.</li>\n</ul>\n\n<h2>C# Comparison</h2>\n\n<p>When you consider that a Java Stream is just a part of a supply, stream, and collect system, and that Streams and Iterators are often used together with Collections, then it is no wonder that it is hard to relate to the same concepts which are almost all embedded in to a single <code>IEnumerable</code> concept in C#.</p>\n\n<p>Parts of IEnumerable (and close related concepts) are apparent in all of the Java Iterator, Iterable, Lambda, and Stream concepts.</p>\n\n<p>There are small things that the Java concepts can do that are harder in IEnumerable, and visa-versa.</p>\n\n<hr>\n\n<h1>Conclusion</h1>\n\n<ul>\n<li>There's no design problem here, just a problem in matching concepts between the languages.</li>\n<li>Streams solve problems in a different way</li>\n<li>Streams add functionality to Java (they add a different way of doing things, they do not take functionality away)</li>\n</ul>\n\n<p>Adding Streams gives you more choices when solving problems, which is fair to classify as 'enhancing power', not 'reducing', 'taking away', or 'restricting' it.</p>\n\n<h3>Why are Java Streams once-off?</h3>\n\n<p>This question is misguided, because streams are function sequences, not data. Depending on the data source that feeds the stream, you can reset the data source, and feed the same, or different stream.</p>\n\n<h3>Unlike C#'s IEnumerable, where an execution pipeline can be executed as many times as we want, in Java a stream can be 'iterated' only once.</h3>\n\n<p>Comparing an <code>IEnumerable</code> to a <code>Stream</code> is misguided. The context you are using to say <code>IEnumerable</code> can be executed as many times as you want, is best compared to Java <code>Iterables</code>, which can be iterated as many times as you want. A Java <code>Stream</code> represents a subset of the <code>IEnumerable</code> concept, and not the subset that supplies data, and thus cannot be 'rerun'.</p>\n\n<h3>Any call to a terminal operation closes the stream, rendering it unusable. This 'feature' takes away a lot of power.</h3>\n\n<p>The first statement is true, in a sense. The 'takes away power' statement is not. You are still comparing Streams it IEnumerables. The terminal operation in the stream is like a 'break' clause in a for loop. You are always free to have another stream, if you want, and if you can re-supply the data you need. Again, if you consider the <code>IEnumerable</code> to be more like an <code>Iterable</code>, for this statement, Java does it just fine.</p>\n\n<h3>I imagine the reason for this is not technical. What were the design considerations behind this strange restriction?</h3>\n\n<p>The reason is technical, and for the simple reason that a Stream a subset of what think it is. The stream subset does not control the data supply, so you should reset the supply, not the stream. In that context, it is not so strange.</p>\n\n<h3>QuickSort example</h3>\n\n<p>Your quicksort example has the signature:</p>\n\n<pre><code>IEnumerable&lt;int&gt; QuickSort(IEnumerable&lt;int&gt; ints)\n</code></pre>\n\n<p>You are treating the input <code>IEnumerable</code> as a data source:</p>\n\n<pre><code>IEnumerable&lt;int&gt; lt = ints.Where(i =&gt; i &lt; pivot);\n</code></pre>\n\n<p>Additionally, return value is <code>IEnumerable</code> too, which is a supply of data, and since this is a Sort operation, the order of that supply is significant. If you consider the Java <code>Iterable</code> class to be the appropriate match for this, specifically the <code>List</code> specialization of <code>Iterable</code>, since List is a supply of data which has a guaranteed order or iteration, then the equivalent Java code to your code would be:</p>\n\n<pre><code>Stream&lt;Integer&gt; quickSort(List&lt;Integer&gt; ints) {\n    // Using a stream to access the data, instead of the simpler ints.isEmpty()\n    if (!ints.stream().findAny().isPresent()) {\n        return Stream.of();\n    }\n\n    // treating the ints as a data collection, just like the C#\n    final Integer pivot = ints.get(0);\n\n    // Using streams to get the two partitions\n    List&lt;Integer&gt; lt = ints.stream().filter(i -&gt; i &lt; pivot).collect(Collectors.toList());\n    List&lt;Integer&gt; gt = ints.stream().filter(i -&gt; i &gt; pivot).collect(Collectors.toList());\n\n    return Stream.concat(Stream.concat(quickSort(lt), Stream.of(pivot)),quickSort(gt));\n}    \n</code></pre>\n\n<p>Note there is a bug (which I have reproduced), in that the sort does not handle duplicate values gracefully, it is a 'unique value' sort.</p>\n\n<p>Also note how the Java code uses data source (<code>List</code>), and stream concepts at different point, and that in C# those two 'personalities' can be expressed in just <code>IEnumerable</code>. Also, although I have use <code>List</code> as the base type, I could have used the more general <code>Collection</code>, and with a small iterator-to-Stream conversion, I could have used the even more general <code>Iterable</code></p>\n", "title": "Why are Java Streams once-off?", "tags": ["java", "java-8", "java-stream", "api-design"], "link": "http://stackoverflow.com/questions/28459498/why-are-java-streams-once-off/28459604#28459604", "post_type": "answer", "question_id": 28459498, "answer_id": 28459604}, {"body": "<p><code>Stream</code>s are built around <code>Spliterator</code>s which are stateful, mutable objects. They don\u2019t have a \u201creset\u201d action and in fact, requiring to support such rewind action would \u201ctake away much power\u201d. How would <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints--\"><code>Random.ints()</code></a> be supposed to handle such a request?</p>\n\n<p>On the other hand, for <code>Stream</code>s which have a retraceable origin, it is easy to construct an equivalent <code>Stream</code> to be used again. Just put the steps made to construct the <code>Stream</code> into a reusable method. Keep in mind that repeating these steps is not an expensive operation as all these steps are lazy operations; the actual work starts with the terminal operation and depending on the actual terminal operation entirely different code might get executed.</p>\n\n<p>It would be up to you, the writer of such a method, to specify what calling the method twice implies: does it reproduce exactly the same sequence, as streams created for an unmodified array or collection do, or does it produce a stream with a similar semantics but different elements like a stream of random ints or a stream of console input lines, etc.</p>\n\n<hr>\n\n<p>By the way, to avoid confusion, a terminal operation <em>consumes</em> the <code>Stream</code> which is distinct from <em>closing</em> the <code>Stream</code> as calling <code>close()</code> on the stream does (which is required for streams having associated resources like, e.g. produced by <code>Files.lines()</code>).</p>\n\n<hr>\n\n<p>It seems that a lot of confusion stems from misguiding comparison of <code>IEnumerable</code> with <code>Stream</code>. An <code>IEnumerable</code> represents the ability to provide an actual <code>IEnumerator</code>, so its like an <code>Iterable</code> in Java. In contrast, a <code>Stream</code> is a kind of iterator and comparable to an <code>IEnumerator</code> so it\u2019s wrong to claim that this kind of data type can be used multiple times in .NET, the support for <code>IEnumerator.Reset</code> is optional. The examples discussed here rather use the fact that an <code>IEnumerable</code> can be used to fetch <em>new</em> <code>IEnumerator</code>s and that works with Java\u2019s <code>Collection</code>s  as well; you can get a new <code>Stream</code>. If the Java developers decided to add the <code>Stream</code> operations to <code>Iterable</code> directly, with intermediate operations returning another <code>Iterable</code>, it was really comparable and it could work the same way.</p>\n\n<p>However, the developers decided against it and the decision is discussed in <a href=\"http://stackoverflow.com/q/24472312/2711488\">this question</a>. The biggest point is the confusion about eager Collection operations and lazy Stream operations. By looking at the .NET API, I (yes, personally) find it justified. While it looks reasonable looking at <code>IEnumerable</code> alone, a particular Collection will have lots of methods manipulating the Collection directly and lots of methods returning a lazy <code>IEnumerable</code>, while the particular nature of a method isn\u2019t always intuitively recognizable. The worst example I found (within the few minutes I looked at it) is <a href=\"https://msdn.microsoft.com/de-de/library/b0axc2h2(v=vs.110).aspx\"><code>List.Reverse()</code></a> whose name matches <em>exactly</em> the name of the inherited (is this the right terminus for extension methods?) <a href=\"https://msdn.microsoft.com/de-de/library/bb358497(v=vs.110).aspx\"><code>Enumerable.Reverse()</code></a> while having an entirely contradicting behavior.</p>\n\n<hr>\n\n<p>Of course, these are two distinct decisions. The first one to make <code>Stream</code> a type distinct from <code>Iterable</code>/<code>Collection</code> and the second to make <code>Stream</code> a kind of one time iterator rather than another kind of iterable. But these decision were made together and it might be the case that separating these two decision never was considered. It wasn\u2019t created with being comparable to .NET\u2019s in mind.</p>\n\n<p>The actual API design decision was to add an improved type of iterator, the <code>Spliterator</code>. <code>Spliterator</code>s can be provided by the old <code>Iterable</code>s (which is the way how these were retrofitted) or entirely new implementations. Then, <code>Stream</code> was added as a high-level front-end to the rather low level <code>Spliterator</code>s. That\u2019s it. You may discuss about whether a different design would be better, but that\u2019s not productive, it won\u2019t change, given the way they are designed now.</p>\n\n<p>There is another implementation aspect you have to consider. <code>Stream</code>s are <em>not</em> immutable data structures. Each intermediate operation may return a new <code>Stream</code> instance encapsulating the old one but it may also manipulate its own instance instead and return itself (that doesn\u2019t preclude doing even both for the same operation). Commonly known examples are operations like <code>parallel</code> or <code>unordered</code> which do not add another step but manipulate the entire pipeline). Having such a mutable data structure and attempts to reuse (or even worse, using it multiple times at the same time) doesn\u2019t play well\u2026</p>\n\n<hr>\n\n<p>For completeness, here is your quicksort example translated to the Java <code>Stream</code> API. It shows that it does not really \u201ctake away much power\u201d.</p>\n\n<pre><code>static Stream&lt;Integer&gt; quickSort(Supplier&lt;Stream&lt;Integer&gt;&gt; ints) {\n\n  final Optional&lt;Integer&gt; optPivot = ints.get().findAny();\n  if(!optPivot.isPresent()) return Stream.empty();\n\n  final int pivot = optPivot.get();\n\n  Supplier&lt;Stream&lt;Integer&gt;&gt; lt = ()-&gt;ints.get().filter(i -&gt; i &lt; pivot);\n  Supplier&lt;Stream&lt;Integer&gt;&gt; gt = ()-&gt;ints.get().filter(i -&gt; i &gt; pivot);\n\n  return Stream.of(quickSort(lt), Stream.of(pivot), quickSort(gt)).flatMap(s-&gt;s);\n}\n</code></pre>\n\n<p>It can be used like</p>\n\n<pre><code>List&lt;Integer&gt; l=new Random().ints(100, 0, 1000).boxed().collect(Collectors.toList());\nSystem.out.println(l);\nSystem.out.println(quickSort(l::stream)\n    .map(Object::toString).collect(Collectors.joining(\", \")));\n</code></pre>\n\n<p>You can write it even more compact as</p>\n\n<pre><code>static Stream&lt;Integer&gt; quickSort(Supplier&lt;Stream&lt;Integer&gt;&gt; ints) {\n    return ints.get().findAny().map(pivot -&gt;\n         Stream.of(\n                   quickSort(()-&gt;ints.get().filter(i -&gt; i &lt; pivot)),\n                   Stream.of(pivot),\n                   quickSort(()-&gt;ints.get().filter(i -&gt; i &gt; pivot)))\n        .flatMap(s-&gt;s)).orElse(Stream.empty());\n}\n</code></pre>\n", "title": "Why are Java Streams once-off?", "tags": ["java", "java-8", "java-stream", "api-design"], "link": "http://stackoverflow.com/questions/28459498/why-are-java-streams-once-off/28460301#28460301", "post_type": "answer", "question_id": 28459498, "answer_id": 28460301}, {"body": "<p>I think there are very few differences between the two when you look closely enough.</p>\n\n<p>At it's face, an <code>IEnumerable</code> does appear to be a reusable construct:</p>\n\n<pre><code>IEnumerable&lt;int&gt; numbers = new int[] { 1, 2, 3, 4, 5 };\n\nforeach (var n in numbers) {\n    Console.WriteLine(n);\n}\n</code></pre>\n\n<p>However, the compiler is actually doing a little bit of work to help us out; it generates the following code:</p>\n\n<pre><code>IEnumerable&lt;int&gt; numbers = new int[] { 1, 2, 3, 4, 5 };\n\nIEnumerator&lt;int&gt; enumerator = numbers.GetEnumerator();\nwhile (enumerator.MoveNext()) {\n    Console.WriteLine(enumerator.Current);\n}\n</code></pre>\n\n<p>Each time you would actually iterate over the enumerable, the compiler creates an enumerator.  The enumerator is not reusable; further calls to <code>MoveNext</code> will just return false, and there is no way to reset it to the beginning.  If you want to iterate over the numbers again, you will need to create another enumerator instance.</p>\n\n<hr>\n\n<p>To better illustrate that the IEnumerable has (can have) the same 'feature' as a Java Stream, consider a enumerable whose source of the numbers is not a static collection.  For example, we can create an enumerable object which generates a sequence of 5 random numbers:</p>\n\n<pre><code>class Generator : IEnumerator&lt;int&gt; {\n    Random _r;\n    int _current;\n    int _count = 0;\n\n    public Generator(Random r) {\n        _r = r;\n    }\n\n    public bool MoveNext() {\n        _current= _r.Next();\n        _count++;\n        return _count &lt;= 5;\n    }\n\n    public int Current {\n        get { return _current; }\n    }\n }\n\nclass RandomNumberStream : IEnumerable&lt;int&gt; {\n    Random _r = new Random();\n    public IEnumerator&lt;int&gt; GetEnumerator() {\n        return new Generator(_r);\n    }\n    public IEnumerator IEnumerable.GetEnumerator() {\n        return this.GetEnumerator();\n    }\n}\n</code></pre>\n\n<p>Now we have very similar code to the previous array-based enumerable, but with a second iteration over <code>numbers</code>:</p>\n\n<pre><code>IEnumerable&lt;int&gt; numbers = new RandomNumberStream();\n\nforeach (var n in numbers) {\n    Console.WriteLine(n);\n}\nforeach (var n in numbers) {\n    Console.WriteLine(n);\n}\n</code></pre>\n\n<p>The second time we iterate over <code>numbers</code> we will get a different sequence of numbers, which isn't reusable in the same sense.  Or, we could have written the <code>RandomNumberStream</code> to thrown an exception if you try to iterate over it multiple times, making the enumerable actually unusable (like a Java Stream).</p>\n\n<p>Also, what does your enumerable-based quick sort mean when applied to a <code>RandomNumberStream</code>?</p>\n\n<hr>\n\n<h2>Conclusion</h2>\n\n<p>So, the biggest difference is that .NET allows you to reuse an <code>IEnumerable</code> by implicitly creating a new <code>IEnumerator</code> in the background whenever it would need to access elements in the sequence.</p>\n\n<p>This implicit behavior is often useful (and 'powerful' as you state), because we can repeatedly iterate over a collection.</p>\n\n<p>But sometimes, this implicit behavior can actually cause problems.  If your data source is not static, or is costly to access (like a database or web site), then a lot of assumptions about <code>IEnumerable</code> have to be discarded; reuse is not that straight-forward</p>\n", "title": "Why are Java Streams once-off?", "tags": ["java", "java-8", "java-stream", "api-design"], "link": "http://stackoverflow.com/questions/28459498/why-are-java-streams-once-off/28465634#28465634", "post_type": "answer", "question_id": 28459498, "answer_id": 28465634}, {"body": "<p>I have some recollections from the early design of the Streams API that might shed some light on the design rationale.</p>\n\n<p>Back in 2012, we were adding lambdas to the language, and we wanted a collections-oriented or \"bulk data\" set of operations, programmed using lambdas, that would facilitate parallelism. The idea of lazily chaining operations together was well established by this point. We also didn't want the intermediate operations to store results.</p>\n\n<p>The main issues we needed to decide were what the objects in the chain looked like in the API and how they hooked up to data sources. The sources were often collections, but we also wanted to support data coming from a file or the network, or data generated on-the-fly, e.g., from a random number generator.</p>\n\n<p>There were many influences of existing work on the design. Among the more influential were Google's <a href=\"https://code.google.com/p/guava-libraries/\">Guava</a> library and the Scala collections library. (If anybody is surprised about the influence from Guava, note that <a href=\"http://stackoverflow.com/users/202214/kevin-bourrillion\">Kevin Bourrillion</a>, Guava lead developer, was on the <a href=\"https://jcp.org/en/jsr/detail?id=335\">JSR-335 Lambda</a> expert group.) On Scala collections, we found this talk by Martin Odersky to be of particular interest: <a href=\"http://youtu.be/HoIOIluNFzQ\">Future-Proofing Scala Collections: from Mutable to Persistent to Parallel</a>. (Stanford EE380, 2011 June 1.)</p>\n\n<p>Our prototype design at the time was based around <code>Iterable</code>. The familiar operations <code>filter</code>, <code>map</code>, and so forth were extension (default) methods on <code>Iterable</code>. Calling one added an operation to the chain and returned another <code>Iterable</code>. A terminal operation like <code>count</code> would call <code>iterator()</code> up the chain to the source, and the operations were implemented within each stage's Iterator.</p>\n\n<p>Since these are Iterables, you can call the <code>iterator()</code> method more than once. What should happen then?</p>\n\n<p>If the source is a collection, this mostly works fine. Collections are Iterable, and each call to <code>iterator()</code> produces a distinct Iterator instance that is independent of any other active instances, and each traverses the collection independently. Great.</p>\n\n<p>Now what if the source is one-shot, like reading lines from a file? Maybe the first Iterator should get all the values but the second and subsequent ones should be empty. Maybe the values should be interleaved among the Iterators. Or maybe each Iterator should get all the same values. Then, what if you have two iterators and one gets farther ahead of the other? Somebody will have to buffer up the values in the second Iterator until they're read. Worse, what if you get one Iterator and read all the values, and only <em>then</em> get a second Iterator. Where do the values come from now? Is there a requirement for them all to be buffered up <em>just in case</em> somebody wants a second Iterator?</p>\n\n<p>Clearly, allowing multiple Iterators over a one-shot source raises a lot of questions. We didn't have good answers for them. We wanted consistent, predictable behavior for what happens if you call <code>iterator()</code> twice. This pushed us toward disallowing multiple traversals, making the pipelines one-shot.</p>\n\n<p>We also observed others bumping into these issues. In the JDK, most Iterables are collections or collection-like objects, which allow multiple traversal. It isn't specified anywhere, but there seemed to be an unwritten expectation that Iterables allow multiple traversal. A notable exception is the NIO <a href=\"http://docs.oracle.com/javase/8/docs/api/java/nio/file/DirectoryStream.html\">DirectoryStream</a> interface. Its specification includes this interesting warning:</p>\n\n<blockquote>\n  <p><strong>While DirectoryStream extends Iterable, it is not a general-purpose Iterable as it supports only a single Iterator; invoking the iterator method to obtain a second or subsequent iterator throws IllegalStateException.</strong></p>\n</blockquote>\n\n<p>[bold in original]</p>\n\n<p>This seemed unusual and unpleasant enough that we didn't want to create a whole bunch of new Iterables that might be once-only. This pushed us away from using Iterable.</p>\n\n<p>About this time, an <a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=339521\">article by Bruce Eckel</a> appeared that described a spot of trouble he'd had with Scala. He'd written this code:</p>\n\n<pre><code>// Scala\nval lines = fromString(data).getLines\nval registrants = lines.map(Registrant)\nregistrants.foreach(println)\nregistrants.foreach(println)\n</code></pre>\n\n<p>It's pretty straightforward. It parses lines of text into <code>Registrant</code> objects and prints them out twice. Except that it actually only prints them out once. It turns out that he thought that <code>registrants</code> was a collection, when in fact it's an iterator. The second call to <code>foreach</code> encounters an empty iterator, from which all values have been exhausted, so it prints nothing.</p>\n\n<p>This kind of experience convinced us that it was very important to have clearly predictable results if multiple traversal is attempted. It also highlighted the importance of distinguishing between lazy pipeline-like structures from actual collections that store data. This in turn drove the separation of the lazy pipeline operations into the new Stream interface and keeping only eager, mutative operations directly on Collections. <a href=\"http://stackoverflow.com/a/24472635/1441122\">Brian Goetz has explained</a> the rationale for that.</p>\n\n<p>What about allowing multiple traversal for collection-based pipelines but disallowing it for non-collection-based pipelines? It's inconsistent, but it's sensible. If you're reading values from the network, <em>of course</em> you can't traverse them again. If you want to traverse them multiple times, you have to pull them into a collection explicitly.</p>\n\n<p>But let's explore allowing multiple traversal from collections-based pipelines. Let's say you did this:</p>\n\n<pre><code>Iterable&lt;?&gt; it = source.filter(...).map(...).filter(...).map(...);\nit.into(dest1);\nit.into(dest2);\n</code></pre>\n\n<p>(The <code>into</code> operation is now spelled <code>collect(toList())</code>.)</p>\n\n<p>If source is a collection, then the first <code>into()</code> call will create a chain of Iterators back to the source, execute the pipeline operations, and send the results into the destination. The second call to <code>into()</code> will create another chain of Iterators, and execute the pipeline operations <strong>again</strong>. This isn't obviously wrong but it does have the effect of performing all the filter and map operations a second time for each element. I think many programmers would have been surprised by this behavior.</p>\n\n<p>As I mentioned above, we had been talking to the Guava developers. One of the cool things they have is an <a href=\"https://code.google.com/p/guava-libraries/wiki/IdeaGraveyard\">Idea Graveyard</a> where they describe features that they decided <strong>not</strong> to implement along with the reasons. The idea of lazy collections sounds pretty cool, but here's what they have to say about it. Consider a <code>List.filter()</code> operation that returns a <code>List</code>:</p>\n\n<blockquote>\n  <p>The biggest concern here is that too many operations become expensive, linear-time propositions. If you want to filter a list and get a list back, and not just a Collection or an Iterable, you can use <code>ImmutableList.copyOf(Iterables.filter(list, predicate))</code>, which \"states up front\" what it's doing and how expensive it is.</p>\n</blockquote>\n\n<p>To take a specific example, what's the cost of <code>get(0)</code> or <code>size()</code> on a List? For commonly used classes like <code>ArrayList</code>, they're O(1). But if you call one of these on a lazily-filtered list, it has to run the filter over the backing list, and all of a sudden these operations are O(n). Worse, it has to traverse the backing list on <strong>every</strong> operation.</p>\n\n<p>This seemed to us to be <em>too much</em> laziness. It's one thing to set up some operations and defer actual execution until you so \"Go\". It's another to set things up in such a way that hides a potentially large amount of recomputation.</p>\n\n<p>In proposing to disallow non-linear or \"no-reuse\" streams, <a href=\"http://stackoverflow.com/users/4042945/paul-sandoz\">Paul Sandoz</a> described the <a href=\"http://mail.openjdk.java.net/pipermail/lambda-libs-spec-experts/2012-November/000412.html\">potential consequences</a> of allowing them as giving rise to \"unexpected or confusing results.\" He also mentioned that parallel execution would make things even trickier. Finally, I'd add that a pipeline operation with side effects would lead to difficult and obscure bugs if the operation were unexpectedly executed multiple times, or at least a different number of times than the programmer expected. (But Java programmers don't write lambda expressions with side effects, do they? DO THEY??)</p>\n\n<p>So that's the basic rationale for the Java 8 Streams API design that allows one-shot traversal and that requires a strictly linear (no branching) pipeline. It provides consistent behavior across multiple different stream sources, it clearly separates lazy from eager operations, and it provides a straightforward execution model.</p>\n\n<hr>\n\n<p>With regard to <code>IEnumerable</code>, I am far from an expert on C# and .NET, so I would appreciate being corrected (gently) if I draw any incorrect conclusions. It does appear, however, that <code>IEnumerable</code> permits multiple traversal to behave differently with different sources; and it permits a branching structure of nested <code>IEnumerable</code> operations, which may result in some significant recomputation. While I appreciate that different systems make different tradeoffs, these are two characteristics that we sought to avoid in the design of the Java 8 Streams API.</p>\n\n<p>The quicksort example given by the OP is interesting, puzzling, and I'm sorry to say, somewhat horrifying. Calling <code>QuickSort</code> takes an <code>IEnumerable</code> and returns an <code>IEnumerable</code>, so no sorting is actually done until the final <code>IEnumerable</code> is traversed. What the call seems to do, though, is build up a tree structure of <code>IEnumerables</code> that reflects the partitioning that quicksort would do, without actually doing it. (This is lazy computation, after all.) If the source has N elements, the tree will be N elements wide at its widest, and it will be lg(N) levels deep.</p>\n\n<p>It seems to me -- and once again, I'm not a C# or .NET expert -- that this will cause certain innocuous-looking calls, such as pivot selection via <code>ints.First()</code>, to be more expensive than they look. At the first level, of course, it's O(1). But consider a partition deep in the tree, at the right-hand edge. To compute the first element of this partition, the entire source has to be traversed, an O(N) operation. But since the partitions above are lazy, they must be recomputed, requiring O(lg N) comparisons. So selecting the pivot would be an O(N lg N) operation, which is as expensive as an entire sort.</p>\n\n<p>But we don't actually sort until we traverse the returned <code>IEnumerable</code>. In the standard quicksort algorithm, each level of partitioning doubles the number of partitions. Each partition is only half the size, so each level remains at O(N) complexity. The tree of partitions is O(lg N) high, so the total work is O(N lg N).</p>\n\n<p>With the tree of lazy IEnumerables, at the bottom of the tree there are N partitions. Computing each partition requires a traversal of N elements, each of which requires lg(N) comparisons up the tree. To compute all the partitions at the bottom of the tree, then, requires O(N^2 lg N) comparisons.</p>\n\n<p>(Is this right? I can hardly believe this. Somebody please check this for me.)</p>\n\n<p>In any case, it is indeed cool that <code>IEnumerable</code> can be used this way to build up complicated structures of computation. But if it does increase the computational complexity as much as I think it does, it would seem that programming this way is something that should be avoided unless one is extremely careful.</p>\n", "title": "Why are Java Streams once-off?", "tags": ["java", "java-8", "java-stream", "api-design"], "link": "http://stackoverflow.com/questions/28459498/why-are-java-streams-once-off/28513908#28513908", "post_type": "answer", "question_id": 28459498, "answer_id": 28513908}, {"body": "<p>When looking into the implementation (<code>ReferencePipeline.java</code>) we see the method [<a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/stream/ReferencePipeline.java#l124\">link</a>]</p>\n\n<pre><code>@Override\nfinal void forEachWithCancel(Spliterator&lt;P_OUT&gt; spliterator, Sink&lt;P_OUT&gt; sink) {\n    do { } while (!sink.cancellationRequested() &amp;&amp; spliterator.tryAdvance(sink));\n}\n</code></pre>\n\n<p>which will be invoke for <code>findFirst</code> operation. The special thing to take care about is the <code>sink.cancellationRequested()</code> which allows to end the loop on the first match. Compare to [<a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/stream/ReferencePipeline.java#l252\">link</a>]</p>\n\n<pre><code>@Override\npublic final &lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super P_OUT, ? extends Stream&lt;? extends R&gt;&gt; mapper) {\n    Objects.requireNonNull(mapper);\n    // We can do better than this, by polling cancellationRequested when stream is infinite\n    return new StatelessOp&lt;P_OUT, R&gt;(this, StreamShape.REFERENCE,\n                                 StreamOpFlag.NOT_SORTED | StreamOpFlag.NOT_DISTINCT | StreamOpFlag.NOT_SIZED) {\n        @Override\n        Sink&lt;P_OUT&gt; opWrapSink(int flags, Sink&lt;R&gt; sink) {\n            return new Sink.ChainedReference&lt;P_OUT, R&gt;(sink) {\n                @Override\n                public void begin(long size) {\n                    downstream.begin(-1);\n                }\n\n                @Override\n                public void accept(P_OUT u) {\n                    try (Stream&lt;? extends R&gt; result = mapper.apply(u)) {\n                        // We can do better that this too; optimize for depth=0 case and just grab spliterator and forEach it\n                        if (result != null)\n                            result.sequential().forEach(downstream);\n                    }\n                }\n            };\n        }\n    };\n}\n</code></pre>\n\n<p>The method for advancing one item ends up calling <code>forEach</code> on the sub-stream without any possibility for earlier termination and the comment at the beginning of the <code>flatMap</code> method even tells about this absent feature.</p>\n\n<p>Since this is more than just an optimization thing as it implies that the code simply breaks when the sub-stream is infinite, I hope that the developers soon prove that they \u201ccan do better than this\u201d\u2026</p>\n\n<hr>\n\n<p>To illustrate the implications, while <code>Stream.iterate(0, i-&gt;i+1).findFirst()</code> works as expected, <code>Stream.of(\"\").flatMap(x-&gt;Stream.iterate(0, i-&gt;i+1)).findFirst()</code> will end up in an infinite loop.</p>\n\n<p>Regarding the specification, most of it can be found in the</p>\n\n<p><a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">chapter \u201cStream operations and pipelines\u201d of the package specification</a>:</p>\n\n<blockquote>\n  <p>\u2026</p>\n  \n  <p>Intermediate operations return a new stream. They are always <em>lazy</em>;</p>\n  \n  <p>\u2026</p>\n  \n  <p>\u2026 Laziness also allows avoiding examining all the data when it is not necessary; for operations such as \"find the first string longer than 1000 characters\", it is only necessary to examine just enough strings to find one that has the desired characteristics without examining all of the strings available from the source. (This behavior becomes even more important when the input stream is infinite and not merely large.)</p>\n  \n  <p>\u2026</p>\n  \n  <p>Further, some operations are deemed <em>short-circuiting</em> operations. An intermediate operation is short-circuiting if, when presented with infinite input, it may produce a finite stream as a result. A terminal operation is short-circuiting if, when presented with infinite input, it may terminate in finite time. Having a short-circuiting operation in the pipeline is a necessary, but not sufficient, condition for the processing of an infinite stream to terminate normally in finite time.</p>\n</blockquote>\n\n<p>It\u2019s clear that a short-circuiting operation doesn\u2019t guaranty a finite time termination, e.g. when a filter doesn\u2019t match any item the processing can\u2019t complete, but an implementation which doesn\u2019t support any termination in finite time by simply ignoring the short-circuiting nature of an operation is far off the specification.</p>\n", "title": "Why filter() after flatMap() is &quot;not completely&quot; lazy in Java streams?", "tags": ["java", "lambda", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/29229373/why-filter-after-flatmap-is-not-completely-lazy-in-java-streams/29230939#29230939", "post_type": "answer", "question_id": 29229373, "answer_id": 29230939}, {"body": "<p>In my free <a href=\"https://github.com/amaembo/streamex\" rel=\"nofollow\">StreamEx</a> library I introduced the short-circuiting collectors. When collecting sequential stream with short-circuiting collector (like <a href=\"http://amaembo.github.io/streamex/javadoc/javax/util/streamex/MoreCollectors.html#first--\" rel=\"nofollow\"><code>MoreCollectors.first()</code></a>) exactly one element is consumed from the source. Internally it's implemented in quite dirty way: using a custom exception to break the control flow. Using my library your sample could be rewritten in this way:</p>\n\n<pre><code>System.out.println(\n        \"Result: \" +\n                StreamEx.of(1, 2, 3)\n                .flatMap(i -&gt; Stream.of(i - 1, i, i + 1))\n                .flatMap(i -&gt; Stream.of(i - 1, i, i + 1))\n                .filter(i -&gt; {\n                    System.out.println(i);\n                    return true;\n                })\n                .collect(MoreCollectors.first())\n                .get()\n        );\n</code></pre>\n\n<p>The result is the following:</p>\n\n<pre><code>-1\nResult: -1\n</code></pre>\n", "title": "Why filter() after flatMap() is &quot;not completely&quot; lazy in Java streams?", "tags": ["java", "lambda", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/29229373/why-filter-after-flatmap-is-not-completely-lazy-in-java-streams/33839551#33839551", "post_type": "answer", "question_id": 29229373, "answer_id": 33839551}, {"body": "<p>The first form is called <a href=\"http://en.wikipedia.org/wiki/Javadoc\">Javadoc</a>.  You use this when you're writing formal APIs for your code, which are generated by the <code>javadoc</code> tool.  For an example, <a href=\"http://docs.oracle.com/javase/7/docs/api/\">the Java 7 API page</a> uses Javadoc and was generated by that tool.</p>\n\n<p>Some common elements you'd see in Javadoc include:</p>\n\n<ul>\n<li><p><code>@param</code>:  this is used to indicate what parameters are being passed to a method, and what value they're expected to have</p></li>\n<li><p><code>@return</code>:  this is used to indicate what result the method is going to give back</p></li>\n<li><p><code>@throws</code>:  this is used to indicate that a method throws an exception or error in case of certain input</p></li>\n<li><p><code>@since</code>:  this is used to indicate the earliest Java version this class or function was available in</p></li>\n</ul>\n\n<p>As an example, here's Javadoc for the <code>compare</code> method of <code>Integer</code>:</p>\n\n<pre><code>/**\n * Compares two {@code int} values numerically.\n * The value returned is identical to what would be returned by:\n * &lt;pre&gt;\n *    Integer.valueOf(x).compareTo(Integer.valueOf(y))\n * &lt;/pre&gt;\n *\n * @param  x the first {@code int} to compare\n * @param  y the second {@code int} to compare\n * @return the value {@code 0} if {@code x == y};\n *         a value less than {@code 0} if {@code x &lt; y}; and\n *         a value greater than {@code 0} if {@code x &gt; y}\n * @since 1.7\n */\npublic static int compare(int x, int y) {\n    return (x &lt; y) ? -1 : ((x == y) ? 0 : 1);\n}\n</code></pre>\n\n<p>The second form is a block (multi-line) comment.  You use this if you want to have multiple lines in a comment.</p>\n\n<p>I will say that you'd only want to use the latter form <em>sparingly</em>; that is, you don't want to overburden your code with block comments that don't describe what behaviors the method/complex function is supposed to have.</p>\n\n<p>Since Javadoc is the more descriptive of the two, and you can generate actual documentation as a result of using it, using Javadoc would be more preferable to simple block comments.</p>\n", "title": "/** and /* in Java Comments", "tags": ["java", "comments", "javadoc"], "link": "http://stackoverflow.com/questions/29815636/and-in-java-comments/29815698#29815698", "post_type": "answer", "question_id": 29815636, "answer_id": 29815698}, {"body": "<p>Every class in java has <code>toString()</code> method in it by default, which is called by <code>System.out.println()</code> if you pass some object of a class to it. When you try to print object of a class, the <code>System.out.println()</code> method will call <code>toString()</code> of the class which returns the className@hashcode of that object.</p>\n\n<pre><code>{\n    SomeClass sc = new SomeClass();\n    // Class @ followed by hashcode of object in Hexadecimal\n    System.out.println(sc);\n}\n</code></pre>\n\n<p>You can override the toString method of a class to get different output. See this example</p>\n\n<pre><code>class A {\n    String s = \"I am just a object\";\n    @Override\n    public String toString()\n    {\n        return s;\n    }\n}\n\nclass B {\n    public static void main(String args[])\n    {\n        A obj = new A();\n        System.out.println(obj);\n    }\n}\n</code></pre>\n", "title": "How do I print my Java object without getting &quot;SomeType@2f92e0f4&quot;?", "tags": ["java", "string", "object", "tostring"], "link": "http://stackoverflow.com/questions/29140402/how-do-i-print-my-java-object-without-getting-sometype2f92e0f4/29141638#29141638", "post_type": "answer", "question_id": 29140402, "answer_id": 29141638}, {"body": "<p>In Eclipse,\nGo to your class,\nRight click->source->Generate toString();\nIt will override the toString() method and print the object of that class.</p>\n", "title": "How do I print my Java object without getting &quot;SomeType@2f92e0f4&quot;?", "tags": ["java", "string", "object", "tostring"], "link": "http://stackoverflow.com/questions/29140402/how-do-i-print-my-java-object-without-getting-sometype2f92e0f4/36771568#36771568", "post_type": "answer", "question_id": 29140402, "answer_id": 36771568}, {"body": "<p>In intellij you can auto generate toString method by  pressing alt+inset and then selecting toString() here is an out put for a test class:</p>\n\n<pre><code>public class test  {\nint a;\nchar b;\nString c;\nTest2 test2;\n\n@Override\npublic String toString() {\n    return \"test{\" +\n            \"a=\" + a +\n            \", b=\" + b +\n            \", c='\" + c + '\\'' +\n            \", test2=\" + test2 +\n            '}';\n }\n}\n</code></pre>\n\n<p>As you can see, it generates a String by concatenating, several attributes of the class, for primitives it will print their values and for reference types it will use their class type (in this case to string method of Test2).   </p>\n", "title": "How do I print my Java object without getting &quot;SomeType@2f92e0f4&quot;?", "tags": ["java", "string", "object", "tostring"], "link": "http://stackoverflow.com/questions/29140402/how-do-i-print-my-java-object-without-getting-sometype2f92e0f4/38628203#38628203", "post_type": "answer", "question_id": 29140402, "answer_id": 38628203}, {"body": "<p>The lambda:</p>\n\n<pre><code>() -&gt; { System.out.println(\"Do nothing!\"); };\n</code></pre>\n\n<p>actually represents an implementation for an interface like:</p>\n\n<pre><code>public interface Something {\n    void action();\n}\n</code></pre>\n\n<p>which is completely different than the one you've defined. That's why you get an error.</p>\n\n<p>Since you can't extend your <code>@FunctionalInterface</code>, nor introduce a brand new one, then I think you don't have much options. You can use the <code>Optional&lt;T&gt;</code> interfaces to denote that some of the values (return type or method parameter) is missing, though. However, this won't make the lambda body simpler.</p>\n", "title": "Java 8 lambda Void argument", "tags": ["java", "lambda", "java-8", "void"], "link": "http://stackoverflow.com/questions/29945627/java-8-lambda-void-argument/29945754#29945754", "post_type": "answer", "question_id": 29945627, "answer_id": 29945754}, {"body": "<p>The syntax you're after is possible with a little helper function that converts a <code>Runnable</code> into <code>Action&lt;Void, Void&gt;</code> (you can place it in <code>Action</code> for example):</p>\n\n<pre><code>public static Action&lt;Void, Void&gt; action(Runnable runnable) {\n    return (v) -&gt; {\n        runnable.run();\n        return null;\n    };\n}\n\n// Somewhere else in your code\n Action&lt;Void, Void&gt; action = action(() -&gt; System.out.println(\"foo\"));\n</code></pre>\n", "title": "Java 8 lambda Void argument", "tags": ["java", "lambda", "java-8", "void"], "link": "http://stackoverflow.com/questions/29945627/java-8-lambda-void-argument/29946155#29946155", "post_type": "answer", "question_id": 29945627, "answer_id": 29946155}, {"body": "<p>The strategy they describe is to simply reuse the internal character array of one String in possibly many <code>equal</code> Strings. There's no need for each String to have its own copy if they are equal. </p>\n\n<p>In order to more quickly determine if 2 strings are equal, the hash code is used as a first step, as it is a fast way to determine if Strings <strong>may</strong> be equal. Hence their statement:</p>\n\n<blockquote>\n  <p>As soon as it finds another String which has the same hash code it compares them char by char</p>\n</blockquote>\n\n<p>This is to make a <strong>certain</strong> (but slower) comparison for equality once <strong>possible</strong> equality has been determined using the hash code.</p>\n\n<p>In the end, equal Strings will share a single underlying char array. </p>\n\n<p>Java has had <code>String.intern()</code> for a long time, to do more or less the same (i.e. save memory by deduplicating equal Strings). What's novel about this is that it happens during garbage collection time and can be externally controlled.</p>\n", "title": "String Deduplication feature of Java 8", "tags": ["java", "string", "java-8"], "link": "http://stackoverflow.com/questions/27949213/string-deduplication-feature-of-java-8/27949367#27949367", "post_type": "answer", "question_id": 27949213, "answer_id": 27949367}, {"body": "<p>Imagine you have a phone book, which contains people, which have a <code>String firstName</code> and a <code>String lastName</code>. And it happens that in your phone book, 100,000 people have the same <code>firstName = \"John\"</code>.</p>\n\n<p>Because you get the data from a database or a file those strings are not interned so your JVM memory contains the char array <code>{'J', 'o', 'h', 'n'}</code> 100 thousand times, one per John string. Each of these arrays takes, say, 20 bytes of memory so those 100k Johns take up 2 MB of memory.</p>\n\n<p>With deduplication, the JVM will realise that \"John\" is duplicated many times and make all those John strings point to the same underlying char array, decreasing the memory usage from 2MB to 20 bytes.</p>\n\n<p>You can find a more detailed explanation in the <a href=\"http://openjdk.java.net/jeps/192\">JEP</a>. In particular:</p>\n\n<blockquote>\n  <p>Many large-scale Java applications are currently bottlenecked on memory. Measurements have shown that roughly 25% of the Java heap live data set in these types of applications is consumed by String objects. Further, roughly half of those String objects are duplicates, where duplicates means <code>string1.equals(string2)</code> is true. Having duplicate String objects on the heap is, essentially, just a waste of memory.</p>\n  \n  <p>[...]</p>\n  \n  <p>The actual expected benefit ends up at around 10% heap reduction. Note that this number is a calculated average based on a wide range of applications. The heap reduction for a specific application could vary significantly both up and down.</p>\n</blockquote>\n", "title": "String Deduplication feature of Java 8", "tags": ["java", "string", "java-8"], "link": "http://stackoverflow.com/questions/27949213/string-deduplication-feature-of-java-8/27949581#27949581", "post_type": "answer", "question_id": 27949213, "answer_id": 27949581}, {"body": "<p>Since your first question has already been answered, I'll answer your second question.</p>\n\n<p>The <code>String</code> objects must be compared character by character, because though equal <code>Object</code>s implies equal hashes, the inverse is <em>not</em> necessarily true.</p>\n\n<p>As <a href=\"http://stackoverflow.com/users/2711488/holger\">Holger</a> said in his <a href=\"http://stackoverflow.com/questions/27949213/string-deduplication-feature-of-java-8/27950675#comment44295749_27949213\">comment</a>, this represents a hash collision.</p>\n\n<p>The applicable specifications for the <code>hashcode()</code> method are as follows:</p>\n\n<blockquote>\n  <ul>\n  <li><p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce the same integer result.</p></li>\n  <li><p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce distinct integer results. ...</p></li>\n  </ul>\n</blockquote>\n\n<p>This means that in order for them to guarantee equality, the comparison of each character is necessary in order for them to confirm the equality of the two objects. They start by comparing <code>hashCode</code>s rather than using <code>equals</code> since they are using a hash table for the references, and this improves performance.</p>\n", "title": "String Deduplication feature of Java 8", "tags": ["java", "string", "java-8"], "link": "http://stackoverflow.com/questions/27949213/string-deduplication-feature-of-java-8/27950675#27950675", "post_type": "answer", "question_id": 27949213, "answer_id": 27950675}, {"body": "<p>If all of the streams have been instantiated then closing only the outermost is just fine. </p>\n\n<p>The documentation on <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Closeable.html\"><code>Closeable</code></a> interface states that close method:</p>\n\n<blockquote>\n  <p>Closes this stream and releases any system resources associated with it.</p>\n</blockquote>\n\n<p>The releasing system resources includes closing streams.</p>\n\n<p>It also states that:</p>\n\n<blockquote>\n  <p>If the stream is already closed then invoking this method has no effect.</p>\n</blockquote>\n\n<p>So if you close them explicitly afterwards, nothing wrong will happen.</p>\n", "title": "Is it necessary to close each nested OutputStream and Writer separately?", "tags": ["java", "file-io", "outputstream", "writer"], "link": "http://stackoverflow.com/questions/28276423/is-it-necessary-to-close-each-nested-outputstream-and-writer-separately/28276463#28276463", "post_type": "answer", "question_id": 28276423, "answer_id": 28276463}, {"body": "<p>It will be fine if you only close the last stream - the close call will be send to the underlying streams, too.</p>\n", "title": "Is it necessary to close each nested OutputStream and Writer separately?", "tags": ["java", "file-io", "outputstream", "writer"], "link": "http://stackoverflow.com/questions/28276423/is-it-necessary-to-close-each-nested-outputstream-and-writer-separately/28276469#28276469", "post_type": "answer", "question_id": 28276423, "answer_id": 28276469}, {"body": "<p>You can close the outer most stream, in fact you don't need to retain all the streams wrapped and you can use Java 7 try-with-resources.</p>\n\n<pre><code>try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(\n                     new GZIPOutputStream(new FileOutputStream(createdFile)))) {\n     // write to the buffered writer\n}\n</code></pre>\n\n<hr>\n\n<p>If you subscribe to YAGNI, or you-aint-gonna-need-it, you should be only adding code you actually need. You shouldn't be adding code you imagine you might need but in reality doesn't do anything useful.</p>\n\n<p>Take this example and imagine what could possibly go wrong if you didn't do this and what the impact would be?</p>\n\n<pre><code>try (\n    OutputStream outputStream = new FileOutputStream(createdFile);\n    GZIPOutputStream gzipOutputStream = new GZIPOutputStream(outputStream);\n    OutputStreamWriter osw = new OutputStreamWriter(gzipOutputStream);\n    BufferedWriter bw = new BufferedWriter(osw)\n    ) {\n    // ...\n}\n</code></pre>\n\n<p>Lets start with FileOutputStream which calls <code>open</code> to do all the real work.</p>\n\n<pre><code>/**\n * Opens a file, with the specified name, for overwriting or appending.\n * @param name name of file to be opened\n * @param append whether the file is to be opened in append mode\n */\nprivate native void open(String name, boolean append)\n    throws FileNotFoundException;\n</code></pre>\n\n<p>If the file is not found, there is no underlying resource to close, so closing it won't make any difference.  If The file exists, it should be throwing a FileNotFoundException. So there is nothing to be gained by trying to close the resource from this line alone.</p>\n\n<p>The reason you need to close the file is when the file is opened successfully, but you later get an error.</p>\n\n<p>Lets look at the next stream <code>GZIPOutputStream</code></p>\n\n<p>There is code which can throw an exception</p>\n\n<pre><code>private void writeHeader() throws IOException {\n    out.write(new byte[] {\n                  (byte) GZIP_MAGIC,        // Magic number (short)\n                  (byte)(GZIP_MAGIC &gt;&gt; 8),  // Magic number (short)\n                  Deflater.DEFLATED,        // Compression method (CM)\n                  0,                        // Flags (FLG)\n                  0,                        // Modification time MTIME (int)\n                  0,                        // Modification time MTIME (int)\n                  0,                        // Modification time MTIME (int)\n                  0,                        // Modification time MTIME (int)\n                  0,                        // Extra flags (XFLG)\n                  0                         // Operating system (OS)\n              });\n}\n</code></pre>\n\n<p>This writes the header of the file.  Now it would be very unusual for you to be able to open a file for writing but not be able to write even 8 bytes to it, but lets imagine this could happen and we don't close the file afterwards.  What does happen to a file if it is not closed?  </p>\n\n<p>You don't get any unflushed writes, they are discarded and in this case, there is no successfully written bytes to the stream which isn't buffered at this point anyway.  But a file which is not closed doesn't live forever, instead FileOutputStream has</p>\n\n<pre><code>protected void finalize() throws IOException {\n    if (fd != null) {\n        if (fd == FileDescriptor.out || fd == FileDescriptor.err) {\n            flush();\n        } else {\n            /* if fd is shared, the references in FileDescriptor\n             * will ensure that finalizer is only called when\n             * safe to do so. All references using the fd have\n             * become unreachable. We can call close()\n             */\n            close();\n        }\n    }\n}\n</code></pre>\n\n<p>If you don't close a file at all, it gets closed anyway, just not immediately (and like I said, data which is left in a buffer will be lost this way, but there is none at this point)</p>\n\n<p>What is the consequence of not closing the file immediately?  Under normal conditions, you potentially lose some data, and you potentially run out of file descriptors.  But if you have a system where you can create files but you can't write anything to them, you have a bigger problem. i.e. it hard to imagine why you are repeatedly trying to create this file despite the fact you are failing.</p>\n\n<p>Both OutputStreamWriter and BufferedWriter don't throw IOException in their constructors, so it not clear what problem they would cause.  In The case of BufferedWriter, you could get an OutOfMemoryError.  In this case it will immediately trigger a GC, which as we have seen will close the file anyway.</p>\n", "title": "Is it necessary to close each nested OutputStream and Writer separately?", "tags": ["java", "file-io", "outputstream", "writer"], "link": "http://stackoverflow.com/questions/28276423/is-it-necessary-to-close-each-nested-outputstream-and-writer-separately/28276493#28276493", "post_type": "answer", "question_id": 28276423, "answer_id": 28276493}, {"body": "<p>No, the topmost level <code>Stream</code> or <code>reader</code> will ensure that all <em>underlying</em> streams / readers are closed. </p>\n\n<p>Check the <code>close()</code> method <em>implementation</em> of your topmost level stream.</p>\n", "title": "Is it necessary to close each nested OutputStream and Writer separately?", "tags": ["java", "file-io", "outputstream", "writer"], "link": "http://stackoverflow.com/questions/28276423/is-it-necessary-to-close-each-nested-outputstream-and-writer-separately/28276497#28276497", "post_type": "answer", "question_id": 28276423, "answer_id": 28276497}, {"body": "<p>Assuming all the streams get created okay, yes, just closing <code>bw</code> is fine <em>with those stream implementations</em>; but that's a big assumption.</p>\n\n<p>I'd use <a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/language/try-with-resources.html\">try-with-resources</a> (<a href=\"http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">tutorial</a>) so that any issues constructing the subsequent streams that throw exceptions don't leave the previous streams hanging, and so you don't have to rely on the stream implementation having the call to close the underlying stream:</p>\n\n<pre><code>try (\n    OutputStream outputStream = new FileOutputStream(createdFile);\n    GZIPOutputStream gzipOutputStream = new GZIPOutputStream(outputStream);\n    OutputStreamWriter osw = new OutputStreamWriter(gzipOutputStream);\n    BufferedWriter bw = new BufferedWriter(osw)\n    ) {\n    // ...\n}\n</code></pre>\n\n<p>Note you no longer call <code>close</code> at all.</p>\n\n<p><strong>Important note</strong>: To have try-with-resources close them, you <em>must</em> assign the streams to variables as you open them, you cannot use nesting. If you use nesting, an exception during construction of one of the later streams (say, <code>GZIPOutputStream</code>) will leave any stream constructed by the nested calls inside it open. From <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.20.3\">JLS \u00a714.20.3</a>:</p>\n\n<blockquote>\n  <p>A try-with-resources statement is parameterized with <strong>variables</strong> (known as resources) that are initialized before execution of the <code>try</code> block and closed automatically, in the reverse order from which they were initialized, after execution of the <code>try</code> block.</p>\n</blockquote>\n\n<p>Note the word \"variables\" <em>(my emphasis)</em>.</p>\n\n<p>E.g., don't do this:</p>\n\n<pre><code>// DON'T DO THIS\ntry (BufferedWriter bw = new BufferedWriter(\n        new OutputStreamWriter(\n        new GZIPOutputStream(\n        new FileOutputStream(createdFile))))) {\n    // ...\n}\n</code></pre>\n\n<p>...because an exception from the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/zip/GZIPOutputStream.html#GZIPOutputStream-java.io.OutputStream-\"><code>GZIPOutputStream(OutputStream)</code></a> constructor (which says it may throw <code>IOException</code>, and writes a header to the underlying stream) would leave the <code>FileOutputStream</code> open. Since some resources have constructors that may throw and others don't, it's a good habit to just list them separately.</p>\n\n<p>We can double-check our interpretation of that JLS section with this program:</p>\n\n<pre><code>public class Example {\n\n    private static class InnerMost implements AutoCloseable {\n        public InnerMost() throws Exception {\n            System.out.println(\"Constructing \" + this.getClass().getName());\n        }\n\n        @Override\n        public void close() throws Exception {\n            System.out.println(this.getClass().getName() + \" closed\");\n        }\n    }\n\n    private static class Middle implements AutoCloseable {\n        private AutoCloseable c;\n\n        public Middle(AutoCloseable c) {\n            System.out.println(\"Constructing \" + this.getClass().getName());\n            this.c = c;\n        }\n\n        @Override\n        public void close() throws Exception {\n            System.out.println(this.getClass().getName() + \" closed\");\n            c.close();\n        }\n    }\n\n    private static class OuterMost implements AutoCloseable {\n        private AutoCloseable c;\n\n        public OuterMost(AutoCloseable c) throws Exception {\n            System.out.println(\"Constructing \" + this.getClass().getName());\n            throw new Exception(this.getClass().getName() + \" failed\");\n        }\n\n        @Override\n        public void close() throws Exception {\n            System.out.println(this.getClass().getName() + \" closed\");\n            c.close();\n        }\n    }\n\n    public static final void main(String[] args) {\n        // DON'T DO THIS\n        try (OuterMost om = new OuterMost(\n                new Middle(\n                    new InnerMost()\n                    )\n                )\n            ) {\n            System.out.println(\"In try block\");\n        }\n        catch (Exception e) {\n            System.out.println(\"In catch block\");\n        }\n        finally {\n            System.out.println(\"In finally block\");\n        }\n        System.out.println(\"At end of main\");\n    }\n}\n</code></pre>\n\n<p>...which has the output:</p>\n\n<pre>\nConstructing Example$InnerMost\nConstructing Example$Middle\nConstructing Example$OuterMost\nIn catch block\nIn finally block\nAt end of main\n</pre>\n\n<p>Note that there are no calls to <code>close</code> there.</p>\n\n<p>If we fix <code>main</code>:</p>\n\n<pre><code>public static final void main(String[] args) {\n    try (\n        InnerMost im = new InnerMost();\n        Middle m = new Middle(im);\n        OuterMost om = new OuterMost(m)\n        ) {\n        System.out.println(\"In try block\");\n    }\n    catch (Exception e) {\n        System.out.println(\"In catch block\");\n    }\n    finally {\n        System.out.println(\"In finally block\");\n    }\n    System.out.println(\"At end of main\");\n}\n</code></pre>\n\n<p>then we get the appropriate <code>close</code> calls:</p>\n\n<pre>\nConstructing Example$InnerMost\nConstructing Example$Middle\nConstructing Example$OuterMost\nExample$Middle closed\nExample$InnerMost closed\nExample$InnerMost closed\nIn catch block\nIn finally block\nAt end of main\n</pre>\n\n<p>(Yes, two calls to <code>InnerMost#close</code> is correct; one is from <code>Middle</code>, the other from try-with-resources.)</p>\n", "title": "Is it necessary to close each nested OutputStream and Writer separately?", "tags": ["java", "file-io", "outputstream", "writer"], "link": "http://stackoverflow.com/questions/28276423/is-it-necessary-to-close-each-nested-outputstream-and-writer-separately/28276498#28276498", "post_type": "answer", "question_id": 28276423, "answer_id": 28276498}, {"body": "<ol>\n<li><p>It is checking if newType is array of Objects or not:</p>\n\n<pre><code>Object[] a1 = new Object[100]; -- array of Objects\n\nString[] a2 = new String[100]; -- array of Strings\n</code></pre></li>\n</ol>\n\n<p>Why to do that? Because new Object[n] is faster than Array.newInstance</p>\n\n<ol start=\"2\">\n<li><p><code>Array.newInstance(Class&lt;?&gt; componentType, int... dimensions)</code> creates an array of types defined by the first argument, eg <code>String.class</code> -> <code>String[]</code>. Note that <code>String[].class.getComponentType()</code> returns <code>String.class</code></p></li>\n<li><p>You cannot use it like that, but it can be like this</p>\n\n<pre><code>Integer[] nums = Arrays.copyOf(new Object[]{1, 2}, 2, Integer[].class);\n</code></pre></li>\n</ol>\n\n<p>in this case it depends only on actual type of elements, eg</p>\n\n<pre><code>  Arrays.copyOf(new Object[]{1L, 2}, 2, Integer[].class);\n</code></pre>\n\n<p>will fail, you cannot write in <code>Integer[]</code> anything but <code>Integer</code></p>\n", "title": "Do not understand the source code of Arrays.copyOf", "tags": ["java", "arrays", "generics"], "link": "http://stackoverflow.com/questions/29494800/do-not-understand-the-source-code-of-arrays-copyof/29495065#29495065", "post_type": "answer", "question_id": 29494800, "answer_id": 29495065}, {"body": "<blockquote>\n  <ol>\n  <li>what is this line checking?</li>\n  </ol>\n</blockquote>\n\n<pre><code>(Object)newType == (Object)Object[].class\n</code></pre>\n\n<p>It is checking whether variable <code>newType</code> holds a reference to an instance of <code>java.lang.Class</code> representing type <code>Object[]</code>.  The casts are unneeded.</p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>What are the differences between <code>(T[]) new Object[newLength]</code> and <code>(T[]) Array.newInstance(newType.getComponentType(), newLength)</code>. why <code>Array.newInstance</code> not good enough for both cases?</li>\n  </ol>\n</blockquote>\n\n<p>As far as I can tell, <code>Array.newInstance()</code> <em>could</em> be used in both cases, but non-reflective ordinary array construction is likely a bit faster.  Thus, I suppose that <code>Object[]</code> is called out as a special case for performance reasons, but I have no idea whether that case is exercised frequently enough for the optimization to be important.</p>\n\n<blockquote>\n  <ol start=\"3\">\n  <li>This following line compiles, but crashes at run time (as expected). When should I use this method?</li>\n  </ol>\n</blockquote>\n\n<pre><code>Integer[] nums = Arrays.copyOf(new String[]{\"a\", \"b\"}, 2, Integer[].class) \n</code></pre>\n\n<p>You should use it when you need to copy an array to an array with a possibly different (but compatible) element type, especially when the element types are not statically known.  If you know you want the copy to have the same element type as the original, then it's easier to use the original array's <code>clone()</code> method.</p>\n", "title": "Do not understand the source code of Arrays.copyOf", "tags": ["java", "arrays", "generics"], "link": "http://stackoverflow.com/questions/29494800/do-not-understand-the-source-code-of-arrays-copyof/29495113#29495113", "post_type": "answer", "question_id": 29494800, "answer_id": 29495113}, {"body": "<p>First of all, the cast in that line</p>\n\n<pre><code>((Object)newType == (Object)Object[].class)\n</code></pre>\n\n<p>are absobuletly needed. Removing them will result in a compilation error :</p>\n\n<pre><code>incomparable types: Class&lt;CAP#1&gt; and Class&lt;Object[]&gt;\n where CAP#1 is a fresh type-variable:\n  CAP#1 extends T[] from capture of ? extends T[]\n</code></pre>\n\n<p>Now to answer your question <strong><em>What is this line checking ?</em></strong></p>\n\n<p>It simply verify if the given array is of object type, which is part of the answer for your other question <strong><em>Why <code>Array.newInstance</code> not good enough for both cases?</em></strong></p>\n\n<p>In the first case, we already know that the array is of <code>Object</code> type so there is no point in calling the <code>newInstance</code> method to retrieve the correct type, this would only result in performance loss.</p>\n\n<p>As for your final example,</p>\n\n<pre><code>Integer[] nums = Arrays.copyOf(new String[]{\"a\", \"b\"}, 2, Integer[].class) \n</code></pre>\n\n<p>That it does compile, it is true. Because the given arguments to the method are all valids. It will certainly fail at runtime; what would be the expected output of converting \"a\" to <code>Integer</code> type ?</p>\n\n<p>Now, when to use <code>copyOf</code> ? When you already know the both types, and already know that they are valid together. </p>\n\n<p>It main usage is to return a copy but truncated or padded with [null/default values] to the original array.</p>\n", "title": "Do not understand the source code of Arrays.copyOf", "tags": ["java", "arrays", "generics"], "link": "http://stackoverflow.com/questions/29494800/do-not-understand-the-source-code-of-arrays-copyof/29500496#29500496", "post_type": "answer", "question_id": 29494800, "answer_id": 29500496}, {"body": "<blockquote>\n  <p>What is this line checking? <code>(Object)newType == (Object)Object[].class</code></p>\n</blockquote>\n\n<p>It's checking simple equality (likely for the purpose of a micro-optimization, but more on that later).</p>\n\n<p>The unusual casting is necessary because <code>Class&lt;Object[]&gt;</code> (the type of <code>Object[].class</code>) and <code>Class&lt;? extends T[]&gt;</code> are incomparable types. Basically, for an equality comparison with <code>==</code> to compile, one of the sides has to be a subtype or supertype of the other.</p>\n\n<p>I.e. we can't do:</p>\n\n<pre><code>// doesn't compile\n// this expression can never evaluate to true\n(new Integer(0) == new Float(0f))\n</code></pre>\n\n<p>The rules for generic types are a bit more complicated and there are a few cases where a comparison doesn't compile, but it may still evaluate to true.</p>\n\n<p>The reason <code>Class&lt;Object[]&gt;</code> is not a supertype of <code>Class&lt;? extends T[]&gt;</code>, despite <code>Object[]</code> being a supertype of all object array types, is that <a href=\"http://stackoverflow.com/q/2745265/2891664\">Java generics are invariant</a> without the presence of a wildcard.</p>\n\n<p>Another way to do the comparison would be:</p>\n\n<pre><code>(newType == (Class&lt;? extends Object[]&gt;)Object[].class)\n</code></pre>\n\n<blockquote>\n  <p>What are the differences between <code>(T[]) new Object[newLength]</code> and <code>(T[]) Array.newInstance(newType.getComponentType(), newLength)</code>?</p>\n</blockquote>\n\n<ul>\n<li><code>new Object[...]</code> creates an array the normal way, of a type that is statically known. Remember, the code has just checked that <code>T[]</code> is <code>Object[]</code>.</li>\n<li><code>Array.newInstance(...)</code> uses reflection to dynamically create an array of the <code>Class</code> type passed in.</li>\n</ul>\n\n<blockquote>\n  <p>Why <code>Array.newInstance</code> not good enough for both cases?</p>\n</blockquote>\n\n<p>An operation using reflection is <a href=\"http://stackoverflow.com/q/435553/2891664\">generally slower</a> than its non-reflective counterpart.</p>\n\n<p>The <a href=\"https://docs.oracle.com/javase/tutorial/reflect/\">reflection tutorial</a> says:</p>\n\n<blockquote>\n  <p>Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.</p>\n</blockquote>\n\n<p>Java SE is filled with micro-optimization like this. The writers of SE try to squeeze everything they can out of it.</p>\n\n<p>But I wouldn't be worried about a performance hit in this case: <a href=\"http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/6e9aa487055f/src/share/vm/classfile/vmSymbols.hpp#l691\"><code>newInstance</code> and <code>copyOf</code></a> are <a href=\"http://bad-concurrency.blogspot.co.uk/2012/08/arithmetic-overflow-and-intrinsics.html\">HotSpot intrinsics</a>. This means that ideally calls to these methods get replaced with machine-specific assembly. Anecdotally, I ran some tests and found the difference between <code>new Object[...]</code> and <code>Array.newInstance(...)</code> to be negligible. The code in the question is probably a relic, although it may still be useful on less well-equipped JVMs.</p>\n\n<p>Reflection can also be disabled in certain contexts with strict security (such as an applet), but not typically for a normal desktop application.</p>\n\n\n\n<blockquote>\n  <p>When should I use this method?</p>\n</blockquote>\n\n<p>In general, you will probably never use this overload. This overload is only useful if you want to change the type of the array.</p>\n\n<ul>\n<li><p>Widening:</p>\n\n<pre><code>Object[] a = Arrays.copyOf(\n    new String[] { \"hello\", \"world\" }, 3, Object[].class);\na[2] = Character.valueOf('!');\nSystem.out.println(Arrays.toString(a));\n</code></pre></li>\n<li><p>Narrowing:</p>\n\n<pre><code>String[] a = Arrays.copyOf(\n    new Object[] { \"hello\", \"world\" }, 2, String[].class);\nSystem.out.println(String.join(\" \", a));\n</code></pre></li>\n</ul>\n\n<p>It's more typical to use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOf-T:A-int-\"><code>Arrays.copyOf(T[], int)</code></a>.</p>\n", "title": "Do not understand the source code of Arrays.copyOf", "tags": ["java", "arrays", "generics"], "link": "http://stackoverflow.com/questions/29494800/do-not-understand-the-source-code-of-arrays-copyof/29502668#29502668", "post_type": "answer", "question_id": 29494800, "answer_id": 29502668}, {"body": "<p>The JLS describes a few special behaviors of what it calls <em>constant variables</em>, which are <code>final</code> variables (whether <code>static</code> or not) which are initialized with constant expressions of <code>String</code> or primitive type.</p>\n\n<p>Constant variables have a major difference with respect to binary compatibility: the <em>values</em> of constant variables become part of the class's API, as far as the compiler is concerned.</p>\n\n<p>An example:</p>\n\n<pre><code>class X {\n    public static final String XFOO = \"xfoo\";\n}\n\nclass Y {\n    public static final String YFOO;\n    static { YFOO = \"yfoo\"; }\n}\n\nclass Z {\n    public static void main(String[] args) {\n        System.out.println(X.XFOO);\n        System.out.println(Y.YFOO);\n    }\n}\n</code></pre>\n\n<p>Here, <code>XFOO</code> is a \"constant variable\" and <code>YFOO</code> is not, but they are otherwise equivalent. Class <code>Z</code> prints out each of them. Compile those classes, then disassemble them with <code>javap -v X Y Z</code>, and here is the output:</p>\n\n<p>Class X:</p>\n\n<pre><code>Constant pool:\n   #1 = Methodref          #3.#11         //  java/lang/Object.\"&lt;init&gt;\":()V\n   #2 = Class              #12            //  X\n   #3 = Class              #13            //  java/lang/Object\n   #4 = Utf8               XFOO\n   #5 = Utf8               Ljava/lang/String;\n   #6 = Utf8               ConstantValue\n   #7 = String             #14            //  xfoo\n   #8 = Utf8               &lt;init&gt;\n   #9 = Utf8               ()V\n  #10 = Utf8               Code\n  #11 = NameAndType        #8:#9          //  \"&lt;init&gt;\":()V\n  #12 = Utf8               X\n  #13 = Utf8               java/lang/Object\n  #14 = Utf8               xfoo\n{\n  public static final java.lang.String XFOO;\n    descriptor: Ljava/lang/String;\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n    ConstantValue: String xfoo\n\n\n  X();\n    descriptor: ()V\n    flags:\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"&lt;init&gt;\":()V\n         4: return\n}\n</code></pre>\n\n<p>Class Y:</p>\n\n<pre><code>Constant pool:\n   #1 = Methodref          #5.#12         //  java/lang/Object.\"&lt;init&gt;\":()V\n   #2 = String             #13            //  yfoo\n   #3 = Fieldref           #4.#14         //  Y.YFOO:Ljava/lang/String;\n   #4 = Class              #15            //  Y\n   #5 = Class              #16            //  java/lang/Object\n   #6 = Utf8               YFOO\n   #7 = Utf8               Ljava/lang/String;\n   #8 = Utf8               &lt;init&gt;\n   #9 = Utf8               ()V\n  #10 = Utf8               Code\n  #11 = Utf8               &lt;clinit&gt;\n  #12 = NameAndType        #8:#9          //  \"&lt;init&gt;\":()V\n  #13 = Utf8               yfoo\n  #14 = NameAndType        #6:#7          //  YFOO:Ljava/lang/String;\n  #15 = Utf8               Y\n  #16 = Utf8               java/lang/Object\n{\n  public static final java.lang.String YFOO;\n    descriptor: Ljava/lang/String;\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n\n\n  Y();\n    descriptor: ()V\n    flags:\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"&lt;init&gt;\":()V\n         4: return\n\n  static {};\n    descriptor: ()V\n    flags: ACC_STATIC\n    Code:\n      stack=1, locals=0, args_size=0\n         0: ldc           #2                  // String yfoo\n         2: putstatic     #3                  // Field YFOO:Ljava/lang/String;\n         5: return\n}\n</code></pre>\n\n<p>Class Z:</p>\n\n<pre><code>Constant pool:\n   #1 = Methodref          #8.#14         //  java/lang/Object.\"&lt;init&gt;\":()V\n   #2 = Fieldref           #15.#16        //  java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Class              #17            //  X\n   #4 = String             #18            //  xfoo\n   #5 = Methodref          #19.#20        //  java/io/PrintStream.println:(Ljava/lang/String;)V\n   #6 = Fieldref           #21.#22        //  Y.YFOO:Ljava/lang/String;\n   #7 = Class              #23            //  Z\n   #8 = Class              #24            //  java/lang/Object\n   #9 = Utf8               &lt;init&gt;\n  #10 = Utf8               ()V\n  #11 = Utf8               Code\n  #12 = Utf8               main\n  #13 = Utf8               ([Ljava/lang/String;)V\n  #14 = NameAndType        #9:#10         //  \"&lt;init&gt;\":()V\n  #15 = Class              #25            //  java/lang/System\n  #16 = NameAndType        #26:#27        //  out:Ljava/io/PrintStream;\n  #17 = Utf8               X\n  #18 = Utf8               xfoo\n  #19 = Class              #28            //  java/io/PrintStream\n  #20 = NameAndType        #29:#30        //  println:(Ljava/lang/String;)V\n  #21 = Class              #31            //  Y\n  #22 = NameAndType        #32:#33        //  YFOO:Ljava/lang/String;\n  #23 = Utf8               Z\n  #24 = Utf8               java/lang/Object\n  #25 = Utf8               java/lang/System\n  #26 = Utf8               out\n  #27 = Utf8               Ljava/io/PrintStream;\n  #28 = Utf8               java/io/PrintStream\n  #29 = Utf8               println\n  #30 = Utf8               (Ljava/lang/String;)V\n  #31 = Utf8               Y\n  #32 = Utf8               YFOO\n  #33 = Utf8               Ljava/lang/String;\n{\n  Z();\n    descriptor: ()V\n    flags:\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"&lt;init&gt;\":()V\n         4: return\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         3: ldc           #4                  // String xfoo\n         5: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n         8: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n        11: getstatic     #6                  // Field Y.YFOO:Ljava/lang/String;\n        14: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        17: return\n}\n</code></pre>\n\n<p>Things to notice in the disassembly, which tell you the differences between <code>X</code> and <code>Y</code> run deeper than syntactic sugar:</p>\n\n<ul>\n<li><p><code>XFOO</code> has a <a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7.2\"><code>ConstantValue</code></a> attribute, signifying that its value is a compile-time constant. Whereas <code>YFOO</code> does not, and uses a <code>static</code> block with a <code>putstatic</code> instruction to initialize the value at runtime.</p></li>\n<li><p><strong>The <code>String</code> constant <code>\"xfoo\"</code> has become part of class <code>Z</code>'s constant pool</strong>, but <code>\"yfoo\"</code> has not.</p></li>\n<li><p><code>Z.main</code> uses the <code>ldc</code> (load constant) instruction to load <code>\"xfoo\"</code> onto the stack directly from its own constant pool, but it uses a <code>getstatic</code> instruction to load the value of <code>Y.YFOO</code>.</p></li>\n</ul>\n\n<p>Other differences you will find:</p>\n\n<ul>\n<li><p>If you change the value of <code>XFOO</code> and recompile <code>X.java</code> but not <code>Z.java</code>, you have a problem: class <code>Z</code> is still using the old value. If you change the value of <code>YFOO</code> and recompile <code>Y.java</code>, class <code>Z</code> uses the new value whether you recompile <code>Z.java</code> or not.</p></li>\n<li><p>If you delete the <code>X.class</code> file entirely, class <code>Z</code> still runs correctly. <strong><code>Z</code> has no runtime dependency on <code>X</code>.</strong> Whereas if you delete the <code>Y.class</code> file, class <code>Z</code> fails to initialize with a <code>ClassNotFoundException: Y</code>.</p></li>\n<li><p>If you generate documentation for the classes with javadoc, the \"Constant Field Values\" page will document the value of <code>XFOO</code>, but not the value of <code>YFOO</code>.</p></li>\n</ul>\n\n<p>The JLS describes the above effects constant variables have on compiled class files in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\">\u00a713.1.3</a>:</p>\n\n<blockquote>\n  <p>A reference to a field that is a constant variable (\u00a74.12.4) must be resolved at compile time to the value V denoted by the constant variable's initializer.</p>\n  \n  <p>If such a field is <code>static</code>, then no reference to the field should be present in the code in a binary file, including the class or interface which declared the field. Such a field must always appear to have been initialized (\u00a712.4.2); the default initial value for the field (if different than V) must never be observed.</p>\n  \n  <p>If such a field is non-<code>static</code>, then no reference to the field should be present in the code in a binary file, except in the class containing the field. (It will be a class rather than an interface, since an interface has only <code>static</code> fields.) The class should have code to set the field's value to V during instance creation (\u00a712.5).</p>\n</blockquote>\n\n<p>And in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.9\">\u00a713.4.9</a>:</p>\n\n<blockquote>\n  <p>If a field is a constant variable (\u00a74.12.4), and moreover is <code>static</code>, then deleting the keyword <code>final</code> or changing its value will not break compatibility with pre-existing binaries by causing them not to run, but they will not see any new value for a usage of the field unless they are recompiled.</p>\n  \n  <p>[...]</p>\n  \n  <p>The best way to avoid problems with \"inconstant constants\" in widely-distributed code is to use <code>static</code> constant variables only for values which truly are unlikely ever to change. Other than for true mathematical constants, we recommend that source code make very sparing use of <code>static</code> constant variables. </p>\n</blockquote>\n\n<p>The upshot is that if your public library exposes any constant variables, you <strong>must never</strong> change their values if your new library version is otherwise supposed to be compatible with code compiled against old versions of the library. It won't necessarily cause an error, but the existing code will probably malfunction since it will have outdated ideas about the values of constants. (If your new library version needs for classes which use it to be recompiled anyway, then changing constants doesn't cause this problem.)</p>\n\n<p>Thus, initializing a constant with a block gives you more freedom to change its value, because it prevents the compiler embedding the value into other classes.</p>\n", "title": "Difference between static modifier and static block", "tags": ["java", "static", "modifier"], "link": "http://stackoverflow.com/questions/29691513/difference-between-static-modifier-and-static-block/29727412#29727412", "post_type": "answer", "question_id": 29691513, "answer_id": 29727412}, {"body": "<p>The JLS specify that</p>\n\n<blockquote>\n  <p>If the function type's result is void, the lambda body is either a\n  statement expression (\u00a714.8) or a void-compatible block.</p>\n</blockquote>\n\n<p>Now let's see that in detail,</p>\n\n<p>Since your <code>takeBiConsumer</code> method is of void type, the lambda receiving <code>new String(\"hi\")</code> will interpret it as a block like</p>\n\n<pre><code>{\n    new String(\"hi\");\n}\n</code></pre>\n\n<p>which is valid in a void, hence the first case compile.</p>\n\n<p>However, in the case where the lambda is <code>-&gt; \"hi\"</code>, a block such as</p>\n\n<pre><code>{\n    \"hi\";\n}\n</code></pre>\n\n<p>is not valid syntax in java. Therefore the only thing to do with \"hi\" is to try and return it.</p>\n\n<pre><code>{\n    return \"hi\";\n}\n</code></pre>\n\n<p>which is not valid in a void and explain the error message</p>\n\n<pre><code>incompatible types: bad return type in lambda expression\n    java.lang.String cannot be converted to void\n</code></pre>\n\n<p>For a better understanding, note that if you change the type of <code>takeBiConsumer</code> to a String, <code>-&gt; \"hi\"</code> will be valid as it will simply try to directly return the string.</p>\n\n<hr>\n\n<p>Note that at first I tought the error was caused by the lambda being in a wrong invocation context, so I'll share this possibility with the community :</p>\n\n<p><a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27\" rel=\"nofollow\">JLS 15.27</a></p>\n\n<blockquote>\n  <p>It is a compile-time error if a lambda expression occurs in a program\n  in someplace other than an assignment context (\u00a75.2), an invocation\n  context (\u00a75.3), or a casting context (\u00a75.5).</p>\n</blockquote>\n\n<p>However in our case, we are in an <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.3\" rel=\"nofollow\"><em>invocation context</em></a> which is correct.</p>\n", "title": "Why does this Java 8 lambda fail to compile?", "tags": ["java", "lambda", "compiler-errors", "java-8", "void"], "link": "http://stackoverflow.com/questions/29262002/why-does-this-java-8-lambda-fail-to-compile/29262126#29262126", "post_type": "answer", "question_id": 29262002, "answer_id": 29262126}, {"body": "<p>The first case is ok because you are invoking a \"special\" method (a constructor) and you are no actually taking the created object. Just to make it more clear, I'll put the optional braces in your lambdas:</p>\n\n<pre><code>takeBiConsumer((String s1, String s2) -&gt; {new String(\"hi\");}); // OK\ntakeBiConsumer((String s1, String s2) -&gt; {\"hi\"}); // Error\n</code></pre>\n\n<p>And more clear, I'll translate that to the older notation:</p>\n\n<pre><code>takeBiConsumer(new BiConsumer&lt;String, String&gt;(String s1, String s2) {\n    public void accept(String s, String s2) {\n        new String(\"hi\"); // OK\n    }\n});\n\ntakeBiConsumer(new BiConsumer&lt;String, String&gt;(String s1, String s2) {\n    public void accept(String s, String s2) {\n        \"hi\"; // Here, the compiler will attempt to add a \"return\"\n              // keyword before the \"hi\", but then it will fail\n              // with \"compiler error ... bla bla ...\n              //  java.lang.String cannot be converted to void\"\n    }\n});\n</code></pre>\n\n<p>In the first case you are executing a constructor, but you are NOT returning the created object, in the second case you are attempting to return a String value, but your method in your interface <code>BiConsumer</code> returns void, hence the compiler error.</p>\n", "title": "Why does this Java 8 lambda fail to compile?", "tags": ["java", "lambda", "compiler-errors", "java-8", "void"], "link": "http://stackoverflow.com/questions/29262002/why-does-this-java-8-lambda-fail-to-compile/29262511#29262511", "post_type": "answer", "question_id": 29262002, "answer_id": 29262511}, {"body": "<p>Basicly, <code>new String(\"hi\")</code> is an executable piece of code that actually does something (it creates a new String and then returns it). The returned value can be ignored and <code>new String(\"hi\")</code> can still be used in void-return lambda to create a new String.</p>\n\n<p>However, <code>\"hi\"</code> is just a constant that doesn't do anything on it's own. The only reasonable thing to do with it in lambda body is to <em>return</em> it. But the lambda method would have to have return type <code>String</code> or <code>Object</code>, but it returns <code>void</code>, hence the <code>String cannot be casted to void</code> error.</p>\n", "title": "Why does this Java 8 lambda fail to compile?", "tags": ["java", "lambda", "compiler-errors", "java-8", "void"], "link": "http://stackoverflow.com/questions/29262002/why-does-this-java-8-lambda-fail-to-compile/29262520#29262520", "post_type": "answer", "question_id": 29262002, "answer_id": 29262520}, {"body": "<p>The short answer is: it's safe if you use them safely :)  </p>\n\n<p>The snarky answer: tell me what <em>you</em> mean by traits, and maybe I'll give you a better answer :)  </p>\n\n<p>In all seriousness, the term \"trait\" is not well-defined.  Many Java developers are most familiar with traits as they are expressed in Scala, but Scala is far from the first language to have traits, either in name or in effect.  </p>\n\n<p>For example, in Scala, traits are stateful (can have <code>var</code> variables); in Fortress they are pure behavior.  Java's interfaces with default methods are stateless; does this mean they are not traits?  (Hint: that was a trick question.)  </p>\n\n<p>Again, in Scala, traits are composed through linearization; if class <code>A</code> extends traits <code>X</code> and <code>Y</code>, then the order in which <code>X</code> and <code>Y</code> are mixed in determines how conflicts between <code>X</code> and <code>Y</code> are resolved.  In Java, this linearization mechanism is not present (it was rejected, in part, because it was too \"un-Java-like\".)  </p>\n\n<p>The proximate reason for adding default methods to interfaces was to support <em>interface evolution</em>, but we were well aware that we were going beyond that.  Whether you consider that to be \"interface evolution++\" or \"traits--\" is a matter of personal interpretation.  So, to answer your question about safety ... so long as you stick to what the mechanism actually supports, rather than trying to wishfully stretch it to something it does not support, you should be fine.</p>\n\n<p>A key design goal was that, from the perspective of the <em>client</em> of an interface, default methods should be indistinguishable from \"regular\" interface methods.  The default-ness of a method, therefore, is only interesting to the <em>designer</em> and <em>implementor</em> of the interface.  </p>\n\n<p>Here are some use cases that are well within the design goals:</p>\n\n<ul>\n<li><p>Interface evolution.  Here, we are adding a new method to an existing interface, which has a sensible default implementation in terms of existing methods on that interface.  An example would be adding the <code>forEach</code> method to <code>Collection</code>, where the default implementation is written in terms of the <code>iterator()</code> method.  </p></li>\n<li><p>\"Optional\" methods.  Here, the designer of an interface is saying \"Implementors need not implement this method if they are willing to live with the limitations in functionality that entails\".  For example, <code>Iterator.remove</code> was given a default which throws <code>UnsupportedOperationException</code>; since the vast majority of implementations of <code>Iterator</code> have this behavior anyway, the default makes this method essentially optional.  (If the behavior from <code>AbstractCollection</code> were expressed as defaults on <code>Collection</code>, we might do the same for the mutative methods.)  </p></li>\n<li><p>Convenience methods.  These are methods that are strictly for convenience, again generally implemented in terms of non-default methods on the class.  The <code>logger()</code> method in your first example is a reasonable illustration of this.</p></li>\n<li><p>Combinators.  These are compositional methods that instantiate new instances of the interface based on the current instance.  For example, the methods <code>Predicate.and()</code> or <code>Comparator.thenComparing()</code> are examples of combinators.  </p></li>\n</ul>\n\n<p>If you provide a default implementation, you should also provide some specification for the default (in the JDK, we use the <code>@implSpec</code> javadoc tag for this) to aid implementors in understanding whether they want to override the method or not.  Some defaults, like convenience methods and combinators, are almost never overridden; others, like optional methods, are often overridden.  You need to provide enough specification (not just documentation) about what the default promises to do, so the implementor can make a sensible decision about whether they need to override it.</p>\n", "title": "Java 8 default methods as traits : safe?", "tags": ["java", "java-8", "trait", "default-method"], "link": "http://stackoverflow.com/questions/28681737/java-8-default-methods-as-traits-safe/28684917#28684917", "post_type": "answer", "question_id": 28681737, "answer_id": 28684917}, {"body": "<p>You can use Arrays.stream E.g.</p>\n\n<pre><code>Arrays.stream(array);\n</code></pre>\n\n<p>You can also use <code>Stream.of</code> as mentioned by @fge , which looks like</p>\n\n<pre><code>public static&lt;T&gt; Stream&lt;T&gt; of(T... values) {\n    return Arrays.stream(values);\n}\n</code></pre>\n\n<p>But note <code>Stream.of(intArray)</code> will return <code>Stream&lt;int[]&gt;</code> whereas <code>Arrays.stream(intArr)</code> will return <code>IntStream</code> providing you pass an array of type <code>int[]</code>. So in a nutshell for primitives type you can observe the difference between 2 methods E.g.</p>\n\n<pre><code>int[] arr = {1, 2};\nStream&lt;int[]&gt; arr1 = Stream.of(arr);\n\nIntStream stream2 = Arrays.stream(arr); \n</code></pre>\n\n<p>When you pass primitive array to <code>Arrays.stream</code>, the following code is invoked</p>\n\n<pre><code>public static IntStream stream(int[] array) {\n    return stream(array, 0, array.length);\n}\n</code></pre>\n\n<p>and when you pass primitive array to <code>Stream.of</code> the following code is invoked</p>\n\n<pre><code> public static&lt;T&gt; Stream&lt;T&gt; of(T t) {\n     return StreamSupport.stream(new Streams.StreamBuilderImpl&lt;&gt;(t), false);\n }\n</code></pre>\n\n<p>Hence you get different results.</p>\n\n<p><strong>Updated</strong>: As mentioned by <a href=\"http://stackoverflow.com/users/1441122/stuart-marks\">Stuart Marks</a> comment\nThe subrange overload of <code>Arrays.stream</code> is preferable to using <code>Stream.of(array).skip(n).limit(m)</code> because the former results in a SIZED stream whereas the latter does not. The reason is that <code>limit(m)</code> doesn't know whether the size is m or less than m, whereas <code>Arrays.stream</code> does range checks and knows the exact size of the stream\nYou can read the source code for stream implementation returned by <code>Arrays.stream(array,start,end)</code>  <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8-b132/java/util/stream/ReferencePipeline.java#ReferencePipeline.Head\">here</a>, whereas for stream implementation returned by <code>Stream.of(array).skip().limit()</code> is within <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8-b132/java/util/stream/SliceOps.java#SliceOps.makeRef%28java.util.stream.AbstractPipeline%2Clong%2Clong%29\">this method</a>.</p>\n", "title": "How can I create a stream from an array?", "tags": ["java", "arrays", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/27888429/how-can-i-create-a-stream-from-an-array/27888447#27888447", "post_type": "answer", "question_id": 27888429, "answer_id": 27888447}, {"body": "<p>Alternative to @sol4me's solution:</p>\n\n<pre><code>Stream.of(theArray)\n</code></pre>\n\n<p>Of the difference between this and <code>Arrays.stream()</code>: it <em>does</em> make a difference if your array is of a primitive type. For instance, if you do:</p>\n\n<pre><code>Arrays.stream(someArray)\n</code></pre>\n\n<p>where <code>someArray</code> is a <code>long[]</code>, it will return a <code>LongStream</code>. <code>Stream.of()</code>, on the other hand, will return a <code>Stream&lt;long[]&gt;</code> with a single element.</p>\n", "title": "How can I create a stream from an array?", "tags": ["java", "arrays", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/27888429/how-can-i-create-a-stream-from-an-array/27888452#27888452", "post_type": "answer", "question_id": 27888429, "answer_id": 27888452}, {"body": "<pre><code>Stream.of(\"foo\", \"bar\", \"baz\")\n</code></pre>\n\n<p>Or, if you are already have an array, you can also do </p>\n\n<pre><code>Stream.of(array) \n</code></pre>\n\n<p>For primitive types use <code>IntStream.of</code> or <code>LongStream.of</code> etc.</p>\n", "title": "How can I create a stream from an array?", "tags": ["java", "arrays", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/27888429/how-can-i-create-a-stream-from-an-array/27888481#27888481", "post_type": "answer", "question_id": 27888429, "answer_id": 27888481}, {"body": "<p>As you have mentioned there will be 1000-10000 concurrent transaction you expecting at a time than you can store accounts on which some transaction is going on and handle concurrency</p>\n\n<p>One Solution is to allow system to create only one object of particulate account id, means that if you want to make a transaction between account \"123\" and \"456\" than your thread will create account object and in that constructor of account class we will check if any other object of account is there with particulate account id, if other object of account is there with same account id means that some transaction is going on with particulate account id so you have to wait to get the account object.</p>\n\n<p>So we can do transaction between \"123\" and \"456\" and at same time we can do transaction between \"abc\" and \"xyz\" but if at same time some other thread will try to create object of account \"123\" than system will say please wait </p>\n\n<p>for reference you can see below code </p>\n\n<p>Please note :</p>\n\n<ol>\n<li><p>dont forgote to remove your account id from locks map by call to  freeAccount(BigDecimal accId) from LockHolder class</p></li>\n<li><p>I have used HasMap instand of list because list will not be a good choice when you are randomly removing element from it(or when frequently you are updating it) </p>\n\n<pre><code>package test;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class T {\n\npublic static void main(String[] args) {\n    Account ac, ac2;\n\n    try {\n        ac = new Account(new BigDecimal(\"123\"));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    try {\n        ac2 = new Account(new BigDecimal(\"123\"));\n    } catch (Exception e) {\n        System.out.println(\"Please Wait\");\n    }\n\n}\n}\n\nclass Account {\n public Account(BigDecimal accId) throws Exception {\n    if (LockHolder.isLocked(accId)) {\n        throw new Exception();\n    } else {\n        LockHolder.setLock(accId);\n    }\n }\n}\n\nclass LockHolder {\n public static  Map&lt;BigDecimal, Integer&gt; locks = new HashMap&lt;BigDecimal, Integer&gt;();\n\n public synchronized static boolean isLocked(BigDecimal accId) {\n    return LockHolder.locks.containsKey(accId);\n }\n\n public synchronized static void setLock(BigDecimal accId) {\n    LockHolder.locks.put(accId , 1);\n }\n public synchronized static void freeAccount(BigDecimal accId) {\n    LockHolder.locks.remove(accId);\n }\n}\n</code></pre></li>\n</ol>\n", "title": "Java synchronisation: atomically moving money across account pairs?", "tags": ["java", "multithreading"], "link": "http://stackoverflow.com/questions/29280857/java-synchronisation-atomically-moving-money-across-account-pairs/29282558#29282558", "post_type": "answer", "question_id": 29280857, "answer_id": 29282558}, {"body": "<p>As stated previously, you should lock on both accounts, always in the same order. The key part, however, is ensuring both high granularity and singularity across the VM instance. This can be done using <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#intern()\" rel=\"nofollow\"><code>String.intern()</code></a>:</p>\n\n<pre><code>public boolean transfer(Account from, Account to, BigDecimal amount) {\n    String fromAccountId = from.id.toString().intern();\n    String toAccountId = to.id.toString().intern();\n    String lock1, lock2;\n\n    if (from.id &lt; to.id) {\n       lock1 = fromAccountId;\n       lock2 = toAccountId;\n    } else {\n       lock1 = toAccountId;\n       lock2 = fromAccountId;\n    }\n\n    // synchronizing from this point, since balances are checked\n    synchronized(lock1) {\n        synchronized(lock2) {\n            BigDecimal fromValue = from.getAmount();\n            if (amount.compareTo(fromValue) &lt; 0)\n                 return false;\n            BigDecimal toValue = to.getAmount();\n            from.setAmount(fromValue.add(amount.negate()));\n            to.setAmount(toValue.add(amount));\n            return true;\n        }\n    }\n}\n</code></pre>\n", "title": "Java synchronisation: atomically moving money across account pairs?", "tags": ["java", "multithreading"], "link": "http://stackoverflow.com/questions/29280857/java-synchronisation-atomically-moving-money-across-account-pairs/29382161#29382161", "post_type": "answer", "question_id": 29280857, "answer_id": 29382161}, {"body": "<p>The only solution I come up with for the moment is by implementing your own custom collector. </p>\n\n<p>Before reading the solution, I want to add a few notes about this. I took this question more as a programming exercise, I'm not sure if it can be done with a parallel stream. </p>\n\n<p>So you have to be aware that it'll <strong>silently break</strong> if the pipeline is run in <strong>parallel</strong>. </p>\n\n<p>This is <strong>not</strong> a desirable behavior and should be <strong>avoided</strong>. This is why I throw an exception in the combiner part (instead of <code>(l1, l2) -&gt; {l1.addAll(l2); return l1;}</code>), as it's used in parallel when combining the two lists, so that you have an exception instead of a wrong result.</p>\n\n<p>Also this is not very efficient due to list copying (although it uses a native method to copy the underlying array).</p>\n\n<p>So here's the collector implementation:</p>\n\n<pre><code>private static Collector&lt;String, List&lt;List&lt;String&gt;&gt;, List&lt;List&lt;String&gt;&gt;&gt; splitBySeparator(Predicate&lt;String&gt; sep) {\n    final List&lt;String&gt; current = new ArrayList&lt;&gt;();\n    return Collector.of(() -&gt; new ArrayList&lt;List&lt;String&gt;&gt;(),\n                        (l, elem) -&gt; {if(sep.test(elem)){l.add(new ArrayList&lt;&gt;(current)); current.clear();} else current.add(elem);},\n                        (l1, l2) -&gt; {throw new RuntimeException(\"Should not run this in parallel\");},\n                        l -&gt; {if(current.size() != 0) l.add(current); return l;});\n}\n</code></pre>\n\n<p>and how to use it:</p>\n\n<pre><code>List&lt;List&lt;String&gt;&gt; ll = list.stream().collect(splitBySeparator(Objects::isNull));\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[[a, b], [c], [d, e]]\n</code></pre>\n\n<p><hr/>\nAs the <a href=\"http://stackoverflow.com/a/29098447/1587046\">answer of Joop Eggen is out</a>, it appears that it can be done in parallel (give him credit for that!). With that it reduces the custom collector implementation to:</p>\n\n<pre><code>private static Collector&lt;String, List&lt;List&lt;String&gt;&gt;, List&lt;List&lt;String&gt;&gt;&gt; splitBySeparator(Predicate&lt;String&gt; sep) {\n    return Collector.of(() -&gt; new ArrayList&lt;List&lt;String&gt;&gt;(Arrays.asList(new ArrayList&lt;&gt;())),\n                        (l, elem) -&gt; {if(sep.test(elem)){l.add(new ArrayList&lt;&gt;());} else l.get(l.size()-1).add(elem);},\n                        (l1, l2) -&gt; {l1.get(l1.size() - 1).addAll(l2.remove(0)); l1.addAll(l2); return l1;});\n}\n</code></pre>\n\n<p>which let the paragraph about parallelism a bit obsolete, however I let it as it can be a good reminder.</p>\n\n<hr/>\n\n<p>Note that the Stream API is not always a substitute. There are tasks that are easier and more suitable using the streams and there are tasks that are not. In your case, you could also create a utility method for that:</p>\n\n<pre><code>private static &lt;T&gt; List&lt;List&lt;T&gt;&gt; splitBySeparator(List&lt;T&gt; list, Predicate&lt;? super T&gt; predicate) {\n    final List&lt;List&lt;T&gt;&gt; finalList = new ArrayList&lt;&gt;();\n    int fromIndex = 0;\n    int toIndex = 0;\n    for(T elem : list) {\n        if(predicate.test(elem)) {\n            finalList.add(list.subList(fromIndex, toIndex));\n            fromIndex = toIndex + 1;\n        }\n        toIndex++;\n    }\n    if(fromIndex != toIndex) {\n        finalList.add(list.subList(fromIndex, toIndex));\n    }\n    return finalList;\n}\n</code></pre>\n\n<p>and call it like <code>List&lt;List&lt;String&gt;&gt; list = splitBySeparator(originalList, Objects::isNull);</code>. </p>\n\n<p>It can be improved for checking edge-cases. </p>\n", "title": "Splitting List into sublists along elements", "tags": ["java", "list", "java-8", "collectors"], "link": "http://stackoverflow.com/questions/29095967/splitting-list-into-sublists-along-elements/29096777#29096777", "post_type": "answer", "question_id": 29095967, "answer_id": 29096777}, {"body": "<p><em>Please do not vote. I do not have enough place to explain this in comments</em>.</p>\n\n<p>This is a solution with a <code>Stream</code> and a <code>foreach</code> but this is strictly equivalent to Alexis's solution or a <code>foreach</code> loop (and less clear, and I could not get rid of the copy constructor) :</p>\n\n<pre><code>List&lt;List&lt;String&gt;&gt; result = new ArrayList&lt;&gt;();\nfinal List&lt;String&gt; current = new ArrayList&lt;&gt;();\nlist.stream().forEach(s -&gt; {\n      if (s == null) {\n        result.add(new ArrayList&lt;&gt;(current));\n        current.clear();\n      } else {\n        current.add(s);\n      }\n    }\n);\nresult.add(current);\n\nSystem.out.println(result);\n</code></pre>\n\n<p>I understand that you want to find a more elegant solution with Java 8 but I truly think that it has not been designed for this case. And as said by Mr spoon, highly prefer the naive way in this case.</p>\n", "title": "Splitting List into sublists along elements", "tags": ["java", "list", "java-8", "collectors"], "link": "http://stackoverflow.com/questions/29095967/splitting-list-into-sublists-along-elements/29097694#29097694", "post_type": "answer", "question_id": 29095967, "answer_id": 29097694}, {"body": "<p>The solution is to use <code>Stream.collect</code>. To create a Collector using its builder pattern is already given as solution. The alternative is the other overloaded <code>collect</code> being a tiny bit more primitive.</p>\n\n<pre><code>    List&lt;String&gt; strings = Arrays.asList(\"a\", \"b\", null, \"c\", null, \"d\", \"e\");\n    List&lt;List&lt;String&gt;&gt; groups = strings.stream()\n            .collect(() -&gt; {\n                List&lt;List&lt;String&gt;&gt; list = new ArrayList&lt;&gt;();\n                list.add(new ArrayList&lt;&gt;());\n                return list;\n            },\n            (list, s) -&gt; {\n                if (s == null) {\n                    list.add(new ArrayList&lt;&gt;());\n                } else {\n                    list.get(list.size() - 1).add(s);\n                }\n            },\n            (list1, list2) -&gt; {\n                // Simple merging of partial sublists would\n                // introduce a false level-break at the beginning.\n                list1.get(list1.size() - 1).addAll(list2.remove(0));\n                list1.addAll(list2);\n            });\n</code></pre>\n\n<p>As one sees, I make a list of string lists, where there always is at least one last (empty) string list.</p>\n\n<ul>\n<li>The first function creates a starting list of string lists. <strong>It specifies the result (typed) object.</strong></li>\n<li>The second function is called to process each element. <strong>It is an action on the partial result and an element.</strong></li>\n<li>The third is not really used, it comes into play on parallelising the processing, when partial results must be combined.</li>\n</ul>\n\n<hr>\n\n<p><strong><em>A solution with an accumulator:</em></strong></p>\n\n<p><em>As @StuartMarks points out, the combiner does not fullfill the contract for parallelism.</em></p>\n\n<p>Due to the comment of @ArnaudDenoyelle a version using <code>reduce</code>.</p>\n\n<pre><code>    List&lt;List&lt;String&gt;&gt; groups = strings.stream()\n            .reduce(new ArrayList&lt;List&lt;String&gt;&gt;(),\n                    (list, s) -&gt; {\n                        if (list.isEmpty()) {\n                            list.add(new ArrayList&lt;&gt;());\n                        }\n                        if (s == null) {\n                            list.add(new ArrayList&lt;&gt;());\n                        } else {\n                            list.get(list.size() - 1).add(s);\n                        }\n                        return list;\n                    },\n                    (list1, list2) -&gt; {\n                            list1.addAll(list2);\n                            return list1;\n                    });\n</code></pre>\n\n<ul>\n<li>The first parameter is the accumulated object.</li>\n<li>The second function accumulates.</li>\n<li>The third is the aforementioned combiner.</li>\n</ul>\n", "title": "Splitting List into sublists along elements", "tags": ["java", "list", "java-8", "collectors"], "link": "http://stackoverflow.com/questions/29095967/splitting-list-into-sublists-along-elements/29098447#29098447", "post_type": "answer", "question_id": 29095967, "answer_id": 29098447}, {"body": "<p>This is a very interesting problem. I came up with a one line solution. It might not very performant but it works.</p>\n\n<pre><code>List&lt;String&gt; list = Arrays.asList(\"a\", \"b\", null, \"c\", null, \"d\", \"e\");\nCollection&lt;List&lt;String&gt;&gt; cl = IntStream.range(0, list.size()).filter(i -&gt; list.get(i) != null).boxed().collect(Collectors.groupingBy(i -&gt; IntStream.range(0, i).reduce(0, (result, idx) -&gt; result + (list.get(idx) == null ? 1 : 0)), Collectors.mapping(i -&gt; list.get(i), Collectors.toList()))).values();\n</code></pre>\n\n<p>It is a similar idea that @Rohit Jain came up with. I'm grouping the space between the null values.\nIf you really want a <code>List&lt;List&lt;String&gt;&gt;</code> you may append:</p>\n\n<pre><code>List&lt;List&lt;String&gt;&gt; ll = cl.stream().collect(Collectors.toList());\n</code></pre>\n", "title": "Splitting List into sublists along elements", "tags": ["java", "list", "java-8", "collectors"], "link": "http://stackoverflow.com/questions/29095967/splitting-list-into-sublists-along-elements/29099896#29099896", "post_type": "answer", "question_id": 29095967, "answer_id": 29099896}, {"body": "<p>Although there are several answers already, and an accepted answer, there are still a couple points missing from this topic. First, the consensus seems to be that solving this problem using streams is merely an exercise, and that the conventional for-loop approach is preferable. Second, the answers given thus far have overlooked an approach using array or vector-style techniques that I think improves the streams solution considerably.</p>\n\n<p>First, here's a conventional solution, for purposes of discussion and analysis:</p>\n\n<pre><code>static List&lt;List&lt;String&gt;&gt; splitConventional(List&lt;String&gt; input) {\n    List&lt;List&lt;String&gt;&gt; result = new ArrayList&lt;&gt;();\n    int prev = 0;\n\n    for (int cur = 0; cur &lt; input.size(); cur++) {\n        if (input.get(cur) == null) {\n            result.add(input.subList(prev, cur));\n            prev = cur + 1;\n        }\n    }\n    result.add(input.subList(prev, input.size()));\n\n    return result;\n}\n</code></pre>\n\n<p>This is mostly straightforward but there's a bit of subtlety. One point is that a pending sublist from <code>prev</code> to <code>cur</code> is always open. When we encounter <code>null</code> we close it, add it to the result list, and advance <code>prev</code>. After the loop we close the sublist unconditionally.</p>\n\n<p>Another observation is that this is a loop over indexes, not over the values themselves, thus we use an arithmetic for-loop instead of the enhanced \"for-each\" loop. But it suggests that we can stream using the indexes to generate subranges instead of streaming over values and putting the logic into the collector (as was done by <a href=\"http://stackoverflow.com/a/29098447/1441122\">Joop Eggen's proposed solution</a>).</p>\n\n<p>Once we've realized that, we can see that each position of <code>null</code> in the input is the delimiter for a sublist: it's the right end of the sublist to the left, and it (plus one) is the left end of the sublist to the right. If we can handle the edge cases, it leads to an approach where we find the indexes at which <code>null</code> elements occur, map them to sublists, and collect the sublists.</p>\n\n<p>The resulting code is as follows:</p>\n\n<pre><code>static List&lt;List&lt;String&gt;&gt; splitStream(List&lt;String&gt; input) {\n    int[] indexes = Stream.of(IntStream.of(-1),\n                              IntStream.range(0, input.size())\n                                       .filter(i -&gt; input.get(i) == null),\n                              IntStream.of(input.size()))\n                          .flatMapToInt(s -&gt; s)\n                          .toArray();\n\n    return IntStream.range(0, indexes.length-1)\n                    .mapToObj(i -&gt; input.subList(indexes[i]+1, indexes[i+1]))\n                    .collect(toList());\n}\n</code></pre>\n\n<p>Getting the indexes at which <code>null</code> occurs is pretty easy. The stumbling block is adding <code>-1</code> at the left and <code>size</code> at the right end. I've opted to use <code>Stream.of</code> to do the appending and then <code>flatMapToInt</code> to flatten them out. (I tried several other approaches but this one seemed like the cleanest.)</p>\n\n<p>It's a bit more convenient to use arrays for the indexes here. First, the notation for accessing an array is nicer than for a List: <code>indexes[i]</code> vs. <code>indexes.get(i)</code>. Second, using an array avoids boxing.</p>\n\n<p>At this point, each index value in the array (except for the last) is one less than the beginning position of a sublist. The index to its immediate right is the end of the sublist. We simply stream over the array and map each pair of indexes into a sublist and collect the output.</p>\n\n<p><strong>Discussion</strong></p>\n\n<p>The streams approach is slightly shorter than the for-loop version, but it's denser. The for-loop version is familiar, because we do this stuff in Java all the time, but if you're not already aware of what this loop is supposed to be doing, it's not obvious. You might have to simulate a few loop executions before you figure out what <code>prev</code> is doing and why the open sublist has to be closed after the end of the loop. (I initially forgot to have it, but I caught this in testing.)</p>\n\n<p>The streams approach is, I think, easier to conceptualize what's going on: get a list (or an array) that indicates the boundaries between sublists. That's an easy streams two-liner. The difficulty, as I mentioned above, is finding a way to tack the edge values onto the ends. If there were a better syntax for doing this, e.g.,</p>\n\n<pre><code>    // Java plus pidgin Scala\n    int[] indexes =\n        [-1] ++ IntStream.range(0, input.size())\n                         .filter(i -&gt; input.get(i) == null) ++ [input.size()];\n</code></pre>\n\n<p>it would make things a lot less cluttered. (What we really need is array or list comprehension.) Once you have the indexes, it's a simple matter to map them into actual sublists and collect them into the result list.</p>\n\n<p>And of course this is safe when run in parallel.</p>\n\n<p><strong>UPDATE 2016-02-06</strong></p>\n\n<p>Here's a nicer way to create the array of sublist indexes. It's based on the same principles, but it adjusts the index range and adds some conditions to the filter to avoid having to concatenate and flatmap the indexes.</p>\n\n<pre><code>static List&lt;List&lt;String&gt;&gt; splitStream(List&lt;String&gt; input) {\n    int sz = input.size();\n    int[] indexes =\n        IntStream.rangeClosed(-1, sz)\n                 .filter(i -&gt; i == -1 || i == sz || input.get(i) == null)\n                 .toArray();\n\n    return IntStream.range(0, indexes.length-1)\n                    .mapToObj(i -&gt; input.subList(indexes[i]+1, indexes[i+1]))\n                    .collect(toList());\n}\n</code></pre>\n", "title": "Splitting List into sublists along elements", "tags": ["java", "list", "java-8", "collectors"], "link": "http://stackoverflow.com/questions/29095967/splitting-list-into-sublists-along-elements/29111023#29111023", "post_type": "answer", "question_id": 29095967, "answer_id": 29111023}, {"body": "<p>The behaviour is (somewhat) documented in the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/AbstractSet.html#removeAll-java.util.Collection-\">javadoc</a>:</p>\n\n<blockquote>\n  <p>This implementation determines which is the smaller of this set and the specified collection, by invoking the size method on each. <strong><em>If this set has fewer elements</em></strong>, then the implementation iterates over this set, checking each element returned by the iterator in turn to see <strong><em>if it is contained in the specified collection</em></strong>. If it is so contained, it is removed from this set with the iterator's remove method. If the specified collection has fewer elements, then the implementation iterates over the specified collection, removing from this set each element returned by the iterator, using this set's remove method.</p>\n</blockquote>\n\n<p>What this means in practice, when you call <code>source.removeAll(removals);</code>: </p>\n\n<ul>\n<li><p>if the <code>removals</code> collection is of a smaller size than <code>source</code>, the <code>remove</code> method of <code>HashSet</code> is called, which is fast.</p></li>\n<li><p>if the <code>removals</code> collection is of equal or larger size than the <code>source</code>, then <code>removals.contains</code> is called, which is slow for an ArrayList.</p></li>\n</ul>\n\n<p>Quick fix:</p>\n\n<pre><code>Collection&lt;Integer&gt; removals = new HashSet&lt;Integer&gt;();\n</code></pre>\n\n<p>Note that there is <a href=\"https://bugs.openjdk.java.net/browse/JDK-6982173\">an open bug</a> that is very similar to what you describe. The bottom line seems to be that it is probably a poor choice but can't be changed because it is documented in the javadoc.</p>\n\n<hr>\n\n<p>For reference, this is the code of <code>removeAll</code> (in Java 8 - haven't checked other versions):</p>\n\n<pre><code>public boolean removeAll(Collection&lt;?&gt; c) {\n    Objects.requireNonNull(c);\n    boolean modified = false;\n\n    if (size() &gt; c.size()) {\n        for (Iterator&lt;?&gt; i = c.iterator(); i.hasNext(); )\n            modified |= remove(i.next());\n    } else {\n        for (Iterator&lt;?&gt; i = iterator(); i.hasNext(); ) {\n            if (c.contains(i.next())) {\n                i.remove();\n                modified = true;\n            }\n        }\n    }\n    return modified;\n}\n</code></pre>\n", "title": "HashSet removeAll method is surprisingly slow", "tags": ["java", "performance", "hashset"], "link": "http://stackoverflow.com/questions/28671903/hashset-removeall-method-is-surprisingly-slow/28672583#28672583", "post_type": "answer", "question_id": 28671903, "answer_id": 28672583}, {"body": "<p>I prefer the second way.</p>\n\n<p>When you use the first way, if you decide to use a parallel stream to improve performance, you'll have no control over the order in which the elements will be added to the output list by <code>forEach</code>. </p>\n\n<p>When you use <code>toList</code>, the Streams API will preserve the order even if you use a parallel stream.</p>\n", "title": "Java 8 - Best way to transform a list: map or foreach?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/28319064/java-8-best-way-to-transform-a-list-map-or-foreach/28319148#28319148", "post_type": "answer", "question_id": 28319064, "answer_id": 28319148}, {"body": "<p>Don't worry about any performance differences, they're going to be minimal in this case normally.</p>\n\n<p>Method 2 is preferable because</p>\n\n<ol>\n<li><p>it doesn't require mutating a collection that exists outside the lambda expression,</p></li>\n<li><p>it's more readable because the different steps that are performed in the collection pipeline are written sequentially (first a filter operation, then a map operation, then collecting the result),\n(for more info on the benefits of collection pipelines, see Martin Fowler's <a href=\"http://martinfowler.com/articles/collection-pipeline/\">excellent article</a>) </p></li>\n<li><p>you can easily change the way values are collected by replacing the <code>Collector</code> that is used.  In some cases you may need to write your own <code>Collector</code>, but then the benefit is that you can easily reuse that.</p></li>\n</ol>\n", "title": "Java 8 - Best way to transform a list: map or foreach?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/28319064/java-8-best-way-to-transform-a-list-map-or-foreach/28319221#28319221", "post_type": "answer", "question_id": 28319064, "answer_id": 28319221}, {"body": "<p>One of the main benefits of using streams is that it gives the ability to process data in a declarative way, that is, using a functional style of programming. It also gives multi-threading capability for free meaning there is no need to write any extra multi-threaded code to make your stream concurrent.</p>\n\n<p>Assuming the reason you are exploring this style of programming is that you want to exploit these benefits then your first code sample is potentially not functional since the <code>foreach</code> method is classed as being terminal (meaning that it can produce side-effects).</p>\n\n<p>The second way is preferred from functional programming point of view since the map function can accept stateless lambda functions. More explicitly, the lambda passed to the map function should be</p>\n\n<ol>\n<li>Non-interfering, meaning that the function should not alter the source of the stream if it is non-concurrent (e.g. <code>ArrayList</code>).</li>\n<li>Stateless to avoid unexpected results when doing parallel processing (caused by thread scheduling differences).</li>\n</ol>\n\n<p>Another benefit with the second approach is if the stream is parallel and the collector is concurrent and unordered then these characteristics can provide useful hints to the reduction operation to do the collecting concurrently.</p>\n", "title": "Java 8 - Best way to transform a list: map or foreach?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/28319064/java-8-best-way-to-transform-a-list-map-or-foreach/28323553#28323553", "post_type": "answer", "question_id": 28319064, "answer_id": 28323553}, {"body": "<p>There is a third option - using <code>stream().toArray()</code> - see comments under <a href=\"http://stackoverflow.com/questions/28782165/why-didnt-stream-have-a-tolist-method\">why didn't stream have a toList method</a>. It turns out to be slower than forEach() or collect(), and less expressive. It might be optimised in later JDK builds, so adding it here just in case.</p>\n\n<p>assuming <code>List&lt;String&gt;</code></p>\n\n<pre><code>    myFinalList = Arrays.asList(\n            myListToParse.stream()\n                    .filter(Objects::nonNull)\n                    .map(this::doSomething)\n                    .toArray(String[]::new)\n    );\n</code></pre>\n\n<p>with a micro-micro benchmark, 1M entries, 20% nulls and simple transform in doSomething()</p>\n\n<pre><code>private LongSummaryStatistics benchmark(final String testName, final Runnable methodToTest, int samples) {\n    long[] timing = new long[samples];\n    for (int i = 0; i &lt; samples; i++) {\n        long start = System.currentTimeMillis();\n        methodToTest.run();\n        timing[i] = System.currentTimeMillis() - start;\n    }\n    final LongSummaryStatistics stats = Arrays.stream(timing).summaryStatistics();\n    System.out.println(testName + \": \" + stats);\n    return stats;\n}\n</code></pre>\n\n<p>the results are</p>\n\n<p>parallel:</p>\n\n<pre><code>toArray: LongSummaryStatistics{count=10, sum=3721, min=321, average=372,100000, max=535}\nforEach: LongSummaryStatistics{count=10, sum=3502, min=249, average=350,200000, max=389}\ncollect: LongSummaryStatistics{count=10, sum=3325, min=265, average=332,500000, max=368}\n</code></pre>\n\n<p>sequential:</p>\n\n<pre><code>toArray: LongSummaryStatistics{count=10, sum=5493, min=517, average=549,300000, max=569}\nforEach: LongSummaryStatistics{count=10, sum=5316, min=427, average=531,600000, max=571}\ncollect: LongSummaryStatistics{count=10, sum=5380, min=444, average=538,000000, max=557}\n</code></pre>\n\n<p>parallel without nulls and filter (so the stream is <code>SIZED</code>):\ntoArrays has the best performance in such case, and <code>.forEach()</code> fails with \"indexOutOfBounds\" on the recepient ArrayList, had to replace with <code>.forEachOrdered()</code></p>\n\n<pre><code>toArray: LongSummaryStatistics{count=100, sum=75566, min=707, average=755,660000, max=1107}\nforEach: LongSummaryStatistics{count=100, sum=115802, min=992, average=1158,020000, max=1254}\ncollect: LongSummaryStatistics{count=100, sum=88415, min=732, average=884,150000, max=1014}\n</code></pre>\n", "title": "Java 8 - Best way to transform a list: map or foreach?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/28319064/java-8-best-way-to-transform-a-list-map-or-foreach/29000802#29000802", "post_type": "answer", "question_id": 28319064, "answer_id": 29000802}, {"body": "<h1>Once given more thought</h1>\n\n<p>In hindsight it sounds like they were looking for the <a href=\"http://stackoverflow.com/questions/341971/what-is-the-execute-around-idiom\">execute around pattern</a>. They're usually used to do things like enforce closing of streams. This is also more relevant due to this line:</p>\n\n<blockquote>\n  <p>Is there a design pattern to handle these kind of situations?</p>\n</blockquote>\n\n<p>The idea is you give the thing that does the \"executing around\" some class to do somethings with. You'll probably use <code>Runnable</code> but it's not necessary. <em>(<code>Runnable</code> makes the most sense and you'll see why soon.)</em> In your <code>StopWatch</code> class add some method like this</p>\n\n<pre><code>public long measureAction(Runnable r) {\n    start();\n    r.run();\n    stop();\n    return getTime();\n}\n</code></pre>\n\n<p>You would then call it like this</p>\n\n<pre><code>StopWatch stopWatch = new StopWatch();\nRunnable r = new Runnable() {\n    @Override\n    public void run() {\n        // Put some tasks here you want to measure.\n    }\n};\nlong time = stopWatch.measureAction(r);\n</code></pre>\n\n<p>This makes it fool proof. You don't have to worry about handling stop before start or people forgetting to call one and not the other, etc. The reason <code>Runnable</code> is nice is because</p>\n\n<ol>\n<li>Standard java class, not your own or third party</li>\n<li>End users can put whatever they need in the <code>Runnable</code> to be done.</li>\n</ol>\n\n<p>(If you were using it to enforce stream closing then you could put the actions that need to be done with a database connection inside so the end user doesn't need to worry about how to open and close it and you simultaneously force them to close it properly.)</p>\n\n<p>If you wanted, you could make some <code>StopWatchWrapper</code> instead leave <code>StopWatch</code> unmodified. You could also make <code>measureAction(Runnable)</code> not return a time and make <code>getTime()</code> public instead.</p>\n\n<p>The Java 8 way to calling it is even simpler</p>\n\n<pre><code>StopWatch stopWatch = new StopWatch();\nlong time = stopWatch.measureAction(() - &gt; {/* Measure stuff here */});\n</code></pre>\n\n<blockquote>\n  <p><strong>A third (hopefully final) thought:</strong> it seems what the interviewer was looking for and what is being upvoted the most is throwing exceptions based on state (e.g., if <code>stop()</code> is called before <code>start()</code> or <code>start()</code> after <code>stop()</code>). This is a fine practice and in fact, depending on the methods in <code>StopWatch</code> having a visibility other than private/protected, it's probably better to have than not have. My one issue with this is that <em>throwing exceptions alone will not <strong>enforce</strong> a method call sequence.</em></p>\n  \n  <p>For example, consider this:</p>\n\n<pre><code>class StopWatch {\n    boolean started = false;\n    boolean stopped = false;\n\n    // ...\n\n    public void start() {\n        if (started) {\n            throw new IllegalStateException(\"Already started!\");\n        }\n        started = true;\n        // ...\n    }\n\n    public void stop() {\n        if (!started) {\n            throw new IllegalStateException(\"Not yet started!\");\n        }\n        if (stopped) {\n            throw new IllegalStateException(\"Already stopped!\");\n        }\n        stopped = true;\n        // ...\n    }\n\n    public long getTime() {\n        if (!started) {\n            throw new IllegalStateException(\"Not yet started!\");\n        }\n        if (!stopped) {\n            throw new IllegalStateException(\"Not yet stopped!\");\n        }\n        stopped = true;\n        // ...\n    }\n}\n</code></pre>\n  \n  <p>Just because it's throwing <code>IllegalStateException</code> doesn't mean that the proper sequence is enforced, <strong>it just means improper sequences are denied</strong> (and I think we can all agree exceptions are annoying, luckily this is not a checked exception).</p>\n  \n  <p>The only way I know to truly enforce that the methods are called correctly is to do it yourself with the execute around pattern or the other suggestions that do things like return <code>RunningStopWatch</code> and <code>StoppedStopWatch</code> that I presume have only one method, but this seems overly complex (and OP mentioned that the interface couldn't be changed, admittedly the non-wrapper suggestion I made does this though). So to the best of my knowledge there's no way to <strong><em>enforce</em></strong> the proper order without modifying the interface or adding more classes.</p>\n  \n  <p>I guess it really depends on what people define \"enforce a method call sequence\" to mean. If only the exceptions are thrown then the below compiles</p>\n\n<pre><code>StopWatch stopWatch = new StopWatch();\nstopWatch.getTime();\nstopWatch.stop();\nstopWatch.start();\n</code></pre>\n  \n  <p>True it won't <em>run</em>, but it just seems so much simpler to hand in a <code>Runnable</code> and make those methods private, let the other one relax and handle the pesky details yourself. Then there's no guess work. With this class it's obvious the order, but if there were more methods or the names weren't so obvious it can begin to be a headache.</p>\n</blockquote>\n\n<hr>\n\n<h1>Original answer</h1>\n\n<blockquote>\n  <p><strong>More hindsight edit</strong>: OP mentions in a comment,</p>\n  \n  <blockquote>\n    <p>\"The three methods should remain intact and are only interface to the programmer. The class members and method implementation can change.\"</p>\n  </blockquote>\n  \n  <p>So the below is wrong because it removes something from the interface. (Technically, you could implement it as an empty method but that seems to be like a dumb thing to do and too confusing.) I kind of like this answer if the restriction wasn't there and it does seem to be another \"fool proof\" way to do it so I will leave it.</p>\n</blockquote>\n\n<p>To me something like this seems to be good.</p>\n\n<pre><code>class StopWatch {\n\n    private final long startTime;\n\n    public StopWatch() {\n        startTime = ...\n    }\n\n    public long stop() {\n        currentTime = ...\n        return currentTime - startTime;\n    }\n}\n</code></pre>\n\n<p>The reason I believe this to be good is the recording is during object creation so it can't be forgotten or done out of order (can't call <code>stop()</code> method if it doesn't exist).</p>\n\n<p>One flaw is probably the naming of <code>stop()</code>. At first I thought maybe <code>lap()</code> but that usually implies a restarting or some sort (or at least recording since last lap/start). Perhaps <code>read()</code> would be better? This mimics the action of looking at the time on a stop watch. I chose <code>stop()</code> to keep it similar to the original class.</p>\n\n<p>The only thing I'm not 100% sure about is how to get the time. To be honest that seems to be a more minor detail. As long as both <code>...</code> in the above code obtain current time the same way it should be fine.</p>\n", "title": "Java Design Issue: Enforce method call sequence", "tags": ["java", "oop", "design-patterns"], "link": "http://stackoverflow.com/questions/30888581/java-design-issue-enforce-method-call-sequence/30897102#30897102", "post_type": "answer", "question_id": 30888581, "answer_id": 30897102}, {"body": "<p>The Oracle documentation about Enum says (first line):</p>\n\n<blockquote>\n  <p>An enum type is a special data type that enables for a variable to be a set of predefined constants. <em>The variable must be equal to one of the values that have been predefined</em> for it. Common examples include compass directions (values of NORTH, SOUTH, EAST, and WEST) and the days of the week.</p>\n</blockquote>\n\n<p>If this is true then, yes, your <code>enum1.name() == enum2.name()</code> is guaranteed to be true if the names are the same.</p>\n\n<p>Also, in the method <code>name()</code> javadoc:</p>\n\n<blockquote>\n  <p>public final String name() \n   \n  Returns the name of this enum constant, exactly as declared in its enum declaration. Most programmers should use the toString() method in preference to this one, as the toString method may return a more user-friendly name. This method is designed primarily for use in specialized situations where correctness depends on getting the exact name, which <em>will not vary</em> from release to release.\n   \n   \n     Returns: the name of this enum constant</p>\n</blockquote>\n\n<p>For example, if you had two enums, <code>Days</code> and <code>MyDays</code>, where SUNDAY is a common value, == between the enum object values, SUNDAY will return true as you are comparing two strings - see the working example in <a href=\"http://ideone.com/U1Bmcw\" rel=\"nofollow\">http://ideone.com/U1Bmcw</a>.</p>\n\n<pre><code>/* Name of the class has to be \"Main\" only if the class is public. */\nclass Ideone\n{\n    public static enum Day{SUNDAY, MONDAY, TUESDAY};\n    public static enum MyDays{SUNDAY};\n\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        MyDays m = Ideone.MyDays.SUNDAY;\n        Day d = Ideone.Day.SUNDAY;\n\n        System.out.println(d.name() == m.name());\n    }\n}\n</code></pre>\n", "title": "Are enum names interned in Java?", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/27908213/are-enum-names-interned-in-java/27908294#27908294", "post_type": "answer", "question_id": 27908213, "answer_id": 27908294}, {"body": "<p>With strings you're going to want to use the equals method of Strings. That aside, you already have the enum that you could compare with the equality operator. Under what scenario would this arise?</p>\n\n<p>That being said, yes, the .equals method will return true if they are the same.</p>\n\n<p>I'm not sure about equality operator, and without looking it up, I can tell you that it's poor programming to use it if it is.</p>\n", "title": "Are enum names interned in Java?", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/27908213/are-enum-names-interned-in-java/27908302#27908302", "post_type": "answer", "question_id": 27908213, "answer_id": 27908302}, {"body": "<p>Although there is no explicit guarantee of this, the end result is bound to be such that the comparison always succeeds for <code>enum</code> constants with identical names:</p>\n\n<pre><code>enum A {enum1};\nenum B {enum1};\nSystem.out.println(A.enum1.name() == B.enum1.name()); // Prints \"true\"\n</code></pre>\n\n<p>The reason for this is that Java compiler constructs subclasses of <code>Enum</code> in such a way that they end up calling <code>Enum</code>'s sole protected constructor, passing it the name of <code>enum</code> value:</p>\n\n<pre><code>protected Enum(String name, int ordinal);\n</code></pre>\n\n<p>The name is embedded into the generated code in the form of a string literal. According to <code>String</code> documentation,</p>\n\n<blockquote>\n  <p>All literal strings and string-valued constant expressions are interned.</p>\n</blockquote>\n\n<p>This amounts to an implicit guarantee of your expression succeeding when names of <code>enum</code> constants are identical. However, I would not rely on this behavior, and use <code>equals(...)</code> instead, because anyone reading my code would be scratching his head, thinking that I made a mistake. </p>\n", "title": "Are enum names interned in Java?", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/27908213/are-enum-names-interned-in-java/27908402#27908402", "post_type": "answer", "question_id": 27908213, "answer_id": 27908402}, {"body": "<p><a href=\"http://stackoverflow.com/a/27845506\">Pavel Horal's answer</a> is nice. </p>\n\n<p>As he says, the word \"file\" has totally different (practically unrelated) meanings in <code>URL#getFile</code> vs  <code>java.io.File</code> - may be that's part of the confusion.</p>\n\n<p>Just to add:</p>\n\n<ul>\n<li><p>A  <strong>resource</strong> in Java is an abstract concept, a source of data that can be read. The location (or address) of a resource is represented in Java by a <strong><code>URL</code></strong> object.</p></li>\n<li><p>A  <strong>resource</strong> can correspond to a regular file in the local filesystem (specifically, when its <code>URL</code> begins with <code>file://</code>).  But a resource is more general (it can be also some file stored in a jar, or some data to be read from the network, or from memory, or...). And it's also more limited, because a <code>File</code> (besides being other things than a regular file: a directory, a link) can also be created and writen to.</p></li>\n<li><p>Remember in Java a <strong><code>File</code></strong> object does not really represents \"a file\" but the location (the full name, with path) of a file. So, a <code>File</code> object allows you to locate (and open) a file, as a <code>URL</code>allows you to access (and open) a resource.  (There is no <code>Resource</code> class in Java to represent a resource, but neither there is one to represent a file! once more : <code>File</code> is not a file, it's the path of a file). </p></li>\n</ul>\n", "title": "What&#39;s the difference between a Resource, URI, URL, Path and File in Java?", "tags": ["java", "url", "terminology"], "link": "http://stackoverflow.com/questions/27845223/whats-the-difference-between-a-resource-uri-url-path-and-file-in-java/27846417#27846417", "post_type": "answer", "question_id": 27845223, "answer_id": 27846417}, {"body": "<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals(java.lang.Object,%20java.lang.Object)\"><code>Objects.equals()</code></a>:</p>\n\n<pre><code>return (a == b) || (a != null &amp;&amp; a.equals(b));\n</code></pre>\n\n<p>Very simple, self-explaining and elegant.</p>\n", "title": "How to compare two Strings when both can be null?", "tags": ["java", "equals", "equality"], "link": "http://stackoverflow.com/questions/30081520/how-to-compare-two-strings-when-both-can-be-null/30081600#30081600", "post_type": "answer", "question_id": 30081520, "answer_id": 30081600}, {"body": "<p>Your reasoning is that <code>Double.POSITIVE_INFINITY</code> should not be equal to itself because it is \u201clikely\u201d to have been obtained as the result of a loss of accuracy.</p>\n\n<p>This line of reasoning applies to all of floating-point. Any finite value can be obtained as the result of an inaccurate operation. That did not push the IEEE 754 standardization committee to define <code>==</code> as always evaluating to false for finite values, so why should infinities be different? </p>\n\n<p>As defined, <code>==</code> is useful for people who understand what it does (that is, <strong>test the floating-point values that have been obtained</strong>, and certainly not the values that should have been obtained with real computations). For anyone who understands that, and you need to understand it to use floating-point even for computations that do not involve infinity, having <code>Double.POSITIVE_INFINITY == Double.POSITIVE_INFINITY</code> evaluate to true is convenient, if only to test if the floating-point result of a floating-point computation is <code>Double.POSITIVE_INFINITY</code>.</p>\n\n<p>That leaves the question of why NaN can afford to have special behavior, and infinities should follow the same general principles as finite values. NaN is different from infinities: the underlying principle of the IEEE 754 standard is that values are exactly what they are, but the result of an operation can be approximated with respect to the real result, and in this case, the resulting floating-point value is obtained according to the rounding mode. </p>\n\n<p>Forget for an instant that <code>1.0 / 0.0</code> is defined as +inf, which is an annoyance in this discussion. Think for the moment of <code>Double.POSITIVE_INFINITY</code> only as the result of operations such as <code>1.0e100 / 1.0e-300</code> or <code>Double.MAX_VALUE + Double.MAX_VALUE</code>. For these operations, +inf is the closest approximation of the real result, just like for operations that produce a finite result. By contrast, NaN is the result you obtain when the operation doesn't make sense. It is defensible to have NaN behave specially, but inf is just an approximation of all the values too large to represent.</p>\n\n<p>In reality, <code>1.0 / 0.0</code> also produces +inf, but <strong>that</strong> should be considered an exception. It would have been just as coherent to define the result of that operation as NaN, but defining it as +inf was more convenient in the implementation of some algorithms. An example is provided page 10 in <a href=\"http://www.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF\">Kahan's notes</a>. More details than most will wish for are in the <a href=\"http://people.freebsd.org/~das/kahan86branch.pdf\">article \u201cBranch Cuts for Complex Elementary Functions, or Much Ado About Nothing's Sign Bit\u201d</a>. I would also interpret the existence in IEEE 754 of a \u201cdivision by zero\u201d flag separate from the NaN flag as recognition that the user may want to treat division by zero specially although it is not defined as producing NaN.</p>\n", "title": "Why are floating point infinities, unlike NaNs, equal?", "tags": ["java", "floating-point", "comparison", "nan", "infinity"], "link": "http://stackoverflow.com/questions/28584669/why-are-floating-point-infinities-unlike-nans-equal/28584932#28584932", "post_type": "answer", "question_id": 28584669, "answer_id": 28584932}, {"body": "<p>Because thats the standard.  Infinity represents a number greater than or less than Double.MAX_VALUE/-Double.MAX_VALUE. </p>\n\n<p>NaN represents the outcome of an operation that didn't make sense.  That is, the operation didn't possibly come out with a number.</p>\n\n<p>I would guess the logic is once a number gets big enough (infinity) and because of the limitation of floating point numbers, adding numbers to it won't change the outcome, so its 'like' infinity.</p>\n\n<p>So if you want to compare to really big numbers, at some point you might just say those two big numbers are close enough for all intents and purposes.  But if you want to compare two things that both aren't numbers, you can't compare them so its false.  At least you couldn't compare them as a primitive.</p>\n", "title": "Why are floating point infinities, unlike NaNs, equal?", "tags": ["java", "floating-point", "comparison", "nan", "infinity"], "link": "http://stackoverflow.com/questions/28584669/why-are-floating-point-infinities-unlike-nans-equal/28584954#28584954", "post_type": "answer", "question_id": 28584669, "answer_id": 28584954}, {"body": "<p>The <em>correct</em> answer is a simple \"because <a href=\"http://dx.doi.org/10.1109/IEEESTD.2008.4610935\" rel=\"nofollow\">the standard</a> (and <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.3\" rel=\"nofollow\">the docs</a>) say so\". But I'm not gonna be cynical because it's obvious that's not what you are after.</p>\n\n<hr>\n\n<p>In addition to the other answers here, I'll try to relate the infinities to saturating arithmetic.</p>\n\n<p>Other answers have already stated that the reason the comparisons on NaNs result in <code>true</code>, so I'm not gonna beat a dead horse.</p>\n\n<p>Let's say I have a saturating integer that represents grayscale colors. Why am I using saturating arithmetic? Because anything <em>brighter</em> than white is still white, and anything <em>darker</em> than black is still black (except <a href=\"http://en.wikipedia.org/wiki/Orange_Is_the_New_Black\" rel=\"nofollow\">orange</a>). That means <code>BLACK - x == BLACK</code> and <code>WHITE + x == WHITE</code>. Makes sense?</p>\n\n<p>Now, let's say we want to represent those grayscale colors with a (signed) <a href=\"http://en.wikipedia.org/wiki/Ones&#39;_complement\" rel=\"nofollow\">1s complement</a> 8-bit integer where <code>BLACK == -127</code> and <code>WHITE == 127</code>. Why 1s complement? Because it gives us a <a href=\"http://en.wikipedia.org/wiki/Signed_zero#Representations\" rel=\"nofollow\">signed zero</a> like <a href=\"http://en.wikipedia.org/wiki/IEEE_floating_point\" rel=\"nofollow\">IEEE 754 floating point</a>. And, because we are using saturating arithmetic, <code>-127 - x == -127</code> and <code>127 + x == 127</code>.</p>\n\n<p>How does this relate to floating point infinities? Replace the integer with floating point, <code>BLACK</code> with <code>NEGATIVE_INFINITY</code>, and <code>WHITE</code> with <code>POSITIVE_INFINITY</code> and what do you get? <code>NEGATIVE_INFINITY - x == NEGATIVE_INFINITY</code> and <code>POSITIVE_INFINITY + x == POSITIVE_INFINITY</code>.</p>\n\n<p>Since you used <code>POSITIVE_INFINITY</code>, I'll use it also. First we need a class to represent our saturating integer-based color; let's call it <code>SaturatedColor</code> and assume it works like any other integer in Java. Now, let's take your code and replace <code>double</code> with our own <code>SaturatedColor</code> and <code>Double.POSITIVE_INFINITY</code> with <code>SaturatedColor.WHITE</code>:</p>\n\n<pre><code>SaturatedColor a = SaturatedColor.WHITE;\nSaturatedColor b = SaturatedColor.WHITE;\n</code></pre>\n\n<p>As we established above, <code>SaturatedColor.WHITE</code> (just <code>WHITE</code> above) is <code>127</code>, so let's do that here:</p>\n\n<pre><code>SaturatedColor a = 127;\nSaturatedColor b = 127;\n</code></pre>\n\n<p>Now we take the <code>System.out.println</code> statements you used and replace <code>a</code> and <code>b</code> with their value (values?):</p>\n\n<pre><code>System.out.println(127 == 127);\nSystem.out.println(127 &lt; 127);\nSystem.out.println(127 &gt; 127);\n</code></pre>\n\n<p>It should be obvious what this will print.</p>\n", "title": "Why are floating point infinities, unlike NaNs, equal?", "tags": ["java", "floating-point", "comparison", "nan", "infinity"], "link": "http://stackoverflow.com/questions/28584669/why-are-floating-point-infinities-unlike-nans-equal/28588854#28588854", "post_type": "answer", "question_id": 28584669, "answer_id": 28588854}, {"body": "<p>Since Double.Nan.equals (Double.NaN) was mentioned: It's one thing what should happen when you perform arithmetic and compare numbers, it's a totally different thing when you consider how objects should behave. </p>\n\n<p>Two typical problem cases are: Sorting an array of numbers, and using hash values to implement dictionaries, sets, and so on. There are two exceptional cases where the normal ordering with &lt;, = and > doesn't apply: One case is that +0 = -0 and the other is that NaN \u2260 NaN, and x &lt; NaN, x > NaN, x = NaN will always be false whatever x is. </p>\n\n<p>Sorting algorithms can get into trouble with this. A sorting algorithm may assume that x = x is always true. So if I know that x is stored in an array and look for it, I might not do any bounds check because the search for it must find something. Not if x is NaN. A sorting algorithm may assume that exactly one of a &lt; b and a >= b must be true. Not if one is NaN. So a naive sorting algorithm may crash when NaNs are present. You'd have to decide where you want NaNs to end up when sorting the array, and then change your comparison code so that it works. </p>\n\n<p>Now dictionaries and sets and generally hashing: What if I use an NaN as the key? A set contains unique objects. If the set contains an NaN and I try to add another one, is it unique because it is not equal to the one that is already there? What about +0 and -0, should they be considered equal or different? There's the rule that any two items considered equal must have the same hash value. So the sensible thing is (probably) that a hash function returns one unique value for all NaNs, and one unique value for +0 and -0. And after the hash lookup when you need to find an element with the same hash value that is actually equal, two NaNs should be considered equal (but different from anything else). </p>\n\n<p>That's probably why Double.Nan.equal () behaves different from ==. </p>\n", "title": "Why are floating point infinities, unlike NaNs, equal?", "tags": ["java", "floating-point", "comparison", "nan", "infinity"], "link": "http://stackoverflow.com/questions/28584669/why-are-floating-point-infinities-unlike-nans-equal/28590286#28590286", "post_type": "answer", "question_id": 28584669, "answer_id": 28590286}, {"body": "<p>To me, it seems that \"because it should behave the same as zero\" would make a good answer. Arithmetic overflow and underflow should be handlable similarly.</p>\n\n<p>If you underflow from the largest near-infinitesimally small value which can be stored in a float, you get zero, and zeros compare as identical.</p>\n\n<p>If you overflow from the largest near-infinitely large value which can be stored in a float, you get INF, and INFs compare as identical.</p>\n\n<p>This means that code which handles numbers which are out-of-scope in both directions will not require separate special-casing for one or the other. Instead, either both or neither will need to be treated differently.</p>\n\n<p>And the simplest requirement is covered by the \"neither\" case: you want to check if something over/underflowed, you can compare it to zero/INF using just the normal arithmetic comparison operators, without needing to know you current language's special syntax for the checking command: is it Math.isInfinite(), Float.checkForPositiveInfinity(), hasOverflowed()...?</p>\n", "title": "Why are floating point infinities, unlike NaNs, equal?", "tags": ["java", "floating-point", "comparison", "nan", "infinity"], "link": "http://stackoverflow.com/questions/28584669/why-are-floating-point-infinities-unlike-nans-equal/28596792#28596792", "post_type": "answer", "question_id": 28584669, "answer_id": 28596792}, {"body": "<p>Presumably, you are not calling your generic method in a generic fashion, so it's treated like a call to <code>x(Object a, Object b)</code>. In this example:</p>\n\n<pre><code>public class Test {\n\n  static &lt;T&gt; void x(T a, T b) {\n  }\n\n  public static void main(String[] args) {\n    x(1, 2); // compiles\n    Test.&lt;String&gt;x(1, 2); // does not compile\n    Test.&lt;String&gt;x(\"a\", \"b\"); // compiles\n  }\n}\n</code></pre>\n\n<p>The first call to x is not made generically so it compiles. The second call equates <code>T</code> to <code>String</code>, so it fails because <code>1</code> and <code>2</code> are not <code>Strings</code>. The third call compiles because it properly passes in <code>Strings</code>.</p>\n", "title": "Can the generic type of a generic Java method be used to enforce the type of arguments?", "tags": ["java", "generics", "types"], "link": "http://stackoverflow.com/questions/30217236/can-the-generic-type-of-a-generic-java-method-be-used-to-enforce-the-type-of-arg/30217518#30217518", "post_type": "answer", "question_id": 30217236, "answer_id": 30217518}, {"body": "<p>Why this should be problem in the first place is kind of nebulous to me. I suspect you've instead misunderstood something about the ways in which the type system is useful.</p>\n\n<p>What can we do with a <code>&lt;T&gt;&nbsp;void&nbsp;x(T&nbsp;a,&nbsp;T&nbsp;b)</code>? Well, not a whole lot. Inside the body of <code>x</code>, <code>T</code> is the same as <code>Object</code>, so we could only do something like call <code>toString</code> on <code>a</code> and <code>b</code> to print them.</p>\n\n<p>There's really no practical <em>reason</em> <code>a</code> and <code>b</code> must have the same type. Just that they have some type in common, and that type is <code>Object</code> or a subtype of it. In fact, there's no clear reason why <code>&lt;T&gt;&nbsp;void&nbsp;x(T&nbsp;a,&nbsp;T&nbsp;b)</code> actually needs to be generic at all.</p>\n\n<ul>\n<li>The method body doesn't care what the actual types of <code>a</code> and <code>b</code> are because it couldn't use them anyway.</li>\n<li>The call site doesn't care what the actual types of <code>a</code> and <code>b</code> are because <code>x</code> is a <code>void</code> method so it's a black hole.</li>\n</ul>\n\n<p>It's more typical for a method to have a result, like <code>&lt;T&gt;&nbsp;List&lt;T&gt;&nbsp;Arrays.asList(T...)</code>:</p>\n\n<pre><code>// This will cause a compile error because\n// the type inferred must be compatible\n// with the return assignment.\nList&lt;Integer&gt; r = Arrays.asList(1, 1.0);\n</code></pre>\n\n<p>Or a bound:</p>\n\n<pre><code>// We don't care what the actual types of\n// a and b are, just that we can call bar()\n// on them.\n// Note: this method does not need to be generic.\n&lt;T extends Foo&gt; void x(T a, T b) {\n    a.bar();\n    a.bar();\n}\n</code></pre>\n\n<p>Or a bound which asserts some kind of relation:</p>\n\n<pre><code>// We don't care what the actual types of\n// a and b are, just that we can compare\n// them to each other.\n&lt;T extends Comparable&lt;T&gt;&gt; T max(T a, T b) {\n    return (a.compareTo(b) &lt; 0) ? b : a;\n}\n</code></pre>\n", "title": "Can the generic type of a generic Java method be used to enforce the type of arguments?", "tags": ["java", "generics", "types"], "link": "http://stackoverflow.com/questions/30217236/can-the-generic-type-of-a-generic-java-method-be-used-to-enforce-the-type-of-arg/30219144#30219144", "post_type": "answer", "question_id": 30217236, "answer_id": 30219144}, {"body": "<p>Replacing the definition of <code>TbinList</code> with</p>\n\n<pre><code>class TbinList&lt;T&gt; extends ArrayList&lt;Tbin&lt;? extends T&gt;&gt; {}\n</code></pre>\n\n<p>and defining <code>test2</code> with</p>\n\n<pre><code>TbinList&lt;Base&gt; test2 = new TbinList&lt;&gt;();\n</code></pre>\n\n<p>instead would solve the issue.</p>\n\n<p>With your definition you're ending up with an <code>ArrayList&lt;Tbin&lt;T&gt;&gt;</code> where T is any fixed class extending <code>Base</code>.</p>\n", "title": "Java Generics Puzzler, extending a class and using wildcards", "tags": ["java", "generics", "bounded-wildcard"], "link": "http://stackoverflow.com/questions/30384955/java-generics-puzzler-extending-a-class-and-using-wildcards/30385298#30385298", "post_type": "answer", "question_id": 30384955, "answer_id": 30385298}, {"body": "<p>This happens because of the way <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.10\">capture conversion</a> works:</p>\n\n<blockquote>\n  <p>There exists a capture conversion from a parameterized type <code>G&lt;T<sub>1</sub>,...,T<sub>n</sub>&gt;</code> to a parameterized type <code>G&lt;S<sub>1</sub>,...,S<sub>n</sub>&gt;</code>, where, for <em>1 \u2264 i \u2264 n</em> :</p>\n  \n  <ul>\n  <li>If <code>T<sub>i</sub></code> is a wildcard type argument of the form <code>?&nbsp;extends&nbsp;B<sub>i</sub></code>, then <code>S<sub>i</sub></code> is a fresh type variable [...].</li>\n  </ul>\n  \n  <p>Capture conversion is not applied recursively.</p>\n</blockquote>\n\n<p>Note the end bit. So, what this means is that, given a type like this:</p>\n\n<pre><code>    Map&lt;?, List&lt;?&gt;&gt;\n//      \u2502  \u2502    \u2514 no capture (not applied recursively)\n//      \u2502  \u2514 T<sub>2</sub> is not a wildcard\n//      \u2514 T<sub>1</sub> is a wildcard\n</code></pre>\n\n<p>Only \"outside\" wildcards are captured. The <code>Map</code> key wildcard is captured, but the <code>List</code> element wildcard is not. This is why, for example, we can add to a <code>List&lt;List&lt;?&gt;&gt;</code>, but not a <code>List&lt;?&gt;</code>. The placement of the wildcard is what matters.</p>\n\n<p>Carrying this over to <code>TbinList</code>, if we have an <code>ArrayList&lt;Tbin&lt;?&gt;&gt;</code>, the wildcard is in a place where it does not get captured, but if we have a <code>TbinList&lt;?&gt;</code>, the wildcard is in a place where it gets captured.</p>\n\n<p>As I alluded to in the comments, one very interesting test is this:</p>\n\n<pre><code>ArrayList&lt;Tbin&lt;? extends Base&gt;&gt; test3 = new TbinList&lt;&gt;();\n</code></pre>\n\n<p>We get this error:</p>\n\n<pre><code>error: incompatible types: cannot infer type arguments for TbinList&lt;&gt;\n    ArrayList&lt;Tbin&lt;?&nbsp;extends&nbsp;Base&gt;&gt;&nbsp;test3&nbsp;=&nbsp;new&nbsp;TbinList&lt;&gt;();\n                                                        ^\n    reason: <strong>no instance(s) of type variable(s) T exist so that\n            TbinList&lt;T&gt;&nbsp;conforms&nbsp;to&nbsp;ArrayList&lt;Tbin&lt;?&nbsp;extends&nbsp;Base&gt;&gt;</strong></code></pre>\n\n<p>So there's no way to make it work as-is. One of the class declarations needs to be changed.</p>\n\n<hr>\n\n<p>Additionally, think about it this way.</p>\n\n<p>Suppose we had:</p>\n\n<pre><code>class Derived1 extends Base {}\nclass Derived2 extends Base {}\n</code></pre>\n\n<p>And since a wildcard allows subtyping, we can do this:</p>\n\n<pre><code>TbinList&lt;? extends Base&gt; test4 = new TbinList&lt;Derived1&gt;();\n</code></pre>\n\n<p>Should we be able to add a <code>Tbin&lt;Derived2&gt;</code> to <code>test4</code>? No, this would be heap pollution. We might end up with <code>Derived2</code>s floating around in a <code>TbinList&lt;Derived1&gt;</code>.</p>\n", "title": "Java Generics Puzzler, extending a class and using wildcards", "tags": ["java", "generics", "bounded-wildcard"], "link": "http://stackoverflow.com/questions/30384955/java-generics-puzzler-extending-a-class-and-using-wildcards/30385343#30385343", "post_type": "answer", "question_id": 30384955, "answer_id": 30385343}, {"body": "<p>This is of course a <em>\"feature\"</em>. The <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#computeIfAbsent-K-java.util.function.Function-\"><code>ConcurrentHashMap.computeIfAbsent()</code></a> Javadoc reads:</p>\n\n<blockquote>\n  <p>If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null. The entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and <strong><em>must not attempt to update any other mappings of this map</em></strong>.</p>\n</blockquote>\n\n<p>The <em>\"must not\"</em> wording is a clear contract, which my algorithm violated, although not for the same concurrency reasons.</p>\n\n<p>What's still interesting is that there is no <code>ConcurrentModificationException</code>. Instead, the program just never halts - which still is a rather dangerous bug in my opinion (i.e. <a href=\"http://blog.jooq.org/2015/01/16/infinite-loops-or-anything-that-can-possibly-go-wrong-does/\">infinite loops. or: anything that can possibly go wrong, does</a>).</p>\n\n<p>The simplest use-site solution for this concrete problem would be to not use a <code>ConcurrentHashMap</code>, but just a <code>HashMap</code> instead:</p>\n\n<pre><code>static Map&lt;Integer, Integer&gt; cache = new HashMap&lt;&gt;();\n</code></pre>\n\n<p>Now, everything works fine.</p>\n\n<h3>Note:</h3>\n\n<p>The <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html#computeIfAbsent-K-java.util.function.Function-\"><code>HashMap.computeIfAbsent()</code></a> or <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfAbsent-K-java.util.function.Function-\"><code>Map.computeIfAbsent()</code></a> Javadoc don't forbid such recursive computation, which is of course ridiculous as the type of the cache is <code>Map&lt;Integer, Integer&gt;</code>, not <code>ConcurrentHashMap&lt;Integer, Integer&gt;</code>. It is very dangerous for subtypes to drastically re-define super type contracts (<code>Set</code> vs. <code>SortedSet</code> is greeting). <strong>It should thus be forbidden also in super types, to perform such recursion.</strong></p>\n", "title": "Recursive ConcurrentHashMap.computeIfAbsent() call never terminates. Bug or &quot;feature&quot;?", "tags": ["java", "recursion", "java-8", "concurrenthashmap"], "link": "http://stackoverflow.com/questions/28840047/recursive-concurrenthashmap-computeifabsent-call-never-terminates-bug-or-fea/28840048#28840048", "post_type": "answer", "question_id": 28840047, "answer_id": 28840048}, {"body": "<p>My <strong>guess</strong> is that enums are limited in size (i.e the size is not limited by language but limited by usage)and thus they don't need a <em>native</em> stream api. Streams are very good when you have to manipulate transform and recollect the elements in a stream; these are not common uses case for Enum (usually you iterate over enum values, but rarely you need to transform, map and collect them).</p>\n\n<p>If you need only to do an action over each elements perhaps you should expose only a forEach method</p>\n\n<pre><code>     public static void forEach(Consumer&lt;Letter&gt; action) {\n            Arrays.stream(Letter.values()).forEach(action);\n     }\n\n     .... //example of usage\n     Letter.forEach(e-&gt;System.out.println(e));\n</code></pre>\n", "title": "Java 8 way to work with an enum", "tags": ["java", "design", "enums", "java-8"], "link": "http://stackoverflow.com/questions/29922296/java-8-way-to-work-with-an-enum/29922469#29922469", "post_type": "answer", "question_id": 29922296, "answer_id": 29922469}, {"body": "<p>Three questions: three-part answer:</p>\n\n<h3>Is it okay from a design point of view?</h3>\n\n<p>Absolutely. Nothing wrong with it. If you need to do lots of iterating over your enum, the stream API is the clean way to go and hiding the boiler plate behind a little method is fine. Although I\u2019d consider <a href=\"http://stackoverflow.com/users/823393/oldcurmudgeon\">OldCumudgeon</a>\u2019s <a href=\"http://stackoverflow.com/a/29922602/66686\">version</a> even better.</p>\n\n<h3>Is it okay from a performance point of view?</h3>\n\n<p>It most likely doesn\u2019t matter. Most of the time, enums are not that big. Therefore, whatever overhead there is for one method or the other probably doesn\u2019t matter in 99.9% of the cases.</p>\n\n<p>Of course, there are the 0.1% where it does. In that case: measure properly, with your real-world data and consumers.</p>\n\n<p>If I had to bet, I\u2019d expect the <code>for each</code> loop to be faster, since it maps more directly to the memory model, but don\u2019t guess when talking performance, and don\u2019t tune before there is actual need for tuning. Write your code in a way that is correct first, easy to read second and only then worry about performance of code style.</p>\n\n<h3>Why aren\u2019t Enums properly integrated into the Stream API?</h3>\n\n<p>If you compare Java\u2019s Stream API to the equivalent in many other languages, it appears seriously limited. There are various pieces that are missing (reusable Streams and Optionals as Streams, for example). On the other hand, implementing the Stream API was certainly a huge change for the API. It was postponed multiple times for a reason. So I guess Oracle wanted to limit the changes to the most important use cases. Enums aren\u2019t used that much anyway. Sure, every project has a couple of them, but they\u2019re nothing compared to the number of Lists and other Collections. Even when you have an Enum, in many cases you  won\u2019t ever iterate over it. Lists and Sets, on the other hand, are probably iterated over almost every time. I assume that these were the reasons why the Enums didn\u2019t get their own adapter to the Stream world. We\u2019ll see whether more of this gets added in future versions. And until then you always can use <code>Arrays.stream</code>.</p>\n", "title": "Java 8 way to work with an enum", "tags": ["java", "design", "enums", "java-8"], "link": "http://stackoverflow.com/questions/29922296/java-8-way-to-work-with-an-enum/29922831#29922831", "post_type": "answer", "question_id": 29922296, "answer_id": 29922831}, {"body": "<p>I think the shortest code to get a <code>Stream</code> of enum constants is <code>Stream.of(Letter.values())</code>. It's not as nice as <code>Letter.values().stream()</code> but that's an issue with arrays, not specifically enums.</p>\n\n<blockquote>\n  <p>Moreover, why don't enums have a <code>stream()</code> method?</p>\n</blockquote>\n\n<p>You are right that the nicest possible call would be <code>Letter.stream()</code>. Unfortunately a class cannot have two methods with the same signature, so it would not be possible to implicitly add a static method <code>stream()</code> to every enum (in the same way that every enum has an implicitly added static method <code>values()</code>) as this would break every existing enum that already has a static or instance method without parameters called <code>stream()</code>.</p>\n\n<blockquote>\n  <p>Is this approach OK?</p>\n</blockquote>\n\n<p>I think so. The drawback is that <code>stream</code> is a static method, so there is no way to avoid code duplication; it would have to be added to every enum separately.</p>\n", "title": "Java 8 way to work with an enum", "tags": ["java", "design", "enums", "java-8"], "link": "http://stackoverflow.com/questions/29922296/java-8-way-to-work-with-an-enum/29923793#29923793", "post_type": "answer", "question_id": 29922296, "answer_id": 29923793}, {"body": "<p>I'd go for <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html\"><code>EnumSet</code></a>. Because <code>forEach()</code> is also defined on <code>Iterable</code>, you can avoid creating the stream altogether:</p>\n\n<pre><code>EnumSet.allOf(Letter.class).forEach(x -&gt; foo(x));\n</code></pre>\n\n<p>Or with a method reference:</p>\n\n<pre><code>EnumSet.allOf(Letter.class).forEach(this::foo);\n</code></pre>\n\n<p>Still, the oldschool for-loop feels a bit simpler:</p>\n\n<pre><code>for (Letter x : Letter.values()) {\n    foo(x);\n}\n</code></pre>\n", "title": "Java 8 way to work with an enum", "tags": ["java", "design", "enums", "java-8"], "link": "http://stackoverflow.com/questions/29922296/java-8-way-to-work-with-an-enum/29926133#29926133", "post_type": "answer", "question_id": 29922296, "answer_id": 29926133}, {"body": "<p>I suggest 2 more options:</p>\n\n<pre><code>integers.values().stream().mapToInt(Integer::intValue).sum();\nintegers.values().stream().collect(summingInt(Integer::intValue));\n</code></pre>\n\n<p>The second one uses <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#summingInt-java.util.function.ToIntFunction-\" rel=\"nofollow\"><code>Collectors.summingInt()</code></a> collector.</p>\n\n<hr>\n\n<p>Besides, Java 8 introduces a very effective <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html\" rel=\"nofollow\"><code>LongAdder</code></a> accumulator designed to speed-up summarizing in parallel streams and multi-thread environments. Here, it may be used as follows:</p>\n\n<pre><code>LongAdder a = new LongAdder();\nmap.values().parallelStream().forEach(a::add);\nsum = a.intValue();\n</code></pre>\n", "title": "How to sum a list of integers with java streams?", "tags": ["java", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/30125296/how-to-sum-a-list-of-integers-with-java-streams/30125487#30125487", "post_type": "answer", "question_id": 30125296, "answer_id": 30125487}, {"body": "<p>You can use reduce method:</p>\n\n<pre><code>long creditAmountSum = result.stream().map(e -&gt; e.getCreditAmount()).reduce(0L, (x, y) -&gt; x + y);\n</code></pre>\n", "title": "How to sum a list of integers with java streams?", "tags": ["java", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/30125296/how-to-sum-a-list-of-integers-with-java-streams/35035659#35035659", "post_type": "answer", "question_id": 30125296, "answer_id": 35035659}, {"body": "<p>My intuition in Python is to use the <code>collections.Counter</code> as a multiset:</p>\n\n<pre><code>&gt;&gt;&gt; import collections\n&gt;&gt;&gt; r = xrange(100) # range in python 3\n&gt;&gt;&gt; arr = (list(r) + list(r))\n&gt;&gt;&gt; arr.pop(-34)\n66\n</code></pre>\n\n<p>So we have a list of integers from 0-99 twice except for 66.</p>\n\n<pre><code>&gt;&gt;&gt; counts = collections.Counter(arr)\n&gt;&gt;&gt; counts.most_common()[-1][0]\n66\n</code></pre>\n\n<p>Which gets the least common (last item) from a list sorted by frequency.</p>\n\n<p>Such a function would be:</p>\n\n<pre><code>def least_common(arr):\n    '''return the element of an array that is least common'''\n    return collections.Counter(arr).most_common()[-1][0]\n</code></pre>\n\n<p>And usage:</p>\n\n<pre><code>&gt;&gt;&gt; least_common([1,2,3,1,2,3,4,6,4,5,6])\n5\n</code></pre>\n\n<p>This is a generalized solution that works for any number of items.</p>\n", "title": "How to find the only number in an array that doesn&#39;t occur twice", "tags": ["java", "arrays", "algorithm"], "link": "http://stackoverflow.com/questions/29333689/how-to-find-the-only-number-in-an-array-that-doesnt-occur-twice/29337734#29337734", "post_type": "answer", "question_id": 29333689, "answer_id": 29337734}, {"body": "<p>The best answer is already given (XOR-ing the elements), this is to provide an alternative, more general way.</p>\n\n<p>If the input array would be sorted (we can make it sorted), we could simply iterate over the elements in pairs (stepping by 2) and if the elements of the \"pair\" are different, we're done:</p>\n\n<pre><code>public static int findSingle(int[] arr) {\n    Arrays.sort(arr);\n    for (int i = 0, max = arr.length - 1; i &lt; max; i += 2)\n        if (arr[i] != arr[i + 1])\n            return arr[i];\n    return arr[arr.length - 1]; // Single element is the last\n}\n</code></pre>\n\n<p><strong>Note:</strong> This solution sorts the input array; if this is unwanted or not allowed, it can be cloned first:</p>\n\n<pre><code>arr = arr.clone();\n</code></pre>\n\n<p>If input array is sorted, the <code>Arrays.sort(arr)</code> call can be left out of course.</p>\n\n<h3>Generalization</h3>\n\n<p>The advantage of this solution is that it can be applied to all types which are comparable and therefore can be sorted (types which implement <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html\" rel=\"nofollow\"><code>Comparable</code></a>), for example <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\" rel=\"nofollow\"><code>String</code></a> or <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Date.html\" rel=\"nofollow\"><code>Date</code></a>. The <code>XOR</code> solution is limited to numbers only.</p>\n\n<p>Here is a slightly modified version which takes an input array of any element type which is comparable:</p>\n\n<pre><code>public static &lt;E extends Comparable&lt;E&gt;&gt; E findSingle(E[] arr) {\n    Arrays.sort(arr);\n    for (int i = 0, max = arr.length - 1; i &lt; max; i += 2)\n        if (arr[i].compareTo(arr[i + 1]) != 0)\n            return arr[i];\n    return arr[arr.length - 1]; // Single element is the last\n}\n</code></pre>\n\n<p><em>Note: In most cases you could also use <code>arr[i].equals(arr[i + 1])</code> to compare elements instead of using <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo-T-\" rel=\"nofollow\"><code>Comparable.compareTo()</code></a>. For details read the linked javadoc. Quoting the relevant part:</em></p>\n\n<blockquote>\n  <p>It is strongly recommended, but <em>not</em> strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>. Generally speaking, any class that implements the <code>Comparable</code> interface and violates this condition should clearly indicate this fact. The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\"</p>\n</blockquote>\n\n<p>Now you can call this with a <code>String[]</code> for example:</p>\n\n<pre><code>System.out.println(findSingle(new String[] { \"1\", \"2\", \"3\", \"1\", \"3\" }));\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>2\n</code></pre>\n\n<p><strong>Final notes:</strong></p>\n\n<p>Starting from the problem statement it is not checked whether there are more than 2 occurrences of the elements, and neither is whether the array length is odd. Also the second example doesn't check for <code>null</code> values, these are to be added if necessary.</p>\n", "title": "How to find the only number in an array that doesn&#39;t occur twice", "tags": ["java", "arrays", "algorithm"], "link": "http://stackoverflow.com/questions/29333689/how-to-find-the-only-number-in-an-array-that-doesnt-occur-twice/29341981#29341981", "post_type": "answer", "question_id": 29333689, "answer_id": 29341981}]}