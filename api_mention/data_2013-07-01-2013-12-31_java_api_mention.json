{"items": [{"body": "<p>I was exploring the Java 8 source and found this particular part of code very surprising:</p>\n\n<pre><code>//defined in IntPipeline.java\n@Override\npublic final OptionalInt reduce(IntBinaryOperator op) {\n    return evaluate(ReduceOps.makeInt(op));\n}\n\n@Override\npublic final OptionalInt max() {\n    return reduce(Math::max); //this is the gotcha line\n}\n\n//defined in Math.java\npublic static int max(int a, int b) {\n    return (a &gt;= b) ? a : b;\n}\n</code></pre>\n\n<p>Is <code>Math::max</code> something like a method pointer? How does a normal <code>static</code> method get converted to <code>IntBinaryOperator</code>?</p>\n", "title": ":: (double colon) operator in Java 8", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/20001427/double-colon-operator-in-java-8", "post_type": "question", "question_id": 20001427}, {"body": "<p>I was wondering what happens when you try to catch an StackOverflowError and came up with the following method:</p>\n\n<pre><code>class RandomNumberGenerator {\n\n    static int cnt = 0;\n\n    public static void main(String[] args) {\n        try {\n            main(args);\n        } catch (StackOverflowError ignore) {\n            System.out.println(cnt++);\n        }\n    }\n}\n</code></pre>\n\n<p>Now my question:</p>\n\n<p>Why does this method print '4'?</p>\n\n<p>I thought maybe it was because <code>System.out.println()</code> needs 3 segments on the call stack, but I don't know where the number 3 comes from. When you look at the source code (and bytecode) of <code>System.out.println()</code>, it normally would lead to far more method invocations than 3 (so 3 segments on the call stack would not be sufficient). If it's because of optimizations the Hotspot VM applies (method inlining), I wonder if the result would be different on another VM.</p>\n\n<p><b>Edit</b>:</p>\n\n<p>As the output seems to be highly JVM specific, I get the result 4 using<br>\nJava(TM) SE Runtime Environment (build 1.6.0_41-b02)<br>\nJava HotSpot(TM) 64-Bit Server VM (build 20.14-b01, mixed mode)</p>\n\n<p><br></p>\n\n<p><b> Explanation why I think this question is different from <a href=\"http://stackoverflow.com/questions/15083318/understanding-java-stack\">Understanding java stack</a>: </b></p>\n\n<p>My question is not about why there is a cnt > 0 (obviously because <code>System.out.println()</code> requires stack size and throws another <code>StackOverflowError</code> before something gets printed), but why it has the particular value of 4, respectively 0,3,8,55 or something else on other systems.</p>\n", "title": "Why does this method print 4?", "tags": ["java", "jvm", "stack-overflow"], "link": "http://stackoverflow.com/questions/17828584/why-does-this-method-print-4", "post_type": "question", "question_id": 17828584}, {"body": "<p>Why were <code>181783497276652981</code> and <code>8682522807148012</code> chosen in <code>Random.java</code>?</p>\n\n<p>Here's the relevant source code from Java SE JDK 1.7:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>/**\n * Creates a new random number generator. This constructor sets\n * the seed of the random number generator to a value very likely\n * to be distinct from any other invocation of this constructor.\n */\npublic Random() {\n    this(seedUniquifier() ^ System.nanoTime());\n}\n\nprivate static long seedUniquifier() {\n    // L'Ecuyer, \"Tables of Linear Congruential Generators of\n    // Different Sizes and Good Lattice Structure\", 1999\n    for (;;) {\n        long current = seedUniquifier.get();\n        long next = current * 181783497276652981L;\n        if (seedUniquifier.compareAndSet(current, next))\n            return next;\n    }\n}\n\nprivate static final AtomicLong seedUniquifier\n    = new AtomicLong(8682522807148012L);\n</code></pre>\n\n<p>So, invoking <code>new Random()</code> without any seed parameter takes the current \"seed uniquifier\" and XORs it with <code>System.nanoTime()</code>.  Then it uses <code>181783497276652981</code> to create another seed uniquifier to be stored for the next time <code>new Random()</code> is called.</p>\n\n<p>The literals <code>181783497276652981L</code> and <code>8682522807148012L</code> are not placed in constants, but they don't appear anywhere else.</p>\n\n<p>At first the comment gives me an easy lead.  Searching online for that article yields <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.99.6553&amp;rep=rep1&amp;type=pdf\" rel=\"nofollow\">the actual article</a>.  <code>8682522807148012</code> doesn't appear in the paper, but <code>181783497276652981</code> does appear -- as a substring of another number, <code>1181783497276652981</code>, which is <code>181783497276652981</code> with a <code>1</code> prepended.</p>\n\n<p>The paper claims that <code>1181783497276652981</code> is a number that yields good \"merit\" for a linear congruential generator.  Was this number simply mis-copied into Java?  Does <code>181783497276652981</code> have an acceptable merit?</p>\n\n<p>And why was <code>8682522807148012</code> chosen?</p>\n\n<p>Searching online for either number yields no explanation, only <a href=\"http://www.java-forums.org/advanced-java/72124-random-seed.html\" rel=\"nofollow\">this page</a> that also notices the dropped <code>1</code> in front of <code>181783497276652981</code>.</p>\n\n<p>Could other numbers have been chosen that would have worked as well as these two numbers?  Why or why not?</p>\n", "title": "What&#39;s with 181783497276652981 and 8682522807148012 in Random (Java 7)?", "tags": ["java", "random"], "link": "http://stackoverflow.com/questions/18092160/whats-with-181783497276652981-and-8682522807148012-in-random-java-7", "post_type": "question", "question_id": 18092160}, {"body": "<pre><code>String x = (String) null;\n</code></pre>\n\n<p>Why there is no exception in this statement?</p>\n\n<pre><code>String x = null;\nSystem.out.println(x);\n</code></pre>\n\n<p>It prints <code>null</code>. But <code>.toString()</code> method should throw a null pointer exception.</p>\n", "title": "No Exception while type casting with a null in java", "tags": ["java", "nullpointerexception", "typecasting-operator"], "link": "http://stackoverflow.com/questions/18723596/no-exception-while-type-casting-with-a-null-in-java", "post_type": "question", "question_id": 18723596}, {"body": "<p>Usually, one would call the <code>reduce</code> method using <code>Math.max(int, int)</code> as follows:</p>\n\n<pre><code>reduce(new IntBinaryOperator() {\n    int applyAsInt(int left, int right) {\n        return Math.max(left, right);\n    }\n});\n</code></pre>\n\n<p>That requires a lot of syntax for just calling <code>Math.max</code>. That's where lambda expressions come into play. Since Java 8 it is allowed to do the same thing in a much shorter way:</p>\n\n<pre><code>reduce( (int left, int right) -&gt; Math.max(left, right) );\n</code></pre>\n\n<p>How does this work? The java compiler \"detects\", that you want to implement a method that accepts two <code>int</code>s and returns one <code>int</code>. This is equivalent to the formal parameters of the one and only method of interface <code>IntBinaryOperator</code> (the parameter of method <code>reduce</code> you want to call). So the compiler does the rest for you - it just assumes you want to implement <code>IntBinaryOperator</code>.</p>\n\n<p>But as <code>Math.max(int, int)</code> itself fulfills the formal requirements of <code>IntBinaryOperator</code>, it can be used directly. Because Java 7 does not have any syntax that allows a method itself to be passed as an argument (you can only pass method results, but never method references), the <code>::</code> syntax was introduced in Java 8 to reference methods:</p>\n\n<pre><code>reduce(Math::max);\n</code></pre>\n\n<p>Note that this will be interpreted by the compiler, not by the JVM at runtime! Although it produces different bytecodes for all three code snippets, they are semantically equal, so the last two can be considered to be short (and probably more efficient) versions of the <code>IntBinaryOperator</code> implementation above!</p>\n\n<p>(See also <a href=\"http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html\">Translation of Lambda Expressions</a>)</p>\n", "title": ":: (double colon) operator in Java 8", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/20001427/double-colon-operator-in-java-8/20001866#20001866", "post_type": "answer", "question_id": 20001427, "answer_id": 20001866}, {"body": "<p><code>::</code> is called Method Reference. It is basically a reference to a single method. i.e. it refers to an existing method by name.  </p>\n\n<p><strong>Short Explanation</strong>:\nBelow is an example of a reference to a static method:</p>\n\n<pre><code>class Hey{\n     public static double square(double num){\n        return Math.pow(num , 2);\n    }\n}\n\nFunction&lt;Double, Double&gt; square = Hey::square;\ndouble ans = square.apply(23d);\n</code></pre>\n\n<p><code>square</code> can be passed around just like object reference's and trigger when at need. In fact, it can be perfectly used as a reference to a normal method of an object and not just <code>static</code> ones. </p>\n\n<pre><code> class Hey{\n     public double square(double num){\n        return Math.pow(num , 2);\n    }\n}\n\nHey hey = new Hey();\nFunction&lt;Double, Double&gt; square = hey::square;\ndouble ans = square.apply(23d);\n</code></pre>\n\n<p><code>Function</code> above is a <strong>functional interface</strong>. Well to fully explain <code>::</code>, it is important to understand Functional Interface. Plainly, <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/lang/FunctionalInterface.html\">Function interface</a> is an interface with just one abstract method. </p>\n\n<p>For example: <code>Runnable</code>, <code>Callable</code>, <code>ActionListener</code> and so. </p>\n\n<p><code>Function</code> above is a functional interface with just one method <code>apply</code>. It takes one argument and produces a result. </p>\n\n<hr>\n\n<p>The reason why <code>::</code> are awesome is because:</p>\n\n<blockquote>\n  <p>Method references are expressions which have the same treatment as\n  lambda's, but instead of providing a lambda body, they refer an existing method by name</p>\n</blockquote>\n\n<p>i.e. Just like writing lambda body:</p>\n\n<pre><code>Function&lt;Double, Double&gt; square = (Double x) -&gt; x * x;\n</code></pre>\n\n<p>You can simply do:</p>\n\n<pre><code>Function&lt;Double, Double&gt; square = Hey::square;\n</code></pre>\n\n<p>At runtime they behave exactly the same. The bytecode may/not be the same (For above case, it generates the same bytecode (compile above and check <code>javap -c</code>))</p>\n\n<p>The only major criteria to satisfy is: the method you provide should have a similar signature to method of the FunctionalInterface you use as object reference. Below is illegal </p>\n\n<pre><code>Supplier&lt;Boolean&gt; p = Hey::square; //illegal\n</code></pre>\n\n<p><code>square</code> expects an argument and returns a double. <code>get</code> method in <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/util/function/Supplier.html\">Supplier</a> expects an argument but doesn't return anything. So it is an error. </p>\n\n<p><strong>Method Reference refers to a method of the functional interface</strong> (As mentioned, functional interface can only have one method). </p>\n\n<p>Some more examples: <code>accept</code> method in <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/util/function/Consumer.html\">Consumer</a> takes an input but doesnt return anything.</p>\n\n<pre><code>Consumer&lt;Integer&gt; b1 = System::exit;   // void exit(int status)\nConsumer&lt;String[]&gt; b2 = Arrays::sort;  // void sort(Object[] a)\nConsumer&lt;String&gt; b3 = MyProgram::main; // void main(String... args)\n\nclass Hey{\n    public double getRandom(){\n        return Math.random();\n    }\n}\n\nCallable&lt;Double&gt; call = hey::getRandom;\nSupplier&lt;Double&gt; call2 = hey::getRandom;\nDoubleSupplier sup = hey::getRandom;\n//Supplier is functional interface that takes no argument and gives a result\n</code></pre>\n\n<p>Above <code>getRandom</code> takes no argument and returns a double. So any functional interface that satisfies the criteria of: <code>take no argument and return double</code> can be used. </p>\n\n<p>Another example:</p>\n\n<pre><code>Set&lt;String&gt; set = new HashSet&lt;&gt;();\nset.addAll(Arrays.asList(\"leo\",\"bale\",\"hanks\"));\nPredicate&lt;String&gt; pred = set::contains;\nboolean exists = pred.test(\"leo\");\n</code></pre>\n\n<p><strong>In case of Parametrized Types</strong>:</p>\n\n<pre><code>class Param&lt;T&gt;{\n    T elem;\n    public T get(){\n        return elem;\n    }\n\n    public void set(T elem){\n        this.elem = elem;\n    }\n    public static &lt;E&gt; E returnSame(E elem){\n        return elem;\n    }\n}\n\nSupplier&lt;Param&lt;Integer&gt;&gt; obj = Param&lt;Integer&gt;::new;\nParam&lt;Integer&gt; param = obj.get();\nConsumer&lt;Integer&gt; c = param::set;\nSupplier&lt;Integer&gt; s = param::get;\n\n    Function&lt;String, String&gt; func = Param::&lt;String&gt;returnSame;\n</code></pre>\n\n<p>Method Reference can be obtained in different styles, but fundamentally they all mean the same and can simply be visualized as a lambda:</p>\n\n<ol>\n<li>A static method (<code>ClassName::methName</code>)</li>\n<li>An instance method of a particular object (<code>instanceRef::methName</code>)</li>\n<li>A super method of a particular object (<code>super::methName</code>)</li>\n<li>An instance method of an arbitrary object of a particular type (<code>ClassName::methName</code>)</li>\n<li>A class constructor reference (<code>ClassName::new</code>)</li>\n<li>An array constructor reference (<code>TypeName[]::new</code>)</li>\n</ol>\n\n<p>For further reference: <a href=\"http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html\">http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html</a></p>\n", "title": ":: (double colon) operator in Java 8", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/20001427/double-colon-operator-in-java-8/22245383#22245383", "post_type": "answer", "question_id": 20001427, "answer_id": 22245383}, {"body": "<p>If you only want to install the latest official JRE from Oracle, you can get it there, install it, and export the new JAVA_HOME in the terminal.</p>\n\n<ul>\n<li>Open your Terminal</li>\n<li><code>java -version</code> gives you an error and a popup</li>\n<li>Get the JRE dmg on <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></li>\n<li>Install it</li>\n<li>In your terminal, type: <code>export JAVA_HOME=\"/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home\"</code></li>\n<li><code>java -version</code> now gives you <code>java version \"1.7.0_45\"</code></li>\n</ul>\n\n<p>That's the cleanest way I found to install the latest JRE.</p>\n\n<p>You can add the <code>export JAVA_HOME</code> line in your <code>.bashrc</code> to have <code>java</code> permanently in your Terminal:</p>\n\n<pre><code>echo export JAVA_HOME=\\\"/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home\\\" &gt;&gt; ~/.bashrc\n</code></pre>\n", "title": "Installing Java on OS X 10.9 (Mavericks)", "tags": ["java", "osx"], "link": "http://stackoverflow.com/questions/19533528/installing-java-on-os-x-10-9-mavericks/19582689#19582689", "post_type": "answer", "question_id": 19533528, "answer_id": 19582689}, {"body": "<p>You can use <code>String.getBytes()</code> which returns the <code>byte[]</code> array.</p>\n", "title": "How to convert Java String into byte[]?", "tags": ["java", "string", "bytearray"], "link": "http://stackoverflow.com/questions/18571223/how-to-convert-java-string-into-byte/18571352#18571352", "post_type": "answer", "question_id": 18571223, "answer_id": 18571352}, {"body": "<p>Try using String.getBytes(). It returns a byte[] representing string data.\nExample:</p>\n\n<pre><code>String data = \"sample data\";\nbyte[] byteData = data.getBytes();\n</code></pre>\n", "title": "How to convert Java String into byte[]?", "tags": ["java", "string", "bytearray"], "link": "http://stackoverflow.com/questions/18571223/how-to-convert-java-string-into-byte/18571358#18571358", "post_type": "answer", "question_id": 18571223, "answer_id": 18571358}, {"body": "<p>This is being described in this <a href=\"http://zeroturnaround.com/rebellabs/java-8-explained-default-methods/\">article</a>. Think about <code>forEach</code> of Collections.</p>\n\n<pre><code>List&lt;?&gt; list = \u2026\nlist.forEach(\u2026);\n</code></pre>\n\n<blockquote>\n  <p>The forEach isn\u2019t declared by <code>java.util.List</code> nor the\n  <code>java.util.Collection</code> interface yet. One obvious solution would be to\n  just add the new method to the existing interface and provide the\n  implementation where required in the JDK. However, once published, it\n  is impossible to add methods to an interface without breaking the\n  existing implementation.</p>\n  \n  <p>The benefit that default methods bring is that now it\u2019s possible to\n  add a new default method to the interface and it doesn\u2019t break the\n  implementations.</p>\n</blockquote>\n", "title": "Interface with default methods vs Abstract class in Java 8", "tags": ["java", "abstract-class", "java-8"], "link": "http://stackoverflow.com/questions/19998454/interface-with-default-methods-vs-abstract-class-in-java-8/19998652#19998652", "post_type": "answer", "question_id": 19998454, "answer_id": 19998652}, {"body": "<p>Everything is here : <a href=\"http://blog.progs.be/542/date-to-java-time\" rel=\"nofollow\">http://blog.progs.be/542/date-to-java-time</a></p>\n\n<p>The answer with \"round-tripping\" is not exact : when you do </p>\n\n<pre><code>LocalDateTime ldt = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n</code></pre>\n\n<p>if your system timezone is not UTC/GMT, you change the time !</p>\n", "title": "Converting between java.time.LocalDateTime and java.util.Date", "tags": ["java", "datetime", "java-8", "java-time"], "link": "http://stackoverflow.com/questions/19431234/converting-between-java-time-localdatetime-and-java-util-date/23526153#23526153", "post_type": "answer", "question_id": 19431234, "answer_id": 23526153}, {"body": "<p>Short answer:</p>\n\n<pre><code>Date in = new Date();\nLocalDateTime ldt = LocalDateTime.ofInstant(in.toInstant(), ZoneId.systemDefault());\nDate out = Date.from(ldt.atZone(ZoneId.systemDefault()).toInstant());\n</code></pre>\n\n<p>Explanation:\n(based on <a href=\"http://stackoverflow.com/questions/21242110/convert-java-util-date-to-java-time-localdate\">this question</a> about <code>LocalDate</code>)</p>\n\n<p>Despite its name, <code>java.util.Date</code> represents an instant on the time-line, not a \"date\". The actual data stored within the object is a <code>long</code> count of milliseconds since 1970-01-01T00:00Z (midnight at the start of 1970 GMT/UTC).</p>\n\n<p>The equivalent class to <code>java.util.Date</code> in JSR-310 is <code>Instant</code>, thus there are convenient methods to provide the conversion to and fro:</p>\n\n<pre><code>Date input = new Date();\nInstant instant = input.toInstant();\nDate output = Date.from(instant);\n</code></pre>\n\n<p>A <code>java.util.Date</code> instance has no concept of time-zone. This might seem strange if you call <code>toString()</code> on a <code>java.util.Date</code>, because the <code>toString</code> is relative to a time-zone. However that method actually uses Java's default time-zone on the fly to provide the string. The time-zone is not part of the actual state of <code>java.util.Date</code>.</p>\n\n<p>An <code>Instant</code> also does not contain any information about the time-zone. Thus, to convert from an <code>Instant</code> to a local date-time it is necessary to specify a time-zone. This might be the default zone - <code>ZoneId.systemDefault()</code> - or it might be a time-zone that your application controls, such as a time-zone from user preferences. <code>LocalDateTime</code> has a convenient factory method that takes both the instant and time-zone:</p>\n\n<pre><code>Date in = new Date();\nLocalDateTime ldt = LocalDateTime.ofInstant(in.toInstant(), ZoneId.systemDefault());\n</code></pre>\n\n<p>In reverse, the <code>LocalDateTime</code> the time-zone is specified by calling the <code>atZone(ZoneId)</code> method. The <code>ZonedDateTime</code> can then be converted directly to an <code>Instant</code>:</p>\n\n<pre><code>LocalDateTime ldt = ...\nZonedDateTime zdt = ldt.atZone(ZoneId.systemDefault());\nDate output = Date.from(zdt.toInstant());\n</code></pre>\n\n<p>Note that the conversion from <code>LocalDateTime</code> to <code>ZonedDateTime</code> has the potential to introduce unexpected behaviour. This is because not every local date-time exists due to Daylight Saving Time. In autumn/fall, there is an overlap in the local time-line where the same local date-time occurs twice. In spring, there is a gap, where an hour disappears. See the Javadoc of <a href=\"http://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html#atZone-java.time.ZoneId-\"><code>atZone(ZoneId)</code></a> for more the definition of what the conversion will do.</p>\n\n<p>Summary, if you round-trip a <code>java.util.Date</code> to a <code>LocalDateTime</code> and back to a <code>java.util.Date</code> you may end up with a different instant due to Daylight Saving Time.</p>\n", "title": "Converting between java.time.LocalDateTime and java.util.Date", "tags": ["java", "datetime", "java-8", "java-time"], "link": "http://stackoverflow.com/questions/19431234/converting-between-java-time-localdatetime-and-java-util-date/23885950#23885950", "post_type": "answer", "question_id": 19431234, "answer_id": 23885950}, {"body": "<p>If you want to modify your List during traversal, then you need to use the <code>Iterator</code>. And then you can use <code>iterator.remove()</code> to remove the elements during traversal.</p>\n", "title": "How to avoid &quot;ConcurrentModificationException&quot; while removing elements from `ArrayList` while iterating it?", "tags": ["java", "list", "arraylist", "iterator"], "link": "http://stackoverflow.com/questions/18448671/how-to-avoid-concurrentmodificationexception-while-removing-elements-from-arr/18448685#18448685", "post_type": "answer", "question_id": 18448671, "answer_id": 18448685}, {"body": "<p>Use an <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html\"><code>Iterator</code></a> and call <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html#remove%28%29\"><code>remove()</code></a>:</p>\n\n<pre><code>Iterator&lt;String&gt; iter = myArrayList.iterator();\n\nwhile (iter.hasNext()) {\n    String str = iter.next();\n\n    if (someCondition)\n        iter.remove();\n}\n</code></pre>\n", "title": "How to avoid &quot;ConcurrentModificationException&quot; while removing elements from `ArrayList` while iterating it?", "tags": ["java", "list", "arraylist", "iterator"], "link": "http://stackoverflow.com/questions/18448671/how-to-avoid-concurrentmodificationexception-while-removing-elements-from-arr/18448699#18448699", "post_type": "answer", "question_id": 18448671, "answer_id": 18448699}, {"body": "<p>Implement <strong>Comparable</strong> interface to Fruit.</p>\n\n<pre><code>public class Fruit implements Comparable&lt;Fruit&gt; {\n</code></pre>\n\n<p>It implements the method</p>\n\n<pre><code>@Override\n    public int compareTo(Fruit fruit) {\n        //write code here for compare name\n    }\n</code></pre>\n\n<p>Then do call sort method</p>\n\n<pre><code>Collections.sort(fruitList);\n</code></pre>\n", "title": "How to sort an ArrayList in Java", "tags": ["java", "sorting", "collections", "arraylist"], "link": "http://stackoverflow.com/questions/18441846/how-to-sort-an-arraylist-in-java/18441875#18441875", "post_type": "answer", "question_id": 18441846, "answer_id": 18441875}, {"body": "<p>I think the number displayed is the number of time the <code>System.out.println</code> call throws the <code>Stackoverflow</code> exception.</p>\n\n<p>It probably depend on the implementation of the <code>println</code> and the number of stacking call it is made in it.</p>\n\n<p>As an illustration:</p>\n\n<p>The <code>main()</code> call trigger the <code>Stackoverflow</code> exception at call i.\nThe i-1 call of main catch the exception and call <code>println</code> which trigger a second <code>Stackoverflow</code>.  <code>cnt</code> get increment to 1.\nThe i-2 call of main catch now the exception and call <code>println</code>.  In <code>println</code> a method is called triggering a 3rd exception.  <code>cnt</code> get increment to 2.\n  this continue until <code>println</code> can make all its needed call and finally display the value of <code>cnt</code>.</p>\n\n<p>This is then dependent of the actual implementation of <code>println</code>.</p>\n\n<p>For the JDK7 either it detect cycling call and throws the exception earlier either it keep some stack resource and throw the exception before reaching the limit to give some room for remediation logic either the <code>println</code> implementation doesn't make calls either the ++ operation is done after the <code>println</code> call thus is by pass by the exception. </p>\n", "title": "Why does this method print 4?", "tags": ["java", "jvm", "stack-overflow"], "link": "http://stackoverflow.com/questions/17828584/why-does-this-method-print-4/17832168#17832168", "post_type": "answer", "question_id": 17828584, "answer_id": 17832168}, {"body": "<p>The behavior is dependent upon the stack size (which can be manually set using <code>Xss</code>. The stack size is architecture specific. From JDK 7 <a href=\"http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/473cce303f13/src/os_cpu/windows_x86/vm/globals_windows_x86.hpp\" rel=\"nofollow\">source code</a>:</p>\n\n<blockquote>\n  <p>// Default stack size on Windows is determined by the executable (java.exe<br>\n  // has a default value of 320K/1MB [32bit/64bit]). Depending on Windows version, changing<br>\n  // ThreadStackSize to non-zero may have significant impact on memory usage.<br>\n  // See comments in os_windows.cpp.</p>\n</blockquote>\n\n<p>So when the <code>StackOverflowError</code> is thrown, the error is caught in catch block. Here <code>println()</code> is another stack call which throws exception again. This gets repeated. </p>\n\n<p><em>How many times it repeates?</em> - Well it depends on when JVM thinks it is no longer stackoverflow. And that depends on the stack size of each function call (difficult to find) and the <code>Xss</code>. As mentioned above default total size and size of each function call (depends on memory page size etc) is platform specific. Hence different behavior.</p>\n\n<p>Calling the <code>java</code> call with <code>-Xss 4M</code> gives me <code>41</code>. Hence the correlataion.</p>\n", "title": "Why does this method print 4?", "tags": ["java", "jvm", "stack-overflow"], "link": "http://stackoverflow.com/questions/17828584/why-does-this-method-print-4/17833343#17833343", "post_type": "answer", "question_id": 17828584, "answer_id": 17833343}, {"body": "<p>I think the others have done a good job at explaining why cnt > 0, but there's not enough details regarding why cnt = 4, and why cnt varies so widely among different settings. I will attempt to fill that void here.</p>\n\n<p>Let </p>\n\n<ul>\n<li>X be the total stack size</li>\n<li>M be the stack space used when we enter main the first time</li>\n<li>R be the stack space increase each time we enter into main</li>\n<li>P be the stack space necessary to run <code>System.out.println</code></li>\n</ul>\n\n<p>When we first get into main, the space left over is X-M. Each recursive call takes up R more memory. So for 1 recursive call (1 more than original), the memory use is M + R. Suppose that StackOverflowError is thrown after C successful recursive calls, that is, M + C * R &lt;= X and M + C * (R + 1) > X. At the time of the first StackOverflowError, there's X - M - C * R memory left.</p>\n\n<p>To be able to run <code>System.out.prinln</code>, we need P amount of space left on the stack. If it so happens that X - M - C * R >= P, then 0 will be printed. If P requires more space, then we remove frames from the stack, gaining R memory at the cost of cnt++. </p>\n\n<p>When <code>println</code> is finally able to run, X - M - (C - cnt) * R >= P. So if P is large for a particular system, then cnt will be large. </p>\n\n<p>Let's look at this with some examples. </p>\n\n<p><strong>Example 1:</strong> Suppose </p>\n\n<ul>\n<li>X = 100</li>\n<li>M = 1</li>\n<li>R = 2</li>\n<li>P = 1</li>\n</ul>\n\n<p>Then C = floor((X-M)/R) = 49, and cnt = ceiling((P - (X - M - C*R))/R) = 0.</p>\n\n<p><strong>Example 2:</strong> Suppose that</p>\n\n<ul>\n<li>X = 100</li>\n<li>M = 1</li>\n<li>R = 5</li>\n<li>P = 12</li>\n</ul>\n\n<p>Then C = 19, and cnt = 2.</p>\n\n<p><strong>Example 3:</strong> Suppose that </p>\n\n<ul>\n<li>X = 101</li>\n<li>M = 1</li>\n<li>R = 5</li>\n<li>P = 12</li>\n</ul>\n\n<p>Then C = 20, and cnt = 3.</p>\n\n<p><strong>Example 4:</strong> Suppose that </p>\n\n<ul>\n<li>X = 101</li>\n<li>M = 2</li>\n<li>R = 5</li>\n<li>P = 12</li>\n</ul>\n\n<p>Then C = 19, and cnt = 2.</p>\n\n<p>Thus, we see that both the system (M, R, and P) and the stack size (X) affects cnt.</p>\n\n<p>As a side note, it does not matter how much space <code>catch</code> requires to start. As long as there is not enough space for <code>catch</code>, then cnt will not increase, so there are no external effects.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I take back what I said about <code>catch</code>. It does play a role. Suppose it requires T amount of space to start. cnt starts to increment when the leftover space is greater than T, and <code>println</code> runs when the leftover space is greater than T + P. This adds an extra step to the calculations and further muddies up the already muddy analysis.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I finally found time to run some experiments to back up my theory. Unfortunately, the theory doesn't seem to match up with the experiments. What actually happens is very different.</p>\n\n<p>Experiment setup:\nUbuntu 12.04 server with default java and default-jdk. Xss starting at 70,000 at 1 byte increments to 460,000.</p>\n\n<p>The results are available at: <a href=\"https://www.google.com/fusiontables/DataSource?docid=1xkJhd4s8biLghe6gZbcfUs3vT5MpS_OnscjWDbM\">https://www.google.com/fusiontables/DataSource?docid=1xkJhd4s8biLghe6gZbcfUs3vT5MpS_OnscjWDbM</a>\nI've created another version where every repeated data point is removed. In other words, only points that are different from the previous are shown. This makes it easier to see anomalies. <a href=\"https://www.google.com/fusiontables/DataSource?docid=1XG_SRzrrNasepwZoNHqEAKuZlHiAm9vbEdwfsUA\">https://www.google.com/fusiontables/DataSource?docid=1XG_SRzrrNasepwZoNHqEAKuZlHiAm9vbEdwfsUA</a></p>\n", "title": "Why does this method print 4?", "tags": ["java", "jvm", "stack-overflow"], "link": "http://stackoverflow.com/questions/17828584/why-does-this-method-print-4/17836189#17836189", "post_type": "answer", "question_id": 17828584, "answer_id": 17836189}, {"body": "<p>A parallel stream has a much higher overhead compared to a sequential one. Coordinating the threads takes a significant amount of time. I would use sequential streams by default and only consider parallel ones if</p>\n\n<ul>\n<li>I have a massive amount of items to process (or the processing of each item takes time and is parallelizable)</li>\n<li>I have a performance problem in the first place</li>\n<li>I don't already run the process in a multi-thread environment (for example: in a web container, if I already have many requests to process in parallel, adding an additional layer of parallelism inside each request could have more negative than positive effects)</li>\n</ul>\n\n<p>In your example, the performance will anyway be driven by the synchronized access to <code>System.out.println()</code>, and making this process parallel will have no effect, or even a negative one.\nMoreover, remember that parallel streams don't magically solve all the synchronization problems. If a shared resource is used by the predicates and functions used in the process, you'll have to make sure that everything is thread-safe. In particular, side effects are tings you really have to worry about if you go parallel.</p>\n\n<p>In any case, measure, don't guess! Only a measurement will tell you if the parallelism is worth it or not.</p>\n", "title": "Should I always use a parallel stream when possible?", "tags": ["java", "parallel-processing", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/20375176/should-i-always-use-a-parallel-stream-when-possible/20375622#20375622", "post_type": "answer", "question_id": 20375176, "answer_id": 20375622}, {"body": "<p>Such an operation ought to be <em>possible</em> with a Java 8 <code>Stream</code>, but it can't necessarily be done efficiently -- for example, you can't necessarily parallelize such an operation, as you have to look at elements in order.</p>\n\n<p>The API doesn't provide an easy way to do it, but what's probably the simplest way is to take <code>Stream.iterator()</code>, wrap the <code>Iterator</code> to have a \"take-while\" implementation, and then go back to a <code>Spliterator</code> and then a <code>Stream</code>.  Or -- maybe -- wrap the <code>Spliterator</code>, though it can't really be split anymore in this implementation.</p>\n\n<p>Here's an untested implementation of <code>takeWhile</code> on a <code>Spliterator</code>:</p>\n\n<pre><code>static &lt;T&gt; Spliterator&lt;T&gt; takeWhile(\n    Spliterator&lt;T&gt; splitr, Predicate&lt;? super T&gt; predicate) {\n  return new Spliterators.AbstractSpliterator&lt;T&gt;(splitr.estimateSize(), 0) {\n    boolean stillGoing = true;\n    @Override public boolean tryAdvance(Consumer&lt;? super T&gt; consumer) {\n      if (stillGoing) {\n        boolean hadNext = splitr.tryAdvance(elem -&gt; {\n          if (predicate.test(elem)) {\n            consumer.accept(elem);\n          } else {\n            stillGoing = false;\n          }\n        });\n        return hadNext &amp;&amp; stillGoing;\n      }\n      return false;\n    }\n  };\n}\n\nstatic &lt;T&gt; Stream&lt;T&gt; takeWhile(Stream&lt;T&gt; stream, Predicate&lt;? super T&gt; predicate) {\n   return StreamSupport.stream(takeWhile(stream.spliterator(), predicate), false);\n}\n</code></pre>\n", "title": "Limit a stream by a predicate", "tags": ["java", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/20746429/limit-a-stream-by-a-predicate/20765715#20765715", "post_type": "answer", "question_id": 20746429, "answer_id": 20765715}, {"body": "<p>If you consider that the equation used for the random number generator is:</p>\n\n<p><img src=\"http://i.stack.imgur.com/DVa8N.jpg\" alt=\"LCGEquation\"></p>\n\n<p>Where X(n+1) is the next number, a is the multipler, X(n) is the current number, c is the increment and m is the modulus.</p>\n\n<p>If you look further into <code>Random</code>, a, c and m are defined in the header of the class</p>\n\n<pre><code>private static final long multiplier = 0x5DEECE66DL;   //= 25214903917 -- 'a'\nprivate static final long addend = 0xBL;               //= 11          -- 'c'\nprivate static final long mask = (1L &lt;&lt; 48) - 1;       //= 2 ^ 48 - 1  -- 'm'\n</code></pre>\n\n<p>and looking at the method <code>protected int next(int bits)</code> this is were the equation is implemented</p>\n\n<pre><code>nextseed = (oldseed * multiplier + addend) &amp; mask;\n//X(n+1) =  (X(n)   *      a     +    c  ) mod m\n</code></pre>\n\n<p>This implies that the method <code>seedUniquifier()</code> is actually getting X(n) or in the first case at initialisation X(0) which is actually <code>8682522807148012 * 181783497276652981</code>, this value is then multiplied further by the value of <code>System.nanoTime()</code>. This algorithm is consistent with the equation above but with the following X(0) = <code>8682522807148012</code>, a = <code>181783497276652981</code>, m = 2 ^ 64 and c = 0. But as the mod m of is preformed by the long overflow the above equation just becomes</p>\n\n<p><img src=\"http://i.stack.imgur.com/gi3H7.jpg\" alt=\"eq2\"></p>\n\n<p>Looking at <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.99.6553&amp;rep=rep1&amp;type=pdf\">the paper</a>, the value of a = <code>1181783497276652981</code> is for m = 2 ^ 64, c = 0. So it appears to just be a typo and the value <code>8682522807148012</code> for X(0) which appears to be a seeming randomly chosen number from legacy code for <code>Random</code>. <a href=\"http://hg.openjdk.java.net/jdk7/jdk7/jdk/rev/df4d3e3e465a\">As seen here.</a> But the merit of these chosen numbers could still be valid but as mentioned by Thomas B. probably not as \"good\" as the one in the paper.</p>\n\n<p><strong>EDIT - Below original thoughts have since been clarified so can be disregarded but leaving it for reference</strong></p>\n\n<p>This leads me the conclusions:</p>\n\n<ol>\n<li><p>The reference to the paper is not for the value itself but for the methods used to obtain the values due to the different values of a, c and m</p></li>\n<li><p>It is mere coincidence that the value is otherwise the same other than the leading 1 and the comment is misplaced (still struggling to believe this though)</p></li>\n</ol>\n\n<p><strong>OR</strong> </p>\n\n<p>There has been a serious misunderstanding of the tables in the paper and the developers have just chosen a value at random as by the time it is multiplied out what was the point in using the table value in the first place especially as you can just provide your own seed value any way in which case these values are not even taken into account</p>\n\n<p>So to answer your question </p>\n\n<blockquote>\n  <p>Could other numbers have been chosen that would have worked as well as these two numbers? Why or why not?</p>\n</blockquote>\n\n<p>Yes, any number could have been used, in fact if you specify a seed value when you Instantiate Random you are using any other value. This value does not have any effect on the performance of the generator, this is determined by the values of a,c and m which are hard coded within the class.</p>\n", "title": "What&#39;s with 181783497276652981 and 8682522807148012 in Random (Java 7)?", "tags": ["java", "random"], "link": "http://stackoverflow.com/questions/18092160/whats-with-181783497276652981-and-8682522807148012-in-random-java-7/18093883#18093883", "post_type": "answer", "question_id": 18092160, "answer_id": 18093883}, {"body": "<p>Very simply:</p>\n\n<pre><code>Arrays.asList(\"Hi!\")\n</code></pre>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/20358917#20358917", "post_type": "answer", "question_id": 20358883, "answer_id": 20358917}, {"body": "<h3>Fixed size <code>List</code></h3>\n\n<p>The easiest way, that I know of, is to create a fixed-size single element <code>List</code> with <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-\"><code>Arrays.asList(T...)</code></a> like</p>\n\n<pre><code>// Returns a List backed by a varargs T.\nreturn Arrays.asList(s);\n</code></pre>\n\n<h3>Variable size <code>List</code></h3>\n\n<p>If it needs vary in size you can construct an <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#ArrayList-java.util.Collection-\"><code>ArrayList</code></a> and the fixed-size<code>List</code> like</p>\n\n<pre><code>return new ArrayList&lt;String&gt;(Arrays.asList(s));\n</code></pre>\n\n<p>and (in Java 7+) you can use the <a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/language/type-inference-generic-instance-creation.html\">diamond operator <code>&lt;&gt;</code></a> to make it </p>\n\n<pre><code>return new ArrayList&lt;&gt;(Arrays.asList(s));\n</code></pre>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/20358920#20358920", "post_type": "answer", "question_id": 20358883, "answer_id": 20358920}, {"body": "<p>You can use the utility method <code>Arrays.asList</code> and feed that result into a new <code>ArrayList</code>.</p>\n\n<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(s));\n</code></pre>\n\n<p>Other options:</p>\n\n<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Collections.nCopies(1, s));\n</code></pre>\n\n<p>and</p>\n\n<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Collections.singletonList(s));\n</code></pre>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#ArrayList%28java.util.Collection%29\"><code>ArrayList(Collection)</code></a> constructor.</li>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList%28T...%29\"><code>Arrays.asList</code></a> method.</li>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#nCopies%28int,%20T%29\"><code>Collections.nCopies</code></a> method.</li>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#singletonList%28T%29\"><code>Collections.singletonList</code></a> method.</li>\n</ul>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/20358928#20358928", "post_type": "answer", "question_id": 20358883, "answer_id": 20358928}, {"body": "<p>The other answers all use <code>Arrays.asList()</code>, which returns an unmodifiable list (an <code>UnsupportedOperationException</code> is thrown if you try to add or remove an element). To get a mutable list you can wrap the returned list in a new <code>ArrayList</code> as a couple of answers point out, but a cleaner solution is to use <a href=\"https://github.com/google/guava\" rel=\"nofollow\">Guava's</a> <a href=\"http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Lists.html#newArrayList()\" rel=\"nofollow\">Lists.newArrayList()</a> (available since at least <a href=\"http://docs.guava-libraries.googlecode.com/git-history/v10.0.1/javadoc/index.html\" rel=\"nofollow\">Guava 10</a>, released in 2011). </p>\n\n<p>For example:</p>\n\n<pre><code>Lists.newArrayList(\"Blargle!\");\n</code></pre>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/29784337#29784337", "post_type": "answer", "question_id": 20358883, "answer_id": 29784337}, {"body": "<p>You don't need a separate case for each <code>int</code> above <code>85</code>.  Just have one <code>else</code>, so that if the health is already <code>86</code> or higher, then just set it directly to <code>100</code>.</p>\n\n<pre><code>if(health &lt;= 85)\n    health += 15;\nelse\n    health = 100;\n</code></pre>\n", "title": "How can I increment a variable without exceeding a maximum value?", "tags": ["java", "if-statement", "switch-statement"], "link": "http://stackoverflow.com/questions/18647214/how-can-i-increment-a-variable-without-exceeding-a-maximum-value/18647234#18647234", "post_type": "answer", "question_id": 18647214, "answer_id": 18647234}, {"body": "<p><code>Println(Object)</code> uses <code>String.valueOf()</code></p>\n\n<pre><code>public static String valueOf(Object obj) {\n    return (obj == null) ? \"null\" : obj.toString();\n}\n</code></pre>\n\n<p><code>Print(String)</code> does null check.</p>\n\n<pre><code>public void print(String s) {\n    if (s == null) {\n        s = \"null\";\n    }\n    write(s);\n}\n</code></pre>\n", "title": "No Exception while type casting with a null in java", "tags": ["java", "nullpointerexception", "typecasting-operator"], "link": "http://stackoverflow.com/questions/18723596/no-exception-while-type-casting-with-a-null-in-java/18723651#18723651", "post_type": "answer", "question_id": 18723596, "answer_id": 18723651}, {"body": "<p>You can cast <code>null</code> to any reference type without getting any exception.</p>\n\n<p><code>println</code> method does not throw null pointer because it first checks whether the object is null or not. If null then it simply prints the string <code>\"null\"</code>. Otherwise it will call the <code>toString</code> method of that object.</p>\n\n<p><strong>Adding more details:</strong> Internally print methods call <code>String.valueOf(object)</code> method on the input object. And in <code>valueOf</code> method, this check helps to avoid null pointer excpeiton:</p>\n\n<pre><code>return (obj == null) ? \"null\" : obj.toString();\n</code></pre>\n\n<p>For rest of your confusion, calling any method on a null object should throw a null pointer exception, if not a special case.</p>\n", "title": "No Exception while type casting with a null in java", "tags": ["java", "nullpointerexception", "typecasting-operator"], "link": "http://stackoverflow.com/questions/18723596/no-exception-while-type-casting-with-a-null-in-java/18723666#18723666", "post_type": "answer", "question_id": 18723596, "answer_id": 18723666}, {"body": "<p>You can cast <code>null</code> to any reference type.  You can also call methods which handle a <code>null</code> as an argument, e.g. <code>System.out.println(Object)</code> does, but you cannot reference a <code>null</code> value and call a method on it.</p>\n\n<p>BTW There is a tricky situation where it appears you can call static methods on <code>null</code> values.</p>\n\n<pre><code>Thread t = null;\nt.yield(); // Calls static method Thread.yield() so this runs fine.\n</code></pre>\n", "title": "No Exception while type casting with a null in java", "tags": ["java", "nullpointerexception", "typecasting-operator"], "link": "http://stackoverflow.com/questions/18723596/no-exception-while-type-casting-with-a-null-in-java/18723704#18723704", "post_type": "answer", "question_id": 18723596, "answer_id": 18723704}]}