{"items": [{"body": "<p>Being somewhat new to the Java language I'm trying to familiarize myself with all the ways (or at least the non-pathological ones) that one might iterate through a list (or perhaps other collections) and the advantages or disadvantages of each. </p>\n\n<p>Given a <code>List&lt;E&gt; list</code> object, I know of the following ways to loop through all elements:</p>\n\n<h3>Basic <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.14.1\">for</a> <a href=\"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html\">loop</a> (of course, there're equivalent <code>while</code> / <code>do while</code> loops as well)</h3>\n\n<pre><code>// Not recommended (see below)!\nfor (int i = 0; i &lt; list.size(); i++) {\n    E element = list.get(i);\n    // 1 - can call methods of element\n    // 2 - can use i to make index-based calls to methods of list\n\n    // ...\n}\n</code></pre>\n\n<p>Note: As @amarseillan pointed out, this form is a poor choice\nfor iterating over <code>List</code>s because the actual implementation of\nthe <code>get</code> method may not be as efficient as when using an <code>Iterator</code>.\nFor example, <code>LinkedList</code> implementations must traverse all of\nthe elements preceding i to get the i-th element.\nIn the above example there's no way for the <code>List</code> implementation to\n\"save its place\" to make future iterations more efficient. \nFor an <code>ArrayList</code> it doesn't really matter because the complexity/cost of <code>get</code> is constant time (O(1)) whereas for a <code>LinkedList</code> is it proportional to the size of the list (O(n)). \nFor more information about the computational complexity of the built-in <code>Collections</code> implementations, check out <a href=\"http://stackoverflow.com/questions/559839/big-o-summary-for-java-collections-framework-implementations\">this question</a>.</p>\n\n<h3>Enhanced <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.14.2\">for loop</a> (nicely explained <a href=\"http://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work\">in this question</a>)</h3>\n\n<pre><code>for (E element : list) {\n    // 1 - can call methods of element\n\n    // ...\n}\n</code></pre>\n\n<h3><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html\">Iterator</a></h3>\n\n<pre><code>for (Iterator&lt;E&gt; iter = list.iterator(); iter.hasNext(); ) {\n    E element = iter.next();\n    // 1 - can call methods of element\n    // 2 - can use iter.remove() to remove the current element from the list\n\n    // ...\n}\n</code></pre>\n\n<p><strong>EDIT:</strong> Added ListIterator</p>\n\n<h3><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/ListIterator.html\">ListIterator</a></h3>\n\n<pre><code>for (ListIterator&lt;E&gt; iter = list.listIterator(); iter.hasNext(); ) {\n    E element = iter.next();\n    // 1 - can call methods of element\n    // 2 - can use iter.remove() to remove the current element from the list\n    // 3 - can use iter.add(...) to insert a new element into the list\n    //     between element and iter-&gt;next()\n    // 4 - can use iter.set(...) to replace the current element\n\n    // ...\n}\n</code></pre>\n\n<p><strong>EDIT:</strong> Added \"functional-style\" solution (thanks Dave Newton)</p>\n\n<h3><a href=\"http://functionaljava.org/\">Functional Java</a></h3>\n\n<pre><code>list.stream().map(e -&gt; e + 1); // can apply a transformation function for e\n</code></pre>\n\n<p><strong>EDIT:</strong> Added map method from Java 8's Stream API (see @i_am_zero's answer)</p>\n\n<h3><a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html#forEach-java.util.function.Consumer-\">Iterable.forEach</a>, <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#forEach-java.util.function.Consumer-\">Stream.forEach</a>, ...</h3>\n\n<p>In Java 8 collection classes that implement <code>Iterable</code> (for example all <code>List</code>s) now have a <code>forEach</code> method, which can be used instead of the <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.14.1\">for loop statement</a> demonstrated above. (Here is <a href=\"http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop\">another question</a> that provides a good comparison.)</p>\n\n<pre><code>Arrays.asList(1,2,3,4).forEach(System.out::println);\n// 1 - can call methods of an element\n// 2 - would need reference to containing object to remove an item\n//     (TODO: someone please confirm / deny this)\n// 3 - functionally separates iteration from the action\n//     being performed with each item.\n\nArrays.asList(1,2,3,4).stream().forEach(System.out::println);\n// same capabilities as above plus potentially greater\n// utilization of parallelism\n// (caution: consequently, order of execution is not guaranteed,\n// see [Stream.forEachOrdered][stream-foreach-ordered] for more\n// information about this.)\n</code></pre>\n\n<p>What other ways are there, if any?</p>\n\n<p>I feel like this has got to be a duplicate, but I haven't been able to find what I'm looking for, so I apologize for this question potentially being redundant.\n(BTW, my interest does not stem at all from a desire to <a href=\"http://stackoverflow.com/questions/2113216/which-is-more-efficient-a-for-each-loop-or-an-iterator\">optimize performance</a>; I just want to know what forms are available to me as a developer.)</p>\n\n<p><strong>EDIT:</strong> Moved ListIterationExample.java to a suggested answer</p>\n", "title": "Ways to iterate over a List in java?", "tags": ["java", "loops", "collections", "iteration"], "link": "http://stackoverflow.com/questions/18410035/ways-to-iterate-over-a-list-in-java", "post_type": "question", "question_id": 18410035}, {"body": "<p>Java 8 has a completely new API for date and time. One of the most useful classes in this API is <code>LocalDateTime</code>, for holding a timezone-independent date-with-time value. </p>\n\n<p>There are probably millions of lines of code using the legacy class <code>java.util.Date</code> for this purpose. As such, when interfacing old and new code there will be a need for converting between the two. As there seems to be no direct methods for accomplishing this, how can it be done?</p>\n", "title": "Converting between java.time.LocalDateTime and java.util.Date", "tags": ["java", "datetime", "java-8", "java-time"], "link": "http://stackoverflow.com/questions/19431234/converting-between-java-time-localdatetime-and-java-util-date", "post_type": "question", "question_id": 19431234}, {"body": "<p>In Java 8 we have the class <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html\">Stream&lt;T></a>, which curiously have a method</p>\n\n<pre><code>Iterator&lt;T&gt; iterator()\n</code></pre>\n\n<p>So you would expect it to implement interface <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable&lt;T></a>, which requires exactly this method, but that's not the case.</p>\n\n<p>When I want to iterate over a Stream using a foreach loop, I have to do something like</p>\n\n<pre><code>public static Iterable&lt;T&gt; getIterable(Stream&lt;T&gt; s) {\n    return new Iterable&lt;T&gt; {\n        @Override\n        public Iterator&lt;T&gt; iterator() {\n            return s.iterator();\n        }\n    };\n}\n\nfor (T element : getIterable(s)) { ... }\n</code></pre>\n\n<p>Am I missing something here?</p>\n", "title": "Why does Stream&lt;T&gt; not implement Iterable&lt;T&gt;?", "tags": ["java", "java-8", "java-stream", "iterable"], "link": "http://stackoverflow.com/questions/20129762/why-does-streamt-not-implement-iterablet", "post_type": "question", "question_id": 20129762}, {"body": "<p>I was wondering what happens when you try to catch an StackOverflowError and came up with the following method:</p>\n\n<pre><code>class RandomNumberGenerator {\n\n    static int cnt = 0;\n\n    public static void main(String[] args) {\n        try {\n            main(args);\n        } catch (StackOverflowError ignore) {\n            System.out.println(cnt++);\n        }\n    }\n}\n</code></pre>\n\n<p>Now my question:</p>\n\n<p>Why does this method print '4'?</p>\n\n<p>I thought maybe it was because <code>System.out.println()</code> needs 3 segments on the call stack, but I don't know where the number 3 comes from. When you look at the source code (and bytecode) of <code>System.out.println()</code>, it normally would lead to far more method invocations than 3 (so 3 segments on the call stack would not be sufficient). If it's because of optimizations the Hotspot VM applies (method inlining), I wonder if the result would be different on another VM.</p>\n\n<p><b>Edit</b>:</p>\n\n<p>As the output seems to be highly JVM specific, I get the result 4 using<br>\nJava(TM) SE Runtime Environment (build 1.6.0_41-b02)<br>\nJava HotSpot(TM) 64-Bit Server VM (build 20.14-b01, mixed mode)</p>\n\n<p><br></p>\n\n<p><b> Explanation why I think this question is different from <a href=\"http://stackoverflow.com/questions/15083318/understanding-java-stack\">Understanding java stack</a>: </b></p>\n\n<p>My question is not about why there is a cnt > 0 (obviously because <code>System.out.println()</code> requires stack size and throws another <code>StackOverflowError</code> before something gets printed), but why it has the particular value of 4, respectively 0,3,8,55 or something else on other systems.</p>\n", "title": "Why does this method print 4?", "tags": ["java", "jvm", "stack-overflow"], "link": "http://stackoverflow.com/questions/17828584/why-does-this-method-print-4", "post_type": "question", "question_id": 17828584}, {"body": "<p>Why were <code>181783497276652981</code> and <code>8682522807148012</code> chosen in <code>Random.java</code>?</p>\n\n<p>Here's the relevant source code from Java SE JDK 1.7:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>/**\n * Creates a new random number generator. This constructor sets\n * the seed of the random number generator to a value very likely\n * to be distinct from any other invocation of this constructor.\n */\npublic Random() {\n    this(seedUniquifier() ^ System.nanoTime());\n}\n\nprivate static long seedUniquifier() {\n    // L'Ecuyer, \"Tables of Linear Congruential Generators of\n    // Different Sizes and Good Lattice Structure\", 1999\n    for (;;) {\n        long current = seedUniquifier.get();\n        long next = current * 181783497276652981L;\n        if (seedUniquifier.compareAndSet(current, next))\n            return next;\n    }\n}\n\nprivate static final AtomicLong seedUniquifier\n    = new AtomicLong(8682522807148012L);\n</code></pre>\n\n<p>So, invoking <code>new Random()</code> without any seed parameter takes the current \"seed uniquifier\" and XORs it with <code>System.nanoTime()</code>.  Then it uses <code>181783497276652981</code> to create another seed uniquifier to be stored for the next time <code>new Random()</code> is called.</p>\n\n<p>The literals <code>181783497276652981L</code> and <code>8682522807148012L</code> are not placed in constants, but they don't appear anywhere else.</p>\n\n<p>At first the comment gives me an easy lead.  Searching online for that article yields <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.99.6553&amp;rep=rep1&amp;type=pdf\" rel=\"nofollow\">the actual article</a>.  <code>8682522807148012</code> doesn't appear in the paper, but <code>181783497276652981</code> does appear -- as a substring of another number, <code>1181783497276652981</code>, which is <code>181783497276652981</code> with a <code>1</code> prepended.</p>\n\n<p>The paper claims that <code>1181783497276652981</code> is a number that yields good \"merit\" for a linear congruential generator.  Was this number simply mis-copied into Java?  Does <code>181783497276652981</code> have an acceptable merit?</p>\n\n<p>And why was <code>8682522807148012</code> chosen?</p>\n\n<p>Searching online for either number yields no explanation, only <a href=\"http://www.java-forums.org/advanced-java/72124-random-seed.html\" rel=\"nofollow\">this page</a> that also notices the dropped <code>1</code> in front of <code>181783497276652981</code>.</p>\n\n<p>Could other numbers have been chosen that would have worked as well as these two numbers?  Why or why not?</p>\n", "title": "What&#39;s with 181783497276652981 and 8682522807148012 in Random (Java 7)?", "tags": ["java", "random"], "link": "http://stackoverflow.com/questions/18092160/whats-with-181783497276652981-and-8682522807148012-in-random-java-7", "post_type": "question", "question_id": 18092160}, {"body": "<p>Is there a Utility method somewhere that can do this in 1 line? I can't find it anywhere in <code>Collections</code>, or <code>List</code>.</p>\n\n<pre><code>public List&lt;String&gt; stringToOneElementList(String s) {\n    List&lt;String&gt; list = new ArrayList&lt;String&gt;();\n    list.add(s);\n    return list;\n}\n</code></pre>\n\n<p>I don't want to re-invent the wheel unless I plan on putting fancy rims on it.</p>\n\n<p>Well... the type can be <code>T</code>, and not <code>String</code>. but you get the point. (with all the null checking, safety checks...etc)</p>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist", "post_type": "question", "question_id": 20358883}, {"body": "<p>I am having trouble understanding the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html\"><code>Stream</code></a> interface in Java 8, especially where it has to do with the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Spliterator.html\"><code>Spliterator</code></a> and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html\"><code>Collector</code></a> interfaces. My problem is that I simply can't understand yet the <code>Spliterator</code> and the <code>Collector</code> interfaces, and as a result the <code>Stream</code> interface is still somewhat obscure to me.</p>\n\n<p>What exactly is a <code>Spliterator</code> and a <code>Collector</code>, and how can I use them? If I am willing to write my own <code>Spliterator</code> or <code>Collector</code> (and probably my own <code>Stream</code> in that process), what should I do and not do?</p>\n\n<p>I read some examples scattered around the web, but since everything here is stil new and subject to changes, examples and tutorials are still very sparse.</p>\n", "title": "Understanding Spliterator, Collector and Stream in Java 8", "tags": ["java", "lambda", "java-8", "spliterator"], "link": "http://stackoverflow.com/questions/19235606/understanding-spliterator-collector-and-stream-in-java-8", "post_type": "question", "question_id": 19235606}, {"body": "<pre><code>String x = (String) null;\n</code></pre>\n\n<p>Why there is no exception in this statement?</p>\n\n<pre><code>String x = null;\nSystem.out.println(x);\n</code></pre>\n\n<p>It prints <code>null</code>. But <code>.toString()</code> method should throw a null pointer exception.</p>\n", "title": "No Exception while type casting with a null in java", "tags": ["java", "nullpointerexception", "typecasting-operator"], "link": "http://stackoverflow.com/questions/18723596/no-exception-while-type-casting-with-a-null-in-java", "post_type": "question", "question_id": 18723596}, {"body": "<p>I have a string \"<code>11/15/2013 08:00:00</code>\", I want to format it to \"<code>11/15/2013</code>\", what is the correct <code>DateTimeFormatter</code> pattern?</p>\n\n<p>I've tried many and googled and still unable to find the correct pattern.</p>\n\n<p>edit: I am looking for <a href=\"http://www.joda.org/joda-time/\">Joda-Time</a> <a href=\"http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormatter.html\"><code>DateTimeFormatter</code></a>, not Java's SimpleDateFormat..</p>\n", "title": "How to format Joda-Time DateTime to only mm/dd/yyyy?", "tags": ["java", "jodatime", "date-format"], "link": "http://stackoverflow.com/questions/20331163/how-to-format-joda-time-datetime-to-only-mm-dd-yyyy", "post_type": "question", "question_id": 20331163}, {"body": "<p>In many other languages, eg. Haskell, it is easy to repeat a value or function multiple times, eg. to get a list of 8 copies of the value 1:</p>\n\n<pre><code>take 8 (repeat 1)\n</code></pre>\n\n<p>but I haven't found this yet in Java 8.  Is there such a function in Java 8's JDK?</p>\n\n<p>Or alternatively something equivalent to a range like</p>\n\n<pre><code>[1..8]\n</code></pre>\n\n<p>It would seem an obvious replacement for a verbose statement in Java like</p>\n\n<pre><code>for (int i = 1; i &lt;= 8; i++) {\n    System.out.println(i);\n}\n</code></pre>\n\n<p>to have something like</p>\n\n<pre><code>Range.from(1, 8).forEach(i -&gt; System.out.println(i))\n</code></pre>\n\n<p>though this particular example doesn't look much more concise actually...  but hopefully it's more readable.</p>\n", "title": "Does Java 8 provide a good way to repeat a value or function?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/18532488/does-java-8-provide-a-good-way-to-repeat-a-value-or-function", "post_type": "question", "question_id": 18532488}, {"body": "<p>Usually, one would call the <code>reduce</code> method using <code>Math.max(int, int)</code> as follows:</p>\n\n<pre><code>reduce(new IntBinaryOperator() {\n    int applyAsInt(int left, int right) {\n        return Math.max(left, right);\n    }\n});\n</code></pre>\n\n<p>That requires a lot of syntax for just calling <code>Math.max</code>. That's where lambda expressions come into play. Since Java 8 it is allowed to do the same thing in a much shorter way:</p>\n\n<pre><code>reduce( (int left, int right) -&gt; Math.max(left, right) );\n</code></pre>\n\n<p>How does this work? The java compiler \"detects\", that you want to implement a method that accepts two <code>int</code>s and returns one <code>int</code>. This is equivalent to the formal parameters of the one and only method of interface <code>IntBinaryOperator</code> (the parameter of method <code>reduce</code> you want to call). So the compiler does the rest for you - it just assumes you want to implement <code>IntBinaryOperator</code>.</p>\n\n<p>But as <code>Math.max(int, int)</code> itself fulfills the formal requirements of <code>IntBinaryOperator</code>, it can be used directly. Because Java 7 does not have any syntax that allows a method itself to be passed as an argument (you can only pass method results, but never method references), the <code>::</code> syntax was introduced in Java 8 to reference methods:</p>\n\n<pre><code>reduce(Math::max);\n</code></pre>\n\n<p>Note that this will be interpreted by the compiler, not by the JVM at runtime! Although it produces different bytecodes for all three code snippets, they are semantically equal, so the last two can be considered to be short (and probably more efficient) versions of the <code>IntBinaryOperator</code> implementation above!</p>\n\n<p>(See also <a href=\"http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html\">Translation of Lambda Expressions</a>)</p>\n", "title": ":: (double colon) operator in Java 8", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/20001427/double-colon-operator-in-java-8/20001866#20001866", "post_type": "answer", "question_id": 20001427, "answer_id": 20001866}, {"body": "<p><code>::</code> is called Method Reference. It is basically a reference to a single method. i.e. it refers to an existing method by name.  </p>\n\n<p><strong>Short Explanation</strong>:\nBelow is an example of a reference to a static method:</p>\n\n<pre><code>class Hey{\n     public static double square(double num){\n        return Math.pow(num , 2);\n    }\n}\n\nFunction&lt;Double, Double&gt; square = Hey::square;\ndouble ans = square.apply(23d);\n</code></pre>\n\n<p><code>square</code> can be passed around just like object reference's and trigger when at need. In fact, it can be perfectly used as a reference to a normal method of an object and not just <code>static</code> ones. </p>\n\n<pre><code> class Hey{\n     public double square(double num){\n        return Math.pow(num , 2);\n    }\n}\n\nHey hey = new Hey();\nFunction&lt;Double, Double&gt; square = hey::square;\ndouble ans = square.apply(23d);\n</code></pre>\n\n<p><code>Function</code> above is a <strong>functional interface</strong>. Well to fully explain <code>::</code>, it is important to understand Functional Interface. Plainly, <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/lang/FunctionalInterface.html\">Function interface</a> is an interface with just one abstract method. </p>\n\n<p>For example: <code>Runnable</code>, <code>Callable</code>, <code>ActionListener</code> and so. </p>\n\n<p><code>Function</code> above is a functional interface with just one method <code>apply</code>. It takes one argument and produces a result. </p>\n\n<hr>\n\n<p>The reason why <code>::</code> are awesome is because:</p>\n\n<blockquote>\n  <p>Method references are expressions which have the same treatment as\n  lambda's, but instead of providing a lambda body, they refer an existing method by name</p>\n</blockquote>\n\n<p>i.e. Just like writing lambda body:</p>\n\n<pre><code>Function&lt;Double, Double&gt; square = (Double x) -&gt; x * x;\n</code></pre>\n\n<p>You can simply do:</p>\n\n<pre><code>Function&lt;Double, Double&gt; square = Hey::square;\n</code></pre>\n\n<p>At runtime they behave exactly the same. The bytecode may/not be the same (For above case, it generates the same bytecode (compile above and check <code>javap -c</code>))</p>\n\n<p>The only major criteria to satisfy is: the method you provide should have a similar signature to method of the FunctionalInterface you use as object reference. Below is illegal </p>\n\n<pre><code>Supplier&lt;Boolean&gt; p = Hey::square; //illegal\n</code></pre>\n\n<p><code>square</code> expects an argument and returns a double. <code>get</code> method in <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/util/function/Supplier.html\">Supplier</a> expects an argument but doesn't return anything. So it is an error. </p>\n\n<p><strong>Method Reference refers to a method of the functional interface</strong> (As mentioned, functional interface can only have one method). </p>\n\n<p>Some more examples: <code>accept</code> method in <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/util/function/Consumer.html\">Consumer</a> takes an input but doesnt return anything.</p>\n\n<pre><code>Consumer&lt;Integer&gt; b1 = System::exit;   // void exit(int status)\nConsumer&lt;String[]&gt; b2 = Arrays::sort;  // void sort(Object[] a)\nConsumer&lt;String&gt; b3 = MyProgram::main; // void main(String... args)\n\nclass Hey{\n    public double getRandom(){\n        return Math.random();\n    }\n}\n\nCallable&lt;Double&gt; call = hey::getRandom;\nSupplier&lt;Double&gt; call2 = hey::getRandom;\nDoubleSupplier sup = hey::getRandom;\n//Supplier is functional interface that takes no argument and gives a result\n</code></pre>\n\n<p>Above <code>getRandom</code> takes no argument and returns a double. So any functional interface that satisfies the criteria of: <code>take no argument and return double</code> can be used. </p>\n\n<p>Another example:</p>\n\n<pre><code>Set&lt;String&gt; set = new HashSet&lt;&gt;();\nset.addAll(Arrays.asList(\"leo\",\"bale\",\"hanks\"));\nPredicate&lt;String&gt; pred = set::contains;\nboolean exists = pred.test(\"leo\");\n</code></pre>\n\n<p><strong>In case of Parametrized Types</strong>:</p>\n\n<pre><code>class Param&lt;T&gt;{\n    T elem;\n    public T get(){\n        return elem;\n    }\n\n    public void set(T elem){\n        this.elem = elem;\n    }\n    public static &lt;E&gt; E returnSame(E elem){\n        return elem;\n    }\n}\n\nSupplier&lt;Param&lt;Integer&gt;&gt; obj = Param&lt;Integer&gt;::new;\nParam&lt;Integer&gt; param = obj.get();\nConsumer&lt;Integer&gt; c = param::set;\nSupplier&lt;Integer&gt; s = param::get;\n\n    Function&lt;String, String&gt; func = Param::&lt;String&gt;returnSame;\n</code></pre>\n\n<p>Method Reference can be obtained in different styles, but fundamentally they all mean the same and can simply be visualized as a lambda:</p>\n\n<ol>\n<li>A static method (<code>ClassName::methName</code>)</li>\n<li>An instance method of a particular object (<code>instanceRef::methName</code>)</li>\n<li>A super method of a particular object (<code>super::methName</code>)</li>\n<li>An instance method of an arbitrary object of a particular type (<code>ClassName::methName</code>)</li>\n<li>A class constructor reference (<code>ClassName::new</code>)</li>\n<li>An array constructor reference (<code>TypeName[]::new</code>)</li>\n</ol>\n\n<p>For further reference: <a href=\"http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html\">http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-final.html</a></p>\n", "title": ":: (double colon) operator in Java 8", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/20001427/double-colon-operator-in-java-8/22245383#22245383", "post_type": "answer", "question_id": 20001427, "answer_id": 22245383}, {"body": "<p>If your key is <strong>NOT</strong> guaranteed to be unique for all elements in the list, you should convert it to a <code>Map&lt;String, List&lt;Choice&gt;</code> instead of a <code>Map&lt;String, Choice&gt;</code></p>\n\n<pre><code>Map&lt;String, List&lt;Choice&gt;&gt; result =\n choices.stream().collect(Collectors.groupingBy(Choice::getName));\n</code></pre>\n", "title": "Java 8 List&lt;V&gt; into Map&lt;K, V&gt;", "tags": ["java", "lambda", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/20363719/java-8-listv-into-mapk-v/25453317#25453317", "post_type": "answer", "question_id": 20363719, "answer_id": 25453317}, {"body": "<p>I was trying to do this and found that, using the answers above, when using <code>Functions.identity()</code> for the key to the Map, then I had issues with using a local method like <code>this::localMethodName</code> to actually work because of typing issues.</p>\n\n<p><code>Functions.identity()</code> actually does something to the typing in this case so the method would only work by returning <code>Object</code> and accepting a param of <code>Object</code></p>\n\n<p>To solve this, I ended up ditching <code>Functions.identity()</code> and using <code>s-&gt;s</code> instead.</p>\n\n<p>So my code, in my case to list all directories inside a directory, and for each one use the name of the directory as the key to the map and then call a method with the directory name and return a collection of items, looks like:</p>\n\n<pre><code>Map&lt;String, Collection&lt;ItemType&gt;&gt; items = Arrays.stream(itemFilesDir.listFiles(File::isDirectory))\n.map(File::getName)\n.collect(Collectors.toMap(s-&gt;s, this::retrieveBrandItems));\n</code></pre>\n", "title": "Java 8 List&lt;V&gt; into Map&lt;K, V&gt;", "tags": ["java", "lambda", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/20363719/java-8-listv-into-mapk-v/34675066#34675066", "post_type": "answer", "question_id": 20363719, "answer_id": 34675066}, {"body": "<p>The object your method <code>decompressGZIP()</code> needs is a <code>byte[]</code>.</p>\n\n<p>So the basic, technical answer to the question you have asked is:</p>\n\n<pre><code>byte[] b = string.getBytes();\nbyte[] b = string.getBytes(Charset.forName(\"UTF-8\"));\nbyte[] b = string.getBytes(StandardCharsets.UTF_8); // Java 7+ only\n</code></pre>\n\n<hr>\n\n<p>However the problem you appear to be wrestling with is that this doesn't display very well. Calling <code>toString()</code> will just give you the default <code>Object.toString()</code> which is the class name + memory address. In your result <code>[B@38ee9f13</code>, the <code>[B</code> means <code>byte[]</code> and <code>38ee9f13</code> is the memory address, separated by an <code>@</code>.</p>\n\n<p>For display purposes you can use:</p>\n\n<pre><code>Arrays.toString(bytes);\n</code></pre>\n\n<p>But this will just display as a sequence of comma-separated integers, which may or may not be what you want.</p>\n\n<p>To get a readable <code>String</code> back from a <code>byte[]</code>, use:</p>\n\n<pre><code>String string = new String(byte[] bytes, Charset charset);\n</code></pre>\n\n<hr>\n\n<p>The reason the <code>Charset</code> version is favoured, is that all <code>String</code> objects in Java are stored internally as UTF-16. When converting to a <code>byte[]</code> you will get a different breakdown of bytes for the given glyphs of that <code>String</code>, depending upon the chosen charset.</p>\n", "title": "How to convert Java String into byte[]?", "tags": ["java", "string", "bytearray"], "link": "http://stackoverflow.com/questions/18571223/how-to-convert-java-string-into-byte/18571348#18571348", "post_type": "answer", "question_id": 18571223, "answer_id": 18571348}, {"body": "<p>You can use <code>String.getBytes()</code> which returns the <code>byte[]</code> array.</p>\n", "title": "How to convert Java String into byte[]?", "tags": ["java", "string", "bytearray"], "link": "http://stackoverflow.com/questions/18571223/how-to-convert-java-string-into-byte/18571352#18571352", "post_type": "answer", "question_id": 18571223, "answer_id": 18571352}, {"body": "<p>Try using String.getBytes(). It returns a byte[] representing string data.\nExample:</p>\n\n<pre><code>String data = \"sample data\";\nbyte[] byteData = data.getBytes();\n</code></pre>\n", "title": "How to convert Java String into byte[]?", "tags": ["java", "string", "bytearray"], "link": "http://stackoverflow.com/questions/18571223/how-to-convert-java-string-into-byte/18571358#18571358", "post_type": "answer", "question_id": 18571223, "answer_id": 18571358}, {"body": "<p>You might wanna try <code>return new String(byteout.toByteArray(Charset.forName(\"UTF-8\")))</code></p>\n", "title": "How to convert Java String into byte[]?", "tags": ["java", "string", "bytearray"], "link": "http://stackoverflow.com/questions/18571223/how-to-convert-java-string-into-byte/20262456#20262456", "post_type": "answer", "question_id": 18571223, "answer_id": 20262456}, {"body": "<p>In Java 8 collection classes that implement <code>Iterable</code> (for example all lists) now have <code>forEach</code> method:</p>\n\n<pre><code>Arrays.asList(1,2,3,4).forEach(System.out::println);\n</code></pre>\n\n<p>The above example makes use of <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\" rel=\"nofollow\">method-reference</a> introduced in Java 8. We can also iterate over a list using <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html\" rel=\"nofollow\">Stream</a> as:</p>\n\n<pre><code>Arrays.asList(1,2,3,4).stream().forEach(System.out::println);\n</code></pre>\n\n<p>The advantage with later option is that we can also make use of parallel streams wherever appropriate. If the objective is only to print the items irrespective of the order then we can use parallel stream as:</p>\n\n<pre><code>Arrays.asList(1,2,3,4).parallelStream().forEach(System.out::println);\n</code></pre>\n", "title": "Ways to iterate over a List in java?", "tags": ["java", "loops", "collections", "iteration"], "link": "http://stackoverflow.com/questions/18410035/ways-to-iterate-over-a-list-in-java/37409771#37409771", "post_type": "answer", "question_id": 18410035, "answer_id": 37409771}, {"body": "<p>As per my research, all the <code>final String</code> are interned in Java. From one of the blog post:</p>\n\n<blockquote>\n  <p>So, if you really need to compare two String using == or != make sure you call String.intern() method before making comparison. Otherwise, always prefer String.equals(String) for String comparison.</p>\n</blockquote>\n\n<p>So it means if you call <code>String.intern()</code> you can compare two strings using <code>==</code> operator. But here <code>String.intern()</code> is not necessary because in Java <code>final String</code> are internally interned.</p>\n\n<p>You can find more information <a href=\"http://hanuska.blogspot.in/2007/04/people-still-dont-get-string-comparison.html\">String comparision using == operator</a> and Javadoc for <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#intern%28%29\">String.intern()</a> method.</p>\n\n<p>Also refer this <a href=\"http://stackoverflow.com/questions/1855170/when-should-we-use-intern-method-of-string-on-string-constants\">Stackoverflow</a> post for more information.</p>\n", "title": "Comparing strings with == which are declared final in Java", "tags": ["java", "string", "final"], "link": "http://stackoverflow.com/questions/19418427/comparing-strings-with-which-are-declared-final-in-java/19418548#19418548", "post_type": "answer", "question_id": 19418427, "answer_id": 19418548}, {"body": "<p>If you take a look at this methods </p>\n\n<pre><code>public void noFinal() {\n    String str1 = \"str\";\n    String str2 = \"ing\";\n    String concat = str1 + str2;\n\n    System.out.println(concat == \"string\");\n}\n\npublic void withFinal() {\n    final String str1 = \"str\";\n    final String str2 = \"ing\";\n    String concat = str1 + str2;\n\n    System.out.println(concat == \"string\");\n}\n</code></pre>\n\n<p>and its decompiled with <code>javap -c ClassWithTheseMethods</code> \nversions you will see </p>\n\n<pre><code>  public void noFinal();\n    Code:\n       0: ldc           #15                 // String str\n       2: astore_1      \n       3: ldc           #17                 // String ing\n       5: astore_2      \n       6: new           #19                 // class java/lang/StringBuilder\n       9: dup           \n      10: aload_1       \n      11: invokestatic  #21                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n      14: invokespecial #27                 // Method java/lang/StringBuilder.\"&lt;init&gt;\":(Ljava/lang/String;)V\n      17: aload_2       \n      18: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      21: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      ...\n</code></pre>\n\n<p>and</p>\n\n<pre><code>  public void withFinal();\n    Code:\n       0: ldc           #15                 // String str\n       2: astore_1      \n       3: ldc           #17                 // String ing\n       5: astore_2      \n       6: ldc           #44                 // String string\n       8: astore_3      \n       ...\n</code></pre>\n\n<p>So if Strings are not final compiler will have to use <code>StringBuilder</code> to concatenate <code>str1</code> and <code>str2</code> so </p>\n\n<pre><code>String concat=str1+str2;\n</code></pre>\n\n<p>will be compiled to </p>\n\n<pre><code>String concat = new StringBuilder(str1).append(str2).toString();\n</code></pre>\n\n<p>which means that <code>concat</code> will be created at runtime so will not come from String pool.</p>\n\n<hr>\n\n<p>Also if Strings are final then compiler can assume that they will never change so instead of using <code>StringBuilder</code> it can safely concatenate its values so</p>\n\n<pre><code>String concat = str1 + str2;\n</code></pre>\n\n<p>can be changed to</p>\n\n<pre><code>String concat = \"str\" + \"ing\";\n</code></pre>\n\n<p>and concatenated into</p>\n\n<pre><code>String concat = \"string\";\n</code></pre>\n\n<p>which means that <code>concate</code> will become sting literal which will be interned in string pool and then compared with same string literal from that pool in <code>if</code> statement.</p>\n", "title": "Comparing strings with == which are declared final in Java", "tags": ["java", "string", "final"], "link": "http://stackoverflow.com/questions/19418427/comparing-strings-with-which-are-declared-final-in-java/19418553#19418553", "post_type": "answer", "question_id": 19418427, "answer_id": 19418553}, {"body": "<p>You made a good summery of the practical differences in use and implementation but did not say anything about the difference in meaning.</p>\n\n<p>An <strong>interface</strong> is a description of the behaviour an implementing class will have. The implementing class ensures, that it will have these methods that can be used on it. It is basically a contract or a promise the class has to make.</p>\n\n<p>An <strong>abstract class</strong> is a basis for different subclasses that share behaviour which does not need to be repeatedly be created. Subclasses must complete the behaviour and have the option to override predefine behaviour (as long as it is not defined as <code>final</code> or <code>private</code>).</p>\n\n<p>You will find good examples in the <code>java.util</code> package which includes interfaces like <code>List</code> and abstract classes like <code>AbstractList</code> which already implements the interface. The <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html\">official documentation</a> describes the <code>AbstractList</code> as follows:</p>\n\n<blockquote>\n  <p>This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a \"random access\" data store (such as an array).</p>\n</blockquote>\n", "title": "How should I have explained the difference between an Interface and an Abstract class?", "tags": ["java", "oop", "inheritance", "interface", "abstract-class"], "link": "http://stackoverflow.com/questions/18777989/how-should-i-have-explained-the-difference-between-an-interface-and-an-abstract/18778228#18778228", "post_type": "answer", "question_id": 18777989, "answer_id": 18778228}, {"body": "<p>Many junior developers make the mistake of thinking of interfaces, abstract and concrete classes as slight variations of the same thing, and choose one of them purely on technical grounds: <em>Do I need multiple inheritance? Do I need some place to put common methods? Do I need to bother with something other than just a concrete class?</em> This is wrong, and hidden in these questions is the main problem: <strong>\"I\"</strong>. When you write code for yourself, by yourself, you rarely think of other present or future developers working on or with your code.</p>\n\n<p>Interfaces and abstract classes, although apparently similar from a technical point of view, have completely different meanings and purposes.</p>\n\n<h2>Summary</h2>\n\n<ol>\n<li><p>An interface <strong>defines a contract</strong> that some implementation will fulfill <em>for you</em>.</p></li>\n<li><p>An abstract class <strong>provides a default behavior</strong> that <em>your implementation</em> can reuse.</p></li>\n</ol>\n\n<p>These two points above is what I'm looking for when interviewing, and is a compact enough summary. Read on for more details.</p>\n\n<h2>Alternative summary</h2>\n\n<ol>\n<li>An interface is for defining public APIs</li>\n<li>An abstract class is for internal use, and for defining SPIs</li>\n</ol>\n\n<h3>By example</h3>\n\n<p>To put it differently: A concrete class does the actual work, in a very specific way. For example, an <code>ArrayList</code> uses a contiguous area of memory to store a list of objects in a compact manner which offers fast random access, iteration, and in-place changes, but is terrible at insertions, deletions, and occasionally even additions; meanwhile, a <code>LinkedList</code> uses double-linked nodes to store a list of objects, which instead offers fast iteration, in-place changes, and insertion/deletion/addition, but is terrible at random access. These two types of lists are optimized for different use cases, and it matters a lot how you're going to use them. When you're trying to squeeze performance out of a list that you're heavily interacting with, and when picking the type of list is up to you, you should carefully pick which one you're instantiating.</p>\n\n<p>On the other hand, high level users of a list don't really care how it is actually implemented, and they should be insulated from these details. Let's imagine that Java didn't expose the <code>List</code> interface, but only had a concrete <code>List</code> class that's actually what <code>LinkedList</code> is right now. All Java developers would have tailored their code to fit the implementation details: avoid random access, add a cache to speed up access, or just reimplement <code>ArrayList</code> on their own, although it would be incompatible with all the other code that actually works with <code>List</code> only. That would be terrible... But now imagine that the Java masters actually realize that a linked list is terrible for most actual use cases, and decided to switch over to an array list for their only <code>List</code> class available. This would affect the performance of every Java program in the world, and people wouldn't be happy about it. And the main culprit is that implementation details were available, and the developers assumed that those details are a permanent contract that they can rely on. This is why it's important to hide implementation details, and only define an abstract contract. This is the purpose of an interface: define what kind of input a method accepts, and what kind of output is expected, without exposing all the guts that would tempt programmers to tweak their code to fit the internal details that might change with any future update.</p>\n\n<p>An abstract class is in the middle between interfaces and concrete classes. It is supposed to help implementations share common or boring code. For example, <code>AbstractCollection</code> provides basic implementations for <code>isEmpty</code> based on size is 0, <code>contains</code> as iterate and compare, <code>addAll</code> as repeated <code>add</code>, and so on. This lets implementations focus on the crucial parts that differentiate between them: how to actually store and retrieve data.</p>\n\n<h3>Another perspective: APIs versus SPIs</h3>\n\n<p>Interfaces are low-cohesion <strong>gateways</strong> between different parts of code. They allow libraries to exist and evolve without breaking every library user when something changes internally. It's called <em>Application Programming <strong>Interface</em></strong>, not Application Programming Classes. On a smaller scale, they also allow multiple developers to collaborate successfully on large scale projects, by separating different modules through well documented interfaces.</p>\n\n<p>Abstract classes are high-cohesion <strong>helpers</strong> to be used when implementing an interface, assuming some level of implementation details. Alternatively, abstract classes are used for defining SPIs, Service Provider Interfaces.</p>\n\n<p>The difference between an API and an SPI is subtle, but important: for an API, the focus is on who <strong>uses</strong> it, and for an SPI the focus is on who <strong>implements</strong> it.</p>\n\n<p>Adding methods to an API is easy, all existing users of the API will still compile. Adding methods to an SPI is hard, since every service provider (concrete implementation) will have to implement the new methods. If interfaces are used to define an SPI, a provider will have to release a new version whenever the SPI contract changes. If abstract classes are used instead, new methods could either be defined in terms of existing abstract methods, or as empty <code>throw not implemented exception</code> stubs, which will at least allow an older version of a service implementation to still compile and run.</p>\n\n<h3>A note on Java 8 and default methods</h3>\n\n<p>Although Java 8 introduced default methods for interfaces, which makes the line between interfaces and abstract classes even blurrier, this wasn't so that implementations can reuse code, but to make it easier to change interfaces that serve both as an API and as an SPI (or are wrongly used for defining SPIs instead of abstract classes).</p>\n\n<h3>\"Book knowledge\"</h3>\n\n<p>The technical details provided in the OP's answer are considered \"book knowledge\" because this is usually the approach used in school and in most technology books about a language: <strong>what</strong> a thing is, not <strong>how</strong> to use it in practice, especially in large scale applications.</p>\n\n<p>Here's an analogy: supposed the question was:</p>\n\n<blockquote>\n  <p>What is better to rent for prom night, a car or a hotel room?</p>\n</blockquote>\n\n<p>The technical answer sounds like:</p>\n\n<blockquote>\n  <p>Well, in a car you can do it sooner, but in a hotel room you can do it more comfortably. On the other hand, the hotel room is in only one place, while in the car you can do it in more places, like, let's say you can go to the vista point for a nice view, or in a drive-in theater, or many other places, or even in more than one place. Also, the hotel room has a shower.</p>\n</blockquote>\n\n<p>That is all true, but completely misses the points that they are two completely different things, and both can be used at the same time for different purposes, and the \"doing it\" aspect is not the most important thing about either of the two options. The answer lacks perspective, it shows an immature way of thinking, while correctly presenting true \"facts\".</p>\n", "title": "How should I have explained the difference between an Interface and an Abstract class?", "tags": ["java", "oop", "inheritance", "interface", "abstract-class"], "link": "http://stackoverflow.com/questions/18777989/how-should-i-have-explained-the-difference-between-an-interface-and-an-abstract/37905386#37905386", "post_type": "answer", "question_id": 18777989, "answer_id": 37905386}, {"body": "<p>This is being described in this <a href=\"http://zeroturnaround.com/rebellabs/java-8-explained-default-methods/\">article</a>. Think about <code>forEach</code> of Collections.</p>\n\n<pre><code>List&lt;?&gt; list = \u2026\nlist.forEach(\u2026);\n</code></pre>\n\n<blockquote>\n  <p>The forEach isn\u2019t declared by <code>java.util.List</code> nor the\n  <code>java.util.Collection</code> interface yet. One obvious solution would be to\n  just add the new method to the existing interface and provide the\n  implementation where required in the JDK. However, once published, it\n  is impossible to add methods to an interface without breaking the\n  existing implementation.</p>\n  \n  <p>The benefit that default methods bring is that now it\u2019s possible to\n  add a new default method to the interface and it doesn\u2019t break the\n  implementations.</p>\n</blockquote>\n", "title": "Interface with default methods vs Abstract class in Java 8", "tags": ["java", "abstract-class", "java-8"], "link": "http://stackoverflow.com/questions/19998454/interface-with-default-methods-vs-abstract-class-in-java-8/19998652#19998652", "post_type": "answer", "question_id": 19998454, "answer_id": 19998652}, {"body": "<p>Everything is here : <a href=\"http://blog.progs.be/542/date-to-java-time\" rel=\"nofollow\">http://blog.progs.be/542/date-to-java-time</a></p>\n\n<p>The answer with \"round-tripping\" is not exact : when you do </p>\n\n<pre><code>LocalDateTime ldt = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n</code></pre>\n\n<p>if your system timezone is not UTC/GMT, you change the time !</p>\n", "title": "Converting between java.time.LocalDateTime and java.util.Date", "tags": ["java", "datetime", "java-8", "java-time"], "link": "http://stackoverflow.com/questions/19431234/converting-between-java-time-localdatetime-and-java-util-date/23526153#23526153", "post_type": "answer", "question_id": 19431234, "answer_id": 23526153}, {"body": "<p>the following seems to work when converting from new API LocalDateTime into java.util.date:</p>\n\n<pre><code>Date.from(ZonedDateTime.of({time as LocalDateTime}, ZoneId.systemDefault()).toInstant());\n</code></pre>\n\n<p>the reverse conversion can be (hopefully) achieved similar way...</p>\n\n<p>hope it helps...</p>\n", "title": "Converting between java.time.LocalDateTime and java.util.Date", "tags": ["java", "datetime", "java-8", "java-time"], "link": "http://stackoverflow.com/questions/19431234/converting-between-java-time-localdatetime-and-java-util-date/23884116#23884116", "post_type": "answer", "question_id": 19431234, "answer_id": 23884116}, {"body": "<p>Short answer:</p>\n\n<pre><code>Date in = new Date();\nLocalDateTime ldt = LocalDateTime.ofInstant(in.toInstant(), ZoneId.systemDefault());\nDate out = Date.from(ldt.atZone(ZoneId.systemDefault()).toInstant());\n</code></pre>\n\n<p>Explanation:\n(based on <a href=\"http://stackoverflow.com/questions/21242110/convert-java-util-date-to-java-time-localdate\">this question</a> about <code>LocalDate</code>)</p>\n\n<p>Despite its name, <code>java.util.Date</code> represents an instant on the time-line, not a \"date\". The actual data stored within the object is a <code>long</code> count of milliseconds since 1970-01-01T00:00Z (midnight at the start of 1970 GMT/UTC).</p>\n\n<p>The equivalent class to <code>java.util.Date</code> in JSR-310 is <code>Instant</code>, thus there are convenient methods to provide the conversion to and fro:</p>\n\n<pre><code>Date input = new Date();\nInstant instant = input.toInstant();\nDate output = Date.from(instant);\n</code></pre>\n\n<p>A <code>java.util.Date</code> instance has no concept of time-zone. This might seem strange if you call <code>toString()</code> on a <code>java.util.Date</code>, because the <code>toString</code> is relative to a time-zone. However that method actually uses Java's default time-zone on the fly to provide the string. The time-zone is not part of the actual state of <code>java.util.Date</code>.</p>\n\n<p>An <code>Instant</code> also does not contain any information about the time-zone. Thus, to convert from an <code>Instant</code> to a local date-time it is necessary to specify a time-zone. This might be the default zone - <code>ZoneId.systemDefault()</code> - or it might be a time-zone that your application controls, such as a time-zone from user preferences. <code>LocalDateTime</code> has a convenient factory method that takes both the instant and time-zone:</p>\n\n<pre><code>Date in = new Date();\nLocalDateTime ldt = LocalDateTime.ofInstant(in.toInstant(), ZoneId.systemDefault());\n</code></pre>\n\n<p>In reverse, the <code>LocalDateTime</code> the time-zone is specified by calling the <code>atZone(ZoneId)</code> method. The <code>ZonedDateTime</code> can then be converted directly to an <code>Instant</code>:</p>\n\n<pre><code>LocalDateTime ldt = ...\nZonedDateTime zdt = ldt.atZone(ZoneId.systemDefault());\nDate output = Date.from(zdt.toInstant());\n</code></pre>\n\n<p>Note that the conversion from <code>LocalDateTime</code> to <code>ZonedDateTime</code> has the potential to introduce unexpected behaviour. This is because not every local date-time exists due to Daylight Saving Time. In autumn/fall, there is an overlap in the local time-line where the same local date-time occurs twice. In spring, there is a gap, where an hour disappears. See the Javadoc of <a href=\"http://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html#atZone-java.time.ZoneId-\"><code>atZone(ZoneId)</code></a> for more the definition of what the conversion will do.</p>\n\n<p>Summary, if you round-trip a <code>java.util.Date</code> to a <code>LocalDateTime</code> and back to a <code>java.util.Date</code> you may end up with a different instant due to Daylight Saving Time.</p>\n", "title": "Converting between java.time.LocalDateTime and java.util.Date", "tags": ["java", "datetime", "java-8", "java-time"], "link": "http://stackoverflow.com/questions/19431234/converting-between-java-time-localdatetime-and-java-util-date/23885950#23885950", "post_type": "answer", "question_id": 19431234, "answer_id": 23885950}, {"body": "<p>Much more convenient way if you are sure you need a default timezone :</p>\n\n<pre><code>Date d = java.sql.Timestamp.valueOf( myLocalDateTime );\n</code></pre>\n", "title": "Converting between java.time.LocalDateTime and java.util.Date", "tags": ["java", "datetime", "java-8", "java-time"], "link": "http://stackoverflow.com/questions/19431234/converting-between-java-time-localdatetime-and-java-util-date/30133063#30133063", "post_type": "answer", "question_id": 19431234, "answer_id": 30133063}, {"body": "<p>There are already people asked the same <a href=\"http://mail.openjdk.java.net/pipermail/lambda-dev/2013-March/008876.html\">on the mailing list</a> \u263a. The main reason is Iterable also has a re-iterable semantic, while Stream is not.</p>\n\n<blockquote>\n  <p>I think the main reason is that <code>Iterable</code> implies reusability, whereas <code>Stream</code> is something that can only be used once \u2014 more like an <code>Iterator</code>.</p>\n  \n  <p>If <code>Stream</code> extended <code>Iterable</code> then existing code might be surprised when it receives an <code>Iterable</code> that throws an <code>Exception</code> the\n  second time they do <code>for (element : iterable)</code>.</p>\n</blockquote>\n", "title": "Why does Stream&lt;T&gt; not implement Iterable&lt;T&gt;?", "tags": ["java", "java-8", "java-stream", "iterable"], "link": "http://stackoverflow.com/questions/20129762/why-does-streamt-not-implement-iterablet/20130131#20130131", "post_type": "answer", "question_id": 20129762, "answer_id": 20130131}, {"body": "<p>To convert a <code>Stream</code> to an <code>Iterable</code>, you can do</p>\n\n<pre><code>Stream&lt;X&gt; stream = null;\nIterable&lt;X&gt; iterable = stream::iterator\n</code></pre>\n\n<p>To pass a <code>Stream</code> to a method that expects <code>Iterable</code>, </p>\n\n<pre><code>void foo(Iterable&lt;X&gt; iterable)\n</code></pre>\n\n<p>simply</p>\n\n<pre><code>foo(stream::iterator) \n</code></pre>\n\n<p>however it probably looks funny; it might be better to be a little bit more explicit</p>\n\n<pre><code>foo( (Iterable&lt;X&gt;)stream::iterator );\n</code></pre>\n", "title": "Why does Stream&lt;T&gt; not implement Iterable&lt;T&gt;?", "tags": ["java", "java-8", "java-stream", "iterable"], "link": "http://stackoverflow.com/questions/20129762/why-does-streamt-not-implement-iterablet/20130475#20130475", "post_type": "answer", "question_id": 20129762, "answer_id": 20130475}, {"body": "<p>I would like to point out that <a href=\"https://github.com/amaembo/streamex\"><code>StreamEx</code></a> does implement <code>Iterable</code> (and <code>Stream</code>), as well as a host of other immensely awesome functionality missing from <code>Stream</code>.</p>\n", "title": "Why does Stream&lt;T&gt; not implement Iterable&lt;T&gt;?", "tags": ["java", "java-8", "java-stream", "iterable"], "link": "http://stackoverflow.com/questions/20129762/why-does-streamt-not-implement-iterablet/30548433#30548433", "post_type": "answer", "question_id": 20129762, "answer_id": 30548433}, {"body": "<p>If you want to modify your List during traversal, then you need to use the <code>Iterator</code>. And then you can use <code>iterator.remove()</code> to remove the elements during traversal.</p>\n", "title": "How to avoid &quot;ConcurrentModificationException&quot; while removing elements from `ArrayList` while iterating it?", "tags": ["java", "list", "arraylist", "iterator"], "link": "http://stackoverflow.com/questions/18448671/how-to-avoid-concurrentmodificationexception-while-removing-elements-from-arr/18448685#18448685", "post_type": "answer", "question_id": 18448671, "answer_id": 18448685}, {"body": "<p>Use an <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html\"><code>Iterator</code></a> and call <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html#remove%28%29\"><code>remove()</code></a>:</p>\n\n<pre><code>Iterator&lt;String&gt; iter = myArrayList.iterator();\n\nwhile (iter.hasNext()) {\n    String str = iter.next();\n\n    if (someCondition)\n        iter.remove();\n}\n</code></pre>\n", "title": "How to avoid &quot;ConcurrentModificationException&quot; while removing elements from `ArrayList` while iterating it?", "tags": ["java", "list", "arraylist", "iterator"], "link": "http://stackoverflow.com/questions/18448671/how-to-avoid-concurrentmodificationexception-while-removing-elements-from-arr/18448699#18448699", "post_type": "answer", "question_id": 18448671, "answer_id": 18448699}, {"body": "<p>Though one answer is accepted and this is an old one, I thought posting this answer as it does not use <code>Iterator</code></p>\n\n<pre><code>for (String str : myArrayList) {\n    ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(myArrayList);//creating copy \n                                                                //of array list\n    list.remove(str);\n    myArrayList = list;\n}\n</code></pre>\n", "title": "How to avoid &quot;ConcurrentModificationException&quot; while removing elements from `ArrayList` while iterating it?", "tags": ["java", "list", "arraylist", "iterator"], "link": "http://stackoverflow.com/questions/18448671/how-to-avoid-concurrentmodificationexception-while-removing-elements-from-arr/26937769#26937769", "post_type": "answer", "question_id": 18448671, "answer_id": 26937769}, {"body": "<p>Text inside double quotes creates a literal <code>String</code> object.</p>\n\n<pre><code>String myString = \"Some text\";\n</code></pre>\n\n<p>The code above creates a <code>String</code> object, using double quotes.</p>\n", "title": "How can a string be initialized using &quot; &quot;?", "tags": ["java", "string"], "link": "http://stackoverflow.com/questions/17489250/how-can-a-string-be-initialized-using/17489334#17489334", "post_type": "answer", "question_id": 17489250, "answer_id": 17489334}, {"body": "<p>String gets special treatment in the JLS: it's one of the two non-primitive types for which literals exist (the other is <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.8.2\"><code>Class</code></a>) <sup>*</sup>.</p>\n\n<p>From <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.5\">the JLS</a>: </p>\n\n<blockquote>\n  <p>A string literal is a reference to an instance of class `String [...].</p>\n</blockquote>\n\n<p><sup>* well, there's also <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.7\">the \"null type\"</a> with it's \"null literal\" <code>null</code>, but most people don't think of the \"null type\" as a proper type.</sup></p>\n", "title": "How can a string be initialized using &quot; &quot;?", "tags": ["java", "string"], "link": "http://stackoverflow.com/questions/17489250/how-can-a-string-be-initialized-using/17489376#17489376", "post_type": "answer", "question_id": 17489250, "answer_id": 17489376}, {"body": "<p>It's a feature of the Java language. String literals in the source code is given special treatment.</p>\n\n<p>The language spec, <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.5\">here</a>, simply says that a string literal is of <code>String</code> type</p>\n", "title": "How can a string be initialized using &quot; &quot;?", "tags": ["java", "string"], "link": "http://stackoverflow.com/questions/17489250/how-can-a-string-be-initialized-using/17489394#17489394", "post_type": "answer", "question_id": 17489250, "answer_id": 17489394}, {"body": "<p><a href=\"http://www.ntu.edu.sg/home/ehchua/programming/java/J3d_String.html\">Java String is Special</a></p>\n\n<blockquote>\n  <p>The designers of Java decided to retain primitive types in an object-oriented language, instead of making everything an object, so as to improve the performance of the language. Primitives are stored in the call stack, which require less storage spaces and are cheaper to manipulate. On the other hand, objects are stored in the program heap, which require complex memory management and more storage spaces.</p>\n  \n  <p>For performance reason, Java's String is designed to be in between a primitive and a class.</p>\n</blockquote>\n\n<p>For example </p>\n\n<pre><code>String s1 = \"Hello\";              // String literal\nString s2 = \"Hello\";              // String literal\nString s3 = s1;                   // same reference\nString s4 = new String(\"Hello\");  // String object\nString s5 = new String(\"Hello\");  // String object\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/vJwRA.png\" alt=\"enter image description here\"></p>\n\n<p><strong>Note :</strong><em>String literals</em> are stored in a common pool. This facilitates sharing of storage for strings with the same contents to conserve storage. <code>String</code> objects allocated via new operator are stored in the <code>heap</code>, and there is no sharing of storage for the same contents.</p>\n", "title": "How can a string be initialized using &quot; &quot;?", "tags": ["java", "string"], "link": "http://stackoverflow.com/questions/17489250/how-can-a-string-be-initialized-using/17489410#17489410", "post_type": "answer", "question_id": 17489250, "answer_id": 17489410}, {"body": "<p><code>Java.lang.String</code> is not just a class. It's an integral part of the core language. The compiler has syntactic sugar for it. For example, <code>\"\"</code> is like an abbreviation for <code>new String(\"\")</code>. When written <code>\"\"</code> the compiler optimizes identical strings to the same instance to save space. <code>\"a\" + 5 == \"a5\" ==&gt; true</code></p>\n\n<p>The compiler has syntactic sugar for a lot of stuff, including not having to box/unbox between object versions and their native types, no parent means Object, default constructor, ...</p>\n", "title": "How can a string be initialized using &quot; &quot;?", "tags": ["java", "string"], "link": "http://stackoverflow.com/questions/17489250/how-can-a-string-be-initialized-using/17489437#17489437", "post_type": "answer", "question_id": 17489250, "answer_id": 17489437}, {"body": "<p>Java treats String as a special class,\nyou can initialize in both ways</p>\n\n<ol>\n<li><p>Directly assigning literal</p>\n\n<pre><code>String a = \"adsasdf\";\n</code></pre></li>\n<li><p>As other Objects using new keyword</p>\n\n<pre><code>String a = new String(\"adsasdf\");\n</code></pre></li>\n</ol>\n\n<p>You need to take special care when you wants to compare with <code>==</code> sign:</p>\n\n<pre><code>String a = \"asdf\";\nString b = \"asdf\";\nSystem.out.println(a == b);  // True\nSystem.out.println(a.equals(b)); // True\n\nString a = new String(\"asdf\");\nString b = new String(\"asdf\");\nSystem.out.println(a == b);  // False\nSystem.out.println(a.equals(b)); // True\n</code></pre>\n\n<p>That is because in first case the objects a and b are kept in something called <code>literal pool</code> and they both are referencing same object so they are equal in both ways.</p>\n\n<p>But in second case a and b references different objects like when we initialize any other objects. so they are unequal when compared with <code>==</code> operator whereas they are equal in values.</p>\n", "title": "How can a string be initialized using &quot; &quot;?", "tags": ["java", "string"], "link": "http://stackoverflow.com/questions/17489250/how-can-a-string-be-initialized-using/17489453#17489453", "post_type": "answer", "question_id": 17489250, "answer_id": 17489453}, {"body": "<p>I think the number displayed is the number of time the <code>System.out.println</code> call throws the <code>Stackoverflow</code> exception.</p>\n\n<p>It probably depend on the implementation of the <code>println</code> and the number of stacking call it is made in it.</p>\n\n<p>As an illustration:</p>\n\n<p>The <code>main()</code> call trigger the <code>Stackoverflow</code> exception at call i.\nThe i-1 call of main catch the exception and call <code>println</code> which trigger a second <code>Stackoverflow</code>.  <code>cnt</code> get increment to 1.\nThe i-2 call of main catch now the exception and call <code>println</code>.  In <code>println</code> a method is called triggering a 3rd exception.  <code>cnt</code> get increment to 2.\n  this continue until <code>println</code> can make all its needed call and finally display the value of <code>cnt</code>.</p>\n\n<p>This is then dependent of the actual implementation of <code>println</code>.</p>\n\n<p>For the JDK7 either it detect cycling call and throws the exception earlier either it keep some stack resource and throw the exception before reaching the limit to give some room for remediation logic either the <code>println</code> implementation doesn't make calls either the ++ operation is done after the <code>println</code> call thus is by pass by the exception. </p>\n", "title": "Why does this method print 4?", "tags": ["java", "jvm", "stack-overflow"], "link": "http://stackoverflow.com/questions/17828584/why-does-this-method-print-4/17832168#17832168", "post_type": "answer", "question_id": 17828584, "answer_id": 17832168}, {"body": "<p>I think the others have done a good job at explaining why cnt > 0, but there's not enough details regarding why cnt = 4, and why cnt varies so widely among different settings. I will attempt to fill that void here.</p>\n\n<p>Let </p>\n\n<ul>\n<li>X be the total stack size</li>\n<li>M be the stack space used when we enter main the first time</li>\n<li>R be the stack space increase each time we enter into main</li>\n<li>P be the stack space necessary to run <code>System.out.println</code></li>\n</ul>\n\n<p>When we first get into main, the space left over is X-M. Each recursive call takes up R more memory. So for 1 recursive call (1 more than original), the memory use is M + R. Suppose that StackOverflowError is thrown after C successful recursive calls, that is, M + C * R &lt;= X and M + C * (R + 1) > X. At the time of the first StackOverflowError, there's X - M - C * R memory left.</p>\n\n<p>To be able to run <code>System.out.prinln</code>, we need P amount of space left on the stack. If it so happens that X - M - C * R >= P, then 0 will be printed. If P requires more space, then we remove frames from the stack, gaining R memory at the cost of cnt++. </p>\n\n<p>When <code>println</code> is finally able to run, X - M - (C - cnt) * R >= P. So if P is large for a particular system, then cnt will be large. </p>\n\n<p>Let's look at this with some examples. </p>\n\n<p><strong>Example 1:</strong> Suppose </p>\n\n<ul>\n<li>X = 100</li>\n<li>M = 1</li>\n<li>R = 2</li>\n<li>P = 1</li>\n</ul>\n\n<p>Then C = floor((X-M)/R) = 49, and cnt = ceiling((P - (X - M - C*R))/R) = 0.</p>\n\n<p><strong>Example 2:</strong> Suppose that</p>\n\n<ul>\n<li>X = 100</li>\n<li>M = 1</li>\n<li>R = 5</li>\n<li>P = 12</li>\n</ul>\n\n<p>Then C = 19, and cnt = 2.</p>\n\n<p><strong>Example 3:</strong> Suppose that </p>\n\n<ul>\n<li>X = 101</li>\n<li>M = 1</li>\n<li>R = 5</li>\n<li>P = 12</li>\n</ul>\n\n<p>Then C = 20, and cnt = 3.</p>\n\n<p><strong>Example 4:</strong> Suppose that </p>\n\n<ul>\n<li>X = 101</li>\n<li>M = 2</li>\n<li>R = 5</li>\n<li>P = 12</li>\n</ul>\n\n<p>Then C = 19, and cnt = 2.</p>\n\n<p>Thus, we see that both the system (M, R, and P) and the stack size (X) affects cnt.</p>\n\n<p>As a side note, it does not matter how much space <code>catch</code> requires to start. As long as there is not enough space for <code>catch</code>, then cnt will not increase, so there are no external effects.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I take back what I said about <code>catch</code>. It does play a role. Suppose it requires T amount of space to start. cnt starts to increment when the leftover space is greater than T, and <code>println</code> runs when the leftover space is greater than T + P. This adds an extra step to the calculations and further muddies up the already muddy analysis.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I finally found time to run some experiments to back up my theory. Unfortunately, the theory doesn't seem to match up with the experiments. What actually happens is very different.</p>\n\n<p>Experiment setup:\nUbuntu 12.04 server with default java and default-jdk. Xss starting at 70,000 at 1 byte increments to 460,000.</p>\n\n<p>The results are available at: <a href=\"https://www.google.com/fusiontables/DataSource?docid=1xkJhd4s8biLghe6gZbcfUs3vT5MpS_OnscjWDbM\">https://www.google.com/fusiontables/DataSource?docid=1xkJhd4s8biLghe6gZbcfUs3vT5MpS_OnscjWDbM</a>\nI've created another version where every repeated data point is removed. In other words, only points that are different from the previous are shown. This makes it easier to see anomalies. <a href=\"https://www.google.com/fusiontables/DataSource?docid=1XG_SRzrrNasepwZoNHqEAKuZlHiAm9vbEdwfsUA\">https://www.google.com/fusiontables/DataSource?docid=1XG_SRzrrNasepwZoNHqEAKuZlHiAm9vbEdwfsUA</a></p>\n", "title": "Why does this method print 4?", "tags": ["java", "jvm", "stack-overflow"], "link": "http://stackoverflow.com/questions/17828584/why-does-this-method-print-4/17836189#17836189", "post_type": "answer", "question_id": 17828584, "answer_id": 17836189}, {"body": "<p>After digging around for a while, I can't say that I find the answer, but I think it's quite close now.</p>\n\n<p>First, we need to know when a <code>StackOverflowError</code> will be thrown. In fact, the stack for a java thread stores frames, which containing all the data needed for invoking a method and resume. According to <a href=\"http://docs.oracle.com/javase/specs/jls/se5.0/html/expressions.html#15.12.4.5\" rel=\"nofollow\">Java Language Specifications for JAVA 6</a>, when invoking a method,</p>\n\n<blockquote>\n  <p>If there is not sufficient memory available to create such an activation frame, an StackOverflowError is thrown.</p>\n</blockquote>\n\n<p>Second, we should make it clear what is \"<em>there is not sufficient memory available to create such an activation frame</em>\". According to <a href=\"http://docs.oracle.com/javase/specs/jvms/se5.0/html/Overview.doc.html#6654\" rel=\"nofollow\">Java Virtual Machine Specifications for JAVA 6</a>,</p>\n\n<blockquote>\n  <p>frames may be heap allocated.</p>\n</blockquote>\n\n<p>So, when a frame is created, there should be enough heap space to create a stack frame and enough stack space to store the new reference which point to the new stack frame if the frame is heap allocated.</p>\n\n<p>Now let's go back to the question. From the above, we can know that when a method is execute, it may just costs the same amount of stack space. And invoking <code>System.out.println</code> (may) needs 5 level of method invocation, so 5 frames need to be created. Then when <code>StackOverflowError</code> is thrown out, it has to go back 5 times to get enough stack space to store 5 frames' references. Hence 4 is print out. Why not 5? Because you use <code>cnt++</code>. Change it to <code>++cnt</code>, and then you will get 5.</p>\n\n<p>And you will notice that when the size of stack go to a high level, you will get 50 sometimes. That is because the amount of available heap space need to be taken into consideration then. When the stack's size is too large, maybe heap space will run out before stack. And (maybe) the actual size of stack frames of <code>System.out.println</code> is about 51 times of <code>main</code>, therefore it goes back 51 times and print 50.</p>\n", "title": "Why does this method print 4?", "tags": ["java", "jvm", "stack-overflow"], "link": "http://stackoverflow.com/questions/17828584/why-does-this-method-print-4/17842210#17842210", "post_type": "answer", "question_id": 17828584, "answer_id": 17842210}, {"body": "<p>A parallel stream has a much higher overhead compared to a sequential one. Coordinating the threads takes a significant amount of time. I would use sequential streams by default and only consider parallel ones if</p>\n\n<ul>\n<li>I have a massive amount of items to process (or the processing of each item takes time and is parallelizable)</li>\n<li>I have a performance problem in the first place</li>\n<li>I don't already run the process in a multi-thread environment (for example: in a web container, if I already have many requests to process in parallel, adding an additional layer of parallelism inside each request could have more negative than positive effects)</li>\n</ul>\n\n<p>In your example, the performance will anyway be driven by the synchronized access to <code>System.out.println()</code>, and making this process parallel will have no effect, or even a negative one.\nMoreover, remember that parallel streams don't magically solve all the synchronization problems. If a shared resource is used by the predicates and functions used in the process, you'll have to make sure that everything is thread-safe. In particular, side effects are tings you really have to worry about if you go parallel.</p>\n\n<p>In any case, measure, don't guess! Only a measurement will tell you if the parallelism is worth it or not.</p>\n", "title": "Should I always use a parallel stream when possible?", "tags": ["java", "parallel-processing", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/20375176/should-i-always-use-a-parallel-stream-when-possible/20375622#20375622", "post_type": "answer", "question_id": 20375176, "answer_id": 20375622}, {"body": "<p>The value you are looking for is <code>Integer.MIN_VALUE</code>.</p>\n\n<hr>\n\n<blockquote>\n  <p>I would also love to have algebraic proof of whatever answer this condition has(in context with java)?</p>\n</blockquote>\n\n<p>That's off-topic for Stack Exchange.  But you could do it starting from the definition of Java integers (<a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2\">JLS 4.2</a>)</p>\n\n<blockquote>\n  <p><em>\"The integral types are byte, short, int, and long, whose values are 8-bit, 16-bit, 32-bit and 64-bit signed two's-complement integers ...\"</em></p>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n  <p><em>\"The values of the integral types are integers in the following ranges ...\n      For int, from -2147483648 to 2147483647, inclusive\"</em></p>\n</blockquote>\n\n<p>and the definition of the Java unary '-' operator (<a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.15.4\">JLS 15.15.4</a>):</p>\n\n<blockquote>\n  <p><em>\"For integer values, negation is the same as subtraction from zero. The Java programming language uses two's-complement representation for integers, and the range of two's-complement values is not symmetric, so negation of the maximum negative int or long results in that same maximum negative number. Overflow occurs in this case, but no exception is thrown. For all integer values x, -x equals (~x)+1.\"</em></p>\n</blockquote>\n", "title": "Value of i for (i == -i &amp;&amp; i != 0) to return true in Java", "tags": ["java"], "link": "http://stackoverflow.com/questions/17781150/value-of-i-for-i-i-i-0-to-return-true-in-java/17781168#17781168", "post_type": "answer", "question_id": 17781150, "answer_id": 17781168}, {"body": "<p>The only <code>int</code> value for which it works is  <code>Integer.MIN_VALUE</code>.</p>\n\n<p>It's because integers are negated using the <a href=\"http://en.wikipedia.org/wiki/Two%27s_complement\" rel=\"nofollow\">two's complement way</a>.</p>\n\n<p>Using</p>\n\n<pre><code>System.out.println(Integer.toBinaryString(Integer.MIN_VALUE));\n</code></pre>\n\n<p>you see that <code>Integer.MIN_VALUE</code> is</p>\n\n<pre><code>10000000000000000000000000000000\n</code></pre>\n\n<p>Taking the negative value is done by first swapping <code>0</code> and <code>1</code>, which gives</p>\n\n<pre><code>01111111111111111111111111111111\n</code></pre>\n\n<p>and by adding <code>1</code>, which gives</p>\n\n<pre><code>10000000000000000000000000000000\n</code></pre>\n\n<p>As you can see in the link I gave, Wikipedia mentions the problem with the most negative numbers and specifies it's the sole exception :</p>\n\n<blockquote>\n  <p>The most negative number in two's complement is sometimes called \"the\n  weird number,\" because it is the only exception.</p>\n</blockquote>\n\n<p>Of course you have the same phenomenon for <code>Long.Min_Value</code> if you store it in a <code>long</code> variable.</p>\n\n<p>Note that <strong>this is only due to choices that were made regarding the binary storage of ints in Java</strong>. Another (bad) solution could for example have been to negate by simply changing the most significant bit and letting the other bits unchanged, this would have avoided this problem with MIN_VALUE but would have made 2 different <code>0</code> values and complicated binary arithmetic (how would you have incremented for example ?).</p>\n", "title": "Value of i for (i == -i &amp;&amp; i != 0) to return true in Java", "tags": ["java"], "link": "http://stackoverflow.com/questions/17781150/value-of-i-for-i-i-i-0-to-return-true-in-java/17781189#17781189", "post_type": "answer", "question_id": 17781150, "answer_id": 17781189}, {"body": "<p>Like the others have mentioned, this is only fulfilled by <code>Integer.MIN_VALUE</code>. As for proof, let me offer an easier to understand explanation other than in binary (although it is still rooted in that).</p>\n\n<p>Note that <code>Integer.MIN_VALUE</code> is equal to <code>-2^31</code> or <code>-2147483648</code> and <code>Integer.MAX_VALUE</code> is equal to <code>2^31-1</code> or <code>2147483647</code>. <code>-Integer.MIN_VALUE</code> is <code>2^31</code>, which is now too large for an Integer (since it is past <code>MAX_VALUE</code>) thus causing an Integer overflow, making it <code>Integer.MIN_VALUE</code> again. It's the only Integer that does this since <code>MIN_VALUE</code> is the only number with no negative equivalent aside from 0.</p>\n", "title": "Value of i for (i == -i &amp;&amp; i != 0) to return true in Java", "tags": ["java"], "link": "http://stackoverflow.com/questions/17781150/value-of-i-for-i-i-i-0-to-return-true-in-java/17781376#17781376", "post_type": "answer", "question_id": 17781150, "answer_id": 17781376}, {"body": "<p>Such an operation ought to be <em>possible</em> with a Java 8 <code>Stream</code>, but it can't necessarily be done efficiently -- for example, you can't necessarily parallelize such an operation, as you have to look at elements in order.</p>\n\n<p>The API doesn't provide an easy way to do it, but what's probably the simplest way is to take <code>Stream.iterator()</code>, wrap the <code>Iterator</code> to have a \"take-while\" implementation, and then go back to a <code>Spliterator</code> and then a <code>Stream</code>.  Or -- maybe -- wrap the <code>Spliterator</code>, though it can't really be split anymore in this implementation.</p>\n\n<p>Here's an untested implementation of <code>takeWhile</code> on a <code>Spliterator</code>:</p>\n\n<pre><code>static &lt;T&gt; Spliterator&lt;T&gt; takeWhile(\n    Spliterator&lt;T&gt; splitr, Predicate&lt;? super T&gt; predicate) {\n  return new Spliterators.AbstractSpliterator&lt;T&gt;(splitr.estimateSize(), 0) {\n    boolean stillGoing = true;\n    @Override public boolean tryAdvance(Consumer&lt;? super T&gt; consumer) {\n      if (stillGoing) {\n        boolean hadNext = splitr.tryAdvance(elem -&gt; {\n          if (predicate.test(elem)) {\n            consumer.accept(elem);\n          } else {\n            stillGoing = false;\n          }\n        });\n        return hadNext &amp;&amp; stillGoing;\n      }\n      return false;\n    }\n  };\n}\n\nstatic &lt;T&gt; Stream&lt;T&gt; takeWhile(Stream&lt;T&gt; stream, Predicate&lt;? super T&gt; predicate) {\n   return StreamSupport.stream(takeWhile(stream.spliterator(), predicate), false);\n}\n</code></pre>\n", "title": "Limit a stream by a predicate", "tags": ["java", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/20746429/limit-a-stream-by-a-predicate/20765715#20765715", "post_type": "answer", "question_id": 20746429, "answer_id": 20765715}, {"body": "<p>Here is a version done on ints - as asked in the question.</p>\n\n<p>Usage:</p>\n\n<pre><code>StreamUtil.takeWhile(IntStream.iterate(1, n -&gt; n + 1), n -&gt; n &lt; 10);\n</code></pre>\n\n<p>Here's code for StreamUtil:</p>\n\n<pre><code>import java.util.PrimitiveIterator;\nimport java.util.Spliterators;\nimport java.util.function.IntConsumer;\nimport java.util.function.IntPredicate;\nimport java.util.stream.IntStream;\nimport java.util.stream.StreamSupport;\n\npublic class StreamUtil\n{\n    public static IntStream takeWhile(IntStream stream, IntPredicate predicate)\n    {\n        return StreamSupport.intStream(new PredicateIntSpliterator(stream, predicate), false);\n    }\n\n    private static class PredicateIntSpliterator extends Spliterators.AbstractIntSpliterator\n    {\n        private final PrimitiveIterator.OfInt iterator;\n        private final IntPredicate predicate;\n\n        public PredicateIntSpliterator(IntStream stream, IntPredicate predicate)\n        {\n            super(Long.MAX_VALUE, IMMUTABLE);\n            this.iterator = stream.iterator();\n            this.predicate = predicate;\n        }\n\n        @Override\n        public boolean tryAdvance(IntConsumer action)\n        {\n            if (iterator.hasNext()) {\n                int value = iterator.nextInt();\n                if (predicate.test(value)) {\n                    action.accept(value);\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n</code></pre>\n", "title": "Limit a stream by a predicate", "tags": ["java", "java-8", "java-stream"], "link": "http://stackoverflow.com/questions/20746429/limit-a-stream-by-a-predicate/24531394#24531394", "post_type": "answer", "question_id": 20746429, "answer_id": 24531394}, {"body": "<p>One simple way is to use <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Float.html#NaN\"><code>Float.NaN</code></a>:</p>\n\n<pre><code>float x = Float.NaN;  // &lt;--\n\nif (x == x) {\n    System.out.println(\"Ok\");\n} else {\n    System.out.println(\"Not ok\");\n}\n</code></pre>\n\n<pre>\nNot ok\n</pre>\n\n<p>You can do the same with <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#NaN\"><code>Double.NaN</code></a>.</p>\n\n<hr>\n\n<p>From <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.21.1\"><strong>JLS \u00a715.21.1.</strong> Numerical Equality Operators <code>==</code> and <code>!=</code></a>:</p>\n\n<blockquote>\n  <p>Floating-point equality testing is performed in accordance with the rules of the IEEE 754 standard:</p>\n  \n  <ul>\n  <li><p>If either operand is NaN, then the result of <code>==</code> is <code>false</code> but the result of <code>!=</code> is <code>true</code>.  </p>\n  \n  <p>Indeed, the test <code>x!=x</code> is <code>true</code> if and only if the value of <code>x</code> is NaN.</p></li>\n  </ul>\n  \n  <p>...</p>\n</blockquote>\n", "title": "How can a Java variable be different from itself?", "tags": ["java", "if-statement"], "link": "http://stackoverflow.com/questions/19416644/how-can-a-java-variable-be-different-from-itself/19416665#19416665", "post_type": "answer", "question_id": 19416644, "answer_id": 19416665}, {"body": "<p>Create your own class <code>System</code> in tha same package with <code>Condition</code>.<br>\nIn this case your <code>System</code> class will hide <code>java.lang.System</code> class</p>\n\n<pre><code>class Condition\n{\n    static class System\n    {\n        static class out\n        {\n            static void println(String ignored)\n            {\n                java.lang.System.out.println(\"Not ok\");\n            }\n        }\n    }\n\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        int x = 0;\n        if (x == x) \n        {\n           System.out.println(\"Not ok\");\n        } \n        else \n        {\n           System.out.println(\"Ok\");\n        }\n    }\n}  \n</code></pre>\n\n<p><a href=\"http://ideone.com/F039qY\"><strong>Ideone DEMO</strong></a></p>\n", "title": "How can a Java variable be different from itself?", "tags": ["java", "if-statement"], "link": "http://stackoverflow.com/questions/19416644/how-can-a-java-variable-be-different-from-itself/19775881#19775881", "post_type": "answer", "question_id": 19416644, "answer_id": 19775881}, {"body": "<p>Very simply:</p>\n\n<pre><code>Arrays.asList(\"Hi!\")\n</code></pre>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/20358917#20358917", "post_type": "answer", "question_id": 20358883, "answer_id": 20358917}, {"body": "<h3>Fixed size <code>List</code></h3>\n\n<p>The easiest way, that I know of, is to create a fixed-size single element <code>List</code> with <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-\"><code>Arrays.asList(T...)</code></a> like</p>\n\n<pre><code>// Returns a List backed by a varargs T.\nreturn Arrays.asList(s);\n</code></pre>\n\n<h3>Variable size <code>List</code></h3>\n\n<p>If it needs vary in size you can construct an <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#ArrayList-java.util.Collection-\"><code>ArrayList</code></a> and the fixed-size<code>List</code> like</p>\n\n<pre><code>return new ArrayList&lt;String&gt;(Arrays.asList(s));\n</code></pre>\n\n<p>and (in Java 7+) you can use the <a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/language/type-inference-generic-instance-creation.html\">diamond operator <code>&lt;&gt;</code></a> to make it </p>\n\n<pre><code>return new ArrayList&lt;&gt;(Arrays.asList(s));\n</code></pre>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/20358920#20358920", "post_type": "answer", "question_id": 20358883, "answer_id": 20358920}, {"body": "<p>You can use the utility method <code>Arrays.asList</code> and feed that result into a new <code>ArrayList</code>.</p>\n\n<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(s));\n</code></pre>\n\n<p>Other options:</p>\n\n<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Collections.nCopies(1, s));\n</code></pre>\n\n<p>and</p>\n\n<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Collections.singletonList(s));\n</code></pre>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#ArrayList%28java.util.Collection%29\"><code>ArrayList(Collection)</code></a> constructor.</li>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList%28T...%29\"><code>Arrays.asList</code></a> method.</li>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#nCopies%28int,%20T%29\"><code>Collections.nCopies</code></a> method.</li>\n<li><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#singletonList%28T%29\"><code>Collections.singletonList</code></a> method.</li>\n</ul>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/20358928#20358928", "post_type": "answer", "question_id": 20358883, "answer_id": 20358928}, {"body": "<p>The other answers all use <code>Arrays.asList()</code>, which returns an unmodifiable list (an <code>UnsupportedOperationException</code> is thrown if you try to add or remove an element). To get a mutable list you can wrap the returned list in a new <code>ArrayList</code> as a couple of answers point out, but a cleaner solution is to use <a href=\"https://github.com/google/guava\" rel=\"nofollow\">Guava's</a> <a href=\"http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Lists.html#newArrayList()\" rel=\"nofollow\">Lists.newArrayList()</a> (available since at least <a href=\"http://docs.guava-libraries.googlecode.com/git-history/v10.0.1/javadoc/index.html\" rel=\"nofollow\">Guava 10</a>, released in 2011). </p>\n\n<p>For example:</p>\n\n<pre><code>Lists.newArrayList(\"Blargle!\");\n</code></pre>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/29784337#29784337", "post_type": "answer", "question_id": 20358883, "answer_id": 29784337}, {"body": "<pre><code>Collections.singletonList(object)\n</code></pre>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/31931870#31931870", "post_type": "answer", "question_id": 20358883, "answer_id": 31931870}, {"body": "<p>With Java 8 Streams:</p>\n\n<pre><code>Stream.of(object).collect(Collectors.toList())\n</code></pre>\n\n<p>or if you need a set:</p>\n\n<pre><code>Stream.of(object).collect(Collectors.toSet())\n</code></pre>\n", "title": "How to quickly and conveniently create a one element arraylist", "tags": ["java", "arraylist", "collections"], "link": "http://stackoverflow.com/questions/20358883/how-to-quickly-and-conveniently-create-a-one-element-arraylist/31965160#31965160", "post_type": "answer", "question_id": 20358883, "answer_id": 31965160}, {"body": "<p>Whenever a <strong>new</strong> keyword is used it Creates a Object at the Heap</p>\n\n<p>1)StringBuilder sample = new StringBuilder(); </p>\n\n<p>2)<strong>StringBuilder referToSample = sample;</strong></p>\n\n<p>In 2) the Reference of referSample is created on same object sample</p>\n\n<p>thus <strong>referToSample = null;</strong> \nis Nulling Only the referSample Reference giving no effect to sample\nthat's why you are not getting NULL Pointer Exception \nThanks to Java's Garbage Collection</p>\n", "title": "Why is this not throwing a NullPointerException?", "tags": ["java", "reference", "nullpointerexception"], "link": "http://stackoverflow.com/questions/18636561/why-is-this-not-throwing-a-nullpointerexception/18824858#18824858", "post_type": "answer", "question_id": 18636561, "answer_id": 18824858}, {"body": "<p><code>Spliterator</code> basically means \"splittable Iterator\".</p>\n\n<p>Single thread can traverse/process the entire Spliterator itself, but the Spliterator also has a method <code>trySplit()</code> which will \"split off\" a section for someone else (typically, another thread) to process -- leaving the current spliterator with less work.</p>\n\n<p><code>Collector</code> combines the specification of a <code>reduce</code> function (of map-reduce fame), with an initial value, and a value to combine two results (thus enabling results from Spliterated streams of work, to be combined.)</p>\n\n<p>For example, the most basic Collector would have an initial vaue of 0, add an integer onto an existing result, and would 'combine' two results by adding them. Thus summing a spliterated stream of integers.</p>\n\n<p>See:</p>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Spliterator.html#trySplit--\"><code>Spliterator.trySplit()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html\"><code>Collector&lt;T,A,R&gt;</code></a></li>\n</ul>\n", "title": "Understanding Spliterator, Collector and Stream in Java 8", "tags": ["java", "lambda", "java-8", "spliterator"], "link": "http://stackoverflow.com/questions/19235606/understanding-spliterator-collector-and-stream-in-java-8/19235857#19235857", "post_type": "answer", "question_id": 19235606, "answer_id": 19235857}, {"body": "<p>You should almost certainly never have to deal with <code>Spliterator</code> as a user; it should only be necessary if you're writing <code>Collection</code> types yourself and <em>also</em> intending to optimize parallelized operations on them. </p>\n\n<p>For what it's worth, a <code>Spliterator</code> is a way of operating over the elements of a collection in a way that it's easy to split off part of the collection, e.g. because you're parallelizing and want one thread to work on one part of the collection, one thread to work on another part, etc.</p>\n\n<p>You should essentially never be saving values of type <code>Stream</code> to a variable, either.  <code>Stream</code> is sort of like an <code>Iterator</code>, in that it's a one-time-use object that you'll almost always use in a fluent chain, as in the Javadoc example:</p>\n\n<pre><code>int sum = widgets.stream()\n                  .filter(w -&gt; w.getColor() == RED)\n                  .mapToInt(w -&gt; w.getWeight())\n                  .sum();\n</code></pre>\n\n<p><code>Collector</code> is the most generalized, abstract possible version of a \"reduce\" operation a la map/reduce; in particular, it needs to support parallelization and finalization steps.  Examples of <code>Collector</code>s include:</p>\n\n<ul>\n<li>summing, e.g. <code>Collectors.reducing(0, (x, y) -&gt; x + y)</code></li>\n<li>StringBuilder appending, e.g. <code>Collectors.of(StringBuilder::new, StringBuilder::append, StringBuilder::append, StringBuilder::toString)</code></li>\n</ul>\n", "title": "Understanding Spliterator, Collector and Stream in Java 8", "tags": ["java", "lambda", "java-8", "spliterator"], "link": "http://stackoverflow.com/questions/19235606/understanding-spliterator-collector-and-stream-in-java-8/19235863#19235863", "post_type": "answer", "question_id": 19235606, "answer_id": 19235863}, {"body": "<p>I would just do this. It basically takes the minimum between 100 (the max health) and what the health would be with 15 extra points. It ensures that the user's health does not exceed 100.</p>\n\n<pre><code>public void getHealed() {\n    health = Math.min(health + 15, 100);\n}\n</code></pre>\n\n<p>To ensure that hitpoints do not drop below zero, you can use a similar function: <code>Math.max</code>.</p>\n\n<pre><code>public void takeDamage(int damage) {\n    if(damage &gt; 0) {\n        health = Math.max(health - damage, 0);\n    }\n}\n</code></pre>\n", "title": "How can I increment a variable without exceeding a maximum value?", "tags": ["java", "if-statement", "switch-statement"], "link": "http://stackoverflow.com/questions/18647214/how-can-i-increment-a-variable-without-exceeding-a-maximum-value/18647232#18647232", "post_type": "answer", "question_id": 18647214, "answer_id": 18647232}, {"body": "<p><code>Println(Object)</code> uses <code>String.valueOf()</code></p>\n\n<pre><code>public static String valueOf(Object obj) {\n    return (obj == null) ? \"null\" : obj.toString();\n}\n</code></pre>\n\n<p><code>Print(String)</code> does null check.</p>\n\n<pre><code>public void print(String s) {\n    if (s == null) {\n        s = \"null\";\n    }\n    write(s);\n}\n</code></pre>\n", "title": "No Exception while type casting with a null in java", "tags": ["java", "nullpointerexception", "typecasting-operator"], "link": "http://stackoverflow.com/questions/18723596/no-exception-while-type-casting-with-a-null-in-java/18723651#18723651", "post_type": "answer", "question_id": 18723596, "answer_id": 18723651}, {"body": "<p>You can cast <code>null</code> to any reference type without getting any exception.</p>\n\n<p><code>println</code> method does not throw null pointer because it first checks whether the object is null or not. If null then it simply prints the string <code>\"null\"</code>. Otherwise it will call the <code>toString</code> method of that object.</p>\n\n<p><strong>Adding more details:</strong> Internally print methods call <code>String.valueOf(object)</code> method on the input object. And in <code>valueOf</code> method, this check helps to avoid null pointer excpeiton:</p>\n\n<pre><code>return (obj == null) ? \"null\" : obj.toString();\n</code></pre>\n\n<p>For rest of your confusion, calling any method on a null object should throw a null pointer exception, if not a special case.</p>\n", "title": "No Exception while type casting with a null in java", "tags": ["java", "nullpointerexception", "typecasting-operator"], "link": "http://stackoverflow.com/questions/18723596/no-exception-while-type-casting-with-a-null-in-java/18723666#18723666", "post_type": "answer", "question_id": 18723596, "answer_id": 18723666}, {"body": "<p>You can cast <code>null</code> to any reference type.  You can also call methods which handle a <code>null</code> as an argument, e.g. <code>System.out.println(Object)</code> does, but you cannot reference a <code>null</code> value and call a method on it.</p>\n\n<p>BTW There is a tricky situation where it appears you can call static methods on <code>null</code> values.</p>\n\n<pre><code>Thread t = null;\nt.yield(); // Calls static method Thread.yield() so this runs fine.\n</code></pre>\n", "title": "No Exception while type casting with a null in java", "tags": ["java", "nullpointerexception", "typecasting-operator"], "link": "http://stackoverflow.com/questions/18723596/no-exception-while-type-casting-with-a-null-in-java/18723704#18723704", "post_type": "answer", "question_id": 18723596, "answer_id": 18723704}, {"body": "<p>I have a very dumb but working option. \nif you have the String fullDate = \"11/15/2013 08:00:00\";</p>\n\n<pre><code>   String finalDate = fullDate.split(\" \")[0];\n</code></pre>\n\n<p>That should work easy and fast. :)</p>\n", "title": "How to format Joda-Time DateTime to only mm/dd/yyyy?", "tags": ["java", "jodatime", "date-format"], "link": "http://stackoverflow.com/questions/20331163/how-to-format-joda-time-datetime-to-only-mm-dd-yyyy/20331241#20331241", "post_type": "answer", "question_id": 20331163, "answer_id": 20331241}, {"body": "<p><strong>Create a <a href=\"http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormatter.html\"><code>DateTimeFormatter</code></a> using <a href=\"http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html#forPattern%28java.lang.String%29\"><code>DateTimeFormat.forPattern(String)</code></a></strong></p>\n\n<p>Using Joda time you would do it like this:</p>\n\n<pre><code>String dateTime = \"11/15/2013 08:00:00\";\n// Format for input\nDateTimeFormatter dtf = DateTimeFormat.forPattern(\"MM/dd/yyyy HH:mm:ss\");\n// Parsing the date\nDateTime jodatime = dtf.parseDateTime(dateTime);\n// Format for output\nDateTimeFormatter dtfOut = DateTimeFormat.forPattern(\"MM/dd/yyyy\");\n// Printing the date\nSystem.out.println(dtfOut.print(jodatime));\n</code></pre>\n\n<p>Also, if you wanted to use standard Java, you would do it like this:</p>\n\n<pre><code>// Format for input\nSimpleDateFormat dateParser = new SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\");\n// Parsing the date\nDate date = dateParser.parse(dateTime);\n// Format for output\nSimpleDateFormat dateFormatter = new SimpleDateFormat(\"MM/dd/yyyy\");\n// Printing the date\nSystem.out.println(dateFormatter.format(date));\n</code></pre>\n", "title": "How to format Joda-Time DateTime to only mm/dd/yyyy?", "tags": ["java", "jodatime", "date-format"], "link": "http://stackoverflow.com/questions/20331163/how-to-format-joda-time-datetime-to-only-mm-dd-yyyy/20331243#20331243", "post_type": "answer", "question_id": 20331163, "answer_id": 20331243}, {"body": "<p>Another way of doing that is:</p>\n\n<pre><code>String date = dateAndTime.substring(0, dateAndTime.indexOf(\" \"));\n</code></pre>\n\n<p>I'm not exactly certain, but I think this might be faster/use less memory than using the <code>.split()</code> method.</p>\n", "title": "How to format Joda-Time DateTime to only mm/dd/yyyy?", "tags": ["java", "jodatime", "date-format"], "link": "http://stackoverflow.com/questions/20331163/how-to-format-joda-time-datetime-to-only-mm-dd-yyyy/20331323#20331323", "post_type": "answer", "question_id": 20331163, "answer_id": 20331323}, {"body": "<p>An important feature of parametric types is the ability to write polymorphic algorithms, i.e. algorithms that operate on a data structure regardless of its parameter value, such as <code>Arrays.sort()</code>.</p>\n\n<p>With generics, that's done with wildcard types:</p>\n\n<pre><code>&lt;E extends Comparable&lt;E&gt;&gt; void sort(E[]);\n</code></pre>\n\n<p>To be truly useful, wildcard types require wildcard capture, and that requires the notion of a type parameter. None of that was available at the time arrays were added to Java, and makings arrays of reference type covariant permitted a far simpler way to permit polymorphic algorithms:</p>\n\n<pre><code>void sort(Comparable[]);\n</code></pre>\n\n<p>However, that simplicity opened a loophole in the static type system:</p>\n\n<pre><code>String[] strings = {\"hello\"};\nObject[] objects = strings;\nobjects[0] = 1; // throws ArrayStoreException\n</code></pre>\n\n<p>requiring a runtime check of every write access to an array of reference type.</p>\n\n<p>In a nutshell, the newer approach embodied by generics makes the type system more complex, but also more statically type safe, while the older approach was simpler, and less statically type safe. The designers of the language opted for the simpler approach, having more important things to do than closing a small loophole in the type system that rarely causes problems. Later, when Java was established, and the pressing needs taken care of, they had the resources to do it right for generics (but changing it for arrays would have broken existing Java programs).</p>\n", "title": "Why are arrays covariant but generics are invariant?", "tags": ["java", "arrays", "generics", "language-design", "covariance"], "link": "http://stackoverflow.com/questions/18666710/why-are-arrays-covariant-but-generics-are-invariant/18792306#18792306", "post_type": "answer", "question_id": 18666710, "answer_id": 18792306}, {"body": "<p>It isn't pretty, but <code>String.valueOf()</code> allows you to use a null String in a switch. If it finds <code>null</code>, it converts it to <code>\"null\"</code>, otherwise it just returns the same String you passed it. If you don't handle <code>\"null\"</code> explicitly, then it will go to <code>default</code>. The only caveat is that there is no way of distinguishing between the String <code>\"null\"</code> and an actual null String. </p>\n\n<pre><code>    String month = null;\n    switch (String.valueOf(month)) {\n        case \"january\":\n            monthNumber = 1;\n            break;\n        case \"february\":\n            monthNumber = 2;\n            break;\n        case \"march\":\n            monthNumber = 3;\n            break;\n        case \"null\":\n            monthNumber = -1;\n            break;\n        default: \n            monthNumber = 0;\n            break;\n    }\n    return monthNumber;\n</code></pre>\n", "title": "Why doesn&#39;t String switch statement support a null case?", "tags": ["java", "switch-statement", "language-design"], "link": "http://stackoverflow.com/questions/18263489/why-doesnt-string-switch-statement-support-a-null-case/29873100#29873100", "post_type": "answer", "question_id": 18263489, "answer_id": 29873100}, {"body": "<p>You can use <a href=\"http://junit.sourceforge.net/javadoc/org/hamcrest/core/IsNull.html#nullValue()\"><code>IsNull.nullValue()</code></a> method:</p>\n\n<pre><code>import static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\n\nassertThat(attr.getValue(), is(nullValue()));\n</code></pre>\n", "title": "How to assertThat something is null with Hamcrest?", "tags": ["java", "assert", "hamcrest"], "link": "http://stackoverflow.com/questions/18987692/how-to-assertthat-something-is-null-with-hamcrest/18987738#18987738", "post_type": "answer", "question_id": 18987692, "answer_id": 18987738}, {"body": "<p>Here's another technique I ran across the other day:</p>\n\n<pre><code>Collections.nCopies(8, 1)\n           .stream()\n           .forEach(i -&gt; System.out.println(i));\n</code></pre>\n\n<p>The <code>Collections.nCopies</code> call creates a <code>List</code> containing <code>n</code> copies of whatever value you provide. In this case it's the boxed <code>Integer</code> value 1. Of course it doesn't actually create a list with <code>n</code> elements; it creates a \"virtualized\" list that contains only the value and the length, and any call to <code>get</code> within range just returns the value. The <code>nCopies</code> method has been around since the Collections Framework was introduced way back in JDK 1.2. Of course, the ability to create a stream from its result was added in Java SE 8.</p>\n\n<p>Big deal, another way to do the same thing in about the same number of lines.</p>\n\n<p>However, this technique is faster than the <code>IntStream.generate</code> and <code>IntStream.iterate</code> approaches, and surprisingly, it's also faster than the <code>IntStream.range</code> approach.</p>\n\n<p>For <code>iterate</code> and <code>generate</code> the result is perhaps not too surprising. The streams framework (really, the Spliterators for these streams) is built on the assumption that the lambdas will potentially generate different values each time, and that they will generate an unbounded number of results. This makes parallel splitting particularly difficult. The <code>iterate</code> method is also problematic for this case because each call requires the result of the previous one. So the streams using <code>generate</code> and <code>iterate</code> don't do very well for generating repeated constants.</p>\n\n<p>The relatively poor performance of <code>range</code> is surprising. This too is virtualized, so the elements don't actually all exist in memory, and the size is known up front. This should make for a fast and easily parallelizable spliterator. But it surprisingly didn't do very well. Perhaps the reason is that <code>range</code> has to compute a value for each element of the range and then call a function on it. But this function just ignores its input and returns a constant, so I'm surprised this isn't inlined and killed.</p>\n\n<p>The <code>Collections.nCopies</code> technique has to do boxing/unboxing in order to handle the values, since there are no primitive specializations of <code>List</code>. Since the value is the <strong>same</strong> every time, it's basically boxed once and that box is shared by all <code>n</code> copies. I suspect boxing/unboxing is highly optimized, even intrinsified, and it can be inlined well.</p>\n\n<p>Here's the code:</p>\n\n<pre><code>    public static final int LIMIT = 500_000_000;\n    public static final long VALUE = 3L;\n\n    public long range() {\n        return\n            LongStream.range(0, LIMIT)\n                .parallel()\n                .map(i -&gt; VALUE)\n                .map(i -&gt; i % 73 % 13)\n                .sum();\n}\n\n    public long ncopies() {\n        return\n            Collections.nCopies(LIMIT, VALUE)\n                .parallelStream()\n                .mapToLong(i -&gt; i)\n                .map(i -&gt; i % 73 % 13)\n                .sum();\n}\n</code></pre>\n\n<p>And here are the JMH results: (2.8GHz Core2Duo)</p>\n\n<pre><code>Benchmark                    Mode   Samples         Mean   Mean error    Units\nc.s.q.SO18532488.ncopies    thrpt         5        7.547        2.904    ops/s\nc.s.q.SO18532488.range      thrpt         5        0.317        0.064    ops/s\n</code></pre>\n\n<p>There is a fair amount of variance in the ncopies version, but overall it seems comfortably 20x faster than the range version. (I'd be quite willing to believe that I've done something wrong, though.)</p>\n\n<p>I'm surprised at how well the <code>nCopies</code> technique works. Internally it doesn't do very much special, with the stream of the virtualized list simply being implemented using <code>IntStream.range</code>! I had expected that it would be necessary to create a specialized spliterator to get this to go fast, but it already seems to be pretty good.</p>\n", "title": "Does Java 8 provide a good way to repeat a value or function?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/18532488/does-java-8-provide-a-good-way-to-repeat-a-value-or-function/24296741#24296741", "post_type": "answer", "question_id": 18532488, "answer_id": 24296741}, {"body": "<p>Once a repeat function is somewhere defined as</p>\n\n<pre><code>public static BiConsumer&lt;Integer, Runnable&gt; repeat = (n, f) -&gt; {\n    for (int i = 1; i &lt;= n; i++)\n        f.run();\n};\n</code></pre>\n\n<p>You can use it now and then this way, e.g.:</p>\n\n<pre><code>repeat.accept(8, () -&gt; System.out.println(\"Yes\"));\n</code></pre>\n\n<p>To get and equivalent to Haskell's </p>\n\n<pre><code>take 8 (repeat 1)\n</code></pre>\n\n<p>You could write</p>\n\n<pre><code>StringBuilder s = new StringBuilder();\nrepeat.accept(8, () -&gt; s.append(\"1\"));\n</code></pre>\n", "title": "Does Java 8 provide a good way to repeat a value or function?", "tags": ["java", "java-8"], "link": "http://stackoverflow.com/questions/18532488/does-java-8-provide-a-good-way-to-repeat-a-value-or-function/33142346#33142346", "post_type": "answer", "question_id": 18532488, "answer_id": 33142346}, {"body": "<p>You can also propagate your static pain with lambdas, so the whole thing looks readable:</p>\n\n<pre><code>s.filter(a -&gt; propagate(a::isActive))\n</code></pre>\n\n<p><code>propagate</code> here receives <code>java.util.concurrent.Callable</code> as a parameter and converts any exception caught during the call into <code>RuntimeException</code>. There is a similar conversion method <a href=\"http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Throwables.html#propagate%28java.lang.Throwable%29\">Throwables#propagate(Throwable)</a> in Guava.</p>\n\n<p>This method seems being essential for lambda method chaining, so I hope one day it will be added to one of the popular libs or this propagating behavior would be by default.</p>\n\n<pre><code>public class PropagateExceptionsSample {\n    // a simplified version of Throwables#propagate\n    public static RuntimeException runtime(Throwable e) {\n        if (e instanceof RuntimeException) {\n            return (RuntimeException)e;\n        }\n\n        return new RuntimeException(e);\n    }\n\n    // this is a new one, n/a in public libs\n    // Callable just suits as a functional interface in JDK throwing Exception \n    public static &lt;V&gt; V propagate(Callable&lt;V&gt; callable){\n        try {\n            return callable.call();\n        } catch (Exception e) {\n            throw runtime(e);\n        }\n    }\n\n    public static void main(String[] args) {\n        class Account{\n            String name;    \n            Account(String name) { this.name = name;}\n\n            public boolean isActive() throws IOException {\n                return name.startsWith(\"a\");\n            }\n        }\n\n\n        List&lt;Account&gt; accounts = new ArrayList&lt;&gt;(Arrays.asList(new Account(\"andrey\"), new Account(\"angela\"), new Account(\"pamela\")));\n\n        Stream&lt;Account&gt; s = accounts.stream();\n\n        s\n          .filter(a -&gt; propagate(a::isActive))\n          .map(a -&gt; a.name)\n          .forEach(System.out::println);\n    }\n}\n</code></pre>\n", "title": "Java 8: Lambda-Streams, Filter by Method with Exception", "tags": ["java", "exception-handling", "lambda", "java-8"], "link": "http://stackoverflow.com/questions/19757300/java-8-lambda-streams-filter-by-method-with-exception/19759653#19759653", "post_type": "answer", "question_id": 19757300, "answer_id": 19759653}, {"body": "<p>Keeping this issue in mind I developed a small library for dealing with checked exceptions and lambdas. Custom adapters allow you to integrate with existing functional types:</p>\n\n<pre><code>stream().map(unchecked(URI::new)) //with a static import\n</code></pre>\n\n<p><a href=\"https://github.com/TouK/ThrowingFunction/\" rel=\"nofollow\">https://github.com/TouK/ThrowingFunction/</a></p>\n", "title": "Java 8: Lambda-Streams, Filter by Method with Exception", "tags": ["java", "exception-handling", "lambda", "java-8"], "link": "http://stackoverflow.com/questions/19757300/java-8-lambda-streams-filter-by-method-with-exception/35512247#35512247", "post_type": "answer", "question_id": 19757300, "answer_id": 35512247}]}