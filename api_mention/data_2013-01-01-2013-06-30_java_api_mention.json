{"items": [{"body": "<p>The following print statement would print \"hello world\".\nCould anyone explain this?</p>\n\n<pre><code>System.out.println(randomString(-229985452) + \" \" + randomString(-147909649));\n</code></pre>\n\n<p>And <code>randomString()</code> looks like this:</p>\n\n<pre><code>public static String randomString(int i)\n{\n    Random ran = new Random(i);\n    StringBuilder sb = new StringBuilder();\n    while (true)\n    {\n        int k = ran.nextInt(27);\n        if (k == 0)\n            break;\n\n        sb.append((char)('`' + k));\n    }\n\n    return sb.toString();\n}\n</code></pre>\n", "title": "Why does this code using random strings print &quot;hello world&quot;?", "link": "http://stackoverflow.com/questions/15182496/why-does-this-code-using-random-strings-print-hello-world", "question_id": 15182496, "tags": ["java", "string", "random"]}, {"body": "<p>In Java: What is the difference between:</p>\n\n<pre><code>Object o1= ....\no1.getClass().getSimpleName();\no1.getClass().getName();\no1.getClass().getCanonicalName();\n</code></pre>\n\n<p>?</p>\n\n<h1>UPDATE</h1>\n\n<p>I have already checked the Javadoc multiple times and yet this never explains it well.\nI also run a test and that didn't reflect any real meaning behind the way these methods are called.</p>\n\n<p>So please, instead of blaming me for asking this question and directing me to javadoc, try to give some efforts to explain the real meaning behind them. Thanks for your support.</p>\n", "title": "What is the difference between canonical name, simple name and class name in Java Class?", "link": "http://stackoverflow.com/questions/15202997/what-is-the-difference-between-canonical-name-simple-name-and-class-name-in-jav", "question_id": 15202997, "tags": ["java"]}, {"body": "<p>I am working on some Java code which needs to be highly optimized as it will run in hot functions that are invoked at many points in my main program logic. Part of this code involves multiplying <code>double</code> variables by <code>10</code> raised to arbitrary non-negative <code>int</code> <code>exponent</code>s. One fast way (edit: but not the fastest possible, see Update 2 below) to get the multiplied value is to <code>switch</code> on the <code>exponent</code>:</p>\n\n<pre><code>double multiplyByPowerOfTen(final double d, final int exponent) {\n   switch (exponent) {\n      case 0:\n         return d;\n      case 1:\n         return d*10;\n      case 2:\n         return d*100;\n      // ... same pattern\n      case 9:\n         return d*1000000000;\n      case 10:\n         return d*10000000000L;\n      // ... same pattern with long literals\n      case 18:\n         return d*1000000000000000000L;\n      default:\n         throw new ParseException(\"Unhandled power of ten \" + power, 0);\n   }\n}\n</code></pre>\n\n<p>The commented ellipses above indicate that the <code>case</code> <code>int</code> constants continue incrementing by 1, so there are really 19 <code>case</code>s in the above code snippet. Since I wasn't sure whether I would actually need all the powers of 10 in <code>case</code> statements <code>10</code> thru <code>18</code>, I ran some microbenchmarks comparing the time to complete 10 million operations with this <code>switch</code> statement versus a <code>switch</code> with only <code>case</code>s <code>0</code> thru <code>9</code> (with the <code>exponent</code> limited to 9 or less to avoid breaking the pared-down <code>switch</code>). I got the rather surprising (to me, at least!) result that the longer <code>switch</code> with more <code>case</code> statements actually ran faster.</p>\n\n<p>On a lark, I tried adding even more <code>case</code>s which just returned dummy values, and found that  I could get the switch to run even faster with around 22-27 declared <code>case</code>s (even though those dummy cases are never actually hit while the code is running). (Again, <code>case</code>s were added in a contiguous fashion by incrementing the prior <code>case</code> constant by <code>1</code>.) These execution time differences are not very significant: for a random <code>exponent</code> between <code>0</code> and <code>10</code>, the dummy padded <code>switch</code> statement finishes 10 million executions in 1.49 secs versus 1.54 secs for the unpadded version, for a grand total savings of 5ns per execution. So, not the kind of thing that makes obsessing over padding out a <code>switch</code> statement worth the effort from an optimization standpoint. But I still just find it curious and counter-intuitive that a <code>switch</code> doesn't become slower (or perhaps at best maintain constant <em>O(1)</em> time) to execute as more <code>case</code>s are added to it.  </p>\n\n<p><img src=\"http://i.stack.imgur.com/kbnan.png\" alt=\"switch benchmarking results\"></p>\n\n<p>These are the results I obtained from running with various limits on the randomly-generated <code>exponent</code> values. I didn't include the results all the way down to <code>1</code> for the <code>exponent</code> limit, but the general shape of the curve remains the same, with a ridge around the 12-17 case mark, and a valley between 18-28. All tests were run in JUnitBenchmarks using shared containers for the random values to ensure identical testing inputs. I also ran the tests both in order from longest <code>switch</code> statement to shortest, and vice-versa, to try and eliminate the possibility of ordering-related test problems.  I've put my testing code up on a github repo if anyone wants to try to reproduce these results.</p>\n\n<p>So, what's going on here? Some vagaries of my architecture or micro-benchmark construction? Or is the Java <code>switch</code> really a little faster to execute in the <code>18</code> to <code>28</code> <code>case</code> range than it is from <code>11</code> up to <code>17</code>?</p>\n\n<p><a href=\"https://github.com/abissell/switch-experiment\">github test repo \"switch-experiment\"</a></p>\n\n<p><strong>UPDATE:</strong> I cleaned up the benchmarking library quite a bit and added a text file in /results with some output across a wider range of possible <code>exponent</code> values. I also added an option in the testing code not to throw an <code>Exception</code> from <code>default</code>, but this doesn't appear to affect the results.</p>\n\n<p><strong>UPDATE 2:</strong> Found some pretty good discussion of this issue from back in 2009 on the xkcd forum here: <a href=\"http://forums.xkcd.com/viewtopic.php?f=11&amp;t=33524\">http://forums.xkcd.com/viewtopic.php?f=11&amp;t=33524</a>. The OP's discussion of using <code>Array.binarySearch()</code> gave me the idea for a simple array-based implementation of the exponentiation pattern above. There's no need for the binary search since I know what the entries in the <code>array</code> are. It appears to run about 3 times faster than using <code>switch</code>, obviously at the expense of some of the control flow that <code>switch</code> affords. That code has been added to the github repo also.</p>\n", "title": "Why does Java switch on contiguous ints appear to run faster with added cases?", "link": "http://stackoverflow.com/questions/15621083/why-does-java-switch-on-contiguous-ints-appear-to-run-faster-with-added-cases", "question_id": 15621083, "tags": ["java", "performance", "assembly", "compiler-construction", "switch-statement"]}, {"body": "<p>Which of the following is better practice in Java 8?</p>\n\n<p>Java 8:</p>\n\n<pre><code>joins.forEach(join -&gt; mIrc.join(mSession, join));\n</code></pre>\n\n<p>Java 7:</p>\n\n<pre><code>for (String join : joins) {\n    mIrc.join(mSession, join);\n}\n</code></pre>\n\n<p>I have lots of for loops that could be \"simplified\" with lambdas, but is there really any advantage of using them including performance and readability?</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I'll also extend this question to longer methods - I know that you cant return or break the parent function from a lambda and this should be mentioned to if they are compared, but is there anything else to be considered?</p>\n", "title": "Java 8 Iterable.forEach() vs foreach loop", "link": "http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop", "question_id": 16635398, "tags": ["java", "for-loop", "java-8"]}, {"body": "<p>I made a class called <code>QuickRandom</code>, and its job is to produce random numbers quickly. It's really simple: just take the old value, multiply by a <code>double</code>, and take the decimal part.</p>\n\n<p>Here is my <code>QuickRandom</code> class in its entirety:</p>\n\n<pre><code>public class QuickRandom {\n    private double prevNum;\n    private double magicNumber;\n\n    public QuickRandom(double seed1, double seed2) {\n        if (seed1 &gt;= 1 || seed1 &lt; 0) throw new IllegalArgumentException(\"Seed 1 must be &gt;= 0 and &lt; 1, not \" + seed1);\n        prevNum = seed1;\n        if (seed2 &lt;= 1 || seed2 &gt; 10) throw new IllegalArgumentException(\"Seed 2 must be &gt; 1 and &lt;= 10, not \" + seed2);\n        magicNumber = seed2;\n    }\n\n    public QuickRandom() {\n        this(Math.random(), Math.random() * 10);\n    }\n\n    public double random() {\n        return prevNum = (prevNum*magicNumber)%1;\n    }\n\n}\n</code></pre>\n\n<p>And here is the code I wrote to test it:</p>\n\n<pre><code>public static void main(String[] args) {\n        QuickRandom qr = new QuickRandom();\n\n        /*for (int i = 0; i &lt; 20; i ++) {\n            System.out.println(qr.random());\n        }*/\n\n        //Warm up\n        for (int i = 0; i &lt; 10000000; i ++) {\n            Math.random();\n            qr.random();\n            System.nanoTime();\n        }\n\n        long oldTime;\n\n        oldTime = System.nanoTime();\n        for (int i = 0; i &lt; 100000000; i ++) {\n            Math.random();\n        }\n        System.out.println(System.nanoTime() - oldTime);\n\n        oldTime = System.nanoTime();\n        for (int i = 0; i &lt; 100000000; i ++) {\n            qr.random();\n        }\n        System.out.println(System.nanoTime() - oldTime);\n}\n</code></pre>\n\n<p>It is a very simple algorithm that simply multiplies the previous double by a \"magic number\" double. I threw it together pretty quickly, so I could probably make it better, but strangely, it seems to be working fine.</p>\n\n<p>This is sample output of the commented-out lines in the <code>main</code> method:</p>\n\n<pre><code>0.612201846732229\n0.5823974655091941\n0.31062451498865684\n0.8324473610354004\n0.5907187526770246\n0.38650264675748947\n0.5243464344127049\n0.7812828761272188\n0.12417247811074805\n0.1322738256858378\n0.20614642573072284\n0.8797579436677381\n0.022122999476108518\n0.2017298328387873\n0.8394849894162446\n0.6548917685640614\n0.971667953190428\n0.8602096647696964\n0.8438709031160894\n0.694884972852229\n</code></pre>\n\n<p>Hm. Pretty random. In fact, that would work for a random number generator in a game.</p>\n\n<p>Here is sample output of the non-commented out part:</p>\n\n<pre><code>5456313909\n1427223941\n</code></pre>\n\n<p>Wow! It performs almost 4 times faster than <code>Math.random</code>.</p>\n\n<p>I remember reading somewhere that <code>Math.random</code> used <code>System.nanoTime()</code> and tons of crazy modulus and division stuff. Is that really necessary? My algorithm performs a lot faster and it seems pretty random.</p>\n\n<p>I have two questions:</p>\n\n<ul>\n<li>Is my algorithm \"good enough\" (for, say, a game, where <strong>really</strong> random numbers aren't too important)?</li>\n<li>Why does <code>Math.random</code> do so much when it seems just simple multiplication and cutting out the decimal will suffice?</li>\n</ul>\n", "title": "Is this a &quot;good enough&quot; random algorithm; why isn&#39;t it used if it&#39;s faster?", "link": "http://stackoverflow.com/questions/14491966/is-this-a-good-enough-random-algorithm-why-isnt-it-used-if-its-faster", "question_id": 14491966, "tags": ["java", "performance", "algorithm", "random"]}, {"body": "<p>I have a method with a <code>void</code> return type. It can also throw a number of exceptions so I'd like to test those exceptions being thrown. All attempts have failed with the same reason:</p>\n\n<blockquote>\n  <p>The method when(T) in the type Stubber is not applicable for the arguments (void)</p>\n</blockquote>\n\n<p>Any ideas how I can get the method to throw a specified exception?</p>\n\n<pre><code>doThrow(new Exception()).when(mockedObject.methodReturningVoid(...));\n</code></pre>\n", "title": "Mockito test a void method throws an exception", "link": "http://stackoverflow.com/questions/15156857/mockito-test-a-void-method-throws-an-exception", "question_id": 15156857, "tags": ["java", "exception", "mocking", "mockito"]}, {"body": "<p>Why second line of this code in Java throws <code>ArrayIndexOutOfBoundsException</code>?</p>\n\n<pre><code>String filename = \"D:/some folder/001.docx\";\nString extensionRemoved = filename.split(\".\")[0];\n</code></pre>\n\n<p>While below works:</p>\n\n<pre><code>String driveLetter = filename.split(\"/\")[0];\n</code></pre>\n\n<p>I use Java 7.</p>\n", "title": "Java string split with &quot;.&quot; (dot)", "link": "http://stackoverflow.com/questions/14833008/java-string-split-with-dot", "question_id": 14833008, "tags": ["java", "regex", "string", "split", "indexoutofboundsexception"]}, {"body": "<p>What are some of the situations where I can use <code>Collections.emptyMap()</code> ? The Documentation says I can use this method if I want my collection to be immutable. </p>\n\n<p><strong>Why would I want an immutable empty collection? What is the point?</strong></p>\n", "title": "Collections.emptyMap() vs new HashMap()", "link": "http://stackoverflow.com/questions/14846920/collections-emptymap-vs-new-hashmap", "question_id": 14846920, "tags": ["java", "collections"]}, {"body": "<p>I have a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html\"><code>StringBuilder</code></a> object,</p>\n\n<pre><code>StringBuilder result = new StringBuilder();\nresult.append(someChar);\n</code></pre>\n\n<p>Now I want to append a newline character to the <code>StringBuilder</code>. How can I do it?</p>\n\n<pre><code>result.append(\"/n\"); \n</code></pre>\n\n<p>Does not work. So, I was thinking about writing a newline using Unicode. Will this help? If so, how can I add one?</p>\n", "title": "How to append a newline to StringBuilder", "link": "http://stackoverflow.com/questions/14534767/how-to-append-a-newline-to-stringbuilder", "question_id": 14534767, "tags": ["java", "stringbuilder"]}, {"body": "<p>Why do Double.parseDouble(null) and Integer.parseInt(null) throw different exceptions?</p>\n\n<p>Is this a historical accident or intentional? The documentation clearly states two types of exceptions for <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#parseDouble%28java.lang.String%29\"><code>Double.parseDouble(...)</code></a> and one for <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#parseInt%28java.lang.String%29\"><code>Integer.parseInt()</code></a>, but it seems inconsistent:</p>\n\n<pre><code>Integer.parseInt(null); // throws java.lang.NumberFormatException: null\n</code></pre>\n\n<p>However </p>\n\n<pre><code>Double.parseDouble(null); // throws java.lang.NullPointerException\n</code></pre>\n", "title": "Why do Double.parseDouble(null) and Integer.parseInt(null) throw different exceptions?", "link": "http://stackoverflow.com/questions/16324831/why-do-double-parsedoublenull-and-integer-parseintnull-throw-different-excep", "question_id": 16324831, "tags": ["java", "exception", "nullpointerexception", "numberformatexception"]}, {"body": "<p>I'm a little confused about the difference between the <code>getFields</code> method and the <code>getDeclaredFields</code> method when using Java reflection. </p>\n\n<p>I read that <code>getDeclaredFields</code> gives you access to all the fields of the class and that  <code>getFields</code> only returns public fields. If this is the case, why wouldn't you just always use <code>getDeclaredFields</code>? </p>\n\n<p>Can someone please elaborate on this, and explain the difference between the two methods, and when/why you would want to use one over the other? </p>\n", "title": "What is the difference between getFields and getDeclaredFields in Java reflection", "link": "http://stackoverflow.com/questions/16966629/what-is-the-difference-between-getfields-and-getdeclaredfields-in-java-reflectio", "question_id": 16966629, "tags": ["java", "reflection"]}, {"body": "<p>The other answers explain why, but here is how:</p>\n\n<pre><code>new Random(-229985452).nextInt(27)\n</code></pre>\n\n<p>The first 6 numbers that the above random generates are:</p>\n\n<pre><code>8\n5\n12\n12\n15\n0\n</code></pre>\n\n<p>and the first 6 numbers that <code>new Random(-147909649).nextInt(27)</code> generates are:</p>\n\n<pre><code>23\n15\n18\n12\n4\n0\n</code></pre>\n\n<p>Then just add those numbers to the integer representation of the character <code>`</code> (which is 96):</p>\n\n<pre><code>8  + 96 = 104 --&gt; h\n5  + 96 = 101 --&gt; e\n12 + 96 = 108 --&gt; l\n12 + 96 = 108 --&gt; l\n15 + 96 = 111 --&gt; o\n\n23 + 96 = 119 --&gt; w\n15 + 96 = 111 --&gt; o\n18 + 96 = 114 --&gt; r\n12 + 96 = 108 --&gt; l\n4  + 96 = 100 --&gt; d\n</code></pre>\n", "title": "Why does this code using random strings print &quot;hello world&quot;?", "tags": ["java", "string", "random"], "link": "http://stackoverflow.com/questions/15182496/why-does-this-code-using-random-strings-print-hello-world/15182578#15182578", "question_id": 15182496, "answer_id": 15182578}, {"body": "<p>If you're unsure about something, try writing a test first.</p>\n\n<p>I did this:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>//primitive\nSystem.out.println(int.class.getName());\nSystem.out.println(int.class.getCanonicalName());\nSystem.out.println(int.class.getSimpleName());\n\nSystem.out.println();\n\n//class\nSystem.out.println(String.class.getName());\nSystem.out.println(String.class.getCanonicalName());\nSystem.out.println(String.class.getSimpleName());\n\nSystem.out.println();\n\n//inner class\nSystem.out.println(HashMap.SimpleEntry.class.getName());\nSystem.out.println(HashMap.SimpleEntry.class.getCanonicalName());\nSystem.out.println(HashMap.SimpleEntry.class.getSimpleName());        \n\nSystem.out.println();\n\n//anonymous inner class\nSystem.out.println(new Serializable(){}.getClass().getName());\nSystem.out.println(new Serializable(){}.getClass().getCanonicalName());\nSystem.out.println(new Serializable(){}.getClass().getSimpleName());\n</code></pre>\n\n<p>Prints:</p>\n\n<pre>\nint\nint\nint\n\njava.lang.String\njava.lang.String\nString\n\njava.util.AbstractMap$SimpleEntry\njava.util.AbstractMap.SimpleEntry\nSimpleEntry\n\nClassnameTest$1\nnull\n\n</pre>\n\n<p>There's an empty line in the last block where <code>getSimpleName</code> returns an empty string.</p>\n\n<p>The upshot looking at this is:</p>\n\n<ul>\n<li>the <strong>name</strong> is the name that you'd use to dynamically load the class with, for example, a call to <code>Class.forName</code> with the default <code>ClassLoader</code>.</li>\n<li>the <strong>canonical name</strong> is the name that would be used in an import statement and uniquely identifies the class.  Might be useful during <code>toString</code> or logging operations.</li>\n<li>the <strong>simple name</strong> loosely identifies the class, again might be useful during <code>toString</code> or logging operations but is not guaranteed to be unique.</li>\n</ul>\n", "title": "What is the difference between canonical name, simple name and class name in Java Class?", "tags": ["java"], "link": "http://stackoverflow.com/questions/15202997/what-is-the-difference-between-canonical-name-simple-name-and-class-name-in-jav/15203417#15203417", "question_id": 15202997, "answer_id": 15203417}, {"body": "<p>Adding local classes, lambdas and the <code>toString()</code> method to complete the previous two answers. Further, I add arrays of lambdas and arrays of anonymous classes (which do not make any sense in practice though):</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>package com.example;\n\npublic final class TestClassNames {\n    private static void showClass(Class&lt;?&gt; c) {\n        System.out.println(\"getName(): \" + c.getName());\n        System.out.println(\"getCanonicalName(): \" + c.getCanonicalName());\n        System.out.println(\"getSimpleName(): \" + c.getSimpleName());\n        System.out.println(\"toString(): \" + c.toString());\n        System.out.println();\n    }\n\n    private static void x(Runnable r) {\n        showClass(r.getClass());\n        showClass(java.lang.reflect.Array.newInstance(r.getClass(), 1).getClass()); // Obtains an array class of a lambda base type.\n    }\n\n    public static class NestedClass {}\n\n    public class InnerClass {}\n\n    public static void main(String[] args) {\n        class LocalClass {}\n        showClass(void.class);\n        showClass(int.class);\n        showClass(String.class);\n        showClass(Runnable.class);\n        showClass(SomeEnum.class);\n        showClass(SomeAnnotation.class);\n        showClass(int[].class);\n        showClass(String[].class);\n        showClass(NestedClass.class);\n        showClass(InnerClass.class);\n        showClass(LocalClass.class);\n        showClass(LocalClass[].class);\n        Object anonymous = new java.io.Serializable() {};\n        showClass(anonymous.getClass());\n        showClass(java.lang.reflect.Array.newInstance(anonymous.getClass(), 1).getClass()); // Obtains an array class of an anonymous base type.\n        x(() -&gt; {});\n    }\n}\n\nenum SomeEnum {\n   BLUE, YELLOW, RED;\n}\n\n@interface SomeAnnotation {}\n</code></pre>\n\n<p>This is the full output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>getName(): void\ngetCanonicalName(): void\ngetSimpleName(): void\ntoString(): void\n\ngetName(): int\ngetCanonicalName(): int\ngetSimpleName(): int\ntoString(): int\n\ngetName(): java.lang.String\ngetCanonicalName(): java.lang.String\ngetSimpleName(): String\ntoString(): class java.lang.String\n\ngetName(): java.lang.Runnable\ngetCanonicalName(): java.lang.Runnable\ngetSimpleName(): Runnable\ntoString(): interface java.lang.Runnable\n\ngetName(): com.example.SomeEnum\ngetCanonicalName(): com.example.SomeEnum\ngetSimpleName(): SomeEnum\ntoString(): class com.example.SomeEnum\n\ngetName(): com.example.SomeAnnotation\ngetCanonicalName(): com.example.SomeAnnotation\ngetSimpleName(): SomeAnnotation\ntoString(): interface com.example.SomeAnnotation\n\ngetName(): [I\ngetCanonicalName(): int[]\ngetSimpleName(): int[]\ntoString(): class [I\n\ngetName(): [Ljava.lang.String;\ngetCanonicalName(): java.lang.String[]\ngetSimpleName(): String[]\ntoString(): class [Ljava.lang.String;\n\ngetName(): com.example.TestClassNames$NestedClass\ngetCanonicalName(): com.example.TestClassNames.NestedClass\ngetSimpleName(): NestedClass\ntoString(): class com.example.TestClassNames$NestedClass\n\ngetName(): com.example.TestClassNames$InnerClass\ngetCanonicalName(): com.example.TestClassNames.InnerClass\ngetSimpleName(): InnerClass\ntoString(): class com.example.TestClassNames$InnerClass\n\ngetName(): com.example.TestClassNames$1LocalClass\ngetCanonicalName(): null\ngetSimpleName(): LocalClass\ntoString(): class com.example.TestClassNames$1LocalClass\n\ngetName(): [Lcom.example.TestClassNames$1LocalClass;\ngetCanonicalName(): null\ngetSimpleName(): LocalClass[]\ntoString(): class [Lcom.example.TestClassNames$1LocalClass;\n\ngetName(): com.example.TestClassNames$1\ngetCanonicalName(): null\ngetSimpleName(): \ntoString(): class com.example.TestClassNames$1\n\ngetName(): [Lcom.example.TestClassNames$1;\ngetCanonicalName(): null\ngetSimpleName(): []\ntoString(): class [Lcom.example.TestClassNames$1;\n\ngetName(): com.example.TestClassNames$$Lambda$1/1175962212\ngetCanonicalName(): com.example.TestClassNames$$Lambda$1/1175962212\ngetSimpleName(): TestClassNames$$Lambda$1/1175962212\ntoString(): class com.example.TestClassNames$$Lambda$1/1175962212\n\ngetName(): [Lcom.example.TestClassNames$$Lambda$1;\ngetCanonicalName(): com.example.TestClassNames$$Lambda$1/1175962212[]\ngetSimpleName(): TestClassNames$$Lambda$1/1175962212[]\ntoString(): class [Lcom.example.TestClassNames$$Lambda$1;\n</code></pre>\n\n<p>So, here are the rules. First, lets start with primitive types and <code>void</code>:</p>\n\n<ol>\n<li>If the class object represents a primitive type or <code>void</code>, all the four methods simply returns its name.</li>\n</ol>\n\n<p>Now the rules for the <code>getName()</code> method:</p>\n\n<ol start=\"2\">\n<li>Every non-lambda and non-array class or interface (i.e, top-level, nested, inner, local and anonymous) has a name (which is returned by <code>getName()</code>) that is the package name followed by a dot (if there is a package), followed by the name of its class-file as generated by the compiler (whithout the suffix <code>.class</code>). If there is no package, it is simply the name of the class-file. If the class is an inner, nested, local or anonymous class, the compiler should generate at least one <code>$</code> in its class-file name. Note that for anonymous classes, the class name would end with a dollar-sign followed by a number.</li>\n<li>Lambda class names are generally unpredictable, and you shouldn't care about they anyway. Exactly, their name is the name of the enclosing class, followed by <code>$$Lambda$</code>, followed by a number, followed by a slash, followed by another number.</li>\n<li>The class descriptor of the primitives are <code>Z</code> for <code>boolean</code>, <code>B</code> for <code>byte</code>, <code>S</code> for <code>short</code>, <code>C</code> for <code>char</code>, <code>I</code> for <code>int</code>, <code>J</code> for <code>long</code>, <code>F</code> for <code>float</code> and <code>D</code> for <code>double</code>. For non-array classes and interfaces the class descriptor is <code>L</code> followed by what is given by <code>getName()</code> followed by <code>;</code>. For array classes, the class descriptor is <code>[</code> followed by the class descriptor of the component type (which may be itself another array class).</li>\n<li>For array classes, the <code>getName()</code> method returns its class descriptor. This rule seems to fail only for array classes whose the component type is a lambda (which possibly is a bug), but hopefully this should not matter anyway because there is no point even on the existence of array classes whose component type is a lambda.</li>\n</ol>\n\n<p>Now, the <code>toString()</code> method:</p>\n\n<ol start=\"6\">\n<li>If the class instance represents an interface (or an annotation, which is a special type of interface), the <code>toString()</code> returns <code>\"interface \" + getName()</code>. If it is a primitive, it returns simply <code>getName()</code>. If it is something else (a class type, even if it is a pretty weird one), it returns <code>\"class \" + getName()</code>.</li>\n</ol>\n\n<p>The <code>getCanonicalName()</code> method:</p>\n\n<ol start=\"7\">\n<li>For top-level classes and interfaces, the <code>getCanonicalName()</code> method returns just what the <code>getName()</code> method returns.</li>\n<li>The <code>getCanonicalName()</code> method returns <code>null</code> for anonymous or local classes and for array classes of those.</li>\n<li>For inner and nested classes and interfaces, the <code>getCanonicalName()</code> method returns what the <code>getName()</code> method would replacing the compiler-introduced dollar-signs by dots.</li>\n<li>For array classes, the <code>getCanonicalName()</code> method returns <code>null</code> if the canonical name of the component type is <code>null</code>. Otherwise, it returns the canonical name of the component type followed by <code>[]</code>.</li>\n</ol>\n\n<p>The <code>getSimpleName()</code> method:</p>\n\n<ol start=\"11\">\n<li>For top-level, nested, inner and local classes, the <code>getSimpleName()</code> returns the name of the class as written in the source file.</li>\n<li>For anonymous classes the <code>getSimpleName()</code> returns an empty <code>String</code>.</li>\n<li>For lambda classes the <code>getSimpleName()</code> just returns what the <code>getName()</code> would return without the package name. This do not makes much sense and looks like a bug for me, but there is no point in calling <code>getSimpleName()</code> on a lambda class to start with.</li>\n<li>For array classes the <code>getSimpleName()</code> method returns the simple name of the component class followed by <code>[]</code>. This have the funny/weird side-effect that array classes whose component type is an anonymous class have just <code>[]</code> as their simple names.</li>\n</ol>\n", "title": "What is the difference between canonical name, simple name and class name in Java Class?", "tags": ["java"], "link": "http://stackoverflow.com/questions/15202997/what-is-the-difference-between-canonical-name-simple-name-and-class-name-in-jav/29527145#29527145", "question_id": 15202997, "answer_id": 29527145}, {"body": "<p>I've been confused by the wide range of different naming schemes as well, and was just about to ask and answer my own question on this when I found this question here. I think my findings fit it well enough, and complement what's already here. My focus is looking for <em>documentation</em> on the various terms, and adding some more related terms that might crop up in other places.</p>\n\n<p>Consider the following example:</p>\n\n<pre><code>package a.b;\nclass C {\n  static class D extends C {\n  }\n  D d;\n  D[] ds;\n}\n</code></pre>\n\n<ul>\n<li><p>The <strong>simple name</strong> of <code>D</code> is <code>D</code>. That's just the part you wrote when declaring the class. <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.9\" rel=\"nofollow\">Anonymous classes</a> have no simple name. <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getSimpleName--\" rel=\"nofollow\"><code>Class.getSimpleName()</code></a> returns this name or the empty string. It is possible for the simple name to contain a <code>$</code> if you write it like this, since <code>$</code> is a valid part of an identifier.</p></li>\n<li><p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.7\" rel=\"nofollow\">the JLS section 6.7</a>, both <code>a.b.C.D</code> and <code>a.b.C.D.D.D</code> would be <strong>fully qualified names</strong>, but only <code>a.b.C.D</code> would be the <strong>canonical name</strong> of <code>D</code>. So every canonical name is a fully qualified name, but the converes is not always true. <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getCanonicalName--\" rel=\"nofollow\"><code>Class.getCanonicalName()</code></a> will return the canonical name or <code>null</code>.</p></li>\n<li><p><a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getName--\" rel=\"nofollow\"><code>Class.getName()</code></a> is documented to return the <strong>binary name</strong>, as specified in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.1\" rel=\"nofollow\">JLS section 13.1</a>. In this case it returns <code>a.b.C$D</code> for <code>D</code> and <code>[La.b.C$D;</code> for <code>D[]</code>.</p></li>\n<li><p><a href=\"http://stackoverflow.com/a/13343540/1468366\">This answer</a> demonstrates that it is possible for two classes loaded by the same class loader to have the same <strong>canonical name</strong> but distinct <strong>binary names</strong>. Neither name is sufficient to reliably deduce the other: if you have the canonical name, you don't know which parts of the name are packages and which are containing classes. If you have the binary name, you don't know which <code>$</code> were introduced as separators and which were part of some simple name.</p></li>\n<li><p><a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.9\" rel=\"nofollow\">Anonymous classes</a> and <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.3\" rel=\"nofollow\">local classes</a> have no <strong>fully qualified names</strong> but still have a <strong>binary name</strong>. The same holds for classes nested inside such classes. <em>Every</em> class has a binary name.</p></li>\n<li><p>Running <code>javap -v -private</code> on <code>a/b/C.class</code> shows that the bytecode refers to the type of <code>d</code> as <code>La/b/C$D;</code> and that of the array <code>ds</code> as <code>[La/b/C$D;</code>. These are called <strong>descriptors</strong>, and they are specified in <a href=\"http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.3\" rel=\"nofollow\">JVMS section 4.3</a>.</p></li>\n<li><p>The class name <code>a/b/C$D</code> used in both of these descriptors is what you get by replacing <code>.</code> by <code>/</code> in the binary name. The JVM spec apparently calls this the <strong>internal form of the binary name</strong>. <a href=\"http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.2.1\" rel=\"nofollow\">JVMS section 4.2.1</a> describes it, and states that the difference from the binary name were for historical reasons.</p></li>\n<li><p>The <strong>file name</strong> of a class in one of the typical filename-based class loaders is what you get if you interpret the <code>/</code> in the internal form of the binary name as a directory separator, and append the file name extension <code>.class</code> to it. It's resolved relative to the class path used by the class loader in question.</p></li>\n</ul>\n", "title": "What is the difference between canonical name, simple name and class name in Java Class?", "tags": ["java"], "link": "http://stackoverflow.com/questions/15202997/what-is-the-difference-between-canonical-name-simple-name-and-class-name-in-jav/36978943#36978943", "question_id": 15202997, "answer_id": 36978943}, {"body": "<p>this is best document I found describing getName(), getSimpleName(), getCanonicalName()</p>\n\n<p><a href=\"https://javahowtodoit.wordpress.com/2014/09/09/java-lang-class-what-is-the-difference-between-class-getname-class-getcanonicalname-and-class-getsimplename/\" rel=\"nofollow\">https://javahowtodoit.wordpress.com/2014/09/09/java-lang-class-what-is-the-difference-between-class-getname-class-getcanonicalname-and-class-getsimplename/</a></p>\n\n<pre><code>// Primitive type\nint.class.getName();          // -&gt; int\nint.class.getCanonicalName(); // -&gt; int\nint.class.getSimpleName();    // -&gt; int\n\n// Standard class\nInteger.class.getName();          // -&gt; java.lang.Integer\nInteger.class.getCanonicalName(); // -&gt; java.lang.Integer\nInteger.class.getSimpleName();    // -&gt; Integer\n\n// Inner class\nMap.Entry.class.getName();          // -&gt; java.util.Map$Entry\nMap.Entry.class.getCanonicalName(); // -&gt; java.util.Map.Entry\nMap.Entry.class.getSimpleName();    // -&gt; Entry     \n\n// Anonymous inner class\nClass&lt;?&gt; anonymousInnerClass = new Cloneable() {}.getClass();\nanonymousInnerClass.getName();          // -&gt; somepackage.SomeClass$1\nanonymousInnerClass.getCanonicalName(); // -&gt; null\nanonymousInnerClass.getSimpleName();    // -&gt; // An empty string\n\n// Array of primitives\nClass&lt;?&gt; primitiveArrayClass = new int[0].getClass();\nprimitiveArrayClass.getName();          // -&gt; [I\nprimitiveArrayClass.getCanonicalName(); // -&gt; int[]\nprimitiveArrayClass.getSimpleName();    // -&gt; int[]\n\n// Array of objects\nClass&lt;?&gt; objectArrayClass = new Integer[0].getClass();\nobjectArrayClass.getName();          // -&gt; [Ljava.lang.Integer;\nobjectArrayClass.getCanonicalName(); // -&gt; java.lang.Integer[]\nobjectArrayClass.getSimpleName();    // -&gt; Integer[]\n</code></pre>\n", "title": "What is the difference between canonical name, simple name and class name in Java Class?", "tags": ["java"], "link": "http://stackoverflow.com/questions/15202997/what-is-the-difference-between-canonical-name-simple-name-and-class-name-in-jav/37603567#37603567", "question_id": 15202997, "answer_id": 37603567}, {"body": "<p>The advantage comes into account when the operations can be executed in parallel. (See <a href=\"http://java.dzone.com/articles/devoxx-2012-java-8-lambda-and\">http://java.dzone.com/articles/devoxx-2012-java-8-lambda-and</a> - the section about internal and external iteration)</p>\n\n<ul>\n<li><p>The main advantage from my point of view is that the implementation of what is to be done within the loop can be defined without having to decide if it will be executed in parallel or sequential</p></li>\n<li><p>If you want your loop to be executed in parallel you could simply write</p>\n\n<pre><code> joins.parallelStream().forEach((join) -&gt; mIrc.join(mSession, join));\n</code></pre>\n\n<p>You will have to write some extra code for thread handling etc.</p></li>\n</ul>\n\n<p><strong>Note :</strong>\nfor my answer I assumed joins implementing the <code>java.util.Stream</code> interface. If joins implements only the <code>java.util.Iterable</code> interface this is no longer true. </p>\n", "title": "Java 8 Iterable.forEach() vs foreach loop", "tags": ["java", "for-loop", "java-8"], "link": "http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop/16635489#16635489", "question_id": 16635398, "answer_id": 16635489}, {"body": "<p><code>forEach()</code> can be implemented to be faster than for-each loop, because the iterable knows the best way to iterate its elements, as opposed to the standard iterator way. So the difference is loop internally or loop externally. </p>\n\n<p>For example <code>ArrayList.forEach(action)</code> may be simply implemented as </p>\n\n<pre><code>for(int i=0; i&lt;size; i++)\n    action.accept(elements[i])\n</code></pre>\n\n<p>as opposed to the for-each loop which requires a lot of scaffolding </p>\n\n<pre><code>Iterator iter = list.iterator();\nwhile(iter.hasNext())\n    Object next = iter.next();\n    do something with `next`\n</code></pre>\n\n<p>However, we also need to account for two overhead costs by using <code>forEach()</code>, one is making the lambda object, the other is invoking the lambda method. They are probably not significant.</p>\n\n<p>see also <a href=\"http://journal.stuffwithstuff.com/2013/01/13/iteration-inside-and-out/\" rel=\"nofollow\">http://journal.stuffwithstuff.com/2013/01/13/iteration-inside-and-out/</a> for comparing internal/external iterations for different use cases.</p>\n", "title": "Java 8 Iterable.forEach() vs foreach loop", "tags": ["java", "for-loop", "java-8"], "link": "http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop/16637740#16637740", "question_id": 16635398, "answer_id": 16637740}, {"body": "<p>The better practice is to use <code>for-each</code>. Besides violating the <em>Keep It Simple, Stupid</em> principle, the new-fangled <code>forEach()</code> has at least the following deficiencies:</p>\n\n<ul>\n<li><p><strong>Can't use non-final variables</strong>. So, code like the following can't be turned into a forEach lambda:</p>\n\n<blockquote>\n<pre><code>Object prev = null;\nfor(Object curr : list)\n{\n    if( prev != null )\n        foo(prev, curr);\n    prev = curr;\n}\n</code></pre>\n</blockquote></li>\n<li><p><strong>Can't handle checked exceptions</strong>. Lambdas aren't actually forbidden from throwing checked exceptions, but common functional interfaces like <code>Consumer</code> don't declare any. Therefore, any code that throws checked exceptions must wrap them in <code>try-catch</code> or <code>Throwables.propagate()</code>. But even if you do that, it's not always clear what happens to the thrown exception. It could get swallowed somewhere in the guts of <code>forEach()</code></p></li>\n<li><p><strong>Limited flow-control</strong>. A <code>return</code> in a lambda equals a <code>continue</code> in a for-each, but there is no equivalent to a <code>break</code>. It's also difficult to do things like return values,  short circuit, or <em>set flags</em> (which would have alleviated things a bit, if it wasn't a violation of the <em>no non-final variables</em> rule). <a href=\"http://journal.stuffwithstuff.com/2013/01/13/iteration-inside-and-out/\">\"This is not just an optimization, but critical when you consider that some sequences (like reading the lines in a file) may have side-effects, or you may have an infinite sequence.\"</a></p></li>\n<li><p><strong>Might execute in parallel</strong>, which is a horrible, horrible thing for all but the 0.1% of your code that needs to be optimized. Any parallel code has to be thought through (even if it doesn't use locks, volatiles, and other particularly nasty aspects of traditional multi-threaded execution). Any bug will be tough to find.</p></li>\n<li><p><strong>Might hurt performance</strong>, because the JIT can't optimize forEach()+lambda to the same extent as plain loops, especially now that lambdas are new. By \"optimization\" I do not mean the overhead of calling lambdas (which is small), but to the sophisticated analysis and transformation that the modern JIT compiler performs on running code.</p></li>\n<li><p><strong>If you do need parallelism,  it is probably much faster and not much more difficult to use an ExecutorService</strong>. Streams are both automagical (read: don't know much about your problem) <em>and</em> use a specialized (read: inefficient for the general case) parallelization strategy (<a href=\"https://programmers.stackexchange.com/questions/250169/is-the-fork-join-framework-a-bad-match-for-the-java-8-streams-api\">fork-join recursive decomposition</a>).</p></li>\n<li><p><strong>Makes debugging more confusing</strong>, because of the nested call hierarchy and, god forbid, parallel execution. The debugger may have issues displaying variables from the surrounding code, and things like step-through may not work as expected.</p></li>\n<li><p><strong>Streams in general are more difficult to code, read, and debug</strong>. Actually, this is true of complex \"<a href=\"https://en.wikipedia.org/wiki/Fluent_interface\">fluent</a>\" APIs in general. The combination of complex single statements, heavy use of generics, and lack of intermediate variables conspire to produce confusing error messages and frustrate debugging. Instead of \"this method doesn't have an overload for type X\" you get an error message closer to \"somewhere you messed up the types, but we don't know where or how.\" Similarly, you can't step through and examine things in a debugger as easily as when the code is broken into multiple statements, and intermediate values are saved to variables. Finally, reading the code and understanding the types and behavior at each stage of execution may be non-trivial.</p></li>\n<li><p><strong>Sticks out like a sore thumb</strong>. The Java language already has the for-each statement. Why replace it with a function call? Why encourage hiding side-effects somewhere in expressions? Why encourage unwieldy one-liners? Mixing regular for-each and new forEach willy-nilly is bad style. Code should speak in idioms (patterns that are quick to comprehend due to their repetition), and the fewer idioms are used the clearer the code is and less time is spent deciding which idiom to use (a big time-drain for perfectionists like myself!).</p></li>\n</ul>\n\n<p>As you can see, I'm not a big fan of the forEach() except in cases when it makes sense.</p>\n\n<p>Particularly offensive to me is the fact that <code>Stream</code> does not implement <code>Iterable</code> (despite actually having method <code>iterator</code>) and cannot be used in a for-each, only with a forEach(). I recommend casting Streams into Iterables with <code>(Iterable&lt;T&gt;)stream::iterator</code>. A better alternative is to use <a href=\"https://github.com/amaembo/streamex\">StreamEx</a> which fixes a number of Stream API problems, including implementing <code>Iterable</code>.</p>\n\n<p>That said, <code>forEach()</code> is useful for the following:</p>\n\n<ul>\n<li><p><strong>Atomically iterating over a synchronized list</strong>. Prior to this, a list generated with <code>Collections.synchronizedList()</code> was atomic with respect to things like get or set, but was not thread-safe when iterating.</p></li>\n<li><p><strong>Parallel execution (using an appropriate parallel stream)</strong>. This saves you a few lines of code vs using an ExecutorService, if your problem matches the performance assumptions built into Streams and Spliterators.</p></li>\n<li><p><strong>Specific containers which</strong>, like the synchronized list, benefit from being in control of iteration (although this is largely theoretical unless people can bring up more examples)</p></li>\n<li><p><strong>Calling a single function more cleanly</strong> by using <code>forEach()</code> and a method reference argument (ie, <code>list.forEach (obj::someMethod)</code>). However, keep in mind the points on checked exceptions, more difficult debugging, and reducing the number of idioms you use when writing code.</p></li>\n</ul>\n\n<p>Articles I used for reference:</p>\n\n<ul>\n<li><a href=\"http://www.techempower.com/blog/2013/03/26/everything-about-java-8/\">Everything about Java 8</a></li>\n<li><a href=\"http://journal.stuffwithstuff.com/2013/01/13/iteration-inside-and-out/\">Iteration Inside and Out</a> (as pointed out by another poster)</li>\n</ul>\n\n<p><strong>EDIT:</strong> Looks like some of the original proposals for lambdas (such as <a href=\"http://www.javac.info/closures-v06a.html\">http://www.javac.info/closures-v06a.html</a>) solved some of the issues I mentioned (while adding their own complications, of course).</p>\n", "title": "Java 8 Iterable.forEach() vs foreach loop", "tags": ["java", "for-loop", "java-8"], "link": "http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop/20177092#20177092", "question_id": 16635398, "answer_id": 20177092}, {"body": "<p>When reading this question one can get the impression, that <code>Iterable#forEach</code> in combination with lambda expressions is a shortcut/replacement for writing a traditional for-each loop. This is simply not true. This code from the OP:</p>\n\n<pre><code>joins.forEach(join -&gt; mIrc.join(mSession, join));\n</code></pre>\n\n<p>is <strong>not</strong> intended as a shortcut for writing</p>\n\n<pre><code>for (String join : joins) {\n    mIrc.join(mSession, join);\n}\n</code></pre>\n\n<p>and should certainly not be used in this way. Instead it is intended as a shortcut (although it is <em>not</em> exactly the same) for writing</p>\n\n<pre><code>joins.forEach(new Consumer&lt;T&gt;() {\n    @Override\n    public void accept(T join) {\n        mIrc.join(mSession, join);\n    }\n});\n</code></pre>\n\n<p>And it is as a replacement for the following Java 7 code:</p>\n\n<pre><code>final Consumer&lt;T&gt; c = new Consumer&lt;T&gt;() {\n    @Override\n    public void accept(T join) {\n        mIrc.join(mSession, join);\n    }\n};\nfor (T t : joins) {\n    c.accept(t);\n}\n</code></pre>\n\n<p>Replacing the body of a loop with a functional interface, as in the examples above, makes your code more explicit: You are saying that (1) the body of the loop does not affect the surrounding code and control flow, and (2) the body of the loop may be replaced with a different implementation of the function, without affecting the surrounding code. Not being able to access non final variables of the outer scope is not a deficit of functions/lambdas, it is a <strong>feature</strong> that distinguishes the semantics of <code>Iterable#forEach</code> from the semantics of a traditional for-each loop. Once one gets used to the syntax of <code>Iterable#forEach</code>, it makes the code more readable, because you immediately get this additional information about the code.</p>\n\n<p>Traditional for-each loops will certainly stay <em>good practice</em> (to avoid the overused term \"<a href=\"http://en.wikipedia.org/wiki/Best_practice\">best practice</a>\") in Java. But this doesn't mean, that <code>Iterable#forEach</code> should be considered bad practice or bad style. It is always good practice, to use the right tool for doing the job, and this includes mixing traditional for-each loops with <code>Iterable#forEach</code>, where it makes sense.</p>\n\n<p>Since the downsides of <code>Iterable#forEach</code> have already been discussed in this thread, here are some reasons, why you might probably want to use <code>Iterable#forEach</code>:</p>\n\n<ul>\n<li><p><strong>To make your code more explicit:</strong> As described above, <code>Iterable#forEach</code> <em>can</em> make your code more explicit and readable in some situations.</p></li>\n<li><p><strong>To make your code more extensible and maintainable:</strong> Using a function as the body of a loop allows you to replace this function with different implementations (see <a href=\"http://en.wikipedia.org/wiki/Strategy_pattern\">Strategy Pattern</a>). You could e.g. easily replace the lambda expression with a method call, that may be overwritten by sub-classes:</p>\n\n<pre><code>joins.forEach(getJoinStrategy());\n</code></pre>\n\n<p>Then you could provide default strategies using an enum, that implements the functional interface. This not only makes your code more extensible, it also increases maintainability because it decouples the loop implementation from the loop declaration. </p></li>\n<li><p><strong>To make your code more debuggable:</strong> Seperating the loop implementation from the declaration can also make debugging more easy, because you could have a specialized debug implementation, that prints out debug messages, without the need to clutter your main code with <code>if(DEBUG)System.out.println()</code>. The debug implementation could e.g. be a <a href=\"http://en.wikipedia.org/wiki/Delegation_pattern\">delegate</a>, that <a href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">decorates</a> the actual function implementation. </p></li>\n<li><p><strong>To optimize performance-critical code:</strong> Contrary to some of the assertions in this thread, <code>Iterable#forEach</code> <em>does</em> already provide better performance than a traditional for-each loop, at least when using ArrayList and running Hotspot in \"-client\" mode. While this performance boost is small and negligible for most use cases, there are situations, where this extra performance can make a difference. E.g. library maintainers will certainly want to evaluate, if some of their existing loop implementations should be replaced with <code>Iterable#forEach</code>.</p>\n\n<p>To back this statement up with facts, I have done some micro-benchmarks with <a href=\"https://code.google.com/p/caliper/\">Caliper</a>. Here is the test code (latest Caliper from git is needed):</p>\n\n<pre><code>@VmOptions(\"-server\")\npublic class Java8IterationBenchmarks {\n\n    public static class TestObject {\n        public int result;\n    }\n\n    public @Param({\"100\", \"10000\"}) int elementCount;\n\n    ArrayList&lt;TestObject&gt; list;\n    TestObject[] array;\n\n    @BeforeExperiment\n    public void setup(){\n        list = new ArrayList&lt;&gt;(elementCount);\n        for (int i = 0; i &lt; elementCount; i++) {\n            list.add(new TestObject());\n        }\n        array = list.toArray(new TestObject[list.size()]);\n    }\n\n    @Benchmark\n    public void timeTraditionalForEach(int reps){\n        for (int i = 0; i &lt; reps; i++) {\n            for (TestObject t : list) {\n                t.result++;\n            }\n        }\n        return;\n    }\n\n    @Benchmark\n    public void timeForEachAnonymousClass(int reps){\n        for (int i = 0; i &lt; reps; i++) {\n            list.forEach(new Consumer&lt;TestObject&gt;() {\n                @Override\n                public void accept(TestObject t) {\n                    t.result++;\n                }\n            });\n        }\n        return;\n    }\n\n    @Benchmark\n    public void timeForEachLambda(int reps){\n        for (int i = 0; i &lt; reps; i++) {\n            list.forEach(t -&gt; t.result++);\n        }\n        return;\n    }\n\n    @Benchmark\n    public void timeForEachOverArray(int reps){\n        for (int i = 0; i &lt; reps; i++) {\n            for (TestObject t : array) {\n                t.result++;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>And here are the results:</p>\n\n<ul>\n<li><a href=\"https://microbenchmarks.appspot.com/runs/75b4e5a3-e94b-41e2-85cc-c3211baa8b6f#r:scenario.benchmarkSpec.methodName&amp;c:scenario.benchmarkSpec.parameters.elementCount\">Results for -client</a></li>\n<li><a href=\"https://microbenchmarks.appspot.com/runs/1c1f2842-b0b3-4b59-9bf3-404741d6b4ea#r:scenario.benchmarkSpec.methodName&amp;c:scenario.benchmarkSpec.parameters.elementCount\">Results for -server</a></li>\n</ul>\n\n<p>When running with \"-client\", <code>Iterable#forEach</code> outperforms the traditional for loop over an ArrayList, but is still slower than directly iterating over an array. When running with \"-server\", the performance of all approaches is about the same.</p></li>\n<li><p><strong>To provide optional support for parallel execution:</strong> It has already been said here, that the possibility to execute the functional interface of <code>Iterable#forEach</code> in parallel using <a href=\"http://download.java.net/lambda/b86/docs/api/java/util/stream/package-summary.html\">streams</a>, is certainly an important aspect. Since <code>Collection#parallelStream()</code> does not guarantee, that the loop is actually executed in parallel, one must consider this an <em>optional</em> feature. By iterating over your list with <code>list.parallelStream().forEach(...);</code>, you explicitly say: This loop <em>supports</em> parallel execution, but it does not depend on it. Again, this is a feature and not a deficit!</p>\n\n<p>By moving the decision for parallel execution away from your actual loop implementation, you allow optional optimization of your code, without affecting the code itself, which is a good thing. Also, if the default parallel stream implementation does not fit your needs, no one is preventing you from providing your own implementation. You could e.g. provide an optimized collection depending on the underlying operating system, on the size of the collection, on the number of cores, and on some preference settings: </p>\n\n<pre><code>public abstract class MyOptimizedCollection&lt;E&gt; implements Collection&lt;E&gt;{\n    private enum OperatingSystem{\n        LINUX, WINDOWS, ANDROID\n    }\n    private OperatingSystem operatingSystem = OperatingSystem.WINDOWS;\n    private int numberOfCores = Runtime.getRuntime().availableProcessors();\n    private Collection&lt;E&gt; delegate;\n\n    @Override\n    public Stream&lt;E&gt; parallelStream() {\n        if (!System.getProperty(\"parallelSupport\").equals(\"true\")) {\n            return this.delegate.stream();\n        }\n        switch (operatingSystem) {\n            case WINDOWS:\n                if (numberOfCores &gt; 3 &amp;&amp; delegate.size() &gt; 10000) {\n                    return this.delegate.parallelStream();\n                }else{\n                    return this.delegate.stream();\n                }\n            case LINUX:\n                return SomeVerySpecialStreamImplementation.stream(this.delegate.spliterator());\n            case ANDROID:\n            default:\n                return this.delegate.stream();\n        }\n    }\n}\n</code></pre>\n\n<p>The nice thing here is, that your loop implementation doesn't need to know or care about these details.</p></li>\n</ul>\n", "title": "Java 8 Iterable.forEach() vs foreach loop", "tags": ["java", "for-loop", "java-8"], "link": "http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop/22502206#22502206", "question_id": 16635398, "answer_id": 22502206}, {"body": "<p><em>TL;DR</em>: <code>List.stream().forEach()</code> was the fastest.</p>\n\n<p>I felt I should add my results from benchmarking iteration.\nI took a very simple approach (no benchmarking frameworks) and benchmarked 5 different methods:</p>\n\n<ol>\n<li>classic <code>for</code></li>\n<li>classic foreach</li>\n<li><code>List.forEach()</code></li>\n<li><code>List.stream().forEach()</code></li>\n<li><code>List.parallelStream().forEach</code></li>\n</ol>\n\n<h2>the testing procedure and parameters</h2>\n\n<pre><code>private List&lt;Integer&gt; list;\nprivate final int size = 1_000_000;\n\npublic MyClass(){\n    list = new ArrayList&lt;&gt;();\n    Random rand = new Random();\n    for (int i = 0; i &lt; size; ++i) {\n        list.add(rand.nextInt(size * 50));\n    }    \n}\nprivate void doIt(Integer i) {\n    i *= 2; //so it won't get JITed out\n}\n</code></pre>\n\n<p>The list in this class shall be iterated over and have some <code>doIt(Integer i)</code> applied to all it's members, each time via a different method.\nin the Main class I run the tested method three times to warm up the JVM. I then run the test method 1000 times summing the time it takes for each iteration method (using <code>System.nanoTime()</code>). After that's done i divide that sum by 1000 and that's the result, average time.\nexample:</p>\n\n<pre><code>myClass.fored();\nmyClass.fored();\nmyClass.fored();\nfor (int i = 0; i &lt; reps; ++i) {\n    begin = System.nanoTime();\n    myClass.fored();\n    end = System.nanoTime();\n    nanoSum += end - begin;\n}\nSystem.out.println(nanoSum / reps);\n</code></pre>\n\n<p>I ran this on a i5 4 core CPU, with java version 1.8.0_05</p>\n\n<h2>classic <code>for</code></h2>\n\n<pre><code>for(int i = 0, l = list.size(); i &lt; l; ++i) {\n    doIt(list.get(i));\n}\n</code></pre>\n\n<p>execution time: 4.21 ms</p>\n\n<h2>classic foreach</h2>\n\n<pre><code>for(Integer i : list) {\n    doIt(i);\n}\n</code></pre>\n\n<p>execution time: 5.95 ms</p>\n\n<h2><code>List.forEach()</code></h2>\n\n<pre><code>list.forEach((i) -&gt; doIt(i));\n</code></pre>\n\n<p>execution time: 3.11 ms</p>\n\n<h2><code>List.stream().forEach()</code></h2>\n\n<pre><code>list.stream().forEach((i) -&gt; doIt(i));\n</code></pre>\n\n<p>execution time: 2.79 ms</p>\n\n<h2><code>List.parallelStream().forEach</code></h2>\n\n<pre><code>list.parallelStream().forEach((i) -&gt; doIt(i));\n</code></pre>\n\n<p>execution time: 3.6 ms</p>\n", "title": "Java 8 Iterable.forEach() vs foreach loop", "tags": ["java", "for-loop", "java-8"], "link": "http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop/25855691#25855691", "question_id": 16635398, "answer_id": 25855691}, {"body": "<p>One of most upleasing functional <code>forEach</code>'s limitations is lack of checked exceptions support.</p>\n\n<p>One <a href=\"http://stackoverflow.com/questions/31702989/how-to-iterate-with-foreach-loop-over-java-8-stream\">possible workaround</a> is to replace terminal <code>forEach</code> with plain old foreach loop:</p>\n\n<pre><code>    Stream&lt;String&gt; stream = Stream.of(\"\", \"1\", \"2\", \"3\").filter(s -&gt; !s.isEmpty());\n    Iterable&lt;String&gt; iterable = stream::iterator;\n    for (String s : iterable) {\n        fileWriter.append(s);\n    }\n</code></pre>\n\n<p>Here is list of most popular questions with other workarounds on checked exception handling within lambdas and streams:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/18198176/java-8-lambda-function-that-throws-exception\">Java 8 Lambda function that throws exception?</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/19757300/java-8-lambda-streams-filter-by-method-with-exception\">Java 8: Lambda-Streams, Filter by Method with Exception</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/27644361/how-can-i-throw-checked-exceptions-from-inside-java-8-streams\">How can I throw CHECKED exceptions from inside Java 8 streams?</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/14039995/java-8-mandatory-checked-exceptions-handling-in-lambda-expressions-why-mandato\">Java 8: Mandatory checked exceptions handling in lambda expressions. Why mandatory, not optional?</a></p>\n", "title": "Java 8 Iterable.forEach() vs foreach loop", "tags": ["java", "for-loop", "java-8"], "link": "http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop/31707746#31707746", "question_id": 16635398, "answer_id": 31707746}, {"body": "<p>Your <code>QuickRandom</code> implementation hasn't really an uniform distribution. The frequencies are generally higher at the lower values while <code>Math.random()</code> has a more uniform distribution. Here's a <a href=\"http://sscce.org\">SSCCE</a> which shows that:</p>\n\n<pre><code>package com.stackoverflow.q14491966;\n\nimport java.util.Arrays;\n\npublic class Test {\n\n    public static void main(String[] args) throws Exception {\n        QuickRandom qr = new QuickRandom();\n        int[] frequencies = new int[10];\n        for (int i = 0; i &lt; 100000; i++) {\n            frequencies[(int) (qr.random() * 10)]++;\n        }\n        printDistribution(\"QR\", frequencies);\n\n        frequencies = new int[10];\n        for (int i = 0; i &lt; 100000; i++) {\n            frequencies[(int) (Math.random() * 10)]++;\n        }\n        printDistribution(\"MR\", frequencies);\n    }\n\n    public static void printDistribution(String name, int[] frequencies) {\n        System.out.printf(\"%n%s distribution |8000     |9000     |10000    |11000    |12000%n\", name);\n        for (int i = 0; i &lt; 10; i++) {\n            char[] bar = \"                                                  \".toCharArray(); // 50 chars.\n            Arrays.fill(bar, 0, Math.max(0, Math.min(50, frequencies[i] / 100 - 80)), '#');\n            System.out.printf(\"0.%dxxx: %6d  :%s%n\", i, frequencies[i], new String(bar));\n        }\n    }\n\n}\n</code></pre>\n\n<p>The average result looks like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>QR distribution |8000     |9000     |10000    |11000    |12000\n0.0xxx:  11376  :#################################                 \n0.1xxx:  11178  :###############################                   \n0.2xxx:  11312  :#################################                 \n0.3xxx:  10809  :############################                      \n0.4xxx:  10242  :######################                            \n0.5xxx:   8860  :########                                          \n0.6xxx:   9004  :##########                                        \n0.7xxx:   8987  :#########                                         \n0.8xxx:   9075  :##########                                        \n0.9xxx:   9157  :###########                                       \n\nMR distribution |8000     |9000     |10000    |11000    |12000\n0.0xxx:  10097  :####################                              \n0.1xxx:   9901  :###################                               \n0.2xxx:  10018  :####################                              \n0.3xxx:   9956  :###################                               \n0.4xxx:   9974  :###################                               \n0.5xxx:  10007  :####################                              \n0.6xxx:  10136  :#####################                             \n0.7xxx:   9937  :###################                               \n0.8xxx:  10029  :####################                              \n0.9xxx:   9945  :###################    \n</code></pre>\n\n<p>If you repeat the test, you'll see that the QR distribution varies heavily, depending on the initial seeds, while the MR distribution is stable. Sometimes it reaches the desired uniform distribution, but more than often it doesn't. Here's one of the more extreme examples, it's even beyond the borders of the graph:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>QR distribution |8000     |9000     |10000    |11000    |12000\n0.0xxx:  41788  :##################################################\n0.1xxx:  17495  :##################################################\n0.2xxx:  10285  :######################                            \n0.3xxx:   7273  :                                                  \n0.4xxx:   5643  :                                                  \n0.5xxx:   4608  :                                                  \n0.6xxx:   3907  :                                                  \n0.7xxx:   3350  :                                                  \n0.8xxx:   2999  :                                                  \n0.9xxx:   2652  :                                                  \n</code></pre>\n", "title": "Is this a &quot;good enough&quot; random algorithm; why isn&#39;t it used if it&#39;s faster?", "tags": ["java", "performance", "algorithm", "random"], "link": "http://stackoverflow.com/questions/14491966/is-this-a-good-enough-random-algorithm-why-isnt-it-used-if-its-faster/14492320#14492320", "question_id": 14491966, "answer_id": 14492320}, {"body": "<p>There are many, many pseudo random number generators out there. For example Knuth's <a href=\"http://www-cs-faculty.stanford.edu/~uno/programs.html\">ranarray</a>, the <a href=\"http://saluc.engr.uconn.edu/refs/crypto/rng/matsumoto98mersenne.pdf\">Mersenne twister</a>, or look for LFSR generators. Knuth's monumental \"Seminumerical algorithms\" analizes the area, and proposes some linear congruential generators (simple to implement, fast). </p>\n\n<p>But I'd suggest you just stick to <code>java.util.Random</code> or <code>Math.random</code>, they fast and at least OK for occasional use (i.e., games and such). If you are just paranoid on the distribution (some Monte Carlo program, or a genetic algorithm), check out their implementation (source is available somewhere), and seed them with some truly random number, either from your operating system or from <a href=\"http://random.org\">random.org</a>. If this is required for some application where security is critical, you'll have to dig yourself. And as in that case you shouldn't believe what some colored square with missing bits spouts here, I'll shut up now.</p>\n", "title": "Is this a &quot;good enough&quot; random algorithm; why isn&#39;t it used if it&#39;s faster?", "tags": ["java", "performance", "algorithm", "random"], "link": "http://stackoverflow.com/questions/14491966/is-this-a-good-enough-random-algorithm-why-isnt-it-used-if-its-faster/14502259#14502259", "question_id": 14491966, "answer_id": 14502259}, {"body": "<p>The <code>Collections.unmodifiableList</code> has already been mentioned - the <code>Arrays.asList()</code> strangely not! My solution would also be to use the list from the outside and wrap the array as follows:</p>\n\n<pre><code>String[] arr = new String[]{\"1\", \"2\"}; \npublic List&lt;String&gt; getList() {\n    Collections.unmodifiableList(Arrays.asList(arr));\n}\n</code></pre>\n\n<p>The problem with copying the array is: if you're doing it every time you access the code and the array is big, you'll create a lot of work for the garbage collector for sure. So the copy is a simple but really bad approach - I'd say \"cheap\", but memory-expensive! Especially when you're having more than just 2 elements.</p>\n\n<p>If you look at the source code of <code>Arrays.asList</code> and <code>Collections.unmodifiableList</code> there is actually not much created. The first just wraps the array without copying it, the second just wraps the list, making changes to it unavailable.</p>\n", "title": "How do I prevent the modification of a private field in a class?", "tags": ["java", "arrays", "oop", "class"], "link": "http://stackoverflow.com/questions/14809293/how-do-i-prevent-the-modification-of-a-private-field-in-a-class/14821488#14821488", "question_id": 14809293, "answer_id": 14821488}, {"body": "<p>You must use</p>\n\n<pre><code>doThrow(new Exception()).when(mockedObject).methodReturningVoid(...);\n</code></pre>\n\n<p>and not</p>\n\n<pre><code>doThrow(new Exception()).when(mockedObject.methodReturningVoid(...));\n</code></pre>\n\n<p>This is explained in <a href=\"http://site.mockito.org/mockito/docs/current/org/mockito/Mockito.html#5\">the documentation</a></p>\n", "title": "Mockito test a void method throws an exception", "tags": ["java", "exception", "mocking", "mockito"], "link": "http://stackoverflow.com/questions/15156857/mockito-test-a-void-method-throws-an-exception/15157021#15157021", "question_id": 15156857, "answer_id": 15157021}, {"body": "<p>change your return type to <code>ResponseEntity&lt;String&gt;</code>, then you can use below for 400</p>\n\n<pre><code>return new ResponseEntity&lt;String&gt;(HttpStatus.BAD_REQUEST);\n</code></pre>\n\n<p>and for correct request</p>\n\n<pre><code>return new ResponseEntity&lt;String&gt;(json,HttpStatus.OK);\n</code></pre>\n\n<p><strong>UPDATE 1</strong></p>\n\n<p>after spring 4.1 there are helper methods in ResponseEntity could be used as</p>\n\n<pre><code>return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\n</code></pre>\n\n<p>and</p>\n\n<pre><code>return ResponseEntity.ok(json);\n</code></pre>\n", "title": "How to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?", "tags": ["java", "spring", "spring-mvc", "http-error"], "link": "http://stackoverflow.com/questions/16232833/how-to-respond-with-http-400-error-in-a-spring-mvc-responsebody-method-returnin/16250729#16250729", "question_id": 16232833, "answer_id": 16250729}, {"body": "<p>You need to escape the dot if you want to split on a <em>literal</em> dot:</p>\n\n<pre><code>String extensionRemoved = filename.split(\"\\\\.\")[0];\n</code></pre>\n\n<p>Otherwise you are splitting on the regex <code>.</code>, which means \"any character\".<br>\nNote the double backslash needed to create a single backslash in the regex.</p>\n\n<hr>\n\n<p>You're getting an <code>ArrayIndexOutOfBoundsException</code> because your input string is just a dot, ie <code>\".\"</code>, which is an edge case that produces an empty array when split on dot; <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-\"><code>split(regex)</code></a> removes all trailing blanks from the result, but since splitting a dot on a dot leaves only two blanks, after trailing blanks are removed you're left with an empty array.</p>\n\n<p>To avoid getting an <code>ArrayIndexOutOfBoundsException</code> for this edge case, use the overloaded version of <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-int-\"><code>split(regex, limit)</code></a>, which has a second parameter that is the size limit for the resulting array. When <code>limit</code> is <em>negative</em>, the behaviour of removing trailing blanks from the resulting array is disabled:</p>\n\n<pre><code>\".\".split(\"\\\\.\", -1) // returns an array of two blanks, ie [\"\", \"\"]\n</code></pre>\n\n<p>ie, when <code>filename</code> is just a dot <code>\".\"</code>, calling <code>filename.split(\"\\\\.\", -1)[0]</code> will return a blank, but calling <code>filename.split(\"\\\\.\")[0]</code> will throw an <code>ArrayIndexOutOfBoundsException</code>.</p>\n", "title": "Java string split with &quot;.&quot; (dot)", "tags": ["java", "regex", "string", "split", "indexoutofboundsexception"], "link": "http://stackoverflow.com/questions/14833008/java-string-split-with-dot/14833048#14833048", "question_id": 14833008, "answer_id": 14833048}, {"body": "<p>This is because <code>.</code> is a reserved character in regular expression, representing any character.\nInstead, we should use the following statement:</p>\n\n<pre><code>String extensionRemoved = filename.split(\"\\\\.\")[0];\n</code></pre>\n", "title": "Java string split with &quot;.&quot; (dot)", "tags": ["java", "regex", "string", "split", "indexoutofboundsexception"], "link": "http://stackoverflow.com/questions/14833008/java-string-split-with-dot/14833053#14833053", "question_id": 14833008, "answer_id": 14833053}, {"body": "<p>\".\" is a special character in java. You have to use \"\\.\" to escape this character :</p>\n\n<pre><code>final String extensionRemoved = filename.split(\"\\\\.\")[0];\n</code></pre>\n\n<p>I hope this helps</p>\n", "title": "Java string split with &quot;.&quot; (dot)", "tags": ["java", "regex", "string", "split", "indexoutofboundsexception"], "link": "http://stackoverflow.com/questions/14833008/java-string-split-with-dot/14833098#14833098", "question_id": 14833008, "answer_id": 14833098}, {"body": "<p>This is to avoid possible efforts for reallocation for every single object. </p>\n\n<pre><code>int newCapacity = (oldCapacity * 3)/2 + 1;\n</code></pre>\n\n<p>internally <code>new Object[]</code> is created.<br> JVM needs effort to create  <code>new Object[]</code> when you add element in the arraylist. If you don't have above code(any algo you think) for reallocation then every time when you invoke <code>arraylist.add()</code> then <code>new Object[]</code> has to be created which is pointless and we are loosing time for increasing size by 1 for each and every objects to be added. So it is better to increase size of <code>Object[]</code> with following formula.<br>\n(JSL has used forcasting formula given below for dynamically growing arraylist instead of growing by 1 every time. Because to grow it takes effort by JVM)</p>\n\n<pre><code>int newCapacity = (oldCapacity * 3)/2 + 1;\n</code></pre>\n", "title": "Why start an ArrayList with an initial capacity?", "tags": ["java", "data-structures", "arraylist", "capacity"], "link": "http://stackoverflow.com/questions/15430247/why-start-an-arraylist-with-an-initial-capacity/15432106#15432106", "question_id": 15430247, "answer_id": 15432106}, {"body": "<p>From <strong>Effective Java</strong>,  <strong>Item #43</strong> - <code>\"Return empty arrays or collections, not null\"</code> demonstrates returning an empty collection and perhaps even demonstrates using these <code>emptyList()</code>, <code>emptySet()</code>, and <code>emptyMap()</code> methods on the Collections class to get an empty collection that also has the additional benefit of being immutable. From  <strong>Item #15</strong>  <code>\"Minimize Mutability\"</code>.</p>\n\n<p>From <a href=\"http://www.coderanch.com/t/536728/java/java/Collections-emptySet-Collections-emptyList-Collections\">Collections-emptySet-Collections-emptyList-Collections</a>  </p>\n\n<blockquote>\n  <p>Its a type of programming idiom. This is for people that do not want null variables. So before the set gets initialized, they can use the empty set. </p>\n</blockquote>\n\n<p><strong>Note:</strong> Below code is just an example (change it according to your use case):  </p>\n\n<pre><code>private Set myset = Collections.emptySet();\n\nvoid initSet() {\n   myset = new HashSet();\n}\nvoid deleteSet() {\n   myset = Collections.emptySet();\n}\n</code></pre>\n\n<p>These methods offer a couple of advantages:</p>\n\n<ol>\n<li><p>They're more concise because you don't need to explicitly type out the generic type of the collection - it's generally just inferred from the context of the method call.   </p></li>\n<li><p>They're more efficient because they don't bother creating new objects; they just re-use an existing empty and immutable object. This effect is generally very minor, but it's occasionally (well, rarely) important.</p></li>\n</ol>\n", "title": "Collections.emptyMap() vs new HashMap()", "tags": ["java", "collections"], "link": "http://stackoverflow.com/questions/14846920/collections-emptymap-vs-new-hashmap/14846960#14846960", "question_id": 14846920, "answer_id": 14846960}, {"body": "<blockquote>\n  <p>Why would I want an immutable empty collection? What is the point?</p>\n</blockquote>\n\n<p>For the same reason you'd use <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#unmodifiableMap%28java.util.Map%29\" rel=\"nofollow\"><code>Collections.unmodifiableMap()</code></a> at some point. You want to return a Map instance that throws an exception if the user attempts to modify it. It's just a special case: the empty Map.</p>\n", "title": "Collections.emptyMap() vs new HashMap()", "tags": ["java", "collections"], "link": "http://stackoverflow.com/questions/14846920/collections-emptymap-vs-new-hashmap/14846963#14846963", "question_id": 14846920, "answer_id": 14846963}, {"body": "<p>It can be useful when you have a function that returns an <code>immutable collection</code> and in some situation there is no data to return so instead of returning <code>null</code> you can return <code>emptyMap()</code></p>\n\n<p>It make your code easier and prevent <code>NullPointerException</code></p>\n", "title": "Collections.emptyMap() vs new HashMap()", "tags": ["java", "collections"], "link": "http://stackoverflow.com/questions/14846920/collections-emptymap-vs-new-hashmap/14846999#14846999", "question_id": 14846920, "answer_id": 14846999}, {"body": "<p>Most of the time we use a <code>constructor</code> to create a new <code>empty map</code>. But the <code>Collections</code> <code>methods</code> offer a couple of advantages to create an <code>empty map</code> using <code>static</code> <code>method</code> <code>java.util.Collections.emptyMap()</code></p>\n\n<blockquote>\n  <ol>\n  <li><p>They're more concise because you don't need to explicitly type out the generic type of the collection - it's generally just inferred from\n  the context of the method call.</p></li>\n  <li><p>They're more efficient because they don't bother creating new objects; they just re-use an existing empty and immutable object. This\n  effect is generally very minor, but it's occasionally (well, rarely)\n  important.</p></li>\n  </ol>\n</blockquote>\n", "title": "Collections.emptyMap() vs new HashMap()", "tags": ["java", "collections"], "link": "http://stackoverflow.com/questions/14846920/collections-emptymap-vs-new-hashmap/14847046#14847046", "question_id": 14846920, "answer_id": 14847046}, {"body": "<p>Use util method of <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html\">java.util.Collections</a> class, i.e</p>\n\n<pre><code>Collections.sort(list)\n</code></pre>\n\n<p>In fact, if you want to sort custom object you can use</p>\n\n<pre><code>Collections.sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c) \n</code></pre>\n\n<p>see collections api</p>\n", "title": "How to sort a List/ArrayList in Java", "tags": ["java"], "link": "http://stackoverflow.com/questions/16252269/how-to-sort-a-list-arraylist-in-java/16252296#16252296", "question_id": 16252269, "answer_id": 16252296}, {"body": "<p>You can use <code>Collections.sort(list)</code> to sort <code>list</code> if your <code>list</code> contains <code>Comparable</code> elements. Otherwise I would recommend you to implement that interface like here:</p>\n\n<pre><code>public class Circle implements Comparable&lt;Circle&gt; {}\n</code></pre>\n\n<p>and of course provide your own realization of <code>compareTo</code> method like here:</p>\n\n<pre><code>@Override\n    public int compareTo(Circle another) {\n        if (this.getD()&lt;another.getD()){\n            return -1;\n        }else{\n            return 1;\n        }\n    }\n</code></pre>\n\n<p>And then you can again use <code>Colection.sort(list)</code> as now list contains objects of Comparable type and can be sorted. Order depends on <code>compareTo</code> method. Check this <a href=\"https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html\">https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html</a> for more detailed information.</p>\n", "title": "How to sort a List/ArrayList in Java", "tags": ["java"], "link": "http://stackoverflow.com/questions/16252269/how-to-sort-a-list-arraylist-in-java/29652714#29652714", "question_id": 16252269, "answer_id": 29652714}, {"body": "<p><code>Collections.sort</code> allows you to pass an instance of a <code>Comparator</code> which defines the sorting logic. So instead of sorting the list in natural order and then reversing it, one can simply pass <code>Collections.reverseOrder()</code> to <code>sort</code> in order to sort the list in reverse order:</p>\n\n<pre><code>// import java.util.Collections;\nCollections.sort(testList, Collections.reverseOrder());\n</code></pre>\n\n<p>As mentioned by @Marco13, apart from being more idiomatic (and possibly more efficient), using the reverse order comparator makes sure that the sort is stable (meaning that the order of elements will not be changed when they are equal according to the comparator, whereas reversing will change the order)</p>\n", "title": "How to sort a List/ArrayList in Java", "tags": ["java"], "link": "http://stackoverflow.com/questions/16252269/how-to-sort-a-list-arraylist-in-java/30210459#30210459", "question_id": 16252269, "answer_id": 30210459}, {"body": "<p>Escape should be done with <code>\\</code>, not <code>/</code>.</p>\n\n<p>So <code>r.append('\\n');</code> or <code>r.append(\"\\n\");</code> will work (<code>StringBuilder</code> has overloaded methods for <code>char</code> and <code>String</code> type).</p>\n", "title": "How to append a newline to StringBuilder", "tags": ["java", "stringbuilder"], "link": "http://stackoverflow.com/questions/14534767/how-to-append-a-newline-to-stringbuilder/14534791#14534791", "question_id": 14534767, "answer_id": 14534791}, {"body": "<p>It should be </p>\n\n<pre><code>r.append(\"\\n\");\n</code></pre>\n\n<p>But I recommend you to do as below,</p>\n\n<pre><code>r.append(System.getProperty(\"line.separator\"));\n</code></pre>\n\n<p><code>System.getProperty(\"line.separator\")</code> gives you system-dependent newline in java. Also from Java 7 there's a method that returns the value directly: <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#lineSeparator%28%29\"><code>System.lineSeparator()</code></a> </p>\n", "title": "How to append a newline to StringBuilder", "tags": ["java", "stringbuilder"], "link": "http://stackoverflow.com/questions/14534767/how-to-append-a-newline-to-stringbuilder/14534798#14534798", "question_id": 14534767, "answer_id": 14534798}, {"body": "<p>For HTML response  below code can be used </p>\n\n<pre><code>bufString.append(\"&lt;/br&gt;\");\n</code></pre>\n", "title": "How to append a newline to StringBuilder", "tags": ["java", "stringbuilder"], "link": "http://stackoverflow.com/questions/14534767/how-to-append-a-newline-to-stringbuilder/33687544#33687544", "question_id": 14534767, "answer_id": 33687544}, {"body": "<p><code>split(delimiter)</code> by default removes trailing empty strings from result array. To turn this mechanism off we need to use overloaded version of <code>split(delimiter, limit)</code> with <code>limit</code> set to negative value like</p>\n\n<pre><code>String[] split = data.split(\"\\\\|\", -1);\n</code></pre>\n\n<p>Little more details:<br>\n<code>split(regex)</code> internally returns result of <code>split(regex, 0)</code> and in <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-int-\">documentation</a> of this method you can find (emphasis mine)</p>\n\n<blockquote>\n  <p>The <code>limit</code> parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. </p>\n  \n  <p>If the limit <code>n</code> is <em>greater than zero</em> then the pattern will be applied at most n - 1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter. </p>\n  \n  <p>If <code>n</code> is <strong>non-positive</strong> then the pattern will be applied as many times as possible and the array can have any length. </p>\n  \n  <p>If <code>n</code> is <strong>zero</strong> then the pattern will be applied as many times as possible, the array can have any length, and <strong>trailing empty strings will be discarded</strong>.</p>\n</blockquote>\n", "title": "Java String split removed empty values", "tags": ["java", "string", "split"], "link": "http://stackoverflow.com/questions/14602062/java-string-split-removed-empty-values/14602089#14602089", "question_id": 14602062, "answer_id": 14602089}, {"body": "<p>From <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#split%28java.lang.String%29\" rel=\"nofollow\"><strong>String.split() API Doc</strong></a>:</p>\n\n<blockquote>\n  <p>Splits this string around matches of the given regular expression.\n  This method works as if by invoking the two-argument split method with\n  the given expression and a limit argument of zero. Trailing empty\n  strings are therefore not included in the resulting array.</p>\n</blockquote>\n\n<p>Overloaded <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#split%28java.lang.String,%20int%29\" rel=\"nofollow\"><strong>String.split(regex, int)</strong></a> is more appropriate for your case.</p>\n", "title": "Java String split removed empty values", "tags": ["java", "string", "split"], "link": "http://stackoverflow.com/questions/14602062/java-string-split-removed-empty-values/14602092#14602092", "question_id": 14602062, "answer_id": 14602092}, {"body": "<p>From the documentation of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#split%28java.lang.String%29\"><code>String.split(String regex)</code></a>:</p>\n\n<blockquote>\n  <p>This method works as if by invoking the two-argument split method with the given expression and a limit argument of zero. <strong>Trailing empty strings are therefore not included in the resulting array.</strong> </p>\n</blockquote>\n\n<p>So you will have to use the two argument version <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#split%28java.lang.String,%20int%29\"><code>String.split(String regex, int limit)</code></a> with a negative value:</p>\n\n<pre><code>String[] split = data.split(\"\\\\|\",-1);\n</code></pre>\n\n<p>Doc:</p>\n\n<blockquote>\n  <p>If the limit n is greater than zero then the pattern will be applied at most n - 1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter. <strong>If n is non-positive then the pattern will be applied as many times as possible and the array can have any length. If n is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded.</strong></p>\n</blockquote>\n\n<p>This will not leave out any empty elements, including the trailing ones.</p>\n", "title": "Java String split removed empty values", "tags": ["java", "string", "split"], "link": "http://stackoverflow.com/questions/14602062/java-string-split-removed-empty-values/14602155#14602155", "question_id": 14602062, "answer_id": 14602155}, {"body": "<pre><code>value = value.setScale(2, RoundingMode.CEILING)\n</code></pre>\n", "title": "Rounding BigDecimal to *always* have two decimal places", "tags": ["java", "math", "bigdecimal", "rounding"], "link": "http://stackoverflow.com/questions/15643280/rounding-bigdecimal-to-always-have-two-decimal-places/15643364#15643364", "question_id": 15643280, "answer_id": 15643364}, {"body": "<p><strong>In short:</strong></p>\n\n<p>If you want to get rid of trailing zeros and Locale problems, then you should use :</p>\n\n<pre><code>double myValue = 0.00000021d;\n\nDecimalFormat df = new DecimalFormat(\"0\", DecimalFormatSymbols.getInstance(Locale.ENGLISH));\ndf.setMaximumFractionDigits(340); //340 = DecimalFormat.DOUBLE_FRACTION_DIGITS\n\nSystem.out.println(df.format(myValue)); //output: 0.00000021\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Why other answers did not suit me :</p>\n\n<ul>\n<li><code>Double.toString()</code> or <code>System.out.println</code> or <code>FloatingDecimal.toJavaFormatString</code> uses scientific notations if double is less than 10^-3 or greater than or equal to 10^7</li>\n<li><p>by using <code>%f</code>, the default decimal precision is 6, otherwise you can hardcode it but it results in extra zeros added if you have less decimals. Example :</p>\n\n<pre><code>double myValue = 0.00000021d;\nString.format(\"%.12f\", myvalue); //output: 0.000000210000\n</code></pre></li>\n<li><p>by using <code>setMaximumFractionDigits(0);</code> or <code>%.0f</code> you remove any decimal precision, which is fine for integers/longs but not for double</p>\n\n<pre><code>double myValue = 0.00000021d;\nSystem.out.println(String.format(\"%.0f\", myvalue)); //output: 0\nDecimalFormat df = new DecimalFormat(\"0\");\nSystem.out.println(df.format(myValue)); //output: 0\n</code></pre></li>\n<li><p>by using DecimalFormat, you are local dependent. In French locale, the decimal separator is a comma, not a point :</p>\n\n<pre><code>double myValue = 0.00000021d;\nDecimalFormat df = new DecimalFormat(\"0\");\ndf.setMaximumFractionDigits(340);\nSystem.out.println(df.format(myvalue));//output: 0,00000021\n</code></pre>\n\n<p>Using the ENGLISH locale makes sure you get a point for decimal separator, wherever your program will run</p></li>\n</ul>\n\n<p>Why using 340 then for <code>setMaximumFractionDigits</code> ?</p>\n\n<p>Two reasons :</p>\n\n<ul>\n<li><code>setMaximumFractionDigits</code> accepts an integer but its implementation has a maximum digits allowed of <code>DecimalFormat.DOUBLE_FRACTION_DIGITS</code> which equals 340</li>\n<li><code>Double.MIN_VALUE = 4.9E-324</code> so with 340 digits you are sure not to round your double and loose precision</li>\n</ul>\n", "title": "How to print double value without scientific notation using Java?", "tags": ["java", "double"], "link": "http://stackoverflow.com/questions/16098046/how-to-print-double-value-without-scientific-notation-using-java/25307973#25307973", "question_id": 16098046, "answer_id": 25307973}, {"body": "<p>just use <strong><a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/File.html#getName%28%29\">File.getName()</a></strong></p>\n\n<pre><code>File f = new File(\"C:\\\\Hello\\\\AnotherFolder\\\\The File Name.PDF\");\nSystem.out.println(f.getName());\n</code></pre>\n\n<p>using <strong>String methods</strong>:</p>\n\n<pre><code>  File f = new File(\"C:\\\\Hello\\\\AnotherFolder\\\\The File Name.PDF\");  \nSystem.out.println(f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf(\"\\\\\")+1));\n</code></pre>\n", "title": "How do I get the file name from a String containing the Absolute file path?", "tags": ["java", "file", "filenames", "filepath"], "link": "http://stackoverflow.com/questions/14526260/how-do-i-get-the-file-name-from-a-string-containing-the-absolute-file-path/14526289#14526289", "question_id": 14526260, "answer_id": 14526289}, {"body": "<p>For those looking for a general strategy for reading and writing a string to file:</p>\n\n<p><strong>First, get a file object</strong></p>\n\n<p>You'll need the storage path. For the internal storage, use:</p>\n\n<pre><code>File path = context.getFilesDir();\n</code></pre>\n\n<p>For the external storage (SD card), use:</p>\n\n<pre><code>File path = context.getExternalFilesDir(null);\n</code></pre>\n\n<p>Then create your file object:</p>\n\n<pre><code>File file = new File(path, \"my-file-name.txt\");\n</code></pre>\n\n<p><strong>Write a string to the file</strong></p>\n\n<pre><code>FileOutputStream stream = new FileOutputStream(file);\ntry {\n    stream.write(\"text-to-write\".getBytes());\n} finally {\n    stream.close();\n}\n</code></pre>\n\n<p>Or with Google Guava</p>\n\n<pre><code>Files.write(\"text-to-write\", file, \"UTF-8\");\n</code></pre>\n\n<p><strong>Read the file to a string</strong></p>\n\n<pre><code>int length = (int) file.length();\n\nbyte[] bytes = new byte[length];\n\nFileInputStream in = new FileInputStream(file);\ntry {\n    in.read(bytes);\n} finally {\n    in.close();\n}\n\nString contents = new String(bytes);   \n</code></pre>\n\n<p>Or if you are using Google Guava</p>\n\n<pre><code>String contents = Files.toString(file,\"UTF-8\");\n</code></pre>\n\n<p>For completeness I'll mention </p>\n\n<pre><code>String contents = new Scanner(file).useDelimiter(\"\\\\A\").next();\n</code></pre>\n\n<p>which requires no libraries, but benchmarks 50% - 400% slower than the other options (in various tests on my Nexus 5).</p>\n\n<p><strong>Notes</strong></p>\n\n<p>For each of these strategies, you'll be asked to catch an IOException.  </p>\n\n<p>The default character encoding on Android is UTF-8.  </p>\n\n<p>If you are using external storage, you'll need to add to your manifest either:</p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n</code></pre>\n\n<p>Write permission implies read permission, so you don't need both.</p>\n", "title": "How To Read/Write String From A File In Android", "tags": ["java", "android", "string", "file-io"], "link": "http://stackoverflow.com/questions/14376807/how-to-read-write-string-from-a-file-in-android/22092971#22092971", "question_id": 14376807, "answer_id": 22092971}, {"body": "<p><strong>Note: everything in this post is in the source of Java7-b147</strong></p>\n\n<p><code>Double.parseDouble()</code> goes into a Sun library (in <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/sun/misc/FloatingDecimal.java#FloatingDecimal.readJavaFormatString%28java.lang.String%29\"><code>sun.misc.FloatingDecimal</code></a>) the first important thing that happens is:</p>\n\n<pre><code>in = in.trim(); // don't fool around with white space.\n                // throws NullPointerException if null\n</code></pre>\n\n<p><code>Integer.parseInt()</code> is done manually in the <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/lang/Integer.java#Integer.parseInt%28java.lang.String%2Cint%29\"><code>Integer</code></a> class. The first important thing that happens is:</p>\n\n<pre><code>if (s == null) {\n    throw new NumberFormatException(\"null\");\n}\n</code></pre>\n\n<p>I would guess there are two different authors.</p>\n", "title": "Why do Double.parseDouble(null) and Integer.parseInt(null) throw different exceptions?", "tags": ["java", "exception", "nullpointerexception", "numberformatexception"], "link": "http://stackoverflow.com/questions/16324831/why-do-double-parsedoublenull-and-integer-parseintnull-throw-different-excep/16324963#16324963", "question_id": 16324831, "answer_id": 16324963}, {"body": "<h2>getFields()</h2>\n\n<p>All the <code>public</code> fields up the entire class hierarchy.</p>\n\n<h2>getDeclaredFields()</h2>\n\n<p>All the fields, regardless of their accessibility but <strong>only for the current class, not any base classes that the current class might be inheriting from.</strong></p>\n\n<h3>To get all the fields up the hierarchy</h3>\n\n<p>I have written the following function:</p>\n\n<pre><code>public static Iterable&lt;Field&gt; getFieldsUpTo(@Nonnull Class&lt;?&gt; startClass, \n                                   @Nullable Class&lt;?&gt; exclusiveParent) {\n\n   List&lt;Field&gt; currentClassFields = Lists.newArrayList(startClass.getDeclaredFields());\n   Class&lt;?&gt; parentClass = startClass.getSuperclass();\n\n   if (parentClass != null &amp;&amp; \n          (exclusiveParent == null || !(parentClass.equals(exclusiveParent)))) {\n     List&lt;Field&gt; parentClassFields = \n         (List&lt;Field&gt;) getFieldsUpTo(parentClass, exclusiveParent);\n     currentClassFields.addAll(parentClassFields);\n   }\n\n   return currentClassFields;\n}\n</code></pre>\n\n<p>The <code>exclusiveParent</code> class is provided to prevent the retrieval of fields from <code>Object</code>. If may be <code>null</code> if you DO want the <code>Object</code> fields.</p>\n\n<p>To claify, <code>Lists.newArrayList</code> comes from Guava.</p>\n\n<h3>Update</h3>\n\n<p>FYI, the above code is published on GitHub in my <a href=\"https://github.com/dancerjohn/LibEx\">LibEx</a> project in <a href=\"https://github.com/dancerjohn/LibEx/blob/master/libex/src/main/java/org/libex/reflect/ReflectionUtils.java\">ReflectionUtils</a>.</p>\n", "title": "What is the difference between getFields and getDeclaredFields in Java reflection", "tags": ["java", "reflection"], "link": "http://stackoverflow.com/questions/16966629/what-is-the-difference-between-getfields-and-getdeclaredfields-in-java-reflectio/16966699#16966699", "question_id": 16966629, "answer_id": 16966699}, {"body": "<p>As already mentioned, <code>Class.getDeclaredField(String)</code> only looks at the fields from the <code>Class</code> in which you call it.</p>\n\n<p>If you want to search a <code>Field</code> in the <code>Class</code> hierarchy, you can use this simple function:</p>\n\n<pre><code>/**\n * Returns the first {@link Field} in the hierarchy for the specified name\n */\npublic static Field getField(Class&lt;?&gt; clazz, String name) {\n    Field field = null;\n    while (clazz != null &amp;&amp; field == null) {\n        try {\n            field = clazz.getDeclaredField(name);\n        } catch (Exception e) {\n        }\n        clazz = clazz.getSuperclass();\n    }\n    return field;\n}\n</code></pre>\n\n<p>This is useful to find a <code>private</code> field from a superclass, for example. Also, if you want to modify its value, you can use it like this:</p>\n\n<pre><code>/**\n * Sets {@code value} to the first {@link Field} in the {@code object} hierarchy, for the specified name\n */\npublic static void setField(Object object, String fieldName, Object value) throws Exception {\n    Field field = getField(object.getClass(), fieldName);\n    field.setAccessible(true);\n    field.set(object, value);\n}\n</code></pre>\n", "title": "What is the difference between getFields and getDeclaredFields in Java reflection", "tags": ["java", "reflection"], "link": "http://stackoverflow.com/questions/16966629/what-is-the-difference-between-getfields-and-getdeclaredfields-in-java-reflectio/37332884#37332884", "question_id": 16966629, "answer_id": 37332884}, {"body": "<p><code>public Field[] getFields() throws SecurityException</code></p>\n\n<p>Returns an array containing Field objects reflecting all the <strong><em>accessible public fields</em></strong> of the class or interface represented by this Class object. The elements in the array returned are not sorted and are not in any particular order. This method returns an array of length 0 if the class or interface has no accessible public fields, or if it represents an array class, a primitive type, or void.</p>\n\n<p>Specifically, if this Class object represents a class, this method returns <strong><em>the public fields of this class and of all its superclasses.</em></strong> If this Class object represents an interface, this method returns the fields of this interface and of all its superinterfaces.</p>\n\n<p>The implicit length field for array class is not reflected by this method. User code should use the methods of class Array to manipulate arrays.</p>\n\n<p><br/></p>\n\n<p><code>public Field[] getDeclaredFields() throws SecurityException</code></p>\n\n<p>Returns an array of Field objects reflecting all <strong><em>the fields declared by the class</em></strong> or interface represented by this Class object. This <strong><em>includes public, protected, default (package) access, and private</em></strong> fields, but <strong><em>excludes inherited</em></strong> fields. The elements in the array returned are not sorted and are not in any particular order. This method returns an array of length 0 if the class or interface declares no fields, or if this Class object represents a primitive type, an array class, or void.</p>\n\n<p><br/></p>\n\n<p>And what if I need all fields from all parent classes?\nSome code is needed, e.g. from <a href=\"http://stackoverflow.com/a/35103361/755804\">http://stackoverflow.com/a/35103361/755804</a>:</p>\n\n<pre><code>public static List&lt;Field&gt; getAllModelFields(Class aClass) {\n    List&lt;Field&gt; fields = new ArrayList&lt;&gt;();\n    do {\n        Collections.addAll(fields, aClass.getDeclaredFields());\n        aClass = aClass.getSuperclass();\n    } while (aClass != null);\n    return fields;\n}\n</code></pre>\n", "title": "What is the difference between getFields and getDeclaredFields in Java reflection", "tags": ["java", "reflection"], "link": "http://stackoverflow.com/questions/16966629/what-is-the-difference-between-getfields-and-getdeclaredfields-in-java-reflectio/37916809#37916809", "question_id": 16966629, "answer_id": 37916809}, {"body": "<p>1) There are many examples on the Internet and on StackOverflow about the particular issue with generics and varargs. Basically, it's when you have a variable number of arguments of a type-parameter type:</p>\n\n<pre><code>void foo(T... args);\n</code></pre>\n\n<p>In Java, varargs are a syntactic sugar that undergoes a simple \"re-writing\" at compile-time: a varargs parameter of type <code>X...</code> is converted into a parameter of type <code>X[]</code>; and every time a call is made to this varargs method, the compiler collects all of the \"variable arguments\" that goes in the varargs parameter, and creates an array just like <code>new X[] { ...(arguments go here)... }</code>.</p>\n\n<p>This works well when the varargs type is concrete like <code>String...</code>. When it's a type variable like <code>T...</code>, it also works when <code>T</code> is known to be a concrete type for that call. e.g. if the method above were part of a class <code>Foo&lt;T&gt;</code>, and you have a <code>Foo&lt;String&gt;</code> reference, then calling <code>foo</code> on it would be okay because we know <code>T</code> is <code>String</code> at that point in the code.</p>\n\n<p>However, it does not work when the \"value\" of <code>T</code> is another type parameter. In Java, it is impossible to create an array of a type-parameter component type (<code>new T[] { ... }</code>). So Java instead uses <code>new Object[] { ... }</code> (here <code>Object</code> is the upper bound of <code>T</code>; if there upper bound were something different, it would be that instead of <code>Object</code>), and then gives you a compiler warning.</p>\n\n<p>So what is wrong with creating <code>new Object[]</code> instead of <code>new T[]</code> or whatever? Well, arrays in Java know their component type at runtime. Thus, the passed array object will have the wrong component type at runtime.</p>\n\n<p>For probably the most common use of varargs, simply to iterate over the elements, this is no problem (you don't care about the runtime type of the array), so this is safe:</p>\n\n<pre><code>@SafeVarargs\nvoid foo(T... args) {\n    for (T x : args) {\n        // do stuff with x\n    }\n}\n</code></pre>\n\n<p>However, for anything that depends on the runtime component type of the passed array, it will not be safe. Here is a simple example of something that is unsafe and crashes:</p>\n\n<pre><code>class UnSafeVarargs\n{\n  static &lt;T&gt; T[] asArray(T... args) {\n    return args;\n  }\n\n  static &lt;T&gt; T[] arrayOfTwo(T a, T b) {\n    return asArray(a, b);\n  }\n\n  public static void main(String[] args) {\n    String[] bar = arrayOfTwo(\"hi\", \"mom\");\n  }\n}\n</code></pre>\n\n<p>The problem here is that we depend on the type of <code>args</code> to be <code>T[]</code> in order to return it as <code>T[]</code>. But actually the type of the argument at runtime is not an instance of <code>T[]</code>.</p>\n\n<p>3) If your method has an argument of type <code>T...</code> (where T is any type parameter), then:</p>\n\n<ul>\n<li>Safe: If your method only depends on the fact that the elements of the array are instances of <code>T</code></li>\n<li>Unsafe: If it depends on the fact that the array is an instance of <code>T[]</code></li>\n</ul>\n\n<p>Things that depend on the runtime type of the array include: returning it as type <code>T[]</code>, passing it as an argument to a parameter of type <code>T[]</code>, getting the array type using <code>.getClass()</code>, passing it to methods that depend on the runtime type of the array, like <code>List.toArray()</code> and <code>Arrays.copyOf()</code>, etc.</p>\n\n<p>2) The distinction I mentioned above is too complicated to be easily distinguished automatically.</p>\n", "title": "Java SafeVarargs annotation, does a standard or best practice exist?", "tags": ["java", "java-7", "varargs"], "link": "http://stackoverflow.com/questions/14231037/java-safevarargs-annotation-does-a-standard-or-best-practice-exist/14252221#14252221", "question_id": 14231037, "answer_id": 14252221}, {"body": "<p>Quite simple:</p>\n\n<pre><code>new File(\"/Path/To/File/or/Directory\").exists();\n</code></pre>\n\n<p>And if you want to be certain it is a directory:</p>\n\n<pre><code>File f = new File(\"/Path/To/File/or/Directory\");\nif (f.exists() &amp;&amp; f.isDirectory()) {\n   ...\n}\n</code></pre>\n", "title": "How to check if a folder exists", "tags": ["java"], "link": "http://stackoverflow.com/questions/15571496/how-to-check-if-a-folder-exists/15571524#15571524", "question_id": 15571496, "answer_id": 15571524}, {"body": "<p>Try:</p>\n\n<pre><code>System.getProperty(\"os.name\");\n</code></pre>\n\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#getProperties%28%29\">http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#getProperties%28%29</a></p>\n", "title": "Detecting Windows or Linux?", "tags": ["java", "linux", "windows", "platform-detection"], "link": "http://stackoverflow.com/questions/14288185/detecting-windows-or-linux/14288297#14288297", "question_id": 14288185, "answer_id": 14288297}, {"body": "<p>HashMap does not allow primitive data types as arguments. It can only accept objects so </p>\n\n<pre><code>HashMap&lt;int, myObject&gt; myMap = new HashMap&lt;int, myObject&gt;();\n</code></pre>\n\n<p>will not work.</p>\n\n<p>You have to change the declaration to </p>\n\n<pre><code>HashMap&lt;Integer, myObject&gt; myMap = new HashMap&lt;Integer, myObject&gt;();\n</code></pre>\n\n<p>so even when you do the following</p>\n\n<pre><code>myMap.put(2,myObject);\n</code></pre>\n\n<p>The primitive data type is autoboxed to an Integer object. </p>\n\n<pre><code>8 (int) === boxing ===&gt; 8 (Integer)\n</code></pre>\n\n<p>You can read more on autoboxing here <a href=\"http://docs.oracle.com/javase/tutorial/java/data/autoboxing.html\" rel=\"nofollow\">http://docs.oracle.com/javase/tutorial/java/data/autoboxing.html</a></p>\n", "title": "HashMap and int as key", "tags": ["java", "hashmap"], "link": "http://stackoverflow.com/questions/16148575/hashmap-and-int-as-key/16149160#16149160", "question_id": 16148575, "answer_id": 16149160}]}