O	0	8	Question
O	8	9	-
O	9	17	15182496

O	18	21	The
O	22	31	following
O	32	37	print
O	38	47	statement
O	48	53	would
O	54	59	print
O	60	61	"
O	61	66	hello
O	67	72	world
O	72	73	"
O	73	74	.

O	75	80	Could
O	81	87	anyone
O	88	95	explain
O	96	100	this
O	100	101	?

B-api_mention	102	108	System
I-api_mention	108	109	.
I-api_mention	109	112	out
I-api_mention	112	113	.
I-api_mention	113	120	println
I-api_mention	120	121	(
I-api_mention	121	125	args
I-api_mention	125	126	)
O	126	127	;
O	128	131	And
B-api_mention	132	144	randomString
I-api_mention	144	145	(
I-api_mention	145	149	args
I-api_mention	149	150	)
O	151	156	looks
O	157	161	like
O	162	166	this
O	166	167	:
O	168	169	#
O	169	172	pre

O	174	182	Question
O	182	183	-
O	183	191	15621083

O	192	193	I
O	194	196	am
O	197	204	working
O	205	207	on
O	208	212	some
O	213	217	Java
O	218	222	code
O	223	228	which
O	229	234	needs
O	235	237	to
O	238	240	be
O	241	247	highly
O	248	257	optimized
O	258	260	as
O	261	263	it
O	264	268	will
O	269	272	run
O	273	275	in
O	276	279	hot
O	280	289	functions
O	290	294	that
O	295	298	are
O	299	306	invoked
O	307	309	at
O	310	314	many
O	315	321	points
O	322	324	in
O	325	327	my
O	328	332	main
O	333	340	program
O	341	346	logic
O	346	347	.

O	348	352	Part
O	353	355	of
O	356	360	this
O	361	365	code
O	366	374	involves
O	375	386	multiplying
O	387	393	double
O	394	403	variables
O	404	406	by
O	407	409	10
O	410	416	raised
O	417	419	to
O	420	429	arbitrary
O	430	433	non
O	433	434	-
O	434	442	negative
O	443	446	int
O	447	455	exponent
O	456	457	s
O	457	458	.

O	459	462	One
O	463	467	fast
O	468	471	way
O	472	473	(
O	473	477	edit
O	477	478	:
O	479	482	but
O	483	486	not
O	487	490	the
O	491	498	fastest
O	499	507	possible
O	507	508	,
O	509	512	see
O	513	519	Update
O	520	521	2
O	522	527	below
O	527	528	)
O	529	531	to
O	532	535	get
O	536	539	the
O	540	550	multiplied
O	551	556	value
O	557	559	is
O	560	562	to
O	563	569	switch
O	570	572	on
O	573	576	the
O	577	585	exponent
O	586	587	:
O	588	589	#
O	589	592	pre
O	593	596	The
O	597	606	commented
O	607	615	ellipses
O	616	621	above
O	622	630	indicate
O	631	635	that
O	636	639	the
O	640	644	case
O	645	648	int
O	649	658	constants
O	659	667	continue
O	668	680	incrementing
O	681	683	by
O	684	685	1
O	685	686	,
O	687	689	so
O	690	695	there
O	696	699	are
O	700	706	really
O	707	709	19
O	710	714	case
O	715	716	s
O	717	719	in
O	720	723	the
O	724	729	above
O	730	734	code
O	735	742	snippet
O	742	743	.

O	744	749	Since
O	750	751	I
O	752	756	wasn
O	756	757	'
O	757	758	t
O	759	763	sure
O	764	771	whether
O	772	773	I
O	774	779	would
O	780	788	actually
O	789	793	need
O	794	797	all
O	798	801	the
O	802	808	powers
O	809	811	of
O	812	814	10
O	815	817	in
O	818	822	case
O	823	833	statements
O	834	836	10
O	837	841	thru
O	842	844	18
O	845	846	,
O	847	848	I
O	849	852	ran
O	853	857	some
O	858	873	microbenchmarks
O	874	883	comparing
O	884	887	the
O	888	892	time
O	893	895	to
O	896	904	complete
O	905	907	10
O	908	915	million
O	916	926	operations
O	927	931	with
O	932	936	this
O	937	943	switch
O	944	953	statement
O	954	960	versus
O	961	962	a
O	963	969	switch
O	970	974	with
O	975	979	only
O	980	984	case
O	985	986	s
O	987	988	0
O	989	993	thru
O	994	995	9
O	996	997	(
O	997	1001	with
O	1002	1005	the
O	1006	1014	exponent
O	1015	1022	limited
O	1023	1025	to
O	1026	1027	9
O	1028	1030	or
O	1031	1035	less
O	1036	1038	to
O	1039	1044	avoid
O	1045	1053	breaking
O	1054	1057	the
O	1058	1063	pared
O	1063	1064	-
O	1064	1068	down
O	1069	1075	switch
O	1076	1077	)
O	1077	1078	.

O	1079	1080	I
O	1081	1084	got
O	1085	1088	the
O	1089	1095	rather
O	1096	1106	surprising
O	1107	1108	(
O	1108	1110	to
O	1111	1113	me
O	1113	1114	,
O	1115	1117	at
O	1118	1123	least
O	1123	1124	!
O	1124	1125	)
O	1126	1132	result
O	1133	1137	that
O	1138	1141	the
O	1142	1148	longer
O	1149	1155	switch
O	1156	1160	with
O	1161	1165	more
O	1166	1170	case
O	1171	1181	statements
O	1182	1190	actually
O	1191	1194	ran
O	1195	1201	faster
O	1201	1202	.

O	1203	1205	On
O	1206	1207	a
O	1208	1212	lark
O	1212	1213	,
O	1214	1215	I
O	1216	1221	tried
O	1222	1228	adding
O	1229	1233	even
O	1234	1238	more
O	1239	1243	case
O	1244	1245	s
O	1246	1251	which
O	1252	1256	just
O	1257	1265	returned
O	1266	1271	dummy
O	1272	1278	values
O	1278	1279	,
O	1280	1283	and
O	1284	1289	found
O	1290	1294	that
O	1295	1296	I
O	1297	1302	could
O	1303	1306	get
O	1307	1310	the
O	1311	1317	switch
O	1318	1320	to
O	1321	1324	run
O	1325	1329	even
O	1330	1336	faster
O	1337	1341	with
O	1342	1348	around
O	1349	1351	22
O	1351	1352	-
O	1352	1354	27
O	1355	1363	declared
O	1364	1368	case
O	1369	1370	s
O	1371	1372	(
O	1372	1376	even
O	1377	1383	though
O	1384	1389	those
O	1390	1395	dummy
O	1396	1401	cases
O	1402	1405	are
O	1406	1411	never
O	1412	1420	actually
O	1421	1424	hit
O	1425	1430	while
O	1431	1434	the
O	1435	1439	code
O	1440	1442	is
O	1443	1450	running
O	1450	1451	)
O	1451	1452	.

O	1453	1454	(
O	1454	1459	Again
O	1459	1460	,
O	1461	1465	case
O	1466	1467	s
O	1468	1472	were
O	1473	1478	added
O	1479	1481	in
O	1482	1483	a
O	1484	1494	contiguous
O	1495	1502	fashion
O	1503	1505	by
O	1506	1518	incrementing
O	1519	1522	the
O	1523	1528	prior
O	1529	1533	case
O	1534	1542	constant
O	1543	1545	by
O	1546	1547	1
O	1548	1549	.
O	1549	1550	)
O	1551	1556	These
O	1557	1566	execution
O	1567	1571	time
O	1572	1583	differences
O	1584	1587	are
O	1588	1591	not
O	1592	1596	very
O	1597	1608	significant
O	1608	1609	:
O	1610	1613	for
O	1614	1615	a
O	1616	1622	random
O	1623	1631	exponent
O	1632	1639	between
O	1640	1641	0
O	1642	1645	and
O	1646	1648	10
O	1649	1650	,
O	1651	1654	the
O	1655	1660	dummy
O	1661	1667	padded
O	1668	1674	switch
O	1675	1684	statement
O	1685	1693	finishes
O	1694	1696	10
O	1697	1704	million
O	1705	1715	executions
O	1716	1718	in
O	1719	1720	1
O	1720	1721	.
O	1721	1723	49
O	1724	1728	secs
O	1729	1735	versus
O	1736	1737	1
O	1737	1738	.
O	1738	1740	54
O	1741	1745	secs
O	1746	1749	for
O	1750	1753	the
O	1754	1762	unpadded
O	1763	1770	version
O	1770	1771	,
O	1772	1775	for
O	1776	1777	a
O	1778	1783	grand
O	1784	1789	total
O	1790	1797	savings
O	1798	1800	of
O	1801	1804	5ns
O	1805	1808	per
O	1809	1818	execution
O	1818	1819	.

O	1820	1822	So
O	1822	1823	,
O	1824	1827	not
O	1828	1831	the
O	1832	1836	kind
O	1837	1839	of
O	1840	1845	thing
O	1846	1850	that
O	1851	1856	makes
O	1857	1866	obsessing
O	1867	1871	over
O	1872	1879	padding
O	1880	1883	out
O	1884	1885	a
O	1886	1892	switch
O	1893	1902	statement
O	1903	1908	worth
O	1909	1912	the
O	1913	1919	effort
O	1920	1924	from
O	1925	1927	an
O	1928	1940	optimization
O	1941	1951	standpoint
O	1951	1952	.

O	1953	1956	But
O	1957	1958	I
O	1959	1964	still
O	1965	1969	just
O	1970	1974	find
O	1975	1977	it
O	1978	1985	curious
O	1986	1989	and
O	1990	1997	counter
O	1997	1998	-
O	1998	2007	intuitive
O	2008	2012	that
O	2013	2014	a
O	2015	2021	switch
O	2022	2027	doesn
O	2027	2028	'
O	2028	2029	t
O	2030	2036	become
O	2037	2043	slower
O	2044	2045	(
O	2045	2047	or
O	2048	2055	perhaps
O	2056	2058	at
O	2059	2063	best
O	2064	2072	maintain
O	2073	2081	constant
O	2082	2083	O
O	2083	2084	(
O	2084	2085	1
O	2085	2086	)
O	2087	2091	time
O	2091	2092	)
O	2093	2095	to
O	2096	2103	execute
O	2104	2106	as
O	2107	2111	more
O	2112	2116	case
O	2117	2118	s
O	2119	2122	are
O	2123	2128	added
O	2129	2131	to
O	2132	2134	it
O	2134	2135	.

O	2136	2137	#
O	2137	2140	img
O	2141	2146	These
O	2147	2150	are
O	2151	2154	the
O	2155	2162	results
O	2163	2164	I
O	2165	2173	obtained
O	2174	2178	from
O	2179	2186	running
O	2187	2191	with
O	2192	2199	various
O	2200	2206	limits
O	2207	2209	on
O	2210	2213	the
O	2214	2222	randomly
O	2222	2223	-
O	2223	2232	generated
O	2233	2241	exponent
O	2242	2248	values
O	2248	2249	.

O	2250	2251	I
O	2252	2256	didn
O	2256	2257	'
O	2257	2258	t
O	2259	2266	include
O	2267	2270	the
O	2271	2278	results
O	2279	2282	all
O	2283	2286	the
O	2287	2290	way
O	2291	2295	down
O	2296	2298	to
O	2299	2300	1
O	2301	2304	for
O	2305	2308	the
O	2309	2317	exponent
O	2318	2323	limit
O	2323	2324	,
O	2325	2328	but
O	2329	2332	the
O	2333	2340	general
O	2341	2346	shape
O	2347	2349	of
O	2350	2353	the
O	2354	2359	curve
O	2360	2367	remains
O	2368	2371	the
O	2372	2376	same
O	2376	2377	,
O	2378	2382	with
O	2383	2384	a
O	2385	2390	ridge
O	2391	2397	around
O	2398	2401	the
O	2402	2404	12
O	2404	2405	-
O	2405	2407	17
O	2408	2412	case
O	2413	2417	mark
O	2417	2418	,
O	2419	2422	and
O	2423	2424	a
O	2425	2431	valley
O	2432	2439	between
O	2440	2442	18
O	2442	2443	-
O	2443	2445	28
O	2445	2446	.

O	2447	2450	All
O	2451	2456	tests
O	2457	2461	were
O	2462	2465	run
O	2466	2468	in
O	2469	2484	JUnitBenchmarks
O	2485	2490	using
O	2491	2497	shared
O	2498	2508	containers
O	2509	2512	for
O	2513	2516	the
O	2517	2523	random
O	2524	2530	values
O	2531	2533	to
O	2534	2540	ensure
O	2541	2550	identical
O	2551	2558	testing
O	2559	2565	inputs
O	2565	2566	.

O	2567	2568	I
O	2569	2573	also
O	2574	2577	ran
O	2578	2581	the
O	2582	2587	tests
O	2588	2592	both
O	2593	2595	in
O	2596	2601	order
O	2602	2606	from
O	2607	2614	longest
O	2615	2621	switch
O	2622	2631	statement
O	2632	2634	to
O	2635	2643	shortest
O	2643	2644	,
O	2645	2648	and
O	2649	2653	vice
O	2653	2654	-
O	2654	2659	versa
O	2659	2660	,
O	2661	2663	to
O	2664	2667	try
O	2668	2671	and
O	2672	2681	eliminate
O	2682	2685	the
O	2686	2697	possibility
O	2698	2700	of
O	2701	2709	ordering
O	2709	2710	-
O	2710	2717	related
O	2718	2722	test
O	2723	2731	problems
O	2731	2732	.

O	2733	2734	I
O	2734	2735	'
O	2735	2737	ve
O	2738	2741	put
O	2742	2744	my
O	2745	2752	testing
O	2753	2757	code
O	2758	2760	up
O	2761	2763	on
O	2764	2765	a
O	2766	2772	github
O	2773	2777	repo
O	2778	2780	if
O	2781	2787	anyone
O	2788	2793	wants
O	2794	2796	to
O	2797	2800	try
O	2801	2803	to
O	2804	2813	reproduce
O	2814	2819	these
O	2820	2827	results
O	2827	2828	.

O	2829	2831	So
O	2831	2832	,
O	2833	2837	what
O	2837	2838	'
O	2838	2839	s
O	2840	2845	going
O	2846	2848	on
O	2849	2853	here
O	2853	2854	?

O	2855	2859	Some
O	2860	2868	vagaries
O	2869	2871	of
O	2872	2874	my
O	2875	2887	architecture
O	2888	2890	or
O	2891	2896	micro
O	2896	2897	-
O	2897	2906	benchmark
O	2907	2919	construction
O	2919	2920	?

O	2921	2923	Or
O	2924	2926	is
O	2927	2930	the
O	2931	2935	Java
O	2936	2942	switch
O	2943	2949	really
O	2950	2951	a
O	2952	2958	little
O	2959	2965	faster
O	2966	2968	to
O	2969	2976	execute
O	2977	2979	in
O	2980	2983	the
O	2984	2986	18
O	2987	2989	to
O	2990	2992	28
O	2993	2997	case
O	2998	3003	range
O	3004	3008	than
O	3009	3011	it
O	3012	3014	is
O	3015	3019	from
O	3020	3022	11
O	3023	3025	up
O	3026	3028	to
O	3029	3031	17
O	3032	3033	?

O	3034	3040	github
O	3041	3045	test
O	3046	3050	repo
O	3051	3052	"
O	3052	3058	switch
O	3058	3059	-
O	3059	3069	experiment
O	3069	3070	"
O	3071	3077	UPDATE
O	3077	3078	:
O	3079	3080	I
O	3081	3088	cleaned
O	3089	3091	up
O	3092	3095	the
O	3096	3108	benchmarking
O	3109	3116	library
O	3117	3122	quite
O	3123	3124	a
O	3125	3128	bit
O	3129	3132	and
O	3133	3138	added
O	3139	3140	a
O	3141	3145	text
O	3146	3150	file
O	3151	3153	in
O	3154	3155	/
O	3155	3162	results
O	3163	3167	with
O	3168	3172	some
O	3173	3179	output
O	3180	3186	across
O	3187	3188	a
O	3189	3194	wider
O	3195	3200	range
O	3201	3203	of
O	3204	3212	possible
O	3213	3221	exponent
O	3222	3228	values
O	3228	3229	.

O	3230	3231	I
O	3232	3236	also
O	3237	3242	added
O	3243	3245	an
O	3246	3252	option
O	3253	3255	in
O	3256	3259	the
O	3260	3267	testing
O	3268	3272	code
O	3273	3276	not
O	3277	3279	to
O	3280	3285	throw
O	3286	3288	an
B-api_mention	3289	3298	Exception
O	3299	3303	from
O	3304	3311	default
O	3312	3313	,
O	3314	3317	but
O	3318	3322	this
O	3323	3328	doesn
O	3328	3329	'
O	3329	3330	t
O	3331	3337	appear
O	3338	3340	to
O	3341	3347	affect
O	3348	3351	the
O	3352	3359	results
O	3359	3360	.

O	3361	3367	UPDATE
O	3368	3369	2
O	3369	3370	:
O	3371	3376	Found
O	3377	3381	some
O	3382	3388	pretty
O	3389	3393	good
O	3394	3404	discussion
O	3405	3407	of
O	3408	3412	this
O	3413	3418	issue
O	3419	3423	from
O	3424	3428	back
O	3429	3431	in
O	3432	3436	2009
O	3437	3439	on
O	3440	3443	the
O	3444	3448	xkcd
O	3449	3454	forum
O	3455	3459	here
O	3459	3460	:
O	3461	3462	#
O	3462	3463	a
O	3464	3465	.

O	3466	3469	The
O	3470	3472	OP
O	3472	3473	'
O	3473	3474	s
O	3475	3485	discussion
O	3486	3488	of
O	3489	3494	using
B-api_mention	3495	3500	Array
I-api_mention	3500	3501	.
I-api_mention	3501	3513	binarySearch
I-api_mention	3513	3514	(
I-api_mention	3514	3518	args
I-api_mention	3518	3519	)
O	3520	3524	gave
O	3525	3527	me
O	3528	3531	the
O	3532	3536	idea
O	3537	3540	for
O	3541	3542	a
O	3543	3549	simple
O	3550	3555	array
O	3555	3556	-
O	3556	3561	based
O	3562	3576	implementation
O	3577	3579	of
O	3580	3583	the
O	3584	3598	exponentiation
O	3599	3606	pattern
O	3607	3612	above
O	3612	3613	.

O	3614	3619	There
O	3619	3620	'
O	3620	3621	s
O	3622	3624	no
O	3625	3629	need
O	3630	3633	for
O	3634	3637	the
O	3638	3644	binary
O	3645	3651	search
O	3652	3657	since
O	3658	3659	I
O	3660	3664	know
O	3665	3669	what
O	3670	3673	the
O	3674	3681	entries
O	3682	3684	in
O	3685	3688	the
O	3689	3694	array
O	3695	3698	are
O	3698	3699	.

O	3700	3702	It
O	3703	3710	appears
O	3711	3713	to
O	3714	3717	run
O	3718	3723	about
O	3724	3725	3
O	3726	3731	times
O	3732	3738	faster
O	3739	3743	than
O	3744	3749	using
O	3750	3756	switch
O	3757	3758	,
O	3759	3768	obviously
O	3769	3771	at
O	3772	3775	the
O	3776	3783	expense
O	3784	3786	of
O	3787	3791	some
O	3792	3794	of
O	3795	3798	the
O	3799	3806	control
O	3807	3811	flow
O	3812	3816	that
O	3817	3823	switch
O	3824	3831	affords
O	3831	3832	.

O	3833	3837	That
O	3838	3842	code
O	3843	3846	has
O	3847	3851	been
O	3852	3857	added
O	3858	3860	to
O	3861	3864	the
O	3865	3871	github
O	3872	3876	repo
O	3877	3881	also
O	3881	3882	.

O	3884	3892	Question
O	3892	3893	-
O	3893	3901	16635398

O	3902	3907	Which
O	3908	3910	of
O	3911	3914	the
O	3915	3924	following
O	3925	3927	is
O	3928	3934	better
O	3935	3943	practice
O	3944	3946	in
O	3947	3951	Java
O	3952	3953	8
O	3953	3954	?

O	3955	3959	Java
O	3960	3961	8
O	3961	3962	:
O	3963	3968	joins
B-api_mention	3968	3969	.
I-api_mention	3969	3976	forEach
I-api_mention	3976	3977	(
I-api_mention	3977	3981	args
I-api_mention	3981	3982	)
O	3982	3983	;
O	3984	3988	Java
O	3989	3990	7
O	3990	3991	:
O	3992	3993	#
O	3993	3996	pre
O	3997	3998	I
O	3999	4003	have
O	4004	4008	lots
O	4009	4011	of
O	4012	4015	for
O	4016	4021	loops
O	4022	4026	that
O	4027	4032	could
O	4033	4035	be
O	4036	4037	"
O	4037	4047	simplified
O	4047	4048	"
O	4049	4053	with
O	4054	4061	lambdas
O	4061	4062	,
O	4063	4066	but
O	4067	4069	is
O	4070	4075	there
O	4076	4082	really
O	4083	4086	any
O	4087	4096	advantage
O	4097	4099	of
O	4100	4105	using
O	4106	4110	them
O	4111	4120	including
O	4121	4132	performance
O	4133	4136	and
O	4137	4148	readability
O	4148	4149	?

O	4150	4154	EDIT
O	4155	4156	I
O	4156	4157	'
O	4157	4159	ll
O	4160	4164	also
O	4165	4171	extend
O	4172	4176	this
O	4177	4185	question
O	4186	4188	to
O	4189	4195	longer
O	4196	4203	methods
O	4204	4205	-
O	4206	4207	I
O	4208	4212	know
O	4213	4217	that
O	4218	4221	you
O	4222	4226	cant
O	4227	4233	return
O	4234	4236	or
O	4237	4242	break
O	4243	4246	the
O	4247	4253	parent
O	4254	4262	function
O	4263	4267	from
O	4268	4269	a
O	4270	4276	lambda
O	4277	4280	and
O	4281	4285	this
O	4286	4292	should
O	4293	4295	be
O	4296	4305	mentioned
O	4306	4308	to
O	4309	4311	if
O	4312	4316	they
O	4317	4320	are
O	4321	4329	compared
O	4329	4330	,
O	4331	4334	but
O	4335	4337	is
O	4338	4343	there
O	4344	4352	anything
O	4353	4357	else
O	4358	4360	to
O	4361	4363	be
O	4364	4374	considered
O	4374	4375	?

O	4377	4385	Question
O	4385	4386	-
O	4386	4394	14636178

O	4395	4396	I
O	4397	4399	am
O	4400	4406	trying
O	4407	4409	to
O	4410	4413	use
O	4414	4417	the
B-api_mention	4418	4421	org
I-api_mention	4421	4422	.
I-api_mention	4422	4437	springframework
I-api_mention	4437	4438	.
I-api_mention	4438	4441	orm
I-api_mention	4441	4442	.
I-api_mention	4442	4445	jdo
I-api_mention	4445	4446	.
I-api_mention	4446	4492	TransactionAwarePersistenceManagerFactoryProxy
O	4493	4495	in
O	4496	4498	my
O	4499	4505	Spring
O	4506	4513	project
O	4513	4514	,
O	4515	4518	but
O	4519	4520	I
O	4521	4523	am
O	4524	4527	not
O	4528	4532	sure
O	4533	4536	how
O	4537	4539	to
O	4540	4543	use
O	4544	4546	it
O	4547	4549	or
O	4550	4557	whether
O	4558	4560	it
O	4560	4561	'
O	4561	4562	s
O	4563	4570	exactly
O	4571	4575	what
O	4576	4577	I
O	4578	4580	am
O	4581	4588	looking
O	4589	4592	for
O	4592	4593	.

O	4594	4595	I
O	4596	4603	realize
O	4604	4606	it
O	4607	4610	can
O	4611	4615	help
O	4616	4620	make
O	4621	4623	my
O	4624	4628	DAOs
O	4629	4633	work
O	4634	4638	with
O	4639	4640	a
O	4641	4646	plain
O	4647	4650	JDO
B-api_mention	4651	4676	PersistenceManagerFactory
O	4677	4678	.

O	4679	4686	Another
O	4687	4695	question
O	4696	4698	is
O	4698	4699	:
O	4700	4704	what
O	4705	4712	happens
O	4713	4715	if
O	4716	4719	the
O	4720	4725	proxy
O	4726	4731	doesn
O	4731	4732	'
O	4732	4733	t
O	4734	4737	get
O	4738	4742	made
O	4743	4751	properly
O	4751	4752	?

O	4753	4756	Can
O	4757	4758	I
O	4759	4764	still
O	4765	4768	use
O	4769	4771	it
O	4772	4774	to
O	4775	4781	access
O	4782	4784	my
O	4785	4792	factory
O	4793	4795	to
O	4796	4802	create
O	4803	4804	a
O	4805	4816	transaction
O	4817	4822	aware
O	4823	4834	persistence
O	4835	4842	manager
O	4842	4843	?

O	4844	4846	If
O	4847	4850	the
O	4851	4857	object
O	4858	4865	managed
O	4866	4868	by
O	4869	4872	the
O	4873	4880	factory
O	4881	4883	is
O	4884	4885	a
O	4886	4895	singleton
O	4895	4896	,
O	4897	4901	does
O	4902	4906	this
O	4907	4913	change
O	4914	4920	things
O	4920	4921	?

O	4922	4925	Why
O	4926	4929	not
O	4930	4934	just
O	4935	4941	access
O	4942	4945	the
B-api_mention	4946	4971	PersistenceManagerFactory
O	4972	4980	directly
O	4980	4981	?

O	4982	4989	Perhaps
B-api_mention	4990	5020	PersistenceManagerFactoryUtils
I-api_mention	5020	5021	.
I-api_mention	5021	5042	getPersistenceManager
O	5043	5048	would
O	5049	5051	be
O	5052	5056	more
O	5057	5063	suited
O	5064	5066	to
O	5067	5069	my
O	5070	5075	needs
O	5075	5076	?

O	5077	5080	Can
B-api_mention	5081	5090	getObject
O	5091	5097	return
O	5098	5102	null
O	5102	5103	?

O	5105	5113	Question
O	5113	5114	-
O	5114	5122	14491966

O	5123	5124	I
O	5125	5129	made
O	5130	5131	a
O	5132	5137	class
O	5138	5144	called
B-api_mention	5145	5156	QuickRandom
O	5157	5158	,
O	5159	5162	and
O	5163	5166	its
O	5167	5170	job
O	5171	5173	is
O	5174	5176	to
O	5177	5184	produce
O	5185	5191	random
O	5192	5199	numbers
O	5200	5207	quickly
O	5207	5208	.

O	5209	5211	It
O	5211	5212	'
O	5212	5213	s
O	5214	5220	really
O	5221	5227	simple
O	5227	5228	:
O	5229	5233	just
O	5234	5238	take
O	5239	5242	the
O	5243	5246	old
O	5247	5252	value
O	5252	5253	,
O	5254	5262	multiply
O	5263	5265	by
O	5266	5267	a
O	5268	5274	double
O	5275	5276	,
O	5277	5280	and
O	5281	5285	take
O	5286	5289	the
O	5290	5297	decimal
O	5298	5302	part
O	5302	5303	.

O	5304	5308	Here
O	5309	5311	is
O	5312	5314	my
B-api_mention	5315	5326	QuickRandom
O	5327	5332	class
O	5333	5335	in
O	5336	5339	its
O	5340	5348	entirety
O	5348	5349	:
O	5350	5351	#
O	5351	5354	pre
O	5355	5358	And
O	5359	5363	here
O	5364	5366	is
O	5367	5370	the
O	5371	5375	code
O	5376	5377	I
O	5378	5383	wrote
O	5384	5386	to
O	5387	5391	test
O	5392	5394	it
O	5394	5395	:
O	5396	5397	#
O	5397	5400	pre
O	5401	5403	It
O	5404	5406	is
O	5407	5408	a
O	5409	5413	very
O	5414	5420	simple
O	5421	5430	algorithm
O	5431	5435	that
O	5436	5442	simply
O	5443	5453	multiplies
O	5454	5457	the
O	5458	5466	previous
O	5467	5473	double
O	5474	5476	by
O	5477	5478	a
O	5479	5480	"
O	5480	5485	magic
O	5486	5492	number
O	5492	5493	"
O	5494	5500	double
O	5500	5501	.

O	5502	5503	I
O	5504	5509	threw
O	5510	5512	it
O	5513	5521	together
O	5522	5528	pretty
O	5529	5536	quickly
O	5536	5537	,
O	5538	5540	so
O	5541	5542	I
O	5543	5548	could
O	5549	5557	probably
O	5558	5562	make
O	5563	5565	it
O	5566	5572	better
O	5572	5573	,
O	5574	5577	but
O	5578	5587	strangely
O	5587	5588	,
O	5589	5591	it
O	5592	5597	seems
O	5598	5600	to
O	5601	5603	be
O	5604	5611	working
O	5612	5616	fine
O	5616	5617	.

O	5618	5622	This
O	5623	5625	is
O	5626	5632	sample
O	5633	5639	output
O	5640	5642	of
O	5643	5646	the
O	5647	5656	commented
O	5656	5657	-
O	5657	5660	out
O	5661	5666	lines
O	5667	5669	in
O	5670	5673	the
O	5674	5678	main
O	5679	5685	method
O	5685	5686	:
O	5687	5688	#
O	5688	5691	pre
O	5692	5694	Hm
O	5694	5695	.

O	5696	5702	Pretty
O	5703	5709	random
O	5709	5710	.

O	5711	5713	In
O	5714	5718	fact
O	5718	5719	,
O	5720	5724	that
O	5725	5730	would
O	5731	5735	work
O	5736	5739	for
O	5740	5741	a
O	5742	5748	random
O	5749	5755	number
O	5756	5765	generator
O	5766	5768	in
O	5769	5770	a
O	5771	5775	game
O	5775	5776	.

O	5777	5781	Here
O	5782	5784	is
O	5785	5791	sample
O	5792	5798	output
O	5799	5801	of
O	5802	5805	the
O	5806	5809	non
O	5809	5810	-
O	5810	5819	commented
O	5820	5823	out
O	5824	5828	part
O	5828	5829	:
O	5830	5831	#
O	5831	5834	pre
O	5835	5838	Wow
O	5838	5839	!

O	5840	5842	It
O	5843	5851	performs
O	5852	5858	almost
O	5859	5860	4
O	5861	5866	times
O	5867	5873	faster
O	5874	5878	than
B-api_mention	5879	5883	Math
I-api_mention	5883	5884	.
I-api_mention	5884	5890	random
O	5891	5892	.

O	5893	5894	I
O	5895	5903	remember
O	5904	5911	reading
O	5912	5921	somewhere
O	5922	5926	that
B-api_mention	5927	5931	Math
I-api_mention	5931	5932	.
I-api_mention	5932	5938	random
O	5939	5943	used
B-api_mention	5944	5950	System
I-api_mention	5950	5951	.
I-api_mention	5951	5959	nanoTime
I-api_mention	5959	5960	(
I-api_mention	5960	5964	args
I-api_mention	5964	5965	)
O	5966	5969	and
O	5970	5974	tons
O	5975	5977	of
O	5978	5983	crazy
O	5984	5991	modulus
O	5992	5995	and
O	5996	6004	division
O	6005	6010	stuff
O	6010	6011	.

O	6012	6014	Is
O	6015	6019	that
O	6020	6026	really
O	6027	6036	necessary
O	6036	6037	?

O	6038	6040	My
O	6041	6050	algorithm
O	6051	6059	performs
O	6060	6061	a
O	6062	6065	lot
O	6066	6072	faster
O	6073	6076	and
O	6077	6079	it
O	6080	6085	seems
O	6086	6092	pretty
O	6093	6099	random
O	6099	6100	.

O	6101	6102	I
O	6103	6107	have
O	6108	6111	two
O	6112	6121	questions
O	6121	6122	:
O	6123	6124	#
O	6124	6126	li
O	6127	6129	Is
O	6130	6132	my
O	6133	6142	algorithm
O	6143	6144	"
O	6144	6148	good
O	6149	6155	enough
O	6155	6156	"
O	6157	6158	(
O	6158	6161	for
O	6161	6162	,
O	6163	6166	say
O	6166	6167	,
O	6168	6169	a
O	6170	6174	game
O	6174	6175	,
O	6176	6181	where
O	6182	6188	really
O	6189	6195	random
O	6196	6203	numbers
O	6204	6208	aren
O	6208	6209	'
O	6209	6210	t
O	6211	6214	too
O	6215	6224	important
O	6224	6225	)
O	6225	6226	?

O	6227	6228	#
O	6228	6230	li
O	6231	6234	Why
O	6235	6239	does
B-api_mention	6240	6244	Math
I-api_mention	6244	6245	.
I-api_mention	6245	6251	random
O	6252	6254	do
O	6255	6257	so
O	6258	6262	much
O	6263	6267	when
O	6268	6270	it
O	6271	6276	seems
O	6277	6281	just
O	6282	6288	simple
O	6289	6303	multiplication
O	6304	6307	and
O	6308	6315	cutting
O	6316	6319	out
O	6320	6323	the
O	6324	6331	decimal
O	6332	6336	will
O	6337	6344	suffice
O	6344	6345	?

O	6347	6355	Question
O	6355	6356	-
O	6356	6364	15156857

O	6365	6366	I
O	6367	6371	have
O	6372	6373	a
O	6374	6380	method
O	6381	6385	with
O	6386	6387	a
O	6388	6392	void
O	6393	6399	return
O	6400	6404	type
O	6404	6405	.

O	6406	6408	It
O	6409	6412	can
O	6413	6417	also
O	6418	6423	throw
O	6424	6425	a
O	6426	6432	number
O	6433	6435	of
O	6436	6446	exceptions
O	6447	6449	so
O	6450	6451	I
O	6451	6452	'
O	6452	6453	d
O	6454	6458	like
O	6459	6461	to
O	6462	6466	test
O	6467	6472	those
O	6473	6483	exceptions
O	6484	6489	being
O	6490	6496	thrown
O	6496	6497	.

O	6498	6501	All
O	6502	6510	attempts
O	6511	6515	have
O	6516	6522	failed
O	6523	6527	with
O	6528	6531	the
O	6532	6536	same
O	6537	6543	reason
O	6543	6544	:
O	6545	6546	#
O	6546	6556	blockquote
O	6557	6560	Any
O	6561	6566	ideas
O	6567	6570	how
O	6571	6572	I
O	6573	6576	can
O	6577	6580	get
O	6581	6584	the
O	6585	6591	method
O	6592	6594	to
O	6595	6600	throw
O	6601	6602	a
O	6603	6612	specified
O	6613	6622	exception
O	6622	6623	?

B-api_mention	6624	6631	doThrow
I-api_mention	6631	6632	(
I-api_mention	6632	6636	args
I-api_mention	6636	6637	)
I-api_mention	6637	6638	.
I-api_mention	6638	6642	when
I-api_mention	6642	6643	(
I-api_mention	6643	6647	args
I-api_mention	6647	6648	)
O	6648	6649	;

O	6651	6659	Question
O	6659	6660	-
O	6660	6668	16232833

O	6669	6670	I
O	6670	6671	'
O	6671	6672	m
O	6673	6678	using
O	6679	6685	Spring
O	6686	6689	MVC
O	6690	6693	for
O	6694	6695	a
O	6696	6702	simple
O	6703	6707	JSON
O	6708	6711	API
O	6711	6712	,
O	6713	6717	with
O	6718	6719	@
O	6719	6731	ResponseBody
O	6732	6737	based
O	6738	6746	approach
O	6747	6751	like
O	6752	6755	the
O	6756	6765	following
O	6765	6766	.

O	6767	6768	(
O	6768	6769	I
O	6770	6777	already
O	6778	6782	have
O	6783	6784	a
O	6785	6792	service
O	6793	6798	layer
O	6799	6808	producing
O	6809	6813	JSON
O	6814	6822	directly
O	6822	6823	.
O	6823	6824	)
O	6825	6826	#
O	6826	6829	pre
O	6830	6838	Question
O	6839	6841	is
O	6841	6842	,
O	6843	6845	in
O	6846	6849	the
O	6850	6855	given
O	6856	6864	scenario
O	6864	6865	,
O	6866	6870	what
O	6871	6873	is
O	6874	6877	the
O	6878	6886	simplest
O	6886	6887	,
O	6888	6896	cleanest
O	6897	6900	way
O	6901	6903	to
O	6904	6911	respond
O	6912	6916	with
O	6917	6918	a
O	6919	6923	HTTP
O	6924	6927	400
O	6928	6933	error
O	6934	6935	?

O	6936	6937	I
O	6938	6941	did
O	6942	6946	come
O	6947	6953	across
O	6954	6964	approaches
O	6965	6969	like
O	6969	6970	:
O	6971	6977	return
O	6978	6981	new
B-api_mention	6982	6996	ResponseEntity
I-api_mention	6996	6997	(
I-api_mention	6997	7001	args
I-api_mention	7001	7002	)
O	7002	7003	;
O	7004	7005	.
O	7005	7006	.
O	7006	7007	.
O	7007	7010	but
O	7011	7012	I
O	7013	7016	can
O	7016	7017	'
O	7017	7018	t
O	7019	7022	use
O	7023	7025	it
O	7026	7030	here
O	7031	7036	since
O	7037	7039	my
O	7040	7046	method
O	7046	7047	'
O	7047	7048	s
O	7049	7055	return
O	7056	7060	type
O	7061	7063	is
B-api_mention	7064	7070	String
O	7070	7071	,
O	7072	7075	not
B-api_mention	7076	7090	ResponseEntity
O	7090	7091	.

O	7093	7101	Question
O	7101	7102	-
O	7102	7110	15430247

O	7111	7114	The
O	7115	7120	usual
O	7121	7132	constructor
O	7133	7135	of
B-api_mention	7136	7145	ArrayList
O	7146	7148	is
O	7148	7149	:
B-api_mention	7150	7159	ArrayList
I-api_mention	7159	7160	<
I-api_mention	7160	7161	T
I-api_mention	7161	7162	>
O	7163	7167	list
O	7168	7169	=
O	7170	7173	new
B-api_mention	7174	7183	ArrayList
I-api_mention	7183	7184	<
I-api_mention	7184	7185	T
I-api_mention	7185	7186	>
I-api_mention	7186	7187	(
I-api_mention	7187	7191	args
I-api_mention	7191	7192	)
O	7192	7193	;
O	7194	7197	But
O	7198	7203	there
O	7204	7206	is
O	7207	7211	also
O	7212	7214	an
O	7215	7225	overloaded
O	7226	7237	constructor
O	7238	7242	with
O	7243	7244	a
O	7245	7254	parameter
O	7255	7258	for
O	7259	7262	its
O	7263	7270	initial
O	7271	7279	capacity
O	7279	7280	:
B-api_mention	7281	7290	ArrayList
I-api_mention	7290	7291	<
I-api_mention	7291	7292	T
I-api_mention	7292	7293	>
O	7294	7298	list
O	7299	7300	=
O	7301	7304	new
B-api_mention	7305	7314	ArrayList
I-api_mention	7314	7315	<
I-api_mention	7315	7316	T
I-api_mention	7316	7317	>
I-api_mention	7317	7318	(
I-api_mention	7318	7322	args
I-api_mention	7322	7323	)
O	7323	7324	;
O	7325	7328	Why
O	7329	7331	is
O	7332	7334	it
O	7335	7341	useful
O	7342	7344	to
O	7345	7351	create
O	7352	7354	an
B-api_mention	7355	7364	ArrayList
O	7365	7369	with
O	7370	7372	an
O	7373	7380	initial
O	7381	7389	capacity
O	7390	7394	when
O	7395	7397	we
O	7398	7401	can
O	7402	7408	append
O	7409	7411	to
O	7412	7414	it
O	7415	7417	as
O	7418	7420	we
O	7421	7427	please
O	7427	7428	?

O	7430	7438	Question
O	7438	7439	-
O	7439	7447	14846920

O	7448	7452	What
O	7453	7456	are
O	7457	7461	some
O	7462	7464	of
O	7465	7468	the
O	7469	7479	situations
O	7480	7485	where
O	7486	7487	I
O	7488	7491	can
O	7492	7495	use
B-api_mention	7496	7507	Collections
I-api_mention	7507	7508	.
I-api_mention	7508	7516	emptyMap
I-api_mention	7516	7517	(
I-api_mention	7517	7521	args
I-api_mention	7521	7522	)
O	7523	7524	?

O	7525	7528	The
O	7529	7542	Documentation
O	7543	7547	says
O	7548	7549	I
O	7550	7553	can
O	7554	7557	use
O	7558	7562	this
O	7563	7569	method
O	7570	7572	if
O	7573	7574	I
O	7575	7579	want
O	7580	7582	my
O	7583	7593	collection
O	7594	7596	to
O	7597	7599	be
O	7600	7609	immutable
O	7609	7610	.

O	7611	7614	Why
O	7615	7620	would
O	7621	7622	I
O	7623	7627	want
O	7628	7630	an
O	7631	7640	immutable
O	7641	7646	empty
O	7647	7657	collection
O	7657	7658	?

O	7659	7663	What
O	7664	7666	is
O	7667	7670	the
O	7671	7676	point
O	7676	7677	?

O	7679	7687	Question
O	7687	7688	-
O	7688	7696	14534767

O	7697	7698	I
O	7699	7703	have
O	7704	7705	a
B-api_mention	7706	7719	StringBuilder
O	7720	7726	object
O	7726	7727	,
O	7728	7729	#
O	7729	7732	pre
O	7733	7736	Now
O	7737	7738	I
O	7739	7743	want
O	7744	7746	to
O	7747	7753	append
O	7754	7755	a
O	7756	7763	newline
O	7764	7773	character
O	7774	7776	to
O	7777	7780	the
B-api_mention	7781	7794	StringBuilder
O	7795	7796	.

O	7797	7800	How
O	7801	7804	can
O	7805	7806	I
O	7807	7809	do
O	7810	7812	it
O	7812	7813	?

O	7814	7820	result
O	7820	7821	.
B-api_mention	7821	7827	append
I-api_mention	7827	7828	(
I-api_mention	7828	7832	args
I-api_mention	7832	7833	)
O	7833	7834	;
O	7835	7839	Does
O	7840	7843	not
O	7844	7848	work
O	7848	7849	.

O	7850	7852	So
O	7852	7853	,
O	7854	7855	I
O	7856	7859	was
O	7860	7868	thinking
O	7869	7874	about
O	7875	7882	writing
O	7883	7884	a
O	7885	7892	newline
O	7893	7898	using
O	7899	7906	Unicode
O	7906	7907	.

O	7908	7912	Will
O	7913	7917	this
O	7918	7922	help
O	7922	7923	?

O	7924	7926	If
O	7927	7929	so
O	7929	7930	,
O	7931	7934	how
O	7935	7938	can
O	7939	7940	I
O	7941	7944	add
O	7945	7948	one
O	7948	7949	?

O	7951	7959	Question
O	7959	7960	-
O	7960	7968	15336477

O	7969	7972	All
O	7973	7974	I
O	7974	7975	'
O	7975	7976	m
O	7977	7983	trying
O	7984	7986	to
O	7987	7989	do
O	7990	7992	is
O	7993	8001	download
O	8002	8006	some
O	8007	8011	JSON
O	8012	8015	and
O	8016	8027	deserialize
O	8028	8030	it
O	8031	8035	into
O	8036	8038	an
O	8039	8045	object
O	8045	8046	.

O	8047	8048	I
O	8049	8054	haven
O	8054	8055	'
O	8055	8056	t
O	8057	8060	got
O	8061	8063	as
O	8064	8067	far
O	8068	8070	as
O	8071	8082	downloading
O	8083	8086	the
O	8087	8091	JSON
O	8092	8095	yet
O	8095	8096	.

O	8097	8103	Almost
O	8104	8109	every
O	8110	8116	single
B-api_mention	8117	8127	HttpClient
O	8128	8135	example
O	8136	8137	I
O	8138	8141	can
O	8142	8146	find
O	8146	8147	,
O	8148	8157	including
O	8158	8163	those
O	8164	8166	on
O	8167	8170	the
O	8171	8177	apache
O	8178	8182	site
O	8183	8188	looks
O	8189	8198	something
O	8199	8203	like
O	8203	8204	.
O	8204	8205	.
O	8205	8206	.

O	8207	8208	#
O	8208	8211	pre
O	8212	8219	However
O	8219	8220	,
O	8221	8229	Netbeans
O	8230	8235	tells
O	8236	8238	me
O	8239	8243	that
B-api_mention	8244	8261	DefaultHttpClient
O	8262	8264	is
O	8265	8275	deprecated
O	8275	8276	.

O	8277	8278	I
O	8278	8279	'
O	8279	8281	ve
O	8282	8287	tried
O	8288	8296	googling
O	8297	8300	for
B-api_mention	8301	8318	DefaultHttpClient
O	8319	8329	deprecated
O	8330	8333	and
O	8334	8336	as
O	8337	8341	many
O	8342	8347	other
O	8348	8358	variations
O	8359	8361	as
O	8362	8363	I
O	8364	8367	can
O	8368	8373	think
O	8374	8376	of
O	8377	8380	and
O	8381	8384	can
O	8384	8385	'
O	8385	8386	t
O	8387	8391	find
O	8392	8395	any
O	8396	8402	useful
O	8403	8410	results
O	8410	8411	,
O	8412	8414	so
O	8415	8416	I
O	8416	8417	'
O	8417	8418	m
O	8419	8428	obviously
O	8429	8436	missing
O	8437	8446	something
O	8446	8447	.

O	8448	8452	What
O	8453	8455	is
O	8456	8459	the
O	8460	8467	correct
O	8468	8473	Java7
O	8474	8477	way
O	8478	8480	to
O	8481	8489	download
O	8490	8493	the
O	8494	8502	contents
O	8503	8505	of
O	8506	8507	a
O	8508	8515	webpage
O	8515	8516	?

O	8517	8519	Is
O	8520	8525	there
O	8526	8532	really
O	8533	8535	no
O	8536	8542	decent
O	8543	8547	Http
O	8548	8554	Client
O	8555	8557	as
O	8558	8562	part
O	8563	8565	of
O	8566	8569	the
O	8570	8578	language
O	8578	8579	?

O	8580	8581	I
O	8582	8586	find
O	8587	8591	that
O	8592	8596	hard
O	8597	8599	to
O	8600	8607	believe
O	8607	8608	.

O	8609	8611	My
O	8612	8617	Maven
O	8618	8628	dependency
O	8629	8632	for
O	8633	8637	this
O	8638	8640	is
O	8640	8641	.
O	8641	8642	.
O	8642	8643	.

O	8644	8645	#
O	8645	8648	pre

O	8650	8658	Question
O	8658	8659	-
O	8659	8667	16324831

O	8668	8671	Why
O	8672	8674	do
B-api_mention	8675	8681	Double
I-api_mention	8681	8682	.
I-api_mention	8682	8693	parseDouble
I-api_mention	8693	8694	(
I-api_mention	8694	8698	null
I-api_mention	8698	8699	)
O	8700	8703	and
B-api_mention	8704	8711	Integer
I-api_mention	8711	8712	.
I-api_mention	8712	8720	parseInt
I-api_mention	8720	8721	(
I-api_mention	8721	8725	null
I-api_mention	8725	8726	)
O	8727	8732	throw
O	8733	8742	different
O	8743	8753	exceptions
O	8753	8754	?

O	8755	8757	Is
O	8758	8762	this
O	8763	8764	a
O	8765	8775	historical
O	8776	8784	accident
O	8785	8787	or
O	8788	8799	intentional
O	8799	8800	?

O	8801	8804	The
O	8805	8818	documentation
O	8819	8826	clearly
O	8827	8833	states
O	8834	8837	two
O	8838	8843	types
O	8844	8846	of
O	8847	8857	exceptions
O	8858	8861	for
B-api_mention	8862	8868	Double
I-api_mention	8868	8869	.
I-api_mention	8869	8880	parseDouble
I-api_mention	8880	8881	(
I-api_mention	8881	8882	.
I-api_mention	8882	8883	.
I-api_mention	8883	8884	.
I-api_mention	8884	8885	)
O	8886	8889	and
O	8890	8893	one
O	8894	8897	for
B-api_mention	8898	8905	Integer
I-api_mention	8905	8906	.
I-api_mention	8906	8914	parseInt
I-api_mention	8914	8915	(
I-api_mention	8915	8916	)
O	8917	8918	,
O	8919	8922	but
O	8923	8925	it
O	8926	8931	seems
O	8932	8944	inconsistent
O	8944	8945	:
B-api_mention	8946	8953	Integer
I-api_mention	8953	8954	.
I-api_mention	8954	8962	parseInt
I-api_mention	8962	8963	(
I-api_mention	8963	8967	args
I-api_mention	8967	8968	)
O	8968	8969	;
O	8970	8971	/
O	8971	8972	/
O	8973	8979	throws
B-api_mention	8980	8984	java
I-api_mention	8984	8985	.
I-api_mention	8985	8989	lang
I-api_mention	8989	8990	.
I-api_mention	8990	9011	NumberFormatException
O	9011	9012	:
O	9013	9017	null
O	9018	9025	However
B-api_mention	9026	9032	Double
I-api_mention	9032	9033	.
I-api_mention	9033	9044	parseDouble
I-api_mention	9044	9045	(
I-api_mention	9045	9049	args
I-api_mention	9049	9050	)
O	9050	9051	;
O	9052	9053	/
O	9053	9054	/
O	9055	9061	throws
B-api_mention	9062	9066	java
I-api_mention	9066	9067	.
I-api_mention	9067	9071	lang
I-api_mention	9071	9072	.
I-api_mention	9072	9092	NullPointerException

O	9094	9102	Question
O	9102	9103	-
O	9103	9111	15940234

O	9112	9113	I
O	9113	9114	'
O	9114	9115	m
O	9116	9124	relative
O	9125	9128	new
O	9129	9131	to
O	9132	9135	the
O	9136	9147	webservices
O	9148	9153	world
O	9154	9157	and
O	9158	9160	my
O	9161	9169	research
O	9170	9175	seems
O	9176	9178	to
O	9179	9183	have
O	9184	9192	confused
O	9193	9195	me
O	9196	9200	more
O	9201	9205	than
O	9206	9215	enlighten
O	9216	9218	me
O	9218	9219	,
O	9220	9222	my
O	9223	9230	problem
O	9231	9233	is
O	9234	9238	that
O	9239	9240	I
O	9241	9244	was
O	9245	9250	given
O	9251	9252	a
O	9253	9260	library
O	9260	9261	(
O	9261	9264	jar
O	9264	9265	)
O	9266	9271	which
O	9272	9273	I
O	9274	9278	have
O	9279	9281	to
O	9282	9288	extend
O	9289	9293	with
O	9294	9298	some
O	9299	9309	webservice
O	9310	9323	functionality
O	9323	9324	.

O	9325	9329	This
O	9330	9337	library
O	9338	9342	will
O	9343	9345	be
O	9346	9352	shared
O	9353	9355	to
O	9356	9361	other
O	9362	9372	developers
O	9372	9373	,
O	9374	9377	and
O	9378	9383	among
O	9384	9387	the
O	9388	9395	classes
O	9396	9398	in
O	9399	9402	the
O	9403	9406	jar
O	9407	9411	will
O	9412	9414	be
O	9415	9422	classes
O	9423	9427	that
O	9428	9432	have
O	9433	9434	a
O	9435	9441	method
O	9442	9447	which
O	9448	9453	calls
O	9454	9455	a
O	9456	9466	webservice
O	9467	9468	(
O	9468	9472	that
O	9473	9484	essentially
O	9485	9489	sets
O	9490	9492	an
O	9493	9502	attribute
O	9503	9505	of
O	9506	9509	the
O	9510	9515	class
O	9515	9516	,
O	9517	9521	does
O	9522	9526	some
O	9527	9535	business
O	9536	9541	logic
O	9541	9542	,
O	9543	9547	like
O	9548	9555	storing
O	9556	9559	the
O	9560	9566	object
O	9567	9569	in
O	9570	9571	a
O	9572	9574	db
O	9574	9575	,
O	9576	9579	etc
O	9580	9583	and
O	9584	9589	sends
O	9590	9594	back
O	9595	9598	the
O	9599	9605	object
O	9606	9610	with
O	9611	9616	those
O	9617	9630	modifications
O	9630	9631	)
O	9631	9632	.

O	9633	9634	I
O	9635	9639	want
O	9640	9642	to
O	9643	9647	make
O	9648	9651	the
O	9652	9656	call
O	9657	9659	to
O	9660	9664	this
O	9665	9672	service
O	9673	9675	as
O	9676	9682	simple
O	9683	9685	as
O	9686	9694	possible
O	9694	9695	,
O	9696	9705	hopefully
O	9706	9708	as
O	9709	9715	simple
O	9716	9718	so
O	9719	9723	that
O	9724	9727	the
O	9728	9737	developer
O	9738	9743	using
O	9744	9747	the
O	9748	9753	class
O	9754	9758	only
O	9759	9763	need
O	9764	9766	to
O	9767	9769	do
O	9769	9770	.

O	9771	9772	#
O	9772	9775	pre
O	9776	9777	I
O	9778	9782	have
O	9783	9787	been
O	9788	9796	studying
O	9797	9800	JAX
O	9800	9801	-
O	9801	9803	WS
O	9804	9806	to
O	9807	9810	use
O	9811	9813	on
O	9814	9817	the
O	9818	9824	server
O	9825	9828	but
O	9829	9834	seems
O	9835	9837	to
O	9838	9840	me
O	9841	9845	that
O	9846	9847	I
O	9848	9851	don
O	9851	9852	'
O	9852	9853	t
O	9854	9858	need
O	9859	9861	to
O	9862	9868	create
O	9869	9870	a
O	9871	9879	wsimport
O	9880	9882	in
O	9883	9886	the
O	9887	9893	server
O	9894	9897	nor
O	9898	9901	the
O	9902	9910	wsimport
O	9911	9913	on
O	9914	9917	the
O	9918	9924	client
O	9924	9925	,
O	9926	9931	since
O	9932	9933	I
O	9934	9938	know
O	9939	9943	that
O	9944	9948	both
O	9949	9953	have
O	9954	9957	the
O	9958	9965	classes
O	9965	9966	,
O	9967	9968	I
O	9969	9973	just
O	9974	9978	need
O	9979	9983	some
O	9984	9995	interaction
O	9996	10003	between
O	10004	10011	classes
O	10012	10018	shared
O	10019	10021	in
O	10022	10026	both
O	10027	10030	the
O	10031	10037	server
O	10038	10041	and
O	10042	10045	the
O	10046	10052	client
O	10052	10053	.

O	10054	10057	How
O	10058	10060	do
O	10061	10064	you
O	10065	10070	think
O	10071	10076	makes
O	10077	10082	sense
O	10083	10085	to
O	10086	10088	do
O	10089	10092	the
O	10093	10103	webservice
O	10104	10107	and
O	10108	10111	the
O	10112	10116	call
O	10117	10119	in
O	10120	10123	the
O	10124	10129	class
O	10129	10130	?

O	10132	10140	Question
O	10140	10141	-
O	10141	10149	16148575

O	10150	10151	I
O	10152	10154	am
O	10155	10161	trying
O	10162	10164	to
O	10165	10170	build
O	10171	10172	a
B-api_mention	10173	10180	HashMap
O	10181	10186	which
O	10187	10191	will
O	10192	10196	have
O	10197	10204	integer
O	10205	10207	as
O	10208	10212	keys
O	10213	10216	and
O	10217	10224	objects
O	10225	10227	as
O	10228	10234	values
O	10234	10235	.

O	10236	10238	My
O	10239	10245	syntax
O	10246	10248	is
O	10248	10249	:
B-api_mention	10250	10257	HashMap
I-api_mention	10257	10258	<
I-api_mention	10258	10259	T
I-api_mention	10259	10260	>
O	10261	10266	myMap
O	10267	10268	=
O	10269	10272	new
B-api_mention	10273	10280	HashMap
I-api_mention	10280	10281	<
I-api_mention	10281	10282	T
I-api_mention	10282	10283	>
I-api_mention	10283	10284	(
I-api_mention	10284	10288	args
I-api_mention	10288	10289	)
O	10289	10290	;
O	10291	10298	However
O	10298	10299	,
O	10300	10303	the
O	10304	10309	error
O	10310	10318	returned
O	10319	10321	is
O	10322	10323	-
O	10324	10330	Syntax
O	10331	10336	error
O	10337	10339	on
O	10340	10345	token
O	10346	10347	"
O	10347	10350	int
O	10350	10351	"
O	10351	10352	,
O	10353	10363	Dimensions
O	10364	10372	expected
O	10373	10378	after
O	10379	10383	this
O	10384	10389	token
O	10390	10391	-
O	10392	10393	I
O	10394	10397	don
O	10397	10398	'
O	10398	10399	t
O	10400	10410	understand
O	10411	10414	why
O	10415	10416	I
O	10417	10423	should
O	10424	10427	add
O	10428	10429	a
O	10430	10439	dimension
O	10440	10441	(
O	10441	10443	ie
O	10443	10444	:
O	10445	10451	making
O	10452	10455	the
O	10456	10459	int
O	10460	10464	into
O	10465	10467	an
O	10468	10473	array
O	10473	10474	)
O	10475	10480	since
O	10481	10482	I
O	10483	10487	only
O	10488	10492	need
O	10493	10495	to
O	10496	10501	store
O	10502	10503	a
O	10504	10509	digit
O	10510	10512	as
O	10513	10516	key
O	10516	10517	.

O	10518	10522	What
O	10523	10528	could
O	10529	10530	I
O	10531	10533	do
O	10533	10534	?

O	10535	10541	Thanks
O	10542	10544	in
O	10545	10552	advance
O	10552	10553	!

O	10554	10555	:
O	10555	10556	)

O	10558	10566	Question
O	10566	10567	-
O	10567	10575	15182496
O	10575	10576	,
O	10577	10583	answer
O	10583	10584	-
O	10584	10592	15182578

O	10593	10596	The
O	10597	10602	other
O	10603	10610	answers
O	10611	10618	explain
O	10619	10622	why
O	10622	10623	,
O	10624	10627	but
O	10628	10632	here
O	10633	10635	is
O	10636	10639	how
O	10639	10640	:
O	10641	10644	new
B-api_mention	10645	10651	Random
I-api_mention	10651	10652	(
I-api_mention	10652	10656	args
I-api_mention	10656	10657	)
I-api_mention	10657	10658	.
I-api_mention	10658	10665	nextInt
I-api_mention	10665	10666	(
I-api_mention	10666	10670	args
I-api_mention	10670	10671	)
O	10672	10675	The
O	10676	10681	first
O	10682	10683	6
O	10684	10691	numbers
O	10692	10696	that
O	10697	10700	the
O	10701	10706	above
O	10707	10713	random
O	10714	10723	generates
O	10724	10727	are
O	10727	10728	:
O	10729	10730	#
O	10730	10733	pre
O	10734	10737	and
O	10738	10741	the
O	10742	10747	first
O	10748	10749	6
O	10750	10757	numbers
O	10758	10762	that
O	10763	10766	new
B-api_mention	10767	10773	Random
I-api_mention	10773	10774	(
I-api_mention	10774	10778	args
I-api_mention	10778	10779	)
I-api_mention	10779	10780	.
I-api_mention	10780	10787	nextInt
I-api_mention	10787	10788	(
I-api_mention	10788	10792	args
I-api_mention	10792	10793	)
O	10794	10803	generates
O	10804	10807	are
O	10807	10808	:
O	10809	10810	#
O	10810	10813	pre
O	10814	10818	Then
O	10819	10823	just
O	10824	10827	add
O	10828	10833	those
O	10834	10841	numbers
O	10842	10844	to
O	10845	10848	the
O	10849	10856	integer
O	10857	10871	representation
O	10872	10874	of
O	10875	10878	the
O	10879	10888	character
O	10889	10890	`
O	10891	10892	(
O	10892	10897	which
O	10898	10900	is
O	10901	10903	96
O	10903	10904	)
O	10904	10905	:
O	10906	10907	#
O	10907	10910	pre

O	10912	10920	Question
O	10920	10921	-
O	10921	10929	15202997
O	10929	10930	,
O	10931	10937	answer
O	10937	10938	-
O	10938	10946	15203417

O	10947	10949	If
O	10950	10953	you
O	10953	10954	'
O	10954	10956	re
O	10957	10963	unsure
O	10964	10969	about
O	10970	10979	something
O	10979	10980	,
O	10981	10984	try
O	10985	10992	writing
O	10993	10994	a
O	10995	10999	test
O	11000	11005	first
O	11005	11006	.

O	11007	11008	I
O	11009	11012	did
O	11013	11017	this
O	11017	11018	:
O	11019	11020	#
O	11020	11023	pre
O	11024	11030	Prints
O	11030	11031	:
O	11032	11033	#
O	11033	11036	pre
O	11037	11042	There
O	11042	11043	'
O	11043	11044	s
O	11045	11047	an
O	11048	11053	empty
O	11054	11058	line
O	11059	11061	in
O	11062	11065	the
O	11066	11070	last
O	11071	11076	block
O	11077	11082	where
B-api_mention	11083	11096	getSimpleName
O	11097	11104	returns
O	11105	11107	an
O	11108	11113	empty
O	11114	11120	string
O	11120	11121	.

O	11122	11125	The
O	11126	11132	upshot
O	11133	11140	looking
O	11141	11143	at
O	11144	11148	this
O	11149	11151	is
O	11151	11152	:
O	11153	11154	#
O	11154	11156	li
O	11157	11160	the
O	11161	11165	name
O	11166	11168	is
O	11169	11172	the
O	11173	11177	name
O	11178	11182	that
O	11183	11186	you
O	11186	11187	'
O	11187	11188	d
O	11189	11192	use
O	11193	11195	to
O	11196	11207	dynamically
O	11208	11212	load
O	11213	11216	the
O	11217	11222	class
O	11223	11227	with
O	11227	11228	,
O	11229	11232	for
O	11233	11240	example
O	11240	11241	,
O	11242	11243	a
O	11244	11248	call
O	11249	11251	to
B-api_mention	11252	11257	Class
I-api_mention	11257	11258	.
I-api_mention	11258	11265	forName
O	11266	11270	with
O	11271	11274	the
O	11275	11282	default
B-api_mention	11283	11294	ClassLoader
O	11295	11296	.

O	11297	11298	#
O	11298	11300	li
O	11301	11304	the
O	11305	11314	canonical
O	11315	11319	name
O	11320	11322	is
O	11323	11326	the
O	11327	11331	name
O	11332	11336	that
O	11337	11342	would
O	11343	11345	be
O	11346	11350	used
O	11351	11353	in
O	11354	11356	an
O	11357	11363	import
O	11364	11373	statement
O	11374	11377	and
O	11378	11386	uniquely
O	11387	11397	identifies
O	11398	11401	the
O	11402	11407	class
O	11407	11408	.

O	11409	11414	Might
O	11415	11417	be
O	11418	11424	useful
O	11425	11431	during
B-api_mention	11432	11440	toString
O	11441	11443	or
O	11444	11451	logging
O	11452	11462	operations
O	11462	11463	.

O	11464	11465	#
O	11465	11467	li
O	11468	11471	the
O	11472	11478	simple
O	11479	11483	name
O	11484	11491	loosely
O	11492	11502	identifies
O	11503	11506	the
O	11507	11512	class
O	11512	11513	,
O	11514	11519	again
O	11520	11525	might
O	11526	11528	be
O	11529	11535	useful
O	11536	11542	during
B-api_mention	11543	11551	toString
O	11552	11554	or
O	11555	11562	logging
O	11563	11573	operations
O	11574	11577	but
O	11578	11580	is
O	11581	11584	not
O	11585	11595	guaranteed
O	11596	11598	to
O	11599	11601	be
O	11602	11608	unique
O	11608	11609	.

O	11611	11619	Question
O	11619	11620	-
O	11620	11628	15202997
O	11628	11629	,
O	11630	11636	answer
O	11636	11637	-
O	11637	11645	29527145

O	11646	11652	Adding
O	11653	11658	local
O	11659	11666	classes
O	11666	11667	,
O	11668	11675	lambdas
O	11676	11679	and
O	11680	11683	the
B-api_mention	11684	11692	toString
I-api_mention	11692	11693	(
I-api_mention	11693	11697	args
I-api_mention	11697	11698	)
O	11699	11705	method
O	11706	11708	to
O	11709	11717	complete
O	11718	11721	the
O	11722	11730	previous
O	11731	11734	two
O	11735	11742	answers
O	11742	11743	.

O	11744	11751	Further
O	11751	11752	,
O	11753	11754	I
O	11755	11758	add
O	11759	11765	arrays
O	11766	11768	of
O	11769	11776	lambdas
O	11777	11780	and
O	11781	11787	arrays
O	11788	11790	of
O	11791	11800	anonymous
O	11801	11808	classes
O	11809	11810	(
O	11810	11815	which
O	11816	11818	do
O	11819	11822	not
O	11823	11827	make
O	11828	11831	any
O	11832	11837	sense
O	11838	11840	in
O	11841	11849	practice
O	11850	11856	though
O	11856	11857	)
O	11857	11858	:
O	11859	11860	#
O	11860	11863	pre
O	11864	11868	This
O	11869	11871	is
O	11872	11875	the
O	11876	11880	full
O	11881	11887	output
O	11887	11888	:
O	11889	11890	#
O	11890	11893	pre
O	11894	11896	So
O	11896	11897	,
O	11898	11902	here
O	11903	11906	are
O	11907	11910	the
O	11911	11916	rules
O	11916	11917	.

O	11918	11923	First
O	11923	11924	,
O	11925	11929	lets
O	11930	11935	start
O	11936	11940	with
O	11941	11950	primitive
O	11951	11956	types
O	11957	11960	and
O	11961	11965	void
O	11966	11967	:
O	11968	11969	#
O	11969	11971	li
O	11972	11974	If
O	11975	11978	the
O	11979	11984	class
O	11985	11991	object
O	11992	12002	represents
O	12003	12004	a
O	12005	12014	primitive
O	12015	12019	type
O	12020	12022	or
O	12023	12027	void
O	12028	12029	,
O	12030	12033	all
O	12034	12037	the
O	12038	12042	four
O	12043	12050	methods
O	12051	12057	simply
O	12058	12065	returns
O	12066	12069	its
O	12070	12074	name
O	12074	12075	.

O	12076	12079	Now
O	12080	12083	the
O	12084	12089	rules
O	12090	12093	for
O	12094	12097	the
B-api_mention	12098	12105	getName
I-api_mention	12105	12106	(
I-api_mention	12106	12110	args
I-api_mention	12110	12111	)
O	12112	12118	method
O	12118	12119	:
O	12120	12121	#
O	12121	12123	li
O	12124	12129	Every
O	12130	12133	non
O	12133	12134	-
O	12134	12140	lambda
O	12141	12144	and
O	12145	12148	non
O	12148	12149	-
O	12149	12154	array
O	12155	12160	class
O	12161	12163	or
O	12164	12173	interface
O	12174	12175	(
O	12175	12176	i
O	12176	12177	.
O	12177	12178	e
O	12178	12179	,
O	12180	12183	top
O	12183	12184	-
O	12184	12189	level
O	12189	12190	,
O	12191	12197	nested
O	12197	12198	,
O	12199	12204	inner
O	12204	12205	,
O	12206	12211	local
O	12212	12215	and
O	12216	12225	anonymous
O	12225	12226	)
O	12227	12230	has
O	12231	12232	a
O	12233	12237	name
O	12238	12239	(
O	12239	12244	which
O	12245	12247	is
O	12248	12256	returned
O	12257	12259	by
B-api_mention	12260	12267	getName
I-api_mention	12267	12268	(
I-api_mention	12268	12272	args
I-api_mention	12272	12273	)
O	12274	12275	)
O	12276	12280	that
O	12281	12283	is
O	12284	12287	the
O	12288	12295	package
O	12296	12300	name
O	12301	12309	followed
O	12310	12312	by
O	12313	12314	a
O	12315	12318	dot
O	12319	12320	(
O	12320	12322	if
O	12323	12328	there
O	12329	12331	is
O	12332	12333	a
O	12334	12341	package
O	12341	12342	)
O	12342	12343	,
O	12344	12352	followed
O	12353	12355	by
O	12356	12359	the
O	12360	12364	name
O	12365	12367	of
O	12368	12371	its
O	12372	12377	class
O	12377	12378	-
O	12378	12382	file
O	12383	12385	as
O	12386	12395	generated
O	12396	12398	by
O	12399	12402	the
O	12403	12411	compiler
O	12412	12413	(
O	12413	12421	whithout
O	12422	12425	the
O	12426	12432	suffix
O	12433	12434	.
O	12434	12439	class
O	12440	12441	)
O	12441	12442	.

O	12443	12445	If
O	12446	12451	there
O	12452	12454	is
O	12455	12457	no
O	12458	12465	package
O	12465	12466	,
O	12467	12469	it
O	12470	12472	is
O	12473	12479	simply
O	12480	12483	the
O	12484	12488	name
O	12489	12491	of
O	12492	12495	the
O	12496	12501	class
O	12501	12502	-
O	12502	12506	file
O	12506	12507	.

O	12508	12510	If
O	12511	12514	the
O	12515	12520	class
O	12521	12523	is
O	12524	12526	an
O	12527	12532	inner
O	12532	12533	,
O	12534	12540	nested
O	12540	12541	,
O	12542	12547	local
O	12548	12550	or
O	12551	12560	anonymous
O	12561	12566	class
O	12566	12567	,
O	12568	12571	the
O	12572	12580	compiler
O	12581	12587	should
O	12588	12596	generate
O	12597	12599	at
O	12600	12605	least
O	12606	12609	one
O	12610	12611	$
O	12612	12614	in
O	12615	12618	its
O	12619	12624	class
O	12624	12625	-
O	12625	12629	file
O	12630	12634	name
O	12634	12635	.

O	12636	12640	Note
O	12641	12645	that
O	12646	12649	for
O	12650	12659	anonymous
O	12660	12667	classes
O	12667	12668	,
O	12669	12672	the
O	12673	12678	class
O	12679	12683	name
O	12684	12689	would
O	12690	12693	end
O	12694	12698	with
O	12699	12700	a
O	12701	12707	dollar
O	12707	12708	-
O	12708	12712	sign
O	12713	12721	followed
O	12722	12724	by
O	12725	12726	a
O	12727	12733	number
O	12733	12734	.

O	12735	12736	#
O	12736	12738	li
O	12739	12745	Lambda
O	12746	12751	class
O	12752	12757	names
O	12758	12761	are
O	12762	12771	generally
O	12772	12785	unpredictable
O	12785	12786	,
O	12787	12790	and
O	12791	12794	you
O	12795	12802	shouldn
O	12802	12803	'
O	12803	12804	t
O	12805	12809	care
O	12810	12815	about
O	12816	12820	they
O	12821	12827	anyway
O	12827	12828	.

O	12829	12836	Exactly
O	12836	12837	,
O	12838	12843	their
O	12844	12848	name
O	12849	12851	is
O	12852	12855	the
O	12856	12860	name
O	12861	12863	of
O	12864	12867	the
O	12868	12877	enclosing
O	12878	12883	class
O	12883	12884	,
O	12885	12893	followed
O	12894	12896	by
O	12897	12898	$
O	12898	12899	$
O	12899	12905	Lambda
O	12905	12906	$
O	12907	12908	,
O	12909	12917	followed
O	12918	12920	by
O	12921	12922	a
O	12923	12929	number
O	12929	12930	,
O	12931	12939	followed
O	12940	12942	by
O	12943	12944	a
O	12945	12950	slash
O	12950	12951	,
O	12952	12960	followed
O	12961	12963	by
O	12964	12971	another
O	12972	12978	number
O	12978	12979	.

O	12980	12981	#
O	12981	12983	li
O	12984	12987	The
O	12988	12993	class
O	12994	13004	descriptor
O	13005	13007	of
O	13008	13011	the
O	13012	13022	primitives
O	13023	13026	are
O	13027	13028	Z
O	13029	13032	for
O	13033	13040	boolean
O	13041	13042	,
O	13043	13044	B
O	13045	13048	for
O	13049	13053	byte
O	13054	13055	,
O	13056	13057	S
O	13058	13061	for
O	13062	13067	short
O	13068	13069	,
O	13070	13071	C
O	13072	13075	for
O	13076	13080	char
O	13081	13082	,
O	13083	13084	I
O	13085	13088	for
O	13089	13092	int
O	13093	13094	,
O	13095	13096	J
O	13097	13100	for
O	13101	13105	long
O	13106	13107	,
O	13108	13109	F
O	13110	13113	for
O	13114	13119	float
O	13120	13123	and
O	13124	13125	D
O	13126	13129	for
O	13130	13136	double
O	13137	13138	.

O	13139	13142	For
O	13143	13146	non
O	13146	13147	-
O	13147	13152	array
O	13153	13160	classes
O	13161	13164	and
O	13165	13175	interfaces
O	13176	13179	the
O	13180	13185	class
O	13186	13196	descriptor
O	13197	13199	is
O	13200	13201	L
O	13202	13210	followed
O	13211	13213	by
O	13214	13218	what
O	13219	13221	is
O	13222	13227	given
O	13228	13230	by
B-api_mention	13231	13238	getName
I-api_mention	13238	13239	(
I-api_mention	13239	13243	args
I-api_mention	13243	13244	)
O	13245	13253	followed
O	13254	13256	by
O	13257	13258	;
O	13259	13260	.

O	13261	13264	For
O	13265	13270	array
O	13271	13278	classes
O	13278	13279	,
O	13280	13283	the
O	13284	13289	class
O	13290	13300	descriptor
O	13301	13303	is
O	13304	13305	[
O	13306	13314	followed
O	13315	13317	by
O	13318	13321	the
O	13322	13327	class
O	13328	13338	descriptor
O	13339	13341	of
O	13342	13345	the
O	13346	13355	component
O	13356	13360	type
O	13361	13362	(
O	13362	13367	which
O	13368	13371	may
O	13372	13374	be
O	13375	13381	itself
O	13382	13389	another
O	13390	13395	array
O	13396	13401	class
O	13401	13402	)
O	13402	13403	.

O	13404	13405	#
O	13405	13407	li
O	13408	13411	For
O	13412	13417	array
O	13418	13425	classes
O	13425	13426	,
O	13427	13430	the
B-api_mention	13431	13438	getName
I-api_mention	13438	13439	(
I-api_mention	13439	13443	args
I-api_mention	13443	13444	)
O	13445	13451	method
O	13452	13459	returns
O	13460	13463	its
O	13464	13469	class
O	13470	13480	descriptor
O	13480	13481	.

O	13482	13486	This
O	13487	13491	rule
O	13492	13497	seems
O	13498	13500	to
O	13501	13505	fail
O	13506	13510	only
O	13511	13514	for
O	13515	13520	array
O	13521	13528	classes
O	13529	13534	whose
O	13535	13538	the
O	13539	13548	component
O	13549	13553	type
O	13554	13556	is
O	13557	13558	a
O	13559	13565	lambda
O	13566	13567	(
O	13567	13572	which
O	13573	13581	possibly
O	13582	13584	is
O	13585	13586	a
O	13587	13590	bug
O	13590	13591	)
O	13591	13592	,
O	13593	13596	but
O	13597	13606	hopefully
O	13607	13611	this
O	13612	13618	should
O	13619	13622	not
O	13623	13629	matter
O	13630	13636	anyway
O	13637	13644	because
O	13645	13650	there
O	13651	13653	is
O	13654	13656	no
O	13657	13662	point
O	13663	13667	even
O	13668	13670	on
O	13671	13674	the
O	13675	13684	existence
O	13685	13687	of
O	13688	13693	array
O	13694	13701	classes
O	13702	13707	whose
O	13708	13717	component
O	13718	13722	type
O	13723	13725	is
O	13726	13727	a
O	13728	13734	lambda
O	13734	13735	.

O	13736	13739	Now
O	13739	13740	,
O	13741	13744	the
B-api_mention	13745	13753	toString
I-api_mention	13753	13754	(
I-api_mention	13754	13758	args
I-api_mention	13758	13759	)
O	13760	13766	method
O	13766	13767	:
O	13768	13769	#
O	13769	13771	li
O	13772	13774	If
O	13775	13778	the
O	13779	13784	class
O	13785	13793	instance
O	13794	13804	represents
O	13805	13807	an
O	13808	13817	interface
O	13818	13819	(
O	13819	13821	or
O	13822	13824	an
O	13825	13835	annotation
O	13835	13836	,
O	13837	13842	which
O	13843	13845	is
O	13846	13847	a
O	13848	13855	special
O	13856	13860	type
O	13861	13863	of
O	13864	13873	interface
O	13873	13874	)
O	13874	13875	,
O	13876	13879	the
B-api_mention	13880	13888	toString
I-api_mention	13888	13889	(
I-api_mention	13889	13893	args
I-api_mention	13893	13894	)
O	13895	13902	returns
O	13903	13916	StringLiteral
O	13917	13918	+
B-api_mention	13919	13926	getName
I-api_mention	13926	13927	(
I-api_mention	13927	13931	args
I-api_mention	13931	13932	)
O	13933	13934	.

O	13935	13937	If
O	13938	13940	it
O	13941	13943	is
O	13944	13945	a
O	13946	13955	primitive
O	13955	13956	,
O	13957	13959	it
O	13960	13967	returns
O	13968	13974	simply
B-api_mention	13975	13982	getName
I-api_mention	13982	13983	(
I-api_mention	13983	13987	args
I-api_mention	13987	13988	)
O	13989	13990	.

O	13991	13993	If
O	13994	13996	it
O	13997	13999	is
O	14000	14009	something
O	14010	14014	else
O	14015	14016	(
O	14016	14017	a
O	14018	14023	class
O	14024	14028	type
O	14028	14029	,
O	14030	14034	even
O	14035	14037	if
O	14038	14040	it
O	14041	14043	is
O	14044	14045	a
O	14046	14052	pretty
O	14053	14058	weird
O	14059	14062	one
O	14062	14063	)
O	14063	14064	,
O	14065	14067	it
O	14068	14075	returns
O	14076	14089	StringLiteral
O	14090	14091	+
B-api_mention	14092	14099	getName
I-api_mention	14099	14100	(
I-api_mention	14100	14104	args
I-api_mention	14104	14105	)
O	14106	14107	.

O	14108	14111	The
B-api_mention	14112	14128	getCanonicalName
I-api_mention	14128	14129	(
I-api_mention	14129	14133	args
I-api_mention	14133	14134	)
O	14135	14141	method
O	14141	14142	:
O	14143	14144	#
O	14144	14146	li
O	14147	14150	For
O	14151	14154	top
O	14154	14155	-
O	14155	14160	level
O	14161	14168	classes
O	14169	14172	and
O	14173	14183	interfaces
O	14183	14184	,
O	14185	14188	the
B-api_mention	14189	14205	getCanonicalName
I-api_mention	14205	14206	(
I-api_mention	14206	14210	args
I-api_mention	14210	14211	)
O	14212	14218	method
O	14219	14226	returns
O	14227	14231	just
O	14232	14236	what
O	14237	14240	the
B-api_mention	14241	14248	getName
I-api_mention	14248	14249	(
I-api_mention	14249	14253	args
I-api_mention	14253	14254	)
O	14255	14261	method
O	14262	14269	returns
O	14269	14270	.

O	14271	14272	#
O	14272	14274	li
O	14275	14278	The
B-api_mention	14279	14295	getCanonicalName
I-api_mention	14295	14296	(
I-api_mention	14296	14300	args
I-api_mention	14300	14301	)
O	14302	14308	method
O	14309	14316	returns
O	14317	14321	null
O	14322	14325	for
O	14326	14335	anonymous
O	14336	14338	or
O	14339	14344	local
O	14345	14352	classes
O	14353	14356	and
O	14357	14360	for
O	14361	14366	array
O	14367	14374	classes
O	14375	14377	of
O	14378	14383	those
O	14383	14384	.

O	14385	14386	#
O	14386	14388	li
O	14389	14392	For
O	14393	14398	inner
O	14399	14402	and
O	14403	14409	nested
O	14410	14417	classes
O	14418	14421	and
O	14422	14432	interfaces
O	14432	14433	,
O	14434	14437	the
B-api_mention	14438	14454	getCanonicalName
I-api_mention	14454	14455	(
I-api_mention	14455	14459	args
I-api_mention	14459	14460	)
O	14461	14467	method
O	14468	14475	returns
O	14476	14480	what
O	14481	14484	the
B-api_mention	14485	14492	getName
I-api_mention	14492	14493	(
I-api_mention	14493	14497	args
I-api_mention	14497	14498	)
O	14499	14505	method
O	14506	14511	would
O	14512	14521	replacing
O	14522	14525	the
O	14526	14534	compiler
O	14534	14535	-
O	14535	14545	introduced
O	14546	14552	dollar
O	14552	14553	-
O	14553	14558	signs
O	14559	14561	by
O	14562	14566	dots
O	14566	14567	.

O	14568	14569	#
O	14569	14571	li
O	14572	14575	For
O	14576	14581	array
O	14582	14589	classes
O	14589	14590	,
O	14591	14594	the
B-api_mention	14595	14611	getCanonicalName
I-api_mention	14611	14612	(
I-api_mention	14612	14616	args
I-api_mention	14616	14617	)
O	14618	14624	method
O	14625	14632	returns
O	14633	14637	null
O	14638	14640	if
O	14641	14644	the
O	14645	14654	canonical
O	14655	14659	name
O	14660	14662	of
O	14663	14666	the
O	14667	14676	component
O	14677	14681	type
O	14682	14684	is
O	14685	14689	null
O	14690	14691	.

O	14692	14701	Otherwise
O	14701	14702	,
O	14703	14705	it
O	14706	14713	returns
O	14714	14717	the
O	14718	14727	canonical
O	14728	14732	name
O	14733	14735	of
O	14736	14739	the
O	14740	14749	component
O	14750	14754	type
O	14755	14763	followed
O	14764	14766	by
O	14767	14768	[
O	14768	14769	]
O	14770	14771	.

O	14772	14775	The
B-api_mention	14776	14789	getSimpleName
I-api_mention	14789	14790	(
I-api_mention	14790	14794	args
I-api_mention	14794	14795	)
O	14796	14802	method
O	14802	14803	:
O	14804	14805	#
O	14805	14807	li
O	14808	14811	For
O	14812	14815	top
O	14815	14816	-
O	14816	14821	level
O	14821	14822	,
O	14823	14829	nested
O	14829	14830	,
O	14831	14836	inner
O	14837	14840	and
O	14841	14846	local
O	14847	14854	classes
O	14854	14855	,
O	14856	14859	the
B-api_mention	14860	14873	getSimpleName
I-api_mention	14873	14874	(
I-api_mention	14874	14878	args
I-api_mention	14878	14879	)
O	14880	14887	returns
O	14888	14891	the
O	14892	14896	name
O	14897	14899	of
O	14900	14903	the
O	14904	14909	class
O	14910	14912	as
O	14913	14920	written
O	14921	14923	in
O	14924	14927	the
O	14928	14934	source
O	14935	14939	file
O	14939	14940	.

O	14941	14942	#
O	14942	14944	li
O	14945	14948	For
O	14949	14958	anonymous
O	14959	14966	classes
O	14967	14970	the
B-api_mention	14971	14984	getSimpleName
I-api_mention	14984	14985	(
I-api_mention	14985	14989	args
I-api_mention	14989	14990	)
O	14991	14998	returns
O	14999	15001	an
O	15002	15007	empty
B-api_mention	15008	15014	String
O	15015	15016	.

O	15017	15018	#
O	15018	15020	li
O	15021	15024	For
O	15025	15031	lambda
O	15032	15039	classes
O	15040	15043	the
B-api_mention	15044	15057	getSimpleName
I-api_mention	15057	15058	(
I-api_mention	15058	15062	args
I-api_mention	15062	15063	)
O	15064	15068	just
O	15069	15076	returns
O	15077	15081	what
O	15082	15085	the
B-api_mention	15086	15093	getName
I-api_mention	15093	15094	(
I-api_mention	15094	15098	args
I-api_mention	15098	15099	)
O	15100	15105	would
O	15106	15112	return
O	15113	15120	without
O	15121	15124	the
O	15125	15132	package
O	15133	15137	name
O	15137	15138	.

O	15139	15143	This
O	15144	15146	do
O	15147	15150	not
O	15151	15156	makes
O	15157	15161	much
O	15162	15167	sense
O	15168	15171	and
O	15172	15177	looks
O	15178	15182	like
O	15183	15184	a
O	15185	15188	bug
O	15189	15192	for
O	15193	15195	me
O	15195	15196	,
O	15197	15200	but
O	15201	15206	there
O	15207	15209	is
O	15210	15212	no
O	15213	15218	point
O	15219	15221	in
O	15222	15229	calling
B-api_mention	15230	15243	getSimpleName
I-api_mention	15243	15244	(
I-api_mention	15244	15248	args
I-api_mention	15248	15249	)
O	15250	15252	on
O	15253	15254	a
O	15255	15261	lambda
O	15262	15267	class
O	15268	15270	to
O	15271	15276	start
O	15277	15281	with
O	15281	15282	.

O	15283	15284	#
O	15284	15286	li
O	15287	15290	For
O	15291	15296	array
O	15297	15304	classes
O	15305	15308	the
B-api_mention	15309	15322	getSimpleName
I-api_mention	15322	15323	(
I-api_mention	15323	15327	args
I-api_mention	15327	15328	)
O	15329	15335	method
O	15336	15343	returns
O	15344	15347	the
O	15348	15354	simple
O	15355	15359	name
O	15360	15362	of
O	15363	15366	the
O	15367	15376	component
O	15377	15382	class
O	15383	15391	followed
O	15392	15394	by
O	15395	15396	[
O	15396	15397	]
O	15398	15399	.

O	15400	15404	This
O	15405	15409	have
O	15410	15413	the
O	15414	15419	funny
O	15419	15420	/
O	15420	15425	weird
O	15426	15430	side
O	15430	15431	-
O	15431	15437	effect
O	15438	15442	that
O	15443	15448	array
O	15449	15456	classes
O	15457	15462	whose
O	15463	15472	component
O	15473	15477	type
O	15478	15480	is
O	15481	15483	an
O	15484	15493	anonymous
O	15494	15499	class
O	15500	15504	have
O	15505	15509	just
O	15510	15511	[
O	15511	15512	]
O	15513	15515	as
O	15516	15521	their
O	15522	15528	simple
O	15529	15534	names
O	15534	15535	.

O	15537	15545	Question
O	15545	15546	-
O	15546	15554	15202997
O	15554	15555	,
O	15556	15562	answer
O	15562	15563	-
O	15563	15571	36978943

O	15572	15573	I
O	15573	15574	'
O	15574	15576	ve
O	15577	15581	been
O	15582	15590	confused
O	15591	15593	by
O	15594	15597	the
O	15598	15602	wide
O	15603	15608	range
O	15609	15611	of
O	15612	15621	different
O	15622	15628	naming
O	15629	15636	schemes
O	15637	15639	as
O	15640	15644	well
O	15644	15645	,
O	15646	15649	and
O	15650	15653	was
O	15654	15658	just
O	15659	15664	about
O	15665	15667	to
O	15668	15671	ask
O	15672	15675	and
O	15676	15682	answer
O	15683	15685	my
O	15686	15689	own
O	15690	15698	question
O	15699	15701	on
O	15702	15706	this
O	15707	15711	when
O	15712	15713	I
O	15714	15719	found
O	15720	15724	this
O	15725	15733	question
O	15734	15738	here
O	15738	15739	.

O	15740	15741	I
O	15742	15747	think
O	15748	15750	my
O	15751	15759	findings
O	15760	15763	fit
O	15764	15766	it
O	15767	15771	well
O	15772	15778	enough
O	15778	15779	,
O	15780	15783	and
O	15784	15794	complement
O	15795	15799	what
O	15799	15800	'
O	15800	15801	s
O	15802	15809	already
O	15810	15814	here
O	15814	15815	.

O	15816	15818	My
O	15819	15824	focus
O	15825	15827	is
O	15828	15835	looking
O	15836	15839	for
O	15840	15853	documentation
O	15854	15856	on
O	15857	15860	the
O	15861	15868	various
O	15869	15874	terms
O	15874	15875	,
O	15876	15879	and
O	15880	15886	adding
O	15887	15891	some
O	15892	15896	more
O	15897	15904	related
O	15905	15910	terms
O	15911	15915	that
O	15916	15921	might
O	15922	15926	crop
O	15927	15929	up
O	15930	15932	in
O	15933	15938	other
O	15939	15945	places
O	15945	15946	.

O	15947	15955	Consider
O	15956	15959	the
O	15960	15969	following
O	15970	15977	example
O	15977	15978	:
O	15979	15980	#
O	15980	15983	pre
O	15984	15985	#
O	15985	15987	li
O	15988	15991	The
O	15992	15998	simple
O	15999	16003	name
O	16004	16006	of
O	16007	16008	D
O	16009	16011	is
O	16012	16013	D
O	16014	16015	.

O	16016	16020	That
O	16020	16021	'
O	16021	16022	s
O	16023	16027	just
O	16028	16031	the
O	16032	16036	part
O	16037	16040	you
O	16041	16046	wrote
O	16047	16051	when
O	16052	16061	declaring
O	16062	16065	the
O	16066	16071	class
O	16071	16072	.

O	16073	16082	Anonymous
O	16083	16090	classes
O	16091	16095	have
O	16096	16098	no
O	16099	16105	simple
O	16106	16110	name
O	16110	16111	.

B-api_mention	16112	16117	Class
I-api_mention	16117	16118	.
I-api_mention	16118	16131	getSimpleName
I-api_mention	16131	16132	(
I-api_mention	16132	16133	)
O	16134	16141	returns
O	16142	16146	this
O	16147	16151	name
O	16152	16154	or
O	16155	16158	the
O	16159	16164	empty
O	16165	16171	string
O	16171	16172	.

O	16173	16175	It
O	16176	16178	is
O	16179	16187	possible
O	16188	16191	for
O	16192	16195	the
O	16196	16202	simple
O	16203	16207	name
O	16208	16210	to
O	16211	16218	contain
O	16219	16220	a
O	16221	16222	$
O	16223	16225	if
O	16226	16229	you
O	16230	16235	write
O	16236	16238	it
O	16239	16243	like
O	16244	16248	this
O	16248	16249	,
O	16250	16255	since
O	16256	16257	$
O	16258	16260	is
O	16261	16262	a
O	16263	16268	valid
O	16269	16273	part
O	16274	16276	of
O	16277	16279	an
O	16280	16290	identifier
O	16290	16291	.

O	16292	16293	#
O	16293	16295	li
O	16296	16305	According
O	16306	16308	to
O	16309	16312	the
O	16313	16316	JLS
O	16317	16324	section
O	16325	16326	6
O	16326	16327	.
O	16327	16328	7
O	16329	16330	,
O	16331	16335	both
O	16336	16337	a
O	16337	16338	.
O	16338	16339	b
O	16339	16340	.
O	16340	16341	C
O	16341	16342	.
O	16342	16343	D
O	16344	16347	and
O	16348	16349	a
O	16349	16350	.
O	16350	16351	b
O	16351	16352	.
O	16352	16353	C
O	16353	16354	.
O	16354	16355	D
O	16355	16356	.
O	16356	16357	D
O	16357	16358	.
O	16358	16359	D
O	16360	16365	would
O	16366	16368	be
O	16369	16374	fully
O	16375	16384	qualified
O	16385	16390	names
O	16391	16392	,
O	16393	16396	but
O	16397	16401	only
O	16402	16403	a
O	16403	16404	.
O	16404	16405	b
O	16405	16406	.
O	16406	16407	C
O	16407	16408	.
O	16408	16409	D
O	16410	16415	would
O	16416	16418	be
O	16419	16422	the
O	16423	16432	canonical
O	16433	16437	name
O	16438	16440	of
O	16441	16442	D
O	16443	16444	.

O	16445	16447	So
O	16448	16453	every
O	16454	16463	canonical
O	16464	16468	name
O	16469	16471	is
O	16472	16473	a
O	16474	16479	fully
O	16480	16489	qualified
O	16490	16494	name
O	16494	16495	,
O	16496	16499	but
O	16500	16503	the
O	16504	16512	converes
O	16513	16515	is
O	16516	16519	not
O	16520	16526	always
O	16527	16531	true
O	16531	16532	.

B-api_mention	16533	16538	Class
I-api_mention	16538	16539	.
I-api_mention	16539	16555	getCanonicalName
I-api_mention	16555	16556	(
I-api_mention	16556	16557	)
O	16558	16562	will
O	16563	16569	return
O	16570	16573	the
O	16574	16583	canonical
O	16584	16588	name
O	16589	16591	or
O	16592	16596	null
O	16597	16598	.

O	16599	16600	#
O	16600	16602	li
B-api_mention	16603	16608	Class
I-api_mention	16608	16609	.
I-api_mention	16609	16616	getName
I-api_mention	16616	16617	(
I-api_mention	16617	16618	)
O	16619	16621	is
O	16622	16632	documented
O	16633	16635	to
O	16636	16642	return
O	16643	16646	the
O	16647	16653	binary
O	16654	16658	name
O	16659	16660	,
O	16661	16663	as
O	16664	16673	specified
O	16674	16676	in
O	16677	16680	JLS
O	16681	16688	section
O	16689	16691	13
O	16691	16692	.
O	16692	16693	1
O	16694	16695	.

O	16696	16698	In
O	16699	16703	this
O	16704	16708	case
O	16709	16711	it
O	16712	16719	returns
O	16720	16721	a
O	16721	16722	.
O	16722	16723	b
O	16723	16724	.
O	16724	16725	C
O	16725	16726	$
O	16726	16727	D
O	16728	16731	for
O	16732	16733	D
O	16734	16737	and
O	16738	16739	[
O	16739	16741	La
O	16741	16742	.
O	16742	16743	b
O	16743	16744	.
O	16744	16745	C
O	16745	16746	$
O	16746	16747	D
O	16747	16748	;
O	16749	16752	for
O	16753	16754	D
O	16754	16755	[
O	16755	16756	]
O	16757	16758	.

O	16759	16760	#
O	16760	16762	li
O	16763	16767	This
O	16768	16774	answer
O	16775	16787	demonstrates
O	16788	16792	that
O	16793	16795	it
O	16796	16798	is
O	16799	16807	possible
O	16808	16811	for
O	16812	16815	two
O	16816	16823	classes
O	16824	16830	loaded
O	16831	16833	by
O	16834	16837	the
O	16838	16842	same
O	16843	16848	class
O	16849	16855	loader
O	16856	16858	to
O	16859	16863	have
O	16864	16867	the
O	16868	16872	same
O	16873	16882	canonical
O	16883	16887	name
O	16888	16891	but
O	16892	16900	distinct
O	16901	16907	binary
O	16908	16913	names
O	16914	16915	.

O	16916	16923	Neither
O	16924	16928	name
O	16929	16931	is
O	16932	16942	sufficient
O	16943	16945	to
O	16946	16954	reliably
O	16955	16961	deduce
O	16962	16965	the
O	16966	16971	other
O	16971	16972	:
O	16973	16975	if
O	16976	16979	you
O	16980	16984	have
O	16985	16988	the
O	16989	16998	canonical
O	16999	17003	name
O	17003	17004	,
O	17005	17008	you
O	17009	17012	don
O	17012	17013	'
O	17013	17014	t
O	17015	17019	know
O	17020	17025	which
O	17026	17031	parts
O	17032	17034	of
O	17035	17038	the
O	17039	17043	name
O	17044	17047	are
O	17048	17056	packages
O	17057	17060	and
O	17061	17066	which
O	17067	17070	are
O	17071	17081	containing
O	17082	17089	classes
O	17089	17090	.

O	17091	17093	If
O	17094	17097	you
O	17098	17102	have
O	17103	17106	the
O	17107	17113	binary
O	17114	17118	name
O	17118	17119	,
O	17120	17123	you
O	17124	17127	don
O	17127	17128	'
O	17128	17129	t
O	17130	17134	know
O	17135	17140	which
O	17141	17142	$
O	17143	17147	were
O	17148	17158	introduced
O	17159	17161	as
O	17162	17172	separators
O	17173	17176	and
O	17177	17182	which
O	17183	17187	were
O	17188	17192	part
O	17193	17195	of
O	17196	17200	some
O	17201	17207	simple
O	17208	17212	name
O	17212	17213	.

O	17214	17215	#
O	17215	17217	li
O	17218	17227	Anonymous
O	17228	17235	classes
O	17236	17239	and
O	17240	17245	local
O	17246	17253	classes
O	17254	17258	have
O	17259	17261	no
O	17262	17267	fully
O	17268	17277	qualified
O	17278	17283	names
O	17284	17287	but
O	17288	17293	still
O	17294	17298	have
O	17299	17300	a
O	17301	17307	binary
O	17308	17312	name
O	17313	17314	.

O	17315	17318	The
O	17319	17323	same
O	17324	17329	holds
O	17330	17333	for
O	17334	17341	classes
O	17342	17348	nested
O	17349	17355	inside
O	17356	17360	such
O	17361	17368	classes
O	17368	17369	.

O	17370	17375	Every
O	17376	17381	class
O	17382	17385	has
O	17386	17387	a
O	17388	17394	binary
O	17395	17399	name
O	17399	17400	.

O	17401	17402	#
O	17402	17404	li
O	17405	17412	Running
O	17413	17418	javap
O	17419	17420	-
O	17420	17421	v
O	17422	17423	-
O	17423	17430	private
O	17431	17433	on
O	17434	17435	a
O	17435	17436	/
O	17436	17437	b
O	17437	17438	/
O	17438	17439	C
O	17439	17440	.
O	17440	17445	class
O	17446	17451	shows
O	17452	17456	that
O	17457	17460	the
O	17461	17469	bytecode
O	17470	17476	refers
O	17477	17479	to
O	17480	17483	the
O	17484	17488	type
O	17489	17491	of
O	17492	17493	d
O	17494	17496	as
O	17497	17499	La
O	17499	17500	/
O	17500	17501	b
O	17501	17502	/
O	17502	17503	C
O	17503	17504	$
O	17504	17505	D
O	17505	17506	;
O	17507	17510	and
O	17511	17515	that
O	17516	17518	of
O	17519	17522	the
O	17523	17528	array
O	17529	17531	ds
O	17532	17534	as
O	17535	17536	[
O	17536	17538	La
O	17538	17539	/
O	17539	17540	b
O	17540	17541	/
O	17541	17542	C
O	17542	17543	$
O	17543	17544	D
O	17544	17545	;
O	17546	17547	.

O	17548	17553	These
O	17554	17557	are
O	17558	17564	called
O	17565	17576	descriptors
O	17577	17578	,
O	17579	17582	and
O	17583	17587	they
O	17588	17591	are
O	17592	17601	specified
O	17602	17604	in
O	17605	17609	JVMS
O	17610	17617	section
O	17618	17619	4
O	17619	17620	.
O	17620	17621	3
O	17622	17623	.

O	17624	17625	#
O	17625	17627	li
O	17628	17631	The
O	17632	17637	class
O	17638	17642	name
O	17643	17644	a
O	17644	17645	/
O	17645	17646	b
O	17646	17647	/
O	17647	17648	C
O	17648	17649	$
O	17649	17650	D
O	17651	17655	used
O	17656	17658	in
O	17659	17663	both
O	17664	17666	of
O	17667	17672	these
O	17673	17684	descriptors
O	17685	17687	is
O	17688	17692	what
O	17693	17696	you
O	17697	17700	get
O	17701	17703	by
O	17704	17713	replacing
O	17714	17715	.
O	17716	17718	by
O	17719	17720	/
O	17721	17723	in
O	17724	17727	the
O	17728	17734	binary
O	17735	17739	name
O	17739	17740	.

O	17741	17744	The
O	17745	17748	JVM
O	17749	17753	spec
O	17754	17764	apparently
O	17765	17770	calls
O	17771	17775	this
O	17776	17779	the
O	17780	17788	internal
O	17789	17793	form
O	17794	17796	of
O	17797	17800	the
O	17801	17807	binary
O	17808	17812	name
O	17813	17814	.

O	17815	17819	JVMS
O	17820	17827	section
O	17828	17829	4
O	17829	17830	.
O	17830	17831	2
O	17831	17832	.
O	17832	17833	1
O	17834	17843	describes
O	17844	17846	it
O	17846	17847	,
O	17848	17851	and
O	17852	17858	states
O	17859	17863	that
O	17864	17867	the
O	17868	17878	difference
O	17879	17883	from
O	17884	17887	the
O	17888	17894	binary
O	17895	17899	name
O	17900	17904	were
O	17905	17908	for
O	17909	17919	historical
O	17920	17927	reasons
O	17927	17928	.

O	17929	17930	#
O	17930	17932	li
O	17933	17936	The
O	17937	17941	file
O	17942	17946	name
O	17947	17949	of
O	17950	17951	a
O	17952	17957	class
O	17958	17960	in
O	17961	17964	one
O	17965	17967	of
O	17968	17971	the
O	17972	17979	typical
O	17980	17988	filename
O	17988	17989	-
O	17989	17994	based
O	17995	18000	class
O	18001	18008	loaders
O	18009	18011	is
O	18012	18016	what
O	18017	18020	you
O	18021	18024	get
O	18025	18027	if
O	18028	18031	you
O	18032	18041	interpret
O	18042	18045	the
O	18046	18047	/
O	18048	18050	in
O	18051	18054	the
O	18055	18063	internal
O	18064	18068	form
O	18069	18071	of
O	18072	18075	the
O	18076	18082	binary
O	18083	18087	name
O	18088	18090	as
O	18091	18092	a
O	18093	18102	directory
O	18103	18112	separator
O	18112	18113	,
O	18114	18117	and
O	18118	18124	append
O	18125	18128	the
O	18129	18133	file
O	18134	18138	name
O	18139	18148	extension
O	18149	18150	.
O	18150	18155	class
O	18156	18158	to
O	18159	18161	it
O	18161	18162	.

O	18163	18165	It
O	18165	18166	'
O	18166	18167	s
O	18168	18176	resolved
O	18177	18185	relative
O	18186	18188	to
O	18189	18192	the
O	18193	18198	class
O	18199	18203	path
O	18204	18208	used
O	18209	18211	by
O	18212	18215	the
O	18216	18221	class
O	18222	18228	loader
O	18229	18231	in
O	18232	18240	question
O	18240	18241	.

O	18243	18251	Question
O	18251	18252	-
O	18252	18260	15202997
O	18260	18261	,
O	18262	18268	answer
O	18268	18269	-
O	18269	18277	37603567

O	18278	18282	this
O	18283	18285	is
O	18286	18290	best
O	18291	18299	document
O	18300	18301	I
O	18302	18307	found
O	18308	18318	describing
B-api_mention	18319	18326	getName
I-api_mention	18326	18327	(
I-api_mention	18327	18328	)
O	18328	18329	,
B-api_mention	18330	18343	getSimpleName
I-api_mention	18343	18344	(
I-api_mention	18344	18345	)
O	18345	18346	,
B-api_mention	18347	18363	getCanonicalName
I-api_mention	18363	18364	(
I-api_mention	18364	18365	)
O	18366	18367	#
O	18367	18368	a
O	18369	18370	#
O	18370	18373	pre

O	18375	18383	Question
O	18383	18384	-
O	18384	18392	16635398
O	18392	18393	,
O	18394	18400	answer
O	18400	18401	-
O	18401	18409	16635489

O	18410	18413	The
O	18414	18423	advantage
O	18424	18429	comes
O	18430	18434	into
O	18435	18442	account
O	18443	18447	when
O	18448	18451	the
O	18452	18462	operations
O	18463	18466	can
O	18467	18469	be
O	18470	18478	executed
O	18479	18481	in
O	18482	18490	parallel
O	18490	18491	.

O	18492	18493	(
O	18493	18496	See
O	18497	18498	#
O	18498	18499	a
O	18500	18501	-
O	18502	18505	the
O	18506	18513	section
O	18514	18519	about
O	18520	18528	internal
O	18529	18532	and
O	18533	18541	external
O	18542	18551	iteration
O	18551	18552	)
O	18553	18554	#
O	18554	18556	li
O	18557	18560	The
O	18561	18565	main
O	18566	18575	advantage
O	18576	18580	from
O	18581	18583	my
O	18584	18589	point
O	18590	18592	of
O	18593	18597	view
O	18598	18600	is
O	18601	18605	that
O	18606	18609	the
O	18610	18624	implementation
O	18625	18627	of
O	18628	18632	what
O	18633	18635	is
O	18636	18638	to
O	18639	18641	be
O	18642	18646	done
O	18647	18653	within
O	18654	18657	the
O	18658	18662	loop
O	18663	18666	can
O	18667	18669	be
O	18670	18677	defined
O	18678	18685	without
O	18686	18692	having
O	18693	18695	to
O	18696	18702	decide
O	18703	18705	if
O	18706	18708	it
O	18709	18713	will
O	18714	18716	be
O	18717	18725	executed
O	18726	18728	in
O	18729	18737	parallel
O	18738	18740	or
O	18741	18751	sequential
O	18752	18753	#
O	18753	18755	li
O	18756	18758	If
O	18759	18762	you
O	18763	18767	want
O	18768	18772	your
O	18773	18777	loop
O	18778	18780	to
O	18781	18783	be
O	18784	18792	executed
O	18793	18795	in
O	18796	18804	parallel
O	18805	18808	you
O	18809	18814	could
O	18815	18821	simply
O	18822	18827	write
O	18828	18833	joins
B-api_mention	18833	18834	.
I-api_mention	18834	18848	parallelStream
I-api_mention	18848	18849	(
I-api_mention	18849	18853	args
I-api_mention	18853	18854	)
I-api_mention	18854	18855	.
I-api_mention	18855	18862	forEach
I-api_mention	18862	18863	(
I-api_mention	18863	18867	args
I-api_mention	18867	18868	)
O	18868	18869	;
O	18870	18873	You
O	18874	18878	will
O	18879	18883	have
O	18884	18886	to
O	18887	18892	write
O	18893	18897	some
O	18898	18903	extra
O	18904	18908	code
O	18909	18912	for
O	18913	18919	thread
O	18920	18928	handling
O	18929	18932	etc
O	18932	18933	.

O	18934	18938	Note
O	18939	18940	:
O	18941	18944	for
O	18945	18947	my
O	18948	18954	answer
O	18955	18956	I
O	18957	18964	assumed
O	18965	18970	joins
O	18971	18983	implementing
O	18984	18987	the
B-api_mention	18988	18992	java
I-api_mention	18992	18993	.
I-api_mention	18993	18997	util
I-api_mention	18997	18998	.
I-api_mention	18998	19004	Stream
O	19005	19014	interface
O	19014	19015	.

O	19016	19018	If
O	19019	19024	joins
O	19025	19035	implements
O	19036	19040	only
O	19041	19044	the
B-api_mention	19045	19049	java
I-api_mention	19049	19050	.
I-api_mention	19050	19054	util
I-api_mention	19054	19055	.
I-api_mention	19055	19063	Iterable
O	19064	19073	interface
O	19074	19078	this
O	19079	19081	is
O	19082	19084	no
O	19085	19091	longer
O	19092	19096	true
O	19096	19097	.

O	19099	19107	Question
O	19107	19108	-
O	19108	19116	16635398
O	19116	19117	,
O	19118	19124	answer
O	19124	19125	-
O	19125	19133	16636899

O	19134	19135	I
O	19136	19140	feel
O	19141	19145	that
O	19146	19147	I
O	19148	19152	need
O	19153	19155	to
O	19156	19162	extend
O	19163	19165	my
O	19166	19173	comment
O	19174	19175	a
O	19176	19179	bit
O	19179	19180	.
O	19180	19181	.
O	19181	19182	.

O	19183	19188	About
O	19189	19197	paradigm
O	19197	19198	\
O	19198	19203	style
O	19204	19208	That
O	19208	19209	'
O	19209	19210	s
O	19211	19219	probably
O	19220	19223	the
O	19224	19228	most
O	19229	19236	notable
O	19237	19243	aspect
O	19243	19244	.

O	19245	19247	FP
O	19248	19254	became
O	19255	19262	popular
O	19263	19266	due
O	19267	19269	to
O	19270	19274	what
O	19275	19278	you
O	19279	19282	can
O	19283	19286	get
O	19287	19295	avoiding
O	19296	19300	side
O	19300	19301	-
O	19301	19308	effects
O	19308	19309	.

O	19310	19311	I
O	19312	19315	won
O	19315	19316	'
O	19316	19317	t
O	19318	19323	delve
O	19324	19328	deep
O	19329	19333	into
O	19334	19338	what
O	19339	19343	pros
O	19343	19344	\
O	19344	19348	cons
O	19349	19352	you
O	19353	19356	can
O	19357	19360	get
O	19361	19365	from
O	19366	19370	this
O	19370	19371	,
O	19372	19377	since
O	19378	19382	this
O	19383	19385	is
O	19386	19389	not
O	19390	19397	related
O	19398	19400	to
O	19401	19404	the
O	19405	19413	question
O	19413	19414	.

O	19415	19422	However
O	19422	19423	,
O	19424	19425	I
O	19426	19430	will
O	19431	19434	say
O	19435	19439	that
O	19440	19443	the
O	19444	19453	iteration
O	19454	19459	using
B-api_mention	19460	19468	Iterable
I-api_mention	19468	19469	.
I-api_mention	19469	19476	forEach
O	19477	19479	is
O	19480	19488	inspired
O	19489	19491	by
O	19492	19494	FP
O	19495	19498	and
O	19499	19505	rather
O	19506	19512	result
O	19513	19515	of
O	19516	19524	bringing
O	19525	19529	more
O	19530	19532	FP
O	19533	19535	to
O	19536	19540	Java
O	19541	19542	(
O	19542	19552	ironically
O	19552	19553	,
O	19554	19555	I
O	19555	19556	'
O	19556	19557	d
O	19558	19561	say
O	19562	19566	that
O	19567	19572	there
O	19573	19575	is
O	19576	19578	no
O	19579	19583	much
O	19584	19587	use
O	19588	19591	for
B-api_mention	19592	19599	forEach
O	19600	19602	in
O	19603	19607	pure
O	19608	19610	FP
O	19610	19611	,
O	19612	19617	since
O	19618	19620	it
O	19621	19625	does
O	19626	19633	nothing
O	19634	19640	except
O	19641	19652	introducing
O	19653	19657	side
O	19657	19658	-
O	19658	19665	effects
O	19665	19666	)
O	19666	19667	.

O	19668	19670	In
O	19671	19674	the
O	19675	19678	end
O	19679	19680	I
O	19681	19686	would
O	19687	19690	say
O	19691	19695	that
O	19696	19698	it
O	19699	19701	is
O	19702	19708	rather
O	19709	19710	a
O	19711	19717	matter
O	19718	19720	of
O	19721	19726	taste
O	19726	19727	\
O	19727	19732	style
O	19732	19733	\
O	19733	19741	paradigm
O	19742	19745	you
O	19746	19749	are
O	19750	19759	currently
O	19760	19767	writing
O	19768	19770	in
O	19770	19771	.

O	19772	19777	About
O	19778	19789	parallelism
O	19789	19790	.

O	19791	19795	From
O	19796	19807	performance
O	19808	19813	point
O	19814	19816	of
O	19817	19821	view
O	19822	19827	there
O	19828	19830	is
O	19831	19833	no
O	19834	19842	promised
O	19843	19850	notable
O	19851	19859	benefits
O	19860	19864	from
O	19865	19870	using
B-api_mention	19871	19879	Iterable
I-api_mention	19879	19880	.
I-api_mention	19880	19887	forEach
O	19888	19892	over
O	19893	19900	foreach
O	19900	19901	(
O	19901	19902	.
O	19902	19903	.
O	19903	19904	.
O	19904	19905	)
O	19905	19906	.

O	19907	19916	According
O	19917	19919	to
O	19920	19928	official
O	19929	19933	docs
O	19934	19936	on
B-api_mention	19937	19945	Iterable
I-api_mention	19945	19946	.
I-api_mention	19946	19953	forEach
O	19954	19955	:
O	19956	19957	#
O	19957	19967	blockquote
O	19968	19969	.
O	19969	19970	.
O	19970	19971	.

O	19972	19973	i
O	19973	19974	.
O	19974	19975	e
O	19975	19976	.
O	19977	19981	docs
O	19982	19988	pretty
O	19989	19993	much
O	19994	19999	clear
O	20000	20004	that
O	20005	20010	there
O	20011	20015	will
O	20016	20018	be
O	20019	20021	no
O	20022	20030	implicit
O	20031	20042	parallelism
O	20042	20043	.

O	20044	20050	Adding
O	20051	20054	one
O	20055	20060	would
O	20061	20063	be
O	20064	20067	LSP
O	20068	20077	violation
O	20077	20078	.

O	20079	20082	Now
O	20082	20083	,
O	20084	20089	there
O	20090	20093	are
O	20094	20095	"
O	20095	20104	parallell
O	20105	20116	collections
O	20116	20117	"
O	20118	20122	that
O	20123	20126	are
O	20127	20135	promised
O	20136	20138	in
O	20139	20143	Java
O	20144	20145	8
O	20145	20146	,
O	20147	20150	but
O	20151	20153	to
O	20154	20158	work
O	20159	20163	with
O	20164	20169	those
O	20170	20173	you
O	20174	20178	need
O	20179	20181	to
O	20182	20184	me
O	20185	20189	more
O	20190	20198	explicit
O	20199	20202	and
O	20203	20206	put
O	20207	20211	some
O	20212	20217	extra
O	20218	20222	care
O	20223	20225	to
O	20226	20229	use
O	20230	20234	them
O	20235	20236	(
O	20236	20239	see
O	20240	20249	mschenk74
O	20249	20250	'
O	20250	20251	s
O	20252	20258	answer
O	20259	20262	for
O	20263	20270	example
O	20270	20271	)
O	20271	20272	.

O	20273	20276	BTW
O	20276	20277	:
O	20278	20280	in
O	20281	20285	this
O	20286	20290	case
B-api_mention	20291	20297	Stream
I-api_mention	20297	20298	.
I-api_mention	20298	20305	forEach
O	20306	20310	will
O	20311	20313	be
O	20314	20318	used
O	20318	20319	,
O	20320	20323	and
O	20324	20326	it
O	20327	20332	doesn
O	20332	20333	'
O	20333	20334	t
O	20335	20344	guarantee
O	20345	20349	that
O	20350	20356	actual
O	20357	20361	work
O	20362	20366	will
O	20367	20369	be
O	20370	20374	done
O	20375	20377	in
O	20378	20387	parallell
O	20388	20389	(
O	20389	20396	depends
O	20397	20399	on
O	20400	20410	underlying
O	20411	20421	collection
O	20421	20422	)
O	20422	20423	.

O	20424	20430	UPDATE
O	20430	20431	:
O	20432	20437	might
O	20438	20440	be
O	20441	20444	not
O	20445	20449	that
O	20450	20457	obvious
O	20458	20461	and
O	20462	20463	a
O	20464	20470	little
O	20471	20480	stretched
O	20481	20483	at
O	20484	20485	a
O	20486	20492	glance
O	20493	20496	but
O	20497	20502	there
O	20503	20505	is
O	20506	20513	another
O	20514	20519	facet
O	20520	20522	of
O	20523	20528	style
O	20529	20532	and
O	20533	20544	readability
O	20545	20556	perspective
O	20556	20557	.

O	20558	20563	First
O	20564	20566	of
O	20567	20570	all
O	20571	20572	-
O	20573	20578	plain
O	20579	20582	old
O	20583	20591	forloops
O	20592	20595	are
O	20596	20601	plain
O	20602	20605	and
O	20606	20609	old
O	20609	20610	.

O	20611	20620	Everybody
O	20621	20628	already
O	20629	20634	knows
O	20635	20639	them
O	20639	20640	.

O	20641	20647	Second
O	20647	20648	,
O	20649	20652	and
O	20653	20657	more
O	20658	20667	important
O	20668	20669	-
O	20670	20673	you
O	20674	20682	probably
O	20683	20687	want
O	20688	20690	to
O	20691	20694	use
B-api_mention	20695	20703	Iterable
I-api_mention	20703	20704	.
I-api_mention	20704	20711	forEach
O	20712	20716	only
O	20717	20721	with
O	20722	20725	one
O	20725	20726	-
O	20726	20731	liner
O	20732	20739	lambdas
O	20739	20740	.

O	20741	20743	If
O	20744	20745	"
O	20745	20749	body
O	20749	20750	"
O	20751	20755	gets
O	20756	20763	heavier
O	20764	20765	-
O	20766	20770	they
O	20771	20775	tend
O	20776	20778	to
O	20779	20781	be
O	20782	20785	not
O	20785	20786	-
O	20786	20790	that
O	20791	20799	readable
O	20799	20800	.

O	20801	20804	You
O	20805	20809	have
O	20810	20811	2
O	20812	20819	options
O	20820	20824	from
O	20825	20829	here
O	20830	20831	-
O	20832	20835	use
O	20836	20841	inner
O	20842	20849	classes
O	20850	20851	(
O	20851	20855	yuck
O	20855	20856	)
O	20857	20859	or
O	20860	20863	use
O	20864	20869	plain
O	20870	20873	old
O	20874	20881	forloop
O	20881	20882	.

O	20883	20889	People
O	20890	20895	often
O	20896	20900	gets
O	20901	20908	annoyed
O	20909	20913	when
O	20914	20918	they
O	20919	20922	see
O	20923	20926	the
O	20927	20931	same
O	20932	20938	things
O	20939	20940	(
O	20940	20949	iteratins
O	20950	20954	over
O	20955	20966	collections
O	20966	20967	)
O	20968	20973	being
O	20974	20978	done
O	20979	20986	various
O	20987	20991	vays
O	20991	20992	/
O	20992	20998	styles
O	20999	21001	in
O	21002	21005	the
O	21006	21010	same
O	21011	21019	codebase
O	21019	21020	,
O	21021	21024	and
O	21025	21029	this
O	21030	21035	seems
O	21036	21038	to
O	21039	21041	be
O	21042	21045	the
O	21046	21050	case
O	21050	21051	.

O	21052	21057	Again
O	21057	21058	,
O	21059	21063	this
O	21064	21069	might
O	21070	21072	or
O	21073	21078	might
O	21079	21082	not
O	21083	21085	be
O	21086	21088	an
O	21089	21094	issue
O	21094	21095	.

O	21096	21103	Depends
O	21104	21106	on
O	21107	21113	people
O	21114	21121	working
O	21122	21124	on
O	21125	21129	code
O	21129	21130	.

O	21132	21140	Question
O	21140	21141	-
O	21141	21149	16635398
O	21149	21150	,
O	21151	21157	answer
O	21157	21158	-
O	21158	21166	16637740

B-api_mention	21167	21174	forEach
I-api_mention	21174	21175	(
I-api_mention	21175	21179	args
I-api_mention	21179	21180	)
O	21181	21184	can
O	21185	21187	be
O	21188	21199	implemented
O	21200	21202	to
O	21203	21205	be
O	21206	21212	faster
O	21213	21217	than
O	21218	21221	for
O	21221	21222	-
O	21222	21226	each
O	21227	21231	loop
O	21231	21232	,
O	21233	21240	because
O	21241	21244	the
O	21245	21253	iterable
O	21254	21259	knows
O	21260	21263	the
O	21264	21268	best
O	21269	21272	way
O	21273	21275	to
O	21276	21283	iterate
O	21284	21287	its
O	21288	21296	elements
O	21296	21297	,
O	21298	21300	as
O	21301	21308	opposed
O	21309	21311	to
O	21312	21315	the
O	21316	21324	standard
O	21325	21333	iterator
O	21334	21337	way
O	21337	21338	.

O	21339	21341	So
O	21342	21345	the
O	21346	21356	difference
O	21357	21359	is
O	21360	21364	loop
O	21365	21375	internally
O	21376	21378	or
O	21379	21383	loop
O	21384	21394	externally
O	21394	21395	.

O	21396	21399	For
O	21400	21407	example
B-api_mention	21408	21417	ArrayList
I-api_mention	21417	21418	.
I-api_mention	21418	21425	forEach
I-api_mention	21425	21426	(
I-api_mention	21426	21430	args
I-api_mention	21430	21431	)
O	21432	21435	may
O	21436	21438	be
O	21439	21445	simply
O	21446	21457	implemented
O	21458	21460	as
O	21461	21462	#
O	21462	21465	pre
O	21466	21468	as
O	21469	21476	opposed
O	21477	21479	to
O	21480	21483	the
O	21484	21487	for
O	21487	21488	-
O	21488	21492	each
O	21493	21497	loop
O	21498	21503	which
O	21504	21512	requires
O	21513	21514	a
O	21515	21518	lot
O	21519	21521	of
O	21522	21533	scaffolding
O	21534	21535	#
O	21535	21538	pre
O	21539	21546	However
O	21546	21547	,
O	21548	21550	we
O	21551	21555	also
O	21556	21560	need
O	21561	21563	to
O	21564	21571	account
O	21572	21575	for
O	21576	21579	two
O	21580	21588	overhead
O	21589	21594	costs
O	21595	21597	by
O	21598	21603	using
B-api_mention	21604	21611	forEach
I-api_mention	21611	21612	(
I-api_mention	21612	21616	args
I-api_mention	21616	21617	)
O	21618	21619	,
O	21620	21623	one
O	21624	21626	is
O	21627	21633	making
O	21634	21637	the
O	21638	21644	lambda
O	21645	21651	object
O	21651	21652	,
O	21653	21656	the
O	21657	21662	other
O	21663	21665	is
O	21666	21674	invoking
O	21675	21678	the
O	21679	21685	lambda
O	21686	21692	method
O	21692	21693	.

O	21694	21698	They
O	21699	21702	are
O	21703	21711	probably
O	21712	21715	not
O	21716	21727	significant
O	21727	21728	.
O	21729	21732	see
O	21733	21737	also
O	21738	21739	#
O	21739	21740	a
O	21741	21744	for
O	21745	21754	comparing
O	21755	21763	internal
O	21763	21764	/
O	21764	21772	external
O	21773	21783	iterations
O	21784	21787	for
O	21788	21797	different
O	21798	21801	use
O	21802	21807	cases
O	21807	21808	.

O	21810	21818	Question
O	21818	21819	-
O	21819	21827	16635398
O	21827	21828	,
O	21829	21835	answer
O	21835	21836	-
O	21836	21844	20177092

O	21845	21848	The
O	21849	21855	better
O	21856	21864	practice
O	21865	21867	is
O	21868	21870	to
O	21871	21874	use
O	21875	21878	for
O	21878	21879	-
O	21879	21883	each
O	21884	21885	.

O	21886	21893	Besides
O	21894	21903	violating
O	21904	21907	the
O	21908	21912	Keep
O	21913	21915	It
O	21916	21922	Simple
O	21922	21923	,
O	21924	21930	Stupid
O	21931	21940	principle
O	21940	21941	,
O	21942	21945	the
O	21946	21949	new
O	21949	21950	-
O	21950	21957	fangled
B-api_mention	21958	21965	forEach
I-api_mention	21965	21966	(
I-api_mention	21966	21970	args
I-api_mention	21970	21971	)
O	21972	21975	has
O	21976	21978	at
O	21979	21984	least
O	21985	21988	the
O	21989	21998	following
O	21999	22011	deficiencies
O	22011	22012	:
O	22013	22014	#
O	22014	22016	li
O	22017	22020	Can
O	22020	22021	'
O	22021	22022	t
O	22023	22026	use
O	22027	22030	non
O	22030	22031	-
O	22031	22036	final
O	22037	22046	variables
O	22047	22048	.

O	22049	22051	So
O	22051	22052	,
O	22053	22057	code
O	22058	22062	like
O	22063	22066	the
O	22067	22076	following
O	22077	22080	can
O	22080	22081	'
O	22081	22082	t
O	22083	22085	be
O	22086	22092	turned
O	22093	22097	into
O	22098	22099	a
B-api_mention	22100	22107	forEach
O	22108	22114	lambda
O	22114	22115	:
O	22116	22117	#
O	22117	22127	blockquote
O	22128	22129	#
O	22129	22131	li
O	22132	22135	Can
O	22135	22136	'
O	22136	22137	t
O	22138	22144	handle
O	22145	22152	checked
O	22153	22163	exceptions
O	22164	22165	.

B-api_mention	22166	22173	Lambdas
O	22174	22178	aren
O	22178	22179	'
O	22179	22180	t
O	22181	22189	actually
O	22190	22199	forbidden
O	22200	22204	from
O	22205	22213	throwing
O	22214	22221	checked
O	22222	22232	exceptions
O	22232	22233	,
O	22234	22237	but
O	22238	22244	common
O	22245	22255	functional
O	22256	22266	interfaces
O	22267	22271	like
B-api_mention	22272	22280	Consumer
O	22281	22284	don
O	22284	22285	'
O	22285	22286	t
O	22287	22294	declare
O	22295	22298	any
O	22298	22299	.

O	22300	22309	Therefore
O	22309	22310	,
O	22311	22314	any
O	22315	22319	code
O	22320	22324	that
O	22325	22331	throws
O	22332	22339	checked
O	22340	22350	exceptions
O	22351	22355	must
O	22356	22360	wrap
O	22361	22365	them
O	22366	22368	in
O	22369	22372	try
O	22372	22373	-
O	22373	22378	catch
O	22379	22381	or
B-api_mention	22382	22392	Throwables
I-api_mention	22392	22393	.
I-api_mention	22393	22402	propagate
I-api_mention	22402	22403	(
I-api_mention	22403	22407	args
I-api_mention	22407	22408	)
O	22409	22410	.

O	22411	22414	But
O	22415	22419	even
O	22420	22422	if
O	22423	22426	you
O	22427	22429	do
O	22430	22434	that
O	22434	22435	,
O	22436	22438	it
O	22438	22439	'
O	22439	22440	s
O	22441	22444	not
O	22445	22451	always
O	22452	22457	clear
O	22458	22462	what
O	22463	22470	happens
O	22471	22473	to
O	22474	22477	the
O	22478	22484	thrown
O	22485	22494	exception
O	22494	22495	.

O	22496	22498	It
O	22499	22504	could
O	22505	22508	get
O	22509	22518	swallowed
O	22519	22528	somewhere
O	22529	22531	in
O	22532	22535	the
O	22536	22540	guts
O	22541	22543	of
B-api_mention	22544	22551	forEach
I-api_mention	22551	22552	(
I-api_mention	22552	22556	args
I-api_mention	22556	22557	)
O	22558	22559	#
O	22559	22561	li
O	22562	22569	Limited
O	22570	22574	flow
O	22574	22575	-
O	22575	22582	control
O	22583	22584	.

O	22585	22586	A
O	22587	22593	return
O	22594	22596	in
O	22597	22598	a
O	22599	22605	lambda
O	22606	22612	equals
O	22613	22614	a
O	22615	22623	continue
O	22624	22626	in
O	22627	22628	a
O	22629	22632	for
O	22632	22633	-
O	22633	22637	each
O	22637	22638	,
O	22639	22642	but
O	22643	22648	there
O	22649	22651	is
O	22652	22654	no
O	22655	22665	equivalent
O	22666	22668	to
O	22669	22670	a
O	22671	22676	break
O	22677	22678	.

O	22679	22681	It
O	22681	22682	'
O	22682	22683	s
O	22684	22688	also
O	22689	22698	difficult
O	22699	22701	to
O	22702	22704	do
O	22705	22711	things
O	22712	22716	like
O	22717	22723	return
O	22724	22730	values
O	22730	22731	,
O	22732	22737	short
O	22738	22745	circuit
O	22745	22746	,
O	22747	22749	or
O	22750	22753	set
O	22754	22759	flags
O	22760	22761	(
O	22761	22766	which
O	22767	22772	would
O	22773	22777	have
O	22778	22788	alleviated
O	22789	22795	things
O	22796	22797	a
O	22798	22801	bit
O	22801	22802	,
O	22803	22805	if
O	22806	22808	it
O	22809	22813	wasn
O	22813	22814	'
O	22814	22815	t
O	22816	22817	a
O	22818	22827	violation
O	22828	22830	of
O	22831	22834	the
O	22835	22837	no
O	22838	22841	non
O	22841	22842	-
O	22842	22847	final
O	22848	22857	variables
O	22858	22862	rule
O	22862	22863	)
O	22863	22864	.

O	22865	22866	"
O	22866	22870	This
O	22871	22873	is
O	22874	22877	not
O	22878	22882	just
O	22883	22885	an
O	22886	22898	optimization
O	22898	22899	,
O	22900	22903	but
O	22904	22912	critical
O	22913	22917	when
O	22918	22921	you
O	22922	22930	consider
O	22931	22935	that
O	22936	22940	some
O	22941	22950	sequences
O	22951	22952	(
O	22952	22956	like
O	22957	22964	reading
O	22965	22968	the
O	22969	22974	lines
O	22975	22977	in
O	22978	22979	a
O	22980	22984	file
O	22984	22985	)
O	22986	22989	may
O	22990	22994	have
O	22995	22999	side
O	22999	23000	-
O	23000	23007	effects
O	23007	23008	,
O	23009	23011	or
O	23012	23015	you
O	23016	23019	may
O	23020	23024	have
O	23025	23027	an
O	23028	23036	infinite
O	23037	23045	sequence
O	23045	23046	.
O	23046	23047	"
O	23048	23049	#
O	23049	23051	li
O	23052	23057	Might
O	23058	23065	execute
O	23066	23068	in
O	23069	23077	parallel
O	23078	23079	,
O	23080	23085	which
O	23086	23088	is
O	23089	23090	a
O	23091	23099	horrible
O	23099	23100	,
O	23101	23109	horrible
O	23110	23115	thing
O	23116	23119	for
O	23120	23123	all
O	23124	23127	but
O	23128	23131	the
O	23132	23133	0
O	23133	23134	.
O	23134	23135	1
O	23135	23136	%
O	23137	23139	of
O	23140	23144	your
O	23145	23149	code
O	23150	23154	that
O	23155	23160	needs
O	23161	23163	to
O	23164	23166	be
O	23167	23176	optimized
O	23176	23177	.

O	23178	23181	Any
O	23182	23190	parallel
O	23191	23195	code
O	23196	23199	has
O	23200	23202	to
O	23203	23205	be
O	23206	23213	thought
O	23214	23221	through
O	23222	23223	(
O	23223	23227	even
O	23228	23230	if
O	23231	23233	it
O	23234	23239	doesn
O	23239	23240	'
O	23240	23241	t
O	23242	23245	use
O	23246	23251	locks
O	23251	23252	,
O	23253	23262	volatiles
O	23262	23263	,
O	23264	23267	and
O	23268	23273	other
O	23274	23286	particularly
O	23287	23292	nasty
O	23293	23300	aspects
O	23301	23303	of
O	23304	23315	traditional
O	23316	23321	multi
O	23321	23322	-
O	23322	23330	threaded
O	23331	23340	execution
O	23340	23341	)
O	23341	23342	.

O	23343	23346	Any
O	23347	23350	bug
O	23351	23355	will
O	23356	23358	be
O	23359	23364	tough
O	23365	23367	to
O	23368	23372	find
O	23372	23373	.

O	23374	23375	#
O	23375	23377	li
O	23378	23383	Might
O	23384	23388	hurt
O	23389	23400	performance
O	23401	23402	,
O	23403	23410	because
O	23411	23414	the
O	23415	23418	JIT
O	23419	23422	can
O	23422	23423	'
O	23423	23424	t
O	23425	23433	optimize
B-api_mention	23434	23441	forEach
I-api_mention	23441	23442	(
I-api_mention	23442	23443	)
O	23443	23444	+
O	23444	23450	lambda
O	23451	23453	to
O	23454	23457	the
O	23458	23462	same
O	23463	23469	extent
O	23470	23472	as
O	23473	23478	plain
O	23479	23484	loops
O	23484	23485	,
O	23486	23496	especially
O	23497	23500	now
O	23501	23505	that
O	23506	23513	lambdas
O	23514	23517	are
O	23518	23521	new
O	23521	23522	.

O	23523	23525	By
O	23526	23527	"
O	23527	23539	optimization
O	23539	23540	"
O	23541	23542	I
O	23543	23545	do
O	23546	23549	not
O	23550	23554	mean
O	23555	23558	the
O	23559	23567	overhead
O	23568	23570	of
O	23571	23578	calling
O	23579	23586	lambdas
O	23587	23588	(
O	23588	23593	which
O	23594	23596	is
O	23597	23602	small
O	23602	23603	)
O	23603	23604	,
O	23605	23608	but
O	23609	23611	to
O	23612	23615	the
O	23616	23629	sophisticated
O	23630	23638	analysis
O	23639	23642	and
O	23643	23657	transformation
O	23658	23662	that
O	23663	23666	the
O	23667	23673	modern
O	23674	23677	JIT
O	23678	23686	compiler
O	23687	23695	performs
O	23696	23698	on
O	23699	23706	running
O	23707	23711	code
O	23711	23712	.

O	23713	23714	#
O	23714	23716	li
O	23717	23719	If
O	23720	23723	you
O	23724	23726	do
O	23727	23731	need
O	23732	23743	parallelism
O	23743	23744	,
O	23745	23747	it
O	23748	23750	is
O	23751	23759	probably
O	23760	23764	much
O	23765	23771	faster
O	23772	23775	and
O	23776	23779	not
O	23780	23784	much
O	23785	23789	more
O	23790	23799	difficult
O	23800	23802	to
O	23803	23806	use
O	23807	23809	an
B-api_mention	23810	23825	ExecutorService
O	23826	23827	.

B-api_mention	23828	23835	Streams
O	23836	23839	are
O	23840	23844	both
O	23845	23856	automagical
O	23857	23858	(
O	23858	23862	read
O	23862	23863	:
O	23864	23867	don
O	23867	23868	'
O	23868	23869	t
O	23870	23874	know
O	23875	23879	much
O	23880	23885	about
O	23886	23890	your
O	23891	23898	problem
O	23898	23899	)
O	23900	23903	and
O	23904	23907	use
O	23908	23909	a
O	23910	23921	specialized
O	23922	23923	(
O	23923	23927	read
O	23927	23928	:
O	23929	23940	inefficient
O	23941	23944	for
O	23945	23948	the
O	23949	23956	general
O	23957	23961	case
O	23961	23962	)
O	23963	23978	parallelization
O	23979	23987	strategy
O	23988	23989	(
O	23990	23994	fork
O	23994	23995	-
O	23995	23999	join
O	24000	24009	recursive
O	24010	24023	decomposition
O	24024	24025	)
O	24025	24026	.

O	24027	24028	#
O	24028	24030	li
O	24031	24036	Makes
O	24037	24046	debugging
O	24047	24051	more
O	24052	24061	confusing
O	24062	24063	,
O	24064	24071	because
O	24072	24074	of
O	24075	24078	the
O	24079	24085	nested
O	24086	24090	call
O	24091	24100	hierarchy
O	24101	24104	and
O	24104	24105	,
O	24106	24109	god
O	24110	24116	forbid
O	24116	24117	,
O	24118	24126	parallel
O	24127	24136	execution
O	24136	24137	.

O	24138	24141	The
O	24142	24150	debugger
O	24151	24154	may
O	24155	24159	have
O	24160	24166	issues
O	24167	24177	displaying
O	24178	24187	variables
O	24188	24192	from
O	24193	24196	the
O	24197	24208	surrounding
O	24209	24213	code
O	24213	24214	,
O	24215	24218	and
O	24219	24225	things
O	24226	24230	like
O	24231	24235	step
O	24235	24236	-
O	24236	24243	through
O	24244	24247	may
O	24248	24251	not
O	24252	24256	work
O	24257	24259	as
O	24260	24268	expected
O	24268	24269	.

O	24270	24271	#
O	24271	24273	li
B-api_mention	24274	24281	Streams
O	24282	24284	in
O	24285	24292	general
O	24293	24296	are
O	24297	24301	more
O	24302	24311	difficult
O	24312	24314	to
O	24315	24319	code
O	24319	24320	,
O	24321	24325	read
O	24325	24326	,
O	24327	24330	and
O	24331	24336	debug
O	24337	24338	.

O	24339	24347	Actually
O	24347	24348	,
O	24349	24353	this
O	24354	24356	is
O	24357	24361	true
O	24362	24364	of
O	24365	24372	complex
O	24373	24374	"
O	24375	24381	fluent
O	24382	24383	"
O	24384	24388	APIs
O	24389	24391	in
O	24392	24399	general
O	24399	24400	.

O	24401	24404	The
O	24405	24416	combination
O	24417	24419	of
O	24420	24427	complex
O	24428	24434	single
O	24435	24445	statements
O	24445	24446	,
O	24447	24452	heavy
O	24453	24456	use
O	24457	24459	of
O	24460	24468	generics
O	24468	24469	,
O	24470	24473	and
O	24474	24478	lack
O	24479	24481	of
O	24482	24494	intermediate
O	24495	24504	variables
O	24505	24513	conspire
O	24514	24516	to
O	24517	24524	produce
O	24525	24534	confusing
O	24535	24540	error
O	24541	24549	messages
O	24550	24553	and
O	24554	24563	frustrate
O	24564	24573	debugging
O	24573	24574	.

O	24575	24582	Instead
O	24583	24585	of
O	24586	24587	"
O	24587	24591	this
O	24592	24598	method
O	24599	24604	doesn
O	24604	24605	'
O	24605	24606	t
O	24607	24611	have
O	24612	24614	an
O	24615	24623	overload
O	24624	24627	for
O	24628	24632	type
O	24633	24634	X
O	24634	24635	"
O	24636	24639	you
O	24640	24643	get
O	24644	24646	an
O	24647	24652	error
O	24653	24660	message
O	24661	24667	closer
O	24668	24670	to
O	24671	24672	"
O	24672	24681	somewhere
O	24682	24685	you
O	24686	24692	messed
O	24693	24695	up
O	24696	24699	the
O	24700	24705	types
O	24705	24706	,
O	24707	24710	but
O	24711	24713	we
O	24714	24717	don
O	24717	24718	'
O	24718	24719	t
O	24720	24724	know
O	24725	24730	where
O	24731	24733	or
O	24734	24737	how
O	24737	24738	.
O	24738	24739	"
O	24740	24749	Similarly
O	24749	24750	,
O	24751	24754	you
O	24755	24758	can
O	24758	24759	'
O	24759	24760	t
O	24761	24765	step
O	24766	24773	through
O	24774	24777	and
O	24778	24785	examine
O	24786	24792	things
O	24793	24795	in
O	24796	24797	a
O	24798	24806	debugger
O	24807	24809	as
O	24810	24816	easily
O	24817	24819	as
O	24820	24824	when
O	24825	24828	the
O	24829	24833	code
O	24834	24836	is
O	24837	24843	broken
O	24844	24848	into
O	24849	24857	multiple
O	24858	24868	statements
O	24868	24869	,
O	24870	24873	and
O	24874	24886	intermediate
O	24887	24893	values
O	24894	24897	are
O	24898	24903	saved
O	24904	24906	to
O	24907	24916	variables
O	24916	24917	.

O	24918	24925	Finally
O	24925	24926	,
O	24927	24934	reading
O	24935	24938	the
O	24939	24943	code
O	24944	24947	and
O	24948	24961	understanding
O	24962	24965	the
O	24966	24971	types
O	24972	24975	and
O	24976	24984	behavior
O	24985	24987	at
O	24988	24992	each
O	24993	24998	stage
O	24999	25001	of
O	25002	25011	execution
O	25012	25015	may
O	25016	25018	be
O	25019	25022	non
O	25022	25023	-
O	25023	25030	trivial
O	25030	25031	.

O	25032	25033	#
O	25033	25035	li
O	25036	25042	Sticks
O	25043	25046	out
O	25047	25051	like
O	25052	25053	a
O	25054	25058	sore
O	25059	25064	thumb
O	25065	25066	.

O	25067	25070	The
O	25071	25075	Java
O	25076	25084	language
O	25085	25092	already
O	25093	25096	has
O	25097	25100	the
O	25101	25104	for
O	25104	25105	-
O	25105	25109	each
O	25110	25119	statement
O	25119	25120	.

O	25121	25124	Why
O	25125	25132	replace
O	25133	25135	it
O	25136	25140	with
O	25141	25142	a
O	25143	25151	function
O	25152	25156	call
O	25156	25157	?

O	25158	25161	Why
O	25162	25171	encourage
O	25172	25178	hiding
O	25179	25183	side
O	25183	25184	-
O	25184	25191	effects
O	25192	25201	somewhere
O	25202	25204	in
O	25205	25216	expressions
O	25216	25217	?

O	25218	25221	Why
O	25222	25231	encourage
O	25232	25240	unwieldy
O	25241	25244	one
O	25244	25245	-
O	25245	25251	liners
O	25251	25252	?

O	25253	25259	Mixing
O	25260	25267	regular
O	25268	25271	for
O	25271	25272	-
O	25272	25276	each
O	25277	25280	and
O	25281	25284	new
B-api_mention	25285	25292	forEach
O	25293	25298	willy
O	25298	25299	-
O	25299	25304	nilly
O	25305	25307	is
O	25308	25311	bad
O	25312	25317	style
O	25317	25318	.

O	25319	25323	Code
O	25324	25330	should
O	25331	25336	speak
O	25337	25339	in
O	25340	25346	idioms
O	25347	25348	(
O	25348	25356	patterns
O	25357	25361	that
O	25362	25365	are
O	25366	25371	quick
O	25372	25374	to
O	25375	25385	comprehend
O	25386	25389	due
O	25390	25392	to
O	25393	25398	their
O	25399	25409	repetition
O	25409	25410	)
O	25410	25411	,
O	25412	25415	and
O	25416	25419	the
O	25420	25425	fewer
O	25426	25432	idioms
O	25433	25436	are
O	25437	25441	used
O	25442	25445	the
O	25446	25453	clearer
O	25454	25457	the
O	25458	25462	code
O	25463	25465	is
O	25466	25469	and
O	25470	25474	less
O	25475	25479	time
O	25480	25482	is
O	25483	25488	spent
O	25489	25497	deciding
O	25498	25503	which
O	25504	25509	idiom
O	25510	25512	to
O	25513	25516	use
O	25517	25518	(
O	25518	25519	a
O	25520	25523	big
O	25524	25528	time
O	25528	25529	-
O	25529	25534	drain
O	25535	25538	for
O	25539	25553	perfectionists
O	25554	25558	like
O	25559	25565	myself
O	25565	25566	!
O	25566	25567	)
O	25567	25568	.

O	25569	25571	As
O	25572	25575	you
O	25576	25579	can
O	25580	25583	see
O	25583	25584	,
O	25585	25586	I
O	25586	25587	'
O	25587	25588	m
O	25589	25592	not
O	25593	25594	a
O	25595	25598	big
O	25599	25602	fan
O	25603	25605	of
O	25606	25609	the
B-api_mention	25610	25617	forEach
I-api_mention	25617	25618	(
I-api_mention	25618	25619	)
O	25620	25626	except
O	25627	25629	in
O	25630	25635	cases
O	25636	25640	when
O	25641	25643	it
O	25644	25649	makes
O	25650	25655	sense
O	25655	25656	.

O	25657	25669	Particularly
O	25670	25679	offensive
O	25680	25682	to
O	25683	25685	me
O	25686	25688	is
O	25689	25692	the
O	25693	25697	fact
O	25698	25702	that
B-api_mention	25703	25709	Stream
O	25710	25714	does
O	25715	25718	not
O	25719	25728	implement
B-api_mention	25729	25737	Iterable
O	25738	25739	(
O	25739	25746	despite
O	25747	25755	actually
O	25756	25762	having
O	25763	25769	method
O	25770	25778	iterator
O	25779	25780	)
O	25781	25784	and
O	25785	25791	cannot
O	25792	25794	be
O	25795	25799	used
O	25800	25802	in
O	25803	25804	a
O	25805	25808	for
O	25808	25809	-
O	25809	25813	each
O	25813	25814	,
O	25815	25819	only
O	25820	25824	with
O	25825	25826	a
B-api_mention	25827	25834	forEach
I-api_mention	25834	25835	(
I-api_mention	25835	25836	)
O	25836	25837	.

O	25838	25839	I
O	25840	25849	recommend
O	25850	25857	casting
B-api_mention	25858	25865	Streams
O	25866	25870	into
B-api_mention	25871	25880	Iterables
O	25881	25885	with
O	25886	25887	(
B-api_mention	25887	25895	Iterable
I-api_mention	25895	25896	<
I-api_mention	25896	25897	T
I-api_mention	25897	25898	>
O	25898	25899	)
O	25899	25905	stream
O	25905	25906	:
O	25906	25907	:
O	25907	25915	iterator
O	25916	25917	.

O	25918	25919	A
O	25920	25926	better
O	25927	25938	alternative
O	25939	25941	is
O	25942	25944	to
O	25945	25948	use
O	25949	25957	StreamEx
O	25958	25963	which
O	25964	25969	fixes
O	25970	25971	a
O	25972	25978	number
O	25979	25981	of
B-api_mention	25982	25988	Stream
O	25989	25992	API
O	25993	26001	problems
O	26001	26002	,
O	26003	26012	including
O	26013	26025	implementing
B-api_mention	26026	26034	Iterable
O	26035	26036	.

O	26037	26041	That
O	26042	26046	said
O	26046	26047	,
B-api_mention	26048	26055	forEach
I-api_mention	26055	26056	(
I-api_mention	26056	26060	args
I-api_mention	26060	26061	)
O	26062	26064	is
O	26065	26071	useful
O	26072	26075	for
O	26076	26079	the
O	26080	26089	following
O	26089	26090	:
O	26091	26092	#
O	26092	26094	li
O	26095	26105	Atomically
O	26106	26115	iterating
O	26116	26120	over
O	26121	26122	a
O	26123	26135	synchronized
O	26136	26140	list
O	26141	26142	.

O	26143	26148	Prior
O	26149	26151	to
O	26152	26156	this
O	26156	26157	,
O	26158	26159	a
O	26160	26164	list
O	26165	26174	generated
O	26175	26179	with
B-api_mention	26180	26191	Collections
I-api_mention	26191	26192	.
I-api_mention	26192	26208	synchronizedList
I-api_mention	26208	26209	(
I-api_mention	26209	26213	args
I-api_mention	26213	26214	)
O	26215	26218	was
O	26219	26225	atomic
O	26226	26230	with
O	26231	26238	respect
O	26239	26241	to
O	26242	26248	things
O	26249	26253	like
O	26254	26257	get
O	26258	26260	or
O	26261	26264	set
O	26264	26265	,
O	26266	26269	but
O	26270	26273	was
O	26274	26277	not
O	26278	26284	thread
O	26284	26285	-
O	26285	26289	safe
O	26290	26294	when
O	26295	26304	iterating
O	26304	26305	.

O	26306	26307	#
O	26307	26309	li
O	26310	26318	Parallel
O	26319	26328	execution
O	26329	26330	(
O	26330	26335	using
O	26336	26338	an
O	26339	26350	appropriate
O	26351	26359	parallel
O	26360	26366	stream
O	26366	26367	)
O	26368	26369	.

O	26370	26374	This
O	26375	26380	saves
O	26381	26384	you
O	26385	26386	a
O	26387	26390	few
O	26391	26396	lines
O	26397	26399	of
O	26400	26404	code
O	26405	26407	vs
O	26408	26413	using
O	26414	26416	an
B-api_mention	26417	26432	ExecutorService
O	26432	26433	,
O	26434	26436	if
O	26437	26441	your
O	26442	26449	problem
O	26450	26457	matches
O	26458	26461	the
O	26462	26473	performance
O	26474	26485	assumptions
O	26486	26491	built
O	26492	26496	into
B-api_mention	26497	26504	Streams
O	26505	26508	and
B-api_mention	26509	26521	Spliterators
O	26521	26522	.

O	26523	26524	#
O	26524	26526	li
O	26527	26535	Specific
O	26536	26546	containers
O	26547	26552	which
O	26553	26554	,
O	26555	26559	like
O	26560	26563	the
O	26564	26576	synchronized
O	26577	26581	list
O	26581	26582	,
O	26583	26590	benefit
O	26591	26595	from
O	26596	26601	being
O	26602	26604	in
O	26605	26612	control
O	26613	26615	of
O	26616	26625	iteration
O	26626	26627	(
O	26627	26635	although
O	26636	26640	this
O	26641	26643	is
O	26644	26651	largely
O	26652	26663	theoretical
O	26664	26670	unless
O	26671	26677	people
O	26678	26681	can
O	26682	26687	bring
O	26688	26690	up
O	26691	26695	more
O	26696	26704	examples
O	26704	26705	)
O	26706	26707	#
O	26707	26709	li
O	26710	26717	Calling
O	26718	26719	a
O	26720	26726	single
O	26727	26735	function
O	26736	26740	more
O	26741	26748	cleanly
O	26749	26751	by
O	26752	26757	using
B-api_mention	26758	26765	forEach
I-api_mention	26765	26766	(
I-api_mention	26766	26770	args
I-api_mention	26770	26771	)
O	26772	26775	and
O	26776	26777	a
O	26778	26784	method
O	26785	26794	reference
O	26795	26803	argument
O	26804	26805	(
O	26805	26807	ie
O	26807	26808	,
O	26809	26813	list
B-api_mention	26813	26814	.
I-api_mention	26814	26821	forEach
I-api_mention	26821	26822	(
I-api_mention	26822	26826	args
I-api_mention	26826	26827	)
O	26828	26829	)
O	26829	26830	.

O	26831	26838	However
O	26838	26839	,
O	26840	26844	keep
O	26845	26847	in
O	26848	26852	mind
O	26853	26856	the
O	26857	26863	points
O	26864	26866	on
O	26867	26874	checked
O	26875	26885	exceptions
O	26885	26886	,
O	26887	26891	more
O	26892	26901	difficult
O	26902	26911	debugging
O	26911	26912	,
O	26913	26916	and
O	26917	26925	reducing
O	26926	26929	the
O	26930	26936	number
O	26937	26939	of
O	26940	26946	idioms
O	26947	26950	you
O	26951	26954	use
O	26955	26959	when
O	26960	26967	writing
O	26968	26972	code
O	26972	26973	.

O	26974	26982	Articles
O	26983	26984	I
O	26985	26989	used
O	26990	26993	for
O	26994	27003	reference
O	27003	27004	:
O	27005	27006	#
O	27006	27008	li
O	27009	27019	Everything
O	27020	27025	about
O	27026	27030	Java
O	27031	27032	8
O	27033	27034	#
O	27034	27036	li
O	27037	27046	Iteration
O	27047	27053	Inside
O	27054	27057	and
O	27058	27061	Out
O	27062	27063	(
O	27063	27065	as
O	27066	27073	pointed
O	27074	27077	out
O	27078	27080	by
O	27081	27088	another
O	27089	27095	poster
O	27095	27096	)
O	27097	27101	EDIT
O	27101	27102	:
O	27103	27108	Looks
O	27109	27113	like
O	27114	27118	some
O	27119	27121	of
O	27122	27125	the
O	27126	27134	original
O	27135	27144	proposals
O	27145	27148	for
O	27149	27156	lambdas
O	27157	27158	(
O	27158	27162	such
O	27163	27165	as
O	27166	27167	#
O	27167	27168	a
O	27169	27170	)
O	27171	27177	solved
O	27178	27182	some
O	27183	27185	of
O	27186	27189	the
O	27190	27196	issues
O	27197	27198	I
O	27199	27208	mentioned
O	27209	27210	(
O	27210	27215	while
O	27216	27222	adding
O	27223	27228	their
O	27229	27232	own
O	27233	27246	complications
O	27246	27247	,
O	27248	27250	of
O	27251	27257	course
O	27257	27258	)
O	27258	27259	.

O	27261	27269	Question
O	27269	27270	-
O	27270	27278	16635398
O	27278	27279	,
O	27280	27286	answer
O	27286	27287	-
O	27287	27295	22502206

O	27296	27300	When
O	27301	27308	reading
O	27309	27313	this
O	27314	27322	question
O	27323	27326	one
O	27327	27330	can
O	27331	27334	get
O	27335	27338	the
O	27339	27349	impression
O	27349	27350	,
O	27351	27355	that
B-api_mention	27356	27364	Iterable
I-api_mention	27364	27365	#
I-api_mention	27365	27372	forEach
O	27373	27375	in
O	27376	27387	combination
O	27388	27392	with
O	27393	27399	lambda
O	27400	27411	expressions
O	27412	27414	is
O	27415	27416	a
O	27417	27425	shortcut
O	27425	27426	/
O	27426	27437	replacement
O	27438	27441	for
O	27442	27449	writing
O	27450	27451	a
O	27452	27463	traditional
O	27464	27467	for
O	27467	27468	-
O	27468	27472	each
O	27473	27477	loop
O	27477	27478	.

O	27479	27483	This
O	27484	27486	is
O	27487	27493	simply
O	27494	27497	not
O	27498	27502	true
O	27502	27503	.

O	27504	27508	This
O	27509	27513	code
O	27514	27518	from
O	27519	27522	the
O	27523	27525	OP
O	27525	27526	:
O	27527	27532	joins
B-api_mention	27532	27533	.
I-api_mention	27533	27540	forEach
I-api_mention	27540	27541	(
I-api_mention	27541	27545	args
I-api_mention	27545	27546	)
O	27546	27547	;
O	27548	27550	is
O	27551	27554	not
O	27555	27563	intended
O	27564	27566	as
O	27567	27568	a
O	27569	27577	shortcut
O	27578	27581	for
O	27582	27589	writing
O	27590	27591	#
O	27591	27594	pre
O	27595	27598	and
O	27599	27605	should
O	27606	27615	certainly
O	27616	27619	not
O	27620	27622	be
O	27623	27627	used
O	27628	27630	in
O	27631	27635	this
O	27636	27639	way
O	27639	27640	.

O	27641	27648	Instead
O	27649	27651	it
O	27652	27654	is
O	27655	27663	intended
O	27664	27666	as
O	27667	27668	a
O	27669	27677	shortcut
O	27678	27679	(
O	27679	27687	although
O	27688	27690	it
O	27691	27693	is
O	27694	27697	not
O	27698	27705	exactly
O	27706	27709	the
O	27710	27714	same
O	27714	27715	)
O	27716	27719	for
O	27720	27727	writing
O	27728	27729	#
O	27729	27732	pre
O	27733	27736	And
O	27737	27739	it
O	27740	27742	is
O	27743	27745	as
O	27746	27747	a
O	27748	27759	replacement
O	27760	27763	for
O	27764	27767	the
O	27768	27777	following
O	27778	27782	Java
O	27783	27784	7
O	27785	27789	code
O	27789	27790	:
O	27791	27792	#
O	27792	27795	pre
O	27796	27805	Replacing
O	27806	27809	the
O	27810	27814	body
O	27815	27817	of
O	27818	27819	a
O	27820	27824	loop
O	27825	27829	with
O	27830	27831	a
O	27832	27842	functional
O	27843	27852	interface
O	27852	27853	,
O	27854	27856	as
O	27857	27859	in
O	27860	27863	the
O	27864	27872	examples
O	27873	27878	above
O	27878	27879	,
O	27880	27885	makes
O	27886	27890	your
O	27891	27895	code
O	27896	27900	more
O	27901	27909	explicit
O	27909	27910	:
O	27911	27914	You
O	27915	27918	are
O	27919	27925	saying
O	27926	27930	that
O	27931	27932	(
O	27932	27933	1
O	27933	27934	)
O	27935	27938	the
O	27939	27943	body
O	27944	27946	of
O	27947	27950	the
O	27951	27955	loop
O	27956	27960	does
O	27961	27964	not
O	27965	27971	affect
O	27972	27975	the
O	27976	27987	surrounding
O	27988	27992	code
O	27993	27996	and
O	27997	28004	control
O	28005	28009	flow
O	28009	28010	,
O	28011	28014	and
O	28015	28016	(
O	28016	28017	2
O	28017	28018	)
O	28019	28022	the
O	28023	28027	body
O	28028	28030	of
O	28031	28034	the
O	28035	28039	loop
O	28040	28043	may
O	28044	28046	be
O	28047	28055	replaced
O	28056	28060	with
O	28061	28062	a
O	28063	28072	different
O	28073	28087	implementation
O	28088	28090	of
O	28091	28094	the
O	28095	28103	function
O	28103	28104	,
O	28105	28112	without
O	28113	28122	affecting
O	28123	28126	the
O	28127	28138	surrounding
O	28139	28143	code
O	28143	28144	.

O	28145	28148	Not
O	28149	28154	being
O	28155	28159	able
O	28160	28162	to
O	28163	28169	access
O	28170	28173	non
O	28174	28179	final
O	28180	28189	variables
O	28190	28192	of
O	28193	28196	the
O	28197	28202	outer
O	28203	28208	scope
O	28209	28211	is
O	28212	28215	not
O	28216	28217	a
O	28218	28225	deficit
O	28226	28228	of
O	28229	28238	functions
O	28238	28239	/
O	28239	28246	lambdas
O	28246	28247	,
O	28248	28250	it
O	28251	28253	is
O	28254	28255	a
O	28256	28263	feature
O	28264	28268	that
O	28269	28282	distinguishes
O	28283	28286	the
O	28287	28296	semantics
O	28297	28299	of
B-api_mention	28300	28308	Iterable
I-api_mention	28308	28309	#
I-api_mention	28309	28316	forEach
O	28317	28321	from
O	28322	28325	the
O	28326	28335	semantics
O	28336	28338	of
O	28339	28340	a
O	28341	28352	traditional
O	28353	28356	for
O	28356	28357	-
O	28357	28361	each
O	28362	28366	loop
O	28366	28367	.

O	28368	28372	Once
O	28373	28376	one
O	28377	28381	gets
O	28382	28386	used
O	28387	28389	to
O	28390	28393	the
O	28394	28400	syntax
O	28401	28403	of
B-api_mention	28404	28412	Iterable
I-api_mention	28412	28413	#
I-api_mention	28413	28420	forEach
O	28421	28422	,
O	28423	28425	it
O	28426	28431	makes
O	28432	28435	the
O	28436	28440	code
O	28441	28445	more
O	28446	28454	readable
O	28454	28455	,
O	28456	28463	because
O	28464	28467	you
O	28468	28479	immediately
O	28480	28483	get
O	28484	28488	this
O	28489	28499	additional
O	28500	28511	information
O	28512	28517	about
O	28518	28521	the
O	28522	28526	code
O	28526	28527	.

O	28528	28539	Traditional
O	28540	28543	for
O	28543	28544	-
O	28544	28548	each
O	28549	28554	loops
O	28555	28559	will
O	28560	28569	certainly
O	28570	28574	stay
O	28575	28579	good
O	28580	28588	practice
O	28589	28590	(
O	28590	28592	to
O	28593	28598	avoid
O	28599	28602	the
O	28603	28611	overused
O	28612	28616	term
O	28617	28618	"
O	28619	28623	best
O	28624	28632	practice
O	28633	28634	"
O	28634	28635	)
O	28636	28638	in
O	28639	28643	Java
O	28643	28644	.

O	28645	28648	But
O	28649	28653	this
O	28654	28659	doesn
O	28659	28660	'
O	28660	28661	t
O	28662	28666	mean
O	28666	28667	,
O	28668	28672	that
B-api_mention	28673	28681	Iterable
I-api_mention	28681	28682	#
I-api_mention	28682	28689	forEach
O	28690	28696	should
O	28697	28699	be
O	28700	28710	considered
O	28711	28714	bad
O	28715	28723	practice
O	28724	28726	or
O	28727	28730	bad
O	28731	28736	style
O	28736	28737	.

O	28738	28740	It
O	28741	28743	is
O	28744	28750	always
O	28751	28755	good
O	28756	28764	practice
O	28764	28765	,
O	28766	28768	to
O	28769	28772	use
O	28773	28776	the
O	28777	28782	right
O	28783	28787	tool
O	28788	28791	for
O	28792	28797	doing
O	28798	28801	the
O	28802	28805	job
O	28805	28806	,
O	28807	28810	and
O	28811	28815	this
O	28816	28824	includes
O	28825	28831	mixing
O	28832	28843	traditional
O	28844	28847	for
O	28847	28848	-
O	28848	28852	each
O	28853	28858	loops
O	28859	28863	with
B-api_mention	28864	28872	Iterable
I-api_mention	28872	28873	#
I-api_mention	28873	28880	forEach
O	28881	28882	,
O	28883	28888	where
O	28889	28891	it
O	28892	28897	makes
O	28898	28903	sense
O	28903	28904	.

O	28905	28910	Since
O	28911	28914	the
O	28915	28924	downsides
O	28925	28927	of
B-api_mention	28928	28936	Iterable
I-api_mention	28936	28937	#
I-api_mention	28937	28944	forEach
O	28945	28949	have
O	28950	28957	already
O	28958	28962	been
O	28963	28972	discussed
O	28973	28975	in
O	28976	28980	this
O	28981	28987	thread
O	28987	28988	,
O	28989	28993	here
O	28994	28997	are
O	28998	29002	some
O	29003	29010	reasons
O	29010	29011	,
O	29012	29015	why
O	29016	29019	you
O	29020	29025	might
O	29026	29034	probably
O	29035	29039	want
O	29040	29042	to
O	29043	29046	use
B-api_mention	29047	29055	Iterable
I-api_mention	29055	29056	#
I-api_mention	29056	29063	forEach
O	29064	29065	:
O	29066	29067	#
O	29067	29069	li
O	29070	29072	To
O	29073	29077	make
O	29078	29082	your
O	29083	29087	code
O	29088	29092	more
O	29093	29101	explicit
O	29101	29102	:
O	29103	29105	As
O	29106	29115	described
O	29116	29121	above
O	29121	29122	,
B-api_mention	29123	29131	Iterable
I-api_mention	29131	29132	#
I-api_mention	29132	29139	forEach
O	29140	29143	can
O	29144	29148	make
O	29149	29153	your
O	29154	29158	code
O	29159	29163	more
O	29164	29172	explicit
O	29173	29176	and
O	29177	29185	readable
O	29186	29188	in
O	29189	29193	some
O	29194	29204	situations
O	29204	29205	.

O	29206	29207	#
O	29207	29209	li
O	29210	29212	To
O	29213	29217	make
O	29218	29222	your
O	29223	29227	code
O	29228	29232	more
O	29233	29243	extensible
O	29244	29247	and
O	29248	29260	maintainable
O	29260	29261	:
O	29262	29267	Using
O	29268	29269	a
O	29270	29278	function
O	29279	29281	as
O	29282	29285	the
O	29286	29290	body
O	29291	29293	of
O	29294	29295	a
O	29296	29300	loop
O	29301	29307	allows
O	29308	29311	you
O	29312	29314	to
O	29315	29322	replace
O	29323	29327	this
O	29328	29336	function
O	29337	29341	with
O	29342	29351	different
O	29352	29367	implementations
O	29368	29369	(
O	29369	29372	see
O	29373	29381	Strategy
O	29382	29389	Pattern
O	29390	29391	)
O	29391	29392	.

O	29393	29396	You
O	29397	29402	could
O	29403	29404	e
O	29404	29405	.
O	29405	29406	g
O	29406	29407	.
O	29408	29414	easily
O	29415	29422	replace
O	29423	29426	the
O	29427	29433	lambda
O	29434	29444	expression
O	29445	29449	with
O	29450	29451	a
O	29452	29458	method
O	29459	29463	call
O	29463	29464	,
O	29465	29469	that
O	29470	29473	may
O	29474	29476	be
O	29477	29488	overwritten
O	29489	29491	by
O	29492	29495	sub
O	29495	29496	-
O	29496	29503	classes
O	29503	29504	:
O	29505	29510	joins
B-api_mention	29510	29511	.
I-api_mention	29511	29518	forEach
I-api_mention	29518	29519	(
I-api_mention	29519	29523	args
I-api_mention	29523	29524	)
O	29524	29525	;
O	29526	29530	Then
O	29531	29534	you
O	29535	29540	could
O	29541	29548	provide
O	29549	29556	default
O	29557	29567	strategies
O	29568	29573	using
O	29574	29576	an
O	29577	29581	enum
O	29581	29582	,
O	29583	29587	that
O	29588	29598	implements
O	29599	29602	the
O	29603	29613	functional
O	29614	29623	interface
O	29623	29624	.

O	29625	29629	This
O	29630	29633	not
O	29634	29638	only
O	29639	29644	makes
O	29645	29649	your
O	29650	29654	code
O	29655	29659	more
O	29660	29670	extensible
O	29670	29671	,
O	29672	29674	it
O	29675	29679	also
O	29680	29689	increases
O	29690	29705	maintainability
O	29706	29713	because
O	29714	29716	it
O	29717	29726	decouples
O	29727	29730	the
O	29731	29735	loop
O	29736	29750	implementation
O	29751	29755	from
O	29756	29759	the
O	29760	29764	loop
O	29765	29776	declaration
O	29776	29777	.

O	29778	29779	#
O	29779	29781	li
O	29782	29784	To
O	29785	29789	make
O	29790	29794	your
O	29795	29799	code
O	29800	29804	more
O	29805	29815	debuggable
O	29815	29816	:
O	29817	29827	Seperating
O	29828	29831	the
O	29832	29836	loop
O	29837	29851	implementation
O	29852	29856	from
O	29857	29860	the
O	29861	29872	declaration
O	29873	29876	can
O	29877	29881	also
O	29882	29886	make
O	29887	29896	debugging
O	29897	29901	more
O	29902	29906	easy
O	29906	29907	,
O	29908	29915	because
O	29916	29919	you
O	29920	29925	could
O	29926	29930	have
O	29931	29932	a
O	29933	29944	specialized
O	29945	29950	debug
O	29951	29965	implementation
O	29965	29966	,
O	29967	29971	that
O	29972	29978	prints
O	29979	29982	out
O	29983	29988	debug
O	29989	29997	messages
O	29997	29998	,
O	29999	30006	without
O	30007	30010	the
O	30011	30015	need
O	30016	30018	to
O	30019	30026	clutter
O	30027	30031	your
O	30032	30036	main
O	30037	30041	code
O	30042	30046	with
O	30047	30049	if
O	30049	30050	(
O	30050	30054	args
O	30054	30055	)
B-api_mention	30055	30061	System
I-api_mention	30061	30062	.
I-api_mention	30062	30065	out
I-api_mention	30065	30066	.
I-api_mention	30066	30073	println
I-api_mention	30073	30074	(
I-api_mention	30074	30078	args
I-api_mention	30078	30079	)
O	30080	30081	.

O	30082	30085	The
O	30086	30091	debug
O	30092	30106	implementation
O	30107	30112	could
O	30113	30114	e
O	30114	30115	.
O	30115	30116	g
O	30116	30117	.
O	30118	30120	be
O	30121	30122	a
O	30123	30131	delegate
O	30132	30133	,
O	30134	30138	that
O	30139	30148	decorates
O	30149	30152	the
O	30153	30159	actual
O	30160	30168	function
O	30169	30183	implementation
O	30183	30184	.

O	30185	30186	#
O	30186	30188	li
O	30189	30191	To
O	30192	30200	optimize
O	30201	30212	performance
O	30212	30213	-
O	30213	30221	critical
O	30222	30226	code
O	30226	30227	:
O	30228	30236	Contrary
O	30237	30239	to
O	30240	30244	some
O	30245	30247	of
O	30248	30251	the
O	30252	30262	assertions
O	30263	30265	in
O	30266	30270	this
O	30271	30277	thread
O	30277	30278	,
B-api_mention	30279	30287	Iterable
I-api_mention	30287	30288	#
I-api_mention	30288	30295	forEach
O	30296	30300	does
O	30301	30308	already
O	30309	30316	provide
O	30317	30323	better
O	30324	30335	performance
O	30336	30340	than
O	30341	30342	a
O	30343	30354	traditional
O	30355	30358	for
O	30358	30359	-
O	30359	30363	each
O	30364	30368	loop
O	30368	30369	,
O	30370	30372	at
O	30373	30378	least
O	30379	30383	when
O	30384	30389	using
B-api_mention	30390	30399	ArrayList
O	30400	30403	and
O	30404	30411	running
O	30412	30419	Hotspot
O	30420	30422	in
O	30423	30424	"
O	30424	30425	-
O	30425	30431	client
O	30431	30432	"
O	30433	30437	mode
O	30437	30438	.

O	30439	30444	While
O	30445	30449	this
O	30450	30461	performance
O	30462	30467	boost
O	30468	30470	is
O	30471	30476	small
O	30477	30480	and
O	30481	30491	negligible
O	30492	30495	for
O	30496	30500	most
O	30501	30504	use
O	30505	30510	cases
O	30510	30511	,
O	30512	30517	there
O	30518	30521	are
O	30522	30532	situations
O	30532	30533	,
O	30534	30539	where
O	30540	30544	this
O	30545	30550	extra
O	30551	30562	performance
O	30563	30566	can
O	30567	30571	make
O	30572	30573	a
O	30574	30584	difference
O	30584	30585	.

O	30586	30587	E
O	30587	30588	.
O	30588	30589	g
O	30589	30590	.
O	30591	30598	library
O	30599	30610	maintainers
O	30611	30615	will
O	30616	30625	certainly
O	30626	30630	want
O	30631	30633	to
O	30634	30642	evaluate
O	30642	30643	,
O	30644	30646	if
O	30647	30651	some
O	30652	30654	of
O	30655	30660	their
O	30661	30669	existing
O	30670	30674	loop
O	30675	30690	implementations
O	30691	30697	should
O	30698	30700	be
O	30701	30709	replaced
O	30710	30714	with
B-api_mention	30715	30723	Iterable
I-api_mention	30723	30724	#
I-api_mention	30724	30731	forEach
O	30732	30733	.

O	30734	30736	To
O	30737	30741	back
O	30742	30746	this
O	30747	30756	statement
O	30757	30759	up
O	30760	30764	with
O	30765	30770	facts
O	30770	30771	,
O	30772	30773	I
O	30774	30778	have
O	30779	30783	done
O	30784	30788	some
O	30789	30794	micro
O	30794	30795	-
O	30795	30805	benchmarks
O	30806	30810	with
O	30811	30818	Caliper
O	30819	30820	.

O	30821	30825	Here
O	30826	30828	is
O	30829	30832	the
O	30833	30837	test
O	30838	30842	code
O	30843	30844	(
O	30844	30850	latest
O	30851	30858	Caliper
O	30859	30863	from
O	30864	30867	git
O	30868	30870	is
O	30871	30877	needed
O	30877	30878	)
O	30878	30879	:
O	30880	30881	#
O	30881	30884	pre
O	30885	30888	And
O	30889	30893	here
O	30894	30897	are
O	30898	30901	the
O	30902	30909	results
O	30909	30910	:
O	30911	30912	#
O	30912	30914	li
O	30915	30922	Results
O	30923	30926	for
O	30927	30928	-
O	30928	30934	client
O	30935	30936	#
O	30936	30938	li
O	30939	30946	Results
O	30947	30950	for
O	30951	30952	-
O	30952	30958	server
O	30959	30963	When
O	30964	30971	running
O	30972	30976	with
O	30977	30978	"
O	30978	30979	-
O	30979	30985	client
O	30985	30986	"
O	30986	30987	,
B-api_mention	30988	30996	Iterable
I-api_mention	30996	30997	#
I-api_mention	30997	31004	forEach
O	31005	31016	outperforms
O	31017	31020	the
O	31021	31032	traditional
O	31033	31036	for
O	31037	31041	loop
O	31042	31046	over
O	31047	31049	an
B-api_mention	31050	31059	ArrayList
O	31059	31060	,
O	31061	31064	but
O	31065	31067	is
O	31068	31073	still
O	31074	31080	slower
O	31081	31085	than
O	31086	31094	directly
O	31095	31104	iterating
O	31105	31109	over
O	31110	31112	an
O	31113	31118	array
O	31118	31119	.

O	31120	31124	When
O	31125	31132	running
O	31133	31137	with
O	31138	31139	"
O	31139	31140	-
O	31140	31146	server
O	31146	31147	"
O	31147	31148	,
O	31149	31152	the
O	31153	31164	performance
O	31165	31167	of
O	31168	31171	all
O	31172	31182	approaches
O	31183	31185	is
O	31186	31191	about
O	31192	31195	the
O	31196	31200	same
O	31200	31201	.

O	31202	31203	#
O	31203	31205	li
O	31206	31208	To
O	31209	31216	provide
O	31217	31225	optional
O	31226	31233	support
O	31234	31237	for
O	31238	31246	parallel
O	31247	31256	execution
O	31256	31257	:
O	31258	31260	It
O	31261	31264	has
O	31265	31272	already
O	31273	31277	been
O	31278	31282	said
O	31283	31287	here
O	31287	31288	,
O	31289	31293	that
O	31294	31297	the
O	31298	31309	possibility
O	31310	31312	to
O	31313	31320	execute
O	31321	31324	the
O	31325	31335	functional
O	31336	31345	interface
O	31346	31348	of
B-api_mention	31349	31357	Iterable
I-api_mention	31357	31358	#
I-api_mention	31358	31365	forEach
O	31366	31368	in
O	31369	31377	parallel
O	31378	31383	using
O	31384	31391	streams
O	31392	31393	,
O	31394	31396	is
O	31397	31406	certainly
O	31407	31409	an
O	31410	31419	important
O	31420	31426	aspect
O	31426	31427	.

O	31428	31433	Since
B-api_mention	31434	31444	Collection
I-api_mention	31444	31445	#
I-api_mention	31445	31459	parallelStream
I-api_mention	31459	31460	(
I-api_mention	31460	31464	args
I-api_mention	31464	31465	)
O	31466	31470	does
O	31471	31474	not
O	31475	31484	guarantee
O	31484	31485	,
O	31486	31490	that
O	31491	31494	the
O	31495	31499	loop
O	31500	31502	is
O	31503	31511	actually
O	31512	31520	executed
O	31521	31523	in
O	31524	31532	parallel
O	31532	31533	,
O	31534	31537	one
O	31538	31542	must
O	31543	31551	consider
O	31552	31556	this
O	31557	31559	an
O	31560	31568	optional
O	31569	31576	feature
O	31576	31577	.

O	31578	31580	By
O	31581	31590	iterating
O	31591	31595	over
O	31596	31600	your
O	31601	31605	list
O	31606	31610	with
O	31611	31615	list
B-api_mention	31615	31616	.
I-api_mention	31616	31630	parallelStream
I-api_mention	31630	31631	(
I-api_mention	31631	31635	args
I-api_mention	31635	31636	)
I-api_mention	31636	31637	.
I-api_mention	31637	31644	forEach
I-api_mention	31644	31645	(
I-api_mention	31645	31649	args
I-api_mention	31649	31650	)
O	31650	31651	;
O	31652	31653	,
O	31654	31657	you
O	31658	31668	explicitly
O	31669	31672	say
O	31672	31673	:
O	31674	31678	This
O	31679	31683	loop
O	31684	31692	supports
O	31693	31701	parallel
O	31702	31711	execution
O	31711	31712	,
O	31713	31716	but
O	31717	31719	it
O	31720	31724	does
O	31725	31728	not
O	31729	31735	depend
O	31736	31738	on
O	31739	31741	it
O	31741	31742	.

O	31743	31748	Again
O	31748	31749	,
O	31750	31754	this
O	31755	31757	is
O	31758	31759	a
O	31760	31767	feature
O	31768	31771	and
O	31772	31775	not
O	31776	31777	a
O	31778	31785	deficit
O	31785	31786	!

O	31787	31789	By
O	31790	31796	moving
O	31797	31800	the
O	31801	31809	decision
O	31810	31813	for
O	31814	31822	parallel
O	31823	31832	execution
O	31833	31837	away
O	31838	31842	from
O	31843	31847	your
O	31848	31854	actual
O	31855	31859	loop
O	31860	31874	implementation
O	31874	31875	,
O	31876	31879	you
O	31880	31885	allow
O	31886	31894	optional
O	31895	31907	optimization
O	31908	31910	of
O	31911	31915	your
O	31916	31920	code
O	31920	31921	,
O	31922	31929	without
O	31930	31939	affecting
O	31940	31943	the
O	31944	31948	code
O	31949	31955	itself
O	31955	31956	,
O	31957	31962	which
O	31963	31965	is
O	31966	31967	a
O	31968	31972	good
O	31973	31978	thing
O	31978	31979	.

O	31980	31984	Also
O	31984	31985	,
O	31986	31988	if
O	31989	31992	the
O	31993	32000	default
O	32001	32009	parallel
O	32010	32016	stream
O	32017	32031	implementation
O	32032	32036	does
O	32037	32040	not
O	32041	32044	fit
O	32045	32049	your
O	32050	32055	needs
O	32055	32056	,
O	32057	32059	no
O	32060	32063	one
O	32064	32066	is
O	32067	32077	preventing
O	32078	32081	you
O	32082	32086	from
O	32087	32096	providing
O	32097	32101	your
O	32102	32105	own
O	32106	32120	implementation
O	32120	32121	.

O	32122	32125	You
O	32126	32131	could
O	32132	32133	e
O	32133	32134	.
O	32134	32135	g
O	32135	32136	.
O	32137	32144	provide
O	32145	32147	an
O	32148	32157	optimized
O	32158	32168	collection
O	32169	32178	depending
O	32179	32181	on
O	32182	32185	the
O	32186	32196	underlying
O	32197	32206	operating
O	32207	32213	system
O	32213	32214	,
O	32215	32217	on
O	32218	32221	the
O	32222	32226	size
O	32227	32229	of
O	32230	32233	the
O	32234	32244	collection
O	32244	32245	,
O	32246	32248	on
O	32249	32252	the
O	32253	32259	number
O	32260	32262	of
O	32263	32268	cores
O	32268	32269	,
O	32270	32273	and
O	32274	32276	on
O	32277	32281	some
O	32282	32292	preference
O	32293	32301	settings
O	32301	32302	:
O	32303	32304	#
O	32304	32307	pre
O	32308	32311	The
O	32312	32316	nice
O	32317	32322	thing
O	32323	32327	here
O	32328	32330	is
O	32330	32331	,
O	32332	32336	that
O	32337	32341	your
O	32342	32346	loop
O	32347	32361	implementation
O	32362	32367	doesn
O	32367	32368	'
O	32368	32369	t
O	32370	32374	need
O	32375	32377	to
O	32378	32382	know
O	32383	32385	or
O	32386	32390	care
O	32391	32396	about
O	32397	32402	these
O	32403	32410	details
O	32410	32411	.

O	32413	32421	Question
O	32421	32422	-
O	32422	32430	16635398
O	32430	32431	,
O	32432	32438	answer
O	32438	32439	-
O	32439	32447	25855691

O	32448	32450	TL
O	32450	32451	;
O	32451	32453	DR
O	32454	32455	:
B-api_mention	32456	32460	List
I-api_mention	32460	32461	.
I-api_mention	32461	32467	stream
I-api_mention	32467	32468	(
I-api_mention	32468	32472	args
I-api_mention	32472	32473	)
I-api_mention	32473	32474	.
I-api_mention	32474	32481	forEach
I-api_mention	32481	32482	(
I-api_mention	32482	32486	args
I-api_mention	32486	32487	)
O	32488	32491	was
O	32492	32495	the
O	32496	32503	fastest
O	32503	32504	.

O	32505	32506	I
O	32507	32511	felt
O	32512	32513	I
O	32514	32520	should
O	32521	32524	add
O	32525	32527	my
O	32528	32535	results
O	32536	32540	from
O	32541	32553	benchmarking
O	32554	32563	iteration
O	32563	32564	.

O	32565	32566	I
O	32567	32571	took
O	32572	32573	a
O	32574	32578	very
O	32579	32585	simple
O	32586	32594	approach
O	32595	32596	(
O	32596	32598	no
O	32599	32611	benchmarking
O	32612	32622	frameworks
O	32622	32623	)
O	32624	32627	and
O	32628	32639	benchmarked
O	32640	32641	5
O	32642	32651	different
O	32652	32659	methods
O	32659	32660	:
O	32661	32662	#
O	32662	32664	li
O	32665	32672	classic
O	32673	32676	for
O	32677	32678	#
O	32678	32680	li
O	32681	32688	classic
O	32689	32696	foreach
O	32697	32698	#
O	32698	32700	li
B-api_mention	32701	32705	List
I-api_mention	32705	32706	.
I-api_mention	32706	32713	forEach
I-api_mention	32713	32714	(
I-api_mention	32714	32718	args
I-api_mention	32718	32719	)
O	32720	32721	#
O	32721	32723	li
B-api_mention	32724	32728	List
I-api_mention	32728	32729	.
I-api_mention	32729	32735	stream
I-api_mention	32735	32736	(
I-api_mention	32736	32740	args
I-api_mention	32740	32741	)
O	32741	32742	.
B-api_mention	32742	32749	forEach
I-api_mention	32749	32750	(
I-api_mention	32750	32754	args
I-api_mention	32754	32755	)
O	32756	32757	#
O	32757	32759	li
B-api_mention	32760	32764	List
I-api_mention	32764	32765	.
I-api_mention	32765	32779	parallelStream
I-api_mention	32779	32780	(
I-api_mention	32780	32784	args
I-api_mention	32784	32785	)
I-api_mention	32785	32786	.
I-api_mention	32786	32793	forEach
O	32794	32797	the
O	32798	32805	testing
O	32806	32815	procedure
O	32816	32819	and
O	32820	32830	parameters
O	32831	32832	#
O	32832	32835	pre
O	32836	32839	The
O	32840	32844	list
O	32845	32847	in
O	32848	32852	this
O	32853	32858	class
O	32859	32864	shall
O	32865	32867	be
O	32868	32876	iterated
O	32877	32881	over
O	32882	32885	and
O	32886	32890	have
O	32891	32895	some
O	32896	32900	doIt
O	32900	32901	(
O	32901	32905	args
O	32905	32906	)
O	32907	32914	applied
O	32915	32917	to
O	32918	32921	all
O	32922	32924	it
O	32924	32925	'
O	32925	32926	s
O	32927	32934	members
O	32934	32935	,
O	32936	32940	each
O	32941	32945	time
O	32946	32949	via
O	32950	32951	a
O	32952	32961	different
O	32962	32968	method
O	32968	32969	.
O	32970	32972	in
O	32973	32976	the
O	32977	32981	Main
O	32982	32987	class
O	32988	32989	I
O	32990	32993	run
O	32994	32997	the
O	32998	33004	tested
O	33005	33011	method
O	33012	33017	three
O	33018	33023	times
O	33024	33026	to
O	33027	33031	warm
O	33032	33034	up
O	33035	33038	the
O	33039	33042	JVM
O	33042	33043	.

O	33044	33045	I
O	33046	33050	then
O	33051	33054	run
O	33055	33058	the
O	33059	33063	test
O	33064	33070	method
O	33071	33075	1000
O	33076	33081	times
O	33082	33089	summing
O	33090	33093	the
O	33094	33098	time
O	33099	33101	it
O	33102	33107	takes
O	33108	33111	for
O	33112	33116	each
O	33117	33126	iteration
O	33127	33133	method
O	33134	33135	(
O	33135	33140	using
B-api_mention	33141	33147	System
I-api_mention	33147	33148	.
I-api_mention	33148	33156	nanoTime
I-api_mention	33156	33157	(
I-api_mention	33157	33161	args
I-api_mention	33161	33162	)
O	33163	33164	)
O	33164	33165	.

O	33166	33171	After
O	33172	33176	that
O	33176	33177	'
O	33177	33178	s
O	33179	33183	done
O	33184	33185	i
O	33186	33192	divide
O	33193	33197	that
O	33198	33201	sum
O	33202	33204	by
O	33205	33209	1000
O	33210	33213	and
O	33214	33218	that
O	33218	33219	'
O	33219	33220	s
O	33221	33224	the
O	33225	33231	result
O	33231	33232	,
O	33233	33240	average
O	33241	33245	time
O	33245	33246	.
O	33247	33254	example
O	33254	33255	:
O	33256	33257	#
O	33257	33260	pre
O	33261	33262	I
O	33263	33266	ran
O	33267	33271	this
O	33272	33274	on
O	33275	33276	a
O	33277	33279	i5
O	33280	33281	4
O	33282	33286	core
O	33287	33290	CPU
O	33290	33291	,
O	33292	33296	with
O	33297	33301	java
O	33302	33309	version
O	33310	33311	1
O	33311	33312	.
O	33312	33313	8
O	33313	33314	.
O	33314	33315	0
O	33315	33316	_
O	33316	33318	05
O	33319	33326	classic
O	33327	33330	for
O	33331	33332	#
O	33332	33335	pre
O	33336	33345	execution
O	33346	33350	time
O	33350	33351	:
O	33352	33353	4
O	33353	33354	.
O	33354	33356	21
O	33357	33359	ms
O	33360	33367	classic
O	33368	33375	foreach
O	33376	33377	#
O	33377	33380	pre
O	33381	33390	execution
O	33391	33395	time
O	33395	33396	:
O	33397	33398	5
O	33398	33399	.
O	33399	33401	95
O	33402	33404	ms
B-api_mention	33405	33409	List
I-api_mention	33409	33410	.
I-api_mention	33410	33417	forEach
I-api_mention	33417	33418	(
I-api_mention	33418	33422	args
I-api_mention	33422	33423	)
O	33424	33428	list
B-api_mention	33428	33429	.
I-api_mention	33429	33436	forEach
I-api_mention	33436	33437	(
I-api_mention	33437	33441	args
I-api_mention	33441	33442	)
O	33442	33443	;
O	33444	33453	execution
O	33454	33458	time
O	33458	33459	:
O	33460	33461	3
O	33461	33462	.
O	33462	33464	11
O	33465	33467	ms
B-api_mention	33468	33472	List
I-api_mention	33472	33473	.
I-api_mention	33473	33479	stream
I-api_mention	33479	33480	(
I-api_mention	33480	33484	args
I-api_mention	33484	33485	)
I-api_mention	33485	33486	.
I-api_mention	33486	33493	forEach
I-api_mention	33493	33494	(
I-api_mention	33494	33498	args
I-api_mention	33498	33499	)
O	33500	33504	list
B-api_mention	33504	33505	.
I-api_mention	33505	33511	stream
I-api_mention	33511	33512	(
I-api_mention	33512	33516	args
I-api_mention	33516	33517	)
I-api_mention	33517	33518	.
I-api_mention	33518	33525	forEach
I-api_mention	33525	33526	(
I-api_mention	33526	33530	args
I-api_mention	33530	33531	)
O	33531	33532	;
O	33533	33542	execution
O	33543	33547	time
O	33547	33548	:
O	33549	33550	2
O	33550	33551	.
O	33551	33553	79
O	33554	33556	ms
B-api_mention	33557	33561	List
I-api_mention	33561	33562	.
I-api_mention	33562	33576	parallelStream
I-api_mention	33576	33577	(
I-api_mention	33577	33581	args
I-api_mention	33581	33582	)
I-api_mention	33582	33583	.
I-api_mention	33583	33590	forEach
O	33591	33595	list
B-api_mention	33595	33596	.
I-api_mention	33596	33610	parallelStream
I-api_mention	33610	33611	(
I-api_mention	33611	33615	args
I-api_mention	33615	33616	)
I-api_mention	33616	33617	.
I-api_mention	33617	33624	forEach
I-api_mention	33624	33625	(
I-api_mention	33625	33629	args
I-api_mention	33629	33630	)
O	33630	33631	;
O	33632	33641	execution
O	33642	33646	time
O	33646	33647	:
O	33648	33649	3
O	33649	33650	.
O	33650	33651	6
O	33652	33654	ms

O	33656	33664	Question
O	33664	33665	-
O	33665	33673	16635398
O	33673	33674	,
O	33675	33681	answer
O	33681	33682	-
O	33682	33690	31707746

O	33691	33694	One
O	33695	33697	of
O	33698	33702	most
O	33703	33712	upleasing
O	33713	33723	functional
B-api_mention	33724	33731	forEach
O	33732	33733	'
O	33733	33734	s
O	33735	33746	limitations
O	33747	33749	is
O	33750	33754	lack
O	33755	33757	of
O	33758	33765	checked
O	33766	33776	exceptions
O	33777	33784	support
O	33784	33785	.

O	33786	33789	One
O	33790	33798	possible
O	33799	33809	workaround
O	33810	33812	is
O	33813	33815	to
O	33816	33823	replace
O	33824	33832	terminal
B-api_mention	33833	33840	forEach
O	33841	33845	with
O	33846	33851	plain
O	33852	33855	old
O	33856	33863	foreach
O	33864	33868	loop
O	33868	33869	:
O	33870	33871	#
O	33871	33874	pre
O	33875	33879	Here
O	33880	33882	is
O	33883	33887	list
O	33888	33890	of
O	33891	33895	most
O	33896	33903	popular
O	33904	33913	questions
O	33914	33918	with
O	33919	33924	other
O	33925	33936	workarounds
O	33937	33939	on
O	33940	33947	checked
O	33948	33957	exception
O	33958	33966	handling
O	33967	33973	within
O	33974	33981	lambdas
O	33982	33985	and
O	33986	33993	streams
O	33993	33994	:
O	33995	33999	Java
O	34000	34001	8
B-api_mention	34002	34008	Lambda
O	34009	34017	function
O	34018	34022	that
O	34023	34029	throws
O	34030	34039	exception
O	34039	34040	?

O	34041	34045	Java
O	34046	34047	8
O	34047	34048	:
B-api_mention	34049	34055	Lambda
O	34055	34056	-
B-api_mention	34056	34063	Streams
O	34063	34064	,
B-api_mention	34065	34071	Filter
O	34072	34074	by
O	34075	34081	Method
O	34082	34086	with
B-api_mention	34087	34096	Exception
O	34097	34100	How
O	34101	34104	can
O	34105	34106	I
O	34107	34112	throw
O	34113	34120	CHECKED
O	34121	34131	exceptions
O	34132	34136	from
O	34137	34143	inside
O	34144	34148	Java
O	34149	34150	8
B-api_mention	34151	34158	streams
O	34158	34159	?

O	34160	34164	Java
O	34165	34166	8
O	34166	34167	:
O	34168	34177	Mandatory
O	34178	34185	checked
O	34186	34196	exceptions
O	34197	34205	handling
O	34206	34208	in
O	34209	34215	lambda
O	34216	34227	expressions
O	34227	34228	.

O	34229	34232	Why
O	34233	34242	mandatory
O	34242	34243	,
O	34244	34247	not
O	34248	34256	optional
O	34256	34257	?

O	34259	34267	Question
O	34267	34268	-
O	34268	34276	15655012
O	34276	34277	,
O	34278	34284	answer
O	34284	34285	-
O	34285	34293	15655071

O	34294	34296	If
O	34297	34300	you
O	34301	34305	make
O	34306	34309	foo
O	34310	34316	static
O	34316	34317	,
O	34318	34321	you
O	34322	34326	must
O	34327	34337	initialize
O	34338	34340	it
O	34341	34343	in
O	34344	34347	the
O	34348	34353	class
O	34354	34365	constructor
O	34366	34367	(
O	34367	34369	or
O	34370	34376	inline
O	34377	34382	where
O	34383	34386	you
O	34387	34393	define
O	34394	34396	it
O	34396	34397	)
O	34398	34402	like
O	34403	34406	the
O	34407	34416	following
O	34417	34425	examples
O	34425	34426	.

O	34427	34432	Class
O	34433	34444	constructor
O	34445	34446	(
O	34446	34449	not
O	34450	34458	instance
O	34458	34459	)
O	34459	34460	:
O	34461	34462	#
O	34462	34465	pre
O	34466	34472	Inline
O	34472	34473	:
O	34474	34481	private
O	34482	34488	static
O	34489	34494	final
B-api_mention	34495	34499	List
O	34500	34503	foo
O	34504	34505	=
O	34506	34509	new
B-api_mention	34510	34519	ArrayList
I-api_mention	34519	34520	(
I-api_mention	34520	34524	args
I-api_mention	34524	34525	)
O	34525	34526	;
O	34527	34530	The
O	34531	34538	problem
O	34539	34543	here
O	34544	34546	is
O	34547	34550	not
O	34551	34554	how
O	34555	34558	the
O	34559	34564	final
O	34565	34573	modifier
O	34574	34579	works
O	34579	34580	,
O	34581	34584	but
O	34585	34591	rather
O	34592	34595	how
O	34596	34599	the
O	34600	34606	static
O	34607	34615	modifier
O	34616	34621	works
O	34621	34622	.

O	34623	34626	The
O	34627	34632	final
O	34633	34641	modifier
O	34642	34650	enforces
O	34651	34653	an
O	34654	34668	initialization
O	34669	34671	of
O	34672	34676	your
O	34677	34686	reference
O	34687	34689	by
O	34690	34693	the
O	34694	34698	time
O	34699	34702	the
O	34703	34707	call
O	34708	34710	to
O	34711	34715	your
O	34716	34727	constructor
O	34728	34737	completes
O	34738	34739	(
O	34739	34740	i
O	34740	34741	.
O	34741	34742	e
O	34742	34743	.
O	34744	34747	you
O	34748	34752	must
O	34753	34763	initialize
O	34764	34766	it
O	34767	34769	in
O	34770	34773	the
O	34774	34785	constructor
O	34785	34786	)
O	34786	34787	.

O	34788	34792	When
O	34793	34796	you
O	34797	34807	initialize
O	34808	34810	an
O	34811	34820	attribute
O	34821	34823	in
O	34823	34824	-
O	34824	34828	line
O	34828	34829	,
O	34830	34832	it
O	34833	34837	gets
O	34838	34849	initialized
O	34850	34856	before
O	34857	34860	the
O	34861	34865	code
O	34866	34869	you
O	34870	34874	have
O	34875	34882	defined
O	34883	34886	for
O	34887	34890	the
O	34891	34902	constructor
O	34903	34905	is
O	34906	34909	run
O	34909	34910	,
O	34911	34913	so
O	34914	34917	you
O	34918	34921	get
O	34922	34925	the
O	34926	34935	following
O	34936	34944	outcomes
O	34944	34945	:
O	34946	34947	#
O	34947	34949	li
O	34950	34952	if
O	34953	34956	foo
O	34957	34959	is
O	34960	34966	static
O	34967	34968	,
O	34969	34972	foo
O	34973	34974	=
O	34975	34978	new
B-api_mention	34979	34988	ArrayList
I-api_mention	34988	34989	(
I-api_mention	34989	34993	args
I-api_mention	34993	34994	)
O	34995	34999	will
O	35000	35002	be
O	35003	35011	executed
O	35012	35018	before
O	35019	35022	the
O	35023	35029	static
O	35029	35030	{
O	35030	35031	}
O	35032	35043	constructor
O	35044	35047	you
O	35048	35052	have
O	35053	35060	defined
O	35061	35064	for
O	35065	35069	your
O	35070	35075	class
O	35076	35078	is
O	35079	35087	executed
O	35088	35089	#
O	35089	35091	li
O	35092	35094	if
O	35095	35098	foo
O	35099	35101	is
O	35102	35105	not
O	35106	35112	static
O	35113	35114	,
O	35115	35118	foo
O	35119	35120	=
O	35121	35124	new
B-api_mention	35125	35134	ArrayList
I-api_mention	35134	35135	(
I-api_mention	35135	35139	args
I-api_mention	35139	35140	)
O	35141	35145	will
O	35146	35148	be
O	35149	35157	executed
O	35158	35164	before
O	35165	35169	your
O	35170	35181	constructor
O	35182	35184	is
O	35185	35188	run
O	35189	35193	When
O	35194	35197	you
O	35198	35200	do
O	35201	35204	not
O	35205	35214	initilize
O	35215	35217	an
O	35218	35227	attribute
O	35228	35230	in
O	35230	35231	-
O	35231	35235	line
O	35235	35236	,
O	35237	35240	the
O	35241	35246	final
O	35247	35255	modifier
O	35256	35264	enforces
O	35265	35269	that
O	35270	35273	you
O	35274	35284	initialize
O	35285	35287	it
O	35288	35291	and
O	35292	35296	that
O	35297	35300	you
O	35301	35305	must
O	35306	35308	do
O	35309	35311	so
O	35312	35314	in
O	35315	35318	the
O	35319	35330	constructor
O	35330	35331	.

O	35332	35334	If
O	35335	35338	you
O	35339	35343	also
O	35344	35348	have
O	35349	35350	a
O	35351	35357	static
O	35358	35366	modifier
O	35366	35367	,
O	35368	35371	the
O	35372	35383	constructor
O	35384	35387	you
O	35388	35392	will
O	35393	35397	have
O	35398	35400	to
O	35401	35411	initialize
O	35412	35415	the
O	35416	35425	attribute
O	35426	35428	in
O	35429	35431	is
O	35432	35435	the
O	35436	35441	class
O	35441	35442	'
O	35443	35457	initialization
O	35458	35463	block
O	35464	35465	:
O	35466	35472	static
O	35472	35473	{
O	35473	35474	}
O	35475	35476	.

O	35477	35480	The
O	35481	35486	error
O	35487	35490	you
O	35491	35494	get
O	35495	35497	in
O	35498	35502	your
O	35503	35507	code
O	35508	35510	is
O	35511	35515	from
O	35516	35519	the
O	35520	35524	fact
O	35525	35529	that
O	35530	35536	static
O	35536	35537	{
O	35537	35538	}
O	35539	35541	is
O	35542	35545	run
O	35546	35550	when
O	35551	35554	the
O	35555	35560	class
O	35561	35563	is
O	35564	35570	loaded
O	35570	35571	,
O	35572	35578	before
O	35579	35582	the
O	35583	35587	time
O	35588	35591	you
O	35592	35603	instantiate
O	35604	35606	an
O	35607	35613	object
O	35614	35616	of
O	35617	35621	that
O	35622	35627	class
O	35627	35628	.

O	35629	35633	Thus
O	35633	35634	,
O	35635	35638	you
O	35639	35643	will
O	35644	35648	have
O	35649	35652	not
O	35653	35664	initialized
O	35665	35668	foo
O	35669	35673	when
O	35674	35677	the
O	35678	35683	class
O	35684	35686	is
O	35687	35694	created
O	35694	35695	.

O	35696	35701	Think
O	35702	35704	of
O	35705	35708	the
O	35709	35715	static
O	35715	35716	{
O	35716	35717	}
O	35718	35723	block
O	35724	35726	as
O	35727	35728	a
O	35729	35740	constructor
O	35741	35744	for
O	35745	35747	an
O	35748	35754	object
O	35755	35757	of
O	35758	35762	type
B-api_mention	35763	35768	Class
O	35769	35770	.

O	35771	35775	This
O	35776	35778	is
O	35779	35784	where
O	35785	35788	you
O	35789	35793	must
O	35794	35796	do
O	35797	35800	the
O	35801	35815	initialization
O	35816	35818	of
O	35819	35823	your
O	35824	35830	static
O	35831	35836	final
O	35837	35842	class
O	35843	35853	attributes
O	35854	35855	(
O	35855	35857	if
O	35858	35861	not
O	35862	35866	done
O	35867	35873	inline
O	35873	35874	)
O	35874	35875	.

O	35876	35880	Side
O	35881	35885	note
O	35885	35886	:
O	35887	35890	The
O	35891	35896	final
O	35897	35905	modifier
O	35906	35913	assures
O	35914	35919	const
O	35919	35920	-
O	35920	35924	ness
O	35925	35929	only
O	35930	35933	for
O	35934	35943	primitive
O	35944	35949	types
O	35950	35953	and
O	35954	35964	references
O	35964	35965	.

O	35966	35970	When
O	35971	35974	you
O	35975	35982	declare
O	35983	35984	a
O	35985	35990	final
O	35991	35997	object
O	35997	35998	,
O	35999	36003	what
O	36004	36007	you
O	36008	36011	get
O	36012	36014	is
O	36015	36016	a
O	36017	36022	final
O	36023	36032	reference
O	36033	36035	to
O	36036	36040	that
O	36041	36047	object
O	36047	36048	,
O	36049	36052	but
O	36053	36056	the
O	36057	36063	object
O	36064	36070	itself
O	36071	36073	is
O	36074	36077	not
O	36078	36086	constant
O	36086	36087	.

O	36088	36092	What
O	36093	36096	you
O	36097	36100	are
O	36101	36107	really
O	36108	36117	achieving
O	36118	36122	when
O	36123	36132	declaring
O	36133	36134	a
O	36135	36140	final
O	36141	36150	attribute
O	36151	36153	is
O	36154	36158	that
O	36158	36159	,
O	36160	36164	once
O	36165	36168	you
O	36169	36176	declare
O	36177	36179	an
O	36180	36186	object
O	36187	36190	for
O	36191	36195	your
O	36196	36204	specific
O	36205	36212	purpose
O	36213	36214	(
O	36214	36218	like
O	36219	36222	the
O	36223	36228	final
B-api_mention	36229	36233	List
O	36234	36238	that
O	36239	36242	you
O	36243	36247	have
O	36248	36256	declared
O	36256	36257	)
O	36257	36258	,
O	36259	36263	that
O	36264	36267	and
O	36268	36272	only
O	36273	36277	that
O	36278	36284	object
O	36285	36289	will
O	36290	36292	be
O	36293	36297	used
O	36298	36301	for
O	36302	36306	that
O	36307	36314	purpose
O	36314	36315	:
O	36316	36319	you
O	36320	36324	will
O	36325	36328	not
O	36329	36331	be
O	36332	36336	able
O	36337	36339	to
O	36340	36346	change
B-api_mention	36347	36351	List
O	36352	36355	foo
O	36356	36358	to
O	36359	36366	another
B-api_mention	36367	36371	List
O	36372	36373	,
O	36374	36377	but
O	36378	36381	you
O	36382	36385	can
O	36386	36391	still
O	36392	36397	alter
O	36398	36402	your
B-api_mention	36403	36407	List
O	36408	36410	by
O	36411	36417	adding
O	36417	36418	/
O	36418	36426	removing
O	36427	36432	items
O	36433	36434	(
O	36434	36437	the
B-api_mention	36438	36442	List
O	36443	36446	you
O	36447	36450	are
O	36451	36456	using
O	36457	36461	will
O	36462	36464	be
O	36465	36468	the
O	36469	36473	same
O	36473	36474	,
O	36475	36479	only
O	36480	36484	with
O	36485	36488	its
O	36489	36497	contents
O	36498	36505	altered
O	36505	36506	)
O	36506	36507	.

O	36509	36517	Question
O	36517	36518	-
O	36518	36526	15655012
O	36526	36527	,
O	36528	36534	answer
O	36534	36535	-
O	36535	36543	15656208

O	36544	36548	This
O	36549	36551	is
O	36552	36560	favorite
O	36561	36570	interview
O	36571	36579	question
O	36580	36581	.

O	36582	36593	Interviewer
O	36594	36599	tries
O	36600	36602	to
O	36603	36607	find
O	36608	36611	out
O	36612	36616	here
O	36616	36617	,
O	36618	36621	how
O	36622	36626	much
O	36627	36630	you
O	36631	36641	understand
O	36642	36647	about
O	36648	36656	behavior
O	36657	36659	of
O	36660	36667	objects
O	36668	36672	with
O	36673	36680	respect
O	36681	36683	to
O	36684	36696	constructors
O	36696	36697	,
O	36698	36705	methods
O	36705	36706	,
O	36707	36712	class
O	36713	36722	variables
O	36722	36723	(
O	36723	36729	static
O	36730	36739	variables
O	36739	36740	)
O	36740	36741	,
O	36742	36750	instance
O	36751	36760	variables
O	36760	36761	.

O	36762	36763	#
O	36763	36766	pre
O	36767	36769	In
O	36770	36775	above
O	36776	36780	case
O	36781	36783	we
O	36784	36788	have
O	36789	36796	defined
O	36797	36801	Test
O	36802	36813	constructor
O	36814	36817	and
O	36818	36824	setFoo
O	36825	36831	method
O	36831	36832	.

O	36833	36838	About
O	36839	36850	constructor
O	36850	36851	:
O	36852	36863	Constructor
O	36864	36867	can
O	36868	36870	be
O	36871	36878	invoked
O	36879	36883	only
O	36884	36887	one
O	36888	36892	time
O	36893	36896	per
O	36897	36903	object
O	36904	36912	creation
O	36913	36915	by
O	36916	36921	using
O	36922	36925	new
O	36926	36933	keyword
O	36933	36934	.

O	36935	36945	Programmer
O	36946	36952	cannot
O	36953	36959	invoke
O	36960	36971	constructor
O	36972	36976	many
O	36977	36982	times
O	36983	36990	because
O	36991	37002	constructor
O	37003	37006	are
O	37007	37015	designed
O	37016	37018	so
O	37018	37019	.

O	37020	37025	About
O	37026	37032	method
O	37032	37033	:
O	37034	37040	Method
O	37041	37044	can
O	37045	37047	be
O	37048	37055	invoked
O	37056	37058	as
O	37059	37063	many
O	37064	37068	time
O	37069	37071	as
O	37072	37082	programmer
O	37083	37088	wants
O	37089	37092	and
O	37093	37101	compiler
O	37102	37107	knows
O	37108	37110	it
O	37111	37121	programmer
O	37122	37125	may
O	37126	37132	invoke
O	37133	37139	method
O	37140	37144	zero
O	37145	37147	or
O	37148	37156	multiple
O	37157	37161	time
O	37161	37162	.

O	37163	37171	Scenario
O	37172	37173	1
O	37174	37181	private
O	37182	37187	final
B-api_mention	37188	37192	List
O	37193	37196	foo
O	37196	37197	;
O	37198	37199	/
O	37199	37200	/
O	37201	37202	1
O	37203	37206	foo
O	37207	37209	is
O	37210	37212	an
O	37213	37221	instance
O	37222	37230	variable
O	37230	37231	.

O	37232	37236	When
O	37237	37239	we
O	37240	37246	create
O	37247	37251	Test
O	37252	37257	class
O	37257	37258	'
O	37259	37265	object
O	37266	37270	then
O	37271	37279	instance
O	37280	37288	variable
O	37289	37292	foo
O	37293	37297	will
O	37298	37300	be
O	37301	37307	copied
O	37308	37314	inside
O	37315	37321	object
O	37322	37324	of
O	37325	37329	Test
O	37330	37335	class
O	37335	37336	.

O	37337	37339	If
O	37340	37342	we
O	37343	37349	assign
O	37350	37353	foo
O	37354	37360	inside
O	37361	37372	constructor
O	37373	37377	then
O	37378	37386	compiler
O	37387	37391	know
O	37392	37396	that
O	37397	37408	Constructor
O	37409	37413	will
O	37414	37416	be
O	37417	37424	invoked
O	37425	37429	only
O	37430	37433	one
O	37434	37438	time
O	37438	37439	.

O	37440	37442	so
O	37443	37448	there
O	37449	37451	is
O	37452	37454	no
O	37455	37462	problem
O	37463	37465	to
O	37466	37472	assign
O	37473	37475	it
O	37476	37482	inside
O	37483	37494	constructor
O	37494	37495	.

O	37496	37498	If
O	37499	37501	we
O	37502	37508	assign
O	37509	37512	foo
O	37513	37519	inside
O	37520	37526	method
O	37527	37531	then
O	37532	37540	compiler
O	37541	37546	knows
O	37547	37551	that
O	37552	37558	method
O	37559	37562	may
O	37563	37565	be
O	37566	37573	invoked
O	37574	37582	multiple
O	37583	37587	time
O	37587	37588	.

O	37589	37591	So
O	37592	37597	value
O	37598	37602	will
O	37603	37607	have
O	37608	37610	to
O	37611	37613	be
O	37614	37621	changed
O	37622	37630	multiple
O	37631	37635	time
O	37636	37641	which
O	37642	37644	is
O	37645	37648	not
O	37649	37656	allowed
O	37657	37660	for
O	37661	37666	final
O	37667	37675	variable
O	37675	37676	.

O	37677	37680	You
O	37681	37684	can
O	37685	37691	assign
O	37692	37697	value
O	37698	37700	to
O	37701	37704	the
O	37705	37710	final
O	37711	37719	variable
O	37720	37724	only
O	37725	37728	one
O	37729	37733	time
O	37733	37734	.

O	37735	37737	So
O	37738	37746	compiler
O	37747	37754	decides
O	37755	37766	constructor
O	37767	37769	is
O	37770	37774	good
O	37775	37781	choice
O	37781	37782	!

O	37783	37791	Scenario
O	37792	37793	2
O	37794	37801	private
O	37802	37808	static
O	37809	37814	final
B-api_mention	37815	37819	List
O	37820	37823	foo
O	37824	37825	=
O	37826	37829	new
B-api_mention	37830	37839	ArrayList
I-api_mention	37839	37840	(
I-api_mention	37840	37844	args
I-api_mention	37844	37845	)
O	37845	37846	;
O	37847	37850	foo
O	37851	37853	is
O	37854	37857	now
O	37858	37864	static
O	37865	37873	variable
O	37873	37874	.

O	37875	37879	When
O	37880	37882	we
O	37883	37889	create
O	37890	37896	object
O	37897	37899	of
O	37900	37904	Test
O	37905	37910	class
O	37911	37915	then
O	37916	37919	foo
O	37920	37924	will
O	37925	37928	not
O	37929	37931	be
O	37932	37938	copied
O	37939	37941	to
O	37942	37945	the
O	37946	37952	object
O	37953	37955	of
O	37956	37960	Test
O	37961	37966	class
O	37967	37974	because
O	37975	37978	foo
O	37979	37981	is
O	37982	37988	static
O	37988	37989	.

O	37990	37993	Now
O	37994	37997	foo
O	37998	38000	is
O	38001	38004	not
O	38005	38008	the
O	38009	38017	property
O	38018	38020	of
O	38021	38025	each
O	38026	38032	object
O	38032	38033	.

O	38034	38038	This
O	38039	38041	is
O	38042	38045	the
O	38046	38054	property
O	38055	38057	of
O	38058	38062	Test
O	38063	38068	class
O	38068	38069	.

O	38070	38073	But
O	38074	38077	foo
O	38078	38081	can
O	38082	38084	be
O	38085	38089	seen
O	38090	38092	by
O	38093	38097	many
O	38098	38105	objects
O	38106	38109	and
O	38110	38112	if
O	38113	38118	every
O	38119	38125	object
O	38126	38131	which
O	38132	38134	is
O	38135	38142	created
O	38143	38145	by
O	38146	38151	using
O	38152	38155	new
O	38156	38163	keyword
O	38164	38169	which
O	38170	38180	ultimately
O	38181	38187	invoke
O	38188	38192	Test
O	38193	38204	constructor
O	38205	38209	then
O	38210	38215	value
O	38216	38220	will
O	38221	38223	be
O	38224	38231	changed
O	38232	38234	at
O	38235	38238	the
O	38239	38243	time
O	38244	38246	of
O	38247	38255	multiple
O	38256	38262	object
O	38263	38271	creation
O	38272	38273	(
O	38273	38281	Remember
O	38282	38288	static
O	38289	38292	foo
O	38293	38295	is
O	38296	38299	not
O	38300	38306	copied
O	38307	38309	in
O	38310	38315	every
O	38316	38322	object
O	38323	38326	now
O	38327	38330	but
O	38331	38333	is
O	38334	38340	shared
O	38341	38348	between
O	38349	38357	multiple
O	38358	38365	objects
O	38365	38366	.
O	38366	38367	)
O	38368	38376	Scenario
O	38377	38378	3
O	38379	38380	t
O	38380	38381	.
O	38381	38384	foo
B-api_mention	38384	38385	.
I-api_mention	38385	38388	add
I-api_mention	38388	38389	(
I-api_mention	38389	38393	args
I-api_mention	38393	38394	)
O	38394	38395	;
O	38396	38397	/
O	38397	38398	/
O	38399	38411	Modification
O	38411	38412	-
O	38412	38413	2
O	38414	38419	Above
O	38420	38432	Modification
O	38432	38433	-
O	38433	38434	2
O	38435	38437	is
O	38438	38442	from
O	38443	38447	your
O	38448	38456	question
O	38456	38457	.

O	38458	38460	In
O	38461	38466	above
O	38467	38471	case
O	38472	38475	you
O	38476	38479	are
O	38480	38483	not
O	38484	38492	changing
O	38493	38498	first
O	38499	38509	referenced
O	38510	38516	object
O	38517	38520	but
O	38521	38524	you
O	38525	38528	are
O	38529	38535	adding
O	38536	38544	contents
O	38545	38551	inside
O	38552	38555	foo
O	38556	38561	which
O	38562	38564	is
O	38565	38572	allowed
O	38572	38573	.

O	38574	38582	Compiler
O	38583	38592	complains
O	38593	38595	if
O	38596	38599	you
O	38600	38603	try
O	38604	38606	to
O	38607	38613	assign
O	38614	38617	new
B-api_mention	38618	38627	ArrayList
I-api_mention	38627	38628	(
I-api_mention	38628	38632	args
I-api_mention	38632	38633	)
O	38634	38640	object
O	38641	38643	to
O	38644	38647	the
O	38648	38651	foo
O	38652	38661	reference
O	38662	38670	variable
O	38670	38671	.

O	38672	38676	Rule
O	38677	38679	is
O	38680	38684	that
O	38685	38687	if
O	38688	38691	you
O	38692	38696	have
O	38697	38708	initialized
O	38709	38715	object
O	38716	38718	to
O	38719	38724	final
O	38725	38734	reference
O	38735	38743	variable
O	38744	38748	then
O	38749	38752	you
O	38753	38759	cannot
O	38760	38766	change
O	38767	38769	it
O	38770	38772	to
O	38773	38778	refer
O	38779	38788	different
B-api_mention	38789	38798	ArrayList
O	38799	38805	object
O	38805	38806	.

O	38807	38808	(
O	38808	38810	in
O	38811	38815	this
O	38816	38820	case
B-api_mention	38821	38830	ArrayList
O	38830	38831	)
O	38832	38837	final
O	38838	38843	class
O	38844	38850	cannot
O	38851	38853	be
O	38854	38864	subclassed
O	38865	38870	final
O	38871	38878	methods
O	38879	38885	cannot
O	38886	38888	be
O	38889	38899	overridden
O	38899	38900	.

O	38901	38902	(
O	38902	38906	This
O	38907	38913	method
O	38914	38916	is
O	38917	38919	in
O	38920	38930	superclass
O	38930	38931	)
O	38932	38937	final
O	38938	38945	methods
O	38946	38949	can
O	38950	38958	override
O	38958	38959	.

O	38960	38961	(
O	38961	38965	Read
O	38966	38970	this
O	38971	38973	in
O	38974	38985	grammatical
O	38986	38989	way
O	38989	38990	.
O	38991	38995	This
O	38996	39002	method
O	39003	39005	is
O	39006	39008	in
O	39009	39017	subclass
O	39017	39018	)

O	39020	39028	Question
O	39028	39029	-
O	39029	39037	15655012
O	39037	39038	,
O	39039	39045	answer
O	39045	39046	-
O	39046	39054	24895623

O	39055	39060	First
O	39061	39063	of
O	39064	39067	all
O	39067	39068	,
O	39069	39072	the
O	39073	39078	place
O	39079	39081	in
O	39082	39086	your
O	39087	39091	code
O	39092	39097	where
O	39098	39101	you
O	39102	39105	are
O	39106	39118	initializing
O	39119	39120	(
O	39120	39121	i
O	39121	39122	.
O	39122	39123	e
O	39123	39124	.
O	39125	39134	assigning
O	39135	39138	for
O	39139	39142	the
O	39143	39148	first
O	39149	39153	time
O	39153	39154	)
O	39155	39158	foo
O	39159	39161	is
O	39162	39166	here
O	39166	39167	:
O	39168	39171	foo
O	39172	39173	=
O	39174	39177	new
B-api_mention	39178	39187	ArrayList
I-api_mention	39187	39188	(
I-api_mention	39188	39192	args
I-api_mention	39192	39193	)
O	39193	39194	;
O	39195	39198	foo
O	39199	39201	is
O	39202	39204	an
O	39205	39211	object
O	39212	39213	(
O	39213	39217	with
O	39218	39222	type
O	39223	39227	List
O	39227	39228	)
O	39229	39231	so
O	39232	39234	it
O	39235	39237	is
O	39238	39239	a
O	39240	39249	reference
O	39250	39254	type
O	39254	39255	,
O	39256	39259	not
O	39260	39261	a
O	39262	39267	value
O	39268	39272	type
O	39273	39274	(
O	39274	39278	like
O	39279	39282	int
O	39282	39283	)
O	39283	39284	.

O	39285	39287	As
O	39288	39292	such
O	39292	39293	,
O	39294	39296	it
O	39297	39302	holds
O	39303	39304	a
O	39305	39314	reference
O	39315	39317	to
O	39318	39319	a
O	39320	39326	memory
O	39327	39335	location
O	39336	39337	(
O	39337	39338	e
O	39338	39339	.
O	39339	39340	g
O	39340	39341	.
O	39342	39352	0xA7D2A834
O	39352	39353	)
O	39354	39359	where
O	39360	39364	your
B-api_mention	39365	39369	List
O	39370	39378	elements
O	39379	39382	are
O	39383	39389	stored
O	39389	39390	.

O	39391	39396	Lines
O	39397	39401	like
O	39402	39406	this
O	39407	39410	foo
O	39410	39411	.
B-api_mention	39411	39414	add
I-api_mention	39414	39415	(
I-api_mention	39415	39419	args
I-api_mention	39419	39420	)
O	39420	39421	;
O	39422	39423	/
O	39423	39424	/
O	39425	39437	Modification
O	39437	39438	-
O	39438	39439	1
O	39440	39442	do
O	39443	39446	not
O	39447	39453	change
O	39454	39457	the
O	39458	39463	value
O	39464	39466	of
O	39467	39470	foo
O	39471	39472	(
O	39472	39477	which
O	39477	39478	,
O	39479	39484	again
O	39484	39485	,
O	39486	39488	is
O	39489	39493	just
O	39494	39495	a
O	39496	39505	reference
O	39506	39508	to
O	39509	39510	a
O	39511	39517	memory
O	39518	39526	location
O	39526	39527	)
O	39527	39528	.

O	39529	39536	Instead
O	39536	39537	,
O	39538	39542	they
O	39543	39547	just
O	39548	39551	add
O	39552	39560	elements
O	39561	39565	into
O	39566	39570	that
O	39571	39581	referenced
O	39582	39588	memory
O	39589	39597	location
O	39597	39598	.

O	39599	39601	To
O	39602	39609	violate
O	39610	39613	the
O	39614	39619	final
O	39620	39627	keyword
O	39627	39628	,
O	39629	39632	you
O	39633	39638	would
O	39639	39643	have
O	39644	39646	to
O	39647	39650	try
O	39651	39653	to
O	39654	39656	re
O	39656	39657	-
O	39657	39663	assign
O	39664	39667	foo
O	39668	39670	as
O	39671	39678	follows
O	39679	39684	again
O	39684	39685	:
O	39686	39689	foo
O	39690	39691	=
O	39692	39695	new
B-api_mention	39696	39705	ArrayList
I-api_mention	39705	39706	(
I-api_mention	39706	39710	args
I-api_mention	39710	39711	)
O	39711	39712	;
O	39713	39717	That
O	39718	39723	would
O	39724	39728	give
O	39729	39732	you
O	39733	39734	a
O	39735	39746	compilation
O	39747	39752	error
O	39752	39753	.

O	39754	39757	Now
O	39757	39758	,
O	39759	39763	with
O	39764	39768	that
O	39769	39772	out
O	39773	39775	of
O	39776	39779	the
O	39780	39783	way
O	39783	39784	,
O	39785	39790	think
O	39791	39796	about
O	39797	39801	what
O	39802	39809	happens
O	39810	39814	when
O	39815	39818	you
O	39819	39822	add
O	39823	39826	the
O	39827	39833	static
O	39834	39841	keyword
O	39841	39842	.

O	39843	39847	When
O	39848	39851	you
O	39852	39854	do
O	39855	39858	NOT
O	39859	39863	have
O	39864	39867	the
O	39868	39874	static
O	39875	39882	keyword
O	39882	39883	,
O	39884	39888	each
O	39889	39895	object
O	39896	39900	that
O	39901	39913	instantiates
O	39914	39917	the
O	39918	39923	class
O	39924	39927	has
O	39928	39931	its
O	39932	39935	own
O	39936	39940	copy
O	39941	39943	of
O	39944	39947	foo
O	39947	39948	.

O	39949	39958	Therefore
O	39958	39959	,
O	39960	39963	the
O	39964	39975	constructor
O	39976	39983	assigns
O	39984	39985	a
O	39986	39991	value
O	39992	39994	to
O	39995	39996	a
O	39997	40002	blank
O	40002	40003	,
O	40004	40009	fresh
O	40010	40014	copy
O	40015	40017	of
O	40018	40021	the
O	40022	40025	foo
O	40026	40034	variable
O	40034	40035	,
O	40036	40041	which
O	40042	40044	is
O	40045	40054	perfectly
O	40055	40059	fine
O	40059	40060	.

O	40061	40068	However
O	40068	40069	,
O	40070	40074	when
O	40075	40078	you
O	40079	40081	DO
O	40082	40086	have
O	40087	40090	the
O	40091	40097	static
O	40098	40105	keyword
O	40105	40106	,
O	40107	40111	only
O	40112	40115	one
O	40116	40119	foo
O	40120	40126	exists
O	40127	40129	in
O	40130	40136	memory
O	40137	40141	that
O	40142	40144	is
O	40145	40155	associated
O	40156	40160	with
O	40161	40164	the
O	40165	40170	class
O	40170	40171	.

O	40172	40174	If
O	40175	40178	you
O	40179	40183	were
O	40184	40186	to
O	40187	40193	create
O	40194	40197	two
O	40198	40200	or
O	40201	40205	more
O	40206	40213	objects
O	40213	40214	,
O	40215	40218	the
O	40219	40230	constructor
O	40231	40236	would
O	40237	40239	be
O	40240	40250	attempting
O	40251	40253	to
O	40254	40256	re
O	40256	40257	-
O	40257	40263	assign
O	40264	40268	that
O	40269	40272	one
O	40273	40276	foo
O	40277	40281	each
O	40282	40286	time
O	40286	40287	,
O	40288	40297	violating
O	40298	40301	the
O	40302	40307	final
O	40308	40315	keyword
O	40315	40316	.

O	40318	40326	Question
O	40326	40327	-
O	40327	40335	16159203
O	40335	40336	,
O	40337	40343	answer
O	40343	40344	-
O	40344	40352	16323196

O	40353	40354	#
O	40354	40364	blockquote
O	40365	40375	currentPos
O	40376	40377	=
O	40378	40381	new
B-api_mention	40382	40387	Point
I-api_mention	40387	40388	(
I-api_mention	40388	40392	args
I-api_mention	40392	40393	)
O	40393	40394	;
O	40395	40399	does
O	40400	40401	a
O	40402	40405	few
O	40406	40412	things
O	40412	40413	,
O	40414	40423	including
O	40424	40431	writing
O	40432	40439	default
O	40440	40446	values
O	40447	40449	to
O	40450	40451	x
O	40452	40455	and
O	40456	40457	y
O	40458	40459	(
O	40459	40460	0
O	40460	40461	)
O	40462	40465	and
O	40466	40470	then
O	40471	40478	writing
O	40479	40484	their
O	40485	40492	initial
O	40493	40499	values
O	40500	40502	in
O	40503	40506	the
O	40507	40518	constructor
O	40518	40519	.

O	40520	40525	Since
O	40526	40530	your
O	40531	40537	object
O	40538	40540	is
O	40541	40544	not
O	40545	40551	safely
O	40552	40561	published
O	40562	40567	those
O	40568	40569	4
O	40570	40575	write
O	40576	40586	operations
O	40587	40590	can
O	40591	40593	be
O	40594	40600	freely
O	40601	40610	reordered
O	40611	40613	by
O	40614	40617	the
O	40618	40626	compiler
O	40627	40628	/
O	40629	40632	JVM
O	40632	40633	.

O	40634	40636	So
O	40637	40641	from
O	40642	40645	the
O	40646	40657	perspective
O	40658	40660	of
O	40661	40664	the
O	40665	40672	reading
O	40673	40679	thread
O	40679	40680	,
O	40681	40683	it
O	40684	40686	is
O	40687	40688	a
O	40689	40694	legal
O	40695	40704	execution
O	40705	40707	to
O	40708	40712	read
O	40713	40714	x
O	40715	40719	with
O	40720	40723	its
O	40724	40727	new
O	40728	40733	value
O	40734	40737	but
O	40738	40739	y
O	40740	40744	with
O	40745	40748	its
O	40749	40756	default
O	40757	40762	value
O	40763	40765	of
O	40766	40767	0
O	40768	40771	for
O	40772	40779	example
O	40779	40780	.

O	40781	40783	By
O	40784	40787	the
O	40788	40792	time
O	40793	40796	you
O	40797	40802	reach
O	40803	40806	the
O	40807	40814	println
O	40815	40824	statement
O	40825	40826	(
O	40826	40831	which
O	40832	40834	by
O	40835	40838	the
O	40839	40842	way
O	40843	40845	is
O	40846	40858	synchronized
O	40859	40862	and
O	40863	40872	therefore
O	40873	40877	does
O	40878	40887	influence
O	40888	40891	the
O	40892	40896	read
O	40897	40907	operations
O	40907	40908	)
O	40908	40909	,
O	40910	40913	the
O	40914	40923	variables
O	40924	40928	have
O	40929	40934	their
O	40935	40942	initial
O	40943	40949	values
O	40950	40953	and
O	40954	40957	the
O	40958	40965	program
O	40966	40972	prints
O	40973	40976	the
O	40977	40985	expected
O	40986	40992	values
O	40992	40993	.

O	40994	41001	Marking
O	41002	41012	currentPos
O	41013	41015	as
O	41016	41024	volatile
O	41025	41029	will
O	41030	41036	ensure
O	41037	41041	safe
O	41042	41053	publication
O	41054	41059	since
O	41060	41064	your
O	41065	41071	object
O	41072	41074	is
O	41075	41086	effectively
O	41087	41096	immutable
O	41097	41098	-
O	41099	41101	if
O	41102	41104	in
O	41105	41109	your
O	41110	41114	real
O	41115	41118	use
O	41119	41123	case
O	41124	41127	the
O	41128	41134	object
O	41135	41137	is
O	41138	41145	mutated
O	41146	41151	after
O	41152	41164	construction
O	41164	41165	,
O	41166	41174	volatile
O	41175	41185	guarantees
O	41186	41189	won
O	41189	41190	'
O	41190	41191	t
O	41192	41194	be
O	41195	41201	enough
O	41202	41205	and
O	41206	41209	you
O	41210	41215	could
O	41216	41219	see
O	41220	41222	an
O	41223	41235	inconsistent
O	41236	41242	object
O	41243	41248	again
O	41248	41249	.

O	41250	41263	Alternatively
O	41263	41264	,
O	41265	41268	you
O	41269	41272	can
O	41273	41277	make
O	41278	41281	the
B-api_mention	41282	41287	Point
O	41288	41297	immutable
O	41298	41303	which
O	41304	41308	will
O	41309	41313	also
O	41314	41320	ensure
O	41321	41325	safe
O	41326	41337	publication
O	41337	41338	,
O	41339	41343	even
O	41344	41351	without
O	41352	41357	using
O	41358	41366	volatile
O	41367	41368	.

O	41369	41371	To
O	41372	41379	achieve
O	41380	41392	immutability
O	41392	41393	,
O	41394	41397	you
O	41398	41404	simply
O	41405	41409	need
O	41410	41412	to
O	41413	41417	mark
O	41418	41419	x
O	41420	41423	and
O	41424	41425	y
O	41426	41431	final
O	41431	41432	.

O	41433	41435	As
O	41436	41437	a
O	41438	41442	side
O	41443	41447	note
O	41448	41451	and
O	41452	41454	as
O	41455	41462	already
O	41463	41472	mentioned
O	41472	41473	,
B-api_mention	41474	41486	synchronized
I-api_mention	41486	41487	(
I-api_mention	41487	41491	args
I-api_mention	41491	41492	)
O	41493	41494	{
O	41494	41495	}
O	41496	41499	can
O	41500	41502	be
O	41503	41510	treated
O	41511	41513	as
O	41514	41515	a
O	41516	41518	no
O	41518	41519	-
O	41519	41521	op
O	41522	41524	by
O	41525	41528	the
O	41529	41532	JVM
O	41533	41534	(
O	41534	41535	I
O	41536	41546	understand
O	41547	41550	you
O	41551	41559	included
O	41560	41562	it
O	41563	41565	to
O	41566	41575	reproduce
O	41576	41579	the
O	41580	41589	behaviour
O	41589	41590	)
O	41590	41591	.

O	41593	41601	Question
O	41601	41602	-
O	41602	41610	16159203
O	41610	41611	,
O	41612	41618	answer
O	41618	41619	-
O	41619	41627	18258659

O	41628	41631	You
O	41632	41636	have
O	41637	41645	ordinary
O	41646	41652	memory
O	41652	41653	,
O	41654	41657	the
O	41658	41659	'
O	41659	41669	currentpos
O	41669	41670	'
O	41671	41680	reference
O	41681	41684	and
O	41685	41688	the
B-api_mention	41689	41694	Point
O	41695	41701	object
O	41702	41705	and
O	41706	41709	its
O	41710	41716	fields
O	41717	41723	behind
O	41724	41726	it
O	41726	41727	,
O	41728	41734	shared
O	41735	41742	between
O	41743	41744	2
O	41745	41752	threads
O	41752	41753	,
O	41754	41761	without
O	41762	41777	synchronisation
O	41777	41778	.

O	41779	41783	Thus
O	41783	41784	,
O	41785	41790	there
O	41791	41793	is
O	41794	41796	no
O	41797	41804	defined
O	41805	41813	ordering
O	41814	41821	between
O	41822	41825	the
O	41826	41832	writes
O	41833	41837	that
O	41838	41844	happen
O	41845	41847	to
O	41848	41852	this
O	41853	41859	memory
O	41860	41862	in
O	41863	41866	the
O	41867	41871	main
O	41872	41878	thread
O	41879	41882	and
O	41883	41886	the
O	41887	41892	reads
O	41893	41895	in
O	41896	41899	the
O	41900	41907	created
O	41908	41914	thread
O	41915	41916	(
O	41916	41920	call
O	41921	41923	it
O	41924	41925	T
O	41925	41926	)
O	41926	41927	.

O	41928	41932	Main
O	41933	41939	thread
O	41940	41942	is
O	41943	41948	doing
O	41949	41952	the
O	41953	41962	following
O	41963	41969	writes
O	41970	41971	(
O	41971	41979	ignoring
O	41980	41983	the
O	41984	41991	initial
O	41992	41997	setup
O	41998	42000	of
O	42001	42006	point
O	42006	42007	,
O	42008	42012	will
O	42013	42019	result
O	42020	42022	in
O	42023	42024	p
O	42024	42025	.
O	42025	42026	x
O	42027	42030	and
O	42031	42032	p
O	42032	42033	.
O	42033	42034	y
O	42035	42041	having
O	42042	42049	default
O	42050	42056	values
O	42056	42057	)
O	42057	42058	:
O	42059	42060	#
O	42060	42062	li
O	42063	42065	to
O	42066	42067	p
O	42067	42068	.
O	42068	42069	x
O	42070	42071	#
O	42071	42073	li
O	42074	42076	to
O	42077	42078	p
O	42078	42079	.
O	42079	42080	y
O	42081	42082	#
O	42082	42084	li
O	42085	42087	to
O	42088	42098	currentpos
O	42099	42106	Because
O	42107	42112	there
O	42113	42115	is
O	42116	42123	nothing
O	42124	42131	special
O	42132	42137	about
O	42138	42143	these
O	42144	42150	writes
O	42151	42153	in
O	42154	42159	terms
O	42160	42162	of
O	42163	42178	synchronisation
O	42178	42179	/
O	42179	42187	barriers
O	42187	42188	,
O	42189	42192	the
O	42193	42200	runtime
O	42201	42203	is
O	42204	42208	free
O	42209	42211	to
O	42212	42217	allow
O	42218	42221	the
O	42222	42223	T
O	42224	42230	thread
O	42231	42234	see
O	42235	42239	them
O	42240	42245	occur
O	42246	42248	in
O	42249	42252	any
O	42253	42258	order
O	42259	42260	(
O	42260	42263	the
O	42264	42268	main
O	42269	42275	thread
O	42276	42278	of
O	42279	42285	course
O	42286	42292	always
O	42293	42297	sees
O	42298	42304	writes
O	42305	42308	and
O	42309	42314	reads
O	42315	42322	ordered
O	42323	42332	according
O	42333	42335	to
O	42336	42345	programme
O	42346	42351	order
O	42351	42352	)
O	42352	42353	,
O	42354	42357	and
O	42358	42363	occur
O	42364	42366	at
O	42367	42370	any
O	42371	42376	point
O	42377	42384	between
O	42385	42388	the
O	42389	42394	reads
O	42395	42397	in
O	42398	42399	T
O	42399	42400	.

O	42401	42403	So
O	42404	42405	T
O	42406	42408	is
O	42409	42414	doing
O	42414	42415	:
O	42416	42417	#
O	42417	42419	li
O	42420	42425	reads
O	42426	42436	currentpos
O	42437	42439	to
O	42440	42441	p
O	42442	42443	#
O	42443	42445	li
O	42446	42450	read
O	42451	42452	p
O	42452	42453	.
O	42453	42454	x
O	42455	42458	and
O	42459	42460	p
O	42460	42461	.
O	42461	42462	y
O	42463	42464	(
O	42464	42466	in
O	42467	42473	either
O	42474	42479	order
O	42479	42480	)
O	42481	42482	#
O	42482	42484	li
O	42485	42492	compare
O	42492	42493	,
O	42494	42497	and
O	42498	42502	take
O	42503	42506	the
O	42507	42513	branch
O	42514	42515	#
O	42515	42517	li
O	42518	42522	read
O	42523	42524	p
O	42524	42525	.
O	42525	42526	x
O	42527	42530	and
O	42531	42532	p
O	42532	42533	.
O	42533	42534	y
O	42535	42536	(
O	42536	42542	either
O	42543	42548	order
O	42548	42549	)
O	42550	42553	and
O	42554	42558	call
B-api_mention	42559	42565	System
I-api_mention	42565	42566	.
I-api_mention	42566	42569	out
I-api_mention	42569	42570	.
I-api_mention	42570	42577	println
O	42578	42583	Given
O	42584	42589	there
O	42589	42590	'
O	42590	42591	s
O	42592	42594	no
O	42595	42603	ordering
O	42604	42617	relationships
O	42618	42625	between
O	42626	42629	the
O	42630	42636	writes
O	42637	42639	in
O	42640	42644	main
O	42644	42645	,
O	42646	42649	and
O	42650	42653	the
O	42654	42659	reads
O	42660	42662	in
O	42663	42664	T
O	42664	42665	,
O	42666	42671	there
O	42672	42675	are
O	42676	42683	clearly
O	42684	42691	several
O	42692	42696	ways
O	42697	42701	this
O	42702	42705	can
O	42706	42713	produce
O	42714	42718	your
O	42719	42725	result
O	42725	42726	,
O	42727	42729	as
O	42730	42731	T
O	42732	42735	may
O	42736	42739	see
O	42740	42744	main
O	42744	42745	'
O	42745	42746	s
O	42747	42752	write
O	42753	42755	to
O	42756	42766	currentpos
O	42767	42773	before
O	42774	42777	the
O	42778	42784	writes
O	42785	42787	to
O	42788	42798	currentpos
O	42798	42799	.
O	42799	42800	y
O	42801	42803	or
O	42804	42814	currentpos
O	42814	42815	.
O	42815	42816	x
O	42816	42817	:
O	42818	42819	#
O	42819	42821	li
O	42822	42824	It
O	42825	42830	reads
O	42831	42841	currentpos
O	42841	42842	.
O	42842	42843	x
O	42844	42849	first
O	42849	42850	,
O	42851	42857	before
O	42858	42861	the
O	42862	42863	x
O	42864	42869	write
O	42870	42873	has
O	42874	42882	occurred
O	42883	42884	-
O	42885	42889	gets
O	42890	42891	0
O	42891	42892	,
O	42893	42897	then
O	42898	42903	reads
O	42904	42914	currentpos
O	42914	42915	.
O	42915	42916	y
O	42917	42923	before
O	42924	42927	the
O	42928	42929	y
O	42930	42935	write
O	42936	42939	has
O	42940	42948	occurred
O	42949	42950	-
O	42951	42955	gets
O	42956	42957	0
O	42957	42958	.

O	42959	42966	Compare
O	42967	42972	evals
O	42973	42975	to
O	42976	42980	true
O	42980	42981	.

O	42982	42985	The
O	42986	42992	writes
O	42993	42999	become
O	43000	43007	visible
O	43008	43010	to
O	43011	43012	T
O	43012	43013	.

B-api_mention	43014	43020	System
I-api_mention	43020	43021	.
I-api_mention	43021	43024	out
I-api_mention	43024	43025	.
I-api_mention	43025	43032	println
O	43033	43035	is
O	43036	43042	called
O	43042	43043	.

O	43044	43045	#
O	43045	43047	li
O	43048	43050	It
O	43051	43056	reads
O	43057	43067	currentpos
O	43067	43068	.
O	43068	43069	x
O	43070	43075	first
O	43075	43076	,
O	43077	43082	after
O	43083	43086	the
O	43087	43088	x
O	43089	43094	write
O	43095	43098	has
O	43099	43107	occurred
O	43107	43108	,
O	43109	43113	then
O	43114	43119	reads
O	43120	43130	currentpos
O	43130	43131	.
O	43131	43132	y
O	43133	43139	before
O	43140	43143	the
O	43144	43145	y
O	43146	43151	write
O	43152	43155	has
O	43156	43164	occurred
O	43165	43166	-
O	43167	43171	gets
O	43172	43173	0
O	43173	43174	.

O	43175	43182	Compare
O	43183	43188	evals
O	43189	43191	to
O	43192	43196	true
O	43196	43197	.

O	43198	43204	Writes
O	43205	43211	become
O	43212	43219	visible
O	43220	43222	to
O	43223	43224	T
O	43224	43225	.
O	43225	43226	.
O	43226	43227	.
O	43228	43231	etc
O	43231	43232	.

O	43233	43234	#
O	43234	43236	li
O	43237	43239	It
O	43240	43245	reads
O	43246	43256	currentpos
O	43256	43257	.
O	43257	43258	y
O	43259	43264	first
O	43264	43265	,
O	43266	43272	before
O	43273	43276	the
O	43277	43278	y
O	43279	43284	write
O	43285	43288	has
O	43289	43297	occurred
O	43298	43299	(
O	43299	43300	0
O	43300	43301	)
O	43301	43302	,
O	43303	43307	then
O	43308	43313	reads
O	43314	43324	currentpos
O	43324	43325	.
O	43325	43326	x
O	43327	43332	after
O	43333	43336	the
O	43337	43338	x
O	43339	43344	write
O	43344	43345	,
O	43346	43351	evals
O	43352	43354	to
O	43355	43359	true
O	43359	43360	.
O	43361	43364	etc
O	43364	43365	.
O	43366	43369	and
O	43370	43372	so
O	43373	43375	on
O	43375	43376	.
O	43376	43377	.
O	43377	43378	.

O	43379	43384	There
O	43385	43388	are
O	43389	43390	a
O	43391	43397	number
O	43398	43400	of
O	43401	43405	data
O	43406	43411	races
O	43412	43416	here
O	43416	43417	.

O	43418	43419	I
O	43420	43427	suspect
O	43428	43431	the
O	43432	43438	flawed
O	43439	43449	assumption
O	43450	43454	here
O	43455	43457	is
O	43458	43466	thinking
O	43467	43471	that
O	43472	43475	the
O	43476	43482	writes
O	43483	43487	that
O	43488	43494	result
O	43495	43499	from
O	43500	43504	this
O	43505	43509	line
O	43510	43513	are
O	43514	43518	made
O	43519	43526	visible
O	43527	43533	across
O	43534	43537	all
O	43538	43541	the
O	43542	43549	threads
O	43550	43552	in
O	43553	43556	the
O	43557	43566	programme
O	43567	43572	order
O	43573	43575	of
O	43576	43579	the
O	43580	43586	thread
O	43587	43596	executing
O	43597	43599	it
O	43599	43600	:
O	43601	43611	currentPos
O	43612	43613	=
O	43614	43617	new
B-api_mention	43618	43623	Point
I-api_mention	43623	43624	(
I-api_mention	43624	43628	args
I-api_mention	43628	43629	)
O	43629	43630	;
O	43631	43635	Java
O	43636	43641	makes
O	43642	43644	no
O	43645	43649	such
O	43650	43659	guarantee
O	43660	43661	(
O	43661	43663	it
O	43663	43664	'
O	43664	43665	d
O	43666	43668	be
O	43669	43677	terrible
O	43678	43681	for
O	43682	43693	performance
O	43693	43694	)
O	43694	43695	.

O	43696	43705	Something
O	43706	43710	more
O	43711	43715	must
O	43716	43718	be
O	43719	43724	added
O	43725	43727	if
O	43728	43732	your
O	43733	43742	programme
O	43743	43748	needs
O	43749	43750	a
O	43751	43761	guaranteed
O	43762	43770	ordering
O	43771	43773	of
O	43774	43777	the
O	43778	43784	writes
O	43785	43793	relative
O	43794	43796	to
O	43797	43802	reads
O	43803	43805	in
O	43806	43811	other
O	43812	43819	threads
O	43819	43820	.

O	43821	43827	Others
O	43828	43832	have
O	43833	43842	suggested
O	43843	43849	making
O	43850	43853	the
O	43854	43855	x
O	43855	43856	,
O	43856	43857	y
O	43858	43864	fields
O	43865	43870	final
O	43870	43871	,
O	43872	43874	or
O	43875	43888	alternatively
O	43889	43895	making
O	43896	43906	currentpos
O	43907	43915	volatile
O	43915	43916	.

O	43917	43918	#
O	43918	43920	li
O	43921	43923	If
O	43924	43927	you
O	43928	43932	make
O	43933	43936	the
O	43937	43938	x
O	43938	43939	,
O	43939	43940	y
O	43941	43947	fields
O	43948	43953	final
O	43953	43954	,
O	43955	43959	then
O	43960	43964	Java
O	43965	43975	guarantees
O	43976	43980	that
O	43981	43984	the
O	43985	43991	writes
O	43992	43994	of
O	43995	44000	their
O	44001	44007	values
O	44008	44012	will
O	44013	44015	be
O	44016	44020	seen
O	44021	44023	to
O	44024	44029	occur
O	44030	44036	before
O	44037	44040	the
O	44041	44052	constructor
O	44053	44060	returns
O	44060	44061	,
O	44062	44064	in
O	44065	44068	all
O	44069	44076	threads
O	44076	44077	.

O	44078	44082	Thus
O	44082	44083	,
O	44084	44086	as
O	44087	44090	the
O	44091	44101	assignment
O	44102	44104	to
O	44105	44115	currentpos
O	44116	44118	is
O	44119	44124	after
O	44125	44128	the
O	44129	44140	constructor
O	44140	44141	,
O	44142	44145	the
O	44146	44147	T
O	44148	44154	thread
O	44155	44157	is
O	44158	44168	guaranteed
O	44169	44171	to
O	44172	44175	see
O	44176	44179	the
O	44180	44186	writes
O	44187	44189	in
O	44190	44193	the
O	44194	44201	correct
O	44202	44207	order
O	44207	44208	.

O	44209	44210	#
O	44210	44212	li
O	44213	44215	If
O	44216	44219	you
O	44220	44224	make
O	44225	44235	currentpos
O	44236	44244	volatile
O	44244	44245	,
O	44246	44250	then
O	44251	44255	Java
O	44256	44266	guarantees
O	44267	44271	that
O	44272	44276	that
O	44277	44281	this
O	44282	44284	is
O	44285	44286	a
O	44287	44302	synchronisation
O	44303	44308	point
O	44309	44314	which
O	44315	44319	will
O	44320	44322	be
O	44323	44328	total
O	44328	44329	-
O	44329	44336	ordered
O	44337	44340	wrt
O	44341	44346	other
O	44347	44362	synchronisation
O	44363	44369	points
O	44369	44370	.

O	44371	44373	As
O	44374	44376	in
O	44377	44381	main
O	44382	44385	the
O	44386	44392	writes
O	44393	44395	to
O	44396	44397	x
O	44398	44401	and
O	44402	44403	y
O	44404	44408	must
O	44409	44415	happen
O	44416	44422	before
O	44423	44426	the
O	44427	44432	write
O	44433	44435	to
O	44436	44446	currentpos
O	44446	44447	,
O	44448	44452	then
O	44453	44456	any
O	44457	44461	read
O	44462	44464	of
O	44465	44475	currentpos
O	44476	44478	in
O	44479	44486	another
O	44487	44493	thread
O	44494	44498	must
O	44499	44502	see
O	44503	44507	also
O	44508	44511	the
O	44512	44518	writes
O	44519	44521	of
O	44522	44523	x
O	44523	44524	,
O	44525	44526	y
O	44527	44531	that
O	44532	44540	happened
O	44541	44547	before
O	44547	44548	.

O	44549	44554	Using
O	44555	44560	final
O	44561	44564	has
O	44565	44568	the
O	44569	44578	advantage
O	44579	44583	that
O	44584	44586	it
O	44587	44592	makes
O	44593	44596	the
O	44597	44603	fields
O	44604	44613	immutable
O	44613	44614	,
O	44615	44618	and
O	44619	44623	thus
O	44624	44630	allows
O	44631	44634	the
O	44635	44641	values
O	44642	44644	to
O	44645	44647	be
O	44648	44654	cached
O	44654	44655	.

O	44656	44661	Using
O	44662	44670	volatile
O	44671	44676	leads
O	44677	44679	to
O	44680	44695	synchronisation
O	44696	44698	on
O	44699	44704	every
O	44705	44710	write
O	44711	44714	and
O	44715	44719	read
O	44720	44722	of
O	44723	44733	currentpos
O	44733	44734	,
O	44735	44740	which
O	44741	44746	might
O	44747	44751	hurt
O	44752	44763	performance
O	44763	44764	.

O	44765	44768	See
O	44769	44776	chapter
O	44777	44779	17
O	44780	44782	of
O	44783	44786	the
O	44787	44791	Java
O	44792	44800	Language
O	44801	44805	Spec
O	44806	44809	for
O	44810	44813	the
O	44814	44818	gory
O	44819	44826	details
O	44826	44827	:
O	44828	44829	#
O	44829	44830	a
O	44831	44832	(
O	44832	44839	Initial
O	44840	44846	answer
O	44847	44854	assumed
O	44855	44856	a
O	44857	44863	weaker
O	44864	44870	memory
O	44871	44876	model
O	44876	44877	,
O	44878	44880	as
O	44881	44882	I
O	44883	44886	was
O	44887	44890	not
O	44891	44895	sure
O	44896	44899	the
O	44900	44903	JLS
O	44904	44914	guaranteed
O	44915	44923	volatile
O	44924	44927	was
O	44928	44938	sufficient
O	44938	44939	.
O	44940	44946	Answer
O	44947	44953	edited
O	44954	44956	to
O	44957	44964	reflect
O	44965	44972	comment
O	44973	44977	from
O	44978	44986	assylias
O	44986	44987	,
O	44988	44996	pointing
O	44997	45000	out
O	45001	45004	the
O	45005	45009	Java
O	45010	45015	model
O	45016	45018	is
O	45019	45027	stronger
O	45028	45029	-
O	45030	45037	happens
O	45037	45038	-
O	45038	45044	before
O	45045	45047	is
O	45048	45058	transitive
O	45059	45060	-
O	45061	45064	and
O	45065	45067	so
O	45068	45076	volatile
O	45077	45079	on
O	45080	45090	currentpos
O	45091	45095	also
O	45096	45104	suffices
O	45104	45105	)
O	45105	45106	.

O	45108	45116	Question
O	45116	45117	-
O	45117	45125	14491966
O	45125	45126	,
O	45127	45133	answer
O	45133	45134	-
O	45134	45142	14492043

O	45143	45144	'
O	45144	45150	Random
O	45150	45151	'
O	45152	45154	is
O	45155	45159	more
O	45160	45164	than
O	45165	45169	just
O	45170	45175	about
O	45176	45183	getting
O	45184	45191	numbers
O	45191	45192	.
O	45192	45193	.
O	45193	45194	.
O	45194	45195	.
O	45196	45200	what
O	45201	45204	you
O	45205	45209	have
O	45210	45212	is
O	45213	45219	pseudo
O	45219	45220	-
O	45220	45226	random
O	45227	45229	If
O	45230	45236	pseudo
O	45236	45237	-
O	45237	45243	random
O	45244	45246	is
O	45247	45251	good
O	45252	45258	enough
O	45259	45262	for
O	45263	45267	your
O	45268	45276	purposes
O	45276	45277	,
O	45278	45282	then
O	45283	45287	sure
O	45287	45288	,
O	45289	45291	it
O	45291	45292	'
O	45292	45293	s
O	45294	45297	way
O	45298	45304	faster
O	45305	45306	(
O	45306	45309	and
O	45310	45313	XOR
O	45313	45314	+
O	45314	45322	Bitshift
O	45323	45327	will
O	45328	45330	be
O	45331	45337	faster
O	45338	45342	than
O	45343	45347	what
O	45348	45351	you
O	45352	45356	have
O	45356	45357	)
O	45358	45362	Rolf
O	45363	45367	Edit
O	45367	45368	:
O	45369	45371	OK
O	45371	45372	,
O	45373	45378	after
O	45379	45384	being
O	45385	45388	too
O	45389	45394	hasty
O	45395	45397	in
O	45398	45402	this
O	45403	45409	answer
O	45409	45410	,
O	45411	45414	let
O	45415	45417	me
O	45418	45424	answer
O	45425	45428	the
O	45429	45433	real
O	45434	45440	reason
O	45441	45444	why
O	45445	45449	your
O	45450	45454	code
O	45455	45457	is
O	45458	45464	faster
O	45464	45465	:
O	45466	45470	From
O	45471	45474	the
O	45475	45482	JavaDoc
O	45483	45486	for
B-api_mention	45487	45491	Math
I-api_mention	45491	45492	.
I-api_mention	45492	45498	Random
I-api_mention	45498	45499	(
I-api_mention	45499	45500	)
O	45501	45502	#
O	45502	45512	blockquote
O	45513	45517	This
O	45518	45520	is
O	45521	45527	likely
O	45528	45531	why
O	45532	45536	your
O	45537	45541	code
O	45542	45544	is
O	45545	45551	faster
O	45551	45552	.

O	45554	45562	Question
O	45562	45563	-
O	45563	45571	14491966
O	45571	45572	,
O	45573	45579	answer
O	45579	45580	-
O	45580	45588	14492320

O	45589	45593	Your
B-api_mention	45594	45605	QuickRandom
O	45606	45620	implementation
O	45621	45625	hasn
O	45625	45626	'
O	45626	45627	t
O	45628	45634	really
O	45635	45637	an
O	45638	45645	uniform
O	45646	45658	distribution
O	45658	45659	.

O	45660	45663	The
O	45664	45675	frequencies
O	45676	45679	are
O	45680	45689	generally
O	45690	45696	higher
O	45697	45699	at
O	45700	45703	the
O	45704	45709	lower
O	45710	45716	values
O	45717	45722	while
B-api_mention	45723	45727	Math
I-api_mention	45727	45728	.
I-api_mention	45728	45734	random
I-api_mention	45734	45735	(
I-api_mention	45735	45739	args
I-api_mention	45739	45740	)
O	45741	45744	has
O	45745	45746	a
O	45747	45751	more
O	45752	45759	uniform
O	45760	45772	distribution
O	45772	45773	.

O	45774	45778	Here
O	45778	45779	'
O	45779	45780	s
O	45781	45782	a
O	45783	45788	SSCCE
O	45789	45794	which
O	45795	45800	shows
O	45801	45805	that
O	45805	45806	:
O	45807	45808	#
O	45808	45811	pre
O	45812	45815	The
O	45816	45823	average
O	45824	45830	result
O	45831	45836	looks
O	45837	45841	like
O	45842	45846	this
O	45846	45847	:
O	45848	45849	#
O	45849	45852	pre
O	45853	45855	If
O	45856	45859	you
O	45860	45866	repeat
O	45867	45870	the
O	45871	45875	test
O	45875	45876	,
O	45877	45880	you
O	45880	45881	'
O	45881	45883	ll
O	45884	45887	see
O	45888	45892	that
O	45893	45896	the
O	45897	45899	QR
O	45900	45912	distribution
O	45913	45919	varies
O	45920	45927	heavily
O	45927	45928	,
O	45929	45938	depending
O	45939	45941	on
O	45942	45945	the
O	45946	45953	initial
O	45954	45959	seeds
O	45959	45960	,
O	45961	45966	while
O	45967	45970	the
O	45971	45973	MR
O	45974	45986	distribution
O	45987	45989	is
O	45990	45996	stable
O	45996	45997	.

O	45998	46007	Sometimes
O	46008	46010	it
O	46011	46018	reaches
O	46019	46022	the
O	46023	46030	desired
O	46031	46038	uniform
O	46039	46051	distribution
O	46051	46052	,
O	46053	46056	but
O	46057	46061	more
O	46062	46066	than
O	46067	46072	often
O	46073	46075	it
O	46076	46081	doesn
O	46081	46082	'
O	46082	46083	t
O	46083	46084	.

O	46085	46089	Here
O	46089	46090	'
O	46090	46091	s
O	46092	46095	one
O	46096	46098	of
O	46099	46102	the
O	46103	46107	more
O	46108	46115	extreme
O	46116	46124	examples
O	46124	46125	,
O	46126	46128	it
O	46128	46129	'
O	46129	46130	s
O	46131	46135	even
O	46136	46142	beyond
O	46143	46146	the
O	46147	46154	borders
O	46155	46157	of
O	46158	46161	the
O	46162	46167	graph
O	46167	46168	:
O	46169	46170	#
O	46170	46173	pre

O	46175	46183	Question
O	46183	46184	-
O	46184	46192	14491966
O	46192	46193	,
O	46194	46200	answer
O	46200	46201	-
O	46201	46209	14495128

O	46210	46212	If
O	46213	46216	the
B-api_mention	46217	46221	Math
I-api_mention	46221	46222	.
I-api_mention	46222	46228	Random
I-api_mention	46228	46229	(
I-api_mention	46229	46233	args
I-api_mention	46233	46234	)
O	46235	46243	function
O	46244	46249	calls
O	46250	46253	the
O	46254	46263	operating
O	46264	46270	system
O	46271	46273	to
O	46274	46277	get
O	46278	46281	the
O	46282	46286	time
O	46287	46289	of
O	46290	46293	day
O	46293	46294	,
O	46295	46299	then
O	46300	46303	you
O	46304	46310	cannot
O	46311	46318	compare
O	46319	46321	it
O	46322	46324	to
O	46325	46329	your
O	46330	46338	function
O	46338	46339	.

O	46340	46344	Your
O	46345	46353	function
O	46354	46356	is
O	46357	46358	a
O	46359	46363	PRNG
O	46363	46364	,
O	46365	46372	whereas
O	46373	46377	that
O	46378	46386	function
O	46387	46389	is
O	46390	46398	striving
O	46399	46402	for
O	46403	46407	real
O	46408	46414	random
O	46415	46422	numbers
O	46422	46423	.

O	46424	46430	Apples
O	46431	46434	and
O	46435	46442	oranges
O	46442	46443	.

O	46444	46448	Your
O	46449	46453	PRNG
O	46454	46457	may
O	46458	46460	be
O	46461	46465	fast
O	46465	46466	,
O	46467	46470	but
O	46471	46473	it
O	46474	46478	does
O	46479	46482	not
O	46483	46487	have
O	46488	46494	enough
O	46495	46500	state
O	46501	46512	information
O	46513	46515	to
O	46516	46523	achieve
O	46524	46525	a
O	46526	46530	long
O	46531	46537	period
O	46538	46544	before
O	46545	46547	it
O	46548	46555	repeats
O	46556	46557	(
O	46557	46560	and
O	46561	46564	its
O	46565	46570	logic
O	46571	46573	is
O	46574	46577	not
O	46578	46591	sophisticated
O	46592	46598	enough
O	46599	46601	to
O	46602	46606	even
O	46607	46614	achieve
O	46615	46618	the
O	46619	46626	periods
O	46627	46631	that
O	46632	46635	are
O	46636	46644	possible
O	46645	46649	with
O	46650	46654	that
O	46655	46659	much
O	46660	46665	state
O	46666	46677	information
O	46677	46678	)
O	46678	46679	.

O	46680	46686	Period
O	46687	46689	is
O	46690	46693	the
O	46694	46700	length
O	46701	46703	of
O	46704	46707	the
O	46708	46716	sequence
O	46717	46723	before
O	46724	46728	your
O	46729	46733	PRNG
O	46734	46740	begins
O	46741	46743	to
O	46744	46750	repeat
O	46751	46757	itself
O	46757	46758	.

O	46759	46763	This
O	46764	46771	happens
O	46772	46774	as
O	46775	46779	soon
O	46780	46782	as
O	46783	46786	the
O	46787	46791	PRNG
O	46792	46799	machine
O	46800	46805	makes
O	46806	46807	a
O	46808	46813	state
O	46814	46824	transition
O	46825	46827	to
O	46828	46829	a
O	46830	46835	state
O	46836	46841	which
O	46842	46844	is
O	46845	46854	identical
O	46855	46857	to
O	46858	46862	some
O	46863	46867	past
O	46868	46873	state
O	46873	46874	.

O	46875	46879	From
O	46880	46885	there
O	46885	46886	,
O	46887	46889	it
O	46890	46894	will
O	46895	46901	repeat
O	46902	46905	the
O	46906	46917	transitions
O	46918	46923	which
O	46924	46929	began
O	46930	46932	in
O	46933	46937	that
O	46938	46943	state
O	46943	46944	.

O	46945	46952	Another
O	46953	46960	problem
O	46961	46965	with
O	46966	46970	PRNG
O	46970	46971	'
O	46971	46972	s
O	46973	46976	can
O	46977	46979	be
O	46980	46981	a
O	46982	46985	low
O	46986	46992	number
O	46993	46995	of
O	46996	47002	unique
O	47003	47012	sequences
O	47012	47013	,
O	47014	47016	as
O	47017	47021	well
O	47022	47024	as
O	47025	47035	degenerate
O	47036	47047	convergence
O	47048	47050	on
O	47051	47052	a
O	47053	47063	particular
O	47064	47072	sequence
O	47073	47078	which
O	47079	47086	repeats
O	47086	47087	.

O	47088	47093	There
O	47094	47097	can
O	47098	47102	also
O	47103	47105	be
O	47106	47117	undesirable
O	47118	47126	patterns
O	47126	47127	.

O	47128	47131	For
O	47132	47140	instance
O	47140	47141	,
O	47142	47149	suppose
O	47150	47154	that
O	47155	47156	a
O	47157	47161	PRNG
O	47162	47167	looks
O	47168	47174	fairly
O	47175	47181	random
O	47182	47186	when
O	47187	47190	the
O	47191	47198	numbers
O	47199	47202	are
O	47203	47210	printed
O	47211	47213	in
O	47214	47221	decimal
O	47221	47222	,
O	47223	47226	but
O	47227	47229	an
O	47230	47240	inspection
O	47241	47243	of
O	47244	47247	the
O	47248	47254	values
O	47255	47257	in
O	47258	47264	binary
O	47265	47270	shows
O	47271	47275	that
O	47276	47279	bit
O	47280	47281	4
O	47282	47284	is
O	47285	47291	simply
O	47292	47300	toggling
O	47301	47308	between
O	47309	47310	0
O	47311	47314	and
O	47315	47316	1
O	47317	47319	on
O	47320	47324	each
O	47325	47329	call
O	47329	47330	.

O	47331	47335	Oops
O	47335	47336	!

O	47337	47341	Take
O	47342	47343	a
O	47344	47348	look
O	47349	47351	at
O	47352	47355	the
O	47356	47364	Mersenne
O	47365	47372	Twister
O	47373	47376	and
O	47377	47382	other
O	47383	47393	algorithms
O	47393	47394	.

O	47395	47400	There
O	47401	47404	are
O	47405	47409	ways
O	47410	47412	to
O	47413	47419	strike
O	47420	47421	a
O	47422	47429	balance
O	47430	47437	between
O	47438	47441	the
O	47442	47448	period
O	47449	47455	length
O	47456	47459	and
O	47460	47463	CPU
O	47464	47470	cycles
O	47470	47471	.

O	47472	47475	One
O	47476	47481	basic
O	47482	47490	approach
O	47491	47492	(
O	47492	47496	used
O	47497	47499	in
O	47500	47503	the
O	47504	47512	Mersenne
O	47513	47520	Twister
O	47520	47521	)
O	47522	47524	is
O	47525	47527	to
O	47528	47533	cycle
O	47534	47540	around
O	47541	47543	in
O	47544	47547	the
O	47548	47553	state
O	47554	47560	vector
O	47560	47561	.

O	47562	47566	That
O	47567	47569	is
O	47570	47572	to
O	47573	47576	say
O	47576	47577	,
O	47578	47582	when
O	47583	47584	a
O	47585	47591	number
O	47592	47594	is
O	47595	47600	being
O	47601	47610	generated
O	47610	47611	,
O	47612	47614	it
O	47615	47617	is
O	47618	47621	not
O	47622	47627	based
O	47628	47630	on
O	47631	47634	the
O	47635	47641	entire
O	47642	47647	state
O	47647	47648	,
O	47649	47653	just
O	47654	47656	on
O	47657	47658	a
O	47659	47662	few
O	47663	47668	words
O	47669	47673	from
O	47674	47677	the
O	47678	47683	state
O	47684	47689	array
O	47690	47697	subject
O	47698	47700	to
O	47701	47702	a
O	47703	47706	few
O	47707	47710	bit
O	47711	47721	operations
O	47721	47722	.

O	47723	47726	But
O	47727	47729	at
O	47730	47734	each
O	47735	47739	step
O	47739	47740	,
O	47741	47744	the
O	47745	47754	algorithm
O	47755	47759	also
O	47760	47765	moves
O	47766	47772	around
O	47773	47775	in
O	47776	47779	the
O	47780	47785	array
O	47785	47786	,
O	47787	47797	scrambling
O	47798	47801	the
O	47802	47810	contents
O	47811	47812	a
O	47813	47819	little
O	47820	47823	bit
O	47824	47826	at
O	47827	47828	a
O	47829	47833	time
O	47833	47834	.

O	47836	47844	Question
O	47844	47845	-
O	47845	47853	14491966
O	47853	47854	,
O	47855	47861	answer
O	47861	47862	-
O	47862	47870	14502259

O	47871	47876	There
O	47877	47880	are
O	47881	47885	many
O	47885	47886	,
O	47887	47891	many
O	47892	47898	pseudo
O	47899	47905	random
O	47906	47912	number
O	47913	47923	generators
O	47924	47927	out
O	47928	47933	there
O	47933	47934	.

O	47935	47938	For
O	47939	47946	example
O	47947	47952	Knuth
O	47952	47953	'
O	47953	47954	s
O	47955	47963	ranarray
O	47964	47965	,
O	47966	47969	the
O	47970	47978	Mersenne
O	47979	47986	twister
O	47987	47988	,
O	47989	47991	or
O	47992	47996	look
O	47997	48000	for
O	48001	48005	LFSR
O	48006	48016	generators
O	48016	48017	.

O	48018	48023	Knuth
O	48023	48024	'
O	48024	48025	s
O	48026	48036	monumental
O	48037	48038	"
O	48038	48051	Seminumerical
O	48052	48062	algorithms
O	48062	48063	"
O	48064	48072	analizes
O	48073	48076	the
O	48077	48081	area
O	48081	48082	,
O	48083	48086	and
O	48087	48095	proposes
O	48096	48100	some
O	48101	48107	linear
O	48108	48120	congruential
O	48121	48131	generators
O	48132	48133	(
O	48133	48139	simple
O	48140	48142	to
O	48143	48152	implement
O	48152	48153	,
O	48154	48158	fast
O	48158	48159	)
O	48159	48160	.

O	48161	48164	But
O	48165	48166	I
O	48166	48167	'
O	48167	48168	d
O	48169	48176	suggest
O	48177	48180	you
O	48181	48185	just
O	48186	48191	stick
O	48192	48194	to
B-api_mention	48195	48199	java
I-api_mention	48199	48200	.
I-api_mention	48200	48204	util
I-api_mention	48204	48205	.
I-api_mention	48205	48211	Random
O	48212	48214	or
B-api_mention	48215	48219	Math
I-api_mention	48219	48220	.
I-api_mention	48220	48226	random
O	48227	48228	,
O	48229	48233	they
O	48234	48238	fast
O	48239	48242	and
O	48243	48245	at
O	48246	48251	least
O	48252	48254	OK
O	48255	48258	for
O	48259	48269	occasional
O	48270	48273	use
O	48274	48275	(
O	48275	48276	i
O	48276	48277	.
O	48277	48278	e
O	48278	48279	.
O	48279	48280	,
O	48281	48286	games
O	48287	48290	and
O	48291	48295	such
O	48295	48296	)
O	48296	48297	.

O	48298	48300	If
O	48301	48304	you
O	48305	48308	are
O	48309	48313	just
O	48314	48322	paranoid
O	48323	48325	on
O	48326	48329	the
O	48330	48342	distribution
O	48343	48344	(
O	48344	48348	some
O	48349	48354	Monte
O	48355	48360	Carlo
O	48361	48368	program
O	48368	48369	,
O	48370	48372	or
O	48373	48374	a
O	48375	48382	genetic
O	48383	48392	algorithm
O	48392	48393	)
O	48393	48394	,
O	48395	48400	check
O	48401	48404	out
O	48405	48410	their
O	48411	48425	implementation
O	48426	48427	(
O	48427	48433	source
O	48434	48436	is
O	48437	48446	available
O	48447	48456	somewhere
O	48456	48457	)
O	48457	48458	,
O	48459	48462	and
O	48463	48467	seed
O	48468	48472	them
O	48473	48477	with
O	48478	48482	some
O	48483	48488	truly
O	48489	48495	random
O	48496	48502	number
O	48502	48503	,
O	48504	48510	either
O	48511	48515	from
O	48516	48520	your
O	48521	48530	operating
O	48531	48537	system
O	48538	48540	or
O	48541	48545	from
O	48546	48552	random
O	48552	48553	.
O	48553	48556	org
O	48557	48558	.

O	48559	48561	If
O	48562	48566	this
O	48567	48569	is
O	48570	48578	required
O	48579	48582	for
O	48583	48587	some
O	48588	48599	application
O	48600	48605	where
O	48606	48614	security
O	48615	48617	is
O	48618	48626	critical
O	48626	48627	,
O	48628	48631	you
O	48631	48632	'
O	48632	48634	ll
O	48635	48639	have
O	48640	48642	to
O	48643	48646	dig
O	48647	48655	yourself
O	48655	48656	.

O	48657	48660	And
O	48661	48663	as
O	48664	48666	in
O	48667	48671	that
O	48672	48676	case
O	48677	48680	you
O	48681	48688	shouldn
O	48688	48689	'
O	48689	48690	t
O	48691	48698	believe
O	48699	48703	what
O	48704	48708	some
O	48709	48716	colored
O	48717	48723	square
O	48724	48728	with
O	48729	48736	missing
O	48737	48741	bits
O	48742	48748	spouts
O	48749	48753	here
O	48753	48754	,
O	48755	48756	I
O	48756	48757	'
O	48757	48759	ll
O	48760	48764	shut
O	48765	48767	up
O	48768	48771	now
O	48771	48772	.

O	48774	48782	Question
O	48782	48783	-
O	48783	48791	14491966
O	48791	48792	,
O	48793	48799	answer
O	48799	48800	-
O	48800	48808	14513598

B-api_mention	48809	48813	java
I-api_mention	48813	48814	.
I-api_mention	48814	48818	util
I-api_mention	48818	48819	.
I-api_mention	48819	48825	Random
O	48826	48828	is
O	48829	48832	not
O	48833	48837	much
O	48838	48847	different
O	48847	48848	,
O	48849	48850	a
O	48851	48856	basic
O	48857	48860	LCG
O	48861	48870	described
O	48871	48873	by
O	48874	48879	Knuth
O	48879	48880	.

O	48881	48888	However
O	48889	48891	it
O	48892	48895	has
O	48896	48900	main
O	48901	48902	2
O	48903	48907	main
O	48908	48918	advantages
O	48918	48919	/
O	48919	48930	differences
O	48930	48931	:
O	48932	48933	#
O	48933	48935	li
O	48936	48942	thread
O	48943	48947	safe
O	48948	48949	-
O	48950	48954	each
O	48955	48961	update
O	48962	48964	is
O	48965	48966	a
O	48967	48970	CAS
O	48971	48976	which
O	48977	48979	is
O	48980	48984	more
O	48985	48994	expensive
O	48995	48999	than
O	49000	49001	a
O	49002	49008	simple
O	49009	49014	write
O	49015	49018	and
O	49019	49024	needs
O	49025	49026	a
O	49027	49033	branch
O	49034	49035	(
O	49035	49039	even
O	49040	49042	if
O	49043	49052	perfectly
O	49053	49062	predicted
O	49063	49069	single
O	49070	49078	threaded
O	49078	49079	)
O	49079	49080	.

O	49081	49090	Depending
O	49091	49093	on
O	49094	49097	the
O	49098	49101	CPU
O	49102	49104	it
O	49105	49110	could
O	49111	49113	be
O	49114	49125	significant
O	49126	49136	difference
O	49136	49137	.

O	49138	49139	#
O	49139	49141	li
O	49142	49153	undisclosed
O	49154	49162	internal
O	49163	49168	state
O	49169	49170	-
O	49171	49175	this
O	49176	49178	is
O	49179	49183	very
O	49184	49193	important
O	49194	49197	for
O	49198	49206	anything
O	49207	49210	non
O	49210	49211	-
O	49211	49218	trivial
O	49218	49219	.

O	49220	49223	You
O	49224	49228	wish
O	49229	49232	the
O	49233	49239	random
O	49240	49247	numbers
O	49248	49251	not
O	49252	49254	to
O	49255	49257	be
O	49258	49269	predictable
O	49269	49270	.

O	49271	49276	Below
O	49277	49279	it
O	49279	49280	'
O	49280	49281	s
O	49282	49285	the
O	49286	49290	main
O	49291	49298	routine
O	49299	49309	generating
O	49310	49311	'
O	49311	49317	random
O	49317	49318	'
O	49319	49327	integers
O	49328	49330	in
B-api_mention	49331	49335	java
I-api_mention	49335	49336	.
I-api_mention	49336	49340	util
I-api_mention	49340	49341	.
I-api_mention	49341	49347	Random
O	49347	49348	.

O	49349	49350	#
O	49350	49353	pre
O	49354	49356	If
O	49357	49360	you
O	49361	49367	remove
O	49368	49371	the
B-api_mention	49372	49382	AtomicLong
O	49383	49386	and
O	49387	49390	the
O	49391	49402	undisclosed
O	49403	49407	sate
O	49408	49409	(
O	49409	49410	i
O	49410	49411	.
O	49411	49412	e
O	49412	49413	.
O	49414	49419	using
O	49420	49423	all
O	49424	49428	bits
O	49429	49431	of
O	49432	49435	the
O	49436	49440	long
O	49441	49442	)
O	49442	49443	,
O	49444	49447	you
O	49447	49448	'
O	49448	49449	d
O	49450	49453	get
O	49454	49458	more
O	49459	49470	performance
O	49471	49475	than
O	49476	49479	the
O	49480	49486	double
O	49487	49501	multiplication
O	49501	49502	/
O	49502	49508	modulo
O	49508	49509	.

O	49510	49514	Last
O	49515	49519	note
O	49519	49520	:
B-api_mention	49521	49525	Math
I-api_mention	49525	49526	.
I-api_mention	49526	49532	random
O	49533	49539	should
O	49540	49543	not
O	49544	49546	be
O	49547	49551	used
O	49552	49555	for
O	49556	49564	anything
O	49565	49568	but
O	49569	49575	simple
O	49576	49581	tests
O	49581	49582	,
O	49583	49585	it
O	49585	49586	'
O	49586	49587	s
O	49588	49593	prone
O	49594	49596	to
O	49597	49607	contention
O	49608	49611	and
O	49612	49614	if
O	49615	49618	you
O	49619	49623	have
O	49624	49628	even
O	49629	49630	a
O	49631	49637	couple
O	49638	49640	of
O	49641	49648	threads
O	49649	49656	calling
O	49657	49659	it
O	49660	49672	concurrently
O	49673	49676	the
O	49677	49688	performance
O	49689	49697	degrades
O	49697	49698	.

O	49699	49702	One
O	49703	49709	little
O	49710	49715	known
O	49716	49726	historical
O	49727	49734	feature
O	49735	49737	of
O	49738	49740	it
O	49741	49743	is
O	49744	49747	the
O	49748	49760	introduction
O	49761	49763	of
O	49764	49767	CAS
O	49768	49770	in
O	49771	49775	java
O	49776	49777	-
O	49778	49780	to
O	49781	49785	beat
O	49786	49788	an
O	49789	49797	infamous
O	49798	49807	benchmark
O	49808	49809	(
O	49809	49814	first
O	49815	49817	by
O	49818	49821	IBM
O	49822	49825	via
O	49826	49836	intrinsics
O	49837	49840	and
O	49841	49845	then
O	49846	49849	Sun
O	49850	49854	made
O	49855	49856	"
O	49856	49859	CAS
O	49860	49864	from
O	49865	49869	Java
O	49869	49870	"
O	49870	49871	)

O	49873	49881	Question
O	49881	49882	-
O	49882	49890	14491966
O	49890	49891	,
O	49892	49898	answer
O	49898	49899	-
O	49899	49907	14526729

O	49908	49911	The
O	49912	49916	real
O	49917	49924	problem
O	49925	49929	with
O	49930	49934	this
O	49935	49937	is
O	49938	49942	that
O	49943	49945	it
O	49945	49946	'
O	49946	49947	s
O	49948	49954	output
O	49955	49964	histogram
O	49965	49967	is
O	49968	49977	dependent
O	49978	49980	on
O	49981	49984	the
O	49985	49992	initial
O	49993	49997	seed
O	49998	50001	far
O	50002	50004	to
O	50005	50009	much
O	50010	50011	-
O	50012	50016	much
O	50017	50019	of
O	50020	50023	the
O	50024	50028	time
O	50029	50031	it
O	50032	50036	will
O	50037	50040	end
O	50041	50043	up
O	50044	50048	with
O	50049	50050	a
O	50051	50055	near
O	50056	50063	uniform
O	50064	50070	output
O	50071	50074	but
O	50075	50076	a
O	50077	50080	lot
O	50081	50083	of
O	50084	50087	the
O	50088	50092	time
O	50093	50097	will
O	50098	50102	have
O	50103	50113	distinctly
O	50114	50116	un
O	50116	50117	-
O	50117	50124	uniform
O	50125	50131	output
O	50131	50132	.

O	50133	50141	Inspired
O	50142	50144	by
O	50145	50149	this
O	50150	50157	article
O	50158	50163	about
O	50164	50167	how
O	50168	50171	bad
O	50172	50175	php
O	50175	50176	'
O	50176	50177	s
O	50178	50182	rand
O	50182	50183	(
O	50183	50184	)
O	50185	50193	function
O	50194	50196	is
O	50197	50198	,
O	50199	50200	I
O	50201	50205	made
O	50206	50210	some
O	50211	50217	random
O	50218	50224	matrix
O	50225	50231	images
O	50232	50237	using
B-api_mention	50238	50249	QuickRandom
O	50250	50253	and
B-api_mention	50254	50260	System
I-api_mention	50260	50261	.
I-api_mention	50261	50267	Random
O	50268	50269	.

O	50270	50274	This
O	50275	50278	run
O	50279	50284	shows
O	50285	50288	how
O	50289	50298	sometimes
O	50299	50302	the
O	50303	50307	seed
O	50308	50311	can
O	50312	50316	have
O	50317	50318	a
O	50319	50322	bad
O	50323	50329	effect
O	50330	50331	(
O	50331	50333	in
O	50334	50338	this
O	50339	50343	case
O	50344	50353	favouring
O	50354	50359	lower
O	50360	50367	numbers
O	50367	50368	)
O	50369	50374	where
O	50375	50377	as
B-api_mention	50378	50384	System
I-api_mention	50384	50385	.
I-api_mention	50385	50391	Random
O	50392	50394	is
O	50395	50401	pretty
O	50402	50409	uniform
O	50409	50410	.

B-api_mention	50411	50422	QuickRandom
O	50423	50424	#
O	50424	50427	img
B-api_mention	50428	50434	System
I-api_mention	50434	50435	.
I-api_mention	50435	50441	Random
O	50442	50443	#
O	50443	50446	img
O	50447	50451	Even
O	50452	50457	Worse
O	50458	50460	If
O	50461	50463	we
O	50464	50474	initialise
B-api_mention	50475	50486	QuickRandom
O	50487	50489	as
O	50490	50493	new
B-api_mention	50494	50505	QuickRandom
I-api_mention	50505	50506	(
I-api_mention	50506	50510	args
I-api_mention	50510	50511	)
O	50512	50514	we
O	50515	50518	get
O	50519	50523	this
O	50524	50529	image
O	50529	50530	:
O	50531	50532	#
O	50532	50535	img
O	50536	50539	The
O	50540	50544	Code
O	50545	50546	#
O	50546	50549	pre

O	50551	50559	Question
O	50559	50560	-
O	50560	50568	14491966
O	50568	50569	,
O	50570	50576	answer
O	50576	50577	-
O	50577	50585	14563808

O	50586	50588	It
O	50589	50591	is
O	50592	50596	very
O	50597	50605	unlikely
O	50606	50610	that
O	50611	50617	random
O	50618	50624	number
O	50625	50635	generation
O	50636	50647	performance
O	50648	50653	would
O	50654	50656	be
O	50657	50659	an
O	50660	50665	issue
O	50666	50669	for
O	50670	50673	any
O	50674	50677	use
O	50677	50678	-
O	50678	50682	case
O	50683	50686	you
O	50687	50691	came
O	50692	50694	up
O	50695	50699	with
O	50700	50706	unless
O	50707	50716	accessing
O	50717	50718	a
O	50719	50725	single
B-api_mention	50726	50732	Random
O	50733	50741	instance
O	50742	50746	from
O	50747	50755	multiple
O	50756	50763	threads
O	50764	50765	(
O	50765	50772	because
B-api_mention	50773	50779	Random
O	50780	50782	is
O	50783	50795	synchronized
O	50796	50797	)
O	50797	50798	.

O	50799	50806	However
O	50806	50807	,
O	50808	50810	if
O	50811	50815	that
O	50816	50822	really
O	50823	50825	is
O	50826	50829	the
O	50830	50834	case
O	50835	50838	and
O	50839	50842	you
O	50843	50847	need
O	50848	50852	lots
O	50853	50855	of
O	50856	50862	random
O	50863	50870	numbers
O	50871	50875	fast
O	50875	50876	,
O	50877	50881	your
O	50882	50890	solution
O	50891	50893	is
O	50894	50897	far
O	50898	50901	too
O	50902	50912	unreliable
O	50912	50913	.

O	50914	50923	Sometimes
O	50924	50926	it
O	50927	50932	gives
O	50933	50937	good
O	50938	50945	results
O	50945	50946	,
O	50947	50956	sometimes
O	50957	50959	it
O	50960	50965	gives
O	50966	50974	horrible
O	50975	50982	results
O	50983	50984	(
O	50984	50989	based
O	50990	50992	on
O	50993	50996	the
O	50997	51004	initial
O	51005	51013	settings
O	51013	51014	)
O	51014	51015	.

O	51016	51018	If
O	51019	51022	you
O	51023	51027	want
O	51028	51031	the
O	51032	51036	same
O	51037	51044	numbers
O	51045	51049	that
O	51050	51053	the
B-api_mention	51054	51060	Random
O	51061	51066	class
O	51067	51072	gives
O	51073	51076	you
O	51076	51077	,
O	51078	51082	only
O	51083	51089	faster
O	51089	51090	,
O	51091	51094	you
O	51095	51100	could
O	51101	51104	get
O	51105	51108	rid
O	51109	51111	of
O	51112	51115	the
O	51116	51131	synchronization
O	51132	51134	in
O	51135	51140	there
O	51140	51141	:
O	51142	51143	#
O	51143	51146	pre
O	51147	51148	I
O	51149	51155	simply
O	51156	51160	took
O	51161	51164	the
B-api_mention	51165	51169	java
I-api_mention	51169	51170	.
I-api_mention	51170	51174	util
I-api_mention	51174	51175	.
I-api_mention	51175	51181	Random
O	51182	51186	code
O	51187	51190	and
O	51191	51198	removed
O	51199	51202	the
O	51203	51218	synchronization
O	51219	51224	which
O	51225	51232	results
O	51233	51235	in
O	51236	51241	twice
O	51242	51245	the
O	51246	51257	performance
O	51258	51266	compared
O	51267	51269	to
O	51270	51273	the
O	51274	51282	original
O	51283	51285	on
O	51286	51288	my
O	51289	51295	Oracle
O	51296	51303	HotSpot
O	51304	51307	JVM
O	51308	51311	7u9
O	51311	51312	.

O	51313	51315	It
O	51316	51318	is
O	51319	51324	still
O	51325	51331	slower
O	51332	51336	than
O	51337	51341	your
B-api_mention	51342	51353	QuickRandom
O	51354	51355	,
O	51356	51359	but
O	51360	51362	it
O	51363	51368	gives
O	51369	51373	much
O	51374	51378	more
O	51379	51389	consistent
O	51390	51397	results
O	51397	51398	.

O	51399	51401	To
O	51402	51404	be
O	51405	51412	precise
O	51412	51413	,
O	51414	51417	for
O	51418	51421	the
O	51422	51426	same
O	51427	51431	seed
O	51432	51438	values
O	51439	51442	and
O	51443	51449	single
O	51450	51458	threaded
O	51459	51471	applications
O	51471	51472	,
O	51473	51475	it
O	51476	51481	gives
O	51482	51485	the
O	51486	51490	same
O	51491	51497	pseudo
O	51497	51498	-
O	51498	51504	random
O	51505	51512	numbers
O	51513	51515	as
O	51516	51519	the
O	51520	51528	original
B-api_mention	51529	51535	Random
O	51536	51541	class
O	51542	51547	would
O	51547	51548	.

O	51549	51553	This
O	51554	51558	code
O	51559	51561	is
O	51562	51567	based
O	51568	51570	on
O	51571	51574	the
O	51575	51582	current
B-api_mention	51583	51587	java
I-api_mention	51587	51588	.
I-api_mention	51588	51592	util
I-api_mention	51592	51593	.
I-api_mention	51593	51599	Random
O	51600	51602	in
O	51603	51610	OpenJDK
O	51611	51613	7u
O	51614	51619	which
O	51620	51622	is
O	51623	51631	licensed
O	51632	51637	under
O	51638	51641	GNU
O	51642	51645	GPL
O	51646	51648	v2
O	51649	51650	.

O	51651	51655	EDIT
O	51656	51658	10
O	51659	51665	months
O	51666	51671	later
O	51671	51672	:
O	51673	51674	I
O	51675	51679	just
O	51680	51690	discovered
O	51691	51695	that
O	51696	51699	you
O	51700	51703	don
O	51703	51704	'
O	51704	51705	t
O	51706	51710	even
O	51711	51715	have
O	51716	51718	to
O	51719	51722	use
O	51723	51725	my
O	51726	51730	code
O	51731	51736	above
O	51737	51739	to
O	51740	51743	get
O	51744	51746	an
O	51747	51761	unsynchronized
B-api_mention	51762	51768	Random
O	51769	51777	instance
O	51777	51778	.

O	51779	51784	There
O	51784	51785	'
O	51785	51786	s
O	51787	51790	one
O	51791	51793	in
O	51794	51797	the
O	51798	51801	JDK
O	51801	51802	,
O	51803	51806	too
O	51806	51807	!

O	51808	51812	Look
O	51813	51815	at
O	51816	51820	Java
O	51821	51822	7
O	51822	51823	'
O	51823	51824	s
B-api_mention	51825	51842	ThreadLocalRandom
O	51843	51848	class
O	51848	51849	.

O	51850	51853	The
O	51854	51858	code
O	51859	51865	inside
O	51866	51868	it
O	51869	51871	is
O	51872	51878	almost
O	51879	51888	identical
O	51889	51891	to
O	51892	51894	my
O	51895	51899	code
O	51900	51905	above
O	51905	51906	.

O	51907	51910	The
O	51911	51916	class
O	51917	51919	is
O	51920	51926	simply
O	51927	51928	a
O	51929	51934	local
O	51934	51935	-
O	51935	51941	thread
O	51941	51942	-
O	51942	51950	isolated
B-api_mention	51951	51957	Random
O	51958	51965	version
O	51966	51974	suitable
O	51975	51978	for
O	51979	51989	generating
O	51990	51996	random
O	51997	52004	numbers
O	52005	52012	quickly
O	52012	52013	.

O	52014	52017	The
O	52018	52022	only
O	52023	52031	downside
O	52032	52033	I
O	52034	52037	can
O	52038	52043	think
O	52044	52046	of
O	52047	52049	is
O	52050	52054	that
O	52055	52058	you
O	52059	52062	can
O	52062	52063	'
O	52063	52064	t
O	52065	52068	set
O	52069	52072	its
O	52073	52077	seed
O	52078	52086	manually
O	52086	52087	.

O	52088	52095	Example
O	52096	52101	usage
O	52101	52102	:
B-api_mention	52103	52109	Random
O	52110	52116	random
O	52117	52118	=
B-api_mention	52119	52136	ThreadLocalRandom
I-api_mention	52136	52137	.
I-api_mention	52137	52144	current
I-api_mention	52144	52145	(
I-api_mention	52145	52149	args
I-api_mention	52149	52150	)
O	52150	52151	;

O	52153	52161	Question
O	52161	52162	-
O	52162	52170	14809293
O	52170	52171	,
O	52172	52178	answer
O	52178	52179	-
O	52179	52187	14821488

O	52188	52191	The
B-api_mention	52192	52203	Collections
I-api_mention	52203	52204	.
I-api_mention	52204	52220	unmodifiableList
O	52221	52224	has
O	52225	52232	already
O	52233	52237	been
O	52238	52247	mentioned
O	52248	52249	-
O	52250	52253	the
B-api_mention	52254	52260	Arrays
I-api_mention	52260	52261	.
I-api_mention	52261	52267	asList
I-api_mention	52267	52268	(
I-api_mention	52268	52272	args
I-api_mention	52272	52273	)
O	52274	52283	strangely
O	52284	52287	not
O	52287	52288	!

O	52289	52291	My
O	52292	52300	solution
O	52301	52306	would
O	52307	52311	also
O	52312	52314	be
O	52315	52317	to
O	52318	52321	use
O	52322	52325	the
O	52326	52330	list
O	52331	52335	from
O	52336	52339	the
O	52340	52347	outside
O	52348	52351	and
O	52352	52356	wrap
O	52357	52360	the
O	52361	52366	array
O	52367	52369	as
O	52370	52377	follows
O	52377	52378	:
O	52379	52380	#
O	52380	52383	pre
O	52384	52387	The
O	52388	52395	problem
O	52396	52400	with
O	52401	52408	copying
O	52409	52412	the
O	52413	52418	array
O	52419	52421	is
O	52421	52422	:
O	52423	52425	if
O	52426	52429	you
O	52429	52430	'
O	52430	52432	re
O	52433	52438	doing
O	52439	52441	it
O	52442	52447	every
O	52448	52452	time
O	52453	52456	you
O	52457	52463	access
O	52464	52467	the
O	52468	52472	code
O	52473	52476	and
O	52477	52480	the
O	52481	52486	array
O	52487	52489	is
O	52490	52493	big
O	52493	52494	,
O	52495	52498	you
O	52498	52499	'
O	52499	52501	ll
O	52502	52508	create
O	52509	52510	a
O	52511	52514	lot
O	52515	52517	of
O	52518	52522	work
O	52523	52526	for
O	52527	52530	the
O	52531	52538	garbage
O	52539	52548	collector
O	52549	52552	for
O	52553	52557	sure
O	52557	52558	.

O	52559	52561	So
O	52562	52565	the
O	52566	52570	copy
O	52571	52573	is
O	52574	52575	a
O	52576	52582	simple
O	52583	52586	but
O	52587	52593	really
O	52594	52597	bad
O	52598	52606	approach
O	52607	52608	-
O	52609	52610	I
O	52610	52611	'
O	52611	52612	d
O	52613	52616	say
O	52617	52618	"
O	52618	52623	cheap
O	52623	52624	"
O	52624	52625	,
O	52626	52629	but
O	52630	52636	memory
O	52636	52637	-
O	52637	52646	expensive
O	52646	52647	!

O	52648	52658	Especially
O	52659	52663	when
O	52664	52667	you
O	52667	52668	'
O	52668	52670	re
O	52671	52677	having
O	52678	52682	more
O	52683	52687	than
O	52688	52692	just
O	52693	52694	2
O	52695	52703	elements
O	52703	52704	.

O	52705	52707	If
O	52708	52711	you
O	52712	52716	look
O	52717	52719	at
O	52720	52723	the
O	52724	52730	source
O	52731	52735	code
O	52736	52738	of
B-api_mention	52739	52745	Arrays
I-api_mention	52745	52746	.
I-api_mention	52746	52752	asList
O	52753	52756	and
B-api_mention	52757	52768	Collections
I-api_mention	52768	52769	.
I-api_mention	52769	52785	unmodifiableList
O	52786	52791	there
O	52792	52794	is
O	52795	52803	actually
O	52804	52807	not
O	52808	52812	much
O	52813	52820	created
O	52820	52821	.

O	52822	52825	The
O	52826	52831	first
O	52832	52836	just
O	52837	52842	wraps
O	52843	52846	the
O	52847	52852	array
O	52853	52860	without
O	52861	52868	copying
O	52869	52871	it
O	52871	52872	,
O	52873	52876	the
O	52877	52883	second
O	52884	52888	just
O	52889	52894	wraps
O	52895	52898	the
O	52899	52903	list
O	52903	52904	,
O	52905	52911	making
O	52912	52919	changes
O	52920	52922	to
O	52923	52925	it
O	52926	52937	unavailable
O	52937	52938	.

O	52940	52948	Question
O	52948	52949	-
O	52949	52957	15156857
O	52957	52958	,
O	52959	52965	answer
O	52965	52966	-
O	52966	52974	15157021

O	52975	52978	You
O	52979	52983	must
O	52984	52987	use
B-api_mention	52988	52995	doThrow
I-api_mention	52995	52996	(
I-api_mention	52996	53000	args
I-api_mention	53000	53001	)
I-api_mention	53001	53002	.
I-api_mention	53002	53006	when
I-api_mention	53006	53007	(
I-api_mention	53007	53011	args
I-api_mention	53011	53012	)
I-api_mention	53012	53013	.
I-api_mention	53013	53032	methodReturningVoid
I-api_mention	53032	53033	(
I-api_mention	53033	53037	args
I-api_mention	53037	53038	)
O	53038	53039	;
O	53040	53043	and
O	53044	53047	not
B-api_mention	53048	53055	doThrow
I-api_mention	53055	53056	(
I-api_mention	53056	53060	args
I-api_mention	53060	53061	)
I-api_mention	53061	53062	.
I-api_mention	53062	53066	when
I-api_mention	53066	53067	(
I-api_mention	53067	53071	args
I-api_mention	53071	53072	)
O	53072	53073	;
O	53074	53078	This
O	53079	53081	is
O	53082	53091	explained
O	53092	53094	in
O	53095	53098	the
O	53099	53112	documentation

O	53114	53122	Question
O	53122	53123	-
O	53123	53131	16232833
O	53131	53132	,
O	53133	53139	answer
O	53139	53140	-
O	53140	53148	16250729

O	53149	53155	change
O	53156	53160	your
O	53161	53167	return
O	53168	53172	type
O	53173	53175	to
B-api_mention	53176	53190	ResponseEntity
I-api_mention	53190	53191	<
I-api_mention	53191	53192	T
I-api_mention	53192	53193	>
O	53194	53195	,
O	53196	53200	then
O	53201	53204	you
O	53205	53208	can
O	53209	53212	use
O	53213	53218	below
O	53219	53222	for
O	53223	53226	400
O	53227	53233	return
O	53234	53237	new
B-api_mention	53238	53252	ResponseEntity
I-api_mention	53252	53253	<
I-api_mention	53253	53254	T
I-api_mention	53254	53255	>
I-api_mention	53255	53256	(
I-api_mention	53256	53260	args
I-api_mention	53260	53261	)
O	53261	53262	;
O	53263	53266	and
O	53267	53270	for
O	53271	53278	correct
O	53279	53286	request
O	53287	53293	return
O	53294	53297	new
B-api_mention	53298	53312	ResponseEntity
I-api_mention	53312	53313	<
I-api_mention	53313	53314	T
I-api_mention	53314	53315	>
I-api_mention	53315	53316	(
I-api_mention	53316	53320	args
I-api_mention	53320	53321	)
O	53321	53322	;
O	53323	53329	UPDATE
O	53330	53331	1
O	53332	53337	after
O	53338	53344	spring
O	53345	53346	4
O	53346	53347	.
O	53347	53348	1
O	53349	53354	there
O	53355	53358	are
O	53359	53365	helper
O	53366	53373	methods
O	53374	53376	in
B-api_mention	53377	53391	ResponseEntity
O	53392	53397	could
O	53398	53400	be
O	53401	53405	used
O	53406	53408	as
O	53409	53415	return
B-api_mention	53416	53430	ResponseEntity
I-api_mention	53430	53431	.
I-api_mention	53431	53437	status
I-api_mention	53437	53438	(
I-api_mention	53438	53442	args
I-api_mention	53442	53443	)
I-api_mention	53443	53444	.
I-api_mention	53444	53448	body
I-api_mention	53448	53449	(
I-api_mention	53449	53453	args
I-api_mention	53453	53454	)
O	53454	53455	;
O	53456	53459	and
O	53460	53466	return
B-api_mention	53467	53481	ResponseEntity
I-api_mention	53481	53482	.
I-api_mention	53482	53484	ok
I-api_mention	53484	53485	(
I-api_mention	53485	53489	args
I-api_mention	53489	53490	)
O	53490	53491	;

O	53493	53501	Question
O	53501	53502	-
O	53502	53510	14833008
O	53510	53511	,
O	53512	53518	answer
O	53518	53519	-
O	53519	53527	14833048

O	53528	53531	You
O	53532	53536	need
O	53537	53539	to
O	53540	53546	escape
O	53547	53550	the
O	53551	53554	dot
O	53555	53557	if
O	53558	53561	you
O	53562	53566	want
O	53567	53569	to
O	53570	53575	split
O	53576	53578	on
O	53579	53580	a
O	53581	53588	literal
O	53589	53592	dot
O	53592	53593	:
B-api_mention	53594	53600	String
O	53601	53617	extensionRemoved
O	53618	53619	=
O	53620	53628	filename
B-api_mention	53628	53629	.
I-api_mention	53629	53634	split
I-api_mention	53634	53635	(
I-api_mention	53635	53639	args
I-api_mention	53639	53640	)
O	53640	53641	[
O	53641	53642	0
O	53642	53643	]
O	53643	53644	;
O	53645	53654	Otherwise
O	53655	53658	you
O	53659	53662	are
O	53663	53672	splitting
O	53673	53675	on
O	53676	53679	the
O	53680	53685	regex
O	53686	53687	.
O	53688	53689	,
O	53690	53695	which
O	53696	53701	means
O	53702	53703	"
O	53703	53706	any
O	53707	53716	character
O	53716	53717	"
O	53717	53718	.

O	53719	53723	Note
O	53724	53727	the
O	53728	53734	double
O	53735	53744	backslash
O	53745	53751	needed
O	53752	53754	to
O	53755	53761	create
O	53762	53763	a
O	53764	53770	single
O	53771	53780	backslash
O	53781	53783	in
O	53784	53787	the
O	53788	53793	regex
O	53793	53794	.

O	53795	53798	You
O	53798	53799	'
O	53799	53801	re
O	53802	53809	getting
O	53810	53812	an
B-api_mention	53813	53843	ArrayIndexOutOfBoundsException
O	53844	53851	because
O	53852	53856	your
O	53857	53862	input
O	53863	53869	string
O	53870	53872	is
O	53873	53877	just
O	53878	53879	a
O	53880	53883	dot
O	53883	53884	,
O	53885	53887	ie
O	53888	53901	StringLiteral
O	53902	53903	,
O	53904	53909	which
O	53910	53912	is
O	53913	53915	an
O	53916	53920	edge
O	53921	53925	case
O	53926	53930	that
O	53931	53939	produces
O	53940	53942	an
O	53943	53948	empty
O	53949	53954	array
O	53955	53959	when
O	53960	53965	split
O	53966	53968	on
O	53969	53972	dot
O	53972	53973	;
B-api_mention	53974	53979	split
I-api_mention	53979	53980	(
I-api_mention	53980	53985	regex
I-api_mention	53985	53986	)
O	53987	53994	removes
O	53995	53998	all
O	53999	54007	trailing
O	54008	54014	blanks
O	54015	54019	from
O	54020	54023	the
O	54024	54030	result
O	54030	54031	,
O	54032	54035	but
O	54036	54041	since
O	54042	54051	splitting
O	54052	54053	a
O	54054	54057	dot
O	54058	54060	on
O	54061	54062	a
O	54063	54066	dot
O	54067	54073	leaves
O	54074	54078	only
O	54079	54082	two
O	54083	54089	blanks
O	54089	54090	,
O	54091	54096	after
O	54097	54105	trailing
O	54106	54112	blanks
O	54113	54116	are
O	54117	54124	removed
O	54125	54128	you
O	54128	54129	'
O	54129	54131	re
O	54132	54136	left
O	54137	54141	with
O	54142	54144	an
O	54145	54150	empty
O	54151	54156	array
O	54156	54157	.

O	54158	54160	To
O	54161	54166	avoid
O	54167	54174	getting
O	54175	54177	an
B-api_mention	54178	54208	ArrayIndexOutOfBoundsException
O	54209	54212	for
O	54213	54217	this
O	54218	54222	edge
O	54223	54227	case
O	54227	54228	,
O	54229	54232	use
O	54233	54236	the
O	54237	54247	overloaded
O	54248	54255	version
O	54256	54258	of
B-api_mention	54259	54264	split
I-api_mention	54264	54265	(
I-api_mention	54265	54270	regex
I-api_mention	54270	54271	,
I-api_mention	54272	54277	limit
I-api_mention	54277	54278	)
O	54279	54280	,
O	54281	54286	which
O	54287	54290	has
O	54291	54292	a
O	54293	54299	second
O	54300	54309	parameter
O	54310	54314	that
O	54315	54317	is
O	54318	54321	the
O	54322	54326	size
O	54327	54332	limit
O	54333	54336	for
O	54337	54340	the
O	54341	54350	resulting
O	54351	54356	array
O	54356	54357	.

O	54358	54362	When
O	54363	54368	limit
O	54369	54371	is
O	54372	54380	negative
O	54381	54382	,
O	54383	54386	the
O	54387	54396	behaviour
O	54397	54399	of
O	54400	54408	removing
O	54409	54417	trailing
O	54418	54424	blanks
O	54425	54429	from
O	54430	54433	the
O	54434	54443	resulting
O	54444	54449	array
O	54450	54452	is
O	54453	54461	disabled
O	54461	54462	:
O	54463	54476	StringLiteral
B-api_mention	54476	54477	.
I-api_mention	54477	54482	split
I-api_mention	54482	54483	(
I-api_mention	54483	54487	args
I-api_mention	54487	54488	)
O	54489	54490	/
O	54490	54491	/
O	54492	54499	returns
O	54500	54502	an
O	54503	54508	array
O	54509	54511	of
O	54512	54515	two
O	54516	54522	blanks
O	54522	54523	,
O	54524	54526	ie
O	54527	54528	[
O	54528	54541	StringLiteral
O	54541	54542	,
O	54543	54556	StringLiteral
O	54556	54557	]
O	54558	54560	ie
O	54560	54561	,
O	54562	54566	when
O	54567	54575	filename
O	54576	54578	is
O	54579	54583	just
O	54584	54585	a
O	54586	54589	dot
O	54590	54603	StringLiteral
O	54604	54605	,
O	54606	54613	calling
O	54614	54622	filename
B-api_mention	54622	54623	.
I-api_mention	54623	54628	split
I-api_mention	54628	54629	(
I-api_mention	54629	54633	args
I-api_mention	54633	54634	)
O	54634	54635	[
O	54635	54636	0
O	54636	54637	]
O	54638	54642	will
O	54643	54649	return
O	54650	54651	a
O	54652	54657	blank
O	54657	54658	,
O	54659	54662	but
O	54663	54670	calling
O	54671	54679	filename
B-api_mention	54679	54680	.
I-api_mention	54680	54685	split
I-api_mention	54685	54686	(
I-api_mention	54686	54690	args
I-api_mention	54690	54691	)
O	54691	54692	[
O	54692	54693	0
O	54693	54694	]
O	54695	54699	will
O	54700	54705	throw
O	54706	54708	an
B-api_mention	54709	54739	ArrayIndexOutOfBoundsException
O	54740	54741	.

O	54743	54751	Question
O	54751	54752	-
O	54752	54760	14833008
O	54760	54761	,
O	54762	54768	answer
O	54768	54769	-
O	54769	54777	14833098

O	54778	54779	"
O	54779	54780	.
O	54780	54781	"
O	54782	54784	is
O	54785	54786	a
O	54787	54794	special
O	54795	54804	character
O	54805	54807	in
O	54808	54812	java
O	54812	54813	.

O	54814	54817	You
O	54818	54822	have
O	54823	54825	to
O	54826	54829	use
O	54830	54831	"
O	54831	54832	\
O	54832	54833	.
O	54833	54834	"
O	54835	54837	to
O	54838	54844	escape
O	54845	54849	this
O	54850	54859	character
O	54860	54861	:
O	54862	54867	final
B-api_mention	54868	54874	String
O	54875	54891	extensionRemoved
O	54892	54893	=
O	54894	54902	filename
B-api_mention	54902	54903	.
I-api_mention	54903	54908	split
I-api_mention	54908	54909	(
I-api_mention	54909	54913	args
I-api_mention	54913	54914	)
O	54914	54915	[
O	54915	54916	0
O	54916	54917	]
O	54917	54918	;
O	54919	54920	I
O	54921	54925	hope
O	54926	54930	this
O	54931	54936	helps

O	54938	54946	Question
O	54946	54947	-
O	54947	54955	15430247
O	54955	54956	,
O	54957	54963	answer
O	54963	54964	-
O	54964	54972	15430259

O	54973	54975	If
O	54976	54979	you
O	54980	54984	know
O	54985	54987	in
O	54988	54995	advance
O	54996	55000	what
O	55001	55004	the
O	55005	55009	size
O	55010	55012	of
O	55013	55016	the
B-api_mention	55017	55026	ArrayList
O	55027	55029	is
O	55030	55035	going
O	55036	55038	to
O	55039	55041	be
O	55041	55042	,
O	55043	55045	it
O	55046	55048	is
O	55049	55053	more
O	55054	55063	efficient
O	55064	55066	to
O	55067	55074	specify
O	55075	55078	the
O	55079	55086	initial
O	55087	55095	capacity
O	55095	55096	.

O	55097	55099	If
O	55100	55103	you
O	55104	55107	don
O	55107	55108	'
O	55108	55109	t
O	55110	55112	do
O	55113	55117	this
O	55117	55118	,
O	55119	55122	the
O	55123	55131	internal
O	55132	55137	array
O	55138	55142	will
O	55143	55147	have
O	55148	55150	to
O	55151	55153	be
O	55154	55164	repeatedly
O	55165	55176	reallocated
O	55177	55179	as
O	55180	55183	the
O	55184	55188	list
O	55189	55194	grows
O	55194	55195	.

O	55196	55199	The
O	55200	55206	larger
O	55207	55210	the
O	55211	55216	final
O	55217	55221	list
O	55221	55222	,
O	55223	55226	the
O	55227	55231	more
O	55232	55236	time
O	55237	55240	you
O	55241	55245	save
O	55246	55248	by
O	55249	55257	avoiding
O	55258	55261	the
O	55262	55275	reallocations
O	55275	55276	.

O	55277	55281	That
O	55282	55286	said
O	55286	55287	,
O	55288	55292	even
O	55293	55300	without
O	55301	55304	pre
O	55304	55305	-
O	55305	55315	allocation
O	55315	55316	,
O	55317	55326	inserting
O	55327	55328	n
O	55329	55337	elements
O	55338	55340	at
O	55341	55344	the
O	55345	55349	back
O	55350	55352	of
O	55353	55355	an
B-api_mention	55356	55365	ArrayList
O	55366	55368	is
O	55369	55379	guaranteed
O	55380	55382	to
O	55383	55387	take
O	55388	55393	total
O	55394	55395	O
O	55395	55396	(
O	55396	55400	args
O	55400	55401	)
O	55402	55406	time
O	55406	55407	.

O	55408	55410	In
O	55411	55416	other
O	55417	55422	words
O	55422	55423	,
O	55424	55433	appending
O	55434	55436	an
O	55437	55444	element
O	55445	55447	is
O	55448	55450	an
O	55451	55460	amortized
O	55461	55469	constant
O	55469	55470	-
O	55470	55474	time
O	55475	55484	operation
O	55484	55485	.

O	55486	55490	This
O	55491	55493	is
O	55494	55502	achieved
O	55503	55505	by
O	55506	55512	having
O	55513	55517	each
O	55518	55530	reallocation
O	55531	55539	increase
O	55540	55543	the
O	55544	55548	size
O	55549	55551	of
O	55552	55555	the
O	55556	55561	array
O	55562	55575	exponentially
O	55575	55576	,
O	55577	55586	typically
O	55587	55589	by
O	55590	55591	a
O	55592	55598	factor
O	55599	55601	of
O	55602	55603	1
O	55603	55604	.
O	55604	55605	5
O	55606	55607	.

O	55608	55612	With
O	55613	55617	this
O	55618	55626	approach
O	55626	55627	,
O	55628	55631	the
O	55632	55637	total
O	55638	55644	number
O	55645	55647	of
O	55648	55658	operations
O	55659	55662	can
O	55663	55665	be
O	55666	55671	shown
O	55672	55674	to
O	55675	55677	be
O	55678	55679	O
O	55679	55680	(
O	55680	55681	n
O	55681	55682	)
O	55683	55684	.

O	55686	55694	Question
O	55694	55695	-
O	55695	55703	15430247
O	55703	55704	,
O	55705	55711	answer
O	55711	55712	-
O	55712	55720	15432106

O	55721	55725	This
O	55726	55728	is
O	55729	55731	to
O	55732	55737	avoid
O	55738	55746	possible
O	55747	55754	efforts
O	55755	55758	for
O	55759	55771	reallocation
O	55772	55775	for
O	55776	55781	every
O	55782	55788	single
O	55789	55795	object
O	55795	55796	.
O	55797	55800	int
O	55801	55812	newCapacity
O	55813	55814	=
O	55815	55816	(
O	55816	55827	oldCapacity
O	55828	55829	*
O	55830	55831	3
O	55831	55832	)
O	55832	55833	/
O	55833	55834	2
O	55835	55836	+
O	55837	55838	1
O	55838	55839	;
O	55840	55850	internally
O	55851	55854	new
B-api_mention	55855	55861	Object
O	55861	55862	[
O	55862	55863	]
O	55864	55866	is
O	55867	55874	created
O	55874	55875	.

O	55876	55879	JVM
O	55880	55885	needs
O	55886	55892	effort
O	55893	55895	to
O	55896	55902	create
O	55903	55906	new
B-api_mention	55907	55913	Object
O	55913	55914	[
O	55914	55915	]
O	55916	55920	when
O	55921	55924	you
O	55925	55928	add
O	55929	55936	element
O	55937	55939	in
O	55940	55943	the
O	55944	55953	arraylist
O	55953	55954	.

O	55955	55957	If
O	55958	55961	you
O	55962	55965	don
O	55965	55966	'
O	55966	55967	t
O	55968	55972	have
O	55973	55978	above
O	55979	55983	code
O	55983	55984	(
O	55984	55987	any
O	55988	55992	algo
O	55993	55996	you
O	55997	56002	think
O	56002	56003	)
O	56004	56007	for
O	56008	56020	reallocation
O	56021	56025	then
O	56026	56031	every
O	56032	56036	time
O	56037	56041	when
O	56042	56045	you
O	56046	56052	invoke
O	56053	56062	arraylist
B-api_mention	56062	56063	.
I-api_mention	56063	56066	add
I-api_mention	56066	56067	(
I-api_mention	56067	56071	args
I-api_mention	56071	56072	)
O	56073	56077	then
O	56078	56081	new
B-api_mention	56082	56088	Object
O	56088	56089	[
O	56089	56090	]
O	56091	56094	has
O	56095	56097	to
O	56098	56100	be
O	56101	56108	created
O	56109	56114	which
O	56115	56117	is
O	56118	56127	pointless
O	56128	56131	and
O	56132	56134	we
O	56135	56138	are
O	56139	56146	loosing
O	56147	56151	time
O	56152	56155	for
O	56156	56166	increasing
O	56167	56171	size
O	56172	56174	by
O	56175	56176	1
O	56177	56180	for
O	56181	56185	each
O	56186	56189	and
O	56190	56195	every
O	56196	56203	objects
O	56204	56206	to
O	56207	56209	be
O	56210	56215	added
O	56215	56216	.

O	56217	56219	So
O	56220	56222	it
O	56223	56225	is
O	56226	56232	better
O	56233	56235	to
O	56236	56244	increase
O	56245	56249	size
O	56250	56252	of
B-api_mention	56253	56259	Object
O	56259	56260	[
O	56260	56261	]
O	56262	56266	with
O	56267	56276	following
O	56277	56284	formula
O	56284	56285	.

O	56286	56287	(
O	56287	56290	JSL
O	56291	56294	has
O	56295	56299	used
O	56300	56310	forcasting
O	56311	56318	formula
O	56319	56324	given
O	56325	56330	below
O	56331	56334	for
O	56335	56346	dynamically
O	56347	56354	growing
O	56355	56364	arraylist
O	56365	56372	instead
O	56373	56375	of
O	56376	56383	growing
O	56384	56386	by
O	56387	56388	1
O	56389	56394	every
O	56395	56399	time
O	56399	56400	.
O	56401	56408	Because
O	56409	56411	to
O	56412	56416	grow
O	56417	56419	it
O	56420	56425	takes
O	56426	56432	effort
O	56433	56435	by
O	56436	56439	JVM
O	56439	56440	)
O	56441	56444	int
O	56445	56456	newCapacity
O	56457	56458	=
O	56459	56460	(
O	56460	56471	oldCapacity
O	56472	56473	*
O	56474	56475	3
O	56475	56476	)
O	56476	56477	/
O	56477	56478	2
O	56479	56480	+
O	56481	56482	1
O	56482	56483	;

O	56485	56493	Question
O	56493	56494	-
O	56494	56502	15430247
O	56502	56503	,
O	56504	56510	answer
O	56510	56511	-
O	56511	56519	15446006

O	56520	56521	I
O	56522	56530	actually
O	56531	56536	wrote
O	56537	56538	a
O	56539	56543	blog
O	56544	56548	post
O	56549	56551	on
O	56552	56555	the
O	56556	56561	topic
O	56562	56563	2
O	56564	56570	months
O	56571	56574	ago
O	56574	56575	.

O	56576	56579	The
O	56580	56587	article
O	56588	56590	is
O	56591	56594	for
O	56595	56596	C
O	56596	56597	#
O	56597	56598	'
O	56598	56599	s
B-api_mention	56600	56604	List
I-api_mention	56604	56605	<
I-api_mention	56605	56606	T
I-api_mention	56606	56607	>
O	56608	56611	but
O	56612	56616	Java
O	56616	56617	'
O	56617	56618	s
B-api_mention	56619	56628	ArrayList
O	56629	56632	has
O	56633	56634	a
O	56635	56639	very
O	56640	56647	similar
O	56648	56662	implementation
O	56662	56663	.

O	56664	56669	Since
B-api_mention	56670	56679	ArrayList
O	56680	56682	is
O	56683	56694	implemented
O	56695	56700	using
O	56701	56702	a
O	56703	56710	dynamic
O	56711	56716	array
O	56716	56717	,
O	56718	56720	it
O	56721	56730	increases
O	56731	56733	in
O	56734	56738	size
O	56739	56741	on
O	56742	56748	demand
O	56748	56749	.

O	56750	56752	So
O	56753	56756	the
O	56757	56763	reason
O	56764	56767	for
O	56768	56771	the
O	56772	56780	capacity
O	56781	56792	constructor
O	56793	56795	is
O	56796	56799	for
O	56800	56812	optimisation
O	56813	56821	purposes
O	56821	56822	.

O	56823	56827	When
O	56828	56831	one
O	56832	56834	of
O	56835	56840	these
O	56841	56850	resizings
O	56851	56860	operation
O	56861	56867	occurs
O	56867	56868	,
O	56869	56872	the
B-api_mention	56873	56882	ArrayList
O	56883	56889	copies
O	56890	56893	the
O	56894	56902	contents
O	56903	56905	of
O	56906	56909	the
O	56910	56915	array
O	56916	56920	into
O	56921	56922	a
O	56923	56926	new
O	56927	56932	array
O	56933	56937	that
O	56938	56940	is
O	56941	56946	twice
O	56947	56950	the
O	56951	56959	capacity
O	56960	56962	of
O	56963	56966	the
O	56967	56970	old
O	56971	56974	one
O	56974	56975	.

O	56976	56980	This
O	56981	56990	operation
O	56991	56995	runs
O	56996	56998	in
O	56999	57000	O
O	57000	57001	(
O	57001	57002	n
O	57002	57003	)
O	57004	57008	time
O	57008	57009	.

O	57010	57017	Example
O	57018	57022	Here
O	57023	57025	is
O	57026	57028	an
O	57029	57036	example
O	57037	57039	of
O	57040	57043	how
O	57044	57047	the
B-api_mention	57048	57057	ArrayList
O	57058	57063	would
O	57064	57072	increase
O	57073	57075	in
O	57076	57080	size
O	57080	57081	:
O	57082	57083	#
O	57083	57086	pre
O	57087	57089	So
O	57090	57093	the
O	57094	57098	list
O	57099	57105	starts
O	57106	57110	with
O	57111	57112	a
O	57113	57121	capacity
O	57122	57124	of
O	57125	57127	10
O	57128	57129	,
O	57130	57134	when
O	57135	57138	the
O	57139	57143	11th
O	57144	57148	item
O	57149	57151	is
O	57152	57157	added
O	57158	57160	it
O	57161	57163	is
O	57164	57172	increase
O	57173	57175	by
O	57176	57178	50
O	57178	57179	%
O	57180	57181	+
O	57182	57183	1
O	57184	57186	to
O	57187	57189	16
O	57190	57191	.

O	57192	57194	On
O	57195	57198	the
O	57199	57203	17th
O	57204	57208	item
O	57209	57212	the
B-api_mention	57213	57222	ArrayList
O	57223	57225	is
O	57226	57235	increased
O	57236	57241	again
O	57242	57244	to
O	57245	57247	25
O	57248	57251	and
O	57252	57254	so
O	57255	57257	on
O	57257	57258	.

O	57259	57262	Now
O	57263	57271	consider
O	57272	57275	the
O	57276	57283	example
O	57284	57289	where
O	57290	57292	we
O	57292	57293	'
O	57293	57295	re
O	57296	57304	creating
O	57305	57306	a
O	57307	57311	list
O	57312	57317	where
O	57318	57321	the
O	57322	57329	desired
O	57330	57338	capacity
O	57339	57341	is
O	57342	57349	already
O	57350	57355	known
O	57356	57358	as
O	57359	57366	1000000
O	57367	57368	.

O	57369	57377	Creating
O	57378	57381	the
B-api_mention	57382	57391	ArrayList
O	57392	57399	without
O	57400	57403	the
O	57404	57408	size
O	57409	57420	constructor
O	57421	57425	will
O	57426	57430	call
B-api_mention	57431	57440	ArrayList
I-api_mention	57440	57441	.
I-api_mention	57441	57444	add
O	57445	57452	1000000
O	57453	57458	times
O	57459	57464	which
O	57465	57470	takes
O	57471	57472	O
O	57472	57473	(
O	57473	57474	1
O	57474	57475	)
O	57476	57484	normally
O	57485	57487	or
O	57488	57489	O
O	57489	57490	(
O	57490	57491	n
O	57491	57492	)
O	57493	57495	on
O	57496	57502	resize
O	57502	57503	.

O	57504	57505	#
O	57505	57515	blockquote
O	57516	57523	Compare
O	57524	57528	this
O	57529	57534	using
O	57535	57538	the
O	57539	57550	constructor
O	57551	57554	and
O	57555	57559	then
O	57560	57567	calling
B-api_mention	57568	57577	ArrayList
I-api_mention	57577	57578	.
I-api_mention	57578	57581	add
O	57582	57587	which
O	57588	57590	is
O	57591	57601	guaranteed
O	57602	57604	to
O	57605	57608	run
O	57609	57611	in
O	57612	57613	O
O	57613	57614	(
O	57614	57615	1
O	57615	57616	)
O	57617	57618	.

O	57619	57620	#
O	57620	57630	blockquote
O	57631	57635	Java
O	57636	57638	vs
O	57639	57640	C
O	57640	57641	#
O	57642	57646	Java
O	57647	57649	is
O	57650	57652	as
O	57653	57658	above
O	57658	57659	,
O	57660	57668	starting
O	57669	57671	at
O	57672	57674	10
O	57675	57678	and
O	57679	57689	increasing
O	57690	57694	each
O	57695	57701	resize
O	57702	57704	at
O	57705	57707	50
O	57707	57708	%
O	57709	57710	+
O	57711	57712	1
O	57713	57714	.

O	57715	57716	C
O	57716	57717	#
O	57718	57724	starts
O	57725	57727	at
O	57728	57729	4
O	57730	57733	and
O	57734	57743	increases
O	57744	57748	much
O	57749	57753	more
O	57754	57766	aggressively
O	57766	57767	,
O	57768	57776	doubling
O	57777	57779	at
O	57780	57784	each
O	57785	57791	resize
O	57791	57792	.

O	57793	57796	The
O	57797	57804	1000000
O	57805	57809	adds
O	57810	57817	example
O	57818	57822	from
O	57823	57828	above
O	57829	57832	for
O	57833	57834	C
O	57834	57835	#
O	57836	57840	uses
O	57841	57848	3097084
O	57849	57859	operations
O	57859	57860	.

O	57861	57871	References
O	57872	57873	#
O	57873	57875	li
O	57876	57878	My
O	57879	57883	blog
O	57884	57888	post
O	57889	57891	on
O	57892	57893	C
O	57893	57894	#
O	57894	57895	'
O	57895	57896	s
B-api_mention	57897	57901	List
I-api_mention	57901	57902	<
I-api_mention	57902	57903	T
I-api_mention	57903	57904	>
O	57905	57906	#
O	57906	57908	li
O	57909	57913	Java
O	57913	57914	'
O	57914	57915	s
B-api_mention	57916	57925	ArrayList
O	57926	57932	source
O	57933	57937	code

O	57939	57947	Question
O	57947	57948	-
O	57948	57956	15430247
O	57956	57957	,
O	57958	57964	answer
O	57964	57965	-
O	57965	57973	25757711

B-api_mention	57974	57983	ArrayList
O	57984	57991	shrinks
O	57992	57994	or
O	57995	58002	expands
O	58003	58014	dynamically
O	58014	58015	.

O	58016	58020	This
O	58021	58023	is
O	58024	58025	a
O	58026	58035	effective
O	58036	58039	but
O	58040	58046	costly
O	58047	58056	operation
O	58056	58057	,
O	58058	58060	if
O	58061	58064	you
O	58065	58069	know
O	58070	58074	size
O	58075	58077	of
O	58078	58082	your
O	58083	58088	array
O	58089	58093	will
O	58094	58096	be
O	58097	58102	fixed
O	58103	58107	then
O	58108	58111	its
O	58112	58118	better
O	58119	58121	to
O	58122	58129	mention
O	58130	58133	the
O	58134	58138	size
O	58139	58141	of
O	58142	58145	the
O	58146	58151	array
O	58151	58152	,
O	58152	58154	If
O	58155	58158	you
O	58159	58162	don
O	58162	58163	'
O	58163	58164	t
O	58164	58165	,
O	58166	58169	new
O	58170	58175	array
O	58176	58180	will
O	58181	58183	be
O	58184	58191	created
O	58192	58194	at
O	58195	58199	each
O	58200	58209	insertion
O	58210	58213	and
O	58214	58226	reallocation
O	58227	58231	will
O	58232	58234	be
O	58235	58239	done
O	58240	58243	for
O	58244	58248	each
O	58249	58256	element
O	58256	58257	.
O	58258	58262	this
O	58263	58267	will
O	58268	58272	cost
O	58273	58276	you
O	58276	58277	.

B-api_mention	58278	58292	ensureCapacity
I-api_mention	58292	58293	(
I-api_mention	58293	58297	args
I-api_mention	58297	58298	)
O	58299	58303	this
O	58304	58310	method
O	58311	58315	help
O	58316	58318	to
O	58319	58324	avoid
O	58325	58338	reallocations
O	58339	58342	and
O	58343	58348	helps
O	58349	58357	increase
O	58358	58362	size
O	58363	58365	of
O	58366	58375	arraylist
O	58375	58376	.

B-api_mention	58377	58387	trimToSize
I-api_mention	58387	58388	(
I-api_mention	58388	58392	args
I-api_mention	58392	58393	)
O	58394	58398	this
O	58399	58401	is
O	58402	58409	reverse
O	58410	58414	used
O	58415	58417	to
O	58418	58424	shrink
O	58425	58429	size
B-api_mention	58430	58439	Arraylist
O	58440	58443	has
O	58444	58445	3
O	58446	58458	constructors
O	58458	58459	:
O	58460	58461	#
O	58461	58463	li
B-api_mention	58464	58473	ArrayList
I-api_mention	58473	58474	(
I-api_mention	58474	58475	)
O	58476	58477	-
O	58477	58483	builds
O	58484	58489	empty
B-api_mention	58490	58499	ArrayList
O	58500	58501	#
O	58501	58503	li
B-api_mention	58504	58513	ArrayList
O	58513	58514	(
B-api_mention	58514	58524	Collection
O	58525	58526	c
O	58526	58527	)
O	58528	58529	-
O	58530	58536	builds
O	58537	58538	a
B-api_mention	58539	58548	ArrayList
O	58549	58560	initialized
O	58561	58565	with
O	58566	58574	elements
O	58575	58577	of
B-api_mention	58578	58588	collection
O	58589	58590	c
O	58590	58591	.

O	58592	58593	#
O	58593	58595	li
B-api_mention	58596	58605	ArrayList
I-api_mention	58605	58606	(
I-api_mention	58606	58609	int
I-api_mention	58610	58618	capacity
I-api_mention	58618	58619	)
O	58620	58621	-
O	58621	58627	builds
O	58628	58630	an
B-api_mention	58631	58640	ArrayList
O	58641	58645	with
O	58646	58655	specified
O	58656	58663	initial
O	58664	58672	capacity
O	58672	58673	.

O	58675	58683	Question
O	58683	58684	-
O	58684	58692	14846920
O	58692	58693	,
O	58694	58700	answer
O	58700	58701	-
O	58701	58709	14846943

O	58710	58712	It
O	58713	58715	is
O	58715	58716	,
O	58717	58719	in
O	58720	58722	my
O	58723	58731	personal
O	58732	58742	experience
O	58743	58753	admittedly
O	58753	58754	,
O	58755	58759	very
O	58760	58766	useful
O	58767	58769	in
O	58770	58775	cases
O	58776	58781	where
O	58782	58784	an
O	58785	58788	API
O	58789	58797	requires
O	58798	58799	a
O	58800	58810	collection
O	58811	58813	of
O	58814	58824	parameters
O	58824	58825	,
O	58826	58829	but
O	58830	58833	you
O	58834	58838	have
O	58839	58846	nothing
O	58847	58849	to
O	58850	58857	provide
O	58857	58858	.

O	58859	58862	For
O	58863	58870	example
O	58871	58874	you
O	58875	58878	may
O	58879	58883	have
O	58884	58886	an
O	58887	58890	API
O	58891	58895	that
O	58896	58901	looks
O	58902	58911	something
O	58912	58916	like
O	58917	58921	this
O	58921	58922	,
O	58923	58926	and
O	58927	58931	does
O	58932	58935	not
O	58936	58941	allow
O	58942	58946	null
O	58947	58957	references
O	58957	58958	:
O	58959	58965	public
B-api_mention	58966	58975	ResultSet
I-api_mention	58976	58988	executeQuery
I-api_mention	58988	58989	(
I-api_mention	58989	58993	args
I-api_mention	58993	58994	)
O	58994	58995	;
O	58996	58998	If
O	58999	59002	you
O	59003	59007	have
O	59008	59009	a
O	59010	59015	query
O	59016	59020	that
O	59021	59026	doesn
O	59026	59027	'
O	59027	59028	t
O	59029	59033	take
O	59034	59037	any
O	59038	59048	parameters
O	59048	59049	,
O	59050	59052	it
O	59052	59053	'
O	59053	59054	s
O	59055	59064	certainly
O	59065	59066	a
O	59067	59070	bit
O	59071	59079	wasteful
O	59080	59082	to
O	59083	59089	create
O	59090	59091	a
B-api_mention	59092	59099	HashMap
O	59099	59100	,
O	59101	59106	which
O	59107	59115	involves
O	59116	59126	allocating
O	59127	59129	an
O	59130	59135	array
O	59135	59136	,
O	59137	59141	when
O	59142	59145	you
O	59146	59151	could
O	59152	59156	just
O	59157	59161	pass
O	59162	59164	in
O	59165	59168	the
O	59169	59170	'
O	59170	59175	Empty
O	59176	59179	Map
O	59179	59180	'
O	59181	59186	which
O	59187	59189	is
O	59190	59201	effectively
O	59202	59203	a
O	59204	59212	constant
O	59212	59213	,
O	59214	59217	the
O	59218	59221	way
O	59222	59224	it
O	59224	59225	'
O	59225	59226	s
O	59227	59238	implemented
O	59239	59241	in
B-api_mention	59242	59246	java
I-api_mention	59246	59247	.
I-api_mention	59247	59251	util
I-api_mention	59251	59252	.
I-api_mention	59252	59263	Collections
O	59264	59265	.

O	59267	59275	Question
O	59275	59276	-
O	59276	59284	14846920
O	59284	59285	,
O	59286	59292	answer
O	59292	59293	-
O	59293	59301	14846960

O	59302	59306	From
O	59307	59316	Effective
O	59317	59321	Java
O	59322	59323	,
O	59324	59328	Item
O	59329	59330	#
O	59330	59332	43
O	59333	59334	-
O	59335	59348	StringLiteral
O	59349	59361	demonstrates
O	59362	59371	returning
O	59372	59374	an
O	59375	59380	empty
O	59381	59391	collection
O	59392	59395	and
O	59396	59403	perhaps
O	59404	59408	even
O	59409	59421	demonstrates
O	59422	59427	using
O	59428	59433	these
B-api_mention	59434	59443	emptyList
I-api_mention	59443	59444	(
I-api_mention	59444	59448	args
I-api_mention	59448	59449	)
O	59450	59451	,
B-api_mention	59452	59460	emptySet
I-api_mention	59460	59461	(
I-api_mention	59461	59465	args
I-api_mention	59465	59466	)
O	59467	59468	,
O	59469	59472	and
B-api_mention	59473	59481	emptyMap
I-api_mention	59481	59482	(
I-api_mention	59482	59486	args
I-api_mention	59486	59487	)
O	59488	59495	methods
O	59496	59498	on
O	59499	59502	the
B-api_mention	59503	59514	Collections
O	59515	59520	class
O	59521	59523	to
O	59524	59527	get
O	59528	59530	an
O	59531	59536	empty
O	59537	59547	collection
O	59548	59552	that
O	59553	59557	also
O	59558	59561	has
O	59562	59565	the
O	59566	59576	additional
O	59577	59584	benefit
O	59585	59587	of
O	59588	59593	being
O	59594	59603	immutable
O	59603	59604	.

O	59605	59609	From
O	59610	59614	Item
O	59615	59616	#
O	59616	59618	15
O	59619	59632	StringLiteral
O	59633	59634	.

O	59635	59639	From
B-api_mention	59640	59651	Collections
O	59651	59652	-
B-api_mention	59652	59660	emptySet
O	59660	59661	-
B-api_mention	59661	59672	Collections
O	59672	59673	-
B-api_mention	59673	59682	emptyList
O	59682	59683	-
B-api_mention	59683	59694	Collections
O	59695	59696	#
O	59696	59706	blockquote
O	59707	59711	Note
O	59711	59712	:
O	59713	59718	Below
O	59719	59723	code
O	59724	59726	is
O	59727	59731	just
O	59732	59734	an
O	59735	59742	example
O	59743	59744	(
O	59744	59750	change
O	59751	59753	it
O	59754	59763	according
O	59764	59766	to
O	59767	59771	your
O	59772	59775	use
O	59776	59780	case
O	59780	59781	)
O	59781	59782	:
O	59783	59784	#
O	59784	59787	pre
O	59788	59793	These
O	59794	59801	methods
O	59802	59807	offer
O	59808	59809	a
O	59810	59816	couple
O	59817	59819	of
O	59820	59830	advantages
O	59830	59831	:
O	59832	59833	#
O	59833	59835	li
O	59836	59840	They
O	59840	59841	'
O	59841	59843	re
O	59844	59848	more
O	59849	59856	concise
O	59857	59864	because
O	59865	59868	you
O	59869	59872	don
O	59872	59873	'
O	59873	59874	t
O	59875	59879	need
O	59880	59882	to
O	59883	59893	explicitly
O	59894	59898	type
O	59899	59902	out
O	59903	59906	the
O	59907	59914	generic
O	59915	59919	type
O	59920	59922	of
O	59923	59926	the
O	59927	59937	collection
O	59938	59939	-
O	59940	59942	it
O	59942	59943	'
O	59943	59944	s
O	59945	59954	generally
O	59955	59959	just
O	59960	59968	inferred
O	59969	59973	from
O	59974	59977	the
O	59978	59985	context
O	59986	59988	of
O	59989	59992	the
O	59993	59999	method
O	60000	60004	call
O	60004	60005	.

O	60006	60007	#
O	60007	60009	li
O	60010	60014	They
O	60014	60015	'
O	60015	60017	re
O	60018	60022	more
O	60023	60032	efficient
O	60033	60040	because
O	60041	60045	they
O	60046	60049	don
O	60049	60050	'
O	60050	60051	t
O	60052	60058	bother
O	60059	60067	creating
O	60068	60071	new
O	60072	60079	objects
O	60079	60080	;
O	60081	60085	they
O	60086	60090	just
O	60091	60093	re
O	60093	60094	-
O	60094	60097	use
O	60098	60100	an
O	60101	60109	existing
O	60110	60115	empty
O	60116	60119	and
O	60120	60129	immutable
O	60130	60136	object
O	60136	60137	.

O	60138	60142	This
O	60143	60149	effect
O	60150	60152	is
O	60153	60162	generally
O	60163	60167	very
O	60168	60173	minor
O	60173	60174	,
O	60175	60178	but
O	60179	60181	it
O	60181	60182	'
O	60182	60183	s
O	60184	60196	occasionally
O	60197	60198	(
O	60198	60202	well
O	60202	60203	,
O	60204	60210	rarely
O	60210	60211	)
O	60212	60221	important
O	60221	60222	.

O	60224	60232	Question
O	60232	60233	-
O	60233	60241	14846920
O	60241	60242	,
O	60243	60249	answer
O	60249	60250	-
O	60250	60258	14846963

O	60259	60260	#
O	60260	60270	blockquote
O	60271	60274	For
O	60275	60278	the
O	60279	60283	same
O	60284	60290	reason
O	60291	60294	you
O	60294	60295	'
O	60295	60296	d
O	60297	60300	use
B-api_mention	60301	60312	Collections
I-api_mention	60312	60313	.
I-api_mention	60313	60328	unmodifiableMap
I-api_mention	60328	60329	(
I-api_mention	60329	60330	)
O	60331	60333	at
O	60334	60338	some
O	60339	60344	point
O	60344	60345	.

O	60346	60349	You
O	60350	60354	want
O	60355	60357	to
O	60358	60364	return
O	60365	60366	a
B-api_mention	60367	60370	Map
O	60371	60379	instance
O	60380	60384	that
O	60385	60391	throws
O	60392	60394	an
O	60395	60404	exception
O	60405	60407	if
O	60408	60411	the
O	60412	60416	user
O	60417	60425	attempts
O	60426	60428	to
O	60429	60435	modify
O	60436	60438	it
O	60438	60439	.

O	60440	60442	It
O	60442	60443	'
O	60443	60444	s
O	60445	60449	just
O	60450	60451	a
O	60452	60459	special
O	60460	60464	case
O	60464	60465	:
O	60466	60469	the
O	60470	60475	empty
B-api_mention	60476	60479	Map
O	60479	60480	.

O	60482	60490	Question
O	60490	60491	-
O	60491	60499	14846920
O	60499	60500	,
O	60501	60507	answer
O	60507	60508	-
O	60508	60516	14846964

O	60517	60520	For
O	60521	60524	one
O	60524	60525	,
O	60526	60529	you
O	60530	60533	can
O	60534	60537	get
O	60538	60542	away
O	60543	60547	with
O	60548	60557	reference
O	60558	60565	sharing
O	60565	60566	.

O	60567	60568	A
O	60569	60572	new
B-api_mention	60573	60580	HashMap
I-api_mention	60580	60581	(
I-api_mention	60581	60585	args
I-api_mention	60585	60586	)
O	60587	60590	etc
O	60591	60595	will
O	60596	60603	require
O	60604	60606	an
O	60607	60616	allocated
O	60617	60623	object
O	60623	60624	,
O	60625	60628	and
O	60629	60637	possibly
O	60638	60642	some
O	60643	60648	extra
O	60649	60657	elements
O	60658	60660	to
O	60661	60665	hold
O	60666	60669	the
O	60670	60674	data
O	60674	60675	,
O	60676	60679	but
O	60680	60683	you
O	60684	60688	only
O	60689	60693	need
O	60694	60697	one
O	60698	60702	copy
O	60703	60705	of
O	60706	60708	an
O	60709	60718	immutable
O	60719	60724	empty
O	60725	60735	collection
O	60736	60737	(
O	60737	60741	list
O	60741	60742	,
O	60743	60746	set
O	60746	60747	,
O	60748	60751	map
O	60751	60752	,
O	60753	60755	or
O	60756	60759	any
O	60760	60765	other
O	60766	60770	such
O	60770	60771	)
O	60771	60772	.

O	60773	60777	This
O	60778	60783	makes
O	60784	60786	it
O	60787	60789	an
O	60790	60797	obvious
O	60798	60804	choice
O	60805	60809	when
O	60810	60811	a
O	60812	60818	method
O	60819	60822	you
O	60822	60823	'
O	60823	60825	re
O	60826	60833	calling
O	60834	60839	needs
O	60840	60842	to
O	60843	60849	accept
O	60850	60851	a
B-api_mention	60852	60855	Map
O	60856	60859	but
O	60860	60864	does
O	60865	60868	not
O	60869	60873	need
O	60874	60876	to
O	60877	60881	edit
O	60882	60884	it
O	60884	60885	.

O	60886	60887	I
O	60888	60895	suggest
O	60896	60904	checking
O	60905	60908	out
O	60909	60913	Josh
O	60914	60919	Bloch
O	60919	60920	'
O	60920	60921	s
O	60922	60931	Effective
O	60932	60936	Java
O	60937	60938	,
O	60939	60944	which
O	60945	60950	lists
O	60951	60955	some
O	60956	60960	very
O	60961	60965	nice
O	60966	60976	attributes
O	60977	60979	of
O	60980	60989	immutable
O	60990	60997	objects
O	60998	60999	(
O	60999	61008	including
O	61009	61015	thread
O	61016	61022	safety
O	61022	61023	)
O	61023	61024	.

O	61026	61034	Question
O	61034	61035	-
O	61035	61043	14846920
O	61043	61044	,
O	61045	61051	answer
O	61051	61052	-
O	61052	61060	14847046

O	61061	61065	Most
O	61066	61068	of
O	61069	61072	the
O	61073	61077	time
O	61078	61080	we
O	61081	61084	use
O	61085	61086	a
O	61087	61098	constructor
O	61099	61101	to
O	61102	61108	create
O	61109	61110	a
O	61111	61114	new
O	61115	61120	empty
O	61121	61124	map
O	61125	61126	.

O	61127	61130	But
O	61131	61134	the
B-api_mention	61135	61146	Collections
O	61147	61154	methods
O	61155	61160	offer
O	61161	61162	a
O	61163	61169	couple
O	61170	61172	of
O	61173	61183	advantages
O	61184	61186	to
O	61187	61193	create
O	61194	61196	an
O	61197	61202	empty
O	61203	61206	map
O	61207	61212	using
O	61213	61219	static
O	61220	61226	method
B-api_mention	61227	61231	java
I-api_mention	61231	61232	.
I-api_mention	61232	61236	util
I-api_mention	61236	61237	.
I-api_mention	61237	61248	Collections
I-api_mention	61248	61249	.
I-api_mention	61249	61257	emptyMap
I-api_mention	61257	61258	(
I-api_mention	61258	61262	args
I-api_mention	61262	61263	)
O	61264	61265	#
O	61265	61275	blockquote

O	61277	61285	Question
O	61285	61286	-
O	61286	61294	16252269
O	61294	61295	,
O	61296	61302	answer
O	61302	61303	-
O	61303	61311	16252296

O	61312	61315	Use
O	61316	61320	util
O	61321	61327	method
O	61328	61330	of
B-api_mention	61331	61335	java
I-api_mention	61335	61336	.
I-api_mention	61336	61340	util
I-api_mention	61340	61341	.
I-api_mention	61341	61352	Collections
O	61353	61358	class
O	61358	61359	,
O	61360	61361	i
O	61361	61362	.
O	61362	61363	e
B-api_mention	61364	61375	Collections
I-api_mention	61375	61376	.
I-api_mention	61376	61380	sort
I-api_mention	61380	61381	(
I-api_mention	61381	61385	args
I-api_mention	61385	61386	)
O	61387	61389	In
O	61390	61394	fact
O	61394	61395	,
O	61396	61398	if
O	61399	61402	you
O	61403	61407	want
O	61408	61410	to
O	61411	61415	sort
O	61416	61422	custom
O	61423	61429	object
O	61430	61433	you
O	61434	61437	can
O	61438	61441	use
B-api_mention	61442	61453	Collections
I-api_mention	61453	61454	.
I-api_mention	61454	61458	sort
I-api_mention	61458	61459	(
I-api_mention	61459	61463	args
I-api_mention	61463	61464	)
O	61465	61468	see
O	61469	61480	collections
O	61481	61484	api

O	61486	61494	Question
O	61494	61495	-
O	61495	61503	16252269
O	61503	61504	,
O	61505	61511	answer
O	61511	61512	-
O	61512	61520	29652714

O	61521	61524	You
O	61525	61528	can
O	61529	61532	use
B-api_mention	61533	61544	Collections
I-api_mention	61544	61545	.
I-api_mention	61545	61549	sort
I-api_mention	61549	61550	(
I-api_mention	61550	61554	args
I-api_mention	61554	61555	)
O	61556	61558	to
O	61559	61563	sort
O	61564	61568	list
O	61569	61571	if
O	61572	61576	your
O	61577	61581	list
O	61582	61590	contains
B-api_mention	61591	61601	Comparable
O	61602	61610	elements
O	61610	61611	.

O	61612	61621	Otherwise
O	61622	61623	I
O	61624	61629	would
O	61630	61639	recommend
O	61640	61643	you
O	61644	61646	to
O	61647	61656	implement
O	61657	61661	that
O	61662	61671	interface
O	61672	61676	like
O	61677	61681	here
O	61681	61682	:
O	61683	61689	public
O	61690	61695	class
O	61696	61702	Circle
O	61703	61713	implements
B-api_mention	61714	61724	Comparable
I-api_mention	61724	61725	<
I-api_mention	61725	61726	T
I-api_mention	61726	61727	>
O	61728	61729	{
O	61729	61730	}
O	61731	61734	and
O	61735	61737	of
O	61738	61744	course
O	61745	61752	provide
O	61753	61757	your
O	61758	61761	own
O	61762	61773	realization
O	61774	61776	of
B-api_mention	61777	61786	compareTo
O	61787	61793	method
O	61794	61798	like
O	61799	61803	here
O	61803	61804	:
O	61805	61806	#
O	61806	61809	pre
O	61810	61813	And
O	61814	61818	then
O	61819	61822	you
O	61823	61826	can
O	61827	61832	again
O	61833	61836	use
B-api_mention	61837	61846	Colection
I-api_mention	61846	61847	.
I-api_mention	61847	61851	sort
I-api_mention	61851	61852	(
I-api_mention	61852	61856	args
I-api_mention	61856	61857	)
O	61858	61860	as
O	61861	61864	now
O	61865	61869	list
O	61870	61878	contains
O	61879	61886	objects
O	61887	61889	of
B-api_mention	61890	61900	Comparable
O	61901	61905	type
O	61906	61909	and
O	61910	61913	can
O	61914	61916	be
O	61917	61923	sorted
O	61923	61924	.

O	61925	61930	Order
O	61931	61938	depends
O	61939	61941	on
B-api_mention	61942	61951	compareTo
O	61952	61958	method
O	61958	61959	.

O	61960	61965	Check
O	61966	61970	this
O	61971	61972	#
O	61972	61973	a
O	61974	61977	for
O	61978	61982	more
O	61983	61991	detailed
O	61992	62003	information
O	62003	62004	.

O	62006	62014	Question
O	62014	62015	-
O	62015	62023	16252269
O	62023	62024	,
O	62025	62031	answer
O	62031	62032	-
O	62032	62040	30210459

B-api_mention	62041	62052	Collections
I-api_mention	62052	62053	.
I-api_mention	62053	62057	sort
O	62058	62064	allows
O	62065	62068	you
O	62069	62071	to
O	62072	62076	pass
O	62077	62079	an
O	62080	62088	instance
O	62089	62091	of
O	62092	62093	a
B-api_mention	62094	62104	Comparator
O	62105	62110	which
O	62111	62118	defines
O	62119	62122	the
O	62123	62130	sorting
O	62131	62136	logic
O	62136	62137	.

O	62138	62140	So
O	62141	62148	instead
O	62149	62151	of
O	62152	62159	sorting
O	62160	62163	the
O	62164	62168	list
O	62169	62171	in
O	62172	62179	natural
O	62180	62185	order
O	62186	62189	and
O	62190	62194	then
O	62195	62204	reversing
O	62205	62207	it
O	62207	62208	,
O	62209	62212	one
O	62213	62216	can
O	62217	62223	simply
O	62224	62228	pass
B-api_mention	62229	62240	Collections
I-api_mention	62240	62241	.
I-api_mention	62241	62253	reverseOrder
I-api_mention	62253	62254	(
I-api_mention	62254	62258	args
I-api_mention	62258	62259	)
O	62260	62262	to
O	62263	62267	sort
O	62268	62270	in
O	62271	62276	order
O	62277	62279	to
O	62280	62284	sort
O	62285	62288	the
O	62289	62293	list
O	62294	62296	in
O	62297	62304	reverse
O	62305	62310	order
O	62310	62311	:
O	62312	62313	#
O	62313	62316	pre
O	62317	62319	As
O	62320	62329	mentioned
O	62330	62332	by
O	62333	62334	@
O	62334	62341	Marco13
O	62341	62342	,
O	62343	62348	apart
O	62349	62353	from
O	62354	62359	being
O	62360	62364	more
O	62365	62374	idiomatic
O	62375	62376	(
O	62376	62379	and
O	62380	62388	possibly
O	62389	62393	more
O	62394	62403	efficient
O	62403	62404	)
O	62404	62405	,
O	62406	62411	using
O	62412	62415	the
O	62416	62423	reverse
O	62424	62429	order
O	62430	62440	comparator
O	62441	62446	makes
O	62447	62451	sure
O	62452	62456	that
O	62457	62460	the
O	62461	62465	sort
O	62466	62468	is
O	62469	62475	stable
O	62476	62477	(
O	62477	62484	meaning
O	62485	62489	that
O	62490	62493	the
O	62494	62499	order
O	62500	62502	of
O	62503	62511	elements
O	62512	62516	will
O	62517	62520	not
O	62521	62523	be
O	62524	62531	changed
O	62532	62536	when
O	62537	62541	they
O	62542	62545	are
O	62546	62551	equal
O	62552	62561	according
O	62562	62564	to
O	62565	62568	the
O	62569	62579	comparator
O	62579	62580	,
O	62581	62588	whereas
O	62589	62598	reversing
O	62599	62603	will
O	62604	62610	change
O	62611	62614	the
O	62615	62620	order
O	62620	62621	)

O	62623	62631	Question
O	62631	62632	-
O	62632	62640	14534767
O	62640	62641	,
O	62642	62648	answer
O	62648	62649	-
O	62649	62657	14534791

O	62658	62664	Escape
O	62665	62671	should
O	62672	62674	be
O	62675	62679	done
O	62680	62684	with
O	62685	62686	\
O	62687	62688	,
O	62689	62692	not
O	62693	62694	/
O	62695	62696	.

O	62697	62699	So
O	62700	62701	r
B-api_mention	62701	62702	.
I-api_mention	62702	62708	append
I-api_mention	62708	62709	(
I-api_mention	62709	62713	args
I-api_mention	62713	62714	)
O	62714	62715	;
O	62716	62718	or
O	62719	62720	r
B-api_mention	62720	62721	.
I-api_mention	62721	62727	append
I-api_mention	62727	62728	(
I-api_mention	62728	62732	args
I-api_mention	62732	62733	)
O	62733	62734	;
O	62735	62739	will
O	62740	62744	work
O	62745	62746	(
B-api_mention	62747	62760	StringBuilder
O	62761	62764	has
O	62765	62775	overloaded
O	62776	62783	methods
O	62784	62787	for
O	62788	62792	char
O	62793	62796	and
B-api_mention	62797	62803	String
O	62804	62808	type
O	62808	62809	)
O	62809	62810	.

O	62812	62820	Question
O	62820	62821	-
O	62821	62829	14534767
O	62829	62830	,
O	62831	62837	answer
O	62837	62838	-
O	62838	62846	14534798

O	62847	62849	It
O	62850	62856	should
O	62857	62859	be
O	62860	62861	r
B-api_mention	62861	62862	.
I-api_mention	62862	62868	append
I-api_mention	62868	62869	(
I-api_mention	62869	62873	args
I-api_mention	62873	62874	)
O	62874	62875	;
O	62876	62879	But
O	62880	62881	I
O	62882	62891	recommend
O	62892	62895	you
O	62896	62898	to
O	62899	62901	do
O	62902	62904	as
O	62905	62910	below
O	62910	62911	,
O	62912	62913	r
B-api_mention	62913	62914	.
I-api_mention	62914	62920	append
I-api_mention	62920	62921	(
I-api_mention	62921	62925	args
I-api_mention	62925	62926	)
O	62926	62927	;
B-api_mention	62928	62934	System
I-api_mention	62934	62935	.
I-api_mention	62935	62946	getProperty
I-api_mention	62946	62947	(
I-api_mention	62947	62951	args
I-api_mention	62951	62952	)
O	62953	62958	gives
O	62959	62962	you
O	62963	62969	system
O	62969	62970	-
O	62970	62979	dependent
O	62980	62987	newline
O	62988	62990	in
O	62991	62995	java
O	62995	62996	.

O	62997	63001	Also
O	63002	63006	from
O	63007	63011	Java
O	63012	63013	7
O	63014	63019	there
O	63019	63020	'
O	63020	63021	s
O	63022	63023	a
O	63024	63030	method
O	63031	63035	that
O	63036	63043	returns
O	63044	63047	the
O	63048	63053	value
O	63054	63062	directly
O	63062	63063	:
B-api_mention	63064	63070	System
I-api_mention	63070	63071	.
I-api_mention	63071	63084	lineSeparator
I-api_mention	63084	63085	(
I-api_mention	63085	63086	)

O	63088	63096	Question
O	63096	63097	-
O	63097	63105	14534767
O	63105	63106	,
O	63107	63113	answer
O	63113	63114	-
O	63114	63122	33687544

O	63123	63126	For
O	63127	63131	HTML
O	63132	63140	response
O	63141	63146	below
O	63147	63151	code
O	63152	63155	can
O	63156	63158	be
O	63159	63163	used
O	63164	63173	bufString
O	63173	63174	.
B-api_mention	63174	63180	append
I-api_mention	63180	63181	(
I-api_mention	63181	63185	args
I-api_mention	63185	63186	)
O	63186	63187	;

O	63189	63197	Question
O	63197	63198	-
O	63198	63206	14534767
O	63206	63207	,
O	63208	63214	answer
O	63214	63215	-
O	63215	63223	34073047

O	63224	63231	Another
O	63232	63238	option
O	63239	63241	is
O	63242	63244	to
O	63245	63248	use
O	63249	63255	Apache
O	63256	63263	Commons
B-api_mention	63264	63274	StrBuilder
O	63274	63275	,
O	63276	63281	which
O	63282	63285	has
O	63286	63289	the
O	63290	63303	functionality
O	63304	63308	that
O	63308	63309	'
O	63309	63310	s
O	63311	63318	lacking
O	63319	63321	in
B-api_mention	63322	63335	StringBuilder
O	63335	63336	.

B-api_mention	63337	63347	StrBuilder
I-api_mention	63347	63348	.
I-api_mention	63348	63356	appendLn
I-api_mention	63356	63357	(
I-api_mention	63357	63358	)

O	63360	63368	Question
O	63368	63369	-
O	63369	63377	14602062
O	63377	63378	,
O	63379	63385	answer
O	63385	63386	-
O	63386	63394	14602092

O	63395	63399	From
B-api_mention	63400	63406	String
I-api_mention	63406	63407	.
I-api_mention	63407	63412	split
I-api_mention	63412	63413	(
I-api_mention	63413	63414	)
O	63415	63418	API
O	63419	63422	Doc
O	63423	63424	:
O	63425	63426	#
O	63426	63436	blockquote
O	63437	63447	Overloaded
B-api_mention	63448	63454	String
I-api_mention	63454	63455	.
I-api_mention	63455	63460	split
I-api_mention	63460	63461	(
I-api_mention	63461	63466	regex
I-api_mention	63466	63467	,
I-api_mention	63468	63471	int
I-api_mention	63471	63472	)
O	63473	63475	is
O	63476	63480	more
O	63481	63492	appropriate
O	63493	63496	for
O	63497	63501	your
O	63502	63506	case
O	63506	63507	.

O	63509	63517	Question
O	63517	63518	-
O	63518	63526	14602062
O	63526	63527	,
O	63528	63534	answer
O	63534	63535	-
O	63535	63543	14602155

O	63544	63548	From
O	63549	63552	the
O	63553	63566	documentation
O	63567	63569	of
B-api_mention	63570	63576	String
I-api_mention	63576	63577	.
I-api_mention	63577	63582	split
I-api_mention	63582	63583	(
I-api_mention	63583	63589	String
I-api_mention	63590	63595	regex
I-api_mention	63595	63596	)
O	63597	63598	:
O	63599	63600	#
O	63600	63610	blockquote
O	63611	63613	So
O	63614	63617	you
O	63618	63622	will
O	63623	63627	have
O	63628	63630	to
O	63631	63634	use
O	63635	63638	the
O	63639	63642	two
O	63643	63651	argument
O	63652	63659	version
B-api_mention	63660	63666	String
I-api_mention	63666	63667	.
I-api_mention	63667	63672	split
I-api_mention	63672	63673	(
I-api_mention	63673	63679	String
I-api_mention	63680	63685	regex
I-api_mention	63685	63686	,
I-api_mention	63687	63690	int
I-api_mention	63691	63696	limit
I-api_mention	63696	63697	)
O	63698	63702	with
O	63703	63704	a
O	63705	63713	negative
O	63714	63719	value
O	63719	63720	:
B-api_mention	63721	63727	String
O	63727	63728	[
O	63728	63729	]
O	63730	63735	split
O	63736	63737	=
O	63738	63742	data
O	63742	63743	.
B-api_mention	63743	63748	split
I-api_mention	63748	63749	(
I-api_mention	63749	63753	args
I-api_mention	63753	63754	)
O	63754	63755	;
O	63756	63759	Doc
O	63759	63760	:
O	63761	63762	#
O	63762	63772	blockquote
O	63773	63777	This
O	63778	63782	will
O	63783	63786	not
O	63787	63792	leave
O	63793	63796	out
O	63797	63800	any
O	63801	63806	empty
O	63807	63815	elements
O	63815	63816	,
O	63817	63826	including
O	63827	63830	the
O	63831	63839	trailing
O	63840	63844	ones
O	63844	63845	.

O	63847	63855	Question
O	63855	63856	-
O	63856	63864	15336477
O	63864	63865	,
O	63866	63872	answer
O	63872	63873	-
O	63873	63881	15336606

O	63882	63884	It
O	63885	63888	got
O	63889	63899	deprecated
O	63900	63902	in
O	63903	63910	version
O	63911	63912	4
O	63912	63913	.
O	63913	63914	3
O	63914	63915	-
O	63915	63921	alpha1
O	63922	63927	which
O	63928	63931	you
O	63932	63935	use
O	63936	63943	because
O	63944	63946	of
O	63947	63950	the
O	63951	63957	LATEST
O	63958	63965	version
O	63966	63979	specification
O	63979	63980	.

O	63981	63983	If
O	63984	63987	you
O	63988	63992	take
O	63993	63994	a
O	63995	63999	look
O	64000	64002	at
O	64003	64006	the
O	64007	64014	javadoc
O	64015	64017	of
O	64018	64021	the
O	64022	64027	class
O	64027	64028	,
O	64029	64031	it
O	64032	64037	tells
O	64038	64041	you
O	64042	64046	what
O	64047	64049	to
O	64050	64053	use
O	64054	64061	instead
O	64061	64062	:
B-api_mention	64063	64080	HttpClientBuilder
O	64081	64082	.

O	64083	64085	In
O	64086	64089	the
O	64090	64096	latest
O	64097	64103	stable
O	64104	64111	version
O	64112	64113	(
O	64114	64115	4
O	64115	64116	.
O	64116	64117	2
O	64117	64118	.
O	64118	64119	3
O	64120	64121	)
O	64122	64125	the
B-api_mention	64126	64143	DefaultHttpClient
O	64144	64146	is
O	64147	64150	not
O	64151	64161	deprecated
O	64162	64165	yet
O	64165	64166	.

O	64168	64176	Question
O	64176	64177	-
O	64177	64185	15336477
O	64185	64186	,
O	64187	64193	answer
O	64193	64194	-
O	64194	64202	32364785

O	64203	64211	Examples
O	64212	64216	from
O	64217	64223	Apache
O	64224	64225	(
O	64226	64230	link
O	64231	64232	)
O	64233	64236	use
O	64237	64241	this
O	64241	64242	:
B-api_mention	64243	64253	HttpClient
O	64254	64264	httpclient
O	64265	64266	=
B-api_mention	64267	64278	HttpClients
I-api_mention	64278	64279	.
I-api_mention	64279	64292	createDefault
I-api_mention	64292	64293	(
I-api_mention	64293	64297	args
I-api_mention	64297	64298	)
O	64298	64299	;
O	64300	64303	The
O	64304	64309	class
B-api_mention	64310	64313	org
I-api_mention	64313	64314	.
I-api_mention	64314	64320	apache
I-api_mention	64320	64321	.
I-api_mention	64321	64325	http
I-api_mention	64325	64326	.
I-api_mention	64326	64330	impl
I-api_mention	64330	64331	.
I-api_mention	64331	64337	client
I-api_mention	64337	64338	.
I-api_mention	64338	64349	HttpClients
O	64350	64352	is
O	64353	64358	there
O	64359	64364	since
O	64365	64372	version
O	64373	64374	4
O	64374	64375	.
O	64375	64376	3
O	64376	64377	.

O	64378	64381	The
O	64382	64386	code
O	64387	64390	for
B-api_mention	64391	64402	HttpClients
I-api_mention	64402	64403	.
I-api_mention	64403	64416	createDefault
I-api_mention	64416	64417	(
I-api_mention	64417	64421	args
I-api_mention	64421	64422	)
O	64423	64425	is
O	64426	64429	the
O	64430	64434	same
O	64435	64437	as
O	64438	64441	the
O	64442	64450	accepted
O	64451	64457	answer
O	64458	64460	in
O	64461	64465	here
O	64465	64466	.

O	64468	64476	Question
O	64476	64477	-
O	64477	64485	16098046
O	64485	64486	,
O	64487	64493	answer
O	64493	64494	-
O	64494	64502	16098086

O	64503	64506	You
O	64507	64512	could
O	64513	64516	use
B-api_mention	64517	64523	printf
I-api_mention	64523	64524	(
I-api_mention	64524	64528	args
I-api_mention	64528	64529	)
O	64530	64534	with
O	64535	64536	%
O	64536	64537	f
O	64538	64539	:
O	64540	64541	#
O	64541	64544	pre
O	64545	64549	This
O	64550	64554	will
O	64555	64560	print
O	64561	64565	dexp
O	64565	64566	:
O	64567	64575	12345678
O	64575	64576	.
O	64576	64582	000000
O	64583	64584	.

O	64585	64587	If
O	64588	64591	you
O	64592	64595	don
O	64595	64596	'
O	64596	64597	t
O	64598	64602	want
O	64603	64606	the
O	64607	64617	fractional
O	64618	64622	part
O	64622	64623	,
O	64624	64627	use
B-api_mention	64628	64634	System
I-api_mention	64634	64635	.
I-api_mention	64635	64638	out
I-api_mention	64638	64639	.
I-api_mention	64639	64645	printf
I-api_mention	64645	64646	(
I-api_mention	64646	64650	args
I-api_mention	64650	64651	)
O	64651	64652	;
O	64653	64657	This
O	64658	64662	uses
O	64663	64666	the
O	64667	64673	format
O	64674	64683	specifier
O	64684	64692	language
O	64693	64702	explained
O	64703	64705	in
O	64706	64709	the
O	64710	64723	documentation
O	64724	64725	.

O	64726	64729	The
O	64730	64737	default
B-api_mention	64738	64746	toString
I-api_mention	64746	64747	(
I-api_mention	64747	64751	args
I-api_mention	64751	64752	)
O	64753	64759	format
O	64760	64764	used
O	64765	64767	in
O	64768	64772	your
O	64773	64781	original
O	64782	64786	code
O	64787	64789	is
O	64790	64797	spelled
O	64798	64801	out
O	64802	64806	here
O	64807	64808	.

O	64810	64818	Question
O	64818	64819	-
O	64819	64827	16098046
O	64827	64828	,
O	64829	64835	answer
O	64835	64836	-
O	64836	64844	25307973

O	64845	64847	In
O	64848	64853	short
O	64853	64854	:
O	64855	64857	If
O	64858	64861	you
O	64862	64866	want
O	64867	64869	to
O	64870	64873	get
O	64874	64877	rid
O	64878	64880	of
O	64881	64889	trailing
O	64890	64895	zeros
O	64896	64899	and
B-api_mention	64900	64906	Locale
O	64907	64915	problems
O	64915	64916	,
O	64917	64921	then
O	64922	64925	you
O	64926	64932	should
O	64933	64936	use
O	64937	64938	:
O	64939	64940	#
O	64940	64943	pre
O	64944	64955	Explanation
O	64955	64956	:
O	64957	64960	Why
O	64961	64966	other
O	64967	64974	answers
O	64975	64978	did
O	64979	64982	not
O	64983	64987	suit
O	64988	64990	me
O	64991	64992	:
O	64993	64994	#
O	64994	64996	li
B-api_mention	64997	65003	Double
I-api_mention	65003	65004	.
I-api_mention	65004	65012	toString
I-api_mention	65012	65013	(
I-api_mention	65013	65017	args
I-api_mention	65017	65018	)
O	65019	65021	or
B-api_mention	65022	65028	System
I-api_mention	65028	65029	.
I-api_mention	65029	65032	out
I-api_mention	65032	65033	.
I-api_mention	65033	65040	println
O	65041	65043	or
B-api_mention	65044	65059	FloatingDecimal
I-api_mention	65059	65060	.
I-api_mention	65060	65078	toJavaFormatString
O	65079	65083	uses
O	65084	65094	scientific
O	65095	65104	notations
O	65105	65107	if
O	65108	65114	double
O	65115	65117	is
O	65118	65122	less
O	65123	65127	than
O	65128	65130	10
O	65130	65131	^
O	65131	65132	-
O	65132	65133	3
O	65134	65136	or
O	65137	65144	greater
O	65145	65149	than
O	65150	65152	or
O	65153	65158	equal
O	65159	65161	to
O	65162	65164	10
O	65164	65165	^
O	65165	65166	7
O	65167	65168	#
O	65168	65170	li
O	65171	65173	by
O	65174	65179	using
O	65180	65181	%
O	65181	65182	f
O	65183	65184	,
O	65185	65188	the
O	65189	65196	default
O	65197	65204	decimal
O	65205	65214	precision
O	65215	65217	is
O	65218	65219	6
O	65219	65220	,
O	65221	65230	otherwise
O	65231	65234	you
O	65235	65238	can
O	65239	65247	hardcode
O	65248	65250	it
O	65251	65254	but
O	65255	65257	it
O	65258	65265	results
O	65266	65268	in
O	65269	65274	extra
O	65275	65280	zeros
O	65281	65286	added
O	65287	65289	if
O	65290	65293	you
O	65294	65298	have
O	65299	65303	less
O	65304	65312	decimals
O	65312	65313	.

O	65314	65321	Example
O	65322	65323	:
O	65324	65325	#
O	65325	65328	pre
O	65329	65330	#
O	65330	65332	li
O	65333	65335	by
O	65336	65341	using
B-api_mention	65342	65366	setMaximumFractionDigits
I-api_mention	65366	65367	(
I-api_mention	65367	65371	args
I-api_mention	65371	65372	)
O	65372	65373	;
O	65374	65376	or
O	65377	65378	%
O	65378	65379	.
O	65379	65381	0f
O	65382	65385	you
O	65386	65392	remove
O	65393	65396	any
O	65397	65404	decimal
O	65405	65414	precision
O	65414	65415	,
O	65416	65421	which
O	65422	65424	is
O	65425	65429	fine
O	65430	65433	for
O	65434	65442	integers
O	65442	65443	/
O	65443	65448	longs
O	65449	65452	but
O	65453	65456	not
O	65457	65460	for
O	65461	65467	double
O	65468	65469	#
O	65469	65472	pre
O	65473	65474	#
O	65474	65476	li
O	65477	65479	by
O	65480	65485	using
B-api_mention	65486	65499	DecimalFormat
O	65499	65500	,
O	65501	65504	you
O	65505	65508	are
O	65509	65514	local
O	65515	65524	dependent
O	65524	65525	.

O	65526	65528	In
O	65529	65535	French
O	65536	65542	locale
O	65542	65543	,
O	65544	65547	the
O	65548	65555	decimal
O	65556	65565	separator
O	65566	65568	is
O	65569	65570	a
O	65571	65576	comma
O	65576	65577	,
O	65578	65581	not
O	65582	65583	a
O	65584	65589	point
O	65590	65591	:
O	65592	65593	#
O	65593	65596	pre
O	65597	65602	Using
O	65603	65606	the
O	65607	65614	ENGLISH
O	65615	65621	locale
O	65622	65627	makes
O	65628	65632	sure
O	65633	65636	you
O	65637	65640	get
O	65641	65642	a
O	65643	65648	point
O	65649	65652	for
O	65653	65660	decimal
O	65661	65670	separator
O	65670	65671	,
O	65672	65680	wherever
O	65681	65685	your
O	65686	65693	program
O	65694	65698	will
O	65699	65702	run
O	65703	65706	Why
O	65707	65712	using
O	65713	65716	340
O	65717	65721	then
O	65722	65725	for
B-api_mention	65726	65750	setMaximumFractionDigits
O	65751	65752	?

O	65753	65756	Two
O	65757	65764	reasons
O	65765	65766	:
O	65767	65768	#
O	65768	65770	li
B-api_mention	65771	65795	setMaximumFractionDigits
O	65796	65803	accepts
O	65804	65806	an
O	65807	65814	integer
O	65815	65818	but
O	65819	65822	its
O	65823	65837	implementation
O	65838	65841	has
O	65842	65843	a
O	65844	65851	maximum
O	65852	65858	digits
O	65859	65866	allowed
O	65867	65869	of
B-api_mention	65870	65883	DecimalFormat
I-api_mention	65883	65884	.
I-api_mention	65884	65890	DOUBLE
I-api_mention	65890	65891	_
I-api_mention	65891	65899	FRACTION
I-api_mention	65899	65900	_
I-api_mention	65900	65906	DIGITS
O	65907	65912	which
O	65913	65919	equals
O	65920	65923	340
O	65924	65925	#
O	65925	65927	li
B-api_mention	65928	65934	Double
I-api_mention	65934	65935	.
I-api_mention	65935	65938	MIN
I-api_mention	65938	65939	_
I-api_mention	65939	65944	VALUE
O	65945	65946	=
O	65947	65948	4
O	65948	65949	.
O	65949	65951	9E
O	65951	65952	-
O	65952	65955	324
O	65956	65958	so
O	65959	65963	with
O	65964	65967	340
O	65968	65974	digits
O	65975	65978	you
O	65979	65982	are
O	65983	65987	sure
O	65988	65991	not
O	65992	65994	to
O	65995	66000	round
O	66001	66005	your
O	66006	66012	double
O	66013	66016	and
O	66017	66022	loose
O	66023	66032	precision

O	66034	66042	Question
O	66042	66043	-
O	66043	66051	14526260
O	66051	66052	,
O	66053	66059	answer
O	66059	66060	-
O	66060	66068	14526289

O	66069	66073	just
O	66074	66077	use
B-api_mention	66078	66082	File
I-api_mention	66082	66083	.
I-api_mention	66083	66090	getName
I-api_mention	66090	66091	(
I-api_mention	66091	66092	)
O	66093	66094	#
O	66094	66097	pre
O	66098	66103	using
O	66104	66110	String
O	66111	66118	methods
O	66119	66120	:
O	66121	66122	#
O	66122	66125	pre

O	66127	66135	Question
O	66135	66136	-
O	66136	66144	14376807
O	66144	66145	,
O	66146	66152	answer
O	66152	66153	-
O	66153	66161	22092971

O	66162	66165	For
O	66166	66171	those
O	66172	66179	looking
O	66180	66183	for
O	66184	66185	a
O	66186	66193	general
O	66194	66202	strategy
O	66203	66206	for
O	66207	66214	reading
O	66215	66218	and
O	66219	66226	writing
O	66227	66228	a
O	66229	66235	string
O	66236	66238	to
O	66239	66243	file
O	66243	66244	:
O	66245	66250	First
O	66250	66251	,
O	66252	66255	get
O	66256	66257	a
O	66258	66262	file
O	66263	66269	object
O	66270	66273	You
O	66273	66274	'
O	66274	66276	ll
O	66277	66281	need
O	66282	66285	the
O	66286	66293	storage
O	66294	66298	path
O	66298	66299	.

O	66300	66303	For
O	66304	66307	the
O	66308	66316	internal
O	66317	66324	storage
O	66324	66325	,
O	66326	66329	use
O	66329	66330	:
B-api_mention	66331	66335	File
O	66336	66340	path
O	66341	66342	=
O	66343	66350	context
B-api_mention	66350	66351	.
I-api_mention	66351	66362	getFilesDir
I-api_mention	66362	66363	(
I-api_mention	66363	66367	args
I-api_mention	66367	66368	)
O	66368	66369	;
O	66370	66373	For
O	66374	66377	the
O	66378	66386	external
O	66387	66394	storage
O	66395	66396	(
O	66396	66398	SD
O	66399	66403	card
O	66403	66404	)
O	66404	66405	,
O	66406	66409	use
O	66409	66410	:
B-api_mention	66411	66415	File
O	66416	66420	path
O	66421	66422	=
O	66423	66430	context
B-api_mention	66430	66431	.
I-api_mention	66431	66450	getExternalFilesDir
I-api_mention	66450	66451	(
I-api_mention	66451	66455	args
I-api_mention	66455	66456	)
O	66456	66457	;
O	66458	66462	Then
O	66463	66469	create
O	66470	66474	your
O	66475	66479	file
O	66480	66486	object
O	66486	66487	:
B-api_mention	66488	66492	File
O	66493	66497	file
O	66498	66499	=
O	66500	66503	new
B-api_mention	66504	66508	File
I-api_mention	66508	66509	(
I-api_mention	66509	66513	args
I-api_mention	66513	66514	)
O	66514	66515	;
O	66516	66521	Write
O	66522	66523	a
O	66524	66530	string
O	66531	66533	to
O	66534	66537	the
O	66538	66542	file
O	66543	66544	#
O	66544	66547	pre
O	66548	66550	Or
O	66551	66555	with
O	66556	66562	Google
O	66563	66568	Guava
B-api_mention	66569	66574	Files
I-api_mention	66574	66575	.
I-api_mention	66575	66580	write
I-api_mention	66580	66581	(
I-api_mention	66581	66585	args
I-api_mention	66585	66586	)
O	66586	66587	;
O	66588	66592	Read
O	66593	66596	the
O	66597	66601	file
O	66602	66604	to
O	66605	66606	a
O	66607	66613	string
O	66614	66615	#
O	66615	66618	pre
O	66619	66621	Or
O	66622	66624	if
O	66625	66628	you
O	66629	66632	are
O	66633	66638	using
O	66639	66645	Google
O	66646	66651	Guava
B-api_mention	66652	66658	String
O	66659	66667	contents
O	66668	66669	=
B-api_mention	66670	66675	Files
I-api_mention	66675	66676	.
I-api_mention	66676	66684	toString
I-api_mention	66684	66685	(
I-api_mention	66685	66689	args
I-api_mention	66689	66690	)
O	66690	66691	;
O	66692	66695	For
O	66696	66708	completeness
O	66709	66710	I
O	66710	66711	'
O	66711	66713	ll
O	66714	66721	mention
B-api_mention	66722	66728	String
O	66729	66737	contents
O	66738	66739	=
O	66740	66743	new
B-api_mention	66744	66751	Scanner
I-api_mention	66751	66752	(
I-api_mention	66752	66756	args
I-api_mention	66756	66757	)
I-api_mention	66757	66758	.
I-api_mention	66758	66770	useDelimiter
I-api_mention	66770	66771	(
I-api_mention	66771	66775	args
I-api_mention	66775	66776	)
I-api_mention	66776	66777	.
I-api_mention	66777	66781	next
I-api_mention	66781	66782	(
I-api_mention	66782	66786	args
I-api_mention	66786	66787	)
O	66787	66788	;
O	66789	66794	which
O	66795	66803	requires
O	66804	66806	no
O	66807	66816	libraries
O	66816	66817	,
O	66818	66821	but
O	66822	66832	benchmarks
O	66833	66835	50
O	66835	66836	%
O	66837	66838	-
O	66839	66842	400
O	66842	66843	%
O	66844	66850	slower
O	66851	66855	than
O	66856	66859	the
O	66860	66865	other
O	66866	66873	options
O	66874	66875	(
O	66875	66877	in
O	66878	66885	various
O	66886	66891	tests
O	66892	66894	on
O	66895	66897	my
O	66898	66903	Nexus
O	66904	66905	5
O	66905	66906	)
O	66906	66907	.

O	66908	66913	Notes
O	66914	66917	For
O	66918	66922	each
O	66923	66925	of
O	66926	66931	these
O	66932	66942	strategies
O	66942	66943	,
O	66944	66947	you
O	66947	66948	'
O	66948	66950	ll
O	66951	66953	be
O	66954	66959	asked
O	66960	66962	to
O	66963	66968	catch
O	66969	66971	an
B-api_mention	66972	66983	IOException
O	66983	66984	.

O	66985	66988	The
O	66989	66996	default
O	66997	67006	character
O	67007	67015	encoding
O	67016	67018	on
O	67019	67026	Android
O	67027	67029	is
O	67030	67033	UTF
O	67033	67034	-
O	67034	67035	8
O	67035	67036	.

O	67037	67039	If
O	67040	67043	you
O	67044	67047	are
O	67048	67053	using
O	67054	67062	external
O	67063	67070	storage
O	67070	67071	,
O	67072	67075	you
O	67075	67076	'
O	67076	67078	ll
O	67079	67083	need
O	67084	67086	to
O	67087	67090	add
O	67091	67093	to
O	67094	67098	your
O	67099	67107	manifest
O	67108	67114	either
O	67114	67115	:
O	67116	67117	<
O	67117	67121	uses
O	67121	67122	-
O	67122	67132	permission
O	67133	67140	android
O	67140	67141	:
O	67141	67145	name
O	67145	67146	=
O	67146	67159	StringLiteral
O	67159	67160	/
O	67160	67161	>
O	67162	67164	or
O	67165	67166	<
O	67166	67170	uses
O	67170	67171	-
O	67171	67181	permission
O	67182	67189	android
O	67189	67190	:
O	67190	67194	name
O	67194	67195	=
O	67195	67208	StringLiteral
O	67208	67209	/
O	67209	67210	>
O	67211	67216	Write
O	67217	67227	permission
O	67228	67235	implies
O	67236	67240	read
O	67241	67251	permission
O	67251	67252	,
O	67253	67255	so
O	67256	67259	you
O	67260	67263	don
O	67263	67264	'
O	67264	67265	t
O	67266	67270	need
O	67271	67275	both
O	67275	67276	.

O	67278	67286	Question
O	67286	67287	-
O	67287	67295	16324831
O	67295	67296	,
O	67297	67303	answer
O	67303	67304	-
O	67304	67312	16324963

O	67313	67317	Note
O	67317	67318	:
O	67319	67329	everything
O	67330	67332	in
O	67333	67337	this
O	67338	67342	post
O	67343	67345	is
O	67346	67348	in
O	67349	67352	the
O	67353	67359	source
O	67360	67362	of
O	67363	67368	Java7
O	67368	67369	-
O	67369	67373	b147
B-api_mention	67374	67380	Double
I-api_mention	67380	67381	.
I-api_mention	67381	67392	parseDouble
I-api_mention	67392	67393	(
I-api_mention	67393	67397	args
I-api_mention	67397	67398	)
O	67399	67403	goes
O	67404	67408	into
O	67409	67410	a
O	67411	67414	Sun
O	67415	67422	library
O	67423	67424	(
O	67424	67426	in
B-api_mention	67427	67430	sun
I-api_mention	67430	67431	.
I-api_mention	67431	67435	misc
I-api_mention	67435	67436	.
I-api_mention	67436	67451	FloatingDecimal
O	67452	67453	)
O	67454	67457	the
O	67458	67463	first
O	67464	67473	important
O	67474	67479	thing
O	67480	67484	that
O	67485	67492	happens
O	67493	67495	is
O	67495	67496	:
O	67497	67498	#
O	67498	67501	pre
B-api_mention	67502	67509	Integer
I-api_mention	67509	67510	.
I-api_mention	67510	67518	parseInt
I-api_mention	67518	67519	(
I-api_mention	67519	67523	args
I-api_mention	67523	67524	)
O	67525	67527	is
O	67528	67532	done
O	67533	67541	manually
O	67542	67544	in
O	67545	67548	the
B-api_mention	67549	67556	Integer
O	67557	67562	class
O	67562	67563	.

O	67564	67567	The
O	67568	67573	first
O	67574	67583	important
O	67584	67589	thing
O	67590	67594	that
O	67595	67602	happens
O	67603	67605	is
O	67605	67606	:
O	67607	67608	#
O	67608	67611	pre
O	67612	67613	I
O	67614	67619	would
O	67620	67625	guess
O	67626	67631	there
O	67632	67635	are
O	67636	67639	two
O	67640	67649	different
O	67650	67657	authors
O	67657	67658	.

O	67660	67668	Question
O	67668	67669	-
O	67669	67677	14316487
O	67677	67678	,
O	67679	67685	answer
O	67685	67686	-
O	67686	67694	14316543

O	67695	67696	A
O	67697	67701	very
O	67702	67708	simple
O	67709	67723	implementation
O	67724	67728	with
B-api_mention	67729	67735	String
I-api_mention	67735	67736	.
I-api_mention	67736	67741	split
I-api_mention	67741	67742	(
I-api_mention	67742	67743	)
O	67744	67745	:
O	67746	67747	#
O	67747	67750	pre

O	67752	67760	Question
O	67760	67761	-
O	67761	67769	16148575
O	67769	67770	,
O	67771	67777	answer
O	67777	67778	-
O	67778	67786	16148593

O	67787	67790	Use
B-api_mention	67791	67798	Integer
O	67799	67806	instead
O	67806	67807	.

B-api_mention	67808	67815	HashMap
I-api_mention	67815	67816	<
I-api_mention	67816	67817	T
I-api_mention	67817	67818	>
O	67819	67824	myMap
O	67825	67826	=
O	67827	67830	new
B-api_mention	67831	67838	HashMap
I-api_mention	67838	67839	<
I-api_mention	67839	67840	T
I-api_mention	67840	67841	>
I-api_mention	67841	67842	(
I-api_mention	67842	67846	args
I-api_mention	67846	67847	)
O	67847	67848	;
O	67849	67853	Java
O	67854	67858	will
O	67859	67872	automatically
O	67873	67880	autobox
O	67881	67885	your
O	67886	67889	int
O	67890	67899	primitive
O	67900	67906	values
O	67907	67909	to
B-api_mention	67910	67917	Integer
O	67918	67925	objects
O	67925	67926	.

O	67927	67931	Read
O	67932	67936	more
O	67937	67942	about
O	67943	67953	autoboxing
O	67954	67958	from
O	67959	67965	Oracle
O	67966	67970	Java
O	67971	67985	documentations
O	67985	67986	.

O	67988	67996	Question
O	67996	67997	-
O	67997	68005	16148575
O	68005	68006	,
O	68007	68013	answer
O	68013	68014	-
O	68014	68022	16148619

O	68023	68026	use
O	68027	68030	int
O	68031	68033	as
B-api_mention	68034	68040	Object
O	68041	68044	not
O	68045	68047	as
O	68048	68057	primitive
O	68058	68062	type
B-api_mention	68063	68070	HashMap
I-api_mention	68070	68071	<
I-api_mention	68071	68072	T
I-api_mention	68072	68073	>
O	68074	68079	myMap
O	68080	68081	=
O	68082	68085	new
B-api_mention	68086	68093	HashMap
I-api_mention	68093	68094	<
I-api_mention	68094	68095	T
I-api_mention	68095	68096	>
I-api_mention	68096	68097	(
I-api_mention	68097	68101	args
I-api_mention	68101	68102	)
O	68102	68103	;

O	68105	68113	Question
O	68113	68114	-
O	68114	68122	16148575
O	68122	68123	,
O	68124	68130	answer
O	68130	68131	-
O	68131	68139	16148647

O	68140	68146	Please
O	68147	68150	use
B-api_mention	68151	68158	HashMap
I-api_mention	68158	68159	<
I-api_mention	68159	68160	T
I-api_mention	68160	68161	>
O	68162	68167	myMap
O	68168	68169	=
O	68170	68173	new
B-api_mention	68174	68181	HashMap
I-api_mention	68181	68182	<
I-api_mention	68182	68183	T
I-api_mention	68183	68184	>
I-api_mention	68184	68185	(
I-api_mention	68185	68189	args
I-api_mention	68189	68190	)
O	68190	68191	;

O	68193	68201	Question
O	68201	68202	-
O	68202	68210	16148575
O	68210	68211	,
O	68212	68218	answer
O	68218	68219	-
O	68219	68227	16149127

O	68228	68231	You
O	68232	68235	can
O	68235	68236	'
O	68236	68237	t
O	68238	68241	use
O	68242	68243	a
O	68244	68253	primitive
O	68254	68261	because
B-api_mention	68262	68269	HashMap
O	68270	68273	use
O	68274	68280	object
O	68281	68291	internally
O	68292	68295	for
O	68296	68299	the
O	68300	68303	key
O	68303	68304	.

O	68305	68307	So
O	68308	68311	you
O	68312	68315	can
O	68316	68320	only
O	68321	68324	use
O	68325	68327	an
O	68328	68334	object
O	68335	68339	that
O	68340	68348	inherits
O	68349	68353	from
B-api_mention	68354	68360	Object
O	68361	68362	(
O	68362	68366	that
O	68367	68369	is
O	68370	68373	any
O	68374	68380	object
O	68380	68381	)
O	68381	68382	.

O	68383	68387	That
O	68388	68390	is
O	68391	68394	the
O	68395	68403	function
B-api_mention	68404	68407	put
I-api_mention	68407	68408	(
I-api_mention	68408	68409	)
O	68410	68412	in
B-api_mention	68413	68420	HashMap
O	68421	68424	and
O	68425	68427	as
O	68428	68431	you
O	68432	68435	can
O	68436	68439	see
O	68440	68442	it
O	68443	68447	uses
B-api_mention	68448	68454	Object
O	68455	68458	for
O	68459	68460	K
O	68460	68461	:
O	68462	68463	#
O	68463	68466	pre
O	68467	68470	The
O	68471	68481	expression
O	68482	68483	"
O	68483	68484	k
O	68485	68486	=
O	68487	68488	e
O	68488	68489	.
O	68489	68492	key
O	68492	68493	"
O	68494	68500	should
O	68501	68505	make
O	68506	68508	it
O	68509	68514	clear
O	68514	68515	.

O	68516	68517	I
O	68518	68525	suggest
O	68526	68528	to
O	68529	68532	use
O	68533	68534	a
O	68535	68542	wrapper
O	68543	68547	like
B-api_mention	68548	68555	Integer
O	68556	68559	and
O	68560	68570	autoboxing
O	68570	68571	.

O	68573	68581	Question
O	68581	68582	-
O	68582	68590	16148575
O	68590	68591	,
O	68592	68598	answer
O	68598	68599	-
O	68599	68607	16149160

B-api_mention	68608	68615	HashMap
O	68616	68620	does
O	68621	68624	not
O	68625	68630	allow
O	68631	68640	primitive
O	68641	68645	data
O	68646	68651	types
O	68652	68654	as
O	68655	68664	arguments
O	68664	68665	.

O	68666	68668	It
O	68669	68672	can
O	68673	68677	only
O	68678	68684	accept
O	68685	68692	objects
O	68693	68695	so
B-api_mention	68696	68703	HashMap
I-api_mention	68703	68704	<
I-api_mention	68704	68705	T
I-api_mention	68705	68706	>
O	68707	68712	myMap
O	68713	68714	=
O	68715	68718	new
B-api_mention	68719	68726	HashMap
I-api_mention	68726	68727	<
I-api_mention	68727	68728	T
I-api_mention	68728	68729	>
I-api_mention	68729	68730	(
I-api_mention	68730	68734	args
I-api_mention	68734	68735	)
O	68735	68736	;
O	68737	68741	will
O	68742	68745	not
O	68746	68750	work
O	68750	68751	.

O	68752	68755	You
O	68756	68760	have
O	68761	68763	to
O	68764	68770	change
O	68771	68774	the
O	68775	68786	declaration
O	68787	68789	to
B-api_mention	68790	68797	HashMap
I-api_mention	68797	68798	<
I-api_mention	68798	68799	T
I-api_mention	68799	68800	>
O	68801	68806	myMap
O	68807	68808	=
O	68809	68812	new
B-api_mention	68813	68820	HashMap
I-api_mention	68820	68821	<
I-api_mention	68821	68822	T
I-api_mention	68822	68823	>
I-api_mention	68823	68824	(
I-api_mention	68824	68828	args
I-api_mention	68828	68829	)
O	68829	68830	;
O	68831	68833	so
O	68834	68838	even
O	68839	68843	when
O	68844	68847	you
O	68848	68850	do
O	68851	68854	the
O	68855	68864	following
O	68865	68870	myMap
B-api_mention	68870	68871	.
I-api_mention	68871	68874	put
I-api_mention	68874	68875	(
I-api_mention	68875	68879	args
I-api_mention	68879	68880	)
O	68880	68881	;
O	68882	68885	The
O	68886	68895	primitive
O	68896	68900	data
O	68901	68905	type
O	68906	68908	is
O	68909	68918	autoboxed
O	68919	68921	to
O	68922	68924	an
O	68925	68932	Integer
O	68933	68939	object
O	68939	68940	.

O	68941	68942	8
O	68942	68943	(
O	68943	68947	args
O	68947	68948	)
O	68949	68950	=
O	68950	68951	=
O	68951	68952	=
O	68953	68959	boxing
O	68960	68961	=
O	68961	68962	=
O	68962	68963	=
O	68963	68964	>
O	68965	68966	8
O	68966	68967	(
O	68967	68971	args
O	68971	68972	)
O	68973	68976	You
O	68977	68980	can
O	68981	68985	read
O	68986	68990	more
O	68991	68993	on
O	68994	69004	autoboxing
O	69005	69009	here
O	69010	69011	#
O	69011	69012	a

O	69014	69022	Question
O	69022	69023	-
O	69023	69031	16148575
O	69031	69032	,
O	69033	69039	answer
O	69039	69040	-
O	69040	69048	18481387

O	69049	69051	If
O	69052	69055	you
O	69056	69060	code
O	69061	69063	in
O	69064	69071	Android
O	69071	69072	,
O	69073	69078	there
O	69079	69081	is
B-api_mention	69082	69093	SparseArray
O	69094	69095	,
O	69096	69103	mapping
O	69104	69111	integer
O	69112	69114	to
O	69115	69121	object
O	69121	69122	.

O	69124	69132	Question
O	69132	69133	-
O	69133	69141	16148575
O	69141	69142	,
O	69143	69149	answer
O	69149	69150	-
O	69150	69158	20454885

O	69159	69162	For
O	69163	69172	everybody
O	69173	69176	who
O	69177	69182	codes
O	69183	69187	Java
O	69188	69191	for
O	69192	69199	Android
O	69200	69207	devices
O	69208	69211	and
O	69212	69216	ends
O	69217	69219	up
O	69220	69224	here
O	69224	69225	:
O	69226	69229	use
B-api_mention	69230	69241	SparseArray
O	69242	69245	for
O	69246	69252	better
O	69253	69264	performance
O	69265	69272	private
O	69273	69278	final
B-api_mention	69279	69290	SparseArray
I-api_mention	69290	69291	<
I-api_mention	69291	69292	T
I-api_mention	69292	69293	>
O	69294	69299	myMap
O	69300	69301	=
O	69302	69305	new
B-api_mention	69306	69317	SparseArray
I-api_mention	69317	69318	<
I-api_mention	69318	69319	T
I-api_mention	69319	69320	>
I-api_mention	69320	69321	(
I-api_mention	69321	69325	args
I-api_mention	69325	69326	)
O	69326	69327	;
O	69328	69332	with
O	69333	69337	this
O	69338	69341	you
O	69342	69345	can
O	69346	69349	use
O	69350	69353	int
O	69354	69361	instead
O	69362	69364	of
B-api_mention	69365	69372	Integer
O	69373	69377	like
O	69378	69379	#
O	69379	69382	pre

O	69384	69392	Question
O	69392	69393	-
O	69393	69401	16148575
O	69401	69402	,
O	69403	69409	answer
O	69409	69410	-
O	69410	69418	32866218

O	69419	69422	The
O	69423	69427	main
O	69428	69434	reason
O	69435	69439	with
B-api_mention	69440	69447	HashMap
O	69448	69451	not
O	69452	69460	allowing
O	69461	69470	primitive
O	69471	69473	as
O	69474	69478	keys
O	69479	69481	is
O	69482	69486	that
B-api_mention	69487	69494	HashMap
O	69495	69497	is
O	69498	69506	designed
O	69507	69509	in
O	69510	69514	such
O	69515	69516	a
O	69517	69520	way
O	69521	69525	that
O	69526	69529	for
O	69530	69539	comparing
O	69540	69543	the
O	69544	69548	keys
O	69548	69549	,
O	69550	69552	it
O	69553	69558	makes
O	69559	69562	use
O	69563	69565	of
B-api_mention	69566	69572	equals
I-api_mention	69572	69573	(
I-api_mention	69573	69574	)
O	69575	69581	method
O	69581	69582	,
O	69583	69586	and
O	69587	69588	a
O	69589	69595	method
O	69596	69599	can
O	69600	69602	be
O	69603	69609	called
O	69610	69614	only
O	69615	69617	on
O	69618	69620	an
O	69621	69627	object
O	69628	69631	not
O	69632	69634	on
O	69635	69636	a
O	69637	69646	primitive
O	69646	69647	.

O	69648	69652	Thus
O	69653	69657	when
O	69658	69661	int
O	69662	69664	is
O	69665	69674	autoboxed
O	69675	69677	to
B-api_mention	69678	69685	Integer
O	69685	69686	,
O	69687	69694	Hashmap
O	69695	69698	can
O	69699	69703	call
B-api_mention	69704	69710	equals
I-api_mention	69710	69711	(
I-api_mention	69711	69712	)
O	69713	69719	method
O	69720	69722	on
B-api_mention	69723	69730	Integer
O	69731	69737	object
O	69737	69738	.

O	69739	69743	That
O	69744	69746	is
O	69747	69750	why
O	69750	69751	,
O	69752	69755	you
O	69756	69762	should
O	69763	69766	use
B-api_mention	69767	69774	Integer
O	69775	69782	instead
O	69783	69785	of
O	69786	69789	int
O	69789	69790	.

O	69791	69792	I
O	69793	69797	mean
O	69798	69805	hashmap
O	69806	69812	throws
O	69813	69815	an
O	69816	69821	error
O	69822	69827	while
O	69828	69835	putting
O	69836	69839	int
O	69840	69842	as
O	69843	69844	a
O	69845	69848	key
O	69849	69850	(
O	69850	69853	Don
O	69853	69854	'
O	69854	69855	t
O	69856	69860	know
O	69861	69864	the
O	69865	69872	meaning
O	69873	69875	of
O	69876	69879	the
O	69880	69885	error
O	69886	69890	that
O	69891	69893	is
O	69894	69900	thrown
O	69900	69901	)
O	69902	69905	And
O	69906	69908	if
O	69909	69912	you
O	69913	69918	think
O	69919	69923	that
O	69923	69924	,
O	69925	69928	you
O	69929	69932	can
O	69933	69937	make
B-api_mention	69938	69941	Map
O	69942	69953	performance
O	69954	69960	faster
O	69961	69963	by
O	69964	69970	making
O	69971	69972	a
O	69973	69982	primitive
O	69983	69985	as
O	69986	69987	a
O	69988	69991	key
O	69991	69992	,
O	69993	69998	there
O	69999	70001	is
O	70002	70003	a
O	70004	70011	library
O	70012	70018	called
B-api_mention	70019	70027	FastUtil
O	70028	70033	which
O	70034	70042	contains
O	70043	70044	a
B-api_mention	70045	70048	Map
O	70049	70063	implementation
O	70064	70068	with
O	70069	70072	int
O	70073	70077	type
O	70078	70080	as
O	70081	70082	a
O	70083	70086	key
O	70086	70087	.

O	70088	70095	Because
O	70096	70098	of
O	70099	70103	this
O	70103	70104	,
O	70105	70107	it
O	70108	70110	is
O	70111	70115	much
O	70116	70122	faster
O	70123	70127	than
B-api_mention	70128	70135	Hashmap
