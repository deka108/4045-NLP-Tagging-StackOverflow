O	0	8	Question
O	8	9	-
O	9	17	18410035

O	18	23	Being
O	24	32	somewhat
O	33	36	new
O	37	39	to
O	40	43	the
O	44	48	Java
O	49	57	language
O	58	59	I
O	59	60	'
O	60	61	m
O	62	68	trying
O	69	71	to
O	72	83	familiarize
O	84	90	myself
O	91	95	with
O	96	99	all
O	100	103	the
O	104	108	ways
O	109	110	(
O	110	112	or
O	113	115	at
O	116	121	least
O	122	125	the
O	126	129	non
O	129	130	-
O	130	142	pathological
O	143	147	ones
O	147	148	)
O	149	153	that
O	154	157	one
O	158	163	might
O	164	171	iterate
O	172	179	through
O	180	181	a
O	182	186	list
O	187	188	(
O	188	190	or
O	191	198	perhaps
O	199	204	other
O	205	216	collections
O	216	217	)
O	218	221	and
O	222	225	the
O	226	236	advantages
O	237	239	or
O	240	253	disadvantages
O	254	256	of
O	257	261	each
O	261	262	.

O	263	268	Given
O	269	270	a
B-api_mention	271	275	List
I-api_mention	275	276	<
I-api_mention	276	277	T
I-api_mention	277	278	>
O	279	283	list
O	284	290	object
O	290	291	,
O	292	293	I
O	294	298	know
O	299	301	of
O	302	305	the
O	306	315	following
O	316	320	ways
O	321	323	to
O	324	328	loop
O	329	336	through
O	337	340	all
O	341	349	elements
O	349	350	:
O	351	356	Basic
O	357	360	for
O	361	365	loop
O	366	367	(
O	367	369	of
O	370	376	course
O	376	377	,
O	378	383	there
O	383	384	'
O	384	386	re
O	387	397	equivalent
O	398	403	while
O	404	405	/
O	406	408	do
O	409	414	while
O	415	420	loops
O	421	423	as
O	424	428	well
O	428	429	)
O	430	431	#
O	431	434	pre
O	435	439	Note
O	439	440	:
O	441	443	As
O	444	445	@
O	445	456	amarseillan
O	457	464	pointed
O	465	468	out
O	468	469	,
O	470	474	this
O	475	479	form
O	480	482	is
O	483	484	a
O	485	489	poor
O	490	496	choice
O	497	500	for
O	501	510	iterating
O	511	515	over
B-api_mention	516	520	List
O	521	522	s
O	523	530	because
O	531	534	the
O	535	541	actual
O	542	556	implementation
O	557	559	of
O	560	563	the
O	564	567	get
O	568	574	method
O	575	578	may
O	579	582	not
O	583	585	be
O	586	588	as
O	589	598	efficient
O	599	601	as
O	602	606	when
O	607	612	using
O	613	615	an
B-api_mention	616	624	Iterator
O	625	626	.

O	627	630	For
O	631	638	example
O	638	639	,
B-api_mention	640	650	LinkedList
O	651	666	implementations
O	667	671	must
O	672	680	traverse
O	681	684	all
O	685	687	of
O	688	691	the
O	692	700	elements
O	701	710	preceding
O	711	712	i
O	713	715	to
O	716	719	get
O	720	723	the
O	724	725	i
O	725	726	-
O	726	728	th
O	729	736	element
O	736	737	.

O	738	740	In
O	741	744	the
O	745	750	above
O	751	758	example
O	759	764	there
O	764	765	'
O	765	766	s
O	767	769	no
O	770	773	way
O	774	777	for
O	778	781	the
B-api_mention	782	786	List
O	787	801	implementation
O	802	804	to
O	805	806	"
O	806	810	save
O	811	814	its
O	815	820	place
O	820	821	"
O	822	824	to
O	825	829	make
O	830	836	future
O	837	847	iterations
O	848	852	more
O	853	862	efficient
O	862	863	.

O	864	867	For
O	868	870	an
B-api_mention	871	880	ArrayList
O	881	883	it
O	884	889	doesn
O	889	890	'
O	890	891	t
O	892	898	really
O	899	905	matter
O	906	913	because
O	914	917	the
O	918	928	complexity
O	928	929	/
O	929	933	cost
O	934	936	of
O	937	940	get
O	941	943	is
O	944	952	constant
O	953	957	time
O	958	959	(
O	959	960	O
O	960	961	(
O	961	962	1
O	962	963	)
O	963	964	)
O	965	972	whereas
O	973	976	for
O	977	978	a
B-api_mention	979	989	LinkedList
O	990	992	is
O	993	995	it
O	996	1008	proportional
O	1009	1011	to
O	1012	1015	the
O	1016	1020	size
O	1021	1023	of
O	1024	1027	the
O	1028	1032	list
O	1033	1034	(
O	1034	1035	O
O	1035	1036	(
O	1036	1037	n
O	1037	1038	)
O	1038	1039	)
O	1039	1040	.

O	1041	1044	For
O	1045	1049	more
O	1050	1061	information
O	1062	1067	about
O	1068	1071	the
O	1072	1085	computational
O	1086	1096	complexity
O	1097	1099	of
O	1100	1103	the
O	1104	1109	built
O	1109	1110	-
O	1110	1112	in
B-api_mention	1113	1124	Collections
O	1125	1140	implementations
O	1140	1141	,
O	1142	1147	check
O	1148	1151	out
O	1152	1156	this
O	1157	1165	question
O	1166	1167	.

O	1168	1176	Enhanced
O	1177	1180	for
O	1181	1185	loop
O	1186	1187	(
O	1187	1193	nicely
O	1194	1203	explained
O	1204	1206	in
O	1207	1211	this
O	1212	1220	question
O	1221	1222	)
O	1223	1224	#
O	1224	1227	pre
B-api_mention	1228	1236	Iterator
O	1237	1238	#
O	1238	1241	pre
O	1242	1246	EDIT
O	1246	1247	:
O	1248	1253	Added
B-api_mention	1254	1266	ListIterator
I-api_mention	1267	1279	ListIterator
O	1280	1281	#
O	1281	1284	pre
O	1285	1289	EDIT
O	1289	1290	:
O	1291	1296	Added
O	1297	1298	"
O	1298	1308	functional
O	1308	1309	-
O	1309	1314	style
O	1314	1315	"
O	1316	1324	solution
O	1325	1326	(
O	1326	1332	thanks
O	1333	1337	Dave
O	1338	1344	Newton
O	1344	1345	)
O	1346	1356	Functional
O	1357	1361	Java
O	1362	1366	list
B-api_mention	1366	1367	.
I-api_mention	1367	1373	stream
I-api_mention	1373	1374	(
I-api_mention	1374	1378	args
I-api_mention	1378	1379	)
I-api_mention	1379	1380	.
I-api_mention	1380	1383	map
I-api_mention	1383	1384	(
I-api_mention	1384	1388	args
I-api_mention	1388	1389	)
O	1389	1390	;
O	1391	1392	/
O	1392	1393	/
O	1394	1397	can
O	1398	1403	apply
O	1404	1405	a
O	1406	1420	transformation
O	1421	1429	function
O	1430	1433	for
O	1434	1435	e
O	1436	1440	EDIT
O	1440	1441	:
O	1442	1447	Added
O	1448	1451	map
O	1452	1458	method
O	1459	1463	from
O	1464	1468	Java
O	1469	1470	8
O	1470	1471	'
O	1471	1472	s
O	1473	1479	Stream
O	1480	1483	API
O	1484	1485	(
O	1485	1488	see
O	1489	1490	@
O	1490	1491	i
O	1491	1492	_
O	1492	1494	am
O	1494	1495	_
O	1495	1499	zero
O	1499	1500	'
O	1500	1501	s
O	1502	1508	answer
O	1508	1509	)
B-api_mention	1510	1518	Iterable
I-api_mention	1518	1519	.
I-api_mention	1519	1526	forEach
O	1527	1528	,
B-api_mention	1529	1535	Stream
I-api_mention	1535	1536	.
I-api_mention	1536	1543	forEach
O	1544	1545	,
O	1546	1547	.
O	1547	1548	.
O	1548	1549	.

O	1550	1552	In
O	1553	1557	Java
O	1558	1559	8
O	1560	1570	collection
O	1571	1578	classes
O	1579	1583	that
O	1584	1593	implement
B-api_mention	1594	1602	Iterable
O	1603	1604	(
O	1604	1607	for
O	1608	1615	example
O	1616	1619	all
B-api_mention	1620	1624	List
O	1625	1626	s
O	1626	1627	)
O	1628	1631	now
O	1632	1636	have
O	1637	1638	a
B-api_mention	1639	1646	forEach
O	1647	1653	method
O	1653	1654	,
O	1655	1660	which
O	1661	1664	can
O	1665	1667	be
O	1668	1672	used
O	1673	1680	instead
O	1681	1683	of
O	1684	1687	the
O	1688	1691	for
O	1692	1696	loop
O	1697	1706	statement
O	1707	1719	demonstrated
O	1720	1725	above
O	1725	1726	.

O	1727	1728	(
O	1728	1732	Here
O	1733	1735	is
O	1736	1743	another
O	1744	1752	question
O	1753	1757	that
O	1758	1766	provides
O	1767	1768	a
O	1769	1773	good
O	1774	1784	comparison
O	1784	1785	.
O	1785	1786	)
O	1787	1788	#
O	1788	1791	pre
O	1792	1796	What
O	1797	1802	other
O	1803	1807	ways
O	1808	1811	are
O	1812	1817	there
O	1817	1818	,
O	1819	1821	if
O	1822	1825	any
O	1825	1826	?

O	1827	1828	I
O	1829	1833	feel
O	1834	1838	like
O	1839	1843	this
O	1844	1847	has
O	1848	1851	got
O	1852	1854	to
O	1855	1857	be
O	1858	1859	a
O	1860	1869	duplicate
O	1869	1870	,
O	1871	1874	but
O	1875	1876	I
O	1877	1882	haven
O	1882	1883	'
O	1883	1884	t
O	1885	1889	been
O	1890	1894	able
O	1895	1897	to
O	1898	1902	find
O	1903	1907	what
O	1908	1909	I
O	1909	1910	'
O	1910	1911	m
O	1912	1919	looking
O	1920	1923	for
O	1923	1924	,
O	1925	1927	so
O	1928	1929	I
O	1930	1939	apologize
O	1940	1943	for
O	1944	1948	this
O	1949	1957	question
O	1958	1969	potentially
O	1970	1975	being
O	1976	1985	redundant
O	1985	1986	.

O	1987	1988	(
O	1988	1991	BTW
O	1991	1992	,
O	1993	1995	my
O	1996	2004	interest
O	2005	2009	does
O	2010	2013	not
O	2014	2018	stem
O	2019	2021	at
O	2022	2025	all
O	2026	2030	from
O	2031	2032	a
O	2033	2039	desire
O	2040	2042	to
O	2043	2051	optimize
O	2052	2063	performance
O	2064	2065	;
O	2066	2067	I
O	2068	2072	just
O	2073	2077	want
O	2078	2080	to
O	2081	2085	know
O	2086	2090	what
O	2091	2096	forms
O	2097	2100	are
O	2101	2110	available
O	2111	2113	to
O	2114	2116	me
O	2117	2119	as
O	2120	2121	a
O	2122	2131	developer
O	2131	2132	.
O	2132	2133	)
O	2134	2138	EDIT
O	2138	2139	:
O	2140	2145	Moved
O	2146	2166	ListIterationExample
O	2166	2167	.
O	2167	2171	java
O	2172	2174	to
O	2175	2176	a
O	2177	2186	suggested
O	2187	2193	answer

O	2195	2203	Question
O	2203	2204	-
O	2204	2212	19431234

O	2213	2217	Java
O	2218	2219	8
O	2220	2223	has
O	2224	2225	a
O	2226	2236	completely
O	2237	2240	new
O	2241	2244	API
O	2245	2248	for
O	2249	2253	date
O	2254	2257	and
O	2258	2262	time
O	2262	2263	.

O	2264	2267	One
O	2268	2270	of
O	2271	2274	the
O	2275	2279	most
O	2280	2286	useful
O	2287	2294	classes
O	2295	2297	in
O	2298	2302	this
O	2303	2306	API
O	2307	2309	is
B-api_mention	2310	2323	LocalDateTime
O	2324	2325	,
O	2326	2329	for
O	2330	2337	holding
O	2338	2339	a
O	2340	2348	timezone
O	2348	2349	-
O	2349	2360	independent
O	2361	2365	date
O	2365	2366	-
O	2366	2370	with
O	2370	2371	-
O	2371	2375	time
O	2376	2381	value
O	2381	2382	.

O	2383	2388	There
O	2389	2392	are
O	2393	2401	probably
O	2402	2410	millions
O	2411	2413	of
O	2414	2419	lines
O	2420	2422	of
O	2423	2427	code
O	2428	2433	using
O	2434	2437	the
O	2438	2444	legacy
O	2445	2450	class
B-api_mention	2451	2455	java
I-api_mention	2455	2456	.
I-api_mention	2456	2460	util
I-api_mention	2460	2461	.
I-api_mention	2461	2465	Date
O	2466	2469	for
O	2470	2474	this
O	2475	2482	purpose
O	2482	2483	.

O	2484	2486	As
O	2487	2491	such
O	2491	2492	,
O	2493	2497	when
O	2498	2509	interfacing
O	2510	2513	old
O	2514	2517	and
O	2518	2521	new
O	2522	2526	code
O	2527	2532	there
O	2533	2537	will
O	2538	2540	be
O	2541	2542	a
O	2543	2547	need
O	2548	2551	for
O	2552	2562	converting
O	2563	2570	between
O	2571	2574	the
O	2575	2578	two
O	2578	2579	.

O	2580	2582	As
O	2583	2588	there
O	2589	2594	seems
O	2595	2597	to
O	2598	2600	be
O	2601	2603	no
O	2604	2610	direct
O	2611	2618	methods
O	2619	2622	for
O	2623	2636	accomplishing
O	2637	2641	this
O	2641	2642	,
O	2643	2646	how
O	2647	2650	can
O	2651	2653	it
O	2654	2656	be
O	2657	2661	done
O	2661	2662	?

O	2664	2672	Question
O	2672	2673	-
O	2673	2681	20129762

O	2682	2684	In
O	2685	2689	Java
O	2690	2691	8
O	2692	2694	we
O	2695	2699	have
O	2700	2703	the
O	2704	2709	class
B-api_mention	2710	2716	Stream
I-api_mention	2716	2717	<
I-api_mention	2717	2718	T
I-api_mention	2718	2719	>
O	2720	2721	,
O	2722	2727	which
O	2728	2737	curiously
O	2738	2742	have
O	2743	2744	a
O	2745	2751	method
B-api_mention	2752	2760	Iterator
I-api_mention	2760	2761	<
I-api_mention	2761	2762	T
I-api_mention	2762	2763	>
O	2764	2772	iterator
O	2772	2773	(
O	2773	2777	args
O	2777	2778	)
O	2779	2781	So
O	2782	2785	you
O	2786	2791	would
O	2792	2798	expect
O	2799	2801	it
O	2802	2804	to
O	2805	2814	implement
O	2815	2824	interface
B-api_mention	2825	2833	Iterable
I-api_mention	2833	2834	<
I-api_mention	2834	2835	T
I-api_mention	2835	2836	>
O	2837	2838	,
O	2839	2844	which
O	2845	2853	requires
O	2854	2861	exactly
O	2862	2866	this
O	2867	2873	method
O	2873	2874	,
O	2875	2878	but
O	2879	2883	that
O	2883	2884	'
O	2884	2885	s
O	2886	2889	not
O	2890	2893	the
O	2894	2898	case
O	2898	2899	.

O	2900	2904	When
O	2905	2906	I
O	2907	2911	want
O	2912	2914	to
O	2915	2922	iterate
O	2923	2927	over
O	2928	2929	a
B-api_mention	2930	2936	Stream
O	2937	2942	using
O	2943	2944	a
O	2945	2952	foreach
O	2953	2957	loop
O	2957	2958	,
O	2959	2960	I
O	2961	2965	have
O	2966	2968	to
O	2969	2971	do
O	2972	2981	something
O	2982	2986	like
O	2987	2988	#
O	2988	2991	pre
O	2992	2994	Am
O	2995	2996	I
O	2997	3004	missing
O	3005	3014	something
O	3015	3019	here
O	3019	3020	?

O	3022	3030	Question
O	3030	3031	-
O	3031	3039	17828584

O	3040	3041	I
O	3042	3045	was
O	3046	3055	wondering
O	3056	3060	what
O	3061	3068	happens
O	3069	3073	when
O	3074	3077	you
O	3078	3081	try
O	3082	3084	to
O	3085	3090	catch
O	3091	3093	an
B-api_mention	3094	3112	StackOverflowError
O	3113	3116	and
O	3117	3121	came
O	3122	3124	up
O	3125	3129	with
O	3130	3133	the
O	3134	3143	following
O	3144	3150	method
O	3150	3151	:
O	3152	3153	#
O	3153	3156	pre
O	3157	3160	Now
O	3161	3163	my
O	3164	3172	question
O	3172	3173	:
O	3174	3177	Why
O	3178	3182	does
O	3183	3187	this
O	3188	3194	method
O	3195	3200	print
O	3201	3202	'
O	3202	3203	4
O	3203	3204	'
O	3204	3205	?

O	3206	3207	I
O	3208	3215	thought
O	3216	3221	maybe
O	3222	3224	it
O	3225	3228	was
O	3229	3236	because
B-api_mention	3237	3243	System
I-api_mention	3243	3244	.
I-api_mention	3244	3247	out
I-api_mention	3247	3248	.
I-api_mention	3248	3255	println
I-api_mention	3255	3256	(
I-api_mention	3256	3260	args
I-api_mention	3260	3261	)
O	3262	3267	needs
O	3268	3269	3
O	3270	3278	segments
O	3279	3281	on
O	3282	3285	the
O	3286	3290	call
O	3291	3296	stack
O	3296	3297	,
O	3298	3301	but
O	3302	3303	I
O	3304	3307	don
O	3307	3308	'
O	3308	3309	t
O	3310	3314	know
O	3315	3320	where
O	3321	3324	the
O	3325	3331	number
O	3332	3333	3
O	3334	3339	comes
O	3340	3344	from
O	3344	3345	.

O	3346	3350	When
O	3351	3354	you
O	3355	3359	look
O	3360	3362	at
O	3363	3366	the
O	3367	3373	source
O	3374	3378	code
O	3379	3380	(
O	3380	3383	and
O	3384	3392	bytecode
O	3392	3393	)
O	3394	3396	of
B-api_mention	3397	3403	System
I-api_mention	3403	3404	.
I-api_mention	3404	3407	out
I-api_mention	3407	3408	.
I-api_mention	3408	3415	println
I-api_mention	3415	3416	(
I-api_mention	3416	3420	args
I-api_mention	3420	3421	)
O	3422	3423	,
O	3424	3426	it
O	3427	3435	normally
O	3436	3441	would
O	3442	3446	lead
O	3447	3449	to
O	3450	3453	far
O	3454	3458	more
O	3459	3465	method
O	3466	3477	invocations
O	3478	3482	than
O	3483	3484	3
O	3485	3486	(
O	3486	3488	so
O	3489	3490	3
O	3491	3499	segments
O	3500	3502	on
O	3503	3506	the
O	3507	3511	call
O	3512	3517	stack
O	3518	3523	would
O	3524	3527	not
O	3528	3530	be
O	3531	3541	sufficient
O	3541	3542	)
O	3542	3543	.

O	3544	3546	If
O	3547	3549	it
O	3549	3550	'
O	3550	3551	s
O	3552	3559	because
O	3560	3562	of
O	3563	3576	optimizations
O	3577	3580	the
O	3581	3588	Hotspot
O	3589	3591	VM
O	3592	3599	applies
O	3600	3601	(
O	3601	3607	method
O	3608	3616	inlining
O	3616	3617	)
O	3617	3618	,
O	3619	3620	I
O	3621	3627	wonder
O	3628	3630	if
O	3631	3634	the
O	3635	3641	result
O	3642	3647	would
O	3648	3650	be
O	3651	3660	different
O	3661	3663	on
O	3664	3671	another
O	3672	3674	VM
O	3674	3675	.

O	3676	3680	Edit
O	3681	3682	:
O	3683	3685	As
O	3686	3689	the
O	3690	3696	output
O	3697	3702	seems
O	3703	3705	to
O	3706	3708	be
O	3709	3715	highly
O	3716	3719	JVM
O	3720	3728	specific
O	3728	3729	,
O	3730	3731	I
O	3732	3735	get
O	3736	3739	the
O	3740	3746	result
O	3747	3748	4
O	3749	3754	using
O	3755	3759	Java
O	3759	3760	(
O	3760	3762	TM
O	3762	3763	)
O	3764	3766	SE
O	3767	3774	Runtime
O	3775	3786	Environment
O	3787	3788	(
O	3788	3793	build
O	3794	3795	1
O	3795	3796	.
O	3796	3797	6
O	3797	3798	.
O	3798	3799	0
O	3799	3800	_
O	3800	3802	41
O	3802	3803	-
O	3803	3806	b02
O	3806	3807	)
O	3808	3812	Java
O	3813	3820	HotSpot
O	3820	3821	(
O	3821	3823	TM
O	3823	3824	)
O	3825	3827	64
O	3827	3828	-
O	3828	3831	Bit
O	3832	3838	Server
O	3839	3841	VM
O	3842	3843	(
O	3843	3848	build
O	3849	3851	20
O	3851	3852	.
O	3852	3854	14
O	3854	3855	-
O	3855	3858	b01
O	3858	3859	,
O	3860	3865	mixed
O	3866	3870	mode
O	3870	3871	)
O	3872	3883	Explanation
O	3884	3887	why
O	3888	3889	I
O	3890	3895	think
O	3896	3900	this
O	3901	3909	question
O	3910	3912	is
O	3913	3922	different
O	3923	3927	from
O	3928	3941	Understanding
O	3942	3946	java
O	3947	3952	stack
O	3953	3954	:
O	3955	3957	My
O	3958	3966	question
O	3967	3969	is
O	3970	3973	not
O	3974	3979	about
O	3980	3983	why
O	3984	3989	there
O	3990	3992	is
O	3993	3994	a
O	3995	3998	cnt
O	3999	4000	>
O	4001	4002	0
O	4003	4004	(
O	4004	4013	obviously
O	4014	4021	because
B-api_mention	4022	4028	System
I-api_mention	4028	4029	.
I-api_mention	4029	4032	out
I-api_mention	4032	4033	.
I-api_mention	4033	4040	println
I-api_mention	4040	4041	(
I-api_mention	4041	4045	args
I-api_mention	4045	4046	)
O	4047	4055	requires
O	4056	4061	stack
O	4062	4066	size
O	4067	4070	and
O	4071	4077	throws
O	4078	4085	another
B-api_mention	4086	4104	StackOverflowError
O	4105	4111	before
O	4112	4121	something
O	4122	4126	gets
O	4127	4134	printed
O	4134	4135	)
O	4135	4136	,
O	4137	4140	but
O	4141	4144	why
O	4145	4147	it
O	4148	4151	has
O	4152	4155	the
O	4156	4166	particular
O	4167	4172	value
O	4173	4175	of
O	4176	4177	4
O	4177	4178	,
O	4179	4191	respectively
O	4192	4193	0
O	4193	4194	,
O	4194	4195	3
O	4195	4196	,
O	4196	4197	8
O	4197	4198	,
O	4198	4200	55
O	4201	4203	or
O	4204	4213	something
O	4214	4218	else
O	4219	4221	on
O	4222	4227	other
O	4228	4235	systems
O	4235	4236	.

O	4238	4246	Question
O	4246	4247	-
O	4247	4255	18092160

O	4256	4259	Why
O	4260	4264	were
O	4265	4283	181783497276652981
O	4284	4287	and
O	4288	4304	8682522807148012
O	4305	4311	chosen
O	4312	4314	in
O	4315	4321	Random
O	4321	4322	.
O	4322	4326	java
O	4327	4328	?

O	4329	4333	Here
O	4333	4334	'
O	4334	4335	s
O	4336	4339	the
O	4340	4348	relevant
O	4349	4355	source
O	4356	4360	code
O	4361	4365	from
O	4366	4370	Java
O	4371	4373	SE
O	4374	4377	JDK
O	4378	4379	1
O	4379	4380	.
O	4380	4381	7
O	4381	4382	:
O	4383	4384	#
O	4384	4387	pre
O	4388	4390	So
O	4390	4391	,
O	4392	4400	invoking
O	4401	4404	new
B-api_mention	4405	4411	Random
I-api_mention	4411	4412	(
I-api_mention	4412	4416	args
I-api_mention	4416	4417	)
O	4418	4425	without
O	4426	4429	any
O	4430	4434	seed
O	4435	4444	parameter
O	4445	4450	takes
O	4451	4454	the
O	4455	4462	current
O	4463	4464	"
O	4464	4468	seed
O	4469	4479	uniquifier
O	4479	4480	"
O	4481	4484	and
O	4485	4489	XORs
O	4490	4492	it
O	4493	4497	with
B-api_mention	4498	4504	System
I-api_mention	4504	4505	.
I-api_mention	4505	4513	nanoTime
I-api_mention	4513	4514	(
I-api_mention	4514	4518	args
I-api_mention	4518	4519	)
O	4520	4521	.

O	4522	4526	Then
O	4527	4529	it
O	4530	4534	uses
O	4535	4553	181783497276652981
O	4554	4556	to
O	4557	4563	create
O	4564	4571	another
O	4572	4576	seed
O	4577	4587	uniquifier
O	4588	4590	to
O	4591	4593	be
O	4594	4600	stored
O	4601	4604	for
O	4605	4608	the
O	4609	4613	next
O	4614	4618	time
O	4619	4622	new
B-api_mention	4623	4629	Random
I-api_mention	4629	4630	(
I-api_mention	4630	4634	args
I-api_mention	4634	4635	)
O	4636	4638	is
O	4639	4645	called
O	4645	4646	.

O	4647	4650	The
O	4651	4659	literals
O	4660	4679	181783497276652981L
O	4680	4683	and
O	4684	4701	8682522807148012L
O	4702	4705	are
O	4706	4709	not
O	4710	4716	placed
O	4717	4719	in
O	4720	4729	constants
O	4729	4730	,
O	4731	4734	but
O	4735	4739	they
O	4740	4743	don
O	4743	4744	'
O	4744	4745	t
O	4746	4752	appear
O	4753	4761	anywhere
O	4762	4766	else
O	4766	4767	.

O	4768	4770	At
O	4771	4776	first
O	4777	4780	the
O	4781	4788	comment
O	4789	4794	gives
O	4795	4797	me
O	4798	4800	an
O	4801	4805	easy
O	4806	4810	lead
O	4810	4811	.

O	4812	4821	Searching
O	4822	4828	online
O	4829	4832	for
O	4833	4837	that
O	4838	4845	article
O	4846	4852	yields
O	4853	4856	the
O	4857	4863	actual
O	4864	4871	article
O	4872	4873	.

O	4874	4890	8682522807148012
O	4891	4896	doesn
O	4896	4897	'
O	4897	4898	t
O	4899	4905	appear
O	4906	4908	in
O	4909	4912	the
O	4913	4918	paper
O	4918	4919	,
O	4920	4923	but
O	4924	4942	181783497276652981
O	4943	4947	does
O	4948	4954	appear
O	4955	4956	-
O	4956	4957	-
O	4958	4960	as
O	4961	4962	a
O	4963	4972	substring
O	4973	4975	of
O	4976	4983	another
O	4984	4990	number
O	4990	4991	,
O	4992	5011	1181783497276652981
O	5012	5013	,
O	5014	5019	which
O	5020	5022	is
O	5023	5041	181783497276652981
O	5042	5046	with
O	5047	5048	a
O	5049	5050	1
O	5051	5060	prepended
O	5060	5061	.

O	5062	5065	The
O	5066	5071	paper
O	5072	5078	claims
O	5079	5083	that
O	5084	5103	1181783497276652981
O	5104	5106	is
O	5107	5108	a
O	5109	5115	number
O	5116	5120	that
O	5121	5127	yields
O	5128	5132	good
O	5133	5134	"
O	5134	5139	merit
O	5139	5140	"
O	5141	5144	for
O	5145	5146	a
O	5147	5153	linear
O	5154	5166	congruential
O	5167	5176	generator
O	5176	5177	.

O	5178	5181	Was
O	5182	5186	this
O	5187	5193	number
O	5194	5200	simply
O	5201	5204	mis
O	5204	5205	-
O	5205	5211	copied
O	5212	5216	into
O	5217	5221	Java
O	5221	5222	?

O	5223	5227	Does
O	5228	5246	181783497276652981
O	5247	5251	have
O	5252	5254	an
O	5255	5265	acceptable
O	5266	5271	merit
O	5271	5272	?

O	5273	5276	And
O	5277	5280	why
O	5281	5284	was
O	5285	5301	8682522807148012
O	5302	5308	chosen
O	5308	5309	?

O	5310	5319	Searching
O	5320	5326	online
O	5327	5330	for
O	5331	5337	either
O	5338	5344	number
O	5345	5351	yields
O	5352	5354	no
O	5355	5366	explanation
O	5366	5367	,
O	5368	5372	only
O	5373	5377	this
O	5378	5382	page
O	5383	5387	that
O	5388	5392	also
O	5393	5400	notices
O	5401	5404	the
O	5405	5412	dropped
O	5413	5414	1
O	5415	5417	in
O	5418	5423	front
O	5424	5426	of
O	5427	5445	181783497276652981
O	5446	5447	.

O	5448	5453	Could
O	5454	5459	other
O	5460	5467	numbers
O	5468	5472	have
O	5473	5477	been
O	5478	5484	chosen
O	5485	5489	that
O	5490	5495	would
O	5496	5500	have
O	5501	5507	worked
O	5508	5510	as
O	5511	5515	well
O	5516	5518	as
O	5519	5524	these
O	5525	5528	two
O	5529	5536	numbers
O	5536	5537	?

O	5538	5541	Why
O	5542	5544	or
O	5545	5548	why
O	5549	5552	not
O	5552	5553	?

O	5555	5563	Question
O	5563	5564	-
O	5564	5572	20358883

O	5573	5575	Is
O	5576	5581	there
O	5582	5583	a
O	5584	5591	Utility
O	5592	5598	method
O	5599	5608	somewhere
O	5609	5613	that
O	5614	5617	can
O	5618	5620	do
O	5621	5625	this
O	5626	5628	in
O	5629	5630	1
O	5631	5635	line
O	5635	5636	?

O	5637	5638	I
O	5639	5642	can
O	5642	5643	'
O	5643	5644	t
O	5645	5649	find
O	5650	5652	it
O	5653	5661	anywhere
O	5662	5664	in
B-api_mention	5665	5676	Collections
O	5677	5678	,
O	5679	5681	or
B-api_mention	5682	5686	List
O	5687	5688	.

O	5689	5690	#
O	5690	5693	pre
O	5694	5695	I
O	5696	5699	don
O	5699	5700	'
O	5700	5701	t
O	5702	5706	want
O	5707	5709	to
O	5710	5712	re
O	5712	5713	-
O	5713	5719	invent
O	5720	5723	the
O	5724	5729	wheel
O	5730	5736	unless
O	5737	5738	I
O	5739	5743	plan
O	5744	5746	on
O	5747	5754	putting
O	5755	5760	fancy
O	5761	5765	rims
O	5766	5768	on
O	5769	5771	it
O	5771	5772	.

O	5773	5777	Well
O	5777	5778	.
O	5778	5779	.
O	5779	5780	.
O	5781	5784	the
O	5785	5789	type
O	5790	5793	can
O	5794	5796	be
O	5797	5798	T
O	5799	5800	,
O	5801	5804	and
O	5805	5808	not
B-api_mention	5809	5815	String
O	5816	5817	.
O	5818	5821	but
O	5822	5825	you
O	5826	5829	get
O	5830	5833	the
O	5834	5839	point
O	5839	5840	.

O	5841	5842	(
O	5842	5846	with
O	5847	5850	all
O	5851	5854	the
O	5855	5859	null
O	5860	5868	checking
O	5868	5869	,
O	5870	5876	safety
O	5877	5883	checks
O	5883	5884	.
O	5884	5885	.
O	5885	5886	.
O	5886	5889	etc
O	5889	5890	)

O	5892	5900	Question
O	5900	5901	-
O	5901	5909	19235606

O	5910	5911	I
O	5912	5914	am
O	5915	5921	having
O	5922	5929	trouble
O	5930	5943	understanding
O	5944	5947	the
B-api_mention	5948	5954	Stream
O	5955	5964	interface
O	5965	5967	in
O	5968	5972	Java
O	5973	5974	8
O	5974	5975	,
O	5976	5986	especially
O	5987	5992	where
O	5993	5995	it
O	5996	5999	has
O	6000	6002	to
O	6003	6005	do
O	6006	6010	with
O	6011	6014	the
B-api_mention	6015	6026	Spliterator
O	6027	6030	and
B-api_mention	6031	6040	Collector
O	6041	6051	interfaces
O	6051	6052	.

O	6053	6055	My
O	6056	6063	problem
O	6064	6066	is
O	6067	6071	that
O	6072	6073	I
O	6074	6080	simply
O	6081	6084	can
O	6084	6085	'
O	6085	6086	t
O	6087	6097	understand
O	6098	6101	yet
O	6102	6105	the
B-api_mention	6106	6117	Spliterator
O	6118	6121	and
O	6122	6125	the
B-api_mention	6126	6135	Collector
O	6136	6146	interfaces
O	6146	6147	,
O	6148	6151	and
O	6152	6154	as
O	6155	6156	a
O	6157	6163	result
O	6164	6167	the
B-api_mention	6168	6174	Stream
O	6175	6184	interface
O	6185	6187	is
O	6188	6193	still
O	6194	6202	somewhat
O	6203	6210	obscure
O	6211	6213	to
O	6214	6216	me
O	6216	6217	.

O	6218	6222	What
O	6223	6230	exactly
O	6231	6233	is
O	6234	6235	a
B-api_mention	6236	6247	Spliterator
O	6248	6251	and
O	6252	6253	a
B-api_mention	6254	6263	Collector
O	6264	6265	,
O	6266	6269	and
O	6270	6273	how
O	6274	6277	can
O	6278	6279	I
O	6280	6283	use
O	6284	6288	them
O	6288	6289	?

O	6290	6292	If
O	6293	6294	I
O	6295	6297	am
O	6298	6305	willing
O	6306	6308	to
O	6309	6314	write
O	6315	6317	my
O	6318	6321	own
B-api_mention	6322	6333	Spliterator
O	6334	6336	or
B-api_mention	6337	6346	Collector
O	6347	6348	(
O	6348	6351	and
O	6352	6360	probably
O	6361	6363	my
O	6364	6367	own
B-api_mention	6368	6374	Stream
O	6375	6377	in
O	6378	6382	that
O	6383	6390	process
O	6390	6391	)
O	6391	6392	,
O	6393	6397	what
O	6398	6404	should
O	6405	6406	I
O	6407	6409	do
O	6410	6413	and
O	6414	6417	not
O	6418	6420	do
O	6420	6421	?

O	6422	6423	I
O	6424	6428	read
O	6429	6433	some
O	6434	6442	examples
O	6443	6452	scattered
O	6453	6459	around
O	6460	6463	the
O	6464	6467	web
O	6467	6468	,
O	6469	6472	but
O	6473	6478	since
O	6479	6489	everything
O	6490	6494	here
O	6495	6497	is
O	6498	6502	stil
O	6503	6506	new
O	6507	6510	and
O	6511	6518	subject
O	6519	6521	to
O	6522	6529	changes
O	6529	6530	,
O	6531	6539	examples
O	6540	6543	and
O	6544	6553	tutorials
O	6554	6557	are
O	6558	6563	still
O	6564	6568	very
O	6569	6575	sparse
O	6575	6576	.

O	6578	6586	Question
O	6586	6587	-
O	6587	6595	18723596

B-api_mention	6596	6602	String
O	6603	6604	x
O	6605	6606	=
O	6607	6608	(
B-api_mention	6608	6614	String
O	6614	6615	)
O	6616	6620	null
O	6620	6621	;
O	6622	6625	Why
O	6626	6631	there
O	6632	6634	is
O	6635	6637	no
O	6638	6647	exception
O	6648	6650	in
O	6651	6655	this
O	6656	6665	statement
O	6665	6666	?

O	6667	6668	#
O	6668	6671	pre
O	6672	6674	It
O	6675	6681	prints
O	6682	6686	null
O	6687	6688	.

O	6689	6692	But
B-api_mention	6693	6694	.
I-api_mention	6694	6702	toString
I-api_mention	6702	6703	(
I-api_mention	6703	6707	args
I-api_mention	6707	6708	)
O	6709	6715	method
O	6716	6722	should
O	6723	6728	throw
O	6729	6730	a
O	6731	6735	null
O	6736	6743	pointer
O	6744	6753	exception
O	6753	6754	.

O	6756	6764	Question
O	6764	6765	-
O	6765	6773	20331163

O	6774	6775	I
O	6776	6780	have
O	6781	6782	a
O	6783	6789	string
O	6790	6791	"
O	6792	6794	11
O	6794	6795	/
O	6795	6797	15
O	6797	6798	/
O	6798	6802	2013
O	6803	6805	08
O	6805	6806	:
O	6806	6808	00
O	6808	6809	:
O	6809	6811	00
O	6812	6813	"
O	6813	6814	,
O	6815	6816	I
O	6817	6821	want
O	6822	6824	to
O	6825	6831	format
O	6832	6834	it
O	6835	6837	to
O	6838	6839	"
O	6840	6842	11
O	6842	6843	/
O	6843	6845	15
O	6845	6846	/
O	6846	6850	2013
O	6851	6852	"
O	6852	6853	,
O	6854	6858	what
O	6859	6861	is
O	6862	6865	the
O	6866	6873	correct
B-api_mention	6874	6891	DateTimeFormatter
O	6892	6899	pattern
O	6899	6900	?

O	6901	6902	I
O	6902	6903	'
O	6903	6905	ve
O	6906	6911	tried
O	6912	6916	many
O	6917	6920	and
O	6921	6928	googled
O	6929	6932	and
O	6933	6938	still
O	6939	6945	unable
O	6946	6948	to
O	6949	6953	find
O	6954	6957	the
O	6958	6965	correct
O	6966	6973	pattern
O	6973	6974	.
O	6975	6979	edit
O	6979	6980	:
O	6981	6982	I
O	6983	6985	am
O	6986	6993	looking
O	6994	6997	for
O	6998	7002	Joda
O	7002	7003	-
O	7003	7007	Time
B-api_mention	7008	7025	DateTimeFormatter
O	7026	7027	,
O	7028	7031	not
O	7032	7036	Java
O	7036	7037	'
O	7037	7038	s
B-api_mention	7039	7055	SimpleDateFormat
O	7055	7056	.
O	7056	7057	.

O	7059	7067	Question
O	7067	7068	-
O	7068	7076	18532488

O	7077	7079	In
O	7080	7084	many
O	7085	7090	other
O	7091	7100	languages
O	7100	7101	,
O	7102	7104	eg
O	7104	7105	.

O	7106	7113	Haskell
O	7113	7114	,
O	7115	7117	it
O	7118	7120	is
O	7121	7125	easy
O	7126	7128	to
O	7129	7135	repeat
O	7136	7137	a
O	7138	7143	value
O	7144	7146	or
O	7147	7155	function
O	7156	7164	multiple
O	7165	7170	times
O	7170	7171	,
O	7172	7174	eg
O	7174	7175	.
O	7176	7178	to
O	7179	7182	get
O	7183	7184	a
O	7185	7189	list
O	7190	7192	of
O	7193	7194	8
O	7195	7201	copies
O	7202	7204	of
O	7205	7208	the
O	7209	7214	value
O	7215	7216	1
O	7216	7217	:
O	7218	7222	take
O	7223	7224	8
O	7224	7225	(
O	7225	7229	args
O	7229	7230	)
O	7231	7234	but
O	7235	7236	I
O	7237	7242	haven
O	7242	7243	'
O	7243	7244	t
O	7245	7250	found
O	7251	7255	this
O	7256	7259	yet
O	7260	7262	in
O	7263	7267	Java
O	7268	7269	8
O	7269	7270	.

O	7271	7273	Is
O	7274	7279	there
O	7280	7284	such
O	7285	7286	a
O	7287	7295	function
O	7296	7298	in
O	7299	7303	Java
O	7304	7305	8
O	7305	7306	'
O	7306	7307	s
O	7308	7311	JDK
O	7311	7312	?

O	7313	7315	Or
O	7316	7329	alternatively
O	7330	7339	something
O	7340	7350	equivalent
O	7351	7353	to
O	7354	7355	a
O	7356	7361	range
O	7362	7366	like
O	7367	7368	[
O	7368	7369	1
O	7369	7370	.
O	7370	7371	.
O	7371	7372	8
O	7372	7373	]
O	7374	7376	It
O	7377	7382	would
O	7383	7387	seem
O	7388	7390	an
O	7391	7398	obvious
O	7399	7410	replacement
O	7411	7414	for
O	7415	7416	a
O	7417	7424	verbose
O	7425	7434	statement
O	7435	7437	in
O	7438	7442	Java
O	7443	7447	like
O	7448	7449	#
O	7449	7452	pre
O	7453	7455	to
O	7456	7460	have
O	7461	7470	something
O	7471	7475	like
B-api_mention	7476	7481	Range
I-api_mention	7481	7482	.
I-api_mention	7482	7486	from
I-api_mention	7486	7487	(
I-api_mention	7487	7491	args
I-api_mention	7491	7492	)
I-api_mention	7492	7493	.
I-api_mention	7493	7500	forEach
I-api_mention	7500	7501	(
I-api_mention	7501	7505	args
I-api_mention	7505	7506	)
O	7507	7513	though
O	7514	7518	this
O	7519	7529	particular
O	7530	7537	example
O	7538	7543	doesn
O	7543	7544	'
O	7544	7545	t
O	7546	7550	look
O	7551	7555	much
O	7556	7560	more
O	7561	7568	concise
O	7569	7577	actually
O	7577	7578	.
O	7578	7579	.
O	7579	7580	.
O	7581	7584	but
O	7585	7594	hopefully
O	7595	7597	it
O	7597	7598	'
O	7598	7599	s
O	7600	7604	more
O	7605	7613	readable
O	7613	7614	.

O	7616	7624	Question
O	7624	7625	-
O	7625	7633	20001427
O	7633	7634	,
O	7635	7641	answer
O	7641	7642	-
O	7642	7650	20001866

O	7651	7658	Usually
O	7658	7659	,
O	7660	7663	one
O	7664	7669	would
O	7670	7674	call
O	7675	7678	the
O	7679	7685	reduce
O	7686	7692	method
O	7693	7698	using
B-api_mention	7699	7703	Math
I-api_mention	7703	7704	.
I-api_mention	7704	7707	max
I-api_mention	7707	7708	(
I-api_mention	7708	7712	args
I-api_mention	7712	7713	)
O	7714	7716	as
O	7717	7724	follows
O	7724	7725	:
O	7726	7727	#
O	7727	7730	pre
O	7731	7735	That
O	7736	7744	requires
O	7745	7746	a
O	7747	7750	lot
O	7751	7753	of
O	7754	7760	syntax
O	7761	7764	for
O	7765	7769	just
O	7770	7777	calling
B-api_mention	7778	7782	Math
I-api_mention	7782	7783	.
I-api_mention	7783	7786	max
O	7787	7788	.

O	7789	7793	That
O	7793	7794	'
O	7794	7795	s
O	7796	7801	where
O	7802	7808	lambda
O	7809	7820	expressions
O	7821	7825	come
O	7826	7830	into
O	7831	7835	play
O	7835	7836	.

O	7837	7842	Since
O	7843	7847	Java
O	7848	7849	8
O	7850	7852	it
O	7853	7855	is
O	7856	7863	allowed
O	7864	7866	to
O	7867	7869	do
O	7870	7873	the
O	7874	7878	same
O	7879	7884	thing
O	7885	7887	in
O	7888	7889	a
O	7890	7894	much
O	7895	7902	shorter
O	7903	7906	way
O	7906	7907	:
B-api_mention	7908	7914	reduce
I-api_mention	7914	7915	(
I-api_mention	7915	7919	args
I-api_mention	7919	7920	)
O	7920	7921	;
O	7922	7925	How
O	7926	7930	does
O	7931	7935	this
O	7936	7940	work
O	7940	7941	?

O	7942	7945	The
O	7946	7950	java
O	7951	7959	compiler
O	7960	7961	"
O	7961	7968	detects
O	7968	7969	"
O	7969	7970	,
O	7971	7975	that
O	7976	7979	you
O	7980	7984	want
O	7985	7987	to
O	7988	7997	implement
O	7998	7999	a
O	8000	8006	method
O	8007	8011	that
O	8012	8019	accepts
O	8020	8023	two
O	8024	8027	int
O	8028	8029	s
O	8030	8033	and
O	8034	8041	returns
O	8042	8045	one
O	8046	8049	int
O	8050	8051	.

O	8052	8056	This
O	8057	8059	is
O	8060	8070	equivalent
O	8071	8073	to
O	8074	8077	the
O	8078	8084	formal
O	8085	8095	parameters
O	8096	8098	of
O	8099	8102	the
O	8103	8106	one
O	8107	8110	and
O	8111	8115	only
O	8116	8122	method
O	8123	8125	of
O	8126	8135	interface
B-api_mention	8136	8153	IntBinaryOperator
O	8154	8155	(
O	8155	8158	the
O	8159	8168	parameter
O	8169	8171	of
O	8172	8178	method
O	8179	8185	reduce
O	8186	8189	you
O	8190	8194	want
O	8195	8197	to
O	8198	8202	call
O	8202	8203	)
O	8203	8204	.

O	8205	8207	So
O	8208	8211	the
O	8212	8220	compiler
O	8221	8225	does
O	8226	8229	the
O	8230	8234	rest
O	8235	8238	for
O	8239	8242	you
O	8243	8244	-
O	8245	8247	it
O	8248	8252	just
O	8253	8260	assumes
O	8261	8264	you
O	8265	8269	want
O	8270	8272	to
O	8273	8282	implement
B-api_mention	8283	8300	IntBinaryOperator
O	8301	8302	.

O	8303	8306	But
O	8307	8309	as
B-api_mention	8310	8314	Math
I-api_mention	8314	8315	.
I-api_mention	8315	8318	max
I-api_mention	8318	8319	(
I-api_mention	8319	8323	args
I-api_mention	8323	8324	)
O	8325	8331	itself
O	8332	8340	fulfills
O	8341	8344	the
O	8345	8351	formal
O	8352	8364	requirements
O	8365	8367	of
B-api_mention	8368	8385	IntBinaryOperator
O	8386	8387	,
O	8388	8390	it
O	8391	8394	can
O	8395	8397	be
O	8398	8402	used
O	8403	8411	directly
O	8411	8412	.

O	8413	8420	Because
O	8421	8425	Java
O	8426	8427	7
O	8428	8432	does
O	8433	8436	not
O	8437	8441	have
O	8442	8445	any
O	8446	8452	syntax
O	8453	8457	that
O	8458	8464	allows
O	8465	8466	a
O	8467	8473	method
O	8474	8480	itself
O	8481	8483	to
O	8484	8486	be
O	8487	8493	passed
O	8494	8496	as
O	8497	8499	an
O	8500	8508	argument
O	8509	8510	(
O	8510	8513	you
O	8514	8517	can
O	8518	8522	only
O	8523	8527	pass
O	8528	8534	method
O	8535	8542	results
O	8542	8543	,
O	8544	8547	but
O	8548	8553	never
O	8554	8560	method
O	8561	8571	references
O	8571	8572	)
O	8572	8573	,
O	8574	8577	the
O	8578	8579	:
O	8579	8580	:
O	8581	8587	syntax
O	8588	8591	was
O	8592	8602	introduced
O	8603	8605	in
O	8606	8610	Java
O	8611	8612	8
O	8613	8615	to
O	8616	8625	reference
O	8626	8633	methods
O	8633	8634	:
B-api_mention	8635	8641	reduce
I-api_mention	8641	8642	(
I-api_mention	8642	8646	args
I-api_mention	8646	8647	)
O	8647	8648	;
O	8649	8653	Note
O	8654	8658	that
O	8659	8663	this
O	8664	8668	will
O	8669	8671	be
O	8672	8683	interpreted
O	8684	8686	by
O	8687	8690	the
O	8691	8699	compiler
O	8699	8700	,
O	8701	8704	not
O	8705	8707	by
O	8708	8711	the
O	8712	8715	JVM
O	8716	8718	at
O	8719	8726	runtime
O	8726	8727	!

O	8728	8736	Although
O	8737	8739	it
O	8740	8748	produces
O	8749	8758	different
O	8759	8768	bytecodes
O	8769	8772	for
O	8773	8776	all
O	8777	8782	three
O	8783	8787	code
O	8788	8796	snippets
O	8796	8797	,
O	8798	8802	they
O	8803	8806	are
O	8807	8819	semantically
O	8820	8825	equal
O	8825	8826	,
O	8827	8829	so
O	8830	8833	the
O	8834	8838	last
O	8839	8842	two
O	8843	8846	can
O	8847	8849	be
O	8850	8860	considered
O	8861	8863	to
O	8864	8866	be
O	8867	8872	short
O	8873	8874	(
O	8874	8877	and
O	8878	8886	probably
O	8887	8891	more
O	8892	8901	efficient
O	8901	8902	)
O	8903	8911	versions
O	8912	8914	of
O	8915	8918	the
B-api_mention	8919	8936	IntBinaryOperator
O	8937	8951	implementation
O	8952	8957	above
O	8957	8958	!

O	8959	8960	(
O	8960	8963	See
O	8964	8968	also
O	8969	8980	Translation
O	8981	8983	of
O	8984	8990	Lambda
O	8991	9002	Expressions
O	9003	9004	)

O	9006	9014	Question
O	9014	9015	-
O	9015	9023	20001427
O	9023	9024	,
O	9025	9031	answer
O	9031	9032	-
O	9032	9040	22245383

O	9041	9042	:
O	9042	9043	:
O	9044	9046	is
O	9047	9053	called
O	9054	9060	Method
O	9061	9070	Reference
O	9070	9071	.

O	9072	9074	It
O	9075	9077	is
O	9078	9087	basically
O	9088	9089	a
O	9090	9099	reference
O	9100	9102	to
O	9103	9104	a
O	9105	9111	single
O	9112	9118	method
O	9118	9119	.

O	9120	9121	i
O	9121	9122	.
O	9122	9123	e
O	9123	9124	.
O	9125	9127	it
O	9128	9134	refers
O	9135	9137	to
O	9138	9140	an
O	9141	9149	existing
O	9150	9156	method
O	9157	9159	by
O	9160	9164	name
O	9164	9165	.

O	9166	9171	Short
O	9172	9183	Explanation
O	9184	9185	:
O	9186	9191	Below
O	9192	9194	is
O	9195	9197	an
O	9198	9205	example
O	9206	9208	of
O	9209	9210	a
O	9211	9220	reference
O	9221	9223	to
O	9224	9225	a
O	9226	9232	static
O	9233	9239	method
O	9239	9240	:
O	9241	9242	#
O	9242	9245	pre
O	9246	9252	square
O	9253	9256	can
O	9257	9259	be
O	9260	9266	passed
O	9267	9273	around
O	9274	9278	just
O	9279	9283	like
O	9284	9290	object
O	9291	9300	reference
O	9300	9301	'
O	9301	9302	s
O	9303	9306	and
O	9307	9314	trigger
O	9315	9319	when
O	9320	9322	at
O	9323	9327	need
O	9327	9328	.

O	9329	9331	In
O	9332	9336	fact
O	9336	9337	,
O	9338	9340	it
O	9341	9344	can
O	9345	9347	be
O	9348	9357	perfectly
O	9358	9362	used
O	9363	9365	as
O	9366	9367	a
O	9368	9377	reference
O	9378	9380	to
O	9381	9382	a
O	9383	9389	normal
O	9390	9396	method
O	9397	9399	of
O	9400	9402	an
O	9403	9409	object
O	9410	9413	and
O	9414	9417	not
O	9418	9422	just
O	9423	9429	static
O	9430	9434	ones
O	9434	9435	.

O	9436	9437	#
O	9437	9440	pre
B-api_mention	9441	9449	Function
O	9450	9455	above
O	9456	9458	is
O	9459	9460	a
O	9461	9471	functional
O	9472	9481	interface
O	9482	9483	.

O	9484	9488	Well
O	9489	9491	to
O	9492	9497	fully
O	9498	9505	explain
O	9506	9507	:
O	9507	9508	:
O	9509	9510	,
O	9511	9513	it
O	9514	9516	is
O	9517	9526	important
O	9527	9529	to
O	9530	9540	understand
O	9541	9551	Functional
O	9552	9561	Interface
O	9561	9562	.

O	9563	9570	Plainly
O	9570	9571	,
O	9572	9580	Function
O	9581	9590	interface
O	9591	9593	is
O	9594	9596	an
O	9597	9606	interface
O	9607	9611	with
O	9612	9616	just
O	9617	9620	one
O	9621	9629	abstract
O	9630	9636	method
O	9636	9637	.

O	9638	9641	For
O	9642	9649	example
O	9649	9650	:
B-api_mention	9651	9659	Runnable
O	9660	9661	,
B-api_mention	9662	9670	Callable
O	9671	9672	,
B-api_mention	9673	9687	ActionListener
O	9688	9691	and
O	9692	9694	so
O	9694	9695	.

B-api_mention	9696	9704	Function
O	9705	9710	above
O	9711	9713	is
O	9714	9715	a
O	9716	9726	functional
O	9727	9736	interface
O	9737	9741	with
O	9742	9746	just
O	9747	9750	one
O	9751	9757	method
O	9758	9763	apply
O	9764	9765	.

O	9766	9768	It
O	9769	9774	takes
O	9775	9778	one
O	9779	9787	argument
O	9788	9791	and
O	9792	9800	produces
O	9801	9802	a
O	9803	9809	result
O	9809	9810	.

O	9811	9814	The
O	9815	9821	reason
O	9822	9825	why
O	9826	9827	:
O	9827	9828	:
O	9829	9832	are
O	9833	9840	awesome
O	9841	9843	is
O	9844	9851	because
O	9851	9852	:
O	9853	9854	#
O	9854	9864	blockquote
O	9865	9866	i
O	9866	9867	.
O	9867	9868	e
O	9868	9869	.
O	9870	9874	Just
O	9875	9879	like
O	9880	9887	writing
O	9888	9894	lambda
O	9895	9899	body
O	9899	9900	:
B-api_mention	9901	9909	Function
I-api_mention	9909	9910	<
I-api_mention	9910	9911	T
I-api_mention	9911	9912	>
O	9913	9919	square
O	9920	9921	=
O	9922	9923	(
B-api_mention	9923	9929	Double
O	9930	9931	x
O	9931	9932	)
O	9933	9934	-
O	9934	9935	>
O	9936	9937	x
O	9938	9939	*
O	9940	9941	x
O	9941	9942	;
O	9943	9946	You
O	9947	9950	can
O	9951	9957	simply
O	9958	9960	do
O	9960	9961	:
B-api_mention	9962	9970	Function
I-api_mention	9970	9971	<
I-api_mention	9971	9972	T
I-api_mention	9972	9973	>
O	9974	9980	square
O	9981	9982	=
O	9983	9986	Hey
O	9986	9987	:
O	9987	9988	:
O	9988	9994	square
O	9994	9995	;
O	9996	9998	At
O	9999	10006	runtime
O	10007	10011	they
O	10012	10018	behave
O	10019	10026	exactly
O	10027	10030	the
O	10031	10035	same
O	10035	10036	.

O	10037	10040	The
O	10041	10049	bytecode
O	10050	10053	may
O	10053	10054	/
O	10054	10057	not
O	10058	10060	be
O	10061	10064	the
O	10065	10069	same
O	10070	10071	(
O	10071	10074	For
O	10075	10080	above
O	10081	10085	case
O	10085	10086	,
O	10087	10089	it
O	10090	10099	generates
O	10100	10103	the
O	10104	10108	same
O	10109	10117	bytecode
O	10118	10119	(
O	10119	10126	compile
O	10127	10132	above
O	10133	10136	and
O	10137	10142	check
O	10143	10148	javap
O	10149	10150	-
O	10150	10151	c
O	10152	10153	)
O	10153	10154	)
O	10155	10158	The
O	10159	10163	only
O	10164	10169	major
O	10170	10178	criteria
O	10179	10181	to
O	10182	10189	satisfy
O	10190	10192	is
O	10192	10193	:
O	10194	10197	the
O	10198	10204	method
O	10205	10208	you
O	10209	10216	provide
O	10217	10223	should
O	10224	10228	have
O	10229	10230	a
O	10231	10238	similar
O	10239	10248	signature
O	10249	10251	to
O	10252	10258	method
O	10259	10261	of
O	10262	10265	the
B-api_mention	10266	10285	FunctionalInterface
O	10286	10289	you
O	10290	10293	use
O	10294	10296	as
O	10297	10303	object
O	10304	10313	reference
O	10313	10314	.

O	10315	10320	Below
O	10321	10323	is
O	10324	10331	illegal
B-api_mention	10332	10340	Supplier
I-api_mention	10340	10341	<
I-api_mention	10341	10342	T
I-api_mention	10342	10343	>
O	10344	10345	p
O	10346	10347	=
O	10348	10351	Hey
O	10351	10352	:
O	10352	10353	:
O	10353	10359	square
O	10359	10360	;
O	10361	10362	/
O	10362	10363	/
O	10363	10370	illegal
O	10371	10377	square
O	10378	10385	expects
O	10386	10388	an
O	10389	10397	argument
O	10398	10401	and
O	10402	10409	returns
O	10410	10411	a
O	10412	10418	double
O	10418	10419	.
O	10420	10423	get
O	10424	10430	method
O	10431	10433	in
B-api_mention	10434	10442	Supplier
O	10443	10450	expects
O	10451	10453	an
O	10454	10462	argument
O	10463	10466	but
O	10467	10472	doesn
O	10472	10473	'
O	10473	10474	t
O	10475	10481	return
O	10482	10490	anything
O	10490	10491	.

O	10492	10494	So
O	10495	10497	it
O	10498	10500	is
O	10501	10503	an
O	10504	10509	error
O	10509	10510	.

O	10511	10517	Method
O	10518	10527	Reference
O	10528	10534	refers
O	10535	10537	to
O	10538	10539	a
O	10540	10546	method
O	10547	10549	of
O	10550	10553	the
O	10554	10564	functional
O	10565	10574	interface
O	10575	10576	(
O	10576	10578	As
O	10579	10588	mentioned
O	10588	10589	,
O	10590	10600	functional
O	10601	10610	interface
O	10611	10614	can
O	10615	10619	only
O	10620	10624	have
O	10625	10628	one
O	10629	10635	method
O	10635	10636	)
O	10636	10637	.

O	10638	10642	Some
O	10643	10647	more
O	10648	10656	examples
O	10656	10657	:
O	10658	10664	accept
O	10665	10671	method
O	10672	10674	in
B-api_mention	10675	10683	Consumer
O	10684	10689	takes
O	10690	10692	an
O	10693	10698	input
O	10699	10702	but
O	10703	10709	doesnt
O	10710	10716	return
O	10717	10725	anything
O	10725	10726	.

O	10727	10728	#
O	10728	10731	pre
O	10732	10737	Above
B-api_mention	10738	10747	getRandom
O	10748	10753	takes
O	10754	10756	no
O	10757	10765	argument
O	10766	10769	and
O	10770	10777	returns
O	10778	10779	a
O	10780	10786	double
O	10786	10787	.

O	10788	10790	So
O	10791	10794	any
O	10795	10805	functional
O	10806	10815	interface
O	10816	10820	that
O	10821	10830	satisfies
O	10831	10834	the
O	10835	10843	criteria
O	10844	10846	of
O	10846	10847	:
O	10848	10852	take
O	10853	10855	no
O	10856	10864	argument
O	10865	10868	and
O	10869	10875	return
O	10876	10882	double
O	10883	10886	can
O	10887	10889	be
O	10890	10894	used
O	10894	10895	.

O	10896	10903	Another
O	10904	10911	example
O	10911	10912	:
O	10913	10914	#
O	10914	10917	pre
O	10918	10920	In
O	10921	10925	case
O	10926	10928	of
O	10929	10941	Parametrized
O	10942	10947	Types
O	10948	10949	:
O	10950	10951	#
O	10951	10954	pre
O	10955	10961	Method
O	10962	10971	Reference
O	10972	10975	can
O	10976	10978	be
O	10979	10987	obtained
O	10988	10990	in
O	10991	11000	different
O	11001	11007	styles
O	11007	11008	,
O	11009	11012	but
O	11013	11026	fundamentally
O	11027	11031	they
O	11032	11035	all
O	11036	11040	mean
O	11041	11044	the
O	11045	11049	same
O	11050	11053	and
O	11054	11057	can
O	11058	11064	simply
O	11065	11067	be
O	11068	11078	visualized
O	11079	11081	as
O	11082	11083	a
O	11084	11090	lambda
O	11090	11091	:
O	11092	11093	#
O	11093	11095	li
O	11096	11097	A
O	11098	11104	static
O	11105	11111	method
O	11112	11113	(
O	11114	11123	ClassName
O	11123	11124	:
O	11124	11125	:
O	11125	11133	methName
O	11134	11135	)
O	11136	11137	#
O	11137	11139	li
O	11140	11142	An
O	11143	11151	instance
O	11152	11158	method
O	11159	11161	of
O	11162	11163	a
O	11164	11174	particular
O	11175	11181	object
O	11182	11183	(
O	11184	11195	instanceRef
O	11195	11196	:
O	11196	11197	:
O	11197	11205	methName
O	11206	11207	)
O	11208	11209	#
O	11209	11211	li
O	11212	11213	A
O	11214	11219	super
O	11220	11226	method
O	11227	11229	of
O	11230	11231	a
O	11232	11242	particular
O	11243	11249	object
O	11250	11251	(
O	11252	11257	super
O	11257	11258	:
O	11258	11259	:
O	11259	11267	methName
O	11268	11269	)
O	11270	11271	#
O	11271	11273	li
O	11274	11276	An
O	11277	11285	instance
O	11286	11292	method
O	11293	11295	of
O	11296	11298	an
O	11299	11308	arbitrary
O	11309	11315	object
O	11316	11318	of
O	11319	11320	a
O	11321	11331	particular
O	11332	11336	type
O	11337	11338	(
O	11339	11348	ClassName
O	11348	11349	:
O	11349	11350	:
O	11350	11358	methName
O	11359	11360	)
O	11361	11362	#
O	11362	11364	li
O	11365	11366	A
O	11367	11372	class
O	11373	11384	constructor
O	11385	11394	reference
O	11395	11396	(
O	11397	11406	ClassName
O	11406	11407	:
O	11407	11408	:
O	11408	11411	new
O	11412	11413	)
O	11414	11415	#
O	11415	11417	li
O	11418	11420	An
O	11421	11426	array
O	11427	11438	constructor
O	11439	11448	reference
O	11449	11450	(
O	11451	11459	TypeName
O	11459	11460	[
O	11460	11461	]
O	11461	11462	:
O	11462	11463	:
O	11463	11466	new
O	11467	11468	)
O	11469	11472	For
O	11473	11480	further
O	11481	11490	reference
O	11490	11491	:
O	11492	11493	#
O	11493	11494	a

O	11496	11504	Question
O	11504	11505	-
O	11505	11513	20363719
O	11513	11514	,
O	11515	11521	answer
O	11521	11522	-
O	11522	11530	25453317

O	11531	11533	If
O	11534	11538	your
O	11539	11542	key
O	11543	11545	is
O	11546	11549	NOT
O	11550	11560	guaranteed
O	11561	11563	to
O	11564	11566	be
O	11567	11573	unique
O	11574	11577	for
O	11578	11581	all
O	11582	11590	elements
O	11591	11593	in
O	11594	11597	the
O	11598	11602	list
O	11602	11603	,
O	11604	11607	you
O	11608	11614	should
O	11615	11622	convert
O	11623	11625	it
O	11626	11628	to
O	11629	11630	a
B-api_mention	11631	11634	Map
O	11634	11635	<
B-api_mention	11635	11641	String
O	11641	11642	,
B-api_mention	11643	11647	List
I-api_mention	11647	11648	<
I-api_mention	11648	11649	T
I-api_mention	11649	11650	>
O	11651	11658	instead
O	11659	11661	of
O	11662	11663	a
B-api_mention	11664	11667	Map
I-api_mention	11667	11668	<
I-api_mention	11668	11669	T
I-api_mention	11669	11670	>
I-api_mention	11671	11674	Map
I-api_mention	11674	11675	<
I-api_mention	11675	11676	T
I-api_mention	11676	11677	>
O	11678	11684	result
O	11685	11686	=
O	11687	11694	choices
B-api_mention	11694	11695	.
I-api_mention	11695	11701	stream
I-api_mention	11701	11702	(
I-api_mention	11702	11706	args
I-api_mention	11706	11707	)
I-api_mention	11707	11708	.
I-api_mention	11708	11715	collect
I-api_mention	11715	11716	(
I-api_mention	11716	11720	args
I-api_mention	11720	11721	)
O	11721	11722	;

O	11724	11732	Question
O	11732	11733	-
O	11733	11741	20363719
O	11741	11742	,
O	11743	11749	answer
O	11749	11750	-
O	11750	11758	34675066

O	11759	11760	I
O	11761	11764	was
O	11765	11771	trying
O	11772	11774	to
O	11775	11777	do
O	11778	11782	this
O	11783	11786	and
O	11787	11792	found
O	11793	11797	that
O	11797	11798	,
O	11799	11804	using
O	11805	11808	the
O	11809	11816	answers
O	11817	11822	above
O	11822	11823	,
O	11824	11828	when
O	11829	11834	using
B-api_mention	11835	11844	Functions
I-api_mention	11844	11845	.
I-api_mention	11845	11853	identity
I-api_mention	11853	11854	(
I-api_mention	11854	11858	args
I-api_mention	11858	11859	)
O	11860	11863	for
O	11864	11867	the
O	11868	11871	key
O	11872	11874	to
O	11875	11878	the
O	11879	11882	Map
O	11882	11883	,
O	11884	11888	then
O	11889	11890	I
O	11891	11894	had
O	11895	11901	issues
O	11902	11906	with
O	11907	11912	using
O	11913	11914	a
O	11915	11920	local
O	11921	11927	method
O	11928	11932	like
O	11933	11937	this
O	11937	11938	:
O	11938	11939	:
O	11939	11954	localMethodName
O	11955	11957	to
O	11958	11966	actually
O	11967	11971	work
O	11972	11979	because
O	11980	11982	of
O	11983	11989	typing
O	11990	11996	issues
O	11996	11997	.

B-api_mention	11998	12007	Functions
I-api_mention	12007	12008	.
I-api_mention	12008	12016	identity
I-api_mention	12016	12017	(
I-api_mention	12017	12021	args
I-api_mention	12021	12022	)
O	12023	12031	actually
O	12032	12036	does
O	12037	12046	something
O	12047	12049	to
O	12050	12053	the
O	12054	12060	typing
O	12061	12063	in
O	12064	12068	this
O	12069	12073	case
O	12074	12076	so
O	12077	12080	the
O	12081	12087	method
O	12088	12093	would
O	12094	12098	only
O	12099	12103	work
O	12104	12106	by
O	12107	12116	returning
B-api_mention	12117	12123	Object
O	12124	12127	and
O	12128	12137	accepting
O	12138	12139	a
O	12140	12145	param
O	12146	12148	of
B-api_mention	12149	12155	Object
O	12156	12158	To
O	12159	12164	solve
O	12165	12169	this
O	12169	12170	,
O	12171	12172	I
O	12173	12178	ended
O	12179	12181	up
O	12182	12190	ditching
B-api_mention	12191	12200	Functions
I-api_mention	12200	12201	.
I-api_mention	12201	12209	identity
I-api_mention	12209	12210	(
I-api_mention	12210	12214	args
I-api_mention	12214	12215	)
O	12216	12219	and
O	12220	12225	using
O	12226	12227	s
O	12227	12228	-
O	12228	12229	>
O	12229	12230	s
O	12231	12238	instead
O	12238	12239	.

O	12240	12242	So
O	12243	12245	my
O	12246	12250	code
O	12250	12251	,
O	12252	12254	in
O	12255	12257	my
O	12258	12262	case
O	12263	12265	to
O	12266	12270	list
O	12271	12274	all
O	12275	12286	directories
O	12287	12293	inside
O	12294	12295	a
O	12296	12305	directory
O	12305	12306	,
O	12307	12310	and
O	12311	12314	for
O	12315	12319	each
O	12320	12323	one
O	12324	12327	use
O	12328	12331	the
O	12332	12336	name
O	12337	12339	of
O	12340	12343	the
O	12344	12353	directory
O	12354	12356	as
O	12357	12360	the
O	12361	12364	key
O	12365	12367	to
O	12368	12371	the
O	12372	12375	map
O	12376	12379	and
O	12380	12384	then
O	12385	12389	call
O	12390	12391	a
O	12392	12398	method
O	12399	12403	with
O	12404	12407	the
O	12408	12417	directory
O	12418	12422	name
O	12423	12426	and
O	12427	12433	return
O	12434	12435	a
O	12436	12446	collection
O	12447	12449	of
O	12450	12455	items
O	12455	12456	,
O	12457	12462	looks
O	12463	12467	like
O	12467	12468	:
B-api_mention	12469	12472	Map
I-api_mention	12472	12473	<
I-api_mention	12473	12474	T
I-api_mention	12474	12475	>
O	12476	12481	items
O	12482	12483	=
B-api_mention	12484	12490	Arrays
I-api_mention	12490	12491	.
I-api_mention	12491	12497	stream
I-api_mention	12497	12498	(
I-api_mention	12498	12502	args
I-api_mention	12502	12503	)
I-api_mention	12504	12505	.
I-api_mention	12505	12508	map
I-api_mention	12508	12509	(
I-api_mention	12509	12513	args
I-api_mention	12513	12514	)
I-api_mention	12515	12516	.
I-api_mention	12516	12523	collect
I-api_mention	12523	12524	(
I-api_mention	12524	12528	args
I-api_mention	12528	12529	)
O	12529	12530	;

O	12532	12540	Question
O	12540	12541	-
O	12541	12549	18571223
O	12549	12550	,
O	12551	12557	answer
O	12557	12558	-
O	12558	12566	18571348

O	12567	12570	The
O	12571	12577	object
O	12578	12582	your
O	12583	12589	method
B-api_mention	12590	12604	decompressGZIP
I-api_mention	12604	12605	(
I-api_mention	12605	12609	args
I-api_mention	12609	12610	)
O	12611	12616	needs
O	12617	12619	is
O	12620	12621	a
O	12622	12626	byte
O	12626	12627	[
O	12627	12628	]
O	12629	12630	.

O	12631	12633	So
O	12634	12637	the
O	12638	12643	basic
O	12643	12644	,
O	12645	12654	technical
O	12655	12661	answer
O	12662	12664	to
O	12665	12668	the
O	12669	12677	question
O	12678	12681	you
O	12682	12686	have
O	12687	12692	asked
O	12693	12695	is
O	12695	12696	:
O	12697	12698	#
O	12698	12701	pre
O	12702	12709	However
O	12710	12713	the
O	12714	12721	problem
O	12722	12725	you
O	12726	12732	appear
O	12733	12735	to
O	12736	12738	be
O	12739	12748	wrestling
O	12749	12753	with
O	12754	12756	is
O	12757	12761	that
O	12762	12766	this
O	12767	12772	doesn
O	12772	12773	'
O	12773	12774	t
O	12775	12782	display
O	12783	12787	very
O	12788	12792	well
O	12792	12793	.

O	12794	12801	Calling
B-api_mention	12802	12810	toString
I-api_mention	12810	12811	(
I-api_mention	12811	12815	args
I-api_mention	12815	12816	)
O	12817	12821	will
O	12822	12826	just
O	12827	12831	give
O	12832	12835	you
O	12836	12839	the
O	12840	12847	default
B-api_mention	12848	12854	Object
I-api_mention	12854	12855	.
I-api_mention	12855	12863	toString
I-api_mention	12863	12864	(
I-api_mention	12864	12868	args
I-api_mention	12868	12869	)
O	12870	12875	which
O	12876	12878	is
O	12879	12882	the
O	12883	12888	class
O	12889	12893	name
O	12894	12895	+
O	12896	12902	memory
O	12903	12910	address
O	12910	12911	.

O	12912	12914	In
O	12915	12919	your
O	12920	12926	result
O	12927	12928	[
O	12928	12929	B
O	12929	12930	@
O	12930	12938	38ee9f13
O	12939	12940	,
O	12941	12944	the
O	12945	12946	[
O	12946	12947	B
O	12948	12953	means
O	12954	12958	byte
O	12958	12959	[
O	12959	12960	]
O	12961	12964	and
O	12965	12973	38ee9f13
O	12974	12976	is
O	12977	12980	the
O	12981	12987	memory
O	12988	12995	address
O	12995	12996	,
O	12997	13006	separated
O	13007	13009	by
O	13010	13012	an
O	13013	13014	@
O	13015	13016	.

O	13017	13020	For
O	13021	13028	display
O	13029	13037	purposes
O	13038	13041	you
O	13042	13045	can
O	13046	13049	use
O	13049	13050	:
B-api_mention	13051	13057	Arrays
I-api_mention	13057	13058	.
I-api_mention	13058	13066	toString
I-api_mention	13066	13067	(
I-api_mention	13067	13071	args
I-api_mention	13071	13072	)
O	13072	13073	;
O	13074	13077	But
O	13078	13082	this
O	13083	13087	will
O	13088	13092	just
O	13093	13100	display
O	13101	13103	as
O	13104	13105	a
O	13106	13114	sequence
O	13115	13117	of
O	13118	13123	comma
O	13123	13124	-
O	13124	13133	separated
O	13134	13142	integers
O	13142	13143	,
O	13144	13149	which
O	13150	13153	may
O	13154	13156	or
O	13157	13160	may
O	13161	13164	not
O	13165	13167	be
O	13168	13172	what
O	13173	13176	you
O	13177	13181	want
O	13181	13182	.

O	13183	13185	To
O	13186	13189	get
O	13190	13191	a
O	13192	13200	readable
B-api_mention	13201	13207	String
O	13208	13212	back
O	13213	13217	from
O	13218	13219	a
O	13220	13224	byte
O	13224	13225	[
O	13225	13226	]
O	13227	13228	,
O	13229	13232	use
O	13232	13233	:
B-api_mention	13234	13240	String
O	13241	13247	string
O	13248	13249	=
O	13250	13253	new
B-api_mention	13254	13260	String
I-api_mention	13260	13261	(
I-api_mention	13261	13265	args
I-api_mention	13265	13266	)
O	13266	13267	;
O	13268	13271	The
O	13272	13278	reason
O	13279	13282	the
B-api_mention	13283	13290	Charset
O	13291	13298	version
O	13299	13301	is
O	13302	13310	favoured
O	13310	13311	,
O	13312	13314	is
O	13315	13319	that
O	13320	13323	all
B-api_mention	13324	13330	String
O	13331	13338	objects
O	13339	13341	in
O	13342	13346	Java
O	13347	13350	are
O	13351	13357	stored
O	13358	13368	internally
O	13369	13371	as
O	13372	13375	UTF
O	13375	13376	-
O	13376	13378	16
O	13378	13379	.

O	13380	13384	When
O	13385	13395	converting
O	13396	13398	to
O	13399	13400	a
O	13401	13405	byte
O	13405	13406	[
O	13406	13407	]
O	13408	13411	you
O	13412	13416	will
O	13417	13420	get
O	13421	13422	a
O	13423	13432	different
O	13433	13442	breakdown
O	13443	13445	of
O	13446	13451	bytes
O	13452	13455	for
O	13456	13459	the
O	13460	13465	given
O	13466	13472	glyphs
O	13473	13475	of
O	13476	13480	that
B-api_mention	13481	13487	String
O	13488	13489	,
O	13490	13499	depending
O	13500	13504	upon
O	13505	13508	the
O	13509	13515	chosen
O	13516	13523	charset
O	13523	13524	.

O	13526	13534	Question
O	13534	13535	-
O	13535	13543	18571223
O	13543	13544	,
O	13545	13551	answer
O	13551	13552	-
O	13552	13560	18571352

O	13561	13564	You
O	13565	13568	can
O	13569	13572	use
B-api_mention	13573	13579	String
I-api_mention	13579	13580	.
I-api_mention	13580	13588	getBytes
I-api_mention	13588	13589	(
I-api_mention	13589	13593	args
I-api_mention	13593	13594	)
O	13595	13600	which
O	13601	13608	returns
O	13609	13612	the
O	13613	13617	byte
O	13617	13618	[
O	13618	13619	]
O	13620	13625	array
O	13625	13626	.

O	13628	13636	Question
O	13636	13637	-
O	13637	13645	18571223
O	13645	13646	,
O	13647	13653	answer
O	13653	13654	-
O	13654	13662	18571358

O	13663	13666	Try
O	13667	13672	using
B-api_mention	13673	13679	String
I-api_mention	13679	13680	.
I-api_mention	13680	13688	getBytes
I-api_mention	13688	13689	(
I-api_mention	13689	13690	)
O	13690	13691	.

O	13692	13694	It
O	13695	13702	returns
O	13703	13704	a
O	13705	13709	byte
O	13709	13710	[
O	13710	13711	]
O	13712	13724	representing
O	13725	13731	string
O	13732	13736	data
O	13736	13737	.

O	13738	13745	Example
O	13745	13746	:
O	13747	13748	#
O	13748	13751	pre

O	13753	13761	Question
O	13761	13762	-
O	13762	13770	18571223
O	13770	13771	,
O	13772	13778	answer
O	13778	13779	-
O	13779	13787	20262456

O	13788	13791	You
O	13792	13797	might
O	13798	13803	wanna
O	13804	13807	try
O	13808	13814	return
O	13815	13818	new
B-api_mention	13819	13825	String
I-api_mention	13825	13826	(
I-api_mention	13826	13830	args
I-api_mention	13830	13831	)

O	13833	13841	Question
O	13841	13842	-
O	13842	13850	18410035
O	13850	13851	,
O	13852	13858	answer
O	13858	13859	-
O	13859	13867	37409771

O	13868	13870	In
O	13871	13875	Java
O	13876	13877	8
O	13878	13888	collection
O	13889	13896	classes
O	13897	13901	that
O	13902	13911	implement
B-api_mention	13912	13920	Iterable
O	13921	13922	(
O	13922	13925	for
O	13926	13933	example
O	13934	13937	all
O	13938	13943	lists
O	13943	13944	)
O	13945	13948	now
O	13949	13953	have
B-api_mention	13954	13961	forEach
O	13962	13968	method
O	13968	13969	:
B-api_mention	13970	13976	Arrays
I-api_mention	13976	13977	.
I-api_mention	13977	13983	asList
I-api_mention	13983	13984	(
I-api_mention	13984	13988	args
I-api_mention	13988	13989	)
I-api_mention	13989	13990	.
I-api_mention	13990	13997	forEach
I-api_mention	13997	13998	(
I-api_mention	13998	14002	args
I-api_mention	14002	14003	)
O	14003	14004	;
O	14005	14008	The
O	14009	14014	above
O	14015	14022	example
O	14023	14028	makes
O	14029	14032	use
O	14033	14035	of
O	14036	14042	method
O	14042	14043	-
O	14043	14052	reference
O	14053	14063	introduced
O	14064	14066	in
O	14067	14071	Java
O	14072	14073	8
O	14073	14074	.

O	14075	14077	We
O	14078	14081	can
O	14082	14086	also
O	14087	14094	iterate
O	14095	14099	over
O	14100	14101	a
O	14102	14106	list
O	14107	14112	using
B-api_mention	14113	14119	Stream
O	14120	14122	as
O	14122	14123	:
B-api_mention	14124	14130	Arrays
I-api_mention	14130	14131	.
I-api_mention	14131	14137	asList
I-api_mention	14137	14138	(
I-api_mention	14138	14142	args
I-api_mention	14142	14143	)
I-api_mention	14143	14144	.
I-api_mention	14144	14150	stream
I-api_mention	14150	14151	(
I-api_mention	14151	14155	args
I-api_mention	14155	14156	)
I-api_mention	14156	14157	.
I-api_mention	14157	14164	forEach
I-api_mention	14164	14165	(
I-api_mention	14165	14169	args
I-api_mention	14169	14170	)
O	14170	14171	;
O	14172	14175	The
O	14176	14185	advantage
O	14186	14190	with
O	14191	14196	later
O	14197	14203	option
O	14204	14206	is
O	14207	14211	that
O	14212	14214	we
O	14215	14218	can
O	14219	14223	also
O	14224	14228	make
O	14229	14232	use
O	14233	14235	of
O	14236	14244	parallel
O	14245	14252	streams
O	14253	14261	wherever
O	14262	14273	appropriate
O	14273	14274	.

O	14275	14277	If
O	14278	14281	the
O	14282	14291	objective
O	14292	14294	is
O	14295	14299	only
O	14300	14302	to
O	14303	14308	print
O	14309	14312	the
O	14313	14318	items
O	14319	14331	irrespective
O	14332	14334	of
O	14335	14338	the
O	14339	14344	order
O	14345	14349	then
O	14350	14352	we
O	14353	14356	can
O	14357	14360	use
O	14361	14369	parallel
O	14370	14376	stream
O	14377	14379	as
O	14379	14380	:
B-api_mention	14381	14387	Arrays
I-api_mention	14387	14388	.
I-api_mention	14388	14394	asList
I-api_mention	14394	14395	(
I-api_mention	14395	14399	args
I-api_mention	14399	14400	)
I-api_mention	14400	14401	.
I-api_mention	14401	14415	parallelStream
I-api_mention	14415	14416	(
I-api_mention	14416	14420	args
I-api_mention	14420	14421	)
I-api_mention	14421	14422	.
I-api_mention	14422	14429	forEach
I-api_mention	14429	14430	(
I-api_mention	14430	14434	args
I-api_mention	14434	14435	)
O	14435	14436	;

O	14438	14446	Question
O	14446	14447	-
O	14447	14455	19418427
O	14455	14456	,
O	14457	14463	answer
O	14463	14464	-
O	14464	14472	19418548

O	14473	14475	As
O	14476	14479	per
O	14480	14482	my
O	14483	14491	research
O	14491	14492	,
O	14493	14496	all
O	14497	14500	the
O	14501	14506	final
B-api_mention	14507	14513	String
O	14514	14517	are
O	14518	14526	interned
O	14527	14529	in
O	14530	14534	Java
O	14534	14535	.

O	14536	14540	From
O	14541	14544	one
O	14545	14547	of
O	14548	14551	the
O	14552	14556	blog
O	14557	14561	post
O	14561	14562	:
O	14563	14564	#
O	14564	14574	blockquote
O	14575	14577	So
O	14578	14580	it
O	14581	14586	means
O	14587	14589	if
O	14590	14593	you
O	14594	14598	call
B-api_mention	14599	14605	String
I-api_mention	14605	14606	.
I-api_mention	14606	14612	intern
I-api_mention	14612	14613	(
I-api_mention	14613	14617	args
I-api_mention	14617	14618	)
O	14619	14622	you
O	14623	14626	can
O	14627	14634	compare
O	14635	14638	two
O	14639	14646	strings
O	14647	14652	using
O	14653	14654	=
O	14654	14655	=
O	14656	14664	operator
O	14664	14665	.

O	14666	14669	But
O	14670	14674	here
B-api_mention	14675	14681	String
I-api_mention	14681	14682	.
I-api_mention	14682	14688	intern
I-api_mention	14688	14689	(
I-api_mention	14689	14693	args
I-api_mention	14693	14694	)
O	14695	14697	is
O	14698	14701	not
O	14702	14711	necessary
O	14712	14719	because
O	14720	14722	in
O	14723	14727	Java
O	14728	14733	final
B-api_mention	14734	14740	String
O	14741	14744	are
O	14745	14755	internally
O	14756	14764	interned
O	14764	14765	.

O	14766	14769	You
O	14770	14773	can
O	14774	14778	find
O	14779	14783	more
O	14784	14795	information
B-api_mention	14796	14802	String
O	14803	14814	comparision
O	14815	14820	using
O	14821	14822	=
O	14822	14823	=
O	14824	14832	operator
O	14833	14836	and
O	14837	14844	Javadoc
O	14845	14848	for
B-api_mention	14849	14855	String
I-api_mention	14855	14856	.
I-api_mention	14856	14862	intern
I-api_mention	14862	14863	(
I-api_mention	14863	14864	)
O	14865	14871	method
O	14871	14872	.

O	14873	14877	Also
O	14878	14883	refer
O	14884	14888	this
O	14889	14902	Stackoverflow
O	14903	14907	post
O	14908	14911	for
O	14912	14916	more
O	14917	14928	information
O	14928	14929	.

O	14931	14939	Question
O	14939	14940	-
O	14940	14948	19418427
O	14948	14949	,
O	14950	14956	answer
O	14956	14957	-
O	14957	14965	19418553

O	14966	14968	If
O	14969	14972	you
O	14973	14977	take
O	14978	14979	a
O	14980	14984	look
O	14985	14987	at
O	14988	14992	this
O	14993	15000	methods
O	15001	15002	#
O	15002	15005	pre
O	15006	15009	and
O	15010	15013	its
O	15014	15024	decompiled
O	15025	15029	with
O	15030	15035	javap
O	15036	15037	-
O	15037	15038	c
O	15039	15060	ClassWithTheseMethods
O	15061	15069	versions
O	15070	15073	you
O	15074	15078	will
O	15079	15082	see
O	15083	15084	#
O	15084	15087	pre
O	15088	15091	and
O	15092	15093	#
O	15093	15096	pre
O	15097	15099	So
O	15100	15102	if
O	15103	15110	Strings
O	15111	15114	are
O	15115	15118	not
O	15119	15124	final
O	15125	15133	compiler
O	15134	15138	will
O	15139	15143	have
O	15144	15146	to
O	15147	15150	use
B-api_mention	15151	15164	StringBuilder
O	15165	15167	to
O	15168	15179	concatenate
O	15180	15184	str1
O	15185	15188	and
O	15189	15193	str2
O	15194	15196	so
B-api_mention	15197	15203	String
O	15204	15210	concat
O	15210	15211	=
O	15211	15215	str1
O	15215	15216	+
O	15216	15220	str2
O	15220	15221	;
O	15222	15226	will
O	15227	15229	be
O	15230	15238	compiled
O	15239	15241	to
B-api_mention	15242	15248	String
O	15249	15255	concat
O	15256	15257	=
O	15258	15261	new
B-api_mention	15262	15275	StringBuilder
I-api_mention	15275	15276	(
I-api_mention	15276	15280	args
I-api_mention	15280	15281	)
I-api_mention	15281	15282	.
I-api_mention	15282	15288	append
I-api_mention	15288	15289	(
I-api_mention	15289	15293	args
I-api_mention	15293	15294	)
I-api_mention	15294	15295	.
I-api_mention	15295	15303	toString
I-api_mention	15303	15304	(
I-api_mention	15304	15308	args
I-api_mention	15308	15309	)
O	15309	15310	;
O	15311	15316	which
O	15317	15322	means
O	15323	15327	that
O	15328	15334	concat
O	15335	15339	will
O	15340	15342	be
O	15343	15350	created
O	15351	15353	at
O	15354	15361	runtime
O	15362	15364	so
O	15365	15369	will
O	15370	15373	not
O	15374	15378	come
O	15379	15383	from
B-api_mention	15384	15390	String
O	15391	15395	pool
O	15395	15396	.

O	15397	15401	Also
O	15402	15404	if
O	15405	15412	Strings
O	15413	15416	are
O	15417	15422	final
O	15423	15427	then
O	15428	15436	compiler
O	15437	15440	can
O	15441	15447	assume
O	15448	15452	that
O	15453	15457	they
O	15458	15462	will
O	15463	15468	never
O	15469	15475	change
O	15476	15478	so
O	15479	15486	instead
O	15487	15489	of
O	15490	15495	using
B-api_mention	15496	15509	StringBuilder
O	15510	15512	it
O	15513	15516	can
O	15517	15523	safely
O	15524	15535	concatenate
O	15536	15539	its
O	15540	15546	values
O	15547	15549	so
B-api_mention	15550	15556	String
O	15557	15563	concat
O	15564	15565	=
O	15566	15570	str1
O	15571	15572	+
O	15573	15577	str2
O	15577	15578	;
O	15579	15582	can
O	15583	15585	be
O	15586	15593	changed
O	15594	15596	to
B-api_mention	15597	15603	String
O	15604	15610	concat
O	15611	15612	=
O	15613	15626	StringLiteral
O	15627	15628	+
O	15629	15642	StringLiteral
O	15642	15643	;
O	15644	15647	and
O	15648	15660	concatenated
O	15661	15665	into
B-api_mention	15666	15672	String
O	15673	15679	concat
O	15680	15681	=
O	15682	15695	StringLiteral
O	15695	15696	;
O	15697	15702	which
O	15703	15708	means
O	15709	15713	that
O	15714	15721	concate
O	15722	15726	will
O	15727	15733	become
O	15734	15739	sting
O	15740	15747	literal
O	15748	15753	which
O	15754	15758	will
O	15759	15761	be
O	15762	15770	interned
O	15771	15773	in
O	15774	15780	string
O	15781	15785	pool
O	15786	15789	and
O	15790	15794	then
O	15795	15803	compared
O	15804	15808	with
O	15809	15813	same
O	15814	15820	string
O	15821	15828	literal
O	15829	15833	from
O	15834	15838	that
O	15839	15843	pool
O	15844	15846	in
O	15847	15849	if
O	15850	15859	statement
O	15859	15860	.

O	15862	15870	Question
O	15870	15871	-
O	15871	15879	18777989
O	15879	15880	,
O	15881	15887	answer
O	15887	15888	-
O	15888	15896	18778228

O	15897	15900	You
O	15901	15905	made
O	15906	15907	a
O	15908	15912	good
O	15913	15920	summery
O	15921	15923	of
O	15924	15927	the
O	15928	15937	practical
O	15938	15949	differences
O	15950	15952	in
O	15953	15956	use
O	15957	15960	and
O	15961	15975	implementation
O	15976	15979	but
O	15980	15983	did
O	15984	15987	not
O	15988	15991	say
O	15992	16000	anything
O	16001	16006	about
O	16007	16010	the
O	16011	16021	difference
O	16022	16024	in
O	16025	16032	meaning
O	16032	16033	.

O	16034	16036	An
O	16037	16046	interface
O	16047	16049	is
O	16050	16051	a
O	16052	16063	description
O	16064	16066	of
O	16067	16070	the
O	16071	16080	behaviour
O	16081	16083	an
O	16084	16096	implementing
O	16097	16102	class
O	16103	16107	will
O	16108	16112	have
O	16112	16113	.

O	16114	16117	The
O	16118	16130	implementing
O	16131	16136	class
O	16137	16144	ensures
O	16144	16145	,
O	16146	16150	that
O	16151	16153	it
O	16154	16158	will
O	16159	16163	have
O	16164	16169	these
O	16170	16177	methods
O	16178	16182	that
O	16183	16186	can
O	16187	16189	be
O	16190	16194	used
O	16195	16197	on
O	16198	16200	it
O	16200	16201	.

O	16202	16204	It
O	16205	16207	is
O	16208	16217	basically
O	16218	16219	a
O	16220	16228	contract
O	16229	16231	or
O	16232	16233	a
O	16234	16241	promise
O	16242	16245	the
O	16246	16251	class
O	16252	16255	has
O	16256	16258	to
O	16259	16263	make
O	16263	16264	.

O	16265	16267	An
O	16268	16276	abstract
O	16277	16282	class
O	16283	16285	is
O	16286	16287	a
O	16288	16293	basis
O	16294	16297	for
O	16298	16307	different
O	16308	16318	subclasses
O	16319	16323	that
O	16324	16329	share
O	16330	16339	behaviour
O	16340	16345	which
O	16346	16350	does
O	16351	16354	not
O	16355	16359	need
O	16360	16362	to
O	16363	16365	be
O	16366	16376	repeatedly
O	16377	16379	be
O	16380	16387	created
O	16387	16388	.

O	16389	16399	Subclasses
O	16400	16404	must
O	16405	16413	complete
O	16414	16417	the
O	16418	16427	behaviour
O	16428	16431	and
O	16432	16436	have
O	16437	16440	the
O	16441	16447	option
O	16448	16450	to
O	16451	16459	override
O	16460	16469	predefine
O	16470	16479	behaviour
O	16480	16481	(
O	16481	16483	as
O	16484	16488	long
O	16489	16491	as
O	16492	16494	it
O	16495	16497	is
O	16498	16501	not
O	16502	16509	defined
O	16510	16512	as
O	16513	16518	final
O	16519	16521	or
O	16522	16529	private
O	16530	16531	)
O	16531	16532	.

O	16533	16536	You
O	16537	16541	will
O	16542	16546	find
O	16547	16551	good
O	16552	16560	examples
O	16561	16563	in
O	16564	16567	the
O	16568	16572	java
O	16572	16573	.
O	16573	16577	util
O	16578	16585	package
O	16586	16591	which
O	16592	16600	includes
O	16601	16611	interfaces
O	16612	16616	like
B-api_mention	16617	16621	List
O	16622	16625	and
O	16626	16634	abstract
O	16635	16642	classes
O	16643	16647	like
B-api_mention	16648	16660	AbstractList
O	16661	16666	which
O	16667	16674	already
O	16675	16685	implements
O	16686	16689	the
O	16690	16699	interface
O	16699	16700	.

O	16701	16704	The
O	16705	16713	official
O	16714	16727	documentation
O	16728	16737	describes
O	16738	16741	the
B-api_mention	16742	16754	AbstractList
O	16755	16757	as
O	16758	16765	follows
O	16765	16766	:
O	16767	16768	#
O	16768	16778	blockquote

O	16780	16788	Question
O	16788	16789	-
O	16789	16797	18777989
O	16797	16798	,
O	16799	16805	answer
O	16805	16806	-
O	16806	16814	37905386

O	16815	16819	Many
O	16820	16826	junior
O	16827	16837	developers
O	16838	16842	make
O	16843	16846	the
O	16847	16854	mistake
O	16855	16857	of
O	16858	16866	thinking
O	16867	16869	of
O	16870	16880	interfaces
O	16880	16881	,
O	16882	16890	abstract
O	16891	16894	and
O	16895	16903	concrete
O	16904	16911	classes
O	16912	16914	as
O	16915	16921	slight
O	16922	16932	variations
O	16933	16935	of
O	16936	16939	the
O	16940	16944	same
O	16945	16950	thing
O	16950	16951	,
O	16952	16955	and
O	16956	16962	choose
O	16963	16966	one
O	16967	16969	of
O	16970	16974	them
O	16975	16981	purely
O	16982	16984	on
O	16985	16994	technical
O	16995	17002	grounds
O	17002	17003	:
O	17004	17006	Do
O	17007	17008	I
O	17009	17013	need
O	17014	17022	multiple
O	17023	17034	inheritance
O	17034	17035	?

O	17036	17038	Do
O	17039	17040	I
O	17041	17045	need
O	17046	17050	some
O	17051	17056	place
O	17057	17059	to
O	17060	17063	put
O	17064	17070	common
O	17071	17078	methods
O	17078	17079	?

O	17080	17082	Do
O	17083	17084	I
O	17085	17089	need
O	17090	17092	to
O	17093	17099	bother
O	17100	17104	with
O	17105	17114	something
O	17115	17120	other
O	17121	17125	than
O	17126	17130	just
O	17131	17132	a
O	17133	17141	concrete
O	17142	17147	class
O	17147	17148	?

O	17149	17153	This
O	17154	17156	is
O	17157	17162	wrong
O	17162	17163	,
O	17164	17167	and
O	17168	17174	hidden
O	17175	17177	in
O	17178	17183	these
O	17184	17193	questions
O	17194	17196	is
O	17197	17200	the
O	17201	17205	main
O	17206	17213	problem
O	17213	17214	:
O	17215	17216	"
O	17216	17217	I
O	17217	17218	"
O	17219	17220	.

O	17221	17225	When
O	17226	17229	you
O	17230	17235	write
O	17236	17240	code
O	17241	17244	for
O	17245	17253	yourself
O	17253	17254	,
O	17255	17257	by
O	17258	17266	yourself
O	17266	17267	,
O	17268	17271	you
O	17272	17278	rarely
O	17279	17284	think
O	17285	17287	of
O	17288	17293	other
O	17294	17301	present
O	17302	17304	or
O	17305	17311	future
O	17312	17322	developers
O	17323	17330	working
O	17331	17333	on
O	17334	17336	or
O	17337	17341	with
O	17342	17346	your
O	17347	17351	code
O	17351	17352	.

O	17353	17363	Interfaces
O	17364	17367	and
O	17368	17376	abstract
O	17377	17384	classes
O	17384	17385	,
O	17386	17394	although
O	17395	17405	apparently
O	17406	17413	similar
O	17414	17418	from
O	17419	17420	a
O	17421	17430	technical
O	17431	17436	point
O	17437	17439	of
O	17440	17444	view
O	17444	17445	,
O	17446	17450	have
O	17451	17461	completely
O	17462	17471	different
O	17472	17480	meanings
O	17481	17484	and
O	17485	17493	purposes
O	17493	17494	.

O	17495	17502	Summary
O	17503	17504	#
O	17504	17506	li
O	17507	17509	An
O	17510	17519	interface
O	17520	17527	defines
O	17528	17529	a
O	17530	17538	contract
O	17539	17543	that
O	17544	17548	some
O	17549	17563	implementation
O	17564	17568	will
O	17569	17576	fulfill
O	17577	17580	for
O	17581	17584	you
O	17585	17586	.

O	17587	17588	#
O	17588	17590	li
O	17591	17593	An
O	17594	17602	abstract
O	17603	17608	class
O	17609	17617	provides
O	17618	17619	a
O	17620	17627	default
O	17628	17636	behavior
O	17637	17641	that
O	17642	17646	your
O	17647	17661	implementation
O	17662	17665	can
O	17666	17671	reuse
O	17671	17672	.

O	17673	17678	These
O	17679	17682	two
O	17683	17689	points
O	17690	17695	above
O	17696	17698	is
O	17699	17703	what
O	17704	17705	I
O	17705	17706	'
O	17706	17707	m
O	17708	17715	looking
O	17716	17719	for
O	17720	17724	when
O	17725	17737	interviewing
O	17737	17738	,
O	17739	17742	and
O	17743	17745	is
O	17746	17747	a
O	17748	17755	compact
O	17756	17762	enough
O	17763	17770	summary
O	17770	17771	.

O	17772	17776	Read
O	17777	17779	on
O	17780	17783	for
O	17784	17788	more
O	17789	17796	details
O	17796	17797	.

O	17798	17809	Alternative
O	17810	17817	summary
O	17818	17819	#
O	17819	17821	li
O	17822	17824	An
O	17825	17834	interface
O	17835	17837	is
O	17838	17841	for
O	17842	17850	defining
O	17851	17857	public
O	17858	17862	APIs
O	17863	17864	#
O	17864	17866	li
O	17867	17869	An
O	17870	17878	abstract
O	17879	17884	class
O	17885	17887	is
O	17888	17891	for
O	17892	17900	internal
O	17901	17904	use
O	17904	17905	,
O	17906	17909	and
O	17910	17913	for
O	17914	17922	defining
O	17923	17927	SPIs
O	17928	17930	By
O	17931	17938	example
O	17939	17941	To
O	17942	17945	put
O	17946	17948	it
O	17949	17960	differently
O	17960	17961	:
O	17962	17963	A
O	17964	17972	concrete
O	17973	17978	class
O	17979	17983	does
O	17984	17987	the
O	17988	17994	actual
O	17995	17999	work
O	17999	18000	,
O	18001	18003	in
O	18004	18005	a
O	18006	18010	very
O	18011	18019	specific
O	18020	18023	way
O	18023	18024	.

O	18025	18028	For
O	18029	18036	example
O	18036	18037	,
O	18038	18040	an
B-api_mention	18041	18050	ArrayList
O	18051	18055	uses
O	18056	18057	a
O	18058	18068	contiguous
O	18069	18073	area
O	18074	18076	of
O	18077	18083	memory
O	18084	18086	to
O	18087	18092	store
O	18093	18094	a
O	18095	18099	list
O	18100	18102	of
O	18103	18110	objects
O	18111	18113	in
O	18114	18115	a
O	18116	18123	compact
O	18124	18130	manner
O	18131	18136	which
O	18137	18143	offers
O	18144	18148	fast
O	18149	18155	random
O	18156	18162	access
O	18162	18163	,
O	18164	18173	iteration
O	18173	18174	,
O	18175	18178	and
O	18179	18181	in
O	18181	18182	-
O	18182	18187	place
O	18188	18195	changes
O	18195	18196	,
O	18197	18200	but
O	18201	18203	is
O	18204	18212	terrible
O	18213	18215	at
O	18216	18226	insertions
O	18226	18227	,
O	18228	18237	deletions
O	18237	18238	,
O	18239	18242	and
O	18243	18255	occasionally
O	18256	18260	even
O	18261	18270	additions
O	18270	18271	;
O	18272	18281	meanwhile
O	18281	18282	,
O	18283	18284	a
B-api_mention	18285	18295	LinkedList
O	18296	18300	uses
O	18301	18307	double
O	18307	18308	-
O	18308	18314	linked
O	18315	18320	nodes
O	18321	18323	to
O	18324	18329	store
O	18330	18331	a
O	18332	18336	list
O	18337	18339	of
O	18340	18347	objects
O	18347	18348	,
O	18349	18354	which
O	18355	18362	instead
O	18363	18369	offers
O	18370	18374	fast
O	18375	18384	iteration
O	18384	18385	,
O	18386	18388	in
O	18388	18389	-
O	18389	18394	place
O	18395	18402	changes
O	18402	18403	,
O	18404	18407	and
O	18408	18417	insertion
O	18417	18418	/
O	18418	18426	deletion
O	18426	18427	/
O	18427	18435	addition
O	18435	18436	,
O	18437	18440	but
O	18441	18443	is
O	18444	18452	terrible
O	18453	18455	at
O	18456	18462	random
O	18463	18469	access
O	18469	18470	.

O	18471	18476	These
O	18477	18480	two
O	18481	18486	types
O	18487	18489	of
O	18490	18495	lists
O	18496	18499	are
O	18500	18509	optimized
O	18510	18513	for
O	18514	18523	different
O	18524	18527	use
O	18528	18533	cases
O	18533	18534	,
O	18535	18538	and
O	18539	18541	it
O	18542	18549	matters
O	18550	18551	a
O	18552	18555	lot
O	18556	18559	how
O	18560	18563	you
O	18563	18564	'
O	18564	18566	re
O	18567	18572	going
O	18573	18575	to
O	18576	18579	use
O	18580	18584	them
O	18584	18585	.

O	18586	18590	When
O	18591	18594	you
O	18594	18595	'
O	18595	18597	re
O	18598	18604	trying
O	18605	18607	to
O	18608	18615	squeeze
O	18616	18627	performance
O	18628	18631	out
O	18632	18634	of
O	18635	18636	a
O	18637	18641	list
O	18642	18646	that
O	18647	18650	you
O	18650	18651	'
O	18651	18653	re
O	18654	18661	heavily
O	18662	18673	interacting
O	18674	18678	with
O	18678	18679	,
O	18680	18683	and
O	18684	18688	when
O	18689	18696	picking
O	18697	18700	the
O	18701	18705	type
O	18706	18708	of
O	18709	18713	list
O	18714	18716	is
O	18717	18719	up
O	18720	18722	to
O	18723	18726	you
O	18726	18727	,
O	18728	18731	you
O	18732	18738	should
O	18739	18748	carefully
O	18749	18753	pick
O	18754	18759	which
O	18760	18763	one
O	18764	18767	you
O	18767	18768	'
O	18768	18770	re
O	18771	18784	instantiating
O	18784	18785	.

O	18786	18788	On
O	18789	18792	the
O	18793	18798	other
O	18799	18803	hand
O	18803	18804	,
O	18805	18809	high
O	18810	18815	level
O	18816	18821	users
O	18822	18824	of
O	18825	18826	a
O	18827	18831	list
O	18832	18835	don
O	18835	18836	'
O	18836	18837	t
O	18838	18844	really
O	18845	18849	care
O	18850	18853	how
O	18854	18856	it
O	18857	18859	is
O	18860	18868	actually
O	18869	18880	implemented
O	18880	18881	,
O	18882	18885	and
O	18886	18890	they
O	18891	18897	should
O	18898	18900	be
O	18901	18910	insulated
O	18911	18915	from
O	18916	18921	these
O	18922	18929	details
O	18929	18930	.

O	18931	18934	Let
O	18934	18935	'
O	18935	18936	s
O	18937	18944	imagine
O	18945	18949	that
O	18950	18954	Java
O	18955	18959	didn
O	18959	18960	'
O	18960	18961	t
O	18962	18968	expose
O	18969	18972	the
B-api_mention	18973	18977	List
O	18978	18987	interface
O	18987	18988	,
O	18989	18992	but
O	18993	18997	only
O	18998	19001	had
O	19002	19003	a
O	19004	19012	concrete
B-api_mention	19013	19017	List
O	19018	19023	class
O	19024	19028	that
O	19028	19029	'
O	19029	19030	s
O	19031	19039	actually
O	19040	19044	what
B-api_mention	19045	19055	LinkedList
O	19056	19058	is
O	19059	19064	right
O	19065	19068	now
O	19068	19069	.

O	19070	19073	All
O	19074	19078	Java
O	19079	19089	developers
O	19090	19095	would
O	19096	19100	have
O	19101	19109	tailored
O	19110	19115	their
O	19116	19120	code
O	19121	19123	to
O	19124	19127	fit
O	19128	19131	the
O	19132	19146	implementation
O	19147	19154	details
O	19154	19155	:
O	19156	19161	avoid
O	19162	19168	random
O	19169	19175	access
O	19175	19176	,
O	19177	19180	add
O	19181	19182	a
O	19183	19188	cache
O	19189	19191	to
O	19192	19197	speed
O	19198	19200	up
O	19201	19207	access
O	19207	19208	,
O	19209	19211	or
O	19212	19216	just
O	19217	19228	reimplement
B-api_mention	19229	19238	ArrayList
O	19239	19241	on
O	19242	19247	their
O	19248	19251	own
O	19251	19252	,
O	19253	19261	although
O	19262	19264	it
O	19265	19270	would
O	19271	19273	be
O	19274	19286	incompatible
O	19287	19291	with
O	19292	19295	all
O	19296	19299	the
O	19300	19305	other
O	19306	19310	code
O	19311	19315	that
O	19316	19324	actually
O	19325	19330	works
O	19331	19335	with
B-api_mention	19336	19340	List
O	19341	19345	only
O	19345	19346	.

O	19347	19351	That
O	19352	19357	would
O	19358	19360	be
O	19361	19369	terrible
O	19369	19370	.
O	19370	19371	.
O	19371	19372	.

O	19373	19376	But
O	19377	19380	now
O	19381	19388	imagine
O	19389	19393	that
O	19394	19397	the
O	19398	19402	Java
O	19403	19410	masters
O	19411	19419	actually
O	19420	19427	realize
O	19428	19432	that
O	19433	19434	a
O	19435	19441	linked
O	19442	19446	list
O	19447	19449	is
O	19450	19458	terrible
O	19459	19462	for
O	19463	19467	most
O	19468	19474	actual
O	19475	19478	use
O	19479	19484	cases
O	19484	19485	,
O	19486	19489	and
O	19490	19497	decided
O	19498	19500	to
O	19501	19507	switch
O	19508	19512	over
O	19513	19515	to
O	19516	19518	an
O	19519	19524	array
O	19525	19529	list
O	19530	19533	for
O	19534	19539	their
O	19540	19544	only
B-api_mention	19545	19549	List
O	19550	19555	class
O	19556	19565	available
O	19565	19566	.

O	19567	19571	This
O	19572	19577	would
O	19578	19584	affect
O	19585	19588	the
O	19589	19600	performance
O	19601	19603	of
O	19604	19609	every
O	19610	19614	Java
O	19615	19622	program
O	19623	19625	in
O	19626	19629	the
O	19630	19635	world
O	19635	19636	,
O	19637	19640	and
O	19641	19647	people
O	19648	19654	wouldn
O	19654	19655	'
O	19655	19656	t
O	19657	19659	be
O	19660	19665	happy
O	19666	19671	about
O	19672	19674	it
O	19674	19675	.

O	19676	19679	And
O	19680	19683	the
O	19684	19688	main
O	19689	19696	culprit
O	19697	19699	is
O	19700	19704	that
O	19705	19719	implementation
O	19720	19727	details
O	19728	19732	were
O	19733	19742	available
O	19742	19743	,
O	19744	19747	and
O	19748	19751	the
O	19752	19762	developers
O	19763	19770	assumed
O	19771	19775	that
O	19776	19781	those
O	19782	19789	details
O	19790	19793	are
O	19794	19795	a
O	19796	19805	permanent
O	19806	19814	contract
O	19815	19819	that
O	19820	19824	they
O	19825	19828	can
O	19829	19833	rely
O	19834	19836	on
O	19836	19837	.

O	19838	19842	This
O	19843	19845	is
O	19846	19849	why
O	19850	19852	it
O	19852	19853	'
O	19853	19854	s
O	19855	19864	important
O	19865	19867	to
O	19868	19872	hide
O	19873	19887	implementation
O	19888	19895	details
O	19895	19896	,
O	19897	19900	and
O	19901	19905	only
O	19906	19912	define
O	19913	19915	an
O	19916	19924	abstract
O	19925	19933	contract
O	19933	19934	.

O	19935	19939	This
O	19940	19942	is
O	19943	19946	the
O	19947	19954	purpose
O	19955	19957	of
O	19958	19960	an
O	19961	19970	interface
O	19970	19971	:
O	19972	19978	define
O	19979	19983	what
O	19984	19988	kind
O	19989	19991	of
O	19992	19997	input
O	19998	19999	a
O	20000	20006	method
O	20007	20014	accepts
O	20014	20015	,
O	20016	20019	and
O	20020	20024	what
O	20025	20029	kind
O	20030	20032	of
O	20033	20039	output
O	20040	20042	is
O	20043	20051	expected
O	20051	20052	,
O	20053	20060	without
O	20061	20069	exposing
O	20070	20073	all
O	20074	20077	the
O	20078	20082	guts
O	20083	20087	that
O	20088	20093	would
O	20094	20099	tempt
O	20100	20111	programmers
O	20112	20114	to
O	20115	20120	tweak
O	20121	20126	their
O	20127	20131	code
O	20132	20134	to
O	20135	20138	fit
O	20139	20142	the
O	20143	20151	internal
O	20152	20159	details
O	20160	20164	that
O	20165	20170	might
O	20171	20177	change
O	20178	20182	with
O	20183	20186	any
O	20187	20193	future
O	20194	20200	update
O	20200	20201	.

O	20202	20204	An
O	20205	20213	abstract
O	20214	20219	class
O	20220	20222	is
O	20223	20225	in
O	20226	20229	the
O	20230	20236	middle
O	20237	20244	between
O	20245	20255	interfaces
O	20256	20259	and
O	20260	20268	concrete
O	20269	20276	classes
O	20276	20277	.

O	20278	20280	It
O	20281	20283	is
O	20284	20292	supposed
O	20293	20295	to
O	20296	20300	help
O	20301	20316	implementations
O	20317	20322	share
O	20323	20329	common
O	20330	20332	or
O	20333	20339	boring
O	20340	20344	code
O	20344	20345	.

O	20346	20349	For
O	20350	20357	example
O	20357	20358	,
B-api_mention	20359	20377	AbstractCollection
O	20378	20386	provides
O	20387	20392	basic
O	20393	20408	implementations
O	20409	20412	for
B-api_mention	20413	20420	isEmpty
O	20421	20426	based
O	20427	20429	on
O	20430	20434	size
O	20435	20437	is
O	20438	20439	0
O	20439	20440	,
B-api_mention	20441	20449	contains
O	20450	20452	as
O	20453	20460	iterate
O	20461	20464	and
O	20465	20472	compare
O	20472	20473	,
B-api_mention	20474	20480	addAll
O	20481	20483	as
O	20484	20492	repeated
B-api_mention	20493	20496	add
O	20497	20498	,
O	20499	20502	and
O	20503	20505	so
O	20506	20508	on
O	20508	20509	.

O	20510	20514	This
O	20515	20519	lets
O	20520	20535	implementations
O	20536	20541	focus
O	20542	20544	on
O	20545	20548	the
O	20549	20556	crucial
O	20557	20562	parts
O	20563	20567	that
O	20568	20581	differentiate
O	20582	20589	between
O	20590	20594	them
O	20594	20595	:
O	20596	20599	how
O	20600	20602	to
O	20603	20611	actually
O	20612	20617	store
O	20618	20621	and
O	20622	20630	retrieve
O	20631	20635	data
O	20635	20636	.

O	20637	20644	Another
O	20645	20656	perspective
O	20656	20657	:
O	20658	20662	APIs
O	20663	20669	versus
O	20670	20674	SPIs
O	20675	20685	Interfaces
O	20686	20689	are
O	20690	20693	low
O	20693	20694	-
O	20694	20702	cohesion
O	20703	20711	gateways
O	20712	20719	between
O	20720	20729	different
O	20730	20735	parts
O	20736	20738	of
O	20739	20743	code
O	20743	20744	.

O	20745	20749	They
O	20750	20755	allow
O	20756	20765	libraries
O	20766	20768	to
O	20769	20774	exist
O	20775	20778	and
O	20779	20785	evolve
O	20786	20793	without
O	20794	20802	breaking
O	20803	20808	every
O	20809	20816	library
O	20817	20821	user
O	20822	20826	when
O	20827	20836	something
O	20837	20844	changes
O	20845	20855	internally
O	20855	20856	.

O	20857	20859	It
O	20859	20860	'
O	20860	20861	s
O	20862	20868	called
O	20869	20880	Application
O	20881	20892	Programming
O	20893	20902	Interface
O	20903	20911	Abstract
O	20912	20919	classes
O	20920	20923	are
O	20924	20928	high
O	20928	20929	-
O	20929	20937	cohesion
O	20938	20945	helpers
O	20946	20948	to
O	20949	20951	be
O	20952	20956	used
O	20957	20961	when
O	20962	20974	implementing
O	20975	20977	an
O	20978	20987	interface
O	20987	20988	,
O	20989	20997	assuming
O	20998	21002	some
O	21003	21008	level
O	21009	21011	of
O	21012	21026	implementation
O	21027	21034	details
O	21034	21035	.

O	21036	21049	Alternatively
O	21049	21050	,
O	21051	21059	abstract
O	21060	21067	classes
O	21068	21071	are
O	21072	21076	used
O	21077	21080	for
O	21081	21089	defining
O	21090	21094	SPIs
O	21094	21095	,
O	21096	21103	Service
O	21104	21112	Provider
O	21113	21123	Interfaces
O	21123	21124	.

O	21125	21128	The
O	21129	21139	difference
O	21140	21147	between
O	21148	21150	an
O	21151	21154	API
O	21155	21158	and
O	21159	21161	an
O	21162	21165	SPI
O	21166	21168	is
O	21169	21175	subtle
O	21175	21176	,
O	21177	21180	but
O	21181	21190	important
O	21190	21191	:
O	21192	21195	for
O	21196	21198	an
O	21199	21202	API
O	21202	21203	,
O	21204	21207	the
O	21208	21213	focus
O	21214	21216	is
O	21217	21219	on
O	21220	21223	who
O	21224	21228	uses
O	21229	21231	it
O	21231	21232	,
O	21233	21236	and
O	21237	21240	for
O	21241	21243	an
O	21244	21247	SPI
O	21248	21251	the
O	21252	21257	focus
O	21258	21260	is
O	21261	21263	on
O	21264	21267	who
O	21268	21278	implements
O	21279	21281	it
O	21281	21282	.

O	21283	21289	Adding
O	21290	21297	methods
O	21298	21300	to
O	21301	21303	an
O	21304	21307	API
O	21308	21310	is
O	21311	21315	easy
O	21315	21316	,
O	21317	21320	all
O	21321	21329	existing
O	21330	21335	users
O	21336	21338	of
O	21339	21342	the
O	21343	21346	API
O	21347	21351	will
O	21352	21357	still
O	21358	21365	compile
O	21365	21366	.

O	21367	21373	Adding
O	21374	21381	methods
O	21382	21384	to
O	21385	21387	an
O	21388	21391	SPI
O	21392	21394	is
O	21395	21399	hard
O	21399	21400	,
O	21401	21406	since
O	21407	21412	every
O	21413	21420	service
O	21421	21429	provider
O	21430	21431	(
O	21431	21439	concrete
O	21440	21454	implementation
O	21454	21455	)
O	21456	21460	will
O	21461	21465	have
O	21466	21468	to
O	21469	21478	implement
O	21479	21482	the
O	21483	21486	new
O	21487	21494	methods
O	21494	21495	.

O	21496	21498	If
O	21499	21509	interfaces
O	21510	21513	are
O	21514	21518	used
O	21519	21521	to
O	21522	21528	define
O	21529	21531	an
O	21532	21535	SPI
O	21535	21536	,
O	21537	21538	a
O	21539	21547	provider
O	21548	21552	will
O	21553	21557	have
O	21558	21560	to
O	21561	21568	release
O	21569	21570	a
O	21571	21574	new
O	21575	21582	version
O	21583	21591	whenever
O	21592	21595	the
O	21596	21599	SPI
O	21600	21608	contract
O	21609	21616	changes
O	21616	21617	.

O	21618	21620	If
O	21621	21629	abstract
O	21630	21637	classes
O	21638	21641	are
O	21642	21646	used
O	21647	21654	instead
O	21654	21655	,
O	21656	21659	new
O	21660	21667	methods
O	21668	21673	could
O	21674	21680	either
O	21681	21683	be
O	21684	21691	defined
O	21692	21694	in
O	21695	21700	terms
O	21701	21703	of
O	21704	21712	existing
O	21713	21721	abstract
O	21722	21729	methods
O	21729	21730	,
O	21731	21733	or
O	21734	21736	as
O	21737	21742	empty
O	21743	21748	throw
O	21749	21752	not
O	21753	21764	implemented
O	21765	21774	exception
O	21775	21780	stubs
O	21780	21781	,
O	21782	21787	which
O	21788	21792	will
O	21793	21795	at
O	21796	21801	least
O	21802	21807	allow
O	21808	21810	an
O	21811	21816	older
O	21817	21824	version
O	21825	21827	of
O	21828	21829	a
O	21830	21837	service
O	21838	21852	implementation
O	21853	21855	to
O	21856	21861	still
O	21862	21869	compile
O	21870	21873	and
O	21874	21877	run
O	21877	21878	.

O	21879	21880	A
O	21881	21885	note
O	21886	21888	on
O	21889	21893	Java
O	21894	21895	8
O	21896	21899	and
O	21900	21907	default
O	21908	21915	methods
O	21916	21924	Although
O	21925	21929	Java
O	21930	21931	8
O	21932	21942	introduced
O	21943	21950	default
O	21951	21958	methods
O	21959	21962	for
O	21963	21973	interfaces
O	21973	21974	,
O	21975	21980	which
O	21981	21986	makes
O	21987	21990	the
O	21991	21995	line
O	21996	22003	between
O	22004	22014	interfaces
O	22015	22018	and
O	22019	22027	abstract
O	22028	22035	classes
O	22036	22040	even
O	22041	22049	blurrier
O	22049	22050	,
O	22051	22055	this
O	22056	22060	wasn
O	22060	22061	'
O	22061	22062	t
O	22063	22065	so
O	22066	22070	that
O	22071	22086	implementations
O	22087	22090	can
O	22091	22096	reuse
O	22097	22101	code
O	22101	22102	,
O	22103	22106	but
O	22107	22109	to
O	22110	22114	make
O	22115	22117	it
O	22118	22124	easier
O	22125	22127	to
O	22128	22134	change
O	22135	22145	interfaces
O	22146	22150	that
O	22151	22156	serve
O	22157	22161	both
O	22162	22164	as
O	22165	22167	an
O	22168	22171	API
O	22172	22175	and
O	22176	22178	as
O	22179	22181	an
O	22182	22185	SPI
O	22186	22187	(
O	22187	22189	or
O	22190	22193	are
O	22194	22201	wrongly
O	22202	22206	used
O	22207	22210	for
O	22211	22219	defining
O	22220	22224	SPIs
O	22225	22232	instead
O	22233	22235	of
O	22236	22244	abstract
O	22245	22252	classes
O	22252	22253	)
O	22253	22254	.

O	22255	22256	"
O	22256	22260	Book
O	22261	22270	knowledge
O	22270	22271	"
O	22272	22275	The
O	22276	22285	technical
O	22286	22293	details
O	22294	22302	provided
O	22303	22305	in
O	22306	22309	the
O	22310	22312	OP
O	22312	22313	'
O	22313	22314	s
O	22315	22321	answer
O	22322	22325	are
O	22326	22336	considered
O	22337	22338	"
O	22338	22342	book
O	22343	22352	knowledge
O	22352	22353	"
O	22354	22361	because
O	22362	22366	this
O	22367	22369	is
O	22370	22377	usually
O	22378	22381	the
O	22382	22390	approach
O	22391	22395	used
O	22396	22398	in
O	22399	22405	school
O	22406	22409	and
O	22410	22412	in
O	22413	22417	most
O	22418	22428	technology
O	22429	22434	books
O	22435	22440	about
O	22441	22442	a
O	22443	22451	language
O	22451	22452	:
O	22453	22457	what
O	22458	22459	a
O	22460	22465	thing
O	22466	22468	is
O	22468	22469	,
O	22470	22473	not
O	22474	22477	how
O	22478	22480	to
O	22481	22484	use
O	22485	22487	it
O	22488	22490	in
O	22491	22499	practice
O	22499	22500	,
O	22501	22511	especially
O	22512	22514	in
O	22515	22520	large
O	22521	22526	scale
O	22527	22539	applications
O	22539	22540	.

O	22541	22545	Here
O	22545	22546	'
O	22546	22547	s
O	22548	22550	an
O	22551	22558	analogy
O	22558	22559	:
O	22560	22568	supposed
O	22569	22572	the
O	22573	22581	question
O	22582	22585	was
O	22585	22586	:
O	22587	22588	#
O	22588	22598	blockquote
O	22599	22602	The
O	22603	22612	technical
O	22613	22619	answer
O	22620	22626	sounds
O	22627	22631	like
O	22631	22632	:
O	22633	22634	#
O	22634	22644	blockquote
O	22645	22649	That
O	22650	22652	is
O	22653	22656	all
O	22657	22661	true
O	22661	22662	,
O	22663	22666	but
O	22667	22677	completely
O	22678	22684	misses
O	22685	22688	the
O	22689	22695	points
O	22696	22700	that
O	22701	22705	they
O	22706	22709	are
O	22710	22713	two
O	22714	22724	completely
O	22725	22734	different
O	22735	22741	things
O	22741	22742	,
O	22743	22746	and
O	22747	22751	both
O	22752	22755	can
O	22756	22758	be
O	22759	22763	used
O	22764	22766	at
O	22767	22770	the
O	22771	22775	same
O	22776	22780	time
O	22781	22784	for
O	22785	22794	different
O	22795	22803	purposes
O	22803	22804	,
O	22805	22808	and
O	22809	22812	the
O	22813	22814	"
O	22814	22819	doing
O	22820	22822	it
O	22822	22823	"
O	22824	22830	aspect
O	22831	22833	is
O	22834	22837	not
O	22838	22841	the
O	22842	22846	most
O	22847	22856	important
O	22857	22862	thing
O	22863	22868	about
O	22869	22875	either
O	22876	22878	of
O	22879	22882	the
O	22883	22886	two
O	22887	22894	options
O	22894	22895	.

O	22896	22899	The
O	22900	22906	answer
O	22907	22912	lacks
O	22913	22924	perspective
O	22924	22925	,
O	22926	22928	it
O	22929	22934	shows
O	22935	22937	an
O	22938	22946	immature
O	22947	22950	way
O	22951	22953	of
O	22954	22962	thinking
O	22962	22963	,
O	22964	22969	while
O	22970	22979	correctly
O	22980	22990	presenting
O	22991	22995	true
O	22996	22997	"
O	22997	23002	facts
O	23002	23003	"
O	23003	23004	.

O	23006	23014	Question
O	23014	23015	-
O	23015	23023	19998454
O	23023	23024	,
O	23025	23031	answer
O	23031	23032	-
O	23032	23040	19998652

O	23041	23045	This
O	23046	23048	is
O	23049	23054	being
O	23055	23064	described
O	23065	23067	in
O	23068	23072	this
O	23073	23080	article
O	23081	23082	.

O	23083	23088	Think
O	23089	23094	about
B-api_mention	23095	23102	forEach
O	23103	23105	of
O	23106	23117	Collections
O	23117	23118	.

B-api_mention	23119	23123	List
I-api_mention	23123	23124	<
I-api_mention	23124	23125	T
I-api_mention	23125	23126	>
O	23127	23131	list
O	23132	23133	=
O	23134	23135	…
O	23136	23140	list
B-api_mention	23140	23141	.
I-api_mention	23141	23148	forEach
I-api_mention	23148	23149	(
I-api_mention	23149	23153	args
I-api_mention	23153	23154	)
O	23154	23155	;
O	23156	23157	#
O	23157	23167	blockquote

O	23169	23177	Question
O	23177	23178	-
O	23178	23186	19431234
O	23186	23187	,
O	23188	23194	answer
O	23194	23195	-
O	23195	23203	23526153

O	23204	23214	Everything
O	23215	23217	is
O	23218	23222	here
O	23223	23224	:
O	23225	23226	#
O	23226	23227	a
O	23228	23231	The
O	23232	23238	answer
O	23239	23243	with
O	23244	23245	"
O	23245	23250	round
O	23250	23251	-
O	23251	23259	tripping
O	23259	23260	"
O	23261	23263	is
O	23264	23267	not
O	23268	23273	exact
O	23274	23275	:
O	23276	23280	when
O	23281	23284	you
O	23285	23287	do
B-api_mention	23288	23301	LocalDateTime
O	23302	23305	ldt
O	23306	23307	=
B-api_mention	23308	23321	LocalDateTime
I-api_mention	23321	23322	.
I-api_mention	23322	23331	ofInstant
I-api_mention	23331	23332	(
I-api_mention	23332	23336	args
I-api_mention	23336	23337	)
O	23337	23338	;
O	23339	23341	if
O	23342	23346	your
O	23347	23353	system
O	23354	23362	timezone
O	23363	23365	is
O	23366	23369	not
O	23370	23373	UTC
O	23373	23374	/
O	23374	23377	GMT
O	23377	23378	,
O	23379	23382	you
O	23383	23389	change
O	23390	23393	the
O	23394	23398	time
O	23399	23400	!

O	23402	23410	Question
O	23410	23411	-
O	23411	23419	19431234
O	23419	23420	,
O	23421	23427	answer
O	23427	23428	-
O	23428	23436	23884116

O	23437	23440	the
O	23441	23450	following
O	23451	23456	seems
O	23457	23459	to
O	23460	23464	work
O	23465	23469	when
O	23470	23480	converting
O	23481	23485	from
O	23486	23489	new
O	23490	23493	API
B-api_mention	23494	23507	LocalDateTime
O	23508	23512	into
O	23513	23517	java
O	23517	23518	.
O	23518	23522	util
O	23522	23523	.
O	23523	23527	date
O	23527	23528	:
B-api_mention	23529	23533	Date
I-api_mention	23533	23534	.
I-api_mention	23534	23538	from
I-api_mention	23538	23539	(
I-api_mention	23539	23543	args
I-api_mention	23543	23544	)
O	23544	23545	;
O	23546	23549	the
O	23550	23557	reverse
O	23558	23568	conversion
O	23569	23572	can
O	23573	23575	be
O	23576	23577	(
O	23577	23586	hopefully
O	23586	23587	)
O	23588	23596	achieved
O	23597	23604	similar
O	23605	23608	way
O	23608	23609	.
O	23609	23610	.
O	23610	23611	.
O	23612	23616	hope
O	23617	23619	it
O	23620	23625	helps
O	23625	23626	.
O	23626	23627	.
O	23627	23628	.

O	23630	23638	Question
O	23638	23639	-
O	23639	23647	19431234
O	23647	23648	,
O	23649	23655	answer
O	23655	23656	-
O	23656	23664	23885950

O	23665	23670	Short
O	23671	23677	answer
O	23677	23678	:
O	23679	23680	#
O	23680	23683	pre
O	23684	23695	Explanation
O	23695	23696	:
O	23697	23698	(
O	23698	23703	based
O	23704	23706	on
O	23707	23711	this
O	23712	23720	question
O	23721	23726	about
B-api_mention	23727	23736	LocalDate
O	23737	23738	)
O	23739	23746	Despite
O	23747	23750	its
O	23751	23755	name
O	23755	23756	,
B-api_mention	23757	23761	java
I-api_mention	23761	23762	.
I-api_mention	23762	23766	util
I-api_mention	23766	23767	.
I-api_mention	23767	23771	Date
O	23772	23782	represents
O	23783	23785	an
O	23786	23793	instant
O	23794	23796	on
O	23797	23800	the
O	23801	23805	time
O	23805	23806	-
O	23806	23810	line
O	23810	23811	,
O	23812	23815	not
O	23816	23817	a
O	23818	23819	"
O	23819	23823	date
O	23823	23824	"
O	23824	23825	.

O	23826	23829	The
O	23830	23836	actual
O	23837	23841	data
O	23842	23848	stored
O	23849	23855	within
O	23856	23859	the
O	23860	23866	object
O	23867	23869	is
O	23870	23871	a
O	23872	23876	long
O	23877	23882	count
O	23883	23885	of
O	23886	23898	milliseconds
O	23899	23904	since
O	23905	23909	1970
O	23909	23910	-
O	23910	23912	01
O	23912	23913	-
O	23913	23918	01T00
O	23918	23919	:
O	23919	23922	00Z
O	23923	23924	(
O	23924	23932	midnight
O	23933	23935	at
O	23936	23939	the
O	23940	23945	start
O	23946	23948	of
O	23949	23953	1970
O	23954	23957	GMT
O	23957	23958	/
O	23958	23961	UTC
O	23961	23962	)
O	23962	23963	.

O	23964	23967	The
O	23968	23978	equivalent
O	23979	23984	class
O	23985	23987	to
B-api_mention	23988	23992	java
I-api_mention	23992	23993	.
I-api_mention	23993	23997	util
I-api_mention	23997	23998	.
I-api_mention	23998	24002	Date
O	24003	24005	in
O	24006	24009	JSR
O	24009	24010	-
O	24010	24013	310
O	24014	24016	is
B-api_mention	24017	24024	Instant
O	24025	24026	,
O	24027	24031	thus
O	24032	24037	there
O	24038	24041	are
O	24042	24052	convenient
O	24053	24060	methods
O	24061	24063	to
O	24064	24071	provide
O	24072	24075	the
O	24076	24086	conversion
O	24087	24089	to
O	24090	24093	and
O	24094	24097	fro
O	24097	24098	:
O	24099	24100	#
O	24100	24103	pre
O	24104	24105	A
B-api_mention	24106	24110	java
I-api_mention	24110	24111	.
I-api_mention	24111	24115	util
I-api_mention	24115	24116	.
I-api_mention	24116	24120	Date
O	24121	24129	instance
O	24130	24133	has
O	24134	24136	no
O	24137	24144	concept
O	24145	24147	of
O	24148	24152	time
O	24152	24153	-
O	24153	24157	zone
O	24157	24158	.

O	24159	24163	This
O	24164	24169	might
O	24170	24174	seem
O	24175	24182	strange
O	24183	24185	if
O	24186	24189	you
O	24190	24194	call
B-api_mention	24195	24203	toString
I-api_mention	24203	24204	(
I-api_mention	24204	24208	args
I-api_mention	24208	24209	)
O	24210	24212	on
O	24213	24214	a
B-api_mention	24215	24219	java
I-api_mention	24219	24220	.
I-api_mention	24220	24224	util
I-api_mention	24224	24225	.
I-api_mention	24225	24229	Date
O	24230	24231	,
O	24232	24239	because
O	24240	24243	the
B-api_mention	24244	24252	toString
O	24253	24255	is
O	24256	24264	relative
O	24265	24267	to
O	24268	24269	a
O	24270	24274	time
O	24274	24275	-
O	24275	24279	zone
O	24279	24280	.

O	24281	24288	However
O	24289	24293	that
O	24294	24300	method
O	24301	24309	actually
O	24310	24314	uses
O	24315	24319	Java
O	24319	24320	'
O	24320	24321	s
O	24322	24329	default
O	24330	24334	time
O	24334	24335	-
O	24335	24339	zone
O	24340	24342	on
O	24343	24346	the
O	24347	24350	fly
O	24351	24353	to
O	24354	24361	provide
O	24362	24365	the
O	24366	24372	string
O	24372	24373	.

O	24374	24377	The
O	24378	24382	time
O	24382	24383	-
O	24383	24387	zone
O	24388	24390	is
O	24391	24394	not
O	24395	24399	part
O	24400	24402	of
O	24403	24406	the
O	24407	24413	actual
O	24414	24419	state
O	24420	24422	of
B-api_mention	24423	24427	java
I-api_mention	24427	24428	.
I-api_mention	24428	24432	util
I-api_mention	24432	24433	.
I-api_mention	24433	24437	Date
O	24438	24439	.

O	24440	24442	An
O	24443	24450	Instant
O	24451	24455	also
O	24456	24460	does
O	24461	24464	not
O	24465	24472	contain
O	24473	24476	any
O	24477	24488	information
O	24489	24494	about
O	24495	24498	the
O	24499	24503	time
O	24503	24504	-
O	24504	24508	zone
O	24508	24509	.

O	24510	24514	Thus
O	24514	24515	,
O	24516	24518	to
O	24519	24526	convert
O	24527	24531	from
O	24532	24534	an
O	24535	24542	Instant
O	24543	24545	to
O	24546	24547	a
O	24548	24553	local
O	24554	24558	date
O	24558	24559	-
O	24559	24563	time
O	24564	24566	it
O	24567	24569	is
O	24570	24579	necessary
O	24580	24582	to
O	24583	24590	specify
O	24591	24592	a
O	24593	24597	time
O	24597	24598	-
O	24598	24602	zone
O	24602	24603	.

O	24604	24608	This
O	24609	24614	might
O	24615	24617	be
O	24618	24621	the
O	24622	24629	default
O	24630	24634	zone
O	24635	24636	-
B-api_mention	24637	24643	ZoneId
I-api_mention	24643	24644	.
I-api_mention	24644	24657	systemDefault
I-api_mention	24657	24658	(
I-api_mention	24658	24662	args
I-api_mention	24662	24663	)
O	24664	24665	-
O	24666	24668	or
O	24669	24671	it
O	24672	24677	might
O	24678	24680	be
O	24681	24682	a
O	24683	24687	time
O	24687	24688	-
O	24688	24692	zone
O	24693	24697	that
O	24698	24702	your
O	24703	24714	application
O	24715	24723	controls
O	24723	24724	,
O	24725	24729	such
O	24730	24732	as
O	24733	24734	a
O	24735	24739	time
O	24739	24740	-
O	24740	24744	zone
O	24745	24749	from
O	24750	24754	user
O	24755	24766	preferences
O	24766	24767	.

B-api_mention	24768	24781	LocalDateTime
O	24782	24785	has
O	24786	24787	a
O	24788	24798	convenient
O	24799	24806	factory
O	24807	24813	method
O	24814	24818	that
O	24819	24824	takes
O	24825	24829	both
O	24830	24833	the
O	24834	24841	instant
O	24842	24845	and
O	24846	24850	time
O	24850	24851	-
O	24851	24855	zone
O	24855	24856	:
O	24857	24858	#
O	24858	24861	pre
O	24862	24864	In
O	24865	24872	reverse
O	24872	24873	,
O	24874	24877	the
B-api_mention	24878	24891	LocalDateTime
O	24892	24895	the
O	24896	24900	time
O	24900	24901	-
O	24901	24905	zone
O	24906	24908	is
O	24909	24918	specified
O	24919	24921	by
O	24922	24929	calling
O	24930	24933	the
B-api_mention	24934	24940	atZone
I-api_mention	24940	24941	(
I-api_mention	24941	24945	args
I-api_mention	24945	24946	)
O	24947	24953	method
O	24953	24954	.

O	24955	24958	The
B-api_mention	24959	24972	ZonedDateTime
O	24973	24976	can
O	24977	24981	then
O	24982	24984	be
O	24985	24994	converted
O	24995	25003	directly
O	25004	25006	to
O	25007	25009	an
B-api_mention	25010	25017	Instant
O	25018	25019	:
O	25020	25021	#
O	25021	25024	pre
O	25025	25029	Note
O	25030	25034	that
O	25035	25038	the
O	25039	25049	conversion
O	25050	25054	from
B-api_mention	25055	25068	LocalDateTime
O	25069	25071	to
B-api_mention	25072	25085	ZonedDateTime
O	25086	25089	has
O	25090	25093	the
O	25094	25103	potential
O	25104	25106	to
O	25107	25116	introduce
O	25117	25127	unexpected
O	25128	25137	behaviour
O	25137	25138	.

O	25139	25143	This
O	25144	25146	is
O	25147	25154	because
O	25155	25158	not
O	25159	25164	every
O	25165	25170	local
O	25171	25175	date
O	25175	25176	-
O	25176	25180	time
O	25181	25187	exists
O	25188	25191	due
O	25192	25194	to
O	25195	25203	Daylight
O	25204	25210	Saving
O	25211	25215	Time
O	25215	25216	.

O	25217	25219	In
O	25220	25226	autumn
O	25226	25227	/
O	25227	25231	fall
O	25231	25232	,
O	25233	25238	there
O	25239	25241	is
O	25242	25244	an
O	25245	25252	overlap
O	25253	25255	in
O	25256	25259	the
O	25260	25265	local
O	25266	25270	time
O	25270	25271	-
O	25271	25275	line
O	25276	25281	where
O	25282	25285	the
O	25286	25290	same
O	25291	25296	local
O	25297	25301	date
O	25301	25302	-
O	25302	25306	time
O	25307	25313	occurs
O	25314	25319	twice
O	25319	25320	.

O	25321	25323	In
O	25324	25330	spring
O	25330	25331	,
O	25332	25337	there
O	25338	25340	is
O	25341	25342	a
O	25343	25346	gap
O	25346	25347	,
O	25348	25353	where
O	25354	25356	an
O	25357	25361	hour
O	25362	25372	disappears
O	25372	25373	.

O	25374	25377	See
O	25378	25381	the
O	25382	25389	Javadoc
O	25390	25392	of
B-api_mention	25393	25399	atZone
I-api_mention	25399	25400	(
I-api_mention	25400	25406	ZoneId
I-api_mention	25406	25407	)
O	25408	25411	for
O	25412	25416	more
O	25417	25420	the
O	25421	25431	definition
O	25432	25434	of
O	25435	25439	what
O	25440	25443	the
O	25444	25454	conversion
O	25455	25459	will
O	25460	25462	do
O	25462	25463	.

O	25464	25471	Summary
O	25471	25472	,
O	25473	25475	if
O	25476	25479	you
O	25480	25485	round
O	25485	25486	-
O	25486	25490	trip
O	25491	25492	a
B-api_mention	25493	25497	java
I-api_mention	25497	25498	.
I-api_mention	25498	25502	util
I-api_mention	25502	25503	.
I-api_mention	25503	25507	Date
O	25508	25510	to
O	25511	25512	a
B-api_mention	25513	25526	LocalDateTime
O	25527	25530	and
O	25531	25535	back
O	25536	25538	to
O	25539	25540	a
B-api_mention	25541	25545	java
I-api_mention	25545	25546	.
I-api_mention	25546	25550	util
I-api_mention	25550	25551	.
I-api_mention	25551	25555	Date
O	25556	25559	you
O	25560	25563	may
O	25564	25567	end
O	25568	25570	up
O	25571	25575	with
O	25576	25577	a
O	25578	25587	different
O	25588	25595	instant
O	25596	25599	due
O	25600	25602	to
O	25603	25611	Daylight
O	25612	25618	Saving
O	25619	25623	Time
O	25623	25624	.

O	25626	25634	Question
O	25634	25635	-
O	25635	25643	19431234
O	25643	25644	,
O	25645	25651	answer
O	25651	25652	-
O	25652	25660	30133063

O	25661	25665	Much
O	25666	25670	more
O	25671	25681	convenient
O	25682	25685	way
O	25686	25688	if
O	25689	25692	you
O	25693	25696	are
O	25697	25701	sure
O	25702	25705	you
O	25706	25710	need
O	25711	25712	a
O	25713	25720	default
O	25721	25729	timezone
O	25730	25731	:
B-api_mention	25732	25736	Date
O	25737	25738	d
O	25739	25740	=
B-api_mention	25741	25745	java
I-api_mention	25745	25746	.
I-api_mention	25746	25749	sql
I-api_mention	25749	25750	.
I-api_mention	25750	25759	Timestamp
I-api_mention	25759	25760	.
I-api_mention	25760	25767	valueOf
I-api_mention	25767	25768	(
I-api_mention	25768	25772	args
I-api_mention	25772	25773	)
O	25773	25774	;

O	25776	25784	Question
O	25784	25785	-
O	25785	25793	20129762
O	25793	25794	,
O	25795	25801	answer
O	25801	25802	-
O	25802	25810	20130131

O	25811	25816	There
O	25817	25820	are
O	25821	25828	already
O	25829	25835	people
O	25836	25841	asked
O	25842	25845	the
O	25846	25850	same
O	25851	25853	on
O	25854	25857	the
O	25858	25865	mailing
O	25866	25870	list
O	25871	25872	☺
O	25872	25873	.

O	25874	25877	The
O	25878	25882	main
O	25883	25889	reason
O	25890	25892	is
B-api_mention	25893	25901	Iterable
O	25902	25906	also
O	25907	25910	has
O	25911	25912	a
O	25913	25915	re
O	25915	25916	-
O	25916	25924	iterable
O	25925	25933	semantic
O	25933	25934	,
O	25935	25940	while
B-api_mention	25941	25947	Stream
O	25948	25950	is
O	25951	25954	not
O	25954	25955	.

O	25956	25957	#
O	25957	25967	blockquote

O	25969	25977	Question
O	25977	25978	-
O	25978	25986	20129762
O	25986	25987	,
O	25988	25994	answer
O	25994	25995	-
O	25995	26003	20130475

O	26004	26006	To
O	26007	26014	convert
O	26015	26016	a
B-api_mention	26017	26023	Stream
O	26024	26026	to
O	26027	26029	an
B-api_mention	26030	26038	Iterable
O	26039	26040	,
O	26041	26044	you
O	26045	26048	can
O	26049	26051	do
O	26052	26053	#
O	26053	26056	pre
O	26057	26059	To
O	26060	26064	pass
O	26065	26066	a
B-api_mention	26067	26073	Stream
O	26074	26076	to
O	26077	26078	a
O	26079	26085	method
O	26086	26090	that
O	26091	26098	expects
B-api_mention	26099	26107	Iterable
O	26108	26109	,
O	26110	26114	void
O	26115	26118	foo
O	26118	26119	(
O	26119	26123	args
O	26123	26124	)
O	26125	26131	simply
O	26132	26135	foo
O	26135	26136	(
O	26136	26140	args
O	26140	26141	)
O	26142	26149	however
O	26150	26152	it
O	26153	26161	probably
O	26162	26167	looks
O	26168	26173	funny
O	26173	26174	;
O	26175	26177	it
O	26178	26183	might
O	26184	26186	be
O	26187	26193	better
O	26194	26196	to
O	26197	26199	be
O	26200	26201	a
O	26202	26208	little
O	26209	26212	bit
O	26213	26217	more
O	26218	26226	explicit
O	26227	26230	foo
O	26230	26231	(
O	26231	26235	args
O	26235	26236	)
O	26236	26237	;

O	26239	26247	Question
O	26247	26248	-
O	26248	26256	20129762
O	26256	26257	,
O	26258	26264	answer
O	26264	26265	-
O	26265	26273	30548433

O	26274	26275	I
O	26276	26281	would
O	26282	26286	like
O	26287	26289	to
O	26290	26295	point
O	26296	26299	out
O	26300	26304	that
O	26305	26313	StreamEx
O	26314	26318	does
O	26319	26328	implement
B-api_mention	26329	26337	Iterable
O	26338	26339	(
O	26339	26342	and
B-api_mention	26343	26349	Stream
O	26350	26351	)
O	26351	26352	,
O	26353	26355	as
O	26356	26360	well
O	26361	26363	as
O	26364	26365	a
O	26366	26370	host
O	26371	26373	of
O	26374	26379	other
O	26380	26389	immensely
O	26390	26397	awesome
O	26398	26411	functionality
O	26412	26419	missing
O	26420	26424	from
B-api_mention	26425	26431	Stream
O	26432	26433	.

O	26435	26443	Question
O	26443	26444	-
O	26444	26452	18448671
O	26452	26453	,
O	26454	26460	answer
O	26460	26461	-
O	26461	26469	18448685

O	26470	26472	If
O	26473	26476	you
O	26477	26481	want
O	26482	26484	to
O	26485	26491	modify
O	26492	26496	your
B-api_mention	26497	26501	List
O	26502	26508	during
O	26509	26518	traversal
O	26518	26519	,
O	26520	26524	then
O	26525	26528	you
O	26529	26533	need
O	26534	26536	to
O	26537	26540	use
O	26541	26544	the
B-api_mention	26545	26553	Iterator
O	26554	26555	.

O	26556	26559	And
O	26560	26564	then
O	26565	26568	you
O	26569	26572	can
O	26573	26576	use
O	26577	26585	iterator
B-api_mention	26585	26586	.
I-api_mention	26586	26592	remove
I-api_mention	26592	26593	(
I-api_mention	26593	26597	args
I-api_mention	26597	26598	)
O	26599	26601	to
O	26602	26608	remove
O	26609	26612	the
O	26613	26621	elements
O	26622	26628	during
O	26629	26638	traversal
O	26638	26639	.

O	26641	26649	Question
O	26649	26650	-
O	26650	26658	18448671
O	26658	26659	,
O	26660	26666	answer
O	26666	26667	-
O	26667	26675	18448699

O	26676	26679	Use
O	26680	26682	an
B-api_mention	26683	26691	Iterator
O	26692	26695	and
O	26696	26700	call
B-api_mention	26701	26707	remove
I-api_mention	26707	26708	(
I-api_mention	26708	26709	)
O	26710	26711	:
O	26712	26713	#
O	26713	26716	pre

O	26718	26726	Question
O	26726	26727	-
O	26727	26735	18448671
O	26735	26736	,
O	26737	26743	answer
O	26743	26744	-
O	26744	26752	26937769

O	26753	26759	Though
O	26760	26763	one
O	26764	26770	answer
O	26771	26773	is
O	26774	26782	accepted
O	26783	26786	and
O	26787	26791	this
O	26792	26794	is
O	26795	26797	an
O	26798	26801	old
O	26802	26805	one
O	26805	26806	,
O	26807	26808	I
O	26809	26816	thought
O	26817	26824	posting
O	26825	26829	this
O	26830	26836	answer
O	26837	26839	as
O	26840	26842	it
O	26843	26847	does
O	26848	26851	not
O	26852	26855	use
B-api_mention	26856	26864	Iterator
O	26865	26866	#
O	26866	26869	pre

O	26871	26879	Question
O	26879	26880	-
O	26880	26888	17489250
O	26888	26889	,
O	26890	26896	answer
O	26896	26897	-
O	26897	26905	17489334

O	26906	26910	Text
O	26911	26917	inside
O	26918	26924	double
O	26925	26931	quotes
O	26932	26939	creates
O	26940	26941	a
O	26942	26949	literal
B-api_mention	26950	26956	String
O	26957	26963	object
O	26963	26964	.

B-api_mention	26965	26971	String
O	26972	26980	myString
O	26981	26982	=
O	26983	26996	StringLiteral
O	26996	26997	;
O	26998	27001	The
O	27002	27006	code
O	27007	27012	above
O	27013	27020	creates
O	27021	27022	a
B-api_mention	27023	27029	String
O	27030	27036	object
O	27036	27037	,
O	27038	27043	using
O	27044	27050	double
O	27051	27057	quotes
O	27057	27058	.

O	27060	27068	Question
O	27068	27069	-
O	27069	27077	17489250
O	27077	27078	,
O	27079	27085	answer
O	27085	27086	-
O	27086	27094	17489376

B-api_mention	27095	27101	String
O	27102	27106	gets
O	27107	27114	special
O	27115	27124	treatment
O	27125	27127	in
O	27128	27131	the
O	27132	27135	JLS
O	27135	27136	:
O	27137	27139	it
O	27139	27140	'
O	27140	27141	s
O	27142	27145	one
O	27146	27148	of
O	27149	27152	the
O	27153	27156	two
O	27157	27160	non
O	27160	27161	-
O	27161	27170	primitive
O	27171	27176	types
O	27177	27180	for
O	27181	27186	which
O	27187	27195	literals
O	27196	27201	exist
O	27202	27203	(
O	27203	27206	the
O	27207	27212	other
O	27213	27215	is
B-api_mention	27216	27221	Class
O	27222	27223	)
O	27224	27225	*
O	27226	27227	.

O	27228	27232	From
O	27233	27236	the
O	27237	27240	JLS
O	27241	27242	:
O	27243	27244	#
O	27244	27254	blockquote
O	27255	27256	*
O	27257	27261	well
O	27261	27262	,
O	27263	27268	there
O	27268	27269	'
O	27269	27270	s
O	27271	27275	also
O	27276	27279	the
O	27280	27281	"
O	27281	27285	null
O	27286	27290	type
O	27290	27291	"
O	27292	27296	with
O	27297	27299	it
O	27299	27300	'
O	27300	27301	s
O	27302	27303	"
O	27303	27307	null
O	27308	27315	literal
O	27315	27316	"
O	27317	27321	null
O	27322	27323	,
O	27324	27327	but
O	27328	27332	most
O	27333	27339	people
O	27340	27343	don
O	27343	27344	'
O	27344	27345	t
O	27346	27351	think
O	27352	27354	of
O	27355	27358	the
O	27359	27360	"
O	27360	27364	null
O	27365	27369	type
O	27369	27370	"
O	27371	27373	as
O	27374	27375	a
O	27376	27382	proper
O	27383	27387	type
O	27387	27388	.

O	27390	27398	Question
O	27398	27399	-
O	27399	27407	17489250
O	27407	27408	,
O	27409	27415	answer
O	27415	27416	-
O	27416	27424	17489394

O	27425	27427	It
O	27427	27428	'
O	27428	27429	s
O	27430	27431	a
O	27432	27439	feature
O	27440	27442	of
O	27443	27446	the
O	27447	27451	Java
O	27452	27460	language
O	27460	27461	.

O	27462	27468	String
O	27469	27477	literals
O	27478	27480	in
O	27481	27484	the
O	27485	27491	source
O	27492	27496	code
O	27497	27499	is
O	27500	27505	given
O	27506	27513	special
O	27514	27523	treatment
O	27523	27524	.

O	27525	27528	The
O	27529	27537	language
O	27538	27542	spec
O	27542	27543	,
O	27544	27548	here
O	27549	27550	,
O	27551	27557	simply
O	27558	27562	says
O	27563	27567	that
O	27568	27569	a
O	27570	27576	string
O	27577	27584	literal
O	27585	27587	is
O	27588	27590	of
B-api_mention	27591	27597	String
O	27598	27602	type

O	27604	27612	Question
O	27612	27613	-
O	27613	27621	17489250
O	27621	27622	,
O	27623	27629	answer
O	27629	27630	-
O	27630	27638	17489410

O	27639	27643	Java
B-api_mention	27644	27650	String
O	27651	27653	is
O	27654	27661	Special
O	27662	27663	#
O	27663	27673	blockquote
O	27674	27677	For
O	27678	27685	example
O	27686	27687	#
O	27687	27690	pre
O	27691	27692	#
O	27692	27695	img
O	27696	27700	Note
O	27701	27702	:
O	27703	27709	String
O	27710	27718	literals
O	27719	27722	are
O	27723	27729	stored
O	27730	27732	in
O	27733	27734	a
O	27735	27741	common
O	27742	27746	pool
O	27746	27747	.

O	27748	27752	This
O	27753	27764	facilitates
O	27765	27772	sharing
O	27773	27775	of
O	27776	27783	storage
O	27784	27787	for
O	27788	27795	strings
O	27796	27800	with
O	27801	27804	the
O	27805	27809	same
O	27810	27818	contents
O	27819	27821	to
O	27822	27830	conserve
O	27831	27838	storage
O	27838	27839	.

B-api_mention	27840	27846	String
O	27847	27854	objects
O	27855	27864	allocated
O	27865	27868	via
O	27869	27872	new
O	27873	27881	operator
O	27882	27885	are
O	27886	27892	stored
O	27893	27895	in
O	27896	27899	the
O	27900	27904	heap
O	27905	27906	,
O	27907	27910	and
O	27911	27916	there
O	27917	27919	is
O	27920	27922	no
O	27923	27930	sharing
O	27931	27933	of
O	27934	27941	storage
O	27942	27945	for
O	27946	27949	the
O	27950	27954	same
O	27955	27963	contents
O	27963	27964	.

O	27966	27974	Question
O	27974	27975	-
O	27975	27983	17489250
O	27983	27984	,
O	27985	27991	answer
O	27991	27992	-
O	27992	28000	17489437

O	28001	28005	Java
O	28005	28006	.
O	28006	28010	lang
O	28010	28011	.
B-api_mention	28011	28017	String
O	28018	28020	is
O	28021	28024	not
O	28025	28029	just
O	28030	28031	a
O	28032	28037	class
O	28037	28038	.

O	28039	28041	It
O	28041	28042	'
O	28042	28043	s
O	28044	28046	an
O	28047	28055	integral
O	28056	28060	part
O	28061	28063	of
O	28064	28067	the
O	28068	28072	core
O	28073	28081	language
O	28081	28082	.

O	28083	28086	The
O	28087	28095	compiler
O	28096	28099	has
O	28100	28109	syntactic
O	28110	28115	sugar
O	28116	28119	for
O	28120	28122	it
O	28122	28123	.

O	28124	28127	For
O	28128	28135	example
O	28135	28136	,
O	28137	28150	StringLiteral
O	28151	28153	is
O	28154	28158	like
O	28159	28161	an
O	28162	28174	abbreviation
O	28175	28178	for
O	28179	28182	new
B-api_mention	28183	28189	String
I-api_mention	28189	28190	(
I-api_mention	28190	28194	args
I-api_mention	28194	28195	)
O	28196	28197	.

O	28198	28202	When
O	28203	28210	written
O	28211	28224	StringLiteral
O	28225	28228	the
O	28229	28237	compiler
O	28238	28247	optimizes
O	28248	28257	identical
O	28258	28265	strings
O	28266	28268	to
O	28269	28272	the
O	28273	28277	same
O	28278	28286	instance
O	28287	28289	to
O	28290	28294	save
O	28295	28300	space
O	28300	28301	.

O	28302	28315	StringLiteral
O	28316	28317	+
O	28318	28319	5
O	28320	28321	=
O	28321	28322	=
O	28323	28336	StringLiteral
O	28337	28338	=
O	28338	28339	=
O	28339	28340	>
O	28341	28345	true
O	28346	28349	The
O	28350	28358	compiler
O	28359	28362	has
O	28363	28372	syntactic
O	28373	28378	sugar
O	28379	28382	for
O	28383	28384	a
O	28385	28388	lot
O	28389	28391	of
O	28392	28397	stuff
O	28397	28398	,
O	28399	28408	including
O	28409	28412	not
O	28413	28419	having
O	28420	28422	to
O	28423	28426	box
O	28426	28427	/
O	28427	28432	unbox
O	28433	28440	between
O	28441	28447	object
O	28448	28456	versions
O	28457	28460	and
O	28461	28466	their
O	28467	28473	native
O	28474	28479	types
O	28479	28480	,
O	28481	28483	no
O	28484	28490	parent
O	28491	28496	means
B-api_mention	28497	28503	Object
O	28503	28504	,
O	28505	28512	default
O	28513	28524	constructor
O	28524	28525	,
O	28526	28527	.
O	28527	28528	.
O	28528	28529	.

O	28531	28539	Question
O	28539	28540	-
O	28540	28548	17489250
O	28548	28549	,
O	28550	28556	answer
O	28556	28557	-
O	28557	28565	17489453

O	28566	28570	Java
O	28571	28577	treats
B-api_mention	28578	28584	String
O	28585	28587	as
O	28588	28589	a
O	28590	28597	special
O	28598	28603	class
O	28603	28604	,
O	28605	28608	you
O	28609	28612	can
O	28613	28623	initialize
O	28624	28626	in
O	28627	28631	both
O	28632	28636	ways
O	28637	28638	#
O	28638	28640	li
O	28641	28649	Directly
O	28650	28659	assigning
O	28660	28667	literal
B-api_mention	28668	28674	String
O	28675	28676	a
O	28677	28678	=
O	28679	28692	StringLiteral
O	28692	28693	;
O	28694	28695	#
O	28695	28697	li
O	28698	28700	As
O	28701	28706	other
O	28707	28714	Objects
O	28715	28720	using
O	28721	28724	new
O	28725	28732	keyword
B-api_mention	28733	28739	String
O	28740	28741	a
O	28742	28743	=
O	28744	28747	new
B-api_mention	28748	28754	String
I-api_mention	28754	28755	(
I-api_mention	28755	28759	args
I-api_mention	28759	28760	)
O	28760	28761	;
O	28762	28765	You
O	28766	28770	need
O	28771	28773	to
O	28774	28778	take
O	28779	28786	special
O	28787	28791	care
O	28792	28796	when
O	28797	28800	you
O	28801	28806	wants
O	28807	28809	to
O	28810	28817	compare
O	28818	28822	with
O	28823	28824	=
O	28824	28825	=
O	28826	28830	sign
O	28830	28831	:
O	28832	28833	#
O	28833	28836	pre
O	28837	28841	That
O	28842	28844	is
O	28845	28852	because
O	28853	28855	in
O	28856	28861	first
O	28862	28866	case
O	28867	28870	the
O	28871	28878	objects
O	28879	28880	a
O	28881	28884	and
O	28885	28886	b
O	28887	28890	are
O	28891	28895	kept
O	28896	28898	in
O	28899	28908	something
O	28909	28915	called
O	28916	28923	literal
O	28924	28928	pool
O	28929	28932	and
O	28933	28937	they
O	28938	28942	both
O	28943	28946	are
O	28947	28958	referencing
O	28959	28963	same
O	28964	28970	object
O	28971	28973	so
O	28974	28978	they
O	28979	28982	are
O	28983	28988	equal
O	28989	28991	in
O	28992	28996	both
O	28997	29001	ways
O	29001	29002	.

O	29003	29006	But
O	29007	29009	in
O	29010	29016	second
O	29017	29021	case
O	29022	29023	a
O	29024	29027	and
O	29028	29029	b
O	29030	29040	references
O	29041	29050	different
O	29051	29058	objects
O	29059	29063	like
O	29064	29068	when
O	29069	29071	we
O	29072	29082	initialize
O	29083	29086	any
O	29087	29092	other
O	29093	29100	objects
O	29100	29101	.

O	29102	29104	so
O	29105	29109	they
O	29110	29113	are
O	29114	29121	unequal
O	29122	29126	when
O	29127	29135	compared
O	29136	29140	with
O	29141	29142	=
O	29142	29143	=
O	29144	29152	operator
O	29153	29160	whereas
O	29161	29165	they
O	29166	29169	are
O	29170	29175	equal
O	29176	29178	in
O	29179	29185	values
O	29185	29186	.

O	29188	29196	Question
O	29196	29197	-
O	29197	29205	17828584
O	29205	29206	,
O	29207	29213	answer
O	29213	29214	-
O	29214	29222	17832168

O	29223	29224	I
O	29225	29230	think
O	29231	29234	the
O	29235	29241	number
O	29242	29251	displayed
O	29252	29254	is
O	29255	29258	the
O	29259	29265	number
O	29266	29268	of
O	29269	29273	time
O	29274	29277	the
B-api_mention	29278	29284	System
I-api_mention	29284	29285	.
I-api_mention	29285	29288	out
I-api_mention	29288	29289	.
I-api_mention	29289	29296	println
O	29297	29301	call
O	29302	29308	throws
O	29309	29312	the
O	29313	29326	Stackoverflow
O	29327	29336	exception
O	29336	29337	.

O	29338	29340	It
O	29341	29349	probably
O	29350	29356	depend
O	29357	29359	on
O	29360	29363	the
O	29364	29378	implementation
O	29379	29381	of
O	29382	29385	the
O	29386	29393	println
O	29394	29397	and
O	29398	29401	the
O	29402	29408	number
O	29409	29411	of
O	29412	29420	stacking
O	29421	29425	call
O	29426	29428	it
O	29429	29431	is
O	29432	29436	made
O	29437	29439	in
O	29440	29442	it
O	29442	29443	.

O	29444	29446	As
O	29447	29449	an
O	29450	29462	illustration
O	29462	29463	:
O	29464	29467	The
O	29468	29472	main
O	29472	29473	(
O	29473	29477	args
O	29477	29478	)
O	29479	29483	call
O	29484	29491	trigger
O	29492	29495	the
O	29496	29509	Stackoverflow
O	29510	29519	exception
O	29520	29522	at
O	29523	29527	call
O	29528	29529	i
O	29529	29530	.

O	29531	29534	The
O	29535	29536	i
O	29536	29537	-
O	29537	29538	1
O	29539	29543	call
O	29544	29546	of
O	29547	29551	main
O	29552	29557	catch
O	29558	29561	the
O	29562	29571	exception
O	29572	29575	and
O	29576	29580	call
B-api_mention	29581	29588	println
O	29589	29594	which
O	29595	29602	trigger
O	29603	29604	a
O	29605	29611	second
O	29612	29625	Stackoverflow
O	29626	29627	.
O	29628	29631	cnt
O	29632	29635	get
O	29636	29645	increment
O	29646	29648	to
O	29649	29650	1
O	29650	29651	.

O	29652	29655	The
O	29656	29657	i
O	29657	29658	-
O	29658	29659	2
O	29660	29664	call
O	29665	29667	of
O	29668	29672	main
O	29673	29678	catch
O	29679	29682	now
O	29683	29686	the
O	29687	29696	exception
O	29697	29700	and
O	29701	29705	call
B-api_mention	29706	29713	println
O	29714	29715	.

O	29716	29718	In
B-api_mention	29719	29726	println
O	29727	29728	a
O	29729	29735	method
O	29736	29738	is
O	29739	29745	called
O	29746	29756	triggering
O	29757	29758	a
O	29759	29762	3rd
O	29763	29772	exception
O	29772	29773	.
O	29774	29777	cnt
O	29778	29781	get
O	29782	29791	increment
O	29792	29794	to
O	29795	29796	2
O	29796	29797	.
O	29798	29802	this
O	29803	29811	continue
O	29812	29817	until
B-api_mention	29818	29825	println
O	29826	29829	can
O	29830	29834	make
O	29835	29838	all
O	29839	29842	its
O	29843	29849	needed
O	29850	29854	call
O	29855	29858	and
O	29859	29866	finally
O	29867	29874	display
O	29875	29878	the
O	29879	29884	value
O	29885	29887	of
O	29888	29891	cnt
O	29892	29893	.

O	29894	29898	This
O	29899	29901	is
O	29902	29906	then
O	29907	29916	dependent
O	29917	29919	of
O	29920	29923	the
O	29924	29930	actual
O	29931	29945	implementation
O	29946	29948	of
B-api_mention	29949	29956	println
O	29957	29958	.

O	29959	29962	For
O	29963	29966	the
O	29967	29971	JDK7
O	29972	29978	either
O	29979	29981	it
O	29982	29988	detect
O	29989	29996	cycling
O	29997	30001	call
O	30002	30005	and
O	30006	30012	throws
O	30013	30016	the
O	30017	30026	exception
O	30027	30034	earlier
O	30035	30041	either
O	30042	30044	it
O	30045	30049	keep
O	30050	30054	some
O	30055	30060	stack
O	30061	30069	resource
O	30070	30073	and
O	30074	30079	throw
O	30080	30083	the
O	30084	30093	exception
O	30094	30100	before
O	30101	30109	reaching
O	30110	30113	the
O	30114	30119	limit
O	30120	30122	to
O	30123	30127	give
O	30128	30132	some
O	30133	30137	room
O	30138	30141	for
O	30142	30153	remediation
O	30154	30159	logic
O	30160	30166	either
O	30167	30170	the
O	30171	30178	println
O	30179	30193	implementation
O	30194	30199	doesn
O	30199	30200	'
O	30200	30201	t
O	30202	30206	make
O	30207	30212	calls
O	30213	30219	either
O	30220	30223	the
O	30224	30225	+
O	30225	30226	+
O	30227	30236	operation
O	30237	30239	is
O	30240	30244	done
O	30245	30250	after
O	30251	30254	the
B-api_mention	30255	30262	println
O	30263	30267	call
O	30268	30272	thus
O	30273	30275	is
O	30276	30278	by
O	30279	30283	pass
O	30284	30286	by
O	30287	30290	the
O	30291	30300	exception
O	30300	30301	.

O	30303	30311	Question
O	30311	30312	-
O	30312	30320	17828584
O	30320	30321	,
O	30322	30328	answer
O	30328	30329	-
O	30329	30337	17836189

O	30338	30339	I
O	30340	30345	think
O	30346	30349	the
O	30350	30356	others
O	30357	30361	have
O	30362	30366	done
O	30367	30368	a
O	30369	30373	good
O	30374	30377	job
O	30378	30380	at
O	30381	30391	explaining
O	30392	30395	why
O	30396	30399	cnt
O	30400	30401	>
O	30402	30403	0
O	30403	30404	,
O	30405	30408	but
O	30409	30414	there
O	30414	30415	'
O	30415	30416	s
O	30417	30420	not
O	30421	30427	enough
O	30428	30435	details
O	30436	30445	regarding
O	30446	30449	why
O	30450	30453	cnt
O	30454	30455	=
O	30456	30457	4
O	30457	30458	,
O	30459	30462	and
O	30463	30466	why
O	30467	30470	cnt
O	30471	30477	varies
O	30478	30480	so
O	30481	30487	widely
O	30488	30493	among
O	30494	30503	different
O	30504	30512	settings
O	30512	30513	.

O	30514	30515	I
O	30516	30520	will
O	30521	30528	attempt
O	30529	30531	to
O	30532	30536	fill
O	30537	30541	that
O	30542	30546	void
O	30547	30551	here
O	30551	30552	.

O	30553	30556	Let
O	30557	30558	#
O	30558	30560	li
O	30561	30562	X
O	30563	30565	be
O	30566	30569	the
O	30570	30575	total
O	30576	30581	stack
O	30582	30586	size
O	30587	30588	#
O	30588	30590	li
O	30591	30592	M
O	30593	30595	be
O	30596	30599	the
O	30600	30605	stack
O	30606	30611	space
O	30612	30616	used
O	30617	30621	when
O	30622	30624	we
O	30625	30630	enter
O	30631	30635	main
O	30636	30639	the
O	30640	30645	first
O	30646	30650	time
O	30651	30652	#
O	30652	30654	li
O	30655	30656	R
O	30657	30659	be
O	30660	30663	the
O	30664	30669	stack
O	30670	30675	space
O	30676	30684	increase
O	30685	30689	each
O	30690	30694	time
O	30695	30697	we
O	30698	30703	enter
O	30704	30708	into
O	30709	30713	main
O	30714	30715	#
O	30715	30717	li
O	30718	30719	P
O	30720	30722	be
O	30723	30726	the
O	30727	30732	stack
O	30733	30738	space
O	30739	30748	necessary
O	30749	30751	to
O	30752	30755	run
B-api_mention	30756	30762	System
I-api_mention	30762	30763	.
I-api_mention	30763	30766	out
I-api_mention	30766	30767	.
I-api_mention	30767	30774	println
O	30775	30779	When
O	30780	30782	we
O	30783	30788	first
O	30789	30792	get
O	30793	30797	into
O	30798	30802	main
O	30802	30803	,
O	30804	30807	the
O	30808	30813	space
O	30814	30818	left
O	30819	30823	over
O	30824	30826	is
O	30827	30828	X
O	30828	30829	-
O	30829	30830	M
O	30830	30831	.

O	30832	30836	Each
O	30837	30846	recursive
O	30847	30851	call
O	30852	30857	takes
O	30858	30860	up
O	30861	30862	R
O	30863	30867	more
O	30868	30874	memory
O	30874	30875	.

O	30876	30878	So
O	30879	30882	for
O	30883	30884	1
O	30885	30894	recursive
O	30895	30899	call
O	30900	30901	(
O	30901	30902	1
O	30903	30907	more
O	30908	30912	than
O	30913	30921	original
O	30921	30922	)
O	30922	30923	,
O	30924	30927	the
O	30928	30934	memory
O	30935	30938	use
O	30939	30941	is
O	30942	30943	M
O	30944	30945	+
O	30946	30947	R
O	30947	30948	.

O	30949	30956	Suppose
O	30957	30961	that
B-api_mention	30962	30980	StackOverflowError
O	30981	30983	is
O	30984	30990	thrown
O	30991	30996	after
O	30997	30998	C
O	30999	31009	successful
O	31010	31019	recursive
O	31020	31025	calls
O	31025	31026	,
O	31027	31031	that
O	31032	31034	is
O	31034	31035	,
O	31036	31037	M
O	31038	31039	+
O	31040	31041	C
O	31042	31043	*
O	31044	31045	R
O	31046	31047	<
O	31047	31048	=
O	31049	31050	X
O	31051	31054	and
O	31055	31056	M
O	31057	31058	+
O	31059	31060	C
O	31061	31062	*
O	31063	31064	(
O	31064	31065	R
O	31066	31067	+
O	31068	31069	1
O	31069	31070	)
O	31071	31072	>
O	31073	31074	X
O	31074	31075	.

O	31076	31078	At
O	31079	31082	the
O	31083	31087	time
O	31088	31090	of
O	31091	31094	the
O	31095	31100	first
B-api_mention	31101	31119	StackOverflowError
O	31119	31120	,
O	31121	31126	there
O	31126	31127	'
O	31127	31128	s
O	31129	31130	X
O	31131	31132	-
O	31133	31134	M
O	31135	31136	-
O	31137	31138	C
O	31139	31140	*
O	31141	31142	R
O	31143	31149	memory
O	31150	31154	left
O	31154	31155	.

O	31156	31158	To
O	31159	31161	be
O	31162	31166	able
O	31167	31169	to
O	31170	31173	run
B-api_mention	31174	31180	System
I-api_mention	31180	31181	.
I-api_mention	31181	31184	out
I-api_mention	31184	31185	.
I-api_mention	31185	31191	prinln
O	31192	31193	,
O	31194	31196	we
O	31197	31201	need
O	31202	31203	P
O	31204	31210	amount
O	31211	31213	of
O	31214	31219	space
O	31220	31224	left
O	31225	31227	on
O	31228	31231	the
O	31232	31237	stack
O	31237	31238	.

O	31239	31241	If
O	31242	31244	it
O	31245	31247	so
O	31248	31255	happens
O	31256	31260	that
O	31261	31262	X
O	31263	31264	-
O	31265	31266	M
O	31267	31268	-
O	31269	31270	C
O	31271	31272	*
O	31273	31274	R
O	31275	31276	>
O	31276	31277	=
O	31278	31279	P
O	31279	31280	,
O	31281	31285	then
O	31286	31287	0
O	31288	31292	will
O	31293	31295	be
O	31296	31303	printed
O	31303	31304	.

O	31305	31307	If
O	31308	31309	P
O	31310	31318	requires
O	31319	31323	more
O	31324	31329	space
O	31329	31330	,
O	31331	31335	then
O	31336	31338	we
O	31339	31345	remove
O	31346	31352	frames
O	31353	31357	from
O	31358	31361	the
O	31362	31367	stack
O	31367	31368	,
O	31369	31376	gaining
O	31377	31378	R
O	31379	31385	memory
O	31386	31388	at
O	31389	31392	the
O	31393	31397	cost
O	31398	31400	of
O	31401	31404	cnt
O	31404	31405	+
O	31405	31406	+
O	31406	31407	.

O	31408	31412	When
B-api_mention	31413	31420	println
O	31421	31423	is
O	31424	31431	finally
O	31432	31436	able
O	31437	31439	to
O	31440	31443	run
O	31443	31444	,
O	31445	31446	X
O	31447	31448	-
O	31449	31450	M
O	31451	31452	-
O	31453	31454	(
O	31454	31455	C
O	31456	31457	-
O	31458	31461	cnt
O	31461	31462	)
O	31463	31464	*
O	31465	31466	R
O	31467	31468	>
O	31468	31469	=
O	31470	31471	P
O	31471	31472	.

O	31473	31475	So
O	31476	31478	if
O	31479	31480	P
O	31481	31483	is
O	31484	31489	large
O	31490	31493	for
O	31494	31495	a
O	31496	31506	particular
O	31507	31513	system
O	31513	31514	,
O	31515	31519	then
O	31520	31523	cnt
O	31524	31528	will
O	31529	31531	be
O	31532	31537	large
O	31537	31538	.

O	31539	31542	Let
O	31542	31543	'
O	31543	31544	s
O	31545	31549	look
O	31550	31552	at
O	31553	31557	this
O	31558	31562	with
O	31563	31567	some
O	31568	31576	examples
O	31576	31577	.

O	31578	31585	Example
O	31586	31587	1
O	31587	31588	:
O	31589	31596	Suppose
O	31597	31598	#
O	31598	31600	li
O	31601	31602	X
O	31603	31604	=
O	31605	31608	100
O	31609	31610	#
O	31610	31612	li
O	31613	31614	M
O	31615	31616	=
O	31617	31618	1
O	31619	31620	#
O	31620	31622	li
O	31623	31624	R
O	31625	31626	=
O	31627	31628	2
O	31629	31630	#
O	31630	31632	li
O	31633	31634	P
O	31635	31636	=
O	31637	31638	1
O	31639	31643	Then
O	31644	31645	C
O	31646	31647	=
O	31648	31653	floor
O	31653	31654	(
O	31654	31655	(
O	31655	31656	X
O	31656	31657	-
O	31657	31658	M
O	31658	31659	)
O	31659	31660	/
O	31660	31661	R
O	31661	31662	)
O	31663	31664	=
O	31665	31667	49
O	31667	31668	,
O	31669	31672	and
O	31673	31676	cnt
O	31677	31678	=
O	31679	31686	ceiling
O	31686	31687	(
O	31687	31688	(
O	31688	31689	P
O	31690	31691	-
O	31692	31693	(
O	31693	31694	X
O	31695	31696	-
O	31697	31698	M
O	31699	31700	-
O	31701	31702	C
O	31702	31703	*
O	31703	31704	R
O	31704	31705	)
O	31705	31706	)
O	31706	31707	/
O	31707	31708	R
O	31708	31709	)
O	31710	31711	=
O	31712	31713	0
O	31713	31714	.

O	31715	31722	Example
O	31723	31724	2
O	31724	31725	:
O	31726	31733	Suppose
O	31734	31738	that
O	31739	31740	#
O	31740	31742	li
O	31743	31744	X
O	31745	31746	=
O	31747	31750	100
O	31751	31752	#
O	31752	31754	li
O	31755	31756	M
O	31757	31758	=
O	31759	31760	1
O	31761	31762	#
O	31762	31764	li
O	31765	31766	R
O	31767	31768	=
O	31769	31770	5
O	31771	31772	#
O	31772	31774	li
O	31775	31776	P
O	31777	31778	=
O	31779	31781	12
O	31782	31786	Then
O	31787	31788	C
O	31789	31790	=
O	31791	31793	19
O	31793	31794	,
O	31795	31798	and
O	31799	31802	cnt
O	31803	31804	=
O	31805	31806	2
O	31806	31807	.

O	31808	31815	Example
O	31816	31817	3
O	31817	31818	:
O	31819	31826	Suppose
O	31827	31831	that
O	31832	31833	#
O	31833	31835	li
O	31836	31837	X
O	31838	31839	=
O	31840	31843	101
O	31844	31845	#
O	31845	31847	li
O	31848	31849	M
O	31850	31851	=
O	31852	31853	1
O	31854	31855	#
O	31855	31857	li
O	31858	31859	R
O	31860	31861	=
O	31862	31863	5
O	31864	31865	#
O	31865	31867	li
O	31868	31869	P
O	31870	31871	=
O	31872	31874	12
O	31875	31879	Then
O	31880	31881	C
O	31882	31883	=
O	31884	31886	20
O	31886	31887	,
O	31888	31891	and
O	31892	31895	cnt
O	31896	31897	=
O	31898	31899	3
O	31899	31900	.

O	31901	31908	Example
O	31909	31910	4
O	31910	31911	:
O	31912	31919	Suppose
O	31920	31924	that
O	31925	31926	#
O	31926	31928	li
O	31929	31930	X
O	31931	31932	=
O	31933	31936	101
O	31937	31938	#
O	31938	31940	li
O	31941	31942	M
O	31943	31944	=
O	31945	31946	2
O	31947	31948	#
O	31948	31950	li
O	31951	31952	R
O	31953	31954	=
O	31955	31956	5
O	31957	31958	#
O	31958	31960	li
O	31961	31962	P
O	31963	31964	=
O	31965	31967	12
O	31968	31972	Then
O	31973	31974	C
O	31975	31976	=
O	31977	31979	19
O	31979	31980	,
O	31981	31984	and
O	31985	31988	cnt
O	31989	31990	=
O	31991	31992	2
O	31992	31993	.

O	31994	31998	Thus
O	31998	31999	,
O	32000	32002	we
O	32003	32006	see
O	32007	32011	that
O	32012	32016	both
O	32017	32020	the
O	32021	32027	system
O	32028	32029	(
O	32029	32030	M
O	32030	32031	,
O	32032	32033	R
O	32033	32034	,
O	32035	32038	and
O	32039	32040	P
O	32040	32041	)
O	32042	32045	and
O	32046	32049	the
O	32050	32055	stack
O	32056	32060	size
O	32061	32062	(
O	32062	32063	X
O	32063	32064	)
O	32065	32072	affects
O	32073	32076	cnt
O	32076	32077	.

O	32078	32080	As
O	32081	32082	a
O	32083	32087	side
O	32088	32092	note
O	32092	32093	,
O	32094	32096	it
O	32097	32101	does
O	32102	32105	not
O	32106	32112	matter
O	32113	32116	how
O	32117	32121	much
O	32122	32127	space
O	32128	32133	catch
O	32134	32142	requires
O	32143	32145	to
O	32146	32151	start
O	32151	32152	.

O	32153	32155	As
O	32156	32160	long
O	32161	32163	as
O	32164	32169	there
O	32170	32172	is
O	32173	32176	not
O	32177	32183	enough
O	32184	32189	space
O	32190	32193	for
O	32194	32199	catch
O	32200	32201	,
O	32202	32206	then
O	32207	32210	cnt
O	32211	32215	will
O	32216	32219	not
O	32220	32228	increase
O	32228	32229	,
O	32230	32232	so
O	32233	32238	there
O	32239	32242	are
O	32243	32245	no
O	32246	32254	external
O	32255	32262	effects
O	32262	32263	.

O	32264	32268	EDIT
O	32269	32270	I
O	32271	32275	take
O	32276	32280	back
O	32281	32285	what
O	32286	32287	I
O	32288	32292	said
O	32293	32298	about
O	32299	32304	catch
O	32305	32306	.

O	32307	32309	It
O	32310	32314	does
O	32315	32319	play
O	32320	32321	a
O	32322	32326	role
O	32326	32327	.

O	32328	32335	Suppose
O	32336	32338	it
O	32339	32347	requires
O	32348	32349	T
O	32350	32356	amount
O	32357	32359	of
O	32360	32365	space
O	32366	32368	to
O	32369	32374	start
O	32374	32375	.
O	32376	32379	cnt
O	32380	32386	starts
O	32387	32389	to
O	32390	32399	increment
O	32400	32404	when
O	32405	32408	the
O	32409	32417	leftover
O	32418	32423	space
O	32424	32426	is
O	32427	32434	greater
O	32435	32439	than
O	32440	32441	T
O	32441	32442	,
O	32443	32446	and
B-api_mention	32447	32454	println
O	32455	32459	runs
O	32460	32464	when
O	32465	32468	the
O	32469	32477	leftover
O	32478	32483	space
O	32484	32486	is
O	32487	32494	greater
O	32495	32499	than
O	32500	32501	T
O	32502	32503	+
O	32504	32505	P
O	32505	32506	.

O	32507	32511	This
O	32512	32516	adds
O	32517	32519	an
O	32520	32525	extra
O	32526	32530	step
O	32531	32533	to
O	32534	32537	the
O	32538	32550	calculations
O	32551	32554	and
O	32555	32562	further
O	32563	32570	muddies
O	32571	32573	up
O	32574	32577	the
O	32578	32585	already
O	32586	32591	muddy
O	32592	32600	analysis
O	32600	32601	.

O	32602	32606	EDIT
O	32607	32608	I
O	32609	32616	finally
O	32617	32622	found
O	32623	32627	time
O	32628	32630	to
O	32631	32634	run
O	32635	32639	some
O	32640	32651	experiments
O	32652	32654	to
O	32655	32659	back
O	32660	32662	up
O	32663	32665	my
O	32666	32672	theory
O	32672	32673	.

O	32674	32687	Unfortunately
O	32687	32688	,
O	32689	32692	the
O	32693	32699	theory
O	32700	32705	doesn
O	32705	32706	'
O	32706	32707	t
O	32708	32712	seem
O	32713	32715	to
O	32716	32721	match
O	32722	32724	up
O	32725	32729	with
O	32730	32733	the
O	32734	32745	experiments
O	32745	32746	.

O	32747	32751	What
O	32752	32760	actually
O	32761	32768	happens
O	32769	32771	is
O	32772	32776	very
O	32777	32786	different
O	32786	32787	.

O	32788	32798	Experiment
O	32799	32804	setup
O	32804	32805	:
O	32806	32812	Ubuntu
O	32813	32815	12
O	32815	32816	.
O	32816	32818	04
O	32819	32825	server
O	32826	32830	with
O	32831	32838	default
O	32839	32843	java
O	32844	32847	and
O	32848	32855	default
O	32855	32856	-
O	32856	32859	jdk
O	32859	32860	.

O	32861	32864	Xss
O	32865	32873	starting
O	32874	32876	at
O	32877	32879	70
O	32879	32880	,
O	32880	32883	000
O	32884	32886	at
O	32887	32888	1
O	32889	32893	byte
O	32894	32904	increments
O	32905	32907	to
O	32908	32911	460
O	32911	32912	,
O	32912	32915	000
O	32915	32916	.

O	32917	32920	The
O	32921	32928	results
O	32929	32932	are
O	32933	32942	available
O	32943	32945	at
O	32945	32946	:
O	32947	32948	#
O	32948	32949	a
O	32950	32951	I
O	32951	32952	'
O	32952	32954	ve
O	32955	32962	created
O	32963	32970	another
O	32971	32978	version
O	32979	32984	where
O	32985	32990	every
O	32991	32999	repeated
O	33000	33004	data
O	33005	33010	point
O	33011	33013	is
O	33014	33021	removed
O	33021	33022	.

O	33023	33025	In
O	33026	33031	other
O	33032	33037	words
O	33037	33038	,
O	33039	33043	only
O	33044	33050	points
O	33051	33055	that
O	33056	33059	are
O	33060	33069	different
O	33070	33074	from
O	33075	33078	the
O	33079	33087	previous
O	33088	33091	are
O	33092	33097	shown
O	33097	33098	.

O	33099	33103	This
O	33104	33109	makes
O	33110	33112	it
O	33113	33119	easier
O	33120	33122	to
O	33123	33126	see
O	33127	33136	anomalies
O	33136	33137	.

O	33138	33139	#
O	33139	33140	a

O	33142	33150	Question
O	33150	33151	-
O	33151	33159	17828584
O	33159	33160	,
O	33161	33167	answer
O	33167	33168	-
O	33168	33176	17842210

O	33177	33182	After
O	33183	33190	digging
O	33191	33197	around
O	33198	33201	for
O	33202	33203	a
O	33204	33209	while
O	33209	33210	,
O	33211	33212	I
O	33213	33216	can
O	33216	33217	'
O	33217	33218	t
O	33219	33222	say
O	33223	33227	that
O	33228	33229	I
O	33230	33234	find
O	33235	33238	the
O	33239	33245	answer
O	33245	33246	,
O	33247	33250	but
O	33251	33252	I
O	33253	33258	think
O	33259	33261	it
O	33261	33262	'
O	33262	33263	s
O	33264	33269	quite
O	33270	33275	close
O	33276	33279	now
O	33279	33280	.

O	33281	33286	First
O	33286	33287	,
O	33288	33290	we
O	33291	33295	need
O	33296	33298	to
O	33299	33303	know
O	33304	33308	when
O	33309	33310	a
B-api_mention	33311	33329	StackOverflowError
O	33330	33334	will
O	33335	33337	be
O	33338	33344	thrown
O	33344	33345	.

O	33346	33348	In
O	33349	33353	fact
O	33353	33354	,
O	33355	33358	the
O	33359	33364	stack
O	33365	33368	for
O	33369	33370	a
O	33371	33375	java
O	33376	33382	thread
O	33383	33389	stores
O	33390	33396	frames
O	33396	33397	,
O	33398	33403	which
O	33404	33414	containing
O	33415	33418	all
O	33419	33422	the
O	33423	33427	data
O	33428	33434	needed
O	33435	33438	for
O	33439	33447	invoking
O	33448	33449	a
O	33450	33456	method
O	33457	33460	and
O	33461	33467	resume
O	33467	33468	.

O	33469	33478	According
O	33479	33481	to
O	33482	33486	Java
O	33487	33495	Language
O	33496	33510	Specifications
O	33511	33514	for
O	33515	33519	JAVA
O	33520	33521	6
O	33522	33523	,
O	33524	33528	when
O	33529	33537	invoking
O	33538	33539	a
O	33540	33546	method
O	33546	33547	,
O	33548	33549	#
O	33549	33559	blockquote
O	33560	33566	Second
O	33566	33567	,
O	33568	33570	we
O	33571	33577	should
O	33578	33582	make
O	33583	33585	it
O	33586	33591	clear
O	33592	33596	what
O	33597	33599	is
O	33600	33601	"
O	33602	33607	there
O	33608	33610	is
O	33611	33614	not
O	33615	33625	sufficient
O	33626	33632	memory
O	33633	33642	available
O	33643	33645	to
O	33646	33652	create
O	33653	33657	such
O	33658	33660	an
O	33661	33671	activation
O	33672	33677	frame
O	33678	33679	"
O	33679	33680	.

O	33681	33690	According
O	33691	33693	to
O	33694	33698	Java
O	33699	33706	Virtual
O	33707	33714	Machine
O	33715	33729	Specifications
O	33730	33733	for
O	33734	33738	JAVA
O	33739	33740	6
O	33741	33742	,
O	33743	33744	#
O	33744	33754	blockquote
O	33755	33757	So
O	33757	33758	,
O	33759	33763	when
O	33764	33765	a
O	33766	33771	frame
O	33772	33774	is
O	33775	33782	created
O	33782	33783	,
O	33784	33789	there
O	33790	33796	should
O	33797	33799	be
O	33800	33806	enough
O	33807	33811	heap
O	33812	33817	space
O	33818	33820	to
O	33821	33827	create
O	33828	33829	a
O	33830	33835	stack
O	33836	33841	frame
O	33842	33845	and
O	33846	33852	enough
O	33853	33858	stack
O	33859	33864	space
O	33865	33867	to
O	33868	33873	store
O	33874	33877	the
O	33878	33881	new
O	33882	33891	reference
O	33892	33897	which
O	33898	33903	point
O	33904	33906	to
O	33907	33910	the
O	33911	33914	new
O	33915	33920	stack
O	33921	33926	frame
O	33927	33929	if
O	33930	33933	the
O	33934	33939	frame
O	33940	33942	is
O	33943	33947	heap
O	33948	33957	allocated
O	33957	33958	.

O	33959	33962	Now
O	33963	33966	let
O	33966	33967	'
O	33967	33968	s
O	33969	33971	go
O	33972	33976	back
O	33977	33979	to
O	33980	33983	the
O	33984	33992	question
O	33992	33993	.

O	33994	33998	From
O	33999	34002	the
O	34003	34008	above
O	34008	34009	,
O	34010	34012	we
O	34013	34016	can
O	34017	34021	know
O	34022	34026	that
O	34027	34031	when
O	34032	34033	a
O	34034	34040	method
O	34041	34043	is
O	34044	34051	execute
O	34051	34052	,
O	34053	34055	it
O	34056	34059	may
O	34060	34064	just
O	34065	34070	costs
O	34071	34074	the
O	34075	34079	same
O	34080	34086	amount
O	34087	34089	of
O	34090	34095	stack
O	34096	34101	space
O	34101	34102	.

O	34103	34106	And
O	34107	34115	invoking
B-api_mention	34116	34122	System
I-api_mention	34122	34123	.
I-api_mention	34123	34126	out
I-api_mention	34126	34127	.
I-api_mention	34127	34134	println
O	34135	34136	(
O	34136	34139	may
O	34139	34140	)
O	34141	34146	needs
O	34147	34148	5
O	34149	34154	level
O	34155	34157	of
O	34158	34164	method
O	34165	34175	invocation
O	34175	34176	,
O	34177	34179	so
O	34180	34181	5
O	34182	34188	frames
O	34189	34193	need
O	34194	34196	to
O	34197	34199	be
O	34200	34207	created
O	34207	34208	.

O	34209	34213	Then
O	34214	34218	when
B-api_mention	34219	34237	StackOverflowError
O	34238	34240	is
O	34241	34247	thrown
O	34248	34251	out
O	34251	34252	,
O	34253	34255	it
O	34256	34259	has
O	34260	34262	to
O	34263	34265	go
O	34266	34270	back
O	34271	34272	5
O	34273	34278	times
O	34279	34281	to
O	34282	34285	get
O	34286	34292	enough
O	34293	34298	stack
O	34299	34304	space
O	34305	34307	to
O	34308	34313	store
O	34314	34315	5
O	34316	34322	frames
O	34322	34323	'
O	34324	34334	references
O	34334	34335	.

O	34336	34341	Hence
O	34342	34343	4
O	34344	34346	is
O	34347	34352	print
O	34353	34356	out
O	34356	34357	.

O	34358	34361	Why
O	34362	34365	not
O	34366	34367	5
O	34367	34368	?

O	34369	34376	Because
O	34377	34380	you
O	34381	34384	use
O	34385	34388	cnt
O	34388	34389	+
O	34389	34390	+
O	34391	34392	.

O	34393	34399	Change
O	34400	34402	it
O	34403	34405	to
O	34406	34407	+
O	34407	34408	+
O	34408	34411	cnt
O	34412	34413	,
O	34414	34417	and
O	34418	34422	then
O	34423	34426	you
O	34427	34431	will
O	34432	34435	get
O	34436	34437	5
O	34437	34438	.

O	34439	34442	And
O	34443	34446	you
O	34447	34451	will
O	34452	34458	notice
O	34459	34463	that
O	34464	34468	when
O	34469	34472	the
O	34473	34477	size
O	34478	34480	of
O	34481	34486	stack
O	34487	34489	go
O	34490	34492	to
O	34493	34494	a
O	34495	34499	high
O	34500	34505	level
O	34505	34506	,
O	34507	34510	you
O	34511	34515	will
O	34516	34519	get
O	34520	34522	50
O	34523	34532	sometimes
O	34532	34533	.

O	34534	34538	That
O	34539	34541	is
O	34542	34549	because
O	34550	34553	the
O	34554	34560	amount
O	34561	34563	of
O	34564	34573	available
O	34574	34578	heap
O	34579	34584	space
O	34585	34589	need
O	34590	34592	to
O	34593	34595	be
O	34596	34601	taken
O	34602	34606	into
O	34607	34620	consideration
O	34621	34625	then
O	34625	34626	.

O	34627	34631	When
O	34632	34635	the
O	34636	34641	stack
O	34641	34642	'
O	34642	34643	s
O	34644	34648	size
O	34649	34651	is
O	34652	34655	too
O	34656	34661	large
O	34661	34662	,
O	34663	34668	maybe
O	34669	34673	heap
O	34674	34679	space
O	34680	34684	will
O	34685	34688	run
O	34689	34692	out
O	34693	34699	before
O	34700	34705	stack
O	34705	34706	.

O	34707	34710	And
O	34711	34712	(
O	34712	34717	maybe
O	34717	34718	)
O	34719	34722	the
O	34723	34729	actual
O	34730	34734	size
O	34735	34737	of
O	34738	34743	stack
O	34744	34750	frames
O	34751	34753	of
B-api_mention	34754	34760	System
I-api_mention	34760	34761	.
I-api_mention	34761	34764	out
I-api_mention	34764	34765	.
I-api_mention	34765	34772	println
O	34773	34775	is
O	34776	34781	about
O	34782	34784	51
O	34785	34790	times
O	34791	34793	of
O	34794	34798	main
O	34799	34800	,
O	34801	34810	therefore
O	34811	34813	it
O	34814	34818	goes
O	34819	34823	back
O	34824	34826	51
O	34827	34832	times
O	34833	34836	and
O	34837	34842	print
O	34843	34845	50
O	34845	34846	.

O	34848	34856	Question
O	34856	34857	-
O	34857	34865	20375176
O	34865	34866	,
O	34867	34873	answer
O	34873	34874	-
O	34874	34882	20375622

O	34883	34884	A
O	34885	34893	parallel
O	34894	34900	stream
O	34901	34904	has
O	34905	34906	a
O	34907	34911	much
O	34912	34918	higher
O	34919	34927	overhead
O	34928	34936	compared
O	34937	34939	to
O	34940	34941	a
O	34942	34952	sequential
O	34953	34956	one
O	34956	34957	.

O	34958	34970	Coordinating
O	34971	34974	the
O	34975	34982	threads
O	34983	34988	takes
O	34989	34990	a
O	34991	35002	significant
O	35003	35009	amount
O	35010	35012	of
O	35013	35017	time
O	35017	35018	.

O	35019	35020	I
O	35021	35026	would
O	35027	35030	use
O	35031	35041	sequential
O	35042	35049	streams
O	35050	35052	by
O	35053	35060	default
O	35061	35064	and
O	35065	35069	only
O	35070	35078	consider
O	35079	35087	parallel
O	35088	35092	ones
O	35093	35095	if
O	35096	35097	#
O	35097	35099	li
O	35100	35101	I
O	35102	35106	have
O	35107	35108	a
O	35109	35116	massive
O	35117	35123	amount
O	35124	35126	of
O	35127	35132	items
O	35133	35135	to
O	35136	35143	process
O	35144	35145	(
O	35145	35147	or
O	35148	35151	the
O	35152	35162	processing
O	35163	35165	of
O	35166	35170	each
O	35171	35175	item
O	35176	35181	takes
O	35182	35186	time
O	35187	35190	and
O	35191	35193	is
O	35194	35208	parallelizable
O	35208	35209	)
O	35210	35211	#
O	35211	35213	li
O	35214	35215	I
O	35216	35220	have
O	35221	35222	a
O	35223	35234	performance
O	35235	35242	problem
O	35243	35245	in
O	35246	35249	the
O	35250	35255	first
O	35256	35261	place
O	35262	35263	#
O	35263	35265	li
O	35266	35267	I
O	35268	35271	don
O	35271	35272	'
O	35272	35273	t
O	35274	35281	already
O	35282	35285	run
O	35286	35289	the
O	35290	35297	process
O	35298	35300	in
O	35301	35302	a
O	35303	35308	multi
O	35308	35309	-
O	35309	35315	thread
O	35316	35327	environment
O	35328	35329	(
O	35329	35332	for
O	35333	35340	example
O	35340	35341	:
O	35342	35344	in
O	35345	35346	a
O	35347	35350	web
O	35351	35360	container
O	35360	35361	,
O	35362	35364	if
O	35365	35366	I
O	35367	35374	already
O	35375	35379	have
O	35380	35384	many
O	35385	35393	requests
O	35394	35396	to
O	35397	35404	process
O	35405	35407	in
O	35408	35416	parallel
O	35416	35417	,
O	35418	35424	adding
O	35425	35427	an
O	35428	35438	additional
O	35439	35444	layer
O	35445	35447	of
O	35448	35459	parallelism
O	35460	35466	inside
O	35467	35471	each
O	35472	35479	request
O	35480	35485	could
O	35486	35490	have
O	35491	35495	more
O	35496	35504	negative
O	35505	35509	than
O	35510	35518	positive
O	35519	35526	effects
O	35526	35527	)
O	35528	35530	In
O	35531	35535	your
O	35536	35543	example
O	35543	35544	,
O	35545	35548	the
O	35549	35560	performance
O	35561	35565	will
O	35566	35572	anyway
O	35573	35575	be
O	35576	35582	driven
O	35583	35585	by
O	35586	35589	the
O	35590	35602	synchronized
O	35603	35609	access
O	35610	35612	to
B-api_mention	35613	35619	System
I-api_mention	35619	35620	.
I-api_mention	35620	35623	out
I-api_mention	35623	35624	.
I-api_mention	35624	35631	println
I-api_mention	35631	35632	(
I-api_mention	35632	35636	args
I-api_mention	35636	35637	)
O	35638	35639	,
O	35640	35643	and
O	35644	35650	making
O	35651	35655	this
O	35656	35663	process
O	35664	35672	parallel
O	35673	35677	will
O	35678	35682	have
O	35683	35685	no
O	35686	35692	effect
O	35692	35693	,
O	35694	35696	or
O	35697	35701	even
O	35702	35703	a
O	35704	35712	negative
O	35713	35716	one
O	35716	35717	.

O	35718	35726	Moreover
O	35726	35727	,
O	35728	35736	remember
O	35737	35741	that
O	35742	35750	parallel
O	35751	35758	streams
O	35759	35762	don
O	35762	35763	'
O	35763	35764	t
O	35765	35774	magically
O	35775	35780	solve
O	35781	35784	all
O	35785	35788	the
O	35789	35804	synchronization
O	35805	35813	problems
O	35813	35814	.

O	35815	35817	If
O	35818	35819	a
O	35820	35826	shared
O	35827	35835	resource
O	35836	35838	is
O	35839	35843	used
O	35844	35846	by
O	35847	35850	the
O	35851	35861	predicates
O	35862	35865	and
O	35866	35875	functions
O	35876	35880	used
O	35881	35883	in
O	35884	35887	the
O	35888	35895	process
O	35895	35896	,
O	35897	35900	you
O	35900	35901	'
O	35901	35903	ll
O	35904	35908	have
O	35909	35911	to
O	35912	35916	make
O	35917	35921	sure
O	35922	35926	that
O	35927	35937	everything
O	35938	35940	is
O	35941	35947	thread
O	35947	35948	-
O	35948	35952	safe
O	35952	35953	.

O	35954	35956	In
O	35957	35967	particular
O	35967	35968	,
O	35969	35973	side
O	35974	35981	effects
O	35982	35985	are
O	35986	35991	tings
O	35992	35995	you
O	35996	36002	really
O	36003	36007	have
O	36008	36010	to
O	36011	36016	worry
O	36017	36022	about
O	36023	36025	if
O	36026	36029	you
O	36030	36032	go
O	36033	36041	parallel
O	36041	36042	.

O	36043	36045	In
O	36046	36049	any
O	36050	36054	case
O	36054	36055	,
O	36056	36063	measure
O	36063	36064	,
O	36065	36068	don
O	36068	36069	'
O	36069	36070	t
O	36071	36076	guess
O	36076	36077	!

O	36078	36082	Only
O	36083	36084	a
O	36085	36096	measurement
O	36097	36101	will
O	36102	36106	tell
O	36107	36110	you
O	36111	36113	if
O	36114	36117	the
O	36118	36129	parallelism
O	36130	36132	is
O	36133	36138	worth
O	36139	36141	it
O	36142	36144	or
O	36145	36148	not
O	36148	36149	.

O	36151	36159	Question
O	36159	36160	-
O	36160	36168	17781150
O	36168	36169	,
O	36170	36176	answer
O	36176	36177	-
O	36177	36185	17781168

O	36186	36189	The
O	36190	36195	value
O	36196	36199	you
O	36200	36203	are
O	36204	36211	looking
O	36212	36215	for
O	36216	36218	is
B-api_mention	36219	36226	Integer
I-api_mention	36226	36227	.
I-api_mention	36227	36230	MIN
I-api_mention	36230	36231	_
I-api_mention	36231	36236	VALUE
O	36237	36238	.

O	36239	36240	#
O	36240	36250	blockquote
O	36251	36255	That
O	36255	36256	'
O	36256	36257	s
O	36258	36261	off
O	36261	36262	-
O	36262	36267	topic
O	36268	36271	for
O	36272	36277	Stack
O	36278	36286	Exchange
O	36286	36287	.

O	36288	36291	But
O	36292	36295	you
O	36296	36301	could
O	36302	36304	do
O	36305	36307	it
O	36308	36316	starting
O	36317	36321	from
O	36322	36325	the
O	36326	36336	definition
O	36337	36339	of
O	36340	36344	Java
O	36345	36353	integers
O	36354	36355	(
O	36356	36359	JLS
O	36360	36361	4
O	36361	36362	.
O	36362	36363	2
O	36364	36365	)
O	36366	36367	#
O	36367	36377	blockquote
O	36378	36381	and
O	36382	36383	#
O	36383	36393	blockquote
O	36394	36397	and
O	36398	36401	the
O	36402	36412	definition
O	36413	36415	of
O	36416	36419	the
O	36420	36424	Java
O	36425	36430	unary
O	36431	36432	'
O	36432	36433	-
O	36433	36434	'
O	36435	36443	operator
O	36444	36445	(
O	36446	36449	JLS
O	36450	36452	15
O	36452	36453	.
O	36453	36455	15
O	36455	36456	.
O	36456	36457	4
O	36458	36459	)
O	36459	36460	:
O	36461	36462	#
O	36462	36472	blockquote

O	36474	36482	Question
O	36482	36483	-
O	36483	36491	17781150
O	36491	36492	,
O	36493	36499	answer
O	36499	36500	-
O	36500	36508	17781189

O	36509	36512	The
O	36513	36517	only
O	36518	36521	int
O	36522	36527	value
O	36528	36531	for
O	36532	36537	which
O	36538	36540	it
O	36541	36546	works
O	36547	36549	is
B-api_mention	36550	36557	Integer
I-api_mention	36557	36558	.
I-api_mention	36558	36561	MIN
I-api_mention	36561	36562	_
I-api_mention	36562	36567	VALUE
O	36568	36569	.

O	36570	36572	It
O	36572	36573	'
O	36573	36574	s
O	36575	36582	because
O	36583	36591	integers
O	36592	36595	are
O	36596	36603	negated
O	36604	36609	using
O	36610	36613	the
O	36614	36617	two
O	36617	36618	'
O	36618	36619	s
O	36620	36630	complement
O	36631	36634	way
O	36635	36636	.

O	36637	36642	Using
B-api_mention	36643	36649	System
I-api_mention	36649	36650	.
I-api_mention	36650	36653	out
I-api_mention	36653	36654	.
I-api_mention	36654	36661	println
I-api_mention	36661	36662	(
I-api_mention	36662	36666	args
I-api_mention	36666	36667	)
O	36667	36668	;
O	36669	36672	you
O	36673	36676	see
O	36677	36681	that
B-api_mention	36682	36689	Integer
I-api_mention	36689	36690	.
I-api_mention	36690	36693	MIN
I-api_mention	36693	36694	_
I-api_mention	36694	36699	VALUE
O	36700	36702	is
O	36703	36735	10000000000000000000000000000000
O	36736	36742	Taking
O	36743	36746	the
O	36747	36755	negative
O	36756	36761	value
O	36762	36764	is
O	36765	36769	done
O	36770	36772	by
O	36773	36778	first
O	36779	36787	swapping
O	36788	36789	0
O	36790	36793	and
O	36794	36795	1
O	36796	36797	,
O	36798	36803	which
O	36804	36809	gives
O	36810	36842	01111111111111111111111111111111
O	36843	36846	and
O	36847	36849	by
O	36850	36856	adding
O	36857	36858	1
O	36859	36860	,
O	36861	36866	which
O	36867	36872	gives
O	36873	36905	10000000000000000000000000000000
O	36906	36908	As
O	36909	36912	you
O	36913	36916	can
O	36917	36920	see
O	36921	36923	in
O	36924	36927	the
O	36928	36932	link
O	36933	36934	I
O	36935	36939	gave
O	36939	36940	,
O	36941	36950	Wikipedia
O	36951	36959	mentions
O	36960	36963	the
O	36964	36971	problem
O	36972	36976	with
O	36977	36980	the
O	36981	36985	most
O	36986	36994	negative
O	36995	37002	numbers
O	37003	37006	and
O	37007	37016	specifies
O	37017	37019	it
O	37019	37020	'
O	37020	37021	s
O	37022	37025	the
O	37026	37030	sole
O	37031	37040	exception
O	37041	37042	:
O	37043	37044	#
O	37044	37054	blockquote
O	37055	37057	Of
O	37058	37064	course
O	37065	37068	you
O	37069	37073	have
O	37074	37077	the
O	37078	37082	same
O	37083	37093	phenomenon
O	37094	37097	for
B-api_mention	37098	37102	Long
O	37102	37103	.
O	37103	37106	Min
O	37106	37107	_
O	37107	37112	Value
O	37113	37115	if
O	37116	37119	you
O	37120	37125	store
O	37126	37128	it
O	37129	37131	in
O	37132	37133	a
O	37134	37138	long
O	37139	37147	variable
O	37147	37148	.

O	37149	37153	Note
O	37154	37158	that
O	37159	37163	this
O	37164	37166	is
O	37167	37171	only
O	37172	37175	due
O	37176	37178	to
O	37179	37186	choices
O	37187	37191	that
O	37192	37196	were
O	37197	37201	made
O	37202	37211	regarding
O	37212	37215	the
O	37216	37222	binary
O	37223	37230	storage
O	37231	37233	of
O	37234	37238	ints
O	37239	37241	in
O	37242	37246	Java
O	37247	37248	.

O	37249	37256	Another
O	37257	37258	(
O	37258	37261	bad
O	37261	37262	)
O	37263	37271	solution
O	37272	37277	could
O	37278	37281	for
O	37282	37289	example
O	37290	37294	have
O	37295	37299	been
O	37300	37302	to
O	37303	37309	negate
O	37310	37312	by
O	37313	37319	simply
O	37320	37328	changing
O	37329	37332	the
O	37333	37337	most
O	37338	37349	significant
O	37350	37353	bit
O	37354	37357	and
O	37358	37365	letting
O	37366	37369	the
O	37370	37375	other
O	37376	37380	bits
O	37381	37390	unchanged
O	37390	37391	,
O	37392	37396	this
O	37397	37402	would
O	37403	37407	have
O	37408	37415	avoided
O	37416	37420	this
O	37421	37428	problem
O	37429	37433	with
B-api_mention	37434	37437	MIN
I-api_mention	37437	37438	_
I-api_mention	37438	37443	VALUE
O	37444	37447	but
O	37448	37453	would
O	37454	37458	have
O	37459	37463	made
O	37464	37465	2
O	37466	37475	different
O	37476	37477	0
O	37478	37484	values
O	37485	37488	and
O	37489	37500	complicated
O	37501	37507	binary
O	37508	37518	arithmetic
O	37519	37520	(
O	37520	37523	how
O	37524	37529	would
O	37530	37533	you
O	37534	37538	have
O	37539	37550	incremented
O	37551	37554	for
O	37555	37562	example
O	37563	37564	?
O	37564	37565	)
O	37565	37566	.

O	37568	37576	Question
O	37576	37577	-
O	37577	37585	17781150
O	37585	37586	,
O	37587	37593	answer
O	37593	37594	-
O	37594	37602	17781376

O	37603	37607	Like
O	37608	37611	the
O	37612	37618	others
O	37619	37623	have
O	37624	37633	mentioned
O	37633	37634	,
O	37635	37639	this
O	37640	37642	is
O	37643	37647	only
O	37648	37657	fulfilled
O	37658	37660	by
B-api_mention	37661	37668	Integer
I-api_mention	37668	37669	.
I-api_mention	37669	37672	MIN
I-api_mention	37672	37673	_
I-api_mention	37673	37678	VALUE
O	37679	37680	.

O	37681	37683	As
O	37684	37687	for
O	37688	37693	proof
O	37693	37694	,
O	37695	37698	let
O	37699	37701	me
O	37702	37707	offer
O	37708	37710	an
O	37711	37717	easier
O	37718	37720	to
O	37721	37731	understand
O	37732	37743	explanation
O	37744	37749	other
O	37750	37754	than
O	37755	37757	in
O	37758	37764	binary
O	37765	37766	(
O	37766	37774	although
O	37775	37777	it
O	37778	37780	is
O	37781	37786	still
O	37787	37793	rooted
O	37794	37796	in
O	37797	37801	that
O	37801	37802	)
O	37802	37803	.

O	37804	37808	Note
O	37809	37813	that
B-api_mention	37814	37821	Integer
I-api_mention	37821	37822	.
I-api_mention	37822	37825	MIN
I-api_mention	37825	37826	_
I-api_mention	37826	37831	VALUE
O	37832	37834	is
O	37835	37840	equal
O	37841	37843	to
O	37844	37845	-
O	37845	37846	2
O	37846	37847	^
O	37847	37849	31
O	37850	37852	or
O	37853	37854	-
O	37854	37864	2147483648
O	37865	37868	and
B-api_mention	37869	37876	Integer
I-api_mention	37876	37877	.
I-api_mention	37877	37880	MAX
I-api_mention	37880	37881	_
I-api_mention	37881	37886	VALUE
O	37887	37889	is
O	37890	37895	equal
O	37896	37898	to
O	37899	37900	2
O	37900	37901	^
O	37901	37903	31
O	37903	37904	-
O	37904	37905	1
O	37906	37908	or
O	37909	37919	2147483647
O	37920	37921	.

O	37922	37923	-
B-api_mention	37923	37930	Integer
I-api_mention	37930	37931	.
I-api_mention	37931	37934	MIN
I-api_mention	37934	37935	_
I-api_mention	37935	37940	VALUE
O	37941	37943	is
O	37944	37945	2
O	37945	37946	^
O	37946	37948	31
O	37949	37950	,
O	37951	37956	which
O	37957	37959	is
O	37960	37963	now
O	37964	37967	too
O	37968	37973	large
O	37974	37977	for
O	37978	37980	an
B-api_mention	37981	37988	Integer
O	37989	37990	(
O	37990	37995	since
O	37996	37998	it
O	37999	38001	is
O	38002	38006	past
B-api_mention	38007	38010	MAX
I-api_mention	38010	38011	_
I-api_mention	38011	38016	VALUE
O	38017	38018	)
O	38019	38023	thus
O	38024	38031	causing
O	38032	38034	an
B-api_mention	38035	38042	Integer
O	38043	38051	overflow
O	38051	38052	,
O	38053	38059	making
O	38060	38062	it
B-api_mention	38063	38070	Integer
I-api_mention	38070	38071	.
I-api_mention	38071	38074	MIN
I-api_mention	38074	38075	_
I-api_mention	38075	38080	VALUE
O	38081	38086	again
O	38086	38087	.

O	38088	38090	It
O	38090	38091	'
O	38091	38092	s
O	38093	38096	the
O	38097	38101	only
O	38102	38109	Integer
O	38110	38114	that
O	38115	38119	does
O	38120	38124	this
O	38125	38130	since
B-api_mention	38131	38134	MIN
I-api_mention	38134	38135	_
I-api_mention	38135	38140	VALUE
O	38141	38143	is
O	38144	38147	the
O	38148	38152	only
O	38153	38159	number
O	38160	38164	with
O	38165	38167	no
O	38168	38176	negative
O	38177	38187	equivalent
O	38188	38193	aside
O	38194	38198	from
O	38199	38200	0
O	38200	38201	.

O	38203	38211	Question
O	38211	38212	-
O	38212	38220	20746429
O	38220	38221	,
O	38222	38228	answer
O	38228	38229	-
O	38229	38237	20765715

O	38238	38242	Such
O	38243	38245	an
O	38246	38255	operation
O	38256	38261	ought
O	38262	38264	to
O	38265	38267	be
O	38268	38276	possible
O	38277	38281	with
O	38282	38283	a
O	38284	38288	Java
O	38289	38290	8
O	38291	38297	Stream
O	38298	38299	,
O	38300	38303	but
O	38304	38306	it
O	38307	38310	can
O	38310	38311	'
O	38311	38312	t
O	38313	38324	necessarily
O	38325	38327	be
O	38328	38332	done
O	38333	38344	efficiently
O	38345	38346	-
O	38346	38347	-
O	38348	38351	for
O	38352	38359	example
O	38359	38360	,
O	38361	38364	you
O	38365	38368	can
O	38368	38369	'
O	38369	38370	t
O	38371	38382	necessarily
O	38383	38394	parallelize
O	38395	38399	such
O	38400	38402	an
O	38403	38412	operation
O	38412	38413	,
O	38414	38416	as
O	38417	38420	you
O	38421	38425	have
O	38426	38428	to
O	38429	38433	look
O	38434	38436	at
O	38437	38445	elements
O	38446	38448	in
O	38449	38454	order
O	38454	38455	.

O	38456	38459	The
O	38460	38463	API
O	38464	38469	doesn
O	38469	38470	'
O	38470	38471	t
O	38472	38479	provide
O	38480	38482	an
O	38483	38487	easy
O	38488	38491	way
O	38492	38494	to
O	38495	38497	do
O	38498	38500	it
O	38500	38501	,
O	38502	38505	but
O	38506	38510	what
O	38510	38511	'
O	38511	38512	s
O	38513	38521	probably
O	38522	38525	the
O	38526	38534	simplest
O	38535	38538	way
O	38539	38541	is
O	38542	38544	to
O	38545	38549	take
B-api_mention	38550	38556	Stream
I-api_mention	38556	38557	.
I-api_mention	38557	38565	iterator
I-api_mention	38565	38566	(
I-api_mention	38566	38570	args
I-api_mention	38570	38571	)
O	38572	38573	,
O	38574	38578	wrap
O	38579	38582	the
O	38583	38591	Iterator
O	38592	38594	to
O	38595	38599	have
O	38600	38601	a
O	38602	38603	"
O	38603	38607	take
O	38607	38608	-
O	38608	38613	while
O	38613	38614	"
O	38615	38629	implementation
O	38629	38630	,
O	38631	38634	and
O	38635	38639	then
O	38640	38642	go
O	38643	38647	back
O	38648	38650	to
O	38651	38652	a
B-api_mention	38653	38664	Spliterator
O	38665	38668	and
O	38669	38673	then
O	38674	38675	a
B-api_mention	38676	38682	Stream
O	38683	38684	.

O	38685	38687	Or
O	38688	38689	-
O	38689	38690	-
O	38691	38696	maybe
O	38697	38698	-
O	38698	38699	-
O	38700	38704	wrap
O	38705	38708	the
B-api_mention	38709	38720	Spliterator
O	38721	38722	,
O	38723	38729	though
O	38730	38732	it
O	38733	38736	can
O	38736	38737	'
O	38737	38738	t
O	38739	38745	really
O	38746	38748	be
O	38749	38754	split
O	38755	38762	anymore
O	38763	38765	in
O	38766	38770	this
O	38771	38785	implementation
O	38785	38786	.

O	38787	38791	Here
O	38791	38792	'
O	38792	38793	s
O	38794	38796	an
O	38797	38805	untested
O	38806	38820	implementation
O	38821	38823	of
O	38824	38833	takeWhile
O	38834	38836	on
O	38837	38838	a
B-api_mention	38839	38850	Spliterator
O	38851	38852	:
O	38853	38854	#
O	38854	38857	pre

O	38859	38867	Question
O	38867	38868	-
O	38868	38876	20746429
O	38876	38877	,
O	38878	38884	answer
O	38884	38885	-
O	38885	38893	24531394

O	38894	38898	Here
O	38899	38901	is
O	38902	38903	a
O	38904	38911	version
O	38912	38916	done
O	38917	38919	on
O	38920	38924	ints
O	38925	38926	-
O	38927	38929	as
O	38930	38935	asked
O	38936	38938	in
O	38939	38942	the
O	38943	38951	question
O	38951	38952	.

O	38953	38958	Usage
O	38958	38959	:
B-api_mention	38960	38970	StreamUtil
O	38970	38971	.
O	38971	38980	takeWhile
O	38980	38981	(
O	38981	38985	args
O	38985	38986	)
O	38986	38987	;
O	38988	38992	Here
O	38992	38993	'
O	38993	38994	s
O	38995	38999	code
O	39000	39003	for
B-api_mention	39004	39014	StreamUtil
O	39014	39015	:
O	39016	39017	#
O	39017	39020	pre

O	39022	39030	Question
O	39030	39031	-
O	39031	39039	19416644
O	39039	39040	,
O	39041	39047	answer
O	39047	39048	-
O	39048	39056	19416665

O	39057	39060	One
O	39061	39067	simple
O	39068	39071	way
O	39072	39074	is
O	39075	39077	to
O	39078	39081	use
B-api_mention	39082	39087	Float
I-api_mention	39087	39088	.
I-api_mention	39088	39091	NaN
O	39092	39093	:
O	39094	39095	#
O	39095	39098	pre
O	39099	39100	#
O	39100	39103	pre
O	39104	39107	You
O	39108	39111	can
O	39112	39114	do
O	39115	39118	the
O	39119	39123	same
O	39124	39128	with
B-api_mention	39129	39135	Double
I-api_mention	39135	39136	.
I-api_mention	39136	39139	NaN
O	39140	39141	.

O	39142	39146	From
O	39147	39150	JLS
O	39151	39152	§
O	39152	39154	15
O	39154	39155	.
O	39155	39157	21
O	39157	39158	.
O	39158	39159	1
O	39159	39160	.

O	39161	39170	Numerical
O	39171	39179	Equality
O	39180	39189	Operators
O	39190	39191	=
O	39191	39192	=
O	39193	39196	and
O	39197	39198	!
O	39198	39199	=
O	39200	39201	:
O	39202	39203	#
O	39203	39213	blockquote

O	39215	39223	Question
O	39223	39224	-
O	39224	39232	19416644
O	39232	39233	,
O	39234	39240	answer
O	39240	39241	-
O	39241	39249	19775881

O	39250	39256	Create
O	39257	39261	your
O	39262	39265	own
O	39266	39271	class
O	39272	39278	System
O	39279	39281	in
O	39282	39285	tha
O	39286	39290	same
O	39291	39298	package
O	39299	39303	with
O	39304	39313	Condition
O	39314	39315	.

O	39316	39318	In
O	39319	39323	this
O	39324	39328	case
O	39329	39333	your
O	39334	39340	System
O	39341	39346	class
O	39347	39351	will
O	39352	39356	hide
B-api_mention	39357	39361	java
I-api_mention	39361	39362	.
I-api_mention	39362	39366	lang
I-api_mention	39366	39367	.
I-api_mention	39367	39373	System
O	39374	39379	class
O	39380	39381	#
O	39381	39384	pre
O	39385	39391	Ideone
O	39392	39396	DEMO

O	39398	39406	Question
O	39406	39407	-
O	39407	39415	20358883
O	39415	39416	,
O	39417	39423	answer
O	39423	39424	-
O	39424	39432	20358917

O	39433	39437	Very
O	39438	39444	simply
O	39444	39445	:
B-api_mention	39446	39452	Arrays
I-api_mention	39452	39453	.
I-api_mention	39453	39459	asList
I-api_mention	39459	39460	(
I-api_mention	39460	39464	args
I-api_mention	39464	39465	)

O	39467	39475	Question
O	39475	39476	-
O	39476	39484	20358883
O	39484	39485	,
O	39486	39492	answer
O	39492	39493	-
O	39493	39501	20358920

O	39502	39507	Fixed
O	39508	39512	size
B-api_mention	39513	39517	List
O	39518	39521	The
O	39522	39529	easiest
O	39530	39533	way
O	39533	39534	,
O	39535	39539	that
O	39540	39541	I
O	39542	39546	know
O	39547	39549	of
O	39549	39550	,
O	39551	39553	is
O	39554	39556	to
O	39557	39563	create
O	39564	39565	a
O	39566	39571	fixed
O	39571	39572	-
O	39572	39576	size
O	39577	39583	single
O	39584	39591	element
B-api_mention	39592	39596	List
O	39597	39601	with
B-api_mention	39602	39608	Arrays
I-api_mention	39608	39609	.
I-api_mention	39609	39615	asList
O	39615	39616	(
O	39616	39617	T
O	39617	39618	.
O	39618	39619	.
O	39619	39620	.
O	39620	39621	)
O	39622	39626	like
O	39627	39628	/
O	39628	39629	/
O	39630	39637	Returns
O	39638	39639	a
O	39640	39644	List
O	39645	39651	backed
O	39652	39654	by
O	39655	39656	a
O	39657	39664	varargs
O	39665	39666	T
O	39666	39667	.
O	39668	39674	return
B-api_mention	39675	39681	Arrays
I-api_mention	39681	39682	.
I-api_mention	39682	39688	asList
I-api_mention	39688	39689	(
I-api_mention	39689	39693	args
I-api_mention	39693	39694	)
O	39694	39695	;
O	39696	39704	Variable
O	39705	39709	size
B-api_mention	39710	39714	List
O	39715	39717	If
O	39718	39720	it
O	39721	39726	needs
O	39727	39731	vary
O	39732	39734	in
O	39735	39739	size
O	39740	39743	you
O	39744	39747	can
O	39748	39757	construct
O	39758	39760	an
B-api_mention	39761	39770	ArrayList
O	39771	39774	and
O	39775	39778	the
O	39779	39784	fixed
O	39784	39785	-
O	39785	39789	size
B-api_mention	39790	39794	List
O	39795	39799	like
O	39800	39806	return
O	39807	39810	new
B-api_mention	39811	39820	ArrayList
I-api_mention	39820	39821	<
I-api_mention	39821	39822	T
I-api_mention	39822	39823	>
I-api_mention	39823	39824	(
I-api_mention	39824	39828	args
I-api_mention	39828	39829	)
O	39829	39830	;
O	39831	39834	and
O	39835	39836	(
O	39836	39838	in
O	39839	39843	Java
O	39844	39845	7
O	39845	39846	+
O	39846	39847	)
O	39848	39851	you
O	39852	39855	can
O	39856	39859	use
O	39860	39863	the
O	39864	39871	diamond
O	39872	39880	operator
O	39881	39882	<
O	39882	39883	>
O	39884	39886	to
O	39887	39891	make
O	39892	39894	it
O	39895	39901	return
O	39902	39905	new
B-api_mention	39906	39915	ArrayList
I-api_mention	39915	39916	<
I-api_mention	39916	39917	T
I-api_mention	39917	39918	>
I-api_mention	39918	39919	(
I-api_mention	39919	39923	args
I-api_mention	39923	39924	)
O	39924	39925	;

O	39927	39935	Question
O	39935	39936	-
O	39936	39944	20358883
O	39944	39945	,
O	39946	39952	answer
O	39952	39953	-
O	39953	39961	20358928

O	39962	39965	You
O	39966	39969	can
O	39970	39973	use
O	39974	39977	the
O	39978	39985	utility
O	39986	39992	method
B-api_mention	39993	39999	Arrays
I-api_mention	39999	40000	.
I-api_mention	40000	40006	asList
O	40007	40010	and
O	40011	40015	feed
O	40016	40020	that
O	40021	40027	result
O	40028	40032	into
O	40033	40034	a
O	40035	40038	new
B-api_mention	40039	40048	ArrayList
O	40049	40050	.

B-api_mention	40051	40060	ArrayList
I-api_mention	40060	40061	<
I-api_mention	40061	40062	T
I-api_mention	40062	40063	>
O	40064	40068	list
O	40069	40070	=
O	40071	40074	new
B-api_mention	40075	40084	ArrayList
I-api_mention	40084	40085	<
I-api_mention	40085	40086	T
I-api_mention	40086	40087	>
I-api_mention	40087	40088	(
I-api_mention	40088	40092	args
I-api_mention	40092	40093	)
O	40093	40094	;
O	40095	40100	Other
O	40101	40108	options
O	40108	40109	:
B-api_mention	40110	40119	ArrayList
I-api_mention	40119	40120	<
I-api_mention	40120	40121	T
I-api_mention	40121	40122	>
O	40123	40127	list
O	40128	40129	=
O	40130	40133	new
B-api_mention	40134	40143	ArrayList
I-api_mention	40143	40144	<
I-api_mention	40144	40145	T
I-api_mention	40145	40146	>
I-api_mention	40146	40147	(
I-api_mention	40147	40151	args
I-api_mention	40151	40152	)
O	40152	40153	;
O	40154	40157	and
B-api_mention	40158	40167	ArrayList
I-api_mention	40167	40168	<
I-api_mention	40168	40169	T
I-api_mention	40169	40170	>
O	40171	40175	list
O	40176	40177	=
O	40178	40181	new
B-api_mention	40182	40191	ArrayList
I-api_mention	40191	40192	<
I-api_mention	40192	40193	T
I-api_mention	40193	40194	>
I-api_mention	40194	40195	(
I-api_mention	40195	40199	args
I-api_mention	40199	40200	)
O	40200	40201	;
O	40202	40203	#
O	40203	40205	li
B-api_mention	40206	40215	ArrayList
I-api_mention	40215	40216	(
I-api_mention	40216	40226	Collection
I-api_mention	40226	40227	)
O	40228	40239	constructor
O	40239	40240	.

O	40241	40242	#
O	40242	40244	li
B-api_mention	40245	40251	Arrays
I-api_mention	40251	40252	.
I-api_mention	40252	40258	asList
O	40259	40265	method
O	40265	40266	.

O	40267	40268	#
O	40268	40270	li
B-api_mention	40271	40282	Collections
I-api_mention	40282	40283	.
I-api_mention	40283	40290	nCopies
O	40291	40297	method
O	40297	40298	.

O	40299	40300	#
O	40300	40302	li
B-api_mention	40303	40314	Collections
I-api_mention	40314	40315	.
I-api_mention	40315	40328	singletonList
O	40329	40335	method
O	40335	40336	.

O	40338	40346	Question
O	40346	40347	-
O	40347	40355	20358883
O	40355	40356	,
O	40357	40363	answer
O	40363	40364	-
O	40364	40372	29784337

O	40373	40376	The
O	40377	40382	other
O	40383	40390	answers
O	40391	40394	all
O	40395	40398	use
B-api_mention	40399	40405	Arrays
I-api_mention	40405	40406	.
I-api_mention	40406	40412	asList
I-api_mention	40412	40413	(
I-api_mention	40413	40417	args
I-api_mention	40417	40418	)
O	40419	40420	,
O	40421	40426	which
O	40427	40434	returns
O	40435	40437	an
O	40438	40450	unmodifiable
O	40451	40455	list
O	40456	40457	(
O	40457	40459	an
B-api_mention	40460	40489	UnsupportedOperationException
O	40490	40492	is
O	40493	40499	thrown
O	40500	40502	if
O	40503	40506	you
O	40507	40510	try
O	40511	40513	to
O	40514	40517	add
O	40518	40520	or
O	40521	40527	remove
O	40528	40530	an
O	40531	40538	element
O	40538	40539	)
O	40539	40540	.

O	40541	40543	To
O	40544	40547	get
O	40548	40549	a
O	40550	40557	mutable
O	40558	40562	list
O	40563	40566	you
O	40567	40570	can
O	40571	40575	wrap
O	40576	40579	the
O	40580	40588	returned
O	40589	40593	list
O	40594	40596	in
O	40597	40598	a
O	40599	40602	new
B-api_mention	40603	40612	ArrayList
O	40613	40615	as
O	40616	40617	a
O	40618	40624	couple
O	40625	40627	of
O	40628	40635	answers
O	40636	40641	point
O	40642	40645	out
O	40645	40646	,
O	40647	40650	but
O	40651	40652	a
O	40653	40660	cleaner
O	40661	40669	solution
O	40670	40672	is
O	40673	40675	to
O	40676	40679	use
O	40680	40685	Guava
O	40685	40686	'
O	40686	40687	s
B-api_mention	40688	40693	Lists
I-api_mention	40693	40694	.
I-api_mention	40694	40706	newArrayList
I-api_mention	40706	40707	(
I-api_mention	40707	40708	)
O	40709	40710	(
O	40710	40719	available
O	40720	40725	since
O	40726	40728	at
O	40729	40734	least
O	40735	40740	Guava
O	40741	40743	10
O	40744	40745	,
O	40746	40754	released
O	40755	40757	in
O	40758	40762	2011
O	40762	40763	)
O	40763	40764	.

O	40765	40768	For
O	40769	40776	example
O	40776	40777	:
B-api_mention	40778	40783	Lists
I-api_mention	40783	40784	.
I-api_mention	40784	40796	newArrayList
I-api_mention	40796	40797	(
I-api_mention	40797	40801	args
I-api_mention	40801	40802	)
O	40802	40803	;

O	40805	40813	Question
O	40813	40814	-
O	40814	40822	20358883
O	40822	40823	,
O	40824	40830	answer
O	40830	40831	-
O	40831	40839	31931870

B-api_mention	40840	40851	Collections
I-api_mention	40851	40852	.
I-api_mention	40852	40865	singletonList
I-api_mention	40865	40866	(
I-api_mention	40866	40870	args
I-api_mention	40870	40871	)

O	40873	40881	Question
O	40881	40882	-
O	40882	40890	20358883
O	40890	40891	,
O	40892	40898	answer
O	40898	40899	-
O	40899	40907	31965160

O	40908	40912	With
O	40913	40917	Java
O	40918	40919	8
O	40920	40927	Streams
O	40927	40928	:
B-api_mention	40929	40935	Stream
I-api_mention	40935	40936	.
I-api_mention	40936	40938	of
I-api_mention	40938	40939	(
I-api_mention	40939	40943	args
I-api_mention	40943	40944	)
I-api_mention	40944	40945	.
I-api_mention	40945	40952	collect
I-api_mention	40952	40953	(
I-api_mention	40953	40957	args
I-api_mention	40957	40958	)
O	40959	40961	or
O	40962	40964	if
O	40965	40968	you
O	40969	40973	need
O	40974	40975	a
O	40976	40979	set
O	40979	40980	:
B-api_mention	40981	40987	Stream
I-api_mention	40987	40988	.
I-api_mention	40988	40990	of
I-api_mention	40990	40991	(
I-api_mention	40991	40995	args
I-api_mention	40995	40996	)
I-api_mention	40996	40997	.
I-api_mention	40997	41004	collect
I-api_mention	41004	41005	(
I-api_mention	41005	41009	args
I-api_mention	41009	41010	)

O	41012	41020	Question
O	41020	41021	-
O	41021	41029	18636561
O	41029	41030	,
O	41031	41037	answer
O	41037	41038	-
O	41038	41046	18824858

O	41047	41055	Whenever
O	41056	41057	a
O	41058	41061	new
O	41062	41069	keyword
O	41070	41072	is
O	41073	41077	used
O	41078	41080	it
O	41081	41088	Creates
O	41089	41090	a
B-api_mention	41091	41097	Object
O	41098	41100	at
O	41101	41104	the
O	41105	41109	Heap
O	41110	41111	1
O	41111	41112	)
B-api_mention	41112	41125	StringBuilder
O	41126	41132	sample
O	41133	41134	=
O	41135	41138	new
B-api_mention	41139	41152	StringBuilder
I-api_mention	41152	41153	(
I-api_mention	41153	41154	)
O	41154	41155	;
O	41156	41157	2
O	41157	41158	)
B-api_mention	41159	41172	StringBuilder
O	41173	41186	referToSample
O	41187	41188	=
O	41189	41195	sample
O	41195	41196	;
O	41197	41199	In
O	41200	41201	2
O	41201	41202	)
O	41203	41206	the
O	41207	41216	Reference
O	41217	41219	of
O	41220	41231	referSample
O	41232	41234	is
O	41235	41242	created
O	41243	41245	on
O	41246	41250	same
O	41251	41257	object
O	41258	41264	sample
O	41265	41269	thus
O	41270	41283	referToSample
O	41284	41285	=
O	41286	41290	null
O	41290	41291	;
O	41292	41294	is
O	41295	41302	Nulling
O	41303	41307	Only
O	41308	41311	the
O	41312	41323	referSample
O	41324	41333	Reference
O	41334	41340	giving
O	41341	41343	no
O	41344	41350	effect
O	41351	41353	to
O	41354	41360	sample
O	41361	41365	that
O	41365	41366	'
O	41366	41367	s
O	41368	41371	why
O	41372	41375	you
O	41376	41379	are
O	41380	41383	not
O	41384	41391	getting
O	41392	41396	NULL
O	41397	41404	Pointer
O	41405	41414	Exception
O	41415	41421	Thanks
O	41422	41424	to
O	41425	41429	Java
O	41429	41430	'
O	41430	41431	s
O	41432	41439	Garbage
O	41440	41450	Collection

O	41452	41460	Question
O	41460	41461	-
O	41461	41469	19235606
O	41469	41470	,
O	41471	41477	answer
O	41477	41478	-
O	41478	41486	19235857

B-api_mention	41487	41498	Spliterator
O	41499	41508	basically
O	41509	41514	means
O	41515	41516	"
O	41516	41526	splittable
O	41527	41535	Iterator
O	41535	41536	"
O	41536	41537	.

O	41538	41544	Single
O	41545	41551	thread
O	41552	41555	can
O	41556	41564	traverse
O	41564	41565	/
O	41565	41572	process
O	41573	41576	the
O	41577	41583	entire
B-api_mention	41584	41595	Spliterator
O	41596	41602	itself
O	41602	41603	,
O	41604	41607	but
O	41608	41611	the
B-api_mention	41612	41623	Spliterator
O	41624	41628	also
O	41629	41632	has
O	41633	41634	a
O	41635	41641	method
B-api_mention	41642	41650	trySplit
I-api_mention	41650	41651	(
I-api_mention	41651	41655	args
I-api_mention	41655	41656	)
O	41657	41662	which
O	41663	41667	will
O	41668	41669	"
O	41669	41674	split
O	41675	41678	off
O	41678	41679	"
O	41680	41681	a
O	41682	41689	section
O	41690	41693	for
O	41694	41701	someone
O	41702	41706	else
O	41707	41708	(
O	41708	41717	typically
O	41717	41718	,
O	41719	41726	another
O	41727	41733	thread
O	41733	41734	)
O	41735	41737	to
O	41738	41745	process
O	41746	41747	-
O	41747	41748	-
O	41749	41756	leaving
O	41757	41760	the
O	41761	41768	current
O	41769	41780	spliterator
O	41781	41785	with
O	41786	41790	less
O	41791	41795	work
O	41795	41796	.

B-api_mention	41797	41806	Collector
O	41807	41815	combines
O	41816	41819	the
O	41820	41833	specification
O	41834	41836	of
O	41837	41838	a
O	41839	41845	reduce
O	41846	41854	function
O	41855	41856	(
O	41856	41858	of
O	41859	41862	map
O	41862	41863	-
O	41863	41869	reduce
O	41870	41874	fame
O	41874	41875	)
O	41875	41876	,
O	41877	41881	with
O	41882	41884	an
O	41885	41892	initial
O	41893	41898	value
O	41898	41899	,
O	41900	41903	and
O	41904	41905	a
O	41906	41911	value
O	41912	41914	to
O	41915	41922	combine
O	41923	41926	two
O	41927	41934	results
O	41935	41936	(
O	41936	41940	thus
O	41941	41949	enabling
O	41950	41957	results
O	41958	41962	from
O	41963	41974	Spliterated
O	41975	41982	streams
O	41983	41985	of
O	41986	41990	work
O	41990	41991	,
O	41992	41994	to
O	41995	41997	be
O	41998	42006	combined
O	42006	42007	.
O	42007	42008	)
O	42009	42012	For
O	42013	42020	example
O	42020	42021	,
O	42022	42025	the
O	42026	42030	most
O	42031	42036	basic
B-api_mention	42037	42046	Collector
O	42047	42052	would
O	42053	42057	have
O	42058	42060	an
O	42061	42068	initial
O	42069	42073	vaue
O	42074	42076	of
O	42077	42078	0
O	42078	42079	,
O	42080	42083	add
O	42084	42086	an
O	42087	42094	integer
O	42095	42099	onto
O	42100	42102	an
O	42103	42111	existing
O	42112	42118	result
O	42118	42119	,
O	42120	42123	and
O	42124	42129	would
O	42130	42131	'
O	42131	42138	combine
O	42138	42139	'
O	42140	42143	two
O	42144	42151	results
O	42152	42154	by
O	42155	42161	adding
O	42162	42166	them
O	42166	42167	.

O	42168	42172	Thus
O	42173	42180	summing
O	42181	42182	a
O	42183	42194	spliterated
O	42195	42201	stream
O	42202	42204	of
O	42205	42213	integers
O	42213	42214	.

O	42215	42218	See
O	42218	42219	:
O	42220	42221	#
O	42221	42223	li
B-api_mention	42224	42235	Spliterator
I-api_mention	42235	42236	.
I-api_mention	42236	42244	trySplit
I-api_mention	42244	42245	(
I-api_mention	42245	42246	)
O	42247	42248	#
O	42248	42250	li
B-api_mention	42251	42260	Collector
O	42260	42261	<
O	42261	42262	T
O	42262	42263	,
O	42263	42264	A
O	42264	42265	,
O	42265	42266	R
O	42266	42267	>

O	42269	42277	Question
O	42277	42278	-
O	42278	42286	19235606
O	42286	42287	,
O	42288	42294	answer
O	42294	42295	-
O	42295	42303	19235863

O	42304	42307	You
O	42308	42314	should
O	42315	42321	almost
O	42322	42331	certainly
O	42332	42337	never
O	42338	42342	have
O	42343	42345	to
O	42346	42350	deal
O	42351	42355	with
B-api_mention	42356	42367	Spliterator
O	42368	42370	as
O	42371	42372	a
O	42373	42377	user
O	42377	42378	;
O	42379	42381	it
O	42382	42388	should
O	42389	42393	only
O	42394	42396	be
O	42397	42406	necessary
O	42407	42409	if
O	42410	42413	you
O	42413	42414	'
O	42414	42416	re
O	42417	42424	writing
B-api_mention	42425	42435	Collection
O	42436	42441	types
O	42442	42450	yourself
O	42451	42454	and
O	42455	42459	also
O	42460	42469	intending
O	42470	42472	to
O	42473	42481	optimize
O	42482	42494	parallelized
O	42495	42505	operations
O	42506	42508	on
O	42509	42513	them
O	42513	42514	.

O	42515	42518	For
O	42519	42523	what
O	42524	42526	it
O	42526	42527	'
O	42527	42528	s
O	42529	42534	worth
O	42534	42535	,
O	42536	42537	a
B-api_mention	42538	42549	Spliterator
O	42550	42552	is
O	42553	42554	a
O	42555	42558	way
O	42559	42561	of
O	42562	42571	operating
O	42572	42576	over
O	42577	42580	the
O	42581	42589	elements
O	42590	42592	of
O	42593	42594	a
O	42595	42605	collection
O	42606	42608	in
O	42609	42610	a
O	42611	42614	way
O	42615	42619	that
O	42620	42622	it
O	42622	42623	'
O	42623	42624	s
O	42625	42629	easy
O	42630	42632	to
O	42633	42638	split
O	42639	42642	off
O	42643	42647	part
O	42648	42650	of
O	42651	42654	the
O	42655	42665	collection
O	42665	42666	,
O	42667	42668	e
O	42668	42669	.
O	42669	42670	g
O	42670	42671	.
O	42672	42679	because
O	42680	42683	you
O	42683	42684	'
O	42684	42686	re
O	42687	42700	parallelizing
O	42701	42704	and
O	42705	42709	want
O	42710	42713	one
O	42714	42720	thread
O	42721	42723	to
O	42724	42728	work
O	42729	42731	on
O	42732	42735	one
O	42736	42740	part
O	42741	42743	of
O	42744	42747	the
O	42748	42758	collection
O	42758	42759	,
O	42760	42763	one
O	42764	42770	thread
O	42771	42773	to
O	42774	42778	work
O	42779	42781	on
O	42782	42789	another
O	42790	42794	part
O	42794	42795	,
O	42796	42799	etc
O	42799	42800	.

O	42801	42804	You
O	42805	42811	should
O	42812	42823	essentially
O	42824	42829	never
O	42830	42832	be
O	42833	42839	saving
O	42840	42846	values
O	42847	42849	of
O	42850	42854	type
B-api_mention	42855	42861	Stream
O	42862	42864	to
O	42865	42866	a
O	42867	42875	variable
O	42875	42876	,
O	42877	42883	either
O	42883	42884	.

B-api_mention	42885	42891	Stream
O	42892	42894	is
O	42895	42899	sort
O	42900	42902	of
O	42903	42907	like
O	42908	42910	an
B-api_mention	42911	42919	Iterator
O	42920	42921	,
O	42922	42924	in
O	42925	42929	that
O	42930	42932	it
O	42932	42933	'
O	42933	42934	s
O	42935	42936	a
O	42937	42940	one
O	42940	42941	-
O	42941	42945	time
O	42945	42946	-
O	42946	42949	use
O	42950	42956	object
O	42957	42961	that
O	42962	42965	you
O	42965	42966	'
O	42966	42968	ll
O	42969	42975	almost
O	42976	42982	always
O	42983	42986	use
O	42987	42989	in
O	42990	42991	a
O	42992	42998	fluent
O	42999	43004	chain
O	43004	43005	,
O	43006	43008	as
O	43009	43011	in
O	43012	43015	the
O	43016	43023	Javadoc
O	43024	43031	example
O	43031	43032	:
O	43033	43036	int
O	43037	43040	sum
O	43041	43042	=
O	43043	43050	widgets
B-api_mention	43050	43051	.
I-api_mention	43051	43057	stream
I-api_mention	43057	43058	(
I-api_mention	43058	43062	args
I-api_mention	43062	43063	)
I-api_mention	43064	43065	.
I-api_mention	43065	43071	filter
I-api_mention	43071	43072	(
I-api_mention	43072	43076	args
I-api_mention	43076	43077	)
I-api_mention	43078	43079	.
I-api_mention	43079	43087	mapToInt
I-api_mention	43087	43088	(
I-api_mention	43088	43092	args
I-api_mention	43092	43093	)
I-api_mention	43094	43095	.
I-api_mention	43095	43098	sum
I-api_mention	43098	43099	(
I-api_mention	43099	43103	args
I-api_mention	43103	43104	)
O	43104	43105	;
B-api_mention	43106	43115	Collector
O	43116	43118	is
O	43119	43122	the
O	43123	43127	most
O	43128	43139	generalized
O	43139	43140	,
O	43141	43149	abstract
O	43150	43158	possible
O	43159	43166	version
O	43167	43169	of
O	43170	43171	a
O	43172	43173	"
O	43173	43179	reduce
O	43179	43180	"
O	43181	43190	operation
O	43191	43192	a
O	43193	43195	la
O	43196	43199	map
O	43199	43200	/
O	43200	43206	reduce
O	43206	43207	;
O	43208	43210	in
O	43211	43221	particular
O	43221	43222	,
O	43223	43225	it
O	43226	43231	needs
O	43232	43234	to
O	43235	43242	support
O	43243	43258	parallelization
O	43259	43262	and
O	43263	43275	finalization
O	43276	43281	steps
O	43281	43282	.

O	43283	43291	Examples
O	43292	43294	of
B-api_mention	43295	43304	Collector
O	43305	43306	s
O	43307	43314	include
O	43314	43315	:
O	43316	43317	#
O	43317	43319	li
O	43320	43327	summing
O	43327	43328	,
O	43329	43330	e
O	43330	43331	.
O	43331	43332	g
O	43332	43333	.
B-api_mention	43334	43344	Collectors
I-api_mention	43344	43345	.
I-api_mention	43345	43353	reducing
O	43353	43354	(
O	43354	43358	args
O	43358	43359	)
O	43360	43361	#
O	43361	43363	li
B-api_mention	43364	43377	StringBuilder
O	43378	43387	appending
O	43387	43388	,
O	43389	43390	e
O	43390	43391	.
O	43391	43392	g
O	43392	43393	.
B-api_mention	43394	43404	Collectors
I-api_mention	43404	43405	.
I-api_mention	43405	43407	of
I-api_mention	43407	43408	(
I-api_mention	43408	43412	args
I-api_mention	43412	43413	)

O	43415	43423	Question
O	43423	43424	-
O	43424	43432	18647214
O	43432	43433	,
O	43434	43440	answer
O	43440	43441	-
O	43441	43449	18647232

O	43450	43451	I
O	43452	43457	would
O	43458	43462	just
O	43463	43465	do
O	43466	43470	this
O	43470	43471	.

O	43472	43474	It
O	43475	43484	basically
O	43485	43490	takes
O	43491	43494	the
O	43495	43502	minimum
O	43503	43510	between
O	43511	43514	100
O	43515	43516	(
O	43516	43519	the
O	43520	43523	max
O	43524	43530	health
O	43530	43531	)
O	43532	43535	and
O	43536	43540	what
O	43541	43544	the
O	43545	43551	health
O	43552	43557	would
O	43558	43560	be
O	43561	43565	with
O	43566	43568	15
O	43569	43574	extra
O	43575	43581	points
O	43581	43582	.

O	43583	43585	It
O	43586	43593	ensures
O	43594	43598	that
O	43599	43602	the
O	43603	43607	user
O	43607	43608	'
O	43608	43609	s
O	43610	43616	health
O	43617	43621	does
O	43622	43625	not
O	43626	43632	exceed
O	43633	43636	100
O	43636	43637	.

O	43638	43639	#
O	43639	43642	pre
O	43643	43645	To
O	43646	43652	ensure
O	43653	43657	that
O	43658	43667	hitpoints
O	43668	43670	do
O	43671	43674	not
O	43675	43679	drop
O	43680	43685	below
O	43686	43690	zero
O	43690	43691	,
O	43692	43695	you
O	43696	43699	can
O	43700	43703	use
O	43704	43705	a
O	43706	43713	similar
O	43714	43722	function
O	43722	43723	:
B-api_mention	43724	43728	Math
I-api_mention	43728	43729	.
I-api_mention	43729	43732	max
O	43733	43734	.

O	43735	43736	#
O	43736	43739	pre

O	43741	43749	Question
O	43749	43750	-
O	43750	43758	18723596
O	43758	43759	,
O	43760	43766	answer
O	43766	43767	-
O	43767	43775	18723651

O	43776	43783	Println
O	43783	43784	(
O	43784	43788	args
O	43788	43789	)
O	43790	43794	uses
B-api_mention	43795	43801	String
I-api_mention	43801	43802	.
I-api_mention	43802	43809	valueOf
I-api_mention	43809	43810	(
I-api_mention	43810	43814	args
I-api_mention	43814	43815	)
O	43816	43817	#
O	43817	43820	pre
O	43821	43826	Print
O	43826	43827	(
O	43827	43831	args
O	43831	43832	)
O	43833	43837	does
O	43838	43842	null
O	43843	43848	check
O	43848	43849	.

O	43850	43851	#
O	43851	43854	pre

O	43856	43864	Question
O	43864	43865	-
O	43865	43873	18723596
O	43873	43874	,
O	43875	43881	answer
O	43881	43882	-
O	43882	43890	18723666

O	43891	43894	You
O	43895	43898	can
O	43899	43903	cast
O	43904	43908	null
O	43909	43911	to
O	43912	43915	any
O	43916	43925	reference
O	43926	43930	type
O	43931	43938	without
O	43939	43946	getting
O	43947	43950	any
O	43951	43960	exception
O	43960	43961	.
B-api_mention	43962	43969	println
O	43970	43976	method
O	43977	43981	does
O	43982	43985	not
O	43986	43991	throw
O	43992	43996	null
O	43997	44004	pointer
O	44005	44012	because
O	44013	44015	it
O	44016	44021	first
O	44022	44028	checks
O	44029	44036	whether
O	44037	44040	the
O	44041	44047	object
O	44048	44050	is
O	44051	44055	null
O	44056	44058	or
O	44059	44062	not
O	44062	44063	.

O	44064	44066	If
O	44067	44071	null
O	44072	44076	then
O	44077	44079	it
O	44080	44086	simply
O	44087	44093	prints
O	44094	44097	the
O	44098	44104	string
O	44105	44118	StringLiteral
O	44119	44120	.

O	44121	44130	Otherwise
O	44131	44133	it
O	44134	44138	will
O	44139	44143	call
O	44144	44147	the
B-api_mention	44148	44156	toString
O	44157	44163	method
O	44164	44166	of
O	44167	44171	that
O	44172	44178	object
O	44178	44179	.

O	44180	44186	Adding
O	44187	44191	more
O	44192	44199	details
O	44199	44200	:
O	44201	44211	Internally
O	44212	44217	print
O	44218	44225	methods
O	44226	44230	call
B-api_mention	44231	44237	String
I-api_mention	44237	44238	.
I-api_mention	44238	44245	valueOf
I-api_mention	44245	44246	(
I-api_mention	44246	44250	args
I-api_mention	44250	44251	)
O	44252	44258	method
O	44259	44261	on
O	44262	44265	the
O	44266	44271	input
O	44272	44278	object
O	44278	44279	.

O	44280	44283	And
O	44284	44286	in
B-api_mention	44287	44294	valueOf
O	44295	44301	method
O	44301	44302	,
O	44303	44307	this
O	44308	44313	check
O	44314	44319	helps
O	44320	44322	to
O	44323	44328	avoid
O	44329	44333	null
O	44334	44341	pointer
O	44342	44351	excpeiton
O	44351	44352	:
O	44353	44359	return
O	44359	44360	(
O	44360	44364	args
O	44364	44365	)
O	44366	44367	?

O	44368	44381	StringLiteral
O	44382	44383	:
O	44384	44387	obj
B-api_mention	44387	44388	.
I-api_mention	44388	44396	toString
I-api_mention	44396	44397	(
I-api_mention	44397	44401	args
I-api_mention	44401	44402	)
O	44402	44403	;
O	44404	44407	For
O	44408	44412	rest
O	44413	44415	of
O	44416	44420	your
O	44421	44430	confusion
O	44430	44431	,
O	44432	44439	calling
O	44440	44443	any
O	44444	44450	method
O	44451	44453	on
O	44454	44455	a
O	44456	44460	null
O	44461	44467	object
O	44468	44474	should
O	44475	44480	throw
O	44481	44482	a
O	44483	44487	null
O	44488	44495	pointer
O	44496	44505	exception
O	44505	44506	,
O	44507	44509	if
O	44510	44513	not
O	44514	44515	a
O	44516	44523	special
O	44524	44528	case
O	44528	44529	.

O	44531	44539	Question
O	44539	44540	-
O	44540	44548	18723596
O	44548	44549	,
O	44550	44556	answer
O	44556	44557	-
O	44557	44565	18723704

O	44566	44569	You
O	44570	44573	can
O	44574	44578	cast
O	44579	44583	null
O	44584	44586	to
O	44587	44590	any
O	44591	44600	reference
O	44601	44605	type
O	44605	44606	.

O	44607	44610	You
O	44611	44614	can
O	44615	44619	also
O	44620	44624	call
O	44625	44632	methods
O	44633	44638	which
O	44639	44645	handle
O	44646	44647	a
O	44648	44652	null
O	44653	44655	as
O	44656	44658	an
O	44659	44667	argument
O	44667	44668	,
O	44669	44670	e
O	44670	44671	.
O	44671	44672	g
O	44672	44673	.
B-api_mention	44674	44680	System
I-api_mention	44680	44681	.
I-api_mention	44681	44684	out
I-api_mention	44684	44685	.
I-api_mention	44685	44692	println
I-api_mention	44692	44693	(
I-api_mention	44693	44697	args
I-api_mention	44697	44698	)
O	44699	44703	does
O	44703	44704	,
O	44705	44708	but
O	44709	44712	you
O	44713	44719	cannot
O	44720	44729	reference
O	44730	44731	a
O	44732	44736	null
O	44737	44742	value
O	44743	44746	and
O	44747	44751	call
O	44752	44753	a
O	44754	44760	method
O	44761	44763	on
O	44764	44766	it
O	44766	44767	.

O	44768	44771	BTW
O	44772	44777	There
O	44778	44780	is
O	44781	44782	a
O	44783	44789	tricky
O	44790	44799	situation
O	44800	44805	where
O	44806	44808	it
O	44809	44816	appears
O	44817	44820	you
O	44821	44824	can
O	44825	44829	call
O	44830	44836	static
O	44837	44844	methods
O	44845	44847	on
O	44848	44852	null
O	44853	44859	values
O	44859	44860	.

O	44861	44862	#
O	44862	44865	pre

O	44867	44875	Question
O	44875	44876	-
O	44876	44884	20331163
O	44884	44885	,
O	44886	44892	answer
O	44892	44893	-
O	44893	44901	20331241

O	44902	44903	I
O	44904	44908	have
O	44909	44910	a
O	44911	44915	very
O	44916	44920	dumb
O	44921	44924	but
O	44925	44932	working
O	44933	44939	option
O	44939	44940	.

O	44941	44943	if
O	44944	44947	you
O	44948	44952	have
O	44953	44956	the
B-api_mention	44957	44963	String
O	44964	44972	fullDate
O	44973	44974	=
O	44975	44976	"
O	44976	44978	11
O	44978	44979	/
O	44979	44981	15
O	44981	44982	/
O	44982	44986	2013
O	44987	44989	08
O	44989	44990	:
O	44990	44992	00
O	44992	44993	:
O	44993	44995	00
O	44995	44996	"
O	44996	44997	;
B-api_mention	44998	45004	String
O	45005	45014	finalDate
O	45015	45016	=
O	45017	45025	fullDate
B-api_mention	45025	45026	.
I-api_mention	45026	45031	split
I-api_mention	45031	45032	(
I-api_mention	45032	45036	args
I-api_mention	45036	45037	)
O	45037	45038	[
O	45038	45039	0
O	45039	45040	]
O	45040	45041	;
O	45042	45046	That
O	45047	45053	should
O	45054	45058	work
O	45059	45063	easy
O	45064	45067	and
O	45068	45072	fast
O	45072	45073	.

O	45074	45075	:
O	45075	45076	)

O	45078	45086	Question
O	45086	45087	-
O	45087	45095	20331163
O	45095	45096	,
O	45097	45103	answer
O	45103	45104	-
O	45104	45112	20331243

O	45113	45119	Create
O	45120	45121	a
B-api_mention	45122	45139	DateTimeFormatter
O	45140	45145	using
B-api_mention	45146	45160	DateTimeFormat
I-api_mention	45160	45161	.
I-api_mention	45161	45171	forPattern
O	45171	45172	(
B-api_mention	45172	45178	String
O	45178	45179	)
O	45180	45185	Using
O	45186	45190	Joda
O	45191	45195	time
O	45196	45199	you
O	45200	45205	would
O	45206	45208	do
O	45209	45211	it
O	45212	45216	like
O	45217	45221	this
O	45221	45222	:
O	45223	45224	#
O	45224	45227	pre
O	45228	45232	Also
O	45232	45233	,
O	45234	45236	if
O	45237	45240	you
O	45241	45247	wanted
O	45248	45250	to
O	45251	45254	use
O	45255	45263	standard
O	45264	45268	Java
O	45268	45269	,
O	45270	45273	you
O	45274	45279	would
O	45280	45282	do
O	45283	45285	it
O	45286	45290	like
O	45291	45295	this
O	45295	45296	:
O	45297	45298	#
O	45298	45301	pre

O	45303	45311	Question
O	45311	45312	-
O	45312	45320	20331163
O	45320	45321	,
O	45322	45328	answer
O	45328	45329	-
O	45329	45337	20331323

O	45338	45345	Another
O	45346	45349	way
O	45350	45352	of
O	45353	45358	doing
O	45359	45363	that
O	45364	45366	is
O	45366	45367	:
B-api_mention	45368	45374	String
O	45375	45379	date
O	45380	45381	=
O	45382	45393	dateAndTime
B-api_mention	45393	45394	.
I-api_mention	45394	45403	substring
I-api_mention	45403	45404	(
I-api_mention	45404	45408	args
I-api_mention	45408	45409	)
O	45409	45410	;
O	45411	45412	I
O	45412	45413	'
O	45413	45414	m
O	45415	45418	not
O	45419	45426	exactly
O	45427	45434	certain
O	45434	45435	,
O	45436	45439	but
O	45440	45441	I
O	45442	45447	think
O	45448	45452	this
O	45453	45458	might
O	45459	45461	be
O	45462	45468	faster
O	45468	45469	/
O	45469	45472	use
O	45473	45477	less
O	45478	45484	memory
O	45485	45489	than
O	45490	45495	using
O	45496	45499	the
B-api_mention	45500	45501	.
I-api_mention	45501	45506	split
I-api_mention	45506	45507	(
I-api_mention	45507	45511	args
I-api_mention	45511	45512	)
O	45513	45519	method
O	45519	45520	.

O	45522	45530	Question
O	45530	45531	-
O	45531	45539	18666710
O	45539	45540	,
O	45541	45547	answer
O	45547	45548	-
O	45548	45556	18792306

O	45557	45559	An
O	45560	45569	important
O	45570	45577	feature
O	45578	45580	of
O	45581	45591	parametric
O	45592	45597	types
O	45598	45600	is
O	45601	45604	the
O	45605	45612	ability
O	45613	45615	to
O	45616	45621	write
O	45622	45633	polymorphic
O	45634	45644	algorithms
O	45644	45645	,
O	45646	45647	i
O	45647	45648	.
O	45648	45649	e
O	45649	45650	.
O	45651	45661	algorithms
O	45662	45666	that
O	45667	45674	operate
O	45675	45677	on
O	45678	45679	a
O	45680	45684	data
O	45685	45694	structure
O	45695	45705	regardless
O	45706	45708	of
O	45709	45712	its
O	45713	45722	parameter
O	45723	45728	value
O	45728	45729	,
O	45730	45734	such
O	45735	45737	as
B-api_mention	45738	45744	Arrays
I-api_mention	45744	45745	.
I-api_mention	45745	45749	sort
I-api_mention	45749	45750	(
I-api_mention	45750	45754	args
I-api_mention	45754	45755	)
O	45756	45757	.

O	45758	45762	With
O	45763	45771	generics
O	45771	45772	,
O	45773	45777	that
O	45777	45778	'
O	45778	45779	s
O	45780	45784	done
O	45785	45789	with
O	45790	45798	wildcard
O	45799	45804	types
O	45804	45805	:
O	45806	45807	<
O	45807	45808	E
O	45809	45816	extends
B-api_mention	45817	45827	Comparable
I-api_mention	45827	45828	<
I-api_mention	45828	45829	T
I-api_mention	45829	45830	>
O	45830	45831	>
O	45832	45836	void
B-api_mention	45837	45841	sort
I-api_mention	45841	45842	(
I-api_mention	45842	45846	args
I-api_mention	45846	45847	)
O	45847	45848	;
O	45849	45851	To
O	45852	45854	be
O	45855	45860	truly
O	45861	45867	useful
O	45867	45868	,
O	45869	45877	wildcard
O	45878	45883	types
O	45884	45891	require
O	45892	45900	wildcard
O	45901	45908	capture
O	45908	45909	,
O	45910	45913	and
O	45914	45918	that
O	45919	45927	requires
O	45928	45931	the
O	45932	45938	notion
O	45939	45941	of
O	45942	45943	a
O	45944	45948	type
O	45949	45958	parameter
O	45958	45959	.

O	45960	45964	None
O	45965	45967	of
O	45968	45972	that
O	45973	45976	was
O	45977	45986	available
O	45987	45989	at
O	45990	45993	the
O	45994	45998	time
O	45999	46005	arrays
O	46006	46010	were
O	46011	46016	added
O	46017	46019	to
O	46020	46024	Java
O	46024	46025	,
O	46026	46029	and
O	46030	46037	makings
O	46038	46044	arrays
O	46045	46047	of
O	46048	46057	reference
O	46058	46062	type
O	46063	46072	covariant
O	46073	46082	permitted
O	46083	46084	a
O	46085	46088	far
O	46089	46096	simpler
O	46097	46100	way
O	46101	46103	to
O	46104	46110	permit
O	46111	46122	polymorphic
O	46123	46133	algorithms
O	46133	46134	:
O	46135	46139	void
B-api_mention	46140	46144	sort
I-api_mention	46144	46145	(
I-api_mention	46145	46149	args
I-api_mention	46149	46150	)
O	46150	46151	;
O	46152	46159	However
O	46159	46160	,
O	46161	46165	that
O	46166	46176	simplicity
O	46177	46183	opened
O	46184	46185	a
O	46186	46194	loophole
O	46195	46197	in
O	46198	46201	the
O	46202	46208	static
O	46209	46213	type
O	46214	46220	system
O	46220	46221	:
O	46222	46223	#
O	46223	46226	pre
O	46227	46236	requiring
O	46237	46238	a
O	46239	46246	runtime
O	46247	46252	check
O	46253	46255	of
O	46256	46261	every
O	46262	46267	write
O	46268	46274	access
O	46275	46277	to
O	46278	46280	an
O	46281	46286	array
O	46287	46289	of
O	46290	46299	reference
O	46300	46304	type
O	46304	46305	.

O	46306	46308	In
O	46309	46310	a
O	46311	46319	nutshell
O	46319	46320	,
O	46321	46324	the
O	46325	46330	newer
O	46331	46339	approach
O	46340	46348	embodied
O	46349	46351	by
O	46352	46360	generics
O	46361	46366	makes
O	46367	46370	the
O	46371	46375	type
O	46376	46382	system
O	46383	46387	more
O	46388	46395	complex
O	46395	46396	,
O	46397	46400	but
O	46401	46405	also
O	46406	46410	more
O	46411	46421	statically
O	46422	46426	type
O	46427	46431	safe
O	46431	46432	,
O	46433	46438	while
O	46439	46442	the
O	46443	46448	older
O	46449	46457	approach
O	46458	46461	was
O	46462	46469	simpler
O	46469	46470	,
O	46471	46474	and
O	46475	46479	less
O	46480	46490	statically
O	46491	46495	type
O	46496	46500	safe
O	46500	46501	.

O	46502	46505	The
O	46506	46515	designers
O	46516	46518	of
O	46519	46522	the
O	46523	46531	language
O	46532	46537	opted
O	46538	46541	for
O	46542	46545	the
O	46546	46553	simpler
O	46554	46562	approach
O	46562	46563	,
O	46564	46570	having
O	46571	46575	more
O	46576	46585	important
O	46586	46592	things
O	46593	46595	to
O	46596	46598	do
O	46599	46603	than
O	46604	46611	closing
O	46612	46613	a
O	46614	46619	small
O	46620	46628	loophole
O	46629	46631	in
O	46632	46635	the
O	46636	46640	type
O	46641	46647	system
O	46648	46652	that
O	46653	46659	rarely
O	46660	46666	causes
O	46667	46675	problems
O	46675	46676	.

O	46677	46682	Later
O	46682	46683	,
O	46684	46688	when
O	46689	46693	Java
O	46694	46697	was
O	46698	46709	established
O	46709	46710	,
O	46711	46714	and
O	46715	46718	the
O	46719	46727	pressing
O	46728	46733	needs
O	46734	46739	taken
O	46740	46744	care
O	46745	46747	of
O	46747	46748	,
O	46749	46753	they
O	46754	46757	had
O	46758	46761	the
O	46762	46771	resources
O	46772	46774	to
O	46775	46777	do
O	46778	46780	it
O	46781	46786	right
O	46787	46790	for
O	46791	46799	generics
O	46800	46801	(
O	46801	46804	but
O	46805	46813	changing
O	46814	46816	it
O	46817	46820	for
O	46821	46827	arrays
O	46828	46833	would
O	46834	46838	have
O	46839	46845	broken
O	46846	46854	existing
O	46855	46859	Java
O	46860	46868	programs
O	46868	46869	)
O	46869	46870	.

O	46872	46880	Question
O	46880	46881	-
O	46881	46889	18263489
O	46889	46890	,
O	46891	46897	answer
O	46897	46898	-
O	46898	46906	29873100

O	46907	46909	It
O	46910	46913	isn
O	46913	46914	'
O	46914	46915	t
O	46916	46922	pretty
O	46922	46923	,
O	46924	46927	but
B-api_mention	46928	46934	String
I-api_mention	46934	46935	.
I-api_mention	46935	46942	valueOf
I-api_mention	46942	46943	(
I-api_mention	46943	46947	args
I-api_mention	46947	46948	)
O	46949	46955	allows
O	46956	46959	you
O	46960	46962	to
O	46963	46966	use
O	46967	46968	a
O	46969	46973	null
B-api_mention	46974	46980	String
O	46981	46983	in
O	46984	46985	a
O	46986	46992	switch
O	46992	46993	.

O	46994	46996	If
O	46997	46999	it
O	47000	47005	finds
O	47006	47010	null
O	47011	47012	,
O	47013	47015	it
O	47016	47024	converts
O	47025	47027	it
O	47028	47030	to
O	47031	47044	StringLiteral
O	47045	47046	,
O	47047	47056	otherwise
O	47057	47059	it
O	47060	47064	just
O	47065	47072	returns
O	47073	47076	the
O	47077	47081	same
B-api_mention	47082	47088	String
O	47089	47092	you
O	47093	47099	passed
O	47100	47102	it
O	47102	47103	.

O	47104	47106	If
O	47107	47110	you
O	47111	47114	don
O	47114	47115	'
O	47115	47116	t
O	47117	47123	handle
O	47124	47137	StringLiteral
O	47138	47148	explicitly
O	47148	47149	,
O	47150	47154	then
O	47155	47157	it
O	47158	47162	will
O	47163	47165	go
O	47166	47168	to
O	47169	47176	default
O	47177	47178	.

O	47179	47182	The
O	47183	47187	only
O	47188	47194	caveat
O	47195	47197	is
O	47198	47202	that
O	47203	47208	there
O	47209	47211	is
O	47212	47214	no
O	47215	47218	way
O	47219	47221	of
O	47222	47236	distinguishing
O	47237	47244	between
O	47245	47248	the
B-api_mention	47249	47255	String
O	47256	47269	StringLiteral
O	47270	47273	and
O	47274	47276	an
O	47277	47283	actual
O	47284	47288	null
B-api_mention	47289	47295	String
O	47295	47296	.

O	47297	47298	#
O	47298	47301	pre

O	47303	47311	Question
O	47311	47312	-
O	47312	47320	18987692
O	47320	47321	,
O	47322	47328	answer
O	47328	47329	-
O	47329	47337	18987738

O	47338	47341	You
O	47342	47345	can
O	47346	47349	use
B-api_mention	47350	47356	IsNull
I-api_mention	47356	47357	.
I-api_mention	47357	47366	nullValue
I-api_mention	47366	47367	(
I-api_mention	47367	47368	)
O	47369	47375	method
O	47375	47376	:
O	47377	47378	#
O	47378	47381	pre

O	47383	47391	Question
O	47391	47392	-
O	47392	47400	18532488
O	47400	47401	,
O	47402	47408	answer
O	47408	47409	-
O	47409	47417	24296741

O	47418	47422	Here
O	47422	47423	'
O	47423	47424	s
O	47425	47432	another
O	47433	47442	technique
O	47443	47444	I
O	47445	47448	ran
O	47449	47455	across
O	47456	47459	the
O	47460	47465	other
O	47466	47469	day
O	47469	47470	:
B-api_mention	47471	47482	Collections
I-api_mention	47482	47483	.
I-api_mention	47483	47490	nCopies
I-api_mention	47490	47491	(
I-api_mention	47491	47495	args
I-api_mention	47495	47496	)
I-api_mention	47497	47498	.
I-api_mention	47498	47504	stream
I-api_mention	47504	47505	(
I-api_mention	47505	47509	args
I-api_mention	47509	47510	)
I-api_mention	47511	47512	.
I-api_mention	47512	47519	forEach
I-api_mention	47519	47520	(
I-api_mention	47520	47524	args
I-api_mention	47524	47525	)
O	47525	47526	;
O	47527	47530	The
B-api_mention	47531	47542	Collections
I-api_mention	47542	47543	.
I-api_mention	47543	47550	nCopies
O	47551	47555	call
O	47556	47563	creates
O	47564	47565	a
B-api_mention	47566	47570	List
O	47571	47581	containing
O	47582	47583	n
O	47584	47590	copies
O	47591	47593	of
O	47594	47602	whatever
O	47603	47608	value
O	47609	47612	you
O	47613	47620	provide
O	47620	47621	.

O	47622	47624	In
O	47625	47629	this
O	47630	47634	case
O	47635	47637	it
O	47637	47638	'
O	47638	47639	s
O	47640	47643	the
O	47644	47649	boxed
O	47650	47657	Integer
O	47658	47663	value
O	47664	47665	1
O	47665	47666	.

O	47667	47669	Of
O	47670	47676	course
O	47677	47679	it
O	47680	47685	doesn
O	47685	47686	'
O	47686	47687	t
O	47688	47696	actually
O	47697	47703	create
O	47704	47705	a
O	47706	47710	list
O	47711	47715	with
O	47716	47717	n
O	47718	47726	elements
O	47726	47727	;
O	47728	47730	it
O	47731	47738	creates
O	47739	47740	a
O	47741	47742	"
O	47742	47753	virtualized
O	47753	47754	"
O	47755	47759	list
O	47760	47764	that
O	47765	47773	contains
O	47774	47778	only
O	47779	47782	the
O	47783	47788	value
O	47789	47792	and
O	47793	47796	the
O	47797	47803	length
O	47803	47804	,
O	47805	47808	and
O	47809	47812	any
O	47813	47817	call
O	47818	47820	to
O	47821	47824	get
O	47825	47831	within
O	47832	47837	range
O	47838	47842	just
O	47843	47850	returns
O	47851	47854	the
O	47855	47860	value
O	47860	47861	.

O	47862	47865	The
B-api_mention	47866	47873	nCopies
O	47874	47880	method
O	47881	47884	has
O	47885	47889	been
O	47890	47896	around
O	47897	47902	since
O	47903	47906	the
B-api_mention	47907	47918	Collections
O	47919	47928	Framework
O	47929	47932	was
O	47933	47943	introduced
O	47944	47947	way
O	47948	47952	back
O	47953	47955	in
O	47956	47959	JDK
O	47960	47961	1
O	47961	47962	.
O	47962	47963	2
O	47963	47964	.

O	47965	47967	Of
O	47968	47974	course
O	47974	47975	,
O	47976	47979	the
O	47980	47987	ability
O	47988	47990	to
O	47991	47997	create
O	47998	47999	a
O	48000	48006	stream
O	48007	48011	from
O	48012	48015	its
O	48016	48022	result
O	48023	48026	was
O	48027	48032	added
O	48033	48035	in
O	48036	48040	Java
O	48041	48043	SE
O	48044	48045	8
O	48045	48046	.

O	48047	48050	Big
O	48051	48055	deal
O	48055	48056	,
O	48057	48064	another
O	48065	48068	way
O	48069	48071	to
O	48072	48074	do
O	48075	48078	the
O	48079	48083	same
O	48084	48089	thing
O	48090	48092	in
O	48093	48098	about
O	48099	48102	the
O	48103	48107	same
O	48108	48114	number
O	48115	48117	of
O	48118	48123	lines
O	48123	48124	.

O	48125	48132	However
O	48132	48133	,
O	48134	48138	this
O	48139	48148	technique
O	48149	48151	is
O	48152	48158	faster
O	48159	48163	than
O	48164	48167	the
B-api_mention	48168	48177	IntStream
I-api_mention	48177	48178	.
I-api_mention	48178	48186	generate
O	48187	48190	and
B-api_mention	48191	48200	IntStream
I-api_mention	48200	48201	.
I-api_mention	48201	48208	iterate
O	48209	48219	approaches
O	48219	48220	,
O	48221	48224	and
O	48225	48237	surprisingly
O	48237	48238	,
O	48239	48241	it
O	48241	48242	'
O	48242	48243	s
O	48244	48248	also
O	48249	48255	faster
O	48256	48260	than
O	48261	48264	the
B-api_mention	48265	48274	IntStream
I-api_mention	48274	48275	.
I-api_mention	48275	48280	range
O	48281	48289	approach
O	48289	48290	.

O	48291	48294	For
O	48295	48302	iterate
O	48303	48306	and
O	48307	48315	generate
O	48316	48319	the
O	48320	48326	result
O	48327	48329	is
O	48330	48337	perhaps
O	48338	48341	not
O	48342	48345	too
O	48346	48356	surprising
O	48356	48357	.

O	48358	48361	The
O	48362	48369	streams
O	48370	48379	framework
O	48380	48381	(
O	48381	48387	really
O	48387	48388	,
O	48389	48392	the
O	48393	48405	Spliterators
O	48406	48409	for
O	48410	48415	these
O	48416	48423	streams
O	48423	48424	)
O	48425	48427	is
O	48428	48433	built
O	48434	48436	on
O	48437	48440	the
O	48441	48451	assumption
O	48452	48456	that
O	48457	48460	the
O	48461	48468	lambdas
O	48469	48473	will
O	48474	48485	potentially
O	48486	48494	generate
O	48495	48504	different
O	48505	48511	values
O	48512	48516	each
O	48517	48521	time
O	48521	48522	,
O	48523	48526	and
O	48527	48531	that
O	48532	48536	they
O	48537	48541	will
O	48542	48550	generate
O	48551	48553	an
O	48554	48563	unbounded
O	48564	48570	number
O	48571	48573	of
O	48574	48581	results
O	48581	48582	.

O	48583	48587	This
O	48588	48593	makes
O	48594	48602	parallel
O	48603	48612	splitting
O	48613	48625	particularly
O	48626	48635	difficult
O	48635	48636	.

O	48637	48640	The
O	48641	48648	iterate
O	48649	48655	method
O	48656	48658	is
O	48659	48663	also
O	48664	48675	problematic
O	48676	48679	for
O	48680	48684	this
O	48685	48689	case
O	48690	48697	because
O	48698	48702	each
O	48703	48707	call
O	48708	48716	requires
O	48717	48720	the
O	48721	48727	result
O	48728	48730	of
O	48731	48734	the
O	48735	48743	previous
O	48744	48747	one
O	48747	48748	.

O	48749	48751	So
O	48752	48755	the
O	48756	48763	streams
O	48764	48769	using
O	48770	48778	generate
O	48779	48782	and
O	48783	48790	iterate
O	48791	48794	don
O	48794	48795	'
O	48795	48796	t
O	48797	48799	do
O	48800	48804	very
O	48805	48809	well
O	48810	48813	for
O	48814	48824	generating
O	48825	48833	repeated
O	48834	48843	constants
O	48843	48844	.

O	48845	48848	The
O	48849	48859	relatively
O	48860	48864	poor
O	48865	48876	performance
O	48877	48879	of
O	48880	48885	range
O	48886	48888	is
O	48889	48899	surprising
O	48899	48900	.

O	48901	48905	This
O	48906	48909	too
O	48910	48912	is
O	48913	48924	virtualized
O	48924	48925	,
O	48926	48928	so
O	48929	48932	the
O	48933	48941	elements
O	48942	48945	don
O	48945	48946	'
O	48946	48947	t
O	48948	48956	actually
O	48957	48960	all
O	48961	48966	exist
O	48967	48969	in
O	48970	48976	memory
O	48976	48977	,
O	48978	48981	and
O	48982	48985	the
O	48986	48990	size
O	48991	48993	is
O	48994	48999	known
O	49000	49002	up
O	49003	49008	front
O	49008	49009	.

O	49010	49014	This
O	49015	49021	should
O	49022	49026	make
O	49027	49030	for
O	49031	49032	a
O	49033	49037	fast
O	49038	49041	and
O	49042	49048	easily
O	49049	49063	parallelizable
O	49064	49075	spliterator
O	49075	49076	.

O	49077	49080	But
O	49081	49083	it
O	49084	49096	surprisingly
O	49097	49101	didn
O	49101	49102	'
O	49102	49103	t
O	49104	49106	do
O	49107	49111	very
O	49112	49116	well
O	49116	49117	.

O	49118	49125	Perhaps
O	49126	49129	the
O	49130	49136	reason
O	49137	49139	is
O	49140	49144	that
O	49145	49150	range
O	49151	49154	has
O	49155	49157	to
O	49158	49165	compute
O	49166	49167	a
O	49168	49173	value
O	49174	49177	for
O	49178	49182	each
O	49183	49190	element
O	49191	49193	of
O	49194	49197	the
O	49198	49203	range
O	49204	49207	and
O	49208	49212	then
O	49213	49217	call
O	49218	49219	a
O	49220	49228	function
O	49229	49231	on
O	49232	49234	it
O	49234	49235	.

O	49236	49239	But
O	49240	49244	this
O	49245	49253	function
O	49254	49258	just
O	49259	49266	ignores
O	49267	49270	its
O	49271	49276	input
O	49277	49280	and
O	49281	49288	returns
O	49289	49290	a
O	49291	49299	constant
O	49299	49300	,
O	49301	49303	so
O	49304	49305	I
O	49305	49306	'
O	49306	49307	m
O	49308	49317	surprised
O	49318	49322	this
O	49323	49326	isn
O	49326	49327	'
O	49327	49328	t
O	49329	49336	inlined
O	49337	49340	and
O	49341	49347	killed
O	49347	49348	.

O	49349	49352	The
B-api_mention	49353	49364	Collections
I-api_mention	49364	49365	.
I-api_mention	49365	49372	nCopies
O	49373	49382	technique
O	49383	49386	has
O	49387	49389	to
O	49390	49392	do
O	49393	49399	boxing
O	49399	49400	/
O	49400	49408	unboxing
O	49409	49411	in
O	49412	49417	order
O	49418	49420	to
O	49421	49427	handle
O	49428	49431	the
O	49432	49438	values
O	49438	49439	,
O	49440	49445	since
O	49446	49451	there
O	49452	49455	are
O	49456	49458	no
O	49459	49468	primitive
O	49469	49484	specializations
O	49485	49487	of
B-api_mention	49488	49492	List
O	49493	49494	.

O	49495	49500	Since
O	49501	49504	the
O	49505	49510	value
O	49511	49513	is
O	49514	49517	the
O	49518	49522	same
O	49523	49528	every
O	49529	49533	time
O	49533	49534	,
O	49535	49537	it
O	49537	49538	'
O	49538	49539	s
O	49540	49549	basically
O	49550	49555	boxed
O	49556	49560	once
O	49561	49564	and
O	49565	49569	that
O	49570	49573	box
O	49574	49576	is
O	49577	49583	shared
O	49584	49586	by
O	49587	49590	all
O	49591	49592	n
O	49593	49599	copies
O	49599	49600	.

O	49601	49602	I
O	49603	49610	suspect
O	49611	49617	boxing
O	49617	49618	/
O	49618	49626	unboxing
O	49627	49629	is
O	49630	49636	highly
O	49637	49646	optimized
O	49646	49647	,
O	49648	49652	even
O	49653	49665	intrinsified
O	49665	49666	,
O	49667	49670	and
O	49671	49673	it
O	49674	49677	can
O	49678	49680	be
O	49681	49688	inlined
O	49689	49693	well
O	49693	49694	.

O	49695	49699	Here
O	49699	49700	'
O	49700	49701	s
O	49702	49705	the
O	49706	49710	code
O	49710	49711	:
O	49712	49713	#
O	49713	49716	pre
O	49717	49720	And
O	49721	49725	here
O	49726	49729	are
O	49730	49733	the
O	49734	49737	JMH
O	49738	49745	results
O	49745	49746	:
O	49747	49748	(
O	49748	49749	2
O	49749	49750	.
O	49750	49754	8GHz
O	49755	49763	Core2Duo
O	49763	49764	)
O	49765	49766	#
O	49766	49769	pre
O	49770	49775	There
O	49776	49778	is
O	49779	49780	a
O	49781	49785	fair
O	49786	49792	amount
O	49793	49795	of
O	49796	49804	variance
O	49805	49807	in
O	49808	49811	the
O	49812	49819	ncopies
O	49820	49827	version
O	49827	49828	,
O	49829	49832	but
O	49833	49840	overall
O	49841	49843	it
O	49844	49849	seems
O	49850	49861	comfortably
O	49862	49865	20x
O	49866	49872	faster
O	49873	49877	than
O	49878	49881	the
O	49882	49887	range
O	49888	49895	version
O	49895	49896	.

O	49897	49898	(
O	49898	49899	I
O	49899	49900	'
O	49900	49901	d
O	49902	49904	be
O	49905	49910	quite
O	49911	49918	willing
O	49919	49921	to
O	49922	49929	believe
O	49930	49934	that
O	49935	49936	I
O	49936	49937	'
O	49937	49939	ve
O	49940	49944	done
O	49945	49954	something
O	49955	49960	wrong
O	49960	49961	,
O	49962	49968	though
O	49968	49969	.
O	49969	49970	)
O	49971	49972	I
O	49972	49973	'
O	49973	49974	m
O	49975	49984	surprised
O	49985	49987	at
O	49988	49991	how
O	49992	49996	well
O	49997	50000	the
B-api_mention	50001	50008	nCopies
O	50009	50018	technique
O	50019	50024	works
O	50024	50025	.

O	50026	50036	Internally
O	50037	50039	it
O	50040	50045	doesn
O	50045	50046	'
O	50046	50047	t
O	50048	50050	do
O	50051	50055	very
O	50056	50060	much
O	50061	50068	special
O	50068	50069	,
O	50070	50074	with
O	50075	50078	the
O	50079	50085	stream
O	50086	50088	of
O	50089	50092	the
O	50093	50104	virtualized
O	50105	50109	list
O	50110	50116	simply
O	50117	50122	being
O	50123	50134	implemented
O	50135	50140	using
B-api_mention	50141	50150	IntStream
I-api_mention	50150	50151	.
I-api_mention	50151	50156	range
O	50157	50158	!

O	50159	50160	I
O	50161	50164	had
O	50165	50173	expected
O	50174	50178	that
O	50179	50181	it
O	50182	50187	would
O	50188	50190	be
O	50191	50200	necessary
O	50201	50203	to
O	50204	50210	create
O	50211	50212	a
O	50213	50224	specialized
O	50225	50236	spliterator
O	50237	50239	to
O	50240	50243	get
O	50244	50248	this
O	50249	50251	to
O	50252	50254	go
O	50255	50259	fast
O	50259	50260	,
O	50261	50264	but
O	50265	50267	it
O	50268	50275	already
O	50276	50281	seems
O	50282	50284	to
O	50285	50287	be
O	50288	50294	pretty
O	50295	50299	good
O	50299	50300	.

O	50302	50310	Question
O	50310	50311	-
O	50311	50319	18532488
O	50319	50320	,
O	50321	50327	answer
O	50327	50328	-
O	50328	50336	33142346

O	50337	50341	Once
O	50342	50343	a
O	50344	50350	repeat
O	50351	50359	function
O	50360	50362	is
O	50363	50372	somewhere
O	50373	50380	defined
O	50381	50383	as
O	50384	50385	#
O	50385	50388	pre
O	50389	50392	You
O	50393	50396	can
O	50397	50400	use
O	50401	50403	it
O	50404	50407	now
O	50408	50411	and
O	50412	50416	then
O	50417	50421	this
O	50422	50425	way
O	50425	50426	,
O	50427	50428	e
O	50428	50429	.
O	50429	50430	g
O	50430	50431	.
O	50431	50432	:
O	50433	50439	repeat
B-api_mention	50439	50440	.
I-api_mention	50440	50446	accept
I-api_mention	50446	50447	(
I-api_mention	50447	50451	args
I-api_mention	50451	50452	)
O	50452	50453	;
O	50454	50456	To
O	50457	50460	get
O	50461	50464	and
O	50465	50475	equivalent
O	50476	50478	to
O	50479	50486	Haskell
O	50486	50487	'
O	50487	50488	s
O	50489	50493	take
O	50494	50495	8
O	50495	50496	(
O	50496	50500	args
O	50500	50501	)
O	50502	50505	You
O	50506	50511	could
O	50512	50517	write
O	50518	50519	#
O	50519	50522	pre

O	50524	50532	Question
O	50532	50533	-
O	50533	50541	19757300
O	50541	50542	,
O	50543	50549	answer
O	50549	50550	-
O	50550	50558	19759653

O	50559	50562	You
O	50563	50566	can
O	50567	50571	also
O	50572	50581	propagate
O	50582	50586	your
O	50587	50593	static
O	50594	50598	pain
O	50599	50603	with
O	50604	50611	lambdas
O	50611	50612	,
O	50613	50615	so
O	50616	50619	the
O	50620	50625	whole
O	50626	50631	thing
O	50632	50637	looks
O	50638	50646	readable
O	50646	50647	:
O	50648	50649	s
B-api_mention	50649	50650	.
I-api_mention	50650	50656	filter
I-api_mention	50656	50657	(
I-api_mention	50657	50661	args
I-api_mention	50661	50662	)
O	50663	50672	propagate
O	50673	50677	here
O	50678	50686	receives
B-api_mention	50687	50691	java
I-api_mention	50691	50692	.
I-api_mention	50692	50696	util
I-api_mention	50696	50697	.
I-api_mention	50697	50707	concurrent
I-api_mention	50707	50708	.
I-api_mention	50708	50716	Callable
O	50717	50719	as
O	50720	50721	a
O	50722	50731	parameter
O	50732	50735	and
O	50736	50744	converts
O	50745	50748	any
O	50749	50758	exception
O	50759	50765	caught
O	50766	50772	during
O	50773	50776	the
O	50777	50781	call
O	50782	50786	into
B-api_mention	50787	50803	RuntimeException
O	50804	50805	.

O	50806	50811	There
O	50812	50814	is
O	50815	50816	a
O	50817	50824	similar
O	50825	50835	conversion
O	50836	50842	method
B-api_mention	50843	50853	Throwables
O	50853	50854	#
B-api_mention	50854	50863	propagate
I-api_mention	50863	50864	(
I-api_mention	50864	50873	Throwable
I-api_mention	50873	50874	)
O	50875	50877	in
O	50878	50883	Guava
O	50883	50884	.

O	50885	50889	This
O	50890	50896	method
O	50897	50902	seems
O	50903	50908	being
O	50909	50918	essential
O	50919	50922	for
O	50923	50929	lambda
O	50930	50936	method
O	50937	50945	chaining
O	50945	50946	,
O	50947	50949	so
O	50950	50951	I
O	50952	50956	hope
O	50957	50960	one
O	50961	50964	day
O	50965	50967	it
O	50968	50972	will
O	50973	50975	be
O	50976	50981	added
O	50982	50984	to
O	50985	50988	one
O	50989	50991	of
O	50992	50995	the
O	50996	51003	popular
O	51004	51008	libs
O	51009	51011	or
O	51012	51016	this
O	51017	51028	propagating
O	51029	51037	behavior
O	51038	51043	would
O	51044	51046	be
O	51047	51049	by
O	51050	51057	default
O	51057	51058	.

O	51059	51060	#
O	51060	51063	pre

O	51065	51073	Question
O	51073	51074	-
O	51074	51082	19757300
O	51082	51083	,
O	51084	51090	answer
O	51090	51091	-
O	51091	51099	35512247

O	51100	51107	Keeping
O	51108	51112	this
O	51113	51118	issue
O	51119	51121	in
O	51122	51126	mind
O	51127	51128	I
O	51129	51138	developed
O	51139	51140	a
O	51141	51146	small
O	51147	51154	library
O	51155	51158	for
O	51159	51166	dealing
O	51167	51171	with
O	51172	51179	checked
O	51180	51190	exceptions
O	51191	51194	and
O	51195	51202	lambdas
O	51202	51203	.

O	51204	51210	Custom
O	51211	51219	adapters
O	51220	51225	allow
O	51226	51229	you
O	51230	51232	to
O	51233	51242	integrate
O	51243	51247	with
O	51248	51256	existing
O	51257	51267	functional
O	51268	51273	types
O	51273	51274	:
B-api_mention	51275	51281	stream
I-api_mention	51281	51282	(
I-api_mention	51282	51286	args
I-api_mention	51286	51287	)
I-api_mention	51287	51288	.
I-api_mention	51288	51291	map
I-api_mention	51291	51292	(
I-api_mention	51292	51296	args
I-api_mention	51296	51297	)
O	51298	51299	/
O	51299	51300	/
O	51300	51304	with
O	51305	51306	a
O	51307	51313	static
O	51314	51320	import
O	51321	51322	#
O	51322	51323	a
