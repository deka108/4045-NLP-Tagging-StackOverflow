Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
20454885	O	O
For	O	O
everybody	O	O
who	O	O
codes	O	O
Java	O	O
for	O	O
Android	O	O
devices	O	O
and	O	O
ends	O	O
up	O	O
here	O	O
:	O	O
use	O	O
SparseArray	B-api_mention	B-api_mention
for	O	O
better	O	O
performance	O	O
private	O	O
final	O	O
SparseArray	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
SparseArray	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
with	O	O
this	O	O
you	O	O
can	O	O
use	O	O
int	O	O
instead	O	O
of	O	O
Integer	B-api_mention	B-api_mention
like	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
16252269	O	O
,	O	O
answer	O	O
-	O	O
30210459	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
allows	O	O
you	O	O
to	O	O
pass	O	O
an	O	O
instance	O	O
of	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
which	O	O
defines	O	O
the	O	O
sorting	O	O
logic	O	O
.	O	O
So	O	O
instead	O	O
of	O	O
sorting	O	O
the	O	O
list	O	O
in	O	O
natural	O	O
order	O	O
and	O	O
then	O	O
reversing	O	O
it	O	O
,	O	O
one	O	O
can	O	O
simply	O	O
pass	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
reverseOrder	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
sort	O	O
in	O	O
order	O	O
to	O	O
sort	O	O
the	O	O
list	O	O
in	O	O
reverse	O	O
order	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
mentioned	O	O
by	O	O
@	O	O
Marco13	O	O
,	O	O
apart	O	O
from	O	O
being	O	O
more	O	O
idiomatic	O	O
(	O	O
and	O	O
possibly	O	O
more	O	O
efficient	O	O
)	O	O
,	O	O
using	O	O
the	O	O
reverse	O	O
order	O	O
comparator	O	O
makes	O	O
sure	O	O
that	O	O
the	O	O
sort	O	O
is	O	O
stable	O	O
(	O	O
meaning	O	O
that	O	O
the	O	O
order	O	O
of	O	O
elements	O	O
will	O	O
not	O	O
be	O	O
changed	O	O
when	O	O
they	O	O
are	O	O
equal	O	O
according	O	O
to	O	O
the	O	O
comparator	O	O
,	O	O
whereas	O	O
reversing	O	O
will	O	O
change	O	O
the	O	O
order	O	O
)	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
35931153	O	O
If	O	O
you	O	O
directly	O	O
call	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
you	O	O
are	O	O
not	O	O
using	O	O
multi	O	O
-	O	O
threading	O	O
feature	O	O
since	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
executed	O	O
as	O	O
part	O	O
of	O	O
caller	O	O
thread	O	O
.	O	O
If	O	O
you	O	O
call	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
on	O	O
Thread	B-api_mention	B-api_mention
,	O	O
the	O	O
Java	O	O
Virtual	O	O
Machine	O	O
will	O	O
call	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
and	O	O
two	O	O
threads	O	O
will	O	O
run	O	O
concurrently	O	O
-	O	O
Current	O	O
Thread	B-api_mention	B-api_mention
(	O	I-api_mention
main	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
in	O	O
your	O	O
example	O	O
)	O	O
and	O	O
Other	O	O
Thread	B-api_mention	B-api_mention
(	O	O
Runnable	B-api_mention	B-api_mention
r1	O	O
in	O	O
your	O	O
example	O	O
)	O	O
.	O	O
Have	O	O
a	O	O
look	O	O
at	O	O
source	O	O
code	O	O
of	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
Thread	B-api_mention	B-api_mention
class	O	O
#	O	O
pre	O	O
In	O	O
above	O	O
code	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
see	O	O
invocation	O	O
to	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
private	O	O
native	O	O
void	O	O
start0	O	O
(	O	O
args	O	O
)	O	O
is	O	O
responsible	O	O
for	O	O
calling	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
JVM	O	O
executes	O	O
this	O	O
native	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
19431234	O	O
,	O	O
answer	O	O
-	O	O
23526153	O	O
Everything	O	O
is	O	O
here	O	O
:	O	O
#	O	O
a	O	O
The	O	O
answer	O	O
with	O	O
"	O	O
round	O	O
-	O	O
tripping	O	O
"	O	O
is	O	O
not	O	O
exact	O	O
:	O	O
when	O	O
you	O	O
do	O	O
LocalDateTime	B-api_mention	B-api_mention
ldt	O	O
=	O	O
LocalDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofInstant	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
if	O	O
your	O	O
system	O	O
timezone	O	O
is	O	O
not	O	O
UTC	O	O
/	O	O
GMT	O	O
,	O	O
you	O	O
change	O	O
the	O	O
time	O	O
!	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
16635489	O	O
The	O	O
advantage	O	O
comes	O	O
into	O	O
account	O	O
when	O	O
the	O	O
operations	O	O
can	O	O
be	O	O
executed	O	O
in	O	O
parallel	O	O
.	O	O
(	O	O
See	O	O
#	O	O
a	O	O
-	O	O
the	O	O
section	O	O
about	O	O
internal	O	O
and	O	O
external	O	O
iteration	O	O
)	O	O
#	O	O
li	O	O
The	O	O
main	O	O
advantage	O	O
from	O	O
my	O	O
point	O	O
of	O	O
view	O	O
is	O	O
that	O	O
the	O	O
implementation	O	O
of	O	O
what	O	O
is	O	O
to	O	O
be	O	O
done	O	O
within	O	O
the	O	O
loop	O	O
can	O	O
be	O	O
defined	O	O
without	O	O
having	O	O
to	O	O
decide	O	O
if	O	O
it	O	O
will	O	O
be	O	O
executed	O	O
in	O	O
parallel	O	O
or	O	O
sequential	O	O
#	O	O
li	O	O
If	O	O
you	O	O
want	O	O
your	O	O
loop	O	O
to	O	O
be	O	O
executed	O	O
in	O	O
parallel	O	O
you	O	O
could	O	O
simply	O	O
write	O	O
joins	O	O
.	B-api_mention	B-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
will	O	O
have	O	O
to	O	O
write	O	O
some	O	O
extra	O	O
code	O	O
for	O	O
thread	O	O
handling	O	O
etc	O	O
.	O	O
Note	O	O
:	O	O
for	O	O
my	O	O
answer	O	O
I	O	O
assumed	O	O
joins	O	O
implementing	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Stream	I-api_mention	I-api_mention
interface	O	O
.	O	O
If	O	O
joins	O	O
implements	O	O
only	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Iterable	I-api_mention	I-api_mention
interface	O	O
this	O	O
is	O	O
no	O	O
longer	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28590286	O	O
Since	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Nan	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	O
Double	I-api_mention	B-api_mention
.	I-api_mention	I-api_mention
NaN	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
mentioned	O	O
:	O	O
It	O	O
'	O	O
s	O	O
one	O	O
thing	O	O
what	O	O
should	O	O
happen	O	O
when	O	O
you	O	O
perform	O	O
arithmetic	O	O
and	O	O
compare	O	O
numbers	O	O
,	O	O
it	O	O
'	O	O
s	O	O
a	O	O
totally	O	O
different	O	O
thing	O	O
when	O	O
you	O	O
consider	O	O
how	O	O
objects	O	O
should	O	O
behave	O	O
.	O	O
Two	O	O
typical	O	O
problem	O	O
cases	O	O
are	O	O
:	O	O
Sorting	O	O
an	O	O
array	O	O
of	O	O
numbers	O	O
,	O	O
and	O	O
using	O	O
hash	O	O
values	O	O
to	O	O
implement	O	O
dictionaries	O	O
,	O	O
sets	O	O
,	O	O
and	O	O
so	O	O
on	O	O
.	O	O
There	O	O
are	O	O
two	O	O
exceptional	O	O
cases	O	O
where	O	O
the	O	O
normal	O	O
ordering	O	O
with	O	O
<	O	O
,	O	O
=	O	O
and	O	O
>	O	O
doesn	O	O
'	O	O
t	O	O
apply	O	O
:	O	O
One	O	O
case	O	O
is	O	O
that	O	O
+	O	O
0	O	O
=	O	O
-	O	O
0	O	O
and	O	O
the	O	O
other	O	O
is	O	O
that	O	O
NaN	O	O
â‰ 	O	O
NaN	O	O
,	O	O
and	O	O
x	O	O
<	O	O
NaN	O	O
,	O	O
x	O	O
>	O	O
NaN	O	O
,	O	O
x	O	O
=	O	O
NaN	O	O
will	O	O
always	O	O
be	O	O
false	O	O
whatever	O	O
x	O	O
is	O	O
.	O	O
Sorting	O	O
algorithms	O	O
can	O	O
get	O	O
into	O	O
trouble	O	O
with	O	O
this	O	O
.	O	O
A	O	O
sorting	O	O
algorithm	O	O
may	O	O
assume	O	O
that	O	O
x	O	O
=	O	O
x	O	O
is	O	O
always	O	O
true	O	O
.	O	O
So	O	O
if	O	O
I	O	O
know	O	O
that	O	O
x	O	O
is	O	O
stored	O	O
in	O	O
an	O	O
array	O	O
and	O	O
look	O	O
for	O	O
it	O	O
,	O	O
I	O	O
might	O	O
not	O	O
do	O	O
any	O	O
bounds	O	O
check	O	O
because	O	O
the	O	O
search	O	O
for	O	O
it	O	O
must	O	O
find	O	O
something	O	O
.	O	O
Not	O	O
if	O	O
x	O	O
is	O	O
NaN	O	O
.	O	O
A	O	O
sorting	O	O
algorithm	O	O
may	O	O
assume	O	O
that	O	O
exactly	O	O
one	O	O
of	O	O
a	O	O
<	O	O
b	O	O
and	O	O
a	O	O
>	O	O
=	O	O
b	O	O
must	O	O
be	O	O
true	O	O
.	O	O
Not	O	O
if	O	O
one	O	O
is	O	O
NaN	O	O
.	O	O
So	O	O
a	O	O
naive	O	O
sorting	O	O
algorithm	O	O
may	O	O
crash	O	O
when	O	O
NaNs	O	O
are	O	O
present	O	O
.	O	O
You	O	O
'	O	O
d	O	O
have	O	O
to	O	O
decide	O	O
where	O	O
you	O	O
want	O	O
NaNs	O	O
to	O	O
end	O	O
up	O	O
when	O	O
sorting	O	O
the	O	O
array	O	O
,	O	O
and	O	O
then	O	O
change	O	O
your	O	O
comparison	O	O
code	O	O
so	O	O
that	O	O
it	O	O
works	O	O
.	O	O
Now	O	O
dictionaries	O	O
and	O	O
sets	O	O
and	O	O
generally	O	O
hashing	O	O
:	O	O
What	O	O
if	O	O
I	O	O
use	O	O
an	O	O
NaN	O	O
as	O	O
the	O	O
key	O	O
?	O	O
A	O	O
set	O	O
contains	O	O
unique	O	O
objects	O	O
.	O	O
If	O	O
the	O	O
set	O	O
contains	O	O
an	O	O
NaN	O	O
and	O	O
I	O	O
try	O	O
to	O	O
add	O	O
another	O	O
one	O	O
,	O	O
is	O	O
it	O	O
unique	O	O
because	O	O
it	O	O
is	O	O
not	O	O
equal	O	O
to	O	O
the	O	O
one	O	O
that	O	O
is	O	O
already	O	O
there	O	O
?	O	O
What	O	O
about	O	O
+	O	O
0	O	O
and	O	O
-	O	O
0	O	O
,	O	O
should	O	O
they	O	O
be	O	O
considered	O	O
equal	O	O
or	O	O
different	O	O
?	O	O
There	O	O
'	O	O
s	O	O
the	O	O
rule	O	O
that	O	O
any	O	O
two	O	O
items	O	O
considered	O	O
equal	O	O
must	O	O
have	O	O
the	O	O
same	O	O
hash	O	O
value	O	O
.	O	O
So	O	O
the	O	O
sensible	O	O
thing	O	O
is	O	O
(	O	O
probably	O	O
)	O	O
that	O	O
a	O	O
hash	O	O
function	O	O
returns	O	O
one	O	O
unique	O	O
value	O	O
for	O	O
all	O	O
NaNs	O	O
,	O	O
and	O	O
one	O	O
unique	O	O
value	O	O
for	O	O
+	O	O
0	O	O
and	O	O
-	O	O
0	O	O
.	O	O
And	O	O
after	O	O
the	O	O
hash	O	O
lookup	O	O
when	O	O
you	O	O
need	O	O
to	O	O
find	O	O
an	O	O
element	O	O
with	O	O
the	O	O
same	O	O
hash	O	O
value	O	O
that	O	O
is	O	O
actually	O	O
equal	O	O
,	O	O
two	O	O
NaNs	O	O
should	O	O
be	O	O
considered	O	O
equal	O	O
(	O	O
but	O	O
different	O	O
from	O	O
anything	O	O
else	O	O
)	O	O
.	O	O
That	O	O
'	O	O
s	O	O
probably	O	O
why	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Nan	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
equal	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
behaves	O	O
different	O	O
from	O	O
=	O	O
=	O	O
.	O	O
Question	O	O
-	O	O
22409102	O	O
,	O	O
answer	O	O
-	O	O
22501695	O	O
The	O	O
approach	O	O
used	O	O
by	O	O
Math	B-api_mention	O
.	I-api_mention	O
min	I-api_mention	O
is	O	O
similar	O	O
to	O	O
what	O	O
Jesper	O	O
proposes	O	O
but	O	O
a	O	O
little	O	O
clearer	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6684665	O	O
,	O	O
answer	O	O
-	O	O
12685471	O	O
The	O	O
kind	O	O
of	O	O
output	O	O
you	O	O
are	O	O
seeing	O	O
from	O	O
your	O	O
byte	O	O
array	O	O
(	O	O
[	O	O
B	O	O
@	O	O
405217f8	O	O
)	O	O
is	O	O
also	O	O
an	O	O
output	O	O
for	O	O
a	O	O
zero	O	O
length	O	O
byte	O	O
array	O	O
(	O	O
ie	O	O
new	O	O
byte	O	O
[	O	O
0	O	O
]	O	O
)	O	O
.	O	O
It	O	O
looks	O	O
like	O	O
this	O	O
string	O	O
is	O	O
a	O	O
reference	O	O
to	O	O
the	O	O
array	O	O
rather	O	O
than	O	O
a	O	O
description	O	O
of	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
array	O	O
like	O	O
we	O	O
might	O	O
expect	O	O
from	O	O
a	O	O
regular	O	O
collection	O	O
'	O	O
s	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
As	O	O
with	O	O
other	O	O
respondents	O	O
,	O	O
I	O	O
would	O	O
point	O	O
you	O	O
to	O	O
the	O	O
String	B-api_mention	B-api_mention
constructors	O	O
that	O	O
accept	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
parameter	O	O
to	O	O
construct	O	O
a	O	O
string	O	O
from	O	O
the	O	O
contents	O	O
of	O	O
a	O	O
byte	O	O
array	O	O
.	O	O
You	O	O
should	O	O
be	O	O
able	O	O
to	O	O
read	O	O
raw	O	O
bytes	O	O
from	O	O
a	O	O
socket	O	O
'	O	O
s	O	O
InputStream	B-api_mention	B-api_mention
if	O	O
you	O	O
want	O	O
to	O	O
obtain	O	O
bytes	O	O
from	O	O
a	O	O
TCP	O	O
connection	O	O
.	O	O
If	O	O
you	O	O
have	O	O
already	O	O
read	O	O
those	O	O
bytes	O	O
as	O	O
a	O	O
String	B-api_mention	B-api_mention
(	O	O
using	O	O
an	O	O
InputStreamReader	B-api_mention	B-api_mention
)	O	O
,	O	O
then	O	O
,	O	O
the	O	O
string	O	O
can	O	O
be	O	O
converted	O	O
to	O	O
bytes	O	O
using	O	O
the	O	O
getBytes	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
.	O	O
Be	O	O
sure	O	O
to	O	O
pass	O	O
in	O	O
your	O	O
desired	O	O
character	O	O
set	O	O
to	O	O
both	O	O
the	O	O
String	B-api_mention	B-api_mention
constructor	O	O
and	O	O
getBytes	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
functions	O	O
,	O	O
and	O	O
this	O	O
will	O	O
only	O	O
work	O	O
if	O	O
the	O	O
byte	O	O
data	O	O
can	O	O
be	O	O
converted	O	O
to	O	O
characters	O	O
by	O	O
the	O	O
InputStreamReader	B-api_mention	B-api_mention
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
deal	O	O
with	O	O
raw	O	O
bytes	O	O
you	O	O
should	O	O
really	O	O
avoid	O	O
using	O	O
this	O	O
stream	O	O
reader	O	O
layer	O	O
.	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725550	O	O
Think	O	O
of	O	O
it	O	O
like	O	O
this	O	O
:	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
has	O	O
methods	O	O
like	O	O
add	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
set	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
contract	O	O
is	O	O
that	O	O
once	O	O
you	O	O
added	O	O
an	O	O
element	O	O
at	O	O
position	O	O
X	O	O
you	O	O
will	O	O
find	O	O
it	O	O
there	O	O
unless	O	O
you	O	O
add	O	O
or	O	O
remove	O	O
elements	O	O
before	O	O
it	O	O
.	O	O
If	O	O
any	O	O
list	O	O
implementation	O	O
would	O	O
store	O	O
elements	O	O
in	O	O
some	O	O
order	O	O
other	O	O
than	O	O
based	O	O
on	O	O
the	O	O
index	O	O
,	O	O
the	O	O
above	O	O
list	O	O
methods	O	O
would	O	O
make	O	O
no	O	O
sense	O	O
.	O	O
Question	O	O
-	O	O
6667243	O	O
,	O	O
answer	O	O
-	O	O
6667307	O	O
mode1	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
It	O	O
doesn	O	O
'	O	O
t	O	O
get	O	O
better	O	O
than	O	O
that	O	O
,	O	O
I	O	O
'	O	O
m	O	O
afraid	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
20945113	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
*	O	O
but	O	O
this	O	O
only	O	O
means	O	O
you	O	O
cannot	O	O
change	O	O
it	O	O
using	O	O
its	O	O
public	O	O
API	O	O
.	O	O
What	O	O
you	O	O
are	O	O
doing	O	O
here	O	O
is	O	O
circumventing	O	O
the	O	O
normal	O	O
API	O	O
,	O	O
using	O	O
reflection	O	O
.	O	O
The	O	O
same	O	O
way	O	O
,	O	O
you	O	O
can	O	O
change	O	O
the	O	O
values	O	O
of	O	O
enums	O	O
,	O	O
change	O	O
the	O	O
lookup	O	O
table	O	O
used	O	O
in	O	O
Integer	B-api_mention	B-api_mention
autoboxing	O	O
etc	O	O
.	O	O
Now	O	O
,	O	O
the	O	O
reason	O	O
s1	O	O
and	O	O
s2	O	O
change	O	O
value	O	O
,	O	O
is	O	O
that	O	O
they	O	O
both	O	O
refer	O	O
to	O	O
the	O	O
same	O	O
interned	O	O
string	O	O
.	O	O
The	O	O
compiler	O	O
does	O	O
this	O	O
(	O	O
as	O	O
mentioned	O	O
by	O	O
other	O	O
answers	O	O
)	O	O
.	O	O
The	O	O
reason	O	O
s3	O	O
does	O	O
not	O	O
was	O	O
actually	O	O
a	O	O
bit	O	O
surprising	O	O
to	O	O
me	O	O
,	O	O
as	O	O
I	O	O
thought	O	O
it	O	O
would	O	O
share	O	O
the	O	O
value	O	O
array	O	O
(	O	O
it	O	O
did	O	O
in	O	O
earlier	O	O
version	O	O
of	O	O
Java	O	O
,	O	O
before	O	O
Java	O	O
7u6	O	O
)	O	O
.	O	O
However	O	O
,	O	O
looking	O	O
at	O	O
the	O	O
source	O	O
code	O	O
of	O	O
String	B-api_mention	B-api_mention
,	O	O
we	O	O
can	O	O
see	O	O
that	O	O
the	O	O
value	O	O
character	O	O
array	O	O
for	O	O
a	O	O
substring	O	O
is	O	O
actually	O	O
copied	O	O
(	O	O
using	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOfRange	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
This	O	O
is	O	O
why	O	O
it	O	O
goes	O	O
unchanged	O	O
.	O	O
You	O	O
can	O	O
install	O	O
a	O	O
SecurityManager	B-api_mention	B-api_mention
,	O	O
to	O	O
avoid	O	O
malicious	O	O
code	O	O
to	O	O
do	O	O
such	O	O
things	O	O
.	O	O
But	O	O
keep	O	O
in	O	O
mind	O	O
that	O	O
some	O	O
libraries	O	O
depend	O	O
on	O	O
using	O	O
these	O	O
kind	O	O
of	O	O
reflection	O	O
tricks	O	O
(	O	O
typically	O	O
ORM	O	O
tools	O	O
,	O	O
AOP	O	O
libraries	O	O
etc	O	O
)	O	O
.	O	O
*	O	O
)	O	O
I	O	O
initially	O	O
wrote	O	O
that	O	O
String	B-api_mention	B-api_mention
s	O	O
aren	O	O
'	O	O
t	O	O
really	O	O
immutable	O	O
,	O	O
just	O	O
"	O	O
effective	O	O
immutable	O	O
"	O	O
.	O	O
This	O	O
might	O	O
be	O	O
misleading	O	O
in	O	O
the	O	O
current	O	O
implementation	O	O
of	O	O
String	B-api_mention	B-api_mention
,	O	O
where	O	O
the	O	O
value	O	O
array	O	O
is	O	O
indeed	O	O
marked	O	O
private	O	O
final	O	O
.	O	O
It	O	O
'	O	O
s	O	O
still	O	O
worth	O	O
noting	O	O
,	O	O
though	O	O
,	O	O
that	O	O
there	O	O
is	O	O
no	O	O
way	O	O
to	O	O
declare	O	O
an	O	O
array	O	O
in	O	O
Java	O	O
as	O	O
immutable	O	O
,	O	O
so	O	O
care	O	O
must	O	O
be	O	O
taken	O	O
not	O	O
to	O	O
expose	O	O
it	O	O
outside	O	O
its	O	O
class	O	O
,	O	O
even	O	O
with	O	O
the	O	O
proper	O	O
access	O	O
modifiers	O	O
.	O	O
As	O	O
this	O	O
topic	O	O
seems	O	O
overwhelmingly	O	O
popular	O	O
,	O	O
here	O	O
'	O	O
s	O	O
some	O	O
suggested	O	O
further	O	O
reading	O	O
:	O	O
Heinz	O	O
Kabutz	O	O
'	O	O
s	O	O
Reflection	O	O
Madness	O	O
talk	O	O
from	O	O
JavaZone	O	O
2009	O	O
,	O	O
which	O	O
covers	O	O
a	O	O
lot	O	O
of	O	O
the	O	O
issues	O	O
in	O	O
the	O	O
OP	O	O
,	O	O
along	O	O
with	O	O
other	O	O
reflection	O	O
.	O	O
.	O	O
.	O	O
well	O	O
.	O	O
.	O	O
.	O	O
madness	O	O
.	O	O
It	O	O
covers	O	O
why	O	O
this	O	O
is	O	O
sometimes	O	O
useful	O	O
.	O	O
And	O	O
why	O	O
,	O	O
most	O	O
of	O	O
the	O	O
time	O	O
,	O	O
you	O	O
should	O	O
avoid	O	O
it	O	O
.	O	O
:	O	O
-	O	O
)	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
8894348	O	O
The	O	O
first	O	O
one	O	O
using	O	O
str	O	O
.	B-api_mention	O
charAt	I-api_mention	O
should	O	O
be	O	O
faster	O	O
.	O	O
If	O	O
you	O	O
dig	O	O
inside	O	O
the	O	O
source	O	O
code	O	O
of	O	O
String	O	B-api_mention
class	O	O
,	O	O
we	O	O
can	O	O
see	O	O
that	O	O
charAt	O	O
is	O	O
implemented	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
Here	O	O
,	O	O
all	O	O
it	O	O
does	O	O
is	O	O
index	O	O
an	O	O
array	O	O
and	O	O
return	O	O
the	O	O
value	O	O
.	O	O
Now	O	O
,	O	O
if	O	O
we	O	O
see	O	O
the	O	O
implementation	O	O
of	O	O
toCharArray	B-api_mention	B-api_mention
,	O	O
we	O	O
will	O	O
find	O	O
the	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
see	O	O
,	O	O
it	O	O
is	O	O
doing	O	O
a	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
arraycopy	I-api_mention	I-api_mention
which	O	O
is	O	O
definitely	O	O
going	O	O
to	O	O
be	O	O
a	O	O
tad	O	O
slower	O	O
than	O	O
not	O	O
doing	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
18723596	O	O
,	O	O
answer	O	O
-	O	O
18723666	O	O
You	O	O
can	O	O
cast	O	O
null	O	O
to	O	O
any	O	O
reference	O	O
type	O	O
without	O	O
getting	O	O
any	O	O
exception	O	O
.	O	O
println	B-api_mention	B-api_mention
method	O	O
does	O	O
not	O	O
throw	O	O
null	O	O
pointer	O	O
because	O	O
it	O	O
first	O	O
checks	O	O
whether	O	O
the	O	O
object	O	O
is	O	O
null	O	O
or	O	O
not	O	O
.	O	O
If	O	O
null	O	O
then	O	O
it	O	O
simply	O	O
prints	O	O
the	O	O
string	O	O
StringLiteral	O	O
.	O	O
Otherwise	O	O
it	O	O
will	O	O
call	O	O
the	O	O
toString	B-api_mention	B-api_mention
method	O	O
of	O	O
that	O	O
object	O	O
.	O	O
Adding	O	O
more	O	O
details	O	O
:	O	O
Internally	O	O
print	O	O
methods	O	O
call	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
on	O	O
the	O	O
input	O	O
object	O	O
.	O	O
And	O	O
in	O	O
valueOf	B-api_mention	B-api_mention
method	O	O
,	O	O
this	O	O
check	O	O
helps	O	O
to	O	O
avoid	O	O
null	O	O
pointer	O	O
excpeiton	O	O
:	O	O
return	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
?	O	O
StringLiteral	O	O
:	O	O
obj	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
rest	O	O
of	O	O
your	O	O
confusion	O	O
,	O	O
calling	O	O
any	O	O
method	O	O
on	O	O
a	O	O
null	O	O
object	O	O
should	O	O
throw	O	O
a	O	O
null	O	O
pointer	O	O
exception	O	O
,	O	O
if	O	O
not	O	O
a	O	O
special	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
20331163	O	O
,	O	O
answer	O	O
-	O	O
20331241	O	O
I	O	O
have	O	O
a	O	O
very	O	O
dumb	O	O
but	O	O
working	O	O
option	O	O
.	O	O
if	O	O
you	O	O
have	O	O
the	O	O
String	B-api_mention	B-api_mention
fullDate	O	O
=	O	O
"	O	O
11	O	O
/	O	O
15	O	O
/	O	O
2013	O	O
08	O	O
:	O	O
00	O	O
:	O	O
00	O	O
"	O	O
;	O	O
String	B-api_mention	B-api_mention
finalDate	O	O
=	O	O
fullDate	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
[	O	O
0	O	O
]	O	O
;	O	O
That	O	O
should	O	O
work	O	O
easy	O	O
and	O	O
fast	O	O
.	O	O
:	O	O
)	O	O
Question	O	O
-	O	O
15182496	O	O
The	O	O
following	O	O
print	O	O
statement	O	O
would	O	O
print	O	O
"	O	O
hello	O	O
world	O	O
"	O	O
.	O	O
Could	O	O
anyone	O	O
explain	O	O
this	O	O
?	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
And	O	O
randomString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
looks	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923227	O	O
Optionals	O	O
aren	O	O
'	O	O
t	O	O
designed	O	O
for	O	O
this	O	O
purpose	O	O
,	O	O
as	O	O
explained	O	O
nicely	O	O
by	O	O
Brian	O	O
Goetz	O	O
.	O	O
You	O	O
can	O	O
always	O	O
use	O	O
@	O	O
Nullable	O	O
to	O	O
denote	O	O
that	O	O
a	O	O
method	O	O
argument	O	O
can	O	O
be	O	O
null	O	O
.	O	O
Using	O	O
an	O	O
optional	O	O
does	O	O
not	O	O
really	O	O
enable	O	O
you	O	O
to	O	O
write	O	O
your	O	O
method	O	O
logic	O	O
more	O	O
neatly	O	O
.	O	O
Question	O	O
-	O	O
15202997	O	O
,	O	O
answer	O	O
-	O	O
29527145	O	O
Adding	O	O
local	O	O
classes	O	O
,	O	O
lambdas	O	O
and	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
complete	O	O
the	O	O
previous	O	O
two	O	O
answers	O	O
.	O	O
Further	O	O
,	O	O
I	O	O
add	O	O
arrays	O	O
of	O	O
lambdas	O	O
and	O	O
arrays	O	O
of	O	O
anonymous	O	O
classes	O	O
(	O	O
which	O	O
do	O	O
not	O	O
make	O	O
any	O	O
sense	O	O
in	O	O
practice	O	O
though	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
the	O	O
full	O	O
output	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
,	O	O
here	O	O
are	O	O
the	O	O
rules	O	O
.	O	O
First	O	O
,	O	O
lets	O	O
start	O	O
with	O	O
primitive	O	O
types	O	O
and	O	O
void	O	O
:	O	O
#	O	O
li	O	O
If	O	O
the	O	O
class	O	O
object	O	O
represents	O	O
a	O	O
primitive	O	O
type	O	O
or	O	O
void	O	O
,	O	O
all	O	O
the	O	O
four	O	O
methods	O	O
simply	O	O
returns	O	O
its	O	O
name	O	O
.	O	O
Now	O	O
the	O	O
rules	O	O
for	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
li	O	O
Every	O	O
non	O	O
-	O	O
lambda	O	O
and	O	O
non	O	O
-	O	O
array	O	O
class	O	O
or	O	O
interface	O	O
(	O	O
i	O	O
.	O	O
e	O	O
,	O	O
top	O	O
-	O	O
level	O	O
,	O	O
nested	O	O
,	O	O
inner	O	O
,	O	O
local	O	O
and	O	O
anonymous	O	O
)	O	O
has	O	O
a	O	O
name	O	O
(	O	O
which	O	O
is	O	O
returned	O	O
by	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
that	O	O
is	O	O
the	O	O
package	O	O
name	O	O
followed	O	O
by	O	O
a	O	O
dot	O	O
(	O	O
if	O	O
there	O	O
is	O	O
a	O	O
package	O	O
)	O	O
,	O	O
followed	O	O
by	O	O
the	O	O
name	O	O
of	O	O
its	O	O
class	O	O
-	O	O
file	O	O
as	O	O
generated	O	O
by	O	O
the	O	O
compiler	O	O
(	O	O
whithout	O	O
the	O	O
suffix	O	O
.	O	B-api_mention
class	O	I-api_mention
)	O	O
.	O	O
If	O	O
there	O	O
is	O	O
no	O	O
package	O	O
,	O	O
it	O	O
is	O	O
simply	O	O
the	O	O
name	O	O
of	O	O
the	O	O
class	O	O
-	O	O
file	O	O
.	O	O
If	O	O
the	O	O
class	O	O
is	O	O
an	O	O
inner	O	O
,	O	O
nested	O	O
,	O	O
local	O	O
or	O	O
anonymous	O	O
class	O	O
,	O	O
the	O	O
compiler	O	O
should	O	O
generate	O	O
at	O	O
least	O	O
one	O	O
$	O	O
in	O	O
its	O	O
class	O	O
-	O	O
file	O	O
name	O	O
.	O	O
Note	O	O
that	O	O
for	O	O
anonymous	O	O
classes	O	O
,	O	O
the	O	O
class	O	O
name	O	O
would	O	O
end	O	O
with	O	O
a	O	O
dollar	O	O
-	O	O
sign	O	O
followed	O	O
by	O	O
a	O	O
number	O	O
.	O	O
#	O	O
li	O	O
Lambda	O	O
class	O	O
names	O	O
are	O	O
generally	O	O
unpredictable	O	O
,	O	O
and	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
care	O	O
about	O	O
they	O	O
anyway	O	O
.	O	O
Exactly	O	O
,	O	O
their	O	O
name	O	O
is	O	O
the	O	O
name	O	O
of	O	O
the	O	O
enclosing	O	O
class	O	O
,	O	O
followed	O	O
by	O	O
$	O	O
$	O	O
Lambda	O	O
$	O	O
,	O	O
followed	O	O
by	O	O
a	O	O
number	O	O
,	O	O
followed	O	O
by	O	O
a	O	O
slash	O	O
,	O	O
followed	O	O
by	O	O
another	O	O
number	O	O
.	O	O
#	O	O
li	O	O
The	O	O
class	O	O
descriptor	O	O
of	O	O
the	O	O
primitives	O	O
are	O	O
Z	O	O
for	O	O
boolean	O	O
,	O	O
B	O	O
for	O	O
byte	O	O
,	O	O
S	O	O
for	O	O
short	O	O
,	O	O
C	O	O
for	O	O
char	O	O
,	O	O
I	O	O
for	O	O
int	O	O
,	O	O
J	O	O
for	O	O
long	O	O
,	O	O
F	O	O
for	O	O
float	O	O
and	O	O
D	O	O
for	O	O
double	O	O
.	O	O
For	O	O
non	O	O
-	O	O
array	O	O
classes	O	O
and	O	O
interfaces	O	O
the	O	O
class	O	O
descriptor	O	O
is	O	O
L	O	O
followed	O	O
by	O	O
what	O	O
is	O	O
given	O	O
by	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
followed	O	O
by	O	O
;	O	O
.	O	O
For	O	O
array	O	O
classes	O	O
,	O	O
the	O	O
class	O	O
descriptor	O	O
is	O	O
[	O	O
followed	O	O
by	O	O
the	O	O
class	O	O
descriptor	O	O
of	O	O
the	O	O
component	O	O
type	O	O
(	O	O
which	O	O
may	O	O
be	O	O
itself	O	O
another	O	O
array	O	O
class	O	O
)	O	O
.	O	O
#	O	O
li	O	O
For	O	O
array	O	O
classes	O	O
,	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
its	O	O
class	O	O
descriptor	O	O
.	O	O
This	O	O
rule	O	O
seems	O	O
to	O	O
fail	O	O
only	O	O
for	O	O
array	O	O
classes	O	O
whose	O	O
the	O	O
component	O	O
type	O	O
is	O	O
a	O	O
lambda	O	O
(	O	O
which	O	O
possibly	O	O
is	O	O
a	O	O
bug	O	O
)	O	O
,	O	O
but	O	O
hopefully	O	O
this	O	O
should	O	O
not	O	O
matter	O	O
anyway	O	O
because	O	O
there	O	O
is	O	O
no	O	O
point	O	O
even	O	O
on	O	O
the	O	O
existence	O	O
of	O	O
array	O	O
classes	O	O
whose	O	O
component	O	O
type	O	O
is	O	O
a	O	O
lambda	O	O
.	O	O
Now	O	O
,	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
li	O	O
If	O	O
the	O	O
class	O	O
instance	O	O
represents	O	O
an	O	O
interface	O	O
(	O	O
or	O	O
an	O	O
annotation	O	O
,	O	O
which	O	O
is	O	O
a	O	O
special	O	O
type	O	O
of	O	O
interface	O	O
)	O	O
,	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
StringLiteral	O	O
+	O	O
getName	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
.	O	O
If	O	O
it	O	O
is	O	O
a	O	O
primitive	O	O
,	O	O
it	O	O
returns	O	O
simply	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
it	O	O
is	O	O
something	O	O
else	O	O
(	O	O
a	O	O
class	O	O
type	O	O
,	O	O
even	O	O
if	O	O
it	O	O
is	O	O
a	O	O
pretty	O	O
weird	O	O
one	O	O
)	O	O
,	O	O
it	O	O
returns	O	O
StringLiteral	O	O
+	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
li	O	O
For	O	O
top	O	O
-	O	O
level	O	O
classes	O	O
and	O	O
interfaces	O	O
,	O	O
the	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
just	O	O
what	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
.	O	O
#	O	O
li	O	O
The	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
null	O	O
for	O	O
anonymous	O	O
or	O	O
local	O	O
classes	O	O
and	O	O
for	O	O
array	O	O
classes	O	O
of	O	O
those	O	O
.	O	O
#	O	O
li	O	O
For	O	O
inner	O	O
and	O	O
nested	O	O
classes	O	O
and	O	O
interfaces	O	O
,	O	O
the	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
what	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
would	O	O
replacing	O	O
the	O	O
compiler	O	O
-	O	O
introduced	O	O
dollar	O	O
-	O	O
signs	O	O
by	O	O
dots	O	O
.	O	O
#	O	O
li	O	O
For	O	O
array	O	O
classes	O	O
,	O	O
the	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
null	O	O
if	O	O
the	O	O
canonical	O	O
name	O	O
of	O	O
the	O	O
component	O	O
type	O	O
is	O	O
null	O	O
.	O	O
Otherwise	O	O
,	O	O
it	O	O
returns	O	O
the	O	O
canonical	O	O
name	O	O
of	O	O
the	O	O
component	O	O
type	O	O
followed	O	O
by	O	O
[	O	O
]	O	O
.	O	O
The	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
li	O	O
For	O	O
top	O	O
-	O	O
level	O	O
,	O	O
nested	O	O
,	O	O
inner	O	O
and	O	O
local	O	O
classes	O	O
,	O	O
the	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
the	O	O
name	O	O
of	O	O
the	O	O
class	O	O
as	O	O
written	O	O
in	O	O
the	O	O
source	O	O
file	O	O
.	O	O
#	O	O
li	O	O
For	O	O
anonymous	O	O
classes	O	O
the	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
an	O	O
empty	O	O
String	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
For	O	O
lambda	O	O
classes	O	O
the	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
just	O	O
returns	O	O
what	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
return	O	O
without	O	O
the	O	O
package	O	O
name	O	O
.	O	O
This	O	O
do	O	O
not	O	O
makes	O	O
much	O	O
sense	O	O
and	O	O
looks	O	O
like	O	O
a	O	O
bug	O	O
for	O	O
me	O	O
,	O	O
but	O	O
there	O	O
is	O	O
no	O	O
point	O	O
in	O	O
calling	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
lambda	O	O
class	O	O
to	O	O
start	O	O
with	O	O
.	O	O
#	O	O
li	O	O
For	O	O
array	O	O
classes	O	O
the	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
the	O	O
simple	O	O
name	O	O
of	O	O
the	O	O
component	O	O
class	O	O
followed	O	O
by	O	O
[	O	O
]	O	O
.	O	O
This	O	O
have	O	O
the	O	O
funny	O	O
/	O	O
weird	O	O
side	O	O
-	O	O
effect	O	O
that	O	O
array	O	O
classes	O	O
whose	O	O
component	O	O
type	O	O
is	O	O
an	O	O
anonymous	O	O
class	O	O
have	O	O
just	O	O
[	O	O
]	O	O
as	O	O
their	O	O
simple	O	O
names	O	O
.	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
31931870	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
singletonList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
6252678	O	O
,	O	O
answer	O	O
-	O	O
6252802	O	O
You	O	O
need	O	O
a	O	O
DateTimeFormatter	B-api_mention	B-api_mention
appropriate	O	O
to	O	O
the	O	O
format	O	O
you	O	O
'	O	O
re	O	O
using	O	O
.	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
the	O	O
docs	O	O
for	O	O
instructions	O	O
on	O	O
how	O	O
to	O	O
build	O	O
one	O	O
.	O	O
Off	O	O
the	O	O
cuff	O	O
,	O	O
I	O	O
think	O	O
you	O	O
need	O	O
format	O	O
=	O	O
DateTimeFormat	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forPattern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
16159203	O	O
,	O	O
answer	O	O
-	O	O
16323196	O	O
#	O	O
blockquote	O	O
currentPos	O	O
=	O	O
new	O	O
Point	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
does	O	O
a	O	O
few	O	O
things	O	O
,	O	O
including	O	O
writing	O	O
default	O	O
values	O	O
to	O	O
x	O	O
and	O	O
y	O	O
(	O	O
0	O	O
)	O	O
and	O	O
then	O	O
writing	O	O
their	O	O
initial	O	O
values	O	O
in	O	O
the	O	O
constructor	O	O
.	O	O
Since	O	O
your	O	O
object	O	O
is	O	O
not	O	O
safely	O	O
published	O	O
those	O	O
4	O	O
write	O	O
operations	O	O
can	O	O
be	O	O
freely	O	O
reordered	O	O
by	O	O
the	O	O
compiler	O	O
/	O	O
JVM	O	O
.	O	O
So	O	O
from	O	O
the	O	O
perspective	O	O
of	O	O
the	O	O
reading	O	O
thread	O	O
,	O	O
it	O	O
is	O	O
a	O	O
legal	O	O
execution	O	O
to	O	O
read	O	O
x	O	O
with	O	O
its	O	O
new	O	O
value	O	O
but	O	O
y	O	O
with	O	O
its	O	O
default	O	O
value	O	O
of	O	O
0	O	O
for	O	O
example	O	O
.	O	O
By	O	O
the	O	O
time	O	O
you	O	O
reach	O	O
the	O	O
println	O	O
statement	O	O
(	O	O
which	O	O
by	O	O
the	O	O
way	O	O
is	O	O
synchronized	O	O
and	O	O
therefore	O	O
does	O	O
influence	O	O
the	O	O
read	O	O
operations	O	O
)	O	O
,	O	O
the	O	O
variables	O	O
have	O	O
their	O	O
initial	O	O
values	O	O
and	O	O
the	O	O
program	O	O
prints	O	O
the	O	O
expected	O	O
values	O	O
.	O	O
Marking	O	O
currentPos	O	O
as	O	O
volatile	O	O
will	O	O
ensure	O	O
safe	O	O
publication	O	O
since	O	O
your	O	O
object	O	O
is	O	O
effectively	O	O
immutable	O	O
-	O	O
if	O	O
in	O	O
your	O	O
real	O	O
use	O	O
case	O	O
the	O	O
object	O	O
is	O	O
mutated	O	O
after	O	O
construction	O	O
,	O	O
volatile	O	O
guarantees	O	O
won	O	O
'	O	O
t	O	O
be	O	O
enough	O	O
and	O	O
you	O	O
could	O	O
see	O	O
an	O	O
inconsistent	O	O
object	O	O
again	O	O
.	O	O
Alternatively	O	O
,	O	O
you	O	O
can	O	O
make	O	O
the	O	O
Point	B-api_mention	O
immutable	O	O
which	O	O
will	O	O
also	O	O
ensure	O	O
safe	O	O
publication	O	O
,	O	O
even	O	O
without	O	O
using	O	O
volatile	O	O
.	O	O
To	O	O
achieve	O	O
immutability	O	O
,	O	O
you	O	O
simply	O	O
need	O	O
to	O	O
mark	O	O
x	O	O
and	O	O
y	O	O
final	O	O
.	O	O
As	O	O
a	O	O
side	O	O
note	O	O
and	O	O
as	O	O
already	O	O
mentioned	O	O
,	O	O
synchronized	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
{	O	O
}	O	O
can	O	O
be	O	O
treated	O	O
as	O	O
a	O	O
no	O	O
-	O	O
op	O	O
by	O	O
the	O	O
JVM	O	O
(	O	O
I	O	O
understand	O	O
you	O	O
included	O	O
it	O	O
to	O	O
reproduce	O	O
the	O	O
behaviour	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
14602062	O	O
,	O	O
answer	O	O
-	O	O
14602092	O	O
From	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
API	O	O
Doc	O	O
:	O	O
#	O	O
blockquote	O	O
Overloaded	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
more	O	O
appropriate	O	O
for	O	O
your	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
28323553	O	O
One	O	O
of	O	O
the	O	O
main	O	O
benefits	O	O
of	O	O
using	O	O
streams	O	O
is	O	O
that	O	O
it	O	O
gives	O	O
the	O	O
ability	O	O
to	O	O
process	O	O
data	O	O
in	O	O
a	O	O
declarative	O	O
way	O	O
,	O	O
that	O	O
is	O	O
,	O	O
using	O	O
a	O	O
functional	O	O
style	O	O
of	O	O
programming	O	O
.	O	O
It	O	O
also	O	O
gives	O	O
multi	O	O
-	O	O
threading	O	O
capability	O	O
for	O	O
free	O	O
meaning	O	O
there	O	O
is	O	O
no	O	O
need	O	O
to	O	O
write	O	O
any	O	O
extra	O	O
multi	O	O
-	O	O
threaded	O	O
code	O	O
to	O	O
make	O	O
your	O	O
stream	O	O
concurrent	O	O
.	O	O
Assuming	O	O
the	O	O
reason	O	O
you	O	O
are	O	O
exploring	O	O
this	O	O
style	O	O
of	O	O
programming	O	O
is	O	O
that	O	O
you	O	O
want	O	O
to	O	O
exploit	O	O
these	O	O
benefits	O	O
then	O	O
your	O	O
first	O	O
code	O	O
sample	O	O
is	O	O
potentially	O	O
not	O	O
functional	O	O
since	O	O
the	O	O
foreach	O	O
method	O	O
is	O	O
classed	O	O
as	O	O
being	O	O
terminal	O	O
(	O	O
meaning	O	O
that	O	O
it	O	O
can	O	O
produce	O	O
side	O	O
-	O	O
effects	O	O
)	O	O
.	O	O
The	O	O
second	O	O
way	O	O
is	O	O
preferred	O	O
from	O	O
functional	O	O
programming	O	O
point	O	O
of	O	O
view	O	O
since	O	O
the	O	O
map	O	O
function	O	O
can	O	O
accept	O	O
stateless	O	O
lambda	O	O
functions	O	O
.	O	O
More	O	O
explicitly	O	O
,	O	O
the	O	O
lambda	O	O
passed	O	O
to	O	O
the	O	O
map	O	O
function	O	O
should	O	O
be	O	O
#	O	O
li	O	O
Non	O	O
-	O	O
interfering	O	O
,	O	O
meaning	O	O
that	O	O
the	O	O
function	O	O
should	O	O
not	O	O
alter	O	O
the	O	O
source	O	O
of	O	O
the	O	O
stream	O	O
if	O	O
it	O	O
is	O	O
non	O	O
-	O	O
concurrent	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
ArrayList	B-api_mention	B-api_mention
)	O	O
.	O	O
#	O	O
li	O	O
Stateless	O	O
to	O	O
avoid	O	O
unexpected	O	O
results	O	O
when	O	O
doing	O	O
parallel	O	O
processing	O	O
(	O	O
caused	O	O
by	O	O
thread	O	O
scheduling	O	O
differences	O	O
)	O	O
.	O	O
Another	O	O
benefit	O	O
with	O	O
the	O	O
second	O	O
approach	O	O
is	O	O
if	O	O
the	O	O
stream	O	O
is	O	O
parallel	O	O
and	O	O
the	O	O
collector	O	O
is	O	O
concurrent	O	O
and	O	O
unordered	O	O
then	O	O
these	O	O
characteristics	O	O
can	O	O
provide	O	O
useful	O	O
hints	O	O
to	O	O
the	O	O
reduction	O	B-api_mention
operation	O	O
to	O	O
do	O	O
the	O	O
collecting	O	O
concurrently	O	O
.	O	O
Question	O	O
-	O	O
5011932	O	O
I	O	O
am	O	O
storing	O	O
a	O	O
SQL	O	O
query	O	O
in	O	O
my	O	O
strings	O	O
.	O	O
xml	O	O
file	O	O
and	O	O
I	O	O
want	O	O
to	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Format	I-api_mention	I-api_mention
to	O	O
build	O	O
the	O	O
final	O	O
string	O	O
in	O	O
code	O	O
.	O	O
The	O	O
SELECT	O	O
statement	O	O
uses	O	O
a	O	O
like	O	O
,	O	O
something	O	O
like	O	O
this	O	O
:	O	O
SELECT	O	O
Field1	O	O
,	O	O
Field2	O	O
FROM	O	O
mytable	O	O
WHERE	O	O
Field1	O	O
LIKE	O	O
'	O	O
%	O	O
something	O	O
%	O	O
'	O	O
In	O	O
order	O	O
to	O	O
format	O	O
that	O	O
I	O	O
replace	O	O
'	O	O
something	O	O
'	O	O
with	O	O
%	O	O
1	O	O
$	O	O
s	O	O
so	O	O
it	O	O
becomes	O	O
:	O	O
SELECT	O	O
Field1	O	O
,	O	O
Field2	O	O
FROM	O	O
mytable	O	O
WHERE	O	O
Field1	O	O
LIKE	O	O
\	O	O
'	O	O
%	O	O
%	O	O
1	O	O
$	O	O
s	O	O
%	O	O
\	O	O
'	O	O
I	O	O
escape	O	O
the	O	O
single	O	O
quotes	O	O
with	O	O
the	O	O
backslash	O	O
.	O	O
However	O	O
I	O	O
am	O	O
not	O	O
able	O	O
to	O	O
escape	O	O
the	O	O
%	O	O
sign	O	O
.	O	O
How	O	O
can	O	O
I	O	O
include	O	O
a	O	O
like	O	O
statement	O	O
in	O	O
my	O	O
strings	O	O
.	O	O
xml	O	O
file	O	O
?	O	O
Question	O	O
-	O	O
5455794	O	O
,	O	O
answer	O	O
-	O	O
5455820	O	O
How	O	O
about	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Refer	O	O
here	O	O
.	O	O
Question	O	O
-	O	O
20746429	O	O
,	O	O
answer	O	O
-	O	O
24531394	O	O
Here	O	O
is	O	O
a	O	O
version	O	O
done	O	O
on	O	O
ints	O	O
-	O	O
as	O	O
asked	O	O
in	O	O
the	O	O
question	O	O
.	O	O
Usage	O	O
:	O	O
StreamUtil	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
takeWhile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Here	O	O
'	O	O
s	O	O
code	O	O
for	O	O
StreamUtil	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
18532488	O	O
,	O	O
answer	O	O
-	O	O
33142346	O	O
Once	O	O
a	O	O
repeat	O	O
function	O	O
is	O	O
somewhere	O	O
defined	O	O
as	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
use	O	O
it	O	O
now	O	O
and	O	O
then	O	O
this	O	O
way	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
:	O	O
repeat	O	O
.	B-api_mention	B-api_mention
accept	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
To	O	O
get	O	O
and	O	O
equivalent	O	O
to	O	O
Haskell	O	O
'	O	O
s	O	O
take	O	O
8	O	O
(	O	O
args	O	O
)	O	O
You	O	O
could	O	O
write	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28671903	O	O
I	O	O
have	O	O
a	O	O
set	O	O
â€“	O	O
a	O	O
HashSet	B-api_mention	B-api_mention
I	O	O
want	O	O
to	O	O
remove	O	O
some	O	O
items	O	O
from	O	O
it	O	O
â€¦	O	O
none	O	O
of	O	O
the	O	O
items	O	O
in	O	O
the	O	O
"	O	O
removals	O	O
"	O	O
collection	O	O
will	O	O
be	O	O
in	O	O
the	O	O
original	O	O
set	O	O
.	O	O
I	O	O
specify	O	O
the	O	O
size	O	O
of	O	O
the	O	O
"	O	O
source	O	O
"	O	O
set	O	O
and	O	O
the	O	O
size	O	O
of	O	O
the	O	O
"	O	O
removals	O	O
"	O	O
collection	O	O
on	O	O
the	O	O
command	O	O
line	O	O
,	O	O
and	O	O
build	O	O
both	O	O
of	O	O
them	O	O
.	O	O
The	O	O
source	O	O
set	O	O
contains	O	O
only	O	O
non	O	O
-	O	O
negative	O	O
integers	O	O
;	O	O
the	O	O
removals	O	O
set	O	O
contains	O	O
only	O	O
negative	O	O
integers	O	O
.	O	O
I	O	O
measure	O	O
how	O	O
long	O	O
it	O	O
takes	O	O
to	O	O
remove	O	O
all	O	O
the	O	O
elements	O	O
using	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
isn	O	O
â€™	O	O
t	O	O
the	O	O
world	O	O
most	O	O
accurate	O	O
stopwatch	O	O
but	O	O
is	O	O
more	O	O
than	O	O
adequate	O	O
in	O	O
this	O	O
case	O	O
,	O	O
as	O	O
you	O	O
â€™	O	O
ll	O	O
see	O	O
.	O	O
Here	O	O
â€™	O	O
s	O	O
the	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Let	O	O
â€™	O	O
s	O	O
start	O	O
off	O	O
by	O	O
giving	O	O
it	O	O
an	O	O
easy	O	O
job	O	O
:	O	O
a	O	O
source	O	O
set	O	O
of	O	O
100	O	O
items	O	O
,	O	O
and	O	O
100	O	O
to	O	O
remove	O	O
:	O	O
#	O	O
pre	O	O
Okay	O	O
,	O	O
That	O	O
'	O	O
s	O	O
fast	O	O
as	O	O
I	O	O
expected	O	O
.	O	O
Next	O	O
i	O	O
tried	O	O
source	O	O
of	O	O
one	O	O
million	O	O
items	O	O
and	O	O
300	O	O
,	O	O
000	O	O
items	O	O
to	O	O
remove	O	O
?	O	O
#	O	O
pre	O	O
That	O	O
still	O	O
seems	O	O
pretty	O	O
speedy	O	O
.	O	O
Now	O	O
make	O	O
it	O	O
a	O	O
bit	O	O
easier	O	O
â€“	O	O
300	O	O
,	O	O
000	O	O
source	O	O
items	O	O
and	O	O
300	O	O
,	O	O
000	O	O
removals	O	O
:	O	O
#	O	O
pre	O	O
Nearly	O	O
three	O	O
minutes	O	O
?	O	O
Really	O	O
confused	O	O
!	O	O
!	O	O
can	O	O
some	O	O
one	O	O
explain	O	O
why	O	O
this	O	O
is	O	O
happening	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
35264580	O	O
Main	O	O
difference	O	O
is	O	O
that	O	O
when	O	O
program	O	O
calls	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
a	O	O
new	O	O
Thread	B-api_mention	B-api_mention
is	O	O
created	O	O
and	O	O
code	O	O
inside	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
executed	O	O
in	O	O
new	O	O
Thread	B-api_mention	B-api_mention
while	O	O
if	O	O
you	O	O
call	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
directly	O	O
no	O	O
new	O	O
Thread	B-api_mention	B-api_mention
is	O	O
created	O	O
and	O	O
code	O	O
inside	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
execute	O	O
on	O	O
current	O	O
Thread	B-api_mention	B-api_mention
.	O	O
Another	O	O
difference	O	O
between	O	O
start	O	O
vs	O	O
run	O	O
in	O	O
Java	O	O
thread	O	O
is	O	O
that	O	O
you	O	O
can	O	O
not	O	O
call	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
twice	O	O
on	O	O
thread	O	O
object	O	O
.	O	O
once	O	O
started	O	O
,	O	O
second	O	O
call	O	O
of	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
throw	O	O
IllegalStateException	B-api_mention	B-api_mention
in	O	O
Java	O	O
while	O	O
you	O	O
can	O	O
call	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
twice	O	O
.	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16148647	O	O
Please	O	O
use	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
18723596	O	O
String	B-api_mention	B-api_mention
x	O	O
=	O	O
(	O	O
String	B-api_mention	B-api_mention
)	O	O
null	O	O
;	O	O
Why	O	O
there	O	O
is	O	O
no	O	O
exception	O	O
in	O	O
this	O	O
statement	O	O
?	O	O
#	O	O
pre	O	O
It	O	O
prints	O	O
null	O	O
.	O	O
But	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
should	O	O
throw	O	O
a	O	O
null	O	O
pointer	O	O
exception	O	O
.	O	O
Question	O	O
-	O	O
31202946	O	O
Why	O	O
was	O	O
the	O	O
Thread	B-api_mention	B-api_mention
class	O	O
implemented	O	O
as	O	O
a	O	O
regular	O	O
class	O	O
and	O	O
not	O	O
an	O	O
abstract	O	O
class	O	O
with	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
being	O	O
abstract	O	O
.	O	O
Will	O	O
it	O	O
possibly	O	O
introduce	O	O
any	O	O
problems	O	O
?	O	O
Or	O	O
does	O	O
it	O	O
have	O	O
any	O	O
use	O	O
in	O	O
being	O	O
this	O	O
way	O	O
?	O	O
Also	O	O
,	O	O
the	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
supposed	O	O
to	O	O
be	O	O
a	O	O
very	O	O
specific	O	O
method	O	O
whose	O	O
functionality	O	O
cannot	O	O
be	O	O
implemented	O	O
by	O	O
any	O	O
other	O	O
class	O	O
(	O	O
If	O	O
I	O	O
am	O	O
not	O	O
wrong	O	O
)	O	O
.	O	O
And	O	O
hence	O	O
I	O	O
guess	O	O
the	O	O
final	O	O
keyword	O	O
would	O	O
be	O	O
apt	O	O
for	O	O
this	O	O
more	O	O
than	O	O
any	O	O
other	O	O
method	O	O
.	O	O
But	O	O
I	O	O
am	O	O
able	O	O
to	O	O
override	O	O
this	O	O
method	O	O
and	O	O
use	O	O
it	O	O
as	O	O
I	O	O
like	O	O
,	O	O
#	O	O
pre	O	O
It	O	O
obviously	O	O
only	O	O
printed	O	O
,	O	O
#	O	O
blockquote	O	O
Is	O	O
there	O	O
any	O	O
use	O	O
in	O	O
overriding	O	O
other	O	O
than	O	O
confusing	O	O
the	O	O
engineer	O	O
replacing	O	O
you	O	O
?	O	O
If	O	O
not	O	O
,	O	O
why	O	O
was	O	O
the	O	O
method	O	O
not	O	O
declared	O	O
final	O	O
in	O	O
Thread	B-api_mention	B-api_mention
class	O	O
?	O	O
Question	O	O
-	O	O
9481865	O	O
,	O	O
answer	O	O
-	O	O
33093380	O	O
You	O	O
may	O	O
try	O	O
isReachable	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
InetAddress	B-api_mention	B-api_mention
class	O	O
to	O	O
figure	O	O
out	O	O
which	O	O
IP	O	O
address	O	O
is	O	O
your	O	O
real	O	O
publicly	O	O
available	O	O
IP	O	O
address	O	O
.	O	O
I	O	O
think	O	O
other	O	O
type	O	O
of	O	O
addresses	O	O
(	O	O
site	O	O
local	O	O
,	O	O
link	O	O
local	O	O
)	O	O
are	O	O
not	O	O
reachable	O	O
from	O	O
outside	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
21488056	O	O
,	O	O
answer	O	O
-	O	O
30506585	O	O
Predicate	B-api_mention	O
has	O	O
methods	O	O
and	O	O
,	O	O
or	O	O
and	O	O
negate	O	O
.	O	O
However	O	O
,	O	O
String	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
is	O	O
not	O	O
a	O	O
Predicate	B-api_mention	B-api_mention
.	O	O
It	O	O
could	O	O
as	O	O
well	O	O
be	O	O
Function	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
or	O	O
MyProprietaryClass	B-api_mention	B-api_mention
.	O	O
The	O	O
type	O	O
information	O	O
is	O	O
inferred	O	O
from	O	O
the	O	O
variable	O	O
or	O	O
the	O	O
call	O	O
.	O	O
So	O	O
,	O	O
you	O	O
need	O	O
to	O	O
cast	O	O
a	O	O
method	O	O
reference	O	O
explicitly	O	O
(	O	O
as	O	O
@	O	O
axtavt	O	O
mentioned	O	O
)	O	O
:	O	O
(	O	O
(	O	O
Predicate	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
String	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
)	O	I-api_mention
.	B-api_mention	I-api_mention
negate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
But	O	O
it	O	O
'	O	O
s	O	O
absolutely	O	O
ugly	O	O
and	O	O
Predicate	B-api_mention	B-api_mention
seems	O	O
to	O	O
use	O	O
lambdas	O	O
under	O	O
the	O	O
hood	O	O
anyway	O	O
.	O	O
So	O	O
I	O	O
think	O	O
you	O	O
are	O	O
better	O	O
off	O	O
writing	O	O
a	O	O
lambda	O	O
or	O	O
even	O	O
your	O	O
own	O	O
not	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
in	O	O
utility	O	O
,	O	O
static	O	O
import	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
28043703	O	O
As	O	O
others	O	O
have	O	O
noted	O	O
,	O	O
getting	O	O
the	O	O
hostname	O	O
based	O	O
on	O	O
DNS	O	O
resolution	O	O
is	O	O
unreliable	O	O
.	O	O
Since	O	O
this	O	O
question	O	O
is	O	O
unfortunately	O	O
still	O	O
relevant	O	O
in	O	O
2016	O	O
,	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
share	O	O
with	O	O
you	O	O
my	O	O
network	O	O
-	O	O
independent	O	O
solution	O	O
,	O	O
with	O	O
some	O	O
test	O	O
runs	O	O
on	O	O
different	O	O
systems	O	O
.	O	O
The	O	O
following	O	O
code	O	O
tries	O	O
to	O	O
do	O	O
the	O	O
following	O	O
:	O	O
#	O	O
li	O	O
On	O	O
Windows	O	O
#	O	O
li	O	O
Read	O	O
the	O	O
COMPUTERNAME	O	O
environment	O	O
variable	O	O
through	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
li	O	O
Execute	O	O
hostname	O	O
.	O	O
exe	O	O
and	O	O
read	O	O
the	O	O
response	O	O
#	O	O
li	O	O
On	O	O
Linux	O	O
#	O	O
li	O	O
Read	O	O
the	O	O
HOSTNAME	O	O
environment	O	O
variable	O	O
through	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Execute	O	O
hostname	O	O
and	O	O
read	O	O
the	O	O
response	O	O
#	O	O
li	O	O
Read	O	O
/	O	O
etc	O	O
/	O	O
hostname	O	O
(	O	O
to	O	O
do	O	O
this	O	O
I	O	O
'	O	O
m	O	O
executing	O	O
cat	O	O
since	O	O
the	O	O
snippet	O	O
already	O	O
contains	O	O
code	O	O
to	O	O
execute	O	O
and	O	O
read	O	O
.	O	O
Simply	O	O
reading	O	O
the	O	O
file	O	O
would	O	O
be	O	O
better	O	O
,	O	O
though	O	O
)	O	O
.	O	O
The	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Results	O	O
for	O	O
different	O	O
operating	O	O
systems	O	O
:	O	O
OpenSuse	O	O
13	O	O
.	O	O
1	O	O
#	O	O
pre	O	O
Ubuntu	O	O
14	O	O
.	O	O
04	O	O
LTS	O	O
This	O	O
one	O	O
is	O	O
kinda	O	O
strange	O	O
since	O	O
echo	O	O
$	O	O
HOSTNAME	O	O
returns	O	O
the	O	O
correct	O	O
hostname	O	O
,	O	O
but	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
:	O	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
According	O	O
to	O	O
legolas108	O	O
,	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
works	O	O
on	O	O
Ubuntu	O	O
14	O	O
.	O	O
04	O	O
if	O	O
you	O	O
run	O	O
export	O	O
HOSTNAME	O	O
before	O	O
executing	O	O
the	O	O
Java	O	O
code	O	O
.	O	O
Windows	O	O
7	O	O
#	O	O
pre	O	O
The	O	O
machine	O	O
names	O	O
have	O	O
been	O	O
replaced	O	O
but	O	O
I	O	O
kept	O	O
the	O	O
capitalization	O	O
and	O	O
structure	O	O
.	O	O
Note	O	O
the	O	O
extra	O	O
newline	O	O
when	O	O
executing	O	O
hostname	O	O
,	O	O
you	O	O
might	O	O
have	O	O
to	O	O
take	O	O
it	O	O
into	O	O
account	O	O
in	O	O
some	O	O
cases	O	O
.	O	O
Question	O	O
-	O	O
25850328	O	O
I	O	O
was	O	O
being	O	O
taught	O	O
that	O	O
Marker	B-api_mention	B-api_mention
interface	O	O
in	O	O
Java	O	O
is	O	O
an	O	O
empty	O	O
interface	O	O
and	O	O
is	O	O
used	O	O
to	O	O
signal	O	O
to	O	O
compiler	O	O
or	O	O
JVM	O	O
that	O	O
the	O	O
objects	O	O
of	O	O
the	O	O
class	O	O
implementing	O	O
this	O	O
interface	O	O
must	O	O
be	O	O
treated	O	O
in	O	O
a	O	O
special	O	O
way	O	O
,	O	O
like	O	O
serializing	O	O
,	O	O
cloning	O	O
,	O	O
etc	O	O
.	O	O
But	O	O
lately	O	O
I	O	O
have	O	O
learned	O	O
that	O	O
it	O	O
actually	O	O
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
the	O	O
compiler	O	O
or	O	O
the	O	O
JVM	O	O
.	O	O
For	O	O
example	O	O
,	O	O
in	O	O
case	O	O
of	O	O
Serializable	B-api_mention	B-api_mention
interface	O	O
the	O	O
method	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
ObjectOutputStream	B-api_mention	B-api_mention
does	O	O
something	O	O
like	O	O
instanceOf	B-api_mention	O
Serializable	I-api_mention	B-api_mention
to	O	O
detect	O	O
whether	O	O
the	O	O
class	O	O
implements	O	O
Serializable	B-api_mention	B-api_mention
&	O	O
throws	O	O
NotSerializableException	B-api_mention	B-api_mention
accordingly	O	O
.	O	O
Everything	O	O
is	O	O
handled	O	O
in	O	O
the	O	O
code	O	O
and	O	O
this	O	O
seems	O	O
to	O	O
be	O	O
a	O	O
design	O	O
-	O	O
pattern	O	O
so	O	O
I	O	O
think	O	O
we	O	O
can	O	O
define	O	O
our	O	O
own	O	O
marker	O	O
interfaces	O	O
.	O	O
Now	O	O
my	O	O
doubts	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
the	O	O
definition	O	O
of	O	O
a	O	O
marker	O	B-api_mention
interface	O	O
mentioned	O	O
above	O	O
in	O	O
1st	O	O
point	O	O
wrong	O	O
?	O	O
How	O	O
can	O	O
we	O	O
define	O	O
a	O	O
Marker	B-api_mention	B-api_mention
interface	O	O
then	O	O
?	O	O
#	O	O
li	O	O
And	O	O
instead	O	O
of	O	O
using	O	O
the	O	O
instanceOf	B-api_mention	O
operator	O	O
why	O	O
can	O	O
'	O	O
t	O	O
the	O	O
method	O	O
be	O	O
something	O	O
like	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
so	O	O
that	O	O
there	O	O
is	O	O
a	O	O
compile	O	O
-	O	O
time	O	O
type	O	O
checking	O	O
rather	O	O
than	O	O
runtime	O	O
?	O	O
#	O	O
li	O	O
How	O	O
are	O	O
Annotations	B-api_mention	B-api_mention
better	O	O
than	O	O
Marker	B-api_mention	B-api_mention
Interfaces	O	O
?	O	O
Question	O	O
-	O	O
20129762	O	O
,	O	O
answer	O	O
-	O	O
30548433	O	O
I	O	O
would	O	O
like	O	O
to	O	O
point	O	O
out	O	O
that	O	O
StreamEx	O	O
does	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
and	O	O
Stream	B-api_mention	B-api_mention
)	O	O
,	O	O
as	O	O
well	O	O
as	O	O
a	O	O
host	O	O
of	O	O
other	O	O
immensely	O	O
awesome	O	O
functionality	O	O
missing	O	O
from	O	O
Stream	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
19235606	O	O
I	O	O
am	O	O
having	O	O
trouble	O	O
understanding	O	O
the	O	O
Stream	B-api_mention	B-api_mention
interface	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
especially	O	O
where	O	O
it	O	O
has	O	O
to	O	O
do	O	O
with	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
Collector	B-api_mention	B-api_mention
interfaces	O	O
.	O	O
My	O	O
problem	O	O
is	O	O
that	O	O
I	O	O
simply	O	O
can	O	O
'	O	O
t	O	O
understand	O	O
yet	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
the	O	O
Collector	B-api_mention	B-api_mention
interfaces	O	O
,	O	O
and	O	O
as	O	O
a	O	O
result	O	O
the	O	O
Stream	B-api_mention	B-api_mention
interface	O	O
is	O	O
still	O	O
somewhat	O	O
obscure	O	O
to	O	O
me	O	O
.	O	O
What	O	O
exactly	O	O
is	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
a	O	O
Collector	B-api_mention	B-api_mention
,	O	O
and	O	O
how	O	O
can	O	O
I	O	O
use	O	O
them	O	O
?	O	O
If	O	O
I	O	O
am	O	O
willing	O	O
to	O	O
write	O	O
my	O	O
own	O	O
Spliterator	B-api_mention	B-api_mention
or	O	O
Collector	B-api_mention	B-api_mention
(	O	O
and	O	O
probably	O	O
my	O	O
own	O	O
Stream	B-api_mention	B-api_mention
in	O	O
that	O	O
process	O	O
)	O	O
,	O	O
what	O	O
should	O	O
I	O	O
do	O	O
and	O	O
not	O	O
do	O	O
?	O	O
I	O	O
read	O	O
some	O	O
examples	O	O
scattered	O	O
around	O	O
the	O	O
web	O	O
,	O	O
but	O	O
since	O	O
everything	O	O
here	O	O
is	O	O
stil	O	O
new	O	O
and	O	O
subject	O	O
to	O	O
changes	O	O
,	O	O
examples	O	O
and	O	O
tutorials	O	O
are	O	O
still	O	O
very	O	O
sparse	O	O
.	O	O
Question	O	O
-	O	O
31202946	O	O
,	O	O
answer	O	O
-	O	O
31203252	O	O
#	O	O
blockquote	O	O
This	O	O
question	O	O
actually	O	O
boils	O	O
down	O	O
to	O	O
the	O	O
fact	O	O
that	O	O
you	O	O
should	O	O
always	O	O
prefer	O	O
composition	O	O
over	O	O
inheritance	O	O
.	O	O
If	O	O
the	O	O
Thread	B-api_mention	B-api_mention
class	O	O
was	O	O
declared	O	O
as	O	O
abstract	O	O
,	O	O
the	O	O
language	O	O
would	O	O
have	O	O
to	O	O
provide	O	O
another	O	O
class	O	O
that	O	O
extended	O	O
from	O	O
it	O	O
which	O	O
programmers	O	O
could	O	O
use	O	O
to	O	O
create	O	O
a	O	O
Thread	B-api_mention	B-api_mention
.	O	O
Your	O	O
question	O	O
would	O	O
then	O	O
be	O	O
about	O	O
why	O	O
this	O	O
class	O	O
that	O	O
extends	O	O
from	O	O
Thread	B-api_mention	B-api_mention
is	O	O
not	O	O
abstract	O	O
.	O	O
If	O	O
the	O	O
language	O	O
did	O	O
not	O	O
provide	O	O
another	O	O
class	O	O
that	O	O
extends	O	O
from	O	O
Thread	B-api_mention	B-api_mention
,	O	O
programmers	O	O
would	O	O
have	O	O
to	O	O
create	O	O
their	O	O
own	O	O
class	O	O
that	O	O
extend	O	O
s	O	O
from	O	O
Thread	B-api_mention	B-api_mention
and	O	O
override	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
only	O	O
possible	O	O
explanation	O	O
I	O	O
can	O	O
give	O	O
is	O	O
that	O	O
the	O	O
developers	O	O
of	O	O
the	O	O
language	O	O
saw	O	O
some	O	O
use	O	O
-	O	O
cases	O	O
for	O	O
overriding	O	O
start	O	O
when	O	O
the	O	O
class	O	O
was	O	O
introduced	O	O
to	O	O
the	O	O
JDK	O	O
.	O	O
The	O	O
first	O	O
version	O	O
of	O	O
Java	O	O
that	O	O
I	O	O
used	O	O
was	O	O
1	O	O
.	O	O
5	O	O
and	O	O
I	O	O
personally	O	O
have	O	O
not	O	O
come	O	O
across	O	O
a	O	O
use	O	O
-	O	O
case	O	O
where	O	O
I	O	O
found	O	O
the	O	O
need	O	O
to	O	O
override	O	O
start	O	O
.	O	O
As	O	O
JB	O	O
Nizet	O	O
stated	O	O
in	O	O
his	O	O
answer	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
8189466	O	O
,	O	O
answer	O	O
-	O	O
23592535	O	O
I	O	O
had	O	O
that	O	O
same	O	O
problem	O	O
but	O	O
in	O	O
case	O	O
that	O	O
I	O	O
was	O	O
adding	O	O
en	O	O
element	O	O
into	O	O
iterated	O	O
list	O	O
.	O	O
I	O	O
made	O	O
it	O	O
this	O	O
way	O	O
#	O	O
pre	O	O
Now	O	O
everything	O	O
goes	O	O
fine	O	O
because	O	O
you	O	O
don	O	O
'	O	O
t	O	O
create	O	O
any	O	O
iterator	O	O
over	O	O
your	O	O
list	O	O
,	O	O
you	O	O
iterate	O	O
over	O	O
it	O	O
"	O	O
manually	O	O
"	O	O
.	O	O
And	O	O
condition	O	O
i	O	O
<	O	O
integerList	O	O
.	B-api_mention	B-api_mention
size	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
never	O	O
fool	O	O
you	O	O
because	O	O
when	O	O
you	O	O
remove	O	O
/	O	O
add	O	O
something	O	O
into	O	O
List	B-api_mention	B-api_mention
size	O	O
of	O	O
the	O	O
List	B-api_mention	B-api_mention
decrement	O	O
/	O	O
increment	O	O
.	O	O
.	O	O
Hope	O	O
it	O	O
helps	O	O
,	O	O
for	O	O
me	O	O
that	O	O
was	O	O
solution	O	O
.	O	O
Question	O	O
-	O	O
28681737	O	O
,	O	O
answer	O	O
-	O	O
28684917	O	O
The	O	O
short	O	O
answer	O	O
is	O	O
:	O	O
it	O	O
'	O	O
s	O	O
safe	O	O
if	O	O
you	O	O
use	O	O
them	O	O
safely	O	O
:	O	O
)	O	O
The	O	O
snarky	O	O
answer	O	O
:	O	O
tell	O	O
me	O	O
what	O	O
you	O	O
mean	O	O
by	O	O
traits	O	O
,	O	O
and	O	O
maybe	O	O
I	O	O
'	O	O
ll	O	O
give	O	O
you	O	O
a	O	O
better	O	O
answer	O	O
:	O	O
)	O	O
In	O	O
all	O	O
seriousness	O	O
,	O	O
the	O	O
term	O	O
"	O	O
trait	O	O
"	O	O
is	O	O
not	O	O
well	O	O
-	O	O
defined	O	O
.	O	O
Many	O	O
Java	O	O
developers	O	O
are	O	O
most	O	O
familiar	O	O
with	O	O
traits	O	O
as	O	O
they	O	O
are	O	O
expressed	O	O
in	O	O
Scala	O	O
,	O	O
but	O	O
Scala	O	O
is	O	O
far	O	O
from	O	O
the	O	O
first	O	O
language	O	O
to	O	O
have	O	O
traits	O	O
,	O	O
either	O	O
in	O	O
name	O	O
or	O	O
in	O	O
effect	O	O
.	O	O
For	O	O
example	O	O
,	O	O
in	O	O
Scala	O	O
,	O	O
traits	O	O
are	O	O
stateful	O	O
(	O	O
can	O	O
have	O	O
var	O	O
variables	O	O
)	O	O
;	O	O
in	O	O
Fortress	O	O
they	O	O
are	O	O
pure	O	O
behavior	O	O
.	O	O
Java	O	O
'	O	O
s	O	O
interfaces	O	O
with	O	O
default	O	O
methods	O	O
are	O	O
stateless	O	O
;	O	O
does	O	O
this	O	O
mean	O	O
they	O	O
are	O	O
not	O	O
traits	O	O
?	O	O
(	O	O
Hint	O	O
:	O	O
that	O	O
was	O	O
a	O	O
trick	O	O
question	O	O
.	O	O
)	O	O
Again	O	O
,	O	O
in	O	O
Scala	O	O
,	O	O
traits	O	O
are	O	O
composed	O	O
through	O	O
linearization	O	O
;	O	O
if	O	O
class	O	O
A	O	O
extends	O	O
traits	O	O
X	O	O
and	O	O
Y	O	O
,	O	O
then	O	O
the	O	O
order	O	O
in	O	O
which	O	O
X	O	O
and	O	O
Y	O	O
are	O	O
mixed	O	O
in	O	O
determines	O	O
how	O	O
conflicts	O	O
between	O	O
X	O	O
and	O	O
Y	O	O
are	O	O
resolved	O	O
.	O	O
In	O	O
Java	O	O
,	O	O
this	O	O
linearization	O	O
mechanism	O	O
is	O	O
not	O	O
present	O	O
(	O	O
it	O	O
was	O	O
rejected	O	O
,	O	O
in	O	O
part	O	O
,	O	O
because	O	O
it	O	O
was	O	O
too	O	O
"	O	O
un	O	O
-	O	O
Java	O	O
-	O	O
like	O	O
"	O	O
.	O	O
)	O	O
The	O	O
proximate	O	O
reason	O	O
for	O	O
adding	O	O
default	O	O
methods	O	O
to	O	O
interfaces	O	O
was	O	O
to	O	O
support	O	O
interface	O	O
evolution	O	O
,	O	O
but	O	O
we	O	O
were	O	O
well	O	O
aware	O	O
that	O	O
we	O	O
were	O	O
going	O	O
beyond	O	O
that	O	O
.	O	O
Whether	O	O
you	O	O
consider	O	O
that	O	O
to	O	O
be	O	O
"	O	O
interface	O	O
evolution	O	O
+	O	O
+	O	O
"	O	O
or	O	O
"	O	O
traits	O	O
-	O	O
-	O	O
"	O	O
is	O	O
a	O	O
matter	O	O
of	O	O
personal	O	O
interpretation	O	O
.	O	O
So	O	O
,	O	O
to	O	O
answer	O	O
your	O	O
question	O	O
about	O	O
safety	O	O
.	O	O
.	O	O
.	O	O
so	O	O
long	O	O
as	O	O
you	O	O
stick	O	O
to	O	O
what	O	O
the	O	O
mechanism	O	O
actually	O	O
supports	O	O
,	O	O
rather	O	O
than	O	O
trying	O	O
to	O	O
wishfully	O	O
stretch	O	O
it	O	O
to	O	O
something	O	O
it	O	O
does	O	O
not	O	O
support	O	O
,	O	O
you	O	O
should	O	O
be	O	O
fine	O	O
.	O	O
A	O	O
key	O	O
design	O	O
goal	O	O
was	O	O
that	O	O
,	O	O
from	O	O
the	O	O
perspective	O	O
of	O	O
the	O	O
client	O	O
of	O	O
an	O	O
interface	O	O
,	O	O
default	O	O
methods	O	O
should	O	O
be	O	O
indistinguishable	O	O
from	O	O
"	O	O
regular	O	O
"	O	O
interface	O	O
methods	O	O
.	O	O
The	O	O
default	O	O
-	O	O
ness	O	O
of	O	O
a	O	O
method	O	O
,	O	O
therefore	O	O
,	O	O
is	O	O
only	O	O
interesting	O	O
to	O	O
the	O	O
designer	O	O
and	O	O
implementor	O	O
of	O	O
the	O	O
interface	O	O
.	O	O
Here	O	O
are	O	O
some	O	O
use	O	O
cases	O	O
that	O	O
are	O	O
well	O	O
within	O	O
the	O	O
design	O	O
goals	O	O
:	O	O
#	O	O
li	O	O
Interface	O	O
evolution	O	O
.	O	O
Here	O	O
,	O	O
we	O	O
are	O	O
adding	O	O
a	O	O
new	O	O
method	O	O
to	O	O
an	O	O
existing	O	O
interface	O	O
,	O	O
which	O	O
has	O	O
a	O	O
sensible	O	O
default	O	O
implementation	O	O
in	O	O
terms	O	O
of	O	O
existing	O	O
methods	O	O
on	O	O
that	O	O
interface	O	O
.	O	O
An	O	O
example	O	O
would	O	O
be	O	O
adding	O	O
the	O	O
forEach	B-api_mention	B-api_mention
method	O	O
to	O	O
Collection	B-api_mention	B-api_mention
,	O	O
where	O	O
the	O	O
default	O	O
implementation	O	O
is	O	O
written	O	O
in	O	O
terms	O	O
of	O	O
the	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
li	O	O
"	O	O
Optional	O	O
"	O	O
methods	O	O
.	O	O
Here	O	O
,	O	O
the	O	O
designer	O	O
of	O	O
an	O	O
interface	O	O
is	O	O
saying	O	O
"	O	O
Implementors	O	O
need	O	O
not	O	O
implement	O	O
this	O	O
method	O	O
if	O	O
they	O	O
are	O	O
willing	O	O
to	O	O
live	O	O
with	O	O
the	O	O
limitations	O	O
in	O	O
functionality	O	O
that	O	O
entails	O	O
"	O	O
.	O	O
For	O	O
example	O	O
,	O	O
Iterator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
was	O	O
given	O	O
a	O	O
default	O	O
which	O	O
throws	O	O
UnsupportedOperationException	B-api_mention	B-api_mention
;	O	O
since	O	O
the	O	O
vast	O	O
majority	O	O
of	O	O
implementations	O	O
of	O	O
Iterator	O	B-api_mention
have	O	O
this	O	O
behavior	O	O
anyway	O	O
,	O	O
the	O	O
default	O	O
makes	O	O
this	O	O
method	O	O
essentially	O	O
optional	O	O
.	O	O
(	O	O
If	O	O
the	O	O
behavior	O	O
from	O	O
AbstractCollection	B-api_mention	B-api_mention
were	O	O
expressed	O	O
as	O	O
defaults	O	O
on	O	O
Collection	B-api_mention	B-api_mention
,	O	O
we	O	O
might	O	O
do	O	O
the	O	O
same	O	O
for	O	O
the	O	O
mutative	O	O
methods	O	O
.	O	O
)	O	O
#	O	O
li	O	O
Convenience	O	O
methods	O	O
.	O	O
These	O	O
are	O	O
methods	O	O
that	O	O
are	O	O
strictly	O	O
for	O	O
convenience	O	O
,	O	O
again	O	O
generally	O	O
implemented	O	O
in	O	O
terms	O	O
of	O	O
non	O	O
-	O	O
default	O	O
methods	O	O
on	O	O
the	O	O
class	O	O
.	O	O
The	O	O
logger	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
your	O	O
first	O	O
example	O	O
is	O	O
a	O	O
reasonable	O	O
illustration	O	O
of	O	O
this	O	O
.	O	O
#	O	O
li	O	O
Combinators	O	O
.	O	O
These	O	O
are	O	O
compositional	O	O
methods	O	O
that	O	O
instantiate	O	O
new	O	O
instances	O	O
of	O	O
the	O	O
interface	O	O
based	O	O
on	O	O
the	O	O
current	O	O
instance	O	O
.	O	O
For	O	O
example	O	O
,	O	O
the	O	O
methods	O	O
Predicate	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
and	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Comparator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
thenComparing	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
examples	O	O
of	O	O
combinators	O	O
.	O	O
If	O	O
you	O	O
provide	O	O
a	O	O
default	O	O
implementation	O	O
,	O	O
you	O	O
should	O	O
also	O	O
provide	O	O
some	O	O
specification	O	O
for	O	O
the	O	O
default	O	O
(	O	O
in	O	O
the	O	O
JDK	O	O
,	O	O
we	O	O
use	O	O
the	O	O
@	O	O
implSpec	O	O
javadoc	O	O
tag	O	O
for	O	O
this	O	O
)	O	O
to	O	O
aid	O	O
implementors	O	O
in	O	O
understanding	O	O
whether	O	O
they	O	O
want	O	O
to	O	O
override	O	O
the	O	O
method	O	O
or	O	O
not	O	O
.	O	O
Some	O	O
defaults	O	O
,	O	O
like	O	O
convenience	O	O
methods	O	O
and	O	O
combinators	O	O
,	O	O
are	O	O
almost	O	O
never	O	O
overridden	O	O
;	O	O
others	O	O
,	O	O
like	O	O
optional	O	O
methods	O	O
,	O	O
are	O	O
often	O	O
overridden	O	O
.	O	O
You	O	O
need	O	O
to	O	O
provide	O	O
enough	O	O
specification	O	O
(	O	O
not	O	O
just	O	O
documentation	O	O
)	O	O
about	O	O
what	O	O
the	O	O
default	O	O
promises	O	O
to	O	O
do	O	O
,	O	O
so	O	O
the	O	O
implementor	O	O
can	O	O
make	O	O
a	O	O
sensible	O	O
decision	O	O
about	O	O
whether	O	O
they	O	O
need	O	O
to	O	O
override	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
14846920	O	O
What	O	O
are	O	O
some	O	O
of	O	O
the	O	O
situations	O	O
where	O	O
I	O	O
can	O	O
use	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
emptyMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
The	O	O
Documentation	O	O
says	O	O
I	O	O
can	O	O
use	O	O
this	O	O
method	O	O
if	O	O
I	O	O
want	O	O
my	O	O
collection	O	O
to	O	O
be	O	O
immutable	O	O
.	O	O
Why	O	O
would	O	O
I	O	O
want	O	O
an	O	O
immutable	O	O
empty	O	O
collection	O	O
?	O	O
What	O	O
is	O	O
the	O	O
point	O	O
?	O	O
Question	O	O
-	O	O
16159203	O	O
,	O	O
answer	O	O
-	O	O
18258659	O	O
You	O	O
have	O	O
ordinary	O	O
memory	O	O
,	O	O
the	O	O
'	O	O
currentpos	O	O
'	O	O
reference	O	O
and	O	O
the	O	O
Point	B-api_mention	O
object	O	O
and	O	O
its	O	O
fields	O	O
behind	O	O
it	O	O
,	O	O
shared	O	O
between	O	O
2	O	O
threads	O	O
,	O	O
without	O	O
synchronisation	O	O
.	O	O
Thus	O	O
,	O	O
there	O	O
is	O	O
no	O	O
defined	O	O
ordering	O	O
between	O	O
the	O	O
writes	O	O
that	O	O
happen	O	O
to	O	O
this	O	O
memory	O	O
in	O	O
the	O	O
main	O	O
thread	O	O
and	O	O
the	O	O
reads	O	O
in	O	O
the	O	O
created	O	O
thread	O	O
(	O	O
call	O	O
it	O	O
T	O	O
)	O	O
.	O	O
Main	O	O
thread	O	O
is	O	O
doing	O	O
the	O	O
following	O	O
writes	O	O
(	O	O
ignoring	O	O
the	O	O
initial	O	O
setup	O	O
of	O	O
point	O	O
,	O	O
will	O	O
result	O	O
in	O	O
p	O	O
.	O	O
x	O	O
and	O	O
p	O	O
.	O	O
y	O	O
having	O	O
default	O	O
values	O	O
)	O	O
:	O	O
#	O	O
li	O	O
to	O	O
p	O	O
.	O	O
x	O	O
#	O	O
li	O	O
to	O	O
p	O	O
.	O	O
y	O	O
#	O	O
li	O	O
to	O	O
currentpos	O	O
Because	O	O
there	O	O
is	O	O
nothing	O	O
special	O	O
about	O	O
these	O	O
writes	O	O
in	O	O
terms	O	O
of	O	O
synchronisation	O	O
/	O	O
barriers	O	O
,	O	O
the	O	O
runtime	O	O
is	O	O
free	O	O
to	O	O
allow	O	O
the	O	O
T	O	O
thread	O	O
see	O	O
them	O	O
occur	O	O
in	O	O
any	O	O
order	O	O
(	O	O
the	O	O
main	O	O
thread	O	O
of	O	O
course	O	O
always	O	O
sees	O	O
writes	O	O
and	O	O
reads	O	O
ordered	O	O
according	O	O
to	O	O
programme	O	O
order	O	O
)	O	O
,	O	O
and	O	O
occur	O	O
at	O	O
any	O	O
point	O	O
between	O	O
the	O	O
reads	O	O
in	O	O
T	O	O
.	O	O
So	O	O
T	O	O
is	O	O
doing	O	O
:	O	O
#	O	O
li	O	O
reads	O	O
currentpos	O	O
to	O	O
p	O	O
#	O	O
li	O	O
read	O	O
p	O	O
.	O	O
x	O	O
and	O	O
p	O	O
.	O	O
y	O	O
(	O	O
in	O	O
either	O	O
order	O	O
)	O	O
#	O	O
li	O	O
compare	O	O
,	O	O
and	O	O
take	O	O
the	O	O
branch	O	O
#	O	O
li	O	O
read	O	O
p	O	O
.	O	O
x	O	O
and	O	O
p	O	O
.	O	O
y	O	O
(	O	O
either	O	O
order	O	O
)	O	O
and	O	O
call	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
Given	O	O
there	O	O
'	O	O
s	O	O
no	O	O
ordering	O	O
relationships	O	O
between	O	O
the	O	O
writes	O	O
in	O	O
main	O	O
,	O	O
and	O	O
the	O	O
reads	O	O
in	O	O
T	O	O
,	O	O
there	O	O
are	O	O
clearly	O	O
several	O	O
ways	O	O
this	O	O
can	O	O
produce	O	O
your	O	O
result	O	O
,	O	O
as	O	O
T	O	O
may	O	O
see	O	O
main	O	O
'	O	O
s	O	O
write	O	O
to	O	O
currentpos	O	O
before	O	O
the	O	O
writes	O	O
to	O	O
currentpos	O	O
.	O	O
y	O	O
or	O	O
currentpos	O	O
.	O	O
x	O	O
:	O	O
#	O	O
li	O	O
It	O	O
reads	O	O
currentpos	O	O
.	O	O
x	O	O
first	O	O
,	O	O
before	O	O
the	O	O
x	O	O
write	O	O
has	O	O
occurred	O	O
-	O	O
gets	O	O
0	O	O
,	O	O
then	O	O
reads	O	O
currentpos	O	O
.	O	O
y	O	O
before	O	O
the	O	O
y	O	O
write	O	O
has	O	O
occurred	O	O
-	O	O
gets	O	O
0	O	O
.	O	O
Compare	O	O
evals	O	O
to	O	O
true	O	O
.	O	O
The	O	O
writes	O	O
become	O	O
visible	O	O
to	O	O
T	O	O
.	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
is	O	O
called	O	O
.	O	O
#	O	O
li	O	O
It	O	O
reads	O	O
currentpos	O	O
.	O	O
x	O	O
first	O	O
,	O	O
after	O	O
the	O	O
x	O	O
write	O	O
has	O	O
occurred	O	O
,	O	O
then	O	O
reads	O	O
currentpos	O	O
.	O	O
y	O	O
before	O	O
the	O	O
y	O	O
write	O	O
has	O	O
occurred	O	O
-	O	O
gets	O	O
0	O	O
.	O	O
Compare	O	O
evals	O	O
to	O	O
true	O	O
.	O	O
Writes	O	O
become	O	O
visible	O	O
to	O	O
T	O	O
.	O	O
.	O	O
.	O	O
etc	O	O
.	O	O
#	O	O
li	O	O
It	O	O
reads	O	O
currentpos	O	O
.	O	O
y	O	O
first	O	O
,	O	O
before	O	O
the	O	O
y	O	O
write	O	O
has	O	O
occurred	O	O
(	O	O
0	O	O
)	O	O
,	O	O
then	O	O
reads	O	O
currentpos	O	O
.	O	O
x	O	O
after	O	O
the	O	O
x	O	O
write	O	O
,	O	O
evals	O	O
to	O	O
true	O	O
.	O	O
etc	O	O
.	O	O
and	O	O
so	O	O
on	O	O
.	O	O
.	O	O
.	O	O
There	O	O
are	O	O
a	O	O
number	O	O
of	O	O
data	O	O
races	O	O
here	O	O
.	O	O
I	O	O
suspect	O	O
the	O	O
flawed	O	O
assumption	O	O
here	O	O
is	O	O
thinking	O	O
that	O	O
the	O	O
writes	O	O
that	O	O
result	O	O
from	O	O
this	O	O
line	O	O
are	O	O
made	O	O
visible	O	O
across	O	O
all	O	O
the	O	O
threads	O	O
in	O	O
the	O	O
programme	O	O
order	O	O
of	O	O
the	O	O
thread	O	O
executing	O	O
it	O	O
:	O	O
currentPos	O	O
=	O	O
new	O	O
Point	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Java	O	O
makes	O	O
no	O	O
such	O	O
guarantee	O	O
(	O	O
it	O	O
'	O	O
d	O	O
be	O	O
terrible	O	O
for	O	O
performance	O	O
)	O	O
.	O	O
Something	O	O
more	O	O
must	O	O
be	O	O
added	O	O
if	O	O
your	O	O
programme	O	O
needs	O	O
a	O	O
guaranteed	O	O
ordering	O	O
of	O	O
the	O	O
writes	O	O
relative	O	O
to	O	O
reads	O	O
in	O	O
other	O	O
threads	O	O
.	O	O
Others	O	O
have	O	O
suggested	O	O
making	O	O
the	O	O
x	O	O
,	O	O
y	O	O
fields	O	O
final	O	O
,	O	O
or	O	O
alternatively	O	O
making	O	O
currentpos	O	O
volatile	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
make	O	O
the	O	O
x	O	O
,	O	O
y	O	O
fields	O	O
final	O	O
,	O	O
then	O	O
Java	O	O
guarantees	O	O
that	O	O
the	O	O
writes	O	O
of	O	O
their	O	O
values	O	O
will	O	O
be	O	O
seen	O	O
to	O	O
occur	O	O
before	O	O
the	O	O
constructor	O	O
returns	O	O
,	O	O
in	O	O
all	O	O
threads	O	O
.	O	O
Thus	O	O
,	O	O
as	O	O
the	O	O
assignment	O	O
to	O	O
currentpos	O	O
is	O	O
after	O	O
the	O	O
constructor	O	O
,	O	O
the	O	O
T	O	O
thread	O	O
is	O	O
guaranteed	O	O
to	O	O
see	O	O
the	O	O
writes	O	O
in	O	O
the	O	O
correct	O	O
order	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
make	O	O
currentpos	O	O
volatile	O	O
,	O	O
then	O	O
Java	O	O
guarantees	O	O
that	O	O
that	O	O
this	O	O
is	O	O
a	O	O
synchronisation	O	O
point	O	O
which	O	O
will	O	O
be	O	O
total	O	O
-	O	O
ordered	O	O
wrt	O	O
other	O	O
synchronisation	O	O
points	O	O
.	O	O
As	O	O
in	O	O
main	O	O
the	O	O
writes	O	O
to	O	O
x	O	O
and	O	O
y	O	O
must	O	O
happen	O	O
before	O	O
the	O	O
write	O	O
to	O	O
currentpos	O	O
,	O	O
then	O	O
any	O	O
read	O	O
of	O	O
currentpos	O	O
in	O	O
another	O	O
thread	O	O
must	O	O
see	O	O
also	O	O
the	O	O
writes	O	O
of	O	O
x	O	O
,	O	O
y	O	O
that	O	O
happened	O	O
before	O	O
.	O	O
Using	O	O
final	O	O
has	O	O
the	O	O
advantage	O	O
that	O	O
it	O	O
makes	O	O
the	O	O
fields	O	O
immutable	O	O
,	O	O
and	O	O
thus	O	O
allows	O	O
the	O	O
values	O	O
to	O	O
be	O	O
cached	O	O
.	O	O
Using	O	O
volatile	O	O
leads	O	O
to	O	O
synchronisation	O	O
on	O	O
every	O	O
write	O	O
and	O	O
read	O	O
of	O	O
currentpos	O	O
,	O	O
which	O	O
might	O	O
hurt	O	O
performance	O	O
.	O	O
See	O	O
chapter	O	O
17	O	O
of	O	O
the	O	O
Java	O	O
Language	O	O
Spec	O	O
for	O	O
the	O	O
gory	O	O
details	O	O
:	O	O
#	O	O
a	O	O
(	O	O
Initial	O	O
answer	O	O
assumed	O	O
a	O	O
weaker	O	O
memory	O	O
model	O	O
,	O	O
as	O	O
I	O	O
was	O	O
not	O	O
sure	O	O
the	O	O
JLS	O	O
guaranteed	O	O
volatile	O	O
was	O	O
sufficient	O	O
.	O	O
Answer	O	O
edited	O	O
to	O	O
reflect	O	O
comment	O	O
from	O	O
assylias	O	O
,	O	O
pointing	O	O
out	O	O
the	O	O
Java	O	O
model	O	O
is	O	O
stronger	O	O
-	O	O
happens	O	O
-	O	O
before	O	O
is	O	O
transitive	O	O
-	O	O
and	O	O
so	O	O
volatile	O	O
on	O	O
currentpos	O	O
also	O	O
suffices	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
15156857	O	O
,	O	O
answer	O	O
-	O	O
15157021	O	O
You	O	O
must	O	O
use	O	O
doThrow	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
methodReturningVoid	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
not	O	O
doThrow	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
explained	O	O
in	O	O
the	O	O
documentation	O	O
Question	O	O
-	O	O
18410035	O	O
Being	O	O
somewhat	O	O
new	O	O
to	O	O
the	O	O
Java	O	O
language	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
familiarize	O	O
myself	O	O
with	O	O
all	O	O
the	O	O
ways	O	O
(	O	O
or	O	O
at	O	O
least	O	O
the	O	O
non	O	O
-	O	O
pathological	O	O
ones	O	O
)	O	O
that	O	O
one	O	O
might	O	O
iterate	O	O
through	O	O
a	O	O
list	O	O
(	O	O
or	O	O
perhaps	O	O
other	O	O
collections	O	O
)	O	O
and	O	O
the	O	O
advantages	O	O
or	O	O
disadvantages	O	O
of	O	O
each	O	O
.	O	O
Given	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
object	O	O
,	O	O
I	O	O
know	O	O
of	O	O
the	O	O
following	O	O
ways	O	O
to	O	O
loop	O	O
through	O	O
all	O	O
elements	O	O
:	O	O
Basic	O	O
for	O	O
loop	O	O
(	O	O
of	O	O
course	O	O
,	O	O
there	O	O
'	O	O
re	O	O
equivalent	O	O
while	O	O
/	O	O
do	O	O
while	O	O
loops	O	O
as	O	O
well	O	O
)	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
As	O	O
@	O	O
amarseillan	O	O
pointed	O	O
out	O	O
,	O	O
this	O	O
form	O	O
is	O	O
a	O	O
poor	O	O
choice	O	O
for	O	O
iterating	O	O
over	O	O
List	B-api_mention	B-api_mention
s	O	O
because	O	O
the	O	O
actual	O	O
implementation	O	O
of	O	O
the	O	O
get	O	O
method	O	O
may	O	O
not	O	O
be	O	O
as	O	O
efficient	O	O
as	O	O
when	O	O
using	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
.	O	O
For	O	O
example	O	O
,	O	O
LinkedList	B-api_mention	B-api_mention
implementations	O	O
must	O	O
traverse	O	O
all	O	O
of	O	O
the	O	O
elements	O	O
preceding	O	O
i	O	O
to	O	O
get	O	O
the	O	O
i	O	O
-	O	O
th	O	O
element	O	O
.	O	O
In	O	O
the	O	O
above	O	O
example	O	O
there	O	O
'	O	O
s	O	O
no	O	O
way	O	O
for	O	O
the	O	O
List	B-api_mention	B-api_mention
implementation	O	O
to	O	O
"	O	O
save	O	O
its	O	O
place	O	O
"	O	O
to	O	O
make	O	O
future	O	O
iterations	O	O
more	O	O
efficient	O	O
.	O	O
For	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
it	O	O
doesn	O	O
'	O	O
t	O	O
really	O	O
matter	O	O
because	O	O
the	O	O
complexity	O	O
/	O	O
cost	O	O
of	O	O
get	O	O
is	O	O
constant	O	O
time	O	O
(	O	O
O	O	O
(	O	O
1	O	O
)	O	O
)	O	O
whereas	O	O
for	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
is	O	O
it	O	O
proportional	O	O
to	O	O
the	O	O
size	O	O
of	O	O
the	O	O
list	O	O
(	O	O
O	O	O
(	O	O
n	O	O
)	O	O
)	O	O
.	O	O
For	O	O
more	O	O
information	O	O
about	O	O
the	O	O
computational	O	O
complexity	O	O
of	O	O
the	O	O
built	O	O
-	O	O
in	O	O
Collections	B-api_mention	B-api_mention
implementations	O	O
,	O	O
check	O	O
out	O	O
this	O	O
question	O	O
.	O	O
Enhanced	O	O
for	O	O
loop	O	O
(	O	O
nicely	O	O
explained	O	O
in	O	O
this	O	O
question	O	O
)	O	O
#	O	O
pre	O	O
Iterator	B-api_mention	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
Added	O	O
ListIterator	B-api_mention	B-api_mention
ListIterator	I-api_mention	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
Added	O	O
"	O	O
functional	O	O
-	O	O
style	O	O
"	O	O
solution	O	O
(	O	O
thanks	O	O
Dave	O	O
Newton	O	O
)	O	O
Functional	O	O
Java	O	O
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
can	O	O
apply	O	O
a	O	O
transformation	O	O
function	O	O
for	O	O
e	O	O
EDIT	O	O
:	O	O
Added	O	O
map	O	O
method	O	O
from	O	O
Java	O	O
8	O	O
'	O	O
s	O	O
Stream	O	B-api_mention
API	O	O
(	O	O
see	O	O
@	O	O
i	O	O
_	O	O
am	O	O
_	O	O
zero	O	O
'	O	O
s	O	O
answer	O	O
)	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
.	O	O
.	O	O
.	O	O
In	O	O
Java	O	O
8	O	O
collection	O	O
classes	O	O
that	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
for	O	O
example	O	O
all	O	O
List	B-api_mention	B-api_mention
s	O	O
)	O	O
now	O	O
have	O	O
a	O	O
forEach	B-api_mention	B-api_mention
method	O	O
,	O	O
which	O	O
can	O	O
be	O	O
used	O	O
instead	O	O
of	O	O
the	O	O
for	O	O
loop	O	O
statement	O	O
demonstrated	O	O
above	O	O
.	O	O
(	O	O
Here	O	O
is	O	O
another	O	O
question	O	O
that	O	O
provides	O	O
a	O	O
good	O	O
comparison	O	O
.	O	O
)	O	O
#	O	O
pre	O	O
What	O	O
other	O	O
ways	O	O
are	O	O
there	O	O
,	O	O
if	O	O
any	O	O
?	O	O
I	O	O
feel	O	O
like	O	O
this	O	O
has	O	O
got	O	O
to	O	O
be	O	O
a	O	O
duplicate	O	O
,	O	O
but	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
been	O	O
able	O	O
to	O	O
find	O	O
what	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
,	O	O
so	O	O
I	O	O
apologize	O	O
for	O	O
this	O	O
question	O	O
potentially	O	O
being	O	O
redundant	O	O
.	O	O
(	O	O
BTW	O	O
,	O	O
my	O	O
interest	O	O
does	O	O
not	O	O
stem	O	O
at	O	O
all	O	O
from	O	O
a	O	O
desire	O	O
to	O	O
optimize	O	O
performance	O	O
;	O	O
I	O	O
just	O	O
want	O	O
to	O	O
know	O	O
what	O	O
forms	O	O
are	O	O
available	O	O
to	O	O
me	O	O
as	O	O
a	O	O
developer	O	O
.	O	O
)	O	O
EDIT	O	O
:	O	O
Moved	O	O
ListIterationExample	O	O
.	O	O
java	O	O
to	O	O
a	O	O
suggested	O	O
answer	O	O
Question	O	O
-	O	O
32323081	O	O
,	O	O
answer	O	O
-	O	O
32323641	O	O
First	O	O
of	O	O
all	O	O
,	O	O
you	O	O
don	O	O
'	O	O
have	O	O
to	O	O
overload	O	O
:	O	O
D	O	O
-	O	O
overloading	O	O
is	O	O
never	O	O
a	O	O
necessity	O	O
;	O	O
use	O	O
2	O	O
different	O	O
method	O	O
names	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
foo	O	O
and	O	O
fooX	O	O
Secondly	O	O
,	O	O
I	O	O
don	O	O
'	O	O
t	O	O
see	O	O
why	O	O
you	O	O
need	O	O
2	O	O
methods	O	O
here	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
handle	O	O
checked	O	O
and	O	O
unchecked	O	O
exceptions	O	O
differently	O	O
,	O	O
it	O	O
can	O	O
be	O	O
done	O	O
at	O	O
runtime	O	O
.	O	O
To	O	O
achieve	O	O
"	O	O
exception	O	O
transparency	O	O
"	O	O
,	O	O
you	O	O
can	O	O
do	O	O
#	O	O
pre	O	O
Finally	O	O
,	O	O
disambiguity	O	O
can	O	O
be	O	O
achieved	O	O
throw	O	O
lambda	O	O
return	O	O
type	O	O
;	O	O
the	O	O
compiler	O	O
uses	O	O
the	O	O
return	O	O
type	O	O
as	O	O
if	O	O
using	O	O
an	O	O
argument	O	O
type	O	O
for	O	O
choosing	O	O
the	O	O
most	O	O
specific	O	O
method	O	O
.	O	O
This	O	O
gives	O	O
us	O	O
the	O	O
idea	O	O
to	O	O
wrap	O	O
the	O	O
value	O	O
together	O	O
with	O	O
the	O	O
exception	O	O
type	O	O
,	O	O
as	O	O
Result	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
,	O	O
a	O	O
"	O	O
monad	O	O
"	O	O
as	O	O
they	O	O
say	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
24885223	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
I	O	O
am	O	O
asking	O	O
the	O	O
right	O	O
question	O	O
.	O	O
I	O	O
was	O	O
exploring	O	O
RecyclerView	B-api_mention	B-api_mention
and	O	O
I	O	O
was	O	O
surprised	O	O
to	O	O
see	O	O
that	O	O
RecyclerView	B-api_mention	B-api_mention
does	O	O
not	O	O
have	O	O
onItemClickListener	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Because	O	O
RecyclerView	B-api_mention	O
extends	O	O
#	O	O
blockquote	O	O
and	O	O
ListView	B-api_mention	B-api_mention
extends	O	O
#	O	O
blockquote	O	O
.	O	O
However	O	O
I	O	O
solved	O	O
my	O	O
problem	O	O
by	O	O
writing	O	O
onClick	B-api_mention	O
in	O	O
my	O	O
RecyclerView	B-api_mention	B-api_mention
.	I-api_mention	O
Adapter	I-api_mention	O
:	O	O
#	O	O
pre	O	O
But	O	O
still	O	O
I	O	O
want	O	O
to	O	O
know	O	O
why	O	O
Google	O	O
removed	O	O
onItemClickListener	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Is	O	O
there	O	O
a	O	O
performance	O	O
issue	O	O
or	O	O
something	O	O
else	O	O
?	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
34073047	O	O
Another	O	O
option	O	O
is	O	O
to	O	O
use	O	O
Apache	O	O
Commons	O	O
StrBuilder	B-api_mention	B-api_mention
,	O	O
which	O	O
has	O	O
the	O	O
functionality	O	O
that	O	O
'	O	O
s	O	O
lacking	O	O
in	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
StrBuilder	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
appendLn	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
5374311	O	O
,	O	O
answer	O	O
-	O	O
17909839	O	O
The	O	O
correct	O	O
way	O	O
to	O	O
do	O	O
this	O	O
is	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stock	O	O
_	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
add	O	O
to	O	O
the	O	O
other	O	O
great	O	O
answers	O	O
here	O	O
and	O	O
explain	O	O
how	O	O
you	O	O
could	O	O
have	O	O
used	O	O
the	O	O
Javadocs	O	O
to	O	O
answer	O	O
your	O	O
question	O	O
.	O	O
The	O	O
Javadoc	O	O
for	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
no	O	O
arguments	O	O
)	O	O
is	O	O
here	O	O
.	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
this	O	O
method	O	O
returns	O	O
an	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
and	O	O
not	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
which	O	O
is	O	O
an	O	O
array	O	O
of	O	O
the	O	O
runtime	O	O
type	O	O
of	O	O
your	O	O
list	O	O
:	O	O
#	O	O
blockquote	O	O
Right	O	O
below	O	O
that	O	O
method	O	O
,	O	O
though	O	O
,	O	O
is	O	O
the	O	O
Javadoc	O	O
for	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
this	O	O
method	O	O
returns	O	O
a	O	O
T	O	O
[	O	O
]	O	O
where	O	O
T	O	O
is	O	O
the	O	O
type	O	O
of	O	O
the	O	O
array	O	O
you	O	O
pass	O	O
in	O	O
.	O	O
At	O	O
first	O	O
this	O	O
seems	O	O
like	O	O
what	O	O
you	O	O
'	O	O
re	O	O
looking	O	O
for	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
unclear	O	O
exactly	O	O
why	O	O
you	O	O
'	O	O
re	O	O
passing	O	O
in	O	O
an	O	O
array	O	O
(	O	O
are	O	O
you	O	O
adding	O	O
to	O	O
it	O	O
,	O	O
using	O	O
it	O	O
for	O	O
just	O	O
the	O	O
type	O	O
,	O	O
etc	O	O
)	O	O
.	O	O
The	O	O
documentation	O	O
makes	O	O
it	O	O
clear	O	O
that	O	O
the	O	O
purpose	O	O
of	O	O
the	O	O
passed	O	O
array	O	O
is	O	O
essentially	O	O
to	O	O
define	O	O
the	O	O
type	O	O
of	O	O
array	O	O
to	O	O
return	O	O
(	O	O
which	O	O
is	O	O
exactly	O	O
your	O	O
use	O	O
case	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Of	O	O
course	O	O
,	O	O
an	O	O
understanding	O	O
of	O	O
generics	O	O
(	O	O
as	O	O
described	O	O
in	O	O
the	O	O
other	O	O
answers	O	O
)	O	O
is	O	O
required	O	O
to	O	O
really	O	O
understand	O	O
the	O	O
difference	O	O
between	O	O
these	O	O
two	O	O
methods	O	O
.	O	O
Nevertheless	O	O
,	O	O
if	O	O
you	O	O
first	O	O
go	O	O
to	O	O
the	O	O
Javadocs	O	O
,	O	O
you	O	O
will	O	O
usually	O	O
find	O	O
your	O	O
answer	O	O
and	O	O
then	O	O
see	O	O
for	O	O
yourself	O	O
what	O	O
else	O	O
you	O	O
need	O	O
to	O	O
learn	O	O
(	O	O
if	O	O
you	O	O
really	O	O
do	O	O
)	O	O
.	O	O
Also	O	O
note	O	O
that	O	O
reading	O	O
the	O	O
Javadocs	O	O
here	O	O
helps	O	O
you	O	O
to	O	O
understand	O	O
what	O	O
the	O	O
structure	O	O
of	O	O
the	O	O
array	O	O
you	O	O
pass	O	O
in	O	O
should	O	O
be	O	O
.	O	O
Though	O	O
it	O	O
may	O	O
not	O	O
really	O	O
practically	O	O
matter	O	O
,	O	O
you	O	O
should	O	O
not	O	O
pass	O	O
in	O	O
an	O	O
empty	O	O
array	O	O
like	O	O
this	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Because	O	O
,	O	O
from	O	O
the	O	O
doc	O	O
,	O	O
this	O	O
implementation	O	O
checks	O	O
if	O	O
the	O	O
array	O	O
is	O	O
large	O	O
enough	O	O
to	O	O
contain	O	O
the	O	O
collection	O	O
;	O	O
if	O	O
not	O	O
,	O	O
it	O	O
allocates	O	O
a	O	O
new	O	O
array	O	O
of	O	O
the	O	O
correct	O	O
size	O	O
and	O	O
type	O	O
(	O	O
using	O	O
reflection	O	O
)	O	O
.	O	O
There	O	O
'	O	O
s	O	O
no	O	O
need	O	O
for	O	O
the	O	O
extra	O	O
overhead	O	O
in	O	O
creating	O	O
a	O	O
new	O	O
array	O	O
when	O	O
you	O	O
could	O	O
easily	O	O
pass	O	O
in	O	O
the	O	O
size	O	O
.	O	O
As	O	O
is	O	O
usually	O	O
the	O	O
case	O	O
,	O	O
the	O	O
Javadocs	O	O
provide	O	O
you	O	O
with	O	O
a	O	O
wealth	O	O
of	O	O
information	O	O
and	O	O
direction	O	O
.	O	O
Hey	O	O
wait	O	O
a	O	O
minute	O	O
,	O	O
what	O	O
'	O	O
s	O	O
reflection	O	O
?	O	O
Question	O	O
-	O	O
21947452	O	O
,	O	O
answer	O	O
-	O	O
29434641	O	O
I	O	O
performed	O	O
tests	O	O
on	O	O
Eclipse	O	O
vs	O	O
Netbeans	O	O
8	O	O
.	O	O
0	O	O
.	O	O
2	O	O
,	O	O
both	O	O
with	O	O
Java	O	O
version	O	O
1	O	O
.	O	O
8	O	O
;	O	O
I	O	O
used	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
measurements	O	O
.	O	O
Eclipse	O	O
:	O	O
I	O	O
got	O	O
the	O	O
same	O	O
time	O	O
on	O	O
both	O	O
cases	O	O
-	O	O
around	O	O
1	O	O
.	O	O
564	O	O
seconds	O	O
.	O	O
Netbeans	O	O
:	O	O
#	O	O
li	O	O
Using	O	O
"	O	O
#	O	O
"	O	O
:	O	O
1	O	O
.	O	O
536	O	O
seconds	O	O
#	O	O
li	O	O
Using	O	O
"	O	O
B	O	O
"	O	O
:	O	O
44	O	O
.	O	O
164	O	O
seconds	O	O
So	O	O
,	O	O
it	O	O
looks	O	O
like	O	O
Netbeans	O	B-api_mention
has	O	O
bad	O	O
performance	O	O
on	O	O
print	O	O
to	O	O
console	O	O
.	O	O
After	O	O
more	O	O
research	O	O
I	O	O
realized	O	O
that	O	O
the	O	O
problem	O	O
is	O	O
line	O	O
-	O	O
wrapping	O	O
of	O	O
the	O	O
max	O	O
buffer	O	O
of	O	O
Netbeans	O	O
(	O	O
it	O	O
'	O	O
s	O	O
not	O	O
restricted	O	O
to	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
command	O	O
)	O	O
,	O	O
demonstrated	O	O
by	O	O
this	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
time	O	O
results	O	O
are	O	O
less	O	O
then	O	O
1	O	O
millisecond	O	O
every	O	O
iteration	O	O
except	O	O
every	O	O
fifth	O	O
iteration	O	O
,	O	O
when	O	O
the	O	O
time	O	O
result	O	O
is	O	O
around	O	O
225	O	O
millisecond	O	O
.	O	O
Something	O	O
like	O	O
(	O	O
in	O	O
nanoseconds	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
so	O	O
on	O	O
.	O	O
.	O	O
Summary	O	O
:	O	O
#	O	O
li	O	O
Eclipse	O	O
works	O	O
perfectly	O	O
with	O	O
"	O	O
B	O	O
"	O	O
#	O	O
li	O	O
Netbeans	O	O
has	O	O
a	O	O
line	O	O
-	O	O
wrapping	O	O
problem	O	O
that	O	O
can	O	O
be	O	O
solved	O	O
(	O	O
because	O	O
the	O	O
problem	O	O
does	O	O
not	O	O
occur	O	O
in	O	O
eclipse	O	O
)	O	O
(	O	O
without	O	O
adding	O	O
space	O	O
after	O	O
B	O	O
(	O	O
"	O	O
B	O	O
"	O	O
)	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
20877086	O	O
,	O	O
answer	O	O
-	O	O
20889556	O	O
To	O	O
complement	O	O
the	O	O
given	O	O
answers	O	O
,	O	O
also	O	O
take	O	O
note	O	O
of	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
code	O	O
will	O	O
also	O	O
print	O	O
:	O	O
false	O	O
As	O	O
user	O	O
Jay	O	O
has	O	O
claimed	O	O
in	O	O
a	O	O
comment	O	O
for	O	O
the	O	O
accepted	O	O
answer	O	O
,	O	O
care	O	O
must	O	O
be	O	O
taken	O	O
when	O	O
using	O	O
operator	O	O
=	O	O
=	O	O
on	O	O
objects	O	O
,	O	O
here	O	O
you	O	O
'	O	O
re	O	O
checking	O	O
if	O	O
both	O	O
references	O	O
are	O	O
the	O	O
same	O	O
,	O	O
which	O	O
is	O	O
not	O	O
,	O	O
because	O	O
they	O	O
are	O	O
different	O	O
objets	O	O
,	O	O
although	O	O
they	O	O
represent	O	O
the	O	O
very	O	O
same	O	O
value	O	O
.	O	O
To	O	O
compare	O	O
objects	O	O
,	O	O
you	O	O
should	O	O
use	O	O
the	O	O
equals	O	B-api_mention
method	O	O
instead	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
will	O	O
print	O	O
:	O	O
true	O	O
You	O	O
may	O	O
ask	O	O
,	O	O
But	O	O
then	O	O
why	O	O
the	O	O
first	O	O
line	O	O
printed	O	O
true	O	O
?	O	O
.	O	O
Checking	O	O
the	O	O
source	O	O
code	O	O
for	O	O
the	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
method	O	O
,	O	O
you	O	O
can	O	O
see	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
the	O	O
param	O	O
is	O	O
an	O	O
integer	O	O
between	O	O
IntegerCache	B-api_mention	B-api_mention
.	I-api_mention	O
low	I-api_mention	O
(	O	O
defaulted	O	O
to	O	O
-	O	O
128	O	O
)	O	O
and	O	O
IntegerCache	B-api_mention	B-api_mention
.	I-api_mention	O
high	I-api_mention	O
(	O	O
calculated	O	O
at	O	O
runtime	O	O
with	O	O
minimum	O	O
value	O	O
127	O	O
)	O	O
then	O	O
a	O	O
pre	O	O
-	O	O
allocated	O	O
(	O	O
cached	O	O
)	O	O
object	O	O
is	O	O
returned	O	O
.	O	O
So	O	O
when	O	O
you	O	O
use	O	O
127	O	O
as	O	O
parameter	O	O
,	O	O
you	O	O
'	O	O
re	O	O
getting	O	O
two	O	O
references	O	O
to	O	O
same	O	O
cached	O	O
object	O	O
and	O	O
getting	O	O
true	O	O
in	O	O
the	O	O
comparison	O	O
of	O	O
the	O	O
references	O	O
.	O	O
Question	O	O
-	O	O
6667243	O	O
,	O	O
answer	O	O
-	O	O
6667310	O	O
You	O	O
can	O	O
use	O	O
Mode	O	O
.	O	O
mode1	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
however	O	O
you	O	O
often	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
do	O	O
this	O	O
.	O	O
Mode	O	O
mode	O	O
=	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14492320	O	O
Your	O	O
QuickRandom	B-api_mention	B-api_mention
implementation	O	O
hasn	O	O
'	O	O
t	O	O
really	O	O
an	O	O
uniform	O	O
distribution	O	O
.	O	O
The	O	O
frequencies	O	O
are	O	O
generally	O	O
higher	O	O
at	O	O
the	O	O
lower	O	O
values	O	O
while	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
has	O	O
a	O	O
more	O	O
uniform	O	O
distribution	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
a	O	O
SSCCE	O	O
which	O	O
shows	O	O
that	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
average	O	O
result	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
repeat	O	O
the	O	O
test	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
see	O	O
that	O	O
the	O	O
QR	O	O
distribution	O	O
varies	O	O
heavily	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
initial	O	O
seeds	O	O
,	O	O
while	O	O
the	O	O
MR	O	O
distribution	O	O
is	O	O
stable	O	O
.	O	O
Sometimes	O	O
it	O	O
reaches	O	O
the	O	O
desired	O	O
uniform	O	O
distribution	O	O
,	O	O
but	O	O
more	O	O
than	O	O
often	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
one	O	O
of	O	O
the	O	O
more	O	O
extreme	O	O
examples	O	O
,	O	O
it	O	O
'	O	O
s	O	O
even	O	O
beyond	O	O
the	O	O
borders	O	O
of	O	O
the	O	O
graph	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
6271668	O	O
I	O	O
'	O	O
m	O	O
assuming	O	O
this	O	O
is	O	O
happening	O	O
for	O	O
an	O	O
anonymous	O	O
class	O	O
.	O	O
When	O	O
you	O	O
create	O	O
an	O	O
anonymous	O	O
class	O	O
you	O	O
actually	O	O
create	O	O
a	O	O
class	O	O
that	O	O
extends	O	O
the	O	O
class	O	O
whose	O	O
name	O	O
you	O	O
got	O	O
.	O	O
The	O	O
"	O	O
cleaner	O	O
"	O	O
way	O	O
to	O	O
get	O	O
the	O	O
name	O	O
you	O	O
want	O	O
is	O	O
:	O	O
If	O	O
your	O	O
class	O	O
is	O	O
an	O	O
anonymous	O	O
inner	O	O
class	O	O
,	O	O
getSuperClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
give	O	O
you	O	O
the	O	O
class	O	O
that	O	O
it	O	O
was	O	O
created	O	O
from	O	O
.	O	O
If	O	O
you	O	O
created	O	O
it	O	O
from	O	O
an	O	O
interface	O	O
than	O	O
you	O	O
'	O	O
re	O	O
sort	O	O
of	O	O
SOL	O	O
because	O	O
the	O	O
best	O	O
you	O	O
can	O	O
do	O	O
is	O	O
getInterfaces	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
might	O	O
give	O	O
you	O	O
more	O	O
than	O	O
one	O	O
interface	O	O
.	O	O
The	O	O
"	O	O
hacky	O	O
"	O	O
way	O	O
is	O	O
to	O	O
just	O	O
get	O	O
the	O	O
name	O	O
with	O	O
getClassName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
use	O	O
a	O	O
regex	O	O
to	O	O
drop	O	O
the	O	O
$	O	O
1	O	O
.	O	O
Question	O	O
-	O	O
27504925	O	O
,	O	O
answer	O	O
-	O	O
27505121	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
point	O	O
out	O	O
this	O	O
article	O	O
.	O	O
It	O	O
seems	O	O
as	O	O
though	O	O
arrays	O	O
and	O	O
objects	O	O
follow	O	O
different	O	O
opcodes	O	O
.	O	O
I	O	O
can	O	O
'	O	O
t	O	O
honestly	O	O
summarize	O	O
it	O	O
more	O	O
than	O	O
that	O	O
however	O	O
it	O	O
seems	O	O
,	O	O
arrays	O	O
are	O	O
simply	O	O
not	O	O
treated	O	O
as	O	O
Objects	B-api_mention	B-api_mention
like	O	O
we	O	O
'	O	O
re	O	O
normally	O	O
used	O	O
to	O	O
so	O	O
they	O	O
don	O	O
'	O	O
t	O	O
inherit	O	O
Object	B-api_mention	B-api_mention
methods	O	O
.	O	O
Full	O	O
credits	O	O
to	O	O
the	O	O
author	O	O
of	O	O
that	O	O
post	O	O
as	O	O
it	O	O
'	O	O
s	O	O
a	O	O
very	O	O
interesting	O	O
read	O	O
,	O	O
both	O	O
short	O	O
&	O	O
detailed	O	O
.	O	O
Upon	O	O
further	O	O
digging	O	O
into	O	O
the	O	O
topic	O	O
via	O	O
multiple	O	O
sources	O	O
I	O	O
'	O	O
ve	O	O
decided	O	O
to	O	O
give	O	O
a	O	O
more	O	O
elaborate	O	O
version	O	O
of	O	O
my	O	O
previous	O	O
answer	O	O
.	O	O
The	O	O
first	O	O
thing	O	O
to	O	O
note	O	O
that	O	O
instantiation	O	O
of	O	O
Objects	B-api_mention	B-api_mention
and	O	O
Arrays	B-api_mention	B-api_mention
are	O	O
very	O	O
different	O	O
within	O	O
the	O	O
JVM	O	O
,	O	O
their	O	O
follow	O	O
their	O	O
respective	O	O
bytecode	O	O
.	O	O
Object	B-api_mention	B-api_mention
:	O	O
Object	B-api_mention	B-api_mention
instantiation	O	O
follows	O	O
a	O	O
simple	O	O
Opcode	O	O
new	O	O
which	O	O
is	O	O
a	O	O
combination	O	O
of	O	O
two	O	O
operands	O	O
-	O	O
indexbyte1	O	O
&	O	O
indexbyte2	O	O
.	O	O
Once	O	O
instantiated	O	O
the	O	O
JVM	O	O
pushes	O	O
the	O	O
reference	O	O
to	O	O
this	O	O
object	O	O
onto	O	O
the	O	O
stack	O	O
.	O	O
This	O	O
occurs	O	O
for	O	O
all	O	O
objects	O	O
irrespective	O	O
of	O	O
their	O	O
types	O	O
.	O	O
Arrays	B-api_mention	O
:	O	O
Array	B-api_mention	O
Opcodes	O	O
(	O	O
regarding	O	O
instantiation	O	O
of	O	O
an	O	O
array	O	O
)	O	O
however	O	O
are	O	O
divided	O	O
into	O	O
three	O	O
different	O	O
codes	O	O
.	O	O
#	O	O
blockquote	O	O
newarray	O	O
opcode	O	O
is	O	O
used	O	O
when	O	O
creating	O	O
arrays	O	O
that	O	O
involve	O	O
primitive	O	O
datatypes	O	O
(	O	O
byte	O	O
short	O	O
char	O	O
int	O	O
long	O	O
float	O	O
double	O	O
boolean	O	O
)	O	O
rather	O	O
than	O	O
object	O	O
references	O	O
.	O	O
#	O	O
blockquote	O	O
anewarray	O	O
opcode	O	O
is	O	O
used	O	O
when	O	O
creating	O	O
arrays	O	O
of	O	O
object	O	O
references	O	O
#	O	O
blockquote	O	O
multianewarray	O	O
instruction	O	O
is	O	O
used	O	O
when	O	O
allocating	O	O
multi	O	O
-	O	O
dimensional	O	O
arrays	O	O
Object	B-api_mention	B-api_mention
can	O	O
be	O	O
a	O	O
class	O	O
instance	O	O
or	O	O
an	O	O
array	O	O
.	O	O
Take	O	O
from	O	O
Oracle	O	O
Docs	O	O
#	O	O
blockquote	O	O
BUT	O	O
#	O	O
blockquote	O	O
This	O	O
goes	O	O
hand	O	O
in	O	O
hand	O	O
with	O	O
the	O	O
information	O	O
regarding	O	O
the	O	O
opcodes	O	O
.	O	O
Arrays	O	B-api_mention
are	O	O
simply	O	O
not	O	O
developed	O	O
to	O	O
be	O	O
class	O	O
interfaces	O	O
but	O	O
are	O	O
instead	O	O
explicitly	O	O
created	O	O
by	O	O
array	O	O
creation	O	O
expression	O	O
thus	O	O
naturally	O	O
wouldn	O	O
'	O	O
t	O	O
implicitly	O	O
be	O	O
able	O	O
to	O	O
inherit	O	O
and	O	O
/	O	O
or	O	O
override	O	O
Object	B-api_mention	B-api_mention
.	O	O
As	O	O
we	O	O
have	O	O
seen	O	O
,	O	O
it	O	O
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
the	O	O
fact	O	O
that	O	O
arrays	O	O
may	O	O
hold	O	O
primitive	O	O
datatypes	O	O
.	O	O
After	O	O
giving	O	O
it	O	O
some	O	O
thought	O	O
though	O	O
,	O	O
it	O	O
isn	O	O
'	O	O
t	O	O
very	O	O
common	O	O
to	O	O
come	O	O
across	O	O
situations	O	O
where	O	O
one	O	O
might	O	O
want	O	O
to	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
however	O	O
was	O	O
still	O	O
a	O	O
very	O	O
interesting	O	O
question	O	O
to	O	O
try	O	O
and	O	O
answer	O	O
.	O	O
Resources	O	O
:	O	O
Oracle	O	O
-	O	O
Docs	O	O
chapter	O	O
4	O	O
.	O	O
3	O	O
.	O	O
1	O	O
Oracle	O	O
-	O	O
Docs	O	O
chapter	O	O
15	O	O
.	O	O
10	O	O
.	O	O
1	O	O
Artima	O	O
-	O	O
UnderTheHood	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
7800008	O	O
Strictly	O	O
speaking	O	O
-	O	O
you	O	O
have	O	O
no	O	O
choice	O	O
but	O	O
calling	O	O
either	O	O
hostname	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
-	O	O
on	O	O
Unix	O	O
gethostname	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
.	O	O
This	O	O
is	O	O
the	O	O
name	O	O
of	O	O
your	O	O
computer	O	O
.	O	O
Any	O	O
attempt	O	O
to	O	O
determine	O	O
the	O	O
hostname	O	O
by	O	O
an	O	O
IP	O	O
address	O	O
like	O	O
this	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
bound	O	O
to	O	O
fail	O	O
in	O	O
some	O	O
circumstances	O	O
:	O	O
#	O	O
li	O	O
The	O	O
IP	O	O
address	O	O
might	O	O
not	O	O
resolve	O	O
into	O	O
any	O	O
name	O	O
.	O	O
Bad	O	O
DNS	O	O
setup	O	O
,	O	O
bad	O	O
system	O	O
setup	O	O
or	O	O
bad	O	O
provider	O	O
setup	O	O
may	O	O
be	O	O
the	O	O
reason	O	O
for	O	O
this	O	O
.	O	O
#	O	O
li	O	O
A	O	O
name	O	O
in	O	O
DNS	O	O
can	O	O
have	O	O
many	O	O
aliases	O	O
called	O	O
CNAMEs	O	O
.	O	O
These	O	O
can	O	O
only	O	O
be	O	O
resolved	O	O
in	O	O
one	O	O
direction	O	O
properly	O	O
:	O	O
name	O	O
to	O	O
address	O	O
.	O	O
The	O	O
reverse	O	O
direction	O	O
is	O	O
ambiguous	O	O
.	O	O
Which	O	O
one	O	O
is	O	O
the	O	O
"	O	O
official	O	O
"	O	O
name	O	O
?	O	O
#	O	O
li	O	O
A	O	O
host	O	O
can	O	O
have	O	O
many	O	O
different	O	O
IP	O	O
addresses	O	O
-	O	O
and	O	O
each	O	O
address	O	O
can	O	O
have	O	O
many	O	O
different	O	O
names	O	O
.	O	O
Two	O	O
common	O	O
cases	O	O
are	O	O
:	O	O
One	O	O
ethernet	O	O
port	O	O
has	O	O
several	O	O
"	O	O
logical	O	O
"	O	O
IP	O	O
addresses	O	O
or	O	O
the	O	O
computer	O	O
has	O	O
several	O	O
ethernet	O	O
ports	O	O
.	O	O
It	O	O
is	O	O
configurable	O	O
whether	O	O
they	O	O
share	O	O
an	O	O
IP	O	O
or	O	O
have	O	O
different	O	O
IPs	O	O
.	O	O
This	O	O
is	O	O
called	O	O
"	O	O
multihomed	O	O
"	O	O
.	O	O
#	O	O
li	O	O
One	O	O
Name	O	O
in	O	O
DNS	O	O
can	O	O
resolve	O	O
to	O	O
several	O	O
IP	O	O
Addresses	O	O
.	O	O
And	O	O
not	O	O
all	O	O
of	O	O
those	O	O
addresses	O	O
must	O	O
be	O	O
located	O	O
on	O	O
the	O	O
same	O	O
computer	O	O
!	O	O
(	O	O
Usecase	O	O
:	O	O
A	O	O
simple	O	O
form	O	O
of	O	O
load	O	O
-	O	O
balancing	O	O
)	O	O
#	O	O
li	O	O
Let	O	O
'	O	O
s	O	O
not	O	O
even	O	O
start	O	O
talking	O	O
about	O	O
dynamic	O	O
IP	O	O
addresses	O	O
.	O	O
Also	O	O
don	O	O
'	O	O
t	O	O
confuse	O	O
the	O	O
name	O	O
of	O	O
an	O	O
IP	O	O
-	O	O
address	O	O
with	O	O
the	O	O
name	O	O
of	O	O
the	O	O
host	O	O
(	O	O
hostname	O	O
)	O	O
.	O	O
A	O	O
metaphor	O	O
might	O	O
make	O	O
it	O	O
clearer	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
illustrates	O	O
it	O	O
pretty	O	O
much	O	O
I	O	O
think	O	O
.	O	O
The	O	O
good	O	O
news	O	O
is	O	O
:	O	O
The	O	O
real	O	O
hostname	O	O
is	O	O
usually	O	O
not	O	O
necessary	O	O
.	O	O
In	O	O
most	O	O
cases	O	O
any	O	O
name	O	O
which	O	O
resolves	O	O
into	O	O
an	O	O
IP	O	O
address	O	O
on	O	O
this	O	O
host	O	O
will	O	O
do	O	O
.	O	O
(	O	O
The	O	O
stranger	O	O
might	O	O
enter	O	O
the	O	O
city	O	O
by	O	O
Northgate	O	O
,	O	O
but	O	O
helpful	O	O
locals	O	O
translate	O	O
the	O	O
"	O	O
2nd	O	O
left	O	O
"	O	O
part	O	O
.	O	O
)	O	O
If	O	O
the	O	O
remaining	O	O
corner	O	O
cases	O	O
you	O	O
must	O	O
use	O	O
the	O	O
definitive	O	O
source	O	O
of	O	O
this	O	O
configuration	O	O
setting	O	O
-	O	O
which	O	O
is	O	O
the	O	O
C	O	O
function	O	O
gethostname	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
That	O	O
function	O	O
is	O	O
also	O	O
called	O	O
by	O	O
the	O	O
program	O	O
hostname	O	O
.	O	O
Question	O	O
-	O	O
18532488	O	O
In	O	O
many	O	O
other	O	O
languages	O	O
,	O	O
eg	O	O
.	O	O
Haskell	O	O
,	O	O
it	O	O
is	O	O
easy	O	O
to	O	O
repeat	O	O
a	O	O
value	O	O
or	O	O
function	O	O
multiple	O	O
times	O	O
,	O	O
eg	O	O
.	O	O
to	O	O
get	O	O
a	O	O
list	O	O
of	O	O
8	O	O
copies	O	O
of	O	O
the	O	O
value	O	O
1	O	O
:	O	O
take	O	O
8	O	O
(	O	O
args	O	O
)	O	O
but	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
found	O	O
this	O	O
yet	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
Is	O	O
there	O	O
such	O	O
a	O	O
function	O	O
in	O	O
Java	O	O
8	O	O
'	O	O
s	O	O
JDK	O	O
?	O	O
Or	O	O
alternatively	O	O
something	O	O
equivalent	O	O
to	O	O
a	O	O
range	O	O
like	O	O
[	O	O
1	O	O
.	O	O
.	O	O
8	O	O
]	O	O
It	O	O
would	O	O
seem	O	O
an	O	O
obvious	O	O
replacement	O	O
for	O	O
a	O	O
verbose	O	O
statement	O	O
in	O	O
Java	O	O
like	O	O
#	O	O
pre	O	O
to	O	O
have	O	O
something	O	O
like	O	O
Range	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
from	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
though	O	O
this	O	O
particular	O	O
example	O	O
doesn	O	O
'	O	O
t	O	O
look	O	O
much	O	O
more	O	O
concise	O	O
actually	O	O
.	O	O
.	O	O
.	O	O
but	O	O
hopefully	O	O
it	O	O
'	O	O
s	O	O
more	O	O
readable	O	O
.	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
32542424	O	O
What	O	O
you	O	O
can	O	O
do	O	O
is	O	O
scan	O	O
the	O	O
entire	O	O
text	O	O
using	O	O
Scanner	B-api_mention	B-api_mention
and	O	O
go	O	O
through	O	O
the	O	O
text	O	O
line	O	O
by	O	O
line	O	O
.	O	O
Of	O	O
course	O	O
you	O	O
should	O	O
import	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
Scanner	B-api_mention	B-api_mention
basically	O	O
scans	O	O
all	O	O
the	O	O
text	O	O
.	O	O
The	O	O
while	O	O
loop	O	O
is	O	O
used	O	O
to	O	O
traverse	O	O
through	O	O
the	O	O
entire	O	O
text	O	O
.	O	O
The	O	O
.	B-api_mention	O
hasNextLine	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
is	O	O
a	O	O
boolean	O	O
that	O	O
returns	O	O
true	O	O
if	O	O
there	O	O
are	O	O
still	O	O
more	O	O
lines	O	O
in	O	O
the	O	O
text	O	O
.	O	O
The	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
gives	O	O
you	O	O
an	O	O
entire	O	O
line	O	O
as	O	O
a	O	O
String	B-api_mention	B-api_mention
which	O	O
you	O	O
can	O	O
then	O	O
use	O	O
the	O	O
way	O	O
you	O	O
want	O	O
.	O	O
Try	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
print	O	O
the	O	O
text	O	O
.	O	O
Side	O	O
Note	O	O
:	O	O
.	O	O
txt	O	O
is	O	O
the	O	O
file	O	O
type	O	O
text	O	O
.	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
15446006	O	O
I	O	O
actually	O	O
wrote	O	O
a	O	O
blog	O	O
post	O	O
on	O	O
the	O	O
topic	O	O
2	O	O
months	O	O
ago	O	O
.	O	O
The	O	O
article	O	O
is	O	O
for	O	O
C	O	O
#	O	O
'	O	O
s	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
but	O	O
Java	O	O
'	O	O
s	O	O
ArrayList	B-api_mention	B-api_mention
has	O	O
a	O	O
very	O	O
similar	O	O
implementation	O	O
.	O	O
Since	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
implemented	O	O
using	O	O
a	O	O
dynamic	O	O
array	O	O
,	O	O
it	O	O
increases	O	O
in	O	O
size	O	O
on	O	O
demand	O	O
.	O	O
So	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
capacity	O	O
constructor	O	O
is	O	O
for	O	O
optimisation	O	O
purposes	O	O
.	O	O
When	O	O
one	O	O
of	O	O
these	O	O
resizings	O	O
operation	O	O
occurs	O	O
,	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
copies	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
array	O	O
into	O	O
a	O	O
new	O	O
array	O	O
that	O	O
is	O	O
twice	O	O
the	O	O
capacity	O	O
of	O	O
the	O	O
old	O	O
one	O	O
.	O	O
This	O	O
operation	O	O
runs	O	O
in	O	O
O	O	O
(	O	O
n	O	O
)	O	O
time	O	O
.	O	O
Example	O	O
Here	O	O
is	O	O
an	O	O
example	O	O
of	O	O
how	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
would	O	O
increase	O	O
in	O	O
size	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
the	O	O
list	O	O
starts	O	O
with	O	O
a	O	O
capacity	O	O
of	O	O
10	O	O
,	O	O
when	O	O
the	O	O
11th	O	O
item	O	O
is	O	O
added	O	O
it	O	O
is	O	O
increase	O	O
by	O	O
50	O	O
%	O	O
+	O	O
1	O	O
to	O	O
16	O	O
.	O	O
On	O	O
the	O	O
17th	O	O
item	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
increased	O	O
again	O	O
to	O	O
25	O	O
and	O	O
so	O	O
on	O	O
.	O	O
Now	O	O
consider	O	O
the	O	O
example	O	O
where	O	O
we	O	O
'	O	O
re	O	O
creating	O	O
a	O	O
list	O	O
where	O	O
the	O	O
desired	O	O
capacity	O	O
is	O	O
already	O	O
known	O	O
as	O	O
1000000	O	O
.	O	O
Creating	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
without	O	O
the	O	O
size	O	O
constructor	O	O
will	O	O
call	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	O
add	I-api_mention	O
1000000	O	O
times	O	O
which	O	O
takes	O	O
O	O	O
(	O	O
1	O	O
)	O	O
normally	O	O
or	O	O
O	O	O
(	O	O
n	O	O
)	O	O
on	O	O
resize	O	O
.	O	O
#	O	O
blockquote	O	O
Compare	O	O
this	O	O
using	O	O
the	O	O
constructor	O	O
and	O	O
then	O	O
calling	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
add	I-api_mention	I-api_mention
which	O	O
is	O	O
guaranteed	O	O
to	O	O
run	O	O
in	O	O
O	O	O
(	O	O
1	O	O
)	O	O
.	O	O
#	O	O
blockquote	O	O
Java	O	O
vs	O	O
C	O	O
#	O	O
Java	O	O
is	O	O
as	O	O
above	O	O
,	O	O
starting	O	O
at	O	O
10	O	O
and	O	O
increasing	O	O
each	O	O
resize	O	O
at	O	O
50	O	O
%	O	O
+	O	O
1	O	O
.	O	O
C	O	O
#	O	O
starts	O	O
at	O	O
4	O	O
and	O	O
increases	O	O
much	O	O
more	O	O
aggressively	O	O
,	O	O
doubling	O	O
at	O	O
each	O	O
resize	O	O
.	O	O
The	O	O
1000000	O	O
adds	O	O
example	O	O
from	O	O
above	O	O
for	O	O
C	O	O
#	O	O
uses	O	O
3097084	O	O
operations	O	O
.	O	O
References	O	O
#	O	O
li	O	O
My	O	O
blog	O	O
post	O	O
on	O	O
C	O	O
#	O	O
'	O	O
s	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
#	O	O
li	O	O
Java	O	O
'	O	O
s	O	O
ArrayList	B-api_mention	B-api_mention
source	O	O
code	O	O
Question	O	O
-	O	O
5982447	O	O
,	O	O
answer	O	O
-	O	O
5982478	O	O
Use	O	O
the	O	O
Set	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
[	I-api_mention	I-api_mention
]	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
taking	O	O
a	O	O
typed	O	O
array	O	O
argument	O	O
of	O	O
the	O	O
same	O	O
size	O	O
.	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
GPXFILES1	O	O
=	O	O
myset	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
A	O	O
different	O	O
size	O	O
can	O	O
also	O	O
,	O	O
but	O	O
that	O	O
would	O	O
force	O	O
the	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
create	O	O
a	O	O
new	O	O
array	O	O
to	O	O
return	O	O
instead	O	O
of	O	O
reusing	O	O
the	O	O
provided	O	O
argument	O	O
,	O	O
which	O	O
may	O	O
end	O	O
up	O	O
to	O	O
be	O	O
less	O	O
efficient	O	O
.	O	O
See	O	O
also	O	O
the	O	O
source	O	O
code	O	O
of	O	O
AbstractCollection	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
34509566	O	O
,	O	O
answer	O	O
-	O	O
34529067	O	O
Keep	O	O
in	O	O
mind	O	O
that	O	O
Java	O	O
holds	O	O
a	O	O
pool	O	O
of	O	O
all	O	O
string	O	O
literals	O	O
found	O	O
in	O	O
program	O	O
,	O	O
used	O	O
for	O	O
matching	O	O
purposes	O	O
among	O	O
others	O	O
,	O	O
so	O	O
any	O	O
different	O	O
string	O	O
literal	O	O
concatenation	O	O
above	O	O
will	O	O
lead	O	O
to	O	O
the	O	O
same	O	O
object	O	O
,	O	O
to	O	O
the	O	O
same	O	O
string	O	O
literal	O	O
.	O	O
You	O	O
can	O	O
check	O	O
out	O	O
this	O	O
useful	O	O
article	O	O
for	O	O
more	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
the	O	O
concatenation	O	O
of	O	O
a	O	O
String	B-api_mention	B-api_mention
object	O	O
and	O	O
a	O	O
literal	O	O
(	O	O
case	O	O
c	O	O
+	O	O
StringLiteral	O	O
)	O	O
will	O	O
lead	O	O
to	O	O
the	O	O
creation	O	O
of	O	O
a	O	O
as	O	O
StringBuilder	B-api_mention	B-api_mention
object	O	O
at	O	O
runtime	O	O
,	O	O
different	O	O
to	O	O
the	O	O
literals	O	O
found	O	O
in	O	O
pool	O	O
.	O	O
Question	O	O
-	O	O
5192512	O	O
,	O	O
answer	O	O
-	O	O
22694891	O	O
I	O	O
think	O	O
many	O	O
of	O	O
the	O	O
answers	O	O
here	O	O
may	O	O
be	O	O
missing	O	O
a	O	O
quality	O	O
method	O	O
included	O	O
in	O	O
StringBuilder	B-api_mention	B-api_mention
:	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
know	O	O
this	O	O
is	O	O
a	O	O
late	O	O
reply	O	O
;	O	O
however	O	O
,	O	O
this	O	O
should	O	O
be	O	O
made	O	O
known	O	O
(	O	O
and	O	O
explained	O	O
a	O	O
bit	O	O
more	O	O
thoroughly	O	O
)	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
say	O	O
you	O	O
have	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
table	O	O
-	O	O
which	O	O
you	O	O
wish	O	O
to	O	O
modify	O	O
,	O	O
dynamically	O	O
,	O	O
throughout	O	O
your	O	O
program	O	O
(	O	O
one	O	O
I	O	O
am	O	O
working	O	O
on	O	O
right	O	O
now	O	O
does	O	O
this	O	O
)	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
StringBuilder	B-api_mention	B-api_mention
table	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
If	O	O
you	O	O
are	O	O
looping	O	O
through	O	O
the	O	O
method	O	O
and	O	O
alter	O	O
the	O	O
content	O	O
,	O	O
use	O	O
the	O	O
content	O	O
,	O	O
then	O	O
wish	O	O
to	O	O
discard	O	O
the	O	O
content	O	O
to	O	O
"	O	O
clean	O	O
up	O	O
"	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
for	O	O
the	O	O
next	O	O
iteration	O	O
,	O	O
you	O	O
can	O	O
delete	O	O
it	O	O
'	O	O
s	O	O
contents	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
table	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
start	O	I-api_mention
and	O	O
end	O	O
being	O	O
the	O	O
indices	O	O
of	O	O
the	O	O
chars	O	O
you	O	O
wish	O	O
to	O	O
remove	O	O
.	O	O
Don	O	O
'	O	O
t	O	O
know	O	O
the	O	O
length	O	O
in	O	O
chars	O	O
and	O	O
want	O	O
to	O	O
delete	O	O
the	O	O
whole	O	O
thing	O	O
?	O	O
table	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
NOW	O	O
,	O	O
for	O	O
the	O	O
kicker	O	O
.	O	O
StringBuilders	B-api_mention	B-api_mention
,	O	O
as	O	O
mentioned	O	O
previously	O	O
,	O	O
take	O	O
a	O	O
lot	O	O
of	O	O
overhead	O	O
when	O	O
altered	O	O
frequently	O	O
(	O	O
and	O	O
can	O	O
cause	O	O
safety	O	O
issues	O	O
with	O	O
regard	O	O
to	O	O
threading	O	O
)	O	O
;	O	O
therefore	O	O
,	O	O
use	O	O
StringBuffer	B-api_mention	B-api_mention
-	O	O
same	O	O
as	O	O
StringBuilder	B-api_mention	B-api_mention
(	O	O
with	O	O
a	O	O
few	O	O
exceptions	O	O
)	O	O
-	O	O
if	O	O
your	O	O
StringBuilder	B-api_mention	B-api_mention
is	O	O
used	O	O
for	O	O
the	O	O
purpose	O	O
of	O	O
interfacing	O	O
with	O	O
the	O	O
user	O	O
.	O	O
Question	O	O
-	O	O
15621083	O	O
I	O	O
am	O	O
working	O	O
on	O	O
some	O	O
Java	O	O
code	O	O
which	O	O
needs	O	O
to	O	O
be	O	O
highly	O	O
optimized	O	O
as	O	O
it	O	O
will	O	O
run	O	O
in	O	O
hot	O	O
functions	O	O
that	O	O
are	O	O
invoked	O	O
at	O	O
many	O	O
points	O	O
in	O	O
my	O	O
main	O	O
program	O	O
logic	O	O
.	O	O
Part	O	O
of	O	O
this	O	O
code	O	O
involves	O	O
multiplying	O	O
double	O	O
variables	O	O
by	O	O
10	O	O
raised	O	O
to	O	O
arbitrary	O	O
non	O	O
-	O	O
negative	O	O
int	O	O
exponent	O	O
s	O	O
.	O	O
One	O	O
fast	O	O
way	O	O
(	O	O
edit	O	O
:	O	O
but	O	O
not	O	O
the	O	O
fastest	O	O
possible	O	O
,	O	O
see	O	O
Update	O	O
2	O	O
below	O	O
)	O	O
to	O	O
get	O	O
the	O	O
multiplied	O	O
value	O	O
is	O	O
to	O	O
switch	O	O
on	O	O
the	O	O
exponent	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
commented	O	O
ellipses	O	O
above	O	O
indicate	O	O
that	O	O
the	O	O
case	O	O
int	O	O
constants	O	O
continue	O	O
incrementing	O	O
by	O	O
1	O	O
,	O	O
so	O	O
there	O	O
are	O	O
really	O	O
19	O	O
case	O	O
s	O	O
in	O	O
the	O	O
above	O	O
code	O	O
snippet	O	O
.	O	O
Since	O	O
I	O	O
wasn	O	O
'	O	O
t	O	O
sure	O	O
whether	O	O
I	O	O
would	O	O
actually	O	O
need	O	O
all	O	O
the	O	O
powers	O	O
of	O	O
10	O	O
in	O	O
case	O	O
statements	O	O
10	O	O
thru	O	O
18	O	O
,	O	O
I	O	O
ran	O	O
some	O	O
microbenchmarks	O	O
comparing	O	O
the	O	O
time	O	O
to	O	O
complete	O	O
10	O	O
million	O	O
operations	O	O
with	O	O
this	O	O
switch	O	O
statement	O	O
versus	O	O
a	O	O
switch	O	O
with	O	O
only	O	O
case	O	O
s	O	O
0	O	O
thru	O	O
9	O	O
(	O	O
with	O	O
the	O	O
exponent	O	O
limited	O	O
to	O	O
9	O	O
or	O	O
less	O	O
to	O	O
avoid	O	O
breaking	O	O
the	O	O
pared	O	O
-	O	O
down	O	O
switch	O	O
)	O	O
.	O	O
I	O	O
got	O	O
the	O	O
rather	O	O
surprising	O	O
(	O	O
to	O	O
me	O	O
,	O	O
at	O	O
least	O	O
!	O	O
)	O	O
result	O	O
that	O	O
the	O	O
longer	O	O
switch	O	O
with	O	O
more	O	O
case	O	O
statements	O	O
actually	O	O
ran	O	O
faster	O	O
.	O	O
On	O	O
a	O	O
lark	O	O
,	O	O
I	O	O
tried	O	O
adding	O	O
even	O	O
more	O	O
case	O	O
s	O	O
which	O	O
just	O	O
returned	O	O
dummy	O	O
values	O	O
,	O	O
and	O	O
found	O	O
that	O	O
I	O	O
could	O	O
get	O	O
the	O	O
switch	O	O
to	O	O
run	O	O
even	O	O
faster	O	O
with	O	O
around	O	O
22	O	O
-	O	O
27	O	O
declared	O	O
case	O	O
s	O	O
(	O	O
even	O	O
though	O	O
those	O	O
dummy	O	O
cases	O	O
are	O	O
never	O	O
actually	O	O
hit	O	O
while	O	O
the	O	O
code	O	O
is	O	O
running	O	O
)	O	O
.	O	O
(	O	O
Again	O	O
,	O	O
case	O	O
s	O	O
were	O	O
added	O	O
in	O	O
a	O	O
contiguous	O	O
fashion	O	O
by	O	O
incrementing	O	O
the	O	O
prior	O	O
case	O	O
constant	O	O
by	O	O
1	O	O
.	O	O
)	O	O
These	O	O
execution	O	O
time	O	O
differences	O	O
are	O	O
not	O	O
very	O	O
significant	O	O
:	O	O
for	O	O
a	O	O
random	O	O
exponent	O	O
between	O	O
0	O	O
and	O	O
10	O	O
,	O	O
the	O	O
dummy	O	O
padded	O	O
switch	O	O
statement	O	O
finishes	O	O
10	O	O
million	O	O
executions	O	O
in	O	O
1	O	O
.	O	O
49	O	O
secs	O	O
versus	O	O
1	O	O
.	O	O
54	O	O
secs	O	O
for	O	O
the	O	O
unpadded	O	O
version	O	O
,	O	O
for	O	O
a	O	O
grand	O	O
total	O	O
savings	O	O
of	O	O
5ns	O	O
per	O	O
execution	O	O
.	O	O
So	O	O
,	O	O
not	O	O
the	O	O
kind	O	O
of	O	O
thing	O	O
that	O	O
makes	O	O
obsessing	O	O
over	O	O
padding	O	O
out	O	O
a	O	O
switch	O	O
statement	O	O
worth	O	O
the	O	O
effort	O	O
from	O	O
an	O	O
optimization	O	O
standpoint	O	O
.	O	O
But	O	O
I	O	O
still	O	O
just	O	O
find	O	O
it	O	O
curious	O	O
and	O	O
counter	O	O
-	O	O
intuitive	O	O
that	O	O
a	O	O
switch	O	O
doesn	O	O
'	O	O
t	O	O
become	O	O
slower	O	O
(	O	O
or	O	O
perhaps	O	O
at	O	O
best	O	O
maintain	O	O
constant	O	O
O	O	O
(	O	O
1	O	O
)	O	O
time	O	O
)	O	O
to	O	O
execute	O	O
as	O	O
more	O	O
case	O	O
s	O	O
are	O	O
added	O	O
to	O	O
it	O	O
.	O	O
#	O	O
img	O	O
These	O	O
are	O	O
the	O	O
results	O	O
I	O	O
obtained	O	O
from	O	O
running	O	O
with	O	O
various	O	O
limits	O	O
on	O	O
the	O	O
randomly	O	O
-	O	O
generated	O	O
exponent	O	O
values	O	O
.	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
include	O	O
the	O	O
results	O	O
all	O	O
the	O	O
way	O	O
down	O	O
to	O	O
1	O	O
for	O	O
the	O	O
exponent	O	O
limit	O	O
,	O	O
but	O	O
the	O	O
general	O	O
shape	O	O
of	O	O
the	O	O
curve	O	O
remains	O	O
the	O	O
same	O	O
,	O	O
with	O	O
a	O	O
ridge	O	O
around	O	O
the	O	O
12	O	O
-	O	O
17	O	O
case	O	O
mark	O	O
,	O	O
and	O	O
a	O	O
valley	O	O
between	O	O
18	O	O
-	O	O
28	O	O
.	O	O
All	O	O
tests	O	O
were	O	O
run	O	O
in	O	O
JUnitBenchmarks	O	O
using	O	O
shared	O	O
containers	O	O
for	O	O
the	O	O
random	O	O
values	O	O
to	O	O
ensure	O	O
identical	O	O
testing	O	O
inputs	O	O
.	O	O
I	O	O
also	O	O
ran	O	O
the	O	O
tests	O	O
both	O	O
in	O	O
order	O	O
from	O	O
longest	O	O
switch	O	O
statement	O	O
to	O	O
shortest	O	O
,	O	O
and	O	O
vice	O	O
-	O	O
versa	O	O
,	O	O
to	O	O
try	O	O
and	O	O
eliminate	O	O
the	O	O
possibility	O	O
of	O	O
ordering	O	O
-	O	O
related	O	O
test	O	O
problems	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
put	O	O
my	O	O
testing	O	O
code	O	O
up	O	O
on	O	O
a	O	O
github	O	O
repo	O	O
if	O	O
anyone	O	O
wants	O	O
to	O	O
try	O	O
to	O	O
reproduce	O	O
these	O	O
results	O	O
.	O	O
So	O	O
,	O	O
what	O	O
'	O	O
s	O	O
going	O	O
on	O	O
here	O	O
?	O	O
Some	O	O
vagaries	O	O
of	O	O
my	O	O
architecture	O	O
or	O	O
micro	O	O
-	O	O
benchmark	O	O
construction	O	O
?	O	O
Or	O	O
is	O	O
the	O	O
Java	O	O
switch	O	O
really	O	O
a	O	O
little	O	O
faster	O	O
to	O	O
execute	O	O
in	O	O
the	O	O
18	O	O
to	O	O
28	O	O
case	O	O
range	O	O
than	O	O
it	O	O
is	O	O
from	O	O
11	O	O
up	O	O
to	O	O
17	O	O
?	O	O
github	O	O
test	O	O
repo	O	O
"	O	O
switch	O	O
-	O	O
experiment	O	O
"	O	O
UPDATE	O	O
:	O	O
I	O	O
cleaned	O	O
up	O	O
the	O	O
benchmarking	O	O
library	O	O
quite	O	O
a	O	O
bit	O	O
and	O	O
added	O	O
a	O	O
text	O	O
file	O	O
in	O	O
/	O	O
results	O	O
with	O	O
some	O	O
output	O	O
across	O	O
a	O	O
wider	O	O
range	O	O
of	O	O
possible	O	O
exponent	O	O
values	O	O
.	O	O
I	O	O
also	O	O
added	O	O
an	O	O
option	O	O
in	O	O
the	O	O
testing	O	O
code	O	O
not	O	O
to	O	O
throw	O	O
an	O	O
Exception	B-api_mention	B-api_mention
from	O	O
default	O	O
,	O	O
but	O	O
this	O	O
doesn	O	O
'	O	O
t	O	O
appear	O	O
to	O	O
affect	O	O
the	O	O
results	O	O
.	O	O
UPDATE	O	O
2	O	O
:	O	O
Found	O	O
some	O	O
pretty	O	O
good	O	O
discussion	O	O
of	O	O
this	O	O
issue	O	O
from	O	O
back	O	O
in	O	O
2009	O	O
on	O	O
the	O	O
xkcd	O	O
forum	O	O
here	O	O
:	O	O
#	O	O
a	O	O
.	O	O
The	O	O
OP	O	O
'	O	O
s	O	O
discussion	O	O
of	O	O
using	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
binarySearch	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gave	O	O
me	O	O
the	O	O
idea	O	O
for	O	O
a	O	O
simple	O	O
array	O	O
-	O	O
based	O	O
implementation	O	O
of	O	O
the	O	O
exponentiation	O	O
pattern	O	O
above	O	O
.	O	O
There	O	O
'	O	O
s	O	O
no	O	O
need	O	O
for	O	O
the	O	O
binary	O	O
search	O	O
since	O	O
I	O	O
know	O	O
what	O	O
the	O	O
entries	O	O
in	O	O
the	O	O
array	O	O
are	O	O
.	O	O
It	O	O
appears	O	O
to	O	O
run	O	O
about	O	O
3	O	O
times	O	O
faster	O	O
than	O	O
using	O	O
switch	O	O
,	O	O
obviously	O	O
at	O	O
the	O	O
expense	O	O
of	O	O
some	O	O
of	O	O
the	O	O
control	O	O
flow	O	O
that	O	O
switch	O	O
affords	O	O
.	O	O
That	O	O
code	O	O
has	O	O
been	O	O
added	O	O
to	O	O
the	O	O
github	O	O
repo	O	O
also	O	O
.	O	O
Question	O	O
-	O	O
23453287	O	O
,	O	O
answer	O	O
-	O	O
23456085	O	O
It	O	O
will	O	O
be	O	O
hard	O	O
to	O	O
find	O	O
and	O	O
identify	O	O
"	O	O
THE	O	O
"	O	O
answer	O	O
,	O	O
for	O	O
the	O	O
resons	O	O
mentioned	O	O
in	O	O
the	O	O
comments	O	O
from	O	O
@	O	O
EJP	O	O
:	O	O
There	O	O
are	O	O
roughly	O	O
2	O	O
(	O	O
+	O	O
/	O	O
-	O	O
2	O	O
)	O	O
people	O	O
in	O	O
the	O	O
world	O	O
who	O	O
can	O	O
give	O	O
the	O	O
definite	O	O
answer	O	O
at	O	O
all	O	O
.	O	O
And	O	O
in	O	O
doubt	O	O
,	O	O
the	O	O
answer	O	O
might	O	O
just	O	O
be	O	O
something	O	O
like	O	O
"	O	O
Supporting	O	O
final	O	O
default	O	O
methods	O	O
did	O	O
not	O	O
seem	O	O
to	O	O
be	O	O
worth	O	O
the	O	O
effort	O	O
of	O	O
restructuring	O	O
the	O	O
internal	O	O
call	O	O
resolution	O	O
mechanisms	O	O
"	O	O
.	O	O
This	O	O
is	O	O
speculation	O	O
,	O	O
of	O	O
course	O	O
,	O	O
but	O	O
it	O	O
is	O	O
at	O	O
least	O	O
backed	O	O
by	O	O
subtle	O	O
evidences	O	O
,	O	O
like	O	O
this	O	O
Statement	O	O
(	O	O
by	O	O
one	O	O
of	O	O
the	O	O
two	O	O
persons	O	O
)	O	O
in	O	O
the	O	O
OpenJDK	O	O
mailing	O	O
list	O	O
:	O	O
#	O	O
blockquote	O	O
and	O	O
trivial	O	O
facts	O	O
like	O	O
that	O	O
a	O	O
method	O	O
is	O	O
simply	O	O
not	O	O
considered	O	O
to	O	O
be	O	O
a	O	O
(	O	O
really	O	O
)	O	O
final	O	O
method	O	O
when	O	O
it	O	O
is	O	O
a	O	O
default	O	O
method	O	O
,	O	O
as	O	O
currently	O	O
implemented	O	O
in	O	O
the	O	O
Method	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
is	I-api_mention	O
_	I-api_mention	O
final	I-api_mention	O
_	I-api_mention	O
method	I-api_mention	O
method	O	O
in	O	O
the	O	O
OpenJDK	O	O
.	O	O
Further	O	O
really	O	O
"	O	O
authorative	O	O
"	O	O
information	O	O
is	O	O
indeed	O	O
hard	O	O
to	O	O
find	O	O
,	O	O
even	O	O
with	O	O
excessive	O	O
websearches	O	O
and	O	O
by	O	O
reading	O	O
commit	O	O
logs	O	O
.	O	O
I	O	O
thought	O	O
that	O	O
it	O	O
might	O	O
be	O	O
related	O	O
to	O	O
potential	O	O
ambiguities	O	O
during	O	O
the	O	O
resolution	O	O
of	O	O
interface	O	O
method	O	O
calls	O	O
with	O	O
the	O	O
invokeinterface	B-api_mention	O
instruction	O	O
and	O	O
and	O	O
class	O	O
method	O	O
calls	O	O
,	O	O
corresponding	O	O
to	O	O
the	O	O
invokevirtual	B-api_mention	O
instruction	O	O
:	O	O
For	O	O
the	O	O
invokevirtual	B-api_mention	O
instruction	O	O
,	O	O
there	O	O
may	O	O
be	O	O
a	O	O
simple	O	O
vtable	O	O
lookup	O	O
,	O	O
because	O	O
the	O	O
method	O	O
must	O	O
either	O	O
be	O	O
inherited	O	O
from	O	O
a	O	O
superclass	O	O
,	O	O
or	O	O
implemented	O	O
by	O	O
the	O	O
class	O	O
directly	O	O
.	O	O
In	O	O
contrast	O	O
to	O	O
that	O	O
,	O	O
an	O	O
invokeinterface	B-api_mention	O
call	O	O
must	O	O
examine	O	O
the	O	O
respective	O	O
call	O	O
site	O	O
to	O	O
find	O	O
out	O	O
which	O	O
interface	O	O
this	O	O
call	O	O
actually	O	O
refers	O	O
to	O	O
(	O	O
this	O	O
is	O	O
explained	O	O
in	O	O
more	O	O
detail	O	O
in	O	O
the	O	O
InterfaceCalls	O	B-api_mention
page	O	O
of	O	O
the	O	O
HotSpot	O	O
Wiki	O	O
)	O	O
.	O	O
However	O	O
,	O	O
final	O	O
methods	O	O
do	O	O
either	O	O
not	O	O
get	O	O
inserted	O	O
into	O	O
the	O	O
vtable	O	O
at	O	O
all	O	O
,	O	O
or	O	O
replace	O	O
existing	O	O
entries	O	O
in	O	O
the	O	O
vtable	O	O
(	O	O
see	O	O
klassVtable	O	B-api_mention
.	O	O
cpp	O	O
.	O	O
Line	O	O
333	O	O
)	O	O
,	O	O
and	O	O
similarly	O	O
,	O	O
default	O	O
methods	O	O
are	O	O
replacing	O	O
existing	O	O
entries	O	O
in	O	O
the	O	O
vtable	O	O
(	O	O
see	O	O
klassVtable	O	O
.	O	O
cpp	O	O
,	O	O
Line	O	O
202	O	O
)	O	O
.	O	O
So	O	O
the	O	O
actual	O	O
reason	O	O
(	O	O
and	O	O
thus	O	O
,	O	O
the	O	O
answer	O	O
)	O	O
must	O	O
be	O	O
hidden	O	O
deeper	O	O
inside	O	O
the	O	O
(	O	O
rather	O	O
complex	O	O
)	O	O
method	O	O
call	O	O
resolution	O	O
mechanisms	O	O
,	O	O
but	O	O
maybe	O	O
these	O	O
references	O	O
will	O	O
nevertheless	O	O
be	O	O
considered	O	O
as	O	O
being	O	O
helpful	O	O
,	O	O
be	O	O
it	O	O
only	O	O
for	O	O
others	O	O
that	O	O
manage	O	O
to	O	O
derive	O	O
the	O	O
actual	O	O
answer	O	O
from	O	O
that	O	O
.	O	O
Question	O	O
-	O	O
28459498	O	O
,	O	O
answer	O	O
-	O	O
28465634	O	O
I	O	O
think	O	O
there	O	O
are	O	O
very	O	O
few	O	O
differences	O	O
between	O	O
the	O	O
two	O	O
when	O	O
you	O	O
look	O	O
closely	O	O
enough	O	O
.	O	O
At	O	O
it	O	O
'	O	O
s	O	O
face	O	O
,	O	O
an	O	O
IEnumerable	O	O
does	O	O
appear	O	O
to	O	O
be	O	O
a	O	O
reusable	O	O
construct	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
the	O	O
compiler	O	O
is	O	O
actually	O	O
doing	O	O
a	O	O
little	O	O
bit	O	O
of	O	O
work	O	O
to	O	O
help	O	O
us	O	O
out	O	O
;	O	O
it	O	O
generates	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Each	O	O
time	O	O
you	O	O
would	O	O
actually	O	O
iterate	O	O
over	O	O
the	O	O
enumerable	O	O
,	O	O
the	O	O
compiler	O	O
creates	O	O
an	O	O
enumerator	O	O
.	O	O
The	O	O
enumerator	O	O
is	O	O
not	O	O
reusable	O	O
;	O	O
further	O	O
calls	O	O
to	O	O
MoveNext	B-api_mention	B-api_mention
will	O	O
just	O	O
return	O	O
false	O	O
,	O	O
and	O	O
there	O	O
is	O	O
no	O	O
way	O	O
to	O	O
reset	O	O
it	O	O
to	O	O
the	O	O
beginning	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
iterate	O	O
over	O	O
the	O	O
numbers	O	O
again	O	O
,	O	O
you	O	O
will	O	O
need	O	O
to	O	O
create	O	O
another	O	O
enumerator	O	O
instance	O	O
.	O	O
To	O	O
better	O	O
illustrate	O	O
that	O	O
the	O	O
IEnumerable	O	O
has	O	O
(	O	O
can	O	O
have	O	O
)	O	O
the	O	O
same	O	O
'	O	O
feature	O	O
'	O	O
as	O	O
a	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
,	O	O
consider	O	O
a	O	O
enumerable	O	O
whose	O	O
source	O	O
of	O	O
the	O	O
numbers	O	O
is	O	O
not	O	O
a	O	O
static	O	O
collection	O	O
.	O	O
For	O	O
example	O	O
,	O	O
we	O	O
can	O	O
create	O	O
an	O	O
enumerable	O	O
object	O	O
which	O	O
generates	O	O
a	O	O
sequence	O	O
of	O	O
5	O	O
random	O	O
numbers	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
we	O	O
have	O	O
very	O	O
similar	O	O
code	O	O
to	O	O
the	O	O
previous	O	O
array	O	O
-	O	O
based	O	O
enumerable	O	O
,	O	O
but	O	O
with	O	O
a	O	O
second	O	O
iteration	O	O
over	O	O
numbers	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
second	O	O
time	O	O
we	O	O
iterate	O	O
over	O	O
numbers	O	O
we	O	O
will	O	O
get	O	O
a	O	O
different	O	O
sequence	O	O
of	O	O
numbers	O	O
,	O	O
which	O	O
isn	O	O
'	O	O
t	O	O
reusable	O	O
in	O	O
the	O	O
same	O	O
sense	O	O
.	O	O
Or	O	O
,	O	O
we	O	O
could	O	O
have	O	O
written	O	O
the	O	O
RandomNumberStream	B-api_mention	B-api_mention
to	O	O
thrown	O	O
an	O	O
exception	O	O
if	O	O
you	O	O
try	O	O
to	O	O
iterate	O	O
over	O	O
it	O	O
multiple	O	O
times	O	O
,	O	O
making	O	O
the	O	O
enumerable	O	O
actually	O	O
unusable	O	O
(	O	O
like	O	O
a	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
)	O	O
.	O	O
Also	O	O
,	O	O
what	O	O
does	O	O
your	O	O
enumerable	O	O
-	O	O
based	O	O
quick	O	O
sort	O	O
mean	O	O
when	O	O
applied	O	O
to	O	O
a	O	O
RandomNumberStream	B-api_mention	B-api_mention
?	O	O
Conclusion	O	O
So	O	O
,	O	O
the	O	O
biggest	O	O
difference	O	O
is	O	O
that	O	O
.	O	O
NET	O	O
allows	O	O
you	O	O
to	O	O
reuse	O	O
an	O	O
IEnumerable	O	O
by	O	O
implicitly	O	O
creating	O	O
a	O	O
new	O	O
IEnumerator	O	O
in	O	O
the	O	O
background	O	O
whenever	O	O
it	O	O
would	O	O
need	O	O
to	O	O
access	O	O
elements	O	O
in	O	O
the	O	O
sequence	O	O
.	O	O
This	O	O
implicit	O	O
behavior	O	O
is	O	O
often	O	O
useful	O	O
(	O	O
and	O	O
'	O	O
powerful	O	O
'	O	O
as	O	O
you	O	O
state	O	O
)	O	O
,	O	O
because	O	O
we	O	O
can	O	O
repeatedly	O	O
iterate	O	O
over	O	O
a	O	O
collection	O	O
.	O	O
But	O	O
sometimes	O	O
,	O	O
this	O	O
implicit	O	O
behavior	O	O
can	O	O
actually	O	O
cause	O	O
problems	O	O
.	O	O
If	O	O
your	O	O
data	O	O
source	O	O
is	O	O
not	O	O
static	O	O
,	O	O
or	O	O
is	O	O
costly	O	O
to	O	O
access	O	O
(	O	O
like	O	O
a	O	O
database	O	O
or	O	O
web	O	O
site	O	O
)	O	O
,	O	O
then	O	O
a	O	O
lot	O	O
of	O	O
assumptions	O	O
about	O	O
IEnumerable	O	O
have	O	O
to	O	O
be	O	O
discarded	O	O
;	O	O
reuse	O	O
is	O	O
not	O	O
that	O	O
straight	O	O
-	O	O
forward	O	O
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
28821352	O	O
It	O	O
'	O	O
s	O	O
not	O	O
pretty	O	O
,	O	O
but	O	O
this	O	O
will	O	O
work	O	O
:	O	O
return	O	O
serviceA	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	B-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
fairly	O	O
handy	O	O
pattern	O	O
for	O	O
use	O	O
with	O	O
Optional	B-api_mention	B-api_mention
.	O	O
It	O	O
means	O	O
"	O	O
If	O	O
this	O	O
Optional	B-api_mention	B-api_mention
contains	O	O
value	O	O
v	O	O
,	O	O
give	O	O
me	O	O
func	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
otherwise	O	O
give	O	O
me	O	O
sup	O	O
.	B-api_mention	B-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
we	O	O
call	O	O
serviceA	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
and	O	O
get	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
If	O	O
that	O	O
Optional	B-api_mention	B-api_mention
contains	O	O
value	O	O
v	O	O
,	O	O
we	O	O
want	O	O
to	O	O
get	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
if	O	O
it	O	O
is	O	O
empty	O	O
,	O	O
we	O	O
want	O	O
to	O	O
get	O	O
serviceB	O	O
(	O	O
args	O	O
)	O	O
.	O	O
Rinse	O	O
-	O	O
repeat	O	O
with	O	O
more	O	O
alternatives	O	O
.	O	O
Other	O	O
uses	O	O
of	O	O
this	O	O
pattern	O	O
are	O	O
#	O	O
li	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
31270759	O	O
,	O	O
answer	O	O
-	O	O
31273726	O	O
What	O	O
if	O	O
every	O	O
functional	O	O
interface	O	O
provided	O	O
by	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
was	O	O
allowed	O	O
to	O	O
throw	O	O
an	O	O
exception	O	O
?	O	O
#	O	O
pre	O	O
We	O	O
could	O	O
use	O	O
some	O	O
default	O	O
methods	O	O
to	O	O
provide	O	O
the	O	O
behavior	O	O
you	O	O
want	O	O
.	O	O
#	O	O
li	O	O
You	O	O
could	O	O
fallback	O	O
to	O	O
some	O	O
default	O	O
value	O	O
or	O	O
action	O	O
#	O	O
li	O	O
Or	O	O
you	O	O
could	O	O
try	O	O
to	O	O
perform	O	O
another	O	O
action	O	O
which	O	O
may	O	O
throw	O	O
an	O	O
exception	O	O
I	O	O
'	O	O
ve	O	O
written	O	O
a	O	O
library	O	O
which	O	O
redefines	O	O
most	O	O
of	O	O
the	O	O
interfaces	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
this	O	O
way	O	O
.	O	O
I	O	O
even	O	O
provide	O	O
a	O	O
ThrowingStream	B-api_mention	B-api_mention
which	O	O
let	O	O
'	O	O
s	O	O
you	O	O
use	O	O
these	O	O
new	O	O
interfaces	O	O
with	O	O
the	O	O
same	O	O
API	O	O
as	O	O
a	O	O
regular	O	O
Stream	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
(	O	O
Nothing	O	O
is	O	O
a	O	O
RuntimeException	B-api_mention	B-api_mention
that	O	O
can	O	O
never	O	O
be	O	O
thrown	O	O
.	O	O
)	O	O
Your	O	O
original	O	O
example	O	O
would	O	O
become	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
11411022	O	O
,	O	O
answer	O	O
-	O	O
34052602	O	O
The	O	O
best	O	O
way	O	O
is	O	O
the	O	O
clearest	O	O
way	O	O
:	O	O
*	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentThread	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Looper	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getMainLooper	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getThread	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Or	O	O
,	O	O
if	O	O
the	O	O
runtime	O	O
platform	O	O
is	O	O
API	O	O
level	O	O
23	O	O
(	O	O
Marshmallow	O	O
6	O	O
.	O	O
0	O	O
)	O	O
or	O	O
higher	O	O
:	O	O
Looper	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getMainLooper	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
isCurrentThread	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
See	O	O
the	O	O
Looper	B-api_mention	O
API	O	O
.	O	O
Note	O	O
that	O	O
calling	O	O
Looper	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getMainLooper	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
involves	O	O
synchonization	O	O
(	O	O
see	O	O
the	O	O
source	O	O
)	O	O
.	O	O
You	O	O
might	O	O
want	O	O
to	O	O
avoid	O	O
the	O	O
overhead	O	O
by	O	O
storing	O	O
the	O	O
return	O	O
value	O	O
and	O	O
reusing	O	O
it	O	O
.	O	O
*	O	O
credit	O	O
greg7gkb	O	O
Question	O	O
-	O	O
16232833	O	O
,	O	O
answer	O	O
-	O	O
16250729	O	O
change	O	O
your	O	O
return	O	O
type	O	O
to	O	O
ResponseEntity	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
then	O	O
you	O	O
can	O	O
use	O	O
below	O	O
for	O	O
400	O	O
return	O	O
new	O	O
ResponseEntity	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
for	O	O
correct	O	O
request	O	O
return	O	O
new	O	O
ResponseEntity	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
UPDATE	O	O
1	O	O
after	O	O
spring	O	O
4	O	O
.	O	O
1	O	O
there	O	O
are	O	O
helper	O	O
methods	O	O
in	O	O
ResponseEntity	B-api_mention	B-api_mention
could	O	O
be	O	O
used	O	O
as	O	O
return	O	O
ResponseEntity	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
status	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
body	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
return	O	O
ResponseEntity	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ok	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
25850328	O	O
,	O	O
answer	O	O
-	O	O
31838310	O	O
The	O	O
main	O	O
purpose	O	O
of	O	O
marker	B-api_mention	O
interfaces	O	O
is	O	O
to	O	O
create	O	O
special	O	O
types	O	O
where	O	O
types	O	O
themselves	O	O
have	O	O
no	O	O
behavior	O	O
of	O	O
their	O	O
own	O	O
.	O	O
#	O	O
pre	O	O
Here	O	O
save	O	O
method	O	O
makes	O	O
sure	O	O
that	O	O
only	O	O
the	O	O
objects	O	O
of	O	O
classes	O	O
that	O	O
implement	O	O
the	O	O
MarkerEntity	B-api_mention	B-api_mention
interface	O	O
are	O	O
saved	O	O
,	O	O
for	O	O
other	O	O
types	O	O
InvalidEntityFoundException	B-api_mention	B-api_mention
is	O	O
thrown	O	O
.	O	O
So	O	O
here	O	O
MarkerEntity	B-api_mention	B-api_mention
marker	O	O
interface	O	O
is	O	O
defining	O	O
a	O	O
type	O	O
that	O	O
adds	O	O
special	O	O
behavior	O	O
to	O	O
the	O	O
classes	O	O
implementing	O	O
it	O	O
.	O	O
Though	O	O
annotations	O	O
can	O	O
also	O	O
used	O	O
now	O	O
to	O	O
mark	O	O
classes	O	O
for	O	O
some	O	O
special	O	O
treatments	O	O
but	O	O
marker	O	O
annotations	O	O
are	O	O
replacement	O	O
for	O	O
naming	O	O
pattern	O	O
not	O	O
for	O	O
Marker	B-api_mention	B-api_mention
interfaces	O	O
.	O	O
But	O	O
marker	O	O
annotations	O	O
can	O	O
'	O	O
t	O	O
fully	O	O
replace	O	O
the	O	O
marker	O	O
interfaces	O	O
because	O	O
;	O	O
marker	O	O
interfaces	O	O
are	O	O
used	O	O
to	O	O
define	O	O
type	O	O
(	O	O
as	O	O
already	O	O
explained	O	O
above	O	O
)	O	O
where	O	O
as	O	O
marker	B-api_mention	O
annotations	O	O
do	O	O
not	O	O
.	O	O
Source	O	O
for	O	O
marker	B-api_mention	O
interface	O	O
comment	O	O
Question	O	O
-	O	O
21163108	O	O
,	O	O
answer	O	O
-	O	O
21172732	O	O
The	O	O
parallel	O	O
streams	O	O
use	O	O
the	O	O
default	O	O
ForkJoinPool	B-api_mention	B-api_mention
which	O	O
by	O	O
default	O	O
has	O	O
one	O	O
less	O	O
threads	O	O
as	O	O
you	O	O
have	O	O
processors	O	O
,	O	O
as	O	O
returned	O	O
by	O	O
Runtime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getRuntime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
availableProcessors	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
so	O	O
parallel	O	O
streams	O	O
use	O	O
all	O	O
your	O	O
processors	O	O
because	O	O
they	O	O
also	O	O
use	O	O
the	O	O
main	O	O
thread	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
To	O	O
change	O	O
the	O	O
way	O	O
parallel	O	O
streams	O	O
are	O	O
executed	O	O
,	O	O
you	O	O
can	O	O
either	O	O
#	O	O
li	O	O
submit	O	O
the	O	O
parallel	O	O
stream	O	O
execution	O	O
to	O	O
your	O	O
own	O	O
ForkJoinPool	B-api_mention	O
:	O	O
yourFJP	O	O
.	B-api_mention	B-api_mention
submit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
#	O	O
li	O	O
you	O	O
can	O	O
change	O	O
the	O	O
size	O	O
of	O	O
the	O	O
common	O	O
pool	O	O
using	O	O
system	O	O
properties	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setProperty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
a	O	O
target	O	O
parallelism	O	O
of	O	O
20	O	O
threads	O	O
.	O	O
Example	O	O
of	O	O
the	O	O
latter	O	O
on	O	O
my	O	O
machine	O	O
which	O	O
has	O	O
8	O	O
processors	O	O
.	O	O
If	O	O
I	O	O
run	O	O
the	O	O
following	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
output	O	O
is	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
you	O	O
can	O	O
see	O	O
that	O	O
the	O	O
parallel	O	O
stream	O	O
processes	O	O
8	O	O
items	O	O
at	O	O
a	O	O
time	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
uses	O	O
8	O	O
threads	O	O
.	O	O
However	O	O
if	O	O
I	O	O
uncomment	O	O
the	O	O
commented	O	O
line	O	O
,	O	O
the	O	O
output	O	O
is	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
time	O	O
the	O	O
parallel	O	O
stream	O	O
has	O	O
used	O	O
20	O	O
threads	O	O
and	O	O
all	O	O
20	O	O
elements	O	O
in	O	O
the	O	O
stream	O	O
have	O	O
been	O	O
processed	O	O
comcurrently	O	O
.	O	O
Question	O	O
-	O	O
10786042	O	O
Say	O	O
I	O	O
have	O	O
a	O	O
URL	O	O
http	O	O
:	O	O
/	O	O
/	O	O
example	O	O
.	O	O
com	O	O
/	O	O
query	O	O
?	O	O
q	O	O
=	O	O
and	O	O
I	O	O
have	O	O
a	O	O
query	O	O
entered	O	O
by	O	O
the	O	O
user	O	O
such	O	O
as	O	O
:	O	O
#	O	O
blockquote	O	O
I	O	O
want	O	O
the	O	O
result	O	O
to	O	O
be	O	O
a	O	O
properly	O	O
encoded	O	O
URL	O	O
:	O	O
http	O	O
:	O	O
/	O	O
/	O	O
example	O	O
.	O	O
com	O	O
/	O	O
query	O	O
?	O	O
q	O	O
=	O	O
random	O	O
%	O	O
20word	O	O
%	O	O
20	O	O
%	O	O
A3500	O	O
%	O	O
20bank	O	O
%	O	O
20	O	O
%	O	O
24	O	O
What	O	O
'	O	O
s	O	O
the	O	O
best	O	O
way	O	O
to	O	O
achieve	O	O
this	O	O
?	O	O
I	O	O
tried	O	O
URLEncoder	B-api_mention	B-api_mention
and	O	O
creating	O	O
URI	O	O
/	O	O
URL	O	O
objects	O	O
but	O	O
none	O	O
of	O	O
them	O	O
come	O	O
out	O	O
quite	O	O
right	O	O
.	O	O
Question	O	O
-	O	O
29922296	O	O
,	O	O
answer	O	O
-	O	O
29922469	O	O
My	O	O
guess	O	O
is	O	O
that	O	O
enums	O	O
are	O	O
limited	O	O
in	O	O
size	O	O
(	O	O
i	O	O
.	O	O
e	O	O
the	O	O
size	O	O
is	O	O
not	O	O
limited	O	O
by	O	O
language	O	O
but	O	O
limited	O	O
by	O	O
usage	O	O
)	O	O
and	O	O
thus	O	O
they	O	O
don	O	O
'	O	O
t	O	O
need	O	O
a	O	O
native	O	O
stream	O	O
api	O	O
.	O	O
Streams	O	B-api_mention
are	O	O
very	O	O
good	O	O
when	O	O
you	O	O
have	O	O
to	O	O
manipulate	O	O
transform	O	O
and	O	O
recollect	O	O
the	O	O
elements	O	O
in	O	O
a	O	O
stream	O	O
;	O	O
these	O	O
are	O	O
not	O	O
common	O	O
uses	O	O
case	O	O
for	O	O
Enum	O	B-api_mention
(	O	O
usually	O	O
you	O	O
iterate	O	O
over	O	O
enum	O	O
values	O	O
,	O	O
but	O	O
rarely	O	O
you	O	O
need	O	O
to	O	O
transform	O	O
,	O	O
map	O	O
and	O	O
collect	O	O
them	O	O
)	O	O
.	O	O
If	O	O
you	O	O
need	O	O
only	O	O
to	O	O
do	O	O
an	O	O
action	O	O
over	O	O
each	O	O
elements	O	O
perhaps	O	O
you	O	O
should	O	O
expose	O	O
only	O	O
a	O	O
forEach	B-api_mention	B-api_mention
method	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
5868454	O	O
You	O	O
need	O	O
to	O	O
use	O	O
the	O	O
readLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
class	O	O
BufferedReader	B-api_mention	B-api_mention
.	O	O
Create	O	O
a	O	O
new	O	O
object	O	O
from	O	O
that	O	O
class	O	O
and	O	O
operate	O	O
this	O	O
method	O	O
on	O	O
him	O	O
and	O	O
save	O	O
it	O	O
to	O	O
a	O	O
string	O	O
.	O	O
BufferReader	B-api_mention	B-api_mention
API	O	O
Question	O	O
-	O	O
15202997	O	O
,	O	O
answer	O	O
-	O	O
37603567	O	O
this	O	O
is	O	O
best	O	O
document	O	O
I	O	O
found	O	O
describing	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
a	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
17828584	O	O
,	O	O
answer	O	O
-	O	O
17832168	O	O
I	O	O
think	O	O
the	O	O
number	O	O
displayed	O	O
is	O	O
the	O	O
number	O	O
of	O	O
time	O	O
the	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
call	O	O
throws	O	O
the	O	O
Stackoverflow	B-api_mention	O
exception	O	O
.	O	O
It	O	O
probably	O	O
depend	O	O
on	O	O
the	O	O
implementation	O	O
of	O	O
the	O	O
println	B-api_mention	O
and	O	O
the	O	O
number	O	O
of	O	O
stacking	O	O
call	O	O
it	O	O
is	O	O
made	O	O
in	O	O
it	O	O
.	O	O
As	O	O
an	O	O
illustration	O	O
:	O	O
The	O	O
main	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
trigger	O	O
the	O	O
Stackoverflow	B-api_mention	O
exception	O	O
at	O	O
call	O	O
i	O	O
.	O	O
The	O	O
i	O	O
-	O	O
1	O	O
call	O	O
of	O	O
main	O	O
catch	O	O
the	O	O
exception	O	O
and	O	O
call	O	O
println	B-api_mention	O
which	O	O
trigger	O	O
a	O	O
second	O	O
Stackoverflow	B-api_mention	O
.	O	O
cnt	O	O
get	O	O
increment	O	O
to	O	O
1	O	O
.	O	O
The	O	O
i	O	O
-	O	O
2	O	O
call	O	O
of	O	O
main	O	O
catch	O	O
now	O	O
the	O	O
exception	O	O
and	O	O
call	O	O
println	B-api_mention	O
.	O	O
In	O	O
println	B-api_mention	O
a	O	O
method	O	O
is	O	O
called	O	O
triggering	O	O
a	O	O
3rd	O	O
exception	O	O
.	O	O
cnt	O	O
get	O	O
increment	O	O
to	O	O
2	O	O
.	O	O
this	O	O
continue	O	O
until	O	O
println	B-api_mention	O
can	O	O
make	O	O
all	O	O
its	O	O
needed	O	O
call	O	O
and	O	O
finally	O	O
display	O	O
the	O	O
value	O	O
of	O	O
cnt	O	O
.	O	O
This	O	O
is	O	O
then	O	O
dependent	O	O
of	O	O
the	O	O
actual	O	O
implementation	O	O
of	O	O
println	B-api_mention	O
.	O	O
For	O	O
the	O	O
JDK7	O	O
either	O	O
it	O	O
detect	O	O
cycling	O	O
call	O	O
and	O	O
throws	O	O
the	O	O
exception	O	O
earlier	O	O
either	O	O
it	O	O
keep	O	O
some	O	O
stack	O	O
resource	O	O
and	O	O
throw	O	O
the	O	O
exception	O	O
before	O	O
reaching	O	O
the	O	O
limit	O	O
to	O	O
give	O	O
some	O	O
room	O	O
for	O	O
remediation	O	O
logic	O	O
either	O	O
the	O	O
println	O	O
implementation	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
calls	O	O
either	O	O
the	O	O
+	O	O
+	O	O
operation	O	O
is	O	O
done	O	O
after	O	O
the	O	O
println	B-api_mention	O
call	O	O
thus	O	O
is	O	O
by	O	O
pass	O	O
by	O	O
the	O	O
exception	O	O
.	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32177563	O	O
The	O	O
other	O	O
answers	O	O
have	O	O
already	O	O
answered	O	O
your	O	O
question	O	O
-	O	O
no	O	O
,	O	O
this	O	O
is	O	O
not	O	O
possible	O	O
with	O	O
the	O	O
Java	O	O
'	O	O
s	O	O
primitive	O	O
wrapper	O	O
classes	O	O
.	O	O
I	O	O
'	O	O
ll	O	O
try	O	O
to	O	O
address	O	O
the	O	O
"	O	O
question	O	O
behind	O	O
the	O	O
question	O	O
"	O	O
:	O	O
Is	O	O
this	O	O
possible	O	O
with	O	O
other	O	O
classes	O	O
?	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
actually	O	O
a	O	O
good	O	O
question	O	O
,	O	O
and	O	O
the	O	O
answer	O	O
is	O	O
:	O	O
Yes	O	O
,	O	O
it	O	O
is	O	O
possible	O	O
to	O	O
create	O	O
such	O	O
a	O	O
situation	O	O
,	O	O
and	O	O
yes	O	O
,	O	O
it	O	O
would	O	O
make	O	O
Aristotle	O	O
angry	O	O
.	O	O
Actually	O	O
,	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
if	O	O
it	O	O
would	O	O
make	O	O
Aristotle	O	O
angry	O	O
,	O	O
not	O	O
having	O	O
known	O	O
him	O	O
,	O	O
but	O	O
it	O	O
will	O	O
certainly	O	O
cause	O	O
a	O	O
lot	O	O
of	O	O
grief	O	O
for	O	O
whoever	O	O
has	O	O
to	O	O
work	O	O
with	O	O
the	O	O
code	O	O
.	O	O
The	O	O
thing	O	O
is	O	O
:	O	O
There	O	O
is	O	O
a	O	O
contract	O	O
associated	O	O
with	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
Javadocs	O	O
for	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
Yes	O	O
,	O	O
when	O	O
creating	O	O
your	O	O
own	O	O
class	O	O
,	O	O
you	O	O
can	O	O
violate	O	O
this	O	O
contract	O	O
.	O	O
There	O	O
is	O	O
(	O	O
unfortunately	O	O
)	O	O
nothing	O	O
in	O	O
the	O	O
compiler	O	O
or	O	O
runtime	O	O
stopping	O	O
you	O	O
.	O	O
However	O	O
,	O	O
a	O	O
lot	O	O
of	O	O
code	O	O
relies	O	O
on	O	O
this	O	O
contract	O	O
,	O	O
so	O	O
if	O	O
you	O	O
violate	O	O
it	O	O
,	O	O
any	O	O
code	O	O
that	O	O
uses	O	O
equals	B-api_mention	B-api_mention
will	O	O
probably	O	O
fail	O	O
in	O	O
mysterious	O	O
ways	O	O
.	O	O
One	O	O
example	O	O
:	O	O
Java	O	O
'	O	O
s	O	O
own	O	O
Collection	B-api_mention	B-api_mention
classes	O	O
(	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collection	I-api_mention	I-api_mention
and	O	O
friends	O	O
)	O	O
rely	O	O
on	O	O
equals	B-api_mention	O
.	O	O
If	O	O
an	O	O
instance	O	O
of	O	O
a	O	O
class	O	O
that	O	O
does	O	O
not	O	O
correctly	O	O
implement	O	O
equals	B-api_mention	B-api_mention
is	O	O
put	O	O
into	O	O
a	O	O
collection	O	O
,	O	O
weird	O	O
things	O	O
happen	O	O
,	O	O
such	O	O
as	O	O
the	O	O
collection	O	O
sometimes	O	O
containing	O	O
the	O	O
instance	O	O
and	O	O
sometimes	O	O
not	O	O
.	O	O
Question	O	O
-	O	O
4871051	O	O
,	O	O
answer	O	O
-	O	O
21274808	O	O
Use	O	O
CodeSource	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
getLocation	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
works	O	O
fine	O	O
in	O	O
JAR	O	O
files	O	O
as	O	O
well	O	O
.	O	O
You	O	O
can	O	O
obtain	O	O
CodeSource	B-api_mention	B-api_mention
by	O	O
ProtectionDomain	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
getCodeSource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
the	O	O
ProtectionDomain	B-api_mention	B-api_mention
in	O	O
turn	O	O
can	O	O
be	O	O
obtained	O	O
by	O	O
Class	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
getProtectionDomain	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
35399386	O	O
The	O	O
String	B-api_mention	B-api_mention
pool	O	O
(	O	O
aka	O	O
interning	O	O
)	O	O
and	O	O
Integer	B-api_mention	B-api_mention
pool	O	O
blur	O	O
the	O	O
difference	O	O
further	O	O
,	O	O
and	O	O
may	O	O
allow	O	O
you	O	O
to	O	O
use	O	O
=	O	O
=	O	O
for	O	O
objects	O	O
in	O	O
some	O	O
cases	O	O
instead	O	O
of	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
This	O	O
can	O	O
give	O	O
you	O	O
greater	O	O
performance	O	O
(	O	O
?	O	O
)	O	O
,	O	O
at	O	O
the	O	O
cost	O	O
of	O	O
greater	O	O
complexity	O	O
.	O	O
E	O	O
.	O	O
g	O	O
.	O	O
:	O	O
#	O	O
pre	O	O
Complexity	O	O
tradeoff	O	O
:	O	O
the	O	O
following	O	O
may	O	O
surprise	O	O
you	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
advise	O	O
you	O	O
to	O	O
stay	O	O
away	O	O
from	O	O
such	O	O
micro	O	O
-	O	O
optimization	O	O
,	O	O
and	O	O
always	O	O
use	O	O
.	O	B-api_mention
equals	O	I-api_mention
for	O	O
objects	O	O
,	O	O
and	O	O
=	O	O
=	O	O
for	O	O
primitives	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
26159918	O	O
invoke	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
executing	O	O
on	O	O
the	O	O
calling	O	O
thread	O	O
,	O	O
like	O	O
any	O	O
other	O	O
method	O	O
call	O	O
.	O	O
whereas	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
a	O	O
new	O	O
thread	O	O
.	O	O
invoking	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
programmatic	O	O
bug	O	O
.	O	O
Question	O	O
-	O	O
24631909	O	O
,	O	O
answer	O	O
-	O	O
24635657	O	O
Common	O	O
features	O	O
a	O	O
)	O	O
Both	O	O
libraries	O	O
use	O	O
immutable	O	O
types	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
also	O	O
offers	O	O
additional	O	O
mutable	O	O
types	O	O
like	O	O
MutableDateTime	B-api_mention	O
.	O	O
b	O	O
)	O	O
Furthermore	O	O
:	O	O
Both	O	O
libraries	O	O
are	O	O
inspired	O	O
by	O	O
the	O	O
design	O	O
study	O	O
"	O	O
TimeAndMoney	O	O
"	O	O
from	O	O
Eric	O	O
Evans	O	O
or	O	O
ideas	O	O
from	O	O
Martin	O	O
Fowler	O	O
about	O	O
domain	O	O
driven	O	O
style	O	O
so	O	O
they	O	O
strive	O	O
more	O	O
or	O	O
less	O	O
for	O	O
a	O	O
fluent	O	O
programming	O	O
style	O	O
(	O	O
although	O	O
not	O	O
always	O	O
perfect	O	O
;	O	O
-	O	O
)	O	O
)	O	O
.	O	O
c	O	O
)	O	O
With	O	O
both	O	O
libraries	O	O
we	O	O
get	O	O
a	O	O
real	O	O
calendar	O	O
date	O	O
type	O	O
(	O	O
called	O	O
LocalDate	B-api_mention	B-api_mention
)	O	O
,	O	O
a	O	O
real	O	O
wall	O	O
time	O	O
type	O	O
(	O	O
called	O	O
LocalTime	B-api_mention	B-api_mention
)	O	O
and	O	O
the	O	O
composition	O	O
(	O	O
called	O	O
LocalDateTime	B-api_mention	B-api_mention
)	O	O
.	O	O
That	O	O
is	O	O
a	O	O
very	O	O
big	O	O
win	O	O
compared	O	O
with	O	O
old	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Calendar	I-api_mention	I-api_mention
and	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	O	O
d	O	O
)	O	O
Both	O	O
libraries	O	O
use	O	O
a	O	O
method	O	O
-	O	O
centric	O	O
approach	O	O
meaning	O	O
they	O	O
encourage	O	O
the	O	O
user	O	O
to	O	O
use	O	O
getDayOfYear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
of	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
causes	O	O
a	O	O
lot	O	O
of	O	O
extra	O	O
methods	O	O
compared	O	O
with	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Calendar	I-api_mention	I-api_mention
(	O	O
although	O	O
latter	O	O
is	O	O
not	O	O
type	O	O
-	O	O
safe	O	O
at	O	O
all	O	O
due	O	O
to	O	O
excessive	O	O
use	O	O
of	O	O
ints	O	O
)	O	O
.	O	O
Performance	O	O
See	O	O
the	O	O
other	O	O
answer	O	O
by	O	O
@	O	O
OO7	O	O
pointing	O	O
to	O	O
the	O	O
analysis	O	O
of	O	O
Mikhail	O	O
Vorontsov	O	O
although	O	O
point	O	O
3	O	O
(	O	O
exception	O	O
catching	O	O
)	O	O
is	O	O
probably	O	O
obsolete	O	O
-	O	O
see	O	O
this	O	O
JDK	O	O
-	O	O
bug	O	O
.	O	O
The	O	O
different	O	O
performance	O	O
(	O	O
which	O	O
is	O	O
in	O	O
general	O	O
favour	O	O
of	O	O
JSR	O	O
-	O	O
310	O	O
)	O	O
is	O	O
mainly	O	O
due	O	O
to	O	O
the	O	O
fact	O	O
that	O	O
the	O	O
internal	O	O
implementation	O	O
of	O	O
Joda	O	O
-	O	O
Time	O	O
always	O	O
use	O	O
a	O	O
machine	O	O
-	O	O
time	O	O
-	O	O
like	O	O
long	O	O
-	O	O
primitive	O	O
(	O	O
in	O	O
milliseconds	O	O
)	O	O
.	O	O
Null	O	O
Joda	O	O
-	O	O
Time	O	O
often	O	O
use	O	O
NULL	O	O
as	O	O
default	O	O
for	O	O
system	O	O
timezone	O	O
,	O	O
default	O	O
locale	O	O
,	O	O
current	O	O
timestamp	O	O
etc	O	O
.	O	O
while	O	O
JSR	O	O
-	O	O
310	O	O
almost	O	O
always	O	O
rejects	O	O
NULL	O	O
values	O	O
.	O	O
Precision	O	O
JSR	O	O
-	O	O
310	O	O
handles	O	O
nanosecond	O	O
precision	O	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
is	O	O
limited	O	O
to	O	O
millisecond	O	O
precision	O	O
.	O	O
Supported	O	O
fields	O	O
:	O	O
An	O	O
overview	O	O
about	O	O
supported	O	O
fields	O	O
in	O	O
Java	O	O
-	O	O
8	O	O
(	O	O
JSR	O	O
-	O	O
310	O	O
)	O	O
is	O	O
given	O	O
by	O	O
some	O	O
classes	O	O
in	O	O
the	O	O
temporal	O	O
-	O	O
package	O	O
(	O	O
for	O	O
example	O	O
ChronoField	B-api_mention	B-api_mention
and	O	O
WeekFields	B-api_mention	B-api_mention
)	O	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
is	O	O
rather	O	O
weak	O	O
on	O	O
this	O	O
area	O	O
-	O	O
see	O	O
DateTimeFieldType	B-api_mention	B-api_mention
.	O	O
The	O	O
biggest	O	O
lack	O	O
of	O	O
Joda	O	O
-	O	O
Time	O	O
is	O	O
here	O	O
the	O	O
absence	O	O
of	O	O
localized	O	O
week	O	O
-	O	O
related	O	O
fields	O	O
.	O	O
A	O	O
common	O	O
feature	O	O
of	O	O
both	O	O
field	O	O
implementation	O	O
design	O	O
is	O	O
that	O	O
both	O	O
are	O	O
based	O	O
on	O	O
values	O	O
of	O	O
type	O	O
long	O	O
(	O	O
no	O	O
other	O	O
types	O	O
,	O	O
not	O	O
even	O	O
enums	O	O
)	O	O
.	O	O
Enum	O	O
JSR	O	O
-	O	O
310	O	O
offers	O	O
enums	O	O
like	O	O
DayOfWeek	B-api_mention	B-api_mention
or	O	O
Month	B-api_mention	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
does	O	O
not	O	O
offer	O	O
this	O	O
because	O	O
it	O	O
was	O	O
mainly	O	O
developed	O	O
in	O	O
years	O	O
2002	O	O
-	O	O
2004	O	O
before	O	O
Java	O	O
5	O	O
.	O	O
Zone	O	O
API	O	O
a	O	O
)	O	O
JSR	O	O
-	O	O
310	O	O
offers	O	O
more	O	O
timezone	O	O
features	O	O
than	O	O
Joda	O	O
-	O	O
Time	O	O
.	O	O
Latter	O	O
is	O	O
not	O	O
able	O	O
to	O	O
yield	O	O
a	O	O
programmatical	O	O
access	O	O
to	O	O
the	O	O
history	O	O
of	O	O
timezone	O	O
offset	O	O
transitions	O	O
while	O	O
JSR	O	O
-	O	O
310	O	O
is	O	O
capable	O	O
to	O	O
do	O	O
this	O	O
.	O	O
b	O	O
)	O	O
For	O	O
your	O	O
information	O	O
:	O	O
JSR	O	O
-	O	O
310	O	O
has	O	O
moved	O	O
its	O	O
internal	O	O
timezone	O	O
repository	O	O
to	O	O
a	O	O
new	O	O
location	O	O
and	O	O
a	O	O
different	O	O
format	O	O
.	O	O
The	O	O
old	O	O
library	O	O
folder	O	O
lib	O	O
/	O	O
zi	O	O
does	O	O
not	O	O
exist	O	O
any	O	O
more	O	O
.	O	O
Adjuster	O	O
vs	O	O
.	O	O
Property	O	O
JSR	O	O
-	O	O
310	O	O
has	O	O
introduced	O	O
the	O	O
TemporalAdjuster	B-api_mention	B-api_mention
-	O	O
interface	O	O
as	O	O
a	O	O
formalized	O	O
way	O	O
to	O	O
externalize	O	O
temporal	O	O
calculations	O	O
and	O	O
manipulations	O	O
,	O	O
especially	O	O
for	O	O
library	O	O
or	O	O
framework	O	O
-	O	O
writers	O	O
this	O	O
is	O	O
a	O	O
nice	O	O
and	O	O
relative	O	O
easy	O	O
way	O	O
to	O	O
embed	O	O
new	O	O
extensions	O	O
of	O	O
JSR	O	O
-	O	O
310	O	O
(	O	O
a	O	O
kind	O	O
of	O	O
equivalent	O	O
to	O	O
static	O	O
helper	O	O
classes	O	O
for	O	O
former	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
)	O	O
.	O	O
For	O	O
most	O	O
users	O	O
however	O	O
,	O	O
this	O	O
feature	O	O
has	O	O
very	O	O
limited	O	O
value	O	O
because	O	O
the	O	O
burden	O	O
to	O	O
write	O	O
code	O	O
is	O	O
still	O	O
with	O	O
the	O	O
user	O	O
.	O	O
Built	O	O
-	O	O
in	O	O
solutions	O	O
based	O	O
on	O	O
the	O	O
new	O	O
TemporalAdjuster	B-api_mention	B-api_mention
-	O	O
concept	O	O
are	O	O
not	O	O
so	O	O
many	O	O
,	O	O
there	O	O
is	O	O
currently	O	O
only	O	O
the	O	O
helper	O	O
class	O	O
TemporalAdjusters	B-api_mention	B-api_mention
with	O	O
a	O	O
limited	O	O
set	O	O
of	O	O
manipulations	O	O
(	O	O
and	O	O
the	O	O
enums	O	O
Month	O	O
or	O	O
other	O	O
temporal	O	O
types	O	O
)	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
a	O	O
field	O	O
-	O	O
package	O	O
but	O	O
practice	O	O
has	O	O
shown	O	O
evidence	O	O
that	O	O
new	O	O
field	O	O
implementations	O	O
are	O	O
very	O	O
hard	O	O
to	O	O
code	O	O
.	O	O
On	O	O
the	O	O
other	O	O
side	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
so	O	O
-	O	O
called	O	O
properties	O	O
which	O	O
make	O	O
some	O	O
manipulations	O	O
much	O	O
easier	O	O
and	O	O
more	O	O
elegant	O	O
than	O	O
in	O	O
JSR	O	O
-	O	O
310	O	O
,	O	O
for	O	O
example	O	O
property	O	O
.	B-api_mention	B-api_mention
withMaximumValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Calendar	O	O
systems	O	O
JSR	O	O
-	O	O
310	O	O
offers	O	O
4	O	O
extra	O	O
calendar	O	O
systems	O	O
.	O	O
The	O	O
most	O	O
interesting	O	O
one	O	O
is	O	O
Umalqura	O	O
(	O	O
used	O	O
in	O	O
Saudi	O	O
Arabia	O	O
)	O	O
.	O	O
The	O	O
other	O	O
3	O	O
are	O	O
:	O	O
Minguo	O	O
(	O	O
Taiwan	O	O
)	O	O
,	O	O
Japanese	O	O
(	O	O
only	O	O
the	O	O
modern	O	O
calendar	O	O
since	O	O
1871	O	O
!	O	O
)	O	O
and	O	O
ThaiBuddhist	O	O
(	O	O
only	O	O
correct	O	O
after	O	O
1940	O	O
)	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
an	O	O
Islamic	O	O
calendar	O	O
based	O	O
on	O	O
calculatory	O	O
base	O	O
-	O	O
not	O	O
a	O	O
sighting	O	O
-	O	O
based	O	O
calendar	O	O
like	O	O
Umalqura	O	O
.	O	O
Thai	O	O
-	O	O
Buddhist	O	O
is	O	O
also	O	O
offered	O	O
by	O	O
Joda	O	O
-	O	O
Time	O	O
in	O	O
a	O	O
similar	O	O
form	O	O
,	O	O
Minguo	O	O
and	O	O
the	O	O
japanese	O	O
one	O	O
not	O	O
.	O	O
Otherwise	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
coptic	O	O
and	O	O
ethiopic	O	O
calendar	O	O
,	O	O
too	O	O
(	O	O
but	O	O
without	O	O
any	O	O
support	O	O
for	O	O
internationalization	O	O
)	O	O
.	O	O
More	O	O
interesting	O	O
for	O	O
Europeans	O	O
:	O	O
Joda	O	O
-	O	O
Time	O	O
also	O	O
offers	O	O
a	O	O
Gregorian	O	B-api_mention
,	O	O
Julian	O	O
and	O	O
mixed	O	O
-	O	O
gregorian	O	O
-	O	O
julian	O	O
calendar	O	O
.	O	O
However	O	O
,	O	O
the	O	O
practical	O	O
value	O	O
for	O	O
real	O	O
historical	O	O
calculations	O	O
is	O	O
limited	O	O
because	O	O
important	O	O
features	O	O
like	O	O
different	O	O
year	O	O
starts	O	O
in	O	O
date	O	O
history	O	O
are	O	O
not	O	O
supported	O	O
at	O	O
all	O	O
(	O	O
the	O	O
same	O	O
criticism	O	O
is	O	O
valid	O	O
for	O	O
old	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
GregorianCalendar	I-api_mention	I-api_mention
)	O	O
.	O	O
Other	O	O
calendars	O	O
like	O	O
Hebrew	O	O
or	O	O
Persian	O	O
or	O	O
Hindu	O	O
are	O	O
completely	O	O
missing	O	O
in	O	O
both	O	O
libraries	O	O
.	O	O
Epoch	O	O
days	O	O
JSR	O	O
-	O	O
310	O	O
has	O	O
the	O	O
class	O	O
JulianFields	B-api_mention	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
(	O	O
version	O	O
2	O	O
.	O	O
0	O	O
)	O	O
offers	O	O
some	O	O
helper	O	O
methods	O	O
in	O	O
the	O	O
class	O	O
DateTimeUtils	B-api_mention	B-api_mention
.	O	O
Clocks	O	O
JSR	O	O
-	O	O
310	O	O
has	O	O
no	O	O
interface	O	O
(	O	O
a	O	O
design	O	O
mistake	O	O
)	O	O
but	O	O
an	O	O
abstract	O	O
class	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Clock	I-api_mention	I-api_mention
which	O	O
can	O	O
be	O	O
used	O	O
for	O	O
any	O	O
clock	O	O
dependency	O	O
injection	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
the	O	O
interface	O	O
MillisProvider	B-api_mention	B-api_mention
and	O	O
some	O	O
helper	O	O
methods	O	O
in	O	O
DateTimeUtils	B-api_mention	B-api_mention
instead	O	O
.	O	O
So	O	O
this	O	O
way	O	O
Joda	O	O
-	O	O
Time	O	O
is	O	O
also	O	O
capable	O	O
of	O	O
supporting	O	O
test	O	O
-	O	O
driven	O	O
models	O	O
with	O	O
different	O	O
clocks	O	O
(	O	O
mocking	O	O
etc	O	O
.	O	O
)	O	O
.	O	O
Duration	O	O
arithmetic	O	O
Both	O	O
libraries	O	O
support	O	O
the	O	O
calculation	O	O
of	O	O
time	O	O
distances	O	O
in	O	O
one	O	O
or	O	O
more	O	O
temporal	O	O
units	O	O
.	O	O
However	O	O
,	O	O
when	O	O
handling	O	O
single	O	O
-	O	O
unit	O	O
-	O	O
durations	O	O
the	O	O
JSR	O	O
-	O	O
310	O	O
-	O	O
style	O	O
is	O	O
obviously	O	O
nicer	O	O
(	O	O
and	O	O
long	O	O
-	O	O
based	O	O
instead	O	O
of	O	O
using	O	O
int	O	O
)	O	O
:	O	O
JSR	O	O
-	O	O
310	O	O
=	O	O
>	O	O
long	O	O
days	O	O
=	O	O
ChronoUnit	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
DAYS	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
between	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Joda	O	O
-	O	O
Time	O	O
=	O	O
>	O	O
int	O	O
days	O	O
=	O	O
DAYS	B-api_mention	O
.	I-api_mention	B-api_mention
daysBetween	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getDays	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Handling	O	O
of	O	O
multiple	O	O
-	O	O
unit	O	O
-	O	O
durations	O	O
are	O	O
also	O	O
different	O	O
.	O	O
Even	O	O
the	O	O
calculation	O	O
results	O	O
can	O	O
differ	O	O
-	O	O
see	O	O
this	O	O
closed	O	O
Joda	O	O
-	O	O
Time	O	O
issue	O	O
.	O	O
While	O	O
JSR	O	O
-	O	O
310	O	O
use	O	O
a	O	O
very	O	O
simple	O	O
and	O	O
limited	O	O
approach	O	O
to	O	O
use	O	O
just	O	O
the	O	O
classes	O	O
Period	B-api_mention	O
(	O	O
duration	O	O
based	O	O
on	O	O
years	O	O
,	O	O
months	O	O
and	O	O
days	O	O
)	O	O
and	O	O
Duration	B-api_mention	O
(	O	O
based	O	O
on	O	O
seconds	O	O
and	O	O
nanoseconds	O	O
)	O	O
,	O	O
Joda	O	O
-	O	O
Time	O	O
uses	O	O
a	O	O
more	O	O
sophisticated	O	O
way	O	O
using	O	O
the	O	O
class	O	O
PeriodType	O	O
in	O	O
order	O	O
to	O	O
control	O	O
in	O	O
which	O	O
units	O	O
a	O	O
duration	O	O
(	O	O
Joda	O	O
-	O	O
Time	O	O
call	O	O
it	O	O
"	O	O
Period	O	O
"	O	O
)	O	O
shall	O	O
be	O	O
expressed	O	O
.	O	O
While	O	O
the	O	O
PeriodType	B-api_mention	B-api_mention
-	O	O
API	O	O
is	O	O
somehow	O	O
awkward	O	O
to	O	O
use	O	O
a	O	O
similar	O	O
way	O	O
is	O	O
not	O	O
offered	O	O
by	O	O
JSR	O	O
-	O	O
310	O	O
at	O	O
all	O	O
.	O	O
Especially	O	O
it	O	O
is	O	O
not	O	O
yet	O	O
possible	O	O
in	O	O
JSR	O	O
-	O	O
310	O	O
to	O	O
define	O	O
mixed	O	O
date	O	O
and	O	O
time	O	O
durations	O	O
(	O	O
based	O	O
on	O	O
days	O	O
and	O	O
hours	O	O
for	O	O
example	O	O
)	O	O
.	O	O
So	O	O
be	O	O
warned	O	O
if	O	O
it	O	O
comes	O	O
to	O	O
migration	O	O
from	O	O
one	O	O
library	O	O
to	O	O
another	O	O
.	O	O
The	O	O
libraries	O	O
in	O	O
discussion	O	O
are	O	O
incompatible	O	O
-	O	O
despite	O	O
of	O	O
partially	O	O
same	O	O
class	O	O
names	O	O
.	O	O
Intervals	O	O
JSR	O	O
-	O	O
310	O	O
does	O	O
not	O	O
support	O	O
this	O	O
feature	O	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
has	O	O
limited	O	O
support	O	O
.	O	O
See	O	O
also	O	O
this	O	O
SO	O	O
-	O	O
answer	O	O
.	O	O
Formatting	O	O
and	O	O
Parsing	O	O
Best	O	O
way	O	O
to	O	O
compare	O	O
both	O	O
libraries	O	O
is	O	O
to	O	O
view	O	O
the	O	O
equal	O	O
-	O	O
named	O	O
classes	O	O
DateTimeFormatterBuilder	B-api_mention	B-api_mention
(	O	O
JSR	O	O
-	O	O
310	O	O
)	O	O
and	O	O
DateTimeFormatterBuilder	B-api_mention	B-api_mention
(	O	O
Joda	O	O
-	O	O
Time	O	O
)	O	O
.	O	O
The	O	O
JSR	O	O
-	O	O
310	O	O
-	O	O
variant	O	O
is	O	O
a	O	O
little	O	O
bit	O	O
more	O	O
powerful	O	O
(	O	O
can	O	O
also	O	O
handle	O	O
any	O	O
kind	O	O
of	O	O
TemporalField	B-api_mention	B-api_mention
provided	O	O
the	O	O
field	O	O
implementor	O	O
has	O	O
managed	O	O
to	O	O
code	O	O
some	O	O
extension	O	O
points	O	O
like	O	O
resolve	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
Most	O	O
important	O	O
difference	O	O
is	O	O
however	O	O
-	O	O
in	O	O
my	O	O
opinion	O	O
:	O	O
JSR	O	O
-	O	O
310	O	O
can	O	O
much	O	O
better	O	O
parse	O	O
timezone	O	O
names	O	O
(	O	O
format	O	O
pattern	O	O
symbol	O	O
z	O	O
)	O	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
could	O	O
not	O	O
do	O	O
this	O	O
at	O	O
all	O	O
in	O	O
its	O	O
earlier	O	O
versions	O	O
and	O	O
now	O	O
only	O	O
in	O	O
a	O	O
very	O	O
limited	O	O
way	O	O
.	O	O
Another	O	O
advantage	O	O
of	O	O
JSR	O	O
-	O	O
310	O	O
is	O	O
support	O	O
for	O	O
standalone	O	O
month	O	O
names	O	O
which	O	O
is	O	O
important	O	O
in	O	O
languages	O	O
like	O	O
Russian	O	O
or	O	O
Polish	O	O
etc	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
has	O	O
no	O	O
access	O	O
to	O	O
such	O	O
resources	O	O
-	O	O
not	O	O
even	O	O
on	O	O
Java	O	O
-	O	O
8	O	O
platforms	O	O
.	O	O
The	O	O
pattern	O	O
syntax	O	O
in	O	O
JSR	O	O
-	O	O
310	O	O
is	O	O
also	O	O
more	O	O
flexible	O	O
than	O	O
in	O	O
Joda	O	O
-	O	O
Time	O	O
,	O	O
allows	O	O
for	O	O
optional	O	O
sections	O	O
(	O	O
using	O	O
square	O	O
brackets	O	O
)	O	O
,	O	O
is	O	O
more	O	O
orientated	O	O
towards	O	O
CLDR	O	O
-	O	O
standard	O	O
and	O	O
offers	O	O
padding	O	O
(	O	O
letter	O	O
symbol	O	O
p	O	O
)	O	O
and	O	O
more	O	O
fields	O	O
.	O	O
Otherwise	O	O
it	O	O
should	O	O
be	O	O
noted	O	O
that	O	O
Joda	O	O
-	O	O
Time	O	O
can	O	O
format	O	O
durations	O	O
using	O	O
PeriodFormatter	B-api_mention	B-api_mention
.	O	O
JSR	O	O
-	O	O
310	O	O
cannot	O	O
do	O	O
this	O	O
.	O	O
Hope	O	O
this	O	O
overview	O	O
helps	O	O
.	O	O
All	O	O
the	O	O
gathered	O	O
information	O	O
is	O	O
mainly	O	O
there	O	O
due	O	O
to	O	O
my	O	O
efforts	O	O
and	O	O
investigations	O	O
how	O	O
to	O	O
design	O	O
and	O	O
implement	O	O
a	O	O
better	O	O
date	O	O
-	O	O
and	O	O
-	O	O
time	O	O
library	O	O
(	O	O
nothing	O	O
is	O	O
perfect	O	O
)	O	O
.	O	O
Update	O	O
from	O	O
2015	O	O
-	O	O
06	O	O
-	O	O
24	O	O
:	O	O
Meanwhile	O	O
I	O	O
have	O	O
found	O	O
the	O	O
time	O	O
to	O	O
write	O	O
and	O	O
publish	O	O
a	O	O
tabular	O	O
overview	O	O
for	O	O
different	O	O
time	O	O
libraries	O	O
in	O	O
Java	O	O
.	O	O
The	O	O
tables	O	O
also	O	O
contain	O	O
a	O	O
comparison	O	O
between	O	O
Joda	O	O
-	O	O
Time	O	O
v2	O	O
.	O	O
8	O	O
.	O	O
1	O	O
and	O	O
Java	O	O
-	O	O
8	O	O
(	O	O
JSR	O	O
-	O	O
310	O	O
)	O	O
.	O	O
It	O	O
is	O	O
more	O	O
detailed	O	O
than	O	O
this	O	O
post	O	O
.	O	O
Question	O	O
-	O	O
5694385	O	O
,	O	O
answer	O	O
-	O	O
5694464	O	O
Rather	O	O
than	O	O
spoon	O	O
-	O	O
feed	O	O
you	O	O
code	O	O
,	O	O
here	O	O
'	O	O
s	O	O
how	O	O
to	O	O
look	O	O
in	O	O
the	O	O
documentation	O	O
.	O	O
First	O	O
,	O	O
you	O	O
'	O	O
re	O	O
dealing	O	O
with	O	O
IO	O	O
,	O	O
so	O	O
look	O	O
in	O	O
the	O	O
java	O	O
.	O	O
io	O	O
package	O	O
.	O	O
There	O	O
are	O	O
two	O	O
classes	O	O
that	O	O
look	O	O
interesting	O	O
:	O	O
FileFilter	B-api_mention	B-api_mention
and	O	O
FileNameFilter	B-api_mention	B-api_mention
.	O	O
When	O	O
I	O	O
clicked	O	O
on	O	O
the	O	O
first	O	O
,	O	O
it	O	O
showed	O	O
me	O	O
that	O	O
there	O	O
was	O	O
a	O	O
a	O	O
listFiles	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
the	O	O
File	B-api_mention	B-api_mention
class	O	O
.	O	O
And	O	O
the	O	O
documentation	O	O
for	O	O
that	O	O
method	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
Scrolling	O	O
up	O	O
in	O	O
the	O	O
File	O	B-api_mention
JavaDoc	O	O
,	O	O
I	O	O
see	O	O
the	O	O
constructors	O	O
.	O	O
And	O	O
that	O	O
'	O	O
s	O	O
really	O	O
all	O	O
I	O	O
need	O	O
to	O	O
be	O	O
able	O	O
to	O	O
create	O	O
a	O	O
File	B-api_mention	B-api_mention
instance	O	O
and	O	O
call	O	O
listFiles	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
it	O	O
.	O	O
Scrolling	O	O
still	O	O
further	O	O
,	O	O
I	O	O
can	O	O
see	O	O
some	O	O
information	O	O
about	O	O
how	O	O
files	O	O
are	O	O
named	O	O
in	O	O
different	O	O
operating	O	O
systems	O	O
.	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
32302353	O	O
To	O	O
concur	O	O
with	O	O
earlier	O	O
comments	O	O
:	O	O
simplest	O	O
is	O	O
(	O	O
2	O	O
)	O	O
to	O	O
use	O	O
Closeable	B-api_mention	B-api_mention
resources	O	O
and	O	O
declare	O	O
them	O	O
in	O	O
order	O	O
in	O	O
the	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
clause	O	O
.	O	O
If	O	O
you	O	O
only	O	O
have	O	O
AutoCloseable	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
wrap	O	O
them	O	O
in	O	O
another	O	O
(	O	O
nested	O	O
)	O	O
class	O	O
that	O	O
just	O	O
checks	O	O
that	O	O
close	B-api_mention	O
is	O	O
only	O	O
called	O	O
once	O	O
(	O	O
Facade	O	O
Pattern	O	O
)	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
by	O	O
having	O	O
private	O	O
bool	O	O
isClosed	O	O
;	O	O
.	O	O
In	O	O
practice	O	O
even	O	O
Oracle	O	O
just	O	O
(	O	O
1	O	O
)	O	O
chains	O	O
the	O	O
constructors	O	O
and	O	O
doesn	O	O
'	O	O
t	O	O
correctly	O	O
handle	O	O
exceptions	O	O
partway	O	O
through	O	O
the	O	O
chain	O	O
.	O	O
Alternatively	O	O
,	O	O
you	O	O
can	O	O
manually	O	O
create	O	O
a	O	O
chained	O	O
resource	O	O
,	O	O
using	O	O
a	O	O
static	O	O
factory	O	O
method	O	O
;	O	O
this	O	O
encapsulates	O	O
the	O	O
chain	O	O
,	O	O
and	O	O
handle	O	O
cleanup	O	O
if	O	O
it	O	O
fails	O	O
part	O	O
-	O	O
way	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
complexity	O	O
comes	O	O
from	O	O
handling	O	O
multiple	O	O
exceptions	O	O
;	O	O
otherwise	O	O
it	O	O
'	O	O
s	O	O
just	O	O
"	O	O
close	O	O
resources	O	O
that	O	O
you	O	O
'	O	O
ve	O	O
acquired	O	O
so	O	O
far	O	O
"	O	O
.	O	O
A	O	O
common	O	O
practice	O	O
seems	O	O
to	O	O
be	O	O
to	O	O
first	O	O
initialize	O	O
the	O	O
variable	O	O
that	O	O
holds	O	O
the	O	O
object	O	O
that	O	O
holds	O	O
the	O	O
resource	O	O
to	O	O
null	O	O
(	O	O
here	O	O
fileWriter	B-api_mention	O
)	O	O
,	O	O
and	O	O
then	O	O
include	O	O
a	O	O
null	O	O
check	O	O
in	O	O
the	O	O
cleanup	O	O
,	O	O
but	O	O
that	O	O
seems	O	O
unnecessary	O	O
:	O	O
if	O	O
the	O	O
constructor	O	O
fails	O	O
,	O	O
there	O	O
'	O	O
s	O	O
nothing	O	O
to	O	O
clean	O	O
up	O	O
,	O	O
so	O	O
we	O	O
can	O	O
just	O	O
let	O	O
that	O	O
exception	O	O
propagate	O	O
,	O	O
which	O	O
simplifies	O	O
the	O	O
code	O	O
a	O	O
little	O	O
.	O	O
You	O	O
could	O	O
probably	O	O
do	O	O
this	O	O
generically	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32294367	O	O
,	O	O
answer	O	O
-	O	O
32294898	O	O
#	O	O
blockquote	O	O
Let	O	O
me	O	O
ask	O	O
a	O	O
counterquestion	O	O
:	O	O
why	O	O
do	O	O
you	O	O
think	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stop	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
has	O	O
been	O	O
deprecated	O	O
for	O	O
more	O	O
than	O	O
a	O	O
decade	O	O
?	O	O
The	O	O
reason	O	O
why	O	O
is	O	O
precisely	O	O
the	O	O
negation	O	O
of	O	O
your	O	O
statement	O	O
above	O	O
.	O	O
To	O	O
give	O	O
two	O	O
specific	O	O
examples	O	O
:	O	O
you	O	O
stop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
a	O	O
thread	O	O
while	O	O
it	O	O
'	O	O
s	O	O
executing	O	O
something	O	O
as	O	O
innocuous	O	O
-	O	O
sounding	O	O
as	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Result	O	O
:	O	O
those	O	O
two	O	O
features	O	O
are	O	O
now	O	O
broken	O	O
for	O	O
the	O	O
entire	O	O
JVM	O	O
.	O	O
The	O	O
same	O	O
pertains	O	O
to	O	O
any	O	O
other	O	O
synchronized	O	O
code	O	O
your	O	O
application	O	O
may	O	O
execute	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
application	O	O
may	O	O
theoretically	O	O
be	O	O
coded	O	O
such	O	O
that	O	O
absolutely	O	O
no	O	O
shared	O	O
resource	O	O
protected	O	O
by	O	O
locks	O	O
is	O	O
ever	O	O
used	O	O
;	O	O
however	O	O
that	O	O
will	O	O
only	O	O
help	O	O
to	O	O
point	O	O
out	O	O
the	O	O
exact	O	O
extent	O	O
to	O	O
which	O	O
Java	O	O
threads	O	O
are	O	O
codependent	O	O
.	O	O
And	O	O
the	O	O
"	O	O
independence	O	O
"	O	O
achieved	O	O
will	O	O
only	O	O
pertain	O	O
to	O	O
the	O	O
request	O	O
-	O	O
processing	O	O
threads	O	O
,	O	O
not	O	O
to	O	O
all	O	O
threads	O	O
in	O	O
such	O	O
an	O	O
application	O	O
.	O	O
Question	O	O
-	O	O
24649842	O	O
,	O	O
answer	O	O
-	O	O
24649939	O	O
Try	O	O
adding	O	O
a	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sleep	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
call	O	O
within	O	O
your	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
.	O	O
.	O	O
Basically	O	O
it	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
scheduling	O	O
something	O	O
based	O	O
on	O	O
when	O	O
the	O	O
previous	O	O
execution	O	O
ends	O	O
and	O	O
when	O	O
it	O	O
(	O	O
logically	O	O
)	O	O
starts	O	O
.	O	O
For	O	O
example	O	O
,	O	O
suppose	O	O
I	O	O
schedule	O	O
an	O	O
alarm	O	O
to	O	O
go	O	O
off	O	O
with	O	O
a	O	O
fixed	O	O
rate	O	O
of	O	O
once	O	O
an	O	O
hour	O	O
,	O	O
and	O	O
every	O	O
time	O	O
it	O	O
goes	O	O
off	O	O
,	O	O
I	O	O
have	O	O
a	O	O
cup	O	O
of	O	O
coffee	O	O
,	O	O
which	O	O
takes	O	O
10	O	O
minutes	O	O
.	O	O
Suppose	O	O
that	O	O
starts	O	O
at	O	O
midnight	O	O
,	O	O
I	O	O
'	O	O
d	O	O
have	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
I	O	O
schedule	O	O
with	O	O
a	O	O
fixed	O	O
delay	O	O
of	O	O
one	O	O
hour	O	O
,	O	O
I	O	O
'	O	O
d	O	O
have	O	O
:	O	O
#	O	O
pre	O	O
Which	O	O
one	O	O
you	O	O
want	O	O
depends	O	O
on	O	O
your	O	O
task	O	O
.	O	O
Question	O	O
-	O	O
31965179	O	O
,	O	O
answer	O	O
-	O	O
35427268	O	O
There	O	O
'	O	O
s	O	O
a	O	O
long	O	O
list	O	O
of	O	O
things	O	O
that	O	O
have	O	O
been	O	O
changed	O	O
in	O	O
Hibernate	O	O
5	O	O
:	O	O
#	O	O
li	O	O
New	O	O
bootstrap	O	O
API	O	O
so	O	O
we	O	O
can	O	O
bootstrap	O	O
a	O	O
JPA	O	O
environment	O	O
programmatically	O	O
without	O	O
the	O	O
need	O	O
of	O	O
a	O	O
persistence	O	O
.	O	O
xml	O	O
file	O	O
.	O	O
#	O	O
li	O	O
Starting	O	O
in	O	O
5	O	O
.	O	O
0	O	O
Hibernate	O	O
Spatial	O	O
is	O	O
part	O	O
of	O	O
the	O	O
Hibernate	O	O
project	O	O
so	O	O
we	O	O
can	O	O
handle	O	O
GIS	O	O
data	O	O
too	O	O
.	O	O
#	O	O
li	O	O
The	O	O
Java	O	O
8	O	O
Date	B-api_mention	B-api_mention
and	O	O
Time	B-api_mention	B-api_mention
types	O	O
are	O	O
supported	O	O
in	O	O
domain	O	O
model	O	O
mappings	O	O
.	O	O
The	O	O
mapping	O	O
between	O	O
the	O	O
standard	O	O
SQL	O	O
Date	O	B-api_mention
/	O	O
Time	O	O
types	O	O
and	O	O
the	O	O
supported	O	O
Java	O	O
8	O	O
Date	B-api_mention	B-api_mention
/	O	O
Time	B-api_mention	O
class	O	O
types	O	O
looks	O	O
as	O	O
follows	O	O
;	O	O
#	O	O
li	O	O
DATE	O	O
:	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
LocalDate	I-api_mention	I-api_mention
#	O	O
li	O	O
TIME	O	O
:	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
LocalTime	I-api_mention	I-api_mention
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
OffsetTime	I-api_mention	I-api_mention
#	O	O
li	O	O
TIMESTAMP	O	O
:	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Instant	I-api_mention	I-api_mention
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
LocalDateTime	I-api_mention	I-api_mention
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
OffsetDateTime	I-api_mention	I-api_mention
and	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
ZonedDateTime	I-api_mention	I-api_mention
#	O	O
li	O	O
The	O	O
bytecode	O	O
enhancement	O	O
mechanism	O	O
was	O	O
redesigned	O	O
from	O	O
scratch	O	O
,	O	O
and	O	O
Hibernate	O	O
features	O	O
both	O	O
a	O	O
Maven	O	O
and	O	O
a	O	O
Gradle	O	B-api_mention
plugin	O	O
.	O	O
There	O	O
are	O	O
three	O	O
main	O	O
aspects	O	O
which	O	O
we	O	O
can	O	O
enhance	O	O
with	O	O
bytecode	O	O
instrumentation	O	O
:	O	O
#	O	O
li	O	O
Lazy	O	O
initialization	O	O
:	O	O
Fields	O	O
can	O	O
be	O	O
declared	O	O
as	O	O
LAZY	O	O
and	O	O
they	O	O
will	O	O
be	O	O
fetched	O	O
only	O	O
when	O	O
being	O	O
accessed	O	O
for	O	O
the	O	O
first	O	O
time	O	O
.	O	O
#	O	O
li	O	O
Dirty	O	O
checking	O	O
:	O	O
Entities	O	O
are	O	O
enhanced	O	O
so	O	O
that	O	O
they	O	O
can	O	O
keep	O	O
track	O	O
of	O	O
all	O	O
the	O	O
properties	O	O
that	O	O
get	O	O
changed	O	O
after	O	O
being	O	O
loaded	O	O
in	O	O
a	O	O
Persistence	O	O
Context	O	O
.	O	O
#	O	O
li	O	O
Bidirectional	O	O
associations	O	O
:	O	O
It	O	O
'	O	O
s	O	O
possible	O	O
to	O	O
synchronize	O	O
both	O	O
sides	O	O
of	O	O
a	O	O
bidirectional	O	O
association	O	O
automatically	O	O
,	O	O
even	O	O
if	O	O
the	O	O
developer	O	O
only	O	O
updates	O	O
a	O	O
single	O	O
side	O	O
.	O	O
#	O	O
li	O	O
Hibernate	O	O
'	O	O
s	O	O
native	O	O
APIs	O	O
(	O	O
Session	O	O
,	O	O
etc	O	O
)	O	O
have	O	O
been	O	O
updated	O	O
to	O	O
use	O	O
generic	O	O
typed	O	O
.	O	O
No	O	O
need	O	O
to	O	O
cast	O	O
when	O	O
fetching	O	O
entities	O	O
.	O	O
#	O	O
li	O	O
Hibernate	O	O
5	O	O
.	O	O
0	O	O
expends	O	O
this	O	O
to	O	O
a	O	O
broader	O	O
set	O	O
of	O	O
types	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
UUID	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Second	O	O
-	O	O
level	O	O
cache	O	O
by	O	O
reference	O	O
.	O	O
This	O	O
feature	O	O
enables	O	O
direct	O	O
storage	O	O
of	O	O
entity	O	O
references	O	O
into	O	O
the	O	O
second	O	O
level	O	O
cache	O	O
for	O	O
immutable	O	O
entities	O	O
.	O	O
#	O	O
li	O	O
Starting	O	O
with	O	O
Hibernate	O	O
5	O	O
.	O	O
0	O	O
,	O	O
we	O	O
have	O	O
a	O	O
completely	O	O
new	O	O
User	O	O
Guide	O	O
that	O	O
was	O	O
written	O	O
from	O	O
scratch	O	O
.	O	O
Question	O	O
-	O	O
33477695	O	O
,	O	O
answer	O	O
-	O	O
33477803	O	O
The	O	O
java	O	O
.	O	O
time	O	O
API	O	O
in	O	O
general	O	O
does	O	O
have	O	O
nanosecond	O	O
precision	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
2015	O	O
-	O	O
11	O	O
-	O	O
02T12	O	O
:	O	O
38	O	O
:	O	O
00	O	O
,	O	O
123456789	O	O
+	O	O
0000	O	O
However	O	O
,	O	O
it	O	O
'	O	O
s	O	O
the	O	O
clock	O	O
value	O	O
returned	O	O
by	O	O
OffsetDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
now	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
is	O	O
returning	O	O
a	O	O
value	O	O
which	O	O
only	O	O
has	O	O
milliseconds	O	O
.	O	O
From	O	O
Clock	B-api_mention	O
implementation	O	O
in	O	O
Java	O	O
8	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
there	O	O
'	O	O
s	O	O
nothing	O	O
inherently	O	O
imprecise	O	O
here	O	O
-	O	O
just	O	O
the	O	O
default	O	O
implementation	O	O
of	O	O
Clock	B-api_mention	B-api_mention
using	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
You	O	O
could	O	O
potentially	O	O
create	O	O
your	O	O
own	O	O
more	O	O
precise	O	O
subclass	O	O
.	O	O
However	O	O
,	O	O
you	O	O
should	O	O
note	O	O
that	O	O
adding	O	O
more	O	O
precision	O	O
without	O	O
adding	O	O
more	O	O
accuracy	O	O
probably	O	O
isn	O	O
'	O	O
t	O	O
terribly	O	O
useful	O	O
.	O	O
(	O	O
There	O	O
are	O	O
times	O	O
when	O	O
it	O	O
might	O	O
be	O	O
,	O	O
admittedly	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489437	O	O
Java	B-api_mention	O
.	I-api_mention	O
lang	I-api_mention	O
.	I-api_mention	O
String	I-api_mention	B-api_mention
is	O	O
not	O	O
just	O	O
a	O	O
class	O	O
.	O	O
It	O	O
'	O	O
s	O	O
an	O	O
integral	O	O
part	O	O
of	O	O
the	O	O
core	O	O
language	O	O
.	O	O
The	O	O
compiler	O	O
has	O	O
syntactic	O	O
sugar	O	O
for	O	O
it	O	O
.	O	O
For	O	O
example	O	O
,	O	O
StringLiteral	O	O
is	O	O
like	O	O
an	O	O
abbreviation	O	O
for	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
When	O	O
written	O	O
StringLiteral	O	O
the	O	O
compiler	O	O
optimizes	O	O
identical	O	O
strings	O	O
to	O	O
the	O	O
same	O	O
instance	O	O
to	O	O
save	O	O
space	O	O
.	O	O
StringLiteral	O	O
+	O	O
5	O	O
=	O	O
=	O	O
StringLiteral	O	O
=	O	O
=	O	O
>	O	O
true	O	O
The	O	O
compiler	O	O
has	O	O
syntactic	O	O
sugar	O	O
for	O	O
a	O	O
lot	O	O
of	O	O
stuff	O	O
,	O	O
including	O	O
not	O	O
having	O	O
to	O	O
box	O	O
/	O	O
unbox	O	O
between	O	O
object	O	O
versions	O	O
and	O	O
their	O	O
native	O	O
types	O	O
,	O	O
no	O	O
parent	O	O
means	O	O
Object	B-api_mention	B-api_mention
,	O	O
default	O	O
constructor	O	O
,	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
19418427	O	O
,	O	O
answer	O	O
-	O	O
19418553	O	O
If	O	O
you	O	O
take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
methods	O	O
#	O	O
pre	O	O
and	O	O
its	O	O
decompiled	O	O
with	O	O
javap	O	O
-	O	O
c	O	O
ClassWithTheseMethods	O	B-api_mention
versions	O	O
you	O	O
will	O	O
see	O	O
#	O	O
pre	O	O
and	O	O
#	O	O
pre	O	O
So	O	O
if	O	O
Strings	O	O
are	O	O
not	O	O
final	O	O
compiler	O	O
will	O	O
have	O	O
to	O	O
use	O	O
StringBuilder	B-api_mention	B-api_mention
to	O	O
concatenate	O	O
str1	O	O
and	O	O
str2	O	O
so	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
str1	O	O
+	O	O
str2	O	O
;	O	O
will	O	O
be	O	O
compiled	O	O
to	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
means	O	O
that	O	O
concat	O	O
will	O	O
be	O	O
created	O	O
at	O	O
runtime	O	O
so	O	O
will	O	O
not	O	O
come	O	O
from	O	O
String	B-api_mention	B-api_mention
pool	O	O
.	O	O
Also	O	O
if	O	O
Strings	O	B-api_mention
are	O	O
final	O	O
then	O	O
compiler	O	O
can	O	O
assume	O	O
that	O	O
they	O	O
will	O	O
never	O	O
change	O	O
so	O	O
instead	O	O
of	O	O
using	O	O
StringBuilder	B-api_mention	B-api_mention
it	O	O
can	O	O
safely	O	O
concatenate	O	O
its	O	O
values	O	O
so	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
str1	O	O
+	O	O
str2	O	O
;	O	O
can	O	O
be	O	O
changed	O	O
to	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
StringLiteral	O	O
+	O	O
StringLiteral	O	O
;	O	O
and	O	O
concatenated	O	O
into	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
StringLiteral	O	O
;	O	O
which	O	O
means	O	O
that	O	O
concate	O	O
will	O	O
become	O	O
sting	O	O
literal	O	O
which	O	O
will	O	O
be	O	O
interned	O	O
in	O	O
string	O	O
pool	O	O
and	O	O
then	O	O
compared	O	O
with	O	O
same	O	O
string	O	O
literal	O	O
from	O	O
that	O	O
pool	O	O
in	O	O
if	O	O
statement	O	O
.	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26819171	O	O
This	O	O
is	O	O
not	O	O
an	O	O
easy	O	O
problem	O	O
.	O	O
And	O	O
the	O	O
more	O	O
search	O	O
-	O	O
replacement	O	O
parameters	O	O
you	O	O
have	O	O
,	O	O
the	O	O
trickier	O	O
it	O	O
gets	O	O
.	O	O
You	O	O
have	O	O
several	O	O
options	O	O
,	O	O
scattered	O	O
on	O	O
the	O	O
palette	O	O
of	O	O
ugly	O	O
-	O	O
elegant	O	O
,	O	O
efficient	O	O
-	O	O
wasteful	O	O
:	O	O
#	O	O
li	O	O
Use	O	O
StringUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replaceEach	I-api_mention	I-api_mention
from	O	O
Apache	O	O
Commons	O	O
as	O	O
@	O	O
AlanHay	O	O
recommended	O	O
.	O	O
This	O	O
is	O	O
a	O	O
good	O	O
option	O	O
if	O	O
you	O	O
'	O	O
re	O	O
free	O	O
to	O	O
add	O	O
new	O	O
dependencies	O	O
in	O	O
your	O	O
project	O	O
.	O	O
You	O	O
might	O	O
get	O	O
lucky	O	O
:	O	O
the	O	O
dependency	O	O
might	O	O
be	O	O
included	O	O
already	O	O
in	O	O
your	O	O
project	O	O
#	O	O
li	O	O
Use	O	O
a	O	O
temporary	O	O
placeholder	O	O
as	O	O
@	O	O
Jeroen	O	O
suggested	O	O
,	O	O
and	O	O
perform	O	O
the	O	O
replacement	O	O
in	O	O
2	O	O
steps	O	O
:	O	O
#	O	O
li	O	O
Replace	O	O
all	O	O
search	O	O
patterns	O	O
with	O	O
a	O	O
unique	O	O
tag	O	O
that	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
in	O	O
the	O	O
original	O	O
text	O	O
#	O	O
li	O	O
Replace	O	O
the	O	O
placeholders	O	O
with	O	O
the	O	O
real	O	O
target	O	O
replacement	O	O
This	O	O
is	O	O
not	O	O
a	O	O
great	O	O
approach	O	O
,	O	O
for	O	O
several	O	O
reasons	O	O
:	O	O
it	O	O
needs	O	O
to	O	O
ensure	O	O
that	O	O
the	O	O
tags	O	O
used	O	O
in	O	O
the	O	O
first	O	O
step	O	O
are	O	O
really	O	O
unique	O	O
;	O	O
it	O	O
performs	O	O
more	O	O
string	O	O
replacement	O	O
operations	O	O
than	O	O
really	O	O
necessary	O	O
#	O	O
li	O	O
Build	O	O
a	O	O
regex	O	O
from	O	O
all	O	O
the	O	O
patterns	O	O
and	O	O
use	O	O
the	O	O
method	O	O
with	O	O
Matcher	B-api_mention	B-api_mention
and	O	O
StringBuffer	B-api_mention	B-api_mention
as	O	O
suggested	O	O
by	O	O
@	O	O
arshajii	O	O
.	O	O
This	O	O
is	O	O
not	O	O
terrible	O	O
,	O	O
but	O	O
not	O	O
that	O	O
great	O	O
either	O	O
,	O	O
as	O	O
building	O	O
the	O	O
regex	O	O
is	O	O
kind	O	O
of	O	O
hackish	O	O
,	O	O
and	O	O
it	O	O
involves	O	O
StringBuffer	B-api_mention	B-api_mention
which	O	O
went	O	O
out	O	O
of	O	O
fashion	O	O
a	O	O
while	O	O
ago	O	O
in	O	O
favor	O	O
of	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
Use	O	O
a	O	O
recursive	O	O
solution	O	O
proposed	O	O
by	O	O
@	O	O
mjolka	O	O
,	O	O
by	O	O
splitting	O	O
the	O	O
string	O	O
at	O	O
the	O	O
matched	O	O
patterns	O	O
,	O	O
and	O	O
recursing	O	O
on	O	O
the	O	O
remaining	O	O
segments	O	O
.	O	O
This	O	O
is	O	O
a	O	O
fine	O	O
solution	O	O
,	O	O
compact	O	O
and	O	O
quite	O	O
elegant	O	O
.	O	O
Its	O	O
weakness	O	O
is	O	O
the	O	O
potentially	O	O
many	O	O
substring	O	O
and	O	O
concatenation	O	O
operations	O	O
,	O	O
and	O	O
the	O	O
stack	O	O
size	O	O
limits	O	O
that	O	O
apply	O	O
to	O	O
all	O	O
recursive	O	O
solutions	O	O
#	O	O
li	O	O
Split	O	O
the	O	O
text	O	O
to	O	O
words	O	O
and	O	O
use	O	O
Java	O	O
8	O	O
streams	O	O
to	O	O
perform	O	O
the	O	O
replacements	O	O
elegantly	O	O
as	O	O
@	O	O
msandiford	O	O
suggested	O	O
,	O	O
but	O	O
of	O	O
course	O	O
that	O	O
only	O	O
works	O	O
if	O	O
you	O	O
are	O	O
ok	O	O
with	O	O
splitting	O	O
at	O	O
word	O	O
boundaries	O	O
,	O	O
which	O	O
makes	O	O
it	O	O
not	O	O
suitable	O	O
as	O	O
a	O	O
general	O	O
solution	O	O
Here	O	O
'	O	O
s	O	O
my	O	O
version	O	O
,	O	O
based	O	O
on	O	O
ideas	O	O
borrowed	O	O
from	O	O
Apache	O	O
'	O	O
s	O	O
implementation	O	O
.	O	O
It	O	O
'	O	O
s	O	O
neither	O	O
simple	O	O
nor	O	O
elegant	O	O
,	O	O
but	O	O
it	O	O
works	O	O
,	O	O
and	O	O
should	O	O
be	O	O
relatively	O	O
efficient	O	O
,	O	O
without	O	O
unnecessary	O	O
steps	O	O
.	O	O
In	O	O
a	O	O
nutshell	O	O
,	O	O
it	O	O
works	O	O
like	O	O
this	O	O
:	O	O
repeatedly	O	O
find	O	O
the	O	O
next	O	O
matching	O	O
search	O	O
pattern	O	O
in	O	O
the	O	O
text	O	O
,	O	O
and	O	O
use	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
to	O	O
accumulate	O	O
the	O	O
unmatched	O	O
segments	O	O
and	O	O
the	O	O
replacements	O	O
.	O	O
#	O	O
pre	O	O
Unit	O	O
tests	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
30125296	O	O
,	O	O
answer	O	O
-	O	O
35035659	O	O
You	O	O
can	O	O
use	O	O
reduce	O	O
method	O	O
:	O	O
long	O	O
creditAmountSum	O	O
=	O	O
result	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reduce	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
13291076	O	O
,	O	O
answer	O	O
-	O	O
13291166	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
"	O	O
built	O	O
-	O	O
in	O	O
"	O	O
method	O	O
of	O	O
enum	O	O
.	O	O
It	O	O
is	O	O
final	O	O
and	O	O
you	O	O
cannot	O	O
change	O	O
its	O	O
implementation	O	O
.	O	O
It	O	O
returns	O	O
the	O	O
name	O	O
of	O	O
enum	O	O
constant	O	O
as	O	O
it	O	O
is	O	O
written	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
in	O	O
upper	O	O
case	O	O
,	O	O
without	O	O
spaces	O	O
etc	O	O
.	O	O
Compare	O	O
MOBILE	O	O
_	O	O
PHONE	O	O
_	O	O
NUMBER	O	O
and	O	O
Mobile	O	O
phone	O	O
number	O	O
.	O	O
Which	O	O
version	O	O
is	O	O
more	O	O
readable	O	O
?	O	O
I	O	O
believe	O	O
the	O	O
second	O	O
one	O	O
.	O	O
This	O	O
is	O	O
the	O	O
difference	O	O
:	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
always	O	O
returns	O	O
MOBILE	O	O
_	O	O
PHONE	O	O
_	O	O
NUMBER	O	O
,	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
be	O	O
overriden	O	O
to	O	O
return	O	O
Mobile	O	O
phone	O	O
number	O	O
.	O	O
Question	O	O
-	O	O
22463062	O	O
,	O	O
answer	O	O
-	O	O
28324294	O	O
You	O	O
can	O	O
also	O	O
use	O	O
LocalDate	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
LocalDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
String	B-api_mention	B-api_mention
without	O	O
providing	O	O
it	O	O
with	O	O
a	O	O
pattern	O	O
,	O	O
if	O	O
the	O	O
String	B-api_mention	B-api_mention
is	O	O
in	O	O
ISO	O	O
-	O	O
8601	O	O
format	O	O
.	O	O
for	O	O
example	O	O
,	O	O
#	O	O
pre	O	O
Output	O	O
,	O	O
#	O	O
pre	O	O
and	O	O
use	O	O
DateTimeFormatter	B-api_mention	B-api_mention
only	O	O
if	O	O
you	O	O
have	O	O
to	O	O
deal	O	O
with	O	O
other	O	O
date	O	O
patterns	O	O
,	O	O
For	O	O
example	O	O
,	O	O
dd	O	O
MMM	O	O
uuuu	O	O
represents	O	O
the	O	O
day	O	O
of	O	O
the	O	O
month	O	O
(	O	O
two	O	O
digits	O	O
)	O	O
,	O	O
three	O	O
letters	O	O
of	O	O
the	O	O
name	O	O
of	O	O
the	O	O
month	O	O
(	O	O
Jan	O	O
,	O	O
Feb	O	O
,	O	O
Mar	O	O
,	O	O
.	O	O
.	O	O
.	O	O
)	O	O
,	O	O
and	O	O
a	O	O
four	O	O
-	O	O
digit	O	O
year	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
04	O	O
Aug	O	O
2015	O	O
parses	O	O
to	O	O
2015	O	O
-	O	O
08	O	O
-	O	O
04	O	O
also	O	O
remember	O	O
that	O	O
the	O	O
DateTimeFormatter	B-api_mention	B-api_mention
object	O	O
is	O	O
bidirectional	O	O
;	O	O
it	O	O
can	O	O
both	O	O
parse	O	O
input	O	O
and	O	O
format	O	O
output	O	O
.	O	O
#	O	O
pre	O	O
Output	O	O
2015	O	O
-	O	O
08	O	O
-	O	O
04	O	O
formats	O	O
as	O	O
04	O	O
Aug	O	O
2015	O	O
(	O	O
see	O	O
complete	O	O
list	O	O
of	O	O
Patterns	B-api_mention	B-api_mention
for	O	O
Formatting	O	O
and	O	O
Parsing	O	O
DateFormatter	B-api_mention	B-api_mention
)	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
20331163	O	O
,	O	O
answer	O	O
-	O	O
20331243	O	O
Create	O	O
a	O	O
DateTimeFormatter	B-api_mention	B-api_mention
using	O	O
DateTimeFormat	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forPattern	I-api_mention	I-api_mention
(	O	I-api_mention
String	B-api_mention	I-api_mention
)	O	I-api_mention
Using	O	O
Joda	O	O
time	O	O
you	O	O
would	O	O
do	O	O
it	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Also	O	O
,	O	O
if	O	O
you	O	O
wanted	O	O
to	O	O
use	O	O
standard	O	O
Java	O	O
,	O	O
you	O	O
would	O	O
do	O	O
it	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
26318569	O	O
,	O	O
answer	O	O
-	O	O
26319364	O	O
You	O	O
'	O	O
re	O	O
nesting	O	O
mocking	O	O
inside	O	O
of	O	O
mocking	O	O
.	O	O
You	O	O
'	O	O
re	O	O
calling	O	O
getSomeList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
does	O	O
some	O	O
mocking	O	O
,	O	O
before	O	O
you	O	O
'	O	O
ve	O	O
finished	O	O
the	O	O
mocking	O	O
for	O	O
MyMainModel	O	O
.	O	O
Mockito	B-api_mention	B-api_mention
doesn	O	O
'	O	O
t	O	O
like	O	O
it	O	O
when	O	O
you	O	O
do	O	O
this	O	O
.	O	O
Replace	O	O
#	O	O
pre	O	O
with	O	O
#	O	O
pre	O	O
To	O	O
understand	O	O
why	O	O
this	O	O
causes	O	O
a	O	O
problem	O	O
,	O	O
you	O	O
need	O	O
to	O	O
know	O	O
a	O	O
little	O	O
about	O	O
how	O	O
Mockito	B-api_mention	B-api_mention
works	O	O
,	O	O
and	O	O
also	O	O
be	O	O
aware	O	O
in	O	O
what	O	O
order	O	O
expressions	O	O
and	O	O
statements	O	O
are	O	O
evaluated	O	O
in	O	O
Java	O	O
.	O	O
Mockito	B-api_mention	B-api_mention
can	O	O
'	O	O
t	O	O
read	O	O
your	O	O
source	O	O
code	O	O
,	O	O
so	O	O
in	O	O
order	O	O
to	O	O
figure	O	O
out	O	O
what	O	O
you	O	O
are	O	O
asking	O	O
it	O	O
to	O	O
do	O	O
,	O	O
it	O	O
relies	O	O
a	O	O
lot	O	O
on	O	O
static	O	O
state	O	O
.	O	O
When	O	O
you	O	O
call	O	O
a	O	O
method	O	O
on	O	O
a	O	O
mock	O	O
object	O	O
,	O	O
Mockito	B-api_mention	O
records	O	O
the	O	O
details	O	O
of	O	O
the	O	O
call	O	O
in	O	O
an	O	O
internal	O	O
list	O	O
of	O	O
invocations	O	O
.	O	O
The	O	O
when	O	O
method	O	O
reads	O	O
the	O	O
last	O	O
of	O	O
these	O	O
invocations	O	O
off	O	O
the	O	O
list	O	O
and	O	O
records	O	O
this	O	O
invocation	O	O
in	O	O
the	O	O
OngoingStubbing	B-api_mention	B-api_mention
object	O	O
it	O	O
returns	O	O
.	O	O
The	O	O
line	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
thenReturn	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
causes	O	O
the	O	O
following	O	O
interactions	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
Mock	B-api_mention	O
method	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
Static	O	O
method	O	O
when	O	O
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
Method	O	O
thenReturn	O	O
is	O	O
called	O	O
on	O	O
the	O	O
OngoingStubbing	B-api_mention	B-api_mention
object	O	O
returned	O	O
by	O	O
the	O	O
when	O	O
method	O	O
.	O	O
The	O	O
thenReturn	B-api_mention	B-api_mention
method	O	O
can	O	O
then	O	O
instruct	O	O
the	O	O
mock	O	O
it	O	O
received	O	O
via	O	O
the	O	O
OngoingStubbing	B-api_mention	B-api_mention
method	O	O
to	O	O
handle	O	O
any	O	O
suitable	O	O
call	O	O
to	O	O
the	O	O
getList	O	B-api_mention
method	O	O
to	O	O
return	O	O
someModelList	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
as	O	O
Mockito	B-api_mention	B-api_mention
can	O	O
'	O	O
t	O	O
see	O	O
your	O	O
code	O	O
,	O	O
you	O	O
can	O	O
also	O	O
write	O	O
your	O	O
mocking	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
style	O	O
is	O	O
somewhat	O	O
less	O	O
clear	O	O
to	O	O
read	O	O
,	O	O
especially	O	O
since	O	O
in	O	O
this	O	O
case	O	O
the	O	O
null	O	O
has	O	O
to	O	O
be	O	O
casted	O	O
,	O	O
but	O	O
it	O	O
generates	O	O
the	O	O
same	O	O
sequence	O	O
of	O	O
interactions	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
and	O	O
will	O	O
achieve	O	O
the	O	O
same	O	O
result	O	O
as	O	O
the	O	O
line	O	O
above	O	O
.	O	O
However	O	O
,	O	O
the	O	O
line	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
thenReturn	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
causes	O	O
the	O	O
following	O	O
interactions	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
Mock	B-api_mention	O
method	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
Static	O	O
method	O	O
when	O	O
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
A	O	O
new	O	O
mock	O	O
of	O	O
SomeModel	O	B-api_mention
is	O	O
created	O	O
(	O	O
inside	O	O
getSomeList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
,	O	O
#	O	O
li	O	O
Mock	B-api_mention	O
method	O	O
model	O	O
.	B-api_mention	B-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
At	O	O
this	O	O
point	O	O
Mockito	B-api_mention	B-api_mention
gets	O	O
confused	O	O
.	O	O
It	O	O
thought	O	O
you	O	O
were	O	O
mocking	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
now	O	O
you	O	O
'	O	O
re	O	O
telling	O	O
it	O	O
you	O	O
want	O	O
to	O	O
mock	O	O
the	O	O
model	O	O
.	B-api_mention	B-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
To	O	O
Mockito	B-api_mention	B-api_mention
,	O	O
it	O	O
looks	O	O
like	O	O
you	O	O
'	O	O
re	O	O
doing	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
looks	O	O
silly	O	O
to	O	O
Mockito	B-api_mention	B-api_mention
as	O	O
it	O	O
can	O	O
'	O	O
t	O	O
be	O	O
sure	O	O
what	O	O
you	O	O
'	O	O
re	O	O
doing	O	O
with	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
that	O	O
we	O	O
did	O	O
not	O	O
get	O	O
to	O	O
the	O	O
thenReturn	O	B-api_mention
method	O	O
call	O	O
,	O	O
as	O	O
the	O	O
JVM	O	O
needs	O	O
to	O	O
evaluate	O	O
the	O	O
parameters	O	O
to	O	O
this	O	O
method	O	O
before	O	O
it	O	O
can	O	O
call	O	O
the	O	O
method	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
this	O	O
means	O	O
calling	O	O
the	O	O
getSomeList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Generally	O	O
it	O	O
is	O	O
a	O	O
bad	O	O
design	O	O
decision	O	O
to	O	O
rely	O	O
on	O	O
static	O	O
state	O	O
,	O	O
as	O	O
Mockito	B-api_mention	B-api_mention
does	O	O
,	O	O
because	O	O
it	O	O
can	O	O
lead	O	O
to	O	O
cases	O	O
where	O	O
the	O	O
Principle	O	O
of	O	O
Least	O	O
Astonishment	O	O
is	O	O
violated	O	O
.	O	O
However	O	O
,	O	O
Mockito	B-api_mention	B-api_mention
'	I-api_mention	O
s	I-api_mention	O
design	O	O
does	O	O
make	O	O
for	O	O
clear	O	O
and	O	O
expressive	O	O
mocking	O	O
,	O	O
even	O	O
if	O	O
it	O	O
leads	O	O
to	O	O
astonishment	O	O
sometimes	O	O
.	O	O
Finally	O	O
,	O	O
recent	O	O
versions	O	O
of	O	O
Mockito	B-api_mention	B-api_mention
add	O	O
an	O	O
extra	O	O
line	O	O
to	O	O
the	O	O
error	O	O
message	O	O
above	O	O
.	O	O
This	O	O
extra	O	O
line	O	O
indicates	O	O
you	O	O
may	O	O
be	O	O
in	O	O
the	O	O
same	O	O
situation	O	O
as	O	O
this	O	O
question	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
10904911	O	O
,	O	O
answer	O	O
-	O	O
10904956	O	O
What	O	O
you	O	O
want	O	O
is	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
is	O	O
a	O	O
static	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
helper	O	O
method	O	O
for	O	O
every	O	O
different	O	O
primitive	O	O
java	O	O
type	O	O
;	O	O
the	O	O
one	O	O
for	O	O
int	O	O
[	O	O
]	O	O
says	O	O
this	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
4645020	O	O
It	O	O
is	O	O
supposed	O	O
to	O	O
be	O	O
generally	O	O
preferable	O	O
to	O	O
use	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
for	O	O
string	O	O
concatenation	O	O
in	O	O
Java	O	O
.	O	O
Is	O	O
this	O	O
always	O	O
the	O	O
case	O	O
?	O	O
What	O	O
I	O	O
mean	O	O
is	O	O
this	O	O
:	O	O
Is	O	O
the	O	O
overhead	O	O
of	O	O
creating	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
object	O	O
,	O	O
calling	O	O
the	O	O
append	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
and	O	O
finally	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
already	O	O
smaller	O	O
then	O	O
concatenating	O	O
existing	O	O
strings	O	O
with	O	O
the	O	O
+	O	O
operator	O	O
for	O	O
two	O	O
strings	O	O
,	O	O
or	O	O
is	O	O
it	O	O
only	O	O
advisable	O	O
for	O	O
more	O	O
(	O	O
than	O	O
two	O	O
)	O	O
strings	O	O
?	O	O
If	O	O
there	O	O
is	O	O
such	O	O
a	O	O
threshold	O	O
,	O	O
what	O	O
does	O	O
it	O	O
depend	O	O
on	O	O
(	O	O
perhaps	O	O
the	O	O
string	O	O
length	O	O
,	O	O
but	O	O
in	O	O
which	O	O
way	O	O
)	O	O
?	O	O
And	O	O
finally	O	O
,	O	O
would	O	O
you	O	O
trade	O	O
the	O	O
readability	O	O
and	O	O
conciseness	O	O
of	O	O
the	O	O
+	O	O
concatenation	O	O
for	O	O
the	O	O
performance	O	O
of	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
in	O	O
smaller	O	O
cases	O	O
like	O	O
two	O	O
,	O	O
three	O	O
or	O	O
four	O	O
strings	O	O
?	O	O
EDIT	O	O
Explicit	O	O
use	O	O
of	O	O
StringBuilder	B-api_mention	B-api_mention
for	O	O
regular	O	O
concatenations	O	O
is	O	O
being	O	O
mentioned	O	O
as	O	O
obsolete	O	O
at	O	O
obsolete	O	O
java	O	O
optimization	O	O
tips	O	O
as	O	O
well	O	O
as	O	O
at	O	O
java	O	O
urban	O	O
myths	O	O
.	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28584954	O	O
Because	O	O
thats	O	O
the	O	O
standard	O	O
.	O	O
Infinity	O	O
represents	O	O
a	O	O
number	O	O
greater	O	O
than	O	O
or	O	O
less	O	O
than	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
/	O	O
-	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
NaN	O	O
represents	O	O
the	O	O
outcome	O	O
of	O	O
an	O	O
operation	O	O
that	O	O
didn	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
.	O	O
That	O	O
is	O	O
,	O	O
the	O	O
operation	O	O
didn	O	O
'	O	O
t	O	O
possibly	O	O
come	O	O
out	O	O
with	O	O
a	O	O
number	O	O
.	O	O
I	O	O
would	O	O
guess	O	O
the	O	O
logic	O	O
is	O	O
once	O	O
a	O	O
number	O	O
gets	O	O
big	O	O
enough	O	O
(	O	O
infinity	O	O
)	O	O
and	O	O
because	O	O
of	O	O
the	O	O
limitation	O	O
of	O	O
floating	O	O
point	O	O
numbers	O	O
,	O	O
adding	O	O
numbers	O	O
to	O	O
it	O	O
won	O	O
'	O	O
t	O	O
change	O	O
the	O	O
outcome	O	O
,	O	O
so	O	O
its	O	O
'	O	O
like	O	O
'	O	O
infinity	O	O
.	O	O
So	O	O
if	O	O
you	O	O
want	O	O
to	O	O
compare	O	O
to	O	O
really	O	O
big	O	O
numbers	O	O
,	O	O
at	O	O
some	O	O
point	O	O
you	O	O
might	O	O
just	O	O
say	O	O
those	O	O
two	O	O
big	O	O
numbers	O	O
are	O	O
close	O	O
enough	O	O
for	O	O
all	O	O
intents	O	O
and	O	O
purposes	O	O
.	O	O
But	O	O
if	O	O
you	O	O
want	O	O
to	O	O
compare	O	O
two	O	O
things	O	O
that	O	O
both	O	O
aren	O	O
'	O	O
t	O	O
numbers	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
compare	O	O
them	O	O
so	O	O
its	O	O
false	O	O
.	O	O
At	O	O
least	O	O
you	O	O
couldn	O	O
'	O	O
t	O	O
compare	O	O
them	O	O
as	O	O
a	O	O
primitive	O	O
.	O	O
Question	O	O
-	O	O
5439529	O	O
,	O	O
answer	O	O
-	O	O
15357940	O	O
Or	O	O
simply	O	O
mystring	O	O
.	B-api_mention	B-api_mention
matches	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
though	O	O
it	O	O
would	O	O
return	O	O
true	O	O
for	O	O
numbers	O	O
larger	O	O
than	O	O
an	O	O
int	O	O
Question	O	O
-	O	O
32334319	O	O
,	O	O
answer	O	O
-	O	O
32334651	O	O
The	O	O
API	O	O
guarantees	O	O
a	O	O
stable	O	O
sorting	O	O
which	O	O
Quicksort	O	O
doesn	O	O
â€™	O	O
t	O	O
offer	O	O
.	O	O
However	O	O
,	O	O
when	O	O
sorting	O	O
primitive	O	O
values	O	O
by	O	O
their	O	O
natural	O	O
order	O	O
you	O	O
won	O	O
â€™	O	O
t	O	O
notice	O	O
a	O	O
difference	O	O
as	O	O
primitive	O	O
values	O	O
have	O	O
no	O	O
identity	O	O
.	O	O
Therefore	O	O
,	O	O
Quicksort	O	O
is	O	O
used	O	O
for	O	O
primitive	O	O
arrays	O	O
as	O	O
it	O	O
is	O	O
slightly	O	O
more	O	O
efficient	O	O
.	O	O
For	O	O
objects	O	O
you	O	O
may	O	O
notice	O	O
,	O	O
when	O	O
objects	O	O
which	O	O
are	O	O
deemed	O	O
equal	O	O
according	O	O
to	O	O
their	O	O
equals	O	O
implementation	O	O
or	O	O
the	O	O
provided	O	O
Comparator	B-api_mention	B-api_mention
change	O	O
their	O	O
order	O	O
.	O	O
Therefore	O	O
,	O	O
Quicksort	O	O
is	O	O
not	O	O
an	O	O
option	O	O
.	O	O
So	O	O
a	O	O
variant	O	O
of	O	O
MergeSort	O	O
is	O	O
used	O	O
,	O	O
the	O	O
current	O	O
Java	O	O
versions	O	O
use	O	O
TimSort	O	B-api_mention
.	O	O
This	O	O
applies	O	O
to	O	O
both	O	O
,	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
and	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
,	O	O
though	O	O
with	O	O
Java	O	O
8	O	O
,	O	O
the	O	O
List	B-api_mention	B-api_mention
itself	O	O
may	O	O
override	O	O
the	O	O
sort	O	O
algorithms	O	O
.	O	O
Question	O	O
-	O	O
28818506	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
working	O	O
with	O	O
the	O	O
new	O	O
Optional	B-api_mention	B-api_mention
type	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
and	O	O
I	O	O
'	O	O
ve	O	O
come	O	O
across	O	O
what	O	O
seems	O	O
like	O	O
a	O	O
common	O	O
operation	O	O
that	O	O
isn	O	O
'	O	O
t	O	O
supported	O	O
functionally	O	O
:	O	O
an	O	O
"	O	O
orElseOptional	O	O
"	O	O
Consider	O	O
the	O	O
following	O	O
pattern	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
are	O	O
many	O	O
forms	O	O
of	O	O
this	O	O
pattern	O	O
,	O	O
but	O	O
it	O	O
boils	O	O
down	O	O
to	O	O
wanting	O	O
an	O	O
"	O	O
orElse	O	O
"	O	O
on	O	O
an	O	O
optional	O	O
that	O	O
takes	O	O
a	O	O
function	O	O
producing	O	O
a	O	O
new	O	O
optional	O	O
,	O	O
called	O	O
only	O	O
if	O	O
the	O	O
current	O	O
one	O	O
does	O	O
not	O	O
exist	O	O
.	O	O
It	O	O
'	O	O
s	O	O
implementation	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
m	O	O
curious	O	O
if	O	O
there	O	O
'	O	O
s	O	O
a	O	O
reason	O	O
such	O	O
a	O	O
method	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
,	O	O
if	O	O
I	O	O
'	O	O
m	O	O
just	O	O
using	O	O
Optional	B-api_mention	B-api_mention
in	O	O
an	O	O
unintended	O	O
way	O	O
,	O	O
and	O	O
what	O	O
other	O	O
ways	O	O
people	O	O
have	O	O
come	O	O
up	O	O
with	O	O
to	O	O
deal	O	O
with	O	O
this	O	O
case	O	O
.	O	O
I	O	O
should	O	O
say	O	O
that	O	O
I	O	O
think	O	O
that	O	O
solutions	O	O
involving	O	O
custom	O	O
utility	O	O
classes	O	O
/	O	O
methods	O	O
aren	O	O
'	O	O
t	O	O
elegant	O	O
because	O	O
people	O	O
working	O	O
with	O	O
my	O	O
code	O	O
won	O	O
'	O	O
t	O	O
necessarily	O	O
know	O	O
they	O	O
exist	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
anyone	O	O
knows	O	O
,	O	O
will	O	O
such	O	O
a	O	O
method	O	O
be	O	O
included	O	O
in	O	O
JDK	O	O
9	O	O
,	O	O
and	O	O
where	O	O
might	O	O
I	O	O
propose	O	O
such	O	O
a	O	O
method	O	O
?	O	O
This	O	O
seems	O	O
like	O	O
a	O	O
pretty	O	O
glaring	O	O
omission	O	O
to	O	O
the	O	O
API	O	O
to	O	O
me	O	O
.	O	O
Question	O	O
-	O	O
29095967	O	O
I	O	O
have	O	O
this	O	O
list	O	O
(	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
:	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
,	O	O
null	O	O
,	O	O
StringLiteral	O	O
,	O	O
null	O	O
,	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
And	O	O
I	O	O
'	O	O
d	O	O
like	O	O
something	O	O
like	O	O
this	O	O
:	O	O
[	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
,	O	O
[	O	O
StringLiteral	O	O
]	O	O
,	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
]	O	O
In	O	O
other	O	O
words	O	O
I	O	O
want	O	O
to	O	O
split	O	O
my	O	O
list	O	O
in	O	O
sublists	O	O
using	O	O
the	O	O
null	O	O
value	O	O
as	O	O
separator	O	O
,	O	O
in	O	O
order	O	O
to	O	O
obtain	O	O
a	O	O
list	O	O
of	O	O
lists	O	O
(	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
.	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
a	O	O
Java	O	O
8	O	O
solution	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
tried	O	O
with	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	O
partitioningBy	I-api_mention	O
but	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
it	O	O
is	O	O
what	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
.	O	O
Thanks	O	O
!	O	O
Question	O	O
-	O	O
20877086	O	O
,	O	O
answer	O	O
-	O	O
20877283	O	O
The	O	O
Integer	B-api_mention	B-api_mention
class	O	O
has	O	O
a	O	O
static	O	O
cache	O	O
,	O	O
that	O	O
stores	O	O
256	O	O
special	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
-	O	O
one	O	O
for	O	O
every	O	O
value	O	O
between	O	O
-	O	O
128	O	O
and	O	O
127	O	O
.	O	O
With	O	O
that	O	O
in	O	O
mind	O	O
,	O	O
consider	O	O
the	O	O
difference	O	O
between	O	O
these	O	O
three	O	O
.	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
(	O	O
obviously	O	O
)	O	O
makes	O	O
a	O	O
brand	O	O
new	O	O
Integer	B-api_mention	B-api_mention
object	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
returns	O	O
an	O	O
int	O	O
primitive	O	O
value	O	O
after	O	O
parsing	O	O
the	O	O
String	B-api_mention	B-api_mention
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
more	O	O
complex	O	O
than	O	O
the	O	O
others	O	O
.	O	O
It	O	O
starts	O	O
off	O	O
by	O	O
parsing	O	O
the	O	O
String	B-api_mention	B-api_mention
.	O	O
Then	O	O
,	O	O
if	O	O
the	O	O
value	O	O
is	O	O
between	O	O
-	O	O
128	O	O
and	O	O
127	O	O
,	O	O
it	O	O
returns	O	O
the	O	O
corresponding	O	O
object	O	O
from	O	O
the	O	O
static	O	O
cache	O	O
.	O	O
If	O	O
the	O	O
value	O	O
is	O	O
outside	O	O
of	O	O
this	O	O
range	O	O
,	O	O
then	O	O
it	O	O
invokes	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
passes	O	O
in	O	O
the	O	O
value	O	O
,	O	O
so	O	O
that	O	O
you	O	O
get	O	O
a	O	O
new	O	O
object	O	O
.	O	O
Now	O	O
,	O	O
consider	O	O
the	O	O
three	O	O
expressions	O	O
in	O	O
the	O	O
question	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
returns	O	O
true	O	O
,	O	O
because	O	O
the	O	O
Integer	B-api_mention	B-api_mention
whose	O	O
value	O	O
is	O	O
127	O	O
is	O	O
retrieved	O	O
twice	O	O
from	O	O
the	O	O
static	O	O
cache	O	O
,	O	O
and	O	O
compared	O	O
to	O	O
itself	O	O
.	O	O
There	O	O
'	O	O
s	O	O
only	O	O
one	O	O
Integer	B-api_mention	B-api_mention
object	O	O
involved	O	O
,	O	O
so	O	O
this	O	O
returns	O	O
true	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
returns	O	O
false	O	O
,	O	O
because	O	O
128	O	O
is	O	O
not	O	O
in	O	O
the	O	O
static	O	O
cache	O	O
.	O	O
So	O	O
a	O	O
new	O	O
Integer	B-api_mention	B-api_mention
is	O	O
created	O	O
for	O	O
each	O	O
side	O	O
of	O	O
the	O	O
equality	O	O
.	O	O
Since	O	O
there	O	O
are	O	O
two	O	O
different	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
,	O	O
and	O	O
=	O	O
=	O	O
for	O	O
objects	O	O
only	O	O
returns	O	O
true	O	O
if	O	O
both	O	O
sides	O	O
are	O	O
the	O	O
exact	O	O
same	O	O
object	O	O
,	O	O
this	O	O
is	O	O
going	O	O
to	O	O
be	O	O
false	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
comparing	O	O
the	O	O
primitive	O	O
int	O	O
value	O	O
128	O	O
on	O	O
the	O	O
left	O	O
,	O	O
with	O	O
a	O	O
newly	O	O
created	O	O
Integer	B-api_mention	B-api_mention
object	O	O
on	O	O
the	O	O
right	O	O
.	O	O
But	O	O
because	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
to	O	O
compare	O	O
an	O	O
int	O	O
to	O	O
an	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Java	O	O
will	O	O
auto	O	O
-	O	O
unbox	O	O
the	O	O
Integer	B-api_mention	B-api_mention
before	O	O
doing	O	O
the	O	O
comparison	O	O
;	O	O
so	O	O
you	O	O
end	O	O
up	O	O
comparing	O	O
an	O	O
int	O	O
to	O	O
an	O	O
int	O	O
.	O	O
Since	O	O
the	O	O
primitive	O	O
128	O	O
is	O	O
equal	O	O
to	O	O
itself	O	O
,	O	O
this	O	O
returns	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
27478241	O	O
=	O	O
=	O	O
can	O	O
be	O	O
used	O	O
in	O	O
many	O	O
object	O	O
types	O	O
but	O	O
you	O	O
can	O	O
use	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
for	O	O
any	O	O
type	O	O
,	O	O
especially	O	O
Strings	O	B-api_mention
and	O	O
Google	O	O
Map	O	O
Markers	O	B-api_mention
.	O	O
Question	O	O
-	O	O
28459498	O	O
,	O	O
answer	O	O
-	O	O
28513908	O	O
I	O	O
have	O	O
some	O	O
recollections	O	O
from	O	O
the	O	O
early	O	O
design	O	O
of	O	O
the	O	O
Streams	B-api_mention	O
API	O	O
that	O	O
might	O	O
shed	O	O
some	O	O
light	O	O
on	O	O
the	O	O
design	O	O
rationale	O	O
.	O	O
Back	O	O
in	O	O
2012	O	O
,	O	O
we	O	O
were	O	O
adding	O	O
lambdas	O	O
to	O	O
the	O	O
language	O	O
,	O	O
and	O	O
we	O	O
wanted	O	O
a	O	O
collections	O	O
-	O	O
oriented	O	O
or	O	O
"	O	O
bulk	O	O
data	O	O
"	O	O
set	O	O
of	O	O
operations	O	O
,	O	O
programmed	O	O
using	O	O
lambdas	O	O
,	O	O
that	O	O
would	O	O
facilitate	O	O
parallelism	O	O
.	O	O
The	O	O
idea	O	O
of	O	O
lazily	O	O
chaining	O	O
operations	O	O
together	O	O
was	O	O
well	O	O
established	O	O
by	O	O
this	O	O
point	O	O
.	O	O
We	O	O
also	O	O
didn	O	O
'	O	O
t	O	O
want	O	O
the	O	O
intermediate	O	O
operations	O	O
to	O	O
store	O	O
results	O	O
.	O	O
The	O	O
main	O	O
issues	O	O
we	O	O
needed	O	O
to	O	O
decide	O	O
were	O	O
what	O	O
the	O	O
objects	O	O
in	O	O
the	O	O
chain	O	O
looked	O	O
like	O	O
in	O	O
the	O	O
API	O	O
and	O	O
how	O	O
they	O	O
hooked	O	O
up	O	O
to	O	O
data	O	O
sources	O	O
.	O	O
The	O	O
sources	O	O
were	O	O
often	O	O
collections	O	O
,	O	O
but	O	O
we	O	O
also	O	O
wanted	O	O
to	O	O
support	O	O
data	O	O
coming	O	O
from	O	O
a	O	O
file	O	O
or	O	O
the	O	O
network	O	O
,	O	O
or	O	O
data	O	O
generated	O	O
on	O	O
-	O	O
the	O	O
-	O	O
fly	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
from	O	O
a	O	O
random	O	O
number	O	O
generator	O	O
.	O	O
There	O	O
were	O	O
many	O	O
influences	O	O
of	O	O
existing	O	O
work	O	O
on	O	O
the	O	O
design	O	O
.	O	O
Among	O	O
the	O	O
more	O	O
influential	O	O
were	O	O
Google	O	O
'	O	O
s	O	O
Guava	O	O
library	O	O
and	O	O
the	O	O
Scala	O	O
collections	O	O
library	O	O
.	O	O
(	O	O
If	O	O
anybody	O	O
is	O	O
surprised	O	O
about	O	O
the	O	O
influence	O	O
from	O	O
Guava	O	O
,	O	O
note	O	O
that	O	O
Kevin	O	O
Bourrillion	O	O
,	O	O
Guava	O	O
lead	O	O
developer	O	O
,	O	O
was	O	O
on	O	O
the	O	O
JSR	O	O
-	O	O
335	O	O
Lambda	O	O
expert	O	O
group	O	O
.	O	O
)	O	O
On	O	O
Scala	O	O
collections	O	O
,	O	O
we	O	O
found	O	O
this	O	O
talk	O	O
by	O	O
Martin	O	O
Odersky	O	O
to	O	O
be	O	O
of	O	O
particular	O	O
interest	O	O
:	O	O
Future	O	O
-	O	O
Proofing	O	O
Scala	O	O
Collections	O	B-api_mention
:	O	O
from	O	O
Mutable	O	O
to	O	O
Persistent	O	O
to	O	O
Parallel	O	O
.	O	O
(	O	O
Stanford	O	O
EE380	O	O
,	O	O
2011	O	O
June	O	O
1	O	O
.	O	O
)	O	O
Our	O	O
prototype	O	O
design	O	O
at	O	O
the	O	O
time	O	O
was	O	O
based	O	O
around	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
The	O	O
familiar	O	O
operations	O	O
filter	B-api_mention	O
,	O	O
map	B-api_mention	O
,	O	O
and	O	O
so	O	O
forth	O	O
were	O	O
extension	O	O
(	O	O
default	O	O
)	O	O
methods	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
Calling	O	O
one	O	O
added	O	O
an	O	O
operation	O	O
to	O	O
the	O	O
chain	O	O
and	O	O
returned	O	O
another	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
A	O	O
terminal	O	O
operation	O	O
like	O	O
count	O	O
would	O	O
call	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
up	O	O
the	O	O
chain	O	O
to	O	O
the	O	O
source	O	O
,	O	O
and	O	O
the	O	O
operations	O	O
were	O	O
implemented	O	O
within	O	O
each	O	O
stage	O	O
'	O	O
s	O	O
Iterator	B-api_mention	B-api_mention
.	O	O
Since	O	O
these	O	O
are	O	O
Iterables	O	B-api_mention
,	O	O
you	O	O
can	O	O
call	O	O
the	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
more	O	O
than	O	O
once	O	O
.	O	O
What	O	O
should	O	O
happen	O	O
then	O	O
?	O	O
If	O	O
the	O	O
source	O	O
is	O	O
a	O	O
collection	O	O
,	O	O
this	O	O
mostly	O	O
works	O	O
fine	O	O
.	O	O
Collections	B-api_mention	B-api_mention
are	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
and	O	O
each	O	O
call	O	O
to	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
produces	O	O
a	O	O
distinct	O	O
Iterator	B-api_mention	B-api_mention
instance	O	O
that	O	O
is	O	O
independent	O	O
of	O	O
any	O	O
other	O	O
active	O	O
instances	O	O
,	O	O
and	O	O
each	O	O
traverses	O	O
the	O	O
collection	O	O
independently	O	O
.	O	O
Great	O	O
.	O	O
Now	O	O
what	O	O
if	O	O
the	O	O
source	O	O
is	O	O
one	O	O
-	O	O
shot	O	O
,	O	O
like	O	O
reading	O	O
lines	O	O
from	O	O
a	O	O
file	O	O
?	O	O
Maybe	O	O
the	O	O
first	O	O
Iterator	O	B-api_mention
should	O	O
get	O	O
all	O	O
the	O	O
values	O	O
but	O	O
the	O	O
second	O	O
and	O	O
subsequent	O	O
ones	O	O
should	O	O
be	O	O
empty	O	O
.	O	O
Maybe	O	O
the	O	O
values	O	O
should	O	O
be	O	O
interleaved	O	O
among	O	O
the	O	O
Iterators	O	B-api_mention
.	O	O
Or	O	O
maybe	O	O
each	O	O
Iterator	B-api_mention	B-api_mention
should	O	O
get	O	O
all	O	O
the	O	O
same	O	O
values	O	O
.	O	O
Then	O	O
,	O	O
what	O	O
if	O	O
you	O	O
have	O	O
two	O	O
iterators	O	O
and	O	O
one	O	O
gets	O	O
farther	O	O
ahead	O	O
of	O	O
the	O	O
other	O	O
?	O	O
Somebody	O	O
will	O	O
have	O	O
to	O	O
buffer	O	O
up	O	O
the	O	O
values	O	O
in	O	O
the	O	O
second	O	O
Iterator	O	B-api_mention
until	O	O
they	O	O
'	O	O
re	O	O
read	O	O
.	O	O
Worse	O	O
,	O	O
what	O	O
if	O	O
you	O	O
get	O	O
one	O	O
Iterator	B-api_mention	B-api_mention
and	O	O
read	O	O
all	O	O
the	O	O
values	O	O
,	O	O
and	O	O
only	O	O
then	O	O
get	O	O
a	O	O
second	O	O
Iterator	B-api_mention	B-api_mention
.	O	O
Where	O	O
do	O	O
the	O	O
values	O	O
come	O	O
from	O	O
now	O	O
?	O	O
Is	O	O
there	O	O
a	O	O
requirement	O	O
for	O	O
them	O	O
all	O	O
to	O	O
be	O	O
buffered	O	O
up	O	O
just	O	O
in	O	O
case	O	O
somebody	O	O
wants	O	O
a	O	O
second	O	O
Iterator	B-api_mention	B-api_mention
?	O	O
Clearly	O	O
,	O	O
allowing	O	O
multiple	O	O
Iterators	O	B-api_mention
over	O	O
a	O	O
one	O	O
-	O	O
shot	O	O
source	O	O
raises	O	O
a	O	O
lot	O	O
of	O	O
questions	O	O
.	O	O
We	O	O
didn	O	O
'	O	O
t	O	O
have	O	O
good	O	O
answers	O	O
for	O	O
them	O	O
.	O	O
We	O	O
wanted	O	O
consistent	O	O
,	O	O
predictable	O	O
behavior	O	O
for	O	O
what	O	O
happens	O	O
if	O	O
you	O	O
call	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
twice	O	O
.	O	O
This	O	O
pushed	O	O
us	O	O
toward	O	O
disallowing	O	O
multiple	O	O
traversals	O	O
,	O	O
making	O	O
the	O	O
pipelines	O	O
one	O	O
-	O	O
shot	O	O
.	O	O
We	O	O
also	O	O
observed	O	O
others	O	O
bumping	O	O
into	O	O
these	O	O
issues	O	O
.	O	O
In	O	O
the	O	O
JDK	O	O
,	O	O
most	O	O
Iterables	O	B-api_mention
are	O	O
collections	O	O
or	O	O
collection	O	O
-	O	O
like	O	O
objects	O	O
,	O	O
which	O	O
allow	O	O
multiple	O	O
traversal	O	O
.	O	O
It	O	O
isn	O	O
'	O	O
t	O	O
specified	O	O
anywhere	O	O
,	O	O
but	O	O
there	O	O
seemed	O	O
to	O	O
be	O	O
an	O	O
unwritten	O	O
expectation	O	O
that	O	O
Iterables	O	B-api_mention
allow	O	O
multiple	O	O
traversal	O	O
.	O	O
A	O	O
notable	O	O
exception	O	O
is	O	O
the	O	O
NIO	O	O
DirectoryStream	B-api_mention	B-api_mention
interface	O	O
.	O	O
Its	O	O
specification	O	O
includes	O	O
this	O	O
interesting	O	O
warning	O	O
:	O	O
#	O	O
blockquote	O	O
[	O	O
bold	O	O
in	O	O
original	O	O
]	O	O
This	O	O
seemed	O	O
unusual	O	O
and	O	O
unpleasant	O	O
enough	O	O
that	O	O
we	O	O
didn	O	O
'	O	O
t	O	O
want	O	O
to	O	O
create	O	O
a	O	O
whole	O	O
bunch	O	O
of	O	O
new	O	O
Iterables	O	B-api_mention
that	O	O
might	O	O
be	O	O
once	O	O
-	O	O
only	O	O
.	O	O
This	O	O
pushed	O	O
us	O	O
away	O	O
from	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
About	O	O
this	O	O
time	O	O
,	O	O
an	O	O
article	O	O
by	O	O
Bruce	O	O
Eckel	O	O
appeared	O	O
that	O	O
described	O	O
a	O	O
spot	O	O
of	O	O
trouble	O	O
he	O	O
'	O	O
d	O	O
had	O	O
with	O	O
Scala	O	O
.	O	O
He	O	O
'	O	O
d	O	O
written	O	O
this	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
'	O	O
s	O	O
pretty	O	O
straightforward	O	O
.	O	O
It	O	O
parses	O	O
lines	O	O
of	O	O
text	O	O
into	O	O
Registrant	O	O
objects	O	O
and	O	O
prints	O	O
them	O	O
out	O	O
twice	O	O
.	O	O
Except	O	O
that	O	O
it	O	O
actually	O	O
only	O	O
prints	O	O
them	O	O
out	O	O
once	O	O
.	O	O
It	O	O
turns	O	O
out	O	O
that	O	O
he	O	O
thought	O	O
that	O	O
registrants	O	O
was	O	O
a	O	O
collection	O	O
,	O	O
when	O	O
in	O	O
fact	O	O
it	O	O
'	O	O
s	O	O
an	O	O
iterator	O	O
.	O	O
The	O	O
second	O	O
call	O	O
to	O	O
foreach	O	O
encounters	O	O
an	O	O
empty	O	O
iterator	O	O
,	O	O
from	O	O
which	O	O
all	O	O
values	O	O
have	O	O
been	O	O
exhausted	O	O
,	O	O
so	O	O
it	O	O
prints	O	O
nothing	O	O
.	O	O
This	O	O
kind	O	O
of	O	O
experience	O	O
convinced	O	O
us	O	O
that	O	O
it	O	O
was	O	O
very	O	O
important	O	O
to	O	O
have	O	O
clearly	O	O
predictable	O	O
results	O	O
if	O	O
multiple	O	O
traversal	O	O
is	O	O
attempted	O	O
.	O	O
It	O	O
also	O	O
highlighted	O	O
the	O	O
importance	O	O
of	O	O
distinguishing	O	O
between	O	O
lazy	O	O
pipeline	O	O
-	O	O
like	O	O
structures	O	O
from	O	O
actual	O	O
collections	O	O
that	O	O
store	O	O
data	O	O
.	O	O
This	O	O
in	O	O
turn	O	O
drove	O	O
the	O	O
separation	O	O
of	O	O
the	O	O
lazy	O	O
pipeline	O	O
operations	O	O
into	O	O
the	O	O
new	O	O
Stream	B-api_mention	B-api_mention
interface	O	O
and	O	O
keeping	O	O
only	O	O
eager	O	O
,	O	O
mutative	O	O
operations	O	O
directly	O	O
on	O	O
Collections	B-api_mention	B-api_mention
.	O	I-api_mention
Brian	O	I-api_mention
Goetz	O	O
has	O	O
explained	O	O
the	O	O
rationale	O	O
for	O	O
that	O	O
.	O	O
What	O	O
about	O	O
allowing	O	O
multiple	O	O
traversal	O	O
for	O	O
collection	O	O
-	O	O
based	O	O
pipelines	O	O
but	O	O
disallowing	O	O
it	O	O
for	O	O
non	O	O
-	O	O
collection	O	O
-	O	O
based	O	O
pipelines	O	O
?	O	O
It	O	O
'	O	O
s	O	O
inconsistent	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
sensible	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
reading	O	O
values	O	O
from	O	O
the	O	O
network	O	O
,	O	O
of	O	O
course	O	O
you	O	O
can	O	O
'	O	O
t	O	O
traverse	O	O
them	O	O
again	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
traverse	O	O
them	O	O
multiple	O	O
times	O	O
,	O	O
you	O	O
have	O	O
to	O	O
pull	O	O
them	O	O
into	O	O
a	O	O
collection	O	O
explicitly	O	O
.	O	O
But	O	O
let	O	O
'	O	O
s	O	O
explore	O	O
allowing	O	O
multiple	O	O
traversal	O	O
from	O	O
collections	O	O
-	O	O
based	O	O
pipelines	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
say	O	O
you	O	O
did	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
The	O	O
into	O	O
operation	O	O
is	O	O
now	O	O
spelled	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
)	O	O
If	O	O
source	O	O
is	O	O
a	O	O
collection	O	O
,	O	O
then	O	O
the	O	O
first	O	O
into	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
will	O	O
create	O	O
a	O	O
chain	O	O
of	O	O
Iterators	B-api_mention	B-api_mention
back	O	O
to	O	O
the	O	O
source	O	O
,	O	O
execute	O	O
the	O	O
pipeline	O	O
operations	O	O
,	O	O
and	O	O
send	O	O
the	O	O
results	O	O
into	O	O
the	O	O
destination	O	O
.	O	O
The	O	O
second	O	O
call	O	O
to	O	O
into	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
create	O	O
another	O	O
chain	O	O
of	O	O
Iterators	O	B-api_mention
,	O	O
and	O	O
execute	O	O
the	O	O
pipeline	O	O
operations	O	O
again	O	O
.	O	O
This	O	O
isn	O	O
'	O	O
t	O	O
obviously	O	O
wrong	O	O
but	O	O
it	O	O
does	O	O
have	O	O
the	O	O
effect	O	O
of	O	O
performing	O	O
all	O	O
the	O	O
filter	O	O
and	O	O
map	O	O
operations	O	O
a	O	O
second	O	O
time	O	O
for	O	O
each	O	O
element	O	O
.	O	O
I	O	O
think	O	O
many	O	O
programmers	O	O
would	O	O
have	O	O
been	O	O
surprised	O	O
by	O	O
this	O	O
behavior	O	O
.	O	O
As	O	O
I	O	O
mentioned	O	O
above	O	O
,	O	O
we	O	O
had	O	O
been	O	O
talking	O	O
to	O	O
the	O	O
Guava	O	O
developers	O	O
.	O	O
One	O	O
of	O	O
the	O	O
cool	O	O
things	O	O
they	O	O
have	O	O
is	O	O
an	O	O
Idea	O	O
Graveyard	O	O
where	O	O
they	O	O
describe	O	O
features	O	O
that	O	O
they	O	O
decided	O	O
not	O	O
to	O	O
implement	O	O
along	O	O
with	O	O
the	O	O
reasons	O	O
.	O	O
The	O	O
idea	O	O
of	O	O
lazy	O	O
collections	O	O
sounds	O	O
pretty	O	O
cool	O	O
,	O	O
but	O	O
here	O	O
'	O	O
s	O	O
what	O	O
they	O	O
have	O	O
to	O	O
say	O	O
about	O	O
it	O	O
.	O	O
Consider	O	O
a	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
operation	O	O
that	O	O
returns	O	O
a	O	O
List	B-api_mention	B-api_mention
:	O	O
#	O	O
blockquote	O	O
To	O	O
take	O	O
a	O	O
specific	O	O
example	O	O
,	O	O
what	O	O
'	O	O
s	O	O
the	O	O
cost	O	O
of	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
List	B-api_mention	B-api_mention
?	O	O
For	O	O
commonly	O	O
used	O	O
classes	O	O
like	O	O
ArrayList	B-api_mention	B-api_mention
,	O	O
they	O	O
'	O	O
re	O	O
O	O	O
(	O	O
1	O	O
)	O	O
.	O	O
But	O	O
if	O	O
you	O	O
call	O	O
one	O	O
of	O	O
these	O	O
on	O	O
a	O	O
lazily	O	O
-	O	O
filtered	O	O
list	O	O
,	O	O
it	O	O
has	O	O
to	O	O
run	O	O
the	O	O
filter	O	O
over	O	O
the	O	O
backing	O	O
list	O	O
,	O	O
and	O	O
all	O	O
of	O	O
a	O	O
sudden	O	O
these	O	O
operations	O	O
are	O	O
O	O	O
(	O	O
n	O	O
)	O	O
.	O	O
Worse	O	O
,	O	O
it	O	O
has	O	O
to	O	O
traverse	O	O
the	O	O
backing	O	O
list	O	O
on	O	O
every	O	O
operation	O	O
.	O	O
This	O	O
seemed	O	O
to	O	O
us	O	O
to	O	O
be	O	O
too	O	O
much	O	O
laziness	O	O
.	O	O
It	O	O
'	O	O
s	O	O
one	O	O
thing	O	O
to	O	O
set	O	O
up	O	O
some	O	O
operations	O	O
and	O	O
defer	O	O
actual	O	O
execution	O	O
until	O	O
you	O	O
so	O	O
"	O	O
Go	O	O
"	O	O
.	O	O
It	O	O
'	O	O
s	O	O
another	O	O
to	O	O
set	O	O
things	O	O
up	O	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
hides	O	O
a	O	O
potentially	O	O
large	O	O
amount	O	O
of	O	O
recomputation	O	O
.	O	O
In	O	O
proposing	O	O
to	O	O
disallow	O	O
non	O	O
-	O	O
linear	O	O
or	O	O
"	O	O
no	O	O
-	O	O
reuse	O	O
"	O	O
streams	O	O
,	O	O
Paul	O	O
Sandoz	O	O
described	O	O
the	O	O
potential	O	O
consequences	O	O
of	O	O
allowing	O	O
them	O	O
as	O	O
giving	O	O
rise	O	O
to	O	O
"	O	O
unexpected	O	O
or	O	O
confusing	O	O
results	O	O
.	O	O
"	O	O
He	O	O
also	O	O
mentioned	O	O
that	O	O
parallel	O	O
execution	O	O
would	O	O
make	O	O
things	O	O
even	O	O
trickier	O	O
.	O	O
Finally	O	O
,	O	O
I	O	O
'	O	O
d	O	O
add	O	O
that	O	O
a	O	O
pipeline	O	O
operation	O	O
with	O	O
side	O	O
effects	O	O
would	O	O
lead	O	O
to	O	O
difficult	O	O
and	O	O
obscure	O	O
bugs	O	O
if	O	O
the	O	O
operation	O	O
were	O	O
unexpectedly	O	O
executed	O	O
multiple	O	O
times	O	O
,	O	O
or	O	O
at	O	O
least	O	O
a	O	O
different	O	O
number	O	O
of	O	O
times	O	O
than	O	O
the	O	O
programmer	O	O
expected	O	O
.	O	O
(	O	O
But	O	O
Java	O	O
programmers	O	O
don	O	O
'	O	O
t	O	O
write	O	O
lambda	O	O
expressions	O	O
with	O	O
side	O	O
effects	O	O
,	O	O
do	O	O
they	O	O
?	O	O
DO	O	O
THEY	O	O
?	O	O
?	O	O
)	O	O
So	O	O
that	O	O
'	O	O
s	O	O
the	O	O
basic	O	O
rationale	O	O
for	O	O
the	O	O
Java	O	O
8	O	O
Streams	O	O
API	O	O
design	O	O
that	O	O
allows	O	O
one	O	O
-	O	O
shot	O	O
traversal	O	O
and	O	O
that	O	O
requires	O	O
a	O	O
strictly	O	O
linear	O	O
(	O	O
no	O	O
branching	O	O
)	O	O
pipeline	O	O
.	O	O
It	O	O
provides	O	O
consistent	O	O
behavior	O	O
across	O	O
multiple	O	O
different	O	O
stream	O	O
sources	O	O
,	O	O
it	O	O
clearly	O	O
separates	O	O
lazy	O	O
from	O	O
eager	O	O
operations	O	O
,	O	O
and	O	O
it	O	O
provides	O	O
a	O	O
straightforward	O	O
execution	O	O
model	O	O
.	O	O
With	O	O
regard	O	O
to	O	O
IEnumerable	O	O
,	O	O
I	O	O
am	O	O
far	O	O
from	O	O
an	O	O
expert	O	O
on	O	O
C	O	O
#	O	O
and	O	O
.	O	O
NET	O	O
,	O	O
so	O	O
I	O	O
would	O	O
appreciate	O	O
being	O	O
corrected	O	O
(	O	O
gently	O	O
)	O	O
if	O	O
I	O	O
draw	O	O
any	O	O
incorrect	O	O
conclusions	O	O
.	O	O
It	O	O
does	O	O
appear	O	O
,	O	O
however	O	O
,	O	O
that	O	O
IEnumerable	O	O
permits	O	O
multiple	O	O
traversal	O	O
to	O	O
behave	O	O
differently	O	O
with	O	O
different	O	O
sources	O	O
;	O	O
and	O	O
it	O	O
permits	O	O
a	O	O
branching	O	O
structure	O	O
of	O	O
nested	O	O
IEnumerable	O	O
operations	O	O
,	O	O
which	O	O
may	O	O
result	O	O
in	O	O
some	O	O
significant	O	O
recomputation	O	O
.	O	O
While	O	O
I	O	O
appreciate	O	O
that	O	O
different	O	O
systems	O	O
make	O	O
different	O	O
tradeoffs	O	O
,	O	O
these	O	O
are	O	O
two	O	O
characteristics	O	O
that	O	O
we	O	O
sought	O	O
to	O	O
avoid	O	O
in	O	O
the	O	O
design	O	O
of	O	O
the	O	O
Java	O	O
8	O	O
Streams	O	O
API	O	O
.	O	O
The	O	O
quicksort	O	O
example	O	O
given	O	O
by	O	O
the	O	O
OP	O	O
is	O	O
interesting	O	O
,	O	O
puzzling	O	O
,	O	O
and	O	O
I	O	O
'	O	O
m	O	O
sorry	O	O
to	O	O
say	O	O
,	O	O
somewhat	O	O
horrifying	O	O
.	O	O
Calling	O	O
QuickSort	O	O
takes	O	O
an	O	O
IEnumerable	O	O
and	O	O
returns	O	O
an	O	O
IEnumerable	O	O
,	O	O
so	O	O
no	O	O
sorting	O	O
is	O	O
actually	O	O
done	O	O
until	O	O
the	O	O
final	O	O
IEnumerable	O	O
is	O	O
traversed	O	O
.	O	O
What	O	O
the	O	O
call	O	O
seems	O	O
to	O	O
do	O	O
,	O	O
though	O	O
,	O	O
is	O	O
build	O	O
up	O	O
a	O	O
tree	O	O
structure	O	O
of	O	O
IEnumerables	O	O
that	O	O
reflects	O	O
the	O	O
partitioning	O	O
that	O	O
quicksort	O	O
would	O	O
do	O	O
,	O	O
without	O	O
actually	O	O
doing	O	O
it	O	O
.	O	O
(	O	O
This	O	O
is	O	O
lazy	O	O
computation	O	O
,	O	O
after	O	O
all	O	O
.	O	O
)	O	O
If	O	O
the	O	O
source	O	O
has	O	O
N	O	O
elements	O	O
,	O	O
the	O	O
tree	O	O
will	O	O
be	O	O
N	O	O
elements	O	O
wide	O	O
at	O	O
its	O	O
widest	O	O
,	O	O
and	O	O
it	O	O
will	O	O
be	O	O
lg	O	O
(	O	O
N	O	O
)	O	O
levels	O	O
deep	O	O
.	O	O
It	O	O
seems	O	O
to	O	O
me	O	O
-	O	O
-	O	O
and	O	O
once	O	O
again	O	O
,	O	O
I	O	O
'	O	O
m	O	O
not	O	O
a	O	O
C	O	O
#	O	O
or	O	O
.	O	O
NET	O	O
expert	O	O
-	O	O
-	O	O
that	O	O
this	O	O
will	O	O
cause	O	O
certain	O	O
innocuous	O	O
-	O	O
looking	O	O
calls	O	O
,	O	O
such	O	O
as	O	O
pivot	O	O
selection	O	O
via	O	O
ints	O	O
.	B-api_mention	O
First	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
to	O	O
be	O	O
more	O	O
expensive	O	O
than	O	O
they	O	O
look	O	O
.	O	O
At	O	O
the	O	O
first	O	O
level	O	O
,	O	O
of	O	O
course	O	O
,	O	O
it	O	O
'	O	O
s	O	O
O	O	O
(	O	O
1	O	O
)	O	O
.	O	O
But	O	O
consider	O	O
a	O	O
partition	O	O
deep	O	O
in	O	O
the	O	O
tree	O	O
,	O	O
at	O	O
the	O	O
right	O	O
-	O	O
hand	O	O
edge	O	O
.	O	O
To	O	O
compute	O	O
the	O	O
first	O	O
element	O	O
of	O	O
this	O	O
partition	O	O
,	O	O
the	O	O
entire	O	O
source	O	O
has	O	O
to	O	O
be	O	O
traversed	O	O
,	O	O
an	O	O
O	O	O
(	O	O
N	O	O
)	O	O
operation	O	O
.	O	O
But	O	O
since	O	O
the	O	O
partitions	O	O
above	O	O
are	O	O
lazy	O	O
,	O	O
they	O	O
must	O	O
be	O	O
recomputed	O	O
,	O	O
requiring	O	O
O	O	O
(	O	O
lg	O	O
N	O	O
)	O	O
comparisons	O	O
.	O	O
So	O	O
selecting	O	O
the	O	O
pivot	O	O
would	O	O
be	O	O
an	O	O
O	O	O
(	O	O
N	O	O
lg	O	O
N	O	O
)	O	O
operation	O	O
,	O	O
which	O	O
is	O	O
as	O	O
expensive	O	O
as	O	O
an	O	O
entire	O	O
sort	O	O
.	O	O
But	O	O
we	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
sort	O	O
until	O	O
we	O	O
traverse	O	O
the	O	O
returned	O	O
IEnumerable	O	O
.	O	O
In	O	O
the	O	O
standard	O	O
quicksort	O	O
algorithm	O	O
,	O	O
each	O	O
level	O	O
of	O	O
partitioning	O	O
doubles	O	O
the	O	O
number	O	O
of	O	O
partitions	O	O
.	O	O
Each	O	O
partition	O	O
is	O	O
only	O	O
half	O	O
the	O	O
size	O	O
,	O	O
so	O	O
each	O	O
level	O	O
remains	O	O
at	O	O
O	O	O
(	O	O
N	O	O
)	O	O
complexity	O	O
.	O	O
The	O	O
tree	O	O
of	O	O
partitions	O	O
is	O	O
O	O	O
(	O	O
lg	O	O
N	O	O
)	O	O
high	O	O
,	O	O
so	O	O
the	O	O
total	O	O
work	O	O
is	O	O
O	O	O
(	O	O
N	O	O
lg	O	O
N	O	O
)	O	O
.	O	O
With	O	O
the	O	O
tree	O	O
of	O	O
lazy	O	O
IEnumerables	O	O
,	O	O
at	O	O
the	O	O
bottom	O	O
of	O	O
the	O	O
tree	O	O
there	O	O
are	O	O
N	O	O
partitions	O	O
.	O	O
Computing	O	O
each	O	O
partition	O	O
requires	O	O
a	O	O
traversal	O	O
of	O	O
N	O	O
elements	O	O
,	O	O
each	O	O
of	O	O
which	O	O
requires	O	O
lg	O	O
(	O	O
N	O	O
)	O	O
comparisons	O	O
up	O	O
the	O	O
tree	O	O
.	O	O
To	O	O
compute	O	O
all	O	O
the	O	O
partitions	O	O
at	O	O
the	O	O
bottom	O	O
of	O	O
the	O	O
tree	O	O
,	O	O
then	O	O
,	O	O
requires	O	O
O	O	O
(	O	O
N	O	O
^	O	O
2	O	O
lg	O	O
N	O	O
)	O	O
comparisons	O	O
.	O	O
(	O	O
Is	O	O
this	O	O
right	O	O
?	O	O
I	O	O
can	O	O
hardly	O	O
believe	O	O
this	O	O
.	O	O
Somebody	O	O
please	O	O
check	O	O
this	O	O
for	O	O
me	O	O
.	O	O
)	O	O
In	O	O
any	O	O
case	O	O
,	O	O
it	O	O
is	O	O
indeed	O	O
cool	O	O
that	O	O
IEnumerable	O	O
can	O	O
be	O	O
used	O	O
this	O	O
way	O	O
to	O	O
build	O	O
up	O	O
complicated	O	O
structures	O	O
of	O	O
computation	O	O
.	O	O
But	O	O
if	O	O
it	O	O
does	O	O
increase	O	O
the	O	O
computational	O	O
complexity	O	O
as	O	O
much	O	O
as	O	O
I	O	O
think	O	O
it	O	O
does	O	O
,	O	O
it	O	O
would	O	O
seem	O	O
that	O	O
programming	O	O
this	O	O
way	O	O
is	O	O
something	O	O
that	O	O
should	O	O
be	O	O
avoided	O	O
unless	O	O
one	O	O
is	O	O
extremely	O	O
careful	O	O
.	O	O
Question	O	O
-	O	O
25606833	O	O
,	O	O
answer	O	O
-	O	O
25757572	O	O
There	O	O
are	O	O
several	O	O
issues	O	O
here	O	O
.	O	O
#	O	O
li	O	O
Any	O	O
solution	O	O
based	O	O
on	O	O
reading	O	O
lines	O	O
is	O	O
going	O	O
to	O	O
process	O	O
each	O	O
character	O	O
twice	O	O
.	O	O
Compilers	O	O
for	O	O
example	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
,	O	O
they	O	O
read	O	O
one	O	O
character	O	O
at	O	O
a	O	O
time	O	O
and	O	O
despatch	O	O
on	O	O
it	O	O
directly	O	O
.	O	O
#	O	O
li	O	O
Any	O	O
solution	O	O
based	O	O
on	O	O
readLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
going	O	O
to	O	O
create	O	O
Strings	B-api_mention	O
.	O	O
#	O	O
li	O	O
You	O	O
are	O	O
using	O	O
different	O	O
buffer	O	O
sizes	O	O
.	O	O
#	O	O
li	O	O
You	O	O
are	O	O
using	O	O
different	O	O
I	O	O
/	O	O
O	O	O
technologies	O	O
.	O	O
#	O	O
li	O	O
In	O	O
some	O	O
cases	O	O
you	O	O
are	O	O
using	O	O
character	O	O
conversion	O	O
,	O	O
while	O	O
in	O	O
others	O	O
you	O	O
aren	O	O
'	O	O
t	O	O
.	O	O
#	O	O
li	O	O
You	O	O
'	O	O
re	O	O
over	O	O
-	O	O
analyzing	O	O
the	O	O
file	O	O
.	O	O
You	O	O
don	O	O
'	O	O
t	O	O
really	O	O
care	O	O
where	O	O
the	O	O
white	O	O
space	O	O
is	O	O
,	O	O
or	O	O
how	O	O
much	O	O
of	O	O
it	O	O
there	O	O
is	O	O
,	O	O
as	O	O
long	O	O
as	O	O
it	O	O
separates	O	O
the	O	O
numbers	O	O
from	O	O
each	O	O
other	O	O
.	O	O
My	O	O
solution	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
9749746	O	O
,	O	O
answer	O	O
-	O	O
9749864	O	O
You	O	O
are	O	O
specifically	O	O
asking	O	O
about	O	O
how	O	O
they	O	O
internally	O	O
work	O	O
,	O	O
so	O	O
here	O	O
you	O	O
are	O	O
:	O	O
No	O	O
synchronization	O	O
#	O	O
pre	O	O
It	O	O
basically	O	O
reads	O	O
value	O	O
from	O	O
memory	O	O
,	O	O
increments	O	O
it	O	O
and	O	O
puts	O	O
back	O	O
to	O	O
memory	O	O
.	O	O
This	O	O
works	O	O
in	O	O
single	O	O
thread	O	O
but	O	O
nowadays	O	O
,	O	O
in	O	O
the	O	O
era	O	O
of	O	O
multi	O	O
-	O	O
core	O	O
,	O	O
multi	O	O
-	O	O
CPU	O	O
,	O	O
multi	O	O
-	O	O
level	O	O
caches	O	O
it	O	O
won	O	O
'	O	O
t	O	O
work	O	O
correctly	O	O
.	O	O
First	O	O
of	O	O
all	O	O
it	O	O
introduces	O	O
race	O	O
condition	O	O
(	O	O
several	O	O
threads	O	O
can	O	O
read	O	O
the	O	O
value	O	O
at	O	O
the	O	O
same	O	O
time	O	O
)	O	O
,	O	O
but	O	O
also	O	O
visibility	O	O
problems	O	O
.	O	O
The	O	O
value	O	O
might	O	O
only	O	O
be	O	O
stored	O	O
in	O	O
"	O	O
local	O	O
"	O	O
CPU	O	O
memory	O	O
(	O	O
some	O	O
cache	O	O
)	O	O
and	O	O
not	O	O
be	O	O
visible	O	O
for	O	O
other	O	O
CPUs	O	O
/	O	O
cores	O	O
(	O	O
and	O	O
thus	O	O
-	O	O
threads	O	O
)	O	O
.	O	O
This	O	O
is	O	O
why	O	O
many	O	O
refer	O	O
to	O	O
local	O	O
copy	O	O
of	O	O
a	O	O
variable	O	O
in	O	O
a	O	O
thread	O	O
.	O	O
It	O	O
is	O	O
very	O	O
unsafe	O	O
.	O	O
Consider	O	O
this	O	O
popular	O	O
but	O	O
broken	O	O
thread	O	O
-	O	O
stopping	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Add	O	O
volatile	O	O
to	O	O
stopped	O	O
variable	O	O
and	O	O
it	O	O
works	O	O
fine	O	O
-	O	O
if	O	O
any	O	O
other	O	O
thread	O	O
modifies	O	O
stopped	O	O
variable	O	O
via	O	O
pleaseStop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
you	O	O
are	O	O
guaranteed	O	O
to	O	O
see	O	O
that	O	O
change	O	O
immediately	O	O
in	O	O
working	O	O
thread	O	O
'	O	O
s	O	O
while	O	O
(	O	O
args	O	O
)	O	O
loop	O	O
.	O	O
BTW	O	O
this	O	O
is	O	O
not	O	O
a	O	O
good	O	O
way	O	O
to	O	O
interrupt	O	O
a	O	O
thread	O	O
either	O	O
,	O	O
see	O	O
:	O	O
How	O	O
to	O	O
stop	O	O
a	O	O
thread	O	O
that	O	O
is	O	O
running	O	O
forever	O	O
without	O	O
any	O	O
use	O	O
and	O	O
Stopping	O	O
a	O	O
specific	O	O
java	O	O
thread	O	O
.	O	O
AtomicInteger	B-api_mention	B-api_mention
#	O	O
pre	O	O
The	O	O
AtomicInteger	B-api_mention	B-api_mention
class	O	O
uses	O	O
CAS	O	O
(	O	O
compare	O	O
-	O	O
and	O	O
-	O	O
swap	O	O
)	O	O
low	O	O
-	O	O
level	O	O
CPU	O	O
operations	O	O
(	O	O
no	O	O
synchronization	O	O
needed	O	O
!	O	O
)	O	O
They	O	O
allow	O	O
you	O	O
to	O	O
modify	O	O
a	O	O
particular	O	O
variable	O	O
only	O	O
if	O	O
the	O	O
present	O	O
value	O	O
is	O	O
equal	O	O
to	O	O
something	O	O
else	O	O
(	O	O
and	O	O
is	O	O
returned	O	O
successfully	O	O
)	O	O
.	O	O
So	O	O
when	O	O
you	O	O
execute	O	O
getAndIncrement	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
actually	O	O
runs	O	O
in	O	O
a	O	O
loop	O	O
(	O	O
simplified	O	O
real	O	O
implementation	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
basically	O	O
:	O	O
read	O	O
;	O	O
try	O	O
to	O	O
store	O	O
incremented	O	O
value	O	O
;	O	O
if	O	O
not	O	O
successful	O	O
(	O	O
the	O	O
value	O	O
is	O	O
no	O	O
longer	O	O
equal	O	O
to	O	O
current	O	O
)	O	O
,	O	O
read	O	O
and	O	O
try	O	O
again	O	O
.	O	O
The	O	O
compareAndSet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
implemented	O	O
in	O	O
native	O	O
code	O	O
(	O	O
assembly	O	O
)	O	O
.	O	O
volatile	O	O
without	O	O
synchronization	O	O
#	O	O
pre	O	O
This	O	O
code	O	O
is	O	O
not	O	O
correct	O	O
.	O	O
It	O	O
fixes	O	O
the	O	O
visibility	O	O
issue	O	O
(	O	O
volatile	O	O
makes	O	O
sure	O	O
other	O	O
threads	O	O
can	O	O
see	O	O
change	O	O
made	O	O
to	O	O
counter	O	O
)	O	O
but	O	O
still	O	O
has	O	O
a	O	O
race	O	O
condition	O	O
.	O	O
This	O	O
has	O	O
been	O	O
explained	O	O
multiple	O	O
times	O	O
:	O	O
pre	O	O
/	O	O
post	O	O
-	O	O
incrementation	O	O
is	O	O
not	O	O
atomic	O	O
.	O	O
The	O	O
only	O	O
side	O	O
effect	O	O
of	O	O
volatile	O	O
is	O	O
"	O	O
flushing	O	O
"	O	O
caches	O	O
so	O	O
that	O	O
all	O	O
other	O	O
parties	O	O
see	O	O
the	O	O
freshest	O	O
version	O	O
of	O	O
the	O	O
data	O	O
.	O	O
This	O	O
is	O	O
too	O	O
strict	O	O
in	O	O
most	O	O
situations	O	O
;	O	O
that	O	O
is	O	O
why	O	O
volatile	O	O
is	O	O
not	O	O
default	O	O
.	O	O
volatile	O	O
without	O	O
synchronization	O	O
(	O	O
2	O	O
)	O	O
#	O	O
pre	O	O
The	O	O
same	O	O
problem	O	O
as	O	O
above	O	O
,	O	O
but	O	O
even	O	O
worse	O	O
because	O	O
i	O	O
is	O	O
not	O	O
private	O	O
.	O	O
The	O	O
race	O	O
condition	O	O
is	O	O
still	O	O
present	O	O
.	O	O
Why	O	O
is	O	O
it	O	O
a	O	O
problem	O	O
?	O	O
If	O	O
,	O	O
say	O	O
,	O	O
two	O	O
threads	O	O
run	O	O
this	O	O
code	O	O
simultaneously	O	O
,	O	O
the	O	O
output	O	O
might	O	O
be	O	O
+	O	O
5	O	O
or	O	O
+	O	O
10	O	O
.	O	O
However	O	O
,	O	O
you	O	O
are	O	O
guaranteed	O	O
to	O	O
see	O	O
the	O	O
change	O	O
.	O	O
Multiple	O	O
independent	O	O
synchronized	O	O
#	O	O
pre	O	O
Surprise	O	O
,	O	O
this	O	O
code	O	O
is	O	O
incorrect	O	O
as	O	O
well	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
it	O	O
is	O	O
completely	O	O
wrong	O	O
.	O	O
First	O	O
of	O	O
all	O	O
you	O	O
are	O	O
synchronizing	O	O
on	O	O
i	O	O
,	O	O
which	O	O
is	O	O
about	O	O
to	O	O
be	O	O
changed	O	O
(	O	O
moreover	O	O
,	O	O
i	O	O
is	O	O
a	O	O
primitive	O	O
,	O	O
so	O	O
I	O	O
guess	O	O
you	O	O
are	O	O
synchronizing	O	O
on	O	O
a	O	O
temporary	O	O
Integer	O	B-api_mention
created	O	O
via	O	O
autoboxing	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Completely	O	O
flawed	O	O
.	O	O
You	O	O
could	O	O
also	O	O
write	O	O
:	O	O
#	O	O
pre	O	O
No	O	O
two	O	O
threads	O	O
can	O	O
enter	O	O
the	O	O
same	O	O
synchronized	O	O
block	O	O
with	O	O
the	O	O
same	O	O
lock	O	O
.	O	O
In	O	O
this	O	O
case	O	O
(	O	O
and	O	O
similarly	O	O
in	O	O
your	O	O
code	O	O
)	O	O
the	O	O
lock	O	O
object	O	O
changes	O	O
upon	O	O
every	O	O
execution	O	O
,	O	O
so	O	O
synchronized	O	O
effectively	O	O
has	O	O
no	O	O
effect	O	O
.	O	O
Even	O	O
if	O	O
you	O	O
have	O	O
used	O	O
a	O	O
final	O	O
variable	O	O
(	O	O
or	O	O
this	O	O
)	O	O
for	O	O
synchronization	O	O
,	O	O
the	O	O
code	O	O
is	O	O
still	O	O
incorrect	O	O
.	O	O
Two	O	O
threads	O	O
can	O	O
first	O	O
read	O	O
i	O	O
to	O	O
temp	O	O
synchronously	O	O
(	O	O
having	O	O
the	O	O
same	O	O
value	O	O
locally	O	O
in	O	O
temp	O	O
)	O	O
,	O	O
then	O	O
the	O	O
first	O	O
assigns	O	O
a	O	O
new	O	O
value	O	O
to	O	O
i	O	O
(	O	O
say	O	O
,	O	O
from	O	O
1	O	O
to	O	O
6	O	O
)	O	O
and	O	O
the	O	O
other	O	O
one	O	O
does	O	O
the	O	O
same	O	O
thing	O	O
(	O	O
from	O	O
1	O	O
to	O	O
6	O	O
)	O	O
.	O	O
The	O	O
synchronization	O	O
must	O	O
span	O	O
from	O	O
reading	O	O
to	O	O
assigning	O	O
a	O	O
value	O	O
.	O	O
Your	O	O
first	O	O
synchronization	O	O
has	O	O
no	O	O
effect	O	O
(	O	O
reading	O	O
an	O	O
int	O	O
is	O	O
atomic	O	O
)	O	O
and	O	O
the	O	O
second	O	O
as	O	O
well	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
,	O	O
these	O	O
are	O	O
the	O	O
correct	O	O
forms	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6416706	O	O
,	O	O
answer	O	O
-	O	O
6416788	O	O
As	O	O
soon	O	O
as	O	O
you	O	O
call	O	O
contains	B-api_mention	O
,	O	O
containsAll	B-api_mention	B-api_mention
,	O	O
equals	B-api_mention	O
,	O	O
hashCode	B-api_mention	B-api_mention
,	O	O
remove	B-api_mention	O
,	O	O
retainAll	B-api_mention	B-api_mention
,	O	O
size	B-api_mention	O
or	O	O
toArray	B-api_mention	B-api_mention
,	O	O
you	O	O
'	O	O
d	O	O
have	O	O
to	O	O
traverse	O	O
the	O	O
elements	O	O
anyway	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
occasionally	O	O
only	O	O
calling	O	O
methods	O	O
such	O	O
as	O	O
isEmpty	B-api_mention	B-api_mention
or	O	O
clear	O	O
I	O	O
suppose	O	O
you	O	O
'	O	O
d	O	O
be	O	O
better	O	O
of	O	O
by	O	O
creating	O	O
the	O	O
collection	O	O
lazily	O	O
.	O	O
You	O	O
could	O	O
for	O	O
instance	O	O
have	O	O
a	O	O
backing	O	O
ArrayList	B-api_mention	B-api_mention
for	O	O
storing	O	O
previously	O	O
iterated	O	O
elements	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
of	O	O
any	O	O
such	O	O
class	O	O
in	O	O
any	O	O
library	O	O
,	O	O
but	O	O
it	O	O
should	O	O
be	O	O
a	O	O
fairly	O	O
simple	O	O
exercise	O	O
to	O	O
write	O	O
up	O	O
.	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
20793241	O	O
Environment	O	O
variables	O	O
may	O	O
also	O	O
provide	O	O
a	O	O
useful	O	O
means	O	O
-	O	O
-	O	O
COMPUTERNAME	O	O
on	O	O
Windows	O	O
,	O	O
HOSTNAME	O	O
on	O	O
most	O	O
modern	O	O
Unix	O	O
/	O	O
Linux	O	O
shells	O	O
.	O	O
See	O	O
:	O	O
#	O	O
a	O	O
I	O	O
'	O	O
m	O	O
using	O	O
these	O	O
as	O	O
"	O	O
supplementary	O	O
"	O	O
methods	O	O
to	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
since	O	O
as	O	O
several	O	O
people	O	O
point	O	O
out	O	O
,	O	O
that	O	O
function	O	O
doesn	O	O
'	O	O
t	O	O
work	O	O
in	O	O
all	O	O
environments	O	O
.	O	O
Runtime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getRuntime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
exec	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
another	O	O
possible	O	O
supplement	O	O
.	O	O
At	O	O
this	O	O
stage	O	O
,	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
used	O	O
it	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
22847105	O	O
,	O	O
answer	O	O
-	O	O
37354549	O	O
The	O	O
way	O	O
I	O	O
think	O	O
about	O	O
it	O	O
is	O	O
that	O	O
you	O	O
use	O	O
flatMap	B-api_mention	B-api_mention
when	O	O
the	O	O
function	O	O
you	O	O
wanted	O	O
to	O	O
put	O	O
inside	O	O
of	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
an	O	O
Observable	B-api_mention	B-api_mention
.	O	O
In	O	O
which	O	O
case	O	O
you	O	O
might	O	O
still	O	O
try	O	O
to	O	O
use	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
it	O	O
would	O	O
be	O	O
unpractical	O	O
.	O	O
Let	O	O
me	O	O
try	O	O
to	O	O
explain	O	O
why	O	O
.	O	O
If	O	O
in	O	O
such	O	O
case	O	O
you	O	O
decided	O	O
to	O	O
stick	O	O
with	O	O
map	O	O
,	O	O
you	O	O
would	O	O
get	O	O
an	O	O
Observable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
For	O	O
example	O	O
in	O	O
your	O	O
case	O	O
,	O	O
if	O	O
we	O	O
used	O	O
an	O	O
imaginary	O	O
RxGson	O	O
library	O	O
,	O	O
that	O	O
returned	O	O
an	O	O
Observable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
from	O	O
it	O	O
'	O	O
s	O	O
toJson	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
(	O	O
instead	O	O
of	O	O
simply	O	O
returning	O	O
a	O	O
String	B-api_mention	B-api_mention
)	O	O
it	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
At	O	O
this	O	O
point	O	O
it	O	O
would	O	O
be	O	O
pretty	O	O
tricky	O	O
to	O	O
subscribe	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
such	O	O
an	O	O
observable	O	O
.	O	O
Inside	O	O
of	O	O
it	O	O
you	O	O
would	O	O
get	O	O
an	O	O
Observable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
to	O	O
which	O	O
you	O	O
would	O	O
again	O	O
need	O	O
to	O	O
subscribe	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
the	O	O
value	O	O
.	O	O
Which	O	O
is	O	O
not	O	O
practical	O	O
or	O	O
nice	O	O
to	O	O
look	O	O
at	O	O
.	O	O
So	O	O
to	O	O
make	O	O
it	O	O
useful	O	O
one	O	O
idea	O	O
is	O	O
to	O	O
"	O	O
flatten	O	O
"	O	O
this	O	O
observable	O	O
of	O	O
observables	O	O
(	O	O
you	O	O
might	O	O
start	O	O
to	O	O
see	O	O
where	O	O
the	O	O
name	O	O
_	O	O
flat	O	O
_	O	O
Map	O	O
comes	O	O
from	O	O
)	O	O
.	O	O
RxJava	O	O
provides	O	O
a	O	O
few	O	O
ways	O	O
to	O	O
flatten	O	O
observables	O	O
and	O	O
for	O	O
sake	O	O
of	O	O
simplicity	O	O
lets	O	O
assume	O	O
merge	O	O
is	O	O
what	O	O
we	O	O
want	O	O
.	O	O
Merge	O	O
basically	O	O
takes	O	O
a	O	O
bunch	O	O
of	O	O
observables	O	O
and	O	O
emits	O	O
whenever	O	O
any	O	O
of	O	O
them	O	O
emits	O	O
.	O	O
(	O	O
Lots	O	O
of	O	O
people	O	O
would	O	O
argue	O	O
switch	O	O
would	O	O
be	O	O
a	O	O
better	O	O
default	O	O
.	O	O
But	O	O
if	O	O
you	O	O
'	O	O
re	O	O
emitting	O	O
just	O	O
one	O	O
value	O	O
,	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
matter	O	O
anyway	O	O
.	O	O
)	O	O
So	O	O
amending	O	O
our	O	O
previous	O	O
snippet	O	O
we	O	O
would	O	O
get	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
a	O	O
lot	O	O
more	O	O
useful	O	O
,	O	O
because	O	O
subscribing	O	O
to	O	O
that	O	O
(	O	O
or	O	O
mapping	O	O
,	O	O
or	O	O
filtering	O	O
,	O	O
or	O	O
.	O	O
.	O	O
.	O	O
)	O	O
you	O	O
just	O	O
get	O	O
the	O	O
String	B-api_mention	B-api_mention
value	O	O
.	O	O
(	O	O
Also	O	O
,	O	O
mind	O	O
you	O	O
,	O	O
such	O	O
variant	O	O
of	O	O
merge	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
exist	O	O
in	O	O
RxJava	B-api_mention	B-api_mention
,	O	O
but	O	O
if	O	O
you	O	O
understand	O	O
the	O	O
idea	O	O
of	O	O
merge	O	O
then	O	O
I	O	O
hope	O	O
you	O	O
also	O	O
understand	O	O
how	O	O
that	O	O
would	O	O
work	O	O
.	O	O
)	O	O
So	O	O
basically	O	O
because	O	O
such	O	O
merge	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
probably	O	O
only	O	O
ever	O	O
be	O	O
useful	O	O
when	O	O
it	O	O
succeeds	O	O
a	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
returning	O	O
an	O	O
observable	O	O
and	O	O
so	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
type	O	O
this	O	O
over	O	O
and	O	O
over	O	O
again	O	O
,	O	O
flatMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
created	O	O
as	O	O
a	O	O
shorthand	O	O
.	O	O
It	O	O
applies	O	O
the	O	O
mapping	O	O
function	O	O
just	O	O
as	O	O
a	O	O
normal	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
,	O	O
but	O	O
later	O	O
instead	O	O
of	O	O
emitting	O	O
the	O	O
returned	O	O
values	O	O
it	O	O
also	O	O
"	O	O
flattens	O	O
"	O	O
(	O	O
or	O	O
merges	O	O
)	O	O
them	O	O
.	O	O
That	O	O
'	O	O
s	O	O
the	O	O
general	O	O
use	O	O
case	O	O
.	O	O
It	O	O
is	O	O
most	O	O
useful	O	O
in	O	O
a	O	O
codebase	O	O
that	O	O
uses	O	O
Rx	O	O
allover	O	O
the	O	O
place	O	O
and	O	O
you	O	O
'	O	O
ve	O	O
got	O	O
many	O	O
methods	O	O
returning	O	O
observables	O	O
,	O	O
which	O	O
you	O	O
want	O	O
to	O	O
chain	O	O
with	O	O
other	O	O
methods	O	O
returning	O	O
observables	O	O
.	O	O
In	O	O
your	O	O
use	O	O
case	O	O
it	O	O
happens	O	O
to	O	O
be	O	O
useful	O	O
as	O	O
well	O	O
,	O	O
because	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
can	O	O
only	O	O
transform	O	O
one	O	O
value	O	O
emitted	O	O
in	O	O
onNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
into	O	O
another	O	O
value	O	O
emitted	O	O
in	O	O
onNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
it	O	O
cannot	O	O
transform	O	O
it	O	O
into	O	O
multiple	O	O
values	O	O
,	O	O
no	O	O
value	O	O
at	O	O
all	O	O
or	O	O
an	O	O
error	O	O
.	O	O
And	O	O
as	O	O
akarnokd	O	O
wrote	O	O
in	O	O
his	O	O
answer	O	O
(	O	O
and	O	O
mind	O	O
you	O	O
he	O	O
'	O	O
s	O	O
much	O	O
smarter	O	O
than	O	O
me	O	O
,	O	O
probably	O	O
in	O	O
general	O	O
,	O	O
but	O	O
at	O	O
least	O	O
when	O	O
it	O	O
comes	O	O
to	O	O
RxJava	O	O
)	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
throw	O	O
exceptions	O	O
from	O	O
your	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
So	O	O
instead	O	O
you	O	O
can	O	O
use	O	O
flatMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
return	O	O
Observable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
just	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
when	O	O
all	O	O
goes	O	O
well	O	O
,	O	O
but	O	O
return	O	O
Observable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
error	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
when	O	O
something	O	O
fails	O	O
.	O	O
See	O	O
his	O	O
answer	O	O
for	O	O
a	O	O
complete	O	O
snippet	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
19416644	O	O
,	O	O
answer	O	O
-	O	O
19416665	O	O
One	O	O
simple	O	O
way	O	O
is	O	O
to	O	O
use	O	O
Float	B-api_mention	B-api_mention
.	I-api_mention	O
NaN	I-api_mention	O
:	O	O
#	O	O
pre	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
do	O	O
the	O	O
same	O	O
with	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
NaN	I-api_mention	I-api_mention
.	O	O
From	O	O
JLS	O	O
Â§	O	O
15	O	O
.	O	O
21	O	O
.	O	O
1	O	O
.	O	O
Numerical	O	O
Equality	O	O
Operators	O	O
=	O	O
=	O	O
and	O	O
!	O	O
=	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
22718744	O	O
,	O	O
answer	O	O
-	O	O
22718904	O	O
This	O	O
has	O	O
been	O	O
specified	O	O
in	O	O
the	O	O
documentation	O	O
of	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
blockquote	O	O
In	O	O
StringLiteral	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
got	O	O
a	O	O
zero	O	O
-	O	O
width	O	O
match	O	O
at	O	O
the	O	O
beginning	O	O
so	O	O
the	O	O
leading	O	O
empty	O	O
substring	O	O
is	O	O
not	O	O
included	O	O
in	O	O
the	O	O
resulting	O	O
array	O	O
.	O	O
However	O	O
in	O	O
your	O	O
second	O	O
snippet	O	O
when	O	O
you	O	O
split	O	O
on	O	O
StringLiteral	O	O
you	O	O
got	O	O
a	O	O
positive	O	O
width	O	O
match	O	O
(	O	O
1	O	O
in	O	O
this	O	O
case	O	O
)	O	O
,	O	O
so	O	O
the	O	O
empty	O	O
leading	O	O
substring	O	O
is	O	O
included	O	O
as	O	O
expected	O	O
.	O	O
(	O	O
Removed	O	O
irrelevant	O	O
source	O	O
code	O	O
)	O	O
Question	O	O
-	O	O
5175728	O	O
,	O	O
answer	O	O
-	O	O
5175900	O	O
It	O	O
depends	O	O
on	O	O
what	O	O
form	O	O
of	O	O
date	O	O
/	O	O
time	O	O
you	O	O
want	O	O
:	O	O
#	O	O
li	O	O
If	O	O
you	O	O
want	O	O
the	O	O
date	O	O
/	O	O
time	O	O
as	O	O
a	O	O
single	O	O
numeric	O	O
value	O	O
,	O	O
then	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
that	O	O
,	O	O
expressed	O	O
as	O	O
the	O	O
number	O	O
of	O	O
milliseconds	O	O
after	O	O
the	O	O
UNIX	O	O
epoch	O	O
(	O	O
as	O	O
a	O	O
Java	O	O
long	O	O
)	O	O
.	O	O
This	O	O
value	O	O
is	O	O
a	O	O
delta	O	O
from	O	O
a	O	O
UTC	O	O
time	O	O
-	O	O
point	O	O
,	O	O
and	O	O
is	O	O
independent	O	O
of	O	O
the	O	O
local	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
.	O	O
.	O	O
assuming	O	O
that	O	O
the	O	O
system	O	O
clock	O	O
has	O	O
been	O	O
set	O	O
correctly	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
want	O	O
the	O	O
date	O	O
/	O	O
time	O	O
in	O	O
a	O	O
form	O	O
that	O	O
allows	O	O
you	O	O
to	O	O
access	O	O
the	O	O
components	O	O
(	O	O
year	O	O
,	O	O
month	O	O
,	O	O
etc	O	O
)	O	O
numerically	O	O
,	O	O
you	O	O
could	O	O
use	O	O
one	O	O
of	O	O
the	O	O
following	O	O
:	O	O
#	O	O
li	O	O
new	O	O
Date	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
a	O	O
Date	B-api_mention	B-api_mention
object	O	O
initialized	O	O
with	O	O
the	O	O
current	O	O
date	O	O
/	O	O
time	O	O
.	O	O
The	O	O
problem	O	O
is	O	O
that	O	O
the	O	O
Date	B-api_mention	B-api_mention
API	O	O
methods	O	O
are	O	O
mostly	O	O
flawed	O	O
.	O	O
.	O	O
.	O	O
and	O	O
deprecated	O	O
.	O	O
#	O	O
li	O	O
Calendar	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
a	O	O
Calendar	B-api_mention	O
object	O	O
initialized	O	O
with	O	O
the	O	O
current	O	O
date	O	O
/	O	O
time	O	O
,	O	O
using	O	O
the	O	O
default	O	O
Locale	B-api_mention	B-api_mention
and	O	O
TimeZone	B-api_mention	B-api_mention
.	O	O
Other	O	O
overloads	O	O
allow	O	O
you	O	O
to	O	O
use	O	O
a	O	O
specific	O	O
Locale	B-api_mention	B-api_mention
and	O	O
/	O	O
or	O	O
TimeZone	B-api_mention	B-api_mention
.	O	O
Calendar	B-api_mention	O
works	O	O
.	O	O
.	O	O
.	O	O
but	O	O
the	O	O
APIs	O	O
are	O	O
still	O	O
cumbersome	O	O
.	O	O
#	O	O
li	O	O
new	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
joda	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
DateTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
a	O	O
Joda	O	O
-	O	O
time	O	O
object	O	O
initialized	O	O
with	O	O
the	O	O
current	O	O
date	O	O
/	O	O
time	O	O
,	O	O
using	O	O
the	O	O
default	O	O
time	O	O
zone	O	O
and	O	O
chronology	O	O
.	O	O
There	O	O
are	O	O
lots	O	O
of	O	O
other	O	O
Joda	O	O
alternatives	O	O
.	O	O
.	O	O
.	O	O
too	O	O
many	O	O
to	O	O
describe	O	O
here	O	O
.	O	O
#	O	O
li	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
calling	O	O
LocalDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
now	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
ZonedDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
now	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
give	O	O
you	O	O
representations	O	O
for	O	O
the	O	O
current	O	O
date	O	O
/	O	O
time	O	O
.	O	O
Prior	O	O
to	O	O
Java	O	O
8	O	O
,	O	O
most	O	O
people	O	O
who	O	O
know	O	O
about	O	O
these	O	O
things	O	O
recommended	O	O
Joda	O	O
-	O	O
time	O	O
as	O	O
having	O	O
(	O	O
by	O	O
far	O	O
)	O	O
the	O	O
best	O	O
Java	O	O
APIs	O	O
for	O	O
doing	O	O
things	O	O
involving	O	O
time	O	O
point	O	O
and	O	O
duration	O	O
calculations	O	O
.	O	O
With	O	O
Java	O	O
8	O	O
,	O	O
this	O	O
is	O	O
no	O	O
longer	O	O
true	O	O
.	O	O
However	O	O
,	O	O
if	O	O
you	O	O
are	O	O
already	O	O
using	O	O
Joda	O	O
time	O	O
in	O	O
your	O	O
codebase	O	O
,	O	O
there	O	O
is	O	O
no	O	O
strong	O	O
reason	O	O
to	O	O
migrate	O	O
.	O	O
Question	O	O
-	O	O
28584669	O	O
Why	O	O
doesn	O	O
'	O	O
t	O	O
infinity	O	O
comparison	O	O
follow	O	O
the	O	O
logic	O	O
applied	O	O
to	O	O
NaNs	O	O
?	O	O
This	O	O
code	O	O
prints	O	O
out	O	O
false	O	O
three	O	O
times	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
if	O	O
I	O	O
change	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
NaN	I-api_mention	I-api_mention
to	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
,	O	O
I	O	O
get	O	O
true	O	O
for	O	O
equality	O	O
,	O	O
but	O	O
false	O	O
for	O	O
the	O	O
greater	O	O
-	O	O
than	O	O
and	O	O
less	O	O
-	O	O
than	O	O
comparisons	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
seems	O	O
dangerous	O	O
.	O	O
Assuming	O	O
that	O	O
infinite	O	O
values	O	O
result	O	O
from	O	O
overflows	O	O
,	O	O
I	O	O
imagine	O	O
it	O	O
'	O	O
s	O	O
more	O	O
likely	O	O
that	O	O
two	O	O
variables	O	O
that	O	O
ended	O	O
up	O	O
as	O	O
infinities	O	O
wouldn	O	O
'	O	O
t	O	O
actually	O	O
be	O	O
equal	O	O
in	O	O
perfect	O	O
arithmetic	O	O
.	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
20959594	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
,	O	O
but	O	O
through	O	O
reflection	O	O
you	O	O
'	O	O
re	O	O
allowed	O	O
to	O	O
change	O	O
the	O	O
String	B-api_mention	B-api_mention
class	O	O
.	O	O
You	O	O
'	O	O
ve	O	O
just	O	O
redefined	O	O
the	O	O
String	B-api_mention	B-api_mention
class	O	O
as	O	O
mutable	O	O
in	O	O
real	O	O
-	O	O
time	O	O
.	O	O
You	O	O
could	O	O
redefine	O	O
methods	O	O
to	O	O
be	O	O
public	O	O
or	O	O
private	O	O
or	O	O
static	O	O
if	O	O
you	O	O
wanted	O	O
.	O	O
Question	O	O
-	O	O
31696485	O	O
When	O	O
using	O	O
the	O	O
Java	O	O
8	O	O
Optional	B-api_mention	B-api_mention
class	O	O
,	O	O
there	O	O
are	O	O
two	O	O
ways	O	O
in	O	O
which	O	O
a	O	O
value	O	O
can	O	O
be	O	O
wrapped	O	O
in	O	O
an	O	O
optional	O	O
.	O	O
#	O	O
pre	O	O
I	O	O
understand	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofNullable	I-api_mention	I-api_mention
is	O	O
the	O	O
only	O	O
safe	O	O
way	O	O
of	O	O
using	O	O
Optional	B-api_mention	B-api_mention
,	O	O
but	O	O
why	O	O
does	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
exist	O	O
at	O	O
all	O	O
?	O	O
Why	O	O
not	O	O
just	O	O
use	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofNullable	I-api_mention	I-api_mention
and	O	O
be	O	O
on	O	O
the	O	O
safe	O	O
side	O	O
at	O	O
all	O	O
times	O	O
?	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
18481387	O	O
If	O	O
you	O	O
code	O	O
in	O	O
Android	O	O
,	O	O
there	O	O
is	O	O
SparseArray	B-api_mention	B-api_mention
,	O	O
mapping	O	O
integer	O	O
to	O	O
object	O	O
.	O	O
Question	O	O
-	O	O
31445024	O	O
,	O	O
answer	O	O
-	O	O
31760309	O	O
Until	O	O
the	O	O
language	O	O
specification	O	O
mentions	O	O
it	O	O
,	O	O
it	O	O
is	O	O
not	O	O
guaranteed	O	O
that	O	O
autoboxing	O	O
is	O	O
equivalent	O	O
to	O	O
a	O	O
call	O	O
to	O	O
the	O	O
static	O	O
valueOf	B-api_mention	B-api_mention
methods	O	O
.	O	O
It	O	O
is	O	O
an	O	O
implementation	O	O
aspect	O	O
,	O	O
not	O	O
part	O	O
of	O	O
the	O	O
boxing	O	O
conversion	O	O
specification	O	O
.	O	O
An	O	O
implementation	O	O
is	O	O
theoretically	O	O
free	O	O
to	O	O
use	O	O
another	O	O
mechanism	O	O
as	O	O
long	O	O
as	O	O
it	O	O
conforms	O	O
to	O	O
the	O	O
rule	O	O
you	O	O
mentioned	O	O
from	O	O
the	O	O
JLS	O	O
.	O	O
In	O	O
practice	O	O
,	O	O
there	O	O
are	O	O
many	O	O
Sun	O	O
JDK	O	O
bug	O	O
reports	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
JDK	O	O
-	O	O
4990346	O	O
and	O	O
JDK	O	O
-	O	O
6628737	O	O
)	O	O
that	O	O
clearly	O	O
imply	O	O
that	O	O
when	O	O
autoboxing	O	O
was	O	O
introduced	O	O
in	O	O
Java	O	O
5	O	O
,	O	O
the	O	O
intention	O	O
was	O	O
having	O	O
the	O	O
compiler	O	O
to	O	O
rely	O	O
on	O	O
valueOf	B-api_mention	B-api_mention
as	O	O
stated	O	O
in	O	O
JDK	O	O
-	O	O
6628737	O	O
:	O	O
#	O	O
blockquote	O	O
But	O	O
that	O	O
'	O	O
s	O	O
only	O	O
for	O	O
javac	O	O
,	O	O
not	O	O
necessarily	O	O
all	O	O
compilers	O	O
.	O	O
Question	O	O
-	O	O
5839359	O	O
,	O	O
answer	O	O
-	O	O
5839392	O	O
You	O	O
'	O	O
re	O	O
essentially	O	O
running	O	O
out	O	O
of	O	O
memory	O	O
to	O	O
run	O	O
the	O	O
process	O	O
smoothly	O	O
.	O	O
Options	O	O
that	O	O
come	O	O
to	O	O
mind	O	O
:	O	O
#	O	O
li	O	O
Specify	O	O
more	O	O
memory	O	O
like	O	O
you	O	O
mentioned	O	O
,	O	O
try	O	O
something	O	O
in	O	O
between	O	O
like	O	O
-	O	O
Xmx512m	O	O
first	O	O
#	O	O
li	O	O
Work	O	O
with	O	O
smaller	O	O
batches	O	O
of	O	O
HashMap	B-api_mention	B-api_mention
objects	O	O
to	O	O
process	O	O
at	O	O
once	O	O
if	O	O
possible	O	O
#	O	O
li	O	O
If	O	O
you	O	O
have	O	O
a	O	O
lot	O	O
of	O	O
duplicate	O	O
strings	O	O
,	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
them	O	O
before	O	O
putting	O	O
them	O	O
into	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
#	O	O
li	O	O
Use	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
(	O	I-api_mention
int	O	I-api_mention
initialCapacity	O	I-api_mention
,	O	I-api_mention
float	O	I-api_mention
loadFactor	O	I-api_mention
)	O	I-api_mention
constructor	O	O
to	O	O
tune	O	O
for	O	O
your	O	O
case	O	O
Question	O	O
-	O	O
31445024	O	O
,	O	O
answer	O	O
-	O	O
31445150	O	O
I	O	O
first	O	O
tought	O	O
your	O	O
question	O	O
was	O	O
a	O	O
dupe	O	O
of	O	O
What	O	O
code	O	O
does	O	O
the	O	O
compiler	O	O
generate	O	O
for	O	O
autoboxing	O	O
?	O	O
However	O	O
,	O	O
after	O	O
your	O	O
comment	O	O
on	O	O
@	O	O
ElliottFrisch	O	O
I	O	O
realized	O	O
it	O	O
was	O	O
different	O	O
:	O	O
#	O	O
blockquote	O	O
For	O	O
other	O	O
readers	O	O
,	O	O
assume	O	O
that	O	O
"	O	O
behaves	O	O
that	O	O
way	O	O
"	O	O
means	O	O
using	O	O
valueOf	B-api_mention	B-api_mention
.	O	O
Remember	O	O
that	O	O
there	O	O
are	O	O
multiples	O	O
compilers	O	O
for	O	O
Java	O	O
.	O	O
To	O	O
be	O	O
"	O	O
legal	O	O
"	O	O
they	O	O
must	O	O
follow	O	O
the	O	O
contract	O	O
given	O	O
in	O	O
the	O	O
JLS	O	O
.	O	O
Therefore	O	O
,	O	O
as	O	O
long	O	O
as	O	O
all	O	O
the	O	O
rules	O	O
here	O	O
are	O	O
respected	O	O
,	O	O
there	O	O
is	O	O
no	O	O
guarantee	O	O
of	O	O
how	O	O
autoboxing	O	O
is	O	O
internally	O	O
implemented	O	O
.	O	O
But	O	O
I	O	O
don	O	O
'	O	O
t	O	O
see	O	O
any	O	O
reason	O	O
to	O	O
not	O	O
use	O	O
valueOf	B-api_mention	B-api_mention
,	O	O
specially	O	O
that	O	O
it	O	O
uses	O	O
the	O	O
cached	O	O
values	O	O
and	O	O
is	O	O
the	O	O
recommended	O	O
way	O	O
as	O	O
per	O	O
this	O	O
article	O	O
by	O	O
Joseph	O	O
D	O	O
.	O	O
Darcy	O	O
.	O	O
Question	O	O
-	O	O
33147339	O	O
,	O	O
answer	O	O
-	O	O
33147762	O	O
I	O	O
found	O	O
this	O	O
explanation	O	O
:	O	O
#	O	O
blockquote	O	O
In	O	O
Java	O	O
6	O	O
,	O	O
if	O	O
you	O	O
use	O	O
the	O	O
API	O	O
as	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
newCount	O	O
overflows	O	O
(	O	O
this	O	O
becomes	O	O
negative	O	O
)	O	O
,	O	O
if	O	O
(	O	O
args	O	O
)	O	O
will	O	O
return	O	O
false	O	O
and	O	O
you	O	O
may	O	O
mistakenly	O	O
assume	O	O
that	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
was	O	O
increased	O	O
by	O	O
len	B-api_mention	O
.	O	O
Question	O	O
-	O	O
27430092	O	O
,	O	O
answer	O	O
-	O	O
27430172	O	O
A	O	O
possible	O	O
use	O	O
case	O	O
is	O	O
in	O	O
testing	O	O
primality	O	O
of	O	O
a	O	O
given	O	O
number	O	O
(	O	O
at	O	O
test	O	O
which	O	O
in	O	O
itself	O	O
has	O	O
many	O	O
uses	O	O
)	O	O
.	O	O
The	O	O
isProbablePrime	B-api_mention	O
algorithm	O	O
will	O	O
run	O	O
much	O	O
faster	O	O
than	O	O
an	O	O
exact	O	O
algorithm	O	O
,	O	O
so	O	O
if	O	O
the	O	O
number	O	O
fails	O	O
isProbablePrime	B-api_mention	O
,	O	O
then	O	O
one	O	O
need	O	O
not	O	O
go	O	O
to	O	O
the	O	O
expense	O	O
of	O	O
running	O	O
the	O	O
more	O	O
expensive	O	O
algorithm	O	O
.	O	O
Question	O	O
-	O	O
21242110	O	O
What	O	O
is	O	O
the	O	O
best	O	O
way	O	O
to	O	O
convert	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
object	O	O
to	O	O
the	O	O
new	O	O
JDK	O	O
8	O	O
/	O	O
JSR	O	O
-	O	O
310	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
LocalDate	I-api_mention	I-api_mention
?	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
11408427	O	O
,	O	O
answer	O	O
-	O	O
11408477	O	O
The	O	O
+	O	O
operator	O	O
is	O	O
usually	O	O
replaced	O	O
by	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
at	O	O
compile	O	O
time	O	O
.	O	O
Check	O	O
this	O	O
answer	O	O
for	O	O
more	O	O
details	O	O
on	O	O
that	O	O
matter	O	O
.	O	O
Question	O	O
-	O	O
5769669	O	O
,	O	O
answer	O	O
-	O	O
5769679	O	O
You	O	O
can	O	O
use	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseDouble	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
convert	O	O
a	O	O
String	B-api_mention	B-api_mention
to	O	O
a	O	O
double	O	O
:	O	O
#	O	O
pre	O	O
For	O	O
your	O	O
case	O	O
it	O	O
looks	O	O
like	O	O
you	O	O
want	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
23218874	O	O
,	O	O
answer	O	O
-	O	O
23232560	O	O
For	O	O
simple	O	O
cases	O	O
such	O	O
as	O	O
the	O	O
one	O	O
illustrated	O	O
,	O	O
they	O	O
are	O	O
mostly	O	O
the	O	O
same	O	O
.	O	O
However	O	O
,	O	O
there	O	O
are	O	O
a	O	O
number	O	O
of	O	O
subtle	O	O
differences	O	O
that	O	O
might	O	O
be	O	O
significant	O	O
.	O	O
One	O	O
issue	O	O
is	O	O
with	O	O
ordering	O	O
.	O	O
With	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
the	O	O
order	O	O
is	O	O
undefined	O	O
.	O	O
It	O	O
'	O	O
s	O	O
unlikely	O	O
to	O	O
occur	O	O
with	O	O
sequential	O	O
streams	O	O
,	O	O
still	O	O
,	O	O
it	O	O
'	O	O
s	O	O
within	O	O
the	O	O
specification	O	O
for	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
to	O	O
execute	O	O
in	O	O
some	O	O
arbitrary	O	O
order	O	O
.	O	O
This	O	O
does	O	O
occur	O	O
frequently	O	O
in	O	O
parallel	O	O
streams	O	O
.	O	O
By	O	O
contrast	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
always	O	O
executed	O	O
in	O	O
the	O	O
iteration	O	O
order	O	O
of	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
if	O	O
one	O	O
is	O	O
specified	O	O
.	O	O
Another	O	O
issue	O	O
is	O	O
with	O	O
side	O	O
effects	O	O
.	O	O
The	O	O
action	O	O
specified	O	O
in	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
required	O	O
to	O	O
be	O	O
non	O	O
-	O	O
interfering	O	O
.	O	O
(	O	O
See	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
package	O	O
doc	O	O
.	O	O
)	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
potentially	O	O
has	O	O
fewer	O	O
restrictions	O	O
.	O	O
For	O	O
the	O	O
collections	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
,	O	I-api_mention
Iterable	B-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
will	O	O
generally	O	O
use	O	O
that	O	O
collection	O	O
'	O	O
s	O	O
Iterator	B-api_mention	B-api_mention
,	O	O
most	O	O
of	O	O
which	O	O
are	O	O
designed	O	O
to	O	O
be	O	O
fail	O	O
-	O	O
fast	O	O
and	O	O
which	O	O
will	O	O
throw	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
if	O	O
the	O	O
collection	O	O
is	O	O
structurally	O	O
modified	O	O
during	O	O
the	O	O
iteration	O	O
.	O	O
However	O	O
,	O	O
modifications	O	O
that	O	O
aren	O	O
'	O	O
t	O	O
structural	O	O
are	O	O
allowed	O	O
during	O	O
iteration	O	O
.	O	O
For	O	O
example	O	O
,	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
class	O	O
documentation	O	O
says	O	O
"	O	O
merely	O	O
setting	O	O
the	O	O
value	O	O
of	O	O
an	O	O
element	O	O
is	O	O
not	O	O
a	O	O
structural	O	O
modification	O	O
.	O	O
"	O	O
Thus	O	O
,	O	O
the	O	O
action	O	O
for	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
allowed	O	O
to	O	O
set	O	O
values	O	O
in	O	O
the	O	O
underlying	O	O
ArrayList	B-api_mention	B-api_mention
without	O	O
problems	O	O
.	O	O
The	O	O
concurrent	O	O
collections	O	O
are	O	O
yet	O	O
again	O	O
different	O	O
.	O	O
Instead	O	O
of	O	O
fail	O	O
-	O	O
fast	O	O
,	O	O
they	O	O
are	O	O
designed	O	O
to	O	O
be	O	O
weakly	O	O
consistent	O	O
.	O	O
The	O	O
full	O	O
definition	O	O
is	O	O
at	O	O
that	O	O
link	O	O
.	O	O
Briefly	O	O
,	O	O
though	O	O
,	O	O
consider	O	O
ConcurrentLinkedDeque	B-api_mention	B-api_mention
.	O	O
The	O	O
action	O	O
passed	O	O
to	O	O
its	O	O
forEach	B-api_mention	B-api_mention
method	O	O
is	O	O
allowed	O	O
to	O	O
modify	O	O
the	O	O
underlying	O	O
deque	O	O
,	O	O
even	O	O
structurally	O	O
,	O	O
and	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
is	O	O
never	O	O
thrown	O	O
.	O	O
However	O	O
,	O	O
the	O	O
modification	O	O
that	O	O
occurs	O	O
might	O	O
or	O	O
might	O	O
not	O	O
be	O	O
visible	O	O
in	O	O
this	O	O
iteration	O	O
.	O	O
(	O	O
Hence	O	O
the	O	O
"	O	O
weak	O	O
"	O	O
consistency	O	O
.	O	O
)	O	O
Still	O	O
another	O	O
difference	O	O
is	O	O
visible	O	O
if	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
iterating	O	O
over	O	O
a	O	O
synchronized	O	O
collection	O	O
.	O	O
On	O	O
such	O	O
a	O	O
collection	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
takes	O	O
the	O	O
collection	O	O
'	O	O
s	O	O
lock	O	O
once	O	O
and	O	O
holds	O	O
it	O	O
across	O	O
all	O	O
the	O	O
calls	O	O
to	O	O
the	O	O
action	O	O
method	O	O
.	O	O
The	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
call	O	O
uses	O	O
the	O	O
collection	O	O
'	O	O
s	O	O
spliterator	O	O
,	O	O
which	O	O
does	O	O
not	O	O
lock	O	O
,	O	O
and	O	O
which	O	O
relies	O	O
on	O	O
the	O	O
prevailing	O	O
rule	O	O
of	O	O
non	O	O
-	O	O
interference	O	O
.	O	O
The	O	O
collection	O	O
backing	O	O
the	O	O
stream	O	O
could	O	O
be	O	O
modified	O	O
during	O	O
iteration	O	O
,	O	O
and	O	O
if	O	O
it	O	O
is	O	O
,	O	O
a	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
or	O	O
inconsistent	O	O
behavior	O	O
could	O	O
result	O	O
.	O	O
Question	O	O
-	O	O
22382453	O	O
,	O	O
answer	O	O
-	O	O
22384113	O	O
Made	O	O
up	O	O
example	O	O
Imagine	O	O
that	O	O
you	O	O
want	O	O
to	O	O
create	O	O
the	O	O
following	O	O
sequence	O	O
:	O	O
1	O	O
,	O	O
2	O	O
,	O	O
2	O	O
,	O	O
3	O	O
,	O	O
3	O	O
,	O	O
3	O	O
,	O	O
4	O	O
,	O	O
4	O	O
,	O	O
4	O	O
,	O	O
4	O	O
etc	O	O
.	O	O
(	O	O
in	O	O
other	O	O
words	O	O
:	O	O
1x1	O	O
,	O	O
2x2	O	O
,	O	O
3x3	O	O
etc	O	O
.	O	O
)	O	O
With	O	O
flatMap	B-api_mention	B-api_mention
it	O	O
could	O	O
look	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
where	O	O
:	O	O
#	O	O
li	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
rangeClosed	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
a	O	O
stream	O	O
of	O	O
int	O	O
from	O	O
1	O	O
to	O	O
4	O	O
,	O	O
inclusive	O	O
#	O	O
li	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
iterate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
a	O	O
stream	O	O
of	O	O
length	O	O
i	O	O
of	O	O
int	O	O
i	O	O
-	O	O
so	O	O
applied	O	O
to	O	O
i	O	O
=	O	O
4	O	O
it	O	O
creates	O	O
a	O	O
stream	O	O
:	O	O
4	O	O
,	O	O
4	O	O
,	O	O
4	O	O
,	O	O
4	O	O
#	O	O
li	O	O
flatMap	B-api_mention	O
"	O	O
flattens	O	O
"	O	O
the	O	O
stream	O	O
and	O	O
"	O	O
concatenates	O	O
"	O	O
it	O	O
to	O	O
the	O	O
original	O	O
stream	O	O
With	O	O
Java	O	O
<	O	O
8	O	O
you	O	O
would	O	O
need	O	O
two	O	O
nested	O	O
loops	O	O
:	O	O
#	O	O
pre	O	O
Real	O	O
world	O	O
example	O	O
Let	O	O
'	O	O
s	O	O
say	O	O
I	O	O
have	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
where	O	O
each	O	O
TimeSeries	B-api_mention	B-api_mention
is	O	O
essentially	O	O
a	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
I	O	O
want	O	O
to	O	O
get	O	O
a	O	O
list	O	O
of	O	O
all	O	O
dates	O	O
for	O	O
which	O	O
at	O	O
least	O	O
one	O	O
of	O	O
the	O	O
time	O	O
series	O	O
has	O	O
a	O	O
value	O	O
.	O	B-api_mention
flatMap	B-api_mention	I-api_mention
to	O	O
the	O	O
rescue	O	O
:	O	O
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
/	O	O
for	O	O
each	O	O
TS	O	O
,	O	O
stream	O	O
dates	O	O
and	O	O
flatmap	O	O
.	B-api_mention	B-api_mention
distinct	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
/	O	O
remove	O	O
duplicates	O	O
.	B-api_mention	B-api_mention
sorted	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
/	O	O
sort	O	O
ascending	O	O
.	B-api_mention	B-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Not	O	O
only	O	O
is	O	O
it	O	O
readable	O	O
,	O	O
but	O	O
if	O	O
you	O	O
suddenly	O	O
need	O	O
to	O	O
process	O	O
100k	O	O
elements	O	O
,	O	O
simply	O	O
adding	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
improve	O	O
performance	O	O
without	O	O
you	O	O
writing	O	O
any	O	O
concurrent	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
26375932	O	O
,	O	O
answer	O	O
-	O	O
26407637	O	O
It	O	O
is	O	O
an	O	O
integer	O	O
overflow	O	O
.	O	O
The	O	O
int	O	O
data	O	O
type	O	O
is	O	O
4	O	O
bytes	O	O
,	O	O
or	O	O
32	O	O
bits	O	O
.	O	O
Therefore	O	O
,	O	O
numbers	O	O
larger	O	O
than	O	O
2	O	O
^	O	O
(	O	O
32	O	O
-	O	O
1	O	O
)	O	O
-	O	O
1	O	O
(	O	O
2	O	O
,	O	O
147	O	O
,	O	O
483	O	O
,	O	O
647	O	O
)	O	O
cannot	O	O
be	O	O
stored	O	O
in	O	O
this	O	O
data	O	O
type	O	O
.	O	O
Your	O	O
numerical	O	O
values	O	O
will	O	O
be	O	O
incorrect	O	O
.	O	O
For	O	O
very	O	O
large	O	O
numbers	O	O
,	O	O
you	O	O
will	O	O
want	O	O
to	O	O
import	O	O
and	O	O
use	O	O
the	O	O
class	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
math	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
BigInteger	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
NOTE	O	O
:	O	O
For	O	O
numerical	O	O
values	O	O
that	O	O
are	O	O
still	O	O
too	O	O
large	O	O
for	O	O
the	O	O
int	O	O
data	O	O
type	O	O
,	O	O
but	O	O
small	O	O
enough	O	O
to	O	O
fit	O	O
within	O	O
8	O	O
bytes	O	O
(	O	O
absolute	O	O
value	O	O
less	O	O
than	O	O
or	O	O
equal	O	O
to	O	O
2	O	O
^	O	O
(	O	O
64	O	O
-	O	O
1	O	O
)	O	O
-	O	O
1	O	O
)	O	O
,	O	O
you	O	O
should	O	O
probably	O	O
use	O	O
the	O	O
long	O	O
primitive	O	O
.	O	O
HackerRank	O	O
'	O	O
s	O	O
practice	O	O
problems	O	O
(	O	O
www	O	O
.	O	O
hackerrank	O	O
.	O	O
com	O	O
)	O	O
,	O	O
such	O	O
as	O	O
the	O	O
Algorithms	O	O
practice	O	O
section	O	O
,	O	O
(	O	O
#	O	O
a	O	O
)	O	O
include	O	O
some	O	O
very	O	O
good	O	O
large	O	O
-	O	O
number	O	O
questions	O	O
that	O	O
give	O	O
good	O	O
practice	O	O
about	O	O
how	O	O
to	O	O
think	O	O
about	O	O
the	O	O
appropriate	O	O
data	O	O
type	O	O
to	O	O
use	O	O
.	O	O
Question	O	O
-	O	O
12539365	O	O
,	O	O
answer	O	O
-	O	O
12562433	O	O
This	O	O
is	O	O
great	O	O
question	O	O
!	O	O
I	O	O
think	O	O
the	O	O
root	O	O
cause	O	O
of	O	O
it	O	O
is	O	O
the	O	O
following	O	O
,	O	O
we	O	O
are	O	O
using	O	O
JUnit	O	O
not	O	O
only	O	O
for	O	O
unit	O	O
testing	O	O
.	O	O
So	O	O
the	O	O
question	O	O
should	O	O
be	O	O
splited	O	O
up	O	O
:	O	O
#	O	O
li	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
integration	O	O
(	O	O
or	O	O
any	O	O
other	O	O
higher	O	O
-	O	O
than	O	O
-	O	O
unit	O	O
testing	O	O
)	O	O
testing	O	O
?	O	O
#	O	O
li	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
black	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
?	O	O
#	O	O
li	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
white	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
?	O	O
so	O	O
if	O	O
we	O	O
will	O	O
ignore	O	O
higher	O	O
-	O	O
than	O	O
-	O	O
unit	O	O
testing	O	O
,	O	O
the	O	O
question	O	O
can	O	O
be	O	O
rephrased	O	O
"	O	O
Using	O	O
white	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
great	O	O
couple	O	O
between	O	O
unit	O	O
test	O	O
and	O	O
my	O	O
could	O	O
implementation	O	O
,	O	O
can	O	O
I	O	O
make	O	O
some	O	O
"	O	O
grey	O	O
-	O	O
box	O	O
"	O	O
unit	O	O
-	O	O
testing	O	O
and	O	O
what	O	O
rules	O	O
of	O	O
thumb	O	O
I	O	O
should	O	O
use	O	O
for	O	O
this	O	O
"	O	O
.	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
go	O	O
through	O	O
all	O	O
of	O	O
this	O	O
step	O	O
-	O	O
by	O	O
-	O	O
step	O	O
.	O	O
*	O	O
-	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
integration	O	O
(	O	O
or	O	O
any	O	O
other	O	O
higher	O	O
-	O	O
than	O	O
-	O	O
unit	O	O
testing	O	O
)	O	O
testing	O	O
?	O	O
*	O	O
I	O	O
think	O	O
the	O	O
answer	O	O
is	O	O
clearly	O	O
no	O	O
,	O	O
moreover	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
use	O	O
mocks	O	O
for	O	O
this	O	O
.	O	O
Your	O	O
test	O	O
should	O	O
be	O	O
as	O	O
close	O	O
to	O	O
real	O	O
application	O	O
as	O	O
possible	O	O
.	O	O
You	O	O
are	O	O
testing	O	O
complete	O	O
use	O	O
case	O	O
,	O	O
not	O	O
isolated	O	O
part	O	O
of	O	O
the	O	O
application	O	O
.	O	O
*	O	O
black	O	O
-	O	O
box	O	O
vs	O	O
white	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
black	O	O
-	O	O
box	O	O
state	O	O
If	O	O
you	O	O
are	O	O
using	O	O
white	O	O
-	O	O
box	O	O
approach	O	O
what	O	O
is	O	O
you	O	O
really	O	O
doing	O	O
,	O	O
you	O	O
'	O	O
re	O	O
testing	O	O
the	O	O
behaviour	O	O
of	O	O
your	O	O
unit	O	O
.	O	O
In	O	O
this	O	O
approach	O	O
calling	O	O
to	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
essential	O	O
,	O	O
you	O	O
should	O	O
verify	O	O
that	O	O
your	O	O
unit	O	O
behaves	O	O
as	O	O
you	O	O
'	O	O
re	O	O
expecting	O	O
to	O	O
.	O	O
rules	O	O
of	O	O
thumbs	O	O
for	O	O
grey	O	O
-	O	O
box	O	O
-	O	O
testing	O	O
The	O	O
problem	O	O
with	O	O
white	O	O
-	O	O
box	O	O
testing	O	O
is	O	O
it	O	O
creates	O	O
a	O	O
high	O	O
coupling	O	O
.	O	O
One	O	O
possible	O	O
solution	O	O
is	O	O
to	O	O
do	O	O
grey	O	O
-	O	O
box	O	O
-	O	O
testing	O	O
,	O	O
not	O	O
white	O	O
-	O	O
box	O	O
-	O	O
testing	O	O
.	O	O
This	O	O
is	O	O
sort	O	O
of	O	O
combination	O	O
of	O	O
black	O	O
&	O	O
white	O	O
box	O	O
testing	O	O
.	O	O
You	O	O
are	O	O
really	O	O
testing	O	O
the	O	O
behaviour	O	O
of	O	O
your	O	O
unit	O	O
like	O	O
in	O	O
white	O	O
-	O	O
box	O	O
testing	O	O
,	O	O
but	O	O
in	O	O
general	O	O
you	O	O
make	O	O
it	O	O
implementation	O	O
-	O	O
agnostic	O	O
when	O	O
possible	O	O
.	O	O
When	O	O
it	O	O
is	O	O
possible	O	O
,	O	O
you	O	O
will	O	O
just	O	O
make	O	O
a	O	O
check	O	O
like	O	O
in	O	O
black	O	O
-	O	O
box	O	O
case	O	O
,	O	O
just	O	O
asserts	O	O
that	O	O
output	O	O
is	O	O
what	O	O
is	O	O
your	O	O
expected	O	O
to	O	O
be	O	O
.	O	O
So	O	O
,	O	O
the	O	O
essence	O	O
of	O	O
your	O	O
question	O	O
is	O	O
when	O	O
it	O	O
is	O	O
possible	O	O
.	O	O
This	O	O
is	O	O
really	O	O
hard	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
have	O	O
a	O	O
good	O	O
example	O	O
,	O	O
but	O	O
I	O	O
can	O	O
give	O	O
you	O	O
to	O	O
examples	O	O
.	O	O
In	O	O
the	O	O
case	O	O
that	O	O
was	O	O
mentioned	O	O
above	O	O
with	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
vs	O	O
equalsIgnoreCase	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
shouldn	O	O
'	O	O
t	O	O
call	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
just	O	O
assert	O	O
the	O	O
output	O	O
.	O	O
If	O	O
you	O	O
couldn	O	O
'	O	O
t	O	O
do	O	O
it	O	O
,	O	O
break	O	O
down	O	O
your	O	O
code	O	O
to	O	O
the	O	O
smaller	O	O
unit	O	O
,	O	O
until	O	O
you	O	O
can	O	O
do	O	O
it	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
suppose	O	O
you	O	O
have	O	O
some	O	O
@	O	O
Service	O	O
and	O	O
you	O	O
are	O	O
writting	O	O
@	O	O
Web	O	O
-	O	O
Service	O	O
that	O	O
is	O	O
essentially	O	O
wrapper	O	O
upon	O	O
your	O	O
@	O	O
Service	O	O
-	O	O
it	O	O
delegates	O	O
all	O	O
calls	O	O
to	O	O
the	O	O
@	O	O
Service	O	O
(	O	O
and	O	O
making	O	O
some	O	O
extra	O	O
error	O	O
handling	O	O
)	O	O
.	O	O
In	O	O
this	O	O
case	O	O
calling	O	O
to	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
essential	O	O
,	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
duplicate	O	O
all	O	O
of	O	O
your	O	O
checks	O	O
that	O	O
you	O	O
did	O	O
for	O	O
the	O	O
@	O	O
Serive	O	O
,	O	O
verifying	O	O
that	O	O
you	O	O
'	O	O
re	O	O
calling	O	O
to	O	O
@	O	O
Service	O	O
with	O	O
correct	O	O
parammeter	O	O
list	O	O
is	O	O
sufficient	O	O
.	O	O
Question	O	O
-	O	O
29922296	O	O
,	O	O
answer	O	O
-	O	O
29926133	O	O
I	O	O
'	O	O
d	O	O
go	O	O
for	O	O
EnumSet	B-api_mention	B-api_mention
.	O	O
Because	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
also	O	O
defined	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
avoid	O	O
creating	O	O
the	O	O
stream	O	O
altogether	O	O
:	O	O
EnumSet	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
allOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Or	O	O
with	O	O
a	O	O
method	O	O
reference	O	O
:	O	O
EnumSet	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
allOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Still	O	O
,	O	O
the	O	O
oldschool	O	O
for	O	O
-	O	O
loop	O	O
feels	O	O
a	O	O
bit	O	O
simpler	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
30081520	O	O
,	O	O
answer	O	O
-	O	O
30081600	O	O
From	O	O
Objects	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
return	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
|	O	O
|	O	O
(	O	O
a	O	O
!	O	O
=	O	O
null	O	O
&	O	O
&	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
;	O	O
Very	O	O
simple	O	O
,	O	O
self	O	O
-	O	O
explaining	O	O
and	O	O
elegant	O	O
.	O	O
Question	O	O
-	O	O
27747562	O	O
,	O	O
answer	O	O
-	O	O
27747702	O	O
A	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
could	O	O
very	O	O
well	O	O
be	O	O
an	O	O
Item	B-api_mention	O
.	O	O
See	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
A	O	O
cast	O	O
tells	O	O
the	O	O
compiler	O	O
:	O	O
"	O	O
I	O	O
know	O	O
you	O	O
can	O	O
'	O	O
t	O	O
be	O	O
sure	O	O
that	O	O
this	O	O
is	O	O
a	O	O
object	O	O
of	O	O
type	O	O
Item	O	O
,	O	O
but	O	O
I	O	O
know	O	O
better	O	O
than	O	O
you	O	O
,	O	O
so	O	O
please	O	O
compile	O	O
"	O	O
.	O	O
The	O	O
compiler	O	O
will	O	O
only	O	O
refuse	O	O
to	O	O
compile	O	O
that	O	O
if	O	O
it	O	O
'	O	O
s	O	O
impossible	O	O
for	O	O
the	O	O
returned	O	O
object	O	O
to	O	O
be	O	O
an	O	O
instance	O	O
of	O	O
Item	B-api_mention	B-api_mention
(	O	O
like	O	O
,	O	O
for	O	O
example	O	O
,	O	O
Integer	B-api_mention	B-api_mention
can	O	O
'	O	O
t	O	O
ever	O	O
be	O	O
a	O	O
String	B-api_mention	B-api_mention
)	O	O
At	O	O
runtime	O	O
,	O	O
the	O	O
type	O	O
of	O	O
the	O	O
actual	O	O
object	O	O
returned	O	O
by	O	O
the	O	O
method	O	O
will	O	O
be	O	O
checked	O	O
,	O	O
and	O	O
if	O	O
it	O	O
'	O	O
s	O	O
not	O	O
actually	O	O
an	O	O
object	O	O
of	O	O
type	O	O
Item	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
get	O	O
a	O	O
ClassCastException	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
32623834	O	O
,	O	O
answer	O	O
-	O	O
32652449	O	O
Another	O	O
related	O	O
point	O	O
:	O	O
you	O	O
can	O	O
make	O	O
use	O	O
of	O	O
the	O	O
constant	O	O
pool	O	O
to	O	O
improve	O	O
the	O	O
performance	O	O
of	O	O
string	O	O
comparisons	O	O
in	O	O
some	O	O
circumstances	O	O
,	O	O
by	O	O
using	O	O
the	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
That	O	O
method	O	O
returns	O	O
the	O	O
instance	O	O
of	O	O
String	B-api_mention	B-api_mention
with	O	O
the	O	O
same	O	O
contents	O	O
as	O	O
the	O	O
String	B-api_mention	B-api_mention
on	O	O
which	O	O
it	O	O
is	O	O
invoked	O	O
from	O	O
the	O	O
String	B-api_mention	B-api_mention
constants	O	O
pool	O	O
,	O	O
adding	O	O
it	O	O
it	O	O
if	O	O
is	O	O
not	O	O
yet	O	O
present	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
after	O	O
using	O	O
intern	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
all	O	O
Strings	O	O
with	O	O
the	O	O
same	O	O
contents	O	O
are	O	O
guaranteed	O	O
to	O	O
be	O	O
the	O	O
same	O	O
String	B-api_mention	B-api_mention
instance	O	O
as	O	O
each	O	O
other	O	O
and	O	O
as	O	O
any	O	O
String	B-api_mention	B-api_mention
constants	O	O
with	O	O
those	O	O
contents	O	O
,	O	O
meaning	O	O
you	O	O
can	O	O
then	O	O
use	O	O
the	O	O
equals	O	O
operator	O	O
(	O	O
=	O	O
=	O	O
)	O	O
on	O	O
them	O	O
.	O	O
This	O	O
is	O	O
just	O	O
an	O	O
example	O	O
which	O	O
is	O	O
not	O	O
very	O	O
useful	O	O
on	O	O
its	O	O
own	O	O
,	O	O
but	O	O
it	O	O
illustrates	O	O
the	O	O
point	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
little	O	O
trick	O	O
isn	O	O
'	O	O
t	O	O
worth	O	O
designing	O	O
your	O	O
code	O	O
around	O	O
,	O	O
but	O	O
it	O	O
is	O	O
worth	O	O
keeping	O	O
in	O	O
mind	O	O
for	O	O
the	O	O
day	O	O
when	O	O
you	O	O
notice	O	O
a	O	O
little	O	O
more	O	O
speed	O	O
could	O	O
be	O	O
eked	O	O
out	O	O
of	O	O
some	O	O
bit	O	O
of	O	O
performance	O	O
sensitive	O	O
code	O	O
by	O	O
using	O	O
the	O	O
=	O	O
=	O	O
operator	O	O
on	O	O
a	O	O
string	O	O
with	O	O
judicious	O	O
use	O	O
of	O	O
intern	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
13950338	O	O
,	O	O
answer	O	O
-	O	O
17066803	O	O
Grant	O	O
Vibration	O	O
Permission	O	O
Before	O	O
you	O	O
start	O	O
implementing	O	O
any	O	O
vibration	O	O
code	O	O
,	O	O
you	O	O
have	O	O
to	O	O
give	O	O
your	O	O
application	O	O
the	O	O
permission	O	O
to	O	O
vibrate	O	O
:	O	O
<	O	O
uses	O	O
-	O	O
permission	O	O
android	O	O
:	O	O
name	O	O
=	O	O
StringLiteral	O	O
/	O	O
>	O	O
Make	O	O
sure	O	O
to	O	O
include	O	O
this	O	O
line	O	O
in	O	O
your	O	O
AndroidManifest	O	O
.	O	O
xml	O	O
file	O	O
.	O	O
Import	O	O
the	O	O
Vibration	O	O
Library	O	O
Most	O	O
IDEs	O	O
will	O	O
do	O	O
this	O	O
for	O	O
you	O	O
,	O	O
but	O	O
here	O	O
is	O	O
the	O	O
import	O	O
statement	O	O
if	O	O
yours	O	O
doesn	O	O
'	O	O
t	O	O
:	O	O
import	O	O
android	B-api_mention	O
.	I-api_mention	O
os	I-api_mention	O
.	I-api_mention	O
Vibrator	I-api_mention	O
;	O	O
Make	O	O
sure	O	O
this	O	O
in	O	O
the	O	O
activity	O	O
where	O	O
you	O	O
want	O	O
the	O	O
vibration	O	O
to	O	O
occur	O	O
.	O	O
How	O	O
to	O	O
Vibrate	B-api_mention	O
for	O	O
a	O	O
Given	O	O
Time	O	O
In	O	O
most	O	O
circumstances	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
be	O	O
wanting	O	O
to	O	O
vibrate	O	O
the	O	O
device	O	O
for	O	O
a	O	O
short	O	O
,	O	O
predetermined	O	O
amount	O	O
of	O	O
time	O	O
.	O	O
You	O	O
can	O	O
achieve	O	O
this	O	O
by	O	O
using	O	O
the	O	O
vibrate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Here	O	O
is	O	O
a	O	O
quick	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
'	O	O
s	O	O
it	O	O
,	O	O
simple	O	O
!	O	O
How	O	O
to	O	O
Vibrate	O	O
Indefinitely	O	O
It	O	O
may	O	O
be	O	O
the	O	O
case	O	O
that	O	O
you	O	O
want	O	O
the	O	O
device	O	O
to	O	O
continue	O	O
vibrating	O	O
indefinitely	O	O
.	O	O
For	O	O
this	O	O
,	O	O
we	O	O
use	O	O
the	O	O
vibrate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
When	O	O
you	O	O
'	O	O
re	O	O
ready	O	O
to	O	O
stop	O	O
the	O	O
vibration	O	O
,	O	O
just	O	O
call	O	O
the	O	O
cancel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
v	O	O
.	B-api_mention	B-api_mention
cancel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
How	O	O
to	O	O
use	O	O
Vibration	O	O
Patterns	O	O
If	O	O
you	O	O
want	O	O
a	O	O
more	O	O
bespoke	O	O
vibration	O	O
,	O	O
you	O	O
can	O	O
attempt	O	O
to	O	O
create	O	O
your	O	O
own	O	O
vibration	O	O
patterns	O	O
:	O	O
#	O	O
pre	O	O
More	O	O
Complex	O	O
Vibrations	O	O
There	O	O
are	O	O
multiple	O	O
SDKs	O	O
that	O	O
offer	O	O
a	O	O
more	O	O
comprehensive	O	O
range	O	O
of	O	O
haptic	O	O
feedback	O	O
.	O	O
One	O	O
that	O	O
I	O	O
use	O	O
for	O	O
special	O	O
effects	O	O
is	O	O
Immersion	O	O
'	O	O
s	O	O
Haptic	O	O
Development	O	O
Platform	O	O
for	O	O
Android	O	O
.	O	O
Troubleshooting	O	O
If	O	O
your	O	O
device	O	O
won	O	O
'	O	O
t	O	O
vibrate	O	O
,	O	O
first	O	O
make	O	O
sure	O	O
that	O	O
it	O	O
can	O	O
vibrate	O	O
:	O	O
#	O	O
pre	O	O
Secondly	O	O
,	O	O
please	O	O
ensure	O	O
that	O	O
you	O	O
'	O	O
ve	O	O
given	O	O
your	O	O
application	O	O
the	O	O
permission	O	O
to	O	O
vibrate	O	O
!	O	O
Refer	O	O
back	O	O
to	O	O
the	O	O
first	O	O
point	O	O
.	O	O
Question	O	O
-	O	O
31993377	O	O
Question	O	O
How	O	O
is	O	O
it	O	O
that	O	O
for	O	O
a	O	O
scanner	O	O
object	O	O
the	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
true	O	O
while	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
false	O	O
?	O	O
Note	O	O
:	O	O
Based	O	O
on	O	O
the	O	O
input	O	O
file	O	O
,	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
returning	O	O
the	O	O
result	O	O
as	O	O
expected	O	O
;	O	O
the	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
seem	O	O
to	O	O
be	O	O
returning	O	O
the	O	O
correct	O	O
result	O	O
.	O	O
Code	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
code	O	O
I	O	O
'	O	O
m	O	O
running	O	O
that	O	O
'	O	O
s	O	O
creating	O	O
the	O	O
results	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
Input	O	O
File	O	O
The	O	O
following	O	O
is	O	O
the	O	O
actual	O	O
content	O	O
of	O	O
the	O	O
file	O	O
that	O	O
I	O	O
'	O	O
m	O	O
passing	O	O
to	O	O
this	O	O
scanner	O	O
:	O	O
#	O	O
pre	O	O
Result	O	O
The	O	O
following	O	O
is	O	O
the	O	O
end	O	O
of	O	O
what	O	O
'	O	O
s	O	O
printed	O	O
in	O	O
the	O	O
console	O	O
when	O	O
I	O	O
run	O	O
my	O	O
code	O	O
,	O	O
and	O	O
includes	O	O
the	O	O
portion	O	O
I	O	O
can	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
of	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6841333	O	O
,	O	O
answer	O	O
-	O	O
20906129	O	O
As	O	O
explained	O	O
by	O	O
others	O	O
,	O	O
there	O	O
'	O	O
s	O	O
a	O	O
time	O	O
discontinuity	O	O
there	O	O
.	O	O
There	O	O
are	O	O
two	O	O
possible	O	O
timezone	O	O
offsets	O	O
for	O	O
1927	O	O
-	O	O
12	O	O
-	O	O
31	O	O
23	O	O
:	O	O
54	O	O
:	O	O
08	O	O
at	O	O
Asia	O	O
/	O	O
Shanghai	O	O
,	O	O
but	O	O
only	O	O
one	O	O
offset	O	O
for	O	O
1927	O	O
-	O	O
12	O	O
-	O	O
31	O	O
23	O	O
:	O	O
54	O	O
:	O	O
07	O	O
.	O	O
So	O	O
,	O	O
depending	O	O
on	O	O
which	O	O
offset	O	O
is	O	O
used	O	O
,	O	O
there	O	O
'	O	O
s	O	O
either	O	O
a	O	O
one	O	O
second	O	O
difference	O	O
or	O	O
a	O	O
5	O	O
minutes	O	O
and	O	O
53	O	O
seconds	O	O
difference	O	O
.	O	O
This	O	O
slight	O	O
shift	O	O
of	O	O
offsets	O	O
,	O	O
instead	O	O
of	O	O
the	O	O
usual	O	O
one	O	O
-	O	O
hour	O	O
daylight	O	O
savings	O	O
(	O	O
summer	O	O
time	O	O
)	O	O
we	O	O
are	O	O
used	O	O
to	O	O
,	O	O
obscures	O	O
the	O	O
problem	O	O
a	O	O
bit	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
2013a	O	O
update	O	O
of	O	O
the	O	O
timezone	O	O
database	O	O
moved	O	O
this	O	O
discontinuity	O	O
a	O	O
few	O	O
seconds	O	O
earlier	O	O
,	O	O
but	O	O
the	O	O
effect	O	O
would	O	O
still	O	O
be	O	O
observable	O	O
.	O	O
The	O	O
new	O	O
java	O	O
.	O	O
time	O	O
package	O	O
on	O	O
Java	O	O
8	O	O
let	O	O
use	O	O
see	O	O
this	O	O
more	O	O
clearly	O	O
,	O	O
and	O	O
provide	O	O
tools	O	O
to	O	O
handle	O	O
it	O	O
.	O	O
Given	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
durationAtEarlierOffset	B-api_mention	O
will	O	O
be	O	O
one	O	O
second	O	O
,	O	O
while	O	O
durationAtLaterOffset	B-api_mention	O
will	O	O
be	O	O
five	O	O
minutes	O	O
and	O	O
53	O	O
seconds	O	O
.	O	O
Also	O	O
,	O	O
these	O	O
two	O	O
offsets	O	O
are	O	O
the	O	O
same	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
these	O	O
two	O	O
are	O	O
different	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
see	O	O
the	O	O
same	O	O
problem	O	O
comparing	O	O
1927	O	O
-	O	O
12	O	O
-	O	O
31	O	O
23	O	O
:	O	O
59	O	O
:	O	O
59	O	O
with	O	O
1928	O	O
-	O	O
01	O	O
-	O	O
01	O	O
00	O	O
:	O	O
00	O	O
:	O	O
00	O	O
,	O	O
though	O	O
,	O	O
in	O	O
this	O	O
case	O	O
,	O	O
it	O	O
is	O	O
the	O	O
earlier	O	O
offset	O	O
that	O	O
produce	O	O
the	O	O
longer	O	O
divergence	O	O
,	O	O
and	O	O
it	O	O
is	O	O
the	O	O
earlier	O	O
date	O	O
that	O	O
has	O	O
two	O	O
possible	O	O
offsets	O	O
.	O	O
Another	O	O
way	O	O
to	O	O
approach	O	O
this	O	O
is	O	O
to	O	O
check	O	O
whether	O	O
there	O	O
'	O	O
s	O	O
a	O	O
transition	O	O
going	O	O
on	O	O
.	O	O
We	O	O
can	O	O
do	O	O
this	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
check	O	O
whether	O	O
the	O	O
transition	O	O
is	O	O
an	O	O
overlap	O	O
-	O	O
in	O	O
which	O	O
case	O	O
there	O	O
'	O	O
s	O	O
more	O	O
than	O	O
one	O	O
valid	O	O
offset	O	O
for	O	O
that	O	O
date	O	O
/	O	O
time	O	O
-	O	O
or	O	O
a	O	O
gap	O	O
-	O	O
in	O	O
which	O	O
case	O	O
that	O	O
date	O	O
/	O	O
time	O	O
is	O	O
not	O	O
valid	O	O
for	O	O
that	O	O
zone	O	O
id	O	O
-	O	O
by	O	O
using	O	O
the	O	O
isOverlap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
isGap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
on	O	O
zot4	O	O
.	O	O
I	O	O
hope	O	O
this	O	O
helps	O	O
people	O	O
handle	O	O
this	O	O
sort	O	O
of	O	O
issue	O	O
once	O	O
Java	O	O
8	O	O
becomes	O	O
widely	O	O
available	O	O
,	O	O
or	O	O
to	O	O
those	O	O
using	O	O
Java	O	O
7	O	O
who	O	O
adopt	O	O
the	O	O
JSR	O	O
310	O	O
backport	O	O
.	O	O
Question	O	O
-	O	O
8172420	O	O
,	O	O
answer	O	O
-	O	O
8172439	O	O
You	O	O
can	O	O
use	O	O
Character	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
char	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
that	O	O
this	O	O
method	O	O
simply	O	O
returns	O	O
a	O	O
call	O	O
to	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
char	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
also	O	O
works	O	O
.	O	O
As	O	O
others	O	O
have	O	O
noted	O	O
,	O	O
string	O	O
concatenation	O	O
works	O	O
as	O	O
a	O	O
shortcut	O	O
as	O	O
well	O	O
:	O	O
String	B-api_mention	B-api_mention
s	O	O
=	O	O
StringLiteral	O	O
+	O	O
CharLiteral	O	O
;	O	O
But	O	O
this	O	O
compiles	O	O
down	O	O
to	O	O
:	O	O
String	B-api_mention	B-api_mention
s	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
is	O	O
less	O	O
efficient	O	O
because	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
is	O	O
backed	O	O
by	O	O
a	O	O
char	O	O
[	O	O
]	O	O
(	O	O
over	O	O
-	O	O
allocated	O	O
by	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
16	O	O
)	O	O
,	O	O
only	O	O
for	O	O
that	O	O
array	O	O
to	O	O
be	O	O
defensively	O	O
copied	O	O
by	O	O
the	O	O
resulting	O	O
String	B-api_mention	B-api_mention
.	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
gets	O	O
in	O	O
the	O	O
back	O	O
door	O	O
"	O	O
by	O	O
wrapping	O	O
the	O	O
char	O	O
in	O	O
a	O	O
single	O	O
-	O	O
element	O	O
array	O	O
and	O	O
passing	O	O
it	O	O
to	O	O
the	O	O
package	O	O
private	O	O
constructor	O	O
String	B-api_mention	B-api_mention
(	O	O
char	O	O
[	O	O
]	O	O
,	O	O
boolean	O	O
)	O	O
,	O	O
which	O	O
avoids	O	O
the	O	O
array	O	O
copy	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923211	O	O
This	O	O
advice	O	O
is	O	O
a	O	O
variant	O	O
of	O	O
the	O	O
"	O	O
be	O	O
as	O	O
unspecific	O	O
as	O	O
possible	O	O
regarding	O	O
inputs	O	O
and	O	O
as	O	O
specific	O	O
as	O	O
possible	O	O
regarding	O	O
outputs	O	O
"	O	O
rule	O	O
of	O	O
thumb	O	O
.	O	O
Usually	O	O
if	O	O
you	O	O
have	O	O
a	O	O
method	O	O
that	O	O
takes	O	O
a	O	O
plain	O	O
non	O	O
-	O	O
null	O	O
value	O	O
,	O	O
you	O	O
can	O	O
map	O	O
it	O	O
over	O	O
the	O	O
Optional	B-api_mention	B-api_mention
,	O	O
so	O	O
the	O	O
plain	O	O
version	O	O
is	O	O
strictly	O	O
more	O	O
unspecific	O	O
regarding	O	O
inputs	O	O
.	O	O
However	O	O
there	O	O
are	O	O
a	O	O
bunch	O	O
of	O	O
possible	O	O
reasons	O	O
why	O	O
you	O	O
would	O	O
want	O	O
to	O	O
require	O	O
an	O	O
Optional	B-api_mention	B-api_mention
argument	O	O
nonetheless	O	O
:	O	O
#	O	O
li	O	O
you	O	O
want	O	O
your	O	O
function	O	O
to	O	O
be	O	O
used	O	O
in	O	O
conjunction	O	O
with	O	O
another	O	O
API	O	O
that	O	O
returns	O	O
an	O	O
Optional	B-api_mention	B-api_mention
#	O	O
li	O	O
Your	O	O
function	O	O
should	O	O
return	O	O
something	O	O
other	O	O
than	O	O
an	O	O
empty	O	O
Optional	B-api_mention	B-api_mention
if	O	O
the	O	O
given	O	O
value	O	O
is	O	O
empty	O	O
#	O	O
li	O	O
You	O	O
think	O	O
Optional	B-api_mention	B-api_mention
is	O	O
so	O	O
awesome	O	O
that	O	O
whoever	O	O
uses	O	O
your	O	O
API	O	O
should	O	O
be	O	O
required	O	O
to	O	O
learn	O	O
about	O	O
it	O	O
;	O	O
-	O	O
)	O	O
Question	O	O
-	O	O
27683759	O	O
,	O	O
answer	O	O
-	O	O
27684042	O	O
In	O	O
a	O	O
nutshell	O	O
,	O	O
this	O	O
creates	O	O
an	O	O
empty	O	O
,	O	O
immutable	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
look	O	O
at	O	O
the	O	O
expression	O	O
bit	O	O
by	O	O
bit	O	O
.	O	O
Collections	B-api_mention	O
is	O	O
the	O	O
name	O	O
of	O	O
a	O	O
class	O	O
.	O	O
From	O	O
the	O	O
Javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
emptyList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
name	O	O
of	O	O
a	O	O
static	O	O
method	O	O
defined	O	O
in	O	O
the	O	O
Collections	B-api_mention	B-api_mention
class	O	O
(	O	O
Javadoc	O	O
)	O	O
.	O	O
It	O	O
is	O	O
a	O	O
generic	O	O
method	O	O
,	O	O
and	O	O
the	O	O
<	O	O
String	B-api_mention	B-api_mention
>	O	O
in	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
emptyList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
specifies	O	O
the	O	O
generic	O	O
type	O	O
argument	O	O
.	O	O
The	O	O
method	O	O
returns	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
in	O	O
this	O	O
case	O	O
is	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
:	O	O
a	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
More	O	O
specifically	O	O
,	O	O
it	O	O
returns	O	O
an	O	O
empty	O	O
,	O	O
immutable	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
Question	O	O
-	O	O
25056607	O	O
,	O	O
answer	O	O
-	O	O
25056821	O	O
Documentation	O	O
:	O	O
For	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
blockquote	O	O
It	O	O
will	O	O
simply	O	O
return	O	O
the	O	O
entire	O	O
string	O	O
that	O	O
'	O	O
s	O	O
why	O	O
it	O	O
returns	O	O
1	O	O
.	O	O
For	O	O
the	O	O
second	O	O
case	O	O
,	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
will	O	O
discard	O	O
the	O	O
,	O	O
so	O	O
the	O	O
result	O	O
will	O	O
be	O	O
empty	O	O
.	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
silently	O	O
discards	O	O
trailing	O	O
separators	O	O
see	O	O
guava	O	O
StringsExplained	B-api_mention	B-api_mention
too	O	O
Question	O	O
-	O	O
19757300	O	O
,	O	O
answer	O	O
-	O	O
35512247	O	O
Keeping	O	O
this	O	O
issue	O	O
in	O	O
mind	O	O
I	O	O
developed	O	O
a	O	O
small	O	O
library	O	O
for	O	O
dealing	O	O
with	O	O
checked	O	O
exceptions	O	O
and	O	O
lambdas	O	O
.	O	O
Custom	O	O
adapters	O	O
allow	O	O
you	O	O
to	O	O
integrate	O	O
with	O	O
existing	O	O
functional	O	O
types	O	O
:	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
/	O	O
with	O	O
a	O	O
static	O	O
import	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
10796160	O	O
,	O	O
answer	O	O
-	O	O
10796174	O	O
You	O	O
need	O	O
test	O	O
.	O	B-api_mention
split	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
split	B-api_mention	O
uses	O	O
regular	O	O
expression	O	O
and	O	O
in	O	O
regex	O	O
|	O	O
is	O	O
metacharacter	O	O
representing	O	O
OR	O	O
operator	O	O
.	O	O
You	O	O
need	O	O
to	O	O
escape	O	O
that	O	O
character	O	O
using	O	O
\	O	O
(	O	O
written	O	O
in	O	O
String	B-api_mention	B-api_mention
as	O	O
StringLiteral	O	O
since	O	O
\	O	O
is	O	O
also	O	O
metacharacter	O	O
in	O	O
String	B-api_mention	B-api_mention
literals	O	O
and	O	O
require	O	O
another	O	O
\	O	O
to	O	O
escape	O	O
it	O	O
)	O	O
.	O	O
You	O	O
can	O	O
also	O	O
use	O	O
test	O	O
.	O	B-api_mention
split	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
let	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
quote	I-api_mention	I-api_mention
create	O	O
escaped	O	O
version	O	O
of	O	O
regex	O	O
representing	O	O
|	O	O
.	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489394	O	O
It	O	O
'	O	O
s	O	O
a	O	O
feature	O	O
of	O	O
the	O	O
Java	O	O
language	O	O
.	O	O
String	B-api_mention	B-api_mention
literals	O	O
in	O	O
the	O	O
source	O	O
code	O	O
is	O	O
given	O	O
special	O	O
treatment	O	O
.	O	O
The	O	O
language	O	O
spec	O	O
,	O	O
here	O	O
,	O	O
simply	O	O
says	O	O
that	O	O
a	O	O
string	O	O
literal	O	O
is	O	O
of	O	O
String	B-api_mention	B-api_mention
type	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777311	O	O
The	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
check	O	O
if	O	O
both	O	O
arrays	O	O
contain	O	O
the	O	O
same	O	O
number	O	O
of	O	O
elements	O	O
,	O	O
and	O	O
all	O	O
corresponding	O	O
pairs	O	O
of	O	O
elements	O	O
in	O	O
the	O	O
two	O	O
arrays	O	O
are	O	O
equal	O	O
.	O	O
The	O	O
array1	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
compare	O	O
the	O	O
object	O	O
to	O	O
another	O	O
object	O	O
and	O	O
return	O	O
true	O	O
only	O	O
if	O	O
the	O	O
reference	O	O
of	O	O
the	O	O
two	O	O
object	O	O
are	O	O
equal	O	O
as	O	O
in	O	O
the	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
29938300	O	O
Use	O	O
this	O	O
method	O	O
,	O	O
but	O	O
be	O	O
careful	O	O
to	O	O
make	O	O
an	O	O
object	O	O
in	O	O
your	O	O
main	O	O
.	O	O
public	O	O
static	O	O
void	O	O
setName	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
{	O	O
Class	B-api_mention	B-api_mention
setClass	O	O
=	O	O
obj	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
String	B-api_mention	B-api_mention
className	O	O
=	O	O
setClass	O	O
.	B-api_mention	B-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
}	O	O
Question	O	O
-	O	O
8172420	O	O
,	O	O
answer	O	O
-	O	O
15633542	O	O
Nice	O	O
question	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
got	O	O
of	O	O
the	O	O
following	O	O
five	O	O
6	O	O
methods	O	O
to	O	O
do	O	O
it	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
invokes	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
in	O	O
turn	O	O
sets	O	O
the	O	O
value	O	O
char	O	O
array	O	O
.	O	O
#	O	O
pre	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
invokes	O	O
the	O	O
following	O	O
package	O	O
private	O	O
constructor	O	O
.	O	O
#	O	O
pre	O	O
Source	O	O
code	O	O
from	O	O
String	B-api_mention	B-api_mention
.	O	O
java	O	O
in	O	O
Java	O	O
8	O	O
source	O	O
code	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Java	O	O
:	O	O
:	O	O
How	O	O
to	O	O
convert	O	O
primitive	O	O
char	O	O
to	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
#	O	O
li	O	O
How	O	O
to	O	O
convert	O	O
Char	B-api_mention	B-api_mention
to	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
with	O	O
Example	O	O
Question	O	O
-	O	O
4818699	O	O
,	O	O
answer	O	O
-	O	O
4818783	O	O
The	O	O
absolute	O	O
simplest	O	O
example	O	O
I	O	O
can	O	O
think	O	O
of	O	O
is	O	O
to	O	O
make	O	O
incrementing	O	O
an	O	O
atomic	O	O
operation	O	O
.	O	O
With	O	O
standard	O	O
ints	O	O
:	O	O
#	O	O
pre	O	O
With	O	O
AtomicInteger	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
The	O	O
latter	O	O
is	O	O
a	O	O
very	O	O
simple	O	O
way	O	O
to	O	O
perform	O	O
simple	O	O
mutations	O	O
effects	O	O
(	O	O
especially	O	O
counting	O	O
,	O	O
or	O	O
unique	O	O
-	O	O
indexing	O	O
)	O	O
,	O	O
without	O	O
having	O	O
to	O	O
resort	O	O
to	O	O
synchronizing	O	O
all	O	O
access	O	O
.	O	O
More	O	O
complex	O	O
synchronization	O	O
-	O	O
free	O	O
logic	O	O
can	O	O
be	O	O
employed	O	O
by	O	O
using	O	O
compareAndSet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
a	O	O
type	O	O
of	O	O
optimistic	O	O
locking	O	O
-	O	O
get	O	O
the	O	O
current	O	O
value	O	O
,	O	O
compute	O	O
result	O	O
based	O	O
on	O	O
this	O	O
,	O	O
set	O	O
this	O	O
result	O	O
iff	O	O
value	O	O
is	O	O
still	O	O
the	O	O
input	O	O
used	O	O
to	O	O
do	O	O
the	O	O
calculation	O	O
,	O	O
else	O	O
start	O	O
again	O	O
-	O	O
but	O	O
the	O	O
counting	O	O
examples	O	O
are	O	O
very	O	O
useful	O	O
,	O	O
and	O	O
I	O	O
'	O	O
ll	O	O
often	O	O
use	O	O
AtomicIntegers	B-api_mention	B-api_mention
for	O	O
counting	O	O
and	O	O
VM	O	O
-	O	O
wide	O	O
unique	O	O
generators	O	O
if	O	O
there	O	O
'	O	O
s	O	O
any	O	O
hint	O	O
of	O	O
multiple	O	O
threads	O	O
being	O	O
involved	O	O
,	O	O
because	O	O
they	O	O
'	O	O
re	O	O
so	O	O
easy	O	O
to	O	O
work	O	O
with	O	O
I	O	O
'	O	O
d	O	O
almost	O	O
consider	O	O
it	O	O
premature	O	O
optimisation	O	O
to	O	O
use	O	O
plain	O	O
ints	O	O
.	O	O
While	O	O
you	O	O
can	O	O
almost	O	O
always	O	O
achieve	O	O
the	O	O
same	O	O
synchronization	O	O
guarantees	O	O
with	O	O
ints	O	O
and	O	O
appropriate	O	O
synchronized	O	O
declarations	O	O
,	O	O
the	O	O
beauty	O	O
of	O	O
AtomicInteger	B-api_mention	B-api_mention
is	O	O
that	O	O
the	O	O
thread	O	O
-	O	O
safety	O	O
is	O	O
built	O	O
into	O	O
the	O	O
actual	O	O
object	O	O
itself	O	O
,	O	O
rather	O	O
than	O	O
you	O	O
needing	O	O
to	O	O
worry	O	O
about	O	O
the	O	O
possible	O	O
interleavings	O	O
,	O	O
and	O	O
monitors	O	O
held	O	O
,	O	O
of	O	O
every	O	O
method	O	O
that	O	O
happens	O	O
to	O	O
access	O	O
the	O	O
int	O	O
value	O	O
.	O	O
It	O	O
'	O	O
s	O	O
much	O	O
harder	O	O
to	O	O
accidentally	O	O
violate	O	O
threadsafety	O	O
when	O	O
calling	O	O
getAndIncrement	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
than	O	O
when	O	O
returning	O	O
i	O	O
+	O	O
+	O	O
and	O	O
remembering	O	O
(	O	O
or	O	O
not	O	O
)	O	O
to	O	O
acquire	O	O
the	O	O
correct	O	O
set	O	O
of	O	O
monitors	O	O
beforehand	O	O
.	O	O
Question	O	O
-	O	O
21375659	O	O
,	O	O
answer	O	O
-	O	O
21375818	O	O
This	O	O
isn	O	O
'	O	O
t	O	O
strictly	O	O
an	O	O
answer	O	O
to	O	O
your	O	O
question	O	O
,	O	O
but	O	O
if	O	O
behind	O	O
your	O	O
question	O	O
is	O	O
a	O	O
wish	O	O
to	O	O
have	O	O
mutable	O	O
strings	O	O
that	O	O
you	O	O
can	O	O
manipulate	O	O
,	O	O
you	O	O
should	O	O
check	O	O
out	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
class	O	O
,	O	O
which	O	O
implements	O	O
many	O	O
of	O	O
the	O	O
exact	O	O
same	O	O
methods	O	O
that	O	O
String	B-api_mention	B-api_mention
has	O	O
but	O	O
also	O	O
adds	O	O
methods	O	O
to	O	O
change	O	O
the	O	O
current	O	O
contents	O	O
.	O	O
Once	O	O
you	O	O
'	O	O
ve	O	O
built	O	O
your	O	O
string	O	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
you	O	O
'	O	O
re	O	O
content	O	O
with	O	O
it	O	O
,	O	O
you	O	O
simply	O	O
call	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
it	O	O
in	O	O
order	O	O
to	O	O
convert	O	O
it	O	O
to	O	O
an	O	O
ordinary	O	O
String	B-api_mention	B-api_mention
that	O	O
you	O	O
can	O	O
pass	O	O
to	O	O
library	O	O
routines	O	O
and	O	O
other	O	O
functions	O	O
that	O	O
only	O	O
take	O	O
String	B-api_mention	B-api_mention
s	O	O
.	O	O
Also	O	O
,	O	O
both	O	O
StringBuilder	B-api_mention	B-api_mention
and	O	O
String	B-api_mention	B-api_mention
implements	O	O
the	O	O
CharSequence	B-api_mention	B-api_mention
interface	O	O
,	O	O
so	O	O
if	O	O
you	O	O
want	O	O
to	O	O
write	O	O
functions	O	O
in	O	O
your	O	O
own	O	O
code	O	O
that	O	O
can	O	O
use	O	O
both	O	O
mutable	O	O
and	O	O
immutable	O	O
strings	O	O
,	O	O
you	O	O
can	O	O
declare	O	O
them	O	O
to	O	O
take	O	O
any	O	O
CharSequence	B-api_mention	B-api_mention
object	O	O
.	O	O
Question	O	O
-	O	O
23674624	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
at	O	O
the	O	O
docs	O	O
for	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
,	O	O
and	O	O
I	O	O
see	O	O
an	O	O
toArray	B-api_mention	B-api_mention
method	O	O
,	O	O
but	O	O
no	O	O
way	O	O
to	O	O
go	O	O
directly	O	O
to	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
Surely	O	O
there	O	O
is	O	O
a	O	O
way	O	O
to	O	O
convert	O	O
a	O	O
Stream	B-api_mention	B-api_mention
to	O	O
a	O	O
List	B-api_mention	B-api_mention
?	O	O
Question	O	O
-	O	O
29183904	O	O
,	O	O
answer	O	O
-	O	O
29972028	O	O
Use	O	O
enum	O	O
when	O	O
you	O	O
need	O	O
its	O	O
features	O	O
.	O	O
Don	O	O
'	O	O
t	O	O
avoid	O	O
it	O	O
strictly	O	O
.	O	O
Java	O	O
enum	O	O
is	O	O
more	O	O
powerful	O	O
,	O	O
but	O	O
if	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
its	O	O
features	O	O
,	O	O
use	O	O
constants	O	O
,	O	O
they	O	O
occupy	O	O
less	O	O
space	O	O
and	O	O
they	O	O
can	O	O
be	O	O
primitive	O	O
itself	O	O
.	O	O
When	O	O
to	O	O
use	O	O
enum	O	O
:	O	O
#	O	O
li	O	O
type	O	O
checking	O	O
-	O	O
you	O	O
can	O	O
accept	O	O
only	O	O
listed	O	O
values	O	O
,	O	O
and	O	O
they	O	O
are	O	O
not	O	O
continuous	O	O
(	O	O
see	O	O
below	O	O
what	O	O
I	O	O
call	O	O
continuous	O	O
here	O	O
)	O	O
#	O	O
li	O	O
method	O	O
overloading	O	O
-	O	O
every	O	O
enum	O	O
constant	O	O
has	O	O
its	O	O
own	O	O
implementation	O	O
of	O	O
a	O	O
method	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
more	O	O
data	O	O
-	O	O
your	O	O
one	O	O
constant	O	O
contains	O	O
more	O	O
than	O	O
one	O	O
information	O	O
that	O	O
cannot	O	O
be	O	O
put	O	O
in	O	O
one	O	O
variable	O	O
#	O	O
li	O	O
complicated	O	O
data	O	O
-	O	O
your	O	O
constant	O	O
need	O	O
methods	O	O
to	O	O
operate	O	O
on	O	O
the	O	O
data	O	O
When	O	O
not	O	O
to	O	O
use	O	O
enum	O	O
:	O	O
#	O	O
li	O	O
you	O	O
can	O	O
accept	O	O
all	O	O
values	O	O
of	O	O
one	O	O
type	O	O
,	O	O
and	O	O
your	O	O
constants	O	O
contain	O	O
only	O	O
these	O	O
most	O	O
used	O	O
#	O	O
li	O	O
you	O	O
can	O	O
accept	O	O
continuous	O	O
data	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
for	O	O
names	O	O
(	O	O
like	O	O
in	O	O
your	O	O
example	O	O
)	O	O
#	O	O
li	O	O
for	O	O
everything	O	O
other	O	O
that	O	O
really	O	O
doesn	O	O
'	O	O
t	O	O
need	O	O
an	O	O
enum	O	O
Enum	O	O
occupies	O	O
more	O	O
space	O	O
#	O	O
li	O	O
a	O	O
single	O	O
reference	O	O
to	O	O
an	O	O
enum	O	O
constant	O	O
occupy	O	O
4	O	O
bytes	O	O
#	O	O
li	O	O
every	O	O
enum	O	O
constant	O	O
occupy	O	O
space	O	O
that	O	O
is	O	O
a	O	O
sum	O	O
of	O	O
its	O	O
fields	O	O
'	O	O
sizes	O	O
aligned	O	O
to	O	O
8	O	O
bytes	O	O
+	O	O
overhead	O	O
of	O	O
the	O	O
object	O	O
#	O	O
li	O	O
the	O	O
enum	O	O
class	O	O
itself	O	O
occupy	O	O
some	O	O
space	O	O
Constant	O	O
occupies	O	O
less	O	O
space	O	O
#	O	O
li	O	O
a	O	O
constant	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
a	O	O
reference	O	O
so	O	O
it	O	O
'	O	O
s	O	O
a	O	O
pure	O	O
data	O	O
(	O	O
even	O	O
if	O	O
it	O	O
'	O	O
s	O	O
a	O	O
reference	O	O
,	O	O
then	O	O
enum	O	O
instance	O	O
would	O	O
be	O	O
a	O	O
reference	O	O
to	O	O
another	O	O
reference	O	O
)	O	O
#	O	O
li	O	O
constants	O	O
may	O	O
be	O	O
added	O	O
to	O	O
existing	O	O
class	O	O
-	O	O
it	O	O
'	O	O
s	O	O
not	O	O
necessary	O	O
to	O	O
add	O	O
another	O	O
class	O	O
#	O	O
li	O	O
constants	O	O
may	O	O
be	O	O
inlined	O	O
;	O	O
it	O	O
brings	O	O
extended	O	O
compile	O	O
-	O	O
time	O	O
features	O	O
(	O	O
such	O	O
as	O	O
null	O	O
checking	O	O
,	O	O
finding	O	O
dead	O	O
code	O	O
etc	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
19431234	O	O
,	O	O
answer	O	O
-	O	O
23885950	O	O
Short	O	O
answer	O	O
:	O	O
#	O	O
pre	O	O
Explanation	O	O
:	O	O
(	O	O
based	O	O
on	O	O
this	O	O
question	O	O
about	O	O
LocalDate	B-api_mention	B-api_mention
)	O	O
Despite	O	O
its	O	O
name	O	O
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
represents	O	O
an	O	O
instant	O	O
on	O	O
the	O	O
time	O	O
-	O	O
line	O	O
,	O	O
not	O	O
a	O	O
"	O	O
date	O	O
"	O	O
.	O	O
The	O	O
actual	O	O
data	O	O
stored	O	O
within	O	O
the	O	O
object	O	O
is	O	O
a	O	O
long	O	O
count	O	O
of	O	O
milliseconds	O	O
since	O	O
1970	O	O
-	O	O
01	O	O
-	O	O
01T00	O	O
:	O	O
00Z	O	O
(	O	O
midnight	O	O
at	O	O
the	O	O
start	O	O
of	O	O
1970	O	O
GMT	O	O
/	O	O
UTC	O	O
)	O	O
.	O	O
The	O	O
equivalent	O	O
class	O	O
to	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
in	O	O
JSR	O	O
-	O	O
310	O	O
is	O	O
Instant	B-api_mention	O
,	O	O
thus	O	O
there	O	O
are	O	O
convenient	O	O
methods	O	O
to	O	O
provide	O	O
the	O	O
conversion	O	O
to	O	O
and	O	O
fro	O	O
:	O	O
#	O	O
pre	O	O
A	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
instance	O	O
has	O	O
no	O	O
concept	O	O
of	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
This	O	O
might	O	O
seem	O	O
strange	O	O
if	O	O
you	O	O
call	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
,	O	O
because	O	O
the	O	O
toString	B-api_mention	B-api_mention
is	O	O
relative	O	O
to	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
However	O	O
that	O	O
method	O	O
actually	O	O
uses	O	O
Java	O	O
'	O	O
s	O	O
default	O	O
time	O	O
-	O	O
zone	O	O
on	O	O
the	O	O
fly	O	O
to	O	O
provide	O	O
the	O	O
string	O	O
.	O	O
The	O	O
time	O	O
-	O	O
zone	O	O
is	O	O
not	O	O
part	O	O
of	O	O
the	O	O
actual	O	O
state	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	O	O
An	O	O
Instant	B-api_mention	O
also	O	O
does	O	O
not	O	O
contain	O	O
any	O	O
information	O	O
about	O	O
the	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
Thus	O	O
,	O	O
to	O	O
convert	O	O
from	O	O
an	O	O
Instant	O	O
to	O	O
a	O	O
local	O	O
date	O	O
-	O	O
time	O	O
it	O	O
is	O	O
necessary	O	O
to	O	O
specify	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
This	O	O
might	O	O
be	O	O
the	O	O
default	O	O
zone	O	O
-	O	O
ZoneId	B-api_mention	O
.	I-api_mention	B-api_mention
systemDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
or	O	O
it	O	O
might	O	O
be	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
that	O	O
your	O	O
application	O	O
controls	O	O
,	O	O
such	O	O
as	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
from	O	O
user	O	O
preferences	O	O
.	O	O
LocalDateTime	B-api_mention	B-api_mention
has	O	O
a	O	O
convenient	O	O
factory	O	O
method	O	O
that	O	O
takes	O	O
both	O	O
the	O	O
instant	O	O
and	O	O
time	O	O
-	O	O
zone	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
reverse	O	O
,	O	O
the	O	O
LocalDateTime	B-api_mention	B-api_mention
the	O	O
time	O	O
-	O	O
zone	O	O
is	O	O
specified	O	O
by	O	O
calling	O	O
the	O	O
atZone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
ZonedDateTime	B-api_mention	B-api_mention
can	O	O
then	O	O
be	O	O
converted	O	O
directly	O	O
to	O	O
an	O	O
Instant	B-api_mention	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
the	O	O
conversion	O	O
from	O	O
LocalDateTime	B-api_mention	B-api_mention
to	O	O
ZonedDateTime	B-api_mention	B-api_mention
has	O	O
the	O	O
potential	O	O
to	O	O
introduce	O	O
unexpected	O	O
behaviour	O	O
.	O	O
This	O	O
is	O	O
because	O	O
not	O	O
every	O	O
local	O	O
date	O	O
-	O	O
time	O	O
exists	O	O
due	O	O
to	O	O
Daylight	O	O
Saving	O	O
Time	O	O
.	O	O
In	O	O
autumn	O	O
/	O	O
fall	O	O
,	O	O
there	O	O
is	O	O
an	O	O
overlap	O	O
in	O	O
the	O	O
local	O	O
time	O	O
-	O	O
line	O	O
where	O	O
the	O	O
same	O	O
local	O	O
date	O	O
-	O	O
time	O	O
occurs	O	O
twice	O	O
.	O	O
In	O	O
spring	O	O
,	O	O
there	O	O
is	O	O
a	O	O
gap	O	O
,	O	O
where	O	O
an	O	O
hour	O	O
disappears	O	O
.	O	O
See	O	O
the	O	O
Javadoc	O	O
of	O	O
atZone	B-api_mention	O
(	I-api_mention	O
ZoneId	I-api_mention	O
)	I-api_mention	O
for	O	O
more	O	O
the	O	O
definition	O	O
of	O	O
what	O	O
the	O	O
conversion	O	O
will	O	O
do	O	O
.	O	O
Summary	O	O
,	O	O
if	O	O
you	O	O
round	O	O
-	O	O
trip	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
to	O	O
a	O	O
LocalDateTime	B-api_mention	B-api_mention
and	O	O
back	O	O
to	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
you	O	O
may	O	O
end	O	O
up	O	O
with	O	O
a	O	O
different	O	O
instant	O	O
due	O	O
to	O	O
Daylight	O	O
Saving	O	O
Time	O	O
.	O	O
Question	O	O
-	O	O
20877086	O	O
,	O	O
answer	O	O
-	O	O
20877161	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
caches	O	O
between	O	O
-	O	O
128	O	O
and	O	O
127	O	O
of	O	O
256	O	O
Integer	B-api_mention	B-api_mention
You	O	O
should	O	O
not	O	O
compare	O	O
object	O	O
references	O	O
with	O	O
=	O	O
=	O	O
or	O	O
!	O	O
=	O	O
.	O	O
You	O	O
should	O	O
use	O	O
.	B-api_mention	B-api_mention
equals	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
,	O	O
or	O	O
better	O	O
-	O	O
use	O	O
the	O	O
primitive	O	O
int	O	O
rather	O	O
than	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	B-api_mention	I-api_mention
:	O	O
Parses	O	O
the	O	O
string	O	O
argument	O	O
as	O	O
a	O	O
signed	O	O
decimal	O	O
integer	O	O
.	O	O
The	O	O
characters	O	O
in	O	O
the	O	O
string	O	O
must	O	O
all	O	O
be	O	O
decimal	O	O
digits	O	O
,	O	O
except	O	O
that	O	O
the	O	O
first	O	O
character	O	O
may	O	O
be	O	O
an	O	O
ASCII	O	O
minus	O	O
sign	O	O
'	O	O
-	O	O
'	O	O
(	O	O
'	O	O
\	O	O
u002D	O	O
'	O	O
)	O	O
to	O	O
indicate	O	O
a	O	O
negative	O	O
value	O	O
.	O	O
The	O	O
resulting	O	O
integer	O	O
value	O	O
is	O	O
returned	O	O
,	O	O
exactly	O	O
as	O	O
if	O	O
the	O	O
argument	O	O
and	O	O
the	O	O
radix	O	O
10	O	O
were	O	O
given	O	O
as	O	O
arguments	O	O
to	O	O
the	O	O
parseInt	B-api_mention	B-api_mention
(	O	I-api_mention
java	B-api_mention	I-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
,	O	I-api_mention
int	O	I-api_mention
)	O	I-api_mention
method	O	O
.	O	O
valueOf	B-api_mention	O
Returns	O	O
an	O	O
Integer	B-api_mention	B-api_mention
object	O	O
holding	O	O
the	O	O
value	O	O
extracted	O	O
from	O	O
the	O	O
specified	O	O
String	B-api_mention	B-api_mention
when	O	O
parsed	O	O
with	O	O
the	O	O
radix	O	O
given	O	O
by	O	O
the	O	O
second	O	O
argument	O	O
.	O	O
The	O	O
first	O	O
argument	O	O
is	O	O
interpreted	O	O
as	O	O
representing	O	O
a	O	O
signed	O	O
integer	O	O
in	O	O
the	O	O
radix	O	O
specified	O	O
by	O	O
the	O	O
second	O	O
argument	O	O
,	O	O
exactly	O	O
as	O	O
if	O	O
the	O	O
arguments	O	O
were	O	O
given	O	O
to	O	O
the	O	O
parseInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
java	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
result	O	O
is	O	O
an	O	O
Integer	B-api_mention	B-api_mention
object	O	O
that	O	O
represents	O	O
the	O	O
integer	O	O
value	O	O
specified	O	O
by	O	O
the	O	O
string	O	O
.	O	O
equivalent	O	O
to	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
radix	O	O
-	O	O
the	O	O
radix	O	O
to	O	O
be	O	O
used	O	O
in	O	O
interpreting	O	O
s	O	O
so	O	O
if	O	O
you	O	O
equal	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
the	O	O
integer	O	O
inbetween	O	O
-	O	O
128	O	O
to	O	O
127	O	O
it	O	O
returns	O	O
true	O	O
in	O	O
your	O	O
condition	O	O
for	O	O
lesser	O	O
than	O	O
-	O	O
128	O	O
and	O	O
greater	O	O
than	O	O
127	O	O
it	O	O
gives	O	O
false	O	O
Question	O	O
-	O	O
32693704	O	O
,	O	O
answer	O	O
-	O	O
32752970	O	O
I	O	O
will	O	O
try	O	O
to	O	O
summarize	O	O
three	O	O
moreless	O	O
reasonable	O	O
versions	O	O
which	O	O
were	O	O
proposed	O	O
in	O	O
comments	O	O
.	O	O
@	O	O
Holger	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
the	O	O
most	O	O
easy	O	O
thing	O	O
to	O	O
test	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
compile	O	O
such	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
Run	O	O
it	O	O
with	O	O
java	O	O
-	O	O
verbose	O	O
:	O	O
class	O	O
HashMapTest	O	B-api_mention
.	O	O
This	O	O
will	O	O
print	O	O
the	O	O
class	O	O
loading	O	O
events	O	O
as	O	O
they	O	O
occur	O	O
.	O	O
With	O	O
JDK	O	O
1	O	O
.	O	O
8	O	O
.	O	O
0	O	O
_	O	O
60	O	O
I	O	O
see	O	O
more	O	O
than	O	O
400	O	O
classes	O	O
loaded	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
HashMap	B-api_mention	B-api_mention
is	O	O
loaded	O	O
long	O	O
before	O	O
application	O	O
code	O	O
and	O	O
Arrays	B-api_mention	B-api_mention
is	O	O
loaded	O	O
only	O	O
14	O	O
classes	O	O
after	O	O
HashMap	B-api_mention	B-api_mention
.	O	O
The	O	O
HashMap	B-api_mention	B-api_mention
load	O	O
is	O	O
triggered	O	O
by	O	O
sun	B-api_mention	O
.	I-api_mention	O
reflect	I-api_mention	O
.	I-api_mention	O
Reflection	I-api_mention	O
initialization	O	O
as	O	O
it	O	O
has	O	O
HashMap	B-api_mention	B-api_mention
static	O	O
fields	O	O
.	O	O
The	O	O
Arrays	B-api_mention	B-api_mention
load	O	O
is	O	O
likely	O	O
to	O	O
be	O	O
triggered	O	O
by	O	O
WeakHashMap	O	B-api_mention
load	O	O
which	O	O
actually	O	O
has	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
in	O	O
the	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
WeakHashMap	B-api_mention	B-api_mention
load	O	O
is	O	O
triggered	O	O
by	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
ClassValue	I-api_mention	I-api_mention
$	I-api_mention	O
ClassValueMap	I-api_mention	B-api_mention
which	O	O
extends	O	O
WeakHashMap	B-api_mention	B-api_mention
.	O	O
The	O	O
ClassValueMap	B-api_mention	B-api_mention
is	O	O
present	O	O
in	O	O
every	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Class	I-api_mention	I-api_mention
instance	O	O
.	O	O
So	O	O
to	O	O
me	O	O
seems	O	O
that	O	O
without	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
the	O	O
JDK	O	O
cannot	O	O
be	O	O
initialized	O	O
at	O	O
all	O	O
.	O	O
Also	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
static	O	O
initializer	O	O
is	O	O
very	O	O
short	O	O
,	O	O
it	O	O
only	O	O
initializes	O	O
the	O	O
assertion	O	O
mechanism	O	O
.	O	O
This	O	O
mechanism	O	O
is	O	O
used	O	O
in	O	O
many	O	O
other	O	O
classes	O	O
(	O	O
including	O	O
,	O	O
for	O	O
example	O	O
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Throwable	I-api_mention	I-api_mention
which	O	O
is	O	O
loaded	O	O
very	O	O
early	O	O
)	O	O
.	O	O
No	O	O
other	O	O
static	O	O
initialization	O	O
steps	O	O
are	O	O
performed	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Arrays	I-api_mention	I-api_mention
.	O	O
Thus	O	O
@	O	O
Holger	O	O
version	O	O
seems	O	O
incorrect	O	O
to	O	O
me	O	O
.	O	O
Here	O	O
we	O	O
also	O	O
found	O	O
very	O	O
interesting	O	O
thing	O	O
.	O	O
The	O	O
WeakHashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
still	O	O
uses	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
.	O	O
It	O	O
'	O	O
s	O	O
interesting	O	O
when	O	O
it	O	O
appeared	O	O
there	O	O
,	O	O
but	O	O
unfortunately	O	O
this	O	O
goes	O	O
to	O	O
prehistoric	O	O
times	O	O
(	O	O
it	O	O
was	O	O
already	O	O
there	O	O
in	O	O
the	O	O
very	O	O
first	O	O
public	O	O
OpenJDK	O	O
repository	O	O
)	O	O
.	O	O
Next	O	O
,	O	O
@	O	O
MarcoTopolnik	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
was	O	O
actually	O	O
surprising	O	O
for	O	O
me	O	O
that	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
is	O	O
not	O	O
directly	O	O
intrinsified	O	O
(	O	O
see	O	O
intrinsic	O	O
list	O	O
generated	O	O
by	O	O
@	O	O
apangin	O	O
)	O	O
.	O	O
Seems	O	O
that	O	O
such	O	O
loop	O	O
can	O	O
be	O	O
recognized	O	O
and	O	O
vectorized	O	O
by	O	O
JVM	O	O
without	O	O
explicit	O	O
intrinsic	O	O
handling	O	O
.	O	O
So	O	O
it	O	O
'	O	O
s	O	O
true	O	O
that	O	O
extra	O	O
call	O	O
can	O	O
be	O	O
not	O	O
inlined	O	O
in	O	O
very	O	O
specific	O	O
cases	O	O
(	O	O
for	O	O
example	O	O
if	O	O
MaxInlineLevel	O	B-api_mention
limit	O	O
is	O	O
reached	O	O
)	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
it	O	O
'	O	O
s	O	O
very	O	O
rare	O	O
situation	O	O
and	O	O
it	O	O
'	O	O
s	O	O
only	O	O
a	O	O
single	O	O
call	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
a	O	O
call	O	O
inside	O	O
loop	O	O
,	O	O
and	O	O
it	O	O
'	O	O
s	O	O
a	O	O
static	O	O
,	O	O
not	O	O
virtual	O	O
/	O	O
interface	O	O
call	O	O
,	O	O
thus	O	O
the	O	O
performance	O	O
improvement	O	O
could	O	O
be	O	O
only	O	O
marginal	O	O
and	O	O
only	O	O
in	O	O
some	O	O
specific	O	O
scenarios	O	O
.	O	O
Not	O	O
the	O	O
thing	O	O
the	O	O
JVM	O	O
developers	O	O
usually	O	O
care	O	O
.	O	O
Also	O	O
it	O	O
should	O	O
be	O	O
noted	O	O
that	O	O
even	O	O
C1	O	O
'	O	O
client	O	O
'	O	O
compiler	O	O
(	O	O
tier	O	O
1	O	O
-	O	O
3	O	O
)	O	O
is	O	O
capable	O	O
to	O	O
inline	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
called	O	O
,	O	O
for	O	O
example	O	O
,	O	O
in	O	O
WeakHashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
as	O	O
inlining	O	O
log	O	O
(	O	O
-	O	O
XX	O	O
:	O	O
+	O	O
UnlockDiagnosticVMOptions	O	B-api_mention
-	O	O
XX	O	O
:	O	O
+	O	O
PrintCompilation	O	O
-	O	O
XX	O	O
:	O	O
+	O	O
PrintInlining	O	O
)	O	O
says	O	O
:	O	O
#	O	O
pre	O	O
Of	O	O
course	O	O
,	O	O
it	O	O
'	O	O
s	O	O
also	O	O
easily	O	O
inlined	O	O
by	O	O
smart	O	O
and	O	O
powerful	O	O
C2	O	O
'	O	O
server	O	O
'	O	O
compiler	O	O
.	O	O
Thus	O	O
I	O	O
see	O	O
no	O	O
problems	O	O
here	O	O
.	O	O
Seems	O	O
that	O	O
@	O	O
Marco	O	O
version	O	O
is	O	O
incorrect	O	O
either	O	O
.	O	O
Finally	O	O
we	O	O
have	O	O
a	O	O
couple	O	O
of	O	O
comments	O	O
from	O	O
@	O	O
StuartMarks	O	O
(	O	O
who	O	O
is	O	O
JDK	O	O
developer	O	O
,	O	O
thus	O	O
some	O	O
official	O	O
voice	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Indeed	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
contained	O	O
the	O	O
loop	O	O
many	O	O
years	O	O
,	O	O
was	O	O
replaced	O	O
with	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
on	O	O
Apr	O	O
10th	O	O
,	O	O
2013	O	O
and	O	O
stayed	O	O
less	O	O
one	O	O
half	O	O
-	O	O
a	O	O
-	O	O
year	O	O
until	O	O
Sept	O	O
4th	O	O
when	O	O
the	O	O
discussed	O	O
commit	O	O
was	O	O
introduced	O	O
.	O	O
The	O	O
discussed	O	O
commit	O	O
was	O	O
actually	O	O
a	O	O
major	O	O
rewrite	O	O
of	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
internals	O	O
to	O	O
fix	O	O
JDK	O	O
-	O	O
8023463	O	O
issue	O	O
.	O	O
It	O	O
was	O	O
a	O	O
long	O	O
story	O	O
about	O	O
possibility	O	O
to	O	O
poison	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
with	O	O
keys	O	O
having	O	O
duplicating	O	O
hashcodes	O	O
reducing	O	O
HashMap	B-api_mention	B-api_mention
search	O	O
speed	O	O
to	O	O
linear	O	O
making	O	O
it	O	O
vulnerable	O	O
to	O	O
DoS	O	O
-	O	O
attacks	O	O
.	O	O
The	O	O
attempts	O	O
to	O	O
solve	O	O
this	O	O
were	O	O
performed	O	O
in	O	O
JDK	O	O
-	O	O
7	O	O
including	O	O
some	O	O
randomization	O	O
of	O	O
String	B-api_mention	B-api_mention
hashCode	O	O
.	O	O
So	O	O
seems	O	O
that	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
implementation	O	O
was	O	O
forked	O	O
from	O	O
the	O	O
earlier	O	O
commit	O	O
,	O	O
developed	O	O
independently	O	O
,	O	O
then	O	O
merged	O	O
into	O	O
the	O	O
master	O	O
branch	O	O
overwriting	O	O
several	O	O
changes	O	O
introduced	O	O
in	O	O
-	O	O
between	O	O
.	O	O
We	O	O
may	O	O
support	O	O
this	O	O
hypothesis	O	O
performing	O	O
a	O	O
diff	O	O
.	O	O
Take	O	O
the	O	O
version	O	O
where	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
was	O	O
removed	O	O
(	O	O
2013	O	O
-	O	O
09	O	O
-	O	O
04	O	O
)	O	O
and	O	O
compare	O	O
it	O	O
with	O	O
previous	O	O
version	O	O
(	O	O
2013	O	O
-	O	O
07	O	O
-	O	O
30	O	O
)	O	O
.	O	O
The	O	O
diff	O	O
-	O	O
U0	O	O
output	O	O
has	O	O
4341	O	O
lines	O	O
.	O	O
Now	O	O
let	O	O
'	O	O
s	O	O
diff	O	O
against	O	O
the	O	O
version	O	O
prior	O	O
to	O	O
one	O	O
when	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
was	O	O
added	O	O
(	O	O
2013	O	O
-	O	O
04	O	O
-	O	O
01	O	O
)	O	O
.	O	O
Now	O	O
diff	O	O
-	O	O
U0	O	O
contains	O	O
only	O	O
2680	O	O
lines	O	O
.	O	O
Thus	O	O
the	O	O
newer	O	O
version	O	O
actually	O	O
more	O	O
similar	O	O
to	O	O
the	O	O
older	O	O
than	O	O
to	O	O
immediate	O	O
parent	O	O
.	O	O
Conclusion	O	O
So	O	O
to	O	O
conclude	O	O
I	O	O
would	O	O
agree	O	O
with	O	O
Stuart	O	O
Marks	O	O
.	O	O
There	O	O
were	O	O
no	O	O
concrete	O	O
reason	O	O
to	O	O
remove	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
,	O	O
it	O	O
'	O	O
s	O	O
just	O	O
because	O	O
the	O	O
in	O	O
-	O	O
between	O	O
change	O	O
was	O	O
overwritten	O	O
by	O	O
mistake	O	O
.	O	O
Using	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
is	O	O
perfectly	O	O
fine	O	O
both	O	O
in	O	O
JDK	O	O
code	O	O
and	O	O
in	O	O
user	O	O
applications	O	O
and	O	O
used	O	O
,	O	O
for	O	O
example	O	O
,	O	O
in	O	O
WeakHashMap	B-api_mention	B-api_mention
.	O	O
The	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
is	O	O
loaded	O	O
anyways	O	O
pretty	O	O
early	O	O
during	O	O
the	O	O
JDK	O	O
initialization	O	O
,	O	O
has	O	O
very	O	O
simple	O	O
static	O	O
initializer	O	O
and	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
method	O	O
can	O	O
be	O	O
easily	O	O
inlined	O	O
even	O	O
by	O	O
client	O	O
compiler	O	O
,	O	O
so	O	O
no	O	O
performance	O	O
drawback	O	O
should	O	O
be	O	O
noted	O	O
.	O	O
Question	O	O
-	O	O
7935858	O	O
I	O	O
have	O	O
prepared	O	O
a	O	O
simple	O	O
code	O	O
snippet	O	O
in	O	O
order	O	O
to	O	O
separate	O	O
the	O	O
erroneous	O	O
portion	O	O
from	O	O
my	O	O
web	O	O
application	O	O
.	O	O
#	O	O
pre	O	O
I	O	O
have	O	O
tested	O	O
it	O	O
while	O	O
building	O	O
a	O	O
web	O	O
application	O	O
JSF	O	O
.	O	O
I	O	O
just	O	O
want	O	O
to	O	O
know	O	O
why	O	O
in	O	O
the	O	O
above	O	O
code	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
work	O	O
.	O	O
The	O	O
statement	O	O
,	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
displays	O	O
nothing	O	O
on	O	O
the	O	O
console	O	O
means	O	O
that	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
go	O	O
through	O	O
the	O	O
loop	O	O
.	O	O
When	O	O
I	O	O
change	O	O
the	O	O
argument	O	O
of	O	O
the	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
other	O	O
characters	O	O
,	O	O
It	O	O
works	O	O
just	O	O
fine	O	O
as	O	O
usual	O	O
.	O	O
What	O	O
might	O	O
be	O	O
the	O	O
problem	O	O
?	O	O
Question	O	O
-	O	O
10631715	O	O
,	O	O
answer	O	O
-	O	O
30270403	O	O
There	O	O
is	O	O
a	O	O
function	O	O
called	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
that	O	O
can	O	O
remove	O	O
all	O	O
whitespaces	O	O
by	O	O
replacing	O	O
them	O	O
with	O	O
whatever	O	O
you	O	O
want	O	O
.	O	O
As	O	O
an	O	O
example	O	O
#	O	O
pre	O	O
will	O	O
give	O	O
you	O	O
:	O	O
First	O	O
:	O	O
15	O	O
.	O	O
94	O	O
,	O	O
Second	O	O
:	O	O
16	O	O
.	O	O
01	O	O
Question	O	O
-	O	O
22463062	O	O
Java	O	O
8	O	O
added	O	O
a	O	O
new	O	O
API	O	O
for	O	O
working	O	O
with	O	O
dates	O	O
and	O	O
times	O	O
(	O	O
JSR	O	O
310	O	O
)	O	O
.	O	O
I	O	O
have	O	O
date	O	O
and	O	O
time	O	O
as	O	O
string	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
StringLiteral	O	O
)	O	O
.	O	O
How	O	O
can	O	O
I	O	O
obtain	O	O
a	O	O
LocalDateTime	B-api_mention	B-api_mention
instance	O	O
from	O	O
the	O	O
given	O	O
string	O	O
?	O	O
After	O	O
I	O	O
finished	O	O
working	O	O
with	O	O
the	O	O
LocalDateTime	B-api_mention	B-api_mention
object	O	O
:	O	O
How	O	O
can	O	O
I	O	O
then	O	O
convert	O	O
the	O	O
LocalDateTime	B-api_mention	B-api_mention
instance	O	O
back	O	O
to	O	O
a	O	O
string	O	O
with	O	O
the	O	O
same	O	O
format	O	O
as	O	O
shown	O	O
above	O	O
?	O	O
Question	O	O
-	O	O
24547673	O	O
,	O	O
answer	O	O
-	O	O
24547831	O	O
It	O	O
'	O	O
s	O	O
a	O	O
curious	O	O
omission	O	O
.	O	O
You	O	O
would	O	O
have	O	O
to	O	O
mark	O	O
the	O	O
field	O	O
as	O	O
transient	O	O
and	O	O
provide	O	O
your	O	O
own	O	O
custom	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
that	O	O
wrote	O	O
the	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
result	O	O
itself	O	O
,	O	O
and	O	O
a	O	O
readObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
that	O	O
restored	O	O
the	O	O
Optional	B-api_mention	B-api_mention
by	O	O
reading	O	O
that	O	O
result	O	O
from	O	O
the	O	O
stream	O	O
.	O	O
Not	O	O
forgetting	O	O
to	O	O
call	O	O
defaultWriteObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
defaultReadObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
respectively	O	O
.	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
18496449	O	O
The	O	O
first	O	O
style	O	O
is	O	O
the	O	O
one	O	O
suggested	O	O
by	O	O
Oracle	O	O
.	O	O
BufferedWriter	B-api_mention	B-api_mention
doesn	O	O
'	O	O
t	O	O
throw	O	O
checked	O	O
exceptions	O	O
,	O	O
so	O	O
if	O	O
any	O	O
exception	O	O
is	O	O
thrown	O	O
,	O	O
the	O	O
program	O	O
is	O	O
not	O	O
expected	O	O
to	O	O
recover	O	O
from	O	O
it	O	O
,	O	O
making	O	O
resource	O	O
recover	O	O
mostly	O	O
moot	O	O
.	O	O
Mostly	O	O
because	O	O
it	O	O
could	O	O
happen	O	O
in	O	O
a	O	O
thread	O	O
,	O	O
with	O	O
the	O	O
thread	O	O
dieing	O	O
but	O	O
the	O	O
program	O	O
still	O	O
continuing	O	O
-	O	O
-	O	O
say	O	O
,	O	O
there	O	O
was	O	O
a	O	O
temporary	O	O
memory	O	O
outage	O	O
that	O	O
wasn	O	O
'	O	O
t	O	O
long	O	O
enough	O	O
to	O	O
seriously	O	O
impair	O	O
the	O	O
rest	O	O
of	O	O
the	O	O
program	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
rather	O	O
corner	O	O
case	O	O
,	O	O
though	O	O
,	O	O
and	O	O
if	O	O
it	O	O
happens	O	O
often	O	O
enough	O	O
to	O	O
make	O	O
resource	O	O
leak	O	O
a	O	O
problem	O	O
,	O	O
the	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
is	O	O
the	O	O
least	O	O
of	O	O
your	O	O
problems	O	O
.	O	O
Question	O	O
-	O	O
27504925	O	O
The	O	O
Java	O	O
language	O	O
specification	O	O
specifies	O	O
that	O	O
#	O	O
blockquote	O	O
So	O	O
,	O	O
considering	O	O
arrays	O	O
are	O	O
objects	O	O
â€”	O	O
why	O	O
did	O	O
the	O	O
Java	O	O
designers	O	O
make	O	O
the	O	O
decision	O	O
not	O	O
to	O	O
allow	O	O
inherit	O	O
and	O	O
override	O	O
from	O	O
it	O	O
,	O	O
for	O	O
example	O	O
,	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
The	O	O
current	O	O
syntax	O	O
wouldn	O	O
'	O	O
t	O	O
allow	O	O
creating	O	O
anonymous	O	O
classes	O	O
with	O	O
an	O	O
array	O	O
as	O	O
the	O	O
base	O	O
class	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
that	O	O
was	O	O
the	O	O
reason	O	O
for	O	O
their	O	O
decision	O	O
.	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032144	O	O
The	O	O
source	O	O
code	O	O
for	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
The	O	O
source	O	O
code	O	O
for	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
As	O	O
defined	O	O
in	O	O
AbstractCollection	B-api_mention	B-api_mention
)	O	O
:	O	O
#	O	O
pre	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
much	O	O
faster	O	O
since	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
to	O	O
deal	O	O
with	O	O
all	O	O
those	O	O
extra	O	O
method	O	O
calls	O	O
.	O	O
And	O	O
as	O	O
Atrey	O	O
points	O	O
out	O	O
,	O	O
c	O	O
.	B-api_mention	B-api_mention
contains	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
increases	O	O
the	O	O
time	O	O
complexity	O	O
of	O	O
removeAll	B-api_mention	B-api_mention
to	O	O
O	O	O
(	O	O
n	O	O
^	O	O
2	O	O
)	O	O
as	O	O
opposed	O	O
to	O	O
clear	O	O
'	O	O
s	O	O
O	O	O
(	O	O
n	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
12732422	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
add	O	O
header	O	O
for	O	O
my	O	O
request	O	O
using	O	O
HttpUrlConnection	B-api_mention	B-api_mention
but	O	O
the	O	O
method	O	O
setRequestProperty	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
doesn	O	O
'	O	O
t	O	O
seem	O	O
working	O	O
.	O	O
The	O	O
server	O	O
side	O	O
doesn	O	O
'	O	O
t	O	O
receive	O	O
any	O	O
request	O	O
with	O	O
my	O	O
header	O	O
.	O	O
Can	O	O
anyone	O	O
help	O	O
me	O	O
?	O	O
Thanks	O	O
in	O	O
advance	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32632364	O	O
,	O	O
answer	O	O
-	O	O
32633199	O	O
It	O	O
shouldn	O	O
'	O	O
t	O	O
have	O	O
compiled	O	O
,	O	O
according	O	O
to	O	O
JLS	O	O
7	O	O
.	O	O
int	O	O
can	O	O
be	O	O
compared	O	O
to	O	O
boxed	O	O
numeric	O	O
types	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
Byte	B-api_mention	O
,	O	O
Short	B-api_mention	B-api_mention
,	O	O
Character	B-api_mention	B-api_mention
,	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Long	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
.	O	O
But	O	O
that	O	O
is	O	O
all	O	O
.	O	O
And	O	O
if	O	O
comparison	O	O
is	O	O
between	O	O
int	O	O
and	O	O
say	O	O
Float	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
will	O	O
be	O	O
unboxed	O	O
first	O	O
,	O	O
so	O	O
that	O	O
the	O	O
comparison	O	O
is	O	O
between	O	O
float	O	O
and	O	O
int	O	O
.	O	O
It	O	O
'	O	O
ll	O	O
make	O	O
no	O	O
sense	O	O
to	O	O
do	O	O
the	O	O
other	O	O
way	O	O
around	O	O
-	O	O
box	O	O
int	O	O
then	O	O
examine	O	O
the	O	O
identity	O	O
of	O	O
the	O	O
Integer	B-api_mention	B-api_mention
(	O	O
with	O	O
a	O	O
Float	B-api_mention	B-api_mention
no	O	O
less	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
15655012	O	O
,	O	O
answer	O	O
-	O	O
15655071	O	O
If	O	O
you	O	O
make	O	O
foo	O	O
static	O	O
,	O	O
you	O	O
must	O	O
initialize	O	O
it	O	O
in	O	O
the	O	O
class	O	O
constructor	O	O
(	O	O
or	O	O
inline	O	O
where	O	O
you	O	O
define	O	O
it	O	O
)	O	O
like	O	O
the	O	O
following	O	O
examples	O	O
.	O	O
Class	O	O
constructor	O	O
(	O	O
not	O	O
instance	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Inline	O	O
:	O	O
private	O	O
static	O	O
final	O	O
List	B-api_mention	B-api_mention
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
problem	O	O
here	O	O
is	O	O
not	O	O
how	O	O
the	O	O
final	O	O
modifier	O	O
works	O	O
,	O	O
but	O	O
rather	O	O
how	O	O
the	O	O
static	O	O
modifier	O	O
works	O	O
.	O	O
The	O	O
final	O	O
modifier	O	O
enforces	O	O
an	O	O
initialization	O	O
of	O	O
your	O	O
reference	O	O
by	O	O
the	O	O
time	O	O
the	O	O
call	O	O
to	O	O
your	O	O
constructor	O	O
completes	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
you	O	O
must	O	O
initialize	O	O
it	O	O
in	O	O
the	O	O
constructor	O	O
)	O	O
.	O	O
When	O	O
you	O	O
initialize	O	O
an	O	O
attribute	O	O
in	O	O
-	O	O
line	O	O
,	O	O
it	O	O
gets	O	O
initialized	O	O
before	O	O
the	O	O
code	O	O
you	O	O
have	O	O
defined	O	O
for	O	O
the	O	O
constructor	O	O
is	O	O
run	O	O
,	O	O
so	O	O
you	O	O
get	O	O
the	O	O
following	O	O
outcomes	O	O
:	O	O
#	O	O
li	O	O
if	O	O
foo	O	O
is	O	O
static	O	O
,	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
executed	O	O
before	O	O
the	O	O
static	O	O
{	O	O
}	O	O
constructor	O	O
you	O	O
have	O	O
defined	O	O
for	O	O
your	O	O
class	O	O
is	O	O
executed	O	O
#	O	O
li	O	O
if	O	O
foo	O	O
is	O	O
not	O	O
static	O	O
,	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
executed	O	O
before	O	O
your	O	O
constructor	O	O
is	O	O
run	O	O
When	O	O
you	O	O
do	O	O
not	O	O
initilize	O	O
an	O	O
attribute	O	O
in	O	O
-	O	O
line	O	O
,	O	O
the	O	O
final	O	O
modifier	O	O
enforces	O	O
that	O	O
you	O	O
initialize	O	O
it	O	O
and	O	O
that	O	O
you	O	O
must	O	O
do	O	O
so	O	O
in	O	O
the	O	O
constructor	O	O
.	O	O
If	O	O
you	O	O
also	O	O
have	O	O
a	O	O
static	O	O
modifier	O	O
,	O	O
the	O	O
constructor	O	O
you	O	O
will	O	O
have	O	O
to	O	O
initialize	O	O
the	O	O
attribute	O	O
in	O	O
is	O	O
the	O	O
class	O	O
'	O	O
initialization	O	O
block	O	O
:	O	O
static	O	O
{	O	O
}	O	O
.	O	O
The	O	O
error	O	O
you	O	O
get	O	O
in	O	O
your	O	O
code	O	O
is	O	O
from	O	O
the	O	O
fact	O	O
that	O	O
static	O	O
{	O	O
}	O	O
is	O	O
run	O	O
when	O	O
the	O	O
class	O	O
is	O	O
loaded	O	O
,	O	O
before	O	O
the	O	O
time	O	O
you	O	O
instantiate	O	O
an	O	O
object	O	O
of	O	O
that	O	O
class	O	O
.	O	O
Thus	O	O
,	O	O
you	O	O
will	O	O
have	O	O
not	O	O
initialized	O	O
foo	O	O
when	O	O
the	O	O
class	O	O
is	O	O
created	O	O
.	O	O
Think	O	O
of	O	O
the	O	O
static	O	O
{	O	O
}	O	O
block	O	O
as	O	O
a	O	O
constructor	O	O
for	O	O
an	O	O
object	O	O
of	O	O
type	O	O
Class	B-api_mention	B-api_mention
.	O	O
This	O	O
is	O	O
where	O	O
you	O	O
must	O	O
do	O	O
the	O	O
initialization	O	O
of	O	O
your	O	O
static	O	O
final	O	O
class	O	O
attributes	O	O
(	O	O
if	O	O
not	O	O
done	O	O
inline	O	O
)	O	O
.	O	O
Side	O	O
note	O	O
:	O	O
The	O	O
final	O	O
modifier	O	O
assures	O	O
const	O	O
-	O	O
ness	O	O
only	O	O
for	O	O
primitive	O	O
types	O	O
and	O	O
references	O	O
.	O	O
When	O	O
you	O	O
declare	O	O
a	O	O
final	O	O
object	O	O
,	O	O
what	O	O
you	O	O
get	O	O
is	O	O
a	O	O
final	O	O
reference	O	O
to	O	O
that	O	O
object	O	O
,	O	O
but	O	O
the	O	O
object	O	O
itself	O	O
is	O	O
not	O	O
constant	O	O
.	O	O
What	O	O
you	O	O
are	O	O
really	O	O
achieving	O	O
when	O	O
declaring	O	O
a	O	O
final	O	O
attribute	O	O
is	O	O
that	O	O
,	O	O
once	O	O
you	O	O
declare	O	O
an	O	O
object	O	O
for	O	O
your	O	O
specific	O	O
purpose	O	O
(	O	O
like	O	O
the	O	O
final	O	O
List	B-api_mention	B-api_mention
that	O	O
you	O	O
have	O	O
declared	O	O
)	O	O
,	O	O
that	O	O
and	O	O
only	O	O
that	O	O
object	O	O
will	O	O
be	O	O
used	O	O
for	O	O
that	O	O
purpose	O	O
:	O	O
you	O	O
will	O	O
not	O	O
be	O	O
able	O	O
to	O	O
change	O	O
List	B-api_mention	B-api_mention
foo	O	O
to	O	O
another	O	O
List	B-api_mention	B-api_mention
,	O	O
but	O	O
you	O	O
can	O	O
still	O	O
alter	O	O
your	O	O
List	B-api_mention	B-api_mention
by	O	O
adding	O	O
/	O	O
removing	O	O
items	O	O
(	O	O
the	O	O
List	B-api_mention	B-api_mention
you	O	O
are	O	O
using	O	O
will	O	O
be	O	O
the	O	O
same	O	O
,	O	O
only	O	O
with	O	O
its	O	O
contents	O	O
altered	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
11774099	O	O
,	O	O
answer	O	O
-	O	O
11774137	O	O
iterate	O	O
through	O	O
the	O	O
whole	O	O
65k	O	O
chars	O	O
and	O	O
ask	O	O
Character	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isJavaIdentifierStart	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
answer	O	O
is	O	O
:	O	O
"	O	O
undertie	O	O
"	O	O
decimal	O	O
8255	O	O
Question	O	O
-	O	O
24630963	O	O
,	O	O
answer	O	O
-	O	O
32648397	O	O
I	O	O
wrote	O	O
a	O	O
Collector	B-api_mention	B-api_mention
which	O	O
,	O	O
unlike	O	O
the	O	O
default	O	O
java	O	O
one	O	O
,	O	O
does	O	O
not	O	O
crash	O	O
when	O	O
you	O	O
have	O	O
null	O	O
values	O	O
:	O	O
#	O	O
pre	O	O
Just	O	O
replace	O	O
your	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
to	O	O
a	O	O
call	O	O
to	O	O
this	O	O
function	O	O
and	O	O
it	O	O
'	O	O
ll	O	O
fix	O	O
the	O	O
problem	O	O
.	O	O
Question	O	O
-	O	O
27845223	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
at	O	O
a	O	O
piece	O	O
of	O	O
Java	O	O
code	O	O
right	O	O
now	O	O
,	O	O
and	O	O
it	O	O
takes	O	O
a	O	O
path	O	O
as	O	O
a	O	O
String	B-api_mention	B-api_mention
and	O	O
gets	O	O
its	O	O
URL	O	B-api_mention
using	O	O
URL	B-api_mention	B-api_mention
resource	O	O
=	O	O
ClassLoader	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getSystemClassLoader	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
,	O	O
then	O	O
calls	O	O
String	B-api_mention	B-api_mention
path	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
getPath	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
finally	O	O
executes	O	O
new	O	O
File	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
Oh	O	O
,	O	O
and	O	O
there	O	O
are	O	O
also	O	O
calls	O	O
to	O	O
URL	B-api_mention	O
url	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
toURI	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
String	B-api_mention	B-api_mention
file	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
getFile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
'	O	O
m	O	O
totally	O	O
confused	O	O
right	O	O
now	O	O
-	O	O
mostly	O	O
because	O	O
of	O	O
the	O	O
terminology	O	O
,	O	O
I	O	O
guess	O	O
.	O	O
Can	O	O
someone	O	O
please	O	O
walk	O	O
me	O	O
through	O	O
the	O	O
differences	O	O
,	O	O
or	O	O
provide	O	O
a	O	O
few	O	O
links	O	O
to	O	O
Dummy	O	O
-	O	O
proof	O	O
material	O	O
?	O	O
Especially	O	O
URI	B-api_mention	O
to	O	O
URL	B-api_mention	O
and	O	O
Resource	B-api_mention	B-api_mention
to	O	O
File	B-api_mention	B-api_mention
?	O	O
To	O	O
me	O	O
,	O	O
it	O	O
feels	O	O
like	O	O
they	O	O
should	O	O
be	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
respectively	O	O
.	O	O
.	O	O
.	O	O
The	O	O
difference	O	O
between	O	O
getFile	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getPath	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
explained	O	O
here	O	O
:	O	O
What	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
url	O	O
.	B-api_mention	B-api_mention
getFile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getpath	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
(	O	O
Interestingly	O	O
they	O	O
both	O	O
seem	O	O
to	O	O
return	O	O
Strings	O	O
,	O	O
which	O	O
probably	O	O
adds	O	O
a	O	O
whole	O	O
lot	O	O
to	O	O
my	O	O
state	O	O
of	O	O
mind	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Now	O	O
,	O	O
if	O	O
I	O	O
have	O	O
a	O	O
locator	O	O
that	O	O
references	O	O
a	O	O
class	O	O
or	O	O
package	O	O
in	O	O
a	O	O
jar	O	O
file	O	O
,	O	O
will	O	O
those	O	O
two	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
path	O	O
an	O	O
file	O	O
strings	O	O
)	O	O
differ	O	O
?	O	O
resource	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
give	O	O
you	O	O
jar	O	O
:	O	O
file	O	O
:	O	O
/	O	O
C	O	O
:	O	O
/	O	O
path	O	O
/	O	O
to	O	O
/	O	O
my	O	O
.	O	O
jar	O	O
!	O	O
/	O	O
com	O	O
/	O	O
example	O	O
/	O	O
,	O	O
after	O	O
all	O	O
(	O	O
note	O	O
the	O	O
exclamation	O	O
mark	O	O
)	O	O
.	O	O
Is	O	O
the	O	O
difference	O	O
between	O	O
URI	B-api_mention	O
and	O	O
URL	B-api_mention	B-api_mention
in	O	O
Java	O	O
that	O	O
the	O	O
former	O	O
doesn	O	O
'	O	O
t	O	O
encode	O	O
spaces	O	O
?	O	O
Cf	O	O
.	O	O
Files	O	O
,	O	O
URIs	O	O
,	O	O
and	O	O
URLs	O	O
conflicting	O	O
in	O	O
Java	O	O
(	O	O
This	O	O
answer	O	O
explains	O	O
the	O	O
general	O	O
,	O	O
conceptual	O	O
difference	O	O
between	O	O
the	O	O
two	O	O
terms	O	O
fairly	O	O
well	O	O
:	O	O
URIs	O	O
identify	O	O
and	O	O
URLs	O	O
locate	O	O
;	O	O
)	O	O
Lastly	O	O
-	O	O
and	O	O
most	O	O
importantly	O	O
-	O	O
why	O	O
do	O	O
I	O	O
need	O	O
File	B-api_mention	B-api_mention
object	O	O
;	O	O
why	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
Resource	B-api_mention	B-api_mention
(	O	I-api_mention
URL	B-api_mention	I-api_mention
)	O	I-api_mention
enough	O	O
?	O	O
(	O	O
And	O	O
is	O	O
there	O	O
a	O	O
Resource	B-api_mention	B-api_mention
object	O	O
?	O	O
)	O	O
Sorry	O	O
if	O	O
this	O	O
question	O	O
is	O	O
a	O	O
bit	O	O
unorganized	O	O
;	O	O
it	O	O
just	O	O
reflects	O	O
the	O	O
confusion	O	O
I	O	O
have	O	O
.	O	O
.	O	O
.	O	O
:	O	O
)	O	O
Question	O	O
-	O	O
20129762	O	O
In	O	O
Java	O	O
8	O	O
we	O	O
have	O	O
the	O	O
class	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
curiously	O	O
have	O	O
a	O	O
method	O	O
Iterator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
iterator	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
So	O	O
you	O	O
would	O	O
expect	O	O
it	O	O
to	O	O
implement	O	O
interface	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
requires	O	O
exactly	O	O
this	O	O
method	O	O
,	O	O
but	O	O
that	O	O
'	O	O
s	O	O
not	O	O
the	O	O
case	O	O
.	O	O
When	O	O
I	O	O
want	O	O
to	O	O
iterate	O	O
over	O	O
a	O	O
Stream	B-api_mention	B-api_mention
using	O	O
a	O	O
foreach	O	O
loop	O	O
,	O	O
I	O	O
have	O	O
to	O	O
do	O	O
something	O	O
like	O	O
#	O	O
pre	O	O
Am	O	O
I	O	O
missing	O	O
something	O	O
here	O	O
?	O	O
Question	O	O
-	O	O
32356762	O	O
,	O	O
answer	O	O
-	O	O
32370677	O	O
There	O	O
is	O	O
a	O	O
small	O	O
overhead	O	O
in	O	O
calling	O	O
methods	O	O
var	O	O
an	O	O
interface	O	O
rather	O	O
than	O	O
directly	O	O
on	O	O
an	O	O
object	O	O
.	O	O
This	O	O
overhead	O	O
is	O	O
often	O	O
no	O	O
more	O	O
than	O	O
1	O	O
or	O	O
2	O	O
processor	O	O
instructions	O	O
.	O	O
The	O	O
overhead	O	O
of	O	O
calling	O	O
a	O	O
method	O	O
is	O	O
even	O	O
lower	O	O
if	O	O
the	O	O
JIT	O	O
knows	O	O
that	O	O
the	O	O
method	O	O
is	O	O
final	O	O
.	O	O
This	O	O
is	O	O
not	O	O
measurable	O	O
for	O	O
most	O	O
code	O	O
you	O	O
and	O	O
me	O	O
right	O	O
,	O	O
but	O	O
for	O	O
the	O	O
low	O	O
level	O	O
methods	O	O
in	O	O
java	O	B-api_mention
.	O	I-api_mention
utils	O	I-api_mention
may	O	O
be	O	O
used	O	O
in	O	O
some	O	O
code	O	O
where	O	O
it	O	O
is	O	O
an	O	O
issue	O	O
.	O	O
Also	O	O
as	O	O
has	O	O
been	O	O
pointed	O	O
out	O	O
in	O	O
other	O	O
answers	O	O
,	O	O
the	O	O
concrete	O	O
type	O	O
of	O	O
the	O	O
object	O	O
that	O	O
is	O	O
return	O	O
(	O	O
even	O	O
when	O	O
hidden	O	O
behind	O	O
an	O	O
interface	O	O
)	O	O
effects	O	O
the	O	O
performance	O	O
of	O	O
code	O	O
that	O	O
uses	O	O
it	O	O
.	O	O
This	O	O
change	O	O
in	O	O
performance	O	O
can	O	O
be	O	O
very	O	O
great	O	O
,	O	O
so	O	O
such	O	O
an	O	O
extent	O	O
that	O	O
the	O	O
calling	O	O
software	O	O
fails	O	O
to	O	O
work	O	O
.	O	O
Clearly	O	O
the	O	O
authors	O	O
of	O	O
java	O	B-api_mention
.	O	I-api_mention
utils	O	I-api_mention
have	O	O
no	O	O
way	O	O
to	O	O
know	O	O
what	O	O
all	O	O
the	O	O
software	O	O
that	O	O
calls	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
with	O	O
the	O	O
result	O	O
and	O	O
no	O	O
way	O	O
to	O	O
re	O	O
-	O	O
test	O	O
this	O	O
software	O	O
if	O	O
they	O	O
change	O	O
the	O	O
implantation	O	O
of	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Therefore	O	O
they	O	O
are	O	O
not	O	O
going	O	O
to	O	O
change	O	O
the	O	O
implantation	O	O
of	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
return	O	O
a	O	O
different	O	O
type	O	O
of	O	O
List	B-api_mention	B-api_mention
,	O	O
even	O	O
if	O	O
the	O	O
type	O	O
system	O	O
allowed	O	O
it	O	O
!	O	O
When	O	O
writing	O	O
your	O	O
own	O	O
software	O	O
,	O	O
you	O	O
(	O	O
hopefully	O	O
)	O	O
have	O	O
automated	O	O
test	O	O
that	O	O
cover	O	O
all	O	O
your	O	O
code	O	O
and	O	O
a	O	O
good	O	O
understand	O	O
of	O	O
how	O	O
your	O	O
code	O	O
interrelates	O	O
include	O	O
know	O	O
where	O	O
performance	O	O
is	O	O
an	O	O
issue	O	O
.	O	O
Being	O	O
able	O	O
to	O	O
make	O	O
a	O	O
change	O	O
to	O	O
a	O	O
method	O	O
,	O	O
without	O	O
having	O	O
to	O	O
change	O	O
the	O	O
callers	O	O
is	O	O
of	O	O
great	O	O
value	O	O
while	O	O
the	O	O
design	O	O
of	O	O
the	O	O
software	O	O
is	O	O
changing	O	O
.	O	O
Therefore	O	O
the	O	O
two	O	O
set	O	O
of	O	O
trade	O	O
offs	O	O
are	O	O
very	O	O
different	O	O
.	O	O
Question	O	O
-	O	O
4576352	O	O
,	O	O
answer	O	O
-	O	O
4576367	O	O
using	O	O
public	O	O
String	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
work	O	O
usage	O	O
would	O	O
be	O	O
str	O	O
.	B-api_mention	B-api_mention
replace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
executing	O	O
StringLiteral	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
returns	O	O
:	O	O
lakjsdf	O	O
xx	O	O
Question	O	O
-	O	O
31270759	O	O
Exceptions	O	O
,	O	O
especially	O	O
checked	O	O
ones	O	O
,	O	O
can	O	O
severely	O	O
interrupt	O	O
the	O	O
flow	O	O
of	O	O
program	O	O
logic	O	O
when	O	O
the	O	O
FP	O	O
idiom	O	O
is	O	O
used	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
Here	O	O
is	O	O
an	O	O
arbitrary	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
above	O	O
code	O	O
breaks	O	O
when	O	O
there	O	O
'	O	O
s	O	O
an	O	O
exception	O	O
for	O	O
an	O	O
unparseable	O	O
string	O	O
.	O	O
But	O	O
say	O	O
I	O	O
just	O	O
want	O	O
to	O	O
replace	O	O
that	O	O
with	O	O
a	O	O
default	O	O
value	O	O
,	O	O
much	O	O
like	O	O
I	O	O
can	O	O
with	O	O
Optional	B-api_mention	B-api_mention
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Of	O	O
course	O	O
,	O	O
this	O	O
still	O	O
fails	O	O
because	O	O
Optional	B-api_mention	B-api_mention
only	O	O
handles	O	O
null	O	O
s	O	O
.	O	O
I	O	O
would	O	O
like	O	O
something	O	O
as	O	O
follows	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
:	O	O
this	O	O
is	O	O
a	O	O
self	O	O
-	O	O
answered	O	O
question	O	O
.	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
6271520	O	O
Try	O	O
using	O	O
this	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getCanonicalName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
this	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getSimpleName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
it	O	O
'	O	O
s	O	O
an	O	O
anonymous	O	O
class	O	O
,	O	O
use	O	O
this	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getSuperclass	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
5031614	O	O
,	O	O
answer	O	O
-	O	O
5103360	O	O
We	O	O
usually	O	O
have	O	O
two	O	O
IDs	O	O
in	O	O
our	O	O
entities	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
for	O	O
persistence	O	O
layer	O	O
only	O	O
(	O	O
so	O	O
that	O	O
persistence	O	O
provider	O	O
and	O	O
database	O	O
can	O	O
figure	O	O
out	O	O
relationships	O	O
between	O	O
objects	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Is	O	O
for	O	O
our	O	O
application	O	O
needs	O	O
(	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
particular	O	O
)	O	O
Take	O	O
a	O	O
look	O	O
:	O	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
to	O	O
clarify	O	O
my	O	O
point	O	O
regarding	O	O
calls	O	O
to	O	O
setUuid	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
a	O	O
typical	O	O
scenario	O	O
:	O	O
#	O	O
pre	O	O
When	O	O
I	O	O
run	O	O
my	O	O
tests	O	O
and	O	O
see	O	O
the	O	O
log	O	O
output	O	O
I	O	O
fix	O	O
the	O	O
problem	O	O
:	O	O
#	O	O
pre	O	O
Alternatively	O	O
,	O	O
one	O	O
can	O	O
provide	O	O
a	O	O
separate	O	O
constructor	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
my	O	O
example	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
use	O	O
a	O	O
default	O	O
constructor	O	O
and	O	O
a	O	O
setter	O	O
,	O	O
but	O	O
you	O	O
may	O	O
find	O	O
two	O	O
-	O	O
constructors	O	O
approach	O	O
more	O	O
suitable	O	O
for	O	O
you	O	O
.	O	O
Question	O	O
-	O	O
4812570	O	O
How	O	O
can	O	O
I	O	O
get	O	O
the	O	O
e	O	O
.	B-api_mention	B-api_mention
printStackTrace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
store	O	O
it	O	O
into	O	O
a	O	O
String	B-api_mention	B-api_mention
variable	O	O
?	O	O
I	O	O
want	O	O
to	O	O
use	O	O
the	O	O
string	O	O
generated	O	O
by	O	O
e	O	O
.	B-api_mention	B-api_mention
printStackTrace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
later	O	O
in	O	O
my	O	O
program	O	O
.	O	O
I	O	O
'	O	O
m	O	O
still	O	O
new	O	O
to	O	O
Java	O	O
so	O	O
I	O	O
'	O	O
m	O	O
not	O	O
too	O	O
familiar	O	O
with	O	O
StringWriter	B-api_mention	B-api_mention
that	O	O
I	O	O
think	O	O
will	O	O
be	O	O
the	O	O
solution	O	O
.	O	O
Or	O	O
if	O	O
you	O	O
have	O	O
any	O	O
other	O	O
ideas	O	O
please	O	O
let	O	O
me	O	O
know	O	O
.	O	O
Thanks	O	O
Question	O	O
-	O	O
31316581	O	O
,	O	O
answer	O	O
-	O	O
31327420	O	O
If	O	O
type	O	O
inference	O	O
produces	O	O
a	O	O
single	O	O
upper	O	O
bound	O	O
for	O	O
a	O	O
type	O	O
variable	O	O
,	O	O
typically	O	O
the	O	O
upper	O	O
bound	O	O
is	O	O
chosen	O	O
as	O	O
the	O	O
solution	O	O
.	O	O
For	O	O
example	O	O
,	O	O
if	O	O
T	O	O
<	O	O
<	O	O
Number	O	O
,	O	O
the	O	O
solution	O	O
is	O	O
T	O	O
=	O	O
Number	O	O
.	O	O
Although	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
etc	O	O
.	O	O
could	O	O
also	O	O
satisfy	O	O
the	O	O
constraint	O	O
,	O	O
there	O	O
'	O	O
s	O	O
no	O	O
good	O	O
reason	O	O
to	O	O
choose	O	O
them	O	O
over	O	O
Number	B-api_mention	O
.	O	O
That	O	O
was	O	O
also	O	O
the	O	O
case	O	O
for	O	O
throws	O	O
T	O	O
in	O	O
java	O	O
5	O	O
-	O	O
7	O	O
:	O	O
T	O	O
<	O	O
<	O	O
Throwable	B-api_mention	O
=	O	O
>	O	O
T	O	O
=	O	O
Throwable	B-api_mention	O
.	O	O
(	O	O
Sneaky	O	O
throw	O	O
solutions	O	O
all	O	O
had	O	O
explicit	O	O
<	O	O
RuntimeException	B-api_mention	O
>	O	O
type	O	O
arguments	O	O
,	O	O
otherwise	O	O
<	O	O
Throwable	O	O
>	O	O
is	O	O
inferred	O	O
.	O	O
)	O	O
In	O	O
java8	O	O
,	O	O
with	O	O
the	O	O
introduction	O	O
of	O	O
lambda	O	O
,	O	O
this	O	O
becomes	O	O
problematic	O	O
.	O	O
Consider	O	O
this	O	O
case	O	O
#	O	O
pre	O	O
If	O	O
we	O	O
invoke	O	O
with	O	O
an	O	O
empty	O	O
lambda	O	O
,	O	O
what	O	O
would	O	O
T	O	O
be	O	O
inferred	O	O
as	O	O
?	O	O
invoke	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
only	O	O
constraint	O	O
on	O	O
T	O	O
is	O	O
an	O	O
upper	O	O
bound	O	O
Throwable	B-api_mention	O
.	O	O
In	O	O
earlier	O	O
stage	O	O
of	O	O
java8	O	O
,	O	O
T	O	O
=	O	O
Throwable	B-api_mention	O
would	O	O
be	O	O
inferred	O	O
.	O	O
See	O	O
this	O	O
report	O	O
I	O	O
filed	O	O
.	O	O
But	O	O
that	O	O
is	O	O
pretty	O	O
silly	O	O
,	O	O
to	O	O
infer	O	O
Throwable	B-api_mention	O
,	O	O
a	O	O
checked	O	O
exception	O	O
,	O	O
out	O	O
of	O	O
an	O	O
empty	O	O
block	O	O
.	O	O
A	O	O
solution	O	O
was	O	O
proposed	O	O
in	O	O
the	O	O
report	O	O
(	O	O
which	O	O
is	O	O
apparently	O	O
adopted	O	O
by	O	O
JLS	O	O
)	O	O
-	O	O
#	O	O
pre	O	O
i	O	O
.	O	O
e	O	O
.	O	O
if	O	O
the	O	O
upper	O	O
bound	O	O
is	O	O
Exception	B-api_mention	B-api_mention
or	O	O
Throwable	B-api_mention	B-api_mention
,	O	O
choose	O	O
RuntimeException	B-api_mention	B-api_mention
as	O	O
the	O	O
solution	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
there	O	O
is	O	O
a	O	O
good	O	O
reason	O	O
to	O	O
choose	O	O
a	O	O
particular	O	O
subtype	O	O
of	O	O
the	O	O
upper	O	O
bound	O	O
.	O	O
Question	O	O
-	O	O
12576156	O	O
,	O	O
answer	O	O
-	O	O
12576394	O	O
By	O	O
specifying	O	O
the	O	O
the	O	O
my	O	O
.	O	O
list	O	O
.	O	O
of	O	O
.	O	O
strings	O	O
=	O	O
ABC	O	O
,	O	O
CDE	O	O
,	O	O
EFG	O	O
in	O	O
.	O	O
properties	O	O
file	O	O
and	O	O
using	O	O
@	O	O
Value	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
private	O	O
String	O	B-api_mention
[	O	O
]	O	O
myString	O	O
;	O	O
You	O	O
can	O	O
get	O	O
the	O	O
arrays	O	O
of	O	O
strings	O	O
.	O	O
And	O	O
using	O	O
CollectionUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
addAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
can	O	O
get	O	O
the	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
Question	O	O
-	O	O
5778658	O	O
,	O	O
answer	O	O
-	O	O
5778863	O	O
An	O	O
OutputStream	B-api_mention	B-api_mention
is	O	O
one	O	O
where	O	O
you	O	O
write	O	O
data	O	O
to	O	O
.	O	O
If	O	O
some	O	O
module	O	O
exposes	O	O
an	O	O
OutputStream	B-api_mention	B-api_mention
,	O	O
the	O	O
expectation	O	O
is	O	O
that	O	O
there	O	O
is	O	O
something	O	O
at	O	O
the	O	O
other	O	O
end	O	O
that	O	O
is	O	O
reading	O	O
.	O	O
Something	O	O
that	O	O
exposes	O	O
an	O	O
InputStream	B-api_mention	B-api_mention
on	O	O
the	O	O
other	O	O
hand	O	O
is	O	O
indicating	O	O
that	O	O
you	O	O
will	O	O
need	O	O
to	O	O
listen	O	O
to	O	O
this	O	O
stream	O	O
,	O	O
and	O	O
there	O	O
will	O	O
be	O	O
data	O	O
that	O	O
you	O	O
can	O	O
read	O	O
.	O	O
So	O	O
it	O	O
is	O	O
possible	O	O
to	O	O
connect	O	O
an	O	O
InputStream	B-api_mention	B-api_mention
to	O	O
an	O	O
OutputStream	B-api_mention	B-api_mention
InputStream	I-api_mention	O
-	O	O
-	O	O
-	O	O
-	O	O
read	O	O
-	O	O
-	O	O
-	O	O
>	O	O
intermediateBytes	O	O
[	O	O
n	O	O
]	O	O
-	O	O
-	O	O
-	O	O
-	O	O
write	O	O
-	O	O
-	O	O
-	O	O
-	O	O
>	O	O
OutputStream	B-api_mention	O
As	O	O
someone	O	O
metioned	O	O
,	O	O
this	O	O
is	O	O
what	O	O
the	O	O
copy	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
from	O	O
IOUtils	B-api_mention	O
lets	O	O
you	O	O
do	O	O
.	O	O
It	O	O
does	O	O
not	O	O
make	O	O
sense	O	O
to	O	O
go	O	O
the	O	O
other	O	O
way	O	O
.	O	O
.	O	O
.	O	O
hopefully	O	O
this	O	O
makes	O	O
some	O	O
sense	O	O
UPDATE	O	O
:	O	O
Of	O	O
course	O	O
the	O	O
more	O	O
I	O	O
think	O	O
of	O	O
this	O	O
,	O	O
the	O	O
more	O	O
I	O	O
can	O	O
see	O	O
how	O	O
this	O	O
actually	O	O
would	O	O
be	O	O
a	O	O
requirement	O	O
.	O	O
I	O	O
know	O	O
some	O	O
of	O	O
the	O	O
comments	O	O
mentioned	O	O
Piped	O	O
input	O	O
/	O	O
ouput	O	O
streams	O	O
,	O	O
but	O	O
there	O	O
is	O	O
another	O	O
possibility	O	O
.	O	O
If	O	O
the	O	O
output	O	O
stream	O	O
that	O	O
is	O	O
exposed	O	O
is	O	O
a	O	O
ByteArrayOutputStream	B-api_mention	B-api_mention
,	O	O
then	O	O
you	O	O
can	O	O
always	O	O
get	O	O
the	O	O
full	O	O
contents	O	O
by	O	O
calling	O	O
the	O	O
toByteArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Then	O	O
you	O	O
can	O	O
create	O	O
an	O	O
input	O	O
stream	O	O
wrapper	O	O
by	O	O
using	O	O
the	O	O
ByteArrayInputStream	B-api_mention	B-api_mention
sub	O	O
-	O	O
class	O	O
.	O	O
These	O	O
two	O	O
are	O	O
pseudo	O	O
-	O	O
streams	O	O
,	O	O
they	O	O
both	O	O
basically	O	O
just	O	O
wrap	O	O
an	O	O
array	O	O
of	O	O
bytes	O	O
.	O	O
Using	O	O
the	O	O
streams	O	O
this	O	O
way	O	O
,	O	O
therefore	O	O
,	O	O
is	O	O
technically	O	O
possible	O	O
,	O	O
but	O	O
to	O	O
me	O	O
it	O	O
is	O	O
still	O	O
very	O	O
strange	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
20001427	O	O
,	O	O
answer	O	O
-	O	O
20001866	O	O
Usually	O	O
,	O	O
one	O	O
would	O	O
call	O	O
the	O	O
reduce	O	O
method	O	O
using	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
requires	O	O
a	O	O
lot	O	O
of	O	O
syntax	O	O
for	O	O
just	O	O
calling	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
.	O	O
That	O	O
'	O	O
s	O	O
where	O	O
lambda	O	O
expressions	O	O
come	O	O
into	O	O
play	O	O
.	O	O
Since	O	O
Java	O	O
8	O	O
it	O	O
is	O	O
allowed	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
in	O	O
a	O	O
much	O	O
shorter	O	O
way	O	O
:	O	O
reduce	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
How	O	O
does	O	O
this	O	O
work	O	O
?	O	O
The	O	O
java	O	O
compiler	O	O
"	O	O
detects	O	O
"	O	O
,	O	O
that	O	O
you	O	O
want	O	O
to	O	O
implement	O	O
a	O	O
method	O	O
that	O	O
accepts	O	O
two	O	O
int	O	O
s	O	O
and	O	O
returns	O	O
one	O	O
int	O	O
.	O	O
This	O	O
is	O	O
equivalent	O	O
to	O	O
the	O	O
formal	O	O
parameters	O	O
of	O	O
the	O	O
one	O	O
and	O	O
only	O	O
method	O	O
of	O	O
interface	O	O
IntBinaryOperator	B-api_mention	B-api_mention
(	O	O
the	O	O
parameter	O	O
of	O	O
method	O	O
reduce	O	O
you	O	O
want	O	O
to	O	O
call	O	O
)	O	O
.	O	O
So	O	O
the	O	O
compiler	O	O
does	O	O
the	O	O
rest	O	O
for	O	O
you	O	O
-	O	O
it	O	O
just	O	O
assumes	O	O
you	O	O
want	O	O
to	O	O
implement	O	O
IntBinaryOperator	B-api_mention	B-api_mention
.	O	O
But	O	O
as	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
itself	O	O
fulfills	O	O
the	O	O
formal	O	O
requirements	O	O
of	O	O
IntBinaryOperator	B-api_mention	B-api_mention
,	O	O
it	O	O
can	O	O
be	O	O
used	O	O
directly	O	O
.	O	O
Because	O	O
Java	O	O
7	O	O
does	O	O
not	O	O
have	O	O
any	O	O
syntax	O	O
that	O	O
allows	O	O
a	O	O
method	O	O
itself	O	O
to	O	O
be	O	O
passed	O	O
as	O	O
an	O	O
argument	O	O
(	O	O
you	O	O
can	O	O
only	O	O
pass	O	O
method	O	O
results	O	O
,	O	O
but	O	O
never	O	O
method	O	O
references	O	O
)	O	O
,	O	O
the	O	O
:	O	O
:	O	O
syntax	O	O
was	O	O
introduced	O	O
in	O	O
Java	O	O
8	O	O
to	O	O
reference	O	O
methods	O	O
:	O	O
reduce	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
that	O	O
this	O	O
will	O	O
be	O	O
interpreted	O	O
by	O	O
the	O	O
compiler	O	O
,	O	O
not	O	O
by	O	O
the	O	O
JVM	O	O
at	O	O
runtime	O	O
!	O	O
Although	O	O
it	O	O
produces	O	O
different	O	O
bytecodes	O	O
for	O	O
all	O	O
three	O	O
code	O	O
snippets	O	O
,	O	O
they	O	O
are	O	O
semantically	O	O
equal	O	O
,	O	O
so	O	O
the	O	O
last	O	O
two	O	O
can	O	O
be	O	O
considered	O	O
to	O	O
be	O	O
short	O	O
(	O	O
and	O	O
probably	O	O
more	O	O
efficient	O	O
)	O	O
versions	O	O
of	O	O
the	O	O
IntBinaryOperator	B-api_mention	B-api_mention
implementation	O	O
above	O	O
!	O	O
(	O	O
See	O	O
also	O	O
Translation	O	O
of	O	O
Lambda	O	B-api_mention
Expressions	O	O
)	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
29000802	O	O
There	O	O
is	O	O
a	O	O
third	O	O
option	O	O
-	O	O
using	O	O
stream	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	B-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
see	O	O
comments	O	O
under	O	O
why	O	O
didn	O	O
'	O	O
t	O	O
stream	O	O
have	O	O
a	O	O
toList	B-api_mention	B-api_mention
method	O	O
.	O	O
It	O	O
turns	O	O
out	O	O
to	O	O
be	O	O
slower	O	O
than	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
less	O	O
expressive	O	O
.	O	O
It	O	O
might	O	O
be	O	O
optimised	O	O
in	O	O
later	O	O
JDK	O	O
builds	O	O
,	O	O
so	O	O
adding	O	O
it	O	O
here	O	O
just	O	O
in	O	O
case	O	O
.	O	O
assuming	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myFinalList	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
with	O	O
a	O	O
micro	O	O
-	O	O
micro	O	O
benchmark	O	O
,	O	O
1M	O	O
entries	O	O
,	O	O
20	O	O
%	O	O
nulls	O	O
and	O	O
simple	O	O
transform	O	O
in	O	O
doSomething	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
#	O	O
pre	O	O
the	O	O
results	O	O
are	O	O
parallel	O	O
:	O	O
#	O	O
pre	O	O
sequential	O	O
:	O	O
#	O	O
pre	O	O
parallel	O	O
without	O	O
nulls	O	O
and	O	O
filter	O	O
(	O	O
so	O	O
the	O	O
stream	O	O
is	O	O
SIZED	O	O
)	O	O
:	O	O
toArrays	B-api_mention	O
has	O	O
the	O	O
best	O	O
performance	O	O
in	O	O
such	O	O
case	O	O
,	O	O
and	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
fails	O	O
with	O	O
"	O	O
indexOutOfBounds	O	O
"	O	O
on	O	O
the	O	O
recepient	O	O
ArrayList	B-api_mention	B-api_mention
,	O	O
had	O	O
to	O	O
replace	O	O
with	O	O
.	B-api_mention	B-api_mention
forEachOrdered	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
pre	O	O
Question	O	O
-	O	O
13291076	O	O
,	O	O
answer	O	O
-	O	O
13291108	O	O
Use	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
you	O	O
want	O	O
to	O	O
make	O	O
a	O	O
comparison	O	O
or	O	O
use	O	O
the	O	O
hardcoded	O	O
value	O	O
for	O	O
some	O	O
internal	O	O
use	O	O
in	O	O
your	O	O
code	O	O
.	O	O
Use	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
you	O	O
want	O	O
to	O	O
present	O	O
information	O	O
to	O	O
a	O	O
user	O	O
(	O	O
including	O	O
a	O	O
developper	O	O
looking	O	O
at	O	O
a	O	O
log	O	O
)	O	O
.	O	O
Never	O	O
rely	O	O
in	O	O
your	O	O
code	O	O
on	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
giving	O	O
a	O	O
specific	O	O
value	O	O
.	O	O
Never	O	O
test	O	O
it	O	O
against	O	O
a	O	O
specific	O	O
string	O	O
.	O	O
If	O	O
your	O	O
code	O	O
breaks	O	O
when	O	O
someone	O	O
correctly	O	O
changes	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
return	O	O
,	O	O
then	O	O
it	O	O
was	O	O
already	O	O
broken	O	O
.	O	O
From	O	O
the	O	O
javadoc	O	O
(	O	O
emphasis	O	O
mine	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
11821801	O	O
,	O	O
answer	O	O
-	O	O
36827191	O	O
From	O	O
oracle	O	O
documentation	O	O
page	O	O
about	O	O
ReentrantLock	B-api_mention	B-api_mention
:	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
A	O	O
ReentrantLock	B-api_mention	B-api_mention
is	O	O
owned	O	O
by	O	O
the	O	O
thread	O	O
last	O	O
successfully	O	O
locking	O	O
,	O	O
but	O	O
not	O	O
yet	O	O
unlocking	O	O
it	O	O
.	O	O
A	O	O
thread	O	O
invoking	O	O
lock	O	O
will	O	O
return	O	O
,	O	O
successfully	O	O
acquiring	O	O
the	O	O
lock	O	O
,	O	O
when	O	O
the	O	O
lock	O	O
is	O	O
not	O	O
owned	O	O
by	O	O
another	O	O
thread	O	O
.	O	O
The	O	O
method	O	O
will	O	O
return	O	O
immediately	O	O
if	O	O
the	O	O
current	O	O
thread	O	O
already	O	O
owns	O	O
the	O	O
lock	O	O
.	O	O
#	O	O
li	O	O
The	O	O
constructor	O	O
for	O	O
this	O	O
class	O	O
accepts	O	O
an	O	O
optional	O	O
fairness	O	O
parameter	O	O
.	O	O
When	O	O
set	O	O
true	O	O
,	O	O
under	O	O
contention	O	O
,	O	O
locks	O	O
favor	O	O
granting	O	O
access	O	O
to	O	O
the	O	O
longest	O	O
-	O	O
waiting	O	O
thread	O	O
.	O	O
Otherwise	O	O
this	O	O
lock	O	O
does	O	O
not	O	O
guarantee	O	O
any	O	O
particular	O	O
access	O	O
order	O	O
.	O	O
ReentrantLock	B-api_mention	B-api_mention
key	O	O
features	O	O
as	O	O
per	O	O
this	O	O
article	O	O
#	O	O
li	O	O
Ability	O	O
to	O	O
lock	O	O
interruptibly	O	O
.	O	O
#	O	O
li	O	O
Ability	O	O
to	O	O
timeout	O	O
while	O	O
waiting	O	O
for	O	O
lock	O	O
.	O	O
#	O	O
li	O	O
Power	O	O
to	O	O
create	O	O
fair	O	O
lock	O	O
.	O	O
#	O	O
li	O	O
API	O	O
to	O	O
get	O	O
list	O	O
of	O	O
waiting	O	O
thread	O	O
for	O	O
lock	O	O
.	O	O
#	O	O
li	O	O
Flexibility	O	O
to	O	O
try	O	O
for	O	O
lock	O	O
without	O	O
blocking	O	O
.	O	O
You	O	O
can	O	O
use	O	O
ReentrantReadWriteLock	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ReadLock	I-api_mention	I-api_mention
,	O	O
ReentrantReadWriteLock	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
WriteLock	I-api_mention	I-api_mention
to	O	O
further	O	O
acquire	O	O
control	O	O
on	O	O
granular	O	O
locking	O	O
on	O	O
read	O	O
and	O	O
write	O	O
operations	O	O
.	O	O
Have	O	O
a	O	O
look	O	O
at	O	O
this	O	O
article	O	O
by	O	O
Benjamen	O	O
on	O	O
usage	O	O
of	O	O
different	O	O
type	O	O
of	O	O
ReentrantLocks	B-api_mention	B-api_mention
Question	O	O
-	O	O
8098953	O	O
,	O	O
answer	O	O
-	O	O
8103083	O	O
The	O	O
first	O	O
thing	O	O
to	O	O
keep	O	O
in	O	O
mind	O	O
is	O	O
that	O	O
Java	O	O
ternary	O	O
operators	O	O
have	O	O
a	O	O
"	O	O
type	O	O
"	O	O
,	O	O
and	O	O
that	O	O
this	O	O
is	O	O
what	O	O
the	O	O
compiler	O	O
will	O	O
determine	O	O
and	O	O
consider	O	O
no	O	O
matter	O	O
what	O	O
the	O	O
actual	O	O
/	O	O
real	O	O
types	O	O
of	O	O
the	O	O
second	O	O
or	O	O
third	O	O
parameter	O	O
are	O	O
.	O	O
Depending	O	O
on	O	O
several	O	O
factors	O	O
the	O	O
ternary	O	O
operator	O	O
type	O	O
is	O	O
determined	O	O
in	O	O
different	O	O
ways	O	O
as	O	O
illustrated	O	O
in	O	O
the	O	O
Java	O	O
Language	O	O
Specification	O	O
15	O	O
.	O	O
26	O	O
In	O	O
the	O	O
question	O	O
above	O	O
we	O	O
should	O	O
consider	O	O
the	O	O
last	O	O
case	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
by	O	O
far	O	O
the	O	O
most	O	O
complex	O	O
case	O	O
once	O	O
you	O	O
take	O	O
a	O	O
look	O	O
at	O	O
applying	O	O
capture	O	O
conversion	O	O
(	O	O
Â§	O	O
5	O	O
.	O	O
1	O	O
.	O	O
10	O	O
)	O	O
and	O	O
most	O	O
of	O	O
all	O	O
at	O	O
lub	O	O
(	O	O
T1	O	O
,	O	O
T2	O	O
)	O	O
.	O	O
In	O	O
plain	O	O
English	O	O
and	O	O
after	O	O
an	O	O
extreme	O	O
simplification	O	O
we	O	O
can	O	O
describe	O	O
the	O	O
process	O	O
as	O	O
calculating	O	O
the	O	O
"	O	O
Least	O	O
Common	O	O
Superclass	O	O
"	O	O
(	O	O
yes	O	O
,	O	O
think	O	O
of	O	O
the	O	O
LCM	O	O
)	O	O
of	O	O
the	O	O
second	O	O
and	O	O
third	O	O
parameters	O	O
.	O	O
This	O	O
will	O	O
give	O	O
us	O	O
the	O	O
ternary	O	O
operator	O	O
"	O	O
type	O	O
"	O	O
.	O	O
Again	O	O
,	O	O
what	O	O
I	O	O
just	O	O
said	O	O
is	O	O
an	O	O
extreme	O	O
simplification	O	O
(	O	O
consider	O	O
classes	O	O
that	O	O
implement	O	O
multiple	O	O
common	O	O
interfaces	O	O
)	O	O
.	O	O
For	O	O
example	O	O
,	O	O
if	O	O
you	O	O
try	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
'	O	O
ll	O	O
notice	O	O
that	O	O
resulting	O	O
type	O	O
of	O	O
the	O	O
conditional	O	O
expression	O	O
is	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
since	O	O
it	O	O
'	O	O
s	O	O
the	O	O
"	O	O
Least	O	O
Common	O	O
Superclass	O	O
"	O	O
for	O	O
the	O	O
Timestamp	B-api_mention	O
/	O	O
Time	B-api_mention	O
pair	O	O
.	O	O
Since	O	O
null	O	O
can	O	O
be	O	O
autoboxed	O	O
to	O	O
anything	O	O
,	O	O
the	O	O
"	O	O
Least	O	O
Common	O	O
Superclass	O	O
"	O	O
is	O	O
the	O	O
Integer	O	B-api_mention
class	O	O
and	O	O
this	O	O
will	O	O
be	O	O
the	O	O
return	O	O
type	O	O
of	O	O
the	O	O
conditional	O	O
expression	O	O
(	O	O
ternary	O	O
operator	O	O
)	O	O
above	O	O
.	O	O
The	O	O
return	O	O
value	O	O
will	O	O
then	O	O
be	O	O
a	O	O
null	O	O
pointer	O	O
of	O	O
type	O	O
Integer	B-api_mention	B-api_mention
and	O	O
that	O	O
is	O	O
what	O	O
will	O	O
be	O	O
returned	O	O
by	O	O
the	O	O
ternary	O	O
operator	O	O
.	O	O
At	O	O
runtime	O	O
,	O	O
when	O	O
the	O	O
Java	O	O
Virtual	O	O
Machine	O	O
unboxes	O	O
the	O	O
Integer	B-api_mention	B-api_mention
a	O	O
NullPointerException	B-api_mention	B-api_mention
is	O	O
thrown	O	O
.	O	O
This	O	O
happens	O	O
because	O	O
the	O	O
JVM	O	O
attempts	O	O
to	O	O
invoke	O	O
the	O	O
function	O	O
null	O	O
.	B-api_mention	B-api_mention
intValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
where	O	O
null	O	O
is	O	O
the	O	O
result	O	O
of	O	O
autoboxing	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
(	O	O
and	O	O
since	O	O
my	O	O
opinion	O	O
is	O	O
not	O	O
in	O	O
the	O	O
Java	O	O
Language	O	O
Specification	O	O
many	O	O
people	O	O
will	O	O
find	O	O
it	O	O
wrong	O	O
anyway	O	O
)	O	O
the	O	O
compiler	O	O
does	O	O
a	O	O
poor	O	O
job	O	O
in	O	O
evaluating	O	O
the	O	O
expression	O	O
in	O	O
your	O	O
question	O	O
.	O	O
Given	O	O
that	O	O
you	O	O
wrote	O	O
true	O	O
?	O	O
param1	O	O
:	O	O
param2	O	O
the	O	O
compiler	O	O
should	O	O
determine	O	O
right	O	O
away	O	O
that	O	O
the	O	O
first	O	O
parameter	O	O
-	O	O
null	O	O
-	O	O
will	O	O
be	O	O
returned	O	O
and	O	O
it	O	O
should	O	O
generate	O	O
a	O	O
compiler	O	O
error	O	O
.	O	O
This	O	O
is	O	O
somewhat	O	O
similar	O	O
to	O	O
when	O	O
you	O	O
write	O	O
while	O	O
(	O	O
args	O	O
)	O	O
{	O	O
}	O	O
etc	O	O
.	O	O
.	O	O
.	O	O
and	O	O
the	O	O
compiler	O	O
complains	O	O
about	O	O
the	O	O
code	O	O
underneath	O	O
the	O	O
loop	O	O
and	O	O
flags	O	O
it	O	O
with	O	O
Unreachable	O	B-api_mention
Statements	O	O
.	O	O
Your	O	O
second	O	O
case	O	O
is	O	O
pretty	O	O
straightforward	O	O
and	O	O
this	O	O
answer	O	O
is	O	O
already	O	O
too	O	O
long	O	O
.	O	O
.	O	O
.	O	O
;	O	O
)	O	O
CORRECTION	O	O
:	O	O
After	O	O
another	O	O
analysis	O	O
I	O	O
believe	O	O
that	O	O
I	O	O
was	O	O
wrong	O	O
to	O	O
say	O	O
that	O	O
a	O	O
null	O	O
value	O	O
can	O	O
be	O	O
boxed	O	O
/	O	O
autoboxed	O	O
to	O	O
anything	O	O
.	O	O
Talking	O	O
about	O	O
the	O	O
class	O	O
Integer	O	B-api_mention
,	O	O
explicit	O	O
boxing	O	O
consists	O	O
in	O	O
invoking	O	O
the	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
constructor	O	O
or	O	O
maybe	O	O
the	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
(	O	O
I	O	O
found	O	O
this	O	O
version	O	O
somewhere	O	O
)	O	O
.	O	O
The	O	O
former	O	O
would	O	O
throw	O	O
a	O	O
NumberFormatException	B-api_mention	B-api_mention
(	O	O
and	O	O
this	O	O
does	O	O
not	O	O
happen	O	O
)	O	O
while	O	O
the	O	O
second	O	O
would	O	O
just	O	O
not	O	O
make	O	O
sense	O	O
since	O	O
an	O	O
int	O	O
cannot	O	O
be	O	O
null	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
21488056	O	O
,	O	O
answer	O	O
-	O	O
35074360	O	O
I	O	O
have	O	O
written	O	O
a	O	O
complete	O	O
utility	O	O
class	O	O
(	O	O
inspired	O	O
by	O	O
Askar	O	O
'	O	O
s	O	O
proposal	O	O
)	O	O
that	O	O
can	O	O
take	O	O
Java	O	O
8	O	O
lambda	O	O
expression	O	O
and	O	O
turn	O	O
them	O	O
(	O	O
if	O	O
applicable	O	O
)	O	O
into	O	O
any	O	O
typed	O	O
standard	O	O
Java	O	O
8	O	O
lambda	O	O
defined	O	O
in	O	O
the	O	O
package	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
.	O	O
You	O	O
can	O	O
for	O	O
example	O	O
do	O	O
:	O	O
#	O	O
li	O	O
asPredicate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
negate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
asBiPredicate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
negate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Because	O	O
there	O	O
would	O	O
be	O	O
numerous	O	O
ambiguities	O	O
if	O	O
all	O	O
the	O	O
static	O	O
methods	O	O
would	O	O
be	O	O
named	O	O
just	O	O
as	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
,	O	O
I	O	O
opted	O	O
to	O	O
call	O	O
the	O	O
method	O	O
"	O	O
as	O	O
"	O	O
followed	O	O
by	O	O
the	O	O
returned	O	O
type	O	O
.	O	O
This	O	O
gives	O	O
us	O	O
full	O	O
control	O	O
of	O	O
the	O	O
lambda	O	O
interpretation	O	O
.	O	O
Below	O	O
is	O	O
the	O	O
first	O	O
part	O	O
of	O	O
the	O	O
(	O	O
somewhat	O	O
large	O	O
)	O	O
utility	O	O
class	O	O
revealing	O	O
the	O	O
pattern	O	O
used	O	O
.	O	O
Have	O	O
a	O	O
look	O	O
at	O	O
the	O	O
complete	O	O
class	O	O
here	O	O
(	O	O
at	O	O
gist	O	O
)	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
26548660	O	O
,	O	O
answer	O	O
-	O	O
26548894	O	O
You	O	O
can	O	O
use	O	O
a	O	O
Callback	B-api_mention	B-api_mention
to	O	O
get	O	O
onSuccess	B-api_mention	O
and	O	O
onError	B-api_mention	B-api_mention
events	O	O
.	O	O
Just	O	O
add	O	O
a	O	O
new	O	O
Callback	B-api_mention	B-api_mention
to	O	O
your	O	O
request	O	O
like	O	O
so	O	O
:	O	O
Picasso	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
with	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
load	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
into	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Then	O	O
you	O	O
can	O	O
perform	O	O
any	O	O
alterations	O	O
and	O	O
modifications	O	O
in	O	O
the	O	O
onSuccess	B-api_mention	O
callback	O	O
.	O	O
Question	O	O
-	O	O
22694884	O	O
,	O	O
answer	O	O
-	O	O
22695031	O	O
Technically	O	O
there	O	O
'	O	O
s	O	O
an	O	O
ugly	O	O
'	O	O
workaround	O	O
'	O	O
that	O	O
involves	O	O
peek	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
an	O	O
AtomicInteger	B-api_mention	B-api_mention
,	O	O
but	O	O
really	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
be	O	O
using	O	O
that	O	O
.	O	O
What	O	O
I	O	O
do	O	O
in	O	O
these	O	O
cases	O	O
is	O	O
just	O	O
collecting	O	O
it	O	O
in	O	O
a	O	O
list	O	O
,	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
am	O	O
not	O	O
aware	O	O
of	O	O
a	O	O
way	O	O
to	O	O
do	O	O
this	O	O
in	O	O
the	O	O
API	O	O
,	O	O
meanwhile	O	O
I	O	O
will	O	O
work	O	O
on	O	O
another	O	O
example	O	O
involving	O	O
a	O	O
custom	O	O
element	O	O
.	O	O
Update	O	O
,	O	O
You	O	O
should	O	O
create	O	O
your	O	O
own	O	O
Collector	B-api_mention	B-api_mention
for	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
What	O	O
it	O	O
does	O	O
is	O	O
:	O	O
#	O	O
li	O	O
It	O	O
mimicks	O	O
the	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
collector	O	O
.	O	O
#	O	O
li	O	O
It	O	O
applies	O	O
an	O	O
extra	O	O
finisher	O	O
at	O	O
the	O	O
end	O	O
,	O	O
that	O	O
throws	O	O
an	O	O
exception	O	O
,	O	O
or	O	O
if	O	O
no	O	O
exception	O	O
,	O	O
returns	O	O
the	O	O
first	O	O
element	O	O
of	O	O
the	O	O
list	O	O
.	O	O
Used	O	O
as	O	O
:	O	O
User	B-api_mention	B-api_mention
resultUser	O	O
=	O	O
users	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
can	O	O
then	O	O
customize	O	O
this	O	O
singletonCollector	B-api_mention	O
as	O	O
much	O	O
as	O	O
you	O	O
want	O	O
,	O	O
for	O	O
example	O	O
give	O	O
the	O	O
exception	O	O
as	O	O
argument	O	O
in	O	O
the	O	O
constructor	O	O
,	O	O
tweak	O	O
it	O	O
to	O	O
allow	O	O
two	O	O
values	O	O
,	O	O
and	O	O
more	O	O
.	O	O
New	O	O
update	O	O
,	O	O
I	O	O
revised	O	O
my	O	O
old	O	O
answer	O	O
once	O	O
more	O	O
for	O	O
singletonCollector	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
it	O	O
can	O	O
actually	O	O
be	O	O
obtained	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276469	O	O
It	O	O
will	O	O
be	O	O
fine	O	O
if	O	O
you	O	O
only	O	O
close	O	O
the	O	O
last	O	O
stream	O	O
-	O	O
the	O	O
close	O	O
call	O	O
will	O	O
be	O	O
send	O	O
to	O	O
the	O	O
underlying	O	O
streams	O	O
,	O	O
too	O	O
.	O	O

