Question	O	O
-	O	O
23114015	O	O
,	O	O
answer	O	O
-	O	O
32874755	O	O
If	O	O
you	O	O
know	O	O
the	O	O
size	O	O
you	O	O
could	O	O
use	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collection	I-api_mention	I-api_mention
which	O	O
provides	O	O
the	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
then	O	O
:	O	O
new	O	O
Hand	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
I	O	O
faced	O	O
the	O	O
same	O	O
problem	O	O
and	O	O
was	O	O
surprised	O	O
that	O	O
my	O	O
Iterable	B-api_mention	B-api_mention
implementation	O	O
could	O	O
be	O	O
very	O	O
easily	O	O
extended	O	O
to	O	O
an	O	O
AbstractCollection	B-api_mention	B-api_mention
implementation	O	O
by	O	O
simply	O	O
adding	O	O
the	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
(	O	O
luckily	O	O
I	O	O
had	O	O
the	O	O
size	O	O
of	O	O
the	O	O
collection	O	O
:	O	O
-	O	O
)	O	O
You	O	O
should	O	O
also	O	O
consider	O	O
to	O	O
override	O	O
Spliterator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
spliterator	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
29229373	O	O
,	O	O
answer	O	O
-	O	O
29230939	O	O
When	O	O
looking	O	O
into	O	O
the	O	O
implementation	O	O
(	O	O
ReferencePipeline	O	B-api_mention
.	O	I-api_mention
java	O	I-api_mention
)	O	I-api_mention
we	O	O
see	O	O
the	O	O
method	O	O
[	O	O
link	O	O
]	O	O
#	O	O
pre	O	O
which	O	O
will	O	O
be	O	O
invoke	O	O
for	O	O
findFirst	B-api_mention	B-api_mention
operation	O	O
.	O	O
The	O	O
special	O	O
thing	O	O
to	O	O
take	O	O
care	O	O
about	O	O
is	O	O
the	O	O
sink	O	O
.	B-api_mention	B-api_mention
cancellationRequested	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
allows	O	O
to	O	O
end	O	O
the	O	O
loop	O	O
on	O	O
the	O	O
first	O	O
match	O	O
.	O	O
Compare	O	O
to	O	O
[	O	O
link	O	O
]	O	O
#	O	O
pre	O	O
The	O	O
method	O	O
for	O	O
advancing	O	O
one	O	O
item	O	O
ends	O	O
up	O	O
calling	O	O
forEach	B-api_mention	B-api_mention
on	O	O
the	O	O
sub	O	O
-	O	O
stream	O	O
without	O	O
any	O	O
possibility	O	O
for	O	O
earlier	O	O
termination	O	O
and	O	O
the	O	O
comment	O	O
at	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
flatMap	B-api_mention	B-api_mention
method	O	O
even	O	O
tells	O	O
about	O	O
this	O	O
absent	O	O
feature	O	O
.	O	O
Since	O	O
this	O	O
is	O	O
more	O	O
than	O	O
just	O	O
an	O	O
optimization	O	O
thing	O	O
as	O	O
it	O	O
implies	O	O
that	O	O
the	O	O
code	O	O
simply	O	O
breaks	O	O
when	O	O
the	O	O
sub	O	O
-	O	O
stream	O	O
is	O	O
infinite	O	O
,	O	O
I	O	O
hope	O	O
that	O	O
the	O	O
developers	O	O
soon	O	O
prove	O	O
that	O	O
they	O	O
“	O	O
can	O	O
do	O	O
better	O	O
than	O	O
this	O	O
”	O	O
…	O	O
To	O	O
illustrate	O	O
the	O	O
implications	O	O
,	O	O
while	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
iterate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
works	O	O
as	O	O
expected	O	O
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
end	O	O
up	O	O
in	O	O
an	O	O
infinite	O	O
loop	O	O
.	O	O
Regarding	O	O
the	O	O
specification	O	O
,	O	O
most	O	O
of	O	O
it	O	O
can	O	O
be	O	O
found	O	O
in	O	O
the	O	O
chapter	O	O
“	O	O
Stream	B-api_mention	B-api_mention
operations	O	O
and	O	O
pipelines	O	O
”	O	O
of	O	O
the	O	O
package	O	O
specification	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
’	O	O
s	O	O
clear	O	O
that	O	O
a	O	O
short	O	O
-	O	O
circuiting	O	O
operation	O	O
doesn	O	O
’	O	O
t	O	O
guaranty	O	O
a	O	O
finite	O	O
time	O	O
termination	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
when	O	O
a	O	O
filter	O	O
doesn	O	O
’	O	O
t	O	O
match	O	O
any	O	O
item	O	O
the	O	O
processing	O	O
can	O	O
’	O	O
t	O	O
complete	O	O
,	O	O
but	O	O
an	O	O
implementation	O	O
which	O	O
doesn	O	O
’	O	O
t	O	O
support	O	O
any	O	O
termination	O	O
in	O	O
finite	O	O
time	O	O
by	O	O
simply	O	O
ignoring	O	O
the	O	O
short	O	O
-	O	O
circuiting	O	O
nature	O	O
of	O	O
an	O	O
operation	O	O
is	O	O
far	O	O
off	O	O
the	O	O
specification	O	O
.	O	O
Question	O	O
-	O	O
11821801	O	O
,	O	O
answer	O	O
-	O	O
36827191	O	O
From	O	O
oracle	O	O
documentation	O	O
page	O	O
about	O	O
ReentrantLock	B-api_mention	B-api_mention
:	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
A	O	O
ReentrantLock	B-api_mention	B-api_mention
is	O	O
owned	O	O
by	O	O
the	O	O
thread	O	O
last	O	O
successfully	O	O
locking	O	O
,	O	O
but	O	O
not	O	O
yet	O	O
unlocking	O	O
it	O	O
.	O	O
A	O	O
thread	O	O
invoking	O	O
lock	O	O
will	O	O
return	O	O
,	O	O
successfully	O	O
acquiring	O	O
the	O	O
lock	O	O
,	O	O
when	O	O
the	O	O
lock	O	O
is	O	O
not	O	O
owned	O	O
by	O	O
another	O	O
thread	O	O
.	O	O
The	O	O
method	O	O
will	O	O
return	O	O
immediately	O	O
if	O	O
the	O	O
current	O	O
thread	O	O
already	O	O
owns	O	O
the	O	O
lock	O	O
.	O	O
#	O	O
li	O	O
The	O	O
constructor	O	O
for	O	O
this	O	O
class	O	O
accepts	O	O
an	O	O
optional	O	O
fairness	O	O
parameter	O	O
.	O	O
When	O	O
set	O	O
true	O	O
,	O	O
under	O	O
contention	O	O
,	O	O
locks	O	O
favor	O	O
granting	O	O
access	O	O
to	O	O
the	O	O
longest	O	O
-	O	O
waiting	O	O
thread	O	O
.	O	O
Otherwise	O	O
this	O	O
lock	O	O
does	O	O
not	O	O
guarantee	O	O
any	O	O
particular	O	O
access	O	O
order	O	O
.	O	O
ReentrantLock	B-api_mention	B-api_mention
key	O	O
features	O	O
as	O	O
per	O	O
this	O	O
article	O	O
#	O	O
li	O	O
Ability	O	O
to	O	O
lock	O	O
interruptibly	O	O
.	O	O
#	O	O
li	O	O
Ability	O	O
to	O	O
timeout	O	O
while	O	O
waiting	O	O
for	O	O
lock	O	O
.	O	O
#	O	O
li	O	O
Power	O	O
to	O	O
create	O	O
fair	O	O
lock	O	O
.	O	O
#	O	O
li	O	O
API	O	O
to	O	O
get	O	O
list	O	O
of	O	O
waiting	O	O
thread	O	O
for	O	O
lock	O	O
.	O	O
#	O	O
li	O	O
Flexibility	O	O
to	O	O
try	O	O
for	O	O
lock	O	O
without	O	O
blocking	O	O
.	O	O
You	O	O
can	O	O
use	O	O
ReentrantReadWriteLock	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ReadLock	I-api_mention	I-api_mention
,	O	O
ReentrantReadWriteLock	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
WriteLock	I-api_mention	I-api_mention
to	O	O
further	O	O
acquire	O	O
control	O	O
on	O	O
granular	O	O
locking	O	O
on	O	O
read	O	O
and	O	O
write	O	O
operations	O	O
.	O	O
Have	O	O
a	O	O
look	O	O
at	O	O
this	O	O
article	O	O
by	O	O
Benjamen	O	O
on	O	O
usage	O	O
of	O	O
different	O	O
type	O	O
of	O	O
ReentrantLocks	B-api_mention	O
Question	O	O
-	O	O
16232833	O	O
,	O	O
answer	O	O
-	O	O
16250729	O	O
change	O	O
your	O	O
return	O	O
type	O	O
to	O	O
ResponseEntity	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
then	O	O
you	O	O
can	O	O
use	O	O
below	O	O
for	O	O
400	O	O
return	O	O
new	O	O
ResponseEntity	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
for	O	O
correct	O	O
request	O	O
return	O	O
new	O	O
ResponseEntity	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
UPDATE	O	O
1	O	O
after	O	O
spring	O	O
4	O	O
.	O	O
1	O	O
there	O	O
are	O	O
helper	O	O
methods	O	O
in	O	O
ResponseEntity	B-api_mention	B-api_mention
could	O	O
be	O	O
used	O	O
as	O	O
return	O	O
ResponseEntity	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
status	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
body	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
return	O	O
ResponseEntity	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ok	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
21524642	O	O
,	O	O
answer	O	O
-	O	O
21524694	O	O
Or	O	O
.	O	O
.	O	O
Pattern	B-api_mention	O
#	I-api_mention	O
quote	I-api_mention	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
value	O	O
_	O	O
split	O	O
=	O	O
rat	O	O
_	O	O
values	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
happening	O	O
because	O	O
String	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
accepts	O	O
a	O	O
regex	O	O
:	O	O
|	O	O
has	O	O
a	O	O
special	O	O
meaning	O	O
in	O	O
regex	O	O
.	O	O
quote	B-api_mention	O
will	O	O
return	O	O
a	O	O
String	B-api_mention	B-api_mention
representation	O	O
for	O	O
the	O	O
regex	O	O
.	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
7800008	O	O
Strictly	O	O
speaking	O	O
-	O	O
you	O	O
have	O	O
no	O	O
choice	O	O
but	O	O
calling	O	O
either	O	O
hostname	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
-	O	O
on	O	O
Unix	O	O
gethostname	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
.	O	O
This	O	O
is	O	O
the	O	O
name	O	O
of	O	O
your	O	O
computer	O	O
.	O	O
Any	O	O
attempt	O	O
to	O	O
determine	O	O
the	O	O
hostname	O	O
by	O	O
an	O	O
IP	O	O
address	O	O
like	O	O
this	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
bound	O	O
to	O	O
fail	O	O
in	O	O
some	O	O
circumstances	O	O
:	O	O
#	O	O
li	O	O
The	O	O
IP	O	O
address	O	O
might	O	O
not	O	O
resolve	O	O
into	O	O
any	O	O
name	O	O
.	O	O
Bad	O	O
DNS	O	O
setup	O	O
,	O	O
bad	O	O
system	O	O
setup	O	O
or	O	O
bad	O	O
provider	O	O
setup	O	O
may	O	O
be	O	O
the	O	O
reason	O	O
for	O	O
this	O	O
.	O	O
#	O	O
li	O	O
A	O	O
name	O	O
in	O	O
DNS	O	O
can	O	O
have	O	O
many	O	O
aliases	O	O
called	O	O
CNAMEs	O	O
.	O	O
These	O	O
can	O	O
only	O	O
be	O	O
resolved	O	O
in	O	O
one	O	O
direction	O	O
properly	O	O
:	O	O
name	O	O
to	O	O
address	O	O
.	O	O
The	O	O
reverse	O	O
direction	O	O
is	O	O
ambiguous	O	O
.	O	O
Which	O	O
one	O	O
is	O	O
the	O	O
"	O	O
official	O	O
"	O	O
name	O	O
?	O	O
#	O	O
li	O	O
A	O	O
host	O	O
can	O	O
have	O	O
many	O	O
different	O	O
IP	O	O
addresses	O	O
-	O	O
and	O	O
each	O	O
address	O	O
can	O	O
have	O	O
many	O	O
different	O	O
names	O	O
.	O	O
Two	O	O
common	O	O
cases	O	O
are	O	O
:	O	O
One	O	O
ethernet	O	O
port	O	O
has	O	O
several	O	O
"	O	O
logical	O	O
"	O	O
IP	O	O
addresses	O	O
or	O	O
the	O	O
computer	O	O
has	O	O
several	O	O
ethernet	O	O
ports	O	O
.	O	O
It	O	O
is	O	O
configurable	O	O
whether	O	O
they	O	O
share	O	O
an	O	O
IP	O	O
or	O	O
have	O	O
different	O	O
IPs	O	O
.	O	O
This	O	O
is	O	O
called	O	O
"	O	O
multihomed	O	O
"	O	O
.	O	O
#	O	O
li	O	O
One	O	O
Name	O	O
in	O	O
DNS	O	O
can	O	O
resolve	O	O
to	O	O
several	O	O
IP	O	O
Addresses	O	O
.	O	O
And	O	O
not	O	O
all	O	O
of	O	O
those	O	O
addresses	O	O
must	O	O
be	O	O
located	O	O
on	O	O
the	O	O
same	O	O
computer	O	O
!	O	O
(	O	O
Usecase	O	O
:	O	O
A	O	O
simple	O	O
form	O	O
of	O	O
load	O	O
-	O	O
balancing	O	O
)	O	O
#	O	O
li	O	O
Let	O	O
'	O	O
s	O	O
not	O	O
even	O	O
start	O	O
talking	O	O
about	O	O
dynamic	O	O
IP	O	O
addresses	O	O
.	O	O
Also	O	O
don	O	O
'	O	O
t	O	O
confuse	O	O
the	O	O
name	O	O
of	O	O
an	O	O
IP	O	O
-	O	O
address	O	O
with	O	O
the	O	O
name	O	O
of	O	O
the	O	O
host	O	O
(	O	O
hostname	O	O
)	O	O
.	O	O
A	O	O
metaphor	O	O
might	O	O
make	O	O
it	O	O
clearer	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
illustrates	O	O
it	O	O
pretty	O	O
much	O	O
I	O	O
think	O	O
.	O	O
The	O	O
good	O	O
news	O	O
is	O	O
:	O	O
The	O	O
real	O	O
hostname	O	O
is	O	O
usually	O	O
not	O	O
necessary	O	O
.	O	O
In	O	O
most	O	O
cases	O	O
any	O	O
name	O	O
which	O	O
resolves	O	O
into	O	O
an	O	O
IP	O	O
address	O	O
on	O	O
this	O	O
host	O	O
will	O	O
do	O	O
.	O	O
(	O	O
The	O	O
stranger	O	O
might	O	O
enter	O	O
the	O	O
city	O	O
by	O	O
Northgate	O	O
,	O	O
but	O	O
helpful	O	O
locals	O	O
translate	O	O
the	O	O
"	O	O
2nd	O	O
left	O	O
"	O	O
part	O	O
.	O	O
)	O	O
If	O	O
the	O	O
remaining	O	O
corner	O	O
cases	O	O
you	O	O
must	O	O
use	O	O
the	O	O
definitive	O	O
source	O	O
of	O	O
this	O	O
configuration	O	O
setting	O	O
-	O	O
which	O	O
is	O	O
the	O	O
C	O	O
function	O	O
gethostname	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
That	O	O
function	O	O
is	O	O
also	O	O
called	O	O
by	O	O
the	O	O
program	O	O
hostname	O	O
.	O	O
Question	O	O
-	O	O
15336477	O	O
,	O	O
answer	O	O
-	O	O
32364785	O	O
Examples	O	O
from	O	O
Apache	O	O
(	O	O
link	O	O
)	O	O
use	O	O
this	O	O
:	O	O
HttpClient	B-api_mention	B-api_mention
httpclient	O	O
=	O	O
HttpClients	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
createDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
class	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
apache	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
http	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
impl	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
client	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
HttpClients	I-api_mention	I-api_mention
is	O	O
there	O	O
since	O	O
version	O	O
4	O	O
.	O	O
3	O	O
.	O	O
The	O	O
code	O	O
for	O	O
HttpClients	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
createDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
same	O	O
as	O	O
the	O	O
accepted	O	O
answer	O	O
in	O	O
here	O	O
.	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
7520464	O	O
In	O	O
general	O	O
,	O	O
the	O	O
answer	O	O
to	O	O
your	O	O
question	O	O
is	O	O
"	O	O
yes	O	O
"	O	O
,	O	O
but	O	O
.	O	O
.	O	O
.	O	O
#	O	O
li	O	O
equals	B-api_mention	O
will	O	O
only	O	O
compare	O	O
what	O	O
it	O	O
is	O	O
written	O	O
to	O	O
compare	O	O
,	O	O
no	O	O
more	O	O
,	O	O
no	O	O
less	O	O
.	O	O
#	O	O
li	O	O
if	O	O
a	O	O
class	O	O
does	O	O
not	O	O
override	O	O
the	O	O
equals	O	B-api_mention
method	O	O
,	O	O
then	O	O
it	O	O
defaults	O	O
to	O	O
the	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
the	O	O
closest	O	O
parent	O	O
class	O	O
that	O	O
has	O	O
overridden	O	O
this	O	O
method	O	O
.	O	O
#	O	O
li	O	O
If	O	O
no	O	O
parent	O	O
classes	O	O
have	O	O
provided	O	O
an	O	O
override	O	O
,	O	O
then	O	O
it	O	O
defaults	O	O
to	O	O
the	O	O
method	O	O
from	O	O
the	O	O
ultimate	O	O
parent	O	O
class	O	O
,	O	O
Object	B-api_mention	B-api_mention
,	O	O
and	O	O
so	O	O
you	O	O
'	O	O
re	O	O
left	O	O
with	O	O
the	O	O
Object	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Per	O	O
the	O	O
Object	O	B-api_mention
API	O	O
this	O	O
is	O	O
the	O	O
same	O	O
as	O	O
=	O	O
=	O	O
;	O	O
that	O	O
is	O	O
,	O	O
it	O	O
returns	O	O
true	O	O
if	O	O
and	O	O
only	O	O
if	O	O
both	O	O
variables	O	O
refer	O	O
to	O	O
the	O	O
same	O	O
object	O	O
,	O	O
if	O	O
their	O	O
references	O	O
are	O	O
one	O	O
and	O	O
the	O	O
same	O	O
.	O	O
Thus	O	O
you	O	O
will	O	O
be	O	O
testing	O	O
for	O	O
object	O	O
equality	O	O
and	O	O
not	O	O
functional	O	O
equality	O	O
.	O	O
#	O	O
li	O	O
Always	O	O
remember	O	O
to	O	O
override	O	O
hashCode	B-api_mention	B-api_mention
if	O	O
you	O	O
override	O	O
equals	O	O
so	O	O
as	O	O
not	O	O
to	O	O
"	O	O
break	O	O
the	O	O
contract	O	O
"	O	O
.	O	O
As	O	O
per	O	O
the	O	O
API	O	O
,	O	O
the	O	O
result	O	O
returned	O	O
from	O	O
the	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
for	O	O
two	O	O
objects	O	O
must	O	O
be	O	O
the	O	O
same	O	O
if	O	O
their	O	O
equals	O	O
methods	O	O
shows	O	O
that	O	O
they	O	O
are	O	O
equivalent	O	O
.	O	O
The	O	O
converse	O	O
is	O	O
not	O	O
necessarily	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
32859038	O	O
,	O	O
answer	O	O
-	O	O
32863263	O	O
Don	O	O
'	O	O
t	O	O
feel	O	O
like	O	O
you	O	O
have	O	O
to	O	O
do	O	O
everything	O	O
in	O	O
/	O	O
with	O	O
the	O	O
stream	O	O
.	O	O
I	O	O
would	O	O
just	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
long	O	O
as	O	O
you	O	O
don	O	O
'	O	O
t	O	O
parallelise	O	O
the	O	O
stream	O	O
this	O	O
will	O	O
work	O	O
and	O	O
it	O	O
avoids	O	O
potentially	O	O
expensive	O	O
and	O	O
/	O	O
or	O	O
problematic	O	O
(	O	O
in	O	O
the	O	O
case	O	O
of	O	O
duplicates	O	O
)	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
indexOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
operations	O	O
.	O	O
(	O	O
You	O	O
cannot	O	O
use	O	O
a	O	O
regular	O	O
int	O	O
variable	O	O
in	O	O
place	O	O
of	O	O
the	O	O
AtomicInteger	B-api_mention	B-api_mention
because	O	O
variables	O	O
used	O	O
from	O	O
outside	O	O
a	O	O
lambda	O	O
expression	O	O
must	O	O
be	O	O
effectively	O	O
final	O	O
.	O	O
Note	O	O
that	O	O
when	O	O
uncontested	O	O
(	O	O
as	O	O
in	O	O
this	O	O
case	O	O
)	O	O
,	O	O
AtomicInteger	B-api_mention	B-api_mention
is	O	O
very	O	O
fast	O	O
and	O	O
won	O	O
'	O	O
t	O	O
pose	O	O
a	O	O
performance	O	O
problem	O	O
.	O	O
But	O	O
if	O	O
it	O	O
worries	O	O
you	O	O
you	O	O
can	O	O
use	O	O
a	O	O
non	O	O
-	O	O
thread	O	O
-	O	O
safe	O	O
counter	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
34250207	O	O
,	O	O
answer	O	O
-	O	O
34250231	O	O
Technically	O	O
,	O	O
it	O	O
'	O	O
s	O	O
10	O	O
,	O	O
not	O	O
zero	O	O
,	O	O
if	O	O
you	O	O
admit	O	O
for	O	O
a	O	O
lazy	O	O
initialisation	O	O
of	O	O
the	O	O
backing	O	O
array	O	O
.	O	O
See	O	O
:	O	O
#	O	O
pre	O	O
where	O	O
/	O	O
*	O	O
*	O	O
*	O	O
Default	O	O
initial	O	O
capacity	O	O
.	O	O
*	O	O
/	O	O
private	O	O
static	O	O
final	O	O
int	O	O
DEFAULT	O	O
_	O	O
CAPACITY	O	O
=	O	O
10	O	O
;	O	O
What	O	O
you	O	O
'	O	O
re	O	O
referring	O	O
to	O	O
is	O	O
just	O	O
the	O	O
zero	O	O
-	O	O
sized	O	O
initial	O	O
array	O	O
object	O	O
that	O	O
is	O	O
shared	O	O
among	O	O
all	O	O
initially	O	O
empty	O	O
ArrayList	B-api_mention	B-api_mention
objects	O	O
.	O	O
I	O	O
.	O	O
e	O	O
.	O	O
the	O	O
capacity	O	O
of	O	O
10	O	O
is	O	O
guaranteed	O	O
lazily	O	O
,	O	O
an	O	O
optimisation	O	O
that	O	O
is	O	O
present	O	O
also	O	O
in	O	O
Java	O	O
7	O	O
.	O	O
Admittedly	O	O
,	O	O
the	O	O
constructor	O	O
contract	O	O
is	O	O
not	O	O
entirely	O	O
accurate	O	O
.	O	O
Perhaps	O	O
this	O	O
is	O	O
the	O	O
source	O	O
of	O	O
confusion	O	O
here	O	O
.	O	O
Background	O	O
Here	O	O
'	O	O
s	O	O
an	O	O
E	O	O
-	O	O
Mail	O	O
by	O	O
Mike	O	O
Duigou	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
20129762	O	O
,	O	O
answer	O	O
-	O	O
20130131	O	O
There	O	O
are	O	O
already	O	O
people	O	O
asked	O	O
the	O	O
same	O	O
on	O	O
the	O	O
mailing	O	O
list	O	O
☺	O	O
.	O	O
The	O	O
main	O	O
reason	O	O
is	O	O
Iterable	B-api_mention	B-api_mention
also	O	O
has	O	O
a	O	O
re	O	O
-	O	O
iterable	O	O
semantic	O	O
,	O	O
while	O	O
Stream	B-api_mention	B-api_mention
is	O	O
not	O	O
.	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
32334319	O	O
,	O	O
answer	O	O
-	O	O
32334651	O	O
The	O	O
API	O	O
guarantees	O	O
a	O	O
stable	O	O
sorting	O	O
which	O	O
Quicksort	O	O
doesn	O	O
’	O	O
t	O	O
offer	O	O
.	O	O
However	O	O
,	O	O
when	O	O
sorting	O	O
primitive	O	O
values	O	O
by	O	O
their	O	O
natural	O	O
order	O	O
you	O	O
won	O	O
’	O	O
t	O	O
notice	O	O
a	O	O
difference	O	O
as	O	O
primitive	O	O
values	O	O
have	O	O
no	O	O
identity	O	O
.	O	O
Therefore	O	O
,	O	O
Quicksort	O	O
is	O	O
used	O	O
for	O	O
primitive	O	O
arrays	O	O
as	O	O
it	O	O
is	O	O
slightly	O	O
more	O	O
efficient	O	O
.	O	O
For	O	O
objects	O	O
you	O	O
may	O	O
notice	O	O
,	O	O
when	O	O
objects	O	O
which	O	O
are	O	O
deemed	O	O
equal	O	O
according	O	O
to	O	O
their	O	O
equals	O	O
implementation	O	O
or	O	O
the	O	O
provided	O	O
Comparator	B-api_mention	B-api_mention
change	O	O
their	O	O
order	O	O
.	O	O
Therefore	O	O
,	O	O
Quicksort	O	O
is	O	O
not	O	O
an	O	O
option	O	O
.	O	O
So	O	O
a	O	O
variant	O	O
of	O	O
MergeSort	O	O
is	O	O
used	O	O
,	O	O
the	O	O
current	O	O
Java	O	O
versions	O	O
use	O	O
TimSort	O	B-api_mention
.	O	O
This	O	O
applies	O	O
to	O	O
both	O	O
,	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
and	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
,	O	O
though	O	O
with	O	O
Java	O	O
8	O	O
,	O	O
the	O	O
List	B-api_mention	B-api_mention
itself	O	O
may	O	O
override	O	O
the	O	O
sort	O	O
algorithms	O	O
.	O	O
Question	O	O
-	O	O
31993377	O	O
,	O	O
answer	O	O
-	O	O
31993533	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
if	O	O
there	O	O
are	O	O
any	O	O
more	O	O
non	O	O
-	O	O
whitespace	O	O
characters	O	O
available	O	O
.	O	B-api_mention
hasNextLine	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
to	O	O
see	O	O
if	O	O
there	O	O
is	O	O
another	O	O
line	O	O
of	O	O
text	O	O
available	O	O
.	O	O
Your	O	O
text	O	O
file	O	O
probably	O	O
has	O	O
a	O	O
newline	O	O
at	O	O
the	O	O
end	O	O
of	O	O
it	O	O
so	O	O
it	O	O
has	O	O
another	O	O
line	O	O
but	O	O
no	O	O
more	O	O
characters	O	O
that	O	O
are	O	O
not	O	O
whitespace	O	O
.	O	O
Many	O	O
text	O	O
editors	O	O
automatically	O	O
add	O	O
a	O	O
newline	O	O
to	O	O
the	O	O
end	O	O
of	O	O
a	O	O
file	O	O
if	O	O
there	O	O
isn	O	O
'	O	O
t	O	O
one	O	O
already	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
your	O	O
input	O	O
file	O	O
is	O	O
not	O	O
this	O	O
(	O	O
the	O	O
numbers	O	O
are	O	O
line	O	O
numbers	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
actually	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923211	O	O
This	O	O
advice	O	O
is	O	O
a	O	O
variant	O	O
of	O	O
the	O	O
"	O	O
be	O	O
as	O	O
unspecific	O	O
as	O	O
possible	O	O
regarding	O	O
inputs	O	O
and	O	O
as	O	O
specific	O	O
as	O	O
possible	O	O
regarding	O	O
outputs	O	O
"	O	O
rule	O	O
of	O	O
thumb	O	O
.	O	O
Usually	O	O
if	O	O
you	O	O
have	O	O
a	O	O
method	O	O
that	O	O
takes	O	O
a	O	O
plain	O	O
non	O	O
-	O	O
null	O	O
value	O	O
,	O	O
you	O	O
can	O	O
map	O	O
it	O	O
over	O	O
the	O	O
Optional	B-api_mention	B-api_mention
,	O	O
so	O	O
the	O	O
plain	O	O
version	O	O
is	O	O
strictly	O	O
more	O	O
unspecific	O	O
regarding	O	O
inputs	O	O
.	O	O
However	O	O
there	O	O
are	O	O
a	O	O
bunch	O	O
of	O	O
possible	O	O
reasons	O	O
why	O	O
you	O	O
would	O	O
want	O	O
to	O	O
require	O	O
an	O	O
Optional	B-api_mention	B-api_mention
argument	O	O
nonetheless	O	O
:	O	O
#	O	O
li	O	O
you	O	O
want	O	O
your	O	O
function	O	O
to	O	O
be	O	O
used	O	O
in	O	O
conjunction	O	O
with	O	O
another	O	O
API	O	O
that	O	O
returns	O	O
an	O	O
Optional	B-api_mention	B-api_mention
#	O	O
li	O	O
Your	O	O
function	O	O
should	O	O
return	O	O
something	O	O
other	O	O
than	O	O
an	O	O
empty	O	O
Optional	B-api_mention	B-api_mention
if	O	O
the	O	O
given	O	O
value	O	O
is	O	O
empty	O	O
#	O	O
li	O	O
You	O	O
think	O	O
Optional	B-api_mention	B-api_mention
is	O	O
so	O	O
awesome	O	O
that	O	O
whoever	O	O
uses	O	O
your	O	O
API	O	O
should	O	O
be	O	O
required	O	O
to	O	O
learn	O	O
about	O	O
it	O	O
;	O	O
-	O	O
)	O	O
Question	O	O
-	O	O
34172978	O	O
,	O	O
answer	O	O
-	O	O
34173658	O	O
If	O	O
you	O	O
want	O	O
to	O	O
stop	O	O
either	O	O
if	O	O
number	O	O
5	O	O
is	O	O
reached	O	O
or	O	O
10	O	O
elements	O	O
are	O	O
collected	O	O
,	O	O
there	O	O
'	O	O
s	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
takeWhile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
added	O	O
in	O	O
Java	O	O
-	O	O
9	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
32302353	O	O
To	O	O
concur	O	O
with	O	O
earlier	O	O
comments	O	O
:	O	O
simplest	O	O
is	O	O
(	O	O
2	O	O
)	O	O
to	O	O
use	O	O
Closeable	B-api_mention	B-api_mention
resources	O	O
and	O	O
declare	O	O
them	O	O
in	O	O
order	O	O
in	O	O
the	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
clause	O	O
.	O	O
If	O	O
you	O	O
only	O	O
have	O	O
AutoCloseable	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
wrap	O	O
them	O	O
in	O	O
another	O	O
(	O	O
nested	O	O
)	O	O
class	O	O
that	O	O
just	O	O
checks	O	O
that	O	O
close	B-api_mention	O
is	O	O
only	O	O
called	O	O
once	O	O
(	O	O
Facade	O	O
Pattern	O	B-api_mention
)	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
by	O	O
having	O	O
private	O	O
bool	O	O
isClosed	O	O
;	O	O
.	O	O
In	O	O
practice	O	O
even	O	O
Oracle	O	O
just	O	O
(	O	O
1	O	O
)	O	O
chains	O	O
the	O	O
constructors	O	O
and	O	O
doesn	O	O
'	O	O
t	O	O
correctly	O	O
handle	O	O
exceptions	O	O
partway	O	O
through	O	O
the	O	O
chain	O	O
.	O	O
Alternatively	O	O
,	O	O
you	O	O
can	O	O
manually	O	O
create	O	O
a	O	O
chained	O	O
resource	O	O
,	O	O
using	O	O
a	O	O
static	O	O
factory	O	O
method	O	O
;	O	O
this	O	O
encapsulates	O	O
the	O	O
chain	O	O
,	O	O
and	O	O
handle	O	O
cleanup	O	O
if	O	O
it	O	O
fails	O	O
part	O	O
-	O	O
way	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
complexity	O	O
comes	O	O
from	O	O
handling	O	O
multiple	O	O
exceptions	O	O
;	O	O
otherwise	O	O
it	O	O
'	O	O
s	O	O
just	O	O
"	O	O
close	O	O
resources	O	O
that	O	O
you	O	O
'	O	O
ve	O	O
acquired	O	O
so	O	O
far	O	O
"	O	O
.	O	O
A	O	O
common	O	O
practice	O	O
seems	O	O
to	O	O
be	O	O
to	O	O
first	O	O
initialize	O	O
the	O	O
variable	O	O
that	O	O
holds	O	O
the	O	O
object	O	O
that	O	O
holds	O	O
the	O	O
resource	O	O
to	O	O
null	O	O
(	O	O
here	O	O
fileWriter	B-api_mention	B-api_mention
)	O	O
,	O	O
and	O	O
then	O	O
include	O	O
a	O	O
null	O	O
check	O	O
in	O	O
the	O	O
cleanup	O	O
,	O	O
but	O	O
that	O	O
seems	O	O
unnecessary	O	O
:	O	O
if	O	O
the	O	O
constructor	O	O
fails	O	O
,	O	O
there	O	O
'	O	O
s	O	O
nothing	O	O
to	O	O
clean	O	O
up	O	O
,	O	O
so	O	O
we	O	O
can	O	O
just	O	O
let	O	O
that	O	O
exception	O	O
propagate	O	O
,	O	O
which	O	O
simplifies	O	O
the	O	O
code	O	O
a	O	O
little	O	O
.	O	O
You	O	O
could	O	O
probably	O	O
do	O	O
this	O	O
generically	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28840047	O	O
Some	O	O
time	O	O
ago	O	O
,	O	O
I	O	O
'	O	O
ve	O	O
blogged	O	O
about	O	O
a	O	O
Java	O	O
8	O	O
functional	O	O
way	O	O
of	O	O
calculating	O	O
fibonacci	O	O
numbers	O	O
recursively	O	O
,	O	O
with	O	O
a	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
cache	O	O
and	O	O
the	O	O
new	O	O
,	O	O
useful	O	O
computeIfAbsent	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
chose	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
because	O	O
I	O	O
was	O	O
thinking	O	O
of	O	O
making	O	O
this	O	O
example	O	O
even	O	O
more	O	O
sophisticated	O	O
by	O	O
introducing	O	O
parallelism	O	O
(	O	O
which	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
in	O	O
the	O	O
end	O	O
)	O	O
.	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
increase	O	O
the	O	O
number	O	O
from	O	O
8	O	O
to	O	O
25	O	O
and	O	O
observe	O	O
what	O	O
happens	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
program	O	O
never	O	O
halts	O	O
.	O	O
Inside	O	O
the	O	O
method	O	O
,	O	O
there	O	O
'	O	O
s	O	O
a	O	O
loop	O	O
that	O	O
just	O	O
runs	O	O
forever	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
m	O	O
using	O	O
:	O	O
#	O	O
pre	O	O
Matthias	O	O
,	O	O
a	O	O
reader	O	O
of	O	O
that	O	O
blog	O	O
post	O	O
also	O	O
confirmed	O	O
the	O	O
issue	O	O
(	O	O
he	O	O
actually	O	O
found	O	O
it	O	O
)	O	O
.	O	O
This	O	O
is	O	O
weird	O	O
.	O	O
I	O	O
would	O	O
have	O	O
expected	O	O
any	O	O
of	O	O
the	O	O
following	O	O
two	O	O
:	O	O
#	O	O
li	O	O
It	O	O
works	O	O
#	O	O
li	O	O
It	O	O
throws	O	O
a	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
But	O	O
just	O	O
never	O	O
halting	O	O
?	O	O
That	O	O
seems	O	O
dangerous	O	O
.	O	O
Is	O	O
it	O	O
a	O	O
bug	O	O
?	O	O
Or	O	O
did	O	O
I	O	O
misunderstand	O	O
some	O	O
contract	O	O
?	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
20945113	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
*	O	O
but	O	O
this	O	O
only	O	O
means	O	O
you	O	O
cannot	O	O
change	O	O
it	O	O
using	O	O
its	O	O
public	O	O
API	O	O
.	O	O
What	O	O
you	O	O
are	O	O
doing	O	O
here	O	O
is	O	O
circumventing	O	O
the	O	O
normal	O	O
API	O	O
,	O	O
using	O	O
reflection	O	O
.	O	O
The	O	O
same	O	O
way	O	O
,	O	O
you	O	O
can	O	O
change	O	O
the	O	O
values	O	O
of	O	O
enums	O	O
,	O	O
change	O	O
the	O	O
lookup	O	O
table	O	O
used	O	O
in	O	O
Integer	B-api_mention	B-api_mention
autoboxing	O	O
etc	O	O
.	O	O
Now	O	O
,	O	O
the	O	O
reason	O	O
s1	O	O
and	O	O
s2	O	O
change	O	O
value	O	O
,	O	O
is	O	O
that	O	O
they	O	O
both	O	O
refer	O	O
to	O	O
the	O	O
same	O	O
interned	O	O
string	O	O
.	O	O
The	O	O
compiler	O	O
does	O	O
this	O	O
(	O	O
as	O	O
mentioned	O	O
by	O	O
other	O	O
answers	O	O
)	O	O
.	O	O
The	O	O
reason	O	O
s3	O	O
does	O	O
not	O	O
was	O	O
actually	O	O
a	O	O
bit	O	O
surprising	O	O
to	O	O
me	O	O
,	O	O
as	O	O
I	O	O
thought	O	O
it	O	O
would	O	O
share	O	O
the	O	O
value	O	O
array	O	O
(	O	O
it	O	O
did	O	O
in	O	O
earlier	O	O
version	O	O
of	O	O
Java	O	O
,	O	O
before	O	O
Java	O	O
7u6	O	O
)	O	O
.	O	O
However	O	O
,	O	O
looking	O	O
at	O	O
the	O	O
source	O	O
code	O	O
of	O	O
String	B-api_mention	B-api_mention
,	O	O
we	O	O
can	O	O
see	O	O
that	O	O
the	O	O
value	O	O
character	O	O
array	O	O
for	O	O
a	O	O
substring	O	O
is	O	O
actually	O	O
copied	O	O
(	O	O
using	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOfRange	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
This	O	O
is	O	O
why	O	O
it	O	O
goes	O	O
unchanged	O	O
.	O	O
You	O	O
can	O	O
install	O	O
a	O	O
SecurityManager	B-api_mention	B-api_mention
,	O	O
to	O	O
avoid	O	O
malicious	O	O
code	O	O
to	O	O
do	O	O
such	O	O
things	O	O
.	O	O
But	O	O
keep	O	O
in	O	O
mind	O	O
that	O	O
some	O	O
libraries	O	O
depend	O	O
on	O	O
using	O	O
these	O	O
kind	O	O
of	O	O
reflection	O	O
tricks	O	O
(	O	O
typically	O	O
ORM	O	O
tools	O	O
,	O	O
AOP	O	O
libraries	O	O
etc	O	O
)	O	O
.	O	O
*	O	O
)	O	O
I	O	O
initially	O	O
wrote	O	O
that	O	O
String	B-api_mention	B-api_mention
s	O	O
aren	O	O
'	O	O
t	O	O
really	O	O
immutable	O	O
,	O	O
just	O	O
"	O	O
effective	O	O
immutable	O	O
"	O	O
.	O	O
This	O	O
might	O	O
be	O	O
misleading	O	O
in	O	O
the	O	O
current	O	O
implementation	O	O
of	O	O
String	B-api_mention	B-api_mention
,	O	O
where	O	O
the	O	O
value	O	O
array	O	O
is	O	O
indeed	O	O
marked	O	O
private	O	O
final	O	O
.	O	O
It	O	O
'	O	O
s	O	O
still	O	O
worth	O	O
noting	O	O
,	O	O
though	O	O
,	O	O
that	O	O
there	O	O
is	O	O
no	O	O
way	O	O
to	O	O
declare	O	O
an	O	O
array	O	O
in	O	O
Java	O	O
as	O	O
immutable	O	O
,	O	O
so	O	O
care	O	O
must	O	O
be	O	O
taken	O	O
not	O	O
to	O	O
expose	O	O
it	O	O
outside	O	O
its	O	O
class	O	O
,	O	O
even	O	O
with	O	O
the	O	O
proper	O	O
access	O	O
modifiers	O	O
.	O	O
As	O	O
this	O	O
topic	O	O
seems	O	O
overwhelmingly	O	O
popular	O	O
,	O	O
here	O	O
'	O	O
s	O	O
some	O	O
suggested	O	O
further	O	O
reading	O	O
:	O	O
Heinz	O	O
Kabutz	O	O
'	O	O
s	O	O
Reflection	O	O
Madness	O	O
talk	O	O
from	O	O
JavaZone	O	O
2009	O	O
,	O	O
which	O	O
covers	O	O
a	O	O
lot	O	O
of	O	O
the	O	O
issues	O	O
in	O	O
the	O	O
OP	O	O
,	O	O
along	O	O
with	O	O
other	O	O
reflection	O	O
.	O	O
.	O	O
.	O	O
well	O	O
.	O	O
.	O	O
.	O	O
madness	O	O
.	O	O
It	O	O
covers	O	O
why	O	O
this	O	O
is	O	O
sometimes	O	O
useful	O	O
.	O	O
And	O	O
why	O	O
,	O	O
most	O	O
of	O	O
the	O	O
time	O	O
,	O	O
you	O	O
should	O	O
avoid	O	O
it	O	O
.	O	O
:	O	O
-	O	O
)	O	O
Question	O	O
-	O	O
5455794	O	O
I	O	O
have	O	O
a	O	O
string	O	O
like	O	O
this	O	O
:	O	O
mysz	O	O
=	O	O
StringLiteral	O	O
;	O	O
I	O	O
want	O	O
to	O	O
remove	O	O
the	O	O
whitespaces	O	O
in	O	O
the	O	O
string	O	O
.	O	O
I	O	O
tried	O	O
trim	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
this	O	O
removes	O	O
only	O	O
whitespaces	O	O
before	O	O
and	O	O
after	O	O
the	O	O
whole	O	O
string	O	O
.	O	O
I	O	O
also	O	O
tried	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
then	O	O
the	O	O
=	O	O
also	O	O
gets	O	O
removed	O	O
.	O	O
How	O	O
can	O	O
I	O	O
achieve	O	O
a	O	O
string	O	O
with	O	O
:	O	O
mysz2	O	O
=	O	O
StringLiteral	O	O
Question	O	O
-	O	O
12576156	O	O
,	O	O
answer	O	O
-	O	O
12576308	O	O
Have	O	O
you	O	O
considered	O	O
@	O	O
Autowired	O	O
ing	O	O
the	O	O
constructor	O	O
or	O	O
a	O	O
setter	O	O
and	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
ing	O	O
in	O	O
the	O	O
body	O	O
?	O	O
#	O	O
pre	O	O
I	O	O
tend	O	O
to	O	O
prefer	O	O
doing	O	O
my	O	O
autowiring	O	O
in	O	O
one	O	O
of	O	O
these	O	O
ways	O	O
to	O	O
enhance	O	O
the	O	O
testability	O	O
of	O	O
my	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
22501230	O	O
,	O	O
answer	O	O
-	O	O
22511214	O	O
I	O	O
don	O	O
'	O	O
t	O	O
like	O	O
any	O	O
of	O	O
the	O	O
solutions	O	O
presented	O	O
except	O	O
for	O	O
JAB	O	O
'	O	O
s	O	O
.	O	O
None	O	O
of	O	O
the	O	O
others	O	O
make	O	O
it	O	O
easy	O	O
to	O	O
read	O	O
the	O	O
code	O	O
and	O	O
understand	O	O
what	O	O
is	O	O
being	O	O
computed	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
how	O	O
I	O	O
would	O	O
write	O	O
this	O	O
code	O	O
-	O	O
-	O	O
I	O	O
only	O	O
know	O	O
C	O	O
#	O	O
,	O	O
not	O	O
Java	O	O
,	O	O
but	O	O
you	O	O
get	O	O
the	O	O
picture	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
it	O	O
is	O	O
much	O	O
more	O	O
clear	O	O
what	O	O
is	O	O
being	O	O
computed	O	O
here	O	O
:	O	O
this	O	O
emphasizes	O	O
that	O	O
we	O	O
are	O	O
computing	O	O
who	O	O
gets	O	O
hit	O	O
by	O	O
what	O	O
attack	O	O
,	O	O
and	O	O
returning	O	O
both	O	O
results	O	O
.	O	O
However	O	O
this	O	O
could	O	O
be	O	O
even	O	O
better	O	O
;	O	O
that	O	O
Boolean	B-api_mention	B-api_mention
array	O	O
is	O	O
somewhat	O	O
opaque	O	O
.	O	O
I	O	O
like	O	O
the	O	O
table	O	O
lookup	O	O
approach	O	O
but	O	O
I	O	O
would	O	O
be	O	O
inclined	O	O
to	O	O
write	O	O
it	O	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
made	O	O
it	O	O
clear	O	O
what	O	O
the	O	O
intended	O	O
game	O	O
semantics	O	O
were	O	O
.	O	O
That	O	O
is	O	O
,	O	O
rather	O	O
than	O	O
"	O	O
an	O	O
attack	O	O
of	O	O
zero	O	O
and	O	O
a	O	O
defense	O	O
of	O	O
one	O	O
results	O	O
in	O	O
no	O	O
hit	O	O
"	O	O
,	O	O
instead	O	O
find	O	O
a	O	O
way	O	O
to	O	O
make	O	O
the	O	O
code	O	O
more	O	O
clearly	O	O
imply	O	O
"	O	O
a	O	O
low	O	O
kick	O	O
attack	O	O
and	O	O
a	O	O
low	O	O
block	O	O
defense	O	O
results	O	O
in	O	O
no	O	O
hit	O	O
"	O	O
.	O	O
Make	O	O
the	O	O
code	O	O
reflect	O	O
the	O	O
business	O	O
logic	O	O
of	O	O
the	O	O
game	O	O
.	O	O
Question	O	O
-	O	O
5694385	O	O
,	O	O
answer	O	O
-	O	O
5694464	O	O
Rather	O	O
than	O	O
spoon	O	O
-	O	O
feed	O	O
you	O	O
code	O	O
,	O	O
here	O	O
'	O	O
s	O	O
how	O	O
to	O	O
look	O	O
in	O	O
the	O	O
documentation	O	O
.	O	O
First	O	O
,	O	O
you	O	O
'	O	O
re	O	O
dealing	O	O
with	O	O
IO	O	O
,	O	O
so	O	O
look	O	O
in	O	O
the	O	O
java	O	O
.	O	O
io	O	O
package	O	O
.	O	O
There	O	O
are	O	O
two	O	O
classes	O	O
that	O	O
look	O	O
interesting	O	O
:	O	O
FileFilter	B-api_mention	B-api_mention
and	O	O
FileNameFilter	B-api_mention	B-api_mention
.	O	O
When	O	O
I	O	O
clicked	O	O
on	O	O
the	O	O
first	O	O
,	O	O
it	O	O
showed	O	O
me	O	O
that	O	O
there	O	O
was	O	O
a	O	O
a	O	O
listFiles	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
the	O	O
File	B-api_mention	B-api_mention
class	O	O
.	O	O
And	O	O
the	O	O
documentation	O	O
for	O	O
that	O	O
method	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
Scrolling	O	O
up	O	O
in	O	O
the	O	O
File	O	B-api_mention
JavaDoc	O	O
,	O	O
I	O	O
see	O	O
the	O	O
constructors	O	O
.	O	O
And	O	O
that	O	O
'	O	O
s	O	O
really	O	O
all	O	O
I	O	O
need	O	O
to	O	O
be	O	O
able	O	O
to	O	O
create	O	O
a	O	O
File	B-api_mention	B-api_mention
instance	O	O
and	O	O
call	O	O
listFiles	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
it	O	O
.	O	O
Scrolling	O	O
still	O	O
further	O	O
,	O	O
I	O	O
can	O	O
see	O	O
some	O	O
information	O	O
about	O	O
how	O	O
files	O	O
are	O	O
named	O	O
in	O	O
different	O	O
operating	O	O
systems	O	O
.	O	O
Question	O	O
-	O	O
14526260	O	O
,	O	O
answer	O	O
-	O	O
14526289	O	O
just	O	O
use	O	O
File	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
pre	O	O
using	O	O
String	O	B-api_mention
methods	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
23218874	O	O
I	O	O
understand	O	O
that	O	O
with	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
I	O	O
can	O	O
use	O	O
chain	O	O
operations	O	O
like	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
use	O	O
parallel	O	O
stream	O	O
.	O	O
But	O	O
what	O	O
is	O	O
difference	O	O
between	O	O
them	O	O
if	O	O
I	O	O
need	O	O
to	O	O
execute	O	O
small	O	O
operations	O	O
(	O	O
for	O	O
example	O	O
,	O	O
printing	O	O
the	O	O
elements	O	O
of	O	O
the	O	O
list	O	O
)	O	O
?	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
8894356	O	O
Looks	O	O
like	O	O
niether	O	O
is	O	O
faster	O	O
or	O	O
slower	O	O
#	O	O
pre	O	O
For	O	O
long	O	O
strings	O	O
I	O	O
'	O	O
ll	O	O
chose	O	O
the	O	O
first	O	O
one	O	O
.	O	O
Why	O	O
copy	O	O
around	O	O
long	O	O
strings	O	O
?	O	O
Documentations	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
/	O	O
/	O	O
Edit	O	O
1	O	O
I	O	O
'	O	O
ve	O	O
changed	O	O
the	O	O
test	O	O
to	O	O
trick	O	O
JIT	O	O
optimisation	O	O
.	O	O
/	O	O
/	O	O
Edit	O	O
2	O	O
Repeat	O	O
test	O	O
10	O	O
times	O	O
to	O	O
let	O	O
JVM	O	O
warm	O	O
up	O	O
.	O	O
/	O	O
/	O	O
Edit	O	O
3	O	O
Conclusions	O	O
:	O	O
First	O	O
of	O	O
all	O	O
str	O	O
.	B-api_mention	B-api_mention
toCharArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
copies	O	O
entire	O	O
string	O	O
in	O	O
memory	O	O
.	O	O
It	O	O
can	O	O
be	O	O
memory	O	O
consuming	O	O
for	O	O
long	O	O
strings	O	O
.	O	O
Method	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
charAt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
looks	O	O
up	O	O
char	O	O
in	O	O
char	O	O
array	O	O
inside	O	O
String	B-api_mention	B-api_mention
class	O	O
checking	O	O
index	O	O
before	O	O
.	O	O
It	O	O
looks	O	O
like	O	O
for	O	O
short	O	O
enough	O	O
Strings	B-api_mention	O
first	O	O
method	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
chatAt	B-api_mention	O
method	O	O
)	O	O
is	O	O
a	O	O
bit	O	O
slower	O	O
due	O	O
to	O	O
this	O	O
index	O	O
check	O	O
.	O	O
But	O	O
if	O	O
the	O	O
String	B-api_mention	B-api_mention
is	O	O
long	O	O
enough	O	O
,	O	O
copying	O	O
whole	O	O
char	O	O
array	O	O
gets	O	O
slower	O	O
,	O	O
and	O	O
the	O	O
first	O	O
method	O	O
is	O	O
faster	O	O
.	O	O
The	O	O
longer	O	O
the	O	O
string	O	O
is	O	O
,	O	O
the	O	O
slower	O	O
toCharArray	B-api_mention	B-api_mention
performs	O	O
.	O	O
Try	O	O
to	O	O
change	O	O
limit	O	O
in	O	O
for	O	O
(	O	O
args	O	O
)	O	O
loop	O	O
to	O	O
see	O	O
it	O	O
.	O	O
If	O	O
we	O	O
let	O	O
JVM	O	O
warm	O	O
up	O	O
code	O	O
runs	O	O
faster	O	O
,	O	O
but	O	O
proportions	O	O
are	O	O
the	O	O
same	O	O
.	O	O
After	O	O
all	O	O
it	O	O
'	O	O
s	O	O
just	O	O
micro	O	O
-	O	O
optimisation	O	O
.	O	O
Question	O	O
-	O	O
16098046	O	O
,	O	O
answer	O	O
-	O	O
16098086	O	O
You	O	O
could	O	O
use	O	O
printf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
with	O	O
%	O	O
f	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
will	O	O
print	O	O
dexp	O	O
:	O	O
12345678	O	O
.	O	O
000000	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
want	O	O
the	O	O
fractional	O	O
part	O	O
,	O	O
use	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
printf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
uses	O	O
the	O	O
format	O	O
specifier	O	O
language	O	O
explained	O	O
in	O	O
the	O	O
documentation	O	O
.	O	O
The	O	O
default	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
format	O	O
used	O	O
in	O	O
your	O	O
original	O	O
code	O	O
is	O	O
spelled	O	O
out	O	O
here	O	O
.	O	O
Question	O	O
-	O	O
31471444	O	O
,	O	O
answer	O	O
-	O	O
31471520	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
apache	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
commons	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
math	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
NumberUtils	I-api_mention	I-api_mention
.	I-api_mention	O
INTEGER	I-api_mention	O
_	I-api_mention	O
ONE	I-api_mention	O
it	O	O
gives	O	O
you	O	O
a	O	O
final	O	O
static	O	O
Integer	B-api_mention	B-api_mention
object	O	O
rather	O	O
than	O	O
primitive	O	O
int	O	O
1	O	O
,	O	O
and	O	O
as	O	O
it	O	O
is	O	O
final	O	O
static	O	O
it	O	O
acts	O	O
as	O	O
a	O	O
constant	O	O
and	O	O
can	O	O
be	O	O
used	O	O
in	O	O
comparison	O	O
of	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
because	O	O
will	O	O
always	O	O
return	O	O
same	O	O
instance	O	O
.	O	O
So	O	O
in	O	O
the	O	O
above	O	O
scenario	O	O
it	O	O
might	O	O
not	O	O
look	O	O
fit	O	O
but	O	O
somewhere	O	O
if	O	O
you	O	O
are	O	O
using	O	O
it	O	O
while	O	O
comparison	O	O
,	O	O
it	O	O
for	O	O
sure	O	O
has	O	O
impact	O	O
.	O	O
Moreover	O	O
,	O	O
as	O	O
much	O	O
as	O	O
we	O	O
can	O	O
,	O	O
should	O	O
prefer	O	O
the	O	O
use	O	O
of	O	O
constants	O	O
over	O	O
hardcoded	O	O
beacuse	O	O
:	O	O
#	O	O
li	O	O
It	O	O
can	O	O
make	O	O
your	O	O
code	O	O
easily	O	O
maintainable	O	O
.	O	O
If	O	O
any	O	O
situation	O	O
occurs	O	O
in	O	O
future	O	O
for	O	O
change	O	O
,	O	O
you	O	O
can	O	O
change	O	O
only	O	O
at	O	O
a	O	O
single	O	O
place	O	O
.	O	O
#	O	O
li	O	O
The	O	O
code	O	O
looks	O	O
cleaner	O	O
&	O	O
more	O	O
readable	O	O
.	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
5585800	O	O
int	O	O
foo	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
See	O	O
the	O	O
Java	O	O
Documentation	O	O
for	O	O
more	O	O
information	O	O
.	O	O
(	O	O
If	O	O
you	O	O
have	O	O
it	O	O
in	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
(	O	O
or	O	O
the	O	O
ancient	O	O
StringBuffer	B-api_mention	B-api_mention
)	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
need	O	O
to	O	O
do	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
6841333	O	O
If	O	O
I	O	O
run	O	O
the	O	O
following	O	O
program	O	O
,	O	O
which	O	O
parses	O	O
two	O	O
date	O	O
strings	O	O
referencing	O	O
times	O	O
one	O	O
second	O	O
apart	O	O
and	O	O
compares	O	O
them	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
output	O	O
is	O	O
:	O	O
353	O	O
Why	O	O
is	O	O
ld4	O	O
-	O	O
ld3	O	O
not	O	O
1	O	O
(	O	O
as	O	O
I	O	O
would	O	O
expect	O	O
from	O	O
the	O	O
one	O	O
-	O	O
second	O	O
difference	O	O
in	O	O
the	O	O
times	O	O
)	O	O
,	O	O
but	O	O
353	O	O
?	O	O
If	O	O
I	O	O
change	O	O
the	O	O
dates	O	O
to	O	O
times	O	O
one	O	O
second	O	O
later	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
ld4	O	O
-	O	O
ld3	O	O
will	O	O
be	O	O
1	O	O
.	O	O
Java	O	O
version	O	O
:	O	O
#	O	O
pre	O	O
Timezone	B-api_mention	O
(	O	O
TimeZone	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31696485	O	O
When	O	O
using	O	O
the	O	O
Java	O	O
8	O	O
Optional	B-api_mention	B-api_mention
class	O	O
,	O	O
there	O	O
are	O	O
two	O	O
ways	O	O
in	O	O
which	O	O
a	O	O
value	O	O
can	O	O
be	O	O
wrapped	O	O
in	O	O
an	O	O
optional	O	O
.	O	O
#	O	O
pre	O	O
I	O	O
understand	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofNullable	I-api_mention	I-api_mention
is	O	O
the	O	O
only	O	O
safe	O	O
way	O	O
of	O	O
using	O	O
Optional	B-api_mention	B-api_mention
,	O	O
but	O	O
why	O	O
does	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
exist	O	O
at	O	O
all	O	O
?	O	O
Why	O	O
not	O	O
just	O	O
use	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofNullable	I-api_mention	I-api_mention
and	O	O
be	O	O
on	O	O
the	O	O
safe	O	O
side	O	O
at	O	O
all	O	O
times	O	O
?	O	O
Question	O	O
-	O	O
6992608	O	O
,	O	O
answer	O	O
-	O	O
26764904	O	O
As	O	O
pointed	O	O
by	O	O
this	O	O
the	O	O
best	O	O
way	O	O
to	O	O
obtain	O	O
a	O	O
concurrency	O	O
-	O	O
able	O	O
HashSet	B-api_mention	B-api_mention
is	O	O
by	O	O
means	O	O
of	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
synchronizedSet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Set	O	O
s	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
synchronizedSet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
worked	O	O
for	O	O
me	O	O
and	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
seen	O	O
anybody	O	O
really	O	O
pointing	O	O
to	O	O
it	O	O
.	O	O
EDIT	O	O
This	O	O
is	O	O
less	O	O
efficient	O	O
than	O	O
the	O	O
currently	O	O
aproved	O	O
solution	O	O
,	O	O
as	O	O
Eugene	O	O
points	O	O
out	O	O
,	O	O
since	O	O
it	O	O
just	O	O
wraps	O	O
your	O	O
set	O	O
into	O	O
a	O	O
synchronized	O	O
decorator	O	O
,	O	O
while	O	O
a	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
actually	O	O
implements	O	O
low	O	O
-	O	O
level	O	O
concurrency	O	O
and	O	O
it	O	O
can	O	O
back	O	O
your	O	O
Set	O	O
just	O	O
as	O	O
fine	O	O
.	O	O
So	O	O
thanks	O	O
to	O	O
Mr	O	O
.	O	O
Stepanenkov	O	O
for	O	O
making	O	O
that	O	O
clear	O	O
.	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
15202997	O	O
,	O	O
answer	O	O
-	O	O
15203417	O	O
If	O	O
you	O	O
'	O	O
re	O	O
unsure	O	O
about	O	O
something	O	O
,	O	O
try	O	O
writing	O	O
a	O	O
test	O	O
first	O	O
.	O	O
I	O	O
did	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Prints	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
'	O	O
s	O	O
an	O	O
empty	O	O
line	O	O
in	O	O
the	O	O
last	O	O
block	O	O
where	O	O
getSimpleName	B-api_mention	O
returns	O	O
an	O	O
empty	O	O
string	O	O
.	O	O
The	O	O
upshot	O	O
looking	O	O
at	O	O
this	O	O
is	O	O
:	O	O
#	O	O
li	O	O
the	O	O
name	O	O
is	O	O
the	O	O
name	O	O
that	O	O
you	O	O
'	O	O
d	O	O
use	O	O
to	O	O
dynamically	O	O
load	O	O
the	O	O
class	O	O
with	O	O
,	O	O
for	O	O
example	O	O
,	O	O
a	O	O
call	O	O
to	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forName	I-api_mention	I-api_mention
with	O	O
the	O	O
default	O	O
ClassLoader	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
the	O	O
canonical	O	O
name	O	O
is	O	O
the	O	O
name	O	O
that	O	O
would	O	O
be	O	O
used	O	O
in	O	O
an	O	O
import	O	O
statement	O	O
and	O	O
uniquely	O	O
identifies	O	O
the	O	O
class	O	O
.	O	O
Might	O	O
be	O	O
useful	O	O
during	O	O
toString	B-api_mention	B-api_mention
or	O	O
logging	O	O
operations	O	O
.	O	O
#	O	O
li	O	O
the	O	O
simple	O	O
name	O	O
loosely	O	O
identifies	O	O
the	O	O
class	O	O
,	O	O
again	O	O
might	O	O
be	O	O
useful	O	O
during	O	O
toString	B-api_mention	B-api_mention
or	O	O
logging	O	O
operations	O	O
but	O	O
is	O	O
not	O	O
guaranteed	O	O
to	O	O
be	O	O
unique	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923227	O	O
Optionals	O	O
aren	O	O
'	O	O
t	O	O
designed	O	O
for	O	O
this	O	O
purpose	O	O
,	O	O
as	O	O
explained	O	O
nicely	O	O
by	O	O
Brian	O	O
Goetz	O	O
.	O	O
You	O	O
can	O	O
always	O	O
use	O	O
@	O	O
Nullable	O	O
to	O	O
denote	O	O
that	O	O
a	O	O
method	O	O
argument	O	O
can	O	O
be	O	O
null	O	O
.	O	O
Using	O	O
an	O	O
optional	O	O
does	O	O
not	O	O
really	O	O
enable	O	O
you	O	O
to	O	O
write	O	O
your	O	O
method	O	O
logic	O	O
more	O	O
neatly	O	O
.	O	O
Question	O	O
-	O	O
21488056	O	O
,	O	O
answer	O	O
-	O	O
36242382	O	O
You	O	O
can	O	O
use	O	O
Predicates	O	B-api_mention
from	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
#	O	O
pre	O	O
If	O	O
you	O	O
can	O	O
'	O	O
t	O	O
change	O	O
the	O	O
strings	O	O
from	O	O
List	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
only	O	O
need	O	O
a	O	O
negation	O	O
of	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
can	O	O
also	O	O
use	O	O
StringPredicates	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
notEmpty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
a	O	O
contributor	O	O
to	O	O
Eclipse	O	O
Collections	O	B-api_mention
.	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
33233407	O	O
We	O	O
can	O	O
use	O	O
the	O	O
parseInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
the	O	O
Integer	B-api_mention	B-api_mention
wrapper	O	O
class	O	O
for	O	O
converting	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
to	O	O
an	O	O
integer	O	O
value	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
Integer	B-api_mention	B-api_mention
class	O	O
also	O	O
provides	O	O
the	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
We	O	O
can	O	O
also	O	O
use	O	O
toInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
of	O	O
NumberUtils	B-api_mention	B-api_mention
Utility	O	O
Class	O	O
for	O	O
the	O	O
conversion	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
11408427	O	O
,	O	O
answer	O	O
-	O	O
11408526	O	O
Let	O	O
'	O	O
s	O	O
look	O	O
at	O	O
the	O	O
following	O	O
simple	O	O
expressions	O	O
in	O	O
Java	O	O
#	O	O
pre	O	O
The	O	O
compiler	O	O
converts	O	O
StringLiteral	O	O
+	O	O
x	O	O
;	O	O
into	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
internally	O	O
and	O	O
uses	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
"	O	O
add	O	O
"	O	O
the	O	O
integer	O	O
to	O	O
the	O	O
string	O	O
.	O	O
5	O	O
.	O	O
1	O	O
.	O	O
11	O	O
.	O	O
String	B-api_mention	B-api_mention
Conversion	O	O
#	O	O
blockquote	O	O
15	O	O
.	O	O
18	O	O
.	O	O
1	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
optimized	O	O
version	O	O
will	O	O
not	O	O
actually	O	O
do	O	O
a	O	O
full	O	O
wrapped	O	O
String	B-api_mention	B-api_mention
conversion	O	O
first	O	O
.	O	O
This	O	O
is	O	O
a	O	O
good	O	O
illustration	O	O
of	O	O
an	O	O
optimized	O	O
version	O	O
used	O	O
by	O	O
the	O	O
compiler	O	O
,	O	O
albeit	O	O
without	O	O
the	O	O
conversion	O	O
of	O	O
a	O	O
primitive	O	O
,	O	O
where	O	O
you	O	O
can	O	O
see	O	O
the	O	O
compiler	O	O
changing	O	O
things	O	O
into	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
in	O	O
the	O	O
background	O	O
:	O	O
#	O	O
a	O	O
This	O	O
java	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Generates	O	O
this	O	O
-	O	O
see	O	O
how	O	O
the	O	O
two	O	O
concatenation	O	O
styles	O	O
lead	O	O
to	O	O
the	O	O
very	O	O
same	O	O
bytecode	O	O
:	O	O
#	O	O
pre	O	O
Looking	O	O
at	O	O
the	O	O
example	O	O
above	O	O
and	O	O
how	O	O
the	O	O
byte	O	O
code	O	O
based	O	O
on	O	O
the	O	O
source	O	O
code	O	O
in	O	O
the	O	O
given	O	O
example	O	O
is	O	O
generated	O	O
,	O	O
you	O	O
will	O	O
be	O	O
able	O	O
to	O	O
notice	O	O
that	O	O
the	O	O
compiler	O	O
has	O	O
internally	O	O
transformed	O	O
the	O	O
following	O	O
statement	O	O
cip	O	O
+	O	O
ciop	O	O
;	O	O
into	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
In	O	O
other	O	O
words	O	O
,	O	O
the	O	O
operator	O	O
+	O	O
in	O	O
string	O	O
concatenation	O	O
is	O	O
effectively	O	O
a	O	O
shorthand	O	O
for	O	O
the	O	O
more	O	O
verbose	O	O
StringBuilder	B-api_mention	B-api_mention
idiom	O	O
.	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
36875991	O	O
Basically	O	O
,	O	O
=	O	O
=	O	O
compares	O	O
if	O	O
two	O	O
objects	O	O
have	O	O
the	O	O
same	O	O
reference	O	O
on	O	O
the	O	O
heap	O	O
,	O	O
so	O	O
unless	O	O
two	O	O
references	O	O
are	O	O
linked	O	O
to	O	O
the	O	O
same	O	O
object	O	O
,	O	O
this	O	O
comparison	O	O
will	O	O
be	O	O
false	O	O
.	O	B-api_mention
equals	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
method	O	O
inherited	O	O
from	O	O
Object	B-api_mention	B-api_mention
class	O	O
.	O	O
This	O	O
method	O	O
by	O	O
default	O	O
compares	O	O
if	O	O
two	O	O
objects	O	O
have	O	O
the	O	O
same	O	O
referece	O	O
.	O	O
It	O	O
means	O	O
:	O	O
object1	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
<	O	O
=	O	O
>	O	O
object1	O	O
=	O	O
=	O	O
object2	O	O
However	O	O
,	O	O
if	O	O
you	O	O
want	O	O
to	O	O
establish	O	O
equality	O	O
between	O	O
two	O	O
objects	O	O
of	O	O
the	O	O
same	O	O
class	O	O
you	O	O
should	O	O
override	O	O
this	O	O
method	O	O
.	O	O
It	O	O
is	O	O
also	O	O
very	O	O
important	O	O
to	O	O
override	O	O
the	O	O
method	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
have	O	O
overriden	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Implement	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
establishing	O	O
equality	O	O
is	O	O
part	O	O
of	O	O
the	O	O
Java	O	O
Object	B-api_mention	B-api_mention
Contract	O	O
.	O	O
If	O	O
you	O	O
are	O	O
working	O	O
with	O	O
collections	O	O
,	O	O
and	O	O
you	O	O
haven	O	O
'	O	O
t	O	O
implemented	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
Strange	O	B-api_mention
Bad	O	O
Things	O	O
could	O	O
happen	O	O
:	O	O
#	O	O
pre	O	O
null	O	O
will	O	O
be	O	O
printed	O	O
after	O	O
executing	O	O
the	O	O
previous	O	O
code	O	O
if	O	O
you	O	O
haven	O	O
'	O	O
t	O	O
implemented	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
11821801	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
understand	O	O
what	O	O
makes	O	O
the	O	O
lock	O	O
in	O	O
concurrency	O	O
so	O	O
important	O	O
if	O	O
one	O	O
can	O	O
use	O	O
synchronized	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	O
In	O	O
the	O	O
dummy	O	O
code	O	O
below	O	O
,	O	O
I	O	O
can	O	O
do	O	O
either	O	O
:	O	O
#	O	O
li	O	O
synchronized	O	O
the	O	O
entire	O	O
method	O	O
or	O	O
synchronize	O	O
the	O	O
vulnerable	O	O
area	O	O
(	O	O
synchronized	O	O
(	O	O
this	O	O
)	O	O
{	O	O
.	O	O
.	O	O
.	O	O
}	O	O
)	O	O
#	O	O
li	O	O
OR	O	O
lock	O	O
the	O	O
vulnerable	O	O
code	O	O
area	O	O
with	O	O
a	O	O
ReentrantLock	B-api_mention	B-api_mention
.	O	O
Code	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
33804394	O	O
,	O	O
answer	O	O
-	O	O
33814549	O	O
In	O	O
this	O	O
sort	O	O
of	O	O
situation	O	O
I	O	O
would	O	O
write	O	O
#	O	O
pre	O	O
Interestingly	O	O
you	O	O
say	O	O
that	O	O
the	O	O
"	O	O
try	O	O
statement	O	O
will	O	O
never	O	O
fail	O	O
"	O	O
,	O	O
but	O	O
you	O	O
still	O	O
took	O	O
the	O	O
trouble	O	O
to	O	O
write	O	O
a	O	O
statement	O	O
e	O	O
.	B-api_mention	B-api_mention
printStackTrace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
that	O	O
you	O	O
claim	O	O
will	O	O
never	O	O
be	O	O
executed	O	O
.	O	O
Why	O	O
?	O	O
Perhaps	O	O
your	O	O
belief	O	O
is	O	O
not	O	O
that	O	O
firmly	O	O
held	O	O
.	O	O
That	O	O
is	O	O
good	O	O
(	O	O
in	O	O
my	O	O
opinion	O	O
)	O	O
,	O	O
since	O	O
your	O	O
belief	O	O
is	O	O
not	O	O
based	O	O
on	O	O
the	O	O
code	O	O
you	O	O
wrote	O	O
,	O	O
but	O	O
rather	O	O
on	O	O
the	O	O
expectation	O	O
that	O	O
your	O	O
client	O	O
will	O	O
not	O	O
violate	O	O
the	O	O
precondition	O	O
.	O	O
Better	O	O
to	O	O
program	O	O
public	O	O
methods	O	O
defensively	O	O
.	O	O
By	O	O
the	O	O
way	O	O
,	O	O
your	O	O
code	O	O
won	O	O
'	O	O
t	O	O
compile	O	O
for	O	O
me	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
call	O	O
a	O	O
.	B-api_mention	B-api_mention
clone	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
even	O	O
if	O	O
the	O	O
type	O	O
of	O	O
a	O	O
is	O	O
Cloneable	B-api_mention	B-api_mention
.	O	O
At	O	O
least	O	O
Eclipse	O	O
'	O	O
s	O	O
compiler	O	O
says	O	O
so	O	O
.	O	O
Expression	O	O
a	O	O
.	B-api_mention	B-api_mention
clone	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
error	O	O
#	O	O
blockquote	O	O
What	O	O
I	O	O
would	O	O
do	O	O
for	O	O
your	O	O
specific	O	O
case	O	O
is	O	O
#	O	O
pre	O	O
Where	O	O
PubliclyCloneable	O	B-api_mention
is	O	O
defined	O	O
by	O	O
#	O	O
pre	O	O
Or	O	O
,	O	O
if	O	O
you	O	O
absolutely	O	O
need	O	O
the	O	O
parameter	O	O
type	O	O
to	O	O
be	O	O
Cloneable	B-api_mention	B-api_mention
,	O	O
the	O	O
following	O	O
at	O	O
least	O	O
compiles	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6608795	O	O
I	O	O
wonder	O	O
what	O	O
the	O	O
difference	O	O
is	O	O
between	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
ClassLoader	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
edit	O	O
:	O	O
I	O	O
especially	O	O
want	O	O
to	O	O
know	O	O
if	O	O
any	O	O
caching	O	O
is	O	O
involved	O	O
on	O	O
file	O	O
/	O	O
directory	O	O
level	O	O
.	O	O
As	O	O
in	O	O
"	O	O
are	O	O
directory	O	O
listings	O	O
cached	O	O
in	O	O
the	O	O
Class	B-api_mention	B-api_mention
version	O	O
?	O	O
"	O	O
AFAIK	O	O
the	O	O
following	O	O
should	O	O
essentially	O	O
do	O	O
the	O	O
same	O	O
,	O	O
but	O	O
they	O	O
are	O	O
not	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
discovered	O	O
this	O	O
when	O	O
fiddling	O	O
with	O	O
some	O	O
report	O	O
generation	O	O
code	O	O
that	O	O
creates	O	O
a	O	O
new	O	O
file	O	O
in	O	O
WEB	O	O
-	O	O
INF	O	O
/	O	O
classes	O	O
/	O	O
from	O	O
an	O	O
existing	O	O
file	O	O
in	O	O
that	O	O
directory	O	O
.	O	O
When	O	O
using	O	O
the	O	O
method	O	O
from	O	O
Class	B-api_mention	B-api_mention
,	O	O
I	O	O
could	O	O
find	O	O
files	O	O
that	O	O
were	O	O
there	O	O
at	O	O
deployment	O	O
using	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
when	O	O
trying	O	O
to	O	O
fetch	O	O
the	O	O
newly	O	O
created	O	O
file	O	O
,	O	O
I	O	O
recieved	O	O
a	O	O
null	O	O
object	O	O
.	O	O
Browsing	O	O
the	O	O
directory	O	O
clearly	O	O
shows	O	O
that	O	O
the	O	O
new	O	O
file	O	O
is	O	O
there	O	O
.	O	O
The	O	O
filenames	O	O
were	O	O
prepended	O	O
with	O	O
a	O	O
forward	O	O
slash	O	O
as	O	O
in	O	O
"	O	O
/	O	O
myFile	O	O
.	O	O
txt	O	O
"	O	O
.	O	O
The	O	O
ClassLoader	B-api_mention	B-api_mention
version	O	O
of	O	O
getResource	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
other	O	O
hand	O	O
did	O	O
find	O	O
the	O	O
generated	O	O
file	O	O
.	O	O
From	O	O
this	O	O
experience	O	O
it	O	O
seems	O	O
that	O	O
there	O	O
is	O	O
some	O	O
kind	O	O
of	O	O
caching	O	O
of	O	O
the	O	O
directory	O	O
listing	O	O
going	O	O
on	O	O
.	O	O
Am	O	O
I	O	O
right	O	O
,	O	O
and	O	O
if	O	O
so	O	O
,	O	O
where	O	O
is	O	O
this	O	O
documented	O	O
?	O	O
From	O	O
the	O	O
API	O	O
docs	O	O
on	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
blockquote	O	O
To	O	O
me	O	O
,	O	O
this	O	O
reads	O	O
"	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
is	O	O
really	O	O
calling	O	O
its	O	O
own	O	O
classloader	O	O
'	O	O
s	O	O
getResource	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
.	O	O
Which	O	O
would	O	O
be	O	O
the	O	O
same	O	O
as	O	O
doing	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getClassLoader	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
it	O	O
is	O	O
obviously	O	O
not	O	O
.	O	O
Could	O	O
someone	O	O
please	O	O
provide	O	O
me	O	O
with	O	O
some	O	O
illumination	O	O
into	O	O
this	O	O
matter	O	O
?	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489453	O	O
Java	O	O
treats	O	O
String	B-api_mention	B-api_mention
as	O	O
a	O	O
special	O	O
class	O	O
,	O	O
you	O	O
can	O	O
initialize	O	O
in	O	O
both	O	O
ways	O	O
#	O	O
li	O	O
Directly	O	O
assigning	O	O
literal	O	O
String	B-api_mention	B-api_mention
a	O	O
=	O	O
StringLiteral	O	O
;	O	O
#	O	O
li	O	O
As	O	O
other	O	O
Objects	B-api_mention	B-api_mention
using	O	O
new	O	O
keyword	O	O
String	B-api_mention	B-api_mention
a	O	O
=	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
need	O	O
to	O	O
take	O	O
special	O	O
care	O	O
when	O	O
you	O	O
wants	O	O
to	O	O
compare	O	O
with	O	O
=	O	O
=	O	O
sign	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
is	O	O
because	O	O
in	O	O
first	O	O
case	O	O
the	O	O
objects	O	O
a	O	O
and	O	O
b	O	O
are	O	O
kept	O	O
in	O	O
something	O	O
called	O	O
literal	O	O
pool	O	O
and	O	O
they	O	O
both	O	O
are	O	O
referencing	O	O
same	O	O
object	O	O
so	O	O
they	O	O
are	O	O
equal	O	O
in	O	O
both	O	O
ways	O	O
.	O	O
But	O	O
in	O	O
second	O	O
case	O	O
a	O	O
and	O	O
b	O	O
references	O	O
different	O	O
objects	O	O
like	O	O
when	O	O
we	O	O
initialize	O	O
any	O	O
other	O	O
objects	O	O
.	O	O
so	O	O
they	O	O
are	O	O
unequal	O	O
when	O	O
compared	O	O
with	O	O
=	O	O
=	O	O
operator	O	O
whereas	O	O
they	O	O
are	O	O
equal	O	O
in	O	O
values	O	O
.	O	O
Question	O	O
-	O	O
24885223	O	O
,	O	O
answer	O	O
-	O	O
29841832	O	O
Thanks	O	O
to	O	O
@	O	O
marmor	O	O
,	O	O
I	O	O
updated	O	O
my	O	O
answer	O	O
.	O	O
I	O	O
think	O	O
it	O	O
'	O	O
s	O	O
a	O	O
good	O	O
solution	O	O
to	O	O
handle	O	O
the	O	O
onClick	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
ViewHolder	B-api_mention	B-api_mention
class	O	O
constructor	O	O
and	O	O
pass	O	O
it	O	O
to	O	O
the	O	O
parent	O	O
class	O	O
via	O	O
OnItemClickListener	B-api_mention	B-api_mention
interface	O	O
.	O	O
MyAdapter	O	O
.	O	O
java	O	O
#	O	O
pre	O	O
Usage	O	O
of	O	O
adapter	O	O
in	O	O
other	O	O
classes	O	O
:	O	O
MyFragment	O	O
.	O	O
java	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
4871051	O	O
,	O	O
answer	O	O
-	O	O
21274808	O	O
Use	O	O
CodeSource	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
getLocation	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
works	O	O
fine	O	O
in	O	O
JAR	O	O
files	O	O
as	O	O
well	O	O
.	O	O
You	O	O
can	O	O
obtain	O	O
CodeSource	B-api_mention	B-api_mention
by	O	O
ProtectionDomain	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
getCodeSource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
the	O	O
ProtectionDomain	B-api_mention	B-api_mention
in	O	O
turn	O	O
can	O	O
be	O	O
obtained	O	O
by	O	O
Class	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
getProtectionDomain	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
23453287	O	O
One	O	O
of	O	O
the	O	O
most	O	O
useful	O	O
features	O	O
of	O	O
Java	O	O
8	O	O
are	O	O
the	O	O
new	O	O
default	O	O
methods	O	O
on	O	O
interfaces	O	O
.	O	O
There	O	O
are	O	O
essentially	O	O
two	O	O
reasons	O	O
(	O	O
there	O	O
may	O	O
be	O	O
others	O	O
)	O	O
why	O	O
they	O	O
have	O	O
been	O	O
introduced	O	O
:	O	O
#	O	O
li	O	O
Providing	O	O
actual	O	O
default	O	O
implementations	O	O
.	O	O
Example	O	O
:	O	O
Iterator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Allowing	O	O
for	O	O
JDK	O	O
API	O	O
evolution	O	O
.	O	O
Example	O	O
:	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
From	O	O
an	O	O
API	O	O
designer	O	O
'	O	O
s	O	O
perspective	O	O
,	O	O
I	O	O
would	O	O
have	O	O
liked	O	O
to	O	O
be	O	O
able	O	O
to	O	O
use	O	O
other	O	O
modifiers	O	O
on	O	O
interface	O	O
methods	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
final	O	O
.	O	O
This	O	O
would	O	O
be	O	O
useful	O	O
when	O	O
adding	O	O
convenience	O	O
methods	O	O
,	O	O
preventing	O	O
"	O	O
accidental	O	O
"	O	O
overrides	O	O
in	O	O
implementing	O	O
classes	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
above	O	O
is	O	O
already	O	O
common	O	O
practice	O	O
if	O	O
Sender	O	O
were	O	O
a	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
,	O	O
default	O	O
and	O	O
final	O	O
are	O	O
obviously	O	O
contradicting	O	O
keywords	O	O
,	O	O
but	O	O
the	O	O
default	O	O
keyword	O	O
itself	O	O
would	O	O
not	O	O
have	O	O
been	O	O
strictly	O	O
required	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
assuming	O	O
that	O	O
this	O	O
contradiction	O	O
is	O	O
deliberate	O	O
,	O	O
to	O	O
reflect	O	O
the	O	O
subtle	O	O
differences	O	O
between	O	O
"	O	O
class	O	O
methods	O	O
with	O	O
body	O	O
"	O	O
(	O	O
just	O	O
methods	O	O
)	O	O
and	O	O
"	O	O
interface	O	O
methods	O	O
with	O	O
body	O	O
"	O	O
(	O	O
default	O	O
methods	O	O
)	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
differences	O	O
which	O	O
I	O	O
have	O	O
not	O	O
yet	O	O
understood	O	O
.	O	O
At	O	O
some	O	O
point	O	O
of	O	O
time	O	O
,	O	O
support	O	O
for	O	O
modifiers	O	O
like	O	O
static	O	O
and	O	O
final	O	O
on	O	O
interface	O	O
methods	O	O
was	O	O
not	O	O
yet	O	O
fully	O	O
explored	O	O
,	O	O
citing	O	O
Brian	O	O
Goetz	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
that	O	O
time	O	O
in	O	O
late	O	O
2011	O	O
,	O	O
obviously	O	O
,	O	O
support	O	O
for	O	O
static	O	O
methods	O	O
in	O	O
interfaces	O	O
was	O	O
added	O	O
.	O	O
Clearly	O	O
,	O	O
this	O	O
added	O	O
a	O	O
lot	O	O
of	O	O
value	O	O
to	O	O
the	O	O
JDK	O	O
libraries	O	O
themselves	O	O
,	O	O
such	O	O
as	O	O
with	O	O
Comparator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
comparing	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
:	O	O
What	O	O
is	O	O
the	O	O
reason	O	O
final	O	O
(	O	O
and	O	O
also	O	O
static	O	O
final	O	O
)	O	O
never	O	O
made	O	O
it	O	O
to	O	O
Java	O	O
8	O	O
interfaces	O	O
?	O	O
Question	O	O
-	O	O
33147339	O	O
,	O	O
answer	O	O
-	O	O
33147762	O	O
I	O	O
found	O	O
this	O	O
explanation	O	O
:	O	O
#	O	O
blockquote	O	O
In	O	O
Java	O	O
6	O	O
,	O	O
if	O	O
you	O	O
use	O	O
the	O	O
API	O	O
as	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
newCount	O	O
overflows	O	O
(	O	O
this	O	O
becomes	O	O
negative	O	O
)	O	O
,	O	O
if	O	O
(	O	O
args	O	O
)	O	O
will	O	O
return	O	O
false	O	O
and	O	O
you	O	O
may	O	O
mistakenly	O	O
assume	O	O
that	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
was	O	O
increased	O	O
by	O	O
len	B-api_mention	O
.	O	O
Question	O	O
-	O	O
31370403	O	O
,	O	O
answer	O	O
-	O	O
31466466	O	O
Idea	O	O
#	O	O
1	O	O
,	O	O
storing	O	O
the	O	O
Graphics	B-api_mention	B-api_mention
objects	O	O
simply	O	O
wouldn	O	O
'	O	O
t	O	O
work	O	O
.	O	O
The	O	O
Graphics	B-api_mention	O
should	O	O
not	O	O
be	O	O
considered	O	O
as	O	O
"	O	O
holding	O	O
"	O	O
some	O	O
display	O	O
memory	O	O
,	O	O
but	O	O
rather	O	O
as	O	O
a	O	O
handle	O	O
to	O	O
access	O	O
an	O	O
area	O	O
of	O	O
display	O	O
memory	O	O
.	O	O
In	O	O
the	O	O
case	O	O
of	O	O
BufferedImage	B-api_mention	B-api_mention
,	O	O
each	O	O
Graphics	B-api_mention	O
object	O	O
will	O	O
be	O	O
always	O	O
the	O	O
handle	O	O
to	O	O
the	O	O
same	O	O
given	O	O
image	O	O
memory	O	O
buffer	O	O
,	O	O
so	O	O
they	O	O
all	O	O
will	O	O
represent	O	O
the	O	O
same	O	O
image	O	O
.	O	O
Even	O	O
more	O	O
importantly	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
actually	O	O
do	O	O
anything	O	O
with	O	O
the	O	O
stored	O	O
Graphics	B-api_mention	O
:	O	O
As	O	O
they	O	O
do	O	O
not	O	O
store	O	O
anything	O	O
,	O	O
there	O	O
is	O	O
no	O	O
way	O	O
whatsoever	O	O
they	O	O
could	O	O
"	O	O
re	O	O
-	O	O
store	O	O
"	O	O
anything	O	O
.	O	O
Idea	O	O
#	O	O
2	O	O
,	O	O
cloning	O	O
the	O	O
BufferedImage	B-api_mention	B-api_mention
s	O	O
is	O	O
a	O	O
much	O	O
better	O	O
idea	O	O
,	O	O
but	O	O
you	O	O
'	O	O
ll	O	O
indeed	O	O
be	O	O
wasting	O	O
memory	O	O
,	O	O
and	O	O
quickly	O	O
run	O	O
out	O	O
of	O	O
it	O	O
.	O	O
It	O	O
helps	O	O
only	O	O
to	O	O
store	O	O
those	O	O
parts	O	O
of	O	O
the	O	O
image	O	O
affected	O	O
by	O	O
the	O	O
draw	O	O
,	O	O
for	O	O
example	O	O
using	O	O
rectangular	O	O
areas	O	O
,	O	O
but	O	O
it	O	O
still	O	O
costs	O	O
a	O	O
lot	O	O
of	O	O
memory	O	O
.	O	O
Buffering	O	O
those	O	O
undo	O	O
images	O	O
to	O	O
disk	O	O
could	O	O
help	O	O
,	O	O
but	O	O
it	O	O
will	O	O
make	O	O
your	O	O
UI	O	O
slow	O	O
and	O	O
unresponsive	O	O
,	O	O
and	O	O
that	O	O
'	O	O
s	O	O
bad	O	O
;	O	O
furthermore	O	O
,	O	O
it	O	O
makes	O	O
you	O	O
application	O	O
more	O	O
complex	O	O
and	O	O
error	O	O
-	O	O
prone	O	O
.	O	O
My	O	O
alternative	O	O
would	O	O
be	O	O
to	O	O
store	O	O
store	O	O
the	O	O
image	O	O
modifications	O	O
in	O	O
a	O	O
list	O	O
,	O	O
rendered	O	O
from	O	O
first	O	O
to	O	O
last	O	O
on	O	O
top	O	O
of	O	O
the	O	O
image	O	O
.	O	O
An	O	O
undo	O	O
operation	O	O
then	O	O
simply	O	O
consists	O	O
of	O	O
removing	O	O
the	O	O
modification	O	O
from	O	O
the	O	O
list	O	O
.	O	O
This	O	O
requires	O	O
you	O	O
to	O	O
"	O	O
reify	O	O
"	O	O
the	O	O
image	O	O
modifications	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
create	O	O
a	O	O
class	O	O
that	O	O
implements	O	O
a	O	O
single	O	O
modification	O	O
,	O	O
by	O	O
providing	O	O
a	O	O
void	O	O
draw	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
which	O	O
performs	O	O
the	O	O
actual	O	O
drawing	O	O
.	O	O
As	O	O
you	O	O
said	O	O
,	O	O
random	O	O
modifications	O	O
pose	O	O
an	O	O
additional	O	O
problem	O	O
.	O	O
However	O	O
,	O	O
the	O	O
key	O	O
problem	O	O
is	O	O
your	O	O
use	O	O
of	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
create	O	O
random	O	O
numbers	O	O
.	O	O
Instead	O	O
,	O	O
perform	O	O
each	O	O
random	O	O
modification	O	O
with	O	O
a	O	O
Random	B-api_mention	B-api_mention
created	O	O
from	O	O
a	O	O
fixed	O	O
seed	O	O
value	O	O
,	O	O
so	O	O
that	O	O
the	O	O
(	O	O
pseudo	O	O
-	O	O
)	O	O
random	O	O
number	O	O
sequences	O	O
are	O	O
the	O	O
same	O	O
on	O	O
each	O	O
invocation	O	O
of	O	O
draw	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
,	O	O
each	O	O
draw	O	O
has	O	O
exactly	O	O
the	O	O
same	O	O
effects	O	O
.	O	O
(	O	O
That	O	O
'	O	O
s	O	O
why	O	O
they	O	O
are	O	O
called	O	O
"	O	O
pseudo	O	O
-	O	O
random	O	O
"	O	O
-	O	O
-	O	O
the	O	O
generated	O	O
numbers	O	O
look	O	O
random	O	O
,	O	O
but	O	O
they	O	O
are	O	O
just	O	O
as	O	O
deterministic	O	O
as	O	O
any	O	O
other	O	O
function	O	O
.	O	O
)	O	O
In	O	O
contrast	O	O
to	O	O
the	O	O
image	O	O
storing	O	O
technique	O	O
,	O	O
which	O	O
has	O	O
memory	O	O
problems	O	O
,	O	O
the	O	O
problem	O	O
with	O	O
this	O	O
technique	O	O
is	O	O
that	O	O
many	O	O
modifications	O	O
may	O	O
make	O	O
the	O	O
GUI	O	O
slow	O	O
,	O	O
especially	O	O
if	O	O
the	O	O
modifications	O	O
are	O	O
computationally	O	O
intensive	O	O
.	O	O
To	O	O
prevent	O	O
this	O	O
,	O	O
the	O	O
simplest	O	O
way	O	O
would	O	O
be	O	O
to	O	O
fix	O	O
an	O	O
appropriate	O	O
maximum	O	O
size	O	O
of	O	O
the	O	O
list	O	O
of	O	O
undoable	O	O
modifications	O	O
.	O	O
If	O	O
this	O	O
limit	O	O
would	O	O
be	O	O
exceeded	O	O
by	O	O
adding	O	O
a	O	O
new	O	O
modification	O	O
,	O	O
remove	O	O
the	O	O
oldest	O	O
modification	O	O
the	O	O
list	O	O
and	O	O
apply	O	O
it	O	O
to	O	O
the	O	O
backing	O	O
BufferedImage	O	B-api_mention
itself	O	O
.	O	O
The	O	O
following	O	O
simple	O	O
demo	O	O
application	O	O
shows	O	O
that	O	O
(	O	O
and	O	O
how	O	O
)	O	O
this	O	O
all	O	O
works	O	O
together	O	O
.	O	O
It	O	O
also	O	O
includes	O	O
a	O	O
nice	O	O
"	O	O
redo	O	O
"	O	O
feature	O	O
for	O	O
redoing	O	O
undone	O	O
actions	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
9324933	O	O
I	O	O
looked	O	O
at	O	O
the	O	O
default	O	O
Zip	B-api_mention	O
library	O	O
that	O	O
comes	O	O
with	O	O
the	O	O
JDK	O	O
and	O	O
the	O	O
Apache	O	O
compression	O	O
libs	O	O
and	O	O
I	O	O
am	O	O
unhappy	O	O
with	O	O
them	O	O
for	O	O
3	O	O
reasons	O	O
:	O	O
#	O	O
li	O	O
They	O	O
are	O	O
bloated	O	O
and	O	O
have	O	O
bad	O	O
API	O	O
design	O	O
.	O	O
I	O	O
have	O	O
to	O	O
write	O	O
50	O	O
lines	O	O
of	O	O
boiler	O	O
plate	O	O
byte	O	O
array	O	O
output	O	O
,	O	O
zip	O	O
input	O	O
,	O	O
file	O	O
out	O	O
streams	O	O
and	O	O
close	O	O
relevant	O	O
streams	O	O
and	O	O
catch	O	O
exceptions	O	O
and	O	O
move	O	O
byte	O	O
buffers	O	O
on	O	O
my	O	O
own	O	O
?	O	O
Why	O	O
can	O	O
'	O	O
t	O	O
I	O	O
have	O	O
a	O	O
simple	O	O
API	O	O
that	O	O
looks	O	O
like	O	O
this	O	O
Zipper	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unzip	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
Zipper	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
zip	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
that	O	O
just	O	O
works	O	O
?	O	O
#	O	O
li	O	O
It	O	O
seems	O	O
zipping	O	O
unzipping	O	O
destroys	O	O
file	O	O
meta	O	O
-	O	O
data	O	O
and	O	O
password	O	O
handling	O	O
is	O	O
broken	O	O
.	O	O
#	O	O
li	O	O
Also	O	O
,	O	O
all	O	O
the	O	O
libraries	O	O
I	O	O
tried	O	O
were	O	O
2	O	O
-	O	O
3x	O	O
slow	O	O
compared	O	O
to	O	O
the	O	O
command	O	O
line	O	O
zip	O	O
tools	O	O
I	O	O
get	O	O
with	O	O
UNIX	O	O
?	O	O
For	O	O
me	O	O
(	O	O
2	O	O
)	O	O
and	O	O
(	O	O
3	O	O
)	O	O
are	O	O
minor	O	O
points	O	O
but	O	O
I	O	O
really	O	O
want	O	O
a	O	O
good	O	O
tested	O	O
library	O	O
with	O	O
a	O	O
one	O	O
-	O	O
line	O	O
interface	O	O
.	O	O
Question	O	O
-	O	O
25903137	O	O
,	O	O
answer	O	O
-	O	O
25905196	O	O
Here	O	O
are	O	O
some	O	O
variations	O	O
on	O	O
Sotirios	O	O
Delimanolis	O	O
'	O	O
answer	O	O
,	O	O
which	O	O
was	O	O
pretty	O	O
good	O	O
to	O	O
begin	O	O
with	O	O
(	O	O
+	O	O
1	O	O
)	O	O
.	O	O
Consider	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
A	O	O
couple	O	O
points	O	O
here	O	O
.	O	O
First	O	O
is	O	O
the	O	O
use	O	O
of	O	O
wildcards	O	O
in	O	O
the	O	O
generics	O	O
;	O	O
this	O	O
makes	O	O
the	O	O
function	O	O
somewhat	O	O
more	O	O
flexible	O	O
.	O	O
A	O	O
wildcard	O	O
would	O	O
be	O	O
necessary	O	O
if	O	O
,	O	O
for	O	O
example	O	O
,	O	O
you	O	O
wanted	O	O
the	O	O
output	O	O
map	O	O
to	O	O
have	O	O
a	O	O
key	O	O
that	O	O
'	O	O
s	O	O
a	O	O
superclass	O	O
of	O	O
the	O	O
input	O	O
map	O	O
'	O	O
s	O	O
key	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
There	O	O
is	O	O
also	O	O
an	O	O
example	O	O
for	O	O
the	O	O
map	O	O
'	O	O
s	O	O
values	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
really	O	O
contrived	O	O
,	O	O
and	O	O
I	O	O
admit	O	O
that	O	O
having	O	O
the	O	O
bounded	O	O
wildcard	O	O
for	O	O
Y	O	O
only	O	O
helps	O	O
in	O	O
edge	O	O
cases	O	O
.	O	O
)	O	O
A	O	O
second	O	O
point	O	O
is	O	O
that	O	O
instead	O	O
of	O	O
running	O	O
the	O	O
stream	O	O
over	O	O
the	O	O
input	O	O
map	O	O
'	O	O
s	O	O
entrySet	B-api_mention	B-api_mention
,	O	O
I	O	O
ran	O	O
it	O	O
over	O	O
the	O	O
keySet	B-api_mention	B-api_mention
.	O	O
This	O	O
makes	O	O
the	O	O
code	O	O
a	O	O
little	O	O
cleaner	O	O
,	O	O
I	O	O
think	O	O
,	O	O
at	O	O
the	O	O
cost	O	O
of	O	O
having	O	O
to	O	O
fetch	O	O
values	O	O
out	O	O
of	O	O
the	O	O
map	O	O
instead	O	O
of	O	O
from	O	O
the	O	O
map	O	O
entry	O	O
.	O	O
Incidentally	O	O
,	O	O
I	O	O
initially	O	O
had	O	O
key	O	O
-	O	O
>	O	O
key	O	O
as	O	O
the	O	O
first	O	O
argument	O	O
to	O	O
toMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
this	O	O
failed	O	O
with	O	O
a	O	O
type	O	O
inference	O	O
error	O	O
for	O	O
some	O	O
reason	O	O
.	O	O
Changing	O	O
it	O	O
to	O	O
(	O	O
X	O	O
key	O	O
)	O	O
-	O	O
>	O	O
key	O	O
worked	O	O
,	O	O
as	O	O
did	O	O
Function	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Still	O	O
another	O	O
variation	O	O
is	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
uses	O	O
Map	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
of	O	O
streams	O	O
.	O	O
This	O	O
is	O	O
even	O	O
simpler	O	O
,	O	O
I	O	O
think	O	O
,	O	O
because	O	O
it	O	O
dispenses	O	O
with	O	O
the	O	O
collectors	O	O
,	O	O
which	O	O
are	O	O
somewhat	O	O
clumsy	O	O
to	O	O
use	O	O
with	O	O
maps	O	O
.	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
Map	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
the	O	O
key	O	O
and	O	O
value	O	O
as	O	O
separate	O	O
parameters	O	O
,	O	O
whereas	O	O
the	O	O
stream	O	O
has	O	O
only	O	O
one	O	O
value	O	O
-	O	O
-	O	O
and	O	O
you	O	O
have	O	O
to	O	O
choose	O	O
whether	O	O
to	O	O
use	O	O
the	O	O
key	O	O
or	O	O
the	O	O
map	O	O
entry	O	O
as	O	O
that	O	O
value	O	O
.	O	O
On	O	O
the	O	O
minus	O	O
side	O	O
,	O	O
this	O	O
lacks	O	O
the	O	O
rich	O	O
,	O	O
streamy	O	O
goodness	O	O
of	O	O
the	O	O
other	O	O
approaches	O	O
.	O	O
:	O	O
-	O	O
)	O	O
Question	O	O
-	O	O
7655127	O	O
,	O	O
answer	O	O
-	O	O
7655177	O	O
String	B-api_mention	B-api_mention
text	O	O
=	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyValueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
String	B-api_mention	B-api_mention
text	O	O
=	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
is	O	O
arguably	O	O
better	O	O
(	O	O
encapsulates	O	O
the	O	O
new	O	O
String	B-api_mention	B-api_mention
call	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
33375616	O	O
Most	O	O
of	O	O
these	O	O
answers	O	O
miss	O	O
the	O	O
big	O	O
picture	O	O
,	O	O
which	O	O
is	O	O
that	O	O
,	O	O
as	O	O
far	O	O
as	O	O
the	O	O
Java	O	O
language	O	O
is	O	O
concerned	O	O
,	O	O
there	O	O
is	O	O
no	O	O
more	O	O
difference	O	O
between	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
than	O	O
there	O	O
is	O	O
between	O	O
any	O	O
other	O	O
two	O	O
methods	O	O
.	O	O
They	O	O
'	O	O
re	O	O
both	O	O
just	O	O
methods	O	O
.	O	O
They	O	O
both	O	O
run	O	O
in	O	O
the	O	O
thread	O	O
that	O	O
called	O	O
them	O	O
.	O	O
They	O	O
both	O	O
do	O	O
whatever	O	O
they	O	O
were	O	O
coded	O	O
to	O	O
do	O	O
,	O	O
and	O	O
then	O	O
they	O	O
both	O	O
return	O	O
,	O	O
still	O	O
in	O	O
the	O	O
same	O	O
thread	O	O
,	O	O
to	O	O
their	O	O
callers	O	O
.	O	O
The	O	O
biggest	O	O
difference	O	O
is	O	O
that	O	O
most	O	O
of	O	O
the	O	O
code	O	O
for	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
native	O	O
code	O	O
while	O	O
,	O	O
in	O	O
most	O	O
cases	O	O
,	O	O
the	O	O
code	O	O
for	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
going	O	O
to	O	O
be	O	O
pure	O	O
Java	O	O
.	O	O
But	O	O
that	O	O
'	O	O
s	O	O
not	O	O
much	O	O
of	O	O
a	O	O
difference	O	O
.	O	O
Code	O	O
is	O	O
code	O	O
.	O	O
Native	O	O
code	O	O
is	O	O
harder	O	O
to	O	O
find	O	O
,	O	O
and	O	O
harder	O	O
to	O	O
understand	O	O
when	O	O
you	O	O
find	O	O
it	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
still	O	O
just	O	O
code	O	O
that	O	O
tells	O	O
the	O	O
computer	O	O
what	O	O
to	O	O
do	O	O
.	O	O
So	O	O
,	O	O
what	O	O
does	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
do	O	O
?	O	O
It	O	O
creates	O	O
a	O	O
new	O	O
native	O	O
thread	O	O
,	O	O
it	O	O
arranges	O	O
for	O	O
that	O	O
thread	O	O
to	O	O
call	O	O
t	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
then	O	O
it	O	O
tells	O	O
the	O	O
OS	O	O
to	O	O
let	O	O
the	O	O
new	O	O
thread	O	O
run	O	O
.	O	O
Then	O	O
it	O	O
returns	O	O
.	O	O
And	O	O
what	O	O
does	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
do	O	O
?	O	O
The	O	O
funny	O	O
thing	O	O
is	O	O
,	O	O
the	O	O
person	O	O
asking	O	O
this	O	O
question	O	O
is	O	O
the	O	O
person	O	O
who	O	O
wrote	O	O
it	O	O
.	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
whatever	O	O
you	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
,	O	O
the	O	O
developer	O	O
who	O	O
wrote	O	O
it	O	O
)	O	O
designed	O	O
it	O	O
to	O	O
do	O	O
.	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
method	O	O
that	O	O
the	O	O
library	O	O
provides	O	O
for	O	O
your	O	O
code	O	O
to	O	O
call	O	O
when	O	O
you	O	O
want	O	O
a	O	O
new	O	O
thread	O	O
.	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
method	O	O
that	O	O
you	O	O
provide	O	O
for	O	O
the	O	O
library	O	O
to	O	O
call	O	O
in	O	O
the	O	O
new	O	O
thread	O	O
.	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
31965160	O	O
With	O	O
Java	O	O
8	O	O
Streams	O	B-api_mention
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
if	O	O
you	O	O
need	O	O
a	O	O
set	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
6252678	O	O
,	O	O
answer	O	O
-	O	O
6252802	O	O
You	O	O
need	O	O
a	O	O
DateTimeFormatter	B-api_mention	B-api_mention
appropriate	O	O
to	O	O
the	O	O
format	O	O
you	O	O
'	O	O
re	O	O
using	O	O
.	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
the	O	O
docs	O	O
for	O	O
instructions	O	O
on	O	O
how	O	O
to	O	O
build	O	O
one	O	O
.	O	O
Off	O	O
the	O	O
cuff	O	O
,	O	O
I	O	O
think	O	O
you	O	O
need	O	O
format	O	O
=	O	O
DateTimeFormat	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forPattern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
20746429	O	O
,	O	O
answer	O	O
-	O	O
20765715	O	O
Such	O	O
an	O	O
operation	O	O
ought	O	O
to	O	O
be	O	O
possible	O	O
with	O	O
a	O	O
Java	O	O
8	O	O
Stream	B-api_mention	B-api_mention
,	O	O
but	O	O
it	O	O
can	O	O
'	O	O
t	O	O
necessarily	O	O
be	O	O
done	O	O
efficiently	O	O
-	O	O
-	O	O
for	O	O
example	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
necessarily	O	O
parallelize	O	O
such	O	O
an	O	O
operation	O	O
,	O	O
as	O	O
you	O	O
have	O	O
to	O	O
look	O	O
at	O	O
elements	O	O
in	O	O
order	O	O
.	O	O
The	O	O
API	O	O
doesn	O	O
'	O	O
t	O	O
provide	O	O
an	O	O
easy	O	O
way	O	O
to	O	O
do	O	O
it	O	O
,	O	O
but	O	O
what	O	O
'	O	O
s	O	O
probably	O	O
the	O	O
simplest	O	O
way	O	O
is	O	O
to	O	O
take	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
iterator	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
wrap	O	O
the	O	O
Iterator	O	B-api_mention
to	O	O
have	O	O
a	O	O
"	O	O
take	O	O
-	O	O
while	O	O
"	O	O
implementation	O	O
,	O	O
and	O	O
then	O	O
go	O	O
back	O	O
to	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
then	O	O
a	O	O
Stream	B-api_mention	B-api_mention
.	O	O
Or	O	O
-	O	O
-	O	O
maybe	O	O
-	O	O
-	O	O
wrap	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
,	O	O
though	O	O
it	O	O
can	O	O
'	O	O
t	O	O
really	O	O
be	O	O
split	O	O
anymore	O	O
in	O	O
this	O	O
implementation	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
an	O	O
untested	O	O
implementation	O	O
of	O	O
takeWhile	O	O
on	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
32542424	O	O
What	O	O
you	O	O
can	O	O
do	O	O
is	O	O
scan	O	O
the	O	O
entire	O	O
text	O	O
using	O	O
Scanner	B-api_mention	B-api_mention
and	O	O
go	O	O
through	O	O
the	O	O
text	O	O
line	O	O
by	O	O
line	O	O
.	O	O
Of	O	O
course	O	O
you	O	O
should	O	O
import	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
Scanner	B-api_mention	B-api_mention
basically	O	O
scans	O	O
all	O	O
the	O	O
text	O	O
.	O	O
The	O	O
while	O	O
loop	O	O
is	O	O
used	O	O
to	O	O
traverse	O	O
through	O	O
the	O	O
entire	O	O
text	O	O
.	O	O
The	O	O
.	B-api_mention	B-api_mention
hasNextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
is	O	O
a	O	O
boolean	O	O
that	O	O
returns	O	O
true	O	O
if	O	O
there	O	O
are	O	O
still	O	O
more	O	O
lines	O	O
in	O	O
the	O	O
text	O	O
.	O	O
The	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
gives	O	O
you	O	O
an	O	O
entire	O	O
line	O	O
as	O	O
a	O	O
String	B-api_mention	B-api_mention
which	O	O
you	O	O
can	O	O
then	O	O
use	O	O
the	O	O
way	O	O
you	O	O
want	O	O
.	O	O
Try	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
print	O	O
the	O	O
text	O	O
.	O	O
Side	O	O
Note	O	O
:	O	O
.	O	O
txt	O	O
is	O	O
the	O	O
file	O	O
type	O	O
text	O	O
.	O	O
Question	O	O
-	O	O
14602062	O	O
,	O	O
answer	O	O
-	O	O
14602092	O	O
From	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
API	O	O
Doc	O	O
:	O	O
#	O	O
blockquote	O	O
Overloaded	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
more	O	O
appropriate	O	O
for	O	O
your	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
15182496	O	O
,	O	O
answer	O	O
-	O	O
15182578	O	O
The	O	O
other	O	O
answers	O	O
explain	O	O
why	O	O
,	O	O
but	O	O
here	O	O
is	O	O
how	O	O
:	O	O
new	O	O
Random	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
The	O	O
first	O	O
6	O	O
numbers	O	O
that	O	O
the	O	O
above	O	O
random	O	O
generates	O	O
are	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
the	O	O
first	O	O
6	O	O
numbers	O	O
that	O	O
new	O	O
Random	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
generates	O	O
are	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
just	O	O
add	O	O
those	O	O
numbers	O	O
to	O	O
the	O	O
integer	O	O
representation	O	O
of	O	O
the	O	O
character	O	O
`	O	O
(	O	O
which	O	O
is	O	O
96	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
4818699	O	O
,	O	O
answer	O	O
-	O	O
4819109	O	O
If	O	O
you	O	O
look	O	O
at	O	O
the	O	O
methods	O	O
AtomicInteger	B-api_mention	B-api_mention
has	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
notice	O	O
that	O	O
they	O	O
tend	O	O
to	O	O
correspond	O	O
to	O	O
common	O	O
operations	O	O
on	O	O
ints	O	O
.	O	O
For	O	O
instance	O	O
:	O	O
#	O	O
pre	O	O
is	O	O
the	O	O
thread	O	O
-	O	O
safe	O	O
version	O	O
of	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
methods	O	O
map	O	O
like	O	O
this	O	O
:	O	O
+	O	O
+	O	O
i	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
incrementAndGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
i	O	O
+	O	O
+	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
getAndIncrement	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
-	O	O
i	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
decrementAndGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
i	O	O
-	O	O
-	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
getAndDecrement	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
i	O	O
=	O	O
x	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
set	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
x	O	O
=	O	O
i	O	O
is	O	O
x	O	O
=	O	O
i	O	O
.	B-api_mention	B-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
There	O	O
are	O	O
other	O	O
convenience	O	O
methods	O	O
as	O	O
well	O	O
,	O	O
like	O	O
compareAndSet	B-api_mention	B-api_mention
or	O	O
addAndGet	B-api_mention	B-api_mention
Question	O	O
-	O	O
29333689	O	O
,	O	O
answer	O	O
-	O	O
29341981	O	O
The	O	O
best	O	O
answer	O	O
is	O	O
already	O	O
given	O	O
(	O	O
XOR	O	O
-	O	O
ing	O	O
the	O	O
elements	O	O
)	O	O
,	O	O
this	O	O
is	O	O
to	O	O
provide	O	O
an	O	O
alternative	O	O
,	O	O
more	O	O
general	O	O
way	O	O
.	O	O
If	O	O
the	O	O
input	O	O
array	O	O
would	O	O
be	O	O
sorted	O	O
(	O	O
we	O	O
can	O	O
make	O	O
it	O	O
sorted	O	O
)	O	O
,	O	O
we	O	O
could	O	O
simply	O	O
iterate	O	O
over	O	O
the	O	O
elements	O	O
in	O	O
pairs	O	O
(	O	O
stepping	O	O
by	O	O
2	O	O
)	O	O
and	O	O
if	O	O
the	O	O
elements	O	O
of	O	O
the	O	O
"	O	O
pair	O	O
"	O	O
are	O	O
different	O	O
,	O	O
we	O	O
'	O	O
re	O	O
done	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
This	O	O
solution	O	O
sorts	O	O
the	O	O
input	O	O
array	O	O
;	O	O
if	O	O
this	O	O
is	O	O
unwanted	O	O
or	O	O
not	O	O
allowed	O	O
,	O	O
it	O	O
can	O	O
be	O	O
cloned	O	O
first	O	O
:	O	O
arr	O	O
=	O	O
arr	O	O
.	B-api_mention	B-api_mention
clone	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
If	O	O
input	O	O
array	O	O
is	O	O
sorted	O	O
,	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
can	O	O
be	O	O
left	O	O
out	O	O
of	O	O
course	O	O
.	O	O
Generalization	O	O
The	O	O
advantage	O	O
of	O	O
this	O	O
solution	O	O
is	O	O
that	O	O
it	O	O
can	O	O
be	O	O
applied	O	O
to	O	O
all	O	O
types	O	O
which	O	O
are	O	O
comparable	O	O
and	O	O
therefore	O	O
can	O	O
be	O	O
sorted	O	O
(	O	O
types	O	O
which	O	O
implement	O	O
Comparable	B-api_mention	B-api_mention
)	O	O
,	O	O
for	O	O
example	O	O
String	B-api_mention	B-api_mention
or	O	O
Date	B-api_mention	B-api_mention
.	O	O
The	O	O
XOR	O	O
solution	O	O
is	O	O
limited	O	O
to	O	O
numbers	O	O
only	O	O
.	O	O
Here	O	O
is	O	O
a	O	O
slightly	O	O
modified	O	O
version	O	O
which	O	O
takes	O	O
an	O	O
input	O	O
array	O	O
of	O	O
any	O	O
element	O	O
type	O	O
which	O	O
is	O	O
comparable	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
In	O	O
most	O	O
cases	O	O
you	O	O
could	O	O
also	O	O
use	O	O
arr	O	O
[	O	O
i	O	O
]	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
compare	O	O
elements	O	O
instead	O	O
of	O	O
using	O	O
Comparable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
compareTo	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
For	O	O
details	O	O
read	O	O
the	O	O
linked	O	O
javadoc	O	O
.	O	O
Quoting	O	O
the	O	O
relevant	O	O
part	O	O
:	O	O
#	O	O
blockquote	O	O
Now	O	O
you	O	O
can	O	O
call	O	O
this	O	O
with	O	O
a	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
for	O	O
example	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Output	O	O
:	O	O
2	O	O
Final	O	O
notes	O	O
:	O	O
Starting	O	O
from	O	O
the	O	O
problem	O	O
statement	O	O
it	O	O
is	O	O
not	O	O
checked	O	O
whether	O	O
there	O	O
are	O	O
more	O	O
than	O	O
2	O	O
occurrences	O	O
of	O	O
the	O	O
elements	O	O
,	O	O
and	O	O
neither	O	O
is	O	O
whether	O	O
the	O	O
array	O	O
length	O	O
is	O	O
odd	O	O
.	O	O
Also	O	O
the	O	O
second	O	O
example	O	O
doesn	O	O
'	O	O
t	O	O
check	O	O
for	O	O
null	O	O
values	O	O
,	O	O
these	O	O
are	O	O
to	O	O
be	O	O
added	O	O
if	O	O
necessary	O	O
.	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
22502206	O	O
When	O	O
reading	O	O
this	O	O
question	O	O
one	O	O
can	O	O
get	O	O
the	O	O
impression	O	O
,	O	O
that	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
in	O	O
combination	O	O
with	O	O
lambda	O	O
expressions	O	O
is	O	O
a	O	O
shortcut	O	O
/	O	O
replacement	O	O
for	O	O
writing	O	O
a	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
.	O	O
This	O	O
is	O	O
simply	O	O
not	O	O
true	O	O
.	O	O
This	O	O
code	O	O
from	O	O
the	O	O
OP	O	O
:	O	O
joins	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
is	O	O
not	O	O
intended	O	O
as	O	O
a	O	O
shortcut	O	O
for	O	O
writing	O	O
#	O	O
pre	O	O
and	O	O
should	O	O
certainly	O	O
not	O	O
be	O	O
used	O	O
in	O	O
this	O	O
way	O	O
.	O	O
Instead	O	O
it	O	O
is	O	O
intended	O	O
as	O	O
a	O	O
shortcut	O	O
(	O	O
although	O	O
it	O	O
is	O	O
not	O	O
exactly	O	O
the	O	O
same	O	O
)	O	O
for	O	O
writing	O	O
#	O	O
pre	O	O
And	O	O
it	O	O
is	O	O
as	O	O
a	O	O
replacement	O	O
for	O	O
the	O	O
following	O	O
Java	O	O
7	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Replacing	O	O
the	O	O
body	O	O
of	O	O
a	O	O
loop	O	O
with	O	O
a	O	O
functional	O	O
interface	O	O
,	O	O
as	O	O
in	O	O
the	O	O
examples	O	O
above	O	O
,	O	O
makes	O	O
your	O	O
code	O	O
more	O	O
explicit	O	O
:	O	O
You	O	O
are	O	O
saying	O	O
that	O	O
(	O	O
1	O	O
)	O	O
the	O	O
body	O	O
of	O	O
the	O	O
loop	O	O
does	O	O
not	O	O
affect	O	O
the	O	O
surrounding	O	O
code	O	O
and	O	O
control	O	O
flow	O	O
,	O	O
and	O	O
(	O	O
2	O	O
)	O	O
the	O	O
body	O	O
of	O	O
the	O	O
loop	O	O
may	O	O
be	O	O
replaced	O	O
with	O	O
a	O	O
different	O	O
implementation	O	O
of	O	O
the	O	O
function	O	O
,	O	O
without	O	O
affecting	O	O
the	O	O
surrounding	O	O
code	O	O
.	O	O
Not	O	O
being	O	O
able	O	O
to	O	O
access	O	O
non	O	O
final	O	O
variables	O	O
of	O	O
the	O	O
outer	O	O
scope	O	O
is	O	O
not	O	O
a	O	O
deficit	O	O
of	O	O
functions	O	O
/	O	O
lambdas	O	O
,	O	O
it	O	O
is	O	O
a	O	O
feature	O	O
that	O	O
distinguishes	O	O
the	O	O
semantics	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
from	O	O
the	O	O
semantics	O	O
of	O	O
a	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
.	O	O
Once	O	O
one	O	O
gets	O	O
used	O	O
to	O	O
the	O	O
syntax	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
it	O	O
makes	O	O
the	O	O
code	O	O
more	O	O
readable	O	O
,	O	O
because	O	O
you	O	O
immediately	O	O
get	O	O
this	O	O
additional	O	O
information	O	O
about	O	O
the	O	O
code	O	O
.	O	O
Traditional	O	O
for	O	O
-	O	O
each	O	O
loops	O	O
will	O	O
certainly	O	O
stay	O	O
good	O	O
practice	O	O
(	O	O
to	O	O
avoid	O	O
the	O	O
overused	O	O
term	O	O
"	O	O
best	O	O
practice	O	O
"	O	O
)	O	O
in	O	O
Java	O	O
.	O	O
But	O	O
this	O	O
doesn	O	O
'	O	O
t	O	O
mean	O	O
,	O	O
that	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
should	O	O
be	O	O
considered	O	O
bad	O	O
practice	O	O
or	O	O
bad	O	O
style	O	O
.	O	O
It	O	O
is	O	O
always	O	O
good	O	O
practice	O	O
,	O	O
to	O	O
use	O	O
the	O	O
right	O	O
tool	O	O
for	O	O
doing	O	O
the	O	O
job	O	O
,	O	O
and	O	O
this	O	O
includes	O	O
mixing	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loops	O	O
with	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
where	O	O
it	O	O
makes	O	O
sense	O	O
.	O	O
Since	O	O
the	O	O
downsides	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
have	O	O
already	O	O
been	O	O
discussed	O	O
in	O	O
this	O	O
thread	O	O
,	O	O
here	O	O
are	O	O
some	O	O
reasons	O	O
,	O	O
why	O	O
you	O	O
might	O	O
probably	O	O
want	O	O
to	O	O
use	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
:	O	O
#	O	O
li	O	O
To	O	O
make	O	O
your	O	O
code	O	O
more	O	O
explicit	O	O
:	O	O
As	O	O
described	O	O
above	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
can	O	O
make	O	O
your	O	O
code	O	O
more	O	O
explicit	O	O
and	O	O
readable	O	O
in	O	O
some	O	O
situations	O	O
.	O	O
#	O	O
li	O	O
To	O	O
make	O	O
your	O	O
code	O	O
more	O	O
extensible	O	O
and	O	O
maintainable	O	O
:	O	O
Using	O	O
a	O	O
function	O	O
as	O	O
the	O	O
body	O	O
of	O	O
a	O	O
loop	O	O
allows	O	O
you	O	O
to	O	O
replace	O	O
this	O	O
function	O	O
with	O	O
different	O	O
implementations	O	O
(	O	O
see	O	O
Strategy	O	O
Pattern	O	B-api_mention
)	O	O
.	O	O
You	O	O
could	O	O
e	O	O
.	O	O
g	O	O
.	O	O
easily	O	O
replace	O	O
the	O	O
lambda	O	O
expression	O	O
with	O	O
a	O	O
method	O	O
call	O	O
,	O	O
that	O	O
may	O	O
be	O	O
overwritten	O	O
by	O	O
sub	O	O
-	O	O
classes	O	O
:	O	O
joins	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Then	O	O
you	O	O
could	O	O
provide	O	O
default	O	O
strategies	O	O
using	O	O
an	O	O
enum	O	O
,	O	O
that	O	O
implements	O	O
the	O	O
functional	O	O
interface	O	O
.	O	O
This	O	O
not	O	O
only	O	O
makes	O	O
your	O	O
code	O	O
more	O	O
extensible	O	O
,	O	O
it	O	O
also	O	O
increases	O	O
maintainability	O	O
because	O	O
it	O	O
decouples	O	O
the	O	O
loop	O	O
implementation	O	O
from	O	O
the	O	O
loop	O	O
declaration	O	O
.	O	O
#	O	O
li	O	O
To	O	O
make	O	O
your	O	O
code	O	O
more	O	O
debuggable	O	O
:	O	O
Seperating	O	O
the	O	O
loop	O	O
implementation	O	O
from	O	O
the	O	O
declaration	O	O
can	O	O
also	O	O
make	O	O
debugging	O	O
more	O	O
easy	O	O
,	O	O
because	O	O
you	O	O
could	O	O
have	O	O
a	O	O
specialized	O	O
debug	O	O
implementation	O	O
,	O	O
that	O	O
prints	O	O
out	O	O
debug	O	O
messages	O	O
,	O	O
without	O	O
the	O	O
need	O	O
to	O	O
clutter	O	O
your	O	O
main	O	O
code	O	O
with	O	O
if	O	O
(	O	O
args	O	O
)	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
debug	O	O
implementation	O	O
could	O	O
e	O	O
.	O	O
g	O	O
.	O	O
be	O	O
a	O	O
delegate	O	O
,	O	O
that	O	O
decorates	O	O
the	O	O
actual	O	O
function	O	O
implementation	O	O
.	O	O
#	O	O
li	O	O
To	O	O
optimize	O	O
performance	O	O
-	O	O
critical	O	O
code	O	O
:	O	O
Contrary	O	O
to	O	O
some	O	O
of	O	O
the	O	O
assertions	O	O
in	O	O
this	O	O
thread	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
does	O	O
already	O	O
provide	O	O
better	O	O
performance	O	O
than	O	O
a	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
,	O	O
at	O	O
least	O	O
when	O	O
using	O	O
ArrayList	B-api_mention	B-api_mention
and	O	O
running	O	O
Hotspot	O	O
in	O	O
"	O	O
-	O	O
client	O	O
"	O	O
mode	O	O
.	O	O
While	O	O
this	O	O
performance	O	O
boost	O	O
is	O	O
small	O	O
and	O	O
negligible	O	O
for	O	O
most	O	O
use	O	O
cases	O	O
,	O	O
there	O	O
are	O	O
situations	O	O
,	O	O
where	O	O
this	O	O
extra	O	O
performance	O	O
can	O	O
make	O	O
a	O	O
difference	O	O
.	O	O
E	O	O
.	O	O
g	O	O
.	O	O
library	O	O
maintainers	O	O
will	O	O
certainly	O	O
want	O	O
to	O	O
evaluate	O	O
,	O	O
if	O	O
some	O	O
of	O	O
their	O	O
existing	O	O
loop	O	O
implementations	O	O
should	O	O
be	O	O
replaced	O	O
with	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
.	O	O
To	O	O
back	O	O
this	O	O
statement	O	O
up	O	O
with	O	O
facts	O	O
,	O	O
I	O	O
have	O	O
done	O	O
some	O	O
micro	O	O
-	O	O
benchmarks	O	O
with	O	O
Caliper	O	B-api_mention
.	O	O
Here	O	O
is	O	O
the	O	O
test	O	O
code	O	O
(	O	O
latest	O	O
Caliper	O	O
from	O	O
git	O	O
is	O	O
needed	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
are	O	O
the	O	O
results	O	O
:	O	O
#	O	O
li	O	O
Results	O	O
for	O	O
-	O	O
client	O	O
#	O	O
li	O	O
Results	O	O
for	O	O
-	O	O
server	O	O
When	O	O
running	O	O
with	O	O
"	O	O
-	O	O
client	O	O
"	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
outperforms	O	O
the	O	O
traditional	O	O
for	O	O
loop	O	O
over	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
,	O	O
but	O	O
is	O	O
still	O	O
slower	O	O
than	O	O
directly	O	O
iterating	O	O
over	O	O
an	O	O
array	O	O
.	O	O
When	O	O
running	O	O
with	O	O
"	O	O
-	O	O
server	O	O
"	O	O
,	O	O
the	O	O
performance	O	O
of	O	O
all	O	O
approaches	O	O
is	O	O
about	O	O
the	O	O
same	O	O
.	O	O
#	O	O
li	O	O
To	O	O
provide	O	O
optional	O	O
support	O	O
for	O	O
parallel	O	O
execution	O	O
:	O	O
It	O	O
has	O	O
already	O	O
been	O	O
said	O	O
here	O	O
,	O	O
that	O	O
the	O	O
possibility	O	O
to	O	O
execute	O	O
the	O	O
functional	O	O
interface	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
in	O	O
parallel	O	O
using	O	O
streams	O	O
,	O	O
is	O	O
certainly	O	O
an	O	O
important	O	O
aspect	O	O
.	O	O
Since	O	O
Collection	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
guarantee	O	O
,	O	O
that	O	O
the	O	O
loop	O	O
is	O	O
actually	O	O
executed	O	O
in	O	O
parallel	O	O
,	O	O
one	O	O
must	O	O
consider	O	O
this	O	O
an	O	O
optional	O	O
feature	O	O
.	O	O
By	O	O
iterating	O	O
over	O	O
your	O	O
list	O	O
with	O	O
list	O	O
.	B-api_mention	B-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
,	O	O
you	O	O
explicitly	O	O
say	O	O
:	O	O
This	O	O
loop	O	O
supports	O	O
parallel	O	O
execution	O	O
,	O	O
but	O	O
it	O	O
does	O	O
not	O	O
depend	O	O
on	O	O
it	O	O
.	O	O
Again	O	O
,	O	O
this	O	O
is	O	O
a	O	O
feature	O	O
and	O	O
not	O	O
a	O	O
deficit	O	O
!	O	O
By	O	O
moving	O	O
the	O	O
decision	O	O
for	O	O
parallel	O	O
execution	O	O
away	O	O
from	O	O
your	O	O
actual	O	O
loop	O	O
implementation	O	O
,	O	O
you	O	O
allow	O	O
optional	O	O
optimization	O	O
of	O	O
your	O	O
code	O	O
,	O	O
without	O	O
affecting	O	O
the	O	O
code	O	O
itself	O	O
,	O	O
which	O	O
is	O	O
a	O	O
good	O	O
thing	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
the	O	O
default	O	O
parallel	O	O
stream	O	O
implementation	O	O
does	O	O
not	O	O
fit	O	O
your	O	O
needs	O	O
,	O	O
no	O	O
one	O	O
is	O	O
preventing	O	O
you	O	O
from	O	O
providing	O	O
your	O	O
own	O	O
implementation	O	O
.	O	O
You	O	O
could	O	O
e	O	O
.	O	O
g	O	O
.	O	O
provide	O	O
an	O	O
optimized	O	O
collection	O	O
depending	O	O
on	O	O
the	O	O
underlying	O	O
operating	O	O
system	O	O
,	O	O
on	O	O
the	O	O
size	O	O
of	O	O
the	O	O
collection	O	O
,	O	O
on	O	O
the	O	O
number	O	O
of	O	O
cores	O	O
,	O	O
and	O	O
on	O	O
some	O	O
preference	O	O
settings	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
nice	O	O
thing	O	O
here	O	O
is	O	O
,	O	O
that	O	O
your	O	O
loop	O	O
implementation	O	O
doesn	O	O
'	O	O
t	O	O
need	O	O
to	O	O
know	O	O
or	O	O
care	O	O
about	O	O
these	O	O
details	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14526729	O	O
The	O	O
real	O	O
problem	O	O
with	O	O
this	O	O
is	O	O
that	O	O
it	O	O
'	O	O
s	O	O
output	O	O
histogram	O	O
is	O	O
dependent	O	O
on	O	O
the	O	O
initial	O	O
seed	O	O
far	O	O
to	O	O
much	O	O
-	O	O
much	O	O
of	O	O
the	O	O
time	O	O
it	O	O
will	O	O
end	O	O
up	O	O
with	O	O
a	O	O
near	O	O
uniform	O	O
output	O	O
but	O	O
a	O	O
lot	O	O
of	O	O
the	O	O
time	O	O
will	O	O
have	O	O
distinctly	O	O
un	O	O
-	O	O
uniform	O	O
output	O	O
.	O	O
Inspired	O	O
by	O	O
this	O	O
article	O	O
about	O	O
how	O	O
bad	O	O
php	O	O
'	O	O
s	O	O
rand	O	O
(	O	O
)	O	O
function	O	O
is	O	O
,	O	O
I	O	O
made	O	O
some	O	O
random	O	O
matrix	O	O
images	O	O
using	O	O
QuickRandom	B-api_mention	B-api_mention
and	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
.	O	O
This	O	O
run	O	O
shows	O	O
how	O	O
sometimes	O	O
the	O	O
seed	O	O
can	O	O
have	O	O
a	O	O
bad	O	O
effect	O	O
(	O	O
in	O	O
this	O	O
case	O	O
favouring	O	O
lower	O	O
numbers	O	O
)	O	O
where	O	O
as	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
is	O	O
pretty	O	O
uniform	O	O
.	O	O
QuickRandom	B-api_mention	O
#	O	O
img	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
#	O	O
img	O	O
Even	O	O
Worse	O	O
If	O	O
we	O	O
initialise	O	O
QuickRandom	B-api_mention	B-api_mention
as	O	O
new	O	O
QuickRandom	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
we	O	O
get	O	O
this	O	O
image	O	O
:	O	O
#	O	O
img	O	O
The	O	O
Code	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32356762	O	O
,	O	O
answer	O	O
-	O	O
32357142	O	O
When	O	O
returning	O	O
List	B-api_mention	B-api_mention
,	O	O
you	O	O
'	O	O
ll	O	O
be	O	O
promoting	O	O
program	O	O
to	O	O
an	O	O
interface	O	O
,	O	O
which	O	O
is	O	O
a	O	O
very	O	O
good	O	O
practice	O	O
.	O	O
However	O	O
,	O	O
this	O	O
approach	O	O
has	O	O
its	O	O
limitation	O	O
.	O	O
For	O	O
example	O	O
,	O	O
you	O	O
cannot	O	O
use	O	O
some	O	O
methods	O	O
that	O	O
are	O	O
defined	O	O
for	O	O
ArrayList	B-api_mention	B-api_mention
and	O	O
don	O	O
'	O	O
t	O	O
exist	O	O
in	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
-	O	O
See	O	O
this	O	O
answer	O	O
for	O	O
details	O	O
.	O	O
I	O	O
'	O	O
m	O	O
quoting	O	O
the	O	O
API	O	O
Design	O	O
from	O	O
the	O	O
The	O	O
Java	O	O
™	O	O
Tutorials	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
essentially	O	O
an	O	O
array	O	O
,	O	O
they	O	O
are	O	O
my	O	O
first	O	O
choice	O	O
when	O	O
I	O	O
need	O	O
to	O	O
have	O	O
a	O	O
"	O	O
collection	O	O
-	O	O
array	O	O
"	O	O
.	O	O
So	O	O
if	O	O
I	O	O
want	O	O
to	O	O
convert	O	O
enumeration	O	O
to	O	O
a	O	O
list	O	O
,	O	O
my	O	O
choice	O	O
would	O	O
be	O	O
an	O	O
array	O	O
list	O	O
.	O	O
In	O	O
any	O	O
other	O	O
cases	O	O
,	O	O
it	O	O
'	O	O
s	O	O
still	O	O
valid	O	O
to	O	O
write	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
19418427	O	O
,	O	O
answer	O	O
-	O	O
19418548	O	O
As	O	O
per	O	O
my	O	O
research	O	O
,	O	O
all	O	O
the	O	O
final	O	O
String	B-api_mention	B-api_mention
are	O	O
interned	O	O
in	O	O
Java	O	O
.	O	O
From	O	O
one	O	O
of	O	O
the	O	O
blog	O	O
post	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
it	O	O
means	O	O
if	O	O
you	O	O
call	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
can	O	O
compare	O	O
two	O	O
strings	O	O
using	O	O
=	O	O
=	O	O
operator	O	O
.	O	O
But	O	O
here	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
not	O	O
necessary	O	O
because	O	O
in	O	O
Java	O	O
final	O	O
String	B-api_mention	B-api_mention
are	O	O
internally	O	O
interned	O	O
.	O	O
You	O	O
can	O	O
find	O	O
more	O	O
information	O	O
String	B-api_mention	B-api_mention
comparision	O	O
using	O	O
=	O	O
=	O	O
operator	O	O
and	O	O
Javadoc	O	O
for	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Also	O	O
refer	O	O
this	O	O
Stackoverflow	O	O
post	O	O
for	O	O
more	O	O
information	O	O
.	O	O
Question	O	O
-	O	O
14602062	O	O
,	O	O
answer	O	O
-	O	O
14602155	O	O
From	O	O
the	O	O
documentation	O	O
of	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
So	O	O
you	O	O
will	O	O
have	O	O
to	O	O
use	O	O
the	O	O
two	O	O
argument	O	O
version	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
with	O	O
a	O	O
negative	O	O
value	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
split	O	O
=	O	O
data	O	O
.	O	B-api_mention
split	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Doc	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
will	O	O
not	O	O
leave	O	O
out	O	O
any	O	O
empty	O	O
elements	O	O
,	O	O
including	O	O
the	O	O
trailing	O	O
ones	O	O
.	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
28043703	O	O
As	O	O
others	O	O
have	O	O
noted	O	O
,	O	O
getting	O	O
the	O	O
hostname	O	O
based	O	O
on	O	O
DNS	O	O
resolution	O	O
is	O	O
unreliable	O	O
.	O	O
Since	O	O
this	O	O
question	O	O
is	O	O
unfortunately	O	O
still	O	O
relevant	O	O
in	O	O
2016	O	O
,	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
share	O	O
with	O	O
you	O	O
my	O	O
network	O	O
-	O	O
independent	O	O
solution	O	O
,	O	O
with	O	O
some	O	O
test	O	O
runs	O	O
on	O	O
different	O	O
systems	O	O
.	O	O
The	O	O
following	O	O
code	O	O
tries	O	O
to	O	O
do	O	O
the	O	O
following	O	O
:	O	O
#	O	O
li	O	O
On	O	O
Windows	O	O
#	O	O
li	O	O
Read	O	O
the	O	O
COMPUTERNAME	O	O
environment	O	O
variable	O	O
through	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
li	O	O
Execute	O	O
hostname	O	O
.	O	O
exe	O	O
and	O	O
read	O	O
the	O	O
response	O	O
#	O	O
li	O	O
On	O	O
Linux	O	O
#	O	O
li	O	O
Read	O	O
the	O	O
HOSTNAME	O	O
environment	O	O
variable	O	O
through	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Execute	O	O
hostname	O	O
and	O	O
read	O	O
the	O	O
response	O	O
#	O	O
li	O	O
Read	O	O
/	O	O
etc	O	O
/	O	O
hostname	O	O
(	O	O
to	O	O
do	O	O
this	O	O
I	O	O
'	O	O
m	O	O
executing	O	O
cat	O	O
since	O	O
the	O	O
snippet	O	O
already	O	O
contains	O	O
code	O	O
to	O	O
execute	O	O
and	O	O
read	O	O
.	O	O
Simply	O	O
reading	O	O
the	O	O
file	O	O
would	O	O
be	O	O
better	O	O
,	O	O
though	O	O
)	O	O
.	O	O
The	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Results	O	O
for	O	O
different	O	O
operating	O	O
systems	O	O
:	O	O
OpenSuse	O	O
13	O	O
.	O	O
1	O	O
#	O	O
pre	O	O
Ubuntu	O	O
14	O	O
.	O	O
04	O	O
LTS	O	O
This	O	O
one	O	O
is	O	O
kinda	O	O
strange	O	O
since	O	O
echo	O	O
$	O	O
HOSTNAME	O	O
returns	O	O
the	O	O
correct	O	O
hostname	O	O
,	O	O
but	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
:	O	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
According	O	O
to	O	O
legolas108	O	O
,	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
works	O	O
on	O	O
Ubuntu	O	O
14	O	O
.	O	O
04	O	O
if	O	O
you	O	O
run	O	O
export	O	O
HOSTNAME	O	O
before	O	O
executing	O	O
the	O	O
Java	O	O
code	O	O
.	O	O
Windows	O	O
7	O	O
#	O	O
pre	O	O
The	O	O
machine	O	O
names	O	O
have	O	O
been	O	O
replaced	O	O
but	O	O
I	O	O
kept	O	O
the	O	O
capitalization	O	O
and	O	O
structure	O	O
.	O	O
Note	O	O
the	O	O
extra	O	O
newline	O	O
when	O	O
executing	O	O
hostname	O	O
,	O	O
you	O	O
might	O	O
have	O	O
to	O	O
take	O	O
it	O	O
into	O	O
account	O	O
in	O	O
some	O	O
cases	O	O
.	O	O
Question	O	O
-	O	O
7032070	O	O
Assuming	O	O
that	O	O
arraylist	O	O
is	O	O
defined	O	O
as	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
arraylist	O	O
,	O	O
is	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
removeAll	I-api_mention	I-api_mention
(	I-api_mention	O
arraylist	I-api_mention	O
)	I-api_mention	O
equivalent	O	O
to	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
If	O	O
so	O	O
,	O	O
can	O	O
I	O	O
assume	O	O
that	O	O
the	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
more	O	O
efficient	O	O
for	O	O
emptying	O	O
the	O	O
array	O	O
list	O	O
?	O	O
Are	O	O
there	O	O
any	O	O
caveats	O	O
in	O	O
using	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
removeAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
of	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
5585876	O	O
For	O	O
example	O	O
,	O	O
here	O	O
are	O	O
two	O	O
ways	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
is	O	O
a	O	O
slight	O	O
difference	O	O
between	O	O
these	O	O
methods	O	O
:	O	O
#	O	O
li	O	O
valueOf	B-api_mention	B-api_mention
returns	O	O
a	O	O
new	O	O
or	O	O
cached	O	O
instance	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Integer	I-api_mention	I-api_mention
#	O	O
li	O	O
parseInt	B-api_mention	B-api_mention
returns	O	O
primitive	O	O
int	O	O
.	O	O
The	O	O
same	O	O
is	O	O
for	O	O
all	O	O
cases	O	O
:	O	O
Short	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
/	O	O
parseShort	B-api_mention	B-api_mention
,	O	O
Long	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
/	O	O
parseLong	B-api_mention	B-api_mention
,	O	O
etc	O	O
.	O	O
Question	O	O
-	O	O
6470651	O	O
,	O	O
answer	O	O
-	O	O
18544736	O	O
Threads	O	O
are	O	O
not	O	O
collected	O	O
until	O	O
they	O	O
terminate	O	O
.	O	O
They	O	O
serve	O	O
as	O	O
roots	O	O
of	O	O
garbage	O	O
collection	O	O
.	O	O
They	O	O
are	O	O
one	O	O
of	O	O
the	O	O
few	O	O
objects	O	O
that	O	O
won	O	O
'	O	O
t	O	O
be	O	O
reclaimed	O	O
simply	O	O
by	O	O
forgetting	O	O
about	O	O
them	O	O
or	O	O
clearing	O	O
references	O	O
to	O	O
them	O	O
.	O	O
Consider	O	O
:	O	O
the	O	O
basic	O	O
pattern	O	O
to	O	O
terminate	O	O
a	O	O
worker	O	O
thread	O	O
is	O	O
to	O	O
set	O	O
some	O	O
condition	O	O
variable	O	O
seen	O	O
by	O	O
the	O	O
thread	O	O
.	O	O
The	O	O
thread	O	O
can	O	O
check	O	O
the	O	O
variable	O	O
periodically	O	O
and	O	O
use	O	O
that	O	O
as	O	O
a	O	O
signal	O	O
to	O	O
terminate	O	O
.	O	O
If	O	O
the	O	O
variable	O	O
is	O	O
not	O	O
declared	O	O
volatile	O	O
,	O	O
then	O	O
the	O	O
change	O	O
to	O	O
the	O	O
variable	O	O
might	O	O
not	O	O
be	O	O
seen	O	O
by	O	O
the	O	O
thread	O	O
,	O	O
so	O	O
it	O	O
won	O	O
'	O	O
t	O	O
know	O	O
to	O	O
terminate	O	O
.	O	O
Or	O	O
imagine	O	O
if	O	O
some	O	O
threads	O	O
want	O	O
to	O	O
update	O	O
a	O	O
shared	O	O
object	O	O
,	O	O
but	O	O
deadlock	O	O
while	O	O
trying	O	O
to	O	O
lock	O	O
on	O	O
it	O	O
.	O	O
If	O	O
you	O	O
only	O	O
have	O	O
a	O	O
handful	O	O
of	O	O
threads	O	O
these	O	O
bugs	O	O
will	O	O
probably	O	O
be	O	O
obvious	O	O
because	O	O
your	O	O
program	O	O
will	O	O
stop	O	O
working	O	O
properly	O	O
.	O	O
If	O	O
you	O	O
have	O	O
a	O	O
thread	O	O
pool	O	O
that	O	O
creates	O	O
more	O	O
threads	O	O
as	O	O
needed	O	O
,	O	O
then	O	O
the	O	O
obsolete	O	O
/	O	O
stuck	O	O
threads	O	O
might	O	O
not	O	O
be	O	O
noticed	O	O
,	O	O
and	O	O
will	O	O
accumulate	O	O
indefinitely	O	O
,	O	O
causing	O	O
a	O	O
memory	O	O
leak	O	O
.	O	O
Threads	O	O
are	O	O
likely	O	O
to	O	O
use	O	O
other	O	O
data	O	O
in	O	O
your	O	O
application	O	O
,	O	O
so	O	O
will	O	O
also	O	O
prevent	O	O
anything	O	O
they	O	O
directly	O	O
reference	O	O
from	O	O
ever	O	O
being	O	O
collected	O	O
.	O	O
As	O	O
a	O	O
toy	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Call	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
gc	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
all	O	O
you	O	O
like	O	O
,	O	O
but	O	O
the	O	O
object	O	O
passed	O	O
to	O	O
leakMe	O	O
will	O	O
never	O	O
die	O	O
.	O	O
(	O	O
*	O	O
edited	O	O
*	O	O
)	O	O
Question	O	O
-	O	O
20877086	O	O
,	O	O
answer	O	O
-	O	O
20889556	O	O
To	O	O
complement	O	O
the	O	O
given	O	O
answers	O	O
,	O	O
also	O	O
take	O	O
note	O	O
of	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
code	O	O
will	O	O
also	O	O
print	O	O
:	O	O
false	O	O
As	O	O
user	O	O
Jay	O	O
has	O	O
claimed	O	O
in	O	O
a	O	O
comment	O	O
for	O	O
the	O	O
accepted	O	O
answer	O	O
,	O	O
care	O	O
must	O	O
be	O	O
taken	O	O
when	O	O
using	O	O
operator	O	O
=	O	O
=	O	O
on	O	O
objects	O	O
,	O	O
here	O	O
you	O	O
'	O	O
re	O	O
checking	O	O
if	O	O
both	O	O
references	O	O
are	O	O
the	O	O
same	O	O
,	O	O
which	O	O
is	O	O
not	O	O
,	O	O
because	O	O
they	O	O
are	O	O
different	O	O
objets	O	O
,	O	O
although	O	O
they	O	O
represent	O	O
the	O	O
very	O	O
same	O	O
value	O	O
.	O	O
To	O	O
compare	O	O
objects	O	O
,	O	O
you	O	O
should	O	O
use	O	O
the	O	O
equals	O	B-api_mention
method	O	O
instead	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
will	O	O
print	O	O
:	O	O
true	O	O
You	O	O
may	O	O
ask	O	O
,	O	O
But	O	O
then	O	O
why	O	O
the	O	O
first	O	O
line	O	O
printed	O	O
true	O	O
?	O	O
.	O	O
Checking	O	O
the	O	O
source	O	O
code	O	O
for	O	O
the	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
method	O	O
,	O	O
you	O	O
can	O	O
see	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
the	O	O
param	O	O
is	O	O
an	O	O
integer	O	O
between	O	O
IntegerCache	B-api_mention	O
.	I-api_mention	O
low	I-api_mention	O
(	O	O
defaulted	O	O
to	O	O
-	O	O
128	O	O
)	O	O
and	O	O
IntegerCache	B-api_mention	B-api_mention
.	I-api_mention	O
high	I-api_mention	O
(	O	O
calculated	O	O
at	O	O
runtime	O	O
with	O	O
minimum	O	O
value	O	O
127	O	O
)	O	O
then	O	O
a	O	O
pre	O	O
-	O	O
allocated	O	O
(	O	O
cached	O	O
)	O	O
object	O	O
is	O	O
returned	O	O
.	O	O
So	O	O
when	O	O
you	O	O
use	O	O
127	O	O
as	O	O
parameter	O	O
,	O	O
you	O	O
'	O	O
re	O	O
getting	O	O
two	O	O
references	O	O
to	O	O
same	O	O
cached	O	O
object	O	O
and	O	O
getting	O	O
true	O	O
in	O	O
the	O	O
comparison	O	O
of	O	O
the	O	O
references	O	O
.	O	O
Question	O	O
-	O	O
16252269	O	O
,	O	O
answer	O	O
-	O	O
16252296	O	O
Use	O	O
util	O	O
method	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
class	O	O
,	O	O
i	O	O
.	O	O
e	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
In	O	O
fact	O	O
,	O	O
if	O	O
you	O	O
want	O	O
to	O	O
sort	O	O
custom	O	O
object	O	O
you	O	O
can	O	O
use	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
see	O	O
collections	O	O
api	O	O
Question	O	O
-	O	O
6667243	O	O
,	O	O
answer	O	O
-	O	O
6667310	O	O
You	O	O
can	O	O
use	O	O
Mode	O	O
.	O	O
mode1	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
however	O	O
you	O	O
often	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
do	O	O
this	O	O
.	O	O
Mode	O	O
mode	O	O
=	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
5785745	O	O
,	O	O
answer	O	O
-	O	O
15962949	O	O
If	O	O
you	O	O
want	O	O
to	O	O
make	O	O
a	O	O
copy	O	O
of	O	O
:	O	O
int	O	O
[	O	O
]	O	O
a	O	O
=	O	O
{	O	O
1	O	O
,	O	O
2	O	O
,	O	O
3	O	O
,	O	O
4	O	O
,	O	O
5	O	O
}	O	O
;	O	O
This	O	O
is	O	O
the	O	O
way	O	O
to	O	O
go	O	O
:	O	O
int	O	O
[	O	O
]	O	O
b	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
may	O	O
be	O	O
faster	O	O
than	O	O
a	O	O
.	B-api_mention	B-api_mention
clone	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
small	O	O
arrays	O	O
.	O	O
Both	O	O
copy	O	O
elements	O	O
equally	O	O
fast	O	O
but	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
Object	B-api_mention	B-api_mention
so	O	O
the	O	O
compiler	O	O
has	O	O
to	O	O
insert	O	O
an	O	O
implicit	O	O
cast	O	O
to	O	O
int	O	O
[	O	O
]	O	O
.	O	O
You	O	O
can	O	O
see	O	O
it	O	O
in	O	O
the	O	O
bytecode	O	O
,	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6094575	O	O
,	O	O
answer	O	O
-	O	O
26159586	O	O
when	O	O
using	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
)	O	O
getConstructor	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
the	O	O
constructor	O	O
has	O	O
to	O	O
be	O	O
declared	O	O
public	O	O
.	O	O
Otherwise	O	O
a	O	O
NoSuchMethodException	B-api_mention	B-api_mention
is	O	O
thrown	O	O
.	O	O
if	O	O
you	O	O
want	O	O
to	O	O
access	O	O
a	O	O
non	O	O
-	O	O
public	O	O
constructor	O	O
you	O	O
have	O	O
to	O	O
use	O	O
instead	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
)	O	O
getDeclaredConstructor	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32182250	O	O
Integer	B-api_mention	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	O
a	I-api_mention	O
)	I-api_mention	O
can	O	O
return	O	O
false	O	O
But	O	O
you	O	O
have	O	O
to	O	O
be	O	O
really	O	O
evil	O	O
and	O	O
use	O	O
reflections	O	O
and	O	O
Multithreading	O	O
:	O	O
If	O	O
you	O	O
run	O	O
this	O	O
code	O	O
,	O	O
there	O	O
is	O	O
a	O	O
chance	O	O
that	O	O
a	O	O
racing	O	O
condition	O	O
can	O	O
change	O	O
the	O	O
internal	O	O
Value	O	O
of	O	O
myInt	O	O
while	O	O
the	O	O
comparision	O	O
takes	O	O
place	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
simulate	O	O
this	O	O
condition	O	O
,	O	O
just	O	O
set	O	O
a	O	O
breakpoint	O	O
inside	O	O
of	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
run	O	O
the	O	O
code	O	O
in	O	O
debug	O	O
and	O	O
hit	O	O
continue	O	O
.	O	O
This	O	O
will	O	O
create	O	O
a	O	O
delay	O	O
which	O	O
creates	O	O
the	O	O
race	O	O
condition	O	O
artificially	O	O
and	O	O
the	O	O
console	O	O
will	O	O
return	O	O
false	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
39005452	O	O
The	O	O
best	O	O
post	O	O
I	O	O
'	O	O
ve	O	O
seen	O	O
on	O	O
the	O	O
topic	O	O
was	O	O
written	O	O
by	O	O
Daniel	O	O
Olszewski	O	O
and	O	O
can	O	O
be	O	O
found	O	O
at	O	O
#	O	O
a	O	O
.	O	O
While	O	O
others	O	O
mention	O	O
when	O	O
you	O	O
should	O	O
or	O	O
should	O	O
not	O	O
use	O	O
Optional	B-api_mention	B-api_mention
,	O	O
this	O	O
post	O	O
actually	O	O
explains	O	O
why	O	O
.	O	O
Cross	O	O
-	O	O
posting	O	O
here	O	O
in	O	O
case	O	O
the	O	O
link	O	O
goes	O	O
down	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
22036885	O	O
,	O	O
answer	O	O
-	O	O
22037068	O	O
As	O	O
said	O	O
in	O	O
API	O	O
#	O	O
blockquote	O	O
It	O	O
'	O	O
s	O	O
because	O	O
of	O	O
cannot	O	O
represent	O	O
double	O	O
value	O	O
exactly	O	O
.	O	O
So	O	O
you	O	O
have	O	O
to	O	O
use	O	O
BigDecimal	B-api_mention	B-api_mention
bigDecimal	O	O
=	O	O
BigDecimal	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
of	O	O
BigDecimal	B-api_mention	B-api_mention
bigDecimal	O	O
=	O	O
new	O	O
BigDecimal	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
8172420	O	O
,	O	O
answer	O	O
-	O	O
8172439	O	O
You	O	O
can	O	O
use	O	O
Character	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
char	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
that	O	O
this	O	O
method	O	O
simply	O	O
returns	O	O
a	O	O
call	O	O
to	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
char	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
also	O	O
works	O	O
.	O	O
As	O	O
others	O	O
have	O	O
noted	O	O
,	O	O
string	O	O
concatenation	O	O
works	O	O
as	O	O
a	O	O
shortcut	O	O
as	O	O
well	O	O
:	O	O
String	B-api_mention	B-api_mention
s	O	O
=	O	O
StringLiteral	O	O
+	O	O
CharLiteral	O	O
;	O	O
But	O	O
this	O	O
compiles	O	O
down	O	O
to	O	O
:	O	O
String	B-api_mention	B-api_mention
s	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
is	O	O
less	O	O
efficient	O	O
because	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
is	O	O
backed	O	O
by	O	O
a	O	O
char	O	O
[	O	O
]	O	O
(	O	O
over	O	O
-	O	O
allocated	O	O
by	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
16	O	O
)	O	O
,	O	O
only	O	O
for	O	O
that	O	O
array	O	O
to	O	O
be	O	O
defensively	O	O
copied	O	O
by	O	O
the	O	O
resulting	O	O
String	B-api_mention	B-api_mention
.	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
gets	O	O
in	O	O
the	O	O
back	O	O
door	O	O
"	O	O
by	O	O
wrapping	O	O
the	O	O
char	O	O
in	O	O
a	O	O
single	O	O
-	O	O
element	O	O
array	O	O
and	O	O
passing	O	O
it	O	O
to	O	O
the	O	O
package	O	O
private	O	O
constructor	O	O
String	B-api_mention	B-api_mention
(	O	O
char	O	O
[	O	O
]	O	O
,	O	O
boolean	O	O
)	O	O
,	O	O
which	O	O
avoids	O	O
the	O	O
array	O	O
copy	O	O
.	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
6271668	O	O
I	O	O
'	O	O
m	O	O
assuming	O	O
this	O	O
is	O	O
happening	O	O
for	O	O
an	O	O
anonymous	O	O
class	O	O
.	O	O
When	O	O
you	O	O
create	O	O
an	O	O
anonymous	O	O
class	O	O
you	O	O
actually	O	O
create	O	O
a	O	O
class	O	O
that	O	O
extends	O	O
the	O	O
class	O	O
whose	O	O
name	O	O
you	O	O
got	O	O
.	O	O
The	O	O
"	O	O
cleaner	O	O
"	O	O
way	O	O
to	O	O
get	O	O
the	O	O
name	O	O
you	O	O
want	O	O
is	O	O
:	O	O
If	O	O
your	O	O
class	O	O
is	O	O
an	O	O
anonymous	O	O
inner	O	O
class	O	O
,	O	O
getSuperClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
give	O	O
you	O	O
the	O	O
class	O	O
that	O	O
it	O	O
was	O	O
created	O	O
from	O	O
.	O	O
If	O	O
you	O	O
created	O	O
it	O	O
from	O	O
an	O	O
interface	O	O
than	O	O
you	O	O
'	O	O
re	O	O
sort	O	O
of	O	O
SOL	O	O
because	O	O
the	O	O
best	O	O
you	O	O
can	O	O
do	O	O
is	O	O
getInterfaces	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
might	O	O
give	O	O
you	O	O
more	O	O
than	O	O
one	O	O
interface	O	O
.	O	O
The	O	O
"	O	O
hacky	O	O
"	O	O
way	O	O
is	O	O
to	O	O
just	O	O
get	O	O
the	O	O
name	O	O
with	O	O
getClassName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
use	O	O
a	O	O
regex	O	O
to	O	O
drop	O	O
the	O	O
$	O	O
1	O	O
.	O	O
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
25074487	O	O
-	O	O
getParameter	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
get	O	O
the	O	O
value	O	O
from	O	O
the	O	O
posted	O	O
form	O	O
of	O	O
the	O	O
input	O	O
box	O	O
named	O	O
"	O	O
testParam	O	O
"	O	O
which	O	O
is	O	O
"	O	O
Client	O	O
param	O	O
"	O	O
.	O	O
It	O	O
will	O	O
then	O	O
print	O	O
it	O	O
out	O	O
,	O	O
so	O	O
you	O	O
should	O	O
see	O	O
"	O	O
Client	O	O
Param	O	O
"	O	O
on	O	O
the	O	O
screen	O	O
.	O	O
So	O	O
request	O	B-api_mention
.	B-api_mention	I-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
retrieve	O	O
a	O	O
value	O	O
that	O	O
the	O	O
client	O	O
has	O	O
submitted	O	O
.	O	O
You	O	O
will	O	O
get	O	O
the	O	O
value	O	O
on	O	O
the	O	O
server	O	O
side	O	O
.	O	O
-	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
request	O	O
.	B-api_mention	B-api_mention
getAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
this	O	O
is	O	O
all	O	O
done	O	O
server	O	O
side	O	O
.	O	O
YOU	O	O
add	O	O
the	O	O
attribute	O	O
to	O	O
the	O	O
request	O	O
and	O	O
YOU	O	O
submit	O	O
the	O	O
request	O	O
to	O	O
another	O	O
resource	O	O
,	O	O
the	O	O
client	O	O
does	O	O
not	O	O
know	O	O
about	O	O
this	O	O
.	O	O
So	O	O
all	O	O
the	O	O
code	O	O
handling	O	O
this	O	O
would	O	O
typically	O	O
be	O	O
in	O	O
servlets	O	O
.	B-api_mention	O
getAttribute	I-api_mention	O
always	O	O
return	O	O
object	O	O
.	O	O
Question	O	O
-	O	O
5192512	O	O
,	O	O
answer	O	O
-	O	O
5193094	O	O
There	O	O
are	O	O
basically	O	O
two	O	O
alternatives	O	O
,	O	O
using	O	O
setLength	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
reset	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
or	O	O
creating	O	O
a	O	O
new	O	O
one	O	O
in	O	O
each	O	O
iteration	O	O
.	O	O
Both	O	O
can	O	O
have	O	O
pros	O	O
and	O	O
cons	O	O
depending	O	O
on	O	O
the	O	O
usage	O	O
.	O	O
If	O	O
you	O	O
know	O	O
the	O	O
expected	O	O
capacity	O	O
of	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
beforehand	O	O
,	O	O
creating	O	O
a	O	O
new	O	O
one	O	O
each	O	O
time	O	O
should	O	O
be	O	O
just	O	O
as	O	O
fast	O	O
as	O	O
setting	O	O
a	O	O
new	O	O
length	O	O
.	O	O
It	O	O
will	O	O
also	O	O
help	O	O
the	O	O
garbage	O	O
collector	O	O
,	O	O
since	O	O
each	O	O
StringBuilder	B-api_mention	B-api_mention
will	O	O
be	O	O
relatively	O	O
short	O	O
-	O	O
lived	O	O
and	O	O
the	O	O
gc	O	O
is	O	O
optimized	O	O
for	O	O
that	O	O
.	O	O
When	O	O
you	O	O
don	O	O
'	O	O
t	O	O
know	O	O
the	O	O
capacity	O	O
,	O	O
reusing	O	O
the	O	O
same	O	O
StringBuilder	B-api_mention	B-api_mention
might	O	O
be	O	O
faster	O	O
.	O	O
Each	O	O
time	O	O
you	O	O
exceed	O	O
the	O	O
capacity	O	O
when	O	O
appending	O	O
,	O	O
a	O	O
new	O	O
backing	O	O
array	O	O
has	O	O
to	O	O
be	O	O
allocated	O	O
and	O	O
the	O	O
previous	O	O
content	O	O
has	O	O
to	O	O
be	O	O
copied	O	O
.	O	O
By	O	O
reusing	O	O
the	O	O
same	O	O
StringBuilder	B-api_mention	B-api_mention
,	O	O
it	O	O
will	O	O
reach	O	O
the	O	O
needed	O	O
capacity	O	O
after	O	O
some	O	O
iterations	O	O
and	O	O
there	O	O
won	O	O
'	O	O
t	O	O
be	O	O
any	O	O
copying	O	O
thereafter	O	O
.	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29495065	O	O
#	O	O
li	O	O
It	O	O
is	O	O
checking	O	O
if	O	O
newType	O	O
is	O	O
array	O	O
of	O	O
Objects	O	B-api_mention
or	O	O
not	O	O
:	O	O
#	O	O
pre	O	O
Why	O	O
to	O	O
do	O	O
that	O	O
?	O	O
Because	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
n	O	O
]	O	O
is	O	O
faster	O	O
than	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
#	O	O
li	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
an	O	O
array	O	O
of	O	O
types	O	O
defined	O	O
by	O	O
the	O	O
first	O	O
argument	O	O
,	O	O
eg	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
class	I-api_mention	I-api_mention
-	O	O
>	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
Note	O	O
that	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	B-api_mention
class	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getComponentType	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	O
class	I-api_mention	O
#	O	O
li	O	O
You	O	O
cannot	O	O
use	O	O
it	O	O
like	O	O
that	O	O
,	O	O
but	O	O
it	O	O
can	O	O
be	O	O
like	O	O
this	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
nums	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
in	O	O
this	O	O
case	O	O
it	O	O
depends	O	O
only	O	O
on	O	O
actual	O	O
type	O	O
of	O	O
elements	O	O
,	O	O
eg	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
will	O	O
fail	O	O
,	O	O
you	O	O
cannot	O	O
write	O	O
in	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
anything	O	O
but	O	O
Integer	B-api_mention	B-api_mention
Question	O	O
-	O	O
24603186	O	O
,	O	O
answer	O	O
-	O	O
24603187	O	O
The	O	O
Javadocs	O	O
for	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	O
(	I-api_mention	O
parallelS	I-api_mention	O
|	I-api_mention	O
s	I-api_mention	O
)	I-api_mention	O
tream	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
Stream	B-api_mention	B-api_mention
itself	O	O
don	O	O
'	O	O
t	O	O
answer	O	O
the	O	O
question	O	O
,	O	O
so	O	O
it	O	O
'	O	O
s	O	O
off	O	O
to	O	O
the	O	O
mailing	O	O
lists	O	O
for	O	O
the	O	O
rationale	O	O
.	O	O
I	O	O
went	O	O
through	O	O
the	O	O
lambda	O	O
-	O	O
libs	O	O
-	O	O
spec	O	O
-	O	O
observers	O	O
archives	O	O
and	O	O
found	O	O
one	O	O
thread	O	O
specifically	O	O
about	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
another	O	O
thread	O	O
that	O	O
touched	O	O
on	O	O
whether	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Arrays	I-api_mention	I-api_mention
should	O	O
provide	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
match	O	O
(	O	O
or	O	O
actually	O	O
,	O	O
whether	O	O
it	O	O
should	O	O
be	O	O
removed	O	O
)	O	O
.	O	O
There	O	O
was	O	O
no	O	O
once	O	O
-	O	O
and	O	O
-	O	O
for	O	O
-	O	O
all	O	O
conclusion	O	O
,	O	O
so	O	O
perhaps	O	O
I	O	O
'	O	O
ve	O	O
missed	O	O
something	O	O
from	O	O
another	O	O
list	O	O
or	O	O
the	O	O
matter	O	O
was	O	O
settled	O	O
in	O	O
private	O	O
discussion	O	O
.	O	O
(	O	O
Perhaps	O	O
Brian	O	O
Goetz	O	O
,	O	O
one	O	O
of	O	O
the	O	O
principals	O	O
of	O	O
this	O	O
discussion	O	O
,	O	O
can	O	O
fill	O	O
in	O	O
anything	O	O
missing	O	O
.	O	O
)	O	O
The	O	O
participants	O	O
made	O	O
their	O	O
points	O	O
well	O	O
,	O	O
so	O	O
this	O	O
answer	O	O
is	O	O
mostly	O	O
just	O	O
an	O	O
organization	O	O
of	O	O
the	O	O
relevant	O	O
quotes	O	O
,	O	O
with	O	O
a	O	O
few	O	O
clarifications	O	O
in	O	O
[	O	O
brackets	O	O
]	O	O
,	O	O
presented	O	O
in	O	O
order	O	O
of	O	O
importance	O	O
(	O	O
as	O	O
I	O	O
interpret	O	O
it	O	O
)	O	O
.	O	B-api_mention
parallelStream	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
covers	O	O
a	O	O
very	O	O
common	O	O
case	O	O
Brian	O	O
Goetz	O	O
in	O	O
the	O	O
first	O	O
thread	O	O
,	O	O
explaining	O	O
why	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
valuable	O	O
enough	O	O
to	O	O
keep	O	O
even	O	O
after	O	O
other	O	O
parallel	O	O
stream	O	O
factory	O	O
methods	O	O
have	O	O
been	O	O
removed	O	O
:	O	O
#	O	O
blockquote	O	O
Brian	O	O
Goetz	O	O
stands	O	O
by	O	O
this	O	O
position	O	O
in	O	O
the	O	O
later	O	O
discussion	O	O
about	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
more	O	O
performant	O	O
Brian	O	O
Goetz	O	O
:	O	O
#	O	O
blockquote	O	O
In	O	O
response	O	O
to	O	O
Kevin	O	O
Bourrillion	O	O
'	O	O
s	O	O
skepticism	O	O
about	O	O
whether	O	O
the	O	O
effect	O	O
is	O	O
significant	O	O
,	O	O
Brian	O	O
again	O	O
:	O	O
#	O	O
blockquote	O	O
Doug	O	O
Lea	O	O
follows	O	O
up	O	O
,	O	O
but	O	O
hedges	O	O
his	O	O
position	O	O
:	O	O
#	O	O
blockquote	O	O
Indeed	O	O
,	O	O
the	O	O
later	O	O
discussion	O	O
about	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
takes	O	O
notice	O	O
of	O	O
lower	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
cost	O	O
.	O	B-api_mention
stream	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
statefulness	O	O
complicates	O	O
the	O	O
future	O	O
At	O	O
the	O	O
time	O	O
of	O	O
the	O	O
discussion	O	O
,	O	O
switching	O	O
a	O	O
stream	O	O
from	O	O
sequential	O	O
to	O	O
parallel	O	O
and	O	O
back	O	O
could	O	O
be	O	O
interleaved	O	O
with	O	O
other	O	O
stream	O	O
operations	O	O
.	O	O
Brian	O	O
Goetz	O	O
,	O	O
on	O	O
behalf	O	O
of	O	O
Doug	O	O
Lea	O	O
,	O	O
explains	O	O
why	O	O
sequential	O	O
/	O	O
parallel	O	O
mode	O	O
switching	O	O
may	O	O
complicate	O	O
future	O	O
development	O	O
of	O	O
the	O	O
Java	O	O
platform	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
mode	O	O
switching	O	O
was	O	O
removed	O	O
after	O	O
further	O	O
discussion	O	O
.	O	O
In	O	O
the	O	O
current	O	O
version	O	O
of	O	O
the	O	O
library	O	O
,	O	O
a	O	O
stream	O	O
pipeline	O	O
is	O	O
either	O	O
sequential	O	O
or	O	O
parallel	O	O
;	O	O
last	O	O
call	O	O
to	O	O
sequential	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
wins	O	O
.	O	O
Besides	O	O
side	O	O
-	O	O
stepping	O	O
the	O	O
statefulness	O	O
problem	O	O
,	O	O
this	O	O
change	O	O
also	O	O
improved	O	O
the	O	O
performance	O	O
of	O	O
using	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
set	O	O
up	O	O
a	O	O
parallel	O	O
pipeline	O	O
from	O	O
a	O	O
sequential	O	O
stream	O	O
factory	O	O
.	O	O
exposing	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
a	O	O
first	O	O
-	O	O
class	O	O
citizen	O	O
improves	O	O
programmer	O	O
perception	O	O
of	O	O
the	O	O
library	O	O
,	O	O
leading	O	O
them	O	O
to	O	O
write	O	O
better	O	O
code	O	O
Brian	O	O
Goetz	O	O
again	O	O
,	O	O
in	O	O
response	O	O
to	O	O
Tim	O	O
Peierls	O	O
'	O	O
s	O	O
argument	O	O
that	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
allows	O	O
programmers	O	O
to	O	O
understand	O	O
streams	O	O
sequentially	O	O
before	O	O
going	O	O
parallel	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
9510125	O	O
,	O	O
answer	O	O
-	O	O
9511578	O	O
Just	O	O
IMHO	O	O
.	O	O
Not	O	O
sure	O	O
it	O	O
'	O	O
s	O	O
100	O	O
%	O	O
correct	O	O
.	O	O
invalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
marks	O	O
the	O	O
container	O	O
as	O	O
invalid	O	O
.	O	O
Means	O	O
the	O	O
content	O	O
is	O	O
somehow	O	O
wrong	O	O
and	O	O
must	O	O
be	O	O
relayed	O	O
out	O	O
.	O	O
But	O	O
it	O	O
'	O	O
s	O	O
just	O	O
a	O	O
kind	O	O
of	O	O
mark	O	O
/	O	O
flag	O	O
.	O	O
It	O	O
'	O	O
s	O	O
possible	O	O
that	O	O
multiple	O	O
invalid	O	O
containers	O	O
must	O	O
be	O	O
refreshed	O	O
later	O	O
.	O	B-api_mention
validate	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
performs	O	O
relayout	O	O
.	O	O
It	O	O
means	O	O
invalid	O	O
content	O	O
is	O	O
asked	O	O
for	O	O
all	O	O
the	O	O
sizes	O	O
and	O	O
all	O	O
the	O	O
subcomponents	O	O
'	O	O
sizes	O	O
are	O	O
set	O	O
to	O	O
proper	O	O
values	O	O
by	O	O
LayoutManager	B-api_mention	B-api_mention
.	O	I-api_mention
revalidate	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
just	O	O
sum	O	O
of	O	O
both	O	O
.	O	O
It	O	O
marks	O	O
the	O	O
container	O	O
as	O	O
invalid	O	O
and	O	O
performs	O	O
layout	O	O
of	O	O
the	O	O
container	O	O
.	O	O
Question	O	O
-	O	O
21242110	O	O
,	O	O
answer	O	O
-	O	O
27378709	O	O
Better	O	O
way	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
Advantages	O	O
of	O	O
this	O	O
version	O	O
:	O	O
#	O	O
li	O	O
works	O	O
regardless	O	O
the	O	O
input	O	O
is	O	O
an	O	O
instance	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
or	O	O
it	O	O
'	O	O
s	O	O
subclass	O	O
java	B-api_mention	O
.	I-api_mention	O
sql	I-api_mention	O
.	I-api_mention	O
Date	I-api_mention	O
(	O	O
unlike	O	O
@	O	O
JodaStephen	O	O
'	O	O
s	O	O
way	O	O
)	O	O
.	O	O
This	O	O
is	O	O
common	O	O
with	O	O
JDBC	O	O
originated	O	O
data	O	O
.	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toInstant	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
always	O	O
throws	O	O
an	O	O
exception	O	O
.	O	O
#	O	O
li	O	O
it	O	O
'	O	O
s	O	O
the	O	O
same	O	O
for	O	O
JDK8	O	O
and	O	O
JDK7	O	O
with	O	O
JSR	O	O
-	O	O
310	O	O
backport	O	O
I	O	O
personally	O	O
use	O	O
an	O	O
utility	O	O
class	O	O
(	O	O
but	O	O
this	O	O
is	O	O
not	O	O
backport	O	O
-	O	O
compatible	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
asLocalDate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
here	O	O
is	O	O
null	O	O
-	O	O
safe	O	O
,	O	O
uses	O	O
toLocalDate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
if	O	O
input	O	O
is	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
(	O	O
it	O	O
may	O	O
be	O	O
overriden	O	O
by	O	O
the	O	O
JDBC	O	O
driver	O	O
to	O	O
avoid	O	O
timezone	O	O
problems	O	O
or	O	O
unnecessary	O	O
calculations	O	O
)	O	O
,	O	O
otherwise	O	O
uses	O	O
the	O	O
abovementioned	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
27683759	O	O
I	O	O
just	O	O
studied	O	O
about	O	O
generic	O	O
programming	O	O
,	O	O
the	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
,	O	O
and	O	O
ArrayList	B-api_mention	B-api_mention
,	O	O
so	O	O
I	O	O
can	O	O
understand	O	O
the	O	O
statement	O	O
below	O	O
.	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
the	O	O
next	O	O
statement	O	O
which	O	O
I	O	O
saw	O	O
while	O	O
surfing	O	O
the	O	O
web	O	O
.	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list2	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
emptyList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
What	O	O
is	O	O
Collections	B-api_mention	B-api_mention
?	O	O
Why	O	O
isn	O	O
'	O	O
t	O	O
it	O	O
Collections	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
or	O	O
Collections	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
?	O	O
#	O	O
li	O	O
Why	O	O
is	O	O
<	O	O
String	O	B-api_mention
>	O	O
placed	O	O
before	O	O
the	O	O
method	O	O
name	O	O
emptyList	B-api_mention	B-api_mention
?	O	O
(	O	O
Isn	O	O
'	O	O
t	O	O
emptyList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
correct	O	O
for	O	O
Generic	O	O
?	O	O
)	O	O
#	O	O
li	O	O
What	O	O
does	O	O
the	O	O
statement	O	O
mean	O	O
?	O	O
Question	O	O
-	O	O
22561614	O	O
,	O	O
answer	O	O
-	O	O
22561687	O	O
This	O	O
works	O	O
because	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
resolves	O	O
to	O	O
an	O	O
implementation	O	O
of	O	O
the	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
.	O	O
The	O	O
method	O	O
reference	O	O
of	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
resolves	O	O
to	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
resolved	O	O
to	O	O
IntBinaryOperator	B-api_mention	B-api_mention
,	O	O
and	O	O
presumably	O	O
autoboxing	O	O
occurs	O	O
somewhere	O	O
making	O	O
it	O	O
a	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
And	O	O
the	O	O
min	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
resp	O	I-api_mention
max	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
of	O	O
the	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
ask	O	O
the	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
to	O	O
be	O	O
implemented	O	O
.	O	O
Now	O	O
this	O	O
resolves	O	O
to	O	O
the	O	O
single	O	O
method	O	O
Integer	B-api_mention	B-api_mention
compareTo	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Which	O	O
is	O	O
of	O	O
type	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
And	O	O
thus	O	O
the	O	O
magic	O	O
has	O	O
happened	O	O
as	O	O
both	O	O
methods	O	O
are	O	O
a	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
28319221	O	O
Don	O	O
'	O	O
t	O	O
worry	O	O
about	O	O
any	O	O
performance	O	O
differences	O	O
,	O	O
they	O	O
'	O	O
re	O	O
going	O	O
to	O	O
be	O	O
minimal	O	O
in	O	O
this	O	O
case	O	O
normally	O	O
.	O	O
Method	O	O
2	O	O
is	O	O
preferable	O	O
because	O	O
#	O	O
li	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
require	O	O
mutating	O	O
a	O	O
collection	O	O
that	O	O
exists	O	O
outside	O	O
the	O	O
lambda	O	O
expression	O	O
,	O	O
#	O	O
li	O	O
it	O	O
'	O	O
s	O	O
more	O	O
readable	O	O
because	O	O
the	O	O
different	O	O
steps	O	O
that	O	O
are	O	O
performed	O	O
in	O	O
the	O	O
collection	O	O
pipeline	O	O
are	O	O
written	O	O
sequentially	O	O
(	O	O
first	O	O
a	O	O
filter	O	O
operation	O	O
,	O	O
then	O	O
a	O	O
map	O	O
operation	O	O
,	O	O
then	O	O
collecting	O	O
the	O	O
result	O	O
)	O	O
,	O	O
(	O	O
for	O	O
more	O	O
info	O	O
on	O	O
the	O	O
benefits	O	O
of	O	O
collection	O	O
pipelines	O	O
,	O	O
see	O	O
Martin	O	O
Fowler	O	O
'	O	O
s	O	O
excellent	O	O
article	O	O
)	O	O
#	O	O
li	O	O
you	O	O
can	O	O
easily	O	O
change	O	O
the	O	O
way	O	O
values	O	O
are	O	O
collected	O	O
by	O	O
replacing	O	O
the	O	O
Collector	B-api_mention	B-api_mention
that	O	O
is	O	O
used	O	O
.	O	O
In	O	O
some	O	O
cases	O	O
you	O	O
may	O	O
need	O	O
to	O	O
write	O	O
your	O	O
own	O	O
Collector	B-api_mention	B-api_mention
,	O	O
but	O	O
then	O	O
the	O	O
benefit	O	O
is	O	O
that	O	O
you	O	O
can	O	O
easily	O	O
reuse	O	O
that	O	O
.	O	O
Question	O	O
-	O	O
12552863	O	O
The	O	O
Java	O	O
7	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
syntax	O	O
(	O	O
also	O	O
known	O	O
as	O	O
ARM	O	O
block	O	O
(	O	O
Automatic	O	O
Resource	O	O
Management	O	O
)	O	O
)	O	O
is	O	O
nice	O	O
,	O	O
short	O	O
and	O	O
straightforward	O	O
when	O	O
using	O	O
only	O	O
one	O	O
AutoCloseable	B-api_mention	B-api_mention
resource	O	O
.	O	O
However	O	O
,	O	O
I	O	O
am	O	O
not	O	O
sure	O	O
what	O	O
is	O	O
the	O	O
correct	O	O
idiom	O	O
when	O	O
I	O	O
need	O	O
to	O	O
declare	O	O
multiple	O	O
resources	O	O
that	O	O
are	O	O
dependent	O	O
on	O	O
each	O	O
other	O	O
,	O	O
for	O	O
example	O	O
a	O	O
FileWriter	B-api_mention	B-api_mention
and	O	O
a	O	O
BufferedWriter	B-api_mention	B-api_mention
that	O	O
wraps	O	O
it	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
this	O	O
question	O	O
concerns	O	O
any	O	O
case	O	O
when	O	O
some	O	O
AutoCloseable	B-api_mention	B-api_mention
resources	O	O
are	O	O
wrapped	O	O
,	O	O
not	O	O
only	O	O
these	O	O
two	O	O
specific	O	O
classes	O	O
.	O	O
I	O	O
came	O	O
up	O	O
with	O	O
the	O	O
three	O	O
following	O	O
alternatives	O	O
:	O	O
1	O	O
)	O	O
The	O	O
naive	O	O
idiom	O	O
I	O	O
have	O	O
seen	O	O
is	O	O
to	O	O
declare	O	O
only	O	O
the	O	O
top	O	O
-	O	O
level	O	O
wrapper	O	O
in	O	O
the	O	O
ARM	O	O
-	O	O
managed	O	O
variable	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
nice	O	O
and	O	O
short	O	O
,	O	O
but	O	O
it	O	O
is	O	O
broken	O	O
.	O	O
Because	O	O
the	O	O
underlying	O	O
FileWriter	B-api_mention	B-api_mention
is	O	O
not	O	O
declared	O	O
in	O	O
a	O	O
variable	O	O
,	O	O
it	O	O
will	O	O
never	O	O
be	O	O
closed	O	O
directly	O	O
in	O	O
the	O	O
generated	O	O
finally	O	O
block	O	O
.	O	O
It	O	O
will	O	O
be	O	O
closed	O	O
only	O	O
through	O	O
the	O	O
close	O	O
method	O	O
of	O	O
the	O	O
wrapping	O	O
BufferedWriter	B-api_mention	B-api_mention
.	O	O
The	O	O
problem	O	O
is	O	O
,	O	O
that	O	O
if	O	O
an	O	O
exception	O	O
is	O	O
thrown	O	O
from	O	O
the	O	O
bw	O	O
'	O	O
s	O	O
constructor	O	O
,	O	O
it	O	O
'	O	O
s	O	O
close	B-api_mention	O
will	O	O
not	O	O
be	O	O
called	O	O
and	O	O
therefore	O	O
the	O	O
underlying	O	O
FileWriter	B-api_mention	B-api_mention
will	O	O
not	O	O
be	O	O
closed	O	O
.	O	O
2	O	O
)	O	O
#	O	O
pre	O	O
Here	O	O
,	O	O
both	O	O
the	O	O
underlying	O	O
and	O	O
the	O	O
wrapping	O	O
resource	O	O
are	O	O
declared	O	O
in	O	O
the	O	O
ARM	O	O
-	O	O
managed	O	O
variables	O	O
,	O	O
so	O	O
both	O	O
of	O	O
them	O	O
will	O	O
be	O	O
certainly	O	O
closed	O	O
,	O	O
so	O	O
certainly	O	O
that	O	O
the	O	O
underlying	O	O
fw	O	O
.	B-api_mention	B-api_mention
close	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
called	O	O
twice	O	O
,	O	O
first	O	O
directly	O	O
and	O	O
for	O	O
the	O	O
second	O	O
time	O	O
through	O	O
the	O	O
wrapping	O	O
bw	O	O
.	B-api_mention	B-api_mention
close	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
should	O	O
not	O	O
be	O	O
a	O	O
problem	O	O
for	O	O
these	O	O
two	O	O
specific	O	O
classes	O	O
that	O	O
both	O	O
implement	O	O
Closeable	B-api_mention	B-api_mention
(	O	O
which	O	O
is	O	O
a	O	O
subtype	O	O
of	O	O
AutoCloseable	B-api_mention	B-api_mention
)	O	O
,	O	O
whose	O	O
contract	O	O
states	O	O
that	O	O
multiple	O	O
calls	O	O
to	O	O
close	O	O
are	O	O
permitted	O	O
:	O	O
#	O	O
blockquote	O	O
However	O	O
,	O	O
in	O	O
a	O	O
general	O	O
case	O	O
,	O	O
I	O	O
can	O	O
have	O	O
resources	O	O
that	O	O
do	O	O
implement	O	O
only	O	O
AutoCloseable	B-api_mention	B-api_mention
(	O	O
and	O	O
not	O	O
Closeable	B-api_mention	O
)	O	O
,	O	O
which	O	O
doesn	O	O
'	O	O
t	O	O
guarantee	O	O
that	O	O
the	O	O
close	B-api_mention	O
can	O	O
be	O	O
called	O	O
multiple	O	O
times	O	O
:	O	O
#	O	O
blockquote	O	O
3	O	O
)	O	O
#	O	O
pre	O	O
This	O	O
version	O	O
should	O	O
be	O	O
theoretically	O	O
correct	O	O
,	O	O
because	O	O
only	O	O
the	O	O
fw	O	O
represents	O	O
a	O	O
real	O	O
resource	O	O
that	O	O
needs	O	O
to	O	O
be	O	O
cleaned	O	O
up	O	O
.	O	O
The	O	O
bw	O	O
does	O	O
'	O	O
t	O	O
itself	O	O
hold	O	O
any	O	O
resource	O	O
,	O	O
it	O	O
only	O	O
delegates	O	O
to	O	O
the	O	O
fw	O	O
,	O	O
so	O	O
it	O	O
should	O	O
be	O	O
sufficient	O	O
to	O	O
only	O	O
close	O	O
the	O	O
underlying	O	O
fw	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
the	O	O
syntax	O	O
is	O	O
a	O	O
bit	O	O
irregular	O	O
and	O	O
also	O	O
,	O	O
Eclipse	O	O
issues	O	O
a	O	O
warning	O	O
,	O	O
which	O	O
I	O	O
believe	O	O
is	O	O
a	O	O
false	O	O
alarm	O	O
,	O	O
but	O	O
it	O	O
is	O	O
still	O	O
a	O	O
warning	O	O
that	O	O
one	O	O
has	O	O
to	O	O
deal	O	O
with	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
,	O	O
which	O	O
approach	O	O
to	O	O
go	O	O
for	O	O
?	O	O
Or	O	O
have	O	O
I	O	O
missed	O	O
some	O	O
other	O	O
idiom	O	O
that	O	O
is	O	O
the	O	O
correct	O	O
one	O	O
?	O	O
Question	O	O
-	O	O
27625611	O	O
,	O	O
answer	O	O
-	O	O
27625722	O	O
Because	O	O
nextDouble	B-api_mention	O
works	O	O
like	O	O
this	O	O
:	O	O
(	O	O
source	O	O
)	O	O
#	O	O
pre	O	O
next	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
makes	O	O
x	O	O
random	O	O
bits	O	O
.	O	O
Now	O	O
why	O	O
does	O	O
this	O	O
matter	O	O
?	O	O
Because	O	O
about	O	O
half	O	O
the	O	O
numbers	O	O
generated	O	O
by	O	O
the	O	O
first	O	O
part	O	O
(	O	O
before	O	O
the	O	O
division	O	O
)	O	O
are	O	O
less	O	O
than	O	O
1L	O	O
<	O	O
<	O	O
52	O	O
,	O	O
and	O	O
therefore	O	O
their	O	O
significand	O	O
doesn	O	O
'	O	O
t	O	O
entirely	O	O
fill	O	O
the	O	O
53	O	O
bits	O	O
that	O	O
it	O	O
could	O	O
fill	O	O
,	O	O
meaning	O	O
the	O	O
least	O	O
significant	O	O
bit	O	O
of	O	O
the	O	O
significand	O	O
is	O	O
always	O	O
zero	O	O
for	O	O
those	O	O
.	O	O
Because	O	O
of	O	O
the	O	O
amount	O	O
of	O	O
attention	O	O
this	O	O
is	O	O
receiving	O	O
,	O	O
here	O	O
'	O	O
s	O	O
some	O	O
extra	O	O
explanation	O	O
of	O	O
what	O	O
a	O	O
double	O	O
in	O	O
Java	O	O
(	O	O
and	O	O
many	O	O
other	O	O
languages	O	O
)	O	O
really	O	O
looks	O	O
like	O	O
and	O	O
why	O	O
it	O	O
mattered	O	O
in	O	O
this	O	O
question	O	O
.	O	O
Basically	O	O
,	O	O
a	O	O
double	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
(	O	O
source	O	O
)	O	O
#	O	O
img	O	O
A	O	O
very	O	O
important	O	O
detail	O	O
not	O	O
visible	O	O
in	O	O
this	O	O
picture	O	O
is	O	O
that	O	O
numbers	O	O
are	O	O
"	O	O
normalized	O	O
"	O	O
1	O	O
such	O	O
that	O	O
the	O	O
53	O	O
bit	O	O
fraction	O	O
starts	O	O
with	O	O
a	O	O
1	O	O
(	O	O
by	O	O
choosing	O	O
the	O	O
exponent	O	O
such	O	O
that	O	O
it	O	O
is	O	O
so	O	O
)	O	O
,	O	O
that	O	O
1	O	O
is	O	O
then	O	O
omitted	O	O
.	O	O
That	O	O
is	O	O
why	O	O
the	O	O
picture	O	O
shows	O	O
52	O	O
bits	O	O
for	O	O
the	O	O
fraction	O	O
(	O	O
significand	O	O
)	O	O
but	O	O
there	O	O
are	O	O
effectively	O	O
53	O	O
bits	O	O
in	O	O
it	O	O
.	O	O
The	O	O
normalization	O	O
means	O	O
that	O	O
if	O	O
in	O	O
the	O	O
code	O	O
for	O	O
nextDouble	B-api_mention	B-api_mention
the	O	O
53rd	O	O
bit	O	O
is	O	O
set	O	O
,	O	O
that	O	O
bit	O	O
is	O	O
the	O	O
implicit	O	O
leading	O	O
1	O	O
and	O	O
it	O	O
goes	O	O
away	O	O
,	O	O
and	O	O
the	O	O
other	O	O
52	O	O
bits	O	O
are	O	O
copied	O	O
literally	O	O
to	O	O
the	O	O
significand	O	O
of	O	O
the	O	O
resulting	O	O
double	O	O
.	O	O
If	O	O
that	O	O
bit	O	O
is	O	O
not	O	O
set	O	O
however	O	O
,	O	O
the	O	O
remaining	O	O
bits	O	O
must	O	O
be	O	O
shifted	O	O
left	O	O
until	O	O
it	O	O
becomes	O	O
set	O	O
.	O	O
On	O	O
average	O	O
,	O	O
half	O	O
the	O	O
generated	O	O
numbers	O	O
fall	O	O
into	O	O
the	O	O
case	O	O
where	O	O
the	O	O
significand	O	O
was	O	O
not	O	O
shifted	O	O
left	O	O
at	O	O
all	O	O
(	O	O
and	O	O
about	O	O
half	O	O
those	O	O
have	O	O
a	O	O
0	O	O
as	O	O
their	O	O
least	O	O
significant	O	O
bit	O	O
)	O	O
,	O	O
and	O	O
the	O	O
other	O	O
half	O	O
is	O	O
shifted	O	O
by	O	O
at	O	O
least	O	O
1	O	O
(	O	O
or	O	O
is	O	O
just	O	O
completely	O	O
zero	O	O
)	O	O
so	O	O
their	O	O
least	O	O
significant	O	O
bit	O	O
is	O	O
always	O	O
0	O	O
.	O	O
1	O	O
:	O	O
not	O	O
always	O	O
,	O	O
clearly	O	O
it	O	O
cannot	O	O
be	O	O
done	O	O
for	O	O
zero	O	O
,	O	O
which	O	O
has	O	O
no	O	O
highest	O	O
1	O	O
.	O	O
These	O	O
numbers	O	O
are	O	O
called	O	O
denormal	O	O
or	O	O
subnormal	O	O
numbers	O	O
,	O	O
see	O	O
wikipedia	O	O
:	O	O
denormal	O	O
number	O	O
.	O	O
Question	O	O
-	O	O
4772425	O	O
,	O	O
answer	O	O
-	O	O
18953213	O	O
remove	O	O
one	O	O
y	O	O
form	O	O
SimpleDateFormat	B-api_mention	B-api_mention
dt1	O	O
=	O	O
new	O	O
SimpleDateFormat	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
should	O	O
be	O	O
SimpleDateFormat	B-api_mention	B-api_mention
dt1	O	O
=	O	O
new	O	O
SimpleDateFormat	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
20358920	O	O
Fixed	O	O
size	O	O
List	B-api_mention	B-api_mention
The	O	O
easiest	O	O
way	O	O
,	O	O
that	O	O
I	O	O
know	O	O
of	O	O
,	O	O
is	O	O
to	O	O
create	O	O
a	O	O
fixed	O	O
-	O	O
size	O	O
single	O	O
element	O	O
List	B-api_mention	B-api_mention
with	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	O	I-api_mention
T	O	I-api_mention
.	O	I-api_mention
.	O	I-api_mention
.	O	I-api_mention
)	O	I-api_mention
like	O	O
/	O	O
/	O	O
Returns	O	O
a	O	O
List	B-api_mention	B-api_mention
backed	O	O
by	O	O
a	O	O
varargs	O	O
T	O	O
.	O	O
return	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Variable	O	O
size	O	O
List	B-api_mention	B-api_mention
If	O	O
it	O	O
needs	O	O
vary	O	O
in	O	O
size	O	O
you	O	O
can	O	O
construct	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
and	O	O
the	O	O
fixed	O	O
-	O	O
size	O	O
List	B-api_mention	B-api_mention
like	O	O
return	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
(	O	O
in	O	O
Java	O	O
7	O	O
+	O	O
)	O	O
you	O	O
can	O	O
use	O	O
the	O	O
diamond	O	O
operator	O	O
<	O	O
>	O	O
to	O	O
make	O	O
it	O	O
return	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
8275499	O	O
,	O	O
answer	O	O
-	O	O
17397548	O	O
As	O	O
for	O	O
the	O	O
code	O	O
example	O	O
in	O	O
the	O	O
question	O	O
,	O	O
the	O	O
standard	O	O
solution	O	O
is	O	O
to	O	O
reference	O	O
the	O	O
class	O	O
explicitly	O	O
by	O	O
its	O	O
name	O	O
,	O	O
and	O	O
it	O	O
is	O	O
even	O	O
possible	O	O
to	O	O
do	O	O
without	O	O
getClassLoader	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
approach	O	O
still	O	O
has	O	O
a	O	O
back	O	O
side	O	O
that	O	O
it	O	O
is	O	O
not	O	O
very	O	O
safe	O	O
against	O	O
copy	O	O
/	O	O
paste	O	O
errors	O	O
in	O	O
case	O	O
you	O	O
need	O	O
to	O	O
replicate	O	O
this	O	O
code	O	O
to	O	O
a	O	O
number	O	O
of	O	O
similar	O	O
classes	O	O
.	O	O
And	O	O
as	O	O
for	O	O
the	O	O
exact	O	O
question	O	O
in	O	O
the	O	O
headline	O	O
,	O	O
there	O	O
is	O	O
a	O	O
trick	O	O
posted	O	O
in	O	O
the	O	O
adjacent	O	O
thread	O	O
:	O	O
Class	B-api_mention	B-api_mention
currentClass	O	O
=	O	O
new	O	O
Object	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
{	O	O
}	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getEnclosingClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
It	O	O
uses	O	O
a	O	O
nested	O	O
anonymous	O	O
Object	B-api_mention	B-api_mention
subclass	O	O
to	O	O
get	O	O
hold	O	O
of	O	O
the	O	O
execution	O	O
context	O	O
.	O	O
This	O	O
trick	O	O
has	O	O
a	O	O
benefit	O	O
of	O	O
being	O	O
copy	O	O
/	O	O
paste	O	O
safe	O	O
.	O	O
.	O	O
.	O	O
It	O	O
may	O	O
be	O	O
also	O	O
worth	O	O
noting	O	O
that	O	O
if	O	O
this	O	O
snippet	O	O
is	O	O
shaped	O	O
as	O	O
a	O	O
static	O	O
method	O	O
of	O	O
some	O	O
base	O	O
class	O	O
,	O	O
then	O	O
currenClass	O	O
value	O	O
will	O	O
always	O	O
be	O	O
a	O	O
reference	O	O
to	O	O
that	O	O
base	O	O
class	O	O
rather	O	O
than	O	O
to	O	O
any	O	O
subclass	O	O
that	O	O
may	O	O
be	O	O
using	O	O
that	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
29922296	O	O
I	O	O
'	O	O
m	O	O
wondering	O	O
what	O	O
the	O	O
best	O	O
way	O	O
is	O	O
in	O	O
Java	O	O
8	O	O
to	O	O
work	O	O
with	O	O
all	O	O
the	O	O
values	O	O
of	O	O
an	O	O
enum	O	O
.	O	O
Specifically	O	O
when	O	O
you	O	O
need	O	O
to	O	O
get	O	O
all	O	O
the	O	O
values	O	O
and	O	O
add	O	O
it	O	O
to	O	O
somewhere	O	O
,	O	O
for	O	O
example	O	O
,	O	O
supposing	O	O
that	O	O
we	O	O
have	O	O
the	O	O
following	O	O
enum	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
could	O	O
of	O	O
course	O	O
do	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
,	O	O
I	O	O
could	O	O
also	O	O
add	O	O
the	O	O
following	O	O
method	O	O
to	O	O
the	O	O
enum	O	O
definition	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
then	O	O
replace	O	O
the	O	O
for	O	O
from	O	O
above	O	O
with	O	O
:	O	O
Letter	O	B-api_mention
.	B-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Is	O	O
this	O	O
approach	O	O
OK	O	O
or	O	O
does	O	O
it	O	O
have	O	O
some	O	O
fault	O	O
in	O	O
design	O	O
or	O	O
performance	O	O
?	O	O
Moreover	O	O
,	O	O
why	O	O
don	O	O
'	O	O
t	O	O
enums	O	O
have	O	O
a	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
?	O	O
Question	O	O
-	O	O
31445024	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
determine	O	O
whether	O	O
the	O	O
following	O	O
statements	O	O
are	O	O
guaranteed	O	O
to	O	O
be	O	O
true	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
ve	O	O
always	O	O
assumed	O	O
that	O	O
autoboxing	O	O
was	O	O
equivalent	O	O
to	O	O
calling	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
corresponding	O	O
type	O	O
.	O	O
Every	O	O
discussion	O	O
that	O	O
I	O	O
'	O	O
ve	O	O
seen	O	O
on	O	O
the	O	O
topic	O	O
seems	O	O
to	O	O
support	O	O
my	O	O
assumption	O	O
.	O	O
But	O	O
all	O	O
I	O	O
could	O	O
find	O	O
in	O	O
the	O	O
JLS	O	O
was	O	O
the	O	O
following	O	O
(	O	O
§	O	O
5	O	O
.	O	O
1	O	O
.	O	O
7	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
That	O	O
describes	O	O
behavior	O	O
identical	O	O
to	O	O
that	O	O
of	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
there	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
be	O	O
any	O	O
guarantee	O	O
that	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
actually	O	O
invoked	O	O
,	O	O
meaning	O	O
there	O	O
could	O	O
theoretically	O	O
be	O	O
an	O	O
implementation	O	O
that	O	O
keeps	O	O
a	O	O
separate	O	O
,	O	O
dedicated	O	O
cache	O	O
for	O	O
autoboxed	O	O
values	O	O
.	O	O
In	O	O
such	O	O
a	O	O
case	O	O
,	O	O
there	O	O
might	O	O
not	O	O
be	O	O
identity	O	O
equality	O	O
between	O	O
cached	O	O
autoboxed	O	O
values	O	O
and	O	O
regular	O	O
cached	O	O
boxed	O	O
values	O	O
.	O	O
Oracle	O	O
'	O	O
s	O	O
autoboxing	O	O
tutorial	O	O
states	O	O
matter	O	O
-	O	O
of	O	O
-	O	O
factly	O	O
that	O	O
li	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
compiled	O	O
to	O	O
li	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
where	O	O
i	O	O
is	O	O
an	O	O
int	O	O
.	O	O
But	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
the	O	O
tutorial	O	O
should	O	O
be	O	O
considered	O	O
an	O	O
authoritative	O	O
source	O	O
.	O	O
Question	O	O
-	O	O
32475166	O	O
,	O	O
answer	O	O
-	O	O
32475290	O	O
The	O	O
chief	O	O
difference	O	O
is	O	O
that	O	O
an	O	O
if	O	O
else	O	O
block	O	O
is	O	O
a	O	O
statement	O	O
whereas	O	O
the	O	O
ternary	O	O
(	O	O
more	O	O
often	O	O
known	O	O
as	O	O
the	O	O
conditional	O	O
operator	O	O
in	O	O
Java	O	O
)	O	O
is	O	O
an	O	O
expression	O	O
.	O	O
A	O	O
statement	O	O
can	O	O
do	O	O
things	O	O
like	O	O
return	O	O
to	O	O
the	O	O
caller	O	O
on	O	O
some	O	O
of	O	O
the	O	O
control	O	O
paths	O	O
.	O	O
An	O	O
expression	O	O
can	O	O
be	O	O
used	O	O
in	O	O
an	O	O
assignment	O	O
:	O	O
int	O	O
n	O	O
=	O	O
condition	O	O
?	O	O
3	O	O
:	O	O
2	O	O
;	O	O
So	O	O
the	O	O
two	O	O
expressions	O	O
in	O	O
the	O	O
ternary	O	O
after	O	O
the	O	O
condition	O	O
need	O	O
to	O	O
be	O	O
coercable	O	O
to	O	O
the	O	O
same	O	O
type	O	O
.	O	O
This	O	O
can	O	O
cause	O	O
some	O	O
odd	O	O
effects	O	O
in	O	O
Java	O	O
particularly	O	O
with	O	O
auto	O	O
-	O	O
boxing	O	O
and	O	O
automatic	O	O
reference	O	O
casting	O	O
-	O	O
this	O	O
is	O	O
what	O	O
the	O	O
comment	O	O
in	O	O
your	O	O
posted	O	O
code	O	O
is	O	O
referring	O	O
to	O	O
.	O	O
The	O	O
coercion	O	O
of	O	O
the	O	O
expressions	O	O
in	O	O
your	O	O
case	O	O
would	O	O
be	O	O
to	O	O
a	O	O
java	O	B-api_mention
.	O	I-api_mention
lang	O	I-api_mention
.	O	I-api_mention
reflect	O	I-api_mention
.	O	O
Executable	O	O
type	O	O
(	O	O
as	O	O
that	O	O
'	O	O
s	O	O
the	O	O
most	O	O
specialised	O	O
type	O	O
)	O	O
and	O	O
that	O	O
does	O	O
not	O	O
exist	O	O
in	O	O
older	O	O
versions	O	O
of	O	O
Java	O	O
.	O	O
Stylistically	O	O
you	O	O
should	O	O
use	O	O
an	O	O
if	O	O
else	O	O
block	O	O
if	O	O
the	O	O
code	O	O
is	O	O
statement	O	O
-	O	O
like	O	O
,	O	O
and	O	O
a	O	O
ternary	O	O
if	O	O
it	O	O
'	O	O
s	O	O
expression	O	O
-	O	O
like	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
you	O	O
can	O	O
make	O	O
an	O	O
if	O	O
else	O	O
block	O	O
behave	O	O
like	O	O
an	O	O
expression	O	O
if	O	O
you	O	O
use	O	O
a	O	O
lambda	O	O
function	O	O
.	O	O
Question	O	O
-	O	O
31696485	O	O
,	O	O
answer	O	O
-	O	O
31696584	O	O
Your	O	O
question	O	O
is	O	O
based	O	O
on	O	O
assumption	O	O
that	O	O
the	O	O
code	O	O
which	O	O
may	O	O
throw	O	O
NullPointerException	B-api_mention	B-api_mention
is	O	O
worse	O	O
than	O	O
the	O	O
code	O	O
which	O	O
may	O	O
not	O	O
.	O	O
This	O	O
assumption	O	O
is	O	O
wrong	O	O
.	O	O
If	O	O
you	O	O
expect	O	O
that	O	O
your	O	O
foobar	O	O
is	O	O
never	O	O
null	O	O
due	O	O
to	O	O
the	O	O
program	O	O
logic	O	O
,	O	O
it	O	O
'	O	O
s	O	O
much	O	O
better	O	O
to	O	O
use	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
you	O	O
will	O	O
see	O	O
a	O	O
NullPointerException	B-api_mention	B-api_mention
which	O	O
will	O	O
indicate	O	O
that	O	O
your	O	O
program	O	O
has	O	O
a	O	O
bug	O	O
.	O	O
If	O	O
you	O	O
use	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofNullable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
the	O	O
foobar	O	O
happens	O	O
to	O	O
be	O	O
null	O	O
due	O	O
to	O	O
the	O	O
bug	O	O
,	O	O
then	O	O
your	O	O
program	O	O
will	O	O
silently	O	O
continue	O	O
working	O	O
incorrectly	O	O
,	O	O
which	O	O
may	O	O
be	O	O
a	O	O
bigger	O	O
disaster	O	O
.	O	O
This	O	O
way	O	O
an	O	O
error	O	O
may	O	O
occur	O	O
much	O	O
later	O	O
and	O	O
it	O	O
would	O	O
be	O	O
much	O	O
harder	O	O
to	O	O
understand	O	O
at	O	O
which	O	O
point	O	O
it	O	O
went	O	O
wrong	O	O
.	O	O
Question	O	O
-	O	O
24631909	O	O
,	O	O
answer	O	O
-	O	O
24635657	O	O
Common	O	O
features	O	O
a	O	O
)	O	O
Both	O	O
libraries	O	O
use	O	O
immutable	O	O
types	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
also	O	O
offers	O	O
additional	O	O
mutable	O	O
types	O	O
like	O	O
MutableDateTime	B-api_mention	B-api_mention
.	O	O
b	O	O
)	O	O
Furthermore	O	O
:	O	O
Both	O	O
libraries	O	O
are	O	O
inspired	O	O
by	O	O
the	O	O
design	O	O
study	O	O
"	O	O
TimeAndMoney	O	O
"	O	O
from	O	O
Eric	O	O
Evans	O	O
or	O	O
ideas	O	O
from	O	O
Martin	O	O
Fowler	O	O
about	O	O
domain	O	O
driven	O	O
style	O	O
so	O	O
they	O	O
strive	O	O
more	O	O
or	O	O
less	O	O
for	O	O
a	O	O
fluent	O	O
programming	O	O
style	O	O
(	O	O
although	O	O
not	O	O
always	O	O
perfect	O	O
;	O	O
-	O	O
)	O	O
)	O	O
.	O	O
c	O	O
)	O	O
With	O	O
both	O	O
libraries	O	O
we	O	O
get	O	O
a	O	O
real	O	O
calendar	O	O
date	O	O
type	O	O
(	O	O
called	O	O
LocalDate	B-api_mention	B-api_mention
)	O	O
,	O	O
a	O	O
real	O	O
wall	O	O
time	O	O
type	O	O
(	O	O
called	O	O
LocalTime	B-api_mention	B-api_mention
)	O	O
and	O	O
the	O	O
composition	O	O
(	O	O
called	O	O
LocalDateTime	B-api_mention	B-api_mention
)	O	O
.	O	O
That	O	O
is	O	O
a	O	O
very	O	O
big	O	O
win	O	O
compared	O	O
with	O	O
old	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Calendar	I-api_mention	I-api_mention
and	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	O	O
d	O	O
)	O	O
Both	O	O
libraries	O	O
use	O	O
a	O	O
method	O	O
-	O	O
centric	O	O
approach	O	O
meaning	O	O
they	O	O
encourage	O	O
the	O	O
user	O	O
to	O	O
use	O	O
getDayOfYear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
of	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
causes	O	O
a	O	O
lot	O	O
of	O	O
extra	O	O
methods	O	O
compared	O	O
with	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Calendar	I-api_mention	I-api_mention
(	O	O
although	O	O
latter	O	O
is	O	O
not	O	O
type	O	O
-	O	O
safe	O	O
at	O	O
all	O	O
due	O	O
to	O	O
excessive	O	O
use	O	O
of	O	O
ints	O	O
)	O	O
.	O	O
Performance	O	O
See	O	O
the	O	O
other	O	O
answer	O	O
by	O	O
@	O	O
OO7	O	O
pointing	O	O
to	O	O
the	O	O
analysis	O	O
of	O	O
Mikhail	O	O
Vorontsov	O	O
although	O	O
point	O	O
3	O	O
(	O	O
exception	O	O
catching	O	O
)	O	O
is	O	O
probably	O	O
obsolete	O	O
-	O	O
see	O	O
this	O	O
JDK	O	O
-	O	O
bug	O	O
.	O	O
The	O	O
different	O	O
performance	O	O
(	O	O
which	O	O
is	O	O
in	O	O
general	O	O
favour	O	O
of	O	O
JSR	O	O
-	O	O
310	O	O
)	O	O
is	O	O
mainly	O	O
due	O	O
to	O	O
the	O	O
fact	O	O
that	O	O
the	O	O
internal	O	O
implementation	O	O
of	O	O
Joda	O	O
-	O	O
Time	O	O
always	O	O
use	O	O
a	O	O
machine	O	O
-	O	O
time	O	O
-	O	O
like	O	O
long	O	O
-	O	O
primitive	O	O
(	O	O
in	O	O
milliseconds	O	O
)	O	O
.	O	O
Null	O	O
Joda	O	O
-	O	O
Time	O	O
often	O	O
use	O	O
NULL	O	O
as	O	O
default	O	O
for	O	O
system	O	O
timezone	O	O
,	O	O
default	O	O
locale	O	O
,	O	O
current	O	O
timestamp	O	O
etc	O	O
.	O	O
while	O	O
JSR	O	O
-	O	O
310	O	O
almost	O	O
always	O	O
rejects	O	O
NULL	O	O
values	O	O
.	O	O
Precision	O	O
JSR	O	O
-	O	O
310	O	O
handles	O	O
nanosecond	O	O
precision	O	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
is	O	O
limited	O	O
to	O	O
millisecond	O	O
precision	O	O
.	O	O
Supported	O	O
fields	O	O
:	O	O
An	O	O
overview	O	O
about	O	O
supported	O	O
fields	O	O
in	O	O
Java	O	O
-	O	O
8	O	O
(	O	O
JSR	O	O
-	O	O
310	O	O
)	O	O
is	O	O
given	O	O
by	O	O
some	O	O
classes	O	O
in	O	O
the	O	O
temporal	O	O
-	O	O
package	O	O
(	O	O
for	O	O
example	O	O
ChronoField	B-api_mention	B-api_mention
and	O	O
WeekFields	B-api_mention	O
)	O	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
is	O	O
rather	O	O
weak	O	O
on	O	O
this	O	O
area	O	O
-	O	O
see	O	O
DateTimeFieldType	B-api_mention	B-api_mention
.	O	O
The	O	O
biggest	O	O
lack	O	O
of	O	O
Joda	O	O
-	O	O
Time	O	O
is	O	O
here	O	O
the	O	O
absence	O	O
of	O	O
localized	O	O
week	O	O
-	O	O
related	O	O
fields	O	O
.	O	O
A	O	O
common	O	O
feature	O	O
of	O	O
both	O	O
field	O	O
implementation	O	O
design	O	O
is	O	O
that	O	O
both	O	O
are	O	O
based	O	O
on	O	O
values	O	O
of	O	O
type	O	O
long	O	O
(	O	O
no	O	O
other	O	O
types	O	O
,	O	O
not	O	O
even	O	O
enums	O	O
)	O	O
.	O	O
Enum	O	O
JSR	O	O
-	O	O
310	O	O
offers	O	O
enums	O	O
like	O	O
DayOfWeek	B-api_mention	B-api_mention
or	O	O
Month	B-api_mention	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
does	O	O
not	O	O
offer	O	O
this	O	O
because	O	O
it	O	O
was	O	O
mainly	O	O
developed	O	O
in	O	O
years	O	O
2002	O	O
-	O	O
2004	O	O
before	O	O
Java	O	O
5	O	O
.	O	O
Zone	O	O
API	O	O
a	O	O
)	O	O
JSR	O	O
-	O	O
310	O	O
offers	O	O
more	O	O
timezone	O	O
features	O	O
than	O	O
Joda	O	O
-	O	O
Time	O	O
.	O	O
Latter	O	O
is	O	O
not	O	O
able	O	O
to	O	O
yield	O	O
a	O	O
programmatical	O	O
access	O	O
to	O	O
the	O	O
history	O	O
of	O	O
timezone	O	O
offset	O	O
transitions	O	O
while	O	O
JSR	O	O
-	O	O
310	O	O
is	O	O
capable	O	O
to	O	O
do	O	O
this	O	O
.	O	O
b	O	O
)	O	O
For	O	O
your	O	O
information	O	O
:	O	O
JSR	O	O
-	O	O
310	O	O
has	O	O
moved	O	O
its	O	O
internal	O	O
timezone	O	O
repository	O	O
to	O	O
a	O	O
new	O	O
location	O	O
and	O	O
a	O	O
different	O	O
format	O	O
.	O	O
The	O	O
old	O	O
library	O	O
folder	O	O
lib	O	O
/	O	O
zi	O	O
does	O	O
not	O	O
exist	O	O
any	O	O
more	O	O
.	O	O
Adjuster	O	O
vs	O	O
.	O	O
Property	O	O
JSR	O	O
-	O	O
310	O	O
has	O	O
introduced	O	O
the	O	O
TemporalAdjuster	B-api_mention	B-api_mention
-	O	O
interface	O	O
as	O	O
a	O	O
formalized	O	O
way	O	O
to	O	O
externalize	O	O
temporal	O	O
calculations	O	O
and	O	O
manipulations	O	O
,	O	O
especially	O	O
for	O	O
library	O	O
or	O	O
framework	O	O
-	O	O
writers	O	O
this	O	O
is	O	O
a	O	O
nice	O	O
and	O	O
relative	O	O
easy	O	O
way	O	O
to	O	O
embed	O	O
new	O	O
extensions	O	O
of	O	O
JSR	O	O
-	O	O
310	O	O
(	O	O
a	O	O
kind	O	O
of	O	O
equivalent	O	O
to	O	O
static	O	O
helper	O	O
classes	O	O
for	O	O
former	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
)	O	O
.	O	O
For	O	O
most	O	O
users	O	O
however	O	O
,	O	O
this	O	O
feature	O	O
has	O	O
very	O	O
limited	O	O
value	O	O
because	O	O
the	O	O
burden	O	O
to	O	O
write	O	O
code	O	O
is	O	O
still	O	O
with	O	O
the	O	O
user	O	O
.	O	O
Built	O	O
-	O	O
in	O	O
solutions	O	O
based	O	O
on	O	O
the	O	O
new	O	O
TemporalAdjuster	B-api_mention	B-api_mention
-	O	O
concept	O	O
are	O	O
not	O	O
so	O	O
many	O	O
,	O	O
there	O	O
is	O	O
currently	O	O
only	O	O
the	O	O
helper	O	O
class	O	O
TemporalAdjusters	B-api_mention	O
with	O	O
a	O	O
limited	O	O
set	O	O
of	O	O
manipulations	O	O
(	O	O
and	O	O
the	O	O
enums	O	O
Month	O	O
or	O	O
other	O	O
temporal	O	O
types	O	O
)	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
a	O	O
field	O	O
-	O	O
package	O	O
but	O	O
practice	O	O
has	O	O
shown	O	O
evidence	O	O
that	O	O
new	O	O
field	O	O
implementations	O	O
are	O	O
very	O	O
hard	O	O
to	O	O
code	O	O
.	O	O
On	O	O
the	O	O
other	O	O
side	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
so	O	O
-	O	O
called	O	O
properties	O	O
which	O	O
make	O	O
some	O	O
manipulations	O	O
much	O	O
easier	O	O
and	O	O
more	O	O
elegant	O	O
than	O	O
in	O	O
JSR	O	O
-	O	O
310	O	O
,	O	O
for	O	O
example	O	O
property	O	O
.	B-api_mention	B-api_mention
withMaximumValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Calendar	O	O
systems	O	O
JSR	O	O
-	O	O
310	O	O
offers	O	O
4	O	O
extra	O	O
calendar	O	O
systems	O	O
.	O	O
The	O	O
most	O	O
interesting	O	O
one	O	O
is	O	O
Umalqura	O	O
(	O	O
used	O	O
in	O	O
Saudi	O	O
Arabia	O	O
)	O	O
.	O	O
The	O	O
other	O	O
3	O	O
are	O	O
:	O	O
Minguo	O	O
(	O	O
Taiwan	O	O
)	O	O
,	O	O
Japanese	O	O
(	O	O
only	O	O
the	O	O
modern	O	O
calendar	O	O
since	O	O
1871	O	O
!	O	O
)	O	O
and	O	O
ThaiBuddhist	O	O
(	O	O
only	O	O
correct	O	O
after	O	O
1940	O	O
)	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
an	O	O
Islamic	O	O
calendar	O	O
based	O	O
on	O	O
calculatory	O	O
base	O	O
-	O	O
not	O	O
a	O	O
sighting	O	O
-	O	O
based	O	O
calendar	O	O
like	O	O
Umalqura	O	O
.	O	O
Thai	O	O
-	O	O
Buddhist	O	O
is	O	O
also	O	O
offered	O	O
by	O	O
Joda	O	O
-	O	O
Time	O	O
in	O	O
a	O	O
similar	O	O
form	O	O
,	O	O
Minguo	O	O
and	O	O
the	O	O
japanese	O	O
one	O	O
not	O	O
.	O	O
Otherwise	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
coptic	O	O
and	O	O
ethiopic	O	O
calendar	O	O
,	O	O
too	O	O
(	O	O
but	O	O
without	O	O
any	O	O
support	O	O
for	O	O
internationalization	O	O
)	O	O
.	O	O
More	O	O
interesting	O	O
for	O	O
Europeans	O	O
:	O	O
Joda	O	O
-	O	O
Time	O	O
also	O	O
offers	O	O
a	O	O
Gregorian	O	O
,	O	O
Julian	O	O
and	O	O
mixed	O	O
-	O	O
gregorian	O	O
-	O	O
julian	O	O
calendar	O	O
.	O	O
However	O	O
,	O	O
the	O	O
practical	O	O
value	O	O
for	O	O
real	O	O
historical	O	O
calculations	O	O
is	O	O
limited	O	O
because	O	O
important	O	O
features	O	O
like	O	O
different	O	O
year	O	O
starts	O	O
in	O	O
date	O	O
history	O	O
are	O	O
not	O	O
supported	O	O
at	O	O
all	O	O
(	O	O
the	O	O
same	O	O
criticism	O	O
is	O	O
valid	O	O
for	O	O
old	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
GregorianCalendar	I-api_mention	I-api_mention
)	O	O
.	O	O
Other	O	O
calendars	O	O
like	O	O
Hebrew	O	O
or	O	O
Persian	O	O
or	O	O
Hindu	O	O
are	O	O
completely	O	O
missing	O	O
in	O	O
both	O	O
libraries	O	O
.	O	O
Epoch	O	O
days	O	O
JSR	O	O
-	O	O
310	O	O
has	O	O
the	O	O
class	O	O
JulianFields	B-api_mention	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
(	O	O
version	O	O
2	O	O
.	O	O
0	O	O
)	O	O
offers	O	O
some	O	O
helper	O	O
methods	O	O
in	O	O
the	O	O
class	O	O
DateTimeUtils	B-api_mention	B-api_mention
.	O	O
Clocks	O	O
JSR	O	O
-	O	O
310	O	O
has	O	O
no	O	O
interface	O	O
(	O	O
a	O	O
design	O	O
mistake	O	O
)	O	O
but	O	O
an	O	O
abstract	O	O
class	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Clock	I-api_mention	I-api_mention
which	O	O
can	O	O
be	O	O
used	O	O
for	O	O
any	O	O
clock	O	O
dependency	O	O
injection	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
offers	O	O
the	O	O
interface	O	O
MillisProvider	B-api_mention	B-api_mention
and	O	O
some	O	O
helper	O	O
methods	O	O
in	O	O
DateTimeUtils	B-api_mention	B-api_mention
instead	O	O
.	O	O
So	O	O
this	O	O
way	O	O
Joda	O	O
-	O	O
Time	O	O
is	O	O
also	O	O
capable	O	O
of	O	O
supporting	O	O
test	O	O
-	O	O
driven	O	O
models	O	O
with	O	O
different	O	O
clocks	O	O
(	O	O
mocking	O	O
etc	O	O
.	O	O
)	O	O
.	O	O
Duration	O	O
arithmetic	O	O
Both	O	O
libraries	O	O
support	O	O
the	O	O
calculation	O	O
of	O	O
time	O	O
distances	O	O
in	O	O
one	O	O
or	O	O
more	O	O
temporal	O	O
units	O	O
.	O	O
However	O	O
,	O	O
when	O	O
handling	O	O
single	O	O
-	O	O
unit	O	O
-	O	O
durations	O	O
the	O	O
JSR	O	O
-	O	O
310	O	O
-	O	O
style	O	O
is	O	O
obviously	O	O
nicer	O	O
(	O	O
and	O	O
long	O	O
-	O	O
based	O	O
instead	O	O
of	O	O
using	O	O
int	O	O
)	O	O
:	O	O
JSR	O	O
-	O	O
310	O	O
=	O	O
>	O	O
long	O	O
days	O	O
=	O	O
ChronoUnit	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
DAYS	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
between	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Joda	O	O
-	O	O
Time	O	O
=	O	O
>	O	O
int	O	O
days	O	O
=	O	O
DAYS	B-api_mention	O
.	I-api_mention	B-api_mention
daysBetween	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getDays	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Handling	O	O
of	O	O
multiple	O	O
-	O	O
unit	O	O
-	O	O
durations	O	O
are	O	O
also	O	O
different	O	O
.	O	O
Even	O	O
the	O	O
calculation	O	O
results	O	O
can	O	O
differ	O	O
-	O	O
see	O	O
this	O	O
closed	O	O
Joda	O	O
-	O	O
Time	O	O
issue	O	O
.	O	O
While	O	O
JSR	O	O
-	O	O
310	O	O
use	O	O
a	O	O
very	O	O
simple	O	O
and	O	O
limited	O	O
approach	O	O
to	O	O
use	O	O
just	O	O
the	O	O
classes	O	O
Period	B-api_mention	O
(	O	O
duration	O	O
based	O	O
on	O	O
years	O	O
,	O	O
months	O	O
and	O	O
days	O	O
)	O	O
and	O	O
Duration	B-api_mention	O
(	O	O
based	O	O
on	O	O
seconds	O	O
and	O	O
nanoseconds	O	O
)	O	O
,	O	O
Joda	O	O
-	O	O
Time	O	O
uses	O	O
a	O	O
more	O	O
sophisticated	O	O
way	O	O
using	O	O
the	O	O
class	O	O
PeriodType	O	O
in	O	O
order	O	O
to	O	O
control	O	O
in	O	O
which	O	O
units	O	O
a	O	O
duration	O	O
(	O	O
Joda	O	O
-	O	O
Time	O	O
call	O	O
it	O	O
"	O	O
Period	O	O
"	O	O
)	O	O
shall	O	O
be	O	O
expressed	O	O
.	O	O
While	O	O
the	O	O
PeriodType	B-api_mention	B-api_mention
-	O	O
API	O	O
is	O	O
somehow	O	O
awkward	O	O
to	O	O
use	O	O
a	O	O
similar	O	O
way	O	O
is	O	O
not	O	O
offered	O	O
by	O	O
JSR	O	O
-	O	O
310	O	O
at	O	O
all	O	O
.	O	O
Especially	O	O
it	O	O
is	O	O
not	O	O
yet	O	O
possible	O	O
in	O	O
JSR	O	O
-	O	O
310	O	O
to	O	O
define	O	O
mixed	O	O
date	O	O
and	O	O
time	O	O
durations	O	O
(	O	O
based	O	O
on	O	O
days	O	O
and	O	O
hours	O	O
for	O	O
example	O	O
)	O	O
.	O	O
So	O	O
be	O	O
warned	O	O
if	O	O
it	O	O
comes	O	O
to	O	O
migration	O	O
from	O	O
one	O	O
library	O	O
to	O	O
another	O	O
.	O	O
The	O	O
libraries	O	O
in	O	O
discussion	O	O
are	O	O
incompatible	O	O
-	O	O
despite	O	O
of	O	O
partially	O	O
same	O	O
class	O	O
names	O	O
.	O	O
Intervals	O	O
JSR	O	O
-	O	O
310	O	O
does	O	O
not	O	O
support	O	O
this	O	O
feature	O	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
has	O	O
limited	O	O
support	O	O
.	O	O
See	O	O
also	O	O
this	O	O
SO	O	O
-	O	O
answer	O	O
.	O	O
Formatting	O	O
and	O	O
Parsing	O	O
Best	O	O
way	O	O
to	O	O
compare	O	O
both	O	O
libraries	O	O
is	O	O
to	O	O
view	O	O
the	O	O
equal	O	O
-	O	O
named	O	O
classes	O	O
DateTimeFormatterBuilder	B-api_mention	B-api_mention
(	O	O
JSR	O	O
-	O	O
310	O	O
)	O	O
and	O	O
DateTimeFormatterBuilder	B-api_mention	B-api_mention
(	O	O
Joda	O	O
-	O	O
Time	O	O
)	O	O
.	O	O
The	O	O
JSR	O	O
-	O	O
310	O	O
-	O	O
variant	O	O
is	O	O
a	O	O
little	O	O
bit	O	O
more	O	O
powerful	O	O
(	O	O
can	O	O
also	O	O
handle	O	O
any	O	O
kind	O	O
of	O	O
TemporalField	B-api_mention	B-api_mention
provided	O	O
the	O	O
field	O	O
implementor	O	O
has	O	O
managed	O	O
to	O	O
code	O	O
some	O	O
extension	O	O
points	O	O
like	O	O
resolve	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
Most	O	O
important	O	O
difference	O	O
is	O	O
however	O	O
-	O	O
in	O	O
my	O	O
opinion	O	O
:	O	O
JSR	O	O
-	O	O
310	O	O
can	O	O
much	O	O
better	O	O
parse	O	O
timezone	O	O
names	O	O
(	O	O
format	O	O
pattern	O	O
symbol	O	O
z	O	O
)	O	O
while	O	O
Joda	O	O
-	O	O
Time	O	O
could	O	O
not	O	O
do	O	O
this	O	O
at	O	O
all	O	O
in	O	O
its	O	O
earlier	O	O
versions	O	O
and	O	O
now	O	O
only	O	O
in	O	O
a	O	O
very	O	O
limited	O	O
way	O	O
.	O	O
Another	O	O
advantage	O	O
of	O	O
JSR	O	O
-	O	O
310	O	O
is	O	O
support	O	O
for	O	O
standalone	O	O
month	O	O
names	O	O
which	O	O
is	O	O
important	O	O
in	O	O
languages	O	O
like	O	O
Russian	O	B-api_mention
or	O	O
Polish	O	O
etc	O	O
.	O	O
Joda	O	O
-	O	O
Time	O	O
has	O	O
no	O	O
access	O	O
to	O	O
such	O	O
resources	O	O
-	O	O
not	O	O
even	O	O
on	O	O
Java	O	O
-	O	O
8	O	O
platforms	O	O
.	O	O
The	O	O
pattern	O	O
syntax	O	O
in	O	O
JSR	O	O
-	O	O
310	O	O
is	O	O
also	O	O
more	O	O
flexible	O	O
than	O	O
in	O	O
Joda	O	O
-	O	O
Time	O	O
,	O	O
allows	O	O
for	O	O
optional	O	O
sections	O	O
(	O	O
using	O	O
square	O	O
brackets	O	O
)	O	O
,	O	O
is	O	O
more	O	O
orientated	O	O
towards	O	O
CLDR	O	O
-	O	O
standard	O	O
and	O	O
offers	O	O
padding	O	O
(	O	O
letter	O	O
symbol	O	O
p	O	O
)	O	O
and	O	O
more	O	O
fields	O	O
.	O	O
Otherwise	O	O
it	O	O
should	O	O
be	O	O
noted	O	O
that	O	O
Joda	O	O
-	O	O
Time	O	O
can	O	O
format	O	O
durations	O	O
using	O	O
PeriodFormatter	B-api_mention	B-api_mention
.	O	O
JSR	O	O
-	O	O
310	O	O
cannot	O	O
do	O	O
this	O	O
.	O	O
Hope	O	O
this	O	O
overview	O	O
helps	O	O
.	O	O
All	O	O
the	O	O
gathered	O	O
information	O	O
is	O	O
mainly	O	O
there	O	O
due	O	O
to	O	O
my	O	O
efforts	O	O
and	O	O
investigations	O	O
how	O	O
to	O	O
design	O	O
and	O	O
implement	O	O
a	O	O
better	O	O
date	O	O
-	O	O
and	O	O
-	O	O
time	O	O
library	O	O
(	O	O
nothing	O	O
is	O	O
perfect	O	O
)	O	O
.	O	O
Update	O	O
from	O	O
2015	O	O
-	O	O
06	O	O
-	O	O
24	O	O
:	O	O
Meanwhile	O	O
I	O	O
have	O	O
found	O	O
the	O	O
time	O	O
to	O	O
write	O	O
and	O	O
publish	O	O
a	O	O
tabular	O	O
overview	O	O
for	O	O
different	O	O
time	O	O
libraries	O	O
in	O	O
Java	O	O
.	O	O
The	O	O
tables	O	O
also	O	O
contain	O	O
a	O	O
comparison	O	O
between	O	O
Joda	O	O
-	O	O
Time	O	O
v2	O	O
.	O	O
8	O	O
.	O	O
1	O	O
and	O	O
Java	O	O
-	O	O
8	O	O
(	O	O
JSR	O	O
-	O	O
310	O	O
)	O	O
.	O	O
It	O	O
is	O	O
more	O	O
detailed	O	O
than	O	O
this	O	O
post	O	O
.	O	O
Question	O	O
-	O	O
23699371	O	O
,	O	O
answer	O	O
-	O	O
34731808	O	O
You	O	O
can	O	O
use	O	O
the	O	O
distinct	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
can	O	O
refactor	O	O
persons	O	O
to	O	O
implement	O	O
an	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
interface	O	O
,	O	O
you	O	O
can	O	O
call	O	O
the	O	O
method	O	O
directly	O	O
on	O	O
the	O	O
list	O	O
.	O	O
#	O	O
pre	O	O
HashingStrategy	O	O
is	O	O
simply	O	O
a	O	O
strategy	O	O
interface	O	O
that	O	O
allows	O	O
you	O	O
to	O	O
define	O	O
custom	O	O
implementations	O	O
of	O	O
equals	O	O
and	O	O
hashcode	O	O
.	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
a	O	O
committer	O	O
for	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
15156857	O	O
I	O	O
have	O	O
a	O	O
method	O	O
with	O	O
a	O	O
void	O	O
return	O	O
type	O	O
.	O	O
It	O	O
can	O	O
also	O	O
throw	O	O
a	O	O
number	O	O
of	O	O
exceptions	O	O
so	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
test	O	O
those	O	O
exceptions	O	O
being	O	O
thrown	O	O
.	O	O
All	O	O
attempts	O	O
have	O	O
failed	O	O
with	O	O
the	O	O
same	O	O
reason	O	O
:	O	O
#	O	O
blockquote	O	O
Any	O	O
ideas	O	O
how	O	O
I	O	O
can	O	O
get	O	O
the	O	O
method	O	O
to	O	O
throw	O	O
a	O	O
specified	O	O
exception	O	O
?	O	O
doThrow	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777266	O	O
It	O	O
'	O	O
s	O	O
a	O	O
famous	O	O
problem	O	O
:	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
arrays	O	O
is	O	O
badly	O	O
broken	O	O
,	O	O
just	O	O
don	O	O
'	O	O
t	O	O
use	O	O
it	O	O
,	O	O
ever	O	O
.	O	O
That	O	O
said	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
"	O	O
broken	O	O
"	O	O
as	O	O
in	O	O
"	O	O
someone	O	O
has	O	O
done	O	O
it	O	O
in	O	O
a	O	O
really	O	O
wrong	O	O
way	O	O
"	O	O
—	O	O
it	O	O
'	O	O
s	O	O
just	O	O
doing	O	O
what	O	O
'	O	O
s	O	O
defined	O	O
and	O	O
not	O	O
what	O	O
'	O	O
s	O	O
usually	O	O
expected	O	O
.	O	O
So	O	O
for	O	O
purists	O	O
:	O	O
it	O	O
'	O	O
s	O	O
perfectly	O	O
fine	O	O
,	O	O
and	O	O
that	O	O
also	O	O
means	O	O
,	O	O
don	O	O
'	O	O
t	O	O
use	O	O
it	O	O
,	O	O
ever	O	O
.	O	O
Now	O	O
the	O	O
expected	O	O
behaviour	O	O
for	O	O
equals	B-api_mention	B-api_mention
is	O	O
to	O	O
compare	O	O
data	O	O
.	O	O
The	O	O
default	O	O
behaviour	O	O
is	O	O
to	O	O
compare	O	O
the	O	O
identity	O	O
,	O	O
as	O	O
Object	B-api_mention	B-api_mention
does	O	O
not	O	O
have	O	O
any	O	O
data	O	O
(	O	O
for	O	O
purists	O	O
:	O	O
yes	O	O
it	O	O
has	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
not	O	O
the	O	O
point	O	O
)	O	O
;	O	O
assumption	O	O
is	O	O
,	O	O
if	O	O
you	O	O
need	O	O
equals	B-api_mention	O
in	O	O
subclasses	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
implement	O	O
it	O	O
.	O	O
In	O	O
arrays	O	O
,	O	O
there	O	O
'	O	O
s	O	O
no	O	O
implementation	O	O
for	O	O
you	O	O
,	O	O
so	O	O
you	O	O
'	O	O
re	O	O
not	O	O
supposed	O	O
to	O	O
use	O	O
it	O	O
.	O	O
So	O	O
the	O	O
difference	O	O
is	O	O
,	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
works	O	O
as	O	O
you	O	O
would	O	O
expect	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
compares	O	O
content	O	O
)	O	O
,	O	O
array1	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
falls	O	O
back	O	O
to	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
implementation	O	O
,	O	O
which	O	O
in	O	O
turn	O	O
compares	O	O
identity	O	O
,	O	O
and	O	O
thus	O	O
better	O	O
replaced	O	O
by	O	O
=	O	O
=	O	O
(	O	O
for	O	O
purists	O	O
:	O	O
yes	O	O
I	O	O
know	O	O
about	O	O
null	O	O
)	O	O
.	O	O
Problem	O	O
is	O	O
,	O	O
even	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
bite	O	O
you	O	O
hard	O	O
if	O	O
elements	O	O
of	O	O
array	O	O
do	O	O
not	O	O
implement	O	O
equals	B-api_mention	O
properly	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
very	O	O
naive	O	O
statement	O	O
,	O	O
I	O	O
know	O	O
,	O	O
but	O	O
there	O	O
'	O	O
s	O	O
a	O	O
very	O	O
important	O	O
less	O	O
-	O	O
than	O	O
-	O	O
obvious	O	O
case	O	O
:	O	O
consider	O	O
a	O	O
2D	O	O
array	O	O
.	O	O
2D	O	O
array	O	O
in	O	O
Java	O	O
is	O	O
an	O	O
array	O	O
of	O	O
arrays	O	O
,	O	O
and	O	O
arrays	O	O
'	O	O
equals	B-api_mention	O
is	O	O
broken	O	O
(	O	O
or	O	O
useless	O	O
if	O	O
you	O	O
prefer	O	O
)	O	O
,	O	O
so	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
not	O	O
work	O	O
as	O	O
you	O	O
expect	O	O
on	O	O
2D	O	O
arrays	O	O
.	O	O
Hope	O	O
that	O	O
helps	O	O
.	O	O
Question	O	O
-	O	O
4812570	O	O
,	O	O
answer	O	O
-	O	O
4812585	O	O
You	O	O
have	O	O
to	O	O
use	O	O
getStackTrace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
instead	O	O
of	O	O
printStackTrace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Here	O	O
is	O	O
a	O	O
good	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6608795	O	O
,	O	O
answer	O	O
-	O	O
20069798	O	O
All	O	O
these	O	O
answers	O	O
around	O	O
here	O	O
,	O	O
as	O	O
well	O	O
as	O	O
the	O	O
answers	O	O
in	O	O
this	O	O
question	O	O
,	O	O
suggest	O	O
that	O	O
loading	O	O
absolute	O	O
URLs	O	O
,	O	O
like	O	O
"	O	O
/	O	O
foo	O	O
/	O	O
bar	O	O
.	O	O
properties	O	O
"	O	O
treated	O	O
the	O	O
same	O	O
by	O	O
class	O	O
.	B-api_mention	B-api_mention
getResourceAsStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
class	O	O
.	B-api_mention	B-api_mention
getClassLoader	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResourceAsStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
is	O	O
NOT	O	O
the	O	O
case	O	O
,	O	O
at	O	O
least	O	O
not	O	O
in	O	O
my	O	O
Tomcat	O	O
configuration	O	O
/	O	O
version	O	O
(	O	O
currently	O	O
7	O	O
.	O	O
0	O	O
.	O	O
40	O	O
)	O	O
.	O	O
#	O	O
pre	O	O
Sorry	O	O
,	O	O
I	O	O
have	O	O
absolutely	O	O
no	O	O
satisfying	O	O
explanation	O	O
,	O	O
but	O	O
I	O	O
guess	O	O
that	O	O
tomcat	O	O
does	O	O
dirty	O	O
tricks	O	O
and	O	O
his	O	O
black	O	O
magic	O	O
with	O	O
the	O	O
classloaders	O	O
and	O	O
cause	O	O
the	O	O
difference	O	O
.	O	O
I	O	O
always	O	O
used	O	O
class	O	O
.	B-api_mention	B-api_mention
getResourceAsStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
past	O	O
and	O	O
haven	O	O
'	O	O
t	O	O
had	O	O
any	O	O
problems	O	O
.	O	O
PS	O	O
:	O	O
I	O	O
also	O	O
posted	O	O
this	O	O
over	O	O
here	O	O
Question	O	O
-	O	O
17828584	O	O
,	O	O
answer	O	O
-	O	O
17836189	O	O
I	O	O
think	O	O
the	O	O
others	O	O
have	O	O
done	O	O
a	O	O
good	O	O
job	O	O
at	O	O
explaining	O	O
why	O	O
cnt	O	O
>	O	O
0	O	O
,	O	O
but	O	O
there	O	O
'	O	O
s	O	O
not	O	O
enough	O	O
details	O	O
regarding	O	O
why	O	O
cnt	O	O
=	O	O
4	O	O
,	O	O
and	O	O
why	O	O
cnt	O	O
varies	O	O
so	O	O
widely	O	O
among	O	O
different	O	O
settings	O	O
.	O	O
I	O	O
will	O	O
attempt	O	O
to	O	O
fill	O	O
that	O	O
void	O	O
here	O	O
.	O	O
Let	O	O
#	O	O
li	O	O
X	O	O
be	O	O
the	O	O
total	O	O
stack	O	O
size	O	O
#	O	O
li	O	O
M	O	O
be	O	O
the	O	O
stack	O	O
space	O	O
used	O	O
when	O	O
we	O	O
enter	O	O
main	O	O
the	O	O
first	O	O
time	O	O
#	O	O
li	O	O
R	O	O
be	O	O
the	O	O
stack	O	O
space	O	O
increase	O	O
each	O	O
time	O	O
we	O	O
enter	O	O
into	O	O
main	O	O
#	O	O
li	O	O
P	O	O
be	O	O
the	O	O
stack	O	O
space	O	O
necessary	O	O
to	O	O
run	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
When	O	O
we	O	O
first	O	O
get	O	O
into	O	O
main	O	O
,	O	O
the	O	O
space	O	O
left	O	O
over	O	O
is	O	O
X	O	O
-	O	O
M	O	O
.	O	O
Each	O	O
recursive	O	O
call	O	O
takes	O	O
up	O	O
R	O	O
more	O	O
memory	O	O
.	O	O
So	O	O
for	O	O
1	O	O
recursive	O	O
call	O	O
(	O	O
1	O	O
more	O	O
than	O	O
original	O	O
)	O	O
,	O	O
the	O	O
memory	O	O
use	O	O
is	O	O
M	O	O
+	O	O
R	O	O
.	O	O
Suppose	O	O
that	O	O
StackOverflowError	B-api_mention	B-api_mention
is	O	O
thrown	O	O
after	O	O
C	O	O
successful	O	O
recursive	O	O
calls	O	O
,	O	O
that	O	O
is	O	O
,	O	O
M	O	O
+	O	O
C	O	O
*	O	O
R	O	O
<	O	O
=	O	O
X	O	O
and	O	O
M	O	O
+	O	O
C	O	O
*	O	O
(	O	O
R	O	O
+	O	O
1	O	O
)	O	O
>	O	O
X	O	O
.	O	O
At	O	O
the	O	O
time	O	O
of	O	O
the	O	O
first	O	O
StackOverflowError	B-api_mention	B-api_mention
,	O	O
there	O	O
'	O	O
s	O	O
X	O	O
-	O	O
M	O	O
-	O	O
C	O	O
*	O	O
R	O	O
memory	O	O
left	O	O
.	O	O
To	O	O
be	O	O
able	O	O
to	O	O
run	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
prinln	I-api_mention	I-api_mention
,	O	O
we	O	O
need	O	O
P	O	O
amount	O	O
of	O	O
space	O	O
left	O	O
on	O	O
the	O	O
stack	O	O
.	O	O
If	O	O
it	O	O
so	O	O
happens	O	O
that	O	O
X	O	O
-	O	O
M	O	O
-	O	O
C	O	O
*	O	O
R	O	O
>	O	O
=	O	O
P	O	O
,	O	O
then	O	O
0	O	O
will	O	O
be	O	O
printed	O	O
.	O	O
If	O	O
P	O	O
requires	O	O
more	O	O
space	O	O
,	O	O
then	O	O
we	O	O
remove	O	O
frames	O	O
from	O	O
the	O	O
stack	O	O
,	O	O
gaining	O	O
R	O	O
memory	O	O
at	O	O
the	O	O
cost	O	O
of	O	O
cnt	O	O
+	O	O
+	O	O
.	O	O
When	O	O
println	B-api_mention	B-api_mention
is	O	O
finally	O	O
able	O	O
to	O	O
run	O	O
,	O	O
X	O	O
-	O	O
M	O	O
-	O	O
(	O	O
C	O	O
-	O	O
cnt	O	O
)	O	O
*	O	O
R	O	O
>	O	O
=	O	O
P	O	O
.	O	O
So	O	O
if	O	O
P	O	O
is	O	O
large	O	O
for	O	O
a	O	O
particular	O	O
system	O	O
,	O	O
then	O	O
cnt	O	O
will	O	O
be	O	O
large	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
look	O	O
at	O	O
this	O	O
with	O	O
some	O	O
examples	O	O
.	O	O
Example	O	O
1	O	O
:	O	O
Suppose	O	O
#	O	O
li	O	O
X	O	O
=	O	O
100	O	O
#	O	O
li	O	O
M	O	O
=	O	O
1	O	O
#	O	O
li	O	O
R	O	O
=	O	O
2	O	O
#	O	O
li	O	O
P	O	O
=	O	O
1	O	O
Then	O	O
C	O	O
=	O	O
floor	O	O
(	O	O
(	O	O
X	O	O
-	O	O
M	O	O
)	O	O
/	O	O
R	O	O
)	O	O
=	O	O
49	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
ceiling	O	O
(	O	O
(	O	O
P	O	O
-	O	O
(	O	O
X	O	O
-	O	O
M	O	O
-	O	O
C	O	O
*	O	O
R	O	O
)	O	O
)	O	O
/	O	O
R	O	O
)	O	O
=	O	O
0	O	O
.	O	O
Example	O	O
2	O	O
:	O	O
Suppose	O	O
that	O	O
#	O	O
li	O	O
X	O	O
=	O	O
100	O	O
#	O	O
li	O	O
M	O	O
=	O	O
1	O	O
#	O	O
li	O	O
R	O	O
=	O	O
5	O	O
#	O	O
li	O	O
P	O	O
=	O	O
12	O	O
Then	O	O
C	O	O
=	O	O
19	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
2	O	O
.	O	O
Example	O	O
3	O	O
:	O	O
Suppose	O	O
that	O	O
#	O	O
li	O	O
X	O	O
=	O	O
101	O	O
#	O	O
li	O	O
M	O	O
=	O	O
1	O	O
#	O	O
li	O	O
R	O	O
=	O	O
5	O	O
#	O	O
li	O	O
P	O	O
=	O	O
12	O	O
Then	O	O
C	O	O
=	O	O
20	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
3	O	O
.	O	O
Example	O	O
4	O	O
:	O	O
Suppose	O	O
that	O	O
#	O	O
li	O	O
X	O	O
=	O	O
101	O	O
#	O	O
li	O	O
M	O	O
=	O	O
2	O	O
#	O	O
li	O	O
R	O	O
=	O	O
5	O	O
#	O	O
li	O	O
P	O	O
=	O	O
12	O	O
Then	O	O
C	O	O
=	O	O
19	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
2	O	O
.	O	O
Thus	O	O
,	O	O
we	O	O
see	O	O
that	O	O
both	O	O
the	O	O
system	O	O
(	O	O
M	O	O
,	O	O
R	O	O
,	O	O
and	O	O
P	O	O
)	O	O
and	O	O
the	O	O
stack	O	O
size	O	O
(	O	O
X	O	O
)	O	O
affects	O	O
cnt	O	O
.	O	O
As	O	O
a	O	O
side	O	O
note	O	O
,	O	O
it	O	O
does	O	O
not	O	O
matter	O	O
how	O	O
much	O	O
space	O	O
catch	O	O
requires	O	O
to	O	O
start	O	O
.	O	O
As	O	O
long	O	O
as	O	O
there	O	O
is	O	O
not	O	O
enough	O	O
space	O	O
for	O	O
catch	O	O
,	O	O
then	O	O
cnt	O	O
will	O	O
not	O	O
increase	O	O
,	O	O
so	O	O
there	O	O
are	O	O
no	O	O
external	O	O
effects	O	O
.	O	O
EDIT	O	O
I	O	O
take	O	O
back	O	O
what	O	O
I	O	O
said	O	O
about	O	O
catch	O	O
.	O	O
It	O	O
does	O	O
play	O	O
a	O	O
role	O	O
.	O	O
Suppose	O	O
it	O	O
requires	O	O
T	O	O
amount	O	O
of	O	O
space	O	O
to	O	O
start	O	O
.	O	O
cnt	O	O
starts	O	O
to	O	O
increment	O	O
when	O	O
the	O	O
leftover	O	O
space	O	O
is	O	O
greater	O	O
than	O	O
T	O	O
,	O	O
and	O	O
println	B-api_mention	B-api_mention
runs	O	O
when	O	O
the	O	O
leftover	O	O
space	O	O
is	O	O
greater	O	O
than	O	O
T	O	O
+	O	O
P	O	O
.	O	O
This	O	O
adds	O	O
an	O	O
extra	O	O
step	O	O
to	O	O
the	O	O
calculations	O	O
and	O	O
further	O	O
muddies	O	O
up	O	O
the	O	O
already	O	O
muddy	O	O
analysis	O	O
.	O	O
EDIT	O	O
I	O	O
finally	O	O
found	O	O
time	O	O
to	O	O
run	O	O
some	O	O
experiments	O	O
to	O	O
back	O	O
up	O	O
my	O	O
theory	O	O
.	O	O
Unfortunately	O	O
,	O	O
the	O	O
theory	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
match	O	O
up	O	O
with	O	O
the	O	O
experiments	O	O
.	O	O
What	O	O
actually	O	O
happens	O	O
is	O	O
very	O	O
different	O	O
.	O	O
Experiment	O	O
setup	O	O
:	O	O
Ubuntu	O	O
12	O	O
.	O	O
04	O	O
server	O	O
with	O	O
default	O	O
java	O	O
and	O	O
default	O	O
-	O	O
jdk	O	O
.	O	O
Xss	O	O
starting	O	O
at	O	O
70	O	O
,	O	O
000	O	O
at	O	O
1	O	O
byte	O	O
increments	O	O
to	O	O
460	O	O
,	O	O
000	O	O
.	O	O
The	O	O
results	O	O
are	O	O
available	O	O
at	O	O
:	O	O
#	O	O
a	O	O
I	O	O
'	O	O
ve	O	O
created	O	O
another	O	O
version	O	O
where	O	O
every	O	O
repeated	O	O
data	O	O
point	O	O
is	O	O
removed	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
only	O	O
points	O	O
that	O	O
are	O	O
different	O	O
from	O	O
the	O	O
previous	O	O
are	O	O
shown	O	O
.	O	O
This	O	O
makes	O	O
it	O	O
easier	O	O
to	O	O
see	O	O
anomalies	O	O
.	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
6684665	O	O
,	O	O
answer	O	O
-	O	O
6684935	O	O
If	O	O
you	O	O
want	O	O
to	O	O
convert	O	O
the	O	O
string	O	O
back	O	O
into	O	O
a	O	O
byte	O	O
array	O	O
you	O	O
will	O	O
need	O	O
to	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getBytes	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
or	O	O
equivalent	O	O
Python	O	O
function	O	O
)	O	O
and	O	O
this	O	O
will	O	O
allow	O	O
you	O	O
print	O	O
out	O	O
the	O	O
original	O	O
byte	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
34509566	O	O
,	O	O
answer	O	O
-	O	O
34509659	O	O
Four	O	O
things	O	O
are	O	O
going	O	O
on	O	O
:	O	O
#	O	O
li	O	O
(	O	O
You	O	O
clearly	O	O
know	O	O
this	O	O
,	O	O
but	O	O
for	O	O
lurkers	O	O
)	O	O
=	O	O
=	O	O
tests	O	O
to	O	O
see	O	O
if	O	O
the	O	O
variables	O	O
point	O	O
to	O	O
the	O	O
same	O	O
String	B-api_mention	B-api_mention
object	O	O
,	O	O
not	O	O
equivalent	O	O
strings	O	O
.	O	O
So	O	O
even	O	O
if	O	O
x	O	O
is	O	O
StringLiteral	O	O
and	O	O
y	O	O
is	O	O
also	O	O
StringLiteral	O	O
,	O	O
x	O	O
=	O	O
=	O	O
y	O	O
may	O	O
be	O	O
true	O	O
or	O	O
false	O	O
,	O	O
depending	O	O
on	O	O
whether	O	O
x	O	O
and	O	O
y	O	O
refer	O	O
to	O	O
the	O	O
same	O	O
String	B-api_mention	B-api_mention
object	O	O
or	O	O
different	O	O
ones	O	O
.	O	O
That	O	O
'	O	O
s	O	O
why	O	O
we	O	O
use	O	O
equals	O	O
,	O	O
not	O	O
=	O	O
=	O	O
,	O	O
to	O	O
compare	O	O
strings	O	O
for	O	O
equivalence	O	O
.	O	O
All	O	O
of	O	O
the	O	O
following	O	O
is	O	O
just	O	O
meant	O	O
to	O	O
explain	O	O
why	O	O
=	O	O
=	O	O
is	O	O
sometimes	O	O
true	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
a	O	O
suggestion	O	O
to	O	O
use	O	O
=	O	O
=	O	O
to	O	O
compare	O	O
strings	O	O
.	O	O
:	O	O
-	O	O
)	O	O
#	O	O
li	O	O
Equivalent	O	O
string	O	O
constants	O	O
(	O	O
strings	O	O
the	O	O
compiler	O	O
knows	O	O
are	O	O
constants	O	O
according	O	O
to	O	O
various	O	O
rules	O	O
in	O	O
the	O	O
JLS	O	O
)	O	O
within	O	O
the	O	O
same	O	O
class	O	O
are	O	O
made	O	O
to	O	O
refer	O	O
to	O	O
the	O	O
same	O	O
string	O	O
by	O	O
the	O	O
compiler	O	O
(	O	O
which	O	O
also	O	O
lists	O	O
them	O	O
in	O	O
the	O	O
class	O	O
'	O	O
s	O	O
"	O	O
constant	O	O
pool	O	O
"	O	O
)	O	O
.	O	O
That	O	O
'	O	O
s	O	O
why	O	O
a	O	O
=	O	O
=	O	O
b	O	O
is	O	O
true	O	O
.	O	O
#	O	O
li	O	O
When	O	O
the	O	O
class	O	O
is	O	O
loaded	O	O
,	O	O
each	O	O
of	O	O
its	O	O
string	O	O
constants	O	O
is	O	O
automatically	O	O
interned	O	O
—	O	O
the	O	O
JVM	O	O
'	O	O
s	O	O
string	O	O
pool	O	O
is	O	O
checked	O	O
for	O	O
an	O	O
equivalent	O	O
string	O	O
and	O	O
if	O	O
one	O	O
is	O	O
found	O	O
,	O	O
that	O	O
String	B-api_mention	B-api_mention
object	O	O
is	O	O
used	O	O
(	O	O
if	O	O
not	O	O
,	O	O
the	O	O
new	O	O
String	B-api_mention	B-api_mention
object	O	O
for	O	O
the	O	O
new	O	O
constant	O	O
is	O	O
added	O	O
to	O	O
the	O	O
pool	O	O
)	O	O
.	O	O
So	O	O
even	O	O
if	O	O
x	O	O
is	O	O
a	O	O
string	O	O
constant	O	O
initialized	O	O
in	O	O
class	O	O
Foo	O	O
and	O	O
y	O	O
is	O	O
a	O	O
string	O	O
constant	O	O
initialized	O	O
in	O	O
class	O	O
Bar	O	O
,	O	O
they	O	O
'	O	O
ll	O	O
be	O	O
=	O	O
=	O	O
each	O	O
other	O	O
.	O	O
Points	O	O
2	O	O
and	O	O
3	O	O
above	O	O
are	O	O
covered	O	O
in	O	O
part	O	O
by	O	O
JLS	O	O
§	O	O
3	O	O
.	O	O
10	O	O
.	O	O
5	O	O
.	O	O
(	O	O
The	O	O
bit	O	O
about	O	O
the	O	O
class	O	O
constant	O	O
pool	O	O
is	O	O
a	O	O
bit	O	O
of	O	O
an	O	O
implementation	O	O
detail	O	O
,	O	O
hence	O	O
the	O	O
link	O	O
to	O	O
the	O	O
JVM	O	O
spec	O	O
earlier	O	O
;	O	O
the	O	O
JLS	O	O
just	O	O
speaks	O	O
of	O	O
interning	O	O
.	O	O
)	O	O
#	O	O
li	O	O
The	O	O
compiler	O	O
does	O	O
string	O	O
concatenation	O	O
if	O	O
it	O	O
'	O	O
s	O	O
dealing	O	O
with	O	O
constant	O	O
values	O	O
,	O	O
so	O	O
String	B-api_mention	B-api_mention
d	O	O
=	O	O
StringLiteral	O	O
+	O	O
StringLiteral	O	O
;	O	O
is	O	O
compiled	O	O
to	O	O
String	B-api_mention	B-api_mention
d	O	O
=	O	O
StringLiteral	O	O
;	O	O
and	O	O
StringLiteral	O	O
is	O	O
a	O	O
string	O	O
constant	O	O
the	O	O
compiler	O	O
and	O	O
JVM	O	O
apply	O	O
points	O	O
2	O	O
and	O	O
3	O	O
above	O	O
to	O	O
.	O	O
E	O	O
.	O	O
g	O	O
.	O	O
,	O	O
no	O	O
StringBuilder	B-api_mention	B-api_mention
is	O	O
used	O	O
,	O	O
the	O	O
concatenation	O	O
happens	O	O
at	O	O
compile	O	O
-	O	O
time	O	O
,	O	O
not	O	O
runtime	O	O
.	O	O
This	O	O
is	O	O
covered	O	O
in	O	O
JLS	O	O
§	O	O
15	O	O
.	O	O
28	O	O
-	O	O
Constant	O	O
Expressions	O	O
.	O	O
So	O	O
a	O	O
=	O	O
=	O	O
d	O	O
is	O	O
true	O	O
for	O	O
the	O	O
same	O	O
reason	O	O
a	O	O
=	O	O
=	O	O
b	O	O
is	O	O
true	O	O
:	O	O
They	O	O
refer	O	O
to	O	O
the	O	O
same	O	O
constant	O	O
string	O	O
,	O	O
so	O	O
the	O	O
compiler	O	O
ensured	O	O
they	O	O
were	O	O
referring	O	O
to	O	O
the	O	O
same	O	O
string	O	O
in	O	O
the	O	O
class	O	O
'	O	O
s	O	O
constant	O	O
pool	O	O
.	O	O
The	O	O
compiler	O	O
can	O	O
'	O	O
t	O	O
do	O	O
that	O	O
when	O	O
any	O	O
of	O	O
the	O	O
operands	O	O
is	O	O
not	O	O
a	O	O
constant	O	O
,	O	O
so	O	O
it	O	O
can	O	O
'	O	O
t	O	O
do	O	O
that	O	O
with	O	O
:	O	O
String	B-api_mention	B-api_mention
e	O	O
=	O	O
c	O	O
+	O	O
StringLiteral	O	O
;	O	O
.	O	O
.	O	O
.	O	O
even	O	O
though	O	O
code	O	O
analysis	O	O
could	O	O
easily	O	O
show	O	O
that	O	O
the	O	O
value	O	O
of	O	O
c	O	O
will	O	O
definitely	O	O
be	O	O
StringLiteral	O	O
and	O	O
thus	O	O
e	O	O
will	O	O
definitely	O	O
be	O	O
StringLiteral	O	O
.	O	O
The	O	O
specification	O	O
only	O	O
has	O	O
the	O	O
compiler	O	O
do	O	O
the	O	O
concatenation	O	O
with	O	O
constant	O	O
values	O	O
,	O	O
specifically	O	O
.	O	O
So	O	O
since	O	O
the	O	O
compiler	O	O
can	O	O
'	O	O
t	O	O
do	O	O
it	O	O
,	O	O
it	O	O
outputs	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
code	O	O
you	O	O
referred	O	O
to	O	O
and	O	O
that	O	O
work	O	O
is	O	O
done	O	O
at	O	O
runtime	O	O
,	O	O
creating	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
object	O	O
.	O	O
That	O	O
string	O	O
isn	O	O
'	O	O
t	O	O
automatically	O	O
interned	O	O
,	O	O
so	O	O
e	O	O
ends	O	O
up	O	O
referring	O	O
to	O	O
a	O	O
different	O	O
String	B-api_mention	B-api_mention
object	O	O
than	O	O
a	O	O
does	O	O
,	O	O
and	O	O
so	O	O
a	O	O
=	O	O
=	O	O
e	O	O
is	O	O
false	O	O
.	O	O
Note	O	O
that	O	O
as	O	O
Vinod	O	O
said	O	O
,	O	O
if	O	O
you	O	O
declared	O	O
c	O	O
as	O	O
final	O	O
:	O	O
final	O	O
String	B-api_mention	B-api_mention
c	O	O
=	O	O
StringLiteral	O	O
;	O	O
Then	O	O
it	O	O
would	O	O
be	O	O
a	O	O
constant	O	O
variable	O	O
(	O	O
yes	O	O
,	O	O
they	O	O
'	O	O
re	O	O
really	O	O
called	O	O
that	O	O
)	O	O
and	O	O
so	O	O
§	O	O
15	O	O
.	O	O
28	O	O
would	O	O
apply	O	O
and	O	O
the	O	O
compiler	O	O
would	O	O
turn	O	O
String	B-api_mention	B-api_mention
e	O	O
=	O	O
c	O	O
+	O	O
StringLiteral	O	O
;	O	O
into	O	O
String	B-api_mention	B-api_mention
e	O	O
=	O	O
StringLiteral	O	O
;	O	O
and	O	O
a	O	O
=	O	O
=	O	O
e	O	O
would	O	O
also	O	O
be	O	O
true	O	O
.	O	O
Just	O	O
to	O	O
reiterate	O	O
:	O	O
None	O	O
of	O	O
which	O	O
means	O	O
we	O	O
should	O	O
use	O	O
=	O	O
=	O	O
to	O	O
compare	O	O
strings	O	O
for	O	O
equivalence	O	O
.	O	O
:	O	O
-	O	O
)	O	O
That	O	O
'	O	O
s	O	O
what	O	O
equals	O	O
is	O	O
for	O	O
.	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16149160	O	O
HashMap	B-api_mention	B-api_mention
does	O	O
not	O	O
allow	O	O
primitive	O	O
data	O	O
types	O	O
as	O	O
arguments	O	O
.	O	O
It	O	O
can	O	O
only	O	O
accept	O	O
objects	O	O
so	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
will	O	O
not	O	O
work	O	O
.	O	O
You	O	O
have	O	O
to	O	O
change	O	O
the	O	O
declaration	O	O
to	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
so	O	O
even	O	O
when	O	O
you	O	O
do	O	O
the	O	O
following	O	O
myMap	O	B-api_mention
.	B-api_mention	I-api_mention
put	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
primitive	O	O
data	O	O
type	O	O
is	O	O
autoboxed	O	O
to	O	O
an	O	O
Integer	O	B-api_mention
object	O	O
.	O	O
8	O	O
(	O	O
args	O	O
)	O	O
=	O	O
=	O	O
=	O	O
boxing	O	O
=	O	O
=	O	O
=	O	O
>	O	O
8	O	O
(	O	O
args	O	O
)	O	O
You	O	O
can	O	O
read	O	O
more	O	O
on	O	O
autoboxing	O	O
here	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
13291076	O	O
If	O	O
you	O	O
look	O	O
in	O	O
the	O	O
enum	O	O
api	O	O
at	O	O
the	O	O
method	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
says	O	O
that	O	O
:	O	O
#	O	O
blockquote	O	O
Why	O	O
is	O	O
better	O	O
to	O	O
use	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
I	O	O
mean	O	O
toString	B-api_mention	B-api_mention
may	O	O
be	O	O
overridden	O	O
when	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
already	O	O
final	O	O
.	O	O
So	O	O
if	O	O
you	O	O
use	O	O
toString	B-api_mention	B-api_mention
and	O	O
someone	O	O
overrides	O	O
it	O	O
to	O	O
return	O	O
a	O	O
hard	O	O
-	O	O
coded	O	O
value	O	O
your	O	O
whole	O	O
application	O	O
is	O	O
down	O	O
.	O	O
.	O	O
.	O	O
Also	O	O
if	O	O
you	O	O
look	O	O
in	O	O
the	O	O
sources	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
exactly	O	O
and	O	O
just	O	O
the	O	O
name	O	O
.	O	O
It	O	O
'	O	O
s	O	O
the	O	O
same	O	O
thing	O	O
.	O	O
Question	O	O
-	O	O
32294367	O	O
,	O	O
answer	O	O
-	O	O
32294898	O	O
#	O	O
blockquote	O	O
Let	O	O
me	O	O
ask	O	O
a	O	O
counterquestion	O	O
:	O	O
why	O	O
do	O	O
you	O	O
think	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stop	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
has	O	O
been	O	O
deprecated	O	O
for	O	O
more	O	O
than	O	O
a	O	O
decade	O	O
?	O	O
The	O	O
reason	O	O
why	O	O
is	O	O
precisely	O	O
the	O	O
negation	O	O
of	O	O
your	O	O
statement	O	O
above	O	O
.	O	O
To	O	O
give	O	O
two	O	O
specific	O	O
examples	O	O
:	O	O
you	O	O
stop	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
a	O	O
thread	O	O
while	O	O
it	O	O
'	O	O
s	O	O
executing	O	O
something	O	O
as	O	O
innocuous	O	O
-	O	O
sounding	O	O
as	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Result	O	O
:	O	O
those	O	O
two	O	O
features	O	O
are	O	O
now	O	O
broken	O	O
for	O	O
the	O	O
entire	O	O
JVM	O	O
.	O	O
The	O	O
same	O	O
pertains	O	O
to	O	O
any	O	O
other	O	O
synchronized	O	O
code	O	O
your	O	O
application	O	O
may	O	O
execute	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
application	O	O
may	O	O
theoretically	O	O
be	O	O
coded	O	O
such	O	O
that	O	O
absolutely	O	O
no	O	O
shared	O	O
resource	O	O
protected	O	O
by	O	O
locks	O	O
is	O	O
ever	O	O
used	O	O
;	O	O
however	O	O
that	O	O
will	O	O
only	O	O
help	O	O
to	O	O
point	O	O
out	O	O
the	O	O
exact	O	O
extent	O	O
to	O	O
which	O	O
Java	O	O
threads	O	O
are	O	O
codependent	O	O
.	O	O
And	O	O
the	O	O
"	O	O
independence	O	O
"	O	O
achieved	O	O
will	O	O
only	O	O
pertain	O	O
to	O	O
the	O	O
request	O	O
-	O	O
processing	O	O
threads	O	O
,	O	O
not	O	O
to	O	O
all	O	O
threads	O	O
in	O	O
such	O	O
an	O	O
application	O	O
.	O	O
Question	O	O
-	O	O
23674624	O	O
,	O	O
answer	O	O
-	O	O
23674719	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	O
boxed	I-api_mention	O
turns	O	O
an	O	O
IntStream	B-api_mention	B-api_mention
into	O	O
a	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
you	O	O
can	O	O
then	O	O
collect	O	O
into	O	O
a	O	O
list	O	O
:	O	O
theIntStream	O	B-api_mention
.	B-api_mention	I-api_mention
boxed	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
20001427	O	O
,	O	O
answer	O	O
-	O	O
20001866	O	O
Usually	O	O
,	O	O
one	O	O
would	O	O
call	O	O
the	O	O
reduce	O	O
method	O	O
using	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
requires	O	O
a	O	O
lot	O	O
of	O	O
syntax	O	O
for	O	O
just	O	O
calling	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
.	O	O
That	O	O
'	O	O
s	O	O
where	O	O
lambda	O	O
expressions	O	O
come	O	O
into	O	O
play	O	O
.	O	O
Since	O	O
Java	O	O
8	O	O
it	O	O
is	O	O
allowed	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
in	O	O
a	O	O
much	O	O
shorter	O	O
way	O	O
:	O	O
reduce	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
How	O	O
does	O	O
this	O	O
work	O	O
?	O	O
The	O	O
java	O	O
compiler	O	O
"	O	O
detects	O	O
"	O	O
,	O	O
that	O	O
you	O	O
want	O	O
to	O	O
implement	O	O
a	O	O
method	O	O
that	O	O
accepts	O	O
two	O	O
int	O	O
s	O	O
and	O	O
returns	O	O
one	O	O
int	O	O
.	O	O
This	O	O
is	O	O
equivalent	O	O
to	O	O
the	O	O
formal	O	O
parameters	O	O
of	O	O
the	O	O
one	O	O
and	O	O
only	O	O
method	O	O
of	O	O
interface	O	O
IntBinaryOperator	B-api_mention	O
(	O	O
the	O	O
parameter	O	O
of	O	O
method	O	O
reduce	O	O
you	O	O
want	O	O
to	O	O
call	O	O
)	O	O
.	O	O
So	O	O
the	O	O
compiler	O	O
does	O	O
the	O	O
rest	O	O
for	O	O
you	O	O
-	O	O
it	O	O
just	O	O
assumes	O	O
you	O	O
want	O	O
to	O	O
implement	O	O
IntBinaryOperator	B-api_mention	B-api_mention
.	O	O
But	O	O
as	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
itself	O	O
fulfills	O	O
the	O	O
formal	O	O
requirements	O	O
of	O	O
IntBinaryOperator	B-api_mention	B-api_mention
,	O	O
it	O	O
can	O	O
be	O	O
used	O	O
directly	O	O
.	O	O
Because	O	O
Java	O	O
7	O	O
does	O	O
not	O	O
have	O	O
any	O	O
syntax	O	O
that	O	O
allows	O	O
a	O	O
method	O	O
itself	O	O
to	O	O
be	O	O
passed	O	O
as	O	O
an	O	O
argument	O	O
(	O	O
you	O	O
can	O	O
only	O	O
pass	O	O
method	O	O
results	O	O
,	O	O
but	O	O
never	O	O
method	O	O
references	O	O
)	O	O
,	O	O
the	O	O
:	O	O
:	O	O
syntax	O	O
was	O	O
introduced	O	O
in	O	O
Java	O	O
8	O	O
to	O	O
reference	O	O
methods	O	O
:	O	O
reduce	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
that	O	O
this	O	O
will	O	O
be	O	O
interpreted	O	O
by	O	O
the	O	O
compiler	O	O
,	O	O
not	O	O
by	O	O
the	O	O
JVM	O	O
at	O	O
runtime	O	O
!	O	O
Although	O	O
it	O	O
produces	O	O
different	O	O
bytecodes	O	O
for	O	O
all	O	O
three	O	O
code	O	O
snippets	O	O
,	O	O
they	O	O
are	O	O
semantically	O	O
equal	O	O
,	O	O
so	O	O
the	O	O
last	O	O
two	O	O
can	O	O
be	O	O
considered	O	O
to	O	O
be	O	O
short	O	O
(	O	O
and	O	O
probably	O	O
more	O	O
efficient	O	O
)	O	O
versions	O	O
of	O	O
the	O	O
IntBinaryOperator	B-api_mention	B-api_mention
implementation	O	O
above	O	O
!	O	O
(	O	O
See	O	O
also	O	O
Translation	O	O
of	O	O
Lambda	O	O
Expressions	O	O
)	O	O
Question	O	O
-	O	O
11359187	O	O
For	O	O
the	O	O
first	O	O
time	O	O
in	O	O
my	O	O
life	O	O
I	O	O
find	O	O
myself	O	O
in	O	O
a	O	O
position	O	O
where	O	O
I	O	O
'	O	O
m	O	O
writing	O	O
a	O	O
Java	O	O
API	O	O
that	O	O
will	O	O
be	O	O
open	O	O
sourced	O	O
.	O	O
Hopefully	O	O
to	O	O
be	O	O
included	O	O
in	O	O
many	O	O
other	O	O
projects	O	O
.	O	O
For	O	O
logging	O	O
I	O	O
(	O	O
and	O	O
indeed	O	O
the	O	O
people	O	O
I	O	O
work	O	O
with	O	O
)	O	O
have	O	O
always	O	O
used	O	O
JUL	B-api_mention	O
(	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
logging	I-api_mention	I-api_mention
)	O	O
and	O	O
never	O	O
had	O	O
any	O	O
issues	O	O
with	O	O
it	O	O
.	O	O
However	O	O
now	O	O
I	O	O
need	O	O
to	O	O
understand	O	O
in	O	O
more	O	O
detail	O	O
what	O	O
I	O	O
should	O	O
do	O	O
for	O	O
my	O	O
API	O	O
development	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
done	O	O
some	O	O
research	O	O
on	O	O
this	O	O
and	O	O
with	O	O
the	O	O
information	O	O
I	O	O
'	O	O
ve	O	O
got	O	O
I	O	O
just	O	O
get	O	O
more	O	O
confused	O	O
.	O	O
Hence	O	O
this	O	O
post	O	O
.	O	O
Since	O	O
I	O	O
come	O	O
from	O	O
JUL	B-api_mention	O
I	O	O
'	O	O
m	O	O
biased	O	O
on	O	O
that	O	O
.	O	O
My	O	O
knowledge	O	O
of	O	O
the	O	O
rest	O	O
is	O	O
not	O	O
that	O	O
big	O	O
.	O	O
From	O	O
the	O	O
research	O	O
I	O	O
'	O	O
ve	O	O
done	O	O
I	O	O
'	O	O
ve	O	O
come	O	O
up	O	O
with	O	O
these	O	O
reasons	O	O
why	O	O
people	O	O
do	O	O
not	O	O
like	O	O
JUL	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
"	O	O
I	O	O
started	O	O
developing	O	O
in	O	O
Java	O	O
long	O	O
before	O	O
Sun	O	O
released	O	O
JUL	O	B-api_mention
and	O	O
it	O	O
was	O	O
just	O	O
easier	O	O
for	O	O
me	O	O
to	O	O
continue	O	O
with	O	O
logging	O	O
-	O	O
framework	O	O
-	O	O
X	O	O
rather	O	O
than	O	O
to	O	O
learn	O	O
something	O	O
new	O	O
"	O	O
.	O	O
Hmm	O	O
.	O	O
I	O	O
'	O	O
m	O	O
not	O	O
kidding	O	O
,	O	O
this	O	O
is	O	O
actually	O	O
what	O	O
people	O	O
say	O	O
.	O	O
With	O	O
this	O	O
argument	O	O
we	O	O
could	O	O
all	O	O
be	O	O
doing	O	O
COBOL	O	O
.	O	O
(	O	O
however	O	O
I	O	O
can	O	O
certainly	O	O
relate	O	O
to	O	O
this	O	O
being	O	O
a	O	O
lazy	O	O
dude	O	O
myself	O	O
)	O	O
#	O	O
li	O	O
"	O	O
I	O	O
don	O	O
'	O	O
t	O	O
like	O	O
the	O	O
names	O	O
of	O	O
the	O	O
logging	O	O
levels	O	O
in	O	O
JUL	O	O
"	O	O
.	O	O
Ok	O	O
,	O	O
seriously	O	O
,	O	O
this	O	O
is	O	O
just	O	O
not	O	O
enough	O	O
of	O	O
a	O	O
reason	O	O
to	O	O
introduce	O	O
a	O	O
new	O	O
dependency	O	O
.	O	O
#	O	O
li	O	O
"	O	O
I	O	O
don	O	O
'	O	O
t	O	O
like	O	O
the	O	O
standard	O	O
format	O	O
of	O	O
the	O	O
output	O	O
from	O	O
JUL	B-api_mention	O
"	O	O
.	O	O
Hmm	O	O
.	O	O
This	O	O
is	O	O
just	O	O
configuration	O	O
.	O	O
You	O	O
do	O	O
not	O	O
even	O	O
have	O	O
to	O	O
do	O	O
anything	O	O
code	O	O
-	O	O
wise	O	O
.	O	O
(	O	O
true	O	O
,	O	O
back	O	O
in	O	O
old	O	O
days	O	O
you	O	O
may	O	O
have	O	O
had	O	O
to	O	O
create	O	O
your	O	O
own	O	O
Formatter	O	B-api_mention
class	O	O
to	O	O
get	O	O
it	O	O
right	O	O
)	O	O
.	O	O
#	O	O
li	O	O
"	O	O
I	O	O
use	O	O
other	O	O
libraries	O	O
that	O	O
also	O	O
use	O	O
logging	O	O
-	O	O
framework	O	O
-	O	O
X	O	O
so	O	O
I	O	O
thought	O	O
it	O	O
easier	O	O
just	O	O
to	O	O
use	O	O
that	O	O
one	O	O
"	O	O
.	O	O
This	O	O
is	O	O
a	O	O
cyclic	O	O
argument	O	O
,	O	O
isn	O	O
'	O	O
t	O	O
?	O	O
Why	O	O
does	O	O
'	O	O
everybody	O	O
'	O	O
use	O	O
logging	O	O
-	O	O
framework	O	O
-	O	O
X	O	O
and	O	O
not	O	O
JUL	B-api_mention	B-api_mention
?	O	O
#	O	O
li	O	O
"	O	O
Everybody	O	O
else	O	O
is	O	O
using	O	O
logging	O	O
-	O	O
framework	O	O
-	O	O
X	O	O
"	O	O
.	O	O
This	O	O
to	O	O
me	O	O
is	O	O
just	O	O
a	O	O
special	O	O
case	O	O
of	O	O
the	O	O
above	O	O
.	O	O
Majority	O	O
is	O	O
not	O	O
always	O	O
right	O	O
.	O	O
So	O	O
the	O	O
real	O	O
big	O	O
question	O	O
is	O	O
why	O	O
not	O	O
JUL	B-api_mention	B-api_mention
?	O	O
.	O	O
What	O	O
is	O	O
it	O	O
I	O	O
have	O	O
missed	O	O
?	O	O
The	O	O
raison	O	O
d	O	O
'	O	O
ê	O	O
tre	O	O
for	O	O
logging	O	O
facades	O	O
(	O	O
SLF4J	B-api_mention	O
,	O	O
JCL	B-api_mention	O
)	O	O
is	O	O
that	O	O
multiple	O	O
logging	O	O
implementations	O	O
have	O	O
existed	O	O
historically	O	O
and	O	O
the	O	O
reason	O	O
for	O	O
that	O	O
really	O	O
goes	O	O
back	O	O
to	O	O
the	O	O
era	O	O
before	O	O
JUL	B-api_mention	B-api_mention
as	O	O
I	O	O
see	O	O
it	O	O
.	O	O
If	O	O
JUL	B-api_mention	B-api_mention
was	O	O
perfect	O	O
then	O	O
logging	O	O
facades	O	O
wouldn	O	O
'	O	O
t	O	O
exist	O	O
,	O	O
or	O	O
what	O	O
?	O	O
Rather	O	O
than	O	O
embracing	O	O
them	O	O
shouldn	O	O
'	O	O
t	O	O
we	O	O
question	O	O
why	O	O
they	O	O
were	O	O
necessary	O	O
in	O	O
the	O	O
first	O	O
place	O	O
?	O	O
(	O	O
and	O	O
see	O	O
if	O	O
those	O	O
reasons	O	O
still	O	O
exist	O	O
)	O	O
Ok	O	O
,	O	O
my	O	O
research	O	O
so	O	O
far	O	O
has	O	O
led	O	O
to	O	O
a	O	O
couple	O	O
of	O	O
things	O	O
that	O	O
I	O	O
can	O	O
see	O	O
may	O	O
be	O	O
real	O	O
issues	O	O
with	O	O
JUL	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
Performance	O	O
.	O	O
Some	O	O
say	O	O
that	O	O
performance	O	O
in	O	O
SLF4J	B-api_mention	O
is	O	O
superior	O	O
to	O	O
the	O	O
rest	O	O
.	O	O
This	O	O
seems	O	O
to	O	O
me	O	O
to	O	O
be	O	O
a	O	O
case	O	O
of	O	O
premature	O	O
optimization	O	O
.	O	O
If	O	O
you	O	O
need	O	O
to	O	O
log	O	O
hundreds	O	O
of	O	O
megabytes	O	O
per	O	O
second	O	O
then	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
you	O	O
are	O	O
on	O	O
the	O	O
right	O	O
path	O	O
anyway	O	O
.	O	O
JUL	B-api_mention	B-api_mention
has	O	O
also	O	O
evolved	O	O
and	O	O
the	O	O
tests	O	O
you	O	O
did	O	O
on	O	O
Java	O	O
1	O	O
.	O	O
4	O	O
may	O	O
no	O	O
longer	O	O
be	O	O
true	O	O
.	O	O
You	O	O
can	O	O
read	O	O
about	O	O
it	O	O
here	O	O
and	O	O
this	O	O
fix	O	O
has	O	O
made	O	O
it	O	O
into	O	O
Java	O	O
7	O	O
.	O	O
Many	O	O
also	O	O
talk	O	O
about	O	O
the	O	O
overhead	O	O
of	O	O
string	O	O
concatenation	O	O
in	O	O
logging	O	O
methods	O	O
.	O	O
However	O	O
template	O	O
based	O	O
logging	O	O
avoids	O	O
this	O	O
cost	O	O
and	O	O
it	O	O
exist	O	O
also	O	O
in	O	O
JUL	B-api_mention	B-api_mention
.	O	O
Personally	O	O
I	O	O
never	O	O
really	O	O
write	O	O
template	O	O
based	O	O
logging	O	O
.	O	O
Too	O	O
lazy	O	O
for	O	O
that	O	O
.	O	O
For	O	O
example	O	O
if	O	O
I	O	O
do	O	O
this	O	O
with	O	O
JUL	B-api_mention	B-api_mention
:	O	O
log	B-api_mention	O
.	I-api_mention	B-api_mention
finest	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
;	O	O
my	O	O
IDE	O	O
will	O	O
warn	O	O
me	O	O
and	O	O
ask	O	O
permission	O	O
that	O	O
it	O	O
should	O	O
change	O	O
it	O	O
to	O	O
:	O	O
log	B-api_mention	O
.	I-api_mention	B-api_mention
log	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
.	O	O
which	O	O
I	O	O
will	O	O
of	O	O
course	O	O
accept	O	O
.	O	O
Permission	O	O
granted	O	O
!	O	O
Thank	O	O
you	O	O
for	O	O
your	O	O
help	O	O
.	O	O
So	O	O
I	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
write	O	O
such	O	O
statements	O	O
myself	O	O
,	O	O
that	O	O
is	O	O
done	O	O
by	O	O
the	O	O
IDE	O	O
.	O	O
In	O	O
conclusion	O	O
on	O	O
the	O	O
issue	O	O
of	O	O
performance	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
found	O	O
anything	O	O
that	O	O
would	O	O
suggest	O	O
that	O	O
JUL	B-api_mention	O
'	O	O
s	O	O
performance	O	O
is	O	O
not	O	O
ok	O	O
compared	O	O
to	O	O
the	O	O
competition	O	O
.	O	O
#	O	O
li	O	O
Configuration	O	O
from	O	O
classpath	O	O
.	O	O
Out	O	O
-	O	O
of	O	O
-	O	O
the	O	O
-	O	O
box	O	O
JUL	B-api_mention	O
cannot	O	O
load	O	O
a	O	O
configuration	O	O
file	O	O
from	O	O
the	O	O
classpath	O	O
.	O	O
It	O	O
is	O	O
a	O	O
few	O	O
lines	O	O
of	O	O
code	O	O
to	O	O
make	O	O
it	O	O
do	O	O
so	O	O
.	O	O
I	O	O
can	O	O
see	O	O
why	O	O
this	O	O
may	O	O
be	O	O
annoying	O	O
but	O	O
the	O	O
solution	O	O
is	O	O
short	O	O
and	O	O
simple	O	O
.	O	O
#	O	O
li	O	O
Availability	O	O
of	O	O
output	O	O
handlers	O	O
.	O	O
JUL	B-api_mention	O
comes	O	O
with	O	O
5	O	O
output	O	O
handlers	O	O
out	O	O
-	O	O
of	O	O
-	O	O
the	O	O
-	O	O
box	O	O
:	O	O
console	O	O
,	O	O
file	O	O
stream	O	O
,	O	O
socket	O	O
and	O	O
memory	O	O
.	O	O
These	O	O
can	O	O
be	O	O
extended	O	O
or	O	O
new	O	O
ones	O	O
can	O	O
be	O	O
written	O	O
.	O	O
This	O	O
may	O	O
for	O	O
example	O	O
be	O	O
writing	O	O
to	O	O
UNIX	O	O
/	O	O
Linux	O	O
Syslog	O	O
and	O	O
Windows	O	O
Event	O	O
Log	O	O
.	O	O
I	O	O
have	O	O
personally	O	O
never	O	O
had	O	O
this	O	O
requirement	O	O
nor	O	O
have	O	O
I	O	O
seen	O	O
it	O	O
used	O	O
but	O	O
I	O	O
can	O	O
certainly	O	O
relate	O	O
to	O	O
why	O	O
it	O	O
may	O	O
be	O	O
a	O	O
useful	O	O
feature	O	O
.	O	O
Logback	B-api_mention	O
comes	O	O
with	O	O
an	O	O
appender	O	O
for	O	O
Syslog	O	O
for	O	O
example	O	O
.	O	O
Still	O	O
I	O	O
would	O	O
argue	O	O
that	O	O
#	O	O
li	O	O
99	O	O
.	O	O
5	O	O
%	O	O
of	O	O
the	O	O
needs	O	O
for	O	O
output	O	O
destinations	O	O
are	O	O
covered	O	O
by	O	O
what	O	O
is	O	O
in	O	O
JUL	B-api_mention	B-api_mention
out	O	O
-	O	O
of	O	O
-	O	O
the	O	O
-	O	O
box	O	O
.	O	O
#	O	O
li	O	O
Special	O	O
needs	O	O
could	O	O
be	O	O
catered	O	O
for	O	O
by	O	O
custom	O	O
handlers	O	O
on	O	O
top	O	O
of	O	O
JUL	B-api_mention	B-api_mention
rather	O	O
than	O	O
on	O	O
top	O	O
of	O	O
something	O	O
else	O	O
.	O	O
There	O	O
'	O	O
s	O	O
nothing	O	O
to	O	O
me	O	O
that	O	O
suggests	O	O
that	O	O
it	O	O
takes	O	O
more	O	O
time	O	O
to	O	O
write	O	O
a	O	O
Syslog	O	O
output	O	O
handler	O	O
for	O	O
JUL	B-api_mention	B-api_mention
than	O	O
it	O	O
does	O	O
for	O	O
another	O	O
logging	O	O
framework	O	O
.	O	O
I	O	O
'	O	O
m	O	O
really	O	O
concerned	O	O
that	O	O
there	O	O
'	O	O
s	O	O
something	O	O
I	O	O
'	O	O
ve	O	O
overlooked	O	O
.	O	O
The	O	O
use	O	O
of	O	O
logging	O	O
facades	O	O
and	O	O
logging	O	O
implementations	O	O
other	O	O
than	O	O
JUL	B-api_mention	B-api_mention
is	O	O
so	O	O
widespread	O	O
that	O	O
I	O	O
have	O	O
to	O	O
come	O	O
to	O	O
the	O	O
conclusion	O	O
that	O	O
it	O	O
'	O	O
s	O	O
me	O	O
who	O	O
just	O	O
doesn	O	O
'	O	O
t	O	O
understand	O	O
.	O	O
That	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
the	O	O
first	O	O
time	O	O
,	O	O
I	O	O
'	O	O
m	O	O
afraid	O	O
.	O	O
:	O	O
-	O	O
)	O	O
So	O	O
what	O	O
should	O	O
I	O	O
do	O	O
with	O	O
my	O	O
API	O	O
?	O	O
I	O	O
want	O	O
it	O	O
to	O	O
become	O	O
successful	O	O
.	O	O
I	O	O
can	O	O
of	O	O
course	O	O
just	O	O
"	O	O
go	O	O
with	O	O
the	O	O
flow	O	O
"	O	O
and	O	O
implement	O	O
SLF4J	B-api_mention	O
(	O	O
which	O	O
seems	O	O
the	O	O
most	O	O
popular	O	O
these	O	O
days	O	O
)	O	O
but	O	O
for	O	O
my	O	O
own	O	O
sake	O	O
I	O	O
still	O	O
need	O	O
to	O	O
understand	O	O
exactly	O	O
what	O	O
is	O	O
wrong	O	O
with	O	O
the	O	O
JUL	B-api_mention	O
of	O	O
today	O	O
that	O	O
warrants	O	O
all	O	O
the	O	O
fuzz	O	O
?	O	O
Will	O	O
I	O	O
sabotage	O	O
myself	O	O
by	O	O
choosing	O	O
JUL	B-api_mention	B-api_mention
for	O	O
my	O	O
library	O	O
?	O	O
Testing	O	O
performance	O	O
(	O	O
section	O	O
added	O	O
by	O	O
nolan600	O	O
on	O	O
07	O	O
-	O	O
JUL	O	O
-	O	O
2012	O	O
)	O	O
There	O	O
'	O	O
s	O	O
a	O	O
reference	O	O
below	O	O
from	O	O
Ceki	O	O
about	O	O
SLF4J	B-api_mention	O
'	O	O
s	O	O
parametrization	O	O
being	O	O
10	O	O
times	O	O
or	O	O
more	O	O
faster	O	O
than	O	O
JUL	B-api_mention	O
'	O	O
s	O	O
.	O	O
So	O	O
I	O	O
'	O	O
ve	O	O
started	O	O
doing	O	O
some	O	O
simple	O	O
tests	O	O
.	O	O
At	O	O
first	O	O
glance	O	O
the	O	O
claim	O	O
is	O	O
certainly	O	O
correct	O	O
.	O	O
Here	O	O
are	O	O
the	O	O
preliminary	O	O
results	O	O
(	O	O
but	O	O
read	O	O
on	O	O
!	O	O
)	O	O
:	O	O
#	O	O
li	O	O
Execution	O	O
time	O	O
SLF4J	B-api_mention	O
,	O	O
backend	O	O
Logback	O	O
:	O	O
1515	O	O
#	O	O
li	O	O
Execution	O	O
time	O	O
SLF4J	B-api_mention	O
,	O	O
backend	O	O
JUL	B-api_mention	O
:	O	O
12938	O	O
#	O	O
li	O	O
Execution	O	O
time	O	O
JUL	B-api_mention	O
:	O	O
16911	O	O
The	O	O
numbers	O	O
above	O	O
are	O	O
msecs	O	O
so	O	O
less	O	O
is	O	O
better	O	O
.	O	O
So	O	O
10	O	O
times	O	O
performance	O	O
difference	O	O
is	O	O
by	O	O
first	O	O
actually	O	O
pretty	O	O
close	O	O
.	O	O
My	O	O
initial	O	O
reaction	O	O
:	O	O
That	O	O
is	O	O
a	O	O
lot	O	O
!	O	O
Here	O	O
is	O	O
the	O	O
core	O	O
of	O	O
the	O	O
test	O	O
.	O	O
As	O	O
can	O	O
be	O	O
seen	O	O
an	O	O
integer	O	O
and	O	O
a	O	O
string	O	O
is	O	O
construted	O	O
in	O	O
a	O	O
loop	O	O
which	O	O
is	O	O
then	O	O
used	O	O
in	O	O
the	O	O
log	O	O
statement	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
I	O	O
wanted	O	O
the	O	O
log	O	O
statement	O	O
to	O	O
have	O	O
both	O	O
a	O	O
primitive	O	O
data	O	O
type	O	O
(	O	O
in	O	O
this	O	O
case	O	O
an	O	O
int	O	O
)	O	O
and	O	O
a	O	O
more	O	O
complex	O	O
data	O	O
type	O	O
(	O	O
in	O	O
this	O	O
case	O	O
a	O	O
String	B-api_mention	B-api_mention
)	O	O
.	O	O
Not	O	O
sure	O	O
it	O	O
matters	O	O
but	O	O
there	O	O
you	O	O
have	O	O
it	O	O
.	O	O
)	O	O
The	O	O
log	O	O
statement	O	O
for	O	O
SLF4J	B-api_mention	O
:	O	O
logger	B-api_mention	O
.	I-api_mention	B-api_mention
info	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
log	O	O
statement	O	O
for	O	O
JUL	B-api_mention	O
:	O	O
logger	B-api_mention	O
.	I-api_mention	B-api_mention
log	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
JVM	O	O
was	O	O
'	O	O
warmed	O	O
up	O	O
'	O	O
with	O	O
the	O	O
same	O	O
test	O	O
executed	O	O
once	O	O
before	O	O
the	O	O
actual	O	O
measurement	O	O
was	O	O
done	O	O
.	O	O
Java	O	O
1	O	O
.	O	O
7	O	O
.	O	O
03	O	O
was	O	O
used	O	O
on	O	O
Windows	O	O
7	O	O
.	O	O
Latest	O	O
versions	O	O
of	O	O
SLF4J	B-api_mention	O
(	O	O
v1	O	O
.	O	O
6	O	O
.	O	O
6	O	O
)	O	O
and	O	O
Logback	B-api_mention	B-api_mention
(	O	O
v1	O	O
.	O	O
0	O	O
.	O	O
6	O	O
)	O	O
was	O	O
used	O	O
.	O	O
Stdout	O	O
and	O	O
stderr	O	O
was	O	O
redirected	O	O
to	O	O
null	O	O
device	O	O
.	O	O
However	O	O
,	O	O
careful	O	O
now	O	O
,	O	O
it	O	O
turns	O	O
out	O	O
JUL	O	O
is	O	O
spending	O	O
most	O	O
of	O	O
its	O	O
time	O	O
in	O	O
getSourceClassName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
because	O	O
JUL	B-api_mention	B-api_mention
by	O	O
default	O	O
prints	O	O
the	O	O
source	O	O
class	O	O
name	O	O
in	O	O
the	O	O
output	O	O
,	O	O
while	O	O
Logback	B-api_mention	O
doesn	O	O
'	O	O
t	O	O
.	O	O
So	O	O
we	O	O
are	O	O
comparing	O	O
apples	O	O
and	O	O
oranges	O	O
.	O	O
I	O	O
have	O	O
to	O	O
do	O	O
the	O	O
test	O	O
again	O	O
and	O	O
configure	O	O
the	O	O
logging	O	O
implementations	O	O
in	O	O
a	O	O
similar	O	O
manner	O	O
so	O	O
that	O	O
they	O	O
actually	O	O
output	O	O
the	O	O
same	O	O
stuff	O	O
.	O	O
I	O	O
do	O	O
however	O	O
suspect	O	O
that	O	O
SLF4J	B-api_mention	O
+	O	O
Logback	B-api_mention	O
will	O	O
still	O	O
come	O	O
out	O	O
on	O	O
top	O	O
but	O	O
far	O	O
from	O	O
the	O	O
initial	O	O
numbers	O	O
as	O	O
given	O	O
above	O	O
.	O	O
Stay	O	O
tuned	O	O
.	O	O
Btw	O	O
:	O	O
The	O	O
test	O	O
was	O	O
first	O	O
time	O	O
I	O	O
'	O	O
ve	O	O
actually	O	O
worked	O	O
with	O	O
SLF4J	B-api_mention	B-api_mention
or	O	O
Logback	B-api_mention	B-api_mention
.	O	O
A	O	O
pleasant	O	O
experience	O	O
.	O	O
JUL	B-api_mention	O
is	O	O
certainly	O	O
a	O	O
lot	O	O
less	O	O
welcoming	O	O
when	O	O
you	O	O
are	O	O
starting	O	O
out	O	O
.	O	O
Testing	O	O
performance	O	O
(	O	O
part	O	O
2	O	O
)	O	O
(	O	O
section	O	O
added	O	O
by	O	O
nolan600	O	O
on	O	O
08	O	O
-	O	O
JUL	O	O
-	O	O
2012	O	O
)	O	O
As	O	O
it	O	O
turns	O	O
out	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
really	O	O
matter	O	O
for	O	O
performance	O	O
how	O	O
you	O	O
configure	O	O
your	O	O
pattern	O	O
in	O	O
JUL	B-api_mention	B-api_mention
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
whether	O	O
or	O	O
not	O	O
it	O	O
includes	O	O
the	O	O
source	O	O
name	O	O
or	O	O
not	O	O
.	O	O
I	O	O
tried	O	O
with	O	O
a	O	O
very	O	O
simple	O	O
pattern	O	O
:	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
logging	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
SimpleFormatter	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
format	I-api_mention	I-api_mention
=	O	O
StringLiteral	O	O
and	O	O
that	O	O
did	O	O
not	O	O
change	O	O
the	O	O
above	O	O
timings	O	O
at	O	O
all	O	O
.	O	O
My	O	O
profiler	O	O
revealed	O	O
that	O	O
the	O	O
logger	O	O
still	O	O
spent	O	O
a	O	O
lot	O	O
of	O	O
time	O	O
in	O	O
calls	O	O
to	O	O
getSourceClassName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
even	O	O
if	O	O
this	O	O
was	O	O
not	O	O
part	O	O
of	O	O
my	O	O
pattern	O	O
.	O	O
The	O	O
pattern	O	O
doesn	O	O
'	O	O
t	O	O
matter	O	O
.	O	O
I	O	O
'	O	O
m	O	O
therefore	O	O
concluding	O	O
on	O	O
the	O	O
issue	O	O
of	O	O
performance	O	O
that	O	O
at	O	O
least	O	O
for	O	O
the	O	O
tested	O	O
template	O	O
based	O	O
log	O	O
statement	O	O
there	O	O
seems	O	O
to	O	O
be	O	O
roughly	O	O
a	O	O
factor	O	O
of	O	O
10	O	O
in	O	O
real	O	O
performance	O	O
difference	O	O
between	O	O
JUL	B-api_mention	B-api_mention
(	O	I-api_mention
slow	O	I-api_mention
)	O	I-api_mention
and	O	O
SLF4J	B-api_mention	O
+	O	O
Logback	B-api_mention	O
(	O	O
quick	O	O
)	O	O
.	O	O
Just	O	O
like	O	O
Ceki	O	O
said	O	O
.	O	O
I	O	O
can	O	O
also	O	O
see	O	O
another	O	O
thing	O	O
namely	O	O
that	O	O
SLF4J	B-api_mention	O
'	O	O
s	O	O
getLogger	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
is	O	O
a	O	O
lot	O	O
more	O	O
expensive	O	O
than	O	O
JUL	B-api_mention	O
'	O	O
s	O	O
ditto	O	O
.	O	O
(	O	O
95	O	O
ms	O	O
vs	O	O
0	O	O
.	O	O
3	O	O
ms	O	O
if	O	O
my	O	O
profiler	O	O
is	O	O
accurate	O	O
)	O	O
.	O	O
This	O	O
makes	O	O
sense	O	O
.	O	O
SLF4J	B-api_mention	O
has	O	O
to	O	O
do	O	O
some	O	O
time	O	O
on	O	O
the	O	O
binding	O	O
of	O	O
the	O	O
underlying	O	O
logging	O	O
implementation	O	O
.	O	O
This	O	O
doesn	O	O
'	O	O
t	O	O
scare	O	O
me	O	O
.	O	O
These	O	O
calls	O	O
should	O	O
be	O	O
somewhat	O	O
rare	O	O
in	O	O
the	O	O
lifetime	O	O
of	O	O
an	O	O
application	O	O
.	O	O
The	O	O
fastness	O	O
should	O	O
be	O	O
in	O	O
the	O	O
actual	O	O
log	O	O
calls	O	O
.	O	O
Final	O	O
conclusion	O	O
(	O	O
section	O	O
added	O	O
by	O	O
nolan600	O	O
on	O	O
08	O	O
-	O	O
JUL	O	O
-	O	O
2012	O	O
)	O	O
Thank	O	O
you	O	O
for	O	O
all	O	O
your	O	O
answers	O	O
.	O	O
Contrary	O	O
to	O	O
what	O	O
I	O	O
initially	O	O
thought	O	O
I	O	O
'	O	O
ve	O	O
ended	O	O
up	O	O
deciding	O	O
to	O	O
use	O	O
SLF4J	B-api_mention	O
for	O	O
my	O	O
API	O	O
.	O	O
This	O	O
is	O	O
based	O	O
on	O	O
a	O	O
number	O	O
of	O	O
things	O	O
and	O	O
your	O	O
input	O	O
:	O	O
#	O	O
li	O	O
It	O	O
gives	O	O
flexibility	O	O
to	O	O
choose	O	O
log	O	O
implementation	O	O
at	O	O
deployment	O	O
time	O	O
.	O	O
#	O	O
li	O	O
Issues	O	O
with	O	O
lack	O	O
of	O	O
flexibility	O	O
of	O	O
JUL	B-api_mention	O
'	O	O
s	O	O
configuration	O	O
when	O	O
run	O	O
inside	O	O
an	O	O
application	O	O
server	O	O
.	O	O
#	O	O
li	O	O
SLF4J	B-api_mention	O
is	O	O
certainly	O	O
a	O	O
lot	O	O
faster	O	O
as	O	O
detailed	O	O
above	O	O
in	O	O
particular	O	O
if	O	O
you	O	O
couple	O	O
it	O	O
with	O	O
Logback	B-api_mention	B-api_mention
.	O	O
Even	O	O
if	O	O
this	O	O
was	O	O
just	O	O
a	O	O
rough	O	O
test	O	O
I	O	O
have	O	O
reason	O	O
to	O	O
believe	O	O
that	O	O
a	O	O
lot	O	O
more	O	O
effort	O	O
has	O	O
gone	O	O
into	O	O
optimization	O	O
on	O	O
SLF4J	B-api_mention	O
+	O	O
Logback	B-api_mention	O
than	O	O
on	O	O
JUL	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
Documentation	O	O
.	O	O
The	O	O
documentation	O	O
for	O	O
SLF4J	B-api_mention	O
is	O	O
simply	O	O
a	O	O
lot	O	O
more	O	O
comprehensive	O	O
and	O	O
precise	O	O
.	O	O
#	O	O
li	O	O
Pattern	O	B-api_mention
flexibility	O	O
.	O	O
As	O	O
I	O	O
did	O	O
the	O	O
tests	O	O
I	O	O
set	O	O
out	O	O
to	O	O
have	O	O
JUL	B-api_mention	O
mimic	O	O
the	O	O
default	O	O
pattern	O	O
from	O	O
Logback	B-api_mention	B-api_mention
.	O	O
This	O	O
pattern	O	O
includes	O	O
the	O	O
name	O	O
of	O	O
the	O	O
thread	O	O
.	O	O
It	O	O
turns	O	O
out	O	O
JUL	B-api_mention	O
cannot	O	O
do	O	O
this	O	O
out	O	O
of	O	O
the	O	O
box	O	O
.	O	O
Ok	O	O
,	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
missed	O	O
it	O	O
until	O	O
now	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
it	O	O
is	O	O
a	O	O
thing	O	O
that	O	O
should	O	O
be	O	O
missing	O	O
from	O	O
a	O	O
log	O	O
framework	O	O
.	O	O
Period	O	O
!	O	O
#	O	O
li	O	O
Most	O	O
(	O	O
or	O	O
many	O	O
)	O	O
Java	O	O
projects	O	O
today	O	O
use	O	O
Maven	O	O
so	O	O
adding	O	O
a	O	O
dependency	O	O
is	O	O
not	O	O
that	O	O
big	O	O
a	O	O
thing	O	O
especially	O	O
if	O	O
that	O	O
dependency	O	O
is	O	O
rather	O	O
stable	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
doesn	O	O
'	O	O
t	O	O
constantly	O	O
change	O	O
its	O	O
API	O	O
.	O	O
This	O	O
seems	O	O
to	O	O
be	O	O
true	O	O
for	O	O
SLF4J	B-api_mention	O
.	O	O
Also	O	O
the	O	O
SLF4J	B-api_mention	O
jar	O	O
and	O	O
friends	O	O
are	O	O
small	O	O
in	O	O
size	O	O
.	O	O
So	O	O
the	O	O
strange	O	O
thing	O	O
that	O	O
happened	O	O
was	O	O
that	O	O
I	O	O
actually	O	O
got	O	O
quite	O	O
upset	O	O
with	O	O
JUL	B-api_mention	O
after	O	O
having	O	O
worked	O	O
a	O	O
bit	O	O
with	O	O
SLF4J	B-api_mention	O
.	O	O
I	O	O
still	O	O
regret	O	O
that	O	O
it	O	O
has	O	O
to	O	O
be	O	O
this	O	O
way	O	O
with	O	O
JUL	B-api_mention	B-api_mention
.	O	I-api_mention
JUL	B-api_mention	I-api_mention
is	O	O
far	O	O
from	O	O
perfect	O	O
but	O	O
kind	O	O
of	O	O
does	O	O
the	O	O
job	O	O
.	O	O
Just	O	O
not	O	O
quite	O	O
well	O	O
enough	O	O
.	O	O
The	O	O
same	O	O
can	O	O
be	O	O
said	O	O
about	O	O
Properties	O	O
as	O	O
an	O	O
example	O	O
but	O	O
we	O	O
do	O	O
not	O	O
think	O	O
about	O	O
abstracting	O	O
that	O	O
so	O	O
people	O	O
can	O	O
plug	O	O
in	O	O
their	O	O
own	O	O
configuration	O	O
library	O	O
and	O	O
what	O	O
have	O	O
you	O	O
.	O	O
I	O	O
think	O	O
the	O	O
reason	O	O
is	O	O
that	O	O
Properties	O	B-api_mention
comes	O	O
in	O	O
just	O	O
above	O	O
the	O	O
bar	O	O
while	O	O
the	O	O
opposite	O	O
is	O	O
true	O	O
for	O	O
JUL	B-api_mention	O
of	O	O
today	O	O
.	O	O
.	O	O
.	O	O
and	O	O
in	O	O
the	O	O
past	O	O
it	O	O
came	O	O
in	O	O
at	O	O
zero	O	O
because	O	O
it	O	O
didn	O	O
'	O	O
t	O	O
exist	O	O
.	O	O
Question	O	O
-	O	O
5374311	O	O
,	O	O
answer	O	O
-	O	O
17909839	O	O
The	O	O
correct	O	O
way	O	O
to	O	O
do	O	O
this	O	O
is	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stock	O	O
_	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
add	O	O
to	O	O
the	O	O
other	O	O
great	O	O
answers	O	O
here	O	O
and	O	O
explain	O	O
how	O	O
you	O	O
could	O	O
have	O	O
used	O	O
the	O	O
Javadocs	O	O
to	O	O
answer	O	O
your	O	O
question	O	O
.	O	O
The	O	O
Javadoc	O	O
for	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
no	O	O
arguments	O	O
)	O	O
is	O	O
here	O	O
.	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
this	O	O
method	O	O
returns	O	O
an	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
and	O	O
not	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
which	O	O
is	O	O
an	O	O
array	O	O
of	O	O
the	O	O
runtime	O	O
type	O	O
of	O	O
your	O	O
list	O	O
:	O	O
#	O	O
blockquote	O	O
Right	O	O
below	O	O
that	O	O
method	O	O
,	O	O
though	O	O
,	O	O
is	O	O
the	O	O
Javadoc	O	O
for	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
this	O	O
method	O	O
returns	O	O
a	O	O
T	O	O
[	O	O
]	O	O
where	O	O
T	O	O
is	O	O
the	O	O
type	O	O
of	O	O
the	O	O
array	O	O
you	O	O
pass	O	O
in	O	O
.	O	O
At	O	O
first	O	O
this	O	O
seems	O	O
like	O	O
what	O	O
you	O	O
'	O	O
re	O	O
looking	O	O
for	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
unclear	O	O
exactly	O	O
why	O	O
you	O	O
'	O	O
re	O	O
passing	O	O
in	O	O
an	O	O
array	O	O
(	O	O
are	O	O
you	O	O
adding	O	O
to	O	O
it	O	O
,	O	O
using	O	O
it	O	O
for	O	O
just	O	O
the	O	O
type	O	O
,	O	O
etc	O	O
)	O	O
.	O	O
The	O	O
documentation	O	O
makes	O	O
it	O	O
clear	O	O
that	O	O
the	O	O
purpose	O	O
of	O	O
the	O	O
passed	O	O
array	O	O
is	O	O
essentially	O	O
to	O	O
define	O	O
the	O	O
type	O	O
of	O	O
array	O	O
to	O	O
return	O	O
(	O	O
which	O	O
is	O	O
exactly	O	O
your	O	O
use	O	O
case	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Of	O	O
course	O	O
,	O	O
an	O	O
understanding	O	O
of	O	O
generics	O	O
(	O	O
as	O	O
described	O	O
in	O	O
the	O	O
other	O	O
answers	O	O
)	O	O
is	O	O
required	O	O
to	O	O
really	O	O
understand	O	O
the	O	O
difference	O	O
between	O	O
these	O	O
two	O	O
methods	O	O
.	O	O
Nevertheless	O	O
,	O	O
if	O	O
you	O	O
first	O	O
go	O	O
to	O	O
the	O	O
Javadocs	O	O
,	O	O
you	O	O
will	O	O
usually	O	O
find	O	O
your	O	O
answer	O	O
and	O	O
then	O	O
see	O	O
for	O	O
yourself	O	O
what	O	O
else	O	O
you	O	O
need	O	O
to	O	O
learn	O	O
(	O	O
if	O	O
you	O	O
really	O	O
do	O	O
)	O	O
.	O	O
Also	O	O
note	O	O
that	O	O
reading	O	O
the	O	O
Javadocs	O	O
here	O	O
helps	O	O
you	O	O
to	O	O
understand	O	O
what	O	O
the	O	O
structure	O	O
of	O	O
the	O	O
array	O	O
you	O	O
pass	O	O
in	O	O
should	O	O
be	O	O
.	O	O
Though	O	O
it	O	O
may	O	O
not	O	O
really	O	O
practically	O	O
matter	O	O
,	O	O
you	O	O
should	O	O
not	O	O
pass	O	O
in	O	O
an	O	O
empty	O	O
array	O	O
like	O	O
this	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Because	O	O
,	O	O
from	O	O
the	O	O
doc	O	O
,	O	O
this	O	O
implementation	O	O
checks	O	O
if	O	O
the	O	O
array	O	O
is	O	O
large	O	O
enough	O	O
to	O	O
contain	O	O
the	O	O
collection	O	O
;	O	O
if	O	O
not	O	O
,	O	O
it	O	O
allocates	O	O
a	O	O
new	O	O
array	O	O
of	O	O
the	O	O
correct	O	O
size	O	O
and	O	O
type	O	O
(	O	O
using	O	O
reflection	O	O
)	O	O
.	O	O
There	O	O
'	O	O
s	O	O
no	O	O
need	O	O
for	O	O
the	O	O
extra	O	O
overhead	O	O
in	O	O
creating	O	O
a	O	O
new	O	O
array	O	O
when	O	O
you	O	O
could	O	O
easily	O	O
pass	O	O
in	O	O
the	O	O
size	O	O
.	O	O
As	O	O
is	O	O
usually	O	O
the	O	O
case	O	O
,	O	O
the	O	O
Javadocs	O	O
provide	O	O
you	O	O
with	O	O
a	O	O
wealth	O	O
of	O	O
information	O	O
and	O	O
direction	O	O
.	O	O
Hey	O	O
wait	O	O
a	O	O
minute	O	O
,	O	O
what	O	O
'	O	O
s	O	O
reflection	O	O
?	O	O
Question	O	O
-	O	O
30888581	O	O
,	O	O
answer	O	O
-	O	O
30897102	O	O
Once	O	O
given	O	O
more	O	O
thought	O	O
In	O	O
hindsight	O	O
it	O	O
sounds	O	O
like	O	O
they	O	O
were	O	O
looking	O	O
for	O	O
the	O	O
execute	O	O
around	O	O
pattern	O	O
.	O	O
They	O	O
'	O	O
re	O	O
usually	O	O
used	O	O
to	O	O
do	O	O
things	O	O
like	O	O
enforce	O	O
closing	O	O
of	O	O
streams	O	O
.	O	O
This	O	O
is	O	O
also	O	O
more	O	O
relevant	O	O
due	O	O
to	O	O
this	O	O
line	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
idea	O	O
is	O	O
you	O	O
give	O	O
the	O	O
thing	O	O
that	O	O
does	O	O
the	O	O
"	O	O
executing	O	O
around	O	O
"	O	O
some	O	O
class	O	O
to	O	O
do	O	O
somethings	O	O
with	O	O
.	O	O
You	O	O
'	O	O
ll	O	O
probably	O	O
use	O	O
Runnable	B-api_mention	B-api_mention
but	O	O
it	O	O
'	O	O
s	O	O
not	O	O
necessary	O	O
.	O	O
(	O	O
Runnable	B-api_mention	B-api_mention
makes	O	O
the	O	O
most	O	O
sense	O	O
and	O	O
you	O	O
'	O	O
ll	O	O
see	O	O
why	O	O
soon	O	O
.	O	O
)	O	O
In	O	O
your	O	O
StopWatch	B-api_mention	O
class	O	O
add	O	O
some	O	O
method	O	O
like	O	O
this	O	O
#	O	O
pre	O	O
You	O	O
would	O	O
then	O	O
call	O	O
it	O	O
like	O	O
this	O	O
#	O	O
pre	O	O
This	O	O
makes	O	O
it	O	O
fool	O	O
proof	O	O
.	O	O
You	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
worry	O	O
about	O	O
handling	O	O
stop	O	O
before	O	O
start	O	O
or	O	O
people	O	O
forgetting	O	O
to	O	O
call	O	O
one	O	O
and	O	O
not	O	O
the	O	O
other	O	O
,	O	O
etc	O	O
.	O	O
The	O	O
reason	O	O
Runnable	B-api_mention	B-api_mention
is	O	O
nice	O	O
is	O	O
because	O	O
#	O	O
li	O	O
Standard	O	O
java	O	O
class	O	O
,	O	O
not	O	O
your	O	O
own	O	O
or	O	O
third	O	O
party	O	O
#	O	O
li	O	O
End	O	O
users	O	O
can	O	O
put	O	O
whatever	O	O
they	O	O
need	O	O
in	O	O
the	O	O
Runnable	B-api_mention	B-api_mention
to	O	O
be	O	O
done	O	O
.	O	O
(	O	O
If	O	O
you	O	O
were	O	O
using	O	O
it	O	O
to	O	O
enforce	O	O
stream	O	O
closing	O	O
then	O	O
you	O	O
could	O	O
put	O	O
the	O	O
actions	O	O
that	O	O
need	O	O
to	O	O
be	O	O
done	O	O
with	O	O
a	O	O
database	O	O
connection	O	O
inside	O	O
so	O	O
the	O	O
end	O	O
user	O	O
doesn	O	O
'	O	O
t	O	O
need	O	O
to	O	O
worry	O	O
about	O	O
how	O	O
to	O	O
open	O	O
and	O	O
close	O	O
it	O	O
and	O	O
you	O	O
simultaneously	O	O
force	O	O
them	O	O
to	O	O
close	O	O
it	O	O
properly	O	O
.	O	O
)	O	O
If	O	O
you	O	O
wanted	O	O
,	O	O
you	O	O
could	O	O
make	O	O
some	O	O
StopWatchWrapper	B-api_mention	B-api_mention
instead	O	O
leave	O	O
StopWatch	B-api_mention	O
unmodified	O	O
.	O	O
You	O	O
could	O	O
also	O	O
make	O	O
measureAction	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
not	O	O
return	O	O
a	O	O
time	O	O
and	O	O
make	O	O
getTime	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
public	O	O
instead	O	O
.	O	O
The	O	O
Java	O	O
8	O	O
way	O	O
to	O	O
calling	O	O
it	O	O
is	O	O
even	O	O
simpler	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
Original	O	O
answer	O	O
#	O	O
blockquote	O	O
To	O	O
me	O	O
something	O	O
like	O	O
this	O	O
seems	O	O
to	O	O
be	O	O
good	O	O
.	O	O
#	O	O
pre	O	O
The	O	O
reason	O	O
I	O	O
believe	O	O
this	O	O
to	O	O
be	O	O
good	O	O
is	O	O
the	O	O
recording	O	O
is	O	O
during	O	O
object	O	O
creation	O	O
so	O	O
it	O	O
can	O	O
'	O	O
t	O	O
be	O	O
forgotten	O	O
or	O	O
done	O	O
out	O	O
of	O	O
order	O	O
(	O	O
can	O	O
'	O	O
t	O	O
call	O	O
stop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
if	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
)	O	O
.	O	O
One	O	O
flaw	O	O
is	O	O
probably	O	O
the	O	O
naming	O	O
of	O	O
stop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
At	O	O
first	O	O
I	O	O
thought	O	O
maybe	O	O
lap	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
but	O	O
that	O	O
usually	O	O
implies	O	O
a	O	O
restarting	O	O
or	O	O
some	O	O
sort	O	O
(	O	O
or	O	O
at	O	O
least	O	O
recording	O	O
since	O	O
last	O	O
lap	O	O
/	O	O
start	O	O
)	O	O
.	O	O
Perhaps	O	O
read	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
would	O	O
be	O	O
better	O	O
?	O	O
This	O	O
mimics	O	O
the	O	O
action	O	O
of	O	O
looking	O	O
at	O	O
the	O	O
time	O	O
on	O	O
a	O	O
stop	O	O
watch	O	O
.	O	O
I	O	O
chose	O	O
stop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
keep	O	O
it	O	O
similar	O	O
to	O	O
the	O	O
original	O	O
class	O	O
.	O	O
The	O	O
only	O	O
thing	O	O
I	O	O
'	O	O
m	O	O
not	O	O
100	O	O
%	O	O
sure	O	O
about	O	O
is	O	O
how	O	O
to	O	O
get	O	O
the	O	O
time	O	O
.	O	O
To	O	O
be	O	O
honest	O	O
that	O	O
seems	O	O
to	O	O
be	O	O
a	O	O
more	O	O
minor	O	O
detail	O	O
.	O	O
As	O	O
long	O	O
as	O	O
both	O	O
.	O	O
.	O	O
.	O	O
in	O	O
the	O	O
above	O	O
code	O	O
obtain	O	O
current	O	O
time	O	O
the	O	O
same	O	O
way	O	O
it	O	O
should	O	O
be	O	O
fine	O	O
.	O	O
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
34295445	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
We	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
extract	O	O
request	O	O
parameters	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
data	O	O
sent	O	O
by	O	O
posting	O	O
a	O	O
html	O	O
form	O	O
)	O	O
.	O	O
The	O	O
request	O	B-api_mention
.	B-api_mention	I-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
always	O	O
returns	O	O
String	B-api_mention	B-api_mention
value	O	O
and	O	O
the	O	O
data	O	O
come	O	O
from	O	O
client	O	O
.	O	B-api_mention
request	O	I-api_mention
.	B-api_mention	I-api_mention
getAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
We	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
getAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
an	O	O
object	O	O
added	O	O
to	O	O
the	O	O
request	O	O
scope	O	O
on	O	O
the	O	O
server	O	O
side	O	O
i	O	O
.	O	O
e	O	O
.	O	O
using	O	O
request	O	O
.	B-api_mention	B-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
You	O	O
can	O	O
add	O	O
any	O	O
type	O	O
of	O	O
object	O	O
you	O	O
like	O	O
here	O	O
,	O	O
Strings	O	B-api_mention
,	O	O
Custom	O	O
objects	O	O
,	O	O
in	O	O
fact	O	O
any	O	O
object	O	O
.	O	O
You	O	O
add	O	O
the	O	O
attribute	O	O
to	O	O
the	O	O
request	O	O
and	O	O
forward	O	O
the	O	O
request	O	O
to	O	O
another	O	O
resource	O	O
,	O	O
the	O	O
client	O	O
does	O	O
not	O	O
know	O	O
about	O	O
this	O	O
.	O	O
So	O	O
all	O	O
the	O	O
code	O	O
handling	O	O
this	O	O
would	O	O
typically	O	O
be	O	O
in	O	O
JSP	O	O
/	O	O
servlets	O	O
.	O	O
You	O	O
can	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
add	O	O
extra	O	O
-	O	O
information	O	O
and	O	O
forward	O	O
/	O	O
redirect	O	O
the	O	O
current	O	O
request	O	O
to	O	O
another	O	O
resource	O	O
.	O	O
For	O	O
example	O	O
,	O	O
consider	O	O
about	O	O
first	O	O
.	O	O
jsp	O	O
,	O	O
#	O	O
pre	O	O
and	O	O
second	O	O
.	O	O
jsp	O	O
:	O	O
#	O	O
pre	O	O
From	O	O
your	O	O
browser	O	O
,	O	O
run	O	O
first	O	O
.	O	O
jsp	O	O
?	O	O
CLIENT	O	O
=	O	O
you	O	O
and	O	O
the	O	O
output	O	O
on	O	O
your	O	O
browser	O	O
is	O	O
#	O	O
pre	O	O
The	O	O
basic	O	O
difference	O	O
between	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getParameter	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
that	O	O
the	O	O
first	O	O
method	O	O
extracts	O	O
a	O	O
(	O	O
serialized	O	O
)	O	O
Java	O	O
object	O	O
and	O	O
the	O	O
other	O	O
provides	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
.	O	O
For	O	O
both	O	O
cases	O	O
a	O	O
name	O	O
is	O	O
given	O	O
so	O	O
that	O	O
its	O	O
value	O	O
(	O	O
be	O	O
it	O	O
string	O	O
or	O	O
a	O	O
java	O	O
bean	O	O
)	O	O
can	O	O
be	O	O
looked	O	O
up	O	O
and	O	O
extracted	O	O
.	O	O
Question	O	O
-	O	O
26684562	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
what	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
and	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
methods	O	O
?	O	O
Question	O	O
-	O	O
28770822	O	O
I	O	O
understand	O	O
the	O	O
use	O	O
of	O	O
the	O	O
@	O	O
Native	O	O
annotation	O	O
.	O	O
#	O	O
blockquote	O	O
However	O	O
,	O	O
while	O	O
reading	O	O
the	O	O
java	O	O
source	O	O
code	O	O
I	O	O
noticed	O	O
that	O	O
in	O	O
the	O	O
class	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
the	O	O
SIZE	O	O
constant	O	O
is	O	O
@	O	O
Native	O	O
while	O	O
it	O	O
is	O	O
not	O	O
for	O	O
the	O	O
Float	B-api_mention	B-api_mention
,	O	O
Byte	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
,	O	O
Short	B-api_mention	B-api_mention
and	O	O
Character	B-api_mention	B-api_mention
.	O	O
Note	O	O
that	O	O
the	O	O
SIZE	O	O
constant	O	O
represents	O	O
the	O	O
number	O	O
of	O	O
bits	O	O
used	O	O
to	O	O
represent	O	O
the	O	O
actual	O	O
value	O	O
.	O	O
#	O	O
pre	O	O
Edit	O	O
:	O	O
I	O	O
just	O	O
noticed	O	O
that	O	O
this	O	O
also	O	O
applies	O	O
for	O	O
MAX	O	B-api_mention
_	O	I-api_mention
VALUE	O	I-api_mention
and	O	O
MIN	O	B-api_mention
_	O	I-api_mention
VALUE	O	I-api_mention
of	O	O
the	O	O
same	O	O
classes	O	O
.	O	O
Edit	O	O
2	O	O
:	O	O
I	O	O
had	O	O
spare	O	O
time	O	O
to	O	O
do	O	O
some	O	O
research	O	O
on	O	O
this	O	O
,	O	O
and	O	O
looking	O	O
at	O	O
the	O	O
header	O	O
files	O	O
of	O	O
the	O	O
Long	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
etc	O	O
.	O	O
classes	O	O
I	O	O
had	O	O
hope	O	O
to	O	O
figure	O	O
out	O	O
that	O	O
the	O	O
constants	O	O
were	O	O
not	O	O
present	O	O
in	O	O
the	O	O
other	O	O
headers	O	O
,	O	O
but	O	O
unfortunately	O	O
they	O	O
are	O	O
.	O	O
#	O	O
pre	O	O
Why	O	O
is	O	O
the	O	O
SIZE	O	O
constant	O	O
only	O	O
@	O	O
Native	O	O
for	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
?	O	O
Question	O	O
-	O	O
22382453	O	O
,	O	O
answer	O	O
-	O	O
22384113	O	O
Made	O	O
up	O	O
example	O	O
Imagine	O	O
that	O	O
you	O	O
want	O	O
to	O	O
create	O	O
the	O	O
following	O	O
sequence	O	O
:	O	O
1	O	O
,	O	O
2	O	O
,	O	O
2	O	O
,	O	O
3	O	O
,	O	O
3	O	O
,	O	O
3	O	O
,	O	O
4	O	O
,	O	O
4	O	O
,	O	O
4	O	O
,	O	O
4	O	O
etc	O	O
.	O	O
(	O	O
in	O	O
other	O	O
words	O	O
:	O	O
1x1	O	O
,	O	O
2x2	O	O
,	O	O
3x3	O	O
etc	O	O
.	O	O
)	O	O
With	O	O
flatMap	B-api_mention	O
it	O	O
could	O	O
look	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
where	O	O
:	O	O
#	O	O
li	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
rangeClosed	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
a	O	O
stream	O	O
of	O	O
int	O	O
from	O	O
1	O	O
to	O	O
4	O	O
,	O	O
inclusive	O	O
#	O	O
li	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
iterate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
a	O	O
stream	O	O
of	O	O
length	O	O
i	O	O
of	O	O
int	O	O
i	O	O
-	O	O
so	O	O
applied	O	O
to	O	O
i	O	O
=	O	O
4	O	O
it	O	O
creates	O	O
a	O	O
stream	O	O
:	O	O
4	O	O
,	O	O
4	O	O
,	O	O
4	O	O
,	O	O
4	O	O
#	O	O
li	O	O
flatMap	B-api_mention	O
"	O	O
flattens	O	O
"	O	O
the	O	O
stream	O	O
and	O	O
"	O	O
concatenates	O	O
"	O	O
it	O	O
to	O	O
the	O	O
original	O	O
stream	O	O
With	O	O
Java	O	O
<	O	O
8	O	O
you	O	O
would	O	O
need	O	O
two	O	O
nested	O	O
loops	O	O
:	O	O
#	O	O
pre	O	O
Real	O	O
world	O	O
example	O	O
Let	O	O
'	O	O
s	O	O
say	O	O
I	O	O
have	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
where	O	O
each	O	O
TimeSeries	B-api_mention	B-api_mention
is	O	O
essentially	O	O
a	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
I	O	O
want	O	O
to	O	O
get	O	O
a	O	O
list	O	O
of	O	O
all	O	O
dates	O	O
for	O	O
which	O	O
at	O	O
least	O	O
one	O	O
of	O	O
the	O	O
time	O	O
series	O	O
has	O	O
a	O	O
value	O	O
.	O	B-api_mention
flatMap	B-api_mention	I-api_mention
to	O	O
the	O	O
rescue	O	O
:	O	O
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
/	O	O
for	O	O
each	O	O
TS	O	O
,	O	O
stream	O	O
dates	O	O
and	O	O
flatmap	O	O
.	B-api_mention	B-api_mention
distinct	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
/	O	O
remove	O	O
duplicates	O	O
.	B-api_mention	B-api_mention
sorted	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
/	O	O
sort	O	O
ascending	O	O
.	B-api_mention	B-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Not	O	O
only	O	O
is	O	O
it	O	O
readable	O	O
,	O	O
but	O	O
if	O	O
you	O	O
suddenly	O	O
need	O	O
to	O	O
process	O	O
100k	O	O
elements	O	O
,	O	O
simply	O	O
adding	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
improve	O	O
performance	O	O
without	O	O
you	O	O
writing	O	O
any	O	O
concurrent	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
31993377	O	O
Question	O	O
How	O	O
is	O	O
it	O	O
that	O	O
for	O	O
a	O	O
scanner	O	O
object	O	O
the	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
true	O	O
while	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
false	O	O
?	O	O
Note	O	O
:	O	O
Based	O	O
on	O	O
the	O	O
input	O	O
file	O	O
,	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
returning	O	O
the	O	O
result	O	O
as	O	O
expected	O	O
;	O	O
the	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
seem	O	O
to	O	O
be	O	O
returning	O	O
the	O	O
correct	O	O
result	O	O
.	O	O
Code	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
code	O	O
I	O	O
'	O	O
m	O	O
running	O	O
that	O	O
'	O	O
s	O	O
creating	O	O
the	O	O
results	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
Input	O	O
File	O	O
The	O	O
following	O	O
is	O	O
the	O	O
actual	O	O
content	O	O
of	O	O
the	O	O
file	O	O
that	O	O
I	O	O
'	O	O
m	O	O
passing	O	O
to	O	O
this	O	O
scanner	O	O
:	O	O
#	O	O
pre	O	O
Result	O	O
The	O	O
following	O	O
is	O	O
the	O	O
end	O	O
of	O	O
what	O	O
'	O	O
s	O	O
printed	O	O
in	O	O
the	O	O
console	O	O
when	O	O
I	O	O
run	O	O
my	O	O
code	O	O
,	O	O
and	O	O
includes	O	O
the	O	O
portion	O	O
I	O	O
can	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
of	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
20959594	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
,	O	O
but	O	O
through	O	O
reflection	O	O
you	O	O
'	O	O
re	O	O
allowed	O	O
to	O	O
change	O	O
the	O	O
String	B-api_mention	B-api_mention
class	O	O
.	O	O
You	O	O
'	O	O
ve	O	O
just	O	O
redefined	O	O
the	O	O
String	B-api_mention	B-api_mention
class	O	O
as	O	O
mutable	O	O
in	O	O
real	O	O
-	O	O
time	O	O
.	O	O
You	O	O
could	O	O
redefine	O	O
methods	O	O
to	O	O
be	O	O
public	O	O
or	O	O
private	O	O
or	O	O
static	O	O
if	O	O
you	O	O
wanted	O	O
.	O	O
Question	O	O
-	O	O
6470651	O	O
,	O	O
answer	O	O
-	O	O
6780439	O	O
Here	O	O
'	O	O
s	O	O
a	O	O
simple	O	O
/	O	O
sinister	O	O
one	O	O
via	O	O
#	O	O
a	O	O
.	O	O
#	O	O
pre	O	O
Because	O	O
the	O	O
substring	O	O
refers	O	O
to	O	O
the	O	O
internal	O	O
representation	O	O
of	O	O
the	O	O
original	O	O
,	O	O
much	O	O
longer	O	O
string	O	O
,	O	O
the	O	O
original	O	O
stays	O	O
in	O	O
memory	O	O
.	O	O
Thus	O	O
,	O	O
as	O	O
long	O	O
as	O	O
you	O	O
have	O	O
a	O	O
StringLeaker	B-api_mention	B-api_mention
in	O	O
play	O	O
,	O	O
you	O	O
have	O	O
the	O	O
whole	O	O
original	O	O
string	O	O
in	O	O
memory	O	O
,	O	O
too	O	O
,	O	O
even	O	O
though	O	O
you	O	O
might	O	O
think	O	O
you	O	O
'	O	O
re	O	O
just	O	O
holding	O	O
on	O	O
to	O	O
a	O	O
single	O	O
-	O	O
character	O	O
string	O	O
.	O	O
The	O	O
way	O	O
to	O	O
avoid	O	O
storing	O	O
an	O	O
unwanted	O	O
reference	O	O
to	O	O
the	O	O
original	O	O
string	O	O
is	O	O
to	O	O
do	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
For	O	O
added	O	O
badness	O	O
,	O	O
you	O	O
might	O	O
also	O	O
.	B-api_mention	B-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
the	O	O
substring	O	O
:	O	O
#	O	O
pre	O	O
Doing	O	O
so	O	O
will	O	O
keep	O	O
both	O	O
the	O	O
original	O	O
long	O	O
string	O	O
and	O	O
the	O	O
derived	O	O
substring	O	O
in	O	O
memory	O	O
even	O	O
after	O	O
the	O	O
StringLeaker	B-api_mention	B-api_mention
instance	O	O
has	O	O
been	O	O
discarded	O	O
.	O	O
Question	O	O
-	O	O
5038204	O	O
,	O	O
answer	O	O
-	O	O
5039178	O	O
The	O	O
commons	O	O
/	O	O
lang	O	O
builders	O	O
are	O	O
great	O	O
and	O	O
I	O	O
have	O	O
been	O	O
using	O	O
them	O	O
for	O	O
years	O	O
without	O	O
noticeable	O	O
performance	O	O
overhead	O	O
(	O	O
with	O	O
and	O	O
without	O	O
hibernate	O	O
)	O	O
.	O	O
But	O	O
as	O	O
Alain	O	O
writes	O	O
,	O	O
the	O	O
Guava	O	O
way	O	O
is	O	O
even	O	O
nicer	O	O
:	O	O
Here	O	O
'	O	O
s	O	O
a	O	O
sample	O	O
Bean	O	O
:	O	O
#	O	O
pre	O	O
Here	O	O
'	O	O
s	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
implemented	O	O
with	O	O
Commons	O	O
/	O	O
Lang	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
here	O	O
with	O	O
Guava	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
the	O	O
Guava	O	O
version	O	O
is	O	O
shorter	O	O
and	O	O
avoids	O	O
superfluous	O	O
helper	O	O
objects	O	O
.	O	O
In	O	O
case	O	O
of	O	O
equals	O	O
,	O	O
it	O	O
even	O	O
allows	O	O
for	O	O
short	O	O
-	O	O
circuiting	O	O
the	O	O
evaluation	O	O
if	O	O
an	O	O
earlier	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equal	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
returns	O	O
false	O	O
(	O	O
to	O	O
be	O	O
fair	O	O
:	O	O
commons	O	O
/	O	O
lang	O	O
has	O	O
an	O	O
ObjectUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
with	O	O
identical	O	O
semantics	O	O
which	O	O
could	O	O
be	O	O
used	O	O
instead	O	O
of	O	O
EqualsBuilder	B-api_mention	B-api_mention
to	O	O
allow	O	O
short	O	O
-	O	O
circuiting	O	O
as	O	O
above	O	O
)	O	O
.	O	O
So	O	O
:	O	O
yes	O	O
,	O	O
the	O	O
commons	O	O
lang	O	O
builders	O	O
are	O	O
very	O	O
preferable	O	O
over	O	O
manually	O	O
constructed	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
(	O	O
or	O	O
those	O	O
awful	O	O
monsters	O	O
Eclipse	O	O
will	O	O
generate	O	O
for	O	O
you	O	O
)	O	O
,	O	O
but	O	O
the	O	O
Guava	O	O
versions	O	O
are	O	O
even	O	O
better	O	O
.	O	O
And	O	O
a	O	O
note	O	O
about	O	O
Hibernate	O	O
:	O	O
be	O	O
careful	O	O
about	O	O
using	O	O
lazy	O	O
collections	O	O
in	O	O
your	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
implementations	O	O
.	O	O
That	O	O
will	O	O
fail	O	O
miserably	O	O
if	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
an	O	O
open	O	O
Session	B-api_mention	O
.	O	O
Note	O	O
(	O	O
about	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
:	O	O
a	O	O
)	O	O
in	O	O
both	O	O
versions	O	O
of	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
above	O	O
,	O	O
you	O	O
might	O	O
want	O	O
to	O	O
use	O	O
one	O	O
or	O	O
both	O	O
of	O	O
these	O	O
shortcuts	O	O
also	O	O
:	O	O
#	O	O
pre	O	O
b	O	O
)	O	O
depending	O	O
on	O	O
your	O	O
interpretation	O	O
of	O	O
the	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
contract	O	O
,	O	O
you	O	O
might	O	O
also	O	O
change	O	O
the	O	O
line	O	O
(	O	O
s	O	O
)	O	O
if	O	O
(	O	O
args	O	O
)	O	O
{	O	O
to	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
use	O	O
the	O	O
second	O	O
version	O	O
,	O	O
you	O	O
probably	O	O
also	O	O
want	O	O
to	O	O
call	O	O
super	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
inside	O	O
your	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Opinions	O	O
differ	O	O
here	O	O
,	O	O
the	O	O
topic	O	O
is	O	O
discussed	O	O
in	O	O
this	O	O
question	O	O
:	O	O
#	O	O
blockquote	O	O
(	O	O
although	O	O
it	O	O
'	O	O
s	O	O
about	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
the	O	O
same	O	O
applies	O	O
to	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
Note	O	O
(	O	O
inspired	O	O
by	O	O
Comment	O	O
from	O	O
kayahr	O	O
)	O	O
Objects	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
hashCode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
just	O	O
as	O	O
the	O	O
underlying	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
hashCode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
might	O	O
perform	O	O
badly	O	O
if	O	O
you	O	O
have	O	O
many	O	O
primitive	O	O
fields	O	O
.	O	O
In	O	O
such	O	O
cases	O	O
,	O	O
EqualsBuilder	B-api_mention	B-api_mention
may	O	O
actually	O	O
be	O	O
the	O	O
better	O	O
solution	O	O
.	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16148619	O	O
use	O	O
int	O	O
as	O	O
Object	B-api_mention	B-api_mention
not	O	O
as	O	O
primitive	O	O
type	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29495113	O	O
#	O	O
blockquote	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
newType	O	O
=	O	O
=	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	O
class	I-api_mention	O
It	O	O
is	O	O
checking	O	O
whether	O	O
variable	O	O
newType	O	O
holds	O	O
a	O	O
reference	O	O
to	O	O
an	O	O
instance	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Class	I-api_mention	I-api_mention
representing	O	O
type	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
The	O	O
casts	O	O
are	O	O
unneeded	O	O
.	O	O
#	O	O
blockquote	O	O
As	O	O
far	O	O
as	O	O
I	O	O
can	O	O
tell	O	O
,	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
could	O	O
be	O	O
used	O	O
in	O	O
both	O	O
cases	O	O
,	O	O
but	O	O
non	O	O
-	O	O
reflective	O	O
ordinary	O	O
array	O	O
construction	O	O
is	O	O
likely	O	O
a	O	O
bit	O	O
faster	O	O
.	O	O
Thus	O	O
,	O	O
I	O	O
suppose	O	O
that	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
is	O	O
called	O	O
out	O	O
as	O	O
a	O	O
special	O	O
case	O	O
for	O	O
performance	O	O
reasons	O	O
,	O	O
but	O	O
I	O	O
have	O	O
no	O	O
idea	O	O
whether	O	O
that	O	O
case	O	O
is	O	O
exercised	O	O
frequently	O	O
enough	O	O
for	O	O
the	O	O
optimization	O	O
to	O	O
be	O	O
important	O	O
.	O	O
#	O	O
blockquote	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
nums	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
You	O	O
should	O	O
use	O	O
it	O	O
when	O	O
you	O	O
need	O	O
to	O	O
copy	O	O
an	O	O
array	O	O
to	O	O
an	O	O
array	O	O
with	O	O
a	O	O
possibly	O	O
different	O	O
(	O	O
but	O	O
compatible	O	O
)	O	O
element	O	O
type	O	O
,	O	O
especially	O	O
when	O	O
the	O	O
element	O	O
types	O	O
are	O	O
not	O	O
statically	O	O
known	O	O
.	O	O
If	O	O
you	O	O
know	O	O
you	O	O
want	O	O
the	O	O
copy	O	O
to	O	O
have	O	O
the	O	O
same	O	O
element	O	O
type	O	O
as	O	O
the	O	O
original	O	O
,	O	O
then	O	O
it	O	O
'	O	O
s	O	O
easier	O	O
to	O	O
use	O	O
the	O	O
original	O	O
array	O	O
'	O	O
s	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Question	O	O
-	O	O
12575990	O	O
,	O	O
answer	O	O
-	O	O
12576219	O	O
A	O	O
Java	O	O
Date	B-api_mention	B-api_mention
is	O	O
a	O	O
container	O	O
for	O	O
the	O	O
number	O	O
of	O	O
milliseconds	O	O
since	O	O
January	O	O
1	O	O
,	O	O
1970	O	O
,	O	O
00	O	O
:	O	O
00	O	O
:	O	O
00	O	O
GMT	O	O
.	O	O
When	O	O
you	O	O
use	O	O
something	O	O
like	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
Java	O	O
uses	O	O
Date	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
print	O	O
the	O	O
contents	O	O
.	O	O
The	O	O
only	O	O
way	O	O
to	O	O
change	O	O
it	O	O
is	O	O
to	O	O
override	O	O
Date	O	B-api_mention
and	O	O
provide	O	O
your	O	O
own	O	O
implementation	O	O
of	O	O
Date	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Now	O	O
before	O	O
you	O	O
fire	O	O
up	O	O
your	O	O
IDE	O	O
and	O	O
try	O	O
this	O	O
,	O	O
I	O	O
wouldn	O	O
'	O	O
t	O	O
;	O	O
it	O	O
will	O	O
only	O	O
complicate	O	O
matters	O	O
.	O	O
You	O	O
are	O	O
better	O	O
off	O	O
formatting	O	O
the	O	O
date	O	O
to	O	O
the	O	O
format	O	O
you	O	O
want	O	O
to	O	O
use	O	O
(	O	O
or	O	O
display	O	O
)	O	O
.	O	O
What	O	O
you	O	O
can	O	O
do	O	O
,	O	O
is	O	O
format	O	O
the	O	O
date	O	O
.	O	O
#	O	O
pre	O	O
These	O	O
are	O	O
actually	O	O
the	O	O
same	O	O
date	O	O
,	O	O
represented	O	O
differently	O	O
.	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8727998	O	O
Another	O	O
point	O	O
is	O	O
the	O	O
time	O	O
complexity	O	O
of	O	O
insert	O	O
operations	O	O
.	O	O
For	O	O
a	O	O
list	O	O
insert	O	O
,	O	O
one	O	O
expects	O	O
a	O	O
complexity	O	O
of	O	O
O	O	O
(	O	O
1	O	O
)	O	O
.	O	O
But	O	O
this	O	O
could	O	O
not	O	O
be	O	O
guaranteed	O	O
with	O	O
a	O	O
sorted	O	O
list	O	O
.	O	O
And	O	O
the	O	O
most	O	O
important	O	O
point	O	O
is	O	O
that	O	O
lists	O	O
assume	O	O
nothing	O	O
about	O	O
their	O	O
elements	O	O
.	O	O
For	O	O
example	O	O
,	O	O
you	O	O
can	O	O
make	O	O
lists	O	O
of	O	O
things	O	O
that	O	O
do	O	O
not	O	O
implement	O	O
equals	B-api_mention	B-api_mention
or	O	O
compare	B-api_mention	O
.	O	O
Question	O	O
-	O	O
21163108	O	O
,	O	O
answer	O	O
-	O	O
21172732	O	O
The	O	O
parallel	O	O
streams	O	O
use	O	O
the	O	O
default	O	O
ForkJoinPool	B-api_mention	B-api_mention
which	O	O
by	O	O
default	O	O
has	O	O
one	O	O
less	O	O
threads	O	O
as	O	O
you	O	O
have	O	O
processors	O	O
,	O	O
as	O	O
returned	O	O
by	O	O
Runtime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getRuntime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
availableProcessors	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
so	O	O
parallel	O	O
streams	O	O
use	O	O
all	O	O
your	O	O
processors	O	O
because	O	O
they	O	O
also	O	O
use	O	O
the	O	O
main	O	O
thread	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
To	O	O
change	O	O
the	O	O
way	O	O
parallel	O	O
streams	O	O
are	O	O
executed	O	O
,	O	O
you	O	O
can	O	O
either	O	O
#	O	O
li	O	O
submit	O	O
the	O	O
parallel	O	O
stream	O	O
execution	O	O
to	O	O
your	O	O
own	O	O
ForkJoinPool	B-api_mention	B-api_mention
:	O	O
yourFJP	O	O
.	B-api_mention	B-api_mention
submit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
#	O	O
li	O	O
you	O	O
can	O	O
change	O	O
the	O	O
size	O	O
of	O	O
the	O	O
common	O	O
pool	O	O
using	O	O
system	O	O
properties	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setProperty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
a	O	O
target	O	O
parallelism	O	O
of	O	O
20	O	O
threads	O	O
.	O	O
Example	O	O
of	O	O
the	O	O
latter	O	O
on	O	O
my	O	O
machine	O	O
which	O	O
has	O	O
8	O	O
processors	O	O
.	O	O
If	O	O
I	O	O
run	O	O
the	O	O
following	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
output	O	O
is	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
you	O	O
can	O	O
see	O	O
that	O	O
the	O	O
parallel	O	O
stream	O	O
processes	O	O
8	O	O
items	O	O
at	O	O
a	O	O
time	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
uses	O	O
8	O	O
threads	O	O
.	O	O
However	O	O
if	O	O
I	O	O
uncomment	O	O
the	O	O
commented	O	O
line	O	O
,	O	O
the	O	O
output	O	O
is	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
time	O	O
the	O	O
parallel	O	O
stream	O	O
has	O	O
used	O	O
20	O	O
threads	O	O
and	O	O
all	O	O
20	O	O
elements	O	O
in	O	O
the	O	O
stream	O	O
have	O	O
been	O	O
processed	O	O
comcurrently	O	O
.	O	O
Question	O	O
-	O	O
19757300	O	O
,	O	O
answer	O	O
-	O	O
19759653	O	O
You	O	O
can	O	O
also	O	O
propagate	O	O
your	O	O
static	O	O
pain	O	O
with	O	O
lambdas	O	O
,	O	O
so	O	O
the	O	O
whole	O	O
thing	O	O
looks	O	O
readable	O	O
:	O	O
s	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
propagate	O	O
here	O	O
receives	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
concurrent	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Callable	I-api_mention	I-api_mention
as	O	O
a	O	O
parameter	O	O
and	O	O
converts	O	O
any	O	O
exception	O	O
caught	O	O
during	O	O
the	O	O
call	O	O
into	O	O
RuntimeException	B-api_mention	B-api_mention
.	O	O
There	O	O
is	O	O
a	O	O
similar	O	O
conversion	O	O
method	O	O
Throwables	B-api_mention	O
#	I-api_mention	O
propagate	I-api_mention	O
(	I-api_mention	O
Throwable	I-api_mention	B-api_mention
)	I-api_mention	O
in	O	O
Guava	O	O
.	O	O
This	O	O
method	O	O
seems	O	O
being	O	O
essential	O	O
for	O	O
lambda	O	O
method	O	O
chaining	O	O
,	O	O
so	O	O
I	O	O
hope	O	O
one	O	O
day	O	O
it	O	O
will	O	O
be	O	O
added	O	O
to	O	O
one	O	O
of	O	O
the	O	O
popular	O	O
libs	O	O
or	O	O
this	O	O
propagating	O	O
behavior	O	O
would	O	O
be	O	O
by	O	O
default	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31202946	O	O
Why	O	O
was	O	O
the	O	O
Thread	B-api_mention	B-api_mention
class	O	O
implemented	O	O
as	O	O
a	O	O
regular	O	O
class	O	O
and	O	O
not	O	O
an	O	O
abstract	O	O
class	O	O
with	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
being	O	O
abstract	O	O
.	O	O
Will	O	O
it	O	O
possibly	O	O
introduce	O	O
any	O	O
problems	O	O
?	O	O
Or	O	O
does	O	O
it	O	O
have	O	O
any	O	O
use	O	O
in	O	O
being	O	O
this	O	O
way	O	O
?	O	O
Also	O	O
,	O	O
the	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
supposed	O	O
to	O	O
be	O	O
a	O	O
very	O	O
specific	O	O
method	O	O
whose	O	O
functionality	O	O
cannot	O	O
be	O	O
implemented	O	O
by	O	O
any	O	O
other	O	O
class	O	O
(	O	O
If	O	O
I	O	O
am	O	O
not	O	O
wrong	O	O
)	O	O
.	O	O
And	O	O
hence	O	O
I	O	O
guess	O	O
the	O	O
final	O	O
keyword	O	O
would	O	O
be	O	O
apt	O	O
for	O	O
this	O	O
more	O	O
than	O	O
any	O	O
other	O	O
method	O	O
.	O	O
But	O	O
I	O	O
am	O	O
able	O	O
to	O	O
override	O	O
this	O	O
method	O	O
and	O	O
use	O	O
it	O	O
as	O	O
I	O	O
like	O	O
,	O	O
#	O	O
pre	O	O
It	O	O
obviously	O	O
only	O	O
printed	O	O
,	O	O
#	O	O
blockquote	O	O
Is	O	O
there	O	O
any	O	O
use	O	O
in	O	O
overriding	O	O
other	O	O
than	O	O
confusing	O	O
the	O	O
engineer	O	O
replacing	O	O
you	O	O
?	O	O
If	O	O
not	O	O
,	O	O
why	O	O
was	O	O
the	O	O
method	O	O
not	O	O
declared	O	O
final	O	O
in	O	O
Thread	B-api_mention	B-api_mention
class	O	O
?	O	O
Question	O	O
-	O	O
23308193	O	O
,	O	O
answer	O	O
-	O	O
32566745	O	O
This	O	O
is	O	O
possible	O	O
for	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
solution	O	O
is	O	O
not	O	O
nice	O	O
,	O	O
but	O	O
it	O	O
is	O	O
possible	O	O
.	O	O
WARNING	O	O
:	O	O
You	O	O
should	O	O
not	O	O
use	O	O
it	O	O
for	O	O
controlling	O	O
business	O	O
logic	O	O
,	O	O
but	O	O
purely	O	O
for	O	O
handling	O	O
an	O	O
exceptional	O	O
situation	O	O
which	O	O
occurs	O	O
during	O	O
the	O	O
execution	O	O
of	O	O
the	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Such	O	O
as	O	O
a	O	O
resource	O	O
suddenly	O	O
stops	O	O
being	O	O
accessible	O	O
,	O	O
one	O	O
of	O	O
the	O	O
processed	O	O
objects	O	O
is	O	O
violating	O	O
a	O	O
contract	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
contract	O	O
says	O	O
that	O	O
all	O	O
the	O	O
elements	O	O
in	O	O
the	O	O
stream	O	O
must	O	O
not	O	O
be	O	O
null	O	O
but	O	O
suddenly	O	O
and	O	O
unexpectedly	O	O
one	O	O
of	O	O
them	O	O
is	O	O
null	O	O
)	O	O
etc	O	O
.	O	O
According	O	O
to	O	O
the	O	O
documentation	O	O
for	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
So	O	O
you	O	O
throw	O	O
an	O	O
exception	O	O
which	O	O
will	O	O
immediately	O	O
break	O	O
the	O	O
internal	O	O
loop	O	O
.	O	O
The	O	O
code	O	O
will	O	O
be	O	O
something	O	O
like	O	O
this	O	O
-	O	O
I	O	O
cannot	O	O
say	O	O
I	O	O
like	O	O
it	O	O
but	O	O
it	O	O
works	O	O
.	O	O
You	O	O
create	O	O
your	O	O
own	O	O
class	O	O
BreakException	B-api_mention	B-api_mention
which	O	O
extends	O	O
RuntimeException	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
Notice	O	O
that	O	O
the	O	O
try	O	O
.	O	O
.	O	O
.	O	O
catch	O	O
is	O	O
not	O	O
around	O	O
the	O	O
lambda	O	O
expression	O	O
,	O	O
but	O	O
rather	O	O
around	O	O
the	O	O
whole	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
To	O	O
make	O	O
it	O	O
more	O	O
visible	O	O
,	O	O
see	O	O
the	O	O
following	O	O
transcription	O	O
of	O	O
the	O	O
code	O	O
which	O	O
shows	O	O
it	O	O
more	O	O
clearly	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
8894384	O	O
This	O	O
is	O	O
just	O	O
micro	O	O
-	O	O
optimisation	O	O
that	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
worry	O	O
about	O	O
.	O	O
char	O	O
[	O	O
]	O	O
chars	O	O
=	O	O
str	O	O
.	B-api_mention	B-api_mention
toCharArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
returns	O	O
you	O	O
a	O	O
copy	O	O
of	O	O
str	O	O
character	O	O
arrays	O	O
(	O	O
in	O	O
JDK	O	O
,	O	O
it	O	O
returns	O	O
a	O	O
copy	O	O
of	O	O
characters	O	O
by	O	O
calling	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
arrayCopy	I-api_mention	I-api_mention
)	O	I-api_mention
.	O	O
Other	O	O
than	O	O
that	O	O
,	O	O
str	O	O
.	B-api_mention	B-api_mention
charAt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
only	O	O
checks	O	O
if	O	O
the	O	O
index	O	O
is	O	O
indeed	O	O
in	O	O
bounds	O	O
and	O	O
returns	O	O
a	O	O
character	O	O
within	O	O
the	O	O
array	O	O
index	O	O
.	O	O
The	O	O
first	O	O
one	O	O
doesn	O	O
'	O	O
t	O	O
create	O	O
additional	O	O
memory	O	O
in	O	O
JVM	O	O
.	O	O
Question	O	O
-	O	O
15182496	O	O
The	O	O
following	O	O
print	O	O
statement	O	O
would	O	O
print	O	O
"	O	O
hello	O	O
world	O	O
"	O	O
.	O	O
Could	O	O
anyone	O	O
explain	O	O
this	O	O
?	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
And	O	O
randomString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
looks	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
35931153	O	O
If	O	O
you	O	O
directly	O	O
call	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
you	O	O
are	O	O
not	O	O
using	O	O
multi	O	O
-	O	O
threading	O	O
feature	O	O
since	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
executed	O	O
as	O	O
part	O	O
of	O	O
caller	O	O
thread	O	O
.	O	O
If	O	O
you	O	O
call	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
on	O	O
Thread	B-api_mention	B-api_mention
,	O	O
the	O	O
Java	O	O
Virtual	O	O
Machine	O	O
will	O	O
call	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
and	O	O
two	O	O
threads	O	O
will	O	O
run	O	O
concurrently	O	O
-	O	O
Current	O	O
Thread	B-api_mention	O
(	O	O
main	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
in	O	O
your	O	O
example	O	O
)	O	O
and	O	O
Other	O	O
Thread	B-api_mention	B-api_mention
(	O	O
Runnable	B-api_mention	B-api_mention
r1	O	O
in	O	O
your	O	O
example	O	O
)	O	O
.	O	O
Have	O	O
a	O	O
look	O	O
at	O	O
source	O	O
code	O	O
of	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
Thread	B-api_mention	B-api_mention
class	O	O
#	O	O
pre	O	O
In	O	O
above	O	O
code	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
see	O	O
invocation	O	O
to	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
private	O	O
native	O	O
void	O	O
start0	O	O
(	O	O
args	O	O
)	O	O
is	O	O
responsible	O	O
for	O	O
calling	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
JVM	O	O
executes	O	O
this	O	O
native	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
23218874	O	O
,	O	O
answer	O	O
-	O	O
23232560	O	O
For	O	O
simple	O	O
cases	O	O
such	O	O
as	O	O
the	O	O
one	O	O
illustrated	O	O
,	O	O
they	O	O
are	O	O
mostly	O	O
the	O	O
same	O	O
.	O	O
However	O	O
,	O	O
there	O	O
are	O	O
a	O	O
number	O	O
of	O	O
subtle	O	O
differences	O	O
that	O	O
might	O	O
be	O	O
significant	O	O
.	O	O
One	O	O
issue	O	O
is	O	O
with	O	O
ordering	O	O
.	O	O
With	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
the	O	O
order	O	O
is	O	O
undefined	O	O
.	O	O
It	O	O
'	O	O
s	O	O
unlikely	O	O
to	O	O
occur	O	O
with	O	O
sequential	O	O
streams	O	O
,	O	O
still	O	O
,	O	O
it	O	O
'	O	O
s	O	O
within	O	O
the	O	O
specification	O	O
for	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
to	O	O
execute	O	O
in	O	O
some	O	O
arbitrary	O	O
order	O	O
.	O	O
This	O	O
does	O	O
occur	O	O
frequently	O	O
in	O	O
parallel	O	O
streams	O	O
.	O	O
By	O	O
contrast	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
always	O	O
executed	O	O
in	O	O
the	O	O
iteration	O	O
order	O	O
of	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
if	O	O
one	O	O
is	O	O
specified	O	O
.	O	O
Another	O	O
issue	O	O
is	O	O
with	O	O
side	O	O
effects	O	O
.	O	O
The	O	O
action	O	O
specified	O	O
in	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
required	O	O
to	O	O
be	O	O
non	O	O
-	O	O
interfering	O	O
.	O	O
(	O	O
See	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
package	O	O
doc	O	O
.	O	O
)	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
potentially	O	O
has	O	O
fewer	O	O
restrictions	O	O
.	O	O
For	O	O
the	O	O
collections	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
,	O	I-api_mention
Iterable	B-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
will	O	O
generally	O	O
use	O	O
that	O	O
collection	O	O
'	O	O
s	O	O
Iterator	B-api_mention	B-api_mention
,	O	O
most	O	O
of	O	O
which	O	O
are	O	O
designed	O	O
to	O	O
be	O	O
fail	O	O
-	O	O
fast	O	O
and	O	O
which	O	O
will	O	O
throw	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
if	O	O
the	O	O
collection	O	O
is	O	O
structurally	O	O
modified	O	O
during	O	O
the	O	O
iteration	O	O
.	O	O
However	O	O
,	O	O
modifications	O	O
that	O	O
aren	O	O
'	O	O
t	O	O
structural	O	O
are	O	O
allowed	O	O
during	O	O
iteration	O	O
.	O	O
For	O	O
example	O	O
,	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
class	O	O
documentation	O	O
says	O	O
"	O	O
merely	O	O
setting	O	O
the	O	O
value	O	O
of	O	O
an	O	O
element	O	O
is	O	O
not	O	O
a	O	O
structural	O	O
modification	O	O
.	O	O
"	O	O
Thus	O	O
,	O	O
the	O	O
action	O	O
for	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
allowed	O	O
to	O	O
set	O	O
values	O	O
in	O	O
the	O	O
underlying	O	O
ArrayList	B-api_mention	B-api_mention
without	O	O
problems	O	O
.	O	O
The	O	O
concurrent	O	O
collections	O	O
are	O	O
yet	O	O
again	O	O
different	O	O
.	O	O
Instead	O	O
of	O	O
fail	O	O
-	O	O
fast	O	O
,	O	O
they	O	O
are	O	O
designed	O	O
to	O	O
be	O	O
weakly	O	O
consistent	O	O
.	O	O
The	O	O
full	O	O
definition	O	O
is	O	O
at	O	O
that	O	O
link	O	O
.	O	O
Briefly	O	O
,	O	O
though	O	O
,	O	O
consider	O	O
ConcurrentLinkedDeque	B-api_mention	O
.	O	O
The	O	O
action	O	O
passed	O	O
to	O	O
its	O	O
forEach	B-api_mention	B-api_mention
method	O	O
is	O	O
allowed	O	O
to	O	O
modify	O	O
the	O	O
underlying	O	O
deque	O	O
,	O	O
even	O	O
structurally	O	O
,	O	O
and	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
is	O	O
never	O	O
thrown	O	O
.	O	O
However	O	O
,	O	O
the	O	O
modification	O	O
that	O	O
occurs	O	O
might	O	O
or	O	O
might	O	O
not	O	O
be	O	O
visible	O	O
in	O	O
this	O	O
iteration	O	O
.	O	O
(	O	O
Hence	O	O
the	O	O
"	O	O
weak	O	O
"	O	O
consistency	O	O
.	O	O
)	O	O
Still	O	O
another	O	O
difference	O	O
is	O	O
visible	O	O
if	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
iterating	O	O
over	O	O
a	O	O
synchronized	O	O
collection	O	O
.	O	O
On	O	O
such	O	O
a	O	O
collection	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
takes	O	O
the	O	O
collection	O	O
'	O	O
s	O	O
lock	O	O
once	O	O
and	O	O
holds	O	O
it	O	O
across	O	O
all	O	O
the	O	O
calls	O	O
to	O	O
the	O	O
action	O	O
method	O	O
.	O	O
The	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
call	O	O
uses	O	O
the	O	O
collection	O	O
'	O	O
s	O	O
spliterator	O	O
,	O	O
which	O	O
does	O	O
not	O	O
lock	O	O
,	O	O
and	O	O
which	O	O
relies	O	O
on	O	O
the	O	O
prevailing	O	O
rule	O	O
of	O	O
non	O	O
-	O	O
interference	O	O
.	O	O
The	O	O
collection	O	O
backing	O	O
the	O	O
stream	O	O
could	O	O
be	O	O
modified	O	O
during	O	O
iteration	O	O
,	O	O
and	O	O
if	O	O
it	O	O
is	O	O
,	O	O
a	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
or	O	O
inconsistent	O	O
behavior	O	O
could	O	O
result	O	O
.	O	O
Question	O	O
-	O	O
29945627	O	O
,	O	O
answer	O	O
-	O	O
29946155	O	O
The	O	O
syntax	O	O
you	O	O
'	O	O
re	O	O
after	O	O
is	O	O
possible	O	O
with	O	O
a	O	O
little	O	O
helper	O	O
function	O	O
that	O	O
converts	O	O
a	O	O
Runnable	B-api_mention	B-api_mention
into	O	O
Action	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	O	O
you	O	O
can	O	O
place	O	O
it	O	O
in	O	O
Action	B-api_mention	O
for	O	O
example	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
20918650	O	O
,	O	O
answer	O	O
-	O	O
20918709	O	O
A	O	O
subsequent	O	O
post	O	O
by	O	O
the	O	O
same	O	O
user	O	O
in	O	O
the	O	O
same	O	O
conversation	O	O
:	O	O
#	O	O
blockquote	O	O
(	O	O
This	O	O
was	O	O
in	O	O
response	O	O
to	O	O
a	O	O
statement	O	O
by	O	O
another	O	O
user	O	O
,	O	O
namely	O	O
that	O	O
"	O	O
it	O	O
seems	O	O
in	O	O
some	O	O
situations	O	O
'	O	O
new	O	O
T	B-api_mention	O
'	O	O
would	O	O
be	O	O
better	O	O
"	O	O
,	O	O
the	O	O
idea	O	O
being	O	O
that	O	O
new	O	O
T	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
impossible	O	O
due	O	O
to	O	O
type	O	O
erasure	O	O
.	O	O
(	O	O
This	O	O
is	O	O
debatable	O	O
—	O	O
even	O	O
if	O	O
T	B-api_mention	O
were	O	O
available	O	O
at	O	O
runtime	O	O
,	O	O
it	O	O
could	O	O
be	O	O
an	O	O
abstract	O	O
class	O	O
or	O	O
interface	O	O
,	O	O
or	O	O
it	O	O
could	O	O
be	O	O
Void	O	O
,	O	O
or	O	O
it	O	O
could	O	O
lack	O	O
a	O	O
no	O	O
-	O	O
arg	O	O
constructor	O	O
,	O	O
or	O	O
its	O	O
no	O	O
-	O	O
arg	O	O
constructor	O	O
could	O	O
be	O	O
private	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
because	O	O
it	O	O
'	O	O
s	O	O
supposed	O	O
to	O	O
be	O	O
a	O	O
singleton	O	O
class	O	O
)	O	O
,	O	O
or	O	O
its	O	O
no	O	O
-	O	O
arg	O	O
constructor	O	O
could	O	O
specify	O	O
a	O	O
checked	O	O
exception	O	O
that	O	O
the	O	O
generic	O	O
method	O	O
does	O	O
not	O	O
catch	O	O
or	O	O
specify	O	O
—	O	O
but	O	O
that	O	O
was	O	O
the	O	O
premise	O	O
.	O	O
Regardless	O	O
,	O	O
it	O	O
'	O	O
s	O	O
true	O	O
that	O	O
without	O	O
erasure	O	O
you	O	O
could	O	O
at	O	O
least	O	O
write	O	O
T	B-api_mention	O
.	I-api_mention	O
class	I-api_mention	O
.	I-api_mention	B-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
handles	O	O
those	O	O
issues	O	O
.	O	O
)	O	O
)	O	O
This	O	O
view	O	O
,	O	O
that	O	O
types	O	O
are	O	O
isomorphic	O	O
to	O	O
propositions	O	O
,	O	O
suggests	O	O
that	O	O
the	O	O
user	O	O
has	O	O
a	O	O
background	O	O
in	O	O
formal	O	O
type	O	O
theory	O	O
.	O	O
(	O	O
S	O	O
)	O	O
he	O	O
very	O	O
likely	O	O
does	O	O
not	O	O
like	O	O
"	O	O
dynamic	O	O
types	O	O
"	O	O
or	O	O
"	O	O
runtime	O	O
-	O	O
types	O	O
"	O	O
and	O	O
would	O	O
prefer	O	O
a	O	O
Java	O	O
without	O	O
downcasts	O	O
and	O	O
instanceof	B-api_mention	O
and	O	O
reflection	O	O
and	O	O
so	O	O
on	O	O
.	O	O
(	O	O
Think	O	O
of	O	O
a	O	O
language	O	O
like	O	O
Standard	O	O
ML	O	O
,	O	O
which	O	O
has	O	O
a	O	O
very	O	O
rich	O	O
(	O	O
static	O	O
)	O	O
type	O	O
system	O	O
and	O	O
whose	O	O
dynamic	O	O
semantics	O	O
do	O	O
not	O	O
depend	O	O
on	O	O
any	O	O
type	O	O
information	O	O
whatsoever	O	O
.	O	O
)	O	O
It	O	O
'	O	O
s	O	O
worth	O	O
keeping	O	O
in	O	O
mind	O	O
,	O	O
by	O	O
the	O	O
way	O	O
,	O	O
that	O	O
the	O	O
user	O	O
is	O	O
trolling	O	O
:	O	O
while	O	O
(	O	O
s	O	O
)	O	O
he	O	O
likely	O	O
sincerely	O	O
prefers	O	O
(	O	O
statically	O	O
)	O	O
typed	O	O
languages	O	O
,	O	O
(	O	O
s	O	O
)	O	O
he	O	O
is	O	O
not	O	O
sincerely	O	O
trying	O	O
to	O	O
persuade	O	O
others	O	O
of	O	O
that	O	O
view	O	O
.	O	O
Rather	O	O
,	O	O
the	O	O
main	O	O
purpose	O	O
of	O	O
the	O	O
original	O	O
tweet	O	O
was	O	O
to	O	O
mock	O	O
those	O	O
who	O	O
disagree	O	O
,	O	O
and	O	O
after	O	O
some	O	O
of	O	O
those	O	O
disagree	O	O
-	O	O
ers	O	O
chimed	O	O
in	O	O
,	O	O
the	O	O
user	O	O
posted	O	O
follow	O	O
-	O	O
up	O	O
tweets	O	O
such	O	O
as	O	O
"	O	O
the	O	O
reason	O	O
java	O	O
has	O	O
type	O	O
erasure	O	O
is	O	O
that	O	O
Wadler	O	O
et	O	O
al	O	O
know	O	O
what	O	O
they	O	O
are	O	O
doing	O	O
,	O	O
unlike	O	O
users	O	O
of	O	O
java	O	O
"	O	O
.	O	O
Unfortunately	O	O
,	O	O
this	O	O
makes	O	O
it	O	O
hard	O	O
to	O	O
find	O	O
out	O	O
what	O	O
(	O	O
s	O	O
)	O	O
he	O	O
'	O	O
s	O	O
actually	O	O
thinking	O	O
;	O	O
but	O	O
fortunately	O	O
,	O	O
it	O	O
also	O	O
likely	O	O
means	O	O
that	O	O
it	O	O
'	O	O
s	O	O
not	O	O
very	O	O
important	O	O
to	O	O
do	O	O
so	O	O
.	O	O
People	O	O
with	O	O
actual	O	O
depth	O	O
to	O	O
their	O	O
views	O	O
don	O	O
'	O	O
t	O	O
generally	O	O
resort	O	O
to	O	O
trolls	O	O
that	O	O
are	O	O
quite	O	O
this	O	O
content	O	O
-	O	O
free	O	O
.	O	O
Question	O	O
-	O	O
25850328	O	O
I	O	O
was	O	O
being	O	O
taught	O	O
that	O	O
Marker	B-api_mention	B-api_mention
interface	O	O
in	O	O
Java	O	O
is	O	O
an	O	O
empty	O	O
interface	O	O
and	O	O
is	O	O
used	O	O
to	O	O
signal	O	O
to	O	O
compiler	O	O
or	O	O
JVM	O	O
that	O	O
the	O	O
objects	O	O
of	O	O
the	O	O
class	O	O
implementing	O	O
this	O	O
interface	O	O
must	O	O
be	O	O
treated	O	O
in	O	O
a	O	O
special	O	O
way	O	O
,	O	O
like	O	O
serializing	O	O
,	O	O
cloning	O	O
,	O	O
etc	O	O
.	O	O
But	O	O
lately	O	O
I	O	O
have	O	O
learned	O	O
that	O	O
it	O	O
actually	O	O
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
the	O	O
compiler	O	O
or	O	O
the	O	O
JVM	O	O
.	O	O
For	O	O
example	O	O
,	O	O
in	O	O
case	O	O
of	O	O
Serializable	B-api_mention	O
interface	O	O
the	O	O
method	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
ObjectOutputStream	B-api_mention	B-api_mention
does	O	O
something	O	O
like	O	O
instanceOf	B-api_mention	B-api_mention
Serializable	I-api_mention	O
to	O	O
detect	O	O
whether	O	O
the	O	O
class	O	O
implements	O	O
Serializable	B-api_mention	B-api_mention
&	O	O
throws	O	O
NotSerializableException	B-api_mention	B-api_mention
accordingly	O	O
.	O	O
Everything	O	O
is	O	O
handled	O	O
in	O	O
the	O	O
code	O	O
and	O	O
this	O	O
seems	O	O
to	O	O
be	O	O
a	O	O
design	O	O
-	O	O
pattern	O	O
so	O	O
I	O	O
think	O	O
we	O	O
can	O	O
define	O	O
our	O	O
own	O	O
marker	O	O
interfaces	O	O
.	O	O
Now	O	O
my	O	O
doubts	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
the	O	O
definition	O	O
of	O	O
a	O	O
marker	O	B-api_mention
interface	O	O
mentioned	O	O
above	O	O
in	O	O
1st	O	O
point	O	O
wrong	O	O
?	O	O
How	O	O
can	O	O
we	O	O
define	O	O
a	O	O
Marker	B-api_mention	B-api_mention
interface	O	O
then	O	O
?	O	O
#	O	O
li	O	O
And	O	O
instead	O	O
of	O	O
using	O	O
the	O	O
instanceOf	B-api_mention	B-api_mention
operator	O	O
why	O	O
can	O	O
'	O	O
t	O	O
the	O	O
method	O	O
be	O	O
something	O	O
like	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
so	O	O
that	O	O
there	O	O
is	O	O
a	O	O
compile	O	O
-	O	O
time	O	O
type	O	O
checking	O	O
rather	O	O
than	O	O
runtime	O	O
?	O	O
#	O	O
li	O	O
How	O	O
are	O	O
Annotations	B-api_mention	B-api_mention
better	O	O
than	O	O
Marker	B-api_mention	B-api_mention
Interfaces	O	O
?	O	O
Question	O	O
-	O	O
8172420	O	O
,	O	O
answer	O	O
-	O	O
32174377	O	O
We	O	O
have	O	O
various	O	O
ways	O	O
to	O	O
convert	O	O
a	O	O
char	O	O
to	O	O
String	B-api_mention	B-api_mention
.	O	O
One	O	O
way	O	O
is	O	O
to	O	O
make	O	O
use	O	O
of	O	O
static	O	O
method	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
Character	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
Actually	O	O
this	O	O
toString	B-api_mention	B-api_mention
method	O	O
internally	O	O
makes	O	O
use	O	O
of	O	O
valueOf	B-api_mention	B-api_mention
method	O	O
from	O	O
String	B-api_mention	B-api_mention
class	O	O
which	O	O
makes	O	O
use	O	O
of	O	O
char	O	O
array	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
second	O	O
way	O	O
is	O	O
to	O	O
use	O	O
this	O	O
directly	O	O
:	O	O
String	B-api_mention	B-api_mention
str2	O	O
=	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
valueOf	B-api_mention	B-api_mention
method	O	O
in	O	O
String	B-api_mention	B-api_mention
class	O	O
makes	O	O
use	O	O
of	O	O
char	O	O
array	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
the	O	O
third	O	O
way	O	O
is	O	O
to	O	O
make	O	O
use	O	O
of	O	O
an	O	O
anonymous	O	O
array	O	O
to	O	O
wrap	O	O
a	O	O
single	O	O
character	O	O
and	O	O
then	O	O
passing	O	O
it	O	O
to	O	O
String	B-api_mention	B-api_mention
constructor	O	O
:	O	O
String	B-api_mention	B-api_mention
str4	O	O
=	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
fourth	O	O
way	O	O
is	O	O
to	O	O
make	O	O
use	O	O
of	O	O
concatenation	O	O
:	O	O
String	B-api_mention	B-api_mention
str3	O	O
=	O	O
StringLiteral	O	O
+	O	O
ch	O	O
;	O	O
This	O	O
will	O	O
actually	O	O
make	O	O
use	O	O
of	O	O
append	B-api_mention	O
method	O	O
from	O	O
StringBuilder	B-api_mention	B-api_mention
class	O	O
which	O	O
is	O	O
actually	O	O
preferred	O	O
when	O	O
we	O	O
are	O	O
doing	O	O
concatenation	O	O
in	O	O
a	O	O
loop	O	O
.	O	O
Question	O	O
-	O	O
15940234	O	O
I	O	O
'	O	O
m	O	O
relative	O	O
new	O	O
to	O	O
the	O	O
webservices	O	O
world	O	O
and	O	O
my	O	O
research	O	O
seems	O	O
to	O	O
have	O	O
confused	O	O
me	O	O
more	O	O
than	O	O
enlighten	O	O
me	O	O
,	O	O
my	O	O
problem	O	O
is	O	O
that	O	O
I	O	O
was	O	O
given	O	O
a	O	O
library	O	O
(	O	O
jar	O	O
)	O	O
which	O	O
I	O	O
have	O	O
to	O	O
extend	O	O
with	O	O
some	O	O
webservice	O	O
functionality	O	O
.	O	O
This	O	O
library	O	O
will	O	O
be	O	O
shared	O	O
to	O	O
other	O	O
developers	O	O
,	O	O
and	O	O
among	O	O
the	O	O
classes	O	O
in	O	O
the	O	O
jar	O	O
will	O	O
be	O	O
classes	O	O
that	O	O
have	O	O
a	O	O
method	O	O
which	O	O
calls	O	O
a	O	O
webservice	O	O
(	O	O
that	O	O
essentially	O	O
sets	O	O
an	O	O
attribute	O	O
of	O	O
the	O	O
class	O	O
,	O	O
does	O	O
some	O	O
business	O	O
logic	O	O
,	O	O
like	O	O
storing	O	O
the	O	O
object	O	O
in	O	O
a	O	O
db	O	O
,	O	O
etc	O	O
and	O	O
sends	O	O
back	O	O
the	O	O
object	O	O
with	O	O
those	O	O
modifications	O	O
)	O	O
.	O	O
I	O	O
want	O	O
to	O	O
make	O	O
the	O	O
call	O	O
to	O	O
this	O	O
service	O	O
as	O	O
simple	O	O
as	O	O
possible	O	O
,	O	O
hopefully	O	O
as	O	O
simple	O	O
so	O	O
that	O	O
the	O	O
developer	O	O
using	O	O
the	O	O
class	O	O
only	O	O
need	O	O
to	O	O
do	O	O
.	O	O
#	O	O
pre	O	O
I	O	O
have	O	O
been	O	O
studying	O	O
JAX	O	O
-	O	O
WS	O	O
to	O	O
use	O	O
on	O	O
the	O	O
server	O	O
but	O	O
seems	O	O
to	O	O
me	O	O
that	O	O
I	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
create	O	O
a	O	O
wsimport	O	O
in	O	O
the	O	O
server	O	O
nor	O	O
the	O	O
wsimport	O	O
on	O	O
the	O	O
client	O	O
,	O	O
since	O	O
I	O	O
know	O	O
that	O	O
both	O	O
have	O	O
the	O	O
classes	O	O
,	O	O
I	O	O
just	O	O
need	O	O
some	O	O
interaction	O	O
between	O	O
classes	O	O
shared	O	O
in	O	O
both	O	O
the	O	O
server	O	O
and	O	O
the	O	O
client	O	O
.	O	O
How	O	O
do	O	O
you	O	O
think	O	O
makes	O	O
sense	O	O
to	O	O
do	O	O
the	O	O
webservice	O	O
and	O	O
the	O	O
call	O	O
in	O	O
the	O	O
class	O	O
?	O	O
Question	O	O
-	O	O
24649842	O	O
What	O	O
'	O	O
s	O	O
the	O	O
main	O	O
difference	O	O
between	O	O
scheduleAtFixedRate	B-api_mention	B-api_mention
and	O	O
scheduleWithFixedDelay	B-api_mention	B-api_mention
methods	O	O
of	O	O
ScheduledExecutorService	B-api_mention	B-api_mention
?	O	O
#	O	O
pre	O	O
they	O	O
print	O	O
exact	O	O
the	O	O
same	O	O
time	O	O
,	O	O
seems	O	O
they	O	O
are	O	O
executed	O	O
at	O	O
exact	O	O
the	O	O
same	O	O
interval	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14502259	O	O
There	O	O
are	O	O
many	O	O
,	O	O
many	O	O
pseudo	O	O
random	O	O
number	O	O
generators	O	O
out	O	O
there	O	O
.	O	O
For	O	O
example	O	O
Knuth	O	O
'	O	O
s	O	O
ranarray	O	O
,	O	O
the	O	O
Mersenne	O	O
twister	O	O
,	O	O
or	O	O
look	O	O
for	O	O
LFSR	O	O
generators	O	O
.	O	O
Knuth	O	O
'	O	O
s	O	O
monumental	O	O
"	O	O
Seminumerical	O	O
algorithms	O	O
"	O	O
analizes	O	O
the	O	O
area	O	O
,	O	O
and	O	O
proposes	O	O
some	O	O
linear	O	O
congruential	O	O
generators	O	O
(	O	O
simple	O	O
to	O	O
implement	O	O
,	O	O
fast	O	O
)	O	O
.	O	O
But	O	O
I	O	O
'	O	O
d	O	O
suggest	O	O
you	O	O
just	O	O
stick	O	O
to	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
or	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
,	O	O
they	O	O
fast	O	O
and	O	O
at	O	O
least	O	O
OK	O	O
for	O	O
occasional	O	O
use	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
,	O	O
games	O	O
and	O	O
such	O	O
)	O	O
.	O	O
If	O	O
you	O	O
are	O	O
just	O	O
paranoid	O	O
on	O	O
the	O	O
distribution	O	O
(	O	O
some	O	O
Monte	O	O
Carlo	O	O
program	O	O
,	O	O
or	O	O
a	O	O
genetic	O	O
algorithm	O	O
)	O	O
,	O	O
check	O	O
out	O	O
their	O	O
implementation	O	O
(	O	O
source	O	O
is	O	O
available	O	O
somewhere	O	O
)	O	O
,	O	O
and	O	O
seed	O	O
them	O	O
with	O	O
some	O	O
truly	O	O
random	O	O
number	O	O
,	O	O
either	O	O
from	O	O
your	O	O
operating	O	O
system	O	O
or	O	O
from	O	O
random	O	O
.	O	O
org	O	O
.	O	O
If	O	O
this	O	O
is	O	O
required	O	O
for	O	O
some	O	O
application	O	O
where	O	O
security	O	O
is	O	O
critical	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
dig	O	O
yourself	O	O
.	O	O
And	O	O
as	O	O
in	O	O
that	O	O
case	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
believe	O	O
what	O	O
some	O	O
colored	O	O
square	O	O
with	O	O
missing	O	O
bits	O	O
spouts	O	O
here	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
shut	O	O
up	O	O
now	O	O
.	O	O
Question	O	O
-	O	O
19418427	O	O
,	O	O
answer	O	O
-	O	O
19418553	O	O
If	O	O
you	O	O
take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
methods	O	O
#	O	O
pre	O	O
and	O	O
its	O	O
decompiled	O	O
with	O	O
javap	O	O
-	O	O
c	O	O
ClassWithTheseMethods	O	B-api_mention
versions	O	O
you	O	O
will	O	O
see	O	O
#	O	O
pre	O	O
and	O	O
#	O	O
pre	O	O
So	O	O
if	O	O
Strings	O	B-api_mention
are	O	O
not	O	O
final	O	O
compiler	O	O
will	O	O
have	O	O
to	O	O
use	O	O
StringBuilder	B-api_mention	B-api_mention
to	O	O
concatenate	O	O
str1	O	O
and	O	O
str2	O	O
so	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
str1	O	O
+	O	O
str2	O	O
;	O	O
will	O	O
be	O	O
compiled	O	O
to	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
means	O	O
that	O	O
concat	O	O
will	O	O
be	O	O
created	O	O
at	O	O
runtime	O	O
so	O	O
will	O	O
not	O	O
come	O	O
from	O	O
String	B-api_mention	B-api_mention
pool	O	O
.	O	O
Also	O	O
if	O	O
Strings	O	B-api_mention
are	O	O
final	O	O
then	O	O
compiler	O	O
can	O	O
assume	O	O
that	O	O
they	O	O
will	O	O
never	O	O
change	O	O
so	O	O
instead	O	O
of	O	O
using	O	O
StringBuilder	B-api_mention	B-api_mention
it	O	O
can	O	O
safely	O	O
concatenate	O	O
its	O	O
values	O	O
so	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
str1	O	O
+	O	O
str2	O	O
;	O	O
can	O	O
be	O	O
changed	O	O
to	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
StringLiteral	O	O
+	O	O
StringLiteral	O	O
;	O	O
and	O	O
concatenated	O	O
into	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
StringLiteral	O	O
;	O	O
which	O	O
means	O	O
that	O	O
concate	O	O
will	O	O
become	O	O
sting	O	O
literal	O	O
which	O	O
will	O	O
be	O	O
interned	O	O
in	O	O
string	O	O
pool	O	O
and	O	O
then	O	O
compared	O	O
with	O	O
same	O	O
string	O	O
literal	O	O
from	O	O
that	O	O
pool	O	O
in	O	O
if	O	O
statement	O	O
.	O	O
Question	O	O
-	O	O
18647214	O	O
,	O	O
answer	O	O
-	O	O
18647232	O	O
I	O	O
would	O	O
just	O	O
do	O	O
this	O	O
.	O	O
It	O	O
basically	O	O
takes	O	O
the	O	O
minimum	O	O
between	O	O
100	O	O
(	O	O
the	O	O
max	O	O
health	O	O
)	O	O
and	O	O
what	O	O
the	O	O
health	O	O
would	O	O
be	O	O
with	O	O
15	O	O
extra	O	O
points	O	O
.	O	O
It	O	O
ensures	O	O
that	O	O
the	O	O
user	O	O
'	O	O
s	O	O
health	O	O
does	O	O
not	O	O
exceed	O	O
100	O	O
.	O	O
#	O	O
pre	O	O
To	O	O
ensure	O	O
that	O	O
hitpoints	O	O
do	O	O
not	O	O
drop	O	O
below	O	O
zero	O	O
,	O	O
you	O	O
can	O	O
use	O	O
a	O	O
similar	O	O
function	O	O
:	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
21105403	O	O
I	O	O
'	O	O
ve	O	O
written	O	O
a	O	O
factory	O	O
to	O	O
produce	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Connection	I-api_mention	I-api_mention
objects	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
validate	O	O
the	O	O
parameters	O	O
passed	O	O
to	O	O
DriverManager	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getConnection	I-api_mention	I-api_mention
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
how	O	O
to	O	O
mock	O	O
a	O	O
static	O	O
method	O	O
.	O	O
I	O	O
'	O	O
m	O	O
using	O	O
JUnit	O	O
4	O	O
and	O	O
Mockito	B-api_mention	B-api_mention
for	O	O
my	O	O
test	O	O
cases	O	O
.	O	O
Is	O	O
there	O	O
a	O	O
good	O	O
way	O	O
to	O	O
mock	O	O
/	O	O
verify	O	O
this	O	O
specific	O	O
use	O	O
-	O	O
case	O	O
?	O	O
Question	O	O
-	O	O
29922296	O	O
,	O	O
answer	O	O
-	O	O
29923793	O	O
I	O	O
think	O	O
the	O	O
shortest	O	O
code	O	O
to	O	O
get	O	O
a	O	O
Stream	B-api_mention	B-api_mention
of	O	O
enum	O	O
constants	O	O
is	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
It	O	O
'	O	O
s	O	O
not	O	O
as	O	O
nice	O	O
as	O	O
Letter	O	B-api_mention
.	B-api_mention	I-api_mention
values	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
that	O	O
'	O	O
s	O	O
an	O	O
issue	O	O
with	O	O
arrays	O	O
,	O	O
not	O	O
specifically	O	O
enums	O	O
.	O	O
#	O	O
blockquote	O	O
You	O	O
are	O	O
right	O	O
that	O	O
the	O	O
nicest	O	O
possible	O	O
call	O	O
would	O	O
be	O	O
Letter	O	B-api_mention
.	B-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Unfortunately	O	O
a	O	O
class	O	O
cannot	O	O
have	O	O
two	O	O
methods	O	O
with	O	O
the	O	O
same	O	O
signature	O	O
,	O	O
so	O	O
it	O	O
would	O	O
not	O	O
be	O	O
possible	O	O
to	O	O
implicitly	O	O
add	O	O
a	O	O
static	O	O
method	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
every	O	O
enum	O	O
(	O	O
in	O	O
the	O	O
same	O	O
way	O	O
that	O	O
every	O	O
enum	O	O
has	O	O
an	O	O
implicitly	O	O
added	O	O
static	O	O
method	O	O
values	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
as	O	O
this	O	O
would	O	O
break	O	O
every	O	O
existing	O	O
enum	O	O
that	O	O
already	O	O
has	O	O
a	O	O
static	O	O
or	O	O
instance	O	O
method	O	O
without	O	O
parameters	O	O
called	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
blockquote	O	O
I	O	O
think	O	O
so	O	O
.	O	O
The	O	O
drawback	O	O
is	O	O
that	O	O
stream	O	O
is	O	O
a	O	O
static	O	O
method	O	O
,	O	O
so	O	O
there	O	O
is	O	O
no	O	O
way	O	O
to	O	O
avoid	O	O
code	O	O
duplication	O	O
;	O	O
it	O	O
would	O	O
have	O	O
to	O	O
be	O	O
added	O	O
to	O	O
every	O	O
enum	O	O
separately	O	O
.	O	O
Question	O	O
-	O	O
18777989	O	O
,	O	O
answer	O	O
-	O	O
37905386	O	O
Many	O	O
junior	O	O
developers	O	O
make	O	O
the	O	O
mistake	O	O
of	O	O
thinking	O	O
of	O	O
interfaces	O	O
,	O	O
abstract	O	O
and	O	O
concrete	O	O
classes	O	O
as	O	O
slight	O	O
variations	O	O
of	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
and	O	O
choose	O	O
one	O	O
of	O	O
them	O	O
purely	O	O
on	O	O
technical	O	O
grounds	O	O
:	O	O
Do	O	O
I	O	O
need	O	O
multiple	O	O
inheritance	O	O
?	O	O
Do	O	O
I	O	O
need	O	O
some	O	O
place	O	O
to	O	O
put	O	O
common	O	O
methods	O	O
?	O	O
Do	O	O
I	O	O
need	O	O
to	O	O
bother	O	O
with	O	O
something	O	O
other	O	O
than	O	O
just	O	O
a	O	O
concrete	O	O
class	O	O
?	O	O
This	O	O
is	O	O
wrong	O	O
,	O	O
and	O	O
hidden	O	O
in	O	O
these	O	O
questions	O	O
is	O	O
the	O	O
main	O	O
problem	O	O
:	O	O
"	O	O
I	O	O
"	O	O
.	O	O
When	O	O
you	O	O
write	O	O
code	O	O
for	O	O
yourself	O	O
,	O	O
by	O	O
yourself	O	O
,	O	O
you	O	O
rarely	O	O
think	O	O
of	O	O
other	O	O
present	O	O
or	O	O
future	O	O
developers	O	O
working	O	O
on	O	O
or	O	O
with	O	O
your	O	O
code	O	O
.	O	O
Interfaces	O	O
and	O	O
abstract	O	O
classes	O	O
,	O	O
although	O	O
apparently	O	O
similar	O	O
from	O	O
a	O	O
technical	O	O
point	O	O
of	O	O
view	O	O
,	O	O
have	O	O
completely	O	O
different	O	O
meanings	O	O
and	O	O
purposes	O	O
.	O	O
Summary	O	O
#	O	O
li	O	O
An	O	O
interface	O	O
defines	O	O
a	O	O
contract	O	O
that	O	O
some	O	O
implementation	O	O
will	O	O
fulfill	O	O
for	O	O
you	O	O
.	O	O
#	O	O
li	O	O
An	O	O
abstract	O	O
class	O	O
provides	O	O
a	O	O
default	O	O
behavior	O	O
that	O	O
your	O	O
implementation	O	O
can	O	O
reuse	O	O
.	O	O
These	O	O
two	O	O
points	O	O
above	O	O
is	O	O
what	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
when	O	O
interviewing	O	O
,	O	O
and	O	O
is	O	O
a	O	O
compact	O	O
enough	O	O
summary	O	O
.	O	O
Read	O	O
on	O	O
for	O	O
more	O	O
details	O	O
.	O	O
Alternative	O	O
summary	O	O
#	O	O
li	O	O
An	O	O
interface	O	O
is	O	O
for	O	O
defining	O	O
public	O	O
APIs	O	O
#	O	O
li	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
for	O	O
internal	O	O
use	O	O
,	O	O
and	O	O
for	O	O
defining	O	O
SPIs	O	O
By	O	O
example	O	O
To	O	O
put	O	O
it	O	O
differently	O	O
:	O	O
A	O	O
concrete	O	O
class	O	O
does	O	O
the	O	O
actual	O	O
work	O	O
,	O	O
in	O	O
a	O	O
very	O	O
specific	O	O
way	O	O
.	O	O
For	O	O
example	O	O
,	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
uses	O	O
a	O	O
contiguous	O	O
area	O	O
of	O	O
memory	O	O
to	O	O
store	O	O
a	O	O
list	O	O
of	O	O
objects	O	O
in	O	O
a	O	O
compact	O	O
manner	O	O
which	O	O
offers	O	O
fast	O	O
random	O	O
access	O	O
,	O	O
iteration	O	O
,	O	O
and	O	O
in	O	O
-	O	O
place	O	O
changes	O	O
,	O	O
but	O	O
is	O	O
terrible	O	O
at	O	O
insertions	O	O
,	O	O
deletions	O	O
,	O	O
and	O	O
occasionally	O	O
even	O	O
additions	O	O
;	O	O
meanwhile	O	O
,	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
uses	O	O
double	O	O
-	O	O
linked	O	O
nodes	O	O
to	O	O
store	O	O
a	O	O
list	O	O
of	O	O
objects	O	O
,	O	O
which	O	O
instead	O	O
offers	O	O
fast	O	O
iteration	O	O
,	O	O
in	O	O
-	O	O
place	O	O
changes	O	O
,	O	O
and	O	O
insertion	O	O
/	O	O
deletion	O	O
/	O	O
addition	O	O
,	O	O
but	O	O
is	O	O
terrible	O	O
at	O	O
random	O	O
access	O	O
.	O	O
These	O	O
two	O	O
types	O	O
of	O	O
lists	O	O
are	O	O
optimized	O	O
for	O	O
different	O	O
use	O	O
cases	O	O
,	O	O
and	O	O
it	O	O
matters	O	O
a	O	O
lot	O	O
how	O	O
you	O	O
'	O	O
re	O	O
going	O	O
to	O	O
use	O	O
them	O	O
.	O	O
When	O	O
you	O	O
'	O	O
re	O	O
trying	O	O
to	O	O
squeeze	O	O
performance	O	O
out	O	O
of	O	O
a	O	O
list	O	O
that	O	O
you	O	O
'	O	O
re	O	O
heavily	O	O
interacting	O	O
with	O	O
,	O	O
and	O	O
when	O	O
picking	O	O
the	O	O
type	O	O
of	O	O
list	O	O
is	O	O
up	O	O
to	O	O
you	O	O
,	O	O
you	O	O
should	O	O
carefully	O	O
pick	O	O
which	O	O
one	O	O
you	O	O
'	O	O
re	O	O
instantiating	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
high	O	O
level	O	O
users	O	O
of	O	O
a	O	O
list	O	O
don	O	O
'	O	O
t	O	O
really	O	O
care	O	O
how	O	O
it	O	O
is	O	O
actually	O	O
implemented	O	O
,	O	O
and	O	O
they	O	O
should	O	O
be	O	O
insulated	O	O
from	O	O
these	O	O
details	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
imagine	O	O
that	O	O
Java	O	O
didn	O	O
'	O	O
t	O	O
expose	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
,	O	O
but	O	O
only	O	O
had	O	O
a	O	O
concrete	O	O
List	B-api_mention	B-api_mention
class	O	O
that	O	O
'	O	O
s	O	O
actually	O	O
what	O	O
LinkedList	B-api_mention	B-api_mention
is	O	O
right	O	O
now	O	O
.	O	O
All	O	O
Java	O	O
developers	O	O
would	O	O
have	O	O
tailored	O	O
their	O	O
code	O	O
to	O	O
fit	O	O
the	O	O
implementation	O	O
details	O	O
:	O	O
avoid	O	O
random	O	O
access	O	O
,	O	O
add	O	O
a	O	O
cache	O	O
to	O	O
speed	O	O
up	O	O
access	O	O
,	O	O
or	O	O
just	O	O
reimplement	O	O
ArrayList	B-api_mention	B-api_mention
on	O	O
their	O	O
own	O	O
,	O	O
although	O	O
it	O	O
would	O	O
be	O	O
incompatible	O	O
with	O	O
all	O	O
the	O	O
other	O	O
code	O	O
that	O	O
actually	O	O
works	O	O
with	O	O
List	B-api_mention	B-api_mention
only	O	O
.	O	O
That	O	O
would	O	O
be	O	O
terrible	O	O
.	O	O
.	O	O
.	O	O
But	O	O
now	O	O
imagine	O	O
that	O	O
the	O	O
Java	O	O
masters	O	O
actually	O	O
realize	O	O
that	O	O
a	O	O
linked	O	O
list	O	O
is	O	O
terrible	O	O
for	O	O
most	O	O
actual	O	O
use	O	O
cases	O	O
,	O	O
and	O	O
decided	O	O
to	O	O
switch	O	O
over	O	O
to	O	O
an	O	O
array	O	O
list	O	O
for	O	O
their	O	O
only	O	O
List	B-api_mention	B-api_mention
class	O	O
available	O	O
.	O	O
This	O	O
would	O	O
affect	O	O
the	O	O
performance	O	O
of	O	O
every	O	O
Java	O	O
program	O	O
in	O	O
the	O	O
world	O	O
,	O	O
and	O	O
people	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
happy	O	O
about	O	O
it	O	O
.	O	O
And	O	O
the	O	O
main	O	O
culprit	O	O
is	O	O
that	O	O
implementation	O	O
details	O	O
were	O	O
available	O	O
,	O	O
and	O	O
the	O	O
developers	O	O
assumed	O	O
that	O	O
those	O	O
details	O	O
are	O	O
a	O	O
permanent	O	O
contract	O	O
that	O	O
they	O	O
can	O	O
rely	O	O
on	O	O
.	O	O
This	O	O
is	O	O
why	O	O
it	O	O
'	O	O
s	O	O
important	O	O
to	O	O
hide	O	O
implementation	O	O
details	O	O
,	O	O
and	O	O
only	O	O
define	O	O
an	O	O
abstract	O	O
contract	O	O
.	O	O
This	O	O
is	O	O
the	O	O
purpose	O	O
of	O	O
an	O	O
interface	O	O
:	O	O
define	O	O
what	O	O
kind	O	O
of	O	O
input	O	O
a	O	O
method	O	O
accepts	O	O
,	O	O
and	O	O
what	O	O
kind	O	O
of	O	O
output	O	O
is	O	O
expected	O	O
,	O	O
without	O	O
exposing	O	O
all	O	O
the	O	O
guts	O	O
that	O	O
would	O	O
tempt	O	O
programmers	O	O
to	O	O
tweak	O	O
their	O	O
code	O	O
to	O	O
fit	O	O
the	O	O
internal	O	O
details	O	O
that	O	O
might	O	O
change	O	O
with	O	O
any	O	O
future	O	O
update	O	O
.	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
in	O	O
the	O	O
middle	O	O
between	O	O
interfaces	O	O
and	O	O
concrete	O	O
classes	O	O
.	O	O
It	O	O
is	O	O
supposed	O	O
to	O	O
help	O	O
implementations	O	O
share	O	O
common	O	O
or	O	O
boring	O	O
code	O	O
.	O	O
For	O	O
example	O	O
,	O	O
AbstractCollection	B-api_mention	B-api_mention
provides	O	O
basic	O	O
implementations	O	O
for	O	O
isEmpty	B-api_mention	B-api_mention
based	O	O
on	O	O
size	O	O
is	O	O
0	O	O
,	O	O
contains	B-api_mention	O
as	O	O
iterate	O	O
and	O	O
compare	O	O
,	O	O
addAll	B-api_mention	O
as	O	O
repeated	O	O
add	B-api_mention	O
,	O	O
and	O	O
so	O	O
on	O	O
.	O	O
This	O	O
lets	O	O
implementations	O	O
focus	O	O
on	O	O
the	O	O
crucial	O	O
parts	O	O
that	O	O
differentiate	O	O
between	O	O
them	O	O
:	O	O
how	O	O
to	O	O
actually	O	O
store	O	O
and	O	O
retrieve	O	O
data	O	O
.	O	O
Another	O	O
perspective	O	O
:	O	O
APIs	O	O
versus	O	O
SPIs	O	O
Interfaces	O	O
are	O	O
low	O	O
-	O	O
cohesion	O	O
gateways	O	O
between	O	O
different	O	O
parts	O	O
of	O	O
code	O	O
.	O	O
They	O	O
allow	O	O
libraries	O	O
to	O	O
exist	O	O
and	O	O
evolve	O	O
without	O	O
breaking	O	O
every	O	O
library	O	O
user	O	O
when	O	O
something	O	O
changes	O	O
internally	O	O
.	O	O
It	O	O
'	O	O
s	O	O
called	O	O
Application	O	O
Programming	O	O
Interface	O	O
Abstract	O	O
classes	O	O
are	O	O
high	O	O
-	O	O
cohesion	O	O
helpers	O	O
to	O	O
be	O	O
used	O	O
when	O	O
implementing	O	O
an	O	O
interface	O	O
,	O	O
assuming	O	O
some	O	O
level	O	O
of	O	O
implementation	O	O
details	O	O
.	O	O
Alternatively	O	O
,	O	O
abstract	O	O
classes	O	O
are	O	O
used	O	O
for	O	O
defining	O	O
SPIs	O	O
,	O	O
Service	O	O
Provider	O	O
Interfaces	O	O
.	O	O
The	O	O
difference	O	O
between	O	O
an	O	O
API	O	O
and	O	O
an	O	O
SPI	O	O
is	O	O
subtle	O	O
,	O	O
but	O	O
important	O	O
:	O	O
for	O	O
an	O	O
API	O	O
,	O	O
the	O	O
focus	O	O
is	O	O
on	O	O
who	O	O
uses	O	O
it	O	O
,	O	O
and	O	O
for	O	O
an	O	O
SPI	O	O
the	O	O
focus	O	O
is	O	O
on	O	O
who	O	O
implements	O	O
it	O	O
.	O	O
Adding	O	O
methods	O	O
to	O	O
an	O	O
API	O	O
is	O	O
easy	O	O
,	O	O
all	O	O
existing	O	O
users	O	O
of	O	O
the	O	O
API	O	O
will	O	O
still	O	O
compile	O	O
.	O	O
Adding	O	O
methods	O	O
to	O	O
an	O	O
SPI	O	O
is	O	O
hard	O	O
,	O	O
since	O	O
every	O	O
service	O	O
provider	O	O
(	O	O
concrete	O	O
implementation	O	O
)	O	O
will	O	O
have	O	O
to	O	O
implement	O	O
the	O	O
new	O	O
methods	O	O
.	O	O
If	O	O
interfaces	O	O
are	O	O
used	O	O
to	O	O
define	O	O
an	O	O
SPI	O	O
,	O	O
a	O	O
provider	O	O
will	O	O
have	O	O
to	O	O
release	O	O
a	O	O
new	O	O
version	O	O
whenever	O	O
the	O	O
SPI	O	O
contract	O	O
changes	O	O
.	O	O
If	O	O
abstract	O	O
classes	O	O
are	O	O
used	O	O
instead	O	O
,	O	O
new	O	O
methods	O	O
could	O	O
either	O	O
be	O	O
defined	O	O
in	O	O
terms	O	O
of	O	O
existing	O	O
abstract	O	O
methods	O	O
,	O	O
or	O	O
as	O	O
empty	O	O
throw	O	O
not	O	O
implemented	O	O
exception	O	O
stubs	O	O
,	O	O
which	O	O
will	O	O
at	O	O
least	O	O
allow	O	O
an	O	O
older	O	O
version	O	O
of	O	O
a	O	O
service	O	O
implementation	O	O
to	O	O
still	O	O
compile	O	O
and	O	O
run	O	O
.	O	O
A	O	O
note	O	O
on	O	O
Java	O	O
8	O	O
and	O	O
default	O	O
methods	O	O
Although	O	O
Java	O	O
8	O	O
introduced	O	O
default	O	O
methods	O	O
for	O	O
interfaces	O	O
,	O	O
which	O	O
makes	O	O
the	O	O
line	O	O
between	O	O
interfaces	O	O
and	O	O
abstract	O	O
classes	O	O
even	O	O
blurrier	O	O
,	O	O
this	O	O
wasn	O	O
'	O	O
t	O	O
so	O	O
that	O	O
implementations	O	O
can	O	O
reuse	O	O
code	O	O
,	O	O
but	O	O
to	O	O
make	O	O
it	O	O
easier	O	O
to	O	O
change	O	O
interfaces	O	O
that	O	O
serve	O	O
both	O	O
as	O	O
an	O	O
API	O	O
and	O	O
as	O	O
an	O	O
SPI	O	O
(	O	O
or	O	O
are	O	O
wrongly	O	O
used	O	O
for	O	O
defining	O	O
SPIs	O	O
instead	O	O
of	O	O
abstract	O	O
classes	O	O
)	O	O
.	O	O
"	O	O
Book	O	O
knowledge	O	O
"	O	O
The	O	O
technical	O	O
details	O	O
provided	O	O
in	O	O
the	O	O
OP	O	O
'	O	O
s	O	O
answer	O	O
are	O	O
considered	O	O
"	O	O
book	O	O
knowledge	O	O
"	O	O
because	O	O
this	O	O
is	O	O
usually	O	O
the	O	O
approach	O	O
used	O	O
in	O	O
school	O	O
and	O	O
in	O	O
most	O	O
technology	O	O
books	O	O
about	O	O
a	O	O
language	O	O
:	O	O
what	O	O
a	O	O
thing	O	O
is	O	O
,	O	O
not	O	O
how	O	O
to	O	O
use	O	O
it	O	O
in	O	O
practice	O	O
,	O	O
especially	O	O
in	O	O
large	O	O
scale	O	O
applications	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
an	O	O
analogy	O	O
:	O	O
supposed	O	O
the	O	O
question	O	O
was	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
technical	O	O
answer	O	O
sounds	O	O
like	O	O
:	O	O
#	O	O
blockquote	O	O
That	O	O
is	O	O
all	O	O
true	O	O
,	O	O
but	O	O
completely	O	O
misses	O	O
the	O	O
points	O	O
that	O	O
they	O	O
are	O	O
two	O	O
completely	O	O
different	O	O
things	O	O
,	O	O
and	O	O
both	O	O
can	O	O
be	O	O
used	O	O
at	O	O
the	O	O
same	O	O
time	O	O
for	O	O
different	O	O
purposes	O	O
,	O	O
and	O	O
the	O	O
"	O	O
doing	O	O
it	O	O
"	O	O
aspect	O	O
is	O	O
not	O	O
the	O	O
most	O	O
important	O	O
thing	O	O
about	O	O
either	O	O
of	O	O
the	O	O
two	O	O
options	O	O
.	O	O
The	O	O
answer	O	O
lacks	O	O
perspective	O	O
,	O	O
it	O	O
shows	O	O
an	O	O
immature	O	O
way	O	O
of	O	O
thinking	O	O
,	O	O
while	O	O
correctly	O	O
presenting	O	O
true	O	O
"	O	O
facts	O	O
"	O	O
.	O	O
Question	O	O
-	O	O
27482579	O	O
How	O	O
is	O	O
the	O	O
compiler	O	O
not	O	O
complaining	O	O
when	O	O
I	O	O
write	O	O
the	O	O
following	O	O
code	O	O
?	O	O
#	O	O
pre	O	O
Even	O	O
though	O	O
it	O	O
is	O	O
an	O	O
instance	O	O
of	O	O
the	O	O
same	O	O
class	O	O
in	O	O
which	O	O
testPrivate	O	O
is	O	O
written	O	O
,	O	O
shouldn	O	O
'	O	O
t	O	O
it	O	O
give	O	O
a	O	O
compilation	O	O
error	O	O
at	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
After	O	O
all	O	O
,	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
access	O	O
a	O	O
private	O	O
variable	O	O
directly	O	O
.	O	O
The	O	O
code	O	O
even	O	O
runs	O	O
fine	O	O
.	O	O
Question	O	O
-	O	O
32859038	O	O
,	O	O
answer	O	O
-	O	O
32918035	O	O
Eran	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
usually	O	O
the	O	O
best	O	O
approach	O	O
for	O	O
random	O	O
-	O	O
access	O	O
lists	O	O
.	O	O
If	O	O
your	O	O
List	B-api_mention	B-api_mention
isn	O	O
'	O	O
t	O	O
random	O	O
access	O	O
,	O	O
or	O	O
if	O	O
you	O	O
have	O	O
a	O	O
Stream	B-api_mention	B-api_mention
instead	O	O
of	O	O
a	O	O
List	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
use	O	O
forEachOrdered	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
safe	O	O
,	O	O
if	O	O
the	O	O
stream	O	O
is	O	O
parallel	O	O
,	O	O
even	O	O
though	O	O
the	O	O
destination	O	O
map	O	O
is	O	O
thread	O	O
-	O	O
unsafe	O	O
and	O	O
is	O	O
operated	O	O
upon	O	O
as	O	O
a	O	O
side	O	O
effect	O	O
.	O	O
The	O	O
forEachOrdered	B-api_mention	B-api_mention
guarantees	O	O
that	O	O
items	O	O
are	O	O
processed	O	O
one	O	O
-	O	O
at	O	O
-	O	O
a	O	O
-	O	O
time	O	O
,	O	O
in	O	O
order	O	O
.	O	O
For	O	O
this	O	O
reason	O	O
it	O	O
'	O	O
s	O	O
unlikely	O	O
that	O	O
any	O	O
speedup	O	O
will	O	O
result	O	O
from	O	O
running	O	O
in	O	O
parallel	O	O
.	O	O
(	O	O
There	O	O
might	O	O
be	O	O
some	O	O
speedup	O	O
if	O	O
there	O	O
are	O	O
expensive	O	O
operations	O	O
in	O	O
the	O	O
pipeline	O	O
before	O	O
the	O	O
forEachOrdered	B-api_mention	B-api_mention
.	O	O
)	O	O
Question	O	O
-	O	O
24547673	O	O
,	O	O
answer	O	O
-	O	O
24547831	O	O
It	O	O
'	O	O
s	O	O
a	O	O
curious	O	O
omission	O	O
.	O	O
You	O	O
would	O	O
have	O	O
to	O	O
mark	O	O
the	O	O
field	O	O
as	O	O
transient	O	O
and	O	O
provide	O	O
your	O	O
own	O	O
custom	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
that	O	O
wrote	O	O
the	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
result	O	O
itself	O	O
,	O	O
and	O	O
a	O	O
readObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
that	O	O
restored	O	O
the	O	O
Optional	B-api_mention	B-api_mention
by	O	O
reading	O	O
that	O	O
result	O	O
from	O	O
the	O	O
stream	O	O
.	O	O
Not	O	O
forgetting	O	O
to	O	O
call	O	O
defaultWriteObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
defaultReadObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
respectively	O	O
.	O	O
Question	O	O
-	O	O
5439529	O	O
,	O	O
answer	O	O
-	O	O
9991624	O	O
You	O	O
can	O	O
use	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
catch	O	O
the	O	O
NumberFormatException	B-api_mention	B-api_mention
if	O	O
the	O	O
string	O	O
is	O	O
not	O	O
a	O	O
valid	O	O
integer	O	O
,	O	O
in	O	O
the	O	O
following	O	O
fashion	O	O
(	O	O
as	O	O
pointed	O	O
out	O	O
by	O	O
all	O	O
answers	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
note	O	O
here	O	O
that	O	O
if	O	O
the	O	O
evaluated	O	O
integer	O	O
overflows	O	O
,	O	O
the	O	O
same	O	O
exception	O	O
will	O	O
be	O	O
thrown	O	O
.	O	O
Your	O	O
purpose	O	O
was	O	O
to	O	O
find	O	O
out	O	O
whether	O	O
or	O	O
not	O	O
,	O	O
it	O	O
was	O	O
a	O	O
valid	O	O
integer	O	O
.	O	O
So	O	O
its	O	O
safer	O	O
to	O	O
make	O	O
your	O	O
own	O	O
method	O	O
to	O	O
check	O	O
for	O	O
validity	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
18092160	O	O
Why	O	O
were	O	O
181783497276652981	O	O
and	O	O
8682522807148012	O	O
chosen	O	O
in	O	O
Random	O	B-api_mention
.	O	O
java	O	O
?	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
relevant	O	O
source	O	O
code	O	O
from	O	O
Java	O	O
SE	O	O
JDK	O	O
1	O	O
.	O	O
7	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
,	O	O
invoking	O	O
new	O	O
Random	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
without	O	O
any	O	O
seed	O	O
parameter	O	O
takes	O	O
the	O	O
current	O	O
"	O	O
seed	O	O
uniquifier	O	O
"	O	O
and	O	O
XORs	O	O
it	O	O
with	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Then	O	O
it	O	O
uses	O	O
181783497276652981	O	O
to	O	O
create	O	O
another	O	O
seed	O	O
uniquifier	O	O
to	O	O
be	O	O
stored	O	O
for	O	O
the	O	O
next	O	O
time	O	O
new	O	O
Random	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
.	O	O
The	O	O
literals	O	O
181783497276652981L	O	O
and	O	O
8682522807148012L	O	O
are	O	O
not	O	O
placed	O	O
in	O	O
constants	O	O
,	O	O
but	O	O
they	O	O
don	O	O
'	O	O
t	O	O
appear	O	O
anywhere	O	O
else	O	O
.	O	O
At	O	O
first	O	O
the	O	O
comment	O	O
gives	O	O
me	O	O
an	O	O
easy	O	O
lead	O	O
.	O	O
Searching	O	O
online	O	O
for	O	O
that	O	O
article	O	O
yields	O	O
the	O	O
actual	O	O
article	O	O
.	O	O
8682522807148012	O	O
doesn	O	O
'	O	O
t	O	O
appear	O	O
in	O	O
the	O	O
paper	O	O
,	O	O
but	O	O
181783497276652981	O	O
does	O	O
appear	O	O
-	O	O
-	O	O
as	O	O
a	O	O
substring	O	O
of	O	O
another	O	O
number	O	O
,	O	O
1181783497276652981	O	O
,	O	O
which	O	O
is	O	O
181783497276652981	O	O
with	O	O
a	O	O
1	O	O
prepended	O	O
.	O	O
The	O	O
paper	O	O
claims	O	O
that	O	O
1181783497276652981	O	O
is	O	O
a	O	O
number	O	O
that	O	O
yields	O	O
good	O	O
"	O	O
merit	O	O
"	O	O
for	O	O
a	O	O
linear	O	O
congruential	O	O
generator	O	O
.	O	O
Was	O	O
this	O	O
number	O	O
simply	O	O
mis	O	O
-	O	O
copied	O	O
into	O	O
Java	O	O
?	O	O
Does	O	O
181783497276652981	O	O
have	O	O
an	O	O
acceptable	O	O
merit	O	O
?	O	O
And	O	O
why	O	O
was	O	O
8682522807148012	O	O
chosen	O	O
?	O	O
Searching	O	O
online	O	O
for	O	O
either	O	O
number	O	O
yields	O	O
no	O	O
explanation	O	O
,	O	O
only	O	O
this	O	O
page	O	O
that	O	O
also	O	O
notices	O	O
the	O	O
dropped	O	O
1	O	O
in	O	O
front	O	O
of	O	O
181783497276652981	O	O
.	O	O
Could	O	O
other	O	O
numbers	O	O
have	O	O
been	O	O
chosen	O	O
that	O	O
would	O	O
have	O	O
worked	O	O
as	O	O
well	O	O
as	O	O
these	O	O
two	O	O
numbers	O	O
?	O	O
Why	O	O
or	O	O
why	O	O
not	O	O
?	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26826286	O	O
It	O	O
'	O	O
s	O	O
easy	O	O
to	O	O
write	O	O
a	O	O
method	O	O
to	O	O
do	O	O
this	O	O
using	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
regionMatches	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Testing	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
is	O	O
not	O	O
immediately	O	O
obvious	O	O
,	O	O
but	O	O
a	O	O
function	O	O
like	O	O
this	O	O
can	O	O
still	O	O
be	O	O
dependent	O	O
on	O	O
the	O	O
order	O	O
in	O	O
which	O	O
the	O	O
replacements	O	O
are	O	O
specified	O	O
.	O	O
Consider	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
blockquote	O	O
But	O	O
reverse	O	O
the	O	O
replacements	O	O
:	O	O
truth	O	O
+	O	O
=	O	O
StringLiteral	O	O
+	O	O
simultaneousReplace	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
Output	O	O
:	O	O
#	O	O
blockquote	O	O
Oops	O	O
!	O	O
:	O	O
)	O	O
Therefore	O	O
it	O	O
is	O	O
sometimes	O	O
useful	O	O
to	O	O
make	O	O
sure	O	O
to	O	O
look	O	O
for	O	O
the	O	O
longest	O	O
match	O	O
(	O	O
as	O	O
PHP	O	O
'	O	O
s	O	O
strtr	O	O
function	O	O
does	O	O
,	O	O
for	O	O
example	O	O
)	O	O
.	O	O
This	O	O
version	O	O
of	O	O
the	O	O
method	O	O
will	O	O
do	O	O
that	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
the	O	O
above	O	O
methods	O	O
are	O	O
case	O	O
-	O	O
sensitive	O	O
.	O	O
If	O	O
you	O	O
need	O	O
a	O	O
case	O	O
-	O	O
insensitive	O	O
version	O	O
it	O	O
is	O	O
easy	O	O
to	O	O
modify	O	O
the	O	O
above	O	O
because	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
regionMatches	I-api_mention	I-api_mention
can	O	O
take	O	O
an	O	O
ignoreCase	B-api_mention	O
parameter	O	O
.	O	O
Question	O	O
-	O	O
14636178	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
use	O	O
the	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
springframework	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orm	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
jdo	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
TransactionAwarePersistenceManagerFactoryProxy	I-api_mention	I-api_mention
in	O	O
my	O	O
Spring	O	O
project	O	O
,	O	O
but	O	O
I	O	O
am	O	O
not	O	O
sure	O	O
how	O	O
to	O	O
use	O	O
it	O	O
or	O	O
whether	O	O
it	O	O
'	O	O
s	O	O
exactly	O	O
what	O	O
I	O	O
am	O	O
looking	O	O
for	O	O
.	O	O
I	O	O
realize	O	O
it	O	O
can	O	O
help	O	O
make	O	O
my	O	O
DAOs	O	O
work	O	O
with	O	O
a	O	O
plain	O	O
JDO	O	O
PersistenceManagerFactory	B-api_mention	O
.	O	O
Another	O	O
question	O	O
is	O	O
:	O	O
what	O	O
happens	O	O
if	O	O
the	O	O
proxy	O	O
doesn	O	O
'	O	O
t	O	O
get	O	O
made	O	O
properly	O	O
?	O	O
Can	O	O
I	O	O
still	O	O
use	O	O
it	O	O
to	O	O
access	O	O
my	O	O
factory	O	O
to	O	O
create	O	O
a	O	O
transaction	O	O
aware	O	O
persistence	O	O
manager	O	O
?	O	O
If	O	O
the	O	O
object	O	O
managed	O	O
by	O	O
the	O	O
factory	O	O
is	O	O
a	O	O
singleton	O	O
,	O	O
does	O	O
this	O	O
change	O	O
things	O	O
?	O	O
Why	O	O
not	O	O
just	O	O
access	O	O
the	O	O
PersistenceManagerFactory	B-api_mention	B-api_mention
directly	O	O
?	O	O
Perhaps	O	O
PersistenceManagerFactoryUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getPersistenceManager	I-api_mention	I-api_mention
would	O	O
be	O	O
more	O	O
suited	O	O
to	O	O
my	O	O
needs	O	O
?	O	O
Can	O	O
getObject	B-api_mention	B-api_mention
return	O	O
null	O	O
?	O	O
Question	O	O
-	O	O
27683759	O	O
,	O	O
answer	O	O
-	O	O
27684042	O	O
In	O	O
a	O	O
nutshell	O	O
,	O	O
this	O	O
creates	O	O
an	O	O
empty	O	O
,	O	O
immutable	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
look	O	O
at	O	O
the	O	O
expression	O	O
bit	O	O
by	O	O
bit	O	O
.	O	O
Collections	B-api_mention	O
is	O	O
the	O	O
name	O	O
of	O	O
a	O	O
class	O	O
.	O	O
From	O	O
the	O	O
Javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
emptyList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
name	O	O
of	O	O
a	O	O
static	O	O
method	O	O
defined	O	O
in	O	O
the	O	O
Collections	B-api_mention	B-api_mention
class	O	O
(	O	O
Javadoc	O	O
)	O	O
.	O	O
It	O	O
is	O	O
a	O	O
generic	O	O
method	O	O
,	O	O
and	O	O
the	O	O
<	O	O
String	B-api_mention	B-api_mention
>	O	O
in	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
emptyList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
specifies	O	O
the	O	O
generic	O	O
type	O	O
argument	O	O
.	O	O
The	O	O
method	O	O
returns	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
in	O	O
this	O	O
case	O	O
is	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
:	O	O
a	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
More	O	O
specifically	O	O
,	O	O
it	O	O
returns	O	O
an	O	O
empty	O	O
,	O	O
immutable	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
Question	O	O
-	O	O
4709175	O	O
,	O	O
answer	O	O
-	O	O
4709892	O	O
Something	O	O
none	O	O
of	O	O
the	O	O
other	O	O
answers	O	O
have	O	O
covered	O	O
that	O	O
make	O	O
enums	O	O
particularly	O	O
powerful	O	O
are	O	O
the	O	O
ability	O	O
to	O	O
have	O	O
template	O	O
methods	O	O
.	O	O
Methods	O	O
can	O	O
be	O	O
part	O	O
of	O	O
the	O	O
base	O	O
enum	O	O
and	O	O
overridden	O	O
by	O	O
each	O	O
type	O	O
.	O	O
And	O	O
,	O	O
with	O	O
the	O	O
behavior	O	O
attached	O	O
to	O	O
the	O	O
enum	O	O
,	O	O
it	O	O
often	O	O
eliminates	O	O
the	O	O
need	O	O
for	O	O
if	O	O
-	O	O
else	O	O
constructs	O	O
or	O	O
switch	O	O
statements	O	O
as	O	O
this	O	O
blog	O	O
post	O	O
demonstrates	O	O
-	O	O
where	O	O
enum	O	O
.	O	B-api_mention
method	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
does	O	O
what	O	O
originally	O	O
would	O	O
be	O	O
executed	O	O
inside	O	O
the	O	O
conditional	O	O
.	O	O
The	O	O
same	O	O
example	O	O
also	O	O
shows	O	O
the	O	O
use	O	O
of	O	O
static	O	O
imports	O	O
with	O	O
enums	O	O
as	O	O
well	O	O
producing	O	O
much	O	O
cleaner	O	O
DSL	O	O
like	O	O
code	O	O
.	O	O
Some	O	O
other	O	O
interesting	O	O
qualities	O	O
include	O	O
the	O	O
fact	O	O
that	O	O
enums	O	O
provide	O	O
implementation	O	O
for	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
implement	O	O
Serializable	B-api_mention	B-api_mention
and	O	O
Comparable	B-api_mention	B-api_mention
.	O	O
For	O	O
a	O	O
complete	O	O
rundown	O	O
of	O	O
all	O	O
that	O	O
enums	O	O
have	O	O
to	O	O
offer	O	O
I	O	O
highly	O	O
recommend	O	O
Bruce	O	O
Eckel	O	O
'	O	O
s	O	O
Thinking	O	O
in	O	O
Java	O	O
4th	O	O
edition	O	O
which	O	O
devotes	O	O
an	O	O
entire	O	O
chapter	O	O
to	O	O
the	O	O
topic	O	O
.	O	O
Particularly	O	O
illuminating	O	O
are	O	O
the	O	O
examples	O	O
involving	O	O
a	O	O
Rock	O	O
,	O	O
Paper	O	B-api_mention
,	O	O
Scissors	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
RoShamBo	O	O
)	O	O
game	O	O
as	O	O
enums	O	O
.	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
20358917	O	O
Very	O	O
simply	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
5175728	O	O
,	O	O
answer	O	O
-	O	O
5175900	O	O
It	O	O
depends	O	O
on	O	O
what	O	O
form	O	O
of	O	O
date	O	O
/	O	O
time	O	O
you	O	O
want	O	O
:	O	O
#	O	O
li	O	O
If	O	O
you	O	O
want	O	O
the	O	O
date	O	O
/	O	O
time	O	O
as	O	O
a	O	O
single	O	O
numeric	O	O
value	O	O
,	O	O
then	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
that	O	O
,	O	O
expressed	O	O
as	O	O
the	O	O
number	O	O
of	O	O
milliseconds	O	O
after	O	O
the	O	O
UNIX	O	O
epoch	O	O
(	O	O
as	O	O
a	O	O
Java	O	O
long	O	O
)	O	O
.	O	O
This	O	O
value	O	O
is	O	O
a	O	O
delta	O	O
from	O	O
a	O	O
UTC	O	O
time	O	O
-	O	O
point	O	O
,	O	O
and	O	O
is	O	O
independent	O	O
of	O	O
the	O	O
local	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
.	O	O
.	O	O
assuming	O	O
that	O	O
the	O	O
system	O	O
clock	O	O
has	O	O
been	O	O
set	O	O
correctly	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
want	O	O
the	O	O
date	O	O
/	O	O
time	O	O
in	O	O
a	O	O
form	O	O
that	O	O
allows	O	O
you	O	O
to	O	O
access	O	O
the	O	O
components	O	O
(	O	O
year	O	O
,	O	O
month	O	O
,	O	O
etc	O	O
)	O	O
numerically	O	O
,	O	O
you	O	O
could	O	O
use	O	O
one	O	O
of	O	O
the	O	O
following	O	O
:	O	O
#	O	O
li	O	O
new	O	O
Date	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
a	O	O
Date	B-api_mention	B-api_mention
object	O	O
initialized	O	O
with	O	O
the	O	O
current	O	O
date	O	O
/	O	O
time	O	O
.	O	O
The	O	O
problem	O	O
is	O	O
that	O	O
the	O	O
Date	B-api_mention	B-api_mention
API	O	O
methods	O	O
are	O	O
mostly	O	O
flawed	O	O
.	O	O
.	O	O
.	O	O
and	O	O
deprecated	O	O
.	O	O
#	O	O
li	O	O
Calendar	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
a	O	O
Calendar	B-api_mention	B-api_mention
object	O	O
initialized	O	O
with	O	O
the	O	O
current	O	O
date	O	O
/	O	O
time	O	O
,	O	O
using	O	O
the	O	O
default	O	O
Locale	B-api_mention	B-api_mention
and	O	O
TimeZone	B-api_mention	O
.	O	O
Other	O	O
overloads	O	O
allow	O	O
you	O	O
to	O	O
use	O	O
a	O	O
specific	O	O
Locale	B-api_mention	B-api_mention
and	O	O
/	O	O
or	O	O
TimeZone	B-api_mention	B-api_mention
.	O	O
Calendar	B-api_mention	O
works	O	O
.	O	O
.	O	O
.	O	O
but	O	O
the	O	O
APIs	O	O
are	O	O
still	O	O
cumbersome	O	O
.	O	O
#	O	O
li	O	O
new	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
joda	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
DateTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
a	O	O
Joda	O	O
-	O	O
time	O	O
object	O	O
initialized	O	O
with	O	O
the	O	O
current	O	O
date	O	O
/	O	O
time	O	O
,	O	O
using	O	O
the	O	O
default	O	O
time	O	O
zone	O	O
and	O	O
chronology	O	O
.	O	O
There	O	O
are	O	O
lots	O	O
of	O	O
other	O	O
Joda	O	O
alternatives	O	O
.	O	O
.	O	O
.	O	O
too	O	O
many	O	O
to	O	O
describe	O	O
here	O	O
.	O	O
#	O	O
li	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
calling	O	O
LocalDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
now	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
ZonedDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
now	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
give	O	O
you	O	O
representations	O	O
for	O	O
the	O	O
current	O	O
date	O	O
/	O	O
time	O	O
.	O	O
Prior	O	O
to	O	O
Java	O	O
8	O	O
,	O	O
most	O	O
people	O	O
who	O	O
know	O	O
about	O	O
these	O	O
things	O	O
recommended	O	O
Joda	O	O
-	O	O
time	O	O
as	O	O
having	O	O
(	O	O
by	O	O
far	O	O
)	O	O
the	O	O
best	O	O
Java	O	O
APIs	O	O
for	O	O
doing	O	O
things	O	O
involving	O	O
time	O	O
point	O	O
and	O	O
duration	O	O
calculations	O	O
.	O	O
With	O	O
Java	O	O
8	O	O
,	O	O
this	O	O
is	O	O
no	O	O
longer	O	O
true	O	O
.	O	O
However	O	O
,	O	O
if	O	O
you	O	O
are	O	O
already	O	O
using	O	O
Joda	O	O
time	O	O
in	O	O
your	O	O
codebase	O	O
,	O	O
there	O	O
is	O	O
no	O	O
strong	O	O
reason	O	O
to	O	O
migrate	O	O
.	O	O
Question	O	O
-	O	O
24630963	O	O
,	O	O
answer	O	O
-	O	O
32648397	O	O
I	O	O
wrote	O	O
a	O	O
Collector	B-api_mention	B-api_mention
which	O	O
,	O	O
unlike	O	O
the	O	O
default	O	O
java	O	O
one	O	O
,	O	O
does	O	O
not	O	O
crash	O	O
when	O	O
you	O	O
have	O	O
null	O	O
values	O	O
:	O	O
#	O	O
pre	O	O
Just	O	O
replace	O	O
your	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
to	O	O
a	O	O
call	O	O
to	O	O
this	O	O
function	O	O
and	O	O
it	O	O
'	O	O
ll	O	O
fix	O	O
the	O	O
problem	O	O
.	O	O
Question	O	O
-	O	O
22561614	O	O
Note	O	O
:	O	O
this	O	O
question	O	O
originates	O	O
from	O	O
a	O	O
dead	O	O
link	O	O
which	O	O
was	O	O
a	O	O
previous	O	O
SO	O	O
question	O	O
,	O	O
but	O	O
here	O	O
goes	O	O
.	O	O
.	O	O
.	O	O
See	O	O
this	O	O
code	O	O
(	O	O
note	O	O
:	O	O
I	O	O
do	O	O
know	O	O
that	O	O
this	O	O
code	O	O
won	O	O
'	O	O
t	O	O
"	O	O
work	O	O
"	O	O
and	O	O
that	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
compare	I-api_mention	I-api_mention
should	O	O
be	O	O
used	O	O
-	O	O
-	O	O
I	O	O
just	O	O
extracted	O	O
it	O	O
from	O	O
the	O	O
linked	O	O
question	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
According	O	O
to	O	O
the	O	O
javadoc	O	O
of	O	O
.	B-api_mention	B-api_mention
min	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
.	B-api_mention	B-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
the	O	O
argument	O	O
of	O	O
both	O	O
should	O	O
be	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
.	O	O
Yet	O	O
here	O	O
the	O	O
method	O	O
references	O	O
are	O	O
to	O	O
static	O	O
methods	O	O
of	O	O
the	O	O
Integer	B-api_mention	B-api_mention
class	O	O
.	O	O
So	O	O
,	O	O
why	O	O
does	O	O
this	O	O
compile	O	O
at	O	O
all	O	O
?	O	O
Question	O	O
-	O	O
29140402	O	O
,	O	O
answer	O	O
-	O	O
29141638	O	O
Every	O	O
class	O	O
in	O	O
java	O	O
has	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
it	O	O
by	O	O
default	O	O
,	O	O
which	O	O
is	O	O
called	O	O
by	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
pass	O	O
some	O	O
object	O	O
of	O	O
a	O	O
class	O	O
to	O	O
it	O	O
.	O	O
When	O	O
you	O	O
try	O	O
to	O	O
print	O	O
object	O	O
of	O	O
a	O	O
class	O	O
,	O	O
the	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
will	O	O
call	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
the	O	O
class	O	O
which	O	O
returns	O	O
the	O	O
className	O	O
@	O	O
hashcode	O	O
of	O	O
that	O	O
object	O	O
.	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
override	O	O
the	O	O
toString	B-api_mention	B-api_mention
method	O	O
of	O	O
a	O	O
class	O	O
to	O	O
get	O	O
different	O	O
output	O	O
.	O	O
See	O	O
this	O	O
example	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7438612	O	O
,	O	O
answer	O	O
-	O	O
7438613	O	O
Replace	O	O
will	O	O
replace	O	O
all	O	O
instances	O	O
of	O	O
a	O	O
letter	O	O
.	O	O
All	O	O
you	O	O
need	O	O
to	O	O
do	O	O
is	O	O
use	O	O
substring	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
27949213	O	O
,	O	O
answer	O	O
-	O	O
27950675	O	O
Since	O	O
your	O	O
first	O	O
question	O	O
has	O	O
already	O	O
been	O	O
answered	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
answer	O	O
your	O	O
second	O	O
question	O	O
.	O	O
The	O	O
String	B-api_mention	B-api_mention
objects	O	O
must	O	O
be	O	O
compared	O	O
character	O	O
by	O	O
character	O	O
,	O	O
because	O	O
though	O	O
equal	O	O
Object	B-api_mention	B-api_mention
s	O	O
implies	O	O
equal	O	O
hashes	O	O
,	O	O
the	O	O
inverse	O	O
is	O	O
not	O	O
necessarily	O	O
true	O	O
.	O	O
As	O	O
Holger	O	O
said	O	O
in	O	O
his	O	O
comment	O	O
,	O	O
this	O	O
represents	O	O
a	O	O
hash	O	O
collision	O	O
.	O	O
The	O	O
applicable	O	O
specifications	O	O
for	O	O
the	O	O
hashcode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
are	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
means	O	O
that	O	O
in	O	O
order	O	O
for	O	O
them	O	O
to	O	O
guarantee	O	O
equality	O	O
,	O	O
the	O	O
comparison	O	O
of	O	O
each	O	O
character	O	O
is	O	O
necessary	O	O
in	O	O
order	O	O
for	O	O
them	O	O
to	O	O
confirm	O	O
the	O	O
equality	O	O
of	O	O
the	O	O
two	O	O
objects	O	O
.	O	O
They	O	O
start	O	O
by	O	O
comparing	O	O
hashCode	O	B-api_mention
s	O	O
rather	O	O
than	O	O
using	O	O
equals	O	O
since	O	O
they	O	O
are	O	O
using	O	O
a	O	O
hash	O	O
table	O	O
for	O	O
the	O	O
references	O	O
,	O	O
and	O	O
this	O	O
improves	O	O
performance	O	O
.	O	O
Question	O	O
-	O	O
13744450	O	O
The	O	O
interviewer	O	O
asked	O	O
me	O	O
:	O	O
#	O	O
blockquote	O	O
I	O	O
wasn	O	O
'	O	O
t	O	O
aware	O	O
of	O	O
these	O	O
terms	O	O
.	O	O
So	O	O
,	O	O
when	O	O
I	O	O
came	O	O
back	O	O
to	O	O
home	O	O
,	O	O
then	O	O
I	O	O
started	O	O
looking	O	O
into	O	O
Google	O	O
about	O	O
Observer	B-api_mention	B-api_mention
and	O	O
Observable	B-api_mention	B-api_mention
and	O	O
found	O	O
some	O	O
point	O	O
from	O	O
different	O	O
resources	O	O
:	O	O
#	O	O
blockquote	O	O
I	O	O
found	O	O
this	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
I	O	O
'	O	O
m	O	O
still	O	O
unable	O	O
to	O	O
figure	O	O
out	O	O
why	O	O
do	O	O
we	O	O
need	O	O
Observer	B-api_mention	B-api_mention
and	O	O
Observable	B-api_mention	B-api_mention
?	O	O
What	O	O
are	O	O
the	O	O
setChanged	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
notifyObservers	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
for	O	O
?	O	O
Question	O	O
-	O	O
5374311	O	O
,	O	O
answer	O	O
-	O	O
5374346	O	O
What	O	O
is	O	O
happening	O	O
is	O	O
that	O	O
stock	O	O
_	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
creating	O	O
an	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
rather	O	O
than	O	O
a	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
and	O	O
hence	O	O
the	O	O
typecast	O	O
is	O	O
failing	O	O
.	O	O
The	O	O
correct	O	O
code	O	O
would	O	O
be	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
even	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
more	O	O
details	O	O
,	O	O
refer	O	O
to	O	O
the	O	O
javadocs	O	O
for	O	O
the	O	O
two	O	O
overloads	O	O
of	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
.	O	O
(	O	O
From	O	O
a	O	O
technical	O	O
perspective	O	O
,	O	O
the	O	O
reason	O	O
for	O	O
this	O	O
API	O	O
behaviour	O	O
/	O	O
design	O	O
is	O	O
that	O	O
an	O	O
implementation	O	O
of	O	O
the	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
no	O	O
information	O	O
of	O	O
what	O	O
the	O	O
<	O	O
T	O	O
>	O	O
is	O	O
at	O	O
runtime	O	O
.	O	O
All	O	O
it	O	O
knows	O	O
is	O	O
that	O	O
the	O	O
raw	O	O
element	O	O
type	O	O
is	O	O
Object	B-api_mention	B-api_mention
.	O	O
By	O	O
contrast	O	O
,	O	O
in	O	O
the	O	O
other	O	O
case	O	O
,	O	O
the	O	O
array	O	O
parameter	O	O
gives	O	O
the	O	O
base	O	O
type	O	O
of	O	O
the	O	O
array	O	O
.	O	O
(	O	O
If	O	O
the	O	O
supplied	O	O
array	O	O
is	O	O
big	O	O
enough	O	O
,	O	O
it	O	O
is	O	O
used	O	O
.	O	O
Otherwise	O	O
a	O	O
new	O	O
array	O	O
of	O	O
the	O	O
same	O	O
type	O	O
and	O	O
a	O	O
larger	O	O
size	O	O
will	O	O
be	O	O
allocated	O	O
and	O	O
returned	O	O
as	O	O
the	O	O
result	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
22725537	O	O
,	O	O
answer	O	O
-	O	O
22735184	O	O
You	O	O
cannot	O	O
do	O	O
it	O	O
more	O	O
concise	O	O
as	O	O
you	O	O
are	O	O
already	O	O
doing	O	O
.	O	O
You	O	O
claim	O	O
that	O	O
you	O	O
do	O	O
not	O	O
want	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
has	O	O
been	O	O
resolved	O	O
by	O	O
the	O	O
method	O	O
@	O	O
StuartMarks	O	O
describes	O	O
,	O	O
however	O	O
as	O	O
a	O	O
result	O	O
you	O	O
now	O	O
map	O	O
it	O	O
to	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
so	O	O
now	O	O
you	O	O
need	O	O
to	O	O
use	O	O
.	B-api_mention	B-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
end	O	O
.	O	O
So	O	O
it	O	O
still	O	O
consists	O	O
of	O	O
two	O	O
statements	O	O
and	O	O
you	O	O
can	O	O
now	O	O
get	O	O
exceptions	O	O
with	O	O
the	O	O
new	O	O
method	O	O
!	O	O
Because	O	O
,	O	O
what	O	O
if	O	O
every	O	O
optional	O	O
is	O	O
empty	O	O
?	O	O
Then	O	O
the	O	O
findFirst	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
an	O	O
empty	O	O
optional	O	O
and	O	O
your	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
fail	O	O
!	O	O
So	O	O
what	O	O
you	O	O
have	O	O
:	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
is	O	O
actually	O	O
the	O	O
best	O	O
way	O	O
to	O	O
accomplish	O	O
what	O	O
you	O	O
want	O	O
,	O	O
and	O	O
that	O	O
is	O	O
you	O	O
want	O	O
to	O	O
save	O	O
the	O	O
result	O	O
as	O	O
a	O	O
T	B-api_mention	O
,	O	O
not	O	O
as	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
I	O	O
took	O	O
the	O	O
liberty	O	O
of	O	O
creating	O	O
a	O	O
CustomOptional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
class	O	O
that	O	O
wraps	O	O
the	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
and	O	O
provides	O	O
an	O	O
extra	O	O
method	O	O
,	O	O
flatStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
that	O	O
you	O	O
cannot	O	O
extend	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
You	O	O
will	O	O
see	O	O
that	O	O
I	O	O
added	O	O
flatStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
as	O	O
here	O	O
:	O	O
#	O	O
pre	O	O
Used	O	O
as	O	O
:	O	O
String	B-api_mention	B-api_mention
result	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
still	O	O
will	O	O
need	O	O
to	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
here	O	O
,	O	O
as	O	O
you	O	O
cannot	O	O
return	O	O
T	B-api_mention	O
,	O	O
because	O	O
if	O	O
!	O	O
optional	O	O
.	B-api_mention	B-api_mention
isPresent	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
then	O	O
T	O	O
=	O	O
=	O	O
null	O	O
if	O	O
you	O	O
declare	O	O
it	O	O
such	O	O
,	O	O
but	O	O
then	O	O
your	O	O
.	B-api_mention	B-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
attempt	O	O
to	O	O
add	O	O
null	O	O
to	O	O
a	O	O
stream	O	O
and	O	O
that	O	O
is	O	O
not	O	O
possible	O	O
.	O	O
As	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Used	O	O
as	O	O
:	O	O
String	B-api_mention	B-api_mention
result	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Will	O	O
now	O	O
throw	O	O
a	O	O
NullPointerException	B-api_mention	B-api_mention
inside	O	O
the	O	O
stream	O	O
operations	O	O
.	O	O
Conclusion	O	O
The	O	O
method	O	O
you	O	O
used	O	O
,	O	O
is	O	O
actually	O	O
the	O	O
best	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
13291076	O	O
,	O	O
answer	O	O
-	O	O
31886637	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
literally	O	O
the	O	O
textual	O	O
name	O	O
in	O	O
the	O	O
java	O	O
code	O	O
of	O	O
the	O	O
enum	O	O
.	O	O
That	O	O
means	O	O
it	O	O
is	O	O
limited	O	O
to	O	O
strings	O	O
that	O	O
can	O	O
actually	O	O
appear	O	O
in	O	O
your	O	O
java	O	O
code	O	O
,	O	O
but	O	O
not	O	O
all	O	O
desirable	O	O
strings	O	O
are	O	O
expressible	O	O
in	O	O
code	O	O
.	O	O
For	O	O
example	O	O
,	O	O
you	O	O
may	O	O
need	O	O
a	O	O
string	O	O
that	O	O
begins	O	O
with	O	O
a	O	O
number	O	O
.	O	B-api_mention
name	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
never	O	O
be	O	O
able	O	O
to	O	O
obtain	O	O
that	O	O
string	O	O
for	O	O
you	O	O
.	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032144	O	O
The	O	O
source	O	O
code	O	O
for	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
The	O	O
source	O	O
code	O	O
for	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
As	O	O
defined	O	O
in	O	O
AbstractCollection	B-api_mention	B-api_mention
)	O	O
:	O	O
#	O	O
pre	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
much	O	O
faster	O	O
since	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
to	O	O
deal	O	O
with	O	O
all	O	O
those	O	O
extra	O	O
method	O	O
calls	O	O
.	O	O
And	O	O
as	O	O
Atrey	O	O
points	O	O
out	O	O
,	O	O
c	O	O
.	B-api_mention	B-api_mention
contains	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
increases	O	O
the	O	O
time	O	O
complexity	O	O
of	O	O
removeAll	B-api_mention	B-api_mention
to	O	O
O	O	O
(	O	O
n	O	O
^	O	O
2	O	O
)	O	O
as	O	O
opposed	O	O
to	O	O
clear	O	O
'	O	O
s	O	O
O	O	O
(	O	O
n	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
33147339	O	O
,	O	O
answer	O	O
-	O	O
33147610	O	O
a	O	O
<	O	O
b	O	O
and	O	O
a	O	O
-	O	O
b	O	O
<	O	O
0	O	O
can	O	O
mean	O	O
two	O	O
different	O	O
things	O	O
.	O	O
Consider	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
When	O	O
run	O	O
,	O	O
this	O	O
will	O	O
only	O	O
print	O	O
a	O	O
-	O	O
b	O	O
<	O	O
0	O	O
.	O	O
What	O	O
happens	O	O
is	O	O
that	O	O
a	O	O
<	O	O
b	O	O
is	O	O
clearly	O	O
false	O	O
,	O	O
but	O	O
a	O	O
-	O	O
b	O	O
overflows	O	O
and	O	O
becomes	O	O
-	O	O
1	O	O
,	O	O
which	O	O
is	O	O
negative	O	O
.	O	O
Now	O	O
,	O	O
having	O	O
said	O	O
that	O	O
,	O	O
consider	O	O
that	O	O
the	O	O
array	O	O
has	O	O
a	O	O
length	O	O
that	O	O
is	O	O
really	O	O
close	O	O
to	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
The	O	O
code	O	O
in	O	O
ArrayList	B-api_mention	B-api_mention
goes	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
oldCapacity	O	O
is	O	O
really	O	O
close	O	O
to	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
so	O	O
newCapacity	O	O
(	O	O
which	O	O
is	O	O
oldCapacity	O	O
+	O	O
0	O	O
.	O	O
5	O	O
*	O	O
oldCapacity	O	O
)	O	O
might	O	O
overflow	O	O
and	O	O
become	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
negative	O	O
)	O	O
.	O	O
Then	O	O
,	O	O
subtracting	O	O
minCapacity	O	O
underflows	O	O
back	O	O
into	O	O
a	O	O
positive	O	O
number	O	O
.	O	O
This	O	O
check	O	O
ensures	O	O
that	O	O
the	O	O
if	O	O
is	O	O
not	O	O
executed	O	O
.	O	O
If	O	O
the	O	O
code	O	O
were	O	O
written	O	O
as	O	O
if	O	O
(	O	O
args	O	O
)	O	O
,	O	O
it	O	O
would	O	O
be	O	O
true	O	O
in	O	O
this	O	O
case	O	O
(	O	O
since	O	O
newCapacity	O	O
is	O	O
negative	O	O
)	O	O
so	O	O
the	O	O
newCapacity	O	O
would	O	O
be	O	O
forced	O	O
to	O	O
minCapacity	O	O
regardless	O	O
of	O	O
the	O	O
oldCapacity	O	O
.	O	O
This	O	O
overflow	O	O
case	O	O
is	O	O
handled	O	O
by	O	O
the	O	O
next	O	O
if	O	O
.	O	O
When	O	O
newCapacity	O	O
has	O	O
overflowed	O	O
,	O	O
this	O	O
will	O	O
be	O	O
true	O	O
:	O	O
MAX	O	O
_	O	O
ARRAY	O	O
_	O	O
SIZE	O	O
is	O	O
defined	O	O
as	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
-	O	O
8	O	O
and	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
-	O	O
(	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
-	O	O
8	O	O
)	O	O
>	O	O
0	O	O
is	O	O
true	O	O
.	O	O
The	O	O
newCapacity	O	O
is	O	O
therefore	O	O
rightly	O	O
handled	O	O
:	O	O
hugeCapacity	O	O
method	O	O
returns	O	O
MAX	O	O
_	O	O
ARRAY	O	O
_	O	O
SIZE	O	O
or	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
NB	O	O
:	O	O
this	O	O
is	O	O
what	O	O
the	O	O
/	O	O
/	O	O
overflow	O	O
-	O	O
conscious	O	O
code	O	O
comment	O	O
in	O	O
this	O	O
method	O	O
is	O	O
saying	O	O
.	O	O
Question	O	O
-	O	O
26318569	O	O
,	O	O
answer	O	O
-	O	O
26319364	O	O
You	O	O
'	O	O
re	O	O
nesting	O	O
mocking	O	O
inside	O	O
of	O	O
mocking	O	O
.	O	O
You	O	O
'	O	O
re	O	O
calling	O	O
getSomeList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
does	O	O
some	O	O
mocking	O	O
,	O	O
before	O	O
you	O	O
'	O	O
ve	O	O
finished	O	O
the	O	O
mocking	O	O
for	O	O
MyMainModel	O	O
.	O	O
Mockito	B-api_mention	O
doesn	O	O
'	O	O
t	O	O
like	O	O
it	O	O
when	O	O
you	O	O
do	O	O
this	O	O
.	O	O
Replace	O	O
#	O	O
pre	O	O
with	O	O
#	O	O
pre	O	O
To	O	O
understand	O	O
why	O	O
this	O	O
causes	O	O
a	O	O
problem	O	O
,	O	O
you	O	O
need	O	O
to	O	O
know	O	O
a	O	O
little	O	O
about	O	O
how	O	O
Mockito	B-api_mention	B-api_mention
works	O	O
,	O	O
and	O	O
also	O	O
be	O	O
aware	O	O
in	O	O
what	O	O
order	O	O
expressions	O	O
and	O	O
statements	O	O
are	O	O
evaluated	O	O
in	O	O
Java	O	O
.	O	O
Mockito	B-api_mention	O
can	O	O
'	O	O
t	O	O
read	O	O
your	O	O
source	O	O
code	O	O
,	O	O
so	O	O
in	O	O
order	O	O
to	O	O
figure	O	O
out	O	O
what	O	O
you	O	O
are	O	O
asking	O	O
it	O	O
to	O	O
do	O	O
,	O	O
it	O	O
relies	O	O
a	O	O
lot	O	O
on	O	O
static	O	O
state	O	O
.	O	O
When	O	O
you	O	O
call	O	O
a	O	O
method	O	O
on	O	O
a	O	O
mock	O	O
object	O	O
,	O	O
Mockito	B-api_mention	B-api_mention
records	O	O
the	O	O
details	O	O
of	O	O
the	O	O
call	O	O
in	O	O
an	O	O
internal	O	O
list	O	O
of	O	O
invocations	O	O
.	O	O
The	O	O
when	O	O
method	O	O
reads	O	O
the	O	O
last	O	O
of	O	O
these	O	O
invocations	O	O
off	O	O
the	O	O
list	O	O
and	O	O
records	O	O
this	O	O
invocation	O	O
in	O	O
the	O	O
OngoingStubbing	B-api_mention	B-api_mention
object	O	O
it	O	O
returns	O	O
.	O	O
The	O	O
line	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
thenReturn	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
causes	O	O
the	O	O
following	O	O
interactions	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
Mock	B-api_mention	B-api_mention
method	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
Static	O	O
method	O	O
when	O	O
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
Method	O	O
thenReturn	O	O
is	O	O
called	O	O
on	O	O
the	O	O
OngoingStubbing	B-api_mention	B-api_mention
object	O	O
returned	O	O
by	O	O
the	O	O
when	O	O
method	O	O
.	O	O
The	O	O
thenReturn	B-api_mention	B-api_mention
method	O	O
can	O	O
then	O	O
instruct	O	O
the	O	O
mock	O	O
it	O	O
received	O	O
via	O	O
the	O	O
OngoingStubbing	B-api_mention	B-api_mention
method	O	O
to	O	O
handle	O	O
any	O	O
suitable	O	O
call	O	O
to	O	O
the	O	O
getList	O	B-api_mention
method	O	O
to	O	O
return	O	O
someModelList	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
as	O	O
Mockito	B-api_mention	B-api_mention
can	O	O
'	O	O
t	O	O
see	O	O
your	O	O
code	O	O
,	O	O
you	O	O
can	O	O
also	O	O
write	O	O
your	O	O
mocking	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
style	O	O
is	O	O
somewhat	O	O
less	O	O
clear	O	O
to	O	O
read	O	O
,	O	O
especially	O	O
since	O	O
in	O	O
this	O	O
case	O	O
the	O	O
null	O	O
has	O	O
to	O	O
be	O	O
casted	O	O
,	O	O
but	O	O
it	O	O
generates	O	O
the	O	O
same	O	O
sequence	O	O
of	O	O
interactions	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
and	O	O
will	O	O
achieve	O	O
the	O	O
same	O	O
result	O	O
as	O	O
the	O	O
line	O	O
above	O	O
.	O	O
However	O	O
,	O	O
the	O	O
line	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
thenReturn	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
causes	O	O
the	O	O
following	O	O
interactions	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
Mock	B-api_mention	B-api_mention
method	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
Static	O	O
method	O	O
when	O	O
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
A	O	O
new	O	O
mock	O	O
of	O	O
SomeModel	O	O
is	O	O
created	O	O
(	O	O
inside	O	O
getSomeList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
,	O	O
#	O	O
li	O	O
Mock	B-api_mention	O
method	O	O
model	O	O
.	B-api_mention	B-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
At	O	O
this	O	O
point	O	O
Mockito	B-api_mention	B-api_mention
gets	O	O
confused	O	O
.	O	O
It	O	O
thought	O	O
you	O	O
were	O	O
mocking	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
now	O	O
you	O	O
'	O	O
re	O	O
telling	O	O
it	O	O
you	O	O
want	O	O
to	O	O
mock	O	O
the	O	O
model	O	O
.	B-api_mention	B-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
To	O	O
Mockito	B-api_mention	B-api_mention
,	O	O
it	O	O
looks	O	O
like	O	O
you	O	O
'	O	O
re	O	O
doing	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
looks	O	O
silly	O	O
to	O	O
Mockito	B-api_mention	B-api_mention
as	O	O
it	O	O
can	O	O
'	O	O
t	O	O
be	O	O
sure	O	O
what	O	O
you	O	O
'	O	O
re	O	O
doing	O	O
with	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
that	O	O
we	O	O
did	O	O
not	O	O
get	O	O
to	O	O
the	O	O
thenReturn	O	B-api_mention
method	O	O
call	O	O
,	O	O
as	O	O
the	O	O
JVM	O	O
needs	O	O
to	O	O
evaluate	O	O
the	O	O
parameters	O	O
to	O	O
this	O	O
method	O	O
before	O	O
it	O	O
can	O	O
call	O	O
the	O	O
method	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
this	O	O
means	O	O
calling	O	O
the	O	O
getSomeList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Generally	O	O
it	O	O
is	O	O
a	O	O
bad	O	O
design	O	O
decision	O	O
to	O	O
rely	O	O
on	O	O
static	O	O
state	O	O
,	O	O
as	O	O
Mockito	B-api_mention	B-api_mention
does	O	O
,	O	O
because	O	O
it	O	O
can	O	O
lead	O	O
to	O	O
cases	O	O
where	O	O
the	O	O
Principle	O	O
of	O	O
Least	O	O
Astonishment	O	O
is	O	O
violated	O	O
.	O	O
However	O	O
,	O	O
Mockito	B-api_mention	B-api_mention
'	I-api_mention	O
s	I-api_mention	O
design	O	O
does	O	O
make	O	O
for	O	O
clear	O	O
and	O	O
expressive	O	O
mocking	O	O
,	O	O
even	O	O
if	O	O
it	O	O
leads	O	O
to	O	O
astonishment	O	O
sometimes	O	O
.	O	O
Finally	O	O
,	O	O
recent	O	O
versions	O	O
of	O	O
Mockito	B-api_mention	B-api_mention
add	O	O
an	O	O
extra	O	O
line	O	O
to	O	O
the	O	O
error	O	O
message	O	O
above	O	O
.	O	O
This	O	O
extra	O	O
line	O	O
indicates	O	O
you	O	O
may	O	O
be	O	O
in	O	O
the	O	O
same	O	O
situation	O	O
as	O	O
this	O	O
question	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846963	O	O
#	O	O
blockquote	O	O
For	O	O
the	O	O
same	O	O
reason	O	O
you	O	O
'	O	O
d	O	O
use	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
at	O	O
some	O	O
point	O	O
.	O	O
You	O	O
want	O	O
to	O	O
return	O	O
a	O	O
Map	B-api_mention	B-api_mention
instance	O	O
that	O	O
throws	O	O
an	O	O
exception	O	O
if	O	O
the	O	O
user	O	O
attempts	O	O
to	O	O
modify	O	O
it	O	O
.	O	O
It	O	O
'	O	O
s	O	O
just	O	O
a	O	O
special	O	O
case	O	O
:	O	O
the	O	O
empty	O	O
Map	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
31170459	O	O
,	O	O
answer	O	O
-	O	O
31170506	O	O
No	O	O
,	O	O
you	O	O
appear	O	O
to	O	O
have	O	O
a	O	O
legit	O	O
bug	O	O
.	O	O
The	O	O
bug	O	O
presents	O	O
in	O	O
JDK7	O	O
but	O	O
fixed	O	O
in	O	O
JDK8	O	O
.	O	O
Your	O	O
values	O	O
are	O	O
correctly	O	O
representable	O	O
as	O	O
BigDecimal	B-api_mention	B-api_mention
s	O	O
,	O	O
and	O	O
should	O	O
behave	O	O
correctly	O	O
,	O	O
but	O	O
don	O	O
'	O	O
t	O	O
.	O	O
Tracing	O	O
through	O	O
the	O	O
source	O	O
code	O	O
of	O	O
BigDecimal	B-api_mention	B-api_mention
,	O	O
on	O	O
line	O	O
2585	O	O
,	O	O
this	O	O
.	B-api_mention	B-api_mention
precision	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
1	O	O
,	O	O
and	O	O
this	O	O
.	B-api_mention	O
scale	I-api_mention	O
is	O	O
-	O	O
2147483647	O	O
.	O	O
this	O	O
.	B-api_mention	B-api_mention
precision	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
this	O	O
.	O	O
scale	O	O
therefore	O	O
overflows	O	O
,	O	O
and	O	O
the	O	O
following	O	O
overflow	O	O
is	O	O
not	O	O
handled	O	O
correctly	O	O
.	O	O
This	O	O
bug	O	O
has	O	O
been	O	O
fixed	O	O
in	O	O
JDK8	O	O
by	O	O
doing	O	O
the	O	O
subtraction	O	O
in	O	O
long	O	O
arithmetic	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
26159918	O	O
invoke	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
executing	O	O
on	O	O
the	O	O
calling	O	O
thread	O	O
,	O	O
like	O	O
any	O	O
other	O	O
method	O	O
call	O	O
.	O	O
whereas	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
a	O	O
new	O	O
thread	O	O
.	O	O
invoking	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
programmatic	O	O
bug	O	O
.	O	O
Question	O	O
-	O	O
7488643	O	O
,	O	O
answer	O	O
-	O	O
7488669	O	O
Two	O	O
steps	O	O
:	O	O
#	O	O
li	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
items	O	O
=	O	O
commaSeparated	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
container	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
28319148	O	O
I	O	O
prefer	O	O
the	O	O
second	O	O
way	O	O
.	O	O
When	O	O
you	O	O
use	O	O
the	O	O
first	O	O
way	O	O
,	O	O
if	O	O
you	O	O
decide	O	O
to	O	O
use	O	O
a	O	O
parallel	O	O
stream	O	O
to	O	O
improve	O	O
performance	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
no	O	O
control	O	O
over	O	O
the	O	O
order	O	O
in	O	O
which	O	O
the	O	O
elements	O	O
will	O	O
be	O	O
added	O	O
to	O	O
the	O	O
output	O	O
list	O	O
by	O	O
forEach	B-api_mention	B-api_mention
.	O	O
When	O	O
you	O	O
use	O	O
toList	B-api_mention	B-api_mention
,	O	O
the	O	O
Streams	O	B-api_mention
API	O	O
will	O	O
preserve	O	O
the	O	O
order	O	O
even	O	O
if	O	O
you	O	O
use	O	O
a	O	O
parallel	O	O
stream	O	O
.	O	O
Question	O	O
-	O	O
21488056	O	O
,	O	O
answer	O	O
-	O	O
30506585	O	O
Predicate	B-api_mention	B-api_mention
has	O	O
methods	O	O
and	O	O
,	O	O
or	O	O
and	O	O
negate	O	O
.	O	O
However	O	O
,	O	O
String	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
is	O	O
not	O	O
a	O	O
Predicate	B-api_mention	B-api_mention
.	O	O
It	O	O
could	O	O
as	O	O
well	O	O
be	O	O
Function	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
or	O	O
MyProprietaryClass	B-api_mention	B-api_mention
.	O	O
The	O	O
type	O	O
information	O	O
is	O	O
inferred	O	O
from	O	O
the	O	O
variable	O	O
or	O	O
the	O	O
call	O	O
.	O	O
So	O	O
,	O	O
you	O	O
need	O	O
to	O	O
cast	O	O
a	O	O
method	O	O
reference	O	O
explicitly	O	O
(	O	O
as	O	O
@	O	O
axtavt	O	O
mentioned	O	O
)	O	O
:	O	O
(	O	O
(	O	O
Predicate	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
String	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
)	O	I-api_mention
.	B-api_mention	I-api_mention
negate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
But	O	O
it	O	O
'	O	O
s	O	O
absolutely	O	O
ugly	O	O
and	O	O
Predicate	B-api_mention	B-api_mention
seems	O	O
to	O	O
use	O	O
lambdas	O	O
under	O	O
the	O	O
hood	O	O
anyway	O	O
.	O	O
So	O	O
I	O	O
think	O	O
you	O	O
are	O	O
better	O	O
off	O	O
writing	O	O
a	O	O
lambda	O	O
or	O	O
even	O	O
your	O	O
own	O	O
not	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
in	O	O
utility	O	O
,	O	O
static	O	O
import	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
19431234	O	O
Java	O	O
8	O	O
has	O	O
a	O	O
completely	O	O
new	O	O
API	O	O
for	O	O
date	O	O
and	O	O
time	O	O
.	O	O
One	O	O
of	O	O
the	O	O
most	O	O
useful	O	O
classes	O	O
in	O	O
this	O	O
API	O	O
is	O	O
LocalDateTime	B-api_mention	B-api_mention
,	O	O
for	O	O
holding	O	O
a	O	O
timezone	O	O
-	O	O
independent	O	O
date	O	O
-	O	O
with	O	O
-	O	O
time	O	O
value	O	O
.	O	O
There	O	O
are	O	O
probably	O	O
millions	O	O
of	O	O
lines	O	O
of	O	O
code	O	O
using	O	O
the	O	O
legacy	O	O
class	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
for	O	O
this	O	O
purpose	O	O
.	O	O
As	O	O
such	O	O
,	O	O
when	O	O
interfacing	O	O
old	O	O
and	O	O
new	O	O
code	O	O
there	O	O
will	O	O
be	O	O
a	O	O
need	O	O
for	O	O
converting	O	O
between	O	O
the	O	O
two	O	O
.	O	O
As	O	O
there	O	O
seems	O	O
to	O	O
be	O	O
no	O	O
direct	O	O
methods	O	O
for	O	O
accomplishing	O	O
this	O	O
,	O	O
how	O	O
can	O	O
it	O	O
be	O	O
done	O	O
?	O	O
Question	O	O
-	O	O
11408427	O	O
,	O	O
answer	O	O
-	O	O
11408477	O	O
The	O	O
+	O	O
operator	O	O
is	O	O
usually	O	O
replaced	O	O
by	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
at	O	O
compile	O	O
time	O	O
.	O	O
Check	O	O
this	O	O
answer	O	O
for	O	O
more	O	O
details	O	O
on	O	O
that	O	O
matter	O	O
.	O	O
Question	O	O
-	O	O
22409102	O	O
,	O	O
answer	O	O
-	O	O
33501556	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
distinguishes	O	O
±	O	O
0	O	O
.	O	O
0	O	O
in	O	O
Java	O	O
.	O	O
(	O	O
There	O	O
'	O	O
s	O	O
also	O	O
Float	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
.	O	I-api_mention
)	O	I-api_mention
I	O	O
'	O	O
m	O	O
a	O	O
bit	O	O
surprised	O	O
no	O	O
-	O	O
one	O	O
has	O	O
mentioned	O	O
these	O	O
,	O	O
as	O	O
they	O	O
seem	O	O
to	O	O
me	O	O
clearer	O	O
than	O	O
any	O	O
method	O	O
given	O	O
so	O	O
far	O	O
!	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
27478241	O	O
=	O	O
=	O	O
can	O	O
be	O	O
used	O	O
in	O	O
many	O	O
object	O	O
types	O	O
but	O	O
you	O	O
can	O	O
use	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
for	O	O
any	O	O
type	O	O
,	O	O
especially	O	O
Strings	O	B-api_mention
and	O	O
Google	O	O
Map	O	O
Markers	O	B-api_mention
.	O	O
Question	O	O
-	O	O
5439529	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
determine	O	O
if	O	O
a	O	O
particular	O	O
item	O	O
in	O	O
an	O	O
Array	B-api_mention	O
of	O	O
strings	O	O
is	O	O
an	O	O
integer	O	O
or	O	O
not	O	O
.	O	O
I	O	O
am	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
'	O	O
ing	O	O
an	O	O
infix	O	O
expression	O	O
in	O	O
String	B-api_mention	B-api_mention
form	O	O
,	O	O
and	O	O
then	O	O
trying	O	O
to	O	O
split	O	O
the	O	O
resultant	O	O
array	O	O
into	O	O
two	O	O
arrays	O	O
;	O	O
one	O	O
for	O	O
integers	O	O
,	O	O
one	O	O
for	O	O
operators	O	O
,	O	O
whilst	O	O
discarding	O	O
parentheses	O	O
,	O	O
and	O	O
other	O	O
miscellaneous	O	O
items	O	O
.	O	O
What	O	O
would	O	O
be	O	O
the	O	O
best	O	O
way	O	O
to	O	O
accomplish	O	O
this	O	O
?	O	O
I	O	O
thought	O	O
I	O	O
might	O	O
be	O	O
able	O	O
to	O	O
find	O	O
a	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isInteger	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
or	O	O
something	O	O
,	O	O
but	O	O
no	O	O
such	O	O
luck	O	O
.	O	O
Question	O	O
-	O	O
6992608	O	O
,	O	O
answer	O	O
-	O	O
6992643	O	O
There	O	O
'	O	O
s	O	O
no	O	O
built	O	O
in	O	O
type	O	O
for	O	O
ConcurrentHashSet	B-api_mention	B-api_mention
because	O	O
you	O	O
can	O	O
always	O	O
derive	O	O
a	O	O
set	O	O
from	O	O
a	O	O
map	O	O
.	O	O
Since	O	O
there	O	O
are	O	O
many	O	O
types	O	O
of	O	O
maps	O	O
,	O	O
you	O	O
use	O	O
a	O	O
method	O	O
to	O	O
produce	O	O
a	O	O
set	O	O
from	O	O
a	O	O
given	O	O
map	O	O
(	O	O
or	O	O
map	O	O
class	O	O
)	O	O
.	O	O
Prior	O	O
to	O	O
Java	O	O
8	O	O
,	O	O
you	O	O
produce	O	O
a	O	O
concurrent	O	O
hash	O	O
set	O	O
backed	O	O
by	O	O
a	O	O
concurrent	O	O
hash	O	O
map	O	O
,	O	O
by	O	O
using	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newSetFromMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
In	O	O
Java	O	O
8	O	O
(	O	O
pointed	O	O
out	O	O
by	O	O
@	O	O
Matt	O	O
)	O	O
,	O	O
you	O	O
can	O	O
get	O	O
a	O	O
concurrent	O	O
hash	O	O
set	O	O
view	O	O
via	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newKeySet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
is	O	O
a	O	O
bit	O	O
simpler	O	O
than	O	O
the	O	O
old	O	O
newSetFromMap	B-api_mention	B-api_mention
which	O	O
required	O	O
you	O	O
to	O	O
pass	O	O
in	O	O
an	O	O
empty	O	O
map	O	O
object	O	O
.	O	O
But	O	O
it	O	O
is	O	O
specific	O	O
to	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
.	O	O
Anyway	O	O
,	O	O
the	O	O
Java	O	O
designers	O	O
could	O	O
have	O	O
created	O	O
a	O	O
new	O	O
set	O	O
interface	O	O
every	O	O
time	O	O
a	O	O
new	O	O
map	O	O
interface	O	O
was	O	O
created	O	O
,	O	O
but	O	O
that	O	O
pattern	O	O
would	O	O
be	O	O
impossible	O	O
to	O	O
enforce	O	O
when	O	O
third	O	O
parties	O	O
create	O	O
their	O	O
own	O	O
maps	O	O
.	O	O
It	O	O
is	O	O
better	O	O
to	O	O
have	O	O
the	O	O
static	O	O
methods	O	O
that	O	O
derive	O	O
new	O	O
sets	O	O
;	O	O
that	O	O
approach	O	O
always	O	O
works	O	O
,	O	O
even	O	O
when	O	O
you	O	O
create	O	O
your	O	O
own	O	O
map	O	O
implementations	O	O
.	O	O
Question	O	O
-	O	O
32859038	O	O
,	O	O
answer	O	O
-	O	O
32859065	O	O
You	O	O
can	O	O
create	O	O
a	O	O
Stream	B-api_mention	B-api_mention
of	O	O
the	O	O
indices	O	O
using	O	O
an	O	O
IntStream	B-api_mention	B-api_mention
and	O	O
then	O	O
convert	O	O
them	O	O
to	O	O
a	O	O
Map	B-api_mention	B-api_mention
:	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
map	O	O
=	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
boxed	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
31202946	O	O
,	O	O
answer	O	O
-	O	O
31203252	O	O
#	O	O
blockquote	O	O
This	O	O
question	O	O
actually	O	O
boils	O	O
down	O	O
to	O	O
the	O	O
fact	O	O
that	O	O
you	O	O
should	O	O
always	O	O
prefer	O	O
composition	O	O
over	O	O
inheritance	O	O
.	O	O
If	O	O
the	O	O
Thread	B-api_mention	B-api_mention
class	O	O
was	O	O
declared	O	O
as	O	O
abstract	O	O
,	O	O
the	O	O
language	O	O
would	O	O
have	O	O
to	O	O
provide	O	O
another	O	O
class	O	O
that	O	O
extended	O	O
from	O	O
it	O	O
which	O	O
programmers	O	O
could	O	O
use	O	O
to	O	O
create	O	O
a	O	O
Thread	B-api_mention	B-api_mention
.	O	O
Your	O	O
question	O	O
would	O	O
then	O	O
be	O	O
about	O	O
why	O	O
this	O	O
class	O	O
that	O	O
extends	O	O
from	O	O
Thread	B-api_mention	B-api_mention
is	O	O
not	O	O
abstract	O	O
.	O	O
If	O	O
the	O	O
language	O	O
did	O	O
not	O	O
provide	O	O
another	O	O
class	O	O
that	O	O
extends	O	O
from	O	O
Thread	B-api_mention	B-api_mention
,	O	O
programmers	O	O
would	O	O
have	O	O
to	O	O
create	O	O
their	O	O
own	O	O
class	O	O
that	O	O
extend	O	O
s	O	O
from	O	O
Thread	B-api_mention	B-api_mention
and	O	O
override	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
only	O	O
possible	O	O
explanation	O	O
I	O	O
can	O	O
give	O	O
is	O	O
that	O	O
the	O	O
developers	O	O
of	O	O
the	O	O
language	O	O
saw	O	O
some	O	O
use	O	O
-	O	O
cases	O	O
for	O	O
overriding	O	O
start	O	O
when	O	O
the	O	O
class	O	O
was	O	O
introduced	O	O
to	O	O
the	O	O
JDK	O	O
.	O	O
The	O	O
first	O	O
version	O	O
of	O	O
Java	O	O
that	O	O
I	O	O
used	O	O
was	O	O
1	O	O
.	O	O
5	O	O
and	O	O
I	O	O
personally	O	O
have	O	O
not	O	O
come	O	O
across	O	O
a	O	O
use	O	O
-	O	O
case	O	O
where	O	O
I	O	O
found	O	O
the	O	O
need	O	O
to	O	O
override	O	O
start	O	O
.	O	O
As	O	O
JB	O	O
Nizet	O	O
stated	O	O
in	O	O
his	O	O
answer	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
31270759	O	O
,	O	O
answer	O	O
-	O	O
31273726	O	O
What	O	O
if	O	O
every	O	O
functional	O	O
interface	O	O
provided	O	O
by	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
was	O	O
allowed	O	O
to	O	O
throw	O	O
an	O	O
exception	O	O
?	O	O
#	O	O
pre	O	O
We	O	O
could	O	O
use	O	O
some	O	O
default	O	O
methods	O	O
to	O	O
provide	O	O
the	O	O
behavior	O	O
you	O	O
want	O	O
.	O	O
#	O	O
li	O	O
You	O	O
could	O	O
fallback	O	O
to	O	O
some	O	O
default	O	O
value	O	O
or	O	O
action	O	O
#	O	O
li	O	O
Or	O	O
you	O	O
could	O	O
try	O	O
to	O	O
perform	O	O
another	O	O
action	O	O
which	O	O
may	O	O
throw	O	O
an	O	O
exception	O	O
I	O	O
'	O	O
ve	O	O
written	O	O
a	O	O
library	O	O
which	O	O
redefines	O	O
most	O	O
of	O	O
the	O	O
interfaces	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
this	O	O
way	O	O
.	O	O
I	O	O
even	O	O
provide	O	O
a	O	O
ThrowingStream	B-api_mention	B-api_mention
which	O	O
let	O	O
'	O	O
s	O	O
you	O	O
use	O	O
these	O	O
new	O	O
interfaces	O	O
with	O	O
the	O	O
same	O	O
API	O	O
as	O	O
a	O	O
regular	O	O
Stream	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
(	O	O
Nothing	O	O
is	O	O
a	O	O
RuntimeException	B-api_mention	B-api_mention
that	O	O
can	O	O
never	O	O
be	O	O
thrown	O	O
.	O	O
)	O	O
Your	O	O
original	O	O
example	O	O
would	O	O
become	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
20454885	O	O
For	O	O
everybody	O	O
who	O	O
codes	O	O
Java	O	O
for	O	O
Android	O	O
devices	O	O
and	O	O
ends	O	O
up	O	O
here	O	O
:	O	O
use	O	O
SparseArray	B-api_mention	B-api_mention
for	O	O
better	O	O
performance	O	O
private	O	O
final	O	O
SparseArray	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
SparseArray	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
with	O	O
this	O	O
you	O	O
can	O	O
use	O	O
int	O	O
instead	O	O
of	O	O
Integer	B-api_mention	B-api_mention
like	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31270759	O	O
,	O	O
answer	O	O
-	O	O
31270760	O	O
Presented	O	O
below	O	O
is	O	O
the	O	O
full	O	O
code	O	O
of	O	O
the	O	O
Exceptional	B-api_mention	B-api_mention
class	O	O
.	O	O
It	O	O
has	O	O
a	O	O
quite	O	O
large	O	O
API	O	O
which	O	O
is	O	O
a	O	O
pure	O	O
extension	O	O
of	O	O
the	O	O
Optional	B-api_mention	B-api_mention
API	O	O
so	O	O
it	O	O
can	O	O
be	O	O
a	O	O
drop	O	O
-	O	O
in	O	O
replacement	O	O
for	O	O
it	O	O
in	O	O
any	O	O
existing	O	O
code	O	O
—	O	O
except	O	O
that	O	O
it	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
subtype	O	O
of	O	O
the	O	O
final	O	O
Optional	B-api_mention	B-api_mention
class	O	O
.	O	O
The	O	O
class	O	O
can	O	O
be	O	O
seen	O	O
as	O	O
being	O	O
in	O	O
the	O	O
same	O	O
relationship	O	O
with	O	O
the	O	O
Try	O	O
monad	O	O
as	O	O
Optional	B-api_mention	B-api_mention
is	O	O
with	O	O
the	O	O
Maybe	O	O
monad	O	O
:	O	O
it	O	O
draws	O	O
inspiration	O	O
from	O	O
it	O	O
,	O	O
but	O	O
is	O	O
adapted	O	O
to	O	O
the	O	O
Java	O	O
idiom	O	O
(	O	O
such	O	O
as	O	O
actually	O	O
throwing	O	O
exceptions	O	O
,	O	O
even	O	O
from	O	O
non	O	O
-	O	O
terminal	O	O
operations	O	O
)	O	O
.	O	O
These	O	O
are	O	O
some	O	O
key	O	O
guidelines	O	O
followed	O	O
by	O	O
the	O	O
class	O	O
:	O	O
#	O	O
li	O	O
as	O	O
opposed	O	O
to	O	O
the	O	O
monadic	O	O
approach	O	O
,	O	O
doesn	O	O
'	O	O
t	O	O
ignore	O	O
Java	O	O
'	O	O
s	O	O
exception	O	O
mechanism	O	O
;	O	O
#	O	O
li	O	O
instead	O	O
it	O	O
relieves	O	O
the	O	O
impedance	O	O
mismatch	O	O
between	O	O
exceptions	O	O
and	O	O
higher	O	O
-	O	O
order	O	O
functions	O	O
;	O	O
#	O	O
li	O	O
exception	O	O
handling	O	O
not	O	O
statically	O	O
typesafe	O	O
(	O	O
due	O	O
to	O	O
sneaky	O	O
throwing	O	O
)	O	O
,	O	O
but	O	O
always	O	O
safe	O	O
at	O	O
runtime	O	O
(	O	O
never	O	O
swallows	O	O
an	O	O
exception	O	O
except	O	O
on	O	O
explicit	O	O
request	O	O
)	O	O
.	O	O
The	O	O
class	O	O
tries	O	O
to	O	O
cover	O	O
all	O	O
the	O	O
typical	O	O
ways	O	O
to	O	O
handle	O	O
an	O	O
exception	O	O
:	O	O
#	O	O
li	O	O
recover	O	O
with	O	O
some	O	O
handling	O	O
code	O	O
which	O	O
provides	O	O
a	O	O
substitute	O	O
value	O	O
;	O	O
#	O	O
li	O	O
flatRecover	B-api_mention	B-api_mention
which	O	O
,	O	O
analogous	O	O
to	O	O
flatMap	B-api_mention	B-api_mention
,	O	O
allows	O	O
to	O	O
return	O	O
a	O	O
new	O	O
Exceptional	B-api_mention	B-api_mention
instance	O	O
which	O	O
will	O	O
be	O	O
unwrapped	O	O
and	O	O
the	O	O
state	O	O
of	O	O
the	O	O
current	O	O
instance	O	O
suitably	O	O
updated	O	O
;	O	O
#	O	O
li	O	O
propagate	O	O
an	O	O
exception	O	O
,	O	O
throwing	O	O
it	O	O
from	O	O
the	O	O
Exceptional	B-api_mention	B-api_mention
expression	O	O
and	O	O
making	O	O
the	O	O
propagate	O	O
call	O	O
declare	O	O
this	O	O
exception	O	O
type	O	O
;	O	O
#	O	O
li	O	O
propagate	O	O
it	O	O
after	O	O
wrapping	O	O
into	O	O
another	O	O
exception	O	O
(	O	O
translate	O	O
it	O	O
)	O	O
;	O	O
#	O	O
li	O	O
handle	O	O
it	O	O
,	O	O
resulting	O	O
in	O	O
an	O	O
empty	O	O
Exceptional	B-api_mention	O
;	O	O
#	O	O
li	O	O
as	O	O
a	O	O
special	O	O
case	O	O
of	O	O
handling	O	O
,	O	O
swallow	O	O
it	O	O
with	O	O
an	O	O
empty	O	O
handler	O	O
block	O	O
.	O	O
The	O	O
propagate	O	O
approach	O	O
allows	O	O
one	O	O
to	O	O
selectively	O	O
pick	O	O
which	O	O
checked	O	O
exceptions	O	O
he	O	O
wants	O	O
to	O	O
expose	O	O
from	O	O
his	O	O
code	O	O
.	O	O
Exceptions	B-api_mention	O
which	O	O
remain	O	O
unhandled	O	O
at	O	O
the	O	O
time	O	O
a	O	O
terminal	O	O
operation	O	O
is	O	O
called	O	O
(	O	O
like	O	O
get	O	O
)	O	O
will	O	O
be	O	O
sneakily	O	O
thrown	O	O
without	O	O
declaration	O	O
.	O	O
This	O	O
is	O	O
often	O	O
considered	O	O
as	O	O
an	O	O
advanced	O	O
and	O	O
dangerous	O	O
approach	O	O
,	O	O
but	O	O
is	O	O
nevertheless	O	O
often	O	O
employed	O	O
as	O	O
a	O	O
way	O	O
to	O	O
somewhat	O	O
alleviate	O	O
the	O	O
nuisance	O	O
of	O	O
checked	O	O
exceptions	O	O
in	O	O
combination	O	O
with	O	O
lambda	O	O
shapes	O	O
which	O	O
do	O	O
not	O	O
declare	O	O
them	O	O
.	O	O
The	O	O
Exceptional	B-api_mention	B-api_mention
class	O	O
hopes	O	O
to	O	O
offer	O	O
a	O	O
cleaner	O	O
and	O	O
more	O	O
selective	O	O
alternative	O	O
to	O	O
sneaky	O	O
throw	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
pre	O	O
#	O	O
pre	O	O

