Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
7056786	O	O
It	O	O
'	O	O
s	O	O
because	O	O
when	O	O
you	O	O
enter	O	O
a	O	O
number	O	O
then	O	O
press	O	O
Enter	O	O
,	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
consumes	O	O
only	O	O
the	O	O
number	O	O
,	O	O
not	O	O
the	O	O
"	O	O
end	O	O
of	O	O
line	O	O
"	O	O
.	O	O
When	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
executes	O	O
,	O	O
it	O	O
consumes	O	O
the	O	O
"	O	O
end	O	O
of	O	O
line	O	O
"	O	O
still	O	O
in	O	O
the	O	O
buffer	O	O
from	O	O
the	O	O
first	O	O
input	O	O
.	O	O
Instead	O	O
,	O	O
use	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
immediately	O	O
after	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
6470651	O	O
,	O	O
answer	O	O
-	O	O
6470695	O	O
A	O	O
simple	O	O
thing	O	O
to	O	O
do	O	O
is	O	O
to	O	O
use	O	O
a	O	O
HashSet	B-api_mention	B-api_mention
with	O	O
an	O	O
incorrect	O	O
(	O	O
or	O	O
non	O	O
-	O	O
existent	O	O
)	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
then	O	O
keep	O	O
adding	O	O
"	O	O
duplicates	O	O
"	O	O
.	O	O
Instead	O	O
of	O	O
ignoring	O	O
duplicates	O	O
as	O	O
it	O	O
should	O	O
,	O	O
the	O	O
set	O	O
will	O	O
only	O	O
ever	O	O
grow	O	O
and	O	O
you	O	O
won	O	O
'	O	O
t	O	O
be	O	O
able	O	O
to	O	O
remove	O	O
them	O	O
.	O	O
If	O	O
you	O	O
want	O	O
these	O	O
bad	O	O
keys	O	O
/	O	O
elements	O	O
to	O	O
hang	O	O
around	O	O
you	O	O
can	O	O
use	O	O
a	O	O
static	O	O
field	O	O
like	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
10827872	O	O
,	O	O
answer	O	O
-	O	O
10827900	O	O
In	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
,	O	O
the	O	O
replace	O	O
method	O	O
either	O	O
takes	O	O
a	O	O
pair	O	O
of	O	O
char	O	O
'	O	O
s	O	O
or	O	O
a	O	O
pair	O	O
of	O	O
CharSequence	B-api_mention	B-api_mention
'	O	O
s	O	O
(	O	O
of	O	O
which	O	O
String	B-api_mention	B-api_mention
is	O	O
a	O	O
subclass	O	O
,	O	O
so	O	O
it	O	O
'	O	O
ll	O	O
happily	O	O
take	O	O
a	O	O
pair	O	O
of	O	O
String	B-api_mention	B-api_mention
'	I-api_mention	O
s	I-api_mention	O
)	O	O
.	O	O
The	O	O
replace	O	O
method	O	O
will	O	O
replace	O	O
all	O	O
occurrences	O	O
of	O	O
a	O	O
char	O	O
or	O	O
CharSequence	B-api_mention	B-api_mention
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
both	O	O
String	B-api_mention	B-api_mention
arguments	O	O
to	O	O
replaceFirst	B-api_mention	B-api_mention
and	O	O
replaceAll	B-api_mention	B-api_mention
are	O	O
regular	O	O
expressions	O	O
(	O	O
regex	O	O
)	O	O
.	O	O
Using	O	O
the	O	O
wrong	O	O
function	O	O
can	O	O
lead	O	O
to	O	O
subtle	O	O
bugs	O	O
.	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489394	O	O
It	O	O
'	O	O
s	O	O
a	O	O
feature	O	O
of	O	O
the	O	O
Java	O	O
language	O	O
.	O	O
String	B-api_mention	B-api_mention
literals	O	O
in	O	O
the	O	O
source	O	O
code	O	O
is	O	O
given	O	O
special	O	O
treatment	O	O
.	O	O
The	O	O
language	O	O
spec	O	O
,	O	O
here	O	O
,	O	O
simply	O	O
says	O	O
that	O	O
a	O	O
string	O	O
literal	O	O
is	O	O
of	O	O
String	B-api_mention	B-api_mention
type	O	O
Question	O	O
-	O	O
21163108	O	O
,	O	O
answer	O	O
-	O	O
22269778	O	O
There	O	O
actually	O	O
is	O	O
a	O	O
trick	O	O
how	O	O
to	O	O
execute	O	O
a	O	O
parallel	O	O
operation	O	O
in	O	O
a	O	O
specific	O	O
fork	O	O
-	O	O
join	O	O
pool	O	O
.	O	O
If	O	O
you	O	O
execute	O	O
it	O	O
as	O	O
a	O	O
task	O	O
in	O	O
a	O	O
fork	O	O
-	O	O
join	O	O
pool	O	O
,	O	O
it	O	O
stays	O	O
there	O	O
and	O	O
does	O	O
not	O	O
use	O	O
the	O	O
common	O	O
one	O	O
.	O	O
#	O	O
pre	O	O
The	O	O
trick	O	O
is	O	O
based	O	O
on	O	O
ForkJoinTask	B-api_mention	B-api_mention
.	I-api_mention	O
fork	I-api_mention	O
which	O	O
specifies	O	O
:	O	O
"	O	O
Arranges	O	O
to	O	O
asynchronously	O	O
execute	O	O
this	O	O
task	O	O
in	O	O
the	O	O
pool	O	O
the	O	O
current	O	O
task	O	O
is	O	O
running	O	O
in	O	O
,	O	O
if	O	O
applicable	O	O
,	O	O
or	O	O
using	O	O
the	O	O
ForkJoinPool	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
commonPool	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
not	O	O
inForkJoinPool	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
Question	O	O
-	O	O
10786042	O	O
,	O	O
answer	O	O
-	O	O
25735202	O	O
You	O	O
need	O	O
to	O	O
first	O	O
create	O	O
a	O	O
URI	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
convert	O	O
that	O	O
Uri	B-api_mention	O
to	O	O
ASCII	O	O
string	O	O
:	O	O
urlStr	O	O
=	O	O
uri	O	O
.	B-api_mention	B-api_mention
toASCIIString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Now	O	O
your	O	O
url	O	O
string	O	O
is	O	O
completely	O	O
encoded	O	O
first	O	O
we	O	O
did	O	O
simple	O	O
url	O	O
encoding	O	O
and	O	O
then	O	O
we	O	O
converted	O	O
it	O	O
to	O	O
ASCII	O	O
String	B-api_mention	B-api_mention
to	O	O
make	O	O
sure	O	O
no	O	O
character	O	O
outside	O	O
US	O	O
-	O	O
ASCII	O	O
are	O	O
remaining	O	O
in	O	O
string	O	O
.	O	O
This	O	O
is	O	O
exactly	O	O
how	O	O
browsers	O	O
do	O	O
.	O	O
Question	O	O
-	O	O
31445024	O	O
,	O	O
answer	O	O
-	O	O
31445150	O	O
I	O	O
first	O	O
tought	O	O
your	O	O
question	O	O
was	O	O
a	O	O
dupe	O	O
of	O	O
What	O	O
code	O	O
does	O	O
the	O	O
compiler	O	O
generate	O	O
for	O	O
autoboxing	O	O
?	O	O
However	O	O
,	O	O
after	O	O
your	O	O
comment	O	O
on	O	O
@	O	O
ElliottFrisch	O	O
I	O	O
realized	O	O
it	O	O
was	O	O
different	O	O
:	O	O
#	O	O
blockquote	O	O
For	O	O
other	O	O
readers	O	O
,	O	O
assume	O	O
that	O	O
"	O	O
behaves	O	O
that	O	O
way	O	O
"	O	O
means	O	O
using	O	O
valueOf	B-api_mention	B-api_mention
.	O	O
Remember	O	O
that	O	O
there	O	O
are	O	O
multiples	O	O
compilers	O	O
for	O	O
Java	O	O
.	O	O
To	O	O
be	O	O
"	O	O
legal	O	O
"	O	O
they	O	O
must	O	O
follow	O	O
the	O	O
contract	O	O
given	O	O
in	O	O
the	O	O
JLS	O	O
.	O	O
Therefore	O	O
,	O	O
as	O	O
long	O	O
as	O	O
all	O	O
the	O	O
rules	O	O
here	O	O
are	O	O
respected	O	O
,	O	O
there	O	O
is	O	O
no	O	O
guarantee	O	O
of	O	O
how	O	O
autoboxing	O	O
is	O	O
internally	O	O
implemented	O	O
.	O	O
But	O	O
I	O	O
don	O	O
'	O	O
t	O	O
see	O	O
any	O	O
reason	O	O
to	O	O
not	O	O
use	O	O
valueOf	B-api_mention	B-api_mention
,	O	O
specially	O	O
that	O	O
it	O	O
uses	O	O
the	O	O
cached	O	O
values	O	O
and	O	O
is	O	O
the	O	O
recommended	O	O
way	O	O
as	O	O
per	O	O
this	O	O
article	O	O
by	O	O
Joseph	O	O
D	O	O
.	O	O
Darcy	O	O
.	O	O
Question	O	O
-	O	O
20331163	O	O
,	O	O
answer	O	O
-	O	O
20331323	O	O
Another	O	O
way	O	O
of	O	O
doing	O	O
that	O	O
is	O	O
:	O	O
String	B-api_mention	B-api_mention
date	O	O
=	O	O
dateAndTime	O	O
.	B-api_mention	B-api_mention
substring	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
I	O	O
'	O	O
m	O	O
not	O	O
exactly	O	O
certain	O	O
,	O	O
but	O	O
I	O	O
think	O	O
this	O	O
might	O	O
be	O	O
faster	O	O
/	O	O
use	O	O
less	O	O
memory	O	O
than	O	O
using	O	O
the	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Question	O	O
-	O	O
32356762	O	O
Is	O	O
there	O	O
a	O	O
good	O	O
reason	O	O
that	O	O
the	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
the	O	O
java	O	O
.	O	O
utils	O	O
package	O	O
returns	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
instead	O	O
of	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
?	O	O
Obviously	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
a	O	O
List	B-api_mention	B-api_mention
,	O	O
but	O	O
I	O	O
'	O	O
m	O	O
under	O	O
the	O	O
impression	O	O
that	O	O
it	O	O
'	O	O
s	O	O
generally	O	O
good	O	O
practice	O	O
to	O	O
return	O	O
the	O	O
interface	O	O
type	O	O
instead	O	O
of	O	O
implementation	O	O
type	O	O
.	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276498	O	O
Assuming	O	O
all	O	O
the	O	O
streams	O	O
get	O	O
created	O	O
okay	O	O
,	O	O
yes	O	O
,	O	O
just	O	O
closing	O	O
bw	O	O
is	O	O
fine	O	O
with	O	O
those	O	O
stream	O	O
implementations	O	O
;	O	O
but	O	O
that	O	O
'	O	O
s	O	O
a	O	O
big	O	O
assumption	O	O
.	O	O
I	O	O
'	O	O
d	O	O
use	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
(	O	O
tutorial	O	O
)	O	O
so	O	O
that	O	O
any	O	O
issues	O	O
constructing	O	O
the	O	O
subsequent	O	O
streams	O	O
that	O	O
throw	O	O
exceptions	O	O
don	O	O
'	O	O
t	O	O
leave	O	O
the	O	O
previous	O	O
streams	O	O
hanging	O	O
,	O	O
and	O	O
so	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
rely	O	O
on	O	O
the	O	O
stream	O	O
implementation	O	O
having	O	O
the	O	O
call	O	O
to	O	O
close	O	O
the	O	O
underlying	O	O
stream	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
you	O	O
no	O	O
longer	O	O
call	O	O
close	O	O
at	O	O
all	O	O
.	O	O
Important	O	O
note	O	O
:	O	O
To	O	O
have	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
close	O	O
them	O	O
,	O	O
you	O	O
must	O	O
assign	O	O
the	O	O
streams	O	O
to	O	O
variables	O	O
as	O	O
you	O	O
open	O	O
them	O	O
,	O	O
you	O	O
cannot	O	O
use	O	O
nesting	O	O
.	O	O
If	O	O
you	O	O
use	O	O
nesting	O	O
,	O	O
an	O	O
exception	O	O
during	O	O
construction	O	O
of	O	O
one	O	O
of	O	O
the	O	O
later	O	O
streams	O	O
(	O	O
say	O	O
,	O	O
GZIPOutputStream	B-api_mention	B-api_mention
)	O	O
will	O	O
leave	O	O
any	O	O
stream	O	O
constructed	O	O
by	O	O
the	O	O
nested	O	O
calls	O	O
inside	O	O
it	O	O
open	O	O
.	O	O
From	O	O
JLS	O	O
§	O	O
14	O	O
.	O	O
20	O	O
.	O	O
3	O	O
:	O	O
#	O	O
blockquote	O	O
Note	O	O
the	O	O
word	O	O
"	O	O
variables	O	O
"	O	O
(	O	O
my	O	O
emphasis	O	O
)	O	O
.	O	O
E	O	O
.	O	O
g	O	O
.	O	O
,	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
.	O	O
.	O	O
.	O	O
because	O	O
an	O	O
exception	O	O
from	O	O
the	O	O
GZIPOutputStream	B-api_mention	B-api_mention
(	O	I-api_mention
OutputStream	B-api_mention	I-api_mention
)	O	O
constructor	O	O
(	O	O
which	O	O
says	O	O
it	O	O
may	O	O
throw	O	O
IOException	B-api_mention	B-api_mention
,	O	O
and	O	O
writes	O	O
a	O	O
header	O	O
to	O	O
the	O	O
underlying	O	O
stream	O	O
)	O	O
would	O	O
leave	O	O
the	O	O
FileOutputStream	B-api_mention	B-api_mention
open	O	O
.	O	O
Since	O	O
some	O	O
resources	O	O
have	O	O
constructors	O	O
that	O	O
may	O	O
throw	O	O
and	O	O
others	O	O
don	O	O
'	O	O
t	O	O
,	O	O
it	O	O
'	O	O
s	O	O
a	O	O
good	O	O
habit	O	O
to	O	O
just	O	O
list	O	O
them	O	O
separately	O	O
.	O	O
We	O	O
can	O	O
double	O	O
-	O	O
check	O	O
our	O	O
interpretation	O	O
of	O	O
that	O	O
JLS	O	O
section	O	O
with	O	O
this	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
.	O	O
.	O	O
.	O	O
which	O	O
has	O	O
the	O	O
output	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
there	O	O
are	O	O
no	O	O
calls	O	O
to	O	O
close	O	O
there	O	O
.	O	O
If	O	O
we	O	O
fix	O	O
main	O	O
:	O	O
#	O	O
pre	O	O
then	O	O
we	O	O
get	O	O
the	O	O
appropriate	O	O
close	O	O
calls	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
Yes	O	O
,	O	O
two	O	O
calls	O	O
to	O	O
InnerMost	O	B-api_mention
#	O	I-api_mention
close	O	I-api_mention
is	O	O
correct	O	O
;	O	O
one	O	O
is	O	O
from	O	O
Middle	O	O
,	O	O
the	O	O
other	O	O
from	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14492043	O	O
'	O	O
Random	O	B-api_mention
'	O	O
is	O	O
more	O	O
than	O	O
just	O	O
about	O	O
getting	O	O
numbers	O	O
.	O	O
.	O	O
.	O	O
.	O	O
what	O	O
you	O	O
have	O	O
is	O	O
pseudo	O	O
-	O	O
random	O	O
If	O	O
pseudo	O	O
-	O	O
random	O	O
is	O	O
good	O	O
enough	O	O
for	O	O
your	O	O
purposes	O	O
,	O	O
then	O	O
sure	O	O
,	O	O
it	O	O
'	O	O
s	O	O
way	O	O
faster	O	O
(	O	O
and	O	O
XOR	O	O
+	O	O
Bitshift	O	O
will	O	O
be	O	O
faster	O	O
than	O	O
what	O	O
you	O	O
have	O	O
)	O	O
Rolf	O	O
Edit	O	O
:	O	O
OK	O	O
,	O	O
after	O	O
being	O	O
too	O	O
hasty	O	O
in	O	O
this	O	O
answer	O	O
,	O	O
let	O	O
me	O	O
answer	O	O
the	O	O
real	O	O
reason	O	O
why	O	O
your	O	O
code	O	O
is	O	O
faster	O	O
:	O	O
From	O	O
the	O	O
JavaDoc	O	O
for	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
blockquote	O	O
This	O	O
is	O	O
likely	O	O
why	O	O
your	O	O
code	O	O
is	O	O
faster	O	O
.	O	O
Question	O	O
-	O	O
27504925	O	O
The	O	O
Java	O	O
language	O	O
specification	O	O
specifies	O	O
that	O	O
#	O	O
blockquote	O	O
So	O	O
,	O	O
considering	O	O
arrays	O	O
are	O	O
objects	O	O
—	O	O
why	O	O
did	O	O
the	O	O
Java	O	O
designers	O	O
make	O	O
the	O	O
decision	O	O
not	O	O
to	O	O
allow	O	O
inherit	O	O
and	O	O
override	O	O
from	O	O
it	O	O
,	O	O
for	O	O
example	O	O
,	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
The	O	O
current	O	O
syntax	O	O
wouldn	O	O
'	O	O
t	O	O
allow	O	O
creating	O	O
anonymous	O	O
classes	O	O
with	O	O
an	O	O
array	O	O
as	O	O
the	O	O
base	O	O
class	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
that	O	O
was	O	O
the	O	O
reason	O	O
for	O	O
their	O	O
decision	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
13134221	O	O
Actually	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
a	O	O
new	O	O
thread	O	O
and	O	O
have	O	O
its	O	O
own	O	O
execution	O	O
scenario	O	O
.	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
calls	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
asynchronously	O	O
,	O	O
which	O	O
changes	O	O
the	O	O
state	O	O
of	O	O
new	O	O
Thread	B-api_mention	B-api_mention
to	O	O
Runnable	B-api_mention	B-api_mention
.	O	O
But	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
create	O	O
any	O	O
new	O	O
thread	O	O
.	O	O
Instead	O	O
it	O	O
execute	O	O
the	O	O
run	O	O
method	O	O
in	O	O
the	O	O
current	O	O
running	O	O
thread	O	O
synchronously	O	O
.	O	O
If	O	O
you	O	O
are	O	O
using	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
then	O	O
you	O	O
are	O	O
not	O	O
using	O	O
the	O	O
features	O	O
of	O	O
multi	O	O
threading	O	O
at	O	O
all	O	O
.	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777312	O	O
Arrays	O	B-api_mention
inherit	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
from	O	O
Object	B-api_mention	B-api_mention
and	O	O
hence	O	O
compare	O	O
only	O	O
returns	O	O
true	O	O
if	O	O
comparing	O	O
an	O	O
array	O	O
against	O	O
itself	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
compares	O	O
the	O	O
elements	O	O
of	O	O
the	O	O
arrays	O	O
.	O	O
This	O	O
snippet	O	O
elucidates	O	O
the	O	O
difference	O	O
:	O	O
#	O	O
pre	O	O
See	O	O
also	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Another	O	O
static	O	O
method	O	O
there	O	O
may	O	O
also	O	O
be	O	O
of	O	O
interest	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
deepEquals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
23114015	O	O
,	O	O
answer	O	O
-	O	O
23177907	O	O
This	O	O
was	O	O
not	O	O
an	O	O
omission	O	O
;	O	O
there	O	O
was	O	O
detailed	O	O
discussion	O	O
on	O	O
the	O	O
EG	O	O
list	O	O
in	O	O
June	O	O
of	O	O
2013	O	O
.	O	O
The	O	O
definitive	O	O
discussion	O	O
of	O	O
the	O	O
Expert	O	O
Group	O	O
is	O	O
rooted	O	O
at	O	O
this	O	O
thread	O	O
.	O	O
While	O	O
it	O	O
seemed	O	O
"	O	O
obvious	O	O
"	O	O
(	O	O
even	O	O
to	O	O
the	O	O
Expert	O	O
Group	O	O
,	O	O
initially	O	O
)	O	O
that	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
seemed	O	O
to	O	O
make	O	O
sense	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
the	O	O
fact	O	O
that	O	O
Iterable	B-api_mention	B-api_mention
was	O	O
so	O	O
general	O	O
became	O	O
a	O	O
problem	O	O
,	O	O
because	O	O
the	O	O
obvious	O	O
signature	O	O
:	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
not	O	O
always	O	O
what	O	O
you	O	O
were	O	O
going	O	O
to	O	O
want	O	O
.	O	O
Some	O	O
things	O	O
that	O	O
were	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
would	O	O
rather	O	O
have	O	O
their	O	O
stream	O	O
method	O	O
return	O	O
an	O	O
IntStream	B-api_mention	B-api_mention
,	O	O
for	O	O
example	O	O
.	O	O
But	O	O
putting	O	O
the	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
this	O	O
high	O	O
up	O	O
in	O	O
the	O	O
hierarchy	O	O
would	O	O
make	O	O
that	O	O
impossible	O	O
.	O	O
So	O	O
instead	O	O
,	O	O
we	O	O
made	O	O
it	O	O
really	O	O
easy	O	O
to	O	O
make	O	O
a	O	O
Stream	B-api_mention	B-api_mention
from	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
by	O	O
providing	O	O
a	O	O
spliterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
implementation	O	O
of	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
Collection	B-api_mention	B-api_mention
is	O	O
just	O	O
:	O	O
#	O	O
pre	O	O
Any	O	O
client	O	O
can	O	O
get	O	O
the	O	O
stream	O	O
they	O	O
want	O	O
from	O	O
an	O	O
Iterable	O	B-api_mention
with	O	O
:	O	O
Stream	B-api_mention	B-api_mention
s	O	O
=	O	O
StreamSupport	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
In	O	O
the	O	O
end	O	O
we	O	O
concluded	O	O
that	O	O
adding	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
Iterable	O	B-api_mention
would	O	O
be	O	O
a	O	O
mistake	O	O
.	O	O
Question	O	O
-	O	O
31445024	O	O
,	O	O
answer	O	O
-	O	O
31760309	O	O
Until	O	O
the	O	O
language	O	O
specification	O	O
mentions	O	O
it	O	O
,	O	O
it	O	O
is	O	O
not	O	O
guaranteed	O	O
that	O	O
autoboxing	O	O
is	O	O
equivalent	O	O
to	O	O
a	O	O
call	O	O
to	O	O
the	O	O
static	O	O
valueOf	B-api_mention	B-api_mention
methods	O	O
.	O	O
It	O	O
is	O	O
an	O	O
implementation	O	O
aspect	O	O
,	O	O
not	O	O
part	O	O
of	O	O
the	O	O
boxing	O	O
conversion	O	O
specification	O	O
.	O	O
An	O	O
implementation	O	O
is	O	O
theoretically	O	O
free	O	O
to	O	O
use	O	O
another	O	O
mechanism	O	O
as	O	O
long	O	O
as	O	O
it	O	O
conforms	O	O
to	O	O
the	O	O
rule	O	O
you	O	O
mentioned	O	O
from	O	O
the	O	O
JLS	O	O
.	O	O
In	O	O
practice	O	O
,	O	O
there	O	O
are	O	O
many	O	O
Sun	O	O
JDK	O	O
bug	O	O
reports	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
JDK	O	O
-	O	O
4990346	O	O
and	O	O
JDK	O	O
-	O	O
6628737	O	O
)	O	O
that	O	O
clearly	O	O
imply	O	O
that	O	O
when	O	O
autoboxing	O	O
was	O	O
introduced	O	O
in	O	O
Java	O	O
5	O	O
,	O	O
the	O	O
intention	O	O
was	O	O
having	O	O
the	O	O
compiler	O	O
to	O	O
rely	O	O
on	O	O
valueOf	B-api_mention	B-api_mention
as	O	O
stated	O	O
in	O	O
JDK	O	O
-	O	O
6628737	O	O
:	O	O
#	O	O
blockquote	O	O
But	O	O
that	O	O
'	O	O
s	O	O
only	O	O
for	O	O
javac	O	O
,	O	O
not	O	O
necessarily	O	O
all	O	O
compilers	O	O
.	O	O
Question	O	O
-	O	O
31419029	O	O
I	O	O
'	O	O
ve	O	O
tried	O	O
to	O	O
build	O	O
my	O	O
own	O	O
Map	B-api_mention	O
to	O	O
increase	O	O
the	O	O
performance	O	O
for	O	O
a	O	O
special	O	O
environment	O	O
,	O	O
and	O	O
I	O	O
realized	O	O
something	O	O
pretty	O	O
interesting	O	O
:	O	O
Creating	O	O
a	O	O
new	O	O
Hashmap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
faster	O	O
than	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	I-api_mention	O
2000	I-api_mention	O
]	I-api_mention	O
-	O	O
no	O	O
matter	O	O
in	O	O
which	O	O
order	O	O
I	O	O
execute	O	O
these	O	O
commands	O	O
.	O	O
That	O	O
'	O	O
s	O	O
pretty	O	O
confusing	O	O
to	O	O
me	O	O
,	O	O
esp	O	O
.	O	O
because	O	O
the	O	O
Hashmap	B-api_mention	B-api_mention
constructor	O	O
contains	O	O
a	O	O
table	O	O
=	O	O
new	O	O
Entry	O	O
[	O	O
capacity	O	O
]	O	O
,	O	O
according	O	O
to	O	O
this	O	O
.	O	O
Is	O	O
there	O	O
something	O	O
wrong	O	O
with	O	O
my	O	O
testbench	O	O
?	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
d	O	O
love	O	O
to	O	O
see	O	O
the	O	O
results	O	O
of	O	O
testing	O	O
on	O	O
another	O	O
computer	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
got	O	O
no	O	O
clue	O	O
why	O	O
creating	O	O
a	O	O
HashMap	B-api_mention	B-api_mention
is	O	O
10	O	O
times	O	O
faster	O	O
than	O	O
creating	O	O
a	O	O
Object	B-api_mention	B-api_mention
[	I-api_mention	O
]	I-api_mention	O
.	O	O
Question	O	O
-	O	O
13659217	O	O
,	O	O
answer	O	O
-	O	O
13659231	O	O
You	O	O
can	O	O
'	O	O
t	O	O
see	O	O
this	O	O
method	O	O
in	O	O
javadoc	O	O
because	O	O
it	O	O
'	O	O
s	O	O
added	O	O
by	O	O
the	O	O
compiler	O	O
.	O	O
Documented	O	O
in	O	O
three	O	O
places	O	O
:	O	O
#	O	O
li	O	O
Enum	O	O
Types	O	O
,	O	O
The	O	O
Java	O	O
Tutorials	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Enum	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
class	O	O
(	O	O
The	O	O
special	O	O
implicit	O	O
values	B-api_mention	O
method	O	O
is	O	O
mentioned	O	O
in	O	O
description	O	O
of	O	O
valueOf	B-api_mention	B-api_mention
method	O	O
)	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Enum	O	O
Types	O	O
,	O	O
Section	O	O
8	O	O
.	O	O
9	O	O
,	O	O
Java	O	O
Language	O	O
Specification	O	O
The	O	O
values	B-api_mention	O
function	O	O
simply	O	O
list	O	O
all	O	O
values	O	O
of	O	O
the	O	O
enumeration	O	O
.	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
31931870	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
singletonList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
8157755	O	O
,	O	O
answer	O	O
-	O	O
8157791	O	O
If	O	O
you	O	O
want	O	O
the	O	O
value	O	O
you	O	O
are	O	O
assigning	O	O
in	O	O
the	O	O
constructor	O	O
,	O	O
you	O	O
need	O	O
to	O	O
add	O	O
a	O	O
method	O	O
in	O	O
the	O	O
enum	O	O
definition	O	O
to	O	O
return	O	O
that	O	O
value	O	O
.	O	O
If	O	O
you	O	O
want	O	O
a	O	O
unique	O	O
number	O	O
that	O	O
represent	O	O
the	O	O
enum	O	O
value	O	O
,	O	O
you	O	O
can	O	O
use	O	O
ordinal	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
18571223	O	O
,	O	O
answer	O	O
-	O	O
18571352	O	O
You	O	O
can	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getBytes	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
returns	O	O
the	O	O
byte	O	O
[	O	O
]	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725470	O	O
List	B-api_mention	B-api_mention
iterators	O	O
guarantee	O	O
first	O	O
and	O	O
foremost	O	O
that	O	O
you	O	O
get	O	O
the	O	O
list	O	O
'	O	O
s	O	O
elements	O	O
in	O	O
the	O	O
internal	O	O
order	O	O
of	O	O
the	O	O
list	O	O
(	O	O
aka	O	O
.	O	O
insertion	O	O
order	O	O
)	O	O
.	O	O
More	O	O
specifically	O	O
it	O	O
is	O	O
in	O	O
the	O	O
order	O	O
you	O	O
'	O	O
ve	O	O
inserted	O	O
the	O	O
elements	O	O
or	O	O
on	O	O
how	O	O
you	O	O
'	O	O
ve	O	O
manipulated	O	O
the	O	O
list	O	O
.	O	O
Sorting	O	O
can	O	O
be	O	O
seen	O	O
as	O	O
a	O	O
manipulation	O	O
of	O	O
the	O	O
data	O	O
structure	O	O
,	O	O
and	O	O
there	O	O
are	O	O
several	O	O
ways	O	O
to	O	O
sort	O	O
the	O	O
list	O	O
.	O	O
I	O	O
'	O	O
ll	O	O
order	O	O
the	O	O
ways	O	O
in	O	O
the	O	O
order	O	O
of	O	O
usefulness	O	O
as	O	O
I	O	O
personally	O	O
see	O	O
it	O	O
:	O	O
1	O	O
.	O	O
Consider	O	O
using	O	O
Set	B-api_mention	B-api_mention
or	O	O
Bag	B-api_mention	O
collections	O	O
instead	O	O
NOTE	O	O
:	O	O
I	O	O
put	O	O
this	O	O
option	O	O
at	O	O
the	O	O
top	O	O
because	O	O
this	O	O
is	O	O
what	O	O
you	O	O
normally	O	O
want	O	O
to	O	O
do	O	O
anyway	O	O
.	O	O
A	O	O
sorted	O	O
set	O	O
automatically	O	O
sorts	O	O
the	O	O
collection	O	O
at	O	O
insertion	O	O
,	O	O
meaning	O	O
that	O	O
it	O	O
does	O	O
the	O	O
sorting	O	O
while	O	O
you	O	O
add	O	O
elements	O	O
into	O	O
the	O	O
collection	O	O
.	O	O
It	O	O
also	O	O
means	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
manually	O	O
sort	O	O
it	O	O
.	O	O
Furthermore	O	O
if	O	O
you	O	O
are	O	O
sure	O	O
that	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
worry	O	O
about	O	O
(	O	O
or	O	O
have	O	O
)	O	O
duplicate	O	O
elements	O	O
then	O	O
you	O	O
can	O	O
use	O	O
the	O	O
TreeSet	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
instead	O	O
.	O	O
It	O	O
implements	O	O
SortedSet	B-api_mention	B-api_mention
and	O	O
NavigableSet	B-api_mention	B-api_mention
interfaces	O	O
and	O	O
works	O	O
as	O	O
you	O	O
'	O	O
d	O	O
probably	O	O
expect	O	O
from	O	O
a	O	O
list	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
want	O	O
the	O	O
natural	O	O
ordering	O	O
you	O	O
can	O	O
use	O	O
the	O	O
constructor	O	O
parameter	O	O
that	O	O
takes	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Alternatively	O	O
you	O	O
can	O	O
use	O	O
Multisets	B-api_mention	O
(	O	O
also	O	O
known	O	O
as	O	O
Bags	B-api_mention	O
)	O	O
,	O	O
that	O	O
is	O	O
a	O	O
Set	B-api_mention	O
that	O	O
allows	O	O
duplicate	O	O
elements	O	O
,	O	O
instead	O	O
and	O	O
there	O	O
are	O	O
third	O	O
party	O	O
implementations	O	O
of	O	O
them	O	O
.	O	O
Most	O	O
notably	O	O
from	O	O
the	O	O
Guava	O	O
libraries	O	O
there	O	O
is	O	O
a	O	O
TreeMultiset	B-api_mention	B-api_mention
,	O	O
that	O	O
works	O	O
a	O	O
lot	O	O
like	O	O
the	O	O
TreeSet	B-api_mention	B-api_mention
.	O	O
2	O	O
.	O	O
Sort	O	O
your	O	O
list	O	O
with	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
As	O	O
mentioned	O	O
above	O	O
,	O	O
sorting	O	O
of	O	O
List	B-api_mention	B-api_mention
s	O	O
is	O	O
an	O	O
manipulation	O	O
of	O	O
the	O	O
data	O	O
structure	O	O
.	O	O
So	O	O
for	O	O
situations	O	O
where	O	O
you	O	O
need	O	O
"	O	O
one	O	O
source	O	O
of	O	O
truth	O	O
"	O	O
that	O	O
will	O	O
be	O	O
sorted	O	O
in	O	O
a	O	O
variety	O	O
of	O	O
ways	O	O
then	O	O
sorting	O	O
it	O	O
manually	O	O
is	O	O
the	O	O
way	O	O
to	O	O
go	O	O
.	O	O
You	O	O
can	O	O
sort	O	O
your	O	O
list	O	O
with	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Here	O	O
is	O	O
a	O	O
code	O	O
sample	O	O
on	O	O
how	O	O
:	O	O
#	O	O
pre	O	O
Using	O	O
comparators	O	O
One	O	O
clear	O	O
benefit	O	O
is	O	O
that	O	O
you	O	O
may	O	O
use	O	O
Comparator	B-api_mention	B-api_mention
in	O	O
the	O	O
sort	B-api_mention	O
method	O	O
.	O	O
Java	O	O
also	O	O
provides	O	O
some	O	O
implementations	O	O
for	O	O
the	O	O
Comparator	B-api_mention	B-api_mention
such	O	O
as	O	O
the	O	O
Collator	B-api_mention	B-api_mention
which	O	O
is	O	O
useful	O	O
for	O	O
locale	O	O
sensitive	O	O
sorting	O	O
strings	O	O
.	O	O
Here	O	O
is	O	O
one	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Sorting	O	O
in	O	O
concurrent	O	O
environments	O	O
Do	O	O
note	O	O
though	O	O
that	O	O
using	O	O
the	O	O
sort	B-api_mention	O
method	O	O
is	O	O
not	O	O
friendly	O	O
in	O	O
concurrent	O	O
environments	O	O
,	O	O
since	O	O
the	O	O
collection	O	O
instance	O	O
will	O	O
be	O	O
manipulated	O	O
,	O	O
and	O	O
you	O	O
should	O	O
consider	O	O
using	O	O
immutable	O	O
collections	O	O
instead	O	O
.	O	O
This	O	O
is	O	O
something	O	O
Guava	O	O
provides	O	O
in	O	O
the	O	O
Ordering	B-api_mention	O
class	O	O
and	O	O
is	O	O
a	O	O
simple	O	O
one	O	O
-	O	O
liner	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
sorted	O	O
=	O	O
Ordering	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
natural	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sortedCopy	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
3	O	O
.	O	O
Wrap	O	O
your	O	O
list	O	O
with	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
PriorityQueue	I-api_mention	I-api_mention
Though	O	O
there	O	O
is	O	O
no	O	O
sorted	O	O
list	O	O
in	O	O
Java	O	O
there	O	O
is	O	O
however	O	O
a	O	O
sorted	O	O
queue	O	O
which	O	O
would	O	O
probably	O	O
work	O	O
just	O	O
as	O	O
well	O	O
for	O	O
you	O	O
.	O	O
It	O	O
is	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
PriorityQueue	I-api_mention	I-api_mention
class	O	O
.	O	O
Nico	O	O
Haase	O	O
linked	O	O
in	O	O
the	O	O
comments	O	O
to	O	O
a	O	O
related	O	O
question	O	O
that	O	O
also	O	O
answers	O	O
this	O	O
.	O	O
In	O	O
a	O	O
sorted	O	O
collection	O	O
you	O	O
most	O	O
likely	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
manipulate	O	O
the	O	O
internal	O	O
data	O	O
structure	O	O
which	O	O
is	O	O
why	O	O
PriorityQueue	B-api_mention	B-api_mention
doesn	O	O
'	O	O
t	O	O
implement	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
(	O	O
because	O	O
that	O	O
would	O	O
give	O	O
you	O	O
direct	O	O
access	O	O
to	O	O
it	O	O
'	O	O
s	O	O
elements	O	O
)	O	O
.	O	O
Caveat	O	O
on	O	O
the	O	O
PriorityQueue	B-api_mention	B-api_mention
iterator	O	O
The	O	O
PriorityQueue	B-api_mention	B-api_mention
class	O	O
implements	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
and	O	O
Collection	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interfaces	O	O
so	O	O
it	O	O
can	O	O
be	O	O
iterated	O	O
as	O	O
usual	O	O
.	O	O
However	O	O
the	O	O
iterator	O	O
is	O	O
not	O	O
guaranteed	O	O
to	O	O
return	O	O
elements	O	O
in	O	O
the	O	O
sorted	O	O
order	O	O
.	O	O
Instead	O	O
(	O	O
as	O	O
Alderath	O	O
points	O	O
out	O	O
in	O	O
the	O	O
comments	O	O
)	O	O
you	O	O
need	O	O
to	O	O
poll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
the	O	O
queue	O	O
until	O	O
empty	O	O
.	O	O
Note	O	O
that	O	O
you	O	O
can	O	O
convert	O	O
a	O	O
list	O	O
to	O	O
a	O	O
priority	O	O
queue	O	O
via	O	O
the	O	O
constructor	O	O
that	O	O
takes	O	O
any	O	O
collection	O	O
:	O	O
#	O	O
pre	O	O
4	O	O
.	O	O
Write	O	O
your	O	O
own	O	O
SortedList	B-api_mention	B-api_mention
class	O	O
NOTE	O	O
:	O	O
You	O	O
shouldn	O	O
'	O	O
t	O	O
have	O	O
to	O	O
do	O	O
this	O	O
.	O	O
You	O	O
can	O	O
write	O	O
your	O	O
own	O	O
List	B-api_mention	B-api_mention
class	O	O
that	O	O
sorts	O	O
each	O	O
time	O	O
you	O	O
add	O	O
a	O	O
new	O	O
element	O	O
.	O	O
This	O	O
can	O	O
get	O	O
rather	O	O
computation	O	O
heavy	O	O
depending	O	O
on	O	O
your	O	O
implementation	O	O
and	O	O
is	O	O
pointless	O	O
,	O	O
unless	O	O
you	O	O
want	O	O
to	O	O
do	O	O
it	O	O
as	O	O
an	O	O
exercise	O	O
,	O	O
because	O	O
of	O	O
two	O	O
main	O	O
reasons	O	O
:	O	O
#	O	O
li	O	O
It	O	O
breaks	O	O
the	O	O
contract	O	O
that	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
has	O	O
,	O	O
because	O	O
the	O	O
add	B-api_mention	O
methods	O	O
should	O	O
ensure	O	O
that	O	O
the	O	O
element	O	O
will	O	O
reside	O	O
in	O	O
the	O	O
index	O	O
that	O	O
the	O	O
user	O	O
specifies	O	O
.	O	O
#	O	O
li	O	O
Why	O	O
reinvent	O	O
the	O	O
wheel	O	O
?	O	O
You	O	O
should	O	O
be	O	O
using	O	O
the	O	O
TreeSet	B-api_mention	B-api_mention
or	O	O
Multisets	B-api_mention	O
instead	O	O
as	O	O
pointed	O	O
out	O	O
in	O	O
the	O	O
first	O	O
point	O	O
above	O	O
.	O	O
However	O	O
if	O	O
you	O	O
want	O	O
to	O	O
do	O	O
it	O	O
as	O	O
an	O	O
exercise	O	O
here	O	O
is	O	O
a	O	O
code	O	O
sample	O	O
to	O	O
get	O	O
you	O	O
started	O	O
,	O	O
it	O	O
uses	O	O
the	O	O
AbstractList	B-api_mention	B-api_mention
abstract	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
if	O	O
you	O	O
haven	O	O
'	O	O
t	O	O
overridden	O	O
the	O	O
methods	O	O
you	O	O
need	O	O
,	O	O
then	O	O
the	O	O
default	O	O
implementations	O	O
from	O	O
AbstractList	B-api_mention	B-api_mention
will	O	O
throw	O	O
UnsupportedOperationException	B-api_mention	B-api_mention
s	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923042	O	O
The	O	O
pattern	O	O
with	O	O
Optional	B-api_mention	B-api_mention
is	O	O
for	O	O
one	O	O
to	O	O
avoid	O	O
returning	O	O
null	O	O
.	O	O
It	O	O
'	O	O
s	O	O
still	O	O
perfectly	O	O
possible	O	O
to	O	O
pass	O	O
in	O	O
null	O	O
to	O	O
a	O	O
method	O	O
.	O	O
While	O	O
these	O	O
aren	O	O
'	O	O
t	O	O
really	O	O
official	O	O
yet	O	O
,	O	O
you	O	O
can	O	O
use	O	O
JSR	O	O
-	O	O
308	O	O
style	O	O
annotations	O	O
to	O	O
indicate	O	O
whether	O	O
or	O	O
not	O	O
you	O	O
accept	O	O
null	O	O
values	O	O
into	O	O
the	O	O
function	O	O
.	O	O
Note	O	O
that	O	O
you	O	O
'	O	O
d	O	O
have	O	O
to	O	O
have	O	O
the	O	O
right	O	O
tooling	O	O
to	O	O
actually	O	O
identify	O	O
it	O	O
,	O	O
and	O	O
it	O	O
'	O	O
d	O	O
provide	O	O
more	O	O
of	O	O
a	O	O
static	O	O
check	O	O
than	O	O
an	O	O
enforceable	O	O
runtime	O	O
policy	O	O
,	O	O
but	O	O
it	O	O
would	O	O
help	O	O
.	O	O
public	O	O
int	O	O
calculateSomething	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
{	O	O
}	O	O
Question	O	O
-	O	O
22725537	O	O
The	O	O
new	O	O
Java	O	O
8	O	O
stream	O	O
framework	O	O
and	O	O
friends	O	O
make	O	O
for	O	O
some	O	O
very	O	O
concise	O	O
java	O	O
code	O	O
,	O	O
but	O	O
I	O	O
have	O	O
come	O	O
across	O	O
a	O	O
seemingly	O	O
-	O	O
simple	O	O
situation	O	O
that	O	O
is	O	O
tricky	O	O
to	O	O
do	O	O
concisely	O	O
.	O	O
Consider	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
things	O	O
and	O	O
method	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
resolve	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
want	O	O
to	O	O
map	O	O
the	O	O
Thing	O	O
s	O	O
to	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
s	O	O
and	O	O
get	O	O
the	O	O
first	O	O
Other	O	O
.	O	O
The	O	O
obvious	O	O
solution	O	O
would	O	O
be	O	O
to	O	O
use	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
flatMap	B-api_mention	B-api_mention
requires	O	O
that	O	O
you	O	O
return	O	O
a	O	O
stream	O	O
,	O	O
and	O	O
Optional	B-api_mention	B-api_mention
doesn	O	O
'	O	O
t	O	O
have	O	O
a	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
(	O	O
or	O	O
is	O	O
it	O	O
a	O	O
Collection	B-api_mention	B-api_mention
or	O	O
provide	O	O
a	O	O
method	O	O
to	O	O
convert	O	O
it	O	O
to	O	O
or	O	O
view	O	O
it	O	O
as	O	O
a	O	O
Collection	B-api_mention	B-api_mention
)	O	O
.	O	O
The	O	O
best	O	O
I	O	O
can	O	O
come	O	O
up	O	O
with	O	O
is	O	O
this	O	O
:	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
that	O	O
seems	O	O
awfully	O	O
long	O	O
-	O	O
winded	O	O
for	O	O
what	O	O
seems	O	O
like	O	O
a	O	O
very	O	O
common	O	O
case	O	O
.	O	O
Anyone	O	O
have	O	O
a	O	O
better	O	O
idea	O	O
?	O	O
Question	O	O
-	O	O
21163108	O	O
,	O	O
answer	O	O
-	O	O
34930831	O	O
To	O	O
measure	O	O
the	O	O
actual	O	O
number	O	O
of	O	O
used	O	O
threads	O	O
,	O	O
you	O	O
can	O	O
check	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
activeCount	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
This	O	O
can	O	O
produce	O	O
on	O	O
a	O	O
4	O	O
-	O	O
core	O	O
CPU	O	O
an	O	O
output	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
Without	O	B-api_mention
.	B-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
gives	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6667243	O	O
What	O	O
is	O	O
the	O	O
best	O	O
way	O	O
to	O	O
use	O	O
the	O	O
values	O	O
stored	O	O
in	O	O
an	O	O
Enum	B-api_mention	B-api_mention
as	O	O
String	B-api_mention	B-api_mention
literals	O	O
?	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
later	O	O
I	O	O
could	O	O
use	O	O
Mode	O	O
.	O	O
mode1	O	O
to	O	O
return	O	O
its	O	O
string	O	O
representation	O	O
as	O	O
mode1	O	O
.	O	O
Without	O	O
having	O	O
to	O	O
keep	O	O
calling	O	O
Mode	O	B-api_mention
.	O	I-api_mention
model	O	I-api_mention
.	B-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
26318569	O	O
I	O	O
am	O	O
getting	O	O
following	O	O
exception	O	O
while	O	O
running	O	O
the	O	O
tests	O	O
.	O	O
I	O	O
am	O	O
using	O	O
Mockito	B-api_mention	B-api_mention
for	O	O
mocking	O	O
.	O	O
The	O	O
hints	O	O
mentioned	O	O
by	O	O
Mockito	B-api_mention	B-api_mention
library	O	O
are	O	O
not	O	O
helping	O	O
.	O	O
#	O	O
pre	O	O
Test	O	O
Code	O	O
from	O	O
DomainTestFactory	O	B-api_mention
.	O	O
When	O	O
I	O	O
run	O	O
the	O	O
following	O	O
test	O	O
,	O	O
I	O	O
see	O	O
the	O	O
exception	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
9297899	O	O
We	O	O
can	O	O
determine	O	O
the	O	O
length	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
using	O	O
its	O	O
public	O	O
method	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
like	O	O
#	O	O
pre	O	O
Similarly	O	O
we	O	O
can	O	O
determine	O	O
the	O	O
length	O	O
of	O	O
an	O	O
Array	O	B-api_mention
object	O	O
using	O	O
the	O	O
length	O	O
property	O	O
#	O	O
pre	O	O
Whereas	O	O
the	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
defined	O	O
inside	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
class	O	O
,	O	O
where	O	O
is	O	O
this	O	O
length	O	O
property	O	O
of	O	O
Array	B-api_mention	B-api_mention
defined	O	O
?	O	O
Question	O	O
-	O	O
31471444	O	O
,	O	O
answer	O	O
-	O	O
31471530	O	O
You	O	O
should	O	O
not	O	O
.	O	O
The	O	O
INTEGER	O	O
_	O	O
ONE	O	O
name	O	O
is	O	O
no	O	O
more	O	O
meaningful	O	O
than	O	O
1	O	O
.	O	O
If	O	O
however	O	O
this	O	O
value	O	O
has	O	O
some	O	O
other	O	O
meaning	O	O
(	O	O
for	O	O
example	O	O
,	O	O
month	O	O
in	O	O
the	O	O
year	O	O
)	O	O
,	O	O
then	O	O
using	O	O
a	O	O
constant	O	O
(	O	O
like	O	O
Calendar	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
FEBRUARY	I-api_mention	I-api_mention
)	O	I-api_mention
will	O	O
make	O	O
your	O	O
code	O	O
clearer	O	O
.	O	O
I	O	O
can	O	O
guess	O	O
that	O	O
this	O	O
constant	O	O
in	O	O
Commons	O	O
Math	O	O
library	O	O
was	O	O
created	O	O
in	O	O
Java	O	O
1	O	O
.	O	O
4	O	O
when	O	O
there	O	O
were	O	O
no	O	O
Integer	B-api_mention	B-api_mention
cache	O	O
and	O	O
autoboxing	O	O
,	O	O
so	O	O
it	O	O
had	O	O
sense	O	O
in	O	O
terms	O	O
that	O	O
you	O	O
may	O	O
reuse	O	O
the	O	O
same	O	O
Integer	B-api_mention	B-api_mention
object	O	O
(	O	O
not	O	O
primitive	O	O
int	O	O
)	O	O
in	O	O
different	O	O
places	O	O
to	O	O
save	O	O
memory	O	O
.	O	O
So	O	O
it	O	O
was	O	O
added	O	O
for	O	O
performance	O	O
reasons	O	O
,	O	O
not	O	O
for	O	O
code	O	O
clarity	O	O
.	O	O
Now	O	O
it	O	O
'	O	O
s	O	O
obsolete	O	O
:	O	O
even	O	O
if	O	O
you	O	O
need	O	O
an	O	O
Integer	B-api_mention	B-api_mention
object	O	O
,	O	O
you	O	O
can	O	O
use	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
implicit	O	O
autoboxing	O	O
and	O	O
get	O	O
the	O	O
cached	O	O
one	O	O
.	O	O
Question	O	O
-	O	O
29691513	O	O
,	O	O
answer	O	O
-	O	O
29727412	O	O
The	O	O
JLS	O	O
describes	O	O
a	O	O
few	O	O
special	O	O
behaviors	O	O
of	O	O
what	O	O
it	O	O
calls	O	O
constant	O	O
variables	O	O
,	O	O
which	O	O
are	O	O
final	O	O
variables	O	O
(	O	O
whether	O	O
static	O	O
or	O	O
not	O	O
)	O	O
which	O	O
are	O	O
initialized	O	O
with	O	O
constant	O	O
expressions	O	O
of	O	O
String	B-api_mention	B-api_mention
or	O	O
primitive	O	O
type	O	O
.	O	O
Constant	O	O
variables	O	O
have	O	O
a	O	O
major	O	O
difference	O	O
with	O	O
respect	O	O
to	O	O
binary	O	O
compatibility	O	O
:	O	O
the	O	O
values	O	O
of	O	O
constant	O	O
variables	O	O
become	O	O
part	O	O
of	O	O
the	O	O
class	O	O
'	O	O
s	O	O
API	O	O
,	O	O
as	O	O
far	O	O
as	O	O
the	O	O
compiler	O	O
is	O	O
concerned	O	O
.	O	O
An	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Here	O	O
,	O	O
XFOO	O	O
is	O	O
a	O	O
"	O	O
constant	O	O
variable	O	O
"	O	O
and	O	O
YFOO	O	O
is	O	O
not	O	O
,	O	O
but	O	O
they	O	O
are	O	O
otherwise	O	O
equivalent	O	O
.	O	O
Class	O	O
Z	O	O
prints	O	O
out	O	O
each	O	O
of	O	O
them	O	O
.	O	O
Compile	O	O
those	O	O
classes	O	O
,	O	O
then	O	O
disassemble	O	O
them	O	O
with	O	O
javap	O	O
-	O	O
v	O	O
X	O	O
Y	O	O
Z	O	O
,	O	O
and	O	O
here	O	O
is	O	O
the	O	O
output	O	O
:	O	O
Class	O	O
X	O	O
:	O	O
#	O	O
pre	O	O
Class	O	O
Y	O	O
:	O	O
#	O	O
pre	O	O
Class	O	O
Z	O	O
:	O	O
#	O	O
pre	O	O
Things	O	O
to	O	O
notice	O	O
in	O	O
the	O	O
disassembly	O	O
,	O	O
which	O	O
tell	O	O
you	O	O
the	O	O
differences	O	O
between	O	O
X	O	O
and	O	O
Y	O	O
run	O	O
deeper	O	O
than	O	O
syntactic	O	O
sugar	O	O
:	O	O
#	O	O
li	O	O
XFOO	O	O
has	O	O
a	O	O
ConstantValue	O	B-api_mention
attribute	O	O
,	O	O
signifying	O	O
that	O	O
its	O	O
value	O	O
is	O	O
a	O	O
compile	O	O
-	O	O
time	O	O
constant	O	O
.	O	O
Whereas	O	O
YFOO	O	O
does	O	O
not	O	O
,	O	O
and	O	O
uses	O	O
a	O	O
static	O	O
block	O	O
with	O	O
a	O	O
putstatic	O	O
instruction	O	O
to	O	O
initialize	O	O
the	O	O
value	O	O
at	O	O
runtime	O	O
.	O	O
#	O	O
li	O	O
The	O	O
String	B-api_mention	B-api_mention
constant	O	O
StringLiteral	O	O
has	O	O
become	O	O
part	O	O
of	O	O
class	O	O
Z	O	O
'	O	O
s	O	O
constant	O	O
pool	O	O
,	O	O
but	O	O
StringLiteral	O	O
has	O	O
not	O	O
.	O	O
#	O	O
li	O	O
Z	O	O
.	O	O
main	O	O
uses	O	O
the	O	O
ldc	O	O
(	O	O
load	O	O
constant	O	O
)	O	O
instruction	O	O
to	O	O
load	O	O
StringLiteral	O	O
onto	O	O
the	O	O
stack	O	O
directly	O	O
from	O	O
its	O	O
own	O	O
constant	O	O
pool	O	O
,	O	O
but	O	O
it	O	O
uses	O	O
a	O	O
getstatic	O	O
instruction	O	O
to	O	O
load	O	O
the	O	O
value	O	O
of	O	O
Y	O	O
.	O	O
YFOO	O	O
.	O	O
Other	O	O
differences	O	O
you	O	O
will	O	O
find	O	O
:	O	O
#	O	O
li	O	O
If	O	O
you	O	O
change	O	O
the	O	O
value	O	O
of	O	O
XFOO	O	O
and	O	O
recompile	O	O
X	O	O
.	O	O
java	O	O
but	O	O
not	O	O
Z	O	O
.	O	O
java	O	O
,	O	O
you	O	O
have	O	O
a	O	O
problem	O	O
:	O	O
class	O	O
Z	O	O
is	O	O
still	O	O
using	O	O
the	O	O
old	O	O
value	O	O
.	O	O
If	O	O
you	O	O
change	O	O
the	O	O
value	O	O
of	O	O
YFOO	O	O
and	O	O
recompile	O	O
Y	O	O
.	O	O
java	O	O
,	O	O
class	O	O
Z	O	O
uses	O	O
the	O	O
new	O	O
value	O	O
whether	O	O
you	O	O
recompile	O	O
Z	O	O
.	O	O
java	O	O
or	O	O
not	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
delete	O	O
the	O	O
X	O	O
.	O	O
class	O	O
file	O	O
entirely	O	O
,	O	O
class	O	O
Z	O	O
still	O	O
runs	O	O
correctly	O	O
.	O	O
Z	O	O
has	O	O
no	O	O
runtime	O	O
dependency	O	O
on	O	O
X	O	O
.	O	O
Whereas	O	O
if	O	O
you	O	O
delete	O	O
the	O	O
Y	O	O
.	O	O
class	O	O
file	O	O
,	O	O
class	O	O
Z	O	O
fails	O	O
to	O	O
initialize	O	O
with	O	O
a	O	O
ClassNotFoundException	B-api_mention	B-api_mention
:	O	O
Y	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
generate	O	O
documentation	O	O
for	O	O
the	O	O
classes	O	O
with	O	O
javadoc	O	O
,	O	O
the	O	O
"	O	O
Constant	O	O
Field	O	O
Values	O	O
"	O	O
page	O	O
will	O	O
document	O	O
the	O	O
value	O	O
of	O	O
XFOO	O	O
,	O	O
but	O	O
not	O	O
the	O	O
value	O	O
of	O	O
YFOO	O	O
.	O	O
The	O	O
JLS	O	O
describes	O	O
the	O	O
above	O	O
effects	O	O
constant	O	O
variables	O	O
have	O	O
on	O	O
compiled	O	O
class	O	O
files	O	O
in	O	O
§	O	O
13	O	O
.	O	O
1	O	O
.	O	O
3	O	O
:	O	O
#	O	O
blockquote	O	O
And	O	O
in	O	O
§	O	O
13	O	O
.	O	O
4	O	O
.	O	O
9	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
upshot	O	O
is	O	O
that	O	O
if	O	O
your	O	O
public	O	O
library	O	O
exposes	O	O
any	O	O
constant	O	O
variables	O	O
,	O	O
you	O	O
must	O	O
never	O	O
change	O	O
their	O	O
values	O	O
if	O	O
your	O	O
new	O	O
library	O	O
version	O	O
is	O	O
otherwise	O	O
supposed	O	O
to	O	O
be	O	O
compatible	O	O
with	O	O
code	O	O
compiled	O	O
against	O	O
old	O	O
versions	O	O
of	O	O
the	O	O
library	O	O
.	O	O
It	O	O
won	O	O
'	O	O
t	O	O
necessarily	O	O
cause	O	O
an	O	O
error	O	O
,	O	O
but	O	O
the	O	O
existing	O	O
code	O	O
will	O	O
probably	O	O
malfunction	O	O
since	O	O
it	O	O
will	O	O
have	O	O
outdated	O	O
ideas	O	O
about	O	O
the	O	O
values	O	O
of	O	O
constants	O	O
.	O	O
(	O	O
If	O	O
your	O	O
new	O	O
library	O	O
version	O	O
needs	O	O
for	O	O
classes	O	O
which	O	O
use	O	O
it	O	O
to	O	O
be	O	O
recompiled	O	O
anyway	O	O
,	O	O
then	O	O
changing	O	O
constants	O	O
doesn	O	O
'	O	O
t	O	O
cause	O	O
this	O	O
problem	O	O
.	O	O
)	O	O
Thus	O	O
,	O	O
initializing	O	O
a	O	O
constant	O	O
with	O	O
a	O	O
block	O	O
gives	O	O
you	O	O
more	O	O
freedom	O	O
to	O	O
change	O	O
its	O	O
value	O	O
,	O	O
because	O	O
it	O	O
prevents	O	O
the	O	O
compiler	O	O
embedding	O	O
the	O	O
value	O	O
into	O	O
other	O	O
classes	O	O
.	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28584932	O	O
Your	O	O
reasoning	O	O
is	O	O
that	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
should	O	O
not	O	O
be	O	O
equal	O	O
to	O	O
itself	O	O
because	O	O
it	O	O
is	O	O
“	O	O
likely	O	O
”	O	O
to	O	O
have	O	O
been	O	O
obtained	O	O
as	O	O
the	O	O
result	O	O
of	O	O
a	O	O
loss	O	O
of	O	O
accuracy	O	O
.	O	O
This	O	O
line	O	O
of	O	O
reasoning	O	O
applies	O	O
to	O	O
all	O	O
of	O	O
floating	O	O
-	O	O
point	O	O
.	O	O
Any	O	O
finite	O	O
value	O	O
can	O	O
be	O	O
obtained	O	O
as	O	O
the	O	O
result	O	O
of	O	O
an	O	O
inaccurate	O	O
operation	O	O
.	O	O
That	O	O
did	O	O
not	O	O
push	O	O
the	O	O
IEEE	O	O
754	O	O
standardization	O	O
committee	O	O
to	O	O
define	O	O
=	O	O
=	O	O
as	O	O
always	O	O
evaluating	O	O
to	O	O
false	O	O
for	O	O
finite	O	O
values	O	O
,	O	O
so	O	O
why	O	O
should	O	O
infinities	O	O
be	O	O
different	O	O
?	O	O
As	O	O
defined	O	O
,	O	O
=	O	O
=	O	O
is	O	O
useful	O	O
for	O	O
people	O	O
who	O	O
understand	O	O
what	O	O
it	O	O
does	O	O
(	O	O
that	O	O
is	O	O
,	O	O
test	O	O
the	O	O
floating	O	O
-	O	O
point	O	O
values	O	O
that	O	O
have	O	O
been	O	O
obtained	O	O
,	O	O
and	O	O
certainly	O	O
not	O	O
the	O	O
values	O	O
that	O	O
should	O	O
have	O	O
been	O	O
obtained	O	O
with	O	O
real	O	O
computations	O	O
)	O	O
.	O	O
For	O	O
anyone	O	O
who	O	O
understands	O	O
that	O	O
,	O	O
and	O	O
you	O	O
need	O	O
to	O	O
understand	O	O
it	O	O
to	O	O
use	O	O
floating	O	O
-	O	O
point	O	O
even	O	O
for	O	O
computations	O	O
that	O	O
do	O	O
not	O	O
involve	O	O
infinity	O	O
,	O	O
having	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
=	O	O
=	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
evaluate	O	O
to	O	O
true	O	O
is	O	O
convenient	O	O
,	O	O
if	O	O
only	O	O
to	O	O
test	O	O
if	O	O
the	O	O
floating	O	O
-	O	O
point	O	O
result	O	O
of	O	O
a	O	O
floating	O	O
-	O	O
point	O	O
computation	O	O
is	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
.	O	O
That	O	O
leaves	O	O
the	O	O
question	O	O
of	O	O
why	O	O
NaN	O	O
can	O	O
afford	O	O
to	O	O
have	O	O
special	O	O
behavior	O	O
,	O	O
and	O	O
infinities	O	O
should	O	O
follow	O	O
the	O	O
same	O	O
general	O	O
principles	O	O
as	O	O
finite	O	O
values	O	O
.	O	O
NaN	O	O
is	O	O
different	O	O
from	O	O
infinities	O	O
:	O	O
the	O	O
underlying	O	O
principle	O	O
of	O	O
the	O	O
IEEE	O	O
754	O	O
standard	O	O
is	O	O
that	O	O
values	O	O
are	O	O
exactly	O	O
what	O	O
they	O	O
are	O	O
,	O	O
but	O	O
the	O	O
result	O	O
of	O	O
an	O	O
operation	O	O
can	O	O
be	O	O
approximated	O	O
with	O	O
respect	O	O
to	O	O
the	O	O
real	O	O
result	O	O
,	O	O
and	O	O
in	O	O
this	O	O
case	O	O
,	O	O
the	O	O
resulting	O	O
floating	O	O
-	O	O
point	O	O
value	O	O
is	O	O
obtained	O	O
according	O	O
to	O	O
the	O	O
rounding	O	O
mode	O	O
.	O	O
Forget	O	O
for	O	O
an	O	O
instant	O	O
that	O	O
1	O	O
.	O	O
0	O	O
/	O	O
0	O	O
.	O	O
0	O	O
is	O	O
defined	O	O
as	O	O
+	O	O
inf	O	O
,	O	O
which	O	O
is	O	O
an	O	O
annoyance	O	O
in	O	O
this	O	O
discussion	O	O
.	O	O
Think	O	O
for	O	O
the	O	O
moment	O	O
of	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
only	O	O
as	O	O
the	O	O
result	O	O
of	O	O
operations	O	O
such	O	O
as	O	O
1	O	O
.	O	O
0e100	O	O
/	O	O
1	O	O
.	O	O
0e	O	O
-	O	O
300	O	O
or	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
+	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
For	O	O
these	O	O
operations	O	O
,	O	O
+	O	O
inf	O	O
is	O	O
the	O	O
closest	O	O
approximation	O	O
of	O	O
the	O	O
real	O	O
result	O	O
,	O	O
just	O	O
like	O	O
for	O	O
operations	O	O
that	O	O
produce	O	O
a	O	O
finite	O	O
result	O	O
.	O	O
By	O	O
contrast	O	O
,	O	O
NaN	O	O
is	O	O
the	O	O
result	O	O
you	O	O
obtain	O	O
when	O	O
the	O	O
operation	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
.	O	O
It	O	O
is	O	O
defensible	O	O
to	O	O
have	O	O
NaN	O	O
behave	O	O
specially	O	O
,	O	O
but	O	O
inf	O	O
is	O	O
just	O	O
an	O	O
approximation	O	O
of	O	O
all	O	O
the	O	O
values	O	O
too	O	O
large	O	O
to	O	O
represent	O	O
.	O	O
In	O	O
reality	O	O
,	O	O
1	O	O
.	O	O
0	O	O
/	O	O
0	O	O
.	O	O
0	O	O
also	O	O
produces	O	O
+	O	O
inf	O	O
,	O	O
but	O	O
that	O	O
should	O	O
be	O	O
considered	O	O
an	O	O
exception	O	O
.	O	O
It	O	O
would	O	O
have	O	O
been	O	O
just	O	O
as	O	O
coherent	O	O
to	O	O
define	O	O
the	O	O
result	O	O
of	O	O
that	O	O
operation	O	O
as	O	O
NaN	O	O
,	O	O
but	O	O
defining	O	O
it	O	O
as	O	O
+	O	O
inf	O	O
was	O	O
more	O	O
convenient	O	O
in	O	O
the	O	O
implementation	O	O
of	O	O
some	O	O
algorithms	O	O
.	O	O
An	O	O
example	O	O
is	O	O
provided	O	O
page	O	O
10	O	O
in	O	O
Kahan	O	O
'	O	O
s	O	O
notes	O	O
.	O	O
More	O	O
details	O	O
than	O	O
most	O	O
will	O	O
wish	O	O
for	O	O
are	O	O
in	O	O
the	O	O
article	O	O
“	O	O
Branch	O	O
Cuts	O	O
for	O	O
Complex	O	O
Elementary	O	O
Functions	O	O
,	O	O
or	O	O
Much	O	O
Ado	O	O
About	O	O
Nothing	O	O
'	O	O
s	O	O
Sign	O	O
Bit	O	O
”	O	O
.	O	O
I	O	O
would	O	O
also	O	O
interpret	O	O
the	O	O
existence	O	O
in	O	O
IEEE	O	O
754	O	O
of	O	O
a	O	O
“	O	O
division	O	O
by	O	O
zero	O	O
”	O	O
flag	O	O
separate	O	O
from	O	O
the	O	O
NaN	O	O
flag	O	O
as	O	O
recognition	O	O
that	O	O
the	O	O
user	O	O
may	O	O
want	O	O
to	O	O
treat	O	O
division	O	O
by	O	O
zero	O	O
specially	O	O
although	O	O
it	O	O
is	O	O
not	O	O
defined	O	O
as	O	O
producing	O	O
NaN	O	O
.	O	O
Question	O	O
-	O	O
27908213	O	O
,	O	O
answer	O	O
-	O	O
27908302	O	O
With	O	O
strings	O	O
you	O	O
'	O	O
re	O	O
going	O	O
to	O	O
want	O	O
to	O	O
use	O	O
the	O	O
equals	B-api_mention	O
method	O	O
of	O	O
Strings	B-api_mention	O
.	O	O
That	O	O
aside	O	O
,	O	O
you	O	O
already	O	O
have	O	O
the	O	O
enum	O	O
that	O	O
you	O	O
could	O	O
compare	O	O
with	O	O
the	O	O
equality	O	O
operator	O	O
.	O	O
Under	O	O
what	O	O
scenario	O	O
would	O	O
this	O	O
arise	O	O
?	O	O
That	O	O
being	O	O
said	O	O
,	O	O
yes	O	O
,	O	O
the	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
method	O	O
will	O	O
return	O	O
true	O	O
if	O	O
they	O	O
are	O	O
the	O	O
same	O	O
.	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
about	O	O
equality	O	O
operator	O	O
,	O	O
and	O	O
without	O	O
looking	O	O
it	O	O
up	O	O
,	O	O
I	O	O
can	O	O
tell	O	O
you	O	O
that	O	O
it	O	O
'	O	O
s	O	O
poor	O	O
programming	O	O
to	O	O
use	O	O
it	O	O
if	O	O
it	O	O
is	O	O
.	O	O
Question	O	O
-	O	O
23653778	O	O
,	O	O
answer	O	O
-	O	O
25564062	O	O
Try	O	O
OnStart	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
and	O	O
just	O	O
use	O	O
View	B-api_mention	B-api_mention
view	O	O
=	O	O
getView	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findViewById	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
Declare	O	O
any	O	O
View	B-api_mention	O
using	O	O
getView	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	O
findViewById	I-api_mention	O
method	O	O
in	O	O
onStart	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Declare	O	O
click	O	O
listener	O	O
on	O	O
view	O	O
by	O	O
anyView	O	O
.	B-api_mention	B-api_mention
setOnClickListener	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
28671903	O	O
,	O	O
answer	O	O
-	O	O
28672583	O	O
The	O	O
behaviour	O	O
is	O	O
(	O	O
somewhat	O	O
)	O	O
documented	O	O
in	O	O
the	O	O
javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
What	O	O
this	O	O
means	O	O
in	O	O
practice	O	O
,	O	O
when	O	O
you	O	O
call	O	O
source	O	O
.	B-api_mention	B-api_mention
removeAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
:	O	O
#	O	O
li	O	O
if	O	O
the	O	O
removals	O	O
collection	O	O
is	O	O
of	O	O
a	O	O
smaller	O	O
size	O	O
than	O	O
source	O	O
,	O	O
the	O	O
remove	O	O
method	O	O
of	O	O
HashSet	B-api_mention	B-api_mention
is	O	O
called	O	O
,	O	O
which	O	O
is	O	O
fast	O	O
.	O	O
#	O	O
li	O	O
if	O	O
the	O	O
removals	O	O
collection	O	O
is	O	O
of	O	O
equal	O	O
or	O	O
larger	O	O
size	O	O
than	O	O
the	O	O
source	O	O
,	O	O
then	O	O
removals	O	B-api_mention
.	B-api_mention	I-api_mention
contains	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
which	O	O
is	O	O
slow	O	O
for	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
.	O	O
Quick	O	O
fix	O	O
:	O	O
Collection	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
removals	O	O
=	O	O
new	O	O
HashSet	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
that	O	O
there	O	O
is	O	O
an	O	O
open	O	O
bug	O	O
that	O	O
is	O	O
very	O	O
similar	O	O
to	O	O
what	O	O
you	O	O
describe	O	O
.	O	O
The	O	O
bottom	O	O
line	O	O
seems	O	O
to	O	O
be	O	O
that	O	O
it	O	O
is	O	O
probably	O	O
a	O	O
poor	O	O
choice	O	O
but	O	O
can	O	O
'	O	O
t	O	O
be	O	O
changed	O	O
because	O	O
it	O	O
is	O	O
documented	O	O
in	O	O
the	O	O
javadoc	O	O
.	O	O
For	O	O
reference	O	O
,	O	O
this	O	O
is	O	O
the	O	O
code	O	O
of	O	O
removeAll	B-api_mention	B-api_mention
(	O	O
in	O	O
Java	O	O
8	O	O
-	O	O
haven	O	O
'	O	O
t	O	O
checked	O	O
other	O	O
versions	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32175175	O	O
Note	O	O
that	O	O
a	O	O
.	O	O
b	O	O
and	O	O
c	O	O
are	O	O
instances	O	O
of	O	O
primitive	O	O
wrapper	O	O
classes	O	O
(	O	O
such	O	O
as	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
,	O	O
etc	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
These	O	O
classes	O	O
are	O	O
final	O	O
and	O	O
cannot	O	O
be	O	O
extended	O	O
,	O	O
so	O	O
you	O	O
can	O	O
'	O	O
t	O	O
override	O	O
their	O	O
equals	O	O
implementation	O	O
.	O	O
Therefore	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
always	O	O
return	O	O
true	O	O
,	O	O
since	O	O
those	O	O
classes	O	O
implement	O	O
equals	O	B-api_mention
properly	O	O
.	O	O
Question	O	O
-	O	O
31316581	O	O
,	O	O
answer	O	O
-	O	O
31327420	O	O
If	O	O
type	O	O
inference	O	O
produces	O	O
a	O	O
single	O	O
upper	O	O
bound	O	O
for	O	O
a	O	O
type	O	O
variable	O	O
,	O	O
typically	O	O
the	O	O
upper	O	O
bound	O	O
is	O	O
chosen	O	O
as	O	O
the	O	O
solution	O	O
.	O	O
For	O	O
example	O	O
,	O	O
if	O	O
T	O	O
<	O	O
<	O	O
Number	O	O
,	O	O
the	O	O
solution	O	O
is	O	O
T	O	O
=	O	O
Number	O	O
.	O	O
Although	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
etc	O	O
.	O	O
could	O	O
also	O	O
satisfy	O	O
the	O	O
constraint	O	O
,	O	O
there	O	O
'	O	O
s	O	O
no	O	O
good	O	O
reason	O	O
to	O	O
choose	O	O
them	O	O
over	O	O
Number	B-api_mention	O
.	O	O
That	O	O
was	O	O
also	O	O
the	O	O
case	O	O
for	O	O
throws	O	O
T	O	O
in	O	O
java	O	O
5	O	O
-	O	O
7	O	O
:	O	O
T	O	O
<	O	O
<	O	O
Throwable	B-api_mention	O
=	O	O
>	O	O
T	O	O
=	O	O
Throwable	B-api_mention	B-api_mention
.	O	I-api_mention
(	O	I-api_mention
Sneaky	O	I-api_mention
throw	O	O
solutions	O	O
all	O	O
had	O	O
explicit	O	O
<	O	O
RuntimeException	B-api_mention	B-api_mention
>	O	O
type	O	O
arguments	O	O
,	O	O
otherwise	O	O
<	O	O
Throwable	O	O
>	O	O
is	O	O
inferred	O	O
.	O	O
)	O	O
In	O	O
java8	O	O
,	O	O
with	O	O
the	O	O
introduction	O	O
of	O	O
lambda	O	O
,	O	O
this	O	O
becomes	O	O
problematic	O	O
.	O	O
Consider	O	O
this	O	O
case	O	O
#	O	O
pre	O	O
If	O	O
we	O	O
invoke	O	O
with	O	O
an	O	O
empty	O	O
lambda	O	O
,	O	O
what	O	O
would	O	O
T	O	O
be	O	O
inferred	O	O
as	O	O
?	O	O
invoke	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
only	O	O
constraint	O	O
on	O	O
T	O	O
is	O	O
an	O	O
upper	O	O
bound	O	O
Throwable	B-api_mention	B-api_mention
.	O	O
In	O	O
earlier	O	O
stage	O	O
of	O	O
java8	O	O
,	O	O
T	O	O
=	O	O
Throwable	B-api_mention	O
would	O	O
be	O	O
inferred	O	O
.	O	O
See	O	O
this	O	O
report	O	O
I	O	O
filed	O	O
.	O	O
But	O	O
that	O	O
is	O	O
pretty	O	O
silly	O	O
,	O	O
to	O	O
infer	O	O
Throwable	B-api_mention	O
,	O	O
a	O	O
checked	O	O
exception	O	O
,	O	O
out	O	O
of	O	O
an	O	O
empty	O	O
block	O	O
.	O	O
A	O	O
solution	O	O
was	O	O
proposed	O	O
in	O	O
the	O	O
report	O	O
(	O	O
which	O	O
is	O	O
apparently	O	O
adopted	O	O
by	O	O
JLS	O	O
)	O	O
-	O	O
#	O	O
pre	O	O
i	O	O
.	O	O
e	O	O
.	O	O
if	O	O
the	O	O
upper	O	O
bound	O	O
is	O	O
Exception	B-api_mention	B-api_mention
or	O	O
Throwable	B-api_mention	O
,	O	O
choose	O	O
RuntimeException	B-api_mention	B-api_mention
as	O	O
the	O	O
solution	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
there	O	O
is	O	O
a	O	O
good	O	O
reason	O	O
to	O	O
choose	O	O
a	O	O
particular	O	O
subtype	O	O
of	O	O
the	O	O
upper	O	O
bound	O	O
.	O	O
Question	O	O
-	O	O
27683759	O	O
,	O	O
answer	O	O
-	O	O
27684040	O	O
That	O	O
line	O	O
creates	O	O
an	O	O
empty	O	O
list	O	O
of	O	O
strings	O	O
by	O	O
calling	O	O
a	O	O
static	O	O
method	O	O
with	O	O
a	O	O
generic	O	O
type	O	O
parameter	O	O
.	O	O
Inside	O	O
the	O	O
Collections	B-api_mention	B-api_mention
class	O	O
,	O	O
there	O	O
is	O	O
a	O	O
static	O	O
method	O	O
emptyList	O	B-api_mention
declared	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
has	O	O
a	O	O
generic	O	O
type	O	O
parameter	O	O
T	B-api_mention	O
.	O	O
We	O	O
call	O	O
call	O	O
this	O	O
method	O	O
by	O	O
using	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
emptyList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
T	O	O
is	O	O
infered	O	O
to	O	O
be	O	O
a	O	O
String	B-api_mention	B-api_mention
because	O	O
of	O	O
the	O	O
type	O	O
of	O	O
list	O	O
.	O	O
We	O	O
can	O	O
also	O	O
specify	O	O
the	O	O
type	O	O
of	O	O
T	O	O
by	O	O
putting	O	O
it	O	O
in	O	O
angle	O	O
brackets	O	O
when	O	O
calling	O	O
emptyList	B-api_mention	B-api_mention
.	O	O
This	O	O
may	O	O
be	O	O
needed	O	O
if	O	O
we	O	O
want	O	O
a	O	O
more	O	O
specific	O	O
type	O	O
than	O	O
is	O	O
inferred	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
emptyList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
emptyList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
not	O	O
correct	O	O
because	O	O
that	O	O
placement	O	O
is	O	O
only	O	O
valid	O	O
when	O	O
creating	O	O
instances	O	O
of	O	O
generic	O	O
classes	O	O
,	O	O
not	O	O
calling	O	O
methods	O	O
.	O	O
When	O	O
using	O	O
new	O	O
there	O	O
are	O	O
two	O	O
possible	O	O
type	O	O
parameters	O	O
,	O	O
the	O	O
ones	O	O
before	O	O
the	O	O
class	O	O
name	O	O
are	O	O
for	O	O
the	O	O
constructor	O	O
only	O	O
,	O	O
and	O	O
the	O	O
ones	O	O
after	O	O
the	O	O
class	O	O
name	O	O
are	O	O
for	O	O
the	O	O
whole	O	O
instance	O	O
,	O	O
so	O	O
with	O	O
the	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
We	O	O
can	O	O
call	O	O
its	O	O
constructor	O	O
where	O	O
A	O	O
is	O	O
String	B-api_mention	B-api_mention
and	O	O
B	O	O
is	O	O
Integer	B-api_mention	B-api_mention
like	O	O
:	O	O
MyClass	O	O
<	O	O
T	O	O
>	O	O
a	O	O
=	O	O
new	O	O
<	O	O
T	O	O
>	O	O
MyClass	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
or	O	O
by	O	O
using	O	O
type	O	O
inference	O	O
:	O	O
MyClass	O	O
<	O	O
T	O	O
>	O	O
a	O	O
=	O	O
new	O	O
MyClass	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
See	O	O
also	O	O
:	O	O
#	O	O
li	O	O
Generic	O	O
Methods	O	O
#	O	O
li	O	O
Type	O	O
Inference	O	O
Question	O	O
-	O	O
20331163	O	O
I	O	O
have	O	O
a	O	O
string	O	O
"	O	O
11	O	O
/	O	O
15	O	O
/	O	O
2013	O	O
08	O	O
:	O	O
00	O	O
:	O	O
00	O	O
"	O	O
,	O	O
I	O	O
want	O	O
to	O	O
format	O	O
it	O	O
to	O	O
"	O	O
11	O	O
/	O	O
15	O	O
/	O	O
2013	O	O
"	O	O
,	O	O
what	O	O
is	O	O
the	O	O
correct	O	O
DateTimeFormatter	B-api_mention	B-api_mention
pattern	O	O
?	O	O
I	O	O
'	O	O
ve	O	O
tried	O	O
many	O	O
and	O	O
googled	O	O
and	O	O
still	O	O
unable	O	O
to	O	O
find	O	O
the	O	O
correct	O	O
pattern	O	O
.	O	O
edit	O	O
:	O	O
I	O	O
am	O	O
looking	O	O
for	O	O
Joda	O	O
-	O	O
Time	O	O
DateTimeFormatter	B-api_mention	B-api_mention
,	O	O
not	O	O
Java	O	O
'	O	O
s	O	O
SimpleDateFormat	B-api_mention	B-api_mention
.	O	O
.	O	O
Question	O	O
-	O	O
28770822	O	O
,	O	O
answer	O	O
-	O	O
28816219	O	O
Looking	O	O
at	O	O
the	O	O
issue	O	O
and	O	O
fix	O	O
,	O	O
it	O	O
looks	O	O
like	O	O
this	O	O
has	O	O
been	O	O
done	O	O
to	O	O
resolve	O	O
a	O	O
handling	O	O
of	O	O
a	O	O
header	O	O
file	O	O
generation	O	O
for	O	O
special	O	O
classes	O	O
in	O	O
jigsaw	O	O
Jigsaw	O	O
is	O	O
a	O	O
module	O	O
system	O	O
designated	O	O
to	O	O
use	O	O
in	O	O
Java	O	O
SE	O	O
Platform	O	O
and	O	O
JDK	O	O
.	O	O
More	O	O
details	O	O
here	O	O
Here	O	O
is	O	O
a	O	O
corresponding	O	O
changeset	O	O
.	O	O
You	O	O
can	O	O
see	O	O
a	O	O
comment	O	O
,	O	O
#	O	O
blockquote	O	O
From	O	O
the	O	O
changeset	O	O
I	O	O
see	O	O
that	O	O
for	O	O
the	O	O
sake	O	O
of	O	O
purpose	O	O
in	O	O
addition	O	O
to	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Integer	I-api_mention	I-api_mention
and	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Long	I-api_mention	I-api_mention
,	O	O
also	O	O
some	O	O
properties	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
net	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
SocketOptions	I-api_mention	I-api_mention
,	O	O
sun	B-api_mention	O
.	I-api_mention	O
nio	I-api_mention	O
.	I-api_mention	O
ch	I-api_mention	O
.	I-api_mention	O
IOStatus	I-api_mention	O
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
io	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
FileSystem	I-api_mention	I-api_mention
have	O	O
been	O	O
changed	O	O
to	O	O
@	O	O
Native	O	O
.	O	O
So	O	O
I	O	O
assume	O	O
only	O	O
those	O	O
were	O	O
needed	O	O
to	O	O
solve	O	O
the	O	O
dependency	O	O
with	O	O
jigsaw	O	O
.	O	O
Question	O	O
-	O	O
10827872	O	O
,	O	O
answer	O	O
-	O	O
30749407	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
doesn	O	O
'	O	O
t	O	O
uses	O	O
regex	O	O
pattern	O	O
whereas	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
uses	O	O
regex	O	O
pattern	O	O
.	O	O
So	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
performs	O	O
faster	O	O
than	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
24676877	O	O
,	O	O
answer	O	O
-	O	O
24681959	O	O
I	O	O
have	O	O
a	O	O
few	O	O
points	O	O
to	O	O
add	O	O
to	O	O
Brian	O	O
Goetz	O	O
'	O	O
excellent	O	O
answer	O	O
.	O	O
It	O	O
'	O	O
s	O	O
quite	O	O
common	O	O
to	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
from	O	O
a	O	O
"	O	O
getter	O	O
"	O	O
style	O	O
method	O	O
call	O	O
.	O	O
See	O	O
the	O	O
Stream	B-api_mention	B-api_mention
usage	O	O
page	O	O
in	O	O
the	O	O
Java	O	O
8	O	O
javadoc	O	O
and	O	O
look	O	O
for	O	O
"	O	O
methods	O	O
.	O	O
.	O	O
.	O	O
that	O	O
return	O	O
Stream	B-api_mention	B-api_mention
"	O	O
for	O	O
the	O	O
packages	O	O
other	O	O
than	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Stream	I-api_mention	I-api_mention
.	O	O
These	O	O
methods	O	O
are	O	O
usually	O	O
on	O	O
classes	O	O
that	O	O
represent	O	O
or	O	O
can	O	O
contain	O	O
multiple	O	O
values	O	O
or	O	O
aggregations	O	O
of	O	O
something	O	O
.	O	O
In	O	O
such	O	O
cases	O	O
,	O	O
APIs	O	O
typically	O	O
have	O	O
returned	O	O
collections	O	O
or	O	O
arrays	O	O
of	O	O
them	O	O
.	O	O
For	O	O
all	O	O
the	O	O
reasons	O	O
that	O	O
Brian	O	O
noted	O	O
in	O	O
his	O	O
answer	O	O
,	O	O
it	O	O
'	O	O
s	O	O
very	O	O
flexible	O	O
to	O	O
add	O	O
Stream	B-api_mention	B-api_mention
-	O	O
returning	O	O
methods	O	O
here	O	O
.	O	O
Many	O	O
of	O	O
these	O	O
classes	O	O
have	O	O
collections	O	O
-	O	O
or	O	O
array	O	O
-	O	O
returning	O	O
methods	O	O
already	O	O
,	O	O
because	O	O
the	O	O
classes	O	O
predate	O	O
the	O	O
Streams	B-api_mention	O
API	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
designing	O	O
a	O	O
new	O	O
API	O	O
,	O	O
and	O	O
it	O	O
makes	O	O
sense	O	O
to	O	O
provide	O	O
Stream	B-api_mention	B-api_mention
-	O	O
returning	O	O
methods	O	O
,	O	O
it	O	O
might	O	O
not	O	O
be	O	O
necessary	O	O
to	O	O
add	O	O
collection	O	O
-	O	O
returning	O	O
methods	O	O
as	O	O
well	O	O
.	O	O
Brian	O	O
mentioned	O	O
the	O	O
cost	O	O
of	O	O
"	O	O
materializing	O	O
"	O	O
the	O	O
values	O	O
into	O	O
a	O	O
collection	O	O
.	O	O
To	O	O
amplify	O	O
this	O	O
point	O	O
,	O	O
there	O	O
are	O	O
actually	O	O
two	O	O
costs	O	O
here	O	O
:	O	O
the	O	O
cost	O	O
of	O	O
storing	O	O
values	O	O
in	O	O
the	O	O
collection	O	O
(	O	O
memory	O	O
allocation	O	O
and	O	O
copying	O	O
)	O	O
and	O	O
also	O	O
the	O	O
cost	O	O
of	O	O
creating	O	O
the	O	O
values	O	O
in	O	O
the	O	O
first	O	O
place	O	O
.	O	O
The	O	O
latter	O	O
cost	O	O
can	O	O
often	O	O
be	O	O
reduced	O	O
or	O	O
avoided	O	O
by	O	O
taking	O	O
advantage	O	O
of	O	O
a	O	O
Stream	B-api_mention	B-api_mention
'	O	O
s	O	O
laziness	O	O
-	O	O
seeking	O	O
behavior	O	O
.	O	O
A	O	O
good	O	O
example	O	O
of	O	O
this	O	O
are	O	O
the	O	O
APIs	O	O
in	O	O
java	B-api_mention	O
.	I-api_mention	O
nio	I-api_mention	O
.	I-api_mention	O
file	I-api_mention	O
.	I-api_mention	O
Files	I-api_mention	O
:	O	O
#	O	O
pre	O	O
Not	O	O
only	O	O
does	O	O
readAllLines	B-api_mention	O
have	O	O
to	O	O
hold	O	O
the	O	O
entire	O	O
file	O	O
contents	O	O
in	O	O
memory	O	O
in	O	O
order	O	O
to	O	O
store	O	O
it	O	O
into	O	O
the	O	O
result	O	O
list	O	O
,	O	O
it	O	O
also	O	O
has	O	O
to	O	O
read	O	O
the	O	O
file	O	O
to	O	O
the	O	O
very	O	O
end	O	O
before	O	O
it	O	O
returns	O	O
the	O	O
list	O	O
.	O	O
The	O	O
lines	B-api_mention	O
method	O	O
can	O	O
return	O	O
almost	O	O
immediately	O	O
after	O	O
it	O	O
has	O	O
performed	O	O
some	O	O
setup	O	O
,	O	O
leaving	O	O
file	O	O
reading	O	O
and	O	O
line	O	O
breaking	O	O
until	O	O
later	O	O
when	O	O
it	O	O
'	O	O
s	O	O
necessary	O	O
-	O	O
-	O	O
or	O	O
not	O	O
at	O	O
all	O	O
.	O	O
This	O	O
is	O	O
a	O	O
huge	O	O
benefit	O	O
,	O	O
if	O	O
for	O	O
example	O	O
,	O	O
the	O	O
caller	O	O
is	O	O
interested	O	O
only	O	O
in	O	O
the	O	O
first	O	O
ten	O	O
lines	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
firstTen	O	O
=	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Of	O	O
course	O	O
considerable	O	O
memory	O	O
space	O	O
can	O	O
be	O	O
saved	O	O
if	O	O
the	O	O
caller	O	O
filters	O	O
the	O	O
stream	O	O
to	O	O
return	O	O
only	O	O
lines	O	O
matching	O	O
a	O	O
pattern	O	O
,	O	O
etc	O	O
.	O	O
An	O	O
idiom	O	O
that	O	O
seems	O	O
to	O	O
be	O	O
emerging	O	O
is	O	O
to	O	O
name	O	O
stream	O	O
-	O	O
returning	O	O
methods	O	O
after	O	O
the	O	O
plural	O	O
of	O	O
the	O	O
name	O	O
of	O	O
the	O	O
things	O	O
that	O	O
it	O	O
represents	O	O
or	O	O
contains	O	O
,	O	O
without	O	O
a	O	O
get	O	O
prefix	O	O
.	O	O
Also	O	O
,	O	O
while	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
reasonable	O	O
name	O	O
for	O	O
a	O	O
stream	O	O
-	O	O
returning	O	O
method	O	O
when	O	O
there	O	O
is	O	O
only	O	O
one	O	O
possible	O	O
set	O	O
of	O	O
values	O	O
to	O	O
be	O	O
returned	O	O
,	O	O
sometimes	O	O
there	O	O
are	O	O
classes	O	O
that	O	O
have	O	O
aggregations	O	O
of	O	O
multiple	O	O
types	O	O
of	O	O
values	O	O
.	O	O
For	O	O
example	O	O
,	O	O
suppose	O	O
you	O	O
have	O	O
some	O	O
object	O	O
that	O	O
contains	O	O
both	O	O
attributes	O	O
and	O	O
elements	O	O
.	O	O
You	O	O
might	O	O
provide	O	O
two	O	O
stream	O	O
-	O	O
returning	O	O
APIs	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
22463062	O	O
Java	O	O
8	O	O
added	O	O
a	O	O
new	O	O
API	O	O
for	O	O
working	O	O
with	O	O
dates	O	O
and	O	O
times	O	O
(	O	O
JSR	O	O
310	O	O
)	O	O
.	O	O
I	O	O
have	O	O
date	O	O
and	O	O
time	O	O
as	O	O
string	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
StringLiteral	O	O
)	O	O
.	O	O
How	O	O
can	O	O
I	O	O
obtain	O	O
a	O	O
LocalDateTime	B-api_mention	B-api_mention
instance	O	O
from	O	O
the	O	O
given	O	O
string	O	O
?	O	O
After	O	O
I	O	O
finished	O	O
working	O	O
with	O	O
the	O	O
LocalDateTime	B-api_mention	B-api_mention
object	O	O
:	O	O
How	O	O
can	O	O
I	O	O
then	O	O
convert	O	O
the	O	O
LocalDateTime	B-api_mention	B-api_mention
instance	O	O
back	O	O
to	O	O
a	O	O
string	O	O
with	O	O
the	O	O
same	O	O
format	O	O
as	O	O
shown	O	O
above	O	O
?	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16148593	O	O
Use	O	O
Integer	B-api_mention	B-api_mention
instead	O	O
.	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Java	O	O
will	O	O
automatically	O	O
autobox	O	O
your	O	O
int	O	O
primitive	O	O
values	O	O
to	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
.	O	O
Read	O	O
more	O	O
about	O	O
autoboxing	O	O
from	O	O
Oracle	O	O
Java	O	O
documentations	O	O
.	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777311	O	O
The	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
check	O	O
if	O	O
both	O	O
arrays	O	O
contain	O	O
the	O	O
same	O	O
number	O	O
of	O	O
elements	O	O
,	O	O
and	O	O
all	O	O
corresponding	O	O
pairs	O	O
of	O	O
elements	O	O
in	O	O
the	O	O
two	O	O
arrays	O	O
are	O	O
equal	O	O
.	O	O
The	O	O
array1	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
compare	O	O
the	O	O
object	O	O
to	O	O
another	O	O
object	O	O
and	O	O
return	O	O
true	O	O
only	O	O
if	O	O
the	O	O
reference	O	O
of	O	O
the	O	O
two	O	O
object	O	O
are	O	O
equal	O	O
as	O	O
in	O	O
the	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
5243798	O	O
#	O	O
li	O	O
getParameter	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
http	O	O
request	O	O
parameters	O	O
.	O	O
Those	O	O
passed	O	O
from	O	O
the	O	O
client	O	O
to	O	O
the	O	O
server	O	O
.	O	O
For	O	O
example	O	O
http	O	O
:	O	O
/	O	O
/	O	O
example	O	O
.	O	O
com	O	O
/	O	O
servlet	O	O
?	O	O
parameter	O	O
=	O	O
1	O	O
.	O	O
Can	O	O
only	O	O
return	O	O
String	B-api_mention	B-api_mention
#	O	O
li	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
for	O	O
server	O	O
-	O	O
side	O	O
usage	O	O
only	O	O
-	O	O
you	O	O
fill	O	O
the	O	O
request	O	O
with	O	O
attributes	O	O
that	O	O
you	O	O
can	O	O
use	O	O
within	O	O
the	O	O
same	O	O
request	O	O
.	O	O
For	O	O
example	O	O
-	O	O
you	O	O
set	O	O
an	O	O
attribute	O	O
in	O	O
a	O	O
servlet	O	O
,	O	O
and	O	O
read	O	O
it	O	O
from	O	O
a	O	O
JSP	O	O
.	O	O
Can	O	O
be	O	O
used	O	O
for	O	O
any	O	O
object	O	O
,	O	O
not	O	O
just	O	O
string	O	O
.	O	O
Question	O	O
-	O	O
32294367	O	O
,	O	O
answer	O	O
-	O	O
32378895	O	O
#	O	O
blockquote	O	O
Yes	O	O
and	O	O
No	O	O
.	O	O
I	O	O
explain	O	O
:	O	O
#	O	O
li	O	O
Referring	O	O
to	O	O
shared	O	O
memory	O	O
:	O	O
Different	O	O
threads	O	O
in	O	O
a	O	O
Java	O	O
process	O	O
share	O	O
the	O	O
whole	O	O
heap	O	O
,	O	O
therefore	O	O
threads	O	O
can	O	O
interact	O	O
in	O	O
a	O	O
huge	O	O
number	O	O
of	O	O
planned	O	O
and	O	O
unplanned	O	O
ways	O	O
.	O	O
However	O	O
objects	O	O
in	O	O
the	O	O
stack	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
a	O	O
context	O	O
you	O	O
pass	O	O
down	O	O
to	O	O
called	O	O
method	O	O
)	O	O
or	O	O
a	O	O
ThreadLocal	B-api_mention	B-api_mention
are	O	O
their	O	O
own	O	O
thread	O	O
'	O	O
s	O	O
(	O	O
unless	O	O
they	O	O
start	O	O
sharing	O	O
references	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Crashing	O	O
:	O	O
If	O	O
a	O	O
thread	O	O
crashes	O	O
in	O	O
Java	O	O
(	O	O
a	O	O
Throwable	B-api_mention	B-api_mention
is	O	O
propagated	O	O
into	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
or	O	O
something	O	O
gets	O	O
looped	O	O
or	O	O
blocked	O	O
)	O	O
,	O	O
that	O	O
mishap	O	O
might	O	O
not	O	O
affect	O	O
other	O	O
threads	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
a	O	O
pool	O	O
of	O	O
connections	O	O
in	O	O
a	O	O
server	O	O
will	O	O
continue	O	O
to	O	O
operate	O	O
)	O	O
.	O	O
However	O	O
as	O	O
different	O	O
threads	O	O
interact	O	O
.	O	O
Other	O	O
threads	O	O
will	O	O
easily	O	O
get	O	O
stranded	O	O
if	O	O
one	O	O
of	O	O
them	O	O
ends	O	O
abnormally	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
one	O	O
thread	O	O
trying	O	O
to	O	O
read	O	O
from	O	O
an	O	O
empty	O	O
pipe	O	O
from	O	O
another	O	O
thread	O	O
which	O	O
did	O	O
not	O	O
close	O	O
its	O	O
end	O	O
)	O	O
.	O	O
So	O	O
unless	O	O
the	O	O
developers	O	O
are	O	O
highly	O	O
paranoid	O	O
careful	O	O
,	O	O
it	O	O
is	O	O
very	O	O
likely	O	O
that	O	O
side	O	O
effects	O	O
will	O	O
occur	O	O
.	O	O
I	O	O
doubt	O	O
that	O	O
any	O	O
other	O	O
paradigm	O	O
intends	O	O
threads	O	O
to	O	O
operate	O	O
as	O	O
totally	O	O
independent	O	O
islands	O	O
.	O	O
They	O	O
must	O	O
share	O	O
information	O	O
and	O	O
coordinate	O	O
somehow	O	O
.	O	O
And	O	O
then	O	O
there	O	O
will	O	O
be	O	O
the	O	O
chance	O	O
to	O	O
mess	O	O
things	O	O
up	O	O
.	O	O
It	O	O
is	O	O
just	O	O
they	O	O
will	O	O
take	O	O
a	O	O
more	O	O
defensive	O	O
approach	O	O
that	O	O
"	O	O
gives	O	O
you	O	O
less	O	O
rope	O	O
to	O	O
hang	O	O
yourself	O	O
"	O	O
(	O	O
same	O	O
idiom	O	O
as	O	O
with	O	O
pointers	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
18723596	O	O
,	O	O
answer	O	O
-	O	O
18723666	O	O
You	O	O
can	O	O
cast	O	O
null	O	O
to	O	O
any	O	O
reference	O	O
type	O	O
without	O	O
getting	O	O
any	O	O
exception	O	O
.	O	O
println	B-api_mention	B-api_mention
method	O	O
does	O	O
not	O	O
throw	O	O
null	O	O
pointer	O	O
because	O	O
it	O	O
first	O	O
checks	O	O
whether	O	O
the	O	O
object	O	O
is	O	O
null	O	O
or	O	O
not	O	O
.	O	O
If	O	O
null	O	O
then	O	O
it	O	O
simply	O	O
prints	O	O
the	O	O
string	O	O
StringLiteral	O	O
.	O	O
Otherwise	O	O
it	O	O
will	O	O
call	O	O
the	O	O
toString	B-api_mention	B-api_mention
method	O	O
of	O	O
that	O	O
object	O	O
.	O	O
Adding	O	O
more	O	O
details	O	O
:	O	O
Internally	O	O
print	O	O
methods	O	O
call	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
on	O	O
the	O	O
input	O	O
object	O	O
.	O	O
And	O	O
in	O	O
valueOf	B-api_mention	B-api_mention
method	O	O
,	O	O
this	O	O
check	O	O
helps	O	O
to	O	O
avoid	O	O
null	O	O
pointer	O	O
excpeiton	O	O
:	O	O
return	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
?	O	O
StringLiteral	O	O
:	O	O
obj	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
rest	O	O
of	O	O
your	O	O
confusion	O	O
,	O	O
calling	O	O
any	O	O
method	O	O
on	O	O
a	O	O
null	O	O
object	O	O
should	O	O
throw	O	O
a	O	O
null	O	O
pointer	O	O
exception	O	O
,	O	O
if	O	O
not	O	O
a	O	O
special	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
32334319	O	O
I	O	O
am	O	O
using	O	O
JDK	O	O
-	O	O
8	O	O
(	O	O
x64	O	O
)	O	O
.	O	O
For	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
I	O	O
found	O	O
the	O	O
following	O	O
in	O	O
the	O	O
Java	O	O
documentation	O	O
:	O	O
#	O	O
blockquote	O	O
For	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
I	O	O
found	O	O
this	O	O
:	O	O
#	O	O
blockquote	O	O
If	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
uses	O	O
an	O	O
array	O	O
,	O	O
why	O	O
doesn	O	O
'	O	O
t	O	O
it	O	O
just	O	O
call	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
or	O	O
use	O	O
dual	O	O
-	O	O
pivot	O	O
QuickSort	O	O
?	O	O
Why	O	O
use	O	O
Mergesort	O	O
?	O	O
Question	O	O
-	O	O
6802483	O	O
,	O	O
answer	O	O
-	O	O
6802523	O	O
There	O	O
is	O	O
no	O	O
direct	O	O
way	O	O
to	O	O
do	O	O
this	O	O
-	O	O
Java	O	O
has	O	O
no	O	O
Map	B-api_mention	O
literals	O	O
(	O	O
yet	O	O
-	O	O
I	O	O
think	O	O
they	O	O
were	O	O
proposed	O	O
for	O	O
Java	O	O
8	O	O
)	O	O
.	O	O
Some	O	O
people	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
creates	O	O
an	O	O
anonymous	O	O
subclass	O	O
of	O	O
HashMap	B-api_mention	B-api_mention
,	O	O
whose	O	O
instance	O	O
initializer	O	O
puts	O	O
these	O	O
values	O	O
.	O	O
(	O	O
By	O	O
the	O	O
way	O	O
,	O	O
a	O	O
map	O	O
can	O	O
'	O	O
t	O	O
contain	O	O
twice	O	O
the	O	O
same	O	O
value	O	O
,	O	O
your	O	O
second	O	O
put	O	O
will	O	O
overwrite	O	O
the	O	O
first	O	O
one	O	O
.	O	O
I	O	O
'	O	O
ll	O	O
use	O	O
different	O	O
values	O	O
for	O	O
the	O	O
next	O	O
examples	O	O
.	O	O
)	O	O
The	O	O
normal	O	O
way	O	O
would	O	O
be	O	O
this	O	O
(	O	O
for	O	O
a	O	O
local	O	O
variable	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
your	O	O
test	O	O
map	O	O
is	O	O
an	O	O
instance	O	O
variable	O	O
,	O	O
put	O	O
the	O	O
initialization	O	O
in	O	O
a	O	O
constructor	O	O
or	O	O
instance	O	O
initializer	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
your	O	O
test	O	O
map	O	O
is	O	O
a	O	O
class	O	O
variable	O	O
,	O	O
put	O	O
the	O	O
initialization	O	O
in	O	O
a	O	O
static	O	O
initializer	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
want	O	O
your	O	O
map	O	O
to	O	O
never	O	O
change	O	O
,	O	O
you	O	O
should	O	O
after	O	O
the	O	O
initialization	O	O
wrap	O	O
your	O	O
map	O	O
by	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
You	O	O
can	O	O
do	O	O
this	O	O
in	O	O
a	O	O
static	O	O
initializer	O	O
too	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
if	O	O
you	O	O
can	O	O
now	O	O
make	O	O
test	O	O
final	O	O
.	O	O
.	O	O
.	O	O
try	O	O
it	O	O
out	O	O
and	O	O
report	O	O
here	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
28459498	O	O
,	O	O
answer	O	O
-	O	O
28459604	O	O
Background	O	O
While	O	O
the	O	O
question	O	O
appears	O	O
simple	O	O
,	O	O
the	O	O
actual	O	O
answer	O	O
requires	O	O
some	O	O
background	O	O
to	O	O
make	O	O
sense	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
skip	O	O
to	O	O
the	O	O
conclusion	O	O
,	O	O
scroll	O	O
down	O	O
.	O	O
.	O	O
.	O	O
Pick	O	O
your	O	O
comparison	O	O
point	O	O
-	O	O
Basic	O	O
functionality	O	O
Using	O	O
basic	O	O
concepts	O	O
,	O	O
C	O	O
#	O	O
'	O	O
s	O	O
IEnumerable	O	O
concept	O	O
is	O	O
more	O	O
closely	O	O
related	O	O
to	O	O
Java	O	O
'	O	O
s	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
which	O	O
is	O	O
able	O	O
to	O	O
create	O	O
as	O	O
many	O	O
Iterators	O	O
as	O	O
you	O	O
want	O	O
.	O	O
IEnumerables	O	O
create	O	O
IEnumerators	O	O
.	O	O
Java	O	O
'	O	O
s	O	O
Iterable	B-api_mention	B-api_mention
create	O	O
Iterators	B-api_mention	O
The	O	O
history	O	O
of	O	O
each	O	O
concept	O	O
is	O	O
similar	O	O
,	O	O
in	O	O
that	O	O
both	O	O
IEnumerable	O	O
and	O	O
Iterable	B-api_mention	B-api_mention
have	O	O
a	O	O
basic	O	O
motivation	O	O
to	O	O
allow	O	O
'	O	O
for	O	O
-	O	O
each	O	O
'	O	O
style	O	O
looping	O	O
over	O	O
the	O	O
members	O	O
of	O	O
data	O	O
collections	O	O
.	O	O
That	O	O
'	O	O
s	O	O
an	O	O
oversimplification	O	O
as	O	O
they	O	O
both	O	O
allow	O	O
more	O	O
than	O	O
just	O	O
that	O	O
,	O	O
and	O	O
they	O	O
also	O	O
arrived	O	O
at	O	O
that	O	O
stage	O	O
via	O	O
different	O	O
progressions	O	O
,	O	O
but	O	O
it	O	O
is	O	O
a	O	O
significant	O	O
common	O	O
feature	O	O
regardless	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
compare	O	O
that	O	O
feature	O	O
:	O	O
in	O	O
both	O	O
languages	O	O
,	O	O
if	O	O
a	O	O
class	O	O
implements	O	O
the	O	O
IEnumerable	O	O
/	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
then	O	O
that	O	O
class	O	O
must	O	O
implement	O	O
at	O	O
least	O	O
a	O	O
single	O	O
method	O	O
(	O	O
for	O	O
C	O	O
#	O	O
,	O	O
it	O	O
'	O	O
s	O	O
GetEnumerator	O	B-api_mention
and	O	O
for	O	O
Java	O	O
it	O	O
'	O	O
s	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
In	O	O
each	O	O
case	O	O
,	O	O
the	O	O
instance	O	O
returned	O	O
from	O	O
that	O	O
(	O	O
IEnumerator	O	O
/	O	O
Iterator	B-api_mention	O
)	O	O
allows	O	O
you	O	O
to	O	O
access	O	O
the	O	O
current	O	O
and	O	O
subsequent	O	O
members	O	O
of	O	O
the	O	O
data	O	O
.	O	O
This	O	O
feature	O	O
is	O	O
used	O	O
in	O	O
the	O	O
for	O	O
-	O	O
each	O	O
language	O	O
syntax	O	O
.	O	O
Pick	O	O
your	O	O
comparison	O	O
point	O	O
-	O	O
Enhanced	O	O
functionality	O	O
IEnumerable	O	O
in	O	O
C	O	O
#	O	O
has	O	O
been	O	O
extended	O	O
to	O	O
allow	O	O
a	O	O
number	O	O
of	O	O
other	O	O
language	O	O
features	O	O
(	O	O
mostly	O	O
related	O	O
to	O	O
Linq	O	O
)	O	O
.	O	O
Features	O	O
added	O	O
include	O	O
selections	O	O
,	O	O
projections	O	O
,	O	O
aggregations	O	O
,	O	O
etc	O	O
.	O	O
These	O	O
extensions	O	O
have	O	O
a	O	O
strong	O	O
motivation	O	O
from	O	O
use	O	O
in	O	O
set	O	O
-	O	O
theory	O	O
,	O	O
similar	O	O
to	O	O
SQL	O	O
and	O	O
Relational	O	O
Database	O	O
concepts	O	O
.	O	O
Java	O	O
8	O	O
has	O	O
also	O	O
had	O	O
functionality	O	O
added	O	O
to	O	O
enable	O	O
a	O	O
degree	O	O
of	O	O
functional	O	O
programming	O	O
using	O	O
Streams	B-api_mention	B-api_mention
and	O	O
Lambdas	B-api_mention	B-api_mention
.	O	O
Note	O	O
that	O	O
Java	O	O
8	O	O
streams	O	O
are	O	O
not	O	O
primarily	O	O
motivated	O	O
by	O	O
set	O	O
theory	O	O
,	O	O
but	O	O
by	O	O
functional	O	O
programming	O	O
.	O	O
Regardless	O	O
,	O	O
there	O	O
are	O	O
a	O	O
lot	O	O
of	O	O
parallels	O	O
.	O	O
So	O	O
,	O	O
this	O	O
is	O	O
the	O	O
second	O	O
point	O	O
.	O	O
The	O	O
enhancements	O	O
made	O	O
to	O	O
C	O	O
#	O	O
were	O	O
implemented	O	O
as	O	O
an	O	O
enhancement	O	O
to	O	O
the	O	O
IEnumerable	O	O
concept	O	O
.	O	O
In	O	O
Java	O	O
,	O	O
though	O	O
,	O	O
the	O	O
enhancements	O	O
made	O	O
were	O	O
implemented	O	O
by	O	O
creating	O	O
new	O	O
base	O	O
concepts	O	O
of	O	O
Lambdas	B-api_mention	B-api_mention
and	O	O
Streams	B-api_mention	B-api_mention
,	O	O
and	O	O
then	O	O
also	O	O
creating	O	O
a	O	O
relatively	O	O
trivial	O	O
way	O	O
to	O	O
convert	O	O
from	O	O
Iterators	B-api_mention	B-api_mention
and	O	O
Iterables	B-api_mention	B-api_mention
to	O	O
Streams	B-api_mention	B-api_mention
,	O	O
and	O	O
visa	O	O
-	O	O
versa	O	O
.	O	O
So	O	O
,	O	O
comparing	O	O
IEnumerable	O	O
to	O	O
Java	O	O
'	O	O
s	O	O
Stream	B-api_mention	B-api_mention
concept	O	O
is	O	O
incomplete	O	O
.	O	O
You	O	O
need	O	O
to	O	O
compare	O	O
it	O	O
to	O	O
the	O	O
combined	O	O
Streams	B-api_mention	B-api_mention
and	O	O
Collections	B-api_mention	B-api_mention
API	O	O
'	O	O
s	O	O
in	O	O
Java	O	O
.	O	O
In	O	O
Java	O	O
,	O	O
Streams	B-api_mention	B-api_mention
are	O	O
not	O	O
the	O	O
same	O	O
as	O	O
Iterables	B-api_mention	O
,	O	O
or	O	O
Iterators	B-api_mention	O
Streams	I-api_mention	B-api_mention
are	O	O
not	O	O
designed	O	O
to	O	O
solve	O	O
problems	O	O
the	O	O
same	O	O
way	O	O
that	O	O
iterators	O	O
are	O	O
:	O	O
#	O	O
li	O	O
Iterators	B-api_mention	O
are	O	O
a	O	O
way	O	O
of	O	O
describing	O	O
the	O	O
sequence	O	O
of	O	O
data	O	O
.	O	O
#	O	O
li	O	O
Streams	B-api_mention	B-api_mention
are	O	O
a	O	O
way	O	O
of	O	O
describing	O	O
a	O	O
sequence	O	O
of	O	O
data	O	O
transformations	O	O
.	O	O
With	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
,	O	O
you	O	O
get	O	O
a	O	O
data	O	O
value	O	O
,	O	O
process	O	O
it	O	O
,	O	O
and	O	O
then	O	O
get	O	O
another	O	O
data	O	O
value	O	O
.	O	O
With	O	O
Streams	B-api_mention	B-api_mention
,	O	O
you	O	O
chain	O	O
a	O	O
sequence	O	O
of	O	O
functions	O	O
together	O	O
,	O	O
then	O	O
you	O	O
feed	O	O
an	O	O
input	O	O
value	O	O
to	O	O
the	O	O
stream	O	O
,	O	O
and	O	O
get	O	O
the	O	O
output	O	O
value	O	O
from	O	O
the	O	O
combined	O	O
sequence	O	O
.	O	O
Note	O	O
,	O	O
in	O	O
Java	O	O
terms	O	O
,	O	O
each	O	O
function	O	O
is	O	O
encapsulated	O	O
in	O	O
a	O	O
single	O	O
Stream	B-api_mention	B-api_mention
instance	O	O
.	O	O
The	O	O
Streams	B-api_mention	O
API	O	O
allows	O	O
you	O	O
to	O	O
link	O	O
a	O	O
sequence	O	O
of	O	O
Stream	B-api_mention	B-api_mention
instances	O	O
in	O	O
a	O	O
way	O	O
that	O	O
chains	O	O
a	O	O
sequence	O	O
of	O	O
transformation	O	O
expressions	O	O
.	O	O
In	O	O
order	O	O
to	O	O
complete	O	O
the	O	O
Stream	B-api_mention	B-api_mention
concept	O	O
,	O	O
you	O	O
need	O	O
a	O	O
source	O	O
of	O	O
data	O	O
to	O	O
feed	O	O
the	O	O
stream	O	O
,	O	O
and	O	O
a	O	O
terminal	O	O
function	O	O
that	O	O
consumes	O	O
the	O	O
stream	O	O
.	O	O
The	O	O
way	O	O
you	O	O
feed	O	O
values	O	O
in	O	O
to	O	O
the	O	O
stream	O	O
may	O	O
in	O	O
fact	O	O
be	O	O
from	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
but	O	O
the	O	O
Stream	B-api_mention	B-api_mention
sequence	O	O
itself	O	O
is	O	O
not	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
it	O	O
is	O	O
a	O	O
compound	O	O
function	O	O
.	O	O
A	O	O
Stream	B-api_mention	B-api_mention
is	O	O
also	O	O
intended	O	O
to	O	O
be	O	O
lazy	O	O
,	O	O
in	O	O
the	O	O
sense	O	O
that	O	O
it	O	O
only	O	O
does	O	O
work	O	O
when	O	O
you	O	O
request	O	O
a	O	O
value	O	O
from	O	O
it	O	O
.	O	O
Note	O	O
these	O	O
significant	O	O
assumptions	O	O
and	O	O
features	O	O
of	O	O
Streams	B-api_mention	O
:	O	O
#	O	O
li	O	O
A	O	O
Stream	B-api_mention	B-api_mention
in	O	O
Java	O	O
is	O	O
a	O	O
transformation	O	O
engine	O	O
,	O	O
it	O	O
transforms	O	O
a	O	O
data	O	O
item	O	O
in	O	O
one	O	O
state	O	O
,	O	O
to	O	O
being	O	O
in	O	O
another	O	O
state	O	O
.	O	O
#	O	O
li	O	O
streams	O	O
have	O	O
no	O	O
concept	O	O
of	O	O
the	O	O
data	O	O
order	O	O
or	O	O
position	O	O
,	O	O
the	O	O
simply	O	O
transform	O	O
whatever	O	O
they	O	O
are	O	O
asked	O	O
to	O	O
.	O	O
#	O	O
li	O	O
streams	O	O
can	O	O
be	O	O
supplied	O	O
with	O	O
data	O	O
from	O	O
many	O	O
sources	O	O
,	O	O
including	O	O
other	O	O
streams	O	O
,	O	O
Iterators	B-api_mention	O
,	O	O
Iterables	B-api_mention	B-api_mention
,	O	O
Collections	B-api_mention	B-api_mention
,	O	O
#	O	O
li	O	O
you	O	O
cannot	O	O
"	O	O
reset	O	O
"	O	O
a	O	O
stream	O	O
,	O	O
that	O	O
would	O	O
be	O	O
like	O	O
"	O	O
reprogramming	O	O
the	O	O
transformation	O	O
"	O	O
.	O	O
Resetting	O	O
the	O	O
data	O	O
source	O	O
is	O	O
probably	O	O
what	O	O
you	O	O
want	O	O
.	O	O
#	O	O
li	O	O
there	O	O
is	O	O
logically	O	O
only	O	O
1	O	O
data	O	O
item	O	O
'	O	O
in	O	O
flight	O	O
'	O	O
in	O	O
the	O	O
stream	O	O
at	O	O
any	O	O
time	O	O
(	O	O
unless	O	O
the	O	O
stream	O	O
is	O	O
a	O	O
parallel	O	O
stream	O	O
,	O	O
at	O	O
which	O	O
point	O	O
,	O	O
there	O	O
is	O	O
1	O	O
item	O	O
per	O	O
thread	O	O
)	O	O
.	O	O
This	O	O
is	O	O
independent	O	O
of	O	O
the	O	O
data	O	O
source	O	O
which	O	O
may	O	O
have	O	O
more	O	O
than	O	O
the	O	O
current	O	O
items	O	O
'	O	O
ready	O	O
'	O	O
to	O	O
be	O	O
supplied	O	O
to	O	O
the	O	O
stream	O	O
,	O	O
or	O	O
the	O	O
stream	O	O
collector	O	O
which	O	O
may	O	O
need	O	O
to	O	O
aggregate	O	O
and	O	O
reduce	O	O
multiple	O	O
values	O	O
.	O	O
#	O	O
li	O	O
Streams	B-api_mention	O
can	O	O
be	O	O
unbound	O	O
(	O	O
infinite	O	O
)	O	O
,	O	O
limited	O	O
only	O	O
by	O	O
the	O	O
data	O	O
source	O	O
,	O	O
or	O	O
collector	O	O
(	O	O
which	O	O
can	O	O
be	O	O
infinite	O	O
too	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Streams	B-api_mention	B-api_mention
are	O	O
'	O	O
chainable	O	O
'	O	O
,	O	O
the	O	O
output	O	O
of	O	O
filtering	O	O
one	O	O
stream	O	O
,	O	O
is	O	O
another	O	O
stream	O	O
.	O	O
Values	O	O
input	O	O
to	O	O
and	O	O
transformed	O	O
by	O	O
a	O	O
stream	O	O
can	O	O
in	O	O
turn	O	O
be	O	O
supplied	O	O
to	O	O
another	O	O
stream	O	O
which	O	O
does	O	O
a	O	O
different	O	O
transformation	O	O
.	O	O
The	O	O
data	O	O
,	O	O
in	O	O
its	O	O
transformed	O	O
state	O	O
flows	O	O
from	O	O
one	O	O
stream	O	O
to	O	O
the	O	O
next	O	O
.	O	O
You	O	O
do	O	O
not	O	O
need	O	O
to	O	O
intervene	O	O
and	O	O
pull	O	O
the	O	O
data	O	O
from	O	O
one	O	O
stream	O	O
and	O	O
plug	O	O
it	O	O
in	O	O
to	O	O
the	O	O
next	O	O
.	O	O
C	O	O
#	O	O
Comparison	O	O
When	O	O
you	O	O
consider	O	O
that	O	O
a	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
is	O	O
just	O	O
a	O	O
part	O	O
of	O	O
a	O	O
supply	O	O
,	O	O
stream	O	O
,	O	O
and	O	O
collect	O	O
system	O	O
,	O	O
and	O	O
that	O	O
Streams	B-api_mention	B-api_mention
and	O	O
Iterators	B-api_mention	O
are	O	O
often	O	O
used	O	O
together	O	O
with	O	O
Collections	B-api_mention	B-api_mention
,	O	O
then	O	O
it	O	O
is	O	O
no	O	O
wonder	O	O
that	O	O
it	O	O
is	O	O
hard	O	O
to	O	O
relate	O	O
to	O	O
the	O	O
same	O	O
concepts	O	O
which	O	O
are	O	O
almost	O	O
all	O	O
embedded	O	O
in	O	O
to	O	O
a	O	O
single	O	O
IEnumerable	O	O
concept	O	O
in	O	O
C	O	O
#	O	O
.	O	O
Parts	O	O
of	O	O
IEnumerable	O	O
(	O	O
and	O	O
close	O	O
related	O	O
concepts	O	O
)	O	O
are	O	O
apparent	O	O
in	O	O
all	O	O
of	O	O
the	O	O
Java	O	O
Iterator	B-api_mention	B-api_mention
,	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
Lambda	B-api_mention	O
,	O	O
and	O	O
Stream	B-api_mention	B-api_mention
concepts	O	O
.	O	O
There	O	O
are	O	O
small	O	O
things	O	O
that	O	O
the	O	O
Java	O	O
concepts	O	O
can	O	O
do	O	O
that	O	O
are	O	O
harder	O	O
in	O	O
IEnumerable	O	O
,	O	O
and	O	O
visa	O	O
-	O	O
versa	O	O
.	O	O
Conclusion	O	O
#	O	O
li	O	O
There	O	O
'	O	O
s	O	O
no	O	O
design	O	O
problem	O	O
here	O	O
,	O	O
just	O	O
a	O	O
problem	O	O
in	O	O
matching	O	O
concepts	O	O
between	O	O
the	O	O
languages	O	O
.	O	O
#	O	O
li	O	O
Streams	B-api_mention	O
solve	O	O
problems	O	O
in	O	O
a	O	O
different	O	O
way	O	O
#	O	O
li	O	O
Streams	B-api_mention	O
add	O	O
functionality	O	O
to	O	O
Java	O	O
(	O	O
they	O	O
add	O	O
a	O	O
different	O	O
way	O	O
of	O	O
doing	O	O
things	O	O
,	O	O
they	O	O
do	O	O
not	O	O
take	O	O
functionality	O	O
away	O	O
)	O	O
Adding	O	O
Streams	B-api_mention	O
gives	O	O
you	O	O
more	O	O
choices	O	O
when	O	O
solving	O	O
problems	O	O
,	O	O
which	O	O
is	O	O
fair	O	O
to	O	O
classify	O	O
as	O	O
'	O	O
enhancing	O	O
power	O	O
'	O	O
,	O	O
not	O	O
'	O	O
reducing	O	O
'	O	O
,	O	O
'	O	O
taking	O	O
away	O	O
'	O	O
,	O	O
or	O	O
'	O	O
restricting	O	O
'	O	O
it	O	O
.	O	O
Why	O	O
are	O	O
Java	O	O
Streams	B-api_mention	O
once	O	O
-	O	O
off	O	O
?	O	O
This	O	O
question	O	O
is	O	O
misguided	O	O
,	O	O
because	O	O
streams	O	O
are	O	O
function	O	O
sequences	O	O
,	O	O
not	O	O
data	O	O
.	O	O
Depending	O	O
on	O	O
the	O	O
data	O	O
source	O	O
that	O	O
feeds	O	O
the	O	O
stream	O	O
,	O	O
you	O	O
can	O	O
reset	O	O
the	O	O
data	O	O
source	O	O
,	O	O
and	O	O
feed	O	O
the	O	O
same	O	O
,	O	O
or	O	O
different	O	O
stream	O	O
.	O	O
Unlike	O	O
C	O	O
#	O	O
'	O	O
s	O	O
IEnumerable	O	O
,	O	O
where	O	O
an	O	O
execution	O	O
pipeline	O	O
can	O	O
be	O	O
executed	O	O
as	O	O
many	O	O
times	O	O
as	O	O
we	O	O
want	O	O
,	O	O
in	O	O
Java	O	O
a	O	O
stream	O	O
can	O	O
be	O	O
'	O	O
iterated	O	O
'	O	O
only	O	O
once	O	O
.	O	O
Comparing	O	O
an	O	O
IEnumerable	O	O
to	O	O
a	O	O
Stream	B-api_mention	B-api_mention
is	O	O
misguided	O	O
.	O	O
The	O	O
context	O	O
you	O	O
are	O	O
using	O	O
to	O	O
say	O	O
IEnumerable	O	O
can	O	O
be	O	O
executed	O	O
as	O	O
many	O	O
times	O	O
as	O	O
you	O	O
want	O	O
,	O	O
is	O	O
best	O	O
compared	O	O
to	O	O
Java	O	O
Iterables	B-api_mention	O
,	O	O
which	O	O
can	O	O
be	O	O
iterated	O	O
as	O	O
many	O	O
times	O	O
as	O	O
you	O	O
want	O	O
.	O	O
A	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
represents	O	O
a	O	O
subset	O	O
of	O	O
the	O	O
IEnumerable	O	O
concept	O	O
,	O	O
and	O	O
not	O	O
the	O	O
subset	O	O
that	O	O
supplies	O	O
data	O	O
,	O	O
and	O	O
thus	O	O
cannot	O	O
be	O	O
'	O	O
rerun	O	O
'	O	O
.	O	O
Any	O	O
call	O	O
to	O	O
a	O	O
terminal	O	O
operation	O	O
closes	O	O
the	O	O
stream	O	O
,	O	O
rendering	O	O
it	O	O
unusable	O	O
.	O	O
This	O	O
'	O	O
feature	O	O
'	O	O
takes	O	O
away	O	O
a	O	O
lot	O	O
of	O	O
power	O	O
.	O	O
The	O	O
first	O	O
statement	O	O
is	O	O
true	O	O
,	O	O
in	O	O
a	O	O
sense	O	O
.	O	O
The	O	O
'	O	O
takes	O	O
away	O	O
power	O	O
'	O	O
statement	O	O
is	O	O
not	O	O
.	O	O
You	O	O
are	O	O
still	O	O
comparing	O	O
Streams	B-api_mention	O
it	O	O
IEnumerables	O	O
.	O	O
The	O	O
terminal	O	O
operation	O	O
in	O	O
the	O	O
stream	O	O
is	O	O
like	O	O
a	O	O
'	O	O
break	O	O
'	O	O
clause	O	O
in	O	O
a	O	O
for	O	O
loop	O	O
.	O	O
You	O	O
are	O	O
always	O	O
free	O	O
to	O	O
have	O	O
another	O	O
stream	O	O
,	O	O
if	O	O
you	O	O
want	O	O
,	O	O
and	O	O
if	O	O
you	O	O
can	O	O
re	O	O
-	O	O
supply	O	O
the	O	O
data	O	O
you	O	O
need	O	O
.	O	O
Again	O	O
,	O	O
if	O	O
you	O	O
consider	O	O
the	O	O
IEnumerable	O	O
to	O	O
be	O	O
more	O	O
like	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
for	O	O
this	O	O
statement	O	O
,	O	O
Java	O	O
does	O	O
it	O	O
just	O	O
fine	O	O
.	O	O
I	O	O
imagine	O	O
the	O	O
reason	O	O
for	O	O
this	O	O
is	O	O
not	O	O
technical	O	O
.	O	O
What	O	O
were	O	O
the	O	O
design	O	O
considerations	O	O
behind	O	O
this	O	O
strange	O	O
restriction	O	O
?	O	O
The	O	O
reason	O	O
is	O	O
technical	O	O
,	O	O
and	O	O
for	O	O
the	O	O
simple	O	O
reason	O	O
that	O	O
a	O	O
Stream	B-api_mention	B-api_mention
a	O	O
subset	O	O
of	O	O
what	O	O
think	O	O
it	O	O
is	O	O
.	O	O
The	O	O
stream	O	O
subset	O	O
does	O	O
not	O	O
control	O	O
the	O	O
data	O	O
supply	O	O
,	O	O
so	O	O
you	O	O
should	O	O
reset	O	O
the	O	O
supply	O	O
,	O	O
not	O	O
the	O	O
stream	O	O
.	O	O
In	O	O
that	O	O
context	O	O
,	O	O
it	O	O
is	O	O
not	O	O
so	O	O
strange	O	O
.	O	O
QuickSort	O	O
example	O	O
Your	O	O
quicksort	O	O
example	O	O
has	O	O
the	O	O
signature	O	O
:	O	O
IEnumerable	O	O
<	O	O
T	O	O
>	O	O
QuickSort	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
You	O	O
are	O	O
treating	O	O
the	O	O
input	O	O
IEnumerable	O	O
as	O	O
a	O	O
data	O	O
source	O	O
:	O	O
IEnumerable	O	O
<	O	O
T	O	O
>	O	O
lt	O	O
=	O	O
ints	O	O
.	O	O
Where	O	O
(	O	O
args	O	O
)	O	O
;	O	O
Additionally	O	O
,	O	O
return	O	O
value	O	O
is	O	O
IEnumerable	O	O
too	O	O
,	O	O
which	O	O
is	O	O
a	O	O
supply	O	O
of	O	O
data	O	O
,	O	O
and	O	O
since	O	O
this	O	O
is	O	O
a	O	O
Sort	O	O
operation	O	O
,	O	O
the	O	O
order	O	O
of	O	O
that	O	O
supply	O	O
is	O	O
significant	O	O
.	O	O
If	O	O
you	O	O
consider	O	O
the	O	O
Java	O	O
Iterable	B-api_mention	B-api_mention
class	O	O
to	O	O
be	O	O
the	O	O
appropriate	O	O
match	O	O
for	O	O
this	O	O
,	O	O
specifically	O	O
the	O	O
List	B-api_mention	B-api_mention
specialization	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
since	O	O
List	B-api_mention	B-api_mention
is	O	O
a	O	O
supply	O	O
of	O	O
data	O	O
which	O	O
has	O	O
a	O	O
guaranteed	O	O
order	O	O
or	O	O
iteration	O	O
,	O	O
then	O	O
the	O	O
equivalent	O	O
Java	O	O
code	O	O
to	O	O
your	O	O
code	O	O
would	O	O
be	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
there	O	O
is	O	O
a	O	O
bug	O	O
(	O	O
which	O	O
I	O	O
have	O	O
reproduced	O	O
)	O	O
,	O	O
in	O	O
that	O	O
the	O	O
sort	O	O
does	O	O
not	O	O
handle	O	O
duplicate	O	O
values	O	O
gracefully	O	O
,	O	O
it	O	O
is	O	O
a	O	O
'	O	O
unique	O	O
value	O	O
'	O	O
sort	O	O
.	O	O
Also	O	O
note	O	O
how	O	O
the	O	O
Java	O	O
code	O	O
uses	O	O
data	O	O
source	O	O
(	O	O
List	O	O
)	O	O
,	O	O
and	O	O
stream	O	O
concepts	O	O
at	O	O
different	O	O
point	O	O
,	O	O
and	O	O
that	O	O
in	O	O
C	O	O
#	O	O
those	O	O
two	O	O
'	O	O
personalities	O	O
'	O	O
can	O	O
be	O	O
expressed	O	O
in	O	O
just	O	O
IEnumerable	O	O
.	O	O
Also	O	O
,	O	O
although	O	O
I	O	O
have	O	O
use	O	O
List	B-api_mention	B-api_mention
as	O	O
the	O	O
base	O	O
type	O	O
,	O	O
I	O	O
could	O	O
have	O	O
used	O	O
the	O	O
more	O	O
general	O	O
Collection	B-api_mention	B-api_mention
,	O	O
and	O	O
with	O	O
a	O	O
small	O	O
iterator	O	O
-	O	O
to	O	O
-	O	O
Stream	B-api_mention	B-api_mention
conversion	O	O
,	O	O
I	O	O
could	O	O
have	O	O
used	O	O
the	O	O
even	O	O
more	O	O
general	O	O
Iterable	B-api_mention	B-api_mention
Question	O	O
-	O	O
21947452	O	O
I	O	O
generated	O	O
two	O	O
matrices	O	O
of	O	O
1000	O	O
x	O	O
1000	O	O
:	O	O
First	O	O
Matrix	O	O
:	O	O
O	O	O
and	O	O
#	O	O
.	O	O
Second	O	O
Matrix	O	O
:	O	O
O	O	O
and	O	O
B	O	O
.	O	O
Using	O	O
the	O	O
following	O	O
code	O	O
,	O	O
the	O	O
first	O	O
matrix	O	O
took	O	O
8	O	O
.	O	O
52	O	O
seconds	O	O
to	O	O
complete	O	O
:	O	O
#	O	O
pre	O	O
With	O	O
this	O	O
code	O	O
,	O	O
the	O	O
second	O	O
matrix	O	O
took	O	O
259	O	O
.	O	O
152	O	O
seconds	O	O
to	O	O
complete	O	O
:	O	O
#	O	O
pre	O	O
What	O	O
is	O	O
the	O	O
reason	O	O
behind	O	O
the	O	O
dramatically	O	O
different	O	O
run	O	O
times	O	O
?	O	O
As	O	O
suggested	O	O
in	O	O
the	O	O
comments	O	O
,	O	O
printing	O	O
only	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
print	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
takes	O	O
7	O	O
.	O	O
8871	O	O
seconds	O	O
,	O	O
whereas	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
print	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
gives	O	O
still	O	O
printing	O	O
.	O	O
.	O	O
.	O	O
.	O	O
As	O	O
others	O	O
who	O	O
pointed	O	O
out	O	O
that	O	O
it	O	O
works	O	O
for	O	O
them	O	O
normally	O	O
,	O	O
I	O	O
tried	O	O
Ideone	O	B-api_mention
.	O	I-api_mention
com	O	I-api_mention
for	O	O
instance	O	O
,	O	O
and	O	O
both	O	O
pieces	O	O
of	O	O
code	O	O
execute	O	O
at	O	O
the	O	O
same	O	O
speed	O	O
.	O	O
Test	O	O
Conditions	O	O
:	O	O
#	O	O
li	O	O
I	O	O
ran	O	O
this	O	O
test	O	O
from	O	O
Netbeans	O	O
7	O	O
.	O	O
2	O	O
,	O	O
with	O	O
the	O	O
output	O	O
into	O	O
its	O	O
console	O	O
#	O	O
li	O	O
I	O	O
used	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
measurements	O	O
Question	O	O
-	O	O
24885223	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
I	O	O
am	O	O
asking	O	O
the	O	O
right	O	O
question	O	O
.	O	O
I	O	O
was	O	O
exploring	O	O
RecyclerView	B-api_mention	B-api_mention
and	O	O
I	O	O
was	O	O
surprised	O	O
to	O	O
see	O	O
that	O	O
RecyclerView	B-api_mention	O
does	O	O
not	O	O
have	O	O
onItemClickListener	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Because	O	O
RecyclerView	B-api_mention	B-api_mention
extends	O	O
#	O	O
blockquote	O	O
and	O	O
ListView	B-api_mention	B-api_mention
extends	O	O
#	O	O
blockquote	O	O
.	O	O
However	O	O
I	O	O
solved	O	O
my	O	O
problem	O	O
by	O	O
writing	O	O
onClick	B-api_mention	B-api_mention
in	O	O
my	O	O
RecyclerView	B-api_mention	B-api_mention
.	I-api_mention	O
Adapter	I-api_mention	O
:	O	O
#	O	O
pre	O	O
But	O	O
still	O	O
I	O	O
want	O	O
to	O	O
know	O	O
why	O	O
Google	O	O
removed	O	O
onItemClickListener	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Is	O	O
there	O	O
a	O	O
performance	O	O
issue	O	O
or	O	O
something	O	O
else	O	O
?	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846964	O	O
For	O	O
one	O	O
,	O	O
you	O	O
can	O	O
get	O	O
away	O	O
with	O	O
reference	O	O
sharing	O	O
.	O	O
A	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
etc	O	O
will	O	O
require	O	O
an	O	O
allocated	O	O
object	O	O
,	O	O
and	O	O
possibly	O	O
some	O	O
extra	O	O
elements	O	O
to	O	O
hold	O	O
the	O	O
data	O	O
,	O	O
but	O	O
you	O	O
only	O	O
need	O	O
one	O	O
copy	O	O
of	O	O
an	O	O
immutable	O	O
empty	O	O
collection	O	O
(	O	O
list	O	O
,	O	O
set	O	O
,	O	O
map	O	O
,	O	O
or	O	O
any	O	O
other	O	O
such	O	O
)	O	O
.	O	O
This	O	O
makes	O	O
it	O	O
an	O	O
obvious	O	O
choice	O	O
when	O	O
a	O	O
method	O	O
you	O	O
'	O	O
re	O	O
calling	O	O
needs	O	O
to	O	O
accept	O	O
a	O	O
Map	B-api_mention	B-api_mention
but	O	O
does	O	O
not	O	O
need	O	O
to	O	O
edit	O	O
it	O	O
.	O	O
I	O	O
suggest	O	O
checking	O	O
out	O	O
Josh	O	O
Bloch	O	O
'	O	O
s	O	O
Effective	O	O
Java	O	O
,	O	O
which	O	O
lists	O	O
some	O	O
very	O	O
nice	O	O
attributes	O	O
of	O	O
immutable	O	O
objects	O	O
(	O	O
including	O	O
thread	O	O
safety	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
24609564	O	O
,	O	O
answer	O	O
-	O	O
24609841	O	O
If	O	O
you	O	O
will	O	O
read	O	O
comment	O	O
above	O	O
the	O	O
code	O	O
,	O	O
It	O	O
is	O	O
mentioned	O	O
that	O	O
.	O	O
.	O	O
.	O	O
If	O	O
the	O	O
caller	O	O
is	O	O
not	O	O
a	O	O
ForkJoinTask	B-api_mention	B-api_mention
,	O	O
this	O	O
method	O	O
is	O	O
behaviorally	O	O
equivalent	O	O
to	O	O
#	O	O
pre	O	O
So	O	O
it	O	O
is	O	O
just	O	O
another	O	O
form	O	O
to	O	O
implement	O	O
above	O	O
code	O	O
in	O	O
else	O	O
part	O	O
.	O	O
.	O	O
.	O	O
!	O	O
!	O	O
In	O	O
Style	O	O
notes	O	O
it	O	O
is	O	O
mentioned	O	O
that	O	O
,	O	O
#	O	O
blockquote	O	O
And	O	O
if	O	O
you	O	O
will	O	O
see	O	O
implementation	O	O
of	O	O
ManagedLocker	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
isReleasable	I-api_mention	I-api_mention
,	O	O
It	O	O
is	O	O
updating	O	O
the	O	O
lock	O	O
and	O	O
returns	O	O
true	O	O
if	O	O
blocking	O	O
is	O	O
unnecessary	O	O
.	O	O
Interpretation	O	O
:	O	O
Blank	O	O
while	O	O
loops	O	O
are	O	O
used	O	O
to	O	O
provide	O	O
an	O	O
interrupt	O	O
until	O	O
some	O	O
condition	O	O
reset	O	O
to	O	O
true	O	O
/	O	O
false	O	O
.	O	O
Here	O	O
,	O	O
do	O	O
{	O	O
}	O	O
while	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
is	O	O
a	O	O
blocker	O	O
/	O	O
interrupt	O	O
until	O	O
blocker	O	O
.	B-api_mention	B-api_mention
block	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
true	O	O
when	O	O
blocker	O	O
.	B-api_mention	B-api_mention
isReleasable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
false	O	O
.	O	O
Loop	O	O
will	O	O
continue	O	O
execution	O	O
while	O	O
blocker	O	O
is	O	O
not	O	O
releasable	O	O
(	O	O
!	O	O
blocker	O	O
.	B-api_mention	B-api_mention
isReleasable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
and	O	O
blocker	O	O
is	O	O
not	O	O
blocked	O	O
!	O	O
!	O	O
Execution	O	O
will	O	O
be	O	O
out	O	O
of	O	O
loop	O	O
as	O	O
soon	O	O
as	O	O
blocker	O	O
.	B-api_mention	B-api_mention
block	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
set	O	O
to	O	O
true	O	O
.	O	O
Note	O	O
that	O	O
,	O	O
do	O	O
{	O	O
}	O	O
while	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
does	O	O
not	O	O
update	O	O
CAS	O	O
variable	O	O
,	O	O
but	O	O
it	O	O
guarantee	O	O
that	O	O
program	O	O
will	O	O
wait	O	O
until	O	O
variable	O	O
gets	O	O
updated	O	O
(	O	O
force	O	O
to	O	O
wait	O	O
until	O	O
variable	O	O
gets	O	O
updated	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489410	O	O
Java	O	O
String	B-api_mention	B-api_mention
is	O	O
Special	O	O
#	O	O
blockquote	O	O
For	O	O
example	O	O
#	O	O
pre	O	O
#	O	O
img	O	O
Note	O	O
:	O	O
String	B-api_mention	B-api_mention
literals	O	O
are	O	O
stored	O	O
in	O	O
a	O	O
common	O	O
pool	O	O
.	O	O
This	O	O
facilitates	O	O
sharing	O	O
of	O	O
storage	O	O
for	O	O
strings	O	O
with	O	O
the	O	O
same	O	O
contents	O	O
to	O	O
conserve	O	O
storage	O	O
.	O	O
String	B-api_mention	B-api_mention
objects	O	O
allocated	O	O
via	O	O
new	O	O
operator	O	O
are	O	O
stored	O	O
in	O	O
the	O	O
heap	O	O
,	O	O
and	O	O
there	O	O
is	O	O
no	O	O
sharing	O	O
of	O	O
storage	O	O
for	O	O
the	O	O
same	O	O
contents	O	O
.	O	O
Question	O	O
-	O	O
33477695	O	O
,	O	O
answer	O	O
-	O	O
33477803	O	O
The	O	O
java	O	B-api_mention
.	O	I-api_mention
time	O	I-api_mention
API	O	O
in	O	O
general	O	O
does	O	O
have	O	O
nanosecond	O	O
precision	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
2015	O	O
-	O	O
11	O	O
-	O	O
02T12	O	O
:	O	O
38	O	O
:	O	O
00	O	O
,	O	O
123456789	O	O
+	O	O
0000	O	O
However	O	O
,	O	O
it	O	O
'	O	O
s	O	O
the	O	O
clock	O	O
value	O	O
returned	O	O
by	O	O
OffsetDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
now	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
is	O	O
returning	O	O
a	O	O
value	O	O
which	O	O
only	O	O
has	O	O
milliseconds	O	O
.	O	O
From	O	O
Clock	B-api_mention	O
implementation	O	O
in	O	O
Java	O	O
8	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
there	O	O
'	O	O
s	O	O
nothing	O	O
inherently	O	O
imprecise	O	O
here	O	O
-	O	O
just	O	O
the	O	O
default	O	O
implementation	O	O
of	O	O
Clock	B-api_mention	B-api_mention
using	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
You	O	O
could	O	O
potentially	O	O
create	O	O
your	O	O
own	O	O
more	O	O
precise	O	O
subclass	O	O
.	O	O
However	O	O
,	O	O
you	O	O
should	O	O
note	O	O
that	O	O
adding	O	O
more	O	O
precision	O	O
without	O	O
adding	O	O
more	O	O
accuracy	O	O
probably	O	O
isn	O	O
'	O	O
t	O	O
terribly	O	O
useful	O	O
.	O	O
(	O	O
There	O	O
are	O	O
times	O	O
when	O	O
it	O	O
might	O	O
be	O	O
,	O	O
admittedly	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
28671903	O	O
I	O	O
have	O	O
a	O	O
set	O	O
–	O	O
a	O	O
HashSet	B-api_mention	B-api_mention
I	O	O
want	O	O
to	O	O
remove	O	O
some	O	O
items	O	O
from	O	O
it	O	O
…	O	O
none	O	O
of	O	O
the	O	O
items	O	O
in	O	O
the	O	O
"	O	O
removals	O	O
"	O	O
collection	O	O
will	O	O
be	O	O
in	O	O
the	O	O
original	O	O
set	O	O
.	O	O
I	O	O
specify	O	O
the	O	O
size	O	O
of	O	O
the	O	O
"	O	O
source	O	O
"	O	O
set	O	O
and	O	O
the	O	O
size	O	O
of	O	O
the	O	O
"	O	O
removals	O	O
"	O	O
collection	O	O
on	O	O
the	O	O
command	O	O
line	O	O
,	O	O
and	O	O
build	O	O
both	O	O
of	O	O
them	O	O
.	O	O
The	O	O
source	O	O
set	O	O
contains	O	O
only	O	O
non	O	O
-	O	O
negative	O	O
integers	O	O
;	O	O
the	O	O
removals	O	O
set	O	O
contains	O	O
only	O	O
negative	O	O
integers	O	O
.	O	O
I	O	O
measure	O	O
how	O	O
long	O	O
it	O	O
takes	O	O
to	O	O
remove	O	O
all	O	O
the	O	O
elements	O	O
using	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
isn	O	O
’	O	O
t	O	O
the	O	O
world	O	O
most	O	O
accurate	O	O
stopwatch	O	O
but	O	O
is	O	O
more	O	O
than	O	O
adequate	O	O
in	O	O
this	O	O
case	O	O
,	O	O
as	O	O
you	O	O
’	O	O
ll	O	O
see	O	O
.	O	O
Here	O	O
’	O	O
s	O	O
the	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Let	O	O
’	O	O
s	O	O
start	O	O
off	O	O
by	O	O
giving	O	O
it	O	O
an	O	O
easy	O	O
job	O	O
:	O	O
a	O	O
source	O	O
set	O	O
of	O	O
100	O	O
items	O	O
,	O	O
and	O	O
100	O	O
to	O	O
remove	O	O
:	O	O
#	O	O
pre	O	O
Okay	O	O
,	O	O
That	O	O
'	O	O
s	O	O
fast	O	O
as	O	O
I	O	O
expected	O	O
.	O	O
Next	O	O
i	O	O
tried	O	O
source	O	O
of	O	O
one	O	O
million	O	O
items	O	O
and	O	O
300	O	O
,	O	O
000	O	O
items	O	O
to	O	O
remove	O	O
?	O	O
#	O	O
pre	O	O
That	O	O
still	O	O
seems	O	O
pretty	O	O
speedy	O	O
.	O	O
Now	O	O
make	O	O
it	O	O
a	O	O
bit	O	O
easier	O	O
–	O	O
300	O	O
,	O	O
000	O	O
source	O	O
items	O	O
and	O	O
300	O	O
,	O	O
000	O	O
removals	O	O
:	O	O
#	O	O
pre	O	O
Nearly	O	O
three	O	O
minutes	O	O
?	O	O
Really	O	O
confused	O	O
!	O	O
!	O	O
can	O	O
some	O	O
one	O	O
explain	O	O
why	O	O
this	O	O
is	O	O
happening	O	O
.	O	O
Question	O	O
-	O	O
10977992	O	O
#	O	O
pre	O	O
We	O	O
can	O	O
use	O	O
Iterator	B-api_mention	B-api_mention
to	O	O
traverse	O	O
a	O	O
Set	B-api_mention	B-api_mention
or	O	O
a	O	O
List	B-api_mention	B-api_mention
or	O	O
a	O	O
Map	B-api_mention	B-api_mention
.	O	O
But	O	O
ListIterator	B-api_mention	B-api_mention
can	O	O
only	O	O
be	O	O
used	O	O
to	O	O
traverse	O	O
a	O	O
List	B-api_mention	B-api_mention
,	O	O
it	O	O
can	O	O
'	O	O
t	O	O
traverse	O	O
a	O	O
Set	B-api_mention	B-api_mention
.	O	O
Why	O	O
?	O	O
I	O	O
know	O	O
that	O	O
the	O	O
main	O	O
difference	O	O
is	O	O
that	O	O
with	O	O
iterator	B-api_mention	O
we	O	O
can	O	O
travel	O	O
in	O	O
only	O	O
one	O	O
direction	O	O
but	O	O
with	O	O
ListIterator	B-api_mention	B-api_mention
we	O	O
can	O	O
travel	O	O
both	O	O
directions	O	O
.	O	O
Are	O	O
there	O	O
any	O	O
other	O	O
differences	O	O
?	O	O
And	O	O
any	O	O
advantages	O	O
of	O	O
ListIterator	B-api_mention	B-api_mention
over	O	O
Iterator	B-api_mention	B-api_mention
?	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725518	O	O
Because	O	O
the	O	O
concept	O	O
of	O	O
a	O	O
List	B-api_mention	B-api_mention
is	O	O
incompatible	O	O
with	O	O
the	O	O
concept	O	O
of	O	O
an	O	O
automatically	O	O
sorted	O	O
collection	O	O
.	O	O
The	O	O
point	O	O
of	O	O
a	O	O
List	B-api_mention	B-api_mention
is	O	O
that	O	O
after	O	O
calling	O	O
list	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
a	O	O
call	O	O
to	O	O
list	O	O
.	B-api_mention	B-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
elem	O	O
.	O	O
With	O	O
an	O	O
auto	O	O
-	O	O
sorted	O	O
list	O	O
,	O	O
the	O	O
element	O	O
could	O	O
end	O	O
up	O	O
in	O	O
an	O	O
arbitrary	O	O
position	O	O
.	O	O
Question	O	O
-	O	O
32323081	O	O
,	O	O
answer	O	O
-	O	O
32323641	O	O
First	O	O
of	O	O
all	O	O
,	O	O
you	O	O
don	O	O
'	O	O
have	O	O
to	O	O
overload	O	O
:	O	O
D	O	O
-	O	O
overloading	O	O
is	O	O
never	O	O
a	O	O
necessity	O	O
;	O	O
use	O	O
2	O	O
different	O	O
method	O	O
names	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
foo	O	O
and	O	O
fooX	O	O
Secondly	O	O
,	O	O
I	O	O
don	O	O
'	O	O
t	O	O
see	O	O
why	O	O
you	O	O
need	O	O
2	O	O
methods	O	O
here	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
handle	O	O
checked	O	O
and	O	O
unchecked	O	O
exceptions	O	O
differently	O	O
,	O	O
it	O	O
can	O	O
be	O	O
done	O	O
at	O	O
runtime	O	O
.	O	O
To	O	O
achieve	O	O
"	O	O
exception	O	O
transparency	O	O
"	O	O
,	O	O
you	O	O
can	O	O
do	O	O
#	O	O
pre	O	O
Finally	O	O
,	O	O
disambiguity	O	O
can	O	O
be	O	O
achieved	O	O
throw	O	O
lambda	O	O
return	O	O
type	O	O
;	O	O
the	O	O
compiler	O	O
uses	O	O
the	O	O
return	O	O
type	O	O
as	O	O
if	O	O
using	O	O
an	O	O
argument	O	O
type	O	O
for	O	O
choosing	O	O
the	O	O
most	O	O
specific	O	O
method	O	O
.	O	O
This	O	O
gives	O	O
us	O	O
the	O	O
idea	O	O
to	O	O
wrap	O	O
the	O	O
value	O	O
together	O	O
with	O	O
the	O	O
exception	O	O
type	O	O
,	O	O
as	O	O
Result	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
,	O	O
a	O	O
"	O	O
monad	O	O
"	O	O
as	O	O
they	O	O
say	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
11411022	O	O
,	O	O
answer	O	O
-	O	O
34052602	O	O
The	O	O
best	O	O
way	O	O
is	O	O
the	O	O
clearest	O	O
way	O	O
:	O	O
*	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentThread	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Looper	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getMainLooper	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getThread	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Or	O	O
,	O	O
if	O	O
the	O	O
runtime	O	O
platform	O	O
is	O	O
API	O	O
level	O	O
23	O	O
(	O	O
Marshmallow	O	O
6	O	O
.	O	O
0	O	O
)	O	O
or	O	O
higher	O	O
:	O	O
Looper	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getMainLooper	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
isCurrentThread	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
See	O	O
the	O	O
Looper	B-api_mention	O
API	O	O
.	O	O
Note	O	O
that	O	O
calling	O	O
Looper	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getMainLooper	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
involves	O	O
synchonization	O	O
(	O	O
see	O	O
the	O	O
source	O	O
)	O	O
.	O	O
You	O	O
might	O	O
want	O	O
to	O	O
avoid	O	O
the	O	O
overhead	O	O
by	O	O
storing	O	O
the	O	O
return	O	O
value	O	O
and	O	O
reusing	O	O
it	O	O
.	O	O
*	O	O
credit	O	O
greg7gkb	O	O
Question	O	O
-	O	O
9297899	O	O
,	O	O
answer	O	O
-	O	O
25816501	O	O
Even	O	O
though	O	O
this	O	O
is	O	O
not	O	O
a	O	O
direct	O	O
answer	O	O
to	O	O
the	O	O
question	O	O
,	O	O
it	O	O
is	O	O
an	O	O
addition	O	O
to	O	O
the	O	O
.	B-api_mention	O
length	I-api_mention	O
vs	O	O
.	B-api_mention	B-api_mention
size	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
argument	O	O
.	O	O
I	O	O
was	O	O
researching	O	O
something	O	O
related	O	O
to	O	O
this	O	O
question	O	O
so	O	O
when	O	O
I	O	O
came	O	O
across	O	O
it	O	O
I	O	O
noticed	O	O
that	O	O
the	O	O
definition	O	O
(	O	O
s	O	O
)	O	O
provided	O	O
here	O	O
#	O	O
blockquote	O	O
is	O	O
not	O	O
"	O	O
exactly	O	O
"	O	O
correct	O	O
.	O	O
The	O	O
field	O	O
length	O	O
contains	O	O
the	O	O
number	O	O
of	O	O
available	O	O
places	O	O
to	O	O
put	O	O
a	O	O
component	O	O
,	O	O
not	O	O
the	O	O
number	O	O
of	O	O
components	O	O
present	O	O
in	O	O
the	O	O
array	O	O
.	O	O
So	O	O
it	O	O
represents	O	O
the	O	O
total	O	O
available	O	O
memory	O	O
allocated	O	O
to	O	O
that	O	O
array	O	O
,	O	O
not	O	O
how	O	O
much	O	O
of	O	O
that	O	O
memory	O	O
is	O	O
filled	O	O
.	O	O
#	O	O
img	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
the	O	O
.	O	B-api_mention
size	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
property	O	O
of	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
does	O	O
give	O	O
the	O	O
number	O	O
of	O	O
elements	O	O
in	O	O
the	O	O
list	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32475166	O	O
,	O	O
answer	O	O
-	O	O
32476850	O	O
When	O	O
you	O	O
think	O	O
about	O	O
the	O	O
type	O	O
of	O	O
the	O	O
operands	O	O
,	O	O
the	O	O
problem	O	O
becomes	O	O
more	O	O
apparent	O	O
:	O	O
this	O	O
.	O	O
method	O	O
!	O	O
=	O	O
null	O	O
?	O	O
this	O	O
.	O	O
method	O	O
:	O	O
this	O	O
.	O	O
constructor	O	O
has	O	O
as	O	O
type	O	O
the	O	O
most	O	O
specialized	O	O
common	O	O
type	O	O
of	O	O
both	O	O
the	O	O
operands	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
the	O	O
most	O	O
specialized	O	O
type	O	O
common	O	O
to	O	O
both	O	O
this	O	O
.	O	O
method	O	O
and	O	O
this	O	O
.	O	O
constructor	O	O
.	O	O
In	O	O
Java	O	O
7	O	O
this	O	O
is	O	O
java	B-api_mention	O
.	I-api_mention	O
lang	I-api_mention	O
.	I-api_mention	O
reflect	I-api_mention	O
.	I-api_mention	O
Member	I-api_mention	O
,	O	O
however	O	O
the	O	O
Java	O	O
8	O	O
class	O	O
library	O	O
introduces	O	O
a	O	O
new	O	O
type	O	O
java	O	O
.	O	O
lang	O	O
.	O	O
reflect	O	O
.	O	O
Executable	O	O
which	O	O
is	O	O
more	O	O
specialized	O	O
than	O	O
the	O	O
generic	O	O
Member	O	O
.	O	O
Hence	O	O
with	O	O
a	O	O
Java	O	O
8	O	O
class	O	O
library	O	O
the	O	O
result	O	O
type	O	O
of	O	O
the	O	O
ternary	O	O
expression	O	O
is	O	O
Executable	O	O
rather	O	O
than	O	O
Member	O	O
.	O	O
Some	O	O
(	O	O
pre	O	O
-	O	O
release	O	O
)	O	O
versions	O	O
of	O	O
the	O	O
Java	O	O
8	O	O
compiler	O	O
seem	O	O
to	O	O
have	O	O
produced	O	O
an	O	O
explicit	O	O
reference	O	O
to	O	O
Executable	O	O
inside	O	O
generated	O	O
code	O	O
when	O	O
compiling	O	O
the	O	O
ternary	O	O
operator	O	O
.	O	O
This	O	O
would	O	O
trigger	O	O
a	O	O
class	O	O
load	O	O
,	O	O
and	O	O
thus	O	O
in	O	O
turn	O	O
a	O	O
ClassNotFoundException	B-api_mention	B-api_mention
at	O	O
runtime	O	O
when	O	O
running	O	O
with	O	O
a	O	O
class	O	O
library	O	O
<	O	O
JDK	O	O
8	O	O
,	O	O
because	O	O
Executable	O	B-api_mention
only	O	O
exists	O	O
for	O	O
JDK	O	O
≥	O	O
8	O	O
.	O	O
As	O	O
noted	O	O
by	O	O
Tagir	O	O
Valeev	O	O
in	O	O
this	O	O
answer	O	O
,	O	O
this	O	O
is	O	O
actually	O	O
a	O	O
bug	O	O
in	O	O
pre	O	O
-	O	O
release	O	O
versions	O	O
of	O	O
JDK	O	O
8	O	O
and	O	O
has	O	O
since	O	O
been	O	O
fixed	O	O
,	O	O
so	O	O
both	O	O
the	O	O
if	O	O
-	O	O
else	O	O
workaround	O	O
and	O	O
the	O	O
explanatory	O	O
comment	O	O
are	O	O
now	O	O
obsolete	O	O
.	O	O
Additional	O	O
note	O	O
:	O	O
One	O	O
might	O	O
come	O	O
to	O	O
the	O	O
conclusion	O	O
that	O	O
this	O	O
compiler	O	O
bug	O	O
was	O	O
present	O	O
before	O	O
Java	O	O
8	O	O
.	O	O
However	O	O
,	O	O
the	O	O
byte	O	O
code	O	O
generated	O	O
for	O	O
the	O	O
ternary	O	O
by	O	O
OpenJDK	O	O
7	O	O
is	O	O
the	O	O
same	O	O
as	O	O
the	O	O
byte	O	O
code	O	O
generated	O	O
by	O	O
OpenJDK	O	O
8	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
the	O	O
type	O	O
of	O	O
the	O	O
expression	O	O
goes	O	O
completely	O	O
unmentioned	O	O
at	O	O
runtime	O	O
,	O	O
the	O	O
code	O	O
is	O	O
really	O	O
only	O	O
test	O	O
,	O	O
branch	O	O
,	O	O
load	O	O
,	O	O
return	O	O
without	O	O
any	O	O
additional	O	O
checks	O	O
going	O	O
on	O	O
.	O	O
So	O	O
rest	O	O
assured	O	O
that	O	O
this	O	O
is	O	O
not	O	O
a	O	O
problem	O	O
(	O	O
anymore	O	O
)	O	O
and	O	O
indeed	O	O
seems	O	O
to	O	O
have	O	O
been	O	O
a	O	O
temporary	O	O
problem	O	O
during	O	O
development	O	O
of	O	O
Java	O	O
8	O	O
.	O	O
Question	O	O
-	O	O
12539365	O	O
I	O	O
write	O	O
jUnit	O	O
test	O	O
cases	O	O
for	O	O
3	O	O
purposes	O	O
:	O	O
#	O	O
li	O	O
To	O	O
ensure	O	O
that	O	O
my	O	O
code	O	O
satisfies	O	O
all	O	O
of	O	O
the	O	O
required	O	O
functionality	O	O
,	O	O
under	O	O
all	O	O
(	O	O
or	O	O
most	O	O
of	O	O
)	O	O
the	O	O
input	O	O
combinations	O	O
/	O	O
values	O	O
.	O	O
#	O	O
li	O	O
To	O	O
ensure	O	O
that	O	O
I	O	O
can	O	O
change	O	O
the	O	O
implementation	O	O
,	O	O
and	O	O
rely	O	O
on	O	O
JUnit	O	O
test	O	O
cases	O	O
to	O	O
tell	O	O
me	O	O
that	O	O
all	O	O
my	O	O
functionality	O	O
is	O	O
still	O	O
satisfied	O	O
.	O	O
#	O	O
li	O	O
As	O	O
a	O	O
documentation	O	O
of	O	O
all	O	O
the	O	O
use	O	O
cases	O	O
my	O	O
code	O	O
handles	O	O
,	O	O
and	O	O
act	O	O
as	O	O
a	O	O
spec	O	O
for	O	O
refactoring	O	O
-	O	O
should	O	O
the	O	O
code	O	O
ever	O	O
need	O	O
to	O	O
be	O	O
rewritten	O	O
.	O	O
(	O	O
Refactor	O	O
the	O	O
code	O	O
,	O	O
and	O	O
if	O	O
my	O	O
jUnit	O	O
tests	O	O
fail	O	O
-	O	O
you	O	O
probably	O	O
missed	O	O
some	O	O
use	O	O
case	O	O
)	O	O
.	O	O
I	O	O
do	O	O
not	O	O
understand	O	O
why	O	O
or	O	O
when	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
be	O	O
used	O	O
.	O	O
When	O	O
I	O	O
see	O	O
verify	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
being	O	O
called	O	O
,	O	O
it	O	O
is	O	O
telling	O	O
me	O	O
that	O	O
my	O	O
jUnit	O	O
is	O	O
becoming	O	O
aware	O	O
of	O	O
the	O	O
implementation	O	O
.	O	O
(	O	O
Thus	O	O
changing	O	O
my	O	O
implementation	O	O
would	O	O
break	O	O
my	O	O
jUnits	O	O
,	O	O
even	O	O
though	O	O
my	O	O
functionality	O	O
was	O	O
unaffected	O	O
)	O	O
.	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
:	O	O
#	O	O
li	O	O
What	O	O
should	O	O
be	O	O
the	O	O
guidelines	O	O
for	O	O
appropriate	O	O
usage	O	O
of	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
#	O	O
li	O	O
Is	O	O
it	O	O
fundamentally	O	O
correct	O	O
for	O	O
jUnits	O	O
to	O	O
be	O	O
aware	O	O
of	O	O
,	O	O
or	O	O
tightly	O	O
coupled	O	O
to	O	O
,	O	O
the	O	O
implementation	O	O
of	O	O
the	O	O
class	O	O
under	O	O
test	O	O
?	O	O
Question	O	O
-	O	O
6470651	O	O
,	O	O
answer	O	O
-	O	O
6540248	O	O
Below	O	O
there	O	O
will	O	O
be	O	O
a	O	O
non	O	O
-	O	O
obvious	O	O
case	O	O
where	O	O
Java	O	O
leaks	O	O
,	O	O
besides	O	O
the	O	O
standard	O	O
case	O	O
of	O	O
forgotten	O	O
listeners	O	O
,	O	O
static	O	O
references	O	O
,	O	O
bogus	O	O
/	O	O
modifiable	O	O
keys	O	O
in	O	O
hashmaps	O	O
,	O	O
or	O	O
just	O	O
threads	O	O
stuck	O	O
without	O	O
any	O	O
chance	O	O
to	O	O
end	O	O
their	O	O
life	O	O
-	O	O
cycle	O	O
.	O	O
#	O	O
li	O	O
File	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
deleteOnExit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
always	O	O
leaks	O	O
the	O	O
string	O	O
,	O	O
if	O	O
the	O	O
string	O	O
is	O	O
a	O	O
substring	O	O
,	O	O
the	O	O
leak	O	O
is	O	O
even	O	O
worse	O	O
(	O	O
the	O	O
underlying	O	O
char	O	O
[	O	O
]	O	O
is	O	O
also	O	O
leaked	O	O
)	O	O
-	O	O
in	O	O
Java	O	O
7	O	O
substring	O	O
also	O	O
copies	O	O
the	O	O
char	O	O
[	O	O
]	O	O
,	O	O
so	O	O
the	O	O
later	O	O
doesn	O	O
'	O	O
t	O	O
apply	O	O
;	O	O
@	O	O
Daniel	O	O
,	O	O
no	O	O
needs	O	O
for	O	O
votes	O	O
,	O	O
though	O	O
.	O	O
I	O	O
'	O	O
ll	O	O
concentrate	O	O
on	O	O
threads	O	O
to	O	O
show	O	O
the	O	O
danger	O	O
of	O	O
unmanaged	O	O
threads	O	O
mostly	O	O
,	O	O
don	O	O
'	O	O
t	O	O
wish	O	O
to	O	O
even	O	O
touch	O	O
swing	O	O
.	O	O
#	O	O
li	O	O
Runtime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
addShutdownHook	I-api_mention	I-api_mention
and	O	O
not	O	O
remove	O	O
.	O	O
.	O	O
.	O	O
and	O	O
then	O	O
even	O	O
with	O	O
removeShutdownHook	B-api_mention	B-api_mention
due	O	O
to	O	O
a	O	O
bug	O	O
in	O	O
ThreadGroup	B-api_mention	B-api_mention
class	O	O
regarding	O	O
unstarted	O	O
threads	O	O
it	O	O
may	O	O
not	O	O
get	O	O
collected	O	O
,	O	O
effectively	O	O
leak	O	O
the	O	O
ThreadGroup	B-api_mention	B-api_mention
.	O	O
JGroup	O	O
has	O	O
the	O	O
leak	O	O
in	O	O
GossipRouter	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
Creating	O	O
,	O	O
but	O	O
not	O	O
starting	O	O
,	O	O
a	O	O
Thread	B-api_mention	B-api_mention
goes	O	O
into	O	O
the	O	O
same	O	O
category	O	O
as	O	O
above	O	O
.	O	O
#	O	O
li	O	O
Creating	O	O
a	O	O
thread	O	O
inherits	O	O
the	O	O
ContextClassLoader	B-api_mention	B-api_mention
and	O	O
AccessControlContext	B-api_mention	B-api_mention
,	O	O
plus	O	O
the	O	O
ThreadGroup	B-api_mention	B-api_mention
and	O	O
any	O	O
InheritedThreadLocal	B-api_mention	B-api_mention
,	O	O
all	O	O
those	O	O
references	O	O
are	O	O
potential	O	O
leaks	O	O
,	O	O
along	O	O
with	O	O
the	O	O
entire	O	O
classes	O	O
loaded	O	O
by	O	O
the	O	O
classloader	O	O
and	O	O
all	O	O
static	O	O
references	O	O
,	O	O
and	O	O
ja	O	O
-	O	O
ja	O	O
.	O	O
The	O	O
effect	O	O
is	O	O
especially	O	O
visible	O	O
with	O	O
the	O	O
entire	O	O
j	O	O
.	O	O
u	O	O
.	O	O
c	O	O
.	O	O
Executor	O	O
framework	O	O
that	O	O
features	O	O
a	O	O
super	O	O
simple	O	O
ThreadFactory	B-api_mention	B-api_mention
interface	O	O
,	O	O
yet	O	O
most	O	O
developers	O	O
have	O	O
no	O	O
clue	O	O
of	O	O
the	O	O
lurking	O	O
danger	O	O
.	O	O
Also	O	O
a	O	O
lot	O	O
of	O	O
libraries	O	O
do	O	O
start	O	O
threads	O	O
upon	O	O
request	O	O
(	O	O
way	O	O
too	O	O
many	O	O
industry	O	O
popular	O	O
libraries	O	O
)	O	O
.	O	O
#	O	O
li	O	O
ThreadLocal	O	B-api_mention
caches	O	O
;	O	O
those	O	O
are	O	O
evil	O	O
in	O	O
many	O	O
cases	O	O
.	O	O
I	O	O
am	O	O
sure	O	O
everyone	O	O
has	O	O
seen	O	O
quite	O	O
a	O	O
bit	O	O
of	O	O
simple	O	O
caches	O	O
based	O	O
on	O	O
ThreadLocal	B-api_mention	B-api_mention
,	O	O
well	O	O
the	O	O
bad	O	O
news	O	O
:	O	O
if	O	O
the	O	O
thread	O	O
keeps	O	O
going	O	O
more	O	O
than	O	O
expected	O	O
the	O	O
life	O	O
the	O	O
context	O	O
ClassLoader	B-api_mention	B-api_mention
,	O	O
it	O	O
is	O	O
a	O	O
pure	O	O
nice	O	O
little	O	O
leak	O	O
.	O	O
Do	O	O
not	O	O
use	O	O
ThreadLocal	B-api_mention	B-api_mention
caches	O	O
unless	O	O
really	O	O
needed	O	O
.	O	O
#	O	O
li	O	O
Calling	O	O
ThreadGroup	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
destroy	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
the	O	O
ThreadGroup	B-api_mention	B-api_mention
has	O	O
no	O	O
threads	O	O
itself	O	O
,	O	O
but	O	O
it	O	O
still	O	O
keeps	O	O
child	O	O
ThreadGroups	B-api_mention	B-api_mention
.	O	O
A	O	O
bad	O	O
leak	O	O
that	O	O
will	O	O
prevent	O	O
the	O	O
ThreadGroup	B-api_mention	B-api_mention
to	O	O
remove	O	O
from	O	O
its	O	O
parent	O	O
,	O	O
but	O	O
all	O	O
the	O	O
children	O	O
become	O	O
un	O	O
-	O	O
enumerateable	O	O
.	O	O
#	O	O
li	O	O
Using	O	O
WeakHashMap	B-api_mention	B-api_mention
and	O	O
the	O	O
value	O	O
(	O	O
in	O	O
)	O	O
directly	O	O
references	O	O
the	O	O
key	O	O
.	O	O
This	O	O
is	O	O
a	O	O
hard	O	O
one	O	O
to	O	O
find	O	O
without	O	O
a	O	O
heap	O	O
dump	O	O
.	O	O
That	O	O
applies	O	O
to	O	O
all	O	O
extended	O	O
Weak	O	O
/	O	O
SoftReference	O	B-api_mention
that	O	O
might	O	O
keep	O	O
a	O	O
hard	O	O
reference	O	O
back	O	O
to	O	O
the	O	O
guarded	O	O
object	O	O
.	O	O
#	O	O
li	O	O
Using	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
net	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
URL	I-api_mention	I-api_mention
with	O	O
the	O	O
HTTP	O	O
(	O	O
S	O	O
)	O	O
protocol	O	O
and	O	O
loading	O	O
the	O	O
resource	O	O
from	O	O
(	O	O
!	O	O
)	O	O
.	O	O
This	O	O
one	O	O
is	O	O
special	O	O
,	O	O
the	O	O
KeepAliveCache	B-api_mention	B-api_mention
creates	O	O
a	O	O
new	O	O
thread	O	O
in	O	O
the	O	O
system	O	O
ThreadGroup	B-api_mention	B-api_mention
which	O	O
leaks	O	O
the	O	O
current	O	O
thread	O	O
'	O	O
s	O	O
context	O	O
classloader	O	O
.	O	O
The	O	O
thread	O	O
is	O	O
created	O	O
upon	O	O
the	O	O
first	O	O
request	O	O
when	O	O
no	O	O
alive	O	O
thread	O	O
exists	O	O
,	O	O
so	O	O
either	O	O
you	O	O
may	O	O
get	O	O
lucky	O	O
or	O	O
just	O	O
leak	O	O
.	O	O
The	O	O
leak	O	O
is	O	O
already	O	O
fixed	O	O
in	O	O
Java	O	O
7	O	O
and	O	O
the	O	O
code	O	O
that	O	O
creates	O	O
thread	O	O
properly	O	O
removes	O	O
the	O	O
context	O	O
classloader	O	O
.	O	O
There	O	O
are	O	O
few	O	O
more	O	O
cases	O	O
(	O	O
like	O	O
ImageFetcher	B-api_mention	B-api_mention
,	O	O
also	O	O
fixed	O	O
)	O	O
of	O	O
creating	O	O
similar	O	O
threads	O	O
.	O	O
#	O	O
li	O	O
Using	O	O
InflaterInputStream	B-api_mention	B-api_mention
passing	O	O
new	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
zip	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Inflater	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
constructor	O	O
(	O	O
PNGImageDecoder	B-api_mention	O
for	O	O
instance	O	O
)	O	O
and	O	O
not	O	O
calling	O	O
end	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
the	O	O
inflater	O	O
.	O	O
Well	O	O
,	O	O
if	O	O
you	O	O
pass	O	O
in	O	O
the	O	O
constructor	O	O
with	O	O
just	O	O
new	O	O
,	O	O
no	O	O
chance	O	O
.	O	O
.	O	O
.	O	O
And	O	O
yes	O	O
,	O	O
calling	O	O
close	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
stream	O	O
does	O	O
not	O	O
close	O	O
the	O	O
inflater	O	O
if	O	O
it	O	O
'	O	O
s	O	O
manually	O	O
passed	O	O
as	O	O
constructor	O	O
parameter	O	O
.	O	O
This	O	O
is	O	O
not	O	O
a	O	O
true	O	O
leak	O	O
since	O	O
it	O	O
'	O	O
d	O	O
be	O	O
released	O	O
by	O	O
the	O	O
finalizer	O	O
.	O	O
.	O	O
.	O	O
when	O	O
it	O	O
deems	O	O
it	O	O
necessary	O	O
.	O	O
Till	O	O
that	O	O
moment	O	O
it	O	O
eats	O	O
native	O	O
memory	O	O
so	O	O
badly	O	O
it	O	O
can	O	O
cause	O	O
Linux	O	O
oom	O	O
_	O	O
killer	O	O
to	O	O
kill	O	O
the	O	O
process	O	O
with	O	O
impunity	O	O
.	O	O
The	O	O
main	O	O
issue	O	O
is	O	O
that	O	O
finalization	O	O
in	O	O
Java	O	O
is	O	O
very	O	O
unreliable	O	O
and	O	O
G1	O	O
made	O	O
it	O	O
worse	O	O
till	O	O
7	O	O
.	O	O
0	O	O
.	O	O
2	O	O
.	O	O
Moral	O	O
of	O	O
the	O	O
story	O	O
:	O	O
release	O	O
native	O	O
resources	O	O
as	O	O
soon	O	O
as	O	O
you	O	O
can	O	O
;	O	O
the	O	O
finalizer	O	O
is	O	O
just	O	O
too	O	O
poor	O	O
.	O	O
#	O	O
li	O	O
The	O	O
same	O	O
case	O	O
with	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
zip	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Deflater	I-api_mention	I-api_mention
.	O	O
This	O	O
one	O	O
is	O	O
far	O	O
worse	O	O
since	O	O
Deflater	B-api_mention	O
is	O	O
memory	O	O
hungry	O	O
in	O	O
Java	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
always	O	O
uses	O	O
15	O	O
bits	O	O
(	O	O
max	O	O
)	O	O
and	O	O
8	O	O
memory	O	O
levels	O	O
(	O	O
9	O	O
is	O	O
max	O	O
)	O	O
allocating	O	O
several	O	O
hundreds	O	O
KB	O	O
of	O	O
native	O	O
memory	O	O
.	O	O
Fortunately	O	O
,	O	O
Deflater	O	O
is	O	O
not	O	O
widely	O	O
used	O	O
and	O	O
to	O	O
my	O	O
knowledge	O	O
JDK	O	O
contains	O	O
no	O	O
misuses	O	O
.	O	O
Always	O	O
call	O	O
end	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
manually	O	O
create	O	O
a	O	O
Deflater	B-api_mention	O
or	O	O
Inflater	B-api_mention	B-api_mention
.	O	O
The	O	O
best	O	O
part	O	O
of	O	O
the	O	O
last	O	O
two	O	O
:	O	O
you	O	O
can	O	O
'	O	O
t	O	O
find	O	O
them	O	O
via	O	O
normal	O	O
profiling	O	O
tools	O	O
available	O	O
.	O	O
(	O	O
I	O	O
can	O	O
add	O	O
some	O	O
more	O	O
time	O	O
wasters	O	O
I	O	O
have	O	O
encountered	O	O
upon	O	O
request	O	O
.	O	O
)	O	O
Good	O	O
luck	O	O
and	O	O
stay	O	O
safe	O	O
;	O	O
leaks	O	O
are	O	O
evil	O	O
!	O	O
Question	O	O
-	O	O
5011932	O	O
I	O	O
am	O	O
storing	O	O
a	O	O
SQL	O	O
query	O	O
in	O	O
my	O	O
strings	O	O
.	O	O
xml	O	O
file	O	O
and	O	O
I	O	O
want	O	O
to	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	O
Format	I-api_mention	O
to	O	O
build	O	O
the	O	O
final	O	O
string	O	O
in	O	O
code	O	O
.	O	O
The	O	O
SELECT	O	O
statement	O	O
uses	O	O
a	O	O
like	O	O
,	O	O
something	O	O
like	O	O
this	O	O
:	O	O
SELECT	O	O
Field1	O	O
,	O	O
Field2	O	O
FROM	O	O
mytable	O	O
WHERE	O	O
Field1	O	O
LIKE	O	O
'	O	O
%	O	O
something	O	O
%	O	O
'	O	O
In	O	O
order	O	O
to	O	O
format	O	O
that	O	O
I	O	O
replace	O	O
'	O	O
something	O	O
'	O	O
with	O	O
%	O	O
1	O	O
$	O	O
s	O	O
so	O	O
it	O	O
becomes	O	O
:	O	O
SELECT	O	O
Field1	O	O
,	O	O
Field2	O	O
FROM	O	O
mytable	O	O
WHERE	O	O
Field1	O	O
LIKE	O	O
\	O	O
'	O	O
%	O	O
%	O	O
1	O	O
$	O	O
s	O	O
%	O	O
\	O	O
'	O	O
I	O	O
escape	O	O
the	O	O
single	O	O
quotes	O	O
with	O	O
the	O	O
backslash	O	O
.	O	O
However	O	O
I	O	O
am	O	O
not	O	O
able	O	O
to	O	O
escape	O	O
the	O	O
%	O	O
sign	O	O
.	O	O
How	O	O
can	O	O
I	O	O
include	O	O
a	O	O
like	O	O
statement	O	O
in	O	O
my	O	O
strings	O	O
.	O	O
xml	O	O
file	O	O
?	O	O
Question	O	O
-	O	O
8172420	O	O
,	O	O
answer	O	O
-	O	O
8172444	O	O
Try	O	O
this	O	O
:	O	O
Character	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
just	O	O
this	O	O
:	O	O
aChar	O	O
+	O	O
StringLiteral	O	O
Question	O	O
-	O	O
22182669	O	O
,	O	O
answer	O	O
-	O	O
22223113	O	O
The	O	O
most	O	O
common	O	O
cause	O	O
of	O	O
StackOverFlowError	B-api_mention	B-api_mention
is	O	O
excessively	O	O
deep	O	O
or	O	O
infinite	O	O
recursion	O	O
.	O	O
For	O	O
instance	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
Java	O	O
:	O	O
There	O	O
are	O	O
two	O	O
areas	O	O
in	O	O
memory	O	O
the	O	O
heap	O	O
and	O	O
stack	O	O
.	O	O
The	O	O
stack	O	O
memory	O	O
is	O	O
used	O	O
to	O	O
store	O	O
local	O	O
variables	O	O
and	O	O
function	O	O
call	O	O
,	O	O
while	O	O
heap	O	O
memory	O	O
is	O	O
used	O	O
to	O	O
store	O	O
objects	O	O
in	O	O
Java	O	O
.	O	O
If	O	O
there	O	O
is	O	O
no	O	O
memory	O	O
left	O	O
in	O	O
stack	O	O
for	O	O
storing	O	O
function	O	O
call	O	O
or	O	O
local	O	O
variable	O	O
,	O	O
JVM	O	O
will	O	O
throw	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
StackOverFlowError	I-api_mention	I-api_mention
while	O	O
if	O	O
there	O	O
is	O	O
no	O	O
more	O	O
heap	O	O
space	O	O
for	O	O
creating	O	O
object	O	O
,	O	O
JVM	O	O
will	O	O
throw	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
OutOfMemoryError	I-api_mention	I-api_mention
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
15430259	O	O
If	O	O
you	O	O
know	O	O
in	O	O
advance	O	O
what	O	O
the	O	O
size	O	O
of	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
going	O	O
to	O	O
be	O	O
,	O	O
it	O	O
is	O	O
more	O	O
efficient	O	O
to	O	O
specify	O	O
the	O	O
initial	O	O
capacity	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
,	O	O
the	O	O
internal	O	O
array	O	O
will	O	O
have	O	O
to	O	O
be	O	O
repeatedly	O	O
reallocated	O	O
as	O	O
the	O	O
list	O	O
grows	O	O
.	O	O
The	O	O
larger	O	O
the	O	O
final	O	O
list	O	O
,	O	O
the	O	O
more	O	O
time	O	O
you	O	O
save	O	O
by	O	O
avoiding	O	O
the	O	O
reallocations	O	O
.	O	O
That	O	O
said	O	O
,	O	O
even	O	O
without	O	O
pre	O	O
-	O	O
allocation	O	O
,	O	O
inserting	O	O
n	O	O
elements	O	O
at	O	O
the	O	O
back	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
guaranteed	O	O
to	O	O
take	O	O
total	O	O
O	O	O
(	O	O
args	O	O
)	O	O
time	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
appending	O	O
an	O	O
element	O	O
is	O	O
an	O	O
amortized	O	O
constant	O	O
-	O	O
time	O	O
operation	O	O
.	O	O
This	O	O
is	O	O
achieved	O	O
by	O	O
having	O	O
each	O	O
reallocation	O	O
increase	O	O
the	O	O
size	O	O
of	O	O
the	O	O
array	O	O
exponentially	O	O
,	O	O
typically	O	O
by	O	O
a	O	O
factor	O	O
of	O	O
1	O	O
.	O	O
5	O	O
.	O	O
With	O	O
this	O	O
approach	O	O
,	O	O
the	O	O
total	O	O
number	O	O
of	O	O
operations	O	O
can	O	O
be	O	O
shown	O	O
to	O	O
be	O	O
O	O	O
(	O	O
n	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
31170459	O	O
I	O	O
was	O	O
testing	O	O
boundary	O	O
conditions	O	O
on	O	O
some	O	O
code	O	O
involving	O	O
a	O	O
BigDecimal	B-api_mention	B-api_mention
,	O	O
and	O	O
I	O	O
noticed	O	O
that	O	O
when	O	O
a	O	O
BigDecimal	B-api_mention	B-api_mention
is	O	O
initialized	O	O
with	O	O
the	O	O
String	B-api_mention	B-api_mention
StringLiteral	O	O
it	O	O
behaves	O	O
unexpectedly	O	O
.	O	O
It	O	O
seems	O	O
to	O	O
have	O	O
a	O	O
value	O	O
between	O	O
0	O	O
and	O	O
1e	O	O
-	O	O
2147483647	O	O
.	O	O
When	O	O
I	O	O
try	O	O
calling	O	O
intValue	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
I	O	O
get	O	O
a	O	O
NegativeArraySizeException	B-api_mention	B-api_mention
.	O	O
I	O	O
should	O	O
note	O	O
that	O	O
2147483647	O	O
is	O	O
the	O	O
max	O	O
value	O	O
of	O	O
an	O	O
integer	O	O
on	O	O
my	O	O
system	O	O
.	O	O
Am	O	O
I	O	O
doing	O	O
something	O	O
wrong	O	O
,	O	O
or	O	O
is	O	O
this	O	O
a	O	O
problem	O	O
with	O	O
BigDecimal	B-api_mention	B-api_mention
?	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28588854	O	O
The	O	O
correct	O	O
answer	O	O
is	O	O
a	O	O
simple	O	O
"	O	O
because	O	O
the	O	O
standard	O	O
(	O	O
and	O	O
the	O	O
docs	O	O
)	O	O
say	O	O
so	O	O
"	O	O
.	O	O
But	O	O
I	O	O
'	O	O
m	O	O
not	O	O
gonna	O	O
be	O	O
cynical	O	O
because	O	O
it	O	O
'	O	O
s	O	O
obvious	O	O
that	O	O
'	O	O
s	O	O
not	O	O
what	O	O
you	O	O
are	O	O
after	O	O
.	O	O
In	O	O
addition	O	O
to	O	O
the	O	O
other	O	O
answers	O	O
here	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
try	O	O
to	O	O
relate	O	O
the	O	O
infinities	O	O
to	O	O
saturating	O	O
arithmetic	O	O
.	O	O
Other	O	O
answers	O	O
have	O	O
already	O	O
stated	O	O
that	O	O
the	O	O
reason	O	O
the	O	O
comparisons	O	O
on	O	O
NaNs	O	O
result	O	O
in	O	O
true	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
not	O	O
gonna	O	O
beat	O	O
a	O	O
dead	O	O
horse	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
say	O	O
I	O	O
have	O	O
a	O	O
saturating	O	O
integer	O	O
that	O	O
represents	O	O
grayscale	O	O
colors	O	O
.	O	O
Why	O	O
am	O	O
I	O	O
using	O	O
saturating	O	O
arithmetic	O	O
?	O	O
Because	O	O
anything	O	O
brighter	O	O
than	O	O
white	O	O
is	O	O
still	O	O
white	O	O
,	O	O
and	O	O
anything	O	O
darker	O	O
than	O	O
black	O	O
is	O	O
still	O	O
black	O	O
(	O	O
except	O	O
orange	O	O
)	O	O
.	O	O
That	O	O
means	O	O
BLACK	O	O
-	O	O
x	O	O
=	O	O
=	O	O
BLACK	O	O
and	O	O
WHITE	O	O
+	O	O
x	O	O
=	O	O
=	O	O
WHITE	O	O
.	O	O
Makes	O	O
sense	O	O
?	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
say	O	O
we	O	O
want	O	O
to	O	O
represent	O	O
those	O	O
grayscale	O	O
colors	O	O
with	O	O
a	O	O
(	O	O
signed	O	O
)	O	O
1s	O	O
complement	O	O
8	O	O
-	O	O
bit	O	O
integer	O	O
where	O	O
BLACK	O	O
=	O	O
=	O	O
-	O	O
127	O	O
and	O	O
WHITE	O	O
=	O	O
=	O	O
127	O	O
.	O	O
Why	O	O
1s	O	O
complement	O	O
?	O	O
Because	O	O
it	O	O
gives	O	O
us	O	O
a	O	O
signed	O	O
zero	O	O
like	O	O
IEEE	O	O
754	O	O
floating	O	O
point	O	O
.	O	O
And	O	O
,	O	O
because	O	O
we	O	O
are	O	O
using	O	O
saturating	O	O
arithmetic	O	O
,	O	O
-	O	O
127	O	O
-	O	O
x	O	O
=	O	O
=	O	O
-	O	O
127	O	O
and	O	O
127	O	O
+	O	O
x	O	O
=	O	O
=	O	O
127	O	O
.	O	O
How	O	O
does	O	O
this	O	O
relate	O	O
to	O	O
floating	O	O
point	O	O
infinities	O	O
?	O	O
Replace	O	O
the	O	O
integer	O	O
with	O	O
floating	O	O
point	O	O
,	O	O
BLACK	O	O
with	O	O
NEGATIVE	O	O
_	O	O
INFINITY	O	O
,	O	O
and	O	O
WHITE	O	O
with	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
and	O	O
what	O	O
do	O	O
you	O	O
get	O	O
?	O	O
NEGATIVE	O	O
_	O	O
INFINITY	O	O
-	O	O
x	O	O
=	O	O
=	O	O
NEGATIVE	O	O
_	O	O
INFINITY	O	O
and	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
+	O	O
x	O	O
=	O	O
=	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
.	O	O
Since	O	O
you	O	O
used	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
use	O	O
it	O	O
also	O	O
.	O	O
First	O	O
we	O	O
need	O	O
a	O	O
class	O	O
to	O	O
represent	O	O
our	O	O
saturating	O	O
integer	O	O
-	O	O
based	O	O
color	O	O
;	O	O
let	O	O
'	O	O
s	O	O
call	O	O
it	O	O
SaturatedColor	B-api_mention	B-api_mention
and	O	O
assume	O	O
it	O	O
works	O	O
like	O	O
any	O	O
other	O	O
integer	O	O
in	O	O
Java	O	O
.	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
take	O	O
your	O	O
code	O	O
and	O	O
replace	O	O
double	O	O
with	O	O
our	O	O
own	O	O
SaturatedColor	B-api_mention	B-api_mention
and	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
with	O	O
SaturatedColor	B-api_mention	B-api_mention
.	I-api_mention	O
WHITE	I-api_mention	O
:	O	O
#	O	O
pre	O	O
As	O	O
we	O	O
established	O	O
above	O	O
,	O	O
SaturatedColor	B-api_mention	O
.	I-api_mention	O
WHITE	I-api_mention	O
(	O	O
just	O	O
WHITE	O	O
above	O	O
)	O	O
is	O	O
127	O	O
,	O	O
so	O	O
let	O	O
'	O	O
s	O	O
do	O	O
that	O	O
here	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
we	O	O
take	O	O
the	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
statements	O	O
you	O	O
used	O	O
and	O	O
replace	O	O
a	O	O
and	O	O
b	O	O
with	O	O
their	O	O
value	O	O
(	O	O
values	O	O
?	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
should	O	O
be	O	O
obvious	O	O
what	O	O
this	O	O
will	O	O
print	O	O
.	O	O
Question	O	O
-	O	O
16252269	O	O
,	O	O
answer	O	O
-	O	O
30210459	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
allows	O	O
you	O	O
to	O	O
pass	O	O
an	O	O
instance	O	O
of	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
which	O	O
defines	O	O
the	O	O
sorting	O	O
logic	O	O
.	O	O
So	O	O
instead	O	O
of	O	O
sorting	O	O
the	O	O
list	O	O
in	O	O
natural	O	O
order	O	O
and	O	O
then	O	O
reversing	O	O
it	O	O
,	O	O
one	O	O
can	O	O
simply	O	O
pass	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
reverseOrder	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
sort	O	O
in	O	O
order	O	O
to	O	O
sort	O	O
the	O	O
list	O	O
in	O	O
reverse	O	O
order	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
mentioned	O	O
by	O	O
@	O	O
Marco13	O	O
,	O	O
apart	O	O
from	O	O
being	O	O
more	O	O
idiomatic	O	O
(	O	O
and	O	O
possibly	O	O
more	O	O
efficient	O	O
)	O	O
,	O	O
using	O	O
the	O	O
reverse	O	O
order	O	O
comparator	O	O
makes	O	O
sure	O	O
that	O	O
the	O	O
sort	O	O
is	O	O
stable	O	O
(	O	O
meaning	O	O
that	O	O
the	O	O
order	O	O
of	O	O
elements	O	O
will	O	O
not	O	O
be	O	O
changed	O	O
when	O	O
they	O	O
are	O	O
equal	O	O
according	O	O
to	O	O
the	O	O
comparator	O	O
,	O	O
whereas	O	O
reversing	O	O
will	O	O
change	O	O
the	O	O
order	O	O
)	O	O
Question	O	O
-	O	O
5031614	O	O
,	O	O
answer	O	O
-	O	O
5032837	O	O
If	O	O
you	O	O
want	O	O
to	O	O
use	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
your	O	O
Sets	O	O
,	O	O
in	O	O
the	O	O
sense	O	O
that	O	O
the	O	O
same	O	O
entity	O	O
can	O	O
only	O	O
be	O	O
in	O	O
there	O	O
once	O	O
,	O	O
then	O	O
there	O	O
is	O	O
only	O	O
one	O	O
option	O	O
:	O	O
Option	O	O
2	O	O
.	O	O
That	O	O
'	O	O
s	O	O
because	O	O
a	O	O
primary	O	O
key	O	O
for	O	O
an	O	O
entity	O	O
by	O	O
definition	O	O
never	O	O
changes	O	O
(	O	O
if	O	O
somebody	O	O
indeed	O	O
updates	O	O
it	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
the	O	O
same	O	O
entity	O	O
anymore	O	O
)	O	O
You	O	O
should	O	O
take	O	O
that	O	O
literally	O	O
:	O	O
Since	O	O
your	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
based	O	O
on	O	O
the	O	O
primary	O	O
key	O	O
,	O	O
you	O	O
must	O	O
not	O	O
use	O	O
these	O	O
methods	O	O
,	O	O
until	O	O
the	O	O
primary	O	O
key	O	O
is	O	O
set	O	O
.	O	O
So	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
put	O	O
entities	O	O
in	O	O
the	O	O
set	O	O
,	O	O
until	O	O
they	O	O
'	O	O
re	O	O
assigned	O	O
a	O	O
primary	O	O
key	O	O
.	O	O
(	O	O
Yes	O	O
,	O	O
UUIDs	O	O
and	O	O
similar	O	O
concepts	O	O
may	O	O
help	O	O
to	O	O
assign	O	O
primary	O	O
keys	O	O
early	O	O
.	O	O
)	O	O
Now	O	O
,	O	O
it	O	O
'	O	O
s	O	O
theoretically	O	O
also	O	O
possible	O	O
to	O	O
achieve	O	O
that	O	O
with	O	O
Option	O	O
3	O	O
,	O	O
even	O	O
though	O	O
so	O	O
-	O	O
called	O	O
"	O	O
business	O	O
-	O	O
keys	O	O
"	O	O
have	O	O
the	O	O
nasty	O	O
drawback	O	O
that	O	O
they	O	O
can	O	O
change	O	O
:	O	O
"	O	O
All	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
do	O	O
is	O	O
delete	O	O
the	O	O
already	O	O
inserted	O	O
entities	O	O
from	O	O
the	O	O
set	O	O
(	O	O
s	O	O
)	O	O
,	O	O
and	O	O
re	O	O
-	O	O
insert	O	O
them	O	O
.	O	O
"	O	O
That	O	O
is	O	O
true	O	O
-	O	O
but	O	O
it	O	O
also	O	O
means	O	O
,	O	O
that	O	O
in	O	O
a	O	O
distributed	O	O
system	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
make	O	O
sure	O	O
,	O	O
that	O	O
this	O	O
is	O	O
done	O	O
absolutely	O	O
everywhere	O	O
the	O	O
data	O	O
has	O	O
been	O	O
inserted	O	O
to	O	O
(	O	O
and	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
make	O	O
sure	O	O
,	O	O
that	O	O
the	O	O
update	O	O
is	O	O
performed	O	O
,	O	O
before	O	O
other	O	O
things	O	O
occur	O	O
)	O	O
.	O	O
You	O	O
'	O	O
ll	O	O
need	O	O
a	O	O
sophisticated	O	O
update	O	O
mechanism	O	O
,	O	O
especially	O	O
if	O	O
some	O	O
remote	O	O
systems	O	O
aren	O	O
'	O	O
t	O	O
currently	O	O
reachable	O	O
.	O	O
.	O	O
.	O	O
Option	O	O
1	O	O
can	O	O
only	O	O
be	O	O
used	O	O
,	O	O
if	O	O
all	O	O
the	O	O
objects	O	O
in	O	O
your	O	O
sets	O	O
are	O	O
from	O	O
the	O	O
same	O	O
Hibernate	O	O
session	O	O
.	O	O
The	O	O
Hibernate	O	O
documentation	O	O
makes	O	O
this	O	O
very	O	O
clear	O	O
in	O	O
chapter	O	O
13	O	O
.	O	O
1	O	O
.	O	O
3	O	O
.	O	O
Considering	O	O
object	O	O
identity	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
continues	O	O
to	O	O
argue	O	O
in	O	O
favor	O	O
of	O	O
Option	O	O
3	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
true	O	O
,	O	O
if	O	O
you	O	O
#	O	O
li	O	O
cannot	O	O
assign	O	O
the	O	O
id	O	O
early	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
by	O	O
using	O	O
UUIDs	O	O
)	O	O
#	O	O
li	O	O
and	O	O
yet	O	O
you	O	O
absolutely	O	O
want	O	O
to	O	O
put	O	O
your	O	O
objects	O	O
in	O	O
sets	O	O
while	O	O
they	O	O
'	O	O
re	O	O
in	O	O
transient	O	O
state	O	O
.	O	O
Otherwise	O	O
,	O	O
you	O	O
'	O	O
re	O	O
free	O	O
to	O	O
choose	O	O
Option	O	O
2	O	O
.	O	O
Then	O	O
it	O	O
mentions	O	O
the	O	O
need	O	O
for	O	O
a	O	O
relative	O	O
stability	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
correct	O	O
.	O	O
The	O	O
practical	O	O
problem	O	O
I	O	O
see	O	O
with	O	O
this	O	O
is	O	O
:	O	O
If	O	O
you	O	O
can	O	O
'	O	O
t	O	O
guarantee	O	O
absolute	O	O
stability	O	O
,	O	O
how	O	O
will	O	O
you	O	O
be	O	O
able	O	O
to	O	O
guarantee	O	O
stability	O	O
"	O	O
as	O	O
long	O	O
as	O	O
the	O	O
objects	O	O
are	O	O
in	O	O
the	O	O
same	O	O
Set	O	O
"	O	O
.	O	O
I	O	O
can	O	O
imagine	O	O
some	O	O
special	O	O
cases	O	O
(	O	O
like	O	O
using	O	O
sets	O	O
only	O	O
for	O	O
a	O	O
conversation	O	O
and	O	O
then	O	O
throwing	O	O
it	O	O
away	O	O
)	O	O
,	O	O
but	O	O
I	O	O
would	O	O
question	O	O
the	O	O
general	O	O
practicability	O	O
of	O	O
this	O	O
.	O	O
Short	O	O
version	O	O
:	O	O
#	O	O
li	O	O
Option	O	O
1	O	O
can	O	O
only	O	O
be	O	O
used	O	O
with	O	O
objects	O	O
within	O	O
a	O	O
single	O	O
session	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
can	O	O
,	O	O
use	O	O
Option	O	O
2	O	O
.	O	O
(	O	O
Assign	O	O
PK	O	O
as	O	O
early	O	O
as	O	O
possible	O	O
,	O	O
because	O	O
you	O	O
can	O	O
'	O	O
t	O	O
use	O	O
the	O	O
objects	O	O
in	O	O
sets	O	O
until	O	O
the	O	O
PK	O	O
is	O	O
assigned	O	O
.	O	O
)	O	O
#	O	O
li	O	O
If	O	O
you	O	O
can	O	O
guarantee	O	O
relative	O	O
stability	O	O
,	O	O
you	O	O
can	O	O
use	O	O
Option	O	O
3	O	O
.	O	O
But	O	O
be	O	O
careful	O	O
with	O	O
this	O	O
.	O	O
Question	O	O
-	O	O
24649842	O	O
,	O	O
answer	O	O
-	O	O
24649939	O	O
Try	O	O
adding	O	O
a	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sleep	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
call	O	O
within	O	O
your	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
.	O	O
.	O	O
Basically	O	O
it	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
scheduling	O	O
something	O	O
based	O	O
on	O	O
when	O	O
the	O	O
previous	O	O
execution	O	O
ends	O	O
and	O	O
when	O	O
it	O	O
(	O	O
logically	O	O
)	O	O
starts	O	O
.	O	O
For	O	O
example	O	O
,	O	O
suppose	O	O
I	O	O
schedule	O	O
an	O	O
alarm	O	O
to	O	O
go	O	O
off	O	O
with	O	O
a	O	O
fixed	O	O
rate	O	O
of	O	O
once	O	O
an	O	O
hour	O	O
,	O	O
and	O	O
every	O	O
time	O	O
it	O	O
goes	O	O
off	O	O
,	O	O
I	O	O
have	O	O
a	O	O
cup	O	O
of	O	O
coffee	O	O
,	O	O
which	O	O
takes	O	O
10	O	O
minutes	O	O
.	O	O
Suppose	O	O
that	O	O
starts	O	O
at	O	O
midnight	O	O
,	O	O
I	O	O
'	O	O
d	O	O
have	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
I	O	O
schedule	O	O
with	O	O
a	O	O
fixed	O	O
delay	O	O
of	O	O
one	O	O
hour	O	O
,	O	O
I	O	O
'	O	O
d	O	O
have	O	O
:	O	O
#	O	O
pre	O	O
Which	O	O
one	O	O
you	O	O
want	O	O
depends	O	O
on	O	O
your	O	O
task	O	O
.	O	O
Question	O	O
-	O	O
31445024	O	O
,	O	O
answer	O	O
-	O	O
31871515	O	O
Autoboxing	O	O
is	O	O
absolutely	O	O
implemented	O	O
using	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
.	O	O
.	O	O
in	O	O
the	O	O
OpenJDK	O	O
.	O	O
If	O	O
that	O	O
'	O	O
s	O	O
your	O	O
implementation	O	O
,	O	O
read	O	O
on	O	O
.	O	O
.	O	O
.	O	O
if	O	O
not	O	O
,	O	O
skip	O	O
to	O	O
below	O	O
.	O	O
#	O	O
pre	O	O
Java	O	O
documentation	O	O
states	O	O
that	O	O
Boolean	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
always	O	O
returns	O	O
Boolean	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
TRUE	I-api_mention	I-api_mention
or	O	O
Boolean	B-api_mention	B-api_mention
.	I-api_mention	O
FALSE	I-api_mention	O
,	O	O
therefore	O	O
your	O	O
reference	O	O
comparisons	O	O
in	O	O
these	O	O
cases	O	O
will	O	O
succeed	O	O
.	O	O
(	O	O
(	O	O
Integer	B-api_mention	B-api_mention
)	O	O
1	O	O
)	O	O
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
For	O	O
this	O	O
particular	O	O
example	O	O
,	O	O
under	O	O
the	O	O
OpenJDK	O	O
implementation	O	O
with	O	O
default	O	O
settings	O	O
,	O	O
it	O	O
will	O	O
probably	O	O
work	O	O
by	O	O
virtue	O	O
of	O	O
the	O	O
fact	O	O
that	O	O
you	O	O
picked	O	O
a	O	O
value	O	O
<	O	O
128	O	O
which	O	O
is	O	O
cached	O	O
at	O	O
startup	O	O
(	O	O
although	O	O
this	O	O
can	O	O
be	O	O
overridden	O	O
as	O	O
a	O	O
commandline	O	O
arg	O	O
)	O	O
.	O	O
It	O	O
may	O	O
also	O	O
work	O	O
for	O	O
larger	O	O
values	O	O
if	O	O
it	O	O
'	O	O
s	O	O
frequently	O	O
used	O	O
enough	O	O
to	O	O
be	O	O
cached	O	O
.	O	O
Unless	O	O
you	O	O
'	O	O
re	O	O
working	O	O
under	O	O
"	O	O
safe	O	O
"	O	O
assumptions	O	O
about	O	O
the	O	O
Integer	B-api_mention	B-api_mention
cache	O	O
,	O	O
don	O	O
'	O	O
t	O	O
expect	O	O
the	O	O
reference	O	O
comparison	O	O
to	O	O
be	O	O
an	O	O
equality	O	O
.	O	O
Long	B-api_mention	B-api_mention
,	O	O
Short	B-api_mention	B-api_mention
,	O	O
Character	B-api_mention	B-api_mention
and	O	O
Byte	B-api_mention	B-api_mention
incidentally	O	O
implement	O	O
this	O	O
caching	O	O
too	O	O
,	O	O
but	O	O
unlike	O	O
Integer	B-api_mention	B-api_mention
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
tunable	O	O
.	O	O
Byte	O	B-api_mention
will	O	O
always	O	O
work	O	O
if	O	O
you	O	O
'	O	O
re	O	O
comparing	O	O
autobox	O	O
/	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
references	O	O
since	O	O
obviously	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
go	O	O
out	O	O
of	O	O
range	O	O
.	O	O
Float	B-api_mention	B-api_mention
and	O	O
Double	B-api_mention	B-api_mention
will	O	O
unsurprisingly	O	O
always	O	O
create	O	O
a	O	O
new	O	O
instance	O	O
.	O	O
Now	O	O
,	O	O
in	O	O
purely	O	O
generic	O	O
terms	O	O
?	O	O
See	O	O
this	O	O
section	O	O
of	O	O
the	O	O
JLS	O	O
-	O	O
you	O	O
MUST	O	O
be	O	O
given	O	O
equal	O	O
references	O	O
for	O	O
boolean	O	O
and	O	O
any	O	O
int	O	O
or	O	O
char	O	O
within	O	O
the	O	O
-	O	O
128	O	O
to	O	O
127	O	O
range	O	O
.	O	O
There	O	O
are	O	O
no	O	O
guarantees	O	O
for	O	O
anything	O	O
else	O	O
.	O	O
Question	O	O
-	O	O
20331163	O	O
,	O	O
answer	O	O
-	O	O
20331241	O	O
I	O	O
have	O	O
a	O	O
very	O	O
dumb	O	O
but	O	O
working	O	O
option	O	O
.	O	O
if	O	O
you	O	O
have	O	O
the	O	O
String	B-api_mention	B-api_mention
fullDate	O	O
=	O	O
"	O	O
11	O	O
/	O	O
15	O	O
/	O	O
2013	O	O
08	O	O
:	O	O
00	O	O
:	O	O
00	O	O
"	O	O
;	O	O
String	B-api_mention	B-api_mention
finalDate	O	O
=	O	O
fullDate	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
[	O	O
0	O	O
]	O	O
;	O	O
That	O	O
should	O	O
work	O	O
easy	O	O
and	O	O
fast	O	O
.	O	O
:	O	O
)	O	O
Question	O	O
-	O	O
22740464	O	O
,	O	O
answer	O	O
-	O	O
37436520	O	O
Just	O	O
do	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
where	O	O
identity	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
is	O	O
a	O	O
static	O	O
import	O	O
of	O	O
Function	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Concatenating	O	O
multiple	O	O
streams	O	O
into	O	O
one	O	O
stream	O	O
is	O	O
the	O	O
same	O	O
as	O	O
flattening	O	O
a	O	O
stream	O	O
.	O	O
However	O	O
,	O	O
unfortunately	O	O
,	O	O
for	O	O
some	O	O
reason	O	O
there	O	O
is	O	O
no	O	O
flatten	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
on	O	O
Stream	B-api_mention	B-api_mention
,	O	O
so	O	O
you	O	O
have	O	O
to	O	O
use	O	O
flatMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
with	O	O
the	O	O
identity	O	O
function	O	O
.	O	O
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
24907860	O	O
Instead	O	O
of	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
use	O	O
input	O	O
.	B-api_mention	O
next	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
that	O	O
should	O	O
solve	O	O
the	O	O
problem	O	O
.	O	O
Modified	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29815636	O	O
,	O	O
answer	O	O
-	O	O
29815698	O	O
The	O	O
first	O	O
form	O	O
is	O	O
called	O	O
Javadoc	O	O
.	O	O
You	O	O
use	O	O
this	O	O
when	O	O
you	O	O
'	O	O
re	O	O
writing	O	O
formal	O	O
APIs	O	O
for	O	O
your	O	O
code	O	O
,	O	O
which	O	O
are	O	O
generated	O	O
by	O	O
the	O	O
javadoc	O	O
tool	O	O
.	O	O
For	O	O
an	O	O
example	O	O
,	O	O
the	O	O
Java	O	O
7	O	O
API	O	O
page	O	O
uses	O	O
Javadoc	O	O
and	O	O
was	O	O
generated	O	O
by	O	O
that	O	O
tool	O	O
.	O	O
Some	O	O
common	O	O
elements	O	O
you	O	O
'	O	O
d	O	O
see	O	O
in	O	O
Javadoc	O	O
include	O	O
:	O	O
#	O	O
li	O	O
@	O	O
param	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
what	O	O
parameters	O	O
are	O	O
being	O	O
passed	O	O
to	O	O
a	O	O
method	O	O
,	O	O
and	O	O
what	O	O
value	O	O
they	O	O
'	O	O
re	O	O
expected	O	O
to	O	O
have	O	O
#	O	O
li	O	O
@	O	O
return	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
what	O	O
result	O	O
the	O	O
method	O	O
is	O	O
going	O	O
to	O	O
give	O	O
back	O	O
#	O	O
li	O	O
@	O	O
throws	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
that	O	O
a	O	O
method	O	O
throws	O	O
an	O	O
exception	O	O
or	O	O
error	O	O
in	O	O
case	O	O
of	O	O
certain	O	O
input	O	O
#	O	O
li	O	O
@	O	O
since	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
the	O	O
earliest	O	O
Java	O	O
version	O	O
this	O	O
class	O	O
or	O	O
function	O	O
was	O	O
available	O	O
in	O	O
As	O	O
an	O	O
example	O	O
,	O	O
here	O	O
'	O	O
s	O	O
Javadoc	O	O
for	O	O
the	O	O
compare	O	O
method	O	O
of	O	O
Integer	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
The	O	O
second	O	O
form	O	O
is	O	O
a	O	O
block	O	O
(	O	O
multi	O	O
-	O	O
line	O	O
)	O	O
comment	O	O
.	O	O
You	O	O
use	O	O
this	O	O
if	O	O
you	O	O
want	O	O
to	O	O
have	O	O
multiple	O	O
lines	O	O
in	O	O
a	O	O
comment	O	O
.	O	O
I	O	O
will	O	O
say	O	O
that	O	O
you	O	O
'	O	O
d	O	O
only	O	O
want	O	O
to	O	O
use	O	O
the	O	O
latter	O	O
form	O	O
sparingly	O	O
;	O	O
that	O	O
is	O	O
,	O	O
you	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
overburden	O	O
your	O	O
code	O	O
with	O	O
block	O	O
comments	O	O
that	O	O
don	O	O
'	O	O
t	O	O
describe	O	O
what	O	O
behaviors	O	O
the	O	O
method	O	O
/	O	O
complex	O	O
function	O	O
is	O	O
supposed	O	O
to	O	O
have	O	O
.	O	O
Since	O	O
Javadoc	O	O
is	O	O
the	O	O
more	O	O
descriptive	O	O
of	O	O
the	O	O
two	O	O
,	O	O
and	O	O
you	O	O
can	O	O
generate	O	O
actual	O	O
documentation	O	O
as	O	O
a	O	O
result	O	O
of	O	O
using	O	O
it	O	O
,	O	O
using	O	O
Javadoc	O	O
would	O	O
be	O	O
more	O	O
preferable	O	O
to	O	O
simple	O	O
block	O	O
comments	O	O
.	O	O
Question	O	O
-	O	O
5192512	O	O
,	O	O
answer	O	O
-	O	O
5192545	O	O
Edit	O	O
Updated	O	O
to	O	O
bring	O	O
in	O	O
feedback	O	O
.	O	O
So	O	O
two	O	O
ways	O	O
that	O	O
work	O	O
:	O	O
#	O	O
li	O	O
Use	O	O
StringBulderObj	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setLength	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
li	O	O
Allocate	O	O
a	O	O
new	O	O
one	O	O
instead	O	O
of	O	O
clearing	O	O
the	O	O
buffer	O	O
Question	O	O
-	O	O
7283338	O	O
,	O	O
answer	O	O
-	O	O
7283475	O	O
Because	O	O
any	O	O
particular	O	O
implementation	O	O
of	O	O
Set	O	O
may	O	O
or	O	O
may	O	O
not	O	O
be	O	O
random	O	O
access	O	O
.	O	O
You	O	O
can	O	O
always	O	O
get	O	O
an	O	O
iterator	O	O
and	O	O
step	O	O
through	O	O
the	O	O
Set	B-api_mention	O
,	O	O
using	O	O
the	O	O
iterators	O	O
'	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
return	O	O
the	O	O
result	O	O
you	O	O
want	O	O
once	O	O
you	O	O
find	O	O
the	O	O
equal	O	O
element	O	O
.	O	O
This	O	O
works	O	O
regardless	O	O
of	O	O
the	O	O
implementation	O	O
.	O	O
If	O	O
the	O	O
implementation	O	O
is	O	O
NOT	O	O
random	O	O
access	O	O
(	O	O
picture	O	O
a	O	O
linked	O	O
-	O	O
list	O	O
backed	O	O
Set	B-api_mention	O
)	O	O
,	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
the	O	O
interface	O	O
would	O	O
be	O	O
deceptive	O	O
,	O	O
since	O	O
it	O	O
would	O	O
have	O	O
to	O	O
iterate	O	O
the	O	O
collection	O	O
to	O	O
find	O	O
the	O	O
element	O	O
to	O	O
return	O	O
,	O	O
and	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
seem	O	O
to	O	O
imply	O	O
this	O	O
would	O	O
be	O	O
necessary	O	O
,	O	O
that	O	O
the	O	O
Set	B-api_mention	B-api_mention
could	O	O
jump	O	O
directly	O	O
to	O	O
the	O	O
element	O	O
to	O	O
get	O	B-api_mention
.	O	I-api_mention
contains	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
or	O	O
may	O	O
not	O	O
have	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
of	O	O
course	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
implementation	O	O
,	O	O
but	O	O
the	O	O
name	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
lend	O	O
itself	O	O
to	O	O
the	O	O
same	O	O
sort	O	O
of	O	O
misunderstandings	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
I	O	O
made	O	O
a	O	O
class	O	O
called	O	O
QuickRandom	B-api_mention	B-api_mention
,	O	O
and	O	O
its	O	O
job	O	O
is	O	O
to	O	O
produce	O	O
random	O	O
numbers	O	O
quickly	O	O
.	O	O
It	O	O
'	O	O
s	O	O
really	O	O
simple	O	O
:	O	O
just	O	O
take	O	O
the	O	O
old	O	O
value	O	O
,	O	O
multiply	O	O
by	O	O
a	O	O
double	O	O
,	O	O
and	O	O
take	O	O
the	O	O
decimal	O	O
part	O	O
.	O	O
Here	O	O
is	O	O
my	O	O
QuickRandom	B-api_mention	B-api_mention
class	O	O
in	O	O
its	O	O
entirety	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
is	O	O
the	O	O
code	O	O
I	O	O
wrote	O	O
to	O	O
test	O	O
it	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
a	O	O
very	O	O
simple	O	O
algorithm	O	O
that	O	O
simply	O	O
multiplies	O	O
the	O	O
previous	O	O
double	O	O
by	O	O
a	O	O
"	O	O
magic	O	O
number	O	O
"	O	O
double	O	O
.	O	O
I	O	O
threw	O	O
it	O	O
together	O	O
pretty	O	O
quickly	O	O
,	O	O
so	O	O
I	O	O
could	O	O
probably	O	O
make	O	O
it	O	O
better	O	O
,	O	O
but	O	O
strangely	O	O
,	O	O
it	O	O
seems	O	O
to	O	O
be	O	O
working	O	O
fine	O	O
.	O	O
This	O	O
is	O	O
sample	O	O
output	O	O
of	O	O
the	O	O
commented	O	O
-	O	O
out	O	O
lines	O	O
in	O	O
the	O	O
main	O	O
method	O	O
:	O	O
#	O	O
pre	O	O
Hm	O	O
.	O	O
Pretty	O	O
random	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
that	O	O
would	O	O
work	O	O
for	O	O
a	O	O
random	O	O
number	O	O
generator	O	O
in	O	O
a	O	O
game	O	O
.	O	O
Here	O	O
is	O	O
sample	O	O
output	O	O
of	O	O
the	O	O
non	O	O
-	O	O
commented	O	O
out	O	O
part	O	O
:	O	O
#	O	O
pre	O	O
Wow	O	O
!	O	O
It	O	O
performs	O	O
almost	O	O
4	O	O
times	O	O
faster	O	O
than	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
.	O	O
I	O	O
remember	O	O
reading	O	O
somewhere	O	O
that	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
used	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
tons	O	O
of	O	O
crazy	O	O
modulus	O	O
and	O	O
division	O	O
stuff	O	O
.	O	O
Is	O	O
that	O	O
really	O	O
necessary	O	O
?	O	O
My	O	O
algorithm	O	O
performs	O	O
a	O	O
lot	O	O
faster	O	O
and	O	O
it	O	O
seems	O	O
pretty	O	O
random	O	O
.	O	O
I	O	O
have	O	O
two	O	O
questions	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
my	O	O
algorithm	O	O
"	O	O
good	O	O
enough	O	O
"	O	O
(	O	O
for	O	O
,	O	O
say	O	O
,	O	O
a	O	O
game	O	O
,	O	O
where	O	O
really	O	O
random	O	O
numbers	O	O
aren	O	O
'	O	O
t	O	O
too	O	O
important	O	O
)	O	O
?	O	O
#	O	O
li	O	O
Why	O	O
does	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
do	O	O
so	O	O
much	O	O
when	O	O
it	O	O
seems	O	O
just	O	O
simple	O	O
multiplication	O	O
and	O	O
cutting	O	O
out	O	O
the	O	O
decimal	O	O
will	O	O
suffice	O	O
?	O	O
Question	O	O
-	O	O
4871051	O	O
,	O	O
answer	O	O
-	O	O
20810612	O	O
I	O	O
'	O	O
m	O	O
on	O	O
Linux	O	O
and	O	O
get	O	O
same	O	O
result	O	O
for	O	O
both	O	O
of	O	O
these	O	O
approaches	O	O
:	O	O
#	O	O
pre	O	O
Paths	B-api_mention	O
.	I-api_mention	O
get	I-api_mention	O
(	I-api_mention	O
"	I-api_mention	O
"	I-api_mention	O
)	I-api_mention	O
docs	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getProperty	I-api_mention	I-api_mention
(	I-api_mention	O
"	I-api_mention	O
user	I-api_mention	O
.	I-api_mention	O
dir	I-api_mention	O
"	I-api_mention	O
)	I-api_mention	O
docs	O	O
Question	O	O
-	O	O
5439529	O	O
,	O	O
answer	O	O
-	O	O
5439600	O	O
As	O	O
an	O	O
alternative	O	O
to	O	O
trying	O	O
to	O	O
parse	O	O
the	O	O
string	O	O
and	O	O
catching	O	O
NumberFormatException	B-api_mention	B-api_mention
,	O	O
you	O	O
could	O	O
use	O	O
a	O	O
regex	O	O
;	O	O
e	O	O
.	O	O
g	O	O
.	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
likely	O	O
to	O	O
be	O	O
faster	O	O
,	O	O
especially	O	O
if	O	O
you	O	O
precompile	O	O
and	O	O
reuse	O	O
the	O	O
regex	O	O
.	O	O
However	O	O
,	O	O
the	O	O
catch	O	O
is	O	O
that	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
still	O	O
fail	O	O
if	O	O
str	O	O
represents	O	O
a	O	O
number	O	O
that	O	O
is	O	O
outside	O	O
range	O	O
of	O	O
legal	O	O
int	O	O
values	O	O
.	O	O
Question	O	O
-	O	O
30217236	O	O
,	O	O
answer	O	O
-	O	O
30219144	O	O
Why	O	O
this	O	O
should	O	O
be	O	O
problem	O	O
in	O	O
the	O	O
first	O	O
place	O	O
is	O	O
kind	O	O
of	O	O
nebulous	O	O
to	O	O
me	O	O
.	O	O
I	O	O
suspect	O	O
you	O	O
'	O	O
ve	O	O
instead	O	O
misunderstood	O	O
something	O	O
about	O	O
the	O	O
ways	O	O
in	O	O
which	O	O
the	O	O
type	O	O
system	O	O
is	O	O
useful	O	O
.	O	O
What	O	O
can	O	O
we	O	O
do	O	O
with	O	O
a	O	O
<	O	O
T	O	O
>	O	O
void	O	O
x	O	O
(	O	O
args	O	O
)	O	O
?	O	O
Well	O	O
,	O	O
not	O	O
a	O	O
whole	O	O
lot	O	O
.	O	O
Inside	O	O
the	O	O
body	O	O
of	O	O
x	O	O
,	O	O
T	O	O
is	O	O
the	O	O
same	O	O
as	O	O
Object	B-api_mention	B-api_mention
,	O	O
so	O	O
we	O	O
could	O	O
only	O	O
do	O	O
something	O	O
like	O	O
call	O	O
toString	B-api_mention	B-api_mention
on	O	O
a	O	O
and	O	O
b	O	O
to	O	O
print	O	O
them	O	O
.	O	O
There	O	O
'	O	O
s	O	O
really	O	O
no	O	O
practical	O	O
reason	O	O
a	O	O
and	O	O
b	O	O
must	O	O
have	O	O
the	O	O
same	O	O
type	O	O
.	O	O
Just	O	O
that	O	O
they	O	O
have	O	O
some	O	O
type	O	O
in	O	O
common	O	O
,	O	O
and	O	O
that	O	O
type	O	O
is	O	O
Object	B-api_mention	B-api_mention
or	O	O
a	O	O
subtype	O	O
of	O	O
it	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
there	O	O
'	O	O
s	O	O
no	O	O
clear	O	O
reason	O	O
why	O	O
<	O	O
T	O	O
>	O	O
void	O	O
x	O	O
(	O	O
args	O	O
)	O	O
actually	O	O
needs	O	O
to	O	O
be	O	O
generic	O	O
at	O	O
all	O	O
.	O	O
#	O	O
li	O	O
The	O	O
method	O	O
body	O	O
doesn	O	O
'	O	O
t	O	O
care	O	O
what	O	O
the	O	O
actual	O	O
types	O	O
of	O	O
a	O	O
and	O	O
b	O	O
are	O	O
because	O	O
it	O	O
couldn	O	O
'	O	O
t	O	O
use	O	O
them	O	O
anyway	O	O
.	O	O
#	O	O
li	O	O
The	O	O
call	O	O
site	O	O
doesn	O	O
'	O	O
t	O	O
care	O	O
what	O	O
the	O	O
actual	O	O
types	O	O
of	O	O
a	O	O
and	O	O
b	O	O
are	O	O
because	O	O
x	O	O
is	O	O
a	O	O
void	O	O
method	O	O
so	O	O
it	O	O
'	O	O
s	O	O
a	O	O
black	O	O
hole	O	O
.	O	O
It	O	O
'	O	O
s	O	O
more	O	O
typical	O	O
for	O	O
a	O	O
method	O	O
to	O	O
have	O	O
a	O	O
result	O	O
,	O	O
like	O	O
<	O	O
T	O	O
>	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
Arrays	I-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
/	O	O
/	O	O
This	O	O
will	O	O
cause	O	O
a	O	O
compile	O	O
error	O	O
because	O	O
/	O	O
/	O	O
the	O	O
type	O	O
inferred	O	O
must	O	O
be	O	O
compatible	O	O
/	O	O
/	O	O
with	O	O
the	O	O
return	O	O
assignment	O	O
.	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
r	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Or	O	O
a	O	O
bound	O	O
:	O	O
#	O	O
pre	O	O
Or	O	O
a	O	O
bound	O	O
which	O	O
asserts	O	O
some	O	O
kind	O	O
of	O	O
relation	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
20877086	O	O
,	O	O
answer	O	O
-	O	O
20877283	O	O
The	O	O
Integer	B-api_mention	B-api_mention
class	O	O
has	O	O
a	O	O
static	O	O
cache	O	O
,	O	O
that	O	O
stores	O	O
256	O	O
special	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
-	O	O
one	O	O
for	O	O
every	O	O
value	O	O
between	O	O
-	O	O
128	O	O
and	O	O
127	O	O
.	O	O
With	O	O
that	O	O
in	O	O
mind	O	O
,	O	O
consider	O	O
the	O	O
difference	O	O
between	O	O
these	O	O
three	O	O
.	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
(	O	O
obviously	O	O
)	O	O
makes	O	O
a	O	O
brand	O	O
new	O	O
Integer	B-api_mention	B-api_mention
object	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
returns	O	O
an	O	O
int	O	O
primitive	O	O
value	O	O
after	O	O
parsing	O	O
the	O	O
String	B-api_mention	B-api_mention
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
more	O	O
complex	O	O
than	O	O
the	O	O
others	O	O
.	O	O
It	O	O
starts	O	O
off	O	O
by	O	O
parsing	O	O
the	O	O
String	B-api_mention	B-api_mention
.	O	O
Then	O	O
,	O	O
if	O	O
the	O	O
value	O	O
is	O	O
between	O	O
-	O	O
128	O	O
and	O	O
127	O	O
,	O	O
it	O	O
returns	O	O
the	O	O
corresponding	O	O
object	O	O
from	O	O
the	O	O
static	O	O
cache	O	O
.	O	O
If	O	O
the	O	O
value	O	O
is	O	O
outside	O	O
of	O	O
this	O	O
range	O	O
,	O	O
then	O	O
it	O	O
invokes	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
passes	O	O
in	O	O
the	O	O
value	O	O
,	O	O
so	O	O
that	O	O
you	O	O
get	O	O
a	O	O
new	O	O
object	O	O
.	O	O
Now	O	O
,	O	O
consider	O	O
the	O	O
three	O	O
expressions	O	O
in	O	O
the	O	O
question	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
returns	O	O
true	O	O
,	O	O
because	O	O
the	O	O
Integer	B-api_mention	B-api_mention
whose	O	O
value	O	O
is	O	O
127	O	O
is	O	O
retrieved	O	O
twice	O	O
from	O	O
the	O	O
static	O	O
cache	O	O
,	O	O
and	O	O
compared	O	O
to	O	O
itself	O	O
.	O	O
There	O	O
'	O	O
s	O	O
only	O	O
one	O	O
Integer	B-api_mention	B-api_mention
object	O	O
involved	O	O
,	O	O
so	O	O
this	O	O
returns	O	O
true	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
returns	O	O
false	O	O
,	O	O
because	O	O
128	O	O
is	O	O
not	O	O
in	O	O
the	O	O
static	O	O
cache	O	O
.	O	O
So	O	O
a	O	O
new	O	O
Integer	B-api_mention	B-api_mention
is	O	O
created	O	O
for	O	O
each	O	O
side	O	O
of	O	O
the	O	O
equality	O	O
.	O	O
Since	O	O
there	O	O
are	O	O
two	O	O
different	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
,	O	O
and	O	O
=	O	O
=	O	O
for	O	O
objects	O	O
only	O	O
returns	O	O
true	O	O
if	O	O
both	O	O
sides	O	O
are	O	O
the	O	O
exact	O	O
same	O	O
object	O	O
,	O	O
this	O	O
is	O	O
going	O	O
to	O	O
be	O	O
false	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
comparing	O	O
the	O	O
primitive	O	O
int	O	O
value	O	O
128	O	O
on	O	O
the	O	O
left	O	O
,	O	O
with	O	O
a	O	O
newly	O	O
created	O	O
Integer	B-api_mention	B-api_mention
object	O	O
on	O	O
the	O	O
right	O	O
.	O	O
But	O	O
because	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
to	O	O
compare	O	O
an	O	O
int	O	O
to	O	O
an	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Java	O	O
will	O	O
auto	O	O
-	O	O
unbox	O	O
the	O	O
Integer	B-api_mention	B-api_mention
before	O	O
doing	O	O
the	O	O
comparison	O	O
;	O	O
so	O	O
you	O	O
end	O	O
up	O	O
comparing	O	O
an	O	O
int	O	O
to	O	O
an	O	O
int	O	O
.	O	O
Since	O	O
the	O	O
primitive	O	O
128	O	O
is	O	O
equal	O	O
to	O	O
itself	O	O
,	O	O
this	O	O
returns	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
35264580	O	O
Main	O	O
difference	O	O
is	O	O
that	O	O
when	O	O
program	O	O
calls	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
a	O	O
new	O	O
Thread	B-api_mention	B-api_mention
is	O	O
created	O	O
and	O	O
code	O	O
inside	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
executed	O	O
in	O	O
new	O	O
Thread	B-api_mention	B-api_mention
while	O	O
if	O	O
you	O	O
call	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
directly	O	O
no	O	O
new	O	O
Thread	B-api_mention	B-api_mention
is	O	O
created	O	O
and	O	O
code	O	O
inside	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
execute	O	O
on	O	O
current	O	O
Thread	B-api_mention	B-api_mention
.	O	O
Another	O	O
difference	O	O
between	O	O
start	O	O
vs	O	O
run	O	O
in	O	O
Java	O	O
thread	O	O
is	O	O
that	O	O
you	O	O
can	O	O
not	O	O
call	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
twice	O	O
on	O	O
thread	O	O
object	O	O
.	O	O
once	O	O
started	O	O
,	O	O
second	O	O
call	O	O
of	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
throw	O	O
IllegalStateException	B-api_mention	B-api_mention
in	O	O
Java	O	O
while	O	O
you	O	O
can	O	O
call	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
twice	O	O
.	O	O
Question	O	O
-	O	O
23079003	O	O
,	O	O
answer	O	O
-	O	O
23079174	O	O
You	O	O
can	O	O
use	O	O
the	O	O
overloaded	O	O
version	O	O
of	O	O
toArray	B-api_mention	B-api_mention
,	O	O
as	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
purpose	O	O
of	O	O
the	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
generator	O	O
is	O	O
to	O	O
convert	O	O
an	O	O
integer	O	O
,	O	O
the	O	O
size	O	O
of	O	O
the	O	O
array	O	O
,	O	O
to	O	O
a	O	O
new	O	O
array	O	O
.	O	O
Example	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Prints	O	O
:	O	O
#	O	O
pre	O	O
Another	O	O
option	O	O
is	O	O
to	O	O
use	O	O
a	O	O
method	O	O
reference	O	O
to	O	O
the	O	O
string	O	O
array	O	O
constructor	O	O
,	O	O
this	O	O
one	O	O
is	O	O
a	O	O
bit	O	O
more	O	O
tricky	O	O
.	O	O
Usage	O	O
is	O	O
easy	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stringArray	O	O
=	O	O
streamString	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
What	O	O
it	O	O
does	O	O
,	O	O
is	O	O
find	O	O
a	O	O
method	O	O
that	O	O
takes	O	O
in	O	O
an	O	O
integer	O	O
(	O	O
the	O	O
size	O	O
)	O	O
as	O	O
argument	O	O
,	O	O
and	O	O
returns	O	O
a	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
,	O	O
which	O	O
is	O	O
exactly	O	O
what	O	O
(	O	O
one	O	O
of	O	O
the	O	O
overloads	O	O
of	O	O
)	O	O
new	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
does	O	O
.	O	O
Question	O	O
-	O	O
8189466	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
aware	O	O
of	O	O
the	O	O
Iterator	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
In	O	O
the	O	O
following	O	O
code	O	O
sample	O	O
,	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
why	O	O
the	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
in	O	O
main	O	O
method	O	O
throws	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
but	O	O
not	O	O
in	O	O
the	O	O
remove	B-api_mention	O
method	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032208	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
go	O	O
through	O	O
the	O	O
underlying	O	O
Array	B-api_mention	B-api_mention
and	O	O
set	O	O
each	O	O
entry	O	O
to	O	O
null	O	O
;	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
go	O	O
through	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
checking	O	O
for	O	O
collection	O	O
and	O	O
remove	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
if	O	O
it	O	O
exists	O	O
.	O	O
I	O	O
would	O	O
imagine	O	O
that	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
way	O	O
faster	O	O
then	O	O
removeAll	B-api_mention	B-api_mention
because	O	O
it	O	O
'	O	O
s	O	O
not	O	O
comparing	O	O
,	O	O
etc	O	O
.	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032137	O	O
Unless	O	O
there	O	O
is	O	O
a	O	O
specific	O	O
optimization	O	O
that	O	O
checks	O	O
if	O	O
the	O	O
argument	O	O
passed	O	O
to	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
collection	O	O
itself	O	O
(	O	O
and	O	O
I	O	O
highly	O	O
doubt	O	O
that	O	O
such	O	O
an	O	O
optimization	O	O
is	O	O
there	O	O
)	O	O
it	O	O
will	O	O
be	O	O
significantly	O	O
slower	O	O
than	O	O
a	O	O
simple	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Apart	O	O
from	O	O
that	O	O
(	O	O
and	O	O
at	O	O
least	O	O
equally	O	O
important	O	O
)	O	O
:	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
removeAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
just	O	O
obtuse	O	O
,	O	O
confusing	O	O
code	O	O
.	O	O
It	O	O
is	O	O
a	O	O
very	O	O
backwards	O	O
way	O	O
of	O	O
saying	O	O
"	O	O
clear	O	O
this	O	O
collection	O	O
"	O	O
.	O	O
What	O	O
advantage	O	O
would	O	O
it	O	O
have	O	O
over	O	O
the	O	O
very	O	O
understandable	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Question	O	O
-	O	O
32356762	O	O
,	O	O
answer	O	O
-	O	O
32370677	O	O
There	O	O
is	O	O
a	O	O
small	O	O
overhead	O	O
in	O	O
calling	O	O
methods	O	O
var	O	O
an	O	O
interface	O	O
rather	O	O
than	O	O
directly	O	O
on	O	O
an	O	O
object	O	O
.	O	O
This	O	O
overhead	O	O
is	O	O
often	O	O
no	O	O
more	O	O
than	O	O
1	O	O
or	O	O
2	O	O
processor	O	O
instructions	O	O
.	O	O
The	O	O
overhead	O	O
of	O	O
calling	O	O
a	O	O
method	O	O
is	O	O
even	O	O
lower	O	O
if	O	O
the	O	O
JIT	O	O
knows	O	O
that	O	O
the	O	O
method	O	O
is	O	O
final	O	O
.	O	O
This	O	O
is	O	O
not	O	O
measurable	O	O
for	O	O
most	O	O
code	O	O
you	O	O
and	O	O
me	O	O
right	O	O
,	O	O
but	O	O
for	O	O
the	O	O
low	O	O
level	O	O
methods	O	O
in	O	O
java	O	B-api_mention
.	O	I-api_mention
utils	O	I-api_mention
may	O	O
be	O	O
used	O	O
in	O	O
some	O	O
code	O	O
where	O	O
it	O	O
is	O	O
an	O	O
issue	O	O
.	O	O
Also	O	O
as	O	O
has	O	O
been	O	O
pointed	O	O
out	O	O
in	O	O
other	O	O
answers	O	O
,	O	O
the	O	O
concrete	O	O
type	O	O
of	O	O
the	O	O
object	O	O
that	O	O
is	O	O
return	O	O
(	O	O
even	O	O
when	O	O
hidden	O	O
behind	O	O
an	O	O
interface	O	O
)	O	O
effects	O	O
the	O	O
performance	O	O
of	O	O
code	O	O
that	O	O
uses	O	O
it	O	O
.	O	O
This	O	O
change	O	O
in	O	O
performance	O	O
can	O	O
be	O	O
very	O	O
great	O	O
,	O	O
so	O	O
such	O	O
an	O	O
extent	O	O
that	O	O
the	O	O
calling	O	O
software	O	O
fails	O	O
to	O	O
work	O	O
.	O	O
Clearly	O	O
the	O	O
authors	O	O
of	O	O
java	O	O
.	O	O
utils	O	O
have	O	O
no	O	O
way	O	O
to	O	O
know	O	O
what	O	O
all	O	O
the	O	O
software	O	O
that	O	O
calls	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
with	O	O
the	O	O
result	O	O
and	O	O
no	O	O
way	O	O
to	O	O
re	O	O
-	O	O
test	O	O
this	O	O
software	O	O
if	O	O
they	O	O
change	O	O
the	O	O
implantation	O	O
of	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Therefore	O	O
they	O	O
are	O	O
not	O	O
going	O	O
to	O	O
change	O	O
the	O	O
implantation	O	O
of	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
return	O	O
a	O	O
different	O	O
type	O	O
of	O	O
List	B-api_mention	B-api_mention
,	O	O
even	O	O
if	O	O
the	O	O
type	O	O
system	O	O
allowed	O	O
it	O	O
!	O	O
When	O	O
writing	O	O
your	O	O
own	O	O
software	O	O
,	O	O
you	O	O
(	O	O
hopefully	O	O
)	O	O
have	O	O
automated	O	O
test	O	O
that	O	O
cover	O	O
all	O	O
your	O	O
code	O	O
and	O	O
a	O	O
good	O	O
understand	O	O
of	O	O
how	O	O
your	O	O
code	O	O
interrelates	O	O
include	O	O
know	O	O
where	O	O
performance	O	O
is	O	O
an	O	O
issue	O	O
.	O	O
Being	O	O
able	O	O
to	O	O
make	O	O
a	O	O
change	O	O
to	O	O
a	O	O
method	O	O
,	O	O
without	O	O
having	O	O
to	O	O
change	O	O
the	O	O
callers	O	O
is	O	O
of	O	O
great	O	O
value	O	O
while	O	O
the	O	O
design	O	O
of	O	O
the	O	O
software	O	O
is	O	O
changing	O	O
.	O	O
Therefore	O	O
the	O	O
two	O	O
set	O	O
of	O	O
trade	O	O
offs	O	O
are	O	O
very	O	O
different	O	O
.	O	O
Question	O	O
-	O	O
23932061	O	O
,	O	O
answer	O	O
-	O	O
23936723	O	O
There	O	O
'	O	O
s	O	O
a	O	O
much	O	O
better	O	O
answer	O	O
than	O	O
using	O	O
spliteratorUnknownSize	B-api_mention	B-api_mention
directly	O	O
,	O	O
which	O	O
is	O	O
both	O	O
easier	O	O
and	O	O
gets	O	O
a	O	O
better	O	O
result	O	O
.	O	O
Iterable	B-api_mention	B-api_mention
has	O	O
a	O	O
spliterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
so	O	O
you	O	O
should	O	O
just	O	O
use	O	O
that	O	O
to	O	O
get	O	O
your	O	O
spliterator	O	O
.	O	O
In	O	O
the	O	O
worst	O	O
case	O	O
,	O	O
its	O	O
the	O	O
same	O	O
code	O	O
(	O	O
the	O	O
default	O	O
implementation	O	O
uses	O	O
spliteratorUnknownSize	B-api_mention	B-api_mention
)	O	O
,	O	O
but	O	O
in	O	O
the	O	O
more	O	O
common	O	O
case	O	O
,	O	O
where	O	O
your	O	O
Iterable	O	B-api_mention
is	O	O
already	O	O
a	O	O
collection	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
get	O	O
a	O	O
better	O	O
spliterator	O	O
,	O	O
and	O	O
therefore	O	O
better	O	O
stream	O	O
performance	O	O
(	O	O
maybe	O	O
even	O	O
good	O	O
parallelism	O	O
.	O	O
)	O	O
Its	O	O
also	O	O
less	O	O
code	O	O
:	O	O
StreamSupport	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
moreStreamOps	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
getting	O	O
a	O	O
stream	O	O
from	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
see	O	O
Why	O	O
does	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
not	O	O
provide	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
?	O	O
)	O	O
is	O	O
not	O	O
very	O	O
painful	O	O
.	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489437	O	O
Java	B-api_mention	O
.	I-api_mention	O
lang	I-api_mention	O
.	I-api_mention	O
String	I-api_mention	B-api_mention
is	O	O
not	O	O
just	O	O
a	O	O
class	O	O
.	O	O
It	O	O
'	O	O
s	O	O
an	O	O
integral	O	O
part	O	O
of	O	O
the	O	O
core	O	O
language	O	O
.	O	O
The	O	O
compiler	O	O
has	O	O
syntactic	O	O
sugar	O	O
for	O	O
it	O	O
.	O	O
For	O	O
example	O	O
,	O	O
StringLiteral	O	O
is	O	O
like	O	O
an	O	O
abbreviation	O	O
for	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
When	O	O
written	O	O
StringLiteral	O	O
the	O	O
compiler	O	O
optimizes	O	O
identical	O	O
strings	O	O
to	O	O
the	O	O
same	O	O
instance	O	O
to	O	O
save	O	O
space	O	O
.	O	O
StringLiteral	O	O
+	O	O
5	O	O
=	O	O
=	O	O
StringLiteral	O	O
=	O	O
=	O	O
>	O	O
true	O	O
The	O	O
compiler	O	O
has	O	O
syntactic	O	O
sugar	O	O
for	O	O
a	O	O
lot	O	O
of	O	O
stuff	O	O
,	O	O
including	O	O
not	O	O
having	O	O
to	O	O
box	O	O
/	O	O
unbox	O	O
between	O	O
object	O	O
versions	O	O
and	O	O
their	O	O
native	O	O
types	O	O
,	O	O
no	O	O
parent	O	O
means	O	O
Object	B-api_mention	B-api_mention
,	O	O
default	O	O
constructor	O	O
,	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
27845223	O	O
,	O	O
answer	O	O
-	O	O
27846417	O	O
Pavel	O	O
Horal	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
nice	O	O
.	O	O
As	O	O
he	O	O
says	O	O
,	O	O
the	O	O
word	O	O
"	O	O
file	O	O
"	O	O
has	O	O
totally	O	O
different	O	O
(	O	O
practically	O	O
unrelated	O	O
)	O	O
meanings	O	O
in	O	O
URL	B-api_mention	O
#	I-api_mention	O
getFile	I-api_mention	O
vs	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
io	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
File	I-api_mention	I-api_mention
-	O	O
may	O	O
be	O	O
that	O	O
'	O	O
s	O	O
part	O	O
of	O	O
the	O	O
confusion	O	O
.	O	O
Just	O	O
to	O	O
add	O	O
:	O	O
#	O	O
li	O	O
A	O	O
resource	O	O
in	O	O
Java	O	O
is	O	O
an	O	O
abstract	O	O
concept	O	O
,	O	O
a	O	O
source	O	O
of	O	O
data	O	O
that	O	O
can	O	O
be	O	O
read	O	O
.	O	O
The	O	O
location	O	O
(	O	O
or	O	O
address	O	O
)	O	O
of	O	O
a	O	O
resource	O	O
is	O	O
represented	O	O
in	O	O
Java	O	O
by	O	O
a	O	O
URL	B-api_mention	O
object	O	O
.	O	O
#	O	O
li	O	O
A	O	O
resource	O	O
can	O	O
correspond	O	O
to	O	O
a	O	O
regular	O	O
file	O	O
in	O	O
the	O	O
local	O	O
filesystem	O	O
(	O	O
specifically	O	O
,	O	O
when	O	O
its	O	O
URL	B-api_mention	O
begins	O	O
with	O	O
file	O	O
:	O	O
/	O	O
/	O	O
)	O	O
.	O	O
But	O	O
a	O	O
resource	O	O
is	O	O
more	O	O
general	O	O
(	O	O
it	O	O
can	O	O
be	O	O
also	O	O
some	O	O
file	O	O
stored	O	O
in	O	O
a	O	O
jar	O	O
,	O	O
or	O	O
some	O	O
data	O	O
to	O	O
be	O	O
read	O	O
from	O	O
the	O	O
network	O	O
,	O	O
or	O	O
from	O	O
memory	O	O
,	O	O
or	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
And	O	O
it	O	O
'	O	O
s	O	O
also	O	O
more	O	O
limited	O	O
,	O	O
because	O	O
a	O	O
File	B-api_mention	B-api_mention
(	O	O
besides	O	O
being	O	O
other	O	O
things	O	O
than	O	O
a	O	O
regular	O	O
file	O	O
:	O	O
a	O	O
directory	O	O
,	O	O
a	O	O
link	O	O
)	O	O
can	O	O
also	O	O
be	O	O
created	O	O
and	O	O
writen	O	O
to	O	O
.	O	O
#	O	O
li	O	O
Remember	O	O
in	O	O
Java	O	O
a	O	O
File	B-api_mention	B-api_mention
object	O	O
does	O	O
not	O	O
really	O	O
represents	O	O
"	O	O
a	O	O
file	O	O
"	O	O
but	O	O
the	O	O
location	O	O
(	O	O
the	O	O
full	O	O
name	O	O
,	O	O
with	O	O
path	O	O
)	O	O
of	O	O
a	O	O
file	O	O
.	O	O
So	O	O
,	O	O
a	O	O
File	B-api_mention	B-api_mention
object	O	O
allows	O	O
you	O	O
to	O	O
locate	O	O
(	O	O
and	O	O
open	O	O
)	O	O
a	O	O
file	O	O
,	O	O
as	O	O
a	O	O
URL	B-api_mention	O
allows	O	O
you	O	O
to	O	O
access	O	O
(	O	O
and	O	O
open	O	O
)	O	O
a	O	O
resource	O	O
.	O	O
(	O	O
There	O	O
is	O	O
no	O	O
Resource	B-api_mention	O
class	O	O
in	O	O
Java	O	O
to	O	O
represent	O	O
a	O	O
resource	O	O
,	O	O
but	O	O
neither	O	O
there	O	O
is	O	O
one	O	O
to	O	O
represent	O	O
a	O	O
file	O	O
!	O	O
once	O	O
more	O	O
:	O	O
File	B-api_mention	O
is	O	O
not	O	O
a	O	O
file	O	O
,	O	O
it	O	O
'	O	O
s	O	O
the	O	O
path	O	O
of	O	O
a	O	O
file	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
4818699	O	O
,	O	O
answer	O	O
-	O	O
4818783	O	O
The	O	O
absolute	O	O
simplest	O	O
example	O	O
I	O	O
can	O	O
think	O	O
of	O	O
is	O	O
to	O	O
make	O	O
incrementing	O	O
an	O	O
atomic	O	O
operation	O	O
.	O	O
With	O	O
standard	O	O
ints	O	O
:	O	O
#	O	O
pre	O	O
With	O	O
AtomicInteger	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
The	O	O
latter	O	O
is	O	O
a	O	O
very	O	O
simple	O	O
way	O	O
to	O	O
perform	O	O
simple	O	O
mutations	O	O
effects	O	O
(	O	O
especially	O	O
counting	O	O
,	O	O
or	O	O
unique	O	O
-	O	O
indexing	O	O
)	O	O
,	O	O
without	O	O
having	O	O
to	O	O
resort	O	O
to	O	O
synchronizing	O	O
all	O	O
access	O	O
.	O	O
More	O	O
complex	O	O
synchronization	O	O
-	O	O
free	O	O
logic	O	O
can	O	O
be	O	O
employed	O	O
by	O	O
using	O	O
compareAndSet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
a	O	O
type	O	O
of	O	O
optimistic	O	O
locking	O	O
-	O	O
get	O	O
the	O	O
current	O	O
value	O	O
,	O	O
compute	O	O
result	O	O
based	O	O
on	O	O
this	O	O
,	O	O
set	O	O
this	O	O
result	O	O
iff	O	O
value	O	O
is	O	O
still	O	O
the	O	O
input	O	O
used	O	O
to	O	O
do	O	O
the	O	O
calculation	O	O
,	O	O
else	O	O
start	O	O
again	O	O
-	O	O
but	O	O
the	O	O
counting	O	O
examples	O	O
are	O	O
very	O	O
useful	O	O
,	O	O
and	O	O
I	O	O
'	O	O
ll	O	O
often	O	O
use	O	O
AtomicIntegers	B-api_mention	B-api_mention
for	O	O
counting	O	O
and	O	O
VM	O	O
-	O	O
wide	O	O
unique	O	O
generators	O	O
if	O	O
there	O	O
'	O	O
s	O	O
any	O	O
hint	O	O
of	O	O
multiple	O	O
threads	O	O
being	O	O
involved	O	O
,	O	O
because	O	O
they	O	O
'	O	O
re	O	O
so	O	O
easy	O	O
to	O	O
work	O	O
with	O	O
I	O	O
'	O	O
d	O	O
almost	O	O
consider	O	O
it	O	O
premature	O	O
optimisation	O	O
to	O	O
use	O	O
plain	O	O
ints	O	O
.	O	O
While	O	O
you	O	O
can	O	O
almost	O	O
always	O	O
achieve	O	O
the	O	O
same	O	O
synchronization	O	O
guarantees	O	O
with	O	O
ints	O	O
and	O	O
appropriate	O	O
synchronized	O	O
declarations	O	O
,	O	O
the	O	O
beauty	O	O
of	O	O
AtomicInteger	B-api_mention	B-api_mention
is	O	O
that	O	O
the	O	O
thread	O	O
-	O	O
safety	O	O
is	O	O
built	O	O
into	O	O
the	O	O
actual	O	O
object	O	O
itself	O	O
,	O	O
rather	O	O
than	O	O
you	O	O
needing	O	O
to	O	O
worry	O	O
about	O	O
the	O	O
possible	O	O
interleavings	O	O
,	O	O
and	O	O
monitors	O	O
held	O	O
,	O	O
of	O	O
every	O	O
method	O	O
that	O	O
happens	O	O
to	O	O
access	O	O
the	O	O
int	O	O
value	O	O
.	O	O
It	O	O
'	O	O
s	O	O
much	O	O
harder	O	O
to	O	O
accidentally	O	O
violate	O	O
threadsafety	O	O
when	O	O
calling	O	O
getAndIncrement	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
than	O	O
when	O	O
returning	O	O
i	O	O
+	O	O
+	O	O
and	O	O
remembering	O	O
(	O	O
or	O	O
not	O	O
)	O	O
to	O	O
acquire	O	O
the	O	O
correct	O	O
set	O	O
of	O	O
monitors	O	O
beforehand	O	O
.	O	O
Question	O	O
-	O	O
30125296	O	O
,	O	O
answer	O	O
-	O	O
30125487	O	O
I	O	O
suggest	O	O
2	O	O
more	O	O
options	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
second	O	O
one	O	O
uses	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
summingInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
collector	O	O
.	O	O
Besides	O	O
,	O	O
Java	O	O
8	O	O
introduces	O	O
a	O	O
very	O	O
effective	O	O
LongAdder	O	B-api_mention
accumulator	O	O
designed	O	O
to	O	O
speed	O	O
-	O	O
up	O	O
summarizing	O	O
in	O	O
parallel	O	O
streams	O	O
and	O	O
multi	O	O
-	O	O
thread	O	O
environments	O	O
.	O	O
Here	O	O
,	O	O
it	O	O
may	O	O
be	O	O
used	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
22435833	O	O
,	O	O
answer	O	O
-	O	O
22497858	O	O
The	O	O
answer	O	O
from	O	O
skiwi	O	O
covered	O	O
many	O	O
of	O	O
the	O	O
major	O	O
points	O	O
already	O	O
.	O	O
I	O	O
'	O	O
ll	O	O
fill	O	O
in	O	O
a	O	O
bit	O	O
more	O	O
background	O	O
.	O	O
The	O	O
design	O	O
of	O	O
any	O	O
API	O	O
is	O	O
a	O	O
series	O	O
of	O	O
tradeoffs	O	O
.	O	O
In	O	O
Java	O	O
,	O	O
one	O	O
of	O	O
the	O	O
difficult	O	O
issues	O	O
is	O	O
dealing	O	O
with	O	O
design	O	O
decisions	O	O
that	O	O
were	O	O
made	O	O
long	O	O
ago	O	O
.	O	O
Primitives	O	O
have	O	O
been	O	O
in	O	O
Java	O	O
since	O	O
1	O	O
.	O	O
0	O	O
.	O	O
They	O	O
make	O	O
Java	O	O
an	O	O
"	O	O
impure	O	O
"	O	O
object	O	O
-	O	O
oriented	O	O
language	O	O
,	O	O
since	O	O
the	O	O
primitives	O	O
are	O	O
not	O	O
objects	O	O
.	O	O
The	O	O
addition	O	O
of	O	O
primitives	O	O
was	O	O
,	O	O
I	O	O
believe	O	O
,	O	O
a	O	O
pragmatic	O	O
decision	O	O
to	O	O
improve	O	O
performance	O	O
at	O	O
the	O	O
expense	O	O
of	O	O
object	O	O
-	O	O
oriented	O	O
purity	O	O
.	O	O
This	O	O
is	O	O
a	O	O
tradeoff	O	O
we	O	O
'	O	O
re	O	O
still	O	O
living	O	O
with	O	O
today	O	O
,	O	O
nearly	O	O
20	O	O
years	O	O
later	O	O
.	O	O
The	O	O
autoboxing	O	O
feature	O	O
added	O	O
in	O	O
Java	O	O
5	O	O
mostly	O	O
eliminated	O	O
the	O	O
need	O	O
to	O	O
clutter	O	O
source	O	O
code	O	O
with	O	O
boxing	O	O
and	O	O
unboxing	O	O
method	O	O
calls	O	O
,	O	O
but	O	O
the	O	O
overhead	O	O
is	O	O
still	O	O
there	O	O
.	O	O
In	O	O
many	O	O
cases	O	O
it	O	O
'	O	O
s	O	O
not	O	O
noticeable	O	O
.	O	O
However	O	O
,	O	O
if	O	O
you	O	O
were	O	O
to	O	O
perform	O	O
boxing	O	O
or	O	O
unboxing	O	O
within	O	O
an	O	O
inner	O	O
loop	O	O
,	O	O
you	O	O
'	O	O
d	O	O
see	O	O
that	O	O
it	O	O
can	O	O
impose	O	O
significant	O	O
CPU	O	O
and	O	O
garbage	O	O
collection	O	O
overhead	O	O
.	O	O
When	O	O
designing	O	O
the	O	O
Streams	B-api_mention	O
API	O	O
,	O	O
it	O	O
was	O	O
clear	O	O
that	O	O
we	O	O
had	O	O
to	O	O
support	O	O
primitives	O	O
.	O	O
The	O	O
boxing	O	O
/	O	O
unboxing	O	O
overhead	O	O
would	O	O
kill	O	O
any	O	O
performance	O	O
benefit	O	O
from	O	O
parallelism	O	O
.	O	O
We	O	O
didn	O	O
'	O	O
t	O	O
want	O	O
to	O	O
support	O	O
all	O	O
of	O	O
the	O	O
primitives	O	O
,	O	O
though	O	O
,	O	O
since	O	O
that	O	O
would	O	O
have	O	O
added	O	O
a	O	O
huge	O	O
amount	O	O
of	O	O
clutter	O	O
to	O	O
the	O	O
API	O	O
.	O	O
(	O	O
Can	O	O
you	O	O
really	O	O
see	O	O
a	O	O
use	O	O
for	O	O
a	O	O
ShortStream	B-api_mention	B-api_mention
?	O	O
)	O	O
"	O	O
All	O	O
"	O	O
or	O	O
"	O	O
none	O	O
"	O	O
are	O	O
comfortable	O	O
places	O	O
for	O	O
a	O	O
design	O	O
to	O	O
be	O	O
,	O	O
yet	O	O
neither	O	O
was	O	O
acceptable	O	O
.	O	O
So	O	O
we	O	O
had	O	O
to	O	O
find	O	O
a	O	O
reasonable	O	O
value	O	O
of	O	O
"	O	O
some	O	O
"	O	O
.	O	O
We	O	O
ended	O	O
up	O	O
with	O	O
primitive	O	O
specializations	O	O
for	O	O
int	O	O
,	O	O
long	O	O
,	O	O
and	O	O
double	O	O
.	O	O
(	O	O
Personally	O	O
I	O	O
would	O	O
have	O	O
left	O	O
out	O	O
int	O	O
but	O	O
that	O	O
'	O	O
s	O	O
just	O	O
me	O	O
.	O	O
)	O	O
For	O	O
CharSequence	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
chars	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
we	O	O
considered	O	O
returning	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	O	O
an	O	O
early	O	O
prototype	O	O
might	O	O
have	O	O
implemented	O	O
this	O	O
)	O	O
but	O	O
it	O	O
was	O	O
rejected	O	O
because	O	O
of	O	O
boxing	O	O
overhead	O	O
.	O	O
Considering	O	O
that	O	O
a	O	O
String	B-api_mention	B-api_mention
has	O	O
char	O	O
values	O	O
as	O	O
primitives	O	O
,	O	O
it	O	O
would	O	O
seem	O	O
to	O	O
be	O	O
a	O	O
mistake	O	O
to	O	O
impose	O	O
boxing	O	O
unconditionally	O	O
when	O	O
the	O	O
caller	O	O
would	O	O
probably	O	O
just	O	O
do	O	O
a	O	O
bit	O	O
of	O	O
processing	O	O
on	O	O
the	O	O
value	O	O
and	O	O
unbox	O	O
it	O	O
right	O	O
back	O	O
into	O	O
a	O	O
string	O	O
.	O	O
We	O	O
also	O	O
considered	O	O
a	O	O
CharStream	B-api_mention	B-api_mention
primitive	O	O
specialization	O	O
,	O	O
but	O	O
its	O	O
use	O	O
would	O	O
seem	O	O
to	O	O
be	O	O
quite	O	O
narrow	O	O
compared	O	O
to	O	O
the	O	O
amount	O	O
of	O	O
bulk	O	O
it	O	O
would	O	O
add	O	O
to	O	O
the	O	O
API	O	O
.	O	O
It	O	O
didn	O	O
'	O	O
t	O	O
seem	O	O
worthwhile	O	O
to	O	O
add	O	O
it	O	O
.	O	O
The	O	O
penalty	O	O
this	O	O
imposes	O	O
on	O	O
callers	O	O
is	O	O
that	O	O
they	O	O
have	O	O
to	O	O
know	O	O
that	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
contains	O	O
char	O	O
values	O	O
represented	O	O
as	O	O
ints	O	O
and	O	O
that	O	O
casting	O	O
must	O	O
be	O	O
done	O	O
at	O	O
the	O	O
proper	O	O
place	O	O
.	O	O
This	O	O
is	O	O
doubly	O	O
confusing	O	O
because	O	O
there	O	O
are	O	O
overloaded	O	O
API	O	O
calls	O	O
like	O	O
PrintStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
print	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
PrintStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
print	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
that	O	O
differ	O	O
markedly	O	O
in	O	O
their	O	O
behavior	O	O
.	O	O
An	O	O
additional	O	O
point	O	O
of	O	O
confusion	O	O
possibly	O	O
arises	O	O
because	O	O
the	O	O
codePoints	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
also	O	O
returns	O	O
an	O	O
IntStream	B-api_mention	B-api_mention
but	O	O
the	O	O
values	O	O
it	O	O
contains	O	O
are	O	O
quite	O	O
different	O	O
.	O	O
So	O	O
,	O	O
this	O	O
boils	O	O
down	O	O
to	O	O
choosing	O	O
pragmatically	O	O
among	O	O
several	O	O
alternatives	O	O
:	O	O
#	O	O
li	O	O
We	O	O
could	O	O
provide	O	O
no	O	O
primitive	O	O
specializations	O	O
,	O	O
resulting	O	O
in	O	O
a	O	O
simple	O	O
,	O	O
elegant	O	O
,	O	O
consistent	O	O
API	O	O
,	O	O
but	O	O
which	O	O
imposes	O	O
a	O	O
high	O	O
performance	O	O
and	O	O
GC	O	O
overhead	O	O
;	O	O
#	O	O
li	O	O
we	O	O
could	O	O
provide	O	O
a	O	O
complete	O	O
set	O	O
of	O	O
primitive	O	O
specializations	O	O
,	O	O
at	O	O
the	O	O
cost	O	O
of	O	O
cluttering	O	O
up	O	O
the	O	O
API	O	O
and	O	O
imposing	O	O
a	O	O
maintenance	O	O
burden	O	O
on	O	O
JDK	O	O
developers	O	O
;	O	O
or	O	O
#	O	O
li	O	O
we	O	O
could	O	O
provide	O	O
a	O	O
subset	O	O
of	O	O
primitive	O	O
specializations	O	O
,	O	O
giving	O	O
a	O	O
moderately	O	O
sized	O	O
,	O	O
high	O	O
performing	O	O
API	O	O
that	O	O
imposes	O	O
a	O	O
relatively	O	O
small	O	O
burden	O	O
on	O	O
callers	O	O
in	O	O
a	O	O
fairly	O	O
narrow	O	O
range	O	O
of	O	O
use	O	O
cases	O	O
(	O	O
char	O	O
processing	O	O
)	O	O
.	O	O
We	O	O
chose	O	O
the	O	O
last	O	O
one	O	O
.	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
21008747	O	O
[	O	O
Disclaimer	O	O
this	O	O
is	O	O
a	O	O
deliberately	O	O
opinionated	O	O
style	O	O
of	O	O
answer	O	O
as	O	O
I	O	O
feel	O	O
a	O	O
more	O	O
"	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
at	O	O
home	O	O
kids	O	O
"	O	O
answer	O	O
is	O	O
warranted	O	O
]	O	O
The	O	O
sin	O	O
is	O	O
the	O	O
line	O	O
field	O	O
.	B-api_mention	B-api_mention
setAccessible	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
says	O	O
to	O	O
violate	O	O
the	O	O
public	O	O
api	O	O
by	O	O
allowing	O	O
access	O	O
to	O	O
a	O	O
private	O	O
field	O	O
.	O	O
Thats	O	O
a	O	O
giant	O	O
security	O	O
hole	O	O
which	O	O
can	O	O
be	O	O
locked	O	O
down	O	O
by	O	O
configuring	O	O
a	O	O
security	O	O
manager	O	O
.	O	O
The	O	O
phenomenon	O	O
in	O	O
the	O	O
question	O	O
are	O	O
implementation	O	O
details	O	O
which	O	O
you	O	O
would	O	O
never	O	O
see	O	O
when	O	O
not	O	O
using	O	O
that	O	O
dangerous	O	O
line	O	O
of	O	O
code	O	O
to	O	O
violate	O	O
the	O	O
access	O	O
modifiers	O	O
via	O	O
reflection	O	O
.	O	O
Clearly	O	O
two	O	O
(	O	O
normally	O	O
)	O	O
immutable	O	O
strings	O	O
can	O	O
share	O	O
the	O	O
same	O	O
char	O	O
array	O	O
.	O	O
Whether	O	O
a	O	O
substring	O	O
shares	O	O
the	O	O
same	O	O
array	O	O
depends	O	O
on	O	O
whether	O	O
it	O	O
can	O	O
and	O	O
whether	O	O
the	O	O
developer	O	O
thought	O	O
to	O	O
share	O	O
it	O	O
.	O	O
Normally	O	O
these	O	O
are	O	O
invisible	O	O
implementation	O	O
details	O	O
which	O	O
you	O	O
should	O	O
not	O	O
have	O	O
to	O	O
know	O	O
unless	O	O
you	O	O
shoot	O	O
the	O	O
access	O	O
modifier	O	O
through	O	O
the	O	O
head	O	O
with	O	O
that	O	O
line	O	O
of	O	O
code	O	O
.	O	O
It	O	O
is	O	O
simply	O	O
not	O	O
a	O	O
good	O	O
idea	O	O
to	O	O
rely	O	O
upon	O	O
such	O	O
details	O	O
which	O	O
cannot	O	O
be	O	O
experienced	O	O
without	O	O
violating	O	O
the	O	O
access	O	O
modifiers	O	O
using	O	O
reflection	O	O
.	O	O
The	O	O
owner	O	O
of	O	O
that	O	O
class	O	O
only	O	O
supports	O	O
the	O	O
normal	O	O
public	O	O
API	O	O
and	O	O
is	O	O
free	O	O
to	O	O
make	O	O
implementation	O	O
changes	O	O
in	O	O
the	O	O
future	O	O
.	O	O
Having	O	O
said	O	O
all	O	O
that	O	O
the	O	O
line	O	O
of	O	O
code	O	O
is	O	O
really	O	O
very	O	O
useful	O	O
when	O	O
you	O	O
have	O	O
a	O	O
gun	O	O
held	O	O
you	O	O
your	O	O
head	O	O
forcing	O	O
you	O	O
to	O	O
do	O	O
such	O	O
dangerous	O	O
things	O	O
.	O	O
Using	O	O
that	O	O
back	O	O
door	O	O
is	O	O
usually	O	O
a	O	O
code	O	O
smell	O	O
that	O	O
you	O	O
need	O	O
to	O	O
upgrade	O	O
to	O	O
better	O	O
library	O	O
code	O	O
where	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
sin	O	O
.	O	O
Another	O	O
common	O	O
use	O	O
of	O	O
that	O	O
dangerous	O	O
line	O	O
of	O	O
code	O	O
is	O	O
to	O	O
write	O	O
a	O	O
"	O	O
voodoo	O	O
framework	O	O
"	O	O
(	O	O
orm	O	O
,	O	O
injection	O	O
container	O	O
,	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
Many	O	O
folks	O	O
get	O	O
religious	O	O
about	O	O
such	O	O
frameworks	O	O
(	O	O
both	O	O
for	O	O
and	O	O
against	O	O
them	O	O
)	O	O
so	O	O
I	O	O
will	O	O
avoid	O	O
inviting	O	O
a	O	O
flame	O	O
war	O	O
by	O	O
saying	O	O
nothing	O	O
other	O	O
than	O	O
the	O	O
vast	O	O
majority	O	O
of	O	O
programmers	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
go	O	O
there	O	O
.	O	O
Question	O	O
-	O	O
28840047	O	O
,	O	O
answer	O	O
-	O	O
28840048	O	O
This	O	O
is	O	O
of	O	O
course	O	O
a	O	O
"	O	O
feature	O	O
"	O	O
.	O	O
The	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
computeIfAbsent	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Javadoc	O	O
reads	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
"	O	O
must	O	O
not	O	O
"	O	O
wording	O	O
is	O	O
a	O	O
clear	O	O
contract	O	O
,	O	O
which	O	O
my	O	O
algorithm	O	O
violated	O	O
,	O	O
although	O	O
not	O	O
for	O	O
the	O	O
same	O	O
concurrency	O	O
reasons	O	O
.	O	O
What	O	O
'	O	O
s	O	O
still	O	O
interesting	O	O
is	O	O
that	O	O
there	O	O
is	O	O
no	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
.	O	O
Instead	O	O
,	O	O
the	O	O
program	O	O
just	O	O
never	O	O
halts	O	O
-	O	O
which	O	O
still	O	O
is	O	O
a	O	O
rather	O	O
dangerous	O	O
bug	O	O
in	O	O
my	O	O
opinion	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
infinite	O	O
loops	O	O
.	O	O
or	O	O
:	O	O
anything	O	O
that	O	O
can	O	O
possibly	O	O
go	O	O
wrong	O	O
,	O	O
does	O	O
)	O	O
.	O	O
The	O	O
simplest	O	O
use	O	O
-	O	O
site	O	O
solution	O	O
for	O	O
this	O	O
concrete	O	O
problem	O	O
would	O	O
be	O	O
to	O	O
not	O	O
use	O	O
a	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
,	O	O
but	O	O
just	O	O
a	O	O
HashMap	B-api_mention	B-api_mention
instead	O	O
:	O	O
static	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
cache	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Now	O	O
,	O	O
everything	O	O
works	O	O
fine	O	O
.	O	O
Note	O	O
:	O	O
The	O	O
HashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
computeIfAbsent	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Map	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
computeIfAbsent	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Javadoc	O	O
don	O	O
'	O	O
t	O	O
forbid	O	O
such	O	O
recursive	O	O
computation	O	O
,	O	O
which	O	O
is	O	O
of	O	O
course	O	O
ridiculous	O	O
as	O	O
the	O	O
type	O	O
of	O	O
the	O	O
cache	O	O
is	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
not	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
It	O	O
is	O	O
very	O	O
dangerous	O	O
for	O	O
subtypes	O	O
to	O	O
drastically	O	O
re	O	O
-	O	O
define	O	O
super	O	O
type	O	O
contracts	O	O
(	O	O
Set	B-api_mention	O
vs	O	O
.	O	O
SortedSet	B-api_mention	B-api_mention
is	O	O
greeting	O	O
)	O	O
.	O	O
It	O	O
should	O	O
thus	O	O
be	O	O
forbidden	O	O
also	O	O
in	O	O
super	O	O
types	O	O
,	O	O
to	O	O
perform	O	O
such	O	O
recursion	O	O
.	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777279	O	O
array1	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
same	O	O
as	O	O
array1	O	O
=	O	O
=	O	O
array2	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
is	O	O
it	O	O
the	O	O
same	O	O
array	O	O
.	O	O
As	O	O
@	O	O
alf	O	O
points	O	O
out	O	O
it	O	O
'	O	O
s	O	O
not	O	O
what	O	O
most	O	O
people	O	O
expect	O	O
.	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
compares	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
arrays	O	O
.	O	O
Similarly	O	O
array	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
not	O	O
be	O	O
very	O	O
useful	O	O
and	O	O
you	O	O
need	O	O
to	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
13195797	O	O
I	O	O
want	O	O
to	O	O
delete	O	O
all	O	O
files	O	O
inside	O	O
ABC	O	O
directory	O	O
.	O	O
When	O	O
I	O	O
tried	O	O
with	O	O
FileUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
deleteDirectory	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
;	O	O
it	O	O
also	O	O
deletes	O	O
folder	O	O
ABC	O	O
.	O	O
Is	O	O
there	O	O
a	O	O
one	O	O
liner	O	O
solution	O	O
where	O	O
I	O	O
can	O	O
delete	O	O
files	O	O
inside	O	O
directory	O	O
but	O	O
not	O	O
directory	O	O
?	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31924845	O	O
There	O	O
are	O	O
almost	O	O
no	O	O
good	O	O
reasons	O	O
for	O	O
not	O	O
using	O	O
Optional	B-api_mention	B-api_mention
as	O	O
parameters	O	O
.	O	O
The	O	O
arguments	O	O
against	O	O
this	O	O
rely	O	O
on	O	O
arguments	O	O
from	O	O
authority	O	O
(	O	O
see	O	O
Brian	O	O
Goetz	O	O
-	O	O
his	O	O
argument	O	O
is	O	O
we	O	O
can	O	O
'	O	O
t	O	O
enforce	O	O
non	O	O
null	O	O
optionals	O	O
)	O	O
or	O	O
that	O	O
the	O	O
Optional	B-api_mention	B-api_mention
arguments	O	O
may	O	O
be	O	O
null	O	O
(	O	O
essentially	O	O
the	O	O
same	O	O
argument	O	O
)	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
any	O	O
reference	O	O
in	O	O
Java	O	O
can	O	O
be	O	O
null	O	O
,	O	O
we	O	O
need	O	O
to	O	O
encourage	O	O
rules	O	O
being	O	O
enforced	O	O
by	O	O
the	O	O
compiler	O	O
,	O	O
not	O	O
programmers	O	O
memory	O	O
(	O	O
which	O	O
is	O	O
problematic	O	O
and	O	O
does	O	O
not	O	O
scale	O	O
)	O	O
.	O	O
Functional	O	O
programming	O	O
languages	O	O
encourage	O	O
Optional	B-api_mention	B-api_mention
parameters	O	O
.	O	O
One	O	O
of	O	O
the	O	O
best	O	O
ways	O	O
of	O	O
using	O	O
this	O	O
is	O	O
to	O	O
have	O	O
multiple	O	O
optional	O	O
parameters	O	O
and	O	O
using	O	O
liftM2	O	O
to	O	O
use	O	O
a	O	O
function	O	O
assuming	O	O
the	O	O
parameters	O	O
are	O	O
not	O	O
empty	O	O
and	O	O
returning	O	O
an	O	O
optional	O	O
(	O	O
see	O	O
#	O	O
a	O	O
)	O	O
.	O	O
Java	O	O
8	O	O
has	O	O
unfortunately	O	O
implemented	O	O
a	O	O
very	O	O
limited	O	O
library	O	O
supporting	O	O
optional	O	O
.	O	O
As	O	O
Java	O	O
programmers	O	O
we	O	O
should	O	O
only	O	O
be	O	O
using	O	O
null	O	O
to	O	O
interact	O	O
with	O	O
legacy	O	O
libraries	O	O
.	O	O
Question	O	O
-	O	O
30125296	O	O
,	O	O
answer	O	O
-	O	O
35035659	O	O
You	O	O
can	O	O
use	O	O
reduce	O	O
method	O	O
:	O	O
long	O	O
creditAmountSum	O	O
=	O	O
result	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reduce	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
7935858	O	O
I	O	O
have	O	O
prepared	O	O
a	O	O
simple	O	O
code	O	O
snippet	O	O
in	O	O
order	O	O
to	O	O
separate	O	O
the	O	O
erroneous	O	O
portion	O	O
from	O	O
my	O	O
web	O	O
application	O	O
.	O	O
#	O	O
pre	O	O
I	O	O
have	O	O
tested	O	O
it	O	O
while	O	O
building	O	O
a	O	O
web	O	O
application	O	O
JSF	O	O
.	O	O
I	O	O
just	O	O
want	O	O
to	O	O
know	O	O
why	O	O
in	O	O
the	O	O
above	O	O
code	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
work	O	O
.	O	O
The	O	O
statement	O	O
,	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
displays	O	O
nothing	O	O
on	O	O
the	O	O
console	O	O
means	O	O
that	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
go	O	O
through	O	O
the	O	O
loop	O	O
.	O	O
When	O	O
I	O	O
change	O	O
the	O	O
argument	O	O
of	O	O
the	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
other	O	O
characters	O	O
,	O	O
It	O	O
works	O	O
just	O	O
fine	O	O
as	O	O
usual	O	O
.	O	O
What	O	O
might	O	O
be	O	O
the	O	O
problem	O	O
?	O	O
Question	O	O
-	O	O
29262002	O	O
,	O	O
answer	O	O
-	O	O
29262520	O	O
Basicly	O	O
,	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
an	O	O
executable	O	O
piece	O	O
of	O	O
code	O	O
that	O	O
actually	O	O
does	O	O
something	O	O
(	O	O
it	O	O
creates	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
and	O	O
then	O	O
returns	O	O
it	O	O
)	O	O
.	O	O
The	O	O
returned	O	O
value	O	O
can	O	O
be	O	O
ignored	O	O
and	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
can	O	O
still	O	O
be	O	O
used	O	O
in	O	O
void	O	O
-	O	O
return	O	O
lambda	O	O
to	O	O
create	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
.	O	O
However	O	O
,	O	O
StringLiteral	O	O
is	O	O
just	O	O
a	O	O
constant	O	O
that	O	O
doesn	O	O
'	O	O
t	O	O
do	O	O
anything	O	O
on	O	O
it	O	O
'	O	O
s	O	O
own	O	O
.	O	O
The	O	O
only	O	O
reasonable	O	O
thing	O	O
to	O	O
do	O	O
with	O	O
it	O	O
in	O	O
lambda	O	O
body	O	O
is	O	O
to	O	O
return	O	O
it	O	O
.	O	O
But	O	O
the	O	O
lambda	O	O
method	O	O
would	O	O
have	O	O
to	O	O
have	O	O
return	O	O
type	O	O
String	B-api_mention	B-api_mention
or	O	O
Object	B-api_mention	B-api_mention
,	O	O
but	O	O
it	O	O
returns	O	O
void	O	O
,	O	O
hence	O	O
the	O	O
String	B-api_mention	B-api_mention
cannot	O	O
be	O	O
casted	O	O
to	O	O
void	O	O
error	O	O
.	O	O
Question	O	O
-	O	O
8172420	O	O
,	O	O
answer	O	O
-	O	O
15633542	O	O
Nice	O	O
question	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
got	O	O
of	O	O
the	O	O
following	O	O
five	O	O
6	O	O
methods	O	O
to	O	O
do	O	O
it	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
invokes	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
in	O	O
turn	O	O
sets	O	O
the	O	O
value	O	O
char	O	O
array	O	O
.	O	O
#	O	O
pre	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
invokes	O	O
the	O	O
following	O	O
package	O	O
private	O	O
constructor	O	O
.	O	O
#	O	O
pre	O	O
Source	O	O
code	O	O
from	O	O
String	B-api_mention	B-api_mention
.	O	O
java	O	O
in	O	O
Java	O	O
8	O	O
source	O	O
code	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Java	O	O
:	O	O
:	O	O
How	O	O
to	O	O
convert	O	O
primitive	O	O
char	O	O
to	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
#	O	O
li	O	O
How	O	O
to	O	O
convert	O	O
Char	B-api_mention	B-api_mention
to	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
with	O	O
Example	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
8641412	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
code	O	O
registers	O	O
the	O	O
Thread	B-api_mention	B-api_mention
with	O	O
scheduler	O	O
and	O	O
the	O	O
scheduler	O	O
calls	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Also	O	O
,	O	O
Thread	B-api_mention	B-api_mention
is	O	O
class	O	O
while	O	O
Runnable	B-api_mention	B-api_mention
is	O	O
an	O	O
interface	O	O
.	O	O
Question	O	O
-	O	O
27430092	O	O
,	O	O
answer	O	O
-	O	O
27430172	O	O
A	O	O
possible	O	O
use	O	O
case	O	O
is	O	O
in	O	O
testing	O	O
primality	O	O
of	O	O
a	O	O
given	O	O
number	O	O
(	O	O
at	O	O
test	O	O
which	O	O
in	O	O
itself	O	O
has	O	O
many	O	O
uses	O	O
)	O	O
.	O	O
The	O	O
isProbablePrime	B-api_mention	B-api_mention
algorithm	O	O
will	O	O
run	O	O
much	O	O
faster	O	O
than	O	O
an	O	O
exact	O	O
algorithm	O	O
,	O	O
so	O	O
if	O	O
the	O	O
number	O	O
fails	O	O
isProbablePrime	B-api_mention	O
,	O	O
then	O	O
one	O	O
need	O	O
not	O	O
go	O	O
to	O	O
the	O	O
expense	O	O
of	O	O
running	O	O
the	O	O
more	O	O
expensive	O	O
algorithm	O	O
.	O	O
Question	O	O
-	O	O
30581531	O	O
What	O	O
is	O	O
the	O	O
maximum	O	O
number	O	O
of	O	O
parameters	O	O
that	O	O
a	O	O
method	O	O
in	O	O
Java	O	O
can	O	O
have	O	O
and	O	O
why	O	O
?	O	O
I	O	O
am	O	O
using	O	O
Java	O	O
1	O	O
.	O	O
8	O	O
on	O	O
a	O	O
64	O	O
-	O	O
bit	O	O
Windows	O	O
system	O	O
.	O	O
All	O	O
the	O	O
answers	O	O
on	O	O
StackOverflow	O	B-api_mention
about	O	O
this	O	O
say	O	O
that	O	O
the	O	O
technical	O	O
limit	O	O
is	O	O
255	O	O
parameters	O	O
without	O	O
specifying	O	O
why	O	O
.	O	O
To	O	O
be	O	O
precise	O	O
,	O	O
255	O	O
for	O	O
static	O	O
and	O	O
254	O	O
for	O	O
non	O	O
-	O	O
static	O	O
(	O	O
this	O	O
will	O	O
be	O	O
the	O	O
255th	O	O
in	O	O
this	O	O
case	O	O
)	O	O
methods	O	O
.	O	O
I	O	O
thought	O	O
this	O	O
could	O	O
be	O	O
specified	O	O
in	O	O
some	O	O
sort	O	O
of	O	O
specification	O	O
and	O	O
that	O	O
this	O	O
was	O	O
simply	O	O
a	O	O
statically	O	O
defined	O	O
maximum	O	O
number	O	O
of	O	O
parameters	O	O
allowed	O	O
.	O	O
But	O	O
this	O	O
was	O	O
only	O	O
valid	O	O
for	O	O
int	O	O
and	O	O
all	O	O
4	O	O
-	O	O
bytes	O	O
types	O	O
.	O	O
I	O	O
did	O	O
some	O	O
tests	O	O
with	O	O
long	O	O
parameters	O	O
,	O	O
and	O	O
I	O	O
was	O	O
only	O	O
able	O	O
to	O	O
declare	O	O
127	O	O
parameters	O	O
in	O	O
that	O	O
case	O	O
.	O	O
With	O	O
String	B-api_mention	B-api_mention
parameters	O	O
,	O	O
the	O	O
allowed	O	O
number	O	O
i	O	O
deduced	O	O
from	O	O
testing	O	O
is	O	O
255	O	O
(	O	O
it	O	O
may	O	O
be	O	O
because	O	O
the	O	O
reference	O	O
size	O	O
is	O	O
4	O	O
bytes	O	O
in	O	O
Java	O	O
?	O	O
)	O	O
.	O	O
But	O	O
since	O	O
I	O	O
am	O	O
using	O	O
a	O	O
64	O	O
-	O	O
bit	O	O
system	O	O
,	O	O
references	O	O
size	O	O
should	O	O
be	O	O
8	O	O
bytes	O	O
wide	O	O
and	O	O
so	O	O
with	O	O
String	B-api_mention	B-api_mention
parameters	O	O
the	O	O
maximum	O	O
allowed	O	O
number	O	O
should	O	O
be	O	O
127	O	O
,	O	O
similar	O	O
to	O	O
long	O	O
types	O	O
.	O	O
How	O	O
does	O	O
this	O	O
limit	O	O
is	O	O
exactly	O	O
applied	O	O
?	O	O
Does	O	O
the	O	O
limit	O	O
have	O	O
anything	O	O
to	O	O
do	O	O
with	O	O
the	O	O
stack	O	O
size	O	O
of	O	O
the	O	O
method	O	O
?	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
not	O	O
really	O	O
going	O	O
to	O	O
use	O	O
these	O	O
many	O	O
parameters	O	O
in	O	O
any	O	O
method	O	O
,	O	O
but	O	O
this	O	O
question	O	O
is	O	O
only	O	O
to	O	O
clarify	O	O
the	O	O
exact	O	O
behavior	O	O
.	O	O
Question	O	O
-	O	O
4759570	O	O
,	O	O
answer	O	O
-	O	O
19459145	O	O
This	O	O
works	O	O
on	O	O
Windows	O	O
with	O	O
Cygwin	O	O
installed	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
12732422	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
add	O	O
header	O	O
for	O	O
my	O	O
request	O	O
using	O	O
HttpUrlConnection	B-api_mention	B-api_mention
but	O	O
the	O	O
method	O	O
setRequestProperty	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
doesn	O	O
'	O	O
t	O	O
seem	O	O
working	O	O
.	O	O
The	O	O
server	O	O
side	O	O
doesn	O	O
'	O	O
t	O	O
receive	O	O
any	O	O
request	O	O
with	O	O
my	O	O
header	O	O
.	O	O
Can	O	O
anyone	O	O
help	O	O
me	O	O
?	O	O
Thanks	O	O
in	O	O
advance	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7693324	O	O
,	O	O
answer	O	O
-	O	O
7693341	O	O
To	O	O
convert	O	O
a	O	O
String	B-api_mention	B-api_mention
to	O	O
a	O	O
Long	B-api_mention	B-api_mention
(	O	O
object	O	O
)	O	O
,	O	O
use	O	O
Long	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
longValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
See	O	O
link	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
6271520	O	O
Try	O	O
using	O	O
this	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getCanonicalName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
this	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getSimpleName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
it	O	O
'	O	O
s	O	O
an	O	O
anonymous	O	O
class	O	O
,	O	O
use	O	O
this	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getSuperclass	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
7693324	O	O
I	O	O
got	O	O
a	O	O
simple	O	O
question	O	O
in	O	O
Java	O	O
:	O	O
How	O	O
can	O	O
I	O	O
convert	O	O
a	O	O
String	B-api_mention	B-api_mention
that	O	O
was	O	O
obtained	O	O
by	O	O
Long	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
long	O	O
?	O	O
Question	O	O
-	O	O
12576156	O	O
,	O	O
answer	O	O
-	O	O
12576394	O	O
By	O	O
specifying	O	O
the	O	O
the	O	O
my	O	O
.	O	O
list	O	O
.	O	O
of	O	O
.	O	O
strings	O	O
=	O	O
ABC	O	O
,	O	O
CDE	O	O
,	O	O
EFG	O	O
in	O	O
.	O	O
properties	O	O
file	O	O
and	O	O
using	O	O
@	O	O
Value	O	O
(	O	O
args	O	O
)	O	O
private	O	O
String	O	B-api_mention
[	O	O
]	O	O
myString	O	O
;	O	O
You	O	O
can	O	O
get	O	O
the	O	O
arrays	O	O
of	O	O
strings	O	O
.	O	O
And	O	O
using	O	O
CollectionUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
addAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
can	O	O
get	O	O
the	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
Question	O	O
-	O	O
18410035	O	O
Being	O	O
somewhat	O	O
new	O	O
to	O	O
the	O	O
Java	O	O
language	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
familiarize	O	O
myself	O	O
with	O	O
all	O	O
the	O	O
ways	O	O
(	O	O
or	O	O
at	O	O
least	O	O
the	O	O
non	O	O
-	O	O
pathological	O	O
ones	O	O
)	O	O
that	O	O
one	O	O
might	O	O
iterate	O	O
through	O	O
a	O	O
list	O	O
(	O	O
or	O	O
perhaps	O	O
other	O	O
collections	O	O
)	O	O
and	O	O
the	O	O
advantages	O	O
or	O	O
disadvantages	O	O
of	O	O
each	O	O
.	O	O
Given	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
object	O	O
,	O	O
I	O	O
know	O	O
of	O	O
the	O	O
following	O	O
ways	O	O
to	O	O
loop	O	O
through	O	O
all	O	O
elements	O	O
:	O	O
Basic	O	O
for	O	O
loop	O	O
(	O	O
of	O	O
course	O	O
,	O	O
there	O	O
'	O	O
re	O	O
equivalent	O	O
while	O	O
/	O	O
do	O	O
while	O	O
loops	O	O
as	O	O
well	O	O
)	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
As	O	O
@	O	O
amarseillan	O	O
pointed	O	O
out	O	O
,	O	O
this	O	O
form	O	O
is	O	O
a	O	O
poor	O	O
choice	O	O
for	O	O
iterating	O	O
over	O	O
List	B-api_mention	B-api_mention
s	O	O
because	O	O
the	O	O
actual	O	O
implementation	O	O
of	O	O
the	O	O
get	O	O
method	O	O
may	O	O
not	O	O
be	O	O
as	O	O
efficient	O	O
as	O	O
when	O	O
using	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
.	O	O
For	O	O
example	O	O
,	O	O
LinkedList	B-api_mention	B-api_mention
implementations	O	O
must	O	O
traverse	O	O
all	O	O
of	O	O
the	O	O
elements	O	O
preceding	O	O
i	O	O
to	O	O
get	O	O
the	O	O
i	O	O
-	O	O
th	O	O
element	O	O
.	O	O
In	O	O
the	O	O
above	O	O
example	O	O
there	O	O
'	O	O
s	O	O
no	O	O
way	O	O
for	O	O
the	O	O
List	B-api_mention	B-api_mention
implementation	O	O
to	O	O
"	O	O
save	O	O
its	O	O
place	O	O
"	O	O
to	O	O
make	O	O
future	O	O
iterations	O	O
more	O	O
efficient	O	O
.	O	O
For	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
it	O	O
doesn	O	O
'	O	O
t	O	O
really	O	O
matter	O	O
because	O	O
the	O	O
complexity	O	O
/	O	O
cost	O	O
of	O	O
get	O	O
is	O	O
constant	O	O
time	O	O
(	O	O
O	O	O
(	O	O
1	O	O
)	O	O
)	O	O
whereas	O	O
for	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
is	O	O
it	O	O
proportional	O	O
to	O	O
the	O	O
size	O	O
of	O	O
the	O	O
list	O	O
(	O	O
O	O	O
(	O	O
n	O	O
)	O	O
)	O	O
.	O	O
For	O	O
more	O	O
information	O	O
about	O	O
the	O	O
computational	O	O
complexity	O	O
of	O	O
the	O	O
built	O	O
-	O	O
in	O	O
Collections	B-api_mention	B-api_mention
implementations	O	O
,	O	O
check	O	O
out	O	O
this	O	O
question	O	O
.	O	O
Enhanced	O	O
for	O	O
loop	O	O
(	O	O
nicely	O	O
explained	O	O
in	O	O
this	O	O
question	O	O
)	O	O
#	O	O
pre	O	O
Iterator	B-api_mention	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
Added	O	O
ListIterator	B-api_mention	O
ListIterator	I-api_mention	B-api_mention
#	O	O
pre	O	O
EDIT	O	O
:	O	O
Added	O	O
"	O	O
functional	O	O
-	O	O
style	O	O
"	O	O
solution	O	O
(	O	O
thanks	O	O
Dave	O	O
Newton	O	O
)	O	O
Functional	O	O
Java	O	O
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
can	O	O
apply	O	O
a	O	O
transformation	O	O
function	O	O
for	O	O
e	O	O
EDIT	O	O
:	O	O
Added	O	O
map	O	O
method	O	O
from	O	O
Java	O	O
8	O	O
'	O	O
s	O	O
Stream	O	B-api_mention
API	O	O
(	O	O
see	O	O
@	O	O
i	O	O
_	O	O
am	O	O
_	O	O
zero	O	O
'	O	O
s	O	O
answer	O	O
)	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
.	O	O
.	O	O
.	O	O
In	O	O
Java	O	O
8	O	O
collection	O	O
classes	O	O
that	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
for	O	O
example	O	O
all	O	O
List	B-api_mention	B-api_mention
s	O	O
)	O	O
now	O	O
have	O	O
a	O	O
forEach	B-api_mention	B-api_mention
method	O	O
,	O	O
which	O	O
can	O	O
be	O	O
used	O	O
instead	O	O
of	O	O
the	O	O
for	O	O
loop	O	O
statement	O	O
demonstrated	O	O
above	O	O
.	O	O
(	O	O
Here	O	O
is	O	O
another	O	O
question	O	O
that	O	O
provides	O	O
a	O	O
good	O	O
comparison	O	O
.	O	O
)	O	O
#	O	O
pre	O	O
What	O	O
other	O	O
ways	O	O
are	O	O
there	O	O
,	O	O
if	O	O
any	O	O
?	O	O
I	O	O
feel	O	O
like	O	O
this	O	O
has	O	O
got	O	O
to	O	O
be	O	O
a	O	O
duplicate	O	O
,	O	O
but	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
been	O	O
able	O	O
to	O	O
find	O	O
what	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
,	O	O
so	O	O
I	O	O
apologize	O	O
for	O	O
this	O	O
question	O	O
potentially	O	O
being	O	O
redundant	O	O
.	O	O
(	O	O
BTW	O	O
,	O	O
my	O	O
interest	O	O
does	O	O
not	O	O
stem	O	O
at	O	O
all	O	O
from	O	O
a	O	O
desire	O	O
to	O	O
optimize	O	O
performance	O	O
;	O	O
I	O	O
just	O	O
want	O	O
to	O	O
know	O	O
what	O	O
forms	O	O
are	O	O
available	O	O
to	O	O
me	O	O
as	O	O
a	O	O
developer	O	O
.	O	O
)	O	O
EDIT	O	O
:	O	O
Moved	O	O
ListIterationExample	O	B-api_mention
.	O	O
java	O	O
to	O	O
a	O	O
suggested	O	O
answer	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
36394016	O	O
Whenever	O	O
there	O	O
is	O	O
the	O	O
slightest	O	O
possibility	O	O
that	O	O
the	O	O
given	O	O
String	B-api_mention	B-api_mention
does	O	O
not	O	O
contain	O	O
an	O	O
Integer	B-api_mention	B-api_mention
,	O	O
you	O	O
have	O	O
to	O	O
handle	O	O
this	O	O
special	O	O
case	O	O
.	O	O
Sadly	O	O
,	O	O
the	O	O
standard	O	O
Java	O	O
methods	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
parseInt	I-api_mention	B-api_mention
and	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
throw	O	O
a	O	O
NumberFormatException	B-api_mention	B-api_mention
to	O	O
signal	O	O
this	O	O
special	O	O
case	O	O
.	O	O
Thus	O	O
,	O	O
you	O	O
have	O	O
to	O	O
use	O	O
exceptions	O	O
for	O	O
flow	O	O
control	O	O
,	O	O
which	O	O
is	O	O
generally	O	O
considered	O	O
bad	O	O
coding	O	O
style	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
,	O	O
this	O	O
special	O	O
case	O	O
should	O	O
be	O	O
handled	O	O
by	O	O
returning	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Since	O	O
Java	O	O
does	O	O
not	O	O
offer	O	O
such	O	O
a	O	O
method	O	O
,	O	O
I	O	O
use	O	O
the	O	O
following	O	O
wrapper	O	O
:	O	O
#	O	O
pre	O	O
Usage	O	O
:	O	O
#	O	O
pre	O	O
While	O	O
this	O	O
is	O	O
still	O	O
using	O	O
exceptions	O	O
for	O	O
flow	O	O
control	O	O
internally	O	O
,	O	O
the	O	O
usage	O	O
code	O	O
becomes	O	O
very	O	O
clean	O	O
.	O	O
Question	O	O
-	O	O
13659217	O	O
I	O	O
declare	O	O
an	O	O
enum	O	O
as	O	O
:	O	O
enum	O	O
Sex	O	O
{	O	O
MALE	O	O
,	O	O
FEMALE	O	O
}	O	O
;	O	O
And	O	O
then	O	O
,	O	O
iterate	O	O
enum	O	O
as	O	O
shown	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
checked	O	O
the	O	O
Java	O	O
API	O	O
but	O	O
can	O	O
'	O	O
t	O	O
find	O	O
the	O	O
values	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
?	O	O
I	O	O
'	O	O
m	O	O
curious	O	O
as	O	O
to	O	O
where	O	O
this	O	O
method	O	O
comes	O	O
from	O	O
?	O	O
API	O	O
link	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
5868454	O	O
You	O	O
need	O	O
to	O	O
use	O	O
the	O	O
readLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
class	O	O
BufferedReader	B-api_mention	B-api_mention
.	O	O
Create	O	O
a	O	O
new	O	O
object	O	O
from	O	O
that	O	O
class	O	O
and	O	O
operate	O	O
this	O	O
method	O	O
on	O	O
him	O	O
and	O	O
save	O	O
it	O	O
to	O	O
a	O	O
string	O	O
.	O	O
BufferReader	B-api_mention	B-api_mention
API	O	O
Question	O	O
-	O	O
26375932	O	O
,	O	O
answer	O	O
-	O	O
26407637	O	O
It	O	O
is	O	O
an	O	O
integer	O	O
overflow	O	O
.	O	O
The	O	O
int	O	O
data	O	O
type	O	O
is	O	O
4	O	O
bytes	O	O
,	O	O
or	O	O
32	O	O
bits	O	O
.	O	O
Therefore	O	O
,	O	O
numbers	O	O
larger	O	O
than	O	O
2	O	O
^	O	O
(	O	O
32	O	O
-	O	O
1	O	O
)	O	O
-	O	O
1	O	O
(	O	O
2	O	O
,	O	O
147	O	O
,	O	O
483	O	O
,	O	O
647	O	O
)	O	O
cannot	O	O
be	O	O
stored	O	O
in	O	O
this	O	O
data	O	O
type	O	O
.	O	O
Your	O	O
numerical	O	O
values	O	O
will	O	O
be	O	O
incorrect	O	O
.	O	O
For	O	O
very	O	O
large	O	O
numbers	O	O
,	O	O
you	O	O
will	O	O
want	O	O
to	O	O
import	O	O
and	O	O
use	O	O
the	O	O
class	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
math	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
BigInteger	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
NOTE	O	O
:	O	O
For	O	O
numerical	O	O
values	O	O
that	O	O
are	O	O
still	O	O
too	O	O
large	O	O
for	O	O
the	O	O
int	O	O
data	O	O
type	O	O
,	O	O
but	O	O
small	O	O
enough	O	O
to	O	O
fit	O	O
within	O	O
8	O	O
bytes	O	O
(	O	O
absolute	O	O
value	O	O
less	O	O
than	O	O
or	O	O
equal	O	O
to	O	O
2	O	O
^	O	O
(	O	O
64	O	O
-	O	O
1	O	O
)	O	O
-	O	O
1	O	O
)	O	O
,	O	O
you	O	O
should	O	O
probably	O	O
use	O	O
the	O	O
long	O	O
primitive	O	O
.	O	O
HackerRank	O	O
'	O	O
s	O	O
practice	O	O
problems	O	O
(	O	O
www	O	O
.	O	O
hackerrank	O	O
.	O	O
com	O	O
)	O	O
,	O	O
such	O	O
as	O	O
the	O	O
Algorithms	O	O
practice	O	O
section	O	O
,	O	O
(	O	O
#	O	O
a	O	O
)	O	O
include	O	O
some	O	O
very	O	O
good	O	O
large	O	O
-	O	O
number	O	O
questions	O	O
that	O	O
give	O	O
good	O	O
practice	O	O
about	O	O
how	O	O
to	O	O
think	O	O
about	O	O
the	O	O
appropriate	O	O
data	O	O
type	O	O
to	O	O
use	O	O
.	O	O
Question	O	O
-	O	O
31202946	O	O
,	O	O
answer	O	O
-	O	O
31203218	O	O
You	O	O
can	O	O
of	O	O
course	O	O
choose	O	O
to	O	O
shoot	O	O
yourself	O	O
in	O	O
the	O	O
foot	O	O
,	O	O
but	O	O
that	O	O
doesn	O	O
'	O	O
t	O	O
mean	O	O
you	O	O
must	O	O
.	O	O
#	O	O
blockquote	O	O
Because	O	O
the	O	O
recommended	O	O
way	O	O
to	O	O
create	O	O
a	O	O
start	O	O
a	O	O
thread	O	O
is	O	O
not	O	O
to	O	O
subclass	O	O
Thread	B-api_mention	B-api_mention
.	O	O
The	O	O
recommended	O	O
way	O	O
is	O	O
to	O	O
define	O	O
a	O	O
Runnable	B-api_mention	B-api_mention
,	O	O
and	O	O
pass	O	O
it	O	O
as	O	O
argument	O	O
to	O	O
the	O	O
Thread	B-api_mention	B-api_mention
constructor	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
Yes	O	O
and	O	O
no	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
replace	O	O
the	O	O
implementation	O	O
of	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
by	O	O
your	O	O
own	O	O
implementation	O	O
,	O	O
but	O	O
you	O	O
can	O	O
do	O	O
additional	O	O
things	O	O
in	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
want	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
said	O	O
,	O	O
if	O	O
Java	O	O
was	O	O
redesigned	O	O
from	O	O
scratch	O	O
today	O	O
,	O	O
there	O	O
is	O	O
a	O	O
good	O	O
chance	O	O
the	O	O
design	O	O
would	O	O
be	O	O
different	O	O
.	O	O
Remember	O	O
that	O	O
this	O	O
class	O	O
dates	O	O
from	O	O
Java	O	O
1	O	O
.	O	O
0	O	O
,	O	O
and	O	O
is	O	O
still	O	O
backward	O	O
-	O	O
compatible	O	O
.	O	O
Question	O	O
-	O	O
19416644	O	O
,	O	O
answer	O	O
-	O	O
19416665	O	O
One	O	O
simple	O	O
way	O	O
is	O	O
to	O	O
use	O	O
Float	B-api_mention	B-api_mention
.	I-api_mention	O
NaN	I-api_mention	O
:	O	O
#	O	O
pre	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
do	O	O
the	O	O
same	O	O
with	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
NaN	I-api_mention	I-api_mention
.	O	O
From	O	O
JLS	O	O
§	O	O
15	O	O
.	O	O
21	O	O
.	O	O
1	O	O
.	O	O
Numerical	O	O
Equality	O	O
Operators	O	O
=	O	O
=	O	O
and	O	O
!	O	O
=	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
24914525	O	O
,	O	O
answer	O	O
-	O	O
24914586	O	O
std	O	O
:	O	O
:	O	O
list	O	O
in	O	O
C	O	O
+	O	O
+	O	O
is	O	O
a	O	O
linked	O	O
list	O	O
,	O	O
whereas	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
ArrayList	I-api_mention	I-api_mention
is	O	O
an	O	O
array	O	O
.	O	O
Try	O	O
replacing	O	O
std	O	O
:	O	O
:	O	O
list	O	O
by	O	O
std	O	O
:	O	O
:	O	O
vector	O	O
.	O	O
Also	O	O
,	O	O
be	O	O
sure	O	O
to	O	O
compile	O	O
with	O	O
optimization	O	O
turned	O	O
on	O	O
.	O	O
Question	O	O
-	O	O
28459498	O	O
,	O	O
answer	O	O
-	O	O
28513908	O	O
I	O	O
have	O	O
some	O	O
recollections	O	O
from	O	O
the	O	O
early	O	O
design	O	O
of	O	O
the	O	O
Streams	B-api_mention	O
API	O	O
that	O	O
might	O	O
shed	O	O
some	O	O
light	O	O
on	O	O
the	O	O
design	O	O
rationale	O	O
.	O	O
Back	O	O
in	O	O
2012	O	O
,	O	O
we	O	O
were	O	O
adding	O	O
lambdas	O	O
to	O	O
the	O	O
language	O	O
,	O	O
and	O	O
we	O	O
wanted	O	O
a	O	O
collections	O	O
-	O	O
oriented	O	O
or	O	O
"	O	O
bulk	O	O
data	O	O
"	O	O
set	O	O
of	O	O
operations	O	O
,	O	O
programmed	O	O
using	O	O
lambdas	O	O
,	O	O
that	O	O
would	O	O
facilitate	O	O
parallelism	O	O
.	O	O
The	O	O
idea	O	O
of	O	O
lazily	O	O
chaining	O	O
operations	O	O
together	O	O
was	O	O
well	O	O
established	O	O
by	O	O
this	O	O
point	O	O
.	O	O
We	O	O
also	O	O
didn	O	O
'	O	O
t	O	O
want	O	O
the	O	O
intermediate	O	O
operations	O	O
to	O	O
store	O	O
results	O	O
.	O	O
The	O	O
main	O	O
issues	O	O
we	O	O
needed	O	O
to	O	O
decide	O	O
were	O	O
what	O	O
the	O	O
objects	O	O
in	O	O
the	O	O
chain	O	O
looked	O	O
like	O	O
in	O	O
the	O	O
API	O	O
and	O	O
how	O	O
they	O	O
hooked	O	O
up	O	O
to	O	O
data	O	O
sources	O	O
.	O	O
The	O	O
sources	O	O
were	O	O
often	O	O
collections	O	O
,	O	O
but	O	O
we	O	O
also	O	O
wanted	O	O
to	O	O
support	O	O
data	O	O
coming	O	O
from	O	O
a	O	O
file	O	O
or	O	O
the	O	O
network	O	O
,	O	O
or	O	O
data	O	O
generated	O	O
on	O	O
-	O	O
the	O	O
-	O	O
fly	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
from	O	O
a	O	O
random	O	O
number	O	O
generator	O	O
.	O	O
There	O	O
were	O	O
many	O	O
influences	O	O
of	O	O
existing	O	O
work	O	O
on	O	O
the	O	O
design	O	O
.	O	O
Among	O	O
the	O	O
more	O	O
influential	O	O
were	O	O
Google	O	O
'	O	O
s	O	O
Guava	O	O
library	O	O
and	O	O
the	O	O
Scala	O	O
collections	O	O
library	O	O
.	O	O
(	O	O
If	O	O
anybody	O	O
is	O	O
surprised	O	O
about	O	O
the	O	O
influence	O	O
from	O	O
Guava	O	O
,	O	O
note	O	O
that	O	O
Kevin	O	O
Bourrillion	O	O
,	O	O
Guava	O	O
lead	O	O
developer	O	O
,	O	O
was	O	O
on	O	O
the	O	O
JSR	O	O
-	O	O
335	O	O
Lambda	O	O
expert	O	O
group	O	O
.	O	O
)	O	O
On	O	O
Scala	O	O
collections	O	O
,	O	O
we	O	O
found	O	O
this	O	O
talk	O	O
by	O	O
Martin	O	O
Odersky	O	O
to	O	O
be	O	O
of	O	O
particular	O	O
interest	O	O
:	O	O
Future	O	O
-	O	O
Proofing	O	O
Scala	O	O
Collections	O	B-api_mention
:	O	O
from	O	O
Mutable	O	B-api_mention
to	O	O
Persistent	O	O
to	O	O
Parallel	O	O
.	O	O
(	O	O
Stanford	O	O
EE380	O	O
,	O	O
2011	O	O
June	O	O
1	O	O
.	O	O
)	O	O
Our	O	O
prototype	O	O
design	O	O
at	O	O
the	O	O
time	O	O
was	O	O
based	O	O
around	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
The	O	O
familiar	O	O
operations	O	O
filter	B-api_mention	O
,	O	O
map	B-api_mention	O
,	O	O
and	O	O
so	O	O
forth	O	O
were	O	O
extension	O	O
(	O	O
default	O	O
)	O	O
methods	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
Calling	O	O
one	O	O
added	O	O
an	O	O
operation	O	O
to	O	O
the	O	O
chain	O	O
and	O	O
returned	O	O
another	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
A	O	O
terminal	O	O
operation	O	O
like	O	O
count	O	O
would	O	O
call	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
up	O	O
the	O	O
chain	O	O
to	O	O
the	O	O
source	O	O
,	O	O
and	O	O
the	O	O
operations	O	O
were	O	O
implemented	O	O
within	O	O
each	O	O
stage	O	O
'	O	O
s	O	O
Iterator	B-api_mention	B-api_mention
.	O	O
Since	O	O
these	O	O
are	O	O
Iterables	O	O
,	O	O
you	O	O
can	O	O
call	O	O
the	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
more	O	O
than	O	O
once	O	O
.	O	O
What	O	O
should	O	O
happen	O	O
then	O	O
?	O	O
If	O	O
the	O	O
source	O	O
is	O	O
a	O	O
collection	O	O
,	O	O
this	O	O
mostly	O	O
works	O	O
fine	O	O
.	O	O
Collections	B-api_mention	B-api_mention
are	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
and	O	O
each	O	O
call	O	O
to	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
produces	O	O
a	O	O
distinct	O	O
Iterator	B-api_mention	B-api_mention
instance	O	O
that	O	O
is	O	O
independent	O	O
of	O	O
any	O	O
other	O	O
active	O	O
instances	O	O
,	O	O
and	O	O
each	O	O
traverses	O	O
the	O	O
collection	O	O
independently	O	O
.	O	O
Great	O	O
.	O	O
Now	O	O
what	O	O
if	O	O
the	O	O
source	O	O
is	O	O
one	O	O
-	O	O
shot	O	O
,	O	O
like	O	O
reading	O	O
lines	O	O
from	O	O
a	O	O
file	O	O
?	O	O
Maybe	O	O
the	O	O
first	O	O
Iterator	O	B-api_mention
should	O	O
get	O	O
all	O	O
the	O	O
values	O	O
but	O	O
the	O	O
second	O	O
and	O	O
subsequent	O	O
ones	O	O
should	O	O
be	O	O
empty	O	O
.	O	O
Maybe	O	O
the	O	O
values	O	O
should	O	O
be	O	O
interleaved	O	O
among	O	O
the	O	O
Iterators	O	B-api_mention
.	O	O
Or	O	O
maybe	O	O
each	O	O
Iterator	B-api_mention	B-api_mention
should	O	O
get	O	O
all	O	O
the	O	O
same	O	O
values	O	O
.	O	O
Then	O	O
,	O	O
what	O	O
if	O	O
you	O	O
have	O	O
two	O	O
iterators	O	O
and	O	O
one	O	O
gets	O	O
farther	O	O
ahead	O	O
of	O	O
the	O	O
other	O	O
?	O	O
Somebody	O	O
will	O	O
have	O	O
to	O	O
buffer	O	O
up	O	O
the	O	O
values	O	O
in	O	O
the	O	O
second	O	O
Iterator	O	B-api_mention
until	O	O
they	O	O
'	O	O
re	O	O
read	O	O
.	O	O
Worse	O	O
,	O	O
what	O	O
if	O	O
you	O	O
get	O	O
one	O	O
Iterator	B-api_mention	B-api_mention
and	O	O
read	O	O
all	O	O
the	O	O
values	O	O
,	O	O
and	O	O
only	O	O
then	O	O
get	O	O
a	O	O
second	O	O
Iterator	B-api_mention	B-api_mention
.	O	O
Where	O	O
do	O	O
the	O	O
values	O	O
come	O	O
from	O	O
now	O	O
?	O	O
Is	O	O
there	O	O
a	O	O
requirement	O	O
for	O	O
them	O	O
all	O	O
to	O	O
be	O	O
buffered	O	O
up	O	O
just	O	O
in	O	O
case	O	O
somebody	O	O
wants	O	O
a	O	O
second	O	O
Iterator	B-api_mention	B-api_mention
?	O	O
Clearly	O	O
,	O	O
allowing	O	O
multiple	O	O
Iterators	O	O
over	O	O
a	O	O
one	O	O
-	O	O
shot	O	O
source	O	O
raises	O	O
a	O	O
lot	O	O
of	O	O
questions	O	O
.	O	O
We	O	O
didn	O	O
'	O	O
t	O	O
have	O	O
good	O	O
answers	O	O
for	O	O
them	O	O
.	O	O
We	O	O
wanted	O	O
consistent	O	O
,	O	O
predictable	O	O
behavior	O	O
for	O	O
what	O	O
happens	O	O
if	O	O
you	O	O
call	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
twice	O	O
.	O	O
This	O	O
pushed	O	O
us	O	O
toward	O	O
disallowing	O	O
multiple	O	O
traversals	O	O
,	O	O
making	O	O
the	O	O
pipelines	O	O
one	O	O
-	O	O
shot	O	O
.	O	O
We	O	O
also	O	O
observed	O	O
others	O	O
bumping	O	O
into	O	O
these	O	O
issues	O	O
.	O	O
In	O	O
the	O	O
JDK	O	O
,	O	O
most	O	O
Iterables	O	B-api_mention
are	O	O
collections	O	O
or	O	O
collection	O	O
-	O	O
like	O	O
objects	O	O
,	O	O
which	O	O
allow	O	O
multiple	O	O
traversal	O	O
.	O	O
It	O	O
isn	O	O
'	O	O
t	O	O
specified	O	O
anywhere	O	O
,	O	O
but	O	O
there	O	O
seemed	O	O
to	O	O
be	O	O
an	O	O
unwritten	O	O
expectation	O	O
that	O	O
Iterables	O	O
allow	O	O
multiple	O	O
traversal	O	O
.	O	O
A	O	O
notable	O	O
exception	O	O
is	O	O
the	O	O
NIO	O	O
DirectoryStream	B-api_mention	B-api_mention
interface	O	O
.	O	O
Its	O	O
specification	O	O
includes	O	O
this	O	O
interesting	O	O
warning	O	O
:	O	O
#	O	O
blockquote	O	O
[	O	O
bold	O	O
in	O	O
original	O	O
]	O	O
This	O	O
seemed	O	O
unusual	O	O
and	O	O
unpleasant	O	O
enough	O	O
that	O	O
we	O	O
didn	O	O
'	O	O
t	O	O
want	O	O
to	O	O
create	O	O
a	O	O
whole	O	O
bunch	O	O
of	O	O
new	O	O
Iterables	O	B-api_mention
that	O	O
might	O	O
be	O	O
once	O	O
-	O	O
only	O	O
.	O	O
This	O	O
pushed	O	O
us	O	O
away	O	O
from	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
About	O	O
this	O	O
time	O	O
,	O	O
an	O	O
article	O	O
by	O	O
Bruce	O	O
Eckel	O	O
appeared	O	O
that	O	O
described	O	O
a	O	O
spot	O	O
of	O	O
trouble	O	O
he	O	O
'	O	O
d	O	O
had	O	O
with	O	O
Scala	O	O
.	O	O
He	O	O
'	O	O
d	O	O
written	O	O
this	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
'	O	O
s	O	O
pretty	O	O
straightforward	O	O
.	O	O
It	O	O
parses	O	O
lines	O	O
of	O	O
text	O	O
into	O	O
Registrant	O	O
objects	O	O
and	O	O
prints	O	O
them	O	O
out	O	O
twice	O	O
.	O	O
Except	O	O
that	O	O
it	O	O
actually	O	O
only	O	O
prints	O	O
them	O	O
out	O	O
once	O	O
.	O	O
It	O	O
turns	O	O
out	O	O
that	O	O
he	O	O
thought	O	O
that	O	O
registrants	O	O
was	O	O
a	O	O
collection	O	O
,	O	O
when	O	O
in	O	O
fact	O	O
it	O	O
'	O	O
s	O	O
an	O	O
iterator	O	O
.	O	O
The	O	O
second	O	O
call	O	O
to	O	O
foreach	O	O
encounters	O	O
an	O	O
empty	O	O
iterator	O	O
,	O	O
from	O	O
which	O	O
all	O	O
values	O	O
have	O	O
been	O	O
exhausted	O	O
,	O	O
so	O	O
it	O	O
prints	O	O
nothing	O	O
.	O	O
This	O	O
kind	O	O
of	O	O
experience	O	O
convinced	O	O
us	O	O
that	O	O
it	O	O
was	O	O
very	O	O
important	O	O
to	O	O
have	O	O
clearly	O	O
predictable	O	O
results	O	O
if	O	O
multiple	O	O
traversal	O	O
is	O	O
attempted	O	O
.	O	O
It	O	O
also	O	O
highlighted	O	O
the	O	O
importance	O	O
of	O	O
distinguishing	O	O
between	O	O
lazy	O	O
pipeline	O	O
-	O	O
like	O	O
structures	O	O
from	O	O
actual	O	O
collections	O	O
that	O	O
store	O	O
data	O	O
.	O	O
This	O	O
in	O	O
turn	O	O
drove	O	O
the	O	O
separation	O	O
of	O	O
the	O	O
lazy	O	O
pipeline	O	O
operations	O	O
into	O	O
the	O	O
new	O	O
Stream	B-api_mention	B-api_mention
interface	O	O
and	O	O
keeping	O	O
only	O	O
eager	O	O
,	O	O
mutative	O	O
operations	O	O
directly	O	O
on	O	O
Collections	B-api_mention	B-api_mention
.	O	O
Brian	O	O
Goetz	O	O
has	O	O
explained	O	O
the	O	O
rationale	O	O
for	O	O
that	O	O
.	O	O
What	O	O
about	O	O
allowing	O	O
multiple	O	O
traversal	O	O
for	O	O
collection	O	O
-	O	O
based	O	O
pipelines	O	O
but	O	O
disallowing	O	O
it	O	O
for	O	O
non	O	O
-	O	O
collection	O	O
-	O	O
based	O	O
pipelines	O	O
?	O	O
It	O	O
'	O	O
s	O	O
inconsistent	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
sensible	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
reading	O	O
values	O	O
from	O	O
the	O	O
network	O	O
,	O	O
of	O	O
course	O	O
you	O	O
can	O	O
'	O	O
t	O	O
traverse	O	O
them	O	O
again	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
traverse	O	O
them	O	O
multiple	O	O
times	O	O
,	O	O
you	O	O
have	O	O
to	O	O
pull	O	O
them	O	O
into	O	O
a	O	O
collection	O	O
explicitly	O	O
.	O	O
But	O	O
let	O	O
'	O	O
s	O	O
explore	O	O
allowing	O	O
multiple	O	O
traversal	O	O
from	O	O
collections	O	O
-	O	O
based	O	O
pipelines	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
say	O	O
you	O	O
did	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
The	O	O
into	O	O
operation	O	O
is	O	O
now	O	O
spelled	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
)	O	O
If	O	O
source	O	O
is	O	O
a	O	O
collection	O	O
,	O	O
then	O	O
the	O	O
first	O	O
into	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
will	O	O
create	O	O
a	O	O
chain	O	O
of	O	O
Iterators	B-api_mention	O
back	O	O
to	O	O
the	O	O
source	O	O
,	O	O
execute	O	O
the	O	O
pipeline	O	O
operations	O	O
,	O	O
and	O	O
send	O	O
the	O	O
results	O	O
into	O	O
the	O	O
destination	O	O
.	O	O
The	O	O
second	O	O
call	O	O
to	O	O
into	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
create	O	O
another	O	O
chain	O	O
of	O	O
Iterators	O	O
,	O	O
and	O	O
execute	O	O
the	O	O
pipeline	O	O
operations	O	O
again	O	O
.	O	O
This	O	O
isn	O	O
'	O	O
t	O	O
obviously	O	O
wrong	O	O
but	O	O
it	O	O
does	O	O
have	O	O
the	O	O
effect	O	O
of	O	O
performing	O	O
all	O	O
the	O	O
filter	O	O
and	O	O
map	O	O
operations	O	O
a	O	O
second	O	O
time	O	O
for	O	O
each	O	O
element	O	O
.	O	O
I	O	O
think	O	O
many	O	O
programmers	O	O
would	O	O
have	O	O
been	O	O
surprised	O	O
by	O	O
this	O	O
behavior	O	O
.	O	O
As	O	O
I	O	O
mentioned	O	O
above	O	O
,	O	O
we	O	O
had	O	O
been	O	O
talking	O	O
to	O	O
the	O	O
Guava	O	O
developers	O	O
.	O	O
One	O	O
of	O	O
the	O	O
cool	O	O
things	O	O
they	O	O
have	O	O
is	O	O
an	O	O
Idea	O	O
Graveyard	O	O
where	O	O
they	O	O
describe	O	O
features	O	O
that	O	O
they	O	O
decided	O	O
not	O	O
to	O	O
implement	O	O
along	O	O
with	O	O
the	O	O
reasons	O	O
.	O	O
The	O	O
idea	O	O
of	O	O
lazy	O	O
collections	O	O
sounds	O	O
pretty	O	O
cool	O	O
,	O	O
but	O	O
here	O	O
'	O	O
s	O	O
what	O	O
they	O	O
have	O	O
to	O	O
say	O	O
about	O	O
it	O	O
.	O	O
Consider	O	O
a	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
operation	O	O
that	O	O
returns	O	O
a	O	O
List	B-api_mention	B-api_mention
:	O	O
#	O	O
blockquote	O	O
To	O	O
take	O	O
a	O	O
specific	O	O
example	O	O
,	O	O
what	O	O
'	O	O
s	O	O
the	O	O
cost	O	O
of	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
List	B-api_mention	B-api_mention
?	O	O
For	O	O
commonly	O	O
used	O	O
classes	O	O
like	O	O
ArrayList	B-api_mention	B-api_mention
,	O	O
they	O	O
'	O	O
re	O	O
O	O	O
(	O	O
1	O	O
)	O	O
.	O	O
But	O	O
if	O	O
you	O	O
call	O	O
one	O	O
of	O	O
these	O	O
on	O	O
a	O	O
lazily	O	O
-	O	O
filtered	O	O
list	O	O
,	O	O
it	O	O
has	O	O
to	O	O
run	O	O
the	O	O
filter	O	O
over	O	O
the	O	O
backing	O	O
list	O	O
,	O	O
and	O	O
all	O	O
of	O	O
a	O	O
sudden	O	O
these	O	O
operations	O	O
are	O	O
O	O	O
(	O	O
n	O	O
)	O	O
.	O	O
Worse	O	O
,	O	O
it	O	O
has	O	O
to	O	O
traverse	O	O
the	O	O
backing	O	O
list	O	O
on	O	O
every	O	O
operation	O	O
.	O	O
This	O	O
seemed	O	O
to	O	O
us	O	O
to	O	O
be	O	O
too	O	O
much	O	O
laziness	O	O
.	O	O
It	O	O
'	O	O
s	O	O
one	O	O
thing	O	O
to	O	O
set	O	O
up	O	O
some	O	O
operations	O	O
and	O	O
defer	O	O
actual	O	O
execution	O	O
until	O	O
you	O	O
so	O	O
"	O	O
Go	O	O
"	O	O
.	O	O
It	O	O
'	O	O
s	O	O
another	O	O
to	O	O
set	O	O
things	O	O
up	O	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
hides	O	O
a	O	O
potentially	O	O
large	O	O
amount	O	O
of	O	O
recomputation	O	O
.	O	O
In	O	O
proposing	O	O
to	O	O
disallow	O	O
non	O	O
-	O	O
linear	O	O
or	O	O
"	O	O
no	O	O
-	O	O
reuse	O	O
"	O	O
streams	O	O
,	O	O
Paul	O	O
Sandoz	O	O
described	O	O
the	O	O
potential	O	O
consequences	O	O
of	O	O
allowing	O	O
them	O	O
as	O	O
giving	O	O
rise	O	O
to	O	O
"	O	O
unexpected	O	O
or	O	O
confusing	O	O
results	O	O
.	O	O
"	O	O
He	O	O
also	O	O
mentioned	O	O
that	O	O
parallel	O	O
execution	O	O
would	O	O
make	O	O
things	O	O
even	O	O
trickier	O	O
.	O	O
Finally	O	O
,	O	O
I	O	O
'	O	O
d	O	O
add	O	O
that	O	O
a	O	O
pipeline	O	O
operation	O	O
with	O	O
side	O	O
effects	O	O
would	O	O
lead	O	O
to	O	O
difficult	O	O
and	O	O
obscure	O	O
bugs	O	O
if	O	O
the	O	O
operation	O	O
were	O	O
unexpectedly	O	O
executed	O	O
multiple	O	O
times	O	O
,	O	O
or	O	O
at	O	O
least	O	O
a	O	O
different	O	O
number	O	O
of	O	O
times	O	O
than	O	O
the	O	O
programmer	O	O
expected	O	O
.	O	O
(	O	O
But	O	O
Java	O	O
programmers	O	O
don	O	O
'	O	O
t	O	O
write	O	O
lambda	O	O
expressions	O	O
with	O	O
side	O	O
effects	O	O
,	O	O
do	O	O
they	O	O
?	O	O
DO	O	O
THEY	O	O
?	O	O
?	O	O
)	O	O
So	O	O
that	O	O
'	O	O
s	O	O
the	O	O
basic	O	O
rationale	O	O
for	O	O
the	O	O
Java	O	O
8	O	O
Streams	O	O
API	O	O
design	O	O
that	O	O
allows	O	O
one	O	O
-	O	O
shot	O	O
traversal	O	O
and	O	O
that	O	O
requires	O	O
a	O	O
strictly	O	O
linear	O	O
(	O	O
no	O	O
branching	O	O
)	O	O
pipeline	O	O
.	O	O
It	O	O
provides	O	O
consistent	O	O
behavior	O	O
across	O	O
multiple	O	O
different	O	O
stream	O	O
sources	O	O
,	O	O
it	O	O
clearly	O	O
separates	O	O
lazy	O	O
from	O	O
eager	O	O
operations	O	O
,	O	O
and	O	O
it	O	O
provides	O	O
a	O	O
straightforward	O	O
execution	O	O
model	O	O
.	O	O
With	O	O
regard	O	O
to	O	O
IEnumerable	O	O
,	O	O
I	O	O
am	O	O
far	O	O
from	O	O
an	O	O
expert	O	O
on	O	O
C	O	O
#	O	O
and	O	O
.	O	O
NET	O	O
,	O	O
so	O	O
I	O	O
would	O	O
appreciate	O	O
being	O	O
corrected	O	O
(	O	O
gently	O	O
)	O	O
if	O	O
I	O	O
draw	O	O
any	O	O
incorrect	O	O
conclusions	O	O
.	O	O
It	O	O
does	O	O
appear	O	O
,	O	O
however	O	O
,	O	O
that	O	O
IEnumerable	O	O
permits	O	O
multiple	O	O
traversal	O	O
to	O	O
behave	O	O
differently	O	O
with	O	O
different	O	O
sources	O	O
;	O	O
and	O	O
it	O	O
permits	O	O
a	O	O
branching	O	O
structure	O	O
of	O	O
nested	O	O
IEnumerable	O	O
operations	O	O
,	O	O
which	O	O
may	O	O
result	O	O
in	O	O
some	O	O
significant	O	O
recomputation	O	O
.	O	O
While	O	O
I	O	O
appreciate	O	O
that	O	O
different	O	O
systems	O	O
make	O	O
different	O	O
tradeoffs	O	O
,	O	O
these	O	O
are	O	O
two	O	O
characteristics	O	O
that	O	O
we	O	O
sought	O	O
to	O	O
avoid	O	O
in	O	O
the	O	O
design	O	O
of	O	O
the	O	O
Java	O	O
8	O	O
Streams	O	O
API	O	O
.	O	O
The	O	O
quicksort	O	O
example	O	O
given	O	O
by	O	O
the	O	O
OP	O	O
is	O	O
interesting	O	O
,	O	O
puzzling	O	O
,	O	O
and	O	O
I	O	O
'	O	O
m	O	O
sorry	O	O
to	O	O
say	O	O
,	O	O
somewhat	O	O
horrifying	O	O
.	O	O
Calling	O	O
QuickSort	O	O
takes	O	O
an	O	O
IEnumerable	O	O
and	O	O
returns	O	O
an	O	O
IEnumerable	O	O
,	O	O
so	O	O
no	O	O
sorting	O	O
is	O	O
actually	O	O
done	O	O
until	O	O
the	O	O
final	O	O
IEnumerable	O	O
is	O	O
traversed	O	O
.	O	O
What	O	O
the	O	O
call	O	O
seems	O	O
to	O	O
do	O	O
,	O	O
though	O	O
,	O	O
is	O	O
build	O	O
up	O	O
a	O	O
tree	O	O
structure	O	O
of	O	O
IEnumerables	O	O
that	O	O
reflects	O	O
the	O	O
partitioning	O	O
that	O	O
quicksort	O	O
would	O	O
do	O	O
,	O	O
without	O	O
actually	O	O
doing	O	O
it	O	O
.	O	O
(	O	O
This	O	O
is	O	O
lazy	O	O
computation	O	O
,	O	O
after	O	O
all	O	O
.	O	O
)	O	O
If	O	O
the	O	O
source	O	O
has	O	O
N	O	O
elements	O	O
,	O	O
the	O	O
tree	O	O
will	O	O
be	O	O
N	O	O
elements	O	O
wide	O	O
at	O	O
its	O	O
widest	O	O
,	O	O
and	O	O
it	O	O
will	O	O
be	O	O
lg	O	O
(	O	O
N	O	O
)	O	O
levels	O	O
deep	O	O
.	O	O
It	O	O
seems	O	O
to	O	O
me	O	O
-	O	O
-	O	O
and	O	O
once	O	O
again	O	O
,	O	O
I	O	O
'	O	O
m	O	O
not	O	O
a	O	O
C	O	O
#	O	O
or	O	O
.	O	O
NET	O	O
expert	O	O
-	O	O
-	O	O
that	O	O
this	O	O
will	O	O
cause	O	O
certain	O	O
innocuous	O	O
-	O	O
looking	O	O
calls	O	O
,	O	O
such	O	O
as	O	O
pivot	O	O
selection	O	O
via	O	O
ints	O	O
.	B-api_mention	O
First	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
to	O	O
be	O	O
more	O	O
expensive	O	O
than	O	O
they	O	O
look	O	O
.	O	O
At	O	O
the	O	O
first	O	O
level	O	O
,	O	O
of	O	O
course	O	O
,	O	O
it	O	O
'	O	O
s	O	O
O	O	O
(	O	O
1	O	O
)	O	O
.	O	O
But	O	O
consider	O	O
a	O	O
partition	O	O
deep	O	O
in	O	O
the	O	O
tree	O	O
,	O	O
at	O	O
the	O	O
right	O	O
-	O	O
hand	O	O
edge	O	O
.	O	O
To	O	O
compute	O	O
the	O	O
first	O	O
element	O	O
of	O	O
this	O	O
partition	O	O
,	O	O
the	O	O
entire	O	O
source	O	O
has	O	O
to	O	O
be	O	O
traversed	O	O
,	O	O
an	O	O
O	O	O
(	O	O
N	O	O
)	O	O
operation	O	O
.	O	O
But	O	O
since	O	O
the	O	O
partitions	O	O
above	O	O
are	O	O
lazy	O	O
,	O	O
they	O	O
must	O	O
be	O	O
recomputed	O	O
,	O	O
requiring	O	O
O	O	O
(	O	O
lg	O	O
N	O	O
)	O	O
comparisons	O	O
.	O	O
So	O	O
selecting	O	O
the	O	O
pivot	O	O
would	O	O
be	O	O
an	O	O
O	O	O
(	O	O
N	O	O
lg	O	O
N	O	O
)	O	O
operation	O	O
,	O	O
which	O	O
is	O	O
as	O	O
expensive	O	O
as	O	O
an	O	O
entire	O	O
sort	O	O
.	O	O
But	O	O
we	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
sort	O	O
until	O	O
we	O	O
traverse	O	O
the	O	O
returned	O	O
IEnumerable	O	O
.	O	O
In	O	O
the	O	O
standard	O	O
quicksort	O	O
algorithm	O	O
,	O	O
each	O	O
level	O	O
of	O	O
partitioning	O	O
doubles	O	O
the	O	O
number	O	O
of	O	O
partitions	O	O
.	O	O
Each	O	O
partition	O	O
is	O	O
only	O	O
half	O	O
the	O	O
size	O	O
,	O	O
so	O	O
each	O	O
level	O	O
remains	O	O
at	O	O
O	O	O
(	O	O
N	O	O
)	O	O
complexity	O	O
.	O	O
The	O	O
tree	O	O
of	O	O
partitions	O	O
is	O	O
O	O	O
(	O	O
lg	O	O
N	O	O
)	O	O
high	O	O
,	O	O
so	O	O
the	O	O
total	O	O
work	O	O
is	O	O
O	O	O
(	O	O
N	O	O
lg	O	O
N	O	O
)	O	O
.	O	O
With	O	O
the	O	O
tree	O	O
of	O	O
lazy	O	O
IEnumerables	O	O
,	O	O
at	O	O
the	O	O
bottom	O	O
of	O	O
the	O	O
tree	O	O
there	O	O
are	O	O
N	O	O
partitions	O	O
.	O	O
Computing	O	O
each	O	O
partition	O	O
requires	O	O
a	O	O
traversal	O	O
of	O	O
N	O	O
elements	O	O
,	O	O
each	O	O
of	O	O
which	O	O
requires	O	O
lg	O	O
(	O	O
N	O	O
)	O	O
comparisons	O	O
up	O	O
the	O	O
tree	O	O
.	O	O
To	O	O
compute	O	O
all	O	O
the	O	O
partitions	O	O
at	O	O
the	O	O
bottom	O	O
of	O	O
the	O	O
tree	O	O
,	O	O
then	O	O
,	O	O
requires	O	O
O	O	O
(	O	O
N	O	O
^	O	O
2	O	O
lg	O	O
N	O	O
)	O	O
comparisons	O	O
.	O	O
(	O	O
Is	O	O
this	O	O
right	O	O
?	O	O
I	O	O
can	O	O
hardly	O	O
believe	O	O
this	O	O
.	O	O
Somebody	O	O
please	O	O
check	O	O
this	O	O
for	O	O
me	O	O
.	O	O
)	O	O
In	O	O
any	O	O
case	O	O
,	O	O
it	O	O
is	O	O
indeed	O	O
cool	O	O
that	O	O
IEnumerable	O	O
can	O	O
be	O	O
used	O	O
this	O	O
way	O	O
to	O	O
build	O	O
up	O	O
complicated	O	O
structures	O	O
of	O	O
computation	O	O
.	O	O
But	O	O
if	O	O
it	O	O
does	O	O
increase	O	O
the	O	O
computational	O	O
complexity	O	O
as	O	O
much	O	O
as	O	O
I	O	O
think	O	O
it	O	O
does	O	O
,	O	O
it	O	O
would	O	O
seem	O	O
that	O	O
programming	O	O
this	O	O
way	O	O
is	O	O
something	O	O
that	O	O
should	O	O
be	O	O
avoided	O	O
unless	O	O
one	O	O
is	O	O
extremely	O	O
careful	O	O
.	O	O
Question	O	O
-	O	O
32164385	O	O
,	O	O
answer	O	O
-	O	O
32167166	O	O
#	O	O
blockquote	O	O
I	O	O
must	O	O
agree	O	O
with	O	O
other	O	O
answers	O	O
that	O	O
there	O	O
is	O	O
no	O	O
direct	O	O
way	O	O
to	O	O
determine	O	O
that	O	O
method	O	O
will	O	O
modify	O	O
your	O	O
object	O	O
or	O	O
not	O	O
and	O	O
yes	O	O
to	O	O
make	O	O
sure	O	O
that	O	O
method	O	O
can	O	O
not	O	O
modify	O	O
your	O	O
Object	B-api_mention	B-api_mention
you	O	O
all	O	O
have	O	O
to	O	O
do	O	O
it	O	O
is	O	O
from	O	O
your	O	O
side	O	O
.	O	O
#	O	O
blockquote	O	O
Here	O	O
the	O	O
method	O	O
name	O	O
comes	O	O
to	O	O
the	O	O
scene	O	O
.	O	O
Moving	O	O
ahead	O	O
with	O	O
the	O	O
naming	O	O
convention	O	O
of	O	O
method	O	O
we	O	O
have	O	O
to	O	O
take	O	O
a	O	O
look	O	O
at	O	O
some	O	O
method	O	O
declarations	O	O
which	O	O
clearly	O	O
convince	O	O
you	O	O
that	O	O
your	O	O
Object	B-api_mention	B-api_mention
will	O	O
not	O	O
be	O	O
changed	O	O
at	O	O
all	O	O
.	O	O
For	O	O
example	O	O
,	O	O
You	O	O
know	O	O
that	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
will	O	O
not	O	O
change	O	O
your	O	O
actual	O	O
array	O	O
,	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
not	O	O
change	O	O
your	O	O
boo	O	O
Method	O	O
names	O	O
are	O	O
real	O	O
weapons	O	O
to	O	O
provide	O	O
as	O	O
much	O	O
information	O	O
as	O	O
possible	O	O
to	O	O
the	O	O
method	O	O
user	O	O
.	O	O
(	O	O
Yes	O	O
!	O	O
it	O	O
'	O	O
s	O	O
always	O	O
not	O	O
possible	O	O
but	O	O
quite	O	O
a	O	O
good	O	O
practice	O	O
to	O	O
follow	O	O
.	O	O
)	O	O
Let	O	O
'	O	O
s	O	O
consider	O	O
it	O	O
in	O	O
your	O	O
case	O	O
that	O	O
say	O	O
printBoo	O	B-api_mention
will	O	O
only	O	O
print	O	O
,	O	O
copyBoo	O	B-api_mention
will	O	O
only	O	O
copy	O	O
,	O	O
clearBoo	O	O
will	O	O
reset	O	O
all	O	O
attributes	O	O
,	O	O
checkAndCreateNewBoo	O	B-api_mention
will	O	O
check	O	O
your	O	O
boo	O	O
Object	B-api_mention	B-api_mention
and	O	O
create	O	O
new	O	O
if	O	O
required	O	O
.	O	O
So	O	O
,	O	O
ultimately	O	O
if	O	O
we	O	O
can	O	O
use	O	O
them	O	O
in	O	O
a	O	O
proper	O	O
way	O	O
caller	O	O
can	O	O
be	O	O
assured	O	O
with	O	O
the	O	O
fact	O	O
that	O	O
Object	B-api_mention	B-api_mention
will	O	O
remain	O	O
the	O	O
same	O	O
after	O	O
calling	O	O
the	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
22725537	O	O
,	O	O
answer	O	O
-	O	O
36334855	O	O
As	O	O
my	O	O
previous	O	O
answer	O	O
appeared	O	O
not	O	O
to	O	O
be	O	O
very	O	O
popular	O	O
,	O	O
I	O	O
will	O	O
give	O	O
this	O	O
another	O	O
go	O	O
.	O	O
A	O	O
short	O	O
answer	O	O
:	O	O
You	O	O
are	O	O
mostly	O	O
on	O	O
a	O	O
right	O	O
track	O	O
.	O	O
The	O	O
shortest	O	O
code	O	O
to	O	O
get	O	O
to	O	O
your	O	O
desired	O	O
output	O	O
I	O	O
could	O	O
come	O	O
up	O	O
with	O	O
is	O	O
this	O	O
:	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
will	O	O
fit	O	O
all	O	O
your	O	O
requirements	O	O
:	O	O
#	O	O
li	O	O
It	O	O
will	O	O
find	O	O
first	O	O
response	O	O
that	O	O
resolves	O	O
to	O	O
a	O	O
nonempty	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
#	O	O
li	O	O
It	O	O
calls	O	O
this	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
resolve	I-api_mention	O
lazily	O	O
as	O	O
needed	O	O
#	O	O
li	O	O
this	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
resolve	I-api_mention	O
will	O	O
not	O	O
be	O	O
called	O	O
after	O	O
first	O	O
non	O	O
-	O	O
empty	O	O
result	O	O
#	O	O
li	O	O
It	O	O
will	O	O
return	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
Longer	O	O
answer	O	O
The	O	O
only	O	O
modification	O	O
compared	O	O
to	O	O
OP	O	O
initial	O	O
version	O	O
was	O	O
that	O	O
I	O	O
removed	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
before	O	O
call	O	O
to	O	O
.	B-api_mention	B-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
added	O	O
.	B-api_mention	B-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
the	O	O
last	O	O
call	O	O
in	O	O
the	O	O
chain	O	O
.	O	O
This	O	O
has	O	O
a	O	O
nice	O	O
effect	O	O
of	O	O
getting	O	O
rid	O	O
of	O	O
the	O	O
double	O	O
-	O	O
Optional	O	B-api_mention
,	O	O
whenever	O	O
stream	O	O
finds	O	O
an	O	O
actual	O	O
result	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
really	O	O
go	O	O
any	O	O
shorter	O	O
than	O	O
this	O	O
in	O	O
Java	O	O
.	O	O
The	O	O
alternative	O	O
snippet	O	O
of	O	O
code	O	O
using	O	O
the	O	O
more	O	O
conventional	O	O
for	O	O
loop	O	O
technique	O	O
is	O	O
going	O	O
to	O	O
be	O	O
about	O	O
same	O	O
number	O	O
of	O	O
lines	O	O
of	O	O
code	O	O
and	O	O
have	O	O
more	O	O
or	O	O
less	O	O
same	O	O
order	O	O
and	O	O
number	O	O
of	O	O
operations	O	O
you	O	O
need	O	O
to	O	O
perform	O	O
:	O	O
#	O	O
li	O	O
Calling	O	O
this	O	O
.	B-api_mention	O
resolve	I-api_mention	O
,	O	O
#	O	O
li	O	O
filtering	O	O
based	O	O
on	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isPresent	I-api_mention	I-api_mention
#	O	O
li	O	O
returning	O	O
the	O	O
result	O	O
and	O	O
#	O	O
li	O	O
some	O	O
way	O	O
of	O	O
dealing	O	O
with	O	O
negative	O	O
result	O	O
(	O	O
when	O	O
nothing	O	O
was	O	O
found	O	O
)	O	O
Just	O	O
to	O	O
prove	O	O
that	O	O
my	O	O
solution	O	O
works	O	O
as	O	O
advertised	O	O
,	O	O
I	O	O
wrote	O	O
a	O	O
small	O	O
test	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
It	O	O
does	O	O
have	O	O
few	O	O
extra	O	O
lines	O	O
for	O	O
debugging	O	O
and	O	O
verifying	O	O
that	O	O
only	O	O
as	O	O
many	O	O
calls	O	O
to	O	O
resolve	O	O
as	O	O
needed	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Executing	O	O
this	O	O
on	O	O
a	O	O
command	O	O
line	O	O
,	O	O
I	O	O
got	O	O
the	O	O
following	O	O
results	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6094575	O	O
,	O	O
answer	O	O
-	O	O
6094600	O	O
You	O	O
can	O	O
use	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
a	O	O
Class	B-api_mention	B-api_mention
object	O	O
of	O	O
the	O	O
desired	O	O
class	O	O
.	O	O
Then	O	O
use	O	O
getConstructor	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
find	O	O
the	O	O
desired	O	O
Constructor	B-api_mention	O
object	O	O
.	O	O
Finally	O	O
,	O	O
call	O	O
newInstance	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
that	O	O
object	O	O
to	O	O
get	O	O
your	O	O
new	O	O
instance	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
29784337	O	O
The	O	O
other	O	O
answers	O	O
all	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
returns	O	O
an	O	O
unmodifiable	O	O
list	O	O
(	O	O
an	O	O
UnsupportedOperationException	B-api_mention	B-api_mention
is	O	O
thrown	O	O
if	O	O
you	O	O
try	O	O
to	O	O
add	O	O
or	O	O
remove	O	O
an	O	O
element	O	O
)	O	O
.	O	O
To	O	O
get	O	O
a	O	O
mutable	O	O
list	O	O
you	O	O
can	O	O
wrap	O	O
the	O	O
returned	O	O
list	O	O
in	O	O
a	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
as	O	O
a	O	O
couple	O	O
of	O	O
answers	O	O
point	O	O
out	O	O
,	O	O
but	O	O
a	O	O
cleaner	O	O
solution	O	O
is	O	O
to	O	O
use	O	O
Guava	O	O
'	O	O
s	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
available	O	O
since	O	O
at	O	O
least	O	O
Guava	O	O
10	O	O
,	O	O
released	O	O
in	O	O
2011	O	O
)	O	O
.	O	O
For	O	O
example	O	O
:	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
31188231	O	O
,	O	O
answer	O	O
-	O	O
31188818	O	O
Ironically	O	O
default	O	O
methods	O	O
in	O	O
interfaces	O	O
were	O	O
introduced	O	O
to	O	O
allow	O	O
existing	O	O
libraries	O	O
using	O	O
those	O	O
interfaces	O	O
not	O	O
to	O	O
break	O	O
,	O	O
while	O	O
introducing	O	O
massive	O	O
new	O	O
functionality	O	O
in	O	O
the	O	O
interfaces	O	O
.	O	O
(	O	O
backward	O	O
compatibility	O	O
.	O	O
)	O	O
Conflicts	O	O
like	O	O
that	O	O
sort	O	O
method	O	O
might	O	O
arise	O	O
.	O	O
Something	O	O
to	O	O
pay	O	O
for	O	O
the	O	O
extra	O	O
functionality	O	O
.	O	O
In	O	O
your	O	O
case	O	O
also	O	O
something	O	O
to	O	O
investigate	O	O
(	O	O
should	O	O
new	O	O
functionality	O	O
be	O	O
used	O	O
instead	O	O
?	O	O
)	O	O
.	O	O
Java	O	O
forward	O	O
compatibility	O	O
breaks	O	O
are	O	O
little	O	O
,	O	O
more	O	O
in	O	O
its	O	O
typing	O	O
system	O	O
,	O	O
which	O	O
was	O	O
constantly	O	O
enlarged	O	O
.	O	O
First	O	O
with	O	O
generic	O	O
types	O	O
and	O	O
now	O	O
with	O	O
inferred	O	O
types	O	O
from	O	O
functional	O	O
interfaces	O	O
.	O	O
From	O	O
version	O	O
to	O	O
version	O	O
and	O	O
from	O	O
compiler	O	O
to	O	O
compiler	O	O
there	O	O
were	O	O
slight	O	O
differences	O	O
.	O	O
Question	O	O
-	O	O
6608795	O	O
,	O	O
answer	O	O
-	O	O
22327270	O	O
I	O	O
tried	O	O
reading	O	O
from	O	O
input1	O	O
.	O	O
txt	O	O
which	O	O
was	O	O
inside	O	O
one	O	O
of	O	O
my	O	O
packages	O	O
together	O	O
with	O	O
the	O	O
class	O	O
which	O	O
was	O	O
trying	O	O
to	O	O
read	O	O
it	O	O
.	O	O
The	O	O
following	O	O
works	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
most	O	O
important	O	O
part	O	O
was	O	O
to	O	O
call	O	O
getPath	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
want	O	O
the	O	O
correct	O	O
path	O	O
name	O	O
in	O	O
String	B-api_mention	B-api_mention
format	O	O
.	O	O
DO	O	O
NOT	O	O
USE	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
because	O	O
it	O	O
will	O	O
add	O	O
some	O	O
extra	O	O
formatting	O	O
text	O	O
which	O	O
will	O	O
TOTALLY	O	O
MESS	O	O
UP	O	O
the	O	O
fileName	O	O
(	O	O
you	O	O
can	O	O
try	O	O
it	O	O
and	O	O
see	O	O
the	O	O
print	O	O
out	O	O
)	O	O
.	O	O
Spent	O	O
2	O	O
hours	O	O
debugging	O	O
this	O	O
.	O	O
.	O	O
.	O	O
:	O	O
(	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
16635489	O	O
The	O	O
advantage	O	O
comes	O	O
into	O	O
account	O	O
when	O	O
the	O	O
operations	O	O
can	O	O
be	O	O
executed	O	O
in	O	O
parallel	O	O
.	O	O
(	O	O
See	O	O
#	O	O
a	O	O
-	O	O
the	O	O
section	O	O
about	O	O
internal	O	O
and	O	O
external	O	O
iteration	O	O
)	O	O
#	O	O
li	O	O
The	O	O
main	O	O
advantage	O	O
from	O	O
my	O	O
point	O	O
of	O	O
view	O	O
is	O	O
that	O	O
the	O	O
implementation	O	O
of	O	O
what	O	O
is	O	O
to	O	O
be	O	O
done	O	O
within	O	O
the	O	O
loop	O	O
can	O	O
be	O	O
defined	O	O
without	O	O
having	O	O
to	O	O
decide	O	O
if	O	O
it	O	O
will	O	O
be	O	O
executed	O	O
in	O	O
parallel	O	O
or	O	O
sequential	O	O
#	O	O
li	O	O
If	O	O
you	O	O
want	O	O
your	O	O
loop	O	O
to	O	O
be	O	O
executed	O	O
in	O	O
parallel	O	O
you	O	O
could	O	O
simply	O	O
write	O	O
joins	O	O
.	B-api_mention	B-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
will	O	O
have	O	O
to	O	O
write	O	O
some	O	O
extra	O	O
code	O	O
for	O	O
thread	O	O
handling	O	O
etc	O	O
.	O	O
Note	O	O
:	O	O
for	O	O
my	O	O
answer	O	O
I	O	O
assumed	O	O
joins	O	O
implementing	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Stream	I-api_mention	I-api_mention
interface	O	O
.	O	O
If	O	O
joins	O	O
implements	O	O
only	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Iterable	I-api_mention	I-api_mention
interface	O	O
this	O	O
is	O	O
no	O	O
longer	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
7348711	O	O
Which	O	O
of	O	O
the	O	O
following	O	O
is	O	O
the	O	O
best	O	O
and	O	O
most	O	O
portable	O	O
way	O	O
to	O	O
get	O	O
the	O	O
hostname	O	O
of	O	O
the	O	O
current	O	O
computer	O	O
in	O	O
Java	O	O
?	O	O
Runtime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getRuntime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
exec	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
vs	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
20129762	O	O
In	O	O
Java	O	O
8	O	O
we	O	O
have	O	O
the	O	O
class	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
curiously	O	O
have	O	O
a	O	O
method	O	O
Iterator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
iterator	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
So	O	O
you	O	O
would	O	O
expect	O	O
it	O	O
to	O	O
implement	O	O
interface	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
requires	O	O
exactly	O	O
this	O	O
method	O	O
,	O	O
but	O	O
that	O	O
'	O	O
s	O	O
not	O	O
the	O	O
case	O	O
.	O	O
When	O	O
I	O	O
want	O	O
to	O	O
iterate	O	O
over	O	O
a	O	O
Stream	B-api_mention	B-api_mention
using	O	O
a	O	O
foreach	O	O
loop	O	O
,	O	O
I	O	O
have	O	O
to	O	O
do	O	O
something	O	O
like	O	O
#	O	O
pre	O	O
Am	O	O
I	O	O
missing	O	O
something	O	O
here	O	O
?	O	O
Question	O	O
-	O	O
5439529	O	O
,	O	O
answer	O	O
-	O	O
15357940	O	O
Or	O	O
simply	O	O
mystring	O	O
.	B-api_mention	B-api_mention
matches	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
though	O	O
it	O	O
would	O	O
return	O	O
true	O	O
for	O	O
numbers	O	O
larger	O	O
than	O	O
an	O	O
int	O	O
Question	O	O
-	O	O
32693704	O	O
,	O	O
answer	O	O
-	O	O
32745612	O	O
For	O	O
me	O	O
,	O	O
the	O	O
reason	O	O
is	O	O
a	O	O
likely	O	O
performance	O	O
inprovement	O	O
,	O	O
at	O	O
a	O	O
negligible	O	O
cost	O	O
in	O	O
terms	O	O
of	O	O
code	O	O
clarity	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
implementation	O	O
of	O	O
the	O	O
fill	O	O
method	O	O
is	O	O
trivial	O	O
,	O	O
a	O	O
simple	O	O
for	O	O
-	O	O
loop	O	O
setting	O	O
each	O	O
array	O	O
element	O	O
to	O	O
null	O	O
.	O	O
So	O	O
,	O	O
replacing	O	O
a	O	O
call	O	O
to	O	O
it	O	O
with	O	O
the	O	O
actual	O	O
implementation	O	O
does	O	O
not	O	O
cause	O	O
any	O	O
significant	O	O
degradation	O	O
in	O	O
the	O	O
clarity	O	O
/	O	O
conciseness	O	O
of	O	O
the	O	O
caller	O	O
method	O	O
.	O	O
The	O	O
potential	O	O
performance	O	O
benefits	O	O
are	O	O
not	O	O
so	O	O
insignificant	O	O
,	O	O
if	O	O
you	O	O
consider	O	O
everything	O	O
that	O	O
is	O	O
involved	O	O
:	O	O
#	O	O
li	O	O
There	O	O
will	O	O
be	O	O
no	O	O
need	O	O
for	O	O
the	O	O
JVM	O	O
to	O	O
resolve	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
,	O	O
plus	O	O
loading	O	O
and	O	O
initializing	O	O
it	O	O
if	O	O
needed	O	O
.	O	O
This	O	O
is	O	O
a	O	O
non	O	O
-	O	O
trivial	O	O
process	O	O
where	O	O
the	O	O
JVM	O	O
performs	O	O
several	O	O
steps	O	O
.	O	O
Firstly	O	O
,	O	O
it	O	O
checks	O	O
the	O	O
class	O	O
loader	O	O
to	O	O
see	O	O
if	O	O
the	O	O
class	O	O
is	O	O
already	O	O
loaded	O	O
,	O	O
and	O	O
this	O	O
happens	O	O
every	O	O
time	O	O
a	O	O
method	O	O
is	O	O
called	O	O
;	O	O
there	O	O
are	O	O
optimizations	O	O
involved	O	O
here	O	O
,	O	O
of	O	O
course	O	O
,	O	O
but	O	O
it	O	O
still	O	O
takes	O	O
some	O	O
effort	O	O
.	O	O
If	O	O
the	O	O
class	O	O
is	O	O
not	O	O
loaded	O	O
,	O	O
the	O	O
JVM	O	O
will	O	O
need	O	O
to	O	O
go	O	O
through	O	O
the	O	O
expensive	O	O
process	O	O
of	O	O
loading	O	O
it	O	O
,	O	O
verifying	O	O
the	O	O
bytecode	O	O
,	O	O
resolving	O	O
other	O	O
necessary	O	O
dependencies	O	O
,	O	O
and	O	O
finally	O	O
performing	O	O
static	O	O
initialization	O	O
of	O	O
the	O	O
class	O	O
(	O	O
which	O	O
can	O	O
be	O	O
arbitrarily	O	O
expensive	O	O
)	O	O
.	O	O
Given	O	O
that	O	O
HashMap	B-api_mention	B-api_mention
is	O	O
such	O	O
a	O	O
core	O	O
class	O	O
,	O	O
and	O	O
that	O	O
Arrays	B-api_mention	B-api_mention
is	O	O
such	O	O
a	O	O
huge	O	O
class	O	O
(	O	O
3600	O	O
+	O	O
lines	O	O
)	O	O
,	O	O
avoiding	O	O
these	O	O
costs	O	O
may	O	O
add	O	O
up	O	O
to	O	O
noticeable	O	O
savings	O	O
.	O	O
#	O	O
li	O	O
Since	O	O
there	O	O
is	O	O
no	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
call	O	O
,	O	O
the	O	O
JVM	O	O
won	O	O
'	O	O
t	O	O
have	O	O
to	O	O
decide	O	O
whether	O	O
/	O	O
when	O	O
to	O	O
inline	O	O
the	O	O
method	O	O
into	O	O
the	O	O
caller	O	O
'	O	O
s	O	O
body	O	O
.	O	O
Since	O	O
HashMap	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
tends	O	O
to	O	O
get	O	O
called	O	O
a	O	O
lot	O	O
,	O	O
the	O	O
JVM	O	O
will	O	O
eventually	O	O
perform	O	O
the	O	O
inlining	O	O
,	O	O
which	O	O
requires	O	O
JIT	O	O
recompilation	O	O
of	O	O
the	O	O
clear	O	O
method	O	O
.	O	O
With	O	O
no	O	O
method	O	O
calls	O	O
,	O	O
clear	O	O
will	O	O
always	O	O
run	O	O
at	O	O
top	O	O
-	O	O
speed	O	O
(	O	O
once	O	O
initially	O	O
JITed	O	O
)	O	O
.	O	O
Another	O	O
benefit	O	O
of	O	O
no	O	O
longer	O	O
calling	O	O
methods	O	O
in	O	O
Arrays	B-api_mention	B-api_mention
is	O	O
that	O	O
it	O	O
simplifies	O	O
the	O	O
dependency	O	O
graph	O	O
inside	O	O
the	O	O
java	O	O
.	O	O
util	O	O
package	O	O
,	O	O
since	O	O
one	O	O
dependency	O	O
is	O	O
removed	O	O
.	O	O
Question	O	O
-	O	O
7935858	O	O
,	O	O
answer	O	O
-	O	O
7935873	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
splits	O	O
on	O	O
regular	O	O
expressions	O	O
,	O	O
and	O	O
.	O	O
in	O	O
a	O	O
regular	O	O
expression	O	O
means	O	O
"	O	O
any	O	O
character	O	O
"	O	O
.	O	O
Try	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
12862659	O	O
,	O	O
answer	O	O
-	O	O
12862662	O	O
use	O	O
the	O	O
second	O	O
argument	O	O
on	O	O
the	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
method	O	O
,	O	O
as	O	O
in	O	O
:	O	O
verify	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
someMethod	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
Question	O	O
-	O	O
8189466	O	O
,	O	O
answer	O	O
-	O	O
8189786	O	O
Here	O	O
'	O	O
s	O	O
why	O	O
:	O	O
As	O	O
it	O	O
is	O	O
says	O	O
in	O	O
the	O	O
Javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
check	O	O
is	O	O
done	O	O
in	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
the	O	O
iterator	O	O
(	O	O
as	O	O
you	O	O
can	O	O
see	O	O
by	O	O
the	O	O
stacktrace	O	O
)	O	O
.	O	O
But	O	O
we	O	O
will	O	O
reach	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
only	O	O
if	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
delivered	O	O
true	O	O
,	O	O
which	O	O
is	O	O
what	O	O
is	O	O
called	O	O
by	O	O
the	O	O
for	O	O
each	O	O
to	O	O
check	O	O
if	O	O
the	O	O
boundary	O	O
is	O	O
met	O	O
.	O	O
In	O	O
your	O	O
remove	O	O
method	O	O
,	O	O
when	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
if	O	O
it	O	O
needs	O	O
to	O	O
return	O	O
another	O	O
element	O	O
,	O	O
it	O	O
will	O	O
see	O	O
that	O	O
it	O	O
returned	O	O
two	O	O
elements	O	O
,	O	O
and	O	O
now	O	O
after	O	O
one	O	O
element	O	O
was	O	O
removed	O	O
the	O	O
list	O	O
only	O	O
contains	O	O
two	O	O
elements	O	O
.	O	O
So	O	O
all	O	O
is	O	O
peachy	O	O
and	O	O
we	O	O
are	O	O
done	O	O
with	O	O
iterating	O	O
.	O	O
The	O	O
check	O	O
for	O	O
concurrent	O	O
modifications	O	O
does	O	O
not	O	O
occur	O	O
,	O	O
as	O	O
this	O	O
is	O	O
done	O	O
in	O	O
the	O	O
next	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
which	O	O
is	O	O
never	O	O
called	O	O
.	O	O
Next	O	O
we	O	O
get	O	O
to	O	O
the	O	O
second	O	O
loop	O	O
.	O	O
After	O	O
we	O	O
remove	O	O
the	O	O
second	O	O
number	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
method	O	O
will	O	O
check	O	O
again	O	O
if	O	O
can	O	O
return	O	O
more	O	O
values	O	O
.	O	O
It	O	O
has	O	O
returned	O	O
two	O	O
values	O	O
already	O	O
,	O	O
but	O	O
the	O	O
list	O	O
now	O	O
only	O	O
contains	O	O
one	O	O
.	O	O
But	O	O
the	O	O
code	O	O
here	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
1	O	O
!	O	O
=	O	O
2	O	O
,	O	O
so	O	O
we	O	O
continue	O	O
to	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
now	O	O
realizes	O	O
that	O	O
someone	O	O
has	O	O
been	O	O
messing	O	O
with	O	O
the	O	O
list	O	O
and	O	O
fires	O	O
the	O	O
exception	O	O
.	O	O
Hope	O	O
that	O	O
clears	O	O
your	O	O
question	O	O
up	O	O
.	O	O
Question	O	O
-	O	O
5439529	O	O
,	O	O
answer	O	O
-	O	O
5439543	O	O
You	O	O
can	O	O
use	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
the	O	O
integer	O	O
from	O	O
the	O	O
string	O	O
,	O	O
and	O	O
catch	O	O
the	O	O
exception	O	O
if	O	O
it	O	O
is	O	O
not	O	O
a	O	O
parsable	O	O
int	O	O
.	O	O
You	O	O
want	O	O
to	O	O
be	O	O
sure	O	O
to	O	O
catch	O	O
the	O	O
NumberFormatException	B-api_mention	B-api_mention
it	O	O
can	O	O
throw	O	O
.	O	O
It	O	O
may	O	O
be	O	O
helpful	O	O
to	O	O
note	O	O
that	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
an	O	O
Integer	B-api_mention	O
object	O	O
,	O	O
not	O	O
the	O	O
primitive	O	O
int	O	O
.	O	O
Question	O	O
-	O	O
19431234	O	O
,	O	O
answer	O	O
-	O	O
23526153	O	O
Everything	O	O
is	O	O
here	O	O
:	O	O
#	O	O
a	O	O
The	O	O
answer	O	O
with	O	O
"	O	O
round	O	O
-	O	O
tripping	O	O
"	O	O
is	O	O
not	O	O
exact	O	O
:	O	O
when	O	O
you	O	O
do	O	O
LocalDateTime	B-api_mention	B-api_mention
ldt	O	O
=	O	O
LocalDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofInstant	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
if	O	O
your	O	O
system	O	O
timezone	O	O
is	O	O
not	O	O
UTC	O	O
/	O	O
GMT	O	O
,	O	O
you	O	O
change	O	O
the	O	O
time	O	O
!	O	O
Question	O	O
-	O	O
19431234	O	O
,	O	O
answer	O	O
-	O	O
23885950	O	O
Short	O	O
answer	O	O
:	O	O
#	O	O
pre	O	O
Explanation	O	O
:	O	O
(	O	O
based	O	O
on	O	O
this	O	O
question	O	O
about	O	O
LocalDate	B-api_mention	B-api_mention
)	O	O
Despite	O	O
its	O	O
name	O	O
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
represents	O	O
an	O	O
instant	O	O
on	O	O
the	O	O
time	O	O
-	O	O
line	O	O
,	O	O
not	O	O
a	O	O
"	O	O
date	O	O
"	O	O
.	O	O
The	O	O
actual	O	O
data	O	O
stored	O	O
within	O	O
the	O	O
object	O	O
is	O	O
a	O	O
long	O	O
count	O	O
of	O	O
milliseconds	O	O
since	O	O
1970	O	O
-	O	O
01	O	O
-	O	O
01T00	O	O
:	O	O
00Z	O	O
(	O	O
midnight	O	O
at	O	O
the	O	O
start	O	O
of	O	O
1970	O	O
GMT	O	O
/	O	O
UTC	O	O
)	O	O
.	O	O
The	O	O
equivalent	O	O
class	O	O
to	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
in	O	O
JSR	O	O
-	O	O
310	O	O
is	O	O
Instant	B-api_mention	O
,	O	O
thus	O	O
there	O	O
are	O	O
convenient	O	O
methods	O	O
to	O	O
provide	O	O
the	O	O
conversion	O	O
to	O	O
and	O	O
fro	O	O
:	O	O
#	O	O
pre	O	O
A	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
instance	O	O
has	O	O
no	O	O
concept	O	O
of	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
This	O	O
might	O	O
seem	O	O
strange	O	O
if	O	O
you	O	O
call	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
,	O	O
because	O	O
the	O	O
toString	B-api_mention	B-api_mention
is	O	O
relative	O	O
to	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
However	O	O
that	O	O
method	O	O
actually	O	O
uses	O	O
Java	O	O
'	O	O
s	O	O
default	O	O
time	O	O
-	O	O
zone	O	O
on	O	O
the	O	O
fly	O	O
to	O	O
provide	O	O
the	O	O
string	O	O
.	O	O
The	O	O
time	O	O
-	O	O
zone	O	O
is	O	O
not	O	O
part	O	O
of	O	O
the	O	O
actual	O	O
state	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	O	O
An	O	O
Instant	B-api_mention	O
also	O	O
does	O	O
not	O	O
contain	O	O
any	O	O
information	O	O
about	O	O
the	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
Thus	O	O
,	O	O
to	O	O
convert	O	O
from	O	O
an	O	O
Instant	O	O
to	O	O
a	O	O
local	O	O
date	O	O
-	O	O
time	O	O
it	O	O
is	O	O
necessary	O	O
to	O	O
specify	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
This	O	O
might	O	O
be	O	O
the	O	O
default	O	O
zone	O	O
-	O	O
ZoneId	B-api_mention	O
.	I-api_mention	B-api_mention
systemDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
or	O	O
it	O	O
might	O	O
be	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
that	O	O
your	O	O
application	O	O
controls	O	O
,	O	O
such	O	O
as	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
from	O	O
user	O	O
preferences	O	O
.	O	O
LocalDateTime	B-api_mention	B-api_mention
has	O	O
a	O	O
convenient	O	O
factory	O	O
method	O	O
that	O	O
takes	O	O
both	O	O
the	O	O
instant	O	O
and	O	O
time	O	O
-	O	O
zone	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
reverse	O	O
,	O	O
the	O	O
LocalDateTime	B-api_mention	B-api_mention
the	O	O
time	O	O
-	O	O
zone	O	O
is	O	O
specified	O	O
by	O	O
calling	O	O
the	O	O
atZone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
ZonedDateTime	B-api_mention	B-api_mention
can	O	O
then	O	O
be	O	O
converted	O	O
directly	O	O
to	O	O
an	O	O
Instant	B-api_mention	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
the	O	O
conversion	O	O
from	O	O
LocalDateTime	B-api_mention	B-api_mention
to	O	O
ZonedDateTime	B-api_mention	B-api_mention
has	O	O
the	O	O
potential	O	O
to	O	O
introduce	O	O
unexpected	O	O
behaviour	O	O
.	O	O
This	O	O
is	O	O
because	O	O
not	O	O
every	O	O
local	O	O
date	O	O
-	O	O
time	O	O
exists	O	O
due	O	O
to	O	O
Daylight	O	O
Saving	O	O
Time	O	O
.	O	O
In	O	O
autumn	O	O
/	O	O
fall	O	O
,	O	O
there	O	O
is	O	O
an	O	O
overlap	O	O
in	O	O
the	O	O
local	O	O
time	O	O
-	O	O
line	O	O
where	O	O
the	O	O
same	O	O
local	O	O
date	O	O
-	O	O
time	O	O
occurs	O	O
twice	O	O
.	O	O
In	O	O
spring	O	O
,	O	O
there	O	O
is	O	O
a	O	O
gap	O	O
,	O	O
where	O	O
an	O	O
hour	O	O
disappears	O	O
.	O	O
See	O	O
the	O	O
Javadoc	O	O
of	O	O
atZone	B-api_mention	O
(	I-api_mention	O
ZoneId	I-api_mention	O
)	I-api_mention	O
for	O	O
more	O	O
the	O	O
definition	O	O
of	O	O
what	O	O
the	O	O
conversion	O	O
will	O	O
do	O	O
.	O	O
Summary	O	O
,	O	O
if	O	O
you	O	O
round	O	O
-	O	O
trip	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
to	O	O
a	O	O
LocalDateTime	B-api_mention	B-api_mention
and	O	O
back	O	O
to	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
you	O	O
may	O	O
end	O	O
up	O	O
with	O	O
a	O	O
different	O	O
instant	O	O
due	O	O
to	O	O
Daylight	O	O
Saving	O	O
Time	O	O
.	O	O
Question	O	O
-	O	O
18448671	O	O
,	O	O
answer	O	O
-	O	O
18448699	O	O
Use	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
and	O	O
call	O	O
remove	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
16148575	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
build	O	O
a	O	O
HashMap	B-api_mention	B-api_mention
which	O	O
will	O	O
have	O	O
integer	O	O
as	O	O
keys	O	O
and	O	O
objects	O	O
as	O	O
values	O	O
.	O	O
My	O	O
syntax	O	O
is	O	O
:	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
However	O	O
,	O	O
the	O	O
error	O	O
returned	O	O
is	O	O
-	O	O
Syntax	O	O
error	O	O
on	O	O
token	O	O
"	O	O
int	O	O
"	O	O
,	O	O
Dimensions	O	O
expected	O	O
after	O	O
this	O	O
token	O	O
-	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
why	O	O
I	O	O
should	O	O
add	O	O
a	O	O
dimension	O	O
(	O	O
ie	O	O
:	O	O
making	O	O
the	O	O
int	O	O
into	O	O
an	O	O
array	O	O
)	O	O
since	O	O
I	O	O
only	O	O
need	O	O
to	O	O
store	O	O
a	O	O
digit	O	O
as	O	O
key	O	O
.	O	O
What	O	O
could	O	O
I	O	O
do	O	O
?	O	O
Thanks	O	O
in	O	O
advance	O	O
!	O	O
:	O	O
)	O	O
Question	O	O
-	O	O
4812570	O	O
How	O	O
can	O	O
I	O	O
get	O	O
the	O	O
e	O	O
.	B-api_mention	B-api_mention
printStackTrace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
store	O	O
it	O	O
into	O	O
a	O	O
String	B-api_mention	B-api_mention
variable	O	O
?	O	O
I	O	O
want	O	O
to	O	O
use	O	O
the	O	O
string	O	O
generated	O	O
by	O	O
e	O	O
.	B-api_mention	B-api_mention
printStackTrace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
later	O	O
in	O	O
my	O	O
program	O	O
.	O	O
I	O	O
'	O	O
m	O	O
still	O	O
new	O	O
to	O	O
Java	O	O
so	O	O
I	O	O
'	O	O
m	O	O
not	O	O
too	O	O
familiar	O	O
with	O	O
StringWriter	B-api_mention	B-api_mention
that	O	O
I	O	O
think	O	O
will	O	O
be	O	O
the	O	O
solution	O	O
.	O	O
Or	O	O
if	O	O
you	O	O
have	O	O
any	O	O
other	O	O
ideas	O	O
please	O	O
let	O	O
me	O	O
know	O	O
.	O	O
Thanks	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
18496449	O	O
The	O	O
first	O	O
style	O	O
is	O	O
the	O	O
one	O	O
suggested	O	O
by	O	O
Oracle	O	O
.	O	O
BufferedWriter	B-api_mention	B-api_mention
doesn	O	O
'	O	O
t	O	O
throw	O	O
checked	O	O
exceptions	O	O
,	O	O
so	O	O
if	O	O
any	O	O
exception	O	O
is	O	O
thrown	O	O
,	O	O
the	O	O
program	O	O
is	O	O
not	O	O
expected	O	O
to	O	O
recover	O	O
from	O	O
it	O	O
,	O	O
making	O	O
resource	O	O
recover	O	O
mostly	O	O
moot	O	O
.	O	O
Mostly	O	O
because	O	O
it	O	O
could	O	O
happen	O	O
in	O	O
a	O	O
thread	O	O
,	O	O
with	O	O
the	O	O
thread	O	O
dieing	O	O
but	O	O
the	O	O
program	O	O
still	O	O
continuing	O	O
-	O	O
-	O	O
say	O	O
,	O	O
there	O	O
was	O	O
a	O	O
temporary	O	O
memory	O	O
outage	O	O
that	O	O
wasn	O	O
'	O	O
t	O	O
long	O	O
enough	O	O
to	O	O
seriously	O	O
impair	O	O
the	O	O
rest	O	O
of	O	O
the	O	O
program	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
rather	O	O
corner	O	O
case	O	O
,	O	O
though	O	O
,	O	O
and	O	O
if	O	O
it	O	O
happens	O	O
often	O	O
enough	O	O
to	O	O
make	O	O
resource	O	O
leak	O	O
a	O	O
problem	O	O
,	O	O
the	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
is	O	O
the	O	O
least	O	O
of	O	O
your	O	O
problems	O	O
.	O	O
Question	O	O
-	O	O
4576352	O	O
,	O	O
answer	O	O
-	O	O
4576367	O	O
using	O	O
public	O	O
String	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
work	O	O
usage	O	O
would	O	O
be	O	O
str	O	O
.	B-api_mention	B-api_mention
replace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
executing	O	O
StringLiteral	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
returns	O	O
:	O	O
lakjsdf	O	O
xx	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16149127	O	O
You	O	O
can	O	O
'	O	O
t	O	O
use	O	O
a	O	O
primitive	O	O
because	O	O
HashMap	B-api_mention	B-api_mention
use	O	O
object	O	O
internally	O	O
for	O	O
the	O	O
key	O	O
.	O	O
So	O	O
you	O	O
can	O	O
only	O	O
use	O	O
an	O	O
object	O	O
that	O	O
inherits	O	O
from	O	O
Object	B-api_mention	B-api_mention
(	O	O
that	O	O
is	O	O
any	O	O
object	O	O
)	O	O
.	O	O
That	O	O
is	O	O
the	O	O
function	O	O
put	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
HashMap	B-api_mention	B-api_mention
and	O	O
as	O	O
you	O	O
can	O	O
see	O	O
it	O	O
uses	O	O
Object	B-api_mention	B-api_mention
for	O	O
K	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
expression	O	O
"	O	O
k	O	O
=	O	O
e	O	O
.	O	O
key	O	O
"	O	O
should	O	O
make	O	O
it	O	O
clear	O	O
.	O	O
I	O	O
suggest	O	O
to	O	O
use	O	O
a	O	O
wrapper	O	O
like	O	O
Integer	B-api_mention	B-api_mention
and	O	O
autoboxing	O	O
.	O	O
Question	O	O
-	O	O
32693704	O	O
,	O	O
answer	O	O
-	O	O
32752970	O	O
I	O	O
will	O	O
try	O	O
to	O	O
summarize	O	O
three	O	O
moreless	O	O
reasonable	O	O
versions	O	O
which	O	O
were	O	O
proposed	O	O
in	O	O
comments	O	O
.	O	O
@	O	O
Holger	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
the	O	O
most	O	O
easy	O	O
thing	O	O
to	O	O
test	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
compile	O	O
such	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
Run	O	O
it	O	O
with	O	O
java	O	O
-	O	O
verbose	O	O
:	O	O
class	O	O
HashMapTest	O	B-api_mention
.	O	O
This	O	O
will	O	O
print	O	O
the	O	O
class	O	O
loading	O	O
events	O	O
as	O	O
they	O	O
occur	O	O
.	O	O
With	O	O
JDK	O	O
1	O	O
.	O	O
8	O	O
.	O	O
0	O	O
_	O	O
60	O	O
I	O	O
see	O	O
more	O	O
than	O	O
400	O	O
classes	O	O
loaded	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
HashMap	B-api_mention	B-api_mention
is	O	O
loaded	O	O
long	O	O
before	O	O
application	O	O
code	O	O
and	O	O
Arrays	B-api_mention	B-api_mention
is	O	O
loaded	O	O
only	O	O
14	O	O
classes	O	O
after	O	O
HashMap	B-api_mention	B-api_mention
.	O	O
The	O	O
HashMap	B-api_mention	B-api_mention
load	O	O
is	O	O
triggered	O	O
by	O	O
sun	B-api_mention	O
.	I-api_mention	O
reflect	I-api_mention	O
.	I-api_mention	O
Reflection	I-api_mention	O
initialization	O	O
as	O	O
it	O	O
has	O	O
HashMap	B-api_mention	B-api_mention
static	O	O
fields	O	O
.	O	O
The	O	O
Arrays	B-api_mention	B-api_mention
load	O	O
is	O	O
likely	O	O
to	O	O
be	O	O
triggered	O	O
by	O	O
WeakHashMap	O	B-api_mention
load	O	O
which	O	O
actually	O	O
has	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
in	O	O
the	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
WeakHashMap	B-api_mention	B-api_mention
load	O	O
is	O	O
triggered	O	O
by	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
ClassValue	I-api_mention	I-api_mention
$	I-api_mention	O
ClassValueMap	I-api_mention	B-api_mention
which	O	O
extends	O	O
WeakHashMap	B-api_mention	B-api_mention
.	O	O
The	O	O
ClassValueMap	B-api_mention	B-api_mention
is	O	O
present	O	O
in	O	O
every	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Class	I-api_mention	I-api_mention
instance	O	O
.	O	O
So	O	O
to	O	O
me	O	O
seems	O	O
that	O	O
without	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
the	O	O
JDK	O	O
cannot	O	O
be	O	O
initialized	O	O
at	O	O
all	O	O
.	O	O
Also	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
static	O	O
initializer	O	O
is	O	O
very	O	O
short	O	O
,	O	O
it	O	O
only	O	O
initializes	O	O
the	O	O
assertion	O	O
mechanism	O	O
.	O	O
This	O	O
mechanism	O	O
is	O	O
used	O	O
in	O	O
many	O	O
other	O	O
classes	O	O
(	O	O
including	O	O
,	O	O
for	O	O
example	O	O
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Throwable	I-api_mention	I-api_mention
which	O	O
is	O	O
loaded	O	O
very	O	O
early	O	O
)	O	O
.	O	O
No	O	O
other	O	O
static	O	O
initialization	O	O
steps	O	O
are	O	O
performed	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Arrays	I-api_mention	I-api_mention
.	O	O
Thus	O	O
@	O	O
Holger	O	O
version	O	O
seems	O	O
incorrect	O	O
to	O	O
me	O	O
.	O	O
Here	O	O
we	O	O
also	O	O
found	O	O
very	O	O
interesting	O	O
thing	O	O
.	O	O
The	O	O
WeakHashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
still	O	O
uses	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
.	O	O
It	O	O
'	O	O
s	O	O
interesting	O	O
when	O	O
it	O	O
appeared	O	O
there	O	O
,	O	O
but	O	O
unfortunately	O	O
this	O	O
goes	O	O
to	O	O
prehistoric	O	O
times	O	O
(	O	O
it	O	O
was	O	O
already	O	O
there	O	O
in	O	O
the	O	O
very	O	O
first	O	O
public	O	O
OpenJDK	O	O
repository	O	O
)	O	O
.	O	O
Next	O	O
,	O	O
@	O	O
MarcoTopolnik	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
was	O	O
actually	O	O
surprising	O	O
for	O	O
me	O	O
that	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
is	O	O
not	O	O
directly	O	O
intrinsified	O	O
(	O	O
see	O	O
intrinsic	O	O
list	O	O
generated	O	O
by	O	O
@	O	O
apangin	O	O
)	O	O
.	O	O
Seems	O	O
that	O	O
such	O	O
loop	O	O
can	O	O
be	O	O
recognized	O	O
and	O	O
vectorized	O	O
by	O	O
JVM	O	O
without	O	O
explicit	O	O
intrinsic	O	O
handling	O	O
.	O	O
So	O	O
it	O	O
'	O	O
s	O	O
true	O	O
that	O	O
extra	O	O
call	O	O
can	O	O
be	O	O
not	O	O
inlined	O	O
in	O	O
very	O	O
specific	O	O
cases	O	O
(	O	O
for	O	O
example	O	O
if	O	O
MaxInlineLevel	O	B-api_mention
limit	O	O
is	O	O
reached	O	O
)	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
it	O	O
'	O	O
s	O	O
very	O	O
rare	O	O
situation	O	O
and	O	O
it	O	O
'	O	O
s	O	O
only	O	O
a	O	O
single	O	O
call	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
a	O	O
call	O	O
inside	O	O
loop	O	O
,	O	O
and	O	O
it	O	O
'	O	O
s	O	O
a	O	O
static	O	O
,	O	O
not	O	O
virtual	O	O
/	O	O
interface	O	O
call	O	O
,	O	O
thus	O	O
the	O	O
performance	O	O
improvement	O	O
could	O	O
be	O	O
only	O	O
marginal	O	O
and	O	O
only	O	O
in	O	O
some	O	O
specific	O	O
scenarios	O	O
.	O	O
Not	O	O
the	O	O
thing	O	O
the	O	O
JVM	O	O
developers	O	O
usually	O	O
care	O	O
.	O	O
Also	O	O
it	O	O
should	O	O
be	O	O
noted	O	O
that	O	O
even	O	O
C1	O	O
'	O	O
client	O	O
'	O	O
compiler	O	O
(	O	O
tier	O	O
1	O	O
-	O	O
3	O	O
)	O	O
is	O	O
capable	O	O
to	O	O
inline	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
called	O	O
,	O	O
for	O	O
example	O	O
,	O	O
in	O	O
WeakHashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
as	O	O
inlining	O	O
log	O	O
(	O	O
-	O	O
XX	O	O
:	O	O
+	O	O
UnlockDiagnosticVMOptions	O	B-api_mention
-	O	O
XX	O	O
:	O	O
+	O	O
PrintCompilation	O	O
-	O	O
XX	O	O
:	O	O
+	O	O
PrintInlining	O	O
)	O	O
says	O	O
:	O	O
#	O	O
pre	O	O
Of	O	O
course	O	O
,	O	O
it	O	O
'	O	O
s	O	O
also	O	O
easily	O	O
inlined	O	O
by	O	O
smart	O	O
and	O	O
powerful	O	O
C2	O	O
'	O	O
server	O	O
'	O	O
compiler	O	O
.	O	O
Thus	O	O
I	O	O
see	O	O
no	O	O
problems	O	O
here	O	O
.	O	O
Seems	O	O
that	O	O
@	O	O
Marco	O	O
version	O	O
is	O	O
incorrect	O	O
either	O	O
.	O	O
Finally	O	O
we	O	O
have	O	O
a	O	O
couple	O	O
of	O	O
comments	O	O
from	O	O
@	O	O
StuartMarks	O	O
(	O	O
who	O	O
is	O	O
JDK	O	O
developer	O	O
,	O	O
thus	O	O
some	O	O
official	O	O
voice	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Indeed	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
contained	O	O
the	O	O
loop	O	O
many	O	O
years	O	O
,	O	O
was	O	O
replaced	O	O
with	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
on	O	O
Apr	O	O
10th	O	O
,	O	O
2013	O	O
and	O	O
stayed	O	O
less	O	O
one	O	O
half	O	O
-	O	O
a	O	O
-	O	O
year	O	O
until	O	O
Sept	O	O
4th	O	O
when	O	O
the	O	O
discussed	O	O
commit	O	O
was	O	O
introduced	O	O
.	O	O
The	O	O
discussed	O	O
commit	O	O
was	O	O
actually	O	O
a	O	O
major	O	O
rewrite	O	O
of	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
internals	O	O
to	O	O
fix	O	O
JDK	O	O
-	O	O
8023463	O	O
issue	O	O
.	O	O
It	O	O
was	O	O
a	O	O
long	O	O
story	O	O
about	O	O
possibility	O	O
to	O	O
poison	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
with	O	O
keys	O	O
having	O	O
duplicating	O	O
hashcodes	O	O
reducing	O	O
HashMap	B-api_mention	B-api_mention
search	O	O
speed	O	O
to	O	O
linear	O	O
making	O	O
it	O	O
vulnerable	O	O
to	O	O
DoS	O	O
-	O	O
attacks	O	O
.	O	O
The	O	O
attempts	O	O
to	O	O
solve	O	O
this	O	O
were	O	O
performed	O	O
in	O	O
JDK	O	O
-	O	O
7	O	O
including	O	O
some	O	O
randomization	O	O
of	O	O
String	B-api_mention	B-api_mention
hashCode	O	O
.	O	O
So	O	O
seems	O	O
that	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
implementation	O	O
was	O	O
forked	O	O
from	O	O
the	O	O
earlier	O	O
commit	O	O
,	O	O
developed	O	O
independently	O	O
,	O	O
then	O	O
merged	O	O
into	O	O
the	O	O
master	O	O
branch	O	O
overwriting	O	O
several	O	O
changes	O	O
introduced	O	O
in	O	O
-	O	O
between	O	O
.	O	O
We	O	O
may	O	O
support	O	O
this	O	O
hypothesis	O	O
performing	O	O
a	O	O
diff	O	O
.	O	O
Take	O	O
the	O	O
version	O	O
where	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
was	O	O
removed	O	O
(	O	O
2013	O	O
-	O	O
09	O	O
-	O	O
04	O	O
)	O	O
and	O	O
compare	O	O
it	O	O
with	O	O
previous	O	O
version	O	O
(	O	O
2013	O	O
-	O	O
07	O	O
-	O	O
30	O	O
)	O	O
.	O	O
The	O	O
diff	O	O
-	O	O
U0	O	O
output	O	O
has	O	O
4341	O	O
lines	O	O
.	O	O
Now	O	O
let	O	O
'	O	O
s	O	O
diff	O	O
against	O	O
the	O	O
version	O	O
prior	O	O
to	O	O
one	O	O
when	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
was	O	O
added	O	O
(	O	O
2013	O	O
-	O	O
04	O	O
-	O	O
01	O	O
)	O	O
.	O	O
Now	O	O
diff	O	O
-	O	O
U0	O	O
contains	O	O
only	O	O
2680	O	O
lines	O	O
.	O	O
Thus	O	O
the	O	O
newer	O	O
version	O	O
actually	O	O
more	O	O
similar	O	O
to	O	O
the	O	O
older	O	O
than	O	O
to	O	O
immediate	O	O
parent	O	O
.	O	O
Conclusion	O	O
So	O	O
to	O	O
conclude	O	O
I	O	O
would	O	O
agree	O	O
with	O	O
Stuart	O	O
Marks	O	O
.	O	O
There	O	O
were	O	O
no	O	O
concrete	O	O
reason	O	O
to	O	O
remove	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
,	O	O
it	O	O
'	O	O
s	O	O
just	O	O
because	O	O
the	O	O
in	O	O
-	O	O
between	O	O
change	O	O
was	O	O
overwritten	O	O
by	O	O
mistake	O	O
.	O	O
Using	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
is	O	O
perfectly	O	O
fine	O	O
both	O	O
in	O	O
JDK	O	O
code	O	O
and	O	O
in	O	O
user	O	O
applications	O	O
and	O	O
used	O	O
,	O	O
for	O	O
example	O	O
,	O	O
in	O	O
WeakHashMap	B-api_mention	B-api_mention
.	O	O
The	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
is	O	O
loaded	O	O
anyways	O	O
pretty	O	O
early	O	O
during	O	O
the	O	O
JDK	O	O
initialization	O	O
,	O	O
has	O	O
very	O	O
simple	O	O
static	O	O
initializer	O	O
and	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
method	O	O
can	O	O
be	O	O
easily	O	O
inlined	O	O
even	O	O
by	O	O
client	O	O
compiler	O	O
,	O	O
so	O	O
no	O	O
performance	O	O
drawback	O	O
should	O	O
be	O	O
noted	O	O
.	O	O
Question	O	O
-	O	O
5175728	O	O
,	O	O
answer	O	O
-	O	O
5175771	O	O
Have	O	O
a	O	O
look	O	O
at	O	O
the	O	O
Date	B-api_mention	B-api_mention
class	O	O
.	O	O
There	O	O
'	O	O
s	O	O
also	O	O
the	O	O
newer	O	O
Calendar	O	B-api_mention
class	O	O
which	O	O
is	O	O
the	O	O
preferred	O	O
method	O	O
of	O	O
doing	O	O
many	O	O
date	O	O
/	O	O
time	O	O
operations	O	O
(	O	O
a	O	O
lot	O	O
of	O	O
the	O	O
methods	O	O
on	O	O
Date	B-api_mention	B-api_mention
have	O	O
been	O	O
deprecated	O	O
.	O	O
)	O	O
If	O	O
you	O	O
just	O	O
want	O	O
the	O	O
current	O	O
date	O	O
,	O	O
then	O	O
either	O	O
create	O	O
a	O	O
new	O	O
Date	B-api_mention	B-api_mention
object	O	O
or	O	O
call	O	O
Calendar	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
31265714	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
there	O	O
is	O	O
also	O	O
an	O	O
alternative	O	O
to	O	O
using	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
your	O	O
input	O	O
source	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
file	O	O
but	O	O
something	O	O
more	O	O
abstract	O	O
like	O	O
a	O	O
Reader	B-api_mention	B-api_mention
or	O	O
an	O	O
InputStream	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
stream	O	O
the	O	O
lines	O	O
via	O	O
the	O	O
BufferedReader	B-api_mention	B-api_mention
s	O	O
lines	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
will	O	O
call	O	O
processLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
each	O	O
input	O	O
line	O	O
read	O	O
by	O	O
the	O	O
BufferedReader	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
15202997	O	O
,	O	O
answer	O	O
-	O	O
36978943	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
confused	O	O
by	O	O
the	O	O
wide	O	O
range	O	O
of	O	O
different	O	O
naming	O	O
schemes	O	O
as	O	O
well	O	O
,	O	O
and	O	O
was	O	O
just	O	O
about	O	O
to	O	O
ask	O	O
and	O	O
answer	O	O
my	O	O
own	O	O
question	O	O
on	O	O
this	O	O
when	O	O
I	O	O
found	O	O
this	O	O
question	O	O
here	O	O
.	O	O
I	O	O
think	O	O
my	O	O
findings	O	O
fit	O	O
it	O	O
well	O	O
enough	O	O
,	O	O
and	O	O
complement	O	O
what	O	O
'	O	O
s	O	O
already	O	O
here	O	O
.	O	O
My	O	O
focus	O	O
is	O	O
looking	O	O
for	O	O
documentation	O	O
on	O	O
the	O	O
various	O	O
terms	O	O
,	O	O
and	O	O
adding	O	O
some	O	O
more	O	O
related	O	O
terms	O	O
that	O	O
might	O	O
crop	O	O
up	O	O
in	O	O
other	O	O
places	O	O
.	O	O
Consider	O	O
the	O	O
following	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
The	O	O
simple	O	O
name	O	O
of	O	O
D	O	O
is	O	O
D	O	O
.	O	O
That	O	O
'	O	O
s	O	O
just	O	O
the	O	O
part	O	O
you	O	O
wrote	O	O
when	O	O
declaring	O	O
the	O	O
class	O	O
.	O	O
Anonymous	O	O
classes	O	O
have	O	O
no	O	O
simple	O	O
name	O	O
.	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getSimpleName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
this	O	O
name	O	O
or	O	O
the	O	O
empty	O	O
string	O	O
.	O	O
It	O	O
is	O	O
possible	O	O
for	O	O
the	O	O
simple	O	O
name	O	O
to	O	O
contain	O	O
a	O	O
$	O	O
if	O	O
you	O	O
write	O	O
it	O	O
like	O	O
this	O	O
,	O	O
since	O	O
$	O	O
is	O	O
a	O	O
valid	O	O
part	O	O
of	O	O
an	O	O
identifier	O	O
.	O	O
#	O	O
li	O	O
According	O	O
to	O	O
the	O	O
JLS	O	O
section	O	O
6	O	O
.	O	O
7	O	O
,	O	O
both	O	O
a	O	O
.	O	O
b	O	O
.	O	O
C	O	O
.	O	O
D	O	O
and	O	O
a	O	O
.	O	O
b	O	O
.	O	O
C	O	O
.	O	O
D	O	O
.	O	O
D	O	O
.	O	O
D	O	O
would	O	O
be	O	O
fully	O	O
qualified	O	O
names	O	O
,	O	O
but	O	O
only	O	O
a	O	O
.	O	O
b	O	O
.	O	O
C	O	O
.	O	O
D	O	O
would	O	O
be	O	O
the	O	O
canonical	O	O
name	O	O
of	O	O
D	O	O
.	O	O
So	O	O
every	O	O
canonical	O	O
name	O	O
is	O	O
a	O	O
fully	O	O
qualified	O	O
name	O	O
,	O	O
but	O	O
the	O	O
converes	O	O
is	O	O
not	O	O
always	O	O
true	O	O
.	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getCanonicalName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
the	O	O
canonical	O	O
name	O	O
or	O	O
null	O	O
.	O	O
#	O	O
li	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
documented	O	O
to	O	O
return	O	O
the	O	O
binary	O	O
name	O	O
,	O	O
as	O	O
specified	O	O
in	O	O
JLS	O	O
section	O	O
13	O	O
.	O	O
1	O	O
.	O	O
In	O	O
this	O	O
case	O	O
it	O	O
returns	O	O
a	O	O
.	O	O
b	O	O
.	O	O
C	O	O
$	O	O
D	O	O
for	O	O
D	O	O
and	O	O
[	O	O
La	O	O
.	O	O
b	O	O
.	O	O
C	O	O
$	O	O
D	O	O
;	O	O
for	O	O
D	O	O
[	O	O
]	O	O
.	O	O
#	O	O
li	O	O
This	O	O
answer	O	O
demonstrates	O	O
that	O	O
it	O	O
is	O	O
possible	O	O
for	O	O
two	O	O
classes	O	O
loaded	O	O
by	O	O
the	O	O
same	O	O
class	O	O
loader	O	O
to	O	O
have	O	O
the	O	O
same	O	O
canonical	O	O
name	O	O
but	O	O
distinct	O	O
binary	O	O
names	O	O
.	O	O
Neither	O	O
name	O	O
is	O	O
sufficient	O	O
to	O	O
reliably	O	O
deduce	O	O
the	O	O
other	O	O
:	O	O
if	O	O
you	O	O
have	O	O
the	O	O
canonical	O	O
name	O	O
,	O	O
you	O	O
don	O	O
'	O	O
t	O	O
know	O	O
which	O	O
parts	O	O
of	O	O
the	O	O
name	O	O
are	O	O
packages	O	O
and	O	O
which	O	O
are	O	O
containing	O	O
classes	O	O
.	O	O
If	O	O
you	O	O
have	O	O
the	O	O
binary	O	O
name	O	O
,	O	O
you	O	O
don	O	O
'	O	O
t	O	O
know	O	O
which	O	O
$	O	O
were	O	O
introduced	O	O
as	O	O
separators	O	O
and	O	O
which	O	O
were	O	O
part	O	O
of	O	O
some	O	O
simple	O	O
name	O	O
.	O	O
#	O	O
li	O	O
Anonymous	O	O
classes	O	O
and	O	O
local	O	O
classes	O	O
have	O	O
no	O	O
fully	O	O
qualified	O	O
names	O	O
but	O	O
still	O	O
have	O	O
a	O	O
binary	O	O
name	O	O
.	O	O
The	O	O
same	O	O
holds	O	O
for	O	O
classes	O	O
nested	O	O
inside	O	O
such	O	O
classes	O	O
.	O	O
Every	O	O
class	O	O
has	O	O
a	O	O
binary	O	O
name	O	O
.	O	O
#	O	O
li	O	O
Running	O	O
javap	O	O
-	O	O
v	O	O
-	O	O
private	O	O
on	O	O
a	O	O
/	O	O
b	O	O
/	O	O
C	O	O
.	O	O
class	O	O
shows	O	O
that	O	O
the	O	O
bytecode	O	O
refers	O	O
to	O	O
the	O	O
type	O	O
of	O	O
d	O	O
as	O	O
La	O	O
/	O	O
b	O	O
/	O	O
C	O	O
$	O	O
D	O	O
;	O	O
and	O	O
that	O	O
of	O	O
the	O	O
array	O	O
ds	O	O
as	O	O
[	O	O
La	O	O
/	O	O
b	O	O
/	O	O
C	O	O
$	O	O
D	O	O
;	O	O
.	O	O
These	O	O
are	O	O
called	O	O
descriptors	O	O
,	O	O
and	O	O
they	O	O
are	O	O
specified	O	O
in	O	O
JVMS	O	O
section	O	O
4	O	O
.	O	O
3	O	O
.	O	O
#	O	O
li	O	O
The	O	O
class	O	O
name	O	O
a	O	O
/	O	O
b	O	O
/	O	O
C	O	O
$	O	O
D	O	O
used	O	O
in	O	O
both	O	O
of	O	O
these	O	O
descriptors	O	O
is	O	O
what	O	O
you	O	O
get	O	O
by	O	O
replacing	O	O
.	O	O
by	O	O
/	O	O
in	O	O
the	O	O
binary	O	O
name	O	O
.	O	O
The	O	O
JVM	O	O
spec	O	O
apparently	O	O
calls	O	O
this	O	O
the	O	O
internal	O	O
form	O	O
of	O	O
the	O	O
binary	O	O
name	O	O
.	O	O
JVMS	O	O
section	O	O
4	O	O
.	O	O
2	O	O
.	O	O
1	O	O
describes	O	O
it	O	O
,	O	O
and	O	O
states	O	O
that	O	O
the	O	O
difference	O	O
from	O	O
the	O	O
binary	O	O
name	O	O
were	O	O
for	O	O
historical	O	O
reasons	O	O
.	O	O
#	O	O
li	O	O
The	O	O
file	O	O
name	O	O
of	O	O
a	O	O
class	O	O
in	O	O
one	O	O
of	O	O
the	O	O
typical	O	O
filename	O	O
-	O	O
based	O	O
class	O	O
loaders	O	O
is	O	O
what	O	O
you	O	O
get	O	O
if	O	O
you	O	O
interpret	O	O
the	O	O
/	O	O
in	O	O
the	O	O
internal	O	O
form	O	O
of	O	O
the	O	O
binary	O	O
name	O	O
as	O	O
a	O	O
directory	O	O
separator	O	O
,	O	O
and	O	O
append	O	O
the	O	O
file	O	O
name	O	O
extension	O	O
.	O	O
class	O	O
to	O	O
it	O	O
.	O	O
It	O	O
'	O	O
s	O	O
resolved	O	O
relative	O	O
to	O	O
the	O	O
class	O	O
path	O	O
used	O	O
by	O	O
the	O	O
class	O	O
loader	O	O
in	O	O
question	O	O
.	O	O
Question	O	O
-	O	O
29140402	O	O
,	O	O
answer	O	O
-	O	O
36771568	O	O
In	O	O
Eclipse	O	O
,	O	O
Go	O	O
to	O	O
your	O	O
class	O	O
,	O	O
Right	O	O
click	O	O
-	O	O
>	O	O
source	O	O
-	O	O
>	O	O
Generate	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
It	O	O
will	O	O
override	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
and	O	O
print	O	O
the	O	O
object	O	O
of	O	O
that	O	O
class	O	O
.	O	O
Question	O	O
-	O	O
17781150	O	O
,	O	O
answer	O	O
-	O	O
17781189	O	O
The	O	O
only	O	O
int	O	O
value	O	O
for	O	O
which	O	O
it	O	O
works	O	O
is	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
It	O	O
'	O	O
s	O	O
because	O	O
integers	O	O
are	O	O
negated	O	O
using	O	O
the	O	O
two	O	O
'	O	O
s	O	O
complement	O	O
way	O	O
.	O	O
Using	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
you	O	O
see	O	O
that	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
is	O	O
10000000000000000000000000000000	O	O
Taking	O	O
the	O	O
negative	O	O
value	O	O
is	O	O
done	O	O
by	O	O
first	O	O
swapping	O	O
0	O	O
and	O	O
1	O	O
,	O	O
which	O	O
gives	O	O
01111111111111111111111111111111	O	O
and	O	O
by	O	O
adding	O	O
1	O	O
,	O	O
which	O	O
gives	O	O
10000000000000000000000000000000	O	O
As	O	O
you	O	O
can	O	O
see	O	O
in	O	O
the	O	O
link	O	O
I	O	O
gave	O	O
,	O	O
Wikipedia	O	O
mentions	O	O
the	O	O
problem	O	O
with	O	O
the	O	O
most	O	O
negative	O	O
numbers	O	O
and	O	O
specifies	O	O
it	O	O
'	O	O
s	O	O
the	O	O
sole	O	O
exception	O	O
:	O	O
#	O	O
blockquote	O	O
Of	O	O
course	O	O
you	O	O
have	O	O
the	O	O
same	O	O
phenomenon	O	O
for	O	O
Long	B-api_mention	B-api_mention
.	I-api_mention	O
Min	I-api_mention	O
_	I-api_mention	O
Value	I-api_mention	O
if	O	O
you	O	O
store	O	O
it	O	O
in	O	O
a	O	O
long	O	O
variable	O	O
.	O	O
Note	O	O
that	O	O
this	O	O
is	O	O
only	O	O
due	O	O
to	O	O
choices	O	O
that	O	O
were	O	O
made	O	O
regarding	O	O
the	O	O
binary	O	O
storage	O	O
of	O	O
ints	O	O
in	O	O
Java	O	O
.	O	O
Another	O	O
(	O	O
bad	O	O
)	O	O
solution	O	O
could	O	O
for	O	O
example	O	O
have	O	O
been	O	O
to	O	O
negate	O	O
by	O	O
simply	O	O
changing	O	O
the	O	O
most	O	O
significant	O	O
bit	O	O
and	O	O
letting	O	O
the	O	O
other	O	O
bits	O	O
unchanged	O	O
,	O	O
this	O	O
would	O	O
have	O	O
avoided	O	O
this	O	O
problem	O	O
with	O	O
MIN	B-api_mention	O
_	I-api_mention	O
VALUE	I-api_mention	O
but	O	O
would	O	O
have	O	O
made	O	O
2	O	O
different	O	O
0	O	O
values	O	O
and	O	O
complicated	O	O
binary	O	O
arithmetic	O	O
(	O	O
how	O	O
would	O	O
you	O	O
have	O	O
incremented	O	O
for	O	O
example	O	O
?	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
14534767	O	O
I	O	O
have	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
object	O	O
,	O	O
#	O	O
pre	O	O
Now	O	O
I	O	O
want	O	O
to	O	O
append	O	O
a	O	O
newline	O	O
character	O	O
to	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
How	O	O
can	O	O
I	O	O
do	O	O
it	O	O
?	O	O
result	O	O
.	O	B-api_mention
append	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Does	O	O
not	O	O
work	O	O
.	O	O
So	O	O
,	O	O
I	O	O
was	O	O
thinking	O	O
about	O	O
writing	O	O
a	O	O
newline	O	O
using	O	O
Unicode	O	O
.	O	O
Will	O	O
this	O	O
help	O	O
?	O	O
If	O	O
so	O	O
,	O	O
how	O	O
can	O	O
I	O	O
add	O	O
one	O	O
?	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032180	O	O
The	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
removes	O	O
all	O	O
the	O	O
elements	O	O
of	O	O
a	O	O
single	O	O
ArrayList	B-api_mention	B-api_mention
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
fast	O	O
operation	O	O
,	O	O
as	O	O
it	O	O
just	O	O
sets	O	O
some	O	O
array	O	O
elements	O	O
to	O	O
null	O	O
.	O	O
The	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
is	O	O
inherited	O	O
from	O	O
AbstractCollection	B-api_mention	B-api_mention
,	O	O
removes	O	O
all	O	O
the	O	O
elements	O	O
that	O	O
are	O	O
in	O	O
the	O	O
argument	O	O
collection	O	O
from	O	O
the	O	O
collection	O	O
you	O	O
call	O	O
the	O	O
method	O	O
on	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
relatively	O	O
slow	O	O
operation	O	O
,	O	O
as	O	O
it	O	O
has	O	O
to	O	O
search	O	O
through	O	O
one	O	O
of	O	O
the	O	O
collections	O	O
involved	O	O
.	O	O
Question	O	O
-	O	O
18636561	O	O
,	O	O
answer	O	O
-	O	O
18824858	O	O
Whenever	O	O
a	O	O
new	O	O
keyword	O	O
is	O	O
used	O	O
it	O	O
Creates	O	O
a	O	O
Object	B-api_mention	B-api_mention
at	O	O
the	O	O
Heap	O	O
1	O	O
)	O	O
StringBuilder	B-api_mention	B-api_mention
sample	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
2	O	O
)	O	O
StringBuilder	B-api_mention	B-api_mention
referToSample	O	O
=	O	O
sample	O	O
;	O	O
In	O	O
2	O	O
)	O	O
the	O	O
Reference	O	O
of	O	O
referSample	O	O
is	O	O
created	O	O
on	O	O
same	O	O
object	O	O
sample	O	O
thus	O	O
referToSample	O	O
=	O	O
null	O	O
;	O	O
is	O	O
Nulling	O	O
Only	O	O
the	O	O
referSample	O	O
Reference	O	O
giving	O	O
no	O	O
effect	O	O
to	O	O
sample	O	O
that	O	O
'	O	O
s	O	O
why	O	O
you	O	O
are	O	O
not	O	O
getting	O	O
NULL	O	O
Pointer	O	O
Exception	O	O
Thanks	O	O
to	O	O
Java	O	O
'	O	O
s	O	O
Garbage	O	O
Collection	O	B-api_mention
Question	O	O
-	O	O
9481865	O	O
,	O	O
answer	O	O
-	O	O
9481939	O	O
You	O	O
can	O	O
use	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
net	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
InetAddress	I-api_mention	I-api_mention
API	O	O
.	O	O
Try	O	O
this	O	O
:	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostAddress	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
13195797	O	O
,	O	O
answer	O	O
-	O	O
20043507	O	O
Peter	O	O
Lawrey	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
great	O	O
because	O	O
it	O	O
is	O	O
simple	O	O
and	O	O
not	O	O
depending	O	O
on	O	O
anything	O	O
special	O	O
,	O	O
and	O	O
it	O	O
'	O	O
s	O	O
the	O	O
way	O	O
you	O	O
should	O	O
do	O	O
it	O	O
.	O	O
If	O	O
you	O	O
need	O	O
something	O	O
that	O	O
removes	O	O
subdirectories	O	O
and	O	O
their	O	O
contents	O	O
as	O	O
well	O	O
,	O	O
use	O	O
recursion	O	O
:	O	O
#	O	O
pre	O	O
To	O	O
spare	O	O
subdirectories	O	O
and	O	O
their	O	O
contents	O	O
(	O	O
part	O	O
of	O	O
your	O	O
question	O	O
)	O	O
,	O	O
modify	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
Or	O	O
,	O	O
since	O	O
you	O	O
wanted	O	O
a	O	O
one	O	O
-	O	O
line	O	O
solution	O	O
:	O	O
for	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
if	O	O
(	O	O
args	O	O
)	O	O
file	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Using	O	O
an	O	O
external	O	O
library	O	O
for	O	O
such	O	O
a	O	O
trivial	O	O
task	O	O
is	O	O
not	O	O
a	O	O
good	O	O
idea	O	O
unless	O	O
you	O	O
need	O	O
this	O	O
library	O	O
for	O	O
something	O	O
else	O	O
anyway	O	O
,	O	O
in	O	O
which	O	O
case	O	O
it	O	O
is	O	O
preferrable	O	O
to	O	O
use	O	O
existing	O	O
code	O	O
.	O	O
You	O	O
appear	O	O
to	O	O
be	O	O
using	O	O
the	O	O
Apache	O	O
library	O	O
anyway	O	O
so	O	O
use	O	O
its	O	O
FileUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
cleanDirectory	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Question	O	O
-	O	O
5374311	O	O
,	O	O
answer	O	O
-	O	O
17909134	O	O
I	O	O
can	O	O
see	O	O
many	O	O
answers	O	O
showing	O	O
how	O	O
to	O	O
solve	O	O
problem	O	O
,	O	O
but	O	O
only	O	O
Stephen	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
trying	O	O
to	O	O
explain	O	O
why	O	O
problem	O	O
occurs	O	O
so	O	O
I	O	O
will	O	O
try	O	O
to	O	O
add	O	O
something	O	O
more	O	O
on	O	O
this	O	O
subject	O	O
.	O	O
It	O	O
is	O	O
a	O	O
story	O	O
about	O	O
possible	O	O
reasons	O	O
why	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
toArray	B-api_mention	B-api_mention
wasn	O	O
'	O	O
t	O	O
changed	O	O
to	O	O
T	O	O
[	O	O
]	O	O
toArray	B-api_mention	B-api_mention
where	O	O
generics	O	O
ware	O	O
introduced	O	O
to	O	O
Java	O	O
.	O	O
Why	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
(	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
stock	O	O
_	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
wont	O	O
work	O	O
?	O	O
In	O	O
Java	O	O
,	O	O
generic	O	O
type	O	O
exists	O	O
at	O	O
compile	O	O
-	O	O
time	O	O
only	O	O
.	O	O
At	O	O
runtime	O	O
information	O	O
about	O	O
generic	O	O
type	O	O
(	O	O
like	O	O
in	O	O
your	O	O
case	O	O
<	O	O
String	B-api_mention	B-api_mention
>	O	O
)	O	O
is	O	O
removed	O	O
and	O	O
replaced	O	O
with	O	O
Object	B-api_mention	B-api_mention
type	O	O
(	O	O
take	O	O
a	O	O
look	O	O
at	O	O
type	O	O
erasure	O	O
)	O	O
.	O	O
That	O	O
is	O	O
why	O	O
at	O	O
runtime	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
have	O	O
no	O	O
idea	O	O
about	O	O
what	O	O
precise	O	O
type	O	O
to	O	O
use	O	O
to	O	O
create	O	O
new	O	O
array	O	O
,	O	O
so	O	O
it	O	O
uses	O	O
Object	B-api_mention	B-api_mention
as	O	O
safest	O	O
type	O	O
,	O	O
because	O	O
each	O	O
class	O	O
extends	O	O
Object	B-api_mention	B-api_mention
so	O	O
it	O	O
can	O	O
safely	O	O
store	O	O
instance	O	O
of	O	O
any	O	O
class	O	O
.	O	O
Now	O	O
the	O	O
problem	O	O
is	O	O
that	O	O
you	O	O
can	O	O
'	O	O
t	O	O
cast	O	O
instance	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
to	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
Why	O	O
?	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
example	O	O
(	O	O
lets	O	O
assume	O	O
that	O	O
class	O	O
B	O	O
extends	O	O
A	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Although	O	O
such	O	O
code	O	O
will	O	O
compile	O	O
,	O	O
at	O	O
runtime	O	O
we	O	O
will	O	O
see	O	O
thrown	O	O
ClassCastException	B-api_mention	B-api_mention
because	O	O
instance	O	O
held	O	O
by	O	O
reference	O	O
a	O	O
is	O	O
not	O	O
actually	O	O
of	O	O
type	O	O
B	O	O
(	O	O
or	O	O
its	O	O
subtypes	O	O
)	O	O
.	O	O
Why	O	O
is	O	O
this	O	O
problem	O	O
(	O	O
why	O	O
this	O	O
exception	O	O
needs	O	O
to	O	O
be	O	O
cast	O	O
)	O	O
?	O	O
One	O	O
of	O	O
the	O	O
reasons	O	O
is	O	O
that	O	O
B	O	O
could	O	O
have	O	O
new	O	O
methods	O	O
/	O	O
fields	O	O
which	O	O
A	O	O
doesn	O	O
'	O	O
t	O	O
,	O	O
so	O	O
it	O	O
is	O	O
possible	O	O
that	O	O
someone	O	O
will	O	O
try	O	O
to	O	O
use	O	O
these	O	O
new	O	O
members	O	O
via	O	O
b	O	O
reference	O	O
even	O	O
if	O	O
held	O	O
instance	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
(	O	O
doesn	O	O
'	O	O
t	O	O
support	O	O
)	O	O
them	O	O
.	O	O
In	O	O
other	O	O
words	O	O
we	O	O
could	O	O
end	O	O
up	O	O
trying	O	O
to	O	O
use	O	O
data	O	O
which	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
,	O	O
which	O	O
could	O	O
lead	O	O
to	O	O
many	O	O
problems	O	O
.	O	O
So	O	O
to	O	O
prevent	O	O
such	O	O
situation	O	O
JVM	O	O
throws	O	O
exception	O	O
,	O	O
and	O	O
stop	O	O
further	O	O
potentially	O	O
dangerous	O	O
code	O	O
.	O	O
You	O	O
could	O	O
ask	O	O
now	O	O
"	O	O
So	O	O
why	O	O
aren	O	O
'	O	O
t	O	O
we	O	O
stopped	O	O
even	O	O
earlier	O	O
?	O	O
Why	O	O
code	O	O
involving	O	O
such	O	O
casting	O	O
is	O	O
even	O	O
compilable	O	O
?	O	O
Shouldn	O	O
'	O	O
t	O	O
compiler	O	O
stop	O	O
it	O	O
?	O	O
"	O	O
.	O	O
Answer	O	O
is	O	O
:	O	O
no	O	O
because	O	O
compiler	O	O
can	O	O
'	O	O
t	O	O
know	O	O
for	O	O
sure	O	O
what	O	O
is	O	O
the	O	O
actual	O	O
type	O	O
of	O	O
instance	O	O
held	O	O
by	O	O
a	O	O
reference	O	O
,	O	O
and	O	O
there	O	O
is	O	O
a	O	O
chance	O	O
that	O	O
it	O	O
will	O	O
hold	O	O
instance	O	O
of	O	O
class	O	O
B	O	O
which	O	O
will	O	O
support	O	O
interface	O	O
of	O	O
b	O	O
reference	O	O
.	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
lets	O	O
go	O	O
back	O	O
to	O	O
your	O	O
arrays	O	O
.	O	O
As	O	O
you	O	O
see	O	O
in	O	O
question	O	O
,	O	O
we	O	O
can	O	O
'	O	O
t	O	O
cast	O	O
instance	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
array	O	O
to	O	O
more	O	O
precise	O	O
type	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
like	O	O
#	O	O
pre	O	O
Here	O	O
problem	O	O
is	O	O
a	O	O
little	O	O
different	O	O
.	O	O
Now	O	O
we	O	O
are	O	O
sure	O	O
that	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
array	O	O
will	O	O
not	O	O
have	O	O
additional	O	O
fields	O	O
or	O	O
methods	O	O
because	O	O
every	O	O
array	O	O
support	O	O
only	O	O
:	O	O
#	O	O
li	O	O
[	O	O
]	O	O
operator	O	O
,	O	O
#	O	O
li	O	O
length	O	O
filed	O	O
,	O	O
#	O	O
li	O	O
methods	O	O
inherited	O	O
from	O	O
Object	B-api_mention	B-api_mention
supertype	O	O
,	O	O
So	O	O
it	O	O
is	O	O
not	O	O
arrays	O	O
interface	O	O
which	O	O
is	O	O
making	O	O
it	O	O
impossible	O	O
.	O	O
Problem	O	O
is	O	O
that	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
array	O	O
beside	O	O
Strings	O	O
can	O	O
store	O	O
any	O	O
objects	O	O
(	O	O
for	O	O
instance	O	O
Integers	O	B-api_mention
)	O	O
so	O	O
it	O	O
is	O	O
possible	O	O
that	O	O
one	O	O
beautiful	O	O
day	O	O
we	O	O
will	O	O
end	O	O
up	O	O
with	O	O
trying	O	O
to	O	O
invoke	O	O
method	O	O
like	O	O
strArray	O	O
[	O	O
i	O	O
]	O	O
.	B-api_mention	B-api_mention
substring	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
instance	O	O
of	O	O
Integer	O	B-api_mention
which	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
such	O	O
method	O	O
.	O	O
So	O	O
to	O	O
make	O	O
sure	O	O
that	O	O
this	O	O
situation	O	O
will	O	O
never	O	O
happen	O	O
,	O	O
in	O	O
Java	O	O
array	O	O
references	O	O
can	O	O
hold	O	O
only	O	O
#	O	O
li	O	O
instances	O	O
of	O	O
array	O	O
of	O	O
same	O	O
type	O	O
as	O	O
reference	O	O
(	O	O
reference	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
strArr	O	O
can	O	O
hold	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
#	O	O
li	O	O
instances	O	O
of	O	O
array	O	O
of	O	O
subtype	O	O
(	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
can	O	O
hold	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
because	O	O
String	B-api_mention	B-api_mention
is	O	O
subtype	O	O
of	O	O
Object	B-api_mention	B-api_mention
)	O	O
,	O	O
but	O	O
can	O	O
'	O	O
t	O	O
hold	O	O
#	O	O
li	O	O
array	O	O
of	O	O
supertype	O	O
of	O	O
type	O	O
of	O	O
array	O	O
from	O	O
reference	O	O
(	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
can	O	O
'	O	O
t	O	O
hold	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
#	O	O
li	O	O
array	O	O
of	O	O
type	O	O
which	O	O
is	O	O
not	O	O
related	O	O
to	O	O
type	O	O
from	O	O
reference	O	O
(	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
can	O	O
'	O	O
t	O	O
hold	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
In	O	O
other	O	O
words	O	O
something	O	O
like	O	O
this	O	O
is	O	O
OK	O	O
#	O	O
pre	O	O
You	O	O
could	O	O
say	O	O
that	O	O
one	O	O
way	O	O
to	O	O
resolve	O	O
this	O	O
problem	O	O
is	O	O
to	O	O
find	O	O
at	O	O
runtime	O	O
most	O	O
common	O	O
type	O	O
between	O	O
all	O	O
list	O	O
elements	O	O
and	O	O
create	O	O
array	O	O
of	O	O
that	O	O
type	O	O
,	O	O
but	O	O
this	O	O
wont	O	O
work	O	O
in	O	O
situations	O	O
where	O	O
all	O	O
elements	O	O
of	O	O
list	O	O
will	O	O
be	O	O
of	O	O
one	O	O
type	O	O
derived	O	O
from	O	O
generic	O	O
one	O	O
.	O	O
Take	O	O
a	O	O
look	O	O
#	O	O
pre	O	O
now	O	O
most	O	O
common	O	O
type	O	O
is	O	O
B	O	O
,	O	O
not	O	O
A	O	O
so	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
A	O	O
[	O	O
]	O	O
arr	O	O
=	O	O
elements	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
would	O	O
return	O	O
array	O	O
of	O	O
B	O	O
class	O	O
new	O	O
B	O	O
[	O	O
]	O	O
.	O	O
Problem	O	O
with	O	O
this	O	O
array	O	O
is	O	O
that	O	O
while	O	O
compiler	O	O
would	O	O
allow	O	O
you	O	O
to	O	O
edit	O	O
its	O	O
content	O	O
by	O	O
adding	O	O
new	O	O
A	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
element	O	O
to	O	O
it	O	O
,	O	O
you	O	O
would	O	O
get	O	O
ArrayStoreException	B-api_mention	B-api_mention
because	O	O
B	O	O
[	O	O
]	O	O
array	O	O
can	O	O
hold	O	O
only	O	O
elements	O	O
of	O	O
class	O	O
B	O	O
or	O	O
its	O	O
subclass	O	O
,	O	O
to	O	O
make	O	O
sure	O	O
that	O	O
all	O	O
elements	O	O
will	O	O
support	O	O
interface	O	O
of	O	O
B	O	O
,	O	O
but	O	O
instance	O	O
of	O	O
A	O	O
may	O	O
not	O	O
have	O	O
all	O	O
methods	O	O
/	O	O
fields	O	O
of	O	O
B	O	O
.	O	O
So	O	O
this	O	O
solution	O	O
is	O	O
not	O	O
perfect	O	O
.	O	O
Best	O	O
solution	O	O
to	O	O
this	O	O
problem	O	O
is	O	O
explicitly	O	O
tell	O	O
what	O	O
type	O	O
of	O	O
array	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
be	O	O
returned	O	O
by	O	O
passing	O	O
this	O	O
type	O	O
as	O	O
method	O	O
argument	O	O
like	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
arr	O	O
=	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
arr	O	O
=	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
if	O	O
size	O	O
of	O	O
array	O	O
is	O	O
smaller	O	O
then	O	O
list	O	O
it	O	O
will	O	O
be	O	O
automatically	O	O
adjusted	O	O
.	O	O
Question	O	O
-	O	O
18723596	O	O
,	O	O
answer	O	O
-	O	O
18723651	O	O
Println	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
uses	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
pre	O	O
Print	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
does	O	O
null	O	O
check	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
21375659	O	O
,	O	O
answer	O	O
-	O	O
21375716	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
irrespective	O	O
of	O	O
how	O	O
it	O	O
is	O	O
instantiated	O	O
1	O	O
)	O	O
Short	O	O
answer	O	O
is	O	O
yes	O	O
,	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
immutable	O	O
too	O	O
.	O	O
Because	O	O
every	O	O
possible	O	O
mutable	O	O
operation	O	O
(	O	O
like	O	O
replace	O	O
,	O	O
toLowerCase	B-api_mention	O
etcetra	O	O
)	O	O
that	O	O
you	O	O
perform	O	O
on	O	O
String	B-api_mention	B-api_mention
does	O	O
not	O	O
affect	O	O
the	O	O
original	O	O
String	B-api_mention	B-api_mention
instance	O	O
and	O	O
returns	O	O
you	O	O
a	O	O
new	O	O
instance	O	O
.	O	O
You	O	O
may	O	O
check	O	O
this	O	O
in	O	O
Javadoc	O	O
for	O	O
String	B-api_mention	B-api_mention
.	O	O
Each	O	O
public	O	O
method	O	O
of	O	O
String	B-api_mention	B-api_mention
that	O	O
is	O	O
exposed	O	O
returns	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
instance	O	O
and	O	O
does	O	O
not	O	O
alter	O	O
the	O	O
present	O	O
instance	O	O
on	O	O
which	O	O
you	O	O
called	O	O
the	O	O
method	O	O
.	O	O
This	O	O
is	O	O
very	O	O
helpful	O	O
in	O	O
Multi	O	O
-	O	O
threaded	O	O
environment	O	O
as	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
think	O	O
about	O	O
mutability	O	O
(	O	O
someone	O	O
will	O	O
change	O	O
the	O	O
value	O	O
)	O	O
every	O	O
time	O	O
you	O	O
pass	O	O
or	O	O
share	O	O
the	O	O
String	B-api_mention	B-api_mention
around	O	O
.	O	O
String	B-api_mention	B-api_mention
can	O	O
easily	O	O
be	O	O
the	O	O
most	O	O
used	O	O
data	O	O
type	O	O
,	O	O
so	O	O
the	O	O
designers	O	O
have	O	O
blessed	O	O
us	O	O
all	O	O
to	O	O
not	O	O
think	O	O
about	O	O
mutability	O	O
everytime	O	O
and	O	O
saved	O	O
us	O	O
a	O	O
lot	O	O
of	O	O
pain	O	O
.	O	O
Immutability	O	O
allowed	O	O
String	B-api_mention	B-api_mention
pool	O	O
or	O	O
caching	O	O
It	O	O
is	O	O
because	O	O
of	O	O
immutability	O	O
property	O	O
that	O	O
the	O	O
internal	O	O
pool	O	O
of	O	O
string	O	O
was	O	O
possible	O	O
,	O	O
as	O	O
when	O	O
same	O	O
String	B-api_mention	B-api_mention
value	O	O
is	O	O
required	O	O
at	O	O
some	O	O
other	O	O
place	O	O
then	O	O
that	O	O
immutable	O	O
reference	O	O
is	O	O
returned	O	O
.	O	O
If	O	O
String	B-api_mention	B-api_mention
would	O	O
have	O	O
been	O	O
mutable	O	O
then	O	O
it	O	O
would	O	O
not	O	O
have	O	O
been	O	O
possible	O	O
to	O	O
share	O	O
String	B-api_mention	B-api_mention
s	O	O
like	O	O
this	O	O
to	O	O
save	O	O
memory	O	O
.	O	O
String	B-api_mention	B-api_mention
immutablity	O	O
was	O	O
not	O	O
because	O	O
of	O	O
pooling	O	O
,	O	O
but	O	O
immutability	O	O
has	O	O
more	O	O
benefits	O	O
attached	O	O
to	O	O
it	O	O
.	O	O
String	B-api_mention	B-api_mention
interning	O	O
or	O	O
pooling	O	O
is	O	O
an	O	O
example	O	O
of	O	O
Flyweight	O	O
Design	O	O
pattern	O	O
2	O	O
)	O	O
Yes	O	O
it	O	O
will	O	O
be	O	O
interned	O	O
like	O	O
any	O	O
other	O	O
String	B-api_mention	B-api_mention
as	O	O
a	O	O
blank	O	O
String	B-api_mention	B-api_mention
is	O	O
also	O	O
as	O	O
much	O	O
a	O	O
String	B-api_mention	B-api_mention
as	O	O
other	O	O
String	B-api_mention	B-api_mention
instances	O	O
.	O	O
References	O	O
:	O	O
#	O	O
li	O	O
Immutability	O	O
benefits	O	O
of	O	O
String	B-api_mention	B-api_mention
Question	O	O
-	O	O
16159203	O	O
,	O	O
answer	O	O
-	O	O
16323196	O	O
#	O	O
blockquote	O	O
currentPos	O	O
=	O	O
new	O	O
Point	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
does	O	O
a	O	O
few	O	O
things	O	O
,	O	O
including	O	O
writing	O	O
default	O	O
values	O	O
to	O	O
x	O	O
and	O	O
y	O	O
(	O	O
0	O	O
)	O	O
and	O	O
then	O	O
writing	O	O
their	O	O
initial	O	O
values	O	O
in	O	O
the	O	O
constructor	O	O
.	O	O
Since	O	O
your	O	O
object	O	O
is	O	O
not	O	O
safely	O	O
published	O	O
those	O	O
4	O	O
write	O	O
operations	O	O
can	O	O
be	O	O
freely	O	O
reordered	O	O
by	O	O
the	O	O
compiler	O	O
/	O	O
JVM	O	O
.	O	O
So	O	O
from	O	O
the	O	O
perspective	O	O
of	O	O
the	O	O
reading	O	O
thread	O	O
,	O	O
it	O	O
is	O	O
a	O	O
legal	O	O
execution	O	O
to	O	O
read	O	O
x	O	O
with	O	O
its	O	O
new	O	O
value	O	O
but	O	O
y	O	O
with	O	O
its	O	O
default	O	O
value	O	O
of	O	O
0	O	O
for	O	O
example	O	O
.	O	O
By	O	O
the	O	O
time	O	O
you	O	O
reach	O	O
the	O	O
println	O	B-api_mention
statement	O	O
(	O	O
which	O	O
by	O	O
the	O	O
way	O	O
is	O	O
synchronized	O	O
and	O	O
therefore	O	O
does	O	O
influence	O	O
the	O	O
read	O	O
operations	O	O
)	O	O
,	O	O
the	O	O
variables	O	O
have	O	O
their	O	O
initial	O	O
values	O	O
and	O	O
the	O	O
program	O	O
prints	O	O
the	O	O
expected	O	O
values	O	O
.	O	O
Marking	O	O
currentPos	O	O
as	O	O
volatile	O	O
will	O	O
ensure	O	O
safe	O	O
publication	O	O
since	O	O
your	O	O
object	O	O
is	O	O
effectively	O	O
immutable	O	O
-	O	O
if	O	O
in	O	O
your	O	O
real	O	O
use	O	O
case	O	O
the	O	O
object	O	O
is	O	O
mutated	O	O
after	O	O
construction	O	O
,	O	O
volatile	O	O
guarantees	O	O
won	O	O
'	O	O
t	O	O
be	O	O
enough	O	O
and	O	O
you	O	O
could	O	O
see	O	O
an	O	O
inconsistent	O	O
object	O	O
again	O	O
.	O	O
Alternatively	O	O
,	O	O
you	O	O
can	O	O
make	O	O
the	O	O
Point	B-api_mention	B-api_mention
immutable	O	O
which	O	O
will	O	O
also	O	O
ensure	O	O
safe	O	O
publication	O	O
,	O	O
even	O	O
without	O	O
using	O	O
volatile	O	O
.	O	O
To	O	O
achieve	O	O
immutability	O	O
,	O	O
you	O	O
simply	O	O
need	O	O
to	O	O
mark	O	O
x	O	O
and	O	O
y	O	O
final	O	O
.	O	O
As	O	O
a	O	O
side	O	O
note	O	O
and	O	O
as	O	O
already	O	O
mentioned	O	O
,	O	O
synchronized	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
{	O	O
}	O	O
can	O	O
be	O	O
treated	O	O
as	O	O
a	O	O
no	O	O
-	O	O
op	O	O
by	O	O
the	O	O
JVM	O	O
(	O	O
I	O	O
understand	O	O
you	O	O
included	O	O
it	O	O
to	O	O
reproduce	O	O
the	O	O
behaviour	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
35399386	O	O
The	O	O
String	B-api_mention	B-api_mention
pool	O	O
(	O	O
aka	O	O
interning	O	O
)	O	O
and	O	O
Integer	B-api_mention	B-api_mention
pool	O	O
blur	O	O
the	O	O
difference	O	O
further	O	O
,	O	O
and	O	O
may	O	O
allow	O	O
you	O	O
to	O	O
use	O	O
=	O	O
=	O	O
for	O	O
objects	O	O
in	O	O
some	O	O
cases	O	O
instead	O	O
of	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
This	O	O
can	O	O
give	O	O
you	O	O
greater	O	O
performance	O	O
(	O	O
?	O	O
)	O	O
,	O	O
at	O	O
the	O	O
cost	O	O
of	O	O
greater	O	O
complexity	O	O
.	O	O
E	O	O
.	O	O
g	O	O
.	O	O
:	O	O
#	O	O
pre	O	O
Complexity	O	O
tradeoff	O	O
:	O	O
the	O	O
following	O	O
may	O	O
surprise	O	O
you	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
advise	O	O
you	O	O
to	O	O
stay	O	O
away	O	O
from	O	O
such	O	O
micro	O	O
-	O	O
optimization	O	O
,	O	O
and	O	O
always	O	O
use	O	O
.	O	B-api_mention
equals	O	I-api_mention
for	O	O
objects	O	O
,	O	O
and	O	O
=	O	O
=	O	O
for	O	O
primitives	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
25850328	O	O
,	O	O
answer	O	O
-	O	O
25853827	O	O
I	O	O
would	O	O
argue	O	O
first	O	O
-	O	O
off	O	O
that	O	O
Serializable	B-api_mention	B-api_mention
and	O	O
Cloneable	B-api_mention	B-api_mention
are	O	O
bad	O	O
examples	O	O
of	O	O
marker	O	O
interfaces	O	O
.	O	O
Sure	O	O
,	O	O
they	O	O
'	O	O
re	O	O
interfaces	O	O
with	O	O
methods	O	O
,	O	O
but	O	O
they	O	O
imply	O	O
methods	O	O
,	O	O
such	O	O
as	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
(	O	O
The	O	O
compiler	O	O
will	O	O
create	O	O
a	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
for	O	O
you	O	O
if	O	O
you	O	O
don	O	O
'	O	O
t	O	O
override	O	O
it	O	O
,	O	O
and	O	O
all	O	O
objects	O	O
already	O	O
have	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
the	O	O
compiler	O	O
will	O	O
again	O	O
create	O	O
a	O	O
real	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
for	O	O
you	O	O
but	O	O
with	O	O
caveats	O	O
.	O	O
Both	O	O
of	O	O
these	O	O
are	O	O
weird	O	O
edge	O	O
cases	O	O
that	O	O
really	O	O
aren	O	O
'	O	O
t	O	O
good	O	O
design	O	O
examples	O	O
.	O	O
)	O	O
Marker	O	O
interfaces	O	O
are	O	O
generally	O	O
used	O	O
for	O	O
one	O	O
of	O	O
two	O	O
purposes	O	O
:	O	O
1	O	O
)	O	O
As	O	O
a	O	O
shortcut	O	O
to	O	O
avoid	O	O
an	O	O
excessively	O	O
long	O	O
type	O	O
,	O	O
which	O	O
can	O	O
happen	O	O
with	O	O
lots	O	O
of	O	O
generics	O	O
.	O	O
For	O	O
instance	O	O
,	O	O
say	O	O
you	O	O
have	O	O
this	O	O
method	O	O
signature	O	O
:	O	O
public	O	O
void	O	O
doSomething	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
{	O	O
.	O	O
.	O	O
.	O	O
}	O	O
That	O	O
'	O	O
s	O	O
messy	O	O
and	O	O
annoying	O	O
to	O	O
type	O	O
,	O	O
and	O	O
more	O	O
importantly	O	O
,	O	O
difficult	O	O
to	O	O
understand	O	O
.	O	O
Consider	O	O
this	O	O
instead	O	O
:	O	O
public	O	O
interface	O	O
Widget	O	O
extends	O	O
Foobar	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
{	O	O
}	O	O
Then	O	O
your	O	O
method	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
public	O	O
void	O	O
doSomething	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
{	O	O
.	O	O
.	O	O
.	O	O
}	O	O
Not	O	O
only	O	O
is	O	O
it	O	O
clearer	O	O
,	O	O
but	O	O
you	O	O
can	O	O
now	O	O
Javadoc	O	O
the	O	O
Widget	B-api_mention	O
interface	O	O
,	O	O
and	O	O
it	O	O
'	O	O
s	O	O
also	O	O
easier	O	O
to	O	O
search	O	O
for	O	O
all	O	O
occurrences	O	O
in	O	O
your	O	O
code	O	O
of	O	O
Widget	B-api_mention	O
.	O	O
2	O	O
)	O	O
Marker	B-api_mention	O
interfaces	O	O
can	O	O
also	O	O
be	O	O
used	O	O
as	O	O
a	O	O
way	O	O
around	O	O
Java	O	O
'	O	O
s	O	O
lack	O	O
of	O	O
intersection	O	O
types	O	O
.	O	O
With	O	O
a	O	O
marker	B-api_mention	O
interface	O	O
,	O	O
you	O	O
can	O	O
require	O	O
something	O	O
to	O	O
be	O	O
of	O	O
two	O	O
different	O	O
types	O	O
,	O	O
such	O	O
as	O	O
in	O	O
a	O	O
method	O	O
signature	O	O
.	O	O
Say	O	O
you	O	O
have	O	O
some	O	O
interface	O	O
Widget	B-api_mention	O
in	O	O
your	O	O
application	O	O
,	O	O
like	O	O
we	O	O
described	O	O
above	O	O
.	O	O
If	O	O
you	O	O
have	O	O
a	O	O
method	O	O
that	O	O
requires	O	O
a	O	O
Widget	B-api_mention	O
that	O	O
also	O	O
happens	O	O
to	O	O
let	O	O
you	O	O
iterate	O	O
over	O	O
it	O	O
(	O	O
it	O	O
'	O	O
s	O	O
contrived	O	O
,	O	O
but	O	O
work	O	O
with	O	O
me	O	O
here	O	O
)	O	O
,	O	O
your	O	O
only	O	O
good	O	O
solution	O	O
is	O	O
to	O	O
create	O	O
a	O	O
marker	O	B-api_mention
interface	O	O
that	O	O
extends	O	O
both	O	O
interfaces	O	O
:	O	O
public	O	O
interface	O	O
IterableWidget	B-api_mention	B-api_mention
extends	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
Widget	B-api_mention	O
{	O	O
}	O	O
And	O	O
in	O	O
your	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29945627	O	O
,	O	O
answer	O	O
-	O	O
29945754	O	O
The	O	O
lambda	O	O
:	O	O
(	O	O
)	O	O
-	O	O
>	O	O
{	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
}	O	O
;	O	O
actually	O	O
represents	O	O
an	O	O
implementation	O	O
for	O	O
an	O	O
interface	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
which	O	O
is	O	O
completely	O	O
different	O	O
than	O	O
the	O	O
one	O	O
you	O	O
'	O	O
ve	O	O
defined	O	O
.	O	O
That	O	O
'	O	O
s	O	O
why	O	O
you	O	O
get	O	O
an	O	O
error	O	O
.	O	O
Since	O	O
you	O	O
can	O	O
'	O	O
t	O	O
extend	O	O
your	O	O
@	O	O
FunctionalInterface	O	O
,	O	O
nor	O	O
introduce	O	O
a	O	O
brand	O	O
new	O	O
one	O	O
,	O	O
then	O	O
I	O	O
think	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
much	O	O
options	O	O
.	O	O
You	O	O
can	O	O
use	O	O
the	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interfaces	O	O
to	O	O
denote	O	O
that	O	O
some	O	O
of	O	O
the	O	O
values	O	O
(	O	O
return	O	O
type	O	O
or	O	O
method	O	O
parameter	O	O
)	O	O
is	O	O
missing	O	O
,	O	O
though	O	O
.	O	O
However	O	O
,	O	O
this	O	O
won	O	O
'	O	O
t	O	O
make	O	O
the	O	O
lambda	O	O
body	O	O
simpler	O	O
.	O	O
Question	O	O
-	O	O
19431234	O	O
,	O	O
answer	O	O
-	O	O
23884116	O	O
the	O	O
following	O	O
seems	O	O
to	O	O
work	O	O
when	O	O
converting	O	O
from	O	O
new	O	O
API	O	O
LocalDateTime	B-api_mention	B-api_mention
into	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
date	I-api_mention	I-api_mention
:	O	O
Date	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
from	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
the	O	O
reverse	O	O
conversion	O	O
can	O	O
be	O	O
(	O	O
hopefully	O	O
)	O	O
achieved	O	O
similar	O	O
way	O	O
.	O	O
.	O	O
.	O	O
hope	O	O
it	O	O
helps	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
20358928	O	O
You	O	O
can	O	O
use	O	O
the	O	O
utility	O	O
method	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
and	O	O
feed	O	O
that	O	O
result	O	O
into	O	O
a	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
.	O	I-api_mention
ArrayList	B-api_mention	I-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Other	O	O
options	O	O
:	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
Collection	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
constructor	O	O
.	O	O
#	O	O
li	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
li	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
li	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
singletonList	I-api_mention	I-api_mention
method	O	O
.	O	O
Question	O	O
-	O	O
25441088	O	O
,	O	O
answer	O	O
-	O	O
25441208	O	O
I	O	O
think	O	O
you	O	O
'	O	O
re	O	O
just	O	O
looking	O	O
for	O	O
the	O	O
overload	O	O
which	O	O
takes	O	O
another	O	O
Collector	B-api_mention	B-api_mention
to	O	O
specify	O	O
what	O	O
to	O	O
do	O	O
with	O	O
each	O	O
group	O	O
.	O	O
.	O	O
.	O	O
and	O	O
then	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
counting	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
do	O	O
the	O	O
counting	O	O
:	O	O
#	O	O
pre	O	O
Result	O	O
:	O	O
{	O	O
Hello	O	O
=	O	O
2	O	O
,	O	O
World	O	O
=	O	O
1	O	O
}	O	O
(	O	O
There	O	O
'	O	O
s	O	O
also	O	O
the	O	O
possibility	O	O
of	O	O
using	O	O
groupingByConcurrent	B-api_mention	B-api_mention
for	O	O
more	O	O
efficiency	O	O
.	O	O
Something	O	O
to	O	O
bear	O	O
in	O	O
mind	O	O
for	O	O
your	O	O
real	O	O
code	O	O
,	O	O
if	O	O
it	O	O
would	O	O
be	O	O
safe	O	O
in	O	O
your	O	O
context	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
4645020	O	O
It	O	O
is	O	O
supposed	O	O
to	O	O
be	O	O
generally	O	O
preferable	O	O
to	O	O
use	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
for	O	O
string	O	O
concatenation	O	O
in	O	O
Java	O	O
.	O	O
Is	O	O
this	O	O
always	O	O
the	O	O
case	O	O
?	O	O
What	O	O
I	O	O
mean	O	O
is	O	O
this	O	O
:	O	O
Is	O	O
the	O	O
overhead	O	O
of	O	O
creating	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
object	O	O
,	O	O
calling	O	O
the	O	O
append	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
and	O	O
finally	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
already	O	O
smaller	O	O
then	O	O
concatenating	O	O
existing	O	O
strings	O	O
with	O	O
the	O	O
+	O	O
operator	O	O
for	O	O
two	O	O
strings	O	O
,	O	O
or	O	O
is	O	O
it	O	O
only	O	O
advisable	O	O
for	O	O
more	O	O
(	O	O
than	O	O
two	O	O
)	O	O
strings	O	O
?	O	O
If	O	O
there	O	O
is	O	O
such	O	O
a	O	O
threshold	O	O
,	O	O
what	O	O
does	O	O
it	O	O
depend	O	O
on	O	O
(	O	O
perhaps	O	O
the	O	O
string	O	O
length	O	O
,	O	O
but	O	O
in	O	O
which	O	O
way	O	O
)	O	O
?	O	O
And	O	O
finally	O	O
,	O	O
would	O	O
you	O	O
trade	O	O
the	O	O
readability	O	O
and	O	O
conciseness	O	O
of	O	O
the	O	O
+	O	O
concatenation	O	O
for	O	O
the	O	O
performance	O	O
of	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
in	O	O
smaller	O	O
cases	O	O
like	O	O
two	O	O
,	O	O
three	O	O
or	O	O
four	O	O
strings	O	O
?	O	O
EDIT	O	O
Explicit	O	O
use	O	O
of	O	O
StringBuilder	B-api_mention	B-api_mention
for	O	O
regular	O	O
concatenations	O	O
is	O	O
being	O	O
mentioned	O	O
as	O	O
obsolete	O	O
at	O	O
obsolete	O	O
java	O	O
optimization	O	O
tips	O	O
as	O	O
well	O	O
as	O	O
at	O	O
java	O	O
urban	O	O
myths	O	O
.	O	O
Question	O	O
-	O	O
23699371	O	O
In	O	O
Java	O	O
8	O	O
how	O	O
can	O	O
I	O	O
filter	O	O
a	O	O
collection	O	O
using	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
by	O	O
checking	O	O
the	O	O
distinctness	O	O
of	O	O
a	O	O
property	O	O
of	O	O
each	O	O
object	O	O
?	O	O
For	O	O
example	O	O
I	O	O
have	O	O
a	O	O
list	O	O
of	O	O
Person	O	O
object	O	O
and	O	O
I	O	O
want	O	O
to	O	O
remove	O	O
people	O	O
with	O	O
the	O	O
same	O	O
name	O	O
,	O	O
persons	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
distinct	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Will	O	O
use	O	O
the	O	O
default	O	O
equality	O	O
check	O	O
for	O	O
a	O	O
Person	O	B-api_mention
object	O	O
,	O	O
so	O	O
I	O	O
need	O	O
something	O	O
like	O	O
,	O	O
persons	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
distinct	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Unfortunately	O	O
the	O	O
distinct	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
no	O	O
such	O	O
overload	O	O
.	O	O
Without	O	O
modifying	O	O
the	O	O
equality	O	O
check	O	O
inside	O	O
the	O	O
Person	O	O
class	O	O
is	O	O
it	O	O
possible	O	O
to	O	O
do	O	O
this	O	O
succinctly	O	O
?	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29111023	O	O
Although	O	O
there	O	O
are	O	O
several	O	O
answers	O	O
already	O	O
,	O	O
and	O	O
an	O	O
accepted	O	O
answer	O	O
,	O	O
there	O	O
are	O	O
still	O	O
a	O	O
couple	O	O
points	O	O
missing	O	O
from	O	O
this	O	O
topic	O	O
.	O	O
First	O	O
,	O	O
the	O	O
consensus	O	O
seems	O	O
to	O	O
be	O	O
that	O	O
solving	O	O
this	O	O
problem	O	O
using	O	O
streams	O	O
is	O	O
merely	O	O
an	O	O
exercise	O	O
,	O	O
and	O	O
that	O	O
the	O	O
conventional	O	O
for	O	O
-	O	O
loop	O	O
approach	O	O
is	O	O
preferable	O	O
.	O	O
Second	O	O
,	O	O
the	O	O
answers	O	O
given	O	O
thus	O	O
far	O	O
have	O	O
overlooked	O	O
an	O	O
approach	O	O
using	O	O
array	O	O
or	O	O
vector	O	O
-	O	O
style	O	O
techniques	O	O
that	O	O
I	O	O
think	O	O
improves	O	O
the	O	O
streams	O	O
solution	O	O
considerably	O	O
.	O	O
First	O	O
,	O	O
here	O	O
'	O	O
s	O	O
a	O	O
conventional	O	O
solution	O	O
,	O	O
for	O	O
purposes	O	O
of	O	O
discussion	O	O
and	O	O
analysis	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
mostly	O	O
straightforward	O	O
but	O	O
there	O	O
'	O	O
s	O	O
a	O	O
bit	O	O
of	O	O
subtlety	O	O
.	O	O
One	O	O
point	O	O
is	O	O
that	O	O
a	O	O
pending	O	O
sublist	O	O
from	O	O
prev	O	O
to	O	O
cur	O	O
is	O	O
always	O	O
open	O	O
.	O	O
When	O	O
we	O	O
encounter	O	O
null	O	O
we	O	O
close	O	O
it	O	O
,	O	O
add	O	O
it	O	O
to	O	O
the	O	O
result	O	O
list	O	O
,	O	O
and	O	O
advance	O	O
prev	O	O
.	O	O
After	O	O
the	O	O
loop	O	O
we	O	O
close	O	O
the	O	O
sublist	O	O
unconditionally	O	O
.	O	O
Another	O	O
observation	O	O
is	O	O
that	O	O
this	O	O
is	O	O
a	O	O
loop	O	O
over	O	O
indexes	O	O
,	O	O
not	O	O
over	O	O
the	O	O
values	O	O
themselves	O	O
,	O	O
thus	O	O
we	O	O
use	O	O
an	O	O
arithmetic	O	O
for	O	O
-	O	O
loop	O	O
instead	O	O
of	O	O
the	O	O
enhanced	O	O
"	O	O
for	O	O
-	O	O
each	O	O
"	O	O
loop	O	O
.	O	O
But	O	O
it	O	O
suggests	O	O
that	O	O
we	O	O
can	O	O
stream	O	O
using	O	O
the	O	O
indexes	O	O
to	O	O
generate	O	O
subranges	O	O
instead	O	O
of	O	O
streaming	O	O
over	O	O
values	O	O
and	O	O
putting	O	O
the	O	O
logic	O	O
into	O	O
the	O	O
collector	O	O
(	O	O
as	O	O
was	O	O
done	O	O
by	O	O
Joop	O	O
Eggen	O	O
'	O	O
s	O	O
proposed	O	O
solution	O	O
)	O	O
.	O	O
Once	O	O
we	O	O
'	O	O
ve	O	O
realized	O	O
that	O	O
,	O	O
we	O	O
can	O	O
see	O	O
that	O	O
each	O	O
position	O	O
of	O	O
null	O	O
in	O	O
the	O	O
input	O	O
is	O	O
the	O	O
delimiter	O	O
for	O	O
a	O	O
sublist	O	O
:	O	O
it	O	O
'	O	O
s	O	O
the	O	O
right	O	O
end	O	O
of	O	O
the	O	O
sublist	O	O
to	O	O
the	O	O
left	O	O
,	O	O
and	O	O
it	O	O
(	O	O
plus	O	O
one	O	O
)	O	O
is	O	O
the	O	O
left	O	O
end	O	O
of	O	O
the	O	O
sublist	O	O
to	O	O
the	O	O
right	O	O
.	O	O
If	O	O
we	O	O
can	O	O
handle	O	O
the	O	O
edge	O	O
cases	O	O
,	O	O
it	O	O
leads	O	O
to	O	O
an	O	O
approach	O	O
where	O	O
we	O	O
find	O	O
the	O	O
indexes	O	O
at	O	O
which	O	O
null	O	O
elements	O	O
occur	O	O
,	O	O
map	O	O
them	O	O
to	O	O
sublists	O	O
,	O	O
and	O	O
collect	O	O
the	O	O
sublists	O	O
.	O	O
The	O	O
resulting	O	O
code	O	O
is	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
Getting	O	O
the	O	O
indexes	O	O
at	O	O
which	O	O
null	O	O
occurs	O	O
is	O	O
pretty	O	O
easy	O	O
.	O	O
The	O	O
stumbling	O	O
block	O	O
is	O	O
adding	O	O
-	O	O
1	O	O
at	O	O
the	O	O
left	O	O
and	O	O
size	O	O
at	O	O
the	O	O
right	O	O
end	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
opted	O	O
to	O	O
use	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
to	O	O
do	O	O
the	O	O
appending	O	O
and	O	O
then	O	O
flatMapToInt	B-api_mention	B-api_mention
to	O	O
flatten	O	O
them	O	O
out	O	O
.	O	O
(	O	O
I	O	O
tried	O	O
several	O	O
other	O	O
approaches	O	O
but	O	O
this	O	O
one	O	O
seemed	O	O
like	O	O
the	O	O
cleanest	O	O
.	O	O
)	O	O
It	O	O
'	O	O
s	O	O
a	O	O
bit	O	O
more	O	O
convenient	O	O
to	O	O
use	O	O
arrays	O	O
for	O	O
the	O	O
indexes	O	O
here	O	O
.	O	O
First	O	O
,	O	O
the	O	O
notation	O	O
for	O	O
accessing	O	O
an	O	O
array	O	O
is	O	O
nicer	O	O
than	O	O
for	O	O
a	O	O
List	B-api_mention	B-api_mention
:	O	O
indexes	O	O
[	O	O
i	O	O
]	O	O
vs	O	O
.	O	O
indexes	O	O
.	B-api_mention	B-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Second	O	O
,	O	O
using	O	O
an	O	O
array	O	O
avoids	O	O
boxing	O	O
.	O	O
At	O	O
this	O	O
point	O	O
,	O	O
each	O	O
index	O	O
value	O	O
in	O	O
the	O	O
array	O	O
(	O	O
except	O	O
for	O	O
the	O	O
last	O	O
)	O	O
is	O	O
one	O	O
less	O	O
than	O	O
the	O	O
beginning	O	O
position	O	O
of	O	O
a	O	O
sublist	O	O
.	O	O
The	O	O
index	O	O
to	O	O
its	O	O
immediate	O	O
right	O	O
is	O	O
the	O	O
end	O	O
of	O	O
the	O	O
sublist	O	O
.	O	O
We	O	O
simply	O	O
stream	O	O
over	O	O
the	O	O
array	O	O
and	O	O
map	O	O
each	O	O
pair	O	O
of	O	O
indexes	O	O
into	O	O
a	O	O
sublist	O	O
and	O	O
collect	O	O
the	O	O
output	O	O
.	O	O
Discussion	O	O
The	O	O
streams	O	O
approach	O	O
is	O	O
slightly	O	O
shorter	O	O
than	O	O
the	O	O
for	O	O
-	O	O
loop	O	O
version	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
denser	O	O
.	O	O
The	O	O
for	O	O
-	O	O
loop	O	O
version	O	O
is	O	O
familiar	O	O
,	O	O
because	O	O
we	O	O
do	O	O
this	O	O
stuff	O	O
in	O	O
Java	O	O
all	O	O
the	O	O
time	O	O
,	O	O
but	O	O
if	O	O
you	O	O
'	O	O
re	O	O
not	O	O
already	O	O
aware	O	O
of	O	O
what	O	O
this	O	O
loop	O	O
is	O	O
supposed	O	O
to	O	O
be	O	O
doing	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
obvious	O	O
.	O	O
You	O	O
might	O	O
have	O	O
to	O	O
simulate	O	O
a	O	O
few	O	O
loop	O	O
executions	O	O
before	O	O
you	O	O
figure	O	O
out	O	O
what	O	O
prev	O	O
is	O	O
doing	O	O
and	O	O
why	O	O
the	O	O
open	O	O
sublist	O	O
has	O	O
to	O	O
be	O	O
closed	O	O
after	O	O
the	O	O
end	O	O
of	O	O
the	O	O
loop	O	O
.	O	O
(	O	O
I	O	O
initially	O	O
forgot	O	O
to	O	O
have	O	O
it	O	O
,	O	O
but	O	O
I	O	O
caught	O	O
this	O	O
in	O	O
testing	O	O
.	O	O
)	O	O
The	O	O
streams	O	O
approach	O	O
is	O	O
,	O	O
I	O	O
think	O	O
,	O	O
easier	O	O
to	O	O
conceptualize	O	O
what	O	O
'	O	O
s	O	O
going	O	O
on	O	O
:	O	O
get	O	O
a	O	O
list	O	O
(	O	O
or	O	O
an	O	O
array	O	O
)	O	O
that	O	O
indicates	O	O
the	O	O
boundaries	O	O
between	O	O
sublists	O	O
.	O	O
That	O	O
'	O	O
s	O	O
an	O	O
easy	O	O
streams	O	O
two	O	O
-	O	O
liner	O	O
.	O	O
The	O	O
difficulty	O	O
,	O	O
as	O	O
I	O	O
mentioned	O	O
above	O	O
,	O	O
is	O	O
finding	O	O
a	O	O
way	O	O
to	O	O
tack	O	O
the	O	O
edge	O	O
values	O	O
onto	O	O
the	O	O
ends	O	O
.	O	O
If	O	O
there	O	O
were	O	O
a	O	O
better	O	O
syntax	O	O
for	O	O
doing	O	O
this	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
/	O	O
/	O	O
Java	O	O
plus	O	O
pidgin	O	O
Scala	O	O
int	O	O
[	O	O
]	O	O
indexes	O	O
=	O	O
[	O	O
-	O	O
1	O	O
]	O	O
+	O	O
+	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
+	O	O
+	O	O
[	O	O
input	O	O
.	B-api_mention	B-api_mention
size	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
]	O	O
;	O	O
it	O	O
would	O	O
make	O	O
things	O	O
a	O	O
lot	O	O
less	O	O
cluttered	O	O
.	O	O
(	O	O
What	O	O
we	O	O
really	O	O
need	O	O
is	O	O
array	O	O
or	O	O
list	O	O
comprehension	O	O
.	O	O
)	O	O
Once	O	O
you	O	O
have	O	O
the	O	O
indexes	O	O
,	O	O
it	O	O
'	O	O
s	O	O
a	O	O
simple	O	O
matter	O	O
to	O	O
map	O	O
them	O	O
into	O	O
actual	O	O
sublists	O	O
and	O	O
collect	O	O
them	O	O
into	O	O
the	O	O
result	O	O
list	O	O
.	O	O
And	O	O
of	O	O
course	O	O
this	O	O
is	O	O
safe	O	O
when	O	O
run	O	O
in	O	O
parallel	O	O
.	O	O
UPDATE	O	O
2016	O	O
-	O	O
02	O	O
-	O	O
06	O	O
Here	O	O
'	O	O
s	O	O
a	O	O
nicer	O	O
way	O	O
to	O	O
create	O	O
the	O	O
array	O	O
of	O	O
sublist	O	O
indexes	O	O
.	O	O
It	O	O
'	O	O
s	O	O
based	O	O
on	O	O
the	O	O
same	O	O
principles	O	O
,	O	O
but	O	O
it	O	O
adjusts	O	O
the	O	O
index	O	O
range	O	O
and	O	O
adds	O	O
some	O	O
conditions	O	O
to	O	O
the	O	O
filter	O	O
to	O	O
avoid	O	O
having	O	O
to	O	O
concatenate	O	O
and	O	O
flatmap	O	O
the	O	O
indexes	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28681737	O	O
,	O	O
answer	O	O
-	O	O
28684917	O	O
The	O	O
short	O	O
answer	O	O
is	O	O
:	O	O
it	O	O
'	O	O
s	O	O
safe	O	O
if	O	O
you	O	O
use	O	O
them	O	O
safely	O	O
:	O	O
)	O	O
The	O	O
snarky	O	O
answer	O	O
:	O	O
tell	O	O
me	O	O
what	O	O
you	O	O
mean	O	O
by	O	O
traits	O	O
,	O	O
and	O	O
maybe	O	O
I	O	O
'	O	O
ll	O	O
give	O	O
you	O	O
a	O	O
better	O	O
answer	O	O
:	O	O
)	O	O
In	O	O
all	O	O
seriousness	O	O
,	O	O
the	O	O
term	O	O
"	O	O
trait	O	O
"	O	O
is	O	O
not	O	O
well	O	O
-	O	O
defined	O	O
.	O	O
Many	O	O
Java	O	O
developers	O	O
are	O	O
most	O	O
familiar	O	O
with	O	O
traits	O	O
as	O	O
they	O	O
are	O	O
expressed	O	O
in	O	O
Scala	O	O
,	O	O
but	O	O
Scala	O	O
is	O	O
far	O	O
from	O	O
the	O	O
first	O	O
language	O	O
to	O	O
have	O	O
traits	O	O
,	O	O
either	O	O
in	O	O
name	O	O
or	O	O
in	O	O
effect	O	O
.	O	O
For	O	O
example	O	O
,	O	O
in	O	O
Scala	O	O
,	O	O
traits	O	O
are	O	O
stateful	O	O
(	O	O
can	O	O
have	O	O
var	O	O
variables	O	O
)	O	O
;	O	O
in	O	O
Fortress	O	O
they	O	O
are	O	O
pure	O	O
behavior	O	O
.	O	O
Java	O	O
'	O	O
s	O	O
interfaces	O	O
with	O	O
default	O	O
methods	O	O
are	O	O
stateless	O	O
;	O	O
does	O	O
this	O	O
mean	O	O
they	O	O
are	O	O
not	O	O
traits	O	O
?	O	O
(	O	O
Hint	O	O
:	O	O
that	O	O
was	O	O
a	O	O
trick	O	O
question	O	O
.	O	O
)	O	O
Again	O	O
,	O	O
in	O	O
Scala	O	O
,	O	O
traits	O	O
are	O	O
composed	O	O
through	O	O
linearization	O	O
;	O	O
if	O	O
class	O	O
A	O	O
extends	O	O
traits	O	O
X	O	O
and	O	O
Y	O	O
,	O	O
then	O	O
the	O	O
order	O	O
in	O	O
which	O	O
X	O	O
and	O	O
Y	O	O
are	O	O
mixed	O	O
in	O	O
determines	O	O
how	O	O
conflicts	O	O
between	O	O
X	O	O
and	O	O
Y	O	O
are	O	O
resolved	O	O
.	O	O
In	O	O
Java	O	O
,	O	O
this	O	O
linearization	O	O
mechanism	O	O
is	O	O
not	O	O
present	O	O
(	O	O
it	O	O
was	O	O
rejected	O	O
,	O	O
in	O	O
part	O	O
,	O	O
because	O	O
it	O	O
was	O	O
too	O	O
"	O	O
un	O	O
-	O	O
Java	O	O
-	O	O
like	O	O
"	O	O
.	O	O
)	O	O
The	O	O
proximate	O	O
reason	O	O
for	O	O
adding	O	O
default	O	O
methods	O	O
to	O	O
interfaces	O	O
was	O	O
to	O	O
support	O	O
interface	O	O
evolution	O	O
,	O	O
but	O	O
we	O	O
were	O	O
well	O	O
aware	O	O
that	O	O
we	O	O
were	O	O
going	O	O
beyond	O	O
that	O	O
.	O	O
Whether	O	O
you	O	O
consider	O	O
that	O	O
to	O	O
be	O	O
"	O	O
interface	O	O
evolution	O	O
+	O	O
+	O	O
"	O	O
or	O	O
"	O	O
traits	O	O
-	O	O
-	O	O
"	O	O
is	O	O
a	O	O
matter	O	O
of	O	O
personal	O	O
interpretation	O	O
.	O	O
So	O	O
,	O	O
to	O	O
answer	O	O
your	O	O
question	O	O
about	O	O
safety	O	O
.	O	O
.	O	O
.	O	O
so	O	O
long	O	O
as	O	O
you	O	O
stick	O	O
to	O	O
what	O	O
the	O	O
mechanism	O	O
actually	O	O
supports	O	O
,	O	O
rather	O	O
than	O	O
trying	O	O
to	O	O
wishfully	O	O
stretch	O	O
it	O	O
to	O	O
something	O	O
it	O	O
does	O	O
not	O	O
support	O	O
,	O	O
you	O	O
should	O	O
be	O	O
fine	O	O
.	O	O
A	O	O
key	O	O
design	O	O
goal	O	O
was	O	O
that	O	O
,	O	O
from	O	O
the	O	O
perspective	O	O
of	O	O
the	O	O
client	O	O
of	O	O
an	O	O
interface	O	O
,	O	O
default	O	O
methods	O	O
should	O	O
be	O	O
indistinguishable	O	O
from	O	O
"	O	O
regular	O	O
"	O	O
interface	O	O
methods	O	O
.	O	O
The	O	O
default	O	O
-	O	O
ness	O	O
of	O	O
a	O	O
method	O	O
,	O	O
therefore	O	O
,	O	O
is	O	O
only	O	O
interesting	O	O
to	O	O
the	O	O
designer	O	O
and	O	O
implementor	O	O
of	O	O
the	O	O
interface	O	O
.	O	O
Here	O	O
are	O	O
some	O	O
use	O	O
cases	O	O
that	O	O
are	O	O
well	O	O
within	O	O
the	O	O
design	O	O
goals	O	O
:	O	O
#	O	O
li	O	O
Interface	O	O
evolution	O	O
.	O	O
Here	O	O
,	O	O
we	O	O
are	O	O
adding	O	O
a	O	O
new	O	O
method	O	O
to	O	O
an	O	O
existing	O	O
interface	O	O
,	O	O
which	O	O
has	O	O
a	O	O
sensible	O	O
default	O	O
implementation	O	O
in	O	O
terms	O	O
of	O	O
existing	O	O
methods	O	O
on	O	O
that	O	O
interface	O	O
.	O	O
An	O	O
example	O	O
would	O	O
be	O	O
adding	O	O
the	O	O
forEach	B-api_mention	B-api_mention
method	O	O
to	O	O
Collection	B-api_mention	B-api_mention
,	O	O
where	O	O
the	O	O
default	O	O
implementation	O	O
is	O	O
written	O	O
in	O	O
terms	O	O
of	O	O
the	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
li	O	O
"	O	O
Optional	O	O
"	O	O
methods	O	O
.	O	O
Here	O	O
,	O	O
the	O	O
designer	O	O
of	O	O
an	O	O
interface	O	O
is	O	O
saying	O	O
"	O	O
Implementors	O	O
need	O	O
not	O	O
implement	O	O
this	O	O
method	O	O
if	O	O
they	O	O
are	O	O
willing	O	O
to	O	O
live	O	O
with	O	O
the	O	O
limitations	O	O
in	O	O
functionality	O	O
that	O	O
entails	O	O
"	O	O
.	O	O
For	O	O
example	O	O
,	O	O
Iterator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
was	O	O
given	O	O
a	O	O
default	O	O
which	O	O
throws	O	O
UnsupportedOperationException	B-api_mention	B-api_mention
;	O	O
since	O	O
the	O	O
vast	O	O
majority	O	O
of	O	O
implementations	O	O
of	O	O
Iterator	O	O
have	O	O
this	O	O
behavior	O	O
anyway	O	O
,	O	O
the	O	O
default	O	O
makes	O	O
this	O	O
method	O	O
essentially	O	O
optional	O	O
.	O	O
(	O	O
If	O	O
the	O	O
behavior	O	O
from	O	O
AbstractCollection	B-api_mention	B-api_mention
were	O	O
expressed	O	O
as	O	O
defaults	O	O
on	O	O
Collection	B-api_mention	B-api_mention
,	O	O
we	O	O
might	O	O
do	O	O
the	O	O
same	O	O
for	O	O
the	O	O
mutative	O	O
methods	O	O
.	O	O
)	O	O
#	O	O
li	O	O
Convenience	O	O
methods	O	O
.	O	O
These	O	O
are	O	O
methods	O	O
that	O	O
are	O	O
strictly	O	O
for	O	O
convenience	O	O
,	O	O
again	O	O
generally	O	O
implemented	O	O
in	O	O
terms	O	O
of	O	O
non	O	O
-	O	O
default	O	O
methods	O	O
on	O	O
the	O	O
class	O	O
.	O	O
The	O	O
logger	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
your	O	O
first	O	O
example	O	O
is	O	O
a	O	O
reasonable	O	O
illustration	O	O
of	O	O
this	O	O
.	O	O
#	O	O
li	O	O
Combinators	O	O
.	O	O
These	O	O
are	O	O
compositional	O	O
methods	O	O
that	O	O
instantiate	O	O
new	O	O
instances	O	O
of	O	O
the	O	O
interface	O	O
based	O	O
on	O	O
the	O	O
current	O	O
instance	O	O
.	O	O
For	O	O
example	O	O
,	O	O
the	O	O
methods	O	O
Predicate	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
and	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Comparator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
thenComparing	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
examples	O	O
of	O	O
combinators	O	O
.	O	O
If	O	O
you	O	O
provide	O	O
a	O	O
default	O	O
implementation	O	O
,	O	O
you	O	O
should	O	O
also	O	O
provide	O	O
some	O	O
specification	O	O
for	O	O
the	O	O
default	O	O
(	O	O
in	O	O
the	O	O
JDK	O	O
,	O	O
we	O	O
use	O	O
the	O	O
@	O	O
implSpec	O	O
javadoc	O	O
tag	O	O
for	O	O
this	O	O
)	O	O
to	O	O
aid	O	O
implementors	O	O
in	O	O
understanding	O	O
whether	O	O
they	O	O
want	O	O
to	O	O
override	O	O
the	O	O
method	O	O
or	O	O
not	O	O
.	O	O
Some	O	O
defaults	O	O
,	O	O
like	O	O
convenience	O	O
methods	O	O
and	O	O
combinators	O	O
,	O	O
are	O	O
almost	O	O
never	O	O
overridden	O	O
;	O	O
others	O	O
,	O	O
like	O	O
optional	O	O
methods	O	O
,	O	O
are	O	O
often	O	O
overridden	O	O
.	O	O
You	O	O
need	O	O
to	O	O
provide	O	O
enough	O	O
specification	O	O
(	O	O
not	O	O
just	O	O
documentation	O	O
)	O	O
about	O	O
what	O	O
the	O	O
default	O	O
promises	O	O
to	O	O
do	O	O
,	O	O
so	O	O
the	O	O
implementor	O	O
can	O	O
make	O	O
a	O	O
sensible	O	O
decision	O	O
about	O	O
whether	O	O
they	O	O
need	O	O
to	O	O
override	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
5694385	O	O
,	O	O
answer	O	O
-	O	O
5694473	O	O
Create	O	O
a	O	O
File	B-api_mention	B-api_mention
object	O	O
,	O	O
passing	O	O
the	O	O
directory	O	O
path	O	O
to	O	O
the	O	O
constructor	O	O
.	O	O
Use	O	O
the	O	O
listFiles	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
retrieve	O	O
an	O	O
array	O	O
of	O	O
File	B-api_mention	B-api_mention
objects	O	O
for	O	O
each	O	O
file	O	O
in	O	O
the	O	O
directory	O	O
,	O	O
and	O	O
then	O	O
call	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
get	O	O
the	O	O
filename	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5071040	O	O
,	O	O
answer	O	O
-	O	O
22547954	O	O
Always	O	O
use	O	O
either	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Using	O	O
"	O	O
"	O	O
+	O	O
number	O	O
is	O	O
an	O	O
overhead	O	O
and	O	O
does	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
25850328	O	O
,	O	O
answer	O	O
-	O	O
31838310	O	O
The	O	O
main	O	O
purpose	O	O
of	O	O
marker	B-api_mention	O
interfaces	O	O
is	O	O
to	O	O
create	O	O
special	O	O
types	O	O
where	O	O
types	O	O
themselves	O	O
have	O	O
no	O	O
behavior	O	O
of	O	O
their	O	O
own	O	O
.	O	O
#	O	O
pre	O	O
Here	O	O
save	O	O
method	O	O
makes	O	O
sure	O	O
that	O	O
only	O	O
the	O	O
objects	O	O
of	O	O
classes	O	O
that	O	O
implement	O	O
the	O	O
MarkerEntity	B-api_mention	B-api_mention
interface	O	O
are	O	O
saved	O	O
,	O	O
for	O	O
other	O	O
types	O	O
InvalidEntityFoundException	B-api_mention	B-api_mention
is	O	O
thrown	O	O
.	O	O
So	O	O
here	O	O
MarkerEntity	B-api_mention	B-api_mention
marker	O	O
interface	O	O
is	O	O
defining	O	O
a	O	O
type	O	O
that	O	O
adds	O	O
special	O	O
behavior	O	O
to	O	O
the	O	O
classes	O	O
implementing	O	O
it	O	O
.	O	O
Though	O	O
annotations	O	O
can	O	O
also	O	O
used	O	O
now	O	O
to	O	O
mark	O	O
classes	O	O
for	O	O
some	O	O
special	O	O
treatments	O	O
but	O	O
marker	O	O
annotations	O	O
are	O	O
replacement	O	O
for	O	O
naming	O	O
pattern	O	O
not	O	O
for	O	O
Marker	B-api_mention	B-api_mention
interfaces	O	O
.	O	O
But	O	O
marker	O	O
annotations	O	O
can	O	O
'	O	O
t	O	O
fully	O	O
replace	O	O
the	O	O
marker	O	O
interfaces	O	O
because	O	O
;	O	O
marker	O	O
interfaces	O	O
are	O	O
used	O	O
to	O	O
define	O	O
type	O	O
(	O	O
as	O	O
already	O	O
explained	O	O
above	O	O
)	O	O
where	O	O
as	O	O
marker	B-api_mention	O
annotations	O	O
do	O	O
not	O	O
.	O	O
Source	O	O
for	O	O
marker	B-api_mention	O
interface	O	O
comment	O	O
Question	O	O
-	O	O
22929237	O	O
,	O	O
answer	O	O
-	O	O
28564046	O	O
You	O	O
can	O	O
use	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
as	O	O
:	O	O
Date	B-api_mention	B-api_mention
date	O	O
=	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
No	O	O
need	O	O
to	O	O
add	O	O
time	O	O
and	O	O
time	O	O
zone	O	O
info	O	O
here	O	O
because	O	O
they	O	O
are	O	O
taken	O	O
implicitly	O	O
.	O	O
See	O	O
Simpliest	O	O
java8	O	O
LocalDate	B-api_mention	B-api_mention
to	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
conversion	O	O
and	O	O
vice	O	O
versa	O	O
?	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28596792	O	O
To	O	O
me	O	O
,	O	O
it	O	O
seems	O	O
that	O	O
"	O	O
because	O	O
it	O	O
should	O	O
behave	O	O
the	O	O
same	O	O
as	O	O
zero	O	O
"	O	O
would	O	O
make	O	O
a	O	O
good	O	O
answer	O	O
.	O	O
Arithmetic	O	O
overflow	O	O
and	O	O
underflow	O	O
should	O	O
be	O	O
handlable	O	O
similarly	O	O
.	O	O
If	O	O
you	O	O
underflow	O	O
from	O	O
the	O	O
largest	O	O
near	O	O
-	O	O
infinitesimally	O	O
small	O	O
value	O	O
which	O	O
can	O	O
be	O	O
stored	O	O
in	O	O
a	O	O
float	O	O
,	O	O
you	O	O
get	O	O
zero	O	O
,	O	O
and	O	O
zeros	O	O
compare	O	O
as	O	O
identical	O	O
.	O	O
If	O	O
you	O	O
overflow	O	O
from	O	O
the	O	O
largest	O	O
near	O	O
-	O	O
infinitely	O	O
large	O	O
value	O	O
which	O	O
can	O	O
be	O	O
stored	O	O
in	O	O
a	O	O
float	O	O
,	O	O
you	O	O
get	O	O
INF	O	O
,	O	O
and	O	O
INFs	O	O
compare	O	O
as	O	O
identical	O	O
.	O	O
This	O	O
means	O	O
that	O	O
code	O	O
which	O	O
handles	O	O
numbers	O	O
which	O	O
are	O	O
out	O	O
-	O	O
of	O	O
-	O	O
scope	O	O
in	O	O
both	O	O
directions	O	O
will	O	O
not	O	O
require	O	O
separate	O	O
special	O	O
-	O	O
casing	O	O
for	O	O
one	O	O
or	O	O
the	O	O
other	O	O
.	O	O
Instead	O	O
,	O	O
either	O	O
both	O	O
or	O	O
neither	O	O
will	O	O
need	O	O
to	O	O
be	O	O
treated	O	O
differently	O	O
.	O	O
And	O	O
the	O	O
simplest	O	O
requirement	O	O
is	O	O
covered	O	O
by	O	O
the	O	O
"	O	O
neither	O	O
"	O	O
case	O	O
:	O	O
you	O	O
want	O	O
to	O	O
check	O	O
if	O	O
something	O	O
over	O	O
/	O	O
underflowed	O	O
,	O	O
you	O	O
can	O	O
compare	O	O
it	O	O
to	O	O
zero	O	O
/	O	O
INF	O	O
using	O	O
just	O	O
the	O	O
normal	O	O
arithmetic	O	O
comparison	O	O
operators	O	O
,	O	O
without	O	O
needing	O	O
to	O	O
know	O	O
you	O	O
current	O	O
language	O	O
'	O	O
s	O	O
special	O	O
syntax	O	O
for	O	O
the	O	O
checking	O	O
command	O	O
:	O	O
is	O	O
it	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isInfinite	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
Float	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
checkForPositiveInfinity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
hasOverflowed	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
.	O	O
.	O	O
?	O	O
Question	O	O
-	O	O
31270759	O	O
Exceptions	O	O
,	O	O
especially	O	O
checked	O	O
ones	O	O
,	O	O
can	O	O
severely	O	O
interrupt	O	O
the	O	O
flow	O	O
of	O	O
program	O	O
logic	O	O
when	O	O
the	O	O
FP	O	O
idiom	O	O
is	O	O
used	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
Here	O	O
is	O	O
an	O	O
arbitrary	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
above	O	O
code	O	O
breaks	O	O
when	O	O
there	O	O
'	O	O
s	O	O
an	O	O
exception	O	O
for	O	O
an	O	O
unparseable	O	O
string	O	O
.	O	O
But	O	O
say	O	O
I	O	O
just	O	O
want	O	O
to	O	O
replace	O	O
that	O	O
with	O	O
a	O	O
default	O	O
value	O	O
,	O	O
much	O	O
like	O	O
I	O	O
can	O	O
with	O	O
Optional	B-api_mention	B-api_mention
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Of	O	O
course	O	O
,	O	O
this	O	O
still	O	O
fails	O	O
because	O	O
Optional	B-api_mention	B-api_mention
only	O	O
handles	O	O
null	O	O
s	O	O
.	O	O
I	O	O
would	O	O
like	O	O
something	O	O
as	O	O
follows	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
:	O	O
this	O	O
is	O	O
a	O	O
self	O	O
-	O	O
answered	O	O
question	O	O
.	O	O
Question	O	O
-	O	O
19235606	O	O
,	O	O
answer	O	O
-	O	O
19235857	O	O
Spliterator	B-api_mention	B-api_mention
basically	O	O
means	O	O
"	O	O
splittable	O	O
Iterator	O	O
"	O	O
.	O	O
Single	O	O
thread	O	O
can	O	O
traverse	O	O
/	O	O
process	O	O
the	O	O
entire	O	O
Spliterator	B-api_mention	B-api_mention
itself	O	O
,	O	O
but	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
also	O	O
has	O	O
a	O	O
method	O	O
trySplit	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
will	O	O
"	O	O
split	O	O
off	O	O
"	O	O
a	O	O
section	O	O
for	O	O
someone	O	O
else	O	O
(	O	O
typically	O	O
,	O	O
another	O	O
thread	O	O
)	O	O
to	O	O
process	O	O
-	O	O
-	O	O
leaving	O	O
the	O	O
current	O	O
spliterator	O	O
with	O	O
less	O	O
work	O	O
.	O	O
Collector	B-api_mention	B-api_mention
combines	O	O
the	O	O
specification	O	O
of	O	O
a	O	O
reduce	O	O
function	O	O
(	O	O
of	O	O
map	O	O
-	O	O
reduce	O	O
fame	O	O
)	O	O
,	O	O
with	O	O
an	O	O
initial	O	O
value	O	O
,	O	O
and	O	O
a	O	O
value	O	O
to	O	O
combine	O	O
two	O	O
results	O	O
(	O	O
thus	O	O
enabling	O	O
results	O	O
from	O	O
Spliterated	O	O
streams	O	O
of	O	O
work	O	O
,	O	O
to	O	O
be	O	O
combined	O	O
.	O	O
)	O	O
For	O	O
example	O	O
,	O	O
the	O	O
most	O	O
basic	O	O
Collector	B-api_mention	B-api_mention
would	O	O
have	O	O
an	O	O
initial	O	O
vaue	O	O
of	O	O
0	O	O
,	O	O
add	O	O
an	O	O
integer	O	O
onto	O	O
an	O	O
existing	O	O
result	O	O
,	O	O
and	O	O
would	O	O
'	O	O
combine	O	O
'	O	O
two	O	O
results	O	O
by	O	O
adding	O	O
them	O	O
.	O	O
Thus	O	O
summing	O	O
a	O	O
spliterated	O	O
stream	O	O
of	O	O
integers	O	O
.	O	O
See	O	O
:	O	O
#	O	O
li	O	O
Spliterator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
trySplit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Collector	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
,	I-api_mention	O
A	I-api_mention	O
,	I-api_mention	O
R	I-api_mention	O
>	I-api_mention	O
Question	O	O
-	O	O
12317668	O	O
,	O	O
answer	O	O
-	O	O
12375312	O	O
Here	O	O
we	O	O
are	O	O
faced	O	O
with	O	O
a	O	O
bug	O	O
in	O	O
the	O	O
JIT	O	O
-	O	O
compiler	O	O
.	O	O
Compiler	O	O
determines	O	O
that	O	O
the	O	O
allocated	O	O
array	O	O
is	O	O
filled	O	O
after	O	O
allocation	O	O
in	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
the	O	O
check	O	O
for	O	O
uses	O	O
between	O	O
the	O	O
allocation	O	O
and	O	O
the	O	O
fill	O	O
is	O	O
faulty	O	O
.	O	O
So	O	O
,	O	O
compiler	O	O
performs	O	O
an	O	O
illegal	O	O
optimization	O	O
-	O	O
it	O	O
skips	O	O
zeroing	O	O
of	O	O
allocated	O	O
array	O	O
.	O	O
This	O	O
bug	O	O
is	O	O
placed	O	O
in	O	O
Oracle	O	O
bug	O	O
tracker	O	O
(	O	O
bug	O	O
id	O	O
7196857	O	O
)	O	O
.	O	O
Unfortunately	O	O
,	O	O
I	O	O
did	O	O
not	O	O
wait	O	O
for	O	O
any	O	O
clarifications	O	O
from	O	O
Oracle	O	O
about	O	O
the	O	O
following	O	O
points	O	O
.	O	O
As	O	O
I	O	O
see	O	O
,	O	O
this	O	O
bug	O	O
is	O	O
OS	O	O
-	O	O
specific	O	O
:	O	O
it	O	O
absolutely	O	O
reproducible	O	O
on	O	O
64	O	O
-	O	O
bit	O	O
Linux	O	O
and	O	O
Mac	O	O
,	O	O
but	O	O
,	O	O
as	O	O
I	O	O
see	O	O
from	O	O
comments	O	O
,	O	O
it	O	O
reproduces	O	O
not	O	O
regularly	O	O
on	O	O
Windows	O	O
(	O	O
for	O	O
similar	O	O
versions	O	O
of	O	O
JDK	O	O
)	O	O
.	O	O
Additionally	O	O
it	O	O
would	O	O
be	O	O
nice	O	O
to	O	O
know	O	O
when	O	O
this	O	O
bug	O	O
will	O	O
be	O	O
fixed	O	O
.	O	O
There	O	O
is	O	O
only	O	O
advice	O	O
at	O	O
the	O	O
moment	O	O
:	O	O
do	O	O
not	O	O
use	O	O
JDK1	O	O
.	O	O
7	O	O
.	O	O
0	O	O
_	O	O
04	O	O
or	O	O
later	O	O
if	O	O
you	O	O
depend	O	O
on	O	O
JLS	O	O
for	O	O
newly	O	O
declared	O	O
arrays	O	O
.	O	O
Update	O	O
at	O	O
October	O	O
5	O	O
:	O	O
In	O	O
the	O	O
new	O	O
Build	O	O
10	O	O
of	O	O
the	O	O
JDK	O	O
7u10	O	O
(	O	O
early	O	O
access	O	O
)	O	O
released	O	O
at	O	O
October	O	O
04	O	O
,	O	O
2012	O	O
,	O	O
this	O	O
bug	O	O
was	O	O
fixed	O	O
at	O	O
least	O	O
for	O	O
Linux	O	O
OS	O	O
(	O	O
I	O	O
did	O	O
not	O	O
test	O	O
for	O	O
other	O	O
)	O	O
.	O	O
Thanks	O	O
to	O	O
@	O	O
Makoto	O	O
,	O	O
who	O	O
found	O	O
that	O	O
this	O	O
bug	O	O
is	O	O
no	O	O
longer	O	O
available	O	O
for	O	O
public	O	O
access	O	O
in	O	O
Oracle	O	O
bug	O	O
database	O	O
.	O	O
Unfortunately	O	O
,	O	O
I	O	O
do	O	O
not	O	O
know	O	O
for	O	O
the	O	O
reasons	O	O
Oracle	O	O
removed	O	O
it	O	O
from	O	O
public	O	O
access	O	O
,	O	O
but	O	O
it	O	O
is	O	O
available	O	O
in	O	O
Google	O	O
cache	O	O
.	O	O
Also	O	O
,	O	O
this	O	O
bug	O	O
has	O	O
caught	O	O
the	O	O
attention	O	O
of	O	O
Redhat	O	O
:	O	O
the	O	O
CVE	O	O
identifiers	O	O
CVE	O	O
-	O	O
2012	O	O
-	O	O
4420	O	O
(	O	O
bugzilla	O	O
)	O	O
and	O	O
CVE	O	O
-	O	O
2012	O	O
-	O	O
4416	O	O
(	O	O
bugzilla	O	O
)	O	O
were	O	O
assigned	O	O
to	O	O
this	O	O
flaw	O	O
.	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
12665271	O	O
Here	O	O
'	O	O
s	O	O
my	O	O
take	O	O
on	O	O
the	O	O
alternatives	O	O
:	O	O
1	O	O
)	O	O
#	O	O
pre	O	O
For	O	O
me	O	O
,	O	O
the	O	O
best	O	O
thing	O	O
coming	O	O
to	O	O
Java	O	O
from	O	O
traditional	O	O
C	O	O
+	O	O
+	O	O
15	O	O
years	O	O
ago	O	O
was	O	O
that	O	O
you	O	O
could	O	O
trust	O	O
your	O	O
program	O	O
.	O	O
Even	O	O
if	O	O
things	O	O
are	O	O
in	O	O
the	O	O
muck	O	O
and	O	O
going	O	O
wrong	O	O
,	O	O
which	O	O
they	O	O
often	O	O
do	O	O
,	O	O
I	O	O
want	O	O
the	O	O
rest	O	O
of	O	O
the	O	O
code	O	O
to	O	O
be	O	O
on	O	O
best	O	O
behaviour	O	O
and	O	O
smelling	O	O
of	O	O
roses	O	O
.	O	O
Indeed	O	O
,	O	O
the	O	O
BufferedWriter	B-api_mention	B-api_mention
might	O	O
throw	O	O
an	O	O
exception	O	O
here	O	O
.	O	O
Running	O	O
out	O	O
of	O	O
memory	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
unusual	O	O
,	O	O
for	O	O
instance	O	O
.	O	O
For	O	O
other	O	O
decorators	O	O
,	O	O
do	O	O
you	O	O
know	O	O
which	O	O
of	O	O
the	O	O
java	B-api_mention	O
.	I-api_mention	O
io	I-api_mention	O
wrapper	O	O
classes	O	O
throw	O	O
a	O	O
checked	O	O
exception	O	O
from	O	O
their	O	O
constructors	O	O
?	O	O
I	O	O
don	O	O
'	O	O
t	O	O
.	O	O
Doesn	O	O
'	O	O
t	O	O
do	O	O
code	O	O
understandability	O	O
much	O	O
good	O	O
if	O	O
you	O	O
rely	O	O
upon	O	O
that	O	O
sort	O	O
of	O	O
obscure	O	O
knowledge	O	O
.	O	O
Also	O	O
there	O	O
'	O	O
s	O	O
the	O	O
"	O	O
destruction	O	O
"	O	O
.	O	O
If	O	O
there	O	O
is	O	O
an	O	O
error	O	O
condition	O	O
,	O	O
then	O	O
you	O	O
probably	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
be	O	O
flushing	O	O
rubbish	O	O
to	O	O
a	O	O
file	O	O
that	O	O
needs	O	O
deleting	O	O
(	O	O
code	O	O
for	O	O
that	O	O
not	O	O
shown	O	O
)	O	O
.	O	O
Although	O	O
,	O	O
of	O	O
course	O	O
,	O	O
deleting	O	O
the	O	O
file	O	O
is	O	O
also	O	O
another	O	O
interesting	O	O
operation	O	O
to	O	O
do	O	O
as	O	O
error	O	O
handling	O	O
.	O	O
Generally	O	O
you	O	O
want	O	O
finally	O	O
blocks	O	O
to	O	O
be	O	O
as	O	O
short	O	O
and	O	O
reliable	O	O
as	O	O
possible	O	O
.	O	O
Adding	O	O
flushes	O	O
does	O	O
not	O	O
help	O	O
this	O	O
goal	O	O
.	O	O
For	O	O
many	O	O
releases	O	O
some	O	O
of	O	O
the	O	O
buffering	O	O
classes	O	O
in	O	O
the	O	O
JDK	O	O
had	O	O
a	O	O
bug	O	O
where	O	O
an	O	O
exception	O	O
from	O	O
flush	B-api_mention	O
within	O	O
close	B-api_mention	O
caused	O	O
close	B-api_mention	O
on	O	O
the	O	O
decorated	O	O
object	O	O
not	O	O
be	O	O
called	O	O
.	O	O
Whilst	O	O
that	O	O
has	O	O
been	O	O
fixed	O	O
for	O	O
some	O	O
time	O	O
,	O	O
expect	O	O
it	O	O
from	O	O
other	O	O
implementations	O	O
.	O	O
2	O	O
)	O	O
#	O	O
pre	O	O
We	O	O
'	O	O
re	O	O
still	O	O
flushing	O	O
in	O	O
the	O	O
implicit	O	O
finally	O	O
block	O	O
(	O	O
now	O	O
with	O	O
repeated	O	O
close	B-api_mention	O
-	O	O
this	O	O
gets	O	O
worse	O	O
as	O	O
you	O	O
add	O	O
more	O	O
decorators	O	O
)	O	O
,	O	O
but	O	O
the	O	O
construction	O	O
is	O	O
safe	O	O
and	O	O
we	O	O
have	O	O
to	O	O
implicit	O	O
finally	O	O
blocks	O	O
so	O	O
even	O	O
a	O	O
failed	O	O
flush	B-api_mention	O
doesn	O	O
'	O	O
t	O	O
prevent	O	O
resource	O	O
release	O	O
.	O	O
3	O	O
)	O	O
#	O	O
pre	O	O
There	O	O
'	O	O
s	O	O
a	O	O
bug	O	O
here	O	O
.	O	O
Should	O	O
be	O	O
:	O	O
#	O	O
pre	O	O
Some	O	O
poorly	O	O
implemented	O	O
decorators	O	O
are	O	O
in	O	O
fact	O	O
resource	O	O
and	O	O
will	O	O
need	O	O
to	O	O
be	O	O
closed	O	O
reliably	O	O
.	O	O
Also	O	O
some	O	O
streams	O	O
may	O	O
need	O	O
to	O	O
be	O	O
closed	O	O
in	O	O
a	O	O
particular	O	O
way	O	O
(	O	O
perhaps	O	O
they	O	O
are	O	O
doing	O	O
compression	O	O
and	O	O
need	O	O
to	O	O
write	O	O
bits	O	O
to	O	O
finish	O	O
off	O	O
,	O	O
and	O	O
can	O	O
'	O	O
t	O	O
just	O	O
flush	O	O
everything	O	O
.	O	O
Verdict	O	O
Although	O	O
3	O	O
is	O	O
a	O	O
technically	O	O
superior	O	O
solution	O	O
,	O	O
software	O	O
development	O	O
reasons	O	O
make	O	O
2	O	O
the	O	O
better	O	O
choice	O	O
.	O	O
However	O	O
,	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resource	O	O
is	O	O
still	O	O
an	O	O
inadequate	O	O
fix	O	O
and	O	O
you	O	O
should	O	O
stick	O	O
with	O	O
the	O	O
Execute	O	O
Around	O	O
idiom	O	O
,	O	O
which	O	O
should	O	O
have	O	O
a	O	O
clearer	O	O
syntax	O	O
with	O	O
closures	O	O
in	O	O
Java	O	O
SE	O	O
8	O	O
.	O	O
Question	O	O
-	O	O
20331163	O	O
,	O	O
answer	O	O
-	O	O
20331243	O	O
Create	O	O
a	O	O
DateTimeFormatter	B-api_mention	B-api_mention
using	O	O
DateTimeFormat	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forPattern	I-api_mention	I-api_mention
(	O	O
String	B-api_mention	B-api_mention
)	O	O
Using	O	O
Joda	O	O
time	O	O
you	O	O
would	O	O
do	O	O
it	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Also	O	O
,	O	O
if	O	O
you	O	O
wanted	O	O
to	O	O
use	O	O
standard	O	O
Java	O	O
,	O	O
you	O	O
would	O	O
do	O	O
it	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O

