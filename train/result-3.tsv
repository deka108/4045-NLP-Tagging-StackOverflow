Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26791724	O	O
Use	O	O
the	O	O
replaceEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
from	O	O
Apache	O	O
Commons	O	O
StringUtils	B-api_mention	O
:	O	O
StringUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replaceEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
12468764	O	O
,	O	O
answer	O	O
-	O	O
24537575	O	O
I	O	O
'	O	O
ve	O	O
found	O	O
a	O	O
very	O	O
nice	O	O
and	O	O
concise	O	O
solution	O	O
,	O	O
especially	O	O
useful	O	O
when	O	O
you	O	O
cannot	O	O
modify	O	O
enum	O	O
classes	O	O
as	O	O
it	O	O
was	O	O
in	O	O
my	O	O
case	O	O
.	O	O
Then	O	O
you	O	O
should	O	O
provide	O	O
a	O	O
custom	O	O
ObjectMapper	B-api_mention	B-api_mention
with	O	O
a	O	O
certain	O	O
feature	O	O
enabled	O	O
.	O	O
Those	O	O
features	O	O
are	O	O
available	O	O
since	O	O
Jackson	O	O
1	O	O
.	O	O
6	O	O
.	O	O
So	O	O
you	O	O
only	O	O
need	O	O
to	O	O
write	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
your	O	O
enum	O	O
.	O	O
#	O	O
pre	O	O
There	O	O
are	O	O
more	O	O
enum	O	O
-	O	O
related	O	O
features	O	O
available	O	O
,	O	O
see	O	O
here	O	O
:	O	O
#	O	O
a	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
29140402	O	O
,	O	O
answer	O	O
-	O	O
38628203	O	O
In	O	O
intellij	O	O
you	O	O
can	O	O
auto	O	O
generate	O	O
toString	B-api_mention	B-api_mention
method	O	O
by	O	O
pressing	O	O
alt	O	O
+	O	O
inset	O	O
and	O	O
then	O	O
selecting	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
here	O	O
is	O	O
an	O	O
out	O	O
put	O	O
for	O	O
a	O	O
test	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
it	O	O
generates	O	O
a	O	O
String	B-api_mention	B-api_mention
by	O	O
concatenating	O	O
,	O	O
several	O	O
attributes	O	O
of	O	O
the	O	O
class	O	O
,	O	O
for	O	O
primitives	O	O
it	O	O
will	O	O
print	O	O
their	O	O
values	O	O
and	O	O
for	O	O
reference	O	O
types	O	O
it	O	O
will	O	O
use	O	O
their	O	O
class	O	O
type	O	O
(	O	O
in	O	O
this	O	O
case	O	O
to	O	O
string	O	O
method	O	O
of	O	O
Test2	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
16229988	O	O
My	O	O
solution	O	O
is	O	O
to	O	O
do	O	O
a	O	O
"	O	O
extract	O	O
method	O	O
"	O	O
refactoring	O	O
,	O	O
as	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
printToFile	B-api_mention	B-api_mention
can	O	O
be	O	O
written	O	O
either	O	O
#	O	O
pre	O	O
or	O	O
#	O	O
pre	O	O
For	O	O
class	O	O
lib	O	O
designers	O	O
,	O	O
I	O	O
will	O	O
suggest	O	O
them	O	O
extend	O	O
the	O	O
AutoClosable	B-api_mention	B-api_mention
interface	O	O
with	O	O
an	O	O
additional	O	O
method	O	O
to	O	O
suppress	O	O
the	O	O
close	O	O
.	O	O
In	O	O
this	O	O
case	O	O
we	O	O
can	O	O
then	O	O
manually	O	O
control	O	O
the	O	O
close	O	O
behavior	O	O
.	O	O
For	O	O
language	O	O
designers	O	O
,	O	O
the	O	O
lesson	O	O
is	O	O
that	O	O
adding	O	O
a	O	O
new	O	O
feature	O	O
could	O	O
mean	O	O
adding	O	O
a	O	O
lot	O	O
others	O	O
.	O	O
In	O	O
this	O	O
Java	O	O
case	O	O
,	O	O
obviously	O	O
ARM	O	O
feature	O	O
will	O	O
work	O	O
better	O	O
with	O	O
a	O	O
resource	O	O
ownership	O	O
transfer	O	O
mechanism	O	O
.	O	O
UPDATE	O	O
Originally	O	O
the	O	O
code	O	O
above	O	O
requires	O	O
@	O	O
SuppressWarning	O	O
since	O	O
the	O	O
BufferedWriter	B-api_mention	B-api_mention
inside	O	O
the	O	O
function	O	O
requires	O	O
close	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
As	O	O
suggested	O	O
by	O	O
a	O	O
comment	O	O
,	O	O
if	O	O
flush	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
be	O	O
called	O	O
before	O	O
close	O	O
the	O	O
writer	O	O
,	O	O
we	O	O
need	O	O
to	O	O
do	O	O
so	O	O
before	O	O
any	O	O
return	B-api_mention	O
(	O	O
implicit	O	O
or	O	O
explicit	O	O
)	O	O
statements	O	O
inside	O	O
the	O	O
try	O	O
block	O	O
.	O	O
There	O	O
is	O	O
currently	O	O
no	O	O
way	O	O
to	O	O
ensure	O	O
the	O	O
caller	O	O
doing	O	O
this	O	O
I	O	O
think	O	O
,	O	O
so	O	O
this	O	O
must	O	O
be	O	O
documented	O	O
for	O	O
writeFileWriter	B-api_mention	B-api_mention
.	O	I-api_mention
UPDATE	O	I-api_mention
AGAIN	O	O
The	O	O
above	O	O
update	O	O
makes	O	O
@	O	O
SuppressWarning	O	O
unnecessary	O	O
since	O	O
it	O	O
require	O	O
the	O	O
function	O	O
to	O	O
return	O	O
the	O	O
resource	O	O
to	O	O
the	O	O
caller	O	O
,	O	O
so	O	O
itself	O	O
does	O	O
not	O	O
necessary	O	O
being	O	O
closed	O	O
.	O	O
Unfortunately	O	O
,	O	O
this	O	O
pull	O	O
us	O	O
back	O	O
to	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
situation	O	O
:	O	O
the	O	O
warning	O	O
is	O	O
now	O	O
moved	O	O
back	O	O
to	O	O
the	O	O
caller	O	O
side	O	O
.	O	O
So	O	O
to	O	O
properly	O	O
solve	O	O
this	O	O
,	O	O
we	O	O
need	O	O
a	O	O
customised	O	O
AutoClosable	B-api_mention	B-api_mention
that	O	O
whenever	O	O
it	O	O
closes	O	O
,	O	O
the	O	O
underline	O	O
BufferedWriter	B-api_mention	B-api_mention
shall	O	O
be	O	O
flush	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
ed	O	O
.	O	O
Actually	O	O
,	O	O
this	O	O
shows	O	O
us	O	O
another	O	O
way	O	O
to	O	O
bypass	O	O
the	O	O
warning	O	O
,	O	O
since	O	O
the	O	O
BufferWriter	B-api_mention	B-api_mention
is	O	O
never	O	O
closed	O	O
in	O	O
either	O	O
way	O	O
.	O	O
Question	O	O
-	O	O
7283338	O	O
,	O	O
answer	O	O
-	O	O
7283475	O	O
Because	O	O
any	O	O
particular	O	O
implementation	O	O
of	O	O
Set	O	B-api_mention
may	O	O
or	O	O
may	O	O
not	O	O
be	O	O
random	O	O
access	O	O
.	O	O
You	O	O
can	O	O
always	O	O
get	O	O
an	O	O
iterator	O	O
and	O	O
step	O	O
through	O	O
the	O	O
Set	B-api_mention	B-api_mention
,	O	O
using	O	O
the	O	O
iterators	O	O
'	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
return	O	O
the	O	O
result	O	O
you	O	O
want	O	O
once	O	O
you	O	O
find	O	O
the	O	O
equal	O	O
element	O	O
.	O	O
This	O	O
works	O	O
regardless	O	O
of	O	O
the	O	O
implementation	O	O
.	O	O
If	O	O
the	O	O
implementation	O	O
is	O	O
NOT	O	O
random	O	O
access	O	O
(	O	O
picture	O	O
a	O	O
linked	O	O
-	O	O
list	O	O
backed	O	O
Set	B-api_mention	O
)	O	O
,	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
the	O	O
interface	O	O
would	O	O
be	O	O
deceptive	O	O
,	O	O
since	O	O
it	O	O
would	O	O
have	O	O
to	O	O
iterate	O	O
the	O	O
collection	O	O
to	O	O
find	O	O
the	O	O
element	O	O
to	O	O
return	O	O
,	O	O
and	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
seem	O	O
to	O	O
imply	O	O
this	O	O
would	O	O
be	O	O
necessary	O	O
,	O	O
that	O	O
the	O	O
Set	B-api_mention	B-api_mention
could	O	O
jump	O	O
directly	O	O
to	O	O
the	O	O
element	O	O
to	O	O
get	O	O
.	O	B-api_mention
contains	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
or	O	O
may	O	O
not	O	O
have	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
of	O	O
course	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
implementation	O	O
,	O	O
but	O	O
the	O	O
name	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
lend	O	O
itself	O	O
to	O	O
the	O	O
same	O	O
sort	O	O
of	O	O
misunderstandings	O	O
.	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16148647	O	O
Please	O	O
use	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
19416644	O	O
,	O	O
answer	O	O
-	O	O
19416665	O	O
One	O	O
simple	O	O
way	O	O
is	O	O
to	O	O
use	O	O
Float	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
NaN	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
do	O	O
the	O	O
same	O	O
with	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
NaN	I-api_mention	I-api_mention
.	O	O
From	O	O
JLS	O	O
§	O	O
15	O	O
.	O	O
21	O	O
.	O	O
1	O	O
.	O	O
Numerical	O	O
Equality	O	O
Operators	O	O
=	O	O
=	O	O
and	O	O
!	O	O
=	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
20959594	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
,	O	O
but	O	O
through	O	O
reflection	O	O
you	O	O
'	O	O
re	O	O
allowed	O	O
to	O	O
change	O	O
the	O	O
String	B-api_mention	B-api_mention
class	O	O
.	O	O
You	O	O
'	O	O
ve	O	O
just	O	O
redefined	O	O
the	O	O
String	B-api_mention	B-api_mention
class	O	O
as	O	O
mutable	O	O
in	O	O
real	O	O
-	O	O
time	O	O
.	O	O
You	O	O
could	O	O
redefine	O	O
methods	O	O
to	O	O
be	O	O
public	O	O
or	O	O
private	O	O
or	O	O
static	O	O
if	O	O
you	O	O
wanted	O	O
.	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
31265714	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
there	O	O
is	O	O
also	O	O
an	O	O
alternative	O	O
to	O	O
using	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
your	O	O
input	O	O
source	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
file	O	O
but	O	O
something	O	O
more	O	O
abstract	O	O
like	O	O
a	O	O
Reader	B-api_mention	B-api_mention
or	O	O
an	O	O
InputStream	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
stream	O	O
the	O	O
lines	O	O
via	O	O
the	O	O
BufferedReader	B-api_mention	B-api_mention
s	O	O
lines	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
will	O	O
call	O	O
processLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
each	O	O
input	O	O
line	O	O
read	O	O
by	O	O
the	O	O
BufferedReader	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
10796160	O	O
,	O	O
answer	O	O
-	O	O
21025279	O	O
Use	O	O
proper	O	O
escaping	O	O
:	O	O
string	B-api_mention	O
.	I-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Or	O	O
the	O	O
helper	O	O
Regexp	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
quote	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
has	O	O
been	O	O
created	O	O
for	O	O
exactly	O	O
this	O	O
purpose	O	O
:	O	O
string	B-api_mention	O
.	I-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
works	O	O
with	O	O
arbitrary	O	O
input	O	O
strings	O	O
.	O	O
Very	O	O
useful	O	O
when	O	O
you	O	O
need	O	O
to	O	O
quote	O	O
/	O	O
escape	O	O
user	O	O
input	O	O
.	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
18496449	O	O
The	O	O
first	O	O
style	O	O
is	O	O
the	O	O
one	O	O
suggested	O	O
by	O	O
Oracle	O	O
.	O	O
BufferedWriter	B-api_mention	B-api_mention
doesn	O	O
'	O	O
t	O	O
throw	O	O
checked	O	O
exceptions	O	O
,	O	O
so	O	O
if	O	O
any	O	O
exception	O	O
is	O	O
thrown	O	O
,	O	O
the	O	O
program	O	O
is	O	O
not	O	O
expected	O	O
to	O	O
recover	O	O
from	O	O
it	O	O
,	O	O
making	O	O
resource	O	O
recover	O	O
mostly	O	O
moot	O	O
.	O	O
Mostly	O	O
because	O	O
it	O	O
could	O	O
happen	O	O
in	O	O
a	O	O
thread	O	O
,	O	O
with	O	O
the	O	O
thread	O	O
dieing	O	O
but	O	O
the	O	O
program	O	O
still	O	O
continuing	O	O
-	O	O
-	O	O
say	O	O
,	O	O
there	O	O
was	O	O
a	O	O
temporary	O	O
memory	O	O
outage	O	O
that	O	O
wasn	O	O
'	O	O
t	O	O
long	O	O
enough	O	O
to	O	O
seriously	O	O
impair	O	O
the	O	O
rest	O	O
of	O	O
the	O	O
program	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
rather	O	O
corner	O	O
case	O	O
,	O	O
though	O	O
,	O	O
and	O	O
if	O	O
it	O	O
happens	O	O
often	O	O
enough	O	O
to	O	O
make	O	O
resource	O	O
leak	O	O
a	O	O
problem	O	O
,	O	O
the	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
is	O	O
the	O	O
least	O	O
of	O	O
your	O	O
problems	O	O
.	O	O
Question	O	O
-	O	O
20877086	O	O
,	O	O
answer	O	O
-	O	O
20877283	O	O
The	O	O
Integer	B-api_mention	B-api_mention
class	O	O
has	O	O
a	O	O
static	O	O
cache	O	O
,	O	O
that	O	O
stores	O	O
256	O	O
special	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
-	O	O
one	O	O
for	O	O
every	O	O
value	O	O
between	O	O
-	O	O
128	O	O
and	O	O
127	O	O
.	O	O
With	O	O
that	O	O
in	O	O
mind	O	O
,	O	O
consider	O	O
the	O	O
difference	O	O
between	O	O
these	O	O
three	O	O
.	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
(	O	O
obviously	O	O
)	O	O
makes	O	O
a	O	O
brand	O	O
new	O	O
Integer	B-api_mention	B-api_mention
object	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
returns	O	O
an	O	O
int	O	O
primitive	O	O
value	O	O
after	O	O
parsing	O	O
the	O	O
String	B-api_mention	B-api_mention
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
more	O	O
complex	O	O
than	O	O
the	O	O
others	O	O
.	O	O
It	O	O
starts	O	O
off	O	O
by	O	O
parsing	O	O
the	O	O
String	B-api_mention	B-api_mention
.	O	O
Then	O	O
,	O	O
if	O	O
the	O	O
value	O	O
is	O	O
between	O	O
-	O	O
128	O	O
and	O	O
127	O	O
,	O	O
it	O	O
returns	O	O
the	O	O
corresponding	O	O
object	O	O
from	O	O
the	O	O
static	O	O
cache	O	O
.	O	O
If	O	O
the	O	O
value	O	O
is	O	O
outside	O	O
of	O	O
this	O	O
range	O	O
,	O	O
then	O	O
it	O	O
invokes	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
passes	O	O
in	O	O
the	O	O
value	O	O
,	O	O
so	O	O
that	O	O
you	O	O
get	O	O
a	O	O
new	O	O
object	O	O
.	O	O
Now	O	O
,	O	O
consider	O	O
the	O	O
three	O	O
expressions	O	O
in	O	O
the	O	O
question	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
returns	O	O
true	O	O
,	O	O
because	O	O
the	O	O
Integer	B-api_mention	B-api_mention
whose	O	O
value	O	O
is	O	O
127	O	O
is	O	O
retrieved	O	O
twice	O	O
from	O	O
the	O	O
static	O	O
cache	O	O
,	O	O
and	O	O
compared	O	O
to	O	O
itself	O	O
.	O	O
There	O	O
'	O	O
s	O	O
only	O	O
one	O	O
Integer	B-api_mention	B-api_mention
object	O	O
involved	O	O
,	O	O
so	O	O
this	O	O
returns	O	O
true	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
returns	O	O
false	O	O
,	O	O
because	O	O
128	O	O
is	O	O
not	O	O
in	O	O
the	O	O
static	O	O
cache	O	O
.	O	O
So	O	O
a	O	O
new	O	O
Integer	B-api_mention	B-api_mention
is	O	O
created	O	O
for	O	O
each	O	O
side	O	O
of	O	O
the	O	O
equality	O	O
.	O	O
Since	O	O
there	O	O
are	O	O
two	O	O
different	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
,	O	O
and	O	O
=	O	O
=	O	O
for	O	O
objects	O	O
only	O	O
returns	O	O
true	O	O
if	O	O
both	O	O
sides	O	O
are	O	O
the	O	O
exact	O	O
same	O	O
object	O	O
,	O	O
this	O	O
is	O	O
going	O	O
to	O	O
be	O	O
false	O	O
.	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
comparing	O	O
the	O	O
primitive	O	O
int	O	O
value	O	O
128	O	O
on	O	O
the	O	O
left	O	O
,	O	O
with	O	O
a	O	O
newly	O	O
created	O	O
Integer	B-api_mention	B-api_mention
object	O	O
on	O	O
the	O	O
right	O	O
.	O	O
But	O	O
because	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
to	O	O
compare	O	O
an	O	O
int	O	O
to	O	O
an	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Java	O	O
will	O	O
auto	O	O
-	O	O
unbox	O	O
the	O	O
Integer	B-api_mention	B-api_mention
before	O	O
doing	O	O
the	O	O
comparison	O	O
;	O	O
so	O	O
you	O	O
end	O	O
up	O	O
comparing	O	O
an	O	O
int	O	O
to	O	O
an	O	O
int	O	O
.	O	O
Since	O	O
the	O	O
primitive	O	O
128	O	O
is	O	O
equal	O	O
to	O	O
itself	O	O
,	O	O
this	O	O
returns	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29097694	O	O
Please	O	O
do	O	O
not	O	O
vote	O	O
.	O	O
I	O	O
do	O	O
not	O	O
have	O	O
enough	O	O
place	O	O
to	O	O
explain	O	O
this	O	O
in	O	O
comments	O	O
.	O	O
This	O	O
is	O	O
a	O	O
solution	O	O
with	O	O
a	O	O
Stream	B-api_mention	B-api_mention
and	O	O
a	O	O
foreach	O	O
but	O	O
this	O	O
is	O	O
strictly	O	O
equivalent	O	O
to	O	O
Alexis	O	O
'	O	O
s	O	O
solution	O	O
or	O	O
a	O	O
foreach	O	O
loop	O	O
(	O	O
and	O	O
less	O	O
clear	O	O
,	O	O
and	O	O
I	O	O
could	O	O
not	O	O
get	O	O
rid	O	O
of	O	O
the	O	O
copy	O	O
constructor	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
understand	O	O
that	O	O
you	O	O
want	O	O
to	O	O
find	O	O
a	O	O
more	O	O
elegant	O	O
solution	O	O
with	O	O
Java	O	O
8	O	O
but	O	O
I	O	O
truly	O	O
think	O	O
that	O	O
it	O	O
has	O	O
not	O	O
been	O	O
designed	O	O
for	O	O
this	O	O
case	O	O
.	O	O
And	O	O
as	O	O
said	O	O
by	O	O
Mr	O	O
spoon	O	O
,	O	O
highly	O	O
prefer	O	O
the	O	O
naive	O	O
way	O	O
in	O	O
this	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
14014086	O	O
,	O	O
answer	O	O
-	O	O
20784007	O	O
Ken	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
basically	O	O
right	O	O
but	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
chime	O	O
in	O	O
on	O	O
the	O	O
"	O	O
why	O	O
would	O	O
you	O	O
want	O	O
to	O	O
use	O	O
one	O	O
over	O	O
the	O	O
other	O	O
?	O	O
"	O	O
part	O	O
of	O	O
your	O	O
question	O	O
.	O	O
Basics	O	O
The	O	O
base	O	O
interface	O	O
you	O	O
choose	O	O
for	O	O
your	O	O
repository	O	O
has	O	O
two	O	O
main	O	O
purposes	O	O
.	O	O
First	O	O
,	O	O
you	O	O
allow	O	O
the	O	O
Spring	O	O
Data	O	O
repository	O	O
infrastructure	O	O
to	O	O
find	O	O
your	O	O
interface	O	O
and	O	O
trigger	O	O
the	O	O
proxy	O	O
creation	O	O
so	O	O
that	O	O
you	O	O
inject	O	O
instances	O	O
of	O	O
the	O	O
interface	O	O
into	O	O
clients	O	O
.	O	O
The	O	O
second	O	O
purpose	O	O
is	O	O
to	O	O
pull	O	O
in	O	O
as	O	O
much	O	O
functionality	O	O
as	O	O
needed	O	O
into	O	O
the	O	O
interface	O	O
without	O	O
having	O	O
to	O	O
declare	O	O
extra	O	O
methods	O	O
.	O	O
The	O	O
common	O	O
interfaces	O	O
The	O	O
Spring	O	O
Data	O	O
core	O	O
library	O	O
ships	O	O
with	O	O
two	O	O
base	O	O
interfaces	O	O
that	O	O
expose	O	O
a	O	O
dedicated	O	O
set	O	O
of	O	O
functionalities	O	O
:	O	O
#	O	O
li	O	O
CrudRepository	B-api_mention	O
-	O	O
CRUD	O	O
methods	O	O
#	O	O
li	O	O
PagingAndSortingRepository	B-api_mention	O
-	O	O
methods	O	O
for	O	O
pagination	O	O
and	O	O
sorting	O	O
(	O	O
extends	O	O
CrudRepository	B-api_mention	B-api_mention
)	O	O
Store	O	O
-	O	O
specific	O	O
interfaces	O	O
The	O	O
individual	O	O
store	O	O
modules	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
for	O	O
JPA	O	O
or	O	O
MongoDB	O	O
)	O	O
expose	O	O
store	O	O
-	O	O
specific	O	O
extensions	O	O
of	O	O
these	O	O
base	O	O
interfaces	O	O
to	O	O
allow	O	O
access	O	O
to	O	O
store	O	O
-	O	O
specific	O	O
functionality	O	O
like	O	O
flushing	O	O
or	O	O
dedicated	O	O
batching	O	O
that	O	O
take	O	O
some	O	O
store	O	O
specifics	O	O
into	O	O
account	O	O
.	O	O
An	O	O
example	O	O
for	O	O
this	O	O
is	O	O
deleteInBatch	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
JpaRepository	B-api_mention	O
which	O	O
is	O	O
different	O	O
from	O	O
delete	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
as	O	O
it	O	O
uses	O	O
a	O	O
query	O	O
to	O	O
delete	O	O
the	O	O
given	O	O
entities	O	O
which	O	O
is	O	O
more	O	O
performant	O	O
but	O	O
comes	O	O
with	O	O
the	O	O
side	O	O
effect	O	O
of	O	O
not	O	O
triggering	O	O
the	O	O
JPA	O	O
-	O	O
defined	O	O
cascades	O	O
(	O	O
as	O	O
the	O	O
spec	O	O
defines	O	O
it	O	O
)	O	O
.	O	O
We	O	O
generally	O	O
recommend	O	O
not	O	O
to	O	O
use	O	O
these	O	O
base	O	O
interfaces	O	O
as	O	O
they	O	O
expose	O	O
the	O	O
underlying	O	O
persistence	O	O
technology	O	O
to	O	O
the	O	O
clients	O	O
and	O	O
thus	O	O
tighten	O	O
the	O	O
coupling	O	O
between	O	O
them	O	O
and	O	O
the	O	O
repository	O	O
.	O	O
Plus	O	O
,	O	O
you	O	O
get	O	O
a	O	O
bit	O	O
away	O	O
from	O	O
the	O	O
original	O	O
definition	O	O
of	O	O
a	O	O
repository	O	O
which	O	O
is	O	O
basically	O	O
"	O	O
a	O	O
collection	O	O
of	O	O
entities	O	O
"	O	O
.	O	O
So	O	O
if	O	O
you	O	O
can	O	O
,	O	O
stay	O	O
with	O	O
PagingAndSortingRepository	B-api_mention	B-api_mention
.	O	O
Custom	O	O
repository	O	O
base	O	O
interfaces	O	O
The	O	O
downside	O	O
of	O	O
directly	O	O
depending	O	O
on	O	O
one	O	O
of	O	O
the	O	O
provided	O	O
base	O	O
interfaces	O	O
is	O	O
two	O	O
-	O	O
fold	O	O
.	O	O
Both	O	O
of	O	O
them	O	O
might	O	O
be	O	O
considered	O	O
as	O	O
theoretical	O	O
but	O	O
I	O	O
think	O	O
they	O	O
'	O	O
re	O	O
important	O	O
to	O	O
be	O	O
aware	O	O
of	O	O
:	O	O
#	O	O
li	O	O
Depending	O	O
on	O	O
a	O	O
a	O	O
Spring	O	O
Data	O	O
repository	O	O
interface	O	O
couples	O	O
your	O	O
repository	O	O
interface	O	O
to	O	O
the	O	O
library	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
this	O	O
is	O	O
a	O	O
particular	O	O
issue	O	O
as	O	O
you	O	O
'	O	O
ll	O	O
probably	O	O
use	O	O
abstractions	O	O
like	O	O
Page	B-api_mention	O
or	O	O
Pageable	B-api_mention	O
in	O	O
your	O	O
code	O	O
anyway	O	O
.	O	O
Spring	O	O
Data	O	O
is	O	O
not	O	O
any	O	O
different	O	O
from	O	O
any	O	O
other	O	O
general	O	O
purpose	O	O
library	O	O
like	O	O
commons	O	O
-	O	O
lang	O	O
or	O	O
Guava	O	O
.	O	O
As	O	O
long	O	O
as	O	O
it	O	O
provides	O	O
reasonable	O	O
benefit	O	O
,	O	O
it	O	O
'	O	O
s	O	O
just	O	O
fine	O	O
.	O	O
#	O	O
li	O	O
By	O	O
extending	O	O
e	O	O
.	O	O
g	O	O
.	O	O
CrudRepository	B-api_mention	O
,	O	O
you	O	O
expose	O	O
a	O	O
complete	O	O
set	O	O
of	O	O
persistence	O	O
method	O	O
at	O	O
once	O	O
.	O	O
This	O	O
is	O	O
probably	O	O
fine	O	O
in	O	O
most	O	O
circumstances	O	O
as	O	O
well	O	O
but	O	O
you	O	O
might	O	O
run	O	O
into	O	O
situations	O	O
where	O	O
you	O	O
'	O	O
d	O	O
like	O	O
to	O	O
gain	O	O
more	O	O
fine	O	O
-	O	O
grained	O	O
control	O	O
over	O	O
the	O	O
methods	O	O
expose	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
to	O	O
create	O	O
a	O	O
ReadOnlyRepository	B-api_mention	O
that	O	O
doesn	O	O
'	O	O
t	O	O
include	O	O
the	O	O
save	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
delete	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
of	O	O
CrudRepository	B-api_mention	B-api_mention
.	O	O
The	O	O
solution	O	O
to	O	O
both	O	O
of	O	O
these	O	O
downsides	O	O
is	O	O
to	O	O
craft	O	O
your	O	O
own	O	O
base	O	O
repository	O	O
interface	O	O
or	O	O
even	O	O
a	O	O
set	O	O
of	O	O
them	O	O
.	O	O
In	O	O
a	O	O
lot	O	O
of	O	O
applications	O	O
we	O	O
'	O	O
ve	O	O
seen	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
first	O	O
repository	O	O
interface	O	O
is	O	O
some	O	O
general	O	O
purpose	O	O
base	O	O
interface	O	O
that	O	O
actually	O	O
only	O	O
fixes	O	O
point	O	O
1	O	O
but	O	O
also	O	O
ties	O	O
the	O	O
ID	O	O
type	O	O
to	O	O
be	O	O
Long	O	B-api_mention
for	O	O
consistency	O	O
.	O	O
The	O	O
second	O	O
interface	O	O
usually	O	O
has	O	O
all	O	O
the	O	O
find	O	O
	O	O
(	O	O
	O	O
)	O	O
methods	O	O
copied	O	O
from	O	O
CrudRepository	B-api_mention	B-api_mention
and	O	O
PagingAndSortingRepository	B-api_mention	B-api_mention
but	O	O
does	O	O
not	O	O
expose	O	O
the	O	O
manipulating	O	O
ones	O	O
.	O	O
Read	O	O
more	O	O
on	O	O
that	O	O
approach	O	O
in	O	O
the	O	O
reference	O	O
documentation	O	O
.	O	O
Summary	O	O
-	O	O
tl	O	O
;	O	O
dr	O	O
The	O	O
repository	O	O
abstraction	O	O
allows	O	O
you	O	O
to	O	O
pickt	O	O
the	O	O
base	O	O
repository	O	O
totally	O	O
driven	O	O
by	O	O
you	O	O
architectural	O	O
and	O	O
functional	O	O
needs	O	O
.	O	O
Use	O	O
the	O	O
ones	O	O
provided	O	O
out	O	O
of	O	O
the	O	O
box	O	O
if	O	O
they	O	O
suit	O	O
,	O	O
craft	O	O
your	O	O
own	O	O
repository	O	O
base	O	O
interfaces	O	O
if	O	O
necessary	O	O
.	O	O
Stay	O	O
away	O	O
from	O	O
the	O	O
store	O	O
specific	O	O
repository	O	O
interfaces	O	O
unless	O	O
unavoidable	O	O
.	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777312	O	O
Arrays	O	O
inherit	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
from	O	O
Object	O	B-api_mention
and	O	O
hence	O	O
compare	O	O
only	O	O
returns	O	O
true	O	O
if	O	O
comparing	O	O
an	O	O
array	O	O
against	O	O
itself	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
compares	O	O
the	O	O
elements	O	O
of	O	O
the	O	O
arrays	O	O
.	O	O
This	O	O
snippet	O	O
elucidates	O	O
the	O	O
difference	O	O
:	O	O
#	O	O
pre	O	O
See	O	O
also	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Another	O	O
static	O	O
method	O	O
there	O	O
may	O	O
also	O	O
be	O	O
of	O	O
interest	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
deepEquals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14495128	O	O
If	O	O
the	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
calls	O	O
the	O	O
operating	O	O
system	O	O
to	O	O
get	O	O
the	O	O
time	O	O
of	O	O
day	O	O
,	O	O
then	O	O
you	O	O
cannot	O	O
compare	O	O
it	O	O
to	O	O
your	O	O
function	O	O
.	O	O
Your	O	O
function	O	O
is	O	O
a	O	O
PRNG	O	O
,	O	O
whereas	O	O
that	O	O
function	O	O
is	O	O
striving	O	O
for	O	O
real	O	O
random	O	O
numbers	O	O
.	O	O
Apples	O	O
and	O	O
oranges	O	O
.	O	O
Your	O	O
PRNG	O	O
may	O	O
be	O	O
fast	O	O
,	O	O
but	O	O
it	O	O
does	O	O
not	O	O
have	O	O
enough	O	O
state	O	O
information	O	O
to	O	O
achieve	O	O
a	O	O
long	O	O
period	O	O
before	O	O
it	O	O
repeats	O	O
(	O	O
and	O	O
its	O	O
logic	O	O
is	O	O
not	O	O
sophisticated	O	O
enough	O	O
to	O	O
even	O	O
achieve	O	O
the	O	O
periods	O	O
that	O	O
are	O	O
possible	O	O
with	O	O
that	O	O
much	O	O
state	O	O
information	O	O
)	O	O
.	O	O
Period	O	O
is	O	O
the	O	O
length	O	O
of	O	O
the	O	O
sequence	O	O
before	O	O
your	O	O
PRNG	O	O
begins	O	O
to	O	O
repeat	O	O
itself	O	O
.	O	O
This	O	O
happens	O	O
as	O	O
soon	O	O
as	O	O
the	O	O
PRNG	O	O
machine	O	O
makes	O	O
a	O	O
state	O	O
transition	O	O
to	O	O
a	O	O
state	O	O
which	O	O
is	O	O
identical	O	O
to	O	O
some	O	O
past	O	O
state	O	O
.	O	O
From	O	O
there	O	O
,	O	O
it	O	O
will	O	O
repeat	O	O
the	O	O
transitions	O	O
which	O	O
began	O	O
in	O	O
that	O	O
state	O	O
.	O	O
Another	O	O
problem	O	O
with	O	O
PRNG	O	O
'	O	O
s	O	O
can	O	O
be	O	O
a	O	O
low	O	O
number	O	O
of	O	O
unique	O	O
sequences	O	O
,	O	O
as	O	O
well	O	O
as	O	O
degenerate	O	O
convergence	O	O
on	O	O
a	O	O
particular	O	O
sequence	O	O
which	O	O
repeats	O	O
.	O	O
There	O	O
can	O	O
also	O	O
be	O	O
undesirable	O	O
patterns	O	O
.	O	O
For	O	O
instance	O	O
,	O	O
suppose	O	O
that	O	O
a	O	O
PRNG	O	O
looks	O	O
fairly	O	O
random	O	O
when	O	O
the	O	O
numbers	O	O
are	O	O
printed	O	O
in	O	O
decimal	O	O
,	O	O
but	O	O
an	O	O
inspection	O	O
of	O	O
the	O	O
values	O	O
in	O	O
binary	O	O
shows	O	O
that	O	O
bit	O	O
4	O	O
is	O	O
simply	O	O
toggling	O	O
between	O	O
0	O	O
and	O	O
1	O	O
on	O	O
each	O	O
call	O	O
.	O	O
Oops	O	O
!	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
the	O	O
Mersenne	O	O
Twister	O	O
and	O	O
other	O	O
algorithms	O	O
.	O	O
There	O	O
are	O	O
ways	O	O
to	O	O
strike	O	O
a	O	O
balance	O	O
between	O	O
the	O	O
period	O	O
length	O	O
and	O	O
CPU	O	O
cycles	O	O
.	O	O
One	O	O
basic	O	O
approach	O	O
(	O	O
used	O	O
in	O	O
the	O	O
Mersenne	O	O
Twister	O	O
)	O	O
is	O	O
to	O	O
cycle	O	O
around	O	O
in	O	O
the	O	O
state	O	O
vector	O	O
.	O	O
That	O	O
is	O	O
to	O	O
say	O	O
,	O	O
when	O	O
a	O	O
number	O	O
is	O	O
being	O	O
generated	O	O
,	O	O
it	O	O
is	O	O
not	O	O
based	O	O
on	O	O
the	O	O
entire	O	O
state	O	O
,	O	O
just	O	O
on	O	O
a	O	O
few	O	O
words	O	O
from	O	O
the	O	O
state	O	O
array	O	O
subject	O	O
to	O	O
a	O	O
few	O	O
bit	O	O
operations	O	O
.	O	O
But	O	O
at	O	O
each	O	O
step	O	O
,	O	O
the	O	O
algorithm	O	O
also	O	O
moves	O	O
around	O	O
in	O	O
the	O	O
array	O	O
,	O	O
scrambling	O	O
the	O	O
contents	O	O
a	O	O
little	O	O
bit	O	O
at	O	O
a	O	O
time	O	O
.	O	O
Question	O	O
-	O	O
22740464	O	O
,	O	O
answer	O	O
-	O	O
22741520	O	O
Unfortunately	O	O
this	O	O
answer	O	O
is	O	O
probably	O	O
of	O	O
little	O	O
or	O	O
no	O	O
help	O	O
whatsoever	O	O
,	O	O
but	O	O
I	O	O
did	O	O
a	O	O
forensics	O	O
analysis	O	O
of	O	O
the	O	O
Java	O	O
Lambda	O	O
Mailing	O	O
list	O	O
to	O	O
see	O	O
if	O	O
I	O	O
could	O	O
find	O	O
the	O	O
cause	O	O
of	O	O
this	O	O
design	O	O
.	O	O
This	O	O
is	O	O
what	O	O
I	O	O
found	O	O
out	O	O
.	O	O
In	O	O
the	O	O
beginning	O	O
there	O	O
was	O	O
an	O	O
instance	O	O
method	O	O
for	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
Stream	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
In	O	O
the	O	O
mailing	O	O
list	O	O
I	O	O
can	O	O
clearly	O	O
see	O	O
the	O	O
method	O	O
was	O	O
originally	O	O
implemented	O	O
as	O	O
an	O	O
instance	O	O
method	O	O
,	O	O
as	O	O
you	O	O
can	O	O
read	O	O
in	O	O
this	O	O
thread	O	O
by	O	O
Paul	O	O
Sandoz	O	O
,	O	O
about	O	O
the	O	O
concat	B-api_mention	O
operation	O	O
.	O	O
In	O	O
it	O	O
they	O	O
discuss	O	O
the	O	O
issues	O	O
that	O	O
could	O	O
arise	O	O
from	O	O
those	O	O
cases	O	O
in	O	O
which	O	O
the	O	O
stream	O	O
could	O	O
be	O	O
infinite	O	O
and	O	O
what	O	O
concatenation	O	O
would	O	O
mean	O	O
in	O	O
those	O	O
cases	O	O
,	O	O
but	O	O
I	O	O
do	O	O
not	O	O
think	O	O
that	O	O
was	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
modification	O	O
.	O	O
You	O	O
see	O	O
in	O	O
this	O	O
other	O	O
thread	O	O
that	O	O
some	O	O
early	O	O
users	O	O
of	O	O
the	O	O
JDK	O	O
8	O	O
questioned	O	O
about	O	O
the	O	O
behavior	O	O
of	O	O
the	O	O
concat	O	O
instance	O	O
method	O	O
when	O	O
used	O	O
with	O	O
null	O	O
arguments	O	O
.	O	O
This	O	O
other	O	O
thread	O	O
reveals	O	O
,	O	O
though	O	O
,	O	O
that	O	O
the	O	O
design	O	O
of	O	O
the	O	O
concat	O	O
method	O	O
was	O	O
under	O	O
discussion	O	O
.	O	O
Refactored	O	O
to	O	O
Streams	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
Stream	I-api_mention	I-api_mention
,	I-api_mention	O
Stream	I-api_mention	B-api_mention
)	I-api_mention	O
But	O	O
without	O	O
any	O	O
explanation	O	O
,	O	O
suddenly	O	O
,	O	O
the	O	O
methods	O	O
were	O	O
changed	O	O
to	O	O
static	O	O
methods	O	O
,	O	O
as	O	O
you	O	O
can	O	O
see	O	O
in	O	O
this	O	O
thread	O	O
about	O	O
combining	O	O
streams	O	O
.	O	O
This	O	O
is	O	O
perhaps	O	O
the	O	O
only	O	O
mail	O	O
thread	O	O
that	O	O
sheds	O	O
a	O	O
bit	O	O
of	O	O
light	O	O
about	O	O
this	O	O
change	O	O
,	O	O
but	O	O
it	O	O
was	O	O
not	O	O
clear	O	O
enough	O	O
for	O	O
me	O	O
to	O	O
determine	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
refactoring	O	O
.	O	O
But	O	O
we	O	O
can	O	O
see	O	O
they	O	O
did	O	O
a	O	O
commit	O	O
in	O	O
which	O	O
they	O	O
suggested	O	O
to	O	O
move	O	O
the	O	O
concat	O	O
method	O	O
out	O	O
of	O	O
Stream	B-api_mention	B-api_mention
and	O	O
into	O	O
the	O	O
helper	O	O
class	O	O
Streams	B-api_mention	O
.	O	O
Refactored	O	O
to	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
Stream	I-api_mention	I-api_mention
,	I-api_mention	O
Stream	I-api_mention	B-api_mention
)	I-api_mention	O
Later	O	O
,	O	O
it	O	O
was	O	O
moved	O	O
again	O	O
from	O	O
Streams	B-api_mention	O
to	O	O
Stream	B-api_mention	B-api_mention
,	O	O
but	O	O
yet	O	O
again	O	O
,	O	O
no	O	O
explanation	O	O
for	O	O
that	O	O
.	O	O
So	O	O
,	O	O
bottom	O	O
line	O	O
,	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
design	O	O
is	O	O
not	O	O
entirely	O	O
clear	O	O
for	O	O
me	O	O
and	O	O
I	O	O
could	O	O
not	O	O
find	O	O
a	O	O
good	O	O
explanation	O	O
.	O	O
I	O	O
guess	O	O
you	O	O
could	O	O
still	O	O
ask	O	O
the	O	O
question	O	O
in	O	O
the	O	O
mailing	O	O
list	O	O
.	O	O
Some	O	O
Alternatives	O	O
for	O	O
Stream	B-api_mention	B-api_mention
Concatenation	O	O
This	O	O
other	O	O
thread	O	O
by	O	O
Michael	O	O
Hixson	O	O
discusses	O	O
/	O	O
asks	O	O
about	O	O
other	O	O
ways	O	O
to	O	O
combine	O	O
/	O	O
concat	O	O
streams	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
15156857	O	O
I	O	O
have	O	O
a	O	O
method	O	O
with	O	O
a	O	O
void	O	O
return	O	O
type	O	O
.	O	O
It	O	O
can	O	O
also	O	O
throw	O	O
a	O	O
number	O	O
of	O	O
exceptions	O	O
so	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
test	O	O
those	O	O
exceptions	O	O
being	O	O
thrown	O	O
.	O	O
All	O	O
attempts	O	O
have	O	O
failed	O	O
with	O	O
the	O	O
same	O	O
reason	O	O
:	O	O
#	O	O
blockquote	O	O
Any	O	O
ideas	O	O
how	O	O
I	O	O
can	O	O
get	O	O
the	O	O
method	O	O
to	O	O
throw	O	O
a	O	O
specified	O	O
exception	O	O
?	O	O
doThrow	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
5455794	O	O
,	O	O
answer	O	O
-	O	O
5455820	O	O
How	O	O
about	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Refer	O	O
here	O	O
.	O	O
Question	O	O
-	O	O
13604703	O	O
,	O	O
answer	O	O
-	O	O
13604748	O	O
Lambdas	O	O
are	O	O
purely	O	O
a	O	O
call	O	O
-	O	O
site	O	O
construct	O	O
:	O	O
the	O	O
recipient	O	O
of	O	O
the	O	O
lambda	O	O
does	O	O
not	O	O
need	O	O
to	O	O
know	O	O
that	O	O
a	O	O
Lambda	O	O
is	O	O
involved	O	O
,	O	O
instead	O	O
it	O	O
accepts	O	O
an	O	O
Interface	O	O
with	O	O
the	O	O
appropriate	O	O
method	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
you	O	O
define	O	O
or	O	O
use	O	O
a	O	O
functional	O	O
interface	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
an	O	O
interface	O	O
with	O	O
a	O	O
single	O	O
method	O	O
)	O	O
that	O	O
accepts	O	O
and	O	O
returns	O	O
exactly	O	O
what	O	O
you	O	O
want	O	O
.	O	O
For	O	O
this	O	O
Java	O	O
8	O	O
comes	O	O
with	O	O
a	O	O
set	O	O
of	O	O
commonly	O	O
-	O	O
used	O	O
interface	O	O
types	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
(	O	O
thanks	O	O
to	O	O
Maurice	O	O
Naftalin	O	O
for	O	O
the	O	O
hint	O	O
about	O	O
the	O	O
JavaDoc	O	O
)	O	O
.	O	O
For	O	O
this	O	O
specific	O	O
use	O	O
case	O	O
there	O	O
'	O	O
s	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
IntBinaryOperator	I-api_mention	I-api_mention
with	O	O
a	O	O
single	O	O
int	O	O
applyAsInt	B-api_mention	O
(	I-api_mention	O
int	I-api_mention	O
left	I-api_mention	O
,	I-api_mention	O
int	I-api_mention	O
right	I-api_mention	O
)	I-api_mention	O
method	O	O
,	O	O
so	O	O
you	O	O
could	O	O
write	O	O
your	O	O
method	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
you	O	O
can	O	O
just	O	O
as	O	O
well	O	O
define	O	O
your	O	O
own	O	O
interface	O	O
and	O	O
use	O	O
it	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Using	O	O
your	O	O
own	O	O
interface	O	O
has	O	O
the	O	O
advantage	O	O
that	O	O
you	O	O
can	O	O
have	O	O
names	O	O
that	O	O
more	O	O
clearly	O	O
indicate	O	O
the	O	O
intent	O	O
.	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
22502206	O	O
When	O	O
reading	O	O
this	O	O
question	O	O
one	O	O
can	O	O
get	O	O
the	O	O
impression	O	O
,	O	O
that	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
in	O	O
combination	O	O
with	O	O
lambda	O	O
expressions	O	O
is	O	O
a	O	O
shortcut	O	O
/	O	O
replacement	O	O
for	O	O
writing	O	O
a	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
.	O	O
This	O	O
is	O	O
simply	O	O
not	O	O
true	O	O
.	O	O
This	O	O
code	O	O
from	O	O
the	O	O
OP	O	O
:	O	O
joins	O	B-api_mention
.	B-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
is	O	O
not	O	O
intended	O	O
as	O	O
a	O	O
shortcut	O	O
for	O	O
writing	O	O
#	O	O
pre	O	O
and	O	O
should	O	O
certainly	O	O
not	O	O
be	O	O
used	O	O
in	O	O
this	O	O
way	O	O
.	O	O
Instead	O	O
it	O	O
is	O	O
intended	O	O
as	O	O
a	O	O
shortcut	O	O
(	O	O
although	O	O
it	O	O
is	O	O
not	O	O
exactly	O	O
the	O	O
same	O	O
)	O	O
for	O	O
writing	O	O
#	O	O
pre	O	O
And	O	O
it	O	O
is	O	O
as	O	O
a	O	O
replacement	O	O
for	O	O
the	O	O
following	O	O
Java	O	O
7	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Replacing	O	O
the	O	O
body	O	O
of	O	O
a	O	O
loop	O	O
with	O	O
a	O	O
functional	O	O
interface	O	O
,	O	O
as	O	O
in	O	O
the	O	O
examples	O	O
above	O	O
,	O	O
makes	O	O
your	O	O
code	O	O
more	O	O
explicit	O	O
:	O	O
You	O	O
are	O	O
saying	O	O
that	O	O
(	O	O
1	O	O
)	O	O
the	O	O
body	O	O
of	O	O
the	O	O
loop	O	O
does	O	O
not	O	O
affect	O	O
the	O	O
surrounding	O	O
code	O	O
and	O	O
control	O	O
flow	O	O
,	O	O
and	O	O
(	O	O
2	O	O
)	O	O
the	O	O
body	O	O
of	O	O
the	O	O
loop	O	O
may	O	O
be	O	O
replaced	O	O
with	O	O
a	O	O
different	O	O
implementation	O	O
of	O	O
the	O	O
function	O	O
,	O	O
without	O	O
affecting	O	O
the	O	O
surrounding	O	O
code	O	O
.	O	O
Not	O	O
being	O	O
able	O	O
to	O	O
access	O	O
non	O	O
final	O	O
variables	O	O
of	O	O
the	O	O
outer	O	O
scope	O	O
is	O	O
not	O	O
a	O	O
deficit	O	O
of	O	O
functions	O	O
/	O	O
lambdas	O	O
,	O	O
it	O	O
is	O	O
a	O	O
feature	O	O
that	O	O
distinguishes	O	O
the	O	O
semantics	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
from	O	O
the	O	O
semantics	O	O
of	O	O
a	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
.	O	O
Once	O	O
one	O	O
gets	O	O
used	O	O
to	O	O
the	O	O
syntax	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
it	O	O
makes	O	O
the	O	O
code	O	O
more	O	O
readable	O	O
,	O	O
because	O	O
you	O	O
immediately	O	O
get	O	O
this	O	O
additional	O	O
information	O	O
about	O	O
the	O	O
code	O	O
.	O	O
Traditional	O	O
for	O	O
-	O	O
each	O	O
loops	O	O
will	O	O
certainly	O	O
stay	O	O
good	O	O
practice	O	O
(	O	O
to	O	O
avoid	O	O
the	O	O
overused	O	O
term	O	O
"	O	O
best	O	O
practice	O	O
"	O	O
)	O	O
in	O	O
Java	O	O
.	O	O
But	O	O
this	O	O
doesn	O	O
'	O	O
t	O	O
mean	O	O
,	O	O
that	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
should	O	O
be	O	O
considered	O	O
bad	O	O
practice	O	O
or	O	O
bad	O	O
style	O	O
.	O	O
It	O	O
is	O	O
always	O	O
good	O	O
practice	O	O
,	O	O
to	O	O
use	O	O
the	O	O
right	O	O
tool	O	O
for	O	O
doing	O	O
the	O	O
job	O	O
,	O	O
and	O	O
this	O	O
includes	O	O
mixing	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loops	O	O
with	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
where	O	O
it	O	O
makes	O	O
sense	O	O
.	O	O
Since	O	O
the	O	O
downsides	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
have	O	O
already	O	O
been	O	O
discussed	O	O
in	O	O
this	O	O
thread	O	O
,	O	O
here	O	O
are	O	O
some	O	O
reasons	O	O
,	O	O
why	O	O
you	O	O
might	O	O
probably	O	O
want	O	O
to	O	O
use	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
:	O	O
#	O	O
li	O	O
To	O	O
make	O	O
your	O	O
code	O	O
more	O	O
explicit	O	O
:	O	O
As	O	O
described	O	O
above	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	O
forEach	I-api_mention	O
can	O	O
make	O	O
your	O	O
code	O	O
more	O	O
explicit	O	O
and	O	O
readable	O	O
in	O	O
some	O	O
situations	O	O
.	O	O
#	O	O
li	O	O
To	O	O
make	O	O
your	O	O
code	O	O
more	O	O
extensible	O	O
and	O	O
maintainable	O	O
:	O	O
Using	O	O
a	O	O
function	O	O
as	O	O
the	O	O
body	O	O
of	O	O
a	O	O
loop	O	O
allows	O	O
you	O	O
to	O	O
replace	O	O
this	O	O
function	O	O
with	O	O
different	O	O
implementations	O	O
(	O	O
see	O	O
Strategy	O	O
Pattern	O	O
)	O	O
.	O	O
You	O	O
could	O	O
e	O	O
.	O	O
g	O	O
.	O	O
easily	O	O
replace	O	O
the	O	O
lambda	O	O
expression	O	O
with	O	O
a	O	O
method	O	O
call	O	O
,	O	O
that	O	O
may	O	O
be	O	O
overwritten	O	O
by	O	O
sub	O	O
-	O	O
classes	O	O
:	O	O
joins	O	B-api_mention
.	B-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Then	O	O
you	O	O
could	O	O
provide	O	O
default	O	O
strategies	O	O
using	O	O
an	O	O
enum	O	O
,	O	O
that	O	O
implements	O	O
the	O	O
functional	O	O
interface	O	O
.	O	O
This	O	O
not	O	O
only	O	O
makes	O	O
your	O	O
code	O	O
more	O	O
extensible	O	O
,	O	O
it	O	O
also	O	O
increases	O	O
maintainability	O	O
because	O	O
it	O	O
decouples	O	O
the	O	O
loop	O	O
implementation	O	O
from	O	O
the	O	O
loop	O	O
declaration	O	O
.	O	O
#	O	O
li	O	O
To	O	O
make	O	O
your	O	O
code	O	O
more	O	O
debuggable	O	O
:	O	O
Seperating	O	O
the	O	O
loop	O	O
implementation	O	O
from	O	O
the	O	O
declaration	O	O
can	O	O
also	O	O
make	O	O
debugging	O	O
more	O	O
easy	O	O
,	O	O
because	O	O
you	O	O
could	O	O
have	O	O
a	O	O
specialized	O	O
debug	O	O
implementation	O	O
,	O	O
that	O	O
prints	O	O
out	O	O
debug	O	O
messages	O	O
,	O	O
without	O	O
the	O	O
need	O	O
to	O	O
clutter	O	O
your	O	O
main	O	O
code	O	O
with	O	O
if	O	O
(	O	O
args	O	O
)	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
debug	O	O
implementation	O	O
could	O	O
e	O	O
.	O	O
g	O	O
.	O	O
be	O	O
a	O	O
delegate	O	O
,	O	O
that	O	O
decorates	O	O
the	O	O
actual	O	O
function	O	O
implementation	O	O
.	O	O
#	O	O
li	O	O
To	O	O
optimize	O	O
performance	O	O
-	O	O
critical	O	O
code	O	O
:	O	O
Contrary	O	O
to	O	O
some	O	O
of	O	O
the	O	O
assertions	O	O
in	O	O
this	O	O
thread	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
does	O	O
already	O	O
provide	O	O
better	O	O
performance	O	O
than	O	O
a	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
,	O	O
at	O	O
least	O	O
when	O	O
using	O	O
ArrayList	B-api_mention	B-api_mention
and	O	O
running	O	O
Hotspot	O	O
in	O	O
"	O	O
-	O	O
client	O	O
"	O	O
mode	O	O
.	O	O
While	O	O
this	O	O
performance	O	O
boost	O	O
is	O	O
small	O	O
and	O	O
negligible	O	O
for	O	O
most	O	O
use	O	O
cases	O	O
,	O	O
there	O	O
are	O	O
situations	O	O
,	O	O
where	O	O
this	O	O
extra	O	O
performance	O	O
can	O	O
make	O	O
a	O	O
difference	O	O
.	O	O
E	O	O
.	O	O
g	O	O
.	O	O
library	O	O
maintainers	O	O
will	O	O
certainly	O	O
want	O	O
to	O	O
evaluate	O	O
,	O	O
if	O	O
some	O	O
of	O	O
their	O	O
existing	O	O
loop	O	O
implementations	O	O
should	O	O
be	O	O
replaced	O	O
with	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
.	O	O
To	O	O
back	O	O
this	O	O
statement	O	O
up	O	O
with	O	O
facts	O	O
,	O	O
I	O	O
have	O	O
done	O	O
some	O	O
micro	O	O
-	O	O
benchmarks	O	O
with	O	O
Caliper	O	B-api_mention
.	O	O
Here	O	O
is	O	O
the	O	O
test	O	O
code	O	O
(	O	O
latest	O	O
Caliper	O	O
from	O	O
git	O	O
is	O	O
needed	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
are	O	O
the	O	O
results	O	O
:	O	O
#	O	O
li	O	O
Results	O	O
for	O	O
-	O	O
client	O	O
#	O	O
li	O	O
Results	O	O
for	O	O
-	O	O
server	O	O
When	O	O
running	O	O
with	O	O
"	O	O
-	O	O
client	O	O
"	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
outperforms	O	O
the	O	O
traditional	O	O
for	O	O
loop	O	O
over	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
,	O	O
but	O	O
is	O	O
still	O	O
slower	O	O
than	O	O
directly	O	O
iterating	O	O
over	O	O
an	O	O
array	O	O
.	O	O
When	O	O
running	O	O
with	O	O
"	O	O
-	O	O
server	O	O
"	O	O
,	O	O
the	O	O
performance	O	O
of	O	O
all	O	O
approaches	O	O
is	O	O
about	O	O
the	O	O
same	O	O
.	O	O
#	O	O
li	O	O
To	O	O
provide	O	O
optional	O	O
support	O	O
for	O	O
parallel	O	O
execution	O	O
:	O	O
It	O	O
has	O	O
already	O	O
been	O	O
said	O	O
here	O	O
,	O	O
that	O	O
the	O	O
possibility	O	O
to	O	O
execute	O	O
the	O	O
functional	O	O
interface	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	O
forEach	I-api_mention	O
in	O	O
parallel	O	O
using	O	O
streams	O	O
,	O	O
is	O	O
certainly	O	O
an	O	O
important	O	O
aspect	O	O
.	O	O
Since	O	O
Collection	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
guarantee	O	O
,	O	O
that	O	O
the	O	O
loop	O	O
is	O	O
actually	O	O
executed	O	O
in	O	O
parallel	O	O
,	O	O
one	O	O
must	O	O
consider	O	O
this	O	O
an	O	O
optional	O	O
feature	O	O
.	O	O
By	O	O
iterating	O	O
over	O	O
your	O	O
list	O	O
with	O	O
list	O	O
.	B-api_mention	B-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
,	O	O
you	O	O
explicitly	O	O
say	O	O
:	O	O
This	O	O
loop	O	O
supports	O	O
parallel	O	O
execution	O	O
,	O	O
but	O	O
it	O	O
does	O	O
not	O	O
depend	O	O
on	O	O
it	O	O
.	O	O
Again	O	O
,	O	O
this	O	O
is	O	O
a	O	O
feature	O	O
and	O	O
not	O	O
a	O	O
deficit	O	O
!	O	O
By	O	O
moving	O	O
the	O	O
decision	O	O
for	O	O
parallel	O	O
execution	O	O
away	O	O
from	O	O
your	O	O
actual	O	O
loop	O	O
implementation	O	O
,	O	O
you	O	O
allow	O	O
optional	O	O
optimization	O	O
of	O	O
your	O	O
code	O	O
,	O	O
without	O	O
affecting	O	O
the	O	O
code	O	O
itself	O	O
,	O	O
which	O	O
is	O	O
a	O	O
good	O	O
thing	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
the	O	O
default	O	O
parallel	O	O
stream	O	O
implementation	O	O
does	O	O
not	O	O
fit	O	O
your	O	O
needs	O	O
,	O	O
no	O	O
one	O	O
is	O	O
preventing	O	O
you	O	O
from	O	O
providing	O	O
your	O	O
own	O	O
implementation	O	O
.	O	O
You	O	O
could	O	O
e	O	O
.	O	O
g	O	O
.	O	O
provide	O	O
an	O	O
optimized	O	O
collection	O	O
depending	O	O
on	O	O
the	O	O
underlying	O	O
operating	O	O
system	O	O
,	O	O
on	O	O
the	O	O
size	O	O
of	O	O
the	O	O
collection	O	O
,	O	O
on	O	O
the	O	O
number	O	O
of	O	O
cores	O	O
,	O	O
and	O	O
on	O	O
some	O	O
preference	O	O
settings	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
nice	O	O
thing	O	O
here	O	O
is	O	O
,	O	O
that	O	O
your	O	O
loop	O	O
implementation	O	O
doesn	O	O
'	O	O
t	O	O
need	O	O
to	O	O
know	O	O
or	O	O
care	O	O
about	O	O
these	O	O
details	O	O
.	O	O
Question	O	O
-	O	O
4812570	O	O
,	O	O
answer	O	O
-	O	O
21765043	O	O
You	O	O
can	O	O
use	O	O
the	O	O
ExceptionUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getStackTrace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
from	O	O
Apache	O	O
Commons	O	O
3	O	O
class	O	O
org	B-api_mention	O
.	I-api_mention	O
apache	I-api_mention	O
.	I-api_mention	O
commons	I-api_mention	O
.	I-api_mention	O
lang3	I-api_mention	O
.	I-api_mention	O
exception	I-api_mention	O
.	I-api_mention	O
ExceptionUtils	I-api_mention	O
.	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
6608795	O	O
I	O	O
wonder	O	O
what	O	O
the	O	O
difference	O	O
is	O	O
between	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
ClassLoader	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
edit	O	O
:	O	O
I	O	O
especially	O	O
want	O	O
to	O	O
know	O	O
if	O	O
any	O	O
caching	O	O
is	O	O
involved	O	O
on	O	O
file	O	O
/	O	O
directory	O	O
level	O	O
.	O	O
As	O	O
in	O	O
"	O	O
are	O	O
directory	O	O
listings	O	O
cached	O	O
in	O	O
the	O	O
Class	B-api_mention	B-api_mention
version	O	O
?	O	O
"	O	O
AFAIK	O	O
the	O	O
following	O	O
should	O	O
essentially	O	O
do	O	O
the	O	O
same	O	O
,	O	O
but	O	O
they	O	O
are	O	O
not	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
discovered	O	O
this	O	O
when	O	O
fiddling	O	O
with	O	O
some	O	O
report	O	O
generation	O	O
code	O	O
that	O	O
creates	O	O
a	O	O
new	O	O
file	O	O
in	O	O
WEB	O	O
-	O	O
INF	O	O
/	O	O
classes	O	O
/	O	O
from	O	O
an	O	O
existing	O	O
file	O	O
in	O	O
that	O	O
directory	O	O
.	O	O
When	O	O
using	O	O
the	O	O
method	O	O
from	O	O
Class	B-api_mention	O
,	O	O
I	O	O
could	O	O
find	O	O
files	O	O
that	O	O
were	O	O
there	O	O
at	O	O
deployment	O	O
using	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
when	O	O
trying	O	O
to	O	O
fetch	O	O
the	O	O
newly	O	O
created	O	O
file	O	O
,	O	O
I	O	O
recieved	O	O
a	O	O
null	O	O
object	O	O
.	O	O
Browsing	O	O
the	O	O
directory	O	O
clearly	O	O
shows	O	O
that	O	O
the	O	O
new	O	O
file	O	O
is	O	O
there	O	O
.	O	O
The	O	O
filenames	O	O
were	O	O
prepended	O	O
with	O	O
a	O	O
forward	O	O
slash	O	O
as	O	O
in	O	O
"	O	O
/	O	O
myFile	O	O
.	O	O
txt	O	O
"	O	O
.	O	O
The	O	O
ClassLoader	B-api_mention	O
version	O	O
of	O	O
getResource	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
other	O	O
hand	O	O
did	O	O
find	O	O
the	O	O
generated	O	O
file	O	O
.	O	O
From	O	O
this	O	O
experience	O	O
it	O	O
seems	O	O
that	O	O
there	O	O
is	O	O
some	O	O
kind	O	O
of	O	O
caching	O	O
of	O	O
the	O	O
directory	O	O
listing	O	O
going	O	O
on	O	O
.	O	O
Am	O	O
I	O	O
right	O	O
,	O	O
and	O	O
if	O	O
so	O	O
,	O	O
where	O	O
is	O	O
this	O	O
documented	O	O
?	O	O
From	O	O
the	O	O
API	O	O
docs	O	O
on	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
blockquote	O	O
To	O	O
me	O	O
,	O	O
this	O	O
reads	O	O
"	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
is	O	O
really	O	O
calling	O	O
its	O	O
own	O	O
classloader	O	O
'	O	O
s	O	O
getResource	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
.	O	O
Which	O	O
would	O	O
be	O	O
the	O	O
same	O	O
as	O	O
doing	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getClassLoader	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
it	O	O
is	O	O
obviously	O	O
not	O	O
.	O	O
Could	O	O
someone	O	O
please	O	O
provide	O	O
me	O	O
with	O	O
some	O	O
illumination	O	O
into	O	O
this	O	O
matter	O	O
?	O	O
Question	O	O
-	O	O
30581531	O	O
What	O	O
is	O	O
the	O	O
maximum	O	O
number	O	O
of	O	O
parameters	O	O
that	O	O
a	O	O
method	O	O
in	O	O
Java	O	O
can	O	O
have	O	O
and	O	O
why	O	O
?	O	O
I	O	O
am	O	O
using	O	O
Java	O	O
1	O	O
.	O	O
8	O	O
on	O	O
a	O	O
64	O	O
-	O	O
bit	O	O
Windows	O	O
system	O	O
.	O	O
All	O	O
the	O	O
answers	O	O
on	O	O
StackOverflow	O	O
about	O	O
this	O	O
say	O	O
that	O	O
the	O	O
technical	O	O
limit	O	O
is	O	O
255	O	O
parameters	O	O
without	O	O
specifying	O	O
why	O	O
.	O	O
To	O	O
be	O	O
precise	O	O
,	O	O
255	O	O
for	O	O
static	O	O
and	O	O
254	O	O
for	O	O
non	O	O
-	O	O
static	O	O
(	O	O
this	O	O
will	O	O
be	O	O
the	O	O
255th	O	O
in	O	O
this	O	O
case	O	O
)	O	O
methods	O	O
.	O	O
I	O	O
thought	O	O
this	O	O
could	O	O
be	O	O
specified	O	O
in	O	O
some	O	O
sort	O	O
of	O	O
specification	O	O
and	O	O
that	O	O
this	O	O
was	O	O
simply	O	O
a	O	O
statically	O	O
defined	O	O
maximum	O	O
number	O	O
of	O	O
parameters	O	O
allowed	O	O
.	O	O
But	O	O
this	O	O
was	O	O
only	O	O
valid	O	O
for	O	O
int	O	O
and	O	O
all	O	O
4	O	O
-	O	O
bytes	O	O
types	O	O
.	O	O
I	O	O
did	O	O
some	O	O
tests	O	O
with	O	O
long	O	O
parameters	O	O
,	O	O
and	O	O
I	O	O
was	O	O
only	O	O
able	O	O
to	O	O
declare	O	O
127	O	O
parameters	O	O
in	O	O
that	O	O
case	O	O
.	O	O
With	O	O
String	B-api_mention	B-api_mention
parameters	O	O
,	O	O
the	O	O
allowed	O	O
number	O	O
i	O	O
deduced	O	O
from	O	O
testing	O	O
is	O	O
255	O	O
(	O	O
it	O	O
may	O	O
be	O	O
because	O	O
the	O	O
reference	O	O
size	O	O
is	O	O
4	O	O
bytes	O	O
in	O	O
Java	O	O
?	O	O
)	O	O
.	O	O
But	O	O
since	O	O
I	O	O
am	O	O
using	O	O
a	O	O
64	O	O
-	O	O
bit	O	O
system	O	O
,	O	O
references	O	O
size	O	O
should	O	O
be	O	O
8	O	O
bytes	O	O
wide	O	O
and	O	O
so	O	O
with	O	O
String	B-api_mention	B-api_mention
parameters	O	O
the	O	O
maximum	O	O
allowed	O	O
number	O	O
should	O	O
be	O	O
127	O	O
,	O	O
similar	O	O
to	O	O
long	O	O
types	O	O
.	O	O
How	O	O
does	O	O
this	O	O
limit	O	O
is	O	O
exactly	O	O
applied	O	O
?	O	O
Does	O	O
the	O	O
limit	O	O
have	O	O
anything	O	O
to	O	O
do	O	O
with	O	O
the	O	O
stack	O	O
size	O	O
of	O	O
the	O	O
method	O	O
?	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
not	O	O
really	O	O
going	O	O
to	O	O
use	O	O
these	O	O
many	O	O
parameters	O	O
in	O	O
any	O	O
method	O	O
,	O	O
but	O	O
this	O	O
question	O	O
is	O	O
only	O	O
to	O	O
clarify	O	O
the	O	O
exact	O	O
behavior	O	O
.	O	O
Question	O	O
-	O	O
5455794	O	O
,	O	O
answer	O	O
-	O	O
5455809	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
removes	O	O
all	O	O
whitespaces	O	O
and	O	O
non	O	O
-	O	O
visible	O	O
characters	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
tab	O	O
,	O	O
\	O	O
n	O	O
)	O	O
.	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
produce	O	O
the	O	O
same	O	O
result	O	O
.	O	O
The	O	O
second	O	O
regex	O	O
is	O	O
20	O	O
%	O	O
faster	O	O
than	O	O
the	O	O
first	O	O
one	O	O
,	O	O
but	O	O
as	O	O
the	O	O
number	O	O
consecutive	O	O
spaces	O	O
increases	O	O
,	O	O
the	O	O
first	O	O
one	O	O
performs	O	O
better	O	O
than	O	O
the	O	O
second	O	O
one	O	O
.	O	O
Assign	O	O
the	O	O
value	O	O
to	O	O
a	O	O
variable	O	O
,	O	O
if	O	O
not	O	O
used	O	O
directly	O	O
:	O	O
st	O	O
=	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
31445024	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
determine	O	O
whether	O	O
the	O	O
following	O	O
statements	O	O
are	O	O
guaranteed	O	O
to	O	O
be	O	O
true	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
ve	O	O
always	O	O
assumed	O	O
that	O	O
autoboxing	O	O
was	O	O
equivalent	O	O
to	O	O
calling	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
corresponding	O	O
type	O	O
.	O	O
Every	O	O
discussion	O	O
that	O	O
I	O	O
'	O	O
ve	O	O
seen	O	O
on	O	O
the	O	O
topic	O	O
seems	O	O
to	O	O
support	O	O
my	O	O
assumption	O	O
.	O	O
But	O	O
all	O	O
I	O	O
could	O	O
find	O	O
in	O	O
the	O	O
JLS	O	O
was	O	O
the	O	O
following	O	O
(	O	O
§	O	O
5	O	O
.	O	O
1	O	O
.	O	O
7	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
That	O	O
describes	O	O
behavior	O	O
identical	O	O
to	O	O
that	O	O
of	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
there	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
be	O	O
any	O	O
guarantee	O	O
that	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
actually	O	O
invoked	O	O
,	O	O
meaning	O	O
there	O	O
could	O	O
theoretically	O	O
be	O	O
an	O	O
implementation	O	O
that	O	O
keeps	O	O
a	O	O
separate	O	O
,	O	O
dedicated	O	O
cache	O	O
for	O	O
autoboxed	O	O
values	O	O
.	O	O
In	O	O
such	O	O
a	O	O
case	O	O
,	O	O
there	O	O
might	O	O
not	O	O
be	O	O
identity	O	O
equality	O	O
between	O	O
cached	O	O
autoboxed	O	O
values	O	O
and	O	O
regular	O	O
cached	O	O
boxed	O	O
values	O	O
.	O	O
Oracle	O	O
'	O	O
s	O	O
autoboxing	O	O
tutorial	O	O
states	O	O
matter	O	O
-	O	O
of	O	O
-	O	O
factly	O	O
that	O	O
li	O	O
.	O	B-api_mention
add	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
is	O	O
compiled	O	O
to	O	O
li	O	O
.	O	B-api_mention
add	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
where	O	O
i	O	O
is	O	O
an	O	O
int	O	O
.	O	O
But	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
the	O	O
tutorial	O	O
should	O	O
be	O	O
considered	O	O
an	O	O
authoritative	O	O
source	O	O
.	O	O
Question	O	O
-	O	O
22725537	O	O
,	O	O
answer	O	O
-	O	O
27215810	O	O
A	O	O
slightly	O	O
shorter	O	O
version	O	O
using	O	O
reduce	B-api_mention	O
:	O	O
things	O	B-api_mention
.	B-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reduce	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
could	O	O
also	O	O
move	O	O
the	O	O
reduce	B-api_mention	O
function	O	O
to	O	O
a	O	O
static	O	O
utility	O	O
method	O	O
and	O	O
then	O	O
it	O	O
becomes	O	O
:	O	O
.	B-api_mention	B-api_mention
reduce	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
14534791	O	O
Escape	O	O
should	O	O
be	O	O
done	O	O
with	O	O
\	O	O
,	O	O
not	O	O
/	O	O
.	O	O
So	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
will	O	O
work	O	O
(	O	O
StringBuilder	B-api_mention	B-api_mention
has	O	O
overloaded	O	O
methods	O	O
for	O	O
char	O	O
and	O	O
String	B-api_mention	B-api_mention
type	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
4709175	O	O
,	O	O
answer	O	O
-	O	O
4709892	O	O
Something	O	O
none	O	O
of	O	O
the	O	O
other	O	O
answers	O	O
have	O	O
covered	O	O
that	O	O
make	O	O
enums	O	O
particularly	O	O
powerful	O	O
are	O	O
the	O	O
ability	O	O
to	O	O
have	O	O
template	O	O
methods	O	O
.	O	O
Methods	O	O
can	O	O
be	O	O
part	O	O
of	O	O
the	O	O
base	O	O
enum	O	O
and	O	O
overridden	O	O
by	O	O
each	O	O
type	O	O
.	O	O
And	O	O
,	O	O
with	O	O
the	O	O
behavior	O	O
attached	O	O
to	O	O
the	O	O
enum	O	O
,	O	O
it	O	O
often	O	O
eliminates	O	O
the	O	O
need	O	O
for	O	O
if	O	O
-	O	O
else	O	O
constructs	O	O
or	O	O
switch	O	O
statements	O	O
as	O	O
this	O	O
blog	O	O
post	O	O
demonstrates	O	O
-	O	O
where	O	O
enum	O	O
.	O	O
method	O	O
(	O	O
args	O	O
)	O	O
does	O	O
what	O	O
originally	O	O
would	O	O
be	O	O
executed	O	O
inside	O	O
the	O	O
conditional	O	O
.	O	O
The	O	O
same	O	O
example	O	O
also	O	O
shows	O	O
the	O	O
use	O	O
of	O	O
static	O	O
imports	O	O
with	O	O
enums	O	O
as	O	O
well	O	O
producing	O	O
much	O	O
cleaner	O	O
DSL	O	O
like	O	O
code	O	O
.	O	O
Some	O	O
other	O	O
interesting	O	O
qualities	O	O
include	O	O
the	O	O
fact	O	O
that	O	O
enums	O	O
provide	O	O
implementation	O	O
for	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
implement	O	O
Serializable	B-api_mention	B-api_mention
and	O	O
Comparable	B-api_mention	B-api_mention
.	O	O
For	O	O
a	O	O
complete	O	O
rundown	O	O
of	O	O
all	O	O
that	O	O
enums	O	O
have	O	O
to	O	O
offer	O	O
I	O	O
highly	O	O
recommend	O	O
Bruce	O	O
Eckel	O	O
'	O	O
s	O	O
Thinking	O	O
in	O	O
Java	O	O
4th	O	O
edition	O	O
which	O	O
devotes	O	O
an	O	O
entire	O	O
chapter	O	O
to	O	O
the	O	O
topic	O	O
.	O	O
Particularly	O	O
illuminating	O	O
are	O	O
the	O	O
examples	O	O
involving	O	O
a	O	O
Rock	O	O
,	O	O
Paper	O	O
,	O	O
Scissors	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
RoShamBo	O	O
)	O	O
game	O	O
as	O	O
enums	O	O
.	O	O
Question	O	O
-	O	O
23699371	O	O
In	O	O
Java	O	O
8	O	O
how	O	O
can	O	O
I	O	O
filter	O	O
a	O	O
collection	O	O
using	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
by	O	O
checking	O	O
the	O	O
distinctness	O	O
of	O	O
a	O	O
property	O	O
of	O	O
each	O	O
object	O	O
?	O	O
For	O	O
example	O	O
I	O	O
have	O	O
a	O	O
list	O	O
of	O	O
Person	B-api_mention	O
object	O	O
and	O	O
I	O	O
want	O	O
to	O	O
remove	O	O
people	O	O
with	O	O
the	O	O
same	O	O
name	O	O
,	O	O
persons	B-api_mention	O
.	I-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
distinct	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Will	O	O
use	O	O
the	O	O
default	O	O
equality	O	O
check	O	O
for	O	O
a	O	O
Person	B-api_mention	O
object	O	O
,	O	O
so	O	O
I	O	O
need	O	O
something	O	O
like	O	O
,	O	O
persons	B-api_mention	O
.	I-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
distinct	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Unfortunately	O	O
the	O	O
distinct	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
no	O	O
such	O	O
overload	O	O
.	O	O
Without	O	O
modifying	O	O
the	O	O
equality	O	O
check	O	O
inside	O	O
the	O	O
Person	O	O
class	O	O
is	O	O
it	O	O
possible	O	O
to	O	O
do	O	O
this	O	O
succinctly	O	O
?	O	O
Question	O	O
-	O	O
4871051	O	O
,	O	O
answer	O	O
-	O	O
27760556	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getProperty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
24907860	O	O
Instead	O	O
of	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
use	O	O
input	O	O
.	B-api_mention	O
next	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
that	O	O
should	O	O
solve	O	O
the	O	O
problem	O	O
.	O	O
Modified	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032137	O	O
Unless	O	O
there	O	O
is	O	O
a	O	O
specific	O	O
optimization	O	O
that	O	O
checks	O	O
if	O	O
the	O	O
argument	O	O
passed	O	O
to	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
collection	O	O
itself	O	O
(	O	O
and	O	O
I	O	O
highly	O	O
doubt	O	O
that	O	O
such	O	O
an	O	O
optimization	O	O
is	O	O
there	O	O
)	O	O
it	O	O
will	O	O
be	O	O
significantly	O	O
slower	O	O
than	O	O
a	O	O
simple	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Apart	O	O
from	O	O
that	O	O
(	O	O
and	O	O
at	O	O
least	O	O
equally	O	O
important	O	O
)	O	O
:	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
removeAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
just	O	O
obtuse	O	O
,	O	O
confusing	O	O
code	O	O
.	O	O
It	O	O
is	O	O
a	O	O
very	O	O
backwards	O	O
way	O	O
of	O	O
saying	O	O
"	O	O
clear	O	O
this	O	O
collection	O	O
"	O	O
.	O	O
What	O	O
advantage	O	O
would	O	O
it	O	O
have	O	O
over	O	O
the	O	O
very	O	O
understandable	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Question	O	O
-	O	O
9749746	O	O
How	O	O
do	O	O
atomic	B-api_mention	O
/	O	O
volatile	O	O
/	O	O
synchronized	O	O
work	O	O
internally	O	O
?	O	O
What	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
the	O	O
following	O	O
code	O	O
blocks	O	O
?	O	O
Code	O	O
1	O	O
#	O	O
pre	O	O
Code	O	O
2	O	O
#	O	O
pre	O	O
Code	O	O
3	O	O
#	O	O
pre	O	O
Does	O	O
volatile	O	O
work	O	O
in	O	O
the	O	O
following	O	O
way	O	O
?	O	O
Is	O	O
#	O	O
pre	O	O
equivalent	O	O
to	O	O
#	O	O
pre	O	O
I	O	O
think	O	O
that	O	O
two	O	O
threads	O	O
cannot	O	O
enter	O	O
a	O	O
synchronized	O	O
block	O	O
at	O	O
the	O	O
same	O	O
time	O	O
.	O	O
.	O	O
.	O	O
am	O	O
I	O	O
right	O	O
?	O	O
If	O	O
this	O	O
is	O	O
true	O	O
then	O	O
how	O	O
does	O	O
atomic	B-api_mention	O
.	I-api_mention	B-api_mention
incrementAndGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
work	O	O
without	O	O
synchronized	O	O
?	O	O
And	O	O
is	O	O
it	O	O
thread	O	O
-	O	O
safe	O	O
?	O	O
And	O	O
what	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
internal	O	O
reading	O	O
and	O	O
writing	O	O
to	O	O
volatile	O	O
variables	O	O
/	O	O
atomic	B-api_mention	O
variables	O	O
?	O	O
I	O	O
read	O	O
in	O	O
some	O	O
article	O	O
that	O	O
the	O	O
thread	O	O
has	O	O
a	O	O
local	O	O
copy	O	O
of	O	O
the	O	O
variables	O	O
-	O	O
what	O	O
is	O	O
that	O	O
?	O	O
Question	O	O
-	O	O
21242110	O	O
What	O	O
is	O	O
the	O	O
best	O	O
way	O	O
to	O	O
convert	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
object	O	O
to	O	O
the	O	O
new	O	O
JDK	O	O
8	O	O
/	O	O
JSR	O	O
-	O	O
310	O	O
java	B-api_mention	O
.	I-api_mention	O
time	I-api_mention	O
.	I-api_mention	O
LocalDate	I-api_mention	B-api_mention
?	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
34295445	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
We	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
extract	O	O
request	O	O
parameters	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
data	O	O
sent	O	O
by	O	O
posting	O	O
a	O	O
html	O	O
form	O	O
)	O	O
.	O	O
The	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
always	O	O
returns	O	O
String	B-api_mention	B-api_mention
value	O	O
and	O	O
the	O	O
data	O	O
come	O	O
from	O	O
client	O	O
.	O	O
request	O	O
.	B-api_mention	B-api_mention
getAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
We	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
getAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
an	O	O
object	O	O
added	O	O
to	O	O
the	O	O
request	O	O
scope	O	O
on	O	O
the	O	O
server	O	O
side	O	O
i	O	O
.	O	O
e	O	O
.	O	O
using	O	O
request	O	O
.	B-api_mention	B-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
You	O	O
can	O	O
add	O	O
any	O	O
type	O	O
of	O	O
object	O	O
you	O	O
like	O	O
here	O	O
,	O	O
Strings	O	O
,	O	O
Custom	O	O
objects	O	O
,	O	O
in	O	O
fact	O	O
any	O	O
object	O	O
.	O	O
You	O	O
add	O	O
the	O	O
attribute	O	O
to	O	O
the	O	O
request	O	O
and	O	O
forward	O	O
the	O	O
request	O	O
to	O	O
another	O	O
resource	O	O
,	O	O
the	O	O
client	O	O
does	O	O
not	O	O
know	O	O
about	O	O
this	O	O
.	O	O
So	O	O
all	O	O
the	O	O
code	O	O
handling	O	O
this	O	O
would	O	O
typically	O	O
be	O	O
in	O	O
JSP	O	O
/	O	O
servlets	O	O
.	O	O
You	O	O
can	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
add	O	O
extra	O	O
-	O	O
information	O	O
and	O	O
forward	O	O
/	O	O
redirect	O	O
the	O	O
current	O	O
request	O	O
to	O	O
another	O	O
resource	O	O
.	O	O
For	O	O
example	O	O
,	O	O
consider	O	O
about	O	O
first	O	O
.	O	O
jsp	O	O
,	O	O
#	O	O
pre	O	O
and	O	O
second	O	O
.	O	O
jsp	O	O
:	O	O
#	O	O
pre	O	O
From	O	O
your	O	O
browser	O	O
,	O	O
run	O	O
first	O	O
.	O	O
jsp	O	O
?	O	O
CLIENT	O	O
=	O	O
you	O	O
and	O	O
the	O	O
output	O	O
on	O	O
your	O	O
browser	O	O
is	O	O
#	O	O
pre	O	O
The	O	O
basic	O	O
difference	O	O
between	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getParameter	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
that	O	O
the	O	O
first	O	O
method	O	O
extracts	O	O
a	O	O
(	O	O
serialized	O	O
)	O	O
Java	O	O
object	O	O
and	O	O
the	O	O
other	O	O
provides	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
.	O	O
For	O	O
both	O	O
cases	O	O
a	O	O
name	O	O
is	O	O
given	O	O
so	O	O
that	O	O
its	O	O
value	O	O
(	O	O
be	O	O
it	O	O
string	O	O
or	O	O
a	O	O
java	O	O
bean	O	O
)	O	O
can	O	O
be	O	O
looked	O	O
up	O	O
and	O	O
extracted	O	O
.	O	O
Question	O	O
-	O	O
5011932	O	O
I	O	O
am	O	O
storing	O	O
a	O	O
SQL	O	O
query	O	O
in	O	O
my	O	O
strings	O	O
.	O	O
xml	O	O
file	O	O
and	O	O
I	O	O
want	O	O
to	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Format	I-api_mention	I-api_mention
to	O	O
build	O	O
the	O	O
final	O	O
string	O	O
in	O	O
code	O	O
.	O	O
The	O	O
SELECT	O	O
statement	O	O
uses	O	O
a	O	O
like	O	O
,	O	O
something	O	O
like	O	O
this	O	O
:	O	O
SELECT	O	O
Field1	O	O
,	O	O
Field2	O	O
FROM	O	O
mytable	O	O
WHERE	O	O
Field1	O	O
LIKE	O	O
'	O	O
%	O	O
something	O	O
%	O	O
'	O	O
In	O	O
order	O	O
to	O	O
format	O	O
that	O	O
I	O	O
replace	O	O
'	O	O
something	O	O
'	O	O
with	O	O
%	O	O
1	O	O
$	O	O
s	O	O
so	O	O
it	O	O
becomes	O	O
:	O	O
SELECT	O	O
Field1	O	O
,	O	O
Field2	O	O
FROM	O	O
mytable	O	O
WHERE	O	O
Field1	O	O
LIKE	O	O
\	O	O
'	O	O
%	O	O
%	O	O
1	O	O
$	O	O
s	O	O
%	O	O
\	O	O
'	O	O
I	O	O
escape	O	O
the	O	O
single	O	O
quotes	O	O
with	O	O
the	O	O
backslash	O	O
.	O	O
However	O	O
I	O	O
am	O	O
not	O	O
able	O	O
to	O	O
escape	O	O
the	O	O
%	O	O
sign	O	O
.	O	O
How	O	O
can	O	O
I	O	O
include	O	O
a	O	O
like	O	O
statement	O	O
in	O	O
my	O	O
strings	O	O
.	O	O
xml	O	O
file	O	O
?	O	O
Question	O	O
-	O	O
9297899	O	O
We	O	O
can	O	O
determine	O	O
the	O	O
length	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
using	O	O
its	O	O
public	O	O
method	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
like	O	O
#	O	O
pre	O	O
Similarly	O	O
we	O	O
can	O	O
determine	O	O
the	O	O
length	O	O
of	O	O
an	O	O
Array	O	B-api_mention
object	O	O
using	O	O
the	O	O
length	O	O
property	O	O
#	O	O
pre	O	O
Whereas	O	O
the	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
defined	O	O
inside	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
class	O	O
,	O	O
where	O	O
is	O	O
this	O	O
length	O	O
property	O	O
of	O	O
Array	O	O
defined	O	O
?	O	O
Question	O	O
-	O	O
24603186	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
the	O	O
Collection	B-api_mention	B-api_mention
interface	O	O
was	O	O
extended	O	O
with	O	O
two	O	O
methods	O	O
that	O	O
return	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
:	O	I-api_mention
stream	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
returns	O	O
a	O	O
sequential	O	O
stream	O	O
,	O	O
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
returns	O	O
a	O	O
possibly	O	O
-	O	O
parallel	O	O
stream	O	O
.	O	O
Stream	O	B-api_mention
itself	O	O
also	O	O
has	O	O
a	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
that	O	O
returns	O	O
an	O	O
equivalent	O	O
parallel	O	O
stream	O	O
(	O	O
either	O	O
mutating	O	O
the	O	O
current	O	O
stream	O	O
to	O	O
be	O	O
parallel	O	O
or	O	O
creating	O	O
a	O	O
new	O	O
stream	O	O
)	O	O
.	O	O
The	O	O
duplication	O	O
has	O	O
obvious	O	O
disadvantages	O	O
:	O	O
#	O	O
li	O	O
It	O	O
'	O	O
s	O	O
confusing	O	O
.	O	O
A	O	O
question	O	O
asks	O	O
whether	O	O
calling	O	O
both	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
necessary	O	O
to	O	O
be	O	O
sure	O	O
the	O	O
stream	O	O
is	O	O
parallel	O	O
,	O	O
given	O	O
that	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
return	O	O
a	O	O
sequential	O	O
stream	O	O
.	O	O
Why	O	O
does	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
exist	O	O
if	O	O
it	O	O
can	O	O
'	O	O
t	O	O
make	O	O
a	O	O
guarantee	O	O
?	O	O
The	O	O
other	O	O
way	O	O
around	O	O
is	O	O
also	O	O
confusing	O	O
-	O	O
-	O	O
if	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
a	O	O
sequential	O	O
stream	O	O
,	O	O
there	O	O
'	O	O
s	O	O
probably	O	O
a	O	O
reason	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
an	O	O
inherently	O	O
sequential	O	O
data	O	O
structure	O	O
for	O	O
which	O	O
parallel	O	O
streams	O	O
are	O	O
a	O	O
performance	O	O
trap	O	O
)	O	O
;	O	O
what	O	O
should	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
do	O	O
for	O	O
such	O	O
a	O	O
stream	O	O
?	O	O
(	O	O
UnsupportedOperationException	B-api_mention	O
is	O	O
not	O	O
allowed	O	O
by	O	O
parallel	B-api_mention	O
(	I-api_mention	O
)	I-api_mention	O
'	O	O
s	O	O
specification	O	O
.	O	O
)	O	O
#	O	O
li	O	O
Adding	O	O
methods	O	O
to	O	O
an	O	O
interface	O	O
risks	O	O
conflicts	O	O
if	O	O
an	O	O
existing	O	O
implementation	O	O
has	O	O
a	O	O
similarly	O	O
-	O	O
named	O	O
method	O	O
with	O	O
an	O	O
incompatible	O	O
return	O	O
type	O	O
.	O	O
Adding	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
addition	O	O
to	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
doubles	O	O
the	O	O
risk	O	O
for	O	O
little	O	O
gain	O	O
.	O	O
(	O	O
Note	O	O
that	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
at	O	O
one	O	O
point	O	O
just	O	O
named	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
though	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
if	O	O
it	O	O
was	O	O
renamed	O	O
to	O	O
avoid	O	O
name	O	O
clashes	O	O
or	O	O
for	O	O
another	O	O
reason	O	O
.	O	O
)	O	O
Why	O	O
does	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
exist	O	O
when	O	O
calling	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
the	O	O
same	O	O
thing	O	O
?	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923042	O	O
The	O	O
pattern	O	O
with	O	O
Optional	B-api_mention	B-api_mention
is	O	O
for	O	O
one	O	O
to	O	O
avoid	O	O
returning	O	O
null	O	O
.	O	O
It	O	O
'	O	O
s	O	O
still	O	O
perfectly	O	O
possible	O	O
to	O	O
pass	O	O
in	O	O
null	O	O
to	O	O
a	O	O
method	O	O
.	O	O
While	O	O
these	O	O
aren	O	O
'	O	O
t	O	O
really	O	O
official	O	O
yet	O	O
,	O	O
you	O	O
can	O	O
use	O	O
JSR	O	O
-	O	O
308	O	O
style	O	O
annotations	O	O
to	O	O
indicate	O	O
whether	O	O
or	O	O
not	O	O
you	O	O
accept	O	O
null	O	O
values	O	O
into	O	O
the	O	O
function	O	O
.	O	O
Note	O	O
that	O	O
you	O	O
'	O	O
d	O	O
have	O	O
to	O	O
have	O	O
the	O	O
right	O	O
tooling	O	O
to	O	O
actually	O	O
identify	O	O
it	O	O
,	O	O
and	O	O
it	O	O
'	O	O
d	O	O
provide	O	O
more	O	O
of	O	O
a	O	O
static	O	O
check	O	O
than	O	O
an	O	O
enforceable	O	O
runtime	O	O
policy	O	O
,	O	O
but	O	O
it	O	O
would	O	O
help	O	O
.	O	O
public	O	O
int	O	O
calculateSomething	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
{	O	O
}	O	O
Question	O	O
-	O	O
29229373	O	O
,	O	O
answer	O	O
-	O	O
29230939	O	O
When	O	O
looking	O	O
into	O	O
the	O	O
implementation	O	O
(	O	O
ReferencePipeline	O	O
.	O	O
java	O	O
)	O	O
we	O	O
see	O	O
the	O	O
method	O	O
[	O	O
link	O	O
]	O	O
#	O	O
pre	O	O
which	O	O
will	O	O
be	O	O
invoke	O	O
for	O	O
findFirst	B-api_mention	B-api_mention
operation	O	O
.	O	O
The	O	O
special	O	O
thing	O	O
to	O	O
take	O	O
care	O	O
about	O	O
is	O	O
the	O	O
sink	O	O
.	O	B-api_mention
cancellationRequested	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
which	O	O
allows	O	O
to	O	O
end	O	O
the	O	O
loop	O	O
on	O	O
the	O	O
first	O	O
match	O	O
.	O	O
Compare	O	O
to	O	O
[	O	O
link	O	O
]	O	O
#	O	O
pre	O	O
The	O	O
method	O	O
for	O	O
advancing	O	O
one	O	O
item	O	O
ends	O	O
up	O	O
calling	O	O
forEach	O	B-api_mention
on	O	O
the	O	O
sub	O	O
-	O	O
stream	O	O
without	O	O
any	O	O
possibility	O	O
for	O	O
earlier	O	O
termination	O	O
and	O	O
the	O	O
comment	O	O
at	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
flatMap	O	B-api_mention
method	O	O
even	O	O
tells	O	O
about	O	O
this	O	O
absent	O	O
feature	O	O
.	O	O
Since	O	O
this	O	O
is	O	O
more	O	O
than	O	O
just	O	O
an	O	O
optimization	O	O
thing	O	O
as	O	O
it	O	O
implies	O	O
that	O	O
the	O	O
code	O	O
simply	O	O
breaks	O	O
when	O	O
the	O	O
sub	O	O
-	O	O
stream	O	O
is	O	O
infinite	O	O
,	O	O
I	O	O
hope	O	O
that	O	O
the	O	O
developers	O	O
soon	O	O
prove	O	O
that	O	O
they	O	O
	O	O
can	O	O
do	O	O
better	O	O
than	O	O
this	O	O
	O	O
	O	O
To	O	O
illustrate	O	O
the	O	O
implications	O	O
,	O	O
while	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
iterate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
works	O	O
as	O	O
expected	O	O
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
end	O	O
up	O	O
in	O	O
an	O	O
infinite	O	O
loop	O	O
.	O	O
Regarding	O	O
the	O	O
specification	O	O
,	O	O
most	O	O
of	O	O
it	O	O
can	O	O
be	O	O
found	O	O
in	O	O
the	O	O
chapter	O	O
	O	O
Stream	O	B-api_mention
operations	O	O
and	O	O
pipelines	O	O
	O	O
of	O	O
the	O	O
package	O	O
specification	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
	O	O
s	O	O
clear	O	O
that	O	O
a	O	O
short	O	O
-	O	O
circuiting	O	O
operation	O	O
doesn	O	O
	O	O
t	O	O
guaranty	O	O
a	O	O
finite	O	O
time	O	O
termination	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
when	O	O
a	O	O
filter	O	O
doesn	O	O
	O	O
t	O	O
match	O	O
any	O	O
item	O	O
the	O	O
processing	O	O
can	O	O
	O	O
t	O	O
complete	O	O
,	O	O
but	O	O
an	O	O
implementation	O	O
which	O	O
doesn	O	O
	O	O
t	O	O
support	O	O
any	O	O
termination	O	O
in	O	O
finite	O	O
time	O	O
by	O	O
simply	O	O
ignoring	O	O
the	O	O
short	O	O
-	O	O
circuiting	O	O
nature	O	O
of	O	O
an	O	O
operation	O	O
is	O	O
far	O	O
off	O	O
the	O	O
specification	O	O
.	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846964	O	O
For	O	O
one	O	O
,	O	O
you	O	O
can	O	O
get	O	O
away	O	O
with	O	O
reference	O	O
sharing	O	O
.	O	O
A	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
etc	O	O
will	O	O
require	O	O
an	O	O
allocated	O	O
object	O	O
,	O	O
and	O	O
possibly	O	O
some	O	O
extra	O	O
elements	O	O
to	O	O
hold	O	O
the	O	O
data	O	O
,	O	O
but	O	O
you	O	O
only	O	O
need	O	O
one	O	O
copy	O	O
of	O	O
an	O	O
immutable	O	O
empty	O	O
collection	O	O
(	O	O
list	O	O
,	O	O
set	O	O
,	O	O
map	O	O
,	O	O
or	O	O
any	O	O
other	O	O
such	O	O
)	O	O
.	O	O
This	O	O
makes	O	O
it	O	O
an	O	O
obvious	O	O
choice	O	O
when	O	O
a	O	O
method	O	O
you	O	O
'	O	O
re	O	O
calling	O	O
needs	O	O
to	O	O
accept	O	O
a	O	O
Map	B-api_mention	B-api_mention
but	O	O
does	O	O
not	O	O
need	O	O
to	O	O
edit	O	O
it	O	O
.	O	O
I	O	O
suggest	O	O
checking	O	O
out	O	O
Josh	O	O
Bloch	O	O
'	O	O
s	O	O
Effective	O	O
Java	O	O
,	O	O
which	O	O
lists	O	O
some	O	O
very	O	O
nice	O	O
attributes	O	O
of	O	O
immutable	O	O
objects	O	O
(	O	O
including	O	O
thread	O	O
safety	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
31965160	O	O
With	O	O
Java	O	O
8	O	O
Streams	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
if	O	O
you	O	O
need	O	O
a	O	O
set	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725453	O	O
Since	O	O
all	O	O
lists	O	O
are	O	O
already	O	O
"	O	O
sorted	O	O
"	O	O
by	O	O
the	O	O
order	O	O
the	O	O
items	O	O
were	O	O
added	O	O
(	O	O
FIFO	O	O
ordering	O	O
)	O	O
,	O	O
you	O	O
can	O	O
"	O	O
resort	O	O
"	O	O
them	O	O
with	O	O
another	O	O
ordering	O	O
,	O	O
including	O	O
the	O	O
natural	O	O
ordering	O	O
of	O	O
elements	O	O
,	O	O
using	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
EDIT	O	O
:	O	O
Lists	B-api_mention	O
as	O	O
data	O	O
structures	O	O
are	O	O
based	O	O
in	O	O
what	O	O
is	O	O
interesting	O	O
is	O	O
the	O	O
ordering	O	O
in	O	O
which	O	O
the	O	O
items	O	O
where	O	O
inserted	O	O
.	O	O
Sets	O	O
do	O	O
not	O	O
have	O	O
that	O	O
information	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
order	O	O
by	O	O
addition	O	O
time	O	O
,	O	O
use	O	O
List	B-api_mention	B-api_mention
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
order	O	O
by	O	O
other	O	O
criteria	O	O
,	O	O
use	O	O
SortedSet	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
31445024	O	O
,	O	O
answer	O	O
-	O	O
31871515	O	O
Autoboxing	O	O
is	O	O
absolutely	O	O
implemented	O	O
using	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
.	O	O
.	O	O
in	O	O
the	O	O
OpenJDK	O	O
.	O	O
If	O	O
that	O	O
'	O	O
s	O	O
your	O	O
implementation	O	O
,	O	O
read	O	O
on	O	O
.	O	O
.	O	O
.	O	O
if	O	O
not	O	O
,	O	O
skip	O	O
to	O	O
below	O	O
.	O	O
#	O	O
pre	O	O
Java	O	O
documentation	O	O
states	O	O
that	O	O
Boolean	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
always	O	O
returns	O	O
Boolean	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
TRUE	I-api_mention	I-api_mention
or	O	O
Boolean	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
FALSE	I-api_mention	I-api_mention
,	O	O
therefore	O	O
your	O	O
reference	O	O
comparisons	O	O
in	O	O
these	O	O
cases	O	O
will	O	O
succeed	O	O
.	O	O
(	O	O
(	O	O
Integer	B-api_mention	B-api_mention
)	O	O
1	O	O
)	O	O
=	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
For	O	O
this	O	O
particular	O	O
example	O	O
,	O	O
under	O	O
the	O	O
OpenJDK	O	O
implementation	O	O
with	O	O
default	O	O
settings	O	O
,	O	O
it	O	O
will	O	O
probably	O	O
work	O	O
by	O	O
virtue	O	O
of	O	O
the	O	O
fact	O	O
that	O	O
you	O	O
picked	O	O
a	O	O
value	O	O
<	O	O
128	O	O
which	O	O
is	O	O
cached	O	O
at	O	O
startup	O	O
(	O	O
although	O	O
this	O	O
can	O	O
be	O	O
overridden	O	O
as	O	O
a	O	O
commandline	O	O
arg	O	O
)	O	O
.	O	O
It	O	O
may	O	O
also	O	O
work	O	O
for	O	O
larger	O	O
values	O	O
if	O	O
it	O	O
'	O	O
s	O	O
frequently	O	O
used	O	O
enough	O	O
to	O	O
be	O	O
cached	O	O
.	O	O
Unless	O	O
you	O	O
'	O	O
re	O	O
working	O	O
under	O	O
"	O	O
safe	O	O
"	O	O
assumptions	O	O
about	O	O
the	O	O
Integer	B-api_mention	B-api_mention
cache	O	O
,	O	O
don	O	O
'	O	O
t	O	O
expect	O	O
the	O	O
reference	O	O
comparison	O	O
to	O	O
be	O	O
an	O	O
equality	O	O
.	O	O
Long	B-api_mention	B-api_mention
,	O	O
Short	B-api_mention	B-api_mention
,	O	O
Character	B-api_mention	B-api_mention
and	O	O
Byte	B-api_mention	B-api_mention
incidentally	O	O
implement	O	O
this	O	O
caching	O	O
too	O	O
,	O	O
but	O	O
unlike	O	O
Integer	B-api_mention	B-api_mention
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
tunable	O	O
.	O	O
Byte	O	O
will	O	O
always	O	O
work	O	O
if	O	O
you	O	O
'	O	O
re	O	O
comparing	O	O
autobox	O	O
/	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
references	O	O
since	O	O
obviously	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
go	O	O
out	O	O
of	O	O
range	O	O
.	O	O
Float	B-api_mention	O
and	O	O
Double	B-api_mention	B-api_mention
will	O	O
unsurprisingly	O	O
always	O	O
create	O	O
a	O	O
new	O	O
instance	O	O
.	O	O
Now	O	O
,	O	O
in	O	O
purely	O	O
generic	O	O
terms	O	O
?	O	O
See	O	O
this	O	O
section	O	O
of	O	O
the	O	O
JLS	O	O
-	O	O
you	O	O
MUST	O	O
be	O	O
given	O	O
equal	O	O
references	O	O
for	O	O
boolean	O	O
and	O	O
any	O	O
int	O	O
or	O	O
char	O	O
within	O	O
the	O	O
-	O	O
128	O	O
to	O	O
127	O	O
range	O	O
.	O	O
There	O	O
are	O	O
no	O	O
guarantees	O	O
for	O	O
anything	O	O
else	O	O
.	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
32542424	O	O
What	O	O
you	O	O
can	O	O
do	O	O
is	O	O
scan	O	O
the	O	O
entire	O	O
text	O	O
using	O	O
Scanner	B-api_mention	B-api_mention
and	O	O
go	O	O
through	O	O
the	O	O
text	O	O
line	O	O
by	O	O
line	O	O
.	O	O
Of	O	O
course	O	O
you	O	O
should	O	O
import	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
Scanner	B-api_mention	B-api_mention
basically	O	O
scans	O	O
all	O	O
the	O	O
text	O	O
.	O	O
The	O	O
while	O	O
loop	O	O
is	O	O
used	O	O
to	O	O
traverse	O	O
through	O	O
the	O	O
entire	O	O
text	O	O
.	O	O
The	O	O
.	B-api_mention	O
hasNextLine	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
is	O	O
a	O	O
boolean	O	O
that	O	O
returns	O	O
true	O	O
if	O	O
there	O	O
are	O	O
still	O	O
more	O	O
lines	O	O
in	O	O
the	O	O
text	O	O
.	O	O
The	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
gives	O	O
you	O	O
an	O	O
entire	O	O
line	O	O
as	O	O
a	O	O
String	B-api_mention	B-api_mention
which	O	O
you	O	O
can	O	O
then	O	O
use	O	O
the	O	O
way	O	O
you	O	O
want	O	O
.	O	O
Try	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
print	O	O
the	O	O
text	O	O
.	O	O
Side	O	O
Note	O	O
:	O	O
.	O	O
txt	O	O
is	O	O
the	O	O
file	O	O
type	O	O
text	O	O
.	O	O
Question	O	O
-	O	O
22409102	O	O
,	O	O
answer	O	O
-	O	O
22501695	O	O
The	O	O
approach	O	O
used	O	O
by	O	O
Math	B-api_mention	O
.	I-api_mention	O
min	I-api_mention	O
is	O	O
similar	O	O
to	O	O
what	O	O
Jesper	O	O
proposes	O	O
but	O	O
a	O	O
little	O	O
clearer	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8275499	O	O
,	O	O
answer	O	O
-	O	O
8275761	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
defined	O	O
in	O	O
Object	B-api_mention	B-api_mention
class	O	O
with	O	O
the	O	O
following	O	O
signature	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
it	O	O
is	O	O
not	O	O
defined	O	O
as	O	O
static	O	O
,	O	O
you	O	O
can	O	O
not	O	O
call	O	O
it	O	O
within	O	O
a	O	O
static	O	O
code	O	O
block	O	O
.	O	O
See	O	O
these	O	O
answers	O	O
for	O	O
more	O	O
information	O	O
:	O	O
Q1	O	O
,	O	O
Q2	O	O
,	O	O
Q3	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
in	O	O
a	O	O
static	O	O
context	O	O
,	O	O
then	O	O
you	O	O
have	O	O
to	O	O
use	O	O
the	O	O
class	O	O
literal	O	O
expression	O	O
to	O	O
get	O	O
the	O	O
Class	B-api_mention	B-api_mention
,	O	O
so	O	O
you	O	O
basically	O	O
have	O	O
to	O	O
do	O	O
like	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
type	O	O
of	O	O
expression	O	O
is	O	O
called	O	O
Class	B-api_mention	O
Literals	O	O
and	O	O
they	O	O
are	O	O
explained	O	O
in	O	O
Java	O	O
Language	O	O
Specification	O	O
Book	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
blockquote	O	O
You	O	O
can	O	O
also	O	O
find	O	O
information	O	O
about	O	O
this	O	O
subject	O	O
on	O	O
API	O	O
documentation	O	O
for	O	O
Class	B-api_mention	O
.	O	O
Question	O	O
-	O	O
24511052	O	O
I	O	O
am	O	O
looking	O	O
for	O	O
a	O	O
concise	O	O
way	O	O
to	O	O
convert	O	O
an	O	O
Iterator	O	B-api_mention
to	O	O
a	O	O
Stream	B-api_mention	B-api_mention
or	O	O
more	O	O
specifically	O	O
to	O	O
"	O	O
view	O	O
"	O	O
the	O	O
iterator	O	O
as	O	O
a	O	O
stream	O	O
.	O	O
For	O	O
performance	O	O
reason	O	O
,	O	O
I	O	O
would	O	O
like	O	O
to	O	O
avoid	O	O
a	O	O
copy	O	O
of	O	O
the	O	O
iterator	O	O
in	O	O
a	O	O
new	O	O
list	O	O
:	O	O
#	O	O
pre	O	O
Based	O	O
on	O	O
the	O	O
some	O	O
suggestions	O	O
in	O	O
the	O	O
comments	O	O
,	O	O
I	O	O
have	O	O
also	O	O
tried	O	O
to	O	O
use	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
generate	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
I	O	O
get	O	O
a	O	O
NoSuchElementException	B-api_mention	B-api_mention
(	O	O
since	O	O
there	O	O
is	O	O
no	O	O
invocation	O	O
of	O	O
hasNext	B-api_mention	B-api_mention
)	O	O
#	O	O
pre	O	O
I	O	O
have	O	O
looked	O	O
at	O	O
StreamSupport	B-api_mention	B-api_mention
and	O	O
Collections	B-api_mention	B-api_mention
but	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
find	O	O
anything	O	O
.	O	O
Question	O	O
-	O	O
14602062	O	O
,	O	O
answer	O	O
-	O	O
14602155	O	O
From	O	O
the	O	O
documentation	O	O
of	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
So	O	O
you	O	O
will	O	O
have	O	O
to	O	O
use	O	O
the	O	O
two	O	O
argument	O	O
version	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
with	O	O
a	O	O
negative	O	O
value	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
split	O	O
=	O	O
data	O	O
.	O	B-api_mention
split	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Doc	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
will	O	O
not	O	O
leave	O	O
out	O	O
any	O	O
empty	O	O
elements	O	O
,	O	O
including	O	O
the	O	O
trailing	O	O
ones	O	O
.	O	O
Question	O	O
-	O	O
20331163	O	O
,	O	O
answer	O	O
-	O	O
20331323	O	O
Another	O	O
way	O	O
of	O	O
doing	O	O
that	O	O
is	O	O
:	O	O
String	B-api_mention	B-api_mention
date	O	O
=	O	O
dateAndTime	O	O
.	B-api_mention	B-api_mention
substring	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
I	O	O
'	O	O
m	O	O
not	O	O
exactly	O	O
certain	O	O
,	O	O
but	O	O
I	O	O
think	O	O
this	O	O
might	O	O
be	O	O
faster	O	O
/	O	O
use	O	O
less	O	O
memory	O	O
than	O	O
using	O	O
the	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Question	O	O
-	O	O
28459498	O	O
,	O	O
answer	O	O
-	O	O
28460301	O	O
Stream	B-api_mention	B-api_mention
s	O	O
are	O	O
built	O	O
around	O	O
Spliterator	O	B-api_mention
s	O	O
which	O	O
are	O	O
stateful	O	O
,	O	O
mutable	O	O
objects	O	O
.	O	O
They	O	O
don	O	O
	O	O
t	O	O
have	O	O
a	O	O
	O	O
reset	O	O
	O	O
action	O	O
and	O	O
in	O	O
fact	O	O
,	O	O
requiring	O	O
to	O	O
support	O	O
such	O	O
rewind	O	O
action	O	O
would	O	O
	O	O
take	O	O
away	O	O
much	O	O
power	O	O
	O	O
.	O	O
How	O	O
would	O	O
Random	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ints	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
be	O	O
supposed	O	O
to	O	O
handle	O	O
such	O	O
a	O	O
request	O	O
?	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
for	O	O
Stream	B-api_mention	B-api_mention
s	O	O
which	O	O
have	O	O
a	O	O
retraceable	O	O
origin	O	O
,	O	O
it	O	O
is	O	O
easy	O	O
to	O	O
construct	O	O
an	O	O
equivalent	O	O
Stream	B-api_mention	B-api_mention
to	O	O
be	O	O
used	O	O
again	O	O
.	O	O
Just	O	O
put	O	O
the	O	O
steps	O	O
made	O	O
to	O	O
construct	O	O
the	O	O
Stream	B-api_mention	B-api_mention
into	O	O
a	O	O
reusable	O	O
method	O	O
.	O	O
Keep	O	O
in	O	O
mind	O	O
that	O	O
repeating	O	O
these	O	O
steps	O	O
is	O	O
not	O	O
an	O	O
expensive	O	O
operation	O	O
as	O	O
all	O	O
these	O	O
steps	O	O
are	O	O
lazy	O	O
operations	O	O
;	O	O
the	O	O
actual	O	O
work	O	O
starts	O	O
with	O	O
the	O	O
terminal	O	O
operation	O	O
and	O	O
depending	O	O
on	O	O
the	O	O
actual	O	O
terminal	O	O
operation	O	O
entirely	O	O
different	O	O
code	O	O
might	O	O
get	O	O
executed	O	O
.	O	O
It	O	O
would	O	O
be	O	O
up	O	O
to	O	O
you	O	O
,	O	O
the	O	O
writer	O	O
of	O	O
such	O	O
a	O	O
method	O	O
,	O	O
to	O	O
specify	O	O
what	O	O
calling	O	O
the	O	O
method	O	O
twice	O	O
implies	O	O
:	O	O
does	O	O
it	O	O
reproduce	O	O
exactly	O	O
the	O	O
same	O	O
sequence	O	O
,	O	O
as	O	O
streams	O	O
created	O	O
for	O	O
an	O	O
unmodified	O	O
array	O	O
or	O	O
collection	O	O
do	O	O
,	O	O
or	O	O
does	O	O
it	O	O
produce	O	O
a	O	O
stream	O	O
with	O	O
a	O	O
similar	O	O
semantics	O	O
but	O	O
different	O	O
elements	O	O
like	O	O
a	O	O
stream	O	O
of	O	O
random	O	O
ints	O	O
or	O	O
a	O	O
stream	O	O
of	O	O
console	O	O
input	O	O
lines	O	O
,	O	O
etc	O	O
.	O	O
By	O	O
the	O	O
way	O	O
,	O	O
to	O	O
avoid	O	O
confusion	O	O
,	O	O
a	O	O
terminal	O	O
operation	O	O
consumes	O	O
the	O	O
Stream	B-api_mention	B-api_mention
which	O	O
is	O	O
distinct	O	O
from	O	O
closing	O	O
the	O	O
Stream	B-api_mention	B-api_mention
as	O	O
calling	O	O
close	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
on	O	O
the	O	O
stream	O	O
does	O	O
(	O	O
which	O	O
is	O	O
required	O	O
for	O	O
streams	O	O
having	O	O
associated	O	O
resources	O	O
like	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
produced	O	O
by	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
It	O	O
seems	O	O
that	O	O
a	O	O
lot	O	O
of	O	O
confusion	O	O
stems	O	O
from	O	O
misguiding	O	O
comparison	O	O
of	O	O
IEnumerable	O	O
with	O	O
Stream	B-api_mention	B-api_mention
.	O	O
An	O	O
IEnumerable	O	O
represents	O	O
the	O	O
ability	O	O
to	O	O
provide	O	O
an	O	O
actual	O	O
IEnumerator	O	O
,	O	O
so	O	O
its	O	O
like	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
in	O	O
Java	O	O
.	O	O
In	O	O
contrast	O	O
,	O	O
a	O	O
Stream	B-api_mention	B-api_mention
is	O	O
a	O	O
kind	O	O
of	O	O
iterator	O	O
and	O	O
comparable	O	O
to	O	O
an	O	O
IEnumerator	O	O
so	O	O
it	O	O
	O	O
s	O	O
wrong	O	O
to	O	O
claim	O	O
that	O	O
this	O	O
kind	O	O
of	O	O
data	O	O
type	O	O
can	O	O
be	O	O
used	O	O
multiple	O	O
times	O	O
in	O	O
.	O	O
NET	O	O
,	O	O
the	O	O
support	O	O
for	O	O
IEnumerator	O	O
.	O	O
Reset	O	O
is	O	O
optional	O	O
.	O	O
The	O	O
examples	O	O
discussed	O	O
here	O	O
rather	O	O
use	O	O
the	O	O
fact	O	O
that	O	O
an	O	O
IEnumerable	O	O
can	O	O
be	O	O
used	O	O
to	O	O
fetch	O	O
new	O	O
IEnumerator	O	O
s	O	O
and	O	O
that	O	O
works	O	O
with	O	O
Java	O	O
	O	O
s	O	O
Collection	B-api_mention	B-api_mention
s	O	O
as	O	O
well	O	O
;	O	O
you	O	O
can	O	O
get	O	O
a	O	O
new	O	O
Stream	B-api_mention	B-api_mention
.	O	O
If	O	O
the	O	O
Java	O	O
developers	O	O
decided	O	O
to	O	O
add	O	O
the	O	O
Stream	B-api_mention	B-api_mention
operations	O	O
to	O	O
Iterable	B-api_mention	B-api_mention
directly	O	O
,	O	O
with	O	O
intermediate	O	O
operations	O	O
returning	O	O
another	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
it	O	O
was	O	O
really	O	O
comparable	O	O
and	O	O
it	O	O
could	O	O
work	O	O
the	O	O
same	O	O
way	O	O
.	O	O
However	O	O
,	O	O
the	O	O
developers	O	O
decided	O	O
against	O	O
it	O	O
and	O	O
the	O	O
decision	O	O
is	O	O
discussed	O	O
in	O	O
this	O	O
question	O	O
.	O	O
The	O	O
biggest	O	O
point	O	O
is	O	O
the	O	O
confusion	O	O
about	O	O
eager	O	O
Collection	B-api_mention	B-api_mention
operations	O	O
and	O	O
lazy	O	O
Stream	B-api_mention	B-api_mention
operations	O	O
.	O	O
By	O	O
looking	O	O
at	O	O
the	O	O
.	O	O
NET	O	O
API	O	O
,	O	O
I	O	O
(	O	O
yes	O	O
,	O	O
personally	O	O
)	O	O
find	O	O
it	O	O
justified	O	O
.	O	O
While	O	O
it	O	O
looks	O	O
reasonable	O	O
looking	O	O
at	O	O
IEnumerable	O	O
alone	O	O
,	O	O
a	O	O
particular	O	O
Collection	B-api_mention	B-api_mention
will	O	O
have	O	O
lots	O	O
of	O	O
methods	O	O
manipulating	O	O
the	O	O
Collection	B-api_mention	B-api_mention
directly	O	O
and	O	O
lots	O	O
of	O	O
methods	O	O
returning	O	O
a	O	O
lazy	O	O
IEnumerable	O	O
,	O	O
while	O	O
the	O	O
particular	O	O
nature	O	O
of	O	O
a	O	O
method	O	O
isn	O	O
	O	O
t	O	O
always	O	O
intuitively	O	O
recognizable	O	O
.	O	O
The	O	O
worst	O	O
example	O	O
I	O	O
found	O	O
(	O	O
within	O	O
the	O	O
few	O	O
minutes	O	O
I	O	O
looked	O	O
at	O	O
it	O	O
)	O	O
is	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Reverse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
whose	O	O
name	O	O
matches	O	O
exactly	O	O
the	O	O
name	O	O
of	O	O
the	O	O
inherited	O	O
(	O	O
is	O	O
this	O	O
the	O	O
right	O	O
terminus	O	O
for	O	O
extension	O	O
methods	O	O
?	O	O
)	O	O
Enumerable	O	B-api_mention
.	O	I-api_mention
Reverse	O	I-api_mention
(	O	I-api_mention
)	O	I-api_mention
while	O	O
having	O	O
an	O	O
entirely	O	O
contradicting	O	O
behavior	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
these	O	O
are	O	O
two	O	O
distinct	O	O
decisions	O	O
.	O	O
The	O	O
first	O	O
one	O	O
to	O	O
make	O	O
Stream	B-api_mention	B-api_mention
a	O	O
type	O	O
distinct	O	O
from	O	O
Iterable	B-api_mention	B-api_mention
/	O	O
Collection	B-api_mention	B-api_mention
and	O	O
the	O	O
second	O	O
to	O	O
make	O	O
Stream	B-api_mention	B-api_mention
a	O	O
kind	O	O
of	O	O
one	O	O
time	O	O
iterator	O	O
rather	O	O
than	O	O
another	O	O
kind	O	O
of	O	O
iterable	O	O
.	O	O
But	O	O
these	O	O
decision	O	O
were	O	O
made	O	O
together	O	O
and	O	O
it	O	O
might	O	O
be	O	O
the	O	O
case	O	O
that	O	O
separating	O	O
these	O	O
two	O	O
decision	O	O
never	O	O
was	O	O
considered	O	O
.	O	O
It	O	O
wasn	O	O
	O	O
t	O	O
created	O	O
with	O	O
being	O	O
comparable	O	O
to	O	O
.	O	O
NET	O	O
	O	O
s	O	O
in	O	O
mind	O	O
.	O	O
The	O	O
actual	O	O
API	O	O
design	O	O
decision	O	O
was	O	O
to	O	O
add	O	O
an	O	O
improved	O	O
type	O	O
of	O	O
iterator	O	O
,	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
.	O	I-api_mention
Spliterator	B-api_mention	I-api_mention
s	O	O
can	O	O
be	O	O
provided	O	O
by	O	O
the	O	O
old	O	O
Iterable	B-api_mention	B-api_mention
s	O	O
(	O	O
which	O	O
is	O	O
the	O	O
way	O	O
how	O	O
these	O	O
were	O	O
retrofitted	O	O
)	O	O
or	O	O
entirely	O	O
new	O	O
implementations	O	O
.	O	O
Then	O	O
,	O	O
Stream	B-api_mention	B-api_mention
was	O	O
added	O	O
as	O	O
a	O	O
high	O	O
-	O	O
level	O	O
front	O	O
-	O	O
end	O	O
to	O	O
the	O	O
rather	O	O
low	O	O
level	O	O
Spliterator	B-api_mention	B-api_mention
s	O	O
.	O	O
That	O	O
	O	O
s	O	O
it	O	O
.	O	O
You	O	O
may	O	O
discuss	O	O
about	O	O
whether	O	O
a	O	O
different	O	O
design	O	O
would	O	O
be	O	O
better	O	O
,	O	O
but	O	O
that	O	O
	O	O
s	O	O
not	O	O
productive	O	O
,	O	O
it	O	O
won	O	O
	O	O
t	O	O
change	O	O
,	O	O
given	O	O
the	O	O
way	O	O
they	O	O
are	O	O
designed	O	O
now	O	O
.	O	O
There	O	O
is	O	O
another	O	O
implementation	O	O
aspect	O	O
you	O	O
have	O	O
to	O	O
consider	O	O
.	O	O
Stream	B-api_mention	B-api_mention
s	O	O
are	O	O
not	O	O
immutable	O	O
data	O	O
structures	O	O
.	O	O
Each	O	O
intermediate	O	O
operation	O	O
may	O	O
return	O	O
a	O	O
new	O	O
Stream	B-api_mention	B-api_mention
instance	O	O
encapsulating	O	O
the	O	O
old	O	O
one	O	O
but	O	O
it	O	O
may	O	O
also	O	O
manipulate	O	O
its	O	O
own	O	O
instance	O	O
instead	O	O
and	O	O
return	O	O
itself	O	O
(	O	O
that	O	O
doesn	O	O
	O	O
t	O	O
preclude	O	O
doing	O	O
even	O	O
both	O	O
for	O	O
the	O	O
same	O	O
operation	O	O
)	O	O
.	O	O
Commonly	O	O
known	O	O
examples	O	O
are	O	O
operations	O	O
like	O	O
parallel	O	O
or	O	O
unordered	O	O
which	O	O
do	O	O
not	O	O
add	O	O
another	O	O
step	O	O
but	O	O
manipulate	O	O
the	O	O
entire	O	O
pipeline	O	O
)	O	O
.	O	O
Having	O	O
such	O	O
a	O	O
mutable	O	O
data	O	O
structure	O	O
and	O	O
attempts	O	O
to	O	O
reuse	O	O
(	O	O
or	O	O
even	O	O
worse	O	O
,	O	O
using	O	O
it	O	O
multiple	O	O
times	O	O
at	O	O
the	O	O
same	O	O
time	O	O
)	O	O
doesn	O	O
	O	O
t	O	O
play	O	O
well	O	O
	O	O
For	O	O
completeness	O	O
,	O	O
here	O	O
is	O	O
your	O	O
quicksort	O	O
example	O	O
translated	O	O
to	O	O
the	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
API	O	O
.	O	O
It	O	O
shows	O	O
that	O	O
it	O	O
does	O	O
not	O	O
really	O	O
	O	O
take	O	O
away	O	O
much	O	O
power	O	O
	O	O
.	O	O
#	O	O
pre	O	O
It	O	O
can	O	O
be	O	O
used	O	O
like	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
write	O	O
it	O	O
even	O	O
more	O	O
compact	O	O
as	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
25441088	O	O
,	O	O
answer	O	O
-	O	O
25441208	O	O
I	O	O
think	O	O
you	O	O
'	O	O
re	O	O
just	O	O
looking	O	O
for	O	O
the	O	O
overload	O	O
which	O	O
takes	O	O
another	O	O
Collector	B-api_mention	B-api_mention
to	O	O
specify	O	O
what	O	O
to	O	O
do	O	O
with	O	O
each	O	O
group	O	O
.	O	O
.	O	O
.	O	O
and	O	O
then	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
counting	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
do	O	O
the	O	O
counting	O	O
:	O	O
#	O	O
pre	O	O
Result	O	O
:	O	O
{	O	O
Hello	O	O
=	O	O
2	O	O
,	O	O
World	O	O
=	O	O
1	O	O
}	O	O
(	O	O
There	O	O
'	O	O
s	O	O
also	O	O
the	O	O
possibility	O	O
of	O	O
using	O	O
groupingByConcurrent	B-api_mention	B-api_mention
for	O	O
more	O	O
efficiency	O	O
.	O	O
Something	O	O
to	O	O
bear	O	O
in	O	O
mind	O	O
for	O	O
your	O	O
real	O	O
code	O	O
,	O	O
if	O	O
it	O	O
would	O	O
be	O	O
safe	O	O
in	O	O
your	O	O
context	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
20129762	O	O
In	O	O
Java	O	O
8	O	O
we	O	O
have	O	O
the	O	O
class	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
curiously	O	O
have	O	O
a	O	O
method	O	O
Iterator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
iterator	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
So	O	O
you	O	O
would	O	O
expect	O	O
it	O	O
to	O	O
implement	O	O
interface	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
requires	O	O
exactly	O	O
this	O	O
method	O	O
,	O	O
but	O	O
that	O	O
'	O	O
s	O	O
not	O	O
the	O	O
case	O	O
.	O	O
When	O	O
I	O	O
want	O	O
to	O	O
iterate	O	O
over	O	O
a	O	O
Stream	B-api_mention	B-api_mention
using	O	O
a	O	O
foreach	O	O
loop	O	O
,	O	O
I	O	O
have	O	O
to	O	O
do	O	O
something	O	O
like	O	O
#	O	O
pre	O	O
Am	O	O
I	O	O
missing	O	O
something	O	O
here	O	O
?	O	O
Question	O	O
-	O	O
11408427	O	O
,	O	O
answer	O	O
-	O	O
11408477	O	O
The	O	O
+	O	O
operator	O	O
is	O	O
usually	O	O
replaced	O	O
by	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
at	O	O
compile	O	O
time	O	O
.	O	O
Check	O	O
this	O	O
answer	O	O
for	O	O
more	O	O
details	O	O
on	O	O
that	O	O
matter	O	O
.	O	O
Question	O	O
-	O	O
27845223	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
at	O	O
a	O	O
piece	O	O
of	O	O
Java	O	O
code	O	O
right	O	O
now	O	O
,	O	O
and	O	O
it	O	O
takes	O	O
a	O	O
path	O	O
as	O	O
a	O	O
String	B-api_mention	B-api_mention
and	O	O
gets	O	O
its	O	O
URL	O	O
using	O	O
URL	B-api_mention	B-api_mention
resource	O	O
=	O	O
ClassLoader	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getSystemClassLoader	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
,	O	O
then	O	O
calls	O	O
String	B-api_mention	B-api_mention
path	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
getPath	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
finally	O	O
executes	O	O
new	O	O
File	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
Oh	O	O
,	O	O
and	O	O
there	O	O
are	O	O
also	O	O
calls	O	O
to	O	O
URL	B-api_mention	O
url	O	O
=	O	O
resource	O	O
.	B-api_mention	O
toURI	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
;	O	O
and	O	O
String	B-api_mention	B-api_mention
file	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
getFile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
'	O	O
m	O	O
totally	O	O
confused	O	O
right	O	O
now	O	O
-	O	O
mostly	O	O
because	O	O
of	O	O
the	O	O
terminology	O	O
,	O	O
I	O	O
guess	O	O
.	O	O
Can	O	O
someone	O	O
please	O	O
walk	O	O
me	O	O
through	O	O
the	O	O
differences	O	O
,	O	O
or	O	O
provide	O	O
a	O	O
few	O	O
links	O	O
to	O	O
Dummy	O	O
-	O	O
proof	O	O
material	O	O
?	O	O
Especially	O	O
URI	B-api_mention	O
to	O	O
URL	B-api_mention	O
and	O	O
Resource	B-api_mention	B-api_mention
to	O	O
File	B-api_mention	B-api_mention
?	O	O
To	O	O
me	O	O
,	O	O
it	O	O
feels	O	O
like	O	O
they	O	O
should	O	O
be	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
respectively	O	O
.	O	O
.	O	O
.	O	O
The	O	O
difference	O	O
between	O	O
getFile	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getPath	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
explained	O	O
here	O	O
:	O	O
What	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
url	O	B-api_mention
.	B-api_mention	I-api_mention
getFile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getpath	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
(	O	O
Interestingly	O	O
they	O	O
both	O	O
seem	O	O
to	O	O
return	O	O
Strings	O	O
,	O	O
which	O	O
probably	O	O
adds	O	O
a	O	O
whole	O	O
lot	O	O
to	O	O
my	O	O
state	O	O
of	O	O
mind	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Now	O	O
,	O	O
if	O	O
I	O	O
have	O	O
a	O	O
locator	O	O
that	O	O
references	O	O
a	O	O
class	O	O
or	O	O
package	O	O
in	O	O
a	O	O
jar	O	O
file	O	O
,	O	O
will	O	O
those	O	O
two	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
path	O	O
an	O	O
file	O	O
strings	O	O
)	O	O
differ	O	O
?	O	O
resource	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
give	O	O
you	O	O
jar	O	O
:	O	O
file	O	O
:	O	O
/	O	O
C	O	O
:	O	O
/	O	O
path	O	O
/	O	O
to	O	O
/	O	O
my	O	O
.	O	O
jar	O	O
!	O	O
/	O	O
com	O	O
/	O	O
example	O	O
/	O	O
,	O	O
after	O	O
all	O	O
(	O	O
note	O	O
the	O	O
exclamation	O	O
mark	O	O
)	O	O
.	O	O
Is	O	O
the	O	O
difference	O	O
between	O	O
URI	B-api_mention	O
and	O	O
URL	B-api_mention	O
in	O	O
Java	O	O
that	O	O
the	O	O
former	O	O
doesn	O	O
'	O	O
t	O	O
encode	O	O
spaces	O	O
?	O	O
Cf	O	O
.	O	O
Files	O	O
,	O	O
URIs	O	O
,	O	O
and	O	O
URLs	O	O
conflicting	O	O
in	O	O
Java	O	O
(	O	O
This	O	O
answer	O	O
explains	O	O
the	O	O
general	O	O
,	O	O
conceptual	O	O
difference	O	O
between	O	O
the	O	O
two	O	O
terms	O	O
fairly	O	O
well	O	O
:	O	O
URIs	O	O
identify	O	O
and	O	O
URLs	O	O
locate	O	O
;	O	O
)	O	O
Lastly	O	O
-	O	O
and	O	O
most	O	O
importantly	O	O
-	O	O
why	O	O
do	O	O
I	O	O
need	O	O
File	B-api_mention	B-api_mention
object	O	O
;	O	O
why	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
Resource	B-api_mention	B-api_mention
(	O	I-api_mention
URL	B-api_mention	I-api_mention
)	O	I-api_mention
enough	O	O
?	O	O
(	O	O
And	O	O
is	O	O
there	O	O
a	O	O
Resource	B-api_mention	B-api_mention
object	O	O
?	O	O
)	O	O
Sorry	O	O
if	O	O
this	O	O
question	O	O
is	O	O
a	O	O
bit	O	O
unorganized	O	O
;	O	O
it	O	O
just	O	O
reflects	O	O
the	O	O
confusion	O	O
I	O	O
have	O	O
.	O	O
.	O	O
.	O	O
:	O	O
)	O	O
Question	O	O
-	O	O
32046078	O	O
I	O	O
have	O	O
a	O	O
server	O	O
side	O	O
implemented	O	O
in	O	O
Scala	O	O
and	O	O
React	O	O
/	O	O
Flux	O	O
based	O	O
front	O	O
end	O	O
.	O	O
My	O	O
services	O	O
return	O	O
Futures	O	O
and	O	O
they	O	O
are	O	O
handled	O	O
within	O	O
Scalatra	O	O
'	O	O
s	O	O
AsyncResult	O	O
for	O	O
JSON	O	O
responses	O	O
.	O	O
For	O	O
isomorphic	O	O
/	O	O
server	O	O
side	O	O
rendering	O	O
setup	O	O
I	O	O
did	O	O
not	O	O
want	O	O
to	O	O
change	O	O
services	O	O
to	O	O
be	O	O
blocking	O	O
so	O	O
I	O	O
started	O	O
with	O	O
Scala	O	O
Future	O	O
-	O	O
>	O	O
java	B-api_mention	O
.	I-api_mention	O
util	I-api_mention	O
.	I-api_mention	O
function	I-api_mention	O
.	I-api_mention	O
Function	I-api_mention	O
conversion	O	O
shown	O	O
here	O	O
.	O	O
But	O	O
the	O	O
dispatcher	O	O
in	O	O
Flux	O	O
would	O	O
like	O	O
to	O	O
have	O	O
JS	O	O
Promise	O	O
.	O	O
So	O	O
far	O	O
I	O	O
found	O	O
only	O	O
rather	O	O
complicated	O	O
sounding	O	O
way	O	O
around	O	O
this	O	O
Slides	O	O
68	O	O
-	O	O
81	O	O
Is	O	O
there	O	O
any	O	O
recommended	O	O
way	O	O
to	O	O
deal	O	O
with	O	O
this	O	O
Scala	O	O
Future	O	O
-	O	O
>	O	O
JS	O	O
Promise	O	O
conversion	O	O
?	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
15432106	O	O
This	O	O
is	O	O
to	O	O
avoid	O	O
possible	O	O
efforts	O	O
for	O	O
reallocation	O	O
for	O	O
every	O	O
single	O	O
object	O	O
.	O	O
int	O	O
newCapacity	O	O
=	O	O
(	O	O
oldCapacity	O	O
*	O	O
3	O	O
)	O	O
/	O	O
2	O	O
+	O	O
1	O	O
;	O	O
internally	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
is	O	O
created	O	O
.	O	O
JVM	O	O
needs	O	O
effort	O	O
to	O	O
create	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
when	O	O
you	O	O
add	O	O
element	O	O
in	O	O
the	O	O
arraylist	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
above	O	O
code	O	O
(	O	O
any	O	O
algo	O	O
you	O	O
think	O	O
)	O	O
for	O	O
reallocation	O	O
then	O	O
every	O	O
time	O	O
when	O	O
you	O	O
invoke	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
then	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
has	O	O
to	O	O
be	O	O
created	O	O
which	O	O
is	O	O
pointless	O	O
and	O	O
we	O	O
are	O	O
loosing	O	O
time	O	O
for	O	O
increasing	O	O
size	O	O
by	O	O
1	O	O
for	O	O
each	O	O
and	O	O
every	O	O
objects	O	O
to	O	O
be	O	O
added	O	O
.	O	O
So	O	O
it	O	O
is	O	O
better	O	O
to	O	O
increase	O	O
size	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
with	O	O
following	O	O
formula	O	O
.	O	O
(	O	O
JSL	O	O
has	O	O
used	O	O
forcasting	O	O
formula	O	O
given	O	O
below	O	O
for	O	O
dynamically	O	O
growing	O	O
arraylist	O	O
instead	O	O
of	O	O
growing	O	O
by	O	O
1	O	O
every	O	O
time	O	O
.	O	O
Because	O	O
to	O	O
grow	O	O
it	O	O
takes	O	O
effort	O	O
by	O	O
JVM	O	O
)	O	O
int	O	O
newCapacity	O	O
=	O	O
(	O	O
oldCapacity	O	O
*	O	O
3	O	O
)	O	O
/	O	O
2	O	O
+	O	O
1	O	O
;	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28588854	O	O
The	O	O
correct	O	O
answer	O	O
is	O	O
a	O	O
simple	O	O
"	O	O
because	O	O
the	O	O
standard	O	O
(	O	O
and	O	O
the	O	O
docs	O	O
)	O	O
say	O	O
so	O	O
"	O	O
.	O	O
But	O	O
I	O	O
'	O	O
m	O	O
not	O	O
gonna	O	O
be	O	O
cynical	O	O
because	O	O
it	O	O
'	O	O
s	O	O
obvious	O	O
that	O	O
'	O	O
s	O	O
not	O	O
what	O	O
you	O	O
are	O	O
after	O	O
.	O	O
In	O	O
addition	O	O
to	O	O
the	O	O
other	O	O
answers	O	O
here	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
try	O	O
to	O	O
relate	O	O
the	O	O
infinities	O	O
to	O	O
saturating	O	O
arithmetic	O	O
.	O	O
Other	O	O
answers	O	O
have	O	O
already	O	O
stated	O	O
that	O	O
the	O	O
reason	O	O
the	O	O
comparisons	O	O
on	O	O
NaNs	O	O
result	O	O
in	O	O
true	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
not	O	O
gonna	O	O
beat	O	O
a	O	O
dead	O	O
horse	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
say	O	O
I	O	O
have	O	O
a	O	O
saturating	O	O
integer	O	O
that	O	O
represents	O	O
grayscale	O	O
colors	O	O
.	O	O
Why	O	O
am	O	O
I	O	O
using	O	O
saturating	O	O
arithmetic	O	O
?	O	O
Because	O	O
anything	O	O
brighter	O	O
than	O	O
white	O	O
is	O	O
still	O	O
white	O	O
,	O	O
and	O	O
anything	O	O
darker	O	O
than	O	O
black	O	O
is	O	O
still	O	O
black	O	O
(	O	O
except	O	O
orange	O	O
)	O	O
.	O	O
That	O	O
means	O	O
BLACK	O	O
-	O	O
x	O	O
=	O	O
=	O	O
BLACK	O	O
and	O	O
WHITE	O	O
+	O	O
x	O	O
=	O	O
=	O	O
WHITE	O	O
.	O	O
Makes	O	O
sense	O	O
?	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
say	O	O
we	O	O
want	O	O
to	O	O
represent	O	O
those	O	O
grayscale	O	O
colors	O	O
with	O	O
a	O	O
(	O	O
signed	O	O
)	O	O
1s	O	O
complement	O	O
8	O	O
-	O	O
bit	O	O
integer	O	O
where	O	O
BLACK	O	O
=	O	O
=	O	O
-	O	O
127	O	O
and	O	O
WHITE	O	O
=	O	O
=	O	O
127	O	O
.	O	O
Why	O	O
1s	O	O
complement	O	O
?	O	O
Because	O	O
it	O	O
gives	O	O
us	O	O
a	O	O
signed	O	O
zero	O	O
like	O	O
IEEE	O	O
754	O	O
floating	O	O
point	O	O
.	O	O
And	O	O
,	O	O
because	O	O
we	O	O
are	O	O
using	O	O
saturating	O	O
arithmetic	O	O
,	O	O
-	O	O
127	O	O
-	O	O
x	O	O
=	O	O
=	O	O
-	O	O
127	O	O
and	O	O
127	O	O
+	O	O
x	O	O
=	O	O
=	O	O
127	O	O
.	O	O
How	O	O
does	O	O
this	O	O
relate	O	O
to	O	O
floating	O	O
point	O	O
infinities	O	O
?	O	O
Replace	O	O
the	O	O
integer	O	O
with	O	O
floating	O	O
point	O	O
,	O	O
BLACK	O	O
with	O	O
NEGATIVE	O	O
_	O	O
INFINITY	O	O
,	O	O
and	O	O
WHITE	O	O
with	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
and	O	O
what	O	O
do	O	O
you	O	O
get	O	O
?	O	O
NEGATIVE	O	O
_	O	O
INFINITY	O	O
-	O	O
x	O	O
=	O	O
=	O	O
NEGATIVE	O	O
_	O	O
INFINITY	O	O
and	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
+	O	O
x	O	O
=	O	O
=	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
.	O	O
Since	O	O
you	O	O
used	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
use	O	O
it	O	O
also	O	O
.	O	O
First	O	O
we	O	O
need	O	O
a	O	O
class	O	O
to	O	O
represent	O	O
our	O	O
saturating	O	O
integer	O	O
-	O	O
based	O	O
color	O	O
;	O	O
let	O	O
'	O	O
s	O	O
call	O	O
it	O	O
SaturatedColor	O	O
and	O	O
assume	O	O
it	O	O
works	O	O
like	O	O
any	O	O
other	O	O
integer	O	O
in	O	O
Java	O	O
.	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
take	O	O
your	O	O
code	O	O
and	O	O
replace	O	O
double	O	O
with	O	O
our	O	O
own	O	O
SaturatedColor	O	B-api_mention
and	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
with	O	O
SaturatedColor	O	O
.	O	O
WHITE	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
we	O	O
established	O	O
above	O	O
,	O	O
SaturatedColor	O	O
.	O	O
WHITE	O	O
(	O	O
just	O	O
WHITE	O	O
above	O	O
)	O	O
is	O	O
127	O	O
,	O	O
so	O	O
let	O	O
'	O	O
s	O	O
do	O	O
that	O	O
here	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
we	O	O
take	O	O
the	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
statements	O	O
you	O	O
used	O	O
and	O	O
replace	O	O
a	O	O
and	O	O
b	O	O
with	O	O
their	O	O
value	O	O
(	O	O
values	O	O
?	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
should	O	O
be	O	O
obvious	O	O
what	O	O
this	O	O
will	O	O
print	O	O
.	O	O
Question	O	O
-	O	O
29262002	O	O
,	O	O
answer	O	O
-	O	O
29262511	O	O
The	O	O
first	O	O
case	O	O
is	O	O
ok	O	O
because	O	O
you	O	O
are	O	O
invoking	O	O
a	O	O
"	O	O
special	O	O
"	O	O
method	O	O
(	O	O
a	O	O
constructor	O	O
)	O	O
and	O	O
you	O	O
are	O	O
no	O	O
actually	O	O
taking	O	O
the	O	O
created	O	O
object	O	O
.	O	O
Just	O	O
to	O	O
make	O	O
it	O	O
more	O	O
clear	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
put	O	O
the	O	O
optional	O	O
braces	O	O
in	O	O
your	O	O
lambdas	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
more	O	O
clear	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
translate	O	O
that	O	O
to	O	O
the	O	O
older	O	O
notation	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
the	O	O
first	O	O
case	O	O
you	O	O
are	O	O
executing	O	O
a	O	O
constructor	O	O
,	O	O
but	O	O
you	O	O
are	O	O
NOT	O	O
returning	O	O
the	O	O
created	O	O
object	O	O
,	O	O
in	O	O
the	O	O
second	O	O
case	O	O
you	O	O
are	O	O
attempting	O	O
to	O	O
return	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
,	O	O
but	O	O
your	O	O
method	O	O
in	O	O
your	O	O
interface	O	O
BiConsumer	O	B-api_mention
returns	O	O
void	O	O
,	O	O
hence	O	O
the	O	O
compiler	O	O
error	O	O
.	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
22676782	O	O
Despite	O	O
@	O	O
Saint	O	O
Hill	O	O
'	O	O
s	O	O
answer	O	O
if	O	O
you	O	O
consider	O	O
the	O	O
time	O	O
complexity	O	O
of	O	O
str	O	B-api_mention
.	B-api_mention	I-api_mention
toCharArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
the	O	O
first	O	O
one	O	O
is	O	O
faster	O	O
even	O	O
for	O	O
very	O	O
large	O	O
strings	O	O
.	O	O
You	O	O
can	O	O
run	O	O
the	O	O
code	O	O
below	O	O
to	O	O
see	O	O
it	O	O
for	O	O
yourself	O	O
.	O	O
#	O	O
pre	O	O
output	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
33687544	O	O
For	O	O
HTML	O	O
response	O	O
below	O	O
code	O	O
can	O	O
be	O	O
used	O	O
bufString	O	O
.	O	B-api_mention
append	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
5374311	O	O
,	O	O
answer	O	O
-	O	O
17909134	O	O
I	O	O
can	O	O
see	O	O
many	O	O
answers	O	O
showing	O	O
how	O	O
to	O	O
solve	O	O
problem	O	O
,	O	O
but	O	O
only	O	O
Stephen	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
trying	O	O
to	O	O
explain	O	O
why	O	O
problem	O	O
occurs	O	O
so	O	O
I	O	O
will	O	O
try	O	O
to	O	O
add	O	O
something	O	O
more	O	O
on	O	O
this	O	O
subject	O	O
.	O	O
It	O	O
is	O	O
a	O	O
story	O	O
about	O	O
possible	O	O
reasons	O	O
why	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
toArray	B-api_mention	B-api_mention
wasn	O	O
'	O	O
t	O	O
changed	O	O
to	O	O
T	O	O
[	O	O
]	O	O
toArray	B-api_mention	B-api_mention
where	O	O
generics	O	O
ware	O	O
introduced	O	O
to	O	O
Java	O	O
.	O	O
Why	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
(	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
stock	O	O
_	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
wont	O	O
work	O	O
?	O	O
In	O	O
Java	O	O
,	O	O
generic	O	O
type	O	O
exists	O	O
at	O	O
compile	O	O
-	O	O
time	O	O
only	O	O
.	O	O
At	O	O
runtime	O	O
information	O	O
about	O	O
generic	O	O
type	O	O
(	O	O
like	O	O
in	O	O
your	O	O
case	O	O
<	O	O
String	B-api_mention	O
>	O	O
)	O	O
is	O	O
removed	O	O
and	O	O
replaced	O	O
with	O	O
Object	B-api_mention	B-api_mention
type	O	O
(	O	O
take	O	O
a	O	O
look	O	O
at	O	O
type	O	O
erasure	O	O
)	O	O
.	O	O
That	O	O
is	O	O
why	O	O
at	O	O
runtime	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
have	O	O
no	O	O
idea	O	O
about	O	O
what	O	O
precise	O	O
type	O	O
to	O	O
use	O	O
to	O	O
create	O	O
new	O	O
array	O	O
,	O	O
so	O	O
it	O	O
uses	O	O
Object	B-api_mention	B-api_mention
as	O	O
safest	O	O
type	O	O
,	O	O
because	O	O
each	O	O
class	O	O
extends	O	O
Object	B-api_mention	B-api_mention
so	O	O
it	O	O
can	O	O
safely	O	O
store	O	O
instance	O	O
of	O	O
any	O	O
class	O	O
.	O	O
Now	O	O
the	O	O
problem	O	O
is	O	O
that	O	O
you	O	O
can	O	O
'	O	O
t	O	O
cast	O	O
instance	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
to	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
Why	O	O
?	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
example	O	O
(	O	O
lets	O	O
assume	O	O
that	O	O
class	O	O
B	O	O
extends	O	O
A	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Although	O	O
such	O	O
code	O	O
will	O	O
compile	O	O
,	O	O
at	O	O
runtime	O	O
we	O	O
will	O	O
see	O	O
thrown	O	O
ClassCastException	B-api_mention	O
because	O	O
instance	O	O
held	O	O
by	O	O
reference	O	O
a	O	O
is	O	O
not	O	O
actually	O	O
of	O	O
type	O	O
B	O	O
(	O	O
or	O	O
its	O	O
subtypes	O	O
)	O	O
.	O	O
Why	O	O
is	O	O
this	O	O
problem	O	O
(	O	O
why	O	O
this	O	O
exception	O	O
needs	O	O
to	O	O
be	O	O
cast	O	O
)	O	O
?	O	O
One	O	O
of	O	O
the	O	O
reasons	O	O
is	O	O
that	O	O
B	O	O
could	O	O
have	O	O
new	O	O
methods	O	O
/	O	O
fields	O	O
which	O	O
A	O	O
doesn	O	O
'	O	O
t	O	O
,	O	O
so	O	O
it	O	O
is	O	O
possible	O	O
that	O	O
someone	O	O
will	O	O
try	O	O
to	O	O
use	O	O
these	O	O
new	O	O
members	O	O
via	O	O
b	O	O
reference	O	O
even	O	O
if	O	O
held	O	O
instance	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
(	O	O
doesn	O	O
'	O	O
t	O	O
support	O	O
)	O	O
them	O	O
.	O	O
In	O	O
other	O	O
words	O	O
we	O	O
could	O	O
end	O	O
up	O	O
trying	O	O
to	O	O
use	O	O
data	O	O
which	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
,	O	O
which	O	O
could	O	O
lead	O	O
to	O	O
many	O	O
problems	O	O
.	O	O
So	O	O
to	O	O
prevent	O	O
such	O	O
situation	O	O
JVM	O	O
throws	O	O
exception	O	O
,	O	O
and	O	O
stop	O	O
further	O	O
potentially	O	O
dangerous	O	O
code	O	O
.	O	O
You	O	O
could	O	O
ask	O	O
now	O	O
"	O	O
So	O	O
why	O	O
aren	O	O
'	O	O
t	O	O
we	O	O
stopped	O	O
even	O	O
earlier	O	O
?	O	O
Why	O	O
code	O	O
involving	O	O
such	O	O
casting	O	O
is	O	O
even	O	O
compilable	O	O
?	O	O
Shouldn	O	O
'	O	O
t	O	O
compiler	O	O
stop	O	O
it	O	O
?	O	O
"	O	O
.	O	O
Answer	O	O
is	O	O
:	O	O
no	O	O
because	O	O
compiler	O	O
can	O	O
'	O	O
t	O	O
know	O	O
for	O	O
sure	O	O
what	O	O
is	O	O
the	O	O
actual	O	O
type	O	O
of	O	O
instance	O	O
held	O	O
by	O	O
a	O	O
reference	O	O
,	O	O
and	O	O
there	O	O
is	O	O
a	O	O
chance	O	O
that	O	O
it	O	O
will	O	O
hold	O	O
instance	O	O
of	O	O
class	O	O
B	O	O
which	O	O
will	O	O
support	O	O
interface	O	O
of	O	O
b	O	O
reference	O	O
.	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
lets	O	O
go	O	O
back	O	O
to	O	O
your	O	O
arrays	O	O
.	O	O
As	O	O
you	O	O
see	O	O
in	O	O
question	O	O
,	O	O
we	O	O
can	O	O
'	O	O
t	O	O
cast	O	O
instance	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
array	O	O
to	O	O
more	O	O
precise	O	O
type	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
like	O	O
#	O	O
pre	O	O
Here	O	O
problem	O	O
is	O	O
a	O	O
little	O	O
different	O	O
.	O	O
Now	O	O
we	O	O
are	O	O
sure	O	O
that	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
array	O	O
will	O	O
not	O	O
have	O	O
additional	O	O
fields	O	O
or	O	O
methods	O	O
because	O	O
every	O	O
array	O	O
support	O	O
only	O	O
:	O	O
#	O	O
li	O	O
[	O	O
]	O	O
operator	O	O
,	O	O
#	O	O
li	O	O
length	O	O
filed	O	O
,	O	O
#	O	O
li	O	O
methods	O	O
inherited	O	O
from	O	O
Object	B-api_mention	O
supertype	O	O
,	O	O
So	O	O
it	O	O
is	O	O
not	O	O
arrays	O	O
interface	O	O
which	O	O
is	O	O
making	O	O
it	O	O
impossible	O	O
.	O	O
Problem	O	O
is	O	O
that	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
array	O	O
beside	O	O
Strings	O	O
can	O	O
store	O	O
any	O	O
objects	O	O
(	O	O
for	O	O
instance	O	O
Integers	O	O
)	O	O
so	O	O
it	O	O
is	O	O
possible	O	O
that	O	O
one	O	O
beautiful	O	O
day	O	O
we	O	O
will	O	O
end	O	O
up	O	O
with	O	O
trying	O	O
to	O	O
invoke	O	O
method	O	O
like	O	O
strArray	O	O
[	O	O
i	O	O
]	O	O
.	B-api_mention	B-api_mention
substring	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
instance	O	O
of	O	O
Integer	O	B-api_mention
which	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
such	O	O
method	O	O
.	O	O
So	O	O
to	O	O
make	O	O
sure	O	O
that	O	O
this	O	O
situation	O	O
will	O	O
never	O	O
happen	O	O
,	O	O
in	O	O
Java	O	O
array	O	O
references	O	O
can	O	O
hold	O	O
only	O	O
#	O	O
li	O	O
instances	O	O
of	O	O
array	O	O
of	O	O
same	O	O
type	O	O
as	O	O
reference	O	O
(	O	O
reference	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
strArr	O	B-api_mention
can	O	O
hold	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
#	O	O
li	O	O
instances	O	O
of	O	O
array	O	O
of	O	O
subtype	O	O
(	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
can	O	O
hold	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
because	O	O
String	B-api_mention	B-api_mention
is	O	O
subtype	O	O
of	O	O
Object	B-api_mention	B-api_mention
)	O	O
,	O	O
but	O	O
can	O	O
'	O	O
t	O	O
hold	O	O
#	O	O
li	O	O
array	O	O
of	O	O
supertype	O	O
of	O	O
type	O	O
of	O	O
array	O	O
from	O	O
reference	O	O
(	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
can	O	O
'	O	O
t	O	O
hold	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
#	O	O
li	O	O
array	O	O
of	O	O
type	O	O
which	O	O
is	O	O
not	O	O
related	O	O
to	O	O
type	O	O
from	O	O
reference	O	O
(	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
can	O	O
'	O	O
t	O	O
hold	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
In	O	O
other	O	O
words	O	O
something	O	O
like	O	O
this	O	O
is	O	O
OK	O	O
#	O	O
pre	O	O
You	O	O
could	O	O
say	O	O
that	O	O
one	O	O
way	O	O
to	O	O
resolve	O	O
this	O	O
problem	O	O
is	O	O
to	O	O
find	O	O
at	O	O
runtime	O	O
most	O	O
common	O	O
type	O	O
between	O	O
all	O	O
list	O	O
elements	O	O
and	O	O
create	O	O
array	O	O
of	O	O
that	O	O
type	O	O
,	O	O
but	O	O
this	O	O
wont	O	O
work	O	O
in	O	O
situations	O	O
where	O	O
all	O	O
elements	O	O
of	O	O
list	O	O
will	O	O
be	O	O
of	O	O
one	O	O
type	O	O
derived	O	O
from	O	O
generic	O	O
one	O	O
.	O	O
Take	O	O
a	O	O
look	O	O
#	O	O
pre	O	O
now	O	O
most	O	O
common	O	O
type	O	O
is	O	O
B	O	O
,	O	O
not	O	O
A	O	O
so	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
A	O	O
[	O	O
]	O	O
arr	O	O
=	O	O
elements	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
would	O	O
return	O	O
array	O	O
of	O	O
B	O	O
class	O	O
new	O	O
B	O	O
[	O	O
]	O	O
.	O	O
Problem	O	O
with	O	O
this	O	O
array	O	O
is	O	O
that	O	O
while	O	O
compiler	O	O
would	O	O
allow	O	O
you	O	O
to	O	O
edit	O	O
its	O	O
content	O	O
by	O	O
adding	O	O
new	O	O
A	O	O
(	O	O
args	O	O
)	O	O
element	O	O
to	O	O
it	O	O
,	O	O
you	O	O
would	O	O
get	O	O
ArrayStoreException	B-api_mention	B-api_mention
because	O	O
B	O	O
[	O	O
]	O	O
array	O	O
can	O	O
hold	O	O
only	O	O
elements	O	O
of	O	O
class	O	O
B	O	O
or	O	O
its	O	O
subclass	O	O
,	O	O
to	O	O
make	O	O
sure	O	O
that	O	O
all	O	O
elements	O	O
will	O	O
support	O	O
interface	O	O
of	O	O
B	O	O
,	O	O
but	O	O
instance	O	O
of	O	O
A	O	O
may	O	O
not	O	O
have	O	O
all	O	O
methods	O	O
/	O	O
fields	O	O
of	O	O
B	O	O
.	O	O
So	O	O
this	O	O
solution	O	O
is	O	O
not	O	O
perfect	O	O
.	O	O
Best	O	O
solution	O	O
to	O	O
this	O	O
problem	O	O
is	O	O
explicitly	O	O
tell	O	O
what	O	O
type	O	O
of	O	O
array	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
be	O	O
returned	O	O
by	O	O
passing	O	O
this	O	O
type	O	O
as	O	O
method	O	O
argument	O	O
like	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
arr	O	O
=	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
arr	O	O
=	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
if	O	O
size	O	O
of	O	O
array	O	O
is	O	O
smaller	O	O
then	O	O
list	O	O
it	O	O
will	O	O
be	O	O
automatically	O	O
adjusted	O	O
.	O	O
Question	O	O
-	O	O
11408427	O	O
,	O	O
answer	O	O
-	O	O
11408526	O	O
Let	O	O
'	O	O
s	O	O
look	O	O
at	O	O
the	O	O
following	O	O
simple	O	O
expressions	O	O
in	O	O
Java	O	O
#	O	O
pre	O	O
The	O	O
compiler	O	O
converts	O	O
StringLiteral	O	O
+	O	O
x	O	O
;	O	O
into	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
internally	O	O
and	O	O
uses	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
"	O	O
add	O	O
"	O	O
the	O	O
integer	O	O
to	O	O
the	O	O
string	O	O
.	O	O
5	O	O
.	O	O
1	O	O
.	O	O
11	O	O
.	O	O
String	O	B-api_mention
Conversion	O	O
#	O	O
blockquote	O	O
15	O	O
.	O	O
18	O	O
.	O	O
1	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
optimized	O	O
version	O	O
will	O	O
not	O	O
actually	O	O
do	O	O
a	O	O
full	O	O
wrapped	O	O
String	O	B-api_mention
conversion	O	O
first	O	O
.	O	O
This	O	O
is	O	O
a	O	O
good	O	O
illustration	O	O
of	O	O
an	O	O
optimized	O	O
version	O	O
used	O	O
by	O	O
the	O	O
compiler	O	O
,	O	O
albeit	O	O
without	O	O
the	O	O
conversion	O	O
of	O	O
a	O	O
primitive	O	O
,	O	O
where	O	O
you	O	O
can	O	O
see	O	O
the	O	O
compiler	O	O
changing	O	O
things	O	O
into	O	O
a	O	O
StringBuilder	O	B-api_mention
in	O	O
the	O	O
background	O	O
:	O	O
#	O	O
a	O	O
This	O	O
java	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Generates	O	O
this	O	O
-	O	O
see	O	O
how	O	O
the	O	O
two	O	O
concatenation	O	O
styles	O	O
lead	O	O
to	O	O
the	O	O
very	O	O
same	O	O
bytecode	O	O
:	O	O
#	O	O
pre	O	O
Looking	O	O
at	O	O
the	O	O
example	O	O
above	O	O
and	O	O
how	O	O
the	O	O
byte	O	O
code	O	O
based	O	O
on	O	O
the	O	O
source	O	O
code	O	O
in	O	O
the	O	O
given	O	O
example	O	O
is	O	O
generated	O	O
,	O	O
you	O	O
will	O	O
be	O	O
able	O	O
to	O	O
notice	O	O
that	O	O
the	O	O
compiler	O	O
has	O	O
internally	O	O
transformed	O	O
the	O	O
following	O	O
statement	O	O
cip	O	O
+	O	O
ciop	O	O
;	O	O
into	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
In	O	O
other	O	O
words	O	O
,	O	O
the	O	O
operator	O	O
+	O	O
in	O	O
string	O	O
concatenation	O	O
is	O	O
effectively	O	O
a	O	O
shorthand	O	O
for	O	O
the	O	O
more	O	O
verbose	O	O
StringBuilder	B-api_mention	B-api_mention
idiom	O	O
.	O	O
Question	O	O
-	O	O
24885223	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
I	O	O
am	O	O
asking	O	O
the	O	O
right	O	O
question	O	O
.	O	O
I	O	O
was	O	O
exploring	O	O
RecyclerView	B-api_mention	B-api_mention
and	O	O
I	O	O
was	O	O
surprised	O	O
to	O	O
see	O	O
that	O	O
RecyclerView	B-api_mention	B-api_mention
does	O	O
not	O	O
have	O	O
onItemClickListener	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Because	O	O
RecyclerView	B-api_mention	O
extends	O	O
#	O	O
blockquote	O	O
and	O	O
ListView	B-api_mention	B-api_mention
extends	O	O
#	O	O
blockquote	O	O
.	O	O
However	O	O
I	O	O
solved	O	O
my	O	O
problem	O	O
by	O	O
writing	O	O
onClick	B-api_mention	O
in	O	O
my	O	O
RecyclerView	B-api_mention	B-api_mention
.	I-api_mention	O
Adapter	I-api_mention	O
:	O	O
#	O	O
pre	O	O
But	O	O
still	O	O
I	O	O
want	O	O
to	O	O
know	O	O
why	O	O
Google	O	O
removed	O	O
onItemClickListener	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Is	O	O
there	O	O
a	O	O
performance	O	O
issue	O	O
or	O	O
something	O	O
else	O	O
?	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032208	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
go	O	O
through	O	O
the	O	O
underlying	O	O
Array	B-api_mention	B-api_mention
and	O	O
set	O	O
each	O	O
entry	O	O
to	O	O
null	O	O
;	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
go	O	O
through	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
checking	O	O
for	O	O
collection	O	O
and	O	O
remove	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
if	O	O
it	O	O
exists	O	O
.	O	O
I	O	O
would	O	O
imagine	O	O
that	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
way	O	O
faster	O	O
then	O	O
removeAll	B-api_mention	B-api_mention
because	O	O
it	O	O
'	O	O
s	O	O
not	O	O
comparing	O	O
,	O	O
etc	O	O
.	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29495113	O	O
#	O	O
blockquote	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
newType	O	O
=	O	O
=	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	B-api_mention
class	I-api_mention	I-api_mention
It	O	O
is	O	O
checking	O	O
whether	O	O
variable	O	O
newType	O	O
holds	O	O
a	O	O
reference	O	O
to	O	O
an	O	O
instance	O	O
of	O	O
java	O	O
.	O	O
lang	O	O
.	O	O
Class	O	O
representing	O	O
type	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
The	O	O
casts	O	O
are	O	O
unneeded	O	O
.	O	O
#	O	O
blockquote	O	O
As	O	O
far	O	O
as	O	O
I	O	O
can	O	O
tell	O	O
,	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
could	O	O
be	O	O
used	O	O
in	O	O
both	O	O
cases	O	O
,	O	O
but	O	O
non	O	O
-	O	O
reflective	O	O
ordinary	O	O
array	O	O
construction	O	O
is	O	O
likely	O	O
a	O	O
bit	O	O
faster	O	O
.	O	O
Thus	O	O
,	O	O
I	O	O
suppose	O	O
that	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
is	O	O
called	O	O
out	O	O
as	O	O
a	O	O
special	O	O
case	O	O
for	O	O
performance	O	O
reasons	O	O
,	O	O
but	O	O
I	O	O
have	O	O
no	O	O
idea	O	O
whether	O	O
that	O	O
case	O	O
is	O	O
exercised	O	O
frequently	O	O
enough	O	O
for	O	O
the	O	O
optimization	O	O
to	O	O
be	O	O
important	O	O
.	O	O
#	O	O
blockquote	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
nums	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
You	O	O
should	O	O
use	O	O
it	O	O
when	O	O
you	O	O
need	O	O
to	O	O
copy	O	O
an	O	O
array	O	O
to	O	O
an	O	O
array	O	O
with	O	O
a	O	O
possibly	O	O
different	O	O
(	O	O
but	O	O
compatible	O	O
)	O	O
element	O	O
type	O	O
,	O	O
especially	O	O
when	O	O
the	O	O
element	O	O
types	O	O
are	O	O
not	O	O
statically	O	O
known	O	O
.	O	O
If	O	O
you	O	O
know	O	O
you	O	O
want	O	O
the	O	O
copy	O	O
to	O	O
have	O	O
the	O	O
same	O	O
element	O	O
type	O	O
as	O	O
the	O	O
original	O	O
,	O	O
then	O	O
it	O	O
'	O	O
s	O	O
easier	O	O
to	O	O
use	O	O
the	O	O
original	O	O
array	O	O
'	O	O
s	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Question	O	O
-	O	O
22725537	O	O
,	O	O
answer	O	O
-	O	O
36334855	O	O
As	O	O
my	O	O
previous	O	O
answer	O	O
appeared	O	O
not	O	O
to	O	O
be	O	O
very	O	O
popular	O	O
,	O	O
I	O	O
will	O	O
give	O	O
this	O	O
another	O	O
go	O	O
.	O	O
A	O	O
short	O	O
answer	O	O
:	O	O
You	O	O
are	O	O
mostly	O	O
on	O	O
a	O	O
right	O	O
track	O	O
.	O	O
The	O	O
shortest	O	O
code	O	O
to	O	O
get	O	O
to	O	O
your	O	O
desired	O	O
output	O	O
I	O	O
could	O	O
come	O	O
up	O	O
with	O	O
is	O	O
this	O	O
:	O	O
things	O	B-api_mention
.	B-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
will	O	O
fit	O	O
all	O	O
your	O	O
requirements	O	O
:	O	O
#	O	O
li	O	O
It	O	O
will	O	O
find	O	O
first	O	O
response	O	O
that	O	O
resolves	O	O
to	O	O
a	O	O
nonempty	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
#	O	O
li	O	O
It	O	O
calls	O	O
this	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
resolve	I-api_mention	O
lazily	O	O
as	O	O
needed	O	O
#	O	O
li	O	O
this	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
resolve	I-api_mention	O
will	O	O
not	O	O
be	O	O
called	O	O
after	O	O
first	O	O
non	O	O
-	O	O
empty	O	O
result	O	O
#	O	O
li	O	O
It	O	O
will	O	O
return	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
Longer	O	O
answer	O	O
The	O	O
only	O	O
modification	O	O
compared	O	O
to	O	O
OP	O	O
initial	O	O
version	O	O
was	O	O
that	O	O
I	O	O
removed	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
before	O	O
call	O	O
to	O	O
.	B-api_mention	B-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
added	O	O
.	B-api_mention	O
flatMap	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
the	O	O
last	O	O
call	O	O
in	O	O
the	O	O
chain	O	O
.	O	O
This	O	O
has	O	O
a	O	O
nice	O	O
effect	O	O
of	O	O
getting	O	O
rid	O	O
of	O	O
the	O	O
double	O	O
-	O	O
Optional	O	B-api_mention
,	O	O
whenever	O	O
stream	O	O
finds	O	O
an	O	O
actual	O	O
result	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
really	O	O
go	O	O
any	O	O
shorter	O	O
than	O	O
this	O	O
in	O	O
Java	O	O
.	O	O
The	O	O
alternative	O	O
snippet	O	O
of	O	O
code	O	O
using	O	O
the	O	O
more	O	O
conventional	O	O
for	O	O
loop	O	O
technique	O	O
is	O	O
going	O	O
to	O	O
be	O	O
about	O	O
same	O	O
number	O	O
of	O	O
lines	O	O
of	O	O
code	O	O
and	O	O
have	O	O
more	O	O
or	O	O
less	O	O
same	O	O
order	O	O
and	O	O
number	O	O
of	O	O
operations	O	O
you	O	O
need	O	O
to	O	O
perform	O	O
:	O	O
#	O	O
li	O	O
Calling	O	O
this	O	O
.	B-api_mention	O
resolve	I-api_mention	O
,	O	O
#	O	O
li	O	O
filtering	O	O
based	O	O
on	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isPresent	I-api_mention	I-api_mention
#	O	O
li	O	O
returning	O	O
the	O	O
result	O	O
and	O	O
#	O	O
li	O	O
some	O	O
way	O	O
of	O	O
dealing	O	O
with	O	O
negative	O	O
result	O	O
(	O	O
when	O	O
nothing	O	O
was	O	O
found	O	O
)	O	O
Just	O	O
to	O	O
prove	O	O
that	O	O
my	O	O
solution	O	O
works	O	O
as	O	O
advertised	O	O
,	O	O
I	O	O
wrote	O	O
a	O	O
small	O	O
test	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
It	O	O
does	O	O
have	O	O
few	O	O
extra	O	O
lines	O	O
for	O	O
debugging	O	O
and	O	O
verifying	O	O
that	O	O
only	O	O
as	O	O
many	O	O
calls	O	O
to	O	O
resolve	O	O
as	O	O
needed	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Executing	O	O
this	O	O
on	O	O
a	O	O
command	O	O
line	O	O
,	O	O
I	O	O
got	O	O
the	O	O
following	O	O
results	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
15202997	O	O
,	O	O
answer	O	O
-	O	O
15203417	O	O
If	O	O
you	O	O
'	O	O
re	O	O
unsure	O	O
about	O	O
something	O	O
,	O	O
try	O	O
writing	O	O
a	O	O
test	O	O
first	O	O
.	O	O
I	O	O
did	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Prints	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
'	O	O
s	O	O
an	O	O
empty	O	O
line	O	O
in	O	O
the	O	O
last	O	O
block	O	O
where	O	O
getSimpleName	B-api_mention	O
returns	O	O
an	O	O
empty	O	O
string	O	O
.	O	O
The	O	O
upshot	O	O
looking	O	O
at	O	O
this	O	O
is	O	O
:	O	O
#	O	O
li	O	O
the	O	O
name	O	O
is	O	O
the	O	O
name	O	O
that	O	O
you	O	O
'	O	O
d	O	O
use	O	O
to	O	O
dynamically	O	O
load	O	O
the	O	O
class	O	O
with	O	O
,	O	O
for	O	O
example	O	O
,	O	O
a	O	O
call	O	O
to	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forName	I-api_mention	I-api_mention
with	O	O
the	O	O
default	O	O
ClassLoader	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
the	O	O
canonical	O	O
name	O	O
is	O	O
the	O	O
name	O	O
that	O	O
would	O	O
be	O	O
used	O	O
in	O	O
an	O	O
import	O	O
statement	O	O
and	O	O
uniquely	O	O
identifies	O	O
the	O	O
class	O	O
.	O	O
Might	O	O
be	O	O
useful	O	O
during	O	O
toString	B-api_mention	B-api_mention
or	O	O
logging	O	O
operations	O	O
.	O	O
#	O	O
li	O	O
the	O	O
simple	O	O
name	O	O
loosely	O	O
identifies	O	O
the	O	O
class	O	O
,	O	O
again	O	O
might	O	O
be	O	O
useful	O	O
during	O	O
toString	B-api_mention	B-api_mention
or	O	O
logging	O	O
operations	O	O
but	O	O
is	O	O
not	O	O
guaranteed	O	O
to	O	O
be	O	O
unique	O	O
.	O	O
Question	O	O
-	O	O
31270759	O	O
Exceptions	O	O
,	O	O
especially	O	O
checked	O	O
ones	O	O
,	O	O
can	O	O
severely	O	O
interrupt	O	O
the	O	O
flow	O	O
of	O	O
program	O	O
logic	O	O
when	O	O
the	O	O
FP	O	O
idiom	O	O
is	O	O
used	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
Here	O	O
is	O	O
an	O	O
arbitrary	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
above	O	O
code	O	O
breaks	O	O
when	O	O
there	O	O
'	O	O
s	O	O
an	O	O
exception	O	O
for	O	O
an	O	O
unparseable	O	O
string	O	O
.	O	O
But	O	O
say	O	O
I	O	O
just	O	O
want	O	O
to	O	O
replace	O	O
that	O	O
with	O	O
a	O	O
default	O	O
value	O	O
,	O	O
much	O	O
like	O	O
I	O	O
can	O	O
with	O	O
Optional	B-api_mention	B-api_mention
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Of	O	O
course	O	O
,	O	O
this	O	O
still	O	O
fails	O	O
because	O	O
Optional	B-api_mention	B-api_mention
only	O	O
handles	O	O
null	O	O
s	O	O
.	O	O
I	O	O
would	O	O
like	O	O
something	O	O
as	O	O
follows	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
:	O	O
this	O	O
is	O	O
a	O	O
self	O	O
-	O	O
answered	O	O
question	O	O
.	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
15446006	O	O
I	O	O
actually	O	O
wrote	O	O
a	O	O
blog	O	O
post	O	O
on	O	O
the	O	O
topic	O	O
2	O	O
months	O	O
ago	O	O
.	O	O
The	O	O
article	O	O
is	O	O
for	O	O
C	O	O
#	O	O
'	O	O
s	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
but	O	O
Java	O	O
'	O	O
s	O	O
ArrayList	B-api_mention	B-api_mention
has	O	O
a	O	O
very	O	O
similar	O	O
implementation	O	O
.	O	O
Since	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
implemented	O	O
using	O	O
a	O	O
dynamic	O	O
array	O	O
,	O	O
it	O	O
increases	O	O
in	O	O
size	O	O
on	O	O
demand	O	O
.	O	O
So	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
capacity	O	O
constructor	O	O
is	O	O
for	O	O
optimisation	O	O
purposes	O	O
.	O	O
When	O	O
one	O	O
of	O	O
these	O	O
resizings	O	O
operation	O	O
occurs	O	O
,	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
copies	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
array	O	O
into	O	O
a	O	O
new	O	O
array	O	O
that	O	O
is	O	O
twice	O	O
the	O	O
capacity	O	O
of	O	O
the	O	O
old	O	O
one	O	O
.	O	O
This	O	O
operation	O	O
runs	O	O
in	O	O
O	O	O
(	O	O
n	O	O
)	O	O
time	O	O
.	O	O
Example	O	O
Here	O	O
is	O	O
an	O	O
example	O	O
of	O	O
how	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
would	O	O
increase	O	O
in	O	O
size	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
the	O	O
list	O	O
starts	O	O
with	O	O
a	O	O
capacity	O	O
of	O	O
10	O	O
,	O	O
when	O	O
the	O	O
11th	O	O
item	O	O
is	O	O
added	O	O
it	O	O
is	O	O
increase	O	O
by	O	O
50	O	O
%	O	O
+	O	O
1	O	O
to	O	O
16	O	O
.	O	O
On	O	O
the	O	O
17th	O	O
item	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
increased	O	O
again	O	O
to	O	O
25	O	O
and	O	O
so	O	O
on	O	O
.	O	O
Now	O	O
consider	O	O
the	O	O
example	O	O
where	O	O
we	O	O
'	O	O
re	O	O
creating	O	O
a	O	O
list	O	O
where	O	O
the	O	O
desired	O	O
capacity	O	O
is	O	O
already	O	O
known	O	O
as	O	O
1000000	O	O
.	O	O
Creating	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
without	O	O
the	O	O
size	O	O
constructor	O	O
will	O	O
call	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	O
add	I-api_mention	O
1000000	O	O
times	O	O
which	O	O
takes	O	O
O	O	O
(	O	O
1	O	O
)	O	O
normally	O	O
or	O	O
O	O	O
(	O	O
n	O	O
)	O	O
on	O	O
resize	O	O
.	O	O
#	O	O
blockquote	O	O
Compare	O	O
this	O	O
using	O	O
the	O	O
constructor	O	O
and	O	O
then	O	O
calling	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
add	I-api_mention	I-api_mention
which	O	O
is	O	O
guaranteed	O	O
to	O	O
run	O	O
in	O	O
O	O	O
(	O	O
1	O	O
)	O	O
.	O	O
#	O	O
blockquote	O	O
Java	O	O
vs	O	O
C	O	O
#	O	O
Java	O	O
is	O	O
as	O	O
above	O	O
,	O	O
starting	O	O
at	O	O
10	O	O
and	O	O
increasing	O	O
each	O	O
resize	O	O
at	O	O
50	O	O
%	O	O
+	O	O
1	O	O
.	O	O
C	O	O
#	O	O
starts	O	O
at	O	O
4	O	O
and	O	O
increases	O	O
much	O	O
more	O	O
aggressively	O	O
,	O	O
doubling	O	O
at	O	O
each	O	O
resize	O	O
.	O	O
The	O	O
1000000	O	O
adds	O	O
example	O	O
from	O	O
above	O	O
for	O	O
C	O	O
#	O	O
uses	O	O
3097084	O	O
operations	O	O
.	O	O
References	O	O
#	O	O
li	O	O
My	O	O
blog	O	O
post	O	O
on	O	O
C	O	O
#	O	O
'	O	O
s	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
#	O	O
li	O	O
Java	O	O
'	O	O
s	O	O
ArrayList	B-api_mention	B-api_mention
source	O	O
code	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
8894356	O	O
Looks	O	O
like	O	O
niether	O	O
is	O	O
faster	O	O
or	O	O
slower	O	O
#	O	O
pre	O	O
For	O	O
long	O	O
strings	O	O
I	O	O
'	O	O
ll	O	O
chose	O	O
the	O	O
first	O	O
one	O	O
.	O	O
Why	O	O
copy	O	O
around	O	O
long	O	O
strings	O	O
?	O	O
Documentations	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
/	O	O
/	O	O
Edit	O	O
1	O	O
I	O	O
'	O	O
ve	O	O
changed	O	O
the	O	O
test	O	O
to	O	O
trick	O	O
JIT	O	O
optimisation	O	O
.	O	O
/	O	O
/	O	O
Edit	O	O
2	O	O
Repeat	O	O
test	O	O
10	O	O
times	O	O
to	O	O
let	O	O
JVM	O	O
warm	O	O
up	O	O
.	O	O
/	O	O
/	O	O
Edit	O	O
3	O	O
Conclusions	O	O
:	O	O
First	O	O
of	O	O
all	O	O
str	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toCharArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
copies	O	O
entire	O	O
string	O	O
in	O	O
memory	O	O
.	O	O
It	O	O
can	O	O
be	O	O
memory	O	O
consuming	O	O
for	O	O
long	O	O
strings	O	O
.	O	O
Method	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
charAt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
looks	O	O
up	O	O
char	O	O
in	O	O
char	O	O
array	O	O
inside	O	O
String	O	B-api_mention
class	O	O
checking	O	O
index	O	O
before	O	O
.	O	O
It	O	O
looks	O	O
like	O	O
for	O	O
short	O	O
enough	O	O
Strings	B-api_mention	O
first	O	O
method	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
chatAt	B-api_mention	O
method	O	O
)	O	O
is	O	O
a	O	O
bit	O	O
slower	O	O
due	O	O
to	O	O
this	O	O
index	O	O
check	O	O
.	O	O
But	O	O
if	O	O
the	O	O
String	O	B-api_mention
is	O	O
long	O	O
enough	O	O
,	O	O
copying	O	O
whole	O	O
char	O	O
array	O	O
gets	O	O
slower	O	O
,	O	O
and	O	O
the	O	O
first	O	O
method	O	O
is	O	O
faster	O	O
.	O	O
The	O	O
longer	O	O
the	O	O
string	O	O
is	O	O
,	O	O
the	O	O
slower	O	O
toCharArray	B-api_mention	O
performs	O	O
.	O	O
Try	O	O
to	O	O
change	O	O
limit	O	O
in	O	O
for	O	O
(	O	O
args	O	O
)	O	O
loop	O	O
to	O	O
see	O	O
it	O	O
.	O	O
If	O	O
we	O	O
let	O	O
JVM	O	O
warm	O	O
up	O	O
code	O	O
runs	O	O
faster	O	O
,	O	O
but	O	O
proportions	O	O
are	O	O
the	O	O
same	O	O
.	O	O
After	O	O
all	O	O
it	O	O
'	O	O
s	O	O
just	O	O
micro	O	O
-	O	O
optimisation	O	O
.	O	O
Question	O	O
-	O	O
5192512	O	O
,	O	O
answer	O	O
-	O	O
5192545	O	O
Edit	O	O
Updated	O	O
to	O	O
bring	O	O
in	O	O
feedback	O	O
.	O	O
So	O	O
two	O	O
ways	O	O
that	O	O
work	O	O
:	O	O
#	O	O
li	O	O
Use	O	O
StringBulderObj	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setLength	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
li	O	O
Allocate	O	O
a	O	O
new	O	O
one	O	O
instead	O	O
of	O	O
clearing	O	O
the	O	O
buffer	O	O
Question	O	O
-	O	O
30081520	O	O
,	O	O
answer	O	O
-	O	O
30081600	O	O
From	O	O
Objects	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
return	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
|	O	O
|	O	O
(	O	O
a	O	O
!	O	O
=	O	O
null	O	O
&	O	O
&	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
;	O	O
Very	O	O
simple	O	O
,	O	O
self	O	O
-	O	O
explaining	O	O
and	O	O
elegant	O	O
.	O	O
Question	O	O
-	O	O
31170459	O	O
I	O	O
was	O	O
testing	O	O
boundary	O	O
conditions	O	O
on	O	O
some	O	O
code	O	O
involving	O	O
a	O	O
BigDecimal	B-api_mention	B-api_mention
,	O	O
and	O	O
I	O	O
noticed	O	O
that	O	O
when	O	O
a	O	O
BigDecimal	B-api_mention	B-api_mention
is	O	O
initialized	O	O
with	O	O
the	O	O
String	B-api_mention	B-api_mention
StringLiteral	O	O
it	O	O
behaves	O	O
unexpectedly	O	O
.	O	O
It	O	O
seems	O	O
to	O	O
have	O	O
a	O	O
value	O	O
between	O	O
0	O	O
and	O	O
1e	O	O
-	O	O
2147483647	O	O
.	O	O
When	O	O
I	O	O
try	O	O
calling	O	O
intValue	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
I	O	O
get	O	O
a	O	O
NegativeArraySizeException	O	O
.	O	O
I	O	O
should	O	O
note	O	O
that	O	O
2147483647	O	O
is	O	O
the	O	O
max	O	O
value	O	O
of	O	O
an	O	O
integer	O	O
on	O	O
my	O	O
system	O	O
.	O	O
Am	O	O
I	O	O
doing	O	O
something	O	O
wrong	O	O
,	O	O
or	O	O
is	O	O
this	O	O
a	O	O
problem	O	O
with	O	O
BigDecimal	B-api_mention	B-api_mention
?	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32164385	O	O
,	O	O
answer	O	O
-	O	O
32164423	O	O
#	O	O
blockquote	O	O
The	O	O
only	O	O
way	O	O
is	O	O
to	O	O
read	O	O
the	O	O
code	O	O
unfortunately	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
common	O	O
convention	O	O
is	O	O
to	O	O
pass	O	O
an	O	O
object	O	O
which	O	O
cannot	O	O
be	O	O
modified	O	O
,	O	O
using	O	O
a	O	O
wrapper	O	O
if	O	O
needed	O	O
.	O	O
This	O	O
ensure	O	O
the	O	O
class	O	O
cannot	O	O
modify	O	O
the	O	O
object	O	O
.	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
readOnly	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
If	O	O
the	O	O
object	O	O
is	O	O
Cloneable	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
also	O	O
use	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
another	O	O
common	O	O
approach	O	O
is	O	O
to	O	O
use	O	O
a	O	O
copy	O	O
.	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
readOnly	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
If	O	O
you	O	O
care	O	O
about	O	O
such	O	O
behaviour	O	O
,	O	O
unit	O	O
tests	O	O
can	O	O
show	O	O
whether	O	O
a	O	O
method	O	O
modifies	O	O
an	O	O
object	O	O
or	O	O
not	O	O
.	O	O
If	O	O
you	O	O
have	O	O
unit	O	O
tests	O	O
already	O	O
,	O	O
it	O	O
is	O	O
usually	O	O
one	O	O
or	O	O
two	O	O
lines	O	O
extra	O	O
to	O	O
check	O	O
for	O	O
this	O	O
.	O	O
Question	O	O
-	O	O
25606833	O	O
,	O	O
answer	O	O
-	O	O
25757572	O	O
There	O	O
are	O	O
several	O	O
issues	O	O
here	O	O
.	O	O
#	O	O
li	O	O
Any	O	O
solution	O	O
based	O	O
on	O	O
reading	O	O
lines	O	O
is	O	O
going	O	O
to	O	O
process	O	O
each	O	O
character	O	O
twice	O	O
.	O	O
Compilers	O	O
for	O	O
example	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
,	O	O
they	O	O
read	O	O
one	O	O
character	O	O
at	O	O
a	O	O
time	O	O
and	O	O
despatch	O	O
on	O	O
it	O	O
directly	O	O
.	O	O
#	O	O
li	O	O
Any	O	O
solution	O	O
based	O	O
on	O	O
readLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
going	O	O
to	O	O
create	O	O
Strings	B-api_mention	O
.	O	O
#	O	O
li	O	O
You	O	O
are	O	O
using	O	O
different	O	O
buffer	O	O
sizes	O	O
.	O	O
#	O	O
li	O	O
You	O	O
are	O	O
using	O	O
different	O	O
I	O	O
/	O	O
O	O	O
technologies	O	O
.	O	O
#	O	O
li	O	O
In	O	O
some	O	O
cases	O	O
you	O	O
are	O	O
using	O	O
character	O	O
conversion	O	O
,	O	O
while	O	O
in	O	O
others	O	O
you	O	O
aren	O	O
'	O	O
t	O	O
.	O	O
#	O	O
li	O	O
You	O	O
'	O	O
re	O	O
over	O	O
-	O	O
analyzing	O	O
the	O	O
file	O	O
.	O	O
You	O	O
don	O	O
'	O	O
t	O	O
really	O	O
care	O	O
where	O	O
the	O	O
white	O	O
space	O	O
is	O	O
,	O	O
or	O	O
how	O	O
much	O	O
of	O	O
it	O	O
there	O	O
is	O	O
,	O	O
as	O	O
long	O	O
as	O	O
it	O	O
separates	O	O
the	O	O
numbers	O	O
from	O	O
each	O	O
other	O	O
.	O	O
My	O	O
solution	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29815636	O	O
,	O	O
answer	O	O
-	O	O
29815698	O	O
The	O	O
first	O	O
form	O	O
is	O	O
called	O	O
Javadoc	O	O
.	O	O
You	O	O
use	O	O
this	O	O
when	O	O
you	O	O
'	O	O
re	O	O
writing	O	O
formal	O	O
APIs	O	O
for	O	O
your	O	O
code	O	O
,	O	O
which	O	O
are	O	O
generated	O	O
by	O	O
the	O	O
javadoc	O	O
tool	O	O
.	O	O
For	O	O
an	O	O
example	O	O
,	O	O
the	O	O
Java	O	O
7	O	O
API	O	O
page	O	O
uses	O	O
Javadoc	O	O
and	O	O
was	O	O
generated	O	O
by	O	O
that	O	O
tool	O	O
.	O	O
Some	O	O
common	O	O
elements	O	O
you	O	O
'	O	O
d	O	O
see	O	O
in	O	O
Javadoc	O	O
include	O	O
:	O	O
#	O	O
li	O	O
@	O	O
param	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
what	O	O
parameters	O	O
are	O	O
being	O	O
passed	O	O
to	O	O
a	O	O
method	O	O
,	O	O
and	O	O
what	O	O
value	O	O
they	O	O
'	O	O
re	O	O
expected	O	O
to	O	O
have	O	O
#	O	O
li	O	O
@	O	O
return	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
what	O	O
result	O	O
the	O	O
method	O	O
is	O	O
going	O	O
to	O	O
give	O	O
back	O	O
#	O	O
li	O	O
@	O	O
throws	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
that	O	O
a	O	O
method	O	O
throws	O	O
an	O	O
exception	O	O
or	O	O
error	O	O
in	O	O
case	O	O
of	O	O
certain	O	O
input	O	O
#	O	O
li	O	O
@	O	O
since	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
the	O	O
earliest	O	O
Java	O	O
version	O	O
this	O	O
class	O	O
or	O	O
function	O	O
was	O	O
available	O	O
in	O	O
As	O	O
an	O	O
example	O	O
,	O	O
here	O	O
'	O	O
s	O	O
Javadoc	O	O
for	O	O
the	O	O
compare	O	O
method	O	O
of	O	O
Integer	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
The	O	O
second	O	O
form	O	O
is	O	O
a	O	O
block	O	O
(	O	O
multi	O	O
-	O	O
line	O	O
)	O	O
comment	O	O
.	O	O
You	O	O
use	O	O
this	O	O
if	O	O
you	O	O
want	O	O
to	O	O
have	O	O
multiple	O	O
lines	O	O
in	O	O
a	O	O
comment	O	O
.	O	O
I	O	O
will	O	O
say	O	O
that	O	O
you	O	O
'	O	O
d	O	O
only	O	O
want	O	O
to	O	O
use	O	O
the	O	O
latter	O	O
form	O	O
sparingly	O	O
;	O	O
that	O	O
is	O	O
,	O	O
you	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
overburden	O	O
your	O	O
code	O	O
with	O	O
block	O	O
comments	O	O
that	O	O
don	O	O
'	O	O
t	O	O
describe	O	O
what	O	O
behaviors	O	O
the	O	O
method	O	O
/	O	O
complex	O	O
function	O	O
is	O	O
supposed	O	O
to	O	O
have	O	O
.	O	O
Since	O	O
Javadoc	O	O
is	O	O
the	O	O
more	O	O
descriptive	O	O
of	O	O
the	O	O
two	O	O
,	O	O
and	O	O
you	O	O
can	O	O
generate	O	O
actual	O	O
documentation	O	O
as	O	O
a	O	O
result	O	O
of	O	O
using	O	O
it	O	O
,	O	O
using	O	O
Javadoc	O	O
would	O	O
be	O	O
more	O	O
preferable	O	O
to	O	O
simple	O	O
block	O	O
comments	O	O
.	O	O
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
13612866	O	O
It	O	O
is	O	O
crucial	O	O
to	O	O
know	O	O
that	O	O
attributes	O	O
are	O	O
not	O	O
parameters	O	O
.	O	O
The	O	O
return	O	O
type	O	O
for	O	O
attributes	O	O
is	O	O
an	O	O
Object	B-api_mention	B-api_mention
,	O	O
whereas	O	O
the	O	O
return	O	O
type	O	O
for	O	O
a	O	O
parameter	O	O
is	O	O
a	O	O
String	B-api_mention	B-api_mention
.	O	O
When	O	O
calling	O	O
the	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
bear	O	O
in	O	O
mind	O	O
that	O	O
the	O	O
attributes	O	O
must	O	O
be	O	O
cast	O	O
.	O	O
Additionally	O	O
,	O	O
there	O	O
is	O	O
no	O	O
servlet	O	O
specific	O	O
attributes	O	O
,	O	O
and	O	O
there	O	O
are	O	O
no	O	O
session	O	O
parameters	O	O
.	O	O
This	O	O
post	O	O
is	O	O
written	O	O
with	O	O
the	O	O
purpose	O	O
to	O	O
connect	O	O
on	O	O
@	O	O
Bozho	O	O
'	O	O
s	O	O
response	O	O
,	O	O
as	O	O
additional	O	O
information	O	O
that	O	O
can	O	O
be	O	O
useful	O	O
for	O	O
other	O	O
people	O	O
.	O	O
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
22593693	O	O
There	O	O
seem	O	O
to	O	O
be	O	O
many	O	O
questions	O	O
about	O	O
this	O	O
issue	O	O
with	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Scanner	I-api_mention	I-api_mention
.	O	O
I	O	O
think	O	O
a	O	O
more	O	O
readable	O	O
/	O	O
idiomatic	O	O
solution	O	O
would	O	O
be	O	O
to	O	O
call	O	O
scanner	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
skip	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
drop	O	O
any	O	O
newline	O	O
characters	O	O
after	O	O
calling	O	O
nextInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
4812570	O	O
,	O	O
answer	O	O
-	O	O
4812585	O	O
You	O	O
have	O	O
to	O	O
use	O	O
getStackTrace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
instead	O	O
of	O	O
printStackTrace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Here	O	O
is	O	O
a	O	O
good	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
10904911	O	O
,	O	O
answer	O	O
-	O	O
10904956	O	O
What	O	O
you	O	O
want	O	O
is	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
is	O	O
a	O	O
static	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
helper	O	O
method	O	O
for	O	O
every	O	O
different	O	O
primitive	O	O
java	O	O
type	O	O
;	O	O
the	O	O
one	O	O
for	O	O
int	O	O
[	O	O
]	O	O
says	O	O
this	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
23453287	O	O
One	O	O
of	O	O
the	O	O
most	O	O
useful	O	O
features	O	O
of	O	O
Java	O	O
8	O	O
are	O	O
the	O	O
new	O	O
default	O	O
methods	O	O
on	O	O
interfaces	O	O
.	O	O
There	O	O
are	O	O
essentially	O	O
two	O	O
reasons	O	O
(	O	O
there	O	O
may	O	O
be	O	O
others	O	O
)	O	O
why	O	O
they	O	O
have	O	O
been	O	O
introduced	O	O
:	O	O
#	O	O
li	O	O
Providing	O	O
actual	O	O
default	O	O
implementations	O	O
.	O	O
Example	O	O
:	O	O
Iterator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Allowing	O	O
for	O	O
JDK	O	O
API	O	O
evolution	O	O
.	O	O
Example	O	O
:	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
From	O	O
an	O	O
API	O	O
designer	O	O
'	O	O
s	O	O
perspective	O	O
,	O	O
I	O	O
would	O	O
have	O	O
liked	O	O
to	O	O
be	O	O
able	O	O
to	O	O
use	O	O
other	O	O
modifiers	O	O
on	O	O
interface	O	O
methods	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
final	O	O
.	O	O
This	O	O
would	O	O
be	O	O
useful	O	O
when	O	O
adding	O	O
convenience	O	O
methods	O	O
,	O	O
preventing	O	O
"	O	O
accidental	O	O
"	O	O
overrides	O	O
in	O	O
implementing	O	O
classes	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
above	O	O
is	O	O
already	O	O
common	O	O
practice	O	O
if	O	O
Sender	O	O
were	O	O
a	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
,	O	O
default	O	O
and	O	O
final	O	O
are	O	O
obviously	O	O
contradicting	O	O
keywords	O	O
,	O	O
but	O	O
the	O	O
default	O	O
keyword	O	O
itself	O	O
would	O	O
not	O	O
have	O	O
been	O	O
strictly	O	O
required	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
assuming	O	O
that	O	O
this	O	O
contradiction	O	O
is	O	O
deliberate	O	O
,	O	O
to	O	O
reflect	O	O
the	O	O
subtle	O	O
differences	O	O
between	O	O
"	O	O
class	O	O
methods	O	O
with	O	O
body	O	O
"	O	O
(	O	O
just	O	O
methods	O	O
)	O	O
and	O	O
"	O	O
interface	O	O
methods	O	O
with	O	O
body	O	O
"	O	O
(	O	O
default	O	O
methods	O	O
)	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
differences	O	O
which	O	O
I	O	O
have	O	O
not	O	O
yet	O	O
understood	O	O
.	O	O
At	O	O
some	O	O
point	O	O
of	O	O
time	O	O
,	O	O
support	O	O
for	O	O
modifiers	O	O
like	O	O
static	O	O
and	O	O
final	O	O
on	O	O
interface	O	O
methods	O	O
was	O	O
not	O	O
yet	O	O
fully	O	O
explored	O	O
,	O	O
citing	O	O
Brian	O	O
Goetz	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
that	O	O
time	O	O
in	O	O
late	O	O
2011	O	O
,	O	O
obviously	O	O
,	O	O
support	O	O
for	O	O
static	O	O
methods	O	O
in	O	O
interfaces	O	O
was	O	O
added	O	O
.	O	O
Clearly	O	O
,	O	O
this	O	O
added	O	O
a	O	O
lot	O	O
of	O	O
value	O	O
to	O	O
the	O	O
JDK	O	O
libraries	O	O
themselves	O	O
,	O	O
such	O	O
as	O	O
with	O	O
Comparator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
comparing	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
:	O	O
What	O	O
is	O	O
the	O	O
reason	O	O
final	O	O
(	O	O
and	O	O
also	O	O
static	O	O
final	O	O
)	O	O
never	O	O
made	O	O
it	O	O
to	O	O
Java	O	O
8	O	O
interfaces	O	O
?	O	O
Question	O	O
-	O	O
15655012	O	O
,	O	O
answer	O	O
-	O	O
15655071	O	O
If	O	O
you	O	O
make	O	O
foo	O	O
static	O	O
,	O	O
you	O	O
must	O	O
initialize	O	O
it	O	O
in	O	O
the	O	O
class	O	O
constructor	O	O
(	O	O
or	O	O
inline	O	O
where	O	O
you	O	O
define	O	O
it	O	O
)	O	O
like	O	O
the	O	O
following	O	O
examples	O	O
.	O	O
Class	O	O
constructor	O	O
(	O	O
not	O	O
instance	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Inline	O	O
:	O	O
private	O	O
static	O	O
final	O	O
List	B-api_mention	B-api_mention
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
problem	O	O
here	O	O
is	O	O
not	O	O
how	O	O
the	O	O
final	O	O
modifier	O	O
works	O	O
,	O	O
but	O	O
rather	O	O
how	O	O
the	O	O
static	O	O
modifier	O	O
works	O	O
.	O	O
The	O	O
final	O	O
modifier	O	O
enforces	O	O
an	O	O
initialization	O	O
of	O	O
your	O	O
reference	O	O
by	O	O
the	O	O
time	O	O
the	O	O
call	O	O
to	O	O
your	O	O
constructor	O	O
completes	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
you	O	O
must	O	O
initialize	O	O
it	O	O
in	O	O
the	O	O
constructor	O	O
)	O	O
.	O	O
When	O	O
you	O	O
initialize	O	O
an	O	O
attribute	O	O
in	O	O
-	O	O
line	O	O
,	O	O
it	O	O
gets	O	O
initialized	O	O
before	O	O
the	O	O
code	O	O
you	O	O
have	O	O
defined	O	O
for	O	O
the	O	O
constructor	O	O
is	O	O
run	O	O
,	O	O
so	O	O
you	O	O
get	O	O
the	O	O
following	O	O
outcomes	O	O
:	O	O
#	O	O
li	O	O
if	O	O
foo	O	O
is	O	O
static	O	O
,	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
executed	O	O
before	O	O
the	O	O
static	O	O
{	O	O
}	O	O
constructor	O	O
you	O	O
have	O	O
defined	O	O
for	O	O
your	O	O
class	O	O
is	O	O
executed	O	O
#	O	O
li	O	O
if	O	O
foo	O	O
is	O	O
not	O	O
static	O	O
,	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
executed	O	O
before	O	O
your	O	O
constructor	O	O
is	O	O
run	O	O
When	O	O
you	O	O
do	O	O
not	O	O
initilize	O	O
an	O	O
attribute	O	O
in	O	O
-	O	O
line	O	O
,	O	O
the	O	O
final	O	O
modifier	O	O
enforces	O	O
that	O	O
you	O	O
initialize	O	O
it	O	O
and	O	O
that	O	O
you	O	O
must	O	O
do	O	O
so	O	O
in	O	O
the	O	O
constructor	O	O
.	O	O
If	O	O
you	O	O
also	O	O
have	O	O
a	O	O
static	O	O
modifier	O	O
,	O	O
the	O	O
constructor	O	O
you	O	O
will	O	O
have	O	O
to	O	O
initialize	O	O
the	O	O
attribute	O	O
in	O	O
is	O	O
the	O	O
class	O	O
'	O	O
initialization	O	O
block	O	O
:	O	O
static	O	O
{	O	O
}	O	O
.	O	O
The	O	O
error	O	O
you	O	O
get	O	O
in	O	O
your	O	O
code	O	O
is	O	O
from	O	O
the	O	O
fact	O	O
that	O	O
static	O	O
{	O	O
}	O	O
is	O	O
run	O	O
when	O	O
the	O	O
class	O	O
is	O	O
loaded	O	O
,	O	O
before	O	O
the	O	O
time	O	O
you	O	O
instantiate	O	O
an	O	O
object	O	O
of	O	O
that	O	O
class	O	O
.	O	O
Thus	O	O
,	O	O
you	O	O
will	O	O
have	O	O
not	O	O
initialized	O	O
foo	O	O
when	O	O
the	O	O
class	O	O
is	O	O
created	O	O
.	O	O
Think	O	O
of	O	O
the	O	O
static	O	O
{	O	O
}	O	O
block	O	O
as	O	O
a	O	O
constructor	O	O
for	O	O
an	O	O
object	O	O
of	O	O
type	O	O
Class	B-api_mention	O
.	O	O
This	O	O
is	O	O
where	O	O
you	O	O
must	O	O
do	O	O
the	O	O
initialization	O	O
of	O	O
your	O	O
static	O	O
final	O	O
class	O	O
attributes	O	O
(	O	O
if	O	O
not	O	O
done	O	O
inline	O	O
)	O	O
.	O	O
Side	O	O
note	O	O
:	O	O
The	O	O
final	O	O
modifier	O	O
assures	O	O
const	O	O
-	O	O
ness	O	O
only	O	O
for	O	O
primitive	O	O
types	O	O
and	O	O
references	O	O
.	O	O
When	O	O
you	O	O
declare	O	O
a	O	O
final	O	O
object	O	O
,	O	O
what	O	O
you	O	O
get	O	O
is	O	O
a	O	O
final	O	O
reference	O	O
to	O	O
that	O	O
object	O	O
,	O	O
but	O	O
the	O	O
object	O	O
itself	O	O
is	O	O
not	O	O
constant	O	O
.	O	O
What	O	O
you	O	O
are	O	O
really	O	O
achieving	O	O
when	O	O
declaring	O	O
a	O	O
final	O	O
attribute	O	O
is	O	O
that	O	O
,	O	O
once	O	O
you	O	O
declare	O	O
an	O	O
object	O	O
for	O	O
your	O	O
specific	O	O
purpose	O	O
(	O	O
like	O	O
the	O	O
final	O	O
List	B-api_mention	B-api_mention
that	O	O
you	O	O
have	O	O
declared	O	O
)	O	O
,	O	O
that	O	O
and	O	O
only	O	O
that	O	O
object	O	O
will	O	O
be	O	O
used	O	O
for	O	O
that	O	O
purpose	O	O
:	O	O
you	O	O
will	O	O
not	O	O
be	O	O
able	O	O
to	O	O
change	O	O
List	B-api_mention	B-api_mention
foo	O	O
to	O	O
another	O	O
List	B-api_mention	B-api_mention
,	O	O
but	O	O
you	O	O
can	O	O
still	O	O
alter	O	O
your	O	O
List	B-api_mention	B-api_mention
by	O	O
adding	O	O
/	O	O
removing	O	O
items	O	O
(	O	O
the	O	O
List	B-api_mention	B-api_mention
you	O	O
are	O	O
using	O	O
will	O	O
be	O	O
the	O	O
same	O	O
,	O	O
only	O	O
with	O	O
its	O	O
contents	O	O
altered	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
6992608	O	O
,	O	O
answer	O	O
-	O	O
26764904	O	O
As	O	O
pointed	O	O
by	O	O
this	O	O
the	O	O
best	O	O
way	O	O
to	O	O
obtain	O	O
a	O	O
concurrency	O	O
-	O	O
able	O	O
HashSet	B-api_mention	B-api_mention
is	O	O
by	O	O
means	O	O
of	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
synchronizedSet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Set	O	O
s	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
synchronizedSet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
worked	O	O
for	O	O
me	O	O
and	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
seen	O	O
anybody	O	O
really	O	O
pointing	O	O
to	O	O
it	O	O
.	O	O
EDIT	O	O
This	O	O
is	O	O
less	O	O
efficient	O	O
than	O	O
the	O	O
currently	O	O
aproved	O	O
solution	O	O
,	O	O
as	O	O
Eugene	O	O
points	O	O
out	O	O
,	O	O
since	O	O
it	O	O
just	O	O
wraps	O	O
your	O	O
set	O	O
into	O	O
a	O	O
synchronized	O	O
decorator	O	O
,	O	O
while	O	O
a	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
actually	O	O
implements	O	O
low	O	O
-	O	O
level	O	O
concurrency	O	O
and	O	O
it	O	O
can	O	O
back	O	O
your	O	O
Set	O	B-api_mention
just	O	O
as	O	O
fine	O	O
.	O	O
So	O	O
thanks	O	O
to	O	O
Mr	O	O
.	O	O
Stepanenkov	O	O
for	O	O
making	O	O
that	O	O
clear	O	O
.	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
8275499	O	O
,	O	O
answer	O	O
-	O	O
17397548	O	O
As	O	O
for	O	O
the	O	O
code	O	O
example	O	O
in	O	O
the	O	O
question	O	O
,	O	O
the	O	O
standard	O	O
solution	O	O
is	O	O
to	O	O
reference	O	O
the	O	O
class	O	O
explicitly	O	O
by	O	O
its	O	O
name	O	O
,	O	O
and	O	O
it	O	O
is	O	O
even	O	O
possible	O	O
to	O	O
do	O	O
without	O	O
getClassLoader	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
approach	O	O
still	O	O
has	O	O
a	O	O
back	O	O
side	O	O
that	O	O
it	O	O
is	O	O
not	O	O
very	O	O
safe	O	O
against	O	O
copy	O	O
/	O	O
paste	O	O
errors	O	O
in	O	O
case	O	O
you	O	O
need	O	O
to	O	O
replicate	O	O
this	O	O
code	O	O
to	O	O
a	O	O
number	O	O
of	O	O
similar	O	O
classes	O	O
.	O	O
And	O	O
as	O	O
for	O	O
the	O	O
exact	O	O
question	O	O
in	O	O
the	O	O
headline	O	O
,	O	O
there	O	O
is	O	O
a	O	O
trick	O	O
posted	O	O
in	O	O
the	O	O
adjacent	O	O
thread	O	O
:	O	O
Class	B-api_mention	B-api_mention
currentClass	O	O
=	O	O
new	O	O
Object	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
{	O	O
}	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getEnclosingClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
It	O	O
uses	O	O
a	O	O
nested	O	O
anonymous	O	O
Object	B-api_mention	B-api_mention
subclass	O	O
to	O	O
get	O	O
hold	O	O
of	O	O
the	O	O
execution	O	O
context	O	O
.	O	O
This	O	O
trick	O	O
has	O	O
a	O	O
benefit	O	O
of	O	O
being	O	O
copy	O	O
/	O	O
paste	O	O
safe	O	O
.	O	O
.	O	O
.	O	O
It	O	O
may	O	O
be	O	O
also	O	O
worth	O	O
noting	O	O
that	O	O
if	O	O
this	O	O
snippet	O	O
is	O	O
shaped	O	O
as	O	O
a	O	O
static	O	O
method	O	O
of	O	O
some	O	O
base	O	O
class	O	O
,	O	O
then	O	O
currenClass	O	O
value	O	O
will	O	O
always	O	O
be	O	O
a	O	O
reference	O	O
to	O	O
that	O	O
base	O	O
class	O	O
rather	O	O
than	O	O
to	O	O
any	O	O
subclass	O	O
that	O	O
may	O	O
be	O	O
using	O	O
that	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
9749746	O	O
,	O	O
answer	O	O
-	O	O
9749864	O	O
You	O	O
are	O	O
specifically	O	O
asking	O	O
about	O	O
how	O	O
they	O	O
internally	O	O
work	O	O
,	O	O
so	O	O
here	O	O
you	O	O
are	O	O
:	O	O
No	O	O
synchronization	O	O
#	O	O
pre	O	O
It	O	O
basically	O	O
reads	O	O
value	O	O
from	O	O
memory	O	O
,	O	O
increments	O	O
it	O	O
and	O	O
puts	O	O
back	O	O
to	O	O
memory	O	O
.	O	O
This	O	O
works	O	O
in	O	O
single	O	O
thread	O	O
but	O	O
nowadays	O	O
,	O	O
in	O	O
the	O	O
era	O	O
of	O	O
multi	O	O
-	O	O
core	O	O
,	O	O
multi	O	O
-	O	O
CPU	O	O
,	O	O
multi	O	O
-	O	O
level	O	O
caches	O	O
it	O	O
won	O	O
'	O	O
t	O	O
work	O	O
correctly	O	O
.	O	O
First	O	O
of	O	O
all	O	O
it	O	O
introduces	O	O
race	O	O
condition	O	O
(	O	O
several	O	O
threads	O	O
can	O	O
read	O	O
the	O	O
value	O	O
at	O	O
the	O	O
same	O	O
time	O	O
)	O	O
,	O	O
but	O	O
also	O	O
visibility	O	O
problems	O	O
.	O	O
The	O	O
value	O	O
might	O	O
only	O	O
be	O	O
stored	O	O
in	O	O
"	O	O
local	O	O
"	O	O
CPU	O	O
memory	O	O
(	O	O
some	O	O
cache	O	O
)	O	O
and	O	O
not	O	O
be	O	O
visible	O	O
for	O	O
other	O	O
CPUs	O	O
/	O	O
cores	O	O
(	O	O
and	O	O
thus	O	O
-	O	O
threads	O	O
)	O	O
.	O	O
This	O	O
is	O	O
why	O	O
many	O	O
refer	O	O
to	O	O
local	O	O
copy	O	O
of	O	O
a	O	O
variable	O	O
in	O	O
a	O	O
thread	O	O
.	O	O
It	O	O
is	O	O
very	O	O
unsafe	O	O
.	O	O
Consider	O	O
this	O	O
popular	O	O
but	O	O
broken	O	O
thread	O	O
-	O	O
stopping	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Add	O	O
volatile	O	O
to	O	O
stopped	O	O
variable	O	O
and	O	O
it	O	O
works	O	O
fine	O	O
-	O	O
if	O	O
any	O	O
other	O	O
thread	O	O
modifies	O	O
stopped	O	O
variable	O	O
via	O	O
pleaseStop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
you	O	O
are	O	O
guaranteed	O	O
to	O	O
see	O	O
that	O	O
change	O	O
immediately	O	O
in	O	O
working	O	O
thread	O	O
'	O	O
s	O	O
while	O	O
(	O	O
args	O	O
)	O	O
loop	O	O
.	O	O
BTW	O	O
this	O	O
is	O	O
not	O	O
a	O	O
good	O	O
way	O	O
to	O	O
interrupt	O	O
a	O	O
thread	O	O
either	O	O
,	O	O
see	O	O
:	O	O
How	O	O
to	O	O
stop	O	O
a	O	O
thread	O	O
that	O	O
is	O	O
running	O	O
forever	O	O
without	O	O
any	O	O
use	O	O
and	O	O
Stopping	O	O
a	O	O
specific	O	O
java	O	O
thread	O	O
.	O	O
AtomicInteger	O	O
#	O	O
pre	O	O
The	O	O
AtomicInteger	B-api_mention	B-api_mention
class	O	O
uses	O	O
CAS	O	O
(	O	O
compare	O	O
-	O	O
and	O	O
-	O	O
swap	O	O
)	O	O
low	O	O
-	O	O
level	O	O
CPU	O	O
operations	O	O
(	O	O
no	O	O
synchronization	O	O
needed	O	O
!	O	O
)	O	O
They	O	O
allow	O	O
you	O	O
to	O	O
modify	O	O
a	O	O
particular	O	O
variable	O	O
only	O	O
if	O	O
the	O	O
present	O	O
value	O	O
is	O	O
equal	O	O
to	O	O
something	O	O
else	O	O
(	O	O
and	O	O
is	O	O
returned	O	O
successfully	O	O
)	O	O
.	O	O
So	O	O
when	O	O
you	O	O
execute	O	O
getAndIncrement	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
actually	O	O
runs	O	O
in	O	O
a	O	O
loop	O	O
(	O	O
simplified	O	O
real	O	O
implementation	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
basically	O	O
:	O	O
read	O	O
;	O	O
try	O	O
to	O	O
store	O	O
incremented	O	O
value	O	O
;	O	O
if	O	O
not	O	O
successful	O	O
(	O	O
the	O	O
value	O	O
is	O	O
no	O	O
longer	O	O
equal	O	O
to	O	O
current	O	O
)	O	O
,	O	O
read	O	O
and	O	O
try	O	O
again	O	O
.	O	O
The	O	O
compareAndSet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
implemented	O	O
in	O	O
native	O	O
code	O	O
(	O	O
assembly	O	O
)	O	O
.	O	O
volatile	O	O
without	O	O
synchronization	O	O
#	O	O
pre	O	O
This	O	O
code	O	O
is	O	O
not	O	O
correct	O	O
.	O	O
It	O	O
fixes	O	O
the	O	O
visibility	O	O
issue	O	O
(	O	O
volatile	O	O
makes	O	O
sure	O	O
other	O	O
threads	O	O
can	O	O
see	O	O
change	O	O
made	O	O
to	O	O
counter	O	O
)	O	O
but	O	O
still	O	O
has	O	O
a	O	O
race	O	O
condition	O	O
.	O	O
This	O	O
has	O	O
been	O	O
explained	O	O
multiple	O	O
times	O	O
:	O	O
pre	O	O
/	O	O
post	O	O
-	O	O
incrementation	O	O
is	O	O
not	O	O
atomic	B-api_mention	O
.	O	O
The	O	O
only	O	O
side	O	O
effect	O	O
of	O	O
volatile	O	O
is	O	O
"	O	O
flushing	O	O
"	O	O
caches	O	O
so	O	O
that	O	O
all	O	O
other	O	O
parties	O	O
see	O	O
the	O	O
freshest	O	O
version	O	O
of	O	O
the	O	O
data	O	O
.	O	O
This	O	O
is	O	O
too	O	O
strict	O	O
in	O	O
most	O	O
situations	O	O
;	O	O
that	O	O
is	O	O
why	O	O
volatile	O	O
is	O	O
not	O	O
default	O	O
.	O	O
volatile	O	O
without	O	O
synchronization	O	O
(	O	O
2	O	O
)	O	O
#	O	O
pre	O	O
The	O	O
same	O	O
problem	O	O
as	O	O
above	O	O
,	O	O
but	O	O
even	O	O
worse	O	O
because	O	O
i	O	O
is	O	O
not	O	O
private	O	O
.	O	O
The	O	O
race	O	O
condition	O	O
is	O	O
still	O	O
present	O	O
.	O	O
Why	O	O
is	O	O
it	O	O
a	O	O
problem	O	O
?	O	O
If	O	O
,	O	O
say	O	O
,	O	O
two	O	O
threads	O	O
run	O	O
this	O	O
code	O	O
simultaneously	O	O
,	O	O
the	O	O
output	O	O
might	O	O
be	O	O
+	O	O
5	O	O
or	O	O
+	O	O
10	O	O
.	O	O
However	O	O
,	O	O
you	O	O
are	O	O
guaranteed	O	O
to	O	O
see	O	O
the	O	O
change	O	O
.	O	O
Multiple	O	O
independent	O	O
synchronized	O	O
#	O	O
pre	O	O
Surprise	O	O
,	O	O
this	O	O
code	O	O
is	O	O
incorrect	O	O
as	O	O
well	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
it	O	O
is	O	O
completely	O	O
wrong	O	O
.	O	O
First	O	O
of	O	O
all	O	O
you	O	O
are	O	O
synchronizing	O	O
on	O	O
i	O	O
,	O	O
which	O	O
is	O	O
about	O	O
to	O	O
be	O	O
changed	O	O
(	O	O
moreover	O	O
,	O	O
i	O	O
is	O	O
a	O	O
primitive	O	O
,	O	O
so	O	O
I	O	O
guess	O	O
you	O	O
are	O	O
synchronizing	O	O
on	O	O
a	O	O
temporary	O	O
Integer	O	B-api_mention
created	O	O
via	O	O
autoboxing	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Completely	O	O
flawed	O	O
.	O	O
You	O	O
could	O	O
also	O	O
write	O	O
:	O	O
#	O	O
pre	O	O
No	O	O
two	O	O
threads	O	O
can	O	O
enter	O	O
the	O	O
same	O	O
synchronized	O	O
block	O	O
with	O	O
the	O	O
same	O	O
lock	O	O
.	O	O
In	O	O
this	O	O
case	O	O
(	O	O
and	O	O
similarly	O	O
in	O	O
your	O	O
code	O	O
)	O	O
the	O	O
lock	O	O
object	O	O
changes	O	O
upon	O	O
every	O	O
execution	O	O
,	O	O
so	O	O
synchronized	O	O
effectively	O	O
has	O	O
no	O	O
effect	O	O
.	O	O
Even	O	O
if	O	O
you	O	O
have	O	O
used	O	O
a	O	O
final	O	O
variable	O	O
(	O	O
or	O	O
this	O	O
)	O	O
for	O	O
synchronization	O	O
,	O	O
the	O	O
code	O	O
is	O	O
still	O	O
incorrect	O	O
.	O	O
Two	O	O
threads	O	O
can	O	O
first	O	O
read	O	O
i	O	O
to	O	O
temp	O	O
synchronously	O	O
(	O	O
having	O	O
the	O	O
same	O	O
value	O	O
locally	O	O
in	O	O
temp	O	O
)	O	O
,	O	O
then	O	O
the	O	O
first	O	O
assigns	O	O
a	O	O
new	O	O
value	O	O
to	O	O
i	O	O
(	O	O
say	O	O
,	O	O
from	O	O
1	O	O
to	O	O
6	O	O
)	O	O
and	O	O
the	O	O
other	O	O
one	O	O
does	O	O
the	O	O
same	O	O
thing	O	O
(	O	O
from	O	O
1	O	O
to	O	O
6	O	O
)	O	O
.	O	O
The	O	O
synchronization	O	O
must	O	O
span	O	O
from	O	O
reading	O	O
to	O	O
assigning	O	O
a	O	O
value	O	O
.	O	O
Your	O	O
first	O	O
synchronization	O	O
has	O	O
no	O	O
effect	O	O
(	O	O
reading	O	O
an	O	O
int	O	O
is	O	O
atomic	O	O
)	O	O
and	O	O
the	O	O
second	O	O
as	O	O
well	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
,	O	O
these	O	O
are	O	O
the	O	O
correct	O	O
forms	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
12317668	O	O
According	O	O
to	O	O
the	O	O
JLS	O	O
,	O	O
an	O	O
int	O	O
array	O	O
should	O	O
be	O	O
filled	O	O
by	O	O
zeros	O	O
just	O	O
after	O	O
initialization	O	O
.	O	O
However	O	O
,	O	O
I	O	O
am	O	O
faced	O	O
with	O	O
a	O	O
situation	O	O
where	O	O
it	O	O
is	O	O
not	O	O
.	O	O
Such	O	O
a	O	O
behavior	O	O
occurs	O	O
first	O	O
in	O	O
JDK	O	O
7u4	O	O
and	O	O
also	O	O
occurs	O	O
in	O	O
all	O	O
later	O	O
updates	O	O
(	O	O
I	O	O
use	O	O
64	O	O
-	O	O
bit	O	O
implementation	O	O
)	O	O
.	O	O
The	O	O
following	O	O
code	O	O
throws	O	O
exception	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
exception	O	O
occurs	O	O
after	O	O
the	O	O
JVM	O	O
performs	O	O
compilation	O	O
of	O	O
the	O	O
code	O	O
block	O	O
and	O	O
does	O	O
not	O	O
arise	O	O
with	O	O
-	O	O
Xint	O	O
flag	O	O
.	O	O
Additionally	O	O
,	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
statement	O	O
(	O	O
as	O	O
all	O	O
other	O	O
statements	O	O
in	O	O
this	O	O
code	O	O
)	O	O
is	O	O
necessary	O	O
,	O	O
and	O	O
the	O	O
exception	O	O
does	O	O
not	O	O
occurs	O	O
if	O	O
it	O	O
is	O	O
absent	O	O
.	O	O
It	O	O
is	O	O
clear	O	O
that	O	O
this	O	O
possible	O	O
bug	O	O
is	O	O
bounded	O	O
with	O	O
some	O	O
JVM	O	O
optimization	O	O
.	O	O
Any	O	O
ideas	O	O
for	O	O
the	O	O
reason	O	O
of	O	O
such	O	O
a	O	O
behavior	O	O
?	O	O
Update	O	O
:	O	O
I	O	O
see	O	O
this	O	O
behavior	O	O
on	O	O
HotSpot	O	O
64	O	O
-	O	O
bit	O	O
server	O	O
VM	O	O
,	O	O
Java	O	O
version	O	O
from	O	O
1	O	O
.	O	O
7	O	O
.	O	O
0	O	O
_	O	O
04	O	O
to	O	O
1	O	O
.	O	O
7	O	O
.	O	O
0	O	O
_	O	O
10	O	O
on	O	O
Gentoo	O	O
Linux	O	O
,	O	O
Debian	O	O
Linux	O	O
(	O	O
both	O	O
kernel	O	O
3	O	O
.	O	O
0	O	O
version	O	O
)	O	O
and	O	O
MacOS	O	O
Lion	O	O
.	O	O
This	O	O
error	O	O
can	O	O
always	O	O
be	O	O
reproduced	O	O
with	O	O
the	O	O
code	O	O
above	O	O
.	O	O
I	O	O
did	O	O
not	O	O
test	O	O
this	O	O
problem	O	O
with	O	O
a	O	O
32	O	O
-	O	O
bit	O	O
JDK	O	O
or	O	O
on	O	O
Windows	O	O
.	O	O
I	O	O
already	O	O
sent	O	O
a	O	O
bug	O	O
report	O	O
to	O	O
the	O	O
Oracle	O	O
(	O	O
bug	O	O
id	O	O
7196857	O	O
)	O	O
and	O	O
it	O	O
will	O	O
appear	O	O
in	O	O
public	O	O
Oracle	O	O
bug	O	O
database	O	O
in	O	O
few	O	O
days	O	O
.	O	O
Update	O	O
:	O	O
Oracle	O	O
published	O	O
this	O	O
bug	O	O
at	O	O
their	O	O
public	O	O
bug	O	O
database	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
30125296	O	O
,	O	O
answer	O	O
-	O	O
30125487	O	O
I	O	O
suggest	O	O
2	O	O
more	O	O
options	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
second	O	O
one	O	O
uses	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
summingInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
collector	O	O
.	O	O
Besides	O	O
,	O	O
Java	O	O
8	O	O
introduces	O	O
a	O	O
very	O	O
effective	O	O
LongAdder	O	B-api_mention
accumulator	O	O
designed	O	O
to	O	O
speed	O	O
-	O	O
up	O	O
summarizing	O	O
in	O	O
parallel	O	O
streams	O	O
and	O	O
multi	O	O
-	O	O
thread	O	O
environments	O	O
.	O	O
Here	O	O
,	O	O
it	O	O
may	O	O
be	O	O
used	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923227	O	O
Optionals	O	O
aren	O	O
'	O	O
t	O	O
designed	O	O
for	O	O
this	O	O
purpose	O	O
,	O	O
as	O	O
explained	O	O
nicely	O	O
by	O	O
Brian	O	O
Goetz	O	O
.	O	O
You	O	O
can	O	O
always	O	O
use	O	O
@	O	O
Nullable	O	O
to	O	O
denote	O	O
that	O	O
a	O	O
method	O	O
argument	O	O
can	O	O
be	O	O
null	O	O
.	O	O
Using	O	O
an	O	O
optional	O	O
does	O	O
not	O	O
really	O	O
enable	O	O
you	O	O
to	O	O
write	O	O
your	O	O
method	O	O
logic	O	O
more	O	O
neatly	O	O
.	O	O
Question	O	O
-	O	O
31419029	O	O
,	O	O
answer	O	O
-	O	O
31419047	O	O
An	O	O
empty	O	O
HashMap	B-api_mention	B-api_mention
object	O	O
is	O	O
much	O	O
smaller	O	O
than	O	O
an	O	O
array	O	O
of	O	O
2000	O	O
Object	B-api_mention	B-api_mention
references	O	O
.	O	O
Even	O	O
though	O	O
you	O	O
pass	O	O
2000	O	O
to	O	O
the	O	O
initialCapacity	O	O
parameter	O	O
of	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
constructor	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
actually	O	O
creating	O	O
2000	O	O
spaces	O	O
for	O	O
objects	O	O
yet	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14526729	O	O
The	O	O
real	O	O
problem	O	O
with	O	O
this	O	O
is	O	O
that	O	O
it	O	O
'	O	O
s	O	O
output	O	O
histogram	O	O
is	O	O
dependent	O	O
on	O	O
the	O	O
initial	O	O
seed	O	O
far	O	O
to	O	O
much	O	O
-	O	O
much	O	O
of	O	O
the	O	O
time	O	O
it	O	O
will	O	O
end	O	O
up	O	O
with	O	O
a	O	O
near	O	O
uniform	O	O
output	O	O
but	O	O
a	O	O
lot	O	O
of	O	O
the	O	O
time	O	O
will	O	O
have	O	O
distinctly	O	O
un	O	O
-	O	O
uniform	O	O
output	O	O
.	O	O
Inspired	O	O
by	O	O
this	O	O
article	O	O
about	O	O
how	O	O
bad	O	O
php	O	O
'	O	O
s	O	O
rand	O	O
(	O	O
)	O	O
function	O	O
is	O	O
,	O	O
I	O	O
made	O	O
some	O	O
random	O	O
matrix	O	O
images	O	O
using	O	O
QuickRandom	B-api_mention	B-api_mention
and	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
.	O	O
This	O	O
run	O	O
shows	O	O
how	O	O
sometimes	O	O
the	O	O
seed	O	O
can	O	O
have	O	O
a	O	O
bad	O	O
effect	O	O
(	O	O
in	O	O
this	O	O
case	O	O
favouring	O	O
lower	O	O
numbers	O	O
)	O	O
where	O	O
as	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
is	O	O
pretty	O	O
uniform	O	O
.	O	O
QuickRandom	B-api_mention	O
#	O	O
img	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
#	O	O
img	O	O
Even	O	O
Worse	O	O
If	O	O
we	O	O
initialise	O	O
QuickRandom	B-api_mention	B-api_mention
as	O	O
new	O	O
QuickRandom	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
we	O	O
get	O	O
this	O	O
image	O	O
:	O	O
#	O	O
img	O	O
The	O	O
Code	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5031614	O	O
,	O	O
answer	O	O
-	O	O
5032837	O	O
If	O	O
you	O	O
want	O	O
to	O	O
use	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
your	O	O
Sets	O	O
,	O	O
in	O	O
the	O	O
sense	O	O
that	O	O
the	O	O
same	O	O
entity	O	O
can	O	O
only	O	O
be	O	O
in	O	O
there	O	O
once	O	O
,	O	O
then	O	O
there	O	O
is	O	O
only	O	O
one	O	O
option	O	O
:	O	O
Option	O	O
2	O	O
.	O	O
That	O	O
'	O	O
s	O	O
because	O	O
a	O	O
primary	O	O
key	O	O
for	O	O
an	O	O
entity	O	O
by	O	O
definition	O	O
never	O	O
changes	O	O
(	O	O
if	O	O
somebody	O	O
indeed	O	O
updates	O	O
it	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
the	O	O
same	O	O
entity	O	O
anymore	O	O
)	O	O
You	O	O
should	O	O
take	O	O
that	O	O
literally	O	O
:	O	O
Since	O	O
your	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
based	O	O
on	O	O
the	O	O
primary	O	O
key	O	O
,	O	O
you	O	O
must	O	O
not	O	O
use	O	O
these	O	O
methods	O	O
,	O	O
until	O	O
the	O	O
primary	O	O
key	O	O
is	O	O
set	O	O
.	O	O
So	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
put	O	O
entities	O	O
in	O	O
the	O	O
set	O	O
,	O	O
until	O	O
they	O	O
'	O	O
re	O	O
assigned	O	O
a	O	O
primary	O	O
key	O	O
.	O	O
(	O	O
Yes	O	O
,	O	O
UUIDs	O	O
and	O	O
similar	O	O
concepts	O	O
may	O	O
help	O	O
to	O	O
assign	O	O
primary	O	O
keys	O	O
early	O	O
.	O	O
)	O	O
Now	O	O
,	O	O
it	O	O
'	O	O
s	O	O
theoretically	O	O
also	O	O
possible	O	O
to	O	O
achieve	O	O
that	O	O
with	O	O
Option	O	O
3	O	O
,	O	O
even	O	O
though	O	O
so	O	O
-	O	O
called	O	O
"	O	O
business	O	O
-	O	O
keys	O	O
"	O	O
have	O	O
the	O	O
nasty	O	O
drawback	O	O
that	O	O
they	O	O
can	O	O
change	O	O
:	O	O
"	O	O
All	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
do	O	O
is	O	O
delete	O	O
the	O	O
already	O	O
inserted	O	O
entities	O	O
from	O	O
the	O	O
set	O	O
(	O	O
s	O	O
)	O	O
,	O	O
and	O	O
re	O	O
-	O	O
insert	O	O
them	O	O
.	O	O
"	O	O
That	O	O
is	O	O
true	O	O
-	O	O
but	O	O
it	O	O
also	O	O
means	O	O
,	O	O
that	O	O
in	O	O
a	O	O
distributed	O	O
system	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
make	O	O
sure	O	O
,	O	O
that	O	O
this	O	O
is	O	O
done	O	O
absolutely	O	O
everywhere	O	O
the	O	O
data	O	O
has	O	O
been	O	O
inserted	O	O
to	O	O
(	O	O
and	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
make	O	O
sure	O	O
,	O	O
that	O	O
the	O	O
update	O	O
is	O	O
performed	O	O
,	O	O
before	O	O
other	O	O
things	O	O
occur	O	O
)	O	O
.	O	O
You	O	O
'	O	O
ll	O	O
need	O	O
a	O	O
sophisticated	O	O
update	O	O
mechanism	O	O
,	O	O
especially	O	O
if	O	O
some	O	O
remote	O	O
systems	O	O
aren	O	O
'	O	O
t	O	O
currently	O	O
reachable	O	O
.	O	O
.	O	O
.	O	O
Option	O	O
1	O	O
can	O	O
only	O	O
be	O	O
used	O	O
,	O	O
if	O	O
all	O	O
the	O	O
objects	O	O
in	O	O
your	O	O
sets	O	O
are	O	O
from	O	O
the	O	O
same	O	O
Hibernate	O	O
session	O	O
.	O	O
The	O	O
Hibernate	O	O
documentation	O	O
makes	O	O
this	O	O
very	O	O
clear	O	O
in	O	O
chapter	O	O
13	O	O
.	O	O
1	O	O
.	O	O
3	O	O
.	O	O
Considering	O	O
object	O	O
identity	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
continues	O	O
to	O	O
argue	O	O
in	O	O
favor	O	O
of	O	O
Option	O	O
3	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
true	O	O
,	O	O
if	O	O
you	O	O
#	O	O
li	O	O
cannot	O	O
assign	O	O
the	O	O
id	O	O
early	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
by	O	O
using	O	O
UUIDs	O	O
)	O	O
#	O	O
li	O	O
and	O	O
yet	O	O
you	O	O
absolutely	O	O
want	O	O
to	O	O
put	O	O
your	O	O
objects	O	O
in	O	O
sets	O	O
while	O	O
they	O	O
'	O	O
re	O	O
in	O	O
transient	O	O
state	O	O
.	O	O
Otherwise	O	O
,	O	O
you	O	O
'	O	O
re	O	O
free	O	O
to	O	O
choose	O	O
Option	O	O
2	O	O
.	O	O
Then	O	O
it	O	O
mentions	O	O
the	O	O
need	O	O
for	O	O
a	O	O
relative	O	O
stability	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
correct	O	O
.	O	O
The	O	O
practical	O	O
problem	O	O
I	O	O
see	O	O
with	O	O
this	O	O
is	O	O
:	O	O
If	O	O
you	O	O
can	O	O
'	O	O
t	O	O
guarantee	O	O
absolute	O	O
stability	O	O
,	O	O
how	O	O
will	O	O
you	O	O
be	O	O
able	O	O
to	O	O
guarantee	O	O
stability	O	O
"	O	O
as	O	O
long	O	O
as	O	O
the	O	O
objects	O	O
are	O	O
in	O	O
the	O	O
same	O	O
Set	O	O
"	O	O
.	O	O
I	O	O
can	O	O
imagine	O	O
some	O	O
special	O	O
cases	O	O
(	O	O
like	O	O
using	O	O
sets	O	O
only	O	O
for	O	O
a	O	O
conversation	O	O
and	O	O
then	O	O
throwing	O	O
it	O	O
away	O	O
)	O	O
,	O	O
but	O	O
I	O	O
would	O	O
question	O	O
the	O	O
general	O	O
practicability	O	O
of	O	O
this	O	O
.	O	O
Short	O	O
version	O	O
:	O	O
#	O	O
li	O	O
Option	O	O
1	O	O
can	O	O
only	O	O
be	O	O
used	O	O
with	O	O
objects	O	O
within	O	O
a	O	O
single	O	O
session	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
can	O	O
,	O	O
use	O	O
Option	O	O
2	O	O
.	O	O
(	O	O
Assign	O	O
PK	O	O
as	O	O
early	O	O
as	O	O
possible	O	O
,	O	O
because	O	O
you	O	O
can	O	O
'	O	O
t	O	O
use	O	O
the	O	O
objects	O	O
in	O	O
sets	O	O
until	O	O
the	O	O
PK	O	O
is	O	O
assigned	O	O
.	O	O
)	O	O
#	O	O
li	O	O
If	O	O
you	O	O
can	O	O
guarantee	O	O
relative	O	O
stability	O	O
,	O	O
you	O	O
can	O	O
use	O	O
Option	O	O
3	O	O
.	O	O
But	O	O
be	O	O
careful	O	O
with	O	O
this	O	O
.	O	O
Question	O	O
-	O	O
5175728	O	O
,	O	O
answer	O	O
-	O	O
5175771	O	O
Have	O	O
a	O	O
look	O	O
at	O	O
the	O	O
Date	B-api_mention	B-api_mention
class	O	O
.	O	O
There	O	O
'	O	O
s	O	O
also	O	O
the	O	O
newer	O	O
Calendar	O	B-api_mention
class	O	O
which	O	O
is	O	O
the	O	O
preferred	O	O
method	O	O
of	O	O
doing	O	O
many	O	O
date	O	O
/	O	O
time	O	O
operations	O	O
(	O	O
a	O	O
lot	O	O
of	O	O
the	O	O
methods	O	O
on	O	O
Date	B-api_mention	B-api_mention
have	O	O
been	O	O
deprecated	O	O
.	O	O
)	O	O
If	O	O
you	O	O
just	O	O
want	O	O
the	O	O
current	O	O
date	O	O
,	O	O
then	O	O
either	O	O
create	O	O
a	O	O
new	O	O
Date	B-api_mention	B-api_mention
object	O	O
or	O	O
call	O	O
Calendar	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
Question	O	O
-	O	O
31696485	O	O
,	O	O
answer	O	O
-	O	O
31696584	O	O
Your	O	O
question	O	O
is	O	O
based	O	O
on	O	O
assumption	O	O
that	O	O
the	O	O
code	O	O
which	O	O
may	O	O
throw	O	O
NullPointerException	B-api_mention	B-api_mention
is	O	O
worse	O	O
than	O	O
the	O	O
code	O	O
which	O	O
may	O	O
not	O	O
.	O	O
This	O	O
assumption	O	O
is	O	O
wrong	O	O
.	O	O
If	O	O
you	O	O
expect	O	O
that	O	O
your	O	O
foobar	O	O
is	O	O
never	O	O
null	O	O
due	O	O
to	O	O
the	O	O
program	O	O
logic	O	O
,	O	O
it	O	O
'	O	O
s	O	O
much	O	O
better	O	O
to	O	O
use	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
you	O	O
will	O	O
see	O	O
a	O	O
NullPointerException	B-api_mention	B-api_mention
which	O	O
will	O	O
indicate	O	O
that	O	O
your	O	O
program	O	O
has	O	O
a	O	O
bug	O	O
.	O	O
If	O	O
you	O	O
use	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofNullable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
the	O	O
foobar	O	O
happens	O	O
to	O	O
be	O	O
null	O	O
due	O	O
to	O	O
the	O	O
bug	O	O
,	O	O
then	O	O
your	O	O
program	O	O
will	O	O
silently	O	O
continue	O	O
working	O	O
incorrectly	O	O
,	O	O
which	O	O
may	O	O
be	O	O
a	O	O
bigger	O	O
disaster	O	O
.	O	O
This	O	O
way	O	O
an	O	O
error	O	O
may	O	O
occur	O	O
much	O	O
later	O	O
and	O	O
it	O	O
would	O	O
be	O	O
much	O	O
harder	O	O
to	O	O
understand	O	O
at	O	O
which	O	O
point	O	O
it	O	O
went	O	O
wrong	O	O
.	O	O
Question	O	O
-	O	O
24649842	O	O
What	O	O
'	O	O
s	O	O
the	O	O
main	O	O
difference	O	O
between	O	O
scheduleAtFixedRate	B-api_mention	B-api_mention
and	O	O
scheduleWithFixedDelay	B-api_mention	O
methods	O	O
of	O	O
ScheduledExecutorService	B-api_mention	B-api_mention
?	O	O
#	O	O
pre	O	O
they	O	O
print	O	O
exact	O	O
the	O	O
same	O	O
time	O	O
,	O	O
seems	O	O
they	O	O
are	O	O
executed	O	O
at	O	O
exact	O	O
the	O	O
same	O	O
interval	O	O
.	O	O
Question	O	O
-	O	O
22561614	O	O
,	O	O
answer	O	O
-	O	O
22561853	O	O
Let	O	O
me	O	O
explain	O	O
what	O	O
is	O	O
happening	O	O
here	O	O
,	O	O
because	O	O
it	O	O
isn	O	O
'	O	O
t	O	O
obvious	O	O
!	O	O
First	O	O
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
accepts	O	O
an	O	O
instance	O	O
of	O	O
Comparator	B-api_mention	B-api_mention
so	O	O
that	O	O
items	O	O
in	O	O
the	O	O
stream	O	O
can	O	O
be	O	O
compared	O	O
against	O	O
each	O	O
other	O	O
to	O	O
find	O	O
the	O	O
minimum	O	O
or	O	O
maximum	O	O
,	O	O
in	O	O
some	O	O
optimal	O	O
order	O	O
that	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
worry	O	O
too	O	O
much	O	O
about	O	O
.	O	O
So	O	O
the	O	O
question	O	O
is	O	O
,	O	O
of	O	O
course	O	O
,	O	O
why	O	O
is	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
accepted	O	O
?	O	O
After	O	O
all	O	O
it	O	O
'	O	O
s	O	O
not	O	O
a	O	O
comparator	O	O
!	O	O
The	O	O
answer	O	O
is	O	O
in	O	O
the	O	O
way	O	O
that	O	O
the	O	O
new	O	O
lambda	O	O
functionality	O	O
works	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
It	O	O
relies	O	O
on	O	O
a	O	O
concept	O	O
which	O	O
is	O	O
informally	O	O
known	O	O
as	O	O
"	O	O
single	O	O
abstract	O	O
method	O	O
"	O	O
interfaces	O	O
,	O	O
or	O	O
"	O	O
SAM	O	O
"	O	O
interfaces	O	O
.	O	O
The	O	O
idea	O	O
is	O	O
that	O	O
any	O	O
interface	O	O
with	O	O
one	O	O
abstract	O	O
method	O	O
can	O	O
be	O	O
automatically	O	O
implemented	O	O
by	O	O
any	O	O
lambda	O	O
-	O	O
or	O	O
method	O	O
reference	O	O
-	O	O
whose	O	O
method	O	O
signature	O	O
is	O	O
a	O	O
match	O	O
for	O	O
the	O	O
one	O	O
method	O	O
on	O	O
the	O	O
interface	O	O
.	O	O
So	O	O
examining	O	O
the	O	O
Comparator	B-api_mention	B-api_mention
interface	O	O
(	O	O
simple	O	O
version	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
a	O	O
method	O	O
is	O	O
looking	O	O
for	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
then	O	O
it	O	O
'	O	O
s	O	O
essentially	O	O
looking	O	O
for	O	O
this	O	O
signature	O	O
:	O	O
int	O	O
xxx	O	O
(	O	O
args	O	O
)	O	O
;	O	O
I	O	O
use	O	O
"	O	O
xxx	O	O
"	O	O
because	O	O
the	O	O
method	O	O
name	O	O
is	O	O
not	O	O
used	O	O
for	O	O
matching	O	O
purposes	O	O
.	O	O
Therefore	O	O
,	O	O
both	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
close	O	O
enough	O	O
that	O	O
autoboxing	O	O
will	O	O
allow	O	O
this	O	O
to	O	O
appear	O	O
as	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
in	O	O
a	O	O
method	O	O
context	O	O
.	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
25757711	O	O
ArrayList	B-api_mention	B-api_mention
shrinks	O	O
or	O	O
expands	O	O
dynamically	O	O
.	O	O
This	O	O
is	O	O
a	O	O
effective	O	O
but	O	O
costly	O	O
operation	O	O
,	O	O
if	O	O
you	O	O
know	O	O
size	O	O
of	O	O
your	O	O
array	O	O
will	O	O
be	O	O
fixed	O	O
then	O	O
its	O	O
better	O	O
to	O	O
mention	O	O
the	O	O
size	O	O
of	O	O
the	O	O
array	O	O
,	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
,	O	O
new	O	O
array	O	O
will	O	O
be	O	O
created	O	O
at	O	O
each	O	O
insertion	O	O
and	O	O
reallocation	O	O
will	O	O
be	O	O
done	O	O
for	O	O
each	O	O
element	O	O
.	O	O
this	O	O
will	O	O
cost	O	O
you	O	O
.	O	O
ensureCapacity	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
this	O	O
method	O	O
help	O	O
to	O	O
avoid	O	O
reallocations	O	O
and	O	O
helps	O	O
increase	O	O
size	O	O
of	O	O
arraylist	O	O
.	O	B-api_mention
trimToSize	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
this	O	O
is	O	O
reverse	O	O
used	O	O
to	O	O
shrink	O	O
size	O	O
Arraylist	B-api_mention	B-api_mention
has	O	O
3	O	O
constructors	O	O
:	O	O
#	O	O
li	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
builds	O	O
empty	O	O
ArrayList	B-api_mention	B-api_mention
#	O	O
li	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
Collection	I-api_mention	I-api_mention
c	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
builds	O	O
a	O	O
ArrayList	B-api_mention	B-api_mention
initialized	O	O
with	O	O
elements	O	O
of	O	O
collection	O	O
c	O	O
.	O	O
#	O	O
li	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
capacity	I-api_mention	I-api_mention
)	I-api_mention	O
-	O	O
builds	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
with	O	O
specified	O	O
initial	O	O
capacity	O	O
.	O	O
Question	O	O
-	O	O
28770822	O	O
I	O	O
understand	O	O
the	O	O
use	O	O
of	O	O
the	O	O
@	O	O
Native	O	O
annotation	O	O
.	O	O
#	O	O
blockquote	O	O
However	O	O
,	O	O
while	O	O
reading	O	O
the	O	O
java	O	O
source	O	O
code	O	O
I	O	O
noticed	O	O
that	O	O
in	O	O
the	O	O
class	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
the	O	O
SIZE	O	O
constant	O	O
is	O	O
@	O	O
Native	O	O
while	O	O
it	O	O
is	O	O
not	O	O
for	O	O
the	O	O
Float	B-api_mention	B-api_mention
,	O	O
Byte	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
,	O	O
Short	B-api_mention	B-api_mention
and	O	O
Character	B-api_mention	B-api_mention
.	O	O
Note	O	O
that	O	O
the	O	O
SIZE	O	O
constant	O	O
represents	O	O
the	O	O
number	O	O
of	O	O
bits	O	O
used	O	O
to	O	O
represent	O	O
the	O	O
actual	O	O
value	O	O
.	O	O
#	O	O
pre	O	O
Edit	O	O
:	O	O
I	O	O
just	O	O
noticed	O	O
that	O	O
this	O	O
also	O	O
applies	O	O
for	O	O
MAX	O	O
_	O	O
VALUE	O	O
and	O	O
MIN	O	O
_	O	O
VALUE	O	O
of	O	O
the	O	O
same	O	O
classes	O	O
.	O	O
Edit	O	O
2	O	O
:	O	O
I	O	O
had	O	O
spare	O	O
time	O	O
to	O	O
do	O	O
some	O	O
research	O	O
on	O	O
this	O	O
,	O	O
and	O	O
looking	O	O
at	O	O
the	O	O
header	O	O
files	O	O
of	O	O
the	O	O
Long	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
etc	O	O
.	O	O
classes	O	O
I	O	O
had	O	O
hope	O	O
to	O	O
figure	O	O
out	O	O
that	O	O
the	O	O
constants	O	O
were	O	O
not	O	O
present	O	O
in	O	O
the	O	O
other	O	O
headers	O	O
,	O	O
but	O	O
unfortunately	O	O
they	O	O
are	O	O
.	O	O
#	O	O
pre	O	O
Why	O	O
is	O	O
the	O	O
SIZE	O	O
constant	O	O
only	O	O
@	O	O
Native	O	O
for	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
?	O	O
Question	O	O
-	O	O
21105403	O	O
I	O	O
'	O	O
ve	O	O
written	O	O
a	O	O
factory	O	O
to	O	O
produce	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Connection	I-api_mention	I-api_mention
objects	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
validate	O	O
the	O	O
parameters	O	O
passed	O	O
to	O	O
DriverManager	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getConnection	I-api_mention	I-api_mention
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
how	O	O
to	O	O
mock	O	O
a	O	O
static	O	O
method	O	O
.	O	O
I	O	O
'	O	O
m	O	O
using	O	O
JUnit	O	O
4	O	O
and	O	O
Mockito	B-api_mention	B-api_mention
for	O	O
my	O	O
test	O	O
cases	O	O
.	O	O
Is	O	O
there	O	O
a	O	O
good	O	O
way	O	O
to	O	O
mock	O	O
/	O	O
verify	O	O
this	O	O
specific	O	O
use	O	O
-	O	O
case	O	O
?	O	O
Question	O	O
-	O	O
27430092	O	O
,	O	O
answer	O	O
-	O	O
27449187	O	O
The	O	O
standard	O	O
use	O	O
case	O	O
for	O	O
BigInteger	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
in	O	O
cryptography	O	O
.	O	O
Specifically	O	O
,	O	O
certain	O	O
cryptographic	O	O
algorithms	O	O
,	O	O
such	O	O
as	O	O
RSA	O	O
,	O	O
require	O	O
randomly	O	O
chosen	O	O
large	O	O
primes	O	O
.	O	O
Importantly	O	O
,	O	O
however	O	O
,	O	O
these	O	O
algorithms	O	O
don	O	O
'	O	O
t	O	O
really	O	O
require	O	O
these	O	O
numbers	O	O
to	O	O
be	O	O
guaranteed	O	O
to	O	O
be	O	O
prime	O	O
	O	O
they	O	O
just	O	O
need	O	O
to	O	O
be	O	O
prime	O	O
with	O	O
a	O	O
very	O	O
high	O	O
probability	O	O
.	O	O
How	O	O
high	O	O
is	O	O
very	O	O
high	O	O
?	O	O
Well	O	O
,	O	O
in	O	O
a	O	O
crypto	O	O
application	O	O
,	O	O
one	O	O
would	O	O
typically	O	O
call	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
with	O	O
an	O	O
argument	O	O
somewhere	O	O
between	O	O
128	O	O
and	O	O
256	O	O
.	O	O
Thus	O	O
,	O	O
the	O	O
probability	O	O
of	O	O
a	O	O
non	O	O
-	O	O
prime	O	O
number	O	O
passing	O	O
such	O	O
a	O	O
test	O	O
is	O	O
less	O	O
than	O	O
one	O	O
in	O	O
2	O	O
128	O	O
or	O	O
2	O	O
256	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
put	O	O
that	O	O
in	O	O
perspective	O	O
:	O	O
if	O	O
you	O	O
had	O	O
10	O	O
billion	O	O
computers	O	O
,	O	O
each	O	O
generating	O	O
10	O	O
billion	O	O
probable	O	O
prime	O	O
numbers	O	O
per	O	O
second	O	O
(	O	O
which	O	O
would	O	O
mean	O	O
less	O	O
than	O	O
one	O	O
clock	O	O
cycle	O	O
per	O	O
number	O	O
on	O	O
any	O	O
modern	O	O
CPU	O	O
)	O	O
,	O	O
and	O	O
the	O	O
primality	O	O
of	O	O
those	O	O
numbers	O	O
was	O	O
tested	O	O
with	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
would	O	O
,	O	O
on	O	O
average	O	O
,	O	O
expect	O	O
one	O	O
non	O	O
-	O	O
prime	O	O
number	O	O
to	O	O
slip	O	O
in	O	O
once	O	O
in	O	O
every	O	O
100	O	O
billion	O	O
years	O	O
.	O	O
That	O	O
is	O	O
,	O	O
that	O	O
would	O	O
be	O	O
the	O	O
case	O	O
,	O	O
if	O	O
those	O	O
10	O	O
billion	O	O
computers	O	O
could	O	O
somehow	O	O
all	O	O
run	O	O
for	O	O
hundreds	O	O
of	O	O
billions	O	O
of	O	O
years	O	O
without	O	O
experiencing	O	O
any	O	O
hardware	O	O
failures	O	O
.	O	O
In	O	O
practice	O	O
,	O	O
though	O	O
,	O	O
it	O	O
'	O	O
s	O	O
a	O	O
lot	O	O
more	O	O
likely	O	O
for	O	O
a	O	O
random	O	O
cosmic	O	O
ray	O	O
to	O	O
strike	O	O
your	O	O
computer	O	O
at	O	O
just	O	O
the	O	O
right	O	O
time	O	O
and	O	O
place	O	O
to	O	O
flip	O	O
the	O	O
return	O	O
value	O	O
of	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
from	O	O
false	O	O
to	O	O
true	O	O
,	O	O
without	O	O
causing	O	O
any	O	O
other	O	O
detectable	O	O
effects	O	O
,	O	O
than	O	O
it	O	O
is	O	O
for	O	O
a	O	O
non	O	O
-	O	O
prime	O	O
number	O	O
to	O	O
actually	O	O
pass	O	O
the	O	O
probabilistic	O	O
primality	O	O
test	O	O
at	O	O
that	O	O
certainty	O	O
level	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
the	O	O
same	O	O
risk	O	O
of	O	O
random	O	O
cosmic	O	O
rays	O	O
and	O	O
other	O	O
hardware	O	O
faults	O	O
also	O	O
applies	O	O
to	O	O
deterministic	O	O
primality	O	O
tests	O	O
like	O	O
AKS	O	O
.	O	O
Thus	O	O
,	O	O
in	O	O
practice	O	O
,	O	O
even	O	O
these	O	O
tests	O	O
have	O	O
a	O	O
(	O	O
very	O	O
small	O	O
)	O	O
baseline	O	O
false	O	O
positive	O	O
rate	O	O
due	O	O
to	O	O
random	O	O
hardware	O	O
failures	O	O
(	O	O
not	O	O
to	O	O
mention	O	O
all	O	O
other	O	O
possible	O	O
sources	O	O
of	O	O
errors	O	O
,	O	O
such	O	O
as	O	O
implementation	O	O
bugs	O	O
)	O	O
.	O	O
Since	O	O
it	O	O
'	O	O
s	O	O
easy	O	O
to	O	O
push	O	O
the	O	O
intrinsic	O	O
false	O	O
positive	O	O
rate	O	O
of	O	O
the	O	O
Miller	O	O
	O	O
Rabin	O	O
primality	O	O
test	O	O
used	O	O
by	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
far	O	O
below	O	O
this	O	O
baseline	O	O
rate	O	O
,	O	O
simply	O	O
by	O	O
repeating	O	O
the	O	O
test	O	O
sufficiently	O	O
many	O	O
times	O	O
,	O	O
and	O	O
since	O	O
,	O	O
even	O	O
repeated	O	O
so	O	O
many	O	O
times	O	O
,	O	O
the	O	O
Miller	O	O
	O	O
Rabin	O	O
test	O	O
is	O	O
still	O	O
much	O	O
faster	O	O
in	O	O
practice	O	O
than	O	O
the	O	O
best	O	O
known	O	O
deterministic	O	O
primality	O	O
tests	O	O
like	O	O
AKS	O	O
,	O	O
it	O	O
remains	O	O
the	O	O
standard	O	O
primality	O	O
test	O	O
for	O	O
cryptographic	O	O
applications	O	O
.	O	O
(	O	O
Besides	O	O
,	O	O
even	O	O
if	O	O
you	O	O
happened	O	O
to	O	O
accidentally	O	O
select	O	O
a	O	O
strong	O	O
pseudoprime	O	O
as	O	O
one	O	O
of	O	O
the	O	O
factors	O	O
of	O	O
your	O	O
RSA	O	O
modulus	O	O
,	O	O
it	O	O
would	O	O
not	O	O
generally	O	O
lead	O	O
to	O	O
a	O	O
catastrophic	O	O
failure	O	O
.	O	O
Typically	O	O
,	O	O
such	O	O
pseudoprimes	O	O
would	O	O
be	O	O
products	O	O
of	O	O
two	O	O
(	O	O
or	O	O
rarely	O	O
more	O	O
)	O	O
primes	O	O
of	O	O
approximately	O	O
half	O	O
the	O	O
length	O	O
,	O	O
which	O	O
means	O	O
that	O	O
you	O	O
'	O	O
d	O	O
end	O	O
up	O	O
with	O	O
a	O	O
multi	O	O
-	O	O
prime	O	O
RSA	O	O
key	O	O
.	O	O
As	O	O
long	O	O
as	O	O
none	O	O
of	O	O
the	O	O
factors	O	O
were	O	O
too	O	O
small	O	O
(	O	O
and	O	O
if	O	O
they	O	O
were	O	O
,	O	O
the	O	O
primality	O	O
test	O	O
should	O	O
'	O	O
ve	O	O
caught	O	O
them	O	O
)	O	O
,	O	O
the	O	O
RSA	O	O
algorithm	O	O
will	O	O
still	O	O
work	O	O
just	O	O
fine	O	O
,	O	O
and	O	O
the	O	O
key	O	O
,	O	O
although	O	O
somewhat	O	O
weaker	O	O
against	O	O
certain	O	O
types	O	O
of	O	O
attacks	O	O
than	O	O
normal	O	O
RSA	O	O
keys	O	O
of	O	O
the	O	O
same	O	O
length	O	O
,	O	O
should	O	O
still	O	O
be	O	O
reasonably	O	O
secure	O	O
if	O	O
you	O	O
didn	O	O
'	O	O
t	O	O
needlessly	O	O
skimp	O	O
on	O	O
the	O	O
key	O	O
length	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
29328785	O	O
#	O	O
pre	O	O
Compile	O	O
>	O	O
javac	O	O
BigDecimalTest	O	B-api_mention
.	O	O
java	O	O
Execute	O	O
>	O	O
java	O	O
BigDecimalTest	O	O
Output	O	O
#	O	O
pre	O	O
The	O	O
value	O	O
of	O	O
z	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
output	O	O
is	O	O
correct	O	O
4	O	O
.	O	O
883242e	O	O
+	O	O
888	O	O
/	O	O
7	O	O
.	O	O
115109e	O	O
+	O	O
302	O	O
=	O	O
6	O	O
.	O	O
863200e	O	O
+	O	O
585	O	O
as	O	O
is	O	O
the	O	O
value	O	O
of	O	O
y	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
notice	O	O
that	O	O
the	O	O
value	O	O
given	O	O
for	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
completely	O	O
wrong	O	O
.	O	O
Why	O	O
is	O	O
this	O	O
?	O	O
Strangely	O	O
,	O	O
if	O	O
the	O	O
scale	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
desired	O	O
decimal	O	O
places	O	O
)	O	O
of	O	O
the	O	O
result	O	O
of	O	O
the	O	O
division	O	O
is	O	O
changed	O	O
BigDecimal	B-api_mention	B-api_mention
z	O	O
=	O	O
x	O	O
.	B-api_mention	B-api_mention
divide	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
then	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
produce	O	O
the	O	O
correct	O	O
value	O	O
for	O	O
x	O	O
.	O	O
Or	O	O
,	O	O
if	O	O
the	O	O
operands	O	O
are	O	O
swapped	O	O
BigDecimal	B-api_mention	B-api_mention
z	O	O
=	O	O
y	O	O
.	B-api_mention	B-api_mention
divide	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
then	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
also	O	O
then	O	O
produce	O	O
the	O	O
correct	O	O
value	O	O
.	O	O
Or	O	O
,	O	O
if	O	O
the	O	O
exponent	O	O
of	O	O
x	O	O
is	O	O
changed	O	O
from	O	O
e	O	O
+	O	O
888	O	O
to	O	O
e	O	O
.	O	O
g	O	O
.	O	O
e	O	O
+	O	O
878	O	O
then	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
correct	O	O
.	O	O
Or	O	O
,	O	O
if	O	O
another	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
is	O	O
added	O	O
above	O	O
the	O	O
divide	O	O
operation	O	O
,	O	O
then	O	O
both	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
calls	O	O
will	O	O
produce	O	O
the	O	O
correct	O	O
value	O	O
!	O	O
On	O	O
the	O	O
machine	O	O
I	O	O
'	O	O
m	O	O
testing	O	O
this	O	O
,	O	O
Windows	O	O
7	O	O
64	O	O
bit	O	O
,	O	O
the	O	O
behaviour	O	O
is	O	O
the	O	O
same	O	O
using	O	O
java	O	O
7	O	O
and	O	O
8	O	O
,	O	O
both	O	O
32bit	O	O
and	O	O
64	O	O
bit	O	O
versions	O	O
,	O	O
but	O	O
testing	O	O
online	O	O
at	O	O
#	O	O
a	O	O
produces	O	O
different	O	O
results	O	O
for	O	O
java	O	O
7	O	O
and	O	O
java	O	O
8	O	O
.	O	O
Using	O	O
java	O	O
7	O	O
,	O	O
the	O	O
value	O	O
of	O	O
x	O	O
is	O	O
given	O	O
correctly	O	O
:	O	O
#	O	O
a	O	O
,	O	O
but	O	O
using	O	O
java	O	O
8	O	O
its	O	O
value	O	O
is	O	O
incorrect	O	O
:	O	O
#	O	O
a	O	O
.	O	O
Also	O	O
,	O	O
this	O	O
behaviour	O	O
is	O	O
not	O	O
unique	O	O
to	O	O
this	O	O
particular	O	O
value	O	O
of	O	O
x	O	O
,	O	O
as	O	O
calling	O	O
toString	B-api_mention	O
on	O	O
other	O	O
BigDecimals	O	B-api_mention
with	O	O
more	O	O
than	O	O
about	O	O
1500	O	O
digits	O	O
after	O	O
passing	O	O
them	O	O
as	O	O
the	O	O
first	O	O
operand	O	O
to	O	O
a	O	O
divide	O	O
operation	O	O
will	O	O
also	O	O
produce	O	O
incorrect	O	O
values	O	O
.	O	O
What	O	O
is	O	O
the	O	O
explanation	O	O
for	O	O
this	O	O
?	O	O
The	O	O
divide	O	O
operation	O	O
seems	O	O
to	O	O
be	O	O
mutating	O	O
the	O	O
value	O	O
produced	O	O
by	O	O
subsequent	O	O
toString	B-api_mention	B-api_mention
calls	O	O
on	O	O
its	O	O
operands	O	O
.	O	O
Does	O	O
this	O	O
happen	O	O
on	O	O
your	O	O
platform	O	O
?	O	O
Edit	O	O
:	O	O
The	O	O
issue	O	O
seems	O	O
to	O	O
be	O	O
with	O	O
the	O	O
java	O	O
8	O	O
runtime	O	O
only	O	O
,	O	O
as	O	O
the	O	O
above	O	O
program	O	O
compiled	O	O
with	O	O
java	O	O
7	O	O
produces	O	O
correct	O	O
output	O	O
when	O	O
executed	O	O
with	O	O
the	O	O
java	O	O
7	O	O
runtime	O	O
,	O	O
but	O	O
incorrect	O	O
output	O	O
when	O	O
executed	O	O
with	O	O
the	O	O
java	O	O
8	O	O
runtime	O	O
.	O	O
Edit	O	O
:	O	O
I	O	O
'	O	O
ve	O	O
tested	O	O
with	O	O
the	O	O
early	O	O
access	O	O
jre1	O	O
.	O	O
8	O	O
.	O	O
0	O	O
_	O	O
60	O	O
and	O	O
the	O	O
bug	O	O
does	O	O
not	O	O
appear	O	O
,	O	O
and	O	O
according	O	O
to	O	O
Marco13	O	O
'	O	O
s	O	O
answer	O	O
it	O	O
was	O	O
fixed	O	O
in	O	O
build	O	O
51	O	O
.	O	O
The	O	O
Oracle	O	O
JDK	O	O
8	O	O
product	O	O
binaries	O	O
are	O	O
only	O	O
at	O	O
update	O	O
40	O	O
though	O	O
so	O	O
it	O	O
may	O	O
be	O	O
some	O	O
time	O	O
before	O	O
the	O	O
fixed	O	O
versions	O	O
are	O	O
widely	O	O
used	O	O
.	O	O
Question	O	O
-	O	O
30727515	O	O
,	O	O
answer	O	O
-	O	O
30739477	O	O
Since	O	O
this	O	O
hasn	O	O
	O	O
t	O	O
addressed	O	O
yet	O	O
,	O	O
here	O	O
an	O	O
explanation	O	O
,	O	O
why	O	O
the	O	O
translation	O	O
of	O	O
Unicode	O	O
escapes	O	O
happens	O	O
before	O	O
any	O	O
other	O	O
source	O	O
code	O	O
processing	O	O
:	O	O
The	O	O
idea	O	O
behind	O	O
it	O	O
was	O	O
that	O	O
it	O	O
allows	O	O
lossless	O	O
translations	O	O
of	O	O
Java	O	O
source	O	O
code	O	O
between	O	O
different	O	O
character	O	O
encodings	O	O
.	O	O
Today	O	O
,	O	O
there	O	O
is	O	O
widespread	O	O
Unicode	O	O
support	O	O
,	O	O
and	O	O
this	O	O
doesn	O	O
	O	O
t	O	O
look	O	O
like	O	O
a	O	O
problem	O	O
,	O	O
but	O	O
back	O	O
then	O	O
it	O	O
wasn	O	O
	O	O
t	O	O
easy	O	O
for	O	O
a	O	O
developer	O	O
from	O	O
a	O	O
western	O	O
country	O	O
to	O	O
receive	O	O
some	O	O
source	O	O
code	O	O
from	O	O
his	O	O
Asian	O	O
colleague	O	O
containing	O	O
Asian	O	O
characters	O	O
,	O	O
make	O	O
some	O	O
changes	O	O
(	O	O
including	O	O
compiling	O	O
and	O	O
testing	O	O
it	O	O
)	O	O
and	O	O
sending	O	O
the	O	O
result	O	O
back	O	O
,	O	O
all	O	O
without	O	O
damaging	O	O
something	O	O
.	O	O
So	O	O
,	O	O
Java	O	O
source	O	O
code	O	O
can	O	O
be	O	O
written	O	O
in	O	O
any	O	O
encoding	O	O
and	O	O
allows	O	O
a	O	O
wide	O	O
range	O	O
of	O	O
characters	O	O
within	O	O
identifiers	O	O
,	O	O
character	O	O
and	O	O
String	B-api_mention	B-api_mention
literals	O	O
and	O	O
comments	O	O
.	O	O
Then	O	O
,	O	O
in	O	O
order	O	O
to	O	O
transfer	O	O
it	O	O
losslessly	O	O
,	O	O
all	O	O
characters	O	O
not	O	O
supported	O	O
by	O	O
the	O	O
target	O	O
encoding	O	O
are	O	O
replaced	O	O
by	O	O
their	O	O
Unicode	O	O
escapes	O	O
.	O	O
This	O	O
is	O	O
a	O	O
reversible	O	O
process	O	O
and	O	O
the	O	O
interesting	O	O
point	O	O
is	O	O
that	O	O
the	O	O
translation	O	O
can	O	O
be	O	O
done	O	O
by	O	O
a	O	O
tool	O	O
which	O	O
doesn	O	O
	O	O
t	O	O
need	O	O
to	O	O
know	O	O
anything	O	O
about	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
syntax	O	O
as	O	O
the	O	O
translation	O	O
rule	O	O
is	O	O
not	O	O
dependent	O	O
on	O	O
it	O	O
.	O	O
This	O	O
works	O	O
as	O	O
the	O	O
translation	O	O
to	O	O
their	O	O
actual	O	O
Unicode	O	O
characters	O	O
inside	O	O
the	O	O
compiler	O	O
happens	O	O
independently	O	O
to	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
syntax	O	O
as	O	O
well	O	O
.	O	O
It	O	O
implies	O	O
that	O	O
you	O	O
can	O	O
perform	O	O
an	O	O
arbitrary	O	O
number	O	O
of	O	O
translation	O	O
steps	O	O
in	O	O
both	O	O
directions	O	O
without	O	O
ever	O	O
changing	O	O
the	O	O
meaning	O	O
of	O	O
the	O	O
source	O	O
code	O	O
.	O	O
This	O	O
is	O	O
the	O	O
reason	O	O
for	O	O
another	O	O
weird	O	O
feature	O	O
which	O	O
hasn	O	O
	O	O
t	O	O
even	O	O
mentioned	O	O
:	O	O
the	O	O
\	O	O
uuuuuuxxxx	O	O
syntax	O	O
:	O	O
When	O	O
a	O	O
translation	O	O
tool	O	O
is	O	O
escaping	O	O
characters	O	O
and	O	O
encounters	O	O
a	O	O
sequence	O	O
that	O	O
is	O	O
already	O	O
an	O	O
escaped	O	O
sequence	O	O
,	O	O
it	O	O
should	O	O
insert	O	O
an	O	O
additional	O	O
u	O	O
into	O	O
the	O	O
sequence	O	O
,	O	O
converting	O	O
\	O	O
ucafe	O	O
to	O	O
\	O	O
uucafe	O	O
.	O	O
The	O	O
meaning	O	O
doesn	O	O
	O	O
t	O	O
change	O	O
,	O	O
but	O	O
when	O	O
converting	O	O
into	O	O
the	O	O
other	O	O
direction	O	O
,	O	O
the	O	O
tool	O	O
should	O	O
just	O	O
remove	O	O
one	O	O
u	O	O
and	O	O
replace	O	O
only	O	O
sequences	O	O
containing	O	O
a	O	O
single	O	O
u	O	O
by	O	O
their	O	O
Unicode	O	O
characters	O	O
.	O	O
That	O	O
way	O	O
,	O	O
even	O	O
Unicode	O	O
escapes	O	O
are	O	O
retained	O	O
in	O	O
their	O	O
original	O	O
form	O	O
when	O	O
converting	O	O
back	O	O
and	O	O
forth	O	O
.	O	O
I	O	O
guess	O	O
,	O	O
no	O	O
-	O	O
one	O	O
ever	O	O
used	O	O
that	O	O
feature	O	O
	O	O
Question	O	O
-	O	O
20945049	O	O
We	O	O
all	O	O
know	O	O
that	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
in	O	O
Java	O	O
,	O	O
but	O	O
check	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Why	O	O
does	O	O
this	O	O
program	O	O
operate	O	O
like	O	O
this	O	O
?	O	O
And	O	O
why	O	O
is	O	O
the	O	O
value	O	O
of	O	O
s1	O	O
and	O	O
s2	O	O
changed	O	O
,	O	O
but	O	O
not	O	O
s3	O	O
?	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
39005452	O	O
The	O	O
best	O	O
post	O	O
I	O	O
'	O	O
ve	O	O
seen	O	O
on	O	O
the	O	O
topic	O	O
was	O	O
written	O	O
by	O	O
Daniel	O	O
Olszewski	O	O
and	O	O
can	O	O
be	O	O
found	O	O
at	O	O
#	O	O
a	O	O
.	O	O
While	O	O
others	O	O
mention	O	O
when	O	O
you	O	O
should	O	O
or	O	O
should	O	O
not	O	O
use	O	O
Optional	B-api_mention	B-api_mention
,	O	O
this	O	O
post	O	O
actually	O	O
explains	O	O
why	O	O
.	O	O
Cross	O	O
-	O	O
posting	O	O
here	O	O
in	O	O
case	O	O
the	O	O
link	O	O
goes	O	O
down	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
26159918	O	O
invoke	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
executing	O	O
on	O	O
the	O	O
calling	O	O
thread	O	O
,	O	O
like	O	O
any	O	O
other	O	O
method	O	O
call	O	O
.	O	O
whereas	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
a	O	O
new	O	O
thread	O	O
.	O	O
invoking	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
programmatic	O	O
bug	O	O
.	O	O
Question	O	O
-	O	O
10066590	O	O
With	O	O
Mockito	O	O
,	O	O
I	O	O
want	O	O
to	O	O
verify	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
a	O	O
method	O	O
call	O	O
with	O	O
byte	O	O
[	O	O
]	O	O
in	O	O
its	O	O
argument	O	O
list	O	O
,	O	O
but	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
find	O	O
how	O	O
to	O	O
write	O	O
this	O	O
.	O	B-api_mention
myMethod	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
I	O	O
just	O	O
want	O	O
something	O	O
like	O	O
anyByteArray	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
how	O	O
to	O	O
do	O	O
that	O	O
with	O	O
Mockito	O	B-api_mention
?	O	O
Question	O	O
-	O	O
5031614	O	O
,	O	O
answer	O	O
-	O	O
26826084	O	O
#	O	O
li	O	O
If	O	O
you	O	O
have	O	O
a	O	O
business	O	O
key	O	O
,	O	O
then	O	O
you	O	O
should	O	O
use	O	O
that	O	O
for	O	O
equals	B-api_mention	O
/	O	O
hashCode	B-api_mention	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
a	O	O
business	O	O
key	O	O
,	O	O
you	O	O
should	O	O
not	O	O
leave	O	O
it	O	O
with	O	O
the	O	O
default	O	O
Object	B-api_mention	B-api_mention
equals	I-api_mention	O
and	O	O
hashCode	B-api_mention	O
implementations	O	O
because	O	O
that	O	O
does	O	O
not	O	O
work	O	O
after	O	O
you	O	O
merge	O	O
and	O	O
entity	O	O
.	O	O
#	O	O
li	O	O
You	O	O
can	O	O
use	O	O
the	O	O
entity	O	O
identifier	O	O
as	O	O
suggested	O	O
in	O	O
this	O	O
post	O	O
.	O	O
The	O	O
only	O	O
catch	O	O
is	O	O
that	O	O
you	O	O
need	O	O
to	O	O
use	O	O
a	O	O
hashCode	B-api_mention	B-api_mention
implementation	O	O
that	O	O
always	O	O
return	O	O
the	O	O
same	O	O
value	O	O
,	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6667243	O	O
,	O	O
answer	O	O
-	O	O
6667310	O	O
You	O	O
can	O	O
use	O	O
Mode	O	O
.	O	O
mode1	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
however	O	O
you	O	O
often	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
do	O	O
this	O	O
.	O	O
Mode	O	O
mode	O	O
=	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
30888581	O	O
,	O	O
answer	O	O
-	O	O
30897102	O	O
Once	O	O
given	O	O
more	O	O
thought	O	O
In	O	O
hindsight	O	O
it	O	O
sounds	O	O
like	O	O
they	O	O
were	O	O
looking	O	O
for	O	O
the	O	O
execute	O	O
around	O	O
pattern	O	O
.	O	O
They	O	O
'	O	O
re	O	O
usually	O	O
used	O	O
to	O	O
do	O	O
things	O	O
like	O	O
enforce	O	O
closing	O	O
of	O	O
streams	O	O
.	O	O
This	O	O
is	O	O
also	O	O
more	O	O
relevant	O	O
due	O	O
to	O	O
this	O	O
line	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
idea	O	O
is	O	O
you	O	O
give	O	O
the	O	O
thing	O	O
that	O	O
does	O	O
the	O	O
"	O	O
executing	O	O
around	O	O
"	O	O
some	O	O
class	O	O
to	O	O
do	O	O
somethings	O	O
with	O	O
.	O	O
You	O	O
'	O	O
ll	O	O
probably	O	O
use	O	O
Runnable	B-api_mention	B-api_mention
but	O	O
it	O	O
'	O	O
s	O	O
not	O	O
necessary	O	O
.	O	O
(	O	O
Runnable	B-api_mention	B-api_mention
makes	O	O
the	O	O
most	O	O
sense	O	O
and	O	O
you	O	O
'	O	O
ll	O	O
see	O	O
why	O	O
soon	O	O
.	O	O
)	O	O
In	O	O
your	O	O
StopWatch	O	O
class	O	O
add	O	O
some	O	O
method	O	O
like	O	O
this	O	O
#	O	O
pre	O	O
You	O	O
would	O	O
then	O	O
call	O	O
it	O	O
like	O	O
this	O	O
#	O	O
pre	O	O
This	O	O
makes	O	O
it	O	O
fool	O	O
proof	O	O
.	O	O
You	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
worry	O	O
about	O	O
handling	O	O
stop	O	O
before	O	O
start	O	O
or	O	O
people	O	O
forgetting	O	O
to	O	O
call	O	O
one	O	O
and	O	O
not	O	O
the	O	O
other	O	O
,	O	O
etc	O	O
.	O	O
The	O	O
reason	O	O
Runnable	B-api_mention	B-api_mention
is	O	O
nice	O	O
is	O	O
because	O	O
#	O	O
li	O	O
Standard	O	O
java	O	O
class	O	O
,	O	O
not	O	O
your	O	O
own	O	O
or	O	O
third	O	O
party	O	O
#	O	O
li	O	O
End	O	O
users	O	O
can	O	O
put	O	O
whatever	O	O
they	O	O
need	O	O
in	O	O
the	O	O
Runnable	B-api_mention	B-api_mention
to	O	O
be	O	O
done	O	O
.	O	O
(	O	O
If	O	O
you	O	O
were	O	O
using	O	O
it	O	O
to	O	O
enforce	O	O
stream	O	O
closing	O	O
then	O	O
you	O	O
could	O	O
put	O	O
the	O	O
actions	O	O
that	O	O
need	O	O
to	O	O
be	O	O
done	O	O
with	O	O
a	O	O
database	O	O
connection	O	O
inside	O	O
so	O	O
the	O	O
end	O	O
user	O	O
doesn	O	O
'	O	O
t	O	O
need	O	O
to	O	O
worry	O	O
about	O	O
how	O	O
to	O	O
open	O	O
and	O	O
close	O	O
it	O	O
and	O	O
you	O	O
simultaneously	O	O
force	O	O
them	O	O
to	O	O
close	O	O
it	O	O
properly	O	O
.	O	O
)	O	O
If	O	O
you	O	O
wanted	O	O
,	O	O
you	O	O
could	O	O
make	O	O
some	O	O
StopWatchWrapper	O	B-api_mention
instead	O	O
leave	O	O
StopWatch	O	O
unmodified	O	O
.	O	O
You	O	O
could	O	O
also	O	O
make	O	O
measureAction	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
not	O	O
return	O	O
a	O	O
time	O	O
and	O	O
make	O	O
getTime	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
public	O	O
instead	O	O
.	O	O
The	O	O
Java	O	O
8	O	O
way	O	O
to	O	O
calling	O	O
it	O	O
is	O	O
even	O	O
simpler	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
Original	O	O
answer	O	O
#	O	O
blockquote	O	O
To	O	O
me	O	O
something	O	O
like	O	O
this	O	O
seems	O	O
to	O	O
be	O	O
good	O	O
.	O	O
#	O	O
pre	O	O
The	O	O
reason	O	O
I	O	O
believe	O	O
this	O	O
to	O	O
be	O	O
good	O	O
is	O	O
the	O	O
recording	O	O
is	O	O
during	O	O
object	O	O
creation	O	O
so	O	O
it	O	O
can	O	O
'	O	O
t	O	O
be	O	O
forgotten	O	O
or	O	O
done	O	O
out	O	O
of	O	O
order	O	O
(	O	O
can	O	O
'	O	O
t	O	O
call	O	O
stop	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
if	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
)	O	O
.	O	O
One	O	O
flaw	O	O
is	O	O
probably	O	O
the	O	O
naming	O	O
of	O	O
stop	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	O
At	O	O
first	O	O
I	O	O
thought	O	O
maybe	O	O
lap	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
but	O	O
that	O	O
usually	O	O
implies	O	O
a	O	O
restarting	O	O
or	O	O
some	O	O
sort	O	O
(	O	O
or	O	O
at	O	O
least	O	O
recording	O	O
since	O	O
last	O	O
lap	O	O
/	O	O
start	O	O
)	O	O
.	O	O
Perhaps	O	O
read	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
would	O	O
be	O	O
better	O	O
?	O	O
This	O	O
mimics	O	O
the	O	O
action	O	O
of	O	O
looking	O	O
at	O	O
the	O	O
time	O	O
on	O	O
a	O	O
stop	O	O
watch	O	O
.	O	O
I	O	O
chose	O	O
stop	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
to	O	O
keep	O	O
it	O	O
similar	O	O
to	O	O
the	O	O
original	O	O
class	O	O
.	O	O
The	O	O
only	O	O
thing	O	O
I	O	O
'	O	O
m	O	O
not	O	O
100	O	O
%	O	O
sure	O	O
about	O	O
is	O	O
how	O	O
to	O	O
get	O	O
the	O	O
time	O	O
.	O	O
To	O	O
be	O	O
honest	O	O
that	O	O
seems	O	O
to	O	O
be	O	O
a	O	O
more	O	O
minor	O	O
detail	O	O
.	O	O
As	O	O
long	O	O
as	O	O
both	O	O
.	O	O
.	O	O
.	O	O
in	O	O
the	O	O
above	O	O
code	O	O
obtain	O	O
current	O	O
time	O	O
the	O	O
same	O	O
way	O	O
it	O	O
should	O	O
be	O	O
fine	O	O
.	O	O
Question	O	O
-	O	O
9297899	O	O
,	O	O
answer	O	O
-	O	O
25816501	O	O
Even	O	O
though	O	O
this	O	O
is	O	O
not	O	O
a	O	O
direct	O	O
answer	O	O
to	O	O
the	O	O
question	O	O
,	O	O
it	O	O
is	O	O
an	O	O
addition	O	O
to	O	O
the	O	O
.	B-api_mention	O
length	I-api_mention	O
vs	O	O
.	B-api_mention	B-api_mention
size	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
argument	O	O
.	O	O
I	O	O
was	O	O
researching	O	O
something	O	O
related	O	O
to	O	O
this	O	O
question	O	O
so	O	O
when	O	O
I	O	O
came	O	O
across	O	O
it	O	O
I	O	O
noticed	O	O
that	O	O
the	O	O
definition	O	O
(	O	O
s	O	O
)	O	O
provided	O	O
here	O	O
#	O	O
blockquote	O	O
is	O	O
not	O	O
"	O	O
exactly	O	O
"	O	O
correct	O	O
.	O	O
The	O	O
field	O	O
length	O	O
contains	O	O
the	O	O
number	O	O
of	O	O
available	O	O
places	O	O
to	O	O
put	O	O
a	O	O
component	O	O
,	O	O
not	O	O
the	O	O
number	O	O
of	O	O
components	O	O
present	O	O
in	O	O
the	O	O
array	O	O
.	O	O
So	O	O
it	O	O
represents	O	O
the	O	O
total	O	O
available	O	O
memory	O	O
allocated	O	O
to	O	O
that	O	O
array	O	O
,	O	O
not	O	O
how	O	O
much	O	O
of	O	O
that	O	O
memory	O	O
is	O	O
filled	O	O
.	O	O
#	O	O
img	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
the	O	O
.	O	B-api_mention
size	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
property	O	O
of	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
does	O	O
give	O	O
the	O	O
number	O	O
of	O	O
elements	O	O
in	O	O
the	O	O
list	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
9481865	O	O
,	O	O
answer	O	O
-	O	O
33093380	O	O
You	O	O
may	O	O
try	O	O
isReachable	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
InetAddress	O	B-api_mention
class	O	O
to	O	O
figure	O	O
out	O	O
which	O	O
IP	O	O
address	O	O
is	O	O
your	O	O
real	O	O
publicly	O	O
available	O	O
IP	O	O
address	O	O
.	O	O
I	O	O
think	O	O
other	O	O
type	O	O
of	O	O
addresses	O	O
(	O	O
site	O	O
local	O	O
,	O	O
link	O	O
local	O	O
)	O	O
are	O	O
not	O	O
reachable	O	O
from	O	O
outside	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8172420	O	O
,	O	O
answer	O	O
-	O	O
15633542	O	O
Nice	O	O
question	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
got	O	O
of	O	O
the	O	O
following	O	O
five	O	O
6	O	O
methods	O	O
to	O	O
do	O	O
it	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
invokes	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
in	O	O
turn	O	O
sets	O	O
the	O	O
value	O	O
char	O	O
array	O	O
.	O	O
#	O	O
pre	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
invokes	O	O
the	O	O
following	O	O
package	O	O
private	O	O
constructor	O	O
.	O	O
#	O	O
pre	O	O
Source	O	O
code	O	O
from	O	O
String	B-api_mention	B-api_mention
.	O	O
java	O	O
in	O	O
Java	O	O
8	O	O
source	O	O
code	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Java	O	O
:	O	O
:	O	O
How	O	O
to	O	O
convert	O	O
primitive	O	O
char	O	O
to	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
#	O	O
li	O	O
How	O	O
to	O	O
convert	O	O
Char	B-api_mention	O
to	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
with	O	O
Example	O	O
Question	O	O
-	O	O
8894258	O	O
In	O	O
Java	O	O
,	O	O
what	O	O
would	O	O
the	O	O
fastest	O	O
way	O	O
to	O	O
iterate	O	O
over	O	O
all	O	O
the	O	O
chars	O	O
in	O	O
a	O	O
String	B-api_mention	B-api_mention
,	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Or	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
What	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
know	O	O
is	O	O
if	O	O
the	O	O
cost	O	O
of	O	O
repeatedly	O	O
calling	O	O
the	O	O
charAt	B-api_mention	B-api_mention
method	O	O
during	O	O
a	O	O
long	O	O
iteration	O	O
ends	O	O
up	O	O
being	O	O
either	O	O
less	O	O
than	O	O
or	O	O
greater	O	O
than	O	O
the	O	O
cost	O	O
of	O	O
performing	O	O
a	O	O
single	O	O
call	O	O
to	O	O
toCharArray	B-api_mention	O
at	O	O
the	O	O
beginning	O	O
and	O	O
then	O	O
directly	O	O
accessing	O	O
the	O	O
array	O	O
during	O	O
the	O	O
iteration	O	O
.	O	O
It	O	O
'	O	O
d	O	O
be	O	O
great	O	O
if	O	O
someone	O	O
could	O	O
provide	O	O
a	O	O
robust	O	O
benchmark	O	O
for	O	O
different	O	O
string	O	O
lengths	O	O
,	O	O
having	O	O
in	O	O
mind	O	O
JIT	O	O
warm	O	O
-	O	O
up	O	O
time	O	O
,	O	O
JVM	O	O
start	O	O
-	O	O
up	O	O
time	O	O
,	O	O
etc	O	O
.	O	O
and	O	O
not	O	O
just	O	O
the	O	O
difference	O	O
between	O	O
two	O	O
calls	O	O
to	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
20129762	O	O
,	O	O
answer	O	O
-	O	O
20130131	O	O
There	O	O
are	O	O
already	O	O
people	O	O
asked	O	O
the	O	O
same	O	O
on	O	O
the	O	O
mailing	O	O
list	O	O
?	O	O
.	O	O
The	O	O
main	O	O
reason	O	O
is	O	O
Iterable	B-api_mention	B-api_mention
also	O	O
has	O	O
a	O	O
re	O	O
-	O	O
iterable	O	O
semantic	O	O
,	O	O
while	O	O
Stream	B-api_mention	B-api_mention
is	O	O
not	O	O
.	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
12665271	O	O
Here	O	O
'	O	O
s	O	O
my	O	O
take	O	O
on	O	O
the	O	O
alternatives	O	O
:	O	O
1	O	O
)	O	O
#	O	O
pre	O	O
For	O	O
me	O	O
,	O	O
the	O	O
best	O	O
thing	O	O
coming	O	O
to	O	O
Java	O	O
from	O	O
traditional	O	O
C	O	O
+	O	O
+	O	O
15	O	O
years	O	O
ago	O	O
was	O	O
that	O	O
you	O	O
could	O	O
trust	O	O
your	O	O
program	O	O
.	O	O
Even	O	O
if	O	O
things	O	O
are	O	O
in	O	O
the	O	O
muck	O	O
and	O	O
going	O	O
wrong	O	O
,	O	O
which	O	O
they	O	O
often	O	O
do	O	O
,	O	O
I	O	O
want	O	O
the	O	O
rest	O	O
of	O	O
the	O	O
code	O	O
to	O	O
be	O	O
on	O	O
best	O	O
behaviour	O	O
and	O	O
smelling	O	O
of	O	O
roses	O	O
.	O	O
Indeed	O	O
,	O	O
the	O	O
BufferedWriter	B-api_mention	B-api_mention
might	O	O
throw	O	O
an	O	O
exception	O	O
here	O	O
.	O	O
Running	O	O
out	O	O
of	O	O
memory	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
unusual	O	O
,	O	O
for	O	O
instance	O	O
.	O	O
For	O	O
other	O	O
decorators	O	O
,	O	O
do	O	O
you	O	O
know	O	O
which	O	O
of	O	O
the	O	O
java	B-api_mention	O
.	I-api_mention	O
io	I-api_mention	O
wrapper	O	O
classes	O	O
throw	O	O
a	O	O
checked	O	O
exception	O	O
from	O	O
their	O	O
constructors	O	O
?	O	O
I	O	O
don	O	O
'	O	O
t	O	O
.	O	O
Doesn	O	O
'	O	O
t	O	O
do	O	O
code	O	O
understandability	O	O
much	O	O
good	O	O
if	O	O
you	O	O
rely	O	O
upon	O	O
that	O	O
sort	O	O
of	O	O
obscure	O	O
knowledge	O	O
.	O	O
Also	O	O
there	O	O
'	O	O
s	O	O
the	O	O
"	O	O
destruction	O	O
"	O	O
.	O	O
If	O	O
there	O	O
is	O	O
an	O	O
error	O	O
condition	O	O
,	O	O
then	O	O
you	O	O
probably	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
be	O	O
flushing	O	O
rubbish	O	O
to	O	O
a	O	O
file	O	O
that	O	O
needs	O	O
deleting	O	O
(	O	O
code	O	O
for	O	O
that	O	O
not	O	O
shown	O	O
)	O	O
.	O	O
Although	O	O
,	O	O
of	O	O
course	O	O
,	O	O
deleting	O	O
the	O	O
file	O	O
is	O	O
also	O	O
another	O	O
interesting	O	O
operation	O	O
to	O	O
do	O	O
as	O	O
error	O	O
handling	O	O
.	O	O
Generally	O	O
you	O	O
want	O	O
finally	O	O
blocks	O	O
to	O	O
be	O	O
as	O	O
short	O	O
and	O	O
reliable	O	O
as	O	O
possible	O	O
.	O	O
Adding	O	O
flushes	O	O
does	O	O
not	O	O
help	O	O
this	O	O
goal	O	O
.	O	O
For	O	O
many	O	O
releases	O	O
some	O	O
of	O	O
the	O	O
buffering	O	O
classes	O	O
in	O	O
the	O	O
JDK	O	O
had	O	O
a	O	O
bug	O	O
where	O	O
an	O	O
exception	O	O
from	O	O
flush	B-api_mention	O
within	O	O
close	B-api_mention	O
caused	O	O
close	B-api_mention	O
on	O	O
the	O	O
decorated	O	O
object	O	O
not	O	O
be	O	O
called	O	O
.	O	O
Whilst	O	O
that	O	O
has	O	O
been	O	O
fixed	O	O
for	O	O
some	O	O
time	O	O
,	O	O
expect	O	O
it	O	O
from	O	O
other	O	O
implementations	O	O
.	O	O
2	O	O
)	O	O
#	O	O
pre	O	O
We	O	O
'	O	O
re	O	O
still	O	O
flushing	O	O
in	O	O
the	O	O
implicit	O	O
finally	O	O
block	O	O
(	O	O
now	O	O
with	O	O
repeated	O	O
close	B-api_mention	O
-	O	O
this	O	O
gets	O	O
worse	O	O
as	O	O
you	O	O
add	O	O
more	O	O
decorators	O	O
)	O	O
,	O	O
but	O	O
the	O	O
construction	O	O
is	O	O
safe	O	O
and	O	O
we	O	O
have	O	O
to	O	O
implicit	O	O
finally	O	O
blocks	O	O
so	O	O
even	O	O
a	O	O
failed	O	O
flush	B-api_mention	O
doesn	O	O
'	O	O
t	O	O
prevent	O	O
resource	O	O
release	O	O
.	O	O
3	O	O
)	O	O
#	O	O
pre	O	O
There	O	O
'	O	O
s	O	O
a	O	O
bug	O	O
here	O	O
.	O	O
Should	O	O
be	O	O
:	O	O
#	O	O
pre	O	O
Some	O	O
poorly	O	O
implemented	O	O
decorators	O	O
are	O	O
in	O	O
fact	O	O
resource	O	O
and	O	O
will	O	O
need	O	O
to	O	O
be	O	O
closed	O	O
reliably	O	O
.	O	O
Also	O	O
some	O	O
streams	O	O
may	O	O
need	O	O
to	O	O
be	O	O
closed	O	O
in	O	O
a	O	O
particular	O	O
way	O	O
(	O	O
perhaps	O	O
they	O	O
are	O	O
doing	O	O
compression	O	O
and	O	O
need	O	O
to	O	O
write	O	O
bits	O	O
to	O	O
finish	O	O
off	O	O
,	O	O
and	O	O
can	O	O
'	O	O
t	O	O
just	O	O
flush	O	O
everything	O	O
.	O	O
Verdict	O	O
Although	O	O
3	O	O
is	O	O
a	O	O
technically	O	O
superior	O	O
solution	O	O
,	O	O
software	O	O
development	O	O
reasons	O	O
make	O	O
2	O	O
the	O	O
better	O	O
choice	O	O
.	O	O
However	O	O
,	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resource	O	O
is	O	O
still	O	O
an	O	O
inadequate	O	O
fix	O	O
and	O	O
you	O	O
should	O	O
stick	O	O
with	O	O
the	O	O
Execute	O	O
Around	O	O
idiom	O	O
,	O	O
which	O	O
should	O	O
have	O	O
a	O	O
clearer	O	O
syntax	O	O
with	O	O
closures	O	O
in	O	O
Java	O	O
SE	O	O
8	O	O
.	O	O
Question	O	O
-	O	O
17828584	O	O
,	O	O
answer	O	O
-	O	O
17836189	O	O
I	O	O
think	O	O
the	O	O
others	O	O
have	O	O
done	O	O
a	O	O
good	O	O
job	O	O
at	O	O
explaining	O	O
why	O	O
cnt	O	O
>	O	O
0	O	O
,	O	O
but	O	O
there	O	O
'	O	O
s	O	O
not	O	O
enough	O	O
details	O	O
regarding	O	O
why	O	O
cnt	O	O
=	O	O
4	O	O
,	O	O
and	O	O
why	O	O
cnt	O	O
varies	O	O
so	O	O
widely	O	O
among	O	O
different	O	O
settings	O	O
.	O	O
I	O	O
will	O	O
attempt	O	O
to	O	O
fill	O	O
that	O	O
void	O	O
here	O	O
.	O	O
Let	O	O
#	O	O
li	O	O
X	O	O
be	O	O
the	O	O
total	O	O
stack	O	O
size	O	O
#	O	O
li	O	O
M	O	O
be	O	O
the	O	O
stack	O	O
space	O	O
used	O	O
when	O	O
we	O	O
enter	O	O
main	O	O
the	O	O
first	O	O
time	O	O
#	O	O
li	O	O
R	O	O
be	O	O
the	O	O
stack	O	O
space	O	O
increase	O	O
each	O	O
time	O	O
we	O	O
enter	O	O
into	O	O
main	O	O
#	O	O
li	O	O
P	O	O
be	O	O
the	O	O
stack	O	O
space	O	O
necessary	O	O
to	O	O
run	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
When	O	O
we	O	O
first	O	O
get	O	O
into	O	O
main	O	O
,	O	O
the	O	O
space	O	O
left	O	O
over	O	O
is	O	O
X	O	O
-	O	O
M	O	O
.	O	O
Each	O	O
recursive	O	O
call	O	O
takes	O	O
up	O	O
R	O	O
more	O	O
memory	O	O
.	O	O
So	O	O
for	O	O
1	O	O
recursive	O	O
call	O	O
(	O	O
1	O	O
more	O	O
than	O	O
original	O	O
)	O	O
,	O	O
the	O	O
memory	O	O
use	O	O
is	O	O
M	O	O
+	O	O
R	O	O
.	O	O
Suppose	O	O
that	O	O
StackOverflowError	B-api_mention	B-api_mention
is	O	O
thrown	O	O
after	O	O
C	O	O
successful	O	O
recursive	O	O
calls	O	O
,	O	O
that	O	O
is	O	O
,	O	O
M	O	O
+	O	O
C	O	O
*	O	O
R	O	O
<	O	O
=	O	O
X	O	O
and	O	O
M	O	O
+	O	O
C	O	O
*	O	O
(	O	O
R	O	O
+	O	O
1	O	O
)	O	O
>	O	O
X	O	O
.	O	O
At	O	O
the	O	O
time	O	O
of	O	O
the	O	O
first	O	O
StackOverflowError	B-api_mention	B-api_mention
,	O	O
there	O	O
'	O	O
s	O	O
X	O	O
-	O	O
M	O	O
-	O	O
C	O	O
*	O	O
R	O	O
memory	O	O
left	O	O
.	O	O
To	O	O
be	O	O
able	O	O
to	O	O
run	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
prinln	I-api_mention	I-api_mention
,	O	O
we	O	O
need	O	O
P	O	O
amount	O	O
of	O	O
space	O	O
left	O	O
on	O	O
the	O	O
stack	O	O
.	O	O
If	O	O
it	O	O
so	O	O
happens	O	O
that	O	O
X	O	O
-	O	O
M	O	O
-	O	O
C	O	O
*	O	O
R	O	O
>	O	O
=	O	O
P	O	O
,	O	O
then	O	O
0	O	O
will	O	O
be	O	O
printed	O	O
.	O	O
If	O	O
P	O	O
requires	O	O
more	O	O
space	O	O
,	O	O
then	O	O
we	O	O
remove	O	O
frames	O	O
from	O	O
the	O	O
stack	O	O
,	O	O
gaining	O	O
R	O	O
memory	O	O
at	O	O
the	O	O
cost	O	O
of	O	O
cnt	O	O
+	O	O
+	O	O
.	O	O
When	O	O
println	B-api_mention	B-api_mention
is	O	O
finally	O	O
able	O	O
to	O	O
run	O	O
,	O	O
X	O	O
-	O	O
M	O	O
-	O	O
(	O	O
C	O	O
-	O	O
cnt	O	O
)	O	O
*	O	O
R	O	O
>	O	O
=	O	O
P	O	O
.	O	O
So	O	O
if	O	O
P	O	O
is	O	O
large	O	O
for	O	O
a	O	O
particular	O	O
system	O	O
,	O	O
then	O	O
cnt	O	O
will	O	O
be	O	O
large	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
look	O	O
at	O	O
this	O	O
with	O	O
some	O	O
examples	O	O
.	O	O
Example	O	O
1	O	O
:	O	O
Suppose	O	O
#	O	O
li	O	O
X	O	O
=	O	O
100	O	O
#	O	O
li	O	O
M	O	O
=	O	O
1	O	O
#	O	O
li	O	O
R	O	O
=	O	O
2	O	O
#	O	O
li	O	O
P	O	O
=	O	O
1	O	O
Then	O	O
C	O	O
=	O	O
floor	O	O
(	O	O
(	O	O
X	O	O
-	O	O
M	O	O
)	O	O
/	O	O
R	O	O
)	O	O
=	O	O
49	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
ceiling	O	O
(	O	O
(	O	O
P	O	O
-	O	O
(	O	O
X	O	O
-	O	O
M	O	O
-	O	O
C	O	O
*	O	O
R	O	O
)	O	O
)	O	O
/	O	O
R	O	O
)	O	O
=	O	O
0	O	O
.	O	O
Example	O	O
2	O	O
:	O	O
Suppose	O	O
that	O	O
#	O	O
li	O	O
X	O	O
=	O	O
100	O	O
#	O	O
li	O	O
M	O	O
=	O	O
1	O	O
#	O	O
li	O	O
R	O	O
=	O	O
5	O	O
#	O	O
li	O	O
P	O	O
=	O	O
12	O	O
Then	O	O
C	O	O
=	O	O
19	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
2	O	O
.	O	O
Example	O	O
3	O	O
:	O	O
Suppose	O	O
that	O	O
#	O	O
li	O	O
X	O	O
=	O	O
101	O	O
#	O	O
li	O	O
M	O	O
=	O	O
1	O	O
#	O	O
li	O	O
R	O	O
=	O	O
5	O	O
#	O	O
li	O	O
P	O	O
=	O	O
12	O	O
Then	O	O
C	O	O
=	O	O
20	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
3	O	O
.	O	O
Example	O	O
4	O	O
:	O	O
Suppose	O	O
that	O	O
#	O	O
li	O	O
X	O	O
=	O	O
101	O	O
#	O	O
li	O	O
M	O	O
=	O	O
2	O	O
#	O	O
li	O	O
R	O	O
=	O	O
5	O	O
#	O	O
li	O	O
P	O	O
=	O	O
12	O	O
Then	O	O
C	O	O
=	O	O
19	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
2	O	O
.	O	O
Thus	O	O
,	O	O
we	O	O
see	O	O
that	O	O
both	O	O
the	O	O
system	O	O
(	O	O
M	O	O
,	O	O
R	O	O
,	O	O
and	O	O
P	O	O
)	O	O
and	O	O
the	O	O
stack	O	O
size	O	O
(	O	O
X	O	O
)	O	O
affects	O	O
cnt	O	O
.	O	O
As	O	O
a	O	O
side	O	O
note	O	O
,	O	O
it	O	O
does	O	O
not	O	O
matter	O	O
how	O	O
much	O	O
space	O	O
catch	O	O
requires	O	O
to	O	O
start	O	O
.	O	O
As	O	O
long	O	O
as	O	O
there	O	O
is	O	O
not	O	O
enough	O	O
space	O	O
for	O	O
catch	O	O
,	O	O
then	O	O
cnt	O	O
will	O	O
not	O	O
increase	O	O
,	O	O
so	O	O
there	O	O
are	O	O
no	O	O
external	O	O
effects	O	O
.	O	O
EDIT	O	O
I	O	O
take	O	O
back	O	O
what	O	O
I	O	O
said	O	O
about	O	O
catch	O	O
.	O	O
It	O	O
does	O	O
play	O	O
a	O	O
role	O	O
.	O	O
Suppose	O	O
it	O	O
requires	O	O
T	O	O
amount	O	O
of	O	O
space	O	O
to	O	O
start	O	O
.	O	O
cnt	O	O
starts	O	O
to	O	O
increment	O	O
when	O	O
the	O	O
leftover	O	O
space	O	O
is	O	O
greater	O	O
than	O	O
T	O	O
,	O	O
and	O	O
println	B-api_mention	B-api_mention
runs	O	O
when	O	O
the	O	O
leftover	O	O
space	O	O
is	O	O
greater	O	O
than	O	O
T	O	O
+	O	O
P	O	O
.	O	O
This	O	O
adds	O	O
an	O	O
extra	O	O
step	O	O
to	O	O
the	O	O
calculations	O	O
and	O	O
further	O	O
muddies	O	O
up	O	O
the	O	O
already	O	O
muddy	O	O
analysis	O	O
.	O	O
EDIT	O	O
I	O	O
finally	O	O
found	O	O
time	O	O
to	O	O
run	O	O
some	O	O
experiments	O	O
to	O	O
back	O	O
up	O	O
my	O	O
theory	O	O
.	O	O
Unfortunately	O	O
,	O	O
the	O	O
theory	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
match	O	O
up	O	O
with	O	O
the	O	O
experiments	O	O
.	O	O
What	O	O
actually	O	O
happens	O	O
is	O	O
very	O	O
different	O	O
.	O	O
Experiment	O	O
setup	O	O
:	O	O
Ubuntu	O	O
12	O	O
.	O	O
04	O	O
server	O	O
with	O	O
default	O	O
java	O	O
and	O	O
default	O	O
-	O	O
jdk	O	O
.	O	O
Xss	O	O
starting	O	O
at	O	O
70	O	O
,	O	O
000	O	O
at	O	O
1	O	O
byte	O	O
increments	O	O
to	O	O
460	O	O
,	O	O
000	O	O
.	O	O
The	O	O
results	O	O
are	O	O
available	O	O
at	O	O
:	O	O
#	O	O
a	O	O
I	O	O
'	O	O
ve	O	O
created	O	O
another	O	O
version	O	O
where	O	O
every	O	O
repeated	O	O
data	O	O
point	O	O
is	O	O
removed	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
only	O	O
points	O	O
that	O	O
are	O	O
different	O	O
from	O	O
the	O	O
previous	O	O
are	O	O
shown	O	O
.	O	O
This	O	O
makes	O	O
it	O	O
easier	O	O
to	O	O
see	O	O
anomalies	O	O
.	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
31471444	O	O
,	O	O
answer	O	O
-	O	O
31476657	O	O
From	O	O
Class	O	O
NumberUtils	O	B-api_mention
you	O	O
'	O	O
ll	O	O
see	O	O
it	O	O
'	O	O
s	O	O
defined	O	O
as	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
see	O	O
that	O	O
INTEGER	O	O
_	O	O
ONE	O	O
is	O	O
not	O	O
the	O	O
same	O	O
as	O	O
1	O	O
.	O	O
It	O	O
'	O	O
s	O	O
an	O	O
object	O	O
that	O	O
'	O	O
s	O	O
already	O	O
been	O	O
constructed	O	O
for	O	O
you	O	O
.	O	O
So	O	O
,	O	O
if	O	O
we	O	O
'	O	O
re	O	O
needing	O	O
an	O	O
instance	O	O
of	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
rather	O	O
than	O	O
create	O	O
your	O	O
own	O	O
,	O	O
you	O	O
can	O	O
reuse	O	O
the	O	O
one	O	O
from	O	O
the	O	O
library	O	O
saving	O	O
time	O	O
and	O	O
memory	O	O
.	O	O
It	O	O
really	O	O
depends	O	O
on	O	O
your	O	O
application	O	O
,	O	O
if	O	O
you	O	O
indeed	O	O
what	O	O
the	O	O
int	O	O
version	O	O
of	O	O
1	O	O
,	O	O
then	O	O
,	O	O
you	O	O
'	O	O
d	O	O
probably	O	O
be	O	O
better	O	O
of	O	O
using	O	O
that	O	O
instead	O	O
of	O	O
this	O	O
Integer	B-api_mention	B-api_mention
class	O	O
.	O	O
Question	O	O
-	O	O
18263489	O	O
,	O	O
answer	O	O
-	O	O
29873100	O	O
It	O	O
isn	O	O
'	O	O
t	O	O
pretty	O	O
,	O	O
but	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
allows	O	O
you	O	O
to	O	O
use	O	O
a	O	O
null	O	O
String	B-api_mention	B-api_mention
in	O	O
a	O	O
switch	O	O
.	O	O
If	O	O
it	O	O
finds	O	O
null	O	O
,	O	O
it	O	O
converts	O	O
it	O	O
to	O	O
StringLiteral	O	O
,	O	O
otherwise	O	O
it	O	O
just	O	O
returns	O	O
the	O	O
same	O	O
String	B-api_mention	B-api_mention
you	O	O
passed	O	O
it	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
handle	O	O
StringLiteral	O	O
explicitly	O	O
,	O	O
then	O	O
it	O	O
will	O	O
go	O	O
to	O	O
default	O	O
.	O	O
The	O	O
only	O	O
caveat	O	O
is	O	O
that	O	O
there	O	O
is	O	O
no	O	O
way	O	O
of	O	O
distinguishing	O	O
between	O	O
the	O	O
String	B-api_mention	B-api_mention
StringLiteral	O	O
and	O	O
an	O	O
actual	O	O
null	O	O
String	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32312876	O	O
,	O	O
answer	O	O
-	O	O
32313069	O	O
This	O	O
is	O	O
possible	O	O
using	O	O
the	O	O
mergeFunction	O	O
parameter	O	O
of	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
keyMapper	I-api_mention	I-api_mention
,	I-api_mention	O
valueMapper	I-api_mention	B-api_mention
,	I-api_mention	O
mergeFunction	I-api_mention	O
)	I-api_mention	O
:	O	O
#	O	O
pre	O	O
mergeFunction	O	O
is	O	O
a	O	O
function	O	O
that	O	O
operates	O	O
on	O	O
two	O	O
values	O	O
associated	O	O
with	O	O
the	O	O
same	O	O
key	O	O
.	O	O
adress1	O	O
corresponds	O	O
to	O	O
the	O	O
first	O	O
address	O	O
that	O	O
was	O	O
encountered	O	O
when	O	O
collecting	O	O
elements	O	O
and	O	O
adress2	O	O
corresponds	O	O
to	O	O
the	O	O
second	O	O
address	O	O
encountered	O	O
:	O	O
this	O	O
lambda	O	O
just	O	O
tells	O	O
to	O	O
keep	O	O
the	O	O
first	O	O
address	O	O
and	O	O
ignores	O	O
the	O	O
second	O	O
.	O	O
Question	O	O
-	O	O
5374311	O	O
,	O	O
answer	O	O
-	O	O
5374346	O	O
What	O	O
is	O	O
happening	O	O
is	O	O
that	O	O
stock	O	O
_	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
creating	O	O
an	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
rather	O	O
than	O	O
a	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
and	O	O
hence	O	O
the	O	O
typecast	O	O
is	O	O
failing	O	O
.	O	O
The	O	O
correct	O	O
code	O	O
would	O	O
be	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
even	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
more	O	O
details	O	O
,	O	O
refer	O	O
to	O	O
the	O	O
javadocs	O	O
for	O	O
the	O	O
two	O	O
overloads	O	O
of	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
.	O	O
(	O	O
From	O	O
a	O	O
technical	O	O
perspective	O	O
,	O	O
the	O	O
reason	O	O
for	O	O
this	O	O
API	O	O
behaviour	O	O
/	O	O
design	O	O
is	O	O
that	O	O
an	O	O
implementation	O	O
of	O	O
the	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
no	O	O
information	O	O
of	O	O
what	O	O
the	O	O
<	O	O
T	O	O
>	O	O
is	O	O
at	O	O
runtime	O	O
.	O	O
All	O	O
it	O	O
knows	O	O
is	O	O
that	O	O
the	O	O
raw	O	O
element	O	O
type	O	O
is	O	O
Object	B-api_mention	B-api_mention
.	O	O
By	O	O
contrast	O	O
,	O	O
in	O	O
the	O	O
other	O	O
case	O	O
,	O	O
the	O	O
array	O	O
parameter	O	O
gives	O	O
the	O	O
base	O	O
type	O	O
of	O	O
the	O	O
array	O	O
.	O	O
(	O	O
If	O	O
the	O	O
supplied	O	O
array	O	O
is	O	O
big	O	O
enough	O	O
,	O	O
it	O	O
is	O	O
used	O	O
.	O	O
Otherwise	O	O
a	O	O
new	O	O
array	O	O
of	O	O
the	O	O
same	O	O
type	O	O
and	O	O
a	O	O
larger	O	O
size	O	O
will	O	O
be	O	O
allocated	O	O
and	O	O
returned	O	O
as	O	O
the	O	O
result	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
29183904	O	O
I	O	O
used	O	O
to	O	O
define	O	O
a	O	O
set	O	O
of	O	O
related	O	O
constants	O	O
like	O	O
Bundle	O	O
keys	O	O
together	O	O
in	O	O
an	O	O
interface	O	O
like	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
provides	O	O
me	O	O
a	O	O
nicer	O	O
way	O	O
to	O	O
group	O	O
related	O	O
constants	O	O
together	O	O
and	O	O
used	O	O
them	O	O
by	O	O
making	O	O
a	O	O
static	O	O
import	O	O
(	O	O
not	O	O
implements	O	O
)	O	O
.	O	O
I	O	O
know	O	O
Android	O	O
framework	O	O
also	O	O
uses	O	O
the	O	O
constants	O	O
in	O	O
same	O	O
way	O	O
like	O	O
Toast	O	O
.	O	O
LENTH	O	O
_	O	O
LONG	O	O
,	O	O
View	O	O
.	O	O
GONE	O	O
.	O	O
However	O	O
,	O	O
I	O	O
often	O	O
feel	O	O
that	O	O
the	O	O
Java	O	O
Enums	O	O
provide	O	O
much	O	O
better	O	O
and	O	O
powerful	O	O
way	O	O
to	O	O
represent	O	O
the	O	O
constant	O	O
.	O	O
But	O	O
is	O	O
there	O	O
a	O	O
performence	O	O
issue	O	O
in	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
?	O	O
With	O	O
a	O	O
bit	O	O
of	O	O
research	O	O
I	O	O
ended	O	O
up	O	O
in	O	O
confusion	O	O
.	O	O
From	O	O
this	O	O
question	O	O
"	O	O
Avoid	O	O
Enums	O	O
Where	O	O
You	O	O
Only	O	O
Need	O	O
Ints	O	O
	O	O
removed	O	O
from	O	O
Android	O	O
'	O	O
s	O	O
performance	O	O
tips	O	O
?	O	O
it	O	O
'	O	O
s	O	O
clear	O	O
that	O	O
Google	O	O
has	O	O
removed	O	O
"	O	O
Avoid	O	O
enums	O	O
"	O	O
from	O	O
its	O	O
performance	O	O
tips	O	O
,	O	O
but	O	O
from	O	O
it	O	O
'	O	O
s	O	O
official	O	O
training	O	O
docs	O	O
Be	O	O
aware	O	O
of	O	O
memory	O	O
overhead	O	O
section	O	O
it	O	O
clearly	O	O
says	O	O
:	O	O
"	O	O
Enums	O	O
often	O	O
require	O	O
more	O	O
than	O	O
twice	O	O
as	O	O
much	O	O
memory	O	O
as	O	O
static	O	O
constants	O	O
.	O	O
You	O	O
should	O	O
strictly	O	O
avoid	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
.	O	O
"	O	O
Is	O	O
this	O	O
still	O	O
holds	O	O
good	O	O
?	O	O
(	O	O
say	O	O
in	O	O
Java	O	O
versions	O	O
after	O	O
1	O	O
.	O	O
6	O	O
)	O	O
One	O	O
more	O	O
issue	O	O
that	O	O
I	O	O
observed	O	O
is	O	O
to	O	O
send	O	O
enums	O	O
across	O	O
intents	O	O
using	O	O
Bundle	O	O
I	O	O
should	O	O
send	O	O
them	O	O
by	O	O
serializing	O	O
(	O	O
i	O	O
.	O	O
e	O	O
putSerializable	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
that	O	O
I	O	O
think	O	O
an	O	O
expensive	O	O
operation	O	O
compared	O	O
to	O	O
primitive	O	O
putString	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
,	O	O
eventhough	O	O
enums	O	O
provides	O	O
it	O	O
for	O	O
free	O	O
)	O	O
.	O	O
Can	O	O
someone	O	O
please	O	O
clarify	O	O
which	O	O
one	O	O
is	O	O
the	O	O
best	O	O
way	O	O
to	O	O
represent	O	O
the	O	O
same	O	O
in	O	O
Android	O	O
?	O	O
Should	O	O
I	O	O
strictly	O	O
avoid	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
?	O	O
Question	O	O
-	O	O
31471444	O	O
,	O	O
answer	O	O
-	O	O
31471520	O	O
org	O	B-api_mention
.	O	I-api_mention
apache	O	I-api_mention
.	O	I-api_mention
commons	O	I-api_mention
.	O	I-api_mention
lang	O	I-api_mention
.	O	I-api_mention
math	O	I-api_mention
.	O	I-api_mention
NumberUtils	O	I-api_mention
.	O	O
INTEGER	O	O
_	O	O
ONE	O	O
it	O	O
gives	O	O
you	O	O
a	O	O
final	O	O
static	O	O
Integer	O	B-api_mention
object	O	O
rather	O	O
than	O	O
primitive	O	O
int	O	O
1	O	O
,	O	O
and	O	O
as	O	O
it	O	O
is	O	O
final	O	O
static	O	O
it	O	O
acts	O	O
as	O	O
a	O	O
constant	O	O
and	O	O
can	O	O
be	O	O
used	O	O
in	O	O
comparison	O	O
of	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
because	O	O
will	O	O
always	O	O
return	O	O
same	O	O
instance	O	O
.	O	O
So	O	O
in	O	O
the	O	O
above	O	O
scenario	O	O
it	O	O
might	O	O
not	O	O
look	O	O
fit	O	O
but	O	O
somewhere	O	O
if	O	O
you	O	O
are	O	O
using	O	O
it	O	O
while	O	O
comparison	O	O
,	O	O
it	O	O
for	O	O
sure	O	O
has	O	O
impact	O	O
.	O	O
Moreover	O	O
,	O	O
as	O	O
much	O	O
as	O	O
we	O	O
can	O	O
,	O	O
should	O	O
prefer	O	O
the	O	O
use	O	O
of	O	O
constants	O	O
over	O	O
hardcoded	O	O
beacuse	O	O
:	O	O
#	O	O
li	O	O
It	O	O
can	O	O
make	O	O
your	O	O
code	O	O
easily	O	O
maintainable	O	O
.	O	O
If	O	O
any	O	O
situation	O	O
occurs	O	O
in	O	O
future	O	O
for	O	O
change	O	O
,	O	O
you	O	O
can	O	O
change	O	O
only	O	O
at	O	O
a	O	O
single	O	O
place	O	O
.	O	O
#	O	O
li	O	O
The	O	O
code	O	O
looks	O	O
cleaner	O	O
&	O	O
more	O	O
readable	O	O
.	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
29784337	O	O
The	O	O
other	O	O
answers	O	O
all	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
returns	O	O
an	O	O
unmodifiable	O	O
list	O	O
(	O	O
an	O	O
UnsupportedOperationException	B-api_mention	B-api_mention
is	O	O
thrown	O	O
if	O	O
you	O	O
try	O	O
to	O	O
add	O	O
or	O	O
remove	O	O
an	O	O
element	O	O
)	O	O
.	O	O
To	O	O
get	O	O
a	O	O
mutable	O	O
list	O	O
you	O	O
can	O	O
wrap	O	O
the	O	O
returned	O	O
list	O	O
in	O	O
a	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
as	O	O
a	O	O
couple	O	O
of	O	O
answers	O	O
point	O	O
out	O	O
,	O	O
but	O	O
a	O	O
cleaner	O	O
solution	O	O
is	O	O
to	O	O
use	O	O
Guava	O	O
'	O	O
s	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
available	O	O
since	O	O
at	O	O
least	O	O
Guava	O	O
10	O	O
,	O	O
released	O	O
in	O	O
2011	O	O
)	O	O
.	O	O
For	O	O
example	O	O
:	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
8275499	O	O
,	O	O
answer	O	O
-	O	O
8275508	O	O
Just	O	O
use	O	O
TheClassName	O	B-api_mention
.	O	I-api_mention
class	O	I-api_mention
instead	O	O
of	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
31202946	O	O
,	O	O
answer	O	O
-	O	O
31203218	O	O
You	O	O
can	O	O
of	O	O
course	O	O
choose	O	O
to	O	O
shoot	O	O
yourself	O	O
in	O	O
the	O	O
foot	O	O
,	O	O
but	O	O
that	O	O
doesn	O	O
'	O	O
t	O	O
mean	O	O
you	O	O
must	O	O
.	O	O
#	O	O
blockquote	O	O
Because	O	O
the	O	O
recommended	O	O
way	O	O
to	O	O
create	O	O
a	O	O
start	O	O
a	O	O
thread	O	O
is	O	O
not	O	O
to	O	O
subclass	O	O
Thread	B-api_mention	B-api_mention
.	O	O
The	O	O
recommended	O	O
way	O	O
is	O	O
to	O	O
define	O	O
a	O	O
Runnable	B-api_mention	B-api_mention
,	O	O
and	O	O
pass	O	O
it	O	O
as	O	O
argument	O	O
to	O	O
the	O	O
Thread	B-api_mention	B-api_mention
constructor	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
Yes	O	O
and	O	O
no	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
replace	O	O
the	O	O
implementation	O	O
of	O	O
start	B-api_mention	O
(	I-api_mention	O
)	I-api_mention	O
by	O	O
your	O	O
own	O	O
implementation	O	O
,	O	O
but	O	O
you	O	O
can	O	O
do	O	O
additional	O	O
things	O	O
in	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
want	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
said	O	O
,	O	O
if	O	O
Java	O	O
was	O	O
redesigned	O	O
from	O	O
scratch	O	O
today	O	O
,	O	O
there	O	O
is	O	O
a	O	O
good	O	O
chance	O	O
the	O	O
design	O	O
would	O	O
be	O	O
different	O	O
.	O	O
Remember	O	O
that	O	O
this	O	O
class	O	O
dates	O	O
from	O	O
Java	O	O
1	O	O
.	O	O
0	O	O
,	O	O
and	O	O
is	O	O
still	O	O
backward	O	O
-	O	O
compatible	O	O
.	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
15430259	O	O
If	O	O
you	O	O
know	O	O
in	O	O
advance	O	O
what	O	O
the	O	O
size	O	O
of	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
going	O	O
to	O	O
be	O	O
,	O	O
it	O	O
is	O	O
more	O	O
efficient	O	O
to	O	O
specify	O	O
the	O	O
initial	O	O
capacity	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
,	O	O
the	O	O
internal	O	O
array	O	O
will	O	O
have	O	O
to	O	O
be	O	O
repeatedly	O	O
reallocated	O	O
as	O	O
the	O	O
list	O	O
grows	O	O
.	O	O
The	O	O
larger	O	O
the	O	O
final	O	O
list	O	O
,	O	O
the	O	O
more	O	O
time	O	O
you	O	O
save	O	O
by	O	O
avoiding	O	O
the	O	O
reallocations	O	O
.	O	O
That	O	O
said	O	O
,	O	O
even	O	O
without	O	O
pre	O	O
-	O	O
allocation	O	O
,	O	O
inserting	O	O
n	O	O
elements	O	O
at	O	O
the	O	O
back	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
guaranteed	O	O
to	O	O
take	O	O
total	O	O
O	O	O
(	O	O
args	O	O
)	O	O
time	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
appending	O	O
an	O	O
element	O	O
is	O	O
an	O	O
amortized	O	O
constant	O	O
-	O	O
time	O	O
operation	O	O
.	O	O
This	O	O
is	O	O
achieved	O	O
by	O	O
having	O	O
each	O	O
reallocation	O	O
increase	O	O
the	O	O
size	O	O
of	O	O
the	O	O
array	O	O
exponentially	O	O
,	O	O
typically	O	O
by	O	O
a	O	O
factor	O	O
of	O	O
1	O	O
.	O	O
5	O	O
.	O	O
With	O	O
this	O	O
approach	O	O
,	O	O
the	O	O
total	O	O
number	O	O
of	O	O
operations	O	O
can	O	O
be	O	O
shown	O	O
to	O	O
be	O	O
O	O	O
(	O	O
n	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
22561614	O	O
,	O	O
answer	O	O
-	O	O
22561687	O	O
This	O	O
works	O	O
because	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
resolves	O	O
to	O	O
an	O	O
implementation	O	O
of	O	O
the	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
.	O	O
The	O	O
method	O	O
reference	O	O
of	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
resolves	O	O
to	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
resolved	O	O
to	O	O
IntBinaryOperator	B-api_mention	B-api_mention
,	O	O
and	O	O
presumably	O	O
autoboxing	O	O
occurs	O	O
somewhere	O	O
making	O	O
it	O	O
a	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
And	O	O
the	O	O
min	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
resp	O	I-api_mention
max	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
of	O	O
the	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
ask	O	O
the	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
to	O	O
be	O	O
implemented	O	O
.	O	O
Now	O	O
this	O	O
resolves	O	O
to	O	O
the	O	O
single	O	O
method	O	O
Integer	B-api_mention	B-api_mention
compareTo	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Which	O	O
is	O	O
of	O	O
type	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
And	O	O
thus	O	O
the	O	O
magic	O	O
has	O	O
happened	O	O
as	O	O
both	O	O
methods	O	O
are	O	O
a	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
32820722	O	O
,	O	O
answer	O	O
-	O	O
32820940	O	O
An	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
a	O	O
function	O	O
int	O	O
-	O	O
>	O	O
R	O	O
.	O	O
An	O	O
IntUnaryOperator	O	O
is	O	O
a	O	O
function	O	O
int	O	O
-	O	O
>	O	O
int	O	O
.	O	O
Thus	O	O
an	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
a	O	O
function	O	O
that	O	O
takes	O	O
an	O	O
int	O	O
as	O	O
parameter	O	O
and	O	O
return	O	O
a	O	O
function	O	O
that	O	O
takes	O	O
an	O	O
int	O	O
as	O	O
parameter	O	O
and	O	O
return	O	O
an	O	O
int	O	O
.	O	O
#	O	O
pre	O	O
Maybe	O	O
it	O	O
is	O	O
more	O	O
clear	O	O
if	O	O
you	O	O
use	O	O
anonymous	O	O
classes	O	O
to	O	O
"	O	O
decompose	O	O
"	O	O
the	O	O
lambda	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32693704	O	O
,	O	O
answer	O	O
-	O	O
32745612	O	O
For	O	O
me	O	O
,	O	O
the	O	O
reason	O	O
is	O	O
a	O	O
likely	O	O
performance	O	O
inprovement	O	O
,	O	O
at	O	O
a	O	O
negligible	O	O
cost	O	O
in	O	O
terms	O	O
of	O	O
code	O	O
clarity	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
implementation	O	O
of	O	O
the	O	O
fill	O	O
method	O	O
is	O	O
trivial	O	O
,	O	O
a	O	O
simple	O	O
for	O	O
-	O	O
loop	O	O
setting	O	O
each	O	O
array	O	O
element	O	O
to	O	O
null	O	O
.	O	O
So	O	O
,	O	O
replacing	O	O
a	O	O
call	O	O
to	O	O
it	O	O
with	O	O
the	O	O
actual	O	O
implementation	O	O
does	O	O
not	O	O
cause	O	O
any	O	O
significant	O	O
degradation	O	O
in	O	O
the	O	O
clarity	O	O
/	O	O
conciseness	O	O
of	O	O
the	O	O
caller	O	O
method	O	O
.	O	O
The	O	O
potential	O	O
performance	O	O
benefits	O	O
are	O	O
not	O	O
so	O	O
insignificant	O	O
,	O	O
if	O	O
you	O	O
consider	O	O
everything	O	O
that	O	O
is	O	O
involved	O	O
:	O	O
#	O	O
li	O	O
There	O	O
will	O	O
be	O	O
no	O	O
need	O	O
for	O	O
the	O	O
JVM	O	O
to	O	O
resolve	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
,	O	O
plus	O	O
loading	O	O
and	O	O
initializing	O	O
it	O	O
if	O	O
needed	O	O
.	O	O
This	O	O
is	O	O
a	O	O
non	O	O
-	O	O
trivial	O	O
process	O	O
where	O	O
the	O	O
JVM	O	O
performs	O	O
several	O	O
steps	O	O
.	O	O
Firstly	O	O
,	O	O
it	O	O
checks	O	O
the	O	O
class	O	O
loader	O	O
to	O	O
see	O	O
if	O	O
the	O	O
class	O	O
is	O	O
already	O	O
loaded	O	O
,	O	O
and	O	O
this	O	O
happens	O	O
every	O	O
time	O	O
a	O	O
method	O	O
is	O	O
called	O	O
;	O	O
there	O	O
are	O	O
optimizations	O	O
involved	O	O
here	O	O
,	O	O
of	O	O
course	O	O
,	O	O
but	O	O
it	O	O
still	O	O
takes	O	O
some	O	O
effort	O	O
.	O	O
If	O	O
the	O	O
class	O	O
is	O	O
not	O	O
loaded	O	O
,	O	O
the	O	O
JVM	O	O
will	O	O
need	O	O
to	O	O
go	O	O
through	O	O
the	O	O
expensive	O	O
process	O	O
of	O	O
loading	O	O
it	O	O
,	O	O
verifying	O	O
the	O	O
bytecode	O	O
,	O	O
resolving	O	O
other	O	O
necessary	O	O
dependencies	O	O
,	O	O
and	O	O
finally	O	O
performing	O	O
static	O	O
initialization	O	O
of	O	O
the	O	O
class	O	O
(	O	O
which	O	O
can	O	O
be	O	O
arbitrarily	O	O
expensive	O	O
)	O	O
.	O	O
Given	O	O
that	O	O
HashMap	B-api_mention	B-api_mention
is	O	O
such	O	O
a	O	O
core	O	O
class	O	O
,	O	O
and	O	O
that	O	O
Arrays	B-api_mention	B-api_mention
is	O	O
such	O	O
a	O	O
huge	O	O
class	O	O
(	O	O
3600	O	O
+	O	O
lines	O	O
)	O	O
,	O	O
avoiding	O	O
these	O	O
costs	O	O
may	O	O
add	O	O
up	O	O
to	O	O
noticeable	O	O
savings	O	O
.	O	O
#	O	O
li	O	O
Since	O	O
there	O	O
is	O	O
no	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
call	O	O
,	O	O
the	O	O
JVM	O	O
won	O	O
'	O	O
t	O	O
have	O	O
to	O	O
decide	O	O
whether	O	O
/	O	O
when	O	O
to	O	O
inline	O	O
the	O	O
method	O	O
into	O	O
the	O	O
caller	O	O
'	O	O
s	O	O
body	O	O
.	O	O
Since	O	O
HashMap	B-api_mention	B-api_mention
#	O	I-api_mention
clear	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
tends	O	O
to	O	O
get	O	O
called	O	O
a	O	O
lot	O	O
,	O	O
the	O	O
JVM	O	O
will	O	O
eventually	O	O
perform	O	O
the	O	O
inlining	O	O
,	O	O
which	O	O
requires	O	O
JIT	O	O
recompilation	O	O
of	O	O
the	O	O
clear	O	O
method	O	O
.	O	O
With	O	O
no	O	O
method	O	O
calls	O	O
,	O	O
clear	O	O
will	O	O
always	O	O
run	O	O
at	O	O
top	O	O
-	O	O
speed	O	O
(	O	O
once	O	O
initially	O	O
JITed	O	O
)	O	O
.	O	O
Another	O	O
benefit	O	O
of	O	O
no	O	O
longer	O	O
calling	O	O
methods	O	O
in	O	O
Arrays	B-api_mention	B-api_mention
is	O	O
that	O	O
it	O	O
simplifies	O	O
the	O	O
dependency	O	O
graph	O	O
inside	O	O
the	O	O
java	O	O
.	O	O
util	O	O
package	O	O
,	O	O
since	O	O
one	O	O
dependency	O	O
is	O	O
removed	O	O
.	O	O
Question	O	O
-	O	O
31188231	O	O
,	O	O
answer	O	O
-	O	O
31188818	O	O
Ironically	O	O
default	O	O
methods	O	O
in	O	O
interfaces	O	O
were	O	O
introduced	O	O
to	O	O
allow	O	O
existing	O	O
libraries	O	O
using	O	O
those	O	O
interfaces	O	O
not	O	O
to	O	O
break	O	O
,	O	O
while	O	O
introducing	O	O
massive	O	O
new	O	O
functionality	O	O
in	O	O
the	O	O
interfaces	O	O
.	O	O
(	O	O
backward	O	O
compatibility	O	O
.	O	O
)	O	O
Conflicts	O	O
like	O	O
that	O	O
sort	O	O
method	O	O
might	O	O
arise	O	O
.	O	O
Something	O	O
to	O	O
pay	O	O
for	O	O
the	O	O
extra	O	O
functionality	O	O
.	O	O
In	O	O
your	O	O
case	O	O
also	O	O
something	O	O
to	O	O
investigate	O	O
(	O	O
should	O	O
new	O	O
functionality	O	O
be	O	O
used	O	O
instead	O	O
?	O	O
)	O	O
.	O	O
Java	O	O
forward	O	O
compatibility	O	O
breaks	O	O
are	O	O
little	O	O
,	O	O
more	O	O
in	O	O
its	O	O
typing	O	O
system	O	O
,	O	O
which	O	O
was	O	O
constantly	O	O
enlarged	O	O
.	O	O
First	O	O
with	O	O
generic	O	O
types	O	O
and	O	O
now	O	O
with	O	O
inferred	O	O
types	O	O
from	O	O
functional	O	O
interfaces	O	O
.	O	O
From	O	O
version	O	O
to	O	O
version	O	O
and	O	O
from	O	O
compiler	O	O
to	O	O
compiler	O	O
there	O	O
were	O	O
slight	O	O
differences	O	O
.	O	O
Question	O	O
-	O	O
10827872	O	O
,	O	O
answer	O	O
-	O	O
10827945	O	O
The	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
overloaded	O	O
to	O	O
accept	O	O
both	O	O
a	O	O
primitive	O	O
char	O	O
and	O	O
a	O	O
CharSequence	O	B-api_mention
as	O	O
arguments	O	O
.	O	O
Now	O	O
as	O	O
far	O	O
as	O	O
the	O	O
performance	O	O
is	O	O
concerned	O	O
,	O	O
the	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
a	O	O
bit	O	O
faster	O	O
than	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
because	O	O
the	O	O
later	O	O
first	O	O
compiles	O	O
the	O	O
regex	O	O
pattern	O	O
and	O	O
then	O	O
matches	O	O
before	O	O
finally	O	O
replacing	O	O
whereas	O	O
the	O	O
former	O	O
simply	O	O
matches	O	O
for	O	O
the	O	O
provided	O	O
argument	O	O
and	O	O
replaces	O	O
.	O	O
Since	O	O
we	O	O
know	O	O
the	O	O
regex	O	O
pattern	O	O
matching	O	O
is	O	O
a	O	O
bit	O	O
more	O	O
complex	O	O
and	O	O
consequently	O	O
slower	O	O
,	O	O
then	O	O
preferring	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
over	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
suggested	O	O
whenever	O	O
possible	O	O
.	O	O
For	O	O
example	O	O
,	O	O
for	O	O
simple	O	O
substitutions	O	O
like	O	O
you	O	O
mentioned	O	O
,	O	O
it	O	O
is	O	O
better	O	O
to	O	O
use	O	O
:	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
of	O	O
:	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
:	O	O
the	O	O
above	O	O
conversion	O	O
method	O	O
arguments	O	O
are	O	O
system	O	O
-	O	O
dependent	O	O
.	O	O
Question	O	O
-	O	O
25903137	O	O
,	O	O
answer	O	O
-	O	O
25905196	O	O
Here	O	O
are	O	O
some	O	O
variations	O	O
on	O	O
Sotirios	O	O
Delimanolis	O	O
'	O	O
answer	O	O
,	O	O
which	O	O
was	O	O
pretty	O	O
good	O	O
to	O	O
begin	O	O
with	O	O
(	O	O
+	O	O
1	O	O
)	O	O
.	O	O
Consider	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
A	O	O
couple	O	O
points	O	O
here	O	O
.	O	O
First	O	O
is	O	O
the	O	O
use	O	O
of	O	O
wildcards	O	O
in	O	O
the	O	O
generics	O	O
;	O	O
this	O	O
makes	O	O
the	O	O
function	O	O
somewhat	O	O
more	O	O
flexible	O	O
.	O	O
A	O	O
wildcard	O	O
would	O	O
be	O	O
necessary	O	O
if	O	O
,	O	O
for	O	O
example	O	O
,	O	O
you	O	O
wanted	O	O
the	O	O
output	O	O
map	O	O
to	O	O
have	O	O
a	O	O
key	O	O
that	O	O
'	O	O
s	O	O
a	O	O
superclass	O	O
of	O	O
the	O	O
input	O	O
map	O	O
'	O	O
s	O	O
key	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
There	O	O
is	O	O
also	O	O
an	O	O
example	O	O
for	O	O
the	O	O
map	O	O
'	O	O
s	O	O
values	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
really	O	O
contrived	O	O
,	O	O
and	O	O
I	O	O
admit	O	O
that	O	O
having	O	O
the	O	O
bounded	O	O
wildcard	O	O
for	O	O
Y	O	O
only	O	O
helps	O	O
in	O	O
edge	O	O
cases	O	O
.	O	O
)	O	O
A	O	O
second	O	O
point	O	O
is	O	O
that	O	O
instead	O	O
of	O	O
running	O	O
the	O	O
stream	O	O
over	O	O
the	O	O
input	O	O
map	O	O
'	O	O
s	O	O
entrySet	B-api_mention	B-api_mention
,	O	O
I	O	O
ran	O	O
it	O	O
over	O	O
the	O	O
keySet	B-api_mention	B-api_mention
.	O	O
This	O	O
makes	O	O
the	O	O
code	O	O
a	O	O
little	O	O
cleaner	O	O
,	O	O
I	O	O
think	O	O
,	O	O
at	O	O
the	O	O
cost	O	O
of	O	O
having	O	O
to	O	O
fetch	O	O
values	O	O
out	O	O
of	O	O
the	O	O
map	O	O
instead	O	O
of	O	O
from	O	O
the	O	O
map	O	O
entry	O	O
.	O	O
Incidentally	O	O
,	O	O
I	O	O
initially	O	O
had	O	O
key	O	O
-	O	O
>	O	O
key	O	O
as	O	O
the	O	O
first	O	O
argument	O	O
to	O	O
toMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
this	O	O
failed	O	O
with	O	O
a	O	O
type	O	O
inference	O	O
error	O	O
for	O	O
some	O	O
reason	O	O
.	O	O
Changing	O	O
it	O	O
to	O	O
(	O	O
X	O	O
key	O	O
)	O	O
-	O	O
>	O	O
key	O	O
worked	O	O
,	O	O
as	O	O
did	O	O
Function	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Still	O	O
another	O	O
variation	O	O
is	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
uses	O	O
Map	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
of	O	O
streams	O	O
.	O	O
This	O	O
is	O	O
even	O	O
simpler	O	O
,	O	O
I	O	O
think	O	O
,	O	O
because	O	O
it	O	O
dispenses	O	O
with	O	O
the	O	O
collectors	O	O
,	O	O
which	O	O
are	O	O
somewhat	O	O
clumsy	O	O
to	O	O
use	O	O
with	O	O
maps	O	O
.	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
Map	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
the	O	O
key	O	O
and	O	O
value	O	O
as	O	O
separate	O	O
parameters	O	O
,	O	O
whereas	O	O
the	O	O
stream	O	O
has	O	O
only	O	O
one	O	O
value	O	O
-	O	O
-	O	O
and	O	O
you	O	O
have	O	O
to	O	O
choose	O	O
whether	O	O
to	O	O
use	O	O
the	O	O
key	O	O
or	O	O
the	O	O
map	O	O
entry	O	O
as	O	O
that	O	O
value	O	O
.	O	O
On	O	O
the	O	O
minus	O	O
side	O	O
,	O	O
this	O	O
lacks	O	O
the	O	O
rich	O	O
,	O	O
streamy	O	O
goodness	O	O
of	O	O
the	O	O
other	O	O
approaches	O	O
.	O	O
:	O	O
-	O	O
)	O	O
Question	O	O
-	O	O
13950338	O	O
,	O	O
answer	O	O
-	O	O
17066803	O	O
Grant	O	O
Vibration	O	O
Permission	O	O
Before	O	O
you	O	O
start	O	O
implementing	O	O
any	O	O
vibration	O	O
code	O	O
,	O	O
you	O	O
have	O	O
to	O	O
give	O	O
your	O	O
application	O	O
the	O	O
permission	O	O
to	O	O
vibrate	O	O
:	O	O
<	O	O
uses	O	O
-	O	O
permission	O	O
android	O	O
:	O	O
name	O	O
=	O	O
StringLiteral	O	O
/	O	O
>	O	O
Make	O	O
sure	O	O
to	O	O
include	O	O
this	O	O
line	O	O
in	O	O
your	O	O
AndroidManifest	O	O
.	O	O
xml	O	O
file	O	O
.	O	O
Import	O	O
the	O	O
Vibration	O	O
Library	O	O
Most	O	O
IDEs	O	O
will	O	O
do	O	O
this	O	O
for	O	O
you	O	O
,	O	O
but	O	O
here	O	O
is	O	O
the	O	O
import	O	O
statement	O	O
if	O	O
yours	O	O
doesn	O	O
'	O	O
t	O	O
:	O	O
import	B-api_mention	O
android	I-api_mention	O
.	I-api_mention	O
os	I-api_mention	O
.	I-api_mention	O
Vibrator	I-api_mention	O
;	O	O
Make	O	O
sure	O	O
this	O	O
in	O	O
the	O	O
activity	O	O
where	O	O
you	O	O
want	O	O
the	O	O
vibration	O	O
to	O	O
occur	O	O
.	O	O
How	O	O
to	O	O
Vibrate	B-api_mention	O
for	O	O
a	O	O
Given	O	O
Time	O	O
In	O	O
most	O	O
circumstances	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
be	O	O
wanting	O	O
to	O	O
vibrate	O	O
the	O	O
device	O	O
for	O	O
a	O	O
short	O	O
,	O	O
predetermined	O	O
amount	O	O
of	O	O
time	O	O
.	O	O
You	O	O
can	O	O
achieve	O	O
this	O	O
by	O	O
using	O	O
the	O	O
vibrate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Here	O	O
is	O	O
a	O	O
quick	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
'	O	O
s	O	O
it	O	O
,	O	O
simple	O	O
!	O	O
How	O	O
to	O	O
Vibrate	O	O
Indefinitely	O	O
It	O	O
may	O	O
be	O	O
the	O	O
case	O	O
that	O	O
you	O	O
want	O	O
the	O	O
device	O	O
to	O	O
continue	O	O
vibrating	O	O
indefinitely	O	O
.	O	O
For	O	O
this	O	O
,	O	O
we	O	O
use	O	O
the	O	O
vibrate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
When	O	O
you	O	O
'	O	O
re	O	O
ready	O	O
to	O	O
stop	O	O
the	O	O
vibration	O	O
,	O	O
just	O	O
call	O	O
the	O	O
cancel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
v	O	O
.	O	B-api_mention
cancel	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
How	O	O
to	O	O
use	O	O
Vibration	O	O
Patterns	O	O
If	O	O
you	O	O
want	O	O
a	O	O
more	O	O
bespoke	O	O
vibration	O	O
,	O	O
you	O	O
can	O	O
attempt	O	O
to	O	O
create	O	O
your	O	O
own	O	O
vibration	O	O
patterns	O	O
:	O	O
#	O	O
pre	O	O
More	O	O
Complex	O	O
Vibrations	O	O
There	O	O
are	O	O
multiple	O	O
SDKs	O	O
that	O	O
offer	O	O
a	O	O
more	O	O
comprehensive	O	O
range	O	O
of	O	O
haptic	O	O
feedback	O	O
.	O	O
One	O	O
that	O	O
I	O	O
use	O	O
for	O	O
special	O	O
effects	O	O
is	O	O
Immersion	O	O
'	O	O
s	O	O
Haptic	O	O
Development	O	O
Platform	O	O
for	O	O
Android	O	O
.	O	O
Troubleshooting	O	O
If	O	O
your	O	O
device	O	O
won	O	O
'	O	O
t	O	O
vibrate	O	O
,	O	O
first	O	O
make	O	O
sure	O	O
that	O	O
it	O	O
can	O	O
vibrate	O	O
:	O	O
#	O	O
pre	O	O
Secondly	O	O
,	O	O
please	O	O
ensure	O	O
that	O	O
you	O	O
'	O	O
ve	O	O
given	O	O
your	O	O
application	O	O
the	O	O
permission	O	O
to	O	O
vibrate	O	O
!	O	O
Refer	O	O
back	O	O
to	O	O
the	O	O
first	O	O
point	O	O
.	O	O
Question	O	O
-	O	O
13291076	O	O
,	O	O
answer	O	O
-	O	O
13291108	O	O
Use	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
you	O	O
want	O	O
to	O	O
make	O	O
a	O	O
comparison	O	O
or	O	O
use	O	O
the	O	O
hardcoded	O	O
value	O	O
for	O	O
some	O	O
internal	O	O
use	O	O
in	O	O
your	O	O
code	O	O
.	O	O
Use	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
you	O	O
want	O	O
to	O	O
present	O	O
information	O	O
to	O	O
a	O	O
user	O	O
(	O	O
including	O	O
a	O	O
developper	O	O
looking	O	O
at	O	O
a	O	O
log	O	O
)	O	O
.	O	O
Never	O	O
rely	O	O
in	O	O
your	O	O
code	O	O
on	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
giving	O	O
a	O	O
specific	O	O
value	O	O
.	O	O
Never	O	O
test	O	O
it	O	O
against	O	O
a	O	O
specific	O	O
string	O	O
.	O	O
If	O	O
your	O	O
code	O	O
breaks	O	O
when	O	O
someone	O	O
correctly	O	O
changes	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
return	O	O
,	O	O
then	O	O
it	O	O
was	O	O
already	O	O
broken	O	O
.	O	O
From	O	O
the	O	O
javadoc	O	O
(	O	O
emphasis	O	O
mine	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
31931870	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
singletonList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
26318569	O	O
,	O	O
answer	O	O
-	O	O
26319364	O	O
You	O	O
'	O	O
re	O	O
nesting	O	O
mocking	O	O
inside	O	O
of	O	O
mocking	O	O
.	O	O
You	O	O
'	O	O
re	O	O
calling	O	O
getSomeList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
does	O	O
some	O	O
mocking	O	O
,	O	O
before	O	O
you	O	O
'	O	O
ve	O	O
finished	O	O
the	O	O
mocking	O	O
for	O	O
MyMainModel	B-api_mention	O
.	O	O
Mockito	O	O
doesn	O	O
'	O	O
t	O	O
like	O	O
it	O	O
when	O	O
you	O	O
do	O	O
this	O	O
.	O	O
Replace	O	O
#	O	O
pre	O	O
with	O	O
#	O	O
pre	O	O
To	O	O
understand	O	O
why	O	O
this	O	O
causes	O	O
a	O	O
problem	O	O
,	O	O
you	O	O
need	O	O
to	O	O
know	O	O
a	O	O
little	O	O
about	O	O
how	O	O
Mockito	B-api_mention	B-api_mention
works	O	O
,	O	O
and	O	O
also	O	O
be	O	O
aware	O	O
in	O	O
what	O	O
order	O	O
expressions	O	O
and	O	O
statements	O	O
are	O	O
evaluated	O	O
in	O	O
Java	O	O
.	O	O
Mockito	B-api_mention	O
can	O	O
'	O	O
t	O	O
read	O	O
your	O	O
source	O	O
code	O	O
,	O	O
so	O	O
in	O	O
order	O	O
to	O	O
figure	O	O
out	O	O
what	O	O
you	O	O
are	O	O
asking	O	O
it	O	O
to	O	O
do	O	O
,	O	O
it	O	O
relies	O	O
a	O	O
lot	O	O
on	O	O
static	O	O
state	O	O
.	O	O
When	O	O
you	O	O
call	O	O
a	O	O
method	O	O
on	O	O
a	O	O
mock	B-api_mention	O
object	O	O
,	O	O
Mockito	B-api_mention	O
records	O	O
the	O	O
details	O	O
of	O	O
the	O	O
call	O	O
in	O	O
an	O	O
internal	O	O
list	O	O
of	O	O
invocations	O	O
.	O	O
The	O	O
when	O	O
method	O	O
reads	O	O
the	O	O
last	O	O
of	O	O
these	O	O
invocations	O	O
off	O	O
the	O	O
list	O	O
and	O	O
records	O	O
this	O	O
invocation	O	O
in	O	O
the	O	O
OngoingStubbing	B-api_mention	B-api_mention
object	O	O
it	O	O
returns	O	O
.	O	O
The	O	O
line	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
thenReturn	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
causes	O	O
the	O	O
following	O	O
interactions	O	O
with	O	O
Mockito	B-api_mention	O
:	O	O
#	O	O
li	O	O
Mock	B-api_mention	O
method	O	O
mainModel	B-api_mention	O
.	I-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
Static	O	O
method	O	O
when	O	O
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
Method	O	O
thenReturn	O	O
is	O	O
called	O	O
on	O	O
the	O	O
OngoingStubbing	B-api_mention	B-api_mention
object	O	O
returned	O	O
by	O	O
the	O	O
when	O	O
method	O	O
.	O	O
The	O	O
thenReturn	O	B-api_mention
method	O	O
can	O	O
then	O	O
instruct	O	O
the	O	O
mock	O	O
it	O	O
received	O	O
via	O	O
the	O	O
OngoingStubbing	B-api_mention	B-api_mention
method	O	O
to	O	O
handle	O	O
any	O	O
suitable	O	O
call	O	O
to	O	O
the	O	O
getList	O	B-api_mention
method	O	O
to	O	O
return	O	O
someModelList	O	B-api_mention
.	O	O
In	O	O
fact	O	O
,	O	O
as	O	O
Mockito	B-api_mention	B-api_mention
can	O	O
'	O	O
t	O	O
see	O	O
your	O	O
code	O	O
,	O	O
you	O	O
can	O	O
also	O	O
write	O	O
your	O	O
mocking	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
style	O	O
is	O	O
somewhat	O	O
less	O	O
clear	O	O
to	O	O
read	O	O
,	O	O
especially	O	O
since	O	O
in	O	O
this	O	O
case	O	O
the	O	O
null	O	O
has	O	O
to	O	O
be	O	O
casted	O	O
,	O	O
but	O	O
it	O	O
generates	O	O
the	O	O
same	O	O
sequence	O	O
of	O	O
interactions	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
and	O	O
will	O	O
achieve	O	O
the	O	O
same	O	O
result	O	O
as	O	O
the	O	O
line	O	O
above	O	O
.	O	O
However	O	O
,	O	O
the	O	O
line	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
thenReturn	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
causes	O	O
the	O	O
following	O	O
interactions	O	O
with	O	O
Mockito	B-api_mention	O
:	O	O
#	O	O
li	O	O
Mock	B-api_mention	O
method	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
Static	O	O
method	O	O
when	O	O
is	O	O
called	O	O
,	O	O
#	O	O
li	O	O
A	O	O
new	O	O
mock	O	O
of	O	O
SomeModel	O	B-api_mention
is	O	O
created	O	O
(	O	O
inside	O	O
getSomeList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
,	O	O
#	O	O
li	O	O
Mock	B-api_mention	O
method	O	O
model	O	O
.	B-api_mention	B-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
At	O	O
this	O	O
point	O	O
Mockito	B-api_mention	O
gets	O	O
confused	O	O
.	O	O
It	O	O
thought	O	O
you	O	O
were	O	O
mocking	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
now	O	O
you	O	O
'	O	O
re	O	O
telling	O	O
it	O	O
you	O	O
want	O	O
to	O	O
mock	O	O
the	O	O
model	O	O
.	B-api_mention	B-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
To	O	O
Mockito	B-api_mention	O
,	O	O
it	O	O
looks	O	O
like	O	O
you	O	O
'	O	O
re	O	O
doing	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
looks	O	O
silly	O	O
to	O	O
Mockito	B-api_mention	O
as	O	O
it	O	O
can	O	O
'	O	O
t	O	O
be	O	O
sure	O	O
what	O	O
you	O	O
'	O	O
re	O	O
doing	O	O
with	O	O
mainModel	O	O
.	B-api_mention	B-api_mention
getList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
that	O	O
we	O	O
did	O	O
not	O	O
get	O	O
to	O	O
the	O	O
thenReturn	O	O
method	O	O
call	O	O
,	O	O
as	O	O
the	O	O
JVM	O	O
needs	O	O
to	O	O
evaluate	O	O
the	O	O
parameters	O	O
to	O	O
this	O	O
method	O	O
before	O	O
it	O	O
can	O	O
call	O	O
the	O	O
method	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
this	O	O
means	O	O
calling	O	O
the	O	O
getSomeList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Generally	O	O
it	O	O
is	O	O
a	O	O
bad	O	O
design	O	O
decision	O	O
to	O	O
rely	O	O
on	O	O
static	O	O
state	O	O
,	O	O
as	O	O
Mockito	B-api_mention	O
does	O	O
,	O	O
because	O	O
it	O	O
can	O	O
lead	O	O
to	O	O
cases	O	O
where	O	O
the	O	O
Principle	O	O
of	O	O
Least	O	O
Astonishment	O	O
is	O	O
violated	O	O
.	O	O
However	O	O
,	O	O
Mockito	B-api_mention	O
'	I-api_mention	O
s	I-api_mention	O
design	O	O
does	O	O
make	O	O
for	O	O
clear	O	O
and	O	O
expressive	O	O
mocking	O	O
,	O	O
even	O	O
if	O	O
it	O	O
leads	O	O
to	O	O
astonishment	O	O
sometimes	O	O
.	O	O
Finally	O	O
,	O	O
recent	O	O
versions	O	O
of	O	O
Mockito	B-api_mention	B-api_mention
add	O	O
an	O	O
extra	O	O
line	O	O
to	O	O
the	O	O
error	O	O
message	O	O
above	O	O
.	O	O
This	O	O
extra	O	O
line	O	O
indicates	O	O
you	O	O
may	O	O
be	O	O
in	O	O
the	O	O
same	O	O
situation	O	O
as	O	O
this	O	O
question	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
27683759	O	O
,	O	O
answer	O	O
-	O	O
27684042	O	O
In	O	O
a	O	O
nutshell	O	O
,	O	O
this	O	O
creates	O	O
an	O	O
empty	O	O
,	O	O
immutable	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
look	O	O
at	O	O
the	O	O
expression	O	O
bit	O	O
by	O	O
bit	O	O
.	O	O
Collections	B-api_mention	O
is	O	O
the	O	O
name	O	O
of	O	O
a	O	O
class	O	O
.	O	O
From	O	O
the	O	O
Javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
emptyList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
name	O	O
of	O	O
a	O	O
static	O	O
method	O	O
defined	O	O
in	O	O
the	O	O
Collections	B-api_mention	B-api_mention
class	O	O
(	O	O
Javadoc	O	O
)	O	O
.	O	O
It	O	O
is	O	O
a	O	O
generic	O	O
method	O	O
,	O	O
and	O	O
the	O	O
<	O	O
String	O	O
>	O	O
in	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
emptyList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
specifies	O	O
the	O	O
generic	O	O
type	O	O
argument	O	O
.	O	O
The	O	O
method	O	O
returns	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
in	O	O
this	O	O
case	O	O
is	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
:	O	O
a	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
More	O	O
specifically	O	O
,	O	O
it	O	O
returns	O	O
an	O	O
empty	O	O
,	O	O
immutable	O	O
list	O	O
of	O	O
strings	O	O
.	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
28319221	O	O
Don	O	O
'	O	O
t	O	O
worry	O	O
about	O	O
any	O	O
performance	O	O
differences	O	O
,	O	O
they	O	O
'	O	O
re	O	O
going	O	O
to	O	O
be	O	O
minimal	O	O
in	O	O
this	O	O
case	O	O
normally	O	O
.	O	O
Method	O	O
2	O	O
is	O	O
preferable	O	O
because	O	O
#	O	O
li	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
require	O	O
mutating	O	O
a	O	O
collection	O	O
that	O	O
exists	O	O
outside	O	O
the	O	O
lambda	O	O
expression	O	O
,	O	O
#	O	O
li	O	O
it	O	O
'	O	O
s	O	O
more	O	O
readable	O	O
because	O	O
the	O	O
different	O	O
steps	O	O
that	O	O
are	O	O
performed	O	O
in	O	O
the	O	O
collection	O	O
pipeline	O	O
are	O	O
written	O	O
sequentially	O	O
(	O	O
first	O	O
a	O	O
filter	O	O
operation	O	O
,	O	O
then	O	O
a	O	O
map	O	O
operation	O	O
,	O	O
then	O	O
collecting	O	O
the	O	O
result	O	O
)	O	O
,	O	O
(	O	O
for	O	O
more	O	O
info	O	O
on	O	O
the	O	O
benefits	O	O
of	O	O
collection	O	O
pipelines	O	O
,	O	O
see	O	O
Martin	O	O
Fowler	O	O
'	O	O
s	O	O
excellent	O	O
article	O	O
)	O	O
#	O	O
li	O	O
you	O	O
can	O	O
easily	O	O
change	O	O
the	O	O
way	O	O
values	O	O
are	O	O
collected	O	O
by	O	O
replacing	O	O
the	O	O
Collector	B-api_mention	B-api_mention
that	O	O
is	O	O
used	O	O
.	O	O
In	O	O
some	O	O
cases	O	O
you	O	O
may	O	O
need	O	O
to	O	O
write	O	O
your	O	O
own	O	O
Collector	B-api_mention	B-api_mention
,	O	O
but	O	O
then	O	O
the	O	O
benefit	O	O
is	O	O
that	O	O
you	O	O
can	O	O
easily	O	O
reuse	O	O
that	O	O
.	O	O
Question	O	O
-	O	O
6841333	O	O
If	O	O
I	O	O
run	O	O
the	O	O
following	O	O
program	O	O
,	O	O
which	O	O
parses	O	O
two	O	O
date	O	O
strings	O	O
referencing	O	O
times	O	O
one	O	O
second	O	O
apart	O	O
and	O	O
compares	O	O
them	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
output	O	O
is	O	O
:	O	O
353	O	O
Why	O	O
is	O	O
ld4	O	O
-	O	O
ld3	O	O
not	O	O
1	O	O
(	O	O
as	O	O
I	O	O
would	O	O
expect	O	O
from	O	O
the	O	O
one	O	O
-	O	O
second	O	O
difference	O	O
in	O	O
the	O	O
times	O	O
)	O	O
,	O	O
but	O	O
353	O	O
?	O	O
If	O	O
I	O	O
change	O	O
the	O	O
dates	O	O
to	O	O
times	O	O
one	O	O
second	O	O
later	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
ld4	O	O
-	O	O
ld3	O	O
will	O	O
be	O	O
1	O	O
.	O	O
Java	O	O
version	O	O
:	O	O
#	O	O
pre	O	O
Timezone	B-api_mention	O
(	O	O
TimeZone	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
15202997	O	O
,	O	O
answer	O	O
-	O	O
37603567	O	O
this	O	O
is	O	O
best	O	O
document	O	O
I	O	O
found	O	O
describing	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
a	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7693324	O	O
,	O	O
answer	O	O
-	O	O
7693341	O	O
To	O	O
convert	O	O
a	O	O
String	B-api_mention	B-api_mention
to	O	O
a	O	O
Long	B-api_mention	B-api_mention
(	O	O
object	O	O
)	O	O
,	O	O
use	O	O
Long	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
longValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
See	O	O
link	O	O
Question	O	O
-	O	O
12539365	O	O
,	O	O
answer	O	O
-	O	O
12562433	O	O
This	O	O
is	O	O
great	O	O
question	O	O
!	O	O
I	O	O
think	O	O
the	O	O
root	O	O
cause	O	O
of	O	O
it	O	O
is	O	O
the	O	O
following	O	O
,	O	O
we	O	O
are	O	O
using	O	O
JUnit	O	O
not	O	O
only	O	O
for	O	O
unit	O	O
testing	O	O
.	O	O
So	O	O
the	O	O
question	O	O
should	O	O
be	O	O
splited	O	O
up	O	O
:	O	O
#	O	O
li	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
integration	O	O
(	O	O
or	O	O
any	O	O
other	O	O
higher	O	O
-	O	O
than	O	O
-	O	O
unit	O	O
testing	O	O
)	O	O
testing	O	O
?	O	O
#	O	O
li	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
black	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
?	O	O
#	O	O
li	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
white	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
?	O	O
so	O	O
if	O	O
we	O	O
will	O	O
ignore	O	O
higher	O	O
-	O	O
than	O	O
-	O	O
unit	O	O
testing	O	O
,	O	O
the	O	O
question	O	O
can	O	O
be	O	O
rephrased	O	O
"	O	O
Using	O	O
white	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
great	O	O
couple	O	O
between	O	O
unit	O	O
test	O	O
and	O	O
my	O	O
could	O	O
implementation	O	O
,	O	O
can	O	O
I	O	O
make	O	O
some	O	O
"	O	O
grey	O	O
-	O	O
box	O	O
"	O	O
unit	O	O
-	O	O
testing	O	O
and	O	O
what	O	O
rules	O	O
of	O	O
thumb	O	O
I	O	O
should	O	O
use	O	O
for	O	O
this	O	O
"	O	O
.	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
go	O	O
through	O	O
all	O	O
of	O	O
this	O	O
step	O	O
-	O	O
by	O	O
-	O	O
step	O	O
.	O	O
*	O	O
-	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
integration	O	O
(	O	O
or	O	O
any	O	O
other	O	O
higher	O	O
-	O	O
than	O	O
-	O	O
unit	O	O
testing	O	O
)	O	O
testing	O	O
?	O	O
*	O	O
I	O	O
think	O	O
the	O	O
answer	O	O
is	O	O
clearly	O	O
no	O	O
,	O	O
moreover	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
use	O	O
mocks	O	O
for	O	O
this	O	O
.	O	O
Your	O	O
test	O	O
should	O	O
be	O	O
as	O	O
close	O	O
to	O	O
real	O	O
application	O	O
as	O	O
possible	O	O
.	O	O
You	O	O
are	O	O
testing	O	O
complete	O	O
use	O	O
case	O	O
,	O	O
not	O	O
isolated	O	O
part	O	O
of	O	O
the	O	O
application	O	O
.	O	O
*	O	O
black	O	O
-	O	O
box	O	O
vs	O	O
white	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
black	O	O
-	O	O
box	O	O
state	O	O
If	O	O
you	O	O
are	O	O
using	O	O
white	O	O
-	O	O
box	O	O
approach	O	O
what	O	O
is	O	O
you	O	O
really	O	O
doing	O	O
,	O	O
you	O	O
'	O	O
re	O	O
testing	O	O
the	O	O
behaviour	O	O
of	O	O
your	O	O
unit	O	O
.	O	O
In	O	O
this	O	O
approach	O	O
calling	O	O
to	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
essential	O	O
,	O	O
you	O	O
should	O	O
verify	O	O
that	O	O
your	O	O
unit	O	O
behaves	O	O
as	O	O
you	O	O
'	O	O
re	O	O
expecting	O	O
to	O	O
.	O	O
rules	O	O
of	O	O
thumbs	O	O
for	O	O
grey	O	O
-	O	O
box	O	O
-	O	O
testing	O	O
The	O	O
problem	O	O
with	O	O
white	O	O
-	O	O
box	O	O
testing	O	O
is	O	O
it	O	O
creates	O	O
a	O	O
high	O	O
coupling	O	O
.	O	O
One	O	O
possible	O	O
solution	O	O
is	O	O
to	O	O
do	O	O
grey	O	O
-	O	O
box	O	O
-	O	O
testing	O	O
,	O	O
not	O	O
white	O	O
-	O	O
box	O	O
-	O	O
testing	O	O
.	O	O
This	O	O
is	O	O
sort	O	O
of	O	O
combination	O	O
of	O	O
black	O	O
&	O	O
white	O	O
box	O	O
testing	O	O
.	O	O
You	O	O
are	O	O
really	O	O
testing	O	O
the	O	O
behaviour	O	O
of	O	O
your	O	O
unit	O	O
like	O	O
in	O	O
white	O	O
-	O	O
box	O	O
testing	O	O
,	O	O
but	O	O
in	O	O
general	O	O
you	O	O
make	O	O
it	O	O
implementation	O	O
-	O	O
agnostic	O	O
when	O	O
possible	O	O
.	O	O
When	O	O
it	O	O
is	O	O
possible	O	O
,	O	O
you	O	O
will	O	O
just	O	O
make	O	O
a	O	O
check	O	O
like	O	O
in	O	O
black	O	O
-	O	O
box	O	O
case	O	O
,	O	O
just	O	O
asserts	O	O
that	O	O
output	O	O
is	O	O
what	O	O
is	O	O
your	O	O
expected	O	O
to	O	O
be	O	O
.	O	O
So	O	O
,	O	O
the	O	O
essence	O	O
of	O	O
your	O	O
question	O	O
is	O	O
when	O	O
it	O	O
is	O	O
possible	O	O
.	O	O
This	O	O
is	O	O
really	O	O
hard	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
have	O	O
a	O	O
good	O	O
example	O	O
,	O	O
but	O	O
I	O	O
can	O	O
give	O	O
you	O	O
to	O	O
examples	O	O
.	O	O
In	O	O
the	O	O
case	O	O
that	O	O
was	O	O
mentioned	O	O
above	O	O
with	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
vs	O	O
equalsIgnoreCase	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
shouldn	O	O
'	O	O
t	O	O
call	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
just	O	O
assert	O	O
the	O	O
output	O	O
.	O	O
If	O	O
you	O	O
couldn	O	O
'	O	O
t	O	O
do	O	O
it	O	O
,	O	O
break	O	O
down	O	O
your	O	O
code	O	O
to	O	O
the	O	O
smaller	O	O
unit	O	O
,	O	O
until	O	O
you	O	O
can	O	O
do	O	O
it	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
suppose	O	O
you	O	O
have	O	O
some	O	O
@	O	O
Service	O	O
and	O	O
you	O	O
are	O	O
writting	O	O
@	O	O
Web	O	O
-	O	O
Service	O	O
that	O	O
is	O	O
essentially	O	O
wrapper	O	O
upon	O	O
your	O	O
@	O	O
Service	O	O
-	O	O
it	O	O
delegates	O	O
all	O	O
calls	O	O
to	O	O
the	O	O
@	O	O
Service	O	O
(	O	O
and	O	O
making	O	O
some	O	O
extra	O	O
error	O	O
handling	O	O
)	O	O
.	O	O
In	O	O
this	O	O
case	O	O
calling	O	O
to	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
essential	O	O
,	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
duplicate	O	O
all	O	O
of	O	O
your	O	O
checks	O	O
that	O	O
you	O	O
did	O	O
for	O	O
the	O	O
@	O	O
Serive	O	O
,	O	O
verifying	O	O
that	O	O
you	O	O
'	O	O
re	O	O
calling	O	O
to	O	O
@	O	O
Service	O	O
with	O	O
correct	O	O
parammeter	O	O
list	O	O
is	O	O
sufficient	O	O
.	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32175175	O	O
Note	O	O
that	O	O
a	O	O
.	O	O
b	O	O
and	O	O
c	O	O
are	O	O
instances	O	O
of	O	O
primitive	O	O
wrapper	O	O
classes	O	O
(	O	O
such	O	O
as	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
,	O	O
etc	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
These	O	O
classes	O	O
are	O	O
final	O	O
and	O	O
cannot	O	O
be	O	O
extended	O	O
,	O	O
so	O	O
you	O	O
can	O	O
'	O	O
t	O	O
override	O	O
their	O	O
equals	O	O
implementation	O	O
.	O	O
Therefore	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
always	O	O
return	O	O
true	O	O
,	O	O
since	O	O
those	O	O
classes	O	O
implement	O	O
equals	O	B-api_mention
properly	O	O
.	O	O
Question	O	O
-	O	O
6652687	O	O
#	O	O
blockquote	O	O
Is	O	O
there	O	O
a	O	O
convenience	O	O
method	O	O
to	O	O
strip	O	O
any	O	O
leading	O	O
or	O	O
trailing	O	O
spaces	O	O
from	O	O
a	O	O
Java	O	O
String	B-api_mention	B-api_mention
?	O	O
Something	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
Result	O	O
:	O	O
no	O	O
spaces	O	O
:	O	O
keep	O	O
this	O	O
myString	O	O
.	B-api_mention	B-api_mention
replace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
replace	O	O
the	O	O
space	O	O
between	O	O
keep	O	O
and	O	O
this	O	O
.	O	O
Thanks	O	O
Question	O	O
-	O	O
18532488	O	O
,	O	O
answer	O	O
-	O	O
24296741	O	O
Here	O	O
'	O	O
s	O	O
another	O	O
technique	O	O
I	O	O
ran	O	O
across	O	O
the	O	O
other	O	O
day	O	O
:	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
call	O	O
creates	O	O
a	O	O
List	B-api_mention	B-api_mention
containing	O	O
n	O	O
copies	O	O
of	O	O
whatever	O	O
value	O	O
you	O	O
provide	O	O
.	O	O
In	O	O
this	O	O
case	O	O
it	O	O
'	O	O
s	O	O
the	O	O
boxed	O	O
Integer	O	B-api_mention
value	O	O
1	O	O
.	O	O
Of	O	O
course	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
actually	O	O
create	O	O
a	O	O
list	O	O
with	O	O
n	O	O
elements	O	O
;	O	O
it	O	O
creates	O	O
a	O	O
"	O	O
virtualized	O	O
"	O	O
list	O	O
that	O	O
contains	O	O
only	O	O
the	O	O
value	O	O
and	O	O
the	O	O
length	O	O
,	O	O
and	O	O
any	O	O
call	O	O
to	O	O
get	O	O
within	O	O
range	O	O
just	O	O
returns	O	O
the	O	O
value	O	O
.	O	O
The	O	O
nCopies	B-api_mention	O
method	O	O
has	O	O
been	O	O
around	O	O
since	O	O
the	O	O
Collections	B-api_mention	B-api_mention
Framework	O	O
was	O	O
introduced	O	O
way	O	O
back	O	O
in	O	O
JDK	O	O
1	O	O
.	O	O
2	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
the	O	O
ability	O	O
to	O	O
create	O	O
a	O	O
stream	O	O
from	O	O
its	O	O
result	O	O
was	O	O
added	O	O
in	O	O
Java	O	O
SE	O	O
8	O	O
.	O	O
Big	O	O
deal	O	O
,	O	O
another	O	O
way	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
in	O	O
about	O	O
the	O	O
same	O	O
number	O	O
of	O	O
lines	O	O
.	O	O
However	O	O
,	O	O
this	O	O
technique	O	O
is	O	O
faster	O	O
than	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
generate	I-api_mention	I-api_mention
and	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
iterate	I-api_mention	I-api_mention
approaches	O	O
,	O	O
and	O	O
surprisingly	O	O
,	O	O
it	O	O
'	O	O
s	O	O
also	O	O
faster	O	O
than	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
approach	O	O
.	O	O
For	O	O
iterate	O	O
and	O	O
generate	O	O
the	O	O
result	O	O
is	O	O
perhaps	O	O
not	O	O
too	O	O
surprising	O	O
.	O	O
The	O	O
streams	O	O
framework	O	O
(	O	O
really	O	O
,	O	O
the	O	O
Spliterators	O	O
for	O	O
these	O	O
streams	O	O
)	O	O
is	O	O
built	O	O
on	O	O
the	O	O
assumption	O	O
that	O	O
the	O	O
lambdas	O	O
will	O	O
potentially	O	O
generate	O	O
different	O	O
values	O	O
each	O	O
time	O	O
,	O	O
and	O	O
that	O	O
they	O	O
will	O	O
generate	O	O
an	O	O
unbounded	O	O
number	O	O
of	O	O
results	O	O
.	O	O
This	O	O
makes	O	O
parallel	O	O
splitting	O	O
particularly	O	O
difficult	O	O
.	O	O
The	O	O
iterate	O	O
method	O	O
is	O	O
also	O	O
problematic	O	O
for	O	O
this	O	O
case	O	O
because	O	O
each	O	O
call	O	O
requires	O	O
the	O	O
result	O	O
of	O	O
the	O	O
previous	O	O
one	O	O
.	O	O
So	O	O
the	O	O
streams	O	O
using	O	O
generate	O	O
and	O	O
iterate	O	O
don	O	O
'	O	O
t	O	O
do	O	O
very	O	O
well	O	O
for	O	O
generating	O	O
repeated	O	O
constants	O	O
.	O	O
The	O	O
relatively	O	O
poor	O	O
performance	O	O
of	O	O
range	O	O
is	O	O
surprising	O	O
.	O	O
This	O	O
too	O	O
is	O	O
virtualized	O	O
,	O	O
so	O	O
the	O	O
elements	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
all	O	O
exist	O	O
in	O	O
memory	O	O
,	O	O
and	O	O
the	O	O
size	O	O
is	O	O
known	O	O
up	O	O
front	O	O
.	O	O
This	O	O
should	O	O
make	O	O
for	O	O
a	O	O
fast	O	O
and	O	O
easily	O	O
parallelizable	O	O
spliterator	O	O
.	O	O
But	O	O
it	O	O
surprisingly	O	O
didn	O	O
'	O	O
t	O	O
do	O	O
very	O	O
well	O	O
.	O	O
Perhaps	O	O
the	O	O
reason	O	O
is	O	O
that	O	O
range	O	O
has	O	O
to	O	O
compute	O	O
a	O	O
value	O	O
for	O	O
each	O	O
element	O	O
of	O	O
the	O	O
range	O	O
and	O	O
then	O	O
call	O	O
a	O	O
function	O	O
on	O	O
it	O	O
.	O	O
But	O	O
this	O	O
function	O	O
just	O	O
ignores	O	O
its	O	O
input	O	O
and	O	O
returns	O	O
a	O	O
constant	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
surprised	O	O
this	O	O
isn	O	O
'	O	O
t	O	O
inlined	O	O
and	O	O
killed	O	O
.	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
technique	O	O
has	O	O
to	O	O
do	O	O
boxing	O	O
/	O	O
unboxing	O	O
in	O	O
order	O	O
to	O	O
handle	O	O
the	O	O
values	O	O
,	O	O
since	O	O
there	O	O
are	O	O
no	O	O
primitive	O	O
specializations	O	O
of	O	O
List	B-api_mention	B-api_mention
.	O	O
Since	O	O
the	O	O
value	O	O
is	O	O
the	O	O
same	O	O
every	O	O
time	O	O
,	O	O
it	O	O
'	O	O
s	O	O
basically	O	O
boxed	O	O
once	O	O
and	O	O
that	O	O
box	O	O
is	O	O
shared	O	O
by	O	O
all	O	O
n	O	O
copies	O	O
.	O	O
I	O	O
suspect	O	O
boxing	O	O
/	O	O
unboxing	O	O
is	O	O
highly	O	O
optimized	O	O
,	O	O
even	O	O
intrinsified	O	O
,	O	O
and	O	O
it	O	O
can	O	O
be	O	O
inlined	O	O
well	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
are	O	O
the	O	O
JMH	O	O
results	O	O
:	O	O
(	O	O
2	O	O
.	O	O
8GHz	O	O
Core2Duo	O	O
)	O	O
#	O	O
pre	O	O
There	O	O
is	O	O
a	O	O
fair	O	O
amount	O	O
of	O	O
variance	O	O
in	O	O
the	O	O
ncopies	O	O
version	O	O
,	O	O
but	O	O
overall	O	O
it	O	O
seems	O	O
comfortably	O	O
20x	O	O
faster	O	O
than	O	O
the	O	O
range	O	O
version	O	O
.	O	O
(	O	O
I	O	O
'	O	O
d	O	O
be	O	O
quite	O	O
willing	O	O
to	O	O
believe	O	O
that	O	O
I	O	O
'	O	O
ve	O	O
done	O	O
something	O	O
wrong	O	O
,	O	O
though	O	O
.	O	O
)	O	O
I	O	O
'	O	O
m	O	O
surprised	O	O
at	O	O
how	O	O
well	O	O
the	O	O
nCopies	B-api_mention	O
technique	O	O
works	O	O
.	O	O
Internally	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
do	O	O
very	O	O
much	O	O
special	O	O
,	O	O
with	O	O
the	O	O
stream	O	O
of	O	O
the	O	O
virtualized	O	O
list	O	O
simply	O	O
being	O	O
implemented	O	O
using	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
!	O	O
I	O	O
had	O	O
expected	O	O
that	O	O
it	O	O
would	O	O
be	O	O
necessary	O	O
to	O	O
create	O	O
a	O	O
specialized	O	O
spliterator	O	O
to	O	O
get	O	O
this	O	O
to	O	O
go	O	O
fast	O	O
,	O	O
but	O	O
it	O	O
already	O	O
seems	O	O
to	O	O
be	O	O
pretty	O	O
good	O	O
.	O	O
Question	O	O
-	O	O
4818699	O	O
,	O	O
answer	O	O
-	O	O
4819109	O	O
If	O	O
you	O	O
look	O	O
at	O	O
the	O	O
methods	O	O
AtomicInteger	B-api_mention	B-api_mention
has	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
notice	O	O
that	O	O
they	O	O
tend	O	O
to	O	O
correspond	O	O
to	O	O
common	O	O
operations	O	O
on	O	O
ints	O	O
.	O	O
For	O	O
instance	O	O
:	O	O
#	O	O
pre	O	O
is	O	O
the	O	O
thread	O	O
-	O	O
safe	O	O
version	O	O
of	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
methods	O	O
map	O	O
like	O	O
this	O	O
:	O	O
+	O	O
+	O	O
i	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
incrementAndGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
i	O	O
+	O	O
+	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
getAndIncrement	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
-	O	O
i	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
decrementAndGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
i	O	O
-	O	O
-	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
getAndDecrement	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
i	O	O
=	O	O
x	O	O
is	O	O
i	O	O
.	B-api_mention	B-api_mention
set	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
x	O	O
=	O	O
i	O	O
is	O	O
x	O	O
=	O	O
i	O	O
.	B-api_mention	O
get	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
There	O	O
are	O	O
other	O	O
convenience	O	O
methods	O	O
as	O	O
well	O	O
,	O	O
like	O	O
compareAndSet	B-api_mention	B-api_mention
or	O	O
addAndGet	B-api_mention	B-api_mention
Question	O	O
-	O	O
18448671	O	O
,	O	O
answer	O	O
-	O	O
26937769	O	O
Though	O	O
one	O	O
answer	O	O
is	O	O
accepted	O	O
and	O	O
this	O	O
is	O	O
an	O	O
old	O	O
one	O	O
,	O	O
I	O	O
thought	O	O
posting	O	O
this	O	O
answer	O	O
as	O	O
it	O	O
does	O	O
not	O	O
use	O	O
Iterator	B-api_mention	B-api_mention
#	O	O
pre	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777311	O	O
The	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
check	O	O
if	O	O
both	O	O
arrays	O	O
contain	O	O
the	O	O
same	O	O
number	O	O
of	O	O
elements	O	O
,	O	O
and	O	O
all	O	O
corresponding	O	O
pairs	O	O
of	O	O
elements	O	O
in	O	O
the	O	O
two	O	O
arrays	O	O
are	O	O
equal	O	O
.	O	O
The	O	O
array1	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
compare	O	O
the	O	O
object	O	O
to	O	O
another	O	O
object	O	O
and	O	O
return	O	O
true	O	O
only	O	O
if	O	O
the	O	O
reference	O	O
of	O	O
the	O	O
two	O	O
object	O	O
are	O	O
equal	O	O
as	O	O
in	O	O
the	O	O
Object	O	B-api_mention
.	B-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
33635717	O	O
I	O	O
'	O	O
m	O	O
reading	O	O
up	O	O
about	O	O
Java	O	O
streams	O	O
and	O	O
discovering	O	O
new	O	O
things	O	O
as	O	O
I	O	O
go	O	O
along	O	O
.	O	O
One	O	O
of	O	O
the	O	O
new	O	O
things	O	O
I	O	O
found	O	O
was	O	O
the	O	O
peek	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
.	O	O
Almost	O	O
everything	O	O
I	O	O
'	O	O
ve	O	O
read	O	O
on	O	O
peek	O	O
says	O	O
it	O	O
should	O	O
be	O	O
used	O	O
to	O	O
debug	O	O
your	O	O
Streams	O	O
.	O	O
What	O	O
if	O	O
I	O	O
had	O	O
a	O	O
Stream	B-api_mention	B-api_mention
where	O	O
each	O	O
Account	O	O
has	O	O
a	O	O
username	O	O
,	O	O
password	O	O
field	O	O
and	O	O
a	O	O
login	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
and	O	O
loggedIn	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
method	O	O
.	O	O
I	O	O
also	O	O
have	O	O
Consumer	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
login	O	O
=	O	O
account	O	O
-	O	O
>	O	O
account	O	O
.	O	O
login	O	O
(	O	O
args	O	O
)	O	O
;	O	O
and	O	O
Predicate	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
loggedIn	O	O
=	O	O
account	O	O
-	O	O
>	O	O
account	O	O
.	O	O
loggedIn	O	O
(	O	O
args	O	O
)	O	O
;	O	O
Why	O	O
would	O	O
this	O	O
be	O	O
so	O	O
bad	O	O
?	O	O
#	O	O
pre	O	O
Now	O	O
as	O	O
far	O	O
as	O	O
I	O	O
can	O	O
tell	O	O
this	O	O
does	O	O
exactly	O	O
what	O	O
it	O	O
'	O	O
s	O	O
intended	O	O
to	O	O
do	O	O
.	O	O
It	O	O
;	O	O
#	O	O
li	O	O
Takes	O	O
a	O	O
list	O	O
of	O	O
accounts	O	O
#	O	O
li	O	O
Tries	O	O
to	O	O
log	O	O
in	O	O
to	O	O
each	O	O
account	O	O
#	O	O
li	O	O
Filters	O	O
out	O	O
any	O	O
account	O	O
which	O	O
aren	O	O
'	O	O
t	O	O
logged	O	O
in	O	O
#	O	O
li	O	O
Collects	O	O
the	O	O
logged	O	O
in	O	O
accounts	O	O
into	O	O
a	O	O
new	O	O
list	O	O
What	O	O
is	O	O
the	O	O
downside	O	O
of	O	O
doing	O	O
something	O	O
like	O	O
this	O	O
?	O	O
Any	O	O
reason	O	O
I	O	O
shouldn	O	O
'	O	O
t	O	O
proceed	O	O
?	O	O
Lastly	O	O
,	O	O
if	O	O
not	O	O
this	O	O
solution	O	O
then	O	O
what	O	O
?	O	O
The	O	O
original	O	O
version	O	O
of	O	O
this	O	O
used	O	O
the	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
as	O	O
follows	O	O
;	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276493	O	O
You	O	O
can	O	O
close	O	O
the	O	O
outer	O	O
most	O	O
stream	O	O
,	O	O
in	O	O
fact	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
retain	O	O
all	O	O
the	O	O
streams	O	O
wrapped	O	O
and	O	O
you	O	O
can	O	O
use	O	O
Java	O	O
7	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
.	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
subscribe	O	O
to	O	O
YAGNI	O	O
,	O	O
or	O	O
you	O	O
-	O	O
aint	O	O
-	O	O
gonna	O	O
-	O	O
need	O	O
-	O	O
it	O	O
,	O	O
you	O	O
should	O	O
be	O	O
only	O	O
adding	O	O
code	O	O
you	O	O
actually	O	O
need	O	O
.	O	O
You	O	O
shouldn	O	O
'	O	O
t	O	O
be	O	O
adding	O	O
code	O	O
you	O	O
imagine	O	O
you	O	O
might	O	O
need	O	O
but	O	O
in	O	O
reality	O	O
doesn	O	O
'	O	O
t	O	O
do	O	O
anything	O	O
useful	O	O
.	O	O
Take	O	O
this	O	O
example	O	O
and	O	O
imagine	O	O
what	O	O
could	O	O
possibly	O	O
go	O	O
wrong	O	O
if	O	O
you	O	O
didn	O	O
'	O	O
t	O	O
do	O	O
this	O	O
and	O	O
what	O	O
the	O	O
impact	O	O
would	O	O
be	O	O
?	O	O
#	O	O
pre	O	O
Lets	O	O
start	O	O
with	O	O
FileOutputStream	B-api_mention	B-api_mention
which	O	O
calls	O	O
open	O	O
to	O	O
do	O	O
all	O	O
the	O	O
real	O	O
work	O	O
.	O	O
/	O	O
*	O	O
*	O	O
*	O	O
Opens	O	O
a	O	O
file	O	O
,	O	O
with	O	O
the	O	O
specified	O	O
name	O	O
,	O	O
for	O	O
overwriting	O	O
or	O	O
appending	O	O
.	O	O
*	O	O
@	O	O
param	O	O
name	O	O
name	O	O
of	O	O
file	O	O
to	O	O
be	O	O
opened	O	O
*	O	O
@	O	O
param	O	O
append	O	O
whether	O	O
the	O	O
file	O	O
is	O	O
to	O	O
be	O	O
opened	O	O
in	O	O
append	O	O
mode	O	O
*	O	O
/	O	O
private	O	O
native	O	O
void	O	O
open	O	O
(	O	O
args	O	O
)	O	O
throws	O	O
FileNotFoundException	B-api_mention	B-api_mention
;	O	O
If	O	O
the	O	O
file	O	O
is	O	O
not	O	O
found	O	O
,	O	O
there	O	O
is	O	O
no	O	O
underlying	O	O
resource	O	O
to	O	O
close	O	O
,	O	O
so	O	O
closing	O	O
it	O	O
won	O	O
'	O	O
t	O	O
make	O	O
any	O	O
difference	O	O
.	O	O
If	O	O
The	O	O
file	O	O
exists	O	O
,	O	O
it	O	O
should	O	O
be	O	O
throwing	O	O
a	O	O
FileNotFoundException	B-api_mention	B-api_mention
.	O	O
So	O	O
there	O	O
is	O	O
nothing	O	O
to	O	O
be	O	O
gained	O	O
by	O	O
trying	O	O
to	O	O
close	O	O
the	O	O
resource	O	O
from	O	O
this	O	O
line	O	O
alone	O	O
.	O	O
The	O	O
reason	O	O
you	O	O
need	O	O
to	O	O
close	O	O
the	O	O
file	O	O
is	O	O
when	O	O
the	O	O
file	O	O
is	O	O
opened	O	O
successfully	O	O
,	O	O
but	O	O
you	O	O
later	O	O
get	O	O
an	O	O
error	O	O
.	O	O
Lets	O	O
look	O	O
at	O	O
the	O	O
next	O	O
stream	O	O
GZIPOutputStream	O	O
There	O	O
is	O	O
code	O	O
which	O	O
can	O	O
throw	O	O
an	O	O
exception	O	O
#	O	O
pre	O	O
This	O	O
writes	O	O
the	O	O
header	O	O
of	O	O
the	O	O
file	O	O
.	O	O
Now	O	O
it	O	O
would	O	O
be	O	O
very	O	O
unusual	O	O
for	O	O
you	O	O
to	O	O
be	O	O
able	O	O
to	O	O
open	O	O
a	O	O
file	O	O
for	O	O
writing	O	O
but	O	O
not	O	O
be	O	O
able	O	O
to	O	O
write	O	O
even	O	O
8	O	O
bytes	O	O
to	O	O
it	O	O
,	O	O
but	O	O
lets	O	O
imagine	O	O
this	O	O
could	O	O
happen	O	O
and	O	O
we	O	O
don	O	O
'	O	O
t	O	O
close	O	O
the	O	O
file	O	O
afterwards	O	O
.	O	O
What	O	O
does	O	O
happen	O	O
to	O	O
a	O	O
file	O	O
if	O	O
it	O	O
is	O	O
not	O	O
closed	O	O
?	O	O
You	O	O
don	O	O
'	O	O
t	O	O
get	O	O
any	O	O
unflushed	O	O
writes	O	O
,	O	O
they	O	O
are	O	O
discarded	O	O
and	O	O
in	O	O
this	O	O
case	O	O
,	O	O
there	O	O
is	O	O
no	O	O
successfully	O	O
written	O	O
bytes	O	O
to	O	O
the	O	O
stream	O	O
which	O	O
isn	O	O
'	O	O
t	O	O
buffered	O	O
at	O	O
this	O	O
point	O	O
anyway	O	O
.	O	O
But	O	O
a	O	O
file	O	O
which	O	O
is	O	O
not	O	O
closed	O	O
doesn	O	O
'	O	O
t	O	O
live	O	O
forever	O	O
,	O	O
instead	O	O
FileOutputStream	B-api_mention	B-api_mention
has	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
close	O	O
a	O	O
file	O	O
at	O	O
all	O	O
,	O	O
it	O	O
gets	O	O
closed	O	O
anyway	O	O
,	O	O
just	O	O
not	O	O
immediately	O	O
(	O	O
and	O	O
like	O	O
I	O	O
said	O	O
,	O	O
data	O	O
which	O	O
is	O	O
left	O	O
in	O	O
a	O	O
buffer	O	O
will	O	O
be	O	O
lost	O	O
this	O	O
way	O	O
,	O	O
but	O	O
there	O	O
is	O	O
none	O	O
at	O	O
this	O	O
point	O	O
)	O	O
What	O	O
is	O	O
the	O	O
consequence	O	O
of	O	O
not	O	O
closing	O	O
the	O	O
file	O	O
immediately	O	O
?	O	O
Under	O	O
normal	O	O
conditions	O	O
,	O	O
you	O	O
potentially	O	O
lose	O	O
some	O	O
data	O	O
,	O	O
and	O	O
you	O	O
potentially	O	O
run	O	O
out	O	O
of	O	O
file	O	O
descriptors	O	O
.	O	O
But	O	O
if	O	O
you	O	O
have	O	O
a	O	O
system	O	O
where	O	O
you	O	O
can	O	O
create	O	O
files	O	O
but	O	O
you	O	O
can	O	O
'	O	O
t	O	O
write	O	O
anything	O	O
to	O	O
them	O	O
,	O	O
you	O	O
have	O	O
a	O	O
bigger	O	O
problem	O	O
.	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
hard	O	O
to	O	O
imagine	O	O
why	O	O
you	O	O
are	O	O
repeatedly	O	O
trying	O	O
to	O	O
create	O	O
this	O	O
file	O	O
despite	O	O
the	O	O
fact	O	O
you	O	O
are	O	O
failing	O	O
.	O	O
Both	O	O
OutputStreamWriter	O	B-api_mention
and	O	O
BufferedWriter	O	B-api_mention
don	O	O
'	O	O
t	O	O
throw	O	O
IOException	B-api_mention	O
in	O	O
their	O	O
constructors	O	O
,	O	O
so	O	O
it	O	O
not	O	O
clear	O	O
what	O	O
problem	O	O
they	O	O
would	O	O
cause	O	O
.	O	O
In	O	O
The	O	O
case	O	O
of	O	O
BufferedWriter	O	B-api_mention
,	O	O
you	O	O
could	O	O
get	O	O
an	O	O
OutOfMemoryError	O	B-api_mention
.	O	O
In	O	O
this	O	O
case	O	O
it	O	O
will	O	O
immediately	O	O
trigger	O	O
a	O	O
GC	O	O
,	O	O
which	O	O
as	O	O
we	O	O
have	O	O
seen	O	O
will	O	O
close	O	O
the	O	O
file	O	O
anyway	O	O
.	O	O
Question	O	O
-	O	O
5071040	O	O
,	O	O
answer	O	O
-	O	O
5071064	O	O
There	O	O
are	O	O
multiple	O	O
ways	O	O
:	O	O
#	O	O
li	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
my	O	O
preference	O	O
)	O	O
#	O	O
li	O	O
StringLiteral	O	O
+	O	O
number	O	O
(	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
how	O	O
the	O	O
compiler	O	O
handles	O	O
it	O	O
,	O	O
perhaps	O	O
it	O	O
is	O	O
as	O	O
efficient	O	O
as	O	O
the	O	O
above	O	O
)	O	O
#	O	O
li	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
18777989	O	O
,	O	O
answer	O	O
-	O	O
18778228	O	O
You	O	O
made	O	O
a	O	O
good	O	O
summery	O	O
of	O	O
the	O	O
practical	O	O
differences	O	O
in	O	O
use	O	O
and	O	O
implementation	O	O
but	O	O
did	O	O
not	O	O
say	O	O
anything	O	O
about	O	O
the	O	O
difference	O	O
in	O	O
meaning	O	O
.	O	O
An	O	O
interface	O	O
is	O	O
a	O	O
description	O	O
of	O	O
the	O	O
behaviour	O	O
an	O	O
implementing	O	O
class	O	O
will	O	O
have	O	O
.	O	O
The	O	O
implementing	O	O
class	O	O
ensures	O	O
,	O	O
that	O	O
it	O	O
will	O	O
have	O	O
these	O	O
methods	O	O
that	O	O
can	O	O
be	O	O
used	O	O
on	O	O
it	O	O
.	O	O
It	O	O
is	O	O
basically	O	O
a	O	O
contract	O	O
or	O	O
a	O	O
promise	O	O
the	O	O
class	O	O
has	O	O
to	O	O
make	O	O
.	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
a	O	O
basis	O	O
for	O	O
different	O	O
subclasses	O	O
that	O	O
share	O	O
behaviour	O	O
which	O	O
does	O	O
not	O	O
need	O	O
to	O	O
be	O	O
repeatedly	O	O
be	O	O
created	O	O
.	O	O
Subclasses	O	O
must	O	O
complete	O	O
the	O	O
behaviour	O	O
and	O	O
have	O	O
the	O	O
option	O	O
to	O	O
override	O	O
predefine	O	O
behaviour	O	O
(	O	O
as	O	O
long	O	O
as	O	O
it	O	O
is	O	O
not	O	O
defined	O	O
as	O	O
final	O	O
or	O	O
private	O	O
)	O	O
.	O	O
You	O	O
will	O	O
find	O	O
good	O	O
examples	O	O
in	O	O
the	O	O
java	O	O
.	O	O
util	O	O
package	O	O
which	O	O
includes	O	O
interfaces	O	O
like	O	O
List	B-api_mention	B-api_mention
and	O	O
abstract	O	O
classes	O	O
like	O	O
AbstractList	B-api_mention	B-api_mention
which	O	O
already	O	O
implements	O	O
the	O	O
interface	O	O
.	O	O
The	O	O
official	O	O
documentation	O	O
describes	O	O
the	O	O
AbstractList	B-api_mention	B-api_mention
as	O	O
follows	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
32323081	O	O
I	O	O
have	O	O
a	O	O
question	O	O
regarding	O	O
Java	O	O
8	O	O
inference	O	O
with	O	O
respect	O	O
to	O	O
lambdas	O	O
and	O	O
their	O	O
related	O	O
exception	O	O
signatures	O	O
.	O	O
If	O	O
I	O	O
define	O	O
some	O	O
method	O	O
foo	O	O
:	O	O
#	O	O
pre	O	O
then	O	O
I	O	O
get	O	O
the	O	O
nice	O	O
and	O	O
concise	O	O
semantic	O	O
of	O	O
being	O	O
able	O	O
to	O	O
write	O	O
foo	O	O
(	O	O
args	O	O
)	O	O
;	O	O
in	O	O
most	O	O
cases	O	O
for	O	O
a	O	O
given	O	O
T	O	O
.	O	O
However	O	O
,	O	O
in	O	O
this	O	O
example	O	O
,	O	O
if	O	O
my	O	O
getTheT	O	O
operation	O	O
declares	O	O
that	O	O
it	O	O
throws	O	O
Exception	O	O
,	O	O
my	O	O
foo	O	O
method	O	O
which	O	O
takes	O	O
a	O	O
Supplier	B-api_mention	B-api_mention
no	O	O
longer	O	O
compiles	O	O
:	O	O
the	O	O
Supplier	B-api_mention	B-api_mention
method	O	O
signature	O	O
for	O	O
get	O	O
doesn	O	O
'	O	O
t	O	O
throw	O	O
exceptions	O	O
.	O	O
It	O	O
seems	O	O
like	O	O
a	O	O
decent	O	O
way	O	O
to	O	O
get	O	O
around	O	O
this	O	O
would	O	O
be	O	O
to	O	O
overload	O	O
foo	O	O
to	O	O
accept	O	O
either	O	O
option	O	O
,	O	O
with	O	O
the	O	O
overloaded	O	O
definition	O	O
being	O	O
:	O	O
#	O	O
pre	O	O
where	O	O
ThrowingSupplier	O	B-api_mention
is	O	O
defined	O	O
as	O	O
#	O	O
pre	O	O
In	O	O
this	O	O
way	O	O
,	O	O
we	O	O
have	O	O
one	O	O
Supplier	B-api_mention	B-api_mention
type	O	O
which	O	O
throws	O	O
exceptions	O	O
and	O	O
one	O	O
which	O	O
doesn	O	O
'	O	O
t	O	O
.	O	O
The	O	O
desired	O	O
syntax	O	O
would	O	O
be	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
this	O	O
causes	O	O
issues	O	O
due	O	O
to	O	O
the	O	O
lambda	O	O
type	O	O
being	O	O
ambiguous	O	O
(	O	O
presumably	O	O
unable	O	O
to	O	O
resolve	O	O
between	O	O
Supplier	B-api_mention	B-api_mention
and	O	O
ThrowingSupplier	O	B-api_mention
)	O	O
.	O	O
Doing	O	O
an	O	O
explicit	O	O
cast	O	O
a	O	O
la	O	O
foo	O	O
(	O	O
args	O	O
)	O	O
;	O	O
would	O	O
work	O	O
,	O	O
but	O	O
it	O	O
gets	O	O
rid	O	O
of	O	O
most	O	O
of	O	O
the	O	O
conciseness	O	O
of	O	O
the	O	O
desired	O	O
syntax	O	O
.	O	O
I	O	O
guess	O	O
the	O	O
underlying	O	O
question	O	O
is	O	O
:	O	O
if	O	O
the	O	O
Java	O	O
compiler	O	O
is	O	O
able	O	O
to	O	O
resolve	O	O
the	O	O
fact	O	O
that	O	O
one	O	O
of	O	O
my	O	O
lambdas	O	O
is	O	O
incompatible	O	O
due	O	O
to	O	O
it	O	O
throwing	O	O
an	O	O
exception	O	O
in	O	O
the	O	O
Supplier	O	O
-	O	O
only	O	O
case	O	O
,	O	O
why	O	O
isn	O	O
'	O	O
t	O	O
it	O	O
able	O	O
to	O	O
use	O	O
that	O	O
same	O	O
information	O	O
to	O	O
derive	O	O
the	O	O
type	O	O
of	O	O
the	O	O
lambda	O	O
in	O	O
the	O	O
secondary	O	O
,	O	O
type	O	O
-	O	O
inference	O	O
case	O	O
?	O	O
Any	O	O
information	O	O
or	O	O
resources	O	O
which	O	O
anyone	O	O
could	O	O
point	O	O
me	O	O
to	O	O
would	O	O
likewise	O	O
be	O	O
much	O	O
appreciated	O	O
,	O	O
as	O	O
I	O	O
'	O	O
m	O	O
just	O	O
not	O	O
too	O	O
sure	O	O
where	O	O
to	O	O
look	O	O
for	O	O
more	O	O
information	O	O
on	O	O
the	O	O
matter	O	O
.	O	O
Thanks	O	O
!	O	O
Question	O	O
-	O	O
9481865	O	O
,	O	O
answer	O	O
-	O	O
9482369	O	O
This	O	O
could	O	O
be	O	O
a	O	O
bit	O	O
tricky	O	O
in	O	O
the	O	O
most	O	O
general	O	O
case	O	O
.	O	O
On	O	O
the	O	O
face	O	O
of	O	O
it	O	O
,	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
give	O	O
you	O	O
the	O	O
IP	O	O
address	O	O
of	O	O
this	O	O
host	O	O
.	O	O
The	O	O
problem	O	O
is	O	O
that	O	O
a	O	O
host	O	O
could	O	O
have	O	O
lots	O	O
of	O	O
network	O	O
interfaces	O	O
,	O	O
and	O	O
an	O	O
interface	O	O
could	O	O
be	O	O
bound	O	O
to	O	O
more	O	O
than	O	O
one	O	O
IP	O	O
address	O	O
.	O	O
And	O	O
to	O	O
top	O	O
that	O	O
,	O	O
not	O	O
all	O	O
IP	O	O
addresses	O	O
will	O	O
be	O	O
reachable	O	O
outside	O	O
of	O	O
your	O	O
machine	O	O
or	O	O
your	O	O
LAN	O	O
.	O	O
For	O	O
example	O	O
,	O	O
they	O	O
could	O	O
be	O	O
IP	O	O
addresses	O	O
for	O	O
virtual	O	O
network	O	O
devices	O	O
,	O	O
private	O	O
network	O	O
IP	O	O
addresses	O	O
,	O	O
and	O	O
so	O	O
on	O	O
.	O	O
What	O	O
this	O	O
means	O	O
is	O	O
that	O	O
the	O	O
IP	O	O
address	O	O
returned	O	O
by	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
might	O	O
not	O	O
be	O	O
the	O	O
right	O	O
one	O	O
to	O	O
use	O	O
.	O	O
How	O	O
can	O	O
you	O	O
deal	O	O
with	O	O
this	O	O
?	O	O
#	O	O
li	O	O
One	O	O
approach	O	O
is	O	O
to	O	O
use	O	O
NetworkInterface	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getNetworkInterfaces	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
all	O	O
of	O	O
the	O	O
known	O	O
network	O	O
interfaces	O	O
on	O	O
the	O	O
host	O	O
,	O	O
and	O	O
then	O	O
iterate	O	O
over	O	O
each	O	O
NI	O	O
'	O	O
s	O	O
addresses	O	O
.	O	O
#	O	O
li	O	O
Another	O	O
approach	O	O
is	O	O
to	O	O
(	O	O
somehow	O	O
)	O	O
get	O	O
the	O	O
externally	O	O
advertized	O	O
FQDN	O	O
for	O	O
the	O	O
host	O	O
,	O	O
and	O	O
use	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getByName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
look	O	O
up	O	O
the	O	O
primary	O	O
IP	O	O
address	O	O
.	O	O
(	O	O
But	O	O
how	O	O
do	O	O
you	O	O
get	O	O
it	O	O
,	O	O
and	O	O
how	O	O
do	O	O
you	O	O
deal	O	O
with	O	O
a	O	O
DNS	O	O
-	O	O
based	O	O
load	O	O
balancer	O	O
?	O	O
)	O	O
#	O	O
li	O	O
A	O	O
variation	O	O
of	O	O
the	O	O
previous	O	O
is	O	O
to	O	O
get	O	O
the	O	O
preferred	O	O
FQDN	O	O
from	O	O
a	O	O
config	O	O
file	O	O
or	O	O
a	O	O
command	O	O
line	O	O
parameter	O	O
.	O	O
#	O	O
li	O	O
Another	O	O
variation	O	O
is	O	O
to	O	O
get	O	O
the	O	O
preferred	O	O
IP	O	O
address	O	O
from	O	O
a	O	O
config	O	O
file	O	O
or	O	O
a	O	O
command	O	O
line	O	O
parameter	O	O
.	O	O
In	O	O
summary	O	O
,	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
typically	O	O
work	O	O
,	O	O
but	O	O
you	O	O
may	O	O
need	O	O
to	O	O
provide	O	O
an	O	O
alternative	O	O
method	O	O
for	O	O
the	O	O
cases	O	O
where	O	O
your	O	O
code	O	O
is	O	O
run	O	O
in	O	O
an	O	O
environment	O	O
with	O	O
"	O	O
complicated	O	O
"	O	O
networking	O	O
.	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Any	O	O
address	O	O
in	O	O
the	O	O
range	O	O
127	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
is	O	O
a	O	O
"	O	O
loopback	O	O
"	O	O
address	O	O
.	O	O
It	O	O
is	O	O
only	O	O
visible	O	O
to	O	O
"	O	O
this	O	O
"	O	O
host	O	O
.	O	O
#	O	O
li	O	O
Any	O	O
address	O	O
in	O	O
the	O	O
range	O	O
192	O	O
.	O	O
168	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
is	O	O
a	O	O
private	O	O
(	O	O
aka	O	O
site	O	O
local	O	O
)	O	O
IP	O	O
address	O	O
.	O	O
These	O	O
are	O	O
reserved	O	O
for	O	O
use	O	O
within	O	O
an	O	O
organization	O	O
.	O	O
The	O	O
same	O	O
applies	O	O
to	O	O
10	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
addresses	O	O
,	O	O
and	O	O
172	O	O
.	O	O
16	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
through	O	O
172	O	O
.	O	O
31	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
#	O	O
li	O	O
Addresses	O	O
in	O	O
the	O	O
range	O	O
169	O	O
.	O	O
254	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
are	O	O
link	O	O
local	O	O
IP	O	O
addresses	O	O
.	O	O
These	O	O
are	O	O
reserved	O	O
for	O	O
use	O	O
on	O	O
a	O	O
single	O	O
network	O	O
segment	O	O
.	O	O
#	O	O
li	O	O
Addresses	O	O
in	O	O
the	O	O
range	O	O
224	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
through	O	O
239	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
are	O	O
multicast	O	O
addresses	O	O
.	O	O
#	O	O
li	O	O
The	O	O
address	O	O
255	O	O
.	O	O
255	O	O
.	O	O
255	O	O
.	O	O
255	O	O
is	O	O
the	O	O
broadcast	O	O
address	O	O
.	O	O
#	O	O
li	O	O
Anything	O	O
else	O	O
should	O	O
be	O	O
a	O	O
valid	O	O
public	O	O
point	O	O
-	O	O
to	O	O
-	O	O
point	O	O
IPv4	O	O
address	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
the	O	O
InetAddress	B-api_mention	B-api_mention
API	O	O
provides	O	O
methods	O	O
for	O	O
testing	O	O
for	O	O
loopback	O	O
,	O	O
link	O	O
local	O	O
,	O	O
site	O	O
local	O	O
,	O	O
multicast	O	O
and	O	O
broadcast	O	O
addresses	O	O
.	O	O
You	O	O
can	O	O
use	O	O
these	O	O
to	O	O
sort	O	O
out	O	O
which	O	O
of	O	O
the	O	O
IP	O	O
addresses	O	O
you	O	O
get	O	O
back	O	O
is	O	O
most	O	O
appropriate	O	O
.	O	O
Question	O	O
-	O	O
10827872	O	O
,	O	O
answer	O	O
-	O	O
22578124	O	O
Old	O	O
thread	O	O
I	O	O
know	O	O
but	O	O
I	O	O
am	O	O
sort	O	O
of	O	O
new	O	O
to	O	O
Java	O	O
and	O	O
discover	O	O
one	O	O
of	O	O
it	O	O
'	O	O
s	O	O
strange	O	O
things	O	O
.	O	O
I	O	O
have	O	O
used	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
get	O	O
unpredictable	O	O
results	O	O
.	O	O
Something	O	O
like	O	O
this	O	O
mess	O	O
up	O	O
the	O	O
string	O	O
:	O	O
sUrl	O	O
=	O	O
sUrl	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
So	O	O
I	O	O
designed	O	O
this	O	O
function	O	O
to	O	O
get	O	O
around	O	O
the	O	O
weird	O	O
problem	O	O
:	O	O
#	O	O
pre	O	O
Which	O	O
make	O	O
you	O	O
able	O	O
to	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
35834484	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	O
decode	I-api_mention	O
You	O	O
can	O	O
also	O	O
use	O	O
public	O	O
static	O	O
Integer	B-api_mention	B-api_mention
decode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
throws	O	O
NumberFormatException	B-api_mention	B-api_mention
.	O	O
It	O	O
also	O	O
works	O	O
for	O	O
base	O	O
8	O	O
and	O	O
16	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
want	O	O
to	O	O
get	O	O
int	O	O
instead	O	O
of	O	O
Integer	O	B-api_mention
you	O	O
can	O	O
use	O	O
:	O	O
#	O	O
li	O	O
Unboxing	O	O
:	O	O
int	O	O
val	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
decode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
intValue	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
decode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
intValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
29945627	O	O
,	O	O
answer	O	O
-	O	O
29945754	O	O
The	O	O
lambda	O	O
:	O	O
(	O	O
)	O	O
-	O	O
>	O	O
{	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
}	O	O
;	O	O
actually	O	O
represents	O	O
an	O	O
implementation	O	O
for	O	O
an	O	O
interface	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
which	O	O
is	O	O
completely	O	O
different	O	O
than	O	O
the	O	O
one	O	O
you	O	O
'	O	O
ve	O	O
defined	O	O
.	O	O
That	O	O
'	O	O
s	O	O
why	O	O
you	O	O
get	O	O
an	O	O
error	O	O
.	O	O
Since	O	O
you	O	O
can	O	O
'	O	O
t	O	O
extend	O	O
your	O	O
@	O	O
FunctionalInterface	O	O
,	O	O
nor	O	O
introduce	O	O
a	O	O
brand	O	O
new	O	O
one	O	O
,	O	O
then	O	O
I	O	O
think	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
much	O	O
options	O	O
.	O	O
You	O	O
can	O	O
use	O	O
the	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interfaces	O	O
to	O	O
denote	O	O
that	O	O
some	O	O
of	O	O
the	O	O
values	O	O
(	O	O
return	O	O
type	O	O
or	O	O
method	O	O
parameter	O	O
)	O	O
is	O	O
missing	O	O
,	O	O
though	O	O
.	O	O
However	O	O
,	O	O
this	O	O
won	O	O
'	O	O
t	O	O
make	O	O
the	O	O
lambda	O	O
body	O	O
simpler	O	O
.	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489453	O	O
Java	O	O
treats	O	O
String	B-api_mention	B-api_mention
as	O	O
a	O	O
special	O	O
class	O	O
,	O	O
you	O	O
can	O	O
initialize	O	O
in	O	O
both	O	O
ways	O	O
#	O	O
li	O	O
Directly	O	O
assigning	O	O
literal	O	O
String	B-api_mention	B-api_mention
a	O	O
=	O	O
StringLiteral	O	O
;	O	O
#	O	O
li	O	O
As	O	O
other	O	O
Objects	B-api_mention	O
using	O	O
new	O	O
keyword	O	O
String	B-api_mention	B-api_mention
a	O	O
=	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
need	O	O
to	O	O
take	O	O
special	O	O
care	O	O
when	O	O
you	O	O
wants	O	O
to	O	O
compare	O	O
with	O	O
=	O	O
=	O	O
sign	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
is	O	O
because	O	O
in	O	O
first	O	O
case	O	O
the	O	O
objects	O	O
a	O	O
and	O	O
b	O	O
are	O	O
kept	O	O
in	O	O
something	O	O
called	O	O
literal	O	O
pool	O	O
and	O	O
they	O	O
both	O	O
are	O	O
referencing	O	O
same	O	O
object	O	O
so	O	O
they	O	O
are	O	O
equal	O	O
in	O	O
both	O	O
ways	O	O
.	O	O
But	O	O
in	O	O
second	O	O
case	O	O
a	O	O
and	O	O
b	O	O
references	O	O
different	O	O
objects	O	O
like	O	O
when	O	O
we	O	O
initialize	O	O
any	O	O
other	O	O
objects	O	O
.	O	O
so	O	O
they	O	O
are	O	O
unequal	O	O
when	O	O
compared	O	O
with	O	O
=	O	O
=	O	O
operator	O	O
whereas	O	O
they	O	O
are	O	O
equal	O	O
in	O	O
values	O	O
.	O	O
Question	O	O
-	O	O
31202946	O	O
,	O	O
answer	O	O
-	O	O
31203252	O	O
#	O	O
blockquote	O	O
This	O	O
question	O	O
actually	O	O
boils	O	O
down	O	O
to	O	O
the	O	O
fact	O	O
that	O	O
you	O	O
should	O	O
always	O	O
prefer	O	O
composition	O	O
over	O	O
inheritance	O	O
.	O	O
If	O	O
the	O	O
Thread	B-api_mention	B-api_mention
class	O	O
was	O	O
declared	O	O
as	O	O
abstract	O	O
,	O	O
the	O	O
language	O	O
would	O	O
have	O	O
to	O	O
provide	O	O
another	O	O
class	O	O
that	O	O
extended	O	O
from	O	O
it	O	O
which	O	O
programmers	O	O
could	O	O
use	O	O
to	O	O
create	O	O
a	O	O
Thread	B-api_mention	B-api_mention
.	O	O
Your	O	O
question	O	O
would	O	O
then	O	O
be	O	O
about	O	O
why	O	O
this	O	O
class	O	O
that	O	O
extends	O	O
from	O	O
Thread	B-api_mention	B-api_mention
is	O	O
not	O	O
abstract	O	O
.	O	O
If	O	O
the	O	O
language	O	O
did	O	O
not	O	O
provide	O	O
another	O	O
class	O	O
that	O	O
extends	O	O
from	O	O
Thread	B-api_mention	B-api_mention
,	O	O
programmers	O	O
would	O	O
have	O	O
to	O	O
create	O	O
their	O	O
own	O	O
class	O	O
that	O	O
extend	O	O
s	O	O
from	O	O
Thread	B-api_mention	B-api_mention
and	O	O
override	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
only	O	O
possible	O	O
explanation	O	O
I	O	O
can	O	O
give	O	O
is	O	O
that	O	O
the	O	O
developers	O	O
of	O	O
the	O	O
language	O	O
saw	O	O
some	O	O
use	O	O
-	O	O
cases	O	O
for	O	O
overriding	O	O
start	O	O
when	O	O
the	O	O
class	O	O
was	O	O
introduced	O	O
to	O	O
the	O	O
JDK	O	O
.	O	O
The	O	O
first	O	O
version	O	O
of	O	O
Java	O	O
that	O	O
I	O	O
used	O	O
was	O	O
1	O	O
.	O	O
5	O	O
and	O	O
I	O	O
personally	O	O
have	O	O
not	O	O
come	O	O
across	O	O
a	O	O
use	O	O
-	O	O
case	O	O
where	O	O
I	O	O
found	O	O
the	O	O
need	O	O
to	O	O
override	O	O
start	O	O
.	O	O
As	O	O
JB	O	O
Nizet	O	O
stated	O	O
in	O	O
his	O	O
answer	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
33147339	O	O
,	O	O
answer	O	O
-	O	O
33147762	O	O
I	O	O
found	O	O
this	O	O
explanation	O	O
:	O	O
#	O	O
blockquote	O	O
In	O	O
Java	O	O
6	O	O
,	O	O
if	O	O
you	O	O
use	O	O
the	O	O
API	O	O
as	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
newCount	O	O
overflows	O	O
(	O	O
this	O	O
becomes	O	O
negative	O	O
)	O	O
,	O	O
if	O	O
(	O	O
args	O	O
)	O	O
will	O	O
return	O	O
false	O	O
and	O	O
you	O	O
may	O	O
mistakenly	O	O
assume	O	O
that	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
was	O	O
increased	O	O
by	O	O
len	B-api_mention	O
.	O	O
Question	O	O
-	O	O
8189466	O	O
,	O	O
answer	O	O
-	O	O
8189786	O	O
Here	O	O
'	O	O
s	O	O
why	O	O
:	O	O
As	O	O
it	O	O
is	O	O
says	O	O
in	O	O
the	O	O
Javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
check	O	O
is	O	O
done	O	O
in	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
the	O	O
iterator	O	O
(	O	O
as	O	O
you	O	O
can	O	O
see	O	O
by	O	O
the	O	O
stacktrace	O	O
)	O	O
.	O	O
But	O	O
we	O	O
will	O	O
reach	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
only	O	O
if	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
delivered	O	O
true	O	O
,	O	O
which	O	O
is	O	O
what	O	O
is	O	O
called	O	O
by	O	O
the	O	O
for	O	O
each	O	O
to	O	O
check	O	O
if	O	O
the	O	O
boundary	O	O
is	O	O
met	O	O
.	O	O
In	O	O
your	O	O
remove	O	O
method	O	O
,	O	O
when	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
if	O	O
it	O	O
needs	O	O
to	O	O
return	O	O
another	O	O
element	O	O
,	O	O
it	O	O
will	O	O
see	O	O
that	O	O
it	O	O
returned	O	O
two	O	O
elements	O	O
,	O	O
and	O	O
now	O	O
after	O	O
one	O	O
element	O	O
was	O	O
removed	O	O
the	O	O
list	O	O
only	O	O
contains	O	O
two	O	O
elements	O	O
.	O	O
So	O	O
all	O	O
is	O	O
peachy	O	O
and	O	O
we	O	O
are	O	O
done	O	O
with	O	O
iterating	O	O
.	O	O
The	O	O
check	O	O
for	O	O
concurrent	O	O
modifications	O	O
does	O	O
not	O	O
occur	O	O
,	O	O
as	O	O
this	O	O
is	O	O
done	O	O
in	O	O
the	O	O
next	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
which	O	O
is	O	O
never	O	O
called	O	O
.	O	O
Next	O	O
we	O	O
get	O	O
to	O	O
the	O	O
second	O	O
loop	O	O
.	O	O
After	O	O
we	O	O
remove	O	O
the	O	O
second	O	O
number	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
method	O	O
will	O	O
check	O	O
again	O	O
if	O	O
can	O	O
return	O	O
more	O	O
values	O	O
.	O	O
It	O	O
has	O	O
returned	O	O
two	O	O
values	O	O
already	O	O
,	O	O
but	O	O
the	O	O
list	O	O
now	O	O
only	O	O
contains	O	O
one	O	O
.	O	O
But	O	O
the	O	O
code	O	O
here	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
1	O	O
!	O	O
=	O	O
2	O	O
,	O	O
so	O	O
we	O	O
continue	O	O
to	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
now	O	O
realizes	O	O
that	O	O
someone	O	O
has	O	O
been	O	O
messing	O	O
with	O	O
the	O	O
list	O	O
and	O	O
fires	O	O
the	O	O
exception	O	O
.	O	O
Hope	O	O
that	O	O
clears	O	O
your	O	O
question	O	O
up	O	O
.	O	O
Question	O	O
-	O	O
32714194	O	O
String	B-api_mention	B-api_mention
is	O	O
a	O	O
special	O	O
case	O	O
in	O	O
Java	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
class	O	O
,	O	O
which	O	O
I	O	O
can	O	O
examine	O	O
in	O	O
the	O	O
source	O	O
code	O	O
,	O	O
but	O	O
it	O	O
also	O	O
has	O	O
its	O	O
own	O	O
infix	O	O
operator	O	O
+	O	O
,	O	O
which	O	O
seems	O	O
to	O	O
be	O	O
syntactic	O	O
sugar	O	O
for	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
For	O	O
example	O	O
,	O	O
StringLiteral	O	O
+	O	O
yourName	O	O
;	O	O
could	O	O
become	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
There	O	O
are	O	O
no	O	O
user	O	O
-	O	O
defined	O	O
operators	O	O
in	O	O
Java	O	O
,	O	O
so	O	O
where	O	O
is	O	O
+	O	O
specified	O	O
for	O	O
String	B-api_mention	B-api_mention
?	O	O
Could	O	O
the	O	O
same	O	O
mechanism	O	O
be	O	O
used	O	O
to	O	O
make	O	O
additional	O	O
operators	O	O
,	O	O
such	O	O
as	O	O
for	O	O
vectors	O	O
?	O	O
Question	O	O
-	O	O
21375659	O	O
,	O	O
answer	O	O
-	O	O
21375716	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
irrespective	O	O
of	O	O
how	O	O
it	O	O
is	O	O
instantiated	O	O
1	O	O
)	O	O
Short	O	O
answer	O	O
is	O	O
yes	O	O
,	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
immutable	O	O
too	O	O
.	O	O
Because	O	O
every	O	O
possible	O	O
mutable	O	O
operation	O	O
(	O	O
like	O	O
replace	O	O
,	O	O
toLowerCase	B-api_mention	O
etcetra	O	O
)	O	O
that	O	O
you	O	O
perform	O	O
on	O	O
String	B-api_mention	B-api_mention
does	O	O
not	O	O
affect	O	O
the	O	O
original	O	O
String	B-api_mention	B-api_mention
instance	O	O
and	O	O
returns	O	O
you	O	O
a	O	O
new	O	O
instance	O	O
.	O	O
You	O	O
may	O	O
check	O	O
this	O	O
in	O	O
Javadoc	O	O
for	O	O
String	B-api_mention	B-api_mention
.	O	O
Each	O	O
public	O	O
method	O	O
of	O	O
String	B-api_mention	B-api_mention
that	O	O
is	O	O
exposed	O	O
returns	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
instance	O	O
and	O	O
does	O	O
not	O	O
alter	O	O
the	O	O
present	O	O
instance	O	O
on	O	O
which	O	O
you	O	O
called	O	O
the	O	O
method	O	O
.	O	O
This	O	O
is	O	O
very	O	O
helpful	O	O
in	O	O
Multi	O	O
-	O	O
threaded	O	O
environment	O	O
as	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
think	O	O
about	O	O
mutability	O	O
(	O	O
someone	O	O
will	O	O
change	O	O
the	O	O
value	O	O
)	O	O
every	O	O
time	O	O
you	O	O
pass	O	O
or	O	O
share	O	O
the	O	O
String	B-api_mention	B-api_mention
around	O	O
.	O	O
String	B-api_mention	B-api_mention
can	O	O
easily	O	O
be	O	O
the	O	O
most	O	O
used	O	O
data	O	O
type	O	O
,	O	O
so	O	O
the	O	O
designers	O	O
have	O	O
blessed	O	O
us	O	O
all	O	O
to	O	O
not	O	O
think	O	O
about	O	O
mutability	O	O
everytime	O	O
and	O	O
saved	O	O
us	O	O
a	O	O
lot	O	O
of	O	O
pain	O	O
.	O	O
Immutability	O	O
allowed	O	O
String	B-api_mention	B-api_mention
pool	O	O
or	O	O
caching	O	O
It	O	O
is	O	O
because	O	O
of	O	O
immutability	O	O
property	O	O
that	O	O
the	O	O
internal	O	O
pool	O	O
of	O	O
string	O	O
was	O	O
possible	O	O
,	O	O
as	O	O
when	O	O
same	O	O
String	B-api_mention	B-api_mention
value	O	O
is	O	O
required	O	O
at	O	O
some	O	O
other	O	O
place	O	O
then	O	O
that	O	O
immutable	O	O
reference	O	O
is	O	O
returned	O	O
.	O	O
If	O	O
String	B-api_mention	O
would	O	O
have	O	O
been	O	O
mutable	O	O
then	O	O
it	O	O
would	O	O
not	O	O
have	O	O
been	O	O
possible	O	O
to	O	O
share	O	O
String	B-api_mention	B-api_mention
s	O	O
like	O	O
this	O	O
to	O	O
save	O	O
memory	O	O
.	O	O
String	B-api_mention	B-api_mention
immutablity	O	O
was	O	O
not	O	O
because	O	O
of	O	O
pooling	O	O
,	O	O
but	O	O
immutability	O	O
has	O	O
more	O	O
benefits	O	O
attached	O	O
to	O	O
it	O	O
.	O	O
String	B-api_mention	B-api_mention
interning	O	O
or	O	O
pooling	O	O
is	O	O
an	O	O
example	O	O
of	O	O
Flyweight	O	O
Design	O	O
pattern	O	O
2	O	O
)	O	O
Yes	O	O
it	O	O
will	O	O
be	O	O
interned	O	O
like	O	O
any	O	O
other	O	O
String	B-api_mention	B-api_mention
as	O	O
a	O	O
blank	O	O
String	B-api_mention	B-api_mention
is	O	O
also	O	O
as	O	O
much	O	O
a	O	O
String	B-api_mention	B-api_mention
as	O	O
other	O	O
String	B-api_mention	B-api_mention
instances	O	O
.	O	O
References	O	O
:	O	O
#	O	O
li	O	O
Immutability	O	O
benefits	O	O
of	O	O
String	B-api_mention	B-api_mention
Question	O	O
-	O	O
29922296	O	O
I	O	O
'	O	O
m	O	O
wondering	O	O
what	O	O
the	O	O
best	O	O
way	O	O
is	O	O
in	O	O
Java	O	O
8	O	O
to	O	O
work	O	O
with	O	O
all	O	O
the	O	O
values	O	O
of	O	O
an	O	O
enum	O	O
.	O	O
Specifically	O	O
when	O	O
you	O	O
need	O	O
to	O	O
get	O	O
all	O	O
the	O	O
values	O	O
and	O	O
add	O	O
it	O	O
to	O	O
somewhere	O	O
,	O	O
for	O	O
example	O	O
,	O	O
supposing	O	O
that	O	O
we	O	O
have	O	O
the	O	O
following	O	O
enum	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
could	O	O
of	O	O
course	O	O
do	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
,	O	O
I	O	O
could	O	O
also	O	O
add	O	O
the	O	O
following	O	O
method	O	O
to	O	O
the	O	O
enum	O	O
definition	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
then	O	O
replace	O	O
the	O	O
for	O	O
from	O	O
above	O	O
with	O	O
:	O	O
Letter	O	B-api_mention
.	B-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Is	O	O
this	O	O
approach	O	O
OK	O	O
or	O	O
does	O	O
it	O	O
have	O	O
some	O	O
fault	O	O
in	O	O
design	O	O
or	O	O
performance	O	O
?	O	O
Moreover	O	O
,	O	O
why	O	O
don	O	O
'	O	O
t	O	O
enums	O	O
have	O	O
a	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
?	O	O
Question	O	O
-	O	O
29262002	O	O
,	O	O
answer	O	O
-	O	O
29262126	O	O
The	O	O
JLS	O	O
specify	O	O
that	O	O
#	O	O
blockquote	O	O
Now	O	O
let	O	O
'	O	O
s	O	O
see	O	O
that	O	O
in	O	O
detail	O	O
,	O	O
Since	O	O
your	O	O
takeBiConsumer	O	B-api_mention
method	O	O
is	O	O
of	O	O
void	O	O
type	O	O
,	O	O
the	O	O
lambda	O	O
receiving	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
interpret	O	O
it	O	O
as	O	O
a	O	O
block	O	O
like	O	O
#	O	O
pre	O	O
which	O	O
is	O	O
valid	O	O
in	O	O
a	O	O
void	O	O
,	O	O
hence	O	O
the	O	O
first	O	O
case	O	O
compile	O	O
.	O	O
However	O	O
,	O	O
in	O	O
the	O	O
case	O	O
where	O	O
the	O	O
lambda	O	O
is	O	O
-	O	O
>	O	O
StringLiteral	O	O
,	O	O
a	O	O
block	O	O
such	O	O
as	O	O
#	O	O
pre	O	O
is	O	O
not	O	O
valid	O	O
syntax	O	O
in	O	O
java	O	O
.	O	O
Therefore	O	O
the	O	O
only	O	O
thing	O	O
to	O	O
do	O	O
with	O	O
"	O	O
hi	O	O
"	O	O
is	O	O
to	O	O
try	O	O
and	O	O
return	O	O
it	O	O
.	O	O
#	O	O
pre	O	O
which	O	O
is	O	O
not	O	O
valid	O	O
in	O	O
a	O	O
void	O	O
and	O	O
explain	O	O
the	O	O
error	O	O
message	O	O
#	O	O
pre	O	O
For	O	O
a	O	O
better	O	O
understanding	O	O
,	O	O
note	O	O
that	O	O
if	O	O
you	O	O
change	O	O
the	O	O
type	O	O
of	O	O
takeBiConsumer	O	B-api_mention
to	O	O
a	O	O
String	B-api_mention	B-api_mention
,	O	O
-	O	O
>	O	O
StringLiteral	O	O
will	O	O
be	O	O
valid	O	O
as	O	O
it	O	O
will	O	O
simply	O	O
try	O	O
to	O	O
directly	O	O
return	O	O
the	O	O
string	O	O
.	O	O
Note	O	O
that	O	O
at	O	O
first	O	O
I	O	O
tought	O	O
the	O	O
error	O	O
was	O	O
caused	O	O
by	O	O
the	O	O
lambda	O	O
being	O	O
in	O	O
a	O	O
wrong	O	O
invocation	O	O
context	O	O
,	O	O
so	O	O
I	O	O
'	O	O
ll	O	O
share	O	O
this	O	O
possibility	O	O
with	O	O
the	O	O
community	O	O
:	O	O
JLS	O	O
15	O	O
.	O	O
27	O	O
#	O	O
blockquote	O	O
However	O	O
in	O	O
our	O	O
case	O	O
,	O	O
we	O	O
are	O	O
in	O	O
an	O	O
invocation	O	O
context	O	O
which	O	O
is	O	O
correct	O	O
.	O	O
Question	O	O
-	O	O
7569335	O	O
,	O	O
answer	O	O
-	O	O
39329245	O	O
As	O	O
others	O	O
have	O	O
pointed	O	O
out	O	O
the	O	O
preferred	O	O
way	O	O
is	O	O
to	O	O
use	O	O
:	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reverse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
if	O	O
you	O	O
want	O	O
to	O	O
implement	O	O
this	O	O
by	O	O
youself	O	O
,	O	O
i	O	O
'	O	O
am	O	O
afraid	O	O
that	O	O
the	O	O
rest	O	O
of	O	O
responses	O	O
have	O	O
flaws	O	O
.	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
String	B-api_mention	B-api_mention
represent	O	O
a	O	O
list	O	O
of	O	O
Unicode	O	O
points	O	O
,	O	O
encoded	O	O
in	O	O
a	O	O
char	O	O
[	O	O
]	O	O
array	O	O
according	O	O
to	O	O
the	O	O
variable	O	O
-	O	O
length	O	O
encoding	O	O
:	O	O
UTF	O	O
-	O	O
16	O	O
.	O	O
This	O	O
means	O	O
some	O	O
code	O	O
points	O	O
use	O	O
a	O	O
single	O	O
element	O	O
of	O	O
the	O	O
array	O	O
(	O	O
one	O	O
code	O	O
unit	O	O
)	O	O
but	O	O
others	O	O
use	O	O
two	O	O
of	O	O
them	O	O
,	O	O
so	O	O
there	O	O
might	O	O
be	O	O
pairs	O	O
of	O	O
characters	O	O
that	O	O
must	O	O
be	O	O
treated	O	O
as	O	O
a	O	O
single	O	O
unit	O	O
(	O	O
consecutive	O	O
"	O	O
high	O	O
"	O	O
and	O	O
"	O	O
low	O	O
"	O	O
surrogates	O	O
)	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
8579702	O	O
If	O	O
you	O	O
just	O	O
invoke	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
directly	O	O
,	O	O
it	O	O
'	O	O
s	O	O
executed	O	O
on	O	O
the	O	O
calling	O	O
thread	O	O
,	O	O
just	O	O
like	O	O
any	O	O
other	O	O
method	O	O
call	O	O
.	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
required	O	O
to	O	O
actually	O	O
create	O	O
a	O	O
new	O	O
thread	O	O
so	O	O
that	O	O
the	O	O
runnable	O	O
'	O	O
s	O	O
run	O	O
method	O	O
is	O	O
executed	O	O
in	O	O
parallel	O	O
.	O	O
Question	O	O
-	O	O
5673260	O	O
,	O	O
answer	O	O
-	O	O
5673356	O	O
#	O	O
pre	O	O
Generally	O	O
speaking	O	O
,	O	O
when	O	O
you	O	O
have	O	O
response	O	O
.	B-api_mention	B-api_mention
getOutputStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
can	O	O
write	O	O
anything	O	O
there	O	O
.	O	O
You	O	O
can	O	O
pass	O	O
this	O	O
output	O	O
stream	O	O
as	O	O
a	O	O
place	O	O
to	O	O
put	O	O
generated	O	O
PDF	O	O
to	O	O
your	O	O
generator	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
you	O	O
know	O	O
what	O	O
file	O	O
type	O	O
you	O	O
are	O	O
sending	O	O
,	O	O
you	O	O
can	O	O
set	O	O
response	O	O
.	B-api_mention	B-api_mention
setContentType	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
31270759	O	O
,	O	O
answer	O	O
-	O	O
31270760	O	O
Presented	O	O
below	O	O
is	O	O
the	O	O
full	O	O
code	O	O
of	O	O
the	O	O
Exceptional	O	B-api_mention
class	O	O
.	O	O
It	O	O
has	O	O
a	O	O
quite	O	O
large	O	O
API	O	O
which	O	O
is	O	O
a	O	O
pure	O	O
extension	O	O
of	O	O
the	O	O
Optional	B-api_mention	B-api_mention
API	O	O
so	O	O
it	O	O
can	O	O
be	O	O
a	O	O
drop	O	O
-	O	O
in	O	O
replacement	O	O
for	O	O
it	O	O
in	O	O
any	O	O
existing	O	O
code	O	O
	O	O
except	O	O
that	O	O
it	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
subtype	O	O
of	O	O
the	O	O
final	O	O
Optional	B-api_mention	B-api_mention
class	O	O
.	O	O
The	O	O
class	O	O
can	O	O
be	O	O
seen	O	O
as	O	O
being	O	O
in	O	O
the	O	O
same	O	O
relationship	O	O
with	O	O
the	O	O
Try	O	O
monad	O	O
as	O	O
Optional	B-api_mention	B-api_mention
is	O	O
with	O	O
the	O	O
Maybe	O	O
monad	O	O
:	O	O
it	O	O
draws	O	O
inspiration	O	O
from	O	O
it	O	O
,	O	O
but	O	O
is	O	O
adapted	O	O
to	O	O
the	O	O
Java	O	O
idiom	O	O
(	O	O
such	O	O
as	O	O
actually	O	O
throwing	O	O
exceptions	O	O
,	O	O
even	O	O
from	O	O
non	O	O
-	O	O
terminal	O	O
operations	O	O
)	O	O
.	O	O
These	O	O
are	O	O
some	O	O
key	O	O
guidelines	O	O
followed	O	O
by	O	O
the	O	O
class	O	O
:	O	O
#	O	O
li	O	O
as	O	O
opposed	O	O
to	O	O
the	O	O
monadic	O	O
approach	O	O
,	O	O
doesn	O	O
'	O	O
t	O	O
ignore	O	O
Java	O	O
'	O	O
s	O	O
exception	O	O
mechanism	O	O
;	O	O
#	O	O
li	O	O
instead	O	O
it	O	O
relieves	O	O
the	O	O
impedance	O	O
mismatch	O	O
between	O	O
exceptions	O	O
and	O	O
higher	O	O
-	O	O
order	O	O
functions	O	O
;	O	O
#	O	O
li	O	O
exception	O	O
handling	O	O
not	O	O
statically	O	O
typesafe	O	O
(	O	O
due	O	O
to	O	O
sneaky	O	O
throwing	O	O
)	O	O
,	O	O
but	O	O
always	O	O
safe	O	O
at	O	O
runtime	O	O
(	O	O
never	O	O
swallows	O	O
an	O	O
exception	O	O
except	O	O
on	O	O
explicit	O	O
request	O	O
)	O	O
.	O	O
The	O	O
class	O	O
tries	O	O
to	O	O
cover	O	O
all	O	O
the	O	O
typical	O	O
ways	O	O
to	O	O
handle	O	O
an	O	O
exception	O	O
:	O	O
#	O	O
li	O	O
recover	O	O
with	O	O
some	O	O
handling	O	O
code	O	O
which	O	O
provides	O	O
a	O	O
substitute	O	O
value	O	O
;	O	O
#	O	O
li	O	O
flatRecover	O	B-api_mention
which	O	O
,	O	O
analogous	O	O
to	O	O
flatMap	O	B-api_mention
,	O	O
allows	O	O
to	O	O
return	O	O
a	O	O
new	O	O
Exceptional	O	B-api_mention
instance	O	O
which	O	O
will	O	O
be	O	O
unwrapped	O	O
and	O	O
the	O	O
state	O	O
of	O	O
the	O	O
current	O	O
instance	O	O
suitably	O	O
updated	O	O
;	O	O
#	O	O
li	O	O
propagate	O	O
an	O	O
exception	O	O
,	O	O
throwing	O	O
it	O	O
from	O	O
the	O	O
Exceptional	O	O
expression	O	O
and	O	O
making	O	O
the	O	O
propagate	O	O
call	O	O
declare	O	O
this	O	O
exception	O	O
type	O	O
;	O	O
#	O	O
li	O	O
propagate	O	O
it	O	O
after	O	O
wrapping	O	O
into	O	O
another	O	O
exception	O	O
(	O	O
translate	O	O
it	O	O
)	O	O
;	O	O
#	O	O
li	O	O
handle	O	O
it	O	O
,	O	O
resulting	O	O
in	O	O
an	O	O
empty	O	O
Exceptional	O	O
;	O	O
#	O	O
li	O	O
as	O	O
a	O	O
special	O	O
case	O	O
of	O	O
handling	O	O
,	O	O
swallow	O	O
it	O	O
with	O	O
an	O	O
empty	O	O
handler	O	O
block	O	O
.	O	O
The	O	O
propagate	O	O
approach	O	O
allows	O	O
one	O	O
to	O	O
selectively	O	O
pick	O	O
which	O	O
checked	O	O
exceptions	O	O
he	O	O
wants	O	O
to	O	O
expose	O	O
from	O	O
his	O	O
code	O	O
.	O	O
Exceptions	O	O
which	O	O
remain	O	O
unhandled	O	O
at	O	O
the	O	O
time	O	O
a	O	O
terminal	O	O
operation	O	O
is	O	O
called	O	O
(	O	O
like	O	O
get	O	O
)	O	O
will	O	O
be	O	O
sneakily	O	O
thrown	O	O
without	O	O
declaration	O	O
.	O	O
This	O	O
is	O	O
often	O	O
considered	O	O
as	O	O
an	O	O
advanced	O	O
and	O	O
dangerous	O	O
approach	O	O
,	O	O
but	O	O
is	O	O
nevertheless	O	O
often	O	O
employed	O	O
as	O	O
a	O	O
way	O	O
to	O	O
somewhat	O	O
alleviate	O	O
the	O	O
nuisance	O	O
of	O	O
checked	O	O
exceptions	O	O
in	O	O
combination	O	O
with	O	O
lambda	O	O
shapes	O	O
which	O	O
do	O	O
not	O	O
declare	O	O
them	O	O
.	O	O
The	O	O
Exceptional	O	B-api_mention
class	O	O
hopes	O	O
to	O	O
offer	O	O
a	O	O
cleaner	O	O
and	O	O
more	O	O
selective	O	O
alternative	O	O
to	O	O
sneaky	O	O
throw	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
pre	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725550	O	O
Think	O	O
of	O	O
it	O	O
like	O	O
this	O	O
:	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
has	O	O
methods	O	O
like	O	O
add	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
set	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
contract	O	O
is	O	O
that	O	O
once	O	O
you	O	O
added	O	O
an	O	O
element	O	O
at	O	O
position	O	O
X	O	O
you	O	O
will	O	O
find	O	O
it	O	O
there	O	O
unless	O	O
you	O	O
add	O	O
or	O	O
remove	O	O
elements	O	O
before	O	O
it	O	O
.	O	O
If	O	O
any	O	O
list	O	O
implementation	O	O
would	O	O
store	O	O
elements	O	O
in	O	O
some	O	O
order	O	O
other	O	O
than	O	O
based	O	O
on	O	O
the	O	O
index	O	O
,	O	O
the	O	O
above	O	O
list	O	O
methods	O	O
would	O	O
make	O	O
no	O	O
sense	O	O
.	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
6271460	O	O
The	O	O
"	O	O
$	O	O
1	O	O
"	O	O
is	O	O
not	O	O
"	O	O
useless	O	O
non	O	O
-	O	O
sense	O	O
"	O	O
.	O	O
If	O	O
your	O	O
class	O	O
is	O	O
anonymous	O	O
,	O	O
a	O	O
number	O	O
is	O	O
appended	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
want	O	O
the	O	O
class	O	O
itself	O	O
,	O	O
but	O	O
its	O	O
declaring	O	O
class	O	O
,	O	O
then	O	O
you	O	O
can	O	O
use	O	O
getEnclosingClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
move	O	O
that	O	O
in	O	O
some	O	O
static	O	O
utility	O	O
method	O	O
.	O	O
But	O	O
note	O	O
that	O	O
this	O	O
is	O	O
not	O	O
the	O	O
current	O	O
class	O	O
name	O	O
.	O	O
The	O	O
anonymous	O	O
class	O	O
is	O	O
different	O	O
class	O	O
than	O	O
its	O	O
enclosing	O	O
class	O	O
.	O	O
The	O	O
case	O	O
is	O	O
similar	O	O
for	O	O
inner	O	O
classes	O	O
.	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
21008747	O	O
[	O	O
Disclaimer	O	O
this	O	O
is	O	O
a	O	O
deliberately	O	O
opinionated	O	O
style	O	O
of	O	O
answer	O	O
as	O	O
I	O	O
feel	O	O
a	O	O
more	O	O
"	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
at	O	O
home	O	O
kids	O	O
"	O	O
answer	O	O
is	O	O
warranted	O	O
]	O	O
The	O	O
sin	O	O
is	O	O
the	O	O
line	O	O
field	O	O
.	B-api_mention	B-api_mention
setAccessible	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
says	O	O
to	O	O
violate	O	O
the	O	O
public	O	O
api	O	O
by	O	O
allowing	O	O
access	O	O
to	O	O
a	O	O
private	O	O
field	O	O
.	O	O
Thats	O	O
a	O	O
giant	O	O
security	O	O
hole	O	O
which	O	O
can	O	O
be	O	O
locked	O	O
down	O	O
by	O	O
configuring	O	O
a	O	O
security	O	O
manager	O	O
.	O	O
The	O	O
phenomenon	O	O
in	O	O
the	O	O
question	O	O
are	O	O
implementation	O	O
details	O	O
which	O	O
you	O	O
would	O	O
never	O	O
see	O	O
when	O	O
not	O	O
using	O	O
that	O	O
dangerous	O	O
line	O	O
of	O	O
code	O	O
to	O	O
violate	O	O
the	O	O
access	O	O
modifiers	O	O
via	O	O
reflection	O	O
.	O	O
Clearly	O	O
two	O	O
(	O	O
normally	O	O
)	O	O
immutable	O	O
strings	O	O
can	O	O
share	O	O
the	O	O
same	O	O
char	O	O
array	O	O
.	O	O
Whether	O	O
a	O	O
substring	O	O
shares	O	O
the	O	O
same	O	O
array	O	O
depends	O	O
on	O	O
whether	O	O
it	O	O
can	O	O
and	O	O
whether	O	O
the	O	O
developer	O	O
thought	O	O
to	O	O
share	O	O
it	O	O
.	O	O
Normally	O	O
these	O	O
are	O	O
invisible	O	O
implementation	O	O
details	O	O
which	O	O
you	O	O
should	O	O
not	O	O
have	O	O
to	O	O
know	O	O
unless	O	O
you	O	O
shoot	O	O
the	O	O
access	O	O
modifier	O	O
through	O	O
the	O	O
head	O	O
with	O	O
that	O	O
line	O	O
of	O	O
code	O	O
.	O	O
It	O	O
is	O	O
simply	O	O
not	O	O
a	O	O
good	O	O
idea	O	O
to	O	O
rely	O	O
upon	O	O
such	O	O
details	O	O
which	O	O
cannot	O	O
be	O	O
experienced	O	O
without	O	O
violating	O	O
the	O	O
access	O	O
modifiers	O	O
using	O	O
reflection	O	O
.	O	O
The	O	O
owner	O	O
of	O	O
that	O	O
class	O	O
only	O	O
supports	O	O
the	O	O
normal	O	O
public	O	O
API	O	O
and	O	O
is	O	O
free	O	O
to	O	O
make	O	O
implementation	O	O
changes	O	O
in	O	O
the	O	O
future	O	O
.	O	O
Having	O	O
said	O	O
all	O	O
that	O	O
the	O	O
line	O	O
of	O	O
code	O	O
is	O	O
really	O	O
very	O	O
useful	O	O
when	O	O
you	O	O
have	O	O
a	O	O
gun	O	O
held	O	O
you	O	O
your	O	O
head	O	O
forcing	O	O
you	O	O
to	O	O
do	O	O
such	O	O
dangerous	O	O
things	O	O
.	O	O
Using	O	O
that	O	O
back	O	O
door	O	O
is	O	O
usually	O	O
a	O	O
code	O	O
smell	O	O
that	O	O
you	O	O
need	O	O
to	O	O
upgrade	O	O
to	O	O
better	O	O
library	O	O
code	O	O
where	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
sin	O	O
.	O	O
Another	O	O
common	O	O
use	O	O
of	O	O
that	O	O
dangerous	O	O
line	O	O
of	O	O
code	O	O
is	O	O
to	O	O
write	O	O
a	O	O
"	O	O
voodoo	O	O
framework	O	O
"	O	O
(	O	O
orm	O	O
,	O	O
injection	O	O
container	O	O
,	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
Many	O	O
folks	O	O
get	O	O
religious	O	O
about	O	O
such	O	O
frameworks	O	O
(	O	O
both	O	O
for	O	O
and	O	O
against	O	O
them	O	O
)	O	O
so	O	O
I	O	O
will	O	O
avoid	O	O
inviting	O	O
a	O	O
flame	O	O
war	O	O
by	O	O
saying	O	O
nothing	O	O
other	O	O
than	O	O
the	O	O
vast	O	O
majority	O	O
of	O	O
programmers	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
go	O	O
there	O	O
.	O	O
Question	O	O
-	O	O
19235606	O	O
,	O	O
answer	O	O
-	O	O
19235857	O	O
Spliterator	B-api_mention	O
basically	O	O
means	O	O
"	O	O
splittable	O	O
Iterator	O	O
"	O	O
.	O	O
Single	O	O
thread	O	O
can	O	O
traverse	O	O
/	O	O
process	O	O
the	O	O
entire	O	O
Spliterator	B-api_mention	B-api_mention
itself	O	O
,	O	O
but	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
also	O	O
has	O	O
a	O	O
method	O	O
trySplit	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
will	O	O
"	O	O
split	O	O
off	O	O
"	O	O
a	O	O
section	O	O
for	O	O
someone	O	O
else	O	O
(	O	O
typically	O	O
,	O	O
another	O	O
thread	O	O
)	O	O
to	O	O
process	O	O
-	O	O
-	O	O
leaving	O	O
the	O	O
current	O	O
spliterator	O	O
with	O	O
less	O	O
work	O	O
.	O	O
Collector	B-api_mention	O
combines	O	O
the	O	O
specification	O	O
of	O	O
a	O	O
reduce	O	O
function	O	O
(	O	O
of	O	O
map	O	O
-	O	O
reduce	O	O
fame	O	O
)	O	O
,	O	O
with	O	O
an	O	O
initial	O	O
value	O	O
,	O	O
and	O	O
a	O	O
value	O	O
to	O	O
combine	O	O
two	O	O
results	O	O
(	O	O
thus	O	O
enabling	O	O
results	O	O
from	O	O
Spliterated	O	O
streams	O	O
of	O	O
work	O	O
,	O	O
to	O	O
be	O	O
combined	O	O
.	O	O
)	O	O
For	O	O
example	O	O
,	O	O
the	O	O
most	O	O
basic	O	O
Collector	B-api_mention	B-api_mention
would	O	O
have	O	O
an	O	O
initial	O	O
vaue	O	O
of	O	O
0	O	O
,	O	O
add	O	O
an	O	O
integer	O	O
onto	O	O
an	O	O
existing	O	O
result	O	O
,	O	O
and	O	O
would	O	O
'	O	O
combine	O	O
'	O	O
two	O	O
results	O	O
by	O	O
adding	O	O
them	O	O
.	O	O
Thus	O	O
summing	O	O
a	O	O
spliterated	O	O
stream	O	O
of	O	O
integers	O	O
.	O	O
See	O	O
:	O	O
#	O	O
li	O	O
Spliterator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
trySplit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Collector	B-api_mention	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
,	O	O
A	O	O
,	O	O
R	O	O
>	O	O
Question	O	O
-	O	O
18092160	O	O
Why	O	O
were	O	O
181783497276652981	O	O
and	O	O
8682522807148012	O	O
chosen	O	O
in	O	O
Random	O	B-api_mention
.	O	O
java	O	O
?	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
relevant	O	O
source	O	O
code	O	O
from	O	O
Java	O	O
SE	O	O
JDK	O	O
1	O	O
.	O	O
7	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
,	O	O
invoking	O	O
new	O	O
Random	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
without	O	O
any	O	O
seed	O	O
parameter	O	O
takes	O	O
the	O	O
current	O	O
"	O	O
seed	O	O
uniquifier	O	O
"	O	O
and	O	O
XORs	O	O
it	O	O
with	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Then	O	O
it	O	O
uses	O	O
181783497276652981	O	O
to	O	O
create	O	O
another	O	O
seed	O	O
uniquifier	O	O
to	O	O
be	O	O
stored	O	O
for	O	O
the	O	O
next	O	O
time	O	O
new	O	O
Random	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
.	O	O
The	O	O
literals	O	O
181783497276652981L	O	O
and	O	O
8682522807148012L	O	O
are	O	O
not	O	O
placed	O	O
in	O	O
constants	O	O
,	O	O
but	O	O
they	O	O
don	O	O
'	O	O
t	O	O
appear	O	O
anywhere	O	O
else	O	O
.	O	O
At	O	O
first	O	O
the	O	O
comment	O	O
gives	O	O
me	O	O
an	O	O
easy	O	O
lead	O	O
.	O	O
Searching	O	O
online	O	O
for	O	O
that	O	O
article	O	O
yields	O	O
the	O	O
actual	O	O
article	O	O
.	O	O
8682522807148012	O	O
doesn	O	O
'	O	O
t	O	O
appear	O	O
in	O	O
the	O	O
paper	O	O
,	O	O
but	O	O
181783497276652981	O	O
does	O	O
appear	O	O
-	O	O
-	O	O
as	O	O
a	O	O
substring	O	O
of	O	O
another	O	O
number	O	O
,	O	O
1181783497276652981	O	O
,	O	O
which	O	O
is	O	O
181783497276652981	O	O
with	O	O
a	O	O
1	O	O
prepended	O	O
.	O	O
The	O	O
paper	O	O
claims	O	O
that	O	O
1181783497276652981	O	O
is	O	O
a	O	O
number	O	O
that	O	O
yields	O	O
good	O	O
"	O	O
merit	O	O
"	O	O
for	O	O
a	O	O
linear	O	O
congruential	O	O
generator	O	O
.	O	O
Was	O	O
this	O	O
number	O	O
simply	O	O
mis	O	O
-	O	O
copied	O	O
into	O	O
Java	O	O
?	O	O
Does	O	O
181783497276652981	O	O
have	O	O
an	O	O
acceptable	O	O
merit	O	O
?	O	O
And	O	O
why	O	O
was	O	O
8682522807148012	O	O
chosen	O	O
?	O	O
Searching	O	O
online	O	O
for	O	O
either	O	O
number	O	O
yields	O	O
no	O	O
explanation	O	O
,	O	O
only	O	O
this	O	O
page	O	O
that	O	O
also	O	O
notices	O	O
the	O	O
dropped	O	O
1	O	O
in	O	O
front	O	O
of	O	O
181783497276652981	O	O
.	O	O
Could	O	O
other	O	O
numbers	O	O
have	O	O
been	O	O
chosen	O	O
that	O	O
would	O	O
have	O	O
worked	O	O
as	O	O
well	O	O
as	O	O
these	O	O
two	O	O
numbers	O	O
?	O	O
Why	O	O
or	O	O
why	O	O
not	O	O
?	O	O
Question	O	O
-	O	O
28818506	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
working	O	O
with	O	O
the	O	O
new	O	O
Optional	B-api_mention	B-api_mention
type	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
and	O	O
I	O	O
'	O	O
ve	O	O
come	O	O
across	O	O
what	O	O
seems	O	O
like	O	O
a	O	O
common	O	O
operation	O	O
that	O	O
isn	O	O
'	O	O
t	O	O
supported	O	O
functionally	O	O
:	O	O
an	O	O
"	O	O
orElseOptional	O	O
"	O	O
Consider	O	O
the	O	O
following	O	O
pattern	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
are	O	O
many	O	O
forms	O	O
of	O	O
this	O	O
pattern	O	O
,	O	O
but	O	O
it	O	O
boils	O	O
down	O	O
to	O	O
wanting	O	O
an	O	O
"	O	O
orElse	O	O
"	O	O
on	O	O
an	O	O
optional	O	O
that	O	O
takes	O	O
a	O	O
function	O	O
producing	O	O
a	O	O
new	O	O
optional	O	O
,	O	O
called	O	O
only	O	O
if	O	O
the	O	O
current	O	O
one	O	O
does	O	O
not	O	O
exist	O	O
.	O	O
It	O	O
'	O	O
s	O	O
implementation	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
m	O	O
curious	O	O
if	O	O
there	O	O
'	O	O
s	O	O
a	O	O
reason	O	O
such	O	O
a	O	O
method	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
,	O	O
if	O	O
I	O	O
'	O	O
m	O	O
just	O	O
using	O	O
Optional	B-api_mention	B-api_mention
in	O	O
an	O	O
unintended	O	O
way	O	O
,	O	O
and	O	O
what	O	O
other	O	O
ways	O	O
people	O	O
have	O	O
come	O	O
up	O	O
with	O	O
to	O	O
deal	O	O
with	O	O
this	O	O
case	O	O
.	O	O
I	O	O
should	O	O
say	O	O
that	O	O
I	O	O
think	O	O
that	O	O
solutions	O	O
involving	O	O
custom	O	O
utility	O	O
classes	O	O
/	O	O
methods	O	O
aren	O	O
'	O	O
t	O	O
elegant	O	O
because	O	O
people	O	O
working	O	O
with	O	O
my	O	O
code	O	O
won	O	O
'	O	O
t	O	O
necessarily	O	O
know	O	O
they	O	O
exist	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
anyone	O	O
knows	O	O
,	O	O
will	O	O
such	O	O
a	O	O
method	O	O
be	O	O
included	O	O
in	O	O
JDK	O	O
9	O	O
,	O	O
and	O	O
where	O	O
might	O	O
I	O	O
propose	O	O
such	O	O
a	O	O
method	O	O
?	O	O
This	O	O
seems	O	O
like	O	O
a	O	O
pretty	O	O
glaring	O	O
omission	O	O
to	O	O
the	O	O
API	O	O
to	O	O
me	O	O
.	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32182250	O	O
Integer	B-api_mention	B-api_mention
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	O
a	I-api_mention	O
)	I-api_mention	O
can	O	O
return	O	O
false	O	O
But	O	O
you	O	O
have	O	O
to	O	O
be	O	O
really	O	O
evil	O	O
and	O	O
use	O	O
reflections	O	O
and	O	O
Multithreading	O	O
:	O	O
If	O	O
you	O	O
run	O	O
this	O	O
code	O	O
,	O	O
there	O	O
is	O	O
a	O	O
chance	O	O
that	O	O
a	O	O
racing	O	O
condition	O	O
can	O	O
change	O	O
the	O	O
internal	O	O
Value	O	O
of	O	O
myInt	O	O
while	O	O
the	O	O
comparision	O	O
takes	O	O
place	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
simulate	O	O
this	O	O
condition	O	O
,	O	O
just	O	O
set	O	O
a	O	O
breakpoint	O	O
inside	O	O
of	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
run	O	O
the	O	O
code	O	O
in	O	O
debug	O	O
and	O	O
hit	O	O
continue	O	O
.	O	O
This	O	O
will	O	O
create	O	O
a	O	O
delay	O	O
which	O	O
creates	O	O
the	O	O
race	O	O
condition	O	O
artificially	O	O
and	O	O
the	O	O
console	O	O
will	O	O
return	O	O
false	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
27747562	O	O
,	O	O
answer	O	O
-	O	O
27747702	O	O
A	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
could	O	O
very	O	O
well	O	O
be	O	O
an	O	O
Item	O	B-api_mention
.	O	O
See	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
A	O	O
cast	O	O
tells	O	O
the	O	O
compiler	O	O
:	O	O
"	O	O
I	O	O
know	O	O
you	O	O
can	O	O
'	O	O
t	O	O
be	O	O
sure	O	O
that	O	O
this	O	O
is	O	O
a	O	O
object	O	O
of	O	O
type	O	O
Item	O	O
,	O	O
but	O	O
I	O	O
know	O	O
better	O	O
than	O	O
you	O	O
,	O	O
so	O	O
please	O	O
compile	O	O
"	O	O
.	O	O
The	O	O
compiler	O	O
will	O	O
only	O	O
refuse	O	O
to	O	O
compile	O	O
that	O	O
if	O	O
it	O	O
'	O	O
s	O	O
impossible	O	O
for	O	O
the	O	O
returned	O	O
object	O	O
to	O	O
be	O	O
an	O	O
instance	O	O
of	O	O
Item	B-api_mention	B-api_mention
(	O	O
like	O	O
,	O	O
for	O	O
example	O	O
,	O	O
Integer	B-api_mention	B-api_mention
can	O	O
'	O	O
t	O	O
ever	O	O
be	O	O
a	O	O
String	B-api_mention	B-api_mention
)	O	O
At	O	O
runtime	O	O
,	O	O
the	O	O
type	O	O
of	O	O
the	O	O
actual	O	O
object	O	O
returned	O	O
by	O	O
the	O	O
method	O	O
will	O	O
be	O	O
checked	O	O
,	O	O
and	O	O
if	O	O
it	O	O
'	O	O
s	O	O
not	O	O
actually	O	O
an	O	O
object	O	O
of	O	O
type	O	O
Item	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
get	O	O
a	O	O
ClassCastException	O	B-api_mention
.	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
16636899	O	O
I	O	O
feel	O	O
that	O	O
I	O	O
need	O	O
to	O	O
extend	O	O
my	O	O
comment	O	O
a	O	O
bit	O	O
.	O	O
.	O	O
.	O	O
About	O	O
paradigm	O	O
\	O	O
style	O	O
That	O	O
'	O	O
s	O	O
probably	O	O
the	O	O
most	O	O
notable	O	O
aspect	O	O
.	O	O
FP	O	O
became	O	O
popular	O	O
due	O	O
to	O	O
what	O	O
you	O	O
can	O	O
get	O	O
avoiding	O	O
side	O	O
-	O	O
effects	O	O
.	O	O
I	O	O
won	O	O
'	O	O
t	O	O
delve	O	O
deep	O	O
into	O	O
what	O	O
pros	O	O
\	O	O
cons	O	O
you	O	O
can	O	O
get	O	O
from	O	O
this	O	O
,	O	O
since	O	O
this	O	O
is	O	O
not	O	O
related	O	O
to	O	O
the	O	O
question	O	O
.	O	O
However	O	O
,	O	O
I	O	O
will	O	O
say	O	O
that	O	O
the	O	O
iteration	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
inspired	O	O
by	O	O
FP	O	O
and	O	O
rather	O	O
result	O	O
of	O	O
bringing	O	O
more	O	O
FP	O	O
to	O	O
Java	O	O
(	O	O
ironically	O	O
,	O	O
I	O	O
'	O	O
d	O	O
say	O	O
that	O	O
there	O	O
is	O	O
no	O	O
much	O	O
use	O	O
for	O	O
forEach	B-api_mention	B-api_mention
in	O	O
pure	O	O
FP	O	O
,	O	O
since	O	O
it	O	O
does	O	O
nothing	O	O
except	O	O
introducing	O	O
side	O	O
-	O	O
effects	O	O
)	O	O
.	O	O
In	O	O
the	O	O
end	O	O
I	O	O
would	O	O
say	O	O
that	O	O
it	O	O
is	O	O
rather	O	O
a	O	O
matter	O	O
of	O	O
taste	O	O
\	O	O
style	O	O
\	O	O
paradigm	O	O
you	O	O
are	O	O
currently	O	O
writing	O	O
in	O	O
.	O	O
About	O	O
parallelism	O	O
.	O	O
From	O	O
performance	O	O
point	O	O
of	O	O
view	O	O
there	O	O
is	O	O
no	O	O
promised	O	O
notable	O	O
benefits	O	O
from	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
over	O	O
foreach	O	O
(	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
According	O	O
to	O	O
official	O	O
docs	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
.	O	O
.	O	O
.	O	O
i	O	O
.	O	O
e	O	O
.	O	O
docs	O	O
pretty	O	O
much	O	O
clear	O	O
that	O	O
there	O	O
will	O	O
be	O	O
no	O	O
implicit	O	O
parallelism	O	O
.	O	O
Adding	O	O
one	O	O
would	O	O
be	O	O
LSP	O	O
violation	O	O
.	O	O
Now	O	O
,	O	O
there	O	O
are	O	O
"	O	O
parallell	O	O
collections	O	O
"	O	O
that	O	O
are	O	O
promised	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
but	O	O
to	O	O
work	O	O
with	O	O
those	O	O
you	O	O
need	O	O
to	O	O
me	O	O
more	O	O
explicit	O	O
and	O	O
put	O	O
some	O	O
extra	O	O
care	O	O
to	O	O
use	O	O
them	O	O
(	O	O
see	O	O
mschenk74	O	O
'	O	O
s	O	O
answer	O	O
for	O	O
example	O	O
)	O	O
.	O	O
BTW	O	O
:	O	O
in	O	O
this	O	O
case	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
will	O	O
be	O	O
used	O	O
,	O	O
and	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
guarantee	O	O
that	O	O
actual	O	O
work	O	O
will	O	O
be	O	O
done	O	O
in	O	O
parallell	O	O
(	O	O
depends	O	O
on	O	O
underlying	O	O
collection	O	O
)	O	O
.	O	O
UPDATE	O	O
:	O	O
might	O	O
be	O	O
not	O	O
that	O	O
obvious	O	O
and	O	O
a	O	O
little	O	O
stretched	O	O
at	O	O
a	O	O
glance	O	O
but	O	O
there	O	O
is	O	O
another	O	O
facet	O	O
of	O	O
style	O	O
and	O	O
readability	O	O
perspective	O	O
.	O	O
First	O	O
of	O	O
all	O	O
-	O	O
plain	O	O
old	O	O
forloops	O	O
are	O	O
plain	O	O
and	O	O
old	O	O
.	O	O
Everybody	O	O
already	O	O
knows	O	O
them	O	O
.	O	O
Second	O	O
,	O	O
and	O	O
more	O	O
important	O	O
-	O	O
you	O	O
probably	O	O
want	O	O
to	O	O
use	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
only	O	O
with	O	O
one	O	O
-	O	O
liner	O	O
lambdas	O	O
.	O	O
If	O	O
"	O	O
body	O	O
"	O	O
gets	O	O
heavier	O	O
-	O	O
they	O	O
tend	O	O
to	O	O
be	O	O
not	O	O
-	O	O
that	O	O
readable	O	O
.	O	O
You	O	O
have	O	O
2	O	O
options	O	O
from	O	O
here	O	O
-	O	O
use	O	O
inner	O	O
classes	O	O
(	O	O
yuck	O	O
)	O	O
or	O	O
use	O	O
plain	O	O
old	O	O
forloop	O	O
.	O	O
People	O	O
often	O	O
gets	O	O
annoyed	O	O
when	O	O
they	O	O
see	O	O
the	O	O
same	O	O
things	O	O
(	O	O
iteratins	O	O
over	O	O
collections	O	O
)	O	O
being	O	O
done	O	O
various	O	O
vays	O	O
/	O	O
styles	O	O
in	O	O
the	O	O
same	O	O
codebase	O	O
,	O	O
and	O	O
this	O	O
seems	O	O
to	O	O
be	O	O
the	O	O
case	O	O
.	O	O
Again	O	O
,	O	O
this	O	O
might	O	O
or	O	O
might	O	O
not	O	O
be	O	O
an	O	O
issue	O	O
.	O	O
Depends	O	O
on	O	O
people	O	O
working	O	O
on	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
19418427	O	O
,	O	O
answer	O	O
-	O	O
19418553	O	O
If	O	O
you	O	O
take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
methods	O	O
#	O	O
pre	O	O
and	O	O
its	O	O
decompiled	O	O
with	O	O
javap	O	O
-	O	O
c	O	O
ClassWithTheseMethods	O	O
versions	O	O
you	O	O
will	O	O
see	O	O
#	O	O
pre	O	O
and	O	O
#	O	O
pre	O	O
So	O	O
if	O	O
Strings	O	O
are	O	O
not	O	O
final	O	O
compiler	O	O
will	O	O
have	O	O
to	O	O
use	O	O
StringBuilder	B-api_mention	B-api_mention
to	O	O
concatenate	O	O
str1	O	O
and	O	O
str2	O	O
so	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
str1	O	O
+	O	O
str2	O	O
;	O	O
will	O	O
be	O	O
compiled	O	O
to	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
means	O	O
that	O	O
concat	O	O
will	O	O
be	O	O
created	O	O
at	O	O
runtime	O	O
so	O	O
will	O	O
not	O	O
come	O	O
from	O	O
String	B-api_mention	B-api_mention
pool	O	O
.	O	O
Also	O	O
if	O	O
Strings	O	O
are	O	O
final	O	O
then	O	O
compiler	O	O
can	O	O
assume	O	O
that	O	O
they	O	O
will	O	O
never	O	O
change	O	O
so	O	O
instead	O	O
of	O	O
using	O	O
StringBuilder	B-api_mention	B-api_mention
it	O	O
can	O	O
safely	O	O
concatenate	O	O
its	O	O
values	O	O
so	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
str1	O	O
+	O	O
str2	O	O
;	O	O
can	O	O
be	O	O
changed	O	O
to	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
StringLiteral	O	O
+	O	O
StringLiteral	O	O
;	O	O
and	O	O
concatenated	O	O
into	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
StringLiteral	O	O
;	O	O
which	O	O
means	O	O
that	O	O
concate	O	O
will	O	O
become	O	O
sting	O	O
literal	O	O
which	O	O
will	O	O
be	O	O
interned	O	O
in	O	O
string	O	O
pool	O	O
and	O	O
then	O	O
compared	O	O
with	O	O
same	O	O
string	O	O
literal	O	O
from	O	O
that	O	O
pool	O	O
in	O	O
if	O	O
statement	O	O
.	O	O
Question	O	O
-	O	O
31445024	O	O
,	O	O
answer	O	O
-	O	O
31760309	O	O
Until	O	O
the	O	O
language	O	O
specification	O	O
mentions	O	O
it	O	O
,	O	O
it	O	O
is	O	O
not	O	O
guaranteed	O	O
that	O	O
autoboxing	O	O
is	O	O
equivalent	O	O
to	O	O
a	O	O
call	O	O
to	O	O
the	O	O
static	O	O
valueOf	B-api_mention	B-api_mention
methods	O	O
.	O	O
It	O	O
is	O	O
an	O	O
implementation	O	O
aspect	O	O
,	O	O
not	O	O
part	O	O
of	O	O
the	O	O
boxing	O	O
conversion	O	O
specification	O	O
.	O	O
An	O	O
implementation	O	O
is	O	O
theoretically	O	O
free	O	O
to	O	O
use	O	O
another	O	O
mechanism	O	O
as	O	O
long	O	O
as	O	O
it	O	O
conforms	O	O
to	O	O
the	O	O
rule	O	O
you	O	O
mentioned	O	O
from	O	O
the	O	O
JLS	O	O
.	O	O
In	O	O
practice	O	O
,	O	O
there	O	O
are	O	O
many	O	O
Sun	O	O
JDK	O	O
bug	O	O
reports	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
JDK	O	O
-	O	O
4990346	O	O
and	O	O
JDK	O	O
-	O	O
6628737	O	O
)	O	O
that	O	O
clearly	O	O
imply	O	O
that	O	O
when	O	O
autoboxing	O	O
was	O	O
introduced	O	O
in	O	O
Java	O	O
5	O	O
,	O	O
the	O	O
intention	O	O
was	O	O
having	O	O
the	O	O
compiler	O	O
to	O	O
rely	O	O
on	O	O
valueOf	B-api_mention	B-api_mention
as	O	O
stated	O	O
in	O	O
JDK	O	O
-	O	O
6628737	O	O
:	O	O
#	O	O
blockquote	O	O
But	O	O
that	O	O
'	O	O
s	O	O
only	O	O
for	O	O
javac	O	O
,	O	O
not	O	O
necessarily	O	O
all	O	O
compilers	O	O
.	O	O
Question	O	O
-	O	O
15621083	O	O
I	O	O
am	O	O
working	O	O
on	O	O
some	O	O
Java	O	O
code	O	O
which	O	O
needs	O	O
to	O	O
be	O	O
highly	O	O
optimized	O	O
as	O	O
it	O	O
will	O	O
run	O	O
in	O	O
hot	O	O
functions	O	O
that	O	O
are	O	O
invoked	O	O
at	O	O
many	O	O
points	O	O
in	O	O
my	O	O
main	O	O
program	O	O
logic	O	O
.	O	O
Part	O	O
of	O	O
this	O	O
code	O	O
involves	O	O
multiplying	O	O
double	O	O
variables	O	O
by	O	O
10	O	O
raised	O	O
to	O	O
arbitrary	O	O
non	O	O
-	O	O
negative	O	O
int	O	O
exponent	O	O
s	O	O
.	O	O
One	O	O
fast	O	O
way	O	O
(	O	O
edit	O	O
:	O	O
but	O	O
not	O	O
the	O	O
fastest	O	O
possible	O	O
,	O	O
see	O	O
Update	O	O
2	O	O
below	O	O
)	O	O
to	O	O
get	O	O
the	O	O
multiplied	O	O
value	O	O
is	O	O
to	O	O
switch	O	O
on	O	O
the	O	O
exponent	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
commented	O	O
ellipses	O	O
above	O	O
indicate	O	O
that	O	O
the	O	O
case	O	O
int	O	O
constants	O	O
continue	O	O
incrementing	O	O
by	O	O
1	O	O
,	O	O
so	O	O
there	O	O
are	O	O
really	O	O
19	O	O
case	O	O
s	O	O
in	O	O
the	O	O
above	O	O
code	O	O
snippet	O	O
.	O	O
Since	O	O
I	O	O
wasn	O	O
'	O	O
t	O	O
sure	O	O
whether	O	O
I	O	O
would	O	O
actually	O	O
need	O	O
all	O	O
the	O	O
powers	O	O
of	O	O
10	O	O
in	O	O
case	O	O
statements	O	O
10	O	O
thru	O	O
18	O	O
,	O	O
I	O	O
ran	O	O
some	O	O
microbenchmarks	O	O
comparing	O	O
the	O	O
time	O	O
to	O	O
complete	O	O
10	O	O
million	O	O
operations	O	O
with	O	O
this	O	O
switch	O	O
statement	O	O
versus	O	O
a	O	O
switch	O	O
with	O	O
only	O	O
case	O	O
s	O	O
0	O	O
thru	O	O
9	O	O
(	O	O
with	O	O
the	O	O
exponent	O	O
limited	O	O
to	O	O
9	O	O
or	O	O
less	O	O
to	O	O
avoid	O	O
breaking	O	O
the	O	O
pared	O	O
-	O	O
down	O	O
switch	O	O
)	O	O
.	O	O
I	O	O
got	O	O
the	O	O
rather	O	O
surprising	O	O
(	O	O
to	O	O
me	O	O
,	O	O
at	O	O
least	O	O
!	O	O
)	O	O
result	O	O
that	O	O
the	O	O
longer	O	O
switch	O	O
with	O	O
more	O	O
case	O	O
statements	O	O
actually	O	O
ran	O	O
faster	O	O
.	O	O
On	O	O
a	O	O
lark	O	O
,	O	O
I	O	O
tried	O	O
adding	O	O
even	O	O
more	O	O
case	O	O
s	O	O
which	O	O
just	O	O
returned	O	O
dummy	O	O
values	O	O
,	O	O
and	O	O
found	O	O
that	O	O
I	O	O
could	O	O
get	O	O
the	O	O
switch	O	O
to	O	O
run	O	O
even	O	O
faster	O	O
with	O	O
around	O	O
22	O	O
-	O	O
27	O	O
declared	O	O
case	O	O
s	O	O
(	O	O
even	O	O
though	O	O
those	O	O
dummy	O	O
cases	O	O
are	O	O
never	O	O
actually	O	O
hit	O	O
while	O	O
the	O	O
code	O	O
is	O	O
running	O	O
)	O	O
.	O	O
(	O	O
Again	O	O
,	O	O
case	O	O
s	O	O
were	O	O
added	O	O
in	O	O
a	O	O
contiguous	O	O
fashion	O	O
by	O	O
incrementing	O	O
the	O	O
prior	O	O
case	O	O
constant	O	O
by	O	O
1	O	O
.	O	O
)	O	O
These	O	O
execution	O	O
time	O	O
differences	O	O
are	O	O
not	O	O
very	O	O
significant	O	O
:	O	O
for	O	O
a	O	O
random	O	O
exponent	O	O
between	O	O
0	O	O
and	O	O
10	O	O
,	O	O
the	O	O
dummy	O	O
padded	O	O
switch	O	O
statement	O	O
finishes	O	O
10	O	O
million	O	O
executions	O	O
in	O	O
1	O	O
.	O	O
49	O	O
secs	O	O
versus	O	O
1	O	O
.	O	O
54	O	O
secs	O	O
for	O	O
the	O	O
unpadded	O	O
version	O	O
,	O	O
for	O	O
a	O	O
grand	O	O
total	O	O
savings	O	O
of	O	O
5ns	O	O
per	O	O
execution	O	O
.	O	O
So	O	O
,	O	O
not	O	O
the	O	O
kind	O	O
of	O	O
thing	O	O
that	O	O
makes	O	O
obsessing	O	O
over	O	O
padding	O	O
out	O	O
a	O	O
switch	O	O
statement	O	O
worth	O	O
the	O	O
effort	O	O
from	O	O
an	O	O
optimization	O	O
standpoint	O	O
.	O	O
But	O	O
I	O	O
still	O	O
just	O	O
find	O	O
it	O	O
curious	O	O
and	O	O
counter	O	O
-	O	O
intuitive	O	O
that	O	O
a	O	O
switch	O	O
doesn	O	O
'	O	O
t	O	O
become	O	O
slower	O	O
(	O	O
or	O	O
perhaps	O	O
at	O	O
best	O	O
maintain	O	O
constant	O	O
O	O	O
(	O	O
1	O	O
)	O	O
time	O	O
)	O	O
to	O	O
execute	O	O
as	O	O
more	O	O
case	O	O
s	O	O
are	O	O
added	O	O
to	O	O
it	O	O
.	O	O
#	O	O
img	O	O
These	O	O
are	O	O
the	O	O
results	O	O
I	O	O
obtained	O	O
from	O	O
running	O	O
with	O	O
various	O	O
limits	O	O
on	O	O
the	O	O
randomly	O	O
-	O	O
generated	O	O
exponent	O	O
values	O	O
.	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
include	O	O
the	O	O
results	O	O
all	O	O
the	O	O
way	O	O
down	O	O
to	O	O
1	O	O
for	O	O
the	O	O
exponent	O	O
limit	O	O
,	O	O
but	O	O
the	O	O
general	O	O
shape	O	O
of	O	O
the	O	O
curve	O	O
remains	O	O
the	O	O
same	O	O
,	O	O
with	O	O
a	O	O
ridge	O	O
around	O	O
the	O	O
12	O	O
-	O	O
17	O	O
case	O	O
mark	O	O
,	O	O
and	O	O
a	O	O
valley	O	O
between	O	O
18	O	O
-	O	O
28	O	O
.	O	O
All	O	O
tests	O	O
were	O	O
run	O	O
in	O	O
JUnitBenchmarks	O	O
using	O	O
shared	O	O
containers	O	O
for	O	O
the	O	O
random	O	O
values	O	O
to	O	O
ensure	O	O
identical	O	O
testing	O	O
inputs	O	O
.	O	O
I	O	O
also	O	O
ran	O	O
the	O	O
tests	O	O
both	O	O
in	O	O
order	O	O
from	O	O
longest	O	O
switch	O	O
statement	O	O
to	O	O
shortest	O	O
,	O	O
and	O	O
vice	O	O
-	O	O
versa	O	O
,	O	O
to	O	O
try	O	O
and	O	O
eliminate	O	O
the	O	O
possibility	O	O
of	O	O
ordering	O	O
-	O	O
related	O	O
test	O	O
problems	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
put	O	O
my	O	O
testing	O	O
code	O	O
up	O	O
on	O	O
a	O	O
github	O	O
repo	O	O
if	O	O
anyone	O	O
wants	O	O
to	O	O
try	O	O
to	O	O
reproduce	O	O
these	O	O
results	O	O
.	O	O
So	O	O
,	O	O
what	O	O
'	O	O
s	O	O
going	O	O
on	O	O
here	O	O
?	O	O
Some	O	O
vagaries	O	O
of	O	O
my	O	O
architecture	O	O
or	O	O
micro	O	O
-	O	O
benchmark	O	O
construction	O	O
?	O	O
Or	O	O
is	O	O
the	O	O
Java	O	O
switch	O	O
really	O	O
a	O	O
little	O	O
faster	O	O
to	O	O
execute	O	O
in	O	O
the	O	O
18	O	O
to	O	O
28	O	O
case	O	O
range	O	O
than	O	O
it	O	O
is	O	O
from	O	O
11	O	O
up	O	O
to	O	O
17	O	O
?	O	O
github	O	O
test	O	O
repo	O	O
"	O	O
switch	O	O
-	O	O
experiment	O	O
"	O	O
UPDATE	O	O
:	O	O
I	O	O
cleaned	O	O
up	O	O
the	O	O
benchmarking	O	O
library	O	O
quite	O	O
a	O	O
bit	O	O
and	O	O
added	O	O
a	O	O
text	O	O
file	O	O
in	O	O
/	O	O
results	O	O
with	O	O
some	O	O
output	O	O
across	O	O
a	O	O
wider	O	O
range	O	O
of	O	O
possible	O	O
exponent	O	O
values	O	O
.	O	O
I	O	O
also	O	O
added	O	O
an	O	O
option	O	O
in	O	O
the	O	O
testing	O	O
code	O	O
not	O	O
to	O	O
throw	O	O
an	O	O
Exception	B-api_mention	O
from	O	O
default	O	O
,	O	O
but	O	O
this	O	O
doesn	O	O
'	O	O
t	O	O
appear	O	O
to	O	O
affect	O	O
the	O	O
results	O	O
.	O	O
UPDATE	O	O
2	O	O
:	O	O
Found	O	O
some	O	O
pretty	O	O
good	O	O
discussion	O	O
of	O	O
this	O	O
issue	O	O
from	O	O
back	O	O
in	O	O
2009	O	O
on	O	O
the	O	O
xkcd	O	O
forum	O	O
here	O	O
:	O	O
#	O	O
a	O	O
.	O	O
The	O	O
OP	O	O
'	O	O
s	O	O
discussion	O	O
of	O	O
using	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
binarySearch	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gave	O	O
me	O	O
the	O	O
idea	O	O
for	O	O
a	O	O
simple	O	O
array	O	O
-	O	O
based	O	O
implementation	O	O
of	O	O
the	O	O
exponentiation	O	O
pattern	O	O
above	O	O
.	O	O
There	O	O
'	O	O
s	O	O
no	O	O
need	O	O
for	O	O
the	O	O
binary	O	O
search	O	O
since	O	O
I	O	O
know	O	O
what	O	O
the	O	O
entries	O	O
in	O	O
the	O	O
array	O	O
are	O	O
.	O	O
It	O	O
appears	O	O
to	O	O
run	O	O
about	O	O
3	O	O
times	O	O
faster	O	O
than	O	O
using	O	O
switch	O	O
,	O	O
obviously	O	O
at	O	O
the	O	O
expense	O	O
of	O	O
some	O	O
of	O	O
the	O	O
control	O	O
flow	O	O
that	O	O
switch	O	O
affords	O	O
.	O	O
That	O	O
code	O	O
has	O	O
been	O	O
added	O	O
to	O	O
the	O	O
github	O	O
repo	O	O
also	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923211	O	O
This	O	O
advice	O	O
is	O	O
a	O	O
variant	O	O
of	O	O
the	O	O
"	O	O
be	O	O
as	O	O
unspecific	O	O
as	O	O
possible	O	O
regarding	O	O
inputs	O	O
and	O	O
as	O	O
specific	O	O
as	O	O
possible	O	O
regarding	O	O
outputs	O	O
"	O	O
rule	O	O
of	O	O
thumb	O	O
.	O	O
Usually	O	O
if	O	O
you	O	O
have	O	O
a	O	O
method	O	O
that	O	O
takes	O	O
a	O	O
plain	O	O
non	O	O
-	O	O
null	O	O
value	O	O
,	O	O
you	O	O
can	O	O
map	O	O
it	O	O
over	O	O
the	O	O
Optional	B-api_mention	B-api_mention
,	O	O
so	O	O
the	O	O
plain	O	O
version	O	O
is	O	O
strictly	O	O
more	O	O
unspecific	O	O
regarding	O	O
inputs	O	O
.	O	O
However	O	O
there	O	O
are	O	O
a	O	O
bunch	O	O
of	O	O
possible	O	O
reasons	O	O
why	O	O
you	O	O
would	O	O
want	O	O
to	O	O
require	O	O
an	O	O
Optional	B-api_mention	B-api_mention
argument	O	O
nonetheless	O	O
:	O	O
#	O	O
li	O	O
you	O	O
want	O	O
your	O	O
function	O	O
to	O	O
be	O	O
used	O	O
in	O	O
conjunction	O	O
with	O	O
another	O	O
API	O	O
that	O	O
returns	O	O
an	O	O
Optional	B-api_mention	B-api_mention
#	O	O
li	O	O
Your	O	O
function	O	O
should	O	O
return	O	O
something	O	O
other	O	O
than	O	O
an	O	O
empty	O	O
Optional	B-api_mention	B-api_mention
if	O	O
the	O	O
given	O	O
value	O	O
is	O	O
empty	O	O
#	O	O
li	O	O
You	O	O
think	O	O
Optional	B-api_mention	B-api_mention
is	O	O
so	O	O
awesome	O	O
that	O	O
whoever	O	O
uses	O	O
your	O	O
API	O	O
should	O	O
be	O	O
required	O	O
to	O	O
learn	O	O
about	O	O
it	O	O
;	O	O
-	O	O
)	O	O

