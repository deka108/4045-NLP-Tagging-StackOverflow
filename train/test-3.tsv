Question	O
-	O
13102045	O
,	O
answer	O
-	O
7056786	O
It	O
'	O
s	O
because	O
when	O
you	O
enter	O
a	O
number	O
then	O
press	O
Enter	O
,	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
consumes	O
only	O
the	O
number	O
,	O
not	O
the	O
"	O
end	O
of	O
line	O
"	O
.	O
When	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
executes	O
,	O
it	O
consumes	O
the	O
"	O
end	O
of	O
line	O
"	O
still	O
in	O
the	O
buffer	O
from	O
the	O
first	O
input	O
.	O
Instead	O
,	O
use	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
immediately	O
after	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
6470651	O
,	O
answer	O
-	O
6470695	O
A	O
simple	O
thing	O
to	O
do	O
is	O
to	O
use	O
a	O
HashSet	B-api_mention
with	O
an	O
incorrect	O
(	O
or	O
non	O
-	O
existent	O
)	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
keep	O
adding	O
"	O
duplicates	O
"	O
.	O
Instead	O
of	O
ignoring	O
duplicates	O
as	O
it	O
should	O
,	O
the	O
set	O
will	O
only	O
ever	O
grow	O
and	O
you	O
won	O
'	O
t	O
be	O
able	O
to	O
remove	O
them	O
.	O
If	O
you	O
want	O
these	O
bad	O
keys	O
/	O
elements	O
to	O
hang	O
around	O
you	O
can	O
use	O
a	O
static	O
field	O
like	O
#	O
pre	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
10827900	O
In	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
the	O
replace	O
method	O
either	O
takes	O
a	O
pair	O
of	O
char	O
'	O
s	O
or	O
a	O
pair	O
of	O
CharSequence	B-api_mention
'	O
s	O
(	O
of	O
which	O
String	B-api_mention
is	O
a	O
subclass	O
,	O
so	O
it	O
'	O
ll	O
happily	O
take	O
a	O
pair	O
of	O
String	B-api_mention
'	I-api_mention
s	I-api_mention
)	O
.	O
The	O
replace	O
method	O
will	O
replace	O
all	O
occurrences	O
of	O
a	O
char	O
or	O
CharSequence	B-api_mention
.	O
On	O
the	O
other	O
hand	O
,	O
both	O
String	B-api_mention
arguments	O
to	O
replaceFirst	B-api_mention
and	O
replaceAll	B-api_mention
are	O
regular	O
expressions	O
(	O
regex	O
)	O
.	O
Using	O
the	O
wrong	O
function	O
can	O
lead	O
to	O
subtle	O
bugs	O
.	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489394	O
It	O
'	O
s	O
a	O
feature	O
of	O
the	O
Java	O
language	O
.	O
String	B-api_mention
literals	O
in	O
the	O
source	O
code	O
is	O
given	O
special	O
treatment	O
.	O
The	O
language	O
spec	O
,	O
here	O
,	O
simply	O
says	O
that	O
a	O
string	O
literal	O
is	O
of	O
String	B-api_mention
type	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
22269778	O
There	O
actually	O
is	O
a	O
trick	O
how	O
to	O
execute	O
a	O
parallel	O
operation	O
in	O
a	O
specific	O
fork	O
-	O
join	O
pool	O
.	O
If	O
you	O
execute	O
it	O
as	O
a	O
task	O
in	O
a	O
fork	O
-	O
join	O
pool	O
,	O
it	O
stays	O
there	O
and	O
does	O
not	O
use	O
the	O
common	O
one	O
.	O
#	O
pre	O
The	O
trick	O
is	O
based	O
on	O
ForkJoinTask	B-api_mention
.	I-api_mention
fork	I-api_mention
which	O
specifies	O
:	O
"	O
Arranges	O
to	O
asynchronously	O
execute	O
this	O
task	O
in	O
the	O
pool	O
the	O
current	O
task	O
is	O
running	O
in	O
,	O
if	O
applicable	O
,	O
or	O
using	O
the	O
ForkJoinPool	B-api_mention
.	I-api_mention
commonPool	I-api_mention
(	I-api_mention
)	I-api_mention
if	O
not	O
inForkJoinPool	B-api_mention
(	I-api_mention
)	I-api_mention
"	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
25735202	O
You	O
need	O
to	O
first	O
create	O
a	O
URI	O
like	O
:	O
#	O
pre	O
Then	O
convert	O
that	O
Uri	B-api_mention
to	O
ASCII	O
string	O
:	O
urlStr	O
=	O
uri	O
.	B-api_mention
toASCIIString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Now	O
your	O
url	O
string	O
is	O
completely	O
encoded	O
first	O
we	O
did	O
simple	O
url	O
encoding	O
and	O
then	O
we	O
converted	O
it	O
to	O
ASCII	O
String	B-api_mention
to	O
make	O
sure	O
no	O
character	O
outside	O
US	O
-	O
ASCII	O
are	O
remaining	O
in	O
string	O
.	O
This	O
is	O
exactly	O
how	O
browsers	O
do	O
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31445150	O
I	O
first	O
tought	O
your	O
question	O
was	O
a	O
dupe	O
of	O
What	O
code	O
does	O
the	O
compiler	O
generate	O
for	O
autoboxing	O
?	O
However	O
,	O
after	O
your	O
comment	O
on	O
@	O
ElliottFrisch	O
I	O
realized	O
it	O
was	O
different	O
:	O
#	O
blockquote	O
For	O
other	O
readers	O
,	O
assume	O
that	O
"	O
behaves	O
that	O
way	O
"	O
means	O
using	O
valueOf	B-api_mention
.	O
Remember	O
that	O
there	O
are	O
multiples	O
compilers	O
for	O
Java	O
.	O
To	O
be	O
"	O
legal	O
"	O
they	O
must	O
follow	O
the	O
contract	O
given	O
in	O
the	O
JLS	O
.	O
Therefore	O
,	O
as	O
long	O
as	O
all	O
the	O
rules	O
here	O
are	O
respected	O
,	O
there	O
is	O
no	O
guarantee	O
of	O
how	O
autoboxing	O
is	O
internally	O
implemented	O
.	O
But	O
I	O
don	O
'	O
t	O
see	O
any	O
reason	O
to	O
not	O
use	O
valueOf	B-api_mention
,	O
specially	O
that	O
it	O
uses	O
the	O
cached	O
values	O
and	O
is	O
the	O
recommended	O
way	O
as	O
per	O
this	O
article	O
by	O
Joseph	O
D	O
.	O
Darcy	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331323	O
Another	O
way	O
of	O
doing	O
that	O
is	O
:	O
String	B-api_mention
date	O
=	O
dateAndTime	O
.	B-api_mention
substring	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
I	O
'	O
m	O
not	O
exactly	O
certain	O
,	O
but	O
I	O
think	O
this	O
might	O
be	O
faster	O
/	O
use	O
less	O
memory	O
than	O
using	O
the	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
32356762	O
Is	O
there	O
a	O
good	O
reason	O
that	O
the	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
in	O
the	O
java	O
.	O
utils	O
package	O
returns	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
instead	O
of	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
?	O
Obviously	O
an	O
ArrayList	B-api_mention
is	O
a	O
List	B-api_mention
,	O
but	O
I	O
'	O
m	O
under	O
the	O
impression	O
that	O
it	O
'	O
s	O
generally	O
good	O
practice	O
to	O
return	O
the	O
interface	O
type	O
instead	O
of	O
implementation	O
type	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276498	O
Assuming	O
all	O
the	O
streams	O
get	O
created	O
okay	O
,	O
yes	O
,	O
just	O
closing	O
bw	O
is	O
fine	O
with	O
those	O
stream	O
implementations	O
;	O
but	O
that	O
'	O
s	O
a	O
big	O
assumption	O
.	O
I	O
'	O
d	O
use	O
try	O
-	O
with	O
-	O
resources	O
(	O
tutorial	O
)	O
so	O
that	O
any	O
issues	O
constructing	O
the	O
subsequent	O
streams	O
that	O
throw	O
exceptions	O
don	O
'	O
t	O
leave	O
the	O
previous	O
streams	O
hanging	O
,	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
rely	O
on	O
the	O
stream	O
implementation	O
having	O
the	O
call	O
to	O
close	O
the	O
underlying	O
stream	O
:	O
#	O
pre	O
Note	O
you	O
no	O
longer	O
call	O
close	O
at	O
all	O
.	O
Important	O
note	O
:	O
To	O
have	O
try	O
-	O
with	O
-	O
resources	O
close	O
them	O
,	O
you	O
must	O
assign	O
the	O
streams	O
to	O
variables	O
as	O
you	O
open	O
them	O
,	O
you	O
cannot	O
use	O
nesting	O
.	O
If	O
you	O
use	O
nesting	O
,	O
an	O
exception	O
during	O
construction	O
of	O
one	O
of	O
the	O
later	O
streams	O
(	O
say	O
,	O
GZIPOutputStream	B-api_mention
)	O
will	O
leave	O
any	O
stream	O
constructed	O
by	O
the	O
nested	O
calls	O
inside	O
it	O
open	O
.	O
From	O
JLS	O
§	O
14	O
.	O
20	O
.	O
3	O
:	O
#	O
blockquote	O
Note	O
the	O
word	O
"	O
variables	O
"	O
(	O
my	O
emphasis	O
)	O
.	O
E	O
.	O
g	O
.	O
,	O
don	O
'	O
t	O
do	O
this	O
:	O
#	O
pre	O
.	O
.	O
.	O
because	O
an	O
exception	O
from	O
the	O
GZIPOutputStream	B-api_mention
(	O
OutputStream	B-api_mention
)	O
constructor	O
(	O
which	O
says	O
it	O
may	O
throw	O
IOException	B-api_mention
,	O
and	O
writes	O
a	O
header	O
to	O
the	O
underlying	O
stream	O
)	O
would	O
leave	O
the	O
FileOutputStream	B-api_mention
open	O
.	O
Since	O
some	O
resources	O
have	O
constructors	O
that	O
may	O
throw	O
and	O
others	O
don	O
'	O
t	O
,	O
it	O
'	O
s	O
a	O
good	O
habit	O
to	O
just	O
list	O
them	O
separately	O
.	O
We	O
can	O
double	O
-	O
check	O
our	O
interpretation	O
of	O
that	O
JLS	O
section	O
with	O
this	O
program	O
:	O
#	O
pre	O
.	O
.	O
.	O
which	O
has	O
the	O
output	O
:	O
#	O
pre	O
Note	O
that	O
there	O
are	O
no	O
calls	O
to	O
close	O
there	O
.	O
If	O
we	O
fix	O
main	O
:	O
#	O
pre	O
then	O
we	O
get	O
the	O
appropriate	O
close	O
calls	O
:	O
#	O
pre	O
(	O
Yes	O
,	O
two	O
calls	O
to	O
InnerMost	O
#	O
close	O
is	O
correct	O
;	O
one	O
is	O
from	O
Middle	O
,	O
the	O
other	O
from	O
try	O
-	O
with	O
-	O
resources	O
.	O
)	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14492043	O
'	O
Random	O
'	O
is	O
more	O
than	O
just	O
about	O
getting	O
numbers	O
.	O
.	O
.	O
.	O
what	O
you	O
have	O
is	O
pseudo	O
-	O
random	O
If	O
pseudo	O
-	O
random	O
is	O
good	O
enough	O
for	O
your	O
purposes	O
,	O
then	O
sure	O
,	O
it	O
'	O
s	O
way	O
faster	O
(	O
and	O
XOR	O
+	O
Bitshift	O
will	O
be	O
faster	O
than	O
what	O
you	O
have	O
)	O
Rolf	O
Edit	O
:	O
OK	O
,	O
after	O
being	O
too	O
hasty	O
in	O
this	O
answer	O
,	O
let	O
me	O
answer	O
the	O
real	O
reason	O
why	O
your	O
code	O
is	O
faster	O
:	O
From	O
the	O
JavaDoc	O
for	O
Math	B-api_mention
.	I-api_mention
Random	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
blockquote	O
This	O
is	O
likely	O
why	O
your	O
code	O
is	O
faster	O
.	O
Question	O
-	O
27504925	O
The	O
Java	O
language	O
specification	O
specifies	O
that	O
#	O
blockquote	O
So	O
,	O
considering	O
arrays	O
are	O
objects	O
—	O
why	O
did	O
the	O
Java	O
designers	O
make	O
the	O
decision	O
not	O
to	O
allow	O
inherit	O
and	O
override	O
from	O
it	O
,	O
for	O
example	O
,	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
The	O
current	O
syntax	O
wouldn	O
'	O
t	O
allow	O
creating	O
anonymous	O
classes	O
with	O
an	O
array	O
as	O
the	O
base	O
class	O
,	O
but	O
I	O
don	O
'	O
t	O
think	O
that	O
was	O
the	O
reason	O
for	O
their	O
decision	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
13134221	O
Actually	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
new	O
thread	O
and	O
have	O
its	O
own	O
execution	O
scenario	O
.	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
asynchronously	O
,	O
which	O
changes	O
the	O
state	O
of	O
new	O
Thread	B-api_mention
to	O
Runnable	B-api_mention
.	O
But	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
create	O
any	O
new	O
thread	O
.	O
Instead	O
it	O
execute	O
the	O
run	O
method	O
in	O
the	O
current	O
running	O
thread	O
synchronously	O
.	O
If	O
you	O
are	O
using	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
then	O
you	O
are	O
not	O
using	O
the	O
features	O
of	O
multi	O
threading	O
at	O
all	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777312	O
Arrays	O
inherit	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
Object	B-api_mention
and	O
hence	O
compare	O
only	O
returns	O
true	O
if	O
comparing	O
an	O
array	O
against	O
itself	O
.	O
On	O
the	O
other	O
hand	O
,	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
compares	O
the	O
elements	O
of	O
the	O
arrays	O
.	O
This	O
snippet	O
elucidates	O
the	O
difference	O
:	O
#	O
pre	O
See	O
also	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Another	O
static	O
method	O
there	O
may	O
also	O
be	O
of	O
interest	O
:	O
Arrays	B-api_mention
.	I-api_mention
deepEquals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
23114015	O
,	O
answer	O
-	O
23177907	O
This	O
was	O
not	O
an	O
omission	O
;	O
there	O
was	O
detailed	O
discussion	O
on	O
the	O
EG	O
list	O
in	O
June	O
of	O
2013	O
.	O
The	O
definitive	O
discussion	O
of	O
the	O
Expert	O
Group	O
is	O
rooted	O
at	O
this	O
thread	O
.	O
While	O
it	O
seemed	O
"	O
obvious	O
"	O
(	O
even	O
to	O
the	O
Expert	O
Group	O
,	O
initially	O
)	O
that	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
seemed	O
to	O
make	O
sense	O
on	O
Iterable	B-api_mention
,	O
the	O
fact	O
that	O
Iterable	B-api_mention
was	O
so	O
general	O
became	O
a	O
problem	O
,	O
because	O
the	O
obvious	O
signature	O
:	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
not	O
always	O
what	O
you	O
were	O
going	O
to	O
want	O
.	O
Some	O
things	O
that	O
were	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
would	O
rather	O
have	O
their	O
stream	O
method	O
return	O
an	O
IntStream	B-api_mention
,	O
for	O
example	O
.	O
But	O
putting	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
this	O
high	O
up	O
in	O
the	O
hierarchy	O
would	O
make	O
that	O
impossible	O
.	O
So	O
instead	O
,	O
we	O
made	O
it	O
really	O
easy	O
to	O
make	O
a	O
Stream	B-api_mention
from	O
an	O
Iterable	B-api_mention
,	O
by	O
providing	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
implementation	O
of	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
Collection	B-api_mention
is	O
just	O
:	O
#	O
pre	O
Any	O
client	O
can	O
get	O
the	O
stream	O
they	O
want	O
from	O
an	O
Iterable	O
with	O
:	O
Stream	B-api_mention
s	O
=	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
In	O
the	O
end	O
we	O
concluded	O
that	O
adding	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
Iterable	O
would	O
be	O
a	O
mistake	O
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31760309	O
Until	O
the	O
language	O
specification	O
mentions	O
it	O
,	O
it	O
is	O
not	O
guaranteed	O
that	O
autoboxing	O
is	O
equivalent	O
to	O
a	O
call	O
to	O
the	O
static	O
valueOf	B-api_mention
methods	O
.	O
It	O
is	O
an	O
implementation	O
aspect	O
,	O
not	O
part	O
of	O
the	O
boxing	O
conversion	O
specification	O
.	O
An	O
implementation	O
is	O
theoretically	O
free	O
to	O
use	O
another	O
mechanism	O
as	O
long	O
as	O
it	O
conforms	O
to	O
the	O
rule	O
you	O
mentioned	O
from	O
the	O
JLS	O
.	O
In	O
practice	O
,	O
there	O
are	O
many	O
Sun	O
JDK	O
bug	O
reports	O
(	O
e	O
.	O
g	O
.	O
JDK	O
-	O
4990346	O
and	O
JDK	O
-	O
6628737	O
)	O
that	O
clearly	O
imply	O
that	O
when	O
autoboxing	O
was	O
introduced	O
in	O
Java	O
5	O
,	O
the	O
intention	O
was	O
having	O
the	O
compiler	O
to	O
rely	O
on	O
valueOf	B-api_mention
as	O
stated	O
in	O
JDK	O
-	O
6628737	O
:	O
#	O
blockquote	O
But	O
that	O
'	O
s	O
only	O
for	O
javac	O
,	O
not	O
necessarily	O
all	O
compilers	O
.	O
Question	O
-	O
31419029	O
I	O
'	O
ve	O
tried	O
to	O
build	O
my	O
own	O
Map	B-api_mention
to	O
increase	O
the	O
performance	O
for	O
a	O
special	O
environment	O
,	O
and	O
I	O
realized	O
something	O
pretty	O
interesting	O
:	O
Creating	O
a	O
new	O
Hashmap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
faster	O
than	O
new	O
Object	B-api_mention
[	I-api_mention
2000	I-api_mention
]	I-api_mention
-	O
no	O
matter	O
in	O
which	O
order	O
I	O
execute	O
these	O
commands	O
.	O
That	O
'	O
s	O
pretty	O
confusing	O
to	O
me	O
,	O
esp	O
.	O
because	O
the	O
Hashmap	B-api_mention
constructor	O
contains	O
a	O
table	O
=	O
new	O
Entry	O
[	O
capacity	O
]	O
,	O
according	O
to	O
this	O
.	O
Is	O
there	O
something	O
wrong	O
with	O
my	O
testbench	O
?	O
#	O
pre	O
I	O
'	O
d	O
love	O
to	O
see	O
the	O
results	O
of	O
testing	O
on	O
another	O
computer	O
.	O
I	O
'	O
ve	O
got	O
no	O
clue	O
why	O
creating	O
a	O
HashMap	B-api_mention
is	O
10	O
times	O
faster	O
than	O
creating	O
a	O
Object	B-api_mention
[	I-api_mention
]	I-api_mention
.	O
Question	O
-	O
13659217	O
,	O
answer	O
-	O
13659231	O
You	O
can	O
'	O
t	O
see	O
this	O
method	O
in	O
javadoc	O
because	O
it	O
'	O
s	O
added	O
by	O
the	O
compiler	O
.	O
Documented	O
in	O
three	O
places	O
:	O
#	O
li	O
Enum	O
Types	O
,	O
The	O
Java	O
Tutorials	O
#	O
blockquote	O
#	O
li	O
Enum	B-api_mention
.	I-api_mention
valueOf	I-api_mention
class	O
(	O
The	O
special	O
implicit	O
values	B-api_mention
method	O
is	O
mentioned	O
in	O
description	O
of	O
valueOf	B-api_mention
method	O
)	O
#	O
blockquote	O
#	O
li	O
Enum	O
Types	O
,	O
Section	O
8	O
.	O
9	O
,	O
Java	O
Language	O
Specification	O
The	O
values	B-api_mention
function	O
simply	O
list	O
all	O
values	O
of	O
the	O
enumeration	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
31931870	O
Collections	B-api_mention
.	I-api_mention
singletonList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
8157755	O
,	O
answer	O
-	O
8157791	O
If	O
you	O
want	O
the	O
value	O
you	O
are	O
assigning	O
in	O
the	O
constructor	O
,	O
you	O
need	O
to	O
add	O
a	O
method	O
in	O
the	O
enum	O
definition	O
to	O
return	O
that	O
value	O
.	O
If	O
you	O
want	O
a	O
unique	O
number	O
that	O
represent	O
the	O
enum	O
value	O
,	O
you	O
can	O
use	O
ordinal	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571352	O
You	O
can	O
use	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
returns	O
the	O
byte	O
[	O
]	O
array	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725470	O
List	B-api_mention
iterators	O
guarantee	O
first	O
and	O
foremost	O
that	O
you	O
get	O
the	O
list	O
'	O
s	O
elements	O
in	O
the	O
internal	O
order	O
of	O
the	O
list	O
(	O
aka	O
.	O
insertion	O
order	O
)	O
.	O
More	O
specifically	O
it	O
is	O
in	O
the	O
order	O
you	O
'	O
ve	O
inserted	O
the	O
elements	O
or	O
on	O
how	O
you	O
'	O
ve	O
manipulated	O
the	O
list	O
.	O
Sorting	O
can	O
be	O
seen	O
as	O
a	O
manipulation	O
of	O
the	O
data	O
structure	O
,	O
and	O
there	O
are	O
several	O
ways	O
to	O
sort	O
the	O
list	O
.	O
I	O
'	O
ll	O
order	O
the	O
ways	O
in	O
the	O
order	O
of	O
usefulness	O
as	O
I	O
personally	O
see	O
it	O
:	O
1	O
.	O
Consider	O
using	O
Set	B-api_mention
or	O
Bag	B-api_mention
collections	O
instead	O
NOTE	O
:	O
I	O
put	O
this	O
option	O
at	O
the	O
top	O
because	O
this	O
is	O
what	O
you	O
normally	O
want	O
to	O
do	O
anyway	O
.	O
A	O
sorted	O
set	O
automatically	O
sorts	O
the	O
collection	O
at	O
insertion	O
,	O
meaning	O
that	O
it	O
does	O
the	O
sorting	O
while	O
you	O
add	O
elements	O
into	O
the	O
collection	O
.	O
It	O
also	O
means	O
you	O
don	O
'	O
t	O
need	O
to	O
manually	O
sort	O
it	O
.	O
Furthermore	O
if	O
you	O
are	O
sure	O
that	O
you	O
don	O
'	O
t	O
need	O
to	O
worry	O
about	O
(	O
or	O
have	O
)	O
duplicate	O
elements	O
then	O
you	O
can	O
use	O
the	O
TreeSet	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
instead	O
.	O
It	O
implements	O
SortedSet	B-api_mention
and	O
NavigableSet	B-api_mention
interfaces	O
and	O
works	O
as	O
you	O
'	O
d	O
probably	O
expect	O
from	O
a	O
list	O
:	O
#	O
pre	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
natural	O
ordering	O
you	O
can	O
use	O
the	O
constructor	O
parameter	O
that	O
takes	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Alternatively	O
you	O
can	O
use	O
Multisets	B-api_mention
(	O
also	O
known	O
as	O
Bags	B-api_mention
)	O
,	O
that	O
is	O
a	O
Set	B-api_mention
that	O
allows	O
duplicate	O
elements	O
,	O
instead	O
and	O
there	O
are	O
third	O
party	O
implementations	O
of	O
them	O
.	O
Most	O
notably	O
from	O
the	O
Guava	O
libraries	O
there	O
is	O
a	O
TreeMultiset	B-api_mention
,	O
that	O
works	O
a	O
lot	O
like	O
the	O
TreeSet	B-api_mention
.	O
2	O
.	O
Sort	O
your	O
list	O
with	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
As	O
mentioned	O
above	O
,	O
sorting	O
of	O
List	B-api_mention
s	O
is	O
an	O
manipulation	O
of	O
the	O
data	O
structure	O
.	O
So	O
for	O
situations	O
where	O
you	O
need	O
"	O
one	O
source	O
of	O
truth	O
"	O
that	O
will	O
be	O
sorted	O
in	O
a	O
variety	O
of	O
ways	O
then	O
sorting	O
it	O
manually	O
is	O
the	O
way	O
to	O
go	O
.	O
You	O
can	O
sort	O
your	O
list	O
with	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
is	O
a	O
code	O
sample	O
on	O
how	O
:	O
#	O
pre	O
Using	O
comparators	O
One	O
clear	O
benefit	O
is	O
that	O
you	O
may	O
use	O
Comparator	B-api_mention
in	O
the	O
sort	B-api_mention
method	O
.	O
Java	O
also	O
provides	O
some	O
implementations	O
for	O
the	O
Comparator	B-api_mention
such	O
as	O
the	O
Collator	B-api_mention
which	O
is	O
useful	O
for	O
locale	O
sensitive	O
sorting	O
strings	O
.	O
Here	O
is	O
one	O
example	O
:	O
#	O
pre	O
Sorting	O
in	O
concurrent	O
environments	O
Do	O
note	O
though	O
that	O
using	O
the	O
sort	B-api_mention
method	O
is	O
not	O
friendly	O
in	O
concurrent	O
environments	O
,	O
since	O
the	O
collection	O
instance	O
will	O
be	O
manipulated	O
,	O
and	O
you	O
should	O
consider	O
using	O
immutable	O
collections	O
instead	O
.	O
This	O
is	O
something	O
Guava	O
provides	O
in	O
the	O
Ordering	B-api_mention
class	O
and	O
is	O
a	O
simple	O
one	O
-	O
liner	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
sorted	O
=	O
Ordering	B-api_mention
.	I-api_mention
natural	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sortedCopy	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
3	O
.	O
Wrap	O
your	O
list	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
PriorityQueue	I-api_mention
Though	O
there	O
is	O
no	O
sorted	O
list	O
in	O
Java	O
there	O
is	O
however	O
a	O
sorted	O
queue	O
which	O
would	O
probably	O
work	O
just	O
as	O
well	O
for	O
you	O
.	O
It	O
is	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
PriorityQueue	I-api_mention
class	O
.	O
Nico	O
Haase	O
linked	O
in	O
the	O
comments	O
to	O
a	O
related	O
question	O
that	O
also	O
answers	O
this	O
.	O
In	O
a	O
sorted	O
collection	O
you	O
most	O
likely	O
don	O
'	O
t	O
want	O
to	O
manipulate	O
the	O
internal	O
data	O
structure	O
which	O
is	O
why	O
PriorityQueue	B-api_mention
doesn	O
'	O
t	O
implement	O
the	O
List	B-api_mention
interface	O
(	O
because	O
that	O
would	O
give	O
you	O
direct	O
access	O
to	O
it	O
'	O
s	O
elements	O
)	O
.	O
Caveat	O
on	O
the	O
PriorityQueue	B-api_mention
iterator	O
The	O
PriorityQueue	B-api_mention
class	O
implements	O
the	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
and	O
Collection	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interfaces	O
so	O
it	O
can	O
be	O
iterated	O
as	O
usual	O
.	O
However	O
the	O
iterator	O
is	O
not	O
guaranteed	O
to	O
return	O
elements	O
in	O
the	O
sorted	O
order	O
.	O
Instead	O
(	O
as	O
Alderath	O
points	O
out	O
in	O
the	O
comments	O
)	O
you	O
need	O
to	O
poll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
the	O
queue	O
until	O
empty	O
.	O
Note	O
that	O
you	O
can	O
convert	O
a	O
list	O
to	O
a	O
priority	O
queue	O
via	O
the	O
constructor	O
that	O
takes	O
any	O
collection	O
:	O
#	O
pre	O
4	O
.	O
Write	O
your	O
own	O
SortedList	B-api_mention
class	O
NOTE	O
:	O
You	O
shouldn	O
'	O
t	O
have	O
to	O
do	O
this	O
.	O
You	O
can	O
write	O
your	O
own	O
List	B-api_mention
class	O
that	O
sorts	O
each	O
time	O
you	O
add	O
a	O
new	O
element	O
.	O
This	O
can	O
get	O
rather	O
computation	O
heavy	O
depending	O
on	O
your	O
implementation	O
and	O
is	O
pointless	O
,	O
unless	O
you	O
want	O
to	O
do	O
it	O
as	O
an	O
exercise	O
,	O
because	O
of	O
two	O
main	O
reasons	O
:	O
#	O
li	O
It	O
breaks	O
the	O
contract	O
that	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
has	O
,	O
because	O
the	O
add	B-api_mention
methods	O
should	O
ensure	O
that	O
the	O
element	O
will	O
reside	O
in	O
the	O
index	O
that	O
the	O
user	O
specifies	O
.	O
#	O
li	O
Why	O
reinvent	O
the	O
wheel	O
?	O
You	O
should	O
be	O
using	O
the	O
TreeSet	B-api_mention
or	O
Multisets	B-api_mention
instead	O
as	O
pointed	O
out	O
in	O
the	O
first	O
point	O
above	O
.	O
However	O
if	O
you	O
want	O
to	O
do	O
it	O
as	O
an	O
exercise	O
here	O
is	O
a	O
code	O
sample	O
to	O
get	O
you	O
started	O
,	O
it	O
uses	O
the	O
AbstractList	B-api_mention
abstract	O
class	O
:	O
#	O
pre	O
Note	O
that	O
if	O
you	O
haven	O
'	O
t	O
overridden	O
the	O
methods	O
you	O
need	O
,	O
then	O
the	O
default	O
implementations	O
from	O
AbstractList	B-api_mention
will	O
throw	O
UnsupportedOperationException	B-api_mention
s	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923042	O
The	O
pattern	O
with	O
Optional	B-api_mention
is	O
for	O
one	O
to	O
avoid	O
returning	O
null	O
.	O
It	O
'	O
s	O
still	O
perfectly	O
possible	O
to	O
pass	O
in	O
null	O
to	O
a	O
method	O
.	O
While	O
these	O
aren	O
'	O
t	O
really	O
official	O
yet	O
,	O
you	O
can	O
use	O
JSR	O
-	O
308	O
style	O
annotations	O
to	O
indicate	O
whether	O
or	O
not	O
you	O
accept	O
null	O
values	O
into	O
the	O
function	O
.	O
Note	O
that	O
you	O
'	O
d	O
have	O
to	O
have	O
the	O
right	O
tooling	O
to	O
actually	O
identify	O
it	O
,	O
and	O
it	O
'	O
d	O
provide	O
more	O
of	O
a	O
static	O
check	O
than	O
an	O
enforceable	O
runtime	O
policy	O
,	O
but	O
it	O
would	O
help	O
.	O
public	O
int	O
calculateSomething	O
(	O
args	O
)	O
{	O
}	O
Question	O
-	O
22725537	O
The	O
new	O
Java	O
8	O
stream	O
framework	O
and	O
friends	O
make	O
for	O
some	O
very	O
concise	O
java	O
code	O
,	O
but	O
I	O
have	O
come	O
across	O
a	O
seemingly	O
-	O
simple	O
situation	O
that	O
is	O
tricky	O
to	O
do	O
concisely	O
.	O
Consider	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
things	O
and	O
method	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
resolve	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
want	O
to	O
map	O
the	O
Thing	O
s	O
to	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
s	O
and	O
get	O
the	O
first	O
Other	O
.	O
The	O
obvious	O
solution	O
would	O
be	O
to	O
use	O
things	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
flatMap	B-api_mention
requires	O
that	O
you	O
return	O
a	O
stream	O
,	O
and	O
Optional	B-api_mention
doesn	O
'	O
t	O
have	O
a	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
or	O
is	O
it	O
a	O
Collection	B-api_mention
or	O
provide	O
a	O
method	O
to	O
convert	O
it	O
to	O
or	O
view	O
it	O
as	O
a	O
Collection	B-api_mention
)	O
.	O
The	O
best	O
I	O
can	O
come	O
up	O
with	O
is	O
this	O
:	O
things	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
that	O
seems	O
awfully	O
long	O
-	O
winded	O
for	O
what	O
seems	O
like	O
a	O
very	O
common	O
case	O
.	O
Anyone	O
have	O
a	O
better	O
idea	O
?	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
34930831	O
To	O
measure	O
the	O
actual	O
number	O
of	O
used	O
threads	O
,	O
you	O
can	O
check	O
Thread	B-api_mention
.	I-api_mention
activeCount	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
This	O
can	O
produce	O
on	O
a	O
4	O
-	O
core	O
CPU	O
an	O
output	O
like	O
:	O
#	O
pre	O
Without	O
.	B-api_mention
parallel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
gives	O
:	O
#	O
pre	O
Question	O
-	O
6667243	O
What	O
is	O
the	O
best	O
way	O
to	O
use	O
the	O
values	O
stored	O
in	O
an	O
Enum	B-api_mention
as	O
String	B-api_mention
literals	O
?	O
For	O
example	O
:	O
#	O
pre	O
Then	O
later	O
I	O
could	O
use	O
Mode	O
.	O
mode1	O
to	O
return	O
its	O
string	O
representation	O
as	O
mode1	O
.	O
Without	O
having	O
to	O
keep	O
calling	O
Mode	O
.	O
model	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
26318569	O
I	O
am	O
getting	O
following	O
exception	O
while	O
running	O
the	O
tests	O
.	O
I	O
am	O
using	O
Mockito	B-api_mention
for	O
mocking	O
.	O
The	O
hints	O
mentioned	O
by	O
Mockito	B-api_mention
library	O
are	O
not	O
helping	O
.	O
#	O
pre	O
Test	O
Code	O
from	O
DomainTestFactory	O
.	O
When	O
I	O
run	O
the	O
following	O
test	O
,	O
I	O
see	O
the	O
exception	O
#	O
pre	O
Question	O
-	O
9297899	O
We	O
can	O
determine	O
the	O
length	O
of	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
using	O
its	O
public	O
method	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
like	O
#	O
pre	O
Similarly	O
we	O
can	O
determine	O
the	O
length	O
of	O
an	O
Array	O
object	O
using	O
the	O
length	O
property	O
#	O
pre	O
Whereas	O
the	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
ArrayList	B-api_mention
is	O
defined	O
inside	O
the	O
ArrayList	B-api_mention
class	O
,	O
where	O
is	O
this	O
length	O
property	O
of	O
Array	B-api_mention
defined	O
?	O
Question	O
-	O
31471444	O
,	O
answer	O
-	O
31471530	O
You	O
should	O
not	O
.	O
The	O
INTEGER	O
_	O
ONE	O
name	O
is	O
no	O
more	O
meaningful	O
than	O
1	O
.	O
If	O
however	O
this	O
value	O
has	O
some	O
other	O
meaning	O
(	O
for	O
example	O
,	O
month	O
in	O
the	O
year	O
)	O
,	O
then	O
using	O
a	O
constant	O
(	O
like	O
Calendar	B-api_mention
.	I-api_mention
FEBRUARY	I-api_mention
)	O
will	O
make	O
your	O
code	O
clearer	O
.	O
I	O
can	O
guess	O
that	O
this	O
constant	O
in	O
Commons	O
Math	O
library	O
was	O
created	O
in	O
Java	O
1	O
.	O
4	O
when	O
there	O
were	O
no	O
Integer	B-api_mention
cache	O
and	O
autoboxing	O
,	O
so	O
it	O
had	O
sense	O
in	O
terms	O
that	O
you	O
may	O
reuse	O
the	O
same	O
Integer	B-api_mention
object	O
(	O
not	O
primitive	O
int	O
)	O
in	O
different	O
places	O
to	O
save	O
memory	O
.	O
So	O
it	O
was	O
added	O
for	O
performance	O
reasons	O
,	O
not	O
for	O
code	O
clarity	O
.	O
Now	O
it	O
'	O
s	O
obsolete	O
:	O
even	O
if	O
you	O
need	O
an	O
Integer	B-api_mention
object	O
,	O
you	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
implicit	O
autoboxing	O
and	O
get	O
the	O
cached	O
one	O
.	O
Question	O
-	O
29691513	O
,	O
answer	O
-	O
29727412	O
The	O
JLS	O
describes	O
a	O
few	O
special	O
behaviors	O
of	O
what	O
it	O
calls	O
constant	O
variables	O
,	O
which	O
are	O
final	O
variables	O
(	O
whether	O
static	O
or	O
not	O
)	O
which	O
are	O
initialized	O
with	O
constant	O
expressions	O
of	O
String	B-api_mention
or	O
primitive	O
type	O
.	O
Constant	O
variables	O
have	O
a	O
major	O
difference	O
with	O
respect	O
to	O
binary	O
compatibility	O
:	O
the	O
values	O
of	O
constant	O
variables	O
become	O
part	O
of	O
the	O
class	O
'	O
s	O
API	O
,	O
as	O
far	O
as	O
the	O
compiler	O
is	O
concerned	O
.	O
An	O
example	O
:	O
#	O
pre	O
Here	O
,	O
XFOO	O
is	O
a	O
"	O
constant	O
variable	O
"	O
and	O
YFOO	O
is	O
not	O
,	O
but	O
they	O
are	O
otherwise	O
equivalent	O
.	O
Class	O
Z	O
prints	O
out	O
each	O
of	O
them	O
.	O
Compile	O
those	O
classes	O
,	O
then	O
disassemble	O
them	O
with	O
javap	O
-	O
v	O
X	O
Y	O
Z	O
,	O
and	O
here	O
is	O
the	O
output	O
:	O
Class	O
X	O
:	O
#	O
pre	O
Class	O
Y	O
:	O
#	O
pre	O
Class	O
Z	O
:	O
#	O
pre	O
Things	O
to	O
notice	O
in	O
the	O
disassembly	O
,	O
which	O
tell	O
you	O
the	O
differences	O
between	O
X	O
and	O
Y	O
run	O
deeper	O
than	O
syntactic	O
sugar	O
:	O
#	O
li	O
XFOO	O
has	O
a	O
ConstantValue	O
attribute	O
,	O
signifying	O
that	O
its	O
value	O
is	O
a	O
compile	O
-	O
time	O
constant	O
.	O
Whereas	O
YFOO	O
does	O
not	O
,	O
and	O
uses	O
a	O
static	O
block	O
with	O
a	O
putstatic	O
instruction	O
to	O
initialize	O
the	O
value	O
at	O
runtime	O
.	O
#	O
li	O
The	O
String	B-api_mention
constant	O
StringLiteral	O
has	O
become	O
part	O
of	O
class	O
Z	O
'	O
s	O
constant	O
pool	O
,	O
but	O
StringLiteral	O
has	O
not	O
.	O
#	O
li	O
Z	O
.	O
main	O
uses	O
the	O
ldc	O
(	O
load	O
constant	O
)	O
instruction	O
to	O
load	O
StringLiteral	O
onto	O
the	O
stack	O
directly	O
from	O
its	O
own	O
constant	O
pool	O
,	O
but	O
it	O
uses	O
a	O
getstatic	O
instruction	O
to	O
load	O
the	O
value	O
of	O
Y	O
.	O
YFOO	O
.	O
Other	O
differences	O
you	O
will	O
find	O
:	O
#	O
li	O
If	O
you	O
change	O
the	O
value	O
of	O
XFOO	O
and	O
recompile	O
X	O
.	O
java	O
but	O
not	O
Z	O
.	O
java	O
,	O
you	O
have	O
a	O
problem	O
:	O
class	O
Z	O
is	O
still	O
using	O
the	O
old	O
value	O
.	O
If	O
you	O
change	O
the	O
value	O
of	O
YFOO	O
and	O
recompile	O
Y	O
.	O
java	O
,	O
class	O
Z	O
uses	O
the	O
new	O
value	O
whether	O
you	O
recompile	O
Z	O
.	O
java	O
or	O
not	O
.	O
#	O
li	O
If	O
you	O
delete	O
the	O
X	O
.	O
class	O
file	O
entirely	O
,	O
class	O
Z	O
still	O
runs	O
correctly	O
.	O
Z	O
has	O
no	O
runtime	O
dependency	O
on	O
X	O
.	O
Whereas	O
if	O
you	O
delete	O
the	O
Y	O
.	O
class	O
file	O
,	O
class	O
Z	O
fails	O
to	O
initialize	O
with	O
a	O
ClassNotFoundException	B-api_mention
:	O
Y	O
.	O
#	O
li	O
If	O
you	O
generate	O
documentation	O
for	O
the	O
classes	O
with	O
javadoc	O
,	O
the	O
"	O
Constant	O
Field	O
Values	O
"	O
page	O
will	O
document	O
the	O
value	O
of	O
XFOO	O
,	O
but	O
not	O
the	O
value	O
of	O
YFOO	O
.	O
The	O
JLS	O
describes	O
the	O
above	O
effects	O
constant	O
variables	O
have	O
on	O
compiled	O
class	O
files	O
in	O
§	O
13	O
.	O
1	O
.	O
3	O
:	O
#	O
blockquote	O
And	O
in	O
§	O
13	O
.	O
4	O
.	O
9	O
:	O
#	O
blockquote	O
The	O
upshot	O
is	O
that	O
if	O
your	O
public	O
library	O
exposes	O
any	O
constant	O
variables	O
,	O
you	O
must	O
never	O
change	O
their	O
values	O
if	O
your	O
new	O
library	O
version	O
is	O
otherwise	O
supposed	O
to	O
be	O
compatible	O
with	O
code	O
compiled	O
against	O
old	O
versions	O
of	O
the	O
library	O
.	O
It	O
won	O
'	O
t	O
necessarily	O
cause	O
an	O
error	O
,	O
but	O
the	O
existing	O
code	O
will	O
probably	O
malfunction	O
since	O
it	O
will	O
have	O
outdated	O
ideas	O
about	O
the	O
values	O
of	O
constants	O
.	O
(	O
If	O
your	O
new	O
library	O
version	O
needs	O
for	O
classes	O
which	O
use	O
it	O
to	O
be	O
recompiled	O
anyway	O
,	O
then	O
changing	O
constants	O
doesn	O
'	O
t	O
cause	O
this	O
problem	O
.	O
)	O
Thus	O
,	O
initializing	O
a	O
constant	O
with	O
a	O
block	O
gives	O
you	O
more	O
freedom	O
to	O
change	O
its	O
value	O
,	O
because	O
it	O
prevents	O
the	O
compiler	O
embedding	O
the	O
value	O
into	O
other	O
classes	O
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28584932	O
Your	O
reasoning	O
is	O
that	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
should	O
not	O
be	O
equal	O
to	O
itself	O
because	O
it	O
is	O
“	O
likely	O
”	O
to	O
have	O
been	O
obtained	O
as	O
the	O
result	O
of	O
a	O
loss	O
of	O
accuracy	O
.	O
This	O
line	O
of	O
reasoning	O
applies	O
to	O
all	O
of	O
floating	O
-	O
point	O
.	O
Any	O
finite	O
value	O
can	O
be	O
obtained	O
as	O
the	O
result	O
of	O
an	O
inaccurate	O
operation	O
.	O
That	O
did	O
not	O
push	O
the	O
IEEE	O
754	O
standardization	O
committee	O
to	O
define	O
=	O
=	O
as	O
always	O
evaluating	O
to	O
false	O
for	O
finite	O
values	O
,	O
so	O
why	O
should	O
infinities	O
be	O
different	O
?	O
As	O
defined	O
,	O
=	O
=	O
is	O
useful	O
for	O
people	O
who	O
understand	O
what	O
it	O
does	O
(	O
that	O
is	O
,	O
test	O
the	O
floating	O
-	O
point	O
values	O
that	O
have	O
been	O
obtained	O
,	O
and	O
certainly	O
not	O
the	O
values	O
that	O
should	O
have	O
been	O
obtained	O
with	O
real	O
computations	O
)	O
.	O
For	O
anyone	O
who	O
understands	O
that	O
,	O
and	O
you	O
need	O
to	O
understand	O
it	O
to	O
use	O
floating	O
-	O
point	O
even	O
for	O
computations	O
that	O
do	O
not	O
involve	O
infinity	O
,	O
having	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
=	O
=	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
evaluate	O
to	O
true	O
is	O
convenient	O
,	O
if	O
only	O
to	O
test	O
if	O
the	O
floating	O
-	O
point	O
result	O
of	O
a	O
floating	O
-	O
point	O
computation	O
is	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
.	O
That	O
leaves	O
the	O
question	O
of	O
why	O
NaN	O
can	O
afford	O
to	O
have	O
special	O
behavior	O
,	O
and	O
infinities	O
should	O
follow	O
the	O
same	O
general	O
principles	O
as	O
finite	O
values	O
.	O
NaN	O
is	O
different	O
from	O
infinities	O
:	O
the	O
underlying	O
principle	O
of	O
the	O
IEEE	O
754	O
standard	O
is	O
that	O
values	O
are	O
exactly	O
what	O
they	O
are	O
,	O
but	O
the	O
result	O
of	O
an	O
operation	O
can	O
be	O
approximated	O
with	O
respect	O
to	O
the	O
real	O
result	O
,	O
and	O
in	O
this	O
case	O
,	O
the	O
resulting	O
floating	O
-	O
point	O
value	O
is	O
obtained	O
according	O
to	O
the	O
rounding	O
mode	O
.	O
Forget	O
for	O
an	O
instant	O
that	O
1	O
.	O
0	O
/	O
0	O
.	O
0	O
is	O
defined	O
as	O
+	O
inf	O
,	O
which	O
is	O
an	O
annoyance	O
in	O
this	O
discussion	O
.	O
Think	O
for	O
the	O
moment	O
of	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
only	O
as	O
the	O
result	O
of	O
operations	O
such	O
as	O
1	O
.	O
0e100	O
/	O
1	O
.	O
0e	O
-	O
300	O
or	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
+	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
For	O
these	O
operations	O
,	O
+	O
inf	O
is	O
the	O
closest	O
approximation	O
of	O
the	O
real	O
result	O
,	O
just	O
like	O
for	O
operations	O
that	O
produce	O
a	O
finite	O
result	O
.	O
By	O
contrast	O
,	O
NaN	O
is	O
the	O
result	O
you	O
obtain	O
when	O
the	O
operation	O
doesn	O
'	O
t	O
make	O
sense	O
.	O
It	O
is	O
defensible	O
to	O
have	O
NaN	O
behave	O
specially	O
,	O
but	O
inf	O
is	O
just	O
an	O
approximation	O
of	O
all	O
the	O
values	O
too	O
large	O
to	O
represent	O
.	O
In	O
reality	O
,	O
1	O
.	O
0	O
/	O
0	O
.	O
0	O
also	O
produces	O
+	O
inf	O
,	O
but	O
that	O
should	O
be	O
considered	O
an	O
exception	O
.	O
It	O
would	O
have	O
been	O
just	O
as	O
coherent	O
to	O
define	O
the	O
result	O
of	O
that	O
operation	O
as	O
NaN	O
,	O
but	O
defining	O
it	O
as	O
+	O
inf	O
was	O
more	O
convenient	O
in	O
the	O
implementation	O
of	O
some	O
algorithms	O
.	O
An	O
example	O
is	O
provided	O
page	O
10	O
in	O
Kahan	O
'	O
s	O
notes	O
.	O
More	O
details	O
than	O
most	O
will	O
wish	O
for	O
are	O
in	O
the	O
article	O
“	O
Branch	O
Cuts	O
for	O
Complex	O
Elementary	O
Functions	O
,	O
or	O
Much	O
Ado	O
About	O
Nothing	O
'	O
s	O
Sign	O
Bit	O
”	O
.	O
I	O
would	O
also	O
interpret	O
the	O
existence	O
in	O
IEEE	O
754	O
of	O
a	O
“	O
division	O
by	O
zero	O
”	O
flag	O
separate	O
from	O
the	O
NaN	O
flag	O
as	O
recognition	O
that	O
the	O
user	O
may	O
want	O
to	O
treat	O
division	O
by	O
zero	O
specially	O
although	O
it	O
is	O
not	O
defined	O
as	O
producing	O
NaN	O
.	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908302	O
With	O
strings	O
you	O
'	O
re	O
going	O
to	O
want	O
to	O
use	O
the	O
equals	B-api_mention
method	O
of	O
Strings	B-api_mention
.	O
That	O
aside	O
,	O
you	O
already	O
have	O
the	O
enum	O
that	O
you	O
could	O
compare	O
with	O
the	O
equality	O
operator	O
.	O
Under	O
what	O
scenario	O
would	O
this	O
arise	O
?	O
That	O
being	O
said	O
,	O
yes	O
,	O
the	O
.	B-api_mention
equals	I-api_mention
method	O
will	O
return	O
true	O
if	O
they	O
are	O
the	O
same	O
.	O
I	O
'	O
m	O
not	O
sure	O
about	O
equality	O
operator	O
,	O
and	O
without	O
looking	O
it	O
up	O
,	O
I	O
can	O
tell	O
you	O
that	O
it	O
'	O
s	O
poor	O
programming	O
to	O
use	O
it	O
if	O
it	O
is	O
.	O
Question	O
-	O
23653778	O
,	O
answer	O
-	O
25564062	O
Try	O
OnStart	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
and	O
just	O
use	O
View	B-api_mention
view	O
=	O
getView	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findViewById	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
Declare	O
any	O
View	B-api_mention
using	O
getView	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findViewById	I-api_mention
method	O
in	O
onStart	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Declare	O
click	O
listener	O
on	O
view	O
by	O
anyView	O
.	B-api_mention
setOnClickListener	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
28671903	O
,	O
answer	O
-	O
28672583	O
The	O
behaviour	O
is	O
(	O
somewhat	O
)	O
documented	O
in	O
the	O
javadoc	O
:	O
#	O
blockquote	O
What	O
this	O
means	O
in	O
practice	O
,	O
when	O
you	O
call	O
source	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
:	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
a	O
smaller	O
size	O
than	O
source	O
,	O
the	O
remove	O
method	O
of	O
HashSet	B-api_mention
is	O
called	O
,	O
which	O
is	O
fast	O
.	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
equal	O
or	O
larger	O
size	O
than	O
the	O
source	O
,	O
then	O
removals	O
.	B-api_mention
contains	I-api_mention
is	O
called	O
,	O
which	O
is	O
slow	O
for	O
an	O
ArrayList	B-api_mention
.	O
Quick	O
fix	O
:	O
Collection	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
removals	O
=	O
new	O
HashSet	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
that	O
there	O
is	O
an	O
open	O
bug	O
that	O
is	O
very	O
similar	O
to	O
what	O
you	O
describe	O
.	O
The	O
bottom	O
line	O
seems	O
to	O
be	O
that	O
it	O
is	O
probably	O
a	O
poor	O
choice	O
but	O
can	O
'	O
t	O
be	O
changed	O
because	O
it	O
is	O
documented	O
in	O
the	O
javadoc	O
.	O
For	O
reference	O
,	O
this	O
is	O
the	O
code	O
of	O
removeAll	B-api_mention
(	O
in	O
Java	O
8	O
-	O
haven	O
'	O
t	O
checked	O
other	O
versions	O
)	O
:	O
#	O
pre	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175175	O
Note	O
that	O
a	O
.	O
b	O
and	O
c	O
are	O
instances	O
of	O
primitive	O
wrapper	O
classes	O
(	O
such	O
as	O
Integer	B-api_mention
,	O
Double	B-api_mention
,	O
etc	O
.	O
.	O
.	O
)	O
.	O
These	O
classes	O
are	O
final	O
and	O
cannot	O
be	O
extended	O
,	O
so	O
you	O
can	O
'	O
t	O
override	O
their	O
equals	O
implementation	O
.	O
Therefore	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
,	O
since	O
those	O
classes	O
implement	O
equals	O
properly	O
.	O
Question	O
-	O
31316581	O
,	O
answer	O
-	O
31327420	O
If	O
type	O
inference	O
produces	O
a	O
single	O
upper	O
bound	O
for	O
a	O
type	O
variable	O
,	O
typically	O
the	O
upper	O
bound	O
is	O
chosen	O
as	O
the	O
solution	O
.	O
For	O
example	O
,	O
if	O
T	O
<	O
<	O
Number	O
,	O
the	O
solution	O
is	O
T	O
=	O
Number	O
.	O
Although	O
Integer	B-api_mention
,	O
Float	B-api_mention
etc	O
.	O
could	O
also	O
satisfy	O
the	O
constraint	O
,	O
there	O
'	O
s	O
no	O
good	O
reason	O
to	O
choose	O
them	O
over	O
Number	B-api_mention
.	O
That	O
was	O
also	O
the	O
case	O
for	O
throws	O
T	O
in	O
java	O
5	O
-	O
7	O
:	O
T	O
<	O
<	O
Throwable	B-api_mention
=	O
>	O
T	O
=	O
Throwable	B-api_mention
.	O
(	O
Sneaky	O
throw	O
solutions	O
all	O
had	O
explicit	O
<	O
RuntimeException	B-api_mention
>	O
type	O
arguments	O
,	O
otherwise	O
<	O
Throwable	O
>	O
is	O
inferred	O
.	O
)	O
In	O
java8	O
,	O
with	O
the	O
introduction	O
of	O
lambda	O
,	O
this	O
becomes	O
problematic	O
.	O
Consider	O
this	O
case	O
#	O
pre	O
If	O
we	O
invoke	O
with	O
an	O
empty	O
lambda	O
,	O
what	O
would	O
T	O
be	O
inferred	O
as	O
?	O
invoke	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
only	O
constraint	O
on	O
T	O
is	O
an	O
upper	O
bound	O
Throwable	B-api_mention
.	O
In	O
earlier	O
stage	O
of	O
java8	O
,	O
T	O
=	O
Throwable	B-api_mention
would	O
be	O
inferred	O
.	O
See	O
this	O
report	O
I	O
filed	O
.	O
But	O
that	O
is	O
pretty	O
silly	O
,	O
to	O
infer	O
Throwable	B-api_mention
,	O
a	O
checked	O
exception	O
,	O
out	O
of	O
an	O
empty	O
block	O
.	O
A	O
solution	O
was	O
proposed	O
in	O
the	O
report	O
(	O
which	O
is	O
apparently	O
adopted	O
by	O
JLS	O
)	O
-	O
#	O
pre	O
i	O
.	O
e	O
.	O
if	O
the	O
upper	O
bound	O
is	O
Exception	B-api_mention
or	O
Throwable	B-api_mention
,	O
choose	O
RuntimeException	B-api_mention
as	O
the	O
solution	O
.	O
In	O
this	O
case	O
,	O
there	O
is	O
a	O
good	O
reason	O
to	O
choose	O
a	O
particular	O
subtype	O
of	O
the	O
upper	O
bound	O
.	O
Question	O
-	O
27683759	O
,	O
answer	O
-	O
27684040	O
That	O
line	O
creates	O
an	O
empty	O
list	O
of	O
strings	O
by	O
calling	O
a	O
static	O
method	O
with	O
a	O
generic	O
type	O
parameter	O
.	O
Inside	O
the	O
Collections	B-api_mention
class	O
,	O
there	O
is	O
a	O
static	O
method	O
emptyList	O
declared	O
like	O
:	O
#	O
pre	O
This	O
has	O
a	O
generic	O
type	O
parameter	O
T	B-api_mention
.	O
We	O
call	O
call	O
this	O
method	O
by	O
using	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
T	O
is	O
infered	O
to	O
be	O
a	O
String	B-api_mention
because	O
of	O
the	O
type	O
of	O
list	O
.	O
We	O
can	O
also	O
specify	O
the	O
type	O
of	O
T	O
by	O
putting	O
it	O
in	O
angle	O
brackets	O
when	O
calling	O
emptyList	B-api_mention
.	O
This	O
may	O
be	O
needed	O
if	O
we	O
want	O
a	O
more	O
specific	O
type	O
than	O
is	O
inferred	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
emptyList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
not	O
correct	O
because	O
that	O
placement	O
is	O
only	O
valid	O
when	O
creating	O
instances	O
of	O
generic	O
classes	O
,	O
not	O
calling	O
methods	O
.	O
When	O
using	O
new	O
there	O
are	O
two	O
possible	O
type	O
parameters	O
,	O
the	O
ones	O
before	O
the	O
class	O
name	O
are	O
for	O
the	O
constructor	O
only	O
,	O
and	O
the	O
ones	O
after	O
the	O
class	O
name	O
are	O
for	O
the	O
whole	O
instance	O
,	O
so	O
with	O
the	O
class	O
:	O
#	O
pre	O
We	O
can	O
call	O
its	O
constructor	O
where	O
A	O
is	O
String	B-api_mention
and	O
B	O
is	O
Integer	B-api_mention
like	O
:	O
MyClass	O
<	O
T	O
>	O
a	O
=	O
new	O
<	O
T	O
>	O
MyClass	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
or	O
by	O
using	O
type	O
inference	O
:	O
MyClass	O
<	O
T	O
>	O
a	O
=	O
new	O
MyClass	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
See	O
also	O
:	O
#	O
li	O
Generic	O
Methods	O
#	O
li	O
Type	O
Inference	O
Question	O
-	O
20331163	O
I	O
have	O
a	O
string	O
"	O
11	O
/	O
15	O
/	O
2013	O
08	O
:	O
00	O
:	O
00	O
"	O
,	O
I	O
want	O
to	O
format	O
it	O
to	O
"	O
11	O
/	O
15	O
/	O
2013	O
"	O
,	O
what	O
is	O
the	O
correct	O
DateTimeFormatter	B-api_mention
pattern	O
?	O
I	O
'	O
ve	O
tried	O
many	O
and	O
googled	O
and	O
still	O
unable	O
to	O
find	O
the	O
correct	O
pattern	O
.	O
edit	O
:	O
I	O
am	O
looking	O
for	O
Joda	O
-	O
Time	O
DateTimeFormatter	B-api_mention
,	O
not	O
Java	O
'	O
s	O
SimpleDateFormat	B-api_mention
.	O
.	O
Question	O
-	O
28770822	O
,	O
answer	O
-	O
28816219	O
Looking	O
at	O
the	O
issue	O
and	O
fix	O
,	O
it	O
looks	O
like	O
this	O
has	O
been	O
done	O
to	O
resolve	O
a	O
handling	O
of	O
a	O
header	O
file	O
generation	O
for	O
special	O
classes	O
in	O
jigsaw	O
Jigsaw	O
is	O
a	O
module	O
system	O
designated	O
to	O
use	O
in	O
Java	O
SE	O
Platform	O
and	O
JDK	O
.	O
More	O
details	O
here	O
Here	O
is	O
a	O
corresponding	O
changeset	O
.	O
You	O
can	O
see	O
a	O
comment	O
,	O
#	O
blockquote	O
From	O
the	O
changeset	O
I	O
see	O
that	O
for	O
the	O
sake	O
of	O
purpose	O
in	O
addition	O
to	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Integer	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Long	I-api_mention
,	O
also	O
some	O
properties	O
in	O
java	B-api_mention
.	I-api_mention
net	I-api_mention
.	I-api_mention
SocketOptions	I-api_mention
,	O
sun	B-api_mention
.	I-api_mention
nio	I-api_mention
.	I-api_mention
ch	I-api_mention
.	I-api_mention
IOStatus	I-api_mention
,	O
java	B-api_mention
.	I-api_mention
io	I-api_mention
.	I-api_mention
FileSystem	I-api_mention
have	O
been	O
changed	O
to	O
@	O
Native	O
.	O
So	O
I	O
assume	O
only	O
those	O
were	O
needed	O
to	O
solve	O
the	O
dependency	O
with	O
jigsaw	O
.	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
30749407	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
doesn	O
'	O
t	O
uses	O
regex	O
pattern	O
whereas	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
uses	O
regex	O
pattern	O
.	O
So	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
performs	O
faster	O
than	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
24676877	O
,	O
answer	O
-	O
24681959	O
I	O
have	O
a	O
few	O
points	O
to	O
add	O
to	O
Brian	O
Goetz	O
'	O
excellent	O
answer	O
.	O
It	O
'	O
s	O
quite	O
common	O
to	O
return	O
a	O
Stream	B-api_mention
from	O
a	O
"	O
getter	O
"	O
style	O
method	O
call	O
.	O
See	O
the	O
Stream	B-api_mention
usage	O
page	O
in	O
the	O
Java	O
8	O
javadoc	O
and	O
look	O
for	O
"	O
methods	O
.	O
.	O
.	O
that	O
return	O
Stream	B-api_mention
"	O
for	O
the	O
packages	O
other	O
than	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
.	O
These	O
methods	O
are	O
usually	O
on	O
classes	O
that	O
represent	O
or	O
can	O
contain	O
multiple	O
values	O
or	O
aggregations	O
of	O
something	O
.	O
In	O
such	O
cases	O
,	O
APIs	O
typically	O
have	O
returned	O
collections	O
or	O
arrays	O
of	O
them	O
.	O
For	O
all	O
the	O
reasons	O
that	O
Brian	O
noted	O
in	O
his	O
answer	O
,	O
it	O
'	O
s	O
very	O
flexible	O
to	O
add	O
Stream	B-api_mention
-	O
returning	O
methods	O
here	O
.	O
Many	O
of	O
these	O
classes	O
have	O
collections	O
-	O
or	O
array	O
-	O
returning	O
methods	O
already	O
,	O
because	O
the	O
classes	O
predate	O
the	O
Streams	B-api_mention
API	O
.	O
If	O
you	O
'	O
re	O
designing	O
a	O
new	O
API	O
,	O
and	O
it	O
makes	O
sense	O
to	O
provide	O
Stream	B-api_mention
-	O
returning	O
methods	O
,	O
it	O
might	O
not	O
be	O
necessary	O
to	O
add	O
collection	O
-	O
returning	O
methods	O
as	O
well	O
.	O
Brian	O
mentioned	O
the	O
cost	O
of	O
"	O
materializing	O
"	O
the	O
values	O
into	O
a	O
collection	O
.	O
To	O
amplify	O
this	O
point	O
,	O
there	O
are	O
actually	O
two	O
costs	O
here	O
:	O
the	O
cost	O
of	O
storing	O
values	O
in	O
the	O
collection	O
(	O
memory	O
allocation	O
and	O
copying	O
)	O
and	O
also	O
the	O
cost	O
of	O
creating	O
the	O
values	O
in	O
the	O
first	O
place	O
.	O
The	O
latter	O
cost	O
can	O
often	O
be	O
reduced	O
or	O
avoided	O
by	O
taking	O
advantage	O
of	O
a	O
Stream	B-api_mention
'	O
s	O
laziness	O
-	O
seeking	O
behavior	O
.	O
A	O
good	O
example	O
of	O
this	O
are	O
the	O
APIs	O
in	O
java	B-api_mention
.	I-api_mention
nio	I-api_mention
.	I-api_mention
file	I-api_mention
.	I-api_mention
Files	I-api_mention
:	O
#	O
pre	O
Not	O
only	O
does	O
readAllLines	B-api_mention
have	O
to	O
hold	O
the	O
entire	O
file	O
contents	O
in	O
memory	O
in	O
order	O
to	O
store	O
it	O
into	O
the	O
result	O
list	O
,	O
it	O
also	O
has	O
to	O
read	O
the	O
file	O
to	O
the	O
very	O
end	O
before	O
it	O
returns	O
the	O
list	O
.	O
The	O
lines	B-api_mention
method	O
can	O
return	O
almost	O
immediately	O
after	O
it	O
has	O
performed	O
some	O
setup	O
,	O
leaving	O
file	O
reading	O
and	O
line	O
breaking	O
until	O
later	O
when	O
it	O
'	O
s	O
necessary	O
-	O
-	O
or	O
not	O
at	O
all	O
.	O
This	O
is	O
a	O
huge	O
benefit	O
,	O
if	O
for	O
example	O
,	O
the	O
caller	O
is	O
interested	O
only	O
in	O
the	O
first	O
ten	O
lines	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
firstTen	O
=	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Of	O
course	O
considerable	O
memory	O
space	O
can	O
be	O
saved	O
if	O
the	O
caller	O
filters	O
the	O
stream	O
to	O
return	O
only	O
lines	O
matching	O
a	O
pattern	O
,	O
etc	O
.	O
An	O
idiom	O
that	O
seems	O
to	O
be	O
emerging	O
is	O
to	O
name	O
stream	O
-	O
returning	O
methods	O
after	O
the	O
plural	O
of	O
the	O
name	O
of	O
the	O
things	O
that	O
it	O
represents	O
or	O
contains	O
,	O
without	O
a	O
get	O
prefix	O
.	O
Also	O
,	O
while	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
reasonable	O
name	O
for	O
a	O
stream	O
-	O
returning	O
method	O
when	O
there	O
is	O
only	O
one	O
possible	O
set	O
of	O
values	O
to	O
be	O
returned	O
,	O
sometimes	O
there	O
are	O
classes	O
that	O
have	O
aggregations	O
of	O
multiple	O
types	O
of	O
values	O
.	O
For	O
example	O
,	O
suppose	O
you	O
have	O
some	O
object	O
that	O
contains	O
both	O
attributes	O
and	O
elements	O
.	O
You	O
might	O
provide	O
two	O
stream	O
-	O
returning	O
APIs	O
:	O
#	O
pre	O
Question	O
-	O
22463062	O
Java	O
8	O
added	O
a	O
new	O
API	O
for	O
working	O
with	O
dates	O
and	O
times	O
(	O
JSR	O
310	O
)	O
.	O
I	O
have	O
date	O
and	O
time	O
as	O
string	O
(	O
e	O
.	O
g	O
.	O
StringLiteral	O
)	O
.	O
How	O
can	O
I	O
obtain	O
a	O
LocalDateTime	B-api_mention
instance	O
from	O
the	O
given	O
string	O
?	O
After	O
I	O
finished	O
working	O
with	O
the	O
LocalDateTime	B-api_mention
object	O
:	O
How	O
can	O
I	O
then	O
convert	O
the	O
LocalDateTime	B-api_mention
instance	O
back	O
to	O
a	O
string	O
with	O
the	O
same	O
format	O
as	O
shown	O
above	O
?	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148593	O
Use	O
Integer	B-api_mention
instead	O
.	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Java	O
will	O
automatically	O
autobox	O
your	O
int	O
primitive	O
values	O
to	O
Integer	B-api_mention
objects	O
.	O
Read	O
more	O
about	O
autoboxing	O
from	O
Oracle	O
Java	O
documentations	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777311	O
The	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
check	O
if	O
both	O
arrays	O
contain	O
the	O
same	O
number	O
of	O
elements	O
,	O
and	O
all	O
corresponding	O
pairs	O
of	O
elements	O
in	O
the	O
two	O
arrays	O
are	O
equal	O
.	O
The	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
compare	O
the	O
object	O
to	O
another	O
object	O
and	O
return	O
true	O
only	O
if	O
the	O
reference	O
of	O
the	O
two	O
object	O
are	O
equal	O
as	O
in	O
the	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
5243754	O
,	O
answer	O
-	O
5243798	O
#	O
li	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
http	O
request	O
parameters	O
.	O
Those	O
passed	O
from	O
the	O
client	O
to	O
the	O
server	O
.	O
For	O
example	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
servlet	O
?	O
parameter	O
=	O
1	O
.	O
Can	O
only	O
return	O
String	B-api_mention
#	O
li	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
for	O
server	O
-	O
side	O
usage	O
only	O
-	O
you	O
fill	O
the	O
request	O
with	O
attributes	O
that	O
you	O
can	O
use	O
within	O
the	O
same	O
request	O
.	O
For	O
example	O
-	O
you	O
set	O
an	O
attribute	O
in	O
a	O
servlet	O
,	O
and	O
read	O
it	O
from	O
a	O
JSP	O
.	O
Can	O
be	O
used	O
for	O
any	O
object	O
,	O
not	O
just	O
string	O
.	O
Question	O
-	O
32294367	O
,	O
answer	O
-	O
32378895	O
#	O
blockquote	O
Yes	O
and	O
No	O
.	O
I	O
explain	O
:	O
#	O
li	O
Referring	O
to	O
shared	O
memory	O
:	O
Different	O
threads	O
in	O
a	O
Java	O
process	O
share	O
the	O
whole	O
heap	O
,	O
therefore	O
threads	O
can	O
interact	O
in	O
a	O
huge	O
number	O
of	O
planned	O
and	O
unplanned	O
ways	O
.	O
However	O
objects	O
in	O
the	O
stack	O
(	O
e	O
.	O
g	O
.	O
a	O
context	O
you	O
pass	O
down	O
to	O
called	O
method	O
)	O
or	O
a	O
ThreadLocal	B-api_mention
are	O
their	O
own	O
thread	O
'	O
s	O
(	O
unless	O
they	O
start	O
sharing	O
references	O
)	O
.	O
#	O
li	O
Crashing	O
:	O
If	O
a	O
thread	O
crashes	O
in	O
Java	O
(	O
a	O
Throwable	B-api_mention
is	O
propagated	O
into	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
or	O
something	O
gets	O
looped	O
or	O
blocked	O
)	O
,	O
that	O
mishap	O
might	O
not	O
affect	O
other	O
threads	O
(	O
e	O
.	O
g	O
.	O
a	O
pool	O
of	O
connections	O
in	O
a	O
server	O
will	O
continue	O
to	O
operate	O
)	O
.	O
However	O
as	O
different	O
threads	O
interact	O
.	O
Other	O
threads	O
will	O
easily	O
get	O
stranded	O
if	O
one	O
of	O
them	O
ends	O
abnormally	O
(	O
e	O
.	O
g	O
.	O
one	O
thread	O
trying	O
to	O
read	O
from	O
an	O
empty	O
pipe	O
from	O
another	O
thread	O
which	O
did	O
not	O
close	O
its	O
end	O
)	O
.	O
So	O
unless	O
the	O
developers	O
are	O
highly	O
paranoid	O
careful	O
,	O
it	O
is	O
very	O
likely	O
that	O
side	O
effects	O
will	O
occur	O
.	O
I	O
doubt	O
that	O
any	O
other	O
paradigm	O
intends	O
threads	O
to	O
operate	O
as	O
totally	O
independent	O
islands	O
.	O
They	O
must	O
share	O
information	O
and	O
coordinate	O
somehow	O
.	O
And	O
then	O
there	O
will	O
be	O
the	O
chance	O
to	O
mess	O
things	O
up	O
.	O
It	O
is	O
just	O
they	O
will	O
take	O
a	O
more	O
defensive	O
approach	O
that	O
"	O
gives	O
you	O
less	O
rope	O
to	O
hang	O
yourself	O
"	O
(	O
same	O
idiom	O
as	O
with	O
pointers	O
)	O
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723666	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
without	O
getting	O
any	O
exception	O
.	O
println	B-api_mention
method	O
does	O
not	O
throw	O
null	O
pointer	O
because	O
it	O
first	O
checks	O
whether	O
the	O
object	O
is	O
null	O
or	O
not	O
.	O
If	O
null	O
then	O
it	O
simply	O
prints	O
the	O
string	O
StringLiteral	O
.	O
Otherwise	O
it	O
will	O
call	O
the	O
toString	B-api_mention
method	O
of	O
that	O
object	O
.	O
Adding	O
more	O
details	O
:	O
Internally	O
print	O
methods	O
call	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
the	O
input	O
object	O
.	O
And	O
in	O
valueOf	B-api_mention
method	O
,	O
this	O
check	O
helps	O
to	O
avoid	O
null	O
pointer	O
excpeiton	O
:	O
return	O
(	O
args	O
)	O
?	O
StringLiteral	O
:	O
obj	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
rest	O
of	O
your	O
confusion	O
,	O
calling	O
any	O
method	O
on	O
a	O
null	O
object	O
should	O
throw	O
a	O
null	O
pointer	O
exception	O
,	O
if	O
not	O
a	O
special	O
case	O
.	O
Question	O
-	O
32334319	O
I	O
am	O
using	O
JDK	O
-	O
8	O
(	O
x64	O
)	O
.	O
For	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
I	O
found	O
the	O
following	O
in	O
the	O
Java	O
documentation	O
:	O
#	O
blockquote	O
For	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
I	O
found	O
this	O
:	O
#	O
blockquote	O
If	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
uses	O
an	O
array	O
,	O
why	O
doesn	O
'	O
t	O
it	O
just	O
call	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
or	O
use	O
dual	O
-	O
pivot	O
QuickSort	O
?	O
Why	O
use	O
Mergesort	O
?	O
Question	O
-	O
6802483	O
,	O
answer	O
-	O
6802523	O
There	O
is	O
no	O
direct	O
way	O
to	O
do	O
this	O
-	O
Java	O
has	O
no	O
Map	B-api_mention
literals	O
(	O
yet	O
-	O
I	O
think	O
they	O
were	O
proposed	O
for	O
Java	O
8	O
)	O
.	O
Some	O
people	O
like	O
this	O
:	O
#	O
pre	O
This	O
creates	O
an	O
anonymous	O
subclass	O
of	O
HashMap	B-api_mention
,	O
whose	O
instance	O
initializer	O
puts	O
these	O
values	O
.	O
(	O
By	O
the	O
way	O
,	O
a	O
map	O
can	O
'	O
t	O
contain	O
twice	O
the	O
same	O
value	O
,	O
your	O
second	O
put	O
will	O
overwrite	O
the	O
first	O
one	O
.	O
I	O
'	O
ll	O
use	O
different	O
values	O
for	O
the	O
next	O
examples	O
.	O
)	O
The	O
normal	O
way	O
would	O
be	O
this	O
(	O
for	O
a	O
local	O
variable	O
)	O
:	O
#	O
pre	O
If	O
your	O
test	O
map	O
is	O
an	O
instance	O
variable	O
,	O
put	O
the	O
initialization	O
in	O
a	O
constructor	O
or	O
instance	O
initializer	O
:	O
#	O
pre	O
If	O
your	O
test	O
map	O
is	O
a	O
class	O
variable	O
,	O
put	O
the	O
initialization	O
in	O
a	O
static	O
initializer	O
:	O
#	O
pre	O
If	O
you	O
want	O
your	O
map	O
to	O
never	O
change	O
,	O
you	O
should	O
after	O
the	O
initialization	O
wrap	O
your	O
map	O
by	O
Collections	B-api_mention
.	I-api_mention
unmodifiableMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
can	O
do	O
this	O
in	O
a	O
static	O
initializer	O
too	O
:	O
#	O
pre	O
(	O
I	O
'	O
m	O
not	O
sure	O
if	O
you	O
can	O
now	O
make	O
test	O
final	O
.	O
.	O
.	O
try	O
it	O
out	O
and	O
report	O
here	O
.	O
)	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28459604	O
Background	O
While	O
the	O
question	O
appears	O
simple	O
,	O
the	O
actual	O
answer	O
requires	O
some	O
background	O
to	O
make	O
sense	O
.	O
If	O
you	O
want	O
to	O
skip	O
to	O
the	O
conclusion	O
,	O
scroll	O
down	O
.	O
.	O
.	O
Pick	O
your	O
comparison	O
point	O
-	O
Basic	O
functionality	O
Using	O
basic	O
concepts	O
,	O
C	O
#	O
'	O
s	O
IEnumerable	O
concept	O
is	O
more	O
closely	O
related	O
to	O
Java	O
'	O
s	O
Iterable	B-api_mention
,	O
which	O
is	O
able	O
to	O
create	O
as	O
many	O
Iterators	O
as	O
you	O
want	O
.	O
IEnumerables	O
create	O
IEnumerators	O
.	O
Java	O
'	O
s	O
Iterable	B-api_mention
create	O
Iterators	B-api_mention
The	O
history	O
of	O
each	O
concept	O
is	O
similar	O
,	O
in	O
that	O
both	O
IEnumerable	O
and	O
Iterable	B-api_mention
have	O
a	O
basic	O
motivation	O
to	O
allow	O
'	O
for	O
-	O
each	O
'	O
style	O
looping	O
over	O
the	O
members	O
of	O
data	O
collections	O
.	O
That	O
'	O
s	O
an	O
oversimplification	O
as	O
they	O
both	O
allow	O
more	O
than	O
just	O
that	O
,	O
and	O
they	O
also	O
arrived	O
at	O
that	O
stage	O
via	O
different	O
progressions	O
,	O
but	O
it	O
is	O
a	O
significant	O
common	O
feature	O
regardless	O
.	O
Let	O
'	O
s	O
compare	O
that	O
feature	O
:	O
in	O
both	O
languages	O
,	O
if	O
a	O
class	O
implements	O
the	O
IEnumerable	O
/	O
Iterable	B-api_mention
,	O
then	O
that	O
class	O
must	O
implement	O
at	O
least	O
a	O
single	O
method	O
(	O
for	O
C	O
#	O
,	O
it	O
'	O
s	O
GetEnumerator	O
and	O
for	O
Java	O
it	O
'	O
s	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
In	O
each	O
case	O
,	O
the	O
instance	O
returned	O
from	O
that	O
(	O
IEnumerator	O
/	O
Iterator	B-api_mention
)	O
allows	O
you	O
to	O
access	O
the	O
current	O
and	O
subsequent	O
members	O
of	O
the	O
data	O
.	O
This	O
feature	O
is	O
used	O
in	O
the	O
for	O
-	O
each	O
language	O
syntax	O
.	O
Pick	O
your	O
comparison	O
point	O
-	O
Enhanced	O
functionality	O
IEnumerable	O
in	O
C	O
#	O
has	O
been	O
extended	O
to	O
allow	O
a	O
number	O
of	O
other	O
language	O
features	O
(	O
mostly	O
related	O
to	O
Linq	O
)	O
.	O
Features	O
added	O
include	O
selections	O
,	O
projections	O
,	O
aggregations	O
,	O
etc	O
.	O
These	O
extensions	O
have	O
a	O
strong	O
motivation	O
from	O
use	O
in	O
set	O
-	O
theory	O
,	O
similar	O
to	O
SQL	O
and	O
Relational	O
Database	O
concepts	O
.	O
Java	O
8	O
has	O
also	O
had	O
functionality	O
added	O
to	O
enable	O
a	O
degree	O
of	O
functional	O
programming	O
using	O
Streams	B-api_mention
and	O
Lambdas	B-api_mention
.	O
Note	O
that	O
Java	O
8	O
streams	O
are	O
not	O
primarily	O
motivated	O
by	O
set	O
theory	O
,	O
but	O
by	O
functional	O
programming	O
.	O
Regardless	O
,	O
there	O
are	O
a	O
lot	O
of	O
parallels	O
.	O
So	O
,	O
this	O
is	O
the	O
second	O
point	O
.	O
The	O
enhancements	O
made	O
to	O
C	O
#	O
were	O
implemented	O
as	O
an	O
enhancement	O
to	O
the	O
IEnumerable	O
concept	O
.	O
In	O
Java	O
,	O
though	O
,	O
the	O
enhancements	O
made	O
were	O
implemented	O
by	O
creating	O
new	O
base	O
concepts	O
of	O
Lambdas	B-api_mention
and	O
Streams	B-api_mention
,	O
and	O
then	O
also	O
creating	O
a	O
relatively	O
trivial	O
way	O
to	O
convert	O
from	O
Iterators	B-api_mention
and	O
Iterables	B-api_mention
to	O
Streams	B-api_mention
,	O
and	O
visa	O
-	O
versa	O
.	O
So	O
,	O
comparing	O
IEnumerable	O
to	O
Java	O
'	O
s	O
Stream	B-api_mention
concept	O
is	O
incomplete	O
.	O
You	O
need	O
to	O
compare	O
it	O
to	O
the	O
combined	O
Streams	B-api_mention
and	O
Collections	B-api_mention
API	O
'	O
s	O
in	O
Java	O
.	O
In	O
Java	O
,	O
Streams	B-api_mention
are	O
not	O
the	O
same	O
as	O
Iterables	B-api_mention
,	O
or	O
Iterators	B-api_mention
Streams	I-api_mention
are	O
not	O
designed	O
to	O
solve	O
problems	O
the	O
same	O
way	O
that	O
iterators	O
are	O
:	O
#	O
li	O
Iterators	B-api_mention
are	O
a	O
way	O
of	O
describing	O
the	O
sequence	O
of	O
data	O
.	O
#	O
li	O
Streams	B-api_mention
are	O
a	O
way	O
of	O
describing	O
a	O
sequence	O
of	O
data	O
transformations	O
.	O
With	O
an	O
Iterator	B-api_mention
,	O
you	O
get	O
a	O
data	O
value	O
,	O
process	O
it	O
,	O
and	O
then	O
get	O
another	O
data	O
value	O
.	O
With	O
Streams	B-api_mention
,	O
you	O
chain	O
a	O
sequence	O
of	O
functions	O
together	O
,	O
then	O
you	O
feed	O
an	O
input	O
value	O
to	O
the	O
stream	O
,	O
and	O
get	O
the	O
output	O
value	O
from	O
the	O
combined	O
sequence	O
.	O
Note	O
,	O
in	O
Java	O
terms	O
,	O
each	O
function	O
is	O
encapsulated	O
in	O
a	O
single	O
Stream	B-api_mention
instance	O
.	O
The	O
Streams	B-api_mention
API	O
allows	O
you	O
to	O
link	O
a	O
sequence	O
of	O
Stream	B-api_mention
instances	O
in	O
a	O
way	O
that	O
chains	O
a	O
sequence	O
of	O
transformation	O
expressions	O
.	O
In	O
order	O
to	O
complete	O
the	O
Stream	B-api_mention
concept	O
,	O
you	O
need	O
a	O
source	O
of	O
data	O
to	O
feed	O
the	O
stream	O
,	O
and	O
a	O
terminal	O
function	O
that	O
consumes	O
the	O
stream	O
.	O
The	O
way	O
you	O
feed	O
values	O
in	O
to	O
the	O
stream	O
may	O
in	O
fact	O
be	O
from	O
an	O
Iterable	B-api_mention
,	O
but	O
the	O
Stream	B-api_mention
sequence	O
itself	O
is	O
not	O
an	O
Iterable	B-api_mention
,	O
it	O
is	O
a	O
compound	O
function	O
.	O
A	O
Stream	B-api_mention
is	O
also	O
intended	O
to	O
be	O
lazy	O
,	O
in	O
the	O
sense	O
that	O
it	O
only	O
does	O
work	O
when	O
you	O
request	O
a	O
value	O
from	O
it	O
.	O
Note	O
these	O
significant	O
assumptions	O
and	O
features	O
of	O
Streams	B-api_mention
:	O
#	O
li	O
A	O
Stream	B-api_mention
in	O
Java	O
is	O
a	O
transformation	O
engine	O
,	O
it	O
transforms	O
a	O
data	O
item	O
in	O
one	O
state	O
,	O
to	O
being	O
in	O
another	O
state	O
.	O
#	O
li	O
streams	O
have	O
no	O
concept	O
of	O
the	O
data	O
order	O
or	O
position	O
,	O
the	O
simply	O
transform	O
whatever	O
they	O
are	O
asked	O
to	O
.	O
#	O
li	O
streams	O
can	O
be	O
supplied	O
with	O
data	O
from	O
many	O
sources	O
,	O
including	O
other	O
streams	O
,	O
Iterators	B-api_mention
,	O
Iterables	B-api_mention
,	O
Collections	B-api_mention
,	O
#	O
li	O
you	O
cannot	O
"	O
reset	O
"	O
a	O
stream	O
,	O
that	O
would	O
be	O
like	O
"	O
reprogramming	O
the	O
transformation	O
"	O
.	O
Resetting	O
the	O
data	O
source	O
is	O
probably	O
what	O
you	O
want	O
.	O
#	O
li	O
there	O
is	O
logically	O
only	O
1	O
data	O
item	O
'	O
in	O
flight	O
'	O
in	O
the	O
stream	O
at	O
any	O
time	O
(	O
unless	O
the	O
stream	O
is	O
a	O
parallel	O
stream	O
,	O
at	O
which	O
point	O
,	O
there	O
is	O
1	O
item	O
per	O
thread	O
)	O
.	O
This	O
is	O
independent	O
of	O
the	O
data	O
source	O
which	O
may	O
have	O
more	O
than	O
the	O
current	O
items	O
'	O
ready	O
'	O
to	O
be	O
supplied	O
to	O
the	O
stream	O
,	O
or	O
the	O
stream	O
collector	O
which	O
may	O
need	O
to	O
aggregate	O
and	O
reduce	O
multiple	O
values	O
.	O
#	O
li	O
Streams	B-api_mention
can	O
be	O
unbound	O
(	O
infinite	O
)	O
,	O
limited	O
only	O
by	O
the	O
data	O
source	O
,	O
or	O
collector	O
(	O
which	O
can	O
be	O
infinite	O
too	O
)	O
.	O
#	O
li	O
Streams	B-api_mention
are	O
'	O
chainable	O
'	O
,	O
the	O
output	O
of	O
filtering	O
one	O
stream	O
,	O
is	O
another	O
stream	O
.	O
Values	O
input	O
to	O
and	O
transformed	O
by	O
a	O
stream	O
can	O
in	O
turn	O
be	O
supplied	O
to	O
another	O
stream	O
which	O
does	O
a	O
different	O
transformation	O
.	O
The	O
data	O
,	O
in	O
its	O
transformed	O
state	O
flows	O
from	O
one	O
stream	O
to	O
the	O
next	O
.	O
You	O
do	O
not	O
need	O
to	O
intervene	O
and	O
pull	O
the	O
data	O
from	O
one	O
stream	O
and	O
plug	O
it	O
in	O
to	O
the	O
next	O
.	O
C	O
#	O
Comparison	O
When	O
you	O
consider	O
that	O
a	O
Java	O
Stream	B-api_mention
is	O
just	O
a	O
part	O
of	O
a	O
supply	O
,	O
stream	O
,	O
and	O
collect	O
system	O
,	O
and	O
that	O
Streams	B-api_mention
and	O
Iterators	B-api_mention
are	O
often	O
used	O
together	O
with	O
Collections	B-api_mention
,	O
then	O
it	O
is	O
no	O
wonder	O
that	O
it	O
is	O
hard	O
to	O
relate	O
to	O
the	O
same	O
concepts	O
which	O
are	O
almost	O
all	O
embedded	O
in	O
to	O
a	O
single	O
IEnumerable	O
concept	O
in	O
C	O
#	O
.	O
Parts	O
of	O
IEnumerable	O
(	O
and	O
close	O
related	O
concepts	O
)	O
are	O
apparent	O
in	O
all	O
of	O
the	O
Java	O
Iterator	B-api_mention
,	O
Iterable	B-api_mention
,	O
Lambda	B-api_mention
,	O
and	O
Stream	B-api_mention
concepts	O
.	O
There	O
are	O
small	O
things	O
that	O
the	O
Java	O
concepts	O
can	O
do	O
that	O
are	O
harder	O
in	O
IEnumerable	O
,	O
and	O
visa	O
-	O
versa	O
.	O
Conclusion	O
#	O
li	O
There	O
'	O
s	O
no	O
design	O
problem	O
here	O
,	O
just	O
a	O
problem	O
in	O
matching	O
concepts	O
between	O
the	O
languages	O
.	O
#	O
li	O
Streams	B-api_mention
solve	O
problems	O
in	O
a	O
different	O
way	O
#	O
li	O
Streams	B-api_mention
add	O
functionality	O
to	O
Java	O
(	O
they	O
add	O
a	O
different	O
way	O
of	O
doing	O
things	O
,	O
they	O
do	O
not	O
take	O
functionality	O
away	O
)	O
Adding	O
Streams	B-api_mention
gives	O
you	O
more	O
choices	O
when	O
solving	O
problems	O
,	O
which	O
is	O
fair	O
to	O
classify	O
as	O
'	O
enhancing	O
power	O
'	O
,	O
not	O
'	O
reducing	O
'	O
,	O
'	O
taking	O
away	O
'	O
,	O
or	O
'	O
restricting	O
'	O
it	O
.	O
Why	O
are	O
Java	O
Streams	B-api_mention
once	O
-	O
off	O
?	O
This	O
question	O
is	O
misguided	O
,	O
because	O
streams	O
are	O
function	O
sequences	O
,	O
not	O
data	O
.	O
Depending	O
on	O
the	O
data	O
source	O
that	O
feeds	O
the	O
stream	O
,	O
you	O
can	O
reset	O
the	O
data	O
source	O
,	O
and	O
feed	O
the	O
same	O
,	O
or	O
different	O
stream	O
.	O
Unlike	O
C	O
#	O
'	O
s	O
IEnumerable	O
,	O
where	O
an	O
execution	O
pipeline	O
can	O
be	O
executed	O
as	O
many	O
times	O
as	O
we	O
want	O
,	O
in	O
Java	O
a	O
stream	O
can	O
be	O
'	O
iterated	O
'	O
only	O
once	O
.	O
Comparing	O
an	O
IEnumerable	O
to	O
a	O
Stream	B-api_mention
is	O
misguided	O
.	O
The	O
context	O
you	O
are	O
using	O
to	O
say	O
IEnumerable	O
can	O
be	O
executed	O
as	O
many	O
times	O
as	O
you	O
want	O
,	O
is	O
best	O
compared	O
to	O
Java	O
Iterables	B-api_mention
,	O
which	O
can	O
be	O
iterated	O
as	O
many	O
times	O
as	O
you	O
want	O
.	O
A	O
Java	O
Stream	B-api_mention
represents	O
a	O
subset	O
of	O
the	O
IEnumerable	O
concept	O
,	O
and	O
not	O
the	O
subset	O
that	O
supplies	O
data	O
,	O
and	O
thus	O
cannot	O
be	O
'	O
rerun	O
'	O
.	O
Any	O
call	O
to	O
a	O
terminal	O
operation	O
closes	O
the	O
stream	O
,	O
rendering	O
it	O
unusable	O
.	O
This	O
'	O
feature	O
'	O
takes	O
away	O
a	O
lot	O
of	O
power	O
.	O
The	O
first	O
statement	O
is	O
true	O
,	O
in	O
a	O
sense	O
.	O
The	O
'	O
takes	O
away	O
power	O
'	O
statement	O
is	O
not	O
.	O
You	O
are	O
still	O
comparing	O
Streams	B-api_mention
it	O
IEnumerables	O
.	O
The	O
terminal	O
operation	O
in	O
the	O
stream	O
is	O
like	O
a	O
'	O
break	O
'	O
clause	O
in	O
a	O
for	O
loop	O
.	O
You	O
are	O
always	O
free	O
to	O
have	O
another	O
stream	O
,	O
if	O
you	O
want	O
,	O
and	O
if	O
you	O
can	O
re	O
-	O
supply	O
the	O
data	O
you	O
need	O
.	O
Again	O
,	O
if	O
you	O
consider	O
the	O
IEnumerable	O
to	O
be	O
more	O
like	O
an	O
Iterable	B-api_mention
,	O
for	O
this	O
statement	O
,	O
Java	O
does	O
it	O
just	O
fine	O
.	O
I	O
imagine	O
the	O
reason	O
for	O
this	O
is	O
not	O
technical	O
.	O
What	O
were	O
the	O
design	O
considerations	O
behind	O
this	O
strange	O
restriction	O
?	O
The	O
reason	O
is	O
technical	O
,	O
and	O
for	O
the	O
simple	O
reason	O
that	O
a	O
Stream	B-api_mention
a	O
subset	O
of	O
what	O
think	O
it	O
is	O
.	O
The	O
stream	O
subset	O
does	O
not	O
control	O
the	O
data	O
supply	O
,	O
so	O
you	O
should	O
reset	O
the	O
supply	O
,	O
not	O
the	O
stream	O
.	O
In	O
that	O
context	O
,	O
it	O
is	O
not	O
so	O
strange	O
.	O
QuickSort	O
example	O
Your	O
quicksort	O
example	O
has	O
the	O
signature	O
:	O
IEnumerable	O
<	O
T	O
>	O
QuickSort	O
(	O
args	O
)	O
You	O
are	O
treating	O
the	O
input	O
IEnumerable	O
as	O
a	O
data	O
source	O
:	O
IEnumerable	O
<	O
T	O
>	O
lt	O
=	O
ints	O
.	O
Where	O
(	O
args	O
)	O
;	O
Additionally	O
,	O
return	O
value	O
is	O
IEnumerable	O
too	O
,	O
which	O
is	O
a	O
supply	O
of	O
data	O
,	O
and	O
since	O
this	O
is	O
a	O
Sort	O
operation	O
,	O
the	O
order	O
of	O
that	O
supply	O
is	O
significant	O
.	O
If	O
you	O
consider	O
the	O
Java	O
Iterable	B-api_mention
class	O
to	O
be	O
the	O
appropriate	O
match	O
for	O
this	O
,	O
specifically	O
the	O
List	B-api_mention
specialization	O
of	O
Iterable	B-api_mention
,	O
since	O
List	B-api_mention
is	O
a	O
supply	O
of	O
data	O
which	O
has	O
a	O
guaranteed	O
order	O
or	O
iteration	O
,	O
then	O
the	O
equivalent	O
Java	O
code	O
to	O
your	O
code	O
would	O
be	O
:	O
#	O
pre	O
Note	O
there	O
is	O
a	O
bug	O
(	O
which	O
I	O
have	O
reproduced	O
)	O
,	O
in	O
that	O
the	O
sort	O
does	O
not	O
handle	O
duplicate	O
values	O
gracefully	O
,	O
it	O
is	O
a	O
'	O
unique	O
value	O
'	O
sort	O
.	O
Also	O
note	O
how	O
the	O
Java	O
code	O
uses	O
data	O
source	O
(	O
List	O
)	O
,	O
and	O
stream	O
concepts	O
at	O
different	O
point	O
,	O
and	O
that	O
in	O
C	O
#	O
those	O
two	O
'	O
personalities	O
'	O
can	O
be	O
expressed	O
in	O
just	O
IEnumerable	O
.	O
Also	O
,	O
although	O
I	O
have	O
use	O
List	B-api_mention
as	O
the	O
base	O
type	O
,	O
I	O
could	O
have	O
used	O
the	O
more	O
general	O
Collection	B-api_mention
,	O
and	O
with	O
a	O
small	O
iterator	O
-	O
to	O
-	O
Stream	B-api_mention
conversion	O
,	O
I	O
could	O
have	O
used	O
the	O
even	O
more	O
general	O
Iterable	B-api_mention
Question	O
-	O
21947452	O
I	O
generated	O
two	O
matrices	O
of	O
1000	O
x	O
1000	O
:	O
First	O
Matrix	O
:	O
O	O
and	O
#	O
.	O
Second	O
Matrix	O
:	O
O	O
and	O
B	O
.	O
Using	O
the	O
following	O
code	O
,	O
the	O
first	O
matrix	O
took	O
8	O
.	O
52	O
seconds	O
to	O
complete	O
:	O
#	O
pre	O
With	O
this	O
code	O
,	O
the	O
second	O
matrix	O
took	O
259	O
.	O
152	O
seconds	O
to	O
complete	O
:	O
#	O
pre	O
What	O
is	O
the	O
reason	O
behind	O
the	O
dramatically	O
different	O
run	O
times	O
?	O
As	O
suggested	O
in	O
the	O
comments	O
,	O
printing	O
only	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
takes	O
7	O
.	O
8871	O
seconds	O
,	O
whereas	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
gives	O
still	O
printing	O
.	O
.	O
.	O
.	O
As	O
others	O
who	O
pointed	O
out	O
that	O
it	O
works	O
for	O
them	O
normally	O
,	O
I	O
tried	O
Ideone	O
.	O
com	O
for	O
instance	O
,	O
and	O
both	O
pieces	O
of	O
code	O
execute	O
at	O
the	O
same	O
speed	O
.	O
Test	O
Conditions	O
:	O
#	O
li	O
I	O
ran	O
this	O
test	O
from	O
Netbeans	O
7	O
.	O
2	O
,	O
with	O
the	O
output	O
into	O
its	O
console	O
#	O
li	O
I	O
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
measurements	O
Question	O
-	O
24885223	O
I	O
don	O
'	O
t	O
know	O
whether	O
I	O
am	O
asking	O
the	O
right	O
question	O
.	O
I	O
was	O
exploring	O
RecyclerView	B-api_mention
and	O
I	O
was	O
surprised	O
to	O
see	O
that	O
RecyclerView	B-api_mention
does	O
not	O
have	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Because	O
RecyclerView	B-api_mention
extends	O
#	O
blockquote	O
and	O
ListView	B-api_mention
extends	O
#	O
blockquote	O
.	O
However	O
I	O
solved	O
my	O
problem	O
by	O
writing	O
onClick	B-api_mention
in	O
my	O
RecyclerView	B-api_mention
.	I-api_mention
Adapter	I-api_mention
:	O
#	O
pre	O
But	O
still	O
I	O
want	O
to	O
know	O
why	O
Google	O
removed	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Is	O
there	O
a	O
performance	O
issue	O
or	O
something	O
else	O
?	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846964	O
For	O
one	O
,	O
you	O
can	O
get	O
away	O
with	O
reference	O
sharing	O
.	O
A	O
new	O
HashMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
etc	O
will	O
require	O
an	O
allocated	O
object	O
,	O
and	O
possibly	O
some	O
extra	O
elements	O
to	O
hold	O
the	O
data	O
,	O
but	O
you	O
only	O
need	O
one	O
copy	O
of	O
an	O
immutable	O
empty	O
collection	O
(	O
list	O
,	O
set	O
,	O
map	O
,	O
or	O
any	O
other	O
such	O
)	O
.	O
This	O
makes	O
it	O
an	O
obvious	O
choice	O
when	O
a	O
method	O
you	O
'	O
re	O
calling	O
needs	O
to	O
accept	O
a	O
Map	B-api_mention
but	O
does	O
not	O
need	O
to	O
edit	O
it	O
.	O
I	O
suggest	O
checking	O
out	O
Josh	O
Bloch	O
'	O
s	O
Effective	O
Java	O
,	O
which	O
lists	O
some	O
very	O
nice	O
attributes	O
of	O
immutable	O
objects	O
(	O
including	O
thread	O
safety	O
)	O
.	O
Question	O
-	O
24609564	O
,	O
answer	O
-	O
24609841	O
If	O
you	O
will	O
read	O
comment	O
above	O
the	O
code	O
,	O
It	O
is	O
mentioned	O
that	O
.	O
.	O
.	O
If	O
the	O
caller	O
is	O
not	O
a	O
ForkJoinTask	B-api_mention
,	O
this	O
method	O
is	O
behaviorally	O
equivalent	O
to	O
#	O
pre	O
So	O
it	O
is	O
just	O
another	O
form	O
to	O
implement	O
above	O
code	O
in	O
else	O
part	O
.	O
.	O
.	O
!	O
!	O
In	O
Style	O
notes	O
it	O
is	O
mentioned	O
that	O
,	O
#	O
blockquote	O
And	O
if	O
you	O
will	O
see	O
implementation	O
of	O
ManagedLocker	B-api_mention
#	I-api_mention
isReleasable	I-api_mention
,	O
It	O
is	O
updating	O
the	O
lock	O
and	O
returns	O
true	O
if	O
blocking	O
is	O
unnecessary	O
.	O
Interpretation	O
:	O
Blank	O
while	O
loops	O
are	O
used	O
to	O
provide	O
an	O
interrupt	O
until	O
some	O
condition	O
reset	O
to	O
true	O
/	O
false	O
.	O
Here	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
is	O
a	O
blocker	O
/	O
interrupt	O
until	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
true	O
when	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
false	O
.	O
Loop	O
will	O
continue	O
execution	O
while	O
blocker	O
is	O
not	O
releasable	O
(	O
!	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
and	O
blocker	O
is	O
not	O
blocked	O
!	O
!	O
Execution	O
will	O
be	O
out	O
of	O
loop	O
as	O
soon	O
as	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
set	O
to	O
true	O
.	O
Note	O
that	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
does	O
not	O
update	O
CAS	O
variable	O
,	O
but	O
it	O
guarantee	O
that	O
program	O
will	O
wait	O
until	O
variable	O
gets	O
updated	O
(	O
force	O
to	O
wait	O
until	O
variable	O
gets	O
updated	O
)	O
.	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489410	O
Java	O
String	B-api_mention
is	O
Special	O
#	O
blockquote	O
For	O
example	O
#	O
pre	O
#	O
img	O
Note	O
:	O
String	B-api_mention
literals	O
are	O
stored	O
in	O
a	O
common	O
pool	O
.	O
This	O
facilitates	O
sharing	O
of	O
storage	O
for	O
strings	O
with	O
the	O
same	O
contents	O
to	O
conserve	O
storage	O
.	O
String	B-api_mention
objects	O
allocated	O
via	O
new	O
operator	O
are	O
stored	O
in	O
the	O
heap	O
,	O
and	O
there	O
is	O
no	O
sharing	O
of	O
storage	O
for	O
the	O
same	O
contents	O
.	O
Question	O
-	O
33477695	O
,	O
answer	O
-	O
33477803	O
The	O
java	O
.	O
time	O
API	O
in	O
general	O
does	O
have	O
nanosecond	O
precision	O
.	O
For	O
example	O
:	O
#	O
pre	O
Output	O
:	O
2015	O
-	O
11	O
-	O
02T12	O
:	O
38	O
:	O
00	O
,	O
123456789	O
+	O
0000	O
However	O
,	O
it	O
'	O
s	O
the	O
clock	O
value	O
returned	O
by	O
OffsetDateTime	B-api_mention
.	I-api_mention
now	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
is	O
returning	O
a	O
value	O
which	O
only	O
has	O
milliseconds	O
.	O
From	O
Clock	B-api_mention
implementation	O
in	O
Java	O
8	O
:	O
#	O
blockquote	O
So	O
there	O
'	O
s	O
nothing	O
inherently	O
imprecise	O
here	O
-	O
just	O
the	O
default	O
implementation	O
of	O
Clock	B-api_mention
using	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
could	O
potentially	O
create	O
your	O
own	O
more	O
precise	O
subclass	O
.	O
However	O
,	O
you	O
should	O
note	O
that	O
adding	O
more	O
precision	O
without	O
adding	O
more	O
accuracy	O
probably	O
isn	O
'	O
t	O
terribly	O
useful	O
.	O
(	O
There	O
are	O
times	O
when	O
it	O
might	O
be	O
,	O
admittedly	O
.	O
.	O
.	O
)	O
Question	O
-	O
28671903	O
I	O
have	O
a	O
set	O
–	O
a	O
HashSet	B-api_mention
I	O
want	O
to	O
remove	O
some	O
items	O
from	O
it	O
…	O
none	O
of	O
the	O
items	O
in	O
the	O
"	O
removals	O
"	O
collection	O
will	O
be	O
in	O
the	O
original	O
set	O
.	O
I	O
specify	O
the	O
size	O
of	O
the	O
"	O
source	O
"	O
set	O
and	O
the	O
size	O
of	O
the	O
"	O
removals	O
"	O
collection	O
on	O
the	O
command	O
line	O
,	O
and	O
build	O
both	O
of	O
them	O
.	O
The	O
source	O
set	O
contains	O
only	O
non	O
-	O
negative	O
integers	O
;	O
the	O
removals	O
set	O
contains	O
only	O
negative	O
integers	O
.	O
I	O
measure	O
how	O
long	O
it	O
takes	O
to	O
remove	O
all	O
the	O
elements	O
using	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
which	O
isn	O
’	O
t	O
the	O
world	O
most	O
accurate	O
stopwatch	O
but	O
is	O
more	O
than	O
adequate	O
in	O
this	O
case	O
,	O
as	O
you	O
’	O
ll	O
see	O
.	O
Here	O
’	O
s	O
the	O
code	O
:	O
#	O
pre	O
Let	O
’	O
s	O
start	O
off	O
by	O
giving	O
it	O
an	O
easy	O
job	O
:	O
a	O
source	O
set	O
of	O
100	O
items	O
,	O
and	O
100	O
to	O
remove	O
:	O
#	O
pre	O
Okay	O
,	O
That	O
'	O
s	O
fast	O
as	O
I	O
expected	O
.	O
Next	O
i	O
tried	O
source	O
of	O
one	O
million	O
items	O
and	O
300	O
,	O
000	O
items	O
to	O
remove	O
?	O
#	O
pre	O
That	O
still	O
seems	O
pretty	O
speedy	O
.	O
Now	O
make	O
it	O
a	O
bit	O
easier	O
–	O
300	O
,	O
000	O
source	O
items	O
and	O
300	O
,	O
000	O
removals	O
:	O
#	O
pre	O
Nearly	O
three	O
minutes	O
?	O
Really	O
confused	O
!	O
!	O
can	O
some	O
one	O
explain	O
why	O
this	O
is	O
happening	O
.	O
Question	O
-	O
10977992	O
#	O
pre	O
We	O
can	O
use	O
Iterator	B-api_mention
to	O
traverse	O
a	O
Set	B-api_mention
or	O
a	O
List	B-api_mention
or	O
a	O
Map	B-api_mention
.	O
But	O
ListIterator	B-api_mention
can	O
only	O
be	O
used	O
to	O
traverse	O
a	O
List	B-api_mention
,	O
it	O
can	O
'	O
t	O
traverse	O
a	O
Set	B-api_mention
.	O
Why	O
?	O
I	O
know	O
that	O
the	O
main	O
difference	O
is	O
that	O
with	O
iterator	B-api_mention
we	O
can	O
travel	O
in	O
only	O
one	O
direction	O
but	O
with	O
ListIterator	B-api_mention
we	O
can	O
travel	O
both	O
directions	O
.	O
Are	O
there	O
any	O
other	O
differences	O
?	O
And	O
any	O
advantages	O
of	O
ListIterator	B-api_mention
over	O
Iterator	B-api_mention
?	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725518	O
Because	O
the	O
concept	O
of	O
a	O
List	B-api_mention
is	O
incompatible	O
with	O
the	O
concept	O
of	O
an	O
automatically	O
sorted	O
collection	O
.	O
The	O
point	O
of	O
a	O
List	B-api_mention
is	O
that	O
after	O
calling	O
list	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
a	O
call	O
to	O
list	O
.	B-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
elem	O
.	O
With	O
an	O
auto	O
-	O
sorted	O
list	O
,	O
the	O
element	O
could	O
end	O
up	O
in	O
an	O
arbitrary	O
position	O
.	O
Question	O
-	O
32323081	O
,	O
answer	O
-	O
32323641	O
First	O
of	O
all	O
,	O
you	O
don	O
'	O
have	O
to	O
overload	O
:	O
D	O
-	O
overloading	O
is	O
never	O
a	O
necessity	O
;	O
use	O
2	O
different	O
method	O
names	O
,	O
e	O
.	O
g	O
.	O
foo	O
and	O
fooX	O
Secondly	O
,	O
I	O
don	O
'	O
t	O
see	O
why	O
you	O
need	O
2	O
methods	O
here	O
.	O
If	O
you	O
want	O
to	O
handle	O
checked	O
and	O
unchecked	O
exceptions	O
differently	O
,	O
it	O
can	O
be	O
done	O
at	O
runtime	O
.	O
To	O
achieve	O
"	O
exception	O
transparency	O
"	O
,	O
you	O
can	O
do	O
#	O
pre	O
Finally	O
,	O
disambiguity	O
can	O
be	O
achieved	O
throw	O
lambda	O
return	O
type	O
;	O
the	O
compiler	O
uses	O
the	O
return	O
type	O
as	O
if	O
using	O
an	O
argument	O
type	O
for	O
choosing	O
the	O
most	O
specific	O
method	O
.	O
This	O
gives	O
us	O
the	O
idea	O
to	O
wrap	O
the	O
value	O
together	O
with	O
the	O
exception	O
type	O
,	O
as	O
Result	O
<	O
T	O
>	O
,	O
a	O
"	O
monad	O
"	O
as	O
they	O
say	O
.	O
#	O
pre	O
Question	O
-	O
11411022	O
,	O
answer	O
-	O
34052602	O
The	O
best	O
way	O
is	O
the	O
clearest	O
way	O
:	O
*	O
Thread	B-api_mention
.	I-api_mention
currentThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
,	O
if	O
the	O
runtime	O
platform	O
is	O
API	O
level	O
23	O
(	O
Marshmallow	O
6	O
.	O
0	O
)	O
or	O
higher	O
:	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
isCurrentThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
See	O
the	O
Looper	B-api_mention
API	O
.	O
Note	O
that	O
calling	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
involves	O
synchonization	O
(	O
see	O
the	O
source	O
)	O
.	O
You	O
might	O
want	O
to	O
avoid	O
the	O
overhead	O
by	O
storing	O
the	O
return	O
value	O
and	O
reusing	O
it	O
.	O
*	O
credit	O
greg7gkb	O
Question	O
-	O
9297899	O
,	O
answer	O
-	O
25816501	O
Even	O
though	O
this	O
is	O
not	O
a	O
direct	O
answer	O
to	O
the	O
question	O
,	O
it	O
is	O
an	O
addition	O
to	O
the	O
.	B-api_mention
length	I-api_mention
vs	O
.	B-api_mention
size	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
argument	O
.	O
I	O
was	O
researching	O
something	O
related	O
to	O
this	O
question	O
so	O
when	O
I	O
came	O
across	O
it	O
I	O
noticed	O
that	O
the	O
definition	O
(	O
s	O
)	O
provided	O
here	O
#	O
blockquote	O
is	O
not	O
"	O
exactly	O
"	O
correct	O
.	O
The	O
field	O
length	O
contains	O
the	O
number	O
of	O
available	O
places	O
to	O
put	O
a	O
component	O
,	O
not	O
the	O
number	O
of	O
components	O
present	O
in	O
the	O
array	O
.	O
So	O
it	O
represents	O
the	O
total	O
available	O
memory	O
allocated	O
to	O
that	O
array	O
,	O
not	O
how	O
much	O
of	O
that	O
memory	O
is	O
filled	O
.	O
#	O
img	O
Example	O
:	O
#	O
pre	O
Output	O
:	O
#	O
pre	O
However	O
,	O
the	O
.	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
property	O
of	O
the	O
ArrayList	B-api_mention
does	O
give	O
the	O
number	O
of	O
elements	O
in	O
the	O
list	O
:	O
#	O
pre	O
Output	O
:	O
#	O
pre	O
Question	O
-	O
32475166	O
,	O
answer	O
-	O
32476850	O
When	O
you	O
think	O
about	O
the	O
type	O
of	O
the	O
operands	O
,	O
the	O
problem	O
becomes	O
more	O
apparent	O
:	O
this	O
.	O
method	O
!	O
=	O
null	O
?	O
this	O
.	O
method	O
:	O
this	O
.	O
constructor	O
has	O
as	O
type	O
the	O
most	O
specialized	O
common	O
type	O
of	O
both	O
the	O
operands	O
,	O
i	O
.	O
e	O
.	O
the	O
most	O
specialized	O
type	O
common	O
to	O
both	O
this	O
.	O
method	O
and	O
this	O
.	O
constructor	O
.	O
In	O
Java	O
7	O
this	O
is	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
reflect	I-api_mention
.	I-api_mention
Member	I-api_mention
,	O
however	O
the	O
Java	O
8	O
class	O
library	O
introduces	O
a	O
new	O
type	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Executable	O
which	O
is	O
more	O
specialized	O
than	O
the	O
generic	O
Member	O
.	O
Hence	O
with	O
a	O
Java	O
8	O
class	O
library	O
the	O
result	O
type	O
of	O
the	O
ternary	O
expression	O
is	O
Executable	O
rather	O
than	O
Member	O
.	O
Some	O
(	O
pre	O
-	O
release	O
)	O
versions	O
of	O
the	O
Java	O
8	O
compiler	O
seem	O
to	O
have	O
produced	O
an	O
explicit	O
reference	O
to	O
Executable	O
inside	O
generated	O
code	O
when	O
compiling	O
the	O
ternary	O
operator	O
.	O
This	O
would	O
trigger	O
a	O
class	O
load	O
,	O
and	O
thus	O
in	O
turn	O
a	O
ClassNotFoundException	B-api_mention
at	O
runtime	O
when	O
running	O
with	O
a	O
class	O
library	O
<	O
JDK	O
8	O
,	O
because	O
Executable	O
only	O
exists	O
for	O
JDK	O
≥	O
8	O
.	O
As	O
noted	O
by	O
Tagir	O
Valeev	O
in	O
this	O
answer	O
,	O
this	O
is	O
actually	O
a	O
bug	O
in	O
pre	O
-	O
release	O
versions	O
of	O
JDK	O
8	O
and	O
has	O
since	O
been	O
fixed	O
,	O
so	O
both	O
the	O
if	O
-	O
else	O
workaround	O
and	O
the	O
explanatory	O
comment	O
are	O
now	O
obsolete	O
.	O
Additional	O
note	O
:	O
One	O
might	O
come	O
to	O
the	O
conclusion	O
that	O
this	O
compiler	O
bug	O
was	O
present	O
before	O
Java	O
8	O
.	O
However	O
,	O
the	O
byte	O
code	O
generated	O
for	O
the	O
ternary	O
by	O
OpenJDK	O
7	O
is	O
the	O
same	O
as	O
the	O
byte	O
code	O
generated	O
by	O
OpenJDK	O
8	O
.	O
In	O
fact	O
,	O
the	O
type	O
of	O
the	O
expression	O
goes	O
completely	O
unmentioned	O
at	O
runtime	O
,	O
the	O
code	O
is	O
really	O
only	O
test	O
,	O
branch	O
,	O
load	O
,	O
return	O
without	O
any	O
additional	O
checks	O
going	O
on	O
.	O
So	O
rest	O
assured	O
that	O
this	O
is	O
not	O
a	O
problem	O
(	O
anymore	O
)	O
and	O
indeed	O
seems	O
to	O
have	O
been	O
a	O
temporary	O
problem	O
during	O
development	O
of	O
Java	O
8	O
.	O
Question	O
-	O
12539365	O
I	O
write	O
jUnit	O
test	O
cases	O
for	O
3	O
purposes	O
:	O
#	O
li	O
To	O
ensure	O
that	O
my	O
code	O
satisfies	O
all	O
of	O
the	O
required	O
functionality	O
,	O
under	O
all	O
(	O
or	O
most	O
of	O
)	O
the	O
input	O
combinations	O
/	O
values	O
.	O
#	O
li	O
To	O
ensure	O
that	O
I	O
can	O
change	O
the	O
implementation	O
,	O
and	O
rely	O
on	O
JUnit	O
test	O
cases	O
to	O
tell	O
me	O
that	O
all	O
my	O
functionality	O
is	O
still	O
satisfied	O
.	O
#	O
li	O
As	O
a	O
documentation	O
of	O
all	O
the	O
use	O
cases	O
my	O
code	O
handles	O
,	O
and	O
act	O
as	O
a	O
spec	O
for	O
refactoring	O
-	O
should	O
the	O
code	O
ever	O
need	O
to	O
be	O
rewritten	O
.	O
(	O
Refactor	O
the	O
code	O
,	O
and	O
if	O
my	O
jUnit	O
tests	O
fail	O
-	O
you	O
probably	O
missed	O
some	O
use	O
case	O
)	O
.	O
I	O
do	O
not	O
understand	O
why	O
or	O
when	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
be	O
used	O
.	O
When	O
I	O
see	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
being	O
called	O
,	O
it	O
is	O
telling	O
me	O
that	O
my	O
jUnit	O
is	O
becoming	O
aware	O
of	O
the	O
implementation	O
.	O
(	O
Thus	O
changing	O
my	O
implementation	O
would	O
break	O
my	O
jUnits	O
,	O
even	O
though	O
my	O
functionality	O
was	O
unaffected	O
)	O
.	O
I	O
'	O
m	O
looking	O
for	O
:	O
#	O
li	O
What	O
should	O
be	O
the	O
guidelines	O
for	O
appropriate	O
usage	O
of	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
#	O
li	O
Is	O
it	O
fundamentally	O
correct	O
for	O
jUnits	O
to	O
be	O
aware	O
of	O
,	O
or	O
tightly	O
coupled	O
to	O
,	O
the	O
implementation	O
of	O
the	O
class	O
under	O
test	O
?	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
6540248	O
Below	O
there	O
will	O
be	O
a	O
non	O
-	O
obvious	O
case	O
where	O
Java	O
leaks	O
,	O
besides	O
the	O
standard	O
case	O
of	O
forgotten	O
listeners	O
,	O
static	O
references	O
,	O
bogus	O
/	O
modifiable	O
keys	O
in	O
hashmaps	O
,	O
or	O
just	O
threads	O
stuck	O
without	O
any	O
chance	O
to	O
end	O
their	O
life	O
-	O
cycle	O
.	O
#	O
li	O
File	B-api_mention
.	I-api_mention
deleteOnExit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
always	O
leaks	O
the	O
string	O
,	O
if	O
the	O
string	O
is	O
a	O
substring	O
,	O
the	O
leak	O
is	O
even	O
worse	O
(	O
the	O
underlying	O
char	O
[	O
]	O
is	O
also	O
leaked	O
)	O
-	O
in	O
Java	O
7	O
substring	O
also	O
copies	O
the	O
char	O
[	O
]	O
,	O
so	O
the	O
later	O
doesn	O
'	O
t	O
apply	O
;	O
@	O
Daniel	O
,	O
no	O
needs	O
for	O
votes	O
,	O
though	O
.	O
I	O
'	O
ll	O
concentrate	O
on	O
threads	O
to	O
show	O
the	O
danger	O
of	O
unmanaged	O
threads	O
mostly	O
,	O
don	O
'	O
t	O
wish	O
to	O
even	O
touch	O
swing	O
.	O
#	O
li	O
Runtime	B-api_mention
.	I-api_mention
addShutdownHook	I-api_mention
and	O
not	O
remove	O
.	O
.	O
.	O
and	O
then	O
even	O
with	O
removeShutdownHook	B-api_mention
due	O
to	O
a	O
bug	O
in	O
ThreadGroup	B-api_mention
class	O
regarding	O
unstarted	O
threads	O
it	O
may	O
not	O
get	O
collected	O
,	O
effectively	O
leak	O
the	O
ThreadGroup	B-api_mention
.	O
JGroup	O
has	O
the	O
leak	O
in	O
GossipRouter	B-api_mention
.	O
#	O
li	O
Creating	O
,	O
but	O
not	O
starting	O
,	O
a	O
Thread	B-api_mention
goes	O
into	O
the	O
same	O
category	O
as	O
above	O
.	O
#	O
li	O
Creating	O
a	O
thread	O
inherits	O
the	O
ContextClassLoader	B-api_mention
and	O
AccessControlContext	B-api_mention
,	O
plus	O
the	O
ThreadGroup	B-api_mention
and	O
any	O
InheritedThreadLocal	B-api_mention
,	O
all	O
those	O
references	O
are	O
potential	O
leaks	O
,	O
along	O
with	O
the	O
entire	O
classes	O
loaded	O
by	O
the	O
classloader	O
and	O
all	O
static	O
references	O
,	O
and	O
ja	O
-	O
ja	O
.	O
The	O
effect	O
is	O
especially	O
visible	O
with	O
the	O
entire	O
j	O
.	O
u	O
.	O
c	O
.	O
Executor	O
framework	O
that	O
features	O
a	O
super	O
simple	O
ThreadFactory	B-api_mention
interface	O
,	O
yet	O
most	O
developers	O
have	O
no	O
clue	O
of	O
the	O
lurking	O
danger	O
.	O
Also	O
a	O
lot	O
of	O
libraries	O
do	O
start	O
threads	O
upon	O
request	O
(	O
way	O
too	O
many	O
industry	O
popular	O
libraries	O
)	O
.	O
#	O
li	O
ThreadLocal	O
caches	O
;	O
those	O
are	O
evil	O
in	O
many	O
cases	O
.	O
I	O
am	O
sure	O
everyone	O
has	O
seen	O
quite	O
a	O
bit	O
of	O
simple	O
caches	O
based	O
on	O
ThreadLocal	B-api_mention
,	O
well	O
the	O
bad	O
news	O
:	O
if	O
the	O
thread	O
keeps	O
going	O
more	O
than	O
expected	O
the	O
life	O
the	O
context	O
ClassLoader	B-api_mention
,	O
it	O
is	O
a	O
pure	O
nice	O
little	O
leak	O
.	O
Do	O
not	O
use	O
ThreadLocal	B-api_mention
caches	O
unless	O
really	O
needed	O
.	O
#	O
li	O
Calling	O
ThreadGroup	B-api_mention
.	I-api_mention
destroy	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
the	O
ThreadGroup	B-api_mention
has	O
no	O
threads	O
itself	O
,	O
but	O
it	O
still	O
keeps	O
child	O
ThreadGroups	B-api_mention
.	O
A	O
bad	O
leak	O
that	O
will	O
prevent	O
the	O
ThreadGroup	B-api_mention
to	O
remove	O
from	O
its	O
parent	O
,	O
but	O
all	O
the	O
children	O
become	O
un	O
-	O
enumerateable	O
.	O
#	O
li	O
Using	O
WeakHashMap	B-api_mention
and	O
the	O
value	O
(	O
in	O
)	O
directly	O
references	O
the	O
key	O
.	O
This	O
is	O
a	O
hard	O
one	O
to	O
find	O
without	O
a	O
heap	O
dump	O
.	O
That	O
applies	O
to	O
all	O
extended	O
Weak	O
/	O
SoftReference	O
that	O
might	O
keep	O
a	O
hard	O
reference	O
back	O
to	O
the	O
guarded	O
object	O
.	O
#	O
li	O
Using	O
java	B-api_mention
.	I-api_mention
net	I-api_mention
.	I-api_mention
URL	I-api_mention
with	O
the	O
HTTP	O
(	O
S	O
)	O
protocol	O
and	O
loading	O
the	O
resource	O
from	O
(	O
!	O
)	O
.	O
This	O
one	O
is	O
special	O
,	O
the	O
KeepAliveCache	B-api_mention
creates	O
a	O
new	O
thread	O
in	O
the	O
system	O
ThreadGroup	B-api_mention
which	O
leaks	O
the	O
current	O
thread	O
'	O
s	O
context	O
classloader	O
.	O
The	O
thread	O
is	O
created	O
upon	O
the	O
first	O
request	O
when	O
no	O
alive	O
thread	O
exists	O
,	O
so	O
either	O
you	O
may	O
get	O
lucky	O
or	O
just	O
leak	O
.	O
The	O
leak	O
is	O
already	O
fixed	O
in	O
Java	O
7	O
and	O
the	O
code	O
that	O
creates	O
thread	O
properly	O
removes	O
the	O
context	O
classloader	O
.	O
There	O
are	O
few	O
more	O
cases	O
(	O
like	O
ImageFetcher	B-api_mention
,	O
also	O
fixed	O
)	O
of	O
creating	O
similar	O
threads	O
.	O
#	O
li	O
Using	O
InflaterInputStream	B-api_mention
passing	O
new	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
zip	I-api_mention
.	I-api_mention
Inflater	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
constructor	O
(	O
PNGImageDecoder	B-api_mention
for	O
instance	O
)	O
and	O
not	O
calling	O
end	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
the	O
inflater	O
.	O
Well	O
,	O
if	O
you	O
pass	O
in	O
the	O
constructor	O
with	O
just	O
new	O
,	O
no	O
chance	O
.	O
.	O
.	O
And	O
yes	O
,	O
calling	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
the	O
stream	O
does	O
not	O
close	O
the	O
inflater	O
if	O
it	O
'	O
s	O
manually	O
passed	O
as	O
constructor	O
parameter	O
.	O
This	O
is	O
not	O
a	O
true	O
leak	O
since	O
it	O
'	O
d	O
be	O
released	O
by	O
the	O
finalizer	O
.	O
.	O
.	O
when	O
it	O
deems	O
it	O
necessary	O
.	O
Till	O
that	O
moment	O
it	O
eats	O
native	O
memory	O
so	O
badly	O
it	O
can	O
cause	O
Linux	O
oom	O
_	O
killer	O
to	O
kill	O
the	O
process	O
with	O
impunity	O
.	O
The	O
main	O
issue	O
is	O
that	O
finalization	O
in	O
Java	O
is	O
very	O
unreliable	O
and	O
G1	O
made	O
it	O
worse	O
till	O
7	O
.	O
0	O
.	O
2	O
.	O
Moral	O
of	O
the	O
story	O
:	O
release	O
native	O
resources	O
as	O
soon	O
as	O
you	O
can	O
;	O
the	O
finalizer	O
is	O
just	O
too	O
poor	O
.	O
#	O
li	O
The	O
same	O
case	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
zip	I-api_mention
.	I-api_mention
Deflater	I-api_mention
.	O
This	O
one	O
is	O
far	O
worse	O
since	O
Deflater	B-api_mention
is	O
memory	O
hungry	O
in	O
Java	O
,	O
i	O
.	O
e	O
.	O
always	O
uses	O
15	O
bits	O
(	O
max	O
)	O
and	O
8	O
memory	O
levels	O
(	O
9	O
is	O
max	O
)	O
allocating	O
several	O
hundreds	O
KB	O
of	O
native	O
memory	O
.	O
Fortunately	O
,	O
Deflater	O
is	O
not	O
widely	O
used	O
and	O
to	O
my	O
knowledge	O
JDK	O
contains	O
no	O
misuses	O
.	O
Always	O
call	O
end	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
you	O
manually	O
create	O
a	O
Deflater	B-api_mention
or	O
Inflater	B-api_mention
.	O
The	O
best	O
part	O
of	O
the	O
last	O
two	O
:	O
you	O
can	O
'	O
t	O
find	O
them	O
via	O
normal	O
profiling	O
tools	O
available	O
.	O
(	O
I	O
can	O
add	O
some	O
more	O
time	O
wasters	O
I	O
have	O
encountered	O
upon	O
request	O
.	O
)	O
Good	O
luck	O
and	O
stay	O
safe	O
;	O
leaks	O
are	O
evil	O
!	O
Question	O
-	O
5011932	O
I	O
am	O
storing	O
a	O
SQL	O
query	O
in	O
my	O
strings	O
.	O
xml	O
file	O
and	O
I	O
want	O
to	O
use	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
to	O
build	O
the	O
final	O
string	O
in	O
code	O
.	O
The	O
SELECT	O
statement	O
uses	O
a	O
like	O
,	O
something	O
like	O
this	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
'	O
%	O
something	O
%	O
'	O
In	O
order	O
to	O
format	O
that	O
I	O
replace	O
'	O
something	O
'	O
with	O
%	O
1	O
$	O
s	O
so	O
it	O
becomes	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
\	O
'	O
%	O
%	O
1	O
$	O
s	O
%	O
\	O
'	O
I	O
escape	O
the	O
single	O
quotes	O
with	O
the	O
backslash	O
.	O
However	O
I	O
am	O
not	O
able	O
to	O
escape	O
the	O
%	O
sign	O
.	O
How	O
can	O
I	O
include	O
a	O
like	O
statement	O
in	O
my	O
strings	O
.	O
xml	O
file	O
?	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
8172444	O
Try	O
this	O
:	O
Character	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
just	O
this	O
:	O
aChar	O
+	O
StringLiteral	O
Question	O
-	O
22182669	O
,	O
answer	O
-	O
22223113	O
The	O
most	O
common	O
cause	O
of	O
StackOverFlowError	B-api_mention
is	O
excessively	O
deep	O
or	O
infinite	O
recursion	O
.	O
For	O
instance	O
:	O
#	O
pre	O
In	O
Java	O
:	O
There	O
are	O
two	O
areas	O
in	O
memory	O
the	O
heap	O
and	O
stack	O
.	O
The	O
stack	O
memory	O
is	O
used	O
to	O
store	O
local	O
variables	O
and	O
function	O
call	O
,	O
while	O
heap	O
memory	O
is	O
used	O
to	O
store	O
objects	O
in	O
Java	O
.	O
If	O
there	O
is	O
no	O
memory	O
left	O
in	O
stack	O
for	O
storing	O
function	O
call	O
or	O
local	O
variable	O
,	O
JVM	O
will	O
throw	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
StackOverFlowError	I-api_mention
while	O
if	O
there	O
is	O
no	O
more	O
heap	O
space	O
for	O
creating	O
object	O
,	O
JVM	O
will	O
throw	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
OutOfMemoryError	I-api_mention
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15430259	O
If	O
you	O
know	O
in	O
advance	O
what	O
the	O
size	O
of	O
the	O
ArrayList	B-api_mention
is	O
going	O
to	O
be	O
,	O
it	O
is	O
more	O
efficient	O
to	O
specify	O
the	O
initial	O
capacity	O
.	O
If	O
you	O
don	O
'	O
t	O
do	O
this	O
,	O
the	O
internal	O
array	O
will	O
have	O
to	O
be	O
repeatedly	O
reallocated	O
as	O
the	O
list	O
grows	O
.	O
The	O
larger	O
the	O
final	O
list	O
,	O
the	O
more	O
time	O
you	O
save	O
by	O
avoiding	O
the	O
reallocations	O
.	O
That	O
said	O
,	O
even	O
without	O
pre	O
-	O
allocation	O
,	O
inserting	O
n	O
elements	O
at	O
the	O
back	O
of	O
an	O
ArrayList	B-api_mention
is	O
guaranteed	O
to	O
take	O
total	O
O	O
(	O
args	O
)	O
time	O
.	O
In	O
other	O
words	O
,	O
appending	O
an	O
element	O
is	O
an	O
amortized	O
constant	O
-	O
time	O
operation	O
.	O
This	O
is	O
achieved	O
by	O
having	O
each	O
reallocation	O
increase	O
the	O
size	O
of	O
the	O
array	O
exponentially	O
,	O
typically	O
by	O
a	O
factor	O
of	O
1	O
.	O
5	O
.	O
With	O
this	O
approach	O
,	O
the	O
total	O
number	O
of	O
operations	O
can	O
be	O
shown	O
to	O
be	O
O	O
(	O
n	O
)	O
.	O
Question	O
-	O
31170459	O
I	O
was	O
testing	O
boundary	O
conditions	O
on	O
some	O
code	O
involving	O
a	O
BigDecimal	B-api_mention
,	O
and	O
I	O
noticed	O
that	O
when	O
a	O
BigDecimal	B-api_mention
is	O
initialized	O
with	O
the	O
String	B-api_mention
StringLiteral	O
it	O
behaves	O
unexpectedly	O
.	O
It	O
seems	O
to	O
have	O
a	O
value	O
between	O
0	O
and	O
1e	O
-	O
2147483647	O
.	O
When	O
I	O
try	O
calling	O
intValue	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
get	O
a	O
NegativeArraySizeException	B-api_mention
.	O
I	O
should	O
note	O
that	O
2147483647	O
is	O
the	O
max	O
value	O
of	O
an	O
integer	O
on	O
my	O
system	O
.	O
Am	O
I	O
doing	O
something	O
wrong	O
,	O
or	O
is	O
this	O
a	O
problem	O
with	O
BigDecimal	B-api_mention
?	O
#	O
pre	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28588854	O
The	O
correct	O
answer	O
is	O
a	O
simple	O
"	O
because	O
the	O
standard	O
(	O
and	O
the	O
docs	O
)	O
say	O
so	O
"	O
.	O
But	O
I	O
'	O
m	O
not	O
gonna	O
be	O
cynical	O
because	O
it	O
'	O
s	O
obvious	O
that	O
'	O
s	O
not	O
what	O
you	O
are	O
after	O
.	O
In	O
addition	O
to	O
the	O
other	O
answers	O
here	O
,	O
I	O
'	O
ll	O
try	O
to	O
relate	O
the	O
infinities	O
to	O
saturating	O
arithmetic	O
.	O
Other	O
answers	O
have	O
already	O
stated	O
that	O
the	O
reason	O
the	O
comparisons	O
on	O
NaNs	O
result	O
in	O
true	O
,	O
so	O
I	O
'	O
m	O
not	O
gonna	O
beat	O
a	O
dead	O
horse	O
.	O
Let	O
'	O
s	O
say	O
I	O
have	O
a	O
saturating	O
integer	O
that	O
represents	O
grayscale	O
colors	O
.	O
Why	O
am	O
I	O
using	O
saturating	O
arithmetic	O
?	O
Because	O
anything	O
brighter	O
than	O
white	O
is	O
still	O
white	O
,	O
and	O
anything	O
darker	O
than	O
black	O
is	O
still	O
black	O
(	O
except	O
orange	O
)	O
.	O
That	O
means	O
BLACK	O
-	O
x	O
=	O
=	O
BLACK	O
and	O
WHITE	O
+	O
x	O
=	O
=	O
WHITE	O
.	O
Makes	O
sense	O
?	O
Now	O
,	O
let	O
'	O
s	O
say	O
we	O
want	O
to	O
represent	O
those	O
grayscale	O
colors	O
with	O
a	O
(	O
signed	O
)	O
1s	O
complement	O
8	O
-	O
bit	O
integer	O
where	O
BLACK	O
=	O
=	O
-	O
127	O
and	O
WHITE	O
=	O
=	O
127	O
.	O
Why	O
1s	O
complement	O
?	O
Because	O
it	O
gives	O
us	O
a	O
signed	O
zero	O
like	O
IEEE	O
754	O
floating	O
point	O
.	O
And	O
,	O
because	O
we	O
are	O
using	O
saturating	O
arithmetic	O
,	O
-	O
127	O
-	O
x	O
=	O
=	O
-	O
127	O
and	O
127	O
+	O
x	O
=	O
=	O
127	O
.	O
How	O
does	O
this	O
relate	O
to	O
floating	O
point	O
infinities	O
?	O
Replace	O
the	O
integer	O
with	O
floating	O
point	O
,	O
BLACK	O
with	O
NEGATIVE	O
_	O
INFINITY	O
,	O
and	O
WHITE	O
with	O
POSITIVE	O
_	O
INFINITY	O
and	O
what	O
do	O
you	O
get	O
?	O
NEGATIVE	O
_	O
INFINITY	O
-	O
x	O
=	O
=	O
NEGATIVE	O
_	O
INFINITY	O
and	O
POSITIVE	O
_	O
INFINITY	O
+	O
x	O
=	O
=	O
POSITIVE	O
_	O
INFINITY	O
.	O
Since	O
you	O
used	O
POSITIVE	O
_	O
INFINITY	O
,	O
I	O
'	O
ll	O
use	O
it	O
also	O
.	O
First	O
we	O
need	O
a	O
class	O
to	O
represent	O
our	O
saturating	O
integer	O
-	O
based	O
color	O
;	O
let	O
'	O
s	O
call	O
it	O
SaturatedColor	B-api_mention
and	O
assume	O
it	O
works	O
like	O
any	O
other	O
integer	O
in	O
Java	O
.	O
Now	O
,	O
let	O
'	O
s	O
take	O
your	O
code	O
and	O
replace	O
double	O
with	O
our	O
own	O
SaturatedColor	B-api_mention
and	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
with	O
SaturatedColor	B-api_mention
.	I-api_mention
WHITE	I-api_mention
:	O
#	O
pre	O
As	O
we	O
established	O
above	O
,	O
SaturatedColor	B-api_mention
.	I-api_mention
WHITE	I-api_mention
(	O
just	O
WHITE	O
above	O
)	O
is	O
127	O
,	O
so	O
let	O
'	O
s	O
do	O
that	O
here	O
:	O
#	O
pre	O
Now	O
we	O
take	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
statements	O
you	O
used	O
and	O
replace	O
a	O
and	O
b	O
with	O
their	O
value	O
(	O
values	O
?	O
)	O
:	O
#	O
pre	O
It	O
should	O
be	O
obvious	O
what	O
this	O
will	O
print	O
.	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
30210459	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
allows	O
you	O
to	O
pass	O
an	O
instance	O
of	O
a	O
Comparator	B-api_mention
which	O
defines	O
the	O
sorting	O
logic	O
.	O
So	O
instead	O
of	O
sorting	O
the	O
list	O
in	O
natural	O
order	O
and	O
then	O
reversing	O
it	O
,	O
one	O
can	O
simply	O
pass	O
Collections	B-api_mention
.	I-api_mention
reverseOrder	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
in	O
order	O
to	O
sort	O
the	O
list	O
in	O
reverse	O
order	O
:	O
#	O
pre	O
As	O
mentioned	O
by	O
@	O
Marco13	O
,	O
apart	O
from	O
being	O
more	O
idiomatic	O
(	O
and	O
possibly	O
more	O
efficient	O
)	O
,	O
using	O
the	O
reverse	O
order	O
comparator	O
makes	O
sure	O
that	O
the	O
sort	O
is	O
stable	O
(	O
meaning	O
that	O
the	O
order	O
of	O
elements	O
will	O
not	O
be	O
changed	O
when	O
they	O
are	O
equal	O
according	O
to	O
the	O
comparator	O
,	O
whereas	O
reversing	O
will	O
change	O
the	O
order	O
)	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5032837	O
If	O
you	O
want	O
to	O
use	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
your	O
Sets	O
,	O
in	O
the	O
sense	O
that	O
the	O
same	O
entity	O
can	O
only	O
be	O
in	O
there	O
once	O
,	O
then	O
there	O
is	O
only	O
one	O
option	O
:	O
Option	O
2	O
.	O
That	O
'	O
s	O
because	O
a	O
primary	O
key	O
for	O
an	O
entity	O
by	O
definition	O
never	O
changes	O
(	O
if	O
somebody	O
indeed	O
updates	O
it	O
,	O
it	O
'	O
s	O
not	O
the	O
same	O
entity	O
anymore	O
)	O
You	O
should	O
take	O
that	O
literally	O
:	O
Since	O
your	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
based	O
on	O
the	O
primary	O
key	O
,	O
you	O
must	O
not	O
use	O
these	O
methods	O
,	O
until	O
the	O
primary	O
key	O
is	O
set	O
.	O
So	O
you	O
shouldn	O
'	O
t	O
put	O
entities	O
in	O
the	O
set	O
,	O
until	O
they	O
'	O
re	O
assigned	O
a	O
primary	O
key	O
.	O
(	O
Yes	O
,	O
UUIDs	O
and	O
similar	O
concepts	O
may	O
help	O
to	O
assign	O
primary	O
keys	O
early	O
.	O
)	O
Now	O
,	O
it	O
'	O
s	O
theoretically	O
also	O
possible	O
to	O
achieve	O
that	O
with	O
Option	O
3	O
,	O
even	O
though	O
so	O
-	O
called	O
"	O
business	O
-	O
keys	O
"	O
have	O
the	O
nasty	O
drawback	O
that	O
they	O
can	O
change	O
:	O
"	O
All	O
you	O
'	O
ll	O
have	O
to	O
do	O
is	O
delete	O
the	O
already	O
inserted	O
entities	O
from	O
the	O
set	O
(	O
s	O
)	O
,	O
and	O
re	O
-	O
insert	O
them	O
.	O
"	O
That	O
is	O
true	O
-	O
but	O
it	O
also	O
means	O
,	O
that	O
in	O
a	O
distributed	O
system	O
,	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
,	O
that	O
this	O
is	O
done	O
absolutely	O
everywhere	O
the	O
data	O
has	O
been	O
inserted	O
to	O
(	O
and	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
,	O
that	O
the	O
update	O
is	O
performed	O
,	O
before	O
other	O
things	O
occur	O
)	O
.	O
You	O
'	O
ll	O
need	O
a	O
sophisticated	O
update	O
mechanism	O
,	O
especially	O
if	O
some	O
remote	O
systems	O
aren	O
'	O
t	O
currently	O
reachable	O
.	O
.	O
.	O
Option	O
1	O
can	O
only	O
be	O
used	O
,	O
if	O
all	O
the	O
objects	O
in	O
your	O
sets	O
are	O
from	O
the	O
same	O
Hibernate	O
session	O
.	O
The	O
Hibernate	O
documentation	O
makes	O
this	O
very	O
clear	O
in	O
chapter	O
13	O
.	O
1	O
.	O
3	O
.	O
Considering	O
object	O
identity	O
:	O
#	O
blockquote	O
It	O
continues	O
to	O
argue	O
in	O
favor	O
of	O
Option	O
3	O
:	O
#	O
blockquote	O
This	O
is	O
true	O
,	O
if	O
you	O
#	O
li	O
cannot	O
assign	O
the	O
id	O
early	O
(	O
e	O
.	O
g	O
.	O
by	O
using	O
UUIDs	O
)	O
#	O
li	O
and	O
yet	O
you	O
absolutely	O
want	O
to	O
put	O
your	O
objects	O
in	O
sets	O
while	O
they	O
'	O
re	O
in	O
transient	O
state	O
.	O
Otherwise	O
,	O
you	O
'	O
re	O
free	O
to	O
choose	O
Option	O
2	O
.	O
Then	O
it	O
mentions	O
the	O
need	O
for	O
a	O
relative	O
stability	O
:	O
#	O
blockquote	O
This	O
is	O
correct	O
.	O
The	O
practical	O
problem	O
I	O
see	O
with	O
this	O
is	O
:	O
If	O
you	O
can	O
'	O
t	O
guarantee	O
absolute	O
stability	O
,	O
how	O
will	O
you	O
be	O
able	O
to	O
guarantee	O
stability	O
"	O
as	O
long	O
as	O
the	O
objects	O
are	O
in	O
the	O
same	O
Set	O
"	O
.	O
I	O
can	O
imagine	O
some	O
special	O
cases	O
(	O
like	O
using	O
sets	O
only	O
for	O
a	O
conversation	O
and	O
then	O
throwing	O
it	O
away	O
)	O
,	O
but	O
I	O
would	O
question	O
the	O
general	O
practicability	O
of	O
this	O
.	O
Short	O
version	O
:	O
#	O
li	O
Option	O
1	O
can	O
only	O
be	O
used	O
with	O
objects	O
within	O
a	O
single	O
session	O
.	O
#	O
li	O
If	O
you	O
can	O
,	O
use	O
Option	O
2	O
.	O
(	O
Assign	O
PK	O
as	O
early	O
as	O
possible	O
,	O
because	O
you	O
can	O
'	O
t	O
use	O
the	O
objects	O
in	O
sets	O
until	O
the	O
PK	O
is	O
assigned	O
.	O
)	O
#	O
li	O
If	O
you	O
can	O
guarantee	O
relative	O
stability	O
,	O
you	O
can	O
use	O
Option	O
3	O
.	O
But	O
be	O
careful	O
with	O
this	O
.	O
Question	O
-	O
24649842	O
,	O
answer	O
-	O
24649939	O
Try	O
adding	O
a	O
Thread	B-api_mention
.	I-api_mention
sleep	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
within	O
your	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
.	O
.	O
Basically	O
it	O
'	O
s	O
the	O
difference	O
between	O
scheduling	O
something	O
based	O
on	O
when	O
the	O
previous	O
execution	O
ends	O
and	O
when	O
it	O
(	O
logically	O
)	O
starts	O
.	O
For	O
example	O
,	O
suppose	O
I	O
schedule	O
an	O
alarm	O
to	O
go	O
off	O
with	O
a	O
fixed	O
rate	O
of	O
once	O
an	O
hour	O
,	O
and	O
every	O
time	O
it	O
goes	O
off	O
,	O
I	O
have	O
a	O
cup	O
of	O
coffee	O
,	O
which	O
takes	O
10	O
minutes	O
.	O
Suppose	O
that	O
starts	O
at	O
midnight	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
If	O
I	O
schedule	O
with	O
a	O
fixed	O
delay	O
of	O
one	O
hour	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
Which	O
one	O
you	O
want	O
depends	O
on	O
your	O
task	O
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31871515	O
Autoboxing	O
is	O
absolutely	O
implemented	O
using	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
in	O
the	O
OpenJDK	O
.	O
If	O
that	O
'	O
s	O
your	O
implementation	O
,	O
read	O
on	O
.	O
.	O
.	O
if	O
not	O
,	O
skip	O
to	O
below	O
.	O
#	O
pre	O
Java	O
documentation	O
states	O
that	O
Boolean	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
returns	O
Boolean	B-api_mention
.	I-api_mention
TRUE	I-api_mention
or	O
Boolean	B-api_mention
.	I-api_mention
FALSE	I-api_mention
,	O
therefore	O
your	O
reference	O
comparisons	O
in	O
these	O
cases	O
will	O
succeed	O
.	O
(	O
(	O
Integer	B-api_mention
)	O
1	O
)	O
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
For	O
this	O
particular	O
example	O
,	O
under	O
the	O
OpenJDK	O
implementation	O
with	O
default	O
settings	O
,	O
it	O
will	O
probably	O
work	O
by	O
virtue	O
of	O
the	O
fact	O
that	O
you	O
picked	O
a	O
value	O
<	O
128	O
which	O
is	O
cached	O
at	O
startup	O
(	O
although	O
this	O
can	O
be	O
overridden	O
as	O
a	O
commandline	O
arg	O
)	O
.	O
It	O
may	O
also	O
work	O
for	O
larger	O
values	O
if	O
it	O
'	O
s	O
frequently	O
used	O
enough	O
to	O
be	O
cached	O
.	O
Unless	O
you	O
'	O
re	O
working	O
under	O
"	O
safe	O
"	O
assumptions	O
about	O
the	O
Integer	B-api_mention
cache	O
,	O
don	O
'	O
t	O
expect	O
the	O
reference	O
comparison	O
to	O
be	O
an	O
equality	O
.	O
Long	B-api_mention
,	O
Short	B-api_mention
,	O
Character	B-api_mention
and	O
Byte	B-api_mention
incidentally	O
implement	O
this	O
caching	O
too	O
,	O
but	O
unlike	O
Integer	B-api_mention
,	O
it	O
'	O
s	O
not	O
tunable	O
.	O
Byte	O
will	O
always	O
work	O
if	O
you	O
'	O
re	O
comparing	O
autobox	O
/	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
references	O
since	O
obviously	O
,	O
you	O
can	O
'	O
t	O
go	O
out	O
of	O
range	O
.	O
Float	B-api_mention
and	O
Double	B-api_mention
will	O
unsurprisingly	O
always	O
create	O
a	O
new	O
instance	O
.	O
Now	O
,	O
in	O
purely	O
generic	O
terms	O
?	O
See	O
this	O
section	O
of	O
the	O
JLS	O
-	O
you	O
MUST	O
be	O
given	O
equal	O
references	O
for	O
boolean	O
and	O
any	O
int	O
or	O
char	O
within	O
the	O
-	O
128	O
to	O
127	O
range	O
.	O
There	O
are	O
no	O
guarantees	O
for	O
anything	O
else	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331241	O
I	O
have	O
a	O
very	O
dumb	O
but	O
working	O
option	O
.	O
if	O
you	O
have	O
the	O
String	B-api_mention
fullDate	O
=	O
"	O
11	O
/	O
15	O
/	O
2013	O
08	O
:	O
00	O
:	O
00	O
"	O
;	O
String	B-api_mention
finalDate	O
=	O
fullDate	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
That	O
should	O
work	O
easy	O
and	O
fast	O
.	O
:	O
)	O
Question	O
-	O
22740464	O
,	O
answer	O
-	O
37436520	O
Just	O
do	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
where	O
identity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
static	O
import	O
of	O
Function	B-api_mention
.	I-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Concatenating	O
multiple	O
streams	O
into	O
one	O
stream	O
is	O
the	O
same	O
as	O
flattening	O
a	O
stream	O
.	O
However	O
,	O
unfortunately	O
,	O
for	O
some	O
reason	O
there	O
is	O
no	O
flatten	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
Stream	B-api_mention
,	O
so	O
you	O
have	O
to	O
use	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
the	O
identity	O
function	O
.	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
24907860	O
Instead	O
of	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
use	O
input	O
.	B-api_mention
next	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
that	O
should	O
solve	O
the	O
problem	O
.	O
Modified	O
code	O
:	O
#	O
pre	O
Question	O
-	O
29815636	O
,	O
answer	O
-	O
29815698	O
The	O
first	O
form	O
is	O
called	O
Javadoc	O
.	O
You	O
use	O
this	O
when	O
you	O
'	O
re	O
writing	O
formal	O
APIs	O
for	O
your	O
code	O
,	O
which	O
are	O
generated	O
by	O
the	O
javadoc	O
tool	O
.	O
For	O
an	O
example	O
,	O
the	O
Java	O
7	O
API	O
page	O
uses	O
Javadoc	O
and	O
was	O
generated	O
by	O
that	O
tool	O
.	O
Some	O
common	O
elements	O
you	O
'	O
d	O
see	O
in	O
Javadoc	O
include	O
:	O
#	O
li	O
@	O
param	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
parameters	O
are	O
being	O
passed	O
to	O
a	O
method	O
,	O
and	O
what	O
value	O
they	O
'	O
re	O
expected	O
to	O
have	O
#	O
li	O
@	O
return	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
result	O
the	O
method	O
is	O
going	O
to	O
give	O
back	O
#	O
li	O
@	O
throws	O
:	O
this	O
is	O
used	O
to	O
indicate	O
that	O
a	O
method	O
throws	O
an	O
exception	O
or	O
error	O
in	O
case	O
of	O
certain	O
input	O
#	O
li	O
@	O
since	O
:	O
this	O
is	O
used	O
to	O
indicate	O
the	O
earliest	O
Java	O
version	O
this	O
class	O
or	O
function	O
was	O
available	O
in	O
As	O
an	O
example	O
,	O
here	O
'	O
s	O
Javadoc	O
for	O
the	O
compare	O
method	O
of	O
Integer	B-api_mention
:	O
#	O
pre	O
The	O
second	O
form	O
is	O
a	O
block	O
(	O
multi	O
-	O
line	O
)	O
comment	O
.	O
You	O
use	O
this	O
if	O
you	O
want	O
to	O
have	O
multiple	O
lines	O
in	O
a	O
comment	O
.	O
I	O
will	O
say	O
that	O
you	O
'	O
d	O
only	O
want	O
to	O
use	O
the	O
latter	O
form	O
sparingly	O
;	O
that	O
is	O
,	O
you	O
don	O
'	O
t	O
want	O
to	O
overburden	O
your	O
code	O
with	O
block	O
comments	O
that	O
don	O
'	O
t	O
describe	O
what	O
behaviors	O
the	O
method	O
/	O
complex	O
function	O
is	O
supposed	O
to	O
have	O
.	O
Since	O
Javadoc	O
is	O
the	O
more	O
descriptive	O
of	O
the	O
two	O
,	O
and	O
you	O
can	O
generate	O
actual	O
documentation	O
as	O
a	O
result	O
of	O
using	O
it	O
,	O
using	O
Javadoc	O
would	O
be	O
more	O
preferable	O
to	O
simple	O
block	O
comments	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
5192545	O
Edit	O
Updated	O
to	O
bring	O
in	O
feedback	O
.	O
So	O
two	O
ways	O
that	O
work	O
:	O
#	O
li	O
Use	O
StringBulderObj	B-api_mention
.	I-api_mention
setLength	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Allocate	O
a	O
new	O
one	O
instead	O
of	O
clearing	O
the	O
buffer	O
Question	O
-	O
7283338	O
,	O
answer	O
-	O
7283475	O
Because	O
any	O
particular	O
implementation	O
of	O
Set	O
may	O
or	O
may	O
not	O
be	O
random	O
access	O
.	O
You	O
can	O
always	O
get	O
an	O
iterator	O
and	O
step	O
through	O
the	O
Set	B-api_mention
,	O
using	O
the	O
iterators	O
'	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
return	O
the	O
result	O
you	O
want	O
once	O
you	O
find	O
the	O
equal	O
element	O
.	O
This	O
works	O
regardless	O
of	O
the	O
implementation	O
.	O
If	O
the	O
implementation	O
is	O
NOT	O
random	O
access	O
(	O
picture	O
a	O
linked	O
-	O
list	O
backed	O
Set	B-api_mention
)	O
,	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
the	O
interface	O
would	O
be	O
deceptive	O
,	O
since	O
it	O
would	O
have	O
to	O
iterate	O
the	O
collection	O
to	O
find	O
the	O
element	O
to	O
return	O
,	O
and	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
seem	O
to	O
imply	O
this	O
would	O
be	O
necessary	O
,	O
that	O
the	O
Set	B-api_mention
could	O
jump	O
directly	O
to	O
the	O
element	O
to	O
get	O
.	O
contains	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
or	O
may	O
not	O
have	O
to	O
do	O
the	O
same	O
thing	O
,	O
of	O
course	O
,	O
depending	O
on	O
the	O
implementation	O
,	O
but	O
the	O
name	O
doesn	O
'	O
t	O
seem	O
to	O
lend	O
itself	O
to	O
the	O
same	O
sort	O
of	O
misunderstandings	O
.	O
Question	O
-	O
14491966	O
I	O
made	O
a	O
class	O
called	O
QuickRandom	B-api_mention
,	O
and	O
its	O
job	O
is	O
to	O
produce	O
random	O
numbers	O
quickly	O
.	O
It	O
'	O
s	O
really	O
simple	O
:	O
just	O
take	O
the	O
old	O
value	O
,	O
multiply	O
by	O
a	O
double	O
,	O
and	O
take	O
the	O
decimal	O
part	O
.	O
Here	O
is	O
my	O
QuickRandom	B-api_mention
class	O
in	O
its	O
entirety	O
:	O
#	O
pre	O
And	O
here	O
is	O
the	O
code	O
I	O
wrote	O
to	O
test	O
it	O
:	O
#	O
pre	O
It	O
is	O
a	O
very	O
simple	O
algorithm	O
that	O
simply	O
multiplies	O
the	O
previous	O
double	O
by	O
a	O
"	O
magic	O
number	O
"	O
double	O
.	O
I	O
threw	O
it	O
together	O
pretty	O
quickly	O
,	O
so	O
I	O
could	O
probably	O
make	O
it	O
better	O
,	O
but	O
strangely	O
,	O
it	O
seems	O
to	O
be	O
working	O
fine	O
.	O
This	O
is	O
sample	O
output	O
of	O
the	O
commented	O
-	O
out	O
lines	O
in	O
the	O
main	O
method	O
:	O
#	O
pre	O
Hm	O
.	O
Pretty	O
random	O
.	O
In	O
fact	O
,	O
that	O
would	O
work	O
for	O
a	O
random	O
number	O
generator	O
in	O
a	O
game	O
.	O
Here	O
is	O
sample	O
output	O
of	O
the	O
non	O
-	O
commented	O
out	O
part	O
:	O
#	O
pre	O
Wow	O
!	O
It	O
performs	O
almost	O
4	O
times	O
faster	O
than	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
.	O
I	O
remember	O
reading	O
somewhere	O
that	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
tons	O
of	O
crazy	O
modulus	O
and	O
division	O
stuff	O
.	O
Is	O
that	O
really	O
necessary	O
?	O
My	O
algorithm	O
performs	O
a	O
lot	O
faster	O
and	O
it	O
seems	O
pretty	O
random	O
.	O
I	O
have	O
two	O
questions	O
:	O
#	O
li	O
Is	O
my	O
algorithm	O
"	O
good	O
enough	O
"	O
(	O
for	O
,	O
say	O
,	O
a	O
game	O
,	O
where	O
really	O
random	O
numbers	O
aren	O
'	O
t	O
too	O
important	O
)	O
?	O
#	O
li	O
Why	O
does	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
do	O
so	O
much	O
when	O
it	O
seems	O
just	O
simple	O
multiplication	O
and	O
cutting	O
out	O
the	O
decimal	O
will	O
suffice	O
?	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
20810612	O
I	O
'	O
m	O
on	O
Linux	O
and	O
get	O
same	O
result	O
for	O
both	O
of	O
these	O
approaches	O
:	O
#	O
pre	O
Paths	B-api_mention
.	I-api_mention
get	I-api_mention
(	I-api_mention
"	I-api_mention
"	I-api_mention
)	I-api_mention
docs	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
"	I-api_mention
user	I-api_mention
.	I-api_mention
dir	I-api_mention
"	I-api_mention
)	I-api_mention
docs	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
5439600	O
As	O
an	O
alternative	O
to	O
trying	O
to	O
parse	O
the	O
string	O
and	O
catching	O
NumberFormatException	B-api_mention
,	O
you	O
could	O
use	O
a	O
regex	O
;	O
e	O
.	O
g	O
.	O
#	O
pre	O
This	O
is	O
likely	O
to	O
be	O
faster	O
,	O
especially	O
if	O
you	O
precompile	O
and	O
reuse	O
the	O
regex	O
.	O
However	O
,	O
the	O
catch	O
is	O
that	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
still	O
fail	O
if	O
str	O
represents	O
a	O
number	O
that	O
is	O
outside	O
range	O
of	O
legal	O
int	O
values	O
.	O
Question	O
-	O
30217236	O
,	O
answer	O
-	O
30219144	O
Why	O
this	O
should	O
be	O
problem	O
in	O
the	O
first	O
place	O
is	O
kind	O
of	O
nebulous	O
to	O
me	O
.	O
I	O
suspect	O
you	O
'	O
ve	O
instead	O
misunderstood	O
something	O
about	O
the	O
ways	O
in	O
which	O
the	O
type	O
system	O
is	O
useful	O
.	O
What	O
can	O
we	O
do	O
with	O
a	O
<	O
T	O
>	O
void	O
x	O
(	O
args	O
)	O
?	O
Well	O
,	O
not	O
a	O
whole	O
lot	O
.	O
Inside	O
the	O
body	O
of	O
x	O
,	O
T	O
is	O
the	O
same	O
as	O
Object	B-api_mention
,	O
so	O
we	O
could	O
only	O
do	O
something	O
like	O
call	O
toString	B-api_mention
on	O
a	O
and	O
b	O
to	O
print	O
them	O
.	O
There	O
'	O
s	O
really	O
no	O
practical	O
reason	O
a	O
and	O
b	O
must	O
have	O
the	O
same	O
type	O
.	O
Just	O
that	O
they	O
have	O
some	O
type	O
in	O
common	O
,	O
and	O
that	O
type	O
is	O
Object	B-api_mention
or	O
a	O
subtype	O
of	O
it	O
.	O
In	O
fact	O
,	O
there	O
'	O
s	O
no	O
clear	O
reason	O
why	O
<	O
T	O
>	O
void	O
x	O
(	O
args	O
)	O
actually	O
needs	O
to	O
be	O
generic	O
at	O
all	O
.	O
#	O
li	O
The	O
method	O
body	O
doesn	O
'	O
t	O
care	O
what	O
the	O
actual	O
types	O
of	O
a	O
and	O
b	O
are	O
because	O
it	O
couldn	O
'	O
t	O
use	O
them	O
anyway	O
.	O
#	O
li	O
The	O
call	O
site	O
doesn	O
'	O
t	O
care	O
what	O
the	O
actual	O
types	O
of	O
a	O
and	O
b	O
are	O
because	O
x	O
is	O
a	O
void	O
method	O
so	O
it	O
'	O
s	O
a	O
black	O
hole	O
.	O
It	O
'	O
s	O
more	O
typical	O
for	O
a	O
method	O
to	O
have	O
a	O
result	O
,	O
like	O
<	O
T	O
>	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Arrays	I-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
/	O
/	O
This	O
will	O
cause	O
a	O
compile	O
error	O
because	O
/	O
/	O
the	O
type	O
inferred	O
must	O
be	O
compatible	O
/	O
/	O
with	O
the	O
return	O
assignment	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
r	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
a	O
bound	O
:	O
#	O
pre	O
Or	O
a	O
bound	O
which	O
asserts	O
some	O
kind	O
of	O
relation	O
:	O
#	O
pre	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877283	O
The	O
Integer	B-api_mention
class	O
has	O
a	O
static	O
cache	O
,	O
that	O
stores	O
256	O
special	O
Integer	B-api_mention
objects	O
-	O
one	O
for	O
every	O
value	O
between	O
-	O
128	O
and	O
127	O
.	O
With	O
that	O
in	O
mind	O
,	O
consider	O
the	O
difference	O
between	O
these	O
three	O
.	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
(	O
obviously	O
)	O
makes	O
a	O
brand	O
new	O
Integer	B-api_mention
object	O
.	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
an	O
int	O
primitive	O
value	O
after	O
parsing	O
the	O
String	B-api_mention
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
more	O
complex	O
than	O
the	O
others	O
.	O
It	O
starts	O
off	O
by	O
parsing	O
the	O
String	B-api_mention
.	O
Then	O
,	O
if	O
the	O
value	O
is	O
between	O
-	O
128	O
and	O
127	O
,	O
it	O
returns	O
the	O
corresponding	O
object	O
from	O
the	O
static	O
cache	O
.	O
If	O
the	O
value	O
is	O
outside	O
of	O
this	O
range	O
,	O
then	O
it	O
invokes	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
passes	O
in	O
the	O
value	O
,	O
so	O
that	O
you	O
get	O
a	O
new	O
object	O
.	O
Now	O
,	O
consider	O
the	O
three	O
expressions	O
in	O
the	O
question	O
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
true	O
,	O
because	O
the	O
Integer	B-api_mention
whose	O
value	O
is	O
127	O
is	O
retrieved	O
twice	O
from	O
the	O
static	O
cache	O
,	O
and	O
compared	O
to	O
itself	O
.	O
There	O
'	O
s	O
only	O
one	O
Integer	B-api_mention
object	O
involved	O
,	O
so	O
this	O
returns	O
true	O
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
false	O
,	O
because	O
128	O
is	O
not	O
in	O
the	O
static	O
cache	O
.	O
So	O
a	O
new	O
Integer	B-api_mention
is	O
created	O
for	O
each	O
side	O
of	O
the	O
equality	O
.	O
Since	O
there	O
are	O
two	O
different	O
Integer	B-api_mention
objects	O
,	O
and	O
=	O
=	O
for	O
objects	O
only	O
returns	O
true	O
if	O
both	O
sides	O
are	O
the	O
exact	O
same	O
object	O
,	O
this	O
is	O
going	O
to	O
be	O
false	O
.	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
comparing	O
the	O
primitive	O
int	O
value	O
128	O
on	O
the	O
left	O
,	O
with	O
a	O
newly	O
created	O
Integer	B-api_mention
object	O
on	O
the	O
right	O
.	O
But	O
because	O
it	O
doesn	O
'	O
t	O
make	O
sense	O
to	O
compare	O
an	O
int	O
to	O
an	O
Integer	B-api_mention
,	O
Java	O
will	O
auto	O
-	O
unbox	O
the	O
Integer	B-api_mention
before	O
doing	O
the	O
comparison	O
;	O
so	O
you	O
end	O
up	O
comparing	O
an	O
int	O
to	O
an	O
int	O
.	O
Since	O
the	O
primitive	O
128	O
is	O
equal	O
to	O
itself	O
,	O
this	O
returns	O
true	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
35264580	O
Main	O
difference	O
is	O
that	O
when	O
program	O
calls	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
a	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
is	O
executed	O
in	O
new	O
Thread	B-api_mention
while	O
if	O
you	O
call	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
directly	O
no	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
execute	O
on	O
current	O
Thread	B-api_mention
.	O
Another	O
difference	O
between	O
start	O
vs	O
run	O
in	O
Java	O
thread	O
is	O
that	O
you	O
can	O
not	O
call	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
on	O
thread	O
object	O
.	O
once	O
started	O
,	O
second	O
call	O
of	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
throw	O
IllegalStateException	B-api_mention
in	O
Java	O
while	O
you	O
can	O
call	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
.	O
Question	O
-	O
23079003	O
,	O
answer	O
-	O
23079174	O
You	O
can	O
use	O
the	O
overloaded	O
version	O
of	O
toArray	B-api_mention
,	O
as	O
the	O
following	O
:	O
#	O
pre	O
The	O
purpose	O
of	O
the	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
generator	O
is	O
to	O
convert	O
an	O
integer	O
,	O
the	O
size	O
of	O
the	O
array	O
,	O
to	O
a	O
new	O
array	O
.	O
Example	O
code	O
:	O
#	O
pre	O
Prints	O
:	O
#	O
pre	O
Another	O
option	O
is	O
to	O
use	O
a	O
method	O
reference	O
to	O
the	O
string	O
array	O
constructor	O
,	O
this	O
one	O
is	O
a	O
bit	O
more	O
tricky	O
.	O
Usage	O
is	O
easy	O
:	O
String	B-api_mention
[	O
]	O
stringArray	O
=	O
streamString	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
What	O
it	O
does	O
,	O
is	O
find	O
a	O
method	O
that	O
takes	O
in	O
an	O
integer	O
(	O
the	O
size	O
)	O
as	O
argument	O
,	O
and	O
returns	O
a	O
String	B-api_mention
[	O
]	O
,	O
which	O
is	O
exactly	O
what	O
(	O
one	O
of	O
the	O
overloads	O
of	O
)	O
new	O
String	B-api_mention
[	O
]	O
does	O
.	O
Question	O
-	O
8189466	O
Note	O
:	O
I	O
am	O
aware	O
of	O
the	O
Iterator	B-api_mention
#	I-api_mention
remove	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
In	O
the	O
following	O
code	O
sample	O
,	O
I	O
don	O
'	O
t	O
understand	O
why	O
the	O
List	B-api_mention
.	I-api_mention
remove	I-api_mention
in	O
main	O
method	O
throws	O
ConcurrentModificationException	B-api_mention
but	O
not	O
in	O
the	O
remove	B-api_mention
method	O
.	O
#	O
pre	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032208	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
underlying	O
Array	B-api_mention
and	O
set	O
each	O
entry	O
to	O
null	O
;	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
ArrayList	B-api_mention
checking	O
for	O
collection	O
and	O
remove	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
if	O
it	O
exists	O
.	O
I	O
would	O
imagine	O
that	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
way	O
faster	O
then	O
removeAll	B-api_mention
because	O
it	O
'	O
s	O
not	O
comparing	O
,	O
etc	O
.	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032137	O
Unless	O
there	O
is	O
a	O
specific	O
optimization	O
that	O
checks	O
if	O
the	O
argument	O
passed	O
to	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
collection	O
itself	O
(	O
and	O
I	O
highly	O
doubt	O
that	O
such	O
an	O
optimization	O
is	O
there	O
)	O
it	O
will	O
be	O
significantly	O
slower	O
than	O
a	O
simple	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Apart	O
from	O
that	O
(	O
and	O
at	O
least	O
equally	O
important	O
)	O
:	O
arraylist	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
just	O
obtuse	O
,	O
confusing	O
code	O
.	O
It	O
is	O
a	O
very	O
backwards	O
way	O
of	O
saying	O
"	O
clear	O
this	O
collection	O
"	O
.	O
What	O
advantage	O
would	O
it	O
have	O
over	O
the	O
very	O
understandable	O
arraylist	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32370677	O
There	O
is	O
a	O
small	O
overhead	O
in	O
calling	O
methods	O
var	O
an	O
interface	O
rather	O
than	O
directly	O
on	O
an	O
object	O
.	O
This	O
overhead	O
is	O
often	O
no	O
more	O
than	O
1	O
or	O
2	O
processor	O
instructions	O
.	O
The	O
overhead	O
of	O
calling	O
a	O
method	O
is	O
even	O
lower	O
if	O
the	O
JIT	O
knows	O
that	O
the	O
method	O
is	O
final	O
.	O
This	O
is	O
not	O
measurable	O
for	O
most	O
code	O
you	O
and	O
me	O
right	O
,	O
but	O
for	O
the	O
low	O
level	O
methods	O
in	O
java	O
.	O
utils	O
may	O
be	O
used	O
in	O
some	O
code	O
where	O
it	O
is	O
an	O
issue	O
.	O
Also	O
as	O
has	O
been	O
pointed	O
out	O
in	O
other	O
answers	O
,	O
the	O
concrete	O
type	O
of	O
the	O
object	O
that	O
is	O
return	O
(	O
even	O
when	O
hidden	O
behind	O
an	O
interface	O
)	O
effects	O
the	O
performance	O
of	O
code	O
that	O
uses	O
it	O
.	O
This	O
change	O
in	O
performance	O
can	O
be	O
very	O
great	O
,	O
so	O
such	O
an	O
extent	O
that	O
the	O
calling	O
software	O
fails	O
to	O
work	O
.	O
Clearly	O
the	O
authors	O
of	O
java	O
.	O
utils	O
have	O
no	O
way	O
to	O
know	O
what	O
all	O
the	O
software	O
that	O
calls	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
does	O
with	O
the	O
result	O
and	O
no	O
way	O
to	O
re	O
-	O
test	O
this	O
software	O
if	O
they	O
change	O
the	O
implantation	O
of	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Therefore	O
they	O
are	O
not	O
going	O
to	O
change	O
the	O
implantation	O
of	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
return	O
a	O
different	O
type	O
of	O
List	B-api_mention
,	O
even	O
if	O
the	O
type	O
system	O
allowed	O
it	O
!	O
When	O
writing	O
your	O
own	O
software	O
,	O
you	O
(	O
hopefully	O
)	O
have	O
automated	O
test	O
that	O
cover	O
all	O
your	O
code	O
and	O
a	O
good	O
understand	O
of	O
how	O
your	O
code	O
interrelates	O
include	O
know	O
where	O
performance	O
is	O
an	O
issue	O
.	O
Being	O
able	O
to	O
make	O
a	O
change	O
to	O
a	O
method	O
,	O
without	O
having	O
to	O
change	O
the	O
callers	O
is	O
of	O
great	O
value	O
while	O
the	O
design	O
of	O
the	O
software	O
is	O
changing	O
.	O
Therefore	O
the	O
two	O
set	O
of	O
trade	O
offs	O
are	O
very	O
different	O
.	O
Question	O
-	O
23932061	O
,	O
answer	O
-	O
23936723	O
There	O
'	O
s	O
a	O
much	O
better	O
answer	O
than	O
using	O
spliteratorUnknownSize	B-api_mention
directly	O
,	O
which	O
is	O
both	O
easier	O
and	O
gets	O
a	O
better	O
result	O
.	O
Iterable	B-api_mention
has	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
so	O
you	O
should	O
just	O
use	O
that	O
to	O
get	O
your	O
spliterator	O
.	O
In	O
the	O
worst	O
case	O
,	O
its	O
the	O
same	O
code	O
(	O
the	O
default	O
implementation	O
uses	O
spliteratorUnknownSize	B-api_mention
)	O
,	O
but	O
in	O
the	O
more	O
common	O
case	O
,	O
where	O
your	O
Iterable	O
is	O
already	O
a	O
collection	O
,	O
you	O
'	O
ll	O
get	O
a	O
better	O
spliterator	O
,	O
and	O
therefore	O
better	O
stream	O
performance	O
(	O
maybe	O
even	O
good	O
parallelism	O
.	O
)	O
Its	O
also	O
less	O
code	O
:	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
moreStreamOps	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
As	O
you	O
can	O
see	O
,	O
getting	O
a	O
stream	O
from	O
an	O
Iterable	B-api_mention
(	O
see	O
Why	O
does	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
provide	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
methods	O
?	O
)	O
is	O
not	O
very	O
painful	O
.	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489437	O
Java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
is	O
not	O
just	O
a	O
class	O
.	O
It	O
'	O
s	O
an	O
integral	O
part	O
of	O
the	O
core	O
language	O
.	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
it	O
.	O
For	O
example	O
,	O
StringLiteral	O
is	O
like	O
an	O
abbreviation	O
for	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
When	O
written	O
StringLiteral	O
the	O
compiler	O
optimizes	O
identical	O
strings	O
to	O
the	O
same	O
instance	O
to	O
save	O
space	O
.	O
StringLiteral	O
+	O
5	O
=	O
=	O
StringLiteral	O
=	O
=	O
>	O
true	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
a	O
lot	O
of	O
stuff	O
,	O
including	O
not	O
having	O
to	O
box	O
/	O
unbox	O
between	O
object	O
versions	O
and	O
their	O
native	O
types	O
,	O
no	O
parent	O
means	O
Object	B-api_mention
,	O
default	O
constructor	O
,	O
.	O
.	O
.	O
Question	O
-	O
27845223	O
,	O
answer	O
-	O
27846417	O
Pavel	O
Horal	O
'	O
s	O
answer	O
is	O
nice	O
.	O
As	O
he	O
says	O
,	O
the	O
word	O
"	O
file	O
"	O
has	O
totally	O
different	O
(	O
practically	O
unrelated	O
)	O
meanings	O
in	O
URL	B-api_mention
#	I-api_mention
getFile	I-api_mention
vs	O
java	B-api_mention
.	I-api_mention
io	I-api_mention
.	I-api_mention
File	I-api_mention
-	O
may	O
be	O
that	O
'	O
s	O
part	O
of	O
the	O
confusion	O
.	O
Just	O
to	O
add	O
:	O
#	O
li	O
A	O
resource	O
in	O
Java	O
is	O
an	O
abstract	O
concept	O
,	O
a	O
source	O
of	O
data	O
that	O
can	O
be	O
read	O
.	O
The	O
location	O
(	O
or	O
address	O
)	O
of	O
a	O
resource	O
is	O
represented	O
in	O
Java	O
by	O
a	O
URL	B-api_mention
object	O
.	O
#	O
li	O
A	O
resource	O
can	O
correspond	O
to	O
a	O
regular	O
file	O
in	O
the	O
local	O
filesystem	O
(	O
specifically	O
,	O
when	O
its	O
URL	B-api_mention
begins	O
with	O
file	O
:	O
/	O
/	O
)	O
.	O
But	O
a	O
resource	O
is	O
more	O
general	O
(	O
it	O
can	O
be	O
also	O
some	O
file	O
stored	O
in	O
a	O
jar	O
,	O
or	O
some	O
data	O
to	O
be	O
read	O
from	O
the	O
network	O
,	O
or	O
from	O
memory	O
,	O
or	O
.	O
.	O
.	O
)	O
.	O
And	O
it	O
'	O
s	O
also	O
more	O
limited	O
,	O
because	O
a	O
File	B-api_mention
(	O
besides	O
being	O
other	O
things	O
than	O
a	O
regular	O
file	O
:	O
a	O
directory	O
,	O
a	O
link	O
)	O
can	O
also	O
be	O
created	O
and	O
writen	O
to	O
.	O
#	O
li	O
Remember	O
in	O
Java	O
a	O
File	B-api_mention
object	O
does	O
not	O
really	O
represents	O
"	O
a	O
file	O
"	O
but	O
the	O
location	O
(	O
the	O
full	O
name	O
,	O
with	O
path	O
)	O
of	O
a	O
file	O
.	O
So	O
,	O
a	O
File	B-api_mention
object	O
allows	O
you	O
to	O
locate	O
(	O
and	O
open	O
)	O
a	O
file	O
,	O
as	O
a	O
URL	B-api_mention
allows	O
you	O
to	O
access	O
(	O
and	O
open	O
)	O
a	O
resource	O
.	O
(	O
There	O
is	O
no	O
Resource	B-api_mention
class	O
in	O
Java	O
to	O
represent	O
a	O
resource	O
,	O
but	O
neither	O
there	O
is	O
one	O
to	O
represent	O
a	O
file	O
!	O
once	O
more	O
:	O
File	B-api_mention
is	O
not	O
a	O
file	O
,	O
it	O
'	O
s	O
the	O
path	O
of	O
a	O
file	O
)	O
.	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818783	O
The	O
absolute	O
simplest	O
example	O
I	O
can	O
think	O
of	O
is	O
to	O
make	O
incrementing	O
an	O
atomic	O
operation	O
.	O
With	O
standard	O
ints	O
:	O
#	O
pre	O
With	O
AtomicInteger	B-api_mention
:	O
#	O
pre	O
The	O
latter	O
is	O
a	O
very	O
simple	O
way	O
to	O
perform	O
simple	O
mutations	O
effects	O
(	O
especially	O
counting	O
,	O
or	O
unique	O
-	O
indexing	O
)	O
,	O
without	O
having	O
to	O
resort	O
to	O
synchronizing	O
all	O
access	O
.	O
More	O
complex	O
synchronization	O
-	O
free	O
logic	O
can	O
be	O
employed	O
by	O
using	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
a	O
type	O
of	O
optimistic	O
locking	O
-	O
get	O
the	O
current	O
value	O
,	O
compute	O
result	O
based	O
on	O
this	O
,	O
set	O
this	O
result	O
iff	O
value	O
is	O
still	O
the	O
input	O
used	O
to	O
do	O
the	O
calculation	O
,	O
else	O
start	O
again	O
-	O
but	O
the	O
counting	O
examples	O
are	O
very	O
useful	O
,	O
and	O
I	O
'	O
ll	O
often	O
use	O
AtomicIntegers	B-api_mention
for	O
counting	O
and	O
VM	O
-	O
wide	O
unique	O
generators	O
if	O
there	O
'	O
s	O
any	O
hint	O
of	O
multiple	O
threads	O
being	O
involved	O
,	O
because	O
they	O
'	O
re	O
so	O
easy	O
to	O
work	O
with	O
I	O
'	O
d	O
almost	O
consider	O
it	O
premature	O
optimisation	O
to	O
use	O
plain	O
ints	O
.	O
While	O
you	O
can	O
almost	O
always	O
achieve	O
the	O
same	O
synchronization	O
guarantees	O
with	O
ints	O
and	O
appropriate	O
synchronized	O
declarations	O
,	O
the	O
beauty	O
of	O
AtomicInteger	B-api_mention
is	O
that	O
the	O
thread	O
-	O
safety	O
is	O
built	O
into	O
the	O
actual	O
object	O
itself	O
,	O
rather	O
than	O
you	O
needing	O
to	O
worry	O
about	O
the	O
possible	O
interleavings	O
,	O
and	O
monitors	O
held	O
,	O
of	O
every	O
method	O
that	O
happens	O
to	O
access	O
the	O
int	O
value	O
.	O
It	O
'	O
s	O
much	O
harder	O
to	O
accidentally	O
violate	O
threadsafety	O
when	O
calling	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
than	O
when	O
returning	O
i	O
+	O
+	O
and	O
remembering	O
(	O
or	O
not	O
)	O
to	O
acquire	O
the	O
correct	O
set	O
of	O
monitors	O
beforehand	O
.	O
Question	O
-	O
30125296	O
,	O
answer	O
-	O
30125487	O
I	O
suggest	O
2	O
more	O
options	O
:	O
#	O
pre	O
The	O
second	O
one	O
uses	O
Collectors	B-api_mention
.	I-api_mention
summingInt	I-api_mention
(	I-api_mention
)	I-api_mention
collector	O
.	O
Besides	O
,	O
Java	O
8	O
introduces	O
a	O
very	O
effective	O
LongAdder	O
accumulator	O
designed	O
to	O
speed	O
-	O
up	O
summarizing	O
in	O
parallel	O
streams	O
and	O
multi	O
-	O
thread	O
environments	O
.	O
Here	O
,	O
it	O
may	O
be	O
used	O
as	O
follows	O
:	O
#	O
pre	O
Question	O
-	O
22435833	O
,	O
answer	O
-	O
22497858	O
The	O
answer	O
from	O
skiwi	O
covered	O
many	O
of	O
the	O
major	O
points	O
already	O
.	O
I	O
'	O
ll	O
fill	O
in	O
a	O
bit	O
more	O
background	O
.	O
The	O
design	O
of	O
any	O
API	O
is	O
a	O
series	O
of	O
tradeoffs	O
.	O
In	O
Java	O
,	O
one	O
of	O
the	O
difficult	O
issues	O
is	O
dealing	O
with	O
design	O
decisions	O
that	O
were	O
made	O
long	O
ago	O
.	O
Primitives	O
have	O
been	O
in	O
Java	O
since	O
1	O
.	O
0	O
.	O
They	O
make	O
Java	O
an	O
"	O
impure	O
"	O
object	O
-	O
oriented	O
language	O
,	O
since	O
the	O
primitives	O
are	O
not	O
objects	O
.	O
The	O
addition	O
of	O
primitives	O
was	O
,	O
I	O
believe	O
,	O
a	O
pragmatic	O
decision	O
to	O
improve	O
performance	O
at	O
the	O
expense	O
of	O
object	O
-	O
oriented	O
purity	O
.	O
This	O
is	O
a	O
tradeoff	O
we	O
'	O
re	O
still	O
living	O
with	O
today	O
,	O
nearly	O
20	O
years	O
later	O
.	O
The	O
autoboxing	O
feature	O
added	O
in	O
Java	O
5	O
mostly	O
eliminated	O
the	O
need	O
to	O
clutter	O
source	O
code	O
with	O
boxing	O
and	O
unboxing	O
method	O
calls	O
,	O
but	O
the	O
overhead	O
is	O
still	O
there	O
.	O
In	O
many	O
cases	O
it	O
'	O
s	O
not	O
noticeable	O
.	O
However	O
,	O
if	O
you	O
were	O
to	O
perform	O
boxing	O
or	O
unboxing	O
within	O
an	O
inner	O
loop	O
,	O
you	O
'	O
d	O
see	O
that	O
it	O
can	O
impose	O
significant	O
CPU	O
and	O
garbage	O
collection	O
overhead	O
.	O
When	O
designing	O
the	O
Streams	B-api_mention
API	O
,	O
it	O
was	O
clear	O
that	O
we	O
had	O
to	O
support	O
primitives	O
.	O
The	O
boxing	O
/	O
unboxing	O
overhead	O
would	O
kill	O
any	O
performance	O
benefit	O
from	O
parallelism	O
.	O
We	O
didn	O
'	O
t	O
want	O
to	O
support	O
all	O
of	O
the	O
primitives	O
,	O
though	O
,	O
since	O
that	O
would	O
have	O
added	O
a	O
huge	O
amount	O
of	O
clutter	O
to	O
the	O
API	O
.	O
(	O
Can	O
you	O
really	O
see	O
a	O
use	O
for	O
a	O
ShortStream	B-api_mention
?	O
)	O
"	O
All	O
"	O
or	O
"	O
none	O
"	O
are	O
comfortable	O
places	O
for	O
a	O
design	O
to	O
be	O
,	O
yet	O
neither	O
was	O
acceptable	O
.	O
So	O
we	O
had	O
to	O
find	O
a	O
reasonable	O
value	O
of	O
"	O
some	O
"	O
.	O
We	O
ended	O
up	O
with	O
primitive	O
specializations	O
for	O
int	O
,	O
long	O
,	O
and	O
double	O
.	O
(	O
Personally	O
I	O
would	O
have	O
left	O
out	O
int	O
but	O
that	O
'	O
s	O
just	O
me	O
.	O
)	O
For	O
CharSequence	B-api_mention
.	I-api_mention
chars	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
we	O
considered	O
returning	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	O
an	O
early	O
prototype	O
might	O
have	O
implemented	O
this	O
)	O
but	O
it	O
was	O
rejected	O
because	O
of	O
boxing	O
overhead	O
.	O
Considering	O
that	O
a	O
String	B-api_mention
has	O
char	O
values	O
as	O
primitives	O
,	O
it	O
would	O
seem	O
to	O
be	O
a	O
mistake	O
to	O
impose	O
boxing	O
unconditionally	O
when	O
the	O
caller	O
would	O
probably	O
just	O
do	O
a	O
bit	O
of	O
processing	O
on	O
the	O
value	O
and	O
unbox	O
it	O
right	O
back	O
into	O
a	O
string	O
.	O
We	O
also	O
considered	O
a	O
CharStream	B-api_mention
primitive	O
specialization	O
,	O
but	O
its	O
use	O
would	O
seem	O
to	O
be	O
quite	O
narrow	O
compared	O
to	O
the	O
amount	O
of	O
bulk	O
it	O
would	O
add	O
to	O
the	O
API	O
.	O
It	O
didn	O
'	O
t	O
seem	O
worthwhile	O
to	O
add	O
it	O
.	O
The	O
penalty	O
this	O
imposes	O
on	O
callers	O
is	O
that	O
they	O
have	O
to	O
know	O
that	O
the	O
IntStream	B-api_mention
contains	O
char	O
values	O
represented	O
as	O
ints	O
and	O
that	O
casting	O
must	O
be	O
done	O
at	O
the	O
proper	O
place	O
.	O
This	O
is	O
doubly	O
confusing	O
because	O
there	O
are	O
overloaded	O
API	O
calls	O
like	O
PrintStream	B-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
PrintStream	B-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
that	O
differ	O
markedly	O
in	O
their	O
behavior	O
.	O
An	O
additional	O
point	O
of	O
confusion	O
possibly	O
arises	O
because	O
the	O
codePoints	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
also	O
returns	O
an	O
IntStream	B-api_mention
but	O
the	O
values	O
it	O
contains	O
are	O
quite	O
different	O
.	O
So	O
,	O
this	O
boils	O
down	O
to	O
choosing	O
pragmatically	O
among	O
several	O
alternatives	O
:	O
#	O
li	O
We	O
could	O
provide	O
no	O
primitive	O
specializations	O
,	O
resulting	O
in	O
a	O
simple	O
,	O
elegant	O
,	O
consistent	O
API	O
,	O
but	O
which	O
imposes	O
a	O
high	O
performance	O
and	O
GC	O
overhead	O
;	O
#	O
li	O
we	O
could	O
provide	O
a	O
complete	O
set	O
of	O
primitive	O
specializations	O
,	O
at	O
the	O
cost	O
of	O
cluttering	O
up	O
the	O
API	O
and	O
imposing	O
a	O
maintenance	O
burden	O
on	O
JDK	O
developers	O
;	O
or	O
#	O
li	O
we	O
could	O
provide	O
a	O
subset	O
of	O
primitive	O
specializations	O
,	O
giving	O
a	O
moderately	O
sized	O
,	O
high	O
performing	O
API	O
that	O
imposes	O
a	O
relatively	O
small	O
burden	O
on	O
callers	O
in	O
a	O
fairly	O
narrow	O
range	O
of	O
use	O
cases	O
(	O
char	O
processing	O
)	O
.	O
We	O
chose	O
the	O
last	O
one	O
.	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
21008747	O
[	O
Disclaimer	O
this	O
is	O
a	O
deliberately	O
opinionated	O
style	O
of	O
answer	O
as	O
I	O
feel	O
a	O
more	O
"	O
don	O
'	O
t	O
do	O
this	O
at	O
home	O
kids	O
"	O
answer	O
is	O
warranted	O
]	O
The	O
sin	O
is	O
the	O
line	O
field	O
.	B-api_mention
setAccessible	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
says	O
to	O
violate	O
the	O
public	O
api	O
by	O
allowing	O
access	O
to	O
a	O
private	O
field	O
.	O
Thats	O
a	O
giant	O
security	O
hole	O
which	O
can	O
be	O
locked	O
down	O
by	O
configuring	O
a	O
security	O
manager	O
.	O
The	O
phenomenon	O
in	O
the	O
question	O
are	O
implementation	O
details	O
which	O
you	O
would	O
never	O
see	O
when	O
not	O
using	O
that	O
dangerous	O
line	O
of	O
code	O
to	O
violate	O
the	O
access	O
modifiers	O
via	O
reflection	O
.	O
Clearly	O
two	O
(	O
normally	O
)	O
immutable	O
strings	O
can	O
share	O
the	O
same	O
char	O
array	O
.	O
Whether	O
a	O
substring	O
shares	O
the	O
same	O
array	O
depends	O
on	O
whether	O
it	O
can	O
and	O
whether	O
the	O
developer	O
thought	O
to	O
share	O
it	O
.	O
Normally	O
these	O
are	O
invisible	O
implementation	O
details	O
which	O
you	O
should	O
not	O
have	O
to	O
know	O
unless	O
you	O
shoot	O
the	O
access	O
modifier	O
through	O
the	O
head	O
with	O
that	O
line	O
of	O
code	O
.	O
It	O
is	O
simply	O
not	O
a	O
good	O
idea	O
to	O
rely	O
upon	O
such	O
details	O
which	O
cannot	O
be	O
experienced	O
without	O
violating	O
the	O
access	O
modifiers	O
using	O
reflection	O
.	O
The	O
owner	O
of	O
that	O
class	O
only	O
supports	O
the	O
normal	O
public	O
API	O
and	O
is	O
free	O
to	O
make	O
implementation	O
changes	O
in	O
the	O
future	O
.	O
Having	O
said	O
all	O
that	O
the	O
line	O
of	O
code	O
is	O
really	O
very	O
useful	O
when	O
you	O
have	O
a	O
gun	O
held	O
you	O
your	O
head	O
forcing	O
you	O
to	O
do	O
such	O
dangerous	O
things	O
.	O
Using	O
that	O
back	O
door	O
is	O
usually	O
a	O
code	O
smell	O
that	O
you	O
need	O
to	O
upgrade	O
to	O
better	O
library	O
code	O
where	O
you	O
don	O
'	O
t	O
have	O
to	O
sin	O
.	O
Another	O
common	O
use	O
of	O
that	O
dangerous	O
line	O
of	O
code	O
is	O
to	O
write	O
a	O
"	O
voodoo	O
framework	O
"	O
(	O
orm	O
,	O
injection	O
container	O
,	O
.	O
.	O
.	O
)	O
.	O
Many	O
folks	O
get	O
religious	O
about	O
such	O
frameworks	O
(	O
both	O
for	O
and	O
against	O
them	O
)	O
so	O
I	O
will	O
avoid	O
inviting	O
a	O
flame	O
war	O
by	O
saying	O
nothing	O
other	O
than	O
the	O
vast	O
majority	O
of	O
programmers	O
don	O
'	O
t	O
have	O
to	O
go	O
there	O
.	O
Question	O
-	O
28840047	O
,	O
answer	O
-	O
28840048	O
This	O
is	O
of	O
course	O
a	O
"	O
feature	O
"	O
.	O
The	O
ConcurrentHashMap	B-api_mention
.	I-api_mention
computeIfAbsent	I-api_mention
(	I-api_mention
)	I-api_mention
Javadoc	O
reads	O
:	O
#	O
blockquote	O
The	O
"	O
must	O
not	O
"	O
wording	O
is	O
a	O
clear	O
contract	O
,	O
which	O
my	O
algorithm	O
violated	O
,	O
although	O
not	O
for	O
the	O
same	O
concurrency	O
reasons	O
.	O
What	O
'	O
s	O
still	O
interesting	O
is	O
that	O
there	O
is	O
no	O
ConcurrentModificationException	B-api_mention
.	O
Instead	O
,	O
the	O
program	O
just	O
never	O
halts	O
-	O
which	O
still	O
is	O
a	O
rather	O
dangerous	O
bug	O
in	O
my	O
opinion	O
(	O
i	O
.	O
e	O
.	O
infinite	O
loops	O
.	O
or	O
:	O
anything	O
that	O
can	O
possibly	O
go	O
wrong	O
,	O
does	O
)	O
.	O
The	O
simplest	O
use	O
-	O
site	O
solution	O
for	O
this	O
concrete	O
problem	O
would	O
be	O
to	O
not	O
use	O
a	O
ConcurrentHashMap	B-api_mention
,	O
but	O
just	O
a	O
HashMap	B-api_mention
instead	O
:	O
static	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
cache	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Now	O
,	O
everything	O
works	O
fine	O
.	O
Note	O
:	O
The	O
HashMap	B-api_mention
.	I-api_mention
computeIfAbsent	I-api_mention
(	I-api_mention
)	I-api_mention
or	O
Map	B-api_mention
.	I-api_mention
computeIfAbsent	I-api_mention
(	I-api_mention
)	I-api_mention
Javadoc	O
don	O
'	O
t	O
forbid	O
such	O
recursive	O
computation	O
,	O
which	O
is	O
of	O
course	O
ridiculous	O
as	O
the	O
type	O
of	O
the	O
cache	O
is	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
not	O
ConcurrentHashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
It	O
is	O
very	O
dangerous	O
for	O
subtypes	O
to	O
drastically	O
re	O
-	O
define	O
super	O
type	O
contracts	O
(	O
Set	B-api_mention
vs	O
.	O
SortedSet	B-api_mention
is	O
greeting	O
)	O
.	O
It	O
should	O
thus	O
be	O
forbidden	O
also	O
in	O
super	O
types	O
,	O
to	O
perform	O
such	O
recursion	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777279	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
same	O
as	O
array1	O
=	O
=	O
array2	O
,	O
i	O
.	O
e	O
.	O
is	O
it	O
the	O
same	O
array	O
.	O
As	O
@	O
alf	O
points	O
out	O
it	O
'	O
s	O
not	O
what	O
most	O
people	O
expect	O
.	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
compares	O
the	O
contents	O
of	O
the	O
arrays	O
.	O
Similarly	O
array	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
not	O
be	O
very	O
useful	O
and	O
you	O
need	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
13195797	O
I	O
want	O
to	O
delete	O
all	O
files	O
inside	O
ABC	O
directory	O
.	O
When	O
I	O
tried	O
with	O
FileUtils	B-api_mention
.	I-api_mention
deleteDirectory	I-api_mention
(	I-api_mention
args	I-api_mention
)	O
;	O
it	O
also	O
deletes	O
folder	O
ABC	O
.	O
Is	O
there	O
a	O
one	O
liner	O
solution	O
where	O
I	O
can	O
delete	O
files	O
inside	O
directory	O
but	O
not	O
directory	O
?	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31924845	O
There	O
are	O
almost	O
no	O
good	O
reasons	O
for	O
not	O
using	O
Optional	B-api_mention
as	O
parameters	O
.	O
The	O
arguments	O
against	O
this	O
rely	O
on	O
arguments	O
from	O
authority	O
(	O
see	O
Brian	O
Goetz	O
-	O
his	O
argument	O
is	O
we	O
can	O
'	O
t	O
enforce	O
non	O
null	O
optionals	O
)	O
or	O
that	O
the	O
Optional	B-api_mention
arguments	O
may	O
be	O
null	O
(	O
essentially	O
the	O
same	O
argument	O
)	O
.	O
Of	O
course	O
,	O
any	O
reference	O
in	O
Java	O
can	O
be	O
null	O
,	O
we	O
need	O
to	O
encourage	O
rules	O
being	O
enforced	O
by	O
the	O
compiler	O
,	O
not	O
programmers	O
memory	O
(	O
which	O
is	O
problematic	O
and	O
does	O
not	O
scale	O
)	O
.	O
Functional	O
programming	O
languages	O
encourage	O
Optional	B-api_mention
parameters	O
.	O
One	O
of	O
the	O
best	O
ways	O
of	O
using	O
this	O
is	O
to	O
have	O
multiple	O
optional	O
parameters	O
and	O
using	O
liftM2	O
to	O
use	O
a	O
function	O
assuming	O
the	O
parameters	O
are	O
not	O
empty	O
and	O
returning	O
an	O
optional	O
(	O
see	O
#	O
a	O
)	O
.	O
Java	O
8	O
has	O
unfortunately	O
implemented	O
a	O
very	O
limited	O
library	O
supporting	O
optional	O
.	O
As	O
Java	O
programmers	O
we	O
should	O
only	O
be	O
using	O
null	O
to	O
interact	O
with	O
legacy	O
libraries	O
.	O
Question	O
-	O
30125296	O
,	O
answer	O
-	O
35035659	O
You	O
can	O
use	O
reduce	O
method	O
:	O
long	O
creditAmountSum	O
=	O
result	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
7935858	O
I	O
have	O
prepared	O
a	O
simple	O
code	O
snippet	O
in	O
order	O
to	O
separate	O
the	O
erroneous	O
portion	O
from	O
my	O
web	O
application	O
.	O
#	O
pre	O
I	O
have	O
tested	O
it	O
while	O
building	O
a	O
web	O
application	O
JSF	O
.	O
I	O
just	O
want	O
to	O
know	O
why	O
in	O
the	O
above	O
code	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
work	O
.	O
The	O
statement	O
,	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
displays	O
nothing	O
on	O
the	O
console	O
means	O
that	O
it	O
doesn	O
'	O
t	O
go	O
through	O
the	O
loop	O
.	O
When	O
I	O
change	O
the	O
argument	O
of	O
the	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
other	O
characters	O
,	O
It	O
works	O
just	O
fine	O
as	O
usual	O
.	O
What	O
might	O
be	O
the	O
problem	O
?	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262520	O
Basicly	O
,	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
an	O
executable	O
piece	O
of	O
code	O
that	O
actually	O
does	O
something	O
(	O
it	O
creates	O
a	O
new	O
String	B-api_mention
and	O
then	O
returns	O
it	O
)	O
.	O
The	O
returned	O
value	O
can	O
be	O
ignored	O
and	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
still	O
be	O
used	O
in	O
void	O
-	O
return	O
lambda	O
to	O
create	O
a	O
new	O
String	B-api_mention
.	O
However	O
,	O
StringLiteral	O
is	O
just	O
a	O
constant	O
that	O
doesn	O
'	O
t	O
do	O
anything	O
on	O
it	O
'	O
s	O
own	O
.	O
The	O
only	O
reasonable	O
thing	O
to	O
do	O
with	O
it	O
in	O
lambda	O
body	O
is	O
to	O
return	O
it	O
.	O
But	O
the	O
lambda	O
method	O
would	O
have	O
to	O
have	O
return	O
type	O
String	B-api_mention
or	O
Object	B-api_mention
,	O
but	O
it	O
returns	O
void	O
,	O
hence	O
the	O
String	B-api_mention
cannot	O
be	O
casted	O
to	O
void	O
error	O
.	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
15633542	O
Nice	O
question	O
.	O
I	O
'	O
ve	O
got	O
of	O
the	O
following	O
five	O
6	O
methods	O
to	O
do	O
it	O
.	O
#	O
pre	O
#	O
blockquote	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
in	O
turn	O
sets	O
the	O
value	O
char	O
array	O
.	O
#	O
pre	O
On	O
the	O
other	O
hand	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
the	O
following	O
package	O
private	O
constructor	O
.	O
#	O
pre	O
Source	O
code	O
from	O
String	B-api_mention
.	O
java	O
in	O
Java	O
8	O
source	O
code	O
#	O
blockquote	O
#	O
li	O
Java	O
:	O
:	O
How	O
to	O
convert	O
primitive	O
char	O
to	O
String	B-api_mention
in	O
Java	O
#	O
li	O
How	O
to	O
convert	O
Char	B-api_mention
to	O
String	B-api_mention
in	O
Java	O
with	O
Example	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
8641412	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
code	O
registers	O
the	O
Thread	B-api_mention
with	O
scheduler	O
and	O
the	O
scheduler	O
calls	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Also	O
,	O
Thread	B-api_mention
is	O
class	O
while	O
Runnable	B-api_mention
is	O
an	O
interface	O
.	O
Question	O
-	O
27430092	O
,	O
answer	O
-	O
27430172	O
A	O
possible	O
use	O
case	O
is	O
in	O
testing	O
primality	O
of	O
a	O
given	O
number	O
(	O
at	O
test	O
which	O
in	O
itself	O
has	O
many	O
uses	O
)	O
.	O
The	O
isProbablePrime	B-api_mention
algorithm	O
will	O
run	O
much	O
faster	O
than	O
an	O
exact	O
algorithm	O
,	O
so	O
if	O
the	O
number	O
fails	O
isProbablePrime	B-api_mention
,	O
then	O
one	O
need	O
not	O
go	O
to	O
the	O
expense	O
of	O
running	O
the	O
more	O
expensive	O
algorithm	O
.	O
Question	O
-	O
30581531	O
What	O
is	O
the	O
maximum	O
number	O
of	O
parameters	O
that	O
a	O
method	O
in	O
Java	O
can	O
have	O
and	O
why	O
?	O
I	O
am	O
using	O
Java	O
1	O
.	O
8	O
on	O
a	O
64	O
-	O
bit	O
Windows	O
system	O
.	O
All	O
the	O
answers	O
on	O
StackOverflow	O
about	O
this	O
say	O
that	O
the	O
technical	O
limit	O
is	O
255	O
parameters	O
without	O
specifying	O
why	O
.	O
To	O
be	O
precise	O
,	O
255	O
for	O
static	O
and	O
254	O
for	O
non	O
-	O
static	O
(	O
this	O
will	O
be	O
the	O
255th	O
in	O
this	O
case	O
)	O
methods	O
.	O
I	O
thought	O
this	O
could	O
be	O
specified	O
in	O
some	O
sort	O
of	O
specification	O
and	O
that	O
this	O
was	O
simply	O
a	O
statically	O
defined	O
maximum	O
number	O
of	O
parameters	O
allowed	O
.	O
But	O
this	O
was	O
only	O
valid	O
for	O
int	O
and	O
all	O
4	O
-	O
bytes	O
types	O
.	O
I	O
did	O
some	O
tests	O
with	O
long	O
parameters	O
,	O
and	O
I	O
was	O
only	O
able	O
to	O
declare	O
127	O
parameters	O
in	O
that	O
case	O
.	O
With	O
String	B-api_mention
parameters	O
,	O
the	O
allowed	O
number	O
i	O
deduced	O
from	O
testing	O
is	O
255	O
(	O
it	O
may	O
be	O
because	O
the	O
reference	O
size	O
is	O
4	O
bytes	O
in	O
Java	O
?	O
)	O
.	O
But	O
since	O
I	O
am	O
using	O
a	O
64	O
-	O
bit	O
system	O
,	O
references	O
size	O
should	O
be	O
8	O
bytes	O
wide	O
and	O
so	O
with	O
String	B-api_mention
parameters	O
the	O
maximum	O
allowed	O
number	O
should	O
be	O
127	O
,	O
similar	O
to	O
long	O
types	O
.	O
How	O
does	O
this	O
limit	O
is	O
exactly	O
applied	O
?	O
Does	O
the	O
limit	O
have	O
anything	O
to	O
do	O
with	O
the	O
stack	O
size	O
of	O
the	O
method	O
?	O
Note	O
:	O
I	O
am	O
not	O
really	O
going	O
to	O
use	O
these	O
many	O
parameters	O
in	O
any	O
method	O
,	O
but	O
this	O
question	O
is	O
only	O
to	O
clarify	O
the	O
exact	O
behavior	O
.	O
Question	O
-	O
4759570	O
,	O
answer	O
-	O
19459145	O
This	O
works	O
on	O
Windows	O
with	O
Cygwin	O
installed	O
:	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
12732422	O
I	O
'	O
m	O
trying	O
to	O
add	O
header	O
for	O
my	O
request	O
using	O
HttpUrlConnection	B-api_mention
but	O
the	O
method	O
setRequestProperty	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
doesn	O
'	O
t	O
seem	O
working	O
.	O
The	O
server	O
side	O
doesn	O
'	O
t	O
receive	O
any	O
request	O
with	O
my	O
header	O
.	O
Can	O
anyone	O
help	O
me	O
?	O
Thanks	O
in	O
advance	O
.	O
#	O
pre	O
Question	O
-	O
7693324	O
,	O
answer	O
-	O
7693341	O
To	O
convert	O
a	O
String	B-api_mention
to	O
a	O
Long	B-api_mention
(	O
object	O
)	O
,	O
use	O
Long	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
longValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
See	O
link	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271520	O
Try	O
using	O
this	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getCanonicalName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
this	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getSimpleName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
'	O
s	O
an	O
anonymous	O
class	O
,	O
use	O
this	O
.	B-api_mention
getClass	I-api_mention
.	I-api_mention
getSuperclass	I-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
7693324	O
I	O
got	O
a	O
simple	O
question	O
in	O
Java	O
:	O
How	O
can	O
I	O
convert	O
a	O
String	B-api_mention
that	O
was	O
obtained	O
by	O
Long	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
long	O
?	O
Question	O
-	O
12576156	O
,	O
answer	O
-	O
12576394	O
By	O
specifying	O
the	O
the	O
my	O
.	O
list	O
.	O
of	O
.	O
strings	O
=	O
ABC	O
,	O
CDE	O
,	O
EFG	O
in	O
.	O
properties	O
file	O
and	O
using	O
@	O
Value	O
(	O
args	O
)	O
private	O
String	O
[	O
]	O
myString	O
;	O
You	O
can	O
get	O
the	O
arrays	O
of	O
strings	O
.	O
And	O
using	O
CollectionUtils	B-api_mention
.	I-api_mention
addAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
get	O
the	O
list	O
of	O
strings	O
.	O
Question	O
-	O
18410035	O
Being	O
somewhat	O
new	O
to	O
the	O
Java	O
language	O
I	O
'	O
m	O
trying	O
to	O
familiarize	O
myself	O
with	O
all	O
the	O
ways	O
(	O
or	O
at	O
least	O
the	O
non	O
-	O
pathological	O
ones	O
)	O
that	O
one	O
might	O
iterate	O
through	O
a	O
list	O
(	O
or	O
perhaps	O
other	O
collections	O
)	O
and	O
the	O
advantages	O
or	O
disadvantages	O
of	O
each	O
.	O
Given	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
object	O
,	O
I	O
know	O
of	O
the	O
following	O
ways	O
to	O
loop	O
through	O
all	O
elements	O
:	O
Basic	O
for	O
loop	O
(	O
of	O
course	O
,	O
there	O
'	O
re	O
equivalent	O
while	O
/	O
do	O
while	O
loops	O
as	O
well	O
)	O
#	O
pre	O
Note	O
:	O
As	O
@	O
amarseillan	O
pointed	O
out	O
,	O
this	O
form	O
is	O
a	O
poor	O
choice	O
for	O
iterating	O
over	O
List	B-api_mention
s	O
because	O
the	O
actual	O
implementation	O
of	O
the	O
get	O
method	O
may	O
not	O
be	O
as	O
efficient	O
as	O
when	O
using	O
an	O
Iterator	B-api_mention
.	O
For	O
example	O
,	O
LinkedList	B-api_mention
implementations	O
must	O
traverse	O
all	O
of	O
the	O
elements	O
preceding	O
i	O
to	O
get	O
the	O
i	O
-	O
th	O
element	O
.	O
In	O
the	O
above	O
example	O
there	O
'	O
s	O
no	O
way	O
for	O
the	O
List	B-api_mention
implementation	O
to	O
"	O
save	O
its	O
place	O
"	O
to	O
make	O
future	O
iterations	O
more	O
efficient	O
.	O
For	O
an	O
ArrayList	B-api_mention
it	O
doesn	O
'	O
t	O
really	O
matter	O
because	O
the	O
complexity	O
/	O
cost	O
of	O
get	O
is	O
constant	O
time	O
(	O
O	O
(	O
1	O
)	O
)	O
whereas	O
for	O
a	O
LinkedList	B-api_mention
is	O
it	O
proportional	O
to	O
the	O
size	O
of	O
the	O
list	O
(	O
O	O
(	O
n	O
)	O
)	O
.	O
For	O
more	O
information	O
about	O
the	O
computational	O
complexity	O
of	O
the	O
built	O
-	O
in	O
Collections	B-api_mention
implementations	O
,	O
check	O
out	O
this	O
question	O
.	O
Enhanced	O
for	O
loop	O
(	O
nicely	O
explained	O
in	O
this	O
question	O
)	O
#	O
pre	O
Iterator	B-api_mention
#	O
pre	O
EDIT	O
:	O
Added	O
ListIterator	B-api_mention
ListIterator	I-api_mention
#	O
pre	O
EDIT	O
:	O
Added	O
"	O
functional	O
-	O
style	O
"	O
solution	O
(	O
thanks	O
Dave	O
Newton	O
)	O
Functional	O
Java	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
can	O
apply	O
a	O
transformation	O
function	O
for	O
e	O
EDIT	O
:	O
Added	O
map	O
method	O
from	O
Java	O
8	O
'	O
s	O
Stream	O
API	O
(	O
see	O
@	O
i	O
_	O
am	O
_	O
zero	O
'	O
s	O
answer	O
)	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
.	O
.	O
.	O
In	O
Java	O
8	O
collection	O
classes	O
that	O
implement	O
Iterable	B-api_mention
(	O
for	O
example	O
all	O
List	B-api_mention
s	O
)	O
now	O
have	O
a	O
forEach	B-api_mention
method	O
,	O
which	O
can	O
be	O
used	O
instead	O
of	O
the	O
for	O
loop	O
statement	O
demonstrated	O
above	O
.	O
(	O
Here	O
is	O
another	O
question	O
that	O
provides	O
a	O
good	O
comparison	O
.	O
)	O
#	O
pre	O
What	O
other	O
ways	O
are	O
there	O
,	O
if	O
any	O
?	O
I	O
feel	O
like	O
this	O
has	O
got	O
to	O
be	O
a	O
duplicate	O
,	O
but	O
I	O
haven	O
'	O
t	O
been	O
able	O
to	O
find	O
what	O
I	O
'	O
m	O
looking	O
for	O
,	O
so	O
I	O
apologize	O
for	O
this	O
question	O
potentially	O
being	O
redundant	O
.	O
(	O
BTW	O
,	O
my	O
interest	O
does	O
not	O
stem	O
at	O
all	O
from	O
a	O
desire	O
to	O
optimize	O
performance	O
;	O
I	O
just	O
want	O
to	O
know	O
what	O
forms	O
are	O
available	O
to	O
me	O
as	O
a	O
developer	O
.	O
)	O
EDIT	O
:	O
Moved	O
ListIterationExample	O
.	O
java	O
to	O
a	O
suggested	O
answer	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
36394016	O
Whenever	O
there	O
is	O
the	O
slightest	O
possibility	O
that	O
the	O
given	O
String	B-api_mention
does	O
not	O
contain	O
an	O
Integer	B-api_mention
,	O
you	O
have	O
to	O
handle	O
this	O
special	O
case	O
.	O
Sadly	O
,	O
the	O
standard	O
Java	O
methods	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
parseInt	I-api_mention
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
valueOf	I-api_mention
throw	O
a	O
NumberFormatException	B-api_mention
to	O
signal	O
this	O
special	O
case	O
.	O
Thus	O
,	O
you	O
have	O
to	O
use	O
exceptions	O
for	O
flow	O
control	O
,	O
which	O
is	O
generally	O
considered	O
bad	O
coding	O
style	O
.	O
In	O
my	O
opinion	O
,	O
this	O
special	O
case	O
should	O
be	O
handled	O
by	O
returning	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Since	O
Java	O
does	O
not	O
offer	O
such	O
a	O
method	O
,	O
I	O
use	O
the	O
following	O
wrapper	O
:	O
#	O
pre	O
Usage	O
:	O
#	O
pre	O
While	O
this	O
is	O
still	O
using	O
exceptions	O
for	O
flow	O
control	O
internally	O
,	O
the	O
usage	O
code	O
becomes	O
very	O
clean	O
.	O
Question	O
-	O
13659217	O
I	O
declare	O
an	O
enum	O
as	O
:	O
enum	O
Sex	O
{	O
MALE	O
,	O
FEMALE	O
}	O
;	O
And	O
then	O
,	O
iterate	O
enum	O
as	O
shown	O
below	O
:	O
#	O
pre	O
I	O
checked	O
the	O
Java	O
API	O
but	O
can	O
'	O
t	O
find	O
the	O
values	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
?	O
I	O
'	O
m	O
curious	O
as	O
to	O
where	O
this	O
method	O
comes	O
from	O
?	O
API	O
link	O
:	O
#	O
a	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
5868454	O
You	O
need	O
to	O
use	O
the	O
readLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
class	O
BufferedReader	B-api_mention
.	O
Create	O
a	O
new	O
object	O
from	O
that	O
class	O
and	O
operate	O
this	O
method	O
on	O
him	O
and	O
save	O
it	O
to	O
a	O
string	O
.	O
BufferReader	B-api_mention
API	O
Question	O
-	O
26375932	O
,	O
answer	O
-	O
26407637	O
It	O
is	O
an	O
integer	O
overflow	O
.	O
The	O
int	O
data	O
type	O
is	O
4	O
bytes	O
,	O
or	O
32	O
bits	O
.	O
Therefore	O
,	O
numbers	O
larger	O
than	O
2	O
^	O
(	O
32	O
-	O
1	O
)	O
-	O
1	O
(	O
2	O
,	O
147	O
,	O
483	O
,	O
647	O
)	O
cannot	O
be	O
stored	O
in	O
this	O
data	O
type	O
.	O
Your	O
numerical	O
values	O
will	O
be	O
incorrect	O
.	O
For	O
very	O
large	O
numbers	O
,	O
you	O
will	O
want	O
to	O
import	O
and	O
use	O
the	O
class	O
java	B-api_mention
.	I-api_mention
math	I-api_mention
.	I-api_mention
BigInteger	I-api_mention
:	O
#	O
pre	O
NOTE	O
:	O
For	O
numerical	O
values	O
that	O
are	O
still	O
too	O
large	O
for	O
the	O
int	O
data	O
type	O
,	O
but	O
small	O
enough	O
to	O
fit	O
within	O
8	O
bytes	O
(	O
absolute	O
value	O
less	O
than	O
or	O
equal	O
to	O
2	O
^	O
(	O
64	O
-	O
1	O
)	O
-	O
1	O
)	O
,	O
you	O
should	O
probably	O
use	O
the	O
long	O
primitive	O
.	O
HackerRank	O
'	O
s	O
practice	O
problems	O
(	O
www	O
.	O
hackerrank	O
.	O
com	O
)	O
,	O
such	O
as	O
the	O
Algorithms	O
practice	O
section	O
,	O
(	O
#	O
a	O
)	O
include	O
some	O
very	O
good	O
large	O
-	O
number	O
questions	O
that	O
give	O
good	O
practice	O
about	O
how	O
to	O
think	O
about	O
the	O
appropriate	O
data	O
type	O
to	O
use	O
.	O
Question	O
-	O
31202946	O
,	O
answer	O
-	O
31203218	O
You	O
can	O
of	O
course	O
choose	O
to	O
shoot	O
yourself	O
in	O
the	O
foot	O
,	O
but	O
that	O
doesn	O
'	O
t	O
mean	O
you	O
must	O
.	O
#	O
blockquote	O
Because	O
the	O
recommended	O
way	O
to	O
create	O
a	O
start	O
a	O
thread	O
is	O
not	O
to	O
subclass	O
Thread	B-api_mention
.	O
The	O
recommended	O
way	O
is	O
to	O
define	O
a	O
Runnable	B-api_mention
,	O
and	O
pass	O
it	O
as	O
argument	O
to	O
the	O
Thread	B-api_mention
constructor	O
:	O
#	O
pre	O
#	O
blockquote	O
Yes	O
and	O
no	O
.	O
You	O
can	O
'	O
t	O
replace	O
the	O
implementation	O
of	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
by	O
your	O
own	O
implementation	O
,	O
but	O
you	O
can	O
do	O
additional	O
things	O
in	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
if	O
you	O
want	O
:	O
#	O
pre	O
That	O
said	O
,	O
if	O
Java	O
was	O
redesigned	O
from	O
scratch	O
today	O
,	O
there	O
is	O
a	O
good	O
chance	O
the	O
design	O
would	O
be	O
different	O
.	O
Remember	O
that	O
this	O
class	O
dates	O
from	O
Java	O
1	O
.	O
0	O
,	O
and	O
is	O
still	O
backward	O
-	O
compatible	O
.	O
Question	O
-	O
19416644	O
,	O
answer	O
-	O
19416665	O
One	O
simple	O
way	O
is	O
to	O
use	O
Float	B-api_mention
.	I-api_mention
NaN	I-api_mention
:	O
#	O
pre	O
#	O
pre	O
You	O
can	O
do	O
the	O
same	O
with	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
.	O
From	O
JLS	O
§	O
15	O
.	O
21	O
.	O
1	O
.	O
Numerical	O
Equality	O
Operators	O
=	O
=	O
and	O
!	O
=	O
:	O
#	O
blockquote	O
Question	O
-	O
24914525	O
,	O
answer	O
-	O
24914586	O
std	O
:	O
:	O
list	O
in	O
C	O
+	O
+	O
is	O
a	O
linked	O
list	O
,	O
whereas	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
ArrayList	I-api_mention
is	O
an	O
array	O
.	O
Try	O
replacing	O
std	O
:	O
:	O
list	O
by	O
std	O
:	O
:	O
vector	O
.	O
Also	O
,	O
be	O
sure	O
to	O
compile	O
with	O
optimization	O
turned	O
on	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28513908	O
I	O
have	O
some	O
recollections	O
from	O
the	O
early	O
design	O
of	O
the	O
Streams	B-api_mention
API	O
that	O
might	O
shed	O
some	O
light	O
on	O
the	O
design	O
rationale	O
.	O
Back	O
in	O
2012	O
,	O
we	O
were	O
adding	O
lambdas	O
to	O
the	O
language	O
,	O
and	O
we	O
wanted	O
a	O
collections	O
-	O
oriented	O
or	O
"	O
bulk	O
data	O
"	O
set	O
of	O
operations	O
,	O
programmed	O
using	O
lambdas	O
,	O
that	O
would	O
facilitate	O
parallelism	O
.	O
The	O
idea	O
of	O
lazily	O
chaining	O
operations	O
together	O
was	O
well	O
established	O
by	O
this	O
point	O
.	O
We	O
also	O
didn	O
'	O
t	O
want	O
the	O
intermediate	O
operations	O
to	O
store	O
results	O
.	O
The	O
main	O
issues	O
we	O
needed	O
to	O
decide	O
were	O
what	O
the	O
objects	O
in	O
the	O
chain	O
looked	O
like	O
in	O
the	O
API	O
and	O
how	O
they	O
hooked	O
up	O
to	O
data	O
sources	O
.	O
The	O
sources	O
were	O
often	O
collections	O
,	O
but	O
we	O
also	O
wanted	O
to	O
support	O
data	O
coming	O
from	O
a	O
file	O
or	O
the	O
network	O
,	O
or	O
data	O
generated	O
on	O
-	O
the	O
-	O
fly	O
,	O
e	O
.	O
g	O
.	O
,	O
from	O
a	O
random	O
number	O
generator	O
.	O
There	O
were	O
many	O
influences	O
of	O
existing	O
work	O
on	O
the	O
design	O
.	O
Among	O
the	O
more	O
influential	O
were	O
Google	O
'	O
s	O
Guava	O
library	O
and	O
the	O
Scala	O
collections	O
library	O
.	O
(	O
If	O
anybody	O
is	O
surprised	O
about	O
the	O
influence	O
from	O
Guava	O
,	O
note	O
that	O
Kevin	O
Bourrillion	O
,	O
Guava	O
lead	O
developer	O
,	O
was	O
on	O
the	O
JSR	O
-	O
335	O
Lambda	O
expert	O
group	O
.	O
)	O
On	O
Scala	O
collections	O
,	O
we	O
found	O
this	O
talk	O
by	O
Martin	O
Odersky	O
to	O
be	O
of	O
particular	O
interest	O
:	O
Future	O
-	O
Proofing	O
Scala	O
Collections	O
:	O
from	O
Mutable	O
to	O
Persistent	O
to	O
Parallel	O
.	O
(	O
Stanford	O
EE380	O
,	O
2011	O
June	O
1	O
.	O
)	O
Our	O
prototype	O
design	O
at	O
the	O
time	O
was	O
based	O
around	O
Iterable	B-api_mention
.	O
The	O
familiar	O
operations	O
filter	B-api_mention
,	O
map	B-api_mention
,	O
and	O
so	O
forth	O
were	O
extension	O
(	O
default	O
)	O
methods	O
on	O
Iterable	B-api_mention
.	O
Calling	O
one	O
added	O
an	O
operation	O
to	O
the	O
chain	O
and	O
returned	O
another	O
Iterable	B-api_mention
.	O
A	O
terminal	O
operation	O
like	O
count	O
would	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
up	O
the	O
chain	O
to	O
the	O
source	O
,	O
and	O
the	O
operations	O
were	O
implemented	O
within	O
each	O
stage	O
'	O
s	O
Iterator	B-api_mention
.	O
Since	O
these	O
are	O
Iterables	O
,	O
you	O
can	O
call	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
more	O
than	O
once	O
.	O
What	O
should	O
happen	O
then	O
?	O
If	O
the	O
source	O
is	O
a	O
collection	O
,	O
this	O
mostly	O
works	O
fine	O
.	O
Collections	B-api_mention
are	O
Iterable	B-api_mention
,	O
and	O
each	O
call	O
to	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
produces	O
a	O
distinct	O
Iterator	B-api_mention
instance	O
that	O
is	O
independent	O
of	O
any	O
other	O
active	O
instances	O
,	O
and	O
each	O
traverses	O
the	O
collection	O
independently	O
.	O
Great	O
.	O
Now	O
what	O
if	O
the	O
source	O
is	O
one	O
-	O
shot	O
,	O
like	O
reading	O
lines	O
from	O
a	O
file	O
?	O
Maybe	O
the	O
first	O
Iterator	O
should	O
get	O
all	O
the	O
values	O
but	O
the	O
second	O
and	O
subsequent	O
ones	O
should	O
be	O
empty	O
.	O
Maybe	O
the	O
values	O
should	O
be	O
interleaved	O
among	O
the	O
Iterators	O
.	O
Or	O
maybe	O
each	O
Iterator	B-api_mention
should	O
get	O
all	O
the	O
same	O
values	O
.	O
Then	O
,	O
what	O
if	O
you	O
have	O
two	O
iterators	O
and	O
one	O
gets	O
farther	O
ahead	O
of	O
the	O
other	O
?	O
Somebody	O
will	O
have	O
to	O
buffer	O
up	O
the	O
values	O
in	O
the	O
second	O
Iterator	O
until	O
they	O
'	O
re	O
read	O
.	O
Worse	O
,	O
what	O
if	O
you	O
get	O
one	O
Iterator	B-api_mention
and	O
read	O
all	O
the	O
values	O
,	O
and	O
only	O
then	O
get	O
a	O
second	O
Iterator	B-api_mention
.	O
Where	O
do	O
the	O
values	O
come	O
from	O
now	O
?	O
Is	O
there	O
a	O
requirement	O
for	O
them	O
all	O
to	O
be	O
buffered	O
up	O
just	O
in	O
case	O
somebody	O
wants	O
a	O
second	O
Iterator	B-api_mention
?	O
Clearly	O
,	O
allowing	O
multiple	O
Iterators	O
over	O
a	O
one	O
-	O
shot	O
source	O
raises	O
a	O
lot	O
of	O
questions	O
.	O
We	O
didn	O
'	O
t	O
have	O
good	O
answers	O
for	O
them	O
.	O
We	O
wanted	O
consistent	O
,	O
predictable	O
behavior	O
for	O
what	O
happens	O
if	O
you	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
twice	O
.	O
This	O
pushed	O
us	O
toward	O
disallowing	O
multiple	O
traversals	O
,	O
making	O
the	O
pipelines	O
one	O
-	O
shot	O
.	O
We	O
also	O
observed	O
others	O
bumping	O
into	O
these	O
issues	O
.	O
In	O
the	O
JDK	O
,	O
most	O
Iterables	O
are	O
collections	O
or	O
collection	O
-	O
like	O
objects	O
,	O
which	O
allow	O
multiple	O
traversal	O
.	O
It	O
isn	O
'	O
t	O
specified	O
anywhere	O
,	O
but	O
there	O
seemed	O
to	O
be	O
an	O
unwritten	O
expectation	O
that	O
Iterables	O
allow	O
multiple	O
traversal	O
.	O
A	O
notable	O
exception	O
is	O
the	O
NIO	O
DirectoryStream	B-api_mention
interface	O
.	O
Its	O
specification	O
includes	O
this	O
interesting	O
warning	O
:	O
#	O
blockquote	O
[	O
bold	O
in	O
original	O
]	O
This	O
seemed	O
unusual	O
and	O
unpleasant	O
enough	O
that	O
we	O
didn	O
'	O
t	O
want	O
to	O
create	O
a	O
whole	O
bunch	O
of	O
new	O
Iterables	O
that	O
might	O
be	O
once	O
-	O
only	O
.	O
This	O
pushed	O
us	O
away	O
from	O
using	O
Iterable	B-api_mention
.	O
About	O
this	O
time	O
,	O
an	O
article	O
by	O
Bruce	O
Eckel	O
appeared	O
that	O
described	O
a	O
spot	O
of	O
trouble	O
he	O
'	O
d	O
had	O
with	O
Scala	O
.	O
He	O
'	O
d	O
written	O
this	O
code	O
:	O
#	O
pre	O
It	O
'	O
s	O
pretty	O
straightforward	O
.	O
It	O
parses	O
lines	O
of	O
text	O
into	O
Registrant	O
objects	O
and	O
prints	O
them	O
out	O
twice	O
.	O
Except	O
that	O
it	O
actually	O
only	O
prints	O
them	O
out	O
once	O
.	O
It	O
turns	O
out	O
that	O
he	O
thought	O
that	O
registrants	O
was	O
a	O
collection	O
,	O
when	O
in	O
fact	O
it	O
'	O
s	O
an	O
iterator	O
.	O
The	O
second	O
call	O
to	O
foreach	O
encounters	O
an	O
empty	O
iterator	O
,	O
from	O
which	O
all	O
values	O
have	O
been	O
exhausted	O
,	O
so	O
it	O
prints	O
nothing	O
.	O
This	O
kind	O
of	O
experience	O
convinced	O
us	O
that	O
it	O
was	O
very	O
important	O
to	O
have	O
clearly	O
predictable	O
results	O
if	O
multiple	O
traversal	O
is	O
attempted	O
.	O
It	O
also	O
highlighted	O
the	O
importance	O
of	O
distinguishing	O
between	O
lazy	O
pipeline	O
-	O
like	O
structures	O
from	O
actual	O
collections	O
that	O
store	O
data	O
.	O
This	O
in	O
turn	O
drove	O
the	O
separation	O
of	O
the	O
lazy	O
pipeline	O
operations	O
into	O
the	O
new	O
Stream	B-api_mention
interface	O
and	O
keeping	O
only	O
eager	O
,	O
mutative	O
operations	O
directly	O
on	O
Collections	B-api_mention
.	O
Brian	O
Goetz	O
has	O
explained	O
the	O
rationale	O
for	O
that	O
.	O
What	O
about	O
allowing	O
multiple	O
traversal	O
for	O
collection	O
-	O
based	O
pipelines	O
but	O
disallowing	O
it	O
for	O
non	O
-	O
collection	O
-	O
based	O
pipelines	O
?	O
It	O
'	O
s	O
inconsistent	O
,	O
but	O
it	O
'	O
s	O
sensible	O
.	O
If	O
you	O
'	O
re	O
reading	O
values	O
from	O
the	O
network	O
,	O
of	O
course	O
you	O
can	O
'	O
t	O
traverse	O
them	O
again	O
.	O
If	O
you	O
want	O
to	O
traverse	O
them	O
multiple	O
times	O
,	O
you	O
have	O
to	O
pull	O
them	O
into	O
a	O
collection	O
explicitly	O
.	O
But	O
let	O
'	O
s	O
explore	O
allowing	O
multiple	O
traversal	O
from	O
collections	O
-	O
based	O
pipelines	O
.	O
Let	O
'	O
s	O
say	O
you	O
did	O
this	O
:	O
#	O
pre	O
(	O
The	O
into	O
operation	O
is	O
now	O
spelled	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
)	O
If	O
source	O
is	O
a	O
collection	O
,	O
then	O
the	O
first	O
into	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
will	O
create	O
a	O
chain	O
of	O
Iterators	B-api_mention
back	O
to	O
the	O
source	O
,	O
execute	O
the	O
pipeline	O
operations	O
,	O
and	O
send	O
the	O
results	O
into	O
the	O
destination	O
.	O
The	O
second	O
call	O
to	O
into	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
create	O
another	O
chain	O
of	O
Iterators	O
,	O
and	O
execute	O
the	O
pipeline	O
operations	O
again	O
.	O
This	O
isn	O
'	O
t	O
obviously	O
wrong	O
but	O
it	O
does	O
have	O
the	O
effect	O
of	O
performing	O
all	O
the	O
filter	O
and	O
map	O
operations	O
a	O
second	O
time	O
for	O
each	O
element	O
.	O
I	O
think	O
many	O
programmers	O
would	O
have	O
been	O
surprised	O
by	O
this	O
behavior	O
.	O
As	O
I	O
mentioned	O
above	O
,	O
we	O
had	O
been	O
talking	O
to	O
the	O
Guava	O
developers	O
.	O
One	O
of	O
the	O
cool	O
things	O
they	O
have	O
is	O
an	O
Idea	O
Graveyard	O
where	O
they	O
describe	O
features	O
that	O
they	O
decided	O
not	O
to	O
implement	O
along	O
with	O
the	O
reasons	O
.	O
The	O
idea	O
of	O
lazy	O
collections	O
sounds	O
pretty	O
cool	O
,	O
but	O
here	O
'	O
s	O
what	O
they	O
have	O
to	O
say	O
about	O
it	O
.	O
Consider	O
a	O
List	B-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
operation	O
that	O
returns	O
a	O
List	B-api_mention
:	O
#	O
blockquote	O
To	O
take	O
a	O
specific	O
example	O
,	O
what	O
'	O
s	O
the	O
cost	O
of	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
List	B-api_mention
?	O
For	O
commonly	O
used	O
classes	O
like	O
ArrayList	B-api_mention
,	O
they	O
'	O
re	O
O	O
(	O
1	O
)	O
.	O
But	O
if	O
you	O
call	O
one	O
of	O
these	O
on	O
a	O
lazily	O
-	O
filtered	O
list	O
,	O
it	O
has	O
to	O
run	O
the	O
filter	O
over	O
the	O
backing	O
list	O
,	O
and	O
all	O
of	O
a	O
sudden	O
these	O
operations	O
are	O
O	O
(	O
n	O
)	O
.	O
Worse	O
,	O
it	O
has	O
to	O
traverse	O
the	O
backing	O
list	O
on	O
every	O
operation	O
.	O
This	O
seemed	O
to	O
us	O
to	O
be	O
too	O
much	O
laziness	O
.	O
It	O
'	O
s	O
one	O
thing	O
to	O
set	O
up	O
some	O
operations	O
and	O
defer	O
actual	O
execution	O
until	O
you	O
so	O
"	O
Go	O
"	O
.	O
It	O
'	O
s	O
another	O
to	O
set	O
things	O
up	O
in	O
such	O
a	O
way	O
that	O
hides	O
a	O
potentially	O
large	O
amount	O
of	O
recomputation	O
.	O
In	O
proposing	O
to	O
disallow	O
non	O
-	O
linear	O
or	O
"	O
no	O
-	O
reuse	O
"	O
streams	O
,	O
Paul	O
Sandoz	O
described	O
the	O
potential	O
consequences	O
of	O
allowing	O
them	O
as	O
giving	O
rise	O
to	O
"	O
unexpected	O
or	O
confusing	O
results	O
.	O
"	O
He	O
also	O
mentioned	O
that	O
parallel	O
execution	O
would	O
make	O
things	O
even	O
trickier	O
.	O
Finally	O
,	O
I	O
'	O
d	O
add	O
that	O
a	O
pipeline	O
operation	O
with	O
side	O
effects	O
would	O
lead	O
to	O
difficult	O
and	O
obscure	O
bugs	O
if	O
the	O
operation	O
were	O
unexpectedly	O
executed	O
multiple	O
times	O
,	O
or	O
at	O
least	O
a	O
different	O
number	O
of	O
times	O
than	O
the	O
programmer	O
expected	O
.	O
(	O
But	O
Java	O
programmers	O
don	O
'	O
t	O
write	O
lambda	O
expressions	O
with	O
side	O
effects	O
,	O
do	O
they	O
?	O
DO	O
THEY	O
?	O
?	O
)	O
So	O
that	O
'	O
s	O
the	O
basic	O
rationale	O
for	O
the	O
Java	O
8	O
Streams	O
API	O
design	O
that	O
allows	O
one	O
-	O
shot	O
traversal	O
and	O
that	O
requires	O
a	O
strictly	O
linear	O
(	O
no	O
branching	O
)	O
pipeline	O
.	O
It	O
provides	O
consistent	O
behavior	O
across	O
multiple	O
different	O
stream	O
sources	O
,	O
it	O
clearly	O
separates	O
lazy	O
from	O
eager	O
operations	O
,	O
and	O
it	O
provides	O
a	O
straightforward	O
execution	O
model	O
.	O
With	O
regard	O
to	O
IEnumerable	O
,	O
I	O
am	O
far	O
from	O
an	O
expert	O
on	O
C	O
#	O
and	O
.	O
NET	O
,	O
so	O
I	O
would	O
appreciate	O
being	O
corrected	O
(	O
gently	O
)	O
if	O
I	O
draw	O
any	O
incorrect	O
conclusions	O
.	O
It	O
does	O
appear	O
,	O
however	O
,	O
that	O
IEnumerable	O
permits	O
multiple	O
traversal	O
to	O
behave	O
differently	O
with	O
different	O
sources	O
;	O
and	O
it	O
permits	O
a	O
branching	O
structure	O
of	O
nested	O
IEnumerable	O
operations	O
,	O
which	O
may	O
result	O
in	O
some	O
significant	O
recomputation	O
.	O
While	O
I	O
appreciate	O
that	O
different	O
systems	O
make	O
different	O
tradeoffs	O
,	O
these	O
are	O
two	O
characteristics	O
that	O
we	O
sought	O
to	O
avoid	O
in	O
the	O
design	O
of	O
the	O
Java	O
8	O
Streams	O
API	O
.	O
The	O
quicksort	O
example	O
given	O
by	O
the	O
OP	O
is	O
interesting	O
,	O
puzzling	O
,	O
and	O
I	O
'	O
m	O
sorry	O
to	O
say	O
,	O
somewhat	O
horrifying	O
.	O
Calling	O
QuickSort	O
takes	O
an	O
IEnumerable	O
and	O
returns	O
an	O
IEnumerable	O
,	O
so	O
no	O
sorting	O
is	O
actually	O
done	O
until	O
the	O
final	O
IEnumerable	O
is	O
traversed	O
.	O
What	O
the	O
call	O
seems	O
to	O
do	O
,	O
though	O
,	O
is	O
build	O
up	O
a	O
tree	O
structure	O
of	O
IEnumerables	O
that	O
reflects	O
the	O
partitioning	O
that	O
quicksort	O
would	O
do	O
,	O
without	O
actually	O
doing	O
it	O
.	O
(	O
This	O
is	O
lazy	O
computation	O
,	O
after	O
all	O
.	O
)	O
If	O
the	O
source	O
has	O
N	O
elements	O
,	O
the	O
tree	O
will	O
be	O
N	O
elements	O
wide	O
at	O
its	O
widest	O
,	O
and	O
it	O
will	O
be	O
lg	O
(	O
N	O
)	O
levels	O
deep	O
.	O
It	O
seems	O
to	O
me	O
-	O
-	O
and	O
once	O
again	O
,	O
I	O
'	O
m	O
not	O
a	O
C	O
#	O
or	O
.	O
NET	O
expert	O
-	O
-	O
that	O
this	O
will	O
cause	O
certain	O
innocuous	O
-	O
looking	O
calls	O
,	O
such	O
as	O
pivot	O
selection	O
via	O
ints	O
.	B-api_mention
First	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
to	O
be	O
more	O
expensive	O
than	O
they	O
look	O
.	O
At	O
the	O
first	O
level	O
,	O
of	O
course	O
,	O
it	O
'	O
s	O
O	O
(	O
1	O
)	O
.	O
But	O
consider	O
a	O
partition	O
deep	O
in	O
the	O
tree	O
,	O
at	O
the	O
right	O
-	O
hand	O
edge	O
.	O
To	O
compute	O
the	O
first	O
element	O
of	O
this	O
partition	O
,	O
the	O
entire	O
source	O
has	O
to	O
be	O
traversed	O
,	O
an	O
O	O
(	O
N	O
)	O
operation	O
.	O
But	O
since	O
the	O
partitions	O
above	O
are	O
lazy	O
,	O
they	O
must	O
be	O
recomputed	O
,	O
requiring	O
O	O
(	O
lg	O
N	O
)	O
comparisons	O
.	O
So	O
selecting	O
the	O
pivot	O
would	O
be	O
an	O
O	O
(	O
N	O
lg	O
N	O
)	O
operation	O
,	O
which	O
is	O
as	O
expensive	O
as	O
an	O
entire	O
sort	O
.	O
But	O
we	O
don	O
'	O
t	O
actually	O
sort	O
until	O
we	O
traverse	O
the	O
returned	O
IEnumerable	O
.	O
In	O
the	O
standard	O
quicksort	O
algorithm	O
,	O
each	O
level	O
of	O
partitioning	O
doubles	O
the	O
number	O
of	O
partitions	O
.	O
Each	O
partition	O
is	O
only	O
half	O
the	O
size	O
,	O
so	O
each	O
level	O
remains	O
at	O
O	O
(	O
N	O
)	O
complexity	O
.	O
The	O
tree	O
of	O
partitions	O
is	O
O	O
(	O
lg	O
N	O
)	O
high	O
,	O
so	O
the	O
total	O
work	O
is	O
O	O
(	O
N	O
lg	O
N	O
)	O
.	O
With	O
the	O
tree	O
of	O
lazy	O
IEnumerables	O
,	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
there	O
are	O
N	O
partitions	O
.	O
Computing	O
each	O
partition	O
requires	O
a	O
traversal	O
of	O
N	O
elements	O
,	O
each	O
of	O
which	O
requires	O
lg	O
(	O
N	O
)	O
comparisons	O
up	O
the	O
tree	O
.	O
To	O
compute	O
all	O
the	O
partitions	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
,	O
then	O
,	O
requires	O
O	O
(	O
N	O
^	O
2	O
lg	O
N	O
)	O
comparisons	O
.	O
(	O
Is	O
this	O
right	O
?	O
I	O
can	O
hardly	O
believe	O
this	O
.	O
Somebody	O
please	O
check	O
this	O
for	O
me	O
.	O
)	O
In	O
any	O
case	O
,	O
it	O
is	O
indeed	O
cool	O
that	O
IEnumerable	O
can	O
be	O
used	O
this	O
way	O
to	O
build	O
up	O
complicated	O
structures	O
of	O
computation	O
.	O
But	O
if	O
it	O
does	O
increase	O
the	O
computational	O
complexity	O
as	O
much	O
as	O
I	O
think	O
it	O
does	O
,	O
it	O
would	O
seem	O
that	O
programming	O
this	O
way	O
is	O
something	O
that	O
should	O
be	O
avoided	O
unless	O
one	O
is	O
extremely	O
careful	O
.	O
Question	O
-	O
32164385	O
,	O
answer	O
-	O
32167166	O
#	O
blockquote	O
I	O
must	O
agree	O
with	O
other	O
answers	O
that	O
there	O
is	O
no	O
direct	O
way	O
to	O
determine	O
that	O
method	O
will	O
modify	O
your	O
object	O
or	O
not	O
and	O
yes	O
to	O
make	O
sure	O
that	O
method	O
can	O
not	O
modify	O
your	O
Object	B-api_mention
you	O
all	O
have	O
to	O
do	O
it	O
is	O
from	O
your	O
side	O
.	O
#	O
blockquote	O
Here	O
the	O
method	O
name	O
comes	O
to	O
the	O
scene	O
.	O
Moving	O
ahead	O
with	O
the	O
naming	O
convention	O
of	O
method	O
we	O
have	O
to	O
take	O
a	O
look	O
at	O
some	O
method	O
declarations	O
which	O
clearly	O
convince	O
you	O
that	O
your	O
Object	B-api_mention
will	O
not	O
be	O
changed	O
at	O
all	O
.	O
For	O
example	O
,	O
You	O
know	O
that	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
will	O
not	O
change	O
your	O
actual	O
array	O
,	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
change	O
your	O
boo	O
Method	O
names	O
are	O
real	O
weapons	O
to	O
provide	O
as	O
much	O
information	O
as	O
possible	O
to	O
the	O
method	O
user	O
.	O
(	O
Yes	O
!	O
it	O
'	O
s	O
always	O
not	O
possible	O
but	O
quite	O
a	O
good	O
practice	O
to	O
follow	O
.	O
)	O
Let	O
'	O
s	O
consider	O
it	O
in	O
your	O
case	O
that	O
say	O
printBoo	O
will	O
only	O
print	O
,	O
copyBoo	O
will	O
only	O
copy	O
,	O
clearBoo	O
will	O
reset	O
all	O
attributes	O
,	O
checkAndCreateNewBoo	O
will	O
check	O
your	O
boo	O
Object	B-api_mention
and	O
create	O
new	O
if	O
required	O
.	O
So	O
,	O
ultimately	O
if	O
we	O
can	O
use	O
them	O
in	O
a	O
proper	O
way	O
caller	O
can	O
be	O
assured	O
with	O
the	O
fact	O
that	O
Object	B-api_mention
will	O
remain	O
the	O
same	O
after	O
calling	O
the	O
method	O
.	O
Question	O
-	O
22725537	O
,	O
answer	O
-	O
36334855	O
As	O
my	O
previous	O
answer	O
appeared	O
not	O
to	O
be	O
very	O
popular	O
,	O
I	O
will	O
give	O
this	O
another	O
go	O
.	O
A	O
short	O
answer	O
:	O
You	O
are	O
mostly	O
on	O
a	O
right	O
track	O
.	O
The	O
shortest	O
code	O
to	O
get	O
to	O
your	O
desired	O
output	O
I	O
could	O
come	O
up	O
with	O
is	O
this	O
:	O
things	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
will	O
fit	O
all	O
your	O
requirements	O
:	O
#	O
li	O
It	O
will	O
find	O
first	O
response	O
that	O
resolves	O
to	O
a	O
nonempty	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
#	O
li	O
It	O
calls	O
this	B-api_mention
:	I-api_mention
:	I-api_mention
resolve	I-api_mention
lazily	O
as	O
needed	O
#	O
li	O
this	B-api_mention
:	I-api_mention
:	I-api_mention
resolve	I-api_mention
will	O
not	O
be	O
called	O
after	O
first	O
non	O
-	O
empty	O
result	O
#	O
li	O
It	O
will	O
return	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Longer	O
answer	O
The	O
only	O
modification	O
compared	O
to	O
OP	O
initial	O
version	O
was	O
that	O
I	O
removed	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
call	O
to	O
.	B-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
added	O
.	B-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
the	O
last	O
call	O
in	O
the	O
chain	O
.	O
This	O
has	O
a	O
nice	O
effect	O
of	O
getting	O
rid	O
of	O
the	O
double	O
-	O
Optional	O
,	O
whenever	O
stream	O
finds	O
an	O
actual	O
result	O
.	O
You	O
can	O
'	O
t	O
really	O
go	O
any	O
shorter	O
than	O
this	O
in	O
Java	O
.	O
The	O
alternative	O
snippet	O
of	O
code	O
using	O
the	O
more	O
conventional	O
for	O
loop	O
technique	O
is	O
going	O
to	O
be	O
about	O
same	O
number	O
of	O
lines	O
of	O
code	O
and	O
have	O
more	O
or	O
less	O
same	O
order	O
and	O
number	O
of	O
operations	O
you	O
need	O
to	O
perform	O
:	O
#	O
li	O
Calling	O
this	O
.	B-api_mention
resolve	I-api_mention
,	O
#	O
li	O
filtering	O
based	O
on	O
Optional	B-api_mention
.	I-api_mention
isPresent	I-api_mention
#	O
li	O
returning	O
the	O
result	O
and	O
#	O
li	O
some	O
way	O
of	O
dealing	O
with	O
negative	O
result	O
(	O
when	O
nothing	O
was	O
found	O
)	O
Just	O
to	O
prove	O
that	O
my	O
solution	O
works	O
as	O
advertised	O
,	O
I	O
wrote	O
a	O
small	O
test	O
program	O
:	O
#	O
pre	O
(	O
It	O
does	O
have	O
few	O
extra	O
lines	O
for	O
debugging	O
and	O
verifying	O
that	O
only	O
as	O
many	O
calls	O
to	O
resolve	O
as	O
needed	O
.	O
.	O
.	O
)	O
Executing	O
this	O
on	O
a	O
command	O
line	O
,	O
I	O
got	O
the	O
following	O
results	O
:	O
#	O
pre	O
Question	O
-	O
6094575	O
,	O
answer	O
-	O
6094600	O
You	O
can	O
use	O
Class	B-api_mention
.	I-api_mention
forName	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
get	O
a	O
Class	B-api_mention
object	O
of	O
the	O
desired	O
class	O
.	O
Then	O
use	O
getConstructor	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
find	O
the	O
desired	O
Constructor	B-api_mention
object	O
.	O
Finally	O
,	O
call	O
newInstance	B-api_mention
(	I-api_mention
)	I-api_mention
on	O
that	O
object	O
to	O
get	O
your	O
new	O
instance	O
.	O
#	O
pre	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
29784337	O
The	O
other	O
answers	O
all	O
use	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
an	O
unmodifiable	O
list	O
(	O
an	O
UnsupportedOperationException	B-api_mention
is	O
thrown	O
if	O
you	O
try	O
to	O
add	O
or	O
remove	O
an	O
element	O
)	O
.	O
To	O
get	O
a	O
mutable	O
list	O
you	O
can	O
wrap	O
the	O
returned	O
list	O
in	O
a	O
new	O
ArrayList	B-api_mention
as	O
a	O
couple	O
of	O
answers	O
point	O
out	O
,	O
but	O
a	O
cleaner	O
solution	O
is	O
to	O
use	O
Guava	O
'	O
s	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
available	O
since	O
at	O
least	O
Guava	O
10	O
,	O
released	O
in	O
2011	O
)	O
.	O
For	O
example	O
:	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31188818	O
Ironically	O
default	O
methods	O
in	O
interfaces	O
were	O
introduced	O
to	O
allow	O
existing	O
libraries	O
using	O
those	O
interfaces	O
not	O
to	O
break	O
,	O
while	O
introducing	O
massive	O
new	O
functionality	O
in	O
the	O
interfaces	O
.	O
(	O
backward	O
compatibility	O
.	O
)	O
Conflicts	O
like	O
that	O
sort	O
method	O
might	O
arise	O
.	O
Something	O
to	O
pay	O
for	O
the	O
extra	O
functionality	O
.	O
In	O
your	O
case	O
also	O
something	O
to	O
investigate	O
(	O
should	O
new	O
functionality	O
be	O
used	O
instead	O
?	O
)	O
.	O
Java	O
forward	O
compatibility	O
breaks	O
are	O
little	O
,	O
more	O
in	O
its	O
typing	O
system	O
,	O
which	O
was	O
constantly	O
enlarged	O
.	O
First	O
with	O
generic	O
types	O
and	O
now	O
with	O
inferred	O
types	O
from	O
functional	O
interfaces	O
.	O
From	O
version	O
to	O
version	O
and	O
from	O
compiler	O
to	O
compiler	O
there	O
were	O
slight	O
differences	O
.	O
Question	O
-	O
6608795	O
,	O
answer	O
-	O
22327270	O
I	O
tried	O
reading	O
from	O
input1	O
.	O
txt	O
which	O
was	O
inside	O
one	O
of	O
my	O
packages	O
together	O
with	O
the	O
class	O
which	O
was	O
trying	O
to	O
read	O
it	O
.	O
The	O
following	O
works	O
:	O
#	O
pre	O
The	O
most	O
important	O
part	O
was	O
to	O
call	O
getPath	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
you	O
want	O
the	O
correct	O
path	O
name	O
in	O
String	B-api_mention
format	O
.	O
DO	O
NOT	O
USE	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
it	O
will	O
add	O
some	O
extra	O
formatting	O
text	O
which	O
will	O
TOTALLY	O
MESS	O
UP	O
the	O
fileName	O
(	O
you	O
can	O
try	O
it	O
and	O
see	O
the	O
print	O
out	O
)	O
.	O
Spent	O
2	O
hours	O
debugging	O
this	O
.	O
.	O
.	O
:	O
(	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16635489	O
The	O
advantage	O
comes	O
into	O
account	O
when	O
the	O
operations	O
can	O
be	O
executed	O
in	O
parallel	O
.	O
(	O
See	O
#	O
a	O
-	O
the	O
section	O
about	O
internal	O
and	O
external	O
iteration	O
)	O
#	O
li	O
The	O
main	O
advantage	O
from	O
my	O
point	O
of	O
view	O
is	O
that	O
the	O
implementation	O
of	O
what	O
is	O
to	O
be	O
done	O
within	O
the	O
loop	O
can	O
be	O
defined	O
without	O
having	O
to	O
decide	O
if	O
it	O
will	O
be	O
executed	O
in	O
parallel	O
or	O
sequential	O
#	O
li	O
If	O
you	O
want	O
your	O
loop	O
to	O
be	O
executed	O
in	O
parallel	O
you	O
could	O
simply	O
write	O
joins	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
will	O
have	O
to	O
write	O
some	O
extra	O
code	O
for	O
thread	O
handling	O
etc	O
.	O
Note	O
:	O
for	O
my	O
answer	O
I	O
assumed	O
joins	O
implementing	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
interface	O
.	O
If	O
joins	O
implements	O
only	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Iterable	I-api_mention
interface	O
this	O
is	O
no	O
longer	O
true	O
.	O
Question	O
-	O
7348711	O
Which	O
of	O
the	O
following	O
is	O
the	O
best	O
and	O
most	O
portable	O
way	O
to	O
get	O
the	O
hostname	O
of	O
the	O
current	O
computer	O
in	O
Java	O
?	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
vs	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
20129762	O
In	O
Java	O
8	O
we	O
have	O
the	O
class	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
curiously	O
have	O
a	O
method	O
Iterator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
iterator	O
(	O
args	O
)	O
So	O
you	O
would	O
expect	O
it	O
to	O
implement	O
interface	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
requires	O
exactly	O
this	O
method	O
,	O
but	O
that	O
'	O
s	O
not	O
the	O
case	O
.	O
When	O
I	O
want	O
to	O
iterate	O
over	O
a	O
Stream	B-api_mention
using	O
a	O
foreach	O
loop	O
,	O
I	O
have	O
to	O
do	O
something	O
like	O
#	O
pre	O
Am	O
I	O
missing	O
something	O
here	O
?	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
15357940	O
Or	O
simply	O
mystring	O
.	B-api_mention
matches	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
it	O
would	O
return	O
true	O
for	O
numbers	O
larger	O
than	O
an	O
int	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32745612	O
For	O
me	O
,	O
the	O
reason	O
is	O
a	O
likely	O
performance	O
inprovement	O
,	O
at	O
a	O
negligible	O
cost	O
in	O
terms	O
of	O
code	O
clarity	O
.	O
Note	O
that	O
the	O
implementation	O
of	O
the	O
fill	O
method	O
is	O
trivial	O
,	O
a	O
simple	O
for	O
-	O
loop	O
setting	O
each	O
array	O
element	O
to	O
null	O
.	O
So	O
,	O
replacing	O
a	O
call	O
to	O
it	O
with	O
the	O
actual	O
implementation	O
does	O
not	O
cause	O
any	O
significant	O
degradation	O
in	O
the	O
clarity	O
/	O
conciseness	O
of	O
the	O
caller	O
method	O
.	O
The	O
potential	O
performance	O
benefits	O
are	O
not	O
so	O
insignificant	O
,	O
if	O
you	O
consider	O
everything	O
that	O
is	O
involved	O
:	O
#	O
li	O
There	O
will	O
be	O
no	O
need	O
for	O
the	O
JVM	O
to	O
resolve	O
the	O
Arrays	B-api_mention
class	O
,	O
plus	O
loading	O
and	O
initializing	O
it	O
if	O
needed	O
.	O
This	O
is	O
a	O
non	O
-	O
trivial	O
process	O
where	O
the	O
JVM	O
performs	O
several	O
steps	O
.	O
Firstly	O
,	O
it	O
checks	O
the	O
class	O
loader	O
to	O
see	O
if	O
the	O
class	O
is	O
already	O
loaded	O
,	O
and	O
this	O
happens	O
every	O
time	O
a	O
method	O
is	O
called	O
;	O
there	O
are	O
optimizations	O
involved	O
here	O
,	O
of	O
course	O
,	O
but	O
it	O
still	O
takes	O
some	O
effort	O
.	O
If	O
the	O
class	O
is	O
not	O
loaded	O
,	O
the	O
JVM	O
will	O
need	O
to	O
go	O
through	O
the	O
expensive	O
process	O
of	O
loading	O
it	O
,	O
verifying	O
the	O
bytecode	O
,	O
resolving	O
other	O
necessary	O
dependencies	O
,	O
and	O
finally	O
performing	O
static	O
initialization	O
of	O
the	O
class	O
(	O
which	O
can	O
be	O
arbitrarily	O
expensive	O
)	O
.	O
Given	O
that	O
HashMap	B-api_mention
is	O
such	O
a	O
core	O
class	O
,	O
and	O
that	O
Arrays	B-api_mention
is	O
such	O
a	O
huge	O
class	O
(	O
3600	O
+	O
lines	O
)	O
,	O
avoiding	O
these	O
costs	O
may	O
add	O
up	O
to	O
noticeable	O
savings	O
.	O
#	O
li	O
Since	O
there	O
is	O
no	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
call	O
,	O
the	O
JVM	O
won	O
'	O
t	O
have	O
to	O
decide	O
whether	O
/	O
when	O
to	O
inline	O
the	O
method	O
into	O
the	O
caller	O
'	O
s	O
body	O
.	O
Since	O
HashMap	B-api_mention
#	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
tends	O
to	O
get	O
called	O
a	O
lot	O
,	O
the	O
JVM	O
will	O
eventually	O
perform	O
the	O
inlining	O
,	O
which	O
requires	O
JIT	O
recompilation	O
of	O
the	O
clear	O
method	O
.	O
With	O
no	O
method	O
calls	O
,	O
clear	O
will	O
always	O
run	O
at	O
top	O
-	O
speed	O
(	O
once	O
initially	O
JITed	O
)	O
.	O
Another	O
benefit	O
of	O
no	O
longer	O
calling	O
methods	O
in	O
Arrays	B-api_mention
is	O
that	O
it	O
simplifies	O
the	O
dependency	O
graph	O
inside	O
the	O
java	O
.	O
util	O
package	O
,	O
since	O
one	O
dependency	O
is	O
removed	O
.	O
Question	O
-	O
7935858	O
,	O
answer	O
-	O
7935873	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
.	I-api_mention
split	I-api_mention
splits	O
on	O
regular	O
expressions	O
,	O
and	O
.	O
in	O
a	O
regular	O
expression	O
means	O
"	O
any	O
character	O
"	O
.	O
Try	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
12862659	O
,	O
answer	O
-	O
12862662	O
use	O
the	O
second	O
argument	O
on	O
the	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
method	O
,	O
as	O
in	O
:	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
someMethod	O
(	O
args	O
)	O
Question	O
-	O
8189466	O
,	O
answer	O
-	O
8189786	O
Here	O
'	O
s	O
why	O
:	O
As	O
it	O
is	O
says	O
in	O
the	O
Javadoc	O
:	O
#	O
blockquote	O
This	O
check	O
is	O
done	O
in	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
iterator	O
(	O
as	O
you	O
can	O
see	O
by	O
the	O
stacktrace	O
)	O
.	O
But	O
we	O
will	O
reach	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
only	O
if	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
delivered	O
true	O
,	O
which	O
is	O
what	O
is	O
called	O
by	O
the	O
for	O
each	O
to	O
check	O
if	O
the	O
boundary	O
is	O
met	O
.	O
In	O
your	O
remove	O
method	O
,	O
when	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
checks	O
if	O
it	O
needs	O
to	O
return	O
another	O
element	O
,	O
it	O
will	O
see	O
that	O
it	O
returned	O
two	O
elements	O
,	O
and	O
now	O
after	O
one	O
element	O
was	O
removed	O
the	O
list	O
only	O
contains	O
two	O
elements	O
.	O
So	O
all	O
is	O
peachy	O
and	O
we	O
are	O
done	O
with	O
iterating	O
.	O
The	O
check	O
for	O
concurrent	O
modifications	O
does	O
not	O
occur	O
,	O
as	O
this	O
is	O
done	O
in	O
the	O
next	O
(	O
args	O
)	O
method	O
which	O
is	O
never	O
called	O
.	O
Next	O
we	O
get	O
to	O
the	O
second	O
loop	O
.	O
After	O
we	O
remove	O
the	O
second	O
number	O
the	O
hasNext	B-api_mention
method	O
will	O
check	O
again	O
if	O
can	O
return	O
more	O
values	O
.	O
It	O
has	O
returned	O
two	O
values	O
already	O
,	O
but	O
the	O
list	O
now	O
only	O
contains	O
one	O
.	O
But	O
the	O
code	O
here	O
is	O
:	O
#	O
pre	O
1	O
!	O
=	O
2	O
,	O
so	O
we	O
continue	O
to	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
now	O
realizes	O
that	O
someone	O
has	O
been	O
messing	O
with	O
the	O
list	O
and	O
fires	O
the	O
exception	O
.	O
Hope	O
that	O
clears	O
your	O
question	O
up	O
.	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
5439543	O
You	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
the	O
integer	O
from	O
the	O
string	O
,	O
and	O
catch	O
the	O
exception	O
if	O
it	O
is	O
not	O
a	O
parsable	O
int	O
.	O
You	O
want	O
to	O
be	O
sure	O
to	O
catch	O
the	O
NumberFormatException	B-api_mention
it	O
can	O
throw	O
.	O
It	O
may	O
be	O
helpful	O
to	O
note	O
that	O
valueOf	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
return	O
an	O
Integer	B-api_mention
object	O
,	O
not	O
the	O
primitive	O
int	O
.	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23526153	O
Everything	O
is	O
here	O
:	O
#	O
a	O
The	O
answer	O
with	O
"	O
round	O
-	O
tripping	O
"	O
is	O
not	O
exact	O
:	O
when	O
you	O
do	O
LocalDateTime	B-api_mention
ldt	O
=	O
LocalDateTime	B-api_mention
.	I-api_mention
ofInstant	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
if	O
your	O
system	O
timezone	O
is	O
not	O
UTC	O
/	O
GMT	O
,	O
you	O
change	O
the	O
time	O
!	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23885950	O
Short	O
answer	O
:	O
#	O
pre	O
Explanation	O
:	O
(	O
based	O
on	O
this	O
question	O
about	O
LocalDate	B-api_mention
)	O
Despite	O
its	O
name	O
,	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
represents	O
an	O
instant	O
on	O
the	O
time	O
-	O
line	O
,	O
not	O
a	O
"	O
date	O
"	O
.	O
The	O
actual	O
data	O
stored	O
within	O
the	O
object	O
is	O
a	O
long	O
count	O
of	O
milliseconds	O
since	O
1970	O
-	O
01	O
-	O
01T00	O
:	O
00Z	O
(	O
midnight	O
at	O
the	O
start	O
of	O
1970	O
GMT	O
/	O
UTC	O
)	O
.	O
The	O
equivalent	O
class	O
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
in	O
JSR	O
-	O
310	O
is	O
Instant	B-api_mention
,	O
thus	O
there	O
are	O
convenient	O
methods	O
to	O
provide	O
the	O
conversion	O
to	O
and	O
fro	O
:	O
#	O
pre	O
A	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
instance	O
has	O
no	O
concept	O
of	O
time	O
-	O
zone	O
.	O
This	O
might	O
seem	O
strange	O
if	O
you	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
,	O
because	O
the	O
toString	B-api_mention
is	O
relative	O
to	O
a	O
time	O
-	O
zone	O
.	O
However	O
that	O
method	O
actually	O
uses	O
Java	O
'	O
s	O
default	O
time	O
-	O
zone	O
on	O
the	O
fly	O
to	O
provide	O
the	O
string	O
.	O
The	O
time	O
-	O
zone	O
is	O
not	O
part	O
of	O
the	O
actual	O
state	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
.	O
An	O
Instant	B-api_mention
also	O
does	O
not	O
contain	O
any	O
information	O
about	O
the	O
time	O
-	O
zone	O
.	O
Thus	O
,	O
to	O
convert	O
from	O
an	O
Instant	O
to	O
a	O
local	O
date	O
-	O
time	O
it	O
is	O
necessary	O
to	O
specify	O
a	O
time	O
-	O
zone	O
.	O
This	O
might	O
be	O
the	O
default	O
zone	O
-	O
ZoneId	B-api_mention
.	I-api_mention
systemDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
or	O
it	O
might	O
be	O
a	O
time	O
-	O
zone	O
that	O
your	O
application	O
controls	O
,	O
such	O
as	O
a	O
time	O
-	O
zone	O
from	O
user	O
preferences	O
.	O
LocalDateTime	B-api_mention
has	O
a	O
convenient	O
factory	O
method	O
that	O
takes	O
both	O
the	O
instant	O
and	O
time	O
-	O
zone	O
:	O
#	O
pre	O
In	O
reverse	O
,	O
the	O
LocalDateTime	B-api_mention
the	O
time	O
-	O
zone	O
is	O
specified	O
by	O
calling	O
the	O
atZone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
ZonedDateTime	B-api_mention
can	O
then	O
be	O
converted	O
directly	O
to	O
an	O
Instant	B-api_mention
:	O
#	O
pre	O
Note	O
that	O
the	O
conversion	O
from	O
LocalDateTime	B-api_mention
to	O
ZonedDateTime	B-api_mention
has	O
the	O
potential	O
to	O
introduce	O
unexpected	O
behaviour	O
.	O
This	O
is	O
because	O
not	O
every	O
local	O
date	O
-	O
time	O
exists	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
In	O
autumn	O
/	O
fall	O
,	O
there	O
is	O
an	O
overlap	O
in	O
the	O
local	O
time	O
-	O
line	O
where	O
the	O
same	O
local	O
date	O
-	O
time	O
occurs	O
twice	O
.	O
In	O
spring	O
,	O
there	O
is	O
a	O
gap	O
,	O
where	O
an	O
hour	O
disappears	O
.	O
See	O
the	O
Javadoc	O
of	O
atZone	B-api_mention
(	I-api_mention
ZoneId	I-api_mention
)	I-api_mention
for	O
more	O
the	O
definition	O
of	O
what	O
the	O
conversion	O
will	O
do	O
.	O
Summary	O
,	O
if	O
you	O
round	O
-	O
trip	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
to	O
a	O
LocalDateTime	B-api_mention
and	O
back	O
to	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
you	O
may	O
end	O
up	O
with	O
a	O
different	O
instant	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
Question	O
-	O
18448671	O
,	O
answer	O
-	O
18448699	O
Use	O
an	O
Iterator	B-api_mention
and	O
call	O
remove	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
16148575	O
I	O
am	O
trying	O
to	O
build	O
a	O
HashMap	B-api_mention
which	O
will	O
have	O
integer	O
as	O
keys	O
and	O
objects	O
as	O
values	O
.	O
My	O
syntax	O
is	O
:	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
,	O
the	O
error	O
returned	O
is	O
-	O
Syntax	O
error	O
on	O
token	O
"	O
int	O
"	O
,	O
Dimensions	O
expected	O
after	O
this	O
token	O
-	O
I	O
don	O
'	O
t	O
understand	O
why	O
I	O
should	O
add	O
a	O
dimension	O
(	O
ie	O
:	O
making	O
the	O
int	O
into	O
an	O
array	O
)	O
since	O
I	O
only	O
need	O
to	O
store	O
a	O
digit	O
as	O
key	O
.	O
What	O
could	O
I	O
do	O
?	O
Thanks	O
in	O
advance	O
!	O
:	O
)	O
Question	O
-	O
4812570	O
How	O
can	O
I	O
get	O
the	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
store	O
it	O
into	O
a	O
String	B-api_mention
variable	O
?	O
I	O
want	O
to	O
use	O
the	O
string	O
generated	O
by	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
later	O
in	O
my	O
program	O
.	O
I	O
'	O
m	O
still	O
new	O
to	O
Java	O
so	O
I	O
'	O
m	O
not	O
too	O
familiar	O
with	O
StringWriter	B-api_mention
that	O
I	O
think	O
will	O
be	O
the	O
solution	O
.	O
Or	O
if	O
you	O
have	O
any	O
other	O
ideas	O
please	O
let	O
me	O
know	O
.	O
Thanks	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
18496449	O
The	O
first	O
style	O
is	O
the	O
one	O
suggested	O
by	O
Oracle	O
.	O
BufferedWriter	B-api_mention
doesn	O
'	O
t	O
throw	O
checked	O
exceptions	O
,	O
so	O
if	O
any	O
exception	O
is	O
thrown	O
,	O
the	O
program	O
is	O
not	O
expected	O
to	O
recover	O
from	O
it	O
,	O
making	O
resource	O
recover	O
mostly	O
moot	O
.	O
Mostly	O
because	O
it	O
could	O
happen	O
in	O
a	O
thread	O
,	O
with	O
the	O
thread	O
dieing	O
but	O
the	O
program	O
still	O
continuing	O
-	O
-	O
say	O
,	O
there	O
was	O
a	O
temporary	O
memory	O
outage	O
that	O
wasn	O
'	O
t	O
long	O
enough	O
to	O
seriously	O
impair	O
the	O
rest	O
of	O
the	O
program	O
.	O
It	O
'	O
s	O
a	O
rather	O
corner	O
case	O
,	O
though	O
,	O
and	O
if	O
it	O
happens	O
often	O
enough	O
to	O
make	O
resource	O
leak	O
a	O
problem	O
,	O
the	O
try	O
-	O
with	O
-	O
resources	O
is	O
the	O
least	O
of	O
your	O
problems	O
.	O
Question	O
-	O
4576352	O
,	O
answer	O
-	O
4576367	O
using	O
public	O
String	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
work	O
usage	O
would	O
be	O
str	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
executing	O
StringLiteral	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
returns	O
:	O
lakjsdf	O
xx	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16149127	O
You	O
can	O
'	O
t	O
use	O
a	O
primitive	O
because	O
HashMap	B-api_mention
use	O
object	O
internally	O
for	O
the	O
key	O
.	O
So	O
you	O
can	O
only	O
use	O
an	O
object	O
that	O
inherits	O
from	O
Object	B-api_mention
(	O
that	O
is	O
any	O
object	O
)	O
.	O
That	O
is	O
the	O
function	O
put	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
HashMap	B-api_mention
and	O
as	O
you	O
can	O
see	O
it	O
uses	O
Object	B-api_mention
for	O
K	O
:	O
#	O
pre	O
The	O
expression	O
"	O
k	O
=	O
e	O
.	O
key	O
"	O
should	O
make	O
it	O
clear	O
.	O
I	O
suggest	O
to	O
use	O
a	O
wrapper	O
like	O
Integer	B-api_mention
and	O
autoboxing	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32752970	O
I	O
will	O
try	O
to	O
summarize	O
three	O
moreless	O
reasonable	O
versions	O
which	O
were	O
proposed	O
in	O
comments	O
.	O
@	O
Holger	O
says	O
:	O
#	O
blockquote	O
This	O
is	O
the	O
most	O
easy	O
thing	O
to	O
test	O
.	O
Let	O
'	O
s	O
compile	O
such	O
program	O
:	O
#	O
pre	O
Run	O
it	O
with	O
java	O
-	O
verbose	O
:	O
class	O
HashMapTest	O
.	O
This	O
will	O
print	O
the	O
class	O
loading	O
events	O
as	O
they	O
occur	O
.	O
With	O
JDK	O
1	O
.	O
8	O
.	O
0	O
_	O
60	O
I	O
see	O
more	O
than	O
400	O
classes	O
loaded	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
HashMap	B-api_mention
is	O
loaded	O
long	O
before	O
application	O
code	O
and	O
Arrays	B-api_mention
is	O
loaded	O
only	O
14	O
classes	O
after	O
HashMap	B-api_mention
.	O
The	O
HashMap	B-api_mention
load	O
is	O
triggered	O
by	O
sun	B-api_mention
.	I-api_mention
reflect	I-api_mention
.	I-api_mention
Reflection	I-api_mention
initialization	O
as	O
it	O
has	O
HashMap	B-api_mention
static	O
fields	O
.	O
The	O
Arrays	B-api_mention
load	O
is	O
likely	O
to	O
be	O
triggered	O
by	O
WeakHashMap	O
load	O
which	O
actually	O
has	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
in	O
the	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
WeakHashMap	B-api_mention
load	O
is	O
triggered	O
by	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
ClassValue	I-api_mention
$	I-api_mention
ClassValueMap	I-api_mention
which	O
extends	O
WeakHashMap	B-api_mention
.	O
The	O
ClassValueMap	B-api_mention
is	O
present	O
in	O
every	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Class	I-api_mention
instance	O
.	O
So	O
to	O
me	O
seems	O
that	O
without	O
Arrays	B-api_mention
class	O
the	O
JDK	O
cannot	O
be	O
initialized	O
at	O
all	O
.	O
Also	O
the	O
Arrays	B-api_mention
static	O
initializer	O
is	O
very	O
short	O
,	O
it	O
only	O
initializes	O
the	O
assertion	O
mechanism	O
.	O
This	O
mechanism	O
is	O
used	O
in	O
many	O
other	O
classes	O
(	O
including	O
,	O
for	O
example	O
,	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Throwable	I-api_mention
which	O
is	O
loaded	O
very	O
early	O
)	O
.	O
No	O
other	O
static	O
initialization	O
steps	O
are	O
performed	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Arrays	I-api_mention
.	O
Thus	O
@	O
Holger	O
version	O
seems	O
incorrect	O
to	O
me	O
.	O
Here	O
we	O
also	O
found	O
very	O
interesting	O
thing	O
.	O
The	O
WeakHashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
still	O
uses	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
.	O
It	O
'	O
s	O
interesting	O
when	O
it	O
appeared	O
there	O
,	O
but	O
unfortunately	O
this	O
goes	O
to	O
prehistoric	O
times	O
(	O
it	O
was	O
already	O
there	O
in	O
the	O
very	O
first	O
public	O
OpenJDK	O
repository	O
)	O
.	O
Next	O
,	O
@	O
MarcoTopolnik	O
says	O
:	O
#	O
blockquote	O
It	O
was	O
actually	O
surprising	O
for	O
me	O
that	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
is	O
not	O
directly	O
intrinsified	O
(	O
see	O
intrinsic	O
list	O
generated	O
by	O
@	O
apangin	O
)	O
.	O
Seems	O
that	O
such	O
loop	O
can	O
be	O
recognized	O
and	O
vectorized	O
by	O
JVM	O
without	O
explicit	O
intrinsic	O
handling	O
.	O
So	O
it	O
'	O
s	O
true	O
that	O
extra	O
call	O
can	O
be	O
not	O
inlined	O
in	O
very	O
specific	O
cases	O
(	O
for	O
example	O
if	O
MaxInlineLevel	O
limit	O
is	O
reached	O
)	O
.	O
On	O
the	O
other	O
hand	O
it	O
'	O
s	O
very	O
rare	O
situation	O
and	O
it	O
'	O
s	O
only	O
a	O
single	O
call	O
,	O
it	O
'	O
s	O
not	O
a	O
call	O
inside	O
loop	O
,	O
and	O
it	O
'	O
s	O
a	O
static	O
,	O
not	O
virtual	O
/	O
interface	O
call	O
,	O
thus	O
the	O
performance	O
improvement	O
could	O
be	O
only	O
marginal	O
and	O
only	O
in	O
some	O
specific	O
scenarios	O
.	O
Not	O
the	O
thing	O
the	O
JVM	O
developers	O
usually	O
care	O
.	O
Also	O
it	O
should	O
be	O
noted	O
that	O
even	O
C1	O
'	O
client	O
'	O
compiler	O
(	O
tier	O
1	O
-	O
3	O
)	O
is	O
capable	O
to	O
inline	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
called	O
,	O
for	O
example	O
,	O
in	O
WeakHashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
as	O
inlining	O
log	O
(	O
-	O
XX	O
:	O
+	O
UnlockDiagnosticVMOptions	O
-	O
XX	O
:	O
+	O
PrintCompilation	O
-	O
XX	O
:	O
+	O
PrintInlining	O
)	O
says	O
:	O
#	O
pre	O
Of	O
course	O
,	O
it	O
'	O
s	O
also	O
easily	O
inlined	O
by	O
smart	O
and	O
powerful	O
C2	O
'	O
server	O
'	O
compiler	O
.	O
Thus	O
I	O
see	O
no	O
problems	O
here	O
.	O
Seems	O
that	O
@	O
Marco	O
version	O
is	O
incorrect	O
either	O
.	O
Finally	O
we	O
have	O
a	O
couple	O
of	O
comments	O
from	O
@	O
StuartMarks	O
(	O
who	O
is	O
JDK	O
developer	O
,	O
thus	O
some	O
official	O
voice	O
)	O
:	O
#	O
blockquote	O
Indeed	O
the	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
contained	O
the	O
loop	O
many	O
years	O
,	O
was	O
replaced	O
with	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
on	O
Apr	O
10th	O
,	O
2013	O
and	O
stayed	O
less	O
one	O
half	O
-	O
a	O
-	O
year	O
until	O
Sept	O
4th	O
when	O
the	O
discussed	O
commit	O
was	O
introduced	O
.	O
The	O
discussed	O
commit	O
was	O
actually	O
a	O
major	O
rewrite	O
of	O
the	O
HashMap	B-api_mention
internals	O
to	O
fix	O
JDK	O
-	O
8023463	O
issue	O
.	O
It	O
was	O
a	O
long	O
story	O
about	O
possibility	O
to	O
poison	O
the	O
HashMap	B-api_mention
with	O
keys	O
having	O
duplicating	O
hashcodes	O
reducing	O
HashMap	B-api_mention
search	O
speed	O
to	O
linear	O
making	O
it	O
vulnerable	O
to	O
DoS	O
-	O
attacks	O
.	O
The	O
attempts	O
to	O
solve	O
this	O
were	O
performed	O
in	O
JDK	O
-	O
7	O
including	O
some	O
randomization	O
of	O
String	B-api_mention
hashCode	O
.	O
So	O
seems	O
that	O
the	O
HashMap	B-api_mention
implementation	O
was	O
forked	O
from	O
the	O
earlier	O
commit	O
,	O
developed	O
independently	O
,	O
then	O
merged	O
into	O
the	O
master	O
branch	O
overwriting	O
several	O
changes	O
introduced	O
in	O
-	O
between	O
.	O
We	O
may	O
support	O
this	O
hypothesis	O
performing	O
a	O
diff	O
.	O
Take	O
the	O
version	O
where	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
was	O
removed	O
(	O
2013	O
-	O
09	O
-	O
04	O
)	O
and	O
compare	O
it	O
with	O
previous	O
version	O
(	O
2013	O
-	O
07	O
-	O
30	O
)	O
.	O
The	O
diff	O
-	O
U0	O
output	O
has	O
4341	O
lines	O
.	O
Now	O
let	O
'	O
s	O
diff	O
against	O
the	O
version	O
prior	O
to	O
one	O
when	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
was	O
added	O
(	O
2013	O
-	O
04	O
-	O
01	O
)	O
.	O
Now	O
diff	O
-	O
U0	O
contains	O
only	O
2680	O
lines	O
.	O
Thus	O
the	O
newer	O
version	O
actually	O
more	O
similar	O
to	O
the	O
older	O
than	O
to	O
immediate	O
parent	O
.	O
Conclusion	O
So	O
to	O
conclude	O
I	O
would	O
agree	O
with	O
Stuart	O
Marks	O
.	O
There	O
were	O
no	O
concrete	O
reason	O
to	O
remove	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
,	O
it	O
'	O
s	O
just	O
because	O
the	O
in	O
-	O
between	O
change	O
was	O
overwritten	O
by	O
mistake	O
.	O
Using	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
is	O
perfectly	O
fine	O
both	O
in	O
JDK	O
code	O
and	O
in	O
user	O
applications	O
and	O
used	O
,	O
for	O
example	O
,	O
in	O
WeakHashMap	B-api_mention
.	O
The	O
Arrays	B-api_mention
class	O
is	O
loaded	O
anyways	O
pretty	O
early	O
during	O
the	O
JDK	O
initialization	O
,	O
has	O
very	O
simple	O
static	O
initializer	O
and	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
method	O
can	O
be	O
easily	O
inlined	O
even	O
by	O
client	O
compiler	O
,	O
so	O
no	O
performance	O
drawback	O
should	O
be	O
noted	O
.	O
Question	O
-	O
5175728	O
,	O
answer	O
-	O
5175771	O
Have	O
a	O
look	O
at	O
the	O
Date	B-api_mention
class	O
.	O
There	O
'	O
s	O
also	O
the	O
newer	O
Calendar	O
class	O
which	O
is	O
the	O
preferred	O
method	O
of	O
doing	O
many	O
date	O
/	O
time	O
operations	O
(	O
a	O
lot	O
of	O
the	O
methods	O
on	O
Date	B-api_mention
have	O
been	O
deprecated	O
.	O
)	O
If	O
you	O
just	O
want	O
the	O
current	O
date	O
,	O
then	O
either	O
create	O
a	O
new	O
Date	B-api_mention
object	O
or	O
call	O
Calendar	B-api_mention
.	I-api_mention
getInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
31265714	O
In	O
Java	O
8	O
,	O
there	O
is	O
also	O
an	O
alternative	O
to	O
using	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
If	O
your	O
input	O
source	O
isn	O
'	O
t	O
a	O
file	O
but	O
something	O
more	O
abstract	O
like	O
a	O
Reader	B-api_mention
or	O
an	O
InputStream	B-api_mention
,	O
you	O
can	O
stream	O
the	O
lines	O
via	O
the	O
BufferedReader	B-api_mention
s	O
lines	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
For	O
example	O
:	O
#	O
pre	O
will	O
call	O
processLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
each	O
input	O
line	O
read	O
by	O
the	O
BufferedReader	B-api_mention
.	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
36978943	O
I	O
'	O
ve	O
been	O
confused	O
by	O
the	O
wide	O
range	O
of	O
different	O
naming	O
schemes	O
as	O
well	O
,	O
and	O
was	O
just	O
about	O
to	O
ask	O
and	O
answer	O
my	O
own	O
question	O
on	O
this	O
when	O
I	O
found	O
this	O
question	O
here	O
.	O
I	O
think	O
my	O
findings	O
fit	O
it	O
well	O
enough	O
,	O
and	O
complement	O
what	O
'	O
s	O
already	O
here	O
.	O
My	O
focus	O
is	O
looking	O
for	O
documentation	O
on	O
the	O
various	O
terms	O
,	O
and	O
adding	O
some	O
more	O
related	O
terms	O
that	O
might	O
crop	O
up	O
in	O
other	O
places	O
.	O
Consider	O
the	O
following	O
example	O
:	O
#	O
pre	O
#	O
li	O
The	O
simple	O
name	O
of	O
D	O
is	O
D	O
.	O
That	O
'	O
s	O
just	O
the	O
part	O
you	O
wrote	O
when	O
declaring	O
the	O
class	O
.	O
Anonymous	O
classes	O
have	O
no	O
simple	O
name	O
.	O
Class	B-api_mention
.	I-api_mention
getSimpleName	I-api_mention
(	I-api_mention
)	I-api_mention
returns	O
this	O
name	O
or	O
the	O
empty	O
string	O
.	O
It	O
is	O
possible	O
for	O
the	O
simple	O
name	O
to	O
contain	O
a	O
$	O
if	O
you	O
write	O
it	O
like	O
this	O
,	O
since	O
$	O
is	O
a	O
valid	O
part	O
of	O
an	O
identifier	O
.	O
#	O
li	O
According	O
to	O
the	O
JLS	O
section	O
6	O
.	O
7	O
,	O
both	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
and	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
.	O
D	O
.	O
D	O
would	O
be	O
fully	O
qualified	O
names	O
,	O
but	O
only	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
would	O
be	O
the	O
canonical	O
name	O
of	O
D	O
.	O
So	O
every	O
canonical	O
name	O
is	O
a	O
fully	O
qualified	O
name	O
,	O
but	O
the	O
converes	O
is	O
not	O
always	O
true	O
.	O
Class	B-api_mention
.	I-api_mention
getCanonicalName	I-api_mention
(	I-api_mention
)	I-api_mention
will	O
return	O
the	O
canonical	O
name	O
or	O
null	O
.	O
#	O
li	O
Class	B-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
documented	O
to	O
return	O
the	O
binary	O
name	O
,	O
as	O
specified	O
in	O
JLS	O
section	O
13	O
.	O
1	O
.	O
In	O
this	O
case	O
it	O
returns	O
a	O
.	O
b	O
.	O
C	O
$	O
D	O
for	O
D	O
and	O
[	O
La	O
.	O
b	O
.	O
C	O
$	O
D	O
;	O
for	O
D	O
[	O
]	O
.	O
#	O
li	O
This	O
answer	O
demonstrates	O
that	O
it	O
is	O
possible	O
for	O
two	O
classes	O
loaded	O
by	O
the	O
same	O
class	O
loader	O
to	O
have	O
the	O
same	O
canonical	O
name	O
but	O
distinct	O
binary	O
names	O
.	O
Neither	O
name	O
is	O
sufficient	O
to	O
reliably	O
deduce	O
the	O
other	O
:	O
if	O
you	O
have	O
the	O
canonical	O
name	O
,	O
you	O
don	O
'	O
t	O
know	O
which	O
parts	O
of	O
the	O
name	O
are	O
packages	O
and	O
which	O
are	O
containing	O
classes	O
.	O
If	O
you	O
have	O
the	O
binary	O
name	O
,	O
you	O
don	O
'	O
t	O
know	O
which	O
$	O
were	O
introduced	O
as	O
separators	O
and	O
which	O
were	O
part	O
of	O
some	O
simple	O
name	O
.	O
#	O
li	O
Anonymous	O
classes	O
and	O
local	O
classes	O
have	O
no	O
fully	O
qualified	O
names	O
but	O
still	O
have	O
a	O
binary	O
name	O
.	O
The	O
same	O
holds	O
for	O
classes	O
nested	O
inside	O
such	O
classes	O
.	O
Every	O
class	O
has	O
a	O
binary	O
name	O
.	O
#	O
li	O
Running	O
javap	O
-	O
v	O
-	O
private	O
on	O
a	O
/	O
b	O
/	O
C	O
.	O
class	O
shows	O
that	O
the	O
bytecode	O
refers	O
to	O
the	O
type	O
of	O
d	O
as	O
La	O
/	O
b	O
/	O
C	O
$	O
D	O
;	O
and	O
that	O
of	O
the	O
array	O
ds	O
as	O
[	O
La	O
/	O
b	O
/	O
C	O
$	O
D	O
;	O
.	O
These	O
are	O
called	O
descriptors	O
,	O
and	O
they	O
are	O
specified	O
in	O
JVMS	O
section	O
4	O
.	O
3	O
.	O
#	O
li	O
The	O
class	O
name	O
a	O
/	O
b	O
/	O
C	O
$	O
D	O
used	O
in	O
both	O
of	O
these	O
descriptors	O
is	O
what	O
you	O
get	O
by	O
replacing	O
.	O
by	O
/	O
in	O
the	O
binary	O
name	O
.	O
The	O
JVM	O
spec	O
apparently	O
calls	O
this	O
the	O
internal	O
form	O
of	O
the	O
binary	O
name	O
.	O
JVMS	O
section	O
4	O
.	O
2	O
.	O
1	O
describes	O
it	O
,	O
and	O
states	O
that	O
the	O
difference	O
from	O
the	O
binary	O
name	O
were	O
for	O
historical	O
reasons	O
.	O
#	O
li	O
The	O
file	O
name	O
of	O
a	O
class	O
in	O
one	O
of	O
the	O
typical	O
filename	O
-	O
based	O
class	O
loaders	O
is	O
what	O
you	O
get	O
if	O
you	O
interpret	O
the	O
/	O
in	O
the	O
internal	O
form	O
of	O
the	O
binary	O
name	O
as	O
a	O
directory	O
separator	O
,	O
and	O
append	O
the	O
file	O
name	O
extension	O
.	O
class	O
to	O
it	O
.	O
It	O
'	O
s	O
resolved	O
relative	O
to	O
the	O
class	O
path	O
used	O
by	O
the	O
class	O
loader	O
in	O
question	O
.	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
36771568	O
In	O
Eclipse	O
,	O
Go	O
to	O
your	O
class	O
,	O
Right	O
click	O
-	O
>	O
source	O
-	O
>	O
Generate	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
;	O
It	O
will	O
override	O
the	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
and	O
print	O
the	O
object	O
of	O
that	O
class	O
.	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781189	O
The	O
only	O
int	O
value	O
for	O
which	O
it	O
works	O
is	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
It	O
'	O
s	O
because	O
integers	O
are	O
negated	O
using	O
the	O
two	O
'	O
s	O
complement	O
way	O
.	O
Using	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
you	O
see	O
that	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
10000000000000000000000000000000	O
Taking	O
the	O
negative	O
value	O
is	O
done	O
by	O
first	O
swapping	O
0	O
and	O
1	O
,	O
which	O
gives	O
01111111111111111111111111111111	O
and	O
by	O
adding	O
1	O
,	O
which	O
gives	O
10000000000000000000000000000000	O
As	O
you	O
can	O
see	O
in	O
the	O
link	O
I	O
gave	O
,	O
Wikipedia	O
mentions	O
the	O
problem	O
with	O
the	O
most	O
negative	O
numbers	O
and	O
specifies	O
it	O
'	O
s	O
the	O
sole	O
exception	O
:	O
#	O
blockquote	O
Of	O
course	O
you	O
have	O
the	O
same	O
phenomenon	O
for	O
Long	B-api_mention
.	I-api_mention
Min	I-api_mention
_	I-api_mention
Value	I-api_mention
if	O
you	O
store	O
it	O
in	O
a	O
long	O
variable	O
.	O
Note	O
that	O
this	O
is	O
only	O
due	O
to	O
choices	O
that	O
were	O
made	O
regarding	O
the	O
binary	O
storage	O
of	O
ints	O
in	O
Java	O
.	O
Another	O
(	O
bad	O
)	O
solution	O
could	O
for	O
example	O
have	O
been	O
to	O
negate	O
by	O
simply	O
changing	O
the	O
most	O
significant	O
bit	O
and	O
letting	O
the	O
other	O
bits	O
unchanged	O
,	O
this	O
would	O
have	O
avoided	O
this	O
problem	O
with	O
MIN	B-api_mention
_	I-api_mention
VALUE	I-api_mention
but	O
would	O
have	O
made	O
2	O
different	O
0	O
values	O
and	O
complicated	O
binary	O
arithmetic	O
(	O
how	O
would	O
you	O
have	O
incremented	O
for	O
example	O
?	O
)	O
.	O
Question	O
-	O
14534767	O
I	O
have	O
a	O
StringBuilder	B-api_mention
object	O
,	O
#	O
pre	O
Now	O
I	O
want	O
to	O
append	O
a	O
newline	O
character	O
to	O
the	O
StringBuilder	B-api_mention
.	O
How	O
can	O
I	O
do	O
it	O
?	O
result	O
.	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Does	O
not	O
work	O
.	O
So	O
,	O
I	O
was	O
thinking	O
about	O
writing	O
a	O
newline	O
using	O
Unicode	O
.	O
Will	O
this	O
help	O
?	O
If	O
so	O
,	O
how	O
can	O
I	O
add	O
one	O
?	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032180	O
The	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
removes	O
all	O
the	O
elements	O
of	O
a	O
single	O
ArrayList	B-api_mention
.	O
It	O
'	O
s	O
a	O
fast	O
operation	O
,	O
as	O
it	O
just	O
sets	O
some	O
array	O
elements	O
to	O
null	O
.	O
The	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
is	O
inherited	O
from	O
AbstractCollection	B-api_mention
,	O
removes	O
all	O
the	O
elements	O
that	O
are	O
in	O
the	O
argument	O
collection	O
from	O
the	O
collection	O
you	O
call	O
the	O
method	O
on	O
.	O
It	O
'	O
s	O
a	O
relatively	O
slow	O
operation	O
,	O
as	O
it	O
has	O
to	O
search	O
through	O
one	O
of	O
the	O
collections	O
involved	O
.	O
Question	O
-	O
18636561	O
,	O
answer	O
-	O
18824858	O
Whenever	O
a	O
new	O
keyword	O
is	O
used	O
it	O
Creates	O
a	O
Object	B-api_mention
at	O
the	O
Heap	O
1	O
)	O
StringBuilder	B-api_mention
sample	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
)	I-api_mention
;	O
2	O
)	O
StringBuilder	B-api_mention
referToSample	O
=	O
sample	O
;	O
In	O
2	O
)	O
the	O
Reference	O
of	O
referSample	O
is	O
created	O
on	O
same	O
object	O
sample	O
thus	O
referToSample	O
=	O
null	O
;	O
is	O
Nulling	O
Only	O
the	O
referSample	O
Reference	O
giving	O
no	O
effect	O
to	O
sample	O
that	O
'	O
s	O
why	O
you	O
are	O
not	O
getting	O
NULL	O
Pointer	O
Exception	O
Thanks	O
to	O
Java	O
'	O
s	O
Garbage	O
Collection	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
9481939	O
You	O
can	O
use	O
java	B-api_mention
.	I-api_mention
net	I-api_mention
.	I-api_mention
InetAddress	I-api_mention
API	O
.	O
Try	O
this	O
:	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostAddress	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
13195797	O
,	O
answer	O
-	O
20043507	O
Peter	O
Lawrey	O
'	O
s	O
answer	O
is	O
great	O
because	O
it	O
is	O
simple	O
and	O
not	O
depending	O
on	O
anything	O
special	O
,	O
and	O
it	O
'	O
s	O
the	O
way	O
you	O
should	O
do	O
it	O
.	O
If	O
you	O
need	O
something	O
that	O
removes	O
subdirectories	O
and	O
their	O
contents	O
as	O
well	O
,	O
use	O
recursion	O
:	O
#	O
pre	O
To	O
spare	O
subdirectories	O
and	O
their	O
contents	O
(	O
part	O
of	O
your	O
question	O
)	O
,	O
modify	O
as	O
follows	O
:	O
#	O
pre	O
Or	O
,	O
since	O
you	O
wanted	O
a	O
one	O
-	O
line	O
solution	O
:	O
for	O
(	O
args	O
)	O
if	O
(	O
args	O
)	O
file	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Using	O
an	O
external	O
library	O
for	O
such	O
a	O
trivial	O
task	O
is	O
not	O
a	O
good	O
idea	O
unless	O
you	O
need	O
this	O
library	O
for	O
something	O
else	O
anyway	O
,	O
in	O
which	O
case	O
it	O
is	O
preferrable	O
to	O
use	O
existing	O
code	O
.	O
You	O
appear	O
to	O
be	O
using	O
the	O
Apache	O
library	O
anyway	O
so	O
use	O
its	O
FileUtils	B-api_mention
.	I-api_mention
cleanDirectory	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
17909134	O
I	O
can	O
see	O
many	O
answers	O
showing	O
how	O
to	O
solve	O
problem	O
,	O
but	O
only	O
Stephen	O
'	O
s	O
answer	O
is	O
trying	O
to	O
explain	O
why	O
problem	O
occurs	O
so	O
I	O
will	O
try	O
to	O
add	O
something	O
more	O
on	O
this	O
subject	O
.	O
It	O
is	O
a	O
story	O
about	O
possible	O
reasons	O
why	O
Object	B-api_mention
[	O
]	O
toArray	B-api_mention
wasn	O
'	O
t	O
changed	O
to	O
T	O
[	O
]	O
toArray	B-api_mention
where	O
generics	O
ware	O
introduced	O
to	O
Java	O
.	O
Why	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
(	O
String	B-api_mention
[	O
]	O
)	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
wont	O
work	O
?	O
In	O
Java	O
,	O
generic	O
type	O
exists	O
at	O
compile	O
-	O
time	O
only	O
.	O
At	O
runtime	O
information	O
about	O
generic	O
type	O
(	O
like	O
in	O
your	O
case	O
<	O
String	B-api_mention
>	O
)	O
is	O
removed	O
and	O
replaced	O
with	O
Object	B-api_mention
type	O
(	O
take	O
a	O
look	O
at	O
type	O
erasure	O
)	O
.	O
That	O
is	O
why	O
at	O
runtime	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
have	O
no	O
idea	O
about	O
what	O
precise	O
type	O
to	O
use	O
to	O
create	O
new	O
array	O
,	O
so	O
it	O
uses	O
Object	B-api_mention
as	O
safest	O
type	O
,	O
because	O
each	O
class	O
extends	O
Object	B-api_mention
so	O
it	O
can	O
safely	O
store	O
instance	O
of	O
any	O
class	O
.	O
Now	O
the	O
problem	O
is	O
that	O
you	O
can	O
'	O
t	O
cast	O
instance	O
of	O
Object	B-api_mention
[	O
]	O
to	O
String	B-api_mention
[	O
]	O
.	O
Why	O
?	O
Take	O
a	O
look	O
at	O
this	O
example	O
(	O
lets	O
assume	O
that	O
class	O
B	O
extends	O
A	O
)	O
:	O
#	O
pre	O
Although	O
such	O
code	O
will	O
compile	O
,	O
at	O
runtime	O
we	O
will	O
see	O
thrown	O
ClassCastException	B-api_mention
because	O
instance	O
held	O
by	O
reference	O
a	O
is	O
not	O
actually	O
of	O
type	O
B	O
(	O
or	O
its	O
subtypes	O
)	O
.	O
Why	O
is	O
this	O
problem	O
(	O
why	O
this	O
exception	O
needs	O
to	O
be	O
cast	O
)	O
?	O
One	O
of	O
the	O
reasons	O
is	O
that	O
B	O
could	O
have	O
new	O
methods	O
/	O
fields	O
which	O
A	O
doesn	O
'	O
t	O
,	O
so	O
it	O
is	O
possible	O
that	O
someone	O
will	O
try	O
to	O
use	O
these	O
new	O
members	O
via	O
b	O
reference	O
even	O
if	O
held	O
instance	O
doesn	O
'	O
t	O
have	O
(	O
doesn	O
'	O
t	O
support	O
)	O
them	O
.	O
In	O
other	O
words	O
we	O
could	O
end	O
up	O
trying	O
to	O
use	O
data	O
which	O
doesn	O
'	O
t	O
exist	O
,	O
which	O
could	O
lead	O
to	O
many	O
problems	O
.	O
So	O
to	O
prevent	O
such	O
situation	O
JVM	O
throws	O
exception	O
,	O
and	O
stop	O
further	O
potentially	O
dangerous	O
code	O
.	O
You	O
could	O
ask	O
now	O
"	O
So	O
why	O
aren	O
'	O
t	O
we	O
stopped	O
even	O
earlier	O
?	O
Why	O
code	O
involving	O
such	O
casting	O
is	O
even	O
compilable	O
?	O
Shouldn	O
'	O
t	O
compiler	O
stop	O
it	O
?	O
"	O
.	O
Answer	O
is	O
:	O
no	O
because	O
compiler	O
can	O
'	O
t	O
know	O
for	O
sure	O
what	O
is	O
the	O
actual	O
type	O
of	O
instance	O
held	O
by	O
a	O
reference	O
,	O
and	O
there	O
is	O
a	O
chance	O
that	O
it	O
will	O
hold	O
instance	O
of	O
class	O
B	O
which	O
will	O
support	O
interface	O
of	O
b	O
reference	O
.	O
Take	O
a	O
look	O
at	O
this	O
example	O
:	O
#	O
pre	O
Now	O
lets	O
go	O
back	O
to	O
your	O
arrays	O
.	O
As	O
you	O
see	O
in	O
question	O
,	O
we	O
can	O
'	O
t	O
cast	O
instance	O
of	O
Object	B-api_mention
[	O
]	O
array	O
to	O
more	O
precise	O
type	O
String	B-api_mention
[	O
]	O
like	O
#	O
pre	O
Here	O
problem	O
is	O
a	O
little	O
different	O
.	O
Now	O
we	O
are	O
sure	O
that	O
String	B-api_mention
[	O
]	O
array	O
will	O
not	O
have	O
additional	O
fields	O
or	O
methods	O
because	O
every	O
array	O
support	O
only	O
:	O
#	O
li	O
[	O
]	O
operator	O
,	O
#	O
li	O
length	O
filed	O
,	O
#	O
li	O
methods	O
inherited	O
from	O
Object	B-api_mention
supertype	O
,	O
So	O
it	O
is	O
not	O
arrays	O
interface	O
which	O
is	O
making	O
it	O
impossible	O
.	O
Problem	O
is	O
that	O
Object	B-api_mention
[	O
]	O
array	O
beside	O
Strings	O
can	O
store	O
any	O
objects	O
(	O
for	O
instance	O
Integers	O
)	O
so	O
it	O
is	O
possible	O
that	O
one	O
beautiful	O
day	O
we	O
will	O
end	O
up	O
with	O
trying	O
to	O
invoke	O
method	O
like	O
strArray	O
[	O
i	O
]	O
.	B-api_mention
substring	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
instance	O
of	O
Integer	O
which	O
doesn	O
'	O
t	O
have	O
such	O
method	O
.	O
So	O
to	O
make	O
sure	O
that	O
this	O
situation	O
will	O
never	O
happen	O
,	O
in	O
Java	O
array	O
references	O
can	O
hold	O
only	O
#	O
li	O
instances	O
of	O
array	O
of	O
same	O
type	O
as	O
reference	O
(	O
reference	O
String	B-api_mention
[	O
]	O
strArr	O
can	O
hold	O
String	B-api_mention
[	O
]	O
)	O
#	O
li	O
instances	O
of	O
array	O
of	O
subtype	O
(	O
Object	B-api_mention
[	O
]	O
can	O
hold	O
String	B-api_mention
[	O
]	O
because	O
String	B-api_mention
is	O
subtype	O
of	O
Object	B-api_mention
)	O
,	O
but	O
can	O
'	O
t	O
hold	O
#	O
li	O
array	O
of	O
supertype	O
of	O
type	O
of	O
array	O
from	O
reference	O
(	O
String	B-api_mention
[	O
]	O
can	O
'	O
t	O
hold	O
Object	B-api_mention
[	O
]	O
)	O
#	O
li	O
array	O
of	O
type	O
which	O
is	O
not	O
related	O
to	O
type	O
from	O
reference	O
(	O
Integer	B-api_mention
[	O
]	O
can	O
'	O
t	O
hold	O
String	B-api_mention
[	O
]	O
)	O
In	O
other	O
words	O
something	O
like	O
this	O
is	O
OK	O
#	O
pre	O
You	O
could	O
say	O
that	O
one	O
way	O
to	O
resolve	O
this	O
problem	O
is	O
to	O
find	O
at	O
runtime	O
most	O
common	O
type	O
between	O
all	O
list	O
elements	O
and	O
create	O
array	O
of	O
that	O
type	O
,	O
but	O
this	O
wont	O
work	O
in	O
situations	O
where	O
all	O
elements	O
of	O
list	O
will	O
be	O
of	O
one	O
type	O
derived	O
from	O
generic	O
one	O
.	O
Take	O
a	O
look	O
#	O
pre	O
now	O
most	O
common	O
type	O
is	O
B	O
,	O
not	O
A	O
so	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
A	O
[	O
]	O
arr	O
=	O
elements	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
would	O
return	O
array	O
of	O
B	O
class	O
new	O
B	O
[	O
]	O
.	O
Problem	O
with	O
this	O
array	O
is	O
that	O
while	O
compiler	O
would	O
allow	O
you	O
to	O
edit	O
its	O
content	O
by	O
adding	O
new	O
A	O
(	O
args	O
)	O
element	O
to	O
it	O
,	O
you	O
would	O
get	O
ArrayStoreException	B-api_mention
because	O
B	O
[	O
]	O
array	O
can	O
hold	O
only	O
elements	O
of	O
class	O
B	O
or	O
its	O
subclass	O
,	O
to	O
make	O
sure	O
that	O
all	O
elements	O
will	O
support	O
interface	O
of	O
B	O
,	O
but	O
instance	O
of	O
A	O
may	O
not	O
have	O
all	O
methods	O
/	O
fields	O
of	O
B	O
.	O
So	O
this	O
solution	O
is	O
not	O
perfect	O
.	O
Best	O
solution	O
to	O
this	O
problem	O
is	O
explicitly	O
tell	O
what	O
type	O
of	O
array	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
be	O
returned	O
by	O
passing	O
this	O
type	O
as	O
method	O
argument	O
like	O
String	B-api_mention
[	O
]	O
arr	O
=	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
String	B-api_mention
[	O
]	O
arr	O
=	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
if	O
size	O
of	O
array	O
is	O
smaller	O
then	O
list	O
it	O
will	O
be	O
automatically	O
adjusted	O
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723651	O
Println	O
(	O
args	O
)	O
uses	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
Print	O
(	O
args	O
)	O
does	O
null	O
check	O
.	O
#	O
pre	O
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375716	O
String	B-api_mention
is	O
immutable	O
irrespective	O
of	O
how	O
it	O
is	O
instantiated	O
1	O
)	O
Short	O
answer	O
is	O
yes	O
,	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
immutable	O
too	O
.	O
Because	O
every	O
possible	O
mutable	O
operation	O
(	O
like	O
replace	O
,	O
toLowerCase	B-api_mention
etcetra	O
)	O
that	O
you	O
perform	O
on	O
String	B-api_mention
does	O
not	O
affect	O
the	O
original	O
String	B-api_mention
instance	O
and	O
returns	O
you	O
a	O
new	O
instance	O
.	O
You	O
may	O
check	O
this	O
in	O
Javadoc	O
for	O
String	B-api_mention
.	O
Each	O
public	O
method	O
of	O
String	B-api_mention
that	O
is	O
exposed	O
returns	O
a	O
new	O
String	B-api_mention
instance	O
and	O
does	O
not	O
alter	O
the	O
present	O
instance	O
on	O
which	O
you	O
called	O
the	O
method	O
.	O
This	O
is	O
very	O
helpful	O
in	O
Multi	O
-	O
threaded	O
environment	O
as	O
you	O
don	O
'	O
t	O
have	O
to	O
think	O
about	O
mutability	O
(	O
someone	O
will	O
change	O
the	O
value	O
)	O
every	O
time	O
you	O
pass	O
or	O
share	O
the	O
String	B-api_mention
around	O
.	O
String	B-api_mention
can	O
easily	O
be	O
the	O
most	O
used	O
data	O
type	O
,	O
so	O
the	O
designers	O
have	O
blessed	O
us	O
all	O
to	O
not	O
think	O
about	O
mutability	O
everytime	O
and	O
saved	O
us	O
a	O
lot	O
of	O
pain	O
.	O
Immutability	O
allowed	O
String	B-api_mention
pool	O
or	O
caching	O
It	O
is	O
because	O
of	O
immutability	O
property	O
that	O
the	O
internal	O
pool	O
of	O
string	O
was	O
possible	O
,	O
as	O
when	O
same	O
String	B-api_mention
value	O
is	O
required	O
at	O
some	O
other	O
place	O
then	O
that	O
immutable	O
reference	O
is	O
returned	O
.	O
If	O
String	B-api_mention
would	O
have	O
been	O
mutable	O
then	O
it	O
would	O
not	O
have	O
been	O
possible	O
to	O
share	O
String	B-api_mention
s	O
like	O
this	O
to	O
save	O
memory	O
.	O
String	B-api_mention
immutablity	O
was	O
not	O
because	O
of	O
pooling	O
,	O
but	O
immutability	O
has	O
more	O
benefits	O
attached	O
to	O
it	O
.	O
String	B-api_mention
interning	O
or	O
pooling	O
is	O
an	O
example	O
of	O
Flyweight	O
Design	O
pattern	O
2	O
)	O
Yes	O
it	O
will	O
be	O
interned	O
like	O
any	O
other	O
String	B-api_mention
as	O
a	O
blank	O
String	B-api_mention
is	O
also	O
as	O
much	O
a	O
String	B-api_mention
as	O
other	O
String	B-api_mention
instances	O
.	O
References	O
:	O
#	O
li	O
Immutability	O
benefits	O
of	O
String	B-api_mention
Question	O
-	O
16159203	O
,	O
answer	O
-	O
16323196	O
#	O
blockquote	O
currentPos	O
=	O
new	O
Point	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
does	O
a	O
few	O
things	O
,	O
including	O
writing	O
default	O
values	O
to	O
x	O
and	O
y	O
(	O
0	O
)	O
and	O
then	O
writing	O
their	O
initial	O
values	O
in	O
the	O
constructor	O
.	O
Since	O
your	O
object	O
is	O
not	O
safely	O
published	O
those	O
4	O
write	O
operations	O
can	O
be	O
freely	O
reordered	O
by	O
the	O
compiler	O
/	O
JVM	O
.	O
So	O
from	O
the	O
perspective	O
of	O
the	O
reading	O
thread	O
,	O
it	O
is	O
a	O
legal	O
execution	O
to	O
read	O
x	O
with	O
its	O
new	O
value	O
but	O
y	O
with	O
its	O
default	O
value	O
of	O
0	O
for	O
example	O
.	O
By	O
the	O
time	O
you	O
reach	O
the	O
println	O
statement	O
(	O
which	O
by	O
the	O
way	O
is	O
synchronized	O
and	O
therefore	O
does	O
influence	O
the	O
read	O
operations	O
)	O
,	O
the	O
variables	O
have	O
their	O
initial	O
values	O
and	O
the	O
program	O
prints	O
the	O
expected	O
values	O
.	O
Marking	O
currentPos	O
as	O
volatile	O
will	O
ensure	O
safe	O
publication	O
since	O
your	O
object	O
is	O
effectively	O
immutable	O
-	O
if	O
in	O
your	O
real	O
use	O
case	O
the	O
object	O
is	O
mutated	O
after	O
construction	O
,	O
volatile	O
guarantees	O
won	O
'	O
t	O
be	O
enough	O
and	O
you	O
could	O
see	O
an	O
inconsistent	O
object	O
again	O
.	O
Alternatively	O
,	O
you	O
can	O
make	O
the	O
Point	B-api_mention
immutable	O
which	O
will	O
also	O
ensure	O
safe	O
publication	O
,	O
even	O
without	O
using	O
volatile	O
.	O
To	O
achieve	O
immutability	O
,	O
you	O
simply	O
need	O
to	O
mark	O
x	O
and	O
y	O
final	O
.	O
As	O
a	O
side	O
note	O
and	O
as	O
already	O
mentioned	O
,	O
synchronized	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
}	O
can	O
be	O
treated	O
as	O
a	O
no	O
-	O
op	O
by	O
the	O
JVM	O
(	O
I	O
understand	O
you	O
included	O
it	O
to	O
reproduce	O
the	O
behaviour	O
)	O
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
35399386	O
The	O
String	B-api_mention
pool	O
(	O
aka	O
interning	O
)	O
and	O
Integer	B-api_mention
pool	O
blur	O
the	O
difference	O
further	O
,	O
and	O
may	O
allow	O
you	O
to	O
use	O
=	O
=	O
for	O
objects	O
in	O
some	O
cases	O
instead	O
of	O
.	B-api_mention
equals	I-api_mention
This	O
can	O
give	O
you	O
greater	O
performance	O
(	O
?	O
)	O
,	O
at	O
the	O
cost	O
of	O
greater	O
complexity	O
.	O
E	O
.	O
g	O
.	O
:	O
#	O
pre	O
Complexity	O
tradeoff	O
:	O
the	O
following	O
may	O
surprise	O
you	O
:	O
#	O
pre	O
I	O
advise	O
you	O
to	O
stay	O
away	O
from	O
such	O
micro	O
-	O
optimization	O
,	O
and	O
always	O
use	O
.	O
equals	O
for	O
objects	O
,	O
and	O
=	O
=	O
for	O
primitives	O
:	O
#	O
pre	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25853827	O
I	O
would	O
argue	O
first	O
-	O
off	O
that	O
Serializable	B-api_mention
and	O
Cloneable	B-api_mention
are	O
bad	O
examples	O
of	O
marker	O
interfaces	O
.	O
Sure	O
,	O
they	O
'	O
re	O
interfaces	O
with	O
methods	O
,	O
but	O
they	O
imply	O
methods	O
,	O
such	O
as	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
(	O
The	O
compiler	O
will	O
create	O
a	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
you	O
if	O
you	O
don	O
'	O
t	O
override	O
it	O
,	O
and	O
all	O
objects	O
already	O
have	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
the	O
compiler	O
will	O
again	O
create	O
a	O
real	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
you	O
but	O
with	O
caveats	O
.	O
Both	O
of	O
these	O
are	O
weird	O
edge	O
cases	O
that	O
really	O
aren	O
'	O
t	O
good	O
design	O
examples	O
.	O
)	O
Marker	O
interfaces	O
are	O
generally	O
used	O
for	O
one	O
of	O
two	O
purposes	O
:	O
1	O
)	O
As	O
a	O
shortcut	O
to	O
avoid	O
an	O
excessively	O
long	O
type	O
,	O
which	O
can	O
happen	O
with	O
lots	O
of	O
generics	O
.	O
For	O
instance	O
,	O
say	O
you	O
have	O
this	O
method	O
signature	O
:	O
public	O
void	O
doSomething	O
(	O
args	O
)	O
{	O
.	O
.	O
.	O
}	O
That	O
'	O
s	O
messy	O
and	O
annoying	O
to	O
type	O
,	O
and	O
more	O
importantly	O
,	O
difficult	O
to	O
understand	O
.	O
Consider	O
this	O
instead	O
:	O
public	O
interface	O
Widget	O
extends	O
Foobar	O
<	O
T	O
>	O
{	O
}	O
Then	O
your	O
method	O
looks	O
like	O
this	O
:	O
public	O
void	O
doSomething	O
(	O
args	O
)	O
{	O
.	O
.	O
.	O
}	O
Not	O
only	O
is	O
it	O
clearer	O
,	O
but	O
you	O
can	O
now	O
Javadoc	O
the	O
Widget	B-api_mention
interface	O
,	O
and	O
it	O
'	O
s	O
also	O
easier	O
to	O
search	O
for	O
all	O
occurrences	O
in	O
your	O
code	O
of	O
Widget	B-api_mention
.	O
2	O
)	O
Marker	B-api_mention
interfaces	O
can	O
also	O
be	O
used	O
as	O
a	O
way	O
around	O
Java	O
'	O
s	O
lack	O
of	O
intersection	O
types	O
.	O
With	O
a	O
marker	B-api_mention
interface	O
,	O
you	O
can	O
require	O
something	O
to	O
be	O
of	O
two	O
different	O
types	O
,	O
such	O
as	O
in	O
a	O
method	O
signature	O
.	O
Say	O
you	O
have	O
some	O
interface	O
Widget	B-api_mention
in	O
your	O
application	O
,	O
like	O
we	O
described	O
above	O
.	O
If	O
you	O
have	O
a	O
method	O
that	O
requires	O
a	O
Widget	B-api_mention
that	O
also	O
happens	O
to	O
let	O
you	O
iterate	O
over	O
it	O
(	O
it	O
'	O
s	O
contrived	O
,	O
but	O
work	O
with	O
me	O
here	O
)	O
,	O
your	O
only	O
good	O
solution	O
is	O
to	O
create	O
a	O
marker	O
interface	O
that	O
extends	O
both	O
interfaces	O
:	O
public	O
interface	O
IterableWidget	B-api_mention
extends	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
Widget	B-api_mention
{	O
}	O
And	O
in	O
your	O
code	O
:	O
#	O
pre	O
Question	O
-	O
29945627	O
,	O
answer	O
-	O
29945754	O
The	O
lambda	O
:	O
(	O
)	O
-	O
>	O
{	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
}	O
;	O
actually	O
represents	O
an	O
implementation	O
for	O
an	O
interface	O
like	O
:	O
#	O
pre	O
which	O
is	O
completely	O
different	O
than	O
the	O
one	O
you	O
'	O
ve	O
defined	O
.	O
That	O
'	O
s	O
why	O
you	O
get	O
an	O
error	O
.	O
Since	O
you	O
can	O
'	O
t	O
extend	O
your	O
@	O
FunctionalInterface	O
,	O
nor	O
introduce	O
a	O
brand	O
new	O
one	O
,	O
then	O
I	O
think	O
you	O
don	O
'	O
t	O
have	O
much	O
options	O
.	O
You	O
can	O
use	O
the	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interfaces	O
to	O
denote	O
that	O
some	O
of	O
the	O
values	O
(	O
return	O
type	O
or	O
method	O
parameter	O
)	O
is	O
missing	O
,	O
though	O
.	O
However	O
,	O
this	O
won	O
'	O
t	O
make	O
the	O
lambda	O
body	O
simpler	O
.	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23884116	O
the	O
following	O
seems	O
to	O
work	O
when	O
converting	O
from	O
new	O
API	O
LocalDateTime	B-api_mention
into	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
date	I-api_mention
:	O
Date	B-api_mention
.	I-api_mention
from	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
the	O
reverse	O
conversion	O
can	O
be	O
(	O
hopefully	O
)	O
achieved	O
similar	O
way	O
.	O
.	O
.	O
hope	O
it	O
helps	O
.	O
.	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
20358928	O
You	O
can	O
use	O
the	O
utility	O
method	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
and	O
feed	O
that	O
result	O
into	O
a	O
new	O
ArrayList	B-api_mention
.	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Other	O
options	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
Collection	I-api_mention
)	I-api_mention
constructor	O
.	O
#	O
li	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
method	O
.	O
#	O
li	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
method	O
.	O
#	O
li	O
Collections	B-api_mention
.	I-api_mention
singletonList	I-api_mention
method	O
.	O
Question	O
-	O
25441088	O
,	O
answer	O
-	O
25441208	O
I	O
think	O
you	O
'	O
re	O
just	O
looking	O
for	O
the	O
overload	O
which	O
takes	O
another	O
Collector	B-api_mention
to	O
specify	O
what	O
to	O
do	O
with	O
each	O
group	O
.	O
.	O
.	O
and	O
then	O
Collectors	B-api_mention
.	I-api_mention
counting	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
do	O
the	O
counting	O
:	O
#	O
pre	O
Result	O
:	O
{	O
Hello	O
=	O
2	O
,	O
World	O
=	O
1	O
}	O
(	O
There	O
'	O
s	O
also	O
the	O
possibility	O
of	O
using	O
groupingByConcurrent	B-api_mention
for	O
more	O
efficiency	O
.	O
Something	O
to	O
bear	O
in	O
mind	O
for	O
your	O
real	O
code	O
,	O
if	O
it	O
would	O
be	O
safe	O
in	O
your	O
context	O
.	O
)	O
Question	O
-	O
4645020	O
It	O
is	O
supposed	O
to	O
be	O
generally	O
preferable	O
to	O
use	O
a	O
StringBuilder	B-api_mention
for	O
string	O
concatenation	O
in	O
Java	O
.	O
Is	O
this	O
always	O
the	O
case	O
?	O
What	O
I	O
mean	O
is	O
this	O
:	O
Is	O
the	O
overhead	O
of	O
creating	O
a	O
StringBuilder	B-api_mention
object	O
,	O
calling	O
the	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
and	O
finally	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
already	O
smaller	O
then	O
concatenating	O
existing	O
strings	O
with	O
the	O
+	O
operator	O
for	O
two	O
strings	O
,	O
or	O
is	O
it	O
only	O
advisable	O
for	O
more	O
(	O
than	O
two	O
)	O
strings	O
?	O
If	O
there	O
is	O
such	O
a	O
threshold	O
,	O
what	O
does	O
it	O
depend	O
on	O
(	O
perhaps	O
the	O
string	O
length	O
,	O
but	O
in	O
which	O
way	O
)	O
?	O
And	O
finally	O
,	O
would	O
you	O
trade	O
the	O
readability	O
and	O
conciseness	O
of	O
the	O
+	O
concatenation	O
for	O
the	O
performance	O
of	O
the	O
StringBuilder	B-api_mention
in	O
smaller	O
cases	O
like	O
two	O
,	O
three	O
or	O
four	O
strings	O
?	O
EDIT	O
Explicit	O
use	O
of	O
StringBuilder	B-api_mention
for	O
regular	O
concatenations	O
is	O
being	O
mentioned	O
as	O
obsolete	O
at	O
obsolete	O
java	O
optimization	O
tips	O
as	O
well	O
as	O
at	O
java	O
urban	O
myths	O
.	O
Question	O
-	O
23699371	O
In	O
Java	O
8	O
how	O
can	O
I	O
filter	O
a	O
collection	O
using	O
the	O
Stream	B-api_mention
API	O
by	O
checking	O
the	O
distinctness	O
of	O
a	O
property	O
of	O
each	O
object	O
?	O
For	O
example	O
I	O
have	O
a	O
list	O
of	O
Person	O
object	O
and	O
I	O
want	O
to	O
remove	O
people	O
with	O
the	O
same	O
name	O
,	O
persons	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
distinct	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Will	O
use	O
the	O
default	O
equality	O
check	O
for	O
a	O
Person	O
object	O
,	O
so	O
I	O
need	O
something	O
like	O
,	O
persons	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
distinct	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Unfortunately	O
the	O
distinct	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
no	O
such	O
overload	O
.	O
Without	O
modifying	O
the	O
equality	O
check	O
inside	O
the	O
Person	O
class	O
is	O
it	O
possible	O
to	O
do	O
this	O
succinctly	O
?	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29111023	O
Although	O
there	O
are	O
several	O
answers	O
already	O
,	O
and	O
an	O
accepted	O
answer	O
,	O
there	O
are	O
still	O
a	O
couple	O
points	O
missing	O
from	O
this	O
topic	O
.	O
First	O
,	O
the	O
consensus	O
seems	O
to	O
be	O
that	O
solving	O
this	O
problem	O
using	O
streams	O
is	O
merely	O
an	O
exercise	O
,	O
and	O
that	O
the	O
conventional	O
for	O
-	O
loop	O
approach	O
is	O
preferable	O
.	O
Second	O
,	O
the	O
answers	O
given	O
thus	O
far	O
have	O
overlooked	O
an	O
approach	O
using	O
array	O
or	O
vector	O
-	O
style	O
techniques	O
that	O
I	O
think	O
improves	O
the	O
streams	O
solution	O
considerably	O
.	O
First	O
,	O
here	O
'	O
s	O
a	O
conventional	O
solution	O
,	O
for	O
purposes	O
of	O
discussion	O
and	O
analysis	O
:	O
#	O
pre	O
This	O
is	O
mostly	O
straightforward	O
but	O
there	O
'	O
s	O
a	O
bit	O
of	O
subtlety	O
.	O
One	O
point	O
is	O
that	O
a	O
pending	O
sublist	O
from	O
prev	O
to	O
cur	O
is	O
always	O
open	O
.	O
When	O
we	O
encounter	O
null	O
we	O
close	O
it	O
,	O
add	O
it	O
to	O
the	O
result	O
list	O
,	O
and	O
advance	O
prev	O
.	O
After	O
the	O
loop	O
we	O
close	O
the	O
sublist	O
unconditionally	O
.	O
Another	O
observation	O
is	O
that	O
this	O
is	O
a	O
loop	O
over	O
indexes	O
,	O
not	O
over	O
the	O
values	O
themselves	O
,	O
thus	O
we	O
use	O
an	O
arithmetic	O
for	O
-	O
loop	O
instead	O
of	O
the	O
enhanced	O
"	O
for	O
-	O
each	O
"	O
loop	O
.	O
But	O
it	O
suggests	O
that	O
we	O
can	O
stream	O
using	O
the	O
indexes	O
to	O
generate	O
subranges	O
instead	O
of	O
streaming	O
over	O
values	O
and	O
putting	O
the	O
logic	O
into	O
the	O
collector	O
(	O
as	O
was	O
done	O
by	O
Joop	O
Eggen	O
'	O
s	O
proposed	O
solution	O
)	O
.	O
Once	O
we	O
'	O
ve	O
realized	O
that	O
,	O
we	O
can	O
see	O
that	O
each	O
position	O
of	O
null	O
in	O
the	O
input	O
is	O
the	O
delimiter	O
for	O
a	O
sublist	O
:	O
it	O
'	O
s	O
the	O
right	O
end	O
of	O
the	O
sublist	O
to	O
the	O
left	O
,	O
and	O
it	O
(	O
plus	O
one	O
)	O
is	O
the	O
left	O
end	O
of	O
the	O
sublist	O
to	O
the	O
right	O
.	O
If	O
we	O
can	O
handle	O
the	O
edge	O
cases	O
,	O
it	O
leads	O
to	O
an	O
approach	O
where	O
we	O
find	O
the	O
indexes	O
at	O
which	O
null	O
elements	O
occur	O
,	O
map	O
them	O
to	O
sublists	O
,	O
and	O
collect	O
the	O
sublists	O
.	O
The	O
resulting	O
code	O
is	O
as	O
follows	O
:	O
#	O
pre	O
Getting	O
the	O
indexes	O
at	O
which	O
null	O
occurs	O
is	O
pretty	O
easy	O
.	O
The	O
stumbling	O
block	O
is	O
adding	O
-	O
1	O
at	O
the	O
left	O
and	O
size	O
at	O
the	O
right	O
end	O
.	O
I	O
'	O
ve	O
opted	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
to	O
do	O
the	O
appending	O
and	O
then	O
flatMapToInt	B-api_mention
to	O
flatten	O
them	O
out	O
.	O
(	O
I	O
tried	O
several	O
other	O
approaches	O
but	O
this	O
one	O
seemed	O
like	O
the	O
cleanest	O
.	O
)	O
It	O
'	O
s	O
a	O
bit	O
more	O
convenient	O
to	O
use	O
arrays	O
for	O
the	O
indexes	O
here	O
.	O
First	O
,	O
the	O
notation	O
for	O
accessing	O
an	O
array	O
is	O
nicer	O
than	O
for	O
a	O
List	B-api_mention
:	O
indexes	O
[	O
i	O
]	O
vs	O
.	O
indexes	O
.	B-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Second	O
,	O
using	O
an	O
array	O
avoids	O
boxing	O
.	O
At	O
this	O
point	O
,	O
each	O
index	O
value	O
in	O
the	O
array	O
(	O
except	O
for	O
the	O
last	O
)	O
is	O
one	O
less	O
than	O
the	O
beginning	O
position	O
of	O
a	O
sublist	O
.	O
The	O
index	O
to	O
its	O
immediate	O
right	O
is	O
the	O
end	O
of	O
the	O
sublist	O
.	O
We	O
simply	O
stream	O
over	O
the	O
array	O
and	O
map	O
each	O
pair	O
of	O
indexes	O
into	O
a	O
sublist	O
and	O
collect	O
the	O
output	O
.	O
Discussion	O
The	O
streams	O
approach	O
is	O
slightly	O
shorter	O
than	O
the	O
for	O
-	O
loop	O
version	O
,	O
but	O
it	O
'	O
s	O
denser	O
.	O
The	O
for	O
-	O
loop	O
version	O
is	O
familiar	O
,	O
because	O
we	O
do	O
this	O
stuff	O
in	O
Java	O
all	O
the	O
time	O
,	O
but	O
if	O
you	O
'	O
re	O
not	O
already	O
aware	O
of	O
what	O
this	O
loop	O
is	O
supposed	O
to	O
be	O
doing	O
,	O
it	O
'	O
s	O
not	O
obvious	O
.	O
You	O
might	O
have	O
to	O
simulate	O
a	O
few	O
loop	O
executions	O
before	O
you	O
figure	O
out	O
what	O
prev	O
is	O
doing	O
and	O
why	O
the	O
open	O
sublist	O
has	O
to	O
be	O
closed	O
after	O
the	O
end	O
of	O
the	O
loop	O
.	O
(	O
I	O
initially	O
forgot	O
to	O
have	O
it	O
,	O
but	O
I	O
caught	O
this	O
in	O
testing	O
.	O
)	O
The	O
streams	O
approach	O
is	O
,	O
I	O
think	O
,	O
easier	O
to	O
conceptualize	O
what	O
'	O
s	O
going	O
on	O
:	O
get	O
a	O
list	O
(	O
or	O
an	O
array	O
)	O
that	O
indicates	O
the	O
boundaries	O
between	O
sublists	O
.	O
That	O
'	O
s	O
an	O
easy	O
streams	O
two	O
-	O
liner	O
.	O
The	O
difficulty	O
,	O
as	O
I	O
mentioned	O
above	O
,	O
is	O
finding	O
a	O
way	O
to	O
tack	O
the	O
edge	O
values	O
onto	O
the	O
ends	O
.	O
If	O
there	O
were	O
a	O
better	O
syntax	O
for	O
doing	O
this	O
,	O
e	O
.	O
g	O
.	O
,	O
/	O
/	O
Java	O
plus	O
pidgin	O
Scala	O
int	O
[	O
]	O
indexes	O
=	O
[	O
-	O
1	O
]	O
+	O
+	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
+	O
+	O
[	O
input	O
.	B-api_mention
size	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
]	O
;	O
it	O
would	O
make	O
things	O
a	O
lot	O
less	O
cluttered	O
.	O
(	O
What	O
we	O
really	O
need	O
is	O
array	O
or	O
list	O
comprehension	O
.	O
)	O
Once	O
you	O
have	O
the	O
indexes	O
,	O
it	O
'	O
s	O
a	O
simple	O
matter	O
to	O
map	O
them	O
into	O
actual	O
sublists	O
and	O
collect	O
them	O
into	O
the	O
result	O
list	O
.	O
And	O
of	O
course	O
this	O
is	O
safe	O
when	O
run	O
in	O
parallel	O
.	O
UPDATE	O
2016	O
-	O
02	O
-	O
06	O
Here	O
'	O
s	O
a	O
nicer	O
way	O
to	O
create	O
the	O
array	O
of	O
sublist	O
indexes	O
.	O
It	O
'	O
s	O
based	O
on	O
the	O
same	O
principles	O
,	O
but	O
it	O
adjusts	O
the	O
index	O
range	O
and	O
adds	O
some	O
conditions	O
to	O
the	O
filter	O
to	O
avoid	O
having	O
to	O
concatenate	O
and	O
flatmap	O
the	O
indexes	O
.	O
#	O
pre	O
Question	O
-	O
28681737	O
,	O
answer	O
-	O
28684917	O
The	O
short	O
answer	O
is	O
:	O
it	O
'	O
s	O
safe	O
if	O
you	O
use	O
them	O
safely	O
:	O
)	O
The	O
snarky	O
answer	O
:	O
tell	O
me	O
what	O
you	O
mean	O
by	O
traits	O
,	O
and	O
maybe	O
I	O
'	O
ll	O
give	O
you	O
a	O
better	O
answer	O
:	O
)	O
In	O
all	O
seriousness	O
,	O
the	O
term	O
"	O
trait	O
"	O
is	O
not	O
well	O
-	O
defined	O
.	O
Many	O
Java	O
developers	O
are	O
most	O
familiar	O
with	O
traits	O
as	O
they	O
are	O
expressed	O
in	O
Scala	O
,	O
but	O
Scala	O
is	O
far	O
from	O
the	O
first	O
language	O
to	O
have	O
traits	O
,	O
either	O
in	O
name	O
or	O
in	O
effect	O
.	O
For	O
example	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
stateful	O
(	O
can	O
have	O
var	O
variables	O
)	O
;	O
in	O
Fortress	O
they	O
are	O
pure	O
behavior	O
.	O
Java	O
'	O
s	O
interfaces	O
with	O
default	O
methods	O
are	O
stateless	O
;	O
does	O
this	O
mean	O
they	O
are	O
not	O
traits	O
?	O
(	O
Hint	O
:	O
that	O
was	O
a	O
trick	O
question	O
.	O
)	O
Again	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
composed	O
through	O
linearization	O
;	O
if	O
class	O
A	O
extends	O
traits	O
X	O
and	O
Y	O
,	O
then	O
the	O
order	O
in	O
which	O
X	O
and	O
Y	O
are	O
mixed	O
in	O
determines	O
how	O
conflicts	O
between	O
X	O
and	O
Y	O
are	O
resolved	O
.	O
In	O
Java	O
,	O
this	O
linearization	O
mechanism	O
is	O
not	O
present	O
(	O
it	O
was	O
rejected	O
,	O
in	O
part	O
,	O
because	O
it	O
was	O
too	O
"	O
un	O
-	O
Java	O
-	O
like	O
"	O
.	O
)	O
The	O
proximate	O
reason	O
for	O
adding	O
default	O
methods	O
to	O
interfaces	O
was	O
to	O
support	O
interface	O
evolution	O
,	O
but	O
we	O
were	O
well	O
aware	O
that	O
we	O
were	O
going	O
beyond	O
that	O
.	O
Whether	O
you	O
consider	O
that	O
to	O
be	O
"	O
interface	O
evolution	O
+	O
+	O
"	O
or	O
"	O
traits	O
-	O
-	O
"	O
is	O
a	O
matter	O
of	O
personal	O
interpretation	O
.	O
So	O
,	O
to	O
answer	O
your	O
question	O
about	O
safety	O
.	O
.	O
.	O
so	O
long	O
as	O
you	O
stick	O
to	O
what	O
the	O
mechanism	O
actually	O
supports	O
,	O
rather	O
than	O
trying	O
to	O
wishfully	O
stretch	O
it	O
to	O
something	O
it	O
does	O
not	O
support	O
,	O
you	O
should	O
be	O
fine	O
.	O
A	O
key	O
design	O
goal	O
was	O
that	O
,	O
from	O
the	O
perspective	O
of	O
the	O
client	O
of	O
an	O
interface	O
,	O
default	O
methods	O
should	O
be	O
indistinguishable	O
from	O
"	O
regular	O
"	O
interface	O
methods	O
.	O
The	O
default	O
-	O
ness	O
of	O
a	O
method	O
,	O
therefore	O
,	O
is	O
only	O
interesting	O
to	O
the	O
designer	O
and	O
implementor	O
of	O
the	O
interface	O
.	O
Here	O
are	O
some	O
use	O
cases	O
that	O
are	O
well	O
within	O
the	O
design	O
goals	O
:	O
#	O
li	O
Interface	O
evolution	O
.	O
Here	O
,	O
we	O
are	O
adding	O
a	O
new	O
method	O
to	O
an	O
existing	O
interface	O
,	O
which	O
has	O
a	O
sensible	O
default	O
implementation	O
in	O
terms	O
of	O
existing	O
methods	O
on	O
that	O
interface	O
.	O
An	O
example	O
would	O
be	O
adding	O
the	O
forEach	B-api_mention
method	O
to	O
Collection	B-api_mention
,	O
where	O
the	O
default	O
implementation	O
is	O
written	O
in	O
terms	O
of	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
li	O
"	O
Optional	O
"	O
methods	O
.	O
Here	O
,	O
the	O
designer	O
of	O
an	O
interface	O
is	O
saying	O
"	O
Implementors	O
need	O
not	O
implement	O
this	O
method	O
if	O
they	O
are	O
willing	O
to	O
live	O
with	O
the	O
limitations	O
in	O
functionality	O
that	O
entails	O
"	O
.	O
For	O
example	O
,	O
Iterator	B-api_mention
.	I-api_mention
remove	I-api_mention
was	O
given	O
a	O
default	O
which	O
throws	O
UnsupportedOperationException	B-api_mention
;	O
since	O
the	O
vast	O
majority	O
of	O
implementations	O
of	O
Iterator	O
have	O
this	O
behavior	O
anyway	O
,	O
the	O
default	O
makes	O
this	O
method	O
essentially	O
optional	O
.	O
(	O
If	O
the	O
behavior	O
from	O
AbstractCollection	B-api_mention
were	O
expressed	O
as	O
defaults	O
on	O
Collection	B-api_mention
,	O
we	O
might	O
do	O
the	O
same	O
for	O
the	O
mutative	O
methods	O
.	O
)	O
#	O
li	O
Convenience	O
methods	O
.	O
These	O
are	O
methods	O
that	O
are	O
strictly	O
for	O
convenience	O
,	O
again	O
generally	O
implemented	O
in	O
terms	O
of	O
non	O
-	O
default	O
methods	O
on	O
the	O
class	O
.	O
The	O
logger	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
your	O
first	O
example	O
is	O
a	O
reasonable	O
illustration	O
of	O
this	O
.	O
#	O
li	O
Combinators	O
.	O
These	O
are	O
compositional	O
methods	O
that	O
instantiate	O
new	O
instances	O
of	O
the	O
interface	O
based	O
on	O
the	O
current	O
instance	O
.	O
For	O
example	O
,	O
the	O
methods	O
Predicate	B-api_mention
.	I-api_mention
and	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Comparator	B-api_mention
.	I-api_mention
thenComparing	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
examples	O
of	O
combinators	O
.	O
If	O
you	O
provide	O
a	O
default	O
implementation	O
,	O
you	O
should	O
also	O
provide	O
some	O
specification	O
for	O
the	O
default	O
(	O
in	O
the	O
JDK	O
,	O
we	O
use	O
the	O
@	O
implSpec	O
javadoc	O
tag	O
for	O
this	O
)	O
to	O
aid	O
implementors	O
in	O
understanding	O
whether	O
they	O
want	O
to	O
override	O
the	O
method	O
or	O
not	O
.	O
Some	O
defaults	O
,	O
like	O
convenience	O
methods	O
and	O
combinators	O
,	O
are	O
almost	O
never	O
overridden	O
;	O
others	O
,	O
like	O
optional	O
methods	O
,	O
are	O
often	O
overridden	O
.	O
You	O
need	O
to	O
provide	O
enough	O
specification	O
(	O
not	O
just	O
documentation	O
)	O
about	O
what	O
the	O
default	O
promises	O
to	O
do	O
,	O
so	O
the	O
implementor	O
can	O
make	O
a	O
sensible	O
decision	O
about	O
whether	O
they	O
need	O
to	O
override	O
it	O
.	O
Question	O
-	O
5694385	O
,	O
answer	O
-	O
5694473	O
Create	O
a	O
File	B-api_mention
object	O
,	O
passing	O
the	O
directory	O
path	O
to	O
the	O
constructor	O
.	O
Use	O
the	O
listFiles	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
retrieve	O
an	O
array	O
of	O
File	B-api_mention
objects	O
for	O
each	O
file	O
in	O
the	O
directory	O
,	O
and	O
then	O
call	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
get	O
the	O
filename	O
.	O
#	O
pre	O
Question	O
-	O
5071040	O
,	O
answer	O
-	O
22547954	O
Always	O
use	O
either	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Using	O
"	O
"	O
+	O
number	O
is	O
an	O
overhead	O
and	O
does	O
the	O
following	O
:	O
#	O
pre	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
31838310	O
The	O
main	O
purpose	O
of	O
marker	B-api_mention
interfaces	O
is	O
to	O
create	O
special	O
types	O
where	O
types	O
themselves	O
have	O
no	O
behavior	O
of	O
their	O
own	O
.	O
#	O
pre	O
Here	O
save	O
method	O
makes	O
sure	O
that	O
only	O
the	O
objects	O
of	O
classes	O
that	O
implement	O
the	O
MarkerEntity	B-api_mention
interface	O
are	O
saved	O
,	O
for	O
other	O
types	O
InvalidEntityFoundException	B-api_mention
is	O
thrown	O
.	O
So	O
here	O
MarkerEntity	B-api_mention
marker	O
interface	O
is	O
defining	O
a	O
type	O
that	O
adds	O
special	O
behavior	O
to	O
the	O
classes	O
implementing	O
it	O
.	O
Though	O
annotations	O
can	O
also	O
used	O
now	O
to	O
mark	O
classes	O
for	O
some	O
special	O
treatments	O
but	O
marker	O
annotations	O
are	O
replacement	O
for	O
naming	O
pattern	O
not	O
for	O
Marker	B-api_mention
interfaces	O
.	O
But	O
marker	O
annotations	O
can	O
'	O
t	O
fully	O
replace	O
the	O
marker	O
interfaces	O
because	O
;	O
marker	O
interfaces	O
are	O
used	O
to	O
define	O
type	O
(	O
as	O
already	O
explained	O
above	O
)	O
where	O
as	O
marker	B-api_mention
annotations	O
do	O
not	O
.	O
Source	O
for	O
marker	B-api_mention
interface	O
comment	O
Question	O
-	O
22929237	O
,	O
answer	O
-	O
28564046	O
You	O
can	O
use	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
as	O
:	O
Date	B-api_mention
date	O
=	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
No	O
need	O
to	O
add	O
time	O
and	O
time	O
zone	O
info	O
here	O
because	O
they	O
are	O
taken	O
implicitly	O
.	O
See	O
Simpliest	O
java8	O
LocalDate	B-api_mention
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
conversion	O
and	O
vice	O
versa	O
?	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28596792	O
To	O
me	O
,	O
it	O
seems	O
that	O
"	O
because	O
it	O
should	O
behave	O
the	O
same	O
as	O
zero	O
"	O
would	O
make	O
a	O
good	O
answer	O
.	O
Arithmetic	O
overflow	O
and	O
underflow	O
should	O
be	O
handlable	O
similarly	O
.	O
If	O
you	O
underflow	O
from	O
the	O
largest	O
near	O
-	O
infinitesimally	O
small	O
value	O
which	O
can	O
be	O
stored	O
in	O
a	O
float	O
,	O
you	O
get	O
zero	O
,	O
and	O
zeros	O
compare	O
as	O
identical	O
.	O
If	O
you	O
overflow	O
from	O
the	O
largest	O
near	O
-	O
infinitely	O
large	O
value	O
which	O
can	O
be	O
stored	O
in	O
a	O
float	O
,	O
you	O
get	O
INF	O
,	O
and	O
INFs	O
compare	O
as	O
identical	O
.	O
This	O
means	O
that	O
code	O
which	O
handles	O
numbers	O
which	O
are	O
out	O
-	O
of	O
-	O
scope	O
in	O
both	O
directions	O
will	O
not	O
require	O
separate	O
special	O
-	O
casing	O
for	O
one	O
or	O
the	O
other	O
.	O
Instead	O
,	O
either	O
both	O
or	O
neither	O
will	O
need	O
to	O
be	O
treated	O
differently	O
.	O
And	O
the	O
simplest	O
requirement	O
is	O
covered	O
by	O
the	O
"	O
neither	O
"	O
case	O
:	O
you	O
want	O
to	O
check	O
if	O
something	O
over	O
/	O
underflowed	O
,	O
you	O
can	O
compare	O
it	O
to	O
zero	O
/	O
INF	O
using	O
just	O
the	O
normal	O
arithmetic	O
comparison	O
operators	O
,	O
without	O
needing	O
to	O
know	O
you	O
current	O
language	O
'	O
s	O
special	O
syntax	O
for	O
the	O
checking	O
command	O
:	O
is	O
it	O
Math	B-api_mention
.	I-api_mention
isInfinite	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
Float	B-api_mention
.	I-api_mention
checkForPositiveInfinity	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
hasOverflowed	B-api_mention
(	I-api_mention
)	I-api_mention
.	O
.	O
.	O
?	O
Question	O
-	O
31270759	O
Exceptions	O
,	O
especially	O
checked	O
ones	O
,	O
can	O
severely	O
interrupt	O
the	O
flow	O
of	O
program	O
logic	O
when	O
the	O
FP	O
idiom	O
is	O
used	O
in	O
Java	O
8	O
.	O
Here	O
is	O
an	O
arbitrary	O
example	O
:	O
#	O
pre	O
The	O
above	O
code	O
breaks	O
when	O
there	O
'	O
s	O
an	O
exception	O
for	O
an	O
unparseable	O
string	O
.	O
But	O
say	O
I	O
just	O
want	O
to	O
replace	O
that	O
with	O
a	O
default	O
value	O
,	O
much	O
like	O
I	O
can	O
with	O
Optional	B-api_mention
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Of	O
course	O
,	O
this	O
still	O
fails	O
because	O
Optional	B-api_mention
only	O
handles	O
null	O
s	O
.	O
I	O
would	O
like	O
something	O
as	O
follows	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
:	O
this	O
is	O
a	O
self	O
-	O
answered	O
question	O
.	O
Question	O
-	O
19235606	O
,	O
answer	O
-	O
19235857	O
Spliterator	B-api_mention
basically	O
means	O
"	O
splittable	O
Iterator	O
"	O
.	O
Single	O
thread	O
can	O
traverse	O
/	O
process	O
the	O
entire	O
Spliterator	B-api_mention
itself	O
,	O
but	O
the	O
Spliterator	B-api_mention
also	O
has	O
a	O
method	O
trySplit	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
will	O
"	O
split	O
off	O
"	O
a	O
section	O
for	O
someone	O
else	O
(	O
typically	O
,	O
another	O
thread	O
)	O
to	O
process	O
-	O
-	O
leaving	O
the	O
current	O
spliterator	O
with	O
less	O
work	O
.	O
Collector	B-api_mention
combines	O
the	O
specification	O
of	O
a	O
reduce	O
function	O
(	O
of	O
map	O
-	O
reduce	O
fame	O
)	O
,	O
with	O
an	O
initial	O
value	O
,	O
and	O
a	O
value	O
to	O
combine	O
two	O
results	O
(	O
thus	O
enabling	O
results	O
from	O
Spliterated	O
streams	O
of	O
work	O
,	O
to	O
be	O
combined	O
.	O
)	O
For	O
example	O
,	O
the	O
most	O
basic	O
Collector	B-api_mention
would	O
have	O
an	O
initial	O
vaue	O
of	O
0	O
,	O
add	O
an	O
integer	O
onto	O
an	O
existing	O
result	O
,	O
and	O
would	O
'	O
combine	O
'	O
two	O
results	O
by	O
adding	O
them	O
.	O
Thus	O
summing	O
a	O
spliterated	O
stream	O
of	O
integers	O
.	O
See	O
:	O
#	O
li	O
Spliterator	B-api_mention
.	I-api_mention
trySplit	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
Collector	B-api_mention
<	I-api_mention
T	I-api_mention
,	I-api_mention
A	I-api_mention
,	I-api_mention
R	I-api_mention
>	I-api_mention
Question	O
-	O
12317668	O
,	O
answer	O
-	O
12375312	O
Here	O
we	O
are	O
faced	O
with	O
a	O
bug	O
in	O
the	O
JIT	O
-	O
compiler	O
.	O
Compiler	O
determines	O
that	O
the	O
allocated	O
array	O
is	O
filled	O
after	O
allocation	O
in	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
the	O
check	O
for	O
uses	O
between	O
the	O
allocation	O
and	O
the	O
fill	O
is	O
faulty	O
.	O
So	O
,	O
compiler	O
performs	O
an	O
illegal	O
optimization	O
-	O
it	O
skips	O
zeroing	O
of	O
allocated	O
array	O
.	O
This	O
bug	O
is	O
placed	O
in	O
Oracle	O
bug	O
tracker	O
(	O
bug	O
id	O
7196857	O
)	O
.	O
Unfortunately	O
,	O
I	O
did	O
not	O
wait	O
for	O
any	O
clarifications	O
from	O
Oracle	O
about	O
the	O
following	O
points	O
.	O
As	O
I	O
see	O
,	O
this	O
bug	O
is	O
OS	O
-	O
specific	O
:	O
it	O
absolutely	O
reproducible	O
on	O
64	O
-	O
bit	O
Linux	O
and	O
Mac	O
,	O
but	O
,	O
as	O
I	O
see	O
from	O
comments	O
,	O
it	O
reproduces	O
not	O
regularly	O
on	O
Windows	O
(	O
for	O
similar	O
versions	O
of	O
JDK	O
)	O
.	O
Additionally	O
it	O
would	O
be	O
nice	O
to	O
know	O
when	O
this	O
bug	O
will	O
be	O
fixed	O
.	O
There	O
is	O
only	O
advice	O
at	O
the	O
moment	O
:	O
do	O
not	O
use	O
JDK1	O
.	O
7	O
.	O
0	O
_	O
04	O
or	O
later	O
if	O
you	O
depend	O
on	O
JLS	O
for	O
newly	O
declared	O
arrays	O
.	O
Update	O
at	O
October	O
5	O
:	O
In	O
the	O
new	O
Build	O
10	O
of	O
the	O
JDK	O
7u10	O
(	O
early	O
access	O
)	O
released	O
at	O
October	O
04	O
,	O
2012	O
,	O
this	O
bug	O
was	O
fixed	O
at	O
least	O
for	O
Linux	O
OS	O
(	O
I	O
did	O
not	O
test	O
for	O
other	O
)	O
.	O
Thanks	O
to	O
@	O
Makoto	O
,	O
who	O
found	O
that	O
this	O
bug	O
is	O
no	O
longer	O
available	O
for	O
public	O
access	O
in	O
Oracle	O
bug	O
database	O
.	O
Unfortunately	O
,	O
I	O
do	O
not	O
know	O
for	O
the	O
reasons	O
Oracle	O
removed	O
it	O
from	O
public	O
access	O
,	O
but	O
it	O
is	O
available	O
in	O
Google	O
cache	O
.	O
Also	O
,	O
this	O
bug	O
has	O
caught	O
the	O
attention	O
of	O
Redhat	O
:	O
the	O
CVE	O
identifiers	O
CVE	O
-	O
2012	O
-	O
4420	O
(	O
bugzilla	O
)	O
and	O
CVE	O
-	O
2012	O
-	O
4416	O
(	O
bugzilla	O
)	O
were	O
assigned	O
to	O
this	O
flaw	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
12665271	O
Here	O
'	O
s	O
my	O
take	O
on	O
the	O
alternatives	O
:	O
1	O
)	O
#	O
pre	O
For	O
me	O
,	O
the	O
best	O
thing	O
coming	O
to	O
Java	O
from	O
traditional	O
C	O
+	O
+	O
15	O
years	O
ago	O
was	O
that	O
you	O
could	O
trust	O
your	O
program	O
.	O
Even	O
if	O
things	O
are	O
in	O
the	O
muck	O
and	O
going	O
wrong	O
,	O
which	O
they	O
often	O
do	O
,	O
I	O
want	O
the	O
rest	O
of	O
the	O
code	O
to	O
be	O
on	O
best	O
behaviour	O
and	O
smelling	O
of	O
roses	O
.	O
Indeed	O
,	O
the	O
BufferedWriter	B-api_mention
might	O
throw	O
an	O
exception	O
here	O
.	O
Running	O
out	O
of	O
memory	O
wouldn	O
'	O
t	O
be	O
unusual	O
,	O
for	O
instance	O
.	O
For	O
other	O
decorators	O
,	O
do	O
you	O
know	O
which	O
of	O
the	O
java	B-api_mention
.	I-api_mention
io	I-api_mention
wrapper	O
classes	O
throw	O
a	O
checked	O
exception	O
from	O
their	O
constructors	O
?	O
I	O
don	O
'	O
t	O
.	O
Doesn	O
'	O
t	O
do	O
code	O
understandability	O
much	O
good	O
if	O
you	O
rely	O
upon	O
that	O
sort	O
of	O
obscure	O
knowledge	O
.	O
Also	O
there	O
'	O
s	O
the	O
"	O
destruction	O
"	O
.	O
If	O
there	O
is	O
an	O
error	O
condition	O
,	O
then	O
you	O
probably	O
don	O
'	O
t	O
want	O
to	O
be	O
flushing	O
rubbish	O
to	O
a	O
file	O
that	O
needs	O
deleting	O
(	O
code	O
for	O
that	O
not	O
shown	O
)	O
.	O
Although	O
,	O
of	O
course	O
,	O
deleting	O
the	O
file	O
is	O
also	O
another	O
interesting	O
operation	O
to	O
do	O
as	O
error	O
handling	O
.	O
Generally	O
you	O
want	O
finally	O
blocks	O
to	O
be	O
as	O
short	O
and	O
reliable	O
as	O
possible	O
.	O
Adding	O
flushes	O
does	O
not	O
help	O
this	O
goal	O
.	O
For	O
many	O
releases	O
some	O
of	O
the	O
buffering	O
classes	O
in	O
the	O
JDK	O
had	O
a	O
bug	O
where	O
an	O
exception	O
from	O
flush	B-api_mention
within	O
close	B-api_mention
caused	O
close	B-api_mention
on	O
the	O
decorated	O
object	O
not	O
be	O
called	O
.	O
Whilst	O
that	O
has	O
been	O
fixed	O
for	O
some	O
time	O
,	O
expect	O
it	O
from	O
other	O
implementations	O
.	O
2	O
)	O
#	O
pre	O
We	O
'	O
re	O
still	O
flushing	O
in	O
the	O
implicit	O
finally	O
block	O
(	O
now	O
with	O
repeated	O
close	B-api_mention
-	O
this	O
gets	O
worse	O
as	O
you	O
add	O
more	O
decorators	O
)	O
,	O
but	O
the	O
construction	O
is	O
safe	O
and	O
we	O
have	O
to	O
implicit	O
finally	O
blocks	O
so	O
even	O
a	O
failed	O
flush	B-api_mention
doesn	O
'	O
t	O
prevent	O
resource	O
release	O
.	O
3	O
)	O
#	O
pre	O
There	O
'	O
s	O
a	O
bug	O
here	O
.	O
Should	O
be	O
:	O
#	O
pre	O
Some	O
poorly	O
implemented	O
decorators	O
are	O
in	O
fact	O
resource	O
and	O
will	O
need	O
to	O
be	O
closed	O
reliably	O
.	O
Also	O
some	O
streams	O
may	O
need	O
to	O
be	O
closed	O
in	O
a	O
particular	O
way	O
(	O
perhaps	O
they	O
are	O
doing	O
compression	O
and	O
need	O
to	O
write	O
bits	O
to	O
finish	O
off	O
,	O
and	O
can	O
'	O
t	O
just	O
flush	O
everything	O
.	O
Verdict	O
Although	O
3	O
is	O
a	O
technically	O
superior	O
solution	O
,	O
software	O
development	O
reasons	O
make	O
2	O
the	O
better	O
choice	O
.	O
However	O
,	O
try	O
-	O
with	O
-	O
resource	O
is	O
still	O
an	O
inadequate	O
fix	O
and	O
you	O
should	O
stick	O
with	O
the	O
Execute	O
Around	O
idiom	O
,	O
which	O
should	O
have	O
a	O
clearer	O
syntax	O
with	O
closures	O
in	O
Java	O
SE	O
8	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331243	O
Create	O
a	O
DateTimeFormatter	B-api_mention
using	O
DateTimeFormat	B-api_mention
.	I-api_mention
forPattern	I-api_mention
(	O
String	B-api_mention
)	O
Using	O
Joda	O
time	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
Also	O
,	O
if	O
you	O
wanted	O
to	O
use	O
standard	O
Java	O
,	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
