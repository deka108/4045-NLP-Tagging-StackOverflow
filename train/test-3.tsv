Question	O
-	O
19431234	O
,	O
answer	O
-	O
23884116	O
the	O
following	O
seems	O
to	O
work	O
when	O
converting	O
from	O
new	O
API	O
LocalDateTime	B-api_mention
into	O
java	O
.	O
util	O
.	O
date	O
:	O
Date	B-api_mention
.	I-api_mention
from	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
the	O
reverse	O
conversion	O
can	O
be	O
(	O
hopefully	O
)	O
achieved	O
similar	O
way	O
.	O
.	O
.	O
hope	O
it	O
helps	O
.	O
.	O
.	O
Question	O
-	O
18647214	O
,	O
answer	O
-	O
18647232	O
I	O
would	O
just	O
do	O
this	O
.	O
It	O
basically	O
takes	O
the	O
minimum	O
between	O
100	O
(	O
the	O
max	O
health	O
)	O
and	O
what	O
the	O
health	O
would	O
be	O
with	O
15	O
extra	O
points	O
.	O
It	O
ensures	O
that	O
the	O
user	O
'	O
s	O
health	O
does	O
not	O
exceed	O
100	O
.	O
#	O
pre	O
To	O
ensure	O
that	O
hitpoints	O
do	O
not	O
drop	O
below	O
zero	O
,	O
you	O
can	O
use	O
a	O
similar	O
function	O
:	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
.	O
#	O
pre	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29923793	O
I	O
think	O
the	O
shortest	O
code	O
to	O
get	O
a	O
Stream	B-api_mention
of	O
enum	O
constants	O
is	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
It	O
'	O
s	O
not	O
as	O
nice	O
as	O
Letter	O
.	B-api_mention
values	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
that	O
'	O
s	O
an	O
issue	O
with	O
arrays	O
,	O
not	O
specifically	O
enums	O
.	O
#	O
blockquote	O
You	O
are	O
right	O
that	O
the	O
nicest	O
possible	O
call	O
would	O
be	O
Letter	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Unfortunately	O
a	O
class	O
cannot	O
have	O
two	O
methods	O
with	O
the	O
same	O
signature	O
,	O
so	O
it	O
would	O
not	O
be	O
possible	O
to	O
implicitly	O
add	O
a	O
static	O
method	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
every	O
enum	O
(	O
in	O
the	O
same	O
way	O
that	O
every	O
enum	O
has	O
an	O
implicitly	O
added	O
static	O
method	O
values	O
(	O
args	O
)	O
)	O
as	O
this	O
would	O
break	O
every	O
existing	O
enum	O
that	O
already	O
has	O
a	O
static	O
or	O
instance	O
method	O
without	O
parameters	O
called	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
blockquote	O
I	O
think	O
so	O
.	O
The	O
drawback	O
is	O
that	O
stream	O
is	O
a	O
static	O
method	O
,	O
so	O
there	O
is	O
no	O
way	O
to	O
avoid	O
code	O
duplication	O
;	O
it	O
would	O
have	O
to	O
be	O
added	O
to	O
every	O
enum	O
separately	O
.	O
Question	O
-	O
14491966	O
I	O
made	O
a	O
class	O
called	O
QuickRandom	B-api_mention
,	O
and	O
its	O
job	O
is	O
to	O
produce	O
random	O
numbers	O
quickly	O
.	O
It	O
'	O
s	O
really	O
simple	O
:	O
just	O
take	O
the	O
old	O
value	O
,	O
multiply	O
by	O
a	O
double	O
,	O
and	O
take	O
the	O
decimal	O
part	O
.	O
Here	O
is	O
my	O
QuickRandom	B-api_mention
class	O
in	O
its	O
entirety	O
:	O
#	O
pre	O
And	O
here	O
is	O
the	O
code	O
I	O
wrote	O
to	O
test	O
it	O
:	O
#	O
pre	O
It	O
is	O
a	O
very	O
simple	O
algorithm	O
that	O
simply	O
multiplies	O
the	O
previous	O
double	O
by	O
a	O
"	O
magic	O
number	O
"	O
double	O
.	O
I	O
threw	O
it	O
together	O
pretty	O
quickly	O
,	O
so	O
I	O
could	O
probably	O
make	O
it	O
better	O
,	O
but	O
strangely	O
,	O
it	O
seems	O
to	O
be	O
working	O
fine	O
.	O
This	O
is	O
sample	O
output	O
of	O
the	O
commented	O
-	O
out	O
lines	O
in	O
the	O
main	O
method	O
:	O
#	O
pre	O
Hm	O
.	O
Pretty	O
random	O
.	O
In	O
fact	O
,	O
that	O
would	O
work	O
for	O
a	O
random	O
number	O
generator	O
in	O
a	O
game	O
.	O
Here	O
is	O
sample	O
output	O
of	O
the	O
non	O
-	O
commented	O
out	O
part	O
:	O
#	O
pre	O
Wow	O
!	O
It	O
performs	O
almost	O
4	O
times	O
faster	O
than	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
.	O
I	O
remember	O
reading	O
somewhere	O
that	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
tons	O
of	O
crazy	O
modulus	O
and	O
division	O
stuff	O
.	O
Is	O
that	O
really	O
necessary	O
?	O
My	O
algorithm	O
performs	O
a	O
lot	O
faster	O
and	O
it	O
seems	O
pretty	O
random	O
.	O
I	O
have	O
two	O
questions	O
:	O
#	O
li	O
Is	O
my	O
algorithm	O
"	O
good	O
enough	O
"	O
(	O
for	O
,	O
say	O
,	O
a	O
game	O
,	O
where	O
really	O
random	O
numbers	O
aren	O
'	O
t	O
too	O
important	O
)	O
?	O
#	O
li	O
Why	O
does	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
do	O
so	O
much	O
when	O
it	O
seems	O
just	O
simple	O
multiplication	O
and	O
cutting	O
out	O
the	O
decimal	O
will	O
suffice	O
?	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
6780439	O
Here	O
'	O
s	O
a	O
simple	O
/	O
sinister	O
one	O
via	O
#	O
a	O
.	O
#	O
pre	O
Because	O
the	O
substring	O
refers	O
to	O
the	O
internal	O
representation	O
of	O
the	O
original	O
,	O
much	O
longer	O
string	O
,	O
the	O
original	O
stays	O
in	O
memory	O
.	O
Thus	O
,	O
as	O
long	O
as	O
you	O
have	O
a	O
StringLeaker	B-api_mention
in	O
play	O
,	O
you	O
have	O
the	O
whole	O
original	O
string	O
in	O
memory	O
,	O
too	O
,	O
even	O
though	O
you	O
might	O
think	O
you	O
'	O
re	O
just	O
holding	O
on	O
to	O
a	O
single	O
-	O
character	O
string	O
.	O
The	O
way	O
to	O
avoid	O
storing	O
an	O
unwanted	O
reference	O
to	O
the	O
original	O
string	O
is	O
to	O
do	O
something	O
like	O
this	O
:	O
#	O
pre	O
For	O
added	O
badness	O
,	O
you	O
might	O
also	O
.	B-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
the	O
substring	O
:	O
#	O
pre	O
Doing	O
so	O
will	O
keep	O
both	O
the	O
original	O
long	O
string	O
and	O
the	O
derived	O
substring	O
in	O
memory	O
even	O
after	O
the	O
StringLeaker	B-api_mention
instance	O
has	O
been	O
discarded	O
.	O
Question	O
-	O
5554217	O
,	O
answer	O
-	O
17300003	O
Another	O
way	O
is	O
to	O
use	O
an	O
array	O
as	O
a	O
type	O
,	O
e	O
.	O
g	O
.	O
:	O
MyClass	O
[	O
]	O
mcArray	O
=	O
gson	O
.	B-api_mention
fromJson	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
way	O
you	O
avoid	O
all	O
the	O
hassle	O
with	O
the	O
Type	B-api_mention
object	O
,	O
and	O
if	O
you	O
really	O
need	O
a	O
list	O
you	O
can	O
always	O
convert	O
the	O
array	O
to	O
a	O
list	O
by	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
mcList	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
IMHO	O
this	O
is	O
much	O
more	O
readable	O
.	O
And	O
to	O
make	O
it	O
be	O
an	O
actual	O
list	O
(	O
that	O
can	O
be	O
modified	O
,	O
see	O
limitations	O
of	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
then	O
just	O
do	O
the	O
following	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
mcList	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
29226136	O
Also	O
note	O
that	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
normally	O
contains	O
=	O
=	O
for	O
testing	O
as	O
this	O
is	O
the	O
first	O
thing	O
you	O
would	O
wish	O
to	O
test	O
for	O
if	O
you	O
wanted	O
to	O
test	O
if	O
two	O
objects	O
are	O
equal	O
.	O
And	O
=	O
=	O
actually	O
does	O
look	O
at	O
values	O
for	O
primitive	O
types	O
,	O
for	O
objects	O
it	O
checks	O
the	O
reference	O
.	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
29527145	O
Adding	O
local	O
classes	O
,	O
lambdas	O
and	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
complete	O
the	O
previous	O
two	O
answers	O
.	O
Further	O
,	O
I	O
add	O
arrays	O
of	O
lambdas	O
and	O
arrays	O
of	O
anonymous	O
classes	O
(	O
which	O
do	O
not	O
make	O
any	O
sense	O
in	O
practice	O
though	O
)	O
:	O
#	O
pre	O
This	O
is	O
the	O
full	O
output	O
:	O
#	O
pre	O
So	O
,	O
here	O
are	O
the	O
rules	O
.	O
First	O
,	O
lets	O
start	O
with	O
primitive	O
types	O
and	O
void	O
:	O
#	O
li	O
If	O
the	O
class	O
object	O
represents	O
a	O
primitive	O
type	O
or	O
void	O
,	O
all	O
the	O
four	O
methods	O
simply	O
returns	O
its	O
name	O
.	O
Now	O
the	O
rules	O
for	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
Every	O
non	O
-	O
lambda	O
and	O
non	O
-	O
array	O
class	O
or	O
interface	O
(	O
i	O
.	O
e	O
,	O
top	O
-	O
level	O
,	O
nested	O
,	O
inner	O
,	O
local	O
and	O
anonymous	O
)	O
has	O
a	O
name	O
(	O
which	O
is	O
returned	O
by	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
that	O
is	O
the	O
package	O
name	O
followed	O
by	O
a	O
dot	O
(	O
if	O
there	O
is	O
a	O
package	O
)	O
,	O
followed	O
by	O
the	O
name	O
of	O
its	O
class	O
-	O
file	O
as	O
generated	O
by	O
the	O
compiler	O
(	O
whithout	O
the	O
suffix	O
.	O
class	O
)	O
.	O
If	O
there	O
is	O
no	O
package	O
,	O
it	O
is	O
simply	O
the	O
name	O
of	O
the	O
class	O
-	O
file	O
.	O
If	O
the	O
class	O
is	O
an	O
inner	O
,	O
nested	O
,	O
local	O
or	O
anonymous	O
class	O
,	O
the	O
compiler	O
should	O
generate	O
at	O
least	O
one	O
$	O
in	O
its	O
class	O
-	O
file	O
name	O
.	O
Note	O
that	O
for	O
anonymous	O
classes	O
,	O
the	O
class	O
name	O
would	O
end	O
with	O
a	O
dollar	O
-	O
sign	O
followed	O
by	O
a	O
number	O
.	O
#	O
li	O
Lambda	O
class	O
names	O
are	O
generally	O
unpredictable	O
,	O
and	O
you	O
shouldn	O
'	O
t	O
care	O
about	O
they	O
anyway	O
.	O
Exactly	O
,	O
their	O
name	O
is	O
the	O
name	O
of	O
the	O
enclosing	O
class	O
,	O
followed	O
by	O
$	O
$	O
Lambda	O
$	O
,	O
followed	O
by	O
a	O
number	O
,	O
followed	O
by	O
a	O
slash	O
,	O
followed	O
by	O
another	O
number	O
.	O
#	O
li	O
The	O
class	O
descriptor	O
of	O
the	O
primitives	O
are	O
Z	O
for	O
boolean	O
,	O
B	O
for	O
byte	O
,	O
S	O
for	O
short	O
,	O
C	O
for	O
char	O
,	O
I	O
for	O
int	O
,	O
J	O
for	O
long	O
,	O
F	O
for	O
float	O
and	O
D	O
for	O
double	O
.	O
For	O
non	O
-	O
array	O
classes	O
and	O
interfaces	O
the	O
class	O
descriptor	O
is	O
L	O
followed	O
by	O
what	O
is	O
given	O
by	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
followed	O
by	O
;	O
.	O
For	O
array	O
classes	O
,	O
the	O
class	O
descriptor	O
is	O
[	O
followed	O
by	O
the	O
class	O
descriptor	O
of	O
the	O
component	O
type	O
(	O
which	O
may	O
be	O
itself	O
another	O
array	O
class	O
)	O
.	O
#	O
li	O
For	O
array	O
classes	O
,	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
its	O
class	O
descriptor	O
.	O
This	O
rule	O
seems	O
to	O
fail	O
only	O
for	O
array	O
classes	O
whose	O
the	O
component	O
type	O
is	O
a	O
lambda	O
(	O
which	O
possibly	O
is	O
a	O
bug	O
)	O
,	O
but	O
hopefully	O
this	O
should	O
not	O
matter	O
anyway	O
because	O
there	O
is	O
no	O
point	O
even	O
on	O
the	O
existence	O
of	O
array	O
classes	O
whose	O
component	O
type	O
is	O
a	O
lambda	O
.	O
Now	O
,	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
If	O
the	O
class	O
instance	O
represents	O
an	O
interface	O
(	O
or	O
an	O
annotation	O
,	O
which	O
is	O
a	O
special	O
type	O
of	O
interface	O
)	O
,	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
StringLiteral	O
+	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
is	O
a	O
primitive	O
,	O
it	O
returns	O
simply	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
is	O
something	O
else	O
(	O
a	O
class	O
type	O
,	O
even	O
if	O
it	O
is	O
a	O
pretty	O
weird	O
one	O
)	O
,	O
it	O
returns	O
StringLiteral	O
+	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
For	O
top	O
-	O
level	O
classes	O
and	O
interfaces	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
just	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
.	O
#	O
li	O
The	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
null	O
for	O
anonymous	O
or	O
local	O
classes	O
and	O
for	O
array	O
classes	O
of	O
those	O
.	O
#	O
li	O
For	O
inner	O
and	O
nested	O
classes	O
and	O
interfaces	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
would	O
replacing	O
the	O
compiler	O
-	O
introduced	O
dollar	O
-	O
signs	O
by	O
dots	O
.	O
#	O
li	O
For	O
array	O
classes	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
null	O
if	O
the	O
canonical	O
name	O
of	O
the	O
component	O
type	O
is	O
null	O
.	O
Otherwise	O
,	O
it	O
returns	O
the	O
canonical	O
name	O
of	O
the	O
component	O
type	O
followed	O
by	O
[	O
]	O
.	O
The	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
For	O
top	O
-	O
level	O
,	O
nested	O
,	O
inner	O
and	O
local	O
classes	O
,	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
the	O
name	O
of	O
the	O
class	O
as	O
written	O
in	O
the	O
source	O
file	O
.	O
#	O
li	O
For	O
anonymous	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
empty	O
String	B-api_mention
.	O
#	O
li	O
For	O
lambda	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
just	O
returns	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
return	O
without	O
the	O
package	O
name	O
.	O
This	O
do	O
not	O
makes	O
much	O
sense	O
and	O
looks	O
like	O
a	O
bug	O
for	O
me	O
,	O
but	O
there	O
is	O
no	O
point	O
in	O
calling	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
lambda	O
class	O
to	O
start	O
with	O
.	O
#	O
li	O
For	O
array	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
the	O
simple	O
name	O
of	O
the	O
component	O
class	O
followed	O
by	O
[	O
]	O
.	O
This	O
have	O
the	O
funny	O
/	O
weird	O
side	O
-	O
effect	O
that	O
array	O
classes	O
whose	O
component	O
type	O
is	O
an	O
anonymous	O
class	O
have	O
just	O
[	O
]	O
as	O
their	O
simple	O
names	O
.	O
Question	O
-	O
23699371	O
,	O
answer	O
-	O
23733628	O
The	O
easiest	O
way	O
to	O
implement	O
this	O
is	O
to	O
jump	O
on	O
the	O
sort	O
feature	O
as	O
it	O
already	O
provides	O
an	O
optional	O
Comparator	B-api_mention
which	O
can	O
be	O
created	O
using	O
an	O
element	O
’	O
s	O
property	O
.	O
Then	O
you	O
have	O
to	O
filter	O
duplicates	O
out	O
which	O
can	O
be	O
done	O
using	O
a	O
statefull	O
Predicate	B-api_mention
which	O
uses	O
the	O
fact	O
that	O
for	O
a	O
sorted	O
stream	O
all	O
equal	O
elements	O
are	O
adjacent	O
:	O
#	O
pre	O
Of	O
course	O
,	O
a	O
statefull	O
Predicate	B-api_mention
is	O
not	O
thread	O
-	O
safe	O
,	O
however	O
if	O
that	O
’	O
s	O
your	O
need	O
you	O
can	O
move	O
this	O
logic	O
into	O
a	O
Collector	B-api_mention
and	O
let	O
the	O
stream	O
take	O
care	O
of	O
the	O
thread	O
-	O
safety	O
when	O
using	O
your	O
Collector	B-api_mention
.	O
This	O
depends	O
on	O
what	O
you	O
want	O
to	O
do	O
with	O
the	O
stream	O
of	O
distinct	O
elements	O
which	O
you	O
didn	O
’	O
t	O
tell	O
us	O
in	O
your	O
question	O
.	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17842210	O
After	O
digging	O
around	O
for	O
a	O
while	O
,	O
I	O
can	O
'	O
t	O
say	O
that	O
I	O
find	O
the	O
answer	O
,	O
but	O
I	O
think	O
it	O
'	O
s	O
quite	O
close	O
now	O
.	O
First	O
,	O
we	O
need	O
to	O
know	O
when	O
a	O
StackOverflowError	B-api_mention
will	O
be	O
thrown	O
.	O
In	O
fact	O
,	O
the	O
stack	O
for	O
a	O
java	O
thread	O
stores	O
frames	O
,	O
which	O
containing	O
all	O
the	O
data	O
needed	O
for	O
invoking	O
a	O
method	O
and	O
resume	O
.	O
According	O
to	O
Java	O
Language	O
Specifications	O
for	O
JAVA	O
6	O
,	O
when	O
invoking	O
a	O
method	O
,	O
#	O
blockquote	O
Second	O
,	O
we	O
should	O
make	O
it	O
clear	O
what	O
is	O
"	O
there	O
is	O
not	O
sufficient	O
memory	O
available	O
to	O
create	O
such	O
an	O
activation	O
frame	O
"	O
.	O
According	O
to	O
Java	O
Virtual	O
Machine	O
Specifications	O
for	O
JAVA	O
6	O
,	O
#	O
blockquote	O
So	O
,	O
when	O
a	O
frame	O
is	O
created	O
,	O
there	O
should	O
be	O
enough	O
heap	O
space	O
to	O
create	O
a	O
stack	O
frame	O
and	O
enough	O
stack	O
space	O
to	O
store	O
the	O
new	O
reference	O
which	O
point	O
to	O
the	O
new	O
stack	O
frame	O
if	O
the	O
frame	O
is	O
heap	O
allocated	O
.	O
Now	O
let	O
'	O
s	O
go	O
back	O
to	O
the	O
question	O
.	O
From	O
the	O
above	O
,	O
we	O
can	O
know	O
that	O
when	O
a	O
method	O
is	O
execute	O
,	O
it	O
may	O
just	O
costs	O
the	O
same	O
amount	O
of	O
stack	O
space	O
.	O
And	O
invoking	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	O
may	O
)	O
needs	O
5	O
level	O
of	O
method	O
invocation	O
,	O
so	O
5	O
frames	O
need	O
to	O
be	O
created	O
.	O
Then	O
when	O
StackOverflowError	B-api_mention
is	O
thrown	O
out	O
,	O
it	O
has	O
to	O
go	O
back	O
5	O
times	O
to	O
get	O
enough	O
stack	O
space	O
to	O
store	O
5	O
frames	O
'	O
references	O
.	O
Hence	O
4	O
is	O
print	O
out	O
.	O
Why	O
not	O
5	O
?	O
Because	O
you	O
use	O
cnt	O
+	O
+	O
.	O
Change	O
it	O
to	O
+	O
+	O
cnt	O
,	O
and	O
then	O
you	O
will	O
get	O
5	O
.	O
And	O
you	O
will	O
notice	O
that	O
when	O
the	O
size	O
of	O
stack	O
go	O
to	O
a	O
high	O
level	O
,	O
you	O
will	O
get	O
50	O
sometimes	O
.	O
That	O
is	O
because	O
the	O
amount	O
of	O
available	O
heap	O
space	O
need	O
to	O
be	O
taken	O
into	O
consideration	O
then	O
.	O
When	O
the	O
stack	O
'	O
s	O
size	O
is	O
too	O
large	O
,	O
maybe	O
heap	O
space	O
will	O
run	O
out	O
before	O
stack	O
.	O
And	O
(	O
maybe	O
)	O
the	O
actual	O
size	O
of	O
stack	O
frames	O
of	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
is	O
about	O
51	O
times	O
of	O
main	O
,	O
therefore	O
it	O
goes	O
back	O
51	O
times	O
and	O
print	O
50	O
.	O
Question	O
-	O
22740464	O
,	O
answer	O
-	O
22741520	O
Unfortunately	O
this	O
answer	O
is	O
probably	O
of	O
little	O
or	O
no	O
help	O
whatsoever	O
,	O
but	O
I	O
did	O
a	O
forensics	O
analysis	O
of	O
the	O
Java	O
Lambda	O
Mailing	O
list	O
to	O
see	O
if	O
I	O
could	O
find	O
the	O
cause	O
of	O
this	O
design	O
.	O
This	O
is	O
what	O
I	O
found	O
out	O
.	O
In	O
the	O
beginning	O
there	O
was	O
an	O
instance	O
method	O
for	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
Stream	I-api_mention
)	I-api_mention
In	O
the	O
mailing	O
list	O
I	O
can	O
clearly	O
see	O
the	O
method	O
was	O
originally	O
implemented	O
as	O
an	O
instance	O
method	O
,	O
as	O
you	O
can	O
read	O
in	O
this	O
thread	O
by	O
Paul	O
Sandoz	O
,	O
about	O
the	O
concat	B-api_mention
operation	O
.	O
In	O
it	O
they	O
discuss	O
the	O
issues	O
that	O
could	O
arise	O
from	O
those	O
cases	O
in	O
which	O
the	O
stream	O
could	O
be	O
infinite	O
and	O
what	O
concatenation	O
would	O
mean	O
in	O
those	O
cases	O
,	O
but	O
I	O
do	O
not	O
think	O
that	O
was	O
the	O
reason	O
for	O
the	O
modification	O
.	O
You	O
see	O
in	O
this	O
other	O
thread	O
that	O
some	O
early	O
users	O
of	O
the	O
JDK	O
8	O
questioned	O
about	O
the	O
behavior	O
of	O
the	O
concat	O
instance	O
method	O
when	O
used	O
with	O
null	O
arguments	O
.	O
This	O
other	O
thread	O
reveals	O
,	O
though	O
,	O
that	O
the	O
design	O
of	O
the	O
concat	O
method	O
was	O
under	O
discussion	O
.	O
Refactored	O
to	O
Streams	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
Stream	I-api_mention
,	I-api_mention
Stream	I-api_mention
)	I-api_mention
But	O
without	O
any	O
explanation	O
,	O
suddenly	O
,	O
the	O
methods	O
were	O
changed	O
to	O
static	O
methods	O
,	O
as	O
you	O
can	O
see	O
in	O
this	O
thread	O
about	O
combining	O
streams	O
.	O
This	O
is	O
perhaps	O
the	O
only	O
mail	O
thread	O
that	O
sheds	O
a	O
bit	O
of	O
light	O
about	O
this	O
change	O
,	O
but	O
it	O
was	O
not	O
clear	O
enough	O
for	O
me	O
to	O
determine	O
the	O
reason	O
for	O
the	O
refactoring	O
.	O
But	O
we	O
can	O
see	O
they	O
did	O
a	O
commit	O
in	O
which	O
they	O
suggested	O
to	O
move	O
the	O
concat	O
method	O
out	O
of	O
Stream	B-api_mention
and	O
into	O
the	O
helper	O
class	O
Streams	B-api_mention
.	O
Refactored	O
to	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
Stream	I-api_mention
,	I-api_mention
Stream	I-api_mention
)	I-api_mention
Later	O
,	O
it	O
was	O
moved	O
again	O
from	O
Streams	B-api_mention
to	O
Stream	B-api_mention
,	O
but	O
yet	O
again	O
,	O
no	O
explanation	O
for	O
that	O
.	O
So	O
,	O
bottom	O
line	O
,	O
the	O
reason	O
for	O
the	O
design	O
is	O
not	O
entirely	O
clear	O
for	O
me	O
and	O
I	O
could	O
not	O
find	O
a	O
good	O
explanation	O
.	O
I	O
guess	O
you	O
could	O
still	O
ask	O
the	O
question	O
in	O
the	O
mailing	O
list	O
.	O
Some	O
Alternatives	O
for	O
Stream	B-api_mention
Concatenation	O
This	O
other	O
thread	O
by	O
Michael	O
Hixson	O
discusses	O
/	O
asks	O
about	O
other	O
ways	O
to	O
combine	O
/	O
concat	O
streams	O
#	O
blockquote	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175175	O
Note	O
that	O
a	O
.	O
b	O
and	O
c	O
are	O
instances	O
of	O
primitive	O
wrapper	O
classes	O
(	O
such	O
as	O
Integer	B-api_mention
,	O
Double	B-api_mention
,	O
etc	O
.	O
.	O
.	O
)	O
.	O
These	O
classes	O
are	O
final	O
and	O
cannot	O
be	O
extended	O
,	O
so	O
you	O
can	O
'	O
t	O
override	O
their	O
equals	O
implementation	O
.	O
Therefore	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
,	O
since	O
those	O
classes	O
implement	O
equals	O
properly	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791724	O
Use	O
the	O
replaceEach	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
from	O
Apache	O
Commons	O
StringUtils	B-api_mention
:	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
10904911	O
I	O
am	O
using	O
trying	O
to	O
use	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
but	O
I	O
think	O
I	O
am	O
doing	O
it	O
wrong	O
:	O
#	O
a	O
My	O
code	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
[	O
I	O
@	O
23fc4bec	O
Also	O
I	O
tried	O
printing	O
like	O
this	O
,	O
but	O
:	O
#	O
pre	O
I	O
took	O
this	O
code	O
out	O
of	O
bigger	O
and	O
more	O
complex	O
code	O
,	O
but	O
I	O
can	O
add	O
it	O
if	O
needed	O
.	O
But	O
this	O
should	O
give	O
general	O
information	O
.	O
I	O
am	O
looking	O
for	O
output	O
,	O
like	O
in	O
Oracle	O
'	O
s	O
documentation	O
:	O
#	O
blockquote	O
Question	O
-	O
7935858	O
I	O
have	O
prepared	O
a	O
simple	O
code	O
snippet	O
in	O
order	O
to	O
separate	O
the	O
erroneous	O
portion	O
from	O
my	O
web	O
application	O
.	O
#	O
pre	O
I	O
have	O
tested	O
it	O
while	O
building	O
a	O
web	O
application	O
JSF	O
.	O
I	O
just	O
want	O
to	O
know	O
why	O
in	O
the	O
above	O
code	O
temp	O
.	O
split	O
(	O
args	O
)	O
does	O
not	O
work	O
.	O
The	O
statement	O
,	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
displays	O
nothing	O
on	O
the	O
console	O
means	O
that	O
it	O
doesn	O
'	O
t	O
go	O
through	O
the	O
loop	O
.	O
When	O
I	O
change	O
the	O
argument	O
of	O
the	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
other	O
characters	O
,	O
It	O
works	O
just	O
fine	O
as	O
usual	O
.	O
What	O
might	O
be	O
the	O
problem	O
?	O
Question	O
-	O
12539365	O
,	O
answer	O
-	O
29349910	O
I	O
must	O
say	O
,	O
that	O
you	O
are	O
absolutely	O
right	O
from	O
a	O
classical	O
approach	O
'	O
s	O
point	O
of	O
view	O
:	O
#	O
li	O
If	O
you	O
first	O
create	O
(	O
or	O
change	O
)	O
business	O
logic	O
of	O
your	O
application	O
and	O
then	O
cover	O
it	O
with	O
(	O
adopt	O
)	O
tests	O
(	O
Test	O
-	O
Last	O
approach	O
)	O
,	O
then	O
it	O
will	O
be	O
very	O
painful	O
and	O
dangerous	O
to	O
let	O
tests	O
know	O
anything	O
about	O
how	O
your	O
software	O
works	O
,	O
other	O
than	O
checking	O
inputs	O
and	O
outputs	O
.	O
#	O
li	O
If	O
you	O
are	O
practicing	O
a	O
Test	O
-	O
Driven	O
approach	O
,	O
then	O
your	O
tests	O
are	O
the	O
first	O
to	O
be	O
written	O
,	O
to	O
be	O
changed	O
and	O
to	O
reflect	O
the	O
use	O
cases	O
of	O
your	O
software	O
'	O
s	O
functionality	O
.	O
The	O
implementation	O
depends	O
on	O
tests	O
.	O
That	O
sometimes	O
mean	O
,	O
that	O
you	O
want	O
your	O
software	O
to	O
be	O
implemented	O
in	O
some	O
particular	O
way	O
,	O
e	O
.	O
g	O
.	O
rely	O
on	O
some	O
other	O
component	O
'	O
s	O
method	O
or	O
even	O
call	O
it	O
a	O
particular	O
amount	O
of	O
times	O
.	O
That	O
is	O
where	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
comes	O
in	O
handy	O
!	O
It	O
is	O
important	O
to	O
remember	O
,	O
that	O
there	O
are	O
no	O
universal	O
tools	O
.	O
The	O
type	O
of	O
software	O
,	O
it	O
'	O
s	O
size	O
,	O
company	O
goals	O
and	O
market	O
situation	O
,	O
team	O
skills	O
and	O
many	O
other	O
things	O
influence	O
the	O
decision	O
on	O
which	O
approach	O
to	O
use	O
at	O
your	O
particular	O
case	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
5193094	O
There	O
are	O
basically	O
two	O
alternatives	O
,	O
using	O
setLength	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
reset	O
the	O
StringBuilder	B-api_mention
or	O
creating	O
a	O
new	O
one	O
in	O
each	O
iteration	O
.	O
Both	O
can	O
have	O
pros	O
and	O
cons	O
depending	O
on	O
the	O
usage	O
.	O
If	O
you	O
know	O
the	O
expected	O
capacity	O
of	O
the	O
StringBuilder	B-api_mention
beforehand	O
,	O
creating	O
a	O
new	O
one	O
each	O
time	O
should	O
be	O
just	O
as	O
fast	O
as	O
setting	O
a	O
new	O
length	O
.	O
It	O
will	O
also	O
help	O
the	O
garbage	O
collector	O
,	O
since	O
each	O
StringBuilder	B-api_mention
will	O
be	O
relatively	O
short	O
-	O
lived	O
and	O
the	O
gc	O
is	O
optimized	O
for	O
that	O
.	O
When	O
you	O
don	O
'	O
t	O
know	O
the	O
capacity	O
,	O
reusing	O
the	O
same	O
StringBuilder	B-api_mention
might	O
be	O
faster	O
.	O
Each	O
time	O
you	O
exceed	O
the	O
capacity	O
when	O
appending	O
,	O
a	O
new	O
backing	O
array	O
has	O
to	O
be	O
allocated	O
and	O
the	O
previous	O
content	O
has	O
to	O
be	O
copied	O
.	O
By	O
reusing	O
the	O
same	O
StringBuilder	B-api_mention
,	O
it	O
will	O
reach	O
the	O
needed	O
capacity	O
after	O
some	O
iterations	O
and	O
there	O
won	O
'	O
t	O
be	O
any	O
copying	O
thereafter	O
.	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
7056786	O
It	O
'	O
s	O
because	O
when	O
you	O
enter	O
a	O
number	O
then	O
press	O
Enter	O
,	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
consumes	O
only	O
the	O
number	O
,	O
not	O
the	O
"	O
end	O
of	O
line	O
"	O
.	O
When	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
executes	O
,	O
it	O
consumes	O
the	O
"	O
end	O
of	O
line	O
"	O
still	O
in	O
the	O
buffer	O
from	O
the	O
first	O
input	O
.	O
Instead	O
,	O
use	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
immediately	O
after	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32752970	O
I	O
will	O
try	O
to	O
summarize	O
three	O
moreless	O
reasonable	O
versions	O
which	O
were	O
proposed	O
in	O
comments	O
.	O
@	O
Holger	O
says	O
:	O
#	O
blockquote	O
This	O
is	O
the	O
most	O
easy	O
thing	O
to	O
test	O
.	O
Let	O
'	O
s	O
compile	O
such	O
program	O
:	O
#	O
pre	O
Run	O
it	O
with	O
java	O
-	O
verbose	O
:	O
class	O
HashMapTest	O
.	O
This	O
will	O
print	O
the	O
class	O
loading	O
events	O
as	O
they	O
occur	O
.	O
With	O
JDK	O
1	O
.	O
8	O
.	O
0	O
_	O
60	O
I	O
see	O
more	O
than	O
400	O
classes	O
loaded	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
HashMap	B-api_mention
is	O
loaded	O
long	O
before	O
application	O
code	O
and	O
Arrays	B-api_mention
is	O
loaded	O
only	O
14	O
classes	O
after	O
HashMap	B-api_mention
.	O
The	O
HashMap	O
load	O
is	O
triggered	O
by	O
sun	O
.	O
reflect	O
.	O
Reflection	O
initialization	O
as	O
it	O
has	O
HashMap	O
static	O
fields	O
.	O
The	O
Arrays	O
load	O
is	O
likely	O
to	O
be	O
triggered	O
by	O
WeakHashMap	O
load	O
which	O
actually	O
has	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
in	O
the	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
WeakHashMap	B-api_mention
load	O
is	O
triggered	O
by	O
java	O
.	O
lang	O
.	O
ClassValue	O
$	O
ClassValueMap	O
which	O
extends	O
WeakHashMap	B-api_mention
.	O
The	O
ClassValueMap	O
is	O
present	O
in	O
every	O
java	O
.	O
lang	O
.	O
Class	O
instance	O
.	O
So	O
to	O
me	O
seems	O
that	O
without	O
Arrays	B-api_mention
class	O
the	O
JDK	O
cannot	O
be	O
initialized	O
at	O
all	O
.	O
Also	O
the	O
Arrays	B-api_mention
static	O
initializer	O
is	O
very	O
short	O
,	O
it	O
only	O
initializes	O
the	O
assertion	O
mechanism	O
.	O
This	O
mechanism	O
is	O
used	O
in	O
many	O
other	O
classes	O
(	O
including	O
,	O
for	O
example	O
,	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Throwable	I-api_mention
which	O
is	O
loaded	O
very	O
early	O
)	O
.	O
No	O
other	O
static	O
initialization	O
steps	O
are	O
performed	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Arrays	I-api_mention
.	O
Thus	O
@	O
Holger	O
version	O
seems	O
incorrect	O
to	O
me	O
.	O
Here	O
we	O
also	O
found	O
very	O
interesting	O
thing	O
.	O
The	O
WeakHashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
still	O
uses	O
Arrays	O
.	O
fill	O
.	O
It	O
'	O
s	O
interesting	O
when	O
it	O
appeared	O
there	O
,	O
but	O
unfortunately	O
this	O
goes	O
to	O
prehistoric	O
times	O
(	O
it	O
was	O
already	O
there	O
in	O
the	O
very	O
first	O
public	O
OpenJDK	O
repository	O
)	O
.	O
Next	O
,	O
@	O
MarcoTopolnik	O
says	O
:	O
#	O
blockquote	O
It	O
was	O
actually	O
surprising	O
for	O
me	O
that	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
is	O
not	O
directly	O
intrinsified	O
(	O
see	O
intrinsic	O
list	O
generated	O
by	O
@	O
apangin	O
)	O
.	O
Seems	O
that	O
such	O
loop	O
can	O
be	O
recognized	O
and	O
vectorized	O
by	O
JVM	O
without	O
explicit	O
intrinsic	O
handling	O
.	O
So	O
it	O
'	O
s	O
true	O
that	O
extra	O
call	O
can	O
be	O
not	O
inlined	O
in	O
very	O
specific	O
cases	O
(	O
for	O
example	O
if	O
MaxInlineLevel	O
limit	O
is	O
reached	O
)	O
.	O
On	O
the	O
other	O
hand	O
it	O
'	O
s	O
very	O
rare	O
situation	O
and	O
it	O
'	O
s	O
only	O
a	O
single	O
call	O
,	O
it	O
'	O
s	O
not	O
a	O
call	O
inside	O
loop	O
,	O
and	O
it	O
'	O
s	O
a	O
static	O
,	O
not	O
virtual	O
/	O
interface	O
call	O
,	O
thus	O
the	O
performance	O
improvement	O
could	O
be	O
only	O
marginal	O
and	O
only	O
in	O
some	O
specific	O
scenarios	O
.	O
Not	O
the	O
thing	O
the	O
JVM	O
developers	O
usually	O
care	O
.	O
Also	O
it	O
should	O
be	O
noted	O
that	O
even	O
C1	O
'	O
client	O
'	O
compiler	O
(	O
tier	O
1	O
-	O
3	O
)	O
is	O
capable	O
to	O
inline	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
called	O
,	O
for	O
example	O
,	O
in	O
WeakHashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
as	O
inlining	O
log	O
(	O
-	O
XX	O
:	O
+	O
UnlockDiagnosticVMOptions	O
-	O
XX	O
:	O
+	O
PrintCompilation	O
-	O
XX	O
:	O
+	O
PrintInlining	O
)	O
says	O
:	O
#	O
pre	O
Of	O
course	O
,	O
it	O
'	O
s	O
also	O
easily	O
inlined	O
by	O
smart	O
and	O
powerful	O
C2	O
'	O
server	O
'	O
compiler	O
.	O
Thus	O
I	O
see	O
no	O
problems	O
here	O
.	O
Seems	O
that	O
@	O
Marco	O
version	O
is	O
incorrect	O
either	O
.	O
Finally	O
we	O
have	O
a	O
couple	O
of	O
comments	O
from	O
@	O
StuartMarks	O
(	O
who	O
is	O
JDK	O
developer	O
,	O
thus	O
some	O
official	O
voice	O
)	O
:	O
#	O
blockquote	O
Indeed	O
the	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
contained	O
the	O
loop	O
many	O
years	O
,	O
was	O
replaced	O
with	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
on	O
Apr	O
10th	O
,	O
2013	O
and	O
stayed	O
less	O
one	O
half	O
-	O
a	O
-	O
year	O
until	O
Sept	O
4th	O
when	O
the	O
discussed	O
commit	O
was	O
introduced	O
.	O
The	O
discussed	O
commit	O
was	O
actually	O
a	O
major	O
rewrite	O
of	O
the	O
HashMap	B-api_mention
internals	O
to	O
fix	O
JDK	O
-	O
8023463	O
issue	O
.	O
It	O
was	O
a	O
long	O
story	O
about	O
possibility	O
to	O
poison	O
the	O
HashMap	B-api_mention
with	O
keys	O
having	O
duplicating	O
hashcodes	O
reducing	O
HashMap	B-api_mention
search	O
speed	O
to	O
linear	O
making	O
it	O
vulnerable	O
to	O
DoS	O
-	O
attacks	O
.	O
The	O
attempts	O
to	O
solve	O
this	O
were	O
performed	O
in	O
JDK	O
-	O
7	O
including	O
some	O
randomization	O
of	O
String	B-api_mention
hashCode	O
.	O
So	O
seems	O
that	O
the	O
HashMap	B-api_mention
implementation	O
was	O
forked	O
from	O
the	O
earlier	O
commit	O
,	O
developed	O
independently	O
,	O
then	O
merged	O
into	O
the	O
master	O
branch	O
overwriting	O
several	O
changes	O
introduced	O
in	O
-	O
between	O
.	O
We	O
may	O
support	O
this	O
hypothesis	O
performing	O
a	O
diff	O
.	O
Take	O
the	O
version	O
where	O
Arrays	O
.	O
fill	O
was	O
removed	O
(	O
2013	O
-	O
09	O
-	O
04	O
)	O
and	O
compare	O
it	O
with	O
previous	O
version	O
(	O
2013	O
-	O
07	O
-	O
30	O
)	O
.	O
The	O
diff	O
-	O
U0	O
output	O
has	O
4341	O
lines	O
.	O
Now	O
let	O
'	O
s	O
diff	O
against	O
the	O
version	O
prior	O
to	O
one	O
when	O
Arrays	O
.	O
fill	O
was	O
added	O
(	O
2013	O
-	O
04	O
-	O
01	O
)	O
.	O
Now	O
diff	O
-	O
U0	O
contains	O
only	O
2680	O
lines	O
.	O
Thus	O
the	O
newer	O
version	O
actually	O
more	O
similar	O
to	O
the	O
older	O
than	O
to	O
immediate	O
parent	O
.	O
Conclusion	O
So	O
to	O
conclude	O
I	O
would	O
agree	O
with	O
Stuart	O
Marks	O
.	O
There	O
were	O
no	O
concrete	O
reason	O
to	O
remove	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
,	O
it	O
'	O
s	O
just	O
because	O
the	O
in	O
-	O
between	O
change	O
was	O
overwritten	O
by	O
mistake	O
.	O
Using	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
is	O
perfectly	O
fine	O
both	O
in	O
JDK	O
code	O
and	O
in	O
user	O
applications	O
and	O
used	O
,	O
for	O
example	O
,	O
in	O
WeakHashMap	B-api_mention
.	O
The	O
Arrays	B-api_mention
class	O
is	O
loaded	O
anyways	O
pretty	O
early	O
during	O
the	O
JDK	O
initialization	O
,	O
has	O
very	O
simple	O
static	O
initializer	O
and	O
Arrays	O
.	O
fill	O
method	O
can	O
be	O
easily	O
inlined	O
even	O
by	O
client	O
compiler	O
,	O
so	O
no	O
performance	O
drawback	O
should	O
be	O
noted	O
.	O
Question	O
-	O
12552863	O
The	O
Java	O
7	O
try	O
-	O
with	O
-	O
resources	O
syntax	O
(	O
also	O
known	O
as	O
ARM	O
block	O
(	O
Automatic	O
Resource	O
Management	O
)	O
)	O
is	O
nice	O
,	O
short	O
and	O
straightforward	O
when	O
using	O
only	O
one	O
AutoCloseable	B-api_mention
resource	O
.	O
However	O
,	O
I	O
am	O
not	O
sure	O
what	O
is	O
the	O
correct	O
idiom	O
when	O
I	O
need	O
to	O
declare	O
multiple	O
resources	O
that	O
are	O
dependent	O
on	O
each	O
other	O
,	O
for	O
example	O
a	O
FileWriter	B-api_mention
and	O
a	O
BufferedWriter	B-api_mention
that	O
wraps	O
it	O
.	O
Of	O
course	O
,	O
this	O
question	O
concerns	O
any	O
case	O
when	O
some	O
AutoCloseable	B-api_mention
resources	O
are	O
wrapped	O
,	O
not	O
only	O
these	O
two	O
specific	O
classes	O
.	O
I	O
came	O
up	O
with	O
the	O
three	O
following	O
alternatives	O
:	O
1	O
)	O
The	O
naive	O
idiom	O
I	O
have	O
seen	O
is	O
to	O
declare	O
only	O
the	O
top	O
-	O
level	O
wrapper	O
in	O
the	O
ARM	O
-	O
managed	O
variable	O
:	O
#	O
pre	O
This	O
is	O
nice	O
and	O
short	O
,	O
but	O
it	O
is	O
broken	O
.	O
Because	O
the	O
underlying	O
FileWriter	B-api_mention
is	O
not	O
declared	O
in	O
a	O
variable	O
,	O
it	O
will	O
never	O
be	O
closed	O
directly	O
in	O
the	O
generated	O
finally	O
block	O
.	O
It	O
will	O
be	O
closed	O
only	O
through	O
the	O
close	O
method	O
of	O
the	O
wrapping	O
BufferedWriter	B-api_mention
.	O
The	O
problem	O
is	O
,	O
that	O
if	O
an	O
exception	O
is	O
thrown	O
from	O
the	O
bw	O
'	O
s	O
constructor	O
,	O
it	O
'	O
s	O
close	B-api_mention
will	O
not	O
be	O
called	O
and	O
therefore	O
the	O
underlying	O
FileWriter	B-api_mention
will	O
not	O
be	O
closed	O
.	O
2	O
)	O
#	O
pre	O
Here	O
,	O
both	O
the	O
underlying	O
and	O
the	O
wrapping	O
resource	O
are	O
declared	O
in	O
the	O
ARM	O
-	O
managed	O
variables	O
,	O
so	O
both	O
of	O
them	O
will	O
be	O
certainly	O
closed	O
,	O
so	O
certainly	O
that	O
the	O
underlying	O
fw	O
.	B-api_mention
close	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
called	O
twice	O
,	O
first	O
directly	O
and	O
for	O
the	O
second	O
time	O
through	O
the	O
wrapping	O
bw	O
.	B-api_mention
close	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
should	O
not	O
be	O
a	O
problem	O
for	O
these	O
two	O
specific	O
classes	O
that	O
both	O
implement	O
Closeable	B-api_mention
(	O
which	O
is	O
a	O
subtype	O
of	O
AutoCloseable	B-api_mention
)	O
,	O
whose	O
contract	O
states	O
that	O
multiple	O
calls	O
to	O
close	O
are	O
permitted	O
:	O
#	O
blockquote	O
However	O
,	O
in	O
a	O
general	O
case	O
,	O
I	O
can	O
have	O
resources	O
that	O
do	O
implement	O
only	O
AutoCloseable	B-api_mention
(	O
and	O
not	O
Closeable	B-api_mention
)	O
,	O
which	O
doesn	O
'	O
t	O
guarantee	O
that	O
the	O
close	B-api_mention
can	O
be	O
called	O
multiple	O
times	O
:	O
#	O
blockquote	O
3	O
)	O
#	O
pre	O
This	O
version	O
should	O
be	O
theoretically	O
correct	O
,	O
because	O
only	O
the	O
fw	O
represents	O
a	O
real	O
resource	O
that	O
needs	O
to	O
be	O
cleaned	O
up	O
.	O
The	O
bw	O
does	O
'	O
t	O
itself	O
hold	O
any	O
resource	O
,	O
it	O
only	O
delegates	O
to	O
the	O
fw	O
,	O
so	O
it	O
should	O
be	O
sufficient	O
to	O
only	O
close	O
the	O
underlying	O
fw	O
.	O
On	O
the	O
other	O
hand	O
,	O
the	O
syntax	O
is	O
a	O
bit	O
irregular	O
and	O
also	O
,	O
Eclipse	O
issues	O
a	O
warning	O
,	O
which	O
I	O
believe	O
is	O
a	O
false	O
alarm	O
,	O
but	O
it	O
is	O
still	O
a	O
warning	O
that	O
one	O
has	O
to	O
deal	O
with	O
:	O
#	O
blockquote	O
So	O
,	O
which	O
approach	O
to	O
go	O
for	O
?	O
Or	O
have	O
I	O
missed	O
some	O
other	O
idiom	O
that	O
is	O
the	O
correct	O
one	O
?	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28596792	O
To	O
me	O
,	O
it	O
seems	O
that	O
"	O
because	O
it	O
should	O
behave	O
the	O
same	O
as	O
zero	O
"	O
would	O
make	O
a	O
good	O
answer	O
.	O
Arithmetic	O
overflow	O
and	O
underflow	O
should	O
be	O
handlable	O
similarly	O
.	O
If	O
you	O
underflow	O
from	O
the	O
largest	O
near	O
-	O
infinitesimally	O
small	O
value	O
which	O
can	O
be	O
stored	O
in	O
a	O
float	O
,	O
you	O
get	O
zero	O
,	O
and	O
zeros	O
compare	O
as	O
identical	O
.	O
If	O
you	O
overflow	O
from	O
the	O
largest	O
near	O
-	O
infinitely	O
large	O
value	O
which	O
can	O
be	O
stored	O
in	O
a	O
float	O
,	O
you	O
get	O
INF	O
,	O
and	O
INFs	O
compare	O
as	O
identical	O
.	O
This	O
means	O
that	O
code	O
which	O
handles	O
numbers	O
which	O
are	O
out	O
-	O
of	O
-	O
scope	O
in	O
both	O
directions	O
will	O
not	O
require	O
separate	O
special	O
-	O
casing	O
for	O
one	O
or	O
the	O
other	O
.	O
Instead	O
,	O
either	O
both	O
or	O
neither	O
will	O
need	O
to	O
be	O
treated	O
differently	O
.	O
And	O
the	O
simplest	O
requirement	O
is	O
covered	O
by	O
the	O
"	O
neither	O
"	O
case	O
:	O
you	O
want	O
to	O
check	O
if	O
something	O
over	O
/	O
underflowed	O
,	O
you	O
can	O
compare	O
it	O
to	O
zero	O
/	O
INF	O
using	O
just	O
the	O
normal	O
arithmetic	O
comparison	O
operators	O
,	O
without	O
needing	O
to	O
know	O
you	O
current	O
language	O
'	O
s	O
special	O
syntax	O
for	O
the	O
checking	O
command	O
:	O
is	O
it	O
Math	B-api_mention
.	I-api_mention
isInfinite	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
Float	B-api_mention
.	I-api_mention
checkForPositiveInfinity	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
hasOverflowed	B-api_mention
(	I-api_mention
)	I-api_mention
.	O
.	O
.	O
?	O
Question	O
-	O
23756966	O
While	O
investigating	O
for	O
a	O
little	O
debate	O
w	O
.	O
r	O
.	O
t	O
.	O
using	O
StringLiteral	B-api_mention
+	O
n	O
and	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
to	O
convert	O
an	O
integer	O
primitive	O
to	O
a	O
string	O
I	O
wrote	O
this	O
JMH	O
microbenchmark	O
:	O
#	O
pre	O
I	O
ran	O
it	O
with	O
the	O
default	O
JMH	O
options	O
with	O
both	O
Java	O
VMs	O
that	O
exist	O
on	O
my	O
Linux	O
machine	O
(	O
up	O
-	O
to	O
-	O
date	O
Mageia	O
4	O
64	O
-	O
bit	O
,	O
Intel	O
i7	O
-	O
3770	O
CPU	O
,	O
32GB	O
RAM	O
)	O
.	O
The	O
first	O
JVM	O
was	O
the	O
one	O
supplied	O
with	O
Oracle	O
JDK	O
8u5	O
64	O
-	O
bit	O
:	O
#	O
pre	O
With	O
this	O
JVM	O
I	O
got	O
pretty	O
much	O
what	O
I	O
expected	O
:	O
#	O
pre	O
I	O
.	O
e	O
.	O
using	O
the	O
StringBuilder	B-api_mention
class	O
is	O
slower	O
due	O
to	O
the	O
additional	O
overhead	O
of	O
creating	O
the	O
StringBuilder	B-api_mention
object	O
and	O
appending	O
an	O
empty	O
string	O
.	O
Using	O
String	B-api_mention
.	I-api_mention
format	I-api_mention
(	I-api_mention
args	I-api_mention
)	O
is	O
even	O
slower	O
,	O
by	O
an	O
order	O
of	O
magnitude	O
or	O
so	O
.	O
The	O
distribution	O
-	O
provided	O
compiler	O
,	O
on	O
the	O
other	O
hand	O
,	O
is	O
based	O
on	O
OpenJDK	O
1	O
.	O
7	O
:	O
#	O
pre	O
The	O
results	O
here	O
were	O
interesting	O
:	O
#	O
pre	O
Why	O
does	O
StringBuilder	B-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
appear	O
so	O
much	O
faster	O
with	O
this	O
JVM	O
?	O
Looking	O
at	O
the	O
StringBuilder	B-api_mention
class	O
source	O
code	O
revealed	O
nothing	O
particularly	O
interesting	O
-	O
the	O
method	O
in	O
question	O
is	O
almost	O
identical	O
to	O
Integer	O
#	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Interestingly	O
enough	O
,	O
appending	O
the	O
result	O
of	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
the	O
stringBuilder2	O
microbenchmark	O
)	O
does	O
not	O
appear	O
to	O
be	O
faster	O
.	O
Is	O
this	O
performance	O
discrepancy	O
an	O
issue	O
with	O
the	O
testing	O
harness	O
?	O
Or	O
does	O
my	O
OpenJDK	O
JVM	O
contain	O
optimizations	O
that	O
would	O
affect	O
this	O
particular	O
code	O
(	O
anti	O
)	O
-	O
pattern	O
?	O
EDIT	O
:	O
For	O
a	O
more	O
straight	O
-	O
forward	O
comparison	O
,	O
I	O
installed	O
Oracle	O
JDK	O
1	O
.	O
7u55	O
:	O
#	O
pre	O
The	O
results	O
are	O
similar	O
to	O
those	O
of	O
OpenJDK	O
:	O
#	O
pre	O
It	O
seems	O
that	O
this	O
is	O
a	O
more	O
general	O
Java	O
7	O
vs	O
Java	O
8	O
issue	O
.	O
Perhaps	O
Java	O
7	O
had	O
more	O
aggressive	O
string	O
optimizations	O
?	O
EDIT	O
2	O
:	O
For	O
completeness	O
,	O
here	O
are	O
the	O
string	O
-	O
related	O
VM	O
options	O
for	O
both	O
of	O
these	O
JVMs	O
:	O
For	O
Oracle	O
JDK	O
8u5	O
:	O
#	O
pre	O
For	O
OpenJDK	O
1	O
.	O
7	O
:	O
#	O
pre	O
The	O
UseStringCache	B-api_mention
option	O
was	O
removed	O
in	O
Java	O
8	O
with	O
no	O
replacement	O
,	O
so	O
I	O
doubt	O
that	O
makes	O
any	O
difference	O
.	O
The	O
rest	O
of	O
the	O
options	O
appear	O
to	O
have	O
the	O
same	O
settings	O
.	O
EDIT	O
3	O
:	O
A	O
side	O
-	O
by	O
-	O
side	O
comparison	O
of	O
the	O
source	O
code	O
of	O
the	O
AbstractStringBuilder	B-api_mention
,	O
StringBuilder	B-api_mention
and	O
Integer	B-api_mention
classes	O
from	O
the	O
src	O
.	O
zip	O
file	O
of	O
reveals	O
nothing	O
noteworty	O
.	O
Apart	O
from	O
a	O
whole	O
lot	O
of	O
cosmetic	O
and	O
documentation	O
changes	O
,	O
Integer	B-api_mention
now	O
has	O
some	O
support	O
for	O
unsigned	O
integers	O
and	O
StringBuilder	B-api_mention
has	O
been	O
slightly	O
refactored	O
to	O
share	O
more	O
code	O
with	O
StringBuffer	B-api_mention
.	O
None	O
of	O
these	O
changes	O
seem	O
to	O
affect	O
the	O
code	O
paths	O
used	O
by	O
StringBuilder	B-api_mention
#	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
although	O
I	O
may	O
have	O
missed	O
something	O
.	O
A	O
comparison	O
of	O
the	O
assembly	O
code	O
generated	O
for	O
IntStr	O
#	O
integerToString	O
(	O
args	O
)	O
and	O
IntStr	O
#	O
stringBuilder0	O
(	O
args	O
)	O
is	O
far	O
more	O
interesting	O
.	O
The	O
basic	O
layout	O
of	O
the	O
code	O
generated	O
for	O
IntStr	O
#	O
integerToString	O
(	O
args	O
)	O
was	O
similar	O
for	O
both	O
JVMs	O
,	O
although	O
Oracle	O
JDK	O
8u5	O
seemed	O
to	O
be	O
more	O
aggressive	O
w	O
.	O
r	O
.	O
t	O
.	O
inlining	O
some	O
calls	O
within	O
the	O
Integer	B-api_mention
#	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
code	O
.	O
There	O
was	O
a	O
clear	O
correspondence	O
with	O
the	O
Java	O
source	O
code	O
,	O
even	O
for	O
someone	O
with	O
minimal	O
assembly	O
experience	O
.	O
The	O
assembly	O
code	O
for	O
IntStr	B-api_mention
#	I-api_mention
stringBuilder0	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
however	O
,	O
was	O
radically	O
different	O
.	O
The	O
code	O
generated	O
by	O
Oracle	O
JDK	O
8u5	O
was	O
once	O
again	O
directly	O
related	O
to	O
the	O
Java	O
source	O
code	O
-	O
I	O
could	O
easily	O
recognise	O
the	O
same	O
layout	O
.	O
On	O
the	O
contrary	O
,	O
the	O
code	O
generated	O
by	O
OpenJDK	O
7	O
was	O
almost	O
unrecognisable	O
to	O
the	O
untrained	O
eye	O
(	O
like	O
mine	O
)	O
.	O
The	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
was	O
seemingly	O
removed	O
,	O
as	O
was	O
the	O
creation	O
of	O
the	O
array	O
in	O
the	O
StringBuilder	B-api_mention
constructor	O
.	O
Additionaly	O
,	O
the	O
disassembler	O
plugin	O
was	O
not	O
able	O
to	O
provide	O
as	O
many	O
references	O
to	O
the	O
source	O
code	O
as	O
it	O
did	O
in	O
JDK	O
8	O
.	O
I	O
assume	O
that	O
this	O
is	O
either	O
the	O
result	O
of	O
a	O
much	O
more	O
aggressive	O
optimization	O
pass	O
in	O
OpenJDK	O
7	O
,	O
or	O
more	O
probably	O
the	O
result	O
of	O
inserting	O
hand	O
-	O
written	O
low	O
-	O
level	O
code	O
for	O
certain	O
StringBuilder	B-api_mention
operations	O
.	O
I	O
am	O
unsure	O
why	O
this	O
optimization	O
does	O
not	O
happen	O
in	O
my	O
JVM	O
8	O
implementation	O
or	O
why	O
the	O
same	O
optimizations	O
were	O
not	O
implemented	O
for	O
Integer	B-api_mention
#	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
JVM	O
7	O
.	O
I	O
guess	O
someone	O
familiar	O
with	O
the	O
related	O
parts	O
of	O
the	O
JRE	O
source	O
code	O
would	O
have	O
to	O
answer	O
these	O
questions	O
.	O
.	O
.	O
Question	O
-	O
32164385	O
,	O
answer	O
-	O
32167166	O
#	O
blockquote	O
I	O
must	O
agree	O
with	O
other	O
answers	O
that	O
there	O
is	O
no	O
direct	O
way	O
to	O
determine	O
that	O
method	O
will	O
modify	O
your	O
object	O
or	O
not	O
and	O
yes	O
to	O
make	O
sure	O
that	O
method	O
can	O
not	O
modify	O
your	O
Object	B-api_mention
you	O
all	O
have	O
to	O
do	O
it	O
is	O
from	O
your	O
side	O
.	O
#	O
blockquote	O
Here	O
the	O
method	O
name	O
comes	O
to	O
the	O
scene	O
.	O
Moving	O
ahead	O
with	O
the	O
naming	O
convention	O
of	O
method	O
we	O
have	O
to	O
take	O
a	O
look	O
at	O
some	O
method	O
declarations	O
which	O
clearly	O
convince	O
you	O
that	O
your	O
Object	B-api_mention
will	O
not	O
be	O
changed	O
at	O
all	O
.	O
For	O
example	O
,	O
You	O
know	O
that	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
will	O
not	O
change	O
your	O
actual	O
array	O
,	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
change	O
your	O
boo	O
Method	O
names	O
are	O
real	O
weapons	O
to	O
provide	O
as	O
much	O
information	O
as	O
possible	O
to	O
the	O
method	O
user	O
.	O
(	O
Yes	O
!	O
it	O
'	O
s	O
always	O
not	O
possible	O
but	O
quite	O
a	O
good	O
practice	O
to	O
follow	O
.	O
)	O
Let	O
'	O
s	O
consider	O
it	O
in	O
your	O
case	O
that	O
say	O
printBoo	O
will	O
only	O
print	O
,	O
copyBoo	O
will	O
only	O
copy	O
,	O
clearBoo	O
will	O
reset	O
all	O
attributes	O
,	O
checkAndCreateNewBoo	O
will	O
check	O
your	O
boo	O
Object	B-api_mention
and	O
create	O
new	O
if	O
required	O
.	O
So	O
,	O
ultimately	O
if	O
we	O
can	O
use	O
them	O
in	O
a	O
proper	O
way	O
caller	O
can	O
be	O
assured	O
with	O
the	O
fact	O
that	O
Object	B-api_mention
will	O
remain	O
the	O
same	O
after	O
calling	O
the	O
method	O
.	O
Question	O
-	O
19235606	O
I	O
am	O
having	O
trouble	O
understanding	O
the	O
Stream	B-api_mention
interface	O
in	O
Java	O
8	O
,	O
especially	O
where	O
it	O
has	O
to	O
do	O
with	O
the	O
Spliterator	B-api_mention
and	O
Collector	B-api_mention
interfaces	O
.	O
My	O
problem	O
is	O
that	O
I	O
simply	O
can	O
'	O
t	O
understand	O
yet	O
the	O
Spliterator	B-api_mention
and	O
the	O
Collector	B-api_mention
interfaces	O
,	O
and	O
as	O
a	O
result	O
the	O
Stream	B-api_mention
interface	O
is	O
still	O
somewhat	O
obscure	O
to	O
me	O
.	O
What	O
exactly	O
is	O
a	O
Spliterator	B-api_mention
and	O
a	O
Collector	B-api_mention
,	O
and	O
how	O
can	O
I	O
use	O
them	O
?	O
If	O
I	O
am	O
willing	O
to	O
write	O
my	O
own	O
Spliterator	B-api_mention
or	O
Collector	B-api_mention
(	O
and	O
probably	O
my	O
own	O
Stream	B-api_mention
in	O
that	O
process	O
)	O
,	O
what	O
should	O
I	O
do	O
and	O
not	O
do	O
?	O
I	O
read	O
some	O
examples	O
scattered	O
around	O
the	O
web	O
,	O
but	O
since	O
everything	O
here	O
is	O
stil	O
new	O
and	O
subject	O
to	O
changes	O
,	O
examples	O
and	O
tutorials	O
are	O
still	O
very	O
sparse	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25850622	O
a	O
.	O
I	O
have	O
always	O
seen	O
them	O
as	O
a	O
design	O
pattern	O
and	O
nothing	O
JVM	O
-	O
Special	O
I	O
have	O
used	O
that	O
pattern	O
in	O
several	O
situations	O
.	O
c	O
.	O
I	O
beleive	O
that	O
using	O
Annotations	B-api_mention
to	O
mark	O
something	O
is	O
a	O
better	O
solution	O
then	O
using	O
marker	O
interfaces	O
.	O
Simply	O
because	O
Interfaces	B-api_mention
are	O
in	O
the	O
first	O
place	O
aimed	O
to	O
define	O
common	O
interfaces	O
of	O
Types	O
/	O
Classes	O
.	O
They	O
are	O
part	O
of	O
the	O
class	O
-	O
hierachy	O
.	O
Annotations	O
are	O
aimed	O
to	O
provide	O
Meta	O
-	O
Informations	O
to	O
Code	O
,	O
and	O
I	O
think	O
that	O
marker	O
are	O
meta	O
-	O
informations	O
.	O
So	O
they	O
are	O
exactly	O
for	O
that	O
use	O
-	O
case	O
.	O
Question	O
-	O
20001427	O
,	O
answer	O
-	O
22245383	O
:	O
:	O
is	O
called	O
Method	O
Reference	O
.	O
It	O
is	O
basically	O
a	O
reference	O
to	O
a	O
single	O
method	O
.	O
i	O
.	O
e	O
.	O
it	O
refers	O
to	O
an	O
existing	O
method	O
by	O
name	O
.	O
Short	O
Explanation	O
:	O
Below	O
is	O
an	O
example	O
of	O
a	O
reference	O
to	O
a	O
static	O
method	O
:	O
#	O
pre	O
square	O
can	O
be	O
passed	O
around	O
just	O
like	O
object	O
reference	O
'	O
s	O
and	O
trigger	O
when	O
at	O
need	O
.	O
In	O
fact	O
,	O
it	O
can	O
be	O
perfectly	O
used	O
as	O
a	O
reference	O
to	O
a	O
normal	O
method	O
of	O
an	O
object	O
and	O
not	O
just	O
static	O
ones	O
.	O
#	O
pre	O
Function	B-api_mention
above	O
is	O
a	O
functional	O
interface	O
.	O
Well	O
to	O
fully	O
explain	O
:	O
:	O
,	O
it	O
is	O
important	O
to	O
understand	O
Functional	O
Interface	O
.	O
Plainly	O
,	O
Function	O
interface	O
is	O
an	O
interface	O
with	O
just	O
one	O
abstract	O
method	O
.	O
For	O
example	O
:	O
Runnable	B-api_mention
,	O
Callable	B-api_mention
,	O
ActionListener	B-api_mention
and	O
so	O
.	O
Function	B-api_mention
above	O
is	O
a	O
functional	O
interface	O
with	O
just	O
one	O
method	O
apply	O
.	O
It	O
takes	O
one	O
argument	O
and	O
produces	O
a	O
result	O
.	O
The	O
reason	O
why	O
:	O
:	O
are	O
awesome	O
is	O
because	O
:	O
#	O
blockquote	O
i	O
.	O
e	O
.	O
Just	O
like	O
writing	O
lambda	O
body	O
:	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
square	O
=	O
(	O
Double	B-api_mention
x	O
)	O
-	O
>	O
x	O
*	O
x	O
;	O
You	O
can	O
simply	O
do	O
:	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
square	O
=	O
Hey	O
:	O
:	O
square	O
;	O
At	O
runtime	O
they	O
behave	O
exactly	O
the	O
same	O
.	O
The	O
bytecode	O
may	O
/	O
not	O
be	O
the	O
same	O
(	O
For	O
above	O
case	O
,	O
it	O
generates	O
the	O
same	O
bytecode	O
(	O
compile	O
above	O
and	O
check	O
javap	O
-	O
c	O
)	O
)	O
The	O
only	O
major	O
criteria	O
to	O
satisfy	O
is	O
:	O
the	O
method	O
you	O
provide	O
should	O
have	O
a	O
similar	O
signature	O
to	O
method	O
of	O
the	O
FunctionalInterface	B-api_mention
you	O
use	O
as	O
object	O
reference	O
.	O
Below	O
is	O
illegal	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
p	O
=	O
Hey	O
:	O
:	O
square	O
;	O
/	O
/	O
illegal	O
square	O
expects	O
an	O
argument	O
and	O
returns	O
a	O
double	O
.	O
get	O
method	O
in	O
Supplier	B-api_mention
expects	O
an	O
argument	O
but	O
doesn	O
'	O
t	O
return	O
anything	O
.	O
So	O
it	O
is	O
an	O
error	O
.	O
Method	O
Reference	O
refers	O
to	O
a	O
method	O
of	O
the	O
functional	O
interface	O
(	O
As	O
mentioned	O
,	O
functional	O
interface	O
can	O
only	O
have	O
one	O
method	O
)	O
.	O
Some	O
more	O
examples	O
:	O
accept	O
method	O
in	O
Consumer	B-api_mention
takes	O
an	O
input	O
but	O
doesnt	O
return	O
anything	O
.	O
#	O
pre	O
Above	O
getRandom	O
takes	O
no	O
argument	O
and	O
returns	O
a	O
double	O
.	O
So	O
any	O
functional	O
interface	O
that	O
satisfies	O
the	O
criteria	O
of	O
:	O
take	O
no	O
argument	O
and	O
return	O
double	O
can	O
be	O
used	O
.	O
Another	O
example	O
:	O
#	O
pre	O
In	O
case	O
of	O
Parametrized	O
Types	O
:	O
#	O
pre	O
Method	O
Reference	O
can	O
be	O
obtained	O
in	O
different	O
styles	O
,	O
but	O
fundamentally	O
they	O
all	O
mean	O
the	O
same	O
and	O
can	O
simply	O
be	O
visualized	O
as	O
a	O
lambda	O
:	O
#	O
li	O
A	O
static	O
method	O
(	O
ClassName	O
:	O
:	O
methName	O
)	O
#	O
li	O
An	O
instance	O
method	O
of	O
a	O
particular	O
object	O
(	O
instanceRef	O
:	O
:	O
methName	O
)	O
#	O
li	O
A	O
super	O
method	O
of	O
a	O
particular	O
object	O
(	O
super	O
:	O
:	O
methName	O
)	O
#	O
li	O
An	O
instance	O
method	O
of	O
an	O
arbitrary	O
object	O
of	O
a	O
particular	O
type	O
(	O
ClassName	O
:	O
:	O
methName	O
)	O
#	O
li	O
A	O
class	O
constructor	O
reference	O
(	O
ClassName	O
:	O
:	O
new	O
)	O
#	O
li	O
An	O
array	O
constructor	O
reference	O
(	O
TypeName	O
[	O
]	O
:	O
:	O
new	O
)	O
For	O
further	O
reference	O
:	O
#	O
a	O
Question	O
-	O
24511052	O
I	O
am	O
looking	O
for	O
a	O
concise	O
way	O
to	O
convert	O
an	O
Iterator	O
to	O
a	O
Stream	B-api_mention
or	O
more	O
specifically	O
to	O
"	O
view	O
"	O
the	O
iterator	O
as	O
a	O
stream	O
.	O
For	O
performance	O
reason	O
,	O
I	O
would	O
like	O
to	O
avoid	O
a	O
copy	O
of	O
the	O
iterator	O
in	O
a	O
new	O
list	O
:	O
#	O
pre	O
Based	O
on	O
the	O
some	O
suggestions	O
in	O
the	O
comments	O
,	O
I	O
have	O
also	O
tried	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
generate	I-api_mention
:	O
#	O
pre	O
However	O
,	O
I	O
get	O
a	O
NoSuchElementException	B-api_mention
(	O
since	O
there	O
is	O
no	O
invocation	O
of	O
hasNext	B-api_mention
)	O
#	O
pre	O
I	O
have	O
looked	O
at	O
StreamSupport	B-api_mention
and	O
Collections	B-api_mention
but	O
I	O
didn	O
'	O
t	O
find	O
anything	O
.	O
Question	O
-	O
29183904	O
,	O
answer	O
-	O
29972028	O
Use	O
enum	O
when	O
you	O
need	O
its	O
features	O
.	O
Don	O
'	O
t	O
avoid	O
it	O
strictly	O
.	O
Java	O
enum	O
is	O
more	O
powerful	O
,	O
but	O
if	O
you	O
don	O
'	O
t	O
need	O
its	O
features	O
,	O
use	O
constants	O
,	O
they	O
occupy	O
less	O
space	O
and	O
they	O
can	O
be	O
primitive	O
itself	O
.	O
When	O
to	O
use	O
enum	O
:	O
#	O
li	O
type	O
checking	O
-	O
you	O
can	O
accept	O
only	O
listed	O
values	O
,	O
and	O
they	O
are	O
not	O
continuous	O
(	O
see	O
below	O
what	O
I	O
call	O
continuous	O
here	O
)	O
#	O
li	O
method	O
overloading	O
-	O
every	O
enum	O
constant	O
has	O
its	O
own	O
implementation	O
of	O
a	O
method	O
#	O
pre	O
#	O
li	O
more	O
data	O
-	O
your	O
one	O
constant	O
contains	O
more	O
than	O
one	O
information	O
that	O
cannot	O
be	O
put	O
in	O
one	O
variable	O
#	O
li	O
complicated	O
data	O
-	O
your	O
constant	O
need	O
methods	O
to	O
operate	O
on	O
the	O
data	O
When	O
not	O
to	O
use	O
enum	O
:	O
#	O
li	O
you	O
can	O
accept	O
all	O
values	O
of	O
one	O
type	O
,	O
and	O
your	O
constants	O
contain	O
only	O
these	O
most	O
used	O
#	O
li	O
you	O
can	O
accept	O
continuous	O
data	O
#	O
pre	O
#	O
li	O
for	O
names	O
(	O
like	O
in	O
your	O
example	O
)	O
#	O
li	O
for	O
everything	O
other	O
that	O
really	O
doesn	O
'	O
t	O
need	O
an	O
enum	O
Enum	O
occupies	O
more	O
space	O
#	O
li	O
a	O
single	O
reference	O
to	O
an	O
enum	O
constant	O
occupy	O
4	O
bytes	O
#	O
li	O
every	O
enum	O
constant	O
occupy	O
space	O
that	O
is	O
a	O
sum	O
of	O
its	O
fields	O
'	O
sizes	O
aligned	O
to	O
8	O
bytes	O
+	O
overhead	O
of	O
the	O
object	O
#	O
li	O
the	O
enum	O
class	O
itself	O
occupy	O
some	O
space	O
Constant	O
occupies	O
less	O
space	O
#	O
li	O
a	O
constant	O
doesn	O
'	O
t	O
have	O
a	O
reference	O
so	O
it	O
'	O
s	O
a	O
pure	O
data	O
(	O
even	O
if	O
it	O
'	O
s	O
a	O
reference	O
,	O
then	O
enum	O
instance	O
would	O
be	O
a	O
reference	O
to	O
another	O
reference	O
)	O
#	O
li	O
constants	O
may	O
be	O
added	O
to	O
existing	O
class	O
-	O
it	O
'	O
s	O
not	O
necessary	O
to	O
add	O
another	O
class	O
#	O
li	O
constants	O
may	O
be	O
inlined	O
;	O
it	O
brings	O
extended	O
compile	O
-	O
time	O
features	O
(	O
such	O
as	O
null	O
checking	O
,	O
finding	O
dead	O
code	O
etc	O
.	O
)	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331241	O
I	O
have	O
a	O
very	O
dumb	O
but	O
working	O
option	O
.	O
if	O
you	O
have	O
the	O
String	B-api_mention
fullDate	O
=	O
"	O
11	O
/	O
15	O
/	O
2013	O
08	O
:	O
00	O
:	O
00	O
"	O
;	O
String	B-api_mention
finalDate	O
=	O
fullDate	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
That	O
should	O
work	O
easy	O
and	O
fast	O
.	O
:	O
)	O
Question	O
-	O
24651403	O
,	O
answer	O
-	O
24651855	O
OK	O
,	O
first	O
of	O
all	O
,	O
your	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
will	O
not	O
work	O
as	O
intended	O
,	O
chained	O
if	O
-	O
elseif	O
will	O
maximally	O
execute	O
1	O
branch	O
of	O
code	O
,	O
for	O
example	O
:	O
#	O
pre	O
Even	O
if	O
e	O
contains	O
both	O
N	O
and	O
W	O
,	O
only	O
bexits	O
[	O
0	O
]	O
will	O
be	O
set	O
.	O
Also	O
this	O
method	O
will	O
only	O
add	O
exits	O
(	O
for	O
example	O
calling	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
delete	O
any	O
existing	O
exits	O
.	O
I	O
would	O
change	O
that	O
method	O
to	O
:	O
#	O
pre	O
Also	O
,	O
i	O
definetly	O
wouldn	O
'	O
t	O
remember	O
that	O
north	O
is	O
on	O
index	O
0	O
,	O
west	O
in	O
on	O
1	O
,	O
.	O
.	O
.	O
so	O
a	O
common	O
practice	O
is	O
to	O
name	O
your	O
indexes	O
using	O
final	O
static	O
constants	O
:	O
#	O
pre	O
Then	O
you	O
can	O
write	O
in	O
your	O
setExits	B-api_mention
method	O
:	O
#	O
pre	O
(	O
much	O
more	O
readible	O
)	O
Finally	O
,	O
if	O
you	O
want	O
your	O
code	O
even	O
more	O
well	O
-	O
arranged	O
,	O
you	O
can	O
make	O
a	O
Exits	B-api_mention
class	O
representing	O
avaliable	O
exits	O
,	O
and	O
backed	O
by	O
boolean	O
array	O
.	O
Then	O
on	O
place	O
where	O
you	O
create	O
your	O
String	B-api_mention
,	O
you	O
could	O
create	O
this	O
class	O
instead	O
and	O
save	O
yourself	O
work	O
with	O
generating	O
and	O
then	O
parsing	O
a	O
string	O
.	O
EDIT	O
:	O
as	O
@	O
gexicide	O
answers	O
,	O
there	O
is	O
a	O
really	O
handy	O
class	O
EnumSet	B-api_mention
which	O
would	O
be	O
probably	O
better	O
for	O
representing	O
the	O
exits	O
than	O
bollean	O
array	O
.	O
Question	O
-	O
18987692	O
,	O
answer	O
-	O
18987738	O
You	O
can	O
use	O
IsNull	O
.	O
nullValue	O
(	O
)	O
method	O
:	O
#	O
pre	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032144	O
The	O
source	O
code	O
for	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
The	O
source	O
code	O
for	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
As	O
defined	O
in	O
AbstractCollection	B-api_mention
)	O
:	O
#	O
pre	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
much	O
faster	O
since	O
it	O
doesn	O
'	O
t	O
have	O
to	O
deal	O
with	O
all	O
those	O
extra	O
method	O
calls	O
.	O
And	O
as	O
Atrey	O
points	O
out	O
,	O
c	O
.	B-api_mention
contains	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
increases	O
the	O
time	O
complexity	O
of	O
removeAll	B-api_mention
to	O
O	O
(	O
n	O
^	O
2	O
)	O
as	O
opposed	O
to	O
clear	O
'	O
s	O
O	O
(	O
n	O
)	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148593	O
Use	O
Integer	B-api_mention
instead	O
.	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Java	O
will	O
automatically	O
autobox	O
your	O
int	O
primitive	O
values	O
to	O
Integer	B-api_mention
objects	O
.	O
Read	O
more	O
about	O
autoboxing	O
from	O
Oracle	O
Java	O
documentations	O
.	O
Question	O
-	O
23653778	O
,	O
answer	O
-	O
25564062	O
Try	O
OnStart	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
and	O
just	O
use	O
View	B-api_mention
view	O
=	O
getView	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findViewById	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
Declare	O
any	O
View	B-api_mention
using	O
getView	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findViewById	I-api_mention
method	O
in	O
onStart	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Declare	O
click	O
listener	O
on	O
view	O
by	O
anyView	B-api_mention
.	I-api_mention
setOnClickListener	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
31471444	O
,	O
answer	O
-	O
31471520	O
org	O
.	O
apache	O
.	O
commons	O
.	O
lang	O
.	O
math	O
.	O
NumberUtils	O
.	O
INTEGER	O
_	O
ONE	O
it	O
gives	O
you	O
a	O
final	O
static	O
Integer	O
object	O
rather	O
than	O
primitive	O
int	O
1	O
,	O
and	O
as	O
it	O
is	O
final	O
static	O
it	O
acts	O
as	O
a	O
constant	O
and	O
can	O
be	O
used	O
in	O
comparison	O
of	O
Integer	B-api_mention
objects	O
because	O
will	O
always	O
return	O
same	O
instance	O
.	O
So	O
in	O
the	O
above	O
scenario	O
it	O
might	O
not	O
look	O
fit	O
but	O
somewhere	O
if	O
you	O
are	O
using	O
it	O
while	O
comparison	O
,	O
it	O
for	O
sure	O
has	O
impact	O
.	O
Moreover	O
,	O
as	O
much	O
as	O
we	O
can	O
,	O
should	O
prefer	O
the	O
use	O
of	O
constants	O
over	O
hardcoded	O
beacuse	O
:	O
#	O
li	O
It	O
can	O
make	O
your	O
code	O
easily	O
maintainable	O
.	O
If	O
any	O
situation	O
occurs	O
in	O
future	O
for	O
change	O
,	O
you	O
can	O
change	O
only	O
at	O
a	O
single	O
place	O
.	O
#	O
li	O
The	O
code	O
looks	O
cleaner	O
&	O
more	O
readable	O
.	O
Question	O
-	O
5439529	O
I	O
'	O
m	O
trying	O
to	O
determine	O
if	O
a	O
particular	O
item	O
in	O
an	O
Array	B-api_mention
of	O
strings	O
is	O
an	O
integer	O
or	O
not	O
.	O
I	O
am	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
'	O
ing	O
an	O
infix	O
expression	O
in	O
String	B-api_mention
form	O
,	O
and	O
then	O
trying	O
to	O
split	O
the	O
resultant	O
array	O
into	O
two	O
arrays	O
;	O
one	O
for	O
integers	O
,	O
one	O
for	O
operators	O
,	O
whilst	O
discarding	O
parentheses	O
,	O
and	O
other	O
miscellaneous	O
items	O
.	O
What	O
would	O
be	O
the	O
best	O
way	O
to	O
accomplish	O
this	O
?	O
I	O
thought	O
I	O
might	O
be	O
able	O
to	O
find	O
a	O
Integer	B-api_mention
.	I-api_mention
isInteger	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
or	O
something	O
,	O
but	O
no	O
such	O
luck	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28821352	O
It	O
'	O
s	O
not	O
pretty	O
,	O
but	O
this	O
will	O
work	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
;	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
is	O
a	O
fairly	O
handy	O
pattern	O
for	O
use	O
with	O
Optional	B-api_mention
.	O
It	O
means	O
"	O
If	O
this	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
give	O
me	O
func	O
(	O
args	O
)	O
,	O
otherwise	O
give	O
me	O
sup	O
.	O
get	O
(	O
args	O
)	O
"	O
.	O
In	O
this	O
case	O
,	O
we	O
call	O
serviceA	O
(	O
args	O
)	O
and	O
get	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
If	O
that	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
we	O
want	O
to	O
get	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
if	O
it	O
is	O
empty	O
,	O
we	O
want	O
to	O
get	O
serviceB	O
(	O
args	O
)	O
.	O
Rinse	O
-	O
repeat	O
with	O
more	O
alternatives	O
.	O
Other	O
uses	O
of	O
this	O
pattern	O
are	O
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
4812570	O
How	O
can	O
I	O
get	O
the	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
store	O
it	O
into	O
a	O
String	B-api_mention
variable	O
?	O
I	O
want	O
to	O
use	O
the	O
string	O
generated	O
by	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
later	O
in	O
my	O
program	O
.	O
I	O
'	O
m	O
still	O
new	O
to	O
Java	O
so	O
I	O
'	O
m	O
not	O
too	O
familiar	O
with	O
StringWriter	B-api_mention
that	O
I	O
think	O
will	O
be	O
the	O
solution	O
.	O
Or	O
if	O
you	O
have	O
any	O
other	O
ideas	O
please	O
let	O
me	O
know	O
.	O
Thanks	O
Question	O
-	O
13291076	O
If	O
you	O
look	O
in	O
the	O
enum	O
api	O
at	O
the	O
method	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
says	O
that	O
:	O
#	O
blockquote	O
Why	O
is	O
better	O
to	O
use	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
I	O
mean	O
toString	B-api_mention
may	O
be	O
overridden	O
when	O
name	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
already	O
final	O
.	O
So	O
if	O
you	O
use	O
toString	B-api_mention
and	O
someone	O
overrides	O
it	O
to	O
return	O
a	O
hard	O
-	O
coded	O
value	O
your	O
whole	O
application	O
is	O
down	O
.	O
.	O
.	O
Also	O
if	O
you	O
look	O
in	O
the	O
sources	O
the	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
returns	O
exactly	O
and	O
just	O
the	O
name	O
.	O
It	O
'	O
s	O
the	O
same	O
thing	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14847046	O
Most	O
of	O
the	O
time	O
we	O
use	O
a	O
constructor	O
to	O
create	O
a	O
new	O
empty	O
map	O
.	O
But	O
the	O
Collections	B-api_mention
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
to	O
create	O
an	O
empty	O
map	O
using	O
static	O
method	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
emptyMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
blockquote	O
Question	O
-	O
7693324	O
I	O
got	O
a	O
simple	O
question	O
in	O
Java	O
:	O
How	O
can	O
I	O
convert	O
a	O
String	B-api_mention
that	O
was	O
obtained	O
by	O
Long	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
long	O
?	O
Question	O
-	O
34250207	O
As	O
I	O
recall	O
,	O
before	O
Java	O
8	O
,	O
the	O
default	O
capacity	O
of	O
ArrayList	B-api_mention
was	O
10	O
.	O
Surprisingly	O
,	O
the	O
comment	O
on	O
the	O
default	O
(	O
void	O
)	O
constructor	O
still	O
says	O
:	O
Constructs	O
an	O
empty	O
list	O
with	O
an	O
initial	O
capacity	O
of	O
ten	O
.	O
From	O
ArrayList	O
.	O
java	O
:	O
#	O
pre	O
Question	O
-	O
9749746	O
How	O
do	O
atomic	B-api_mention
/	O
volatile	O
/	O
synchronized	O
work	O
internally	O
?	O
What	O
is	O
the	O
difference	O
between	O
the	O
following	O
code	O
blocks	O
?	O
Code	O
1	O
#	O
pre	O
Code	O
2	O
#	O
pre	O
Code	O
3	O
#	O
pre	O
Does	O
volatile	O
work	O
in	O
the	O
following	O
way	O
?	O
Is	O
#	O
pre	O
equivalent	O
to	O
#	O
pre	O
I	O
think	O
that	O
two	O
threads	O
cannot	O
enter	O
a	O
synchronized	O
block	O
at	O
the	O
same	O
time	O
.	O
.	O
.	O
am	O
I	O
right	O
?	O
If	O
this	O
is	O
true	O
then	O
how	O
does	O
atomic	B-api_mention
.	I-api_mention
incrementAndGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
work	O
without	O
synchronized	O
?	O
And	O
is	O
it	O
thread	O
-	O
safe	O
?	O
And	O
what	O
is	O
the	O
difference	O
between	O
internal	O
reading	O
and	O
writing	O
to	O
volatile	O
variables	O
/	O
atomic	B-api_mention
variables	O
?	O
I	O
read	O
in	O
some	O
article	O
that	O
the	O
thread	O
has	O
a	O
local	O
copy	O
of	O
the	O
variables	O
-	O
what	O
is	O
that	O
?	O
Question	O
-	O
11359187	O
For	O
the	O
first	O
time	O
in	O
my	O
life	O
I	O
find	O
myself	O
in	O
a	O
position	O
where	O
I	O
'	O
m	O
writing	O
a	O
Java	O
API	O
that	O
will	O
be	O
open	O
sourced	O
.	O
Hopefully	O
to	O
be	O
included	O
in	O
many	O
other	O
projects	O
.	O
For	O
logging	O
I	O
(	O
and	O
indeed	O
the	O
people	O
I	O
work	O
with	O
)	O
have	O
always	O
used	O
JUL	B-api_mention
(	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
logging	I-api_mention
)	O
and	O
never	O
had	O
any	O
issues	O
with	O
it	O
.	O
However	O
now	O
I	O
need	O
to	O
understand	O
in	O
more	O
detail	O
what	O
I	O
should	O
do	O
for	O
my	O
API	O
development	O
.	O
I	O
'	O
ve	O
done	O
some	O
research	O
on	O
this	O
and	O
with	O
the	O
information	O
I	O
'	O
ve	O
got	O
I	O
just	O
get	O
more	O
confused	O
.	O
Hence	O
this	O
post	O
.	O
Since	O
I	O
come	O
from	O
JUL	B-api_mention
I	O
'	O
m	O
biased	O
on	O
that	O
.	O
My	O
knowledge	O
of	O
the	O
rest	O
is	O
not	O
that	O
big	O
.	O
From	O
the	O
research	O
I	O
'	O
ve	O
done	O
I	O
'	O
ve	O
come	O
up	O
with	O
these	O
reasons	O
why	O
people	O
do	O
not	O
like	O
JUL	B-api_mention
:	O
#	O
li	O
"	O
I	O
started	O
developing	O
in	O
Java	O
long	O
before	O
Sun	O
released	O
JUL	O
and	O
it	O
was	O
just	O
easier	O
for	O
me	O
to	O
continue	O
with	O
logging	O
-	O
framework	O
-	O
X	O
rather	O
than	O
to	O
learn	O
something	O
new	O
"	O
.	O
Hmm	O
.	O
I	O
'	O
m	O
not	O
kidding	O
,	O
this	O
is	O
actually	O
what	O
people	O
say	O
.	O
With	O
this	O
argument	O
we	O
could	O
all	O
be	O
doing	O
COBOL	O
.	O
(	O
however	O
I	O
can	O
certainly	O
relate	O
to	O
this	O
being	O
a	O
lazy	O
dude	O
myself	O
)	O
#	O
li	O
"	O
I	O
don	O
'	O
t	O
like	O
the	O
names	O
of	O
the	O
logging	O
levels	O
in	O
JUL	O
"	O
.	O
Ok	O
,	O
seriously	O
,	O
this	O
is	O
just	O
not	O
enough	O
of	O
a	O
reason	O
to	O
introduce	O
a	O
new	O
dependency	O
.	O
#	O
li	O
"	O
I	O
don	O
'	O
t	O
like	O
the	O
standard	O
format	O
of	O
the	O
output	O
from	O
JUL	B-api_mention
"	O
.	O
Hmm	O
.	O
This	O
is	O
just	O
configuration	O
.	O
You	O
do	O
not	O
even	O
have	O
to	O
do	O
anything	O
code	O
-	O
wise	O
.	O
(	O
true	O
,	O
back	O
in	O
old	O
days	O
you	O
may	O
have	O
had	O
to	O
create	O
your	O
own	O
Formatter	O
class	O
to	O
get	O
it	O
right	O
)	O
.	O
#	O
li	O
"	O
I	O
use	O
other	O
libraries	O
that	O
also	O
use	O
logging	O
-	O
framework	O
-	O
X	O
so	O
I	O
thought	O
it	O
easier	O
just	O
to	O
use	O
that	O
one	O
"	O
.	O
This	O
is	O
a	O
cyclic	O
argument	O
,	O
isn	O
'	O
t	O
?	O
Why	O
does	O
'	O
everybody	O
'	O
use	O
logging	O
-	O
framework	O
-	O
X	O
and	O
not	O
JUL	B-api_mention
?	O
#	O
li	O
"	O
Everybody	O
else	O
is	O
using	O
logging	O
-	O
framework	O
-	O
X	O
"	O
.	O
This	O
to	O
me	O
is	O
just	O
a	O
special	O
case	O
of	O
the	O
above	O
.	O
Majority	O
is	O
not	O
always	O
right	O
.	O
So	O
the	O
real	O
big	O
question	O
is	O
why	O
not	O
JUL	B-api_mention
?	O
.	O
What	O
is	O
it	O
I	O
have	O
missed	O
?	O
The	O
raison	O
d	O
'	O
ê	O
tre	O
for	O
logging	O
facades	O
(	O
SLF4J	B-api_mention
,	O
JCL	B-api_mention
)	O
is	O
that	O
multiple	O
logging	O
implementations	O
have	O
existed	O
historically	O
and	O
the	O
reason	O
for	O
that	O
really	O
goes	O
back	O
to	O
the	O
era	O
before	O
JUL	B-api_mention
as	O
I	O
see	O
it	O
.	O
If	O
JUL	B-api_mention
was	O
perfect	O
then	O
logging	O
facades	O
wouldn	O
'	O
t	O
exist	O
,	O
or	O
what	O
?	O
Rather	O
than	O
embracing	O
them	O
shouldn	O
'	O
t	O
we	O
question	O
why	O
they	O
were	O
necessary	O
in	O
the	O
first	O
place	O
?	O
(	O
and	O
see	O
if	O
those	O
reasons	O
still	O
exist	O
)	O
Ok	O
,	O
my	O
research	O
so	O
far	O
has	O
led	O
to	O
a	O
couple	O
of	O
things	O
that	O
I	O
can	O
see	O
may	O
be	O
real	O
issues	O
with	O
JUL	B-api_mention
:	O
#	O
li	O
Performance	O
.	O
Some	O
say	O
that	O
performance	O
in	O
SLF4J	B-api_mention
is	O
superior	O
to	O
the	O
rest	O
.	O
This	O
seems	O
to	O
me	O
to	O
be	O
a	O
case	O
of	O
premature	O
optimization	O
.	O
If	O
you	O
need	O
to	O
log	O
hundreds	O
of	O
megabytes	O
per	O
second	O
then	O
I	O
'	O
m	O
not	O
sure	O
you	O
are	O
on	O
the	O
right	O
path	O
anyway	O
.	O
JUL	B-api_mention
has	O
also	O
evolved	O
and	O
the	O
tests	O
you	O
did	O
on	O
Java	O
1	O
.	O
4	O
may	O
no	O
longer	O
be	O
true	O
.	O
You	O
can	O
read	O
about	O
it	O
here	O
and	O
this	O
fix	O
has	O
made	O
it	O
into	O
Java	O
7	O
.	O
Many	O
also	O
talk	O
about	O
the	O
overhead	O
of	O
string	O
concatenation	O
in	O
logging	O
methods	O
.	O
However	O
template	O
based	O
logging	O
avoids	O
this	O
cost	O
and	O
it	O
exist	O
also	O
in	O
JUL	B-api_mention
.	O
Personally	O
I	O
never	O
really	O
write	O
template	O
based	O
logging	O
.	O
Too	O
lazy	O
for	O
that	O
.	O
For	O
example	O
if	O
I	O
do	O
this	O
with	O
JUL	B-api_mention
:	O
log	B-api_mention
.	I-api_mention
finest	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
;	O
my	O
IDE	O
will	O
warn	O
me	O
and	O
ask	O
permission	O
that	O
it	O
should	O
change	O
it	O
to	O
:	O
log	B-api_mention
.	I-api_mention
log	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
.	O
which	O
I	O
will	O
of	O
course	O
accept	O
.	O
Permission	O
granted	O
!	O
Thank	O
you	O
for	O
your	O
help	O
.	O
So	O
I	O
don	O
'	O
t	O
actually	O
write	O
such	O
statements	O
myself	O
,	O
that	O
is	O
done	O
by	O
the	O
IDE	O
.	O
In	O
conclusion	O
on	O
the	O
issue	O
of	O
performance	O
I	O
haven	O
'	O
t	O
found	O
anything	O
that	O
would	O
suggest	O
that	O
JUL	B-api_mention
'	O
s	O
performance	O
is	O
not	O
ok	O
compared	O
to	O
the	O
competition	O
.	O
#	O
li	O
Configuration	O
from	O
classpath	O
.	O
Out	O
-	O
of	O
-	O
the	O
-	O
box	O
JUL	B-api_mention
cannot	O
load	O
a	O
configuration	O
file	O
from	O
the	O
classpath	O
.	O
It	O
is	O
a	O
few	O
lines	O
of	O
code	O
to	O
make	O
it	O
do	O
so	O
.	O
I	O
can	O
see	O
why	O
this	O
may	O
be	O
annoying	O
but	O
the	O
solution	O
is	O
short	O
and	O
simple	O
.	O
#	O
li	O
Availability	O
of	O
output	O
handlers	O
.	O
JUL	B-api_mention
comes	O
with	O
5	O
output	O
handlers	O
out	O
-	O
of	O
-	O
the	O
-	O
box	O
:	O
console	O
,	O
file	O
stream	O
,	O
socket	O
and	O
memory	O
.	O
These	O
can	O
be	O
extended	O
or	O
new	O
ones	O
can	O
be	O
written	O
.	O
This	O
may	O
for	O
example	O
be	O
writing	O
to	O
UNIX	O
/	O
Linux	O
Syslog	O
and	O
Windows	O
Event	O
Log	O
.	O
I	O
have	O
personally	O
never	O
had	O
this	O
requirement	O
nor	O
have	O
I	O
seen	O
it	O
used	O
but	O
I	O
can	O
certainly	O
relate	O
to	O
why	O
it	O
may	O
be	O
a	O
useful	O
feature	O
.	O
Logback	B-api_mention
comes	O
with	O
an	O
appender	O
for	O
Syslog	O
for	O
example	O
.	O
Still	O
I	O
would	O
argue	O
that	O
#	O
li	O
99	O
.	O
5	O
%	O
of	O
the	O
needs	O
for	O
output	O
destinations	O
are	O
covered	O
by	O
what	O
is	O
in	O
JUL	B-api_mention
out	O
-	O
of	O
-	O
the	O
-	O
box	O
.	O
#	O
li	O
Special	O
needs	O
could	O
be	O
catered	O
for	O
by	O
custom	O
handlers	O
on	O
top	O
of	O
JUL	B-api_mention
rather	O
than	O
on	O
top	O
of	O
something	O
else	O
.	O
There	O
'	O
s	O
nothing	O
to	O
me	O
that	O
suggests	O
that	O
it	O
takes	O
more	O
time	O
to	O
write	O
a	O
Syslog	O
output	O
handler	O
for	O
JUL	B-api_mention
than	O
it	O
does	O
for	O
another	O
logging	O
framework	O
.	O
I	O
'	O
m	O
really	O
concerned	O
that	O
there	O
'	O
s	O
something	O
I	O
'	O
ve	O
overlooked	O
.	O
The	O
use	O
of	O
logging	O
facades	O
and	O
logging	O
implementations	O
other	O
than	O
JUL	B-api_mention
is	O
so	O
widespread	O
that	O
I	O
have	O
to	O
come	O
to	O
the	O
conclusion	O
that	O
it	O
'	O
s	O
me	O
who	O
just	O
doesn	O
'	O
t	O
understand	O
.	O
That	O
wouldn	O
'	O
t	O
be	O
the	O
first	O
time	O
,	O
I	O
'	O
m	O
afraid	O
.	O
:	O
-	O
)	O
So	O
what	O
should	O
I	O
do	O
with	O
my	O
API	O
?	O
I	O
want	O
it	O
to	O
become	O
successful	O
.	O
I	O
can	O
of	O
course	O
just	O
"	O
go	O
with	O
the	O
flow	O
"	O
and	O
implement	O
SLF4J	B-api_mention
(	O
which	O
seems	O
the	O
most	O
popular	O
these	O
days	O
)	O
but	O
for	O
my	O
own	O
sake	O
I	O
still	O
need	O
to	O
understand	O
exactly	O
what	O
is	O
wrong	O
with	O
the	O
JUL	B-api_mention
of	O
today	O
that	O
warrants	O
all	O
the	O
fuzz	O
?	O
Will	O
I	O
sabotage	O
myself	O
by	O
choosing	O
JUL	B-api_mention
for	O
my	O
library	O
?	O
Testing	O
performance	O
(	O
section	O
added	O
by	O
nolan600	O
on	O
07	O
-	O
JUL	O
-	O
2012	O
)	O
There	O
'	O
s	O
a	O
reference	O
below	O
from	O
Ceki	O
about	O
SLF4J	B-api_mention
'	O
s	O
parametrization	O
being	O
10	O
times	O
or	O
more	O
faster	O
than	O
JUL	B-api_mention
'	O
s	O
.	O
So	O
I	O
'	O
ve	O
started	O
doing	O
some	O
simple	O
tests	O
.	O
At	O
first	O
glance	O
the	O
claim	O
is	O
certainly	O
correct	O
.	O
Here	O
are	O
the	O
preliminary	O
results	O
(	O
but	O
read	O
on	O
!	O
)	O
:	O
#	O
li	O
Execution	O
time	O
SLF4J	B-api_mention
,	O
backend	O
Logback	O
:	O
1515	O
#	O
li	O
Execution	O
time	O
SLF4J	B-api_mention
,	O
backend	O
JUL	B-api_mention
:	O
12938	O
#	O
li	O
Execution	O
time	O
JUL	B-api_mention
:	O
16911	O
The	O
numbers	O
above	O
are	O
msecs	O
so	O
less	O
is	O
better	O
.	O
So	O
10	O
times	O
performance	O
difference	O
is	O
by	O
first	O
actually	O
pretty	O
close	O
.	O
My	O
initial	O
reaction	O
:	O
That	O
is	O
a	O
lot	O
!	O
Here	O
is	O
the	O
core	O
of	O
the	O
test	O
.	O
As	O
can	O
be	O
seen	O
an	O
integer	O
and	O
a	O
string	O
is	O
construted	O
in	O
a	O
loop	O
which	O
is	O
then	O
used	O
in	O
the	O
log	O
statement	O
:	O
#	O
pre	O
(	O
I	O
wanted	O
the	O
log	O
statement	O
to	O
have	O
both	O
a	O
primitive	O
data	O
type	O
(	O
in	O
this	O
case	O
an	O
int	O
)	O
and	O
a	O
more	O
complex	O
data	O
type	O
(	O
in	O
this	O
case	O
a	O
String	B-api_mention
)	O
.	O
Not	O
sure	O
it	O
matters	O
but	O
there	O
you	O
have	O
it	O
.	O
)	O
The	O
log	O
statement	O
for	O
SLF4J	B-api_mention
:	O
logger	B-api_mention
.	I-api_mention
info	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
log	O
statement	O
for	O
JUL	B-api_mention
:	O
logger	B-api_mention
.	I-api_mention
log	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
JVM	O
was	O
'	O
warmed	O
up	O
'	O
with	O
the	O
same	O
test	O
executed	O
once	O
before	O
the	O
actual	O
measurement	O
was	O
done	O
.	O
Java	O
1	O
.	O
7	O
.	O
03	O
was	O
used	O
on	O
Windows	O
7	O
.	O
Latest	O
versions	O
of	O
SLF4J	B-api_mention
(	O
v1	O
.	O
6	O
.	O
6	O
)	O
and	O
Logback	B-api_mention
(	O
v1	O
.	O
0	O
.	O
6	O
)	O
was	O
used	O
.	O
Stdout	O
and	O
stderr	O
was	O
redirected	O
to	O
null	O
device	O
.	O
However	O
,	O
careful	O
now	O
,	O
it	O
turns	O
out	O
JUL	O
is	O
spending	O
most	O
of	O
its	O
time	O
in	O
getSourceClassName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
JUL	B-api_mention
by	O
default	O
prints	O
the	O
source	O
class	O
name	O
in	O
the	O
output	O
,	O
while	O
Logback	B-api_mention
doesn	O
'	O
t	O
.	O
So	O
we	O
are	O
comparing	O
apples	O
and	O
oranges	O
.	O
I	O
have	O
to	O
do	O
the	O
test	O
again	O
and	O
configure	O
the	O
logging	O
implementations	O
in	O
a	O
similar	O
manner	O
so	O
that	O
they	O
actually	O
output	O
the	O
same	O
stuff	O
.	O
I	O
do	O
however	O
suspect	O
that	O
SLF4J	B-api_mention
+	O
Logback	B-api_mention
will	O
still	O
come	O
out	O
on	O
top	O
but	O
far	O
from	O
the	O
initial	O
numbers	O
as	O
given	O
above	O
.	O
Stay	O
tuned	O
.	O
Btw	O
:	O
The	O
test	O
was	O
first	O
time	O
I	O
'	O
ve	O
actually	O
worked	O
with	O
SLF4J	B-api_mention
or	O
Logback	B-api_mention
.	O
A	O
pleasant	O
experience	O
.	O
JUL	B-api_mention
is	O
certainly	O
a	O
lot	O
less	O
welcoming	O
when	O
you	O
are	O
starting	O
out	O
.	O
Testing	O
performance	O
(	O
part	O
2	O
)	O
(	O
section	O
added	O
by	O
nolan600	O
on	O
08	O
-	O
JUL	O
-	O
2012	O
)	O
As	O
it	O
turns	O
out	O
it	O
doesn	O
'	O
t	O
really	O
matter	O
for	O
performance	O
how	O
you	O
configure	O
your	O
pattern	O
in	O
JUL	B-api_mention
,	O
i	O
.	O
e	O
.	O
whether	O
or	O
not	O
it	O
includes	O
the	O
source	O
name	O
or	O
not	O
.	O
I	O
tried	O
with	O
a	O
very	O
simple	O
pattern	O
:	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
logging	I-api_mention
.	I-api_mention
SimpleFormatter	I-api_mention
.	I-api_mention
format	I-api_mention
=	O
StringLiteral	O
and	O
that	O
did	O
not	O
change	O
the	O
above	O
timings	O
at	O
all	O
.	O
My	O
profiler	O
revealed	O
that	O
the	O
logger	O
still	O
spent	O
a	O
lot	O
of	O
time	O
in	O
calls	O
to	O
getSourceClassName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
even	O
if	O
this	O
was	O
not	O
part	O
of	O
my	O
pattern	O
.	O
The	O
pattern	O
doesn	O
'	O
t	O
matter	O
.	O
I	O
'	O
m	O
therefore	O
concluding	O
on	O
the	O
issue	O
of	O
performance	O
that	O
at	O
least	O
for	O
the	O
tested	O
template	O
based	O
log	O
statement	O
there	O
seems	O
to	O
be	O
roughly	O
a	O
factor	O
of	O
10	O
in	O
real	O
performance	O
difference	O
between	O
JUL	B-api_mention
(	O
slow	O
)	O
and	O
SLF4J	B-api_mention
+	O
Logback	B-api_mention
(	O
quick	O
)	O
.	O
Just	O
like	O
Ceki	O
said	O
.	O
I	O
can	O
also	O
see	O
another	O
thing	O
namely	O
that	O
SLF4J	B-api_mention
'	O
s	O
getLogger	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
is	O
a	O
lot	O
more	O
expensive	O
than	O
JUL	B-api_mention
'	O
s	O
ditto	O
.	O
(	O
95	O
ms	O
vs	O
0	O
.	O
3	O
ms	O
if	O
my	O
profiler	O
is	O
accurate	O
)	O
.	O
This	O
makes	O
sense	O
.	O
SLF4J	B-api_mention
has	O
to	O
do	O
some	O
time	O
on	O
the	O
binding	O
of	O
the	O
underlying	O
logging	O
implementation	O
.	O
This	O
doesn	O
'	O
t	O
scare	O
me	O
.	O
These	O
calls	O
should	O
be	O
somewhat	O
rare	O
in	O
the	O
lifetime	O
of	O
an	O
application	O
.	O
The	O
fastness	O
should	O
be	O
in	O
the	O
actual	O
log	O
calls	O
.	O
Final	O
conclusion	O
(	O
section	O
added	O
by	O
nolan600	O
on	O
08	O
-	O
JUL	O
-	O
2012	O
)	O
Thank	O
you	O
for	O
all	O
your	O
answers	O
.	O
Contrary	O
to	O
what	O
I	O
initially	O
thought	O
I	O
'	O
ve	O
ended	O
up	O
deciding	O
to	O
use	O
SLF4J	B-api_mention
for	O
my	O
API	O
.	O
This	O
is	O
based	O
on	O
a	O
number	O
of	O
things	O
and	O
your	O
input	O
:	O
#	O
li	O
It	O
gives	O
flexibility	O
to	O
choose	O
log	O
implementation	O
at	O
deployment	O
time	O
.	O
#	O
li	O
Issues	O
with	O
lack	O
of	O
flexibility	O
of	O
JUL	B-api_mention
'	O
s	O
configuration	O
when	O
run	O
inside	O
an	O
application	O
server	O
.	O
#	O
li	O
SLF4J	B-api_mention
is	O
certainly	O
a	O
lot	O
faster	O
as	O
detailed	O
above	O
in	O
particular	O
if	O
you	O
couple	O
it	O
with	O
Logback	B-api_mention
.	O
Even	O
if	O
this	O
was	O
just	O
a	O
rough	O
test	O
I	O
have	O
reason	O
to	O
believe	O
that	O
a	O
lot	O
more	O
effort	O
has	O
gone	O
into	O
optimization	O
on	O
SLF4J	B-api_mention
+	O
Logback	B-api_mention
than	O
on	O
JUL	B-api_mention
.	O
#	O
li	O
Documentation	O
.	O
The	O
documentation	O
for	O
SLF4J	B-api_mention
is	O
simply	O
a	O
lot	O
more	O
comprehensive	O
and	O
precise	O
.	O
#	O
li	O
Pattern	O
flexibility	O
.	O
As	O
I	O
did	O
the	O
tests	O
I	O
set	O
out	O
to	O
have	O
JUL	B-api_mention
mimic	O
the	O
default	O
pattern	O
from	O
Logback	B-api_mention
.	O
This	O
pattern	O
includes	O
the	O
name	O
of	O
the	O
thread	O
.	O
It	O
turns	O
out	O
JUL	B-api_mention
cannot	O
do	O
this	O
out	O
of	O
the	O
box	O
.	O
Ok	O
,	O
I	O
haven	O
'	O
t	O
missed	O
it	O
until	O
now	O
,	O
but	O
I	O
don	O
'	O
t	O
think	O
it	O
is	O
a	O
thing	O
that	O
should	O
be	O
missing	O
from	O
a	O
log	O
framework	O
.	O
Period	O
!	O
#	O
li	O
Most	O
(	O
or	O
many	O
)	O
Java	O
projects	O
today	O
use	O
Maven	O
so	O
adding	O
a	O
dependency	O
is	O
not	O
that	O
big	O
a	O
thing	O
especially	O
if	O
that	O
dependency	O
is	O
rather	O
stable	O
,	O
i	O
.	O
e	O
.	O
doesn	O
'	O
t	O
constantly	O
change	O
its	O
API	O
.	O
This	O
seems	O
to	O
be	O
true	O
for	O
SLF4J	B-api_mention
.	O
Also	O
the	O
SLF4J	B-api_mention
jar	O
and	O
friends	O
are	O
small	O
in	O
size	O
.	O
So	O
the	O
strange	O
thing	O
that	O
happened	O
was	O
that	O
I	O
actually	O
got	O
quite	O
upset	O
with	O
JUL	B-api_mention
after	O
having	O
worked	O
a	O
bit	O
with	O
SLF4J	B-api_mention
.	O
I	O
still	O
regret	O
that	O
it	O
has	O
to	O
be	O
this	O
way	O
with	O
JUL	B-api_mention
.	O
JUL	B-api_mention
is	O
far	O
from	O
perfect	O
but	O
kind	O
of	O
does	O
the	O
job	O
.	O
Just	O
not	O
quite	O
well	O
enough	O
.	O
The	O
same	O
can	O
be	O
said	O
about	O
Properties	O
as	O
an	O
example	O
but	O
we	O
do	O
not	O
think	O
about	O
abstracting	O
that	O
so	O
people	O
can	O
plug	O
in	O
their	O
own	O
configuration	O
library	O
and	O
what	O
have	O
you	O
.	O
I	O
think	O
the	O
reason	O
is	O
that	O
Properties	O
comes	O
in	O
just	O
above	O
the	O
bar	O
while	O
the	O
opposite	O
is	O
true	O
for	O
JUL	B-api_mention
of	O
today	O
.	O
.	O
.	O
and	O
in	O
the	O
past	O
it	O
came	O
in	O
at	O
zero	O
because	O
it	O
didn	O
'	O
t	O
exist	O
.	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
29141638	O
Every	O
class	O
in	O
java	O
has	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
it	O
by	O
default	O
,	O
which	O
is	O
called	O
by	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
you	O
pass	O
some	O
object	O
of	O
a	O
class	O
to	O
it	O
.	O
When	O
you	O
try	O
to	O
print	O
object	O
of	O
a	O
class	O
,	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
will	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
the	O
class	O
which	O
returns	O
the	O
className	O
@	O
hashcode	O
of	O
that	O
object	O
.	O
#	O
pre	O
You	O
can	O
override	O
the	O
toString	B-api_mention
method	O
of	O
a	O
class	O
to	O
get	O
different	O
output	O
.	O
See	O
this	O
example	O
#	O
pre	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4819109	O
If	O
you	O
look	O
at	O
the	O
methods	O
AtomicInteger	B-api_mention
has	O
,	O
you	O
'	O
ll	O
notice	O
that	O
they	O
tend	O
to	O
correspond	O
to	O
common	O
operations	O
on	O
ints	O
.	O
For	O
instance	O
:	O
#	O
pre	O
is	O
the	O
thread	O
-	O
safe	O
version	O
of	O
this	O
:	O
#	O
pre	O
The	O
methods	O
map	O
like	O
this	O
:	O
+	O
+	O
i	O
is	O
i	O
.	B-api_mention
incrementAndGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
i	O
+	O
+	O
is	O
i	O
.	B-api_mention
getAndIncrement	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
-	O
i	O
is	O
i	O
.	B-api_mention
decrementAndGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
i	O
-	O
-	O
is	O
i	O
.	B-api_mention
getAndDecrement	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
i	O
=	O
x	O
is	O
i	O
.	B-api_mention
set	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
x	O
=	O
i	O
is	O
x	O
=	O
i	O
.	B-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
There	O
are	O
other	O
convenience	O
methods	O
as	O
well	O
,	O
like	O
compareAndSet	B-api_mention
or	O
addAndGet	B-api_mention
Question	O
-	O
30888581	O
,	O
answer	O
-	O
30897102	O
Once	O
given	O
more	O
thought	O
In	O
hindsight	O
it	O
sounds	O
like	O
they	O
were	O
looking	O
for	O
the	O
execute	O
around	O
pattern	O
.	O
They	O
'	O
re	O
usually	O
used	O
to	O
do	O
things	O
like	O
enforce	O
closing	O
of	O
streams	O
.	O
This	O
is	O
also	O
more	O
relevant	O
due	O
to	O
this	O
line	O
:	O
#	O
blockquote	O
The	O
idea	O
is	O
you	O
give	O
the	O
thing	O
that	O
does	O
the	O
"	O
executing	O
around	O
"	O
some	O
class	O
to	O
do	O
somethings	O
with	O
.	O
You	O
'	O
ll	O
probably	O
use	O
Runnable	B-api_mention
but	O
it	O
'	O
s	O
not	O
necessary	O
.	O
(	O
Runnable	B-api_mention
makes	O
the	O
most	O
sense	O
and	O
you	O
'	O
ll	O
see	O
why	O
soon	O
.	O
)	O
In	O
your	O
StopWatch	O
class	O
add	O
some	O
method	O
like	O
this	O
#	O
pre	O
You	O
would	O
then	O
call	O
it	O
like	O
this	O
#	O
pre	O
This	O
makes	O
it	O
fool	O
proof	O
.	O
You	O
don	O
'	O
t	O
have	O
to	O
worry	O
about	O
handling	O
stop	O
before	O
start	O
or	O
people	O
forgetting	O
to	O
call	O
one	O
and	O
not	O
the	O
other	O
,	O
etc	O
.	O
The	O
reason	O
Runnable	B-api_mention
is	O
nice	O
is	O
because	O
#	O
li	O
Standard	O
java	O
class	O
,	O
not	O
your	O
own	O
or	O
third	O
party	O
#	O
li	O
End	O
users	O
can	O
put	O
whatever	O
they	O
need	O
in	O
the	O
Runnable	B-api_mention
to	O
be	O
done	O
.	O
(	O
If	O
you	O
were	O
using	O
it	O
to	O
enforce	O
stream	O
closing	O
then	O
you	O
could	O
put	O
the	O
actions	O
that	O
need	O
to	O
be	O
done	O
with	O
a	O
database	O
connection	O
inside	O
so	O
the	O
end	O
user	O
doesn	O
'	O
t	O
need	O
to	O
worry	O
about	O
how	O
to	O
open	O
and	O
close	O
it	O
and	O
you	O
simultaneously	O
force	O
them	O
to	O
close	O
it	O
properly	O
.	O
)	O
If	O
you	O
wanted	O
,	O
you	O
could	O
make	O
some	O
StopWatchWrapper	O
instead	O
leave	O
StopWatch	O
unmodified	O
.	O
You	O
could	O
also	O
make	O
measureAction	O
(	O
args	O
)	O
not	O
return	O
a	O
time	O
and	O
make	O
getTime	O
(	O
args	O
)	O
public	O
instead	O
.	O
The	O
Java	O
8	O
way	O
to	O
calling	O
it	O
is	O
even	O
simpler	O
#	O
pre	O
#	O
blockquote	O
Original	O
answer	O
#	O
blockquote	O
To	O
me	O
something	O
like	O
this	O
seems	O
to	O
be	O
good	O
.	O
#	O
pre	O
The	O
reason	O
I	O
believe	O
this	O
to	O
be	O
good	O
is	O
the	O
recording	O
is	O
during	O
object	O
creation	O
so	O
it	O
can	O
'	O
t	O
be	O
forgotten	O
or	O
done	O
out	O
of	O
order	O
(	O
can	O
'	O
t	O
call	O
stop	O
(	O
args	O
)	O
method	O
if	O
it	O
doesn	O
'	O
t	O
exist	O
)	O
.	O
One	O
flaw	O
is	O
probably	O
the	O
naming	O
of	O
stop	O
(	O
args	O
)	O
.	O
At	O
first	O
I	O
thought	O
maybe	O
lap	O
(	O
args	O
)	O
but	O
that	O
usually	O
implies	O
a	O
restarting	O
or	O
some	O
sort	O
(	O
or	O
at	O
least	O
recording	O
since	O
last	O
lap	O
/	O
start	O
)	O
.	O
Perhaps	O
read	O
(	O
args	O
)	O
would	O
be	O
better	O
?	O
This	O
mimics	O
the	O
action	O
of	O
looking	O
at	O
the	O
time	O
on	O
a	O
stop	O
watch	O
.	O
I	O
chose	O
stop	O
(	O
args	O
)	O
to	O
keep	O
it	O
similar	O
to	O
the	O
original	O
class	O
.	O
The	O
only	O
thing	O
I	O
'	O
m	O
not	O
100	O
%	O
sure	O
about	O
is	O
how	O
to	O
get	O
the	O
time	O
.	O
To	O
be	O
honest	O
that	O
seems	O
to	O
be	O
a	O
more	O
minor	O
detail	O
.	O
As	O
long	O
as	O
both	O
.	O
.	O
.	O
in	O
the	O
above	O
code	O
obtain	O
current	O
time	O
the	O
same	O
way	O
it	O
should	O
be	O
fine	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
20177092	O
The	O
better	O
practice	O
is	O
to	O
use	O
for	O
-	O
each	O
.	O
Besides	O
violating	O
the	O
Keep	O
It	O
Simple	O
,	O
Stupid	O
principle	O
,	O
the	O
new	O
-	O
fangled	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
at	O
least	O
the	O
following	O
deficiencies	O
:	O
#	O
li	O
Can	O
'	O
t	O
use	O
non	O
-	O
final	O
variables	O
.	O
So	O
,	O
code	O
like	O
the	O
following	O
can	O
'	O
t	O
be	O
turned	O
into	O
a	O
forEach	B-api_mention
lambda	O
:	O
#	O
blockquote	O
#	O
li	O
Can	O
'	O
t	O
handle	O
checked	O
exceptions	O
.	O
Lambdas	O
aren	O
'	O
t	O
actually	O
forbidden	O
from	O
throwing	O
checked	O
exceptions	O
,	O
but	O
common	O
functional	O
interfaces	O
like	O
Consumer	B-api_mention
don	O
'	O
t	O
declare	O
any	O
.	O
Therefore	O
,	O
any	O
code	O
that	O
throws	O
checked	O
exceptions	O
must	O
wrap	O
them	O
in	O
try	O
-	O
catch	O
or	O
Throwables	B-api_mention
.	I-api_mention
propagate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
even	O
if	O
you	O
do	O
that	O
,	O
it	O
'	O
s	O
not	O
always	O
clear	O
what	O
happens	O
to	O
the	O
thrown	O
exception	O
.	O
It	O
could	O
get	O
swallowed	O
somewhere	O
in	O
the	O
guts	O
of	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
Limited	O
flow	O
-	O
control	O
.	O
A	O
return	O
in	O
a	O
lambda	O
equals	O
a	O
continue	O
in	O
a	O
for	O
-	O
each	O
,	O
but	O
there	O
is	O
no	O
equivalent	O
to	O
a	O
break	O
.	O
It	O
'	O
s	O
also	O
difficult	O
to	O
do	O
things	O
like	O
return	O
values	O
,	O
short	O
circuit	O
,	O
or	O
set	O
flags	O
(	O
which	O
would	O
have	O
alleviated	O
things	O
a	O
bit	O
,	O
if	O
it	O
wasn	O
'	O
t	O
a	O
violation	O
of	O
the	O
no	O
non	O
-	O
final	O
variables	O
rule	O
)	O
.	O
"	O
This	O
is	O
not	O
just	O
an	O
optimization	O
,	O
but	O
critical	O
when	O
you	O
consider	O
that	O
some	O
sequences	O
(	O
like	O
reading	O
the	O
lines	O
in	O
a	O
file	O
)	O
may	O
have	O
side	O
-	O
effects	O
,	O
or	O
you	O
may	O
have	O
an	O
infinite	O
sequence	O
.	O
"	O
#	O
li	O
Might	O
execute	O
in	O
parallel	O
,	O
which	O
is	O
a	O
horrible	O
,	O
horrible	O
thing	O
for	O
all	O
but	O
the	O
0	O
.	O
1	O
%	O
of	O
your	O
code	O
that	O
needs	O
to	O
be	O
optimized	O
.	O
Any	O
parallel	O
code	O
has	O
to	O
be	O
thought	O
through	O
(	O
even	O
if	O
it	O
doesn	O
'	O
t	O
use	O
locks	O
,	O
volatiles	O
,	O
and	O
other	O
particularly	O
nasty	O
aspects	O
of	O
traditional	O
multi	O
-	O
threaded	O
execution	O
)	O
.	O
Any	O
bug	O
will	O
be	O
tough	O
to	O
find	O
.	O
#	O
li	O
Might	O
hurt	O
performance	O
,	O
because	O
the	O
JIT	O
can	O
'	O
t	O
optimize	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
+	O
lambda	O
to	O
the	O
same	O
extent	O
as	O
plain	O
loops	O
,	O
especially	O
now	O
that	O
lambdas	O
are	O
new	O
.	O
By	O
"	O
optimization	O
"	O
I	O
do	O
not	O
mean	O
the	O
overhead	O
of	O
calling	O
lambdas	O
(	O
which	O
is	O
small	O
)	O
,	O
but	O
to	O
the	O
sophisticated	O
analysis	O
and	O
transformation	O
that	O
the	O
modern	O
JIT	O
compiler	O
performs	O
on	O
running	O
code	O
.	O
#	O
li	O
If	O
you	O
do	O
need	O
parallelism	O
,	O
it	O
is	O
probably	O
much	O
faster	O
and	O
not	O
much	O
more	O
difficult	O
to	O
use	O
an	O
ExecutorService	B-api_mention
.	O
Streams	O
are	O
both	O
automagical	O
(	O
read	O
:	O
don	O
'	O
t	O
know	O
much	O
about	O
your	O
problem	O
)	O
and	O
use	O
a	O
specialized	O
(	O
read	O
:	O
inefficient	O
for	O
the	O
general	O
case	O
)	O
parallelization	O
strategy	O
(	O
fork	O
-	O
join	O
recursive	O
decomposition	O
)	O
.	O
#	O
li	O
Makes	O
debugging	O
more	O
confusing	O
,	O
because	O
of	O
the	O
nested	O
call	O
hierarchy	O
and	O
,	O
god	O
forbid	O
,	O
parallel	O
execution	O
.	O
The	O
debugger	O
may	O
have	O
issues	O
displaying	O
variables	O
from	O
the	O
surrounding	O
code	O
,	O
and	O
things	O
like	O
step	O
-	O
through	O
may	O
not	O
work	O
as	O
expected	O
.	O
#	O
li	O
Streams	O
in	O
general	O
are	O
more	O
difficult	O
to	O
code	O
,	O
read	O
,	O
and	O
debug	O
.	O
Actually	O
,	O
this	O
is	O
true	O
of	O
complex	O
"	O
fluent	O
"	O
APIs	O
in	O
general	O
.	O
The	O
combination	O
of	O
complex	O
single	O
statements	O
,	O
heavy	O
use	O
of	O
generics	O
,	O
and	O
lack	O
of	O
intermediate	O
variables	O
conspire	O
to	O
produce	O
confusing	O
error	O
messages	O
and	O
frustrate	O
debugging	O
.	O
Instead	O
of	O
"	O
this	O
method	O
doesn	O
'	O
t	O
have	O
an	O
overload	O
for	O
type	O
X	O
"	O
you	O
get	O
an	O
error	O
message	O
closer	O
to	O
"	O
somewhere	O
you	O
messed	O
up	O
the	O
types	O
,	O
but	O
we	O
don	O
'	O
t	O
know	O
where	O
or	O
how	O
.	O
"	O
Similarly	O
,	O
you	O
can	O
'	O
t	O
step	O
through	O
and	O
examine	O
things	O
in	O
a	O
debugger	O
as	O
easily	O
as	O
when	O
the	O
code	O
is	O
broken	O
into	O
multiple	O
statements	O
,	O
and	O
intermediate	O
values	O
are	O
saved	O
to	O
variables	O
.	O
Finally	O
,	O
reading	O
the	O
code	O
and	O
understanding	O
the	O
types	O
and	O
behavior	O
at	O
each	O
stage	O
of	O
execution	O
may	O
be	O
non	O
-	O
trivial	O
.	O
#	O
li	O
Sticks	O
out	O
like	O
a	O
sore	O
thumb	O
.	O
The	O
Java	O
language	O
already	O
has	O
the	O
for	O
-	O
each	O
statement	O
.	O
Why	O
replace	O
it	O
with	O
a	O
function	O
call	O
?	O
Why	O
encourage	O
hiding	O
side	O
-	O
effects	O
somewhere	O
in	O
expressions	O
?	O
Why	O
encourage	O
unwieldy	O
one	O
-	O
liners	O
?	O
Mixing	O
regular	O
for	O
-	O
each	O
and	O
new	O
forEach	B-api_mention
willy	O
-	O
nilly	O
is	O
bad	O
style	O
.	O
Code	O
should	O
speak	O
in	O
idioms	O
(	O
patterns	O
that	O
are	O
quick	O
to	O
comprehend	O
due	O
to	O
their	O
repetition	O
)	O
,	O
and	O
the	O
fewer	O
idioms	O
are	O
used	O
the	O
clearer	O
the	O
code	O
is	O
and	O
less	O
time	O
is	O
spent	O
deciding	O
which	O
idiom	O
to	O
use	O
(	O
a	O
big	O
time	O
-	O
drain	O
for	O
perfectionists	O
like	O
myself	O
!	O
)	O
.	O
As	O
you	O
can	O
see	O
,	O
I	O
'	O
m	O
not	O
a	O
big	O
fan	O
of	O
the	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
except	O
in	O
cases	O
when	O
it	O
makes	O
sense	O
.	O
Particularly	O
offensive	O
to	O
me	O
is	O
the	O
fact	O
that	O
Stream	B-api_mention
does	O
not	O
implement	O
Iterable	B-api_mention
(	O
despite	O
actually	O
having	O
method	O
iterator	O
)	O
and	O
cannot	O
be	O
used	O
in	O
a	O
for	O
-	O
each	O
,	O
only	O
with	O
a	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
.	O
I	O
recommend	O
casting	O
Streams	O
into	O
Iterables	O
with	O
(	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
stream	O
:	O
:	O
iterator	O
.	O
A	O
better	O
alternative	O
is	O
to	O
use	O
StreamEx	O
which	O
fixes	O
a	O
number	O
of	O
Stream	B-api_mention
API	O
problems	O
,	O
including	O
implementing	O
Iterable	B-api_mention
.	O
That	O
said	O
,	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
useful	O
for	O
the	O
following	O
:	O
#	O
li	O
Atomically	O
iterating	O
over	O
a	O
synchronized	O
list	O
.	O
Prior	O
to	O
this	O
,	O
a	O
list	O
generated	O
with	O
Collections	B-api_mention
.	I-api_mention
synchronizedList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
atomic	O
with	O
respect	O
to	O
things	O
like	O
get	O
or	O
set	O
,	O
but	O
was	O
not	O
thread	O
-	O
safe	O
when	O
iterating	O
.	O
#	O
li	O
Parallel	O
execution	O
(	O
using	O
an	O
appropriate	O
parallel	O
stream	O
)	O
.	O
This	O
saves	O
you	O
a	O
few	O
lines	O
of	O
code	O
vs	O
using	O
an	O
ExecutorService	B-api_mention
,	O
if	O
your	O
problem	O
matches	O
the	O
performance	O
assumptions	O
built	O
into	O
Streams	O
and	O
Spliterators	O
.	O
#	O
li	O
Specific	O
containers	O
which	O
,	O
like	O
the	O
synchronized	O
list	O
,	O
benefit	O
from	O
being	O
in	O
control	O
of	O
iteration	O
(	O
although	O
this	O
is	O
largely	O
theoretical	O
unless	O
people	O
can	O
bring	O
up	O
more	O
examples	O
)	O
#	O
li	O
Calling	O
a	O
single	O
function	O
more	O
cleanly	O
by	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
a	O
method	O
reference	O
argument	O
(	O
ie	O
,	O
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
However	O
,	O
keep	O
in	O
mind	O
the	O
points	O
on	O
checked	O
exceptions	O
,	O
more	O
difficult	O
debugging	O
,	O
and	O
reducing	O
the	O
number	O
of	O
idioms	O
you	O
use	O
when	O
writing	O
code	O
.	O
Articles	O
I	O
used	O
for	O
reference	O
:	O
#	O
li	O
Everything	O
about	O
Java	O
8	O
#	O
li	O
Iteration	O
Inside	O
and	O
Out	O
(	O
as	O
pointed	O
out	O
by	O
another	O
poster	O
)	O
EDIT	O
:	O
Looks	O
like	O
some	O
of	O
the	O
original	O
proposals	O
for	O
lambdas	O
(	O
such	O
as	O
#	O
a	O
)	O
solved	O
some	O
of	O
the	O
issues	O
I	O
mentioned	O
(	O
while	O
adding	O
their	O
own	O
complications	O
,	O
of	O
course	O
)	O
.	O
Question	O
-	O
13604703	O
,	O
answer	O
-	O
13604748	O
Lambdas	O
are	O
purely	O
a	O
call	O
-	O
site	O
construct	O
:	O
the	O
recipient	O
of	O
the	O
lambda	O
does	O
not	O
need	O
to	O
know	O
that	O
a	O
Lambda	O
is	O
involved	O
,	O
instead	O
it	O
accepts	O
an	O
Interface	O
with	O
the	O
appropriate	O
method	O
.	O
In	O
other	O
words	O
,	O
you	O
define	O
or	O
use	O
a	O
functional	O
interface	O
(	O
i	O
.	O
e	O
.	O
an	O
interface	O
with	O
a	O
single	O
method	O
)	O
that	O
accepts	O
and	O
returns	O
exactly	O
what	O
you	O
want	O
.	O
For	O
this	O
Java	O
8	O
comes	O
with	O
a	O
set	O
of	O
commonly	O
-	O
used	O
interface	O
types	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
(	O
thanks	O
to	O
Maurice	O
Naftalin	O
for	O
the	O
hint	O
about	O
the	O
JavaDoc	O
)	O
.	O
For	O
this	O
specific	O
use	O
case	O
there	O
'	O
s	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	I-api_mention
IntBinaryOperator	I-api_mention
with	O
a	O
single	O
int	O
applyAsInt	B-api_mention
(	I-api_mention
int	I-api_mention
left	I-api_mention
,	I-api_mention
int	I-api_mention
right	I-api_mention
)	I-api_mention
method	O
,	O
so	O
you	O
could	O
write	O
your	O
method	O
like	O
this	O
:	O
#	O
pre	O
But	O
you	O
can	O
just	O
as	O
well	O
define	O
your	O
own	O
interface	O
and	O
use	O
it	O
like	O
this	O
:	O
#	O
pre	O
Using	O
your	O
own	O
interface	O
has	O
the	O
advantage	O
that	O
you	O
can	O
have	O
names	O
that	O
more	O
clearly	O
indicate	O
the	O
intent	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26886202	O
You	O
are	O
performing	O
multiple	O
search	O
-	O
replace	O
operations	O
on	O
the	O
input	O
.	O
This	O
will	O
produce	O
undesired	O
results	O
when	O
the	O
replacement	O
strings	O
contain	O
search	O
strings	O
.	O
Consider	O
the	O
foo	O
-	O
>	O
bar	O
,	O
bar	O
-	O
foo	O
example	O
,	O
here	O
are	O
the	O
results	O
for	O
each	O
iteration	O
:	O
#	O
li	O
Once	O
upon	O
a	O
time	O
,	O
there	O
was	O
a	O
foo	O
and	O
a	O
bar	O
.	O
(	O
input	O
)	O
#	O
li	O
Once	O
upon	O
a	O
time	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
bar	O
.	O
(	O
foo	O
-	O
>	O
bar	O
)	O
#	O
li	O
Once	O
upon	O
a	O
time	O
,	O
there	O
was	O
a	O
foo	O
and	O
a	O
foo	O
.	O
(	O
bar	O
-	O
>	O
foo	O
,	O
output	O
)	O
You	O
need	O
to	O
perform	O
the	O
replacement	O
in	O
one	O
iteration	O
without	O
going	O
back	O
.	O
A	O
brute	O
-	O
force	O
solution	O
is	O
as	O
follows	O
:	O
#	O
li	O
Search	O
the	O
input	O
from	O
current	O
position	O
to	O
end	O
for	O
multiple	O
search	O
strings	O
until	O
a	O
match	O
is	O
found	O
#	O
li	O
Replace	O
the	O
matched	O
search	O
string	O
with	O
corresponding	O
replace	O
string	O
#	O
li	O
Set	O
current	O
position	O
to	O
the	O
next	O
character	O
after	O
the	O
replaced	O
string	O
#	O
li	O
Repeat	O
A	O
function	O
such	O
as	O
String	B-api_mention
.	I-api_mention
indexOfAny	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
>	O
int	O
[	O
]	O
{	O
index	O
,	O
whichString	O
}	O
would	O
be	O
useful	O
.	O
Here	O
is	O
an	O
example	O
(	O
not	O
the	O
most	O
efficient	O
one	O
)	O
:	O
#	O
pre	O
Some	O
tests	O
:	O
#	O
pre	O
Demo	O
on	O
IDEONE	O
Demo	O
on	O
IDEONE	O
,	O
alternate	O
code	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684852	O
What	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
is	O
create	O
a	O
string	O
representation	O
of	O
each	O
individual	O
byte	O
in	O
your	O
byteArray	B-api_mention
.	O
Please	O
check	O
the	O
API	O
documentation	O
Arrays	B-api_mention
API	O
To	O
convert	O
your	O
response	O
string	O
back	O
to	O
the	O
original	O
byte	O
array	O
,	O
you	O
have	O
to	O
use	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
something	O
and	O
convert	O
it	O
into	O
a	O
collection	O
and	O
then	O
convert	O
each	O
individual	O
item	O
in	O
there	O
to	O
a	O
byte	O
to	O
recreate	O
your	O
byte	O
array	O
.	O
Question	O
-	O
5071040	O
,	O
answer	O
-	O
22547954	O
Always	O
use	O
either	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Using	O
"	O
"	O
+	O
number	O
is	O
an	O
overhead	O
and	O
does	O
the	O
following	O
:	O
#	O
pre	O
Question	O
-	O
22561614	O
Note	O
:	O
this	O
question	O
originates	O
from	O
a	O
dead	O
link	O
which	O
was	O
a	O
previous	O
SO	O
question	O
,	O
but	O
here	O
goes	O
.	O
.	O
.	O
See	O
this	O
code	O
(	O
note	O
:	O
I	O
do	O
know	O
that	O
this	O
code	O
won	O
'	O
t	O
"	O
work	O
"	O
and	O
that	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
compare	I-api_mention
should	O
be	O
used	O
-	O
-	O
I	O
just	O
extracted	O
it	O
from	O
the	O
linked	O
question	O
)	O
:	O
#	O
pre	O
According	O
to	O
the	O
javadoc	O
of	O
.	B-api_mention
min	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
.	B-api_mention
max	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
the	O
argument	O
of	O
both	O
should	O
be	O
a	O
Comparator	B-api_mention
.	O
Yet	O
here	O
the	O
method	O
references	O
are	O
to	O
static	O
methods	O
of	O
the	O
Integer	B-api_mention
class	O
.	O
So	O
,	O
why	O
does	O
this	O
compile	O
at	O
all	O
?	O
Question	O
-	O
6841333	O
If	O
I	O
run	O
the	O
following	O
program	O
,	O
which	O
parses	O
two	O
date	O
strings	O
referencing	O
times	O
one	O
second	O
apart	O
and	O
compares	O
them	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
353	O
Why	O
is	O
ld4	O
-	O
ld3	O
not	O
1	O
(	O
as	O
I	O
would	O
expect	O
from	O
the	O
one	O
-	O
second	O
difference	O
in	O
the	O
times	O
)	O
,	O
but	O
353	O
?	O
If	O
I	O
change	O
the	O
dates	O
to	O
times	O
one	O
second	O
later	O
:	O
#	O
pre	O
Then	O
ld4	O
-	O
ld3	O
will	O
be	O
1	O
.	O
Java	O
version	O
:	O
#	O
pre	O
Timezone	B-api_mention
(	O
TimeZone	B-api_mention
.	I-api_mention
getDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
:	O
#	O
pre	O
Question	O
-	O
5175728	O
,	O
answer	O
-	O
5175900	O
It	O
depends	O
on	O
what	O
form	O
of	O
date	O
/	O
time	O
you	O
want	O
:	O
#	O
li	O
If	O
you	O
want	O
the	O
date	O
/	O
time	O
as	O
a	O
single	O
numeric	O
value	O
,	O
then	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
that	O
,	O
expressed	O
as	O
the	O
number	O
of	O
milliseconds	O
after	O
the	O
UNIX	O
epoch	O
(	O
as	O
a	O
Java	O
long	O
)	O
.	O
This	O
value	O
is	O
a	O
delta	O
from	O
a	O
UTC	O
time	O
-	O
point	O
,	O
and	O
is	O
independent	O
of	O
the	O
local	O
time	O
-	O
zone	O
.	O
.	O
.	O
assuming	O
that	O
the	O
system	O
clock	O
has	O
been	O
set	O
correctly	O
.	O
#	O
li	O
If	O
you	O
want	O
the	O
date	O
/	O
time	O
in	O
a	O
form	O
that	O
allows	O
you	O
to	O
access	O
the	O
components	O
(	O
year	O
,	O
month	O
,	O
etc	O
)	O
numerically	O
,	O
you	O
could	O
use	O
one	O
of	O
the	O
following	O
:	O
#	O
li	O
new	O
Date	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
a	O
Date	B-api_mention
object	O
initialized	O
with	O
the	O
current	O
date	O
/	O
time	O
.	O
The	O
problem	O
is	O
that	O
the	O
Date	B-api_mention
API	O
methods	O
are	O
mostly	O
flawed	O
.	O
.	O
.	O
and	O
deprecated	O
.	O
#	O
li	O
Calendar	B-api_mention
.	I-api_mention
getInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
a	O
Calendar	B-api_mention
object	O
initialized	O
with	O
the	O
current	O
date	O
/	O
time	O
,	O
using	O
the	O
default	O
Locale	B-api_mention
and	O
TimeZone	B-api_mention
.	O
Other	O
overloads	O
allow	O
you	O
to	O
use	O
a	O
specific	O
Locale	B-api_mention
and	O
/	O
or	O
TimeZone	B-api_mention
.	O
Calendar	B-api_mention
works	O
.	O
.	O
.	O
but	O
the	O
APIs	O
are	O
still	O
cumbersome	O
.	O
#	O
li	O
new	O
org	B-api_mention
.	I-api_mention
joda	I-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
DateTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
a	O
Joda	O
-	O
time	O
object	O
initialized	O
with	O
the	O
current	O
date	O
/	O
time	O
,	O
using	O
the	O
default	O
time	O
zone	O
and	O
chronology	O
.	O
There	O
are	O
lots	O
of	O
other	O
Joda	O
alternatives	O
.	O
.	O
.	O
too	O
many	O
to	O
describe	O
here	O
.	O
#	O
li	O
in	O
Java	O
8	O
,	O
calling	O
LocalDateTime	B-api_mention
.	I-api_mention
now	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
ZonedDateTime	B-api_mention
.	I-api_mention
now	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
give	O
you	O
representations	O
for	O
the	O
current	O
date	O
/	O
time	O
.	O
Prior	O
to	O
Java	O
8	O
,	O
most	O
people	O
who	O
know	O
about	O
these	O
things	O
recommended	O
Joda	O
-	O
time	O
as	O
having	O
(	O
by	O
far	O
)	O
the	O
best	O
Java	O
APIs	O
for	O
doing	O
things	O
involving	O
time	O
point	O
and	O
duration	O
calculations	O
.	O
With	O
Java	O
8	O
,	O
this	O
is	O
no	O
longer	O
true	O
.	O
However	O
,	O
if	O
you	O
are	O
already	O
using	O
Joda	O
time	O
in	O
your	O
codebase	O
,	O
there	O
is	O
no	O
strong	O
reason	O
to	O
migrate	O
.	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
5374346	O
What	O
is	O
happening	O
is	O
that	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
creating	O
an	O
Object	B-api_mention
[	O
]	O
rather	O
than	O
a	O
String	B-api_mention
[	O
]	O
and	O
hence	O
the	O
typecast	O
is	O
failing	O
.	O
The	O
correct	O
code	O
would	O
be	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
even	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
more	O
details	O
,	O
refer	O
to	O
the	O
javadocs	O
for	O
the	O
two	O
overloads	O
of	O
List	B-api_mention
.	I-api_mention
toArray	I-api_mention
.	O
(	O
From	O
a	O
technical	O
perspective	O
,	O
the	O
reason	O
for	O
this	O
API	O
behaviour	O
/	O
design	O
is	O
that	O
an	O
implementation	O
of	O
the	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	I-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
no	O
information	O
of	O
what	O
the	O
<	O
T	O
>	O
is	O
at	O
runtime	O
.	O
All	O
it	O
knows	O
is	O
that	O
the	O
raw	O
element	O
type	O
is	O
Object	B-api_mention
.	O
By	O
contrast	O
,	O
in	O
the	O
other	O
case	O
,	O
the	O
array	O
parameter	O
gives	O
the	O
base	O
type	O
of	O
the	O
array	O
.	O
(	O
If	O
the	O
supplied	O
array	O
is	O
big	O
enough	O
,	O
it	O
is	O
used	O
.	O
Otherwise	O
a	O
new	O
array	O
of	O
the	O
same	O
type	O
and	O
a	O
larger	O
size	O
will	O
be	O
allocated	O
and	O
returned	O
as	O
the	O
result	O
.	O
)	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
30133063	O
Much	O
more	O
convenient	O
way	O
if	O
you	O
are	O
sure	O
you	O
need	O
a	O
default	O
timezone	O
:	O
Date	B-api_mention
d	O
=	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Timestamp	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993533	O
The	O
reason	O
is	O
that	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
checks	O
if	O
there	O
are	O
any	O
more	O
non	O
-	O
whitespace	O
characters	O
available	O
.	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
checks	O
to	O
see	O
if	O
there	O
is	O
another	O
line	O
of	O
text	O
available	O
.	O
Your	O
text	O
file	O
probably	O
has	O
a	O
newline	O
at	O
the	O
end	O
of	O
it	O
so	O
it	O
has	O
another	O
line	O
but	O
no	O
more	O
characters	O
that	O
are	O
not	O
whitespace	O
.	O
Many	O
text	O
editors	O
automatically	O
add	O
a	O
newline	O
to	O
the	O
end	O
of	O
a	O
file	O
if	O
there	O
isn	O
'	O
t	O
one	O
already	O
.	O
In	O
other	O
words	O
,	O
your	O
input	O
file	O
is	O
not	O
this	O
(	O
the	O
numbers	O
are	O
line	O
numbers	O
)	O
:	O
#	O
pre	O
It	O
is	O
actually	O
this	O
:	O
#	O
pre	O
Question	O
-	O
29229373	O
,	O
answer	O
-	O
33839551	O
In	O
my	O
free	O
StreamEx	O
library	O
I	O
introduced	O
the	O
short	O
-	O
circuiting	O
collectors	O
.	O
When	O
collecting	O
sequential	O
stream	O
with	O
short	O
-	O
circuiting	O
collector	O
(	O
like	O
MoreCollectors	O
.	B-api_mention
first	I-api_mention
(	I-api_mention
)	I-api_mention
)	O
exactly	O
one	O
element	O
is	O
consumed	O
from	O
the	O
source	O
.	O
Internally	O
it	O
'	O
s	O
implemented	O
in	O
quite	O
dirty	O
way	O
:	O
using	O
a	O
custom	O
exception	O
to	O
break	O
the	O
control	O
flow	O
.	O
Using	O
my	O
library	O
your	O
sample	O
could	O
be	O
rewritten	O
in	O
this	O
way	O
:	O
#	O
pre	O
The	O
result	O
is	O
the	O
following	O
:	O
#	O
pre	O
Question	O
-	O
24649842	O
What	O
'	O
s	O
the	O
main	O
difference	O
between	O
scheduleAtFixedRate	B-api_mention
and	O
scheduleWithFixedDelay	B-api_mention
methods	O
of	O
ScheduledExecutorService	B-api_mention
?	O
#	O
pre	O
they	O
print	O
exact	O
the	O
same	O
time	O
,	O
seems	O
they	O
are	O
executed	O
at	O
exact	O
the	O
same	O
interval	O
.	O
Question	O
-	O
7655127	O
,	O
answer	O
-	O
7655177	O
String	B-api_mention
text	O
=	O
String	B-api_mention
.	I-api_mention
copyValueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
String	B-api_mention
text	O
=	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
is	O
arguably	O
better	O
(	O
encapsulates	O
the	O
new	O
String	B-api_mention
call	O
)	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
5192545	O
Edit	O
Updated	O
to	O
bring	O
in	O
feedback	O
.	O
So	O
two	O
ways	O
that	O
work	O
:	O
#	O
li	O
Use	O
StringBulderObj	B-api_mention
.	I-api_mention
setLength	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Allocate	O
a	O
new	O
one	O
instead	O
of	O
clearing	O
the	O
buffer	O
Question	O
-	O
18263489	O
,	O
answer	O
-	O
29873100	O
It	O
isn	O
'	O
t	O
pretty	O
,	O
but	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
allows	O
you	O
to	O
use	O
a	O
null	O
String	B-api_mention
in	O
a	O
switch	O
.	O
If	O
it	O
finds	O
null	O
,	O
it	O
converts	O
it	O
to	O
StringLiteral	O
,	O
otherwise	O
it	O
just	O
returns	O
the	O
same	O
String	B-api_mention
you	O
passed	O
it	O
.	O
If	O
you	O
don	O
'	O
t	O
handle	O
StringLiteral	O
explicitly	O
,	O
then	O
it	O
will	O
go	O
to	O
default	O
.	O
The	O
only	O
caveat	O
is	O
that	O
there	O
is	O
no	O
way	O
of	O
distinguishing	O
between	O
the	O
String	B-api_mention
StringLiteral	O
and	O
an	O
actual	O
null	O
String	B-api_mention
.	O
#	O
pre	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
29938300	O
Use	O
this	O
method	O
,	O
but	O
be	O
careful	O
to	O
make	O
an	O
object	O
in	O
your	O
main	O
.	O
public	O
static	O
void	O
setName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
Class	B-api_mention
setClass	O
=	O
obj	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
String	B-api_mention
className	O
=	O
setClass	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
}	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
5585800	O
int	O
foo	O
=	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
See	O
the	O
Java	O
Documentation	O
for	O
more	O
information	O
.	O
(	O
If	O
you	O
have	O
it	O
in	O
a	O
StringBuilder	B-api_mention
(	O
or	O
the	O
ancient	O
StringBuffer	B-api_mention
)	O
,	O
you	O
'	O
ll	O
need	O
to	O
do	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
)	O
.	O
Question	O
-	O
32334319	O
I	O
am	O
using	O
JDK	O
-	O
8	O
(	O
x64	O
)	O
.	O
For	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
I	O
found	O
the	O
following	O
in	O
the	O
Java	O
documentation	O
:	O
#	O
blockquote	O
For	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
I	O
found	O
this	O
:	O
#	O
blockquote	O
If	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
uses	O
an	O
array	O
,	O
why	O
doesn	O
'	O
t	O
it	O
just	O
call	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
or	O
use	O
dual	O
-	O
pivot	O
QuickSort	O
?	O
Why	O
use	O
Mergesort	O
?	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
13134221	O
Actually	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
new	O
thread	O
and	O
have	O
its	O
own	O
execution	O
scenario	O
.	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
asynchronously	O
,	O
which	O
changes	O
the	O
state	O
of	O
new	O
Thread	B-api_mention
to	O
Runnable	B-api_mention
.	O
But	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
create	O
any	O
new	O
thread	O
.	O
Instead	O
it	O
execute	O
the	O
run	O
method	O
in	O
the	O
current	O
running	O
thread	O
synchronously	O
.	O
If	O
you	O
are	O
using	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
then	O
you	O
are	O
not	O
using	O
the	O
features	O
of	O
multi	O
threading	O
at	O
all	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
12665271	O
Here	O
'	O
s	O
my	O
take	O
on	O
the	O
alternatives	O
:	O
1	O
)	O
#	O
pre	O
For	O
me	O
,	O
the	O
best	O
thing	O
coming	O
to	O
Java	O
from	O
traditional	O
C	O
+	O
+	O
15	O
years	O
ago	O
was	O
that	O
you	O
could	O
trust	O
your	O
program	O
.	O
Even	O
if	O
things	O
are	O
in	O
the	O
muck	O
and	O
going	O
wrong	O
,	O
which	O
they	O
often	O
do	O
,	O
I	O
want	O
the	O
rest	O
of	O
the	O
code	O
to	O
be	O
on	O
best	O
behaviour	O
and	O
smelling	O
of	O
roses	O
.	O
Indeed	O
,	O
the	O
BufferedWriter	B-api_mention
might	O
throw	O
an	O
exception	O
here	O
.	O
Running	O
out	O
of	O
memory	O
wouldn	O
'	O
t	O
be	O
unusual	O
,	O
for	O
instance	O
.	O
For	O
other	O
decorators	O
,	O
do	O
you	O
know	O
which	O
of	O
the	O
java	B-api_mention
.	I-api_mention
io	I-api_mention
wrapper	O
classes	O
throw	O
a	O
checked	O
exception	O
from	O
their	O
constructors	O
?	O
I	O
don	O
'	O
t	O
.	O
Doesn	O
'	O
t	O
do	O
code	O
understandability	O
much	O
good	O
if	O
you	O
rely	O
upon	O
that	O
sort	O
of	O
obscure	O
knowledge	O
.	O
Also	O
there	O
'	O
s	O
the	O
"	O
destruction	O
"	O
.	O
If	O
there	O
is	O
an	O
error	O
condition	O
,	O
then	O
you	O
probably	O
don	O
'	O
t	O
want	O
to	O
be	O
flushing	O
rubbish	O
to	O
a	O
file	O
that	O
needs	O
deleting	O
(	O
code	O
for	O
that	O
not	O
shown	O
)	O
.	O
Although	O
,	O
of	O
course	O
,	O
deleting	O
the	O
file	O
is	O
also	O
another	O
interesting	O
operation	O
to	O
do	O
as	O
error	O
handling	O
.	O
Generally	O
you	O
want	O
finally	O
blocks	O
to	O
be	O
as	O
short	O
and	O
reliable	O
as	O
possible	O
.	O
Adding	O
flushes	O
does	O
not	O
help	O
this	O
goal	O
.	O
For	O
many	O
releases	O
some	O
of	O
the	O
buffering	O
classes	O
in	O
the	O
JDK	O
had	O
a	O
bug	O
where	O
an	O
exception	O
from	O
flush	B-api_mention
within	O
close	B-api_mention
caused	O
close	B-api_mention
on	O
the	O
decorated	O
object	O
not	O
be	O
called	O
.	O
Whilst	O
that	O
has	O
been	O
fixed	O
for	O
some	O
time	O
,	O
expect	O
it	O
from	O
other	O
implementations	O
.	O
2	O
)	O
#	O
pre	O
We	O
'	O
re	O
still	O
flushing	O
in	O
the	O
implicit	O
finally	O
block	O
(	O
now	O
with	O
repeated	O
close	B-api_mention
-	O
this	O
gets	O
worse	O
as	O
you	O
add	O
more	O
decorators	O
)	O
,	O
but	O
the	O
construction	O
is	O
safe	O
and	O
we	O
have	O
to	O
implicit	O
finally	O
blocks	O
so	O
even	O
a	O
failed	O
flush	B-api_mention
doesn	O
'	O
t	O
prevent	O
resource	O
release	O
.	O
3	O
)	O
#	O
pre	O
There	O
'	O
s	O
a	O
bug	O
here	O
.	O
Should	O
be	O
:	O
#	O
pre	O
Some	O
poorly	O
implemented	O
decorators	O
are	O
in	O
fact	O
resource	O
and	O
will	O
need	O
to	O
be	O
closed	O
reliably	O
.	O
Also	O
some	O
streams	O
may	O
need	O
to	O
be	O
closed	O
in	O
a	O
particular	O
way	O
(	O
perhaps	O
they	O
are	O
doing	O
compression	O
and	O
need	O
to	O
write	O
bits	O
to	O
finish	O
off	O
,	O
and	O
can	O
'	O
t	O
just	O
flush	O
everything	O
.	O
Verdict	O
Although	O
3	O
is	O
a	O
technically	O
superior	O
solution	O
,	O
software	O
development	O
reasons	O
make	O
2	O
the	O
better	O
choice	O
.	O
However	O
,	O
try	O
-	O
with	O
-	O
resource	O
is	O
still	O
an	O
inadequate	O
fix	O
and	O
you	O
should	O
stick	O
with	O
the	O
Execute	O
Around	O
idiom	O
,	O
which	O
should	O
have	O
a	O
clearer	O
syntax	O
with	O
closures	O
in	O
Java	O
SE	O
8	O
.	O
Question	O
-	O
33635717	O
I	O
'	O
m	O
reading	O
up	O
about	O
Java	O
streams	O
and	O
discovering	O
new	O
things	O
as	O
I	O
go	O
along	O
.	O
One	O
of	O
the	O
new	O
things	O
I	O
found	O
was	O
the	O
peek	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
.	O
Almost	O
everything	O
I	O
'	O
ve	O
read	O
on	O
peek	O
says	O
it	O
should	O
be	O
used	O
to	O
debug	O
your	O
Streams	O
.	O
What	O
if	O
I	O
had	O
a	O
Stream	B-api_mention
where	O
each	O
Account	O
has	O
a	O
username	O
,	O
password	O
field	O
and	O
a	O
login	O
(	O
)	O
and	O
loggedIn	O
(	O
)	O
method	O
.	O
I	O
also	O
have	O
Consumer	O
<	O
T	O
>	O
login	O
=	O
account	O
-	O
>	O
account	O
.	O
login	O
(	O
args	O
)	O
;	O
and	O
Predicate	O
<	O
T	O
>	O
loggedIn	O
=	O
account	O
-	O
>	O
account	O
.	O
loggedIn	O
(	O
args	O
)	O
;	O
Why	O
would	O
this	O
be	O
so	O
bad	O
?	O
#	O
pre	O
Now	O
as	O
far	O
as	O
I	O
can	O
tell	O
this	O
does	O
exactly	O
what	O
it	O
'	O
s	O
intended	O
to	O
do	O
.	O
It	O
;	O
#	O
li	O
Takes	O
a	O
list	O
of	O
accounts	O
#	O
li	O
Tries	O
to	O
log	O
in	O
to	O
each	O
account	O
#	O
li	O
Filters	O
out	O
any	O
account	O
which	O
aren	O
'	O
t	O
logged	O
in	O
#	O
li	O
Collects	O
the	O
logged	O
in	O
accounts	O
into	O
a	O
new	O
list	O
What	O
is	O
the	O
downside	O
of	O
doing	O
something	O
like	O
this	O
?	O
Any	O
reason	O
I	O
shouldn	O
'	O
t	O
proceed	O
?	O
Lastly	O
,	O
if	O
not	O
this	O
solution	O
then	O
what	O
?	O
The	O
original	O
version	O
of	O
this	O
used	O
the	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
as	O
follows	O
;	O
#	O
pre	O
Question	O
-	O
7283338	O
,	O
answer	O
-	O
7283475	O
Because	O
any	O
particular	O
implementation	O
of	O
Set	O
may	O
or	O
may	O
not	O
be	O
random	O
access	O
.	O
You	O
can	O
always	O
get	O
an	O
iterator	O
and	O
step	O
through	O
the	O
Set	B-api_mention
,	O
using	O
the	O
iterators	O
'	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
return	O
the	O
result	O
you	O
want	O
once	O
you	O
find	O
the	O
equal	O
element	O
.	O
This	O
works	O
regardless	O
of	O
the	O
implementation	O
.	O
If	O
the	O
implementation	O
is	O
NOT	O
random	O
access	O
(	O
picture	O
a	O
linked	O
-	O
list	O
backed	O
Set	B-api_mention
)	O
,	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
the	O
interface	O
would	O
be	O
deceptive	O
,	O
since	O
it	O
would	O
have	O
to	O
iterate	O
the	O
collection	O
to	O
find	O
the	O
element	O
to	O
return	O
,	O
and	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
seem	O
to	O
imply	O
this	O
would	O
be	O
necessary	O
,	O
that	O
the	O
Set	B-api_mention
could	O
jump	O
directly	O
to	O
the	O
element	O
to	O
get	O
.	O
contains	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
or	O
may	O
not	O
have	O
to	O
do	O
the	O
same	O
thing	O
,	O
of	O
course	O
,	O
depending	O
on	O
the	O
implementation	O
,	O
but	O
the	O
name	O
doesn	O
'	O
t	O
seem	O
to	O
lend	O
itself	O
to	O
the	O
same	O
sort	O
of	O
misunderstandings	O
.	O
Question	O
-	O
6094575	O
,	O
answer	O
-	O
26159586	O
when	O
using	O
(	O
i	O
.	O
e	O
.	O
)	O
getConstructor	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
the	O
constructor	O
has	O
to	O
be	O
declared	O
public	O
.	O
Otherwise	O
a	O
NoSuchMethodException	B-api_mention
is	O
thrown	O
.	O
if	O
you	O
want	O
to	O
access	O
a	O
non	O
-	O
public	O
constructor	O
you	O
have	O
to	O
use	O
instead	O
(	O
i	O
.	O
e	O
.	O
)	O
getDeclaredConstructor	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489410	O
Java	O
String	B-api_mention
is	O
Special	O
#	O
blockquote	O
For	O
example	O
#	O
pre	O
#	O
img	O
Note	O
:	O
String	B-api_mention
literals	O
are	O
stored	O
in	O
a	O
common	O
pool	O
.	O
This	O
facilitates	O
sharing	O
of	O
storage	O
for	O
strings	O
with	O
the	O
same	O
contents	O
to	O
conserve	O
storage	O
.	O
String	B-api_mention
objects	O
allocated	O
via	O
new	O
operator	O
are	O
stored	O
in	O
the	O
heap	O
,	O
and	O
there	O
is	O
no	O
sharing	O
of	O
storage	O
for	O
the	O
same	O
contents	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777292	O
The	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
arrays	O
is	O
inherited	O
from	O
Object	O
,	O
so	O
it	O
does	O
not	O
look	O
at	O
the	O
contents	O
of	O
the	O
arrrays	O
,	O
it	O
only	O
considers	O
each	O
array	O
equal	O
to	O
itself	O
.	O
The	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
do	O
compare	O
the	O
arrays	O
'	O
contents	O
.	O
There	O
'	O
s	O
overloads	O
for	O
all	O
primitive	O
types	O
,	O
and	O
the	O
one	O
for	O
objects	O
uses	O
the	O
objects	O
'	O
own	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
.	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818753	O
There	O
are	O
two	O
main	O
uses	O
of	O
AtomicInteger	B-api_mention
:	O
#	O
li	O
As	O
an	O
atomic	O
counter	O
(	O
incrementAndGet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
etc	O
)	O
that	O
can	O
be	O
used	O
by	O
many	O
threads	O
concurrently	O
#	O
li	O
As	O
a	O
primitive	O
that	O
supports	O
compare	O
-	O
and	O
-	O
swap	O
instruction	O
(	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
to	O
implement	O
non	O
-	O
blocking	O
algorithms	O
.	O
Here	O
is	O
an	O
example	O
of	O
non	O
-	O
blocking	O
random	O
number	O
generator	O
from	O
Brian	O
G	O
ö	O
etz	O
'	O
s	O
Java	O
Concurrency	O
In	O
Practice	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
basically	O
works	O
almost	O
the	O
same	O
way	O
as	O
incrementAndGet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
performs	O
arbitrary	O
calculation	O
(	O
calculateNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
instead	O
of	O
increment	O
(	O
and	O
processes	O
the	O
result	O
before	O
return	O
)	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29096777	O
The	O
only	O
solution	O
I	O
come	O
up	O
with	O
for	O
the	O
moment	O
is	O
by	O
implementing	O
your	O
own	O
custom	O
collector	O
.	O
Before	O
reading	O
the	O
solution	O
,	O
I	O
want	O
to	O
add	O
a	O
few	O
notes	O
about	O
this	O
.	O
I	O
took	O
this	O
question	O
more	O
as	O
a	O
programming	O
exercise	O
,	O
I	O
'	O
m	O
not	O
sure	O
if	O
it	O
can	O
be	O
done	O
with	O
a	O
parallel	O
stream	O
.	O
So	O
you	O
have	O
to	O
be	O
aware	O
that	O
it	O
'	O
ll	O
silently	O
break	O
if	O
the	O
pipeline	O
is	O
run	O
in	O
parallel	O
.	O
This	O
is	O
not	O
a	O
desirable	O
behavior	O
and	O
should	O
be	O
avoided	O
.	O
This	O
is	O
why	O
I	O
throw	O
an	O
exception	O
in	O
the	O
combiner	O
part	O
(	O
instead	O
of	O
(	O
l1	O
,	O
l2	O
)	O
-	O
>	O
{	O
l1	O
.	O
addAll	O
(	O
args	O
)	O
;	O
return	O
l1	O
;	O
}	O
)	O
,	O
as	O
it	O
'	O
s	O
used	O
in	O
parallel	O
when	O
combining	O
the	O
two	O
lists	O
,	O
so	O
that	O
you	O
have	O
an	O
exception	O
instead	O
of	O
a	O
wrong	O
result	O
.	O
Also	O
this	O
is	O
not	O
very	O
efficient	O
due	O
to	O
list	O
copying	O
(	O
although	O
it	O
uses	O
a	O
native	O
method	O
to	O
copy	O
the	O
underlying	O
array	O
)	O
.	O
So	O
here	O
'	O
s	O
the	O
collector	O
implementation	O
:	O
#	O
pre	O
and	O
how	O
to	O
use	O
it	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ll	O
=	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Output	O
:	O
[	O
[	O
a	O
,	O
b	O
]	O
,	O
[	O
c	O
]	O
,	O
[	O
d	O
,	O
e	O
]	O
]	O
As	O
the	O
answer	O
of	O
Joop	O
Eggen	O
is	O
out	O
,	O
it	O
appears	O
that	O
it	O
can	O
be	O
done	O
in	O
parallel	O
(	O
give	O
him	O
credit	O
for	O
that	O
!	O
)	O
.	O
With	O
that	O
it	O
reduces	O
the	O
custom	O
collector	O
implementation	O
to	O
:	O
#	O
pre	O
which	O
let	O
the	O
paragraph	O
about	O
parallelism	O
a	O
bit	O
obsolete	O
,	O
however	O
I	O
let	O
it	O
as	O
it	O
can	O
be	O
a	O
good	O
reminder	O
.	O
Note	O
that	O
the	O
Stream	B-api_mention
API	O
is	O
not	O
always	O
a	O
substitute	O
.	O
There	O
are	O
tasks	O
that	O
are	O
easier	O
and	O
more	O
suitable	O
using	O
the	O
streams	O
and	O
there	O
are	O
tasks	O
that	O
are	O
not	O
.	O
In	O
your	O
case	O
,	O
you	O
could	O
also	O
create	O
a	O
utility	O
method	O
for	O
that	O
:	O
#	O
pre	O
and	O
call	O
it	O
like	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
splitBySeparator	O
(	O
args	O
)	O
;	O
.	O
It	O
can	O
be	O
improved	O
for	O
checking	O
edge	O
-	O
cases	O
.	O
Question	O
-	O
31471444	O
,	O
answer	O
-	O
31471530	O
You	O
should	O
not	O
.	O
The	O
INTEGER	O
_	O
ONE	O
name	O
is	O
no	O
more	O
meaningful	O
than	O
1	O
.	O
If	O
however	O
this	O
value	O
has	O
some	O
other	O
meaning	O
(	O
for	O
example	O
,	O
month	O
in	O
the	O
year	O
)	O
,	O
then	O
using	O
a	O
constant	O
(	O
like	O
Calendar	B-api_mention
.	I-api_mention
FEBRUARY	I-api_mention
)	O
will	O
make	O
your	O
code	O
clearer	O
.	O
I	O
can	O
guess	O
that	O
this	O
constant	O
in	O
Commons	O
Math	O
library	O
was	O
created	O
in	O
Java	O
1	O
.	O
4	O
when	O
there	O
were	O
no	O
Integer	B-api_mention
cache	O
and	O
autoboxing	O
,	O
so	O
it	O
had	O
sense	O
in	O
terms	O
that	O
you	O
may	O
reuse	O
the	O
same	O
Integer	B-api_mention
object	O
(	O
not	O
primitive	O
int	O
)	O
in	O
different	O
places	O
to	O
save	O
memory	O
.	O
So	O
it	O
was	O
added	O
for	O
performance	O
reasons	O
,	O
not	O
for	O
code	O
clarity	O
.	O
Now	O
it	O
'	O
s	O
obsolete	O
:	O
even	O
if	O
you	O
need	O
an	O
Integer	B-api_mention
object	O
,	O
you	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
implicit	O
autoboxing	O
and	O
get	O
the	O
cached	O
one	O
.	O
Question	O
-	O
22409102	O
,	O
answer	O
-	O
22501695	O
The	O
approach	O
used	O
by	O
Math	B-api_mention
.	I-api_mention
min	I-api_mention
is	O
similar	O
to	O
what	O
Jesper	O
proposes	O
but	O
a	O
little	O
clearer	O
:	O
#	O
pre	O
Question	O
-	O
20001427	O
,	O
answer	O
-	O
20001866	O
Usually	O
,	O
one	O
would	O
call	O
the	O
reduce	O
method	O
using	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
follows	O
:	O
#	O
pre	O
That	O
requires	O
a	O
lot	O
of	O
syntax	O
for	O
just	O
calling	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
.	O
That	O
'	O
s	O
where	O
lambda	O
expressions	O
come	O
into	O
play	O
.	O
Since	O
Java	O
8	O
it	O
is	O
allowed	O
to	O
do	O
the	O
same	O
thing	O
in	O
a	O
much	O
shorter	O
way	O
:	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
How	O
does	O
this	O
work	O
?	O
The	O
java	O
compiler	O
"	O
detects	O
"	O
,	O
that	O
you	O
want	O
to	O
implement	O
a	O
method	O
that	O
accepts	O
two	O
int	O
s	O
and	O
returns	O
one	O
int	O
.	O
This	O
is	O
equivalent	O
to	O
the	O
formal	O
parameters	O
of	O
the	O
one	O
and	O
only	O
method	O
of	O
interface	O
IntBinaryOperator	B-api_mention
(	O
the	O
parameter	O
of	O
method	O
reduce	O
you	O
want	O
to	O
call	O
)	O
.	O
So	O
the	O
compiler	O
does	O
the	O
rest	O
for	O
you	O
-	O
it	O
just	O
assumes	O
you	O
want	O
to	O
implement	O
IntBinaryOperator	B-api_mention
.	O
But	O
as	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
itself	O
fulfills	O
the	O
formal	O
requirements	O
of	O
IntBinaryOperator	B-api_mention
,	O
it	O
can	O
be	O
used	O
directly	O
.	O
Because	O
Java	O
7	O
does	O
not	O
have	O
any	O
syntax	O
that	O
allows	O
a	O
method	O
itself	O
to	O
be	O
passed	O
as	O
an	O
argument	O
(	O
you	O
can	O
only	O
pass	O
method	O
results	O
,	O
but	O
never	O
method	O
references	O
)	O
,	O
the	O
:	O
:	O
syntax	O
was	O
introduced	O
in	O
Java	O
8	O
to	O
reference	O
methods	O
:	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
that	O
this	O
will	O
be	O
interpreted	O
by	O
the	O
compiler	O
,	O
not	O
by	O
the	O
JVM	O
at	O
runtime	O
!	O
Although	O
it	O
produces	O
different	O
bytecodes	O
for	O
all	O
three	O
code	O
snippets	O
,	O
they	O
are	O
semantically	O
equal	O
,	O
so	O
the	O
last	O
two	O
can	O
be	O
considered	O
to	O
be	O
short	O
(	O
and	O
probably	O
more	O
efficient	O
)	O
versions	O
of	O
the	O
IntBinaryOperator	B-api_mention
implementation	O
above	O
!	O
(	O
See	O
also	O
Translation	O
of	O
Lambda	O
Expressions	O
)	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32357142	O
When	O
returning	O
List	B-api_mention
,	O
you	O
'	O
ll	O
be	O
promoting	O
program	O
to	O
an	O
interface	O
,	O
which	O
is	O
a	O
very	O
good	O
practice	O
.	O
However	O
,	O
this	O
approach	O
has	O
its	O
limitation	O
.	O
For	O
example	O
,	O
you	O
cannot	O
use	O
some	O
methods	O
that	O
are	O
defined	O
for	O
ArrayList	B-api_mention
and	O
don	O
'	O
t	O
exist	O
in	O
the	O
List	B-api_mention
interface	O
-	O
See	O
this	O
answer	O
for	O
details	O
.	O
I	O
'	O
m	O
quoting	O
the	O
API	O
Design	O
from	O
the	O
The	O
Java	O
™	O
Tutorials	O
:	O
#	O
blockquote	O
Since	O
ArrayList	B-api_mention
is	O
essentially	O
an	O
array	O
,	O
they	O
are	O
my	O
first	O
choice	O
when	O
I	O
need	O
to	O
have	O
a	O
"	O
collection	O
-	O
array	O
"	O
.	O
So	O
if	O
I	O
want	O
to	O
convert	O
enumeration	O
to	O
a	O
list	O
,	O
my	O
choice	O
would	O
be	O
an	O
array	O
list	O
.	O
In	O
any	O
other	O
cases	O
,	O
it	O
'	O
s	O
still	O
valid	O
to	O
write	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
35399386	O
The	O
String	B-api_mention
pool	O
(	O
aka	O
interning	O
)	O
and	O
Integer	B-api_mention
pool	O
blur	O
the	O
difference	O
further	O
,	O
and	O
may	O
allow	O
you	O
to	O
use	O
=	O
=	O
for	O
objects	O
in	O
some	O
cases	O
instead	O
of	O
.	B-api_mention
equals	I-api_mention
This	O
can	O
give	O
you	O
greater	O
performance	O
(	O
?	O
)	O
,	O
at	O
the	O
cost	O
of	O
greater	O
complexity	O
.	O
E	O
.	O
g	O
.	O
:	O
#	O
pre	O
Complexity	O
tradeoff	O
:	O
the	O
following	O
may	O
surprise	O
you	O
:	O
#	O
pre	O
I	O
advise	O
you	O
to	O
stay	O
away	O
from	O
such	O
micro	O
-	O
optimization	O
,	O
and	O
always	O
use	O
.	O
equals	O
for	O
objects	O
,	O
and	O
=	O
=	O
for	O
primitives	O
:	O
#	O
pre	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
31965160	O
With	O
Java	O
8	O
Streams	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
if	O
you	O
need	O
a	O
set	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
29183904	O
I	O
used	O
to	O
define	O
a	O
set	O
of	O
related	O
constants	O
like	O
Bundle	O
keys	O
together	O
in	O
an	O
interface	O
like	O
below	O
:	O
#	O
pre	O
This	O
provides	O
me	O
a	O
nicer	O
way	O
to	O
group	O
related	O
constants	O
together	O
and	O
used	O
them	O
by	O
making	O
a	O
static	O
import	O
(	O
not	O
implements	O
)	O
.	O
I	O
know	O
Android	O
framework	O
also	O
uses	O
the	O
constants	O
in	O
same	O
way	O
like	O
Toast	O
.	O
LENTH	O
_	O
LONG	O
,	O
View	O
.	O
GONE	O
.	O
However	O
,	O
I	O
often	O
feel	O
that	O
the	O
Java	O
Enums	O
provide	O
much	O
better	O
and	O
powerful	O
way	O
to	O
represent	O
the	O
constant	O
.	O
But	O
is	O
there	O
a	O
performence	O
issue	O
in	O
using	O
enums	O
on	O
Android	O
?	O
With	O
a	O
bit	O
of	O
research	O
I	O
ended	O
up	O
in	O
confusion	O
.	O
From	O
this	O
question	O
"	O
Avoid	O
Enums	O
Where	O
You	O
Only	O
Need	O
Ints	O
”	O
removed	O
from	O
Android	O
'	O
s	O
performance	O
tips	O
?	O
it	O
'	O
s	O
clear	O
that	O
Google	O
has	O
removed	O
"	O
Avoid	O
enums	O
"	O
from	O
its	O
performance	O
tips	O
,	O
but	O
from	O
it	O
'	O
s	O
official	O
training	O
docs	O
Be	O
aware	O
of	O
memory	O
overhead	O
section	O
it	O
clearly	O
says	O
:	O
"	O
Enums	O
often	O
require	O
more	O
than	O
twice	O
as	O
much	O
memory	O
as	O
static	O
constants	O
.	O
You	O
should	O
strictly	O
avoid	O
using	O
enums	O
on	O
Android	O
.	O
"	O
Is	O
this	O
still	O
holds	O
good	O
?	O
(	O
say	O
in	O
Java	O
versions	O
after	O
1	O
.	O
6	O
)	O
One	O
more	O
issue	O
that	O
I	O
observed	O
is	O
to	O
send	O
enums	O
across	O
intents	O
using	O
Bundle	O
I	O
should	O
send	O
them	O
by	O
serializing	O
(	O
i	O
.	O
e	O
putSerializable	O
(	O
args	O
)	O
,	O
that	O
I	O
think	O
an	O
expensive	O
operation	O
compared	O
to	O
primitive	O
putString	O
(	O
args	O
)	O
method	O
,	O
eventhough	O
enums	O
provides	O
it	O
for	O
free	O
)	O
.	O
Can	O
someone	O
please	O
clarify	O
which	O
one	O
is	O
the	O
best	O
way	O
to	O
represent	O
the	O
same	O
in	O
Android	O
?	O
Should	O
I	O
strictly	O
avoid	O
using	O
enums	O
on	O
Android	O
?	O
Question	O
-	O
6608795	O
I	O
wonder	O
what	O
the	O
difference	O
is	O
between	O
Class	B-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
ClassLoader	B-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
edit	O
:	O
I	O
especially	O
want	O
to	O
know	O
if	O
any	O
caching	O
is	O
involved	O
on	O
file	O
/	O
directory	O
level	O
.	O
As	O
in	O
"	O
are	O
directory	O
listings	O
cached	O
in	O
the	O
Class	B-api_mention
version	O
?	O
"	O
AFAIK	O
the	O
following	O
should	O
essentially	O
do	O
the	O
same	O
,	O
but	O
they	O
are	O
not	O
:	O
#	O
pre	O
I	O
discovered	O
this	O
when	O
fiddling	O
with	O
some	O
report	O
generation	O
code	O
that	O
creates	O
a	O
new	O
file	O
in	O
WEB	O
-	O
INF	O
/	O
classes	O
/	O
from	O
an	O
existing	O
file	O
in	O
that	O
directory	O
.	O
When	O
using	O
the	O
method	O
from	O
Class	B-api_mention
,	O
I	O
could	O
find	O
files	O
that	O
were	O
there	O
at	O
deployment	O
using	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
when	O
trying	O
to	O
fetch	O
the	O
newly	O
created	O
file	O
,	O
I	O
recieved	O
a	O
null	O
object	O
.	O
Browsing	O
the	O
directory	O
clearly	O
shows	O
that	O
the	O
new	O
file	O
is	O
there	O
.	O
The	O
filenames	O
were	O
prepended	O
with	O
a	O
forward	O
slash	O
as	O
in	O
"	O
/	O
myFile	O
.	O
txt	O
"	O
.	O
The	O
ClassLoader	B-api_mention
version	O
of	O
getResource	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
the	O
other	O
hand	O
did	O
find	O
the	O
generated	O
file	O
.	O
From	O
this	O
experience	O
it	O
seems	O
that	O
there	O
is	O
some	O
kind	O
of	O
caching	O
of	O
the	O
directory	O
listing	O
going	O
on	O
.	O
Am	O
I	O
right	O
,	O
and	O
if	O
so	O
,	O
where	O
is	O
this	O
documented	O
?	O
From	O
the	O
API	O
docs	O
on	O
Class	B-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
blockquote	O
To	O
me	O
,	O
this	O
reads	O
"	O
Class	B-api_mention
.	I-api_mention
getResource	I-api_mention
is	O
really	O
calling	O
its	O
own	O
classloader	O
'	O
s	O
getResource	B-api_mention
(	I-api_mention
)	I-api_mention
"	O
.	O
Which	O
would	O
be	O
the	O
same	O
as	O
doing	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
it	O
is	O
obviously	O
not	O
.	O
Could	O
someone	O
please	O
provide	O
me	O
with	O
some	O
illumination	O
into	O
this	O
matter	O
?	O
Question	O
-	O
22435833	O
In	O
Java	O
8	O
,	O
there	O
is	O
a	O
new	O
method	O
String	B-api_mention
.	I-api_mention
chars	I-api_mention
(	I-api_mention
)	I-api_mention
which	O
returns	O
a	O
stream	O
of	O
int	O
s	O
(	O
IntStream	B-api_mention
)	O
that	O
represent	O
the	O
character	O
codes	O
.	O
I	O
guess	O
many	O
people	O
would	O
expect	O
a	O
stream	O
of	O
char	O
s	O
here	O
instead	O
.	O
What	O
was	O
the	O
motivation	O
to	O
design	O
the	O
API	O
this	O
way	O
?	O
Question	O
-	O
33358248	O
Currently	O
the	O
BlendModes	O
(	O
Subtract	O
,	O
Exclusion	O
etc	O
)	O
use	O
the	O
LauncherImage	O
as	O
the	O
mask	O
.	O
Can	O
I	O
apply	O
these	O
BlendModes	O
to	O
a	O
ColorMatrix	O
?	O
I	O
'	O
m	O
using	O
the	O
GPUImageLibrary	O
colorMatrix	O
[	O
0	O
.	O
393	O
,	O
0	O
.	O
7689999	O
,	O
0	O
.	O
18899999	O
,	O
0	O
,	O
0	O
,	O
0	O
.	O
349	O
,	O
0	O
.	O
6859999	O
,	O
0	O
.	O
16799999	O
,	O
0	O
,	O
0	O
,	O
0	O
.	O
272	O
,	O
0	O
.	O
5339999	O
,	O
0	O
.	O
13099999	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
1	O
,	O
0	O
]	O
;	O
SubtractBlendFilter	O
.	O
java	O
#	O
pre	O
GPUIMageTwoInputFilter	O
.	O
java	O
#	O
pre	O
My	O
guess	O
it	O
involves	O
changing	O
something	O
with	O
String	B-api_mention
SUBTRACT	O
_	O
BLEND	O
_	O
GRAGMENT	O
_	O
SHADER	O
&	O
String	B-api_mention
VERTEX	O
_	O
SHADER	O
.	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
9991624	O
You	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
catch	O
the	O
NumberFormatException	B-api_mention
if	O
the	O
string	O
is	O
not	O
a	O
valid	O
integer	O
,	O
in	O
the	O
following	O
fashion	O
(	O
as	O
pointed	O
out	O
by	O
all	O
answers	O
)	O
:	O
#	O
pre	O
However	O
,	O
note	O
here	O
that	O
if	O
the	O
evaluated	O
integer	O
overflows	O
,	O
the	O
same	O
exception	O
will	O
be	O
thrown	O
.	O
Your	O
purpose	O
was	O
to	O
find	O
out	O
whether	O
or	O
not	O
,	O
it	O
was	O
a	O
valid	O
integer	O
.	O
So	O
its	O
safer	O
to	O
make	O
your	O
own	O
method	O
to	O
check	O
for	O
validity	O
:	O
#	O
pre	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
13291109	O
It	O
really	O
depends	O
on	O
what	O
you	O
want	O
to	O
do	O
with	O
the	O
returned	O
value	O
:	O
#	O
li	O
If	O
you	O
need	O
to	O
get	O
the	O
exact	O
name	O
used	O
to	O
declare	O
the	O
enum	O
constant	O
,	O
you	O
should	O
use	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
toString	B-api_mention
may	O
have	O
been	O
overriden	O
#	O
li	O
If	O
you	O
want	O
to	O
print	O
the	O
enum	O
constant	O
in	O
a	O
user	O
friendly	O
way	O
,	O
you	O
should	O
use	O
toString	B-api_mention
which	O
may	O
have	O
been	O
overriden	O
(	O
or	O
not	O
!	O
)	O
.	O
When	O
I	O
feel	O
that	O
it	O
might	O
be	O
confusing	O
,	O
I	O
provide	O
a	O
more	O
specific	O
getXXX	O
method	O
,	O
for	O
example	O
:	O
#	O
pre	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
34295445	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
)	I-api_mention
We	O
use	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
extract	O
request	O
parameters	O
(	O
i	O
.	O
e	O
.	O
data	O
sent	O
by	O
posting	O
a	O
html	O
form	O
)	O
.	O
The	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
returns	O
String	B-api_mention
value	O
and	O
the	O
data	O
come	O
from	O
client	O
.	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
)	I-api_mention
We	O
use	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
an	O
object	O
added	O
to	O
the	O
request	O
scope	O
on	O
the	O
server	O
side	O
i	O
.	O
e	O
.	O
using	O
request	O
.	B-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
can	O
add	O
any	O
type	O
of	O
object	O
you	O
like	O
here	O
,	O
Strings	O
,	O
Custom	O
objects	O
,	O
in	O
fact	O
any	O
object	O
.	O
You	O
add	O
the	O
attribute	O
to	O
the	O
request	O
and	O
forward	O
the	O
request	O
to	O
another	O
resource	O
,	O
the	O
client	O
does	O
not	O
know	O
about	O
this	O
.	O
So	O
all	O
the	O
code	O
handling	O
this	O
would	O
typically	O
be	O
in	O
JSP	O
/	O
servlets	O
.	O
You	O
can	O
use	O
request	O
.	B-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
add	O
extra	O
-	O
information	O
and	O
forward	O
/	O
redirect	O
the	O
current	O
request	O
to	O
another	O
resource	O
.	O
For	O
example	O
,	O
consider	O
about	O
first	O
.	O
jsp	O
,	O
#	O
pre	O
and	O
second	O
.	O
jsp	O
:	O
#	O
pre	O
From	O
your	O
browser	O
,	O
run	O
first	O
.	O
jsp	O
?	O
CLIENT	O
=	O
you	O
and	O
the	O
output	O
on	O
your	O
browser	O
is	O
#	O
pre	O
The	O
basic	O
difference	O
between	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
that	O
the	O
first	O
method	O
extracts	O
a	O
(	O
serialized	O
)	O
Java	O
object	O
and	O
the	O
other	O
provides	O
a	O
String	B-api_mention
value	O
.	O
For	O
both	O
cases	O
a	O
name	O
is	O
given	O
so	O
that	O
its	O
value	O
(	O
be	O
it	O
string	O
or	O
a	O
java	O
bean	O
)	O
can	O
be	O
looked	O
up	O
and	O
extracted	O
.	O
Question	O
-	O
11359187	O
,	O
answer	O
-	O
11359320	O
#	O
li	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
logging	I-api_mention
was	O
introduced	O
in	O
Java	O
1	O
.	O
4	O
.	O
There	O
were	O
uses	O
for	O
logging	O
before	O
that	O
,	O
that	O
'	O
s	O
why	O
many	O
other	O
logging	O
APIs	O
exist	O
.	O
Those	O
APIs	O
where	O
used	O
heavily	O
before	O
Java	O
1	O
.	O
4	O
and	O
thus	O
had	O
a	O
great	O
marketshare	O
that	O
didn	O
'	O
t	O
just	O
drop	O
to	O
0	O
when	O
1	O
.	O
4	O
was	O
release	O
.	O
#	O
li	O
JUL	B-api_mention
didn	O
'	O
t	O
start	O
out	O
all	O
that	O
great	O
,	O
many	O
of	O
the	O
things	O
you	O
mentioned	O
where	O
a	O
lot	O
worse	O
in	O
1	O
.	O
4	O
and	O
only	O
got	O
better	O
in	O
1	O
.	O
5	O
(	O
and	O
I	O
guess	O
in	O
6	O
as	O
well	O
,	O
but	O
I	O
'	O
m	O
not	O
too	O
sure	O
)	O
.	O
#	O
li	O
JUL	B-api_mention
isn	O
'	O
t	O
well	O
suited	O
for	O
multiple	O
applications	O
with	O
different	O
configurations	O
in	O
the	O
same	O
JVM	O
(	O
think	O
multiple	O
web	O
applications	O
that	O
should	O
not	O
interact	O
)	O
.	O
Tomcat	O
needs	O
to	O
jump	O
through	O
some	O
hoops	O
to	O
get	O
that	O
working	O
(	O
effectively	O
re	O
-	O
implementing	O
JUL	B-api_mention
if	O
I	O
understood	O
that	O
correctly	O
)	O
.	O
#	O
li	O
You	O
can	O
'	O
t	O
always	O
influence	O
what	O
logging	O
framework	O
your	O
libraries	O
use	O
.	O
Therefore	O
using	O
SLF4J	B-api_mention
(	O
which	O
is	O
actually	O
just	O
a	O
very	O
thin	O
API	O
layer	O
above	O
other	O
libraries	O
)	O
helps	O
keeping	O
a	O
somewhat	O
consistent	O
picture	O
of	O
the	O
entire	O
logging	O
world	O
(	O
so	O
you	O
can	O
decide	O
the	O
underlying	O
logging	O
framework	O
while	O
still	O
having	O
library	O
logging	O
in	O
the	O
same	O
system	O
)	O
.	O
#	O
li	O
Libraries	O
can	O
'	O
t	O
easily	O
change	O
.	O
If	O
a	O
previous	O
version	O
of	O
a	O
library	O
used	O
to	O
use	O
logging	O
-	O
library	O
-	O
X	O
it	O
can	O
'	O
t	O
easily	O
switch	O
to	O
logging	O
-	O
library	O
-	O
Y	O
(	O
for	O
example	O
JUL	B-api_mention
)	O
,	O
even	O
if	O
the	O
latter	O
is	O
clearly	O
superious	O
:	O
any	O
user	O
of	O
that	O
library	O
would	O
need	O
to	O
learn	O
the	O
new	O
logging	O
framework	O
and	O
(	O
at	O
least	O
)	O
reconfigure	O
their	O
logging	O
.	O
That	O
'	O
s	O
a	O
big	O
no	O
-	O
no	O
,	O
especially	O
when	O
it	O
brings	O
no	O
apparent	O
gain	O
to	O
most	O
people	O
.	O
Having	O
said	O
all	O
that	O
I	O
think	O
JUL	B-api_mention
is	O
at	O
least	O
a	O
valid	O
alternative	O
to	O
other	O
logging	O
frameworks	O
these	O
days	O
.	O
Question	O
-	O
28840047	O
,	O
answer	O
-	O
28840048	O
This	O
is	O
of	O
course	O
a	O
"	O
feature	O
"	O
.	O
The	O
ConcurrentHashMap	B-api_mention
.	I-api_mention
computeIfAbsent	I-api_mention
(	I-api_mention
)	I-api_mention
Javadoc	O
reads	O
:	O
#	O
blockquote	O
The	O
"	O
must	O
not	O
"	O
wording	O
is	O
a	O
clear	O
contract	O
,	O
which	O
my	O
algorithm	O
violated	O
,	O
although	O
not	O
for	O
the	O
same	O
concurrency	O
reasons	O
.	O
What	O
'	O
s	O
still	O
interesting	O
is	O
that	O
there	O
is	O
no	O
ConcurrentModificationException	O
.	O
Instead	O
,	O
the	O
program	O
just	O
never	O
halts	O
-	O
which	O
still	O
is	O
a	O
rather	O
dangerous	O
bug	O
in	O
my	O
opinion	O
(	O
i	O
.	O
e	O
.	O
infinite	O
loops	O
.	O
or	O
:	O
anything	O
that	O
can	O
possibly	O
go	O
wrong	O
,	O
does	O
)	O
.	O
The	O
simplest	O
use	O
-	O
site	O
solution	O
for	O
this	O
concrete	O
problem	O
would	O
be	O
to	O
not	O
use	O
a	O
ConcurrentHashMap	B-api_mention
,	O
but	O
just	O
a	O
HashMap	B-api_mention
instead	O
:	O
static	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
cache	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Now	O
,	O
everything	O
works	O
fine	O
.	O
Note	O
:	O
The	O
HashMap	B-api_mention
.	I-api_mention
computeIfAbsent	I-api_mention
(	I-api_mention
)	I-api_mention
or	O
Map	B-api_mention
.	I-api_mention
computeIfAbsent	I-api_mention
(	I-api_mention
)	I-api_mention
Javadoc	O
don	O
'	O
t	O
forbid	O
such	O
recursive	O
computation	O
,	O
which	O
is	O
of	O
course	O
ridiculous	O
as	O
the	O
type	O
of	O
the	O
cache	O
is	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
not	O
ConcurrentHashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
It	O
is	O
very	O
dangerous	O
for	O
subtypes	O
to	O
drastically	O
re	O
-	O
define	O
super	O
type	O
contracts	O
(	O
Set	B-api_mention
vs	O
.	O
SortedSet	B-api_mention
is	O
greeting	O
)	O
.	O
It	O
should	O
thus	O
be	O
forbidden	O
also	O
in	O
super	O
types	O
,	O
to	O
perform	O
such	O
recursion	O
.	O
Question	O
-	O
25606833	O
,	O
answer	O
-	O
25757572	O
There	O
are	O
several	O
issues	O
here	O
.	O
#	O
li	O
Any	O
solution	O
based	O
on	O
reading	O
lines	O
is	O
going	O
to	O
process	O
each	O
character	O
twice	O
.	O
Compilers	O
for	O
example	O
don	O
'	O
t	O
do	O
this	O
,	O
they	O
read	O
one	O
character	O
at	O
a	O
time	O
and	O
despatch	O
on	O
it	O
directly	O
.	O
#	O
li	O
Any	O
solution	O
based	O
on	O
readLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
going	O
to	O
create	O
Strings	B-api_mention
.	O
#	O
li	O
You	O
are	O
using	O
different	O
buffer	O
sizes	O
.	O
#	O
li	O
You	O
are	O
using	O
different	O
I	O
/	O
O	O
technologies	O
.	O
#	O
li	O
In	O
some	O
cases	O
you	O
are	O
using	O
character	O
conversion	O
,	O
while	O
in	O
others	O
you	O
aren	O
'	O
t	O
.	O
#	O
li	O
You	O
'	O
re	O
over	O
-	O
analyzing	O
the	O
file	O
.	O
You	O
don	O
'	O
t	O
really	O
care	O
where	O
the	O
white	O
space	O
is	O
,	O
or	O
how	O
much	O
of	O
it	O
there	O
is	O
,	O
as	O
long	O
as	O
it	O
separates	O
the	O
numbers	O
from	O
each	O
other	O
.	O
My	O
solution	O
:	O
#	O
pre	O
Question	O
-	O
7520432	O
I	O
wanted	O
to	O
clarify	O
if	O
I	O
understand	O
this	O
correctly	O
:	O
#	O
li	O
=	O
=	O
-	O
>	O
is	O
a	O
reference	O
comparison	O
,	O
i	O
.	O
e	O
.	O
both	O
objects	O
point	O
to	O
the	O
same	O
memory	O
location	O
#	O
li	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
>	O
evaluates	O
to	O
the	O
comparison	O
of	O
values	O
in	O
the	O
objects	O
Am	O
I	O
correct	O
in	O
my	O
understanding	O
?	O
Question	O
-	O
22435833	O
,	O
answer	O
-	O
22497858	O
The	O
answer	O
from	O
skiwi	O
covered	O
many	O
of	O
the	O
major	O
points	O
already	O
.	O
I	O
'	O
ll	O
fill	O
in	O
a	O
bit	O
more	O
background	O
.	O
The	O
design	O
of	O
any	O
API	O
is	O
a	O
series	O
of	O
tradeoffs	O
.	O
In	O
Java	O
,	O
one	O
of	O
the	O
difficult	O
issues	O
is	O
dealing	O
with	O
design	O
decisions	O
that	O
were	O
made	O
long	O
ago	O
.	O
Primitives	O
have	O
been	O
in	O
Java	O
since	O
1	O
.	O
0	O
.	O
They	O
make	O
Java	O
an	O
"	O
impure	O
"	O
object	O
-	O
oriented	O
language	O
,	O
since	O
the	O
primitives	O
are	O
not	O
objects	O
.	O
The	O
addition	O
of	O
primitives	O
was	O
,	O
I	O
believe	O
,	O
a	O
pragmatic	O
decision	O
to	O
improve	O
performance	O
at	O
the	O
expense	O
of	O
object	O
-	O
oriented	O
purity	O
.	O
This	O
is	O
a	O
tradeoff	O
we	O
'	O
re	O
still	O
living	O
with	O
today	O
,	O
nearly	O
20	O
years	O
later	O
.	O
The	O
autoboxing	O
feature	O
added	O
in	O
Java	O
5	O
mostly	O
eliminated	O
the	O
need	O
to	O
clutter	O
source	O
code	O
with	O
boxing	O
and	O
unboxing	O
method	O
calls	O
,	O
but	O
the	O
overhead	O
is	O
still	O
there	O
.	O
In	O
many	O
cases	O
it	O
'	O
s	O
not	O
noticeable	O
.	O
However	O
,	O
if	O
you	O
were	O
to	O
perform	O
boxing	O
or	O
unboxing	O
within	O
an	O
inner	O
loop	O
,	O
you	O
'	O
d	O
see	O
that	O
it	O
can	O
impose	O
significant	O
CPU	O
and	O
garbage	O
collection	O
overhead	O
.	O
When	O
designing	O
the	O
Streams	B-api_mention
API	O
,	O
it	O
was	O
clear	O
that	O
we	O
had	O
to	O
support	O
primitives	O
.	O
The	O
boxing	O
/	O
unboxing	O
overhead	O
would	O
kill	O
any	O
performance	O
benefit	O
from	O
parallelism	O
.	O
We	O
didn	O
'	O
t	O
want	O
to	O
support	O
all	O
of	O
the	O
primitives	O
,	O
though	O
,	O
since	O
that	O
would	O
have	O
added	O
a	O
huge	O
amount	O
of	O
clutter	O
to	O
the	O
API	O
.	O
(	O
Can	O
you	O
really	O
see	O
a	O
use	O
for	O
a	O
ShortStream	B-api_mention
?	O
)	O
"	O
All	O
"	O
or	O
"	O
none	O
"	O
are	O
comfortable	O
places	O
for	O
a	O
design	O
to	O
be	O
,	O
yet	O
neither	O
was	O
acceptable	O
.	O
So	O
we	O
had	O
to	O
find	O
a	O
reasonable	O
value	O
of	O
"	O
some	O
"	O
.	O
We	O
ended	O
up	O
with	O
primitive	O
specializations	O
for	O
int	O
,	O
long	O
,	O
and	O
double	O
.	O
(	O
Personally	O
I	O
would	O
have	O
left	O
out	O
int	O
but	O
that	O
'	O
s	O
just	O
me	O
.	O
)	O
For	O
CharSequence	B-api_mention
.	I-api_mention
chars	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
we	O
considered	O
returning	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	O
an	O
early	O
prototype	O
might	O
have	O
implemented	O
this	O
)	O
but	O
it	O
was	O
rejected	O
because	O
of	O
boxing	O
overhead	O
.	O
Considering	O
that	O
a	O
String	B-api_mention
has	O
char	O
values	O
as	O
primitives	O
,	O
it	O
would	O
seem	O
to	O
be	O
a	O
mistake	O
to	O
impose	O
boxing	O
unconditionally	O
when	O
the	O
caller	O
would	O
probably	O
just	O
do	O
a	O
bit	O
of	O
processing	O
on	O
the	O
value	O
and	O
unbox	O
it	O
right	O
back	O
into	O
a	O
string	O
.	O
We	O
also	O
considered	O
a	O
CharStream	B-api_mention
primitive	O
specialization	O
,	O
but	O
its	O
use	O
would	O
seem	O
to	O
be	O
quite	O
narrow	O
compared	O
to	O
the	O
amount	O
of	O
bulk	O
it	O
would	O
add	O
to	O
the	O
API	O
.	O
It	O
didn	O
'	O
t	O
seem	O
worthwhile	O
to	O
add	O
it	O
.	O
The	O
penalty	O
this	O
imposes	O
on	O
callers	O
is	O
that	O
they	O
have	O
to	O
know	O
that	O
the	O
IntStream	B-api_mention
contains	O
char	O
values	O
represented	O
as	O
ints	O
and	O
that	O
casting	O
must	O
be	O
done	O
at	O
the	O
proper	O
place	O
.	O
This	O
is	O
doubly	O
confusing	O
because	O
there	O
are	O
overloaded	O
API	O
calls	O
like	O
PrintStream	B-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
PrintStream	B-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
that	O
differ	O
markedly	O
in	O
their	O
behavior	O
.	O
An	O
additional	O
point	O
of	O
confusion	O
possibly	O
arises	O
because	O
the	O
codePoints	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
also	O
returns	O
an	O
IntStream	B-api_mention
but	O
the	O
values	O
it	O
contains	O
are	O
quite	O
different	O
.	O
So	O
,	O
this	O
boils	O
down	O
to	O
choosing	O
pragmatically	O
among	O
several	O
alternatives	O
:	O
#	O
li	O
We	O
could	O
provide	O
no	O
primitive	O
specializations	O
,	O
resulting	O
in	O
a	O
simple	O
,	O
elegant	O
,	O
consistent	O
API	O
,	O
but	O
which	O
imposes	O
a	O
high	O
performance	O
and	O
GC	O
overhead	O
;	O
#	O
li	O
we	O
could	O
provide	O
a	O
complete	O
set	O
of	O
primitive	O
specializations	O
,	O
at	O
the	O
cost	O
of	O
cluttering	O
up	O
the	O
API	O
and	O
imposing	O
a	O
maintenance	O
burden	O
on	O
JDK	O
developers	O
;	O
or	O
#	O
li	O
we	O
could	O
provide	O
a	O
subset	O
of	O
primitive	O
specializations	O
,	O
giving	O
a	O
moderately	O
sized	O
,	O
high	O
performing	O
API	O
that	O
imposes	O
a	O
relatively	O
small	O
burden	O
on	O
callers	O
in	O
a	O
fairly	O
narrow	O
range	O
of	O
use	O
cases	O
(	O
char	O
processing	O
)	O
.	O
We	O
chose	O
the	O
last	O
one	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331323	O
Another	O
way	O
of	O
doing	O
that	O
is	O
:	O
String	B-api_mention
date	O
=	O
dateAndTime	O
.	B-api_mention
substring	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
I	O
'	O
m	O
not	O
exactly	O
certain	O
,	O
but	O
I	O
think	O
this	O
might	O
be	O
faster	O
/	O
use	O
less	O
memory	O
than	O
using	O
the	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
14014086	O
,	O
answer	O
-	O
20784007	O
Ken	O
'	O
s	O
answer	O
is	O
basically	O
right	O
but	O
I	O
'	O
d	O
like	O
to	O
chime	O
in	O
on	O
the	O
"	O
why	O
would	O
you	O
want	O
to	O
use	O
one	O
over	O
the	O
other	O
?	O
"	O
part	O
of	O
your	O
question	O
.	O
Basics	O
The	O
base	O
interface	O
you	O
choose	O
for	O
your	O
repository	O
has	O
two	O
main	O
purposes	O
.	O
First	O
,	O
you	O
allow	O
the	O
Spring	O
Data	O
repository	O
infrastructure	O
to	O
find	O
your	O
interface	O
and	O
trigger	O
the	O
proxy	O
creation	O
so	O
that	O
you	O
inject	O
instances	O
of	O
the	O
interface	O
into	O
clients	O
.	O
The	O
second	O
purpose	O
is	O
to	O
pull	O
in	O
as	O
much	O
functionality	O
as	O
needed	O
into	O
the	O
interface	O
without	O
having	O
to	O
declare	O
extra	O
methods	O
.	O
The	O
common	O
interfaces	O
The	O
Spring	O
Data	O
core	O
library	O
ships	O
with	O
two	O
base	O
interfaces	O
that	O
expose	O
a	O
dedicated	O
set	O
of	O
functionalities	O
:	O
#	O
li	O
CrudRepository	B-api_mention
-	O
CRUD	O
methods	O
#	O
li	O
PagingAndSortingRepository	B-api_mention
-	O
methods	O
for	O
pagination	O
and	O
sorting	O
(	O
extends	O
CrudRepository	B-api_mention
)	O
Store	O
-	O
specific	O
interfaces	O
The	O
individual	O
store	O
modules	O
(	O
e	O
.	O
g	O
.	O
for	O
JPA	O
or	O
MongoDB	O
)	O
expose	O
store	O
-	O
specific	O
extensions	O
of	O
these	O
base	O
interfaces	O
to	O
allow	O
access	O
to	O
store	O
-	O
specific	O
functionality	O
like	O
flushing	O
or	O
dedicated	O
batching	O
that	O
take	O
some	O
store	O
specifics	O
into	O
account	O
.	O
An	O
example	O
for	O
this	O
is	O
deleteInBatch	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
JpaRepository	B-api_mention
which	O
is	O
different	O
from	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
it	O
uses	O
a	O
query	O
to	O
delete	O
the	O
given	O
entities	O
which	O
is	O
more	O
performant	O
but	O
comes	O
with	O
the	O
side	O
effect	O
of	O
not	O
triggering	O
the	O
JPA	O
-	O
defined	O
cascades	O
(	O
as	O
the	O
spec	O
defines	O
it	O
)	O
.	O
We	O
generally	O
recommend	O
not	O
to	O
use	O
these	O
base	O
interfaces	O
as	O
they	O
expose	O
the	O
underlying	O
persistence	O
technology	O
to	O
the	O
clients	O
and	O
thus	O
tighten	O
the	O
coupling	O
between	O
them	O
and	O
the	O
repository	O
.	O
Plus	O
,	O
you	O
get	O
a	O
bit	O
away	O
from	O
the	O
original	O
definition	O
of	O
a	O
repository	O
which	O
is	O
basically	O
"	O
a	O
collection	O
of	O
entities	O
"	O
.	O
So	O
if	O
you	O
can	O
,	O
stay	O
with	O
PagingAndSortingRepository	B-api_mention
.	O
Custom	O
repository	O
base	O
interfaces	O
The	O
downside	O
of	O
directly	O
depending	O
on	O
one	O
of	O
the	O
provided	O
base	O
interfaces	O
is	O
two	O
-	O
fold	O
.	O
Both	O
of	O
them	O
might	O
be	O
considered	O
as	O
theoretical	O
but	O
I	O
think	O
they	O
'	O
re	O
important	O
to	O
be	O
aware	O
of	O
:	O
#	O
li	O
Depending	O
on	O
a	O
a	O
Spring	O
Data	O
repository	O
interface	O
couples	O
your	O
repository	O
interface	O
to	O
the	O
library	O
.	O
I	O
don	O
'	O
t	O
think	O
this	O
is	O
a	O
particular	O
issue	O
as	O
you	O
'	O
ll	O
probably	O
use	O
abstractions	O
like	O
Page	B-api_mention
or	O
Pageable	B-api_mention
in	O
your	O
code	O
anyway	O
.	O
Spring	O
Data	O
is	O
not	O
any	O
different	O
from	O
any	O
other	O
general	O
purpose	O
library	O
like	O
commons	O
-	O
lang	O
or	O
Guava	O
.	O
As	O
long	O
as	O
it	O
provides	O
reasonable	O
benefit	O
,	O
it	O
'	O
s	O
just	O
fine	O
.	O
#	O
li	O
By	O
extending	O
e	O
.	O
g	O
.	O
CrudRepository	B-api_mention
,	O
you	O
expose	O
a	O
complete	O
set	O
of	O
persistence	O
method	O
at	O
once	O
.	O
This	O
is	O
probably	O
fine	O
in	O
most	O
circumstances	O
as	O
well	O
but	O
you	O
might	O
run	O
into	O
situations	O
where	O
you	O
'	O
d	O
like	O
to	O
gain	O
more	O
fine	O
-	O
grained	O
control	O
over	O
the	O
methods	O
expose	O
,	O
e	O
.	O
g	O
.	O
to	O
create	O
a	O
ReadOnlyRepository	B-api_mention
that	O
doesn	O
'	O
t	O
include	O
the	O
save	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
of	O
CrudRepository	B-api_mention
.	O
The	O
solution	O
to	O
both	O
of	O
these	O
downsides	O
is	O
to	O
craft	O
your	O
own	O
base	O
repository	O
interface	O
or	O
even	O
a	O
set	O
of	O
them	O
.	O
In	O
a	O
lot	O
of	O
applications	O
we	O
'	O
ve	O
seen	O
something	O
like	O
this	O
:	O
#	O
pre	O
The	O
first	O
repository	O
interface	O
is	O
some	O
general	O
purpose	O
base	O
interface	O
that	O
actually	O
only	O
fixes	O
point	O
1	O
but	O
also	O
ties	O
the	O
ID	O
type	O
to	O
be	O
Long	O
for	O
consistency	O
.	O
The	O
second	O
interface	O
usually	O
has	O
all	O
the	O
find	O
…	O
(	O
…	O
)	O
methods	O
copied	O
from	O
CrudRepository	B-api_mention
and	O
PagingAndSortingRepository	B-api_mention
but	O
does	O
not	O
expose	O
the	O
manipulating	O
ones	O
.	O
Read	O
more	O
on	O
that	O
approach	O
in	O
the	O
reference	O
documentation	O
.	O
Summary	O
-	O
tl	O
;	O
dr	O
The	O
repository	O
abstraction	O
allows	O
you	O
to	O
pickt	O
the	O
base	O
repository	O
totally	O
driven	O
by	O
you	O
architectural	O
and	O
functional	O
needs	O
.	O
Use	O
the	O
ones	O
provided	O
out	O
of	O
the	O
box	O
if	O
they	O
suit	O
,	O
craft	O
your	O
own	O
repository	O
base	O
interfaces	O
if	O
necessary	O
.	O
Stay	O
away	O
from	O
the	O
store	O
specific	O
repository	O
interfaces	O
unless	O
unavoidable	O
.	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32357149	O
Disclaimer	O
:	O
I	O
am	O
not	O
a	O
JDK	O
author	O
.	O
I	O
agree	O
that	O
it	O
'	O
s	O
correct	O
to	O
write	O
your	O
own	O
code	O
to	O
interfaces	O
,	O
but	O
if	O
you	O
'	O
re	O
going	O
return	O
a	O
mutable	O
collection	O
to	O
a	O
third	O
party	O
,	O
it	O
'	O
s	O
important	O
to	O
let	O
the	O
third	O
party	O
know	O
what	O
sort	O
of	O
List	B-api_mention
they	O
'	O
re	O
getting	O
back	O
.	O
LinkedList	B-api_mention
and	O
ArrayList	B-api_mention
are	O
very	O
different	O
,	O
performance	O
wise	O
,	O
for	O
various	O
operations	O
.	O
For	O
example	O
,	O
removing	O
the	O
first	O
element	O
of	O
an	O
ArrayList	B-api_mention
is	O
O	O
(	O
args	O
)	O
,	O
but	O
removing	O
the	O
first	O
element	O
of	O
a	O
LinkedList	B-api_mention
is	O
O	O
(	O
args	O
)	O
.	O
By	O
fully	O
specifying	O
the	O
return	O
type	O
,	O
the	O
JDK	O
authors	O
are	O
communicating	O
extra	O
information	O
,	O
in	O
unambiguous	O
code	O
,	O
about	O
what	O
sort	O
of	O
object	O
they	O
'	O
re	O
giving	O
back	O
to	O
you	O
,	O
so	O
you	O
can	O
write	O
your	O
code	O
to	O
use	O
this	O
method	O
properly	O
.	O
If	O
you	O
really	O
need	O
a	O
LinkedList	B-api_mention
,	O
you	O
know	O
that	O
you	O
have	O
to	O
specify	O
one	O
here	O
.	O
Finally	O
,	O
the	O
main	O
reason	O
to	O
code	O
to	O
an	O
interface	O
over	O
an	O
implementation	O
is	O
if	O
you	O
think	O
that	O
the	O
implementation	O
will	O
change	O
.	O
The	O
JDK	O
authors	O
probably	O
figure	O
they	O
are	O
never	O
going	O
to	O
change	O
this	O
method	O
;	O
it	O
'	O
s	O
never	O
going	O
to	O
return	O
a	O
LinkedList	B-api_mention
or	O
a	O
Collections	B-api_mention
.	I-api_mention
UnmodifiableList	I-api_mention
.	O
However	O
,	O
in	O
most	O
cases	O
,	O
you	O
would	O
probably	O
still	O
do	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28818627	O
Perhaps	O
this	O
is	O
what	O
you	O
'	O
re	O
after	O
:	O
Get	O
value	O
from	O
one	O
Optional	B-api_mention
or	O
another	O
Otherwise	O
,	O
you	O
may	O
want	O
to	O
have	O
a	O
look	O
at	O
Optional	B-api_mention
.	I-api_mention
orElseGet	I-api_mention
.	O
Here	O
'	O
s	O
an	O
example	O
of	O
what	O
I	O
think	O
that	O
you	O
'	O
re	O
after	O
:	O
result	O
=	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561853	O
Let	O
me	O
explain	O
what	O
is	O
happening	O
here	O
,	O
because	O
it	O
isn	O
'	O
t	O
obvious	O
!	O
First	O
,	O
Stream	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
)	I-api_mention
accepts	O
an	O
instance	O
of	O
Comparator	B-api_mention
so	O
that	O
items	O
in	O
the	O
stream	O
can	O
be	O
compared	O
against	O
each	O
other	O
to	O
find	O
the	O
minimum	O
or	O
maximum	O
,	O
in	O
some	O
optimal	O
order	O
that	O
you	O
don	O
'	O
t	O
need	O
to	O
worry	O
too	O
much	O
about	O
.	O
So	O
the	O
question	O
is	O
,	O
of	O
course	O
,	O
why	O
is	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
max	I-api_mention
accepted	O
?	O
After	O
all	O
it	O
'	O
s	O
not	O
a	O
comparator	O
!	O
The	O
answer	O
is	O
in	O
the	O
way	O
that	O
the	O
new	O
lambda	O
functionality	O
works	O
in	O
Java	O
8	O
.	O
It	O
relies	O
on	O
a	O
concept	O
which	O
is	O
informally	O
known	O
as	O
"	O
single	O
abstract	O
method	O
"	O
interfaces	O
,	O
or	O
"	O
SAM	O
"	O
interfaces	O
.	O
The	O
idea	O
is	O
that	O
any	O
interface	O
with	O
one	O
abstract	O
method	O
can	O
be	O
automatically	O
implemented	O
by	O
any	O
lambda	O
-	O
or	O
method	O
reference	O
-	O
whose	O
method	O
signature	O
is	O
a	O
match	O
for	O
the	O
one	O
method	O
on	O
the	O
interface	O
.	O
So	O
examining	O
the	O
Comparator	B-api_mention
interface	O
(	O
simple	O
version	O
)	O
:	O
#	O
pre	O
If	O
a	O
method	O
is	O
looking	O
for	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
then	O
it	O
'	O
s	O
essentially	O
looking	O
for	O
this	O
signature	O
:	O
int	O
xxx	O
(	O
args	O
)	O
;	O
I	O
use	O
"	O
xxx	O
"	O
because	O
the	O
method	O
name	O
is	O
not	O
used	O
for	O
matching	O
purposes	O
.	O
Therefore	O
,	O
both	O
Integer	B-api_mention
.	I-api_mention
min	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Integer	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
close	O
enough	O
that	O
autoboxing	O
will	O
allow	O
this	O
to	O
appear	O
as	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
in	O
a	O
method	O
context	O
.	O
Question	O
-	O
22725537	O
,	O
answer	O
-	O
36334855	O
As	O
my	O
previous	O
answer	O
appeared	O
not	O
to	O
be	O
very	O
popular	O
,	O
I	O
will	O
give	O
this	O
another	O
go	O
.	O
A	O
short	O
answer	O
:	O
You	O
are	O
mostly	O
on	O
a	O
right	O
track	O
.	O
The	O
shortest	O
code	O
to	O
get	O
to	O
your	O
desired	O
output	O
I	O
could	O
come	O
up	O
with	O
is	O
this	O
:	O
things	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
will	O
fit	O
all	O
your	O
requirements	O
:	O
#	O
li	O
It	O
will	O
find	O
first	O
response	O
that	O
resolves	O
to	O
a	O
nonempty	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
#	O
li	O
It	O
calls	O
this	B-api_mention
:	I-api_mention
:	I-api_mention
resolve	I-api_mention
lazily	O
as	O
needed	O
#	O
li	O
this	B-api_mention
:	I-api_mention
:	I-api_mention
resolve	I-api_mention
will	O
not	O
be	O
called	O
after	O
first	O
non	O
-	O
empty	O
result	O
#	O
li	O
It	O
will	O
return	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Longer	O
answer	O
The	O
only	O
modification	O
compared	O
to	O
OP	O
initial	O
version	O
was	O
that	O
I	O
removed	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
call	O
to	O
.	B-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
added	O
.	B-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
the	O
last	O
call	O
in	O
the	O
chain	O
.	O
This	O
has	O
a	O
nice	O
effect	O
of	O
getting	O
rid	O
of	O
the	O
double	O
-	O
Optional	O
,	O
whenever	O
stream	O
finds	O
an	O
actual	O
result	O
.	O
You	O
can	O
'	O
t	O
really	O
go	O
any	O
shorter	O
than	O
this	O
in	O
Java	O
.	O
The	O
alternative	O
snippet	O
of	O
code	O
using	O
the	O
more	O
conventional	O
for	O
loop	O
technique	O
is	O
going	O
to	O
be	O
about	O
same	O
number	O
of	O
lines	O
of	O
code	O
and	O
have	O
more	O
or	O
less	O
same	O
order	O
and	O
number	O
of	O
operations	O
you	O
need	O
to	O
perform	O
:	O
#	O
li	O
Calling	O
this	O
.	B-api_mention
resolve	I-api_mention
,	O
#	O
li	O
filtering	O
based	O
on	O
Optional	B-api_mention
.	I-api_mention
isPresent	I-api_mention
#	O
li	O
returning	O
the	O
result	O
and	O
#	O
li	O
some	O
way	O
of	O
dealing	O
with	O
negative	O
result	O
(	O
when	O
nothing	O
was	O
found	O
)	O
Just	O
to	O
prove	O
that	O
my	O
solution	O
works	O
as	O
advertised	O
,	O
I	O
wrote	O
a	O
small	O
test	O
program	O
:	O
#	O
pre	O
(	O
It	O
does	O
have	O
few	O
extra	O
lines	O
for	O
debugging	O
and	O
verifying	O
that	O
only	O
as	O
many	O
calls	O
to	O
resolve	O
as	O
needed	O
.	O
.	O
.	O
)	O
Executing	O
this	O
on	O
a	O
command	O
line	O
,	O
I	O
got	O
the	O
following	O
results	O
:	O
#	O
pre	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16637740	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
be	O
implemented	O
to	O
be	O
faster	O
than	O
for	O
-	O
each	O
loop	O
,	O
because	O
the	O
iterable	O
knows	O
the	O
best	O
way	O
to	O
iterate	O
its	O
elements	O
,	O
as	O
opposed	O
to	O
the	O
standard	O
iterator	O
way	O
.	O
So	O
the	O
difference	O
is	O
loop	O
internally	O
or	O
loop	O
externally	O
.	O
For	O
example	O
ArrayList	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
be	O
simply	O
implemented	O
as	O
#	O
pre	O
as	O
opposed	O
to	O
the	O
for	O
-	O
each	O
loop	O
which	O
requires	O
a	O
lot	O
of	O
scaffolding	O
#	O
pre	O
However	O
,	O
we	O
also	O
need	O
to	O
account	O
for	O
two	O
overhead	O
costs	O
by	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
one	O
is	O
making	O
the	O
lambda	O
object	O
,	O
the	O
other	O
is	O
invoking	O
the	O
lambda	O
method	O
.	O
They	O
are	O
probably	O
not	O
significant	O
.	O
see	O
also	O
#	O
a	O
for	O
comparing	O
internal	O
/	O
external	O
iterations	O
for	O
different	O
use	O
cases	O
.	O
Question	O
-	O
31445024	O
I	O
'	O
m	O
trying	O
to	O
determine	O
whether	O
the	O
following	O
statements	O
are	O
guaranteed	O
to	O
be	O
true	O
:	O
#	O
pre	O
I	O
'	O
ve	O
always	O
assumed	O
that	O
autoboxing	O
was	O
equivalent	O
to	O
calling	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
the	O
corresponding	O
type	O
.	O
Every	O
discussion	O
that	O
I	O
'	O
ve	O
seen	O
on	O
the	O
topic	O
seems	O
to	O
support	O
my	O
assumption	O
.	O
But	O
all	O
I	O
could	O
find	O
in	O
the	O
JLS	O
was	O
the	O
following	O
(	O
§	O
5	O
.	O
1	O
.	O
7	O
)	O
:	O
#	O
blockquote	O
That	O
describes	O
behavior	O
identical	O
to	O
that	O
of	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
there	O
doesn	O
'	O
t	O
seem	O
to	O
be	O
any	O
guarantee	O
that	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
actually	O
invoked	O
,	O
meaning	O
there	O
could	O
theoretically	O
be	O
an	O
implementation	O
that	O
keeps	O
a	O
separate	O
,	O
dedicated	O
cache	O
for	O
autoboxed	O
values	O
.	O
In	O
such	O
a	O
case	O
,	O
there	O
might	O
not	O
be	O
identity	O
equality	O
between	O
cached	O
autoboxed	O
values	O
and	O
regular	O
cached	O
boxed	O
values	O
.	O
Oracle	O
'	O
s	O
autoboxing	O
tutorial	O
states	O
matter	O
-	O
of	O
-	O
factly	O
that	O
li	O
.	O
add	O
(	O
args	O
)	O
is	O
compiled	O
to	O
li	O
.	O
add	O
(	O
args	O
)	O
,	O
where	O
i	O
is	O
an	O
int	O
.	O
But	O
I	O
don	O
'	O
t	O
know	O
whether	O
the	O
tutorial	O
should	O
be	O
considered	O
an	O
authoritative	O
source	O
.	O
Question	O
-	O
22725537	O
,	O
answer	O
-	O
27215810	O
A	O
slightly	O
shorter	O
version	O
using	O
reduce	B-api_mention
:	O
things	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
could	O
also	O
move	O
the	O
reduce	B-api_mention
function	O
to	O
a	O
static	O
utility	O
method	O
and	O
then	O
it	O
becomes	O
:	O
.	B-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
8881291	O
In	O
Swing	O
,	O
the	O
password	O
field	O
has	O
a	O
getPassword	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
returns	O
char	O
[	O
]	O
)	O
method	O
instead	O
of	O
the	O
usual	O
getText	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
returns	O
String	B-api_mention
)	O
method	O
.	O
Similarly	O
,	O
I	O
have	O
come	O
across	O
a	O
suggestion	O
not	O
to	O
use	O
String	B-api_mention
to	O
handle	O
passwords	O
.	O
Why	O
does	O
String	B-api_mention
pose	O
a	O
threat	O
to	O
security	O
when	O
it	O
comes	O
to	O
passwords	O
?	O
It	O
feels	O
inconvenient	O
to	O
use	O
char	O
[	O
]	O
.	O
Question	O
-	O
6652687	O
#	O
blockquote	O
Is	O
there	O
a	O
convenience	O
method	O
to	O
strip	O
any	O
leading	O
or	O
trailing	O
spaces	O
from	O
a	O
Java	O
String	B-api_mention
?	O
Something	O
like	O
:	O
#	O
pre	O
Result	O
:	O
no	O
spaces	O
:	O
keep	O
this	O
myString	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
replace	O
the	O
space	O
between	O
keep	O
and	O
this	O
.	O
Thanks	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032180	O
The	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
removes	O
all	O
the	O
elements	O
of	O
a	O
single	O
ArrayList	B-api_mention
.	O
It	O
'	O
s	O
a	O
fast	O
operation	O
,	O
as	O
it	O
just	O
sets	O
some	O
array	O
elements	O
to	O
null	O
.	O
The	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
is	O
inherited	O
from	O
AbstractCollection	B-api_mention
,	O
removes	O
all	O
the	O
elements	O
that	O
are	O
in	O
the	O
argument	O
collection	O
from	O
the	O
collection	O
you	O
call	O
the	O
method	O
on	O
.	O
It	O
'	O
s	O
a	O
relatively	O
slow	O
operation	O
,	O
as	O
it	O
has	O
to	O
search	O
through	O
one	O
of	O
the	O
collections	O
involved	O
.	O
Question	O
-	O
6252678	O
,	O
answer	O
-	O
6252802	O
You	O
need	O
a	O
DateTimeFormatter	B-api_mention
appropriate	O
to	O
the	O
format	O
you	O
'	O
re	O
using	O
.	O
Take	O
a	O
look	O
at	O
the	O
docs	O
for	O
instructions	O
on	O
how	O
to	O
build	O
one	O
.	O
Off	O
the	O
cuff	O
,	O
I	O
think	O
you	O
need	O
format	O
=	O
DateTimeFormat	B-api_mention
.	I-api_mention
forPattern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
22725537	O
The	O
new	O
Java	O
8	O
stream	O
framework	O
and	O
friends	O
make	O
for	O
some	O
very	O
concise	O
java	O
code	O
,	O
but	O
I	O
have	O
come	O
across	O
a	O
seemingly	O
-	O
simple	O
situation	O
that	O
is	O
tricky	O
to	O
do	O
concisely	O
.	O
Consider	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
things	O
and	O
method	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
resolve	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
want	O
to	O
map	O
the	O
Thing	O
s	O
to	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
s	O
and	O
get	O
the	O
first	O
Other	O
.	O
The	O
obvious	O
solution	O
would	O
be	O
to	O
use	O
things	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
flatMap	B-api_mention
requires	O
that	O
you	O
return	O
a	O
stream	O
,	O
and	O
Optional	B-api_mention
doesn	O
'	O
t	O
have	O
a	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
or	O
is	O
it	O
a	O
Collection	B-api_mention
or	O
provide	O
a	O
method	O
to	O
convert	O
it	O
to	O
or	O
view	O
it	O
as	O
a	O
Collection	B-api_mention
)	O
.	O
The	O
best	O
I	O
can	O
come	O
up	O
with	O
is	O
this	O
:	O
things	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
that	O
seems	O
awfully	O
long	O
-	O
winded	O
for	O
what	O
seems	O
like	O
a	O
very	O
common	O
case	O
.	O
Anyone	O
have	O
a	O
better	O
idea	O
?	O
Question	O
-	O
14602062	O
,	O
answer	O
-	O
14602092	O
From	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
)	I-api_mention
API	O
Doc	O
:	O
#	O
blockquote	O
Overloaded	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
regex	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
is	O
more	O
appropriate	O
for	O
your	O
case	O
.	O
Question	O
-	O
5038204	O
,	O
answer	O
-	O
5039178	O
The	O
commons	O
/	O
lang	O
builders	O
are	O
great	O
and	O
I	O
have	O
been	O
using	O
them	O
for	O
years	O
without	O
noticeable	O
performance	O
overhead	O
(	O
with	O
and	O
without	O
hibernate	O
)	O
.	O
But	O
as	O
Alain	O
writes	O
,	O
the	O
Guava	O
way	O
is	O
even	O
nicer	O
:	O
Here	O
'	O
s	O
a	O
sample	O
Bean	O
:	O
#	O
pre	O
Here	O
'	O
s	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
)	I-api_mention
implemented	O
with	O
Commons	O
/	O
Lang	O
:	O
#	O
pre	O
and	O
here	O
with	O
Guava	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
the	O
Guava	O
version	O
is	O
shorter	O
and	O
avoids	O
superfluous	O
helper	O
objects	O
.	O
In	O
case	O
of	O
equals	O
,	O
it	O
even	O
allows	O
for	O
short	O
-	O
circuiting	O
the	O
evaluation	O
if	O
an	O
earlier	O
Object	B-api_mention
.	I-api_mention
equal	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
returns	O
false	O
(	O
to	O
be	O
fair	O
:	O
commons	O
/	O
lang	O
has	O
an	O
ObjectUtils	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
with	O
identical	O
semantics	O
which	O
could	O
be	O
used	O
instead	O
of	O
EqualsBuilder	B-api_mention
to	O
allow	O
short	O
-	O
circuiting	O
as	O
above	O
)	O
.	O
So	O
:	O
yes	O
,	O
the	O
commons	O
lang	O
builders	O
are	O
very	O
preferable	O
over	O
manually	O
constructed	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
(	O
or	O
those	O
awful	O
monsters	O
Eclipse	O
will	O
generate	O
for	O
you	O
)	O
,	O
but	O
the	O
Guava	O
versions	O
are	O
even	O
better	O
.	O
And	O
a	O
note	O
about	O
Hibernate	O
:	O
be	O
careful	O
about	O
using	O
lazy	O
collections	O
in	O
your	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
hashCode	B-api_mention
(	I-api_mention
)	I-api_mention
and	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
implementations	O
.	O
That	O
will	O
fail	O
miserably	O
if	O
you	O
don	O
'	O
t	O
have	O
an	O
open	O
Session	B-api_mention
.	O
Note	O
(	O
about	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
)	O
:	O
a	O
)	O
in	O
both	O
versions	O
of	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
above	O
,	O
you	O
might	O
want	O
to	O
use	O
one	O
or	O
both	O
of	O
these	O
shortcuts	O
also	O
:	O
#	O
pre	O
b	O
)	O
depending	O
on	O
your	O
interpretation	O
of	O
the	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
contract	O
,	O
you	O
might	O
also	O
change	O
the	O
line	O
(	O
s	O
)	O
if	O
(	O
args	O
)	O
{	O
to	O
#	O
pre	O
If	O
you	O
use	O
the	O
second	O
version	O
,	O
you	O
probably	O
also	O
want	O
to	O
call	O
super	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
inside	O
your	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Opinions	O
differ	O
here	O
,	O
the	O
topic	O
is	O
discussed	O
in	O
this	O
question	O
:	O
#	O
blockquote	O
(	O
although	O
it	O
'	O
s	O
about	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
the	O
same	O
applies	O
to	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
Note	O
(	O
inspired	O
by	O
Comment	O
from	O
kayahr	O
)	O
Objects	B-api_mention
.	I-api_mention
hashCode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
just	O
as	O
the	O
underlying	O
Arrays	B-api_mention
.	I-api_mention
hashCode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
might	O
perform	O
badly	O
if	O
you	O
have	O
many	O
primitive	O
fields	O
.	O
In	O
such	O
cases	O
,	O
EqualsBuilder	B-api_mention
may	O
actually	O
be	O
the	O
better	O
solution	O
.	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
21008747	O
[	O
Disclaimer	O
this	O
is	O
a	O
deliberately	O
opinionated	O
style	O
of	O
answer	O
as	O
I	O
feel	O
a	O
more	O
"	O
don	O
'	O
t	O
do	O
this	O
at	O
home	O
kids	O
"	O
answer	O
is	O
warranted	O
]	O
The	O
sin	O
is	O
the	O
line	O
field	O
.	B-api_mention
setAccessible	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
says	O
to	O
violate	O
the	O
public	O
api	O
by	O
allowing	O
access	O
to	O
a	O
private	O
field	O
.	O
Thats	O
a	O
giant	O
security	O
hole	O
which	O
can	O
be	O
locked	O
down	O
by	O
configuring	O
a	O
security	O
manager	O
.	O
The	O
phenomenon	O
in	O
the	O
question	O
are	O
implementation	O
details	O
which	O
you	O
would	O
never	O
see	O
when	O
not	O
using	O
that	O
dangerous	O
line	O
of	O
code	O
to	O
violate	O
the	O
access	O
modifiers	O
via	O
reflection	O
.	O
Clearly	O
two	O
(	O
normally	O
)	O
immutable	O
strings	O
can	O
share	O
the	O
same	O
char	O
array	O
.	O
Whether	O
a	O
substring	O
shares	O
the	O
same	O
array	O
depends	O
on	O
whether	O
it	O
can	O
and	O
whether	O
the	O
developer	O
thought	O
to	O
share	O
it	O
.	O
Normally	O
these	O
are	O
invisible	O
implementation	O
details	O
which	O
you	O
should	O
not	O
have	O
to	O
know	O
unless	O
you	O
shoot	O
the	O
access	O
modifier	O
through	O
the	O
head	O
with	O
that	O
line	O
of	O
code	O
.	O
It	O
is	O
simply	O
not	O
a	O
good	O
idea	O
to	O
rely	O
upon	O
such	O
details	O
which	O
cannot	O
be	O
experienced	O
without	O
violating	O
the	O
access	O
modifiers	O
using	O
reflection	O
.	O
The	O
owner	O
of	O
that	O
class	O
only	O
supports	O
the	O
normal	O
public	O
API	O
and	O
is	O
free	O
to	O
make	O
implementation	O
changes	O
in	O
the	O
future	O
.	O
Having	O
said	O
all	O
that	O
the	O
line	O
of	O
code	O
is	O
really	O
very	O
useful	O
when	O
you	O
have	O
a	O
gun	O
held	O
you	O
your	O
head	O
forcing	O
you	O
to	O
do	O
such	O
dangerous	O
things	O
.	O
Using	O
that	O
back	O
door	O
is	O
usually	O
a	O
code	O
smell	O
that	O
you	O
need	O
to	O
upgrade	O
to	O
better	O
library	O
code	O
where	O
you	O
don	O
'	O
t	O
have	O
to	O
sin	O
.	O
Another	O
common	O
use	O
of	O
that	O
dangerous	O
line	O
of	O
code	O
is	O
to	O
write	O
a	O
"	O
voodoo	O
framework	O
"	O
(	O
orm	O
,	O
injection	O
container	O
,	O
.	O
.	O
.	O
)	O
.	O
Many	O
folks	O
get	O
religious	O
about	O
such	O
frameworks	O
(	O
both	O
for	O
and	O
against	O
them	O
)	O
so	O
I	O
will	O
avoid	O
inviting	O
a	O
flame	O
war	O
by	O
saying	O
nothing	O
other	O
than	O
the	O
vast	O
majority	O
of	O
programmers	O
don	O
'	O
t	O
have	O
to	O
go	O
there	O
.	O
Question	O
-	O
21947452	O
,	O
answer	O
-	O
29434641	O
I	O
performed	O
tests	O
on	O
Eclipse	O
vs	O
Netbeans	O
8	O
.	O
0	O
.	O
2	O
,	O
both	O
with	O
Java	O
version	O
1	O
.	O
8	O
;	O
I	O
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
measurements	O
.	O
Eclipse	O
:	O
I	O
got	O
the	O
same	O
time	O
on	O
both	O
cases	O
-	O
around	O
1	O
.	O
564	O
seconds	O
.	O
Netbeans	O
:	O
#	O
li	O
Using	O
"	O
#	O
"	O
:	O
1	O
.	O
536	O
seconds	O
#	O
li	O
Using	O
"	O
B	O
"	O
:	O
44	O
.	O
164	O
seconds	O
So	O
,	O
it	O
looks	O
like	O
Netbeans	O
has	O
bad	O
performance	O
on	O
print	O
to	O
console	O
.	O
After	O
more	O
research	O
I	O
realized	O
that	O
the	O
problem	O
is	O
line	O
-	O
wrapping	O
of	O
the	O
max	O
buffer	O
of	O
Netbeans	O
(	O
it	O
'	O
s	O
not	O
restricted	O
to	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
command	O
)	O
,	O
demonstrated	O
by	O
this	O
code	O
:	O
#	O
pre	O
The	O
time	O
results	O
are	O
less	O
then	O
1	O
millisecond	O
every	O
iteration	O
except	O
every	O
fifth	O
iteration	O
,	O
when	O
the	O
time	O
result	O
is	O
around	O
225	O
millisecond	O
.	O
Something	O
like	O
(	O
in	O
nanoseconds	O
)	O
:	O
#	O
pre	O
And	O
so	O
on	O
.	O
.	O
Summary	O
:	O
#	O
li	O
Eclipse	O
works	O
perfectly	O
with	O
"	O
B	O
"	O
#	O
li	O
Netbeans	O
has	O
a	O
line	O
-	O
wrapping	O
problem	O
that	O
can	O
be	O
solved	O
(	O
because	O
the	O
problem	O
does	O
not	O
occur	O
in	O
eclipse	O
)	O
(	O
without	O
adding	O
space	O
after	O
B	O
(	O
"	O
B	O
"	O
)	O
)	O
.	O
Question	O
-	O
29945627	O
,	O
answer	O
-	O
29945754	O
The	O
lambda	O
:	O
(	O
)	O
-	O
>	O
{	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
}	O
;	O
actually	O
represents	O
an	O
implementation	O
for	O
an	O
interface	O
like	O
:	O
#	O
pre	O
which	O
is	O
completely	O
different	O
than	O
the	O
one	O
you	O
'	O
ve	O
defined	O
.	O
That	O
'	O
s	O
why	O
you	O
get	O
an	O
error	O
.	O
Since	O
you	O
can	O
'	O
t	O
extend	O
your	O
@	O
FunctionalInterface	O
,	O
nor	O
introduce	O
a	O
brand	O
new	O
one	O
,	O
then	O
I	O
think	O
you	O
don	O
'	O
t	O
have	O
much	O
options	O
.	O
You	O
can	O
use	O
the	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interfaces	O
to	O
denote	O
that	O
some	O
of	O
the	O
values	O
(	O
return	O
type	O
or	O
method	O
parameter	O
)	O
is	O
missing	O
,	O
though	O
.	O
However	O
,	O
this	O
won	O
'	O
t	O
make	O
the	O
lambda	O
body	O
simpler	O
.	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
6470695	O
A	O
simple	O
thing	O
to	O
do	O
is	O
to	O
use	O
a	O
HashSet	B-api_mention
with	O
an	O
incorrect	O
(	O
or	O
non	O
-	O
existent	O
)	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
keep	O
adding	O
"	O
duplicates	O
"	O
.	O
Instead	O
of	O
ignoring	O
duplicates	O
as	O
it	O
should	O
,	O
the	O
set	O
will	O
only	O
ever	O
grow	O
and	O
you	O
won	O
'	O
t	O
be	O
able	O
to	O
remove	O
them	O
.	O
If	O
you	O
want	O
these	O
bad	O
keys	O
/	O
elements	O
to	O
hang	O
around	O
you	O
can	O
use	O
a	O
static	O
field	O
like	O
#	O
pre	O
Question	O
-	O
21242110	O
What	O
is	O
the	O
best	O
way	O
to	O
convert	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
object	O
to	O
the	O
new	O
JDK	O
8	O
/	O
JSR	O
-	O
310	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalDate	I-api_mention
?	O
#	O
pre	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846964	O
For	O
one	O
,	O
you	O
can	O
get	O
away	O
with	O
reference	O
sharing	O
.	O
A	O
new	O
HashMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
etc	O
will	O
require	O
an	O
allocated	O
object	O
,	O
and	O
possibly	O
some	O
extra	O
elements	O
to	O
hold	O
the	O
data	O
,	O
but	O
you	O
only	O
need	O
one	O
copy	O
of	O
an	O
immutable	O
empty	O
collection	O
(	O
list	O
,	O
set	O
,	O
map	O
,	O
or	O
any	O
other	O
such	O
)	O
.	O
This	O
makes	O
it	O
an	O
obvious	O
choice	O
when	O
a	O
method	O
you	O
'	O
re	O
calling	O
needs	O
to	O
accept	O
a	O
Map	B-api_mention
but	O
does	O
not	O
need	O
to	O
edit	O
it	O
.	O
I	O
suggest	O
checking	O
out	O
Josh	O
Bloch	O
'	O
s	O
Effective	O
Java	O
,	O
which	O
lists	O
some	O
very	O
nice	O
attributes	O
of	O
immutable	O
objects	O
(	O
including	O
thread	O
safety	O
)	O
.	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
15655071	O
If	O
you	O
make	O
foo	O
static	O
,	O
you	O
must	O
initialize	O
it	O
in	O
the	O
class	O
constructor	O
(	O
or	O
inline	O
where	O
you	O
define	O
it	O
)	O
like	O
the	O
following	O
examples	O
.	O
Class	O
constructor	O
(	O
not	O
instance	O
)	O
:	O
#	O
pre	O
Inline	O
:	O
private	O
static	O
final	O
List	B-api_mention
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
problem	O
here	O
is	O
not	O
how	O
the	O
final	O
modifier	O
works	O
,	O
but	O
rather	O
how	O
the	O
static	O
modifier	O
works	O
.	O
The	O
final	O
modifier	O
enforces	O
an	O
initialization	O
of	O
your	O
reference	O
by	O
the	O
time	O
the	O
call	O
to	O
your	O
constructor	O
completes	O
(	O
i	O
.	O
e	O
.	O
you	O
must	O
initialize	O
it	O
in	O
the	O
constructor	O
)	O
.	O
When	O
you	O
initialize	O
an	O
attribute	O
in	O
-	O
line	O
,	O
it	O
gets	O
initialized	O
before	O
the	O
code	O
you	O
have	O
defined	O
for	O
the	O
constructor	O
is	O
run	O
,	O
so	O
you	O
get	O
the	O
following	O
outcomes	O
:	O
#	O
li	O
if	O
foo	O
is	O
static	O
,	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
executed	O
before	O
the	O
static	O
{	O
}	O
constructor	O
you	O
have	O
defined	O
for	O
your	O
class	O
is	O
executed	O
#	O
li	O
if	O
foo	O
is	O
not	O
static	O
,	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
executed	O
before	O
your	O
constructor	O
is	O
run	O
When	O
you	O
do	O
not	O
initilize	O
an	O
attribute	O
in	O
-	O
line	O
,	O
the	O
final	O
modifier	O
enforces	O
that	O
you	O
initialize	O
it	O
and	O
that	O
you	O
must	O
do	O
so	O
in	O
the	O
constructor	O
.	O
If	O
you	O
also	O
have	O
a	O
static	O
modifier	O
,	O
the	O
constructor	O
you	O
will	O
have	O
to	O
initialize	O
the	O
attribute	O
in	O
is	O
the	O
class	O
'	O
initialization	O
block	O
:	O
static	O
{	O
}	O
.	O
The	O
error	O
you	O
get	O
in	O
your	O
code	O
is	O
from	O
the	O
fact	O
that	O
static	O
{	O
}	O
is	O
run	O
when	O
the	O
class	O
is	O
loaded	O
,	O
before	O
the	O
time	O
you	O
instantiate	O
an	O
object	O
of	O
that	O
class	O
.	O
Thus	O
,	O
you	O
will	O
have	O
not	O
initialized	O
foo	O
when	O
the	O
class	O
is	O
created	O
.	O
Think	O
of	O
the	O
static	O
{	O
}	O
block	O
as	O
a	O
constructor	O
for	O
an	O
object	O
of	O
type	O
Class	B-api_mention
.	O
This	O
is	O
where	O
you	O
must	O
do	O
the	O
initialization	O
of	O
your	O
static	O
final	O
class	O
attributes	O
(	O
if	O
not	O
done	O
inline	O
)	O
.	O
Side	O
note	O
:	O
The	O
final	O
modifier	O
assures	O
const	O
-	O
ness	O
only	O
for	O
primitive	O
types	O
and	O
references	O
.	O
When	O
you	O
declare	O
a	O
final	O
object	O
,	O
what	O
you	O
get	O
is	O
a	O
final	O
reference	O
to	O
that	O
object	O
,	O
but	O
the	O
object	O
itself	O
is	O
not	O
constant	O
.	O
What	O
you	O
are	O
really	O
achieving	O
when	O
declaring	O
a	O
final	O
attribute	O
is	O
that	O
,	O
once	O
you	O
declare	O
an	O
object	O
for	O
your	O
specific	O
purpose	O
(	O
like	O
the	O
final	O
List	B-api_mention
that	O
you	O
have	O
declared	O
)	O
,	O
that	O
and	O
only	O
that	O
object	O
will	O
be	O
used	O
for	O
that	O
purpose	O
:	O
you	O
will	O
not	O
be	O
able	O
to	O
change	O
List	B-api_mention
foo	O
to	O
another	O
List	B-api_mention
,	O
but	O
you	O
can	O
still	O
alter	O
your	O
List	B-api_mention
by	O
adding	O
/	O
removing	O
items	O
(	O
the	O
List	B-api_mention
you	O
are	O
using	O
will	O
be	O
the	O
same	O
,	O
only	O
with	O
its	O
contents	O
altered	O
)	O
.	O
Question	O
-	O
30384955	O
,	O
answer	O
-	O
30385298	O
Replacing	O
the	O
definition	O
of	O
TbinList	O
with	O
class	O
TbinList	O
<	O
T	O
>	O
extends	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
{	O
}	O
and	O
defining	O
test2	O
with	O
TbinList	O
<	O
T	O
>	O
test2	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
instead	O
would	O
solve	O
the	O
issue	O
.	O
With	O
your	O
definition	O
you	O
'	O
re	O
ending	O
up	O
with	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
where	O
T	O
is	O
any	O
fixed	O
class	O
extending	O
Base	O
.	O
Question	O
-	O
13659217	O
I	O
declare	O
an	O
enum	O
as	O
:	O
enum	O
Sex	O
{	O
MALE	O
,	O
FEMALE	O
}	O
;	O
And	O
then	O
,	O
iterate	O
enum	O
as	O
shown	O
below	O
:	O
#	O
pre	O
I	O
checked	O
the	O
Java	O
API	O
but	O
can	O
'	O
t	O
find	O
the	O
values	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
?	O
I	O
'	O
m	O
curious	O
as	O
to	O
where	O
this	O
method	O
comes	O
from	O
?	O
API	O
link	O
:	O
#	O
a	O
Question	O
-	O
24885223	O
I	O
don	O
'	O
t	O
know	O
whether	O
I	O
am	O
asking	O
the	O
right	O
question	O
.	O
I	O
was	O
exploring	O
RecyclerView	B-api_mention
and	O
I	O
was	O
surprised	O
to	O
see	O
that	O
RecyclerView	B-api_mention
does	O
not	O
have	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Because	O
RecyclerView	B-api_mention
extends	O
#	O
blockquote	O
and	O
ListView	B-api_mention
extends	O
#	O
blockquote	O
.	O
However	O
I	O
solved	O
my	O
problem	O
by	O
writing	O
onClick	B-api_mention
in	O
my	O
RecyclerView	B-api_mention
.	I-api_mention
Adapter	I-api_mention
:	O
#	O
pre	O
But	O
still	O
I	O
want	O
to	O
know	O
why	O
Google	O
removed	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Is	O
there	O
a	O
performance	O
issue	O
or	O
something	O
else	O
?	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777279	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
same	O
as	O
array1	O
=	O
=	O
array2	O
,	O
i	O
.	O
e	O
.	O
is	O
it	O
the	O
same	O
array	O
.	O
As	O
@	O
alf	O
points	O
out	O
it	O
'	O
s	O
not	O
what	O
most	O
people	O
expect	O
.	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
compares	O
the	O
contents	O
of	O
the	O
arrays	O
.	O
Similarly	O
array	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
not	O
be	O
very	O
useful	O
and	O
you	O
need	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
27949213	O
Since	O
String	B-api_mention
in	O
Java	O
(	O
like	O
other	O
languages	O
)	O
consumes	O
a	O
lot	O
of	O
memory	O
because	O
each	O
character	O
consumes	O
two	O
bytes	O
,	O
Java	O
8	O
has	O
introduced	O
a	O
new	O
feature	O
called	O
String	O
Deduplication	O
which	O
takes	O
advantage	O
of	O
the	O
fact	O
that	O
the	O
char	O
arrays	O
are	O
internal	O
to	O
strings	O
and	O
final	O
,	O
so	O
the	O
JVM	O
can	O
mess	O
around	O
with	O
them	O
.	O
I	O
have	O
read	O
this	O
example	O
so	O
far	O
but	O
since	O
I	O
am	O
not	O
a	O
pro	O
java	O
coder	O
,	O
I	O
am	O
having	O
a	O
hard	O
time	O
grasping	O
the	O
concept	O
.	O
Here	O
is	O
what	O
it	O
says	O
,	O
#	O
blockquote	O
My	O
First	O
question	O
,	O
There	O
is	O
still	O
a	O
lack	O
of	O
resources	O
on	O
this	O
topic	O
since	O
it	O
is	O
recently	O
added	O
in	O
Java	O
8	O
update	O
20	O
,	O
could	O
anyone	O
here	O
share	O
some	O
practical	O
examples	O
on	O
how	O
it	O
help	O
in	O
reducing	O
the	O
memory	O
consumed	O
by	O
String	B-api_mention
in	O
Java	O
?	O
Edit	O
:	O
The	O
above	O
link	O
says	O
,	O
#	O
blockquote	O
My	O
2nd	O
question	O
,	O
If	O
hash	O
code	O
of	O
two	O
String	B-api_mention
are	O
same	O
then	O
the	O
Strings	O
are	O
already	O
the	O
same	O
,	O
then	O
why	O
compare	O
them	O
char	O
by	O
char	O
once	O
it	O
is	O
found	O
that	O
the	O
two	O
String	B-api_mention
have	O
same	O
hash	O
code	O
?	O
Question	O
-	O
25168062	O
Why	O
is	O
i	O
+	O
+	O
not	O
atomic	O
in	O
Java	O
?	O
To	O
get	O
a	O
bit	O
deeper	O
in	O
Java	O
I	O
tried	O
to	O
count	O
how	O
often	O
the	O
loop	O
in	O
threads	O
are	O
executed	O
.	O
So	O
I	O
used	O
a	O
private	O
static	O
int	O
total	O
=	O
0	O
;	O
in	O
the	O
main	O
class	O
.	O
I	O
have	O
two	O
threads	O
.	O
#	O
li	O
Thread	O
1	O
:	O
Prints	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
Thread	O
2	O
:	O
Prints	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
I	O
count	O
the	O
lines	O
printed	O
by	O
thread	O
1	O
and	O
thread	O
2	O
.	O
But	O
the	O
lines	O
of	O
thread	O
1	O
+	O
lines	O
of	O
thread	O
2	O
don	O
'	O
t	O
match	O
the	O
total	O
number	O
of	O
lines	O
printed	O
out	O
.	O
Here	O
is	O
my	O
code	O
:	O
#	O
pre	O
Question	O
-	O
6608795	O
,	O
answer	O
-	O
22327270	O
I	O
tried	O
reading	O
from	O
input1	O
.	O
txt	O
which	O
was	O
inside	O
one	O
of	O
my	O
packages	O
together	O
with	O
the	O
class	O
which	O
was	O
trying	O
to	O
read	O
it	O
.	O
The	O
following	O
works	O
:	O
#	O
pre	O
The	O
most	O
important	O
part	O
was	O
to	O
call	O
getPath	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
you	O
want	O
the	O
correct	O
path	O
name	O
in	O
String	B-api_mention
format	O
.	O
DO	O
NOT	O
USE	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
it	O
will	O
add	O
some	O
extra	O
formatting	O
text	O
which	O
will	O
TOTALLY	O
MESS	O
UP	O
the	O
fileName	O
(	O
you	O
can	O
try	O
it	O
and	O
see	O
the	O
print	O
out	O
)	O
.	O
Spent	O
2	O
hours	O
debugging	O
this	O
.	O
.	O
.	O
:	O
(	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
16252296	O
Use	O
util	O
method	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
class	O
,	O
i	O
.	O
e	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
In	O
fact	O
,	O
if	O
you	O
want	O
to	O
sort	O
custom	O
object	O
you	O
can	O
use	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
see	O
collections	O
api	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
8579702	O
If	O
you	O
just	O
invoke	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
directly	O
,	O
it	O
'	O
s	O
executed	O
on	O
the	O
calling	O
thread	O
,	O
just	O
like	O
any	O
other	O
method	O
call	O
.	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
required	O
to	O
actually	O
create	O
a	O
new	O
thread	O
so	O
that	O
the	O
runnable	O
'	O
s	O
run	O
method	O
is	O
executed	O
in	O
parallel	O
.	O
Question	O
-	O
24676877	O
,	O
answer	O
-	O
24679745	O
The	O
answer	O
is	O
,	O
as	O
always	O
,	O
"	O
it	O
depends	O
"	O
.	O
It	O
depends	O
on	O
how	O
big	O
the	O
returned	O
collection	O
will	O
be	O
.	O
It	O
depends	O
on	O
whether	O
the	O
result	O
changes	O
over	O
time	O
,	O
and	O
how	O
important	O
consistency	O
of	O
the	O
returned	O
result	O
is	O
.	O
And	O
it	O
depends	O
very	O
much	O
on	O
how	O
the	O
user	O
is	O
likely	O
to	O
use	O
the	O
answer	O
.	O
First	O
,	O
note	O
that	O
you	O
can	O
always	O
get	O
a	O
Collection	B-api_mention
from	O
a	O
Stream	B-api_mention
,	O
and	O
vice	O
versa	O
:	O
/	O
/	O
If	O
API	O
returns	O
Collection	B-api_mention
,	O
convert	O
with	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
getFoo	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
/	O
/	O
If	O
API	O
returns	O
Stream	B-api_mention
,	O
use	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Collection	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
c	O
=	O
getFooStream	O
(	O
args	O
)	O
.	B-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
the	O
question	O
is	O
,	O
which	O
is	O
more	O
useful	O
to	O
your	O
callers	O
.	O
If	O
your	O
result	O
might	O
be	O
infinite	O
,	O
there	O
'	O
s	O
only	O
one	O
choice	O
:	O
Stream	B-api_mention
.	O
If	O
your	O
result	O
might	O
be	O
very	O
large	O
,	O
you	O
probably	O
prefer	O
Stream	B-api_mention
,	O
since	O
there	O
may	O
not	O
be	O
any	O
value	O
in	O
materializing	O
it	O
all	O
at	O
once	O
,	O
and	O
doing	O
so	O
could	O
create	O
significant	O
heap	O
pressure	O
.	O
If	O
all	O
the	O
caller	O
is	O
going	O
to	O
do	O
is	O
iterate	O
through	O
it	O
(	O
search	O
,	O
filter	O
,	O
aggregate	O
)	O
,	O
you	O
should	O
prefer	O
Stream	B-api_mention
,	O
since	O
Stream	B-api_mention
has	O
these	O
built	O
-	O
in	O
already	O
and	O
there	O
'	O
s	O
no	O
need	O
to	O
materialize	O
a	O
collection	O
(	O
especially	O
if	O
the	O
user	O
might	O
not	O
process	O
the	O
whole	O
result	O
.	O
)	O
This	O
is	O
a	O
very	O
common	O
case	O
.	O
Even	O
if	O
you	O
know	O
that	O
the	O
user	O
will	O
iterate	O
it	O
multiple	O
times	O
or	O
otherwise	O
keep	O
it	O
around	O
,	O
you	O
still	O
may	O
want	O
to	O
return	O
a	O
Stream	B-api_mention
instead	O
,	O
for	O
the	O
simple	O
fact	O
that	O
whatever	O
Collection	B-api_mention
you	O
choose	O
to	O
put	O
it	O
in	O
(	O
e	O
.	O
g	O
.	O
,	O
ArrayList	B-api_mention
)	O
may	O
not	O
be	O
the	O
form	O
they	O
want	O
,	O
and	O
then	O
the	O
caller	O
has	O
to	O
copy	O
it	O
anyway	O
.	O
if	O
you	O
return	O
a	O
stream	O
,	O
they	O
can	O
do	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
get	O
it	O
in	O
exactly	O
the	O
form	O
they	O
want	O
.	O
The	O
above	O
"	O
prefer	O
Stream	O
"	O
cases	O
mostly	O
derive	O
from	O
the	O
fact	O
that	O
Stream	B-api_mention
is	O
more	O
flexible	O
;	O
you	O
can	O
late	O
-	O
bind	O
to	O
how	O
you	O
use	O
it	O
without	O
incurring	O
the	O
costs	O
and	O
constraints	O
of	O
materializing	O
it	O
to	O
a	O
Collection	B-api_mention
.	O
The	O
one	O
case	O
where	O
you	O
must	O
return	O
a	O
Collection	B-api_mention
is	O
when	O
there	O
are	O
strong	O
consistency	O
requirements	O
,	O
and	O
you	O
have	O
to	O
produce	O
a	O
consistent	O
snapshot	O
of	O
a	O
moving	O
target	O
.	O
Then	O
,	O
you	O
will	O
want	O
put	O
the	O
elements	O
into	O
a	O
collection	O
that	O
will	O
not	O
change	O
.	O
So	O
I	O
would	O
say	O
that	O
most	O
of	O
the	O
time	O
,	O
Stream	B-api_mention
is	O
the	O
right	O
answer	O
-	O
-	O
it	O
is	O
more	O
flexible	O
,	O
it	O
doesn	O
'	O
t	O
impose	O
usually	O
-	O
unnecessary	O
materialization	O
costs	O
,	O
and	O
can	O
be	O
easily	O
turned	O
into	O
the	O
Collection	B-api_mention
of	O
your	O
choice	O
if	O
needed	O
.	O
But	O
sometimes	O
,	O
you	O
may	O
have	O
to	O
return	O
a	O
Collection	B-api_mention
(	O
say	O
,	O
due	O
to	O
strong	O
consistency	O
requirements	O
)	O
,	O
or	O
you	O
may	O
want	O
to	O
return	O
Collection	B-api_mention
because	O
you	O
know	O
how	O
the	O
user	O
will	O
be	O
using	O
it	O
and	O
know	O
this	O
is	O
the	O
most	O
convenient	O
thing	O
for	O
them	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29500496	O
First	O
of	O
all	O
,	O
the	O
cast	O
in	O
that	O
line	O
(	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
are	O
absobuletly	O
needed	O
.	O
Removing	O
them	O
will	O
result	O
in	O
a	O
compilation	O
error	O
:	O
#	O
pre	O
Now	O
to	O
answer	O
your	O
question	O
What	O
is	O
this	O
line	O
checking	O
?	O
It	O
simply	O
verify	O
if	O
the	O
given	O
array	O
is	O
of	O
object	O
type	O
,	O
which	O
is	O
part	O
of	O
the	O
answer	O
for	O
your	O
other	O
question	O
Why	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
not	O
good	O
enough	O
for	O
both	O
cases	O
?	O
In	O
the	O
first	O
case	O
,	O
we	O
already	O
know	O
that	O
the	O
array	O
is	O
of	O
Object	B-api_mention
type	O
so	O
there	O
is	O
no	O
point	O
in	O
calling	O
the	O
newInstance	O
method	O
to	O
retrieve	O
the	O
correct	O
type	O
,	O
this	O
would	O
only	O
result	O
in	O
performance	O
loss	O
.	O
As	O
for	O
your	O
final	O
example	O
,	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
That	O
it	O
does	O
compile	O
,	O
it	O
is	O
true	O
.	O
Because	O
the	O
given	O
arguments	O
to	O
the	O
method	O
are	O
all	O
valids	O
.	O
It	O
will	O
certainly	O
fail	O
at	O
runtime	O
;	O
what	O
would	O
be	O
the	O
expected	O
output	O
of	O
converting	O
"	O
a	O
"	O
to	O
Integer	B-api_mention
type	O
?	O
Now	O
,	O
when	O
to	O
use	O
copyOf	B-api_mention
?	O
When	O
you	O
already	O
know	O
the	O
both	O
types	O
,	O
and	O
already	O
know	O
that	O
they	O
are	O
valid	O
together	O
.	O
It	O
main	O
usage	O
is	O
to	O
return	O
a	O
copy	O
but	O
truncated	O
or	O
padded	O
with	O
[	O
null	O
/	O
default	O
values	O
]	O
to	O
the	O
original	O
array	O
.	O
Question	O
-	O
18092160	O
Why	O
were	O
181783497276652981	O
and	O
8682522807148012	O
chosen	O
in	O
Random	O
.	O
java	O
?	O
Here	O
'	O
s	O
the	O
relevant	O
source	O
code	O
from	O
Java	O
SE	O
JDK	O
1	O
.	O
7	O
:	O
#	O
pre	O
So	O
,	O
invoking	O
new	O
Random	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
without	O
any	O
seed	O
parameter	O
takes	O
the	O
current	O
"	O
seed	O
uniquifier	O
"	O
and	O
XORs	O
it	O
with	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Then	O
it	O
uses	O
181783497276652981	O
to	O
create	O
another	O
seed	O
uniquifier	O
to	O
be	O
stored	O
for	O
the	O
next	O
time	O
new	O
Random	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
.	O
The	O
literals	O
181783497276652981L	O
and	O
8682522807148012L	O
are	O
not	O
placed	O
in	O
constants	O
,	O
but	O
they	O
don	O
'	O
t	O
appear	O
anywhere	O
else	O
.	O
At	O
first	O
the	O
comment	O
gives	O
me	O
an	O
easy	O
lead	O
.	O
Searching	O
online	O
for	O
that	O
article	O
yields	O
the	O
actual	O
article	O
.	O
8682522807148012	O
doesn	O
'	O
t	O
appear	O
in	O
the	O
paper	O
,	O
but	O
181783497276652981	O
does	O
appear	O
-	O
-	O
as	O
a	O
substring	O
of	O
another	O
number	O
,	O
1181783497276652981	O
,	O
which	O
is	O
181783497276652981	O
with	O
a	O
1	O
prepended	O
.	O
The	O
paper	O
claims	O
that	O
1181783497276652981	O
is	O
a	O
number	O
that	O
yields	O
good	O
"	O
merit	O
"	O
for	O
a	O
linear	O
congruential	O
generator	O
.	O
Was	O
this	O
number	O
simply	O
mis	O
-	O
copied	O
into	O
Java	O
?	O
Does	O
181783497276652981	O
have	O
an	O
acceptable	O
merit	O
?	O
And	O
why	O
was	O
8682522807148012	O
chosen	O
?	O
Searching	O
online	O
for	O
either	O
number	O
yields	O
no	O
explanation	O
,	O
only	O
this	O
page	O
that	O
also	O
notices	O
the	O
dropped	O
1	O
in	O
front	O
of	O
181783497276652981	O
.	O
Could	O
other	O
numbers	O
have	O
been	O
chosen	O
that	O
would	O
have	O
worked	O
as	O
well	O
as	O
these	O
two	O
numbers	O
?	O
Why	O
or	O
why	O
not	O
?	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20889556	O
To	O
complement	O
the	O
given	O
answers	O
,	O
also	O
take	O
note	O
of	O
the	O
following	O
:	O
#	O
pre	O
This	O
code	O
will	O
also	O
print	O
:	O
false	O
As	O
user	O
Jay	O
has	O
claimed	O
in	O
a	O
comment	O
for	O
the	O
accepted	O
answer	O
,	O
care	O
must	O
be	O
taken	O
when	O
using	O
operator	O
=	O
=	O
on	O
objects	O
,	O
here	O
you	O
'	O
re	O
checking	O
if	O
both	O
references	O
are	O
the	O
same	O
,	O
which	O
is	O
not	O
,	O
because	O
they	O
are	O
different	O
objets	O
,	O
although	O
they	O
represent	O
the	O
very	O
same	O
value	O
.	O
To	O
compare	O
objects	O
,	O
you	O
should	O
use	O
the	O
equals	O
method	O
instead	O
:	O
#	O
pre	O
This	O
will	O
print	O
:	O
true	O
You	O
may	O
ask	O
,	O
But	O
then	O
why	O
the	O
first	O
line	O
printed	O
true	O
?	O
.	O
Checking	O
the	O
source	O
code	O
for	O
the	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
method	O
,	O
you	O
can	O
see	O
the	O
following	O
:	O
#	O
pre	O
If	O
the	O
param	O
is	O
an	O
integer	O
between	O
IntegerCache	B-api_mention
.	I-api_mention
low	I-api_mention
(	O
defaulted	O
to	O
-	O
128	O
)	O
and	O
IntegerCache	B-api_mention
.	I-api_mention
high	I-api_mention
(	O
calculated	O
at	O
runtime	O
with	O
minimum	O
value	O
127	O
)	O
then	O
a	O
pre	O
-	O
allocated	O
(	O
cached	O
)	O
object	O
is	O
returned	O
.	O
So	O
when	O
you	O
use	O
127	O
as	O
parameter	O
,	O
you	O
'	O
re	O
getting	O
two	O
references	O
to	O
same	O
cached	O
object	O
and	O
getting	O
true	O
in	O
the	O
comparison	O
of	O
the	O
references	O
.	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
24296741	O
Here	O
'	O
s	O
another	O
technique	O
I	O
ran	O
across	O
the	O
other	O
day	O
:	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
call	O
creates	O
a	O
List	B-api_mention
containing	O
n	O
copies	O
of	O
whatever	O
value	O
you	O
provide	O
.	O
In	O
this	O
case	O
it	O
'	O
s	O
the	O
boxed	O
Integer	O
value	O
1	O
.	O
Of	O
course	O
it	O
doesn	O
'	O
t	O
actually	O
create	O
a	O
list	O
with	O
n	O
elements	O
;	O
it	O
creates	O
a	O
"	O
virtualized	O
"	O
list	O
that	O
contains	O
only	O
the	O
value	O
and	O
the	O
length	O
,	O
and	O
any	O
call	O
to	O
get	O
within	O
range	O
just	O
returns	O
the	O
value	O
.	O
The	O
nCopies	B-api_mention
method	O
has	O
been	O
around	O
since	O
the	O
Collections	B-api_mention
Framework	O
was	O
introduced	O
way	O
back	O
in	O
JDK	O
1	O
.	O
2	O
.	O
Of	O
course	O
,	O
the	O
ability	O
to	O
create	O
a	O
stream	O
from	O
its	O
result	O
was	O
added	O
in	O
Java	O
SE	O
8	O
.	O
Big	O
deal	O
,	O
another	O
way	O
to	O
do	O
the	O
same	O
thing	O
in	O
about	O
the	O
same	O
number	O
of	O
lines	O
.	O
However	O
,	O
this	O
technique	O
is	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
generate	I-api_mention
and	O
IntStream	B-api_mention
.	I-api_mention
iterate	I-api_mention
approaches	O
,	O
and	O
surprisingly	O
,	O
it	O
'	O
s	O
also	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
approach	O
.	O
For	O
iterate	O
and	O
generate	O
the	O
result	O
is	O
perhaps	O
not	O
too	O
surprising	O
.	O
The	O
streams	O
framework	O
(	O
really	O
,	O
the	O
Spliterators	O
for	O
these	O
streams	O
)	O
is	O
built	O
on	O
the	O
assumption	O
that	O
the	O
lambdas	O
will	O
potentially	O
generate	O
different	O
values	O
each	O
time	O
,	O
and	O
that	O
they	O
will	O
generate	O
an	O
unbounded	O
number	O
of	O
results	O
.	O
This	O
makes	O
parallel	O
splitting	O
particularly	O
difficult	O
.	O
The	O
iterate	O
method	O
is	O
also	O
problematic	O
for	O
this	O
case	O
because	O
each	O
call	O
requires	O
the	O
result	O
of	O
the	O
previous	O
one	O
.	O
So	O
the	O
streams	O
using	O
generate	O
and	O
iterate	O
don	O
'	O
t	O
do	O
very	O
well	O
for	O
generating	O
repeated	O
constants	O
.	O
The	O
relatively	O
poor	O
performance	O
of	O
range	O
is	O
surprising	O
.	O
This	O
too	O
is	O
virtualized	O
,	O
so	O
the	O
elements	O
don	O
'	O
t	O
actually	O
all	O
exist	O
in	O
memory	O
,	O
and	O
the	O
size	O
is	O
known	O
up	O
front	O
.	O
This	O
should	O
make	O
for	O
a	O
fast	O
and	O
easily	O
parallelizable	O
spliterator	O
.	O
But	O
it	O
surprisingly	O
didn	O
'	O
t	O
do	O
very	O
well	O
.	O
Perhaps	O
the	O
reason	O
is	O
that	O
range	O
has	O
to	O
compute	O
a	O
value	O
for	O
each	O
element	O
of	O
the	O
range	O
and	O
then	O
call	O
a	O
function	O
on	O
it	O
.	O
But	O
this	O
function	O
just	O
ignores	O
its	O
input	O
and	O
returns	O
a	O
constant	O
,	O
so	O
I	O
'	O
m	O
surprised	O
this	O
isn	O
'	O
t	O
inlined	O
and	O
killed	O
.	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
technique	O
has	O
to	O
do	O
boxing	O
/	O
unboxing	O
in	O
order	O
to	O
handle	O
the	O
values	O
,	O
since	O
there	O
are	O
no	O
primitive	O
specializations	O
of	O
List	B-api_mention
.	O
Since	O
the	O
value	O
is	O
the	O
same	O
every	O
time	O
,	O
it	O
'	O
s	O
basically	O
boxed	O
once	O
and	O
that	O
box	O
is	O
shared	O
by	O
all	O
n	O
copies	O
.	O
I	O
suspect	O
boxing	O
/	O
unboxing	O
is	O
highly	O
optimized	O
,	O
even	O
intrinsified	O
,	O
and	O
it	O
can	O
be	O
inlined	O
well	O
.	O
Here	O
'	O
s	O
the	O
code	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
JMH	O
results	O
:	O
(	O
2	O
.	O
8GHz	O
Core2Duo	O
)	O
#	O
pre	O
There	O
is	O
a	O
fair	O
amount	O
of	O
variance	O
in	O
the	O
ncopies	O
version	O
,	O
but	O
overall	O
it	O
seems	O
comfortably	O
20x	O
faster	O
than	O
the	O
range	O
version	O
.	O
(	O
I	O
'	O
d	O
be	O
quite	O
willing	O
to	O
believe	O
that	O
I	O
'	O
ve	O
done	O
something	O
wrong	O
,	O
though	O
.	O
)	O
I	O
'	O
m	O
surprised	O
at	O
how	O
well	O
the	O
nCopies	B-api_mention
technique	O
works	O
.	O
Internally	O
it	O
doesn	O
'	O
t	O
do	O
very	O
much	O
special	O
,	O
with	O
the	O
stream	O
of	O
the	O
virtualized	O
list	O
simply	O
being	O
implemented	O
using	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
!	O
I	O
had	O
expected	O
that	O
it	O
would	O
be	O
necessary	O
to	O
create	O
a	O
specialized	O
spliterator	O
to	O
get	O
this	O
to	O
go	O
fast	O
,	O
but	O
it	O
already	O
seems	O
to	O
be	O
pretty	O
good	O
.	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20959594	O
String	B-api_mention
is	O
immutable	O
,	O
but	O
through	O
reflection	O
you	O
'	O
re	O
allowed	O
to	O
change	O
the	O
String	B-api_mention
class	O
.	O
You	O
'	O
ve	O
just	O
redefined	O
the	O
String	B-api_mention
class	O
as	O
mutable	O
in	O
real	O
-	O
time	O
.	O
You	O
could	O
redefine	O
methods	O
to	O
be	O
public	O
or	O
private	O
or	O
static	O
if	O
you	O
wanted	O
.	O
Question	O
-	O
30125296	O
,	O
answer	O
-	O
35035659	O
You	O
can	O
use	O
reduce	O
method	O
:	O
long	O
creditAmountSum	O
=	O
result	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
12862659	O
,	O
answer	O
-	O
12862662	O
use	O
the	O
second	O
argument	O
on	O
the	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
method	O
,	O
as	O
in	O
:	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
someMethod	O
(	O
args	O
)	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
37603567	O
this	O
is	O
best	O
document	O
I	O
found	O
describing	O
getName	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
getSimpleName	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
getCanonicalName	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
a	O
#	O
pre	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923214	O
This	O
seems	O
a	O
bit	O
silly	O
to	O
me	O
,	O
but	O
the	O
only	O
reason	O
I	O
can	O
think	O
of	O
is	O
that	O
object	O
arguments	O
in	O
method	O
parameters	O
already	O
are	O
optional	O
in	O
a	O
way	O
-	O
they	O
can	O
be	O
null	O
.	O
Therefore	O
forcing	O
someone	O
to	O
take	O
an	O
existing	O
object	O
and	O
wrap	O
it	O
in	O
an	O
optional	O
is	O
sort	O
of	O
pointless	O
.	O
That	O
being	O
said	O
,	O
chaining	O
methods	O
together	O
that	O
take	O
/	O
return	O
optionals	O
is	O
a	O
reasonable	O
thing	O
to	O
do	O
,	O
e	O
.	O
g	O
.	O
Maybe	O
monad	O
.	O
Question	O
-	O
12539365	O
I	O
write	O
jUnit	O
test	O
cases	O
for	O
3	O
purposes	O
:	O
#	O
li	O
To	O
ensure	O
that	O
my	O
code	O
satisfies	O
all	O
of	O
the	O
required	O
functionality	O
,	O
under	O
all	O
(	O
or	O
most	O
of	O
)	O
the	O
input	O
combinations	O
/	O
values	O
.	O
#	O
li	O
To	O
ensure	O
that	O
I	O
can	O
change	O
the	O
implementation	O
,	O
and	O
rely	O
on	O
JUnit	O
test	O
cases	O
to	O
tell	O
me	O
that	O
all	O
my	O
functionality	O
is	O
still	O
satisfied	O
.	O
#	O
li	O
As	O
a	O
documentation	O
of	O
all	O
the	O
use	O
cases	O
my	O
code	O
handles	O
,	O
and	O
act	O
as	O
a	O
spec	O
for	O
refactoring	O
-	O
should	O
the	O
code	O
ever	O
need	O
to	O
be	O
rewritten	O
.	O
(	O
Refactor	O
the	O
code	O
,	O
and	O
if	O
my	O
jUnit	O
tests	O
fail	O
-	O
you	O
probably	O
missed	O
some	O
use	O
case	O
)	O
.	O
I	O
do	O
not	O
understand	O
why	O
or	O
when	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
be	O
used	O
.	O
When	O
I	O
see	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
being	O
called	O
,	O
it	O
is	O
telling	O
me	O
that	O
my	O
jUnit	O
is	O
becoming	O
aware	O
of	O
the	O
implementation	O
.	O
(	O
Thus	O
changing	O
my	O
implementation	O
would	O
break	O
my	O
jUnits	O
,	O
even	O
though	O
my	O
functionality	O
was	O
unaffected	O
)	O
.	O
I	O
'	O
m	O
looking	O
for	O
:	O
#	O
li	O
What	O
should	O
be	O
the	O
guidelines	O
for	O
appropriate	O
usage	O
of	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
#	O
li	O
Is	O
it	O
fundamentally	O
correct	O
for	O
jUnits	O
to	O
be	O
aware	O
of	O
,	O
or	O
tightly	O
coupled	O
to	O
,	O
the	O
implementation	O
of	O
the	O
class	O
under	O
test	O
?	O
Question	O
-	O
23699371	O
,	O
answer	O
-	O
34731808	O
You	O
can	O
use	O
the	O
distinct	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
Eclipse	O
Collections	B-api_mention
.	O
#	O
pre	O
If	O
you	O
can	O
refactor	O
persons	O
to	O
implement	O
an	O
Eclipse	O
Collections	B-api_mention
interface	O
,	O
you	O
can	O
call	O
the	O
method	O
directly	O
on	O
the	O
list	O
.	O
#	O
pre	O
HashingStrategy	O
is	O
simply	O
a	O
strategy	O
interface	O
that	O
allows	O
you	O
to	O
define	O
custom	O
implementations	O
of	O
equals	O
and	O
hashcode	O
.	O
#	O
pre	O
Note	O
:	O
I	O
am	O
a	O
committer	O
for	O
Eclipse	O
Collections	O
.	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
13291108	O
Use	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
you	O
want	O
to	O
make	O
a	O
comparison	O
or	O
use	O
the	O
hardcoded	O
value	O
for	O
some	O
internal	O
use	O
in	O
your	O
code	O
.	O
Use	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
you	O
want	O
to	O
present	O
information	O
to	O
a	O
user	O
(	O
including	O
a	O
developper	O
looking	O
at	O
a	O
log	O
)	O
.	O
Never	O
rely	O
in	O
your	O
code	O
on	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
giving	O
a	O
specific	O
value	O
.	O
Never	O
test	O
it	O
against	O
a	O
specific	O
string	O
.	O
If	O
your	O
code	O
breaks	O
when	O
someone	O
correctly	O
changes	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
return	O
,	O
then	O
it	O
was	O
already	O
broken	O
.	O
From	O
the	O
javadoc	O
(	O
emphasis	O
mine	O
)	O
:	O
#	O
blockquote	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
5439600	O
As	O
an	O
alternative	O
to	O
trying	O
to	O
parse	O
the	O
string	O
and	O
catching	O
NumberFormatException	B-api_mention
,	O
you	O
could	O
use	O
a	O
regex	O
;	O
e	O
.	O
g	O
.	O
#	O
pre	O
This	O
is	O
likely	O
to	O
be	O
faster	O
,	O
especially	O
if	O
you	O
precompile	O
and	O
reuse	O
the	O
regex	O
.	O
However	O
,	O
the	O
catch	O
is	O
that	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
still	O
fail	O
if	O
str	O
represents	O
a	O
number	O
that	O
is	O
outside	O
range	O
of	O
legal	O
int	O
values	O
.	O
Question	O
-	O
11821801	O
I	O
'	O
m	O
trying	O
to	O
understand	O
what	O
makes	O
the	O
lock	O
in	O
concurrency	O
so	O
important	O
if	O
one	O
can	O
use	O
synchronized	O
(	O
args	O
)	O
.	O
In	O
the	O
dummy	O
code	O
below	O
,	O
I	O
can	O
do	O
either	O
:	O
#	O
li	O
synchronized	O
the	O
entire	O
method	O
or	O
synchronize	O
the	O
vulnerable	O
area	O
(	O
synchronized	O
(	O
this	O
)	O
{	O
.	O
.	O
.	O
}	O
)	O
#	O
li	O
OR	O
lock	O
the	O
vulnerable	O
code	O
area	O
with	O
a	O
ReentrantLock	B-api_mention
.	O
Code	O
:	O
#	O
pre	O
Question	O
-	O
16159203	O
,	O
answer	O
-	O
18258659	O
You	O
have	O
ordinary	O
memory	O
,	O
the	O
'	O
currentpos	O
'	O
reference	O
and	O
the	O
Point	B-api_mention
object	O
and	O
its	O
fields	O
behind	O
it	O
,	O
shared	O
between	O
2	O
threads	O
,	O
without	O
synchronisation	O
.	O
Thus	O
,	O
there	O
is	O
no	O
defined	O
ordering	O
between	O
the	O
writes	O
that	O
happen	O
to	O
this	O
memory	O
in	O
the	O
main	O
thread	O
and	O
the	O
reads	O
in	O
the	O
created	O
thread	O
(	O
call	O
it	O
T	O
)	O
.	O
Main	O
thread	O
is	O
doing	O
the	O
following	O
writes	O
(	O
ignoring	O
the	O
initial	O
setup	O
of	O
point	O
,	O
will	O
result	O
in	O
p	O
.	O
x	O
and	O
p	O
.	O
y	O
having	O
default	O
values	O
)	O
:	O
#	O
li	O
to	O
p	O
.	O
x	O
#	O
li	O
to	O
p	O
.	O
y	O
#	O
li	O
to	O
currentpos	O
Because	O
there	O
is	O
nothing	O
special	O
about	O
these	O
writes	O
in	O
terms	O
of	O
synchronisation	O
/	O
barriers	O
,	O
the	O
runtime	O
is	O
free	O
to	O
allow	O
the	O
T	O
thread	O
see	O
them	O
occur	O
in	O
any	O
order	O
(	O
the	O
main	O
thread	O
of	O
course	O
always	O
sees	O
writes	O
and	O
reads	O
ordered	O
according	O
to	O
programme	O
order	O
)	O
,	O
and	O
occur	O
at	O
any	O
point	O
between	O
the	O
reads	O
in	O
T	O
.	O
So	O
T	O
is	O
doing	O
:	O
#	O
li	O
reads	O
currentpos	O
to	O
p	O
#	O
li	O
read	O
p	O
.	O
x	O
and	O
p	O
.	O
y	O
(	O
in	O
either	O
order	O
)	O
#	O
li	O
compare	O
,	O
and	O
take	O
the	O
branch	O
#	O
li	O
read	O
p	O
.	O
x	O
and	O
p	O
.	O
y	O
(	O
either	O
order	O
)	O
and	O
call	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
Given	O
there	O
'	O
s	O
no	O
ordering	O
relationships	O
between	O
the	O
writes	O
in	O
main	O
,	O
and	O
the	O
reads	O
in	O
T	O
,	O
there	O
are	O
clearly	O
several	O
ways	O
this	O
can	O
produce	O
your	O
result	O
,	O
as	O
T	O
may	O
see	O
main	O
'	O
s	O
write	O
to	O
currentpos	O
before	O
the	O
writes	O
to	O
currentpos	O
.	O
y	O
or	O
currentpos	O
.	O
x	O
:	O
#	O
li	O
It	O
reads	O
currentpos	O
.	O
x	O
first	O
,	O
before	O
the	O
x	O
write	O
has	O
occurred	O
-	O
gets	O
0	O
,	O
then	O
reads	O
currentpos	O
.	O
y	O
before	O
the	O
y	O
write	O
has	O
occurred	O
-	O
gets	O
0	O
.	O
Compare	O
evals	O
to	O
true	O
.	O
The	O
writes	O
become	O
visible	O
to	O
T	O
.	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
is	O
called	O
.	O
#	O
li	O
It	O
reads	O
currentpos	O
.	O
x	O
first	O
,	O
after	O
the	O
x	O
write	O
has	O
occurred	O
,	O
then	O
reads	O
currentpos	O
.	O
y	O
before	O
the	O
y	O
write	O
has	O
occurred	O
-	O
gets	O
0	O
.	O
Compare	O
evals	O
to	O
true	O
.	O
Writes	O
become	O
visible	O
to	O
T	O
.	O
.	O
.	O
etc	O
.	O
#	O
li	O
It	O
reads	O
currentpos	O
.	O
y	O
first	O
,	O
before	O
the	O
y	O
write	O
has	O
occurred	O
(	O
0	O
)	O
,	O
then	O
reads	O
currentpos	O
.	O
x	O
after	O
the	O
x	O
write	O
,	O
evals	O
to	O
true	O
.	O
etc	O
.	O
and	O
so	O
on	O
.	O
.	O
.	O
There	O
are	O
a	O
number	O
of	O
data	O
races	O
here	O
.	O
I	O
suspect	O
the	O
flawed	O
assumption	O
here	O
is	O
thinking	O
that	O
the	O
writes	O
that	O
result	O
from	O
this	O
line	O
are	O
made	O
visible	O
across	O
all	O
the	O
threads	O
in	O
the	O
programme	O
order	O
of	O
the	O
thread	O
executing	O
it	O
:	O
currentPos	O
=	O
new	O
Point	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Java	O
makes	O
no	O
such	O
guarantee	O
(	O
it	O
'	O
d	O
be	O
terrible	O
for	O
performance	O
)	O
.	O
Something	O
more	O
must	O
be	O
added	O
if	O
your	O
programme	O
needs	O
a	O
guaranteed	O
ordering	O
of	O
the	O
writes	O
relative	O
to	O
reads	O
in	O
other	O
threads	O
.	O
Others	O
have	O
suggested	O
making	O
the	O
x	O
,	O
y	O
fields	O
final	O
,	O
or	O
alternatively	O
making	O
currentpos	O
volatile	O
.	O
#	O
li	O
If	O
you	O
make	O
the	O
x	O
,	O
y	O
fields	O
final	O
,	O
then	O
Java	O
guarantees	O
that	O
the	O
writes	O
of	O
their	O
values	O
will	O
be	O
seen	O
to	O
occur	O
before	O
the	O
constructor	O
returns	O
,	O
in	O
all	O
threads	O
.	O
Thus	O
,	O
as	O
the	O
assignment	O
to	O
currentpos	O
is	O
after	O
the	O
constructor	O
,	O
the	O
T	O
thread	O
is	O
guaranteed	O
to	O
see	O
the	O
writes	O
in	O
the	O
correct	O
order	O
.	O
#	O
li	O
If	O
you	O
make	O
currentpos	O
volatile	O
,	O
then	O
Java	O
guarantees	O
that	O
that	O
this	O
is	O
a	O
synchronisation	O
point	O
which	O
will	O
be	O
total	O
-	O
ordered	O
wrt	O
other	O
synchronisation	O
points	O
.	O
As	O
in	O
main	O
the	O
writes	O
to	O
x	O
and	O
y	O
must	O
happen	O
before	O
the	O
write	O
to	O
currentpos	O
,	O
then	O
any	O
read	O
of	O
currentpos	O
in	O
another	O
thread	O
must	O
see	O
also	O
the	O
writes	O
of	O
x	O
,	O
y	O
that	O
happened	O
before	O
.	O
Using	O
final	O
has	O
the	O
advantage	O
that	O
it	O
makes	O
the	O
fields	O
immutable	O
,	O
and	O
thus	O
allows	O
the	O
values	O
to	O
be	O
cached	O
.	O
Using	O
volatile	O
leads	O
to	O
synchronisation	O
on	O
every	O
write	O
and	O
read	O
of	O
currentpos	O
,	O
which	O
might	O
hurt	O
performance	O
.	O
See	O
chapter	O
17	O
of	O
the	O
Java	O
Language	O
Spec	O
for	O
the	O
gory	O
details	O
:	O
#	O
a	O
(	O
Initial	O
answer	O
assumed	O
a	O
weaker	O
memory	O
model	O
,	O
as	O
I	O
was	O
not	O
sure	O
the	O
JLS	O
guaranteed	O
volatile	O
was	O
sufficient	O
.	O
Answer	O
edited	O
to	O
reflect	O
comment	O
from	O
assylias	O
,	O
pointing	O
out	O
the	O
Java	O
model	O
is	O
stronger	O
-	O
happens	O
-	O
before	O
is	O
transitive	O
-	O
and	O
so	O
volatile	O
on	O
currentpos	O
also	O
suffices	O
)	O
.	O
Question	O
-	O
5982447	O
,	O
answer	O
-	O
5982478	O
Use	O
the	O
Set	B-api_mention
#	I-api_mention
toArray	I-api_mention
(	I-api_mention
T	I-api_mention
[	I-api_mention
]	I-api_mention
)	I-api_mention
method	O
taking	O
a	O
typed	O
array	O
argument	O
of	O
the	O
same	O
size	O
.	O
String	B-api_mention
[	O
]	O
GPXFILES1	O
=	O
myset	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
A	O
different	O
size	O
can	O
also	O
,	O
but	O
that	O
would	O
force	O
the	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
create	O
a	O
new	O
array	O
to	O
return	O
instead	O
of	O
reusing	O
the	O
provided	O
argument	O
,	O
which	O
may	O
end	O
up	O
to	O
be	O
less	O
efficient	O
.	O
See	O
also	O
the	O
source	O
code	O
of	O
AbstractCollection	B-api_mention
#	I-api_mention
toArray	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31924845	O
There	O
are	O
almost	O
no	O
good	O
reasons	O
for	O
not	O
using	O
Optional	B-api_mention
as	O
parameters	O
.	O
The	O
arguments	O
against	O
this	O
rely	O
on	O
arguments	O
from	O
authority	O
(	O
see	O
Brian	O
Goetz	O
-	O
his	O
argument	O
is	O
we	O
can	O
'	O
t	O
enforce	O
non	O
null	O
optionals	O
)	O
or	O
that	O
the	O
Optional	B-api_mention
arguments	O
may	O
be	O
null	O
(	O
essentially	O
the	O
same	O
argument	O
)	O
.	O
Of	O
course	O
,	O
any	O
reference	O
in	O
Java	O
can	O
be	O
null	O
,	O
we	O
need	O
to	O
encourage	O
rules	O
being	O
enforced	O
by	O
the	O
compiler	O
,	O
not	O
programmers	O
memory	O
(	O
which	O
is	O
problematic	O
and	O
does	O
not	O
scale	O
)	O
.	O
Functional	O
programming	O
languages	O
encourage	O
Optional	B-api_mention
parameters	O
.	O
One	O
of	O
the	O
best	O
ways	O
of	O
using	O
this	O
is	O
to	O
have	O
multiple	O
optional	O
parameters	O
and	O
using	O
liftM2	O
to	O
use	O
a	O
function	O
assuming	O
the	O
parameters	O
are	O
not	O
empty	O
and	O
returning	O
an	O
optional	O
(	O
see	O
#	O
a	O
)	O
.	O
Java	O
8	O
has	O
unfortunately	O
implemented	O
a	O
very	O
limited	O
library	O
supporting	O
optional	O
.	O
As	O
Java	O
programmers	O
we	O
should	O
only	O
be	O
using	O
null	O
to	O
interact	O
with	O
legacy	O
libraries	O
.	O
Question	O
-	O
22182669	O
,	O
answer	O
-	O
22223113	O
The	O
most	O
common	O
cause	O
of	O
StackOverFlowError	B-api_mention
is	O
excessively	O
deep	O
or	O
infinite	O
recursion	O
.	O
For	O
instance	O
:	O
#	O
pre	O
In	O
Java	O
:	O
There	O
are	O
two	O
areas	O
in	O
memory	O
the	O
heap	O
and	O
stack	O
.	O
The	O
stack	O
memory	O
is	O
used	O
to	O
store	O
local	O
variables	O
and	O
function	O
call	O
,	O
while	O
heap	O
memory	O
is	O
used	O
to	O
store	O
objects	O
in	O
Java	O
.	O
If	O
there	O
is	O
no	O
memory	O
left	O
in	O
stack	O
for	O
storing	O
function	O
call	O
or	O
local	O
variable	O
,	O
JVM	O
will	O
throw	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
StackOverFlowError	I-api_mention
while	O
if	O
there	O
is	O
no	O
more	O
heap	O
space	O
for	O
creating	O
object	O
,	O
JVM	O
will	O
throw	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
OutOfMemoryError	I-api_mention
Question	O
-	O
4812570	O
,	O
answer	O
-	O
21765043	O
You	O
can	O
use	O
the	O
ExceptionUtils	B-api_mention
.	I-api_mention
getStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
from	O
Apache	O
Commons	O
3	O
class	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
commons	I-api_mention
.	I-api_mention
lang3	I-api_mention
.	I-api_mention
exception	I-api_mention
.	I-api_mention
ExceptionUtils	I-api_mention
.	O
#	O
a	O
Question	O
-	O
30217236	O
,	O
answer	O
-	O
30219144	O
Why	O
this	O
should	O
be	O
problem	O
in	O
the	O
first	O
place	O
is	O
kind	O
of	O
nebulous	O
to	O
me	O
.	O
I	O
suspect	O
you	O
'	O
ve	O
instead	O
misunderstood	O
something	O
about	O
the	O
ways	O
in	O
which	O
the	O
type	O
system	O
is	O
useful	O
.	O
What	O
can	O
we	O
do	O
with	O
a	O
<	O
T	O
>	O
void	O
x	O
(	O
args	O
)	O
?	O
Well	O
,	O
not	O
a	O
whole	O
lot	O
.	O
Inside	O
the	O
body	O
of	O
x	O
,	O
T	O
is	O
the	O
same	O
as	O
Object	B-api_mention
,	O
so	O
we	O
could	O
only	O
do	O
something	O
like	O
call	O
toString	O
on	O
a	O
and	O
b	O
to	O
print	O
them	O
.	O
There	O
'	O
s	O
really	O
no	O
practical	O
reason	O
a	O
and	O
b	O
must	O
have	O
the	O
same	O
type	O
.	O
Just	O
that	O
they	O
have	O
some	O
type	O
in	O
common	O
,	O
and	O
that	O
type	O
is	O
Object	B-api_mention
or	O
a	O
subtype	O
of	O
it	O
.	O
In	O
fact	O
,	O
there	O
'	O
s	O
no	O
clear	O
reason	O
why	O
<	O
T	O
>	O
void	O
x	O
(	O
args	O
)	O
actually	O
needs	O
to	O
be	O
generic	O
at	O
all	O
.	O
#	O
li	O
The	O
method	O
body	O
doesn	O
'	O
t	O
care	O
what	O
the	O
actual	O
types	O
of	O
a	O
and	O
b	O
are	O
because	O
it	O
couldn	O
'	O
t	O
use	O
them	O
anyway	O
.	O
#	O
li	O
The	O
call	O
site	O
doesn	O
'	O
t	O
care	O
what	O
the	O
actual	O
types	O
of	O
a	O
and	O
b	O
are	O
because	O
x	O
is	O
a	O
void	O
method	O
so	O
it	O
'	O
s	O
a	O
black	O
hole	O
.	O
It	O
'	O
s	O
more	O
typical	O
for	O
a	O
method	O
to	O
have	O
a	O
result	O
,	O
like	O
<	O
T	O
>	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Arrays	I-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
/	O
/	O
This	O
will	O
cause	O
a	O
compile	O
error	O
because	O
/	O
/	O
the	O
type	O
inferred	O
must	O
be	O
compatible	O
/	O
/	O
with	O
the	O
return	O
assignment	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
r	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
a	O
bound	O
:	O
#	O
pre	O
Or	O
a	O
bound	O
which	O
asserts	O
some	O
kind	O
of	O
relation	O
:	O
#	O
pre	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923042	O
The	O
pattern	O
with	O
Optional	B-api_mention
is	O
for	O
one	O
to	O
avoid	O
returning	O
null	O
.	O
It	O
'	O
s	O
still	O
perfectly	O
possible	O
to	O
pass	O
in	O
null	O
to	O
a	O
method	O
.	O
While	O
these	O
aren	O
'	O
t	O
really	O
official	O
yet	O
,	O
you	O
can	O
use	O
JSR	O
-	O
308	O
style	O
annotations	O
to	O
indicate	O
whether	O
or	O
not	O
you	O
accept	O
null	O
values	O
into	O
the	O
function	O
.	O
Note	O
that	O
you	O
'	O
d	O
have	O
to	O
have	O
the	O
right	O
tooling	O
to	O
actually	O
identify	O
it	O
,	O
and	O
it	O
'	O
d	O
provide	O
more	O
of	O
a	O
static	O
check	O
than	O
an	O
enforceable	O
runtime	O
policy	O
,	O
but	O
it	O
would	O
help	O
.	O
public	O
int	O
calculateSomething	O
(	O
args	O
)	O
{	O
}	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34529067	O
Keep	O
in	O
mind	O
that	O
Java	O
holds	O
a	O
pool	O
of	O
all	O
string	O
literals	O
found	O
in	O
program	O
,	O
used	O
for	O
matching	O
purposes	O
among	O
others	O
,	O
so	O
any	O
different	O
string	O
literal	O
concatenation	O
above	O
will	O
lead	O
to	O
the	O
same	O
object	O
,	O
to	O
the	O
same	O
string	O
literal	O
.	O
You	O
can	O
check	O
out	O
this	O
useful	O
article	O
for	O
more	O
.	O
On	O
the	O
other	O
hand	O
,	O
the	O
concatenation	O
of	O
a	O
String	B-api_mention
object	O
and	O
a	O
literal	O
(	O
case	O
c	O
+	O
StringLiteral	O
)	O
will	O
lead	O
to	O
the	O
creation	O
of	O
a	O
as	O
StringBuilder	B-api_mention
object	O
at	O
runtime	O
,	O
different	O
to	O
the	O
literals	O
found	O
in	O
pool	O
.	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571358	O
Try	O
using	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
It	O
returns	O
a	O
byte	O
[	O
]	O
representing	O
string	O
data	O
.	O
Example	O
:	O
#	O
pre	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
22676782	O
Despite	O
@	O
Saint	O
Hill	O
'	O
s	O
answer	O
if	O
you	O
consider	O
the	O
time	O
complexity	O
of	O
str	O
.	B-api_mention
toCharArray	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
the	O
first	O
one	O
is	O
faster	O
even	O
for	O
very	O
large	O
strings	O
.	O
You	O
can	O
run	O
the	O
code	O
below	O
to	O
see	O
it	O
for	O
yourself	O
.	O
#	O
pre	O
output	O
:	O
#	O
pre	O
Question	O
-	O
34172978	O
#	O
pre	O
Counter	O
to	O
my	O
expectation	O
,	O
the	O
collect	O
call	O
never	O
returns	O
.	O
Setting	O
limit	O
before	O
filter	O
produces	O
the	O
expected	O
result	O
.	O
Why	O
?	O
Question	O
-	O
18777989	O
,	O
answer	O
-	O
37905386	O
Many	O
junior	O
developers	O
make	O
the	O
mistake	O
of	O
thinking	O
of	O
interfaces	O
,	O
abstract	O
and	O
concrete	O
classes	O
as	O
slight	O
variations	O
of	O
the	O
same	O
thing	O
,	O
and	O
choose	O
one	O
of	O
them	O
purely	O
on	O
technical	O
grounds	O
:	O
Do	O
I	O
need	O
multiple	O
inheritance	O
?	O
Do	O
I	O
need	O
some	O
place	O
to	O
put	O
common	O
methods	O
?	O
Do	O
I	O
need	O
to	O
bother	O
with	O
something	O
other	O
than	O
just	O
a	O
concrete	O
class	O
?	O
This	O
is	O
wrong	O
,	O
and	O
hidden	O
in	O
these	O
questions	O
is	O
the	O
main	O
problem	O
:	O
"	O
I	O
"	O
.	O
When	O
you	O
write	O
code	O
for	O
yourself	O
,	O
by	O
yourself	O
,	O
you	O
rarely	O
think	O
of	O
other	O
present	O
or	O
future	O
developers	O
working	O
on	O
or	O
with	O
your	O
code	O
.	O
Interfaces	O
and	O
abstract	O
classes	O
,	O
although	O
apparently	O
similar	O
from	O
a	O
technical	O
point	O
of	O
view	O
,	O
have	O
completely	O
different	O
meanings	O
and	O
purposes	O
.	O
Summary	O
#	O
li	O
An	O
interface	O
defines	O
a	O
contract	O
that	O
some	O
implementation	O
will	O
fulfill	O
for	O
you	O
.	O
#	O
li	O
An	O
abstract	O
class	O
provides	O
a	O
default	O
behavior	O
that	O
your	O
implementation	O
can	O
reuse	O
.	O
These	O
two	O
points	O
above	O
is	O
what	O
I	O
'	O
m	O
looking	O
for	O
when	O
interviewing	O
,	O
and	O
is	O
a	O
compact	O
enough	O
summary	O
.	O
Read	O
on	O
for	O
more	O
details	O
.	O
Alternative	O
summary	O
#	O
li	O
An	O
interface	O
is	O
for	O
defining	O
public	O
APIs	O
#	O
li	O
An	O
abstract	O
class	O
is	O
for	O
internal	O
use	O
,	O
and	O
for	O
defining	O
SPIs	O
By	O
example	O
To	O
put	O
it	O
differently	O
:	O
A	O
concrete	O
class	O
does	O
the	O
actual	O
work	O
,	O
in	O
a	O
very	O
specific	O
way	O
.	O
For	O
example	O
,	O
an	O
ArrayList	B-api_mention
uses	O
a	O
contiguous	O
area	O
of	O
memory	O
to	O
store	O
a	O
list	O
of	O
objects	O
in	O
a	O
compact	O
manner	O
which	O
offers	O
fast	O
random	O
access	O
,	O
iteration	O
,	O
and	O
in	O
-	O
place	O
changes	O
,	O
but	O
is	O
terrible	O
at	O
insertions	O
,	O
deletions	O
,	O
and	O
occasionally	O
even	O
additions	O
;	O
meanwhile	O
,	O
a	O
LinkedList	B-api_mention
uses	O
double	O
-	O
linked	O
nodes	O
to	O
store	O
a	O
list	O
of	O
objects	O
,	O
which	O
instead	O
offers	O
fast	O
iteration	O
,	O
in	O
-	O
place	O
changes	O
,	O
and	O
insertion	O
/	O
deletion	O
/	O
addition	O
,	O
but	O
is	O
terrible	O
at	O
random	O
access	O
.	O
These	O
two	O
types	O
of	O
lists	O
are	O
optimized	O
for	O
different	O
use	O
cases	O
,	O
and	O
it	O
matters	O
a	O
lot	O
how	O
you	O
'	O
re	O
going	O
to	O
use	O
them	O
.	O
When	O
you	O
'	O
re	O
trying	O
to	O
squeeze	O
performance	O
out	O
of	O
a	O
list	O
that	O
you	O
'	O
re	O
heavily	O
interacting	O
with	O
,	O
and	O
when	O
picking	O
the	O
type	O
of	O
list	O
is	O
up	O
to	O
you	O
,	O
you	O
should	O
carefully	O
pick	O
which	O
one	O
you	O
'	O
re	O
instantiating	O
.	O
On	O
the	O
other	O
hand	O
,	O
high	O
level	O
users	O
of	O
a	O
list	O
don	O
'	O
t	O
really	O
care	O
how	O
it	O
is	O
actually	O
implemented	O
,	O
and	O
they	O
should	O
be	O
insulated	O
from	O
these	O
details	O
.	O
Let	O
'	O
s	O
imagine	O
that	O
Java	O
didn	O
'	O
t	O
expose	O
the	O
List	B-api_mention
interface	O
,	O
but	O
only	O
had	O
a	O
concrete	O
List	B-api_mention
class	O
that	O
'	O
s	O
actually	O
what	O
LinkedList	B-api_mention
is	O
right	O
now	O
.	O
All	O
Java	O
developers	O
would	O
have	O
tailored	O
their	O
code	O
to	O
fit	O
the	O
implementation	O
details	O
:	O
avoid	O
random	O
access	O
,	O
add	O
a	O
cache	O
to	O
speed	O
up	O
access	O
,	O
or	O
just	O
reimplement	O
ArrayList	B-api_mention
on	O
their	O
own	O
,	O
although	O
it	O
would	O
be	O
incompatible	O
with	O
all	O
the	O
other	O
code	O
that	O
actually	O
works	O
with	O
List	B-api_mention
only	O
.	O
That	O
would	O
be	O
terrible	O
.	O
.	O
.	O
But	O
now	O
imagine	O
that	O
the	O
Java	O
masters	O
actually	O
realize	O
that	O
a	O
linked	O
list	O
is	O
terrible	O
for	O
most	O
actual	O
use	O
cases	O
,	O
and	O
decided	O
to	O
switch	O
over	O
to	O
an	O
array	O
list	O
for	O
their	O
only	O
List	B-api_mention
class	O
available	O
.	O
This	O
would	O
affect	O
the	O
performance	O
of	O
every	O
Java	O
program	O
in	O
the	O
world	O
,	O
and	O
people	O
wouldn	O
'	O
t	O
be	O
happy	O
about	O
it	O
.	O
And	O
the	O
main	O
culprit	O
is	O
that	O
implementation	O
details	O
were	O
available	O
,	O
and	O
the	O
developers	O
assumed	O
that	O
those	O
details	O
are	O
a	O
permanent	O
contract	O
that	O
they	O
can	O
rely	O
on	O
.	O
This	O
is	O
why	O
it	O
'	O
s	O
important	O
to	O
hide	O
implementation	O
details	O
,	O
and	O
only	O
define	O
an	O
abstract	O
contract	O
.	O
This	O
is	O
the	O
purpose	O
of	O
an	O
interface	O
:	O
define	O
what	O
kind	O
of	O
input	O
a	O
method	O
accepts	O
,	O
and	O
what	O
kind	O
of	O
output	O
is	O
expected	O
,	O
without	O
exposing	O
all	O
the	O
guts	O
that	O
would	O
tempt	O
programmers	O
to	O
tweak	O
their	O
code	O
to	O
fit	O
the	O
internal	O
details	O
that	O
might	O
change	O
with	O
any	O
future	O
update	O
.	O
An	O
abstract	O
class	O
is	O
in	O
the	O
middle	O
between	O
interfaces	O
and	O
concrete	O
classes	O
.	O
It	O
is	O
supposed	O
to	O
help	O
implementations	O
share	O
common	O
or	O
boring	O
code	O
.	O
For	O
example	O
,	O
AbstractCollection	B-api_mention
provides	O
basic	O
implementations	O
for	O
isEmpty	B-api_mention
based	O
on	O
size	O
is	O
0	O
,	O
contains	B-api_mention
as	O
iterate	O
and	O
compare	O
,	O
addAll	B-api_mention
as	O
repeated	O
add	B-api_mention
,	O
and	O
so	O
on	O
.	O
This	O
lets	O
implementations	O
focus	O
on	O
the	O
crucial	O
parts	O
that	O
differentiate	O
between	O
them	O
:	O
how	O
to	O
actually	O
store	O
and	O
retrieve	O
data	O
.	O
Another	O
perspective	O
:	O
APIs	O
versus	O
SPIs	O
Interfaces	O
are	O
low	O
-	O
cohesion	O
gateways	O
between	O
different	O
parts	O
of	O
code	O
.	O
They	O
allow	O
libraries	O
to	O
exist	O
and	O
evolve	O
without	O
breaking	O
every	O
library	O
user	O
when	O
something	O
changes	O
internally	O
.	O
It	O
'	O
s	O
called	O
Application	O
Programming	O
Interface	O
Abstract	O
classes	O
are	O
high	O
-	O
cohesion	O
helpers	O
to	O
be	O
used	O
when	O
implementing	O
an	O
interface	O
,	O
assuming	O
some	O
level	O
of	O
implementation	O
details	O
.	O
Alternatively	O
,	O
abstract	O
classes	O
are	O
used	O
for	O
defining	O
SPIs	O
,	O
Service	O
Provider	O
Interfaces	O
.	O
The	O
difference	O
between	O
an	O
API	O
and	O
an	O
SPI	O
is	O
subtle	O
,	O
but	O
important	O
:	O
for	O
an	O
API	O
,	O
the	O
focus	O
is	O
on	O
who	O
uses	O
it	O
,	O
and	O
for	O
an	O
SPI	O
the	O
focus	O
is	O
on	O
who	O
implements	O
it	O
.	O
Adding	O
methods	O
to	O
an	O
API	O
is	O
easy	O
,	O
all	O
existing	O
users	O
of	O
the	O
API	O
will	O
still	O
compile	O
.	O
Adding	O
methods	O
to	O
an	O
SPI	O
is	O
hard	O
,	O
since	O
every	O
service	O
provider	O
(	O
concrete	O
implementation	O
)	O
will	O
have	O
to	O
implement	O
the	O
new	O
methods	O
.	O
If	O
interfaces	O
are	O
used	O
to	O
define	O
an	O
SPI	O
,	O
a	O
provider	O
will	O
have	O
to	O
release	O
a	O
new	O
version	O
whenever	O
the	O
SPI	O
contract	O
changes	O
.	O
If	O
abstract	O
classes	O
are	O
used	O
instead	O
,	O
new	O
methods	O
could	O
either	O
be	O
defined	O
in	O
terms	O
of	O
existing	O
abstract	O
methods	O
,	O
or	O
as	O
empty	O
throw	O
not	O
implemented	O
exception	O
stubs	O
,	O
which	O
will	O
at	O
least	O
allow	O
an	O
older	O
version	O
of	O
a	O
service	O
implementation	O
to	O
still	O
compile	O
and	O
run	O
.	O
A	O
note	O
on	O
Java	O
8	O
and	O
default	O
methods	O
Although	O
Java	O
8	O
introduced	O
default	O
methods	O
for	O
interfaces	O
,	O
which	O
makes	O
the	O
line	O
between	O
interfaces	O
and	O
abstract	O
classes	O
even	O
blurrier	O
,	O
this	O
wasn	O
'	O
t	O
so	O
that	O
implementations	O
can	O
reuse	O
code	O
,	O
but	O
to	O
make	O
it	O
easier	O
to	O
change	O
interfaces	O
that	O
serve	O
both	O
as	O
an	O
API	O
and	O
as	O
an	O
SPI	O
(	O
or	O
are	O
wrongly	O
used	O
for	O
defining	O
SPIs	O
instead	O
of	O
abstract	O
classes	O
)	O
.	O
"	O
Book	O
knowledge	O
"	O
The	O
technical	O
details	O
provided	O
in	O
the	O
OP	O
'	O
s	O
answer	O
are	O
considered	O
"	O
book	O
knowledge	O
"	O
because	O
this	O
is	O
usually	O
the	O
approach	O
used	O
in	O
school	O
and	O
in	O
most	O
technology	O
books	O
about	O
a	O
language	O
:	O
what	O
a	O
thing	O
is	O
,	O
not	O
how	O
to	O
use	O
it	O
in	O
practice	O
,	O
especially	O
in	O
large	O
scale	O
applications	O
.	O
Here	O
'	O
s	O
an	O
analogy	O
:	O
supposed	O
the	O
question	O
was	O
:	O
#	O
blockquote	O
The	O
technical	O
answer	O
sounds	O
like	O
:	O
#	O
blockquote	O
That	O
is	O
all	O
true	O
,	O
but	O
completely	O
misses	O
the	O
points	O
that	O
they	O
are	O
two	O
completely	O
different	O
things	O
,	O
and	O
both	O
can	O
be	O
used	O
at	O
the	O
same	O
time	O
for	O
different	O
purposes	O
,	O
and	O
the	O
"	O
doing	O
it	O
"	O
aspect	O
is	O
not	O
the	O
most	O
important	O
thing	O
about	O
either	O
of	O
the	O
two	O
options	O
.	O
The	O
answer	O
lacks	O
perspective	O
,	O
it	O
shows	O
an	O
immature	O
way	O
of	O
thinking	O
,	O
while	O
correctly	O
presenting	O
true	O
"	O
facts	O
"	O
.	O
Question	O
-	O
22725537	O
,	O
answer	O
-	O
22735184	O
You	O
cannot	O
do	O
it	O
more	O
concise	O
as	O
you	O
are	O
already	O
doing	O
.	O
You	O
claim	O
that	O
you	O
do	O
not	O
want	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
has	O
been	O
resolved	O
by	O
the	O
method	O
@	O
StuartMarks	O
describes	O
,	O
however	O
as	O
a	O
result	O
you	O
now	O
map	O
it	O
to	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
so	O
now	O
you	O
need	O
to	O
use	O
.	B-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
end	O
.	O
So	O
it	O
still	O
consists	O
of	O
two	O
statements	O
and	O
you	O
can	O
now	O
get	O
exceptions	O
with	O
the	O
new	O
method	O
!	O
Because	O
,	O
what	O
if	O
every	O
optional	O
is	O
empty	O
?	O
Then	O
the	O
findFirst	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
an	O
empty	O
optional	O
and	O
your	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
fail	O
!	O
So	O
what	O
you	O
have	O
:	O
things	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
is	O
actually	O
the	O
best	O
way	O
to	O
accomplish	O
what	O
you	O
want	O
,	O
and	O
that	O
is	O
you	O
want	O
to	O
save	O
the	O
result	O
as	O
a	O
T	B-api_mention
,	O
not	O
as	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
I	O
took	O
the	O
liberty	O
of	O
creating	O
a	O
CustomOptional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
class	O
that	O
wraps	O
the	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
and	O
provides	O
an	O
extra	O
method	O
,	O
flatStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Note	O
that	O
you	O
cannot	O
extend	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
:	O
#	O
pre	O
You	O
will	O
see	O
that	O
I	O
added	O
flatStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
as	O
here	O
:	O
#	O
pre	O
Used	O
as	O
:	O
String	B-api_mention
result	O
=	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
still	O
will	O
need	O
to	O
return	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
here	O
,	O
as	O
you	O
cannot	O
return	O
T	B-api_mention
,	O
because	O
if	O
!	O
optional	O
.	B-api_mention
isPresent	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
then	O
T	O
=	O
=	O
null	O
if	O
you	O
declare	O
it	O
such	O
,	O
but	O
then	O
your	O
.	B-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
attempt	O
to	O
add	O
null	O
to	O
a	O
stream	O
and	O
that	O
is	O
not	O
possible	O
.	O
As	O
example	O
:	O
#	O
pre	O
Used	O
as	O
:	O
String	B-api_mention
result	O
=	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
map	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	B-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Will	O
now	O
throw	O
a	O
NullPointerException	B-api_mention
inside	O
the	O
stream	O
operations	O
.	O
Conclusion	O
The	O
method	O
you	O
used	O
,	O
is	O
actually	O
the	O
best	O
method	O
.	O
Question	O
-	O
33147339	O
I	O
was	O
reading	O
Java	O
'	O
s	O
ArrayList	B-api_mention
source	O
code	O
and	O
noticed	O
some	O
comparisons	O
in	O
if	O
-	O
statements	O
.	O
In	O
Java	O
7	O
,	O
the	O
method	O
grow	B-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
uses	O
if	O
(	O
args	O
)	O
newCapacity	O
=	O
minCapacity	O
;	O
In	O
Java	O
6	O
,	O
grow	O
didn	O
'	O
t	O
exist	O
.	O
The	O
method	O
ensureCapacity	O
(	O
int	O
)	O
however	O
uses	O
if	O
(	O
args	O
)	O
newCapacity	O
=	O
minCapacity	O
;	O
What	O
was	O
the	O
reason	O
behind	O
the	O
change	O
?	O
Was	O
it	O
a	O
performance	O
issue	O
or	O
just	O
a	O
style	O
?	O
I	O
could	O
imagine	O
that	O
comparing	O
against	O
zero	O
is	O
faster	O
,	O
but	O
performing	O
a	O
complete	O
subtraction	O
just	O
to	O
check	O
whether	O
it	O
'	O
s	O
negative	O
seems	O
a	O
bit	O
overkill	O
to	O
me	O
.	O
Also	O
in	O
terms	O
of	O
bytecode	O
,	O
this	O
would	O
involve	O
two	O
instructions	O
(	O
ISUB	O
and	O
IF	O
_	O
ICMPGE	O
)	O
instead	O
of	O
one	O
(	O
IFGE	O
)	O
.	O
Question	O
-	O
5694385	O
,	O
answer	O
-	O
5694473	O
Create	O
a	O
File	B-api_mention
object	O
,	O
passing	O
the	O
directory	O
path	O
to	O
the	O
constructor	O
.	O
Use	O
the	O
listFiles	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
retrieve	O
an	O
array	O
of	O
File	B-api_mention
objects	O
for	O
each	O
file	O
in	O
the	O
directory	O
,	O
and	O
then	O
call	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
get	O
the	O
filename	O
.	O
#	O
pre	O
Question	O
-	O
16098046	O
,	O
answer	O
-	O
25307973	O
In	O
short	O
:	O
If	O
you	O
want	O
to	O
get	O
rid	O
of	O
trailing	O
zeros	O
and	O
Locale	O
problems	O
,	O
then	O
you	O
should	O
use	O
:	O
#	O
pre	O
Explanation	O
:	O
Why	O
other	O
answers	O
did	O
not	O
suit	O
me	O
:	O
#	O
li	O
Double	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
or	O
FloatingDecimal	B-api_mention
.	I-api_mention
toJavaFormatString	I-api_mention
uses	O
scientific	O
notations	O
if	O
double	O
is	O
less	O
than	O
10	O
^	O
-	O
3	O
or	O
greater	O
than	O
or	O
equal	O
to	O
10	O
^	O
7	O
#	O
li	O
by	O
using	O
%	O
f	O
,	O
the	O
default	O
decimal	O
precision	O
is	O
6	O
,	O
otherwise	O
you	O
can	O
hardcode	O
it	O
but	O
it	O
results	O
in	O
extra	O
zeros	O
added	O
if	O
you	O
have	O
less	O
decimals	O
.	O
Example	O
:	O
#	O
pre	O
#	O
li	O
by	O
using	O
setMaximumFractionDigits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
%	O
.	O
0f	O
you	O
remove	O
any	O
decimal	O
precision	O
,	O
which	O
is	O
fine	O
for	O
integers	O
/	O
longs	O
but	O
not	O
for	O
double	O
#	O
pre	O
#	O
li	O
by	O
using	O
DecimalFormat	B-api_mention
,	O
you	O
are	O
local	O
dependent	O
.	O
In	O
French	O
locale	O
,	O
the	O
decimal	O
separator	O
is	O
a	O
comma	O
,	O
not	O
a	O
point	O
:	O
#	O
pre	O
Using	O
the	O
ENGLISH	O
locale	O
makes	O
sure	O
you	O
get	O
a	O
point	O
for	O
decimal	O
separator	O
,	O
wherever	O
your	O
program	O
will	O
run	O
Why	O
using	O
340	O
then	O
for	O
setMaximumFractionDigits	B-api_mention
?	O
Two	O
reasons	O
:	O
#	O
li	O
setMaximumFractionDigits	B-api_mention
accepts	O
an	O
integer	O
but	O
its	O
implementation	O
has	O
a	O
maximum	O
digits	O
allowed	O
of	O
DecimalFormat	B-api_mention
.	I-api_mention
DOUBLE	I-api_mention
_	I-api_mention
FRACTION	I-api_mention
_	I-api_mention
DIGITS	I-api_mention
which	O
equals	O
340	O
#	O
li	O
Double	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
=	O
4	O
.	O
9E	O
-	O
324	O
so	O
with	O
340	O
digits	O
you	O
are	O
sure	O
not	O
to	O
round	O
your	O
double	O
and	O
loose	O
precision	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
17397548	O
As	O
for	O
the	O
code	O
example	O
in	O
the	O
question	O
,	O
the	O
standard	O
solution	O
is	O
to	O
reference	O
the	O
class	O
explicitly	O
by	O
its	O
name	O
,	O
and	O
it	O
is	O
even	O
possible	O
to	O
do	O
without	O
getClassLoader	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
:	O
#	O
pre	O
This	O
approach	O
still	O
has	O
a	O
back	O
side	O
that	O
it	O
is	O
not	O
very	O
safe	O
against	O
copy	O
/	O
paste	O
errors	O
in	O
case	O
you	O
need	O
to	O
replicate	O
this	O
code	O
to	O
a	O
number	O
of	O
similar	O
classes	O
.	O
And	O
as	O
for	O
the	O
exact	O
question	O
in	O
the	O
headline	O
,	O
there	O
is	O
a	O
trick	O
posted	O
in	O
the	O
adjacent	O
thread	O
:	O
Class	B-api_mention
currentClass	O
=	O
new	O
Object	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
}	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getEnclosingClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
It	O
uses	O
a	O
nested	O
anonymous	O
Object	B-api_mention
subclass	O
to	O
get	O
hold	O
of	O
the	O
execution	O
context	O
.	O
This	O
trick	O
has	O
a	O
benefit	O
of	O
being	O
copy	O
/	O
paste	O
safe	O
.	O
.	O
.	O
It	O
may	O
be	O
also	O
worth	O
noting	O
that	O
if	O
this	O
snippet	O
is	O
shaped	O
as	O
a	O
static	O
method	O
of	O
some	O
base	O
class	O
,	O
then	O
currenClass	O
value	O
will	O
always	O
be	O
a	O
reference	O
to	O
that	O
base	O
class	O
rather	O
than	O
to	O
any	O
subclass	O
that	O
may	O
be	O
using	O
that	O
method	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148619	O
use	O
int	O
as	O
Object	B-api_mention
not	O
as	O
primitive	O
type	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
32714194	O
,	O
answer	O
-	O
32714222	O
+	O
is	O
implemented	O
in	O
java	O
compilers	O
.	O
The	O
compiler	O
replaces	O
String	B-api_mention
+	O
String	B-api_mention
with	O
either	O
compile	O
time	O
constants	O
or	O
StringBuilder	B-api_mention
code	O
.	O
Note	O
that	O
this	O
applies	O
to	O
primitives	O
too	O
.	O
i	O
.	O
e	O
,	O
int	O
i	O
=	O
1	O
+	O
2	O
could	O
get	O
directly	O
replaced	O
to	O
int	O
i	O
=	O
3	O
during	O
compilation	O
itself	O
.	O
Question	O
-	O
28770822	O
,	O
answer	O
-	O
28853754	O
TLDR	O
:	O
Jump	O
to	O
the	O
conclusion	O
#	O
blockquote	O
A	O
brief	O
history	O
of	O
@	O
Native	O
I	O
made	O
some	O
search	O
on	O
the	O
mailing	O
lists	O
.	O
I	O
found	O
some	O
interesting	O
things	O
.	O
At	O
first	O
an	O
annotation	O
(	O
1	O
2	O
)	O
javax	O
.	O
tools	O
.	O
annotation	O
.	O
ForceNativeHeader	O
was	O
introduced	O
to	O
#	O
blockquote	O
It	O
is	O
used	O
by	O
com	O
.	O
sun	O
.	O
tools	O
.	O
javac	O
.	O
processing	O
.	O
NativeapiVisitor	O
.	O
By	O
looking	O
at	O
the	O
code	O
we	O
can	O
see	O
that	O
the	O
native	O
header	O
is	O
generated	O
if	O
the	O
class	O
declare	O
some	O
native	O
methods	O
or	O
if	O
the	O
class	O
is	O
annotated	O
@	O
ForceNativeHeader	O
.	O
Later	O
this	O
annotation	O
was	O
renamed	O
to	O
GenerateNativeHeader	O
(	O
1	O
2	O
)	O
.	O
Then	O
this	O
annotation	O
was	O
added	O
to	O
several	O
types	O
(	O
especially	O
Integer	B-api_mention
and	O
Long	B-api_mention
)	O
with	O
an	O
interresting	O
comment	O
:	O
#	O
pre	O
But	O
by	O
adding	O
this	O
annotation	O
it	O
add	O
a	O
problematic	O
dependency	O
from	O
base	O
module	O
to	O
the	O
module	O
containing	O
javax	O
.	O
tools	O
.	O
So	O
the	O
annotation	O
were	O
removed	O
from	O
Integer	B-api_mention
and	O
Long	B-api_mention
and	O
these	O
files	O
were	O
explicitly	O
added	O
to	O
the	O
build	O
process	O
since	O
the	O
header	O
were	O
no	O
more	O
automatically	O
generated	O
.	O
.	O
.	O
a	O
"	O
(	O
hopefully	O
temporary	O
)	O
hack	O
"	O
.	O
So	O
a	O
new	O
annotation	O
java	O
.	O
lang	O
.	O
annotation	O
.	O
Native	O
was	O
created	O
and	O
used	O
in	O
Integer	B-api_mention
and	O
Long	B-api_mention
.	O
The	O
annotation	O
was	O
set	O
a	O
TargetType	O
FIELD	O
.	O
#	O
blockquote	O
All	O
the	O
purpose	O
of	O
this	O
stuff	O
is	O
:	O
#	O
blockquote	O
It	O
is	O
the	O
case	O
of	O
Integer	B-api_mention
and	O
Long	B-api_mention
this	O
was	O
a	O
part	O
of	O
the	O
JEP	O
139	O
:	O
Enhance	O
javac	O
to	O
Improve	O
Build	O
Speed	O
:	O
#	O
blockquote	O
A	O
basic	O
experimentation	O
I	O
made	O
a	O
basic	O
experimentation	O
on	O
the	O
JDK	O
.	O
I	O
clone	O
the	O
open	O
-	O
jdk	O
forest	O
and	O
i	O
successfully	O
build	O
it	O
.	O
As	O
expected	O
the	O
header	O
files	O
where	O
generated	O
for	O
Integer	B-api_mention
and	O
Long	B-api_mention
(	O
thanks	O
to	O
@	O
Native	O
)	O
and	O
for	O
Float	B-api_mention
and	O
Double	B-api_mention
(	O
thanks	O
to	O
their	O
native	O
methods	O
)	O
but	O
not	O
for	O
Byte	B-api_mention
,	O
Short	B-api_mention
.	O
.	O
.	O
#	O
pre	O
Then	O
i	O
tried	O
to	O
remove	O
the	O
@	O
Native	O
from	O
the	O
Integer	B-api_mention
fields	O
and	O
i	O
tried	O
to	O
build	O
again	O
the	O
jdk	O
but	O
i	O
get	O
an	O
error	O
:	O
#	O
pre	O
logically	O
since	O
the	O
header	O
have	O
not	O
been	O
generated	O
.	O
I	O
have	O
also	O
confirmed	O
that	O
java	O
_	O
lang	O
_	O
Integer	O
.	O
h	O
is	O
included	O
in	O
several	O
c	O
and	O
cpp	O
files	O
:	O
#	O
pre	O
like	O
Long	B-api_mention
#	O
pre	O
like	O
Float	B-api_mention
#	O
pre	O
and	O
like	O
Double	B-api_mention
#	O
pre	O
but	O
neither	O
Short	B-api_mention
find	O
.	O
\	O
(	O
-	O
name	O
StringLiteral	O
-	O
o	O
-	O
name	O
StringLiteral	O
\	O
)	O
-	O
exec	O
grep	O
StringLiteral	O
{	O
}	O
\	O
;	O
-	O
print	O
nor	O
Byte	B-api_mention
,	O
nor	O
Character	B-api_mention
.	O
Conclusion	O
Among	O
all	O
these	O
types	O
,	O
only	O
Integer	B-api_mention
,	O
Long	B-api_mention
,	O
Float	B-api_mention
,	O
Double	B-api_mention
are	O
used	O
in	O
the	O
native	O
source	O
code	O
of	O
the	O
jdk	O
.	O
And	O
only	O
the	O
Integer	B-api_mention
and	O
Long	B-api_mention
fields	O
are	O
annotated	O
with	O
@	O
Native	O
because	O
they	O
have	O
no	O
native	O
methods	O
(	O
as	O
opposed	O
to	O
Float	B-api_mention
and	O
Double	B-api_mention
)	O
Question	O
-	O
5455794	O
,	O
answer	O
-	O
5455809	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
removes	O
all	O
whitespaces	O
and	O
non	O
-	O
visible	O
characters	O
(	O
e	O
.	O
g	O
.	O
,	O
tab	O
,	O
\	O
n	O
)	O
.	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
produce	O
the	O
same	O
result	O
.	O
The	O
second	O
regex	O
is	O
20	O
%	O
faster	O
than	O
the	O
first	O
one	O
,	O
but	O
as	O
the	O
number	O
consecutive	O
spaces	O
increases	O
,	O
the	O
first	O
one	O
performs	O
better	O
than	O
the	O
second	O
one	O
.	O
Assign	O
the	O
value	O
to	O
a	O
variable	O
,	O
if	O
not	O
used	O
directly	O
:	O
st	O
=	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
23699371	O
In	O
Java	O
8	O
how	O
can	O
I	O
filter	O
a	O
collection	O
using	O
the	O
Stream	B-api_mention
API	O
by	O
checking	O
the	O
distinctness	O
of	O
a	O
property	O
of	O
each	O
object	O
?	O
For	O
example	O
I	O
have	O
a	O
list	O
of	O
Person	B-api_mention
object	O
and	O
I	O
want	O
to	O
remove	O
people	O
with	O
the	O
same	O
name	O
,	O
persons	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
distinct	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Will	O
use	O
the	O
default	O
equality	O
check	O
for	O
a	O
Person	B-api_mention
object	O
,	O
so	O
I	O
need	O
something	O
like	O
,	O
persons	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
distinct	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Unfortunately	O
the	O
distinct	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
no	O
such	O
overload	O
.	O
Without	O
modifying	O
the	O
equality	O
check	O
inside	O
the	O
Person	O
class	O
is	O
it	O
possible	O
to	O
do	O
this	O
succinctly	O
?	O
Question	O
-	O
24609564	O
,	O
answer	O
-	O
24609841	O
If	O
you	O
will	O
read	O
comment	O
above	O
the	O
code	O
,	O
It	O
is	O
mentioned	O
that	O
.	O
.	O
.	O
If	O
the	O
caller	O
is	O
not	O
a	O
ForkJoinTask	B-api_mention
,	O
this	O
method	O
is	O
behaviorally	O
equivalent	O
to	O
#	O
pre	O
So	O
it	O
is	O
just	O
another	O
form	O
to	O
implement	O
above	O
code	O
in	O
else	O
part	O
.	O
.	O
.	O
!	O
!	O
In	O
Style	O
notes	O
it	O
is	O
mentioned	O
that	O
,	O
#	O
blockquote	O
And	O
if	O
you	O
will	O
see	O
implementation	O
of	O
ManagedLocker	B-api_mention
#	I-api_mention
isReleasable	I-api_mention
,	O
It	O
is	O
updating	O
the	O
lock	O
and	O
returns	O
true	O
if	O
blocking	O
is	O
unnecessary	O
.	O
Interpretation	O
:	O
Blank	O
while	O
loops	O
are	O
used	O
to	O
provide	O
an	O
interrupt	O
until	O
some	O
condition	O
reset	O
to	O
true	O
/	O
false	O
.	O
Here	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
is	O
a	O
blocker	O
/	O
interrupt	O
until	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
true	O
when	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
false	O
.	O
Loop	O
will	O
continue	O
execution	O
while	O
blocker	O
is	O
not	O
releasable	O
(	O
!	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
and	O
blocker	O
is	O
not	O
blocked	O
!	O
!	O
Execution	O
will	O
be	O
out	O
of	O
loop	O
as	O
soon	O
as	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
set	O
to	O
true	O
.	O
Note	O
that	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
does	O
not	O
update	O
CAS	O
variable	O
,	O
but	O
it	O
guarantee	O
that	O
program	O
will	O
wait	O
until	O
variable	O
gets	O
updated	O
(	O
force	O
to	O
wait	O
until	O
variable	O
gets	O
updated	O
)	O
.	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
17909134	O
I	O
can	O
see	O
many	O
answers	O
showing	O
how	O
to	O
solve	O
problem	O
,	O
but	O
only	O
Stephen	O
'	O
s	O
answer	O
is	O
trying	O
to	O
explain	O
why	O
problem	O
occurs	O
so	O
I	O
will	O
try	O
to	O
add	O
something	O
more	O
on	O
this	O
subject	O
.	O
It	O
is	O
a	O
story	O
about	O
possible	O
reasons	O
why	O
Object	B-api_mention
[	O
]	O
toArray	B-api_mention
wasn	O
'	O
t	O
changed	O
to	O
T	O
[	O
]	O
toArray	B-api_mention
where	O
generics	O
ware	O
introduced	O
to	O
Java	O
.	O
Why	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
(	O
String	B-api_mention
[	O
]	O
)	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
wont	O
work	O
?	O
In	O
Java	O
,	O
generic	O
type	O
exists	O
at	O
compile	O
-	O
time	O
only	O
.	O
At	O
runtime	O
information	O
about	O
generic	O
type	O
(	O
like	O
in	O
your	O
case	O
<	O
String	B-api_mention
>	O
)	O
is	O
removed	O
and	O
replaced	O
with	O
Object	B-api_mention
type	O
(	O
take	O
a	O
look	O
at	O
type	O
erasure	O
)	O
.	O
That	O
is	O
why	O
at	O
runtime	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
have	O
no	O
idea	O
about	O
what	O
precise	O
type	O
to	O
use	O
to	O
create	O
new	O
array	O
,	O
so	O
it	O
uses	O
Object	B-api_mention
as	O
safest	O
type	O
,	O
because	O
each	O
class	O
extends	O
Object	B-api_mention
so	O
it	O
can	O
safely	O
store	O
instance	O
of	O
any	O
class	O
.	O
Now	O
the	O
problem	O
is	O
that	O
you	O
can	O
'	O
t	O
cast	O
instance	O
of	O
Object	B-api_mention
[	O
]	O
to	O
String	B-api_mention
[	O
]	O
.	O
Why	O
?	O
Take	O
a	O
look	O
at	O
this	O
example	O
(	O
lets	O
assume	O
that	O
class	O
B	O
extends	O
A	O
)	O
:	O
#	O
pre	O
Although	O
such	O
code	O
will	O
compile	O
,	O
at	O
runtime	O
we	O
will	O
see	O
thrown	O
ClassCastException	B-api_mention
because	O
instance	O
held	O
by	O
reference	O
a	O
is	O
not	O
actually	O
of	O
type	O
B	O
(	O
or	O
its	O
subtypes	O
)	O
.	O
Why	O
is	O
this	O
problem	O
(	O
why	O
this	O
exception	O
needs	O
to	O
be	O
cast	O
)	O
?	O
One	O
of	O
the	O
reasons	O
is	O
that	O
B	O
could	O
have	O
new	O
methods	O
/	O
fields	O
which	O
A	O
doesn	O
'	O
t	O
,	O
so	O
it	O
is	O
possible	O
that	O
someone	O
will	O
try	O
to	O
use	O
these	O
new	O
members	O
via	O
b	O
reference	O
even	O
if	O
held	O
instance	O
doesn	O
'	O
t	O
have	O
(	O
doesn	O
'	O
t	O
support	O
)	O
them	O
.	O
In	O
other	O
words	O
we	O
could	O
end	O
up	O
trying	O
to	O
use	O
data	O
which	O
doesn	O
'	O
t	O
exist	O
,	O
which	O
could	O
lead	O
to	O
many	O
problems	O
.	O
So	O
to	O
prevent	O
such	O
situation	O
JVM	O
throws	O
exception	O
,	O
and	O
stop	O
further	O
potentially	O
dangerous	O
code	O
.	O
You	O
could	O
ask	O
now	O
"	O
So	O
why	O
aren	O
'	O
t	O
we	O
stopped	O
even	O
earlier	O
?	O
Why	O
code	O
involving	O
such	O
casting	O
is	O
even	O
compilable	O
?	O
Shouldn	O
'	O
t	O
compiler	O
stop	O
it	O
?	O
"	O
.	O
Answer	O
is	O
:	O
no	O
because	O
compiler	O
can	O
'	O
t	O
know	O
for	O
sure	O
what	O
is	O
the	O
actual	O
type	O
of	O
instance	O
held	O
by	O
a	O
reference	O
,	O
and	O
there	O
is	O
a	O
chance	O
that	O
it	O
will	O
hold	O
instance	O
of	O
class	O
B	O
which	O
will	O
support	O
interface	O
of	O
b	O
reference	O
.	O
Take	O
a	O
look	O
at	O
this	O
example	O
:	O
#	O
pre	O
Now	O
lets	O
go	O
back	O
to	O
your	O
arrays	O
.	O
As	O
you	O
see	O
in	O
question	O
,	O
we	O
can	O
'	O
t	O
cast	O
instance	O
of	O
Object	B-api_mention
[	O
]	O
array	O
to	O
more	O
precise	O
type	O
String	B-api_mention
[	O
]	O
like	O
#	O
pre	O
Here	O
problem	O
is	O
a	O
little	O
different	O
.	O
Now	O
we	O
are	O
sure	O
that	O
String	B-api_mention
[	O
]	O
array	O
will	O
not	O
have	O
additional	O
fields	O
or	O
methods	O
because	O
every	O
array	O
support	O
only	O
:	O
#	O
li	O
[	O
]	O
operator	O
,	O
#	O
li	O
length	O
filed	O
,	O
#	O
li	O
methods	O
inherited	O
from	O
Object	B-api_mention
supertype	O
,	O
So	O
it	O
is	O
not	O
arrays	O
interface	O
which	O
is	O
making	O
it	O
impossible	O
.	O
Problem	O
is	O
that	O
Object	B-api_mention
[	O
]	O
array	O
beside	O
Strings	O
can	O
store	O
any	O
objects	O
(	O
for	O
instance	O
Integers	O
)	O
so	O
it	O
is	O
possible	O
that	O
one	O
beautiful	O
day	O
we	O
will	O
end	O
up	O
with	O
trying	O
to	O
invoke	O
method	O
like	O
strArray	O
[	O
i	O
]	O
.	B-api_mention
substring	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
instance	O
of	O
Integer	O
which	O
doesn	O
'	O
t	O
have	O
such	O
method	O
.	O
So	O
to	O
make	O
sure	O
that	O
this	O
situation	O
will	O
never	O
happen	O
,	O
in	O
Java	O
array	O
references	O
can	O
hold	O
only	O
#	O
li	O
instances	O
of	O
array	O
of	O
same	O
type	O
as	O
reference	O
(	O
reference	O
String	B-api_mention
[	O
]	O
strArr	O
can	O
hold	O
String	B-api_mention
[	O
]	O
)	O
#	O
li	O
instances	O
of	O
array	O
of	O
subtype	O
(	O
Object	B-api_mention
[	O
]	O
can	O
hold	O
String	B-api_mention
[	O
]	O
because	O
String	B-api_mention
is	O
subtype	O
of	O
Object	B-api_mention
)	O
,	O
but	O
can	O
'	O
t	O
hold	O
#	O
li	O
array	O
of	O
supertype	O
of	O
type	O
of	O
array	O
from	O
reference	O
(	O
String	B-api_mention
[	O
]	O
can	O
'	O
t	O
hold	O
Object	B-api_mention
[	O
]	O
)	O
#	O
li	O
array	O
of	O
type	O
which	O
is	O
not	O
related	O
to	O
type	O
from	O
reference	O
(	O
Integer	B-api_mention
[	O
]	O
can	O
'	O
t	O
hold	O
String	B-api_mention
[	O
]	O
)	O
In	O
other	O
words	O
something	O
like	O
this	O
is	O
OK	O
#	O
pre	O
You	O
could	O
say	O
that	O
one	O
way	O
to	O
resolve	O
this	O
problem	O
is	O
to	O
find	O
at	O
runtime	O
most	O
common	O
type	O
between	O
all	O
list	O
elements	O
and	O
create	O
array	O
of	O
that	O
type	O
,	O
but	O
this	O
wont	O
work	O
in	O
situations	O
where	O
all	O
elements	O
of	O
list	O
will	O
be	O
of	O
one	O
type	O
derived	O
from	O
generic	O
one	O
.	O
Take	O
a	O
look	O
#	O
pre	O
now	O
most	O
common	O
type	O
is	O
B	O
,	O
not	O
A	O
so	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
A	O
[	O
]	O
arr	O
=	O
elements	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
would	O
return	O
array	O
of	O
B	O
class	O
new	O
B	O
[	O
]	O
.	O
Problem	O
with	O
this	O
array	O
is	O
that	O
while	O
compiler	O
would	O
allow	O
you	O
to	O
edit	O
its	O
content	O
by	O
adding	O
new	O
A	O
(	O
args	O
)	O
element	O
to	O
it	O
,	O
you	O
would	O
get	O
ArrayStoreException	B-api_mention
because	O
B	O
[	O
]	O
array	O
can	O
hold	O
only	O
elements	O
of	O
class	O
B	O
or	O
its	O
subclass	O
,	O
to	O
make	O
sure	O
that	O
all	O
elements	O
will	O
support	O
interface	O
of	O
B	O
,	O
but	O
instance	O
of	O
A	O
may	O
not	O
have	O
all	O
methods	O
/	O
fields	O
of	O
B	O
.	O
So	O
this	O
solution	O
is	O
not	O
perfect	O
.	O
Best	O
solution	O
to	O
this	O
problem	O
is	O
explicitly	O
tell	O
what	O
type	O
of	O
array	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
be	O
returned	O
by	O
passing	O
this	O
type	O
as	O
method	O
argument	O
like	O
String	B-api_mention
[	O
]	O
arr	O
=	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
String	B-api_mention
[	O
]	O
arr	O
=	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
if	O
size	O
of	O
array	O
is	O
smaller	O
then	O
list	O
it	O
will	O
be	O
automatically	O
adjusted	O
.	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271520	O
Try	O
using	O
this	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getCanonicalName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
this	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getSimpleName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
'	O
s	O
an	O
anonymous	O
class	O
,	O
use	O
this	O
.	B-api_mention
getClass	I-api_mention
.	I-api_mention
getSuperclass	I-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877283	O
The	O
Integer	B-api_mention
class	O
has	O
a	O
static	O
cache	O
,	O
that	O
stores	O
256	O
special	O
Integer	B-api_mention
objects	O
-	O
one	O
for	O
every	O
value	O
between	O
-	O
128	O
and	O
127	O
.	O
With	O
that	O
in	O
mind	O
,	O
consider	O
the	O
difference	O
between	O
these	O
three	O
.	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
(	O
obviously	O
)	O
makes	O
a	O
brand	O
new	O
Integer	B-api_mention
object	O
.	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
an	O
int	O
primitive	O
value	O
after	O
parsing	O
the	O
String	B-api_mention
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
more	O
complex	O
than	O
the	O
others	O
.	O
It	O
starts	O
off	O
by	O
parsing	O
the	O
String	B-api_mention
.	O
Then	O
,	O
if	O
the	O
value	O
is	O
between	O
-	O
128	O
and	O
127	O
,	O
it	O
returns	O
the	O
corresponding	O
object	O
from	O
the	O
static	O
cache	O
.	O
If	O
the	O
value	O
is	O
outside	O
of	O
this	O
range	O
,	O
then	O
it	O
invokes	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
passes	O
in	O
the	O
value	O
,	O
so	O
that	O
you	O
get	O
a	O
new	O
object	O
.	O
Now	O
,	O
consider	O
the	O
three	O
expressions	O
in	O
the	O
question	O
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
true	O
,	O
because	O
the	O
Integer	B-api_mention
whose	O
value	O
is	O
127	O
is	O
retrieved	O
twice	O
from	O
the	O
static	O
cache	O
,	O
and	O
compared	O
to	O
itself	O
.	O
There	O
'	O
s	O
only	O
one	O
Integer	B-api_mention
object	O
involved	O
,	O
so	O
this	O
returns	O
true	O
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
false	O
,	O
because	O
128	O
is	O
not	O
in	O
the	O
static	O
cache	O
.	O
So	O
a	O
new	O
Integer	B-api_mention
is	O
created	O
for	O
each	O
side	O
of	O
the	O
equality	O
.	O
Since	O
there	O
are	O
two	O
different	O
Integer	B-api_mention
objects	O
,	O
and	O
=	O
=	O
for	O
objects	O
only	O
returns	O
true	O
if	O
both	O
sides	O
are	O
the	O
exact	O
same	O
object	O
,	O
this	O
is	O
going	O
to	O
be	O
false	O
.	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
comparing	O
the	O
primitive	O
int	O
value	O
128	O
on	O
the	O
left	O
,	O
with	O
a	O
newly	O
created	O
Integer	B-api_mention
object	O
on	O
the	O
right	O
.	O
But	O
because	O
it	O
doesn	O
'	O
t	O
make	O
sense	O
to	O
compare	O
an	O
int	O
to	O
an	O
Integer	B-api_mention
,	O
Java	O
will	O
auto	O
-	O
unbox	O
the	O
Integer	B-api_mention
before	O
doing	O
the	O
comparison	O
;	O
so	O
you	O
end	O
up	O
comparing	O
an	O
int	O
to	O
an	O
int	O
.	O
Since	O
the	O
primitive	O
128	O
is	O
equal	O
to	O
itself	O
,	O
this	O
returns	O
true	O
.	O
Question	O
-	O
31270759	O
,	O
answer	O
-	O
31270760	O
Presented	O
below	O
is	O
the	O
full	O
code	O
of	O
the	O
Exceptional	O
class	O
.	O
It	O
has	O
a	O
quite	O
large	O
API	O
which	O
is	O
a	O
pure	O
extension	O
of	O
the	O
Optional	B-api_mention
API	O
so	O
it	O
can	O
be	O
a	O
drop	O
-	O
in	O
replacement	O
for	O
it	O
in	O
any	O
existing	O
code	O
—	O
except	O
that	O
it	O
isn	O
'	O
t	O
a	O
subtype	O
of	O
the	O
final	O
Optional	B-api_mention
class	O
.	O
The	O
class	O
can	O
be	O
seen	O
as	O
being	O
in	O
the	O
same	O
relationship	O
with	O
the	O
Try	O
monad	O
as	O
Optional	B-api_mention
is	O
with	O
the	O
Maybe	O
monad	O
:	O
it	O
draws	O
inspiration	O
from	O
it	O
,	O
but	O
is	O
adapted	O
to	O
the	O
Java	O
idiom	O
(	O
such	O
as	O
actually	O
throwing	O
exceptions	O
,	O
even	O
from	O
non	O
-	O
terminal	O
operations	O
)	O
.	O
These	O
are	O
some	O
key	O
guidelines	O
followed	O
by	O
the	O
class	O
:	O
#	O
li	O
as	O
opposed	O
to	O
the	O
monadic	O
approach	O
,	O
doesn	O
'	O
t	O
ignore	O
Java	O
'	O
s	O
exception	O
mechanism	O
;	O
#	O
li	O
instead	O
it	O
relieves	O
the	O
impedance	O
mismatch	O
between	O
exceptions	O
and	O
higher	O
-	O
order	O
functions	O
;	O
#	O
li	O
exception	O
handling	O
not	O
statically	O
typesafe	O
(	O
due	O
to	O
sneaky	O
throwing	O
)	O
,	O
but	O
always	O
safe	O
at	O
runtime	O
(	O
never	O
swallows	O
an	O
exception	O
except	O
on	O
explicit	O
request	O
)	O
.	O
The	O
class	O
tries	O
to	O
cover	O
all	O
the	O
typical	O
ways	O
to	O
handle	O
an	O
exception	O
:	O
#	O
li	O
recover	O
with	O
some	O
handling	O
code	O
which	O
provides	O
a	O
substitute	O
value	O
;	O
#	O
li	O
flatRecover	O
which	O
,	O
analogous	O
to	O
flatMap	O
,	O
allows	O
to	O
return	O
a	O
new	O
Exceptional	O
instance	O
which	O
will	O
be	O
unwrapped	O
and	O
the	O
state	O
of	O
the	O
current	O
instance	O
suitably	O
updated	O
;	O
#	O
li	O
propagate	O
an	O
exception	O
,	O
throwing	O
it	O
from	O
the	O
Exceptional	O
expression	O
and	O
making	O
the	O
propagate	O
call	O
declare	O
this	O
exception	O
type	O
;	O
#	O
li	O
propagate	O
it	O
after	O
wrapping	O
into	O
another	O
exception	O
(	O
translate	O
it	O
)	O
;	O
#	O
li	O
handle	O
it	O
,	O
resulting	O
in	O
an	O
empty	O
Exceptional	O
;	O
#	O
li	O
as	O
a	O
special	O
case	O
of	O
handling	O
,	O
swallow	O
it	O
with	O
an	O
empty	O
handler	O
block	O
.	O
The	O
propagate	O
approach	O
allows	O
one	O
to	O
selectively	O
pick	O
which	O
checked	O
exceptions	O
he	O
wants	O
to	O
expose	O
from	O
his	O
code	O
.	O
Exceptions	O
which	O
remain	O
unhandled	O
at	O
the	O
time	O
a	O
terminal	O
operation	O
is	O
called	O
(	O
like	O
get	O
)	O
will	O
be	O
sneakily	O
thrown	O
without	O
declaration	O
.	O
This	O
is	O
often	O
considered	O
as	O
an	O
advanced	O
and	O
dangerous	O
approach	O
,	O
but	O
is	O
nevertheless	O
often	O
employed	O
as	O
a	O
way	O
to	O
somewhat	O
alleviate	O
the	O
nuisance	O
of	O
checked	O
exceptions	O
in	O
combination	O
with	O
lambda	O
shapes	O
which	O
do	O
not	O
declare	O
them	O
.	O
The	O
Exceptional	O
class	O
hopes	O
to	O
offer	O
a	O
cleaner	O
and	O
more	O
selective	O
alternative	O
to	O
sneaky	O
throw	O
.	O
#	O
pre	O
#	O
pre	O
#	O
pre	O
Question	O
-	O
16232833	O
I	O
'	O
m	O
using	O
Spring	O
MVC	O
for	O
a	O
simple	O
JSON	O
API	O
,	O
with	O
@	O
ResponseBody	O
based	O
approach	O
like	O
the	O
following	O
.	O
(	O
I	O
already	O
have	O
a	O
service	O
layer	O
producing	O
JSON	O
directly	O
.	O
)	O
#	O
pre	O
Question	O
is	O
,	O
in	O
the	O
given	O
scenario	O
,	O
what	O
is	O
the	O
simplest	O
,	O
cleanest	O
way	O
to	O
respond	O
with	O
a	O
HTTP	O
400	O
error	O
?	O
I	O
did	O
come	O
across	O
approaches	O
like	O
:	O
return	O
new	O
ResponseEntity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
.	O
.	O
but	O
I	O
can	O
'	O
t	O
use	O
it	O
here	O
since	O
my	O
method	O
'	O
s	O
return	O
type	O
is	O
String	B-api_mention
,	O
not	O
ResponseEntity	B-api_mention
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15432106	O
This	O
is	O
to	O
avoid	O
possible	O
efforts	O
for	O
reallocation	O
for	O
every	O
single	O
object	O
.	O
int	O
newCapacity	O
=	O
(	O
oldCapacity	O
*	O
3	O
)	O
/	O
2	O
+	O
1	O
;	O
internally	O
new	O
Object	B-api_mention
[	O
]	O
is	O
created	O
.	O
JVM	O
needs	O
effort	O
to	O
create	O
new	O
Object	B-api_mention
[	O
]	O
when	O
you	O
add	O
element	O
in	O
the	O
arraylist	O
.	O
If	O
you	O
don	O
'	O
t	O
have	O
above	O
code	O
(	O
any	O
algo	O
you	O
think	O
)	O
for	O
reallocation	O
then	O
every	O
time	O
when	O
you	O
invoke	O
arraylist	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
then	O
new	O
Object	B-api_mention
[	O
]	O
has	O
to	O
be	O
created	O
which	O
is	O
pointless	O
and	O
we	O
are	O
loosing	O
time	O
for	O
increasing	O
size	O
by	O
1	O
for	O
each	O
and	O
every	O
objects	O
to	O
be	O
added	O
.	O
So	O
it	O
is	O
better	O
to	O
increase	O
size	O
of	O
Object	B-api_mention
[	O
]	O
with	O
following	O
formula	O
.	O
(	O
JSL	O
has	O
used	O
forcasting	O
formula	O
given	O
below	O
for	O
dynamically	O
growing	O
arraylist	O
instead	O
of	O
growing	O
by	O
1	O
every	O
time	O
.	O
Because	O
to	O
grow	O
it	O
takes	O
effort	O
by	O
JVM	O
)	O
int	O
newCapacity	O
=	O
(	O
oldCapacity	O
*	O
3	O
)	O
/	O
2	O
+	O
1	O
;	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14526729	O
The	O
real	O
problem	O
with	O
this	O
is	O
that	O
it	O
'	O
s	O
output	O
histogram	O
is	O
dependent	O
on	O
the	O
initial	O
seed	O
far	O
to	O
much	O
-	O
much	O
of	O
the	O
time	O
it	O
will	O
end	O
up	O
with	O
a	O
near	O
uniform	O
output	O
but	O
a	O
lot	O
of	O
the	O
time	O
will	O
have	O
distinctly	O
un	O
-	O
uniform	O
output	O
.	O
Inspired	O
by	O
this	O
article	O
about	O
how	O
bad	O
php	O
'	O
s	O
rand	O
(	O
)	O
function	O
is	O
,	O
I	O
made	O
some	O
random	O
matrix	O
images	O
using	O
QuickRandom	B-api_mention
and	O
System	B-api_mention
.	I-api_mention
Random	I-api_mention
.	O
This	O
run	O
shows	O
how	O
sometimes	O
the	O
seed	O
can	O
have	O
a	O
bad	O
effect	O
(	O
in	O
this	O
case	O
favouring	O
lower	O
numbers	O
)	O
where	O
as	O
System	B-api_mention
.	I-api_mention
Random	I-api_mention
is	O
pretty	O
uniform	O
.	O
QuickRandom	B-api_mention
#	O
img	O
System	B-api_mention
.	I-api_mention
Random	I-api_mention
#	O
img	O
Even	O
Worse	O
If	O
we	O
initialise	O
QuickRandom	B-api_mention
as	O
new	O
QuickRandom	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
we	O
get	O
this	O
image	O
:	O
#	O
img	O
The	O
Code	O
#	O
pre	O
Question	O
-	O
19235606	O
,	O
answer	O
-	O
19235857	O
Spliterator	B-api_mention
basically	O
means	O
"	O
splittable	O
Iterator	O
"	O
.	O
Single	O
thread	O
can	O
traverse	O
/	O
process	O
the	O
entire	O
Spliterator	B-api_mention
itself	O
,	O
but	O
the	O
Spliterator	B-api_mention
also	O
has	O
a	O
method	O
trySplit	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
will	O
"	O
split	O
off	O
"	O
a	O
section	O
for	O
someone	O
else	O
(	O
typically	O
,	O
another	O
thread	O
)	O
to	O
process	O
-	O
-	O
leaving	O
the	O
current	O
spliterator	O
with	O
less	O
work	O
.	O
Collector	B-api_mention
combines	O
the	O
specification	O
of	O
a	O
reduce	O
function	O
(	O
of	O
map	O
-	O
reduce	O
fame	O
)	O
,	O
with	O
an	O
initial	O
value	O
,	O
and	O
a	O
value	O
to	O
combine	O
two	O
results	O
(	O
thus	O
enabling	O
results	O
from	O
Spliterated	O
streams	O
of	O
work	O
,	O
to	O
be	O
combined	O
.	O
)	O
For	O
example	O
,	O
the	O
most	O
basic	O
Collector	B-api_mention
would	O
have	O
an	O
initial	O
vaue	O
of	O
0	O
,	O
add	O
an	O
integer	O
onto	O
an	O
existing	O
result	O
,	O
and	O
would	O
'	O
combine	O
'	O
two	O
results	O
by	O
adding	O
them	O
.	O
Thus	O
summing	O
a	O
spliterated	O
stream	O
of	O
integers	O
.	O
See	O
:	O
#	O
li	O
Spliterator	B-api_mention
.	I-api_mention
trySplit	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
Collector	B-api_mention
<	O
T	O
,	O
A	O
,	O
R	O
>	O
Question	O
-	O
31270759	O
Exceptions	O
,	O
especially	O
checked	O
ones	O
,	O
can	O
severely	O
interrupt	O
the	O
flow	O
of	O
program	O
logic	O
when	O
the	O
FP	O
idiom	O
is	O
used	O
in	O
Java	O
8	O
.	O
Here	O
is	O
an	O
arbitrary	O
example	O
:	O
#	O
pre	O
The	O
above	O
code	O
breaks	O
when	O
there	O
'	O
s	O
an	O
exception	O
for	O
an	O
unparseable	O
string	O
.	O
But	O
say	O
I	O
just	O
want	O
to	O
replace	O
that	O
with	O
a	O
default	O
value	O
,	O
much	O
like	O
I	O
can	O
with	O
Optional	B-api_mention
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Of	O
course	O
,	O
this	O
still	O
fails	O
because	O
Optional	B-api_mention
only	O
handles	O
null	O
s	O
.	O
I	O
would	O
like	O
something	O
as	O
follows	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
:	O
this	O
is	O
a	O
self	O
-	O
answered	O
question	O
.	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408482	O
The	O
Java	O
language	O
provides	O
special	O
support	O
for	O
the	O
string	O
concatenation	O
operator	O
(	O
+	O
)	O
and	O
for	O
conversion	O
of	O
other	O
objects	O
to	O
strings	O
.	O
String	B-api_mention
concatenation	O
is	O
implemented	O
through	O
the	O
StringBuilder	B-api_mention
(	O
or	O
StringBuffer	B-api_mention
)	O
class	O
and	O
its	O
append	O
method	O
.	O
Question	O
-	O
10977992	O
,	O
answer	O
-	O
17939167	O
There	O
are	O
two	O
differences	O
:	O
#	O
li	O
We	O
can	O
use	O
Iterator	O
to	O
traverse	O
Set	B-api_mention
and	O
List	B-api_mention
and	O
also	O
Map	B-api_mention
type	O
of	O
Objects	O
.	O
While	O
a	O
ListIterator	B-api_mention
can	O
be	O
used	O
to	O
traverse	O
for	O
List	O
-	O
type	O
Objects	O
,	O
but	O
not	O
for	O
Set	O
-	O
type	O
of	O
Objects	O
.	O
That	O
is	O
,	O
we	O
can	O
get	O
a	O
Iterator	O
object	O
by	O
using	O
Set	B-api_mention
and	O
List	B-api_mention
,	O
see	O
here	O
:	O
By	O
using	O
Iterator	O
we	O
can	O
retrieve	O
the	O
elements	O
from	O
Collection	B-api_mention
Object	O
in	O
forward	O
direction	O
only	O
.	O
Methods	O
in	O
Iterator	O
:	O
#	O
li	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
remove	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
#	O
li	O
But	O
we	O
get	O
ListIterator	B-api_mention
object	O
only	O
from	O
the	O
List	B-api_mention
interface	O
,	O
see	O
here	O
:	O
where	O
as	O
a	O
ListIterator	B-api_mention
allows	O
you	O
to	O
traverse	O
in	O
either	O
directions	O
(	O
Both	O
forward	O
and	O
backward	O
)	O
.	O
So	O
it	O
has	O
two	O
more	O
methods	O
like	O
hasPrevious	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
previous	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
other	O
than	O
those	O
of	O
Iterator	B-api_mention
.	O
Also	O
,	O
we	O
can	O
get	O
indexes	O
of	O
the	O
next	O
or	O
previous	O
elements	O
(	O
using	O
nextIndex	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
previousIndex	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
respectively	O
)	O
Methods	O
in	O
ListIterator	B-api_mention
:	O
#	O
li	O
hasNext	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
next	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
previous	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
hasPrevious	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
remove	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
nextIndex	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
previousIndex	B-api_mention
(	I-api_mention
)	I-api_mention
ListIterator	I-api_mention
listiterator	O
=	O
List	B-api_mention
.	I-api_mention
listIterator	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
i	O
.	O
e	O
.	O
,	O
we	O
can	O
'	O
t	O
get	O
ListIterator	B-api_mention
object	O
from	O
Set	B-api_mention
interface	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32744190	O
There	O
is	O
no	O
actual	O
difference	O
in	O
the	O
functionality	O
between	O
the	O
2	O
version	O
'	O
s	O
loop	O
.	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
does	O
the	O
exact	O
same	O
thing	O
.	O
So	O
the	O
choice	O
to	O
use	O
it	O
or	O
not	O
may	O
not	O
necessarily	O
be	O
considered	O
a	O
mistake	O
.	O
It	O
is	O
left	O
up	O
to	O
the	O
developer	O
to	O
decide	O
when	O
it	O
comes	O
to	O
this	O
kind	O
of	O
micromanagement	O
.	O
There	O
are	O
2	O
separate	O
concerns	O
for	O
each	O
approach	O
:	O
#	O
li	O
using	O
the	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
makes	O
the	O
code	O
less	O
verbose	O
and	O
more	O
readable	O
.	O
#	O
li	O
looping	O
directly	O
in	O
the	O
HashMap	B-api_mention
code	O
(	O
like	O
version	O
8	O
)	O
peformance	O
wise	O
is	O
actually	O
a	O
better	O
option	O
.	O
While	O
the	O
overhead	O
that	O
inserting	O
the	O
Arrays	B-api_mention
class	O
is	O
negligible	O
it	O
may	O
become	O
less	O
so	O
when	O
it	O
comes	O
to	O
something	O
as	O
widespread	O
as	O
HashMap	B-api_mention
where	O
every	O
bit	O
of	O
performance	O
enhancement	O
has	O
a	O
large	O
effect	O
(	O
imagine	O
the	O
tiniest	O
footprint	O
reduce	O
of	O
a	O
HashMap	B-api_mention
in	O
fullblown	O
webapp	O
)	O
.	O
Take	O
into	O
consideration	O
the	O
fact	O
that	O
the	O
Arrays	B-api_mention
class	O
was	O
used	O
only	O
for	O
this	O
one	O
loop	O
.	O
The	O
change	O
is	O
small	O
enough	O
that	O
it	O
doesn	O
'	O
t	O
make	O
the	O
clear	O
method	O
less	O
readable	O
.	O
The	O
precise	O
reason	O
can	O
'	O
t	O
be	O
found	O
out	O
without	O
asking	O
the	O
developer	O
who	O
actually	O
did	O
this	O
,	O
however	O
i	O
suspect	O
it	O
'	O
s	O
either	O
a	O
mistake	O
or	O
a	O
small	O
enhancement	O
.	O
better	O
option	O
.	O
My	O
opinion	O
is	O
it	O
can	O
be	O
considered	O
an	O
enhancement	O
,	O
even	O
if	O
only	O
by	O
accident	O
.	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
15203417	O
If	O
you	O
'	O
re	O
unsure	O
about	O
something	O
,	O
try	O
writing	O
a	O
test	O
first	O
.	O
I	O
did	O
this	O
:	O
#	O
pre	O
Prints	O
:	O
#	O
pre	O
There	O
'	O
s	O
an	O
empty	O
line	O
in	O
the	O
last	O
block	O
where	O
getSimpleName	B-api_mention
returns	O
an	O
empty	O
string	O
.	O
The	O
upshot	O
looking	O
at	O
this	O
is	O
:	O
#	O
li	O
the	O
name	O
is	O
the	O
name	O
that	O
you	O
'	O
d	O
use	O
to	O
dynamically	O
load	O
the	O
class	O
with	O
,	O
for	O
example	O
,	O
a	O
call	O
to	O
Class	B-api_mention
.	I-api_mention
forName	I-api_mention
with	O
the	O
default	O
ClassLoader	B-api_mention
.	O
#	O
li	O
the	O
canonical	O
name	O
is	O
the	O
name	O
that	O
would	O
be	O
used	O
in	O
an	O
import	O
statement	O
and	O
uniquely	O
identifies	O
the	O
class	O
.	O
Might	O
be	O
useful	O
during	O
toString	B-api_mention
or	O
logging	O
operations	O
.	O
#	O
li	O
the	O
simple	O
name	O
loosely	O
identifies	O
the	O
class	O
,	O
again	O
might	O
be	O
useful	O
during	O
toString	B-api_mention
or	O
logging	O
operations	O
but	O
is	O
not	O
guaranteed	O
to	O
be	O
unique	O
.	O
Question	O
-	O
13102045	O
I	O
am	O
using	O
Scanner	B-api_mention
methods	O
nextInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
reading	O
input	O
.	O
Basically	O
,	O
it	O
looks	O
like	O
this	O
:	O
#	O
pre	O
The	O
problem	O
is	O
that	O
after	O
entering	O
the	O
numerical	O
value	O
,	O
the	O
first	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
skipped	O
and	O
the	O
second	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
executed	O
,	O
so	O
that	O
my	O
output	O
looks	O
like	O
this	O
:	O
#	O
pre	O
I	O
tested	O
my	O
application	O
and	O
it	O
looks	O
like	O
the	O
problem	O
lies	O
in	O
using	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
I	O
delete	O
it	O
,	O
then	O
both	O
string1	O
=	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
string2	O
=	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
executed	O
as	O
I	O
want	O
them	O
to	O
be	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26826286	O
It	O
'	O
s	O
easy	O
to	O
write	O
a	O
method	O
to	O
do	O
this	O
using	O
String	B-api_mention
.	I-api_mention
regionMatches	I-api_mention
:	O
#	O
pre	O
Testing	O
:	O
#	O
pre	O
Output	O
:	O
#	O
blockquote	O
It	O
is	O
not	O
immediately	O
obvious	O
,	O
but	O
a	O
function	O
like	O
this	O
can	O
still	O
be	O
dependent	O
on	O
the	O
order	O
in	O
which	O
the	O
replacements	O
are	O
specified	O
.	O
Consider	O
:	O
#	O
pre	O
Output	O
:	O
#	O
blockquote	O
But	O
reverse	O
the	O
replacements	O
:	O
truth	O
+	O
=	O
StringLiteral	O
+	O
simultaneousReplace	O
(	O
args	O
)	O
;	O
Output	O
:	O
#	O
blockquote	O
Oops	O
!	O
:	O
)	O
Therefore	O
it	O
is	O
sometimes	O
useful	O
to	O
make	O
sure	O
to	O
look	O
for	O
the	O
longest	O
match	O
(	O
as	O
PHP	O
'	O
s	O
strtr	O
function	O
does	O
,	O
for	O
example	O
)	O
.	O
This	O
version	O
of	O
the	O
method	O
will	O
do	O
that	O
:	O
#	O
pre	O
Note	O
that	O
the	O
above	O
methods	O
are	O
case	O
-	O
sensitive	O
.	O
If	O
you	O
need	O
a	O
case	O
-	O
insensitive	O
version	O
it	O
is	O
easy	O
to	O
modify	O
the	O
above	O
because	O
String	B-api_mention
.	I-api_mention
regionMatches	I-api_mention
can	O
take	O
an	O
ignoreCase	B-api_mention
parameter	O
.	O
Question	O
-	O
29229373	O
,	O
answer	O
-	O
29230939	O
When	O
looking	O
into	O
the	O
implementation	O
(	O
ReferencePipeline	O
.	O
java	O
)	O
we	O
see	O
the	O
method	O
[	O
link	O
]	O
#	O
pre	O
which	O
will	O
be	O
invoke	O
for	O
findFirst	B-api_mention
operation	O
.	O
The	O
special	O
thing	O
to	O
take	O
care	O
about	O
is	O
the	O
sink	O
.	O
cancellationRequested	O
(	O
args	O
)	O
which	O
allows	O
to	O
end	O
the	O
loop	O
on	O
the	O
first	O
match	O
.	O
Compare	O
to	O
[	O
link	O
]	O
#	O
pre	O
The	O
method	O
for	O
advancing	O
one	O
item	O
ends	O
up	O
calling	O
forEach	O
on	O
the	O
sub	O
-	O
stream	O
without	O
any	O
possibility	O
for	O
earlier	O
termination	O
and	O
the	O
comment	O
at	O
the	O
beginning	O
of	O
the	O
flatMap	O
method	O
even	O
tells	O
about	O
this	O
absent	O
feature	O
.	O
Since	O
this	O
is	O
more	O
than	O
just	O
an	O
optimization	O
thing	O
as	O
it	O
implies	O
that	O
the	O
code	O
simply	O
breaks	O
when	O
the	O
sub	O
-	O
stream	O
is	O
infinite	O
,	O
I	O
hope	O
that	O
the	O
developers	O
soon	O
prove	O
that	O
they	O
“	O
can	O
do	O
better	O
than	O
this	O
”	O
…	O
To	O
illustrate	O
the	O
implications	O
,	O
while	O
Stream	B-api_mention
.	I-api_mention
iterate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
works	O
as	O
expected	O
,	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
end	O
up	O
in	O
an	O
infinite	O
loop	O
.	O
Regarding	O
the	O
specification	O
,	O
most	O
of	O
it	O
can	O
be	O
found	O
in	O
the	O
chapter	O
“	O
Stream	O
operations	O
and	O
pipelines	O
”	O
of	O
the	O
package	O
specification	O
:	O
#	O
blockquote	O
It	O
’	O
s	O
clear	O
that	O
a	O
short	O
-	O
circuiting	O
operation	O
doesn	O
’	O
t	O
guaranty	O
a	O
finite	O
time	O
termination	O
,	O
e	O
.	O
g	O
.	O
when	O
a	O
filter	O
doesn	O
’	O
t	O
match	O
any	O
item	O
the	O
processing	O
can	O
’	O
t	O
complete	O
,	O
but	O
an	O
implementation	O
which	O
doesn	O
’	O
t	O
support	O
any	O
termination	O
in	O
finite	O
time	O
by	O
simply	O
ignoring	O
the	O
short	O
-	O
circuiting	O
nature	O
of	O
an	O
operation	O
is	O
far	O
off	O
the	O
specification	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26877910	O
What	O
I	O
can	O
only	O
share	O
is	O
my	O
own	O
method	O
.	O
You	O
can	O
use	O
a	O
temporary	O
String	B-api_mention
temp	O
=	O
StringLiteral	O
;	O
or	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
my	O
example	O
code	O
created	O
in	O
console	O
application	O
via	O
c	O
#	O
-	O
"	O
Idea	O
Only	O
,	O
Not	O
Exact	O
Answer	O
"	O
.	O
#	O
pre	O
Or	O
you	O
can	O
also	O
use	O
the	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
pre	O
Output	O
:	O
time	O
upon	O
a	O
Once	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
foo	O
.	O
Question	O
-	O
17828584	O
I	O
was	O
wondering	O
what	O
happens	O
when	O
you	O
try	O
to	O
catch	O
an	O
StackOverflowError	B-api_mention
and	O
came	O
up	O
with	O
the	O
following	O
method	O
:	O
#	O
pre	O
Now	O
my	O
question	O
:	O
Why	O
does	O
this	O
method	O
print	O
'	O
4	O
'	O
?	O
I	O
thought	O
maybe	O
it	O
was	O
because	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
needs	O
3	O
segments	O
on	O
the	O
call	O
stack	O
,	O
but	O
I	O
don	O
'	O
t	O
know	O
where	O
the	O
number	O
3	O
comes	O
from	O
.	O
When	O
you	O
look	O
at	O
the	O
source	O
code	O
(	O
and	O
bytecode	O
)	O
of	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
it	O
normally	O
would	O
lead	O
to	O
far	O
more	O
method	O
invocations	O
than	O
3	O
(	O
so	O
3	O
segments	O
on	O
the	O
call	O
stack	O
would	O
not	O
be	O
sufficient	O
)	O
.	O
If	O
it	O
'	O
s	O
because	O
of	O
optimizations	O
the	O
Hotspot	O
VM	O
applies	O
(	O
method	O
inlining	O
)	O
,	O
I	O
wonder	O
if	O
the	O
result	O
would	O
be	O
different	O
on	O
another	O
VM	O
.	O
Edit	O
:	O
As	O
the	O
output	O
seems	O
to	O
be	O
highly	O
JVM	O
specific	O
,	O
I	O
get	O
the	O
result	O
4	O
using	O
Java	O
(	O
TM	O
)	O
SE	O
Runtime	O
Environment	O
(	O
build	O
1	O
.	O
6	O
.	O
0	O
_	O
41	O
-	O
b02	O
)	O
Java	O
HotSpot	O
(	O
TM	O
)	O
64	O
-	O
Bit	O
Server	O
VM	O
(	O
build	O
20	O
.	O
14	O
-	O
b01	O
,	O
mixed	O
mode	O
)	O
Explanation	O
why	O
I	O
think	O
this	O
question	O
is	O
different	O
from	O
Understanding	O
java	O
stack	O
:	O
My	O
question	O
is	O
not	O
about	O
why	O
there	O
is	O
a	O
cnt	O
>	O
0	O
(	O
obviously	O
because	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
requires	O
stack	O
size	O
and	O
throws	O
another	O
StackOverflowError	B-api_mention
before	O
something	O
gets	O
printed	O
)	O
,	O
but	O
why	O
it	O
has	O
the	O
particular	O
value	O
of	O
4	O
,	O
respectively	O
0	O
,	O
3	O
,	O
8	O
,	O
55	O
or	O
something	O
else	O
on	O
other	O
systems	O
.	O
Question	O
-	O
32693704	O
I	O
noticed	O
something	O
strange	O
in	O
the	O
implementation	O
of	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
how	O
it	O
looked	O
in	O
OpenJDK	O
7u40	O
:	O
#	O
pre	O
And	O
this	O
is	O
how	O
it	O
looks	O
as	O
of	O
OpenJDK	O
8u40	O
:	O
#	O
pre	O
I	O
understand	O
that	O
now	O
the	O
table	O
can	O
be	O
null	O
for	O
empty	O
an	O
map	O
,	O
thus	O
the	O
additional	O
check	O
and	O
caching	O
in	O
a	O
local	O
variable	O
is	O
required	O
.	O
But	O
why	O
was	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
replaced	O
with	O
a	O
for	O
-	O
loop	O
?	O
It	O
seems	O
that	O
the	O
change	O
was	O
introduced	O
in	O
this	O
commit	O
.	O
Unfortunately	O
I	O
found	O
no	O
explanation	O
for	O
why	O
a	O
plain	O
for	O
loop	O
might	O
be	O
better	O
than	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Is	O
it	O
faster	O
?	O
Or	O
safer	O
?	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
25855691	O
TL	O
;	O
DR	O
:	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
the	O
fastest	O
.	O
I	O
felt	O
I	O
should	O
add	O
my	O
results	O
from	O
benchmarking	O
iteration	O
.	O
I	O
took	O
a	O
very	O
simple	O
approach	O
(	O
no	O
benchmarking	O
frameworks	O
)	O
and	O
benchmarked	O
5	O
different	O
methods	O
:	O
#	O
li	O
classic	O
for	O
#	O
li	O
classic	O
foreach	O
#	O
li	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
the	O
testing	O
procedure	O
and	O
parameters	O
#	O
pre	O
The	O
list	O
in	O
this	O
class	O
shall	O
be	O
iterated	O
over	O
and	O
have	O
some	O
doIt	O
(	O
args	O
)	O
applied	O
to	O
all	O
it	O
'	O
s	O
members	O
,	O
each	O
time	O
via	O
a	O
different	O
method	O
.	O
in	O
the	O
Main	O
class	O
I	O
run	O
the	O
tested	O
method	O
three	O
times	O
to	O
warm	O
up	O
the	O
JVM	O
.	O
I	O
then	O
run	O
the	O
test	O
method	O
1000	O
times	O
summing	O
the	O
time	O
it	O
takes	O
for	O
each	O
iteration	O
method	O
(	O
using	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
After	O
that	O
'	O
s	O
done	O
i	O
divide	O
that	O
sum	O
by	O
1000	O
and	O
that	O
'	O
s	O
the	O
result	O
,	O
average	O
time	O
.	O
example	O
:	O
#	O
pre	O
I	O
ran	O
this	O
on	O
a	O
i5	O
4	O
core	O
CPU	O
,	O
with	O
java	O
version	O
1	O
.	O
8	O
.	O
0	O
_	O
05	O
classic	O
for	O
#	O
pre	O
execution	O
time	O
:	O
4	O
.	O
21	O
ms	O
classic	O
foreach	O
#	O
pre	O
execution	O
time	O
:	O
5	O
.	O
95	O
ms	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
11	O
ms	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
2	O
.	O
79	O
ms	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
list	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
6	O
ms	O
