Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791724	O
Use	O
the	O
replaceEach	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
from	O
Apache	O
Commons	O
StringUtils	B-api_mention
:	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
12468764	O
,	O
answer	O
-	O
24537575	O
I	O
'	O
ve	O
found	O
a	O
very	O
nice	O
and	O
concise	O
solution	O
,	O
especially	O
useful	O
when	O
you	O
cannot	O
modify	O
enum	O
classes	O
as	O
it	O
was	O
in	O
my	O
case	O
.	O
Then	O
you	O
should	O
provide	O
a	O
custom	O
ObjectMapper	B-api_mention
with	O
a	O
certain	O
feature	O
enabled	O
.	O
Those	O
features	O
are	O
available	O
since	O
Jackson	O
1	O
.	O
6	O
.	O
So	O
you	O
only	O
need	O
to	O
write	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
your	O
enum	O
.	O
#	O
pre	O
There	O
are	O
more	O
enum	O
-	O
related	O
features	O
available	O
,	O
see	O
here	O
:	O
#	O
a	O
#	O
a	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
38628203	O
In	O
intellij	O
you	O
can	O
auto	O
generate	O
toString	B-api_mention
method	O
by	O
pressing	O
alt	O
+	O
inset	O
and	O
then	O
selecting	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
here	O
is	O
an	O
out	O
put	O
for	O
a	O
test	O
class	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
generates	O
a	O
String	B-api_mention
by	O
concatenating	O
,	O
several	O
attributes	O
of	O
the	O
class	O
,	O
for	O
primitives	O
it	O
will	O
print	O
their	O
values	O
and	O
for	O
reference	O
types	O
it	O
will	O
use	O
their	O
class	O
type	O
(	O
in	O
this	O
case	O
to	O
string	O
method	O
of	O
Test2	O
)	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
16229988	O
My	O
solution	O
is	O
to	O
do	O
a	O
"	O
extract	O
method	O
"	O
refactoring	O
,	O
as	O
following	O
:	O
#	O
pre	O
printToFile	B-api_mention
can	O
be	O
written	O
either	O
#	O
pre	O
or	O
#	O
pre	O
For	O
class	O
lib	O
designers	O
,	O
I	O
will	O
suggest	O
them	O
extend	O
the	O
AutoClosable	B-api_mention
interface	O
with	O
an	O
additional	O
method	O
to	O
suppress	O
the	O
close	O
.	O
In	O
this	O
case	O
we	O
can	O
then	O
manually	O
control	O
the	O
close	O
behavior	O
.	O
For	O
language	O
designers	O
,	O
the	O
lesson	O
is	O
that	O
adding	O
a	O
new	O
feature	O
could	O
mean	O
adding	O
a	O
lot	O
others	O
.	O
In	O
this	O
Java	O
case	O
,	O
obviously	O
ARM	O
feature	O
will	O
work	O
better	O
with	O
a	O
resource	O
ownership	O
transfer	O
mechanism	O
.	O
UPDATE	O
Originally	O
the	O
code	O
above	O
requires	O
@	O
SuppressWarning	O
since	O
the	O
BufferedWriter	B-api_mention
inside	O
the	O
function	O
requires	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
As	O
suggested	O
by	O
a	O
comment	O
,	O
if	O
flush	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
be	O
called	O
before	O
close	O
the	O
writer	O
,	O
we	O
need	O
to	O
do	O
so	O
before	O
any	O
return	B-api_mention
(	O
implicit	O
or	O
explicit	O
)	O
statements	O
inside	O
the	O
try	O
block	O
.	O
There	O
is	O
currently	O
no	O
way	O
to	O
ensure	O
the	O
caller	O
doing	O
this	O
I	O
think	O
,	O
so	O
this	O
must	O
be	O
documented	O
for	O
writeFileWriter	B-api_mention
.	O
UPDATE	O
AGAIN	O
The	O
above	O
update	O
makes	O
@	O
SuppressWarning	O
unnecessary	O
since	O
it	O
require	O
the	O
function	O
to	O
return	O
the	O
resource	O
to	O
the	O
caller	O
,	O
so	O
itself	O
does	O
not	O
necessary	O
being	O
closed	O
.	O
Unfortunately	O
,	O
this	O
pull	O
us	O
back	O
to	O
the	O
beginning	O
of	O
the	O
situation	O
:	O
the	O
warning	O
is	O
now	O
moved	O
back	O
to	O
the	O
caller	O
side	O
.	O
So	O
to	O
properly	O
solve	O
this	O
,	O
we	O
need	O
a	O
customised	O
AutoClosable	B-api_mention
that	O
whenever	O
it	O
closes	O
,	O
the	O
underline	O
BufferedWriter	B-api_mention
shall	O
be	O
flush	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
ed	O
.	O
Actually	O
,	O
this	O
shows	O
us	O
another	O
way	O
to	O
bypass	O
the	O
warning	O
,	O
since	O
the	O
BufferWriter	B-api_mention
is	O
never	O
closed	O
in	O
either	O
way	O
.	O
Question	O
-	O
7283338	O
,	O
answer	O
-	O
7283475	O
Because	O
any	O
particular	O
implementation	O
of	O
Set	O
may	O
or	O
may	O
not	O
be	O
random	O
access	O
.	O
You	O
can	O
always	O
get	O
an	O
iterator	O
and	O
step	O
through	O
the	O
Set	B-api_mention
,	O
using	O
the	O
iterators	O
'	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
return	O
the	O
result	O
you	O
want	O
once	O
you	O
find	O
the	O
equal	O
element	O
.	O
This	O
works	O
regardless	O
of	O
the	O
implementation	O
.	O
If	O
the	O
implementation	O
is	O
NOT	O
random	O
access	O
(	O
picture	O
a	O
linked	O
-	O
list	O
backed	O
Set	B-api_mention
)	O
,	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
the	O
interface	O
would	O
be	O
deceptive	O
,	O
since	O
it	O
would	O
have	O
to	O
iterate	O
the	O
collection	O
to	O
find	O
the	O
element	O
to	O
return	O
,	O
and	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
seem	O
to	O
imply	O
this	O
would	O
be	O
necessary	O
,	O
that	O
the	O
Set	B-api_mention
could	O
jump	O
directly	O
to	O
the	O
element	O
to	O
get	O
.	O
contains	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
or	O
may	O
not	O
have	O
to	O
do	O
the	O
same	O
thing	O
,	O
of	O
course	O
,	O
depending	O
on	O
the	O
implementation	O
,	O
but	O
the	O
name	O
doesn	O
'	O
t	O
seem	O
to	O
lend	O
itself	O
to	O
the	O
same	O
sort	O
of	O
misunderstandings	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148647	O
Please	O
use	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
19416644	O
,	O
answer	O
-	O
19416665	O
One	O
simple	O
way	O
is	O
to	O
use	O
Float	B-api_mention
.	I-api_mention
NaN	I-api_mention
:	O
#	O
pre	O
#	O
pre	O
You	O
can	O
do	O
the	O
same	O
with	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
.	O
From	O
JLS	O
ยง	O
15	O
.	O
21	O
.	O
1	O
.	O
Numerical	O
Equality	O
Operators	O
=	O
=	O
and	O
!	O
=	O
:	O
#	O
blockquote	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20959594	O
String	B-api_mention
is	O
immutable	O
,	O
but	O
through	O
reflection	O
you	O
'	O
re	O
allowed	O
to	O
change	O
the	O
String	B-api_mention
class	O
.	O
You	O
'	O
ve	O
just	O
redefined	O
the	O
String	B-api_mention
class	O
as	O
mutable	O
in	O
real	O
-	O
time	O
.	O
You	O
could	O
redefine	O
methods	O
to	O
be	O
public	O
or	O
private	O
or	O
static	O
if	O
you	O
wanted	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
31265714	O
In	O
Java	O
8	O
,	O
there	O
is	O
also	O
an	O
alternative	O
to	O
using	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
If	O
your	O
input	O
source	O
isn	O
'	O
t	O
a	O
file	O
but	O
something	O
more	O
abstract	O
like	O
a	O
Reader	B-api_mention
or	O
an	O
InputStream	B-api_mention
,	O
you	O
can	O
stream	O
the	O
lines	O
via	O
the	O
BufferedReader	B-api_mention
s	O
lines	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
For	O
example	O
:	O
#	O
pre	O
will	O
call	O
processLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
each	O
input	O
line	O
read	O
by	O
the	O
BufferedReader	B-api_mention
.	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
21025279	O
Use	O
proper	O
escaping	O
:	O
string	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
the	O
helper	O
Regexp	B-api_mention
.	I-api_mention
quote	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
has	O
been	O
created	O
for	O
exactly	O
this	O
purpose	O
:	O
string	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
works	O
with	O
arbitrary	O
input	O
strings	O
.	O
Very	O
useful	O
when	O
you	O
need	O
to	O
quote	O
/	O
escape	O
user	O
input	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
18496449	O
The	O
first	O
style	O
is	O
the	O
one	O
suggested	O
by	O
Oracle	O
.	O
BufferedWriter	B-api_mention
doesn	O
'	O
t	O
throw	O
checked	O
exceptions	O
,	O
so	O
if	O
any	O
exception	O
is	O
thrown	O
,	O
the	O
program	O
is	O
not	O
expected	O
to	O
recover	O
from	O
it	O
,	O
making	O
resource	O
recover	O
mostly	O
moot	O
.	O
Mostly	O
because	O
it	O
could	O
happen	O
in	O
a	O
thread	O
,	O
with	O
the	O
thread	O
dieing	O
but	O
the	O
program	O
still	O
continuing	O
-	O
-	O
say	O
,	O
there	O
was	O
a	O
temporary	O
memory	O
outage	O
that	O
wasn	O
'	O
t	O
long	O
enough	O
to	O
seriously	O
impair	O
the	O
rest	O
of	O
the	O
program	O
.	O
It	O
'	O
s	O
a	O
rather	O
corner	O
case	O
,	O
though	O
,	O
and	O
if	O
it	O
happens	O
often	O
enough	O
to	O
make	O
resource	O
leak	O
a	O
problem	O
,	O
the	O
try	O
-	O
with	O
-	O
resources	O
is	O
the	O
least	O
of	O
your	O
problems	O
.	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877283	O
The	O
Integer	B-api_mention
class	O
has	O
a	O
static	O
cache	O
,	O
that	O
stores	O
256	O
special	O
Integer	B-api_mention
objects	O
-	O
one	O
for	O
every	O
value	O
between	O
-	O
128	O
and	O
127	O
.	O
With	O
that	O
in	O
mind	O
,	O
consider	O
the	O
difference	O
between	O
these	O
three	O
.	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
(	O
obviously	O
)	O
makes	O
a	O
brand	O
new	O
Integer	B-api_mention
object	O
.	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
an	O
int	O
primitive	O
value	O
after	O
parsing	O
the	O
String	B-api_mention
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
more	O
complex	O
than	O
the	O
others	O
.	O
It	O
starts	O
off	O
by	O
parsing	O
the	O
String	B-api_mention
.	O
Then	O
,	O
if	O
the	O
value	O
is	O
between	O
-	O
128	O
and	O
127	O
,	O
it	O
returns	O
the	O
corresponding	O
object	O
from	O
the	O
static	O
cache	O
.	O
If	O
the	O
value	O
is	O
outside	O
of	O
this	O
range	O
,	O
then	O
it	O
invokes	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
passes	O
in	O
the	O
value	O
,	O
so	O
that	O
you	O
get	O
a	O
new	O
object	O
.	O
Now	O
,	O
consider	O
the	O
three	O
expressions	O
in	O
the	O
question	O
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
true	O
,	O
because	O
the	O
Integer	B-api_mention
whose	O
value	O
is	O
127	O
is	O
retrieved	O
twice	O
from	O
the	O
static	O
cache	O
,	O
and	O
compared	O
to	O
itself	O
.	O
There	O
'	O
s	O
only	O
one	O
Integer	B-api_mention
object	O
involved	O
,	O
so	O
this	O
returns	O
true	O
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
false	O
,	O
because	O
128	O
is	O
not	O
in	O
the	O
static	O
cache	O
.	O
So	O
a	O
new	O
Integer	B-api_mention
is	O
created	O
for	O
each	O
side	O
of	O
the	O
equality	O
.	O
Since	O
there	O
are	O
two	O
different	O
Integer	B-api_mention
objects	O
,	O
and	O
=	O
=	O
for	O
objects	O
only	O
returns	O
true	O
if	O
both	O
sides	O
are	O
the	O
exact	O
same	O
object	O
,	O
this	O
is	O
going	O
to	O
be	O
false	O
.	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
comparing	O
the	O
primitive	O
int	O
value	O
128	O
on	O
the	O
left	O
,	O
with	O
a	O
newly	O
created	O
Integer	B-api_mention
object	O
on	O
the	O
right	O
.	O
But	O
because	O
it	O
doesn	O
'	O
t	O
make	O
sense	O
to	O
compare	O
an	O
int	O
to	O
an	O
Integer	B-api_mention
,	O
Java	O
will	O
auto	O
-	O
unbox	O
the	O
Integer	B-api_mention
before	O
doing	O
the	O
comparison	O
;	O
so	O
you	O
end	O
up	O
comparing	O
an	O
int	O
to	O
an	O
int	O
.	O
Since	O
the	O
primitive	O
128	O
is	O
equal	O
to	O
itself	O
,	O
this	O
returns	O
true	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29097694	O
Please	O
do	O
not	O
vote	O
.	O
I	O
do	O
not	O
have	O
enough	O
place	O
to	O
explain	O
this	O
in	O
comments	O
.	O
This	O
is	O
a	O
solution	O
with	O
a	O
Stream	B-api_mention
and	O
a	O
foreach	O
but	O
this	O
is	O
strictly	O
equivalent	O
to	O
Alexis	O
'	O
s	O
solution	O
or	O
a	O
foreach	O
loop	O
(	O
and	O
less	O
clear	O
,	O
and	O
I	O
could	O
not	O
get	O
rid	O
of	O
the	O
copy	O
constructor	O
)	O
:	O
#	O
pre	O
I	O
understand	O
that	O
you	O
want	O
to	O
find	O
a	O
more	O
elegant	O
solution	O
with	O
Java	O
8	O
but	O
I	O
truly	O
think	O
that	O
it	O
has	O
not	O
been	O
designed	O
for	O
this	O
case	O
.	O
And	O
as	O
said	O
by	O
Mr	O
spoon	O
,	O
highly	O
prefer	O
the	O
naive	O
way	O
in	O
this	O
case	O
.	O
Question	O
-	O
14014086	O
,	O
answer	O
-	O
20784007	O
Ken	O
'	O
s	O
answer	O
is	O
basically	O
right	O
but	O
I	O
'	O
d	O
like	O
to	O
chime	O
in	O
on	O
the	O
"	O
why	O
would	O
you	O
want	O
to	O
use	O
one	O
over	O
the	O
other	O
?	O
"	O
part	O
of	O
your	O
question	O
.	O
Basics	O
The	O
base	O
interface	O
you	O
choose	O
for	O
your	O
repository	O
has	O
two	O
main	O
purposes	O
.	O
First	O
,	O
you	O
allow	O
the	O
Spring	O
Data	O
repository	O
infrastructure	O
to	O
find	O
your	O
interface	O
and	O
trigger	O
the	O
proxy	O
creation	O
so	O
that	O
you	O
inject	O
instances	O
of	O
the	O
interface	O
into	O
clients	O
.	O
The	O
second	O
purpose	O
is	O
to	O
pull	O
in	O
as	O
much	O
functionality	O
as	O
needed	O
into	O
the	O
interface	O
without	O
having	O
to	O
declare	O
extra	O
methods	O
.	O
The	O
common	O
interfaces	O
The	O
Spring	O
Data	O
core	O
library	O
ships	O
with	O
two	O
base	O
interfaces	O
that	O
expose	O
a	O
dedicated	O
set	O
of	O
functionalities	O
:	O
#	O
li	O
CrudRepository	B-api_mention
-	O
CRUD	O
methods	O
#	O
li	O
PagingAndSortingRepository	B-api_mention
-	O
methods	O
for	O
pagination	O
and	O
sorting	O
(	O
extends	O
CrudRepository	B-api_mention
)	O
Store	O
-	O
specific	O
interfaces	O
The	O
individual	O
store	O
modules	O
(	O
e	O
.	O
g	O
.	O
for	O
JPA	O
or	O
MongoDB	O
)	O
expose	O
store	O
-	O
specific	O
extensions	O
of	O
these	O
base	O
interfaces	O
to	O
allow	O
access	O
to	O
store	O
-	O
specific	O
functionality	O
like	O
flushing	O
or	O
dedicated	O
batching	O
that	O
take	O
some	O
store	O
specifics	O
into	O
account	O
.	O
An	O
example	O
for	O
this	O
is	O
deleteInBatch	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
JpaRepository	B-api_mention
which	O
is	O
different	O
from	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
it	O
uses	O
a	O
query	O
to	O
delete	O
the	O
given	O
entities	O
which	O
is	O
more	O
performant	O
but	O
comes	O
with	O
the	O
side	O
effect	O
of	O
not	O
triggering	O
the	O
JPA	O
-	O
defined	O
cascades	O
(	O
as	O
the	O
spec	O
defines	O
it	O
)	O
.	O
We	O
generally	O
recommend	O
not	O
to	O
use	O
these	O
base	O
interfaces	O
as	O
they	O
expose	O
the	O
underlying	O
persistence	O
technology	O
to	O
the	O
clients	O
and	O
thus	O
tighten	O
the	O
coupling	O
between	O
them	O
and	O
the	O
repository	O
.	O
Plus	O
,	O
you	O
get	O
a	O
bit	O
away	O
from	O
the	O
original	O
definition	O
of	O
a	O
repository	O
which	O
is	O
basically	O
"	O
a	O
collection	O
of	O
entities	O
"	O
.	O
So	O
if	O
you	O
can	O
,	O
stay	O
with	O
PagingAndSortingRepository	B-api_mention
.	O
Custom	O
repository	O
base	O
interfaces	O
The	O
downside	O
of	O
directly	O
depending	O
on	O
one	O
of	O
the	O
provided	O
base	O
interfaces	O
is	O
two	O
-	O
fold	O
.	O
Both	O
of	O
them	O
might	O
be	O
considered	O
as	O
theoretical	O
but	O
I	O
think	O
they	O
'	O
re	O
important	O
to	O
be	O
aware	O
of	O
:	O
#	O
li	O
Depending	O
on	O
a	O
a	O
Spring	O
Data	O
repository	O
interface	O
couples	O
your	O
repository	O
interface	O
to	O
the	O
library	O
.	O
I	O
don	O
'	O
t	O
think	O
this	O
is	O
a	O
particular	O
issue	O
as	O
you	O
'	O
ll	O
probably	O
use	O
abstractions	O
like	O
Page	B-api_mention
or	O
Pageable	B-api_mention
in	O
your	O
code	O
anyway	O
.	O
Spring	O
Data	O
is	O
not	O
any	O
different	O
from	O
any	O
other	O
general	O
purpose	O
library	O
like	O
commons	O
-	O
lang	O
or	O
Guava	O
.	O
As	O
long	O
as	O
it	O
provides	O
reasonable	O
benefit	O
,	O
it	O
'	O
s	O
just	O
fine	O
.	O
#	O
li	O
By	O
extending	O
e	O
.	O
g	O
.	O
CrudRepository	B-api_mention
,	O
you	O
expose	O
a	O
complete	O
set	O
of	O
persistence	O
method	O
at	O
once	O
.	O
This	O
is	O
probably	O
fine	O
in	O
most	O
circumstances	O
as	O
well	O
but	O
you	O
might	O
run	O
into	O
situations	O
where	O
you	O
'	O
d	O
like	O
to	O
gain	O
more	O
fine	O
-	O
grained	O
control	O
over	O
the	O
methods	O
expose	O
,	O
e	O
.	O
g	O
.	O
to	O
create	O
a	O
ReadOnlyRepository	B-api_mention
that	O
doesn	O
'	O
t	O
include	O
the	O
save	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
of	O
CrudRepository	B-api_mention
.	O
The	O
solution	O
to	O
both	O
of	O
these	O
downsides	O
is	O
to	O
craft	O
your	O
own	O
base	O
repository	O
interface	O
or	O
even	O
a	O
set	O
of	O
them	O
.	O
In	O
a	O
lot	O
of	O
applications	O
we	O
'	O
ve	O
seen	O
something	O
like	O
this	O
:	O
#	O
pre	O
The	O
first	O
repository	O
interface	O
is	O
some	O
general	O
purpose	O
base	O
interface	O
that	O
actually	O
only	O
fixes	O
point	O
1	O
but	O
also	O
ties	O
the	O
ID	O
type	O
to	O
be	O
Long	O
for	O
consistency	O
.	O
The	O
second	O
interface	O
usually	O
has	O
all	O
the	O
find	O
โฆ	O
(	O
โฆ	O
)	O
methods	O
copied	O
from	O
CrudRepository	B-api_mention
and	O
PagingAndSortingRepository	B-api_mention
but	O
does	O
not	O
expose	O
the	O
manipulating	O
ones	O
.	O
Read	O
more	O
on	O
that	O
approach	O
in	O
the	O
reference	O
documentation	O
.	O
Summary	O
-	O
tl	O
;	O
dr	O
The	O
repository	O
abstraction	O
allows	O
you	O
to	O
pickt	O
the	O
base	O
repository	O
totally	O
driven	O
by	O
you	O
architectural	O
and	O
functional	O
needs	O
.	O
Use	O
the	O
ones	O
provided	O
out	O
of	O
the	O
box	O
if	O
they	O
suit	O
,	O
craft	O
your	O
own	O
repository	O
base	O
interfaces	O
if	O
necessary	O
.	O
Stay	O
away	O
from	O
the	O
store	O
specific	O
repository	O
interfaces	O
unless	O
unavoidable	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777312	O
Arrays	O
inherit	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
Object	O
and	O
hence	O
compare	O
only	O
returns	O
true	O
if	O
comparing	O
an	O
array	O
against	O
itself	O
.	O
On	O
the	O
other	O
hand	O
,	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
compares	O
the	O
elements	O
of	O
the	O
arrays	O
.	O
This	O
snippet	O
elucidates	O
the	O
difference	O
:	O
#	O
pre	O
See	O
also	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Another	O
static	O
method	O
there	O
may	O
also	O
be	O
of	O
interest	O
:	O
Arrays	B-api_mention
.	I-api_mention
deepEquals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14495128	O
If	O
the	O
Math	B-api_mention
.	I-api_mention
Random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
calls	O
the	O
operating	O
system	O
to	O
get	O
the	O
time	O
of	O
day	O
,	O
then	O
you	O
cannot	O
compare	O
it	O
to	O
your	O
function	O
.	O
Your	O
function	O
is	O
a	O
PRNG	O
,	O
whereas	O
that	O
function	O
is	O
striving	O
for	O
real	O
random	O
numbers	O
.	O
Apples	O
and	O
oranges	O
.	O
Your	O
PRNG	O
may	O
be	O
fast	O
,	O
but	O
it	O
does	O
not	O
have	O
enough	O
state	O
information	O
to	O
achieve	O
a	O
long	O
period	O
before	O
it	O
repeats	O
(	O
and	O
its	O
logic	O
is	O
not	O
sophisticated	O
enough	O
to	O
even	O
achieve	O
the	O
periods	O
that	O
are	O
possible	O
with	O
that	O
much	O
state	O
information	O
)	O
.	O
Period	O
is	O
the	O
length	O
of	O
the	O
sequence	O
before	O
your	O
PRNG	O
begins	O
to	O
repeat	O
itself	O
.	O
This	O
happens	O
as	O
soon	O
as	O
the	O
PRNG	O
machine	O
makes	O
a	O
state	O
transition	O
to	O
a	O
state	O
which	O
is	O
identical	O
to	O
some	O
past	O
state	O
.	O
From	O
there	O
,	O
it	O
will	O
repeat	O
the	O
transitions	O
which	O
began	O
in	O
that	O
state	O
.	O
Another	O
problem	O
with	O
PRNG	O
'	O
s	O
can	O
be	O
a	O
low	O
number	O
of	O
unique	O
sequences	O
,	O
as	O
well	O
as	O
degenerate	O
convergence	O
on	O
a	O
particular	O
sequence	O
which	O
repeats	O
.	O
There	O
can	O
also	O
be	O
undesirable	O
patterns	O
.	O
For	O
instance	O
,	O
suppose	O
that	O
a	O
PRNG	O
looks	O
fairly	O
random	O
when	O
the	O
numbers	O
are	O
printed	O
in	O
decimal	O
,	O
but	O
an	O
inspection	O
of	O
the	O
values	O
in	O
binary	O
shows	O
that	O
bit	O
4	O
is	O
simply	O
toggling	O
between	O
0	O
and	O
1	O
on	O
each	O
call	O
.	O
Oops	O
!	O
Take	O
a	O
look	O
at	O
the	O
Mersenne	O
Twister	O
and	O
other	O
algorithms	O
.	O
There	O
are	O
ways	O
to	O
strike	O
a	O
balance	O
between	O
the	O
period	O
length	O
and	O
CPU	O
cycles	O
.	O
One	O
basic	O
approach	O
(	O
used	O
in	O
the	O
Mersenne	O
Twister	O
)	O
is	O
to	O
cycle	O
around	O
in	O
the	O
state	O
vector	O
.	O
That	O
is	O
to	O
say	O
,	O
when	O
a	O
number	O
is	O
being	O
generated	O
,	O
it	O
is	O
not	O
based	O
on	O
the	O
entire	O
state	O
,	O
just	O
on	O
a	O
few	O
words	O
from	O
the	O
state	O
array	O
subject	O
to	O
a	O
few	O
bit	O
operations	O
.	O
But	O
at	O
each	O
step	O
,	O
the	O
algorithm	O
also	O
moves	O
around	O
in	O
the	O
array	O
,	O
scrambling	O
the	O
contents	O
a	O
little	O
bit	O
at	O
a	O
time	O
.	O
Question	O
-	O
22740464	O
,	O
answer	O
-	O
22741520	O
Unfortunately	O
this	O
answer	O
is	O
probably	O
of	O
little	O
or	O
no	O
help	O
whatsoever	O
,	O
but	O
I	O
did	O
a	O
forensics	O
analysis	O
of	O
the	O
Java	O
Lambda	O
Mailing	O
list	O
to	O
see	O
if	O
I	O
could	O
find	O
the	O
cause	O
of	O
this	O
design	O
.	O
This	O
is	O
what	O
I	O
found	O
out	O
.	O
In	O
the	O
beginning	O
there	O
was	O
an	O
instance	O
method	O
for	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
Stream	I-api_mention
)	I-api_mention
In	O
the	O
mailing	O
list	O
I	O
can	O
clearly	O
see	O
the	O
method	O
was	O
originally	O
implemented	O
as	O
an	O
instance	O
method	O
,	O
as	O
you	O
can	O
read	O
in	O
this	O
thread	O
by	O
Paul	O
Sandoz	O
,	O
about	O
the	O
concat	B-api_mention
operation	O
.	O
In	O
it	O
they	O
discuss	O
the	O
issues	O
that	O
could	O
arise	O
from	O
those	O
cases	O
in	O
which	O
the	O
stream	O
could	O
be	O
infinite	O
and	O
what	O
concatenation	O
would	O
mean	O
in	O
those	O
cases	O
,	O
but	O
I	O
do	O
not	O
think	O
that	O
was	O
the	O
reason	O
for	O
the	O
modification	O
.	O
You	O
see	O
in	O
this	O
other	O
thread	O
that	O
some	O
early	O
users	O
of	O
the	O
JDK	O
8	O
questioned	O
about	O
the	O
behavior	O
of	O
the	O
concat	O
instance	O
method	O
when	O
used	O
with	O
null	O
arguments	O
.	O
This	O
other	O
thread	O
reveals	O
,	O
though	O
,	O
that	O
the	O
design	O
of	O
the	O
concat	O
method	O
was	O
under	O
discussion	O
.	O
Refactored	O
to	O
Streams	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
Stream	I-api_mention
,	I-api_mention
Stream	I-api_mention
)	I-api_mention
But	O
without	O
any	O
explanation	O
,	O
suddenly	O
,	O
the	O
methods	O
were	O
changed	O
to	O
static	O
methods	O
,	O
as	O
you	O
can	O
see	O
in	O
this	O
thread	O
about	O
combining	O
streams	O
.	O
This	O
is	O
perhaps	O
the	O
only	O
mail	O
thread	O
that	O
sheds	O
a	O
bit	O
of	O
light	O
about	O
this	O
change	O
,	O
but	O
it	O
was	O
not	O
clear	O
enough	O
for	O
me	O
to	O
determine	O
the	O
reason	O
for	O
the	O
refactoring	O
.	O
But	O
we	O
can	O
see	O
they	O
did	O
a	O
commit	O
in	O
which	O
they	O
suggested	O
to	O
move	O
the	O
concat	O
method	O
out	O
of	O
Stream	B-api_mention
and	O
into	O
the	O
helper	O
class	O
Streams	B-api_mention
.	O
Refactored	O
to	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
Stream	I-api_mention
,	I-api_mention
Stream	I-api_mention
)	I-api_mention
Later	O
,	O
it	O
was	O
moved	O
again	O
from	O
Streams	B-api_mention
to	O
Stream	B-api_mention
,	O
but	O
yet	O
again	O
,	O
no	O
explanation	O
for	O
that	O
.	O
So	O
,	O
bottom	O
line	O
,	O
the	O
reason	O
for	O
the	O
design	O
is	O
not	O
entirely	O
clear	O
for	O
me	O
and	O
I	O
could	O
not	O
find	O
a	O
good	O
explanation	O
.	O
I	O
guess	O
you	O
could	O
still	O
ask	O
the	O
question	O
in	O
the	O
mailing	O
list	O
.	O
Some	O
Alternatives	O
for	O
Stream	B-api_mention
Concatenation	O
This	O
other	O
thread	O
by	O
Michael	O
Hixson	O
discusses	O
/	O
asks	O
about	O
other	O
ways	O
to	O
combine	O
/	O
concat	O
streams	O
#	O
blockquote	O
Question	O
-	O
15156857	O
I	O
have	O
a	O
method	O
with	O
a	O
void	O
return	O
type	O
.	O
It	O
can	O
also	O
throw	O
a	O
number	O
of	O
exceptions	O
so	O
I	O
'	O
d	O
like	O
to	O
test	O
those	O
exceptions	O
being	O
thrown	O
.	O
All	O
attempts	O
have	O
failed	O
with	O
the	O
same	O
reason	O
:	O
#	O
blockquote	O
Any	O
ideas	O
how	O
I	O
can	O
get	O
the	O
method	O
to	O
throw	O
a	O
specified	O
exception	O
?	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
5455794	O
,	O
answer	O
-	O
5455820	O
How	O
about	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Refer	O
here	O
.	O
Question	O
-	O
13604703	O
,	O
answer	O
-	O
13604748	O
Lambdas	O
are	O
purely	O
a	O
call	O
-	O
site	O
construct	O
:	O
the	O
recipient	O
of	O
the	O
lambda	O
does	O
not	O
need	O
to	O
know	O
that	O
a	O
Lambda	O
is	O
involved	O
,	O
instead	O
it	O
accepts	O
an	O
Interface	O
with	O
the	O
appropriate	O
method	O
.	O
In	O
other	O
words	O
,	O
you	O
define	O
or	O
use	O
a	O
functional	O
interface	O
(	O
i	O
.	O
e	O
.	O
an	O
interface	O
with	O
a	O
single	O
method	O
)	O
that	O
accepts	O
and	O
returns	O
exactly	O
what	O
you	O
want	O
.	O
For	O
this	O
Java	O
8	O
comes	O
with	O
a	O
set	O
of	O
commonly	O
-	O
used	O
interface	O
types	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
(	O
thanks	O
to	O
Maurice	O
Naftalin	O
for	O
the	O
hint	O
about	O
the	O
JavaDoc	O
)	O
.	O
For	O
this	O
specific	O
use	O
case	O
there	O
'	O
s	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	I-api_mention
IntBinaryOperator	I-api_mention
with	O
a	O
single	O
int	O
applyAsInt	B-api_mention
(	I-api_mention
int	I-api_mention
left	I-api_mention
,	I-api_mention
int	I-api_mention
right	I-api_mention
)	I-api_mention
method	O
,	O
so	O
you	O
could	O
write	O
your	O
method	O
like	O
this	O
:	O
#	O
pre	O
But	O
you	O
can	O
just	O
as	O
well	O
define	O
your	O
own	O
interface	O
and	O
use	O
it	O
like	O
this	O
:	O
#	O
pre	O
Using	O
your	O
own	O
interface	O
has	O
the	O
advantage	O
that	O
you	O
can	O
have	O
names	O
that	O
more	O
clearly	O
indicate	O
the	O
intent	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
22502206	O
When	O
reading	O
this	O
question	O
one	O
can	O
get	O
the	O
impression	O
,	O
that	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
in	O
combination	O
with	O
lambda	O
expressions	O
is	O
a	O
shortcut	O
/	O
replacement	O
for	O
writing	O
a	O
traditional	O
for	O
-	O
each	O
loop	O
.	O
This	O
is	O
simply	O
not	O
true	O
.	O
This	O
code	O
from	O
the	O
OP	O
:	O
joins	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
is	O
not	O
intended	O
as	O
a	O
shortcut	O
for	O
writing	O
#	O
pre	O
and	O
should	O
certainly	O
not	O
be	O
used	O
in	O
this	O
way	O
.	O
Instead	O
it	O
is	O
intended	O
as	O
a	O
shortcut	O
(	O
although	O
it	O
is	O
not	O
exactly	O
the	O
same	O
)	O
for	O
writing	O
#	O
pre	O
And	O
it	O
is	O
as	O
a	O
replacement	O
for	O
the	O
following	O
Java	O
7	O
code	O
:	O
#	O
pre	O
Replacing	O
the	O
body	O
of	O
a	O
loop	O
with	O
a	O
functional	O
interface	O
,	O
as	O
in	O
the	O
examples	O
above	O
,	O
makes	O
your	O
code	O
more	O
explicit	O
:	O
You	O
are	O
saying	O
that	O
(	O
1	O
)	O
the	O
body	O
of	O
the	O
loop	O
does	O
not	O
affect	O
the	O
surrounding	O
code	O
and	O
control	O
flow	O
,	O
and	O
(	O
2	O
)	O
the	O
body	O
of	O
the	O
loop	O
may	O
be	O
replaced	O
with	O
a	O
different	O
implementation	O
of	O
the	O
function	O
,	O
without	O
affecting	O
the	O
surrounding	O
code	O
.	O
Not	O
being	O
able	O
to	O
access	O
non	O
final	O
variables	O
of	O
the	O
outer	O
scope	O
is	O
not	O
a	O
deficit	O
of	O
functions	O
/	O
lambdas	O
,	O
it	O
is	O
a	O
feature	O
that	O
distinguishes	O
the	O
semantics	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
from	O
the	O
semantics	O
of	O
a	O
traditional	O
for	O
-	O
each	O
loop	O
.	O
Once	O
one	O
gets	O
used	O
to	O
the	O
syntax	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
,	O
it	O
makes	O
the	O
code	O
more	O
readable	O
,	O
because	O
you	O
immediately	O
get	O
this	O
additional	O
information	O
about	O
the	O
code	O
.	O
Traditional	O
for	O
-	O
each	O
loops	O
will	O
certainly	O
stay	O
good	O
practice	O
(	O
to	O
avoid	O
the	O
overused	O
term	O
"	O
best	O
practice	O
"	O
)	O
in	O
Java	O
.	O
But	O
this	O
doesn	O
'	O
t	O
mean	O
,	O
that	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
should	O
be	O
considered	O
bad	O
practice	O
or	O
bad	O
style	O
.	O
It	O
is	O
always	O
good	O
practice	O
,	O
to	O
use	O
the	O
right	O
tool	O
for	O
doing	O
the	O
job	O
,	O
and	O
this	O
includes	O
mixing	O
traditional	O
for	O
-	O
each	O
loops	O
with	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
,	O
where	O
it	O
makes	O
sense	O
.	O
Since	O
the	O
downsides	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
have	O
already	O
been	O
discussed	O
in	O
this	O
thread	O
,	O
here	O
are	O
some	O
reasons	O
,	O
why	O
you	O
might	O
probably	O
want	O
to	O
use	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
:	O
#	O
li	O
To	O
make	O
your	O
code	O
more	O
explicit	O
:	O
As	O
described	O
above	O
,	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
can	O
make	O
your	O
code	O
more	O
explicit	O
and	O
readable	O
in	O
some	O
situations	O
.	O
#	O
li	O
To	O
make	O
your	O
code	O
more	O
extensible	O
and	O
maintainable	O
:	O
Using	O
a	O
function	O
as	O
the	O
body	O
of	O
a	O
loop	O
allows	O
you	O
to	O
replace	O
this	O
function	O
with	O
different	O
implementations	O
(	O
see	O
Strategy	O
Pattern	O
)	O
.	O
You	O
could	O
e	O
.	O
g	O
.	O
easily	O
replace	O
the	O
lambda	O
expression	O
with	O
a	O
method	O
call	O
,	O
that	O
may	O
be	O
overwritten	O
by	O
sub	O
-	O
classes	O
:	O
joins	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Then	O
you	O
could	O
provide	O
default	O
strategies	O
using	O
an	O
enum	O
,	O
that	O
implements	O
the	O
functional	O
interface	O
.	O
This	O
not	O
only	O
makes	O
your	O
code	O
more	O
extensible	O
,	O
it	O
also	O
increases	O
maintainability	O
because	O
it	O
decouples	O
the	O
loop	O
implementation	O
from	O
the	O
loop	O
declaration	O
.	O
#	O
li	O
To	O
make	O
your	O
code	O
more	O
debuggable	O
:	O
Seperating	O
the	O
loop	O
implementation	O
from	O
the	O
declaration	O
can	O
also	O
make	O
debugging	O
more	O
easy	O
,	O
because	O
you	O
could	O
have	O
a	O
specialized	O
debug	O
implementation	O
,	O
that	O
prints	O
out	O
debug	O
messages	O
,	O
without	O
the	O
need	O
to	O
clutter	O
your	O
main	O
code	O
with	O
if	O
(	O
args	O
)	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
debug	O
implementation	O
could	O
e	O
.	O
g	O
.	O
be	O
a	O
delegate	O
,	O
that	O
decorates	O
the	O
actual	O
function	O
implementation	O
.	O
#	O
li	O
To	O
optimize	O
performance	O
-	O
critical	O
code	O
:	O
Contrary	O
to	O
some	O
of	O
the	O
assertions	O
in	O
this	O
thread	O
,	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
does	O
already	O
provide	O
better	O
performance	O
than	O
a	O
traditional	O
for	O
-	O
each	O
loop	O
,	O
at	O
least	O
when	O
using	O
ArrayList	B-api_mention
and	O
running	O
Hotspot	O
in	O
"	O
-	O
client	O
"	O
mode	O
.	O
While	O
this	O
performance	O
boost	O
is	O
small	O
and	O
negligible	O
for	O
most	O
use	O
cases	O
,	O
there	O
are	O
situations	O
,	O
where	O
this	O
extra	O
performance	O
can	O
make	O
a	O
difference	O
.	O
E	O
.	O
g	O
.	O
library	O
maintainers	O
will	O
certainly	O
want	O
to	O
evaluate	O
,	O
if	O
some	O
of	O
their	O
existing	O
loop	O
implementations	O
should	O
be	O
replaced	O
with	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
.	O
To	O
back	O
this	O
statement	O
up	O
with	O
facts	O
,	O
I	O
have	O
done	O
some	O
micro	O
-	O
benchmarks	O
with	O
Caliper	O
.	O
Here	O
is	O
the	O
test	O
code	O
(	O
latest	O
Caliper	O
from	O
git	O
is	O
needed	O
)	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
results	O
:	O
#	O
li	O
Results	O
for	O
-	O
client	O
#	O
li	O
Results	O
for	O
-	O
server	O
When	O
running	O
with	O
"	O
-	O
client	O
"	O
,	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
outperforms	O
the	O
traditional	O
for	O
loop	O
over	O
an	O
ArrayList	B-api_mention
,	O
but	O
is	O
still	O
slower	O
than	O
directly	O
iterating	O
over	O
an	O
array	O
.	O
When	O
running	O
with	O
"	O
-	O
server	O
"	O
,	O
the	O
performance	O
of	O
all	O
approaches	O
is	O
about	O
the	O
same	O
.	O
#	O
li	O
To	O
provide	O
optional	O
support	O
for	O
parallel	O
execution	O
:	O
It	O
has	O
already	O
been	O
said	O
here	O
,	O
that	O
the	O
possibility	O
to	O
execute	O
the	O
functional	O
interface	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
in	O
parallel	O
using	O
streams	O
,	O
is	O
certainly	O
an	O
important	O
aspect	O
.	O
Since	O
Collection	B-api_mention
#	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
guarantee	O
,	O
that	O
the	O
loop	O
is	O
actually	O
executed	O
in	O
parallel	O
,	O
one	O
must	O
consider	O
this	O
an	O
optional	O
feature	O
.	O
By	O
iterating	O
over	O
your	O
list	O
with	O
list	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
you	O
explicitly	O
say	O
:	O
This	O
loop	O
supports	O
parallel	O
execution	O
,	O
but	O
it	O
does	O
not	O
depend	O
on	O
it	O
.	O
Again	O
,	O
this	O
is	O
a	O
feature	O
and	O
not	O
a	O
deficit	O
!	O
By	O
moving	O
the	O
decision	O
for	O
parallel	O
execution	O
away	O
from	O
your	O
actual	O
loop	O
implementation	O
,	O
you	O
allow	O
optional	O
optimization	O
of	O
your	O
code	O
,	O
without	O
affecting	O
the	O
code	O
itself	O
,	O
which	O
is	O
a	O
good	O
thing	O
.	O
Also	O
,	O
if	O
the	O
default	O
parallel	O
stream	O
implementation	O
does	O
not	O
fit	O
your	O
needs	O
,	O
no	O
one	O
is	O
preventing	O
you	O
from	O
providing	O
your	O
own	O
implementation	O
.	O
You	O
could	O
e	O
.	O
g	O
.	O
provide	O
an	O
optimized	O
collection	O
depending	O
on	O
the	O
underlying	O
operating	O
system	O
,	O
on	O
the	O
size	O
of	O
the	O
collection	O
,	O
on	O
the	O
number	O
of	O
cores	O
,	O
and	O
on	O
some	O
preference	O
settings	O
:	O
#	O
pre	O
The	O
nice	O
thing	O
here	O
is	O
,	O
that	O
your	O
loop	O
implementation	O
doesn	O
'	O
t	O
need	O
to	O
know	O
or	O
care	O
about	O
these	O
details	O
.	O
Question	O
-	O
4812570	O
,	O
answer	O
-	O
21765043	O
You	O
can	O
use	O
the	O
ExceptionUtils	B-api_mention
.	I-api_mention
getStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
from	O
Apache	O
Commons	O
3	O
class	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
commons	I-api_mention
.	I-api_mention
lang3	I-api_mention
.	I-api_mention
exception	I-api_mention
.	I-api_mention
ExceptionUtils	I-api_mention
.	O
#	O
a	O
Question	O
-	O
6608795	O
I	O
wonder	O
what	O
the	O
difference	O
is	O
between	O
Class	B-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
ClassLoader	B-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
edit	O
:	O
I	O
especially	O
want	O
to	O
know	O
if	O
any	O
caching	O
is	O
involved	O
on	O
file	O
/	O
directory	O
level	O
.	O
As	O
in	O
"	O
are	O
directory	O
listings	O
cached	O
in	O
the	O
Class	B-api_mention
version	O
?	O
"	O
AFAIK	O
the	O
following	O
should	O
essentially	O
do	O
the	O
same	O
,	O
but	O
they	O
are	O
not	O
:	O
#	O
pre	O
I	O
discovered	O
this	O
when	O
fiddling	O
with	O
some	O
report	O
generation	O
code	O
that	O
creates	O
a	O
new	O
file	O
in	O
WEB	O
-	O
INF	O
/	O
classes	O
/	O
from	O
an	O
existing	O
file	O
in	O
that	O
directory	O
.	O
When	O
using	O
the	O
method	O
from	O
Class	B-api_mention
,	O
I	O
could	O
find	O
files	O
that	O
were	O
there	O
at	O
deployment	O
using	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
when	O
trying	O
to	O
fetch	O
the	O
newly	O
created	O
file	O
,	O
I	O
recieved	O
a	O
null	O
object	O
.	O
Browsing	O
the	O
directory	O
clearly	O
shows	O
that	O
the	O
new	O
file	O
is	O
there	O
.	O
The	O
filenames	O
were	O
prepended	O
with	O
a	O
forward	O
slash	O
as	O
in	O
"	O
/	O
myFile	O
.	O
txt	O
"	O
.	O
The	O
ClassLoader	B-api_mention
version	O
of	O
getResource	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
the	O
other	O
hand	O
did	O
find	O
the	O
generated	O
file	O
.	O
From	O
this	O
experience	O
it	O
seems	O
that	O
there	O
is	O
some	O
kind	O
of	O
caching	O
of	O
the	O
directory	O
listing	O
going	O
on	O
.	O
Am	O
I	O
right	O
,	O
and	O
if	O
so	O
,	O
where	O
is	O
this	O
documented	O
?	O
From	O
the	O
API	O
docs	O
on	O
Class	B-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
blockquote	O
To	O
me	O
,	O
this	O
reads	O
"	O
Class	B-api_mention
.	I-api_mention
getResource	I-api_mention
is	O
really	O
calling	O
its	O
own	O
classloader	O
'	O
s	O
getResource	B-api_mention
(	I-api_mention
)	I-api_mention
"	O
.	O
Which	O
would	O
be	O
the	O
same	O
as	O
doing	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
it	O
is	O
obviously	O
not	O
.	O
Could	O
someone	O
please	O
provide	O
me	O
with	O
some	O
illumination	O
into	O
this	O
matter	O
?	O
Question	O
-	O
30581531	O
What	O
is	O
the	O
maximum	O
number	O
of	O
parameters	O
that	O
a	O
method	O
in	O
Java	O
can	O
have	O
and	O
why	O
?	O
I	O
am	O
using	O
Java	O
1	O
.	O
8	O
on	O
a	O
64	O
-	O
bit	O
Windows	O
system	O
.	O
All	O
the	O
answers	O
on	O
StackOverflow	O
about	O
this	O
say	O
that	O
the	O
technical	O
limit	O
is	O
255	O
parameters	O
without	O
specifying	O
why	O
.	O
To	O
be	O
precise	O
,	O
255	O
for	O
static	O
and	O
254	O
for	O
non	O
-	O
static	O
(	O
this	O
will	O
be	O
the	O
255th	O
in	O
this	O
case	O
)	O
methods	O
.	O
I	O
thought	O
this	O
could	O
be	O
specified	O
in	O
some	O
sort	O
of	O
specification	O
and	O
that	O
this	O
was	O
simply	O
a	O
statically	O
defined	O
maximum	O
number	O
of	O
parameters	O
allowed	O
.	O
But	O
this	O
was	O
only	O
valid	O
for	O
int	O
and	O
all	O
4	O
-	O
bytes	O
types	O
.	O
I	O
did	O
some	O
tests	O
with	O
long	O
parameters	O
,	O
and	O
I	O
was	O
only	O
able	O
to	O
declare	O
127	O
parameters	O
in	O
that	O
case	O
.	O
With	O
String	B-api_mention
parameters	O
,	O
the	O
allowed	O
number	O
i	O
deduced	O
from	O
testing	O
is	O
255	O
(	O
it	O
may	O
be	O
because	O
the	O
reference	O
size	O
is	O
4	O
bytes	O
in	O
Java	O
?	O
)	O
.	O
But	O
since	O
I	O
am	O
using	O
a	O
64	O
-	O
bit	O
system	O
,	O
references	O
size	O
should	O
be	O
8	O
bytes	O
wide	O
and	O
so	O
with	O
String	B-api_mention
parameters	O
the	O
maximum	O
allowed	O
number	O
should	O
be	O
127	O
,	O
similar	O
to	O
long	O
types	O
.	O
How	O
does	O
this	O
limit	O
is	O
exactly	O
applied	O
?	O
Does	O
the	O
limit	O
have	O
anything	O
to	O
do	O
with	O
the	O
stack	O
size	O
of	O
the	O
method	O
?	O
Note	O
:	O
I	O
am	O
not	O
really	O
going	O
to	O
use	O
these	O
many	O
parameters	O
in	O
any	O
method	O
,	O
but	O
this	O
question	O
is	O
only	O
to	O
clarify	O
the	O
exact	O
behavior	O
.	O
Question	O
-	O
5455794	O
,	O
answer	O
-	O
5455809	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
removes	O
all	O
whitespaces	O
and	O
non	O
-	O
visible	O
characters	O
(	O
e	O
.	O
g	O
.	O
,	O
tab	O
,	O
\	O
n	O
)	O
.	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
produce	O
the	O
same	O
result	O
.	O
The	O
second	O
regex	O
is	O
20	O
%	O
faster	O
than	O
the	O
first	O
one	O
,	O
but	O
as	O
the	O
number	O
consecutive	O
spaces	O
increases	O
,	O
the	O
first	O
one	O
performs	O
better	O
than	O
the	O
second	O
one	O
.	O
Assign	O
the	O
value	O
to	O
a	O
variable	O
,	O
if	O
not	O
used	O
directly	O
:	O
st	O
=	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
31445024	O
I	O
'	O
m	O
trying	O
to	O
determine	O
whether	O
the	O
following	O
statements	O
are	O
guaranteed	O
to	O
be	O
true	O
:	O
#	O
pre	O
I	O
'	O
ve	O
always	O
assumed	O
that	O
autoboxing	O
was	O
equivalent	O
to	O
calling	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
the	O
corresponding	O
type	O
.	O
Every	O
discussion	O
that	O
I	O
'	O
ve	O
seen	O
on	O
the	O
topic	O
seems	O
to	O
support	O
my	O
assumption	O
.	O
But	O
all	O
I	O
could	O
find	O
in	O
the	O
JLS	O
was	O
the	O
following	O
(	O
ยง	O
5	O
.	O
1	O
.	O
7	O
)	O
:	O
#	O
blockquote	O
That	O
describes	O
behavior	O
identical	O
to	O
that	O
of	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
there	O
doesn	O
'	O
t	O
seem	O
to	O
be	O
any	O
guarantee	O
that	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
actually	O
invoked	O
,	O
meaning	O
there	O
could	O
theoretically	O
be	O
an	O
implementation	O
that	O
keeps	O
a	O
separate	O
,	O
dedicated	O
cache	O
for	O
autoboxed	O
values	O
.	O
In	O
such	O
a	O
case	O
,	O
there	O
might	O
not	O
be	O
identity	O
equality	O
between	O
cached	O
autoboxed	O
values	O
and	O
regular	O
cached	O
boxed	O
values	O
.	O
Oracle	O
'	O
s	O
autoboxing	O
tutorial	O
states	O
matter	O
-	O
of	O
-	O
factly	O
that	O
li	O
.	O
add	O
(	O
args	O
)	O
is	O
compiled	O
to	O
li	O
.	O
add	O
(	O
args	O
)	O
,	O
where	O
i	O
is	O
an	O
int	O
.	O
But	O
I	O
don	O
'	O
t	O
know	O
whether	O
the	O
tutorial	O
should	O
be	O
considered	O
an	O
authoritative	O
source	O
.	O
Question	O
-	O
22725537	O
,	O
answer	O
-	O
27215810	O
A	O
slightly	O
shorter	O
version	O
using	O
reduce	B-api_mention
:	O
things	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
could	O
also	O
move	O
the	O
reduce	B-api_mention
function	O
to	O
a	O
static	O
utility	O
method	O
and	O
then	O
it	O
becomes	O
:	O
.	B-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
14534791	O
Escape	O
should	O
be	O
done	O
with	O
\	O
,	O
not	O
/	O
.	O
So	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
work	O
(	O
StringBuilder	B-api_mention
has	O
overloaded	O
methods	O
for	O
char	O
and	O
String	B-api_mention
type	O
)	O
.	O
Question	O
-	O
4709175	O
,	O
answer	O
-	O
4709892	O
Something	O
none	O
of	O
the	O
other	O
answers	O
have	O
covered	O
that	O
make	O
enums	O
particularly	O
powerful	O
are	O
the	O
ability	O
to	O
have	O
template	O
methods	O
.	O
Methods	O
can	O
be	O
part	O
of	O
the	O
base	O
enum	O
and	O
overridden	O
by	O
each	O
type	O
.	O
And	O
,	O
with	O
the	O
behavior	O
attached	O
to	O
the	O
enum	O
,	O
it	O
often	O
eliminates	O
the	O
need	O
for	O
if	O
-	O
else	O
constructs	O
or	O
switch	O
statements	O
as	O
this	O
blog	O
post	O
demonstrates	O
-	O
where	O
enum	O
.	O
method	O
(	O
args	O
)	O
does	O
what	O
originally	O
would	O
be	O
executed	O
inside	O
the	O
conditional	O
.	O
The	O
same	O
example	O
also	O
shows	O
the	O
use	O
of	O
static	O
imports	O
with	O
enums	O
as	O
well	O
producing	O
much	O
cleaner	O
DSL	O
like	O
code	O
.	O
Some	O
other	O
interesting	O
qualities	O
include	O
the	O
fact	O
that	O
enums	O
provide	O
implementation	O
for	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
implement	O
Serializable	B-api_mention
and	O
Comparable	B-api_mention
.	O
For	O
a	O
complete	O
rundown	O
of	O
all	O
that	O
enums	O
have	O
to	O
offer	O
I	O
highly	O
recommend	O
Bruce	O
Eckel	O
'	O
s	O
Thinking	O
in	O
Java	O
4th	O
edition	O
which	O
devotes	O
an	O
entire	O
chapter	O
to	O
the	O
topic	O
.	O
Particularly	O
illuminating	O
are	O
the	O
examples	O
involving	O
a	O
Rock	O
,	O
Paper	O
,	O
Scissors	O
(	O
i	O
.	O
e	O
.	O
RoShamBo	O
)	O
game	O
as	O
enums	O
.	O
Question	O
-	O
23699371	O
In	O
Java	O
8	O
how	O
can	O
I	O
filter	O
a	O
collection	O
using	O
the	O
Stream	B-api_mention
API	O
by	O
checking	O
the	O
distinctness	O
of	O
a	O
property	O
of	O
each	O
object	O
?	O
For	O
example	O
I	O
have	O
a	O
list	O
of	O
Person	B-api_mention
object	O
and	O
I	O
want	O
to	O
remove	O
people	O
with	O
the	O
same	O
name	O
,	O
persons	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
distinct	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Will	O
use	O
the	O
default	O
equality	O
check	O
for	O
a	O
Person	B-api_mention
object	O
,	O
so	O
I	O
need	O
something	O
like	O
,	O
persons	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
distinct	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Unfortunately	O
the	O
distinct	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
no	O
such	O
overload	O
.	O
Without	O
modifying	O
the	O
equality	O
check	O
inside	O
the	O
Person	O
class	O
is	O
it	O
possible	O
to	O
do	O
this	O
succinctly	O
?	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
27760556	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
13102045	O
,	O
answer	O
-	O
24907860	O
Instead	O
of	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
use	O
input	O
.	B-api_mention
next	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
that	O
should	O
solve	O
the	O
problem	O
.	O
Modified	O
code	O
:	O
#	O
pre	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032137	O
Unless	O
there	O
is	O
a	O
specific	O
optimization	O
that	O
checks	O
if	O
the	O
argument	O
passed	O
to	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
collection	O
itself	O
(	O
and	O
I	O
highly	O
doubt	O
that	O
such	O
an	O
optimization	O
is	O
there	O
)	O
it	O
will	O
be	O
significantly	O
slower	O
than	O
a	O
simple	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Apart	O
from	O
that	O
(	O
and	O
at	O
least	O
equally	O
important	O
)	O
:	O
arraylist	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
just	O
obtuse	O
,	O
confusing	O
code	O
.	O
It	O
is	O
a	O
very	O
backwards	O
way	O
of	O
saying	O
"	O
clear	O
this	O
collection	O
"	O
.	O
What	O
advantage	O
would	O
it	O
have	O
over	O
the	O
very	O
understandable	O
arraylist	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Question	O
-	O
9749746	O
How	O
do	O
atomic	B-api_mention
/	O
volatile	O
/	O
synchronized	O
work	O
internally	O
?	O
What	O
is	O
the	O
difference	O
between	O
the	O
following	O
code	O
blocks	O
?	O
Code	O
1	O
#	O
pre	O
Code	O
2	O
#	O
pre	O
Code	O
3	O
#	O
pre	O
Does	O
volatile	O
work	O
in	O
the	O
following	O
way	O
?	O
Is	O
#	O
pre	O
equivalent	O
to	O
#	O
pre	O
I	O
think	O
that	O
two	O
threads	O
cannot	O
enter	O
a	O
synchronized	O
block	O
at	O
the	O
same	O
time	O
.	O
.	O
.	O
am	O
I	O
right	O
?	O
If	O
this	O
is	O
true	O
then	O
how	O
does	O
atomic	B-api_mention
.	I-api_mention
incrementAndGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
work	O
without	O
synchronized	O
?	O
And	O
is	O
it	O
thread	O
-	O
safe	O
?	O
And	O
what	O
is	O
the	O
difference	O
between	O
internal	O
reading	O
and	O
writing	O
to	O
volatile	O
variables	O
/	O
atomic	B-api_mention
variables	O
?	O
I	O
read	O
in	O
some	O
article	O
that	O
the	O
thread	O
has	O
a	O
local	O
copy	O
of	O
the	O
variables	O
-	O
what	O
is	O
that	O
?	O
Question	O
-	O
21242110	O
What	O
is	O
the	O
best	O
way	O
to	O
convert	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
object	O
to	O
the	O
new	O
JDK	O
8	O
/	O
JSR	O
-	O
310	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalDate	I-api_mention
?	O
#	O
pre	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
34295445	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
)	I-api_mention
We	O
use	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
extract	O
request	O
parameters	O
(	O
i	O
.	O
e	O
.	O
data	O
sent	O
by	O
posting	O
a	O
html	O
form	O
)	O
.	O
The	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
returns	O
String	B-api_mention
value	O
and	O
the	O
data	O
come	O
from	O
client	O
.	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
)	I-api_mention
We	O
use	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
an	O
object	O
added	O
to	O
the	O
request	O
scope	O
on	O
the	O
server	O
side	O
i	O
.	O
e	O
.	O
using	O
request	O
.	B-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
can	O
add	O
any	O
type	O
of	O
object	O
you	O
like	O
here	O
,	O
Strings	O
,	O
Custom	O
objects	O
,	O
in	O
fact	O
any	O
object	O
.	O
You	O
add	O
the	O
attribute	O
to	O
the	O
request	O
and	O
forward	O
the	O
request	O
to	O
another	O
resource	O
,	O
the	O
client	O
does	O
not	O
know	O
about	O
this	O
.	O
So	O
all	O
the	O
code	O
handling	O
this	O
would	O
typically	O
be	O
in	O
JSP	O
/	O
servlets	O
.	O
You	O
can	O
use	O
request	O
.	B-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
add	O
extra	O
-	O
information	O
and	O
forward	O
/	O
redirect	O
the	O
current	O
request	O
to	O
another	O
resource	O
.	O
For	O
example	O
,	O
consider	O
about	O
first	O
.	O
jsp	O
,	O
#	O
pre	O
and	O
second	O
.	O
jsp	O
:	O
#	O
pre	O
From	O
your	O
browser	O
,	O
run	O
first	O
.	O
jsp	O
?	O
CLIENT	O
=	O
you	O
and	O
the	O
output	O
on	O
your	O
browser	O
is	O
#	O
pre	O
The	O
basic	O
difference	O
between	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
that	O
the	O
first	O
method	O
extracts	O
a	O
(	O
serialized	O
)	O
Java	O
object	O
and	O
the	O
other	O
provides	O
a	O
String	B-api_mention
value	O
.	O
For	O
both	O
cases	O
a	O
name	O
is	O
given	O
so	O
that	O
its	O
value	O
(	O
be	O
it	O
string	O
or	O
a	O
java	O
bean	O
)	O
can	O
be	O
looked	O
up	O
and	O
extracted	O
.	O
Question	O
-	O
5011932	O
I	O
am	O
storing	O
a	O
SQL	O
query	O
in	O
my	O
strings	O
.	O
xml	O
file	O
and	O
I	O
want	O
to	O
use	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
to	O
build	O
the	O
final	O
string	O
in	O
code	O
.	O
The	O
SELECT	O
statement	O
uses	O
a	O
like	O
,	O
something	O
like	O
this	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
'	O
%	O
something	O
%	O
'	O
In	O
order	O
to	O
format	O
that	O
I	O
replace	O
'	O
something	O
'	O
with	O
%	O
1	O
$	O
s	O
so	O
it	O
becomes	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
\	O
'	O
%	O
%	O
1	O
$	O
s	O
%	O
\	O
'	O
I	O
escape	O
the	O
single	O
quotes	O
with	O
the	O
backslash	O
.	O
However	O
I	O
am	O
not	O
able	O
to	O
escape	O
the	O
%	O
sign	O
.	O
How	O
can	O
I	O
include	O
a	O
like	O
statement	O
in	O
my	O
strings	O
.	O
xml	O
file	O
?	O
Question	O
-	O
9297899	O
We	O
can	O
determine	O
the	O
length	O
of	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
using	O
its	O
public	O
method	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
like	O
#	O
pre	O
Similarly	O
we	O
can	O
determine	O
the	O
length	O
of	O
an	O
Array	O
object	O
using	O
the	O
length	O
property	O
#	O
pre	O
Whereas	O
the	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
ArrayList	B-api_mention
is	O
defined	O
inside	O
the	O
ArrayList	B-api_mention
class	O
,	O
where	O
is	O
this	O
length	O
property	O
of	O
Array	O
defined	O
?	O
Question	O
-	O
24603186	O
In	O
Java	O
8	O
,	O
the	O
Collection	B-api_mention
interface	O
was	O
extended	O
with	O
two	O
methods	O
that	O
return	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
:	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
a	O
sequential	O
stream	O
,	O
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
a	O
possibly	O
-	O
parallel	O
stream	O
.	O
Stream	O
itself	O
also	O
has	O
a	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
returns	O
an	O
equivalent	O
parallel	O
stream	O
(	O
either	O
mutating	O
the	O
current	O
stream	O
to	O
be	O
parallel	O
or	O
creating	O
a	O
new	O
stream	O
)	O
.	O
The	O
duplication	O
has	O
obvious	O
disadvantages	O
:	O
#	O
li	O
It	O
'	O
s	O
confusing	O
.	O
A	O
question	O
asks	O
whether	O
calling	O
both	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
necessary	O
to	O
be	O
sure	O
the	O
stream	O
is	O
parallel	O
,	O
given	O
that	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
may	O
return	O
a	O
sequential	O
stream	O
.	O
Why	O
does	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
exist	O
if	O
it	O
can	O
'	O
t	O
make	O
a	O
guarantee	O
?	O
The	O
other	O
way	O
around	O
is	O
also	O
confusing	O
-	O
-	O
if	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
returns	O
a	O
sequential	O
stream	O
,	O
there	O
'	O
s	O
probably	O
a	O
reason	O
(	O
e	O
.	O
g	O
.	O
,	O
an	O
inherently	O
sequential	O
data	O
structure	O
for	O
which	O
parallel	O
streams	O
are	O
a	O
performance	O
trap	O
)	O
;	O
what	O
should	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
do	O
for	O
such	O
a	O
stream	O
?	O
(	O
UnsupportedOperationException	B-api_mention
is	O
not	O
allowed	O
by	O
parallel	B-api_mention
(	I-api_mention
)	I-api_mention
'	O
s	O
specification	O
.	O
)	O
#	O
li	O
Adding	O
methods	O
to	O
an	O
interface	O
risks	O
conflicts	O
if	O
an	O
existing	O
implementation	O
has	O
a	O
similarly	O
-	O
named	O
method	O
with	O
an	O
incompatible	O
return	O
type	O
.	O
Adding	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
addition	O
to	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
doubles	O
the	O
risk	O
for	O
little	O
gain	O
.	O
(	O
Note	O
that	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
was	O
at	O
one	O
point	O
just	O
named	O
parallel	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
though	O
I	O
don	O
'	O
t	O
know	O
if	O
it	O
was	O
renamed	O
to	O
avoid	O
name	O
clashes	O
or	O
for	O
another	O
reason	O
.	O
)	O
Why	O
does	O
Collection	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
)	I-api_mention
exist	O
when	O
calling	O
Collection	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
does	O
the	O
same	O
thing	O
?	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923042	O
The	O
pattern	O
with	O
Optional	B-api_mention
is	O
for	O
one	O
to	O
avoid	O
returning	O
null	O
.	O
It	O
'	O
s	O
still	O
perfectly	O
possible	O
to	O
pass	O
in	O
null	O
to	O
a	O
method	O
.	O
While	O
these	O
aren	O
'	O
t	O
really	O
official	O
yet	O
,	O
you	O
can	O
use	O
JSR	O
-	O
308	O
style	O
annotations	O
to	O
indicate	O
whether	O
or	O
not	O
you	O
accept	O
null	O
values	O
into	O
the	O
function	O
.	O
Note	O
that	O
you	O
'	O
d	O
have	O
to	O
have	O
the	O
right	O
tooling	O
to	O
actually	O
identify	O
it	O
,	O
and	O
it	O
'	O
d	O
provide	O
more	O
of	O
a	O
static	O
check	O
than	O
an	O
enforceable	O
runtime	O
policy	O
,	O
but	O
it	O
would	O
help	O
.	O
public	O
int	O
calculateSomething	O
(	O
args	O
)	O
{	O
}	O
Question	O
-	O
29229373	O
,	O
answer	O
-	O
29230939	O
When	O
looking	O
into	O
the	O
implementation	O
(	O
ReferencePipeline	O
.	O
java	O
)	O
we	O
see	O
the	O
method	O
[	O
link	O
]	O
#	O
pre	O
which	O
will	O
be	O
invoke	O
for	O
findFirst	B-api_mention
operation	O
.	O
The	O
special	O
thing	O
to	O
take	O
care	O
about	O
is	O
the	O
sink	O
.	O
cancellationRequested	O
(	O
args	O
)	O
which	O
allows	O
to	O
end	O
the	O
loop	O
on	O
the	O
first	O
match	O
.	O
Compare	O
to	O
[	O
link	O
]	O
#	O
pre	O
The	O
method	O
for	O
advancing	O
one	O
item	O
ends	O
up	O
calling	O
forEach	O
on	O
the	O
sub	O
-	O
stream	O
without	O
any	O
possibility	O
for	O
earlier	O
termination	O
and	O
the	O
comment	O
at	O
the	O
beginning	O
of	O
the	O
flatMap	O
method	O
even	O
tells	O
about	O
this	O
absent	O
feature	O
.	O
Since	O
this	O
is	O
more	O
than	O
just	O
an	O
optimization	O
thing	O
as	O
it	O
implies	O
that	O
the	O
code	O
simply	O
breaks	O
when	O
the	O
sub	O
-	O
stream	O
is	O
infinite	O
,	O
I	O
hope	O
that	O
the	O
developers	O
soon	O
prove	O
that	O
they	O
โ	O
can	O
do	O
better	O
than	O
this	O
โ	O
โฆ	O
To	O
illustrate	O
the	O
implications	O
,	O
while	O
Stream	B-api_mention
.	I-api_mention
iterate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
works	O
as	O
expected	O
,	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
end	O
up	O
in	O
an	O
infinite	O
loop	O
.	O
Regarding	O
the	O
specification	O
,	O
most	O
of	O
it	O
can	O
be	O
found	O
in	O
the	O
chapter	O
โ	O
Stream	O
operations	O
and	O
pipelines	O
โ	O
of	O
the	O
package	O
specification	O
:	O
#	O
blockquote	O
It	O
โ	O
s	O
clear	O
that	O
a	O
short	O
-	O
circuiting	O
operation	O
doesn	O
โ	O
t	O
guaranty	O
a	O
finite	O
time	O
termination	O
,	O
e	O
.	O
g	O
.	O
when	O
a	O
filter	O
doesn	O
โ	O
t	O
match	O
any	O
item	O
the	O
processing	O
can	O
โ	O
t	O
complete	O
,	O
but	O
an	O
implementation	O
which	O
doesn	O
โ	O
t	O
support	O
any	O
termination	O
in	O
finite	O
time	O
by	O
simply	O
ignoring	O
the	O
short	O
-	O
circuiting	O
nature	O
of	O
an	O
operation	O
is	O
far	O
off	O
the	O
specification	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846964	O
For	O
one	O
,	O
you	O
can	O
get	O
away	O
with	O
reference	O
sharing	O
.	O
A	O
new	O
HashMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
etc	O
will	O
require	O
an	O
allocated	O
object	O
,	O
and	O
possibly	O
some	O
extra	O
elements	O
to	O
hold	O
the	O
data	O
,	O
but	O
you	O
only	O
need	O
one	O
copy	O
of	O
an	O
immutable	O
empty	O
collection	O
(	O
list	O
,	O
set	O
,	O
map	O
,	O
or	O
any	O
other	O
such	O
)	O
.	O
This	O
makes	O
it	O
an	O
obvious	O
choice	O
when	O
a	O
method	O
you	O
'	O
re	O
calling	O
needs	O
to	O
accept	O
a	O
Map	B-api_mention
but	O
does	O
not	O
need	O
to	O
edit	O
it	O
.	O
I	O
suggest	O
checking	O
out	O
Josh	O
Bloch	O
'	O
s	O
Effective	O
Java	O
,	O
which	O
lists	O
some	O
very	O
nice	O
attributes	O
of	O
immutable	O
objects	O
(	O
including	O
thread	O
safety	O
)	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
31965160	O
With	O
Java	O
8	O
Streams	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
if	O
you	O
need	O
a	O
set	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725453	O
Since	O
all	O
lists	O
are	O
already	O
"	O
sorted	O
"	O
by	O
the	O
order	O
the	O
items	O
were	O
added	O
(	O
FIFO	O
ordering	O
)	O
,	O
you	O
can	O
"	O
resort	O
"	O
them	O
with	O
another	O
ordering	O
,	O
including	O
the	O
natural	O
ordering	O
of	O
elements	O
,	O
using	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
EDIT	O
:	O
Lists	B-api_mention
as	O
data	O
structures	O
are	O
based	O
in	O
what	O
is	O
interesting	O
is	O
the	O
ordering	O
in	O
which	O
the	O
items	O
where	O
inserted	O
.	O
Sets	O
do	O
not	O
have	O
that	O
information	O
.	O
If	O
you	O
want	O
to	O
order	O
by	O
addition	O
time	O
,	O
use	O
List	B-api_mention
.	O
If	O
you	O
want	O
to	O
order	O
by	O
other	O
criteria	O
,	O
use	O
SortedSet	B-api_mention
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31871515	O
Autoboxing	O
is	O
absolutely	O
implemented	O
using	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
in	O
the	O
OpenJDK	O
.	O
If	O
that	O
'	O
s	O
your	O
implementation	O
,	O
read	O
on	O
.	O
.	O
.	O
if	O
not	O
,	O
skip	O
to	O
below	O
.	O
#	O
pre	O
Java	O
documentation	O
states	O
that	O
Boolean	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
returns	O
Boolean	B-api_mention
.	I-api_mention
TRUE	I-api_mention
or	O
Boolean	B-api_mention
.	I-api_mention
FALSE	I-api_mention
,	O
therefore	O
your	O
reference	O
comparisons	O
in	O
these	O
cases	O
will	O
succeed	O
.	O
(	O
(	O
Integer	B-api_mention
)	O
1	O
)	O
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
For	O
this	O
particular	O
example	O
,	O
under	O
the	O
OpenJDK	O
implementation	O
with	O
default	O
settings	O
,	O
it	O
will	O
probably	O
work	O
by	O
virtue	O
of	O
the	O
fact	O
that	O
you	O
picked	O
a	O
value	O
<	O
128	O
which	O
is	O
cached	O
at	O
startup	O
(	O
although	O
this	O
can	O
be	O
overridden	O
as	O
a	O
commandline	O
arg	O
)	O
.	O
It	O
may	O
also	O
work	O
for	O
larger	O
values	O
if	O
it	O
'	O
s	O
frequently	O
used	O
enough	O
to	O
be	O
cached	O
.	O
Unless	O
you	O
'	O
re	O
working	O
under	O
"	O
safe	O
"	O
assumptions	O
about	O
the	O
Integer	B-api_mention
cache	O
,	O
don	O
'	O
t	O
expect	O
the	O
reference	O
comparison	O
to	O
be	O
an	O
equality	O
.	O
Long	B-api_mention
,	O
Short	B-api_mention
,	O
Character	B-api_mention
and	O
Byte	B-api_mention
incidentally	O
implement	O
this	O
caching	O
too	O
,	O
but	O
unlike	O
Integer	B-api_mention
,	O
it	O
'	O
s	O
not	O
tunable	O
.	O
Byte	O
will	O
always	O
work	O
if	O
you	O
'	O
re	O
comparing	O
autobox	O
/	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
references	O
since	O
obviously	O
,	O
you	O
can	O
'	O
t	O
go	O
out	O
of	O
range	O
.	O
Float	B-api_mention
and	O
Double	B-api_mention
will	O
unsurprisingly	O
always	O
create	O
a	O
new	O
instance	O
.	O
Now	O
,	O
in	O
purely	O
generic	O
terms	O
?	O
See	O
this	O
section	O
of	O
the	O
JLS	O
-	O
you	O
MUST	O
be	O
given	O
equal	O
references	O
for	O
boolean	O
and	O
any	O
int	O
or	O
char	O
within	O
the	O
-	O
128	O
to	O
127	O
range	O
.	O
There	O
are	O
no	O
guarantees	O
for	O
anything	O
else	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
32542424	O
What	O
you	O
can	O
do	O
is	O
scan	O
the	O
entire	O
text	O
using	O
Scanner	B-api_mention
and	O
go	O
through	O
the	O
text	O
line	O
by	O
line	O
.	O
Of	O
course	O
you	O
should	O
import	O
the	O
following	O
:	O
#	O
pre	O
Scanner	B-api_mention
basically	O
scans	O
all	O
the	O
text	O
.	O
The	O
while	O
loop	O
is	O
used	O
to	O
traverse	O
through	O
the	O
entire	O
text	O
.	O
The	O
.	B-api_mention
hasNextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
is	O
a	O
boolean	O
that	O
returns	O
true	O
if	O
there	O
are	O
still	O
more	O
lines	O
in	O
the	O
text	O
.	O
The	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
gives	O
you	O
an	O
entire	O
line	O
as	O
a	O
String	B-api_mention
which	O
you	O
can	O
then	O
use	O
the	O
way	O
you	O
want	O
.	O
Try	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
print	O
the	O
text	O
.	O
Side	O
Note	O
:	O
.	O
txt	O
is	O
the	O
file	O
type	O
text	O
.	O
Question	O
-	O
22409102	O
,	O
answer	O
-	O
22501695	O
The	O
approach	O
used	O
by	O
Math	B-api_mention
.	I-api_mention
min	I-api_mention
is	O
similar	O
to	O
what	O
Jesper	O
proposes	O
but	O
a	O
little	O
clearer	O
:	O
#	O
pre	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275761	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
defined	O
in	O
Object	B-api_mention
class	O
with	O
the	O
following	O
signature	O
:	O
#	O
blockquote	O
Since	O
it	O
is	O
not	O
defined	O
as	O
static	O
,	O
you	O
can	O
not	O
call	O
it	O
within	O
a	O
static	O
code	O
block	O
.	O
See	O
these	O
answers	O
for	O
more	O
information	O
:	O
Q1	O
,	O
Q2	O
,	O
Q3	O
.	O
If	O
you	O
'	O
re	O
in	O
a	O
static	O
context	O
,	O
then	O
you	O
have	O
to	O
use	O
the	O
class	O
literal	O
expression	O
to	O
get	O
the	O
Class	B-api_mention
,	O
so	O
you	O
basically	O
have	O
to	O
do	O
like	O
:	O
#	O
blockquote	O
This	O
type	O
of	O
expression	O
is	O
called	O
Class	B-api_mention
Literals	O
and	O
they	O
are	O
explained	O
in	O
Java	O
Language	O
Specification	O
Book	O
as	O
follows	O
:	O
#	O
blockquote	O
You	O
can	O
also	O
find	O
information	O
about	O
this	O
subject	O
on	O
API	O
documentation	O
for	O
Class	B-api_mention
.	O
Question	O
-	O
24511052	O
I	O
am	O
looking	O
for	O
a	O
concise	O
way	O
to	O
convert	O
an	O
Iterator	O
to	O
a	O
Stream	B-api_mention
or	O
more	O
specifically	O
to	O
"	O
view	O
"	O
the	O
iterator	O
as	O
a	O
stream	O
.	O
For	O
performance	O
reason	O
,	O
I	O
would	O
like	O
to	O
avoid	O
a	O
copy	O
of	O
the	O
iterator	O
in	O
a	O
new	O
list	O
:	O
#	O
pre	O
Based	O
on	O
the	O
some	O
suggestions	O
in	O
the	O
comments	O
,	O
I	O
have	O
also	O
tried	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
generate	I-api_mention
:	O
#	O
pre	O
However	O
,	O
I	O
get	O
a	O
NoSuchElementException	B-api_mention
(	O
since	O
there	O
is	O
no	O
invocation	O
of	O
hasNext	B-api_mention
)	O
#	O
pre	O
I	O
have	O
looked	O
at	O
StreamSupport	B-api_mention
and	O
Collections	B-api_mention
but	O
I	O
didn	O
'	O
t	O
find	O
anything	O
.	O
Question	O
-	O
14602062	O
,	O
answer	O
-	O
14602155	O
From	O
the	O
documentation	O
of	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
So	O
you	O
will	O
have	O
to	O
use	O
the	O
two	O
argument	O
version	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
,	I-api_mention
int	I-api_mention
limit	I-api_mention
)	I-api_mention
with	O
a	O
negative	O
value	O
:	O
String	B-api_mention
[	O
]	O
split	O
=	O
data	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Doc	O
:	O
#	O
blockquote	O
This	O
will	O
not	O
leave	O
out	O
any	O
empty	O
elements	O
,	O
including	O
the	O
trailing	O
ones	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331323	O
Another	O
way	O
of	O
doing	O
that	O
is	O
:	O
String	B-api_mention
date	O
=	O
dateAndTime	O
.	B-api_mention
substring	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
I	O
'	O
m	O
not	O
exactly	O
certain	O
,	O
but	O
I	O
think	O
this	O
might	O
be	O
faster	O
/	O
use	O
less	O
memory	O
than	O
using	O
the	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28460301	O
Stream	B-api_mention
s	O
are	O
built	O
around	O
Spliterator	O
s	O
which	O
are	O
stateful	O
,	O
mutable	O
objects	O
.	O
They	O
don	O
โ	O
t	O
have	O
a	O
โ	O
reset	O
โ	O
action	O
and	O
in	O
fact	O
,	O
requiring	O
to	O
support	O
such	O
rewind	O
action	O
would	O
โ	O
take	O
away	O
much	O
power	O
โ	O
.	O
How	O
would	O
Random	B-api_mention
.	I-api_mention
ints	I-api_mention
(	I-api_mention
)	I-api_mention
be	O
supposed	O
to	O
handle	O
such	O
a	O
request	O
?	O
On	O
the	O
other	O
hand	O
,	O
for	O
Stream	B-api_mention
s	O
which	O
have	O
a	O
retraceable	O
origin	O
,	O
it	O
is	O
easy	O
to	O
construct	O
an	O
equivalent	O
Stream	B-api_mention
to	O
be	O
used	O
again	O
.	O
Just	O
put	O
the	O
steps	O
made	O
to	O
construct	O
the	O
Stream	B-api_mention
into	O
a	O
reusable	O
method	O
.	O
Keep	O
in	O
mind	O
that	O
repeating	O
these	O
steps	O
is	O
not	O
an	O
expensive	O
operation	O
as	O
all	O
these	O
steps	O
are	O
lazy	O
operations	O
;	O
the	O
actual	O
work	O
starts	O
with	O
the	O
terminal	O
operation	O
and	O
depending	O
on	O
the	O
actual	O
terminal	O
operation	O
entirely	O
different	O
code	O
might	O
get	O
executed	O
.	O
It	O
would	O
be	O
up	O
to	O
you	O
,	O
the	O
writer	O
of	O
such	O
a	O
method	O
,	O
to	O
specify	O
what	O
calling	O
the	O
method	O
twice	O
implies	O
:	O
does	O
it	O
reproduce	O
exactly	O
the	O
same	O
sequence	O
,	O
as	O
streams	O
created	O
for	O
an	O
unmodified	O
array	O
or	O
collection	O
do	O
,	O
or	O
does	O
it	O
produce	O
a	O
stream	O
with	O
a	O
similar	O
semantics	O
but	O
different	O
elements	O
like	O
a	O
stream	O
of	O
random	O
ints	O
or	O
a	O
stream	O
of	O
console	O
input	O
lines	O
,	O
etc	O
.	O
By	O
the	O
way	O
,	O
to	O
avoid	O
confusion	O
,	O
a	O
terminal	O
operation	O
consumes	O
the	O
Stream	B-api_mention
which	O
is	O
distinct	O
from	O
closing	O
the	O
Stream	B-api_mention
as	O
calling	O
close	O
(	O
args	O
)	O
on	O
the	O
stream	O
does	O
(	O
which	O
is	O
required	O
for	O
streams	O
having	O
associated	O
resources	O
like	O
,	O
e	O
.	O
g	O
.	O
produced	O
by	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
It	O
seems	O
that	O
a	O
lot	O
of	O
confusion	O
stems	O
from	O
misguiding	O
comparison	O
of	O
IEnumerable	O
with	O
Stream	B-api_mention
.	O
An	O
IEnumerable	O
represents	O
the	O
ability	O
to	O
provide	O
an	O
actual	O
IEnumerator	O
,	O
so	O
its	O
like	O
an	O
Iterable	B-api_mention
in	O
Java	O
.	O
In	O
contrast	O
,	O
a	O
Stream	B-api_mention
is	O
a	O
kind	O
of	O
iterator	O
and	O
comparable	O
to	O
an	O
IEnumerator	O
so	O
it	O
โ	O
s	O
wrong	O
to	O
claim	O
that	O
this	O
kind	O
of	O
data	O
type	O
can	O
be	O
used	O
multiple	O
times	O
in	O
.	O
NET	O
,	O
the	O
support	O
for	O
IEnumerator	O
.	O
Reset	O
is	O
optional	O
.	O
The	O
examples	O
discussed	O
here	O
rather	O
use	O
the	O
fact	O
that	O
an	O
IEnumerable	O
can	O
be	O
used	O
to	O
fetch	O
new	O
IEnumerator	O
s	O
and	O
that	O
works	O
with	O
Java	O
โ	O
s	O
Collection	B-api_mention
s	O
as	O
well	O
;	O
you	O
can	O
get	O
a	O
new	O
Stream	B-api_mention
.	O
If	O
the	O
Java	O
developers	O
decided	O
to	O
add	O
the	O
Stream	B-api_mention
operations	O
to	O
Iterable	B-api_mention
directly	O
,	O
with	O
intermediate	O
operations	O
returning	O
another	O
Iterable	B-api_mention
,	O
it	O
was	O
really	O
comparable	O
and	O
it	O
could	O
work	O
the	O
same	O
way	O
.	O
However	O
,	O
the	O
developers	O
decided	O
against	O
it	O
and	O
the	O
decision	O
is	O
discussed	O
in	O
this	O
question	O
.	O
The	O
biggest	O
point	O
is	O
the	O
confusion	O
about	O
eager	O
Collection	B-api_mention
operations	O
and	O
lazy	O
Stream	B-api_mention
operations	O
.	O
By	O
looking	O
at	O
the	O
.	O
NET	O
API	O
,	O
I	O
(	O
yes	O
,	O
personally	O
)	O
find	O
it	O
justified	O
.	O
While	O
it	O
looks	O
reasonable	O
looking	O
at	O
IEnumerable	O
alone	O
,	O
a	O
particular	O
Collection	B-api_mention
will	O
have	O
lots	O
of	O
methods	O
manipulating	O
the	O
Collection	B-api_mention
directly	O
and	O
lots	O
of	O
methods	O
returning	O
a	O
lazy	O
IEnumerable	O
,	O
while	O
the	O
particular	O
nature	O
of	O
a	O
method	O
isn	O
โ	O
t	O
always	O
intuitively	O
recognizable	O
.	O
The	O
worst	O
example	O
I	O
found	O
(	O
within	O
the	O
few	O
minutes	O
I	O
looked	O
at	O
it	O
)	O
is	O
List	B-api_mention
.	I-api_mention
Reverse	I-api_mention
(	I-api_mention
)	I-api_mention
whose	O
name	O
matches	O
exactly	O
the	O
name	O
of	O
the	O
inherited	O
(	O
is	O
this	O
the	O
right	O
terminus	O
for	O
extension	O
methods	O
?	O
)	O
Enumerable	O
.	O
Reverse	O
(	O
)	O
while	O
having	O
an	O
entirely	O
contradicting	O
behavior	O
.	O
Of	O
course	O
,	O
these	O
are	O
two	O
distinct	O
decisions	O
.	O
The	O
first	O
one	O
to	O
make	O
Stream	B-api_mention
a	O
type	O
distinct	O
from	O
Iterable	B-api_mention
/	O
Collection	B-api_mention
and	O
the	O
second	O
to	O
make	O
Stream	B-api_mention
a	O
kind	O
of	O
one	O
time	O
iterator	O
rather	O
than	O
another	O
kind	O
of	O
iterable	O
.	O
But	O
these	O
decision	O
were	O
made	O
together	O
and	O
it	O
might	O
be	O
the	O
case	O
that	O
separating	O
these	O
two	O
decision	O
never	O
was	O
considered	O
.	O
It	O
wasn	O
โ	O
t	O
created	O
with	O
being	O
comparable	O
to	O
.	O
NET	O
โ	O
s	O
in	O
mind	O
.	O
The	O
actual	O
API	O
design	O
decision	O
was	O
to	O
add	O
an	O
improved	O
type	O
of	O
iterator	O
,	O
the	O
Spliterator	B-api_mention
.	O
Spliterator	B-api_mention
s	O
can	O
be	O
provided	O
by	O
the	O
old	O
Iterable	B-api_mention
s	O
(	O
which	O
is	O
the	O
way	O
how	O
these	O
were	O
retrofitted	O
)	O
or	O
entirely	O
new	O
implementations	O
.	O
Then	O
,	O
Stream	B-api_mention
was	O
added	O
as	O
a	O
high	O
-	O
level	O
front	O
-	O
end	O
to	O
the	O
rather	O
low	O
level	O
Spliterator	B-api_mention
s	O
.	O
That	O
โ	O
s	O
it	O
.	O
You	O
may	O
discuss	O
about	O
whether	O
a	O
different	O
design	O
would	O
be	O
better	O
,	O
but	O
that	O
โ	O
s	O
not	O
productive	O
,	O
it	O
won	O
โ	O
t	O
change	O
,	O
given	O
the	O
way	O
they	O
are	O
designed	O
now	O
.	O
There	O
is	O
another	O
implementation	O
aspect	O
you	O
have	O
to	O
consider	O
.	O
Stream	B-api_mention
s	O
are	O
not	O
immutable	O
data	O
structures	O
.	O
Each	O
intermediate	O
operation	O
may	O
return	O
a	O
new	O
Stream	B-api_mention
instance	O
encapsulating	O
the	O
old	O
one	O
but	O
it	O
may	O
also	O
manipulate	O
its	O
own	O
instance	O
instead	O
and	O
return	O
itself	O
(	O
that	O
doesn	O
โ	O
t	O
preclude	O
doing	O
even	O
both	O
for	O
the	O
same	O
operation	O
)	O
.	O
Commonly	O
known	O
examples	O
are	O
operations	O
like	O
parallel	O
or	O
unordered	O
which	O
do	O
not	O
add	O
another	O
step	O
but	O
manipulate	O
the	O
entire	O
pipeline	O
)	O
.	O
Having	O
such	O
a	O
mutable	O
data	O
structure	O
and	O
attempts	O
to	O
reuse	O
(	O
or	O
even	O
worse	O
,	O
using	O
it	O
multiple	O
times	O
at	O
the	O
same	O
time	O
)	O
doesn	O
โ	O
t	O
play	O
well	O
โฆ	O
For	O
completeness	O
,	O
here	O
is	O
your	O
quicksort	O
example	O
translated	O
to	O
the	O
Java	O
Stream	B-api_mention
API	O
.	O
It	O
shows	O
that	O
it	O
does	O
not	O
really	O
โ	O
take	O
away	O
much	O
power	O
โ	O
.	O
#	O
pre	O
It	O
can	O
be	O
used	O
like	O
#	O
pre	O
You	O
can	O
write	O
it	O
even	O
more	O
compact	O
as	O
#	O
pre	O
Question	O
-	O
25441088	O
,	O
answer	O
-	O
25441208	O
I	O
think	O
you	O
'	O
re	O
just	O
looking	O
for	O
the	O
overload	O
which	O
takes	O
another	O
Collector	B-api_mention
to	O
specify	O
what	O
to	O
do	O
with	O
each	O
group	O
.	O
.	O
.	O
and	O
then	O
Collectors	B-api_mention
.	I-api_mention
counting	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
do	O
the	O
counting	O
:	O
#	O
pre	O
Result	O
:	O
{	O
Hello	O
=	O
2	O
,	O
World	O
=	O
1	O
}	O
(	O
There	O
'	O
s	O
also	O
the	O
possibility	O
of	O
using	O
groupingByConcurrent	B-api_mention
for	O
more	O
efficiency	O
.	O
Something	O
to	O
bear	O
in	O
mind	O
for	O
your	O
real	O
code	O
,	O
if	O
it	O
would	O
be	O
safe	O
in	O
your	O
context	O
.	O
)	O
Question	O
-	O
20129762	O
In	O
Java	O
8	O
we	O
have	O
the	O
class	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
curiously	O
have	O
a	O
method	O
Iterator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
iterator	O
(	O
args	O
)	O
So	O
you	O
would	O
expect	O
it	O
to	O
implement	O
interface	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
requires	O
exactly	O
this	O
method	O
,	O
but	O
that	O
'	O
s	O
not	O
the	O
case	O
.	O
When	O
I	O
want	O
to	O
iterate	O
over	O
a	O
Stream	B-api_mention
using	O
a	O
foreach	O
loop	O
,	O
I	O
have	O
to	O
do	O
something	O
like	O
#	O
pre	O
Am	O
I	O
missing	O
something	O
here	O
?	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408477	O
The	O
+	O
operator	O
is	O
usually	O
replaced	O
by	O
a	O
StringBuilder	B-api_mention
at	O
compile	O
time	O
.	O
Check	O
this	O
answer	O
for	O
more	O
details	O
on	O
that	O
matter	O
.	O
Question	O
-	O
27845223	O
I	O
'	O
m	O
looking	O
at	O
a	O
piece	O
of	O
Java	O
code	O
right	O
now	O
,	O
and	O
it	O
takes	O
a	O
path	O
as	O
a	O
String	B-api_mention
and	O
gets	O
its	O
URL	O
using	O
URL	B-api_mention
resource	O
=	O
ClassLoader	B-api_mention
.	I-api_mention
getSystemClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
then	O
calls	O
String	B-api_mention
path	O
=	O
resource	O
.	B-api_mention
getPath	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
finally	O
executes	O
new	O
File	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Oh	O
,	O
and	O
there	O
are	O
also	O
calls	O
to	O
URL	B-api_mention
url	O
=	O
resource	O
.	B-api_mention
toURI	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
String	B-api_mention
file	O
=	O
resource	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
'	O
m	O
totally	O
confused	O
right	O
now	O
-	O
mostly	O
because	O
of	O
the	O
terminology	O
,	O
I	O
guess	O
.	O
Can	O
someone	O
please	O
walk	O
me	O
through	O
the	O
differences	O
,	O
or	O
provide	O
a	O
few	O
links	O
to	O
Dummy	O
-	O
proof	O
material	O
?	O
Especially	O
URI	B-api_mention
to	O
URL	B-api_mention
and	O
Resource	B-api_mention
to	O
File	B-api_mention
?	O
To	O
me	O
,	O
it	O
feels	O
like	O
they	O
should	O
be	O
the	O
same	O
thing	O
,	O
respectively	O
.	O
.	O
.	O
The	O
difference	O
between	O
getFile	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getPath	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
explained	O
here	O
:	O
What	O
'	O
s	O
the	O
difference	O
between	O
url	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
getpath	B-api_mention
(	I-api_mention
)	I-api_mention
?	O
(	O
Interestingly	O
they	O
both	O
seem	O
to	O
return	O
Strings	O
,	O
which	O
probably	O
adds	O
a	O
whole	O
lot	O
to	O
my	O
state	O
of	O
mind	O
.	O
.	O
.	O
)	O
Now	O
,	O
if	O
I	O
have	O
a	O
locator	O
that	O
references	O
a	O
class	O
or	O
package	O
in	O
a	O
jar	O
file	O
,	O
will	O
those	O
two	O
(	O
i	O
.	O
e	O
.	O
path	O
an	O
file	O
strings	O
)	O
differ	O
?	O
resource	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
give	O
you	O
jar	O
:	O
file	O
:	O
/	O
C	O
:	O
/	O
path	O
/	O
to	O
/	O
my	O
.	O
jar	O
!	O
/	O
com	O
/	O
example	O
/	O
,	O
after	O
all	O
(	O
note	O
the	O
exclamation	O
mark	O
)	O
.	O
Is	O
the	O
difference	O
between	O
URI	B-api_mention
and	O
URL	B-api_mention
in	O
Java	O
that	O
the	O
former	O
doesn	O
'	O
t	O
encode	O
spaces	O
?	O
Cf	O
.	O
Files	O
,	O
URIs	O
,	O
and	O
URLs	O
conflicting	O
in	O
Java	O
(	O
This	O
answer	O
explains	O
the	O
general	O
,	O
conceptual	O
difference	O
between	O
the	O
two	O
terms	O
fairly	O
well	O
:	O
URIs	O
identify	O
and	O
URLs	O
locate	O
;	O
)	O
Lastly	O
-	O
and	O
most	O
importantly	O
-	O
why	O
do	O
I	O
need	O
File	B-api_mention
object	O
;	O
why	O
isn	O
'	O
t	O
a	O
Resource	B-api_mention
(	O
URL	B-api_mention
)	O
enough	O
?	O
(	O
And	O
is	O
there	O
a	O
Resource	B-api_mention
object	O
?	O
)	O
Sorry	O
if	O
this	O
question	O
is	O
a	O
bit	O
unorganized	O
;	O
it	O
just	O
reflects	O
the	O
confusion	O
I	O
have	O
.	O
.	O
.	O
:	O
)	O
Question	O
-	O
32046078	O
I	O
have	O
a	O
server	O
side	O
implemented	O
in	O
Scala	O
and	O
React	O
/	O
Flux	O
based	O
front	O
end	O
.	O
My	O
services	O
return	O
Futures	O
and	O
they	O
are	O
handled	O
within	O
Scalatra	O
'	O
s	O
AsyncResult	O
for	O
JSON	O
responses	O
.	O
For	O
isomorphic	O
/	O
server	O
side	O
rendering	O
setup	O
I	O
did	O
not	O
want	O
to	O
change	O
services	O
to	O
be	O
blocking	O
so	O
I	O
started	O
with	O
Scala	O
Future	O
-	O
>	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	I-api_mention
Function	I-api_mention
conversion	O
shown	O
here	O
.	O
But	O
the	O
dispatcher	O
in	O
Flux	O
would	O
like	O
to	O
have	O
JS	O
Promise	O
.	O
So	O
far	O
I	O
found	O
only	O
rather	O
complicated	O
sounding	O
way	O
around	O
this	O
Slides	O
68	O
-	O
81	O
Is	O
there	O
any	O
recommended	O
way	O
to	O
deal	O
with	O
this	O
Scala	O
Future	O
-	O
>	O
JS	O
Promise	O
conversion	O
?	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15432106	O
This	O
is	O
to	O
avoid	O
possible	O
efforts	O
for	O
reallocation	O
for	O
every	O
single	O
object	O
.	O
int	O
newCapacity	O
=	O
(	O
oldCapacity	O
*	O
3	O
)	O
/	O
2	O
+	O
1	O
;	O
internally	O
new	O
Object	B-api_mention
[	O
]	O
is	O
created	O
.	O
JVM	O
needs	O
effort	O
to	O
create	O
new	O
Object	B-api_mention
[	O
]	O
when	O
you	O
add	O
element	O
in	O
the	O
arraylist	O
.	O
If	O
you	O
don	O
'	O
t	O
have	O
above	O
code	O
(	O
any	O
algo	O
you	O
think	O
)	O
for	O
reallocation	O
then	O
every	O
time	O
when	O
you	O
invoke	O
arraylist	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
then	O
new	O
Object	B-api_mention
[	O
]	O
has	O
to	O
be	O
created	O
which	O
is	O
pointless	O
and	O
we	O
are	O
loosing	O
time	O
for	O
increasing	O
size	O
by	O
1	O
for	O
each	O
and	O
every	O
objects	O
to	O
be	O
added	O
.	O
So	O
it	O
is	O
better	O
to	O
increase	O
size	O
of	O
Object	B-api_mention
[	O
]	O
with	O
following	O
formula	O
.	O
(	O
JSL	O
has	O
used	O
forcasting	O
formula	O
given	O
below	O
for	O
dynamically	O
growing	O
arraylist	O
instead	O
of	O
growing	O
by	O
1	O
every	O
time	O
.	O
Because	O
to	O
grow	O
it	O
takes	O
effort	O
by	O
JVM	O
)	O
int	O
newCapacity	O
=	O
(	O
oldCapacity	O
*	O
3	O
)	O
/	O
2	O
+	O
1	O
;	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28588854	O
The	O
correct	O
answer	O
is	O
a	O
simple	O
"	O
because	O
the	O
standard	O
(	O
and	O
the	O
docs	O
)	O
say	O
so	O
"	O
.	O
But	O
I	O
'	O
m	O
not	O
gonna	O
be	O
cynical	O
because	O
it	O
'	O
s	O
obvious	O
that	O
'	O
s	O
not	O
what	O
you	O
are	O
after	O
.	O
In	O
addition	O
to	O
the	O
other	O
answers	O
here	O
,	O
I	O
'	O
ll	O
try	O
to	O
relate	O
the	O
infinities	O
to	O
saturating	O
arithmetic	O
.	O
Other	O
answers	O
have	O
already	O
stated	O
that	O
the	O
reason	O
the	O
comparisons	O
on	O
NaNs	O
result	O
in	O
true	O
,	O
so	O
I	O
'	O
m	O
not	O
gonna	O
beat	O
a	O
dead	O
horse	O
.	O
Let	O
'	O
s	O
say	O
I	O
have	O
a	O
saturating	O
integer	O
that	O
represents	O
grayscale	O
colors	O
.	O
Why	O
am	O
I	O
using	O
saturating	O
arithmetic	O
?	O
Because	O
anything	O
brighter	O
than	O
white	O
is	O
still	O
white	O
,	O
and	O
anything	O
darker	O
than	O
black	O
is	O
still	O
black	O
(	O
except	O
orange	O
)	O
.	O
That	O
means	O
BLACK	O
-	O
x	O
=	O
=	O
BLACK	O
and	O
WHITE	O
+	O
x	O
=	O
=	O
WHITE	O
.	O
Makes	O
sense	O
?	O
Now	O
,	O
let	O
'	O
s	O
say	O
we	O
want	O
to	O
represent	O
those	O
grayscale	O
colors	O
with	O
a	O
(	O
signed	O
)	O
1s	O
complement	O
8	O
-	O
bit	O
integer	O
where	O
BLACK	O
=	O
=	O
-	O
127	O
and	O
WHITE	O
=	O
=	O
127	O
.	O
Why	O
1s	O
complement	O
?	O
Because	O
it	O
gives	O
us	O
a	O
signed	O
zero	O
like	O
IEEE	O
754	O
floating	O
point	O
.	O
And	O
,	O
because	O
we	O
are	O
using	O
saturating	O
arithmetic	O
,	O
-	O
127	O
-	O
x	O
=	O
=	O
-	O
127	O
and	O
127	O
+	O
x	O
=	O
=	O
127	O
.	O
How	O
does	O
this	O
relate	O
to	O
floating	O
point	O
infinities	O
?	O
Replace	O
the	O
integer	O
with	O
floating	O
point	O
,	O
BLACK	O
with	O
NEGATIVE	O
_	O
INFINITY	O
,	O
and	O
WHITE	O
with	O
POSITIVE	O
_	O
INFINITY	O
and	O
what	O
do	O
you	O
get	O
?	O
NEGATIVE	O
_	O
INFINITY	O
-	O
x	O
=	O
=	O
NEGATIVE	O
_	O
INFINITY	O
and	O
POSITIVE	O
_	O
INFINITY	O
+	O
x	O
=	O
=	O
POSITIVE	O
_	O
INFINITY	O
.	O
Since	O
you	O
used	O
POSITIVE	O
_	O
INFINITY	O
,	O
I	O
'	O
ll	O
use	O
it	O
also	O
.	O
First	O
we	O
need	O
a	O
class	O
to	O
represent	O
our	O
saturating	O
integer	O
-	O
based	O
color	O
;	O
let	O
'	O
s	O
call	O
it	O
SaturatedColor	O
and	O
assume	O
it	O
works	O
like	O
any	O
other	O
integer	O
in	O
Java	O
.	O
Now	O
,	O
let	O
'	O
s	O
take	O
your	O
code	O
and	O
replace	O
double	O
with	O
our	O
own	O
SaturatedColor	O
and	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
with	O
SaturatedColor	O
.	O
WHITE	O
:	O
#	O
pre	O
As	O
we	O
established	O
above	O
,	O
SaturatedColor	O
.	O
WHITE	O
(	O
just	O
WHITE	O
above	O
)	O
is	O
127	O
,	O
so	O
let	O
'	O
s	O
do	O
that	O
here	O
:	O
#	O
pre	O
Now	O
we	O
take	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
statements	O
you	O
used	O
and	O
replace	O
a	O
and	O
b	O
with	O
their	O
value	O
(	O
values	O
?	O
)	O
:	O
#	O
pre	O
It	O
should	O
be	O
obvious	O
what	O
this	O
will	O
print	O
.	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262511	O
The	O
first	O
case	O
is	O
ok	O
because	O
you	O
are	O
invoking	O
a	O
"	O
special	O
"	O
method	O
(	O
a	O
constructor	O
)	O
and	O
you	O
are	O
no	O
actually	O
taking	O
the	O
created	O
object	O
.	O
Just	O
to	O
make	O
it	O
more	O
clear	O
,	O
I	O
'	O
ll	O
put	O
the	O
optional	O
braces	O
in	O
your	O
lambdas	O
:	O
#	O
pre	O
And	O
more	O
clear	O
,	O
I	O
'	O
ll	O
translate	O
that	O
to	O
the	O
older	O
notation	O
:	O
#	O
pre	O
In	O
the	O
first	O
case	O
you	O
are	O
executing	O
a	O
constructor	O
,	O
but	O
you	O
are	O
NOT	O
returning	O
the	O
created	O
object	O
,	O
in	O
the	O
second	O
case	O
you	O
are	O
attempting	O
to	O
return	O
a	O
String	B-api_mention
value	O
,	O
but	O
your	O
method	O
in	O
your	O
interface	O
BiConsumer	O
returns	O
void	O
,	O
hence	O
the	O
compiler	O
error	O
.	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
22676782	O
Despite	O
@	O
Saint	O
Hill	O
'	O
s	O
answer	O
if	O
you	O
consider	O
the	O
time	O
complexity	O
of	O
str	O
.	B-api_mention
toCharArray	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
the	O
first	O
one	O
is	O
faster	O
even	O
for	O
very	O
large	O
strings	O
.	O
You	O
can	O
run	O
the	O
code	O
below	O
to	O
see	O
it	O
for	O
yourself	O
.	O
#	O
pre	O
output	O
:	O
#	O
pre	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
33687544	O
For	O
HTML	O
response	O
below	O
code	O
can	O
be	O
used	O
bufString	O
.	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
17909134	O
I	O
can	O
see	O
many	O
answers	O
showing	O
how	O
to	O
solve	O
problem	O
,	O
but	O
only	O
Stephen	O
'	O
s	O
answer	O
is	O
trying	O
to	O
explain	O
why	O
problem	O
occurs	O
so	O
I	O
will	O
try	O
to	O
add	O
something	O
more	O
on	O
this	O
subject	O
.	O
It	O
is	O
a	O
story	O
about	O
possible	O
reasons	O
why	O
Object	B-api_mention
[	O
]	O
toArray	B-api_mention
wasn	O
'	O
t	O
changed	O
to	O
T	O
[	O
]	O
toArray	B-api_mention
where	O
generics	O
ware	O
introduced	O
to	O
Java	O
.	O
Why	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
(	O
String	B-api_mention
[	O
]	O
)	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
wont	O
work	O
?	O
In	O
Java	O
,	O
generic	O
type	O
exists	O
at	O
compile	O
-	O
time	O
only	O
.	O
At	O
runtime	O
information	O
about	O
generic	O
type	O
(	O
like	O
in	O
your	O
case	O
<	O
String	B-api_mention
>	O
)	O
is	O
removed	O
and	O
replaced	O
with	O
Object	B-api_mention
type	O
(	O
take	O
a	O
look	O
at	O
type	O
erasure	O
)	O
.	O
That	O
is	O
why	O
at	O
runtime	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
have	O
no	O
idea	O
about	O
what	O
precise	O
type	O
to	O
use	O
to	O
create	O
new	O
array	O
,	O
so	O
it	O
uses	O
Object	B-api_mention
as	O
safest	O
type	O
,	O
because	O
each	O
class	O
extends	O
Object	B-api_mention
so	O
it	O
can	O
safely	O
store	O
instance	O
of	O
any	O
class	O
.	O
Now	O
the	O
problem	O
is	O
that	O
you	O
can	O
'	O
t	O
cast	O
instance	O
of	O
Object	B-api_mention
[	O
]	O
to	O
String	B-api_mention
[	O
]	O
.	O
Why	O
?	O
Take	O
a	O
look	O
at	O
this	O
example	O
(	O
lets	O
assume	O
that	O
class	O
B	O
extends	O
A	O
)	O
:	O
#	O
pre	O
Although	O
such	O
code	O
will	O
compile	O
,	O
at	O
runtime	O
we	O
will	O
see	O
thrown	O
ClassCastException	B-api_mention
because	O
instance	O
held	O
by	O
reference	O
a	O
is	O
not	O
actually	O
of	O
type	O
B	O
(	O
or	O
its	O
subtypes	O
)	O
.	O
Why	O
is	O
this	O
problem	O
(	O
why	O
this	O
exception	O
needs	O
to	O
be	O
cast	O
)	O
?	O
One	O
of	O
the	O
reasons	O
is	O
that	O
B	O
could	O
have	O
new	O
methods	O
/	O
fields	O
which	O
A	O
doesn	O
'	O
t	O
,	O
so	O
it	O
is	O
possible	O
that	O
someone	O
will	O
try	O
to	O
use	O
these	O
new	O
members	O
via	O
b	O
reference	O
even	O
if	O
held	O
instance	O
doesn	O
'	O
t	O
have	O
(	O
doesn	O
'	O
t	O
support	O
)	O
them	O
.	O
In	O
other	O
words	O
we	O
could	O
end	O
up	O
trying	O
to	O
use	O
data	O
which	O
doesn	O
'	O
t	O
exist	O
,	O
which	O
could	O
lead	O
to	O
many	O
problems	O
.	O
So	O
to	O
prevent	O
such	O
situation	O
JVM	O
throws	O
exception	O
,	O
and	O
stop	O
further	O
potentially	O
dangerous	O
code	O
.	O
You	O
could	O
ask	O
now	O
"	O
So	O
why	O
aren	O
'	O
t	O
we	O
stopped	O
even	O
earlier	O
?	O
Why	O
code	O
involving	O
such	O
casting	O
is	O
even	O
compilable	O
?	O
Shouldn	O
'	O
t	O
compiler	O
stop	O
it	O
?	O
"	O
.	O
Answer	O
is	O
:	O
no	O
because	O
compiler	O
can	O
'	O
t	O
know	O
for	O
sure	O
what	O
is	O
the	O
actual	O
type	O
of	O
instance	O
held	O
by	O
a	O
reference	O
,	O
and	O
there	O
is	O
a	O
chance	O
that	O
it	O
will	O
hold	O
instance	O
of	O
class	O
B	O
which	O
will	O
support	O
interface	O
of	O
b	O
reference	O
.	O
Take	O
a	O
look	O
at	O
this	O
example	O
:	O
#	O
pre	O
Now	O
lets	O
go	O
back	O
to	O
your	O
arrays	O
.	O
As	O
you	O
see	O
in	O
question	O
,	O
we	O
can	O
'	O
t	O
cast	O
instance	O
of	O
Object	B-api_mention
[	O
]	O
array	O
to	O
more	O
precise	O
type	O
String	B-api_mention
[	O
]	O
like	O
#	O
pre	O
Here	O
problem	O
is	O
a	O
little	O
different	O
.	O
Now	O
we	O
are	O
sure	O
that	O
String	B-api_mention
[	O
]	O
array	O
will	O
not	O
have	O
additional	O
fields	O
or	O
methods	O
because	O
every	O
array	O
support	O
only	O
:	O
#	O
li	O
[	O
]	O
operator	O
,	O
#	O
li	O
length	O
filed	O
,	O
#	O
li	O
methods	O
inherited	O
from	O
Object	B-api_mention
supertype	O
,	O
So	O
it	O
is	O
not	O
arrays	O
interface	O
which	O
is	O
making	O
it	O
impossible	O
.	O
Problem	O
is	O
that	O
Object	B-api_mention
[	O
]	O
array	O
beside	O
Strings	O
can	O
store	O
any	O
objects	O
(	O
for	O
instance	O
Integers	O
)	O
so	O
it	O
is	O
possible	O
that	O
one	O
beautiful	O
day	O
we	O
will	O
end	O
up	O
with	O
trying	O
to	O
invoke	O
method	O
like	O
strArray	O
[	O
i	O
]	O
.	B-api_mention
substring	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
instance	O
of	O
Integer	O
which	O
doesn	O
'	O
t	O
have	O
such	O
method	O
.	O
So	O
to	O
make	O
sure	O
that	O
this	O
situation	O
will	O
never	O
happen	O
,	O
in	O
Java	O
array	O
references	O
can	O
hold	O
only	O
#	O
li	O
instances	O
of	O
array	O
of	O
same	O
type	O
as	O
reference	O
(	O
reference	O
String	B-api_mention
[	O
]	O
strArr	O
can	O
hold	O
String	B-api_mention
[	O
]	O
)	O
#	O
li	O
instances	O
of	O
array	O
of	O
subtype	O
(	O
Object	B-api_mention
[	O
]	O
can	O
hold	O
String	B-api_mention
[	O
]	O
because	O
String	B-api_mention
is	O
subtype	O
of	O
Object	B-api_mention
)	O
,	O
but	O
can	O
'	O
t	O
hold	O
#	O
li	O
array	O
of	O
supertype	O
of	O
type	O
of	O
array	O
from	O
reference	O
(	O
String	B-api_mention
[	O
]	O
can	O
'	O
t	O
hold	O
Object	B-api_mention
[	O
]	O
)	O
#	O
li	O
array	O
of	O
type	O
which	O
is	O
not	O
related	O
to	O
type	O
from	O
reference	O
(	O
Integer	B-api_mention
[	O
]	O
can	O
'	O
t	O
hold	O
String	B-api_mention
[	O
]	O
)	O
In	O
other	O
words	O
something	O
like	O
this	O
is	O
OK	O
#	O
pre	O
You	O
could	O
say	O
that	O
one	O
way	O
to	O
resolve	O
this	O
problem	O
is	O
to	O
find	O
at	O
runtime	O
most	O
common	O
type	O
between	O
all	O
list	O
elements	O
and	O
create	O
array	O
of	O
that	O
type	O
,	O
but	O
this	O
wont	O
work	O
in	O
situations	O
where	O
all	O
elements	O
of	O
list	O
will	O
be	O
of	O
one	O
type	O
derived	O
from	O
generic	O
one	O
.	O
Take	O
a	O
look	O
#	O
pre	O
now	O
most	O
common	O
type	O
is	O
B	O
,	O
not	O
A	O
so	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
A	O
[	O
]	O
arr	O
=	O
elements	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
would	O
return	O
array	O
of	O
B	O
class	O
new	O
B	O
[	O
]	O
.	O
Problem	O
with	O
this	O
array	O
is	O
that	O
while	O
compiler	O
would	O
allow	O
you	O
to	O
edit	O
its	O
content	O
by	O
adding	O
new	O
A	O
(	O
args	O
)	O
element	O
to	O
it	O
,	O
you	O
would	O
get	O
ArrayStoreException	B-api_mention
because	O
B	O
[	O
]	O
array	O
can	O
hold	O
only	O
elements	O
of	O
class	O
B	O
or	O
its	O
subclass	O
,	O
to	O
make	O
sure	O
that	O
all	O
elements	O
will	O
support	O
interface	O
of	O
B	O
,	O
but	O
instance	O
of	O
A	O
may	O
not	O
have	O
all	O
methods	O
/	O
fields	O
of	O
B	O
.	O
So	O
this	O
solution	O
is	O
not	O
perfect	O
.	O
Best	O
solution	O
to	O
this	O
problem	O
is	O
explicitly	O
tell	O
what	O
type	O
of	O
array	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
be	O
returned	O
by	O
passing	O
this	O
type	O
as	O
method	O
argument	O
like	O
String	B-api_mention
[	O
]	O
arr	O
=	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
String	B-api_mention
[	O
]	O
arr	O
=	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
if	O
size	O
of	O
array	O
is	O
smaller	O
then	O
list	O
it	O
will	O
be	O
automatically	O
adjusted	O
.	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408526	O
Let	O
'	O
s	O
look	O
at	O
the	O
following	O
simple	O
expressions	O
in	O
Java	O
#	O
pre	O
The	O
compiler	O
converts	O
StringLiteral	O
+	O
x	O
;	O
into	O
a	O
StringBuilder	B-api_mention
internally	O
and	O
uses	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
"	O
add	O
"	O
the	O
integer	O
to	O
the	O
string	O
.	O
5	O
.	O
1	O
.	O
11	O
.	O
String	O
Conversion	O
#	O
blockquote	O
15	O
.	O
18	O
.	O
1	O
.	O
#	O
blockquote	O
The	O
optimized	O
version	O
will	O
not	O
actually	O
do	O
a	O
full	O
wrapped	O
String	O
conversion	O
first	O
.	O
This	O
is	O
a	O
good	O
illustration	O
of	O
an	O
optimized	O
version	O
used	O
by	O
the	O
compiler	O
,	O
albeit	O
without	O
the	O
conversion	O
of	O
a	O
primitive	O
,	O
where	O
you	O
can	O
see	O
the	O
compiler	O
changing	O
things	O
into	O
a	O
StringBuilder	O
in	O
the	O
background	O
:	O
#	O
a	O
This	O
java	O
code	O
:	O
#	O
pre	O
Generates	O
this	O
-	O
see	O
how	O
the	O
two	O
concatenation	O
styles	O
lead	O
to	O
the	O
very	O
same	O
bytecode	O
:	O
#	O
pre	O
Looking	O
at	O
the	O
example	O
above	O
and	O
how	O
the	O
byte	O
code	O
based	O
on	O
the	O
source	O
code	O
in	O
the	O
given	O
example	O
is	O
generated	O
,	O
you	O
will	O
be	O
able	O
to	O
notice	O
that	O
the	O
compiler	O
has	O
internally	O
transformed	O
the	O
following	O
statement	O
cip	O
+	O
ciop	O
;	O
into	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
In	O
other	O
words	O
,	O
the	O
operator	O
+	O
in	O
string	O
concatenation	O
is	O
effectively	O
a	O
shorthand	O
for	O
the	O
more	O
verbose	O
StringBuilder	B-api_mention
idiom	O
.	O
Question	O
-	O
24885223	O
I	O
don	O
'	O
t	O
know	O
whether	O
I	O
am	O
asking	O
the	O
right	O
question	O
.	O
I	O
was	O
exploring	O
RecyclerView	B-api_mention
and	O
I	O
was	O
surprised	O
to	O
see	O
that	O
RecyclerView	B-api_mention
does	O
not	O
have	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Because	O
RecyclerView	B-api_mention
extends	O
#	O
blockquote	O
and	O
ListView	B-api_mention
extends	O
#	O
blockquote	O
.	O
However	O
I	O
solved	O
my	O
problem	O
by	O
writing	O
onClick	B-api_mention
in	O
my	O
RecyclerView	B-api_mention
.	I-api_mention
Adapter	I-api_mention
:	O
#	O
pre	O
But	O
still	O
I	O
want	O
to	O
know	O
why	O
Google	O
removed	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Is	O
there	O
a	O
performance	O
issue	O
or	O
something	O
else	O
?	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032208	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
underlying	O
Array	B-api_mention
and	O
set	O
each	O
entry	O
to	O
null	O
;	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
ArrayList	B-api_mention
checking	O
for	O
collection	O
and	O
remove	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
if	O
it	O
exists	O
.	O
I	O
would	O
imagine	O
that	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
way	O
faster	O
then	O
removeAll	B-api_mention
because	O
it	O
'	O
s	O
not	O
comparing	O
,	O
etc	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29495113	O
#	O
blockquote	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
It	O
is	O
checking	O
whether	O
variable	O
newType	O
holds	O
a	O
reference	O
to	O
an	O
instance	O
of	O
java	O
.	O
lang	O
.	O
Class	O
representing	O
type	O
Object	B-api_mention
[	O
]	O
.	O
The	O
casts	O
are	O
unneeded	O
.	O
#	O
blockquote	O
As	O
far	O
as	O
I	O
can	O
tell	O
,	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
could	O
be	O
used	O
in	O
both	O
cases	O
,	O
but	O
non	O
-	O
reflective	O
ordinary	O
array	O
construction	O
is	O
likely	O
a	O
bit	O
faster	O
.	O
Thus	O
,	O
I	O
suppose	O
that	O
Object	B-api_mention
[	O
]	O
is	O
called	O
out	O
as	O
a	O
special	O
case	O
for	O
performance	O
reasons	O
,	O
but	O
I	O
have	O
no	O
idea	O
whether	O
that	O
case	O
is	O
exercised	O
frequently	O
enough	O
for	O
the	O
optimization	O
to	O
be	O
important	O
.	O
#	O
blockquote	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
You	O
should	O
use	O
it	O
when	O
you	O
need	O
to	O
copy	O
an	O
array	O
to	O
an	O
array	O
with	O
a	O
possibly	O
different	O
(	O
but	O
compatible	O
)	O
element	O
type	O
,	O
especially	O
when	O
the	O
element	O
types	O
are	O
not	O
statically	O
known	O
.	O
If	O
you	O
know	O
you	O
want	O
the	O
copy	O
to	O
have	O
the	O
same	O
element	O
type	O
as	O
the	O
original	O
,	O
then	O
it	O
'	O
s	O
easier	O
to	O
use	O
the	O
original	O
array	O
'	O
s	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
22725537	O
,	O
answer	O
-	O
36334855	O
As	O
my	O
previous	O
answer	O
appeared	O
not	O
to	O
be	O
very	O
popular	O
,	O
I	O
will	O
give	O
this	O
another	O
go	O
.	O
A	O
short	O
answer	O
:	O
You	O
are	O
mostly	O
on	O
a	O
right	O
track	O
.	O
The	O
shortest	O
code	O
to	O
get	O
to	O
your	O
desired	O
output	O
I	O
could	O
come	O
up	O
with	O
is	O
this	O
:	O
things	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
will	O
fit	O
all	O
your	O
requirements	O
:	O
#	O
li	O
It	O
will	O
find	O
first	O
response	O
that	O
resolves	O
to	O
a	O
nonempty	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
#	O
li	O
It	O
calls	O
this	B-api_mention
:	I-api_mention
:	I-api_mention
resolve	I-api_mention
lazily	O
as	O
needed	O
#	O
li	O
this	B-api_mention
:	I-api_mention
:	I-api_mention
resolve	I-api_mention
will	O
not	O
be	O
called	O
after	O
first	O
non	O
-	O
empty	O
result	O
#	O
li	O
It	O
will	O
return	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Longer	O
answer	O
The	O
only	O
modification	O
compared	O
to	O
OP	O
initial	O
version	O
was	O
that	O
I	O
removed	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
call	O
to	O
.	B-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
added	O
.	B-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
the	O
last	O
call	O
in	O
the	O
chain	O
.	O
This	O
has	O
a	O
nice	O
effect	O
of	O
getting	O
rid	O
of	O
the	O
double	O
-	O
Optional	O
,	O
whenever	O
stream	O
finds	O
an	O
actual	O
result	O
.	O
You	O
can	O
'	O
t	O
really	O
go	O
any	O
shorter	O
than	O
this	O
in	O
Java	O
.	O
The	O
alternative	O
snippet	O
of	O
code	O
using	O
the	O
more	O
conventional	O
for	O
loop	O
technique	O
is	O
going	O
to	O
be	O
about	O
same	O
number	O
of	O
lines	O
of	O
code	O
and	O
have	O
more	O
or	O
less	O
same	O
order	O
and	O
number	O
of	O
operations	O
you	O
need	O
to	O
perform	O
:	O
#	O
li	O
Calling	O
this	O
.	B-api_mention
resolve	I-api_mention
,	O
#	O
li	O
filtering	O
based	O
on	O
Optional	B-api_mention
.	I-api_mention
isPresent	I-api_mention
#	O
li	O
returning	O
the	O
result	O
and	O
#	O
li	O
some	O
way	O
of	O
dealing	O
with	O
negative	O
result	O
(	O
when	O
nothing	O
was	O
found	O
)	O
Just	O
to	O
prove	O
that	O
my	O
solution	O
works	O
as	O
advertised	O
,	O
I	O
wrote	O
a	O
small	O
test	O
program	O
:	O
#	O
pre	O
(	O
It	O
does	O
have	O
few	O
extra	O
lines	O
for	O
debugging	O
and	O
verifying	O
that	O
only	O
as	O
many	O
calls	O
to	O
resolve	O
as	O
needed	O
.	O
.	O
.	O
)	O
Executing	O
this	O
on	O
a	O
command	O
line	O
,	O
I	O
got	O
the	O
following	O
results	O
:	O
#	O
pre	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
15203417	O
If	O
you	O
'	O
re	O
unsure	O
about	O
something	O
,	O
try	O
writing	O
a	O
test	O
first	O
.	O
I	O
did	O
this	O
:	O
#	O
pre	O
Prints	O
:	O
#	O
pre	O
There	O
'	O
s	O
an	O
empty	O
line	O
in	O
the	O
last	O
block	O
where	O
getSimpleName	B-api_mention
returns	O
an	O
empty	O
string	O
.	O
The	O
upshot	O
looking	O
at	O
this	O
is	O
:	O
#	O
li	O
the	O
name	O
is	O
the	O
name	O
that	O
you	O
'	O
d	O
use	O
to	O
dynamically	O
load	O
the	O
class	O
with	O
,	O
for	O
example	O
,	O
a	O
call	O
to	O
Class	B-api_mention
.	I-api_mention
forName	I-api_mention
with	O
the	O
default	O
ClassLoader	B-api_mention
.	O
#	O
li	O
the	O
canonical	O
name	O
is	O
the	O
name	O
that	O
would	O
be	O
used	O
in	O
an	O
import	O
statement	O
and	O
uniquely	O
identifies	O
the	O
class	O
.	O
Might	O
be	O
useful	O
during	O
toString	B-api_mention
or	O
logging	O
operations	O
.	O
#	O
li	O
the	O
simple	O
name	O
loosely	O
identifies	O
the	O
class	O
,	O
again	O
might	O
be	O
useful	O
during	O
toString	B-api_mention
or	O
logging	O
operations	O
but	O
is	O
not	O
guaranteed	O
to	O
be	O
unique	O
.	O
Question	O
-	O
31270759	O
Exceptions	O
,	O
especially	O
checked	O
ones	O
,	O
can	O
severely	O
interrupt	O
the	O
flow	O
of	O
program	O
logic	O
when	O
the	O
FP	O
idiom	O
is	O
used	O
in	O
Java	O
8	O
.	O
Here	O
is	O
an	O
arbitrary	O
example	O
:	O
#	O
pre	O
The	O
above	O
code	O
breaks	O
when	O
there	O
'	O
s	O
an	O
exception	O
for	O
an	O
unparseable	O
string	O
.	O
But	O
say	O
I	O
just	O
want	O
to	O
replace	O
that	O
with	O
a	O
default	O
value	O
,	O
much	O
like	O
I	O
can	O
with	O
Optional	B-api_mention
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Of	O
course	O
,	O
this	O
still	O
fails	O
because	O
Optional	B-api_mention
only	O
handles	O
null	O
s	O
.	O
I	O
would	O
like	O
something	O
as	O
follows	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
:	O
this	O
is	O
a	O
self	O
-	O
answered	O
question	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15446006	O
I	O
actually	O
wrote	O
a	O
blog	O
post	O
on	O
the	O
topic	O
2	O
months	O
ago	O
.	O
The	O
article	O
is	O
for	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
but	O
Java	O
'	O
s	O
ArrayList	B-api_mention
has	O
a	O
very	O
similar	O
implementation	O
.	O
Since	O
ArrayList	B-api_mention
is	O
implemented	O
using	O
a	O
dynamic	O
array	O
,	O
it	O
increases	O
in	O
size	O
on	O
demand	O
.	O
So	O
the	O
reason	O
for	O
the	O
capacity	O
constructor	O
is	O
for	O
optimisation	O
purposes	O
.	O
When	O
one	O
of	O
these	O
resizings	O
operation	O
occurs	O
,	O
the	O
ArrayList	B-api_mention
copies	O
the	O
contents	O
of	O
the	O
array	O
into	O
a	O
new	O
array	O
that	O
is	O
twice	O
the	O
capacity	O
of	O
the	O
old	O
one	O
.	O
This	O
operation	O
runs	O
in	O
O	O
(	O
n	O
)	O
time	O
.	O
Example	O
Here	O
is	O
an	O
example	O
of	O
how	O
the	O
ArrayList	B-api_mention
would	O
increase	O
in	O
size	O
:	O
#	O
pre	O
So	O
the	O
list	O
starts	O
with	O
a	O
capacity	O
of	O
10	O
,	O
when	O
the	O
11th	O
item	O
is	O
added	O
it	O
is	O
increase	O
by	O
50	O
%	O
+	O
1	O
to	O
16	O
.	O
On	O
the	O
17th	O
item	O
the	O
ArrayList	B-api_mention
is	O
increased	O
again	O
to	O
25	O
and	O
so	O
on	O
.	O
Now	O
consider	O
the	O
example	O
where	O
we	O
'	O
re	O
creating	O
a	O
list	O
where	O
the	O
desired	O
capacity	O
is	O
already	O
known	O
as	O
1000000	O
.	O
Creating	O
the	O
ArrayList	B-api_mention
without	O
the	O
size	O
constructor	O
will	O
call	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
1000000	O
times	O
which	O
takes	O
O	O
(	O
1	O
)	O
normally	O
or	O
O	O
(	O
n	O
)	O
on	O
resize	O
.	O
#	O
blockquote	O
Compare	O
this	O
using	O
the	O
constructor	O
and	O
then	O
calling	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
which	O
is	O
guaranteed	O
to	O
run	O
in	O
O	O
(	O
1	O
)	O
.	O
#	O
blockquote	O
Java	O
vs	O
C	O
#	O
Java	O
is	O
as	O
above	O
,	O
starting	O
at	O
10	O
and	O
increasing	O
each	O
resize	O
at	O
50	O
%	O
+	O
1	O
.	O
C	O
#	O
starts	O
at	O
4	O
and	O
increases	O
much	O
more	O
aggressively	O
,	O
doubling	O
at	O
each	O
resize	O
.	O
The	O
1000000	O
adds	O
example	O
from	O
above	O
for	O
C	O
#	O
uses	O
3097084	O
operations	O
.	O
References	O
#	O
li	O
My	O
blog	O
post	O
on	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
#	O
li	O
Java	O
'	O
s	O
ArrayList	B-api_mention
source	O
code	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894356	O
Looks	O
like	O
niether	O
is	O
faster	O
or	O
slower	O
#	O
pre	O
For	O
long	O
strings	O
I	O
'	O
ll	O
chose	O
the	O
first	O
one	O
.	O
Why	O
copy	O
around	O
long	O
strings	O
?	O
Documentations	O
says	O
:	O
#	O
blockquote	O
/	O
/	O
Edit	O
1	O
I	O
'	O
ve	O
changed	O
the	O
test	O
to	O
trick	O
JIT	O
optimisation	O
.	O
/	O
/	O
Edit	O
2	O
Repeat	O
test	O
10	O
times	O
to	O
let	O
JVM	O
warm	O
up	O
.	O
/	O
/	O
Edit	O
3	O
Conclusions	O
:	O
First	O
of	O
all	O
str	B-api_mention
.	I-api_mention
toCharArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
copies	O
entire	O
string	O
in	O
memory	O
.	O
It	O
can	O
be	O
memory	O
consuming	O
for	O
long	O
strings	O
.	O
Method	O
String	B-api_mention
.	I-api_mention
charAt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
looks	O
up	O
char	O
in	O
char	O
array	O
inside	O
String	O
class	O
checking	O
index	O
before	O
.	O
It	O
looks	O
like	O
for	O
short	O
enough	O
Strings	B-api_mention
first	O
method	O
(	O
i	O
.	O
e	O
.	O
chatAt	B-api_mention
method	O
)	O
is	O
a	O
bit	O
slower	O
due	O
to	O
this	O
index	O
check	O
.	O
But	O
if	O
the	O
String	O
is	O
long	O
enough	O
,	O
copying	O
whole	O
char	O
array	O
gets	O
slower	O
,	O
and	O
the	O
first	O
method	O
is	O
faster	O
.	O
The	O
longer	O
the	O
string	O
is	O
,	O
the	O
slower	O
toCharArray	B-api_mention
performs	O
.	O
Try	O
to	O
change	O
limit	O
in	O
for	O
(	O
args	O
)	O
loop	O
to	O
see	O
it	O
.	O
If	O
we	O
let	O
JVM	O
warm	O
up	O
code	O
runs	O
faster	O
,	O
but	O
proportions	O
are	O
the	O
same	O
.	O
After	O
all	O
it	O
'	O
s	O
just	O
micro	O
-	O
optimisation	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
5192545	O
Edit	O
Updated	O
to	O
bring	O
in	O
feedback	O
.	O
So	O
two	O
ways	O
that	O
work	O
:	O
#	O
li	O
Use	O
StringBulderObj	B-api_mention
.	I-api_mention
setLength	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Allocate	O
a	O
new	O
one	O
instead	O
of	O
clearing	O
the	O
buffer	O
Question	O
-	O
30081520	O
,	O
answer	O
-	O
30081600	O
From	O
Objects	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
return	O
(	O
args	O
)	O
|	O
|	O
(	O
a	O
!	O
=	O
null	O
&	O
&	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
;	O
Very	O
simple	O
,	O
self	O
-	O
explaining	O
and	O
elegant	O
.	O
Question	O
-	O
31170459	O
I	O
was	O
testing	O
boundary	O
conditions	O
on	O
some	O
code	O
involving	O
a	O
BigDecimal	B-api_mention
,	O
and	O
I	O
noticed	O
that	O
when	O
a	O
BigDecimal	B-api_mention
is	O
initialized	O
with	O
the	O
String	B-api_mention
StringLiteral	O
it	O
behaves	O
unexpectedly	O
.	O
It	O
seems	O
to	O
have	O
a	O
value	O
between	O
0	O
and	O
1e	O
-	O
2147483647	O
.	O
When	O
I	O
try	O
calling	O
intValue	O
(	O
args	O
)	O
,	O
I	O
get	O
a	O
NegativeArraySizeException	O
.	O
I	O
should	O
note	O
that	O
2147483647	O
is	O
the	O
max	O
value	O
of	O
an	O
integer	O
on	O
my	O
system	O
.	O
Am	O
I	O
doing	O
something	O
wrong	O
,	O
or	O
is	O
this	O
a	O
problem	O
with	O
BigDecimal	B-api_mention
?	O
#	O
pre	O
Question	O
-	O
32164385	O
,	O
answer	O
-	O
32164423	O
#	O
blockquote	O
The	O
only	O
way	O
is	O
to	O
read	O
the	O
code	O
unfortunately	O
.	O
#	O
blockquote	O
The	O
common	O
convention	O
is	O
to	O
pass	O
an	O
object	O
which	O
cannot	O
be	O
modified	O
,	O
using	O
a	O
wrapper	O
if	O
needed	O
.	O
This	O
ensure	O
the	O
class	O
cannot	O
modify	O
the	O
object	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
readOnly	O
=	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
the	O
object	O
is	O
Cloneable	B-api_mention
,	O
you	O
can	O
also	O
use	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
another	O
common	O
approach	O
is	O
to	O
use	O
a	O
copy	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
readOnly	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
care	O
about	O
such	O
behaviour	O
,	O
unit	O
tests	O
can	O
show	O
whether	O
a	O
method	O
modifies	O
an	O
object	O
or	O
not	O
.	O
If	O
you	O
have	O
unit	O
tests	O
already	O
,	O
it	O
is	O
usually	O
one	O
or	O
two	O
lines	O
extra	O
to	O
check	O
for	O
this	O
.	O
Question	O
-	O
25606833	O
,	O
answer	O
-	O
25757572	O
There	O
are	O
several	O
issues	O
here	O
.	O
#	O
li	O
Any	O
solution	O
based	O
on	O
reading	O
lines	O
is	O
going	O
to	O
process	O
each	O
character	O
twice	O
.	O
Compilers	O
for	O
example	O
don	O
'	O
t	O
do	O
this	O
,	O
they	O
read	O
one	O
character	O
at	O
a	O
time	O
and	O
despatch	O
on	O
it	O
directly	O
.	O
#	O
li	O
Any	O
solution	O
based	O
on	O
readLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
going	O
to	O
create	O
Strings	B-api_mention
.	O
#	O
li	O
You	O
are	O
using	O
different	O
buffer	O
sizes	O
.	O
#	O
li	O
You	O
are	O
using	O
different	O
I	O
/	O
O	O
technologies	O
.	O
#	O
li	O
In	O
some	O
cases	O
you	O
are	O
using	O
character	O
conversion	O
,	O
while	O
in	O
others	O
you	O
aren	O
'	O
t	O
.	O
#	O
li	O
You	O
'	O
re	O
over	O
-	O
analyzing	O
the	O
file	O
.	O
You	O
don	O
'	O
t	O
really	O
care	O
where	O
the	O
white	O
space	O
is	O
,	O
or	O
how	O
much	O
of	O
it	O
there	O
is	O
,	O
as	O
long	O
as	O
it	O
separates	O
the	O
numbers	O
from	O
each	O
other	O
.	O
My	O
solution	O
:	O
#	O
pre	O
Question	O
-	O
29815636	O
,	O
answer	O
-	O
29815698	O
The	O
first	O
form	O
is	O
called	O
Javadoc	O
.	O
You	O
use	O
this	O
when	O
you	O
'	O
re	O
writing	O
formal	O
APIs	O
for	O
your	O
code	O
,	O
which	O
are	O
generated	O
by	O
the	O
javadoc	O
tool	O
.	O
For	O
an	O
example	O
,	O
the	O
Java	O
7	O
API	O
page	O
uses	O
Javadoc	O
and	O
was	O
generated	O
by	O
that	O
tool	O
.	O
Some	O
common	O
elements	O
you	O
'	O
d	O
see	O
in	O
Javadoc	O
include	O
:	O
#	O
li	O
@	O
param	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
parameters	O
are	O
being	O
passed	O
to	O
a	O
method	O
,	O
and	O
what	O
value	O
they	O
'	O
re	O
expected	O
to	O
have	O
#	O
li	O
@	O
return	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
result	O
the	O
method	O
is	O
going	O
to	O
give	O
back	O
#	O
li	O
@	O
throws	O
:	O
this	O
is	O
used	O
to	O
indicate	O
that	O
a	O
method	O
throws	O
an	O
exception	O
or	O
error	O
in	O
case	O
of	O
certain	O
input	O
#	O
li	O
@	O
since	O
:	O
this	O
is	O
used	O
to	O
indicate	O
the	O
earliest	O
Java	O
version	O
this	O
class	O
or	O
function	O
was	O
available	O
in	O
As	O
an	O
example	O
,	O
here	O
'	O
s	O
Javadoc	O
for	O
the	O
compare	O
method	O
of	O
Integer	B-api_mention
:	O
#	O
pre	O
The	O
second	O
form	O
is	O
a	O
block	O
(	O
multi	O
-	O
line	O
)	O
comment	O
.	O
You	O
use	O
this	O
if	O
you	O
want	O
to	O
have	O
multiple	O
lines	O
in	O
a	O
comment	O
.	O
I	O
will	O
say	O
that	O
you	O
'	O
d	O
only	O
want	O
to	O
use	O
the	O
latter	O
form	O
sparingly	O
;	O
that	O
is	O
,	O
you	O
don	O
'	O
t	O
want	O
to	O
overburden	O
your	O
code	O
with	O
block	O
comments	O
that	O
don	O
'	O
t	O
describe	O
what	O
behaviors	O
the	O
method	O
/	O
complex	O
function	O
is	O
supposed	O
to	O
have	O
.	O
Since	O
Javadoc	O
is	O
the	O
more	O
descriptive	O
of	O
the	O
two	O
,	O
and	O
you	O
can	O
generate	O
actual	O
documentation	O
as	O
a	O
result	O
of	O
using	O
it	O
,	O
using	O
Javadoc	O
would	O
be	O
more	O
preferable	O
to	O
simple	O
block	O
comments	O
.	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
13612866	O
It	O
is	O
crucial	O
to	O
know	O
that	O
attributes	O
are	O
not	O
parameters	O
.	O
The	O
return	O
type	O
for	O
attributes	O
is	O
an	O
Object	B-api_mention
,	O
whereas	O
the	O
return	O
type	O
for	O
a	O
parameter	O
is	O
a	O
String	B-api_mention
.	O
When	O
calling	O
the	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
bear	O
in	O
mind	O
that	O
the	O
attributes	O
must	O
be	O
cast	O
.	O
Additionally	O
,	O
there	O
is	O
no	O
servlet	O
specific	O
attributes	O
,	O
and	O
there	O
are	O
no	O
session	O
parameters	O
.	O
This	O
post	O
is	O
written	O
with	O
the	O
purpose	O
to	O
connect	O
on	O
@	O
Bozho	O
'	O
s	O
response	O
,	O
as	O
additional	O
information	O
that	O
can	O
be	O
useful	O
for	O
other	O
people	O
.	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
22593693	O
There	O
seem	O
to	O
be	O
many	O
questions	O
about	O
this	O
issue	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Scanner	I-api_mention
.	O
I	O
think	O
a	O
more	O
readable	O
/	O
idiomatic	O
solution	O
would	O
be	O
to	O
call	O
scanner	B-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
drop	O
any	O
newline	O
characters	O
after	O
calling	O
nextInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
4812570	O
,	O
answer	O
-	O
4812585	O
You	O
have	O
to	O
use	O
getStackTrace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
instead	O
of	O
printStackTrace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Here	O
is	O
a	O
good	O
example	O
:	O
#	O
pre	O
Question	O
-	O
10904911	O
,	O
answer	O
-	O
10904956	O
What	O
you	O
want	O
is	O
the	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
There	O
is	O
a	O
static	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
helper	O
method	O
for	O
every	O
different	O
primitive	O
java	O
type	O
;	O
the	O
one	O
for	O
int	O
[	O
]	O
says	O
this	O
:	O
#	O
blockquote	O
Question	O
-	O
23453287	O
One	O
of	O
the	O
most	O
useful	O
features	O
of	O
Java	O
8	O
are	O
the	O
new	O
default	O
methods	O
on	O
interfaces	O
.	O
There	O
are	O
essentially	O
two	O
reasons	O
(	O
there	O
may	O
be	O
others	O
)	O
why	O
they	O
have	O
been	O
introduced	O
:	O
#	O
li	O
Providing	O
actual	O
default	O
implementations	O
.	O
Example	O
:	O
Iterator	B-api_mention
.	I-api_mention
remove	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
Allowing	O
for	O
JDK	O
API	O
evolution	O
.	O
Example	O
:	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
)	I-api_mention
From	O
an	O
API	O
designer	O
'	O
s	O
perspective	O
,	O
I	O
would	O
have	O
liked	O
to	O
be	O
able	O
to	O
use	O
other	O
modifiers	O
on	O
interface	O
methods	O
,	O
e	O
.	O
g	O
.	O
final	O
.	O
This	O
would	O
be	O
useful	O
when	O
adding	O
convenience	O
methods	O
,	O
preventing	O
"	O
accidental	O
"	O
overrides	O
in	O
implementing	O
classes	O
:	O
#	O
pre	O
The	O
above	O
is	O
already	O
common	O
practice	O
if	O
Sender	O
were	O
a	O
class	O
:	O
#	O
pre	O
Now	O
,	O
default	O
and	O
final	O
are	O
obviously	O
contradicting	O
keywords	O
,	O
but	O
the	O
default	O
keyword	O
itself	O
would	O
not	O
have	O
been	O
strictly	O
required	O
,	O
so	O
I	O
'	O
m	O
assuming	O
that	O
this	O
contradiction	O
is	O
deliberate	O
,	O
to	O
reflect	O
the	O
subtle	O
differences	O
between	O
"	O
class	O
methods	O
with	O
body	O
"	O
(	O
just	O
methods	O
)	O
and	O
"	O
interface	O
methods	O
with	O
body	O
"	O
(	O
default	O
methods	O
)	O
,	O
i	O
.	O
e	O
.	O
differences	O
which	O
I	O
have	O
not	O
yet	O
understood	O
.	O
At	O
some	O
point	O
of	O
time	O
,	O
support	O
for	O
modifiers	O
like	O
static	O
and	O
final	O
on	O
interface	O
methods	O
was	O
not	O
yet	O
fully	O
explored	O
,	O
citing	O
Brian	O
Goetz	O
:	O
#	O
blockquote	O
Since	O
that	O
time	O
in	O
late	O
2011	O
,	O
obviously	O
,	O
support	O
for	O
static	O
methods	O
in	O
interfaces	O
was	O
added	O
.	O
Clearly	O
,	O
this	O
added	O
a	O
lot	O
of	O
value	O
to	O
the	O
JDK	O
libraries	O
themselves	O
,	O
such	O
as	O
with	O
Comparator	B-api_mention
.	I-api_mention
comparing	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
:	O
What	O
is	O
the	O
reason	O
final	O
(	O
and	O
also	O
static	O
final	O
)	O
never	O
made	O
it	O
to	O
Java	O
8	O
interfaces	O
?	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
15655071	O
If	O
you	O
make	O
foo	O
static	O
,	O
you	O
must	O
initialize	O
it	O
in	O
the	O
class	O
constructor	O
(	O
or	O
inline	O
where	O
you	O
define	O
it	O
)	O
like	O
the	O
following	O
examples	O
.	O
Class	O
constructor	O
(	O
not	O
instance	O
)	O
:	O
#	O
pre	O
Inline	O
:	O
private	O
static	O
final	O
List	B-api_mention
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
problem	O
here	O
is	O
not	O
how	O
the	O
final	O
modifier	O
works	O
,	O
but	O
rather	O
how	O
the	O
static	O
modifier	O
works	O
.	O
The	O
final	O
modifier	O
enforces	O
an	O
initialization	O
of	O
your	O
reference	O
by	O
the	O
time	O
the	O
call	O
to	O
your	O
constructor	O
completes	O
(	O
i	O
.	O
e	O
.	O
you	O
must	O
initialize	O
it	O
in	O
the	O
constructor	O
)	O
.	O
When	O
you	O
initialize	O
an	O
attribute	O
in	O
-	O
line	O
,	O
it	O
gets	O
initialized	O
before	O
the	O
code	O
you	O
have	O
defined	O
for	O
the	O
constructor	O
is	O
run	O
,	O
so	O
you	O
get	O
the	O
following	O
outcomes	O
:	O
#	O
li	O
if	O
foo	O
is	O
static	O
,	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
executed	O
before	O
the	O
static	O
{	O
}	O
constructor	O
you	O
have	O
defined	O
for	O
your	O
class	O
is	O
executed	O
#	O
li	O
if	O
foo	O
is	O
not	O
static	O
,	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
executed	O
before	O
your	O
constructor	O
is	O
run	O
When	O
you	O
do	O
not	O
initilize	O
an	O
attribute	O
in	O
-	O
line	O
,	O
the	O
final	O
modifier	O
enforces	O
that	O
you	O
initialize	O
it	O
and	O
that	O
you	O
must	O
do	O
so	O
in	O
the	O
constructor	O
.	O
If	O
you	O
also	O
have	O
a	O
static	O
modifier	O
,	O
the	O
constructor	O
you	O
will	O
have	O
to	O
initialize	O
the	O
attribute	O
in	O
is	O
the	O
class	O
'	O
initialization	O
block	O
:	O
static	O
{	O
}	O
.	O
The	O
error	O
you	O
get	O
in	O
your	O
code	O
is	O
from	O
the	O
fact	O
that	O
static	O
{	O
}	O
is	O
run	O
when	O
the	O
class	O
is	O
loaded	O
,	O
before	O
the	O
time	O
you	O
instantiate	O
an	O
object	O
of	O
that	O
class	O
.	O
Thus	O
,	O
you	O
will	O
have	O
not	O
initialized	O
foo	O
when	O
the	O
class	O
is	O
created	O
.	O
Think	O
of	O
the	O
static	O
{	O
}	O
block	O
as	O
a	O
constructor	O
for	O
an	O
object	O
of	O
type	O
Class	B-api_mention
.	O
This	O
is	O
where	O
you	O
must	O
do	O
the	O
initialization	O
of	O
your	O
static	O
final	O
class	O
attributes	O
(	O
if	O
not	O
done	O
inline	O
)	O
.	O
Side	O
note	O
:	O
The	O
final	O
modifier	O
assures	O
const	O
-	O
ness	O
only	O
for	O
primitive	O
types	O
and	O
references	O
.	O
When	O
you	O
declare	O
a	O
final	O
object	O
,	O
what	O
you	O
get	O
is	O
a	O
final	O
reference	O
to	O
that	O
object	O
,	O
but	O
the	O
object	O
itself	O
is	O
not	O
constant	O
.	O
What	O
you	O
are	O
really	O
achieving	O
when	O
declaring	O
a	O
final	O
attribute	O
is	O
that	O
,	O
once	O
you	O
declare	O
an	O
object	O
for	O
your	O
specific	O
purpose	O
(	O
like	O
the	O
final	O
List	B-api_mention
that	O
you	O
have	O
declared	O
)	O
,	O
that	O
and	O
only	O
that	O
object	O
will	O
be	O
used	O
for	O
that	O
purpose	O
:	O
you	O
will	O
not	O
be	O
able	O
to	O
change	O
List	B-api_mention
foo	O
to	O
another	O
List	B-api_mention
,	O
but	O
you	O
can	O
still	O
alter	O
your	O
List	B-api_mention
by	O
adding	O
/	O
removing	O
items	O
(	O
the	O
List	B-api_mention
you	O
are	O
using	O
will	O
be	O
the	O
same	O
,	O
only	O
with	O
its	O
contents	O
altered	O
)	O
.	O
Question	O
-	O
6992608	O
,	O
answer	O
-	O
26764904	O
As	O
pointed	O
by	O
this	O
the	O
best	O
way	O
to	O
obtain	O
a	O
concurrency	O
-	O
able	O
HashSet	B-api_mention
is	O
by	O
means	O
of	O
Collections	B-api_mention
.	I-api_mention
synchronizedSet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Set	O
s	O
=	O
Collections	B-api_mention
.	I-api_mention
synchronizedSet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
worked	O
for	O
me	O
and	O
I	O
haven	O
'	O
t	O
seen	O
anybody	O
really	O
pointing	O
to	O
it	O
.	O
EDIT	O
This	O
is	O
less	O
efficient	O
than	O
the	O
currently	O
aproved	O
solution	O
,	O
as	O
Eugene	O
points	O
out	O
,	O
since	O
it	O
just	O
wraps	O
your	O
set	O
into	O
a	O
synchronized	O
decorator	O
,	O
while	O
a	O
ConcurrentHashMap	B-api_mention
actually	O
implements	O
low	O
-	O
level	O
concurrency	O
and	O
it	O
can	O
back	O
your	O
Set	O
just	O
as	O
fine	O
.	O
So	O
thanks	O
to	O
Mr	O
.	O
Stepanenkov	O
for	O
making	O
that	O
clear	O
.	O
#	O
a	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
17397548	O
As	O
for	O
the	O
code	O
example	O
in	O
the	O
question	O
,	O
the	O
standard	O
solution	O
is	O
to	O
reference	O
the	O
class	O
explicitly	O
by	O
its	O
name	O
,	O
and	O
it	O
is	O
even	O
possible	O
to	O
do	O
without	O
getClassLoader	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
:	O
#	O
pre	O
This	O
approach	O
still	O
has	O
a	O
back	O
side	O
that	O
it	O
is	O
not	O
very	O
safe	O
against	O
copy	O
/	O
paste	O
errors	O
in	O
case	O
you	O
need	O
to	O
replicate	O
this	O
code	O
to	O
a	O
number	O
of	O
similar	O
classes	O
.	O
And	O
as	O
for	O
the	O
exact	O
question	O
in	O
the	O
headline	O
,	O
there	O
is	O
a	O
trick	O
posted	O
in	O
the	O
adjacent	O
thread	O
:	O
Class	B-api_mention
currentClass	O
=	O
new	O
Object	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
}	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getEnclosingClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
It	O
uses	O
a	O
nested	O
anonymous	O
Object	B-api_mention
subclass	O
to	O
get	O
hold	O
of	O
the	O
execution	O
context	O
.	O
This	O
trick	O
has	O
a	O
benefit	O
of	O
being	O
copy	O
/	O
paste	O
safe	O
.	O
.	O
.	O
It	O
may	O
be	O
also	O
worth	O
noting	O
that	O
if	O
this	O
snippet	O
is	O
shaped	O
as	O
a	O
static	O
method	O
of	O
some	O
base	O
class	O
,	O
then	O
currenClass	O
value	O
will	O
always	O
be	O
a	O
reference	O
to	O
that	O
base	O
class	O
rather	O
than	O
to	O
any	O
subclass	O
that	O
may	O
be	O
using	O
that	O
method	O
.	O
Question	O
-	O
9749746	O
,	O
answer	O
-	O
9749864	O
You	O
are	O
specifically	O
asking	O
about	O
how	O
they	O
internally	O
work	O
,	O
so	O
here	O
you	O
are	O
:	O
No	O
synchronization	O
#	O
pre	O
It	O
basically	O
reads	O
value	O
from	O
memory	O
,	O
increments	O
it	O
and	O
puts	O
back	O
to	O
memory	O
.	O
This	O
works	O
in	O
single	O
thread	O
but	O
nowadays	O
,	O
in	O
the	O
era	O
of	O
multi	O
-	O
core	O
,	O
multi	O
-	O
CPU	O
,	O
multi	O
-	O
level	O
caches	O
it	O
won	O
'	O
t	O
work	O
correctly	O
.	O
First	O
of	O
all	O
it	O
introduces	O
race	O
condition	O
(	O
several	O
threads	O
can	O
read	O
the	O
value	O
at	O
the	O
same	O
time	O
)	O
,	O
but	O
also	O
visibility	O
problems	O
.	O
The	O
value	O
might	O
only	O
be	O
stored	O
in	O
"	O
local	O
"	O
CPU	O
memory	O
(	O
some	O
cache	O
)	O
and	O
not	O
be	O
visible	O
for	O
other	O
CPUs	O
/	O
cores	O
(	O
and	O
thus	O
-	O
threads	O
)	O
.	O
This	O
is	O
why	O
many	O
refer	O
to	O
local	O
copy	O
of	O
a	O
variable	O
in	O
a	O
thread	O
.	O
It	O
is	O
very	O
unsafe	O
.	O
Consider	O
this	O
popular	O
but	O
broken	O
thread	O
-	O
stopping	O
code	O
:	O
#	O
pre	O
Add	O
volatile	O
to	O
stopped	O
variable	O
and	O
it	O
works	O
fine	O
-	O
if	O
any	O
other	O
thread	O
modifies	O
stopped	O
variable	O
via	O
pleaseStop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
that	O
change	O
immediately	O
in	O
working	O
thread	O
'	O
s	O
while	O
(	O
args	O
)	O
loop	O
.	O
BTW	O
this	O
is	O
not	O
a	O
good	O
way	O
to	O
interrupt	O
a	O
thread	O
either	O
,	O
see	O
:	O
How	O
to	O
stop	O
a	O
thread	O
that	O
is	O
running	O
forever	O
without	O
any	O
use	O
and	O
Stopping	O
a	O
specific	O
java	O
thread	O
.	O
AtomicInteger	O
#	O
pre	O
The	O
AtomicInteger	B-api_mention
class	O
uses	O
CAS	O
(	O
compare	O
-	O
and	O
-	O
swap	O
)	O
low	O
-	O
level	O
CPU	O
operations	O
(	O
no	O
synchronization	O
needed	O
!	O
)	O
They	O
allow	O
you	O
to	O
modify	O
a	O
particular	O
variable	O
only	O
if	O
the	O
present	O
value	O
is	O
equal	O
to	O
something	O
else	O
(	O
and	O
is	O
returned	O
successfully	O
)	O
.	O
So	O
when	O
you	O
execute	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
actually	O
runs	O
in	O
a	O
loop	O
(	O
simplified	O
real	O
implementation	O
)	O
:	O
#	O
pre	O
So	O
basically	O
:	O
read	O
;	O
try	O
to	O
store	O
incremented	O
value	O
;	O
if	O
not	O
successful	O
(	O
the	O
value	O
is	O
no	O
longer	O
equal	O
to	O
current	O
)	O
,	O
read	O
and	O
try	O
again	O
.	O
The	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
implemented	O
in	O
native	O
code	O
(	O
assembly	O
)	O
.	O
volatile	O
without	O
synchronization	O
#	O
pre	O
This	O
code	O
is	O
not	O
correct	O
.	O
It	O
fixes	O
the	O
visibility	O
issue	O
(	O
volatile	O
makes	O
sure	O
other	O
threads	O
can	O
see	O
change	O
made	O
to	O
counter	O
)	O
but	O
still	O
has	O
a	O
race	O
condition	O
.	O
This	O
has	O
been	O
explained	O
multiple	O
times	O
:	O
pre	O
/	O
post	O
-	O
incrementation	O
is	O
not	O
atomic	B-api_mention
.	O
The	O
only	O
side	O
effect	O
of	O
volatile	O
is	O
"	O
flushing	O
"	O
caches	O
so	O
that	O
all	O
other	O
parties	O
see	O
the	O
freshest	O
version	O
of	O
the	O
data	O
.	O
This	O
is	O
too	O
strict	O
in	O
most	O
situations	O
;	O
that	O
is	O
why	O
volatile	O
is	O
not	O
default	O
.	O
volatile	O
without	O
synchronization	O
(	O
2	O
)	O
#	O
pre	O
The	O
same	O
problem	O
as	O
above	O
,	O
but	O
even	O
worse	O
because	O
i	O
is	O
not	O
private	O
.	O
The	O
race	O
condition	O
is	O
still	O
present	O
.	O
Why	O
is	O
it	O
a	O
problem	O
?	O
If	O
,	O
say	O
,	O
two	O
threads	O
run	O
this	O
code	O
simultaneously	O
,	O
the	O
output	O
might	O
be	O
+	O
5	O
or	O
+	O
10	O
.	O
However	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
the	O
change	O
.	O
Multiple	O
independent	O
synchronized	O
#	O
pre	O
Surprise	O
,	O
this	O
code	O
is	O
incorrect	O
as	O
well	O
.	O
In	O
fact	O
,	O
it	O
is	O
completely	O
wrong	O
.	O
First	O
of	O
all	O
you	O
are	O
synchronizing	O
on	O
i	O
,	O
which	O
is	O
about	O
to	O
be	O
changed	O
(	O
moreover	O
,	O
i	O
is	O
a	O
primitive	O
,	O
so	O
I	O
guess	O
you	O
are	O
synchronizing	O
on	O
a	O
temporary	O
Integer	O
created	O
via	O
autoboxing	O
.	O
.	O
.	O
)	O
Completely	O
flawed	O
.	O
You	O
could	O
also	O
write	O
:	O
#	O
pre	O
No	O
two	O
threads	O
can	O
enter	O
the	O
same	O
synchronized	O
block	O
with	O
the	O
same	O
lock	O
.	O
In	O
this	O
case	O
(	O
and	O
similarly	O
in	O
your	O
code	O
)	O
the	O
lock	O
object	O
changes	O
upon	O
every	O
execution	O
,	O
so	O
synchronized	O
effectively	O
has	O
no	O
effect	O
.	O
Even	O
if	O
you	O
have	O
used	O
a	O
final	O
variable	O
(	O
or	O
this	O
)	O
for	O
synchronization	O
,	O
the	O
code	O
is	O
still	O
incorrect	O
.	O
Two	O
threads	O
can	O
first	O
read	O
i	O
to	O
temp	O
synchronously	O
(	O
having	O
the	O
same	O
value	O
locally	O
in	O
temp	O
)	O
,	O
then	O
the	O
first	O
assigns	O
a	O
new	O
value	O
to	O
i	O
(	O
say	O
,	O
from	O
1	O
to	O
6	O
)	O
and	O
the	O
other	O
one	O
does	O
the	O
same	O
thing	O
(	O
from	O
1	O
to	O
6	O
)	O
.	O
The	O
synchronization	O
must	O
span	O
from	O
reading	O
to	O
assigning	O
a	O
value	O
.	O
Your	O
first	O
synchronization	O
has	O
no	O
effect	O
(	O
reading	O
an	O
int	O
is	O
atomic	O
)	O
and	O
the	O
second	O
as	O
well	O
.	O
In	O
my	O
opinion	O
,	O
these	O
are	O
the	O
correct	O
forms	O
:	O
#	O
pre	O
Question	O
-	O
12317668	O
According	O
to	O
the	O
JLS	O
,	O
an	O
int	O
array	O
should	O
be	O
filled	O
by	O
zeros	O
just	O
after	O
initialization	O
.	O
However	O
,	O
I	O
am	O
faced	O
with	O
a	O
situation	O
where	O
it	O
is	O
not	O
.	O
Such	O
a	O
behavior	O
occurs	O
first	O
in	O
JDK	O
7u4	O
and	O
also	O
occurs	O
in	O
all	O
later	O
updates	O
(	O
I	O
use	O
64	O
-	O
bit	O
implementation	O
)	O
.	O
The	O
following	O
code	O
throws	O
exception	O
:	O
#	O
pre	O
The	O
exception	O
occurs	O
after	O
the	O
JVM	O
performs	O
compilation	O
of	O
the	O
code	O
block	O
and	O
does	O
not	O
arise	O
with	O
-	O
Xint	O
flag	O
.	O
Additionally	O
,	O
the	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
statement	O
(	O
as	O
all	O
other	O
statements	O
in	O
this	O
code	O
)	O
is	O
necessary	O
,	O
and	O
the	O
exception	O
does	O
not	O
occurs	O
if	O
it	O
is	O
absent	O
.	O
It	O
is	O
clear	O
that	O
this	O
possible	O
bug	O
is	O
bounded	O
with	O
some	O
JVM	O
optimization	O
.	O
Any	O
ideas	O
for	O
the	O
reason	O
of	O
such	O
a	O
behavior	O
?	O
Update	O
:	O
I	O
see	O
this	O
behavior	O
on	O
HotSpot	O
64	O
-	O
bit	O
server	O
VM	O
,	O
Java	O
version	O
from	O
1	O
.	O
7	O
.	O
0	O
_	O
04	O
to	O
1	O
.	O
7	O
.	O
0	O
_	O
10	O
on	O
Gentoo	O
Linux	O
,	O
Debian	O
Linux	O
(	O
both	O
kernel	O
3	O
.	O
0	O
version	O
)	O
and	O
MacOS	O
Lion	O
.	O
This	O
error	O
can	O
always	O
be	O
reproduced	O
with	O
the	O
code	O
above	O
.	O
I	O
did	O
not	O
test	O
this	O
problem	O
with	O
a	O
32	O
-	O
bit	O
JDK	O
or	O
on	O
Windows	O
.	O
I	O
already	O
sent	O
a	O
bug	O
report	O
to	O
the	O
Oracle	O
(	O
bug	O
id	O
7196857	O
)	O
and	O
it	O
will	O
appear	O
in	O
public	O
Oracle	O
bug	O
database	O
in	O
few	O
days	O
.	O
Update	O
:	O
Oracle	O
published	O
this	O
bug	O
at	O
their	O
public	O
bug	O
database	O
:	O
#	O
a	O
Question	O
-	O
30125296	O
,	O
answer	O
-	O
30125487	O
I	O
suggest	O
2	O
more	O
options	O
:	O
#	O
pre	O
The	O
second	O
one	O
uses	O
Collectors	B-api_mention
.	I-api_mention
summingInt	I-api_mention
(	I-api_mention
)	I-api_mention
collector	O
.	O
Besides	O
,	O
Java	O
8	O
introduces	O
a	O
very	O
effective	O
LongAdder	O
accumulator	O
designed	O
to	O
speed	O
-	O
up	O
summarizing	O
in	O
parallel	O
streams	O
and	O
multi	O
-	O
thread	O
environments	O
.	O
Here	O
,	O
it	O
may	O
be	O
used	O
as	O
follows	O
:	O
#	O
pre	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923227	O
Optionals	O
aren	O
'	O
t	O
designed	O
for	O
this	O
purpose	O
,	O
as	O
explained	O
nicely	O
by	O
Brian	O
Goetz	O
.	O
You	O
can	O
always	O
use	O
@	O
Nullable	O
to	O
denote	O
that	O
a	O
method	O
argument	O
can	O
be	O
null	O
.	O
Using	O
an	O
optional	O
does	O
not	O
really	O
enable	O
you	O
to	O
write	O
your	O
method	O
logic	O
more	O
neatly	O
.	O
Question	O
-	O
31419029	O
,	O
answer	O
-	O
31419047	O
An	O
empty	O
HashMap	B-api_mention
object	O
is	O
much	O
smaller	O
than	O
an	O
array	O
of	O
2000	O
Object	B-api_mention
references	O
.	O
Even	O
though	O
you	O
pass	O
2000	O
to	O
the	O
initialCapacity	O
parameter	O
of	O
the	O
HashMap	B-api_mention
constructor	O
,	O
it	O
'	O
s	O
not	O
actually	O
creating	O
2000	O
spaces	O
for	O
objects	O
yet	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14526729	O
The	O
real	O
problem	O
with	O
this	O
is	O
that	O
it	O
'	O
s	O
output	O
histogram	O
is	O
dependent	O
on	O
the	O
initial	O
seed	O
far	O
to	O
much	O
-	O
much	O
of	O
the	O
time	O
it	O
will	O
end	O
up	O
with	O
a	O
near	O
uniform	O
output	O
but	O
a	O
lot	O
of	O
the	O
time	O
will	O
have	O
distinctly	O
un	O
-	O
uniform	O
output	O
.	O
Inspired	O
by	O
this	O
article	O
about	O
how	O
bad	O
php	O
'	O
s	O
rand	O
(	O
)	O
function	O
is	O
,	O
I	O
made	O
some	O
random	O
matrix	O
images	O
using	O
QuickRandom	B-api_mention
and	O
System	B-api_mention
.	I-api_mention
Random	I-api_mention
.	O
This	O
run	O
shows	O
how	O
sometimes	O
the	O
seed	O
can	O
have	O
a	O
bad	O
effect	O
(	O
in	O
this	O
case	O
favouring	O
lower	O
numbers	O
)	O
where	O
as	O
System	B-api_mention
.	I-api_mention
Random	I-api_mention
is	O
pretty	O
uniform	O
.	O
QuickRandom	B-api_mention
#	O
img	O
System	B-api_mention
.	I-api_mention
Random	I-api_mention
#	O
img	O
Even	O
Worse	O
If	O
we	O
initialise	O
QuickRandom	B-api_mention
as	O
new	O
QuickRandom	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
we	O
get	O
this	O
image	O
:	O
#	O
img	O
The	O
Code	O
#	O
pre	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5032837	O
If	O
you	O
want	O
to	O
use	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
your	O
Sets	O
,	O
in	O
the	O
sense	O
that	O
the	O
same	O
entity	O
can	O
only	O
be	O
in	O
there	O
once	O
,	O
then	O
there	O
is	O
only	O
one	O
option	O
:	O
Option	O
2	O
.	O
That	O
'	O
s	O
because	O
a	O
primary	O
key	O
for	O
an	O
entity	O
by	O
definition	O
never	O
changes	O
(	O
if	O
somebody	O
indeed	O
updates	O
it	O
,	O
it	O
'	O
s	O
not	O
the	O
same	O
entity	O
anymore	O
)	O
You	O
should	O
take	O
that	O
literally	O
:	O
Since	O
your	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
based	O
on	O
the	O
primary	O
key	O
,	O
you	O
must	O
not	O
use	O
these	O
methods	O
,	O
until	O
the	O
primary	O
key	O
is	O
set	O
.	O
So	O
you	O
shouldn	O
'	O
t	O
put	O
entities	O
in	O
the	O
set	O
,	O
until	O
they	O
'	O
re	O
assigned	O
a	O
primary	O
key	O
.	O
(	O
Yes	O
,	O
UUIDs	O
and	O
similar	O
concepts	O
may	O
help	O
to	O
assign	O
primary	O
keys	O
early	O
.	O
)	O
Now	O
,	O
it	O
'	O
s	O
theoretically	O
also	O
possible	O
to	O
achieve	O
that	O
with	O
Option	O
3	O
,	O
even	O
though	O
so	O
-	O
called	O
"	O
business	O
-	O
keys	O
"	O
have	O
the	O
nasty	O
drawback	O
that	O
they	O
can	O
change	O
:	O
"	O
All	O
you	O
'	O
ll	O
have	O
to	O
do	O
is	O
delete	O
the	O
already	O
inserted	O
entities	O
from	O
the	O
set	O
(	O
s	O
)	O
,	O
and	O
re	O
-	O
insert	O
them	O
.	O
"	O
That	O
is	O
true	O
-	O
but	O
it	O
also	O
means	O
,	O
that	O
in	O
a	O
distributed	O
system	O
,	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
,	O
that	O
this	O
is	O
done	O
absolutely	O
everywhere	O
the	O
data	O
has	O
been	O
inserted	O
to	O
(	O
and	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
,	O
that	O
the	O
update	O
is	O
performed	O
,	O
before	O
other	O
things	O
occur	O
)	O
.	O
You	O
'	O
ll	O
need	O
a	O
sophisticated	O
update	O
mechanism	O
,	O
especially	O
if	O
some	O
remote	O
systems	O
aren	O
'	O
t	O
currently	O
reachable	O
.	O
.	O
.	O
Option	O
1	O
can	O
only	O
be	O
used	O
,	O
if	O
all	O
the	O
objects	O
in	O
your	O
sets	O
are	O
from	O
the	O
same	O
Hibernate	O
session	O
.	O
The	O
Hibernate	O
documentation	O
makes	O
this	O
very	O
clear	O
in	O
chapter	O
13	O
.	O
1	O
.	O
3	O
.	O
Considering	O
object	O
identity	O
:	O
#	O
blockquote	O
It	O
continues	O
to	O
argue	O
in	O
favor	O
of	O
Option	O
3	O
:	O
#	O
blockquote	O
This	O
is	O
true	O
,	O
if	O
you	O
#	O
li	O
cannot	O
assign	O
the	O
id	O
early	O
(	O
e	O
.	O
g	O
.	O
by	O
using	O
UUIDs	O
)	O
#	O
li	O
and	O
yet	O
you	O
absolutely	O
want	O
to	O
put	O
your	O
objects	O
in	O
sets	O
while	O
they	O
'	O
re	O
in	O
transient	O
state	O
.	O
Otherwise	O
,	O
you	O
'	O
re	O
free	O
to	O
choose	O
Option	O
2	O
.	O
Then	O
it	O
mentions	O
the	O
need	O
for	O
a	O
relative	O
stability	O
:	O
#	O
blockquote	O
This	O
is	O
correct	O
.	O
The	O
practical	O
problem	O
I	O
see	O
with	O
this	O
is	O
:	O
If	O
you	O
can	O
'	O
t	O
guarantee	O
absolute	O
stability	O
,	O
how	O
will	O
you	O
be	O
able	O
to	O
guarantee	O
stability	O
"	O
as	O
long	O
as	O
the	O
objects	O
are	O
in	O
the	O
same	O
Set	O
"	O
.	O
I	O
can	O
imagine	O
some	O
special	O
cases	O
(	O
like	O
using	O
sets	O
only	O
for	O
a	O
conversation	O
and	O
then	O
throwing	O
it	O
away	O
)	O
,	O
but	O
I	O
would	O
question	O
the	O
general	O
practicability	O
of	O
this	O
.	O
Short	O
version	O
:	O
#	O
li	O
Option	O
1	O
can	O
only	O
be	O
used	O
with	O
objects	O
within	O
a	O
single	O
session	O
.	O
#	O
li	O
If	O
you	O
can	O
,	O
use	O
Option	O
2	O
.	O
(	O
Assign	O
PK	O
as	O
early	O
as	O
possible	O
,	O
because	O
you	O
can	O
'	O
t	O
use	O
the	O
objects	O
in	O
sets	O
until	O
the	O
PK	O
is	O
assigned	O
.	O
)	O
#	O
li	O
If	O
you	O
can	O
guarantee	O
relative	O
stability	O
,	O
you	O
can	O
use	O
Option	O
3	O
.	O
But	O
be	O
careful	O
with	O
this	O
.	O
Question	O
-	O
5175728	O
,	O
answer	O
-	O
5175771	O
Have	O
a	O
look	O
at	O
the	O
Date	B-api_mention
class	O
.	O
There	O
'	O
s	O
also	O
the	O
newer	O
Calendar	O
class	O
which	O
is	O
the	O
preferred	O
method	O
of	O
doing	O
many	O
date	O
/	O
time	O
operations	O
(	O
a	O
lot	O
of	O
the	O
methods	O
on	O
Date	B-api_mention
have	O
been	O
deprecated	O
.	O
)	O
If	O
you	O
just	O
want	O
the	O
current	O
date	O
,	O
then	O
either	O
create	O
a	O
new	O
Date	B-api_mention
object	O
or	O
call	O
Calendar	B-api_mention
.	I-api_mention
getInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Question	O
-	O
31696485	O
,	O
answer	O
-	O
31696584	O
Your	O
question	O
is	O
based	O
on	O
assumption	O
that	O
the	O
code	O
which	O
may	O
throw	O
NullPointerException	B-api_mention
is	O
worse	O
than	O
the	O
code	O
which	O
may	O
not	O
.	O
This	O
assumption	O
is	O
wrong	O
.	O
If	O
you	O
expect	O
that	O
your	O
foobar	O
is	O
never	O
null	O
due	O
to	O
the	O
program	O
logic	O
,	O
it	O
'	O
s	O
much	O
better	O
to	O
use	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
you	O
will	O
see	O
a	O
NullPointerException	B-api_mention
which	O
will	O
indicate	O
that	O
your	O
program	O
has	O
a	O
bug	O
.	O
If	O
you	O
use	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
the	O
foobar	O
happens	O
to	O
be	O
null	O
due	O
to	O
the	O
bug	O
,	O
then	O
your	O
program	O
will	O
silently	O
continue	O
working	O
incorrectly	O
,	O
which	O
may	O
be	O
a	O
bigger	O
disaster	O
.	O
This	O
way	O
an	O
error	O
may	O
occur	O
much	O
later	O
and	O
it	O
would	O
be	O
much	O
harder	O
to	O
understand	O
at	O
which	O
point	O
it	O
went	O
wrong	O
.	O
Question	O
-	O
24649842	O
What	O
'	O
s	O
the	O
main	O
difference	O
between	O
scheduleAtFixedRate	B-api_mention
and	O
scheduleWithFixedDelay	B-api_mention
methods	O
of	O
ScheduledExecutorService	B-api_mention
?	O
#	O
pre	O
they	O
print	O
exact	O
the	O
same	O
time	O
,	O
seems	O
they	O
are	O
executed	O
at	O
exact	O
the	O
same	O
interval	O
.	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561853	O
Let	O
me	O
explain	O
what	O
is	O
happening	O
here	O
,	O
because	O
it	O
isn	O
'	O
t	O
obvious	O
!	O
First	O
,	O
Stream	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
)	I-api_mention
accepts	O
an	O
instance	O
of	O
Comparator	B-api_mention
so	O
that	O
items	O
in	O
the	O
stream	O
can	O
be	O
compared	O
against	O
each	O
other	O
to	O
find	O
the	O
minimum	O
or	O
maximum	O
,	O
in	O
some	O
optimal	O
order	O
that	O
you	O
don	O
'	O
t	O
need	O
to	O
worry	O
too	O
much	O
about	O
.	O
So	O
the	O
question	O
is	O
,	O
of	O
course	O
,	O
why	O
is	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
max	I-api_mention
accepted	O
?	O
After	O
all	O
it	O
'	O
s	O
not	O
a	O
comparator	O
!	O
The	O
answer	O
is	O
in	O
the	O
way	O
that	O
the	O
new	O
lambda	O
functionality	O
works	O
in	O
Java	O
8	O
.	O
It	O
relies	O
on	O
a	O
concept	O
which	O
is	O
informally	O
known	O
as	O
"	O
single	O
abstract	O
method	O
"	O
interfaces	O
,	O
or	O
"	O
SAM	O
"	O
interfaces	O
.	O
The	O
idea	O
is	O
that	O
any	O
interface	O
with	O
one	O
abstract	O
method	O
can	O
be	O
automatically	O
implemented	O
by	O
any	O
lambda	O
-	O
or	O
method	O
reference	O
-	O
whose	O
method	O
signature	O
is	O
a	O
match	O
for	O
the	O
one	O
method	O
on	O
the	O
interface	O
.	O
So	O
examining	O
the	O
Comparator	B-api_mention
interface	O
(	O
simple	O
version	O
)	O
:	O
#	O
pre	O
If	O
a	O
method	O
is	O
looking	O
for	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
then	O
it	O
'	O
s	O
essentially	O
looking	O
for	O
this	O
signature	O
:	O
int	O
xxx	O
(	O
args	O
)	O
;	O
I	O
use	O
"	O
xxx	O
"	O
because	O
the	O
method	O
name	O
is	O
not	O
used	O
for	O
matching	O
purposes	O
.	O
Therefore	O
,	O
both	O
Integer	B-api_mention
.	I-api_mention
min	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Integer	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
close	O
enough	O
that	O
autoboxing	O
will	O
allow	O
this	O
to	O
appear	O
as	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
in	O
a	O
method	O
context	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
25757711	O
ArrayList	B-api_mention
shrinks	O
or	O
expands	O
dynamically	O
.	O
This	O
is	O
a	O
effective	O
but	O
costly	O
operation	O
,	O
if	O
you	O
know	O
size	O
of	O
your	O
array	O
will	O
be	O
fixed	O
then	O
its	O
better	O
to	O
mention	O
the	O
size	O
of	O
the	O
array	O
,	O
If	O
you	O
don	O
'	O
t	O
,	O
new	O
array	O
will	O
be	O
created	O
at	O
each	O
insertion	O
and	O
reallocation	O
will	O
be	O
done	O
for	O
each	O
element	O
.	O
this	O
will	O
cost	O
you	O
.	O
ensureCapacity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
this	O
method	O
help	O
to	O
avoid	O
reallocations	O
and	O
helps	O
increase	O
size	O
of	O
arraylist	O
.	O
trimToSize	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
this	O
is	O
reverse	O
used	O
to	O
shrink	O
size	O
Arraylist	B-api_mention
has	O
3	O
constructors	O
:	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
)	I-api_mention
-	O
builds	O
empty	O
ArrayList	B-api_mention
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
Collection	I-api_mention
c	I-api_mention
)	I-api_mention
-	O
builds	O
a	O
ArrayList	B-api_mention
initialized	O
with	O
elements	O
of	O
collection	O
c	O
.	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
int	I-api_mention
capacity	I-api_mention
)	I-api_mention
-	O
builds	O
an	O
ArrayList	B-api_mention
with	O
specified	O
initial	O
capacity	O
.	O
Question	O
-	O
28770822	O
I	O
understand	O
the	O
use	O
of	O
the	O
@	O
Native	O
annotation	O
.	O
#	O
blockquote	O
However	O
,	O
while	O
reading	O
the	O
java	O
source	O
code	O
I	O
noticed	O
that	O
in	O
the	O
class	O
Integer	B-api_mention
and	O
Long	B-api_mention
the	O
SIZE	O
constant	O
is	O
@	O
Native	O
while	O
it	O
is	O
not	O
for	O
the	O
Float	B-api_mention
,	O
Byte	B-api_mention
,	O
Double	B-api_mention
,	O
Short	B-api_mention
and	O
Character	B-api_mention
.	O
Note	O
that	O
the	O
SIZE	O
constant	O
represents	O
the	O
number	O
of	O
bits	O
used	O
to	O
represent	O
the	O
actual	O
value	O
.	O
#	O
pre	O
Edit	O
:	O
I	O
just	O
noticed	O
that	O
this	O
also	O
applies	O
for	O
MAX	O
_	O
VALUE	O
and	O
MIN	O
_	O
VALUE	O
of	O
the	O
same	O
classes	O
.	O
Edit	O
2	O
:	O
I	O
had	O
spare	O
time	O
to	O
do	O
some	O
research	O
on	O
this	O
,	O
and	O
looking	O
at	O
the	O
header	O
files	O
of	O
the	O
Long	B-api_mention
,	O
Float	B-api_mention
etc	O
.	O
classes	O
I	O
had	O
hope	O
to	O
figure	O
out	O
that	O
the	O
constants	O
were	O
not	O
present	O
in	O
the	O
other	O
headers	O
,	O
but	O
unfortunately	O
they	O
are	O
.	O
#	O
pre	O
Why	O
is	O
the	O
SIZE	O
constant	O
only	O
@	O
Native	O
for	O
Integer	B-api_mention
and	O
Long	B-api_mention
?	O
Question	O
-	O
21105403	O
I	O
'	O
ve	O
written	O
a	O
factory	O
to	O
produce	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Connection	I-api_mention
objects	O
:	O
#	O
pre	O
I	O
'	O
d	O
like	O
to	O
validate	O
the	O
parameters	O
passed	O
to	O
DriverManager	B-api_mention
.	I-api_mention
getConnection	I-api_mention
,	O
but	O
I	O
don	O
'	O
t	O
know	O
how	O
to	O
mock	O
a	O
static	O
method	O
.	O
I	O
'	O
m	O
using	O
JUnit	O
4	O
and	O
Mockito	B-api_mention
for	O
my	O
test	O
cases	O
.	O
Is	O
there	O
a	O
good	O
way	O
to	O
mock	O
/	O
verify	O
this	O
specific	O
use	O
-	O
case	O
?	O
Question	O
-	O
27430092	O
,	O
answer	O
-	O
27449187	O
The	O
standard	O
use	O
case	O
for	O
BigInteger	B-api_mention
.	I-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
is	O
in	O
cryptography	O
.	O
Specifically	O
,	O
certain	O
cryptographic	O
algorithms	O
,	O
such	O
as	O
RSA	O
,	O
require	O
randomly	O
chosen	O
large	O
primes	O
.	O
Importantly	O
,	O
however	O
,	O
these	O
algorithms	O
don	O
'	O
t	O
really	O
require	O
these	O
numbers	O
to	O
be	O
guaranteed	O
to	O
be	O
prime	O
โ	O
they	O
just	O
need	O
to	O
be	O
prime	O
with	O
a	O
very	O
high	O
probability	O
.	O
How	O
high	O
is	O
very	O
high	O
?	O
Well	O
,	O
in	O
a	O
crypto	O
application	O
,	O
one	O
would	O
typically	O
call	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
an	O
argument	O
somewhere	O
between	O
128	O
and	O
256	O
.	O
Thus	O
,	O
the	O
probability	O
of	O
a	O
non	O
-	O
prime	O
number	O
passing	O
such	O
a	O
test	O
is	O
less	O
than	O
one	O
in	O
2	O
128	O
or	O
2	O
256	O
.	O
Let	O
'	O
s	O
put	O
that	O
in	O
perspective	O
:	O
if	O
you	O
had	O
10	O
billion	O
computers	O
,	O
each	O
generating	O
10	O
billion	O
probable	O
prime	O
numbers	O
per	O
second	O
(	O
which	O
would	O
mean	O
less	O
than	O
one	O
clock	O
cycle	O
per	O
number	O
on	O
any	O
modern	O
CPU	O
)	O
,	O
and	O
the	O
primality	O
of	O
those	O
numbers	O
was	O
tested	O
with	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
would	O
,	O
on	O
average	O
,	O
expect	O
one	O
non	O
-	O
prime	O
number	O
to	O
slip	O
in	O
once	O
in	O
every	O
100	O
billion	O
years	O
.	O
That	O
is	O
,	O
that	O
would	O
be	O
the	O
case	O
,	O
if	O
those	O
10	O
billion	O
computers	O
could	O
somehow	O
all	O
run	O
for	O
hundreds	O
of	O
billions	O
of	O
years	O
without	O
experiencing	O
any	O
hardware	O
failures	O
.	O
In	O
practice	O
,	O
though	O
,	O
it	O
'	O
s	O
a	O
lot	O
more	O
likely	O
for	O
a	O
random	O
cosmic	O
ray	O
to	O
strike	O
your	O
computer	O
at	O
just	O
the	O
right	O
time	O
and	O
place	O
to	O
flip	O
the	O
return	O
value	O
of	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
false	O
to	O
true	O
,	O
without	O
causing	O
any	O
other	O
detectable	O
effects	O
,	O
than	O
it	O
is	O
for	O
a	O
non	O
-	O
prime	O
number	O
to	O
actually	O
pass	O
the	O
probabilistic	O
primality	O
test	O
at	O
that	O
certainty	O
level	O
.	O
Of	O
course	O
,	O
the	O
same	O
risk	O
of	O
random	O
cosmic	O
rays	O
and	O
other	O
hardware	O
faults	O
also	O
applies	O
to	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
.	O
Thus	O
,	O
in	O
practice	O
,	O
even	O
these	O
tests	O
have	O
a	O
(	O
very	O
small	O
)	O
baseline	O
false	O
positive	O
rate	O
due	O
to	O
random	O
hardware	O
failures	O
(	O
not	O
to	O
mention	O
all	O
other	O
possible	O
sources	O
of	O
errors	O
,	O
such	O
as	O
implementation	O
bugs	O
)	O
.	O
Since	O
it	O
'	O
s	O
easy	O
to	O
push	O
the	O
intrinsic	O
false	O
positive	O
rate	O
of	O
the	O
Miller	O
โ	O
Rabin	O
primality	O
test	O
used	O
by	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
far	O
below	O
this	O
baseline	O
rate	O
,	O
simply	O
by	O
repeating	O
the	O
test	O
sufficiently	O
many	O
times	O
,	O
and	O
since	O
,	O
even	O
repeated	O
so	O
many	O
times	O
,	O
the	O
Miller	O
โ	O
Rabin	O
test	O
is	O
still	O
much	O
faster	O
in	O
practice	O
than	O
the	O
best	O
known	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
,	O
it	O
remains	O
the	O
standard	O
primality	O
test	O
for	O
cryptographic	O
applications	O
.	O
(	O
Besides	O
,	O
even	O
if	O
you	O
happened	O
to	O
accidentally	O
select	O
a	O
strong	O
pseudoprime	O
as	O
one	O
of	O
the	O
factors	O
of	O
your	O
RSA	O
modulus	O
,	O
it	O
would	O
not	O
generally	O
lead	O
to	O
a	O
catastrophic	O
failure	O
.	O
Typically	O
,	O
such	O
pseudoprimes	O
would	O
be	O
products	O
of	O
two	O
(	O
or	O
rarely	O
more	O
)	O
primes	O
of	O
approximately	O
half	O
the	O
length	O
,	O
which	O
means	O
that	O
you	O
'	O
d	O
end	O
up	O
with	O
a	O
multi	O
-	O
prime	O
RSA	O
key	O
.	O
As	O
long	O
as	O
none	O
of	O
the	O
factors	O
were	O
too	O
small	O
(	O
and	O
if	O
they	O
were	O
,	O
the	O
primality	O
test	O
should	O
'	O
ve	O
caught	O
them	O
)	O
,	O
the	O
RSA	O
algorithm	O
will	O
still	O
work	O
just	O
fine	O
,	O
and	O
the	O
key	O
,	O
although	O
somewhat	O
weaker	O
against	O
certain	O
types	O
of	O
attacks	O
than	O
normal	O
RSA	O
keys	O
of	O
the	O
same	O
length	O
,	O
should	O
still	O
be	O
reasonably	O
secure	O
if	O
you	O
didn	O
'	O
t	O
needlessly	O
skimp	O
on	O
the	O
key	O
length	O
.	O
)	O
Question	O
-	O
29328785	O
#	O
pre	O
Compile	O
>	O
javac	O
BigDecimalTest	O
.	O
java	O
Execute	O
>	O
java	O
BigDecimalTest	O
Output	O
#	O
pre	O
The	O
value	O
of	O
z	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
output	O
is	O
correct	O
4	O
.	O
883242e	O
+	O
888	O
/	O
7	O
.	O
115109e	O
+	O
302	O
=	O
6	O
.	O
863200e	O
+	O
585	O
as	O
is	O
the	O
value	O
of	O
y	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
notice	O
that	O
the	O
value	O
given	O
for	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
completely	O
wrong	O
.	O
Why	O
is	O
this	O
?	O
Strangely	O
,	O
if	O
the	O
scale	O
(	O
i	O
.	O
e	O
.	O
desired	O
decimal	O
places	O
)	O
of	O
the	O
result	O
of	O
the	O
division	O
is	O
changed	O
BigDecimal	B-api_mention
z	O
=	O
x	O
.	B-api_mention
divide	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
produce	O
the	O
correct	O
value	O
for	O
x	O
.	O
Or	O
,	O
if	O
the	O
operands	O
are	O
swapped	O
BigDecimal	B-api_mention
z	O
=	O
y	O
.	B-api_mention
divide	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
also	O
then	O
produce	O
the	O
correct	O
value	O
.	O
Or	O
,	O
if	O
the	O
exponent	O
of	O
x	O
is	O
changed	O
from	O
e	O
+	O
888	O
to	O
e	O
.	O
g	O
.	O
e	O
+	O
878	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
correct	O
.	O
Or	O
,	O
if	O
another	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
is	O
added	O
above	O
the	O
divide	O
operation	O
,	O
then	O
both	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
will	O
produce	O
the	O
correct	O
value	O
!	O
On	O
the	O
machine	O
I	O
'	O
m	O
testing	O
this	O
,	O
Windows	O
7	O
64	O
bit	O
,	O
the	O
behaviour	O
is	O
the	O
same	O
using	O
java	O
7	O
and	O
8	O
,	O
both	O
32bit	O
and	O
64	O
bit	O
versions	O
,	O
but	O
testing	O
online	O
at	O
#	O
a	O
produces	O
different	O
results	O
for	O
java	O
7	O
and	O
java	O
8	O
.	O
Using	O
java	O
7	O
,	O
the	O
value	O
of	O
x	O
is	O
given	O
correctly	O
:	O
#	O
a	O
,	O
but	O
using	O
java	O
8	O
its	O
value	O
is	O
incorrect	O
:	O
#	O
a	O
.	O
Also	O
,	O
this	O
behaviour	O
is	O
not	O
unique	O
to	O
this	O
particular	O
value	O
of	O
x	O
,	O
as	O
calling	O
toString	B-api_mention
on	O
other	O
BigDecimals	O
with	O
more	O
than	O
about	O
1500	O
digits	O
after	O
passing	O
them	O
as	O
the	O
first	O
operand	O
to	O
a	O
divide	O
operation	O
will	O
also	O
produce	O
incorrect	O
values	O
.	O
What	O
is	O
the	O
explanation	O
for	O
this	O
?	O
The	O
divide	O
operation	O
seems	O
to	O
be	O
mutating	O
the	O
value	O
produced	O
by	O
subsequent	O
toString	B-api_mention
calls	O
on	O
its	O
operands	O
.	O
Does	O
this	O
happen	O
on	O
your	O
platform	O
?	O
Edit	O
:	O
The	O
issue	O
seems	O
to	O
be	O
with	O
the	O
java	O
8	O
runtime	O
only	O
,	O
as	O
the	O
above	O
program	O
compiled	O
with	O
java	O
7	O
produces	O
correct	O
output	O
when	O
executed	O
with	O
the	O
java	O
7	O
runtime	O
,	O
but	O
incorrect	O
output	O
when	O
executed	O
with	O
the	O
java	O
8	O
runtime	O
.	O
Edit	O
:	O
I	O
'	O
ve	O
tested	O
with	O
the	O
early	O
access	O
jre1	O
.	O
8	O
.	O
0	O
_	O
60	O
and	O
the	O
bug	O
does	O
not	O
appear	O
,	O
and	O
according	O
to	O
Marco13	O
'	O
s	O
answer	O
it	O
was	O
fixed	O
in	O
build	O
51	O
.	O
The	O
Oracle	O
JDK	O
8	O
product	O
binaries	O
are	O
only	O
at	O
update	O
40	O
though	O
so	O
it	O
may	O
be	O
some	O
time	O
before	O
the	O
fixed	O
versions	O
are	O
widely	O
used	O
.	O
Question	O
-	O
30727515	O
,	O
answer	O
-	O
30739477	O
Since	O
this	O
hasn	O
โ	O
t	O
addressed	O
yet	O
,	O
here	O
an	O
explanation	O
,	O
why	O
the	O
translation	O
of	O
Unicode	O
escapes	O
happens	O
before	O
any	O
other	O
source	O
code	O
processing	O
:	O
The	O
idea	O
behind	O
it	O
was	O
that	O
it	O
allows	O
lossless	O
translations	O
of	O
Java	O
source	O
code	O
between	O
different	O
character	O
encodings	O
.	O
Today	O
,	O
there	O
is	O
widespread	O
Unicode	O
support	O
,	O
and	O
this	O
doesn	O
โ	O
t	O
look	O
like	O
a	O
problem	O
,	O
but	O
back	O
then	O
it	O
wasn	O
โ	O
t	O
easy	O
for	O
a	O
developer	O
from	O
a	O
western	O
country	O
to	O
receive	O
some	O
source	O
code	O
from	O
his	O
Asian	O
colleague	O
containing	O
Asian	O
characters	O
,	O
make	O
some	O
changes	O
(	O
including	O
compiling	O
and	O
testing	O
it	O
)	O
and	O
sending	O
the	O
result	O
back	O
,	O
all	O
without	O
damaging	O
something	O
.	O
So	O
,	O
Java	O
source	O
code	O
can	O
be	O
written	O
in	O
any	O
encoding	O
and	O
allows	O
a	O
wide	O
range	O
of	O
characters	O
within	O
identifiers	O
,	O
character	O
and	O
String	B-api_mention
literals	O
and	O
comments	O
.	O
Then	O
,	O
in	O
order	O
to	O
transfer	O
it	O
losslessly	O
,	O
all	O
characters	O
not	O
supported	O
by	O
the	O
target	O
encoding	O
are	O
replaced	O
by	O
their	O
Unicode	O
escapes	O
.	O
This	O
is	O
a	O
reversible	O
process	O
and	O
the	O
interesting	O
point	O
is	O
that	O
the	O
translation	O
can	O
be	O
done	O
by	O
a	O
tool	O
which	O
doesn	O
โ	O
t	O
need	O
to	O
know	O
anything	O
about	O
the	O
Java	O
source	O
code	O
syntax	O
as	O
the	O
translation	O
rule	O
is	O
not	O
dependent	O
on	O
it	O
.	O
This	O
works	O
as	O
the	O
translation	O
to	O
their	O
actual	O
Unicode	O
characters	O
inside	O
the	O
compiler	O
happens	O
independently	O
to	O
the	O
Java	O
source	O
code	O
syntax	O
as	O
well	O
.	O
It	O
implies	O
that	O
you	O
can	O
perform	O
an	O
arbitrary	O
number	O
of	O
translation	O
steps	O
in	O
both	O
directions	O
without	O
ever	O
changing	O
the	O
meaning	O
of	O
the	O
source	O
code	O
.	O
This	O
is	O
the	O
reason	O
for	O
another	O
weird	O
feature	O
which	O
hasn	O
โ	O
t	O
even	O
mentioned	O
:	O
the	O
\	O
uuuuuuxxxx	O
syntax	O
:	O
When	O
a	O
translation	O
tool	O
is	O
escaping	O
characters	O
and	O
encounters	O
a	O
sequence	O
that	O
is	O
already	O
an	O
escaped	O
sequence	O
,	O
it	O
should	O
insert	O
an	O
additional	O
u	O
into	O
the	O
sequence	O
,	O
converting	O
\	O
ucafe	O
to	O
\	O
uucafe	O
.	O
The	O
meaning	O
doesn	O
โ	O
t	O
change	O
,	O
but	O
when	O
converting	O
into	O
the	O
other	O
direction	O
,	O
the	O
tool	O
should	O
just	O
remove	O
one	O
u	O
and	O
replace	O
only	O
sequences	O
containing	O
a	O
single	O
u	O
by	O
their	O
Unicode	O
characters	O
.	O
That	O
way	O
,	O
even	O
Unicode	O
escapes	O
are	O
retained	O
in	O
their	O
original	O
form	O
when	O
converting	O
back	O
and	O
forth	O
.	O
I	O
guess	O
,	O
no	O
-	O
one	O
ever	O
used	O
that	O
feature	O
โฆ	O
Question	O
-	O
20945049	O
We	O
all	O
know	O
that	O
String	B-api_mention
is	O
immutable	O
in	O
Java	O
,	O
but	O
check	O
the	O
following	O
code	O
:	O
#	O
pre	O
Why	O
does	O
this	O
program	O
operate	O
like	O
this	O
?	O
And	O
why	O
is	O
the	O
value	O
of	O
s1	O
and	O
s2	O
changed	O
,	O
but	O
not	O
s3	O
?	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
39005452	O
The	O
best	O
post	O
I	O
'	O
ve	O
seen	O
on	O
the	O
topic	O
was	O
written	O
by	O
Daniel	O
Olszewski	O
and	O
can	O
be	O
found	O
at	O
#	O
a	O
.	O
While	O
others	O
mention	O
when	O
you	O
should	O
or	O
should	O
not	O
use	O
Optional	B-api_mention
,	O
this	O
post	O
actually	O
explains	O
why	O
.	O
Cross	O
-	O
posting	O
here	O
in	O
case	O
the	O
link	O
goes	O
down	O
:	O
#	O
blockquote	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
26159918	O
invoke	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
executing	O
on	O
the	O
calling	O
thread	O
,	O
like	O
any	O
other	O
method	O
call	O
.	O
whereas	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
new	O
thread	O
.	O
invoking	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
programmatic	O
bug	O
.	O
Question	O
-	O
10066590	O
With	O
Mockito	O
,	O
I	O
want	O
to	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
a	O
method	O
call	O
with	O
byte	O
[	O
]	O
in	O
its	O
argument	O
list	O
,	O
but	O
I	O
didn	O
'	O
t	O
find	O
how	O
to	O
write	O
this	O
.	O
myMethod	O
(	O
args	O
)	O
I	O
just	O
want	O
something	O
like	O
anyByteArray	O
(	O
args	O
)	O
,	O
how	O
to	O
do	O
that	O
with	O
Mockito	O
?	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
26826084	O
#	O
li	O
If	O
you	O
have	O
a	O
business	O
key	O
,	O
then	O
you	O
should	O
use	O
that	O
for	O
equals	B-api_mention
/	O
hashCode	B-api_mention
.	O
#	O
li	O
If	O
you	O
don	O
'	O
t	O
have	O
a	O
business	O
key	O
,	O
you	O
should	O
not	O
leave	O
it	O
with	O
the	O
default	O
Object	B-api_mention
equals	I-api_mention
and	O
hashCode	B-api_mention
implementations	O
because	O
that	O
does	O
not	O
work	O
after	O
you	O
merge	O
and	O
entity	O
.	O
#	O
li	O
You	O
can	O
use	O
the	O
entity	O
identifier	O
as	O
suggested	O
in	O
this	O
post	O
.	O
The	O
only	O
catch	O
is	O
that	O
you	O
need	O
to	O
use	O
a	O
hashCode	B-api_mention
implementation	O
that	O
always	O
return	O
the	O
same	O
value	O
,	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667310	O
You	O
can	O
use	O
Mode	O
.	O
mode1	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
however	O
you	O
often	O
don	O
'	O
t	O
need	O
to	O
do	O
this	O
.	O
Mode	O
mode	O
=	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
30888581	O
,	O
answer	O
-	O
30897102	O
Once	O
given	O
more	O
thought	O
In	O
hindsight	O
it	O
sounds	O
like	O
they	O
were	O
looking	O
for	O
the	O
execute	O
around	O
pattern	O
.	O
They	O
'	O
re	O
usually	O
used	O
to	O
do	O
things	O
like	O
enforce	O
closing	O
of	O
streams	O
.	O
This	O
is	O
also	O
more	O
relevant	O
due	O
to	O
this	O
line	O
:	O
#	O
blockquote	O
The	O
idea	O
is	O
you	O
give	O
the	O
thing	O
that	O
does	O
the	O
"	O
executing	O
around	O
"	O
some	O
class	O
to	O
do	O
somethings	O
with	O
.	O
You	O
'	O
ll	O
probably	O
use	O
Runnable	B-api_mention
but	O
it	O
'	O
s	O
not	O
necessary	O
.	O
(	O
Runnable	B-api_mention
makes	O
the	O
most	O
sense	O
and	O
you	O
'	O
ll	O
see	O
why	O
soon	O
.	O
)	O
In	O
your	O
StopWatch	O
class	O
add	O
some	O
method	O
like	O
this	O
#	O
pre	O
You	O
would	O
then	O
call	O
it	O
like	O
this	O
#	O
pre	O
This	O
makes	O
it	O
fool	O
proof	O
.	O
You	O
don	O
'	O
t	O
have	O
to	O
worry	O
about	O
handling	O
stop	O
before	O
start	O
or	O
people	O
forgetting	O
to	O
call	O
one	O
and	O
not	O
the	O
other	O
,	O
etc	O
.	O
The	O
reason	O
Runnable	B-api_mention
is	O
nice	O
is	O
because	O
#	O
li	O
Standard	O
java	O
class	O
,	O
not	O
your	O
own	O
or	O
third	O
party	O
#	O
li	O
End	O
users	O
can	O
put	O
whatever	O
they	O
need	O
in	O
the	O
Runnable	B-api_mention
to	O
be	O
done	O
.	O
(	O
If	O
you	O
were	O
using	O
it	O
to	O
enforce	O
stream	O
closing	O
then	O
you	O
could	O
put	O
the	O
actions	O
that	O
need	O
to	O
be	O
done	O
with	O
a	O
database	O
connection	O
inside	O
so	O
the	O
end	O
user	O
doesn	O
'	O
t	O
need	O
to	O
worry	O
about	O
how	O
to	O
open	O
and	O
close	O
it	O
and	O
you	O
simultaneously	O
force	O
them	O
to	O
close	O
it	O
properly	O
.	O
)	O
If	O
you	O
wanted	O
,	O
you	O
could	O
make	O
some	O
StopWatchWrapper	O
instead	O
leave	O
StopWatch	O
unmodified	O
.	O
You	O
could	O
also	O
make	O
measureAction	O
(	O
args	O
)	O
not	O
return	O
a	O
time	O
and	O
make	O
getTime	O
(	O
args	O
)	O
public	O
instead	O
.	O
The	O
Java	O
8	O
way	O
to	O
calling	O
it	O
is	O
even	O
simpler	O
#	O
pre	O
#	O
blockquote	O
Original	O
answer	O
#	O
blockquote	O
To	O
me	O
something	O
like	O
this	O
seems	O
to	O
be	O
good	O
.	O
#	O
pre	O
The	O
reason	O
I	O
believe	O
this	O
to	O
be	O
good	O
is	O
the	O
recording	O
is	O
during	O
object	O
creation	O
so	O
it	O
can	O
'	O
t	O
be	O
forgotten	O
or	O
done	O
out	O
of	O
order	O
(	O
can	O
'	O
t	O
call	O
stop	O
(	O
args	O
)	O
method	O
if	O
it	O
doesn	O
'	O
t	O
exist	O
)	O
.	O
One	O
flaw	O
is	O
probably	O
the	O
naming	O
of	O
stop	O
(	O
args	O
)	O
.	O
At	O
first	O
I	O
thought	O
maybe	O
lap	O
(	O
args	O
)	O
but	O
that	O
usually	O
implies	O
a	O
restarting	O
or	O
some	O
sort	O
(	O
or	O
at	O
least	O
recording	O
since	O
last	O
lap	O
/	O
start	O
)	O
.	O
Perhaps	O
read	O
(	O
args	O
)	O
would	O
be	O
better	O
?	O
This	O
mimics	O
the	O
action	O
of	O
looking	O
at	O
the	O
time	O
on	O
a	O
stop	O
watch	O
.	O
I	O
chose	O
stop	O
(	O
args	O
)	O
to	O
keep	O
it	O
similar	O
to	O
the	O
original	O
class	O
.	O
The	O
only	O
thing	O
I	O
'	O
m	O
not	O
100	O
%	O
sure	O
about	O
is	O
how	O
to	O
get	O
the	O
time	O
.	O
To	O
be	O
honest	O
that	O
seems	O
to	O
be	O
a	O
more	O
minor	O
detail	O
.	O
As	O
long	O
as	O
both	O
.	O
.	O
.	O
in	O
the	O
above	O
code	O
obtain	O
current	O
time	O
the	O
same	O
way	O
it	O
should	O
be	O
fine	O
.	O
Question	O
-	O
9297899	O
,	O
answer	O
-	O
25816501	O
Even	O
though	O
this	O
is	O
not	O
a	O
direct	O
answer	O
to	O
the	O
question	O
,	O
it	O
is	O
an	O
addition	O
to	O
the	O
.	B-api_mention
length	I-api_mention
vs	O
.	B-api_mention
size	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
argument	O
.	O
I	O
was	O
researching	O
something	O
related	O
to	O
this	O
question	O
so	O
when	O
I	O
came	O
across	O
it	O
I	O
noticed	O
that	O
the	O
definition	O
(	O
s	O
)	O
provided	O
here	O
#	O
blockquote	O
is	O
not	O
"	O
exactly	O
"	O
correct	O
.	O
The	O
field	O
length	O
contains	O
the	O
number	O
of	O
available	O
places	O
to	O
put	O
a	O
component	O
,	O
not	O
the	O
number	O
of	O
components	O
present	O
in	O
the	O
array	O
.	O
So	O
it	O
represents	O
the	O
total	O
available	O
memory	O
allocated	O
to	O
that	O
array	O
,	O
not	O
how	O
much	O
of	O
that	O
memory	O
is	O
filled	O
.	O
#	O
img	O
Example	O
:	O
#	O
pre	O
Output	O
:	O
#	O
pre	O
However	O
,	O
the	O
.	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
property	O
of	O
the	O
ArrayList	B-api_mention
does	O
give	O
the	O
number	O
of	O
elements	O
in	O
the	O
list	O
:	O
#	O
pre	O
Output	O
:	O
#	O
pre	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
33093380	O
You	O
may	O
try	O
isReachable	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
InetAddress	O
class	O
to	O
figure	O
out	O
which	O
IP	O
address	O
is	O
your	O
real	O
publicly	O
available	O
IP	O
address	O
.	O
I	O
think	O
other	O
type	O
of	O
addresses	O
(	O
site	O
local	O
,	O
link	O
local	O
)	O
are	O
not	O
reachable	O
from	O
outside	O
.	O
#	O
pre	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
15633542	O
Nice	O
question	O
.	O
I	O
'	O
ve	O
got	O
of	O
the	O
following	O
five	O
6	O
methods	O
to	O
do	O
it	O
.	O
#	O
pre	O
#	O
blockquote	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
in	O
turn	O
sets	O
the	O
value	O
char	O
array	O
.	O
#	O
pre	O
On	O
the	O
other	O
hand	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
the	O
following	O
package	O
private	O
constructor	O
.	O
#	O
pre	O
Source	O
code	O
from	O
String	B-api_mention
.	O
java	O
in	O
Java	O
8	O
source	O
code	O
#	O
blockquote	O
#	O
li	O
Java	O
:	O
:	O
How	O
to	O
convert	O
primitive	O
char	O
to	O
String	B-api_mention
in	O
Java	O
#	O
li	O
How	O
to	O
convert	O
Char	B-api_mention
to	O
String	B-api_mention
in	O
Java	O
with	O
Example	O
Question	O
-	O
8894258	O
In	O
Java	O
,	O
what	O
would	O
the	O
fastest	O
way	O
to	O
iterate	O
over	O
all	O
the	O
chars	O
in	O
a	O
String	B-api_mention
,	O
this	O
:	O
#	O
pre	O
Or	O
this	O
:	O
#	O
pre	O
EDIT	O
:	O
What	O
I	O
'	O
d	O
like	O
to	O
know	O
is	O
if	O
the	O
cost	O
of	O
repeatedly	O
calling	O
the	O
charAt	B-api_mention
method	O
during	O
a	O
long	O
iteration	O
ends	O
up	O
being	O
either	O
less	O
than	O
or	O
greater	O
than	O
the	O
cost	O
of	O
performing	O
a	O
single	O
call	O
to	O
toCharArray	B-api_mention
at	O
the	O
beginning	O
and	O
then	O
directly	O
accessing	O
the	O
array	O
during	O
the	O
iteration	O
.	O
It	O
'	O
d	O
be	O
great	O
if	O
someone	O
could	O
provide	O
a	O
robust	O
benchmark	O
for	O
different	O
string	O
lengths	O
,	O
having	O
in	O
mind	O
JIT	O
warm	O
-	O
up	O
time	O
,	O
JVM	O
start	O
-	O
up	O
time	O
,	O
etc	O
.	O
and	O
not	O
just	O
the	O
difference	O
between	O
two	O
calls	O
to	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
20130131	O
There	O
are	O
already	O
people	O
asked	O
the	O
same	O
on	O
the	O
mailing	O
list	O
โบ	O
.	O
The	O
main	O
reason	O
is	O
Iterable	B-api_mention
also	O
has	O
a	O
re	O
-	O
iterable	O
semantic	O
,	O
while	O
Stream	B-api_mention
is	O
not	O
.	O
#	O
blockquote	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
12665271	O
Here	O
'	O
s	O
my	O
take	O
on	O
the	O
alternatives	O
:	O
1	O
)	O
#	O
pre	O
For	O
me	O
,	O
the	O
best	O
thing	O
coming	O
to	O
Java	O
from	O
traditional	O
C	O
+	O
+	O
15	O
years	O
ago	O
was	O
that	O
you	O
could	O
trust	O
your	O
program	O
.	O
Even	O
if	O
things	O
are	O
in	O
the	O
muck	O
and	O
going	O
wrong	O
,	O
which	O
they	O
often	O
do	O
,	O
I	O
want	O
the	O
rest	O
of	O
the	O
code	O
to	O
be	O
on	O
best	O
behaviour	O
and	O
smelling	O
of	O
roses	O
.	O
Indeed	O
,	O
the	O
BufferedWriter	B-api_mention
might	O
throw	O
an	O
exception	O
here	O
.	O
Running	O
out	O
of	O
memory	O
wouldn	O
'	O
t	O
be	O
unusual	O
,	O
for	O
instance	O
.	O
For	O
other	O
decorators	O
,	O
do	O
you	O
know	O
which	O
of	O
the	O
java	B-api_mention
.	I-api_mention
io	I-api_mention
wrapper	O
classes	O
throw	O
a	O
checked	O
exception	O
from	O
their	O
constructors	O
?	O
I	O
don	O
'	O
t	O
.	O
Doesn	O
'	O
t	O
do	O
code	O
understandability	O
much	O
good	O
if	O
you	O
rely	O
upon	O
that	O
sort	O
of	O
obscure	O
knowledge	O
.	O
Also	O
there	O
'	O
s	O
the	O
"	O
destruction	O
"	O
.	O
If	O
there	O
is	O
an	O
error	O
condition	O
,	O
then	O
you	O
probably	O
don	O
'	O
t	O
want	O
to	O
be	O
flushing	O
rubbish	O
to	O
a	O
file	O
that	O
needs	O
deleting	O
(	O
code	O
for	O
that	O
not	O
shown	O
)	O
.	O
Although	O
,	O
of	O
course	O
,	O
deleting	O
the	O
file	O
is	O
also	O
another	O
interesting	O
operation	O
to	O
do	O
as	O
error	O
handling	O
.	O
Generally	O
you	O
want	O
finally	O
blocks	O
to	O
be	O
as	O
short	O
and	O
reliable	O
as	O
possible	O
.	O
Adding	O
flushes	O
does	O
not	O
help	O
this	O
goal	O
.	O
For	O
many	O
releases	O
some	O
of	O
the	O
buffering	O
classes	O
in	O
the	O
JDK	O
had	O
a	O
bug	O
where	O
an	O
exception	O
from	O
flush	B-api_mention
within	O
close	B-api_mention
caused	O
close	B-api_mention
on	O
the	O
decorated	O
object	O
not	O
be	O
called	O
.	O
Whilst	O
that	O
has	O
been	O
fixed	O
for	O
some	O
time	O
,	O
expect	O
it	O
from	O
other	O
implementations	O
.	O
2	O
)	O
#	O
pre	O
We	O
'	O
re	O
still	O
flushing	O
in	O
the	O
implicit	O
finally	O
block	O
(	O
now	O
with	O
repeated	O
close	B-api_mention
-	O
this	O
gets	O
worse	O
as	O
you	O
add	O
more	O
decorators	O
)	O
,	O
but	O
the	O
construction	O
is	O
safe	O
and	O
we	O
have	O
to	O
implicit	O
finally	O
blocks	O
so	O
even	O
a	O
failed	O
flush	B-api_mention
doesn	O
'	O
t	O
prevent	O
resource	O
release	O
.	O
3	O
)	O
#	O
pre	O
There	O
'	O
s	O
a	O
bug	O
here	O
.	O
Should	O
be	O
:	O
#	O
pre	O
Some	O
poorly	O
implemented	O
decorators	O
are	O
in	O
fact	O
resource	O
and	O
will	O
need	O
to	O
be	O
closed	O
reliably	O
.	O
Also	O
some	O
streams	O
may	O
need	O
to	O
be	O
closed	O
in	O
a	O
particular	O
way	O
(	O
perhaps	O
they	O
are	O
doing	O
compression	O
and	O
need	O
to	O
write	O
bits	O
to	O
finish	O
off	O
,	O
and	O
can	O
'	O
t	O
just	O
flush	O
everything	O
.	O
Verdict	O
Although	O
3	O
is	O
a	O
technically	O
superior	O
solution	O
,	O
software	O
development	O
reasons	O
make	O
2	O
the	O
better	O
choice	O
.	O
However	O
,	O
try	O
-	O
with	O
-	O
resource	O
is	O
still	O
an	O
inadequate	O
fix	O
and	O
you	O
should	O
stick	O
with	O
the	O
Execute	O
Around	O
idiom	O
,	O
which	O
should	O
have	O
a	O
clearer	O
syntax	O
with	O
closures	O
in	O
Java	O
SE	O
8	O
.	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17836189	O
I	O
think	O
the	O
others	O
have	O
done	O
a	O
good	O
job	O
at	O
explaining	O
why	O
cnt	O
>	O
0	O
,	O
but	O
there	O
'	O
s	O
not	O
enough	O
details	O
regarding	O
why	O
cnt	O
=	O
4	O
,	O
and	O
why	O
cnt	O
varies	O
so	O
widely	O
among	O
different	O
settings	O
.	O
I	O
will	O
attempt	O
to	O
fill	O
that	O
void	O
here	O
.	O
Let	O
#	O
li	O
X	O
be	O
the	O
total	O
stack	O
size	O
#	O
li	O
M	O
be	O
the	O
stack	O
space	O
used	O
when	O
we	O
enter	O
main	O
the	O
first	O
time	O
#	O
li	O
R	O
be	O
the	O
stack	O
space	O
increase	O
each	O
time	O
we	O
enter	O
into	O
main	O
#	O
li	O
P	O
be	O
the	O
stack	O
space	O
necessary	O
to	O
run	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
When	O
we	O
first	O
get	O
into	O
main	O
,	O
the	O
space	O
left	O
over	O
is	O
X	O
-	O
M	O
.	O
Each	O
recursive	O
call	O
takes	O
up	O
R	O
more	O
memory	O
.	O
So	O
for	O
1	O
recursive	O
call	O
(	O
1	O
more	O
than	O
original	O
)	O
,	O
the	O
memory	O
use	O
is	O
M	O
+	O
R	O
.	O
Suppose	O
that	O
StackOverflowError	B-api_mention
is	O
thrown	O
after	O
C	O
successful	O
recursive	O
calls	O
,	O
that	O
is	O
,	O
M	O
+	O
C	O
*	O
R	O
<	O
=	O
X	O
and	O
M	O
+	O
C	O
*	O
(	O
R	O
+	O
1	O
)	O
>	O
X	O
.	O
At	O
the	O
time	O
of	O
the	O
first	O
StackOverflowError	B-api_mention
,	O
there	O
'	O
s	O
X	O
-	O
M	O
-	O
C	O
*	O
R	O
memory	O
left	O
.	O
To	O
be	O
able	O
to	O
run	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
prinln	I-api_mention
,	O
we	O
need	O
P	O
amount	O
of	O
space	O
left	O
on	O
the	O
stack	O
.	O
If	O
it	O
so	O
happens	O
that	O
X	O
-	O
M	O
-	O
C	O
*	O
R	O
>	O
=	O
P	O
,	O
then	O
0	O
will	O
be	O
printed	O
.	O
If	O
P	O
requires	O
more	O
space	O
,	O
then	O
we	O
remove	O
frames	O
from	O
the	O
stack	O
,	O
gaining	O
R	O
memory	O
at	O
the	O
cost	O
of	O
cnt	O
+	O
+	O
.	O
When	O
println	B-api_mention
is	O
finally	O
able	O
to	O
run	O
,	O
X	O
-	O
M	O
-	O
(	O
C	O
-	O
cnt	O
)	O
*	O
R	O
>	O
=	O
P	O
.	O
So	O
if	O
P	O
is	O
large	O
for	O
a	O
particular	O
system	O
,	O
then	O
cnt	O
will	O
be	O
large	O
.	O
Let	O
'	O
s	O
look	O
at	O
this	O
with	O
some	O
examples	O
.	O
Example	O
1	O
:	O
Suppose	O
#	O
li	O
X	O
=	O
100	O
#	O
li	O
M	O
=	O
1	O
#	O
li	O
R	O
=	O
2	O
#	O
li	O
P	O
=	O
1	O
Then	O
C	O
=	O
floor	O
(	O
(	O
X	O
-	O
M	O
)	O
/	O
R	O
)	O
=	O
49	O
,	O
and	O
cnt	O
=	O
ceiling	O
(	O
(	O
P	O
-	O
(	O
X	O
-	O
M	O
-	O
C	O
*	O
R	O
)	O
)	O
/	O
R	O
)	O
=	O
0	O
.	O
Example	O
2	O
:	O
Suppose	O
that	O
#	O
li	O
X	O
=	O
100	O
#	O
li	O
M	O
=	O
1	O
#	O
li	O
R	O
=	O
5	O
#	O
li	O
P	O
=	O
12	O
Then	O
C	O
=	O
19	O
,	O
and	O
cnt	O
=	O
2	O
.	O
Example	O
3	O
:	O
Suppose	O
that	O
#	O
li	O
X	O
=	O
101	O
#	O
li	O
M	O
=	O
1	O
#	O
li	O
R	O
=	O
5	O
#	O
li	O
P	O
=	O
12	O
Then	O
C	O
=	O
20	O
,	O
and	O
cnt	O
=	O
3	O
.	O
Example	O
4	O
:	O
Suppose	O
that	O
#	O
li	O
X	O
=	O
101	O
#	O
li	O
M	O
=	O
2	O
#	O
li	O
R	O
=	O
5	O
#	O
li	O
P	O
=	O
12	O
Then	O
C	O
=	O
19	O
,	O
and	O
cnt	O
=	O
2	O
.	O
Thus	O
,	O
we	O
see	O
that	O
both	O
the	O
system	O
(	O
M	O
,	O
R	O
,	O
and	O
P	O
)	O
and	O
the	O
stack	O
size	O
(	O
X	O
)	O
affects	O
cnt	O
.	O
As	O
a	O
side	O
note	O
,	O
it	O
does	O
not	O
matter	O
how	O
much	O
space	O
catch	O
requires	O
to	O
start	O
.	O
As	O
long	O
as	O
there	O
is	O
not	O
enough	O
space	O
for	O
catch	O
,	O
then	O
cnt	O
will	O
not	O
increase	O
,	O
so	O
there	O
are	O
no	O
external	O
effects	O
.	O
EDIT	O
I	O
take	O
back	O
what	O
I	O
said	O
about	O
catch	O
.	O
It	O
does	O
play	O
a	O
role	O
.	O
Suppose	O
it	O
requires	O
T	O
amount	O
of	O
space	O
to	O
start	O
.	O
cnt	O
starts	O
to	O
increment	O
when	O
the	O
leftover	O
space	O
is	O
greater	O
than	O
T	O
,	O
and	O
println	B-api_mention
runs	O
when	O
the	O
leftover	O
space	O
is	O
greater	O
than	O
T	O
+	O
P	O
.	O
This	O
adds	O
an	O
extra	O
step	O
to	O
the	O
calculations	O
and	O
further	O
muddies	O
up	O
the	O
already	O
muddy	O
analysis	O
.	O
EDIT	O
I	O
finally	O
found	O
time	O
to	O
run	O
some	O
experiments	O
to	O
back	O
up	O
my	O
theory	O
.	O
Unfortunately	O
,	O
the	O
theory	O
doesn	O
'	O
t	O
seem	O
to	O
match	O
up	O
with	O
the	O
experiments	O
.	O
What	O
actually	O
happens	O
is	O
very	O
different	O
.	O
Experiment	O
setup	O
:	O
Ubuntu	O
12	O
.	O
04	O
server	O
with	O
default	O
java	O
and	O
default	O
-	O
jdk	O
.	O
Xss	O
starting	O
at	O
70	O
,	O
000	O
at	O
1	O
byte	O
increments	O
to	O
460	O
,	O
000	O
.	O
The	O
results	O
are	O
available	O
at	O
:	O
#	O
a	O
I	O
'	O
ve	O
created	O
another	O
version	O
where	O
every	O
repeated	O
data	O
point	O
is	O
removed	O
.	O
In	O
other	O
words	O
,	O
only	O
points	O
that	O
are	O
different	O
from	O
the	O
previous	O
are	O
shown	O
.	O
This	O
makes	O
it	O
easier	O
to	O
see	O
anomalies	O
.	O
#	O
a	O
Question	O
-	O
31471444	O
,	O
answer	O
-	O
31476657	O
From	O
Class	O
NumberUtils	O
you	O
'	O
ll	O
see	O
it	O
'	O
s	O
defined	O
as	O
:	O
#	O
pre	O
So	O
,	O
you	O
'	O
ll	O
see	O
that	O
INTEGER	O
_	O
ONE	O
is	O
not	O
the	O
same	O
as	O
1	O
.	O
It	O
'	O
s	O
an	O
object	O
that	O
'	O
s	O
already	O
been	O
constructed	O
for	O
you	O
.	O
So	O
,	O
if	O
we	O
'	O
re	O
needing	O
an	O
instance	O
of	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
rather	O
than	O
create	O
your	O
own	O
,	O
you	O
can	O
reuse	O
the	O
one	O
from	O
the	O
library	O
saving	O
time	O
and	O
memory	O
.	O
It	O
really	O
depends	O
on	O
your	O
application	O
,	O
if	O
you	O
indeed	O
what	O
the	O
int	O
version	O
of	O
1	O
,	O
then	O
,	O
you	O
'	O
d	O
probably	O
be	O
better	O
of	O
using	O
that	O
instead	O
of	O
this	O
Integer	B-api_mention
class	O
.	O
Question	O
-	O
18263489	O
,	O
answer	O
-	O
29873100	O
It	O
isn	O
'	O
t	O
pretty	O
,	O
but	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
allows	O
you	O
to	O
use	O
a	O
null	O
String	B-api_mention
in	O
a	O
switch	O
.	O
If	O
it	O
finds	O
null	O
,	O
it	O
converts	O
it	O
to	O
StringLiteral	O
,	O
otherwise	O
it	O
just	O
returns	O
the	O
same	O
String	B-api_mention
you	O
passed	O
it	O
.	O
If	O
you	O
don	O
'	O
t	O
handle	O
StringLiteral	O
explicitly	O
,	O
then	O
it	O
will	O
go	O
to	O
default	O
.	O
The	O
only	O
caveat	O
is	O
that	O
there	O
is	O
no	O
way	O
of	O
distinguishing	O
between	O
the	O
String	B-api_mention
StringLiteral	O
and	O
an	O
actual	O
null	O
String	B-api_mention
.	O
#	O
pre	O
Question	O
-	O
32312876	O
,	O
answer	O
-	O
32313069	O
This	O
is	O
possible	O
using	O
the	O
mergeFunction	O
parameter	O
of	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
keyMapper	I-api_mention
,	I-api_mention
valueMapper	I-api_mention
,	I-api_mention
mergeFunction	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
mergeFunction	O
is	O
a	O
function	O
that	O
operates	O
on	O
two	O
values	O
associated	O
with	O
the	O
same	O
key	O
.	O
adress1	O
corresponds	O
to	O
the	O
first	O
address	O
that	O
was	O
encountered	O
when	O
collecting	O
elements	O
and	O
adress2	O
corresponds	O
to	O
the	O
second	O
address	O
encountered	O
:	O
this	O
lambda	O
just	O
tells	O
to	O
keep	O
the	O
first	O
address	O
and	O
ignores	O
the	O
second	O
.	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
5374346	O
What	O
is	O
happening	O
is	O
that	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
creating	O
an	O
Object	B-api_mention
[	O
]	O
rather	O
than	O
a	O
String	B-api_mention
[	O
]	O
and	O
hence	O
the	O
typecast	O
is	O
failing	O
.	O
The	O
correct	O
code	O
would	O
be	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
even	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
more	O
details	O
,	O
refer	O
to	O
the	O
javadocs	O
for	O
the	O
two	O
overloads	O
of	O
List	B-api_mention
.	I-api_mention
toArray	I-api_mention
.	O
(	O
From	O
a	O
technical	O
perspective	O
,	O
the	O
reason	O
for	O
this	O
API	O
behaviour	O
/	O
design	O
is	O
that	O
an	O
implementation	O
of	O
the	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	I-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
no	O
information	O
of	O
what	O
the	O
<	O
T	O
>	O
is	O
at	O
runtime	O
.	O
All	O
it	O
knows	O
is	O
that	O
the	O
raw	O
element	O
type	O
is	O
Object	B-api_mention
.	O
By	O
contrast	O
,	O
in	O
the	O
other	O
case	O
,	O
the	O
array	O
parameter	O
gives	O
the	O
base	O
type	O
of	O
the	O
array	O
.	O
(	O
If	O
the	O
supplied	O
array	O
is	O
big	O
enough	O
,	O
it	O
is	O
used	O
.	O
Otherwise	O
a	O
new	O
array	O
of	O
the	O
same	O
type	O
and	O
a	O
larger	O
size	O
will	O
be	O
allocated	O
and	O
returned	O
as	O
the	O
result	O
.	O
)	O
Question	O
-	O
29183904	O
I	O
used	O
to	O
define	O
a	O
set	O
of	O
related	O
constants	O
like	O
Bundle	O
keys	O
together	O
in	O
an	O
interface	O
like	O
below	O
:	O
#	O
pre	O
This	O
provides	O
me	O
a	O
nicer	O
way	O
to	O
group	O
related	O
constants	O
together	O
and	O
used	O
them	O
by	O
making	O
a	O
static	O
import	O
(	O
not	O
implements	O
)	O
.	O
I	O
know	O
Android	O
framework	O
also	O
uses	O
the	O
constants	O
in	O
same	O
way	O
like	O
Toast	O
.	O
LENTH	O
_	O
LONG	O
,	O
View	O
.	O
GONE	O
.	O
However	O
,	O
I	O
often	O
feel	O
that	O
the	O
Java	O
Enums	O
provide	O
much	O
better	O
and	O
powerful	O
way	O
to	O
represent	O
the	O
constant	O
.	O
But	O
is	O
there	O
a	O
performence	O
issue	O
in	O
using	O
enums	O
on	O
Android	O
?	O
With	O
a	O
bit	O
of	O
research	O
I	O
ended	O
up	O
in	O
confusion	O
.	O
From	O
this	O
question	O
"	O
Avoid	O
Enums	O
Where	O
You	O
Only	O
Need	O
Ints	O
โ	O
removed	O
from	O
Android	O
'	O
s	O
performance	O
tips	O
?	O
it	O
'	O
s	O
clear	O
that	O
Google	O
has	O
removed	O
"	O
Avoid	O
enums	O
"	O
from	O
its	O
performance	O
tips	O
,	O
but	O
from	O
it	O
'	O
s	O
official	O
training	O
docs	O
Be	O
aware	O
of	O
memory	O
overhead	O
section	O
it	O
clearly	O
says	O
:	O
"	O
Enums	O
often	O
require	O
more	O
than	O
twice	O
as	O
much	O
memory	O
as	O
static	O
constants	O
.	O
You	O
should	O
strictly	O
avoid	O
using	O
enums	O
on	O
Android	O
.	O
"	O
Is	O
this	O
still	O
holds	O
good	O
?	O
(	O
say	O
in	O
Java	O
versions	O
after	O
1	O
.	O
6	O
)	O
One	O
more	O
issue	O
that	O
I	O
observed	O
is	O
to	O
send	O
enums	O
across	O
intents	O
using	O
Bundle	O
I	O
should	O
send	O
them	O
by	O
serializing	O
(	O
i	O
.	O
e	O
putSerializable	O
(	O
args	O
)	O
,	O
that	O
I	O
think	O
an	O
expensive	O
operation	O
compared	O
to	O
primitive	O
putString	O
(	O
args	O
)	O
method	O
,	O
eventhough	O
enums	O
provides	O
it	O
for	O
free	O
)	O
.	O
Can	O
someone	O
please	O
clarify	O
which	O
one	O
is	O
the	O
best	O
way	O
to	O
represent	O
the	O
same	O
in	O
Android	O
?	O
Should	O
I	O
strictly	O
avoid	O
using	O
enums	O
on	O
Android	O
?	O
Question	O
-	O
31471444	O
,	O
answer	O
-	O
31471520	O
org	O
.	O
apache	O
.	O
commons	O
.	O
lang	O
.	O
math	O
.	O
NumberUtils	O
.	O
INTEGER	O
_	O
ONE	O
it	O
gives	O
you	O
a	O
final	O
static	O
Integer	O
object	O
rather	O
than	O
primitive	O
int	O
1	O
,	O
and	O
as	O
it	O
is	O
final	O
static	O
it	O
acts	O
as	O
a	O
constant	O
and	O
can	O
be	O
used	O
in	O
comparison	O
of	O
Integer	B-api_mention
objects	O
because	O
will	O
always	O
return	O
same	O
instance	O
.	O
So	O
in	O
the	O
above	O
scenario	O
it	O
might	O
not	O
look	O
fit	O
but	O
somewhere	O
if	O
you	O
are	O
using	O
it	O
while	O
comparison	O
,	O
it	O
for	O
sure	O
has	O
impact	O
.	O
Moreover	O
,	O
as	O
much	O
as	O
we	O
can	O
,	O
should	O
prefer	O
the	O
use	O
of	O
constants	O
over	O
hardcoded	O
beacuse	O
:	O
#	O
li	O
It	O
can	O
make	O
your	O
code	O
easily	O
maintainable	O
.	O
If	O
any	O
situation	O
occurs	O
in	O
future	O
for	O
change	O
,	O
you	O
can	O
change	O
only	O
at	O
a	O
single	O
place	O
.	O
#	O
li	O
The	O
code	O
looks	O
cleaner	O
&	O
more	O
readable	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
29784337	O
The	O
other	O
answers	O
all	O
use	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
an	O
unmodifiable	O
list	O
(	O
an	O
UnsupportedOperationException	B-api_mention
is	O
thrown	O
if	O
you	O
try	O
to	O
add	O
or	O
remove	O
an	O
element	O
)	O
.	O
To	O
get	O
a	O
mutable	O
list	O
you	O
can	O
wrap	O
the	O
returned	O
list	O
in	O
a	O
new	O
ArrayList	B-api_mention
as	O
a	O
couple	O
of	O
answers	O
point	O
out	O
,	O
but	O
a	O
cleaner	O
solution	O
is	O
to	O
use	O
Guava	O
'	O
s	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
available	O
since	O
at	O
least	O
Guava	O
10	O
,	O
released	O
in	O
2011	O
)	O
.	O
For	O
example	O
:	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275508	O
Just	O
use	O
TheClassName	O
.	O
class	O
instead	O
of	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
31202946	O
,	O
answer	O
-	O
31203218	O
You	O
can	O
of	O
course	O
choose	O
to	O
shoot	O
yourself	O
in	O
the	O
foot	O
,	O
but	O
that	O
doesn	O
'	O
t	O
mean	O
you	O
must	O
.	O
#	O
blockquote	O
Because	O
the	O
recommended	O
way	O
to	O
create	O
a	O
start	O
a	O
thread	O
is	O
not	O
to	O
subclass	O
Thread	B-api_mention
.	O
The	O
recommended	O
way	O
is	O
to	O
define	O
a	O
Runnable	B-api_mention
,	O
and	O
pass	O
it	O
as	O
argument	O
to	O
the	O
Thread	B-api_mention
constructor	O
:	O
#	O
pre	O
#	O
blockquote	O
Yes	O
and	O
no	O
.	O
You	O
can	O
'	O
t	O
replace	O
the	O
implementation	O
of	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
by	O
your	O
own	O
implementation	O
,	O
but	O
you	O
can	O
do	O
additional	O
things	O
in	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
if	O
you	O
want	O
:	O
#	O
pre	O
That	O
said	O
,	O
if	O
Java	O
was	O
redesigned	O
from	O
scratch	O
today	O
,	O
there	O
is	O
a	O
good	O
chance	O
the	O
design	O
would	O
be	O
different	O
.	O
Remember	O
that	O
this	O
class	O
dates	O
from	O
Java	O
1	O
.	O
0	O
,	O
and	O
is	O
still	O
backward	O
-	O
compatible	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15430259	O
If	O
you	O
know	O
in	O
advance	O
what	O
the	O
size	O
of	O
the	O
ArrayList	B-api_mention
is	O
going	O
to	O
be	O
,	O
it	O
is	O
more	O
efficient	O
to	O
specify	O
the	O
initial	O
capacity	O
.	O
If	O
you	O
don	O
'	O
t	O
do	O
this	O
,	O
the	O
internal	O
array	O
will	O
have	O
to	O
be	O
repeatedly	O
reallocated	O
as	O
the	O
list	O
grows	O
.	O
The	O
larger	O
the	O
final	O
list	O
,	O
the	O
more	O
time	O
you	O
save	O
by	O
avoiding	O
the	O
reallocations	O
.	O
That	O
said	O
,	O
even	O
without	O
pre	O
-	O
allocation	O
,	O
inserting	O
n	O
elements	O
at	O
the	O
back	O
of	O
an	O
ArrayList	B-api_mention
is	O
guaranteed	O
to	O
take	O
total	O
O	O
(	O
args	O
)	O
time	O
.	O
In	O
other	O
words	O
,	O
appending	O
an	O
element	O
is	O
an	O
amortized	O
constant	O
-	O
time	O
operation	O
.	O
This	O
is	O
achieved	O
by	O
having	O
each	O
reallocation	O
increase	O
the	O
size	O
of	O
the	O
array	O
exponentially	O
,	O
typically	O
by	O
a	O
factor	O
of	O
1	O
.	O
5	O
.	O
With	O
this	O
approach	O
,	O
the	O
total	O
number	O
of	O
operations	O
can	O
be	O
shown	O
to	O
be	O
O	O
(	O
n	O
)	O
.	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561687	O
This	O
works	O
because	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
min	I-api_mention
resolves	O
to	O
an	O
implementation	O
of	O
the	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
.	O
The	O
method	O
reference	O
of	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
min	I-api_mention
resolves	O
to	O
Integer	B-api_mention
.	I-api_mention
min	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
resolved	O
to	O
IntBinaryOperator	B-api_mention
,	O
and	O
presumably	O
autoboxing	O
occurs	O
somewhere	O
making	O
it	O
a	O
BinaryOperator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
And	O
the	O
min	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
resp	O
max	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
of	O
the	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ask	O
the	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
to	O
be	O
implemented	O
.	O
Now	O
this	O
resolves	O
to	O
the	O
single	O
method	O
Integer	B-api_mention
compareTo	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Which	O
is	O
of	O
type	O
BinaryOperator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
And	O
thus	O
the	O
magic	O
has	O
happened	O
as	O
both	O
methods	O
are	O
a	O
BinaryOperator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32820940	O
An	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
function	O
int	O
-	O
>	O
R	O
.	O
An	O
IntUnaryOperator	O
is	O
a	O
function	O
int	O
-	O
>	O
int	O
.	O
Thus	O
an	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
function	O
that	O
takes	O
an	O
int	O
as	O
parameter	O
and	O
return	O
a	O
function	O
that	O
takes	O
an	O
int	O
as	O
parameter	O
and	O
return	O
an	O
int	O
.	O
#	O
pre	O
Maybe	O
it	O
is	O
more	O
clear	O
if	O
you	O
use	O
anonymous	O
classes	O
to	O
"	O
decompose	O
"	O
the	O
lambda	O
:	O
#	O
pre	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32745612	O
For	O
me	O
,	O
the	O
reason	O
is	O
a	O
likely	O
performance	O
inprovement	O
,	O
at	O
a	O
negligible	O
cost	O
in	O
terms	O
of	O
code	O
clarity	O
.	O
Note	O
that	O
the	O
implementation	O
of	O
the	O
fill	O
method	O
is	O
trivial	O
,	O
a	O
simple	O
for	O
-	O
loop	O
setting	O
each	O
array	O
element	O
to	O
null	O
.	O
So	O
,	O
replacing	O
a	O
call	O
to	O
it	O
with	O
the	O
actual	O
implementation	O
does	O
not	O
cause	O
any	O
significant	O
degradation	O
in	O
the	O
clarity	O
/	O
conciseness	O
of	O
the	O
caller	O
method	O
.	O
The	O
potential	O
performance	O
benefits	O
are	O
not	O
so	O
insignificant	O
,	O
if	O
you	O
consider	O
everything	O
that	O
is	O
involved	O
:	O
#	O
li	O
There	O
will	O
be	O
no	O
need	O
for	O
the	O
JVM	O
to	O
resolve	O
the	O
Arrays	B-api_mention
class	O
,	O
plus	O
loading	O
and	O
initializing	O
it	O
if	O
needed	O
.	O
This	O
is	O
a	O
non	O
-	O
trivial	O
process	O
where	O
the	O
JVM	O
performs	O
several	O
steps	O
.	O
Firstly	O
,	O
it	O
checks	O
the	O
class	O
loader	O
to	O
see	O
if	O
the	O
class	O
is	O
already	O
loaded	O
,	O
and	O
this	O
happens	O
every	O
time	O
a	O
method	O
is	O
called	O
;	O
there	O
are	O
optimizations	O
involved	O
here	O
,	O
of	O
course	O
,	O
but	O
it	O
still	O
takes	O
some	O
effort	O
.	O
If	O
the	O
class	O
is	O
not	O
loaded	O
,	O
the	O
JVM	O
will	O
need	O
to	O
go	O
through	O
the	O
expensive	O
process	O
of	O
loading	O
it	O
,	O
verifying	O
the	O
bytecode	O
,	O
resolving	O
other	O
necessary	O
dependencies	O
,	O
and	O
finally	O
performing	O
static	O
initialization	O
of	O
the	O
class	O
(	O
which	O
can	O
be	O
arbitrarily	O
expensive	O
)	O
.	O
Given	O
that	O
HashMap	B-api_mention
is	O
such	O
a	O
core	O
class	O
,	O
and	O
that	O
Arrays	B-api_mention
is	O
such	O
a	O
huge	O
class	O
(	O
3600	O
+	O
lines	O
)	O
,	O
avoiding	O
these	O
costs	O
may	O
add	O
up	O
to	O
noticeable	O
savings	O
.	O
#	O
li	O
Since	O
there	O
is	O
no	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
call	O
,	O
the	O
JVM	O
won	O
'	O
t	O
have	O
to	O
decide	O
whether	O
/	O
when	O
to	O
inline	O
the	O
method	O
into	O
the	O
caller	O
'	O
s	O
body	O
.	O
Since	O
HashMap	B-api_mention
#	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
tends	O
to	O
get	O
called	O
a	O
lot	O
,	O
the	O
JVM	O
will	O
eventually	O
perform	O
the	O
inlining	O
,	O
which	O
requires	O
JIT	O
recompilation	O
of	O
the	O
clear	O
method	O
.	O
With	O
no	O
method	O
calls	O
,	O
clear	O
will	O
always	O
run	O
at	O
top	O
-	O
speed	O
(	O
once	O
initially	O
JITed	O
)	O
.	O
Another	O
benefit	O
of	O
no	O
longer	O
calling	O
methods	O
in	O
Arrays	B-api_mention
is	O
that	O
it	O
simplifies	O
the	O
dependency	O
graph	O
inside	O
the	O
java	O
.	O
util	O
package	O
,	O
since	O
one	O
dependency	O
is	O
removed	O
.	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31188818	O
Ironically	O
default	O
methods	O
in	O
interfaces	O
were	O
introduced	O
to	O
allow	O
existing	O
libraries	O
using	O
those	O
interfaces	O
not	O
to	O
break	O
,	O
while	O
introducing	O
massive	O
new	O
functionality	O
in	O
the	O
interfaces	O
.	O
(	O
backward	O
compatibility	O
.	O
)	O
Conflicts	O
like	O
that	O
sort	O
method	O
might	O
arise	O
.	O
Something	O
to	O
pay	O
for	O
the	O
extra	O
functionality	O
.	O
In	O
your	O
case	O
also	O
something	O
to	O
investigate	O
(	O
should	O
new	O
functionality	O
be	O
used	O
instead	O
?	O
)	O
.	O
Java	O
forward	O
compatibility	O
breaks	O
are	O
little	O
,	O
more	O
in	O
its	O
typing	O
system	O
,	O
which	O
was	O
constantly	O
enlarged	O
.	O
First	O
with	O
generic	O
types	O
and	O
now	O
with	O
inferred	O
types	O
from	O
functional	O
interfaces	O
.	O
From	O
version	O
to	O
version	O
and	O
from	O
compiler	O
to	O
compiler	O
there	O
were	O
slight	O
differences	O
.	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
10827945	O
The	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
overloaded	O
to	O
accept	O
both	O
a	O
primitive	O
char	O
and	O
a	O
CharSequence	O
as	O
arguments	O
.	O
Now	O
as	O
far	O
as	O
the	O
performance	O
is	O
concerned	O
,	O
the	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
a	O
bit	O
faster	O
than	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
the	O
later	O
first	O
compiles	O
the	O
regex	O
pattern	O
and	O
then	O
matches	O
before	O
finally	O
replacing	O
whereas	O
the	O
former	O
simply	O
matches	O
for	O
the	O
provided	O
argument	O
and	O
replaces	O
.	O
Since	O
we	O
know	O
the	O
regex	O
pattern	O
matching	O
is	O
a	O
bit	O
more	O
complex	O
and	O
consequently	O
slower	O
,	O
then	O
preferring	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
over	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
suggested	O
whenever	O
possible	O
.	O
For	O
example	O
,	O
for	O
simple	O
substitutions	O
like	O
you	O
mentioned	O
,	O
it	O
is	O
better	O
to	O
use	O
:	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
of	O
:	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
:	O
the	O
above	O
conversion	O
method	O
arguments	O
are	O
system	O
-	O
dependent	O
.	O
Question	O
-	O
25903137	O
,	O
answer	O
-	O
25905196	O
Here	O
are	O
some	O
variations	O
on	O
Sotirios	O
Delimanolis	O
'	O
answer	O
,	O
which	O
was	O
pretty	O
good	O
to	O
begin	O
with	O
(	O
+	O
1	O
)	O
.	O
Consider	O
the	O
following	O
:	O
#	O
pre	O
A	O
couple	O
points	O
here	O
.	O
First	O
is	O
the	O
use	O
of	O
wildcards	O
in	O
the	O
generics	O
;	O
this	O
makes	O
the	O
function	O
somewhat	O
more	O
flexible	O
.	O
A	O
wildcard	O
would	O
be	O
necessary	O
if	O
,	O
for	O
example	O
,	O
you	O
wanted	O
the	O
output	O
map	O
to	O
have	O
a	O
key	O
that	O
'	O
s	O
a	O
superclass	O
of	O
the	O
input	O
map	O
'	O
s	O
key	O
:	O
#	O
pre	O
(	O
There	O
is	O
also	O
an	O
example	O
for	O
the	O
map	O
'	O
s	O
values	O
,	O
but	O
it	O
'	O
s	O
really	O
contrived	O
,	O
and	O
I	O
admit	O
that	O
having	O
the	O
bounded	O
wildcard	O
for	O
Y	O
only	O
helps	O
in	O
edge	O
cases	O
.	O
)	O
A	O
second	O
point	O
is	O
that	O
instead	O
of	O
running	O
the	O
stream	O
over	O
the	O
input	O
map	O
'	O
s	O
entrySet	B-api_mention
,	O
I	O
ran	O
it	O
over	O
the	O
keySet	B-api_mention
.	O
This	O
makes	O
the	O
code	O
a	O
little	O
cleaner	O
,	O
I	O
think	O
,	O
at	O
the	O
cost	O
of	O
having	O
to	O
fetch	O
values	O
out	O
of	O
the	O
map	O
instead	O
of	O
from	O
the	O
map	O
entry	O
.	O
Incidentally	O
,	O
I	O
initially	O
had	O
key	O
-	O
>	O
key	O
as	O
the	O
first	O
argument	O
to	O
toMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
this	O
failed	O
with	O
a	O
type	O
inference	O
error	O
for	O
some	O
reason	O
.	O
Changing	O
it	O
to	O
(	O
X	O
key	O
)	O
-	O
>	O
key	O
worked	O
,	O
as	O
did	O
Function	B-api_mention
.	I-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Still	O
another	O
variation	O
is	O
as	O
follows	O
:	O
#	O
pre	O
This	O
uses	O
Map	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
streams	O
.	O
This	O
is	O
even	O
simpler	O
,	O
I	O
think	O
,	O
because	O
it	O
dispenses	O
with	O
the	O
collectors	O
,	O
which	O
are	O
somewhat	O
clumsy	O
to	O
use	O
with	O
maps	O
.	O
The	O
reason	O
is	O
that	O
Map	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
the	O
key	O
and	O
value	O
as	O
separate	O
parameters	O
,	O
whereas	O
the	O
stream	O
has	O
only	O
one	O
value	O
-	O
-	O
and	O
you	O
have	O
to	O
choose	O
whether	O
to	O
use	O
the	O
key	O
or	O
the	O
map	O
entry	O
as	O
that	O
value	O
.	O
On	O
the	O
minus	O
side	O
,	O
this	O
lacks	O
the	O
rich	O
,	O
streamy	O
goodness	O
of	O
the	O
other	O
approaches	O
.	O
:	O
-	O
)	O
Question	O
-	O
13950338	O
,	O
answer	O
-	O
17066803	O
Grant	O
Vibration	O
Permission	O
Before	O
you	O
start	O
implementing	O
any	O
vibration	O
code	O
,	O
you	O
have	O
to	O
give	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
:	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
Make	O
sure	O
to	O
include	O
this	O
line	O
in	O
your	O
AndroidManifest	O
.	O
xml	O
file	O
.	O
Import	O
the	O
Vibration	O
Library	O
Most	O
IDEs	O
will	O
do	O
this	O
for	O
you	O
,	O
but	O
here	O
is	O
the	O
import	O
statement	O
if	O
yours	O
doesn	O
'	O
t	O
:	O
import	B-api_mention
android	I-api_mention
.	I-api_mention
os	I-api_mention
.	I-api_mention
Vibrator	I-api_mention
;	O
Make	O
sure	O
this	O
in	O
the	O
activity	O
where	O
you	O
want	O
the	O
vibration	O
to	O
occur	O
.	O
How	O
to	O
Vibrate	B-api_mention
for	O
a	O
Given	O
Time	O
In	O
most	O
circumstances	O
,	O
you	O
'	O
ll	O
be	O
wanting	O
to	O
vibrate	O
the	O
device	O
for	O
a	O
short	O
,	O
predetermined	O
amount	O
of	O
time	O
.	O
You	O
can	O
achieve	O
this	O
by	O
using	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
is	O
a	O
quick	O
example	O
:	O
#	O
pre	O
That	O
'	O
s	O
it	O
,	O
simple	O
!	O
How	O
to	O
Vibrate	O
Indefinitely	O
It	O
may	O
be	O
the	O
case	O
that	O
you	O
want	O
the	O
device	O
to	O
continue	O
vibrating	O
indefinitely	O
.	O
For	O
this	O
,	O
we	O
use	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
When	O
you	O
'	O
re	O
ready	O
to	O
stop	O
the	O
vibration	O
,	O
just	O
call	O
the	O
cancel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
v	O
.	O
cancel	O
(	O
args	O
)	O
;	O
How	O
to	O
use	O
Vibration	O
Patterns	O
If	O
you	O
want	O
a	O
more	O
bespoke	O
vibration	O
,	O
you	O
can	O
attempt	O
to	O
create	O
your	O
own	O
vibration	O
patterns	O
:	O
#	O
pre	O
More	O
Complex	O
Vibrations	O
There	O
are	O
multiple	O
SDKs	O
that	O
offer	O
a	O
more	O
comprehensive	O
range	O
of	O
haptic	O
feedback	O
.	O
One	O
that	O
I	O
use	O
for	O
special	O
effects	O
is	O
Immersion	O
'	O
s	O
Haptic	O
Development	O
Platform	O
for	O
Android	O
.	O
Troubleshooting	O
If	O
your	O
device	O
won	O
'	O
t	O
vibrate	O
,	O
first	O
make	O
sure	O
that	O
it	O
can	O
vibrate	O
:	O
#	O
pre	O
Secondly	O
,	O
please	O
ensure	O
that	O
you	O
'	O
ve	O
given	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
!	O
Refer	O
back	O
to	O
the	O
first	O
point	O
.	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
13291108	O
Use	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
you	O
want	O
to	O
make	O
a	O
comparison	O
or	O
use	O
the	O
hardcoded	O
value	O
for	O
some	O
internal	O
use	O
in	O
your	O
code	O
.	O
Use	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
you	O
want	O
to	O
present	O
information	O
to	O
a	O
user	O
(	O
including	O
a	O
developper	O
looking	O
at	O
a	O
log	O
)	O
.	O
Never	O
rely	O
in	O
your	O
code	O
on	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
giving	O
a	O
specific	O
value	O
.	O
Never	O
test	O
it	O
against	O
a	O
specific	O
string	O
.	O
If	O
your	O
code	O
breaks	O
when	O
someone	O
correctly	O
changes	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
return	O
,	O
then	O
it	O
was	O
already	O
broken	O
.	O
From	O
the	O
javadoc	O
(	O
emphasis	O
mine	O
)	O
:	O
#	O
blockquote	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
31931870	O
Collections	B-api_mention
.	I-api_mention
singletonList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
26318569	O
,	O
answer	O
-	O
26319364	O
You	O
'	O
re	O
nesting	O
mocking	O
inside	O
of	O
mocking	O
.	O
You	O
'	O
re	O
calling	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
does	O
some	O
mocking	O
,	O
before	O
you	O
'	O
ve	O
finished	O
the	O
mocking	O
for	O
MyMainModel	B-api_mention
.	O
Mockito	O
doesn	O
'	O
t	O
like	O
it	O
when	O
you	O
do	O
this	O
.	O
Replace	O
#	O
pre	O
with	O
#	O
pre	O
To	O
understand	O
why	O
this	O
causes	O
a	O
problem	O
,	O
you	O
need	O
to	O
know	O
a	O
little	O
about	O
how	O
Mockito	B-api_mention
works	O
,	O
and	O
also	O
be	O
aware	O
in	O
what	O
order	O
expressions	O
and	O
statements	O
are	O
evaluated	O
in	O
Java	O
.	O
Mockito	B-api_mention
can	O
'	O
t	O
read	O
your	O
source	O
code	O
,	O
so	O
in	O
order	O
to	O
figure	O
out	O
what	O
you	O
are	O
asking	O
it	O
to	O
do	O
,	O
it	O
relies	O
a	O
lot	O
on	O
static	O
state	O
.	O
When	O
you	O
call	O
a	O
method	O
on	O
a	O
mock	B-api_mention
object	O
,	O
Mockito	B-api_mention
records	O
the	O
details	O
of	O
the	O
call	O
in	O
an	O
internal	O
list	O
of	O
invocations	O
.	O
The	O
when	O
method	O
reads	O
the	O
last	O
of	O
these	O
invocations	O
off	O
the	O
list	O
and	O
records	O
this	O
invocation	O
in	O
the	O
OngoingStubbing	B-api_mention
object	O
it	O
returns	O
.	O
The	O
line	O
Mockito	B-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
thenReturn	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
causes	O
the	O
following	O
interactions	O
with	O
Mockito	B-api_mention
:	O
#	O
li	O
Mock	B-api_mention
method	O
mainModel	B-api_mention
.	I-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
#	O
li	O
Static	O
method	O
when	O
is	O
called	O
,	O
#	O
li	O
Method	O
thenReturn	O
is	O
called	O
on	O
the	O
OngoingStubbing	B-api_mention
object	O
returned	O
by	O
the	O
when	O
method	O
.	O
The	O
thenReturn	O
method	O
can	O
then	O
instruct	O
the	O
mock	O
it	O
received	O
via	O
the	O
OngoingStubbing	B-api_mention
method	O
to	O
handle	O
any	O
suitable	O
call	O
to	O
the	O
getList	O
method	O
to	O
return	O
someModelList	O
.	O
In	O
fact	O
,	O
as	O
Mockito	B-api_mention
can	O
'	O
t	O
see	O
your	O
code	O
,	O
you	O
can	O
also	O
write	O
your	O
mocking	O
as	O
follows	O
:	O
#	O
pre	O
This	O
style	O
is	O
somewhat	O
less	O
clear	O
to	O
read	O
,	O
especially	O
since	O
in	O
this	O
case	O
the	O
null	O
has	O
to	O
be	O
casted	O
,	O
but	O
it	O
generates	O
the	O
same	O
sequence	O
of	O
interactions	O
with	O
Mockito	B-api_mention
and	O
will	O
achieve	O
the	O
same	O
result	O
as	O
the	O
line	O
above	O
.	O
However	O
,	O
the	O
line	O
Mockito	B-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
thenReturn	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
causes	O
the	O
following	O
interactions	O
with	O
Mockito	B-api_mention
:	O
#	O
li	O
Mock	B-api_mention
method	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
#	O
li	O
Static	O
method	O
when	O
is	O
called	O
,	O
#	O
li	O
A	O
new	O
mock	O
of	O
SomeModel	O
is	O
created	O
(	O
inside	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
,	O
#	O
li	O
Mock	B-api_mention
method	O
model	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
At	O
this	O
point	O
Mockito	B-api_mention
gets	O
confused	O
.	O
It	O
thought	O
you	O
were	O
mocking	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
now	O
you	O
'	O
re	O
telling	O
it	O
you	O
want	O
to	O
mock	O
the	O
model	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
To	O
Mockito	B-api_mention
,	O
it	O
looks	O
like	O
you	O
'	O
re	O
doing	O
the	O
following	O
:	O
#	O
pre	O
This	O
looks	O
silly	O
to	O
Mockito	B-api_mention
as	O
it	O
can	O
'	O
t	O
be	O
sure	O
what	O
you	O
'	O
re	O
doing	O
with	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Note	O
that	O
we	O
did	O
not	O
get	O
to	O
the	O
thenReturn	O
method	O
call	O
,	O
as	O
the	O
JVM	O
needs	O
to	O
evaluate	O
the	O
parameters	O
to	O
this	O
method	O
before	O
it	O
can	O
call	O
the	O
method	O
.	O
In	O
this	O
case	O
,	O
this	O
means	O
calling	O
the	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Generally	O
it	O
is	O
a	O
bad	O
design	O
decision	O
to	O
rely	O
on	O
static	O
state	O
,	O
as	O
Mockito	B-api_mention
does	O
,	O
because	O
it	O
can	O
lead	O
to	O
cases	O
where	O
the	O
Principle	O
of	O
Least	O
Astonishment	O
is	O
violated	O
.	O
However	O
,	O
Mockito	B-api_mention
'	I-api_mention
s	I-api_mention
design	O
does	O
make	O
for	O
clear	O
and	O
expressive	O
mocking	O
,	O
even	O
if	O
it	O
leads	O
to	O
astonishment	O
sometimes	O
.	O
Finally	O
,	O
recent	O
versions	O
of	O
Mockito	B-api_mention
add	O
an	O
extra	O
line	O
to	O
the	O
error	O
message	O
above	O
.	O
This	O
extra	O
line	O
indicates	O
you	O
may	O
be	O
in	O
the	O
same	O
situation	O
as	O
this	O
question	O
:	O
#	O
blockquote	O
Question	O
-	O
27683759	O
,	O
answer	O
-	O
27684042	O
In	O
a	O
nutshell	O
,	O
this	O
creates	O
an	O
empty	O
,	O
immutable	O
list	O
of	O
strings	O
.	O
Let	O
'	O
s	O
look	O
at	O
the	O
expression	O
bit	O
by	O
bit	O
.	O
Collections	B-api_mention
is	O
the	O
name	O
of	O
a	O
class	O
.	O
From	O
the	O
Javadoc	O
:	O
#	O
blockquote	O
emptyList	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
the	O
name	O
of	O
a	O
static	O
method	O
defined	O
in	O
the	O
Collections	B-api_mention
class	O
(	O
Javadoc	O
)	O
.	O
It	O
is	O
a	O
generic	O
method	O
,	O
and	O
the	O
<	O
String	O
>	O
in	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
specifies	O
the	O
generic	O
type	O
argument	O
.	O
The	O
method	O
returns	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
in	O
this	O
case	O
is	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
:	O
a	O
list	O
of	O
strings	O
.	O
More	O
specifically	O
,	O
it	O
returns	O
an	O
empty	O
,	O
immutable	O
list	O
of	O
strings	O
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28319221	O
Don	O
'	O
t	O
worry	O
about	O
any	O
performance	O
differences	O
,	O
they	O
'	O
re	O
going	O
to	O
be	O
minimal	O
in	O
this	O
case	O
normally	O
.	O
Method	O
2	O
is	O
preferable	O
because	O
#	O
li	O
it	O
doesn	O
'	O
t	O
require	O
mutating	O
a	O
collection	O
that	O
exists	O
outside	O
the	O
lambda	O
expression	O
,	O
#	O
li	O
it	O
'	O
s	O
more	O
readable	O
because	O
the	O
different	O
steps	O
that	O
are	O
performed	O
in	O
the	O
collection	O
pipeline	O
are	O
written	O
sequentially	O
(	O
first	O
a	O
filter	O
operation	O
,	O
then	O
a	O
map	O
operation	O
,	O
then	O
collecting	O
the	O
result	O
)	O
,	O
(	O
for	O
more	O
info	O
on	O
the	O
benefits	O
of	O
collection	O
pipelines	O
,	O
see	O
Martin	O
Fowler	O
'	O
s	O
excellent	O
article	O
)	O
#	O
li	O
you	O
can	O
easily	O
change	O
the	O
way	O
values	O
are	O
collected	O
by	O
replacing	O
the	O
Collector	B-api_mention
that	O
is	O
used	O
.	O
In	O
some	O
cases	O
you	O
may	O
need	O
to	O
write	O
your	O
own	O
Collector	B-api_mention
,	O
but	O
then	O
the	O
benefit	O
is	O
that	O
you	O
can	O
easily	O
reuse	O
that	O
.	O
Question	O
-	O
6841333	O
If	O
I	O
run	O
the	O
following	O
program	O
,	O
which	O
parses	O
two	O
date	O
strings	O
referencing	O
times	O
one	O
second	O
apart	O
and	O
compares	O
them	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
353	O
Why	O
is	O
ld4	O
-	O
ld3	O
not	O
1	O
(	O
as	O
I	O
would	O
expect	O
from	O
the	O
one	O
-	O
second	O
difference	O
in	O
the	O
times	O
)	O
,	O
but	O
353	O
?	O
If	O
I	O
change	O
the	O
dates	O
to	O
times	O
one	O
second	O
later	O
:	O
#	O
pre	O
Then	O
ld4	O
-	O
ld3	O
will	O
be	O
1	O
.	O
Java	O
version	O
:	O
#	O
pre	O
Timezone	B-api_mention
(	O
TimeZone	B-api_mention
.	I-api_mention
getDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
:	O
#	O
pre	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
37603567	O
this	O
is	O
best	O
document	O
I	O
found	O
describing	O
getName	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
getSimpleName	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
getCanonicalName	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
a	O
#	O
pre	O
Question	O
-	O
7693324	O
,	O
answer	O
-	O
7693341	O
To	O
convert	O
a	O
String	B-api_mention
to	O
a	O
Long	B-api_mention
(	O
object	O
)	O
,	O
use	O
Long	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
longValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
See	O
link	O
Question	O
-	O
12539365	O
,	O
answer	O
-	O
12562433	O
This	O
is	O
great	O
question	O
!	O
I	O
think	O
the	O
root	O
cause	O
of	O
it	O
is	O
the	O
following	O
,	O
we	O
are	O
using	O
JUnit	O
not	O
only	O
for	O
unit	O
testing	O
.	O
So	O
the	O
question	O
should	O
be	O
splited	O
up	O
:	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
black	O
-	O
box	O
unit	O
-	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
white	O
-	O
box	O
unit	O
-	O
testing	O
?	O
so	O
if	O
we	O
will	O
ignore	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
,	O
the	O
question	O
can	O
be	O
rephrased	O
"	O
Using	O
white	O
-	O
box	O
unit	O
-	O
testing	O
with	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
creates	O
great	O
couple	O
between	O
unit	O
test	O
and	O
my	O
could	O
implementation	O
,	O
can	O
I	O
make	O
some	O
"	O
grey	O
-	O
box	O
"	O
unit	O
-	O
testing	O
and	O
what	O
rules	O
of	O
thumb	O
I	O
should	O
use	O
for	O
this	O
"	O
.	O
Now	O
,	O
let	O
'	O
s	O
go	O
through	O
all	O
of	O
this	O
step	O
-	O
by	O
-	O
step	O
.	O
*	O
-	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
*	O
I	O
think	O
the	O
answer	O
is	O
clearly	O
no	O
,	O
moreover	O
you	O
shouldn	O
'	O
t	O
use	O
mocks	O
for	O
this	O
.	O
Your	O
test	O
should	O
be	O
as	O
close	O
to	O
real	O
application	O
as	O
possible	O
.	O
You	O
are	O
testing	O
complete	O
use	O
case	O
,	O
not	O
isolated	O
part	O
of	O
the	O
application	O
.	O
*	O
black	O
-	O
box	O
vs	O
white	O
-	O
box	O
unit	O
-	O
testing	O
black	O
-	O
box	O
state	O
If	O
you	O
are	O
using	O
white	O
-	O
box	O
approach	O
what	O
is	O
you	O
really	O
doing	O
,	O
you	O
'	O
re	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
.	O
In	O
this	O
approach	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
should	O
verify	O
that	O
your	O
unit	O
behaves	O
as	O
you	O
'	O
re	O
expecting	O
to	O
.	O
rules	O
of	O
thumbs	O
for	O
grey	O
-	O
box	O
-	O
testing	O
The	O
problem	O
with	O
white	O
-	O
box	O
testing	O
is	O
it	O
creates	O
a	O
high	O
coupling	O
.	O
One	O
possible	O
solution	O
is	O
to	O
do	O
grey	O
-	O
box	O
-	O
testing	O
,	O
not	O
white	O
-	O
box	O
-	O
testing	O
.	O
This	O
is	O
sort	O
of	O
combination	O
of	O
black	O
&	O
white	O
box	O
testing	O
.	O
You	O
are	O
really	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
like	O
in	O
white	O
-	O
box	O
testing	O
,	O
but	O
in	O
general	O
you	O
make	O
it	O
implementation	O
-	O
agnostic	O
when	O
possible	O
.	O
When	O
it	O
is	O
possible	O
,	O
you	O
will	O
just	O
make	O
a	O
check	O
like	O
in	O
black	O
-	O
box	O
case	O
,	O
just	O
asserts	O
that	O
output	O
is	O
what	O
is	O
your	O
expected	O
to	O
be	O
.	O
So	O
,	O
the	O
essence	O
of	O
your	O
question	O
is	O
when	O
it	O
is	O
possible	O
.	O
This	O
is	O
really	O
hard	O
.	O
I	O
don	O
'	O
t	O
have	O
a	O
good	O
example	O
,	O
but	O
I	O
can	O
give	O
you	O
to	O
examples	O
.	O
In	O
the	O
case	O
that	O
was	O
mentioned	O
above	O
with	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
vs	O
equalsIgnoreCase	B-api_mention
(	I-api_mention
)	I-api_mention
you	O
shouldn	O
'	O
t	O
call	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
just	O
assert	O
the	O
output	O
.	O
If	O
you	O
couldn	O
'	O
t	O
do	O
it	O
,	O
break	O
down	O
your	O
code	O
to	O
the	O
smaller	O
unit	O
,	O
until	O
you	O
can	O
do	O
it	O
.	O
On	O
the	O
other	O
hand	O
,	O
suppose	O
you	O
have	O
some	O
@	O
Service	O
and	O
you	O
are	O
writting	O
@	O
Web	O
-	O
Service	O
that	O
is	O
essentially	O
wrapper	O
upon	O
your	O
@	O
Service	O
-	O
it	O
delegates	O
all	O
calls	O
to	O
the	O
@	O
Service	O
(	O
and	O
making	O
some	O
extra	O
error	O
handling	O
)	O
.	O
In	O
this	O
case	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
shouldn	O
'	O
t	O
duplicate	O
all	O
of	O
your	O
checks	O
that	O
you	O
did	O
for	O
the	O
@	O
Serive	O
,	O
verifying	O
that	O
you	O
'	O
re	O
calling	O
to	O
@	O
Service	O
with	O
correct	O
parammeter	O
list	O
is	O
sufficient	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175175	O
Note	O
that	O
a	O
.	O
b	O
and	O
c	O
are	O
instances	O
of	O
primitive	O
wrapper	O
classes	O
(	O
such	O
as	O
Integer	B-api_mention
,	O
Double	B-api_mention
,	O
etc	O
.	O
.	O
.	O
)	O
.	O
These	O
classes	O
are	O
final	O
and	O
cannot	O
be	O
extended	O
,	O
so	O
you	O
can	O
'	O
t	O
override	O
their	O
equals	O
implementation	O
.	O
Therefore	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
,	O
since	O
those	O
classes	O
implement	O
equals	O
properly	O
.	O
Question	O
-	O
6652687	O
#	O
blockquote	O
Is	O
there	O
a	O
convenience	O
method	O
to	O
strip	O
any	O
leading	O
or	O
trailing	O
spaces	O
from	O
a	O
Java	O
String	B-api_mention
?	O
Something	O
like	O
:	O
#	O
pre	O
Result	O
:	O
no	O
spaces	O
:	O
keep	O
this	O
myString	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
replace	O
the	O
space	O
between	O
keep	O
and	O
this	O
.	O
Thanks	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
24296741	O
Here	O
'	O
s	O
another	O
technique	O
I	O
ran	O
across	O
the	O
other	O
day	O
:	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
call	O
creates	O
a	O
List	B-api_mention
containing	O
n	O
copies	O
of	O
whatever	O
value	O
you	O
provide	O
.	O
In	O
this	O
case	O
it	O
'	O
s	O
the	O
boxed	O
Integer	O
value	O
1	O
.	O
Of	O
course	O
it	O
doesn	O
'	O
t	O
actually	O
create	O
a	O
list	O
with	O
n	O
elements	O
;	O
it	O
creates	O
a	O
"	O
virtualized	O
"	O
list	O
that	O
contains	O
only	O
the	O
value	O
and	O
the	O
length	O
,	O
and	O
any	O
call	O
to	O
get	O
within	O
range	O
just	O
returns	O
the	O
value	O
.	O
The	O
nCopies	B-api_mention
method	O
has	O
been	O
around	O
since	O
the	O
Collections	B-api_mention
Framework	O
was	O
introduced	O
way	O
back	O
in	O
JDK	O
1	O
.	O
2	O
.	O
Of	O
course	O
,	O
the	O
ability	O
to	O
create	O
a	O
stream	O
from	O
its	O
result	O
was	O
added	O
in	O
Java	O
SE	O
8	O
.	O
Big	O
deal	O
,	O
another	O
way	O
to	O
do	O
the	O
same	O
thing	O
in	O
about	O
the	O
same	O
number	O
of	O
lines	O
.	O
However	O
,	O
this	O
technique	O
is	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
generate	I-api_mention
and	O
IntStream	B-api_mention
.	I-api_mention
iterate	I-api_mention
approaches	O
,	O
and	O
surprisingly	O
,	O
it	O
'	O
s	O
also	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
approach	O
.	O
For	O
iterate	O
and	O
generate	O
the	O
result	O
is	O
perhaps	O
not	O
too	O
surprising	O
.	O
The	O
streams	O
framework	O
(	O
really	O
,	O
the	O
Spliterators	O
for	O
these	O
streams	O
)	O
is	O
built	O
on	O
the	O
assumption	O
that	O
the	O
lambdas	O
will	O
potentially	O
generate	O
different	O
values	O
each	O
time	O
,	O
and	O
that	O
they	O
will	O
generate	O
an	O
unbounded	O
number	O
of	O
results	O
.	O
This	O
makes	O
parallel	O
splitting	O
particularly	O
difficult	O
.	O
The	O
iterate	O
method	O
is	O
also	O
problematic	O
for	O
this	O
case	O
because	O
each	O
call	O
requires	O
the	O
result	O
of	O
the	O
previous	O
one	O
.	O
So	O
the	O
streams	O
using	O
generate	O
and	O
iterate	O
don	O
'	O
t	O
do	O
very	O
well	O
for	O
generating	O
repeated	O
constants	O
.	O
The	O
relatively	O
poor	O
performance	O
of	O
range	O
is	O
surprising	O
.	O
This	O
too	O
is	O
virtualized	O
,	O
so	O
the	O
elements	O
don	O
'	O
t	O
actually	O
all	O
exist	O
in	O
memory	O
,	O
and	O
the	O
size	O
is	O
known	O
up	O
front	O
.	O
This	O
should	O
make	O
for	O
a	O
fast	O
and	O
easily	O
parallelizable	O
spliterator	O
.	O
But	O
it	O
surprisingly	O
didn	O
'	O
t	O
do	O
very	O
well	O
.	O
Perhaps	O
the	O
reason	O
is	O
that	O
range	O
has	O
to	O
compute	O
a	O
value	O
for	O
each	O
element	O
of	O
the	O
range	O
and	O
then	O
call	O
a	O
function	O
on	O
it	O
.	O
But	O
this	O
function	O
just	O
ignores	O
its	O
input	O
and	O
returns	O
a	O
constant	O
,	O
so	O
I	O
'	O
m	O
surprised	O
this	O
isn	O
'	O
t	O
inlined	O
and	O
killed	O
.	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
technique	O
has	O
to	O
do	O
boxing	O
/	O
unboxing	O
in	O
order	O
to	O
handle	O
the	O
values	O
,	O
since	O
there	O
are	O
no	O
primitive	O
specializations	O
of	O
List	B-api_mention
.	O
Since	O
the	O
value	O
is	O
the	O
same	O
every	O
time	O
,	O
it	O
'	O
s	O
basically	O
boxed	O
once	O
and	O
that	O
box	O
is	O
shared	O
by	O
all	O
n	O
copies	O
.	O
I	O
suspect	O
boxing	O
/	O
unboxing	O
is	O
highly	O
optimized	O
,	O
even	O
intrinsified	O
,	O
and	O
it	O
can	O
be	O
inlined	O
well	O
.	O
Here	O
'	O
s	O
the	O
code	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
JMH	O
results	O
:	O
(	O
2	O
.	O
8GHz	O
Core2Duo	O
)	O
#	O
pre	O
There	O
is	O
a	O
fair	O
amount	O
of	O
variance	O
in	O
the	O
ncopies	O
version	O
,	O
but	O
overall	O
it	O
seems	O
comfortably	O
20x	O
faster	O
than	O
the	O
range	O
version	O
.	O
(	O
I	O
'	O
d	O
be	O
quite	O
willing	O
to	O
believe	O
that	O
I	O
'	O
ve	O
done	O
something	O
wrong	O
,	O
though	O
.	O
)	O
I	O
'	O
m	O
surprised	O
at	O
how	O
well	O
the	O
nCopies	B-api_mention
technique	O
works	O
.	O
Internally	O
it	O
doesn	O
'	O
t	O
do	O
very	O
much	O
special	O
,	O
with	O
the	O
stream	O
of	O
the	O
virtualized	O
list	O
simply	O
being	O
implemented	O
using	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
!	O
I	O
had	O
expected	O
that	O
it	O
would	O
be	O
necessary	O
to	O
create	O
a	O
specialized	O
spliterator	O
to	O
get	O
this	O
to	O
go	O
fast	O
,	O
but	O
it	O
already	O
seems	O
to	O
be	O
pretty	O
good	O
.	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4819109	O
If	O
you	O
look	O
at	O
the	O
methods	O
AtomicInteger	B-api_mention
has	O
,	O
you	O
'	O
ll	O
notice	O
that	O
they	O
tend	O
to	O
correspond	O
to	O
common	O
operations	O
on	O
ints	O
.	O
For	O
instance	O
:	O
#	O
pre	O
is	O
the	O
thread	O
-	O
safe	O
version	O
of	O
this	O
:	O
#	O
pre	O
The	O
methods	O
map	O
like	O
this	O
:	O
+	O
+	O
i	O
is	O
i	O
.	B-api_mention
incrementAndGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
i	O
+	O
+	O
is	O
i	O
.	B-api_mention
getAndIncrement	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
-	O
i	O
is	O
i	O
.	B-api_mention
decrementAndGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
i	O
-	O
-	O
is	O
i	O
.	B-api_mention
getAndDecrement	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
i	O
=	O
x	O
is	O
i	O
.	B-api_mention
set	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
x	O
=	O
i	O
is	O
x	O
=	O
i	O
.	B-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
There	O
are	O
other	O
convenience	O
methods	O
as	O
well	O
,	O
like	O
compareAndSet	B-api_mention
or	O
addAndGet	B-api_mention
Question	O
-	O
18448671	O
,	O
answer	O
-	O
26937769	O
Though	O
one	O
answer	O
is	O
accepted	O
and	O
this	O
is	O
an	O
old	O
one	O
,	O
I	O
thought	O
posting	O
this	O
answer	O
as	O
it	O
does	O
not	O
use	O
Iterator	B-api_mention
#	O
pre	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777311	O
The	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
check	O
if	O
both	O
arrays	O
contain	O
the	O
same	O
number	O
of	O
elements	O
,	O
and	O
all	O
corresponding	O
pairs	O
of	O
elements	O
in	O
the	O
two	O
arrays	O
are	O
equal	O
.	O
The	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
compare	O
the	O
object	O
to	O
another	O
object	O
and	O
return	O
true	O
only	O
if	O
the	O
reference	O
of	O
the	O
two	O
object	O
are	O
equal	O
as	O
in	O
the	O
Object	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
33635717	O
I	O
'	O
m	O
reading	O
up	O
about	O
Java	O
streams	O
and	O
discovering	O
new	O
things	O
as	O
I	O
go	O
along	O
.	O
One	O
of	O
the	O
new	O
things	O
I	O
found	O
was	O
the	O
peek	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
.	O
Almost	O
everything	O
I	O
'	O
ve	O
read	O
on	O
peek	O
says	O
it	O
should	O
be	O
used	O
to	O
debug	O
your	O
Streams	O
.	O
What	O
if	O
I	O
had	O
a	O
Stream	B-api_mention
where	O
each	O
Account	O
has	O
a	O
username	O
,	O
password	O
field	O
and	O
a	O
login	O
(	O
)	O
and	O
loggedIn	O
(	O
)	O
method	O
.	O
I	O
also	O
have	O
Consumer	O
<	O
T	O
>	O
login	O
=	O
account	O
-	O
>	O
account	O
.	O
login	O
(	O
args	O
)	O
;	O
and	O
Predicate	O
<	O
T	O
>	O
loggedIn	O
=	O
account	O
-	O
>	O
account	O
.	O
loggedIn	O
(	O
args	O
)	O
;	O
Why	O
would	O
this	O
be	O
so	O
bad	O
?	O
#	O
pre	O
Now	O
as	O
far	O
as	O
I	O
can	O
tell	O
this	O
does	O
exactly	O
what	O
it	O
'	O
s	O
intended	O
to	O
do	O
.	O
It	O
;	O
#	O
li	O
Takes	O
a	O
list	O
of	O
accounts	O
#	O
li	O
Tries	O
to	O
log	O
in	O
to	O
each	O
account	O
#	O
li	O
Filters	O
out	O
any	O
account	O
which	O
aren	O
'	O
t	O
logged	O
in	O
#	O
li	O
Collects	O
the	O
logged	O
in	O
accounts	O
into	O
a	O
new	O
list	O
What	O
is	O
the	O
downside	O
of	O
doing	O
something	O
like	O
this	O
?	O
Any	O
reason	O
I	O
shouldn	O
'	O
t	O
proceed	O
?	O
Lastly	O
,	O
if	O
not	O
this	O
solution	O
then	O
what	O
?	O
The	O
original	O
version	O
of	O
this	O
used	O
the	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
as	O
follows	O
;	O
#	O
pre	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276493	O
You	O
can	O
close	O
the	O
outer	O
most	O
stream	O
,	O
in	O
fact	O
you	O
don	O
'	O
t	O
need	O
to	O
retain	O
all	O
the	O
streams	O
wrapped	O
and	O
you	O
can	O
use	O
Java	O
7	O
try	O
-	O
with	O
-	O
resources	O
.	O
#	O
pre	O
If	O
you	O
subscribe	O
to	O
YAGNI	O
,	O
or	O
you	O
-	O
aint	O
-	O
gonna	O
-	O
need	O
-	O
it	O
,	O
you	O
should	O
be	O
only	O
adding	O
code	O
you	O
actually	O
need	O
.	O
You	O
shouldn	O
'	O
t	O
be	O
adding	O
code	O
you	O
imagine	O
you	O
might	O
need	O
but	O
in	O
reality	O
doesn	O
'	O
t	O
do	O
anything	O
useful	O
.	O
Take	O
this	O
example	O
and	O
imagine	O
what	O
could	O
possibly	O
go	O
wrong	O
if	O
you	O
didn	O
'	O
t	O
do	O
this	O
and	O
what	O
the	O
impact	O
would	O
be	O
?	O
#	O
pre	O
Lets	O
start	O
with	O
FileOutputStream	B-api_mention
which	O
calls	O
open	O
to	O
do	O
all	O
the	O
real	O
work	O
.	O
/	O
*	O
*	O
*	O
Opens	O
a	O
file	O
,	O
with	O
the	O
specified	O
name	O
,	O
for	O
overwriting	O
or	O
appending	O
.	O
*	O
@	O
param	O
name	O
name	O
of	O
file	O
to	O
be	O
opened	O
*	O
@	O
param	O
append	O
whether	O
the	O
file	O
is	O
to	O
be	O
opened	O
in	O
append	O
mode	O
*	O
/	O
private	O
native	O
void	O
open	O
(	O
args	O
)	O
throws	O
FileNotFoundException	B-api_mention
;	O
If	O
the	O
file	O
is	O
not	O
found	O
,	O
there	O
is	O
no	O
underlying	O
resource	O
to	O
close	O
,	O
so	O
closing	O
it	O
won	O
'	O
t	O
make	O
any	O
difference	O
.	O
If	O
The	O
file	O
exists	O
,	O
it	O
should	O
be	O
throwing	O
a	O
FileNotFoundException	B-api_mention
.	O
So	O
there	O
is	O
nothing	O
to	O
be	O
gained	O
by	O
trying	O
to	O
close	O
the	O
resource	O
from	O
this	O
line	O
alone	O
.	O
The	O
reason	O
you	O
need	O
to	O
close	O
the	O
file	O
is	O
when	O
the	O
file	O
is	O
opened	O
successfully	O
,	O
but	O
you	O
later	O
get	O
an	O
error	O
.	O
Lets	O
look	O
at	O
the	O
next	O
stream	O
GZIPOutputStream	O
There	O
is	O
code	O
which	O
can	O
throw	O
an	O
exception	O
#	O
pre	O
This	O
writes	O
the	O
header	O
of	O
the	O
file	O
.	O
Now	O
it	O
would	O
be	O
very	O
unusual	O
for	O
you	O
to	O
be	O
able	O
to	O
open	O
a	O
file	O
for	O
writing	O
but	O
not	O
be	O
able	O
to	O
write	O
even	O
8	O
bytes	O
to	O
it	O
,	O
but	O
lets	O
imagine	O
this	O
could	O
happen	O
and	O
we	O
don	O
'	O
t	O
close	O
the	O
file	O
afterwards	O
.	O
What	O
does	O
happen	O
to	O
a	O
file	O
if	O
it	O
is	O
not	O
closed	O
?	O
You	O
don	O
'	O
t	O
get	O
any	O
unflushed	O
writes	O
,	O
they	O
are	O
discarded	O
and	O
in	O
this	O
case	O
,	O
there	O
is	O
no	O
successfully	O
written	O
bytes	O
to	O
the	O
stream	O
which	O
isn	O
'	O
t	O
buffered	O
at	O
this	O
point	O
anyway	O
.	O
But	O
a	O
file	O
which	O
is	O
not	O
closed	O
doesn	O
'	O
t	O
live	O
forever	O
,	O
instead	O
FileOutputStream	B-api_mention
has	O
#	O
pre	O
If	O
you	O
don	O
'	O
t	O
close	O
a	O
file	O
at	O
all	O
,	O
it	O
gets	O
closed	O
anyway	O
,	O
just	O
not	O
immediately	O
(	O
and	O
like	O
I	O
said	O
,	O
data	O
which	O
is	O
left	O
in	O
a	O
buffer	O
will	O
be	O
lost	O
this	O
way	O
,	O
but	O
there	O
is	O
none	O
at	O
this	O
point	O
)	O
What	O
is	O
the	O
consequence	O
of	O
not	O
closing	O
the	O
file	O
immediately	O
?	O
Under	O
normal	O
conditions	O
,	O
you	O
potentially	O
lose	O
some	O
data	O
,	O
and	O
you	O
potentially	O
run	O
out	O
of	O
file	O
descriptors	O
.	O
But	O
if	O
you	O
have	O
a	O
system	O
where	O
you	O
can	O
create	O
files	O
but	O
you	O
can	O
'	O
t	O
write	O
anything	O
to	O
them	O
,	O
you	O
have	O
a	O
bigger	O
problem	O
.	O
i	O
.	O
e	O
.	O
it	O
hard	O
to	O
imagine	O
why	O
you	O
are	O
repeatedly	O
trying	O
to	O
create	O
this	O
file	O
despite	O
the	O
fact	O
you	O
are	O
failing	O
.	O
Both	O
OutputStreamWriter	O
and	O
BufferedWriter	O
don	O
'	O
t	O
throw	O
IOException	B-api_mention
in	O
their	O
constructors	O
,	O
so	O
it	O
not	O
clear	O
what	O
problem	O
they	O
would	O
cause	O
.	O
In	O
The	O
case	O
of	O
BufferedWriter	O
,	O
you	O
could	O
get	O
an	O
OutOfMemoryError	O
.	O
In	O
this	O
case	O
it	O
will	O
immediately	O
trigger	O
a	O
GC	O
,	O
which	O
as	O
we	O
have	O
seen	O
will	O
close	O
the	O
file	O
anyway	O
.	O
Question	O
-	O
5071040	O
,	O
answer	O
-	O
5071064	O
There	O
are	O
multiple	O
ways	O
:	O
#	O
li	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
my	O
preference	O
)	O
#	O
li	O
StringLiteral	O
+	O
number	O
(	O
I	O
don	O
'	O
t	O
know	O
how	O
the	O
compiler	O
handles	O
it	O
,	O
perhaps	O
it	O
is	O
as	O
efficient	O
as	O
the	O
above	O
)	O
#	O
li	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
18777989	O
,	O
answer	O
-	O
18778228	O
You	O
made	O
a	O
good	O
summery	O
of	O
the	O
practical	O
differences	O
in	O
use	O
and	O
implementation	O
but	O
did	O
not	O
say	O
anything	O
about	O
the	O
difference	O
in	O
meaning	O
.	O
An	O
interface	O
is	O
a	O
description	O
of	O
the	O
behaviour	O
an	O
implementing	O
class	O
will	O
have	O
.	O
The	O
implementing	O
class	O
ensures	O
,	O
that	O
it	O
will	O
have	O
these	O
methods	O
that	O
can	O
be	O
used	O
on	O
it	O
.	O
It	O
is	O
basically	O
a	O
contract	O
or	O
a	O
promise	O
the	O
class	O
has	O
to	O
make	O
.	O
An	O
abstract	O
class	O
is	O
a	O
basis	O
for	O
different	O
subclasses	O
that	O
share	O
behaviour	O
which	O
does	O
not	O
need	O
to	O
be	O
repeatedly	O
be	O
created	O
.	O
Subclasses	O
must	O
complete	O
the	O
behaviour	O
and	O
have	O
the	O
option	O
to	O
override	O
predefine	O
behaviour	O
(	O
as	O
long	O
as	O
it	O
is	O
not	O
defined	O
as	O
final	O
or	O
private	O
)	O
.	O
You	O
will	O
find	O
good	O
examples	O
in	O
the	O
java	O
.	O
util	O
package	O
which	O
includes	O
interfaces	O
like	O
List	B-api_mention
and	O
abstract	O
classes	O
like	O
AbstractList	B-api_mention
which	O
already	O
implements	O
the	O
interface	O
.	O
The	O
official	O
documentation	O
describes	O
the	O
AbstractList	B-api_mention
as	O
follows	O
:	O
#	O
blockquote	O
Question	O
-	O
32323081	O
I	O
have	O
a	O
question	O
regarding	O
Java	O
8	O
inference	O
with	O
respect	O
to	O
lambdas	O
and	O
their	O
related	O
exception	O
signatures	O
.	O
If	O
I	O
define	O
some	O
method	O
foo	O
:	O
#	O
pre	O
then	O
I	O
get	O
the	O
nice	O
and	O
concise	O
semantic	O
of	O
being	O
able	O
to	O
write	O
foo	O
(	O
args	O
)	O
;	O
in	O
most	O
cases	O
for	O
a	O
given	O
T	O
.	O
However	O
,	O
in	O
this	O
example	O
,	O
if	O
my	O
getTheT	O
operation	O
declares	O
that	O
it	O
throws	O
Exception	O
,	O
my	O
foo	O
method	O
which	O
takes	O
a	O
Supplier	B-api_mention
no	O
longer	O
compiles	O
:	O
the	O
Supplier	B-api_mention
method	O
signature	O
for	O
get	O
doesn	O
'	O
t	O
throw	O
exceptions	O
.	O
It	O
seems	O
like	O
a	O
decent	O
way	O
to	O
get	O
around	O
this	O
would	O
be	O
to	O
overload	O
foo	O
to	O
accept	O
either	O
option	O
,	O
with	O
the	O
overloaded	O
definition	O
being	O
:	O
#	O
pre	O
where	O
ThrowingSupplier	O
is	O
defined	O
as	O
#	O
pre	O
In	O
this	O
way	O
,	O
we	O
have	O
one	O
Supplier	B-api_mention
type	O
which	O
throws	O
exceptions	O
and	O
one	O
which	O
doesn	O
'	O
t	O
.	O
The	O
desired	O
syntax	O
would	O
be	O
something	O
like	O
this	O
:	O
#	O
pre	O
However	O
,	O
this	O
causes	O
issues	O
due	O
to	O
the	O
lambda	O
type	O
being	O
ambiguous	O
(	O
presumably	O
unable	O
to	O
resolve	O
between	O
Supplier	B-api_mention
and	O
ThrowingSupplier	O
)	O
.	O
Doing	O
an	O
explicit	O
cast	O
a	O
la	O
foo	O
(	O
args	O
)	O
;	O
would	O
work	O
,	O
but	O
it	O
gets	O
rid	O
of	O
most	O
of	O
the	O
conciseness	O
of	O
the	O
desired	O
syntax	O
.	O
I	O
guess	O
the	O
underlying	O
question	O
is	O
:	O
if	O
the	O
Java	O
compiler	O
is	O
able	O
to	O
resolve	O
the	O
fact	O
that	O
one	O
of	O
my	O
lambdas	O
is	O
incompatible	O
due	O
to	O
it	O
throwing	O
an	O
exception	O
in	O
the	O
Supplier	O
-	O
only	O
case	O
,	O
why	O
isn	O
'	O
t	O
it	O
able	O
to	O
use	O
that	O
same	O
information	O
to	O
derive	O
the	O
type	O
of	O
the	O
lambda	O
in	O
the	O
secondary	O
,	O
type	O
-	O
inference	O
case	O
?	O
Any	O
information	O
or	O
resources	O
which	O
anyone	O
could	O
point	O
me	O
to	O
would	O
likewise	O
be	O
much	O
appreciated	O
,	O
as	O
I	O
'	O
m	O
just	O
not	O
too	O
sure	O
where	O
to	O
look	O
for	O
more	O
information	O
on	O
the	O
matter	O
.	O
Thanks	O
!	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
9482369	O
This	O
could	O
be	O
a	O
bit	O
tricky	O
in	O
the	O
most	O
general	O
case	O
.	O
On	O
the	O
face	O
of	O
it	O
,	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
give	O
you	O
the	O
IP	O
address	O
of	O
this	O
host	O
.	O
The	O
problem	O
is	O
that	O
a	O
host	O
could	O
have	O
lots	O
of	O
network	O
interfaces	O
,	O
and	O
an	O
interface	O
could	O
be	O
bound	O
to	O
more	O
than	O
one	O
IP	O
address	O
.	O
And	O
to	O
top	O
that	O
,	O
not	O
all	O
IP	O
addresses	O
will	O
be	O
reachable	O
outside	O
of	O
your	O
machine	O
or	O
your	O
LAN	O
.	O
For	O
example	O
,	O
they	O
could	O
be	O
IP	O
addresses	O
for	O
virtual	O
network	O
devices	O
,	O
private	O
network	O
IP	O
addresses	O
,	O
and	O
so	O
on	O
.	O
What	O
this	O
means	O
is	O
that	O
the	O
IP	O
address	O
returned	O
by	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
might	O
not	O
be	O
the	O
right	O
one	O
to	O
use	O
.	O
How	O
can	O
you	O
deal	O
with	O
this	O
?	O
#	O
li	O
One	O
approach	O
is	O
to	O
use	O
NetworkInterface	B-api_mention
.	I-api_mention
getNetworkInterfaces	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
all	O
of	O
the	O
known	O
network	O
interfaces	O
on	O
the	O
host	O
,	O
and	O
then	O
iterate	O
over	O
each	O
NI	O
'	O
s	O
addresses	O
.	O
#	O
li	O
Another	O
approach	O
is	O
to	O
(	O
somehow	O
)	O
get	O
the	O
externally	O
advertized	O
FQDN	O
for	O
the	O
host	O
,	O
and	O
use	O
InetAddress	B-api_mention
.	I-api_mention
getByName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
look	O
up	O
the	O
primary	O
IP	O
address	O
.	O
(	O
But	O
how	O
do	O
you	O
get	O
it	O
,	O
and	O
how	O
do	O
you	O
deal	O
with	O
a	O
DNS	O
-	O
based	O
load	O
balancer	O
?	O
)	O
#	O
li	O
A	O
variation	O
of	O
the	O
previous	O
is	O
to	O
get	O
the	O
preferred	O
FQDN	O
from	O
a	O
config	O
file	O
or	O
a	O
command	O
line	O
parameter	O
.	O
#	O
li	O
Another	O
variation	O
is	O
to	O
get	O
the	O
preferred	O
IP	O
address	O
from	O
a	O
config	O
file	O
or	O
a	O
command	O
line	O
parameter	O
.	O
In	O
summary	O
,	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
typically	O
work	O
,	O
but	O
you	O
may	O
need	O
to	O
provide	O
an	O
alternative	O
method	O
for	O
the	O
cases	O
where	O
your	O
code	O
is	O
run	O
in	O
an	O
environment	O
with	O
"	O
complicated	O
"	O
networking	O
.	O
#	O
blockquote	O
#	O
li	O
Any	O
address	O
in	O
the	O
range	O
127	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
is	O
a	O
"	O
loopback	O
"	O
address	O
.	O
It	O
is	O
only	O
visible	O
to	O
"	O
this	O
"	O
host	O
.	O
#	O
li	O
Any	O
address	O
in	O
the	O
range	O
192	O
.	O
168	O
.	O
xxx	O
.	O
xxx	O
is	O
a	O
private	O
(	O
aka	O
site	O
local	O
)	O
IP	O
address	O
.	O
These	O
are	O
reserved	O
for	O
use	O
within	O
an	O
organization	O
.	O
The	O
same	O
applies	O
to	O
10	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
addresses	O
,	O
and	O
172	O
.	O
16	O
.	O
xxx	O
.	O
xxx	O
through	O
172	O
.	O
31	O
.	O
xxx	O
.	O
xxx	O
.	O
#	O
li	O
Addresses	O
in	O
the	O
range	O
169	O
.	O
254	O
.	O
xxx	O
.	O
xxx	O
are	O
link	O
local	O
IP	O
addresses	O
.	O
These	O
are	O
reserved	O
for	O
use	O
on	O
a	O
single	O
network	O
segment	O
.	O
#	O
li	O
Addresses	O
in	O
the	O
range	O
224	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
through	O
239	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
are	O
multicast	O
addresses	O
.	O
#	O
li	O
The	O
address	O
255	O
.	O
255	O
.	O
255	O
.	O
255	O
is	O
the	O
broadcast	O
address	O
.	O
#	O
li	O
Anything	O
else	O
should	O
be	O
a	O
valid	O
public	O
point	O
-	O
to	O
-	O
point	O
IPv4	O
address	O
.	O
In	O
fact	O
,	O
the	O
InetAddress	B-api_mention
API	O
provides	O
methods	O
for	O
testing	O
for	O
loopback	O
,	O
link	O
local	O
,	O
site	O
local	O
,	O
multicast	O
and	O
broadcast	O
addresses	O
.	O
You	O
can	O
use	O
these	O
to	O
sort	O
out	O
which	O
of	O
the	O
IP	O
addresses	O
you	O
get	O
back	O
is	O
most	O
appropriate	O
.	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
22578124	O
Old	O
thread	O
I	O
know	O
but	O
I	O
am	O
sort	O
of	O
new	O
to	O
Java	O
and	O
discover	O
one	O
of	O
it	O
'	O
s	O
strange	O
things	O
.	O
I	O
have	O
used	O
String	B-api_mention
.	I-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
get	O
unpredictable	O
results	O
.	O
Something	O
like	O
this	O
mess	O
up	O
the	O
string	O
:	O
sUrl	O
=	O
sUrl	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
I	O
designed	O
this	O
function	O
to	O
get	O
around	O
the	O
weird	O
problem	O
:	O
#	O
pre	O
Which	O
make	O
you	O
able	O
to	O
do	O
:	O
#	O
pre	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
35834484	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
You	O
can	O
also	O
use	O
public	O
static	O
Integer	B-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
throws	O
NumberFormatException	B-api_mention
.	O
It	O
also	O
works	O
for	O
base	O
8	O
and	O
16	O
:	O
#	O
pre	O
If	O
you	O
want	O
to	O
get	O
int	O
instead	O
of	O
Integer	O
you	O
can	O
use	O
:	O
#	O
li	O
Unboxing	O
:	O
int	O
val	O
=	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
intValue	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
29945627	O
,	O
answer	O
-	O
29945754	O
The	O
lambda	O
:	O
(	O
)	O
-	O
>	O
{	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
}	O
;	O
actually	O
represents	O
an	O
implementation	O
for	O
an	O
interface	O
like	O
:	O
#	O
pre	O
which	O
is	O
completely	O
different	O
than	O
the	O
one	O
you	O
'	O
ve	O
defined	O
.	O
That	O
'	O
s	O
why	O
you	O
get	O
an	O
error	O
.	O
Since	O
you	O
can	O
'	O
t	O
extend	O
your	O
@	O
FunctionalInterface	O
,	O
nor	O
introduce	O
a	O
brand	O
new	O
one	O
,	O
then	O
I	O
think	O
you	O
don	O
'	O
t	O
have	O
much	O
options	O
.	O
You	O
can	O
use	O
the	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interfaces	O
to	O
denote	O
that	O
some	O
of	O
the	O
values	O
(	O
return	O
type	O
or	O
method	O
parameter	O
)	O
is	O
missing	O
,	O
though	O
.	O
However	O
,	O
this	O
won	O
'	O
t	O
make	O
the	O
lambda	O
body	O
simpler	O
.	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489453	O
Java	O
treats	O
String	B-api_mention
as	O
a	O
special	O
class	O
,	O
you	O
can	O
initialize	O
in	O
both	O
ways	O
#	O
li	O
Directly	O
assigning	O
literal	O
String	B-api_mention
a	O
=	O
StringLiteral	O
;	O
#	O
li	O
As	O
other	O
Objects	B-api_mention
using	O
new	O
keyword	O
String	B-api_mention
a	O
=	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
need	O
to	O
take	O
special	O
care	O
when	O
you	O
wants	O
to	O
compare	O
with	O
=	O
=	O
sign	O
:	O
#	O
pre	O
That	O
is	O
because	O
in	O
first	O
case	O
the	O
objects	O
a	O
and	O
b	O
are	O
kept	O
in	O
something	O
called	O
literal	O
pool	O
and	O
they	O
both	O
are	O
referencing	O
same	O
object	O
so	O
they	O
are	O
equal	O
in	O
both	O
ways	O
.	O
But	O
in	O
second	O
case	O
a	O
and	O
b	O
references	O
different	O
objects	O
like	O
when	O
we	O
initialize	O
any	O
other	O
objects	O
.	O
so	O
they	O
are	O
unequal	O
when	O
compared	O
with	O
=	O
=	O
operator	O
whereas	O
they	O
are	O
equal	O
in	O
values	O
.	O
Question	O
-	O
31202946	O
,	O
answer	O
-	O
31203252	O
#	O
blockquote	O
This	O
question	O
actually	O
boils	O
down	O
to	O
the	O
fact	O
that	O
you	O
should	O
always	O
prefer	O
composition	O
over	O
inheritance	O
.	O
If	O
the	O
Thread	B-api_mention
class	O
was	O
declared	O
as	O
abstract	O
,	O
the	O
language	O
would	O
have	O
to	O
provide	O
another	O
class	O
that	O
extended	O
from	O
it	O
which	O
programmers	O
could	O
use	O
to	O
create	O
a	O
Thread	B-api_mention
.	O
Your	O
question	O
would	O
then	O
be	O
about	O
why	O
this	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
is	O
not	O
abstract	O
.	O
If	O
the	O
language	O
did	O
not	O
provide	O
another	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
,	O
programmers	O
would	O
have	O
to	O
create	O
their	O
own	O
class	O
that	O
extend	O
s	O
from	O
Thread	B-api_mention
and	O
override	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
blockquote	O
The	O
only	O
possible	O
explanation	O
I	O
can	O
give	O
is	O
that	O
the	O
developers	O
of	O
the	O
language	O
saw	O
some	O
use	O
-	O
cases	O
for	O
overriding	O
start	O
when	O
the	O
class	O
was	O
introduced	O
to	O
the	O
JDK	O
.	O
The	O
first	O
version	O
of	O
Java	O
that	O
I	O
used	O
was	O
1	O
.	O
5	O
and	O
I	O
personally	O
have	O
not	O
come	O
across	O
a	O
use	O
-	O
case	O
where	O
I	O
found	O
the	O
need	O
to	O
override	O
start	O
.	O
As	O
JB	O
Nizet	O
stated	O
in	O
his	O
answer	O
#	O
blockquote	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33147762	O
I	O
found	O
this	O
explanation	O
:	O
#	O
blockquote	O
In	O
Java	O
6	O
,	O
if	O
you	O
use	O
the	O
API	O
as	O
:	O
#	O
pre	O
And	O
newCount	O
overflows	O
(	O
this	O
becomes	O
negative	O
)	O
,	O
if	O
(	O
args	O
)	O
will	O
return	O
false	O
and	O
you	O
may	O
mistakenly	O
assume	O
that	O
the	O
ArrayList	B-api_mention
was	O
increased	O
by	O
len	B-api_mention
.	O
Question	O
-	O
8189466	O
,	O
answer	O
-	O
8189786	O
Here	O
'	O
s	O
why	O
:	O
As	O
it	O
is	O
says	O
in	O
the	O
Javadoc	O
:	O
#	O
blockquote	O
This	O
check	O
is	O
done	O
in	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
iterator	O
(	O
as	O
you	O
can	O
see	O
by	O
the	O
stacktrace	O
)	O
.	O
But	O
we	O
will	O
reach	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
only	O
if	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
delivered	O
true	O
,	O
which	O
is	O
what	O
is	O
called	O
by	O
the	O
for	O
each	O
to	O
check	O
if	O
the	O
boundary	O
is	O
met	O
.	O
In	O
your	O
remove	O
method	O
,	O
when	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
checks	O
if	O
it	O
needs	O
to	O
return	O
another	O
element	O
,	O
it	O
will	O
see	O
that	O
it	O
returned	O
two	O
elements	O
,	O
and	O
now	O
after	O
one	O
element	O
was	O
removed	O
the	O
list	O
only	O
contains	O
two	O
elements	O
.	O
So	O
all	O
is	O
peachy	O
and	O
we	O
are	O
done	O
with	O
iterating	O
.	O
The	O
check	O
for	O
concurrent	O
modifications	O
does	O
not	O
occur	O
,	O
as	O
this	O
is	O
done	O
in	O
the	O
next	O
(	O
args	O
)	O
method	O
which	O
is	O
never	O
called	O
.	O
Next	O
we	O
get	O
to	O
the	O
second	O
loop	O
.	O
After	O
we	O
remove	O
the	O
second	O
number	O
the	O
hasNext	B-api_mention
method	O
will	O
check	O
again	O
if	O
can	O
return	O
more	O
values	O
.	O
It	O
has	O
returned	O
two	O
values	O
already	O
,	O
but	O
the	O
list	O
now	O
only	O
contains	O
one	O
.	O
But	O
the	O
code	O
here	O
is	O
:	O
#	O
pre	O
1	O
!	O
=	O
2	O
,	O
so	O
we	O
continue	O
to	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
now	O
realizes	O
that	O
someone	O
has	O
been	O
messing	O
with	O
the	O
list	O
and	O
fires	O
the	O
exception	O
.	O
Hope	O
that	O
clears	O
your	O
question	O
up	O
.	O
Question	O
-	O
32714194	O
String	B-api_mention
is	O
a	O
special	O
case	O
in	O
Java	O
.	O
It	O
'	O
s	O
a	O
class	O
,	O
which	O
I	O
can	O
examine	O
in	O
the	O
source	O
code	O
,	O
but	O
it	O
also	O
has	O
its	O
own	O
infix	O
operator	O
+	O
,	O
which	O
seems	O
to	O
be	O
syntactic	O
sugar	O
for	O
StringBuilder	B-api_mention
.	O
For	O
example	O
,	O
StringLiteral	O
+	O
yourName	O
;	O
could	O
become	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
There	O
are	O
no	O
user	O
-	O
defined	O
operators	O
in	O
Java	O
,	O
so	O
where	O
is	O
+	O
specified	O
for	O
String	B-api_mention
?	O
Could	O
the	O
same	O
mechanism	O
be	O
used	O
to	O
make	O
additional	O
operators	O
,	O
such	O
as	O
for	O
vectors	O
?	O
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375716	O
String	B-api_mention
is	O
immutable	O
irrespective	O
of	O
how	O
it	O
is	O
instantiated	O
1	O
)	O
Short	O
answer	O
is	O
yes	O
,	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
immutable	O
too	O
.	O
Because	O
every	O
possible	O
mutable	O
operation	O
(	O
like	O
replace	O
,	O
toLowerCase	B-api_mention
etcetra	O
)	O
that	O
you	O
perform	O
on	O
String	B-api_mention
does	O
not	O
affect	O
the	O
original	O
String	B-api_mention
instance	O
and	O
returns	O
you	O
a	O
new	O
instance	O
.	O
You	O
may	O
check	O
this	O
in	O
Javadoc	O
for	O
String	B-api_mention
.	O
Each	O
public	O
method	O
of	O
String	B-api_mention
that	O
is	O
exposed	O
returns	O
a	O
new	O
String	B-api_mention
instance	O
and	O
does	O
not	O
alter	O
the	O
present	O
instance	O
on	O
which	O
you	O
called	O
the	O
method	O
.	O
This	O
is	O
very	O
helpful	O
in	O
Multi	O
-	O
threaded	O
environment	O
as	O
you	O
don	O
'	O
t	O
have	O
to	O
think	O
about	O
mutability	O
(	O
someone	O
will	O
change	O
the	O
value	O
)	O
every	O
time	O
you	O
pass	O
or	O
share	O
the	O
String	B-api_mention
around	O
.	O
String	B-api_mention
can	O
easily	O
be	O
the	O
most	O
used	O
data	O
type	O
,	O
so	O
the	O
designers	O
have	O
blessed	O
us	O
all	O
to	O
not	O
think	O
about	O
mutability	O
everytime	O
and	O
saved	O
us	O
a	O
lot	O
of	O
pain	O
.	O
Immutability	O
allowed	O
String	B-api_mention
pool	O
or	O
caching	O
It	O
is	O
because	O
of	O
immutability	O
property	O
that	O
the	O
internal	O
pool	O
of	O
string	O
was	O
possible	O
,	O
as	O
when	O
same	O
String	B-api_mention
value	O
is	O
required	O
at	O
some	O
other	O
place	O
then	O
that	O
immutable	O
reference	O
is	O
returned	O
.	O
If	O
String	B-api_mention
would	O
have	O
been	O
mutable	O
then	O
it	O
would	O
not	O
have	O
been	O
possible	O
to	O
share	O
String	B-api_mention
s	O
like	O
this	O
to	O
save	O
memory	O
.	O
String	B-api_mention
immutablity	O
was	O
not	O
because	O
of	O
pooling	O
,	O
but	O
immutability	O
has	O
more	O
benefits	O
attached	O
to	O
it	O
.	O
String	B-api_mention
interning	O
or	O
pooling	O
is	O
an	O
example	O
of	O
Flyweight	O
Design	O
pattern	O
2	O
)	O
Yes	O
it	O
will	O
be	O
interned	O
like	O
any	O
other	O
String	B-api_mention
as	O
a	O
blank	O
String	B-api_mention
is	O
also	O
as	O
much	O
a	O
String	B-api_mention
as	O
other	O
String	B-api_mention
instances	O
.	O
References	O
:	O
#	O
li	O
Immutability	O
benefits	O
of	O
String	B-api_mention
Question	O
-	O
29922296	O
I	O
'	O
m	O
wondering	O
what	O
the	O
best	O
way	O
is	O
in	O
Java	O
8	O
to	O
work	O
with	O
all	O
the	O
values	O
of	O
an	O
enum	O
.	O
Specifically	O
when	O
you	O
need	O
to	O
get	O
all	O
the	O
values	O
and	O
add	O
it	O
to	O
somewhere	O
,	O
for	O
example	O
,	O
supposing	O
that	O
we	O
have	O
the	O
following	O
enum	O
:	O
#	O
pre	O
I	O
could	O
of	O
course	O
do	O
the	O
following	O
:	O
#	O
pre	O
But	O
,	O
I	O
could	O
also	O
add	O
the	O
following	O
method	O
to	O
the	O
enum	O
definition	O
:	O
#	O
pre	O
And	O
then	O
replace	O
the	O
for	O
from	O
above	O
with	O
:	O
Letter	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Is	O
this	O
approach	O
OK	O
or	O
does	O
it	O
have	O
some	O
fault	O
in	O
design	O
or	O
performance	O
?	O
Moreover	O
,	O
why	O
don	O
'	O
t	O
enums	O
have	O
a	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
?	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262126	O
The	O
JLS	O
specify	O
that	O
#	O
blockquote	O
Now	O
let	O
'	O
s	O
see	O
that	O
in	O
detail	O
,	O
Since	O
your	O
takeBiConsumer	O
method	O
is	O
of	O
void	O
type	O
,	O
the	O
lambda	O
receiving	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
interpret	O
it	O
as	O
a	O
block	O
like	O
#	O
pre	O
which	O
is	O
valid	O
in	O
a	O
void	O
,	O
hence	O
the	O
first	O
case	O
compile	O
.	O
However	O
,	O
in	O
the	O
case	O
where	O
the	O
lambda	O
is	O
-	O
>	O
StringLiteral	O
,	O
a	O
block	O
such	O
as	O
#	O
pre	O
is	O
not	O
valid	O
syntax	O
in	O
java	O
.	O
Therefore	O
the	O
only	O
thing	O
to	O
do	O
with	O
"	O
hi	O
"	O
is	O
to	O
try	O
and	O
return	O
it	O
.	O
#	O
pre	O
which	O
is	O
not	O
valid	O
in	O
a	O
void	O
and	O
explain	O
the	O
error	O
message	O
#	O
pre	O
For	O
a	O
better	O
understanding	O
,	O
note	O
that	O
if	O
you	O
change	O
the	O
type	O
of	O
takeBiConsumer	O
to	O
a	O
String	B-api_mention
,	O
-	O
>	O
StringLiteral	O
will	O
be	O
valid	O
as	O
it	O
will	O
simply	O
try	O
to	O
directly	O
return	O
the	O
string	O
.	O
Note	O
that	O
at	O
first	O
I	O
tought	O
the	O
error	O
was	O
caused	O
by	O
the	O
lambda	O
being	O
in	O
a	O
wrong	O
invocation	O
context	O
,	O
so	O
I	O
'	O
ll	O
share	O
this	O
possibility	O
with	O
the	O
community	O
:	O
JLS	O
15	O
.	O
27	O
#	O
blockquote	O
However	O
in	O
our	O
case	O
,	O
we	O
are	O
in	O
an	O
invocation	O
context	O
which	O
is	O
correct	O
.	O
Question	O
-	O
7569335	O
,	O
answer	O
-	O
39329245	O
As	O
others	O
have	O
pointed	O
out	O
the	O
preferred	O
way	O
is	O
to	O
use	O
:	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reverse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
if	O
you	O
want	O
to	O
implement	O
this	O
by	O
youself	O
,	O
i	O
'	O
am	O
afraid	O
that	O
the	O
rest	O
of	O
responses	O
have	O
flaws	O
.	O
The	O
reason	O
is	O
that	O
String	B-api_mention
represent	O
a	O
list	O
of	O
Unicode	O
points	O
,	O
encoded	O
in	O
a	O
char	O
[	O
]	O
array	O
according	O
to	O
the	O
variable	O
-	O
length	O
encoding	O
:	O
UTF	O
-	O
16	O
.	O
This	O
means	O
some	O
code	O
points	O
use	O
a	O
single	O
element	O
of	O
the	O
array	O
(	O
one	O
code	O
unit	O
)	O
but	O
others	O
use	O
two	O
of	O
them	O
,	O
so	O
there	O
might	O
be	O
pairs	O
of	O
characters	O
that	O
must	O
be	O
treated	O
as	O
a	O
single	O
unit	O
(	O
consecutive	O
"	O
high	O
"	O
and	O
"	O
low	O
"	O
surrogates	O
)	O
#	O
pre	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
8579702	O
If	O
you	O
just	O
invoke	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
directly	O
,	O
it	O
'	O
s	O
executed	O
on	O
the	O
calling	O
thread	O
,	O
just	O
like	O
any	O
other	O
method	O
call	O
.	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
required	O
to	O
actually	O
create	O
a	O
new	O
thread	O
so	O
that	O
the	O
runnable	O
'	O
s	O
run	O
method	O
is	O
executed	O
in	O
parallel	O
.	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673356	O
#	O
pre	O
Generally	O
speaking	O
,	O
when	O
you	O
have	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
write	O
anything	O
there	O
.	O
You	O
can	O
pass	O
this	O
output	O
stream	O
as	O
a	O
place	O
to	O
put	O
generated	O
PDF	O
to	O
your	O
generator	O
.	O
Also	O
,	O
if	O
you	O
know	O
what	O
file	O
type	O
you	O
are	O
sending	O
,	O
you	O
can	O
set	O
response	O
.	B-api_mention
setContentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
31270759	O
,	O
answer	O
-	O
31270760	O
Presented	O
below	O
is	O
the	O
full	O
code	O
of	O
the	O
Exceptional	O
class	O
.	O
It	O
has	O
a	O
quite	O
large	O
API	O
which	O
is	O
a	O
pure	O
extension	O
of	O
the	O
Optional	B-api_mention
API	O
so	O
it	O
can	O
be	O
a	O
drop	O
-	O
in	O
replacement	O
for	O
it	O
in	O
any	O
existing	O
code	O
โ	O
except	O
that	O
it	O
isn	O
'	O
t	O
a	O
subtype	O
of	O
the	O
final	O
Optional	B-api_mention
class	O
.	O
The	O
class	O
can	O
be	O
seen	O
as	O
being	O
in	O
the	O
same	O
relationship	O
with	O
the	O
Try	O
monad	O
as	O
Optional	B-api_mention
is	O
with	O
the	O
Maybe	O
monad	O
:	O
it	O
draws	O
inspiration	O
from	O
it	O
,	O
but	O
is	O
adapted	O
to	O
the	O
Java	O
idiom	O
(	O
such	O
as	O
actually	O
throwing	O
exceptions	O
,	O
even	O
from	O
non	O
-	O
terminal	O
operations	O
)	O
.	O
These	O
are	O
some	O
key	O
guidelines	O
followed	O
by	O
the	O
class	O
:	O
#	O
li	O
as	O
opposed	O
to	O
the	O
monadic	O
approach	O
,	O
doesn	O
'	O
t	O
ignore	O
Java	O
'	O
s	O
exception	O
mechanism	O
;	O
#	O
li	O
instead	O
it	O
relieves	O
the	O
impedance	O
mismatch	O
between	O
exceptions	O
and	O
higher	O
-	O
order	O
functions	O
;	O
#	O
li	O
exception	O
handling	O
not	O
statically	O
typesafe	O
(	O
due	O
to	O
sneaky	O
throwing	O
)	O
,	O
but	O
always	O
safe	O
at	O
runtime	O
(	O
never	O
swallows	O
an	O
exception	O
except	O
on	O
explicit	O
request	O
)	O
.	O
The	O
class	O
tries	O
to	O
cover	O
all	O
the	O
typical	O
ways	O
to	O
handle	O
an	O
exception	O
:	O
#	O
li	O
recover	O
with	O
some	O
handling	O
code	O
which	O
provides	O
a	O
substitute	O
value	O
;	O
#	O
li	O
flatRecover	O
which	O
,	O
analogous	O
to	O
flatMap	O
,	O
allows	O
to	O
return	O
a	O
new	O
Exceptional	O
instance	O
which	O
will	O
be	O
unwrapped	O
and	O
the	O
state	O
of	O
the	O
current	O
instance	O
suitably	O
updated	O
;	O
#	O
li	O
propagate	O
an	O
exception	O
,	O
throwing	O
it	O
from	O
the	O
Exceptional	O
expression	O
and	O
making	O
the	O
propagate	O
call	O
declare	O
this	O
exception	O
type	O
;	O
#	O
li	O
propagate	O
it	O
after	O
wrapping	O
into	O
another	O
exception	O
(	O
translate	O
it	O
)	O
;	O
#	O
li	O
handle	O
it	O
,	O
resulting	O
in	O
an	O
empty	O
Exceptional	O
;	O
#	O
li	O
as	O
a	O
special	O
case	O
of	O
handling	O
,	O
swallow	O
it	O
with	O
an	O
empty	O
handler	O
block	O
.	O
The	O
propagate	O
approach	O
allows	O
one	O
to	O
selectively	O
pick	O
which	O
checked	O
exceptions	O
he	O
wants	O
to	O
expose	O
from	O
his	O
code	O
.	O
Exceptions	O
which	O
remain	O
unhandled	O
at	O
the	O
time	O
a	O
terminal	O
operation	O
is	O
called	O
(	O
like	O
get	O
)	O
will	O
be	O
sneakily	O
thrown	O
without	O
declaration	O
.	O
This	O
is	O
often	O
considered	O
as	O
an	O
advanced	O
and	O
dangerous	O
approach	O
,	O
but	O
is	O
nevertheless	O
often	O
employed	O
as	O
a	O
way	O
to	O
somewhat	O
alleviate	O
the	O
nuisance	O
of	O
checked	O
exceptions	O
in	O
combination	O
with	O
lambda	O
shapes	O
which	O
do	O
not	O
declare	O
them	O
.	O
The	O
Exceptional	O
class	O
hopes	O
to	O
offer	O
a	O
cleaner	O
and	O
more	O
selective	O
alternative	O
to	O
sneaky	O
throw	O
.	O
#	O
pre	O
#	O
pre	O
#	O
pre	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725550	O
Think	O
of	O
it	O
like	O
this	O
:	O
the	O
List	B-api_mention
interface	O
has	O
methods	O
like	O
add	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
set	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
contract	O
is	O
that	O
once	O
you	O
added	O
an	O
element	O
at	O
position	O
X	O
you	O
will	O
find	O
it	O
there	O
unless	O
you	O
add	O
or	O
remove	O
elements	O
before	O
it	O
.	O
If	O
any	O
list	O
implementation	O
would	O
store	O
elements	O
in	O
some	O
order	O
other	O
than	O
based	O
on	O
the	O
index	O
,	O
the	O
above	O
list	O
methods	O
would	O
make	O
no	O
sense	O
.	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271460	O
The	O
"	O
$	O
1	O
"	O
is	O
not	O
"	O
useless	O
non	O
-	O
sense	O
"	O
.	O
If	O
your	O
class	O
is	O
anonymous	O
,	O
a	O
number	O
is	O
appended	O
.	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
class	O
itself	O
,	O
but	O
its	O
declaring	O
class	O
,	O
then	O
you	O
can	O
use	O
getEnclosingClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
For	O
example	O
:	O
#	O
pre	O
You	O
can	O
move	O
that	O
in	O
some	O
static	O
utility	O
method	O
.	O
But	O
note	O
that	O
this	O
is	O
not	O
the	O
current	O
class	O
name	O
.	O
The	O
anonymous	O
class	O
is	O
different	O
class	O
than	O
its	O
enclosing	O
class	O
.	O
The	O
case	O
is	O
similar	O
for	O
inner	O
classes	O
.	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
21008747	O
[	O
Disclaimer	O
this	O
is	O
a	O
deliberately	O
opinionated	O
style	O
of	O
answer	O
as	O
I	O
feel	O
a	O
more	O
"	O
don	O
'	O
t	O
do	O
this	O
at	O
home	O
kids	O
"	O
answer	O
is	O
warranted	O
]	O
The	O
sin	O
is	O
the	O
line	O
field	O
.	B-api_mention
setAccessible	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
says	O
to	O
violate	O
the	O
public	O
api	O
by	O
allowing	O
access	O
to	O
a	O
private	O
field	O
.	O
Thats	O
a	O
giant	O
security	O
hole	O
which	O
can	O
be	O
locked	O
down	O
by	O
configuring	O
a	O
security	O
manager	O
.	O
The	O
phenomenon	O
in	O
the	O
question	O
are	O
implementation	O
details	O
which	O
you	O
would	O
never	O
see	O
when	O
not	O
using	O
that	O
dangerous	O
line	O
of	O
code	O
to	O
violate	O
the	O
access	O
modifiers	O
via	O
reflection	O
.	O
Clearly	O
two	O
(	O
normally	O
)	O
immutable	O
strings	O
can	O
share	O
the	O
same	O
char	O
array	O
.	O
Whether	O
a	O
substring	O
shares	O
the	O
same	O
array	O
depends	O
on	O
whether	O
it	O
can	O
and	O
whether	O
the	O
developer	O
thought	O
to	O
share	O
it	O
.	O
Normally	O
these	O
are	O
invisible	O
implementation	O
details	O
which	O
you	O
should	O
not	O
have	O
to	O
know	O
unless	O
you	O
shoot	O
the	O
access	O
modifier	O
through	O
the	O
head	O
with	O
that	O
line	O
of	O
code	O
.	O
It	O
is	O
simply	O
not	O
a	O
good	O
idea	O
to	O
rely	O
upon	O
such	O
details	O
which	O
cannot	O
be	O
experienced	O
without	O
violating	O
the	O
access	O
modifiers	O
using	O
reflection	O
.	O
The	O
owner	O
of	O
that	O
class	O
only	O
supports	O
the	O
normal	O
public	O
API	O
and	O
is	O
free	O
to	O
make	O
implementation	O
changes	O
in	O
the	O
future	O
.	O
Having	O
said	O
all	O
that	O
the	O
line	O
of	O
code	O
is	O
really	O
very	O
useful	O
when	O
you	O
have	O
a	O
gun	O
held	O
you	O
your	O
head	O
forcing	O
you	O
to	O
do	O
such	O
dangerous	O
things	O
.	O
Using	O
that	O
back	O
door	O
is	O
usually	O
a	O
code	O
smell	O
that	O
you	O
need	O
to	O
upgrade	O
to	O
better	O
library	O
code	O
where	O
you	O
don	O
'	O
t	O
have	O
to	O
sin	O
.	O
Another	O
common	O
use	O
of	O
that	O
dangerous	O
line	O
of	O
code	O
is	O
to	O
write	O
a	O
"	O
voodoo	O
framework	O
"	O
(	O
orm	O
,	O
injection	O
container	O
,	O
.	O
.	O
.	O
)	O
.	O
Many	O
folks	O
get	O
religious	O
about	O
such	O
frameworks	O
(	O
both	O
for	O
and	O
against	O
them	O
)	O
so	O
I	O
will	O
avoid	O
inviting	O
a	O
flame	O
war	O
by	O
saying	O
nothing	O
other	O
than	O
the	O
vast	O
majority	O
of	O
programmers	O
don	O
'	O
t	O
have	O
to	O
go	O
there	O
.	O
Question	O
-	O
19235606	O
,	O
answer	O
-	O
19235857	O
Spliterator	B-api_mention
basically	O
means	O
"	O
splittable	O
Iterator	O
"	O
.	O
Single	O
thread	O
can	O
traverse	O
/	O
process	O
the	O
entire	O
Spliterator	B-api_mention
itself	O
,	O
but	O
the	O
Spliterator	B-api_mention
also	O
has	O
a	O
method	O
trySplit	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
will	O
"	O
split	O
off	O
"	O
a	O
section	O
for	O
someone	O
else	O
(	O
typically	O
,	O
another	O
thread	O
)	O
to	O
process	O
-	O
-	O
leaving	O
the	O
current	O
spliterator	O
with	O
less	O
work	O
.	O
Collector	B-api_mention
combines	O
the	O
specification	O
of	O
a	O
reduce	O
function	O
(	O
of	O
map	O
-	O
reduce	O
fame	O
)	O
,	O
with	O
an	O
initial	O
value	O
,	O
and	O
a	O
value	O
to	O
combine	O
two	O
results	O
(	O
thus	O
enabling	O
results	O
from	O
Spliterated	O
streams	O
of	O
work	O
,	O
to	O
be	O
combined	O
.	O
)	O
For	O
example	O
,	O
the	O
most	O
basic	O
Collector	B-api_mention
would	O
have	O
an	O
initial	O
vaue	O
of	O
0	O
,	O
add	O
an	O
integer	O
onto	O
an	O
existing	O
result	O
,	O
and	O
would	O
'	O
combine	O
'	O
two	O
results	O
by	O
adding	O
them	O
.	O
Thus	O
summing	O
a	O
spliterated	O
stream	O
of	O
integers	O
.	O
See	O
:	O
#	O
li	O
Spliterator	B-api_mention
.	I-api_mention
trySplit	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
Collector	B-api_mention
<	O
T	O
,	O
A	O
,	O
R	O
>	O
Question	O
-	O
18092160	O
Why	O
were	O
181783497276652981	O
and	O
8682522807148012	O
chosen	O
in	O
Random	O
.	O
java	O
?	O
Here	O
'	O
s	O
the	O
relevant	O
source	O
code	O
from	O
Java	O
SE	O
JDK	O
1	O
.	O
7	O
:	O
#	O
pre	O
So	O
,	O
invoking	O
new	O
Random	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
without	O
any	O
seed	O
parameter	O
takes	O
the	O
current	O
"	O
seed	O
uniquifier	O
"	O
and	O
XORs	O
it	O
with	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Then	O
it	O
uses	O
181783497276652981	O
to	O
create	O
another	O
seed	O
uniquifier	O
to	O
be	O
stored	O
for	O
the	O
next	O
time	O
new	O
Random	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
.	O
The	O
literals	O
181783497276652981L	O
and	O
8682522807148012L	O
are	O
not	O
placed	O
in	O
constants	O
,	O
but	O
they	O
don	O
'	O
t	O
appear	O
anywhere	O
else	O
.	O
At	O
first	O
the	O
comment	O
gives	O
me	O
an	O
easy	O
lead	O
.	O
Searching	O
online	O
for	O
that	O
article	O
yields	O
the	O
actual	O
article	O
.	O
8682522807148012	O
doesn	O
'	O
t	O
appear	O
in	O
the	O
paper	O
,	O
but	O
181783497276652981	O
does	O
appear	O
-	O
-	O
as	O
a	O
substring	O
of	O
another	O
number	O
,	O
1181783497276652981	O
,	O
which	O
is	O
181783497276652981	O
with	O
a	O
1	O
prepended	O
.	O
The	O
paper	O
claims	O
that	O
1181783497276652981	O
is	O
a	O
number	O
that	O
yields	O
good	O
"	O
merit	O
"	O
for	O
a	O
linear	O
congruential	O
generator	O
.	O
Was	O
this	O
number	O
simply	O
mis	O
-	O
copied	O
into	O
Java	O
?	O
Does	O
181783497276652981	O
have	O
an	O
acceptable	O
merit	O
?	O
And	O
why	O
was	O
8682522807148012	O
chosen	O
?	O
Searching	O
online	O
for	O
either	O
number	O
yields	O
no	O
explanation	O
,	O
only	O
this	O
page	O
that	O
also	O
notices	O
the	O
dropped	O
1	O
in	O
front	O
of	O
181783497276652981	O
.	O
Could	O
other	O
numbers	O
have	O
been	O
chosen	O
that	O
would	O
have	O
worked	O
as	O
well	O
as	O
these	O
two	O
numbers	O
?	O
Why	O
or	O
why	O
not	O
?	O
Question	O
-	O
28818506	O
I	O
'	O
ve	O
been	O
working	O
with	O
the	O
new	O
Optional	B-api_mention
type	O
in	O
Java	O
8	O
,	O
and	O
I	O
'	O
ve	O
come	O
across	O
what	O
seems	O
like	O
a	O
common	O
operation	O
that	O
isn	O
'	O
t	O
supported	O
functionally	O
:	O
an	O
"	O
orElseOptional	O
"	O
Consider	O
the	O
following	O
pattern	O
:	O
#	O
pre	O
There	O
are	O
many	O
forms	O
of	O
this	O
pattern	O
,	O
but	O
it	O
boils	O
down	O
to	O
wanting	O
an	O
"	O
orElse	O
"	O
on	O
an	O
optional	O
that	O
takes	O
a	O
function	O
producing	O
a	O
new	O
optional	O
,	O
called	O
only	O
if	O
the	O
current	O
one	O
does	O
not	O
exist	O
.	O
It	O
'	O
s	O
implementation	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
'	O
m	O
curious	O
if	O
there	O
'	O
s	O
a	O
reason	O
such	O
a	O
method	O
doesn	O
'	O
t	O
exist	O
,	O
if	O
I	O
'	O
m	O
just	O
using	O
Optional	B-api_mention
in	O
an	O
unintended	O
way	O
,	O
and	O
what	O
other	O
ways	O
people	O
have	O
come	O
up	O
with	O
to	O
deal	O
with	O
this	O
case	O
.	O
I	O
should	O
say	O
that	O
I	O
think	O
that	O
solutions	O
involving	O
custom	O
utility	O
classes	O
/	O
methods	O
aren	O
'	O
t	O
elegant	O
because	O
people	O
working	O
with	O
my	O
code	O
won	O
'	O
t	O
necessarily	O
know	O
they	O
exist	O
.	O
Also	O
,	O
if	O
anyone	O
knows	O
,	O
will	O
such	O
a	O
method	O
be	O
included	O
in	O
JDK	O
9	O
,	O
and	O
where	O
might	O
I	O
propose	O
such	O
a	O
method	O
?	O
This	O
seems	O
like	O
a	O
pretty	O
glaring	O
omission	O
to	O
the	O
API	O
to	O
me	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32182250	O
Integer	B-api_mention
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
a	I-api_mention
)	I-api_mention
can	O
return	O
false	O
But	O
you	O
have	O
to	O
be	O
really	O
evil	O
and	O
use	O
reflections	O
and	O
Multithreading	O
:	O
If	O
you	O
run	O
this	O
code	O
,	O
there	O
is	O
a	O
chance	O
that	O
a	O
racing	O
condition	O
can	O
change	O
the	O
internal	O
Value	O
of	O
myInt	O
while	O
the	O
comparision	O
takes	O
place	O
.	O
If	O
you	O
want	O
to	O
simulate	O
this	O
condition	O
,	O
just	O
set	O
a	O
breakpoint	O
inside	O
of	O
Integer	B-api_mention
.	I-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
run	O
the	O
code	O
in	O
debug	O
and	O
hit	O
continue	O
.	O
This	O
will	O
create	O
a	O
delay	O
which	O
creates	O
the	O
race	O
condition	O
artificially	O
and	O
the	O
console	O
will	O
return	O
false	O
.	O
#	O
pre	O
Question	O
-	O
27747562	O
,	O
answer	O
-	O
27747702	O
A	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
could	O
very	O
well	O
be	O
an	O
Item	O
.	O
See	O
for	O
example	O
:	O
#	O
pre	O
A	O
cast	O
tells	O
the	O
compiler	O
:	O
"	O
I	O
know	O
you	O
can	O
'	O
t	O
be	O
sure	O
that	O
this	O
is	O
a	O
object	O
of	O
type	O
Item	O
,	O
but	O
I	O
know	O
better	O
than	O
you	O
,	O
so	O
please	O
compile	O
"	O
.	O
The	O
compiler	O
will	O
only	O
refuse	O
to	O
compile	O
that	O
if	O
it	O
'	O
s	O
impossible	O
for	O
the	O
returned	O
object	O
to	O
be	O
an	O
instance	O
of	O
Item	B-api_mention
(	O
like	O
,	O
for	O
example	O
,	O
Integer	B-api_mention
can	O
'	O
t	O
ever	O
be	O
a	O
String	B-api_mention
)	O
At	O
runtime	O
,	O
the	O
type	O
of	O
the	O
actual	O
object	O
returned	O
by	O
the	O
method	O
will	O
be	O
checked	O
,	O
and	O
if	O
it	O
'	O
s	O
not	O
actually	O
an	O
object	O
of	O
type	O
Item	O
,	O
you	O
'	O
ll	O
get	O
a	O
ClassCastException	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16636899	O
I	O
feel	O
that	O
I	O
need	O
to	O
extend	O
my	O
comment	O
a	O
bit	O
.	O
.	O
.	O
About	O
paradigm	O
\	O
style	O
That	O
'	O
s	O
probably	O
the	O
most	O
notable	O
aspect	O
.	O
FP	O
became	O
popular	O
due	O
to	O
what	O
you	O
can	O
get	O
avoiding	O
side	O
-	O
effects	O
.	O
I	O
won	O
'	O
t	O
delve	O
deep	O
into	O
what	O
pros	O
\	O
cons	O
you	O
can	O
get	O
from	O
this	O
,	O
since	O
this	O
is	O
not	O
related	O
to	O
the	O
question	O
.	O
However	O
,	O
I	O
will	O
say	O
that	O
the	O
iteration	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
inspired	O
by	O
FP	O
and	O
rather	O
result	O
of	O
bringing	O
more	O
FP	O
to	O
Java	O
(	O
ironically	O
,	O
I	O
'	O
d	O
say	O
that	O
there	O
is	O
no	O
much	O
use	O
for	O
forEach	B-api_mention
in	O
pure	O
FP	O
,	O
since	O
it	O
does	O
nothing	O
except	O
introducing	O
side	O
-	O
effects	O
)	O
.	O
In	O
the	O
end	O
I	O
would	O
say	O
that	O
it	O
is	O
rather	O
a	O
matter	O
of	O
taste	O
\	O
style	O
\	O
paradigm	O
you	O
are	O
currently	O
writing	O
in	O
.	O
About	O
parallelism	O
.	O
From	O
performance	O
point	O
of	O
view	O
there	O
is	O
no	O
promised	O
notable	O
benefits	O
from	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
over	O
foreach	O
(	O
.	O
.	O
.	O
)	O
.	O
According	O
to	O
official	O
docs	O
on	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
:	O
#	O
blockquote	O
.	O
.	O
.	O
i	O
.	O
e	O
.	O
docs	O
pretty	O
much	O
clear	O
that	O
there	O
will	O
be	O
no	O
implicit	O
parallelism	O
.	O
Adding	O
one	O
would	O
be	O
LSP	O
violation	O
.	O
Now	O
,	O
there	O
are	O
"	O
parallell	O
collections	O
"	O
that	O
are	O
promised	O
in	O
Java	O
8	O
,	O
but	O
to	O
work	O
with	O
those	O
you	O
need	O
to	O
me	O
more	O
explicit	O
and	O
put	O
some	O
extra	O
care	O
to	O
use	O
them	O
(	O
see	O
mschenk74	O
'	O
s	O
answer	O
for	O
example	O
)	O
.	O
BTW	O
:	O
in	O
this	O
case	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
be	O
used	O
,	O
and	O
it	O
doesn	O
'	O
t	O
guarantee	O
that	O
actual	O
work	O
will	O
be	O
done	O
in	O
parallell	O
(	O
depends	O
on	O
underlying	O
collection	O
)	O
.	O
UPDATE	O
:	O
might	O
be	O
not	O
that	O
obvious	O
and	O
a	O
little	O
stretched	O
at	O
a	O
glance	O
but	O
there	O
is	O
another	O
facet	O
of	O
style	O
and	O
readability	O
perspective	O
.	O
First	O
of	O
all	O
-	O
plain	O
old	O
forloops	O
are	O
plain	O
and	O
old	O
.	O
Everybody	O
already	O
knows	O
them	O
.	O
Second	O
,	O
and	O
more	O
important	O
-	O
you	O
probably	O
want	O
to	O
use	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
only	O
with	O
one	O
-	O
liner	O
lambdas	O
.	O
If	O
"	O
body	O
"	O
gets	O
heavier	O
-	O
they	O
tend	O
to	O
be	O
not	O
-	O
that	O
readable	O
.	O
You	O
have	O
2	O
options	O
from	O
here	O
-	O
use	O
inner	O
classes	O
(	O
yuck	O
)	O
or	O
use	O
plain	O
old	O
forloop	O
.	O
People	O
often	O
gets	O
annoyed	O
when	O
they	O
see	O
the	O
same	O
things	O
(	O
iteratins	O
over	O
collections	O
)	O
being	O
done	O
various	O
vays	O
/	O
styles	O
in	O
the	O
same	O
codebase	O
,	O
and	O
this	O
seems	O
to	O
be	O
the	O
case	O
.	O
Again	O
,	O
this	O
might	O
or	O
might	O
not	O
be	O
an	O
issue	O
.	O
Depends	O
on	O
people	O
working	O
on	O
code	O
.	O
Question	O
-	O
19418427	O
,	O
answer	O
-	O
19418553	O
If	O
you	O
take	O
a	O
look	O
at	O
this	O
methods	O
#	O
pre	O
and	O
its	O
decompiled	O
with	O
javap	O
-	O
c	O
ClassWithTheseMethods	O
versions	O
you	O
will	O
see	O
#	O
pre	O
and	O
#	O
pre	O
So	O
if	O
Strings	O
are	O
not	O
final	O
compiler	O
will	O
have	O
to	O
use	O
StringBuilder	B-api_mention
to	O
concatenate	O
str1	O
and	O
str2	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
will	O
be	O
compiled	O
to	O
String	B-api_mention
concat	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
means	O
that	O
concat	O
will	O
be	O
created	O
at	O
runtime	O
so	O
will	O
not	O
come	O
from	O
String	B-api_mention
pool	O
.	O
Also	O
if	O
Strings	O
are	O
final	O
then	O
compiler	O
can	O
assume	O
that	O
they	O
will	O
never	O
change	O
so	O
instead	O
of	O
using	O
StringBuilder	B-api_mention
it	O
can	O
safely	O
concatenate	O
its	O
values	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
can	O
be	O
changed	O
to	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
+	O
StringLiteral	O
;	O
and	O
concatenated	O
into	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
;	O
which	O
means	O
that	O
concate	O
will	O
become	O
sting	O
literal	O
which	O
will	O
be	O
interned	O
in	O
string	O
pool	O
and	O
then	O
compared	O
with	O
same	O
string	O
literal	O
from	O
that	O
pool	O
in	O
if	O
statement	O
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31760309	O
Until	O
the	O
language	O
specification	O
mentions	O
it	O
,	O
it	O
is	O
not	O
guaranteed	O
that	O
autoboxing	O
is	O
equivalent	O
to	O
a	O
call	O
to	O
the	O
static	O
valueOf	B-api_mention
methods	O
.	O
It	O
is	O
an	O
implementation	O
aspect	O
,	O
not	O
part	O
of	O
the	O
boxing	O
conversion	O
specification	O
.	O
An	O
implementation	O
is	O
theoretically	O
free	O
to	O
use	O
another	O
mechanism	O
as	O
long	O
as	O
it	O
conforms	O
to	O
the	O
rule	O
you	O
mentioned	O
from	O
the	O
JLS	O
.	O
In	O
practice	O
,	O
there	O
are	O
many	O
Sun	O
JDK	O
bug	O
reports	O
(	O
e	O
.	O
g	O
.	O
JDK	O
-	O
4990346	O
and	O
JDK	O
-	O
6628737	O
)	O
that	O
clearly	O
imply	O
that	O
when	O
autoboxing	O
was	O
introduced	O
in	O
Java	O
5	O
,	O
the	O
intention	O
was	O
having	O
the	O
compiler	O
to	O
rely	O
on	O
valueOf	B-api_mention
as	O
stated	O
in	O
JDK	O
-	O
6628737	O
:	O
#	O
blockquote	O
But	O
that	O
'	O
s	O
only	O
for	O
javac	O
,	O
not	O
necessarily	O
all	O
compilers	O
.	O
Question	O
-	O
15621083	O
I	O
am	O
working	O
on	O
some	O
Java	O
code	O
which	O
needs	O
to	O
be	O
highly	O
optimized	O
as	O
it	O
will	O
run	O
in	O
hot	O
functions	O
that	O
are	O
invoked	O
at	O
many	O
points	O
in	O
my	O
main	O
program	O
logic	O
.	O
Part	O
of	O
this	O
code	O
involves	O
multiplying	O
double	O
variables	O
by	O
10	O
raised	O
to	O
arbitrary	O
non	O
-	O
negative	O
int	O
exponent	O
s	O
.	O
One	O
fast	O
way	O
(	O
edit	O
:	O
but	O
not	O
the	O
fastest	O
possible	O
,	O
see	O
Update	O
2	O
below	O
)	O
to	O
get	O
the	O
multiplied	O
value	O
is	O
to	O
switch	O
on	O
the	O
exponent	O
:	O
#	O
pre	O
The	O
commented	O
ellipses	O
above	O
indicate	O
that	O
the	O
case	O
int	O
constants	O
continue	O
incrementing	O
by	O
1	O
,	O
so	O
there	O
are	O
really	O
19	O
case	O
s	O
in	O
the	O
above	O
code	O
snippet	O
.	O
Since	O
I	O
wasn	O
'	O
t	O
sure	O
whether	O
I	O
would	O
actually	O
need	O
all	O
the	O
powers	O
of	O
10	O
in	O
case	O
statements	O
10	O
thru	O
18	O
,	O
I	O
ran	O
some	O
microbenchmarks	O
comparing	O
the	O
time	O
to	O
complete	O
10	O
million	O
operations	O
with	O
this	O
switch	O
statement	O
versus	O
a	O
switch	O
with	O
only	O
case	O
s	O
0	O
thru	O
9	O
(	O
with	O
the	O
exponent	O
limited	O
to	O
9	O
or	O
less	O
to	O
avoid	O
breaking	O
the	O
pared	O
-	O
down	O
switch	O
)	O
.	O
I	O
got	O
the	O
rather	O
surprising	O
(	O
to	O
me	O
,	O
at	O
least	O
!	O
)	O
result	O
that	O
the	O
longer	O
switch	O
with	O
more	O
case	O
statements	O
actually	O
ran	O
faster	O
.	O
On	O
a	O
lark	O
,	O
I	O
tried	O
adding	O
even	O
more	O
case	O
s	O
which	O
just	O
returned	O
dummy	O
values	O
,	O
and	O
found	O
that	O
I	O
could	O
get	O
the	O
switch	O
to	O
run	O
even	O
faster	O
with	O
around	O
22	O
-	O
27	O
declared	O
case	O
s	O
(	O
even	O
though	O
those	O
dummy	O
cases	O
are	O
never	O
actually	O
hit	O
while	O
the	O
code	O
is	O
running	O
)	O
.	O
(	O
Again	O
,	O
case	O
s	O
were	O
added	O
in	O
a	O
contiguous	O
fashion	O
by	O
incrementing	O
the	O
prior	O
case	O
constant	O
by	O
1	O
.	O
)	O
These	O
execution	O
time	O
differences	O
are	O
not	O
very	O
significant	O
:	O
for	O
a	O
random	O
exponent	O
between	O
0	O
and	O
10	O
,	O
the	O
dummy	O
padded	O
switch	O
statement	O
finishes	O
10	O
million	O
executions	O
in	O
1	O
.	O
49	O
secs	O
versus	O
1	O
.	O
54	O
secs	O
for	O
the	O
unpadded	O
version	O
,	O
for	O
a	O
grand	O
total	O
savings	O
of	O
5ns	O
per	O
execution	O
.	O
So	O
,	O
not	O
the	O
kind	O
of	O
thing	O
that	O
makes	O
obsessing	O
over	O
padding	O
out	O
a	O
switch	O
statement	O
worth	O
the	O
effort	O
from	O
an	O
optimization	O
standpoint	O
.	O
But	O
I	O
still	O
just	O
find	O
it	O
curious	O
and	O
counter	O
-	O
intuitive	O
that	O
a	O
switch	O
doesn	O
'	O
t	O
become	O
slower	O
(	O
or	O
perhaps	O
at	O
best	O
maintain	O
constant	O
O	O
(	O
1	O
)	O
time	O
)	O
to	O
execute	O
as	O
more	O
case	O
s	O
are	O
added	O
to	O
it	O
.	O
#	O
img	O
These	O
are	O
the	O
results	O
I	O
obtained	O
from	O
running	O
with	O
various	O
limits	O
on	O
the	O
randomly	O
-	O
generated	O
exponent	O
values	O
.	O
I	O
didn	O
'	O
t	O
include	O
the	O
results	O
all	O
the	O
way	O
down	O
to	O
1	O
for	O
the	O
exponent	O
limit	O
,	O
but	O
the	O
general	O
shape	O
of	O
the	O
curve	O
remains	O
the	O
same	O
,	O
with	O
a	O
ridge	O
around	O
the	O
12	O
-	O
17	O
case	O
mark	O
,	O
and	O
a	O
valley	O
between	O
18	O
-	O
28	O
.	O
All	O
tests	O
were	O
run	O
in	O
JUnitBenchmarks	O
using	O
shared	O
containers	O
for	O
the	O
random	O
values	O
to	O
ensure	O
identical	O
testing	O
inputs	O
.	O
I	O
also	O
ran	O
the	O
tests	O
both	O
in	O
order	O
from	O
longest	O
switch	O
statement	O
to	O
shortest	O
,	O
and	O
vice	O
-	O
versa	O
,	O
to	O
try	O
and	O
eliminate	O
the	O
possibility	O
of	O
ordering	O
-	O
related	O
test	O
problems	O
.	O
I	O
'	O
ve	O
put	O
my	O
testing	O
code	O
up	O
on	O
a	O
github	O
repo	O
if	O
anyone	O
wants	O
to	O
try	O
to	O
reproduce	O
these	O
results	O
.	O
So	O
,	O
what	O
'	O
s	O
going	O
on	O
here	O
?	O
Some	O
vagaries	O
of	O
my	O
architecture	O
or	O
micro	O
-	O
benchmark	O
construction	O
?	O
Or	O
is	O
the	O
Java	O
switch	O
really	O
a	O
little	O
faster	O
to	O
execute	O
in	O
the	O
18	O
to	O
28	O
case	O
range	O
than	O
it	O
is	O
from	O
11	O
up	O
to	O
17	O
?	O
github	O
test	O
repo	O
"	O
switch	O
-	O
experiment	O
"	O
UPDATE	O
:	O
I	O
cleaned	O
up	O
the	O
benchmarking	O
library	O
quite	O
a	O
bit	O
and	O
added	O
a	O
text	O
file	O
in	O
/	O
results	O
with	O
some	O
output	O
across	O
a	O
wider	O
range	O
of	O
possible	O
exponent	O
values	O
.	O
I	O
also	O
added	O
an	O
option	O
in	O
the	O
testing	O
code	O
not	O
to	O
throw	O
an	O
Exception	B-api_mention
from	O
default	O
,	O
but	O
this	O
doesn	O
'	O
t	O
appear	O
to	O
affect	O
the	O
results	O
.	O
UPDATE	O
2	O
:	O
Found	O
some	O
pretty	O
good	O
discussion	O
of	O
this	O
issue	O
from	O
back	O
in	O
2009	O
on	O
the	O
xkcd	O
forum	O
here	O
:	O
#	O
a	O
.	O
The	O
OP	O
'	O
s	O
discussion	O
of	O
using	O
Array	B-api_mention
.	I-api_mention
binarySearch	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gave	O
me	O
the	O
idea	O
for	O
a	O
simple	O
array	O
-	O
based	O
implementation	O
of	O
the	O
exponentiation	O
pattern	O
above	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
the	O
binary	O
search	O
since	O
I	O
know	O
what	O
the	O
entries	O
in	O
the	O
array	O
are	O
.	O
It	O
appears	O
to	O
run	O
about	O
3	O
times	O
faster	O
than	O
using	O
switch	O
,	O
obviously	O
at	O
the	O
expense	O
of	O
some	O
of	O
the	O
control	O
flow	O
that	O
switch	O
affords	O
.	O
That	O
code	O
has	O
been	O
added	O
to	O
the	O
github	O
repo	O
also	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923211	O
This	O
advice	O
is	O
a	O
variant	O
of	O
the	O
"	O
be	O
as	O
unspecific	O
as	O
possible	O
regarding	O
inputs	O
and	O
as	O
specific	O
as	O
possible	O
regarding	O
outputs	O
"	O
rule	O
of	O
thumb	O
.	O
Usually	O
if	O
you	O
have	O
a	O
method	O
that	O
takes	O
a	O
plain	O
non	O
-	O
null	O
value	O
,	O
you	O
can	O
map	O
it	O
over	O
the	O
Optional	B-api_mention
,	O
so	O
the	O
plain	O
version	O
is	O
strictly	O
more	O
unspecific	O
regarding	O
inputs	O
.	O
However	O
there	O
are	O
a	O
bunch	O
of	O
possible	O
reasons	O
why	O
you	O
would	O
want	O
to	O
require	O
an	O
Optional	B-api_mention
argument	O
nonetheless	O
:	O
#	O
li	O
you	O
want	O
your	O
function	O
to	O
be	O
used	O
in	O
conjunction	O
with	O
another	O
API	O
that	O
returns	O
an	O
Optional	B-api_mention
#	O
li	O
Your	O
function	O
should	O
return	O
something	O
other	O
than	O
an	O
empty	O
Optional	B-api_mention
if	O
the	O
given	O
value	O
is	O
empty	O
#	O
li	O
You	O
think	O
Optional	B-api_mention
is	O
so	O
awesome	O
that	O
whoever	O
uses	O
your	O
API	O
should	O
be	O
required	O
to	O
learn	O
about	O
it	O
;	O
-	O
)	O
