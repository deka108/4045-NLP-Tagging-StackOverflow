Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173040	O
Since	O
there	O
are	O
only	O
4	O
elements	O
that	O
pass	O
the	O
filter	O
,	O
limit	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
never	O
reaches	O
10	O
elements	O
,	O
so	O
the	O
Stream	B-api_mention
pipeline	O
keeps	O
generating	O
new	O
elements	O
and	O
feeding	O
them	O
to	O
the	O
filter	O
,	O
trying	O
to	O
reach	O
10	O
elements	O
that	O
pass	O
the	O
filter	O
,	O
but	O
since	O
only	O
the	O
first	O
4	O
elements	O
pass	O
the	O
filter	O
,	O
the	O
processing	O
never	O
ends	O
(	O
at	O
least	O
until	O
i	O
overflows	O
)	O
.	O
The	O
Stream	B-api_mention
pipeline	O
is	O
not	O
smart	O
enough	O
to	O
know	O
that	O
no	O
more	O
elements	O
can	O
pass	O
the	O
filter	O
,	O
so	O
it	O
keeps	O
processing	O
new	O
elements	O
.	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667354	O
Enum	O
is	O
just	O
a	O
little	O
bit	O
special	O
class	O
.	O
Enums	O
can	O
store	O
additional	O
fields	O
,	O
implement	O
methods	O
etc	O
.	O
For	O
example	O
#	O
pre	O
Now	O
you	O
can	O
say	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
see	O
output	O
:	O
a	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908402	O
Although	O
there	O
is	O
no	O
explicit	O
guarantee	O
of	O
this	O
,	O
the	O
end	O
result	O
is	O
bound	O
to	O
be	O
such	O
that	O
the	O
comparison	O
always	O
succeeds	O
for	O
enum	O
constants	O
with	O
identical	O
names	O
:	O
#	O
pre	O
The	O
reason	O
for	O
this	O
is	O
that	O
Java	O
compiler	O
constructs	O
subclasses	O
of	O
Enum	B-api_mention
in	O
such	O
a	O
way	O
that	O
they	O
end	O
up	O
calling	O
Enum	B-api_mention
'	O
s	O
sole	O
protected	O
constructor	O
,	O
passing	O
it	O
the	O
name	O
of	O
enum	O
value	O
:	O
protected	O
Enum	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
name	O
is	O
embedded	O
into	O
the	O
generated	O
code	O
in	O
the	O
form	O
of	O
a	O
string	O
literal	O
.	O
According	O
to	O
String	B-api_mention
documentation	O
,	O
#	O
blockquote	O
This	O
amounts	O
to	O
an	O
implicit	O
guarantee	O
of	O
your	O
expression	O
succeeding	O
when	O
names	O
of	O
enum	O
constants	O
are	O
identical	O
.	O
However	O
,	O
I	O
would	O
not	O
rely	O
on	O
this	O
behavior	O
,	O
and	O
use	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
,	O
because	O
anyone	O
reading	O
my	O
code	O
would	O
be	O
scratching	O
his	O
head	O
,	O
thinking	O
that	O
I	O
made	O
a	O
mistake	O
.	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
32362691	O
For	O
completeness	O
,	O
using	O
the	O
Guava	O
library	O
,	O
you	O
'	O
d	O
do	O
:	O
Splitter	B-api_mention
.	I-api_mention
on	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Another	O
example	O
:	O
#	O
pre	O
Splitter	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
Iterable	O
,	O
so	O
if	O
you	O
need	O
a	O
List	B-api_mention
,	O
wrap	O
it	O
in	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
above	O
.	O
Otherwise	O
just	O
go	O
with	O
the	O
Iterable	B-api_mention
,	O
for	O
example	O
:	O
#	O
pre	O
Note	O
how	O
trimResults	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
handles	O
all	O
your	O
trimming	O
needs	O
without	O
having	O
to	O
tweak	O
regexes	O
for	O
corner	O
cases	O
,	O
as	O
with	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
your	O
project	O
uses	O
Guava	O
already	O
,	O
this	O
should	O
be	O
your	O
preferred	O
solution	O
.	O
See	O
Splitter	B-api_mention
documentation	O
in	O
Guava	O
User	O
Guide	O
or	O
the	O
javadocs	O
for	O
more	O
configuration	O
options	O
.	O
Question	O
-	O
10977992	O
,	O
answer	O
-	O
17939167	O
There	O
are	O
two	O
differences	O
:	O
#	O
li	O
We	O
can	O
use	O
Iterator	B-api_mention
to	O
traverse	O
Set	B-api_mention
and	O
List	B-api_mention
and	O
also	O
Map	B-api_mention
type	O
of	O
Objects	B-api_mention
.	O
While	O
a	O
ListIterator	B-api_mention
can	O
be	O
used	O
to	O
traverse	O
for	O
List	B-api_mention
-	O
type	O
Objects	B-api_mention
,	O
but	O
not	O
for	O
Set	B-api_mention
-	O
type	O
of	O
Objects	B-api_mention
.	O
That	O
is	O
,	O
we	O
can	O
get	O
a	O
Iterator	O
object	O
by	O
using	O
Set	B-api_mention
and	O
List	B-api_mention
,	O
see	O
here	O
:	O
By	O
using	O
Iterator	O
we	O
can	O
retrieve	O
the	O
elements	O
from	O
Collection	B-api_mention
Object	O
in	O
forward	O
direction	O
only	O
.	O
Methods	O
in	O
Iterator	O
:	O
#	O
li	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
remove	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
#	O
li	O
But	O
we	O
get	O
ListIterator	B-api_mention
object	O
only	O
from	O
the	O
List	B-api_mention
interface	O
,	O
see	O
here	O
:	O
where	O
as	O
a	O
ListIterator	B-api_mention
allows	O
you	O
to	O
traverse	O
in	O
either	O
directions	O
(	O
Both	O
forward	O
and	O
backward	O
)	O
.	O
So	O
it	O
has	O
two	O
more	O
methods	O
like	O
hasPrevious	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
previous	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
other	O
than	O
those	O
of	O
Iterator	B-api_mention
.	O
Also	O
,	O
we	O
can	O
get	O
indexes	O
of	O
the	O
next	O
or	O
previous	O
elements	O
(	O
using	O
nextIndex	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
previousIndex	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
respectively	O
)	O
Methods	O
in	O
ListIterator	B-api_mention
:	O
#	O
li	O
hasNext	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
next	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
previous	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
hasPrevious	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
remove	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
nextIndex	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
previousIndex	B-api_mention
(	I-api_mention
)	I-api_mention
ListIterator	I-api_mention
listiterator	O
=	O
List	B-api_mention
.	I-api_mention
listIterator	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
i	O
.	O
e	O
.	O
,	O
we	O
can	O
'	O
t	O
get	O
ListIterator	B-api_mention
object	O
from	O
Set	B-api_mention
interface	O
.	O
Question	O
-	O
9749746	O
,	O
answer	O
-	O
9749864	O
You	O
are	O
specifically	O
asking	O
about	O
how	O
they	O
internally	O
work	O
,	O
so	O
here	O
you	O
are	O
:	O
No	O
synchronization	O
#	O
pre	O
It	O
basically	O
reads	O
value	O
from	O
memory	O
,	O
increments	O
it	O
and	O
puts	O
back	O
to	O
memory	O
.	O
This	O
works	O
in	O
single	O
thread	O
but	O
nowadays	O
,	O
in	O
the	O
era	O
of	O
multi	O
-	O
core	O
,	O
multi	O
-	O
CPU	O
,	O
multi	O
-	O
level	O
caches	O
it	O
won	O
'	O
t	O
work	O
correctly	O
.	O
First	O
of	O
all	O
it	O
introduces	O
race	O
condition	O
(	O
several	O
threads	O
can	O
read	O
the	O
value	O
at	O
the	O
same	O
time	O
)	O
,	O
but	O
also	O
visibility	O
problems	O
.	O
The	O
value	O
might	O
only	O
be	O
stored	O
in	O
"	O
local	O
"	O
CPU	O
memory	O
(	O
some	O
cache	O
)	O
and	O
not	O
be	O
visible	O
for	O
other	O
CPUs	O
/	O
cores	O
(	O
and	O
thus	O
-	O
threads	O
)	O
.	O
This	O
is	O
why	O
many	O
refer	O
to	O
local	O
copy	O
of	O
a	O
variable	O
in	O
a	O
thread	O
.	O
It	O
is	O
very	O
unsafe	O
.	O
Consider	O
this	O
popular	O
but	O
broken	O
thread	O
-	O
stopping	O
code	O
:	O
#	O
pre	O
Add	O
volatile	O
to	O
stopped	O
variable	O
and	O
it	O
works	O
fine	O
-	O
if	O
any	O
other	O
thread	O
modifies	O
stopped	O
variable	O
via	O
pleaseStop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
that	O
change	O
immediately	O
in	O
working	O
thread	O
'	O
s	O
while	O
(	O
args	O
)	O
loop	O
.	O
BTW	O
this	O
is	O
not	O
a	O
good	O
way	O
to	O
interrupt	O
a	O
thread	O
either	O
,	O
see	O
:	O
How	O
to	O
stop	O
a	O
thread	O
that	O
is	O
running	O
forever	O
without	O
any	O
use	O
and	O
Stopping	O
a	O
specific	O
java	O
thread	O
.	O
AtomicInteger	B-api_mention
#	O
pre	O
The	O
AtomicInteger	B-api_mention
class	O
uses	O
CAS	O
(	O
compare	O
-	O
and	O
-	O
swap	O
)	O
low	O
-	O
level	O
CPU	O
operations	O
(	O
no	O
synchronization	O
needed	O
!	O
)	O
They	O
allow	O
you	O
to	O
modify	O
a	O
particular	O
variable	O
only	O
if	O
the	O
present	O
value	O
is	O
equal	O
to	O
something	O
else	O
(	O
and	O
is	O
returned	O
successfully	O
)	O
.	O
So	O
when	O
you	O
execute	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
actually	O
runs	O
in	O
a	O
loop	O
(	O
simplified	O
real	O
implementation	O
)	O
:	O
#	O
pre	O
So	O
basically	O
:	O
read	O
;	O
try	O
to	O
store	O
incremented	O
value	O
;	O
if	O
not	O
successful	O
(	O
the	O
value	O
is	O
no	O
longer	O
equal	O
to	O
current	O
)	O
,	O
read	O
and	O
try	O
again	O
.	O
The	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
implemented	O
in	O
native	O
code	O
(	O
assembly	O
)	O
.	O
volatile	O
without	O
synchronization	O
#	O
pre	O
This	O
code	O
is	O
not	O
correct	O
.	O
It	O
fixes	O
the	O
visibility	O
issue	O
(	O
volatile	O
makes	O
sure	O
other	O
threads	O
can	O
see	O
change	O
made	O
to	O
counter	O
)	O
but	O
still	O
has	O
a	O
race	O
condition	O
.	O
This	O
has	O
been	O
explained	O
multiple	O
times	O
:	O
pre	O
/	O
post	O
-	O
incrementation	O
is	O
not	O
atomic	O
.	O
The	O
only	O
side	O
effect	O
of	O
volatile	O
is	O
"	O
flushing	O
"	O
caches	O
so	O
that	O
all	O
other	O
parties	O
see	O
the	O
freshest	O
version	O
of	O
the	O
data	O
.	O
This	O
is	O
too	O
strict	O
in	O
most	O
situations	O
;	O
that	O
is	O
why	O
volatile	O
is	O
not	O
default	O
.	O
volatile	O
without	O
synchronization	O
(	O
2	O
)	O
#	O
pre	O
The	O
same	O
problem	O
as	O
above	O
,	O
but	O
even	O
worse	O
because	O
i	O
is	O
not	O
private	O
.	O
The	O
race	O
condition	O
is	O
still	O
present	O
.	O
Why	O
is	O
it	O
a	O
problem	O
?	O
If	O
,	O
say	O
,	O
two	O
threads	O
run	O
this	O
code	O
simultaneously	O
,	O
the	O
output	O
might	O
be	O
+	O
5	O
or	O
+	O
10	O
.	O
However	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
the	O
change	O
.	O
Multiple	O
independent	O
synchronized	O
#	O
pre	O
Surprise	O
,	O
this	O
code	O
is	O
incorrect	O
as	O
well	O
.	O
In	O
fact	O
,	O
it	O
is	O
completely	O
wrong	O
.	O
First	O
of	O
all	O
you	O
are	O
synchronizing	O
on	O
i	O
,	O
which	O
is	O
about	O
to	O
be	O
changed	O
(	O
moreover	O
,	O
i	O
is	O
a	O
primitive	O
,	O
so	O
I	O
guess	O
you	O
are	O
synchronizing	O
on	O
a	O
temporary	O
Integer	O
created	O
via	O
autoboxing	O
.	O
.	O
.	O
)	O
Completely	O
flawed	O
.	O
You	O
could	O
also	O
write	O
:	O
#	O
pre	O
No	O
two	O
threads	O
can	O
enter	O
the	O
same	O
synchronized	O
block	O
with	O
the	O
same	O
lock	O
.	O
In	O
this	O
case	O
(	O
and	O
similarly	O
in	O
your	O
code	O
)	O
the	O
lock	O
object	O
changes	O
upon	O
every	O
execution	O
,	O
so	O
synchronized	O
effectively	O
has	O
no	O
effect	O
.	O
Even	O
if	O
you	O
have	O
used	O
a	O
final	O
variable	O
(	O
or	O
this	O
)	O
for	O
synchronization	O
,	O
the	O
code	O
is	O
still	O
incorrect	O
.	O
Two	O
threads	O
can	O
first	O
read	O
i	O
to	O
temp	O
synchronously	O
(	O
having	O
the	O
same	O
value	O
locally	O
in	O
temp	O
)	O
,	O
then	O
the	O
first	O
assigns	O
a	O
new	O
value	O
to	O
i	O
(	O
say	O
,	O
from	O
1	O
to	O
6	O
)	O
and	O
the	O
other	O
one	O
does	O
the	O
same	O
thing	O
(	O
from	O
1	O
to	O
6	O
)	O
.	O
The	O
synchronization	O
must	O
span	O
from	O
reading	O
to	O
assigning	O
a	O
value	O
.	O
Your	O
first	O
synchronization	O
has	O
no	O
effect	O
(	O
reading	O
an	O
int	O
is	O
atomic	O
)	O
and	O
the	O
second	O
as	O
well	O
.	O
In	O
my	O
opinion	O
,	O
these	O
are	O
the	O
correct	O
forms	O
:	O
#	O
pre	O
Question	O
-	O
32693704	O
I	O
noticed	O
something	O
strange	O
in	O
the	O
implementation	O
of	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
how	O
it	O
looked	O
in	O
OpenJDK	O
7u40	O
:	O
#	O
pre	O
And	O
this	O
is	O
how	O
it	O
looks	O
as	O
of	O
OpenJDK	O
8u40	O
:	O
#	O
pre	O
I	O
understand	O
that	O
now	O
the	O
table	O
can	O
be	O
null	O
for	O
empty	O
an	O
map	O
,	O
thus	O
the	O
additional	O
check	O
and	O
caching	O
in	O
a	O
local	O
variable	O
is	O
required	O
.	O
But	O
why	O
was	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
replaced	O
with	O
a	O
for	O
-	O
loop	O
?	O
It	O
seems	O
that	O
the	O
change	O
was	O
introduced	O
in	O
this	O
commit	O
.	O
Unfortunately	O
I	O
found	O
no	O
explanation	O
for	O
why	O
a	O
plain	O
for	O
loop	O
might	O
be	O
better	O
than	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Is	O
it	O
faster	O
?	O
Or	O
safer	O
?	O
Question	O
-	O
27845223	O
I	O
'	O
m	O
looking	O
at	O
a	O
piece	O
of	O
Java	O
code	O
right	O
now	O
,	O
and	O
it	O
takes	O
a	O
path	O
as	O
a	O
String	B-api_mention
and	O
gets	O
its	O
URL	O
using	O
URL	B-api_mention
resource	O
=	O
ClassLoader	B-api_mention
.	I-api_mention
getSystemClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
then	O
calls	O
String	B-api_mention
path	O
=	O
resource	O
.	B-api_mention
getPath	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
finally	O
executes	O
new	O
File	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Oh	O
,	O
and	O
there	O
are	O
also	O
calls	O
to	O
URL	B-api_mention
url	O
=	O
resource	O
.	B-api_mention
toURI	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
String	B-api_mention
file	O
=	O
resource	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
'	O
m	O
totally	O
confused	O
right	O
now	O
-	O
mostly	O
because	O
of	O
the	O
terminology	O
,	O
I	O
guess	O
.	O
Can	O
someone	O
please	O
walk	O
me	O
through	O
the	O
differences	O
,	O
or	O
provide	O
a	O
few	O
links	O
to	O
Dummy	O
-	O
proof	O
material	O
?	O
Especially	O
URI	B-api_mention
to	O
URL	B-api_mention
and	O
Resource	B-api_mention
to	O
File	B-api_mention
?	O
To	O
me	O
,	O
it	O
feels	O
like	O
they	O
should	O
be	O
the	O
same	O
thing	O
,	O
respectively	O
.	O
.	O
.	O
The	O
difference	O
between	O
getFile	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getPath	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
explained	O
here	O
:	O
What	O
'	O
s	O
the	O
difference	O
between	O
url	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
getpath	B-api_mention
(	I-api_mention
)	I-api_mention
?	O
(	O
Interestingly	O
they	O
both	O
seem	O
to	O
return	O
Strings	O
,	O
which	O
probably	O
adds	O
a	O
whole	O
lot	O
to	O
my	O
state	O
of	O
mind	O
.	O
.	O
.	O
)	O
Now	O
,	O
if	O
I	O
have	O
a	O
locator	O
that	O
references	O
a	O
class	O
or	O
package	O
in	O
a	O
jar	O
file	O
,	O
will	O
those	O
two	O
(	O
i	O
.	O
e	O
.	O
path	O
an	O
file	O
strings	O
)	O
differ	O
?	O
resource	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
give	O
you	O
jar	O
:	O
file	O
:	O
/	O
C	O
:	O
/	O
path	O
/	O
to	O
/	O
my	O
.	O
jar	O
!	O
/	O
com	O
/	O
example	O
/	O
,	O
after	O
all	O
(	O
note	O
the	O
exclamation	O
mark	O
)	O
.	O
Is	O
the	O
difference	O
between	O
URI	B-api_mention
and	O
URL	B-api_mention
in	O
Java	O
that	O
the	O
former	O
doesn	O
'	O
t	O
encode	O
spaces	O
?	O
Cf	O
.	O
Files	O
,	O
URIs	O
,	O
and	O
URLs	O
conflicting	O
in	O
Java	O
(	O
This	O
answer	O
explains	O
the	O
general	O
,	O
conceptual	O
difference	O
between	O
the	O
two	O
terms	O
fairly	O
well	O
:	O
URIs	O
identify	O
and	O
URLs	O
locate	O
;	O
)	O
Lastly	O
-	O
and	O
most	O
importantly	O
-	O
why	O
do	O
I	O
need	O
File	B-api_mention
object	O
;	O
why	O
isn	O
'	O
t	O
a	O
Resource	B-api_mention
(	O
URL	B-api_mention
)	O
enough	O
?	O
(	O
And	O
is	O
there	O
a	O
Resource	B-api_mention
object	O
?	O
)	O
Sorry	O
if	O
this	O
question	O
is	O
a	O
bit	O
unorganized	O
;	O
it	O
just	O
reflects	O
the	O
confusion	O
I	O
have	O
.	O
.	O
.	O
:	O
)	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
10786112	O
URLEncoder	B-api_mention
should	O
be	O
the	O
way	O
to	O
go	O
.	O
You	O
only	O
need	O
to	O
keep	O
in	O
mind	O
to	O
encode	O
only	O
the	O
individual	O
query	O
string	O
parameter	O
name	O
and	O
/	O
or	O
value	O
,	O
not	O
the	O
entire	O
URL	O
,	O
for	O
sure	O
not	O
the	O
query	O
string	O
parameter	O
separator	O
character	O
&	O
nor	O
the	O
parameter	O
name	O
-	O
value	O
separator	O
character	O
=	O
.	O
#	O
pre	O
Note	O
that	O
spaces	O
in	O
query	O
parameters	O
are	O
represented	O
by	O
+	O
,	O
not	O
%	O
20	O
,	O
which	O
is	O
legitimately	O
valid	O
.	O
The	O
%	O
20	O
is	O
usually	O
to	O
be	O
used	O
to	O
represent	O
spaces	O
in	O
URI	O
itself	O
(	O
the	O
part	O
before	O
the	O
URI	O
-	O
query	O
string	O
separator	O
character	O
?	O
)	O
,	O
not	O
in	O
query	O
string	O
(	O
the	O
part	O
after	O
?	O
)	O
.	O
Also	O
note	O
that	O
there	O
are	O
two	O
encode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
.	O
One	O
without	O
charset	O
argument	O
and	O
another	O
with	O
.	O
The	O
one	O
without	O
charset	O
argument	O
is	O
deprecated	O
.	O
Never	O
use	O
it	O
and	O
always	O
specify	O
the	O
charset	O
argument	O
.	O
The	O
javadoc	O
even	O
explicitly	O
recommends	O
to	O
use	O
the	O
UTF	O
-	O
8	O
encoding	O
,	O
as	O
mandated	O
by	O
RFC3986	O
and	O
W3C	O
.	O
#	O
blockquote	O
See	O
also	O
:	O
#	O
li	O
What	O
every	O
web	O
developer	O
must	O
know	O
about	O
URL	O
encoding	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777292	O
The	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
arrays	O
is	O
inherited	O
from	O
Object	B-api_mention
,	O
so	O
it	O
does	O
not	O
look	O
at	O
the	O
contents	O
of	O
the	O
arrrays	O
,	O
it	O
only	O
considers	O
each	O
array	O
equal	O
to	O
itself	O
.	O
The	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
do	O
compare	O
the	O
arrays	O
'	O
contents	O
.	O
There	O
'	O
s	O
overloads	O
for	O
all	O
primitive	O
types	O
,	O
and	O
the	O
one	O
for	O
objects	O
uses	O
the	O
objects	O
'	O
own	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29500496	O
First	O
of	O
all	O
,	O
the	O
cast	O
in	O
that	O
line	O
(	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
are	O
absobuletly	O
needed	O
.	O
Removing	O
them	O
will	O
result	O
in	O
a	O
compilation	O
error	O
:	O
#	O
pre	O
Now	O
to	O
answer	O
your	O
question	O
What	O
is	O
this	O
line	O
checking	O
?	O
It	O
simply	O
verify	O
if	O
the	O
given	O
array	O
is	O
of	O
object	O
type	O
,	O
which	O
is	O
part	O
of	O
the	O
answer	O
for	O
your	O
other	O
question	O
Why	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
not	O
good	O
enough	O
for	O
both	O
cases	O
?	O
In	O
the	O
first	O
case	O
,	O
we	O
already	O
know	O
that	O
the	O
array	O
is	O
of	O
Object	B-api_mention
type	O
so	O
there	O
is	O
no	O
point	O
in	O
calling	O
the	O
newInstance	O
method	O
to	O
retrieve	O
the	O
correct	O
type	O
,	O
this	O
would	O
only	O
result	O
in	O
performance	O
loss	O
.	O
As	O
for	O
your	O
final	O
example	O
,	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
That	O
it	O
does	O
compile	O
,	O
it	O
is	O
true	O
.	O
Because	O
the	O
given	O
arguments	O
to	O
the	O
method	O
are	O
all	O
valids	O
.	O
It	O
will	O
certainly	O
fail	O
at	O
runtime	O
;	O
what	O
would	O
be	O
the	O
expected	O
output	O
of	O
converting	O
"	O
a	O
"	O
to	O
Integer	B-api_mention
type	O
?	O
Now	O
,	O
when	O
to	O
use	O
copyOf	B-api_mention
?	O
When	O
you	O
already	O
know	O
the	O
both	O
types	O
,	O
and	O
already	O
know	O
that	O
they	O
are	O
valid	O
together	O
.	O
It	O
main	O
usage	O
is	O
to	O
return	O
a	O
copy	O
but	O
truncated	O
or	O
padded	O
with	O
[	O
null	O
/	O
default	O
values	O
]	O
to	O
the	O
original	O
array	O
.	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32357149	O
Disclaimer	O
:	O
I	O
am	O
not	O
a	O
JDK	O
author	O
.	O
I	O
agree	O
that	O
it	O
'	O
s	O
correct	O
to	O
write	O
your	O
own	O
code	O
to	O
interfaces	O
,	O
but	O
if	O
you	O
'	O
re	O
going	O
return	O
a	O
mutable	O
collection	O
to	O
a	O
third	O
party	O
,	O
it	O
'	O
s	O
important	O
to	O
let	O
the	O
third	O
party	O
know	O
what	O
sort	O
of	O
List	B-api_mention
they	O
'	O
re	O
getting	O
back	O
.	O
LinkedList	B-api_mention
and	O
ArrayList	B-api_mention
are	O
very	O
different	O
,	O
performance	O
wise	O
,	O
for	O
various	O
operations	O
.	O
For	O
example	O
,	O
removing	O
the	O
first	O
element	O
of	O
an	O
ArrayList	B-api_mention
is	O
O	O
(	O
args	O
)	O
,	O
but	O
removing	O
the	O
first	O
element	O
of	O
a	O
LinkedList	B-api_mention
is	O
O	O
(	O
args	O
)	O
.	O
By	O
fully	O
specifying	O
the	O
return	O
type	O
,	O
the	O
JDK	O
authors	O
are	O
communicating	O
extra	O
information	O
,	O
in	O
unambiguous	O
code	O
,	O
about	O
what	O
sort	O
of	O
object	O
they	O
'	O
re	O
giving	O
back	O
to	O
you	O
,	O
so	O
you	O
can	O
write	O
your	O
code	O
to	O
use	O
this	O
method	O
properly	O
.	O
If	O
you	O
really	O
need	O
a	O
LinkedList	B-api_mention
,	O
you	O
know	O
that	O
you	O
have	O
to	O
specify	O
one	O
here	O
.	O
Finally	O
,	O
the	O
main	O
reason	O
to	O
code	O
to	O
an	O
interface	O
over	O
an	O
implementation	O
is	O
if	O
you	O
think	O
that	O
the	O
implementation	O
will	O
change	O
.	O
The	O
JDK	O
authors	O
probably	O
figure	O
they	O
are	O
never	O
going	O
to	O
change	O
this	O
method	O
;	O
it	O
'	O
s	O
never	O
going	O
to	O
return	O
a	O
LinkedList	B-api_mention
or	O
a	O
Collections	B-api_mention
.	I-api_mention
UnmodifiableList	I-api_mention
.	O
However	O
,	O
in	O
most	O
cases	O
,	O
you	O
would	O
probably	O
still	O
do	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
25575077	O
You	O
could	O
override	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
each	O
enum	O
value	O
.	O
Example	O
:	O
#	O
pre	O
Usage	O
:	O
#	O
pre	O
Question	O
-	O
13195797	O
,	O
answer	O
-	O
13195890	O
FileUtils	B-api_mention
.	I-api_mention
cleanDirectory	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
There	O
is	O
this	O
method	O
available	O
in	O
the	O
same	O
file	O
.	O
This	O
will	O
also	O
recursively	O
deletes	O
all	O
sub	O
-	O
folders	O
and	O
files	O
under	O
them	O
.	O
Docs	O
:	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
commons	I-api_mention
.	I-api_mention
io	I-api_mention
.	I-api_mention
FileUtils	I-api_mention
.	I-api_mention
cleanDirectory	I-api_mention
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056878	O
We	O
can	O
take	O
a	O
look	O
into	O
the	O
source	O
code	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
regex	I-api_mention
.	I-api_mention
Pattern	I-api_mention
which	O
is	O
behind	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
.	O
Way	O
down	O
the	O
rabbit	O
hole	O
the	O
method	O
public	O
String	B-api_mention
[	O
]	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
invoked	O
.	O
Input	O
StringLiteral	O
For	O
input	O
StringLiteral	O
this	O
method	O
is	O
called	O
as	O
String	B-api_mention
[	O
]	O
parts	O
=	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
intersting	O
part	O
of	O
this	O
method	O
is	O
:	O
#	O
pre	O
And	O
that	O
is	O
what	O
happens	O
:	O
new	O
String	B-api_mention
[	O
]	O
{	O
input	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
)	I-api_mention
}	O
is	O
returned	O
.	O
Input	O
StringLiteral	O
For	O
input	O
StringLiteral	O
the	O
intersting	O
part	O
is	O
#	O
pre	O
Here	O
resultSize	O
=	O
=	O
0	O
and	O
limit	O
=	O
=	O
0	O
so	O
new	O
String	B-api_mention
[	O
0	O
]	O
is	O
returned	O
.	O
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375818	O
This	O
isn	O
'	O
t	O
strictly	O
an	O
answer	O
to	O
your	O
question	O
,	O
but	O
if	O
behind	O
your	O
question	O
is	O
a	O
wish	O
to	O
have	O
mutable	O
strings	O
that	O
you	O
can	O
manipulate	O
,	O
you	O
should	O
check	O
out	O
the	O
StringBuilder	B-api_mention
class	O
,	O
which	O
implements	O
many	O
of	O
the	O
exact	O
same	O
methods	O
that	O
String	B-api_mention
has	O
but	O
also	O
adds	O
methods	O
to	O
change	O
the	O
current	O
contents	O
.	O
Once	O
you	O
'	O
ve	O
built	O
your	O
string	O
in	O
such	O
a	O
way	O
that	O
you	O
'	O
re	O
content	O
with	O
it	O
,	O
you	O
simply	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
it	O
in	O
order	O
to	O
convert	O
it	O
to	O
an	O
ordinary	O
String	B-api_mention
that	O
you	O
can	O
pass	O
to	O
library	O
routines	O
and	O
other	O
functions	O
that	O
only	O
take	O
String	B-api_mention
s	O
.	O
Also	O
,	O
both	O
StringBuilder	B-api_mention
and	O
String	B-api_mention
implements	O
the	O
CharSequence	B-api_mention
interface	O
,	O
so	O
if	O
you	O
want	O
to	O
write	O
functions	O
in	O
your	O
own	O
code	O
that	O
can	O
use	O
both	O
mutable	O
and	O
immutable	O
strings	O
,	O
you	O
can	O
declare	O
them	O
to	O
take	O
any	O
CharSequence	B-api_mention
object	O
.	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877161	O
Integer	B-api_mention
objects	O
caches	O
between	O
-	O
128	O
and	O
127	O
of	O
256	O
Integer	B-api_mention
You	O
should	O
not	O
compare	O
object	O
references	O
with	O
=	O
=	O
or	O
!	O
=	O
.	O
You	O
should	O
use	O
.	B-api_mention
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
instead	O
,	O
or	O
better	O
-	O
use	O
the	O
primitive	O
int	O
rather	O
than	O
Integer	B-api_mention
.	I-api_mention
parseInt	B-api_mention
:	O
Parses	O
the	O
string	O
argument	O
as	O
a	O
signed	O
decimal	O
integer	O
.	O
The	O
characters	O
in	O
the	O
string	O
must	O
all	O
be	O
decimal	O
digits	O
,	O
except	O
that	O
the	O
first	O
character	O
may	O
be	O
an	O
ASCII	O
minus	O
sign	O
'	O
-	O
'	O
(	O
'	O
\	O
u002D	O
'	O
)	O
to	O
indicate	O
a	O
negative	O
value	O
.	O
The	O
resulting	O
integer	O
value	O
is	O
returned	O
,	O
exactly	O
as	O
if	O
the	O
argument	O
and	O
the	O
radix	O
10	O
were	O
given	O
as	O
arguments	O
to	O
the	O
parseInt	B-api_mention
(	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
int	O
)	O
method	O
.	O
valueOf	B-api_mention
Returns	O
an	O
Integer	B-api_mention
object	O
holding	O
the	O
value	O
extracted	O
from	O
the	O
specified	O
String	B-api_mention
when	O
parsed	O
with	O
the	O
radix	O
given	O
by	O
the	O
second	O
argument	O
.	O
The	O
first	O
argument	O
is	O
interpreted	O
as	O
representing	O
a	O
signed	O
integer	O
in	O
the	O
radix	O
specified	O
by	O
the	O
second	O
argument	O
,	O
exactly	O
as	O
if	O
the	O
arguments	O
were	O
given	O
to	O
the	O
parseInt	B-api_mention
(	I-api_mention
java	I-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
method	O
.	O
The	O
result	O
is	O
an	O
Integer	B-api_mention
object	O
that	O
represents	O
the	O
integer	O
value	O
specified	O
by	O
the	O
string	O
.	O
equivalent	O
to	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
radix	O
-	O
the	O
radix	O
to	O
be	O
used	O
in	O
interpreting	O
s	O
so	O
if	O
you	O
equal	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
integer	O
inbetween	O
-	O
128	O
to	O
127	O
it	O
returns	O
true	O
in	O
your	O
condition	O
for	O
lesser	O
than	O
-	O
128	O
and	O
greater	O
than	O
127	O
it	O
gives	O
false	O
Question	O
-	O
18723596	O
String	B-api_mention
x	O
=	O
(	O
String	B-api_mention
)	O
null	O
;	O
Why	O
there	O
is	O
no	O
exception	O
in	O
this	O
statement	O
?	O
#	O
pre	O
It	O
prints	O
null	O
.	O
But	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
should	O
throw	O
a	O
null	O
pointer	O
exception	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
8579702	O
If	O
you	O
just	O
invoke	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
directly	O
,	O
it	O
'	O
s	O
executed	O
on	O
the	O
calling	O
thread	O
,	O
just	O
like	O
any	O
other	O
method	O
call	O
.	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
required	O
to	O
actually	O
create	O
a	O
new	O
thread	O
so	O
that	O
the	O
runnable	O
'	O
s	O
run	O
method	O
is	O
executed	O
in	O
parallel	O
.	O
Question	O
-	O
32623834	O
,	O
answer	O
-	O
32652449	O
Another	O
related	O
point	O
:	O
you	O
can	O
make	O
use	O
of	O
the	O
constant	O
pool	O
to	O
improve	O
the	O
performance	O
of	O
string	O
comparisons	O
in	O
some	O
circumstances	O
,	O
by	O
using	O
the	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
That	O
method	O
returns	O
the	O
instance	O
of	O
String	B-api_mention
with	O
the	O
same	O
contents	O
as	O
the	O
String	B-api_mention
on	O
which	O
it	O
is	O
invoked	O
from	O
the	O
String	B-api_mention
constants	O
pool	O
,	O
adding	O
it	O
it	O
if	O
is	O
not	O
yet	O
present	O
.	O
In	O
other	O
words	O
,	O
after	O
using	O
intern	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
all	O
Strings	O
with	O
the	O
same	O
contents	O
are	O
guaranteed	O
to	O
be	O
the	O
same	O
String	B-api_mention
instance	O
as	O
each	O
other	O
and	O
as	O
any	O
String	B-api_mention
constants	O
with	O
those	O
contents	O
,	O
meaning	O
you	O
can	O
then	O
use	O
the	O
equals	O
operator	O
(	O
=	O
=	O
)	O
on	O
them	O
.	O
This	O
is	O
just	O
an	O
example	O
which	O
is	O
not	O
very	O
useful	O
on	O
its	O
own	O
,	O
but	O
it	O
illustrates	O
the	O
point	O
:	O
#	O
pre	O
This	O
little	O
trick	O
isn	O
'	O
t	O
worth	O
designing	O
your	O
code	O
around	O
,	O
but	O
it	O
is	O
worth	O
keeping	O
in	O
mind	O
for	O
the	O
day	O
when	O
you	O
notice	O
a	O
little	O
more	O
speed	O
could	O
be	O
eked	O
out	O
of	O
some	O
bit	O
of	O
performance	O
sensitive	O
code	O
by	O
using	O
the	O
=	O
=	O
operator	O
on	O
a	O
string	O
with	O
judicious	O
use	O
of	O
intern	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
26684562	O
,	O
answer	O
-	O
26684710	O
Both	O
map	B-api_mention
and	O
flatMap	B-api_mention
can	O
be	O
applied	O
to	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
and	O
they	O
both	O
return	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
The	O
difference	O
is	O
that	O
the	O
map	B-api_mention
operation	O
produces	O
one	O
output	O
value	O
for	O
each	O
input	O
value	O
,	O
whereas	O
the	O
flatMap	B-api_mention
operation	O
produces	O
an	O
arbitrary	O
number	O
(	O
zero	O
or	O
more	O
)	O
values	O
for	O
each	O
input	O
value	O
.	O
This	O
is	O
reflected	O
in	O
the	O
arguments	O
to	O
each	O
operation	O
.	O
The	O
map	O
operation	O
takes	O
a	O
Function	O
,	O
which	O
is	O
called	O
for	O
each	O
value	O
in	O
the	O
input	O
stream	O
and	O
produces	O
one	O
result	O
value	O
,	O
which	O
is	O
sent	O
to	O
the	O
output	O
stream	O
.	O
The	O
flatMap	B-api_mention
operation	O
takes	O
a	O
function	O
that	O
conceptually	O
wants	O
to	O
consume	O
one	O
value	O
and	O
produce	O
an	O
arbitrary	O
number	O
of	O
values	O
.	O
However	O
,	O
in	O
Java	O
,	O
it	O
'	O
s	O
cumbersome	O
for	O
a	O
method	O
to	O
return	O
an	O
arbitrary	O
number	O
of	O
values	O
,	O
since	O
methods	O
can	O
return	O
only	O
zero	O
or	O
one	O
value	O
.	O
One	O
could	O
imagine	O
an	O
API	O
where	O
the	O
mapper	O
function	O
for	O
flatMap	B-api_mention
takes	O
a	O
value	O
and	O
returns	O
an	O
array	O
or	O
a	O
List	O
of	O
values	O
,	O
which	O
are	O
then	O
sent	O
to	O
the	O
output	O
.	O
Given	O
that	O
this	O
is	O
the	O
streams	O
library	O
,	O
a	O
particularly	O
apt	O
way	O
to	O
represent	O
an	O
arbitrary	O
number	O
of	O
return	O
values	O
is	O
for	O
the	O
mapper	O
function	O
itself	O
to	O
return	O
a	O
stream	O
!	O
The	O
values	O
from	O
the	O
stream	O
returned	O
by	O
the	O
mapper	O
are	O
drained	O
from	O
the	O
stream	O
and	O
are	O
passed	O
to	O
the	O
output	O
stream	O
.	O
The	O
"	O
clumps	O
"	O
of	O
values	O
returned	O
by	O
each	O
call	O
to	O
the	O
mapper	O
function	O
are	O
not	O
distinguished	O
at	O
all	O
in	O
the	O
output	O
stream	O
,	O
thus	O
the	O
output	O
is	O
said	O
to	O
have	O
been	O
"	O
flattened	O
.	O
"	O
Typical	O
use	O
is	O
for	O
the	O
mapper	O
function	O
of	O
flatMap	B-api_mention
to	O
return	O
Stream	B-api_mention
.	I-api_mention
empty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
it	O
wants	O
to	O
send	O
zero	O
values	O
,	O
or	O
something	O
like	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
it	O
wants	O
to	O
return	O
several	O
values	O
.	O
But	O
of	O
course	O
any	O
stream	O
can	O
be	O
returned	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7353473	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
better	O
(	O
as	O
explained	O
by	O
Nick	O
)	O
,	O
but	O
still	O
not	O
very	O
good	O
One	O
host	O
can	O
be	O
known	O
under	O
many	O
different	O
hostnames	O
.	O
Usually	O
you	O
'	O
ll	O
be	O
looking	O
for	O
the	O
hostname	O
your	O
host	O
has	O
in	O
a	O
specific	O
context	O
.	O
For	O
example	O
,	O
in	O
a	O
web	O
application	O
,	O
you	O
might	O
be	O
looking	O
for	O
the	O
hostname	O
used	O
by	O
whoever	O
issued	O
the	O
request	O
you	O
'	O
re	O
currently	O
handling	O
.	O
How	O
to	O
best	O
find	O
that	O
one	O
depends	O
on	O
which	O
framework	O
you	O
'	O
re	O
using	O
for	O
your	O
web	O
application	O
.	O
In	O
some	O
kind	O
of	O
other	O
internet	O
-	O
facing	O
service	O
,	O
you	O
'	O
ll	O
want	O
the	O
hostname	O
your	O
service	O
is	O
available	O
through	O
from	O
the	O
'	O
outside	O
'	O
.	O
Due	O
to	O
proxies	O
,	O
firewalls	O
etc	O
this	O
might	O
not	O
even	O
be	O
a	O
hostname	O
on	O
the	O
machine	O
your	O
service	O
is	O
installed	O
on	O
-	O
you	O
might	O
try	O
to	O
come	O
up	O
with	O
a	O
reasonable	O
default	O
,	O
but	O
you	O
should	O
definitely	O
make	O
this	O
configurable	O
for	O
whoever	O
installs	O
this	O
.	O
Question	O
-	O
32312876	O
,	O
answer	O
-	O
32313069	O
This	O
is	O
possible	O
using	O
the	O
mergeFunction	O
parameter	O
of	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
keyMapper	I-api_mention
,	I-api_mention
valueMapper	I-api_mention
,	I-api_mention
mergeFunction	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
mergeFunction	O
is	O
a	O
function	O
that	O
operates	O
on	O
two	O
values	O
associated	O
with	O
the	O
same	O
key	O
.	O
adress1	O
corresponds	O
to	O
the	O
first	O
address	O
that	O
was	O
encountered	O
when	O
collecting	O
elements	O
and	O
adress2	O
corresponds	O
to	O
the	O
second	O
address	O
encountered	O
:	O
this	O
lambda	O
just	O
tells	O
to	O
keep	O
the	O
first	O
address	O
and	O
ignores	O
the	O
second	O
.	O
Question	O
-	O
15336477	O
,	O
answer	O
-	O
15336606	O
It	O
got	O
deprecated	O
in	O
version	O
4	O
.	O
3	O
-	O
alpha1	O
which	O
you	O
use	O
because	O
of	O
the	O
LATEST	O
version	O
specification	O
.	O
If	O
you	O
take	O
a	O
look	O
at	O
the	O
javadoc	O
of	O
the	O
class	O
,	O
it	O
tells	O
you	O
what	O
to	O
use	O
instead	O
:	O
HttpClientBuilder	B-api_mention
.	O
In	O
the	O
latest	O
stable	O
version	O
(	O
4	O
.	O
2	O
.	O
3	O
)	O
the	O
DefaultHttpClient	B-api_mention
is	O
not	O
deprecated	O
yet	O
.	O
Question	O
-	O
7520432	O
I	O
wanted	O
to	O
clarify	O
if	O
I	O
understand	O
this	O
correctly	O
:	O
#	O
li	O
=	O
=	O
-	O
>	O
is	O
a	O
reference	O
comparison	O
,	O
i	O
.	O
e	O
.	O
both	O
objects	O
point	O
to	O
the	O
same	O
memory	O
location	O
#	O
li	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
>	O
evaluates	O
to	O
the	O
comparison	O
of	O
values	O
in	O
the	O
objects	O
Am	O
I	O
correct	O
in	O
my	O
understanding	O
?	O
Question	O
-	O
18532488	O
In	O
many	O
other	O
languages	O
,	O
eg	O
.	O
Haskell	O
,	O
it	O
is	O
easy	O
to	O
repeat	O
a	O
value	O
or	O
function	O
multiple	O
times	O
,	O
eg	O
.	O
to	O
get	O
a	O
list	O
of	O
8	O
copies	O
of	O
the	O
value	O
1	O
:	O
take	O
8	O
(	O
args	O
)	O
but	O
I	O
haven	O
'	O
t	O
found	O
this	O
yet	O
in	O
Java	O
8	O
.	O
Is	O
there	O
such	O
a	O
function	O
in	O
Java	O
8	O
'	O
s	O
JDK	O
?	O
Or	O
alternatively	O
something	O
equivalent	O
to	O
a	O
range	O
like	O
[	O
1	O
.	O
.	O
8	O
]	O
It	O
would	O
seem	O
an	O
obvious	O
replacement	O
for	O
a	O
verbose	O
statement	O
in	O
Java	O
like	O
#	O
pre	O
to	O
have	O
something	O
like	O
Range	B-api_mention
.	I-api_mention
from	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
this	O
particular	O
example	O
doesn	O
'	O
t	O
look	O
much	O
more	O
concise	O
actually	O
.	O
.	O
.	O
but	O
hopefully	O
it	O
'	O
s	O
more	O
readable	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31922994	O
I	O
think	O
that	O
is	O
because	O
you	O
usually	O
write	O
your	O
functions	O
to	O
manipulate	O
data	O
,	O
and	O
then	O
lift	O
it	O
to	O
Optional	B-api_mention
using	O
map	O
and	O
similar	O
functions	O
.	O
This	O
adds	O
the	O
default	O
Optional	B-api_mention
behavior	O
to	O
it	O
.	O
Of	O
course	O
,	O
there	O
might	O
be	O
cases	O
,	O
when	O
it	O
is	O
necessary	O
to	O
write	O
your	O
own	O
auxilary	O
function	O
that	O
works	O
on	O
Optional	B-api_mention
.	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561690	O
Comparator	B-api_mention
is	O
a	O
functional	O
interface	O
,	O
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
max	I-api_mention
complies	O
with	O
that	O
interface	O
(	O
after	O
autoboxing	O
/	O
unboxing	O
is	O
taken	O
into	O
consideration	O
)	O
.	O
It	O
takes	O
two	O
int	O
values	O
and	O
returns	O
an	O
int	O
-	O
just	O
as	O
you	O
'	O
d	O
expect	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
(	O
again	O
,	O
squinting	O
to	O
ignore	O
the	O
Integer	B-api_mention
/	O
int	O
difference	O
)	O
.	O
However	O
,	O
I	O
wouldn	O
'	O
t	O
expect	O
it	O
to	O
do	O
the	O
right	O
thing	O
,	O
given	O
that	O
Integer	B-api_mention
.	I-api_mention
max	I-api_mention
doesn	O
'	O
t	O
comply	O
with	O
the	O
semantics	O
of	O
Comparator	B-api_mention
.	I-api_mention
compare	I-api_mention
.	O
And	O
indeed	O
it	O
doesn	O
'	O
t	O
really	O
work	O
in	O
general	O
.	O
For	O
example	O
,	O
make	O
one	O
small	O
change	O
:	O
#	O
pre	O
.	O
.	O
.	O
and	O
now	O
the	O
max	O
value	O
is	O
-	O
20	O
and	O
the	O
min	O
value	O
is	O
-	O
1	O
.	O
Instead	O
,	O
both	O
calls	O
should	O
use	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
compare	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
27747562	O
,	O
answer	O
-	O
27747702	O
A	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
could	O
very	O
well	O
be	O
an	O
Item	B-api_mention
.	O
See	O
for	O
example	O
:	O
#	O
pre	O
A	O
cast	O
tells	O
the	O
compiler	O
:	O
"	O
I	O
know	O
you	O
can	O
'	O
t	O
be	O
sure	O
that	O
this	O
is	O
a	O
object	O
of	O
type	O
Item	O
,	O
but	O
I	O
know	O
better	O
than	O
you	O
,	O
so	O
please	O
compile	O
"	O
.	O
The	O
compiler	O
will	O
only	O
refuse	O
to	O
compile	O
that	O
if	O
it	O
'	O
s	O
impossible	O
for	O
the	O
returned	O
object	O
to	O
be	O
an	O
instance	O
of	O
Item	B-api_mention
(	O
like	O
,	O
for	O
example	O
,	O
Integer	B-api_mention
can	O
'	O
t	O
ever	O
be	O
a	O
String	B-api_mention
)	O
At	O
runtime	O
,	O
the	O
type	O
of	O
the	O
actual	O
object	O
returned	O
by	O
the	O
method	O
will	O
be	O
checked	O
,	O
and	O
if	O
it	O
'	O
s	O
not	O
actually	O
an	O
object	O
of	O
type	O
Item	O
,	O
you	O
'	O
ll	O
get	O
a	O
ClassCastException	B-api_mention
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26796725	O
Swapping	O
Only	O
One	O
Occurrence	O
If	O
there	O
is	O
only	O
one	O
occurrence	O
of	O
each	O
of	O
the	O
swapable	O
strings	O
in	O
the	O
input	O
,	O
you	O
can	O
do	O
the	O
following	O
:	O
Before	O
proceeding	O
to	O
any	O
replace	O
,	O
get	O
the	O
indices	O
of	O
the	O
occurrences	O
of	O
the	O
words	O
.	O
After	O
that	O
we	O
only	O
replace	O
the	O
word	O
found	O
at	O
these	O
indexes	O
,	O
and	O
not	O
all	O
occurrences	O
.	O
This	O
solution	O
uses	O
StringBuilder	B-api_mention
and	O
does	O
not	O
produce	O
intermediate	O
String	B-api_mention
s	O
like	O
String	B-api_mention
.	I-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
One	O
thing	O
to	O
note	O
:	O
if	O
the	O
swapable	O
words	O
have	O
different	O
lengths	O
,	O
after	O
the	O
first	O
replace	O
the	O
second	O
index	O
might	O
change	O
(	O
if	O
the	O
1st	O
word	O
occurs	O
before	O
the	O
2nd	O
)	O
exactly	O
with	O
the	O
difference	O
of	O
the	O
2	O
lengths	O
.	O
So	O
aligning	O
the	O
second	O
index	O
will	O
ensure	O
this	O
works	O
even	O
if	O
we	O
'	O
re	O
swapping	O
words	O
with	O
different	O
lengths	O
.	O
#	O
pre	O
Swapping	O
Arbitrary	O
Number	O
of	O
Occurrences	O
Analogous	O
to	O
the	O
previous	O
case	O
we	O
will	O
first	O
collect	O
the	O
indexes	O
(	O
occurrences	O
)	O
of	O
the	O
words	O
,	O
but	O
in	O
this	O
case	O
it	O
will	O
a	O
list	O
of	O
integers	O
for	O
each	O
word	O
,	O
not	O
just	O
one	O
int	O
.	O
For	O
this	O
we	O
will	O
use	O
the	O
following	O
utility	O
method	O
:	O
#	O
pre	O
And	O
using	O
this	O
we	O
will	O
replace	O
the	O
words	O
with	O
the	O
other	O
one	O
by	O
decreasing	O
index	O
(	O
which	O
might	O
require	O
to	O
alternate	O
between	O
the	O
2	O
swapable	O
words	O
)	O
so	O
that	O
we	O
won	O
'	O
t	O
even	O
have	O
to	O
correct	O
the	O
indices	O
after	O
a	O
replace	O
:	O
#	O
pre	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32749756	O
I	O
'	O
m	O
going	O
to	O
shoot	O
in	O
the	O
dark	O
here	O
.	O
.	O
.	O
My	O
guess	O
is	O
that	O
it	O
might	O
have	O
been	O
changed	O
in	O
order	O
to	O
prepare	O
the	O
ground	O
for	O
Specialization	O
(	O
aka	O
generics	O
over	O
primitive	O
types	O
)	O
.	O
Maybe	O
(	O
and	O
I	O
insist	O
on	O
maybe	O
)	O
,	O
this	O
change	O
is	O
meant	O
to	O
make	O
transition	O
to	O
Java	O
10	O
easier	O
,	O
in	O
the	O
event	O
of	O
specialization	O
being	O
part	O
of	O
the	O
JDK	O
.	O
If	O
you	O
look	O
at	O
the	O
State	O
of	O
the	O
Specialization	O
document	O
,	O
Language	O
restrictions	O
section	O
,	O
it	O
says	O
the	O
following	O
:	O
#	O
blockquote	O
(	O
Emphasis	O
is	O
mine	O
)	O
.	O
And	O
ahead	O
in	O
the	O
Specializer	O
transformations	O
section	O
,	O
it	O
says	O
:	O
#	O
blockquote	O
Later	O
on	O
,	O
near	O
the	O
end	O
of	O
the	O
document	O
,	O
in	O
the	O
Further	O
investigation	O
section	O
,	O
it	O
says	O
:	O
#	O
blockquote	O
Now	O
,	O
regarding	O
the	O
change	O
.	O
.	O
.	O
If	O
the	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
going	O
to	O
be	O
specialized	O
,	O
then	O
its	O
signature	O
should	O
change	O
to	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
However	O
this	O
case	O
is	O
specifically	O
listed	O
in	O
the	O
(	O
already	O
mentioned	O
)	O
Language	O
restrictions	O
section	O
(	O
it	O
would	O
violate	O
the	O
emphasized	O
items	O
)	O
.	O
So	O
maybe	O
someone	O
decided	O
that	O
it	O
would	O
be	O
better	O
to	O
not	O
use	O
it	O
from	O
the	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
especially	O
if	O
value	O
is	O
null	O
.	O
Question	O
-	O
18410035	O
,	O
answer	O
-	O
37409771	O
In	O
Java	O
8	O
collection	O
classes	O
that	O
implement	O
Iterable	B-api_mention
(	O
for	O
example	O
all	O
lists	O
)	O
now	O
have	O
forEach	B-api_mention
method	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
above	O
example	O
makes	O
use	O
of	O
method	O
-	O
reference	O
introduced	O
in	O
Java	O
8	O
.	O
We	O
can	O
also	O
iterate	O
over	O
a	O
list	O
using	O
Stream	B-api_mention
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
advantage	O
with	O
later	O
option	O
is	O
that	O
we	O
can	O
also	O
make	O
use	O
of	O
parallel	O
streams	O
wherever	O
appropriate	O
.	O
If	O
the	O
objective	O
is	O
only	O
to	O
print	O
the	O
items	O
irrespective	O
of	O
the	O
order	O
then	O
we	O
can	O
use	O
parallel	O
stream	O
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
14014086	O
,	O
answer	O
-	O
20784007	O
Ken	O
'	O
s	O
answer	O
is	O
basically	O
right	O
but	O
I	O
'	O
d	O
like	O
to	O
chime	O
in	O
on	O
the	O
"	O
why	O
would	O
you	O
want	O
to	O
use	O
one	O
over	O
the	O
other	O
?	O
"	O
part	O
of	O
your	O
question	O
.	O
Basics	O
The	O
base	O
interface	O
you	O
choose	O
for	O
your	O
repository	O
has	O
two	O
main	O
purposes	O
.	O
First	O
,	O
you	O
allow	O
the	O
Spring	O
Data	O
repository	O
infrastructure	O
to	O
find	O
your	O
interface	O
and	O
trigger	O
the	O
proxy	O
creation	O
so	O
that	O
you	O
inject	O
instances	O
of	O
the	O
interface	O
into	O
clients	O
.	O
The	O
second	O
purpose	O
is	O
to	O
pull	O
in	O
as	O
much	O
functionality	O
as	O
needed	O
into	O
the	O
interface	O
without	O
having	O
to	O
declare	O
extra	O
methods	O
.	O
The	O
common	O
interfaces	O
The	O
Spring	O
Data	O
core	O
library	O
ships	O
with	O
two	O
base	O
interfaces	O
that	O
expose	O
a	O
dedicated	O
set	O
of	O
functionalities	O
:	O
#	O
li	O
CrudRepository	B-api_mention
-	O
CRUD	O
methods	O
#	O
li	O
PagingAndSortingRepository	B-api_mention
-	O
methods	O
for	O
pagination	O
and	O
sorting	O
(	O
extends	O
CrudRepository	B-api_mention
)	O
Store	O
-	O
specific	O
interfaces	O
The	O
individual	O
store	O
modules	O
(	O
e	O
.	O
g	O
.	O
for	O
JPA	O
or	O
MongoDB	O
)	O
expose	O
store	O
-	O
specific	O
extensions	O
of	O
these	O
base	O
interfaces	O
to	O
allow	O
access	O
to	O
store	O
-	O
specific	O
functionality	O
like	O
flushing	O
or	O
dedicated	O
batching	O
that	O
take	O
some	O
store	O
specifics	O
into	O
account	O
.	O
An	O
example	O
for	O
this	O
is	O
deleteInBatch	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
JpaRepository	B-api_mention
which	O
is	O
different	O
from	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
it	O
uses	O
a	O
query	O
to	O
delete	O
the	O
given	O
entities	O
which	O
is	O
more	O
performant	O
but	O
comes	O
with	O
the	O
side	O
effect	O
of	O
not	O
triggering	O
the	O
JPA	O
-	O
defined	O
cascades	O
(	O
as	O
the	O
spec	O
defines	O
it	O
)	O
.	O
We	O
generally	O
recommend	O
not	O
to	O
use	O
these	O
base	O
interfaces	O
as	O
they	O
expose	O
the	O
underlying	O
persistence	O
technology	O
to	O
the	O
clients	O
and	O
thus	O
tighten	O
the	O
coupling	O
between	O
them	O
and	O
the	O
repository	O
.	O
Plus	O
,	O
you	O
get	O
a	O
bit	O
away	O
from	O
the	O
original	O
definition	O
of	O
a	O
repository	O
which	O
is	O
basically	O
"	O
a	O
collection	O
of	O
entities	O
"	O
.	O
So	O
if	O
you	O
can	O
,	O
stay	O
with	O
PagingAndSortingRepository	B-api_mention
.	O
Custom	O
repository	O
base	O
interfaces	O
The	O
downside	O
of	O
directly	O
depending	O
on	O
one	O
of	O
the	O
provided	O
base	O
interfaces	O
is	O
two	O
-	O
fold	O
.	O
Both	O
of	O
them	O
might	O
be	O
considered	O
as	O
theoretical	O
but	O
I	O
think	O
they	O
'	O
re	O
important	O
to	O
be	O
aware	O
of	O
:	O
#	O
li	O
Depending	O
on	O
a	O
a	O
Spring	O
Data	O
repository	O
interface	O
couples	O
your	O
repository	O
interface	O
to	O
the	O
library	O
.	O
I	O
don	O
'	O
t	O
think	O
this	O
is	O
a	O
particular	O
issue	O
as	O
you	O
'	O
ll	O
probably	O
use	O
abstractions	O
like	O
Page	B-api_mention
or	O
Pageable	B-api_mention
in	O
your	O
code	O
anyway	O
.	O
Spring	O
Data	O
is	O
not	O
any	O
different	O
from	O
any	O
other	O
general	O
purpose	O
library	O
like	O
commons	O
-	O
lang	O
or	O
Guava	O
.	O
As	O
long	O
as	O
it	O
provides	O
reasonable	O
benefit	O
,	O
it	O
'	O
s	O
just	O
fine	O
.	O
#	O
li	O
By	O
extending	O
e	O
.	O
g	O
.	O
CrudRepository	B-api_mention
,	O
you	O
expose	O
a	O
complete	O
set	O
of	O
persistence	O
method	O
at	O
once	O
.	O
This	O
is	O
probably	O
fine	O
in	O
most	O
circumstances	O
as	O
well	O
but	O
you	O
might	O
run	O
into	O
situations	O
where	O
you	O
'	O
d	O
like	O
to	O
gain	O
more	O
fine	O
-	O
grained	O
control	O
over	O
the	O
methods	O
expose	O
,	O
e	O
.	O
g	O
.	O
to	O
create	O
a	O
ReadOnlyRepository	B-api_mention
that	O
doesn	O
'	O
t	O
include	O
the	O
save	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
of	O
CrudRepository	B-api_mention
.	O
The	O
solution	O
to	O
both	O
of	O
these	O
downsides	O
is	O
to	O
craft	O
your	O
own	O
base	O
repository	O
interface	O
or	O
even	O
a	O
set	O
of	O
them	O
.	O
In	O
a	O
lot	O
of	O
applications	O
we	O
'	O
ve	O
seen	O
something	O
like	O
this	O
:	O
#	O
pre	O
The	O
first	O
repository	O
interface	O
is	O
some	O
general	O
purpose	O
base	O
interface	O
that	O
actually	O
only	O
fixes	O
point	O
1	O
but	O
also	O
ties	O
the	O
ID	O
type	O
to	O
be	O
Long	B-api_mention
for	O
consistency	O
.	O
The	O
second	O
interface	O
usually	O
has	O
all	O
the	O
find	O
…	O
(	O
…	O
)	O
methods	O
copied	O
from	O
CrudRepository	B-api_mention
and	O
PagingAndSortingRepository	B-api_mention
but	O
does	O
not	O
expose	O
the	O
manipulating	O
ones	O
.	O
Read	O
more	O
on	O
that	O
approach	O
in	O
the	O
reference	O
documentation	O
.	O
Summary	O
-	O
tl	O
;	O
dr	O
The	O
repository	O
abstraction	O
allows	O
you	O
to	O
pickt	O
the	O
base	O
repository	O
totally	O
driven	O
by	O
you	O
architectural	O
and	O
functional	O
needs	O
.	O
Use	O
the	O
ones	O
provided	O
out	O
of	O
the	O
box	O
if	O
they	O
suit	O
,	O
craft	O
your	O
own	O
repository	O
base	O
interfaces	O
if	O
necessary	O
.	O
Stay	O
away	O
from	O
the	O
store	O
specific	O
repository	O
interfaces	O
unless	O
unavoidable	O
.	O
Question	O
-	O
32164385	O
,	O
answer	O
-	O
32164423	O
#	O
blockquote	O
The	O
only	O
way	O
is	O
to	O
read	O
the	O
code	O
unfortunately	O
.	O
#	O
blockquote	O
The	O
common	O
convention	O
is	O
to	O
pass	O
an	O
object	O
which	O
cannot	O
be	O
modified	O
,	O
using	O
a	O
wrapper	O
if	O
needed	O
.	O
This	O
ensure	O
the	O
class	O
cannot	O
modify	O
the	O
object	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
readOnly	O
=	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
the	O
object	O
is	O
Cloneable	B-api_mention
,	O
you	O
can	O
also	O
use	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
another	O
common	O
approach	O
is	O
to	O
use	O
a	O
copy	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
readOnly	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
care	O
about	O
such	O
behaviour	O
,	O
unit	O
tests	O
can	O
show	O
whether	O
a	O
method	O
modifies	O
an	O
object	O
or	O
not	O
.	O
If	O
you	O
have	O
unit	O
tests	O
already	O
,	O
it	O
is	O
usually	O
one	O
or	O
two	O
lines	O
extra	O
to	O
check	O
for	O
this	O
.	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
26826084	O
#	O
li	O
If	O
you	O
have	O
a	O
business	O
key	O
,	O
then	O
you	O
should	O
use	O
that	O
for	O
equals	B-api_mention
/	O
hashCode	B-api_mention
.	O
#	O
li	O
If	O
you	O
don	O
'	O
t	O
have	O
a	O
business	O
key	O
,	O
you	O
should	O
not	O
leave	O
it	O
with	O
the	O
default	O
Object	B-api_mention
equals	I-api_mention
and	O
hashCode	B-api_mention
implementations	O
because	O
that	O
does	O
not	O
work	O
after	O
you	O
merge	O
and	O
entity	O
.	O
#	O
li	O
You	O
can	O
use	O
the	O
entity	O
identifier	O
as	O
suggested	O
in	O
this	O
post	O
.	O
The	O
only	O
catch	O
is	O
that	O
you	O
need	O
to	O
use	O
a	O
hashCode	B-api_mention
implementation	O
that	O
always	O
return	O
the	O
same	O
value	O
,	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
32653133	O
This	O
is	O
looks	O
like	O
a	O
good	O
fit	O
for	O
pattern	O
matching	O
and	O
a	O
more	O
traditional	O
Option	B-api_mention
interface	O
with	O
Some	O
and	O
None	O
implementations	O
(	O
such	O
as	O
those	O
in	O
Javaslang	O
,	O
FunctionalJava	O
)	O
or	O
a	O
lazy	O
Maybe	O
implementation	O
in	O
cyclops	O
-	O
react	O
.	O
I	O
'	O
m	O
the	O
author	O
of	O
this	O
library	O
.	O
With	O
cyclops	O
-	O
react	O
you	O
can	O
also	O
use	O
structural	O
pattern	O
matching	O
on	O
JDK	O
types	O
.	O
For	O
Optional	B-api_mention
you	O
can	O
match	O
on	O
the	O
present	O
and	O
absent	O
cases	O
via	O
the	O
visitor	O
pattern	O
.	O
it	O
would	O
look	O
something	O
like	O
this	O
-	O
#	O
pre	O
Question	O
-	O
31965179	O
,	O
answer	O
-	O
35427268	O
There	O
'	O
s	O
a	O
long	O
list	O
of	O
things	O
that	O
have	O
been	O
changed	O
in	O
Hibernate	O
5	O
:	O
#	O
li	O
New	O
bootstrap	O
API	O
so	O
we	O
can	O
bootstrap	O
a	O
JPA	O
environment	O
programmatically	O
without	O
the	O
need	O
of	O
a	O
persistence	O
.	O
xml	O
file	O
.	O
#	O
li	O
Starting	O
in	O
5	O
.	O
0	O
Hibernate	O
Spatial	O
is	O
part	O
of	O
the	O
Hibernate	O
project	O
so	O
we	O
can	O
handle	O
GIS	O
data	O
too	O
.	O
#	O
li	O
The	O
Java	O
8	O
Date	B-api_mention
and	O
Time	B-api_mention
types	O
are	O
supported	O
in	O
domain	O
model	O
mappings	O
.	O
The	O
mapping	O
between	O
the	O
standard	O
SQL	O
Date	O
/	O
Time	O
types	O
and	O
the	O
supported	O
Java	O
8	O
Date	B-api_mention
/	O
Time	B-api_mention
class	O
types	O
looks	O
as	O
follows	O
;	O
#	O
li	O
DATE	O
:	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalDate	I-api_mention
#	O
li	O
TIME	O
:	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalTime	I-api_mention
,	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
OffsetTime	I-api_mention
#	O
li	O
TIMESTAMP	O
:	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
Instant	I-api_mention
,	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalDateTime	I-api_mention
,	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
OffsetDateTime	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
ZonedDateTime	I-api_mention
#	O
li	O
The	O
bytecode	O
enhancement	O
mechanism	O
was	O
redesigned	O
from	O
scratch	O
,	O
and	O
Hibernate	O
features	O
both	O
a	O
Maven	O
and	O
a	O
Gradle	O
plugin	O
.	O
There	O
are	O
three	O
main	O
aspects	O
which	O
we	O
can	O
enhance	O
with	O
bytecode	O
instrumentation	O
:	O
#	O
li	O
Lazy	O
initialization	O
:	O
Fields	O
can	O
be	O
declared	O
as	O
LAZY	O
and	O
they	O
will	O
be	O
fetched	O
only	O
when	O
being	O
accessed	O
for	O
the	O
first	O
time	O
.	O
#	O
li	O
Dirty	O
checking	O
:	O
Entities	O
are	O
enhanced	O
so	O
that	O
they	O
can	O
keep	O
track	O
of	O
all	O
the	O
properties	O
that	O
get	O
changed	O
after	O
being	O
loaded	O
in	O
a	O
Persistence	O
Context	O
.	O
#	O
li	O
Bidirectional	O
associations	O
:	O
It	O
'	O
s	O
possible	O
to	O
synchronize	O
both	O
sides	O
of	O
a	O
bidirectional	O
association	O
automatically	O
,	O
even	O
if	O
the	O
developer	O
only	O
updates	O
a	O
single	O
side	O
.	O
#	O
li	O
Hibernate	O
'	O
s	O
native	O
APIs	O
(	O
Session	O
,	O
etc	O
)	O
have	O
been	O
updated	O
to	O
use	O
generic	O
typed	O
.	O
No	O
need	O
to	O
cast	O
when	O
fetching	O
entities	O
.	O
#	O
li	O
Hibernate	O
5	O
.	O
0	O
expends	O
this	O
to	O
a	O
broader	O
set	O
of	O
types	O
(	O
e	O
.	O
g	O
.	O
UUID	O
)	O
.	O
#	O
li	O
Second	O
-	O
level	O
cache	O
by	O
reference	O
.	O
This	O
feature	O
enables	O
direct	O
storage	O
of	O
entity	O
references	O
into	O
the	O
second	O
level	O
cache	O
for	O
immutable	O
entities	O
.	O
#	O
li	O
Starting	O
with	O
Hibernate	O
5	O
.	O
0	O
,	O
we	O
have	O
a	O
completely	O
new	O
User	O
Guide	O
that	O
was	O
written	O
from	O
scratch	O
.	O
Question	O
-	O
24651403	O
,	O
answer	O
-	O
24651855	O
OK	O
,	O
first	O
of	O
all	O
,	O
your	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
will	O
not	O
work	O
as	O
intended	O
,	O
chained	O
if	O
-	O
elseif	O
will	O
maximally	O
execute	O
1	O
branch	O
of	O
code	O
,	O
for	O
example	O
:	O
#	O
pre	O
Even	O
if	O
e	O
contains	O
both	O
N	O
and	O
W	O
,	O
only	O
bexits	O
[	O
0	O
]	O
will	O
be	O
set	O
.	O
Also	O
this	O
method	O
will	O
only	O
add	O
exits	O
(	O
for	O
example	O
calling	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
delete	O
any	O
existing	O
exits	O
.	O
I	O
would	O
change	O
that	O
method	O
to	O
:	O
#	O
pre	O
Also	O
,	O
i	O
definetly	O
wouldn	O
'	O
t	O
remember	O
that	O
north	O
is	O
on	O
index	O
0	O
,	O
west	O
in	O
on	O
1	O
,	O
.	O
.	O
.	O
so	O
a	O
common	O
practice	O
is	O
to	O
name	O
your	O
indexes	O
using	O
final	O
static	O
constants	O
:	O
#	O
pre	O
Then	O
you	O
can	O
write	O
in	O
your	O
setExits	B-api_mention
method	O
:	O
#	O
pre	O
(	O
much	O
more	O
readible	O
)	O
Finally	O
,	O
if	O
you	O
want	O
your	O
code	O
even	O
more	O
well	O
-	O
arranged	O
,	O
you	O
can	O
make	O
a	O
Exits	B-api_mention
class	O
representing	O
avaliable	O
exits	O
,	O
and	O
backed	O
by	O
boolean	O
array	O
.	O
Then	O
on	O
place	O
where	O
you	O
create	O
your	O
String	B-api_mention
,	O
you	O
could	O
create	O
this	O
class	O
instead	O
and	O
save	O
yourself	O
work	O
with	O
generating	O
and	O
then	O
parsing	O
a	O
string	O
.	O
EDIT	O
:	O
as	O
@	O
gexicide	O
answers	O
,	O
there	O
is	O
a	O
really	O
handy	O
class	O
EnumSet	B-api_mention
which	O
would	O
be	O
probably	O
better	O
for	O
representing	O
the	O
exits	O
than	O
bollean	O
array	O
.	O
Question	O
-	O
10827872	O
What	O
'	O
s	O
the	O
difference	O
between	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
'	O
s	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
,	O
other	O
than	O
later	O
uses	O
regex	O
?	O
For	O
simple	O
substitutions	O
like	O
,	O
replace	O
.	O
with	O
/	O
,	O
is	O
there	O
any	O
difference	O
?	O
Question	O
-	O
28770822	O
,	O
answer	O
-	O
28853754	O
TLDR	O
:	O
Jump	O
to	O
the	O
conclusion	O
#	O
blockquote	O
A	O
brief	O
history	O
of	O
@	O
Native	O
I	O
made	O
some	O
search	O
on	O
the	O
mailing	O
lists	O
.	O
I	O
found	O
some	O
interesting	O
things	O
.	O
At	O
first	O
an	O
annotation	O
(	O
1	O
2	O
)	O
javax	B-api_mention
.	I-api_mention
tools	I-api_mention
.	I-api_mention
annotation	I-api_mention
.	I-api_mention
ForceNativeHeader	I-api_mention
was	O
introduced	O
to	O
#	O
blockquote	O
It	O
is	O
used	O
by	O
com	B-api_mention
.	I-api_mention
sun	I-api_mention
.	I-api_mention
tools	I-api_mention
.	I-api_mention
javac	I-api_mention
.	I-api_mention
processing	I-api_mention
.	I-api_mention
NativeapiVisitor	I-api_mention
.	O
By	O
looking	O
at	O
the	O
code	O
we	O
can	O
see	O
that	O
the	O
native	O
header	O
is	O
generated	O
if	O
the	O
class	O
declare	O
some	O
native	O
methods	O
or	O
if	O
the	O
class	O
is	O
annotated	O
@	O
ForceNativeHeader	O
.	O
Later	O
this	O
annotation	O
was	O
renamed	O
to	O
GenerateNativeHeader	B-api_mention
(	O
1	O
2	O
)	O
.	O
Then	O
this	O
annotation	O
was	O
added	O
to	O
several	O
types	O
(	O
especially	O
Integer	B-api_mention
and	O
Long	B-api_mention
)	O
with	O
an	O
interresting	O
comment	O
:	O
#	O
pre	O
But	O
by	O
adding	O
this	O
annotation	O
it	O
add	O
a	O
problematic	O
dependency	O
from	O
base	O
module	O
to	O
the	O
module	O
containing	O
javax	O
.	O
tools	O
.	O
So	O
the	O
annotation	O
were	O
removed	O
from	O
Integer	B-api_mention
and	O
Long	B-api_mention
and	O
these	O
files	O
were	O
explicitly	O
added	O
to	O
the	O
build	O
process	O
since	O
the	O
header	O
were	O
no	O
more	O
automatically	O
generated	O
.	O
.	O
.	O
a	O
"	O
(	O
hopefully	O
temporary	O
)	O
hack	O
"	O
.	O
So	O
a	O
new	O
annotation	B-api_mention
java	I-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
annotation	I-api_mention
.	I-api_mention
Native	I-api_mention
was	O
created	O
and	O
used	O
in	O
Integer	B-api_mention
and	O
Long	B-api_mention
.	O
The	O
annotation	O
was	O
set	O
a	O
TargetType	O
FIELD	O
.	O
#	O
blockquote	O
All	O
the	O
purpose	O
of	O
this	O
stuff	O
is	O
:	O
#	O
blockquote	O
It	O
is	O
the	O
case	O
of	O
Integer	B-api_mention
and	O
Long	B-api_mention
this	O
was	O
a	O
part	O
of	O
the	O
JEP	O
139	O
:	O
Enhance	O
javac	O
to	O
Improve	O
Build	O
Speed	O
:	O
#	O
blockquote	O
A	O
basic	O
experimentation	O
I	O
made	O
a	O
basic	O
experimentation	O
on	O
the	O
JDK	O
.	O
I	O
clone	O
the	O
open	O
-	O
jdk	O
forest	O
and	O
i	O
successfully	O
build	O
it	O
.	O
As	O
expected	O
the	O
header	O
files	O
where	O
generated	O
for	O
Integer	B-api_mention
and	O
Long	B-api_mention
(	O
thanks	O
to	O
@	O
Native	O
)	O
and	O
for	O
Float	B-api_mention
and	O
Double	B-api_mention
(	O
thanks	O
to	O
their	O
native	O
methods	O
)	O
but	O
not	O
for	O
Byte	B-api_mention
,	O
Short	B-api_mention
.	O
.	O
.	O
#	O
pre	O
Then	O
i	O
tried	O
to	O
remove	O
the	O
@	O
Native	O
from	O
the	O
Integer	B-api_mention
fields	O
and	O
i	O
tried	O
to	O
build	O
again	O
the	O
jdk	O
but	O
i	O
get	O
an	O
error	O
:	O
#	O
pre	O
logically	O
since	O
the	O
header	O
have	O
not	O
been	O
generated	O
.	O
I	O
have	O
also	O
confirmed	O
that	O
java	O
_	O
lang	O
_	O
Integer	O
.	O
h	O
is	O
included	O
in	O
several	O
c	O
and	O
cpp	O
files	O
:	O
#	O
pre	O
like	O
Long	B-api_mention
#	O
pre	O
like	O
Float	B-api_mention
#	O
pre	O
and	O
like	O
Double	B-api_mention
#	O
pre	O
but	O
neither	O
Short	B-api_mention
find	O
.	O
\	O
(	O
-	O
name	O
StringLiteral	O
-	O
o	O
-	O
name	O
StringLiteral	O
\	O
)	O
-	O
exec	O
grep	O
StringLiteral	O
{	O
}	O
\	O
;	O
-	O
print	O
nor	O
Byte	B-api_mention
,	O
nor	O
Character	B-api_mention
.	O
Conclusion	O
Among	O
all	O
these	O
types	O
,	O
only	O
Integer	B-api_mention
,	O
Long	B-api_mention
,	O
Float	B-api_mention
,	O
Double	B-api_mention
are	O
used	O
in	O
the	O
native	O
source	O
code	O
of	O
the	O
jdk	O
.	O
And	O
only	O
the	O
Integer	B-api_mention
and	O
Long	B-api_mention
fields	O
are	O
annotated	O
with	O
@	O
Native	O
because	O
they	O
have	O
no	O
native	O
methods	O
(	O
as	O
opposed	O
to	O
Float	B-api_mention
and	O
Double	B-api_mention
)	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14492320	O
Your	O
QuickRandom	B-api_mention
implementation	O
hasn	O
'	O
t	O
really	O
an	O
uniform	O
distribution	O
.	O
The	O
frequencies	O
are	O
generally	O
higher	O
at	O
the	O
lower	O
values	O
while	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
a	O
more	O
uniform	O
distribution	O
.	O
Here	O
'	O
s	O
a	O
SSCCE	O
which	O
shows	O
that	O
:	O
#	O
pre	O
The	O
average	O
result	O
looks	O
like	O
this	O
:	O
#	O
pre	O
If	O
you	O
repeat	O
the	O
test	O
,	O
you	O
'	O
ll	O
see	O
that	O
the	O
QR	O
distribution	O
varies	O
heavily	O
,	O
depending	O
on	O
the	O
initial	O
seeds	O
,	O
while	O
the	O
MR	O
distribution	O
is	O
stable	O
.	O
Sometimes	O
it	O
reaches	O
the	O
desired	O
uniform	O
distribution	O
,	O
but	O
more	O
than	O
often	O
it	O
doesn	O
'	O
t	O
.	O
Here	O
'	O
s	O
one	O
of	O
the	O
more	O
extreme	O
examples	O
,	O
it	O
'	O
s	O
even	O
beyond	O
the	O
borders	O
of	O
the	O
graph	O
:	O
#	O
pre	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
12619799	O
I	O
would	O
say	O
don	O
'	O
t	O
use	O
ARM	O
and	O
go	O
on	O
with	O
Closeable	B-api_mention
.	O
Use	O
method	O
like	O
,	O
#	O
pre	O
Also	O
you	O
should	O
consider	O
calling	O
close	O
of	O
BufferedWriter	B-api_mention
as	O
it	O
is	O
not	O
just	O
delegating	O
the	O
close	O
to	O
FileWriter	B-api_mention
,	O
but	O
it	O
does	O
some	O
cleanup	O
like	O
flushBuffer	B-api_mention
.	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
38628203	O
In	O
intellij	O
you	O
can	O
auto	O
generate	O
toString	B-api_mention
method	O
by	O
pressing	O
alt	O
+	O
inset	O
and	O
then	O
selecting	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
here	O
is	O
an	O
out	O
put	O
for	O
a	O
test	O
class	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
generates	O
a	O
String	B-api_mention
by	O
concatenating	O
,	O
several	O
attributes	O
of	O
the	O
class	O
,	O
for	O
primitives	O
it	O
will	O
print	O
their	O
values	O
and	O
for	O
reference	O
types	O
it	O
will	O
use	O
their	O
class	O
type	O
(	O
in	O
this	O
case	O
to	O
string	O
method	O
of	O
Test2	O
)	O
.	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
13291108	O
Use	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
you	O
want	O
to	O
make	O
a	O
comparison	O
or	O
use	O
the	O
hardcoded	O
value	O
for	O
some	O
internal	O
use	O
in	O
your	O
code	O
.	O
Use	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
you	O
want	O
to	O
present	O
information	O
to	O
a	O
user	O
(	O
including	O
a	O
developper	O
looking	O
at	O
a	O
log	O
)	O
.	O
Never	O
rely	O
in	O
your	O
code	O
on	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
giving	O
a	O
specific	O
value	O
.	O
Never	O
test	O
it	O
against	O
a	O
specific	O
string	O
.	O
If	O
your	O
code	O
breaks	O
when	O
someone	O
correctly	O
changes	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
return	O
,	O
then	O
it	O
was	O
already	O
broken	O
.	O
From	O
the	O
javadoc	O
(	O
emphasis	O
mine	O
)	O
:	O
#	O
blockquote	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28833677	O
The	O
cleanest	O
“	O
try	O
services	O
”	O
approach	O
given	O
the	O
current	O
API	O
would	O
be	O
:	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
o	O
=	O
Stream	B-api_mention
.	I-api_mention
<	I-api_mention
Supplier	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
>	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
important	O
aspect	O
is	O
not	O
the	O
(	O
constant	O
)	O
chain	O
of	O
operations	O
you	O
have	O
to	O
write	O
once	O
but	O
how	O
easy	O
it	O
is	O
to	O
add	O
another	O
service	O
(	O
or	O
modify	O
the	O
list	O
of	O
services	O
is	O
general	O
)	O
.	O
Here	O
,	O
adding	O
or	O
removing	O
a	O
single	O
(	O
)	O
-	O
>	O
serviceX	O
(	O
args	O
)	O
is	O
enough	O
.	O
Due	O
to	O
the	O
lazy	O
evaluation	O
of	O
streams	O
,	O
no	O
service	O
will	O
be	O
invoked	O
if	O
a	O
preceding	O
service	O
returned	O
a	O
non	O
-	O
empty	O
Optional	B-api_mention
.	O
Question	O
-	O
22847105	O
,	O
answer	O
-	O
37354549	O
The	O
way	O
I	O
think	O
about	O
it	O
is	O
that	O
you	O
use	O
flatMap	B-api_mention
when	O
the	O
function	O
you	O
wanted	O
to	O
put	O
inside	O
of	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
Observable	B-api_mention
.	O
In	O
which	O
case	O
you	O
might	O
still	O
try	O
to	O
use	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
it	O
would	O
be	O
unpractical	O
.	O
Let	O
me	O
try	O
to	O
explain	O
why	O
.	O
If	O
in	O
such	O
case	O
you	O
decided	O
to	O
stick	O
with	O
map	O
,	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
For	O
example	O
in	O
your	O
case	O
,	O
if	O
we	O
used	O
an	O
imaginary	O
RxGson	O
library	O
,	O
that	O
returned	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
from	O
it	O
'	O
s	O
toJson	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
instead	O
of	O
simply	O
returning	O
a	O
String	B-api_mention
)	O
it	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
At	O
this	O
point	O
it	O
would	O
be	O
pretty	O
tricky	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
such	O
an	O
observable	O
.	O
Inside	O
of	O
it	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
which	O
you	O
would	O
again	O
need	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
the	O
value	O
.	O
Which	O
is	O
not	O
practical	O
or	O
nice	O
to	O
look	O
at	O
.	O
So	O
to	O
make	O
it	O
useful	O
one	O
idea	O
is	O
to	O
"	O
flatten	O
"	O
this	O
observable	O
of	O
observables	O
(	O
you	O
might	O
start	O
to	O
see	O
where	O
the	O
name	O
_	O
flat	O
_	O
Map	O
comes	O
from	O
)	O
.	O
RxJava	O
provides	O
a	O
few	O
ways	O
to	O
flatten	O
observables	O
and	O
for	O
sake	O
of	O
simplicity	O
lets	O
assume	O
merge	O
is	O
what	O
we	O
want	O
.	O
Merge	O
basically	O
takes	O
a	O
bunch	O
of	O
observables	O
and	O
emits	O
whenever	O
any	O
of	O
them	O
emits	O
.	O
(	O
Lots	O
of	O
people	O
would	O
argue	O
switch	O
would	O
be	O
a	O
better	O
default	O
.	O
But	O
if	O
you	O
'	O
re	O
emitting	O
just	O
one	O
value	O
,	O
it	O
doesn	O
'	O
t	O
matter	O
anyway	O
.	O
)	O
So	O
amending	O
our	O
previous	O
snippet	O
we	O
would	O
get	O
:	O
#	O
pre	O
This	O
is	O
a	O
lot	O
more	O
useful	O
,	O
because	O
subscribing	O
to	O
that	O
(	O
or	O
mapping	O
,	O
or	O
filtering	O
,	O
or	O
.	O
.	O
.	O
)	O
you	O
just	O
get	O
the	O
String	B-api_mention
value	O
.	O
(	O
Also	O
,	O
mind	O
you	O
,	O
such	O
variant	O
of	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
exist	O
in	O
RxJava	B-api_mention
,	O
but	O
if	O
you	O
understand	O
the	O
idea	O
of	O
merge	O
then	O
I	O
hope	O
you	O
also	O
understand	O
how	O
that	O
would	O
work	O
.	O
)	O
So	O
basically	O
because	O
such	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
probably	O
only	O
ever	O
be	O
useful	O
when	O
it	O
succeeds	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
returning	O
an	O
observable	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
type	O
this	O
over	O
and	O
over	O
again	O
,	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
created	O
as	O
a	O
shorthand	O
.	O
It	O
applies	O
the	O
mapping	O
function	O
just	O
as	O
a	O
normal	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
,	O
but	O
later	O
instead	O
of	O
emitting	O
the	O
returned	O
values	O
it	O
also	O
"	O
flattens	O
"	O
(	O
or	O
merges	O
)	O
them	O
.	O
That	O
'	O
s	O
the	O
general	O
use	O
case	O
.	O
It	O
is	O
most	O
useful	O
in	O
a	O
codebase	O
that	O
uses	O
Rx	O
allover	O
the	O
place	O
and	O
you	O
'	O
ve	O
got	O
many	O
methods	O
returning	O
observables	O
,	O
which	O
you	O
want	O
to	O
chain	O
with	O
other	O
methods	O
returning	O
observables	O
.	O
In	O
your	O
use	O
case	O
it	O
happens	O
to	O
be	O
useful	O
as	O
well	O
,	O
because	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
only	O
transform	O
one	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
into	O
another	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
it	O
cannot	O
transform	O
it	O
into	O
multiple	O
values	O
,	O
no	O
value	O
at	O
all	O
or	O
an	O
error	O
.	O
And	O
as	O
akarnokd	O
wrote	O
in	O
his	O
answer	O
(	O
and	O
mind	O
you	O
he	O
'	O
s	O
much	O
smarter	O
than	O
me	O
,	O
probably	O
in	O
general	O
,	O
but	O
at	O
least	O
when	O
it	O
comes	O
to	O
RxJava	O
)	O
you	O
shouldn	O
'	O
t	O
throw	O
exceptions	O
from	O
your	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
So	O
instead	O
you	O
can	O
use	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
return	O
Observable	B-api_mention
.	I-api_mention
just	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
all	O
goes	O
well	O
,	O
but	O
return	O
Observable	B-api_mention
.	I-api_mention
error	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
something	O
fails	O
.	O
See	O
his	O
answer	O
for	O
a	O
complete	O
snippet	O
:	O
#	O
a	O
Question	O
-	O
9510125	O
,	O
answer	O
-	O
9511880	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
In	O
Swing	O
when	O
you	O
create	O
Component	B-api_mention
,	O
it	O
is	O
not	O
valid	O
i	O
.	O
e	O
.	O
it	O
'	O
s	O
valid	O
property	O
is	O
false	O
.	O
A	O
component	O
is	O
said	O
to	O
be	O
valid	O
,	O
when	O
it	O
'	O
s	O
width	O
,	O
height	O
,	O
location	O
and	O
stuff	O
has	O
been	O
determined	O
.	O
This	O
is	O
usually	O
done	O
by	O
calling	O
their	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
directly	O
or	O
indirectly	O
.	O
When	O
we	O
call	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
containers	O
,	O
it	O
will	O
validate	O
the	O
container	O
(	O
if	O
it	O
is	O
invalid	O
)	O
by	O
calling	O
its	O
doLayout	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
typically	O
will	O
invoke	O
the	O
LayoutManager	B-api_mention
.	O
Now	O
each	O
child	O
placed	O
on	O
this	O
container	O
will	O
be	O
validated	O
recursively	O
,	O
so	O
that	O
the	O
entire	O
tree	O
will	O
be	O
laid	O
out	O
and	O
will	O
become	O
valid	O
.	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
to	O
be	O
called	O
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
width	O
/	O
height	O
and	O
call	O
repaint	B-api_mention
(	I-api_mention
)	I-api_mention
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
appearance	O
.	O
For	O
Example	O
,	O
If	O
your	O
JFrame	O
contains	O
a	O
JPanel	O
,	O
now	O
at	O
certain	O
point	O
of	O
time	O
you	O
removed	O
that	O
JPanel	O
and	O
inserted	O
a	O
new	O
one	O
in	O
it	O
'	O
s	O
place	O
,	O
depending	O
on	O
the	O
contents	O
of	O
the	O
newly	O
placed	O
JPanel	O
,	O
the	O
size	O
of	O
the	O
components	O
inside	O
the	O
JPanel	O
as	O
well	O
as	O
The	O
CONTAINER	O
itself	O
(	O
by	O
virtue	O
of	O
the	O
layout	O
manager	O
used	O
by	O
it	O
)	O
,	O
changes	O
.	O
Which	O
pushes	O
it	O
to	O
the	O
invalidate	O
state	O
.	O
So	O
in	O
order	O
to	O
validate	O
this	O
change	O
,	O
you	O
have	O
to	O
explicitly	O
call	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
This	O
thing	O
is	O
something	O
,	O
I	O
had	O
never	O
used	O
,	O
so	O
might	O
be	O
not	O
much	O
of	O
the	O
info	O
I	O
can	O
give	O
.	O
But	O
seems	O
like	O
the	O
scenario	O
presented	O
above	O
,	O
can	O
give	O
a	O
bit	O
of	O
hint	O
,	O
as	O
to	O
what	O
happens	O
in	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
28818506	O
I	O
'	O
ve	O
been	O
working	O
with	O
the	O
new	O
Optional	B-api_mention
type	O
in	O
Java	O
8	O
,	O
and	O
I	O
'	O
ve	O
come	O
across	O
what	O
seems	O
like	O
a	O
common	O
operation	O
that	O
isn	O
'	O
t	O
supported	O
functionally	O
:	O
an	O
"	O
orElseOptional	O
"	O
Consider	O
the	O
following	O
pattern	O
:	O
#	O
pre	O
There	O
are	O
many	O
forms	O
of	O
this	O
pattern	O
,	O
but	O
it	O
boils	O
down	O
to	O
wanting	O
an	O
"	O
orElse	O
"	O
on	O
an	O
optional	O
that	O
takes	O
a	O
function	O
producing	O
a	O
new	O
optional	O
,	O
called	O
only	O
if	O
the	O
current	O
one	O
does	O
not	O
exist	O
.	O
It	O
'	O
s	O
implementation	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
'	O
m	O
curious	O
if	O
there	O
'	O
s	O
a	O
reason	O
such	O
a	O
method	O
doesn	O
'	O
t	O
exist	O
,	O
if	O
I	O
'	O
m	O
just	O
using	O
Optional	B-api_mention
in	O
an	O
unintended	O
way	O
,	O
and	O
what	O
other	O
ways	O
people	O
have	O
come	O
up	O
with	O
to	O
deal	O
with	O
this	O
case	O
.	O
I	O
should	O
say	O
that	O
I	O
think	O
that	O
solutions	O
involving	O
custom	O
utility	O
classes	O
/	O
methods	O
aren	O
'	O
t	O
elegant	O
because	O
people	O
working	O
with	O
my	O
code	O
won	O
'	O
t	O
necessarily	O
know	O
they	O
exist	O
.	O
Also	O
,	O
if	O
anyone	O
knows	O
,	O
will	O
such	O
a	O
method	O
be	O
included	O
in	O
JDK	O
9	O
,	O
and	O
where	O
might	O
I	O
propose	O
such	O
a	O
method	O
?	O
This	O
seems	O
like	O
a	O
pretty	O
glaring	O
omission	O
to	O
the	O
API	O
to	O
me	O
.	O
Question	O
-	O
20358883	O
Is	O
there	O
a	O
Utility	B-api_mention
method	O
somewhere	O
that	O
can	O
do	O
this	O
in	O
1	O
line	O
?	O
I	O
can	O
'	O
t	O
find	O
it	O
anywhere	O
in	O
Collections	B-api_mention
,	O
or	O
List	B-api_mention
.	O
#	O
pre	O
I	O
don	O
'	O
t	O
want	O
to	O
re	O
-	O
invent	O
the	O
wheel	O
unless	O
I	O
plan	O
on	O
putting	O
fancy	O
rims	O
on	O
it	O
.	O
Well	O
.	O
.	O
.	O
the	O
type	O
can	O
be	O
T	O
,	O
and	O
not	O
String	B-api_mention
.	O
but	O
you	O
get	O
the	O
point	O
.	O
(	O
with	O
all	O
the	O
null	O
checking	O
,	O
safety	O
checks	O
.	O
.	O
.	O
etc	O
)	O
Question	O
-	O
29140402	O
I	O
have	O
a	O
class	O
defined	O
as	O
follows	O
:	O
#	O
pre	O
I	O
tried	O
to	O
print	O
an	O
instance	O
of	O
my	O
class	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
but	O
I	O
got	O
the	O
following	O
output	O
:	O
com	O
.	O
foo	O
.	O
Person	O
@	O
2f92e0f4	O
.	O
A	O
similar	O
thing	O
happened	O
when	O
I	O
tried	O
to	O
print	O
an	O
array	O
of	O
Person	O
objects	O
:	O
#	O
pre	O
I	O
got	O
the	O
output	O
:	O
[	O
Lcom	O
.	O
foo	O
.	O
Person	O
;	O
@	O
28a418fc	O
What	O
does	O
this	O
output	O
mean	O
?	O
How	O
do	O
I	O
change	O
this	O
output	O
so	O
it	O
contains	O
the	O
name	O
of	O
my	O
person	O
?	O
And	O
how	O
do	O
I	O
print	O
collections	O
of	O
my	O
objects	O
?	O
Note	O
:	O
this	O
is	O
intended	O
as	O
a	O
canonical	O
Q	O
&	O
A	O
about	O
this	O
subject	O
.	O
Question	O
-	O
7935858	O
,	O
answer	O
-	O
7935881	O
The	O
documentation	O
on	O
split	B-api_mention
(	I-api_mention
)	I-api_mention
says	O
:	O
#	O
blockquote	O
(	O
Emphasis	O
mine	O
.	O
)	O
A	O
dot	O
is	O
a	O
special	O
character	O
in	O
regular	O
expression	O
syntax	O
.	O
Use	O
Pattern	B-api_mention
.	I-api_mention
quote	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
the	O
parameter	O
to	O
split	B-api_mention
(	I-api_mention
)	I-api_mention
if	O
you	O
want	O
the	O
split	O
to	O
be	O
on	O
a	O
literal	O
string	O
pattern	O
:	O
String	B-api_mention
[	O
]	O
words	O
=	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
26548660	O
,	O
answer	O
-	O
26548894	O
You	O
can	O
use	O
a	O
Callback	B-api_mention
to	O
get	O
onSuccess	B-api_mention
and	O
onError	B-api_mention
events	O
.	O
Just	O
add	O
a	O
new	O
Callback	B-api_mention
to	O
your	O
request	O
like	O
so	O
:	O
Picasso	B-api_mention
.	I-api_mention
with	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
load	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
into	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Then	O
you	O
can	O
perform	O
any	O
alterations	O
and	O
modifications	O
in	O
the	O
onSuccess	B-api_mention
callback	O
.	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32820940	O
An	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
function	O
int	O
-	O
>	O
R	O
.	O
An	O
IntUnaryOperator	O
is	O
a	O
function	O
int	O
-	O
>	O
int	O
.	O
Thus	O
an	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
function	O
that	O
takes	O
an	O
int	O
as	O
parameter	O
and	O
return	O
a	O
function	O
that	O
takes	O
an	O
int	O
as	O
parameter	O
and	O
return	O
an	O
int	O
.	O
#	O
pre	O
Maybe	O
it	O
is	O
more	O
clear	O
if	O
you	O
use	O
anonymous	O
classes	O
to	O
"	O
decompose	O
"	O
the	O
lambda	O
:	O
#	O
pre	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32177563	O
The	O
other	O
answers	O
have	O
already	O
answered	O
your	O
question	O
-	O
no	O
,	O
this	O
is	O
not	O
possible	O
with	O
the	O
Java	O
'	O
s	O
primitive	O
wrapper	O
classes	O
.	O
I	O
'	O
ll	O
try	O
to	O
address	O
the	O
"	O
question	O
behind	O
the	O
question	O
"	O
:	O
Is	O
this	O
possible	O
with	O
other	O
classes	O
?	O
#	O
blockquote	O
This	O
is	O
actually	O
a	O
good	O
question	O
,	O
and	O
the	O
answer	O
is	O
:	O
Yes	O
,	O
it	O
is	O
possible	O
to	O
create	O
such	O
a	O
situation	O
,	O
and	O
yes	O
,	O
it	O
would	O
make	O
Aristotle	O
angry	O
.	O
Actually	O
,	O
I	O
don	O
'	O
t	O
know	O
if	O
it	O
would	O
make	O
Aristotle	O
angry	O
,	O
not	O
having	O
known	O
him	O
,	O
but	O
it	O
will	O
certainly	O
cause	O
a	O
lot	O
of	O
grief	O
for	O
whoever	O
has	O
to	O
work	O
with	O
the	O
code	O
.	O
The	O
thing	O
is	O
:	O
There	O
is	O
a	O
contract	O
associated	O
with	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
Javadocs	O
for	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
Yes	O
,	O
when	O
creating	O
your	O
own	O
class	O
,	O
you	O
can	O
violate	O
this	O
contract	O
.	O
There	O
is	O
(	O
unfortunately	O
)	O
nothing	O
in	O
the	O
compiler	O
or	O
runtime	O
stopping	O
you	O
.	O
However	O
,	O
a	O
lot	O
of	O
code	O
relies	O
on	O
this	O
contract	O
,	O
so	O
if	O
you	O
violate	O
it	O
,	O
any	O
code	O
that	O
uses	O
equals	B-api_mention
will	O
probably	O
fail	O
in	O
mysterious	O
ways	O
.	O
One	O
example	O
:	O
Java	O
'	O
s	O
own	O
Collection	B-api_mention
classes	O
(	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collection	I-api_mention
and	O
friends	O
)	O
rely	O
on	O
equals	B-api_mention
.	O
If	O
an	O
instance	O
of	O
a	O
class	O
that	O
does	O
not	O
correctly	O
implement	O
equals	B-api_mention
is	O
put	O
into	O
a	O
collection	O
,	O
weird	O
things	O
happen	O
,	O
such	O
as	O
the	O
collection	O
sometimes	O
containing	O
the	O
instance	O
and	O
sometimes	O
not	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28818627	O
Perhaps	O
this	O
is	O
what	O
you	O
'	O
re	O
after	O
:	O
Get	O
value	O
from	O
one	O
Optional	B-api_mention
or	O
another	O
Otherwise	O
,	O
you	O
may	O
want	O
to	O
have	O
a	O
look	O
at	O
Optional	B-api_mention
.	I-api_mention
orElseGet	I-api_mention
.	O
Here	O
'	O
s	O
an	O
example	O
of	O
what	O
I	O
think	O
that	O
you	O
'	O
re	O
after	O
:	O
result	O
=	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
11774099	O
,	O
answer	O
-	O
11774137	O
iterate	O
through	O
the	O
whole	O
65k	O
chars	O
and	O
ask	O
Character	B-api_mention
.	I-api_mention
isJavaIdentifierStart	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
answer	O
is	O
:	O
"	O
undertie	O
"	O
decimal	O
8255	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173110	O
Flipping	O
the	O
limit	O
and	O
the	O
filter	O
clauses	O
has	O
different	O
behaviors	O
.	O
If	O
you	O
put	O
the	O
limit	O
first	O
,	O
the	O
stream	O
will	O
first	O
generate	O
10	O
integers	O
[	O
1	O
.	O
.	O
10	O
]	O
,	O
and	O
then	O
filter	O
them	O
leaving	O
only	O
those	O
smaller	O
than	O
5	O
.	O
In	O
the	O
original	O
ordering	O
,	O
with	O
the	O
filter	O
applied	O
first	O
,	O
integers	O
are	O
generated	O
and	O
filtered	O
until	O
you	O
reach	O
10	O
elements	O
.	O
This	O
isn	O
'	O
t	O
an	O
infinite	O
operator	O
,	O
as	O
i	O
in	O
the	O
supplier	O
will	O
eventually	O
overflow	O
,	O
but	O
it	O
will	O
take	O
a	O
while	O
,	O
especially	O
on	O
a	O
slow	O
computer	O
,	O
to	O
reach	O
MAX	O
_	O
INT	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791826	O
Search	O
for	O
the	O
first	O
word	O
to	O
be	O
replaced	O
.	O
If	O
it	O
'	O
s	O
in	O
the	O
string	O
,	O
recurse	O
on	O
the	O
the	O
part	O
of	O
the	O
string	O
before	O
the	O
occurrence	O
,	O
and	O
on	O
the	O
part	O
of	O
the	O
string	O
after	O
the	O
occurrence	O
.	O
Otherwise	O
,	O
continue	O
with	O
the	O
next	O
word	O
to	O
be	O
replaced	O
.	O
A	O
naive	O
implementation	O
might	O
look	O
like	O
this	O
#	O
pre	O
Sample	O
usage	O
:	O
#	O
pre	O
Output	O
:	O
Once	O
upon	O
a	O
foo	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
baz	O
.	O
A	O
less	O
-	O
naive	O
version	O
:	O
#	O
pre	O
Unfortunately	O
,	O
Java	O
'	O
s	O
String	B-api_mention
has	O
no	O
indexOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
I	O
'	O
ve	O
omitted	O
the	O
implementation	O
of	O
indexOf	B-api_mention
here	O
as	O
I	O
'	O
m	O
not	O
certain	O
it	O
'	O
s	O
correct	O
,	O
but	O
it	O
can	O
be	O
found	O
on	O
ideone	O
,	O
along	O
with	O
some	O
rough	O
timings	O
of	O
various	O
solutions	O
posted	O
here	O
.	O
Question	O
-	O
34172978	O
#	O
pre	O
Counter	O
to	O
my	O
expectation	O
,	O
the	O
collect	O
call	O
never	O
returns	O
.	O
Setting	O
limit	O
before	O
filter	O
produces	O
the	O
expected	O
result	O
.	O
Why	O
?	O
Question	O
-	O
29333689	O
,	O
answer	O
-	O
29337734	O
My	O
intuition	O
in	O
Python	O
is	O
to	O
use	O
the	O
collections	O
.	O
Counter	O
as	O
a	O
multiset	O
:	O
#	O
pre	O
So	O
we	O
have	O
a	O
list	O
of	O
integers	O
from	O
0	O
-	O
99	O
twice	O
except	O
for	O
66	O
.	O
#	O
pre	O
Which	O
gets	O
the	O
least	O
common	O
(	O
last	O
item	O
)	O
from	O
a	O
list	O
sorted	O
by	O
frequency	O
.	O
Such	O
a	O
function	O
would	O
be	O
:	O
#	O
pre	O
And	O
usage	O
:	O
#	O
pre	O
This	O
is	O
a	O
generalized	O
solution	O
that	O
works	O
for	O
any	O
number	O
of	O
items	O
.	O
Question	O
-	O
14833008	O
,	O
answer	O
-	O
14833098	O
"	O
.	O
"	O
is	O
a	O
special	O
character	O
in	O
java	O
.	O
You	O
have	O
to	O
use	O
"	O
\	O
.	O
"	O
to	O
escape	O
this	O
character	O
:	O
final	O
String	B-api_mention
extensionRemoved	O
=	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
I	O
hope	O
this	O
helps	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
4871135	O
Current	O
working	O
directory	O
is	O
defined	O
differently	O
in	O
different	O
Java	O
implementations	O
For	O
certain	O
prior	O
to	O
Java	O
7	O
there	O
was	O
no	O
consistent	O
way	O
to	O
get	O
the	O
working	O
directory	O
.	O
You	O
could	O
work	O
around	O
this	O
by	O
launching	O
Java	O
with	O
-	O
D	O
and	O
defining	O
a	O
variable	O
to	O
hold	O
the	O
info	O
Something	O
like	O
java	O
-	O
Dcom	O
.	O
mycompany	O
.	O
workingDir	O
=	O
StringLiteral	O
That	O
'	O
s	O
not	O
quite	O
right	O
,	O
but	O
you	O
get	O
the	O
idea	O
.	O
Then	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
Question	O
-	O
22718744	O
,	O
answer	O
-	O
22718904	O
This	O
has	O
been	O
specified	O
in	O
the	O
documentation	O
of	O
split	B-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
,	I-api_mention
limit	I-api_mention
)	I-api_mention
.	O
#	O
blockquote	O
In	O
StringLiteral	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
got	O
a	O
zero	O
-	O
width	O
match	O
at	O
the	O
beginning	O
so	O
the	O
leading	O
empty	O
substring	O
is	O
not	O
included	O
in	O
the	O
resulting	O
array	O
.	O
However	O
in	O
your	O
second	O
snippet	O
when	O
you	O
split	O
on	O
StringLiteral	O
you	O
got	O
a	O
positive	O
width	O
match	O
(	O
1	O
in	O
this	O
case	O
)	O
,	O
so	O
the	O
empty	O
leading	O
substring	O
is	O
included	O
as	O
expected	O
.	O
(	O
Removed	O
irrelevant	O
source	O
code	O
)	O
Question	O
-	O
4709175	O
,	O
answer	O
-	O
4709284	O
#	O
blockquote	O
You	O
can	O
use	O
an	O
Enum	B-api_mention
to	O
represent	O
a	O
smallish	O
fixed	O
set	O
of	O
constants	O
or	O
an	O
internal	O
class	O
mode	O
while	O
increasing	O
readability	O
.	O
Also	O
,	O
Enums	O
can	O
enforce	O
a	O
certain	O
rigidity	O
when	O
used	O
in	O
method	O
parameters	O
.	O
They	O
offer	O
the	O
interesting	O
possibility	O
of	O
passing	O
information	O
to	O
a	O
constructor	O
like	O
in	O
the	O
Planets	O
example	O
on	O
Oracle	O
'	O
s	O
site	O
and	O
,	O
as	O
you	O
'	O
ve	O
discovered	O
,	O
also	O
allow	O
a	O
simple	O
way	O
to	O
create	O
a	O
singleton	O
pattern	O
.	O
ex	O
:	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
reads	O
better	O
than	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
enforces	O
the	O
use	O
of	O
fixed	O
set	O
of	O
values	O
shown	O
in	O
an	O
IDE	O
when	O
you	O
add	O
the	O
.	O
separator	O
instead	O
of	O
all	O
integers	O
.	O
Question	O
-	O
29280857	O
,	O
answer	O
-	O
29282558	O
As	O
you	O
have	O
mentioned	O
there	O
will	O
be	O
1000	O
-	O
10000	O
concurrent	O
transaction	O
you	O
expecting	O
at	O
a	O
time	O
than	O
you	O
can	O
store	O
accounts	O
on	O
which	O
some	O
transaction	O
is	O
going	O
on	O
and	O
handle	O
concurrency	O
One	O
Solution	O
is	O
to	O
allow	O
system	O
to	O
create	O
only	O
one	O
object	O
of	O
particulate	O
account	O
id	O
,	O
means	O
that	O
if	O
you	O
want	O
to	O
make	O
a	O
transaction	O
between	O
account	O
"	O
123	O
"	O
and	O
"	O
456	O
"	O
than	O
your	O
thread	O
will	O
create	O
account	O
object	O
and	O
in	O
that	O
constructor	O
of	O
account	O
class	O
we	O
will	O
check	O
if	O
any	O
other	O
object	O
of	O
account	O
is	O
there	O
with	O
particulate	O
account	O
id	O
,	O
if	O
other	O
object	O
of	O
account	O
is	O
there	O
with	O
same	O
account	O
id	O
means	O
that	O
some	O
transaction	O
is	O
going	O
on	O
with	O
particulate	O
account	O
id	O
so	O
you	O
have	O
to	O
wait	O
to	O
get	O
the	O
account	O
object	O
.	O
So	O
we	O
can	O
do	O
transaction	O
between	O
"	O
123	O
"	O
and	O
"	O
456	O
"	O
and	O
at	O
same	O
time	O
we	O
can	O
do	O
transaction	O
between	O
"	O
abc	O
"	O
and	O
"	O
xyz	O
"	O
but	O
if	O
at	O
same	O
time	O
some	O
other	O
thread	O
will	O
try	O
to	O
create	O
object	O
of	O
account	O
"	O
123	O
"	O
than	O
system	O
will	O
say	O
please	O
wait	O
for	O
reference	O
you	O
can	O
see	O
below	O
code	O
Please	O
note	O
:	O
#	O
li	O
dont	O
forgote	O
to	O
remove	O
your	O
account	O
id	O
from	O
locks	O
map	O
by	O
call	O
to	O
freeAccount	O
(	O
BigDecimal	B-api_mention
accId	O
)	O
from	O
LockHolder	B-api_mention
class	O
#	O
li	O
I	O
have	O
used	O
HasMap	B-api_mention
instand	O
of	O
list	O
because	O
list	O
will	O
not	O
be	O
a	O
good	O
choice	O
when	O
you	O
are	O
randomly	O
removing	O
element	O
from	O
it	O
(	O
or	O
when	O
frequently	O
you	O
are	O
updating	O
it	O
)	O
#	O
pre	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
29000802	O
There	O
is	O
a	O
third	O
option	O
-	O
using	O
stream	O
(	O
args	O
)	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
see	O
comments	O
under	O
why	O
didn	O
'	O
t	O
stream	O
have	O
a	O
toList	B-api_mention
method	O
.	O
It	O
turns	O
out	O
to	O
be	O
slower	O
than	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
or	O
collect	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
and	O
less	O
expressive	O
.	O
It	O
might	O
be	O
optimised	O
in	O
later	O
JDK	O
builds	O
,	O
so	O
adding	O
it	O
here	O
just	O
in	O
case	O
.	O
assuming	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myFinalList	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
with	O
a	O
micro	O
-	O
micro	O
benchmark	O
,	O
1M	O
entries	O
,	O
20	O
%	O
nulls	O
and	O
simple	O
transform	O
in	O
doSomething	O
(	O
)	O
#	O
pre	O
the	O
results	O
are	O
parallel	O
:	O
#	O
pre	O
sequential	O
:	O
#	O
pre	O
parallel	O
without	O
nulls	O
and	O
filter	O
(	O
so	O
the	O
stream	O
is	O
SIZED	O
)	O
:	O
toArrays	B-api_mention
has	O
the	O
best	O
performance	O
in	O
such	O
case	O
,	O
and	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
fails	O
with	O
"	O
indexOutOfBounds	O
"	O
on	O
the	O
recepient	O
ArrayList	B-api_mention
,	O
had	O
to	O
replace	O
with	O
.	B-api_mention
forEachOrdered	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489334	O
Text	O
inside	O
double	O
quotes	O
creates	O
a	O
literal	O
String	B-api_mention
object	O
.	O
String	B-api_mention
myString	O
=	O
StringLiteral	O
;	O
The	O
code	O
above	O
creates	O
a	O
String	B-api_mention
object	O
,	O
using	O
double	O
quotes	O
.	O
Question	O
-	O
8881291	O
,	O
answer	O
-	O
14060804	O
#	O
li	O
Strings	B-api_mention
are	O
immutable	O
in	O
Java	O
if	O
you	O
store	O
password	O
as	O
plain	O
text	O
it	O
will	O
be	O
available	O
in	O
memory	O
until	O
Garbage	O
collector	O
clears	O
it	O
and	O
since	O
Strings	B-api_mention
are	O
used	O
in	O
String	B-api_mention
pool	O
for	O
re	O
-	O
usability	O
there	O
is	O
pretty	O
high	O
chance	O
that	O
it	O
will	O
be	O
remain	O
in	O
memory	O
for	O
long	O
duration	O
,	O
which	O
pose	O
a	O
security	O
threat	O
.	O
Since	O
any	O
one	O
who	O
has	O
access	O
to	O
memory	O
dump	O
can	O
find	O
the	O
password	O
in	O
clear	O
text	O
#	O
li	O
Java	O
recommendation	O
using	O
getPassword	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
JPasswordField	O
which	O
returns	O
a	O
char	O
[	O
]	O
and	O
deprecated	O
getText	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
which	O
returns	O
password	O
in	O
clear	O
text	O
stating	O
security	O
reason	O
.	O
#	O
li	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
there	O
is	O
always	O
a	O
risk	O
of	O
printing	O
plain	O
text	O
in	O
log	O
file	O
or	O
console	O
but	O
if	O
use	O
Array	B-api_mention
you	O
won	O
'	O
t	O
print	O
contents	O
of	O
array	O
instead	O
its	O
memory	O
location	O
get	O
printed	O
.	O
#	O
pre	O
#	O
blockquote	O
Final	O
thoughts	O
:	O
Though	O
using	O
char	O
[	O
]	O
is	O
not	O
just	O
enough	O
you	O
need	O
to	O
erase	O
content	O
to	O
be	O
more	O
secure	O
.	O
I	O
also	O
suggest	O
working	O
with	O
hash	O
'	O
d	O
or	O
encrypted	O
password	O
instead	O
of	O
plaintext	O
and	O
clearing	O
it	O
from	O
memory	O
as	O
soon	O
as	O
authentication	O
is	O
completed	O
.	O
Question	O
-	O
5769669	O
,	O
answer	O
-	O
5769679	O
You	O
can	O
use	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
convert	O
a	O
String	B-api_mention
to	O
a	O
double	O
:	O
#	O
pre	O
For	O
your	O
case	O
it	O
looks	O
like	O
you	O
want	O
:	O
#	O
pre	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725550	O
Think	O
of	O
it	O
like	O
this	O
:	O
the	O
List	B-api_mention
interface	O
has	O
methods	O
like	O
add	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
set	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
contract	O
is	O
that	O
once	O
you	O
added	O
an	O
element	O
at	O
position	O
X	O
you	O
will	O
find	O
it	O
there	O
unless	O
you	O
add	O
or	O
remove	O
elements	O
before	O
it	O
.	O
If	O
any	O
list	O
implementation	O
would	O
store	O
elements	O
in	O
some	O
order	O
other	O
than	O
based	O
on	O
the	O
index	O
,	O
the	O
above	O
list	O
methods	O
would	O
make	O
no	O
sense	O
.	O
Question	O
-	O
23114015	O
I	O
am	O
wondering	O
why	O
the	O
Iterable	B-api_mention
interface	O
does	O
not	O
provide	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
.	O
Consider	O
the	O
following	O
class	O
:	O
#	O
pre	O
It	O
is	O
an	O
implementation	O
of	O
a	O
Hand	O
as	O
you	O
can	O
have	O
cards	O
in	O
your	O
hand	O
while	O
playing	O
a	O
Trading	O
Card	O
Game	O
.	O
Essentially	O
it	O
wraps	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
ensures	O
a	O
maximum	O
capacity	O
and	O
offers	O
some	O
other	O
useful	O
features	O
.	O
It	O
is	O
better	O
as	O
implementing	O
it	O
directly	O
as	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Now	O
,	O
for	O
convienience	O
I	O
thought	O
it	O
would	O
be	O
nice	O
to	O
implement	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
such	O
that	O
you	O
can	O
use	O
enhanced	O
for	O
-	O
loops	O
if	O
you	O
want	O
to	O
loop	O
over	O
it	O
.	O
(	O
My	O
Hand	O
class	O
also	O
provides	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
hence	O
the	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
justified	O
in	O
my	O
opinion	O
.	O
)	O
The	O
Iterable	O
interface	O
provides	O
the	O
following	O
(	O
left	O
out	O
javadoc	O
)	O
:	O
#	O
pre	O
Now	O
can	O
you	O
obtain	O
a	O
stream	O
with	O
:	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
stream	O
=	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
onto	O
the	O
real	O
question	O
:	O
#	O
li	O
Why	O
does	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
provide	O
a	O
default	O
methods	O
that	O
implement	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
see	O
nothing	O
that	O
would	O
make	O
this	O
impossible	O
or	O
unwanted	O
?	O
A	O
related	O
question	O
I	O
found	O
is	O
the	O
following	O
though	O
:	O
Why	O
does	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
implement	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
?	O
Which	O
is	O
oddly	O
enough	O
suggesting	O
it	O
to	O
do	O
it	O
somewhat	O
the	O
other	O
way	O
around	O
.	O
Question	O
-	O
12146298	O
I	O
would	O
like	O
to	O
know	O
what	O
is	O
the	O
cleanest	O
and	O
best	O
way	O
to	O
perform	O
form	O
validation	O
of	O
user	O
inputs	O
.	O
I	O
have	O
seen	O
some	O
developers	O
implement	O
org	B-api_mention
.	I-api_mention
springframework	I-api_mention
.	I-api_mention
validation	I-api_mention
.	I-api_mention
Validator	I-api_mention
.	O
A	O
question	O
about	O
that	O
:	O
I	O
saw	O
it	O
validates	O
a	O
class	O
.	O
Does	O
the	O
class	O
have	O
to	O
be	O
filled	O
manually	O
with	O
the	O
values	O
from	O
the	O
user	O
input	O
,	O
and	O
then	O
passed	O
to	O
the	O
validator	O
?	O
I	O
am	O
confused	O
about	O
the	O
cleanest	O
and	O
best	O
way	O
to	O
validate	O
the	O
user	O
input	O
.	O
I	O
know	O
about	O
the	O
traditional	O
method	O
of	O
using	O
request	B-api_mention
.	I-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
then	O
manually	O
checking	O
for	O
nulls	O
,	O
but	O
I	O
don	O
'	O
t	O
want	O
to	O
do	O
all	O
the	O
validation	O
in	O
my	O
Controller	O
.	O
Some	O
good	O
advice	O
on	O
this	O
area	O
will	O
be	O
greatly	O
appreciated	O
.	O
I	O
am	O
not	O
using	O
Hibernate	O
in	O
this	O
application	O
.	O
Question	O
-	O
19757300	O
,	O
answer	O
-	O
35512247	O
Keeping	O
this	O
issue	O
in	O
mind	O
I	O
developed	O
a	O
small	O
library	O
for	O
dealing	O
with	O
checked	O
exceptions	O
and	O
lambdas	O
.	O
Custom	O
adapters	O
allow	O
you	O
to	O
integrate	O
with	O
existing	O
functional	O
types	O
:	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
with	O
a	O
static	O
import	O
#	O
a	O
Question	O
-	O
6094575	O
,	O
answer	O
-	O
6094602	O
Yes	O
,	O
something	O
like	O
:	O
#	O
pre	O
That	O
will	O
only	O
work	O
for	O
a	O
single	O
string	O
parameter	O
of	O
course	O
,	O
but	O
you	O
can	O
modify	O
it	O
pretty	O
easily	O
.	O
Note	O
that	O
the	O
class	O
name	O
has	O
to	O
be	O
a	O
fully	O
-	O
qualified	O
one	O
,	O
i	O
.	O
e	O
.	O
including	O
the	O
namespace	O
.	O
For	O
nested	O
classes	O
,	O
you	O
need	O
to	O
use	O
a	O
dollar	O
(	O
as	O
that	O
'	O
s	O
what	O
the	O
compiler	O
uses	O
)	O
.	O
For	O
example	O
:	O
#	O
pre	O
To	O
obtain	O
the	O
Class	B-api_mention
object	O
for	O
that	O
,	O
you	O
'	O
d	O
need	O
Class	B-api_mention
.	I-api_mention
forName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17842210	O
After	O
digging	O
around	O
for	O
a	O
while	O
,	O
I	O
can	O
'	O
t	O
say	O
that	O
I	O
find	O
the	O
answer	O
,	O
but	O
I	O
think	O
it	O
'	O
s	O
quite	O
close	O
now	O
.	O
First	O
,	O
we	O
need	O
to	O
know	O
when	O
a	O
StackOverflowError	B-api_mention
will	O
be	O
thrown	O
.	O
In	O
fact	O
,	O
the	O
stack	O
for	O
a	O
java	O
thread	O
stores	O
frames	O
,	O
which	O
containing	O
all	O
the	O
data	O
needed	O
for	O
invoking	O
a	O
method	O
and	O
resume	O
.	O
According	O
to	O
Java	O
Language	O
Specifications	O
for	O
JAVA	O
6	O
,	O
when	O
invoking	O
a	O
method	O
,	O
#	O
blockquote	O
Second	O
,	O
we	O
should	O
make	O
it	O
clear	O
what	O
is	O
"	O
there	O
is	O
not	O
sufficient	O
memory	O
available	O
to	O
create	O
such	O
an	O
activation	O
frame	O
"	O
.	O
According	O
to	O
Java	O
Virtual	O
Machine	O
Specifications	O
for	O
JAVA	O
6	O
,	O
#	O
blockquote	O
So	O
,	O
when	O
a	O
frame	O
is	O
created	O
,	O
there	O
should	O
be	O
enough	O
heap	O
space	O
to	O
create	O
a	O
stack	O
frame	O
and	O
enough	O
stack	O
space	O
to	O
store	O
the	O
new	O
reference	O
which	O
point	O
to	O
the	O
new	O
stack	O
frame	O
if	O
the	O
frame	O
is	O
heap	O
allocated	O
.	O
Now	O
let	O
'	O
s	O
go	O
back	O
to	O
the	O
question	O
.	O
From	O
the	O
above	O
,	O
we	O
can	O
know	O
that	O
when	O
a	O
method	O
is	O
execute	O
,	O
it	O
may	O
just	O
costs	O
the	O
same	O
amount	O
of	O
stack	O
space	O
.	O
And	O
invoking	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
may	I-api_mention
)	I-api_mention
needs	O
5	O
level	O
of	O
method	O
invocation	O
,	O
so	O
5	O
frames	O
need	O
to	O
be	O
created	O
.	O
Then	O
when	O
StackOverflowError	B-api_mention
is	O
thrown	O
out	O
,	O
it	O
has	O
to	O
go	O
back	O
5	O
times	O
to	O
get	O
enough	O
stack	O
space	O
to	O
store	O
5	O
frames	O
'	O
references	O
.	O
Hence	O
4	O
is	O
print	O
out	O
.	O
Why	O
not	O
5	O
?	O
Because	O
you	O
use	O
cnt	O
+	O
+	O
.	O
Change	O
it	O
to	O
+	O
+	O
cnt	O
,	O
and	O
then	O
you	O
will	O
get	O
5	O
.	O
And	O
you	O
will	O
notice	O
that	O
when	O
the	O
size	O
of	O
stack	O
go	O
to	O
a	O
high	O
level	O
,	O
you	O
will	O
get	O
50	O
sometimes	O
.	O
That	O
is	O
because	O
the	O
amount	O
of	O
available	O
heap	O
space	O
need	O
to	O
be	O
taken	O
into	O
consideration	O
then	O
.	O
When	O
the	O
stack	O
'	O
s	O
size	O
is	O
too	O
large	O
,	O
maybe	O
heap	O
space	O
will	O
run	O
out	O
before	O
stack	O
.	O
And	O
(	O
maybe	O
)	O
the	O
actual	O
size	O
of	O
stack	O
frames	O
of	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
is	O
about	O
51	O
times	O
of	O
main	O
,	O
therefore	O
it	O
goes	O
back	O
51	O
times	O
and	O
print	O
50	O
.	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27949581	O
Imagine	O
you	O
have	O
a	O
phone	O
book	O
,	O
which	O
contains	O
people	O
,	O
which	O
have	O
a	O
String	B-api_mention
firstName	O
and	O
a	O
String	B-api_mention
lastName	O
.	O
And	O
it	O
happens	O
that	O
in	O
your	O
phone	O
book	O
,	O
100	O
,	O
000	O
people	O
have	O
the	O
same	O
firstName	O
=	O
StringLiteral	O
.	O
Because	O
you	O
get	O
the	O
data	O
from	O
a	O
database	O
or	O
a	O
file	O
those	O
strings	O
are	O
not	O
interned	O
so	O
your	O
JVM	O
memory	O
contains	O
the	O
char	O
array	O
{	O
CharLiteral	O
,	O
CharLiteral	O
,	O
CharLiteral	O
,	O
CharLiteral	O
}	O
100	O
thousand	O
times	O
,	O
one	O
per	O
John	O
string	O
.	O
Each	O
of	O
these	O
arrays	O
takes	O
,	O
say	O
,	O
20	O
bytes	O
of	O
memory	O
so	O
those	O
100k	O
Johns	O
take	O
up	O
2	O
MB	O
of	O
memory	O
.	O
With	O
deduplication	O
,	O
the	O
JVM	O
will	O
realise	O
that	O
"	O
John	O
"	O
is	O
duplicated	O
many	O
times	O
and	O
make	O
all	O
those	O
John	O
strings	O
point	O
to	O
the	O
same	O
underlying	O
char	O
array	O
,	O
decreasing	O
the	O
memory	O
usage	O
from	O
2MB	O
to	O
20	O
bytes	O
.	O
You	O
can	O
find	O
a	O
more	O
detailed	O
explanation	O
in	O
the	O
JEP	O
.	O
In	O
particular	O
:	O
#	O
blockquote	O
Question	O
-	O
8098953	O
,	O
answer	O
-	O
8103083	O
The	O
first	O
thing	O
to	O
keep	O
in	O
mind	O
is	O
that	O
Java	O
ternary	O
operators	O
have	O
a	O
"	O
type	O
"	O
,	O
and	O
that	O
this	O
is	O
what	O
the	O
compiler	O
will	O
determine	O
and	O
consider	O
no	O
matter	O
what	O
the	O
actual	O
/	O
real	O
types	O
of	O
the	O
second	O
or	O
third	O
parameter	O
are	O
.	O
Depending	O
on	O
several	O
factors	O
the	O
ternary	O
operator	O
type	O
is	O
determined	O
in	O
different	O
ways	O
as	O
illustrated	O
in	O
the	O
Java	O
Language	O
Specification	O
15	O
.	O
26	O
In	O
the	O
question	O
above	O
we	O
should	O
consider	O
the	O
last	O
case	O
:	O
#	O
blockquote	O
This	O
is	O
by	O
far	O
the	O
most	O
complex	O
case	O
once	O
you	O
take	O
a	O
look	O
at	O
applying	O
capture	O
conversion	O
(	O
§	O
5	O
.	O
1	O
.	O
10	O
)	O
and	O
most	O
of	O
all	O
at	O
lub	O
(	O
T1	O
,	O
T2	O
)	O
.	O
In	O
plain	O
English	O
and	O
after	O
an	O
extreme	O
simplification	O
we	O
can	O
describe	O
the	O
process	O
as	O
calculating	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
(	O
yes	O
,	O
think	O
of	O
the	O
LCM	O
)	O
of	O
the	O
second	O
and	O
third	O
parameters	O
.	O
This	O
will	O
give	O
us	O
the	O
ternary	O
operator	O
"	O
type	O
"	O
.	O
Again	O
,	O
what	O
I	O
just	O
said	O
is	O
an	O
extreme	O
simplification	O
(	O
consider	O
classes	O
that	O
implement	O
multiple	O
common	O
interfaces	O
)	O
.	O
For	O
example	O
,	O
if	O
you	O
try	O
the	O
following	O
:	O
#	O
pre	O
You	O
'	O
ll	O
notice	O
that	O
resulting	O
type	O
of	O
the	O
conditional	O
expression	O
is	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
since	O
it	O
'	O
s	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
for	O
the	O
Timestamp	B-api_mention
/	O
Time	B-api_mention
pair	O
.	O
Since	O
null	O
can	O
be	O
autoboxed	O
to	O
anything	O
,	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
is	O
the	O
Integer	O
class	O
and	O
this	O
will	O
be	O
the	O
return	O
type	O
of	O
the	O
conditional	O
expression	O
(	O
ternary	O
operator	O
)	O
above	O
.	O
The	O
return	O
value	O
will	O
then	O
be	O
a	O
null	O
pointer	O
of	O
type	O
Integer	B-api_mention
and	O
that	O
is	O
what	O
will	O
be	O
returned	O
by	O
the	O
ternary	O
operator	O
.	O
At	O
runtime	O
,	O
when	O
the	O
Java	O
Virtual	O
Machine	O
unboxes	O
the	O
Integer	B-api_mention
a	O
NullPointerException	B-api_mention
is	O
thrown	O
.	O
This	O
happens	O
because	O
the	O
JVM	O
attempts	O
to	O
invoke	O
the	O
function	O
null	O
.	B-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
where	O
null	O
is	O
the	O
result	O
of	O
autoboxing	O
.	O
In	O
my	O
opinion	O
(	O
and	O
since	O
my	O
opinion	O
is	O
not	O
in	O
the	O
Java	O
Language	O
Specification	O
many	O
people	O
will	O
find	O
it	O
wrong	O
anyway	O
)	O
the	O
compiler	O
does	O
a	O
poor	O
job	O
in	O
evaluating	O
the	O
expression	O
in	O
your	O
question	O
.	O
Given	O
that	O
you	O
wrote	O
true	O
?	O
param1	O
:	O
param2	O
the	O
compiler	O
should	O
determine	O
right	O
away	O
that	O
the	O
first	O
parameter	O
-	O
null	O
-	O
will	O
be	O
returned	O
and	O
it	O
should	O
generate	O
a	O
compiler	O
error	O
.	O
This	O
is	O
somewhat	O
similar	O
to	O
when	O
you	O
write	O
while	O
(	O
args	O
)	O
{	O
}	O
etc	O
.	O
.	O
.	O
and	O
the	O
compiler	O
complains	O
about	O
the	O
code	O
underneath	O
the	O
loop	O
and	O
flags	O
it	O
with	O
Unreachable	O
Statements	O
.	O
Your	O
second	O
case	O
is	O
pretty	O
straightforward	O
and	O
this	O
answer	O
is	O
already	O
too	O
long	O
.	O
.	O
.	O
;	O
)	O
CORRECTION	O
:	O
After	O
another	O
analysis	O
I	O
believe	O
that	O
I	O
was	O
wrong	O
to	O
say	O
that	O
a	O
null	O
value	O
can	O
be	O
boxed	O
/	O
autoboxed	O
to	O
anything	O
.	O
Talking	O
about	O
the	O
class	O
Integer	O
,	O
explicit	O
boxing	O
consists	O
in	O
invoking	O
the	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
constructor	O
or	O
maybe	O
the	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
(	O
I	O
found	O
this	O
version	O
somewhere	O
)	O
.	O
The	O
former	O
would	O
throw	O
a	O
NumberFormatException	B-api_mention
(	O
and	O
this	O
does	O
not	O
happen	O
)	O
while	O
the	O
second	O
would	O
just	O
not	O
make	O
sense	O
since	O
an	O
int	O
cannot	O
be	O
null	O
.	O
.	O
.	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31190722	O
We	O
can	O
draw	O
a	O
parallel	O
with	O
abstract	O
class	O
.	O
An	O
abstract	O
class	O
is	O
intended	O
to	O
be	O
subclassed	O
so	O
that	O
the	O
abstract	O
methods	O
can	O
be	O
implemented	O
.	O
The	O
abstract	O
class	O
itself	O
contains	O
concrete	O
methods	O
that	O
invoke	O
the	O
abstract	O
methods	O
.	O
The	O
abstract	O
class	O
is	O
free	O
to	O
evolve	O
by	O
adding	O
more	O
concrete	O
methods	O
;	O
and	O
this	O
practice	O
may	O
break	O
subclasses	O
.	O
Therefore	O
the	O
exact	O
problem	O
you	O
described	O
existed	O
even	O
before	O
Java8	O
.	O
The	O
problem	O
is	O
much	O
more	O
manifested	O
on	O
Collection	B-api_mention
APIs	O
because	O
there	O
are	O
a	O
lot	O
of	O
subclasses	O
out	O
in	O
the	O
wild	O
.	O
While	O
the	O
leading	O
motivation	O
of	O
default	O
method	O
was	O
to	O
add	O
some	O
useful	O
methods	O
to	O
existing	O
Collection	B-api_mention
APIs	O
without	O
breaking	O
subclasses	O
,	O
they	O
had	O
to	O
exercise	O
great	O
self	O
-	O
control	O
of	O
doing	O
it	O
too	O
much	O
,	O
for	O
fear	O
of	O
breaking	O
subclasses	O
.	O
A	O
default	O
method	O
is	O
added	O
only	O
if	O
it	O
'	O
s	O
absolutely	O
necessary	O
.	O
The	O
real	O
question	O
here	O
is	O
,	O
why	O
List	B-api_mention
.	I-api_mention
sort	I-api_mention
is	O
considered	O
absolutely	O
necessary	O
.	O
I	O
think	O
that	O
is	O
debatable	O
.	O
Regardless	O
of	O
why	O
default	O
method	O
was	O
introduced	O
in	O
the	O
1st	O
place	O
,	O
it	O
is	O
now	O
a	O
great	O
tool	O
for	O
API	O
designers	O
,	O
and	O
we	O
ought	O
to	O
treat	O
it	O
the	O
same	O
as	O
concrete	O
methods	O
in	O
abstract	O
classes	O
-	O
they	O
need	O
to	O
be	O
designed	O
carefully	O
up	O
front	O
;	O
and	O
new	O
ones	O
must	O
be	O
introduced	O
with	O
great	O
caution	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725453	O
Since	O
all	O
lists	O
are	O
already	O
"	O
sorted	O
"	O
by	O
the	O
order	O
the	O
items	O
were	O
added	O
(	O
FIFO	O
ordering	O
)	O
,	O
you	O
can	O
"	O
resort	O
"	O
them	O
with	O
another	O
ordering	O
,	O
including	O
the	O
natural	O
ordering	O
of	O
elements	O
,	O
using	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
EDIT	O
:	O
Lists	B-api_mention
as	O
data	O
structures	O
are	O
based	O
in	O
what	O
is	O
interesting	O
is	O
the	O
ordering	O
in	O
which	O
the	O
items	O
where	O
inserted	O
.	O
Sets	O
do	O
not	O
have	O
that	O
information	O
.	O
If	O
you	O
want	O
to	O
order	O
by	O
addition	O
time	O
,	O
use	O
List	B-api_mention
.	O
If	O
you	O
want	O
to	O
order	O
by	O
other	O
criteria	O
,	O
use	O
SortedSet	B-api_mention
.	O
Question	O
-	O
30081520	O
I	O
am	O
aware	O
that	O
it	O
is	O
better	O
to	O
call	O
the	O
equals	O
method	O
over	O
using	O
the	O
=	O
=	O
operator	O
(	O
see	O
this	O
question	O
)	O
.	O
I	O
want	O
two	O
strings	O
to	O
compare	O
as	O
equal	O
if	O
they	O
are	O
both	O
null	O
or	O
if	O
they	O
represent	O
the	O
same	O
string	O
.	O
Unfortunately	O
the	O
equals	B-api_mention
method	O
will	O
throw	O
an	O
NPE	O
if	O
the	O
strings	O
are	O
null	O
.	O
My	O
code	O
is	O
currently	O
:	O
#	O
pre	O
This	O
is	O
inelegant	O
.	O
What	O
is	O
the	O
correct	O
way	O
to	O
perform	O
this	O
test	O
?	O
Question	O
-	O
12317668	O
According	O
to	O
the	O
JLS	O
,	O
an	O
int	O
array	O
should	O
be	O
filled	O
by	O
zeros	O
just	O
after	O
initialization	O
.	O
However	O
,	O
I	O
am	O
faced	O
with	O
a	O
situation	O
where	O
it	O
is	O
not	O
.	O
Such	O
a	O
behavior	O
occurs	O
first	O
in	O
JDK	O
7u4	O
and	O
also	O
occurs	O
in	O
all	O
later	O
updates	O
(	O
I	O
use	O
64	O
-	O
bit	O
implementation	O
)	O
.	O
The	O
following	O
code	O
throws	O
exception	O
:	O
#	O
pre	O
The	O
exception	O
occurs	O
after	O
the	O
JVM	O
performs	O
compilation	O
of	O
the	O
code	O
block	O
and	O
does	O
not	O
arise	O
with	O
-	O
Xint	O
flag	O
.	O
Additionally	O
,	O
the	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
statement	O
(	O
as	O
all	O
other	O
statements	O
in	O
this	O
code	O
)	O
is	O
necessary	O
,	O
and	O
the	O
exception	O
does	O
not	O
occurs	O
if	O
it	O
is	O
absent	O
.	O
It	O
is	O
clear	O
that	O
this	O
possible	O
bug	O
is	O
bounded	O
with	O
some	O
JVM	O
optimization	O
.	O
Any	O
ideas	O
for	O
the	O
reason	O
of	O
such	O
a	O
behavior	O
?	O
Update	O
:	O
I	O
see	O
this	O
behavior	O
on	O
HotSpot	O
64	O
-	O
bit	O
server	O
VM	O
,	O
Java	O
version	O
from	O
1	O
.	O
7	O
.	O
0	O
_	O
04	O
to	O
1	O
.	O
7	O
.	O
0	O
_	O
10	O
on	O
Gentoo	O
Linux	O
,	O
Debian	O
Linux	O
(	O
both	O
kernel	O
3	O
.	O
0	O
version	O
)	O
and	O
MacOS	O
Lion	O
.	O
This	O
error	O
can	O
always	O
be	O
reproduced	O
with	O
the	O
code	O
above	O
.	O
I	O
did	O
not	O
test	O
this	O
problem	O
with	O
a	O
32	O
-	O
bit	O
JDK	O
or	O
on	O
Windows	O
.	O
I	O
already	O
sent	O
a	O
bug	O
report	O
to	O
the	O
Oracle	O
(	O
bug	O
id	O
7196857	O
)	O
and	O
it	O
will	O
appear	O
in	O
public	O
Oracle	O
bug	O
database	O
in	O
few	O
days	O
.	O
Update	O
:	O
Oracle	O
published	O
this	O
bug	O
at	O
their	O
public	O
bug	O
database	O
:	O
#	O
a	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29922831	O
Three	O
questions	O
:	O
three	O
-	O
part	O
answer	O
:	O
Is	O
it	O
okay	O
from	O
a	O
design	O
point	O
of	O
view	O
?	O
Absolutely	O
.	O
Nothing	O
wrong	O
with	O
it	O
.	O
If	O
you	O
need	O
to	O
do	O
lots	O
of	O
iterating	O
over	O
your	O
enum	O
,	O
the	O
stream	O
API	O
is	O
the	O
clean	O
way	O
to	O
go	O
and	O
hiding	O
the	O
boiler	O
plate	O
behind	O
a	O
little	O
method	O
is	O
fine	O
.	O
Although	O
I	O
’	O
d	O
consider	O
OldCumudgeon	O
’	O
s	O
version	O
even	O
better	O
.	O
Is	O
it	O
okay	O
from	O
a	O
performance	O
point	O
of	O
view	O
?	O
It	O
most	O
likely	O
doesn	O
’	O
t	O
matter	O
.	O
Most	O
of	O
the	O
time	O
,	O
enums	O
are	O
not	O
that	O
big	O
.	O
Therefore	O
,	O
whatever	O
overhead	O
there	O
is	O
for	O
one	O
method	O
or	O
the	O
other	O
probably	O
doesn	O
’	O
t	O
matter	O
in	O
99	O
.	O
9	O
%	O
of	O
the	O
cases	O
.	O
Of	O
course	O
,	O
there	O
are	O
the	O
0	O
.	O
1	O
%	O
where	O
it	O
does	O
.	O
In	O
that	O
case	O
:	O
measure	O
properly	O
,	O
with	O
your	O
real	O
-	O
world	O
data	O
and	O
consumers	O
.	O
If	O
I	O
had	O
to	O
bet	O
,	O
I	O
’	O
d	O
expect	O
the	O
for	O
each	O
loop	O
to	O
be	O
faster	O
,	O
since	O
it	O
maps	O
more	O
directly	O
to	O
the	O
memory	O
model	O
,	O
but	O
don	O
’	O
t	O
guess	O
when	O
talking	O
performance	O
,	O
and	O
don	O
’	O
t	O
tune	O
before	O
there	O
is	O
actual	O
need	O
for	O
tuning	O
.	O
Write	O
your	O
code	O
in	O
a	O
way	O
that	O
is	O
correct	O
first	O
,	O
easy	O
to	O
read	O
second	O
and	O
only	O
then	O
worry	O
about	O
performance	O
of	O
code	O
style	O
.	O
Why	O
aren	O
’	O
t	O
Enums	O
properly	O
integrated	O
into	O
the	O
Stream	B-api_mention
API	O
?	O
If	O
you	O
compare	O
Java	O
’	O
s	O
Stream	B-api_mention
API	O
to	O
the	O
equivalent	O
in	O
many	O
other	O
languages	O
,	O
it	O
appears	O
seriously	O
limited	O
.	O
There	O
are	O
various	O
pieces	O
that	O
are	O
missing	O
(	O
reusable	O
Streams	O
and	O
Optionals	O
as	O
Streams	O
,	O
for	O
example	O
)	O
.	O
On	O
the	O
other	O
hand	O
,	O
implementing	O
the	O
Stream	B-api_mention
API	O
was	O
certainly	O
a	O
huge	O
change	O
for	O
the	O
API	O
.	O
It	O
was	O
postponed	O
multiple	O
times	O
for	O
a	O
reason	O
.	O
So	O
I	O
guess	O
Oracle	O
wanted	O
to	O
limit	O
the	O
changes	O
to	O
the	O
most	O
important	O
use	O
cases	O
.	O
Enums	O
aren	O
’	O
t	O
used	O
that	O
much	O
anyway	O
.	O
Sure	O
,	O
every	O
project	O
has	O
a	O
couple	O
of	O
them	O
,	O
but	O
they	O
’	O
re	O
nothing	O
compared	O
to	O
the	O
number	O
of	O
Lists	O
and	O
other	O
Collections	B-api_mention
.	O
Even	O
when	O
you	O
have	O
an	O
Enum	O
,	O
in	O
many	O
cases	O
you	O
won	O
’	O
t	O
ever	O
iterate	O
over	O
it	O
.	O
Lists	O
and	O
Sets	O
,	O
on	O
the	O
other	O
hand	O
,	O
are	O
probably	O
iterated	O
over	O
almost	O
every	O
time	O
.	O
I	O
assume	O
that	O
these	O
were	O
the	O
reasons	O
why	O
the	O
Enums	O
didn	O
’	O
t	O
get	O
their	O
own	O
adapter	O
to	O
the	O
Stream	B-api_mention
world	O
.	O
We	O
’	O
ll	O
see	O
whether	O
more	O
of	O
this	O
gets	O
added	O
in	O
future	O
versions	O
.	O
And	O
until	O
then	O
you	O
always	O
can	O
use	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
.	O
Question	O
-	O
28724850	O
Running	O
the	O
following	O
stream	O
example	O
in	O
Java8	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
yields	O
:	O
/	O
a	O
/	O
b	O
/	O
c	O
/	O
d	O
/	O
e	O
/	O
f	O
Which	O
is	O
-	O
of	O
course	O
-	O
no	O
surprise	O
.	O
Due	O
to	O
#	O
a	O
it	O
shouldn	O
'	O
t	O
matter	O
whether	O
the	O
stream	O
is	O
executed	O
sequentially	O
or	O
parallel	O
:	O
#	O
blockquote	O
AFAIK	O
reduce	O
(	O
args	O
)	O
is	O
deterministic	O
and	O
(	O
s1	O
,	O
s2	O
)	O
-	O
>	O
s1	O
+	O
StringLiteral	O
+	O
s2	O
is	O
associative	O
,	O
so	O
that	O
adding	O
parallel	O
(	O
args	O
)	O
should	O
yield	O
the	O
same	O
result	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
the	O
result	O
on	O
my	O
machine	O
is	O
:	O
/	O
a	O
/	O
/	O
b	O
/	O
/	O
c	O
/	O
/	O
d	O
/	O
/	O
e	O
/	O
/	O
f	O
What	O
'	O
s	O
wrong	O
here	O
?	O
BTW	O
:	O
using	O
(	O
the	O
preferred	O
)	O
.	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
yields	O
the	O
same	O
result	O
a	O
/	O
b	O
/	O
c	O
/	O
d	O
/	O
e	O
/	O
f	O
for	O
sequential	O
and	O
parallel	O
execution	O
.	O
JVM	O
details	O
:	O
#	O
pre	O
Question	O
-	O
22694884	O
,	O
answer	O
-	O
39385411	O
As	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
a	O
throwing	O
merger	O
to	O
handle	O
multiple	O
entries	O
with	O
the	O
same	O
key	O
it	O
is	O
easy	O
:	O
#	O
pre	O
You	O
will	O
get	O
a	O
IllegalStateException	B-api_mention
for	O
duplicate	O
keys	O
.	O
But	O
at	O
the	O
end	O
I	O
am	O
not	O
sure	O
if	O
the	O
code	O
would	O
not	O
be	O
even	O
more	O
readable	O
using	O
an	O
if	O
.	O
Question	O
-	O
8881291	O
In	O
Swing	O
,	O
the	O
password	O
field	O
has	O
a	O
getPassword	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
returns	O
char	O
[	O
]	O
)	O
method	O
instead	O
of	O
the	O
usual	O
getText	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
returns	O
String	B-api_mention
)	O
method	O
.	O
Similarly	O
,	O
I	O
have	O
come	O
across	O
a	O
suggestion	O
not	O
to	O
use	O
String	B-api_mention
to	O
handle	O
passwords	O
.	O
Why	O
does	O
String	B-api_mention
pose	O
a	O
threat	O
to	O
security	O
when	O
it	O
comes	O
to	O
passwords	O
?	O
It	O
feels	O
inconvenient	O
to	O
use	O
char	O
[	O
]	O
.	O
Question	O
-	O
4772425	O
,	O
answer	O
-	O
4772461	O
Use	O
LocalDateTime	B-api_mention
#	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
or	O
ZonedDateTime	B-api_mention
#	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
if	O
the	O
string	O
happens	O
to	O
contain	O
a	O
time	O
zone	O
part	O
)	O
to	O
parse	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
into	O
a	O
LocalDateTime	B-api_mention
.	O
#	O
pre	O
Use	O
LocalDateTime	B-api_mention
#	I-api_mention
format	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
or	O
ZonedDateTime	B-api_mention
#	I-api_mention
format	I-api_mention
(	I-api_mention
)	I-api_mention
)	O
to	O
format	O
a	O
LocalDateTime	B-api_mention
into	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
.	O
#	O
pre	O
Or	O
,	O
when	O
you	O
'	O
re	O
not	O
on	O
Java	O
8	O
yet	O
,	O
use	O
SimpleDateFormat	B-api_mention
#	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
parse	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
into	O
a	O
Date	B-api_mention
.	O
#	O
pre	O
Use	O
SimpleDateFormat	B-api_mention
#	I-api_mention
format	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
format	O
a	O
Date	B-api_mention
into	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
.	O
#	O
pre	O
See	O
also	O
:	O
#	O
li	O
Java	O
string	O
to	O
date	O
conversion	O
Update	O
:	O
as	O
per	O
your	O
failed	O
attempt	O
:	O
the	O
patterns	O
are	O
case	O
sensitive	O
.	O
Read	O
the	O
java	B-api_mention
.	I-api_mention
text	I-api_mention
.	I-api_mention
SimpleDateFormat	I-api_mention
javadoc	O
what	O
the	O
individual	O
parts	O
stands	O
for	O
.	O
So	O
stands	O
for	O
example	O
M	O
for	O
months	O
and	O
m	O
for	O
minutes	O
.	O
Also	O
,	O
years	O
exist	O
of	O
four	O
digits	O
yyyy	O
,	O
not	O
five	O
yyyyy	O
.	O
Look	O
closer	O
at	O
the	O
code	O
snippets	O
I	O
posted	O
here	O
above	O
.	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275508	O
Just	O
use	O
TheClassName	O
.	O
class	O
instead	O
of	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509655	O
As	O
you	O
said	O
internally	O
the	O
last	O
concatenation	O
is	O
done	O
to	O
something	O
similar	O
to	O
String	B-api_mention
e	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
the	O
implementation	O
of	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
StringBuilder	B-api_mention
creates	O
a	O
new	O
String	B-api_mention
.	O
Here	O
is	O
the	O
implementation	O
.	O
#	O
pre	O
Comparing	O
strings	O
using	O
=	O
=	O
instead	O
of	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
true	O
only	O
if	O
both	O
strings	O
are	O
the	O
same	O
.	O
In	O
this	O
case	O
they	O
are	O
not	O
the	O
same	O
because	O
the	O
second	O
string	O
is	O
created	O
as	O
a	O
new	O
object	O
of	O
type	O
String	B-api_mention
.	O
The	O
other	O
concatenations	O
are	O
performed	O
directly	O
by	O
the	O
compiler	O
so	O
no	O
new	O
String	B-api_mention
is	O
created	O
.	O
Question	O
-	O
18448671	O
,	O
answer	O
-	O
26937769	O
Though	O
one	O
answer	O
is	O
accepted	O
and	O
this	O
is	O
an	O
old	O
one	O
,	O
I	O
thought	O
posting	O
this	O
answer	O
as	O
it	O
does	O
not	O
use	O
Iterator	B-api_mention
#	O
pre	O
Question	O
-	O
32714194	O
,	O
answer	O
-	O
32714222	O
+	O
is	O
implemented	O
in	O
java	O
compilers	O
.	O
The	O
compiler	O
replaces	O
String	B-api_mention
+	O
String	B-api_mention
with	O
either	O
compile	O
time	O
constants	O
or	O
StringBuilder	B-api_mention
code	O
.	O
Note	O
that	O
this	O
applies	O
to	O
primitives	O
too	O
.	O
i	O
.	O
e	O
,	O
int	O
i	O
=	O
1	O
+	O
2	O
could	O
get	O
directly	O
replaced	O
to	O
int	O
i	O
=	O
3	O
during	O
compilation	O
itself	O
.	O
Question	O
-	O
31419029	O
,	O
answer	O
-	O
31419077	O
If	O
you	O
look	O
at	O
the	O
implementation	O
of	O
HashMap	B-api_mention
,	O
the	O
constructor	O
looks	O
like	O
:	O
#	O
pre	O
And	O
init	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
looks	O
like	O
:	O
#	O
pre	O
So	O
initialCapacity	O
doesn	O
'	O
t	O
actually	O
get	O
used	O
to	O
create	O
an	O
array	O
.	O
Where	O
does	O
it	O
get	O
used	O
?	O
Look	O
at	O
the	O
put	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
pre	O
When	O
doing	O
a	O
put	O
,	O
the	O
array	O
is	O
actually	O
created	O
.	O
I	O
didn	O
'	O
t	O
show	O
inflateTable	O
(	O
args	O
)	O
but	O
it	O
does	O
some	O
math	O
and	O
initializes	O
the	O
array	O
.	O
Question	O
-	O
15156857	O
,	O
answer	O
-	O
15157021	O
You	O
must	O
use	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
methodReturningVoid	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
not	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
explained	O
in	O
the	O
documentation	O
Question	O
-	O
15621083	O
I	O
am	O
working	O
on	O
some	O
Java	O
code	O
which	O
needs	O
to	O
be	O
highly	O
optimized	O
as	O
it	O
will	O
run	O
in	O
hot	O
functions	O
that	O
are	O
invoked	O
at	O
many	O
points	O
in	O
my	O
main	O
program	O
logic	O
.	O
Part	O
of	O
this	O
code	O
involves	O
multiplying	O
double	O
variables	O
by	O
10	O
raised	O
to	O
arbitrary	O
non	O
-	O
negative	O
int	O
exponent	O
s	O
.	O
One	O
fast	O
way	O
(	O
edit	O
:	O
but	O
not	O
the	O
fastest	O
possible	O
,	O
see	O
Update	O
2	O
below	O
)	O
to	O
get	O
the	O
multiplied	O
value	O
is	O
to	O
switch	O
on	O
the	O
exponent	O
:	O
#	O
pre	O
The	O
commented	O
ellipses	O
above	O
indicate	O
that	O
the	O
case	O
int	O
constants	O
continue	O
incrementing	O
by	O
1	O
,	O
so	O
there	O
are	O
really	O
19	O
case	O
s	O
in	O
the	O
above	O
code	O
snippet	O
.	O
Since	O
I	O
wasn	O
'	O
t	O
sure	O
whether	O
I	O
would	O
actually	O
need	O
all	O
the	O
powers	O
of	O
10	O
in	O
case	O
statements	O
10	O
thru	O
18	O
,	O
I	O
ran	O
some	O
microbenchmarks	O
comparing	O
the	O
time	O
to	O
complete	O
10	O
million	O
operations	O
with	O
this	O
switch	O
statement	O
versus	O
a	O
switch	O
with	O
only	O
case	O
s	O
0	O
thru	O
9	O
(	O
with	O
the	O
exponent	O
limited	O
to	O
9	O
or	O
less	O
to	O
avoid	O
breaking	O
the	O
pared	O
-	O
down	O
switch	O
)	O
.	O
I	O
got	O
the	O
rather	O
surprising	O
(	O
to	O
me	O
,	O
at	O
least	O
!	O
)	O
result	O
that	O
the	O
longer	O
switch	O
with	O
more	O
case	O
statements	O
actually	O
ran	O
faster	O
.	O
On	O
a	O
lark	O
,	O
I	O
tried	O
adding	O
even	O
more	O
case	O
s	O
which	O
just	O
returned	O
dummy	O
values	O
,	O
and	O
found	O
that	O
I	O
could	O
get	O
the	O
switch	O
to	O
run	O
even	O
faster	O
with	O
around	O
22	O
-	O
27	O
declared	O
case	O
s	O
(	O
even	O
though	O
those	O
dummy	O
cases	O
are	O
never	O
actually	O
hit	O
while	O
the	O
code	O
is	O
running	O
)	O
.	O
(	O
Again	O
,	O
case	O
s	O
were	O
added	O
in	O
a	O
contiguous	O
fashion	O
by	O
incrementing	O
the	O
prior	O
case	O
constant	O
by	O
1	O
.	O
)	O
These	O
execution	O
time	O
differences	O
are	O
not	O
very	O
significant	O
:	O
for	O
a	O
random	O
exponent	O
between	O
0	O
and	O
10	O
,	O
the	O
dummy	O
padded	O
switch	O
statement	O
finishes	O
10	O
million	O
executions	O
in	O
1	O
.	O
49	O
secs	O
versus	O
1	O
.	O
54	O
secs	O
for	O
the	O
unpadded	O
version	O
,	O
for	O
a	O
grand	O
total	O
savings	O
of	O
5ns	O
per	O
execution	O
.	O
So	O
,	O
not	O
the	O
kind	O
of	O
thing	O
that	O
makes	O
obsessing	O
over	O
padding	O
out	O
a	O
switch	O
statement	O
worth	O
the	O
effort	O
from	O
an	O
optimization	O
standpoint	O
.	O
But	O
I	O
still	O
just	O
find	O
it	O
curious	O
and	O
counter	O
-	O
intuitive	O
that	O
a	O
switch	O
doesn	O
'	O
t	O
become	O
slower	O
(	O
or	O
perhaps	O
at	O
best	O
maintain	O
constant	O
O	O
(	O
1	O
)	O
time	O
)	O
to	O
execute	O
as	O
more	O
case	O
s	O
are	O
added	O
to	O
it	O
.	O
#	O
img	O
These	O
are	O
the	O
results	O
I	O
obtained	O
from	O
running	O
with	O
various	O
limits	O
on	O
the	O
randomly	O
-	O
generated	O
exponent	O
values	O
.	O
I	O
didn	O
'	O
t	O
include	O
the	O
results	O
all	O
the	O
way	O
down	O
to	O
1	O
for	O
the	O
exponent	O
limit	O
,	O
but	O
the	O
general	O
shape	O
of	O
the	O
curve	O
remains	O
the	O
same	O
,	O
with	O
a	O
ridge	O
around	O
the	O
12	O
-	O
17	O
case	O
mark	O
,	O
and	O
a	O
valley	O
between	O
18	O
-	O
28	O
.	O
All	O
tests	O
were	O
run	O
in	O
JUnitBenchmarks	O
using	O
shared	O
containers	O
for	O
the	O
random	O
values	O
to	O
ensure	O
identical	O
testing	O
inputs	O
.	O
I	O
also	O
ran	O
the	O
tests	O
both	O
in	O
order	O
from	O
longest	O
switch	O
statement	O
to	O
shortest	O
,	O
and	O
vice	O
-	O
versa	O
,	O
to	O
try	O
and	O
eliminate	O
the	O
possibility	O
of	O
ordering	O
-	O
related	O
test	O
problems	O
.	O
I	O
'	O
ve	O
put	O
my	O
testing	O
code	O
up	O
on	O
a	O
github	O
repo	O
if	O
anyone	O
wants	O
to	O
try	O
to	O
reproduce	O
these	O
results	O
.	O
So	O
,	O
what	O
'	O
s	O
going	O
on	O
here	O
?	O
Some	O
vagaries	O
of	O
my	O
architecture	O
or	O
micro	O
-	O
benchmark	O
construction	O
?	O
Or	O
is	O
the	O
Java	O
switch	O
really	O
a	O
little	O
faster	O
to	O
execute	O
in	O
the	O
18	O
to	O
28	O
case	O
range	O
than	O
it	O
is	O
from	O
11	O
up	O
to	O
17	O
?	O
github	O
test	O
repo	O
"	O
switch	O
-	O
experiment	O
"	O
UPDATE	O
:	O
I	O
cleaned	O
up	O
the	O
benchmarking	O
library	O
quite	O
a	O
bit	O
and	O
added	O
a	O
text	O
file	O
in	O
/	O
results	O
with	O
some	O
output	O
across	O
a	O
wider	O
range	O
of	O
possible	O
exponent	O
values	O
.	O
I	O
also	O
added	O
an	O
option	O
in	O
the	O
testing	O
code	O
not	O
to	O
throw	O
an	O
Exception	B-api_mention
from	O
default	O
,	O
but	O
this	O
doesn	O
'	O
t	O
appear	O
to	O
affect	O
the	O
results	O
.	O
UPDATE	O
2	O
:	O
Found	O
some	O
pretty	O
good	O
discussion	O
of	O
this	O
issue	O
from	O
back	O
in	O
2009	O
on	O
the	O
xkcd	O
forum	O
here	O
:	O
#	O
a	O
.	O
The	O
OP	O
'	O
s	O
discussion	O
of	O
using	O
Array	B-api_mention
.	I-api_mention
binarySearch	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gave	O
me	O
the	O
idea	O
for	O
a	O
simple	O
array	O
-	O
based	O
implementation	O
of	O
the	O
exponentiation	O
pattern	O
above	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
the	O
binary	O
search	O
since	O
I	O
know	O
what	O
the	O
entries	O
in	O
the	O
array	O
are	O
.	O
It	O
appears	O
to	O
run	O
about	O
3	O
times	O
faster	O
than	O
using	O
switch	O
,	O
obviously	O
at	O
the	O
expense	O
of	O
some	O
of	O
the	O
control	O
flow	O
that	O
switch	O
affords	O
.	O
That	O
code	O
has	O
been	O
added	O
to	O
the	O
github	O
repo	O
also	O
.	O
Question	O
-	O
6652687	O
#	O
blockquote	O
Is	O
there	O
a	O
convenience	O
method	O
to	O
strip	O
any	O
leading	O
or	O
trailing	O
spaces	O
from	O
a	O
Java	O
String	B-api_mention
?	O
Something	O
like	O
:	O
#	O
pre	O
Result	O
:	O
no	O
spaces	O
:	O
keep	O
this	O
myString	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
replace	O
the	O
space	O
between	O
keep	O
and	O
this	O
.	O
Thanks	O
Question	O
-	O
29183904	O
,	O
answer	O
-	O
29972028	O
Use	O
enum	O
when	O
you	O
need	O
its	O
features	O
.	O
Don	O
'	O
t	O
avoid	O
it	O
strictly	O
.	O
Java	O
enum	O
is	O
more	O
powerful	O
,	O
but	O
if	O
you	O
don	O
'	O
t	O
need	O
its	O
features	O
,	O
use	O
constants	O
,	O
they	O
occupy	O
less	O
space	O
and	O
they	O
can	O
be	O
primitive	O
itself	O
.	O
When	O
to	O
use	O
enum	O
:	O
#	O
li	O
type	O
checking	O
-	O
you	O
can	O
accept	O
only	O
listed	O
values	O
,	O
and	O
they	O
are	O
not	O
continuous	O
(	O
see	O
below	O
what	O
I	O
call	O
continuous	O
here	O
)	O
#	O
li	O
method	O
overloading	O
-	O
every	O
enum	O
constant	O
has	O
its	O
own	O
implementation	O
of	O
a	O
method	O
#	O
pre	O
#	O
li	O
more	O
data	O
-	O
your	O
one	O
constant	O
contains	O
more	O
than	O
one	O
information	O
that	O
cannot	O
be	O
put	O
in	O
one	O
variable	O
#	O
li	O
complicated	O
data	O
-	O
your	O
constant	O
need	O
methods	O
to	O
operate	O
on	O
the	O
data	O
When	O
not	O
to	O
use	O
enum	O
:	O
#	O
li	O
you	O
can	O
accept	O
all	O
values	O
of	O
one	O
type	O
,	O
and	O
your	O
constants	O
contain	O
only	O
these	O
most	O
used	O
#	O
li	O
you	O
can	O
accept	O
continuous	O
data	O
#	O
pre	O
#	O
li	O
for	O
names	O
(	O
like	O
in	O
your	O
example	O
)	O
#	O
li	O
for	O
everything	O
other	O
that	O
really	O
doesn	O
'	O
t	O
need	O
an	O
enum	O
Enum	O
occupies	O
more	O
space	O
#	O
li	O
a	O
single	O
reference	O
to	O
an	O
enum	O
constant	O
occupy	O
4	O
bytes	O
#	O
li	O
every	O
enum	O
constant	O
occupy	O
space	O
that	O
is	O
a	O
sum	O
of	O
its	O
fields	O
'	O
sizes	O
aligned	O
to	O
8	O
bytes	O
+	O
overhead	O
of	O
the	O
object	O
#	O
li	O
the	O
enum	O
class	O
itself	O
occupy	O
some	O
space	O
Constant	O
occupies	O
less	O
space	O
#	O
li	O
a	O
constant	O
doesn	O
'	O
t	O
have	O
a	O
reference	O
so	O
it	O
'	O
s	O
a	O
pure	O
data	O
(	O
even	O
if	O
it	O
'	O
s	O
a	O
reference	O
,	O
then	O
enum	O
instance	O
would	O
be	O
a	O
reference	O
to	O
another	O
reference	O
)	O
#	O
li	O
constants	O
may	O
be	O
added	O
to	O
existing	O
class	O
-	O
it	O
'	O
s	O
not	O
necessary	O
to	O
add	O
another	O
class	O
#	O
li	O
constants	O
may	O
be	O
inlined	O
;	O
it	O
brings	O
extended	O
compile	O
-	O
time	O
features	O
(	O
such	O
as	O
null	O
checking	O
,	O
finding	O
dead	O
code	O
etc	O
.	O
)	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723704	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
.	O
You	O
can	O
also	O
call	O
methods	O
which	O
handle	O
a	O
null	O
as	O
an	O
argument	O
,	O
e	O
.	O
g	O
.	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
,	O
but	O
you	O
cannot	O
reference	O
a	O
null	O
value	O
and	O
call	O
a	O
method	O
on	O
it	O
.	O
BTW	O
There	O
is	O
a	O
tricky	O
situation	O
where	O
it	O
appears	O
you	O
can	O
call	O
static	O
methods	O
on	O
null	O
values	O
.	O
#	O
pre	O
Question	O
-	O
27482579	O
,	O
answer	O
-	O
27483288	O
#	O
blockquote	O
No	O
.	O
It	O
will	O
never	O
throw	O
a	O
compilation	O
error	O
.	O
This	O
is	O
much	O
similar	O
to	O
what	O
a	O
simple	O
getter	B-api_mention
and	O
setter	B-api_mention
does	O
or	O
a	O
copy	B-api_mention
constructor	O
does	O
.	O
Remember	O
we	O
can	O
access	O
private	O
members	O
using	O
this	O
.	O
#	O
pre	O
Your	O
testPrivate	O
method	O
accepts	O
an	O
instance	O
of	O
MyClass	O
.	O
Since	O
testPrivate	O
is	O
a	O
method	O
inside	O
MyClass	O
,	O
it	O
will	O
have	O
access	O
to	O
private	O
properties	O
.	O
#	O
pre	O
Methods	O
defined	O
inside	O
the	O
class	O
will	O
always	O
have	O
access	O
to	O
it	O
'	O
s	O
private	O
members	O
,	O
through	O
this	O
.	O
and	O
instance	O
variable	O
.	O
But	O
if	O
you	O
define	O
testPrivate	O
outside	O
of	O
MyClass	O
then	O
,	O
you	O
won	O
'	O
t	O
have	O
access	O
to	O
private	O
members	O
.	O
There	O
you	O
will	O
have	O
to	O
use	O
a	O
method	O
or	O
a	O
setter	B-api_mention
or	O
a	O
getter	B-api_mention
.	O
Question	O
-	O
20363719	O
,	O
answer	O
-	O
25453317	O
If	O
your	O
key	O
is	O
NOT	O
guaranteed	O
to	O
be	O
unique	O
for	O
all	O
elements	O
in	O
the	O
list	O
,	O
you	O
should	O
convert	O
it	O
to	O
a	O
Map	B-api_mention
<	O
String	B-api_mention
,	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
instead	O
of	O
a	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Map	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
result	O
=	O
choices	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276493	O
You	O
can	O
close	O
the	O
outer	O
most	O
stream	O
,	O
in	O
fact	O
you	O
don	O
'	O
t	O
need	O
to	O
retain	O
all	O
the	O
streams	O
wrapped	O
and	O
you	O
can	O
use	O
Java	O
7	O
try	O
-	O
with	O
-	O
resources	O
.	O
#	O
pre	O
If	O
you	O
subscribe	O
to	O
YAGNI	O
,	O
or	O
you	O
-	O
aint	O
-	O
gonna	O
-	O
need	O
-	O
it	O
,	O
you	O
should	O
be	O
only	O
adding	O
code	O
you	O
actually	O
need	O
.	O
You	O
shouldn	O
'	O
t	O
be	O
adding	O
code	O
you	O
imagine	O
you	O
might	O
need	O
but	O
in	O
reality	O
doesn	O
'	O
t	O
do	O
anything	O
useful	O
.	O
Take	O
this	O
example	O
and	O
imagine	O
what	O
could	O
possibly	O
go	O
wrong	O
if	O
you	O
didn	O
'	O
t	O
do	O
this	O
and	O
what	O
the	O
impact	O
would	O
be	O
?	O
#	O
pre	O
Lets	O
start	O
with	O
FileOutputStream	B-api_mention
which	O
calls	O
open	O
to	O
do	O
all	O
the	O
real	O
work	O
.	O
/	O
*	O
*	O
*	O
Opens	O
a	O
file	O
,	O
with	O
the	O
specified	O
name	O
,	O
for	O
overwriting	O
or	O
appending	O
.	O
*	O
@	O
param	O
name	O
name	O
of	O
file	O
to	O
be	O
opened	O
*	O
@	O
param	O
append	O
whether	O
the	O
file	O
is	O
to	O
be	O
opened	O
in	O
append	O
mode	O
*	O
/	O
private	O
native	O
void	O
open	O
(	O
args	O
)	O
throws	O
FileNotFoundException	B-api_mention
;	O
If	O
the	O
file	O
is	O
not	O
found	O
,	O
there	O
is	O
no	O
underlying	O
resource	O
to	O
close	O
,	O
so	O
closing	O
it	O
won	O
'	O
t	O
make	O
any	O
difference	O
.	O
If	O
The	O
file	O
exists	O
,	O
it	O
should	O
be	O
throwing	O
a	O
FileNotFoundException	B-api_mention
.	O
So	O
there	O
is	O
nothing	O
to	O
be	O
gained	O
by	O
trying	O
to	O
close	O
the	O
resource	O
from	O
this	O
line	O
alone	O
.	O
The	O
reason	O
you	O
need	O
to	O
close	O
the	O
file	O
is	O
when	O
the	O
file	O
is	O
opened	O
successfully	O
,	O
but	O
you	O
later	O
get	O
an	O
error	O
.	O
Lets	O
look	O
at	O
the	O
next	O
stream	O
GZIPOutputStream	B-api_mention
There	O
is	O
code	O
which	O
can	O
throw	O
an	O
exception	O
#	O
pre	O
This	O
writes	O
the	O
header	O
of	O
the	O
file	O
.	O
Now	O
it	O
would	O
be	O
very	O
unusual	O
for	O
you	O
to	O
be	O
able	O
to	O
open	O
a	O
file	O
for	O
writing	O
but	O
not	O
be	O
able	O
to	O
write	O
even	O
8	O
bytes	O
to	O
it	O
,	O
but	O
lets	O
imagine	O
this	O
could	O
happen	O
and	O
we	O
don	O
'	O
t	O
close	O
the	O
file	O
afterwards	O
.	O
What	O
does	O
happen	O
to	O
a	O
file	O
if	O
it	O
is	O
not	O
closed	O
?	O
You	O
don	O
'	O
t	O
get	O
any	O
unflushed	O
writes	O
,	O
they	O
are	O
discarded	O
and	O
in	O
this	O
case	O
,	O
there	O
is	O
no	O
successfully	O
written	O
bytes	O
to	O
the	O
stream	O
which	O
isn	O
'	O
t	O
buffered	O
at	O
this	O
point	O
anyway	O
.	O
But	O
a	O
file	O
which	O
is	O
not	O
closed	O
doesn	O
'	O
t	O
live	O
forever	O
,	O
instead	O
FileOutputStream	B-api_mention
has	O
#	O
pre	O
If	O
you	O
don	O
'	O
t	O
close	O
a	O
file	O
at	O
all	O
,	O
it	O
gets	O
closed	O
anyway	O
,	O
just	O
not	O
immediately	O
(	O
and	O
like	O
I	O
said	O
,	O
data	O
which	O
is	O
left	O
in	O
a	O
buffer	O
will	O
be	O
lost	O
this	O
way	O
,	O
but	O
there	O
is	O
none	O
at	O
this	O
point	O
)	O
What	O
is	O
the	O
consequence	O
of	O
not	O
closing	O
the	O
file	O
immediately	O
?	O
Under	O
normal	O
conditions	O
,	O
you	O
potentially	O
lose	O
some	O
data	O
,	O
and	O
you	O
potentially	O
run	O
out	O
of	O
file	O
descriptors	O
.	O
But	O
if	O
you	O
have	O
a	O
system	O
where	O
you	O
can	O
create	O
files	O
but	O
you	O
can	O
'	O
t	O
write	O
anything	O
to	O
them	O
,	O
you	O
have	O
a	O
bigger	O
problem	O
.	O
i	O
.	O
e	O
.	O
it	O
hard	O
to	O
imagine	O
why	O
you	O
are	O
repeatedly	O
trying	O
to	O
create	O
this	O
file	O
despite	O
the	O
fact	O
you	O
are	O
failing	O
.	O
Both	O
OutputStreamWriter	B-api_mention
and	O
BufferedWriter	B-api_mention
don	O
'	O
t	O
throw	O
IOException	B-api_mention
in	O
their	O
constructors	O
,	O
so	O
it	O
not	O
clear	O
what	O
problem	O
they	O
would	O
cause	O
.	O
In	O
The	O
case	O
of	O
BufferedWriter	B-api_mention
,	O
you	O
could	O
get	O
an	O
OutOfMemoryError	B-api_mention
.	O
In	O
this	O
case	O
it	O
will	O
immediately	O
trigger	O
a	O
GC	O
,	O
which	O
as	O
we	O
have	O
seen	O
will	O
close	O
the	O
file	O
anyway	O
.	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5103360	O
We	O
usually	O
have	O
two	O
IDs	O
in	O
our	O
entities	O
:	O
#	O
li	O
Is	O
for	O
persistence	O
layer	O
only	O
(	O
so	O
that	O
persistence	O
provider	O
and	O
database	O
can	O
figure	O
out	O
relationships	O
between	O
objects	O
)	O
.	O
#	O
li	O
Is	O
for	O
our	O
application	O
needs	O
(	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
particular	O
)	O
Take	O
a	O
look	O
:	O
#	O
pre	O
EDIT	O
:	O
to	O
clarify	O
my	O
point	O
regarding	O
calls	O
to	O
setUuid	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
'	O
s	O
a	O
typical	O
scenario	O
:	O
#	O
pre	O
When	O
I	O
run	O
my	O
tests	O
and	O
see	O
the	O
log	O
output	O
I	O
fix	O
the	O
problem	O
:	O
#	O
pre	O
Alternatively	O
,	O
one	O
can	O
provide	O
a	O
separate	O
constructor	O
:	O
#	O
pre	O
So	O
my	O
example	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
use	O
a	O
default	O
constructor	O
and	O
a	O
setter	O
,	O
but	O
you	O
may	O
find	O
two	O
-	O
constructors	O
approach	O
more	O
suitable	O
for	O
you	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32852619	O
Because	O
it	O
'	O
s	O
much	O
faster	O
!	O
I	O
ran	O
some	O
thorough	O
benchmarking	O
tests	O
on	O
cut	O
down	O
versions	O
of	O
the	O
two	O
methods	O
:	O
#	O
pre	O
operating	O
on	O
arrays	O
of	O
various	O
sizes	O
containing	O
random	O
values	O
.	O
Here	O
are	O
the	O
(	O
typical	O
)	O
results	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
results	O
when	O
operating	O
over	O
an	O
array	O
filled	O
with	O
nulls	O
(	O
so	O
garbage	O
collection	O
issues	O
are	O
eradicated	O
)	O
:	O
#	O
pre	O
The	O
numbers	O
are	O
in	O
nanoseconds	O
,	O
(	O
sd	O
)	O
is	O
1	O
standard	O
deviation	O
expressed	O
as	O
a	O
percentage	O
of	O
the	O
result	O
(	O
fyi	O
,	O
a	O
"	O
normally	O
distributed	O
"	O
population	O
has	O
an	O
SD	O
of	O
68	O
)	O
,	O
vs	O
is	O
the	O
JDK	O
8	O
timing	O
relative	O
to	O
JDK	O
7	O
.	O
It	O
is	O
interesting	O
that	O
not	O
only	O
is	O
it	O
significantly	O
faster	O
,	O
but	O
the	O
deviation	O
is	O
also	O
slightly	O
narrower	O
,	O
which	O
means	O
that	O
the	O
JDK	O
8	O
implementation	O
gives	O
slightly	O
more	O
consistent	O
performance	O
.	O
The	O
tests	O
were	O
run	O
on	O
jdk	O
1	O
.	O
8	O
.	O
0	O
_	O
45	O
over	O
a	O
large	O
(	O
millions	O
)	O
number	O
of	O
times	O
on	O
arrays	O
populated	O
with	O
random	O
Integer	B-api_mention
objects	O
.	O
To	O
remove	O
out	O
-	O
lying	O
numbers	O
,	O
on	O
each	O
set	O
of	O
results	O
the	O
fastest	O
and	O
slowest	O
3	O
%	O
of	O
timings	O
were	O
discarded	O
.	O
Garbage	O
collection	O
was	O
requested	O
and	O
the	O
thread	O
yielded	O
and	O
slept	O
just	O
prior	O
to	O
running	O
each	O
invocation	O
of	O
the	O
method	O
.	O
JVM	O
warm	O
up	O
was	O
done	O
on	O
the	O
first	O
20	O
%	O
of	O
work	O
and	O
those	O
results	O
were	O
discarded	O
.	O
Question	O
-	O
16324831	O
Why	O
do	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
null	I-api_mention
)	I-api_mention
and	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
null	I-api_mention
)	I-api_mention
throw	O
different	O
exceptions	O
?	O
Is	O
this	O
a	O
historical	O
accident	O
or	O
intentional	O
?	O
The	O
documentation	O
clearly	O
states	O
two	O
types	O
of	O
exceptions	O
for	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
and	O
one	O
for	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
but	O
it	O
seems	O
inconsistent	O
:	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
throws	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
NumberFormatException	I-api_mention
:	O
null	O
However	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
throws	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
NullPointerException	I-api_mention
Question	O
-	O
12539365	O
,	O
answer	O
-	O
12562433	O
This	O
is	O
great	O
question	O
!	O
I	O
think	O
the	O
root	O
cause	O
of	O
it	O
is	O
the	O
following	O
,	O
we	O
are	O
using	O
JUnit	O
not	O
only	O
for	O
unit	O
testing	O
.	O
So	O
the	O
question	O
should	O
be	O
splited	O
up	O
:	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
black	O
-	O
box	O
unit	O
-	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
white	O
-	O
box	O
unit	O
-	O
testing	O
?	O
so	O
if	O
we	O
will	O
ignore	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
,	O
the	O
question	O
can	O
be	O
rephrased	O
"	O
Using	O
white	O
-	O
box	O
unit	O
-	O
testing	O
with	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
creates	O
great	O
couple	O
between	O
unit	O
test	O
and	O
my	O
could	O
implementation	O
,	O
can	O
I	O
make	O
some	O
"	O
grey	O
-	O
box	O
"	O
unit	O
-	O
testing	O
and	O
what	O
rules	O
of	O
thumb	O
I	O
should	O
use	O
for	O
this	O
"	O
.	O
Now	O
,	O
let	O
'	O
s	O
go	O
through	O
all	O
of	O
this	O
step	O
-	O
by	O
-	O
step	O
.	O
*	O
-	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
*	O
I	O
think	O
the	O
answer	O
is	O
clearly	O
no	O
,	O
moreover	O
you	O
shouldn	O
'	O
t	O
use	O
mocks	O
for	O
this	O
.	O
Your	O
test	O
should	O
be	O
as	O
close	O
to	O
real	O
application	O
as	O
possible	O
.	O
You	O
are	O
testing	O
complete	O
use	O
case	O
,	O
not	O
isolated	O
part	O
of	O
the	O
application	O
.	O
*	O
black	O
-	O
box	O
vs	O
white	O
-	O
box	O
unit	O
-	O
testing	O
black	O
-	O
box	O
state	O
If	O
you	O
are	O
using	O
white	O
-	O
box	O
approach	O
what	O
is	O
you	O
really	O
doing	O
,	O
you	O
'	O
re	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
.	O
In	O
this	O
approach	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
should	O
verify	O
that	O
your	O
unit	O
behaves	O
as	O
you	O
'	O
re	O
expecting	O
to	O
.	O
rules	O
of	O
thumbs	O
for	O
grey	O
-	O
box	O
-	O
testing	O
The	O
problem	O
with	O
white	O
-	O
box	O
testing	O
is	O
it	O
creates	O
a	O
high	O
coupling	O
.	O
One	O
possible	O
solution	O
is	O
to	O
do	O
grey	O
-	O
box	O
-	O
testing	O
,	O
not	O
white	O
-	O
box	O
-	O
testing	O
.	O
This	O
is	O
sort	O
of	O
combination	O
of	O
black	O
&	O
white	O
box	O
testing	O
.	O
You	O
are	O
really	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
like	O
in	O
white	O
-	O
box	O
testing	O
,	O
but	O
in	O
general	O
you	O
make	O
it	O
implementation	O
-	O
agnostic	O
when	O
possible	O
.	O
When	O
it	O
is	O
possible	O
,	O
you	O
will	O
just	O
make	O
a	O
check	O
like	O
in	O
black	O
-	O
box	O
case	O
,	O
just	O
asserts	O
that	O
output	O
is	O
what	O
is	O
your	O
expected	O
to	O
be	O
.	O
So	O
,	O
the	O
essence	O
of	O
your	O
question	O
is	O
when	O
it	O
is	O
possible	O
.	O
This	O
is	O
really	O
hard	O
.	O
I	O
don	O
'	O
t	O
have	O
a	O
good	O
example	O
,	O
but	O
I	O
can	O
give	O
you	O
to	O
examples	O
.	O
In	O
the	O
case	O
that	O
was	O
mentioned	O
above	O
with	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
vs	O
equalsIgnoreCase	B-api_mention
(	I-api_mention
)	I-api_mention
you	O
shouldn	O
'	O
t	O
call	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
just	O
assert	O
the	O
output	O
.	O
If	O
you	O
couldn	O
'	O
t	O
do	O
it	O
,	O
break	O
down	O
your	O
code	O
to	O
the	O
smaller	O
unit	O
,	O
until	O
you	O
can	O
do	O
it	O
.	O
On	O
the	O
other	O
hand	O
,	O
suppose	O
you	O
have	O
some	O
@	O
Service	O
and	O
you	O
are	O
writting	O
@	O
Web	O
-	O
Service	O
that	O
is	O
essentially	O
wrapper	O
upon	O
your	O
@	O
Service	O
-	O
it	O
delegates	O
all	O
calls	O
to	O
the	O
@	O
Service	O
(	O
and	O
making	O
some	O
extra	O
error	O
handling	O
)	O
.	O
In	O
this	O
case	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
shouldn	O
'	O
t	O
duplicate	O
all	O
of	O
your	O
checks	O
that	O
you	O
did	O
for	O
the	O
@	O
Serive	O
,	O
verifying	O
that	O
you	O
'	O
re	O
calling	O
to	O
@	O
Service	O
with	O
correct	O
parammeter	O
list	O
is	O
sufficient	O
.	O
Question	O
-	O
23756966	O
While	O
investigating	O
for	O
a	O
little	O
debate	O
w	O
.	O
r	O
.	O
t	O
.	O
using	O
StringLiteral	O
+	O
n	O
and	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
to	O
convert	O
an	O
integer	O
primitive	O
to	O
a	O
string	O
I	O
wrote	O
this	O
JMH	O
microbenchmark	O
:	O
#	O
pre	O
I	O
ran	O
it	O
with	O
the	O
default	O
JMH	O
options	O
with	O
both	O
Java	O
VMs	O
that	O
exist	O
on	O
my	O
Linux	O
machine	O
(	O
up	O
-	O
to	O
-	O
date	O
Mageia	O
4	O
64	O
-	O
bit	O
,	O
Intel	O
i7	O
-	O
3770	O
CPU	O
,	O
32GB	O
RAM	O
)	O
.	O
The	O
first	O
JVM	O
was	O
the	O
one	O
supplied	O
with	O
Oracle	O
JDK	O
8u5	O
64	O
-	O
bit	O
:	O
#	O
pre	O
With	O
this	O
JVM	O
I	O
got	O
pretty	O
much	O
what	O
I	O
expected	O
:	O
#	O
pre	O
I	O
.	O
e	O
.	O
using	O
the	O
StringBuilder	B-api_mention
class	O
is	O
slower	O
due	O
to	O
the	O
additional	O
overhead	O
of	O
creating	O
the	O
StringBuilder	B-api_mention
object	O
and	O
appending	O
an	O
empty	O
string	O
.	O
Using	O
String	B-api_mention
.	I-api_mention
format	I-api_mention
(	I-api_mention
args	I-api_mention
)	O
is	O
even	O
slower	O
,	O
by	O
an	O
order	O
of	O
magnitude	O
or	O
so	O
.	O
The	O
distribution	O
-	O
provided	O
compiler	O
,	O
on	O
the	O
other	O
hand	O
,	O
is	O
based	O
on	O
OpenJDK	O
1	O
.	O
7	O
:	O
#	O
pre	O
The	O
results	O
here	O
were	O
interesting	O
:	O
#	O
pre	O
Why	O
does	O
StringBuilder	B-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
appear	O
so	O
much	O
faster	O
with	O
this	O
JVM	O
?	O
Looking	O
at	O
the	O
StringBuilder	B-api_mention
class	O
source	O
code	O
revealed	O
nothing	O
particularly	O
interesting	O
-	O
the	O
method	O
in	O
question	O
is	O
almost	O
identical	O
to	O
Integer	B-api_mention
#	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Interestingly	O
enough	O
,	O
appending	O
the	O
result	O
of	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
the	O
stringBuilder2	O
microbenchmark	O
)	O
does	O
not	O
appear	O
to	O
be	O
faster	O
.	O
Is	O
this	O
performance	O
discrepancy	O
an	O
issue	O
with	O
the	O
testing	O
harness	O
?	O
Or	O
does	O
my	O
OpenJDK	O
JVM	O
contain	O
optimizations	O
that	O
would	O
affect	O
this	O
particular	O
code	O
(	O
anti	O
)	O
-	O
pattern	O
?	O
EDIT	O
:	O
For	O
a	O
more	O
straight	O
-	O
forward	O
comparison	O
,	O
I	O
installed	O
Oracle	O
JDK	O
1	O
.	O
7u55	O
:	O
#	O
pre	O
The	O
results	O
are	O
similar	O
to	O
those	O
of	O
OpenJDK	O
:	O
#	O
pre	O
It	O
seems	O
that	O
this	O
is	O
a	O
more	O
general	O
Java	O
7	O
vs	O
Java	O
8	O
issue	O
.	O
Perhaps	O
Java	O
7	O
had	O
more	O
aggressive	O
string	O
optimizations	O
?	O
EDIT	O
2	O
:	O
For	O
completeness	O
,	O
here	O
are	O
the	O
string	O
-	O
related	O
VM	O
options	O
for	O
both	O
of	O
these	O
JVMs	O
:	O
For	O
Oracle	O
JDK	O
8u5	O
:	O
#	O
pre	O
For	O
OpenJDK	O
1	O
.	O
7	O
:	O
#	O
pre	O
The	O
UseStringCache	B-api_mention
option	O
was	O
removed	O
in	O
Java	O
8	O
with	O
no	O
replacement	O
,	O
so	O
I	O
doubt	O
that	O
makes	O
any	O
difference	O
.	O
The	O
rest	O
of	O
the	O
options	O
appear	O
to	O
have	O
the	O
same	O
settings	O
.	O
EDIT	O
3	O
:	O
A	O
side	O
-	O
by	O
-	O
side	O
comparison	O
of	O
the	O
source	O
code	O
of	O
the	O
AbstractStringBuilder	B-api_mention
,	O
StringBuilder	B-api_mention
and	O
Integer	B-api_mention
classes	O
from	O
the	O
src	O
.	O
zip	O
file	O
of	O
reveals	O
nothing	O
noteworty	O
.	O
Apart	O
from	O
a	O
whole	O
lot	O
of	O
cosmetic	O
and	O
documentation	O
changes	O
,	O
Integer	B-api_mention
now	O
has	O
some	O
support	O
for	O
unsigned	O
integers	O
and	O
StringBuilder	B-api_mention
has	O
been	O
slightly	O
refactored	O
to	O
share	O
more	O
code	O
with	O
StringBuffer	B-api_mention
.	O
None	O
of	O
these	O
changes	O
seem	O
to	O
affect	O
the	O
code	O
paths	O
used	O
by	O
StringBuilder	B-api_mention
#	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
although	O
I	O
may	O
have	O
missed	O
something	O
.	O
A	O
comparison	O
of	O
the	O
assembly	O
code	O
generated	O
for	O
IntStr	B-api_mention
#	I-api_mention
integerToString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
IntStr	B-api_mention
#	I-api_mention
stringBuilder0	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
far	O
more	O
interesting	O
.	O
The	O
basic	O
layout	O
of	O
the	O
code	O
generated	O
for	O
IntStr	B-api_mention
#	I-api_mention
integerToString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
similar	O
for	O
both	O
JVMs	O
,	O
although	O
Oracle	O
JDK	O
8u5	O
seemed	O
to	O
be	O
more	O
aggressive	O
w	O
.	O
r	O
.	O
t	O
.	O
inlining	O
some	O
calls	O
within	O
the	O
Integer	B-api_mention
#	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
code	O
.	O
There	O
was	O
a	O
clear	O
correspondence	O
with	O
the	O
Java	O
source	O
code	O
,	O
even	O
for	O
someone	O
with	O
minimal	O
assembly	O
experience	O
.	O
The	O
assembly	O
code	O
for	O
IntStr	B-api_mention
#	I-api_mention
stringBuilder0	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
however	O
,	O
was	O
radically	O
different	O
.	O
The	O
code	O
generated	O
by	O
Oracle	O
JDK	O
8u5	O
was	O
once	O
again	O
directly	O
related	O
to	O
the	O
Java	O
source	O
code	O
-	O
I	O
could	O
easily	O
recognise	O
the	O
same	O
layout	O
.	O
On	O
the	O
contrary	O
,	O
the	O
code	O
generated	O
by	O
OpenJDK	O
7	O
was	O
almost	O
unrecognisable	O
to	O
the	O
untrained	O
eye	O
(	O
like	O
mine	O
)	O
.	O
The	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
was	O
seemingly	O
removed	O
,	O
as	O
was	O
the	O
creation	O
of	O
the	O
array	O
in	O
the	O
StringBuilder	B-api_mention
constructor	O
.	O
Additionaly	O
,	O
the	O
disassembler	O
plugin	O
was	O
not	O
able	O
to	O
provide	O
as	O
many	O
references	O
to	O
the	O
source	O
code	O
as	O
it	O
did	O
in	O
JDK	O
8	O
.	O
I	O
assume	O
that	O
this	O
is	O
either	O
the	O
result	O
of	O
a	O
much	O
more	O
aggressive	O
optimization	O
pass	O
in	O
OpenJDK	O
7	O
,	O
or	O
more	O
probably	O
the	O
result	O
of	O
inserting	O
hand	O
-	O
written	O
low	O
-	O
level	O
code	O
for	O
certain	O
StringBuilder	B-api_mention
operations	O
.	O
I	O
am	O
unsure	O
why	O
this	O
optimization	O
does	O
not	O
happen	O
in	O
my	O
JVM	O
8	O
implementation	O
or	O
why	O
the	O
same	O
optimizations	O
were	O
not	O
implemented	O
for	O
Integer	B-api_mention
#	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
JVM	O
7	O
.	O
I	O
guess	O
someone	O
familiar	O
with	O
the	O
related	O
parts	O
of	O
the	O
JRE	O
source	O
code	O
would	O
have	O
to	O
answer	O
these	O
questions	O
.	O
.	O
.	O
Question	O
-	O
16232833	O
I	O
'	O
m	O
using	O
Spring	O
MVC	O
for	O
a	O
simple	O
JSON	O
API	O
,	O
with	O
@	O
ResponseBody	O
based	O
approach	O
like	O
the	O
following	O
.	O
(	O
I	O
already	O
have	O
a	O
service	O
layer	O
producing	O
JSON	O
directly	O
.	O
)	O
#	O
pre	O
Question	O
is	O
,	O
in	O
the	O
given	O
scenario	O
,	O
what	O
is	O
the	O
simplest	O
,	O
cleanest	O
way	O
to	O
respond	O
with	O
a	O
HTTP	O
400	O
error	O
?	O
I	O
did	O
come	O
across	O
approaches	O
like	O
:	O
return	O
new	O
ResponseEntity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
.	O
.	O
but	O
I	O
can	O
'	O
t	O
use	O
it	O
here	O
since	O
my	O
method	O
'	O
s	O
return	O
type	O
is	O
String	B-api_mention
,	O
not	O
ResponseEntity	B-api_mention
.	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
15656208	O
This	O
is	O
favorite	O
interview	O
question	O
.	O
Interviewer	O
tries	O
to	O
find	O
out	O
here	O
,	O
how	O
much	O
you	O
understand	O
about	O
behavior	O
of	O
objects	O
with	O
respect	O
to	O
constructors	O
,	O
methods	O
,	O
class	O
variables	O
(	O
static	O
variables	O
)	O
,	O
instance	O
variables	O
.	O
#	O
pre	O
In	O
above	O
case	O
we	O
have	O
defined	O
Test	O
constructor	O
and	O
setFoo	O
method	O
.	O
About	O
constructor	O
:	O
Constructor	O
can	O
be	O
invoked	O
only	O
one	O
time	O
per	O
object	O
creation	O
by	O
using	O
new	O
keyword	O
.	O
Programmer	O
cannot	O
invoke	O
constructor	O
many	O
times	O
because	O
constructor	O
are	O
designed	O
so	O
.	O
About	O
method	O
:	O
Method	O
can	O
be	O
invoked	O
as	O
many	O
time	O
as	O
programmer	O
wants	O
and	O
compiler	O
knows	O
it	O
programmer	O
may	O
invoke	O
method	O
zero	O
or	O
multiple	O
time	O
.	O
Scenario	O
1	O
private	O
final	O
List	B-api_mention
foo	O
;	O
/	O
/	O
1	O
foo	O
is	O
an	O
instance	O
variable	O
.	O
When	O
we	O
create	O
Test	O
class	O
'	O
object	O
then	O
instance	O
variable	O
foo	O
will	O
be	O
copied	O
inside	O
object	O
of	O
Test	O
class	O
.	O
If	O
we	O
assign	O
foo	O
inside	O
constructor	O
then	O
compiler	O
know	O
that	O
Constructor	O
will	O
be	O
invoked	O
only	O
one	O
time	O
.	O
so	O
there	O
is	O
no	O
problem	O
to	O
assign	O
it	O
inside	O
constructor	O
.	O
If	O
we	O
assign	O
foo	O
inside	O
method	O
then	O
compiler	O
knows	O
that	O
method	O
may	O
be	O
invoked	O
multiple	O
time	O
.	O
So	O
value	O
will	O
have	O
to	O
be	O
changed	O
multiple	O
time	O
which	O
is	O
not	O
allowed	O
for	O
final	O
variable	O
.	O
You	O
can	O
assign	O
value	O
to	O
the	O
final	O
variable	O
only	O
one	O
time	O
.	O
So	O
compiler	O
decides	O
constructor	O
is	O
good	O
choice	O
!	O
Scenario	O
2	O
private	O
static	O
final	O
List	B-api_mention
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
foo	O
is	O
now	O
static	O
variable	O
.	O
When	O
we	O
create	O
object	O
of	O
Test	O
class	O
then	O
foo	O
will	O
not	O
be	O
copied	O
to	O
the	O
object	O
of	O
Test	O
class	O
because	O
foo	O
is	O
static	O
.	O
Now	O
foo	O
is	O
not	O
the	O
property	O
of	O
each	O
object	O
.	O
This	O
is	O
the	O
property	O
of	O
Test	O
class	O
.	O
But	O
foo	O
can	O
be	O
seen	O
by	O
many	O
objects	O
and	O
if	O
every	O
object	O
which	O
is	O
created	O
by	O
using	O
new	O
keyword	O
which	O
ultimately	O
invoke	O
Test	O
constructor	O
then	O
value	O
will	O
be	O
changed	O
at	O
the	O
time	O
of	O
multiple	O
object	O
creation	O
(	O
Remember	O
static	O
foo	O
is	O
not	O
copied	O
in	O
every	O
object	O
now	O
but	O
is	O
shared	O
between	O
multiple	O
objects	O
.	O
)	O
Scenario	O
3	O
t	O
.	O
foo	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
Modification	O
-	O
2	O
Above	O
Modification	O
-	O
2	O
is	O
from	O
your	O
question	O
.	O
In	O
above	O
case	O
you	O
are	O
not	O
changing	O
first	O
referenced	O
object	O
but	O
you	O
are	O
adding	O
contents	O
inside	O
foo	O
which	O
is	O
allowed	O
.	O
Compiler	O
complains	O
if	O
you	O
try	O
to	O
assign	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
object	O
to	O
the	O
foo	O
reference	O
variable	O
.	O
Rule	O
is	O
that	O
if	O
you	O
have	O
initialized	O
object	O
to	O
final	O
reference	O
variable	O
then	O
you	O
cannot	O
change	O
it	O
to	O
refer	O
different	O
ArrayList	B-api_mention
object	O
.	O
(	O
in	O
this	O
case	O
ArrayList	B-api_mention
)	O
final	O
class	O
cannot	O
be	O
subclassed	O
final	O
methods	O
cannot	O
be	O
overridden	O
.	O
(	O
This	O
method	O
is	O
in	O
superclass	O
)	O
final	O
methods	O
can	O
override	O
.	O
(	O
Read	O
this	O
in	O
grammatical	O
way	O
.	O
This	O
method	O
is	O
in	O
subclass	O
)	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15446006	O
I	O
actually	O
wrote	O
a	O
blog	O
post	O
on	O
the	O
topic	O
2	O
months	O
ago	O
.	O
The	O
article	O
is	O
for	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
but	O
Java	O
'	O
s	O
ArrayList	B-api_mention
has	O
a	O
very	O
similar	O
implementation	O
.	O
Since	O
ArrayList	B-api_mention
is	O
implemented	O
using	O
a	O
dynamic	O
array	O
,	O
it	O
increases	O
in	O
size	O
on	O
demand	O
.	O
So	O
the	O
reason	O
for	O
the	O
capacity	O
constructor	O
is	O
for	O
optimisation	O
purposes	O
.	O
When	O
one	O
of	O
these	O
resizings	O
operation	O
occurs	O
,	O
the	O
ArrayList	B-api_mention
copies	O
the	O
contents	O
of	O
the	O
array	O
into	O
a	O
new	O
array	O
that	O
is	O
twice	O
the	O
capacity	O
of	O
the	O
old	O
one	O
.	O
This	O
operation	O
runs	O
in	O
O	O
(	O
n	O
)	O
time	O
.	O
Example	O
Here	O
is	O
an	O
example	O
of	O
how	O
the	O
ArrayList	B-api_mention
would	O
increase	O
in	O
size	O
:	O
#	O
pre	O
So	O
the	O
list	O
starts	O
with	O
a	O
capacity	O
of	O
10	O
,	O
when	O
the	O
11th	O
item	O
is	O
added	O
it	O
is	O
increase	O
by	O
50	O
%	O
+	O
1	O
to	O
16	O
.	O
On	O
the	O
17th	O
item	O
the	O
ArrayList	B-api_mention
is	O
increased	O
again	O
to	O
25	O
and	O
so	O
on	O
.	O
Now	O
consider	O
the	O
example	O
where	O
we	O
'	O
re	O
creating	O
a	O
list	O
where	O
the	O
desired	O
capacity	O
is	O
already	O
known	O
as	O
1000000	O
.	O
Creating	O
the	O
ArrayList	B-api_mention
without	O
the	O
size	O
constructor	O
will	O
call	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
1000000	O
times	O
which	O
takes	O
O	O
(	O
1	O
)	O
normally	O
or	O
O	O
(	O
n	O
)	O
on	O
resize	O
.	O
#	O
blockquote	O
Compare	O
this	O
using	O
the	O
constructor	O
and	O
then	O
calling	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
which	O
is	O
guaranteed	O
to	O
run	O
in	O
O	O
(	O
1	O
)	O
.	O
#	O
blockquote	O
Java	O
vs	O
C	O
#	O
Java	O
is	O
as	O
above	O
,	O
starting	O
at	O
10	O
and	O
increasing	O
each	O
resize	O
at	O
50	O
%	O
+	O
1	O
.	O
C	O
#	O
starts	O
at	O
4	O
and	O
increases	O
much	O
more	O
aggressively	O
,	O
doubling	O
at	O
each	O
resize	O
.	O
The	O
1000000	O
adds	O
example	O
from	O
above	O
for	O
C	O
#	O
uses	O
3097084	O
operations	O
.	O
References	O
#	O
li	O
My	O
blog	O
post	O
on	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
#	O
li	O
Java	O
'	O
s	O
ArrayList	B-api_mention
source	O
code	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
12685471	O
The	O
kind	O
of	O
output	O
you	O
are	O
seeing	O
from	O
your	O
byte	O
array	O
(	O
[	O
B	O
@	O
405217f8	O
)	O
is	O
also	O
an	O
output	O
for	O
a	O
zero	O
length	O
byte	O
array	O
(	O
ie	O
new	O
byte	O
[	O
0	O
]	O
)	O
.	O
It	O
looks	O
like	O
this	O
string	O
is	O
a	O
reference	O
to	O
the	O
array	O
rather	O
than	O
a	O
description	O
of	O
the	O
contents	O
of	O
the	O
array	O
like	O
we	O
might	O
expect	O
from	O
a	O
regular	O
collection	O
'	O
s	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
As	O
with	O
other	O
respondents	O
,	O
I	O
would	O
point	O
you	O
to	O
the	O
String	B-api_mention
constructors	O
that	O
accept	O
a	O
byte	O
[	O
]	O
parameter	O
to	O
construct	O
a	O
string	O
from	O
the	O
contents	O
of	O
a	O
byte	O
array	O
.	O
You	O
should	O
be	O
able	O
to	O
read	O
raw	O
bytes	O
from	O
a	O
socket	O
'	O
s	O
InputStream	B-api_mention
if	O
you	O
want	O
to	O
obtain	O
bytes	O
from	O
a	O
TCP	O
connection	O
.	O
If	O
you	O
have	O
already	O
read	O
those	O
bytes	O
as	O
a	O
String	B-api_mention
(	O
using	O
an	O
InputStreamReader	B-api_mention
)	O
,	O
then	O
,	O
the	O
string	O
can	O
be	O
converted	O
to	O
bytes	O
using	O
the	O
getBytes	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
.	O
Be	O
sure	O
to	O
pass	O
in	O
your	O
desired	O
character	O
set	O
to	O
both	O
the	O
String	B-api_mention
constructor	O
and	O
getBytes	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
functions	O
,	O
and	O
this	O
will	O
only	O
work	O
if	O
the	O
byte	O
data	O
can	O
be	O
converted	O
to	O
characters	O
by	O
the	O
InputStreamReader	B-api_mention
.	O
If	O
you	O
want	O
to	O
deal	O
with	O
raw	O
bytes	O
you	O
should	O
really	O
avoid	O
using	O
this	O
stream	O
reader	O
layer	O
.	O
Question	O
-	O
29333689	O
The	O
following	O
is	O
taken	O
from	O
a	O
job	O
interview	O
:	O
#	O
blockquote	O
I	O
thought	O
about	O
using	O
an	O
HashSet	B-api_mention
,	O
but	O
it	O
might	O
complicate	O
everything	O
.	O
.	O
.	O
Any	O
ideas	O
of	O
a	O
simple	O
solution	O
?	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667307	O
mode1	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
It	O
doesn	O
'	O
t	O
get	O
better	O
than	O
that	O
,	O
I	O
'	O
m	O
afraid	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488683	O
You	O
can	O
first	O
split	O
them	O
using	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
convert	O
the	O
returned	O
String	B-api_mention
array	O
to	O
an	O
ArrayList	B-api_mention
using	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
8725387	O
,	O
answer	O
-	O
34405789	O
Set	B-api_mention
and	O
Map	B-api_mention
are	O
non	O
-	O
linear	O
data	O
structure	O
.	O
List	B-api_mention
is	O
linear	O
data	O
structure	O
.	O
The	O
tree	O
data	O
structure	O
SortedSet	B-api_mention
and	O
SortedMap	B-api_mention
interfaces	O
implements	O
TreeSet	B-api_mention
and	O
TreeMap	B-api_mention
respectively	O
using	O
used	O
Red	O
-	O
Black	O
tree	O
implementation	O
algorithm	O
.	O
So	O
it	O
ensure	O
that	O
there	O
are	O
no	O
duplicated	O
items	O
(	O
or	O
keys	O
in	O
case	O
of	O
Map	O
)	O
.	O
#	O
li	O
Tree	O
by	O
definition	O
cannot	O
contain	O
duplicates	O
.	O
#	O
li	O
In	O
List	B-api_mention
we	O
can	O
have	O
duplicates	O
,	O
so	O
there	O
is	O
no	O
TreeList	B-api_mention
.	O
So	O
if	O
we	O
want	O
to	O
sort	O
the	O
list	O
we	O
have	O
to	O
use	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7353205	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
more	O
portable	O
way	O
.	O
exec	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
actually	O
calls	O
out	O
to	O
the	O
operating	O
system	O
to	O
execute	O
the	O
hostname	O
command	O
.	O
Here	O
are	O
a	O
couple	O
other	O
related	O
answers	O
on	O
SO	O
:	O
#	O
li	O
Java	O
current	O
machine	O
name	O
and	O
logged	O
in	O
user	O
?	O
#	O
li	O
Get	O
DNS	O
name	O
of	O
local	O
machine	O
as	O
seen	O
by	O
a	O
remote	O
machine	O
EDIT	O
:	O
You	O
should	O
take	O
a	O
look	O
at	O
A	O
.	O
H	O
.	O
'	O
s	O
answer	O
or	O
Arnout	O
Engelen	O
'	O
s	O
answer	O
for	O
details	O
on	O
why	O
this	O
might	O
not	O
work	O
as	O
expected	O
,	O
depending	O
on	O
your	O
situation	O
.	O
As	O
an	O
answer	O
for	O
this	O
person	O
who	O
specifically	O
requested	O
portable	O
,	O
I	O
still	O
think	O
getHostName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
fine	O
,	O
but	O
they	O
bring	O
up	O
some	O
good	O
points	O
that	O
should	O
be	O
considered	O
.	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
34845194	O
You	O
can	O
also	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOfRange	I-api_mention
.	O
Example	O
:	O
#	O
pre	O
This	O
method	O
is	O
similar	O
to	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
,	O
but	O
it	O
'	O
s	O
more	O
flexible	O
.	O
Both	O
of	O
them	O
use	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
under	O
the	O
hood	O
.	O
See	O
:	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
Question	O
-	O
14846920	O
What	O
are	O
some	O
of	O
the	O
situations	O
where	O
I	O
can	O
use	O
Collections	B-api_mention
.	I-api_mention
emptyMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
The	O
Documentation	O
says	O
I	O
can	O
use	O
this	O
method	O
if	O
I	O
want	O
my	O
collection	O
to	O
be	O
immutable	O
.	O
Why	O
would	O
I	O
want	O
an	O
immutable	O
empty	O
collection	O
?	O
What	O
is	O
the	O
point	O
?	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846943	O
It	O
is	O
,	O
in	O
my	O
personal	O
experience	O
admittedly	O
,	O
very	O
useful	O
in	O
cases	O
where	O
an	O
API	O
requires	O
a	O
collection	O
of	O
parameters	O
,	O
but	O
you	O
have	O
nothing	O
to	O
provide	O
.	O
For	O
example	O
you	O
may	O
have	O
an	O
API	O
that	O
looks	O
something	O
like	O
this	O
,	O
and	O
does	O
not	O
allow	O
null	O
references	O
:	O
public	O
ResultSet	B-api_mention
executeQuery	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
have	O
a	O
query	O
that	O
doesn	O
'	O
t	O
take	O
any	O
parameters	O
,	O
it	O
'	O
s	O
certainly	O
a	O
bit	O
wasteful	O
to	O
create	O
a	O
HashMap	B-api_mention
,	O
which	O
involves	O
allocating	O
an	O
array	O
,	O
when	O
you	O
could	O
just	O
pass	O
in	O
the	O
'	O
Empty	O
Map	O
'	O
which	O
is	O
effectively	O
a	O
constant	O
,	O
the	O
way	O
it	O
'	O
s	O
implemented	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	O
Question	O
-	O
14376807	O
,	O
answer	O
-	O
22092971	O
For	O
those	O
looking	O
for	O
a	O
general	O
strategy	O
for	O
reading	O
and	O
writing	O
a	O
string	O
to	O
file	O
:	O
First	O
,	O
get	O
a	O
file	O
object	O
You	O
'	O
ll	O
need	O
the	O
storage	O
path	O
.	O
For	O
the	O
internal	O
storage	O
,	O
use	O
:	O
File	B-api_mention
path	O
=	O
context	O
.	B-api_mention
getFilesDir	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
the	O
external	O
storage	O
(	O
SD	O
card	O
)	O
,	O
use	O
:	O
File	B-api_mention
path	O
=	O
context	O
.	B-api_mention
getExternalFilesDir	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Then	O
create	O
your	O
file	O
object	O
:	O
File	B-api_mention
file	O
=	O
new	O
File	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Write	O
a	O
string	O
to	O
the	O
file	O
#	O
pre	O
Or	O
with	O
Google	O
Guava	O
Files	B-api_mention
.	I-api_mention
write	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Read	O
the	O
file	O
to	O
a	O
string	O
#	O
pre	O
Or	O
if	O
you	O
are	O
using	O
Google	O
Guava	O
String	B-api_mention
contents	O
=	O
Files	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
completeness	O
I	O
'	O
ll	O
mention	O
String	B-api_mention
contents	O
=	O
new	O
Scanner	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
useDelimiter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
next	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
requires	O
no	O
libraries	O
,	O
but	O
benchmarks	O
50	O
%	O
-	O
400	O
%	O
slower	O
than	O
the	O
other	O
options	O
(	O
in	O
various	O
tests	O
on	O
my	O
Nexus	O
5	O
)	O
.	O
Notes	O
For	O
each	O
of	O
these	O
strategies	O
,	O
you	O
'	O
ll	O
be	O
asked	O
to	O
catch	O
an	O
IOException	B-api_mention
.	O
The	O
default	O
character	O
encoding	O
on	O
Android	O
is	O
UTF	O
-	O
8	O
.	O
If	O
you	O
are	O
using	O
external	O
storage	O
,	O
you	O
'	O
ll	O
need	O
to	O
add	O
to	O
your	O
manifest	O
either	O
:	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
or	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
Write	O
permission	O
implies	O
read	O
permission	O
,	O
so	O
you	O
don	O
'	O
t	O
need	O
both	O
.	O
Question	O
-	O
25168062	O
Why	O
is	O
i	O
+	O
+	O
not	O
atomic	O
in	O
Java	O
?	O
To	O
get	O
a	O
bit	O
deeper	O
in	O
Java	O
I	O
tried	O
to	O
count	O
how	O
often	O
the	O
loop	O
in	O
threads	O
are	O
executed	O
.	O
So	O
I	O
used	O
a	O
private	O
static	O
int	O
total	O
=	O
0	O
;	O
in	O
the	O
main	O
class	O
.	O
I	O
have	O
two	O
threads	O
.	O
#	O
li	O
Thread	O
1	O
:	O
Prints	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
Thread	O
2	O
:	O
Prints	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
I	O
count	O
the	O
lines	O
printed	O
by	O
thread	O
1	O
and	O
thread	O
2	O
.	O
But	O
the	O
lines	O
of	O
thread	O
1	O
+	O
lines	O
of	O
thread	O
2	O
don	O
'	O
t	O
match	O
the	O
total	O
number	O
of	O
lines	O
printed	O
out	O
.	O
Here	O
is	O
my	O
code	O
:	O
#	O
pre	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
22578124	O
Old	O
thread	O
I	O
know	O
but	O
I	O
am	O
sort	O
of	O
new	O
to	O
Java	O
and	O
discover	O
one	O
of	O
it	O
'	O
s	O
strange	O
things	O
.	O
I	O
have	O
used	O
String	B-api_mention
.	I-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
get	O
unpredictable	O
results	O
.	O
Something	O
like	O
this	O
mess	O
up	O
the	O
string	O
:	O
sUrl	O
=	O
sUrl	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
I	O
designed	O
this	O
function	O
to	O
get	O
around	O
the	O
weird	O
problem	O
:	O
#	O
pre	O
Which	O
make	O
you	O
able	O
to	O
do	O
:	O
#	O
pre	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
14534798	O
It	O
should	O
be	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
I	O
recommend	O
you	O
to	O
do	O
as	O
below	O
,	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
system	O
-	O
dependent	O
newline	O
in	O
java	O
.	O
Also	O
from	O
Java	O
7	O
there	O
'	O
s	O
a	O
method	O
that	O
returns	O
the	O
value	O
directly	O
:	O
System	B-api_mention
.	I-api_mention
lineSeparator	I-api_mention
(	I-api_mention
)	I-api_mention
Question	O
-	O
32623834	O
,	O
answer	O
-	O
32624143	O
You	O
just	O
changed	O
the	O
String	B-api_mention
of	O
String	B-api_mention
constant	O
pool	O
Mario	O
to	O
Luigi	O
which	O
was	O
referenced	O
by	O
multiple	O
String	B-api_mention
s	O
,	O
so	O
every	O
referencing	O
literal	O
Mario	O
is	O
now	O
Luigi	O
.	O
Field	B-api_mention
stringValue	O
=	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
.	I-api_mention
getDeclaredField	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
have	O
fetched	O
the	O
char	O
[	O
]	O
named	O
value	O
field	O
from	O
class	O
String	B-api_mention
stringValue	O
.	B-api_mention
setAccessible	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Make	O
it	O
accessible	O
.	O
stringValue	O
.	B-api_mention
set	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
changed	O
original	O
String	B-api_mention
field	O
to	O
Luigi	O
.	O
But	O
original	O
is	O
Mario	O
the	O
String	B-api_mention
literal	O
and	O
literal	O
belongs	O
to	O
the	O
String	B-api_mention
pool	O
and	O
all	O
are	O
interned	O
.	O
Which	O
means	O
all	O
the	O
literals	O
which	O
has	O
same	O
content	O
refers	O
to	O
the	O
same	O
memory	O
address	O
.	O
#	O
pre	O
Basically	O
you	O
have	O
changed	O
the	O
Mario	O
of	O
String	B-api_mention
pool	O
which	O
got	O
reflected	O
in	O
all	O
the	O
referencing	O
fields	O
.	O
If	O
you	O
create	O
String	B-api_mention
Object	O
(	O
i	O
.	O
e	O
.	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
instead	O
of	O
literal	O
you	O
will	O
not	O
face	O
this	O
behavior	O
because	O
than	O
you	O
will	O
have	O
two	O
different	O
Mario	O
s	O
.	O
Question	O
-	O
10066590	O
With	O
Mockito	B-api_mention
,	O
I	O
want	O
to	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
a	O
method	O
call	O
with	O
byte	O
[	O
]	O
in	O
its	O
argument	O
list	O
,	O
but	O
I	O
didn	O
'	O
t	O
find	O
how	O
to	O
write	O
this	O
.	O
myMethod	O
(	O
args	O
)	O
I	O
just	O
want	O
something	O
like	O
anyByteArray	O
(	O
args	O
)	O
,	O
how	O
to	O
do	O
that	O
with	O
Mockito	B-api_mention
?	O
Question	O
-	O
30384955	O
,	O
answer	O
-	O
30385343	O
This	O
happens	O
because	O
of	O
the	O
way	O
capture	O
conversion	O
works	O
:	O
#	O
blockquote	O
Note	O
the	O
end	O
bit	O
.	O
So	O
,	O
what	O
this	O
means	O
is	O
that	O
,	O
given	O
a	O
type	O
like	O
this	O
:	O
#	O
pre	O
Only	O
"	O
outside	O
"	O
wildcards	O
are	O
captured	O
.	O
The	O
Map	O
key	O
wildcard	O
is	O
captured	O
,	O
but	O
the	O
List	O
element	O
wildcard	O
is	O
not	O
.	O
This	O
is	O
why	O
,	O
for	O
example	O
,	O
we	O
can	O
add	O
to	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
but	O
not	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
The	O
placement	O
of	O
the	O
wildcard	O
is	O
what	O
matters	O
.	O
Carrying	O
this	O
over	O
to	O
TbinList	O
,	O
if	O
we	O
have	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
the	O
wildcard	O
is	O
in	O
a	O
place	O
where	O
it	O
does	O
not	O
get	O
captured	O
,	O
but	O
if	O
we	O
have	O
a	O
TbinList	O
<	O
T	O
>	O
,	O
the	O
wildcard	O
is	O
in	O
a	O
place	O
where	O
it	O
gets	O
captured	O
.	O
As	O
I	O
alluded	O
to	O
in	O
the	O
comments	O
,	O
one	O
very	O
interesting	O
test	O
is	O
this	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
test3	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
We	O
get	O
this	O
error	O
:	O
#	O
pre	O
So	O
there	O
'	O
s	O
no	O
way	O
to	O
make	O
it	O
work	O
as	O
-	O
is	O
.	O
One	O
of	O
the	O
class	O
declarations	O
needs	O
to	O
be	O
changed	O
.	O
Additionally	O
,	O
think	O
about	O
it	O
this	O
way	O
.	O
Suppose	O
we	O
had	O
:	O
#	O
pre	O
And	O
since	O
a	O
wildcard	O
allows	O
subtyping	O
,	O
we	O
can	O
do	O
this	O
:	O
TbinList	O
<	O
T	O
>	O
test4	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
Should	O
we	O
be	O
able	O
to	O
add	O
a	O
Tbin	O
<	O
T	O
>	O
to	O
test4	O
?	O
No	O
,	O
this	O
would	O
be	O
heap	O
pollution	O
.	O
We	O
might	O
end	O
up	O
with	O
Derived2	O
s	O
floating	O
around	O
in	O
a	O
TbinList	O
<	O
T	O
>	O
.	O
Question	O
-	O
32632364	O
,	O
answer	O
-	O
32633199	O
It	O
shouldn	O
'	O
t	O
have	O
compiled	O
,	O
according	O
to	O
JLS	O
7	O
.	O
int	O
can	O
be	O
compared	O
to	O
boxed	O
numeric	O
types	O
,	O
i	O
.	O
e	O
.	O
Byte	B-api_mention
,	O
Short	B-api_mention
,	O
Character	B-api_mention
,	O
Integer	B-api_mention
,	O
Long	B-api_mention
,	O
Float	B-api_mention
,	O
Double	B-api_mention
.	O
But	O
that	O
is	O
all	O
.	O
And	O
if	O
comparison	O
is	O
between	O
int	O
and	O
say	O
Float	B-api_mention
,	O
Float	B-api_mention
will	O
be	O
unboxed	O
first	O
,	O
so	O
that	O
the	O
comparison	O
is	O
between	O
float	O
and	O
int	O
.	O
It	O
'	O
ll	O
make	O
no	O
sense	O
to	O
do	O
the	O
other	O
way	O
around	O
-	O
box	O
int	O
then	O
examine	O
the	O
identity	O
of	O
the	O
Integer	B-api_mention
(	O
with	O
a	O
Float	B-api_mention
no	O
less	O
)	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175224	O
Since	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
is	O
not	O
a	O
final	O
method	O
of	O
Object	B-api_mention
,	O
yes	O
,	O
it	O
is	O
very	O
well	O
be	O
possible	O
in	O
a	O
different	O
situation	O
.	O
#	O
pre	O
This	O
question	O
,	O
however	O
,	O
specifically	O
says	O
that	O
these	O
are	O
primitive	O
wrappers	O
(	O
e	O
.	O
g	O
.	O
Integer	B-api_mention
,	O
Boolean	B-api_mention
,	O
etc	O
.	O
)	O
and	O
since	O
these	O
classes	O
are	O
final	O
,	O
you	O
cannot	O
extend	O
them	O
,	O
thus	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
.	O
Question	O
-	O
6841333	O
,	O
answer	O
-	O
20906129	O
As	O
explained	O
by	O
others	O
,	O
there	O
'	O
s	O
a	O
time	O
discontinuity	O
there	O
.	O
There	O
are	O
two	O
possible	O
timezone	O
offsets	O
for	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
54	O
:	O
08	O
at	O
Asia	O
/	O
Shanghai	O
,	O
but	O
only	O
one	O
offset	O
for	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
54	O
:	O
07	O
.	O
So	O
,	O
depending	O
on	O
which	O
offset	O
is	O
used	O
,	O
there	O
'	O
s	O
either	O
a	O
one	O
second	O
difference	O
or	O
a	O
5	O
minutes	O
and	O
53	O
seconds	O
difference	O
.	O
This	O
slight	O
shift	O
of	O
offsets	O
,	O
instead	O
of	O
the	O
usual	O
one	O
-	O
hour	O
daylight	O
savings	O
(	O
summer	O
time	O
)	O
we	O
are	O
used	O
to	O
,	O
obscures	O
the	O
problem	O
a	O
bit	O
.	O
Note	O
that	O
the	O
2013a	O
update	O
of	O
the	O
timezone	O
database	O
moved	O
this	O
discontinuity	O
a	O
few	O
seconds	O
earlier	O
,	O
but	O
the	O
effect	O
would	O
still	O
be	O
observable	O
.	O
The	O
new	O
java	O
.	O
time	O
package	O
on	O
Java	O
8	O
let	O
use	O
see	O
this	O
more	O
clearly	O
,	O
and	O
provide	O
tools	O
to	O
handle	O
it	O
.	O
Given	O
:	O
#	O
pre	O
Then	O
durationAtEarlierOffset	B-api_mention
will	O
be	O
one	O
second	O
,	O
while	O
durationAtLaterOffset	B-api_mention
will	O
be	O
five	O
minutes	O
and	O
53	O
seconds	O
.	O
Also	O
,	O
these	O
two	O
offsets	O
are	O
the	O
same	O
:	O
#	O
pre	O
But	O
these	O
two	O
are	O
different	O
:	O
#	O
pre	O
You	O
can	O
see	O
the	O
same	O
problem	O
comparing	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
59	O
:	O
59	O
with	O
1928	O
-	O
01	O
-	O
01	O
00	O
:	O
00	O
:	O
00	O
,	O
though	O
,	O
in	O
this	O
case	O
,	O
it	O
is	O
the	O
earlier	O
offset	O
that	O
produce	O
the	O
longer	O
divergence	O
,	O
and	O
it	O
is	O
the	O
earlier	O
date	O
that	O
has	O
two	O
possible	O
offsets	O
.	O
Another	O
way	O
to	O
approach	O
this	O
is	O
to	O
check	O
whether	O
there	O
'	O
s	O
a	O
transition	O
going	O
on	O
.	O
We	O
can	O
do	O
this	O
like	O
this	O
:	O
#	O
pre	O
You	O
can	O
check	O
whether	O
the	O
transition	O
is	O
an	O
overlap	O
-	O
in	O
which	O
case	O
there	O
'	O
s	O
more	O
than	O
one	O
valid	O
offset	O
for	O
that	O
date	O
/	O
time	O
-	O
or	O
a	O
gap	O
-	O
in	O
which	O
case	O
that	O
date	O
/	O
time	O
is	O
not	O
valid	O
for	O
that	O
zone	O
id	O
-	O
by	O
using	O
the	O
isOverlap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
isGap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
zot4	O
.	O
I	O
hope	O
this	O
helps	O
people	O
handle	O
this	O
sort	O
of	O
issue	O
once	O
Java	O
8	O
becomes	O
widely	O
available	O
,	O
or	O
to	O
those	O
using	O
Java	O
7	O
who	O
adopt	O
the	O
JSR	O
310	O
backport	O
.	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
33142346	O
Once	O
a	O
repeat	O
function	O
is	O
somewhere	O
defined	O
as	O
#	O
pre	O
You	O
can	O
use	O
it	O
now	O
and	O
then	O
this	O
way	O
,	O
e	O
.	O
g	O
.	O
:	O
repeat	O
.	B-api_mention
accept	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
To	O
get	O
and	O
equivalent	O
to	O
Haskell	O
'	O
s	O
take	O
8	O
(	O
args	O
)	O
You	O
could	O
write	O
#	O
pre	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791724	O
Use	O
the	O
replaceEach	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
from	O
Apache	O
Commons	O
StringUtils	B-api_mention
:	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
33147339	O
I	O
was	O
reading	O
Java	O
'	O
s	O
ArrayList	B-api_mention
source	O
code	O
and	O
noticed	O
some	O
comparisons	O
in	O
if	O
-	O
statements	O
.	O
In	O
Java	O
7	O
,	O
the	O
method	O
grow	B-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
uses	O
if	O
(	O
args	O
)	O
newCapacity	O
=	O
minCapacity	O
;	O
In	O
Java	O
6	O
,	O
grow	O
didn	O
'	O
t	O
exist	O
.	O
The	O
method	O
ensureCapacity	O
(	O
int	O
)	O
however	O
uses	O
if	O
(	O
args	O
)	O
newCapacity	O
=	O
minCapacity	O
;	O
What	O
was	O
the	O
reason	O
behind	O
the	O
change	O
?	O
Was	O
it	O
a	O
performance	O
issue	O
or	O
just	O
a	O
style	O
?	O
I	O
could	O
imagine	O
that	O
comparing	O
against	O
zero	O
is	O
faster	O
,	O
but	O
performing	O
a	O
complete	O
subtraction	O
just	O
to	O
check	O
whether	O
it	O
'	O
s	O
negative	O
seems	O
a	O
bit	O
overkill	O
to	O
me	O
.	O
Also	O
in	O
terms	O
of	O
bytecode	O
,	O
this	O
would	O
involve	O
two	O
instructions	O
(	O
ISUB	O
and	O
IF	O
_	O
ICMPGE	O
)	O
instead	O
of	O
one	O
(	O
IFGE	O
)	O
.	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
15046253	O
It	O
does	O
that	O
because	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
doesn	O
'	O
t	O
capture	O
the	O
newline	O
.	O
you	O
could	O
do	O
like	O
the	O
others	O
proposed	O
by	O
adding	O
an	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
underneath	O
.	O
Alternatively	O
you	O
can	O
do	O
it	O
C	O
#	O
style	O
and	O
parse	O
a	O
nextLine	B-api_mention
to	O
an	O
integer	O
like	O
so	O
:	O
int	O
number	O
=	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Doing	O
this	O
works	O
just	O
as	O
well	O
,	O
and	O
it	O
saves	O
you	O
a	O
line	O
of	O
code	O
.	O
Question	O
-	O
19998454	O
,	O
answer	O
-	O
19998652	O
This	O
is	O
being	O
described	O
in	O
this	O
article	O
.	O
Think	O
about	O
forEach	B-api_mention
of	O
Collections	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
…	O
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
34073047	O
Another	O
option	O
is	O
to	O
use	O
Apache	O
Commons	O
StrBuilder	B-api_mention
,	O
which	O
has	O
the	O
functionality	O
that	O
'	O
s	O
lacking	O
in	O
StringBuilder	B-api_mention
.	O
StrBuilder	B-api_mention
.	I-api_mention
appendLn	I-api_mention
(	I-api_mention
)	I-api_mention
Question	O
-	O
7348711	O
,	O
answer	O
-	O
20793241	O
Environment	O
variables	O
may	O
also	O
provide	O
a	O
useful	O
means	O
-	O
-	O
COMPUTERNAME	O
on	O
Windows	O
,	O
HOSTNAME	O
on	O
most	O
modern	O
Unix	O
/	O
Linux	O
shells	O
.	O
See	O
:	O
#	O
a	O
I	O
'	O
m	O
using	O
these	O
as	O
"	O
supplementary	O
"	O
methods	O
to	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
since	O
as	O
several	O
people	O
point	O
out	O
,	O
that	O
function	O
doesn	O
'	O
t	O
work	O
in	O
all	O
environments	O
.	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
another	O
possible	O
supplement	O
.	O
At	O
this	O
stage	O
,	O
I	O
haven	O
'	O
t	O
used	O
it	O
.	O
#	O
pre	O
Question	O
-	O
22409102	O
,	O
answer	O
-	O
22409270	O
You	O
can	O
use	O
Float	B-api_mention
.	I-api_mention
floatToIntBits	I-api_mention
to	O
convert	O
it	O
to	O
an	O
int	O
and	O
look	O
at	O
the	O
bit	O
pattern	O
:	O
#	O
pre	O
Question	O
-	O
29183904	O
I	O
used	O
to	O
define	O
a	O
set	O
of	O
related	O
constants	O
like	O
Bundle	B-api_mention
keys	O
together	O
in	O
an	O
interface	O
like	O
below	O
:	O
#	O
pre	O
This	O
provides	O
me	O
a	O
nicer	O
way	O
to	O
group	O
related	O
constants	O
together	O
and	O
used	O
them	O
by	O
making	O
a	O
static	O
import	O
(	O
not	O
implements	O
)	O
.	O
I	O
know	O
Android	O
framework	O
also	O
uses	O
the	O
constants	O
in	O
same	O
way	O
like	O
Toast	B-api_mention
.	I-api_mention
LENTH	I-api_mention
_	I-api_mention
LONG	I-api_mention
,	O
View	B-api_mention
.	I-api_mention
GONE	I-api_mention
.	O
However	O
,	O
I	O
often	O
feel	O
that	O
the	O
Java	O
Enums	O
provide	O
much	O
better	O
and	O
powerful	O
way	O
to	O
represent	O
the	O
constant	O
.	O
But	O
is	O
there	O
a	O
performence	O
issue	O
in	O
using	O
enums	O
on	O
Android	O
?	O
With	O
a	O
bit	O
of	O
research	O
I	O
ended	O
up	O
in	O
confusion	O
.	O
From	O
this	O
question	O
"	O
Avoid	O
Enums	O
Where	O
You	O
Only	O
Need	O
Ints	O
”	O
removed	O
from	O
Android	O
'	O
s	O
performance	O
tips	O
?	O
it	O
'	O
s	O
clear	O
that	O
Google	O
has	O
removed	O
"	O
Avoid	O
enums	O
"	O
from	O
its	O
performance	O
tips	O
,	O
but	O
from	O
it	O
'	O
s	O
official	O
training	O
docs	O
Be	O
aware	O
of	O
memory	O
overhead	O
section	O
it	O
clearly	O
says	O
:	O
"	O
Enums	O
often	O
require	O
more	O
than	O
twice	O
as	O
much	O
memory	O
as	O
static	O
constants	O
.	O
You	O
should	O
strictly	O
avoid	O
using	O
enums	O
on	O
Android	O
.	O
"	O
Is	O
this	O
still	O
holds	O
good	O
?	O
(	O
say	O
in	O
Java	O
versions	O
after	O
1	O
.	O
6	O
)	O
One	O
more	O
issue	O
that	O
I	O
observed	O
is	O
to	O
send	O
enums	O
across	O
intents	O
using	O
Bundle	B-api_mention
I	O
should	O
send	O
them	O
by	O
serializing	O
(	O
i	O
.	O
e	O
putSerializable	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
that	O
I	O
think	O
an	O
expensive	O
operation	O
compared	O
to	O
primitive	O
putString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
eventhough	O
enums	O
provides	O
it	O
for	O
free	O
)	O
.	O
Can	O
someone	O
please	O
clarify	O
which	O
one	O
is	O
the	O
best	O
way	O
to	O
represent	O
the	O
same	O
in	O
Android	O
?	O
Should	O
I	O
strictly	O
avoid	O
using	O
enums	O
on	O
Android	O
?	O
Question	O
-	O
29229373	O
,	O
answer	O
-	O
33839551	O
In	O
my	O
free	O
StreamEx	O
library	O
I	O
introduced	O
the	O
short	O
-	O
circuiting	O
collectors	O
.	O
When	O
collecting	O
sequential	O
stream	O
with	O
short	O
-	O
circuiting	O
collector	O
(	O
like	O
MoreCollectors	O
.	B-api_mention
first	I-api_mention
(	I-api_mention
)	I-api_mention
)	O
exactly	O
one	O
element	O
is	O
consumed	O
from	O
the	O
source	O
.	O
Internally	O
it	O
'	O
s	O
implemented	O
in	O
quite	O
dirty	O
way	O
:	O
using	O
a	O
custom	O
exception	O
to	O
break	O
the	O
control	O
flow	O
.	O
Using	O
my	O
library	O
your	O
sample	O
could	O
be	O
rewritten	O
in	O
this	O
way	O
:	O
#	O
pre	O
The	O
result	O
is	O
the	O
following	O
:	O
#	O
pre	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14513598	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
is	O
not	O
much	O
different	O
,	O
a	O
basic	O
LCG	O
described	O
by	O
Knuth	O
.	O
However	O
it	O
has	O
main	O
2	O
main	O
advantages	O
/	O
differences	O
:	O
#	O
li	O
thread	O
safe	O
-	O
each	O
update	O
is	O
a	O
CAS	O
which	O
is	O
more	O
expensive	O
than	O
a	O
simple	O
write	O
and	O
needs	O
a	O
branch	O
(	O
even	O
if	O
perfectly	O
predicted	O
single	O
threaded	O
)	O
.	O
Depending	O
on	O
the	O
CPU	O
it	O
could	O
be	O
significant	O
difference	O
.	O
#	O
li	O
undisclosed	O
internal	O
state	O
-	O
this	O
is	O
very	O
important	O
for	O
anything	O
non	O
-	O
trivial	O
.	O
You	O
wish	O
the	O
random	O
numbers	O
not	O
to	O
be	O
predictable	O
.	O
Below	O
it	O
'	O
s	O
the	O
main	O
routine	O
generating	O
'	O
random	O
'	O
integers	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
.	O
#	O
pre	O
If	O
you	O
remove	O
the	O
AtomicLong	B-api_mention
and	O
the	O
undisclosed	O
sate	O
(	O
i	O
.	O
e	O
.	O
using	O
all	O
bits	O
of	O
the	O
long	O
)	O
,	O
you	O
'	O
d	O
get	O
more	O
performance	O
than	O
the	O
double	O
multiplication	O
/	O
modulo	O
.	O
Last	O
note	O
:	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
should	O
not	O
be	O
used	O
for	O
anything	O
but	O
simple	O
tests	O
,	O
it	O
'	O
s	O
prone	O
to	O
contention	O
and	O
if	O
you	O
have	O
even	O
a	O
couple	O
of	O
threads	O
calling	O
it	O
concurrently	O
the	O
performance	O
degrades	O
.	O
One	O
little	O
known	O
historical	O
feature	O
of	O
it	O
is	O
the	O
introduction	O
of	O
CAS	O
in	O
java	O
-	O
to	O
beat	O
an	O
infamous	O
benchmark	O
(	O
first	O
by	O
IBM	O
via	O
intrinsics	O
and	O
then	O
Sun	O
made	O
"	O
CAS	O
from	O
Java	O
"	O
)	O
Question	O
-	O
11359187	O
,	O
answer	O
-	O
11359320	O
#	O
li	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
logging	I-api_mention
was	O
introduced	O
in	O
Java	O
1	O
.	O
4	O
.	O
There	O
were	O
uses	O
for	O
logging	O
before	O
that	O
,	O
that	O
'	O
s	O
why	O
many	O
other	O
logging	O
APIs	O
exist	O
.	O
Those	O
APIs	O
where	O
used	O
heavily	O
before	O
Java	O
1	O
.	O
4	O
and	O
thus	O
had	O
a	O
great	O
marketshare	O
that	O
didn	O
'	O
t	O
just	O
drop	O
to	O
0	O
when	O
1	O
.	O
4	O
was	O
release	O
.	O
#	O
li	O
JUL	B-api_mention
didn	O
'	O
t	O
start	O
out	O
all	O
that	O
great	O
,	O
many	O
of	O
the	O
things	O
you	O
mentioned	O
where	O
a	O
lot	O
worse	O
in	O
1	O
.	O
4	O
and	O
only	O
got	O
better	O
in	O
1	O
.	O
5	O
(	O
and	O
I	O
guess	O
in	O
6	O
as	O
well	O
,	O
but	O
I	O
'	O
m	O
not	O
too	O
sure	O
)	O
.	O
#	O
li	O
JUL	B-api_mention
isn	O
'	O
t	O
well	O
suited	O
for	O
multiple	O
applications	O
with	O
different	O
configurations	O
in	O
the	O
same	O
JVM	O
(	O
think	O
multiple	O
web	O
applications	O
that	O
should	O
not	O
interact	O
)	O
.	O
Tomcat	O
needs	O
to	O
jump	O
through	O
some	O
hoops	O
to	O
get	O
that	O
working	O
(	O
effectively	O
re	O
-	O
implementing	O
JUL	B-api_mention
if	O
I	O
understood	O
that	O
correctly	O
)	O
.	O
#	O
li	O
You	O
can	O
'	O
t	O
always	O
influence	O
what	O
logging	O
framework	O
your	O
libraries	O
use	O
.	O
Therefore	O
using	O
SLF4J	B-api_mention
(	O
which	O
is	O
actually	O
just	O
a	O
very	O
thin	O
API	O
layer	O
above	O
other	O
libraries	O
)	O
helps	O
keeping	O
a	O
somewhat	O
consistent	O
picture	O
of	O
the	O
entire	O
logging	O
world	O
(	O
so	O
you	O
can	O
decide	O
the	O
underlying	O
logging	O
framework	O
while	O
still	O
having	O
library	O
logging	O
in	O
the	O
same	O
system	O
)	O
.	O
#	O
li	O
Libraries	O
can	O
'	O
t	O
easily	O
change	O
.	O
If	O
a	O
previous	O
version	O
of	O
a	O
library	O
used	O
to	O
use	O
logging	O
-	O
library	O
-	O
X	O
it	O
can	O
'	O
t	O
easily	O
switch	O
to	O
logging	O
-	O
library	O
-	O
Y	O
(	O
for	O
example	O
JUL	B-api_mention
)	O
,	O
even	O
if	O
the	O
latter	O
is	O
clearly	O
superious	O
:	O
any	O
user	O
of	O
that	O
library	O
would	O
need	O
to	O
learn	O
the	O
new	O
logging	O
framework	O
and	O
(	O
at	O
least	O
)	O
reconfigure	O
their	O
logging	O
.	O
That	O
'	O
s	O
a	O
big	O
no	O
-	O
no	O
,	O
especially	O
when	O
it	O
brings	O
no	O
apparent	O
gain	O
to	O
most	O
people	O
.	O
Having	O
said	O
all	O
that	O
I	O
think	O
JUL	B-api_mention
is	O
at	O
least	O
a	O
valid	O
alternative	O
to	O
other	O
logging	O
frameworks	O
these	O
days	O
.	O
Question	O
-	O
23453287	O
,	O
answer	O
-	O
23456085	O
It	O
will	O
be	O
hard	O
to	O
find	O
and	O
identify	O
"	O
THE	O
"	O
answer	O
,	O
for	O
the	O
resons	O
mentioned	O
in	O
the	O
comments	O
from	O
@	O
EJP	O
:	O
There	O
are	O
roughly	O
2	O
(	O
+	O
/	O
-	O
2	O
)	O
people	O
in	O
the	O
world	O
who	O
can	O
give	O
the	O
definite	O
answer	O
at	O
all	O
.	O
And	O
in	O
doubt	O
,	O
the	O
answer	O
might	O
just	O
be	O
something	O
like	O
"	O
Supporting	O
final	O
default	O
methods	O
did	O
not	O
seem	O
to	O
be	O
worth	O
the	O
effort	O
of	O
restructuring	O
the	O
internal	O
call	O
resolution	O
mechanisms	O
"	O
.	O
This	O
is	O
speculation	O
,	O
of	O
course	O
,	O
but	O
it	O
is	O
at	O
least	O
backed	O
by	O
subtle	O
evidences	O
,	O
like	O
this	O
Statement	O
(	O
by	O
one	O
of	O
the	O
two	O
persons	O
)	O
in	O
the	O
OpenJDK	O
mailing	O
list	O
:	O
#	O
blockquote	O
and	O
trivial	O
facts	O
like	O
that	O
a	O
method	O
is	O
simply	O
not	O
considered	O
to	O
be	O
a	O
(	O
really	O
)	O
final	O
method	O
when	O
it	O
is	O
a	O
default	O
method	O
,	O
as	O
currently	O
implemented	O
in	O
the	O
Method	B-api_mention
:	I-api_mention
:	I-api_mention
is	I-api_mention
_	I-api_mention
final	I-api_mention
_	I-api_mention
method	I-api_mention
method	O
in	O
the	O
OpenJDK	O
.	O
Further	O
really	O
"	O
authorative	O
"	O
information	O
is	O
indeed	O
hard	O
to	O
find	O
,	O
even	O
with	O
excessive	O
websearches	O
and	O
by	O
reading	O
commit	O
logs	O
.	O
I	O
thought	O
that	O
it	O
might	O
be	O
related	O
to	O
potential	O
ambiguities	O
during	O
the	O
resolution	O
of	O
interface	O
method	O
calls	O
with	O
the	O
invokeinterface	B-api_mention
instruction	O
and	O
and	O
class	O
method	O
calls	O
,	O
corresponding	O
to	O
the	O
invokevirtual	B-api_mention
instruction	O
:	O
For	O
the	O
invokevirtual	B-api_mention
instruction	O
,	O
there	O
may	O
be	O
a	O
simple	O
vtable	O
lookup	O
,	O
because	O
the	O
method	O
must	O
either	O
be	O
inherited	O
from	O
a	O
superclass	O
,	O
or	O
implemented	O
by	O
the	O
class	O
directly	O
.	O
In	O
contrast	O
to	O
that	O
,	O
an	O
invokeinterface	B-api_mention
call	O
must	O
examine	O
the	O
respective	O
call	O
site	O
to	O
find	O
out	O
which	O
interface	O
this	O
call	O
actually	O
refers	O
to	O
(	O
this	O
is	O
explained	O
in	O
more	O
detail	O
in	O
the	O
InterfaceCalls	O
page	O
of	O
the	O
HotSpot	O
Wiki	O
)	O
.	O
However	O
,	O
final	O
methods	O
do	O
either	O
not	O
get	O
inserted	O
into	O
the	O
vtable	O
at	O
all	O
,	O
or	O
replace	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
.	O
Line	O
333	O
)	O
,	O
and	O
similarly	O
,	O
default	O
methods	O
are	O
replacing	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
,	O
Line	O
202	O
)	O
.	O
So	O
the	O
actual	O
reason	O
(	O
and	O
thus	O
,	O
the	O
answer	O
)	O
must	O
be	O
hidden	O
deeper	O
inside	O
the	O
(	O
rather	O
complex	O
)	O
method	O
call	O
resolution	O
mechanisms	O
,	O
but	O
maybe	O
these	O
references	O
will	O
nevertheless	O
be	O
considered	O
as	O
being	O
helpful	O
,	O
be	O
it	O
only	O
for	O
others	O
that	O
manage	O
to	O
derive	O
the	O
actual	O
answer	O
from	O
that	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
16229988	O
My	O
solution	O
is	O
to	O
do	O
a	O
"	O
extract	O
method	O
"	O
refactoring	O
,	O
as	O
following	O
:	O
#	O
pre	O
printToFile	B-api_mention
can	O
be	O
written	O
either	O
#	O
pre	O
or	O
#	O
pre	O
For	O
class	O
lib	O
designers	O
,	O
I	O
will	O
suggest	O
them	O
extend	O
the	O
AutoClosable	B-api_mention
interface	O
with	O
an	O
additional	O
method	O
to	O
suppress	O
the	O
close	O
.	O
In	O
this	O
case	O
we	O
can	O
then	O
manually	O
control	O
the	O
close	O
behavior	O
.	O
For	O
language	O
designers	O
,	O
the	O
lesson	O
is	O
that	O
adding	O
a	O
new	O
feature	O
could	O
mean	O
adding	O
a	O
lot	O
others	O
.	O
In	O
this	O
Java	O
case	O
,	O
obviously	O
ARM	O
feature	O
will	O
work	O
better	O
with	O
a	O
resource	O
ownership	O
transfer	O
mechanism	O
.	O
UPDATE	O
Originally	O
the	O
code	O
above	O
requires	O
@	O
SuppressWarning	O
since	O
the	O
BufferedWriter	B-api_mention
inside	O
the	O
function	O
requires	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
As	O
suggested	O
by	O
a	O
comment	O
,	O
if	O
flush	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
be	O
called	O
before	O
close	O
the	O
writer	O
,	O
we	O
need	O
to	O
do	O
so	O
before	O
any	O
return	B-api_mention
(	O
implicit	O
or	O
explicit	O
)	O
statements	O
inside	O
the	O
try	O
block	O
.	O
There	O
is	O
currently	O
no	O
way	O
to	O
ensure	O
the	O
caller	O
doing	O
this	O
I	O
think	O
,	O
so	O
this	O
must	O
be	O
documented	O
for	O
writeFileWriter	B-api_mention
.	O
UPDATE	O
AGAIN	O
The	O
above	O
update	O
makes	O
@	O
SuppressWarning	O
unnecessary	O
since	O
it	O
require	O
the	O
function	O
to	O
return	O
the	O
resource	O
to	O
the	O
caller	O
,	O
so	O
itself	O
does	O
not	O
necessary	O
being	O
closed	O
.	O
Unfortunately	O
,	O
this	O
pull	O
us	O
back	O
to	O
the	O
beginning	O
of	O
the	O
situation	O
:	O
the	O
warning	O
is	O
now	O
moved	O
back	O
to	O
the	O
caller	O
side	O
.	O
So	O
to	O
properly	O
solve	O
this	O
,	O
we	O
need	O
a	O
customised	O
AutoClosable	B-api_mention
that	O
whenever	O
it	O
closes	O
,	O
the	O
underline	O
BufferedWriter	B-api_mention
shall	O
be	O
flush	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
ed	O
.	O
Actually	O
,	O
this	O
shows	O
us	O
another	O
way	O
to	O
bypass	O
the	O
warning	O
,	O
since	O
the	O
BufferWriter	B-api_mention
is	O
never	O
closed	O
in	O
either	O
way	O
.	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32820984	O
Let	O
'	O
s	O
rewrite	O
that	O
lambda	O
expression	O
with	O
parentheses	O
to	O
make	O
it	O
more	O
clear	O
:	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
curriedAdd	O
=	O
a	O
-	O
>	O
(	O
b	O
-	O
>	O
(	O
a	O
+	O
b	O
)	O
)	O
;	O
So	O
we	O
are	O
declaring	O
a	O
function	O
taking	O
an	O
int	O
which	O
returns	O
a	O
Function	B-api_mention
.	O
More	O
specifically	O
,	O
the	O
function	O
returned	O
takes	O
an	O
int	O
and	O
returns	O
an	O
int	O
(	O
the	O
sum	O
of	O
the	O
two	O
elements	O
)	O
:	O
this	O
can	O
be	O
represented	O
as	O
an	O
IntUnaryOperator	B-api_mention
.	O
Therefore	O
,	O
curriedAdd	O
is	O
a	O
function	O
taking	O
an	O
int	O
and	O
returning	O
an	O
IntUnaryOperator	O
,	O
so	O
it	O
can	O
be	O
represented	O
as	O
IntFunction	B-api_mention
<	I-api_mention
IntUnaryOperator	I-api_mention
>	I-api_mention
.	O
Question	O
-	O
32714194	O
,	O
answer	O
-	O
32714537	O
While	O
currently	O
most	O
of	O
Java	O
compilers	O
using	O
StringBuilder	B-api_mention
chain	O
,	O
it	O
'	O
s	O
not	O
specified	O
that	O
it	O
should	O
be	O
always	O
in	O
this	O
way	O
.	O
In	O
particular	O
there	O
'	O
s	O
a	O
proposal	O
to	O
change	O
this	O
drastically	O
in	O
Java	O
-	O
9	O
replacing	O
with	O
single	O
invokedynamic	O
call	O
and	O
introduce	O
new	O
metafactory	O
which	O
will	O
generate	O
an	O
appropriate	O
MethodHandle	O
in	O
runtime	O
to	O
perform	O
concatenation	O
.	O
Question	O
-	O
8430805	O
,	O
answer	O
-	O
22332291	O
Sudheesh	O
B	O
Nair	O
'	O
s	O
has	O
a	O
nice	O
(	O
and	O
accepted	O
)	O
answer	O
on	O
the	O
question	O
,	O
which	O
i	O
think	O
should	O
have	O
a	O
better	O
alternative	O
such	O
as	O
;	O
What	O
'	O
s	O
wrong	O
with	O
measuring	O
time	O
passed	O
and	O
checking	O
if	O
TIME	O
_	O
INTERVAL	O
miliseconds	O
(	O
say	O
2000	O
)	O
passed	O
since	O
the	O
last	O
back	O
press	O
.	O
The	O
following	O
sample	O
code	O
uses	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
to	O
store	O
the	O
time	O
onBackPressed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
;	O
#	O
pre	O
Back	O
on	O
accepted	O
answer	O
critique	O
;	O
Using	O
a	O
flag	O
to	O
indicate	O
if	O
it	O
was	O
pressed	O
in	O
last	O
TIME	O
_	O
INTERVAL	O
(	O
say	O
2000	O
)	O
milliseconds	O
and	O
set	O
-	O
reset	O
is	O
via	O
Handler	B-api_mention
'	O
s	O
postDelayed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
was	O
the	O
first	O
thing	O
to	O
come	O
in	O
my	O
mind	O
.	O
But	O
the	O
postDelayed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
action	O
should	O
be	O
cancelled	O
when	O
activity	O
is	O
closing	O
,	O
removing	O
the	O
Runnable	B-api_mention
.	O
In	O
order	O
to	O
remove	O
the	O
Runnable	B-api_mention
,	O
it	O
must	O
not	O
be	O
declared	O
anonymous	O
,	O
and	O
be	O
declared	O
as	O
member	O
along	O
with	O
the	O
Handler	B-api_mention
aswell	O
.	O
Then	O
removeCallbacks	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
Handler	B-api_mention
can	O
be	O
called	O
appropriately	O
.	O
The	O
following	O
sample	O
is	O
the	O
demonstration	O
;	O
#	O
pre	O
Thanks	O
to	O
@	O
NSouth	O
for	O
contributing	O
;	O
In	O
order	O
to	O
prevent	O
toast	O
message	O
appearing	O
even	O
after	O
the	O
application	O
is	O
closed	O
,	O
Toast	O
can	O
be	O
declared	O
as	O
a	O
member	O
-	O
say	O
mExitToast	O
-	O
and	O
can	O
be	O
cancelled	O
via	O
mExitToast	O
.	B-api_mention
cancel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
just	O
before	O
super	O
.	B-api_mention
onBackPressed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
.	O
Question	O
-	O
9481865	O
I	O
am	O
trying	O
to	O
develop	O
a	O
system	O
where	O
there	O
are	O
different	O
nodes	O
that	O
are	O
run	O
on	O
different	O
system	O
or	O
on	O
different	O
ports	O
on	O
the	O
same	O
system	O
.	O
Now	O
all	O
the	O
nodes	O
create	O
a	O
Socket	B-api_mention
with	O
a	O
target	O
IP	O
as	O
the	O
IP	O
of	O
a	O
special	O
node	O
known	O
as	O
a	O
bootstrapping	O
node	O
.	O
The	O
nodes	O
then	O
create	O
their	O
own	O
ServerSocket	B-api_mention
and	O
start	O
listening	O
for	O
connections	O
.	O
The	O
bootstrapping	O
node	O
maintains	O
a	O
list	O
of	O
Nodes	O
and	O
returns	O
them	O
on	O
being	O
quired	O
.	O
Now	O
what	O
I	O
need	O
is	O
the	O
node	O
must	O
register	O
its	O
IP	O
to	O
the	O
bootstrapping	O
node	O
.	O
I	O
tried	O
using	O
cli	B-api_mention
.	I-api_mention
getInetAddress	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
once	O
the	O
client	O
connects	O
to	O
the	O
ServerSocket	B-api_mention
of	O
bootstrapping	O
node	O
but	O
that	O
didn	O
'	O
t	O
work	O
.	O
#	O
li	O
I	O
need	O
the	O
client	O
to	O
register	O
its	O
PPP	O
IP	O
if	O
available	O
;	O
#	O
li	O
Otherwise	O
the	O
LAN	O
IP	O
if	O
available	O
;	O
#	O
li	O
Otherwise	O
it	O
must	O
register	O
127	O
.	O
0	O
.	O
0	O
.	O
1	O
assuming	O
its	O
the	O
same	O
computer	O
.	O
Please	O
help	O
me	O
with	O
this	O
.	O
EDIT	O
using	O
the	O
code	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
My	O
PPP	O
Connection	O
IP	O
address	O
is	O
:	O
117	O
.	O
204	O
.	O
44	O
.	O
192	O
but	O
the	O
above	O
returns	O
me	O
192	O
.	O
168	O
.	O
1	O
.	O
2	O
EDIT2	O
I	O
am	O
using	O
the	O
following	O
code	O
:	O
#	O
pre	O
I	O
am	O
able	O
to	O
get	O
all	O
the	O
IP	O
addresses	O
associated	O
all	O
NetworkInterface	B-api_mention
s	O
,	O
but	O
how	O
do	O
I	O
distinguish	O
them	O
?	O
?	O
This	O
is	O
the	O
output	O
I	O
am	O
getting	O
:	O
#	O
pre	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29502668	O
#	O
blockquote	O
It	O
'	O
s	O
checking	O
simple	O
equality	O
(	O
likely	O
for	O
the	O
purpose	O
of	O
a	O
micro	O
-	O
optimization	O
,	O
but	O
more	O
on	O
that	O
later	O
)	O
.	O
The	O
unusual	O
casting	O
is	O
necessary	O
because	O
Class	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	O
the	O
type	O
of	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
and	O
Class	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
are	O
incomparable	O
types	O
.	O
Basically	O
,	O
for	O
an	O
equality	O
comparison	O
with	O
=	O
=	O
to	O
compile	O
,	O
one	O
of	O
the	O
sides	O
has	O
to	O
be	O
a	O
subtype	O
or	O
supertype	O
of	O
the	O
other	O
.	O
I	O
.	O
e	O
.	O
we	O
can	O
'	O
t	O
do	O
:	O
#	O
pre	O
The	O
rules	O
for	O
generic	O
types	O
are	O
a	O
bit	O
more	O
complicated	O
and	O
there	O
are	O
a	O
few	O
cases	O
where	O
a	O
comparison	O
doesn	O
'	O
t	O
compile	O
,	O
but	O
it	O
may	O
still	O
evaluate	O
to	O
true	O
.	O
The	O
reason	O
Class	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
not	O
a	O
supertype	O
of	O
Class	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
despite	O
Object	B-api_mention
[	O
]	O
being	O
a	O
supertype	O
of	O
all	O
object	O
array	O
types	O
,	O
is	O
that	O
Java	O
generics	O
are	O
invariant	O
without	O
the	O
presence	O
of	O
a	O
wildcard	O
.	O
Another	O
way	O
to	O
do	O
the	O
comparison	O
would	O
be	O
:	O
(	O
newType	O
=	O
=	O
(	O
Class	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
#	O
blockquote	O
#	O
li	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
creates	O
an	O
array	O
the	O
normal	O
way	O
,	O
of	O
a	O
type	O
that	O
is	O
statically	O
known	O
.	O
Remember	O
,	O
the	O
code	O
has	O
just	O
checked	O
that	O
T	O
[	O
]	O
is	O
Object	B-api_mention
[	O
]	O
.	O
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
reflection	O
to	O
dynamically	O
create	O
an	O
array	O
of	O
the	O
Class	O
type	O
passed	O
in	O
.	O
#	O
blockquote	O
An	O
operation	O
using	O
reflection	O
is	O
generally	O
slower	O
than	O
its	O
non	O
-	O
reflective	O
counterpart	O
.	O
The	O
reflection	O
tutorial	O
says	O
:	O
#	O
blockquote	O
Java	O
SE	O
is	O
filled	O
with	O
micro	O
-	O
optimization	O
like	O
this	O
.	O
The	O
writers	O
of	O
SE	O
try	O
to	O
squeeze	O
everything	O
they	O
can	O
out	O
of	O
it	O
.	O
But	O
I	O
wouldn	O
'	O
t	O
be	O
worried	O
about	O
a	O
performance	O
hit	O
in	O
this	O
case	O
:	O
newInstance	O
and	O
copyOf	B-api_mention
are	O
HotSpot	O
intrinsics	O
.	O
This	O
means	O
that	O
ideally	O
calls	O
to	O
these	O
methods	O
get	O
replaced	O
with	O
machine	O
-	O
specific	O
assembly	O
.	O
Anecdotally	O
,	O
I	O
ran	O
some	O
tests	O
and	O
found	O
the	O
difference	O
between	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
and	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
be	O
negligible	O
.	O
The	O
code	O
in	O
the	O
question	O
is	O
probably	O
a	O
relic	O
,	O
although	O
it	O
may	O
still	O
be	O
useful	O
on	O
less	O
well	O
-	O
equipped	O
JVMs	O
.	O
Reflection	O
can	O
also	O
be	O
disabled	O
in	O
certain	O
contexts	O
with	O
strict	O
security	O
(	O
such	O
as	O
an	O
applet	O
)	O
,	O
but	O
not	O
typically	O
for	O
a	O
normal	O
desktop	O
application	O
.	O
#	O
blockquote	O
In	O
general	O
,	O
you	O
will	O
probably	O
never	O
use	O
this	O
overload	O
.	O
This	O
overload	O
is	O
only	O
useful	O
if	O
you	O
want	O
to	O
change	O
the	O
type	O
of	O
the	O
array	O
.	O
#	O
li	O
Widening	O
:	O
#	O
pre	O
#	O
li	O
Narrowing	O
:	O
#	O
pre	O
It	O
'	O
s	O
more	O
typical	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
T	I-api_mention
[	I-api_mention
]	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25850622	O
a	O
.	O
I	O
have	O
always	O
seen	O
them	O
as	O
a	O
design	O
pattern	O
and	O
nothing	O
JVM	O
-	O
Special	O
I	O
have	O
used	O
that	O
pattern	O
in	O
several	O
situations	O
.	O
c	O
.	O
I	O
beleive	O
that	O
using	O
Annotations	B-api_mention
to	O
mark	O
something	O
is	O
a	O
better	O
solution	O
then	O
using	O
marker	O
interfaces	O
.	O
Simply	O
because	O
Interfaces	B-api_mention
are	O
in	O
the	O
first	O
place	O
aimed	O
to	O
define	O
common	O
interfaces	O
of	O
Types	O
/	O
Classes	O
.	O
They	O
are	O
part	O
of	O
the	O
class	O
-	O
hierachy	O
.	O
Annotations	O
are	O
aimed	O
to	O
provide	O
Meta	O
-	O
Informations	O
to	O
Code	O
,	O
and	O
I	O
think	O
that	O
marker	O
are	O
meta	O
-	O
informations	O
.	O
So	O
they	O
are	O
exactly	O
for	O
that	O
use	O
-	O
case	O
.	O
Question	O
-	O
19235606	O
I	O
am	O
having	O
trouble	O
understanding	O
the	O
Stream	B-api_mention
interface	O
in	O
Java	O
8	O
,	O
especially	O
where	O
it	O
has	O
to	O
do	O
with	O
the	O
Spliterator	B-api_mention
and	O
Collector	B-api_mention
interfaces	O
.	O
My	O
problem	O
is	O
that	O
I	O
simply	O
can	O
'	O
t	O
understand	O
yet	O
the	O
Spliterator	B-api_mention
and	O
the	O
Collector	B-api_mention
interfaces	O
,	O
and	O
as	O
a	O
result	O
the	O
Stream	B-api_mention
interface	O
is	O
still	O
somewhat	O
obscure	O
to	O
me	O
.	O
What	O
exactly	O
is	O
a	O
Spliterator	B-api_mention
and	O
a	O
Collector	B-api_mention
,	O
and	O
how	O
can	O
I	O
use	O
them	O
?	O
If	O
I	O
am	O
willing	O
to	O
write	O
my	O
own	O
Spliterator	B-api_mention
or	O
Collector	B-api_mention
(	O
and	O
probably	O
my	O
own	O
Stream	B-api_mention
in	O
that	O
process	O
)	O
,	O
what	O
should	O
I	O
do	O
and	O
not	O
do	O
?	O
I	O
read	O
some	O
examples	O
scattered	O
around	O
the	O
web	O
,	O
but	O
since	O
everything	O
here	O
is	O
stil	O
new	O
and	O
subject	O
to	O
changes	O
,	O
examples	O
and	O
tutorials	O
are	O
still	O
very	O
sparse	O
.	O
Question	O
-	O
29494800	O
I	O
have	O
trouble	O
understanding	O
the	O
source	O
code	O
of	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
.	O
#	O
pre	O
#	O
li	O
what	O
is	O
this	O
line	O
checking	O
?	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	O
class	O
#	O
li	O
What	O
are	O
the	O
differences	O
between	O
(	O
T	O
[	O
]	O
)	O
new	O
Object	B-api_mention
[	O
newLength	O
]	O
and	O
(	O
T	O
[	O
]	O
)	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
why	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
not	O
good	O
enough	O
for	O
both	O
cases	O
?	O
#	O
li	O
This	O
following	O
line	O
compiles	O
,	O
but	O
crashes	O
at	O
run	O
time	O
(	O
as	O
expected	O
)	O
.	O
When	O
should	O
I	O
use	O
this	O
method	O
?	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
12468764	O
,	O
answer	O
-	O
24537575	O
I	O
'	O
ve	O
found	O
a	O
very	O
nice	O
and	O
concise	O
solution	O
,	O
especially	O
useful	O
when	O
you	O
cannot	O
modify	O
enum	O
classes	O
as	O
it	O
was	O
in	O
my	O
case	O
.	O
Then	O
you	O
should	O
provide	O
a	O
custom	O
ObjectMapper	B-api_mention
with	O
a	O
certain	O
feature	O
enabled	O
.	O
Those	O
features	O
are	O
available	O
since	O
Jackson	O
1	O
.	O
6	O
.	O
So	O
you	O
only	O
need	O
to	O
write	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
your	O
enum	O
.	O
#	O
pre	O
There	O
are	O
more	O
enum	O
-	O
related	O
features	O
available	O
,	O
see	O
here	O
:	O
#	O
a	O
#	O
a	O
Question	O
-	O
30081520	O
,	O
answer	O
-	O
30081600	O
From	O
Objects	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
return	O
(	O
args	O
)	O
|	O
|	O
(	O
a	O
!	O
=	O
null	O
&	O
&	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
;	O
Very	O
simple	O
,	O
self	O
-	O
explaining	O
and	O
elegant	O
.	O
Question	O
-	O
32323081	O
,	O
answer	O
-	O
32323305	O
Any	O
lambda	B-api_mention
which	O
could	O
be	O
accepted	O
as	O
a	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
can	O
also	O
be	O
accepted	O
as	O
a	O
ThrowingSupplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
The	O
following	O
compiles	O
:	O
#	O
pre	O
Given	O
the	O
above	O
,	O
you	O
probably	O
don	O
'	O
t	O
need	O
this	O
,	O
but	O
if	O
foo	O
must	O
accept	O
a	O
non	O
-	O
throwing	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
you	O
can	O
always	O
wrap	O
the	O
Exception	B-api_mention
-	O
throwing	O
method	O
in	O
a	O
method	O
which	O
launders	O
it	O
into	O
an	O
unchecked	O
Exception	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
18777989	O
,	O
answer	O
-	O
18778228	O
You	O
made	O
a	O
good	O
summery	O
of	O
the	O
practical	O
differences	O
in	O
use	O
and	O
implementation	O
but	O
did	O
not	O
say	O
anything	O
about	O
the	O
difference	O
in	O
meaning	O
.	O
An	O
interface	O
is	O
a	O
description	O
of	O
the	O
behaviour	O
an	O
implementing	O
class	O
will	O
have	O
.	O
The	O
implementing	O
class	O
ensures	O
,	O
that	O
it	O
will	O
have	O
these	O
methods	O
that	O
can	O
be	O
used	O
on	O
it	O
.	O
It	O
is	O
basically	O
a	O
contract	O
or	O
a	O
promise	O
the	O
class	O
has	O
to	O
make	O
.	O
An	O
abstract	O
class	O
is	O
a	O
basis	O
for	O
different	O
subclasses	O
that	O
share	O
behaviour	O
which	O
does	O
not	O
need	O
to	O
be	O
repeatedly	O
be	O
created	O
.	O
Subclasses	O
must	O
complete	O
the	O
behaviour	O
and	O
have	O
the	O
option	O
to	O
override	O
predefine	O
behaviour	O
(	O
as	O
long	O
as	O
it	O
is	O
not	O
defined	O
as	O
final	O
or	O
private	O
)	O
.	O
You	O
will	O
find	O
good	O
examples	O
in	O
the	O
java	O
.	O
util	O
package	O
which	O
includes	O
interfaces	O
like	O
List	B-api_mention
and	O
abstract	O
classes	O
like	O
AbstractList	B-api_mention
which	O
already	O
implements	O
the	O
interface	O
.	O
The	O
official	O
documentation	O
describes	O
the	O
AbstractList	B-api_mention
as	O
follows	O
:	O
#	O
blockquote	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
30270403	O
There	O
is	O
a	O
function	O
called	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
that	O
can	O
remove	O
all	O
whitespaces	O
by	O
replacing	O
them	O
with	O
whatever	O
you	O
want	O
.	O
As	O
an	O
example	O
#	O
pre	O
will	O
give	O
you	O
:	O
First	O
:	O
15	O
.	O
94	O
,	O
Second	O
:	O
16	O
.	O
01	O
Question	O
-	O
10904911	O
,	O
answer	O
-	O
10904956	O
What	O
you	O
want	O
is	O
the	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
There	O
is	O
a	O
static	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
helper	O
method	O
for	O
every	O
different	O
primitive	O
java	O
type	O
;	O
the	O
one	O
for	O
int	O
[	O
]	O
says	O
this	O
:	O
#	O
blockquote	O
Question	O
-	O
15430247	O
The	O
usual	O
constructor	O
of	O
ArrayList	B-api_mention
is	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
there	O
is	O
also	O
an	O
overloaded	O
constructor	O
with	O
a	O
parameter	O
for	O
its	O
initial	O
capacity	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Why	O
is	O
it	O
useful	O
to	O
create	O
an	O
ArrayList	B-api_mention
with	O
an	O
initial	O
capacity	O
when	O
we	O
can	O
append	O
to	O
it	O
as	O
we	O
please	O
?	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
24296741	O
Here	O
'	O
s	O
another	O
technique	O
I	O
ran	O
across	O
the	O
other	O
day	O
:	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
call	O
creates	O
a	O
List	B-api_mention
containing	O
n	O
copies	O
of	O
whatever	O
value	O
you	O
provide	O
.	O
In	O
this	O
case	O
it	O
'	O
s	O
the	O
boxed	O
Integer	O
value	O
1	O
.	O
Of	O
course	O
it	O
doesn	O
'	O
t	O
actually	O
create	O
a	O
list	O
with	O
n	O
elements	O
;	O
it	O
creates	O
a	O
"	O
virtualized	O
"	O
list	O
that	O
contains	O
only	O
the	O
value	O
and	O
the	O
length	O
,	O
and	O
any	O
call	O
to	O
get	O
within	O
range	O
just	O
returns	O
the	O
value	O
.	O
The	O
nCopies	B-api_mention
method	O
has	O
been	O
around	O
since	O
the	O
Collections	B-api_mention
Framework	O
was	O
introduced	O
way	O
back	O
in	O
JDK	O
1	O
.	O
2	O
.	O
Of	O
course	O
,	O
the	O
ability	O
to	O
create	O
a	O
stream	O
from	O
its	O
result	O
was	O
added	O
in	O
Java	O
SE	O
8	O
.	O
Big	O
deal	O
,	O
another	O
way	O
to	O
do	O
the	O
same	O
thing	O
in	O
about	O
the	O
same	O
number	O
of	O
lines	O
.	O
However	O
,	O
this	O
technique	O
is	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
generate	I-api_mention
and	O
IntStream	B-api_mention
.	I-api_mention
iterate	I-api_mention
approaches	O
,	O
and	O
surprisingly	O
,	O
it	O
'	O
s	O
also	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
approach	O
.	O
For	O
iterate	O
and	O
generate	O
the	O
result	O
is	O
perhaps	O
not	O
too	O
surprising	O
.	O
The	O
streams	O
framework	O
(	O
really	O
,	O
the	O
Spliterators	O
for	O
these	O
streams	O
)	O
is	O
built	O
on	O
the	O
assumption	O
that	O
the	O
lambdas	O
will	O
potentially	O
generate	O
different	O
values	O
each	O
time	O
,	O
and	O
that	O
they	O
will	O
generate	O
an	O
unbounded	O
number	O
of	O
results	O
.	O
This	O
makes	O
parallel	O
splitting	O
particularly	O
difficult	O
.	O
The	O
iterate	O
method	O
is	O
also	O
problematic	O
for	O
this	O
case	O
because	O
each	O
call	O
requires	O
the	O
result	O
of	O
the	O
previous	O
one	O
.	O
So	O
the	O
streams	O
using	O
generate	O
and	O
iterate	O
don	O
'	O
t	O
do	O
very	O
well	O
for	O
generating	O
repeated	O
constants	O
.	O
The	O
relatively	O
poor	O
performance	O
of	O
range	O
is	O
surprising	O
.	O
This	O
too	O
is	O
virtualized	O
,	O
so	O
the	O
elements	O
don	O
'	O
t	O
actually	O
all	O
exist	O
in	O
memory	O
,	O
and	O
the	O
size	O
is	O
known	O
up	O
front	O
.	O
This	O
should	O
make	O
for	O
a	O
fast	O
and	O
easily	O
parallelizable	O
spliterator	O
.	O
But	O
it	O
surprisingly	O
didn	O
'	O
t	O
do	O
very	O
well	O
.	O
Perhaps	O
the	O
reason	O
is	O
that	O
range	O
has	O
to	O
compute	O
a	O
value	O
for	O
each	O
element	O
of	O
the	O
range	O
and	O
then	O
call	O
a	O
function	O
on	O
it	O
.	O
But	O
this	O
function	O
just	O
ignores	O
its	O
input	O
and	O
returns	O
a	O
constant	O
,	O
so	O
I	O
'	O
m	O
surprised	O
this	O
isn	O
'	O
t	O
inlined	O
and	O
killed	O
.	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
technique	O
has	O
to	O
do	O
boxing	O
/	O
unboxing	O
in	O
order	O
to	O
handle	O
the	O
values	O
,	O
since	O
there	O
are	O
no	O
primitive	O
specializations	O
of	O
List	B-api_mention
.	O
Since	O
the	O
value	O
is	O
the	O
same	O
every	O
time	O
,	O
it	O
'	O
s	O
basically	O
boxed	O
once	O
and	O
that	O
box	O
is	O
shared	O
by	O
all	O
n	O
copies	O
.	O
I	O
suspect	O
boxing	O
/	O
unboxing	O
is	O
highly	O
optimized	O
,	O
even	O
intrinsified	O
,	O
and	O
it	O
can	O
be	O
inlined	O
well	O
.	O
Here	O
'	O
s	O
the	O
code	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
JMH	O
results	O
:	O
(	O
2	O
.	O
8GHz	O
Core2Duo	O
)	O
#	O
pre	O
There	O
is	O
a	O
fair	O
amount	O
of	O
variance	O
in	O
the	O
ncopies	O
version	O
,	O
but	O
overall	O
it	O
seems	O
comfortably	O
20x	O
faster	O
than	O
the	O
range	O
version	O
.	O
(	O
I	O
'	O
d	O
be	O
quite	O
willing	O
to	O
believe	O
that	O
I	O
'	O
ve	O
done	O
something	O
wrong	O
,	O
though	O
.	O
)	O
I	O
'	O
m	O
surprised	O
at	O
how	O
well	O
the	O
nCopies	B-api_mention
technique	O
works	O
.	O
Internally	O
it	O
doesn	O
'	O
t	O
do	O
very	O
much	O
special	O
,	O
with	O
the	O
stream	O
of	O
the	O
virtualized	O
list	O
simply	O
being	O
implemented	O
using	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
!	O
I	O
had	O
expected	O
that	O
it	O
would	O
be	O
necessary	O
to	O
create	O
a	O
specialized	O
spliterator	O
to	O
get	O
this	O
to	O
go	O
fast	O
,	O
but	O
it	O
already	O
seems	O
to	O
be	O
pretty	O
good	O
.	O
Question	O
-	O
25606833	O
,	O
answer	O
-	O
25757572	O
There	O
are	O
several	O
issues	O
here	O
.	O
#	O
li	O
Any	O
solution	O
based	O
on	O
reading	O
lines	O
is	O
going	O
to	O
process	O
each	O
character	O
twice	O
.	O
Compilers	O
for	O
example	O
don	O
'	O
t	O
do	O
this	O
,	O
they	O
read	O
one	O
character	O
at	O
a	O
time	O
and	O
despatch	O
on	O
it	O
directly	O
.	O
#	O
li	O
Any	O
solution	O
based	O
on	O
readLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
going	O
to	O
create	O
Strings	B-api_mention
.	O
#	O
li	O
You	O
are	O
using	O
different	O
buffer	O
sizes	O
.	O
#	O
li	O
You	O
are	O
using	O
different	O
I	O
/	O
O	O
technologies	O
.	O
#	O
li	O
In	O
some	O
cases	O
you	O
are	O
using	O
character	O
conversion	O
,	O
while	O
in	O
others	O
you	O
aren	O
'	O
t	O
.	O
#	O
li	O
You	O
'	O
re	O
over	O
-	O
analyzing	O
the	O
file	O
.	O
You	O
don	O
'	O
t	O
really	O
care	O
where	O
the	O
white	O
space	O
is	O
,	O
or	O
how	O
much	O
of	O
it	O
there	O
is	O
,	O
as	O
long	O
as	O
it	O
separates	O
the	O
numbers	O
from	O
each	O
other	O
.	O
My	O
solution	O
:	O
#	O
pre	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908294	O
The	O
Oracle	O
documentation	O
about	O
Enum	B-api_mention
says	O
(	O
first	O
line	O
)	O
:	O
#	O
blockquote	O
If	O
this	O
is	O
true	O
then	O
,	O
yes	O
,	O
your	O
enum1	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
enum2	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
guaranteed	O
to	O
be	O
true	O
if	O
the	O
names	O
are	O
the	O
same	O
.	O
Also	O
,	O
in	O
the	O
method	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
javadoc	O
:	O
#	O
blockquote	O
For	O
example	O
,	O
if	O
you	O
had	O
two	O
enums	O
,	O
Days	O
and	O
MyDays	O
,	O
where	O
SUNDAY	O
is	O
a	O
common	O
value	O
,	O
=	O
=	O
between	O
the	O
enum	O
object	O
values	O
,	O
SUNDAY	O
will	O
return	O
true	O
as	O
you	O
are	O
comparing	O
two	O
strings	O
-	O
see	O
the	O
working	O
example	O
in	O
#	O
a	O
.	O
#	O
pre	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276469	O
It	O
will	O
be	O
fine	O
if	O
you	O
only	O
close	O
the	O
last	O
stream	O
-	O
the	O
close	O
call	O
will	O
be	O
send	O
to	O
the	O
underlying	O
streams	O
,	O
too	O
.	O
Question	O
-	O
27747562	O
In	O
the	O
following	O
code	O
,	O
a	O
dowcast	O
to	O
an	O
apparently	O
incompatible	O
type	O
passes	O
compilation	O
:	O
#	O
pre	O
Item	B-api_mention
and	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
are	O
disparate	O
types	O
so	O
the	O
cast	O
can	O
never	O
succeed	O
.	O
Why	O
did	O
the	O
compiler	O
allow	O
this	O
?	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
10827945	O
The	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
overloaded	O
to	O
accept	O
both	O
a	O
primitive	O
char	O
and	O
a	O
CharSequence	B-api_mention
as	O
arguments	O
.	O
Now	O
as	O
far	O
as	O
the	O
performance	O
is	O
concerned	O
,	O
the	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
a	O
bit	O
faster	O
than	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
the	O
later	O
first	O
compiles	O
the	O
regex	O
pattern	O
and	O
then	O
matches	O
before	O
finally	O
replacing	O
whereas	O
the	O
former	O
simply	O
matches	O
for	O
the	O
provided	O
argument	O
and	O
replaces	O
.	O
Since	O
we	O
know	O
the	O
regex	O
pattern	O
matching	O
is	O
a	O
bit	O
more	O
complex	O
and	O
consequently	O
slower	O
,	O
then	O
preferring	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
over	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
suggested	O
whenever	O
possible	O
.	O
For	O
example	O
,	O
for	O
simple	O
substitutions	O
like	O
you	O
mentioned	O
,	O
it	O
is	O
better	O
to	O
use	O
:	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
of	O
:	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
:	O
the	O
above	O
conversion	O
method	O
arguments	O
are	O
system	O
-	O
dependent	O
.	O
Question	O
-	O
22694884	O
,	O
answer	O
-	O
22695031	O
Technically	O
there	O
'	O
s	O
an	O
ugly	O
'	O
workaround	O
'	O
that	O
involves	O
peek	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
an	O
AtomicInteger	B-api_mention
,	O
but	O
really	O
you	O
shouldn	O
'	O
t	O
be	O
using	O
that	O
.	O
What	O
I	O
do	O
in	O
these	O
cases	O
is	O
just	O
collecting	O
it	O
in	O
a	O
list	O
,	O
like	O
this	O
:	O
#	O
pre	O
I	O
am	O
not	O
aware	O
of	O
a	O
way	O
to	O
do	O
this	O
in	O
the	O
API	O
,	O
meanwhile	O
I	O
will	O
work	O
on	O
another	O
example	O
involving	O
a	O
custom	O
element	O
.	O
Update	O
,	O
You	O
should	O
create	O
your	O
own	O
Collector	B-api_mention
for	O
this	O
:	O
#	O
pre	O
What	O
it	O
does	O
is	O
:	O
#	O
li	O
It	O
mimicks	O
the	O
Collectors	B-api_mention
.	I-api_mention
toList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
collector	O
.	O
#	O
li	O
It	O
applies	O
an	O
extra	O
finisher	O
at	O
the	O
end	O
,	O
that	O
throws	O
an	O
exception	O
,	O
or	O
if	O
no	O
exception	O
,	O
returns	O
the	O
first	O
element	O
of	O
the	O
list	O
.	O
Used	O
as	O
:	O
User	B-api_mention
resultUser	O
=	O
users	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
can	O
then	O
customize	O
this	O
singletonCollector	B-api_mention
as	O
much	O
as	O
you	O
want	O
,	O
for	O
example	O
give	O
the	O
exception	O
as	O
argument	O
in	O
the	O
constructor	O
,	O
tweak	O
it	O
to	O
allow	O
two	O
values	O
,	O
and	O
more	O
.	O
New	O
update	O
,	O
I	O
revised	O
my	O
old	O
answer	O
once	O
more	O
for	O
singletonCollector	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
it	O
can	O
actually	O
be	O
obtained	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275761	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
defined	O
in	O
Object	B-api_mention
class	O
with	O
the	O
following	O
signature	O
:	O
#	O
blockquote	O
Since	O
it	O
is	O
not	O
defined	O
as	O
static	O
,	O
you	O
can	O
not	O
call	O
it	O
within	O
a	O
static	O
code	O
block	O
.	O
See	O
these	O
answers	O
for	O
more	O
information	O
:	O
Q1	O
,	O
Q2	O
,	O
Q3	O
.	O
If	O
you	O
'	O
re	O
in	O
a	O
static	O
context	O
,	O
then	O
you	O
have	O
to	O
use	O
the	O
class	O
literal	O
expression	O
to	O
get	O
the	O
Class	B-api_mention
,	O
so	O
you	O
basically	O
have	O
to	O
do	O
like	O
:	O
#	O
blockquote	O
This	O
type	O
of	O
expression	O
is	O
called	O
Class	B-api_mention
Literals	O
and	O
they	O
are	O
explained	O
in	O
Java	O
Language	O
Specification	O
Book	O
as	O
follows	O
:	O
#	O
blockquote	O
You	O
can	O
also	O
find	O
information	O
about	O
this	O
subject	O
on	O
API	O
documentation	O
for	O
Class	B-api_mention
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26819171	O
This	O
is	O
not	O
an	O
easy	O
problem	O
.	O
And	O
the	O
more	O
search	O
-	O
replacement	O
parameters	O
you	O
have	O
,	O
the	O
trickier	O
it	O
gets	O
.	O
You	O
have	O
several	O
options	O
,	O
scattered	O
on	O
the	O
palette	O
of	O
ugly	O
-	O
elegant	O
,	O
efficient	O
-	O
wasteful	O
:	O
#	O
li	O
Use	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
from	O
Apache	O
Commons	O
as	O
@	O
AlanHay	O
recommended	O
.	O
This	O
is	O
a	O
good	O
option	O
if	O
you	O
'	O
re	O
free	O
to	O
add	O
new	O
dependencies	O
in	O
your	O
project	O
.	O
You	O
might	O
get	O
lucky	O
:	O
the	O
dependency	O
might	O
be	O
included	O
already	O
in	O
your	O
project	O
#	O
li	O
Use	O
a	O
temporary	O
placeholder	O
as	O
@	O
Jeroen	O
suggested	O
,	O
and	O
perform	O
the	O
replacement	O
in	O
2	O
steps	O
:	O
#	O
li	O
Replace	O
all	O
search	O
patterns	O
with	O
a	O
unique	O
tag	O
that	O
doesn	O
'	O
t	O
exist	O
in	O
the	O
original	O
text	O
#	O
li	O
Replace	O
the	O
placeholders	O
with	O
the	O
real	O
target	O
replacement	O
This	O
is	O
not	O
a	O
great	O
approach	O
,	O
for	O
several	O
reasons	O
:	O
it	O
needs	O
to	O
ensure	O
that	O
the	O
tags	O
used	O
in	O
the	O
first	O
step	O
are	O
really	O
unique	O
;	O
it	O
performs	O
more	O
string	O
replacement	O
operations	O
than	O
really	O
necessary	O
#	O
li	O
Build	O
a	O
regex	O
from	O
all	O
the	O
patterns	O
and	O
use	O
the	O
method	O
with	O
Matcher	B-api_mention
and	O
StringBuffer	B-api_mention
as	O
suggested	O
by	O
@	O
arshajii	O
.	O
This	O
is	O
not	O
terrible	O
,	O
but	O
not	O
that	O
great	O
either	O
,	O
as	O
building	O
the	O
regex	O
is	O
kind	O
of	O
hackish	O
,	O
and	O
it	O
involves	O
StringBuffer	B-api_mention
which	O
went	O
out	O
of	O
fashion	O
a	O
while	O
ago	O
in	O
favor	O
of	O
StringBuilder	B-api_mention
.	O
#	O
li	O
Use	O
a	O
recursive	O
solution	O
proposed	O
by	O
@	O
mjolka	O
,	O
by	O
splitting	O
the	O
string	O
at	O
the	O
matched	O
patterns	O
,	O
and	O
recursing	O
on	O
the	O
remaining	O
segments	O
.	O
This	O
is	O
a	O
fine	O
solution	O
,	O
compact	O
and	O
quite	O
elegant	O
.	O
Its	O
weakness	O
is	O
the	O
potentially	O
many	O
substring	O
and	O
concatenation	O
operations	O
,	O
and	O
the	O
stack	O
size	O
limits	O
that	O
apply	O
to	O
all	O
recursive	O
solutions	O
#	O
li	O
Split	O
the	O
text	O
to	O
words	O
and	O
use	O
Java	O
8	O
streams	O
to	O
perform	O
the	O
replacements	O
elegantly	O
as	O
@	O
msandiford	O
suggested	O
,	O
but	O
of	O
course	O
that	O
only	O
works	O
if	O
you	O
are	O
ok	O
with	O
splitting	O
at	O
word	O
boundaries	O
,	O
which	O
makes	O
it	O
not	O
suitable	O
as	O
a	O
general	O
solution	O
Here	O
'	O
s	O
my	O
version	O
,	O
based	O
on	O
ideas	O
borrowed	O
from	O
Apache	O
'	O
s	O
implementation	O
.	O
It	O
'	O
s	O
neither	O
simple	O
nor	O
elegant	O
,	O
but	O
it	O
works	O
,	O
and	O
should	O
be	O
relatively	O
efficient	O
,	O
without	O
unnecessary	O
steps	O
.	O
In	O
a	O
nutshell	O
,	O
it	O
works	O
like	O
this	O
:	O
repeatedly	O
find	O
the	O
next	O
matching	O
search	O
pattern	O
in	O
the	O
text	O
,	O
and	O
use	O
a	O
StringBuilder	B-api_mention
to	O
accumulate	O
the	O
unmatched	O
segments	O
and	O
the	O
replacements	O
.	O
#	O
pre	O
Unit	O
tests	O
:	O
#	O
pre	O
Question	O
-	O
29280857	O
,	O
answer	O
-	O
29382161	O
As	O
stated	O
previously	O
,	O
you	O
should	O
lock	O
on	O
both	O
accounts	O
,	O
always	O
in	O
the	O
same	O
order	O
.	O
The	O
key	O
part	O
,	O
however	O
,	O
is	O
ensuring	O
both	O
high	O
granularity	O
and	O
singularity	O
across	O
the	O
VM	O
instance	O
.	O
This	O
can	O
be	O
done	O
using	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684852	O
What	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
is	O
create	O
a	O
string	O
representation	O
of	O
each	O
individual	O
byte	O
in	O
your	O
byteArray	B-api_mention
.	O
Please	O
check	O
the	O
API	O
documentation	O
Arrays	B-api_mention
API	O
To	O
convert	O
your	O
response	O
string	O
back	O
to	O
the	O
original	O
byte	O
array	O
,	O
you	O
have	O
to	O
use	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
something	O
and	O
convert	O
it	O
into	O
a	O
collection	O
and	O
then	O
convert	O
each	O
individual	O
item	O
in	O
there	O
to	O
a	O
byte	O
to	O
recreate	O
your	O
byte	O
array	O
.	O
Question	O
-	O
23674624	O
I	O
'	O
m	O
looking	O
at	O
the	O
docs	O
for	O
the	O
IntStream	B-api_mention
,	O
and	O
I	O
see	O
an	O
toArray	B-api_mention
method	O
,	O
but	O
no	O
way	O
to	O
go	O
directly	O
to	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Surely	O
there	O
is	O
a	O
way	O
to	O
convert	O
a	O
Stream	B-api_mention
to	O
a	O
List	B-api_mention
?	O
Question	O
-	O
16324831	O
,	O
answer	O
-	O
16324963	O
Note	O
:	O
everything	O
in	O
this	O
post	O
is	O
in	O
the	O
source	O
of	O
Java7	O
-	O
b147	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
goes	O
into	O
a	O
Sun	O
library	O
(	O
in	O
sun	B-api_mention
.	I-api_mention
misc	I-api_mention
.	I-api_mention
FloatingDecimal	I-api_mention
)	O
the	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
done	O
manually	O
in	O
the	O
Integer	B-api_mention
class	O
.	O
The	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
I	O
would	O
guess	O
there	O
are	O
two	O
different	O
authors	O
.	O
Question	O
-	O
31188231	O
It	O
has	O
generally	O
been	O
the	O
case	O
the	O
Java	O
source	O
code	O
has	O
been	O
forward	O
compatible	O
.	O
Until	O
Java	O
8	O
,	O
as	O
far	O
as	O
I	O
know	O
,	O
both	O
compiled	O
classes	O
and	O
source	O
have	O
been	O
forward	O
compatible	O
with	O
later	O
JDK	O
/	O
JVM	O
releases	O
.	O
[	O
Update	O
:	O
this	O
is	O
not	O
correct	O
,	O
see	O
comments	O
re	O
'	O
enum	O
'	O
,	O
etc	O
,	O
below	O
.	O
]	O
However	O
,	O
with	O
the	O
addition	O
of	O
default	O
methods	O
in	O
Java	O
8	O
this	O
appears	O
to	O
no	O
longer	O
be	O
the	O
case	O
.	O
For	O
example	O
,	O
a	O
library	O
I	O
have	O
been	O
using	O
has	O
an	O
implementation	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
which	O
includes	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
method	O
returns	O
a	O
copy	O
of	O
the	O
contents	O
of	O
the	O
list	O
sorted	O
.	O
This	O
library	O
,	O
deployed	O
as	O
a	O
jar	O
file	O
dependency	O
,	O
worked	O
fine	O
in	O
a	O
project	O
being	O
built	O
using	O
JDK	O
1	O
.	O
8	O
.	O
However	O
,	O
later	O
I	O
had	O
occasion	O
to	O
recompile	O
the	O
library	O
itself	O
using	O
JDK	O
1	O
.	O
8	O
and	O
I	O
found	O
the	O
library	O
no	O
longer	O
compiles	O
:	O
the	O
List	B-api_mention
-	O
implementing	O
class	O
with	O
its	O
own	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
now	O
conflicts	O
with	O
the	O
Java	O
8	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
.	O
The	O
Java	O
8	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
sorts	O
the	O
list	O
in	O
place	O
(	O
returns	O
void	O
)	O
;	O
my	O
library	O
'	O
s	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
-	O
since	O
it	O
returns	O
a	O
new	O
sorted	O
list	O
-	O
has	O
an	O
incompatible	O
signature	O
.	O
So	O
my	O
basic	O
question	O
is	O
:	O
#	O
li	O
Doesn	O
'	O
t	O
JDK	O
1	O
.	O
8	O
introduce	O
a	O
forward	O
incompatibility	O
for	O
Java	O
source	O
code	O
due	O
to	O
default	O
methods	O
?	O
Also	O
:	O
#	O
li	O
Is	O
this	O
the	O
first	O
such	O
forward	O
incompatible	O
change	O
?	O
#	O
li	O
Was	O
this	O
considered	O
or	O
discussed	O
when	O
default	O
methods	O
where	O
designed	O
and	O
implemented	O
?	O
Is	O
it	O
documented	O
anywhere	O
?	O
#	O
li	O
Was	O
the	O
(	O
admittedly	O
small	O
)	O
inconvenience	O
discounted	O
versus	O
the	O
benefits	O
?	O
The	O
following	O
is	O
an	O
example	O
of	O
some	O
code	O
that	O
compiles	O
and	O
runs	O
under	O
1	O
.	O
7	O
and	O
runs	O
under	O
1	O
.	O
8	O
-	O
but	O
does	O
not	O
compile	O
under	O
1	O
.	O
8	O
:	O
#	O
pre	O
The	O
following	O
shows	O
this	O
code	O
being	O
compiled	O
(	O
or	O
failing	O
to	O
)	O
and	O
being	O
run	O
.	O
#	O
pre	O
Question	O
-	O
5839359	O
,	O
answer	O
-	O
5839392	O
You	O
'	O
re	O
essentially	O
running	O
out	O
of	O
memory	O
to	O
run	O
the	O
process	O
smoothly	O
.	O
Options	O
that	O
come	O
to	O
mind	O
:	O
#	O
li	O
Specify	O
more	O
memory	O
like	O
you	O
mentioned	O
,	O
try	O
something	O
in	O
between	O
like	O
-	O
Xmx512m	O
first	O
#	O
li	O
Work	O
with	O
smaller	O
batches	O
of	O
HashMap	B-api_mention
objects	O
to	O
process	O
at	O
once	O
if	O
possible	O
#	O
li	O
If	O
you	O
have	O
a	O
lot	O
of	O
duplicate	O
strings	O
,	O
use	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
them	O
before	O
putting	O
them	O
into	O
the	O
HashMap	B-api_mention
#	O
li	O
Use	O
the	O
HashMap	B-api_mention
(	O
int	O
initialCapacity	O
,	O
float	O
loadFactor	O
)	O
constructor	O
to	O
tune	O
for	O
your	O
case	O
Question	O
-	O
5455794	O
,	O
answer	O
-	O
5455820	O
How	O
about	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Refer	O
here	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32744190	O
There	O
is	O
no	O
actual	O
difference	O
in	O
the	O
functionality	O
between	O
the	O
2	O
version	O
'	O
s	O
loop	O
.	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
does	O
the	O
exact	O
same	O
thing	O
.	O
So	O
the	O
choice	O
to	O
use	O
it	O
or	O
not	O
may	O
not	O
necessarily	O
be	O
considered	O
a	O
mistake	O
.	O
It	O
is	O
left	O
up	O
to	O
the	O
developer	O
to	O
decide	O
when	O
it	O
comes	O
to	O
this	O
kind	O
of	O
micromanagement	O
.	O
There	O
are	O
2	O
separate	O
concerns	O
for	O
each	O
approach	O
:	O
#	O
li	O
using	O
the	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
makes	O
the	O
code	O
less	O
verbose	O
and	O
more	O
readable	O
.	O
#	O
li	O
looping	O
directly	O
in	O
the	O
HashMap	B-api_mention
code	O
(	O
like	O
version	O
8	O
)	O
peformance	O
wise	O
is	O
actually	O
a	O
better	O
option	O
.	O
While	O
the	O
overhead	O
that	O
inserting	O
the	O
Arrays	B-api_mention
class	O
is	O
negligible	O
it	O
may	O
become	O
less	O
so	O
when	O
it	O
comes	O
to	O
something	O
as	O
widespread	O
as	O
HashMap	B-api_mention
where	O
every	O
bit	O
of	O
performance	O
enhancement	O
has	O
a	O
large	O
effect	O
(	O
imagine	O
the	O
tiniest	O
footprint	O
reduce	O
of	O
a	O
HashMap	B-api_mention
in	O
fullblown	O
webapp	O
)	O
.	O
Take	O
into	O
consideration	O
the	O
fact	O
that	O
the	O
Arrays	B-api_mention
class	O
was	O
used	O
only	O
for	O
this	O
one	O
loop	O
.	O
The	O
change	O
is	O
small	O
enough	O
that	O
it	O
doesn	O
'	O
t	O
make	O
the	O
clear	O
method	O
less	O
readable	O
.	O
The	O
precise	O
reason	O
can	O
'	O
t	O
be	O
found	O
out	O
without	O
asking	O
the	O
developer	O
who	O
actually	O
did	O
this	O
,	O
however	O
i	O
suspect	O
it	O
'	O
s	O
either	O
a	O
mistake	O
or	O
a	O
small	O
enhancement	O
.	O
better	O
option	O
.	O
My	O
opinion	O
is	O
it	O
can	O
be	O
considered	O
an	O
enhancement	O
,	O
even	O
if	O
only	O
by	O
accident	O
.	O
Question	O
-	O
8189466	O
,	O
answer	O
-	O
23592535	O
I	O
had	O
that	O
same	O
problem	O
but	O
in	O
case	O
that	O
I	O
was	O
adding	O
en	O
element	O
into	O
iterated	O
list	O
.	O
I	O
made	O
it	O
this	O
way	O
#	O
pre	O
Now	O
everything	O
goes	O
fine	O
because	O
you	O
don	O
'	O
t	O
create	O
any	O
iterator	O
over	O
your	O
list	O
,	O
you	O
iterate	O
over	O
it	O
"	O
manually	O
"	O
.	O
And	O
condition	O
i	O
<	O
integerList	O
.	B-api_mention
size	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
never	O
fool	O
you	O
because	O
when	O
you	O
remove	O
/	O
add	O
something	O
into	O
List	B-api_mention
size	O
of	O
the	O
List	B-api_mention
decrement	O
/	O
increment	O
.	O
.	O
Hope	O
it	O
helps	O
,	O
for	O
me	O
that	O
was	O
solution	O
.	O
Question	O
-	O
15336477	O
All	O
I	O
'	O
m	O
trying	O
to	O
do	O
is	O
download	O
some	O
JSON	O
and	O
deserialize	O
it	O
into	O
an	O
object	O
.	O
I	O
haven	O
'	O
t	O
got	O
as	O
far	O
as	O
downloading	O
the	O
JSON	O
yet	O
.	O
Almost	O
every	O
single	O
HttpClient	B-api_mention
example	O
I	O
can	O
find	O
,	O
including	O
those	O
on	O
the	O
apache	O
site	O
looks	O
something	O
like	O
.	O
.	O
.	O
#	O
pre	O
However	O
,	O
Netbeans	O
tells	O
me	O
that	O
DefaultHttpClient	B-api_mention
is	O
deprecated	O
.	O
I	O
'	O
ve	O
tried	O
googling	O
for	O
DefaultHttpClient	B-api_mention
deprecated	O
and	O
as	O
many	O
other	O
variations	O
as	O
I	O
can	O
think	O
of	O
and	O
can	O
'	O
t	O
find	O
any	O
useful	O
results	O
,	O
so	O
I	O
'	O
m	O
obviously	O
missing	O
something	O
.	O
What	O
is	O
the	O
correct	O
Java7	O
way	O
to	O
download	O
the	O
contents	O
of	O
a	O
webpage	O
?	O
Is	O
there	O
really	O
no	O
decent	O
Http	O
Client	O
as	O
part	O
of	O
the	O
language	O
?	O
I	O
find	O
that	O
hard	O
to	O
believe	O
.	O
My	O
Maven	O
dependency	O
for	O
this	O
is	O
.	O
.	O
.	O
#	O
pre	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15432106	O
This	O
is	O
to	O
avoid	O
possible	O
efforts	O
for	O
reallocation	O
for	O
every	O
single	O
object	O
.	O
int	O
newCapacity	O
=	O
(	O
oldCapacity	O
*	O
3	O
)	O
/	O
2	O
+	O
1	O
;	O
internally	O
new	O
Object	B-api_mention
[	O
]	O
is	O
created	O
.	O
JVM	O
needs	O
effort	O
to	O
create	O
new	O
Object	B-api_mention
[	O
]	O
when	O
you	O
add	O
element	O
in	O
the	O
arraylist	O
.	O
If	O
you	O
don	O
'	O
t	O
have	O
above	O
code	O
(	O
any	O
algo	O
you	O
think	O
)	O
for	O
reallocation	O
then	O
every	O
time	O
when	O
you	O
invoke	O
arraylist	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
then	O
new	O
Object	B-api_mention
[	O
]	O
has	O
to	O
be	O
created	O
which	O
is	O
pointless	O
and	O
we	O
are	O
loosing	O
time	O
for	O
increasing	O
size	O
by	O
1	O
for	O
each	O
and	O
every	O
objects	O
to	O
be	O
added	O
.	O
So	O
it	O
is	O
better	O
to	O
increase	O
size	O
of	O
Object	B-api_mention
[	O
]	O
with	O
following	O
formula	O
.	O
(	O
JSL	O
has	O
used	O
forcasting	O
formula	O
given	O
below	O
for	O
dynamically	O
growing	O
arraylist	O
instead	O
of	O
growing	O
by	O
1	O
every	O
time	O
.	O
Because	O
to	O
grow	O
it	O
takes	O
effort	O
by	O
JVM	O
)	O
int	O
newCapacity	O
=	O
(	O
oldCapacity	O
*	O
3	O
)	O
/	O
2	O
+	O
1	O
;	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14495128	O
If	O
the	O
Math	B-api_mention
.	I-api_mention
Random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
calls	O
the	O
operating	O
system	O
to	O
get	O
the	O
time	O
of	O
day	O
,	O
then	O
you	O
cannot	O
compare	O
it	O
to	O
your	O
function	O
.	O
Your	O
function	O
is	O
a	O
PRNG	O
,	O
whereas	O
that	O
function	O
is	O
striving	O
for	O
real	O
random	O
numbers	O
.	O
Apples	O
and	O
oranges	O
.	O
Your	O
PRNG	O
may	O
be	O
fast	O
,	O
but	O
it	O
does	O
not	O
have	O
enough	O
state	O
information	O
to	O
achieve	O
a	O
long	O
period	O
before	O
it	O
repeats	O
(	O
and	O
its	O
logic	O
is	O
not	O
sophisticated	O
enough	O
to	O
even	O
achieve	O
the	O
periods	O
that	O
are	O
possible	O
with	O
that	O
much	O
state	O
information	O
)	O
.	O
Period	O
is	O
the	O
length	O
of	O
the	O
sequence	O
before	O
your	O
PRNG	O
begins	O
to	O
repeat	O
itself	O
.	O
This	O
happens	O
as	O
soon	O
as	O
the	O
PRNG	O
machine	O
makes	O
a	O
state	O
transition	O
to	O
a	O
state	O
which	O
is	O
identical	O
to	O
some	O
past	O
state	O
.	O
From	O
there	O
,	O
it	O
will	O
repeat	O
the	O
transitions	O
which	O
began	O
in	O
that	O
state	O
.	O
Another	O
problem	O
with	O
PRNG	O
'	O
s	O
can	O
be	O
a	O
low	O
number	O
of	O
unique	O
sequences	O
,	O
as	O
well	O
as	O
degenerate	O
convergence	O
on	O
a	O
particular	O
sequence	O
which	O
repeats	O
.	O
There	O
can	O
also	O
be	O
undesirable	O
patterns	O
.	O
For	O
instance	O
,	O
suppose	O
that	O
a	O
PRNG	O
looks	O
fairly	O
random	O
when	O
the	O
numbers	O
are	O
printed	O
in	O
decimal	O
,	O
but	O
an	O
inspection	O
of	O
the	O
values	O
in	O
binary	O
shows	O
that	O
bit	O
4	O
is	O
simply	O
toggling	O
between	O
0	O
and	O
1	O
on	O
each	O
call	O
.	O
Oops	O
!	O
Take	O
a	O
look	O
at	O
the	O
Mersenne	O
Twister	O
and	O
other	O
algorithms	O
.	O
There	O
are	O
ways	O
to	O
strike	O
a	O
balance	O
between	O
the	O
period	O
length	O
and	O
CPU	O
cycles	O
.	O
One	O
basic	O
approach	O
(	O
used	O
in	O
the	O
Mersenne	O
Twister	O
)	O
is	O
to	O
cycle	O
around	O
in	O
the	O
state	O
vector	O
.	O
That	O
is	O
to	O
say	O
,	O
when	O
a	O
number	O
is	O
being	O
generated	O
,	O
it	O
is	O
not	O
based	O
on	O
the	O
entire	O
state	O
,	O
just	O
on	O
a	O
few	O
words	O
from	O
the	O
state	O
array	O
subject	O
to	O
a	O
few	O
bit	O
operations	O
.	O
But	O
at	O
each	O
step	O
,	O
the	O
algorithm	O
also	O
moves	O
around	O
in	O
the	O
array	O
,	O
scrambling	O
the	O
contents	O
a	O
little	O
bit	O
at	O
a	O
time	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
31707746	O
One	O
of	O
most	O
upleasing	O
functional	O
forEach	B-api_mention
'	O
s	O
limitations	O
is	O
lack	O
of	O
checked	O
exceptions	O
support	O
.	O
One	O
possible	O
workaround	O
is	O
to	O
replace	O
terminal	O
forEach	B-api_mention
with	O
plain	O
old	O
foreach	O
loop	O
:	O
#	O
pre	O
Here	O
is	O
list	O
of	O
most	O
popular	O
questions	O
with	O
other	O
workarounds	O
on	O
checked	O
exception	O
handling	O
within	O
lambdas	O
and	O
streams	O
:	O
Java	O
8	O
Lambda	B-api_mention
function	O
that	O
throws	O
exception	O
?	O
Java	O
8	O
:	O
Lambda	B-api_mention
-	O
Streams	B-api_mention
,	O
Filter	B-api_mention
by	O
Method	O
with	O
Exception	B-api_mention
How	O
can	O
I	O
throw	O
CHECKED	O
exceptions	O
from	O
inside	O
Java	O
8	O
streams	B-api_mention
?	O
Java	O
8	O
:	O
Mandatory	O
checked	O
exceptions	O
handling	O
in	O
lambda	O
expressions	O
.	O
Why	O
mandatory	O
,	O
not	O
optional	O
?	O
Question	O
-	O
29328785	O
,	O
answer	O
-	O
29330741	O
It	O
'	O
s	O
not	O
so	O
hard	O
to	O
track	O
down	O
the	O
reason	O
for	O
the	O
odd	O
behavior	O
.	O
The	O
divide	O
call	O
goes	O
to	O
#	O
pre	O
This	O
,	O
internally	O
,	O
delegates	O
to	O
another	O
divide	O
method	O
,	O
based	O
on	O
the	O
rounding	O
mode	O
:	O
#	O
pre	O
In	O
this	O
case	O
,	O
the	O
last	O
call	O
applies	O
.	O
Note	O
that	O
the	O
intVal	O
(	O
which	O
is	O
a	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
)	O
is	O
passed	O
directly	O
to	O
this	O
method	O
as	O
the	O
first	O
argument	O
:	O
#	O
pre	O
Finally	O
,	O
the	O
path	O
to	O
the	O
second	O
divideAndRound	O
is	O
taken	O
here	O
,	O
again	O
passing	O
the	O
dividend	O
on	O
(	O
which	O
was	O
the	O
intVal	O
of	O
the	O
original	O
BigDecimal	B-api_mention
)	O
,	O
ending	O
up	O
with	O
this	O
code	O
:	O
#	O
pre	O
And	O
this	O
is	O
where	O
the	O
error	O
is	O
introduced	O
:	O
The	O
mdivididend	O
is	O
a	O
mutable	O
BigInteger	B-api_mention
,	O
that	O
was	O
created	O
as	O
a	O
mutable	O
view	O
on	O
the	O
mag	O
array	O
of	O
the	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
x	O
from	O
the	O
original	O
call	O
.	O
The	O
division	O
modifies	O
the	O
mag	O
field	O
,	O
and	O
thus	O
,	O
the	O
state	O
of	O
the	O
(	O
now	O
not	O
-	O
so	O
-	O
immutable	O
)	O
BigDecimal	B-api_mention
.	O
This	O
is	O
clearly	O
a	O
bug	O
in	O
the	O
implementation	O
of	O
one	O
of	O
the	O
divide	O
methods	O
.	O
I	O
already	O
started	O
tracking	O
the	O
change	O
sets	O
of	O
the	O
OpenJDK	O
,	O
but	O
have	O
not	O
yet	O
spotted	O
the	O
definite	O
culprit	O
.	O
(	O
Edit	O
:	O
See	O
updates	O
below	O
)	O
(	O
A	O
side	O
note	O
:	O
Calling	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
doing	O
the	O
division	O
does	O
not	O
really	O
avoid	O
,	O
but	O
only	O
hide	O
the	O
bug	O
:	O
It	O
causes	O
a	O
string	O
cache	O
of	O
the	O
correct	O
state	O
to	O
be	O
created	O
internally	O
.	O
The	O
right	O
value	O
is	O
printed	O
,	O
but	O
the	O
internal	O
state	O
is	O
still	O
wrong	O
-	O
which	O
is	O
concerning	O
,	O
to	O
say	O
the	O
least	O
.	O
.	O
.	O
)	O
#	O
blockquote	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
7521675	O
Just	O
remember	O
that	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
to	O
be	O
implemented	O
by	O
the	O
class	O
you	O
are	O
trying	O
to	O
compare	O
.	O
Otherwise	O
,	O
there	O
isn	O
'	O
t	O
much	O
of	O
a	O
point	O
;	O
the	O
version	O
of	O
the	O
method	O
for	O
the	O
Object	B-api_mention
class	O
does	O
the	O
same	O
thing	O
as	O
the	O
comparison	O
operation	O
:	O
Object	B-api_mention
#	I-api_mention
equals	I-api_mention
.	O
The	O
only	O
time	O
you	O
really	O
want	O
to	O
use	O
the	O
comparison	O
operator	O
for	O
objects	O
is	O
wen	O
you	O
are	O
comparing	O
Enums	O
.	O
This	O
is	O
because	O
there	O
is	O
only	O
one	O
instance	O
of	O
an	O
Enum	O
value	O
at	O
a	O
time	O
.	O
For	O
instance	O
,	O
given	O
the	O
enum	O
enum	O
FooEnum	O
{	O
A	O
,	O
B	O
,	O
C	O
}	O
You	O
will	O
never	O
have	O
more	O
than	O
one	O
instance	O
of	O
A	O
at	O
a	O
time	O
,	O
and	O
the	O
same	O
for	O
B	O
and	O
C	O
.	O
This	O
means	O
that	O
you	O
can	O
actually	O
write	O
a	O
method	O
like	O
so	O
:	O
#	O
pre	O
And	O
you	O
will	O
have	O
no	O
problems	O
whatsoever	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28460301	O
Stream	B-api_mention
s	O
are	O
built	O
around	O
Spliterator	O
s	O
which	O
are	O
stateful	O
,	O
mutable	O
objects	O
.	O
They	O
don	O
’	O
t	O
have	O
a	O
“	O
reset	O
”	O
action	O
and	O
in	O
fact	O
,	O
requiring	O
to	O
support	O
such	O
rewind	O
action	O
would	O
“	O
take	O
away	O
much	O
power	O
”	O
.	O
How	O
would	O
Random	B-api_mention
.	I-api_mention
ints	I-api_mention
(	I-api_mention
)	I-api_mention
be	O
supposed	O
to	O
handle	O
such	O
a	O
request	O
?	O
On	O
the	O
other	O
hand	O
,	O
for	O
Stream	B-api_mention
s	O
which	O
have	O
a	O
retraceable	O
origin	O
,	O
it	O
is	O
easy	O
to	O
construct	O
an	O
equivalent	O
Stream	B-api_mention
to	O
be	O
used	O
again	O
.	O
Just	O
put	O
the	O
steps	O
made	O
to	O
construct	O
the	O
Stream	B-api_mention
into	O
a	O
reusable	O
method	O
.	O
Keep	O
in	O
mind	O
that	O
repeating	O
these	O
steps	O
is	O
not	O
an	O
expensive	O
operation	O
as	O
all	O
these	O
steps	O
are	O
lazy	O
operations	O
;	O
the	O
actual	O
work	O
starts	O
with	O
the	O
terminal	O
operation	O
and	O
depending	O
on	O
the	O
actual	O
terminal	O
operation	O
entirely	O
different	O
code	O
might	O
get	O
executed	O
.	O
It	O
would	O
be	O
up	O
to	O
you	O
,	O
the	O
writer	O
of	O
such	O
a	O
method	O
,	O
to	O
specify	O
what	O
calling	O
the	O
method	O
twice	O
implies	O
:	O
does	O
it	O
reproduce	O
exactly	O
the	O
same	O
sequence	O
,	O
as	O
streams	O
created	O
for	O
an	O
unmodified	O
array	O
or	O
collection	O
do	O
,	O
or	O
does	O
it	O
produce	O
a	O
stream	O
with	O
a	O
similar	O
semantics	O
but	O
different	O
elements	O
like	O
a	O
stream	O
of	O
random	O
ints	O
or	O
a	O
stream	O
of	O
console	O
input	O
lines	O
,	O
etc	O
.	O
By	O
the	O
way	O
,	O
to	O
avoid	O
confusion	O
,	O
a	O
terminal	O
operation	O
consumes	O
the	O
Stream	B-api_mention
which	O
is	O
distinct	O
from	O
closing	O
the	O
Stream	B-api_mention
as	O
calling	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
the	O
stream	O
does	O
(	O
which	O
is	O
required	O
for	O
streams	O
having	O
associated	O
resources	O
like	O
,	O
e	O
.	O
g	O
.	O
produced	O
by	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
It	O
seems	O
that	O
a	O
lot	O
of	O
confusion	O
stems	O
from	O
misguiding	O
comparison	O
of	O
IEnumerable	O
with	O
Stream	B-api_mention
.	O
An	O
IEnumerable	O
represents	O
the	O
ability	O
to	O
provide	O
an	O
actual	O
IEnumerator	O
,	O
so	O
its	O
like	O
an	O
Iterable	B-api_mention
in	O
Java	O
.	O
In	O
contrast	O
,	O
a	O
Stream	B-api_mention
is	O
a	O
kind	O
of	O
iterator	O
and	O
comparable	O
to	O
an	O
IEnumerator	O
so	O
it	O
’	O
s	O
wrong	O
to	O
claim	O
that	O
this	O
kind	O
of	O
data	O
type	O
can	O
be	O
used	O
multiple	O
times	O
in	O
.	O
NET	O
,	O
the	O
support	O
for	O
IEnumerator	O
.	O
Reset	O
is	O
optional	O
.	O
The	O
examples	O
discussed	O
here	O
rather	O
use	O
the	O
fact	O
that	O
an	O
IEnumerable	O
can	O
be	O
used	O
to	O
fetch	O
new	O
IEnumerator	O
s	O
and	O
that	O
works	O
with	O
Java	O
’	O
s	O
Collection	B-api_mention
s	O
as	O
well	O
;	O
you	O
can	O
get	O
a	O
new	O
Stream	B-api_mention
.	O
If	O
the	O
Java	O
developers	O
decided	O
to	O
add	O
the	O
Stream	B-api_mention
operations	O
to	O
Iterable	B-api_mention
directly	O
,	O
with	O
intermediate	O
operations	O
returning	O
another	O
Iterable	B-api_mention
,	O
it	O
was	O
really	O
comparable	O
and	O
it	O
could	O
work	O
the	O
same	O
way	O
.	O
However	O
,	O
the	O
developers	O
decided	O
against	O
it	O
and	O
the	O
decision	O
is	O
discussed	O
in	O
this	O
question	O
.	O
The	O
biggest	O
point	O
is	O
the	O
confusion	O
about	O
eager	O
Collection	B-api_mention
operations	O
and	O
lazy	O
Stream	B-api_mention
operations	O
.	O
By	O
looking	O
at	O
the	O
.	O
NET	O
API	O
,	O
I	O
(	O
yes	O
,	O
personally	O
)	O
find	O
it	O
justified	O
.	O
While	O
it	O
looks	O
reasonable	O
looking	O
at	O
IEnumerable	O
alone	O
,	O
a	O
particular	O
Collection	B-api_mention
will	O
have	O
lots	O
of	O
methods	O
manipulating	O
the	O
Collection	B-api_mention
directly	O
and	O
lots	O
of	O
methods	O
returning	O
a	O
lazy	O
IEnumerable	O
,	O
while	O
the	O
particular	O
nature	O
of	O
a	O
method	O
isn	O
’	O
t	O
always	O
intuitively	O
recognizable	O
.	O
The	O
worst	O
example	O
I	O
found	O
(	O
within	O
the	O
few	O
minutes	O
I	O
looked	O
at	O
it	O
)	O
is	O
List	B-api_mention
.	I-api_mention
Reverse	I-api_mention
(	I-api_mention
)	I-api_mention
whose	O
name	O
matches	O
exactly	O
the	O
name	O
of	O
the	O
inherited	O
(	O
is	O
this	O
the	O
right	O
terminus	O
for	O
extension	O
methods	O
?	O
)	O
Enumerable	B-api_mention
.	I-api_mention
Reverse	I-api_mention
(	I-api_mention
)	I-api_mention
while	O
having	O
an	O
entirely	O
contradicting	O
behavior	O
.	O
Of	O
course	O
,	O
these	O
are	O
two	O
distinct	O
decisions	O
.	O
The	O
first	O
one	O
to	O
make	O
Stream	B-api_mention
a	O
type	O
distinct	O
from	O
Iterable	B-api_mention
/	O
Collection	B-api_mention
and	O
the	O
second	O
to	O
make	O
Stream	B-api_mention
a	O
kind	O
of	O
one	O
time	O
iterator	O
rather	O
than	O
another	O
kind	O
of	O
iterable	O
.	O
But	O
these	O
decision	O
were	O
made	O
together	O
and	O
it	O
might	O
be	O
the	O
case	O
that	O
separating	O
these	O
two	O
decision	O
never	O
was	O
considered	O
.	O
It	O
wasn	O
’	O
t	O
created	O
with	O
being	O
comparable	O
to	O
.	O
NET	O
’	O
s	O
in	O
mind	O
.	O
The	O
actual	O
API	O
design	O
decision	O
was	O
to	O
add	O
an	O
improved	O
type	O
of	O
iterator	O
,	O
the	O
Spliterator	B-api_mention
.	O
Spliterator	B-api_mention
s	O
can	O
be	O
provided	O
by	O
the	O
old	O
Iterable	B-api_mention
s	O
(	O
which	O
is	O
the	O
way	O
how	O
these	O
were	O
retrofitted	O
)	O
or	O
entirely	O
new	O
implementations	O
.	O
Then	O
,	O
Stream	B-api_mention
was	O
added	O
as	O
a	O
high	O
-	O
level	O
front	O
-	O
end	O
to	O
the	O
rather	O
low	O
level	O
Spliterator	B-api_mention
s	O
.	O
That	O
’	O
s	O
it	O
.	O
You	O
may	O
discuss	O
about	O
whether	O
a	O
different	O
design	O
would	O
be	O
better	O
,	O
but	O
that	O
’	O
s	O
not	O
productive	O
,	O
it	O
won	O
’	O
t	O
change	O
,	O
given	O
the	O
way	O
they	O
are	O
designed	O
now	O
.	O
There	O
is	O
another	O
implementation	O
aspect	O
you	O
have	O
to	O
consider	O
.	O
Stream	B-api_mention
s	O
are	O
not	O
immutable	O
data	O
structures	O
.	O
Each	O
intermediate	O
operation	O
may	O
return	O
a	O
new	O
Stream	B-api_mention
instance	O
encapsulating	O
the	O
old	O
one	O
but	O
it	O
may	O
also	O
manipulate	O
its	O
own	O
instance	O
instead	O
and	O
return	O
itself	O
(	O
that	O
doesn	O
’	O
t	O
preclude	O
doing	O
even	O
both	O
for	O
the	O
same	O
operation	O
)	O
.	O
Commonly	O
known	O
examples	O
are	O
operations	O
like	O
parallel	O
or	O
unordered	O
which	O
do	O
not	O
add	O
another	O
step	O
but	O
manipulate	O
the	O
entire	O
pipeline	O
)	O
.	O
Having	O
such	O
a	O
mutable	O
data	O
structure	O
and	O
attempts	O
to	O
reuse	O
(	O
or	O
even	O
worse	O
,	O
using	O
it	O
multiple	O
times	O
at	O
the	O
same	O
time	O
)	O
doesn	O
’	O
t	O
play	O
well	O
…	O
For	O
completeness	O
,	O
here	O
is	O
your	O
quicksort	O
example	O
translated	O
to	O
the	O
Java	O
Stream	B-api_mention
API	O
.	O
It	O
shows	O
that	O
it	O
does	O
not	O
really	O
“	O
take	O
away	O
much	O
power	O
”	O
.	O
#	O
pre	O
It	O
can	O
be	O
used	O
like	O
#	O
pre	O
You	O
can	O
write	O
it	O
even	O
more	O
compact	O
as	O
#	O
pre	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26877910	O
What	O
I	O
can	O
only	O
share	O
is	O
my	O
own	O
method	O
.	O
You	O
can	O
use	O
a	O
temporary	O
String	B-api_mention
temp	O
=	O
StringLiteral	O
;	O
or	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
my	O
example	O
code	O
created	O
in	O
console	O
application	O
via	O
c	O
#	O
-	O
"	O
Idea	O
Only	O
,	O
Not	O
Exact	O
Answer	O
"	O
.	O
#	O
pre	O
Or	O
you	O
can	O
also	O
use	O
the	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
pre	O
Output	O
:	O
time	O
upon	O
a	O
Once	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
foo	O
.	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781376	O
Like	O
the	O
others	O
have	O
mentioned	O
,	O
this	O
is	O
only	O
fulfilled	O
by	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
As	O
for	O
proof	O
,	O
let	O
me	O
offer	O
an	O
easier	O
to	O
understand	O
explanation	O
other	O
than	O
in	O
binary	O
(	O
although	O
it	O
is	O
still	O
rooted	O
in	O
that	O
)	O
.	O
Note	O
that	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
equal	O
to	O
-	O
2	O
^	O
31	O
or	O
-	O
2147483648	O
and	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
equal	O
to	O
2	O
^	O
31	O
-	O
1	O
or	O
2147483647	O
.	O
-	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
2	O
^	O
31	O
,	O
which	O
is	O
now	O
too	O
large	O
for	O
an	O
Integer	B-api_mention
(	O
since	O
it	O
is	O
past	O
MAX	B-api_mention
_	I-api_mention
VALUE	I-api_mention
)	O
thus	O
causing	O
an	O
Integer	B-api_mention
overflow	O
,	O
making	O
it	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
again	O
.	O
It	O
'	O
s	O
the	O
only	O
Integer	B-api_mention
that	O
does	O
this	O
since	O
MIN	B-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
the	O
only	O
number	O
with	O
no	O
negative	O
equivalent	O
aside	O
from	O
0	O
.	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20945268	O
In	O
Java	O
,	O
if	O
two	O
string	O
primitive	O
variables	O
are	O
initialized	O
to	O
the	O
same	O
literal	O
,	O
it	O
assigns	O
the	O
same	O
reference	O
to	O
both	O
variables	O
:	O
#	O
pre	O
#	O
blockquote	O
That	O
is	O
the	O
reason	O
the	O
comparison	O
returns	O
true	O
.	O
The	O
third	O
string	O
is	O
created	O
using	O
substring	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
makes	O
a	O
new	O
string	O
instead	O
of	O
pointing	O
to	O
the	O
same	O
.	O
#	O
blockquote	O
When	O
you	O
access	O
a	O
string	O
using	O
reflection	O
,	O
you	O
get	O
the	O
actual	O
pointer	O
:	O
#	O
pre	O
So	O
change	O
to	O
this	O
will	O
change	O
the	O
string	O
holding	O
a	O
pointer	O
to	O
it	O
,	O
but	O
as	O
s3	O
is	O
created	O
with	O
a	O
new	O
string	O
due	O
to	O
substring	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
would	O
not	O
change	O
.	O
#	O
blockquote	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14847046	O
Most	O
of	O
the	O
time	O
we	O
use	O
a	O
constructor	O
to	O
create	O
a	O
new	O
empty	O
map	O
.	O
But	O
the	O
Collections	B-api_mention
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
to	O
create	O
an	O
empty	O
map	O
using	O
static	O
method	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
emptyMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
blockquote	O
