Question	O
-	O
32334319	O
,	O
answer	O
-	O
39380442	O
As	O
stated	O
across	O
many	O
of	O
the	O
answers	O
.	O
The	O
Quicksort	O
is	O
used	O
by	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
for	O
sorting	O
primitive	O
collections	O
because	O
stability	O
isn	O
'	O
t	O
required	O
(	O
you	O
won	O
'	O
t	O
know	O
or	O
care	O
if	O
two	O
identical	O
ints	O
were	O
swapped	O
in	O
the	O
sort	O
)	O
MergeSort	O
or	O
more	O
specifically	O
Timsort	O
is	O
used	O
by	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
for	O
sorting	O
collections	O
of	O
objects	O
.	O
Stability	O
is	O
required	O
.	O
Quicksort	O
does	O
not	O
provide	O
for	O
stability	O
,	O
Timsort	O
does	O
.	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
delegates	O
to	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
which	O
is	O
why	O
you	O
see	O
the	O
javadoc	O
referencing	O
the	O
MergeSort	O
.	O
Question	O
-	O
32046078	O
I	O
have	O
a	O
server	O
side	O
implemented	O
in	O
Scala	O
and	O
React	O
/	O
Flux	O
based	O
front	O
end	O
.	O
My	O
services	O
return	O
Futures	O
and	O
they	O
are	O
handled	O
within	O
Scalatra	O
'	O
s	O
AsyncResult	O
for	O
JSON	O
responses	O
.	O
For	O
isomorphic	O
/	O
server	O
side	O
rendering	O
setup	O
I	O
did	O
not	O
want	O
to	O
change	O
services	O
to	O
be	O
blocking	O
so	O
I	O
started	O
with	O
Scala	O
Future	O
-	O
>	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	I-api_mention
Function	I-api_mention
conversion	O
shown	O
here	O
.	O
But	O
the	O
dispatcher	O
in	O
Flux	O
would	O
like	O
to	O
have	O
JS	O
Promise	O
.	O
So	O
far	O
I	O
found	O
only	O
rather	O
complicated	O
sounding	O
way	O
around	O
this	O
Slides	O
68	O
-	O
81	O
Is	O
there	O
any	O
recommended	O
way	O
to	O
deal	O
with	O
this	O
Scala	O
Future	O
-	O
>	O
JS	O
Promise	O
conversion	O
?	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488710	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
returns	O
a	O
fixed	O
-	O
size	O
List	O
backed	O
by	O
the	O
array	O
.	O
If	O
you	O
want	O
a	O
normal	O
mutable	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
ArrayList	I-api_mention
you	O
need	O
to	O
do	O
this	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
,	O
using	O
Guava	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Using	O
a	O
Splitter	B-api_mention
gives	O
you	O
more	O
flexibility	O
in	O
how	O
you	O
split	O
the	O
string	O
and	O
gives	O
you	O
the	O
ability	O
to	O
,	O
for	O
example	O
,	O
skip	O
empty	O
strings	O
in	O
the	O
results	O
and	O
trim	O
results	O
.	O
It	O
also	O
has	O
less	O
weird	O
behavior	O
than	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
as	O
well	O
as	O
not	O
requiring	O
you	O
to	O
split	O
by	O
regex	O
(	O
that	O
'	O
s	O
just	O
one	O
option	O
)	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
8641412	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
code	O
registers	O
the	O
Thread	B-api_mention
with	O
scheduler	O
and	O
the	O
scheduler	O
calls	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Also	O
,	O
Thread	B-api_mention
is	O
class	O
while	O
Runnable	B-api_mention
is	O
an	O
interface	O
.	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
16226168	O
I	O
would	O
not	O
use	O
URLEncoder	B-api_mention
.	O
Besides	O
being	O
incorrectly	O
named	O
(	O
URLEncoder	B-api_mention
has	O
nothing	O
to	O
do	O
with	O
URLs	O
)	O
,	O
inefficient	O
(	O
it	O
uses	O
a	O
StringBuffer	B-api_mention
instead	O
of	O
Builder	B-api_mention
and	O
does	O
a	O
couple	O
of	O
other	O
things	O
that	O
are	O
slow	O
)	O
Its	O
also	O
way	O
too	O
easy	O
to	O
screw	O
it	O
up	O
.	O
Instead	O
I	O
would	O
use	O
URIBuilder	B-api_mention
or	O
Spring	O
'	O
s	O
URIUtils	B-api_mention
or	O
Commons	O
Apache	O
HttpClient	B-api_mention
.	O
The	O
reason	O
being	O
you	O
have	O
to	O
escape	O
the	O
query	O
parameters	O
name	O
(	O
ie	O
BalusC	O
'	O
s	O
answer	O
q	O
)	O
differently	O
than	O
the	O
parameter	O
value	O
.	O
The	O
only	O
downside	O
to	O
the	O
above	O
(	O
that	O
I	O
found	O
out	O
painfully	O
)	O
is	O
that	O
URL	O
'	O
s	O
are	O
not	O
a	O
true	O
subset	O
of	O
URI	O
'	O
s	O
.	O
Since	O
I	O
'	O
m	O
just	O
linking	O
to	O
other	O
answers	O
I	O
marked	O
this	O
as	O
a	O
community	O
wiki	O
.	O
Feel	O
free	O
to	O
edit	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32177563	O
The	O
other	O
answers	O
have	O
already	O
answered	O
your	O
question	O
-	O
no	O
,	O
this	O
is	O
not	O
possible	O
with	O
the	O
Java	O
'	O
s	O
primitive	O
wrapper	O
classes	O
.	O
I	O
'	O
ll	O
try	O
to	O
address	O
the	O
"	O
question	O
behind	O
the	O
question	O
"	O
:	O
Is	O
this	O
possible	O
with	O
other	O
classes	O
?	O
#	O
blockquote	O
This	O
is	O
actually	O
a	O
good	O
question	O
,	O
and	O
the	O
answer	O
is	O
:	O
Yes	O
,	O
it	O
is	O
possible	O
to	O
create	O
such	O
a	O
situation	O
,	O
and	O
yes	O
,	O
it	O
would	O
make	O
Aristotle	O
angry	O
.	O
Actually	O
,	O
I	O
don	O
'	O
t	O
know	O
if	O
it	O
would	O
make	O
Aristotle	O
angry	O
,	O
not	O
having	O
known	O
him	O
,	O
but	O
it	O
will	O
certainly	O
cause	O
a	O
lot	O
of	O
grief	O
for	O
whoever	O
has	O
to	O
work	O
with	O
the	O
code	O
.	O
The	O
thing	O
is	O
:	O
There	O
is	O
a	O
contract	O
associated	O
with	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
Javadocs	O
for	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
Yes	O
,	O
when	O
creating	O
your	O
own	O
class	O
,	O
you	O
can	O
violate	O
this	O
contract	O
.	O
There	O
is	O
(	O
unfortunately	O
)	O
nothing	O
in	O
the	O
compiler	O
or	O
runtime	O
stopping	O
you	O
.	O
However	O
,	O
a	O
lot	O
of	O
code	O
relies	O
on	O
this	O
contract	O
,	O
so	O
if	O
you	O
violate	O
it	O
,	O
any	O
code	O
that	O
uses	O
equals	O
will	O
probably	O
fail	O
in	O
mysterious	O
ways	O
.	O
One	O
example	O
:	O
Java	O
'	O
s	O
own	O
Collection	O
classes	O
(	O
java	O
.	O
util	O
.	O
Collection	O
and	O
friends	O
)	O
rely	O
on	O
equals	O
.	O
If	O
an	O
instance	O
of	O
a	O
class	O
that	O
does	O
not	O
correctly	O
implement	O
equals	O
is	O
put	O
into	O
a	O
collection	O
,	O
weird	O
things	O
happen	O
,	O
such	O
as	O
the	O
collection	O
sometimes	O
containing	O
the	O
instance	O
and	O
sometimes	O
not	O
.	O
Question	O
-	O
12468764	O
,	O
answer	O
-	O
13368831	O
Actual	O
Answer	O
:	O
The	O
default	O
deserializer	O
for	O
enums	O
uses	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
deserialize	O
,	O
so	O
it	O
'	O
s	O
not	O
using	O
the	O
@	O
JsonValue	O
.	O
So	O
as	O
@	O
OldCurmudgeon	O
pointed	O
out	O
,	O
you	O
'	O
d	O
need	O
to	O
pass	O
in	O
{	O
StringLiteral	O
:	O
StringLiteral	O
}	O
to	O
match	O
the	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
value	O
.	O
An	O
other	O
option	O
(	O
assuming	O
you	O
want	O
the	O
write	O
and	O
read	O
json	O
values	O
to	O
be	O
the	O
same	O
)	O
.	O
.	O
.	O
More	O
Info	O
:	O
There	O
is	O
(	O
yet	O
)	O
another	O
way	O
to	O
manage	O
the	O
serialization	O
and	O
deserialization	O
process	O
with	O
Jackson	O
.	O
You	O
can	O
specify	O
these	O
annotations	O
to	O
use	O
your	O
own	O
custom	O
serializer	O
and	O
deserializer	O
:	O
#	O
pre	O
Then	O
you	O
have	O
to	O
write	O
MySerializer	O
and	O
MyDeserializer	O
which	O
look	O
like	O
this	O
:	O
MySerializer	O
#	O
pre	O
MyDeserializer	O
#	O
pre	O
Last	O
little	O
bit	O
,	O
particularly	O
for	O
doing	O
this	O
to	O
an	O
enum	O
JsonEnum	O
that	O
serializes	O
with	O
the	O
method	O
getYourValue	O
(	O
args	O
)	O
,	O
your	O
serializer	O
and	O
deserializer	O
might	O
look	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
22718744	O
,	O
answer	O
-	O
22718904	O
This	O
has	O
been	O
specified	O
in	O
the	O
documentation	O
of	O
split	B-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
,	I-api_mention
limit	I-api_mention
)	I-api_mention
.	O
#	O
blockquote	O
In	O
StringLiteral	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
got	O
a	O
zero	O
-	O
width	O
match	O
at	O
the	O
beginning	O
so	O
the	O
leading	O
empty	O
substring	O
is	O
not	O
included	O
in	O
the	O
resulting	O
array	O
.	O
However	O
in	O
your	O
second	O
snippet	O
when	O
you	O
split	O
on	O
StringLiteral	B-api_mention
you	O
got	O
a	O
positive	O
width	O
match	O
(	O
1	O
in	O
this	O
case	O
)	O
,	O
so	O
the	O
empty	O
leading	O
substring	O
is	O
included	O
as	O
expected	O
.	O
(	O
Removed	O
irrelevant	O
source	O
code	O
)	O
Question	O
-	O
20129762	O
In	O
Java	O
8	O
we	O
have	O
the	O
class	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
curiously	O
have	O
a	O
method	O
Iterator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
iterator	O
(	O
args	O
)	O
So	O
you	O
would	O
expect	O
it	O
to	O
implement	O
interface	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
requires	O
exactly	O
this	O
method	O
,	O
but	O
that	O
'	O
s	O
not	O
the	O
case	O
.	O
When	O
I	O
want	O
to	O
iterate	O
over	O
a	O
Stream	B-api_mention
using	O
a	O
foreach	O
loop	O
,	O
I	O
have	O
to	O
do	O
something	O
like	O
#	O
pre	O
Am	O
I	O
missing	O
something	O
here	O
?	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26819171	O
This	O
is	O
not	O
an	O
easy	O
problem	O
.	O
And	O
the	O
more	O
search	O
-	O
replacement	O
parameters	O
you	O
have	O
,	O
the	O
trickier	O
it	O
gets	O
.	O
You	O
have	O
several	O
options	O
,	O
scattered	O
on	O
the	O
palette	O
of	O
ugly	O
-	O
elegant	O
,	O
efficient	O
-	O
wasteful	O
:	O
#	O
li	O
Use	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
from	O
Apache	O
Commons	O
as	O
@	O
AlanHay	O
recommended	O
.	O
This	O
is	O
a	O
good	O
option	O
if	O
you	O
'	O
re	O
free	O
to	O
add	O
new	O
dependencies	O
in	O
your	O
project	O
.	O
You	O
might	O
get	O
lucky	O
:	O
the	O
dependency	O
might	O
be	O
included	O
already	O
in	O
your	O
project	O
#	O
li	O
Use	O
a	O
temporary	O
placeholder	O
as	O
@	O
Jeroen	O
suggested	O
,	O
and	O
perform	O
the	O
replacement	O
in	O
2	O
steps	O
:	O
#	O
li	O
Replace	O
all	O
search	O
patterns	O
with	O
a	O
unique	O
tag	O
that	O
doesn	O
'	O
t	O
exist	O
in	O
the	O
original	O
text	O
#	O
li	O
Replace	O
the	O
placeholders	O
with	O
the	O
real	O
target	O
replacement	O
This	O
is	O
not	O
a	O
great	O
approach	O
,	O
for	O
several	O
reasons	O
:	O
it	O
needs	O
to	O
ensure	O
that	O
the	O
tags	O
used	O
in	O
the	O
first	O
step	O
are	O
really	O
unique	O
;	O
it	O
performs	O
more	O
string	O
replacement	O
operations	O
than	O
really	O
necessary	O
#	O
li	O
Build	O
a	O
regex	O
from	O
all	O
the	O
patterns	O
and	O
use	O
the	O
method	O
with	O
Matcher	B-api_mention
and	O
StringBuffer	B-api_mention
as	O
suggested	O
by	O
@	O
arshajii	O
.	O
This	O
is	O
not	O
terrible	O
,	O
but	O
not	O
that	O
great	O
either	O
,	O
as	O
building	O
the	O
regex	O
is	O
kind	O
of	O
hackish	O
,	O
and	O
it	O
involves	O
StringBuffer	B-api_mention
which	O
went	O
out	O
of	O
fashion	O
a	O
while	O
ago	O
in	O
favor	O
of	O
StringBuilder	B-api_mention
.	O
#	O
li	O
Use	O
a	O
recursive	O
solution	O
proposed	O
by	O
@	O
mjolka	O
,	O
by	O
splitting	O
the	O
string	O
at	O
the	O
matched	O
patterns	O
,	O
and	O
recursing	O
on	O
the	O
remaining	O
segments	O
.	O
This	O
is	O
a	O
fine	O
solution	O
,	O
compact	O
and	O
quite	O
elegant	O
.	O
Its	O
weakness	O
is	O
the	O
potentially	O
many	O
substring	O
and	O
concatenation	O
operations	O
,	O
and	O
the	O
stack	O
size	O
limits	O
that	O
apply	O
to	O
all	O
recursive	O
solutions	O
#	O
li	O
Split	O
the	O
text	O
to	O
words	O
and	O
use	O
Java	O
8	O
streams	O
to	O
perform	O
the	O
replacements	O
elegantly	O
as	O
@	O
msandiford	O
suggested	O
,	O
but	O
of	O
course	O
that	O
only	O
works	O
if	O
you	O
are	O
ok	O
with	O
splitting	O
at	O
word	O
boundaries	O
,	O
which	O
makes	O
it	O
not	O
suitable	O
as	O
a	O
general	O
solution	O
Here	O
'	O
s	O
my	O
version	O
,	O
based	O
on	O
ideas	O
borrowed	O
from	O
Apache	O
'	O
s	O
implementation	O
.	O
It	O
'	O
s	O
neither	O
simple	O
nor	O
elegant	O
,	O
but	O
it	O
works	O
,	O
and	O
should	O
be	O
relatively	O
efficient	O
,	O
without	O
unnecessary	O
steps	O
.	O
In	O
a	O
nutshell	O
,	O
it	O
works	O
like	O
this	O
:	O
repeatedly	O
find	O
the	O
next	O
matching	O
search	O
pattern	O
in	O
the	O
text	O
,	O
and	O
use	O
a	O
StringBuilder	O
to	O
accumulate	O
the	O
unmatched	O
segments	O
and	O
the	O
replacements	O
.	O
#	O
pre	O
Unit	O
tests	O
:	O
#	O
pre	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846960	O
From	O
Effective	O
Java	O
,	O
Item	O
#	O
43	O
-	O
StringLiteral	O
demonstrates	O
returning	O
an	O
empty	O
collection	O
and	O
perhaps	O
even	O
demonstrates	O
using	O
these	O
emptyList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
emptySet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
emptyMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
the	O
Collections	B-api_mention
class	O
to	O
get	O
an	O
empty	O
collection	O
that	O
also	O
has	O
the	O
additional	O
benefit	O
of	O
being	O
immutable	O
.	O
From	O
Item	O
#	O
15	O
StringLiteral	O
.	O
From	O
Collections	B-api_mention
-	O
emptySet	B-api_mention
-	O
Collections	B-api_mention
-	O
emptyList	B-api_mention
-	O
Collections	B-api_mention
#	O
blockquote	O
Note	O
:	O
Below	O
code	O
is	O
just	O
an	O
example	O
(	O
change	O
it	O
according	O
to	O
your	O
use	O
case	O
)	O
:	O
#	O
pre	O
These	O
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
:	O
#	O
li	O
They	O
'	O
re	O
more	O
concise	O
because	O
you	O
don	O
'	O
t	O
need	O
to	O
explicitly	O
type	O
out	O
the	O
generic	O
type	O
of	O
the	O
collection	O
-	O
it	O
'	O
s	O
generally	O
just	O
inferred	O
from	O
the	O
context	O
of	O
the	O
method	O
call	O
.	O
#	O
li	O
They	O
'	O
re	O
more	O
efficient	O
because	O
they	O
don	O
'	O
t	O
bother	O
creating	O
new	O
objects	O
;	O
they	O
just	O
re	O
-	O
use	O
an	O
existing	O
empty	O
and	O
immutable	O
object	O
.	O
This	O
effect	O
is	O
generally	O
very	O
minor	O
,	O
but	O
it	O
'	O
s	O
occasionally	O
(	O
well	O
,	O
rarely	O
)	O
important	O
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723704	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
.	O
You	O
can	O
also	O
call	O
methods	O
which	O
handle	O
a	O
null	O
as	O
an	O
argument	O
,	O
e	O
.	O
g	O
.	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
,	O
but	O
you	O
cannot	O
reference	O
a	O
null	O
value	O
and	O
call	O
a	O
method	O
on	O
it	O
.	O
BTW	O
There	O
is	O
a	O
tricky	O
situation	O
where	O
it	O
appears	O
you	O
can	O
call	O
static	O
methods	O
on	O
null	O
values	O
.	O
#	O
pre	O
Question	O
-	O
29333689	O
,	O
answer	O
-	O
29337734	O
My	O
intuition	O
in	O
Python	O
is	O
to	O
use	O
the	O
collections	O
.	O
Counter	O
as	O
a	O
multiset	O
:	O
#	O
pre	O
So	O
we	O
have	O
a	O
list	O
of	O
integers	O
from	O
0	O
-	O
99	O
twice	O
except	O
for	O
66	O
.	O
#	O
pre	O
Which	O
gets	O
the	O
least	O
common	O
(	O
last	O
item	O
)	O
from	O
a	O
list	O
sorted	O
by	O
frequency	O
.	O
Such	O
a	O
function	O
would	O
be	O
:	O
#	O
pre	O
And	O
usage	O
:	O
#	O
pre	O
This	O
is	O
a	O
generalized	O
solution	O
that	O
works	O
for	O
any	O
number	O
of	O
items	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148647	O
Please	O
use	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
16098046	O
,	O
answer	O
-	O
16098086	O
You	O
could	O
use	O
printf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
%	O
f	O
:	O
#	O
pre	O
This	O
will	O
print	O
dexp	O
:	O
12345678	O
.	O
000000	O
.	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
fractional	O
part	O
,	O
use	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
printf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
uses	O
the	O
format	O
specifier	O
language	O
explained	O
in	O
the	O
documentation	O
.	O
The	O
default	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
format	O
used	O
in	O
your	O
original	O
code	O
is	O
spelled	O
out	O
here	O
.	O
Question	O
-	O
31370403	O
I	O
'	O
m	O
currently	O
in	O
the	O
process	O
of	O
writing	O
a	O
paint	O
program	O
in	O
java	O
,	O
designed	O
to	O
have	O
flexible	O
and	O
comprehensive	O
functionalities	O
.	O
It	O
stemmed	O
from	O
my	O
final	O
project	O
,	O
that	O
I	O
wrote	O
overnight	O
the	O
day	O
before	O
.	O
Because	O
of	O
that	O
,	O
it	O
'	O
s	O
got	O
tons	O
and	O
tons	O
of	O
bugs	O
,	O
which	O
I	O
'	O
ve	O
been	O
tackling	O
one	O
by	O
one	O
(	O
e	O
.	O
g	O
.	O
I	O
can	O
only	O
save	O
files	O
that	O
will	O
be	O
empty	O
,	O
my	O
rectangles	O
don	O
'	O
t	O
draw	O
right	O
but	O
my	O
circles	O
do	O
.	O
.	O
.	O
)	O
.	O
This	O
time	O
,	O
I	O
'	O
ve	O
been	O
trying	O
to	O
add	O
undo	O
/	O
redo	O
functionality	O
to	O
my	O
program	O
.	O
However	O
,	O
I	O
can	O
'	O
t	O
"	O
undo	O
"	O
something	O
that	O
I	O
have	O
done	O
.	O
Therefore	O
,	O
I	O
got	O
an	O
idea	O
to	O
save	O
copies	O
of	O
my	O
BufferedImage	O
each	O
time	O
a	O
mouseReleased	O
event	O
was	O
fired	O
.	O
However	O
,	O
with	O
some	O
of	O
the	O
images	O
going	O
to	O
1920x1080	O
resolution	O
,	O
I	O
figured	O
that	O
this	O
wouldn	O
'	O
t	O
be	O
efficient	O
:	O
storing	O
them	O
would	O
probably	O
take	O
gigabytes	O
of	O
memory	O
.	O
The	O
reason	O
for	O
why	O
I	O
can	O
'	O
t	O
simply	O
paint	O
the	O
same	O
thing	O
with	O
the	O
background	O
colour	O
to	O
undo	O
is	O
because	O
I	O
have	O
many	O
different	O
brushes	O
,	O
which	O
paint	O
based	O
on	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
because	O
there	O
are	O
many	O
different	O
layers	O
(	O
in	O
a	O
single	O
layer	O
)	O
.	O
Then	O
,	O
I	O
'	O
ve	O
considered	O
cloning	O
the	O
Graphics	O
objects	O
that	O
I	O
use	O
to	O
paint	O
to	O
the	O
BufferedImage	O
.	O
Like	O
this	O
:	O
#	O
pre	O
I	O
haven	O
'	O
t	O
done	O
this	O
before	O
,	O
so	O
I	O
have	O
a	O
couple	O
questions	O
:	O
#	O
li	O
Would	O
I	O
still	O
be	O
wasting	O
pointless	O
memory	O
by	O
doing	O
this	O
,	O
like	O
cloning	O
my	O
BufferedImages	O
?	O
#	O
li	O
Is	O
there	O
necessarily	O
a	O
different	O
way	O
I	O
can	O
do	O
this	O
?	O
Question	O
-	O
27845223	O
I	O
'	O
m	O
looking	O
at	O
a	O
piece	O
of	O
Java	O
code	O
right	O
now	O
,	O
and	O
it	O
takes	O
a	O
path	O
as	O
a	O
String	B-api_mention
and	O
gets	O
its	O
URL	O
using	O
URL	B-api_mention
resource	O
=	O
ClassLoader	B-api_mention
.	I-api_mention
getSystemClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
then	O
calls	O
String	B-api_mention
path	O
=	O
resource	O
.	B-api_mention
getPath	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
finally	O
executes	O
new	O
File	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Oh	O
,	O
and	O
there	O
are	O
also	O
calls	O
to	O
URL	B-api_mention
url	O
=	O
resource	O
.	B-api_mention
toURI	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
String	B-api_mention
file	O
=	O
resource	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
'	O
m	O
totally	O
confused	O
right	O
now	O
-	O
mostly	O
because	O
of	O
the	O
terminology	O
,	O
I	O
guess	O
.	O
Can	O
someone	O
please	O
walk	O
me	O
through	O
the	O
differences	O
,	O
or	O
provide	O
a	O
few	O
links	O
to	O
Dummy	O
-	O
proof	O
material	O
?	O
Especially	O
URI	B-api_mention
to	O
URL	B-api_mention
and	O
Resource	B-api_mention
to	O
File	B-api_mention
?	O
To	O
me	O
,	O
it	O
feels	O
like	O
they	O
should	O
be	O
the	O
same	O
thing	O
,	O
respectively	O
.	O
.	O
.	O
The	O
difference	O
between	O
getFile	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getPath	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
explained	O
here	O
:	O
What	O
'	O
s	O
the	O
difference	O
between	O
url	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
getpath	B-api_mention
(	I-api_mention
)	I-api_mention
?	O
(	O
Interestingly	O
they	O
both	O
seem	O
to	O
return	O
Strings	O
,	O
which	O
probably	O
adds	O
a	O
whole	O
lot	O
to	O
my	O
state	O
of	O
mind	O
.	O
.	O
.	O
)	O
Now	O
,	O
if	O
I	O
have	O
a	O
locator	O
that	O
references	O
a	O
class	O
or	O
package	O
in	O
a	O
jar	O
file	O
,	O
will	O
those	O
two	O
(	O
i	O
.	O
e	O
.	O
path	O
an	O
file	O
strings	O
)	O
differ	O
?	O
resource	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
give	O
you	O
jar	O
:	O
file	O
:	O
/	O
C	O
:	O
/	O
path	O
/	O
to	O
/	O
my	O
.	O
jar	O
!	O
/	O
com	O
/	O
example	O
/	O
,	O
after	O
all	O
(	O
note	O
the	O
exclamation	O
mark	O
)	O
.	O
Is	O
the	O
difference	O
between	O
URI	B-api_mention
and	O
URL	B-api_mention
in	O
Java	O
that	O
the	O
former	O
doesn	O
'	O
t	O
encode	O
spaces	O
?	O
Cf	O
.	O
Files	O
,	O
URIs	O
,	O
and	O
URLs	O
conflicting	O
in	O
Java	O
(	O
This	O
answer	O
explains	O
the	O
general	O
,	O
conceptual	O
difference	O
between	O
the	O
two	O
terms	O
fairly	O
well	O
:	O
URIs	O
identify	O
and	O
URLs	O
locate	O
;	O
)	O
Lastly	O
-	O
and	O
most	O
importantly	O
-	O
why	O
do	O
I	O
need	O
File	B-api_mention
object	O
;	O
why	O
isn	O
'	O
t	O
a	O
Resource	B-api_mention
(	O
URL	B-api_mention
)	O
enough	O
?	O
(	O
And	O
is	O
there	O
a	O
Resource	B-api_mention
object	O
?	O
)	O
Sorry	O
if	O
this	O
question	O
is	O
a	O
bit	O
unorganized	O
;	O
it	O
just	O
reflects	O
the	O
confusion	O
I	O
have	O
.	O
.	O
.	O
:	O
)	O
Question	O
-	O
29229373	O
I	O
have	O
the	O
following	O
sample	O
code	O
:	O
#	O
pre	O
The	O
output	O
is	O
as	O
follows	O
:	O
#	O
pre	O
From	O
here	O
I	O
see	O
that	O
in	O
first	O
case	O
stream	O
really	O
behaves	O
lazily	O
-	O
we	O
use	O
findFirst	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
once	O
we	O
have	O
first	O
element	O
our	O
filtering	O
lambda	O
is	O
not	O
invoked	O
.	O
However	O
,	O
in	O
second	O
case	O
which	O
uses	O
flatMaps	O
we	O
see	O
that	O
despite	O
first	O
element	O
which	O
fulfils	O
the	O
filter	O
condition	O
is	O
found	O
(	O
it	O
'	O
s	O
just	O
any	O
first	O
element	O
as	O
lambda	O
always	O
returns	O
true	O
)	O
further	O
contents	O
of	O
the	O
stream	O
are	O
still	O
being	O
fed	O
through	O
filtering	O
function	O
.	O
I	O
am	O
trying	O
to	O
understand	O
why	O
it	O
behaves	O
like	O
this	O
rather	O
than	O
giving	O
up	O
after	O
first	O
element	O
is	O
calculated	O
as	O
in	O
the	O
first	O
case	O
.	O
Any	O
helpful	O
information	O
would	O
be	O
appreciated	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29495113	O
#	O
blockquote	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
It	O
is	O
checking	O
whether	O
variable	O
newType	O
holds	O
a	O
reference	O
to	O
an	O
instance	O
of	O
java	O
.	O
lang	O
.	O
Class	O
representing	O
type	O
Object	B-api_mention
[	O
]	O
.	O
The	O
casts	O
are	O
unneeded	O
.	O
#	O
blockquote	O
As	O
far	O
as	O
I	O
can	O
tell	O
,	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
could	O
be	O
used	O
in	O
both	O
cases	O
,	O
but	O
non	O
-	O
reflective	O
ordinary	O
array	O
construction	O
is	O
likely	O
a	O
bit	O
faster	O
.	O
Thus	O
,	O
I	O
suppose	O
that	O
Object	B-api_mention
[	O
]	O
is	O
called	O
out	O
as	O
a	O
special	O
case	O
for	O
performance	O
reasons	O
,	O
but	O
I	O
have	O
no	O
idea	O
whether	O
that	O
case	O
is	O
exercised	O
frequently	O
enough	O
for	O
the	O
optimization	O
to	O
be	O
important	O
.	O
#	O
blockquote	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
You	O
should	O
use	O
it	O
when	O
you	O
need	O
to	O
copy	O
an	O
array	O
to	O
an	O
array	O
with	O
a	O
possibly	O
different	O
(	O
but	O
compatible	O
)	O
element	O
type	O
,	O
especially	O
when	O
the	O
element	O
types	O
are	O
not	O
statically	O
known	O
.	O
If	O
you	O
know	O
you	O
want	O
the	O
copy	O
to	O
have	O
the	O
same	O
element	O
type	O
as	O
the	O
original	O
,	O
then	O
it	O
'	O
s	O
easier	O
to	O
use	O
the	O
original	O
array	O
'	O
s	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
33804394	O
,	O
answer	O
-	O
33814549	O
In	O
this	O
sort	O
of	O
situation	O
I	O
would	O
write	O
#	O
pre	O
Interestingly	O
you	O
say	O
that	O
the	O
"	O
try	O
statement	O
will	O
never	O
fail	O
"	O
,	O
but	O
you	O
still	O
took	O
the	O
trouble	O
to	O
write	O
a	O
statement	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
that	O
you	O
claim	O
will	O
never	O
be	O
executed	O
.	O
Why	O
?	O
Perhaps	O
your	O
belief	O
is	O
not	O
that	O
firmly	O
held	O
.	O
That	O
is	O
good	O
(	O
in	O
my	O
opinion	O
)	O
,	O
since	O
your	O
belief	O
is	O
not	O
based	O
on	O
the	O
code	O
you	O
wrote	O
,	O
but	O
rather	O
on	O
the	O
expectation	O
that	O
your	O
client	O
will	O
not	O
violate	O
the	O
precondition	O
.	O
Better	O
to	O
program	O
public	O
methods	O
defensively	O
.	O
By	O
the	O
way	O
,	O
your	O
code	O
won	O
'	O
t	O
compile	O
for	O
me	O
.	O
You	O
can	O
'	O
t	O
call	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
even	O
if	O
the	O
type	O
of	O
a	O
is	O
Cloneable	B-api_mention
.	O
At	O
least	O
Eclipse	O
'	O
s	O
compiler	O
says	O
so	O
.	O
Expression	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
error	O
#	O
blockquote	O
What	O
I	O
would	O
do	O
for	O
your	O
specific	O
case	O
is	O
#	O
pre	O
Where	O
PubliclyCloneable	O
is	O
defined	O
by	O
#	O
pre	O
Or	O
,	O
if	O
you	O
absolutely	O
need	O
the	O
parameter	O
type	O
to	O
be	O
Cloneable	B-api_mention
,	O
the	O
following	O
at	O
least	O
compiles	O
.	O
#	O
pre	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
19629304	O
If	O
you	O
do	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
main	O
method	O
,	O
the	O
thread	O
of	O
main	O
method	O
will	O
invoke	O
the	O
run	O
method	O
instead	O
of	O
the	O
thread	O
you	O
require	O
to	O
run	O
.	O
The	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
creates	O
new	O
thread	O
and	O
for	O
which	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
to	O
be	O
done	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
12685471	O
The	O
kind	O
of	O
output	O
you	O
are	O
seeing	O
from	O
your	O
byte	O
array	O
(	O
[	O
B	O
@	O
405217f8	O
)	O
is	O
also	O
an	O
output	O
for	O
a	O
zero	O
length	O
byte	O
array	O
(	O
ie	O
new	O
byte	O
[	O
0	O
]	O
)	O
.	O
It	O
looks	O
like	O
this	O
string	O
is	O
a	O
reference	O
to	O
the	O
array	O
rather	O
than	O
a	O
description	O
of	O
the	O
contents	O
of	O
the	O
array	O
like	O
we	O
might	O
expect	O
from	O
a	O
regular	O
collection	O
'	O
s	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
As	O
with	O
other	O
respondents	O
,	O
I	O
would	O
point	O
you	O
to	O
the	O
String	B-api_mention
constructors	O
that	O
accept	O
a	O
byte	O
[	O
]	O
parameter	O
to	O
construct	O
a	O
string	O
from	O
the	O
contents	O
of	O
a	O
byte	O
array	O
.	O
You	O
should	O
be	O
able	O
to	O
read	O
raw	O
bytes	O
from	O
a	O
socket	O
'	O
s	O
InputStream	B-api_mention
if	O
you	O
want	O
to	O
obtain	O
bytes	O
from	O
a	O
TCP	O
connection	O
.	O
If	O
you	O
have	O
already	O
read	O
those	O
bytes	O
as	O
a	O
String	B-api_mention
(	O
using	O
an	O
InputStreamReader	B-api_mention
)	O
,	O
then	O
,	O
the	O
string	O
can	O
be	O
converted	O
to	O
bytes	O
using	O
the	O
getBytes	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
.	O
Be	O
sure	O
to	O
pass	O
in	O
your	O
desired	O
character	O
set	O
to	O
both	O
the	O
String	B-api_mention
constructor	O
and	O
getBytes	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
functions	O
,	O
and	O
this	O
will	O
only	O
work	O
if	O
the	O
byte	O
data	O
can	O
be	O
converted	O
to	O
characters	O
by	O
the	O
InputStreamReader	B-api_mention
.	O
If	O
you	O
want	O
to	O
deal	O
with	O
raw	O
bytes	O
you	O
should	O
really	O
avoid	O
using	O
this	O
stream	O
reader	O
layer	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15446006	O
I	O
actually	O
wrote	O
a	O
blog	O
post	O
on	O
the	O
topic	O
2	O
months	O
ago	O
.	O
The	O
article	O
is	O
for	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
but	O
Java	O
'	O
s	O
ArrayList	B-api_mention
has	O
a	O
very	O
similar	O
implementation	O
.	O
Since	O
ArrayList	B-api_mention
is	O
implemented	O
using	O
a	O
dynamic	O
array	O
,	O
it	O
increases	O
in	O
size	O
on	O
demand	O
.	O
So	O
the	O
reason	O
for	O
the	O
capacity	O
constructor	O
is	O
for	O
optimisation	O
purposes	O
.	O
When	O
one	O
of	O
these	O
resizings	O
operation	O
occurs	O
,	O
the	O
ArrayList	B-api_mention
copies	O
the	O
contents	O
of	O
the	O
array	O
into	O
a	O
new	O
array	O
that	O
is	O
twice	O
the	O
capacity	O
of	O
the	O
old	O
one	O
.	O
This	O
operation	O
runs	O
in	O
O	O
(	O
n	O
)	O
time	O
.	O
Example	O
Here	O
is	O
an	O
example	O
of	O
how	O
the	O
ArrayList	B-api_mention
would	O
increase	O
in	O
size	O
:	O
#	O
pre	O
So	O
the	O
list	O
starts	O
with	O
a	O
capacity	O
of	O
10	O
,	O
when	O
the	O
11th	O
item	O
is	O
added	O
it	O
is	O
increase	O
by	O
50	O
%	O
+	O
1	O
to	O
16	O
.	O
On	O
the	O
17th	O
item	O
the	O
ArrayList	B-api_mention
is	O
increased	O
again	O
to	O
25	O
and	O
so	O
on	O
.	O
Now	O
consider	O
the	O
example	O
where	O
we	O
'	O
re	O
creating	O
a	O
list	O
where	O
the	O
desired	O
capacity	O
is	O
already	O
known	O
as	O
1000000	O
.	O
Creating	O
the	O
ArrayList	B-api_mention
without	O
the	O
size	O
constructor	O
will	O
call	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
1000000	O
times	O
which	O
takes	O
O	O
(	O
1	O
)	O
normally	O
or	O
O	O
(	O
n	O
)	O
on	O
resize	O
.	O
#	O
blockquote	O
Compare	O
this	O
using	O
the	O
constructor	O
and	O
then	O
calling	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
which	O
is	O
guaranteed	O
to	O
run	O
in	O
O	O
(	O
1	O
)	O
.	O
#	O
blockquote	O
Java	O
vs	O
C	O
#	O
Java	O
is	O
as	O
above	O
,	O
starting	O
at	O
10	O
and	O
increasing	O
each	O
resize	O
at	O
50	O
%	O
+	O
1	O
.	O
C	O
#	O
starts	O
at	O
4	O
and	O
increases	O
much	O
more	O
aggressively	O
,	O
doubling	O
at	O
each	O
resize	O
.	O
The	O
1000000	O
adds	O
example	O
from	O
above	O
for	O
C	O
#	O
uses	O
3097084	O
operations	O
.	O
References	O
#	O
li	O
My	O
blog	O
post	O
on	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
#	O
li	O
Java	O
'	O
s	O
ArrayList	B-api_mention
source	O
code	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31922994	O
I	O
think	O
that	O
is	O
because	O
you	O
usually	O
write	O
your	O
functions	O
to	O
manipulate	O
data	O
,	O
and	O
then	O
lift	O
it	O
to	O
Optional	B-api_mention
using	O
map	O
and	O
similar	O
functions	O
.	O
This	O
adds	O
the	O
default	O
Optional	B-api_mention
behavior	O
to	O
it	O
.	O
Of	O
course	O
,	O
there	O
might	O
be	O
cases	O
,	O
when	O
it	O
is	O
necessary	O
to	O
write	O
your	O
own	O
auxilary	O
function	O
that	O
works	O
on	O
Optional	B-api_mention
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
29000802	O
There	O
is	O
a	O
third	O
option	O
-	O
using	O
stream	O
(	O
args	O
)	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
see	O
comments	O
under	O
why	O
didn	O
'	O
t	O
stream	O
have	O
a	O
toList	B-api_mention
method	O
.	O
It	O
turns	O
out	O
to	O
be	O
slower	O
than	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
or	O
collect	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
and	O
less	O
expressive	O
.	O
It	O
might	O
be	O
optimised	O
in	O
later	O
JDK	O
builds	O
,	O
so	O
adding	O
it	O
here	O
just	O
in	O
case	O
.	O
assuming	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myFinalList	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
with	O
a	O
micro	O
-	O
micro	O
benchmark	O
,	O
1M	O
entries	O
,	O
20	O
%	O
nulls	O
and	O
simple	O
transform	O
in	O
doSomething	O
(	O
)	O
#	O
pre	O
the	O
results	O
are	O
parallel	O
:	O
#	O
pre	O
sequential	O
:	O
#	O
pre	O
parallel	O
without	O
nulls	O
and	O
filter	O
(	O
so	O
the	O
stream	O
is	O
SIZED	O
)	O
:	O
toArrays	B-api_mention
has	O
the	O
best	O
performance	O
in	O
such	O
case	O
,	O
and	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
fails	O
with	O
"	O
indexOutOfBounds	O
"	O
on	O
the	O
recepient	O
ArrayList	B-api_mention
,	O
had	O
to	O
replace	O
with	O
.	B-api_mention
forEachOrdered	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818783	O
The	O
absolute	O
simplest	O
example	O
I	O
can	O
think	O
of	O
is	O
to	O
make	O
incrementing	O
an	O
atomic	O
operation	O
.	O
With	O
standard	O
ints	O
:	O
#	O
pre	O
With	O
AtomicInteger	B-api_mention
:	O
#	O
pre	O
The	O
latter	O
is	O
a	O
very	O
simple	O
way	O
to	O
perform	O
simple	O
mutations	O
effects	O
(	O
especially	O
counting	O
,	O
or	O
unique	O
-	O
indexing	O
)	O
,	O
without	O
having	O
to	O
resort	O
to	O
synchronizing	O
all	O
access	O
.	O
More	O
complex	O
synchronization	O
-	O
free	O
logic	O
can	O
be	O
employed	O
by	O
using	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
a	O
type	O
of	O
optimistic	O
locking	O
-	O
get	O
the	O
current	O
value	O
,	O
compute	O
result	O
based	O
on	O
this	O
,	O
set	O
this	O
result	O
iff	O
value	O
is	O
still	O
the	O
input	O
used	O
to	O
do	O
the	O
calculation	O
,	O
else	O
start	O
again	O
-	O
but	O
the	O
counting	O
examples	O
are	O
very	O
useful	O
,	O
and	O
I	O
'	O
ll	O
often	O
use	O
AtomicIntegers	O
for	O
counting	O
and	O
VM	O
-	O
wide	O
unique	O
generators	O
if	O
there	O
'	O
s	O
any	O
hint	O
of	O
multiple	O
threads	O
being	O
involved	O
,	O
because	O
they	O
'	O
re	O
so	O
easy	O
to	O
work	O
with	O
I	O
'	O
d	O
almost	O
consider	O
it	O
premature	O
optimisation	O
to	O
use	O
plain	O
ints	O
.	O
While	O
you	O
can	O
almost	O
always	O
achieve	O
the	O
same	O
synchronization	O
guarantees	O
with	O
ints	O
and	O
appropriate	O
synchronized	O
declarations	O
,	O
the	O
beauty	O
of	O
AtomicInteger	B-api_mention
is	O
that	O
the	O
thread	O
-	O
safety	O
is	O
built	O
into	O
the	O
actual	O
object	O
itself	O
,	O
rather	O
than	O
you	O
needing	O
to	O
worry	O
about	O
the	O
possible	O
interleavings	O
,	O
and	O
monitors	O
held	O
,	O
of	O
every	O
method	O
that	O
happens	O
to	O
access	O
the	O
int	O
value	O
.	O
It	O
'	O
s	O
much	O
harder	O
to	O
accidentally	O
violate	O
threadsafety	O
when	O
calling	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
than	O
when	O
returning	O
i	O
+	O
+	O
and	O
remembering	O
(	O
or	O
not	O
)	O
to	O
acquire	O
the	O
correct	O
set	O
of	O
monitors	O
beforehand	O
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31445150	O
I	O
first	O
tought	O
your	O
question	O
was	O
a	O
dupe	O
of	O
What	O
code	O
does	O
the	O
compiler	O
generate	O
for	O
autoboxing	O
?	O
However	O
,	O
after	O
your	O
comment	O
on	O
@	O
ElliottFrisch	O
I	O
realized	O
it	O
was	O
different	O
:	O
#	O
blockquote	O
For	O
other	O
readers	O
,	O
assume	O
that	O
"	O
behaves	O
that	O
way	O
"	O
means	O
using	O
valueOf	B-api_mention
.	O
Remember	O
that	O
there	O
are	O
multiples	O
compilers	O
for	O
Java	O
.	O
To	O
be	O
"	O
legal	O
"	O
they	O
must	O
follow	O
the	O
contract	O
given	O
in	O
the	O
JLS	O
.	O
Therefore	O
,	O
as	O
long	O
as	O
all	O
the	O
rules	O
here	O
are	O
respected	O
,	O
there	O
is	O
no	O
guarantee	O
of	O
how	O
autoboxing	O
is	O
internally	O
implemented	O
.	O
But	O
I	O
don	O
'	O
t	O
see	O
any	O
reason	O
to	O
not	O
use	O
valueOf	B-api_mention
,	O
specially	O
that	O
it	O
uses	O
the	O
cached	O
values	O
and	O
is	O
the	O
recommended	O
way	O
as	O
per	O
this	O
article	O
by	O
Joseph	O
D	O
.	O
Darcy	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
20358920	O
Fixed	O
size	O
List	B-api_mention
The	O
easiest	O
way	O
,	O
that	O
I	O
know	O
of	O
,	O
is	O
to	O
create	O
a	O
fixed	O
-	O
size	O
single	O
element	O
List	B-api_mention
with	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	O
T	O
.	O
.	O
.	O
)	O
like	O
/	O
/	O
Returns	O
a	O
List	O
backed	O
by	O
a	O
varargs	O
T	O
.	O
return	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Variable	O
size	O
List	B-api_mention
If	O
it	O
needs	O
vary	O
in	O
size	O
you	O
can	O
construct	O
an	O
ArrayList	B-api_mention
and	O
the	O
fixed	O
-	O
size	O
List	B-api_mention
like	O
return	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
(	O
in	O
Java	O
7	O
+	O
)	O
you	O
can	O
use	O
the	O
diamond	O
operator	O
<	O
>	O
to	O
make	O
it	O
return	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
38628203	O
In	O
intellij	O
you	O
can	O
auto	O
generate	O
toString	B-api_mention
method	O
by	O
pressing	O
alt	O
+	O
inset	O
and	O
then	O
selecting	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
here	O
is	O
an	O
out	O
put	O
for	O
a	O
test	O
class	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
generates	O
a	O
String	B-api_mention
by	O
concatenating	O
,	O
several	O
attributes	O
of	O
the	O
class	O
,	O
for	O
primitives	O
it	O
will	O
print	O
their	O
values	O
and	O
for	O
reference	O
types	O
it	O
will	O
use	O
their	O
class	O
type	O
(	O
in	O
this	O
case	O
to	O
string	O
method	O
of	O
Test2	O
)	O
.	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488669	O
Two	O
steps	O
:	O
#	O
li	O
String	B-api_mention
[	O
]	O
items	O
=	O
commaSeparated	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
container	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
24630963	O
The	O
Java	O
8	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
throws	O
a	O
NullPointerException	B-api_mention
if	O
one	O
of	O
the	O
values	O
is	O
'	O
null	O
'	O
.	O
I	O
don	O
'	O
t	O
understand	O
this	O
behaviour	O
,	O
maps	O
can	O
contain	O
null	O
pointers	O
as	O
value	O
without	O
any	O
problems	O
.	O
Is	O
there	O
a	O
good	O
reason	O
why	O
values	O
cannot	O
be	O
null	O
for	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
?	O
Also	O
,	O
is	O
there	O
a	O
nice	O
Java	O
8	O
way	O
of	O
fixing	O
this	O
,	O
or	O
should	O
I	O
revert	O
to	O
plain	O
old	O
for	O
loop	O
?	O
An	O
example	O
of	O
my	O
problem	O
:	O
#	O
pre	O
Stacktrace	O
:	O
#	O
pre	O
Question	O
-	O
29815636	O
,	O
answer	O
-	O
29815698	O
The	O
first	O
form	O
is	O
called	O
Javadoc	O
.	O
You	O
use	O
this	O
when	O
you	O
'	O
re	O
writing	O
formal	O
APIs	O
for	O
your	O
code	O
,	O
which	O
are	O
generated	O
by	O
the	O
javadoc	O
tool	O
.	O
For	O
an	O
example	O
,	O
the	O
Java	O
7	O
API	O
page	O
uses	O
Javadoc	O
and	O
was	O
generated	O
by	O
that	O
tool	O
.	O
Some	O
common	O
elements	O
you	O
'	O
d	O
see	O
in	O
Javadoc	O
include	O
:	O
#	O
li	O
@	O
param	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
parameters	O
are	O
being	O
passed	O
to	O
a	O
method	O
,	O
and	O
what	O
value	O
they	O
'	O
re	O
expected	O
to	O
have	O
#	O
li	O
@	O
return	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
result	O
the	O
method	O
is	O
going	O
to	O
give	O
back	O
#	O
li	O
@	O
throws	O
:	O
this	O
is	O
used	O
to	O
indicate	O
that	O
a	O
method	O
throws	O
an	O
exception	O
or	O
error	O
in	O
case	O
of	O
certain	O
input	O
#	O
li	O
@	O
since	O
:	O
this	O
is	O
used	O
to	O
indicate	O
the	O
earliest	O
Java	O
version	O
this	O
class	O
or	O
function	O
was	O
available	O
in	O
As	O
an	O
example	O
,	O
here	O
'	O
s	O
Javadoc	O
for	O
the	O
compare	O
method	O
of	O
Integer	B-api_mention
:	O
#	O
pre	O
The	O
second	O
form	O
is	O
a	O
block	O
(	O
multi	O
-	O
line	O
)	O
comment	O
.	O
You	O
use	O
this	O
if	O
you	O
want	O
to	O
have	O
multiple	O
lines	O
in	O
a	O
comment	O
.	O
I	O
will	O
say	O
that	O
you	O
'	O
d	O
only	O
want	O
to	O
use	O
the	O
latter	O
form	O
sparingly	O
;	O
that	O
is	O
,	O
you	O
don	O
'	O
t	O
want	O
to	O
overburden	O
your	O
code	O
with	O
block	O
comments	O
that	O
don	O
'	O
t	O
describe	O
what	O
behaviors	O
the	O
method	O
/	O
complex	O
function	O
is	O
supposed	O
to	O
have	O
.	O
Since	O
Javadoc	O
is	O
the	O
more	O
descriptive	O
of	O
the	O
two	O
,	O
and	O
you	O
can	O
generate	O
actual	O
documentation	O
as	O
a	O
result	O
of	O
using	O
it	O
,	O
using	O
Javadoc	O
would	O
be	O
more	O
preferable	O
to	O
simple	O
block	O
comments	O
.	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
24895623	O
First	O
of	O
all	O
,	O
the	O
place	O
in	O
your	O
code	O
where	O
you	O
are	O
initializing	O
(	O
i	O
.	O
e	O
.	O
assigning	O
for	O
the	O
first	O
time	O
)	O
foo	O
is	O
here	O
:	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
foo	O
is	O
an	O
object	O
(	O
with	O
type	O
List	O
)	O
so	O
it	O
is	O
a	O
reference	O
type	O
,	O
not	O
a	O
value	O
type	O
(	O
like	O
int	O
)	O
.	O
As	O
such	O
,	O
it	O
holds	O
a	O
reference	O
to	O
a	O
memory	O
location	O
(	O
e	O
.	O
g	O
.	O
0xA7D2A834	O
)	O
where	O
your	O
List	B-api_mention
elements	O
are	O
stored	O
.	O
Lines	O
like	O
this	O
foo	O
.	O
add	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
Modification	O
-	O
1	O
do	O
not	O
change	O
the	O
value	O
of	O
foo	O
(	O
which	O
,	O
again	O
,	O
is	O
just	O
a	O
reference	O
to	O
a	O
memory	O
location	O
)	O
.	O
Instead	O
,	O
they	O
just	O
add	O
elements	O
into	O
that	O
referenced	O
memory	O
location	O
.	O
To	O
violate	O
the	O
final	O
keyword	O
,	O
you	O
would	O
have	O
to	O
try	O
to	O
re	O
-	O
assign	O
foo	O
as	O
follows	O
again	O
:	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
That	O
would	O
give	O
you	O
a	O
compilation	O
error	O
.	O
Now	O
,	O
with	O
that	O
out	O
of	O
the	O
way	O
,	O
think	O
about	O
what	O
happens	O
when	O
you	O
add	O
the	O
static	O
keyword	O
.	O
When	O
you	O
do	O
NOT	O
have	O
the	O
static	O
keyword	O
,	O
each	O
object	O
that	O
instantiates	O
the	O
class	O
has	O
its	O
own	O
copy	O
of	O
foo	O
.	O
Therefore	O
,	O
the	O
constructor	O
assigns	O
a	O
value	O
to	O
a	O
blank	O
,	O
fresh	O
copy	O
of	O
the	O
foo	O
variable	O
,	O
which	O
is	O
perfectly	O
fine	O
.	O
However	O
,	O
when	O
you	O
DO	O
have	O
the	O
static	O
keyword	O
,	O
only	O
one	O
foo	O
exists	O
in	O
memory	O
that	O
is	O
associated	O
with	O
the	O
class	O
.	O
If	O
you	O
were	O
to	O
create	O
two	O
or	O
more	O
objects	O
,	O
the	O
constructor	O
would	O
be	O
attempting	O
to	O
re	O
-	O
assign	O
that	O
one	O
foo	O
each	O
time	O
,	O
violating	O
the	O
final	O
keyword	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
36394016	O
Whenever	O
there	O
is	O
the	O
slightest	O
possibility	O
that	O
the	O
given	O
String	B-api_mention
does	O
not	O
contain	O
an	O
Integer	O
,	O
you	O
have	O
to	O
handle	O
this	O
special	O
case	O
.	O
Sadly	O
,	O
the	O
standard	O
Java	O
methods	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
parseInt	I-api_mention
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
valueOf	I-api_mention
throw	O
a	O
NumberFormatException	B-api_mention
to	O
signal	O
this	O
special	O
case	O
.	O
Thus	O
,	O
you	O
have	O
to	O
use	O
exceptions	O
for	O
flow	O
control	O
,	O
which	O
is	O
generally	O
considered	O
bad	O
coding	O
style	O
.	O
In	O
my	O
opinion	O
,	O
this	O
special	O
case	O
should	O
be	O
handled	O
by	O
returning	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Since	O
Java	O
does	O
not	O
offer	O
such	O
a	O
method	O
,	O
I	O
use	O
the	O
following	O
wrapper	O
:	O
#	O
pre	O
Usage	O
:	O
#	O
pre	O
While	O
this	O
is	O
still	O
using	O
exceptions	O
for	O
flow	O
control	O
internally	O
,	O
the	O
usage	O
code	O
becomes	O
very	O
clean	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
22694891	O
I	O
think	O
many	O
of	O
the	O
answers	O
here	O
may	O
be	O
missing	O
a	O
quality	O
method	O
included	O
in	O
StringBuilder	B-api_mention
:	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
know	O
this	O
is	O
a	O
late	O
reply	O
;	O
however	O
,	O
this	O
should	O
be	O
made	O
known	O
(	O
and	O
explained	O
a	O
bit	O
more	O
thoroughly	O
)	O
.	O
Let	O
'	O
s	O
say	O
you	O
have	O
a	O
StringBuilder	B-api_mention
table	O
-	O
which	O
you	O
wish	O
to	O
modify	O
,	O
dynamically	O
,	O
throughout	O
your	O
program	O
(	O
one	O
I	O
am	O
working	O
on	O
right	O
now	O
does	O
this	O
)	O
,	O
e	O
.	O
g	O
.	O
StringBuilder	B-api_mention
table	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
are	O
looping	O
through	O
the	O
method	O
and	O
alter	O
the	O
content	O
,	O
use	O
the	O
content	O
,	O
then	O
wish	O
to	O
discard	O
the	O
content	O
to	O
"	O
clean	O
up	O
"	O
the	O
StringBuilder	B-api_mention
for	O
the	O
next	O
iteration	O
,	O
you	O
can	O
delete	O
it	O
'	O
s	O
contents	O
,	O
e	O
.	O
g	O
.	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
start	O
and	O
end	O
being	O
the	O
indices	O
of	O
the	O
chars	O
you	O
wish	O
to	O
remove	O
.	O
Don	O
'	O
t	O
know	O
the	O
length	O
in	O
chars	O
and	O
want	O
to	O
delete	O
the	O
whole	O
thing	O
?	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
NOW	O
,	O
for	O
the	O
kicker	O
.	O
StringBuilders	O
,	O
as	O
mentioned	O
previously	O
,	O
take	O
a	O
lot	O
of	O
overhead	O
when	O
altered	O
frequently	O
(	O
and	O
can	O
cause	O
safety	O
issues	O
with	O
regard	O
to	O
threading	O
)	O
;	O
therefore	O
,	O
use	O
StringBuffer	B-api_mention
-	O
same	O
as	O
StringBuilder	B-api_mention
(	O
with	O
a	O
few	O
exceptions	O
)	O
-	O
if	O
your	O
StringBuilder	B-api_mention
is	O
used	O
for	O
the	O
purpose	O
of	O
interfacing	O
with	O
the	O
user	O
.	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5103360	O
We	O
usually	O
have	O
two	O
IDs	O
in	O
our	O
entities	O
:	O
#	O
li	O
Is	O
for	O
persistence	O
layer	O
only	O
(	O
so	O
that	O
persistence	O
provider	O
and	O
database	O
can	O
figure	O
out	O
relationships	O
between	O
objects	O
)	O
.	O
#	O
li	O
Is	O
for	O
our	O
application	O
needs	O
(	O
equals	O
(	O
args	O
)	O
and	O
hashCode	O
(	O
args	O
)	O
in	O
particular	O
)	O
Take	O
a	O
look	O
:	O
#	O
pre	O
EDIT	O
:	O
to	O
clarify	O
my	O
point	O
regarding	O
calls	O
to	O
setUuid	O
(	O
args	O
)	O
method	O
.	O
Here	O
'	O
s	O
a	O
typical	O
scenario	O
:	O
#	O
pre	O
When	O
I	O
run	O
my	O
tests	O
and	O
see	O
the	O
log	O
output	O
I	O
fix	O
the	O
problem	O
:	O
#	O
pre	O
Alternatively	O
,	O
one	O
can	O
provide	O
a	O
separate	O
constructor	O
:	O
#	O
pre	O
So	O
my	O
example	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
use	O
a	O
default	O
constructor	O
and	O
a	O
setter	O
,	O
but	O
you	O
may	O
find	O
two	O
-	O
constructors	O
approach	O
more	O
suitable	O
for	O
you	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791826	O
Search	O
for	O
the	O
first	O
word	O
to	O
be	O
replaced	O
.	O
If	O
it	O
'	O
s	O
in	O
the	O
string	O
,	O
recurse	O
on	O
the	O
the	O
part	O
of	O
the	O
string	O
before	O
the	O
occurrence	O
,	O
and	O
on	O
the	O
part	O
of	O
the	O
string	O
after	O
the	O
occurrence	O
.	O
Otherwise	O
,	O
continue	O
with	O
the	O
next	O
word	O
to	O
be	O
replaced	O
.	O
A	O
naive	O
implementation	O
might	O
look	O
like	O
this	O
#	O
pre	O
Sample	O
usage	O
:	O
#	O
pre	O
Output	O
:	O
Once	O
upon	O
a	O
foo	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
baz	O
.	O
A	O
less	O
-	O
naive	O
version	O
:	O
#	O
pre	O
Unfortunately	O
,	O
Java	O
'	O
s	O
String	B-api_mention
has	O
no	O
indexOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
I	O
'	O
ve	O
omitted	O
the	O
implementation	O
of	O
indexOf	B-api_mention
here	O
as	O
I	O
'	O
m	O
not	O
certain	O
it	O
'	O
s	O
correct	O
,	O
but	O
it	O
can	O
be	O
found	O
on	O
ideone	O
,	O
along	O
with	O
some	O
rough	O
timings	O
of	O
various	O
solutions	O
posted	O
here	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725453	O
Since	O
all	O
lists	O
are	O
already	O
"	O
sorted	O
"	O
by	O
the	O
order	O
the	O
items	O
were	O
added	O
(	O
FIFO	O
ordering	O
)	O
,	O
you	O
can	O
"	O
resort	O
"	O
them	O
with	O
another	O
ordering	O
,	O
including	O
the	O
natural	O
ordering	O
of	O
elements	O
,	O
using	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
EDIT	O
:	O
Lists	B-api_mention
as	O
data	O
structures	O
are	O
based	O
in	O
what	O
is	O
interesting	O
is	O
the	O
ordering	O
in	O
which	O
the	O
items	O
where	O
inserted	O
.	O
Sets	O
do	O
not	O
have	O
that	O
information	O
.	O
If	O
you	O
want	O
to	O
order	O
by	O
addition	O
time	O
,	O
use	O
List	B-api_mention
.	O
If	O
you	O
want	O
to	O
order	O
by	O
other	O
criteria	O
,	O
use	O
SortedSet	B-api_mention
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777312	O
Arrays	O
inherit	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
Object	O
and	O
hence	O
compare	O
only	O
returns	O
true	O
if	O
comparing	O
an	O
array	O
against	O
itself	O
.	O
On	O
the	O
other	O
hand	O
,	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
compares	O
the	O
elements	O
of	O
the	O
arrays	O
.	O
This	O
snippet	O
elucidates	O
the	O
difference	O
:	O
#	O
pre	O
See	O
also	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Another	O
static	O
method	O
there	O
may	O
also	O
be	O
of	O
interest	O
:	O
Arrays	B-api_mention
.	I-api_mention
deepEquals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
30210459	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
allows	O
you	O
to	O
pass	O
an	O
instance	O
of	O
a	O
Comparator	B-api_mention
which	O
defines	O
the	O
sorting	O
logic	O
.	O
So	O
instead	O
of	O
sorting	O
the	O
list	O
in	O
natural	O
order	O
and	O
then	O
reversing	O
it	O
,	O
one	O
can	O
simply	O
pass	O
Collections	B-api_mention
.	I-api_mention
reverseOrder	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
in	O
order	O
to	O
sort	O
the	O
list	O
in	O
reverse	O
order	O
:	O
#	O
pre	O
As	O
mentioned	O
by	O
@	O
Marco13	O
,	O
apart	O
from	O
being	O
more	O
idiomatic	O
(	O
and	O
possibly	O
more	O
efficient	O
)	O
,	O
using	O
the	O
reverse	O
order	O
comparator	O
makes	O
sure	O
that	O
the	O
sort	O
is	O
stable	O
(	O
meaning	O
that	O
the	O
order	O
of	O
elements	O
will	O
not	O
be	O
changed	O
when	O
they	O
are	O
equal	O
according	O
to	O
the	O
comparator	O
,	O
whereas	O
reversing	O
will	O
change	O
the	O
order	O
)	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408477	O
The	O
+	O
operator	O
is	O
usually	O
replaced	O
by	O
a	O
StringBuilder	B-api_mention
at	O
compile	O
time	O
.	O
Check	O
this	O
answer	O
for	O
more	O
details	O
on	O
that	O
matter	O
.	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408526	O
Let	O
'	O
s	O
look	O
at	O
the	O
following	O
simple	O
expressions	O
in	O
Java	O
#	O
pre	O
The	O
compiler	O
converts	O
StringLiteral	O
+	O
x	O
;	O
into	O
a	O
StringBuilder	B-api_mention
internally	O
and	O
uses	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
"	O
add	O
"	O
the	O
integer	O
to	O
the	O
string	O
.	O
5	O
.	O
1	O
.	O
11	O
.	O
String	O
Conversion	O
#	O
blockquote	O
15	O
.	O
18	O
.	O
1	O
.	O
#	O
blockquote	O
The	O
optimized	O
version	O
will	O
not	O
actually	O
do	O
a	O
full	O
wrapped	O
String	O
conversion	O
first	O
.	O
This	O
is	O
a	O
good	O
illustration	O
of	O
an	O
optimized	O
version	O
used	O
by	O
the	O
compiler	O
,	O
albeit	O
without	O
the	O
conversion	O
of	O
a	O
primitive	O
,	O
where	O
you	O
can	O
see	O
the	O
compiler	O
changing	O
things	O
into	O
a	O
StringBuilder	O
in	O
the	O
background	O
:	O
#	O
a	O
This	O
java	O
code	O
:	O
#	O
pre	O
Generates	O
this	O
-	O
see	O
how	O
the	O
two	O
concatenation	O
styles	O
lead	O
to	O
the	O
very	O
same	O
bytecode	O
:	O
#	O
pre	O
Looking	O
at	O
the	O
example	O
above	O
and	O
how	O
the	O
byte	O
code	O
based	O
on	O
the	O
source	O
code	O
in	O
the	O
given	O
example	O
is	O
generated	O
,	O
you	O
will	O
be	O
able	O
to	O
notice	O
that	O
the	O
compiler	O
has	O
internally	O
transformed	O
the	O
following	O
statement	O
cip	O
+	O
ciop	O
;	O
into	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
In	O
other	O
words	O
,	O
the	O
operator	O
+	O
in	O
string	O
concatenation	O
is	O
effectively	O
a	O
shorthand	O
for	O
the	O
more	O
verbose	O
StringBuilder	B-api_mention
idiom	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
30190425	O
I	O
'	O
ll	O
vote	O
for	O
sb	O
.	B-api_mention
setLength	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
not	O
only	O
because	O
it	O
'	O
s	O
one	O
function	O
call	O
but	O
because	O
it	O
don	O
'	O
t	O
actually	O
copy	O
the	O
array	O
into	O
another	O
array	O
like	O
sb	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
It	O
just	O
fill	O
the	O
remaining	O
characters	O
to	O
be	O
0	O
and	O
set	O
the	O
length	O
variable	O
to	O
the	O
new	O
length	O
.	O
You	O
can	O
take	O
a	O
look	O
into	O
their	O
implementation	O
to	O
validate	O
my	O
point	O
from	O
here	O
at	O
setLength	B-api_mention
function	O
and	O
delete0	O
function	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725518	O
Because	O
the	O
concept	O
of	O
a	O
List	B-api_mention
is	O
incompatible	O
with	O
the	O
concept	O
of	O
an	O
automatically	O
sorted	O
collection	O
.	O
The	O
point	O
of	O
a	O
List	B-api_mention
is	O
that	O
after	O
calling	O
list	B-api_mention
.	I-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
a	O
call	O
to	O
list	B-api_mention
.	I-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
elem	O
.	O
With	O
an	O
auto	O
-	O
sorted	O
list	O
,	O
the	O
element	O
could	O
end	O
up	O
in	O
an	O
arbitrary	O
position	O
.	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673375	O
You	O
should	O
be	O
able	O
to	O
write	O
the	O
file	O
on	O
the	O
response	O
directly	O
.	O
Something	O
like	O
#	O
pre	O
and	O
then	O
write	O
the	O
file	O
as	O
a	O
binary	O
stream	O
on	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Remember	O
to	O
do	O
response	O
.	B-api_mention
flush	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
at	O
the	O
end	O
and	O
that	O
should	O
do	O
it	O
.	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
21172732	O
The	O
parallel	O
streams	O
use	O
the	O
default	O
ForkJoinPool	B-api_mention
which	O
by	O
default	O
has	O
one	O
less	O
threads	O
as	O
you	O
have	O
processors	O
,	O
as	O
returned	O
by	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
availableProcessors	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
so	O
parallel	O
streams	O
use	O
all	O
your	O
processors	O
because	O
they	O
also	O
use	O
the	O
main	O
thread	O
)	O
:	O
#	O
blockquote	O
To	O
change	O
the	O
way	O
parallel	O
streams	O
are	O
executed	O
,	O
you	O
can	O
either	O
#	O
li	O
submit	O
the	O
parallel	O
stream	O
execution	O
to	O
your	O
own	O
ForkJoinPool	B-api_mention
:	O
yourFJP	O
.	B-api_mention
submit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
#	O
li	O
you	O
can	O
change	O
the	O
size	O
of	O
the	O
common	O
pool	O
using	O
system	O
properties	O
:	O
System	B-api_mention
.	I-api_mention
setProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
a	O
target	O
parallelism	O
of	O
20	O
threads	O
.	O
Example	O
of	O
the	O
latter	O
on	O
my	O
machine	O
which	O
has	O
8	O
processors	O
.	O
If	O
I	O
run	O
the	O
following	O
program	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
#	O
blockquote	O
So	O
you	O
can	O
see	O
that	O
the	O
parallel	O
stream	O
processes	O
8	O
items	O
at	O
a	O
time	O
,	O
i	O
.	O
e	O
.	O
it	O
uses	O
8	O
threads	O
.	O
However	O
if	O
I	O
uncomment	O
the	O
commented	O
line	O
,	O
the	O
output	O
is	O
:	O
#	O
blockquote	O
This	O
time	O
the	O
parallel	O
stream	O
has	O
used	O
20	O
threads	O
and	O
all	O
20	O
elements	O
in	O
the	O
stream	O
have	O
been	O
processed	O
comcurrently	O
.	O
Question	O
-	O
19998454	O
,	O
answer	O
-	O
19998652	O
This	O
is	O
being	O
described	O
in	O
this	O
article	O
.	O
Think	O
about	O
forEach	B-api_mention
of	O
Collections	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
…	O
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
25074487	O
-	O
getParameter	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
get	O
the	O
value	O
from	O
the	O
posted	O
form	O
of	O
the	O
input	O
box	O
named	O
"	O
testParam	O
"	O
which	O
is	O
"	O
Client	O
param	O
"	O
.	O
It	O
will	O
then	O
print	O
it	O
out	O
,	O
so	O
you	O
should	O
see	O
"	O
Client	O
Param	O
"	O
on	O
the	O
screen	O
.	O
So	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
)	I-api_mention
will	O
retrieve	O
a	O
value	O
that	O
the	O
client	O
has	O
submitted	O
.	O
You	O
will	O
get	O
the	O
value	O
on	O
the	O
server	O
side	O
.	O
-	O
getAttribute	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
this	O
is	O
all	O
done	O
server	O
side	O
.	O
YOU	O
add	O
the	O
attribute	O
to	O
the	O
request	O
and	O
YOU	O
submit	O
the	O
request	O
to	O
another	O
resource	O
,	O
the	O
client	O
does	O
not	O
know	O
about	O
this	O
.	O
So	O
all	O
the	O
code	O
handling	O
this	O
would	O
typically	O
be	O
in	O
servlets	O
.	B-api_mention
getAttribute	I-api_mention
always	O
return	O
object	O
.	O
Question	O
-	O
29095967	O
I	O
have	O
this	O
list	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
:	O
[	O
StringLiteral	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
StringLiteral	O
]	O
And	O
I	O
'	O
d	O
like	O
something	O
like	O
this	O
:	O
[	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
]	O
In	O
other	O
words	O
I	O
want	O
to	O
split	O
my	O
list	O
in	O
sublists	O
using	O
the	O
null	O
value	O
as	O
separator	O
,	O
in	O
order	O
to	O
obtain	O
a	O
list	O
of	O
lists	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
.	O
I	O
'	O
m	O
looking	O
for	O
a	O
Java	O
8	O
solution	O
.	O
I	O
'	O
ve	O
tried	O
with	O
Collectors	B-api_mention
.	I-api_mention
partitioningBy	I-api_mention
but	O
I	O
'	O
m	O
not	O
sure	O
it	O
is	O
what	O
I	O
'	O
m	O
looking	O
for	O
.	O
Thanks	O
!	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262520	O
Basicly	O
,	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
an	O
executable	O
piece	O
of	O
code	O
that	O
actually	O
does	O
something	O
(	O
it	O
creates	O
a	O
new	O
String	B-api_mention
and	O
then	O
returns	O
it	O
)	O
.	O
The	O
returned	O
value	O
can	O
be	O
ignored	O
and	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
still	O
be	O
used	O
in	O
void	O
-	O
return	O
lambda	O
to	O
create	O
a	O
new	O
String	B-api_mention
.	O
However	O
,	O
StringLiteral	O
is	O
just	O
a	O
constant	O
that	O
doesn	O
'	O
t	O
do	O
anything	O
on	O
it	O
'	O
s	O
own	O
.	O
The	O
only	O
reasonable	O
thing	O
to	O
do	O
with	O
it	O
in	O
lambda	O
body	O
is	O
to	O
return	O
it	O
.	O
But	O
the	O
lambda	O
method	O
would	O
have	O
to	O
have	O
return	O
type	O
String	B-api_mention
or	O
Object	B-api_mention
,	O
but	O
it	O
returns	O
void	O
,	O
hence	O
the	O
String	B-api_mention
cannot	O
be	O
casted	O
to	O
void	O
error	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846943	O
It	O
is	O
,	O
in	O
my	O
personal	O
experience	O
admittedly	O
,	O
very	O
useful	O
in	O
cases	O
where	O
an	O
API	O
requires	O
a	O
collection	O
of	O
parameters	O
,	O
but	O
you	O
have	O
nothing	O
to	O
provide	O
.	O
For	O
example	O
you	O
may	O
have	O
an	O
API	O
that	O
looks	O
something	O
like	O
this	O
,	O
and	O
does	O
not	O
allow	O
null	O
references	O
:	O
public	O
ResultSet	B-api_mention
executeQuery	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
have	O
a	O
query	O
that	O
doesn	O
'	O
t	O
take	O
any	O
parameters	O
,	O
it	O
'	O
s	O
certainly	O
a	O
bit	O
wasteful	O
to	O
create	O
a	O
HashMap	B-api_mention
,	O
which	O
involves	O
allocating	O
an	O
array	O
,	O
when	O
you	O
could	O
just	O
pass	O
in	O
the	O
'	O
Empty	O
Map	O
'	O
which	O
is	O
effectively	O
a	O
constant	O
,	O
the	O
way	O
it	O
'	O
s	O
implemented	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	O
Question	O
-	O
8189466	O
,	O
answer	O
-	O
23592535	O
I	O
had	O
that	O
same	O
problem	O
but	O
in	O
case	O
that	O
I	O
was	O
adding	O
en	O
element	O
into	O
iterated	O
list	O
.	O
I	O
made	O
it	O
this	O
way	O
#	O
pre	O
Now	O
everything	O
goes	O
fine	O
because	O
you	O
don	O
'	O
t	O
create	O
any	O
iterator	O
over	O
your	O
list	O
,	O
you	O
iterate	O
over	O
it	O
"	O
manually	O
"	O
.	O
And	O
condition	O
i	O
<	O
integerList	O
.	B-api_mention
size	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
never	O
fool	O
you	O
because	O
when	O
you	O
remove	O
/	O
add	O
something	O
into	O
List	B-api_mention
size	O
of	O
the	O
List	B-api_mention
decrement	O
/	O
increment	O
.	O
.	O
Hope	O
it	O
helps	O
,	O
for	O
me	O
that	O
was	O
solution	O
.	O
Question	O
-	O
25222811	O
,	O
answer	O
-	O
26676046	O
To	O
begin	O
with	O
(	O
and	O
unrelated	O
)	O
,	O
instantiating	O
the	O
Application	B-api_mention
class	O
by	O
yourself	O
does	O
not	O
seem	O
to	O
be	O
its	O
intended	O
use	O
.	O
From	O
what	O
one	O
can	O
read	O
from	O
its	O
source	O
,	O
you	O
are	O
rather	O
expected	O
to	O
use	O
the	O
static	O
instance	O
returned	O
by	O
getApplication	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Now	O
let	O
'	O
s	O
get	O
to	O
the	O
error	O
Eclipse	O
reports	O
.	O
I	O
'	O
ve	O
ran	O
into	O
a	O
similar	O
issue	O
recently	O
:	O
Access	O
restriction	O
:	O
The	O
method	O
.	O
.	O
.	O
is	O
not	O
API	O
(	O
args	O
)	O
.	O
I	O
called	O
the	O
method	O
in	O
question	O
as	O
a	O
method	O
of	O
an	O
object	O
which	O
inherited	O
that	O
method	O
from	O
a	O
super	O
class	O
.	O
All	O
I	O
had	O
to	O
do	O
was	O
to	O
add	O
the	O
package	O
the	O
super	O
class	O
was	O
in	O
to	O
the	O
packages	O
imported	O
by	O
my	O
plugin	O
.	O
However	O
,	O
there	O
is	O
a	O
lot	O
of	O
different	O
causes	O
for	O
errors	O
based	O
on	O
"	O
restriction	O
on	O
required	O
project	O
/	O
library	O
"	O
.	O
Similar	O
to	O
the	O
problem	O
described	O
above	O
,	O
the	O
type	O
you	O
are	O
using	O
might	O
have	O
dependencies	O
to	O
packages	O
that	O
are	O
not	O
exported	O
by	O
the	O
library	O
or	O
might	O
not	O
be	O
exported	O
itself	O
.	O
In	O
that	O
case	O
you	O
can	O
try	O
to	O
track	O
down	O
the	O
missing	O
packages	O
and	O
export	O
them	O
my	O
yourself	O
,	O
as	O
suggested	O
here	O
,	O
or	O
try	O
Access	O
Rules	O
.	O
Other	O
possible	O
scenarios	O
include	O
:	O
#	O
li	O
Eclipse	O
wants	O
to	O
keep	O
you	O
from	O
using	O
available	O
packages	O
that	O
are	O
not	O
part	O
of	O
the	O
public	O
Java	O
API	O
(	O
solution	O
1	O
,	O
2	O
)	O
#	O
li	O
Dependencies	O
are	O
satisfied	O
by	O
multiple	O
sources	O
,	O
versions	O
are	O
conflicting	O
etc	O
.	O
(	O
solution	O
1	O
,	O
2	O
,	O
3	O
)	O
#	O
li	O
Eclipse	O
is	O
using	O
a	O
JRE	O
where	O
a	O
JDK	O
is	O
necessary	O
(	O
which	O
might	O
be	O
the	O
case	O
here	O
,	O
from	O
what	O
your	O
errors	O
say	O
;	O
solution	O
)	O
or	O
JRE	O
/	O
JDK	O
version	O
in	O
project	O
build	O
path	O
is	O
not	O
the	O
right	O
one	O
This	O
ended	O
up	O
as	O
more	O
like	O
a	O
medley	O
of	O
restriction	O
-	O
related	O
issues	O
than	O
an	O
actual	O
answer	O
.	O
But	O
since	O
restriction	O
on	O
required	O
projects	O
is	O
such	O
a	O
versatile	O
error	O
to	O
be	O
reported	O
,	O
the	O
perfect	O
recipe	O
is	O
probably	O
still	O
to	O
be	O
found	O
.	O
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375716	O
String	B-api_mention
is	O
immutable	O
irrespective	O
of	O
how	O
it	O
is	O
instantiated	O
1	O
)	O
Short	O
answer	O
is	O
yes	O
,	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
immutable	O
too	O
.	O
Because	O
every	O
possible	O
mutable	O
operation	O
(	O
like	O
replace	O
,	O
toLowerCase	B-api_mention
etcetra	O
)	O
that	O
you	O
perform	O
on	O
String	B-api_mention
does	O
not	O
affect	O
the	O
original	O
String	B-api_mention
instance	O
and	O
returns	O
you	O
a	O
new	O
instance	O
.	O
You	O
may	O
check	O
this	O
in	O
Javadoc	O
for	O
String	B-api_mention
.	O
Each	O
public	O
method	O
of	O
String	B-api_mention
that	O
is	O
exposed	O
returns	O
a	O
new	O
String	B-api_mention
instance	O
and	O
does	O
not	O
alter	O
the	O
present	O
instance	O
on	O
which	O
you	O
called	O
the	O
method	O
.	O
This	O
is	O
very	O
helpful	O
in	O
Multi	O
-	O
threaded	O
environment	O
as	O
you	O
don	O
'	O
t	O
have	O
to	O
think	O
about	O
mutability	O
(	O
someone	O
will	O
change	O
the	O
value	O
)	O
every	O
time	O
you	O
pass	O
or	O
share	O
the	O
String	B-api_mention
around	O
.	O
String	B-api_mention
can	O
easily	O
be	O
the	O
most	O
used	O
data	O
type	O
,	O
so	O
the	O
designers	O
have	O
blessed	O
us	O
all	O
to	O
not	O
think	O
about	O
mutability	O
everytime	O
and	O
saved	O
us	O
a	O
lot	O
of	O
pain	O
.	O
Immutability	O
allowed	O
String	B-api_mention
pool	O
or	O
caching	O
It	O
is	O
because	O
of	O
immutability	O
property	O
that	O
the	O
internal	O
pool	O
of	O
string	O
was	O
possible	O
,	O
as	O
when	O
same	O
String	B-api_mention
value	O
is	O
required	O
at	O
some	O
other	O
place	O
then	O
that	O
immutable	O
reference	O
is	O
returned	O
.	O
If	O
String	B-api_mention
would	O
have	O
been	O
mutable	O
then	O
it	O
would	O
not	O
have	O
been	O
possible	O
to	O
share	O
String	B-api_mention
s	O
like	O
this	O
to	O
save	O
memory	O
.	O
String	B-api_mention
immutablity	O
was	O
not	O
because	O
of	O
pooling	O
,	O
but	O
immutability	O
has	O
more	O
benefits	O
attached	O
to	O
it	O
.	O
String	B-api_mention
interning	O
or	O
pooling	O
is	O
an	O
example	O
of	O
Flyweight	O
Design	O
pattern	O
2	O
)	O
Yes	O
it	O
will	O
be	O
interned	O
like	O
any	O
other	O
String	B-api_mention
as	O
a	O
blank	O
String	B-api_mention
is	O
also	O
as	O
much	O
a	O
String	B-api_mention
as	O
other	O
String	B-api_mention
instances	O
.	O
References	O
:	O
#	O
li	O
Immutability	O
benefits	O
of	O
String	B-api_mention
Question	O
-	O
4812570	O
,	O
answer	O
-	O
4812585	O
You	O
have	O
to	O
use	O
getStackTrace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
instead	O
of	O
printStackTrace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Here	O
is	O
a	O
good	O
example	O
:	O
#	O
pre	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923227	O
Optionals	O
aren	O
'	O
t	O
designed	O
for	O
this	O
purpose	O
,	O
as	O
explained	O
nicely	O
by	O
Brian	O
Goetz	O
.	O
You	O
can	O
always	O
use	O
@	O
Nullable	O
to	O
denote	O
that	O
a	O
method	O
argument	O
can	O
be	O
null	O
.	O
Using	O
an	O
optional	O
does	O
not	O
really	O
enable	O
you	O
to	O
write	O
your	O
method	O
logic	O
more	O
neatly	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25853827	O
I	O
would	O
argue	O
first	O
-	O
off	O
that	O
Serializable	B-api_mention
and	O
Cloneable	B-api_mention
are	O
bad	O
examples	O
of	O
marker	O
interfaces	O
.	O
Sure	O
,	O
they	O
'	O
re	O
interfaces	O
with	O
methods	O
,	O
but	O
they	O
imply	O
methods	O
,	O
such	O
as	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
(	O
The	O
compiler	O
will	O
create	O
a	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
you	O
if	O
you	O
don	O
'	O
t	O
override	O
it	O
,	O
and	O
all	O
objects	O
already	O
have	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
the	O
compiler	O
will	O
again	O
create	O
a	O
real	O
clone	O
(	O
args	O
)	O
method	O
for	O
you	O
but	O
with	O
caveats	O
.	O
Both	O
of	O
these	O
are	O
weird	O
edge	O
cases	O
that	O
really	O
aren	O
'	O
t	O
good	O
design	O
examples	O
.	O
)	O
Marker	O
interfaces	O
are	O
generally	O
used	O
for	O
one	O
of	O
two	O
purposes	O
:	O
1	O
)	O
As	O
a	O
shortcut	O
to	O
avoid	O
an	O
excessively	O
long	O
type	O
,	O
which	O
can	O
happen	O
with	O
lots	O
of	O
generics	O
.	O
For	O
instance	O
,	O
say	O
you	O
have	O
this	O
method	O
signature	O
:	O
public	O
void	O
doSomething	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
.	O
.	O
.	O
}	O
That	O
'	O
s	O
messy	O
and	O
annoying	O
to	O
type	O
,	O
and	O
more	O
importantly	O
,	O
difficult	O
to	O
understand	O
.	O
Consider	O
this	O
instead	O
:	O
public	O
interface	O
Widget	O
extends	O
Foobar	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
{	O
}	O
Then	O
your	O
method	O
looks	O
like	O
this	O
:	O
public	O
void	O
doSomething	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
.	O
.	O
.	O
}	O
Not	O
only	O
is	O
it	O
clearer	O
,	O
but	O
you	O
can	O
now	O
Javadoc	O
the	O
Widget	B-api_mention
interface	O
,	O
and	O
it	O
'	O
s	O
also	O
easier	O
to	O
search	O
for	O
all	O
occurrences	O
in	O
your	O
code	O
of	O
Widget	B-api_mention
.	O
2	O
)	O
Marker	B-api_mention
interfaces	O
can	O
also	O
be	O
used	O
as	O
a	O
way	O
around	O
Java	O
'	O
s	O
lack	O
of	O
intersection	O
types	O
.	O
With	O
a	O
marker	B-api_mention
interface	O
,	O
you	O
can	O
require	O
something	O
to	O
be	O
of	O
two	O
different	O
types	O
,	O
such	O
as	O
in	O
a	O
method	O
signature	O
.	O
Say	O
you	O
have	O
some	O
interface	O
Widget	B-api_mention
in	O
your	O
application	O
,	O
like	O
we	O
described	O
above	O
.	O
If	O
you	O
have	O
a	O
method	O
that	O
requires	O
a	O
Widget	B-api_mention
that	O
also	O
happens	O
to	O
let	O
you	O
iterate	O
over	O
it	O
(	O
it	O
'	O
s	O
contrived	O
,	O
but	O
work	O
with	O
me	O
here	O
)	O
,	O
your	O
only	O
good	O
solution	O
is	O
to	O
create	O
a	O
marker	O
interface	O
that	O
extends	O
both	O
interfaces	O
:	O
public	O
interface	O
IterableWidget	B-api_mention
extends	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
Widget	B-api_mention
{	O
}	O
And	O
in	O
your	O
code	O
:	O
#	O
pre	O
Question	O
-	O
24649842	O
,	O
answer	O
-	O
24649939	O
Try	O
adding	O
a	O
Thread	B-api_mention
.	I-api_mention
sleep	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
within	O
your	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
.	O
.	O
Basically	O
it	O
'	O
s	O
the	O
difference	O
between	O
scheduling	O
something	O
based	O
on	O
when	O
the	O
previous	O
execution	O
ends	O
and	O
when	O
it	O
(	O
logically	O
)	O
starts	O
.	O
For	O
example	O
,	O
suppose	O
I	O
schedule	O
an	O
alarm	O
to	O
go	O
off	O
with	O
a	O
fixed	O
rate	O
of	O
once	O
an	O
hour	O
,	O
and	O
every	O
time	O
it	O
goes	O
off	O
,	O
I	O
have	O
a	O
cup	O
of	O
coffee	O
,	O
which	O
takes	O
10	O
minutes	O
.	O
Suppose	O
that	O
starts	O
at	O
midnight	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
If	O
I	O
schedule	O
with	O
a	O
fixed	O
delay	O
of	O
one	O
hour	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
Which	O
one	O
you	O
want	O
depends	O
on	O
your	O
task	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276497	O
No	O
,	O
the	O
topmost	O
level	O
Stream	B-api_mention
or	O
reader	O
will	O
ensure	O
that	O
all	O
underlying	O
streams	O
/	O
readers	O
are	O
closed	O
.	O
Check	O
the	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
implementation	O
of	O
your	O
topmost	O
level	O
stream	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
35834484	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
You	O
can	O
also	O
use	O
public	O
static	O
Integer	B-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
throws	O
NumberFormatException	B-api_mention
.	O
It	O
also	O
works	O
for	O
base	O
8	O
and	O
16	O
:	O
#	O
pre	O
If	O
you	O
want	O
to	O
get	O
int	O
instead	O
of	O
Integer	O
you	O
can	O
use	O
:	O
#	O
li	O
Unboxing	O
:	O
int	O
val	O
=	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
intValue	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993478	O
You	O
are	O
consuming	O
the	O
value	O
of	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
asking	O
for	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
next	O
(	O
args	O
)	O
,	O
per	O
default	O
,	O
returns	O
everything	O
to	O
the	O
next	O
whitespace	O
(	O
args	O
)	O
.	O
So	O
you	O
are	O
iterating	O
through	O
all	O
whitespace	O
seperated	O
strings	O
,	O
and	O
after	O
each	O
of	O
them	O
you	O
are	O
asking	O
about	O
the	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
i	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
.	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
(	O
still	O
a	O
whitespace	O
left	O
)	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
(	O
Line	O
Seperator	O
,	O
probably	O
)	O
.	O
haxNext	B-api_mention
?	O
False	O
,	O
no	O
whitespace	O
anymore	O
.	O
Question	O
-	O
11411022	O
,	O
answer	O
-	O
34052602	O
The	O
best	O
way	O
is	O
the	O
clearest	O
way	O
:	O
*	O
Thread	B-api_mention
.	I-api_mention
currentThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
,	O
if	O
the	O
runtime	O
platform	O
is	O
API	O
level	O
23	O
(	O
Marshmallow	O
6	O
.	O
0	O
)	O
or	O
higher	O
:	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
isCurrentThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
See	O
the	O
Looper	B-api_mention
API	O
.	O
Note	O
that	O
calling	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
involves	O
synchonization	O
(	O
see	O
the	O
source	O
)	O
.	O
You	O
might	O
want	O
to	O
avoid	O
the	O
overhead	O
by	O
storing	O
the	O
return	O
value	O
and	O
reusing	O
it	O
.	O
*	O
credit	O
greg7gkb	O
Question	O
-	O
31316581	O
,	O
answer	O
-	O
31327420	O
If	O
type	O
inference	O
produces	O
a	O
single	O
upper	O
bound	O
for	O
a	O
type	O
variable	O
,	O
typically	O
the	O
upper	O
bound	O
is	O
chosen	O
as	O
the	O
solution	O
.	O
For	O
example	O
,	O
if	O
T	O
<	O
<	O
Number	O
,	O
the	O
solution	O
is	O
T	O
=	O
Number	O
.	O
Although	O
Integer	B-api_mention
,	O
Float	B-api_mention
etc	O
.	O
could	O
also	O
satisfy	O
the	O
constraint	O
,	O
there	O
'	O
s	O
no	O
good	O
reason	O
to	O
choose	O
them	O
over	O
Number	B-api_mention
.	O
That	O
was	O
also	O
the	O
case	O
for	O
throws	O
T	O
in	O
java	O
5	O
-	O
7	O
:	O
T	O
<	O
<	O
Throwable	O
=	O
>	O
T	O
=	O
Throwable	O
.	O
(	O
Sneaky	O
throw	O
solutions	O
all	O
had	O
explicit	O
<	O
RuntimeException	O
>	O
type	O
arguments	O
,	O
otherwise	O
<	O
Throwable	O
>	O
is	O
inferred	O
.	O
)	O
In	O
java8	O
,	O
with	O
the	O
introduction	O
of	O
lambda	O
,	O
this	O
becomes	O
problematic	O
.	O
Consider	O
this	O
case	O
#	O
pre	O
If	O
we	O
invoke	O
with	O
an	O
empty	O
lambda	O
,	O
what	O
would	O
T	O
be	O
inferred	O
as	O
?	O
invoke	O
(	O
args	O
)	O
;	O
The	O
only	O
constraint	O
on	O
T	O
is	O
an	O
upper	O
bound	O
Throwable	B-api_mention
.	O
In	O
earlier	O
stage	O
of	O
java8	O
,	O
T	O
=	O
Throwable	B-api_mention
would	O
be	O
inferred	O
.	O
See	O
this	O
report	O
I	O
filed	O
.	O
But	O
that	O
is	O
pretty	O
silly	O
,	O
to	O
infer	O
Throwable	B-api_mention
,	O
a	O
checked	O
exception	O
,	O
out	O
of	O
an	O
empty	O
block	O
.	O
A	O
solution	O
was	O
proposed	O
in	O
the	O
report	O
(	O
which	O
is	O
apparently	O
adopted	O
by	O
JLS	O
)	O
-	O
#	O
pre	O
i	O
.	O
e	O
.	O
if	O
the	O
upper	O
bound	O
is	O
Exception	B-api_mention
or	O
Throwable	B-api_mention
,	O
choose	O
RuntimeException	B-api_mention
as	O
the	O
solution	O
.	O
In	O
this	O
case	O
,	O
there	O
is	O
a	O
good	O
reason	O
to	O
choose	O
a	O
particular	O
subtype	O
of	O
the	O
upper	O
bound	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
29784337	O
The	O
other	O
answers	O
all	O
use	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
an	O
unmodifiable	O
list	O
(	O
an	O
UnsupportedOperationException	B-api_mention
is	O
thrown	O
if	O
you	O
try	O
to	O
add	O
or	O
remove	O
an	O
element	O
)	O
.	O
To	O
get	O
a	O
mutable	O
list	O
you	O
can	O
wrap	O
the	O
returned	O
list	O
in	O
a	O
new	O
ArrayList	B-api_mention
as	O
a	O
couple	O
of	O
answers	O
point	O
out	O
,	O
but	O
a	O
cleaner	O
solution	O
is	O
to	O
use	O
Guava	O
'	O
s	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
available	O
since	O
at	O
least	O
Guava	O
10	O
,	O
released	O
in	O
2011	O
)	O
.	O
For	O
example	O
:	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
18532488	O
In	O
many	O
other	O
languages	O
,	O
eg	O
.	O
Haskell	O
,	O
it	O
is	O
easy	O
to	O
repeat	O
a	O
value	O
or	O
function	O
multiple	O
times	O
,	O
eg	O
.	O
to	O
get	O
a	O
list	O
of	O
8	O
copies	O
of	O
the	O
value	O
1	O
:	O
take	O
8	O
(	O
args	O
)	O
but	O
I	O
haven	O
'	O
t	O
found	O
this	O
yet	O
in	O
Java	O
8	O
.	O
Is	O
there	O
such	O
a	O
function	O
in	O
Java	O
8	O
'	O
s	O
JDK	O
?	O
Or	O
alternatively	O
something	O
equivalent	O
to	O
a	O
range	O
like	O
[	O
1	O
.	O
.	O
8	O
]	O
It	O
would	O
seem	O
an	O
obvious	O
replacement	O
for	O
a	O
verbose	O
statement	O
in	O
Java	O
like	O
#	O
pre	O
to	O
have	O
something	O
like	O
Range	B-api_mention
.	I-api_mention
from	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
this	O
particular	O
example	O
doesn	O
'	O
t	O
look	O
much	O
more	O
concise	O
actually	O
.	O
.	O
.	O
but	O
hopefully	O
it	O
'	O
s	O
more	O
readable	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16149127	O
You	O
can	O
'	O
t	O
use	O
a	O
primitive	O
because	O
HashMap	B-api_mention
use	O
object	O
internally	O
for	O
the	O
key	O
.	O
So	O
you	O
can	O
only	O
use	O
an	O
object	O
that	O
inherits	O
from	O
Object	B-api_mention
(	O
that	O
is	O
any	O
object	O
)	O
.	O
That	O
is	O
the	O
function	O
put	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
HashMap	B-api_mention
and	O
as	O
you	O
can	O
see	O
it	O
uses	O
Object	B-api_mention
for	O
K	O
:	O
#	O
pre	O
The	O
expression	O
"	O
k	O
=	O
e	O
.	O
key	O
"	O
should	O
make	O
it	O
clear	O
.	O
I	O
suggest	O
to	O
use	O
a	O
wrapper	O
like	O
Integer	B-api_mention
and	O
autoboxing	O
.	O
Question	O
-	O
7569335	O
,	O
answer	O
-	O
39329245	O
As	O
others	O
have	O
pointed	O
out	O
the	O
preferred	O
way	O
is	O
to	O
use	O
:	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reverse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
if	O
you	O
want	O
to	O
implement	O
this	O
by	O
youself	O
,	O
i	O
'	O
am	O
afraid	O
that	O
the	O
rest	O
of	O
responses	O
have	O
flaws	O
.	O
The	O
reason	O
is	O
that	O
String	B-api_mention
represent	O
a	O
list	O
of	O
Unicode	O
points	O
,	O
encoded	O
in	O
a	O
char	O
[	O
]	O
array	O
according	O
to	O
the	O
variable	O
-	O
length	O
encoding	O
:	O
UTF	O
-	O
16	O
.	O
This	O
means	O
some	O
code	O
points	O
use	O
a	O
single	O
element	O
of	O
the	O
array	O
(	O
one	O
code	O
unit	O
)	O
but	O
others	O
use	O
two	O
of	O
them	O
,	O
so	O
there	O
might	O
be	O
pairs	O
of	O
characters	O
that	O
must	O
be	O
treated	O
as	O
a	O
single	O
unit	O
(	O
consecutive	O
"	O
high	O
"	O
and	O
"	O
low	O
"	O
surrogates	O
)	O
#	O
pre	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32182250	O
Integer	B-api_mention
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
a	I-api_mention
)	I-api_mention
can	O
return	O
false	O
But	O
you	O
have	O
to	O
be	O
really	O
evil	O
and	O
use	O
reflections	O
and	O
Multithreading	O
:	O
If	O
you	O
run	O
this	O
code	O
,	O
there	O
is	O
a	O
chance	O
that	O
a	O
racing	O
condition	O
can	O
change	O
the	O
internal	O
Value	O
of	O
myInt	O
while	O
the	O
comparision	O
takes	O
place	O
.	O
If	O
you	O
want	O
to	O
simulate	O
this	O
condition	O
,	O
just	O
set	O
a	O
breakpoint	O
inside	O
of	O
Integer	B-api_mention
.	I-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
run	O
the	O
code	O
in	O
debug	O
and	O
hit	O
continue	O
.	O
This	O
will	O
create	O
a	O
delay	O
which	O
creates	O
the	O
race	O
condition	O
artificially	O
and	O
the	O
console	O
will	O
return	O
false	O
.	O
#	O
pre	O
Question	O
-	O
4772425	O
,	O
answer	O
-	O
18953213	O
remove	O
one	O
y	O
form	O
SimpleDateFormat	B-api_mention
dt1	O
=	O
new	O
SimpleDateFormat	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
should	O
be	O
SimpleDateFormat	B-api_mention
dt1	O
=	O
new	O
SimpleDateFormat	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
13950338	O
,	O
answer	O
-	O
17066803	O
Grant	O
Vibration	O
Permission	O
Before	O
you	O
start	O
implementing	O
any	O
vibration	O
code	O
,	O
you	O
have	O
to	O
give	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
:	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
Make	O
sure	O
to	O
include	O
this	O
line	O
in	O
your	O
AndroidManifest	O
.	O
xml	O
file	O
.	O
Import	O
the	O
Vibration	O
Library	O
Most	O
IDEs	O
will	O
do	O
this	O
for	O
you	O
,	O
but	O
here	O
is	O
the	O
import	O
statement	O
if	O
yours	O
doesn	O
'	O
t	O
:	O
import	B-api_mention
android	I-api_mention
.	I-api_mention
os	I-api_mention
.	I-api_mention
Vibrator	I-api_mention
;	O
Make	O
sure	O
this	O
in	O
the	O
activity	O
where	O
you	O
want	O
the	O
vibration	O
to	O
occur	O
.	O
How	O
to	O
Vibrate	B-api_mention
for	O
a	O
Given	O
Time	O
In	O
most	O
circumstances	O
,	O
you	O
'	O
ll	O
be	O
wanting	O
to	O
vibrate	O
the	O
device	O
for	O
a	O
short	O
,	O
predetermined	O
amount	O
of	O
time	O
.	O
You	O
can	O
achieve	O
this	O
by	O
using	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
is	O
a	O
quick	O
example	O
:	O
#	O
pre	O
That	O
'	O
s	O
it	O
,	O
simple	O
!	O
How	O
to	O
Vibrate	O
Indefinitely	O
It	O
may	O
be	O
the	O
case	O
that	O
you	O
want	O
the	O
device	O
to	O
continue	O
vibrating	O
indefinitely	O
.	O
For	O
this	O
,	O
we	O
use	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
When	O
you	O
'	O
re	O
ready	O
to	O
stop	O
the	O
vibration	O
,	O
just	O
call	O
the	O
cancel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
v	O
.	O
cancel	O
(	O
args	O
)	O
;	O
How	O
to	O
use	O
Vibration	O
Patterns	O
If	O
you	O
want	O
a	O
more	O
bespoke	O
vibration	O
,	O
you	O
can	O
attempt	O
to	O
create	O
your	O
own	O
vibration	O
patterns	O
:	O
#	O
pre	O
More	O
Complex	O
Vibrations	O
There	O
are	O
multiple	O
SDKs	O
that	O
offer	O
a	O
more	O
comprehensive	O
range	O
of	O
haptic	O
feedback	O
.	O
One	O
that	O
I	O
use	O
for	O
special	O
effects	O
is	O
Immersion	O
'	O
s	O
Haptic	O
Development	O
Platform	O
for	O
Android	O
.	O
Troubleshooting	O
If	O
your	O
device	O
won	O
'	O
t	O
vibrate	O
,	O
first	O
make	O
sure	O
that	O
it	O
can	O
vibrate	O
:	O
#	O
pre	O
Secondly	O
,	O
please	O
ensure	O
that	O
you	O
'	O
ve	O
given	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
!	O
Refer	O
back	O
to	O
the	O
first	O
point	O
.	O
Question	O
-	O
28681737	O
,	O
answer	O
-	O
28684917	O
The	O
short	O
answer	O
is	O
:	O
it	O
'	O
s	O
safe	O
if	O
you	O
use	O
them	O
safely	O
:	O
)	O
The	O
snarky	O
answer	O
:	O
tell	O
me	O
what	O
you	O
mean	O
by	O
traits	O
,	O
and	O
maybe	O
I	O
'	O
ll	O
give	O
you	O
a	O
better	O
answer	O
:	O
)	O
In	O
all	O
seriousness	O
,	O
the	O
term	O
"	O
trait	O
"	O
is	O
not	O
well	O
-	O
defined	O
.	O
Many	O
Java	O
developers	O
are	O
most	O
familiar	O
with	O
traits	O
as	O
they	O
are	O
expressed	O
in	O
Scala	O
,	O
but	O
Scala	O
is	O
far	O
from	O
the	O
first	O
language	O
to	O
have	O
traits	O
,	O
either	O
in	O
name	O
or	O
in	O
effect	O
.	O
For	O
example	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
stateful	O
(	O
can	O
have	O
var	O
variables	O
)	O
;	O
in	O
Fortress	O
they	O
are	O
pure	O
behavior	O
.	O
Java	O
'	O
s	O
interfaces	O
with	O
default	O
methods	O
are	O
stateless	O
;	O
does	O
this	O
mean	O
they	O
are	O
not	O
traits	O
?	O
(	O
Hint	O
:	O
that	O
was	O
a	O
trick	O
question	O
.	O
)	O
Again	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
composed	O
through	O
linearization	O
;	O
if	O
class	O
A	O
extends	O
traits	O
X	O
and	O
Y	O
,	O
then	O
the	O
order	O
in	O
which	O
X	O
and	O
Y	O
are	O
mixed	O
in	O
determines	O
how	O
conflicts	O
between	O
X	O
and	O
Y	O
are	O
resolved	O
.	O
In	O
Java	O
,	O
this	O
linearization	O
mechanism	O
is	O
not	O
present	O
(	O
it	O
was	O
rejected	O
,	O
in	O
part	O
,	O
because	O
it	O
was	O
too	O
"	O
un	O
-	O
Java	O
-	O
like	O
"	O
.	O
)	O
The	O
proximate	O
reason	O
for	O
adding	O
default	O
methods	O
to	O
interfaces	O
was	O
to	O
support	O
interface	O
evolution	O
,	O
but	O
we	O
were	O
well	O
aware	O
that	O
we	O
were	O
going	O
beyond	O
that	O
.	O
Whether	O
you	O
consider	O
that	O
to	O
be	O
"	O
interface	O
evolution	O
+	O
+	O
"	O
or	O
"	O
traits	O
-	O
-	O
"	O
is	O
a	O
matter	O
of	O
personal	O
interpretation	O
.	O
So	O
,	O
to	O
answer	O
your	O
question	O
about	O
safety	O
.	O
.	O
.	O
so	O
long	O
as	O
you	O
stick	O
to	O
what	O
the	O
mechanism	O
actually	O
supports	O
,	O
rather	O
than	O
trying	O
to	O
wishfully	O
stretch	O
it	O
to	O
something	O
it	O
does	O
not	O
support	O
,	O
you	O
should	O
be	O
fine	O
.	O
A	O
key	O
design	O
goal	O
was	O
that	O
,	O
from	O
the	O
perspective	O
of	O
the	O
client	O
of	O
an	O
interface	O
,	O
default	O
methods	O
should	O
be	O
indistinguishable	O
from	O
"	O
regular	O
"	O
interface	O
methods	O
.	O
The	O
default	O
-	O
ness	O
of	O
a	O
method	O
,	O
therefore	O
,	O
is	O
only	O
interesting	O
to	O
the	O
designer	O
and	O
implementor	O
of	O
the	O
interface	O
.	O
Here	O
are	O
some	O
use	O
cases	O
that	O
are	O
well	O
within	O
the	O
design	O
goals	O
:	O
#	O
li	O
Interface	O
evolution	O
.	O
Here	O
,	O
we	O
are	O
adding	O
a	O
new	O
method	O
to	O
an	O
existing	O
interface	O
,	O
which	O
has	O
a	O
sensible	O
default	O
implementation	O
in	O
terms	O
of	O
existing	O
methods	O
on	O
that	O
interface	O
.	O
An	O
example	O
would	O
be	O
adding	O
the	O
forEach	O
method	O
to	O
Collection	B-api_mention
,	O
where	O
the	O
default	O
implementation	O
is	O
written	O
in	O
terms	O
of	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
li	O
"	O
Optional	O
"	O
methods	O
.	O
Here	O
,	O
the	O
designer	O
of	O
an	O
interface	O
is	O
saying	O
"	O
Implementors	O
need	O
not	O
implement	O
this	O
method	O
if	O
they	O
are	O
willing	O
to	O
live	O
with	O
the	O
limitations	O
in	O
functionality	O
that	O
entails	O
"	O
.	O
For	O
example	O
,	O
Iterator	B-api_mention
.	I-api_mention
remove	I-api_mention
was	O
given	O
a	O
default	O
which	O
throws	O
UnsupportedOperationException	O
;	O
since	O
the	O
vast	O
majority	O
of	O
implementations	O
of	O
Iterator	O
have	O
this	O
behavior	O
anyway	O
,	O
the	O
default	O
makes	O
this	O
method	O
essentially	O
optional	O
.	O
(	O
If	O
the	O
behavior	O
from	O
AbstractCollection	B-api_mention
were	O
expressed	O
as	O
defaults	O
on	O
Collection	B-api_mention
,	O
we	O
might	O
do	O
the	O
same	O
for	O
the	O
mutative	O
methods	O
.	O
)	O
#	O
li	O
Convenience	O
methods	O
.	O
These	O
are	O
methods	O
that	O
are	O
strictly	O
for	O
convenience	O
,	O
again	O
generally	O
implemented	O
in	O
terms	O
of	O
non	O
-	O
default	O
methods	O
on	O
the	O
class	O
.	O
The	O
logger	O
(	O
args	O
)	O
method	O
in	O
your	O
first	O
example	O
is	O
a	O
reasonable	O
illustration	O
of	O
this	O
.	O
#	O
li	O
Combinators	O
.	O
These	O
are	O
compositional	O
methods	O
that	O
instantiate	O
new	O
instances	O
of	O
the	O
interface	O
based	O
on	O
the	O
current	O
instance	O
.	O
For	O
example	O
,	O
the	O
methods	O
Predicate	B-api_mention
.	I-api_mention
and	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Comparator	B-api_mention
.	I-api_mention
thenComparing	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
examples	O
of	O
combinators	O
.	O
If	O
you	O
provide	O
a	O
default	O
implementation	O
,	O
you	O
should	O
also	O
provide	O
some	O
specification	O
for	O
the	O
default	O
(	O
in	O
the	O
JDK	O
,	O
we	O
use	O
the	O
@	O
implSpec	O
javadoc	O
tag	O
for	O
this	O
)	O
to	O
aid	O
implementors	O
in	O
understanding	O
whether	O
they	O
want	O
to	O
override	O
the	O
method	O
or	O
not	O
.	O
Some	O
defaults	O
,	O
like	O
convenience	O
methods	O
and	O
combinators	O
,	O
are	O
almost	O
never	O
overridden	O
;	O
others	O
,	O
like	O
optional	O
methods	O
,	O
are	O
often	O
overridden	O
.	O
You	O
need	O
to	O
provide	O
enough	O
specification	O
(	O
not	O
just	O
documentation	O
)	O
about	O
what	O
the	O
default	O
promises	O
to	O
do	O
,	O
so	O
the	O
implementor	O
can	O
make	O
a	O
sensible	O
decision	O
about	O
whether	O
they	O
need	O
to	O
override	O
it	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7353205	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
more	O
portable	O
way	O
.	O
exec	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
actually	O
calls	O
out	O
to	O
the	O
operating	O
system	O
to	O
execute	O
the	O
hostname	O
command	O
.	O
Here	O
are	O
a	O
couple	O
other	O
related	O
answers	O
on	O
SO	O
:	O
#	O
li	O
Java	O
current	O
machine	O
name	O
and	O
logged	O
in	O
user	O
?	O
#	O
li	O
Get	O
DNS	O
name	O
of	O
local	O
machine	O
as	O
seen	O
by	O
a	O
remote	O
machine	O
EDIT	O
:	O
You	O
should	O
take	O
a	O
look	O
at	O
A	O
.	O
H	O
.	O
'	O
s	O
answer	O
or	O
Arnout	O
Engelen	O
'	O
s	O
answer	O
for	O
details	O
on	O
why	O
this	O
might	O
not	O
work	O
as	O
expected	O
,	O
depending	O
on	O
your	O
situation	O
.	O
As	O
an	O
answer	O
for	O
this	O
person	O
who	O
specifically	O
requested	O
portable	O
,	O
I	O
still	O
think	O
getHostName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
fine	O
,	O
but	O
they	O
bring	O
up	O
some	O
good	O
points	O
that	O
should	O
be	O
considered	O
.	O
Question	O
-	O
5778658	O
,	O
answer	O
-	O
10768914	O
You	O
will	O
need	O
an	O
intermediate	O
class	O
which	O
will	O
buffer	O
between	O
.	O
Each	O
time	O
InputStream	B-api_mention
.	I-api_mention
read	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
the	O
buffering	O
class	O
will	O
fill	O
the	O
passed	O
in	O
byte	O
array	O
with	O
the	O
next	O
chunk	O
passed	O
in	O
from	O
OutputStream	B-api_mention
.	I-api_mention
write	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Since	O
the	O
sizes	O
of	O
the	O
chunks	O
may	O
not	O
be	O
the	O
same	O
,	O
the	O
adapter	O
class	O
will	O
need	O
to	O
store	O
a	O
certain	O
amount	O
until	O
it	O
has	O
enough	O
to	O
fill	O
the	O
read	O
buffer	O
and	O
/	O
or	O
be	O
able	O
to	O
store	O
up	O
any	O
buffer	O
overflow	O
.	O
This	O
article	O
has	O
a	O
nice	O
breakdown	O
of	O
a	O
few	O
different	O
approaches	O
to	O
this	O
problem	O
:	O
#	O
a	O
Question	O
-	O
22409102	O
,	O
answer	O
-	O
33501556	O
Double	B-api_mention
.	I-api_mention
equals	I-api_mention
distinguishes	O
±	O
0	O
.	O
0	O
in	O
Java	O
.	O
(	O
There	O
'	O
s	O
also	O
Float	B-api_mention
.	I-api_mention
equals	I-api_mention
.	O
)	O
I	O
'	O
m	O
a	O
bit	O
surprised	O
no	O
-	O
one	O
has	O
mentioned	O
these	O
,	O
as	O
they	O
seem	O
to	O
me	O
clearer	O
than	O
any	O
method	O
given	O
so	O
far	O
!	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
20130475	O
To	O
convert	O
a	O
Stream	B-api_mention
to	O
an	O
Iterable	B-api_mention
,	O
you	O
can	O
do	O
#	O
pre	O
To	O
pass	O
a	O
Stream	B-api_mention
to	O
a	O
method	O
that	O
expects	O
Iterable	B-api_mention
,	O
void	O
foo	O
(	O
args	O
)	O
simply	O
foo	O
(	O
args	O
)	O
however	O
it	O
probably	O
looks	O
funny	O
;	O
it	O
might	O
be	O
better	O
to	O
be	O
a	O
little	O
bit	O
more	O
explicit	O
foo	O
(	O
args	O
)	O
;	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32859065	O
You	O
can	O
create	O
a	O
Stream	B-api_mention
of	O
the	O
indices	O
using	O
an	O
IntStream	B-api_mention
and	O
then	O
convert	O
them	O
to	O
a	O
Map	O
:	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
map	O
=	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
boxed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
32714194	O
String	B-api_mention
is	O
a	O
special	O
case	O
in	O
Java	O
.	O
It	O
'	O
s	O
a	O
class	O
,	O
which	O
I	O
can	O
examine	O
in	O
the	O
source	O
code	O
,	O
but	O
it	O
also	O
has	O
its	O
own	O
infix	O
operator	O
+	O
,	O
which	O
seems	O
to	O
be	O
syntactic	O
sugar	O
for	O
StringBuilder	B-api_mention
.	O
For	O
example	O
,	O
StringLiteral	O
+	O
yourName	O
;	O
could	O
become	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
There	O
are	O
no	O
user	O
-	O
defined	O
operators	O
in	O
Java	O
,	O
so	O
where	O
is	O
+	O
specified	O
for	O
String	B-api_mention
?	O
Could	O
the	O
same	O
mechanism	O
be	O
used	O
to	O
make	O
additional	O
operators	O
,	O
such	O
as	O
for	O
vectors	O
?	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8727998	O
Another	O
point	O
is	O
the	O
time	O
complexity	O
of	O
insert	O
operations	O
.	O
For	O
a	O
list	O
insert	O
,	O
one	O
expects	O
a	O
complexity	O
of	O
O	O
(	O
1	O
)	O
.	O
But	O
this	O
could	O
not	O
be	O
guaranteed	O
with	O
a	O
sorted	O
list	O
.	O
And	O
the	O
most	O
important	O
point	O
is	O
that	O
lists	O
assume	O
nothing	O
about	O
their	O
elements	O
.	O
For	O
example	O
,	O
you	O
can	O
make	O
lists	O
of	O
things	O
that	O
do	O
not	O
implement	O
equals	B-api_mention
or	O
compare	B-api_mention
.	O
Question	O
-	O
11774099	O
,	O
answer	O
-	O
11774137	O
iterate	O
through	O
the	O
whole	O
65k	O
chars	O
and	O
ask	O
Character	B-api_mention
.	I-api_mention
isJavaIdentifierStart	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
answer	O
is	O
:	O
"	O
undertie	O
"	O
decimal	O
8255	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14492043	O
'	O
Random	O
'	O
is	O
more	O
than	O
just	O
about	O
getting	O
numbers	O
.	O
.	O
.	O
.	O
what	O
you	O
have	O
is	O
pseudo	O
-	O
random	O
If	O
pseudo	O
-	O
random	O
is	O
good	O
enough	O
for	O
your	O
purposes	O
,	O
then	O
sure	O
,	O
it	O
'	O
s	O
way	O
faster	O
(	O
and	O
XOR	O
+	O
Bitshift	O
will	O
be	O
faster	O
than	O
what	O
you	O
have	O
)	O
Rolf	O
Edit	O
:	O
OK	O
,	O
after	O
being	O
too	O
hasty	O
in	O
this	O
answer	O
,	O
let	O
me	O
answer	O
the	O
real	O
reason	O
why	O
your	O
code	O
is	O
faster	O
:	O
From	O
the	O
JavaDoc	O
for	O
Math	B-api_mention
.	I-api_mention
Random	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
blockquote	O
This	O
is	O
likely	O
why	O
your	O
code	O
is	O
faster	O
.	O
Question	O
-	O
31419029	O
,	O
answer	O
-	O
31419077	O
If	O
you	O
look	O
at	O
the	O
implementation	O
of	O
HashMap	B-api_mention
,	O
the	O
constructor	O
looks	O
like	O
:	O
#	O
pre	O
And	O
init	O
(	O
args	O
)	O
looks	O
like	O
:	O
#	O
pre	O
So	O
initialCapacity	O
doesn	O
'	O
t	O
actually	O
get	O
used	O
to	O
create	O
an	O
array	O
.	O
Where	O
does	O
it	O
get	O
used	O
?	O
Look	O
at	O
the	O
put	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
pre	O
When	O
doing	O
a	O
put	O
,	O
the	O
array	O
is	O
actually	O
created	O
.	O
I	O
didn	O
'	O
t	O
show	O
inflateTable	O
(	O
args	O
)	O
but	O
it	O
does	O
some	O
math	O
and	O
initializes	O
the	O
array	O
.	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
6548647	O
Static	O
field	O
holding	O
object	O
reference	O
[	O
esp	O
final	O
field	O
]	O
#	O
pre	O
Calling	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
lengthy	O
String	B-api_mention
#	O
pre	O
(	O
Unclosed	O
)	O
open	O
streams	O
(	O
file	O
,	O
network	O
etc	O
.	O
.	O
.	O
)	O
#	O
pre	O
Unclosed	O
connections	O
#	O
pre	O
Areas	O
that	O
are	O
unreachable	O
from	O
JVM	O
'	O
s	O
garbage	O
collector	O
,	O
such	O
as	O
memory	O
allocated	O
through	O
native	O
methods	O
In	O
web	O
applications	O
,	O
some	O
objects	O
are	O
stored	O
in	O
application	O
scope	O
until	O
the	O
application	O
is	O
explicitly	O
stopped	O
or	O
removed	O
.	O
getServletContext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Incorrect	O
or	O
inappropriate	O
JVM	O
options	O
,	O
such	O
as	O
the	O
noclassgc	O
option	O
on	O
IBM	O
JDK	O
that	O
prevents	O
unused	O
class	O
garbage	O
collection	O
See	O
IBM	O
jdk	O
settings	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175224	O
Since	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
is	O
not	O
a	O
final	O
method	O
of	O
Object	B-api_mention
,	O
yes	O
,	O
it	O
is	O
very	O
well	O
be	O
possible	O
in	O
a	O
different	O
situation	O
.	O
#	O
pre	O
This	O
question	O
,	O
however	O
,	O
specifically	O
says	O
that	O
these	O
are	O
primitive	O
wrappers	O
(	O
e	O
.	O
g	O
.	O
Integer	B-api_mention
,	O
Boolean	B-api_mention
,	O
etc	O
.	O
)	O
and	O
since	O
these	O
classes	O
are	O
final	O
,	O
you	O
cannot	O
extend	O
them	O
,	O
thus	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
36242382	O
You	O
can	O
use	O
Predicates	O
from	O
Eclipse	O
Collections	O
#	O
pre	O
If	O
you	O
can	O
'	O
t	O
change	O
the	O
strings	O
from	O
List	B-api_mention
:	O
#	O
pre	O
If	O
you	O
only	O
need	O
a	O
negation	O
of	O
String	B-api_mention
.	I-api_mention
isEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
can	O
also	O
use	O
StringPredicates	B-api_mention
.	I-api_mention
notEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Note	O
:	O
I	O
am	O
a	O
contributor	O
to	O
Eclipse	O
Collections	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26796725	O
Swapping	O
Only	O
One	O
Occurrence	O
If	O
there	O
is	O
only	O
one	O
occurrence	O
of	O
each	O
of	O
the	O
swapable	O
strings	O
in	O
the	O
input	O
,	O
you	O
can	O
do	O
the	O
following	O
:	O
Before	O
proceeding	O
to	O
any	O
replace	O
,	O
get	O
the	O
indices	O
of	O
the	O
occurrences	O
of	O
the	O
words	O
.	O
After	O
that	O
we	O
only	O
replace	O
the	O
word	O
found	O
at	O
these	O
indexes	O
,	O
and	O
not	O
all	O
occurrences	O
.	O
This	O
solution	O
uses	O
StringBuilder	B-api_mention
and	O
does	O
not	O
produce	O
intermediate	O
String	B-api_mention
s	O
like	O
String	B-api_mention
.	I-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
One	O
thing	O
to	O
note	O
:	O
if	O
the	O
swapable	O
words	O
have	O
different	O
lengths	O
,	O
after	O
the	O
first	O
replace	O
the	O
second	O
index	O
might	O
change	O
(	O
if	O
the	O
1st	O
word	O
occurs	O
before	O
the	O
2nd	O
)	O
exactly	O
with	O
the	O
difference	O
of	O
the	O
2	O
lengths	O
.	O
So	O
aligning	O
the	O
second	O
index	O
will	O
ensure	O
this	O
works	O
even	O
if	O
we	O
'	O
re	O
swapping	O
words	O
with	O
different	O
lengths	O
.	O
#	O
pre	O
Swapping	O
Arbitrary	O
Number	O
of	O
Occurrences	O
Analogous	O
to	O
the	O
previous	O
case	O
we	O
will	O
first	O
collect	O
the	O
indexes	O
(	O
occurrences	O
)	O
of	O
the	O
words	O
,	O
but	O
in	O
this	O
case	O
it	O
will	O
a	O
list	O
of	O
integers	O
for	O
each	O
word	O
,	O
not	O
just	O
one	O
int	O
.	O
For	O
this	O
we	O
will	O
use	O
the	O
following	O
utility	O
method	O
:	O
#	O
pre	O
And	O
using	O
this	O
we	O
will	O
replace	O
the	O
words	O
with	O
the	O
other	O
one	O
by	O
decreasing	O
index	O
(	O
which	O
might	O
require	O
to	O
alternate	O
between	O
the	O
2	O
swapable	O
words	O
)	O
so	O
that	O
we	O
won	O
'	O
t	O
even	O
have	O
to	O
correct	O
the	O
indices	O
after	O
a	O
replace	O
:	O
#	O
pre	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271668	O
I	O
'	O
m	O
assuming	O
this	O
is	O
happening	O
for	O
an	O
anonymous	O
class	O
.	O
When	O
you	O
create	O
an	O
anonymous	O
class	O
you	O
actually	O
create	O
a	O
class	O
that	O
extends	O
the	O
class	O
whose	O
name	O
you	O
got	O
.	O
The	O
"	O
cleaner	O
"	O
way	O
to	O
get	O
the	O
name	O
you	O
want	O
is	O
:	O
If	O
your	O
class	O
is	O
an	O
anonymous	O
inner	O
class	O
,	O
getSuperClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
give	O
you	O
the	O
class	O
that	O
it	O
was	O
created	O
from	O
.	O
If	O
you	O
created	O
it	O
from	O
an	O
interface	O
than	O
you	O
'	O
re	O
sort	O
of	O
SOL	O
because	O
the	O
best	O
you	O
can	O
do	O
is	O
getInterfaces	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
might	O
give	O
you	O
more	O
than	O
one	O
interface	O
.	O
The	O
"	O
hacky	O
"	O
way	O
is	O
to	O
just	O
get	O
the	O
name	O
with	O
getClassName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
use	O
a	O
regex	O
to	O
drop	O
the	O
$	O
1	O
.	O
Question	O
-	O
32164385	O
,	O
answer	O
-	O
32164423	O
#	O
blockquote	O
The	O
only	O
way	O
is	O
to	O
read	O
the	O
code	O
unfortunately	O
.	O
#	O
blockquote	O
The	O
common	O
convention	O
is	O
to	O
pass	O
an	O
object	O
which	O
cannot	O
be	O
modified	O
,	O
using	O
a	O
wrapper	O
if	O
needed	O
.	O
This	O
ensure	O
the	O
class	O
cannot	O
modify	O
the	O
object	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
readOnly	O
=	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
the	O
object	O
is	O
Cloneable	B-api_mention
,	O
you	O
can	O
also	O
use	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
another	O
common	O
approach	O
is	O
to	O
use	O
a	O
copy	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
readOnly	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
care	O
about	O
such	O
behaviour	O
,	O
unit	O
tests	O
can	O
show	O
whether	O
a	O
method	O
modifies	O
an	O
object	O
or	O
not	O
.	O
If	O
you	O
have	O
unit	O
tests	O
already	O
,	O
it	O
is	O
usually	O
one	O
or	O
two	O
lines	O
extra	O
to	O
check	O
for	O
this	O
.	O
Question	O
-	O
30081520	O
I	O
am	O
aware	O
that	O
it	O
is	O
better	O
to	O
call	O
the	O
equals	O
method	O
over	O
using	O
the	O
=	O
=	O
operator	O
(	O
see	O
this	O
question	O
)	O
.	O
I	O
want	O
two	O
strings	O
to	O
compare	O
as	O
equal	O
if	O
they	O
are	O
both	O
null	O
or	O
if	O
they	O
represent	O
the	O
same	O
string	O
.	O
Unfortunately	O
the	O
equals	B-api_mention
method	O
will	O
throw	O
an	O
NPE	O
if	O
the	O
strings	O
are	O
null	O
.	O
My	O
code	O
is	O
currently	O
:	O
#	O
pre	O
This	O
is	O
inelegant	O
.	O
What	O
is	O
the	O
correct	O
way	O
to	O
perform	O
this	O
test	O
?	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
32362691	O
For	O
completeness	O
,	O
using	O
the	O
Guava	O
library	O
,	O
you	O
'	O
d	O
do	O
:	O
Splitter	B-api_mention
.	I-api_mention
on	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Another	O
example	O
:	O
#	O
pre	O
Splitter	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
Iterable	O
,	O
so	O
if	O
you	O
need	O
a	O
List	O
,	O
wrap	O
it	O
in	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
above	O
.	O
Otherwise	O
just	O
go	O
with	O
the	O
Iterable	O
,	O
for	O
example	O
:	O
#	O
pre	O
Note	O
how	O
trimResults	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
handles	O
all	O
your	O
trimming	O
needs	O
without	O
having	O
to	O
tweak	O
regexes	O
for	O
corner	O
cases	O
,	O
as	O
with	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
your	O
project	O
uses	O
Guava	O
already	O
,	O
this	O
should	O
be	O
your	O
preferred	O
solution	O
.	O
See	O
Splitter	B-api_mention
documentation	O
in	O
Guava	O
User	O
Guide	O
or	O
the	O
javadocs	O
for	O
more	O
configuration	O
options	O
.	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29922469	O
My	O
guess	O
is	O
that	O
enums	O
are	O
limited	O
in	O
size	O
(	O
i	O
.	O
e	O
the	O
size	O
is	O
not	O
limited	O
by	O
language	O
but	O
limited	O
by	O
usage	O
)	O
and	O
thus	O
they	O
don	O
'	O
t	O
need	O
a	O
native	O
stream	O
api	O
.	O
Streams	O
are	O
very	O
good	O
when	O
you	O
have	O
to	O
manipulate	O
transform	O
and	O
recollect	O
the	O
elements	O
in	O
a	O
stream	O
;	O
these	O
are	O
not	O
common	O
uses	O
case	O
for	O
Enum	O
(	O
usually	O
you	O
iterate	O
over	O
enum	O
values	O
,	O
but	O
rarely	O
you	O
need	O
to	O
transform	O
,	O
map	O
and	O
collect	O
them	O
)	O
.	O
If	O
you	O
need	O
only	O
to	O
do	O
an	O
action	O
over	O
each	O
elements	O
perhaps	O
you	O
should	O
expose	O
only	O
a	O
forEach	B-api_mention
method	O
#	O
pre	O
Question	O
-	O
27845223	O
,	O
answer	O
-	O
27846417	O
Pavel	O
Horal	O
'	O
s	O
answer	O
is	O
nice	O
.	O
As	O
he	O
says	O
,	O
the	O
word	O
"	O
file	O
"	O
has	O
totally	O
different	O
(	O
practically	O
unrelated	O
)	O
meanings	O
in	O
URL	B-api_mention
#	O
getFile	B-api_mention
vs	O
java	O
.	O
io	O
.	O
File	O
-	O
may	O
be	O
that	O
'	O
s	O
part	O
of	O
the	O
confusion	O
.	O
Just	O
to	O
add	O
:	O
#	O
li	O
A	O
resource	O
in	O
Java	O
is	O
an	O
abstract	O
concept	O
,	O
a	O
source	O
of	O
data	O
that	O
can	O
be	O
read	O
.	O
The	O
location	O
(	O
or	O
address	O
)	O
of	O
a	O
resource	O
is	O
represented	O
in	O
Java	O
by	O
a	O
URL	B-api_mention
object	O
.	O
#	O
li	O
A	O
resource	O
can	O
correspond	O
to	O
a	O
regular	O
file	O
in	O
the	O
local	O
filesystem	O
(	O
specifically	O
,	O
when	O
its	O
URL	O
begins	O
with	O
file	O
:	O
/	O
/	O
)	O
.	O
But	O
a	O
resource	O
is	O
more	O
general	O
(	O
it	O
can	O
be	O
also	O
some	O
file	O
stored	O
in	O
a	O
jar	O
,	O
or	O
some	O
data	O
to	O
be	O
read	O
from	O
the	O
network	O
,	O
or	O
from	O
memory	O
,	O
or	O
.	O
.	O
.	O
)	O
.	O
And	O
it	O
'	O
s	O
also	O
more	O
limited	O
,	O
because	O
a	O
File	B-api_mention
(	O
besides	O
being	O
other	O
things	O
than	O
a	O
regular	O
file	O
:	O
a	O
directory	O
,	O
a	O
link	O
)	O
can	O
also	O
be	O
created	O
and	O
writen	O
to	O
.	O
#	O
li	O
Remember	O
in	O
Java	O
a	O
File	B-api_mention
object	O
does	O
not	O
really	O
represents	O
"	O
a	O
file	O
"	O
but	O
the	O
location	O
(	O
the	O
full	O
name	O
,	O
with	O
path	O
)	O
of	O
a	O
file	O
.	O
So	O
,	O
a	O
File	B-api_mention
object	O
allows	O
you	O
to	O
locate	O
(	O
and	O
open	O
)	O
a	O
file	O
,	O
as	O
a	O
URL	B-api_mention
allows	O
you	O
to	O
access	O
(	O
and	O
open	O
)	O
a	O
resource	O
.	O
(	O
There	O
is	O
no	O
Resource	B-api_mention
class	O
in	O
Java	O
to	O
represent	O
a	O
resource	O
,	O
but	O
neither	O
there	O
is	O
one	O
to	O
represent	O
a	O
file	O
!	O
once	O
more	O
:	O
File	B-api_mention
is	O
not	O
a	O
file	O
,	O
it	O
'	O
s	O
the	O
path	O
of	O
a	O
file	O
)	O
.	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877161	O
Integer	B-api_mention
objects	O
caches	O
between	O
-	O
128	O
and	O
127	O
of	O
256	O
Integer	B-api_mention
You	O
should	O
not	O
compare	O
object	O
references	O
with	O
=	O
=	O
or	O
!	O
=	O
.	O
You	O
should	O
use	O
.	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
instead	O
,	O
or	O
better	O
-	O
use	O
the	O
primitive	O
int	O
rather	O
than	O
Integer	B-api_mention
.	O
parseInt	B-api_mention
:	O
Parses	O
the	O
string	O
argument	O
as	O
a	O
signed	O
decimal	O
integer	O
.	O
The	O
characters	O
in	O
the	O
string	O
must	O
all	O
be	O
decimal	O
digits	O
,	O
except	O
that	O
the	O
first	O
character	O
may	O
be	O
an	O
ASCII	O
minus	O
sign	O
'	O
-	O
'	O
(	O
'	O
\	O
u002D	O
'	O
)	O
to	O
indicate	O
a	O
negative	O
value	O
.	O
The	O
resulting	O
integer	O
value	O
is	O
returned	O
,	O
exactly	O
as	O
if	O
the	O
argument	O
and	O
the	O
radix	O
10	O
were	O
given	O
as	O
arguments	O
to	O
the	O
parseInt	B-api_mention
(	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
int	O
)	O
method	O
.	O
valueOf	B-api_mention
Returns	O
an	O
Integer	B-api_mention
object	O
holding	O
the	O
value	O
extracted	O
from	O
the	O
specified	O
String	B-api_mention
when	O
parsed	O
with	O
the	O
radix	O
given	O
by	O
the	O
second	O
argument	O
.	O
The	O
first	O
argument	O
is	O
interpreted	O
as	O
representing	O
a	O
signed	O
integer	O
in	O
the	O
radix	O
specified	O
by	O
the	O
second	O
argument	O
,	O
exactly	O
as	O
if	O
the	O
arguments	O
were	O
given	O
to	O
the	O
parseInt	B-api_mention
(	I-api_mention
java	I-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
method	O
.	O
The	O
result	O
is	O
an	O
Integer	B-api_mention
object	O
that	O
represents	O
the	O
integer	O
value	O
specified	O
by	O
the	O
string	O
.	O
equivalent	O
to	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
radix	O
-	O
the	O
radix	O
to	O
be	O
used	O
in	O
interpreting	O
s	O
so	O
if	O
you	O
equal	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
integer	O
inbetween	O
-	O
128	O
to	O
127	O
it	O
returns	O
true	O
in	O
your	O
condition	O
for	O
lesser	O
than	O
-	O
128	O
and	O
greater	O
than	O
127	O
it	O
gives	O
false	O
Question	O
-	O
15156857	O
,	O
answer	O
-	O
15157021	O
You	O
must	O
use	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
methodReturningVoid	O
(	O
args	O
)	O
;	O
and	O
not	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
explained	O
in	O
the	O
documentation	O
Question	O
-	O
32632364	O
,	O
answer	O
-	O
32633199	O
It	O
shouldn	O
'	O
t	O
have	O
compiled	O
,	O
according	O
to	O
JLS	O
7	O
.	O
int	O
can	O
be	O
compared	O
to	O
boxed	O
numeric	O
types	O
,	O
i	O
.	O
e	O
.	O
Byte	B-api_mention
,	O
Short	B-api_mention
,	O
Character	B-api_mention
,	O
Integer	B-api_mention
,	O
Long	B-api_mention
,	O
Float	B-api_mention
,	O
Double	B-api_mention
.	O
But	O
that	O
is	O
all	O
.	O
And	O
if	O
comparison	O
is	O
between	O
int	O
and	O
say	O
Float	B-api_mention
,	O
Float	B-api_mention
will	O
be	O
unboxed	O
first	O
,	O
so	O
that	O
the	O
comparison	O
is	O
between	O
float	O
and	O
int	O
.	O
It	O
'	O
ll	O
make	O
no	O
sense	O
to	O
do	O
the	O
other	O
way	O
around	O
-	O
box	O
int	O
then	O
examine	O
the	O
identity	O
of	O
the	O
Integer	B-api_mention
(	O
with	O
a	O
Float	B-api_mention
no	O
less	O
)	O
.	O
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056821	O
Documentation	O
:	O
For	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
It	O
will	O
simply	O
return	O
the	O
entire	O
string	O
that	O
'	O
s	O
why	O
it	O
returns	O
1	O
.	O
For	O
the	O
second	O
case	O
,	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
will	O
discard	O
the	O
,	O
so	O
the	O
result	O
will	O
be	O
empty	O
.	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
silently	O
discards	O
trailing	O
separators	O
see	O
guava	O
StringsExplained	B-api_mention
too	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684822	O
You	O
can	O
'	O
t	O
just	O
take	O
the	O
returned	O
string	O
and	O
construct	O
a	O
string	O
from	O
it	O
.	O
.	O
.	O
it	O
'	O
s	O
not	O
a	O
byte	O
[	O
]	O
data	O
type	O
anymore	O
,	O
it	O
'	O
s	O
already	O
a	O
string	O
;	O
you	O
need	O
to	O
parse	O
it	O
.	O
For	O
example	O
:	O
#	O
pre	O
*	O
*	O
EDIT	O
*	O
*	O
You	O
get	O
an	O
hint	O
of	O
your	O
problem	O
in	O
your	O
question	O
,	O
where	O
you	O
say	O
"	O
Whatever	O
I	O
seem	O
to	O
try	O
I	O
end	O
up	O
getting	O
a	O
byte	O
array	O
which	O
looks	O
as	O
follows	O
.	O
.	O
.	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
"	O
,	O
because	O
91	O
is	O
the	O
byte	O
value	O
for	O
[	O
,	O
so	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
is	O
the	O
byte	O
array	O
of	O
the	O
string	O
"	O
[	O
-	O
45	O
,	O
1	O
,	O
16	O
,	O
.	O
.	O
.	O
"	O
string	O
.	O
The	O
method	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
a	O
String	B-api_mention
representation	O
of	O
the	O
specified	O
array	O
;	O
meaning	O
that	O
the	O
returned	O
value	O
will	O
not	O
be	O
a	O
array	O
anymore	O
.	O
For	O
example	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
s1	O
holds	O
the	O
string	O
representation	O
of	O
the	O
array	O
b1	O
,	O
while	O
s2	O
holds	O
the	O
string	O
representation	O
of	O
the	O
bytes	O
contained	O
in	O
b1	O
.	O
Now	O
,	O
in	O
your	O
problem	O
,	O
your	O
server	O
returns	O
a	O
string	O
similar	O
to	O
s1	O
,	O
therefore	O
to	O
get	O
the	O
array	O
representation	O
back	O
,	O
you	O
need	O
the	O
opposite	O
constructor	O
method	O
.	O
If	O
s2	O
.	B-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
opposite	O
of	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
need	O
to	O
find	O
the	O
opposite	O
of	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
thus	O
the	O
code	O
I	O
pasted	O
in	O
the	O
first	O
snippet	O
of	O
this	O
answer	O
.	O
Question	O
-	O
4709175	O
,	O
answer	O
-	O
4709892	O
Something	O
none	O
of	O
the	O
other	O
answers	O
have	O
covered	O
that	O
make	O
enums	O
particularly	O
powerful	O
are	O
the	O
ability	O
to	O
have	O
template	O
methods	O
.	O
Methods	O
can	O
be	O
part	O
of	O
the	O
base	O
enum	O
and	O
overridden	O
by	O
each	O
type	O
.	O
And	O
,	O
with	O
the	O
behavior	O
attached	O
to	O
the	O
enum	O
,	O
it	O
often	O
eliminates	O
the	O
need	O
for	O
if	O
-	O
else	O
constructs	O
or	O
switch	O
statements	O
as	O
this	O
blog	O
post	O
demonstrates	O
-	O
where	O
enum	O
.	O
method	O
(	O
args	O
)	O
does	O
what	O
originally	O
would	O
be	O
executed	O
inside	O
the	O
conditional	O
.	O
The	O
same	O
example	O
also	O
shows	O
the	O
use	O
of	O
static	O
imports	O
with	O
enums	O
as	O
well	O
producing	O
much	O
cleaner	O
DSL	O
like	O
code	O
.	O
Some	O
other	O
interesting	O
qualities	O
include	O
the	O
fact	O
that	O
enums	O
provide	O
implementation	O
for	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
implement	O
Serializable	B-api_mention
and	O
Comparable	B-api_mention
.	O
For	O
a	O
complete	O
rundown	O
of	O
all	O
that	O
enums	O
have	O
to	O
offer	O
I	O
highly	O
recommend	O
Bruce	O
Eckel	O
'	O
s	O
Thinking	O
in	O
Java	O
4th	O
edition	O
which	O
devotes	O
an	O
entire	O
chapter	O
to	O
the	O
topic	O
.	O
Particularly	O
illuminating	O
are	O
the	O
examples	O
involving	O
a	O
Rock	O
,	O
Paper	O
,	O
Scissors	O
(	O
i	O
.	O
e	O
.	O
RoShamBo	O
)	O
game	O
as	O
enums	O
.	O
Question	O
-	O
22463062	O
,	O
answer	O
-	O
28324294	O
You	O
can	O
also	O
use	O
LocalDate	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
LocalDateTime	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
String	B-api_mention
without	O
providing	O
it	O
with	O
a	O
pattern	O
,	O
if	O
the	O
String	B-api_mention
is	O
in	O
ISO	O
-	O
8601	O
format	O
.	O
for	O
example	O
,	O
#	O
pre	O
Output	O
,	O
#	O
pre	O
and	O
use	O
DateTimeFormatter	B-api_mention
only	O
if	O
you	O
have	O
to	O
deal	O
with	O
other	O
date	O
patterns	O
,	O
For	O
example	O
,	O
dd	O
MMM	O
uuuu	O
represents	O
the	O
day	O
of	O
the	O
month	O
(	O
two	O
digits	O
)	O
,	O
three	O
letters	O
of	O
the	O
name	O
of	O
the	O
month	O
(	O
Jan	O
,	O
Feb	O
,	O
Mar	O
,	O
.	O
.	O
.	O
)	O
,	O
and	O
a	O
four	O
-	O
digit	O
year	O
:	O
#	O
pre	O
Output	O
04	O
Aug	O
2015	O
parses	O
to	O
2015	O
-	O
08	O
-	O
04	O
also	O
remember	O
that	O
the	O
DateTimeFormatter	B-api_mention
object	O
is	O
bidirectional	O
;	O
it	O
can	O
both	O
parse	O
input	O
and	O
format	O
output	O
.	O
#	O
pre	O
Output	O
2015	O
-	O
08	O
-	O
04	O
formats	O
as	O
04	O
Aug	O
2015	O
(	O
see	O
complete	O
list	O
of	O
Patterns	O
for	O
Formatting	O
and	O
Parsing	O
DateFormatter	B-api_mention
)	O
#	O
pre	O
Question	O
-	O
29140402	O
I	O
have	O
a	O
class	O
defined	O
as	O
follows	O
:	O
#	O
pre	O
I	O
tried	O
to	O
print	O
an	O
instance	O
of	O
my	O
class	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
but	O
I	O
got	O
the	O
following	O
output	O
:	O
com	O
.	O
foo	O
.	O
Person	O
@	O
2f92e0f4	O
.	O
A	O
similar	O
thing	O
happened	O
when	O
I	O
tried	O
to	O
print	O
an	O
array	O
of	O
Person	O
objects	O
:	O
#	O
pre	O
I	O
got	O
the	O
output	O
:	O
[	O
Lcom	O
.	O
foo	O
.	O
Person	O
;	O
@	O
28a418fc	O
What	O
does	O
this	O
output	O
mean	O
?	O
How	O
do	O
I	O
change	O
this	O
output	O
so	O
it	O
contains	O
the	O
name	O
of	O
my	O
person	O
?	O
And	O
how	O
do	O
I	O
print	O
collections	O
of	O
my	O
objects	O
?	O
Note	O
:	O
this	O
is	O
intended	O
as	O
a	O
canonical	O
Q	O
&	O
A	O
about	O
this	O
subject	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
20793241	O
Environment	O
variables	O
may	O
also	O
provide	O
a	O
useful	O
means	O
-	O
-	O
COMPUTERNAME	O
on	O
Windows	O
,	O
HOSTNAME	O
on	O
most	O
modern	O
Unix	O
/	O
Linux	O
shells	O
.	O
See	O
:	O
#	O
a	O
I	O
'	O
m	O
using	O
these	O
as	O
"	O
supplementary	O
"	O
methods	O
to	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
since	O
as	O
several	O
people	O
point	O
out	O
,	O
that	O
function	O
doesn	O
'	O
t	O
work	O
in	O
all	O
environments	O
.	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
another	O
possible	O
supplement	O
.	O
At	O
this	O
stage	O
,	O
I	O
haven	O
'	O
t	O
used	O
it	O
.	O
#	O
pre	O
Question	O
-	O
28724850	O
Running	O
the	O
following	O
stream	O
example	O
in	O
Java8	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
yields	O
:	O
/	O
a	O
/	O
b	O
/	O
c	O
/	O
d	O
/	O
e	O
/	O
f	O
Which	O
is	O
-	O
of	O
course	O
-	O
no	O
surprise	O
.	O
Due	O
to	O
#	O
a	O
it	O
shouldn	O
'	O
t	O
matter	O
whether	O
the	O
stream	O
is	O
executed	O
sequentially	O
or	O
parallel	O
:	O
#	O
blockquote	O
AFAIK	O
reduce	O
(	O
args	O
)	O
is	O
deterministic	O
and	O
(	O
s1	O
,	O
s2	O
)	O
-	O
>	O
s1	O
+	O
StringLiteral	O
+	O
s2	O
is	O
associative	O
,	O
so	O
that	O
adding	O
parallel	O
(	O
args	O
)	O
should	O
yield	O
the	O
same	O
result	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
the	O
result	O
on	O
my	O
machine	O
is	O
:	O
/	O
a	O
/	O
/	O
b	O
/	O
/	O
c	O
/	O
/	O
d	O
/	O
/	O
e	O
/	O
/	O
f	O
What	O
'	O
s	O
wrong	O
here	O
?	O
BTW	O
:	O
using	O
(	O
the	O
preferred	O
)	O
.	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
yields	O
the	O
same	O
result	O
a	O
/	O
b	O
/	O
c	O
/	O
d	O
/	O
e	O
/	O
f	O
for	O
sequential	O
and	O
parallel	O
execution	O
.	O
JVM	O
details	O
:	O
#	O
pre	O
Question	O
-	O
29280857	O
,	O
answer	O
-	O
29282558	O
As	O
you	O
have	O
mentioned	O
there	O
will	O
be	O
1000	O
-	O
10000	O
concurrent	O
transaction	O
you	O
expecting	O
at	O
a	O
time	O
than	O
you	O
can	O
store	O
accounts	O
on	O
which	O
some	O
transaction	O
is	O
going	O
on	O
and	O
handle	O
concurrency	O
One	O
Solution	O
is	O
to	O
allow	O
system	O
to	O
create	O
only	O
one	O
object	O
of	O
particulate	O
account	O
id	O
,	O
means	O
that	O
if	O
you	O
want	O
to	O
make	O
a	O
transaction	O
between	O
account	O
"	O
123	O
"	O
and	O
"	O
456	O
"	O
than	O
your	O
thread	O
will	O
create	O
account	O
object	O
and	O
in	O
that	O
constructor	O
of	O
account	O
class	O
we	O
will	O
check	O
if	O
any	O
other	O
object	O
of	O
account	O
is	O
there	O
with	O
particulate	O
account	O
id	O
,	O
if	O
other	O
object	O
of	O
account	O
is	O
there	O
with	O
same	O
account	O
id	O
means	O
that	O
some	O
transaction	O
is	O
going	O
on	O
with	O
particulate	O
account	O
id	O
so	O
you	O
have	O
to	O
wait	O
to	O
get	O
the	O
account	O
object	O
.	O
So	O
we	O
can	O
do	O
transaction	O
between	O
"	O
123	O
"	O
and	O
"	O
456	O
"	O
and	O
at	O
same	O
time	O
we	O
can	O
do	O
transaction	O
between	O
"	O
abc	O
"	O
and	O
"	O
xyz	O
"	O
but	O
if	O
at	O
same	O
time	O
some	O
other	O
thread	O
will	O
try	O
to	O
create	O
object	O
of	O
account	O
"	O
123	O
"	O
than	O
system	O
will	O
say	O
please	O
wait	O
for	O
reference	O
you	O
can	O
see	O
below	O
code	O
Please	O
note	O
:	O
#	O
li	O
dont	O
forgote	O
to	O
remove	O
your	O
account	O
id	O
from	O
locks	O
map	O
by	O
call	O
to	O
freeAccount	O
(	O
BigDecimal	B-api_mention
accId	O
)	O
from	O
LockHolder	O
class	O
#	O
li	O
I	O
have	O
used	O
HasMap	O
instand	O
of	O
list	O
because	O
list	O
will	O
not	O
be	O
a	O
good	O
choice	O
when	O
you	O
are	O
randomly	O
removing	O
element	O
from	O
it	O
(	O
or	O
when	O
frequently	O
you	O
are	O
updating	O
it	O
)	O
#	O
pre	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28588854	O
The	O
correct	O
answer	O
is	O
a	O
simple	O
"	O
because	O
the	O
standard	O
(	O
and	O
the	O
docs	O
)	O
say	O
so	O
"	O
.	O
But	O
I	O
'	O
m	O
not	O
gonna	O
be	O
cynical	O
because	O
it	O
'	O
s	O
obvious	O
that	O
'	O
s	O
not	O
what	O
you	O
are	O
after	O
.	O
In	O
addition	O
to	O
the	O
other	O
answers	O
here	O
,	O
I	O
'	O
ll	O
try	O
to	O
relate	O
the	O
infinities	O
to	O
saturating	O
arithmetic	O
.	O
Other	O
answers	O
have	O
already	O
stated	O
that	O
the	O
reason	O
the	O
comparisons	O
on	O
NaNs	O
result	O
in	O
true	O
,	O
so	O
I	O
'	O
m	O
not	O
gonna	O
beat	O
a	O
dead	O
horse	O
.	O
Let	O
'	O
s	O
say	O
I	O
have	O
a	O
saturating	O
integer	O
that	O
represents	O
grayscale	O
colors	O
.	O
Why	O
am	O
I	O
using	O
saturating	O
arithmetic	O
?	O
Because	O
anything	O
brighter	O
than	O
white	O
is	O
still	O
white	O
,	O
and	O
anything	O
darker	O
than	O
black	O
is	O
still	O
black	O
(	O
except	O
orange	O
)	O
.	O
That	O
means	O
BLACK	O
-	O
x	O
=	O
=	O
BLACK	O
and	O
WHITE	O
+	O
x	O
=	O
=	O
WHITE	O
.	O
Makes	O
sense	O
?	O
Now	O
,	O
let	O
'	O
s	O
say	O
we	O
want	O
to	O
represent	O
those	O
grayscale	O
colors	O
with	O
a	O
(	O
signed	O
)	O
1s	O
complement	O
8	O
-	O
bit	O
integer	O
where	O
BLACK	O
=	O
=	O
-	O
127	O
and	O
WHITE	O
=	O
=	O
127	O
.	O
Why	O
1s	O
complement	O
?	O
Because	O
it	O
gives	O
us	O
a	O
signed	O
zero	O
like	O
IEEE	O
754	O
floating	O
point	O
.	O
And	O
,	O
because	O
we	O
are	O
using	O
saturating	O
arithmetic	O
,	O
-	O
127	O
-	O
x	O
=	O
=	O
-	O
127	O
and	O
127	O
+	O
x	O
=	O
=	O
127	O
.	O
How	O
does	O
this	O
relate	O
to	O
floating	O
point	O
infinities	O
?	O
Replace	O
the	O
integer	O
with	O
floating	O
point	O
,	O
BLACK	O
with	O
NEGATIVE	O
_	O
INFINITY	O
,	O
and	O
WHITE	O
with	O
POSITIVE	O
_	O
INFINITY	O
and	O
what	O
do	O
you	O
get	O
?	O
NEGATIVE	O
_	O
INFINITY	O
-	O
x	O
=	O
=	O
NEGATIVE	O
_	O
INFINITY	O
and	O
POSITIVE	O
_	O
INFINITY	O
+	O
x	O
=	O
=	O
POSITIVE	O
_	O
INFINITY	O
.	O
Since	O
you	O
used	O
POSITIVE	O
_	O
INFINITY	O
,	O
I	O
'	O
ll	O
use	O
it	O
also	O
.	O
First	O
we	O
need	O
a	O
class	O
to	O
represent	O
our	O
saturating	O
integer	O
-	O
based	O
color	O
;	O
let	O
'	O
s	O
call	O
it	O
SaturatedColor	O
and	O
assume	O
it	O
works	O
like	O
any	O
other	O
integer	O
in	O
Java	O
.	O
Now	O
,	O
let	O
'	O
s	O
take	O
your	O
code	O
and	O
replace	O
double	O
with	O
our	O
own	O
SaturatedColor	O
and	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
with	O
SaturatedColor	O
.	O
WHITE	O
:	O
#	O
pre	O
As	O
we	O
established	O
above	O
,	O
SaturatedColor	O
.	O
WHITE	O
(	O
just	O
WHITE	O
above	O
)	O
is	O
127	O
,	O
so	O
let	O
'	O
s	O
do	O
that	O
here	O
:	O
#	O
pre	O
Now	O
we	O
take	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
statements	O
you	O
used	O
and	O
replace	O
a	O
and	O
b	O
with	O
their	O
value	O
(	O
values	O
?	O
)	O
:	O
#	O
pre	O
It	O
should	O
be	O
obvious	O
what	O
this	O
will	O
print	O
.	O
Question	O
-	O
13744450	O
The	O
interviewer	O
asked	O
me	O
:	O
#	O
blockquote	O
I	O
wasn	O
'	O
t	O
aware	O
of	O
these	O
terms	O
.	O
So	O
,	O
when	O
I	O
came	O
back	O
to	O
home	O
,	O
then	O
I	O
started	O
looking	O
into	O
Google	O
about	O
Observer	B-api_mention
and	O
Observable	B-api_mention
and	O
found	O
some	O
point	O
from	O
different	O
resources	O
:	O
#	O
blockquote	O
I	O
found	O
this	O
example	O
:	O
#	O
pre	O
But	O
I	O
'	O
m	O
still	O
unable	O
to	O
figure	O
out	O
why	O
do	O
we	O
need	O
Observer	B-api_mention
and	O
Observable	B-api_mention
?	O
What	O
are	O
the	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
for	O
?	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32821016	O
If	O
you	O
look	O
at	O
IntFunction	B-api_mention
it	O
might	O
become	O
clearer	O
:	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
FunctionalInterface	O
.	O
It	O
represents	O
a	O
function	O
that	O
takes	O
an	O
int	O
and	O
returns	O
a	O
value	O
of	O
type	O
R	O
.	O
In	O
this	O
case	O
,	O
the	O
return	O
type	O
R	O
is	O
also	O
a	O
FunctionalInterface	O
,	O
namely	O
an	O
IntUnaryOperator	O
.	O
So	O
the	O
first	O
(	O
outer	O
)	O
function	O
itself	O
returns	O
a	O
function	O
.	O
In	O
this	O
case	O
:	O
When	O
applied	O
to	O
an	O
int	O
,	O
curriedAdd	O
is	O
supposed	O
to	O
return	O
a	O
function	O
that	O
again	O
takes	O
an	O
int	O
(	O
and	O
returns	O
again	O
int	O
,	O
because	O
that	O
'	O
s	O
what	O
IntUnaryOperator	O
does	O
)	O
.	O
In	O
functional	O
programming	O
it	O
is	O
common	O
to	O
write	O
the	O
type	O
of	O
a	O
function	O
as	O
param	O
-	O
>	O
return	O
_	O
value	O
and	O
you	O
see	O
exactly	O
that	O
here	O
.	O
So	O
the	O
type	O
of	O
curriedAdd	O
is	O
int	O
-	O
>	O
int	O
-	O
>	O
int	O
(	O
or	O
int	O
-	O
>	O
(	O
int	O
-	O
>	O
int	O
)	O
if	O
you	O
like	O
that	O
better	O
)	O
.	O
Java	O
8	O
'	O
s	O
lambda	O
syntax	O
goes	O
along	O
with	O
this	O
.	O
To	O
define	O
such	O
a	O
function	O
,	O
you	O
write	O
a	O
-	O
>	O
b	O
-	O
>	O
a	O
+	O
b	O
which	O
is	O
very	O
much	O
similar	O
to	O
actual	O
lambda	O
calculus	O
:	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
λ	O
b	O
a	O
+	O
b	O
is	O
a	O
function	O
that	O
takes	O
a	O
single	O
parameter	O
b	O
and	O
returns	O
a	O
value	O
(	O
the	O
sum	O
)	O
.	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
is	O
a	O
function	O
that	O
accepts	O
a	O
single	O
parameter	O
a	O
and	O
returns	O
another	O
function	O
of	O
a	O
single	O
parameter	O
.	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
returns	O
λ	O
b	O
a	O
+	O
b	O
with	O
a	O
set	O
to	O
the	O
parameter	O
value	O
.	O
Question	O
-	O
29945627	O
,	O
answer	O
-	O
29946155	O
The	O
syntax	O
you	O
'	O
re	O
after	O
is	O
possible	O
with	O
a	O
little	O
helper	O
function	O
that	O
converts	O
a	O
Runnable	B-api_mention
into	O
Action	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	O
you	O
can	O
place	O
it	O
in	O
Action	B-api_mention
for	O
example	O
)	O
:	O
#	O
pre	O
Question	O
-	O
7348711	O
Which	O
of	O
the	O
following	O
is	O
the	O
best	O
and	O
most	O
portable	O
way	O
to	O
get	O
the	O
hostname	O
of	O
the	O
current	O
computer	O
in	O
Java	O
?	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
vs	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
32323081	O
,	O
answer	O
-	O
32323305	O
Any	O
lambda	O
which	O
could	O
be	O
accepted	O
as	O
a	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
can	O
also	O
be	O
accepted	O
as	O
a	O
ThrowingSupplier	O
<	O
T	O
>	O
.	O
The	O
following	O
compiles	O
:	O
#	O
pre	O
Given	O
the	O
above	O
,	O
you	O
probably	O
don	O
'	O
t	O
need	O
this	O
,	O
but	O
if	O
foo	O
must	O
accept	O
a	O
non	O
-	O
throwing	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
you	O
can	O
always	O
wrap	O
the	O
Exception	O
-	O
throwing	O
method	O
in	O
a	O
method	O
which	O
launders	O
it	O
into	O
an	O
unchecked	O
Exception	O
:	O
#	O
pre	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
31931870	O
Collections	B-api_mention
.	I-api_mention
singletonList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
31202946	O
,	O
answer	O
-	O
31203218	O
You	O
can	O
of	O
course	O
choose	O
to	O
shoot	O
yourself	O
in	O
the	O
foot	O
,	O
but	O
that	O
doesn	O
'	O
t	O
mean	O
you	O
must	O
.	O
#	O
blockquote	O
Because	O
the	O
recommended	O
way	O
to	O
create	O
a	O
start	O
a	O
thread	O
is	O
not	O
to	O
subclass	O
Thread	B-api_mention
.	O
The	O
recommended	O
way	O
is	O
to	O
define	O
a	O
Runnable	B-api_mention
,	O
and	O
pass	O
it	O
as	O
argument	O
to	O
the	O
Thread	B-api_mention
constructor	O
:	O
#	O
pre	O
#	O
blockquote	O
Yes	O
and	O
no	O
.	O
You	O
can	O
'	O
t	O
replace	O
the	O
implementation	O
of	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
by	O
your	O
own	O
implementation	O
,	O
but	O
you	O
can	O
do	O
additional	O
things	O
in	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
if	O
you	O
want	O
:	O
#	O
pre	O
That	O
said	O
,	O
if	O
Java	O
was	O
redesigned	O
from	O
scratch	O
today	O
,	O
there	O
is	O
a	O
good	O
chance	O
the	O
design	O
would	O
be	O
different	O
.	O
Remember	O
that	O
this	O
class	O
dates	O
from	O
Java	O
1	O
.	O
0	O
,	O
and	O
is	O
still	O
backward	O
-	O
compatible	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
18481387	O
If	O
you	O
code	O
in	O
Android	O
,	O
there	O
is	O
SparseArray	B-api_mention
,	O
mapping	O
integer	O
to	O
object	O
.	O
Question	O
-	O
9510125	O
,	O
answer	O
-	O
9511880	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
In	O
Swing	O
when	O
you	O
create	O
Component	O
,	O
it	O
is	O
not	O
valid	O
i	O
.	O
e	O
.	O
it	O
'	O
s	O
valid	O
property	O
is	O
false	O
.	O
A	O
component	O
is	O
said	O
to	O
be	O
valid	O
,	O
when	O
it	O
'	O
s	O
width	O
,	O
height	O
,	O
location	O
and	O
stuff	O
has	O
been	O
determined	O
.	O
This	O
is	O
usually	O
done	O
by	O
calling	O
their	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
directly	O
or	O
indirectly	O
.	O
When	O
we	O
call	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
containers	O
,	O
it	O
will	O
validate	O
the	O
container	O
(	O
if	O
it	O
is	O
invalid	O
)	O
by	O
calling	O
its	O
doLayout	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
typically	O
will	O
invoke	O
the	O
LayoutManager	B-api_mention
.	O
Now	O
each	O
child	O
placed	O
on	O
this	O
container	O
will	O
be	O
validated	O
recursively	O
,	O
so	O
that	O
the	O
entire	O
tree	O
will	O
be	O
laid	O
out	O
and	O
will	O
become	O
valid	O
.	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
to	O
be	O
called	O
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
width	O
/	O
height	O
and	O
call	O
repaint	O
(	O
)	O
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
appearance	O
.	O
For	O
Example	O
,	O
If	O
your	O
JFrame	O
contains	O
a	O
JPanel	O
,	O
now	O
at	O
certain	O
point	O
of	O
time	O
you	O
removed	O
that	O
JPanel	O
and	O
inserted	O
a	O
new	O
one	O
in	O
it	O
'	O
s	O
place	O
,	O
depending	O
on	O
the	O
contents	O
of	O
the	O
newly	O
placed	O
JPanel	O
,	O
the	O
size	O
of	O
the	O
components	O
inside	O
the	O
JPanel	O
as	O
well	O
as	O
The	O
CONTAINER	O
itself	O
(	O
by	O
virtue	O
of	O
the	O
layout	O
manager	O
used	O
by	O
it	O
)	O
,	O
changes	O
.	O
Which	O
pushes	O
it	O
to	O
the	O
invalidate	O
state	O
.	O
So	O
in	O
order	O
to	O
validate	O
this	O
change	O
,	O
you	O
have	O
to	O
explicitly	O
call	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
This	O
thing	O
is	O
something	O
,	O
I	O
had	O
never	O
used	O
,	O
so	O
might	O
be	O
not	O
much	O
of	O
the	O
info	O
I	O
can	O
give	O
.	O
But	O
seems	O
like	O
the	O
scenario	O
presented	O
above	O
,	O
can	O
give	O
a	O
bit	O
of	O
hint	O
,	O
as	O
to	O
what	O
happens	O
in	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33147610	O
a	O
<	O
b	O
and	O
a	O
-	O
b	O
<	O
0	O
can	O
mean	O
two	O
different	O
things	O
.	O
Consider	O
the	O
following	O
code	O
:	O
#	O
pre	O
When	O
run	O
,	O
this	O
will	O
only	O
print	O
a	O
-	O
b	O
<	O
0	O
.	O
What	O
happens	O
is	O
that	O
a	O
<	O
b	O
is	O
clearly	O
false	O
,	O
but	O
a	O
-	O
b	O
overflows	O
and	O
becomes	O
-	O
1	O
,	O
which	O
is	O
negative	O
.	O
Now	O
,	O
having	O
said	O
that	O
,	O
consider	O
that	O
the	O
array	O
has	O
a	O
length	O
that	O
is	O
really	O
close	O
to	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
The	O
code	O
in	O
ArrayList	B-api_mention
goes	O
like	O
this	O
:	O
#	O
pre	O
oldCapacity	O
is	O
really	O
close	O
to	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
so	O
newCapacity	O
(	O
which	O
is	O
oldCapacity	O
+	O
0	O
.	O
5	O
*	O
oldCapacity	O
)	O
might	O
overflow	O
and	O
become	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
(	O
i	O
.	O
e	O
.	O
negative	O
)	O
.	O
Then	O
,	O
subtracting	O
minCapacity	O
underflows	O
back	O
into	O
a	O
positive	O
number	O
.	O
This	O
check	O
ensures	O
that	O
the	O
if	O
is	O
not	O
executed	O
.	O
If	O
the	O
code	O
were	O
written	O
as	O
if	O
(	O
args	O
)	O
,	O
it	O
would	O
be	O
true	O
in	O
this	O
case	O
(	O
since	O
newCapacity	O
is	O
negative	O
)	O
so	O
the	O
newCapacity	O
would	O
be	O
forced	O
to	O
minCapacity	O
regardless	O
of	O
the	O
oldCapacity	O
.	O
This	O
overflow	O
case	O
is	O
handled	O
by	O
the	O
next	O
if	O
.	O
When	O
newCapacity	O
has	O
overflowed	O
,	O
this	O
will	O
be	O
true	O
:	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
is	O
defined	O
as	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
8	O
and	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
(	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
8	O
)	O
>	O
0	O
is	O
true	O
.	O
The	O
newCapacity	O
is	O
therefore	O
rightly	O
handled	O
:	O
hugeCapacity	O
method	O
returns	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
or	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
NB	O
:	O
this	O
is	O
what	O
the	O
/	O
/	O
overflow	O
-	O
conscious	O
code	O
comment	O
in	O
this	O
method	O
is	O
saying	O
.	O
Question	O
-	O
11821801	O
,	O
answer	O
-	O
11821900	O
A	O
ReentrantLock	B-api_mention
is	O
unstructured	O
,	O
unlike	O
synchronized	O
constructs	O
-	O
-	O
i	O
.	O
e	O
.	O
you	O
don	O
'	O
t	O
need	O
to	O
use	O
a	O
block	O
structure	O
for	O
locking	O
and	O
can	O
even	O
hold	O
a	O
lock	O
across	O
methods	O
.	O
An	O
example	O
:	O
#	O
pre	O
Such	O
flow	O
is	O
impossible	O
to	O
represent	O
via	O
a	O
single	O
monitor	O
in	O
a	O
synchronized	B-api_mention
construct	O
.	O
Aside	O
from	O
that	O
,	O
ReentrantLock	B-api_mention
supports	O
lock	O
polling	O
and	O
interruptible	O
lock	O
waits	O
that	O
support	O
time	O
-	O
out	O
.	O
ReentrantLock	B-api_mention
also	O
has	O
support	O
for	O
configurable	O
fairness	O
policy	O
,	O
allowing	O
more	O
flexible	O
thread	O
scheduling	O
.	O
#	O
blockquote	O
ReentrantLock	B-api_mention
may	O
also	O
be	O
more	O
scalable	O
,	O
performing	O
much	O
better	O
under	O
higher	O
contention	O
.	O
You	O
can	O
read	O
more	O
about	O
this	O
here	O
.	O
This	O
claim	O
has	O
been	O
contested	O
,	O
however	O
;	O
see	O
the	O
following	O
comment	O
:	O
#	O
blockquote	O
When	O
should	O
you	O
use	O
ReentrantLock	B-api_mention
s	O
?	O
According	O
to	O
that	O
developerWorks	O
article	O
.	O
.	O
.	O
#	O
blockquote	O
Question	O
-	O
31202946	O
,	O
answer	O
-	O
31203252	O
#	O
blockquote	O
This	O
question	O
actually	O
boils	O
down	O
to	O
the	O
fact	O
that	O
you	O
should	O
always	O
prefer	O
composition	O
over	O
inheritance	O
.	O
If	O
the	O
Thread	B-api_mention
class	O
was	O
declared	O
as	O
abstract	O
,	O
the	O
language	O
would	O
have	O
to	O
provide	O
another	O
class	O
that	O
extended	O
from	O
it	O
which	O
programmers	O
could	O
use	O
to	O
create	O
a	O
Thread	B-api_mention
.	O
Your	O
question	O
would	O
then	O
be	O
about	O
why	O
this	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
is	O
not	O
abstract	O
.	O
If	O
the	O
language	O
did	O
not	O
provide	O
another	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
,	O
programmers	O
would	O
have	O
to	O
create	O
their	O
own	O
class	O
that	O
extend	O
s	O
from	O
Thread	B-api_mention
and	O
override	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
blockquote	O
The	O
only	O
possible	O
explanation	O
I	O
can	O
give	O
is	O
that	O
the	O
developers	O
of	O
the	O
language	O
saw	O
some	O
use	O
-	O
cases	O
for	O
overriding	O
start	O
when	O
the	O
class	O
was	O
introduced	O
to	O
the	O
JDK	O
.	O
The	O
first	O
version	O
of	O
Java	O
that	O
I	O
used	O
was	O
1	O
.	O
5	O
and	O
I	O
personally	O
have	O
not	O
come	O
across	O
a	O
use	O
-	O
case	O
where	O
I	O
found	O
the	O
need	O
to	O
override	O
start	O
.	O
As	O
JB	O
Nizet	O
stated	O
in	O
his	O
answer	O
#	O
blockquote	O
Question	O
-	O
28584669	O
Why	O
doesn	O
'	O
t	O
infinity	O
comparison	O
follow	O
the	O
logic	O
applied	O
to	O
NaNs	O
?	O
This	O
code	O
prints	O
out	O
false	O
three	O
times	O
:	O
#	O
pre	O
However	O
,	O
if	O
I	O
change	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
to	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
,	O
I	O
get	O
true	O
for	O
equality	O
,	O
but	O
false	O
for	O
the	O
greater	O
-	O
than	O
and	O
less	O
-	O
than	O
comparisons	O
:	O
#	O
pre	O
This	O
seems	O
dangerous	O
.	O
Assuming	O
that	O
infinite	O
values	O
result	O
from	O
overflows	O
,	O
I	O
imagine	O
it	O
'	O
s	O
more	O
likely	O
that	O
two	O
variables	O
that	O
ended	O
up	O
as	O
infinities	O
wouldn	O
'	O
t	O
actually	O
be	O
equal	O
in	O
perfect	O
arithmetic	O
.	O
Question	O
-	O
19235606	O
,	O
answer	O
-	O
19235863	O
You	O
should	O
almost	O
certainly	O
never	O
have	O
to	O
deal	O
with	O
Spliterator	B-api_mention
as	O
a	O
user	O
;	O
it	O
should	O
only	O
be	O
necessary	O
if	O
you	O
'	O
re	O
writing	O
Collection	B-api_mention
types	O
yourself	O
and	O
also	O
intending	O
to	O
optimize	O
parallelized	O
operations	O
on	O
them	O
.	O
For	O
what	O
it	O
'	O
s	O
worth	O
,	O
a	O
Spliterator	B-api_mention
is	O
a	O
way	O
of	O
operating	O
over	O
the	O
elements	O
of	O
a	O
collection	O
in	O
a	O
way	O
that	O
it	O
'	O
s	O
easy	O
to	O
split	O
off	O
part	O
of	O
the	O
collection	O
,	O
e	O
.	O
g	O
.	O
because	O
you	O
'	O
re	O
parallelizing	O
and	O
want	O
one	O
thread	O
to	O
work	O
on	O
one	O
part	O
of	O
the	O
collection	O
,	O
one	O
thread	O
to	O
work	O
on	O
another	O
part	O
,	O
etc	O
.	O
You	O
should	O
essentially	O
never	O
be	O
saving	O
values	O
of	O
type	O
Stream	B-api_mention
to	O
a	O
variable	O
,	O
either	O
.	O
Stream	B-api_mention
is	O
sort	O
of	O
like	O
an	O
Iterator	B-api_mention
,	O
in	O
that	O
it	O
'	O
s	O
a	O
one	O
-	O
time	O
-	O
use	O
object	O
that	O
you	O
'	O
ll	O
almost	O
always	O
use	O
in	O
a	O
fluent	O
chain	O
,	O
as	O
in	O
the	O
Javadoc	O
example	O
:	O
int	O
sum	O
=	O
widgets	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
mapToInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sum	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Collector	B-api_mention
is	O
the	O
most	O
generalized	O
,	O
abstract	O
possible	O
version	O
of	O
a	O
"	O
reduce	O
"	O
operation	O
a	O
la	O
map	O
/	O
reduce	O
;	O
in	O
particular	O
,	O
it	O
needs	O
to	O
support	O
parallelization	O
and	O
finalization	O
steps	O
.	O
Examples	O
of	O
Collector	B-api_mention
s	O
include	O
:	O
#	O
li	O
summing	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
reducing	I-api_mention
(	O
args	O
)	O
#	O
li	O
StringBuilder	B-api_mention
appending	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275761	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
defined	O
in	O
Object	B-api_mention
class	O
with	O
the	O
following	O
signature	O
:	O
#	O
blockquote	O
Since	O
it	O
is	O
not	O
defined	O
as	O
static	O
,	O
you	O
can	O
not	O
call	O
it	O
within	O
a	O
static	O
code	O
block	O
.	O
See	O
these	O
answers	O
for	O
more	O
information	O
:	O
Q1	O
,	O
Q2	O
,	O
Q3	O
.	O
If	O
you	O
'	O
re	O
in	O
a	O
static	O
context	O
,	O
then	O
you	O
have	O
to	O
use	O
the	O
class	O
literal	O
expression	O
to	O
get	O
the	O
Class	B-api_mention
,	O
so	O
you	O
basically	O
have	O
to	O
do	O
like	O
:	O
#	O
blockquote	O
This	O
type	O
of	O
expression	O
is	O
called	O
Class	B-api_mention
Literals	O
and	O
they	O
are	O
explained	O
in	O
Java	O
Language	O
Specification	O
Book	O
as	O
follows	O
:	O
#	O
blockquote	O
You	O
can	O
also	O
find	O
information	O
about	O
this	O
subject	O
on	O
API	O
documentation	O
for	O
Class	B-api_mention
.	O
Question	O
-	O
14534767	O
I	O
have	O
a	O
StringBuilder	B-api_mention
object	O
,	O
#	O
pre	O
Now	O
I	O
want	O
to	O
append	O
a	O
newline	O
character	O
to	O
the	O
StringBuilder	B-api_mention
.	O
How	O
can	O
I	O
do	O
it	O
?	O
result	O
.	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Does	O
not	O
work	O
.	O
So	O
,	O
I	O
was	O
thinking	O
about	O
writing	O
a	O
newline	O
using	O
Unicode	O
.	O
Will	O
this	O
help	O
?	O
If	O
so	O
,	O
how	O
can	O
I	O
add	O
one	O
?	O
Question	O
-	O
15182496	O
The	O
following	O
print	O
statement	O
would	O
print	O
"	O
hello	O
world	O
"	O
.	O
Could	O
anyone	O
explain	O
this	O
?	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
randomString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
looks	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
23079003	O
,	O
answer	O
-	O
23079174	O
You	O
can	O
use	O
the	O
overloaded	O
version	O
of	O
toArray	B-api_mention
,	O
as	O
the	O
following	O
:	O
#	O
pre	O
The	O
purpose	O
of	O
the	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
generator	O
is	O
to	O
convert	O
an	O
integer	O
,	O
the	O
size	O
of	O
the	O
array	O
,	O
to	O
a	O
new	O
array	O
.	O
Example	O
code	O
:	O
#	O
pre	O
Prints	O
:	O
#	O
pre	O
Another	O
option	O
is	O
to	O
use	O
a	O
method	O
reference	O
to	O
the	O
string	O
array	O
constructor	O
,	O
this	O
one	O
is	O
a	O
bit	O
more	O
tricky	O
.	O
Usage	O
is	O
easy	O
:	O
String	B-api_mention
[	O
]	O
stringArray	O
=	O
streamString	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
What	O
it	O
does	O
,	O
is	O
find	O
a	O
method	O
that	O
takes	O
in	O
an	O
integer	O
(	O
the	O
size	O
)	O
as	O
argument	O
,	O
and	O
returns	O
a	O
String	B-api_mention
[	O
]	O
,	O
which	O
is	O
exactly	O
what	O
(	O
one	O
of	O
the	O
overloads	O
of	O
)	O
new	O
String	B-api_mention
[	O
]	O
does	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29111023	O
Although	O
there	O
are	O
several	O
answers	O
already	O
,	O
and	O
an	O
accepted	O
answer	O
,	O
there	O
are	O
still	O
a	O
couple	O
points	O
missing	O
from	O
this	O
topic	O
.	O
First	O
,	O
the	O
consensus	O
seems	O
to	O
be	O
that	O
solving	O
this	O
problem	O
using	O
streams	O
is	O
merely	O
an	O
exercise	O
,	O
and	O
that	O
the	O
conventional	O
for	O
-	O
loop	O
approach	O
is	O
preferable	O
.	O
Second	O
,	O
the	O
answers	O
given	O
thus	O
far	O
have	O
overlooked	O
an	O
approach	O
using	O
array	O
or	O
vector	O
-	O
style	O
techniques	O
that	O
I	O
think	O
improves	O
the	O
streams	O
solution	O
considerably	O
.	O
First	O
,	O
here	O
'	O
s	O
a	O
conventional	O
solution	O
,	O
for	O
purposes	O
of	O
discussion	O
and	O
analysis	O
:	O
#	O
pre	O
This	O
is	O
mostly	O
straightforward	O
but	O
there	O
'	O
s	O
a	O
bit	O
of	O
subtlety	O
.	O
One	O
point	O
is	O
that	O
a	O
pending	O
sublist	O
from	O
prev	O
to	O
cur	O
is	O
always	O
open	O
.	O
When	O
we	O
encounter	O
null	O
we	O
close	O
it	O
,	O
add	O
it	O
to	O
the	O
result	O
list	O
,	O
and	O
advance	O
prev	O
.	O
After	O
the	O
loop	O
we	O
close	O
the	O
sublist	O
unconditionally	O
.	O
Another	O
observation	O
is	O
that	O
this	O
is	O
a	O
loop	O
over	O
indexes	O
,	O
not	O
over	O
the	O
values	O
themselves	O
,	O
thus	O
we	O
use	O
an	O
arithmetic	O
for	O
-	O
loop	O
instead	O
of	O
the	O
enhanced	O
"	O
for	O
-	O
each	O
"	O
loop	O
.	O
But	O
it	O
suggests	O
that	O
we	O
can	O
stream	O
using	O
the	O
indexes	O
to	O
generate	O
subranges	O
instead	O
of	O
streaming	O
over	O
values	O
and	O
putting	O
the	O
logic	O
into	O
the	O
collector	O
(	O
as	O
was	O
done	O
by	O
Joop	O
Eggen	O
'	O
s	O
proposed	O
solution	O
)	O
.	O
Once	O
we	O
'	O
ve	O
realized	O
that	O
,	O
we	O
can	O
see	O
that	O
each	O
position	O
of	O
null	O
in	O
the	O
input	O
is	O
the	O
delimiter	O
for	O
a	O
sublist	O
:	O
it	O
'	O
s	O
the	O
right	O
end	O
of	O
the	O
sublist	O
to	O
the	O
left	O
,	O
and	O
it	O
(	O
plus	O
one	O
)	O
is	O
the	O
left	O
end	O
of	O
the	O
sublist	O
to	O
the	O
right	O
.	O
If	O
we	O
can	O
handle	O
the	O
edge	O
cases	O
,	O
it	O
leads	O
to	O
an	O
approach	O
where	O
we	O
find	O
the	O
indexes	O
at	O
which	O
null	O
elements	O
occur	O
,	O
map	O
them	O
to	O
sublists	O
,	O
and	O
collect	O
the	O
sublists	O
.	O
The	O
resulting	O
code	O
is	O
as	O
follows	O
:	O
#	O
pre	O
Getting	O
the	O
indexes	O
at	O
which	O
null	O
occurs	O
is	O
pretty	O
easy	O
.	O
The	O
stumbling	O
block	O
is	O
adding	O
-	O
1	O
at	O
the	O
left	O
and	O
size	O
at	O
the	O
right	O
end	O
.	O
I	O
'	O
ve	O
opted	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
to	O
do	O
the	O
appending	O
and	O
then	O
flatMapToInt	O
to	O
flatten	O
them	O
out	O
.	O
(	O
I	O
tried	O
several	O
other	O
approaches	O
but	O
this	O
one	O
seemed	O
like	O
the	O
cleanest	O
.	O
)	O
It	O
'	O
s	O
a	O
bit	O
more	O
convenient	O
to	O
use	O
arrays	O
for	O
the	O
indexes	O
here	O
.	O
First	O
,	O
the	O
notation	O
for	O
accessing	O
an	O
array	O
is	O
nicer	O
than	O
for	O
a	O
List	B-api_mention
:	O
indexes	O
[	O
i	O
]	O
vs	O
.	O
indexes	O
.	B-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Second	O
,	O
using	O
an	O
array	O
avoids	O
boxing	O
.	O
At	O
this	O
point	O
,	O
each	O
index	O
value	O
in	O
the	O
array	O
(	O
except	O
for	O
the	O
last	O
)	O
is	O
one	O
less	O
than	O
the	O
beginning	O
position	O
of	O
a	O
sublist	O
.	O
The	O
index	O
to	O
its	O
immediate	O
right	O
is	O
the	O
end	O
of	O
the	O
sublist	O
.	O
We	O
simply	O
stream	O
over	O
the	O
array	O
and	O
map	O
each	O
pair	O
of	O
indexes	O
into	O
a	O
sublist	O
and	O
collect	O
the	O
output	O
.	O
Discussion	O
The	O
streams	O
approach	O
is	O
slightly	O
shorter	O
than	O
the	O
for	O
-	O
loop	O
version	O
,	O
but	O
it	O
'	O
s	O
denser	O
.	O
The	O
for	O
-	O
loop	O
version	O
is	O
familiar	O
,	O
because	O
we	O
do	O
this	O
stuff	O
in	O
Java	O
all	O
the	O
time	O
,	O
but	O
if	O
you	O
'	O
re	O
not	O
already	O
aware	O
of	O
what	O
this	O
loop	O
is	O
supposed	O
to	O
be	O
doing	O
,	O
it	O
'	O
s	O
not	O
obvious	O
.	O
You	O
might	O
have	O
to	O
simulate	O
a	O
few	O
loop	O
executions	O
before	O
you	O
figure	O
out	O
what	O
prev	O
is	O
doing	O
and	O
why	O
the	O
open	O
sublist	O
has	O
to	O
be	O
closed	O
after	O
the	O
end	O
of	O
the	O
loop	O
.	O
(	O
I	O
initially	O
forgot	O
to	O
have	O
it	O
,	O
but	O
I	O
caught	O
this	O
in	O
testing	O
.	O
)	O
The	O
streams	O
approach	O
is	O
,	O
I	O
think	O
,	O
easier	O
to	O
conceptualize	O
what	O
'	O
s	O
going	O
on	O
:	O
get	O
a	O
list	O
(	O
or	O
an	O
array	O
)	O
that	O
indicates	O
the	O
boundaries	O
between	O
sublists	O
.	O
That	O
'	O
s	O
an	O
easy	O
streams	O
two	O
-	O
liner	O
.	O
The	O
difficulty	O
,	O
as	O
I	O
mentioned	O
above	O
,	O
is	O
finding	O
a	O
way	O
to	O
tack	O
the	O
edge	O
values	O
onto	O
the	O
ends	O
.	O
If	O
there	O
were	O
a	O
better	O
syntax	O
for	O
doing	O
this	O
,	O
e	O
.	O
g	O
.	O
,	O
/	O
/	O
Java	O
plus	O
pidgin	O
Scala	O
int	O
[	O
]	O
indexes	O
=	O
[	O
-	O
1	O
]	O
+	O
+	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
+	O
+	O
[	O
input	O
.	O
size	O
(	O
args	O
)	O
]	O
;	O
it	O
would	O
make	O
things	O
a	O
lot	O
less	O
cluttered	O
.	O
(	O
What	O
we	O
really	O
need	O
is	O
array	O
or	O
list	O
comprehension	O
.	O
)	O
Once	O
you	O
have	O
the	O
indexes	O
,	O
it	O
'	O
s	O
a	O
simple	O
matter	O
to	O
map	O
them	O
into	O
actual	O
sublists	O
and	O
collect	O
them	O
into	O
the	O
result	O
list	O
.	O
And	O
of	O
course	O
this	O
is	O
safe	O
when	O
run	O
in	O
parallel	O
.	O
UPDATE	O
2016	O
-	O
02	O
-	O
06	O
Here	O
'	O
s	O
a	O
nicer	O
way	O
to	O
create	O
the	O
array	O
of	O
sublist	O
indexes	O
.	O
It	O
'	O
s	O
based	O
on	O
the	O
same	O
principles	O
,	O
but	O
it	O
adjusts	O
the	O
index	O
range	O
and	O
adds	O
some	O
conditions	O
to	O
the	O
filter	O
to	O
avoid	O
having	O
to	O
concatenate	O
and	O
flatmap	O
the	O
indexes	O
.	O
#	O
pre	O
Question	O
-	O
26318569	O
,	O
answer	O
-	O
26319364	O
You	O
'	O
re	O
nesting	O
mocking	O
inside	O
of	O
mocking	O
.	O
You	O
'	O
re	O
calling	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
does	O
some	O
mocking	O
,	O
before	O
you	O
'	O
ve	O
finished	O
the	O
mocking	O
for	O
MyMainModel	B-api_mention
.	O
Mockito	O
doesn	O
'	O
t	O
like	O
it	O
when	O
you	O
do	O
this	O
.	O
Replace	O
#	O
pre	O
with	O
#	O
pre	O
To	O
understand	O
why	O
this	O
causes	O
a	O
problem	O
,	O
you	O
need	O
to	O
know	O
a	O
little	O
about	O
how	O
Mockito	B-api_mention
works	O
,	O
and	O
also	O
be	O
aware	O
in	O
what	O
order	O
expressions	O
and	O
statements	O
are	O
evaluated	O
in	O
Java	O
.	O
Mockito	B-api_mention
can	O
'	O
t	O
read	O
your	O
source	O
code	O
,	O
so	O
in	O
order	O
to	O
figure	O
out	O
what	O
you	O
are	O
asking	O
it	O
to	O
do	O
,	O
it	O
relies	O
a	O
lot	O
on	O
static	O
state	O
.	O
When	O
you	O
call	O
a	O
method	O
on	O
a	O
mock	B-api_mention
object	O
,	O
Mockito	B-api_mention
records	O
the	O
details	O
of	O
the	O
call	O
in	O
an	O
internal	O
list	O
of	O
invocations	O
.	O
The	O
when	O
method	O
reads	O
the	O
last	O
of	O
these	O
invocations	O
off	O
the	O
list	O
and	O
records	O
this	O
invocation	O
in	O
the	O
OngoingStubbing	B-api_mention
object	O
it	O
returns	O
.	O
The	O
line	O
Mockito	B-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
thenReturn	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
causes	O
the	O
following	O
interactions	O
with	O
Mockito	B-api_mention
:	O
#	O
li	O
Mock	B-api_mention
method	O
mainModel	B-api_mention
.	I-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
#	O
li	O
Static	O
method	O
when	O
is	O
called	O
,	O
#	O
li	O
Method	O
thenReturn	O
is	O
called	O
on	O
the	O
OngoingStubbing	B-api_mention
object	O
returned	O
by	O
the	O
when	O
method	O
.	O
The	O
thenReturn	O
method	O
can	O
then	O
instruct	O
the	O
mock	O
it	O
received	O
via	O
the	O
OngoingStubbing	B-api_mention
method	O
to	O
handle	O
any	O
suitable	O
call	O
to	O
the	O
getList	O
method	O
to	O
return	O
someModelList	O
.	O
In	O
fact	O
,	O
as	O
Mockito	B-api_mention
can	O
'	O
t	O
see	O
your	O
code	O
,	O
you	O
can	O
also	O
write	O
your	O
mocking	O
as	O
follows	O
:	O
#	O
pre	O
This	O
style	O
is	O
somewhat	O
less	O
clear	O
to	O
read	O
,	O
especially	O
since	O
in	O
this	O
case	O
the	O
null	O
has	O
to	O
be	O
casted	O
,	O
but	O
it	O
generates	O
the	O
same	O
sequence	O
of	O
interactions	O
with	O
Mockito	B-api_mention
and	O
will	O
achieve	O
the	O
same	O
result	O
as	O
the	O
line	O
above	O
.	O
However	O
,	O
the	O
line	O
Mockito	B-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
thenReturn	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
causes	O
the	O
following	O
interactions	O
with	O
Mockito	B-api_mention
:	O
#	O
li	O
Mock	B-api_mention
method	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
#	O
li	O
Static	O
method	O
when	O
is	O
called	O
,	O
#	O
li	O
A	O
new	O
mock	O
of	O
SomeModel	O
is	O
created	O
(	O
inside	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
,	O
#	O
li	O
Mock	B-api_mention
method	O
model	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
At	O
this	O
point	O
Mockito	B-api_mention
gets	O
confused	O
.	O
It	O
thought	O
you	O
were	O
mocking	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
now	O
you	O
'	O
re	O
telling	O
it	O
you	O
want	O
to	O
mock	O
the	O
model	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
To	O
Mockito	B-api_mention
,	O
it	O
looks	O
like	O
you	O
'	O
re	O
doing	O
the	O
following	O
:	O
#	O
pre	O
This	O
looks	O
silly	O
to	O
Mockito	B-api_mention
as	O
it	O
can	O
'	O
t	O
be	O
sure	O
what	O
you	O
'	O
re	O
doing	O
with	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Note	O
that	O
we	O
did	O
not	O
get	O
to	O
the	O
thenReturn	O
method	O
call	O
,	O
as	O
the	O
JVM	O
needs	O
to	O
evaluate	O
the	O
parameters	O
to	O
this	O
method	O
before	O
it	O
can	O
call	O
the	O
method	O
.	O
In	O
this	O
case	O
,	O
this	O
means	O
calling	O
the	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Generally	O
it	O
is	O
a	O
bad	O
design	O
decision	O
to	O
rely	O
on	O
static	O
state	O
,	O
as	O
Mockito	B-api_mention
does	O
,	O
because	O
it	O
can	O
lead	O
to	O
cases	O
where	O
the	O
Principle	O
of	O
Least	O
Astonishment	O
is	O
violated	O
.	O
However	O
,	O
Mockito	B-api_mention
'	I-api_mention
s	I-api_mention
design	O
does	O
make	O
for	O
clear	O
and	O
expressive	O
mocking	O
,	O
even	O
if	O
it	O
leads	O
to	O
astonishment	O
sometimes	O
.	O
Finally	O
,	O
recent	O
versions	O
of	O
Mockito	B-api_mention
add	O
an	O
extra	O
line	O
to	O
the	O
error	O
message	O
above	O
.	O
This	O
extra	O
line	O
indicates	O
you	O
may	O
be	O
in	O
the	O
same	O
situation	O
as	O
this	O
question	O
:	O
#	O
blockquote	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
10827900	O
In	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
the	O
replace	O
method	O
either	O
takes	O
a	O
pair	O
of	O
char	O
'	O
s	O
or	O
a	O
pair	O
of	O
CharSequence	B-api_mention
'	O
s	O
(	O
of	O
which	O
String	O
is	O
a	O
subclass	O
,	O
so	O
it	O
'	O
ll	O
happily	O
take	O
a	O
pair	O
of	O
String	O
'	O
s	O
)	O
.	O
The	O
replace	O
method	O
will	O
replace	O
all	O
occurrences	O
of	O
a	O
char	O
or	O
CharSequence	B-api_mention
.	O
On	O
the	O
other	O
hand	O
,	O
both	O
String	O
arguments	O
to	O
replaceFirst	B-api_mention
and	O
replaceAll	B-api_mention
are	O
regular	O
expressions	O
(	O
regex	O
)	O
.	O
Using	O
the	O
wrong	O
function	O
can	O
lead	O
to	O
subtle	O
bugs	O
.	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
9481939	O
You	O
can	O
use	O
java	B-api_mention
.	I-api_mention
net	I-api_mention
.	I-api_mention
InetAddress	I-api_mention
API	O
.	O
Try	O
this	O
:	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostAddress	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
32653133	O
This	O
is	O
looks	O
like	O
a	O
good	O
fit	O
for	O
pattern	O
matching	O
and	O
a	O
more	O
traditional	O
Option	O
interface	O
with	O
Some	O
and	O
None	O
implementations	O
(	O
such	O
as	O
those	O
in	O
Javaslang	O
,	O
FunctionalJava	O
)	O
or	O
a	O
lazy	O
Maybe	O
implementation	O
in	O
cyclops	O
-	O
react	O
.	O
I	O
'	O
m	O
the	O
author	O
of	O
this	O
library	O
.	O
With	O
cyclops	O
-	O
react	O
you	O
can	O
also	O
use	O
structural	O
pattern	O
matching	O
on	O
JDK	O
types	O
.	O
For	O
Optional	B-api_mention
you	O
can	O
match	O
on	O
the	O
present	O
and	O
absent	O
cases	O
via	O
the	O
visitor	O
pattern	O
.	O
it	O
would	O
look	O
something	O
like	O
this	O
-	O
#	O
pre	O
Question	O
-	O
29333689	O
The	O
following	O
is	O
taken	O
from	O
a	O
job	O
interview	O
:	O
#	O
blockquote	O
I	O
thought	O
about	O
using	O
an	O
HashSet	B-api_mention
,	O
but	O
it	O
might	O
complicate	O
everything	O
.	O
.	O
.	O
Any	O
ideas	O
of	O
a	O
simple	O
solution	O
?	O
Question	O
-	O
4709175	O
,	O
answer	O
-	O
4709284	O
#	O
blockquote	O
You	O
can	O
use	O
an	O
Enum	B-api_mention
to	O
represent	O
a	O
smallish	O
fixed	O
set	O
of	O
constants	O
or	O
an	O
internal	O
class	O
mode	O
while	O
increasing	O
readability	O
.	O
Also	O
,	O
Enums	O
can	O
enforce	O
a	O
certain	O
rigidity	O
when	O
used	O
in	O
method	O
parameters	O
.	O
They	O
offer	O
the	O
interesting	O
possibility	O
of	O
passing	O
information	O
to	O
a	O
constructor	O
like	O
in	O
the	O
Planets	O
example	O
on	O
Oracle	O
'	O
s	O
site	O
and	O
,	O
as	O
you	O
'	O
ve	O
discovered	O
,	O
also	O
allow	O
a	O
simple	O
way	O
to	O
create	O
a	O
singleton	O
pattern	O
.	O
ex	O
:	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
reads	O
better	O
than	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
enforces	O
the	O
use	O
of	O
fixed	O
set	O
of	O
values	O
shown	O
in	O
an	O
IDE	O
when	O
you	O
add	O
the	O
.	O
separator	O
instead	O
of	O
all	O
integers	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
31707746	O
One	O
of	O
most	O
upleasing	O
functional	O
forEach	B-api_mention
'	O
s	O
limitations	O
is	O
lack	O
of	O
checked	O
exceptions	O
support	O
.	O
One	O
possible	O
workaround	O
is	O
to	O
replace	O
terminal	O
forEach	B-api_mention
with	O
plain	O
old	O
foreach	O
loop	O
:	O
#	O
pre	O
Here	O
is	O
list	O
of	O
most	O
popular	O
questions	O
with	O
other	O
workarounds	O
on	O
checked	O
exception	O
handling	O
within	O
lambdas	O
and	O
streams	O
:	O
Java	O
8	O
Lambda	O
function	O
that	O
throws	O
exception	O
?	O
Java	O
8	O
:	O
Lambda	O
-	O
Streams	O
,	O
Filter	O
by	O
Method	O
with	O
Exception	B-api_mention
How	O
can	O
I	O
throw	O
CHECKED	O
exceptions	O
from	O
inside	O
Java	O
8	O
streams	O
?	O
Java	O
8	O
:	O
Mandatory	O
checked	O
exceptions	O
handling	O
in	O
lambda	O
expressions	O
.	O
Why	O
mandatory	O
,	O
not	O
optional	O
?	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31871515	O
Autoboxing	O
is	O
absolutely	O
implemented	O
using	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
in	O
the	O
OpenJDK	O
.	O
If	O
that	O
'	O
s	O
your	O
implementation	O
,	O
read	O
on	O
.	O
.	O
.	O
if	O
not	O
,	O
skip	O
to	O
below	O
.	O
#	O
pre	O
Java	O
documentation	O
states	O
that	O
Boolean	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
returns	O
Boolean	B-api_mention
.	I-api_mention
TRUE	I-api_mention
or	O
Boolean	B-api_mention
.	I-api_mention
FALSE	I-api_mention
,	O
therefore	O
your	O
reference	O
comparisons	O
in	O
these	O
cases	O
will	O
succeed	O
.	O
(	O
(	O
Integer	B-api_mention
)	O
1	O
)	O
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
For	O
this	O
particular	O
example	O
,	O
under	O
the	O
OpenJDK	O
implementation	O
with	O
default	O
settings	O
,	O
it	O
will	O
probably	O
work	O
by	O
virtue	O
of	O
the	O
fact	O
that	O
you	O
picked	O
a	O
value	O
<	O
128	O
which	O
is	O
cached	O
at	O
startup	O
(	O
although	O
this	O
can	O
be	O
overridden	O
as	O
a	O
commandline	O
arg	O
)	O
.	O
It	O
may	O
also	O
work	O
for	O
larger	O
values	O
if	O
it	O
'	O
s	O
frequently	O
used	O
enough	O
to	O
be	O
cached	O
.	O
Unless	O
you	O
'	O
re	O
working	O
under	O
"	O
safe	O
"	O
assumptions	O
about	O
the	O
Integer	B-api_mention
cache	O
,	O
don	O
'	O
t	O
expect	O
the	O
reference	O
comparison	O
to	O
be	O
an	O
equality	O
.	O
Long	B-api_mention
,	O
Short	B-api_mention
,	O
Character	B-api_mention
and	O
Byte	B-api_mention
incidentally	O
implement	O
this	O
caching	O
too	O
,	O
but	O
unlike	O
Integer	B-api_mention
,	O
it	O
'	O
s	O
not	O
tunable	O
.	O
Byte	O
will	O
always	O
work	O
if	O
you	O
'	O
re	O
comparing	O
autobox	O
/	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
references	O
since	O
obviously	O
,	O
you	O
can	O
'	O
t	O
go	O
out	O
of	O
range	O
.	O
Float	B-api_mention
and	O
Double	B-api_mention
will	O
unsurprisingly	O
always	O
create	O
a	O
new	O
instance	O
.	O
Now	O
,	O
in	O
purely	O
generic	O
terms	O
?	O
See	O
this	O
section	O
of	O
the	O
JLS	O
-	O
you	O
MUST	O
be	O
given	O
equal	O
references	O
for	O
boolean	O
and	O
any	O
int	O
or	O
char	O
within	O
the	O
-	O
128	O
to	O
127	O
range	O
.	O
There	O
are	O
no	O
guarantees	O
for	O
anything	O
else	O
.	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894356	O
Looks	O
like	O
niether	O
is	O
faster	O
or	O
slower	O
#	O
pre	O
For	O
long	O
strings	O
I	O
'	O
ll	O
chose	O
the	O
first	O
one	O
.	O
Why	O
copy	O
around	O
long	O
strings	O
?	O
Documentations	O
says	O
:	O
#	O
blockquote	O
/	O
/	O
Edit	O
1	O
I	O
'	O
ve	O
changed	O
the	O
test	O
to	O
trick	O
JIT	O
optimisation	O
.	O
/	O
/	O
Edit	O
2	O
Repeat	O
test	O
10	O
times	O
to	O
let	O
JVM	O
warm	O
up	O
.	O
/	O
/	O
Edit	O
3	O
Conclusions	O
:	O
First	O
of	O
all	O
str	B-api_mention
.	I-api_mention
toCharArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
copies	O
entire	O
string	O
in	O
memory	O
.	O
It	O
can	O
be	O
memory	O
consuming	O
for	O
long	O
strings	O
.	O
Method	O
String	B-api_mention
.	I-api_mention
charAt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
looks	O
up	O
char	O
in	O
char	O
array	O
inside	O
String	O
class	O
checking	O
index	O
before	O
.	O
It	O
looks	O
like	O
for	O
short	O
enough	O
Strings	B-api_mention
first	O
method	O
(	O
i	O
.	O
e	O
.	O
chatAt	B-api_mention
method	O
)	O
is	O
a	O
bit	O
slower	O
due	O
to	O
this	O
index	O
check	O
.	O
But	O
if	O
the	O
String	O
is	O
long	O
enough	O
,	O
copying	O
whole	O
char	O
array	O
gets	O
slower	O
,	O
and	O
the	O
first	O
method	O
is	O
faster	O
.	O
The	O
longer	O
the	O
string	O
is	O
,	O
the	O
slower	O
toCharArray	B-api_mention
performs	O
.	O
Try	O
to	O
change	O
limit	O
in	O
for	O
(	O
args	O
)	O
loop	O
to	O
see	O
it	O
.	O
If	O
we	O
let	O
JVM	O
warm	O
up	O
code	O
runs	O
faster	O
,	O
but	O
proportions	O
are	O
the	O
same	O
.	O
After	O
all	O
it	O
'	O
s	O
just	O
micro	O
-	O
optimisation	O
.	O
Question	O
-	O
20746429	O
,	O
answer	O
-	O
20765715	O
Such	O
an	O
operation	O
ought	O
to	O
be	O
possible	O
with	O
a	O
Java	O
8	O
Stream	B-api_mention
,	O
but	O
it	O
can	O
'	O
t	O
necessarily	O
be	O
done	O
efficiently	O
-	O
-	O
for	O
example	O
,	O
you	O
can	O
'	O
t	O
necessarily	O
parallelize	O
such	O
an	O
operation	O
,	O
as	O
you	O
have	O
to	O
look	O
at	O
elements	O
in	O
order	O
.	O
The	O
API	O
doesn	O
'	O
t	O
provide	O
an	O
easy	O
way	O
to	O
do	O
it	O
,	O
but	O
what	O
'	O
s	O
probably	O
the	O
simplest	O
way	O
is	O
to	O
take	O
Stream	B-api_mention
.	I-api_mention
iterator	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
wrap	O
the	O
Iterator	O
to	O
have	O
a	O
"	O
take	O
-	O
while	O
"	O
implementation	O
,	O
and	O
then	O
go	O
back	O
to	O
a	O
Spliterator	B-api_mention
and	O
then	O
a	O
Stream	B-api_mention
.	O
Or	O
-	O
-	O
maybe	O
-	O
-	O
wrap	O
the	O
Spliterator	B-api_mention
,	O
though	O
it	O
can	O
'	O
t	O
really	O
be	O
split	O
anymore	O
in	O
this	O
implementation	O
.	O
Here	O
'	O
s	O
an	O
untested	O
implementation	O
of	O
takeWhile	O
on	O
a	O
Spliterator	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
27478241	O
=	O
=	O
can	O
be	O
used	O
in	O
many	O
object	O
types	O
but	O
you	O
can	O
use	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
for	O
any	O
type	O
,	O
especially	O
Strings	O
and	O
Google	O
Map	O
Markers	O
.	O
Question	O
-	O
29494800	O
I	O
have	O
trouble	O
understanding	O
the	O
source	O
code	O
of	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
.	O
#	O
pre	O
#	O
li	O
what	O
is	O
this	O
line	O
checking	O
?	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	O
class	O
#	O
li	O
What	O
are	O
the	O
differences	O
between	O
(	O
T	O
[	O
]	O
)	O
new	O
Object	B-api_mention
[	O
newLength	O
]	O
and	O
(	O
T	O
[	O
]	O
)	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
why	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
not	O
good	O
enough	O
for	O
both	O
cases	O
?	O
#	O
li	O
This	O
following	O
line	O
compiles	O
,	O
but	O
crashes	O
at	O
run	O
time	O
(	O
as	O
expected	O
)	O
.	O
When	O
should	O
I	O
use	O
this	O
method	O
?	O
Integer	O
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
27683759	O
I	O
just	O
studied	O
about	O
generic	O
programming	O
,	O
the	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
,	O
and	O
ArrayList	B-api_mention
,	O
so	O
I	O
can	O
understand	O
the	O
statement	O
below	O
.	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
I	O
don	O
'	O
t	O
understand	O
the	O
next	O
statement	O
which	O
I	O
saw	O
while	O
surfing	O
the	O
web	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list2	O
=	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
What	O
is	O
Collections	B-api_mention
?	O
Why	O
isn	O
'	O
t	O
it	O
Collections	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
or	O
Collections	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
?	O
#	O
li	O
Why	O
is	O
<	O
String	O
>	O
placed	O
before	O
the	O
method	O
name	O
emptyList	O
?	O
(	O
Isn	O
'	O
t	O
emptyList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
correct	O
for	O
Generic	O
?	O
)	O
#	O
li	O
What	O
does	O
the	O
statement	O
mean	O
?	O
Question	O
-	O
11821801	O
,	O
answer	O
-	O
36827191	O
From	O
oracle	O
documentation	O
page	O
about	O
ReentrantLock	B-api_mention
:	O
#	O
blockquote	O
#	O
li	O
A	O
ReentrantLock	B-api_mention
is	O
owned	O
by	O
the	O
thread	O
last	O
successfully	O
locking	O
,	O
but	O
not	O
yet	O
unlocking	O
it	O
.	O
A	O
thread	O
invoking	O
lock	O
will	O
return	O
,	O
successfully	O
acquiring	O
the	O
lock	O
,	O
when	O
the	O
lock	O
is	O
not	O
owned	O
by	O
another	O
thread	O
.	O
The	O
method	O
will	O
return	O
immediately	O
if	O
the	O
current	O
thread	O
already	O
owns	O
the	O
lock	O
.	O
#	O
li	O
The	O
constructor	O
for	O
this	O
class	O
accepts	O
an	O
optional	O
fairness	O
parameter	O
.	O
When	O
set	O
true	O
,	O
under	O
contention	O
,	O
locks	O
favor	O
granting	O
access	O
to	O
the	O
longest	O
-	O
waiting	O
thread	O
.	O
Otherwise	O
this	O
lock	O
does	O
not	O
guarantee	O
any	O
particular	O
access	O
order	O
.	O
ReentrantLock	B-api_mention
key	O
features	O
as	O
per	O
this	O
article	O
#	O
li	O
Ability	O
to	O
lock	O
interruptibly	O
.	O
#	O
li	O
Ability	O
to	O
timeout	O
while	O
waiting	O
for	O
lock	O
.	O
#	O
li	O
Power	O
to	O
create	O
fair	O
lock	O
.	O
#	O
li	O
API	O
to	O
get	O
list	O
of	O
waiting	O
thread	O
for	O
lock	O
.	O
#	O
li	O
Flexibility	O
to	O
try	O
for	O
lock	O
without	O
blocking	O
.	O
You	O
can	O
use	O
ReentrantReadWriteLock	B-api_mention
.	I-api_mention
ReadLock	I-api_mention
,	O
ReentrantReadWriteLock	B-api_mention
.	I-api_mention
WriteLock	I-api_mention
to	O
further	O
acquire	O
control	O
on	O
granular	O
locking	O
on	O
read	O
and	O
write	O
operations	O
.	O
Have	O
a	O
look	O
at	O
this	O
article	O
by	O
Benjamen	O
on	O
usage	O
of	O
different	O
type	O
of	O
ReentrantLocks	B-api_mention
Question	O
-	O
8881291	O
,	O
answer	O
-	O
14060804	O
#	O
li	O
Strings	O
are	O
immutable	O
in	O
Java	O
if	O
you	O
store	O
password	O
as	O
plain	O
text	O
it	O
will	O
be	O
available	O
in	O
memory	O
until	O
Garbage	O
collector	O
clears	O
it	O
and	O
since	O
Strings	O
are	O
used	O
in	O
String	B-api_mention
pool	O
for	O
re	O
-	O
usability	O
there	O
is	O
pretty	O
high	O
chance	O
that	O
it	O
will	O
be	O
remain	O
in	O
memory	O
for	O
long	O
duration	O
,	O
which	O
pose	O
a	O
security	O
threat	O
.	O
Since	O
any	O
one	O
who	O
has	O
access	O
to	O
memory	O
dump	O
can	O
find	O
the	O
password	O
in	O
clear	O
text	O
#	O
li	O
Java	O
recommendation	O
using	O
getPassword	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
JPasswordField	O
which	O
returns	O
a	O
char	O
[	O
]	O
and	O
deprecated	O
getText	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
which	O
returns	O
password	O
in	O
clear	O
text	O
stating	O
security	O
reason	O
.	O
#	O
li	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
there	O
is	O
always	O
a	O
risk	O
of	O
printing	O
plain	O
text	O
in	O
log	O
file	O
or	O
console	O
but	O
if	O
use	O
Array	O
you	O
won	O
'	O
t	O
print	O
contents	O
of	O
array	O
instead	O
its	O
memory	O
location	O
get	O
printed	O
.	O
#	O
pre	O
#	O
blockquote	O
Final	O
thoughts	O
:	O
Though	O
using	O
char	O
[	O
]	O
is	O
not	O
just	O
enough	O
you	O
need	O
to	O
erase	O
content	O
to	O
be	O
more	O
secure	O
.	O
I	O
also	O
suggest	O
working	O
with	O
hash	O
'	O
d	O
or	O
encrypted	O
password	O
instead	O
of	O
plaintext	O
and	O
clearing	O
it	O
from	O
memory	O
as	O
soon	O
as	O
authentication	O
is	O
completed	O
.	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894384	O
This	O
is	O
just	O
micro	O
-	O
optimisation	O
that	O
you	O
shouldn	O
'	O
t	O
worry	O
about	O
.	O
char	O
[	O
]	O
chars	O
=	O
str	B-api_mention
.	I-api_mention
toCharArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
returns	O
you	O
a	O
copy	O
of	O
str	O
character	O
arrays	O
(	O
in	O
JDK	O
,	O
it	O
returns	O
a	O
copy	O
of	O
characters	O
by	O
calling	O
System	O
.	O
arrayCopy	O
)	O
.	O
Other	O
than	O
that	O
,	O
str	B-api_mention
.	I-api_mention
charAt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
only	O
checks	O
if	O
the	O
index	O
is	O
indeed	O
in	O
bounds	O
and	O
returns	O
a	O
character	O
within	O
the	O
array	O
index	O
.	O
The	O
first	O
one	O
doesn	O
'	O
t	O
create	O
additional	O
memory	O
in	O
JVM	O
.	O
Question	O
-	O
12544479	O
I	O
am	O
looking	O
for	O
the	O
easiest	O
and	O
simplest	O
way	O
to	O
bind	O
and	O
convert	O
data	O
in	O
Spring	O
MVC	O
.	O
If	O
possible	O
,	O
without	O
doing	O
any	O
xml	O
configuration	O
.	O
So	O
far	O
I	O
'	O
ve	O
been	O
using	O
PropertyEditors	B-api_mention
like	O
so	O
:	O
#	O
pre	O
and	O
#	O
pre	O
It	O
is	O
simple	O
:	O
both	O
conversion	O
are	O
defined	O
in	O
the	O
same	O
class	O
,	O
and	O
the	O
binding	O
is	O
straightforward	O
.	O
If	O
I	O
wanted	O
to	O
do	O
a	O
general	O
binding	O
across	O
all	O
my	O
controllers	O
,	O
I	O
could	O
still	O
add	O
3	O
lines	O
in	O
my	O
xml	O
config	O
.	O
But	O
Spring	O
3	O
.	O
x	O
introduced	O
a	O
new	O
way	O
to	O
do	O
it	O
,	O
using	O
Converters	B-api_mention
:	O
#	O
blockquote	O
So	O
let	O
'	O
s	O
say	O
I	O
want	O
to	O
use	O
Converters	B-api_mention
because	O
it	O
is	O
"	O
the	O
latest	O
alternative	O
"	O
.	O
I	O
would	O
have	O
to	O
create	O
two	O
converters	O
:	O
#	O
pre	O
First	O
drawback	O
:	O
I	O
have	O
to	O
make	O
two	O
classes	O
.	O
Benefit	O
:	O
no	O
need	O
to	O
cast	O
thanks	O
to	O
genericity	O
.	O
Then	O
,	O
how	O
do	O
I	O
simply	O
data	O
bind	O
the	O
converters	B-api_mention
?	O
Second	O
drawback	O
:	O
I	O
haven	O
'	O
t	O
found	O
any	O
simple	O
way	O
(	O
annotations	O
or	O
other	O
programmatic	O
facilities	O
)	O
to	O
do	O
it	O
in	O
a	O
controller	O
:	O
nothing	O
like	O
someSpringObject	O
.	O
registerCustomConverter	O
(	O
args	O
)	O
;	O
.	O
The	O
only	O
ways	O
I	O
'	O
ve	O
found	O
would	O
be	O
tedious	O
,	O
not	O
simple	O
,	O
and	O
only	O
about	O
general	O
cross	O
-	O
controller	O
binding	O
:	O
#	O
li	O
XML	O
config	O
:	O
#	O
pre	O
#	O
li	O
Java	O
config	O
(	O
only	O
in	O
Spring	O
3	O
.	O
1	O
+	O
)	O
:	O
#	O
pre	O
With	O
all	O
these	O
drawbacks	O
,	O
why	O
using	O
Converters	B-api_mention
?	O
Am	O
I	O
missing	O
something	O
?	O
Are	O
there	O
other	O
tricks	O
that	O
I	O
am	O
not	O
aware	O
of	O
?	O
I	O
am	O
tempted	O
to	O
go	O
on	O
using	O
PropertyEditors	B-api_mention
.	O
.	O
.	O
Binding	O
is	O
much	O
easier	O
and	O
quicker	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14502259	O
There	O
are	O
many	O
,	O
many	O
pseudo	O
random	O
number	O
generators	O
out	O
there	O
.	O
For	O
example	O
Knuth	O
'	O
s	O
ranarray	O
,	O
the	O
Mersenne	O
twister	O
,	O
or	O
look	O
for	O
LFSR	O
generators	O
.	O
Knuth	O
'	O
s	O
monumental	O
"	O
Seminumerical	O
algorithms	O
"	O
analizes	O
the	O
area	O
,	O
and	O
proposes	O
some	O
linear	O
congruential	O
generators	O
(	O
simple	O
to	O
implement	O
,	O
fast	O
)	O
.	O
But	O
I	O
'	O
d	O
suggest	O
you	O
just	O
stick	O
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
or	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
,	O
they	O
fast	O
and	O
at	O
least	O
OK	O
for	O
occasional	O
use	O
(	O
i	O
.	O
e	O
.	O
,	O
games	O
and	O
such	O
)	O
.	O
If	O
you	O
are	O
just	O
paranoid	O
on	O
the	O
distribution	O
(	O
some	O
Monte	O
Carlo	O
program	O
,	O
or	O
a	O
genetic	O
algorithm	O
)	O
,	O
check	O
out	O
their	O
implementation	O
(	O
source	O
is	O
available	O
somewhere	O
)	O
,	O
and	O
seed	O
them	O
with	O
some	O
truly	O
random	O
number	O
,	O
either	O
from	O
your	O
operating	O
system	O
or	O
from	O
random	O
.	O
org	O
.	O
If	O
this	O
is	O
required	O
for	O
some	O
application	O
where	O
security	O
is	O
critical	O
,	O
you	O
'	O
ll	O
have	O
to	O
dig	O
yourself	O
.	O
And	O
as	O
in	O
that	O
case	O
you	O
shouldn	O
'	O
t	O
believe	O
what	O
some	O
colored	O
square	O
with	O
missing	O
bits	O
spouts	O
here	O
,	O
I	O
'	O
ll	O
shut	O
up	O
now	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
20593147	O
In	O
Java	O
8	O
,	O
you	O
could	O
do	O
:	O
#	O
pre	O
Some	O
notes	O
:	O
The	O
stream	O
returned	O
by	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	O
unlike	O
most	O
streams	O
)	O
needs	O
to	O
be	O
closed	O
.	O
For	O
the	O
reasons	O
mentioned	O
here	O
I	O
avoid	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
strange	O
code	O
(	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
lines	B-api_mention
:	I-api_mention
:	I-api_mention
iterator	I-api_mention
casts	O
a	O
Stream	B-api_mention
to	O
an	O
Iterable	B-api_mention
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723666	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
without	O
getting	O
any	O
exception	O
.	O
println	B-api_mention
method	O
does	O
not	O
throw	O
null	O
pointer	O
because	O
it	O
first	O
checks	O
whether	O
the	O
object	O
is	O
null	O
or	O
not	O
.	O
If	O
null	O
then	O
it	O
simply	O
prints	O
the	O
string	O
StringLiteral	O
.	O
Otherwise	O
it	O
will	O
call	O
the	O
toString	B-api_mention
method	O
of	O
that	O
object	O
.	O
Adding	O
more	O
details	O
:	O
Internally	O
print	O
methods	O
call	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
the	O
input	O
object	O
.	O
And	O
in	O
valueOf	B-api_mention
method	O
,	O
this	O
check	O
helps	O
to	O
avoid	O
null	O
pointer	O
excpeiton	O
:	O
return	O
(	O
args	O
)	O
?	O
StringLiteral	O
:	O
obj	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
rest	O
of	O
your	O
confusion	O
,	O
calling	O
any	O
method	O
on	O
a	O
null	O
object	O
should	O
throw	O
a	O
null	O
pointer	O
exception	O
,	O
if	O
not	O
a	O
special	O
case	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
35074360	O
I	O
have	O
written	O
a	O
complete	O
utility	O
class	O
(	O
inspired	O
by	O
Askar	O
'	O
s	O
proposal	O
)	O
that	O
can	O
take	O
Java	O
8	O
lambda	O
expression	O
and	O
turn	O
them	O
(	O
if	O
applicable	O
)	O
into	O
any	O
typed	O
standard	O
Java	O
8	O
lambda	O
defined	O
in	O
the	O
package	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	O
You	O
can	O
for	O
example	O
do	O
:	O
#	O
li	O
asPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
asBiPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Because	O
there	O
would	O
be	O
numerous	O
ambiguities	O
if	O
all	O
the	O
static	O
methods	O
would	O
be	O
named	O
just	O
as	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
opted	O
to	O
call	O
the	O
method	O
"	O
as	O
"	O
followed	O
by	O
the	O
returned	O
type	O
.	O
This	O
gives	O
us	O
full	O
control	O
of	O
the	O
lambda	O
interpretation	O
.	O
Below	O
is	O
the	O
first	O
part	O
of	O
the	O
(	O
somewhat	O
large	O
)	O
utility	O
class	O
revealing	O
the	O
pattern	O
used	O
.	O
Have	O
a	O
look	O
at	O
the	O
complete	O
class	O
here	O
(	O
at	O
gist	O
)	O
.	O
#	O
pre	O
Question	O
-	O
22182669	O
,	O
answer	O
-	O
22222274	O
StackOverflowError	B-api_mention
occurs	O
due	O
to	O
an	O
application	O
recurses	O
too	O
deeply	O
(	O
This	O
is	O
not	O
an	O
answer	O
you	O
are	O
expecting	O
)	O
.	O
Now	O
other	O
things	O
to	O
happen	O
to	O
StackOverflowError	B-api_mention
is	O
keep	O
calling	O
methods	O
from	O
methods	O
till	O
you	O
get	O
StackOverflowError	B-api_mention
,	O
but	O
nobody	O
can	O
program	O
to	O
get	O
StackOverflowError	B-api_mention
and	O
even	O
if	O
those	O
programmer	O
are	O
doing	O
so	O
then	O
they	O
are	O
not	O
following	O
coding	O
standards	O
for	O
cyclomatic	O
complixity	O
that	O
every	O
programmer	O
has	O
to	O
understand	O
while	O
programming	O
.	O
Such	O
reason	O
for	O
'	B-api_mention
StackOverflowError	I-api_mention
'	I-api_mention
will	O
require	O
much	O
time	O
to	O
rectify	O
it	O
.	O
But	O
unknowingly	O
coding	O
one	O
line	O
or	O
two	O
line	O
which	O
causes	O
StackOverflowError	B-api_mention
is	O
understandable	O
and	O
JVM	O
throws	O
that	O
and	O
we	O
can	O
rectify	O
it	O
instantly	O
.	O
Here	O
is	O
my	O
answer	O
with	O
picture	O
for	O
some	O
other	O
question	O
.	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
34073047	O
Another	O
option	O
is	O
to	O
use	O
Apache	O
Commons	O
StrBuilder	O
,	O
which	O
has	O
the	O
functionality	O
that	O
'	O
s	O
lacking	O
in	O
StringBuilder	B-api_mention
.	O
StrBuilder	O
.	O
appendLn	O
(	O
)	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781189	O
The	O
only	O
int	O
value	O
for	O
which	O
it	O
works	O
is	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
It	O
'	O
s	O
because	O
integers	O
are	O
negated	O
using	O
the	O
two	O
'	O
s	O
complement	O
way	O
.	O
Using	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
you	O
see	O
that	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
10000000000000000000000000000000	O
Taking	O
the	O
negative	O
value	O
is	O
done	O
by	O
first	O
swapping	O
0	O
and	O
1	O
,	O
which	O
gives	O
01111111111111111111111111111111	O
and	O
by	O
adding	O
1	O
,	O
which	O
gives	O
10000000000000000000000000000000	O
As	O
you	O
can	O
see	O
in	O
the	O
link	O
I	O
gave	O
,	O
Wikipedia	O
mentions	O
the	O
problem	O
with	O
the	O
most	O
negative	O
numbers	O
and	O
specifies	O
it	O
'	O
s	O
the	O
sole	O
exception	O
:	O
#	O
blockquote	O
Of	O
course	O
you	O
have	O
the	O
same	O
phenomenon	O
for	O
Long	B-api_mention
.	O
Min	O
_	O
Value	O
if	O
you	O
store	O
it	O
in	O
a	O
long	O
variable	O
.	O
Note	O
that	O
this	O
is	O
only	O
due	O
to	O
choices	O
that	O
were	O
made	O
regarding	O
the	O
binary	O
storage	O
of	O
ints	O
in	O
Java	O
.	O
Another	O
(	O
bad	O
)	O
solution	O
could	O
for	O
example	O
have	O
been	O
to	O
negate	O
by	O
simply	O
changing	O
the	O
most	O
significant	O
bit	O
and	O
letting	O
the	O
other	O
bits	O
unchanged	O
,	O
this	O
would	O
have	O
avoided	O
this	O
problem	O
with	O
MIN	B-api_mention
_	I-api_mention
VALUE	I-api_mention
but	O
would	O
have	O
made	O
2	O
different	O
0	O
values	O
and	O
complicated	O
binary	O
arithmetic	O
(	O
how	O
would	O
you	O
have	O
incremented	O
for	O
example	O
?	O
)	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276498	O
Assuming	O
all	O
the	O
streams	O
get	O
created	O
okay	O
,	O
yes	O
,	O
just	O
closing	O
bw	O
is	O
fine	O
with	O
those	O
stream	O
implementations	O
;	O
but	O
that	O
'	O
s	O
a	O
big	O
assumption	O
.	O
I	O
'	O
d	O
use	O
try	O
-	O
with	O
-	O
resources	O
(	O
tutorial	O
)	O
so	O
that	O
any	O
issues	O
constructing	O
the	O
subsequent	O
streams	O
that	O
throw	O
exceptions	O
don	O
'	O
t	O
leave	O
the	O
previous	O
streams	O
hanging	O
,	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
rely	O
on	O
the	O
stream	O
implementation	O
having	O
the	O
call	O
to	O
close	O
the	O
underlying	O
stream	O
:	O
#	O
pre	O
Note	O
you	O
no	O
longer	O
call	O
close	O
at	O
all	O
.	O
Important	O
note	O
:	O
To	O
have	O
try	O
-	O
with	O
-	O
resources	O
close	O
them	O
,	O
you	O
must	O
assign	O
the	O
streams	O
to	O
variables	O
as	O
you	O
open	O
them	O
,	O
you	O
cannot	O
use	O
nesting	O
.	O
If	O
you	O
use	O
nesting	O
,	O
an	O
exception	O
during	O
construction	O
of	O
one	O
of	O
the	O
later	O
streams	O
(	O
say	O
,	O
GZIPOutputStream	O
)	O
will	O
leave	O
any	O
stream	O
constructed	O
by	O
the	O
nested	O
calls	O
inside	O
it	O
open	O
.	O
From	O
JLS	O
§	O
14	O
.	O
20	O
.	O
3	O
:	O
#	O
blockquote	O
Note	O
the	O
word	O
"	O
variables	O
"	O
(	O
my	O
emphasis	O
)	O
.	O
E	O
.	O
g	O
.	O
,	O
don	O
'	O
t	O
do	O
this	O
:	O
#	O
pre	O
.	O
.	O
.	O
because	O
an	O
exception	O
from	O
the	O
GZIPOutputStream	O
(	O
OutputStream	O
)	O
constructor	O
(	O
which	O
says	O
it	O
may	O
throw	O
IOException	O
,	O
and	O
writes	O
a	O
header	O
to	O
the	O
underlying	O
stream	O
)	O
would	O
leave	O
the	O
FileOutputStream	B-api_mention
open	O
.	O
Since	O
some	O
resources	O
have	O
constructors	O
that	O
may	O
throw	O
and	O
others	O
don	O
'	O
t	O
,	O
it	O
'	O
s	O
a	O
good	O
habit	O
to	O
just	O
list	O
them	O
separately	O
.	O
We	O
can	O
double	O
-	O
check	O
our	O
interpretation	O
of	O
that	O
JLS	O
section	O
with	O
this	O
program	O
:	O
#	O
pre	O
.	O
.	O
.	O
which	O
has	O
the	O
output	O
:	O
#	O
pre	O
Note	O
that	O
there	O
are	O
no	O
calls	O
to	O
close	O
there	O
.	O
If	O
we	O
fix	O
main	O
:	O
#	O
pre	O
then	O
we	O
get	O
the	O
appropriate	O
close	O
calls	O
:	O
#	O
pre	O
(	O
Yes	O
,	O
two	O
calls	O
to	O
InnerMost	O
#	O
close	O
is	O
correct	O
;	O
one	O
is	O
from	O
Middle	O
,	O
the	O
other	O
from	O
try	O
-	O
with	O
-	O
resources	O
.	O
)	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16635489	O
The	O
advantage	O
comes	O
into	O
account	O
when	O
the	O
operations	O
can	O
be	O
executed	O
in	O
parallel	O
.	O
(	O
See	O
#	O
a	O
-	O
the	O
section	O
about	O
internal	O
and	O
external	O
iteration	O
)	O
#	O
li	O
The	O
main	O
advantage	O
from	O
my	O
point	O
of	O
view	O
is	O
that	O
the	O
implementation	O
of	O
what	O
is	O
to	O
be	O
done	O
within	O
the	O
loop	O
can	O
be	O
defined	O
without	O
having	O
to	O
decide	O
if	O
it	O
will	O
be	O
executed	O
in	O
parallel	O
or	O
sequential	O
#	O
li	O
If	O
you	O
want	O
your	O
loop	O
to	O
be	O
executed	O
in	O
parallel	O
you	O
could	O
simply	O
write	O
joins	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
will	O
have	O
to	O
write	O
some	O
extra	O
code	O
for	O
thread	O
handling	O
etc	O
.	O
Note	O
:	O
for	O
my	O
answer	O
I	O
assumed	O
joins	O
implementing	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
interface	O
.	O
If	O
joins	O
implements	O
only	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Iterable	I-api_mention
interface	O
this	O
is	O
no	O
longer	O
true	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
31265714	O
In	O
Java	O
8	O
,	O
there	O
is	O
also	O
an	O
alternative	O
to	O
using	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
If	O
your	O
input	O
source	O
isn	O
'	O
t	O
a	O
file	O
but	O
something	O
more	O
abstract	O
like	O
a	O
Reader	B-api_mention
or	O
an	O
InputStream	B-api_mention
,	O
you	O
can	O
stream	O
the	O
lines	O
via	O
the	O
BufferedReader	B-api_mention
s	O
lines	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
For	O
example	O
:	O
#	O
pre	O
will	O
call	O
processLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
each	O
input	O
line	O
read	O
by	O
the	O
BufferedReader	B-api_mention
.	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908402	O
Although	O
there	O
is	O
no	O
explicit	O
guarantee	O
of	O
this	O
,	O
the	O
end	O
result	O
is	O
bound	O
to	O
be	O
such	O
that	O
the	O
comparison	O
always	O
succeeds	O
for	O
enum	O
constants	O
with	O
identical	O
names	O
:	O
#	O
pre	O
The	O
reason	O
for	O
this	O
is	O
that	O
Java	O
compiler	O
constructs	O
subclasses	O
of	O
Enum	O
in	O
such	O
a	O
way	O
that	O
they	O
end	O
up	O
calling	O
Enum	O
'	O
s	O
sole	O
protected	O
constructor	O
,	O
passing	O
it	O
the	O
name	O
of	O
enum	O
value	O
:	O
protected	O
Enum	O
(	O
args	O
)	O
;	O
The	O
name	O
is	O
embedded	O
into	O
the	O
generated	O
code	O
in	O
the	O
form	O
of	O
a	O
string	O
literal	O
.	O
According	O
to	O
String	B-api_mention
documentation	O
,	O
#	O
blockquote	O
This	O
amounts	O
to	O
an	O
implicit	O
guarantee	O
of	O
your	O
expression	O
succeeding	O
when	O
names	O
of	O
enum	O
constants	O
are	O
identical	O
.	O
However	O
,	O
I	O
would	O
not	O
rely	O
on	O
this	O
behavior	O
,	O
and	O
use	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
,	O
because	O
anyone	O
reading	O
my	O
code	O
would	O
be	O
scratching	O
his	O
head	O
,	O
thinking	O
that	O
I	O
made	O
a	O
mistake	O
.	O
Question	O
-	O
31188231	O
It	O
has	O
generally	O
been	O
the	O
case	O
the	O
Java	O
source	O
code	O
has	O
been	O
forward	O
compatible	O
.	O
Until	O
Java	O
8	O
,	O
as	O
far	O
as	O
I	O
know	O
,	O
both	O
compiled	O
classes	O
and	O
source	O
have	O
been	O
forward	O
compatible	O
with	O
later	O
JDK	O
/	O
JVM	O
releases	O
.	O
[	O
Update	O
:	O
this	O
is	O
not	O
correct	O
,	O
see	O
comments	O
re	O
'	O
enum	O
'	O
,	O
etc	O
,	O
below	O
.	O
]	O
However	O
,	O
with	O
the	O
addition	O
of	O
default	O
methods	O
in	O
Java	O
8	O
this	O
appears	O
to	O
no	O
longer	O
be	O
the	O
case	O
.	O
For	O
example	O
,	O
a	O
library	O
I	O
have	O
been	O
using	O
has	O
an	O
implementation	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
which	O
includes	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
sort	O
(	O
args	O
)	O
.	O
This	O
method	O
returns	O
a	O
copy	O
of	O
the	O
contents	O
of	O
the	O
list	O
sorted	O
.	O
This	O
library	O
,	O
deployed	O
as	O
a	O
jar	O
file	O
dependency	O
,	O
worked	O
fine	O
in	O
a	O
project	O
being	O
built	O
using	O
JDK	O
1	O
.	O
8	O
.	O
However	O
,	O
later	O
I	O
had	O
occasion	O
to	O
recompile	O
the	O
library	O
itself	O
using	O
JDK	O
1	O
.	O
8	O
and	O
I	O
found	O
the	O
library	O
no	O
longer	O
compiles	O
:	O
the	O
List	O
-	O
implementing	O
class	O
with	O
its	O
own	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
now	O
conflicts	O
with	O
the	O
Java	O
8	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
.	O
The	O
Java	O
8	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
sorts	O
the	O
list	O
in	O
place	O
(	O
returns	O
void	O
)	O
;	O
my	O
library	O
'	O
s	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
-	O
since	O
it	O
returns	O
a	O
new	O
sorted	O
list	O
-	O
has	O
an	O
incompatible	O
signature	O
.	O
So	O
my	O
basic	O
question	O
is	O
:	O
#	O
li	O
Doesn	O
'	O
t	O
JDK	O
1	O
.	O
8	O
introduce	O
a	O
forward	O
incompatibility	O
for	O
Java	O
source	O
code	O
due	O
to	O
default	O
methods	O
?	O
Also	O
:	O
#	O
li	O
Is	O
this	O
the	O
first	O
such	O
forward	O
incompatible	O
change	O
?	O
#	O
li	O
Was	O
this	O
considered	O
or	O
discussed	O
when	O
default	O
methods	O
where	O
designed	O
and	O
implemented	O
?	O
Is	O
it	O
documented	O
anywhere	O
?	O
#	O
li	O
Was	O
the	O
(	O
admittedly	O
small	O
)	O
inconvenience	O
discounted	O
versus	O
the	O
benefits	O
?	O
The	O
following	O
is	O
an	O
example	O
of	O
some	O
code	O
that	O
compiles	O
and	O
runs	O
under	O
1	O
.	O
7	O
and	O
runs	O
under	O
1	O
.	O
8	O
-	O
but	O
does	O
not	O
compile	O
under	O
1	O
.	O
8	O
:	O
#	O
pre	O
The	O
following	O
shows	O
this	O
code	O
being	O
compiled	O
(	O
or	O
failing	O
to	O
)	O
and	O
being	O
run	O
.	O
#	O
pre	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
10796174	O
You	O
need	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
split	B-api_mention
uses	O
regular	O
expression	O
and	O
in	O
regex	O
|	O
is	O
metacharacter	O
representing	O
OR	O
operator	O
.	O
You	O
need	O
to	O
escape	O
that	O
character	O
using	O
\	O
(	O
written	O
in	O
String	B-api_mention
as	O
StringLiteral	O
since	O
\	O
is	O
also	O
metacharacter	O
in	O
String	O
literals	O
and	O
require	O
another	O
\	O
to	O
escape	O
it	O
)	O
.	O
You	O
can	O
also	O
use	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
let	O
Pattern	B-api_mention
.	I-api_mention
quote	I-api_mention
create	O
escaped	O
version	O
of	O
regex	O
representing	O
|	O
.	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
21274808	O
Use	O
CodeSource	B-api_mention
#	I-api_mention
getLocation	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
This	O
works	O
fine	O
in	O
JAR	O
files	O
as	O
well	O
.	O
You	O
can	O
obtain	O
CodeSource	B-api_mention
by	O
ProtectionDomain	B-api_mention
#	I-api_mention
getCodeSource	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
the	O
ProtectionDomain	B-api_mention
in	O
turn	O
can	O
be	O
obtained	O
by	O
Class	B-api_mention
#	I-api_mention
getProtectionDomain	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
#	O
pre	O
Question	O
-	O
7032070	O
Assuming	O
that	O
arraylist	O
is	O
defined	O
as	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
arraylist	O
,	O
is	O
arraylist	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
arraylist	I-api_mention
)	I-api_mention
equivalent	O
to	O
arraylist	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
)	I-api_mention
?	O
If	O
so	O
,	O
can	O
I	O
assume	O
that	O
the	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
more	O
efficient	O
for	O
emptying	O
the	O
array	O
list	O
?	O
Are	O
there	O
any	O
caveats	O
in	O
using	O
arraylist	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
arraylist	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Question	O
-	O
24885223	O
,	O
answer	O
-	O
29841832	O
Thanks	O
to	O
@	O
marmor	O
,	O
I	O
updated	O
my	O
answer	O
.	O
I	O
think	O
it	O
'	O
s	O
a	O
good	O
solution	O
to	O
handle	O
the	O
onClick	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
the	O
ViewHolder	B-api_mention
class	O
constructor	O
and	O
pass	O
it	O
to	O
the	O
parent	O
class	O
via	O
OnItemClickListener	B-api_mention
interface	O
.	O
MyAdapter	O
.	O
java	O
#	O
pre	O
Usage	O
of	O
adapter	O
in	O
other	O
classes	O
:	O
MyFragment	O
.	O
java	O
#	O
pre	O
Question	O
-	O
25903137	O
,	O
answer	O
-	O
25903190	O
#	O
pre	O
It	O
'	O
s	O
not	O
quite	O
as	O
nice	O
as	O
the	O
list	O
code	O
.	O
You	O
can	O
'	O
t	O
construct	O
new	O
Map	B-api_mention
.	I-api_mention
Entry	I-api_mention
s	O
in	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
so	O
the	O
work	O
is	O
mixed	O
into	O
the	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
.	O
Question	O
-	O
23674624	O
,	O
answer	O
-	O
23674719	O
IntStream	B-api_mention
.	I-api_mention
boxed	I-api_mention
turns	O
an	O
IntStream	B-api_mention
into	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
you	O
can	O
then	O
collect	O
into	O
a	O
list	O
:	O
theIntStream	O
.	B-api_mention
boxed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28513908	O
I	O
have	O
some	O
recollections	O
from	O
the	O
early	O
design	O
of	O
the	O
Streams	O
API	O
that	O
might	O
shed	O
some	O
light	O
on	O
the	O
design	O
rationale	O
.	O
Back	O
in	O
2012	O
,	O
we	O
were	O
adding	O
lambdas	O
to	O
the	O
language	O
,	O
and	O
we	O
wanted	O
a	O
collections	O
-	O
oriented	O
or	O
"	O
bulk	O
data	O
"	O
set	O
of	O
operations	O
,	O
programmed	O
using	O
lambdas	O
,	O
that	O
would	O
facilitate	O
parallelism	O
.	O
The	O
idea	O
of	O
lazily	O
chaining	O
operations	O
together	O
was	O
well	O
established	O
by	O
this	O
point	O
.	O
We	O
also	O
didn	O
'	O
t	O
want	O
the	O
intermediate	O
operations	O
to	O
store	O
results	O
.	O
The	O
main	O
issues	O
we	O
needed	O
to	O
decide	O
were	O
what	O
the	O
objects	O
in	O
the	O
chain	O
looked	O
like	O
in	O
the	O
API	O
and	O
how	O
they	O
hooked	O
up	O
to	O
data	O
sources	O
.	O
The	O
sources	O
were	O
often	O
collections	O
,	O
but	O
we	O
also	O
wanted	O
to	O
support	O
data	O
coming	O
from	O
a	O
file	O
or	O
the	O
network	O
,	O
or	O
data	O
generated	O
on	O
-	O
the	O
-	O
fly	O
,	O
e	O
.	O
g	O
.	O
,	O
from	O
a	O
random	O
number	O
generator	O
.	O
There	O
were	O
many	O
influences	O
of	O
existing	O
work	O
on	O
the	O
design	O
.	O
Among	O
the	O
more	O
influential	O
were	O
Google	O
'	O
s	O
Guava	O
library	O
and	O
the	O
Scala	O
collections	O
library	O
.	O
(	O
If	O
anybody	O
is	O
surprised	O
about	O
the	O
influence	O
from	O
Guava	O
,	O
note	O
that	O
Kevin	O
Bourrillion	O
,	O
Guava	O
lead	O
developer	O
,	O
was	O
on	O
the	O
JSR	O
-	O
335	O
Lambda	O
expert	O
group	O
.	O
)	O
On	O
Scala	O
collections	O
,	O
we	O
found	O
this	O
talk	O
by	O
Martin	O
Odersky	O
to	O
be	O
of	O
particular	O
interest	O
:	O
Future	O
-	O
Proofing	O
Scala	O
Collections	O
:	O
from	O
Mutable	O
to	O
Persistent	O
to	O
Parallel	O
.	O
(	O
Stanford	O
EE380	O
,	O
2011	O
June	O
1	O
.	O
)	O
Our	O
prototype	O
design	O
at	O
the	O
time	O
was	O
based	O
around	O
Iterable	B-api_mention
.	O
The	O
familiar	O
operations	O
filter	O
,	O
map	O
,	O
and	O
so	O
forth	O
were	O
extension	O
(	O
default	O
)	O
methods	O
on	O
Iterable	B-api_mention
.	O
Calling	O
one	O
added	O
an	O
operation	O
to	O
the	O
chain	O
and	O
returned	O
another	O
Iterable	O
.	O
A	O
terminal	O
operation	O
like	O
count	O
would	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
up	O
the	O
chain	O
to	O
the	O
source	O
,	O
and	O
the	O
operations	O
were	O
implemented	O
within	O
each	O
stage	O
'	O
s	O
Iterator	B-api_mention
.	O
Since	O
these	O
are	O
Iterables	O
,	O
you	O
can	O
call	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
more	O
than	O
once	O
.	O
What	O
should	O
happen	O
then	O
?	O
If	O
the	O
source	O
is	O
a	O
collection	O
,	O
this	O
mostly	O
works	O
fine	O
.	O
Collections	O
are	O
Iterable	B-api_mention
,	O
and	O
each	O
call	O
to	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
produces	O
a	O
distinct	O
Iterator	B-api_mention
instance	O
that	O
is	O
independent	O
of	O
any	O
other	O
active	O
instances	O
,	O
and	O
each	O
traverses	O
the	O
collection	O
independently	O
.	O
Great	O
.	O
Now	O
what	O
if	O
the	O
source	O
is	O
one	O
-	O
shot	O
,	O
like	O
reading	O
lines	O
from	O
a	O
file	O
?	O
Maybe	O
the	O
first	O
Iterator	O
should	O
get	O
all	O
the	O
values	O
but	O
the	O
second	O
and	O
subsequent	O
ones	O
should	O
be	O
empty	O
.	O
Maybe	O
the	O
values	O
should	O
be	O
interleaved	O
among	O
the	O
Iterators	O
.	O
Or	O
maybe	O
each	O
Iterator	B-api_mention
should	O
get	O
all	O
the	O
same	O
values	O
.	O
Then	O
,	O
what	O
if	O
you	O
have	O
two	O
iterators	O
and	O
one	O
gets	O
farther	O
ahead	O
of	O
the	O
other	O
?	O
Somebody	O
will	O
have	O
to	O
buffer	O
up	O
the	O
values	O
in	O
the	O
second	O
Iterator	O
until	O
they	O
'	O
re	O
read	O
.	O
Worse	O
,	O
what	O
if	O
you	O
get	O
one	O
Iterator	B-api_mention
and	O
read	O
all	O
the	O
values	O
,	O
and	O
only	O
then	O
get	O
a	O
second	O
Iterator	B-api_mention
.	O
Where	O
do	O
the	O
values	O
come	O
from	O
now	O
?	O
Is	O
there	O
a	O
requirement	O
for	O
them	O
all	O
to	O
be	O
buffered	O
up	O
just	O
in	O
case	O
somebody	O
wants	O
a	O
second	O
Iterator	B-api_mention
?	O
Clearly	O
,	O
allowing	O
multiple	O
Iterators	O
over	O
a	O
one	O
-	O
shot	O
source	O
raises	O
a	O
lot	O
of	O
questions	O
.	O
We	O
didn	O
'	O
t	O
have	O
good	O
answers	O
for	O
them	O
.	O
We	O
wanted	O
consistent	O
,	O
predictable	O
behavior	O
for	O
what	O
happens	O
if	O
you	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
twice	O
.	O
This	O
pushed	O
us	O
toward	O
disallowing	O
multiple	O
traversals	O
,	O
making	O
the	O
pipelines	O
one	O
-	O
shot	O
.	O
We	O
also	O
observed	O
others	O
bumping	O
into	O
these	O
issues	O
.	O
In	O
the	O
JDK	O
,	O
most	O
Iterables	O
are	O
collections	O
or	O
collection	O
-	O
like	O
objects	O
,	O
which	O
allow	O
multiple	O
traversal	O
.	O
It	O
isn	O
'	O
t	O
specified	O
anywhere	O
,	O
but	O
there	O
seemed	O
to	O
be	O
an	O
unwritten	O
expectation	O
that	O
Iterables	O
allow	O
multiple	O
traversal	O
.	O
A	O
notable	O
exception	O
is	O
the	O
NIO	O
DirectoryStream	O
interface	O
.	O
Its	O
specification	O
includes	O
this	O
interesting	O
warning	O
:	O
#	O
blockquote	O
[	O
bold	O
in	O
original	O
]	O
This	O
seemed	O
unusual	O
and	O
unpleasant	O
enough	O
that	O
we	O
didn	O
'	O
t	O
want	O
to	O
create	O
a	O
whole	O
bunch	O
of	O
new	O
Iterables	O
that	O
might	O
be	O
once	O
-	O
only	O
.	O
This	O
pushed	O
us	O
away	O
from	O
using	O
Iterable	B-api_mention
.	O
About	O
this	O
time	O
,	O
an	O
article	O
by	O
Bruce	O
Eckel	O
appeared	O
that	O
described	O
a	O
spot	O
of	O
trouble	O
he	O
'	O
d	O
had	O
with	O
Scala	O
.	O
He	O
'	O
d	O
written	O
this	O
code	O
:	O
#	O
pre	O
It	O
'	O
s	O
pretty	O
straightforward	O
.	O
It	O
parses	O
lines	O
of	O
text	O
into	O
Registrant	O
objects	O
and	O
prints	O
them	O
out	O
twice	O
.	O
Except	O
that	O
it	O
actually	O
only	O
prints	O
them	O
out	O
once	O
.	O
It	O
turns	O
out	O
that	O
he	O
thought	O
that	O
registrants	O
was	O
a	O
collection	O
,	O
when	O
in	O
fact	O
it	O
'	O
s	O
an	O
iterator	O
.	O
The	O
second	O
call	O
to	O
foreach	O
encounters	O
an	O
empty	O
iterator	O
,	O
from	O
which	O
all	O
values	O
have	O
been	O
exhausted	O
,	O
so	O
it	O
prints	O
nothing	O
.	O
This	O
kind	O
of	O
experience	O
convinced	O
us	O
that	O
it	O
was	O
very	O
important	O
to	O
have	O
clearly	O
predictable	O
results	O
if	O
multiple	O
traversal	O
is	O
attempted	O
.	O
It	O
also	O
highlighted	O
the	O
importance	O
of	O
distinguishing	O
between	O
lazy	O
pipeline	O
-	O
like	O
structures	O
from	O
actual	O
collections	O
that	O
store	O
data	O
.	O
This	O
in	O
turn	O
drove	O
the	O
separation	O
of	O
the	O
lazy	O
pipeline	O
operations	O
into	O
the	O
new	O
Stream	B-api_mention
interface	O
and	O
keeping	O
only	O
eager	O
,	O
mutative	O
operations	O
directly	O
on	O
Collections	B-api_mention
.	O
Brian	O
Goetz	O
has	O
explained	O
the	O
rationale	O
for	O
that	O
.	O
What	O
about	O
allowing	O
multiple	O
traversal	O
for	O
collection	O
-	O
based	O
pipelines	O
but	O
disallowing	O
it	O
for	O
non	O
-	O
collection	O
-	O
based	O
pipelines	O
?	O
It	O
'	O
s	O
inconsistent	O
,	O
but	O
it	O
'	O
s	O
sensible	O
.	O
If	O
you	O
'	O
re	O
reading	O
values	O
from	O
the	O
network	O
,	O
of	O
course	O
you	O
can	O
'	O
t	O
traverse	O
them	O
again	O
.	O
If	O
you	O
want	O
to	O
traverse	O
them	O
multiple	O
times	O
,	O
you	O
have	O
to	O
pull	O
them	O
into	O
a	O
collection	O
explicitly	O
.	O
But	O
let	O
'	O
s	O
explore	O
allowing	O
multiple	O
traversal	O
from	O
collections	O
-	O
based	O
pipelines	O
.	O
Let	O
'	O
s	O
say	O
you	O
did	O
this	O
:	O
#	O
pre	O
(	O
The	O
into	O
operation	O
is	O
now	O
spelled	O
collect	O
(	O
args	O
)	O
.	O
)	O
If	O
source	O
is	O
a	O
collection	O
,	O
then	O
the	O
first	O
into	O
(	O
args	O
)	O
call	O
will	O
create	O
a	O
chain	O
of	O
Iterators	O
back	O
to	O
the	O
source	O
,	O
execute	O
the	O
pipeline	O
operations	O
,	O
and	O
send	O
the	O
results	O
into	O
the	O
destination	O
.	O
The	O
second	O
call	O
to	O
into	O
(	O
args	O
)	O
will	O
create	O
another	O
chain	O
of	O
Iterators	O
,	O
and	O
execute	O
the	O
pipeline	O
operations	O
again	O
.	O
This	O
isn	O
'	O
t	O
obviously	O
wrong	O
but	O
it	O
does	O
have	O
the	O
effect	O
of	O
performing	O
all	O
the	O
filter	O
and	O
map	O
operations	O
a	O
second	O
time	O
for	O
each	O
element	O
.	O
I	O
think	O
many	O
programmers	O
would	O
have	O
been	O
surprised	O
by	O
this	O
behavior	O
.	O
As	O
I	O
mentioned	O
above	O
,	O
we	O
had	O
been	O
talking	O
to	O
the	O
Guava	O
developers	O
.	O
One	O
of	O
the	O
cool	O
things	O
they	O
have	O
is	O
an	O
Idea	O
Graveyard	O
where	O
they	O
describe	O
features	O
that	O
they	O
decided	O
not	O
to	O
implement	O
along	O
with	O
the	O
reasons	O
.	O
The	O
idea	O
of	O
lazy	O
collections	O
sounds	O
pretty	O
cool	O
,	O
but	O
here	O
'	O
s	O
what	O
they	O
have	O
to	O
say	O
about	O
it	O
.	O
Consider	O
a	O
List	B-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
operation	O
that	O
returns	O
a	O
List	B-api_mention
:	O
#	O
blockquote	O
To	O
take	O
a	O
specific	O
example	O
,	O
what	O
'	O
s	O
the	O
cost	O
of	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
List	B-api_mention
?	O
For	O
commonly	O
used	O
classes	O
like	O
ArrayList	B-api_mention
,	O
they	O
'	O
re	O
O	O
(	O
1	O
)	O
.	O
But	O
if	O
you	O
call	O
one	O
of	O
these	O
on	O
a	O
lazily	O
-	O
filtered	O
list	O
,	O
it	O
has	O
to	O
run	O
the	O
filter	O
over	O
the	O
backing	O
list	O
,	O
and	O
all	O
of	O
a	O
sudden	O
these	O
operations	O
are	O
O	O
(	O
n	O
)	O
.	O
Worse	O
,	O
it	O
has	O
to	O
traverse	O
the	O
backing	O
list	O
on	O
every	O
operation	O
.	O
This	O
seemed	O
to	O
us	O
to	O
be	O
too	O
much	O
laziness	O
.	O
It	O
'	O
s	O
one	O
thing	O
to	O
set	O
up	O
some	O
operations	O
and	O
defer	O
actual	O
execution	O
until	O
you	O
so	O
"	O
Go	O
"	O
.	O
It	O
'	O
s	O
another	O
to	O
set	O
things	O
up	O
in	O
such	O
a	O
way	O
that	O
hides	O
a	O
potentially	O
large	O
amount	O
of	O
recomputation	O
.	O
In	O
proposing	O
to	O
disallow	O
non	O
-	O
linear	O
or	O
"	O
no	O
-	O
reuse	O
"	O
streams	O
,	O
Paul	O
Sandoz	O
described	O
the	O
potential	O
consequences	O
of	O
allowing	O
them	O
as	O
giving	O
rise	O
to	O
"	O
unexpected	O
or	O
confusing	O
results	O
.	O
"	O
He	O
also	O
mentioned	O
that	O
parallel	O
execution	O
would	O
make	O
things	O
even	O
trickier	O
.	O
Finally	O
,	O
I	O
'	O
d	O
add	O
that	O
a	O
pipeline	O
operation	O
with	O
side	O
effects	O
would	O
lead	O
to	O
difficult	O
and	O
obscure	O
bugs	O
if	O
the	O
operation	O
were	O
unexpectedly	O
executed	O
multiple	O
times	O
,	O
or	O
at	O
least	O
a	O
different	O
number	O
of	O
times	O
than	O
the	O
programmer	O
expected	O
.	O
(	O
But	O
Java	O
programmers	O
don	O
'	O
t	O
write	O
lambda	O
expressions	O
with	O
side	O
effects	O
,	O
do	O
they	O
?	O
DO	O
THEY	O
?	O
?	O
)	O
So	O
that	O
'	O
s	O
the	O
basic	O
rationale	O
for	O
the	O
Java	O
8	O
Streams	O
API	O
design	O
that	O
allows	O
one	O
-	O
shot	O
traversal	O
and	O
that	O
requires	O
a	O
strictly	O
linear	O
(	O
no	O
branching	O
)	O
pipeline	O
.	O
It	O
provides	O
consistent	O
behavior	O
across	O
multiple	O
different	O
stream	O
sources	O
,	O
it	O
clearly	O
separates	O
lazy	O
from	O
eager	O
operations	O
,	O
and	O
it	O
provides	O
a	O
straightforward	O
execution	O
model	O
.	O
With	O
regard	O
to	O
IEnumerable	O
,	O
I	O
am	O
far	O
from	O
an	O
expert	O
on	O
C	O
#	O
and	O
.	O
NET	O
,	O
so	O
I	O
would	O
appreciate	O
being	O
corrected	O
(	O
gently	O
)	O
if	O
I	O
draw	O
any	O
incorrect	O
conclusions	O
.	O
It	O
does	O
appear	O
,	O
however	O
,	O
that	O
IEnumerable	O
permits	O
multiple	O
traversal	O
to	O
behave	O
differently	O
with	O
different	O
sources	O
;	O
and	O
it	O
permits	O
a	O
branching	O
structure	O
of	O
nested	O
IEnumerable	O
operations	O
,	O
which	O
may	O
result	O
in	O
some	O
significant	O
recomputation	O
.	O
While	O
I	O
appreciate	O
that	O
different	O
systems	O
make	O
different	O
tradeoffs	O
,	O
these	O
are	O
two	O
characteristics	O
that	O
we	O
sought	O
to	O
avoid	O
in	O
the	O
design	O
of	O
the	O
Java	O
8	O
Streams	O
API	O
.	O
The	O
quicksort	O
example	O
given	O
by	O
the	O
OP	O
is	O
interesting	O
,	O
puzzling	O
,	O
and	O
I	O
'	O
m	O
sorry	O
to	O
say	O
,	O
somewhat	O
horrifying	O
.	O
Calling	O
QuickSort	O
takes	O
an	O
IEnumerable	O
and	O
returns	O
an	O
IEnumerable	O
,	O
so	O
no	O
sorting	O
is	O
actually	O
done	O
until	O
the	O
final	O
IEnumerable	O
is	O
traversed	O
.	O
What	O
the	O
call	O
seems	O
to	O
do	O
,	O
though	O
,	O
is	O
build	O
up	O
a	O
tree	O
structure	O
of	O
IEnumerables	O
that	O
reflects	O
the	O
partitioning	O
that	O
quicksort	O
would	O
do	O
,	O
without	O
actually	O
doing	O
it	O
.	O
(	O
This	O
is	O
lazy	O
computation	O
,	O
after	O
all	O
.	O
)	O
If	O
the	O
source	O
has	O
N	O
elements	O
,	O
the	O
tree	O
will	O
be	O
N	O
elements	O
wide	O
at	O
its	O
widest	O
,	O
and	O
it	O
will	O
be	O
lg	O
(	O
N	O
)	O
levels	O
deep	O
.	O
It	O
seems	O
to	O
me	O
-	O
-	O
and	O
once	O
again	O
,	O
I	O
'	O
m	O
not	O
a	O
C	O
#	O
or	O
.	O
NET	O
expert	O
-	O
-	O
that	O
this	O
will	O
cause	O
certain	O
innocuous	O
-	O
looking	O
calls	O
,	O
such	O
as	O
pivot	O
selection	O
via	O
ints	O
.	O
First	O
(	O
args	O
)	O
,	O
to	O
be	O
more	O
expensive	O
than	O
they	O
look	O
.	O
At	O
the	O
first	O
level	O
,	O
of	O
course	O
,	O
it	O
'	O
s	O
O	O
(	O
1	O
)	O
.	O
But	O
consider	O
a	O
partition	O
deep	O
in	O
the	O
tree	O
,	O
at	O
the	O
right	O
-	O
hand	O
edge	O
.	O
To	O
compute	O
the	O
first	O
element	O
of	O
this	O
partition	O
,	O
the	O
entire	O
source	O
has	O
to	O
be	O
traversed	O
,	O
an	O
O	O
(	O
N	O
)	O
operation	O
.	O
But	O
since	O
the	O
partitions	O
above	O
are	O
lazy	O
,	O
they	O
must	O
be	O
recomputed	O
,	O
requiring	O
O	O
(	O
lg	O
N	O
)	O
comparisons	O
.	O
So	O
selecting	O
the	O
pivot	O
would	O
be	O
an	O
O	O
(	O
N	O
lg	O
N	O
)	O
operation	O
,	O
which	O
is	O
as	O
expensive	O
as	O
an	O
entire	O
sort	O
.	O
But	O
we	O
don	O
'	O
t	O
actually	O
sort	O
until	O
we	O
traverse	O
the	O
returned	O
IEnumerable	O
.	O
In	O
the	O
standard	O
quicksort	O
algorithm	O
,	O
each	O
level	O
of	O
partitioning	O
doubles	O
the	O
number	O
of	O
partitions	O
.	O
Each	O
partition	O
is	O
only	O
half	O
the	O
size	O
,	O
so	O
each	O
level	O
remains	O
at	O
O	O
(	O
N	O
)	O
complexity	O
.	O
The	O
tree	O
of	O
partitions	O
is	O
O	O
(	O
lg	O
N	O
)	O
high	O
,	O
so	O
the	O
total	O
work	O
is	O
O	O
(	O
N	O
lg	O
N	O
)	O
.	O
With	O
the	O
tree	O
of	O
lazy	O
IEnumerables	O
,	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
there	O
are	O
N	O
partitions	O
.	O
Computing	O
each	O
partition	O
requires	O
a	O
traversal	O
of	O
N	O
elements	O
,	O
each	O
of	O
which	O
requires	O
lg	O
(	O
N	O
)	O
comparisons	O
up	O
the	O
tree	O
.	O
To	O
compute	O
all	O
the	O
partitions	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
,	O
then	O
,	O
requires	O
O	O
(	O
N	O
^	O
2	O
lg	O
N	O
)	O
comparisons	O
.	O
(	O
Is	O
this	O
right	O
?	O
I	O
can	O
hardly	O
believe	O
this	O
.	O
Somebody	O
please	O
check	O
this	O
for	O
me	O
.	O
)	O
In	O
any	O
case	O
,	O
it	O
is	O
indeed	O
cool	O
that	O
IEnumerable	O
can	O
be	O
used	O
this	O
way	O
to	O
build	O
up	O
complicated	O
structures	O
of	O
computation	O
.	O
But	O
if	O
it	O
does	O
increase	O
the	O
computational	O
complexity	O
as	O
much	O
as	O
I	O
think	O
it	O
does	O
,	O
it	O
would	O
seem	O
that	O
programming	O
this	O
way	O
is	O
something	O
that	O
should	O
be	O
avoided	O
unless	O
one	O
is	O
extremely	O
careful	O
.	O
Question	O
-	O
22036885	O
,	O
answer	O
-	O
22037068	O
As	O
said	O
in	O
API	O
#	O
blockquote	O
It	O
'	O
s	O
because	O
of	O
cannot	O
represent	O
double	O
value	O
exactly	O
.	O
So	O
you	O
have	O
to	O
use	O
BigDecimal	B-api_mention
bigDecimal	O
=	O
BigDecimal	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
of	O
BigDecimal	B-api_mention
bigDecimal	O
=	O
new	O
BigDecimal	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
24676877	O
,	O
answer	O
-	O
24681959	O
I	O
have	O
a	O
few	O
points	O
to	O
add	O
to	O
Brian	O
Goetz	O
'	O
excellent	O
answer	O
.	O
It	O
'	O
s	O
quite	O
common	O
to	O
return	O
a	O
Stream	B-api_mention
from	O
a	O
"	O
getter	O
"	O
style	O
method	O
call	O
.	O
See	O
the	O
Stream	B-api_mention
usage	O
page	O
in	O
the	O
Java	O
8	O
javadoc	O
and	O
look	O
for	O
"	O
methods	O
.	O
.	O
.	O
that	O
return	O
Stream	B-api_mention
"	O
for	O
the	O
packages	O
other	O
than	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
.	O
These	O
methods	O
are	O
usually	O
on	O
classes	O
that	O
represent	O
or	O
can	O
contain	O
multiple	O
values	O
or	O
aggregations	O
of	O
something	O
.	O
In	O
such	O
cases	O
,	O
APIs	O
typically	O
have	O
returned	O
collections	O
or	O
arrays	O
of	O
them	O
.	O
For	O
all	O
the	O
reasons	O
that	O
Brian	O
noted	O
in	O
his	O
answer	O
,	O
it	O
'	O
s	O
very	O
flexible	O
to	O
add	O
Stream	O
-	O
returning	O
methods	O
here	O
.	O
Many	O
of	O
these	O
classes	O
have	O
collections	O
-	O
or	O
array	O
-	O
returning	O
methods	O
already	O
,	O
because	O
the	O
classes	O
predate	O
the	O
Streams	B-api_mention
API	O
.	O
If	O
you	O
'	O
re	O
designing	O
a	O
new	O
API	O
,	O
and	O
it	O
makes	O
sense	O
to	O
provide	O
Stream	O
-	O
returning	O
methods	O
,	O
it	O
might	O
not	O
be	O
necessary	O
to	O
add	O
collection	O
-	O
returning	O
methods	O
as	O
well	O
.	O
Brian	O
mentioned	O
the	O
cost	O
of	O
"	O
materializing	O
"	O
the	O
values	O
into	O
a	O
collection	O
.	O
To	O
amplify	O
this	O
point	O
,	O
there	O
are	O
actually	O
two	O
costs	O
here	O
:	O
the	O
cost	O
of	O
storing	O
values	O
in	O
the	O
collection	O
(	O
memory	O
allocation	O
and	O
copying	O
)	O
and	O
also	O
the	O
cost	O
of	O
creating	O
the	O
values	O
in	O
the	O
first	O
place	O
.	O
The	O
latter	O
cost	O
can	O
often	O
be	O
reduced	O
or	O
avoided	O
by	O
taking	O
advantage	O
of	O
a	O
Stream	O
'	O
s	O
laziness	O
-	O
seeking	O
behavior	O
.	O
A	O
good	O
example	O
of	O
this	O
are	O
the	O
APIs	O
in	O
java	B-api_mention
.	I-api_mention
nio	I-api_mention
.	I-api_mention
file	I-api_mention
.	I-api_mention
Files	I-api_mention
:	O
#	O
pre	O
Not	O
only	O
does	O
readAllLines	B-api_mention
have	O
to	O
hold	O
the	O
entire	O
file	O
contents	O
in	O
memory	O
in	O
order	O
to	O
store	O
it	O
into	O
the	O
result	O
list	O
,	O
it	O
also	O
has	O
to	O
read	O
the	O
file	O
to	O
the	O
very	O
end	O
before	O
it	O
returns	O
the	O
list	O
.	O
The	O
lines	B-api_mention
method	O
can	O
return	O
almost	O
immediately	O
after	O
it	O
has	O
performed	O
some	O
setup	O
,	O
leaving	O
file	O
reading	O
and	O
line	O
breaking	O
until	O
later	O
when	O
it	O
'	O
s	O
necessary	O
-	O
-	O
or	O
not	O
at	O
all	O
.	O
This	O
is	O
a	O
huge	O
benefit	O
,	O
if	O
for	O
example	O
,	O
the	O
caller	O
is	O
interested	O
only	O
in	O
the	O
first	O
ten	O
lines	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
firstTen	O
=	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Of	O
course	O
considerable	O
memory	O
space	O
can	O
be	O
saved	O
if	O
the	O
caller	O
filters	O
the	O
stream	O
to	O
return	O
only	O
lines	O
matching	O
a	O
pattern	O
,	O
etc	O
.	O
An	O
idiom	O
that	O
seems	O
to	O
be	O
emerging	O
is	O
to	O
name	O
stream	O
-	O
returning	O
methods	O
after	O
the	O
plural	O
of	O
the	O
name	O
of	O
the	O
things	O
that	O
it	O
represents	O
or	O
contains	O
,	O
without	O
a	O
get	O
prefix	O
.	O
Also	O
,	O
while	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
reasonable	O
name	O
for	O
a	O
stream	O
-	O
returning	O
method	O
when	O
there	O
is	O
only	O
one	O
possible	O
set	O
of	O
values	O
to	O
be	O
returned	O
,	O
sometimes	O
there	O
are	O
classes	O
that	O
have	O
aggregations	O
of	O
multiple	O
types	O
of	O
values	O
.	O
For	O
example	O
,	O
suppose	O
you	O
have	O
some	O
object	O
that	O
contains	O
both	O
attributes	O
and	O
elements	O
.	O
You	O
might	O
provide	O
two	O
stream	O
-	O
returning	O
APIs	O
:	O
#	O
pre	O
Question	O
-	O
28770822	O
I	O
understand	O
the	O
use	O
of	O
the	O
@	O
Native	O
annotation	O
.	O
#	O
blockquote	O
However	O
,	O
while	O
reading	O
the	O
java	O
source	O
code	O
I	O
noticed	O
that	O
in	O
the	O
class	O
Integer	B-api_mention
and	O
Long	B-api_mention
the	O
SIZE	O
constant	O
is	O
@	O
Native	O
while	O
it	O
is	O
not	O
for	O
the	O
Float	B-api_mention
,	O
Byte	B-api_mention
,	O
Double	B-api_mention
,	O
Short	B-api_mention
and	O
Character	B-api_mention
.	O
Note	O
that	O
the	O
SIZE	O
constant	O
represents	O
the	O
number	O
of	O
bits	O
used	O
to	O
represent	O
the	O
actual	O
value	O
.	O
#	O
pre	O
Edit	O
:	O
I	O
just	O
noticed	O
that	O
this	O
also	O
applies	O
for	O
MAX	O
_	O
VALUE	O
and	O
MIN	O
_	O
VALUE	O
of	O
the	O
same	O
classes	O
.	O
Edit	O
2	O
:	O
I	O
had	O
spare	O
time	O
to	O
do	O
some	O
research	O
on	O
this	O
,	O
and	O
looking	O
at	O
the	O
header	O
files	O
of	O
the	O
Long	B-api_mention
,	O
Float	B-api_mention
etc	O
.	O
classes	O
I	O
had	O
hope	O
to	O
figure	O
out	O
that	O
the	O
constants	O
were	O
not	O
present	O
in	O
the	O
other	O
headers	O
,	O
but	O
unfortunately	O
they	O
are	O
.	O
#	O
pre	O
Why	O
is	O
the	O
SIZE	O
constant	O
only	O
@	O
Native	O
for	O
Integer	B-api_mention
and	O
Long	B-api_mention
?	O
Question	O
-	O
33477695	O
,	O
answer	O
-	O
33477803	O
The	O
java	O
.	O
time	O
API	O
in	O
general	O
does	O
have	O
nanosecond	O
precision	O
.	O
For	O
example	O
:	O
#	O
pre	O
Output	O
:	O
2015	O
-	O
11	O
-	O
02T12	O
:	O
38	O
:	O
00	O
,	O
123456789	O
+	O
0000	O
However	O
,	O
it	O
'	O
s	O
the	O
clock	O
value	O
returned	O
by	O
OffsetDateTime	O
.	O
now	O
(	O
args	O
)	O
which	O
is	O
returning	O
a	O
value	O
which	O
only	O
has	O
milliseconds	O
.	O
From	O
Clock	B-api_mention
implementation	O
in	O
Java	O
8	O
:	O
#	O
blockquote	O
So	O
there	O
'	O
s	O
nothing	O
inherently	O
imprecise	O
here	O
-	O
just	O
the	O
default	O
implementation	O
of	O
Clock	B-api_mention
using	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
could	O
potentially	O
create	O
your	O
own	O
more	O
precise	O
subclass	O
.	O
However	O
,	O
you	O
should	O
note	O
that	O
adding	O
more	O
precision	O
without	O
adding	O
more	O
accuracy	O
probably	O
isn	O
'	O
t	O
terribly	O
useful	O
.	O
(	O
There	O
are	O
times	O
when	O
it	O
might	O
be	O
,	O
admittedly	O
.	O
.	O
.	O
)	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
12619799	O
I	O
would	O
say	O
don	O
'	O
t	O
use	O
ARM	O
and	O
go	O
on	O
with	O
Closeable	B-api_mention
.	O
Use	O
method	O
like	O
,	O
#	O
pre	O
Also	O
you	O
should	O
consider	O
calling	O
close	O
of	O
BufferedWriter	B-api_mention
as	O
it	O
is	O
not	O
just	O
delegating	O
the	O
close	O
to	O
FileWriter	B-api_mention
,	O
but	O
it	O
does	O
some	O
cleanup	O
like	O
flushBuffer	B-api_mention
.	O
Question	O
-	O
29328785	O
,	O
answer	O
-	O
29330741	O
It	O
'	O
s	O
not	O
so	O
hard	O
to	O
track	O
down	O
the	O
reason	O
for	O
the	O
odd	O
behavior	O
.	O
The	O
divide	O
call	O
goes	O
to	O
#	O
pre	O
This	O
,	O
internally	O
,	O
delegates	O
to	O
another	O
divide	O
method	O
,	O
based	O
on	O
the	O
rounding	O
mode	O
:	O
#	O
pre	O
In	O
this	O
case	O
,	O
the	O
last	O
call	O
applies	O
.	O
Note	O
that	O
the	O
intVal	O
(	O
which	O
is	O
a	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
)	O
is	O
passed	O
directly	O
to	O
this	O
method	O
as	O
the	O
first	O
argument	O
:	O
#	O
pre	O
Finally	O
,	O
the	O
path	O
to	O
the	O
second	O
divideAndRound	O
is	O
taken	O
here	O
,	O
again	O
passing	O
the	O
dividend	O
on	O
(	O
which	O
was	O
the	O
intVal	O
of	O
the	O
original	O
BigDecimal	B-api_mention
)	O
,	O
ending	O
up	O
with	O
this	O
code	O
:	O
#	O
pre	O
And	O
this	O
is	O
where	O
the	O
error	O
is	O
introduced	O
:	O
The	O
mdivididend	O
is	O
a	O
mutable	O
BigInteger	B-api_mention
,	O
that	O
was	O
created	O
as	O
a	O
mutable	O
view	O
on	O
the	O
mag	O
array	O
of	O
the	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
x	O
from	O
the	O
original	O
call	O
.	O
The	O
division	O
modifies	O
the	O
mag	O
field	O
,	O
and	O
thus	O
,	O
the	O
state	O
of	O
the	O
(	O
now	O
not	O
-	O
so	O
-	O
immutable	O
)	O
BigDecimal	B-api_mention
.	O
This	O
is	O
clearly	O
a	O
bug	O
in	O
the	O
implementation	O
of	O
one	O
of	O
the	O
divide	O
methods	O
.	O
I	O
already	O
started	O
tracking	O
the	O
change	O
sets	O
of	O
the	O
OpenJDK	O
,	O
but	O
have	O
not	O
yet	O
spotted	O
the	O
definite	O
culprit	O
.	O
(	O
Edit	O
:	O
See	O
updates	O
below	O
)	O
(	O
A	O
side	O
note	O
:	O
Calling	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
doing	O
the	O
division	O
does	O
not	O
really	O
avoid	O
,	O
but	O
only	O
hide	O
the	O
bug	O
:	O
It	O
causes	O
a	O
string	O
cache	O
of	O
the	O
correct	O
state	O
to	O
be	O
created	O
internally	O
.	O
The	O
right	O
value	O
is	O
printed	O
,	O
but	O
the	O
internal	O
state	O
is	O
still	O
wrong	O
-	O
which	O
is	O
concerning	O
,	O
to	O
say	O
the	O
least	O
.	O
.	O
.	O
)	O
#	O
blockquote	O
Question	O
-	O
10904911	O
,	O
answer	O
-	O
10904956	O
What	O
you	O
want	O
is	O
the	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
There	O
is	O
a	O
static	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
helper	O
method	O
for	O
every	O
different	O
primitive	O
java	O
type	O
;	O
the	O
one	O
for	O
int	O
[	O
]	O
says	O
this	O
:	O
#	O
blockquote	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276463	O
If	O
all	O
of	O
the	O
streams	O
have	O
been	O
instantiated	O
then	O
closing	O
only	O
the	O
outermost	O
is	O
just	O
fine	O
.	O
The	O
documentation	O
on	O
Closeable	B-api_mention
interface	O
states	O
that	O
close	O
method	O
:	O
#	O
blockquote	O
The	O
releasing	O
system	O
resources	O
includes	O
closing	O
streams	O
.	O
It	O
also	O
states	O
that	O
:	O
#	O
blockquote	O
So	O
if	O
you	O
close	O
them	O
explicitly	O
afterwards	O
,	O
nothing	O
wrong	O
will	O
happen	O
.	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
17909839	O
The	O
correct	O
way	O
to	O
do	O
this	O
is	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
I	O
'	O
d	O
like	O
to	O
add	O
to	O
the	O
other	O
great	O
answers	O
here	O
and	O
explain	O
how	O
you	O
could	O
have	O
used	O
the	O
Javadocs	O
to	O
answer	O
your	O
question	O
.	O
The	O
Javadoc	O
for	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
no	O
arguments	O
)	O
is	O
here	O
.	O
As	O
you	O
can	O
see	O
,	O
this	O
method	O
returns	O
an	O
Object	B-api_mention
[	O
]	O
and	O
not	O
String	B-api_mention
[	O
]	O
which	O
is	O
an	O
array	O
of	O
the	O
runtime	O
type	O
of	O
your	O
list	O
:	O
#	O
blockquote	O
Right	O
below	O
that	O
method	O
,	O
though	O
,	O
is	O
the	O
Javadoc	O
for	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
As	O
you	O
can	O
see	O
,	O
this	O
method	O
returns	O
a	O
T	O
[	O
]	O
where	O
T	O
is	O
the	O
type	O
of	O
the	O
array	O
you	O
pass	O
in	O
.	O
At	O
first	O
this	O
seems	O
like	O
what	O
you	O
'	O
re	O
looking	O
for	O
,	O
but	O
it	O
'	O
s	O
unclear	O
exactly	O
why	O
you	O
'	O
re	O
passing	O
in	O
an	O
array	O
(	O
are	O
you	O
adding	O
to	O
it	O
,	O
using	O
it	O
for	O
just	O
the	O
type	O
,	O
etc	O
)	O
.	O
The	O
documentation	O
makes	O
it	O
clear	O
that	O
the	O
purpose	O
of	O
the	O
passed	O
array	O
is	O
essentially	O
to	O
define	O
the	O
type	O
of	O
array	O
to	O
return	O
(	O
which	O
is	O
exactly	O
your	O
use	O
case	O
)	O
:	O
#	O
blockquote	O
Of	O
course	O
,	O
an	O
understanding	O
of	O
generics	O
(	O
as	O
described	O
in	O
the	O
other	O
answers	O
)	O
is	O
required	O
to	O
really	O
understand	O
the	O
difference	O
between	O
these	O
two	O
methods	O
.	O
Nevertheless	O
,	O
if	O
you	O
first	O
go	O
to	O
the	O
Javadocs	O
,	O
you	O
will	O
usually	O
find	O
your	O
answer	O
and	O
then	O
see	O
for	O
yourself	O
what	O
else	O
you	O
need	O
to	O
learn	O
(	O
if	O
you	O
really	O
do	O
)	O
.	O
Also	O
note	O
that	O
reading	O
the	O
Javadocs	O
here	O
helps	O
you	O
to	O
understand	O
what	O
the	O
structure	O
of	O
the	O
array	O
you	O
pass	O
in	O
should	O
be	O
.	O
Though	O
it	O
may	O
not	O
really	O
practically	O
matter	O
,	O
you	O
should	O
not	O
pass	O
in	O
an	O
empty	O
array	O
like	O
this	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Because	O
,	O
from	O
the	O
doc	O
,	O
this	O
implementation	O
checks	O
if	O
the	O
array	O
is	O
large	O
enough	O
to	O
contain	O
the	O
collection	O
;	O
if	O
not	O
,	O
it	O
allocates	O
a	O
new	O
array	O
of	O
the	O
correct	O
size	O
and	O
type	O
(	O
using	O
reflection	O
)	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
the	O
extra	O
overhead	O
in	O
creating	O
a	O
new	O
array	O
when	O
you	O
could	O
easily	O
pass	O
in	O
the	O
size	O
.	O
As	O
is	O
usually	O
the	O
case	O
,	O
the	O
Javadocs	O
provide	O
you	O
with	O
a	O
wealth	O
of	O
information	O
and	O
direction	O
.	O
Hey	O
wait	O
a	O
minute	O
,	O
what	O
'	O
s	O
reflection	O
?	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31188818	O
Ironically	O
default	O
methods	O
in	O
interfaces	O
were	O
introduced	O
to	O
allow	O
existing	O
libraries	O
using	O
those	O
interfaces	O
not	O
to	O
break	O
,	O
while	O
introducing	O
massive	O
new	O
functionality	O
in	O
the	O
interfaces	O
.	O
(	O
backward	O
compatibility	O
.	O
)	O
Conflicts	O
like	O
that	O
sort	O
method	O
might	O
arise	O
.	O
Something	O
to	O
pay	O
for	O
the	O
extra	O
functionality	O
.	O
In	O
your	O
case	O
also	O
something	O
to	O
investigate	O
(	O
should	O
new	O
functionality	O
be	O
used	O
instead	O
?	O
)	O
.	O
Java	O
forward	O
compatibility	O
breaks	O
are	O
little	O
,	O
more	O
in	O
its	O
typing	O
system	O
,	O
which	O
was	O
constantly	O
enlarged	O
.	O
First	O
with	O
generic	O
types	O
and	O
now	O
with	O
inferred	O
types	O
from	O
functional	O
interfaces	O
.	O
From	O
version	O
to	O
version	O
and	O
from	O
compiler	O
to	O
compiler	O
there	O
were	O
slight	O
differences	O
.	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667354	O
Enum	O
is	O
just	O
a	O
little	O
bit	O
special	O
class	O
.	O
Enums	O
can	O
store	O
additional	O
fields	O
,	O
implement	O
methods	O
etc	O
.	O
For	O
example	O
#	O
pre	O
Now	O
you	O
can	O
say	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
see	O
output	O
:	O
a	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
33687544	O
For	O
HTML	O
response	O
below	O
code	O
can	O
be	O
used	O
bufString	O
.	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
24547673	O
,	O
answer	O
-	O
24547831	O
It	O
'	O
s	O
a	O
curious	O
omission	O
.	O
You	O
would	O
have	O
to	O
mark	O
the	O
field	O
as	O
transient	O
and	O
provide	O
your	O
own	O
custom	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
wrote	O
the	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
result	O
itself	O
,	O
and	O
a	O
readObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
restored	O
the	O
Optional	B-api_mention
by	O
reading	O
that	O
result	O
from	O
the	O
stream	O
.	O
Not	O
forgetting	O
to	O
call	O
defaultWriteObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
defaultReadObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
respectively	O
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
7520464	O
In	O
general	O
,	O
the	O
answer	O
to	O
your	O
question	O
is	O
"	O
yes	O
"	O
,	O
but	O
.	O
.	O
.	O
#	O
li	O
equals	B-api_mention
will	O
only	O
compare	O
what	O
it	O
is	O
written	O
to	O
compare	O
,	O
no	O
more	O
,	O
no	O
less	O
.	O
#	O
li	O
if	O
a	O
class	O
does	O
not	O
override	O
the	O
equals	O
method	O
,	O
then	O
it	O
defaults	O
to	O
the	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
closest	O
parent	O
class	O
that	O
has	O
overridden	O
this	O
method	O
.	O
#	O
li	O
If	O
no	O
parent	O
classes	O
have	O
provided	O
an	O
override	O
,	O
then	O
it	O
defaults	O
to	O
the	O
method	O
from	O
the	O
ultimate	O
parent	O
class	O
,	O
Object	B-api_mention
,	O
and	O
so	O
you	O
'	O
re	O
left	O
with	O
the	O
Object	B-api_mention
#	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Per	O
the	O
Object	O
API	O
this	O
is	O
the	O
same	O
as	O
=	O
=	O
;	O
that	O
is	O
,	O
it	O
returns	O
true	O
if	O
and	O
only	O
if	O
both	O
variables	O
refer	O
to	O
the	O
same	O
object	O
,	O
if	O
their	O
references	O
are	O
one	O
and	O
the	O
same	O
.	O
Thus	O
you	O
will	O
be	O
testing	O
for	O
object	O
equality	O
and	O
not	O
functional	O
equality	O
.	O
#	O
li	O
Always	O
remember	O
to	O
override	O
hashCode	B-api_mention
if	O
you	O
override	O
equals	O
so	O
as	O
not	O
to	O
"	O
break	O
the	O
contract	O
"	O
.	O
As	O
per	O
the	O
API	O
,	O
the	O
result	O
returned	O
from	O
the	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
two	O
objects	O
must	O
be	O
the	O
same	O
if	O
their	O
equals	O
methods	O
shows	O
that	O
they	O
are	O
equivalent	O
.	O
The	O
converse	O
is	O
not	O
necessarily	O
true	O
.	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
15633542	O
Nice	O
question	O
.	O
I	O
'	O
ve	O
got	O
of	O
the	O
following	O
five	O
6	O
methods	O
to	O
do	O
it	O
.	O
#	O
pre	O
#	O
blockquote	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
in	O
turn	O
sets	O
the	O
value	O
char	O
array	O
.	O
#	O
pre	O
On	O
the	O
other	O
hand	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
the	O
following	O
package	O
private	O
constructor	O
.	O
#	O
pre	O
Source	O
code	O
from	O
String	B-api_mention
.	O
java	O
in	O
Java	O
8	O
source	O
code	O
#	O
blockquote	O
#	O
li	O
Java	O
:	O
:	O
How	O
to	O
convert	O
primitive	O
char	O
to	O
String	B-api_mention
in	O
Java	O
#	O
li	O
How	O
to	O
convert	O
Char	B-api_mention
to	O
String	B-api_mention
in	O
Java	O
with	O
Example	O
Question	O
-	O
27683759	O
,	O
answer	O
-	O
27684042	O
In	O
a	O
nutshell	O
,	O
this	O
creates	O
an	O
empty	O
,	O
immutable	O
list	O
of	O
strings	O
.	O
Let	O
'	O
s	O
look	O
at	O
the	O
expression	O
bit	O
by	O
bit	O
.	O
Collections	B-api_mention
is	O
the	O
name	O
of	O
a	O
class	O
.	O
From	O
the	O
Javadoc	O
:	O
#	O
blockquote	O
emptyList	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
the	O
name	O
of	O
a	O
static	O
method	O
defined	O
in	O
the	O
Collections	B-api_mention
class	O
(	O
Javadoc	O
)	O
.	O
It	O
is	O
a	O
generic	O
method	O
,	O
and	O
the	O
<	O
String	O
>	O
in	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
specifies	O
the	O
generic	O
type	O
argument	O
.	O
The	O
method	O
returns	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
in	O
this	O
case	O
is	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
:	O
a	O
list	O
of	O
strings	O
.	O
More	O
specifically	O
,	O
it	O
returns	O
an	O
empty	O
,	O
immutable	O
list	O
of	O
strings	O
.	O
Question	O
-	O
29280857	O
,	O
answer	O
-	O
29382161	O
As	O
stated	O
previously	O
,	O
you	O
should	O
lock	O
on	O
both	O
accounts	O
,	O
always	O
in	O
the	O
same	O
order	O
.	O
The	O
key	O
part	O
,	O
however	O
,	O
is	O
ensuring	O
both	O
high	O
granularity	O
and	O
singularity	O
across	O
the	O
VM	O
instance	O
.	O
This	O
can	O
be	O
done	O
using	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
12576156	O
,	O
answer	O
-	O
12576308	O
Have	O
you	O
considered	O
@	O
Autowired	O
ing	O
the	O
constructor	O
or	O
a	O
setter	O
and	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
ing	O
in	O
the	O
body	O
?	O
#	O
pre	O
I	O
tend	O
to	O
prefer	O
doing	O
my	O
autowiring	O
in	O
one	O
of	O
these	O
ways	O
to	O
enhance	O
the	O
testability	O
of	O
my	O
code	O
.	O
Question	O
-	O
12539365	O
,	O
answer	O
-	O
12562433	O
This	O
is	O
great	O
question	O
!	O
I	O
think	O
the	O
root	O
cause	O
of	O
it	O
is	O
the	O
following	O
,	O
we	O
are	O
using	O
JUnit	O
not	O
only	O
for	O
unit	O
testing	O
.	O
So	O
the	O
question	O
should	O
be	O
splited	O
up	O
:	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
black	O
-	O
box	O
unit	O
-	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
white	O
-	O
box	O
unit	O
-	O
testing	O
?	O
so	O
if	O
we	O
will	O
ignore	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
,	O
the	O
question	O
can	O
be	O
rephrased	O
"	O
Using	O
white	O
-	O
box	O
unit	O
-	O
testing	O
with	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
creates	O
great	O
couple	O
between	O
unit	O
test	O
and	O
my	O
could	O
implementation	O
,	O
can	O
I	O
make	O
some	O
"	O
grey	O
-	O
box	O
"	O
unit	O
-	O
testing	O
and	O
what	O
rules	O
of	O
thumb	O
I	O
should	O
use	O
for	O
this	O
"	O
.	O
Now	O
,	O
let	O
'	O
s	O
go	O
through	O
all	O
of	O
this	O
step	O
-	O
by	O
-	O
step	O
.	O
*	O
-	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
*	O
I	O
think	O
the	O
answer	O
is	O
clearly	O
no	O
,	O
moreover	O
you	O
shouldn	O
'	O
t	O
use	O
mocks	O
for	O
this	O
.	O
Your	O
test	O
should	O
be	O
as	O
close	O
to	O
real	O
application	O
as	O
possible	O
.	O
You	O
are	O
testing	O
complete	O
use	O
case	O
,	O
not	O
isolated	O
part	O
of	O
the	O
application	O
.	O
*	O
black	O
-	O
box	O
vs	O
white	O
-	O
box	O
unit	O
-	O
testing	O
black	O
-	O
box	O
state	O
If	O
you	O
are	O
using	O
white	O
-	O
box	O
approach	O
what	O
is	O
you	O
really	O
doing	O
,	O
you	O
'	O
re	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
.	O
In	O
this	O
approach	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
should	O
verify	O
that	O
your	O
unit	O
behaves	O
as	O
you	O
'	O
re	O
expecting	O
to	O
.	O
rules	O
of	O
thumbs	O
for	O
grey	O
-	O
box	O
-	O
testing	O
The	O
problem	O
with	O
white	O
-	O
box	O
testing	O
is	O
it	O
creates	O
a	O
high	O
coupling	O
.	O
One	O
possible	O
solution	O
is	O
to	O
do	O
grey	O
-	O
box	O
-	O
testing	O
,	O
not	O
white	O
-	O
box	O
-	O
testing	O
.	O
This	O
is	O
sort	O
of	O
combination	O
of	O
black	O
&	O
white	O
box	O
testing	O
.	O
You	O
are	O
really	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
like	O
in	O
white	O
-	O
box	O
testing	O
,	O
but	O
in	O
general	O
you	O
make	O
it	O
implementation	O
-	O
agnostic	O
when	O
possible	O
.	O
When	O
it	O
is	O
possible	O
,	O
you	O
will	O
just	O
make	O
a	O
check	O
like	O
in	O
black	O
-	O
box	O
case	O
,	O
just	O
asserts	O
that	O
output	O
is	O
what	O
is	O
your	O
expected	O
to	O
be	O
.	O
So	O
,	O
the	O
essence	O
of	O
your	O
question	O
is	O
when	O
it	O
is	O
possible	O
.	O
This	O
is	O
really	O
hard	O
.	O
I	O
don	O
'	O
t	O
have	O
a	O
good	O
example	O
,	O
but	O
I	O
can	O
give	O
you	O
to	O
examples	O
.	O
In	O
the	O
case	O
that	O
was	O
mentioned	O
above	O
with	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
vs	O
equalsIgnoreCase	B-api_mention
(	I-api_mention
)	I-api_mention
you	O
shouldn	O
'	O
t	O
call	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
just	O
assert	O
the	O
output	O
.	O
If	O
you	O
couldn	O
'	O
t	O
do	O
it	O
,	O
break	O
down	O
your	O
code	O
to	O
the	O
smaller	O
unit	O
,	O
until	O
you	O
can	O
do	O
it	O
.	O
On	O
the	O
other	O
hand	O
,	O
suppose	O
you	O
have	O
some	O
@	O
Service	O
and	O
you	O
are	O
writting	O
@	O
Web	O
-	O
Service	O
that	O
is	O
essentially	O
wrapper	O
upon	O
your	O
@	O
Service	O
-	O
it	O
delegates	O
all	O
calls	O
to	O
the	O
@	O
Service	O
(	O
and	O
making	O
some	O
extra	O
error	O
handling	O
)	O
.	O
In	O
this	O
case	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
shouldn	O
'	O
t	O
duplicate	O
all	O
of	O
your	O
checks	O
that	O
you	O
did	O
for	O
the	O
@	O
Serive	O
,	O
verifying	O
that	O
you	O
'	O
re	O
calling	O
to	O
@	O
Service	O
with	O
correct	O
parammeter	O
list	O
is	O
sufficient	O
.	O
Question	O
-	O
31202946	O
Why	O
was	O
the	O
Thread	B-api_mention
class	O
implemented	O
as	O
a	O
regular	O
class	O
and	O
not	O
an	O
abstract	O
class	O
with	O
run	O
(	O
args	O
)	O
method	O
being	O
abstract	O
.	O
Will	O
it	O
possibly	O
introduce	O
any	O
problems	O
?	O
Or	O
does	O
it	O
have	O
any	O
use	O
in	O
being	O
this	O
way	O
?	O
Also	O
,	O
the	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
supposed	O
to	O
be	O
a	O
very	O
specific	O
method	O
whose	O
functionality	O
cannot	O
be	O
implemented	O
by	O
any	O
other	O
class	O
(	O
If	O
I	O
am	O
not	O
wrong	O
)	O
.	O
And	O
hence	O
I	O
guess	O
the	O
final	O
keyword	O
would	O
be	O
apt	O
for	O
this	O
more	O
than	O
any	O
other	O
method	O
.	O
But	O
I	O
am	O
able	O
to	O
override	O
this	O
method	O
and	O
use	O
it	O
as	O
I	O
like	O
,	O
#	O
pre	O
It	O
obviously	O
only	O
printed	O
,	O
#	O
blockquote	O
Is	O
there	O
any	O
use	O
in	O
overriding	O
other	O
than	O
confusing	O
the	O
engineer	O
replacing	O
you	O
?	O
If	O
not	O
,	O
why	O
was	O
the	O
method	O
not	O
declared	O
final	O
in	O
Thread	B-api_mention
class	O
?	O
Question	O
-	O
23453287	O
,	O
answer	O
-	O
23456085	O
It	O
will	O
be	O
hard	O
to	O
find	O
and	O
identify	O
"	O
THE	O
"	O
answer	O
,	O
for	O
the	O
resons	O
mentioned	O
in	O
the	O
comments	O
from	O
@	O
EJP	O
:	O
There	O
are	O
roughly	O
2	O
(	O
+	O
/	O
-	O
2	O
)	O
people	O
in	O
the	O
world	O
who	O
can	O
give	O
the	O
definite	O
answer	O
at	O
all	O
.	O
And	O
in	O
doubt	O
,	O
the	O
answer	O
might	O
just	O
be	O
something	O
like	O
"	O
Supporting	O
final	O
default	O
methods	O
did	O
not	O
seem	O
to	O
be	O
worth	O
the	O
effort	O
of	O
restructuring	O
the	O
internal	O
call	O
resolution	O
mechanisms	O
"	O
.	O
This	O
is	O
speculation	O
,	O
of	O
course	O
,	O
but	O
it	O
is	O
at	O
least	O
backed	O
by	O
subtle	O
evidences	O
,	O
like	O
this	O
Statement	O
(	O
by	O
one	O
of	O
the	O
two	O
persons	O
)	O
in	O
the	O
OpenJDK	O
mailing	O
list	O
:	O
#	O
blockquote	O
and	O
trivial	O
facts	O
like	O
that	O
a	O
method	O
is	O
simply	O
not	O
considered	O
to	O
be	O
a	O
(	O
really	O
)	O
final	O
method	O
when	O
it	O
is	O
a	O
default	O
method	O
,	O
as	O
currently	O
implemented	O
in	O
the	O
Method	B-api_mention
:	I-api_mention
:	I-api_mention
is	I-api_mention
_	I-api_mention
final	I-api_mention
_	I-api_mention
method	I-api_mention
method	O
in	O
the	O
OpenJDK	O
.	O
Further	O
really	O
"	O
authorative	O
"	O
information	O
is	O
indeed	O
hard	O
to	O
find	O
,	O
even	O
with	O
excessive	O
websearches	O
and	O
by	O
reading	O
commit	O
logs	O
.	O
I	O
thought	O
that	O
it	O
might	O
be	O
related	O
to	O
potential	O
ambiguities	O
during	O
the	O
resolution	O
of	O
interface	O
method	O
calls	O
with	O
the	O
invokeinterface	B-api_mention
instruction	O
and	O
and	O
class	O
method	O
calls	O
,	O
corresponding	O
to	O
the	O
invokevirtual	B-api_mention
instruction	O
:	O
For	O
the	O
invokevirtual	B-api_mention
instruction	O
,	O
there	O
may	O
be	O
a	O
simple	O
vtable	O
lookup	O
,	O
because	O
the	O
method	O
must	O
either	O
be	O
inherited	O
from	O
a	O
superclass	O
,	O
or	O
implemented	O
by	O
the	O
class	O
directly	O
.	O
In	O
contrast	O
to	O
that	O
,	O
an	O
invokeinterface	B-api_mention
call	O
must	O
examine	O
the	O
respective	O
call	O
site	O
to	O
find	O
out	O
which	O
interface	O
this	O
call	O
actually	O
refers	O
to	O
(	O
this	O
is	O
explained	O
in	O
more	O
detail	O
in	O
the	O
InterfaceCalls	O
page	O
of	O
the	O
HotSpot	O
Wiki	O
)	O
.	O
However	O
,	O
final	O
methods	O
do	O
either	O
not	O
get	O
inserted	O
into	O
the	O
vtable	O
at	O
all	O
,	O
or	O
replace	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
.	O
Line	O
333	O
)	O
,	O
and	O
similarly	O
,	O
default	O
methods	O
are	O
replacing	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
,	O
Line	O
202	O
)	O
.	O
So	O
the	O
actual	O
reason	O
(	O
and	O
thus	O
,	O
the	O
answer	O
)	O
must	O
be	O
hidden	O
deeper	O
inside	O
the	O
(	O
rather	O
complex	O
)	O
method	O
call	O
resolution	O
mechanisms	O
,	O
but	O
maybe	O
these	O
references	O
will	O
nevertheless	O
be	O
considered	O
as	O
being	O
helpful	O
,	O
be	O
it	O
only	O
for	O
others	O
that	O
manage	O
to	O
derive	O
the	O
actual	O
answer	O
from	O
that	O
.	O
Question	O
-	O
25850328	O
I	O
was	O
being	O
taught	O
that	O
Marker	O
interface	O
in	O
Java	O
is	O
an	O
empty	O
interface	O
and	O
is	O
used	O
to	O
signal	O
to	O
compiler	O
or	O
JVM	O
that	O
the	O
objects	O
of	O
the	O
class	O
implementing	O
this	O
interface	O
must	O
be	O
treated	O
in	O
a	O
special	O
way	O
,	O
like	O
serializing	O
,	O
cloning	O
,	O
etc	O
.	O
But	O
lately	O
I	O
have	O
learned	O
that	O
it	O
actually	O
has	O
nothing	O
to	O
do	O
with	O
the	O
compiler	O
or	O
the	O
JVM	O
.	O
For	O
example	O
,	O
in	O
case	O
of	O
Serializable	B-api_mention
interface	O
the	O
method	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
ObjectOutputStream	B-api_mention
does	O
something	O
like	O
instanceOf	B-api_mention
Serializable	I-api_mention
to	O
detect	O
whether	O
the	O
class	O
implements	O
Serializable	B-api_mention
&	O
throws	O
NotSerializableException	B-api_mention
accordingly	O
.	O
Everything	O
is	O
handled	O
in	O
the	O
code	O
and	O
this	O
seems	O
to	O
be	O
a	O
design	O
-	O
pattern	O
so	O
I	O
think	O
we	O
can	O
define	O
our	O
own	O
marker	O
interfaces	O
.	O
Now	O
my	O
doubts	O
:	O
#	O
li	O
Is	O
the	O
definition	O
of	O
a	O
marker	O
interface	O
mentioned	O
above	O
in	O
1st	O
point	O
wrong	O
?	O
How	O
can	O
we	O
define	O
a	O
Marker	B-api_mention
interface	O
then	O
?	O
#	O
li	O
And	O
instead	O
of	O
using	O
the	O
instanceOf	B-api_mention
operator	O
why	O
can	O
'	O
t	O
the	O
method	O
be	O
something	O
like	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
that	O
there	O
is	O
a	O
compile	O
-	O
time	O
type	O
checking	O
rather	O
than	O
runtime	O
?	O
#	O
li	O
How	O
are	O
Annotations	B-api_mention
better	O
than	O
Marker	B-api_mention
Interfaces	O
?	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29502668	O
#	O
blockquote	O
It	O
'	O
s	O
checking	O
simple	O
equality	O
(	O
likely	O
for	O
the	O
purpose	O
of	O
a	O
micro	O
-	O
optimization	O
,	O
but	O
more	O
on	O
that	O
later	O
)	O
.	O
The	O
unusual	O
casting	O
is	O
necessary	O
because	O
Class	O
<	O
T	O
>	O
(	O
the	O
type	O
of	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
and	O
Class	O
<	O
T	O
>	O
are	O
incomparable	O
types	O
.	O
Basically	O
,	O
for	O
an	O
equality	O
comparison	O
with	O
=	O
=	O
to	O
compile	O
,	O
one	O
of	O
the	O
sides	O
has	O
to	O
be	O
a	O
subtype	O
or	O
supertype	O
of	O
the	O
other	O
.	O
I	O
.	O
e	O
.	O
we	O
can	O
'	O
t	O
do	O
:	O
#	O
pre	O
The	O
rules	O
for	O
generic	O
types	O
are	O
a	O
bit	O
more	O
complicated	O
and	O
there	O
are	O
a	O
few	O
cases	O
where	O
a	O
comparison	O
doesn	O
'	O
t	O
compile	O
,	O
but	O
it	O
may	O
still	O
evaluate	O
to	O
true	O
.	O
The	O
reason	O
Class	O
<	O
T	O
>	O
is	O
not	O
a	O
supertype	O
of	O
Class	O
<	O
T	O
>	O
,	O
despite	O
Object	B-api_mention
[	O
]	O
being	O
a	O
supertype	O
of	O
all	O
object	O
array	O
types	O
,	O
is	O
that	O
Java	O
generics	O
are	O
invariant	O
without	O
the	O
presence	O
of	O
a	O
wildcard	O
.	O
Another	O
way	O
to	O
do	O
the	O
comparison	O
would	O
be	O
:	O
(	O
newType	O
=	O
=	O
(	O
Class	O
<	O
T	O
>	O
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
#	O
blockquote	O
#	O
li	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
creates	O
an	O
array	O
the	O
normal	O
way	O
,	O
of	O
a	O
type	O
that	O
is	O
statically	O
known	O
.	O
Remember	O
,	O
the	O
code	O
has	O
just	O
checked	O
that	O
T	O
[	O
]	O
is	O
Object	B-api_mention
[	O
]	O
.	O
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
reflection	O
to	O
dynamically	O
create	O
an	O
array	O
of	O
the	O
Class	O
type	O
passed	O
in	O
.	O
#	O
blockquote	O
An	O
operation	O
using	O
reflection	O
is	O
generally	O
slower	O
than	O
its	O
non	O
-	O
reflective	O
counterpart	O
.	O
The	O
reflection	O
tutorial	O
says	O
:	O
#	O
blockquote	O
Java	O
SE	O
is	O
filled	O
with	O
micro	O
-	O
optimization	O
like	O
this	O
.	O
The	O
writers	O
of	O
SE	O
try	O
to	O
squeeze	O
everything	O
they	O
can	O
out	O
of	O
it	O
.	O
But	O
I	O
wouldn	O
'	O
t	O
be	O
worried	O
about	O
a	O
performance	O
hit	O
in	O
this	O
case	O
:	O
newInstance	O
and	O
copyOf	B-api_mention
are	O
HotSpot	O
intrinsics	O
.	O
This	O
means	O
that	O
ideally	O
calls	O
to	O
these	O
methods	O
get	O
replaced	O
with	O
machine	O
-	O
specific	O
assembly	O
.	O
Anecdotally	O
,	O
I	O
ran	O
some	O
tests	O
and	O
found	O
the	O
difference	O
between	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
and	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
be	O
negligible	O
.	O
The	O
code	O
in	O
the	O
question	O
is	O
probably	O
a	O
relic	O
,	O
although	O
it	O
may	O
still	O
be	O
useful	O
on	O
less	O
well	O
-	O
equipped	O
JVMs	O
.	O
Reflection	O
can	O
also	O
be	O
disabled	O
in	O
certain	O
contexts	O
with	O
strict	O
security	O
(	O
such	O
as	O
an	O
applet	O
)	O
,	O
but	O
not	O
typically	O
for	O
a	O
normal	O
desktop	O
application	O
.	O
#	O
blockquote	O
In	O
general	O
,	O
you	O
will	O
probably	O
never	O
use	O
this	O
overload	O
.	O
This	O
overload	O
is	O
only	O
useful	O
if	O
you	O
want	O
to	O
change	O
the	O
type	O
of	O
the	O
array	O
.	O
#	O
li	O
Widening	O
:	O
#	O
pre	O
#	O
li	O
Narrowing	O
:	O
#	O
pre	O
It	O
'	O
s	O
more	O
typical	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
T	I-api_mention
[	I-api_mention
]	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
14833008	O
,	O
answer	O
-	O
14833048	O
You	O
need	O
to	O
escape	O
the	O
dot	O
if	O
you	O
want	O
to	O
split	O
on	O
a	O
literal	O
dot	O
:	O
String	B-api_mention
extensionRemoved	O
=	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
Otherwise	O
you	O
are	O
splitting	O
on	O
the	O
regex	O
.	O
,	O
which	O
means	O
"	O
any	O
character	O
"	O
.	O
Note	O
the	O
double	O
backslash	O
needed	O
to	O
create	O
a	O
single	O
backslash	O
in	O
the	O
regex	O
.	O
You	O
'	O
re	O
getting	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
because	O
your	O
input	O
string	O
is	O
just	O
a	O
dot	O
,	O
ie	O
StringLiteral	O
,	O
which	O
is	O
an	O
edge	O
case	O
that	O
produces	O
an	O
empty	O
array	O
when	O
split	O
on	O
dot	O
;	O
split	B-api_mention
(	I-api_mention
regex	I-api_mention
)	I-api_mention
removes	O
all	O
trailing	O
blanks	O
from	O
the	O
result	O
,	O
but	O
since	O
splitting	O
a	O
dot	O
on	O
a	O
dot	O
leaves	O
only	O
two	O
blanks	O
,	O
after	O
trailing	O
blanks	O
are	O
removed	O
you	O
'	O
re	O
left	O
with	O
an	O
empty	O
array	O
.	O
To	O
avoid	O
getting	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
for	O
this	O
edge	O
case	O
,	O
use	O
the	O
overloaded	O
version	O
of	O
split	B-api_mention
(	I-api_mention
regex	I-api_mention
,	I-api_mention
limit	I-api_mention
)	I-api_mention
,	O
which	O
has	O
a	O
second	O
parameter	O
that	O
is	O
the	O
size	O
limit	O
for	O
the	O
resulting	O
array	O
.	O
When	O
limit	O
is	O
negative	O
,	O
the	O
behaviour	O
of	O
removing	O
trailing	O
blanks	O
from	O
the	O
resulting	O
array	O
is	O
disabled	O
:	O
StringLiteral	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
returns	O
an	O
array	O
of	O
two	O
blanks	O
,	O
ie	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
ie	O
,	O
when	O
filename	O
is	O
just	O
a	O
dot	O
StringLiteral	O
,	O
calling	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
will	O
return	O
a	O
blank	O
,	O
but	O
calling	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
will	O
throw	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
.	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
4871135	O
Current	O
working	O
directory	O
is	O
defined	O
differently	O
in	O
different	O
Java	O
implementations	O
For	O
certain	O
prior	O
to	O
Java	O
7	O
there	O
was	O
no	O
consistent	O
way	O
to	O
get	O
the	O
working	O
directory	O
.	O
You	O
could	O
work	O
around	O
this	O
by	O
launching	O
Java	O
with	O
-	O
D	O
and	O
defining	O
a	O
variable	O
to	O
hold	O
the	O
info	O
Something	O
like	O
java	O
-	O
Dcom	O
.	O
mycompany	O
.	O
workingDir	O
=	O
StringLiteral	O
That	O
'	O
s	O
not	O
quite	O
right	O
,	O
but	O
you	O
get	O
the	O
idea	O
.	O
Then	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
Question	O
-	O
16232833	O
,	O
answer	O
-	O
16250729	O
change	O
your	O
return	O
type	O
to	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
then	O
you	O
can	O
use	O
below	O
for	O
400	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
for	O
correct	O
request	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
UPDATE	O
1	O
after	O
spring	O
4	O
.	O
1	O
there	O
are	O
helper	O
methods	O
in	O
ResponseEntity	B-api_mention
could	O
be	O
used	O
as	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
status	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
body	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
ok	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
