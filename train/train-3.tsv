Question	O
-	O
32334319	O
,	O
answer	O
-	O
39380442	O
As	O
stated	O
across	O
many	O
of	O
the	O
answers	O
.	O
The	O
Quicksort	O
is	O
used	O
by	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
for	O
sorting	O
primitive	O
collections	O
because	O
stability	O
isn	O
'	O
t	O
required	O
(	O
you	O
won	O
'	O
t	O
know	O
or	O
care	O
if	O
two	O
identical	O
ints	O
were	O
swapped	O
in	O
the	O
sort	O
)	O
MergeSort	O
or	O
more	O
specifically	O
Timsort	O
is	O
used	O
by	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
for	O
sorting	O
collections	O
of	O
objects	O
.	O
Stability	O
is	O
required	O
.	O
Quicksort	O
does	O
not	O
provide	O
for	O
stability	O
,	O
Timsort	O
does	O
.	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
delegates	O
to	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
which	O
is	O
why	O
you	O
see	O
the	O
javadoc	O
referencing	O
the	O
MergeSort	O
.	O
Question	O
-	O
32046078	O
I	O
have	O
a	O
server	O
side	O
implemented	O
in	O
Scala	O
and	O
React	O
/	O
Flux	O
based	O
front	O
end	O
.	O
My	O
services	O
return	O
Futures	O
and	O
they	O
are	O
handled	O
within	O
Scalatra	O
'	O
s	O
AsyncResult	O
for	O
JSON	O
responses	O
.	O
For	O
isomorphic	O
/	O
server	O
side	O
rendering	O
setup	O
I	O
did	O
not	O
want	O
to	O
change	O
services	O
to	O
be	O
blocking	O
so	O
I	O
started	O
with	O
Scala	O
Future	O
-	O
>	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	I-api_mention
Function	I-api_mention
conversion	O
shown	O
here	O
.	O
But	O
the	O
dispatcher	O
in	O
Flux	O
would	O
like	O
to	O
have	O
JS	O
Promise	O
.	O
So	O
far	O
I	O
found	O
only	O
rather	O
complicated	O
sounding	O
way	O
around	O
this	O
Slides	O
68	O
-	O
81	O
Is	O
there	O
any	O
recommended	O
way	O
to	O
deal	O
with	O
this	O
Scala	O
Future	O
-	O
>	O
JS	O
Promise	O
conversion	O
?	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488710	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
returns	O
a	O
fixed	O
-	O
size	O
List	O
backed	O
by	O
the	O
array	O
.	O
If	O
you	O
want	O
a	O
normal	O
mutable	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
ArrayList	I-api_mention
you	O
need	O
to	O
do	O
this	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
,	O
using	O
Guava	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Using	O
a	O
Splitter	B-api_mention
gives	O
you	O
more	O
flexibility	O
in	O
how	O
you	O
split	O
the	O
string	O
and	O
gives	O
you	O
the	O
ability	O
to	O
,	O
for	O
example	O
,	O
skip	O
empty	O
strings	O
in	O
the	O
results	O
and	O
trim	O
results	O
.	O
It	O
also	O
has	O
less	O
weird	O
behavior	O
than	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
as	O
well	O
as	O
not	O
requiring	O
you	O
to	O
split	O
by	O
regex	O
(	O
that	O
'	O
s	O
just	O
one	O
option	O
)	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
8641412	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
code	O
registers	O
the	O
Thread	B-api_mention
with	O
scheduler	O
and	O
the	O
scheduler	O
calls	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Also	O
,	O
Thread	B-api_mention
is	O
class	O
while	O
Runnable	B-api_mention
is	O
an	O
interface	O
.	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
16226168	O
I	O
would	O
not	O
use	O
URLEncoder	B-api_mention
.	O
Besides	O
being	O
incorrectly	O
named	O
(	O
URLEncoder	B-api_mention
has	O
nothing	O
to	O
do	O
with	O
URLs	O
)	O
,	O
inefficient	O
(	O
it	O
uses	O
a	O
StringBuffer	B-api_mention
instead	O
of	O
Builder	B-api_mention
and	O
does	O
a	O
couple	O
of	O
other	O
things	O
that	O
are	O
slow	O
)	O
Its	O
also	O
way	O
too	O
easy	O
to	O
screw	O
it	O
up	O
.	O
Instead	O
I	O
would	O
use	O
URIBuilder	B-api_mention
or	O
Spring	O
'	O
s	O
URIUtils	B-api_mention
or	O
Commons	O
Apache	O
HttpClient	B-api_mention
.	O
The	O
reason	O
being	O
you	O
have	O
to	O
escape	O
the	O
query	O
parameters	O
name	O
(	O
ie	O
BalusC	O
'	O
s	O
answer	O
q	O
)	O
differently	O
than	O
the	O
parameter	O
value	O
.	O
The	O
only	O
downside	O
to	O
the	O
above	O
(	O
that	O
I	O
found	O
out	O
painfully	O
)	O
is	O
that	O
URL	O
'	O
s	O
are	O
not	O
a	O
true	O
subset	O
of	O
URI	O
'	O
s	O
.	O
Since	O
I	O
'	O
m	O
just	O
linking	O
to	O
other	O
answers	O
I	O
marked	O
this	O
as	O
a	O
community	O
wiki	O
.	O
Feel	O
free	O
to	O
edit	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32177563	O
The	O
other	O
answers	O
have	O
already	O
answered	O
your	O
question	O
-	O
no	O
,	O
this	O
is	O
not	O
possible	O
with	O
the	O
Java	O
'	O
s	O
primitive	O
wrapper	O
classes	O
.	O
I	O
'	O
ll	O
try	O
to	O
address	O
the	O
"	O
question	O
behind	O
the	O
question	O
"	O
:	O
Is	O
this	O
possible	O
with	O
other	O
classes	O
?	O
#	O
blockquote	O
This	O
is	O
actually	O
a	O
good	O
question	O
,	O
and	O
the	O
answer	O
is	O
:	O
Yes	O
,	O
it	O
is	O
possible	O
to	O
create	O
such	O
a	O
situation	O
,	O
and	O
yes	O
,	O
it	O
would	O
make	O
Aristotle	O
angry	O
.	O
Actually	O
,	O
I	O
don	O
'	O
t	O
know	O
if	O
it	O
would	O
make	O
Aristotle	O
angry	O
,	O
not	O
having	O
known	O
him	O
,	O
but	O
it	O
will	O
certainly	O
cause	O
a	O
lot	O
of	O
grief	O
for	O
whoever	O
has	O
to	O
work	O
with	O
the	O
code	O
.	O
The	O
thing	O
is	O
:	O
There	O
is	O
a	O
contract	O
associated	O
with	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
Javadocs	O
for	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
Yes	O
,	O
when	O
creating	O
your	O
own	O
class	O
,	O
you	O
can	O
violate	O
this	O
contract	O
.	O
There	O
is	O
(	O
unfortunately	O
)	O
nothing	O
in	O
the	O
compiler	O
or	O
runtime	O
stopping	O
you	O
.	O
However	O
,	O
a	O
lot	O
of	O
code	O
relies	O
on	O
this	O
contract	O
,	O
so	O
if	O
you	O
violate	O
it	O
,	O
any	O
code	O
that	O
uses	O
equals	O
will	O
probably	O
fail	O
in	O
mysterious	O
ways	O
.	O
One	O
example	O
:	O
Java	O
'	O
s	O
own	O
Collection	O
classes	O
(	O
java	O
.	O
util	O
.	O
Collection	O
and	O
friends	O
)	O
rely	O
on	O
equals	O
.	O
If	O
an	O
instance	O
of	O
a	O
class	O
that	O
does	O
not	O
correctly	O
implement	O
equals	O
is	O
put	O
into	O
a	O
collection	O
,	O
weird	O
things	O
happen	O
,	O
such	O
as	O
the	O
collection	O
sometimes	O
containing	O
the	O
instance	O
and	O
sometimes	O
not	O
.	O
Question	O
-	O
12468764	O
,	O
answer	O
-	O
13368831	O
Actual	O
Answer	O
:	O
The	O
default	O
deserializer	O
for	O
enums	O
uses	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
deserialize	O
,	O
so	O
it	O
'	O
s	O
not	O
using	O
the	O
@	O
JsonValue	O
.	O
So	O
as	O
@	O
OldCurmudgeon	O
pointed	O
out	O
,	O
you	O
'	O
d	O
need	O
to	O
pass	O
in	O
{	O
StringLiteral	O
:	O
StringLiteral	O
}	O
to	O
match	O
the	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
value	O
.	O
An	O
other	O
option	O
(	O
assuming	O
you	O
want	O
the	O
write	O
and	O
read	O
json	O
values	O
to	O
be	O
the	O
same	O
)	O
.	O
.	O
.	O
More	O
Info	O
:	O
There	O
is	O
(	O
yet	O
)	O
another	O
way	O
to	O
manage	O
the	O
serialization	O
and	O
deserialization	O
process	O
with	O
Jackson	O
.	O
You	O
can	O
specify	O
these	O
annotations	O
to	O
use	O
your	O
own	O
custom	O
serializer	O
and	O
deserializer	O
:	O
#	O
pre	O
Then	O
you	O
have	O
to	O
write	O
MySerializer	O
and	O
MyDeserializer	O
which	O
look	O
like	O
this	O
:	O
MySerializer	O
#	O
pre	O
MyDeserializer	O
#	O
pre	O
Last	O
little	O
bit	O
,	O
particularly	O
for	O
doing	O
this	O
to	O
an	O
enum	O
JsonEnum	O
that	O
serializes	O
with	O
the	O
method	O
getYourValue	O
(	O
args	O
)	O
,	O
your	O
serializer	O
and	O
deserializer	O
might	O
look	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
22718744	O
,	O
answer	O
-	O
22718904	O
This	O
has	O
been	O
specified	O
in	O
the	O
documentation	O
of	O
split	B-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
,	I-api_mention
limit	I-api_mention
)	I-api_mention
.	O
#	O
blockquote	O
In	O
StringLiteral	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
got	O
a	O
zero	O
-	O
width	O
match	O
at	O
the	O
beginning	O
so	O
the	O
leading	O
empty	O
substring	O
is	O
not	O
included	O
in	O
the	O
resulting	O
array	O
.	O
However	O
in	O
your	O
second	O
snippet	O
when	O
you	O
split	O
on	O
StringLiteral	B-api_mention
you	O
got	O
a	O
positive	O
width	O
match	O
(	O
1	O
in	O
this	O
case	O
)	O
,	O
so	O
the	O
empty	O
leading	O
substring	O
is	O
included	O
as	O
expected	O
.	O
(	O
Removed	O
irrelevant	O
source	O
code	O
)	O
Question	O
-	O
20129762	O
In	O
Java	O
8	O
we	O
have	O
the	O
class	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
curiously	O
have	O
a	O
method	O
Iterator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
iterator	O
(	O
args	O
)	O
So	O
you	O
would	O
expect	O
it	O
to	O
implement	O
interface	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
requires	O
exactly	O
this	O
method	O
,	O
but	O
that	O
'	O
s	O
not	O
the	O
case	O
.	O
When	O
I	O
want	O
to	O
iterate	O
over	O
a	O
Stream	B-api_mention
using	O
a	O
foreach	O
loop	O
,	O
I	O
have	O
to	O
do	O
something	O
like	O
#	O
pre	O
Am	O
I	O
missing	O
something	O
here	O
?	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26819171	O
This	O
is	O
not	O
an	O
easy	O
problem	O
.	O
And	O
the	O
more	O
search	O
-	O
replacement	O
parameters	O
you	O
have	O
,	O
the	O
trickier	O
it	O
gets	O
.	O
You	O
have	O
several	O
options	O
,	O
scattered	O
on	O
the	O
palette	O
of	O
ugly	O
-	O
elegant	O
,	O
efficient	O
-	O
wasteful	O
:	O
#	O
li	O
Use	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
from	O
Apache	O
Commons	O
as	O
@	O
AlanHay	O
recommended	O
.	O
This	O
is	O
a	O
good	O
option	O
if	O
you	O
'	O
re	O
free	O
to	O
add	O
new	O
dependencies	O
in	O
your	O
project	O
.	O
You	O
might	O
get	O
lucky	O
:	O
the	O
dependency	O
might	O
be	O
included	O
already	O
in	O
your	O
project	O
#	O
li	O
Use	O
a	O
temporary	O
placeholder	O
as	O
@	O
Jeroen	O
suggested	O
,	O
and	O
perform	O
the	O
replacement	O
in	O
2	O
steps	O
:	O
#	O
li	O
Replace	O
all	O
search	O
patterns	O
with	O
a	O
unique	O
tag	O
that	O
doesn	O
'	O
t	O
exist	O
in	O
the	O
original	O
text	O
#	O
li	O
Replace	O
the	O
placeholders	O
with	O
the	O
real	O
target	O
replacement	O
This	O
is	O
not	O
a	O
great	O
approach	O
,	O
for	O
several	O
reasons	O
:	O
it	O
needs	O
to	O
ensure	O
that	O
the	O
tags	O
used	O
in	O
the	O
first	O
step	O
are	O
really	O
unique	O
;	O
it	O
performs	O
more	O
string	O
replacement	O
operations	O
than	O
really	O
necessary	O
#	O
li	O
Build	O
a	O
regex	O
from	O
all	O
the	O
patterns	O
and	O
use	O
the	O
method	O
with	O
Matcher	B-api_mention
and	O
StringBuffer	B-api_mention
as	O
suggested	O
by	O
@	O
arshajii	O
.	O
This	O
is	O
not	O
terrible	O
,	O
but	O
not	O
that	O
great	O
either	O
,	O
as	O
building	O
the	O
regex	O
is	O
kind	O
of	O
hackish	O
,	O
and	O
it	O
involves	O
StringBuffer	B-api_mention
which	O
went	O
out	O
of	O
fashion	O
a	O
while	O
ago	O
in	O
favor	O
of	O
StringBuilder	B-api_mention
.	O
#	O
li	O
Use	O
a	O
recursive	O
solution	O
proposed	O
by	O
@	O
mjolka	O
,	O
by	O
splitting	O
the	O
string	O
at	O
the	O
matched	O
patterns	O
,	O
and	O
recursing	O
on	O
the	O
remaining	O
segments	O
.	O
This	O
is	O
a	O
fine	O
solution	O
,	O
compact	O
and	O
quite	O
elegant	O
.	O
Its	O
weakness	O
is	O
the	O
potentially	O
many	O
substring	O
and	O
concatenation	O
operations	O
,	O
and	O
the	O
stack	O
size	O
limits	O
that	O
apply	O
to	O
all	O
recursive	O
solutions	O
#	O
li	O
Split	O
the	O
text	O
to	O
words	O
and	O
use	O
Java	O
8	O
streams	O
to	O
perform	O
the	O
replacements	O
elegantly	O
as	O
@	O
msandiford	O
suggested	O
,	O
but	O
of	O
course	O
that	O
only	O
works	O
if	O
you	O
are	O
ok	O
with	O
splitting	O
at	O
word	O
boundaries	O
,	O
which	O
makes	O
it	O
not	O
suitable	O
as	O
a	O
general	O
solution	O
Here	O
'	O
s	O
my	O
version	O
,	O
based	O
on	O
ideas	O
borrowed	O
from	O
Apache	O
'	O
s	O
implementation	O
.	O
It	O
'	O
s	O
neither	O
simple	O
nor	O
elegant	O
,	O
but	O
it	O
works	O
,	O
and	O
should	O
be	O
relatively	O
efficient	O
,	O
without	O
unnecessary	O
steps	O
.	O
In	O
a	O
nutshell	O
,	O
it	O
works	O
like	O
this	O
:	O
repeatedly	O
find	O
the	O
next	O
matching	O
search	O
pattern	O
in	O
the	O
text	O
,	O
and	O
use	O
a	O
StringBuilder	O
to	O
accumulate	O
the	O
unmatched	O
segments	O
and	O
the	O
replacements	O
.	O
#	O
pre	O
Unit	O
tests	O
:	O
#	O
pre	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846960	O
From	O
Effective	O
Java	O
,	O
Item	O
#	O
43	O
-	O
StringLiteral	O
demonstrates	O
returning	O
an	O
empty	O
collection	O
and	O
perhaps	O
even	O
demonstrates	O
using	O
these	O
emptyList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
emptySet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
emptyMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
the	O
Collections	B-api_mention
class	O
to	O
get	O
an	O
empty	O
collection	O
that	O
also	O
has	O
the	O
additional	O
benefit	O
of	O
being	O
immutable	O
.	O
From	O
Item	O
#	O
15	O
StringLiteral	O
.	O
From	O
Collections	B-api_mention
-	O
emptySet	B-api_mention
-	O
Collections	B-api_mention
-	O
emptyList	B-api_mention
-	O
Collections	B-api_mention
#	O
blockquote	O
Note	O
:	O
Below	O
code	O
is	O
just	O
an	O
example	O
(	O
change	O
it	O
according	O
to	O
your	O
use	O
case	O
)	O
:	O
#	O
pre	O
These	O
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
:	O
#	O
li	O
They	O
'	O
re	O
more	O
concise	O
because	O
you	O
don	O
'	O
t	O
need	O
to	O
explicitly	O
type	O
out	O
the	O
generic	O
type	O
of	O
the	O
collection	O
-	O
it	O
'	O
s	O
generally	O
just	O
inferred	O
from	O
the	O
context	O
of	O
the	O
method	O
call	O
.	O
#	O
li	O
They	O
'	O
re	O
more	O
efficient	O
because	O
they	O
don	O
'	O
t	O
bother	O
creating	O
new	O
objects	O
;	O
they	O
just	O
re	O
-	O
use	O
an	O
existing	O
empty	O
and	O
immutable	O
object	O
.	O
This	O
effect	O
is	O
generally	O
very	O
minor	O
,	O
but	O
it	O
'	O
s	O
occasionally	O
(	O
well	O
,	O
rarely	O
)	O
important	O
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723704	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
.	O
You	O
can	O
also	O
call	O
methods	O
which	O
handle	O
a	O
null	O
as	O
an	O
argument	O
,	O
e	O
.	O
g	O
.	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
,	O
but	O
you	O
cannot	O
reference	O
a	O
null	O
value	O
and	O
call	O
a	O
method	O
on	O
it	O
.	O
BTW	O
There	O
is	O
a	O
tricky	O
situation	O
where	O
it	O
appears	O
you	O
can	O
call	O
static	O
methods	O
on	O
null	O
values	O
.	O
#	O
pre	O
Question	O
-	O
29333689	O
,	O
answer	O
-	O
29337734	O
My	O
intuition	O
in	O
Python	O
is	O
to	O
use	O
the	O
collections	O
.	O
Counter	O
as	O
a	O
multiset	O
:	O
#	O
pre	O
So	O
we	O
have	O
a	O
list	O
of	O
integers	O
from	O
0	O
-	O
99	O
twice	O
except	O
for	O
66	O
.	O
#	O
pre	O
Which	O
gets	O
the	O
least	O
common	O
(	O
last	O
item	O
)	O
from	O
a	O
list	O
sorted	O
by	O
frequency	O
.	O
Such	O
a	O
function	O
would	O
be	O
:	O
#	O
pre	O
And	O
usage	O
:	O
#	O
pre	O
This	O
is	O
a	O
generalized	O
solution	O
that	O
works	O
for	O
any	O
number	O
of	O
items	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148647	O
Please	O
use	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
16098046	O
,	O
answer	O
-	O
16098086	O
You	O
could	O
use	O
printf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
%	O
f	O
:	O
#	O
pre	O
This	O
will	O
print	O
dexp	O
:	O
12345678	O
.	O
000000	O
.	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
fractional	O
part	O
,	O
use	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
printf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
uses	O
the	O
format	O
specifier	O
language	O
explained	O
in	O
the	O
documentation	O
.	O
The	O
default	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
format	O
used	O
in	O
your	O
original	O
code	O
is	O
spelled	O
out	O
here	O
.	O
Question	O
-	O
31370403	O
I	O
'	O
m	O
currently	O
in	O
the	O
process	O
of	O
writing	O
a	O
paint	O
program	O
in	O
java	O
,	O
designed	O
to	O
have	O
flexible	O
and	O
comprehensive	O
functionalities	O
.	O
It	O
stemmed	O
from	O
my	O
final	O
project	O
,	O
that	O
I	O
wrote	O
overnight	O
the	O
day	O
before	O
.	O
Because	O
of	O
that	O
,	O
it	O
'	O
s	O
got	O
tons	O
and	O
tons	O
of	O
bugs	O
,	O
which	O
I	O
'	O
ve	O
been	O
tackling	O
one	O
by	O
one	O
(	O
e	O
.	O
g	O
.	O
I	O
can	O
only	O
save	O
files	O
that	O
will	O
be	O
empty	O
,	O
my	O
rectangles	O
don	O
'	O
t	O
draw	O
right	O
but	O
my	O
circles	O
do	O
.	O
.	O
.	O
)	O
.	O
This	O
time	O
,	O
I	O
'	O
ve	O
been	O
trying	O
to	O
add	O
undo	O
/	O
redo	O
functionality	O
to	O
my	O
program	O
.	O
However	O
,	O
I	O
can	O
'	O
t	O
"	O
undo	O
"	O
something	O
that	O
I	O
have	O
done	O
.	O
Therefore	O
,	O
I	O
got	O
an	O
idea	O
to	O
save	O
copies	O
of	O
my	O
BufferedImage	O
each	O
time	O
a	O
mouseReleased	O
event	O
was	O
fired	O
.	O
However	O
,	O
with	O
some	O
of	O
the	O
images	O
going	O
to	O
1920x1080	O
resolution	O
,	O
I	O
figured	O
that	O
this	O
wouldn	O
'	O
t	O
be	O
efficient	O
:	O
storing	O
them	O
would	O
probably	O
take	O
gigabytes	O
of	O
memory	O
.	O
The	O
reason	O
for	O
why	O
I	O
can	O
'	O
t	O
simply	O
paint	O
the	O
same	O
thing	O
with	O
the	O
background	O
colour	O
to	O
undo	O
is	O
because	O
I	O
have	O
many	O
different	O
brushes	O
,	O
which	O
paint	O
based	O
on	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
because	O
there	O
are	O
many	O
different	O
layers	O
(	O
in	O
a	O
single	O
layer	O
)	O
.	O
Then	O
,	O
I	O
'	O
ve	O
considered	O
cloning	O
the	O
Graphics	O
objects	O
that	O
I	O
use	O
to	O
paint	O
to	O
the	O
BufferedImage	O
.	O
Like	O
this	O
:	O
#	O
pre	O
I	O
haven	O
'	O
t	O
done	O
this	O
before	O
,	O
so	O
I	O
have	O
a	O
couple	O
questions	O
:	O
#	O
li	O
Would	O
I	O
still	O
be	O
wasting	O
pointless	O
memory	O
by	O
doing	O
this	O
,	O
like	O
cloning	O
my	O
BufferedImages	O
?	O
#	O
li	O
Is	O
there	O
necessarily	O
a	O
different	O
way	O
I	O
can	O
do	O
this	O
?	O
Question	O
-	O
27845223	O
I	O
'	O
m	O
looking	O
at	O
a	O
piece	O
of	O
Java	O
code	O
right	O
now	O
,	O
and	O
it	O
takes	O
a	O
path	O
as	O
a	O
String	B-api_mention
and	O
gets	O
its	O
URL	O
using	O
URL	B-api_mention
resource	O
=	O
ClassLoader	B-api_mention
.	I-api_mention
getSystemClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
then	O
calls	O
String	B-api_mention
path	O
=	O
resource	O
.	B-api_mention
getPath	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
finally	O
executes	O
new	O
File	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Oh	O
,	O
and	O
there	O
are	O
also	O
calls	O
to	O
URL	B-api_mention
url	O
=	O
resource	O
.	B-api_mention
toURI	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
String	B-api_mention
file	O
=	O
resource	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
'	O
m	O
totally	O
confused	O
right	O
now	O
-	O
mostly	O
because	O
of	O
the	O
terminology	O
,	O
I	O
guess	O
.	O
Can	O
someone	O
please	O
walk	O
me	O
through	O
the	O
differences	O
,	O
or	O
provide	O
a	O
few	O
links	O
to	O
Dummy	O
-	O
proof	O
material	O
?	O
Especially	O
URI	B-api_mention
to	O
URL	B-api_mention
and	O
Resource	B-api_mention
to	O
File	B-api_mention
?	O
To	O
me	O
,	O
it	O
feels	O
like	O
they	O
should	O
be	O
the	O
same	O
thing	O
,	O
respectively	O
.	O
.	O
.	O
The	O
difference	O
between	O
getFile	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getPath	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
explained	O
here	O
:	O
What	O
'	O
s	O
the	O
difference	O
between	O
url	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
getpath	B-api_mention
(	I-api_mention
)	I-api_mention
?	O
(	O
Interestingly	O
they	O
both	O
seem	O
to	O
return	O
Strings	O
,	O
which	O
probably	O
adds	O
a	O
whole	O
lot	O
to	O
my	O
state	O
of	O
mind	O
.	O
.	O
.	O
)	O
Now	O
,	O
if	O
I	O
have	O
a	O
locator	O
that	O
references	O
a	O
class	O
or	O
package	O
in	O
a	O
jar	O
file	O
,	O
will	O
those	O
two	O
(	O
i	O
.	O
e	O
.	O
path	O
an	O
file	O
strings	O
)	O
differ	O
?	O
resource	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
give	O
you	O
jar	O
:	O
file	O
:	O
/	O
C	O
:	O
/	O
path	O
/	O
to	O
/	O
my	O
.	O
jar	O
!	O
/	O
com	O
/	O
example	O
/	O
,	O
after	O
all	O
(	O
note	O
the	O
exclamation	O
mark	O
)	O
.	O
Is	O
the	O
difference	O
between	O
URI	B-api_mention
and	O
URL	B-api_mention
in	O
Java	O
that	O
the	O
former	O
doesn	O
'	O
t	O
encode	O
spaces	O
?	O
Cf	O
.	O
Files	O
,	O
URIs	O
,	O
and	O
URLs	O
conflicting	O
in	O
Java	O
(	O
This	O
answer	O
explains	O
the	O
general	O
,	O
conceptual	O
difference	O
between	O
the	O
two	O
terms	O
fairly	O
well	O
:	O
URIs	O
identify	O
and	O
URLs	O
locate	O
;	O
)	O
Lastly	O
-	O
and	O
most	O
importantly	O
-	O
why	O
do	O
I	O
need	O
File	B-api_mention
object	O
;	O
why	O
isn	O
'	O
t	O
a	O
Resource	B-api_mention
(	O
URL	B-api_mention
)	O
enough	O
?	O
(	O
And	O
is	O
there	O
a	O
Resource	B-api_mention
object	O
?	O
)	O
Sorry	O
if	O
this	O
question	O
is	O
a	O
bit	O
unorganized	O
;	O
it	O
just	O
reflects	O
the	O
confusion	O
I	O
have	O
.	O
.	O
.	O
:	O
)	O
Question	O
-	O
29229373	O
I	O
have	O
the	O
following	O
sample	O
code	O
:	O
#	O
pre	O
The	O
output	O
is	O
as	O
follows	O
:	O
#	O
pre	O
From	O
here	O
I	O
see	O
that	O
in	O
first	O
case	O
stream	O
really	O
behaves	O
lazily	O
-	O
we	O
use	O
findFirst	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
once	O
we	O
have	O
first	O
element	O
our	O
filtering	O
lambda	O
is	O
not	O
invoked	O
.	O
However	O
,	O
in	O
second	O
case	O
which	O
uses	O
flatMaps	O
we	O
see	O
that	O
despite	O
first	O
element	O
which	O
fulfils	O
the	O
filter	O
condition	O
is	O
found	O
(	O
it	O
'	O
s	O
just	O
any	O
first	O
element	O
as	O
lambda	O
always	O
returns	O
true	O
)	O
further	O
contents	O
of	O
the	O
stream	O
are	O
still	O
being	O
fed	O
through	O
filtering	O
function	O
.	O
I	O
am	O
trying	O
to	O
understand	O
why	O
it	O
behaves	O
like	O
this	O
rather	O
than	O
giving	O
up	O
after	O
first	O
element	O
is	O
calculated	O
as	O
in	O
the	O
first	O
case	O
.	O
Any	O
helpful	O
information	O
would	O
be	O
appreciated	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29495113	O
#	O
blockquote	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
It	O
is	O
checking	O
whether	O
variable	O
newType	O
holds	O
a	O
reference	O
to	O
an	O
instance	O
of	O
java	O
.	O
lang	O
.	O
Class	O
representing	O
type	O
Object	B-api_mention
[	O
]	O
.	O
The	O
casts	O
are	O
unneeded	O
.	O
#	O
blockquote	O
As	O
far	O
as	O
I	O
can	O
tell	O
,	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
could	O
be	O
used	O
in	O
both	O
cases	O
,	O
but	O
non	O
-	O
reflective	O
ordinary	O
array	O
construction	O
is	O
likely	O
a	O
bit	O
faster	O
.	O
Thus	O
,	O
I	O
suppose	O
that	O
Object	B-api_mention
[	O
]	O
is	O
called	O
out	O
as	O
a	O
special	O
case	O
for	O
performance	O
reasons	O
,	O
but	O
I	O
have	O
no	O
idea	O
whether	O
that	O
case	O
is	O
exercised	O
frequently	O
enough	O
for	O
the	O
optimization	O
to	O
be	O
important	O
.	O
#	O
blockquote	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
You	O
should	O
use	O
it	O
when	O
you	O
need	O
to	O
copy	O
an	O
array	O
to	O
an	O
array	O
with	O
a	O
possibly	O
different	O
(	O
but	O
compatible	O
)	O
element	O
type	O
,	O
especially	O
when	O
the	O
element	O
types	O
are	O
not	O
statically	O
known	O
.	O
If	O
you	O
know	O
you	O
want	O
the	O
copy	O
to	O
have	O
the	O
same	O
element	O
type	O
as	O
the	O
original	O
,	O
then	O
it	O
'	O
s	O
easier	O
to	O
use	O
the	O
original	O
array	O
'	O
s	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
33804394	O
,	O
answer	O
-	O
33814549	O
In	O
this	O
sort	O
of	O
situation	O
I	O
would	O
write	O
#	O
pre	O
Interestingly	O
you	O
say	O
that	O
the	O
"	O
try	O
statement	O
will	O
never	O
fail	O
"	O
,	O
but	O
you	O
still	O
took	O
the	O
trouble	O
to	O
write	O
a	O
statement	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
that	O
you	O
claim	O
will	O
never	O
be	O
executed	O
.	O
Why	O
?	O
Perhaps	O
your	O
belief	O
is	O
not	O
that	O
firmly	O
held	O
.	O
That	O
is	O
good	O
(	O
in	O
my	O
opinion	O
)	O
,	O
since	O
your	O
belief	O
is	O
not	O
based	O
on	O
the	O
code	O
you	O
wrote	O
,	O
but	O
rather	O
on	O
the	O
expectation	O
that	O
your	O
client	O
will	O
not	O
violate	O
the	O
precondition	O
.	O
Better	O
to	O
program	O
public	O
methods	O
defensively	O
.	O
By	O
the	O
way	O
,	O
your	O
code	O
won	O
'	O
t	O
compile	O
for	O
me	O
.	O
You	O
can	O
'	O
t	O
call	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
even	O
if	O
the	O
type	O
of	O
a	O
is	O
Cloneable	B-api_mention
.	O
At	O
least	O
Eclipse	O
'	O
s	O
compiler	O
says	O
so	O
.	O
Expression	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
error	O
#	O
blockquote	O
What	O
I	O
would	O
do	O
for	O
your	O
specific	O
case	O
is	O
#	O
pre	O
Where	O
PubliclyCloneable	O
is	O
defined	O
by	O
#	O
pre	O
Or	O
,	O
if	O
you	O
absolutely	O
need	O
the	O
parameter	O
type	O
to	O
be	O
Cloneable	B-api_mention
,	O
the	O
following	O
at	O
least	O
compiles	O
.	O
#	O
pre	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
19629304	O
If	O
you	O
do	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
main	O
method	O
,	O
the	O
thread	O
of	O
main	O
method	O
will	O
invoke	O
the	O
run	O
method	O
instead	O
of	O
the	O
thread	O
you	O
require	O
to	O
run	O
.	O
The	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
creates	O
new	O
thread	O
and	O
for	O
which	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
to	O
be	O
done	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
12685471	O
The	O
kind	O
of	O
output	O
you	O
are	O
seeing	O
from	O
your	O
byte	O
array	O
(	O
[	O
B	O
@	O
405217f8	O
)	O
is	O
also	O
an	O
output	O
for	O
a	O
zero	O
length	O
byte	O
array	O
(	O
ie	O
new	O
byte	O
[	O
0	O
]	O
)	O
.	O
It	O
looks	O
like	O
this	O
string	O
is	O
a	O
reference	O
to	O
the	O
array	O
rather	O
than	O
a	O
description	O
of	O
the	O
contents	O
of	O
the	O
array	O
like	O
we	O
might	O
expect	O
from	O
a	O
regular	O
collection	O
'	O
s	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
As	O
with	O
other	O
respondents	O
,	O
I	O
would	O
point	O
you	O
to	O
the	O
String	B-api_mention
constructors	O
that	O
accept	O
a	O
byte	O
[	O
]	O
parameter	O
to	O
construct	O
a	O
string	O
from	O
the	O
contents	O
of	O
a	O
byte	O
array	O
.	O
You	O
should	O
be	O
able	O
to	O
read	O
raw	O
bytes	O
from	O
a	O
socket	O
'	O
s	O
InputStream	B-api_mention
if	O
you	O
want	O
to	O
obtain	O
bytes	O
from	O
a	O
TCP	O
connection	O
.	O
If	O
you	O
have	O
already	O
read	O
those	O
bytes	O
as	O
a	O
String	B-api_mention
(	O
using	O
an	O
InputStreamReader	B-api_mention
)	O
,	O
then	O
,	O
the	O
string	O
can	O
be	O
converted	O
to	O
bytes	O
using	O
the	O
getBytes	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
.	O
Be	O
sure	O
to	O
pass	O
in	O
your	O
desired	O
character	O
set	O
to	O
both	O
the	O
String	B-api_mention
constructor	O
and	O
getBytes	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
functions	O
,	O
and	O
this	O
will	O
only	O
work	O
if	O
the	O
byte	O
data	O
can	O
be	O
converted	O
to	O
characters	O
by	O
the	O
InputStreamReader	B-api_mention
.	O
If	O
you	O
want	O
to	O
deal	O
with	O
raw	O
bytes	O
you	O
should	O
really	O
avoid	O
using	O
this	O
stream	O
reader	O
layer	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15446006	O
I	O
actually	O
wrote	O
a	O
blog	O
post	O
on	O
the	O
topic	O
2	O
months	O
ago	O
.	O
The	O
article	O
is	O
for	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
but	O
Java	O
'	O
s	O
ArrayList	B-api_mention
has	O
a	O
very	O
similar	O
implementation	O
.	O
Since	O
ArrayList	B-api_mention
is	O
implemented	O
using	O
a	O
dynamic	O
array	O
,	O
it	O
increases	O
in	O
size	O
on	O
demand	O
.	O
So	O
the	O
reason	O
for	O
the	O
capacity	O
constructor	O
is	O
for	O
optimisation	O
purposes	O
.	O
When	O
one	O
of	O
these	O
resizings	O
operation	O
occurs	O
,	O
the	O
ArrayList	B-api_mention
copies	O
the	O
contents	O
of	O
the	O
array	O
into	O
a	O
new	O
array	O
that	O
is	O
twice	O
the	O
capacity	O
of	O
the	O
old	O
one	O
.	O
This	O
operation	O
runs	O
in	O
O	O
(	O
n	O
)	O
time	O
.	O
Example	O
Here	O
is	O
an	O
example	O
of	O
how	O
the	O
ArrayList	B-api_mention
would	O
increase	O
in	O
size	O
:	O
#	O
pre	O
So	O
the	O
list	O
starts	O
with	O
a	O
capacity	O
of	O
10	O
,	O
when	O
the	O
11th	O
item	O
is	O
added	O
it	O
is	O
increase	O
by	O
50	O
%	O
+	O
1	O
to	O
16	O
.	O
On	O
the	O
17th	O
item	O
the	O
ArrayList	B-api_mention
is	O
increased	O
again	O
to	O
25	O
and	O
so	O
on	O
.	O
Now	O
consider	O
the	O
example	O
where	O
we	O
'	O
re	O
creating	O
a	O
list	O
where	O
the	O
desired	O
capacity	O
is	O
already	O
known	O
as	O
1000000	O
.	O
Creating	O
the	O
ArrayList	B-api_mention
without	O
the	O
size	O
constructor	O
will	O
call	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
1000000	O
times	O
which	O
takes	O
O	O
(	O
1	O
)	O
normally	O
or	O
O	O
(	O
n	O
)	O
on	O
resize	O
.	O
#	O
blockquote	O
Compare	O
this	O
using	O
the	O
constructor	O
and	O
then	O
calling	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
which	O
is	O
guaranteed	O
to	O
run	O
in	O
O	O
(	O
1	O
)	O
.	O
#	O
blockquote	O
Java	O
vs	O
C	O
#	O
Java	O
is	O
as	O
above	O
,	O
starting	O
at	O
10	O
and	O
increasing	O
each	O
resize	O
at	O
50	O
%	O
+	O
1	O
.	O
C	O
#	O
starts	O
at	O
4	O
and	O
increases	O
much	O
more	O
aggressively	O
,	O
doubling	O
at	O
each	O
resize	O
.	O
The	O
1000000	O
adds	O
example	O
from	O
above	O
for	O
C	O
#	O
uses	O
3097084	O
operations	O
.	O
References	O
#	O
li	O
My	O
blog	O
post	O
on	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
#	O
li	O
Java	O
'	O
s	O
ArrayList	B-api_mention
source	O
code	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31922994	O
I	O
think	O
that	O
is	O
because	O
you	O
usually	O
write	O
your	O
functions	O
to	O
manipulate	O
data	O
,	O
and	O
then	O
lift	O
it	O
to	O
Optional	B-api_mention
using	O
map	O
and	O
similar	O
functions	O
.	O
This	O
adds	O
the	O
default	O
Optional	B-api_mention
behavior	O
to	O
it	O
.	O
Of	O
course	O
,	O
there	O
might	O
be	O
cases	O
,	O
when	O
it	O
is	O
necessary	O
to	O
write	O
your	O
own	O
auxilary	O
function	O
that	O
works	O
on	O
Optional	B-api_mention
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
29000802	O
There	O
is	O
a	O
third	O
option	O
-	O
using	O
stream	O
(	O
args	O
)	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
see	O
comments	O
under	O
why	O
didn	O
'	O
t	O
stream	O
have	O
a	O
toList	B-api_mention
method	O
.	O
It	O
turns	O
out	O
to	O
be	O
slower	O
than	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
or	O
collect	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
and	O
less	O
expressive	O
.	O
It	O
might	O
be	O
optimised	O
in	O
later	O
JDK	O
builds	O
,	O
so	O
adding	O
it	O
here	O
just	O
in	O
case	O
.	O
assuming	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myFinalList	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
with	O
a	O
micro	O
-	O
micro	O
benchmark	O
,	O
1M	O
entries	O
,	O
20	O
%	O
nulls	O
and	O
simple	O
transform	O
in	O
doSomething	O
(	O
)	O
#	O
pre	O
the	O
results	O
are	O
parallel	O
:	O
#	O
pre	O
sequential	O
:	O
#	O
pre	O
parallel	O
without	O
nulls	O
and	O
filter	O
(	O
so	O
the	O
stream	O
is	O
SIZED	O
)	O
:	O
toArrays	B-api_mention
has	O
the	O
best	O
performance	O
in	O
such	O
case	O
,	O
and	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
fails	O
with	O
"	O
indexOutOfBounds	O
"	O
on	O
the	O
recepient	O
ArrayList	B-api_mention
,	O
had	O
to	O
replace	O
with	O
.	B-api_mention
forEachOrdered	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818783	O
The	O
absolute	O
simplest	O
example	O
I	O
can	O
think	O
of	O
is	O
to	O
make	O
incrementing	O
an	O
atomic	O
operation	O
.	O
With	O
standard	O
ints	O
:	O
#	O
pre	O
With	O
AtomicInteger	B-api_mention
:	O
#	O
pre	O
The	O
latter	O
is	O
a	O
very	O
simple	O
way	O
to	O
perform	O
simple	O
mutations	O
effects	O
(	O
especially	O
counting	O
,	O
or	O
unique	O
-	O
indexing	O
)	O
,	O
without	O
having	O
to	O
resort	O
to	O
synchronizing	O
all	O
access	O
.	O
More	O
complex	O
synchronization	O
-	O
free	O
logic	O
can	O
be	O
employed	O
by	O
using	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
a	O
type	O
of	O
optimistic	O
locking	O
-	O
get	O
the	O
current	O
value	O
,	O
compute	O
result	O
based	O
on	O
this	O
,	O
set	O
this	O
result	O
iff	O
value	O
is	O
still	O
the	O
input	O
used	O
to	O
do	O
the	O
calculation	O
,	O
else	O
start	O
again	O
-	O
but	O
the	O
counting	O
examples	O
are	O
very	O
useful	O
,	O
and	O
I	O
'	O
ll	O
often	O
use	O
AtomicIntegers	O
for	O
counting	O
and	O
VM	O
-	O
wide	O
unique	O
generators	O
if	O
there	O
'	O
s	O
any	O
hint	O
of	O
multiple	O
threads	O
being	O
involved	O
,	O
because	O
they	O
'	O
re	O
so	O
easy	O
to	O
work	O
with	O
I	O
'	O
d	O
almost	O
consider	O
it	O
premature	O
optimisation	O
to	O
use	O
plain	O
ints	O
.	O
While	O
you	O
can	O
almost	O
always	O
achieve	O
the	O
same	O
synchronization	O
guarantees	O
with	O
ints	O
and	O
appropriate	O
synchronized	O
declarations	O
,	O
the	O
beauty	O
of	O
AtomicInteger	B-api_mention
is	O
that	O
the	O
thread	O
-	O
safety	O
is	O
built	O
into	O
the	O
actual	O
object	O
itself	O
,	O
rather	O
than	O
you	O
needing	O
to	O
worry	O
about	O
the	O
possible	O
interleavings	O
,	O
and	O
monitors	O
held	O
,	O
of	O
every	O
method	O
that	O
happens	O
to	O
access	O
the	O
int	O
value	O
.	O
It	O
'	O
s	O
much	O
harder	O
to	O
accidentally	O
violate	O
threadsafety	O
when	O
calling	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
than	O
when	O
returning	O
i	O
+	O
+	O
and	O
remembering	O
(	O
or	O
not	O
)	O
to	O
acquire	O
the	O
correct	O
set	O
of	O
monitors	O
beforehand	O
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31445150	O
I	O
first	O
tought	O
your	O
question	O
was	O
a	O
dupe	O
of	O
What	O
code	O
does	O
the	O
compiler	O
generate	O
for	O
autoboxing	O
?	O
However	O
,	O
after	O
your	O
comment	O
on	O
@	O
ElliottFrisch	O
I	O
realized	O
it	O
was	O
different	O
:	O
#	O
blockquote	O
For	O
other	O
readers	O
,	O
assume	O
that	O
"	O
behaves	O
that	O
way	O
"	O
means	O
using	O
valueOf	B-api_mention
.	O
Remember	O
that	O
there	O
are	O
multiples	O
compilers	O
for	O
Java	O
.	O
To	O
be	O
"	O
legal	O
"	O
they	O
must	O
follow	O
the	O
contract	O
given	O
in	O
the	O
JLS	O
.	O
Therefore	O
,	O
as	O
long	O
as	O
all	O
the	O
rules	O
here	O
are	O
respected	O
,	O
there	O
is	O
no	O
guarantee	O
of	O
how	O
autoboxing	O
is	O
internally	O
implemented	O
.	O
But	O
I	O
don	O
'	O
t	O
see	O
any	O
reason	O
to	O
not	O
use	O
valueOf	B-api_mention
,	O
specially	O
that	O
it	O
uses	O
the	O
cached	O
values	O
and	O
is	O
the	O
recommended	O
way	O
as	O
per	O
this	O
article	O
by	O
Joseph	O
D	O
.	O
Darcy	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
20358920	O
Fixed	O
size	O
List	B-api_mention
The	O
easiest	O
way	O
,	O
that	O
I	O
know	O
of	O
,	O
is	O
to	O
create	O
a	O
fixed	O
-	O
size	O
single	O
element	O
List	B-api_mention
with	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	O
T	O
.	O
.	O
.	O
)	O
like	O
/	O
/	O
Returns	O
a	O
List	O
backed	O
by	O
a	O
varargs	O
T	O
.	O
return	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Variable	O
size	O
List	B-api_mention
If	O
it	O
needs	O
vary	O
in	O
size	O
you	O
can	O
construct	O
an	O
ArrayList	B-api_mention
and	O
the	O
fixed	O
-	O
size	O
List	B-api_mention
like	O
return	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
(	O
in	O
Java	O
7	O
+	O
)	O
you	O
can	O
use	O
the	O
diamond	O
operator	O
<	O
>	O
to	O
make	O
it	O
return	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
38628203	O
In	O
intellij	O
you	O
can	O
auto	O
generate	O
toString	B-api_mention
method	O
by	O
pressing	O
alt	O
+	O
inset	O
and	O
then	O
selecting	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
here	O
is	O
an	O
out	O
put	O
for	O
a	O
test	O
class	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
generates	O
a	O
String	B-api_mention
by	O
concatenating	O
,	O
several	O
attributes	O
of	O
the	O
class	O
,	O
for	O
primitives	O
it	O
will	O
print	O
their	O
values	O
and	O
for	O
reference	O
types	O
it	O
will	O
use	O
their	O
class	O
type	O
(	O
in	O
this	O
case	O
to	O
string	O
method	O
of	O
Test2	O
)	O
.	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488669	O
Two	O
steps	O
:	O
#	O
li	O
String	B-api_mention
[	O
]	O
items	O
=	O
commaSeparated	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
container	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
24630963	O
The	O
Java	O
8	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
throws	O
a	O
NullPointerException	B-api_mention
if	O
one	O
of	O
the	O
values	O
is	O
'	O
null	O
'	O
.	O
I	O
don	O
'	O
t	O
understand	O
this	O
behaviour	O
,	O
maps	O
can	O
contain	O
null	O
pointers	O
as	O
value	O
without	O
any	O
problems	O
.	O
Is	O
there	O
a	O
good	O
reason	O
why	O
values	O
cannot	O
be	O
null	O
for	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
?	O
Also	O
,	O
is	O
there	O
a	O
nice	O
Java	O
8	O
way	O
of	O
fixing	O
this	O
,	O
or	O
should	O
I	O
revert	O
to	O
plain	O
old	O
for	O
loop	O
?	O
An	O
example	O
of	O
my	O
problem	O
:	O
#	O
pre	O
Stacktrace	O
:	O
#	O
pre	O
Question	O
-	O
29815636	O
,	O
answer	O
-	O
29815698	O
The	O
first	O
form	O
is	O
called	O
Javadoc	O
.	O
You	O
use	O
this	O
when	O
you	O
'	O
re	O
writing	O
formal	O
APIs	O
for	O
your	O
code	O
,	O
which	O
are	O
generated	O
by	O
the	O
javadoc	O
tool	O
.	O
For	O
an	O
example	O
,	O
the	O
Java	O
7	O
API	O
page	O
uses	O
Javadoc	O
and	O
was	O
generated	O
by	O
that	O
tool	O
.	O
Some	O
common	O
elements	O
you	O
'	O
d	O
see	O
in	O
Javadoc	O
include	O
:	O
#	O
li	O
@	O
param	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
parameters	O
are	O
being	O
passed	O
to	O
a	O
method	O
,	O
and	O
what	O
value	O
they	O
'	O
re	O
expected	O
to	O
have	O
#	O
li	O
@	O
return	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
result	O
the	O
method	O
is	O
going	O
to	O
give	O
back	O
#	O
li	O
@	O
throws	O
:	O
this	O
is	O
used	O
to	O
indicate	O
that	O
a	O
method	O
throws	O
an	O
exception	O
or	O
error	O
in	O
case	O
of	O
certain	O
input	O
#	O
li	O
@	O
since	O
:	O
this	O
is	O
used	O
to	O
indicate	O
the	O
earliest	O
Java	O
version	O
this	O
class	O
or	O
function	O
was	O
available	O
in	O
As	O
an	O
example	O
,	O
here	O
'	O
s	O
Javadoc	O
for	O
the	O
compare	O
method	O
of	O
Integer	B-api_mention
:	O
#	O
pre	O
The	O
second	O
form	O
is	O
a	O
block	O
(	O
multi	O
-	O
line	O
)	O
comment	O
.	O
You	O
use	O
this	O
if	O
you	O
want	O
to	O
have	O
multiple	O
lines	O
in	O
a	O
comment	O
.	O
I	O
will	O
say	O
that	O
you	O
'	O
d	O
only	O
want	O
to	O
use	O
the	O
latter	O
form	O
sparingly	O
;	O
that	O
is	O
,	O
you	O
don	O
'	O
t	O
want	O
to	O
overburden	O
your	O
code	O
with	O
block	O
comments	O
that	O
don	O
'	O
t	O
describe	O
what	O
behaviors	O
the	O
method	O
/	O
complex	O
function	O
is	O
supposed	O
to	O
have	O
.	O
Since	O
Javadoc	O
is	O
the	O
more	O
descriptive	O
of	O
the	O
two	O
,	O
and	O
you	O
can	O
generate	O
actual	O
documentation	O
as	O
a	O
result	O
of	O
using	O
it	O
,	O
using	O
Javadoc	O
would	O
be	O
more	O
preferable	O
to	O
simple	O
block	O
comments	O
.	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
24895623	O
First	O
of	O
all	O
,	O
the	O
place	O
in	O
your	O
code	O
where	O
you	O
are	O
initializing	O
(	O
i	O
.	O
e	O
.	O
assigning	O
for	O
the	O
first	O
time	O
)	O
foo	O
is	O
here	O
:	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
foo	O
is	O
an	O
object	O
(	O
with	O
type	O
List	O
)	O
so	O
it	O
is	O
a	O
reference	O
type	O
,	O
not	O
a	O
value	O
type	O
(	O
like	O
int	O
)	O
.	O
As	O
such	O
,	O
it	O
holds	O
a	O
reference	O
to	O
a	O
memory	O
location	O
(	O
e	O
.	O
g	O
.	O
0xA7D2A834	O
)	O
where	O
your	O
List	B-api_mention
elements	O
are	O
stored	O
.	O
Lines	O
like	O
this	O
foo	O
.	O
add	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
Modification	O
-	O
1	O
do	O
not	O
change	O
the	O
value	O
of	O
foo	O
(	O
which	O
,	O
again	O
,	O
is	O
just	O
a	O
reference	O
to	O
a	O
memory	O
location	O
)	O
.	O
Instead	O
,	O
they	O
just	O
add	O
elements	O
into	O
that	O
referenced	O
memory	O
location	O
.	O
To	O
violate	O
the	O
final	O
keyword	O
,	O
you	O
would	O
have	O
to	O
try	O
to	O
re	O
-	O
assign	O
foo	O
as	O
follows	O
again	O
:	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
That	O
would	O
give	O
you	O
a	O
compilation	O
error	O
.	O
Now	O
,	O
with	O
that	O
out	O
of	O
the	O
way	O
,	O
think	O
about	O
what	O
happens	O
when	O
you	O
add	O
the	O
static	O
keyword	O
.	O
When	O
you	O
do	O
NOT	O
have	O
the	O
static	O
keyword	O
,	O
each	O
object	O
that	O
instantiates	O
the	O
class	O
has	O
its	O
own	O
copy	O
of	O
foo	O
.	O
Therefore	O
,	O
the	O
constructor	O
assigns	O
a	O
value	O
to	O
a	O
blank	O
,	O
fresh	O
copy	O
of	O
the	O
foo	O
variable	O
,	O
which	O
is	O
perfectly	O
fine	O
.	O
However	O
,	O
when	O
you	O
DO	O
have	O
the	O
static	O
keyword	O
,	O
only	O
one	O
foo	O
exists	O
in	O
memory	O
that	O
is	O
associated	O
with	O
the	O
class	O
.	O
If	O
you	O
were	O
to	O
create	O
two	O
or	O
more	O
objects	O
,	O
the	O
constructor	O
would	O
be	O
attempting	O
to	O
re	O
-	O
assign	O
that	O
one	O
foo	O
each	O
time	O
,	O
violating	O
the	O
final	O
keyword	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
36394016	O
Whenever	O
there	O
is	O
the	O
slightest	O
possibility	O
that	O
the	O
given	O
String	B-api_mention
does	O
not	O
contain	O
an	O
Integer	O
,	O
you	O
have	O
to	O
handle	O
this	O
special	O
case	O
.	O
Sadly	O
,	O
the	O
standard	O
Java	O
methods	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
parseInt	I-api_mention
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
valueOf	I-api_mention
throw	O
a	O
NumberFormatException	B-api_mention
to	O
signal	O
this	O
special	O
case	O
.	O
Thus	O
,	O
you	O
have	O
to	O
use	O
exceptions	O
for	O
flow	O
control	O
,	O
which	O
is	O
generally	O
considered	O
bad	O
coding	O
style	O
.	O
In	O
my	O
opinion	O
,	O
this	O
special	O
case	O
should	O
be	O
handled	O
by	O
returning	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Since	O
Java	O
does	O
not	O
offer	O
such	O
a	O
method	O
,	O
I	O
use	O
the	O
following	O
wrapper	O
:	O
#	O
pre	O
Usage	O
:	O
#	O
pre	O
While	O
this	O
is	O
still	O
using	O
exceptions	O
for	O
flow	O
control	O
internally	O
,	O
the	O
usage	O
code	O
becomes	O
very	O
clean	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
22694891	O
I	O
think	O
many	O
of	O
the	O
answers	O
here	O
may	O
be	O
missing	O
a	O
quality	O
method	O
included	O
in	O
StringBuilder	B-api_mention
:	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
know	O
this	O
is	O
a	O
late	O
reply	O
;	O
however	O
,	O
this	O
should	O
be	O
made	O
known	O
(	O
and	O
explained	O
a	O
bit	O
more	O
thoroughly	O
)	O
.	O
Let	O
'	O
s	O
say	O
you	O
have	O
a	O
StringBuilder	B-api_mention
table	O
-	O
which	O
you	O
wish	O
to	O
modify	O
,	O
dynamically	O
,	O
throughout	O
your	O
program	O
(	O
one	O
I	O
am	O
working	O
on	O
right	O
now	O
does	O
this	O
)	O
,	O
e	O
.	O
g	O
.	O
StringBuilder	B-api_mention
table	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
are	O
looping	O
through	O
the	O
method	O
and	O
alter	O
the	O
content	O
,	O
use	O
the	O
content	O
,	O
then	O
wish	O
to	O
discard	O
the	O
content	O
to	O
"	O
clean	O
up	O
"	O
the	O
StringBuilder	B-api_mention
for	O
the	O
next	O
iteration	O
,	O
you	O
can	O
delete	O
it	O
'	O
s	O
contents	O
,	O
e	O
.	O
g	O
.	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
start	O
and	O
end	O
being	O
the	O
indices	O
of	O
the	O
chars	O
you	O
wish	O
to	O
remove	O
.	O
Don	O
'	O
t	O
know	O
the	O
length	O
in	O
chars	O
and	O
want	O
to	O
delete	O
the	O
whole	O
thing	O
?	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
NOW	O
,	O
for	O
the	O
kicker	O
.	O
StringBuilders	O
,	O
as	O
mentioned	O
previously	O
,	O
take	O
a	O
lot	O
of	O
overhead	O
when	O
altered	O
frequently	O
(	O
and	O
can	O
cause	O
safety	O
issues	O
with	O
regard	O
to	O
threading	O
)	O
;	O
therefore	O
,	O
use	O
StringBuffer	B-api_mention
-	O
same	O
as	O
StringBuilder	B-api_mention
(	O
with	O
a	O
few	O
exceptions	O
)	O
-	O
if	O
your	O
StringBuilder	B-api_mention
is	O
used	O
for	O
the	O
purpose	O
of	O
interfacing	O
with	O
the	O
user	O
.	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5103360	O
We	O
usually	O
have	O
two	O
IDs	O
in	O
our	O
entities	O
:	O
#	O
li	O
Is	O
for	O
persistence	O
layer	O
only	O
(	O
so	O
that	O
persistence	O
provider	O
and	O
database	O
can	O
figure	O
out	O
relationships	O
between	O
objects	O
)	O
.	O
#	O
li	O
Is	O
for	O
our	O
application	O
needs	O
(	O
equals	O
(	O
args	O
)	O
and	O
hashCode	O
(	O
args	O
)	O
in	O
particular	O
)	O
Take	O
a	O
look	O
:	O
#	O
pre	O
EDIT	O
:	O
to	O
clarify	O
my	O
point	O
regarding	O
calls	O
to	O
setUuid	O
(	O
args	O
)	O
method	O
.	O
Here	O
'	O
s	O
a	O
typical	O
scenario	O
:	O
#	O
pre	O
When	O
I	O
run	O
my	O
tests	O
and	O
see	O
the	O
log	O
output	O
I	O
fix	O
the	O
problem	O
:	O
#	O
pre	O
Alternatively	O
,	O
one	O
can	O
provide	O
a	O
separate	O
constructor	O
:	O
#	O
pre	O
So	O
my	O
example	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
use	O
a	O
default	O
constructor	O
and	O
a	O
setter	O
,	O
but	O
you	O
may	O
find	O
two	O
-	O
constructors	O
approach	O
more	O
suitable	O
for	O
you	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791826	O
Search	O
for	O
the	O
first	O
word	O
to	O
be	O
replaced	O
.	O
If	O
it	O
'	O
s	O
in	O
the	O
string	O
,	O
recurse	O
on	O
the	O
the	O
part	O
of	O
the	O
string	O
before	O
the	O
occurrence	O
,	O
and	O
on	O
the	O
part	O
of	O
the	O
string	O
after	O
the	O
occurrence	O
.	O
Otherwise	O
,	O
continue	O
with	O
the	O
next	O
word	O
to	O
be	O
replaced	O
.	O
A	O
naive	O
implementation	O
might	O
look	O
like	O
this	O
#	O
pre	O
Sample	O
usage	O
:	O
#	O
pre	O
Output	O
:	O
Once	O
upon	O
a	O
foo	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
baz	O
.	O
A	O
less	O
-	O
naive	O
version	O
:	O
#	O
pre	O
Unfortunately	O
,	O
Java	O
'	O
s	O
String	B-api_mention
has	O
no	O
indexOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
I	O
'	O
ve	O
omitted	O
the	O
implementation	O
of	O
indexOf	B-api_mention
here	O
as	O
I	O
'	O
m	O
not	O
certain	O
it	O
'	O
s	O
correct	O
,	O
but	O
it	O
can	O
be	O
found	O
on	O
ideone	O
,	O
along	O
with	O
some	O
rough	O
timings	O
of	O
various	O
solutions	O
posted	O
here	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725453	O
Since	O
all	O
lists	O
are	O
already	O
"	O
sorted	O
"	O
by	O
the	O
order	O
the	O
items	O
were	O
added	O
(	O
FIFO	O
ordering	O
)	O
,	O
you	O
can	O
"	O
resort	O
"	O
them	O
with	O
another	O
ordering	O
,	O
including	O
the	O
natural	O
ordering	O
of	O
elements	O
,	O
using	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
EDIT	O
:	O
Lists	B-api_mention
as	O
data	O
structures	O
are	O
based	O
in	O
what	O
is	O
interesting	O
is	O
the	O
ordering	O
in	O
which	O
the	O
items	O
where	O
inserted	O
.	O
Sets	O
do	O
not	O
have	O
that	O
information	O
.	O
If	O
you	O
want	O
to	O
order	O
by	O
addition	O
time	O
,	O
use	O
List	B-api_mention
.	O
If	O
you	O
want	O
to	O
order	O
by	O
other	O
criteria	O
,	O
use	O
SortedSet	B-api_mention
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777312	O
Arrays	O
inherit	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
Object	O
and	O
hence	O
compare	O
only	O
returns	O
true	O
if	O
comparing	O
an	O
array	O
against	O
itself	O
.	O
On	O
the	O
other	O
hand	O
,	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
compares	O
the	O
elements	O
of	O
the	O
arrays	O
.	O
This	O
snippet	O
elucidates	O
the	O
difference	O
:	O
#	O
pre	O
See	O
also	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Another	O
static	O
method	O
there	O
may	O
also	O
be	O
of	O
interest	O
:	O
Arrays	B-api_mention
.	I-api_mention
deepEquals	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
30210459	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
allows	O
you	O
to	O
pass	O
an	O
instance	O
of	O
a	O
Comparator	B-api_mention
which	O
defines	O
the	O
sorting	O
logic	O
.	O
So	O
instead	O
of	O
sorting	O
the	O
list	O
in	O
natural	O
order	O
and	O
then	O
reversing	O
it	O
,	O
one	O
can	O
simply	O
pass	O
Collections	B-api_mention
.	I-api_mention
reverseOrder	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
in	O
order	O
to	O
sort	O
the	O
list	O
in	O
reverse	O
order	O
:	O
#	O
pre	O
As	O
mentioned	O
by	O
@	O
Marco13	O
,	O
apart	O
from	O
being	O
more	O
idiomatic	O
(	O
and	O
possibly	O
more	O
efficient	O
)	O
,	O
using	O
the	O
reverse	O
order	O
comparator	O
makes	O
sure	O
that	O
the	O
sort	O
is	O
stable	O
(	O
meaning	O
that	O
the	O
order	O
of	O
elements	O
will	O
not	O
be	O
changed	O
when	O
they	O
are	O
equal	O
according	O
to	O
the	O
comparator	O
,	O
whereas	O
reversing	O
will	O
change	O
the	O
order	O
)	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408477	O
The	O
+	O
operator	O
is	O
usually	O
replaced	O
by	O
a	O
StringBuilder	B-api_mention
at	O
compile	O
time	O
.	O
Check	O
this	O
answer	O
for	O
more	O
details	O
on	O
that	O
matter	O
.	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408526	O
Let	O
'	O
s	O
look	O
at	O
the	O
following	O
simple	O
expressions	O
in	O
Java	O
#	O
pre	O
The	O
compiler	O
converts	O
StringLiteral	O
+	O
x	O
;	O
into	O
a	O
StringBuilder	B-api_mention
internally	O
and	O
uses	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
"	O
add	O
"	O
the	O
integer	O
to	O
the	O
string	O
.	O
5	O
.	O
1	O
.	O
11	O
.	O
String	O
Conversion	O
#	O
blockquote	O
15	O
.	O
18	O
.	O
1	O
.	O
#	O
blockquote	O
The	O
optimized	O
version	O
will	O
not	O
actually	O
do	O
a	O
full	O
wrapped	O
String	O
conversion	O
first	O
.	O
This	O
is	O
a	O
good	O
illustration	O
of	O
an	O
optimized	O
version	O
used	O
by	O
the	O
compiler	O
,	O
albeit	O
without	O
the	O
conversion	O
of	O
a	O
primitive	O
,	O
where	O
you	O
can	O
see	O
the	O
compiler	O
changing	O
things	O
into	O
a	O
StringBuilder	O
in	O
the	O
background	O
:	O
#	O
a	O
This	O
java	O
code	O
:	O
#	O
pre	O
Generates	O
this	O
-	O
see	O
how	O
the	O
two	O
concatenation	O
styles	O
lead	O
to	O
the	O
very	O
same	O
bytecode	O
:	O
#	O
pre	O
Looking	O
at	O
the	O
example	O
above	O
and	O
how	O
the	O
byte	O
code	O
based	O
on	O
the	O
source	O
code	O
in	O
the	O
given	O
example	O
is	O
generated	O
,	O
you	O
will	O
be	O
able	O
to	O
notice	O
that	O
the	O
compiler	O
has	O
internally	O
transformed	O
the	O
following	O
statement	O
cip	O
+	O
ciop	O
;	O
into	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
In	O
other	O
words	O
,	O
the	O
operator	O
+	O
in	O
string	O
concatenation	O
is	O
effectively	O
a	O
shorthand	O
for	O
the	O
more	O
verbose	O
StringBuilder	B-api_mention
idiom	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
30190425	O
I	O
'	O
ll	O
vote	O
for	O
sb	O
.	B-api_mention
setLength	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
not	O
only	O
because	O
it	O
'	O
s	O
one	O
function	O
call	O
but	O
because	O
it	O
don	O
'	O
t	O
actually	O
copy	O
the	O
array	O
into	O
another	O
array	O
like	O
sb	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
It	O
just	O
fill	O
the	O
remaining	O
characters	O
to	O
be	O
0	O
and	O
set	O
the	O
length	O
variable	O
to	O
the	O
new	O
length	O
.	O
You	O
can	O
take	O
a	O
look	O
into	O
their	O
implementation	O
to	O
validate	O
my	O
point	O
from	O
here	O
at	O
setLength	B-api_mention
function	O
and	O
delete0	O
function	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725518	O
Because	O
the	O
concept	O
of	O
a	O
List	B-api_mention
is	O
incompatible	O
with	O
the	O
concept	O
of	O
an	O
automatically	O
sorted	O
collection	O
.	O
The	O
point	O
of	O
a	O
List	B-api_mention
is	O
that	O
after	O
calling	O
list	B-api_mention
.	I-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
a	O
call	O
to	O
list	B-api_mention
.	I-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
elem	O
.	O
With	O
an	O
auto	O
-	O
sorted	O
list	O
,	O
the	O
element	O
could	O
end	O
up	O
in	O
an	O
arbitrary	O
position	O
.	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673375	O
You	O
should	O
be	O
able	O
to	O
write	O
the	O
file	O
on	O
the	O
response	O
directly	O
.	O
Something	O
like	O
#	O
pre	O
and	O
then	O
write	O
the	O
file	O
as	O
a	O
binary	O
stream	O
on	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Remember	O
to	O
do	O
response	O
.	B-api_mention
flush	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
at	O
the	O
end	O
and	O
that	O
should	O
do	O
it	O
.	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
21172732	O
The	O
parallel	O
streams	O
use	O
the	O
default	O
ForkJoinPool	B-api_mention
which	O
by	O
default	O
has	O
one	O
less	O
threads	O
as	O
you	O
have	O
processors	O
,	O
as	O
returned	O
by	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
availableProcessors	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
so	O
parallel	O
streams	O
use	O
all	O
your	O
processors	O
because	O
they	O
also	O
use	O
the	O
main	O
thread	O
)	O
:	O
#	O
blockquote	O
To	O
change	O
the	O
way	O
parallel	O
streams	O
are	O
executed	O
,	O
you	O
can	O
either	O
#	O
li	O
submit	O
the	O
parallel	O
stream	O
execution	O
to	O
your	O
own	O
ForkJoinPool	B-api_mention
:	O
yourFJP	O
.	B-api_mention
submit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
#	O
li	O
you	O
can	O
change	O
the	O
size	O
of	O
the	O
common	O
pool	O
using	O
system	O
properties	O
:	O
System	B-api_mention
.	I-api_mention
setProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
a	O
target	O
parallelism	O
of	O
20	O
threads	O
.	O
Example	O
of	O
the	O
latter	O
on	O
my	O
machine	O
which	O
has	O
8	O
processors	O
.	O
If	O
I	O
run	O
the	O
following	O
program	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
#	O
blockquote	O
So	O
you	O
can	O
see	O
that	O
the	O
parallel	O
stream	O
processes	O
8	O
items	O
at	O
a	O
time	O
,	O
i	O
.	O
e	O
.	O
it	O
uses	O
8	O
threads	O
.	O
However	O
if	O
I	O
uncomment	O
the	O
commented	O
line	O
,	O
the	O
output	O
is	O
:	O
#	O
blockquote	O
This	O
time	O
the	O
parallel	O
stream	O
has	O
used	O
20	O
threads	O
and	O
all	O
20	O
elements	O
in	O
the	O
stream	O
have	O
been	O
processed	O
comcurrently	O
.	O
Question	O
-	O
19998454	O
,	O
answer	O
-	O
19998652	O
This	O
is	O
being	O
described	O
in	O
this	O
article	O
.	O
Think	O
about	O
forEach	B-api_mention
of	O
Collections	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
…	O
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
25074487	O
-	O
getParameter	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
get	O
the	O
value	O
from	O
the	O
posted	O
form	O
of	O
the	O
input	O
box	O
named	O
"	O
testParam	O
"	O
which	O
is	O
"	O
Client	O
param	O
"	O
.	O
It	O
will	O
then	O
print	O
it	O
out	O
,	O
so	O
you	O
should	O
see	O
"	O
Client	O
Param	O
"	O
on	O
the	O
screen	O
.	O
So	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
)	I-api_mention
will	O
retrieve	O
a	O
value	O
that	O
the	O
client	O
has	O
submitted	O
.	O
You	O
will	O
get	O
the	O
value	O
on	O
the	O
server	O
side	O
.	O
-	O
getAttribute	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
this	O
is	O
all	O
done	O
server	O
side	O
.	O
YOU	O
add	O
the	O
attribute	O
to	O
the	O
request	O
and	O
YOU	O
submit	O
the	O
request	O
to	O
another	O
resource	O
,	O
the	O
client	O
does	O
not	O
know	O
about	O
this	O
.	O
So	O
all	O
the	O
code	O
handling	O
this	O
would	O
typically	O
be	O
in	O
servlets	O
.	B-api_mention
getAttribute	I-api_mention
always	O
return	O
object	O
.	O
Question	O
-	O
29095967	O
I	O
have	O
this	O
list	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
:	O
[	O
StringLiteral	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
StringLiteral	O
]	O
And	O
I	O
'	O
d	O
like	O
something	O
like	O
this	O
:	O
[	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
]	O
In	O
other	O
words	O
I	O
want	O
to	O
split	O
my	O
list	O
in	O
sublists	O
using	O
the	O
null	O
value	O
as	O
separator	O
,	O
in	O
order	O
to	O
obtain	O
a	O
list	O
of	O
lists	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
.	O
I	O
'	O
m	O
looking	O
for	O
a	O
Java	O
8	O
solution	O
.	O
I	O
'	O
ve	O
tried	O
with	O
Collectors	B-api_mention
.	I-api_mention
partitioningBy	I-api_mention
but	O
I	O
'	O
m	O
not	O
sure	O
it	O
is	O
what	O
I	O
'	O
m	O
looking	O
for	O
.	O
Thanks	O
!	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262520	O
Basicly	O
,	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
an	O
executable	O
piece	O
of	O
code	O
that	O
actually	O
does	O
something	O
(	O
it	O
creates	O
a	O
new	O
String	B-api_mention
and	O
then	O
returns	O
it	O
)	O
.	O
The	O
returned	O
value	O
can	O
be	O
ignored	O
and	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
still	O
be	O
used	O
in	O
void	O
-	O
return	O
lambda	O
to	O
create	O
a	O
new	O
String	B-api_mention
.	O
However	O
,	O
StringLiteral	O
is	O
just	O
a	O
constant	O
that	O
doesn	O
'	O
t	O
do	O
anything	O
on	O
it	O
'	O
s	O
own	O
.	O
The	O
only	O
reasonable	O
thing	O
to	O
do	O
with	O
it	O
in	O
lambda	O
body	O
is	O
to	O
return	O
it	O
.	O
But	O
the	O
lambda	O
method	O
would	O
have	O
to	O
have	O
return	O
type	O
String	B-api_mention
or	O
Object	B-api_mention
,	O
but	O
it	O
returns	O
void	O
,	O
hence	O
the	O
String	B-api_mention
cannot	O
be	O
casted	O
to	O
void	O
error	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846943	O
It	O
is	O
,	O
in	O
my	O
personal	O
experience	O
admittedly	O
,	O
very	O
useful	O
in	O
cases	O
where	O
an	O
API	O
requires	O
a	O
collection	O
of	O
parameters	O
,	O
but	O
you	O
have	O
nothing	O
to	O
provide	O
.	O
For	O
example	O
you	O
may	O
have	O
an	O
API	O
that	O
looks	O
something	O
like	O
this	O
,	O
and	O
does	O
not	O
allow	O
null	O
references	O
:	O
public	O
ResultSet	B-api_mention
executeQuery	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
have	O
a	O
query	O
that	O
doesn	O
'	O
t	O
take	O
any	O
parameters	O
,	O
it	O
'	O
s	O
certainly	O
a	O
bit	O
wasteful	O
to	O
create	O
a	O
HashMap	B-api_mention
,	O
which	O
involves	O
allocating	O
an	O
array	O
,	O
when	O
you	O
could	O
just	O
pass	O
in	O
the	O
'	O
Empty	O
Map	O
'	O
which	O
is	O
effectively	O
a	O
constant	O
,	O
the	O
way	O
it	O
'	O
s	O
implemented	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	O
Question	O
-	O
8189466	O
,	O
answer	O
-	O
23592535	O
I	O
had	O
that	O
same	O
problem	O
but	O
in	O
case	O
that	O
I	O
was	O
adding	O
en	O
element	O
into	O
iterated	O
list	O
.	O
I	O
made	O
it	O
this	O
way	O
#	O
pre	O
Now	O
everything	O
goes	O
fine	O
because	O
you	O
don	O
'	O
t	O
create	O
any	O
iterator	O
over	O
your	O
list	O
,	O
you	O
iterate	O
over	O
it	O
"	O
manually	O
"	O
.	O
And	O
condition	O
i	O
<	O
integerList	O
.	B-api_mention
size	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
never	O
fool	O
you	O
because	O
when	O
you	O
remove	O
/	O
add	O
something	O
into	O
List	B-api_mention
size	O
of	O
the	O
List	B-api_mention
decrement	O
/	O
increment	O
.	O
.	O
Hope	O
it	O
helps	O
,	O
for	O
me	O
that	O
was	O
solution	O
.	O
Question	O
-	O
25222811	O
,	O
answer	O
-	O
26676046	O
To	O
begin	O
with	O
(	O
and	O
unrelated	O
)	O
,	O
instantiating	O
the	O
Application	B-api_mention
class	O
by	O
yourself	O
does	O
not	O
seem	O
to	O
be	O
its	O
intended	O
use	O
.	O
From	O
what	O
one	O
can	O
read	O
from	O
its	O
source	O
,	O
you	O
are	O
rather	O
expected	O
to	O
use	O
the	O
static	O
instance	O
returned	O
by	O
getApplication	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Now	O
let	O
'	O
s	O
get	O
to	O
the	O
error	O
Eclipse	O
reports	O
.	O
I	O
'	O
ve	O
ran	O
into	O
a	O
similar	O
issue	O
recently	O
:	O
Access	O
restriction	O
:	O
The	O
method	O
.	O
.	O
.	O
is	O
not	O
API	O
(	O
args	O
)	O
.	O
I	O
called	O
the	O
method	O
in	O
question	O
as	O
a	O
method	O
of	O
an	O
object	O
which	O
inherited	O
that	O
method	O
from	O
a	O
super	O
class	O
.	O
All	O
I	O
had	O
to	O
do	O
was	O
to	O
add	O
the	O
package	O
the	O
super	O
class	O
was	O
in	O
to	O
the	O
packages	O
imported	O
by	O
my	O
plugin	O
.	O
However	O
,	O
there	O
is	O
a	O
lot	O
of	O
different	O
causes	O
for	O
errors	O
based	O
on	O
"	O
restriction	O
on	O
required	O
project	O
/	O
library	O
"	O
.	O
Similar	O
to	O
the	O
problem	O
described	O
above	O
,	O
the	O
type	O
you	O
are	O
using	O
might	O
have	O
dependencies	O
to	O
packages	O
that	O
are	O
not	O
exported	O
by	O
the	O
library	O
or	O
might	O
not	O
be	O
exported	O
itself	O
.	O
In	O
that	O
case	O
you	O
can	O
try	O
to	O
track	O
down	O
the	O
missing	O
packages	O
and	O
export	O
them	O
my	O
yourself	O
,	O
as	O
suggested	O
here	O
,	O
or	O
try	O
Access	O
Rules	O
.	O
Other	O
possible	O
scenarios	O
include	O
:	O
#	O
li	O
Eclipse	O
wants	O
to	O
keep	O
you	O
from	O
using	O
available	O
packages	O
that	O
are	O
not	O
part	O
of	O
the	O
public	O
Java	O
API	O
(	O
solution	O
1	O
,	O
2	O
)	O
#	O
li	O
Dependencies	O
are	O
satisfied	O
by	O
multiple	O
sources	O
,	O
versions	O
are	O
conflicting	O
etc	O
.	O
(	O
solution	O
1	O
,	O
2	O
,	O
3	O
)	O
#	O
li	O
Eclipse	O
is	O
using	O
a	O
JRE	O
where	O
a	O
JDK	O
is	O
necessary	O
(	O
which	O
might	O
be	O
the	O
case	O
here	O
,	O
from	O
what	O
your	O
errors	O
say	O
;	O
solution	O
)	O
or	O
JRE	O
/	O
JDK	O
version	O
in	O
project	O
build	O
path	O
is	O
not	O
the	O
right	O
one	O
This	O
ended	O
up	O
as	O
more	O
like	O
a	O
medley	O
of	O
restriction	O
-	O
related	O
issues	O
than	O
an	O
actual	O
answer	O
.	O
But	O
since	O
restriction	O
on	O
required	O
projects	O
is	O
such	O
a	O
versatile	O
error	O
to	O
be	O
reported	O
,	O
the	O
perfect	O
recipe	O
is	O
probably	O
still	O
to	O
be	O
found	O
.	O
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375716	O
String	B-api_mention
is	O
immutable	O
irrespective	O
of	O
how	O
it	O
is	O
instantiated	O
1	O
)	O
Short	O
answer	O
is	O
yes	O
,	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
immutable	O
too	O
.	O
Because	O
every	O
possible	O
mutable	O
operation	O
(	O
like	O
replace	O
,	O
toLowerCase	B-api_mention
etcetra	O
)	O
that	O
you	O
perform	O
on	O
String	B-api_mention
does	O
not	O
affect	O
the	O
original	O
String	B-api_mention
instance	O
and	O
returns	O
you	O
a	O
new	O
instance	O
.	O
You	O
may	O
check	O
this	O
in	O
Javadoc	O
for	O
String	B-api_mention
.	O
Each	O
public	O
method	O
of	O
String	B-api_mention
that	O
is	O
exposed	O
returns	O
a	O
new	O
String	B-api_mention
instance	O
and	O
does	O
not	O
alter	O
the	O
present	O
instance	O
on	O
which	O
you	O
called	O
the	O
method	O
.	O
This	O
is	O
very	O
helpful	O
in	O
Multi	O
-	O
threaded	O
environment	O
as	O
you	O
don	O
'	O
t	O
have	O
to	O
think	O
about	O
mutability	O
(	O
someone	O
will	O
change	O
the	O
value	O
)	O
every	O
time	O
you	O
pass	O
or	O
share	O
the	O
String	B-api_mention
around	O
.	O
String	B-api_mention
can	O
easily	O
be	O
the	O
most	O
used	O
data	O
type	O
,	O
so	O
the	O
designers	O
have	O
blessed	O
us	O
all	O
to	O
not	O
think	O
about	O
mutability	O
everytime	O
and	O
saved	O
us	O
a	O
lot	O
of	O
pain	O
.	O
Immutability	O
allowed	O
String	B-api_mention
pool	O
or	O
caching	O
It	O
is	O
because	O
of	O
immutability	O
property	O
that	O
the	O
internal	O
pool	O
of	O
string	O
was	O
possible	O
,	O
as	O
when	O
same	O
String	B-api_mention
value	O
is	O
required	O
at	O
some	O
other	O
place	O
then	O
that	O
immutable	O
reference	O
is	O
returned	O
.	O
If	O
String	B-api_mention
would	O
have	O
been	O
mutable	O
then	O
it	O
would	O
not	O
have	O
been	O
possible	O
to	O
share	O
String	B-api_mention
s	O
like	O
this	O
to	O
save	O
memory	O
.	O
String	B-api_mention
immutablity	O
was	O
not	O
because	O
of	O
pooling	O
,	O
but	O
immutability	O
has	O
more	O
benefits	O
attached	O
to	O
it	O
.	O
String	B-api_mention
interning	O
or	O
pooling	O
is	O
an	O
example	O
of	O
Flyweight	O
Design	O
pattern	O
2	O
)	O
Yes	O
it	O
will	O
be	O
interned	O
like	O
any	O
other	O
String	B-api_mention
as	O
a	O
blank	O
String	B-api_mention
is	O
also	O
as	O
much	O
a	O
String	B-api_mention
as	O
other	O
String	B-api_mention
instances	O
.	O
References	O
:	O
#	O
li	O
Immutability	O
benefits	O
of	O
String	B-api_mention
Question	O
-	O
4812570	O
,	O
answer	O
-	O
4812585	O
You	O
have	O
to	O
use	O
getStackTrace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
instead	O
of	O
printStackTrace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Here	O
is	O
a	O
good	O
example	O
:	O
#	O
pre	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923227	O
Optionals	O
aren	O
'	O
t	O
designed	O
for	O
this	O
purpose	O
,	O
as	O
explained	O
nicely	O
by	O
Brian	O
Goetz	O
.	O
You	O
can	O
always	O
use	O
@	O
Nullable	O
to	O
denote	O
that	O
a	O
method	O
argument	O
can	O
be	O
null	O
.	O
Using	O
an	O
optional	O
does	O
not	O
really	O
enable	O
you	O
to	O
write	O
your	O
method	O
logic	O
more	O
neatly	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25853827	O
I	O
would	O
argue	O
first	O
-	O
off	O
that	O
Serializable	B-api_mention
and	O
Cloneable	B-api_mention
are	O
bad	O
examples	O
of	O
marker	O
interfaces	O
.	O
Sure	O
,	O
they	O
'	O
re	O
interfaces	O
with	O
methods	O
,	O
but	O
they	O
imply	O
methods	O
,	O
such	O
as	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
(	O
The	O
compiler	O
will	O
create	O
a	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
you	O
if	O
you	O
don	O
'	O
t	O
override	O
it	O
,	O
and	O
all	O
objects	O
already	O
have	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
the	O
compiler	O
will	O
again	O
create	O
a	O
real	O
clone	O
(	O
args	O
)	O
method	O
for	O
you	O
but	O
with	O
caveats	O
.	O
Both	O
of	O
these	O
are	O
weird	O
edge	O
cases	O
that	O
really	O
aren	O
'	O
t	O
good	O
design	O
examples	O
.	O
)	O
Marker	O
interfaces	O
are	O
generally	O
used	O
for	O
one	O
of	O
two	O
purposes	O
:	O
1	O
)	O
As	O
a	O
shortcut	O
to	O
avoid	O
an	O
excessively	O
long	O
type	O
,	O
which	O
can	O
happen	O
with	O
lots	O
of	O
generics	O
.	O
For	O
instance	O
,	O
say	O
you	O
have	O
this	O
method	O
signature	O
:	O
public	O
void	O
doSomething	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
.	O
.	O
.	O
}	O
That	O
'	O
s	O
messy	O
and	O
annoying	O
to	O
type	O
,	O
and	O
more	O
importantly	O
,	O
difficult	O
to	O
understand	O
.	O
Consider	O
this	O
instead	O
:	O
public	O
interface	O
Widget	O
extends	O
Foobar	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
{	O
}	O
Then	O
your	O
method	O
looks	O
like	O
this	O
:	O
public	O
void	O
doSomething	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
.	O
.	O
.	O
}	O
Not	O
only	O
is	O
it	O
clearer	O
,	O
but	O
you	O
can	O
now	O
Javadoc	O
the	O
Widget	B-api_mention
interface	O
,	O
and	O
it	O
'	O
s	O
also	O
easier	O
to	O
search	O
for	O
all	O
occurrences	O
in	O
your	O
code	O
of	O
Widget	B-api_mention
.	O
2	O
)	O
Marker	B-api_mention
interfaces	O
can	O
also	O
be	O
used	O
as	O
a	O
way	O
around	O
Java	O
'	O
s	O
lack	O
of	O
intersection	O
types	O
.	O
With	O
a	O
marker	B-api_mention
interface	O
,	O
you	O
can	O
require	O
something	O
to	O
be	O
of	O
two	O
different	O
types	O
,	O
such	O
as	O
in	O
a	O
method	O
signature	O
.	O
Say	O
you	O
have	O
some	O
interface	O
Widget	B-api_mention
in	O
your	O
application	O
,	O
like	O
we	O
described	O
above	O
.	O
If	O
you	O
have	O
a	O
method	O
that	O
requires	O
a	O
Widget	B-api_mention
that	O
also	O
happens	O
to	O
let	O
you	O
iterate	O
over	O
it	O
(	O
it	O
'	O
s	O
contrived	O
,	O
but	O
work	O
with	O
me	O
here	O
)	O
,	O
your	O
only	O
good	O
solution	O
is	O
to	O
create	O
a	O
marker	O
interface	O
that	O
extends	O
both	O
interfaces	O
:	O
public	O
interface	O
IterableWidget	B-api_mention
extends	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
Widget	B-api_mention
{	O
}	O
And	O
in	O
your	O
code	O
:	O
#	O
pre	O
Question	O
-	O
24649842	O
,	O
answer	O
-	O
24649939	O
Try	O
adding	O
a	O
Thread	B-api_mention
.	I-api_mention
sleep	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
within	O
your	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
.	O
.	O
Basically	O
it	O
'	O
s	O
the	O
difference	O
between	O
scheduling	O
something	O
based	O
on	O
when	O
the	O
previous	O
execution	O
ends	O
and	O
when	O
it	O
(	O
logically	O
)	O
starts	O
.	O
For	O
example	O
,	O
suppose	O
I	O
schedule	O
an	O
alarm	O
to	O
go	O
off	O
with	O
a	O
fixed	O
rate	O
of	O
once	O
an	O
hour	O
,	O
and	O
every	O
time	O
it	O
goes	O
off	O
,	O
I	O
have	O
a	O
cup	O
of	O
coffee	O
,	O
which	O
takes	O
10	O
minutes	O
.	O
Suppose	O
that	O
starts	O
at	O
midnight	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
If	O
I	O
schedule	O
with	O
a	O
fixed	O
delay	O
of	O
one	O
hour	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
Which	O
one	O
you	O
want	O
depends	O
on	O
your	O
task	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276497	O
No	O
,	O
the	O
topmost	O
level	O
Stream	B-api_mention
or	O
reader	O
will	O
ensure	O
that	O
all	O
underlying	O
streams	O
/	O
readers	O
are	O
closed	O
.	O
Check	O
the	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
implementation	O
of	O
your	O
topmost	O
level	O
stream	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
35834484	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
You	O
can	O
also	O
use	O
public	O
static	O
Integer	B-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
throws	O
NumberFormatException	B-api_mention
.	O
It	O
also	O
works	O
for	O
base	O
8	O
and	O
16	O
:	O
#	O
pre	O
If	O
you	O
want	O
to	O
get	O
int	O
instead	O
of	O
Integer	O
you	O
can	O
use	O
:	O
#	O
li	O
Unboxing	O
:	O
int	O
val	O
=	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
intValue	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993478	O
You	O
are	O
consuming	O
the	O
value	O
of	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
asking	O
for	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
next	O
(	O
args	O
)	O
,	O
per	O
default	O
,	O
returns	O
everything	O
to	O
the	O
next	O
whitespace	O
(	O
args	O
)	O
.	O
So	O
you	O
are	O
iterating	O
through	O
all	O
whitespace	O
seperated	O
strings	O
,	O
and	O
after	O
each	O
of	O
them	O
you	O
are	O
asking	O
about	O
the	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
i	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
.	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
(	O
still	O
a	O
whitespace	O
left	O
)	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
(	O
Line	O
Seperator	O
,	O
probably	O
)	O
.	O
haxNext	B-api_mention
?	O
False	O
,	O
no	O
whitespace	O
anymore	O
.	O
Question	O
-	O
11411022	O
,	O
answer	O
-	O
34052602	O
The	O
best	O
way	O
is	O
the	O
clearest	O
way	O
:	O
*	O
Thread	B-api_mention
.	I-api_mention
currentThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
,	O
if	O
the	O
runtime	O
platform	O
is	O
API	O
level	O
23	O
(	O
Marshmallow	O
6	O
.	O
0	O
)	O
or	O
higher	O
:	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
isCurrentThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
See	O
the	O
Looper	B-api_mention
API	O
.	O
Note	O
that	O
calling	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
involves	O
synchonization	O
(	O
see	O
the	O
source	O
)	O
.	O
You	O
might	O
want	O
to	O
avoid	O
the	O
overhead	O
by	O
storing	O
the	O
return	O
value	O
and	O
reusing	O
it	O
.	O
*	O
credit	O
greg7gkb	O
Question	O
-	O
31316581	O
,	O
answer	O
-	O
31327420	O
If	O
type	O
inference	O
produces	O
a	O
single	O
upper	O
bound	O
for	O
a	O
type	O
variable	O
,	O
typically	O
the	O
upper	O
bound	O
is	O
chosen	O
as	O
the	O
solution	O
.	O
For	O
example	O
,	O
if	O
T	O
<	O
<	O
Number	O
,	O
the	O
solution	O
is	O
T	O
=	O
Number	O
.	O
Although	O
Integer	B-api_mention
,	O
Float	B-api_mention
etc	O
.	O
could	O
also	O
satisfy	O
the	O
constraint	O
,	O
there	O
'	O
s	O
no	O
good	O
reason	O
to	O
choose	O
them	O
over	O
Number	B-api_mention
.	O
That	O
was	O
also	O
the	O
case	O
for	O
throws	O
T	O
in	O
java	O
5	O
-	O
7	O
:	O
T	O
<	O
<	O
Throwable	O
=	O
>	O
T	O
=	O
Throwable	O
.	O
(	O
Sneaky	O
throw	O
solutions	O
all	O
had	O
explicit	O
<	O
RuntimeException	O
>	O
type	O
arguments	O
,	O
otherwise	O
<	O
Throwable	O
>	O
is	O
inferred	O
.	O
)	O
In	O
java8	O
,	O
with	O
the	O
introduction	O
of	O
lambda	O
,	O
this	O
becomes	O
problematic	O
.	O
Consider	O
this	O
case	O
#	O
pre	O
If	O
we	O
invoke	O
with	O
an	O
empty	O
lambda	O
,	O
what	O
would	O
T	O
be	O
inferred	O
as	O
?	O
invoke	O
(	O
args	O
)	O
;	O
The	O
only	O
constraint	O
on	O
T	O
is	O
an	O
upper	O
bound	O
Throwable	B-api_mention
.	O
In	O
earlier	O
stage	O
of	O
java8	O
,	O
T	O
=	O
Throwable	B-api_mention
would	O
be	O
inferred	O
.	O
See	O
this	O
report	O
I	O
filed	O
.	O
But	O
that	O
is	O
pretty	O
silly	O
,	O
to	O
infer	O
Throwable	B-api_mention
,	O
a	O
checked	O
exception	O
,	O
out	O
of	O
an	O
empty	O
block	O
.	O
A	O
solution	O
was	O
proposed	O
in	O
the	O
report	O
(	O
which	O
is	O
apparently	O
adopted	O
by	O
JLS	O
)	O
-	O
#	O
pre	O
i	O
.	O
e	O
.	O
if	O
the	O
upper	O
bound	O
is	O
Exception	B-api_mention
or	O
Throwable	B-api_mention
,	O
choose	O
RuntimeException	B-api_mention
as	O
the	O
solution	O
.	O
In	O
this	O
case	O
,	O
there	O
is	O
a	O
good	O
reason	O
to	O
choose	O
a	O
particular	O
subtype	O
of	O
the	O
upper	O
bound	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
29784337	O
The	O
other	O
answers	O
all	O
use	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
an	O
unmodifiable	O
list	O
(	O
an	O
UnsupportedOperationException	B-api_mention
is	O
thrown	O
if	O
you	O
try	O
to	O
add	O
or	O
remove	O
an	O
element	O
)	O
.	O
To	O
get	O
a	O
mutable	O
list	O
you	O
can	O
wrap	O
the	O
returned	O
list	O
in	O
a	O
new	O
ArrayList	B-api_mention
as	O
a	O
couple	O
of	O
answers	O
point	O
out	O
,	O
but	O
a	O
cleaner	O
solution	O
is	O
to	O
use	O
Guava	O
'	O
s	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
available	O
since	O
at	O
least	O
Guava	O
10	O
,	O
released	O
in	O
2011	O
)	O
.	O
For	O
example	O
:	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
18532488	O
In	O
many	O
other	O
languages	O
,	O
eg	O
.	O
Haskell	O
,	O
it	O
is	O
easy	O
to	O
repeat	O
a	O
value	O
or	O
function	O
multiple	O
times	O
,	O
eg	O
.	O
to	O
get	O
a	O
list	O
of	O
8	O
copies	O
of	O
the	O
value	O
1	O
:	O
take	O
8	O
(	O
args	O
)	O
but	O
I	O
haven	O
'	O
t	O
found	O
this	O
yet	O
in	O
Java	O
8	O
.	O
Is	O
there	O
such	O
a	O
function	O
in	O
Java	O
8	O
'	O
s	O
JDK	O
?	O
Or	O
alternatively	O
something	O
equivalent	O
to	O
a	O
range	O
like	O
[	O
1	O
.	O
.	O
8	O
]	O
It	O
would	O
seem	O
an	O
obvious	O
replacement	O
for	O
a	O
verbose	O
statement	O
in	O
Java	O
like	O
#	O
pre	O
to	O
have	O
something	O
like	O
Range	B-api_mention
.	I-api_mention
from	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
this	O
particular	O
example	O
doesn	O
'	O
t	O
look	O
much	O
more	O
concise	O
actually	O
.	O
.	O
.	O
but	O
hopefully	O
it	O
'	O
s	O
more	O
readable	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16149127	O
You	O
can	O
'	O
t	O
use	O
a	O
primitive	O
because	O
HashMap	B-api_mention
use	O
object	O
internally	O
for	O
the	O
key	O
.	O
So	O
you	O
can	O
only	O
use	O
an	O
object	O
that	O
inherits	O
from	O
Object	B-api_mention
(	O
that	O
is	O
any	O
object	O
)	O
.	O
That	O
is	O
the	O
function	O
put	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
HashMap	B-api_mention
and	O
as	O
you	O
can	O
see	O
it	O
uses	O
Object	B-api_mention
for	O
K	O
:	O
#	O
pre	O
The	O
expression	O
"	O
k	O
=	O
e	O
.	O
key	O
"	O
should	O
make	O
it	O
clear	O
.	O
I	O
suggest	O
to	O
use	O
a	O
wrapper	O
like	O
Integer	B-api_mention
and	O
autoboxing	O
.	O
Question	O
-	O
7569335	O
,	O
answer	O
-	O
39329245	O
As	O
others	O
have	O
pointed	O
out	O
the	O
preferred	O
way	O
is	O
to	O
use	O
:	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reverse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
if	O
you	O
want	O
to	O
implement	O
this	O
by	O
youself	O
,	O
i	O
'	O
am	O
afraid	O
that	O
the	O
rest	O
of	O
responses	O
have	O
flaws	O
.	O
The	O
reason	O
is	O
that	O
String	B-api_mention
represent	O
a	O
list	O
of	O
Unicode	O
points	O
,	O
encoded	O
in	O
a	O
char	O
[	O
]	O
array	O
according	O
to	O
the	O
variable	O
-	O
length	O
encoding	O
:	O
UTF	O
-	O
16	O
.	O
This	O
means	O
some	O
code	O
points	O
use	O
a	O
single	O
element	O
of	O
the	O
array	O
(	O
one	O
code	O
unit	O
)	O
but	O
others	O
use	O
two	O
of	O
them	O
,	O
so	O
there	O
might	O
be	O
pairs	O
of	O
characters	O
that	O
must	O
be	O
treated	O
as	O
a	O
single	O
unit	O
(	O
consecutive	O
"	O
high	O
"	O
and	O
"	O
low	O
"	O
surrogates	O
)	O
#	O
pre	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32182250	O
Integer	B-api_mention
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
a	I-api_mention
)	I-api_mention
can	O
return	O
false	O
But	O
you	O
have	O
to	O
be	O
really	O
evil	O
and	O
use	O
reflections	O
and	O
Multithreading	O
:	O
If	O
you	O
run	O
this	O
code	O
,	O
there	O
is	O
a	O
chance	O
that	O
a	O
racing	O
condition	O
can	O
change	O
the	O
internal	O
Value	O
of	O
myInt	O
while	O
the	O
comparision	O
takes	O
place	O
.	O
If	O
you	O
want	O
to	O
simulate	O
this	O
condition	O
,	O
just	O
set	O
a	O
breakpoint	O
inside	O
of	O
Integer	B-api_mention
.	I-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
run	O
the	O
code	O
in	O
debug	O
and	O
hit	O
continue	O
.	O
This	O
will	O
create	O
a	O
delay	O
which	O
creates	O
the	O
race	O
condition	O
artificially	O
and	O
the	O
console	O
will	O
return	O
false	O
.	O
#	O
pre	O
Question	O
-	O
4772425	O
,	O
answer	O
-	O
18953213	O
remove	O
one	O
y	O
form	O
SimpleDateFormat	B-api_mention
dt1	O
=	O
new	O
SimpleDateFormat	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
should	O
be	O
SimpleDateFormat	B-api_mention
dt1	O
=	O
new	O
SimpleDateFormat	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
13950338	O
,	O
answer	O
-	O
17066803	O
Grant	O
Vibration	O
Permission	O
Before	O
you	O
start	O
implementing	O
any	O
vibration	O
code	O
,	O
you	O
have	O
to	O
give	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
:	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
Make	O
sure	O
to	O
include	O
this	O
line	O
in	O
your	O
AndroidManifest	O
.	O
xml	O
file	O
.	O
Import	O
the	O
Vibration	O
Library	O
Most	O
IDEs	O
will	O
do	O
this	O
for	O
you	O
,	O
but	O
here	O
is	O
the	O
import	O
statement	O
if	O
yours	O
doesn	O
'	O
t	O
:	O
import	B-api_mention
android	I-api_mention
.	I-api_mention
os	I-api_mention
.	I-api_mention
Vibrator	I-api_mention
;	O
Make	O
sure	O
this	O
in	O
the	O
activity	O
where	O
you	O
want	O
the	O
vibration	O
to	O
occur	O
.	O
How	O
to	O
Vibrate	B-api_mention
for	O
a	O
Given	O
Time	O
In	O
most	O
circumstances	O
,	O
you	O
'	O
ll	O
be	O
wanting	O
to	O
vibrate	O
the	O
device	O
for	O
a	O
short	O
,	O
predetermined	O
amount	O
of	O
time	O
.	O
You	O
can	O
achieve	O
this	O
by	O
using	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
is	O
a	O
quick	O
example	O
:	O
#	O
pre	O
That	O
'	O
s	O
it	O
,	O
simple	O
!	O
How	O
to	O
Vibrate	O
Indefinitely	O
It	O
may	O
be	O
the	O
case	O
that	O
you	O
want	O
the	O
device	O
to	O
continue	O
vibrating	O
indefinitely	O
.	O
For	O
this	O
,	O
we	O
use	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
When	O
you	O
'	O
re	O
ready	O
to	O
stop	O
the	O
vibration	O
,	O
just	O
call	O
the	O
cancel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
v	O
.	O
cancel	O
(	O
args	O
)	O
;	O
How	O
to	O
use	O
Vibration	O
Patterns	O
If	O
you	O
want	O
a	O
more	O
bespoke	O
vibration	O
,	O
you	O
can	O
attempt	O
to	O
create	O
your	O
own	O
vibration	O
patterns	O
:	O
#	O
pre	O
More	O
Complex	O
Vibrations	O
There	O
are	O
multiple	O
SDKs	O
that	O
offer	O
a	O
more	O
comprehensive	O
range	O
of	O
haptic	O
feedback	O
.	O
One	O
that	O
I	O
use	O
for	O
special	O
effects	O
is	O
Immersion	O
'	O
s	O
Haptic	O
Development	O
Platform	O
for	O
Android	O
.	O
Troubleshooting	O
If	O
your	O
device	O
won	O
'	O
t	O
vibrate	O
,	O
first	O
make	O
sure	O
that	O
it	O
can	O
vibrate	O
:	O
#	O
pre	O
Secondly	O
,	O
please	O
ensure	O
that	O
you	O
'	O
ve	O
given	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
!	O
Refer	O
back	O
to	O
the	O
first	O
point	O
.	O
Question	O
-	O
28681737	O
,	O
answer	O
-	O
28684917	O
The	O
short	O
answer	O
is	O
:	O
it	O
'	O
s	O
safe	O
if	O
you	O
use	O
them	O
safely	O
:	O
)	O
The	O
snarky	O
answer	O
:	O
tell	O
me	O
what	O
you	O
mean	O
by	O
traits	O
,	O
and	O
maybe	O
I	O
'	O
ll	O
give	O
you	O
a	O
better	O
answer	O
:	O
)	O
In	O
all	O
seriousness	O
,	O
the	O
term	O
"	O
trait	O
"	O
is	O
not	O
well	O
-	O
defined	O
.	O
Many	O
Java	O
developers	O
are	O
most	O
familiar	O
with	O
traits	O
as	O
they	O
are	O
expressed	O
in	O
Scala	O
,	O
but	O
Scala	O
is	O
far	O
from	O
the	O
first	O
language	O
to	O
have	O
traits	O
,	O
either	O
in	O
name	O
or	O
in	O
effect	O
.	O
For	O
example	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
stateful	O
(	O
can	O
have	O
var	O
variables	O
)	O
;	O
in	O
Fortress	O
they	O
are	O
pure	O
behavior	O
.	O
Java	O
'	O
s	O
interfaces	O
with	O
default	O
methods	O
are	O
stateless	O
;	O
does	O
this	O
mean	O
they	O
are	O
not	O
traits	O
?	O
(	O
Hint	O
:	O
that	O
was	O
a	O
trick	O
question	O
.	O
)	O
Again	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
composed	O
through	O
linearization	O
;	O
if	O
class	O
A	O
extends	O
traits	O
X	O
and	O
Y	O
,	O
then	O
the	O
order	O
in	O
which	O
X	O
and	O
Y	O
are	O
mixed	O
in	O
determines	O
how	O
conflicts	O
between	O
X	O
and	O
Y	O
are	O
resolved	O
.	O
In	O
Java	O
,	O
this	O
linearization	O
mechanism	O
is	O
not	O
present	O
(	O
it	O
was	O
rejected	O
,	O
in	O
part	O
,	O
because	O
it	O
was	O
too	O
"	O
un	O
-	O
Java	O
-	O
like	O
"	O
.	O
)	O
The	O
proximate	O
reason	O
for	O
adding	O
default	O
methods	O
to	O
interfaces	O
was	O
to	O
support	O
interface	O
evolution	O
,	O
but	O
we	O
were	O
well	O
aware	O
that	O
we	O
were	O
going	O
beyond	O
that	O
.	O
Whether	O
you	O
consider	O
that	O
to	O
be	O
"	O
interface	O
evolution	O
+	O
+	O
"	O
or	O
"	O
traits	O
-	O
-	O
"	O
is	O
a	O
matter	O
of	O
personal	O
interpretation	O
.	O
So	O
,	O
to	O
answer	O
your	O
question	O
about	O
safety	O
.	O
.	O
.	O
so	O
long	O
as	O
you	O
stick	O
to	O
what	O
the	O
mechanism	O
actually	O
supports	O
,	O
rather	O
than	O
trying	O
to	O
wishfully	O
stretch	O
it	O
to	O
something	O
it	O
does	O
not	O
support	O
,	O
you	O
should	O
be	O
fine	O
.	O
A	O
key	O
design	O
goal	O
was	O
that	O
,	O
from	O
the	O
perspective	O
of	O
the	O
client	O
of	O
an	O
interface	O
,	O
default	O
methods	O
should	O
be	O
indistinguishable	O
from	O
"	O
regular	O
"	O
interface	O
methods	O
.	O
The	O
default	O
-	O
ness	O
of	O
a	O
method	O
,	O
therefore	O
,	O
is	O
only	O
interesting	O
to	O
the	O
designer	O
and	O
implementor	O
of	O
the	O
interface	O
.	O
Here	O
are	O
some	O
use	O
cases	O
that	O
are	O
well	O
within	O
the	O
design	O
goals	O
:	O
#	O
li	O
Interface	O
evolution	O
.	O
Here	O
,	O
we	O
are	O
adding	O
a	O
new	O
method	O
to	O
an	O
existing	O
interface	O
,	O
which	O
has	O
a	O
sensible	O
default	O
implementation	O
in	O
terms	O
of	O
existing	O
methods	O
on	O
that	O
interface	O
.	O
An	O
example	O
would	O
be	O
adding	O
the	O
forEach	O
method	O
to	O
Collection	B-api_mention
,	O
where	O
the	O
default	O
implementation	O
is	O
written	O
in	O
terms	O
of	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
li	O
"	O
Optional	O
"	O
methods	O
.	O
Here	O
,	O
the	O
designer	O
of	O
an	O
interface	O
is	O
saying	O
"	O
Implementors	O
need	O
not	O
implement	O
this	O
method	O
if	O
they	O
are	O
willing	O
to	O
live	O
with	O
the	O
limitations	O
in	O
functionality	O
that	O
entails	O
"	O
.	O
For	O
example	O
,	O
Iterator	B-api_mention
.	I-api_mention
remove	I-api_mention
was	O
given	O
a	O
default	O
which	O
throws	O
UnsupportedOperationException	O
;	O
since	O
the	O
vast	O
majority	O
of	O
implementations	O
of	O
Iterator	O
have	O
this	O
behavior	O
anyway	O
,	O
the	O
default	O
makes	O
this	O
method	O
essentially	O
optional	O
.	O
(	O
If	O
the	O
behavior	O
from	O
AbstractCollection	B-api_mention
were	O
expressed	O
as	O
defaults	O
on	O
Collection	B-api_mention
,	O
we	O
might	O
do	O
the	O
same	O
for	O
the	O
mutative	O
methods	O
.	O
)	O
#	O
li	O
Convenience	O
methods	O
.	O
These	O
are	O
methods	O
that	O
are	O
strictly	O
for	O
convenience	O
,	O
again	O
generally	O
implemented	O
in	O
terms	O
of	O
non	O
-	O
default	O
methods	O
on	O
the	O
class	O
.	O
The	O
logger	O
(	O
args	O
)	O
method	O
in	O
your	O
first	O
example	O
is	O
a	O
reasonable	O
illustration	O
of	O
this	O
.	O
#	O
li	O
Combinators	O
.	O
These	O
are	O
compositional	O
methods	O
that	O
instantiate	O
new	O
instances	O
of	O
the	O
interface	O
based	O
on	O
the	O
current	O
instance	O
.	O
For	O
example	O
,	O
the	O
methods	O
Predicate	B-api_mention
.	I-api_mention
and	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Comparator	B-api_mention
.	I-api_mention
thenComparing	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
examples	O
of	O
combinators	O
.	O
If	O
you	O
provide	O
a	O
default	O
implementation	O
,	O
you	O
should	O
also	O
provide	O
some	O
specification	O
for	O
the	O
default	O
(	O
in	O
the	O
JDK	O
,	O
we	O
use	O
the	O
@	O
implSpec	O
javadoc	O
tag	O
for	O
this	O
)	O
to	O
aid	O
implementors	O
in	O
understanding	O
whether	O
they	O
want	O
to	O
override	O
the	O
method	O
or	O
not	O
.	O
Some	O
defaults	O
,	O
like	O
convenience	O
methods	O
and	O
combinators	O
,	O
are	O
almost	O
never	O
overridden	O
;	O
others	O
,	O
like	O
optional	O
methods	O
,	O
are	O
often	O
overridden	O
.	O
You	O
need	O
to	O
provide	O
enough	O
specification	O
(	O
not	O
just	O
documentation	O
)	O
about	O
what	O
the	O
default	O
promises	O
to	O
do	O
,	O
so	O
the	O
implementor	O
can	O
make	O
a	O
sensible	O
decision	O
about	O
whether	O
they	O
need	O
to	O
override	O
it	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7353205	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
more	O
portable	O
way	O
.	O
exec	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
actually	O
calls	O
out	O
to	O
the	O
operating	O
system	O
to	O
execute	O
the	O
hostname	O
command	O
.	O
Here	O
are	O
a	O
couple	O
other	O
related	O
answers	O
on	O
SO	O
:	O
#	O
li	O
Java	O
current	O
machine	O
name	O
and	O
logged	O
in	O
user	O
?	O
#	O
li	O
Get	O
DNS	O
name	O
of	O
local	O
machine	O
as	O
seen	O
by	O
a	O
remote	O
machine	O
EDIT	O
:	O
You	O
should	O
take	O
a	O
look	O
at	O
A	O
.	O
H	O
.	O
'	O
s	O
answer	O
or	O
Arnout	O
Engelen	O
'	O
s	O
answer	O
for	O
details	O
on	O
why	O
this	O
might	O
not	O
work	O
as	O
expected	O
,	O
depending	O
on	O
your	O
situation	O
.	O
As	O
an	O
answer	O
for	O
this	O
person	O
who	O
specifically	O
requested	O
portable	O
,	O
I	O
still	O
think	O
getHostName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
fine	O
,	O
but	O
they	O
bring	O
up	O
some	O
good	O
points	O
that	O
should	O
be	O
considered	O
.	O
Question	O
-	O
5778658	O
,	O
answer	O
-	O
10768914	O
You	O
will	O
need	O
an	O
intermediate	O
class	O
which	O
will	O
buffer	O
between	O
.	O
Each	O
time	O
InputStream	B-api_mention
.	I-api_mention
read	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
the	O
buffering	O
class	O
will	O
fill	O
the	O
passed	O
in	O
byte	O
array	O
with	O
the	O
next	O
chunk	O
passed	O
in	O
from	O
OutputStream	B-api_mention
.	I-api_mention
write	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Since	O
the	O
sizes	O
of	O
the	O
chunks	O
may	O
not	O
be	O
the	O
same	O
,	O
the	O
adapter	O
class	O
will	O
need	O
to	O
store	O
a	O
certain	O
amount	O
until	O
it	O
has	O
enough	O
to	O
fill	O
the	O
read	O
buffer	O
and	O
/	O
or	O
be	O
able	O
to	O
store	O
up	O
any	O
buffer	O
overflow	O
.	O
This	O
article	O
has	O
a	O
nice	O
breakdown	O
of	O
a	O
few	O
different	O
approaches	O
to	O
this	O
problem	O
:	O
#	O
a	O
Question	O
-	O
22409102	O
,	O
answer	O
-	O
33501556	O
Double	B-api_mention
.	I-api_mention
equals	I-api_mention
distinguishes	O
±	O
0	O
.	O
0	O
in	O
Java	O
.	O
(	O
There	O
'	O
s	O
also	O
Float	B-api_mention
.	I-api_mention
equals	I-api_mention
.	O
)	O
I	O
'	O
m	O
a	O
bit	O
surprised	O
no	O
-	O
one	O
has	O
mentioned	O
these	O
,	O
as	O
they	O
seem	O
to	O
me	O
clearer	O
than	O
any	O
method	O
given	O
so	O
far	O
!	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
20130475	O
To	O
convert	O
a	O
Stream	B-api_mention
to	O
an	O
Iterable	B-api_mention
,	O
you	O
can	O
do	O
#	O
pre	O
To	O
pass	O
a	O
Stream	B-api_mention
to	O
a	O
method	O
that	O
expects	O
Iterable	B-api_mention
,	O
void	O
foo	O
(	O
args	O
)	O
simply	O
foo	O
(	O
args	O
)	O
however	O
it	O
probably	O
looks	O
funny	O
;	O
it	O
might	O
be	O
better	O
to	O
be	O
a	O
little	O
bit	O
more	O
explicit	O
foo	O
(	O
args	O
)	O
;	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32859065	O
You	O
can	O
create	O
a	O
Stream	B-api_mention
of	O
the	O
indices	O
using	O
an	O
IntStream	B-api_mention
and	O
then	O
convert	O
them	O
to	O
a	O
Map	O
:	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
map	O
=	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
boxed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
32714194	O
String	B-api_mention
is	O
a	O
special	O
case	O
in	O
Java	O
.	O
It	O
'	O
s	O
a	O
class	O
,	O
which	O
I	O
can	O
examine	O
in	O
the	O
source	O
code	O
,	O
but	O
it	O
also	O
has	O
its	O
own	O
infix	O
operator	O
+	O
,	O
which	O
seems	O
to	O
be	O
syntactic	O
sugar	O
for	O
StringBuilder	B-api_mention
.	O
For	O
example	O
,	O
StringLiteral	O
+	O
yourName	O
;	O
could	O
become	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
There	O
are	O
no	O
user	O
-	O
defined	O
operators	O
in	O
Java	O
,	O
so	O
where	O
is	O
+	O
specified	O
for	O
String	B-api_mention
?	O
Could	O
the	O
same	O
mechanism	O
be	O
used	O
to	O
make	O
additional	O
operators	O
,	O
such	O
as	O
for	O
vectors	O
?	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8727998	O
Another	O
point	O
is	O
the	O
time	O
complexity	O
of	O
insert	O
operations	O
.	O
For	O
a	O
list	O
insert	O
,	O
one	O
expects	O
a	O
complexity	O
of	O
O	O
(	O
1	O
)	O
.	O
But	O
this	O
could	O
not	O
be	O
guaranteed	O
with	O
a	O
sorted	O
list	O
.	O
And	O
the	O
most	O
important	O
point	O
is	O
that	O
lists	O
assume	O
nothing	O
about	O
their	O
elements	O
.	O
For	O
example	O
,	O
you	O
can	O
make	O
lists	O
of	O
things	O
that	O
do	O
not	O
implement	O
equals	B-api_mention
or	O
compare	B-api_mention
.	O
Question	O
-	O
11774099	O
,	O
answer	O
-	O
11774137	O
iterate	O
through	O
the	O
whole	O
65k	O
chars	O
and	O
ask	O
Character	B-api_mention
.	I-api_mention
isJavaIdentifierStart	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
answer	O
is	O
:	O
"	O
undertie	O
"	O
decimal	O
8255	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14492043	O
'	O
Random	O
'	O
is	O
more	O
than	O
just	O
about	O
getting	O
numbers	O
.	O
.	O
.	O
.	O
what	O
you	O
have	O
is	O
pseudo	O
-	O
random	O
If	O
pseudo	O
-	O
random	O
is	O
good	O
enough	O
for	O
your	O
purposes	O
,	O
then	O
sure	O
,	O
it	O
'	O
s	O
way	O
faster	O
(	O
and	O
XOR	O
+	O
Bitshift	O
will	O
be	O
faster	O
than	O
what	O
you	O
have	O
)	O
Rolf	O
Edit	O
:	O
OK	O
,	O
after	O
being	O
too	O
hasty	O
in	O
this	O
answer	O
,	O
let	O
me	O
answer	O
the	O
real	O
reason	O
why	O
your	O
code	O
is	O
faster	O
:	O
From	O
the	O
JavaDoc	O
for	O
Math	B-api_mention
.	I-api_mention
Random	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
blockquote	O
This	O
is	O
likely	O
why	O
your	O
code	O
is	O
faster	O
.	O
Question	O
-	O
31419029	O
,	O
answer	O
-	O
31419077	O
If	O
you	O
look	O
at	O
the	O
implementation	O
of	O
HashMap	B-api_mention
,	O
the	O
constructor	O
looks	O
like	O
:	O
#	O
pre	O
And	O
init	O
(	O
args	O
)	O
looks	O
like	O
:	O
#	O
pre	O
So	O
initialCapacity	O
doesn	O
'	O
t	O
actually	O
get	O
used	O
to	O
create	O
an	O
array	O
.	O
Where	O
does	O
it	O
get	O
used	O
?	O
Look	O
at	O
the	O
put	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
pre	O
When	O
doing	O
a	O
put	O
,	O
the	O
array	O
is	O
actually	O
created	O
.	O
I	O
didn	O
'	O
t	O
show	O
inflateTable	O
(	O
args	O
)	O
but	O
it	O
does	O
some	O
math	O
and	O
initializes	O
the	O
array	O
.	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
6548647	O
Static	O
field	O
holding	O
object	O
reference	O
[	O
esp	O
final	O
field	O
]	O
#	O
pre	O
Calling	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
lengthy	O
String	B-api_mention
#	O
pre	O
(	O
Unclosed	O
)	O
open	O
streams	O
(	O
file	O
,	O
network	O
etc	O
.	O
.	O
.	O
)	O
#	O
pre	O
Unclosed	O
connections	O
#	O
pre	O
Areas	O
that	O
are	O
unreachable	O
from	O
JVM	O
'	O
s	O
garbage	O
collector	O
,	O
such	O
as	O
memory	O
allocated	O
through	O
native	O
methods	O
In	O
web	O
applications	O
,	O
some	O
objects	O
are	O
stored	O
in	O
application	O
scope	O
until	O
the	O
application	O
is	O
explicitly	O
stopped	O
or	O
removed	O
.	O
getServletContext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Incorrect	O
or	O
inappropriate	O
JVM	O
options	O
,	O
such	O
as	O
the	O
noclassgc	O
option	O
on	O
IBM	O
JDK	O
that	O
prevents	O
unused	O
class	O
garbage	O
collection	O
See	O
IBM	O
jdk	O
settings	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175224	O
Since	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
is	O
not	O
a	O
final	O
method	O
of	O
Object	B-api_mention
,	O
yes	O
,	O
it	O
is	O
very	O
well	O
be	O
possible	O
in	O
a	O
different	O
situation	O
.	O
#	O
pre	O
This	O
question	O
,	O
however	O
,	O
specifically	O
says	O
that	O
these	O
are	O
primitive	O
wrappers	O
(	O
e	O
.	O
g	O
.	O
Integer	B-api_mention
,	O
Boolean	B-api_mention
,	O
etc	O
.	O
)	O
and	O
since	O
these	O
classes	O
are	O
final	O
,	O
you	O
cannot	O
extend	O
them	O
,	O
thus	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
36242382	O
You	O
can	O
use	O
Predicates	O
from	O
Eclipse	O
Collections	O
#	O
pre	O
If	O
you	O
can	O
'	O
t	O
change	O
the	O
strings	O
from	O
List	B-api_mention
:	O
#	O
pre	O
If	O
you	O
only	O
need	O
a	O
negation	O
of	O
String	B-api_mention
.	I-api_mention
isEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
can	O
also	O
use	O
StringPredicates	B-api_mention
.	I-api_mention
notEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Note	O
:	O
I	O
am	O
a	O
contributor	O
to	O
Eclipse	O
Collections	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26796725	O
Swapping	O
Only	O
One	O
Occurrence	O
If	O
there	O
is	O
only	O
one	O
occurrence	O
of	O
each	O
of	O
the	O
swapable	O
strings	O
in	O
the	O
input	O
,	O
you	O
can	O
do	O
the	O
following	O
:	O
Before	O
proceeding	O
to	O
any	O
replace	O
,	O
get	O
the	O
indices	O
of	O
the	O
occurrences	O
of	O
the	O
words	O
.	O
After	O
that	O
we	O
only	O
replace	O
the	O
word	O
found	O
at	O
these	O
indexes	O
,	O
and	O
not	O
all	O
occurrences	O
.	O
This	O
solution	O
uses	O
StringBuilder	B-api_mention
and	O
does	O
not	O
produce	O
intermediate	O
String	B-api_mention
s	O
like	O
String	B-api_mention
.	I-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
One	O
thing	O
to	O
note	O
:	O
if	O
the	O
swapable	O
words	O
have	O
different	O
lengths	O
,	O
after	O
the	O
first	O
replace	O
the	O
second	O
index	O
might	O
change	O
(	O
if	O
the	O
1st	O
word	O
occurs	O
before	O
the	O
2nd	O
)	O
exactly	O
with	O
the	O
difference	O
of	O
the	O
2	O
lengths	O
.	O
So	O
aligning	O
the	O
second	O
index	O
will	O
ensure	O
this	O
works	O
even	O
if	O
we	O
'	O
re	O
swapping	O
words	O
with	O
different	O
lengths	O
.	O
#	O
pre	O
Swapping	O
Arbitrary	O
Number	O
of	O
Occurrences	O
Analogous	O
to	O
the	O
previous	O
case	O
we	O
will	O
first	O
collect	O
the	O
indexes	O
(	O
occurrences	O
)	O
of	O
the	O
words	O
,	O
but	O
in	O
this	O
case	O
it	O
will	O
a	O
list	O
of	O
integers	O
for	O
each	O
word	O
,	O
not	O
just	O
one	O
int	O
.	O
For	O
this	O
we	O
will	O
use	O
the	O
following	O
utility	O
method	O
:	O
#	O
pre	O
And	O
using	O
this	O
we	O
will	O
replace	O
the	O
words	O
with	O
the	O
other	O
one	O
by	O
decreasing	O
index	O
(	O
which	O
might	O
require	O
to	O
alternate	O
between	O
the	O
2	O
swapable	O
words	O
)	O
so	O
that	O
we	O
won	O
'	O
t	O
even	O
have	O
to	O
correct	O
the	O
indices	O
after	O
a	O
replace	O
:	O
#	O
pre	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271668	O
I	O
'	O
m	O
assuming	O
this	O
is	O
happening	O
for	O
an	O
anonymous	O
class	O
.	O
When	O
you	O
create	O
an	O
anonymous	O
class	O
you	O
actually	O
create	O
a	O
class	O
that	O
extends	O
the	O
class	O
whose	O
name	O
you	O
got	O
.	O
The	O
"	O
cleaner	O
"	O
way	O
to	O
get	O
the	O
name	O
you	O
want	O
is	O
:	O
If	O
your	O
class	O
is	O
an	O
anonymous	O
inner	O
class	O
,	O
getSuperClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
give	O
you	O
the	O
class	O
that	O
it	O
was	O
created	O
from	O
.	O
If	O
you	O
created	O
it	O
from	O
an	O
interface	O
than	O
you	O
'	O
re	O
sort	O
of	O
SOL	O
because	O
the	O
best	O
you	O
can	O
do	O
is	O
getInterfaces	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
might	O
give	O
you	O
more	O
than	O
one	O
interface	O
.	O
The	O
"	O
hacky	O
"	O
way	O
is	O
to	O
just	O
get	O
the	O
name	O
with	O
getClassName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
use	O
a	O
regex	O
to	O
drop	O
the	O
$	O
1	O
.	O
Question	O
-	O
32164385	O
,	O
answer	O
-	O
32164423	O
#	O
blockquote	O
The	O
only	O
way	O
is	O
to	O
read	O
the	O
code	O
unfortunately	O
.	O
#	O
blockquote	O
The	O
common	O
convention	O
is	O
to	O
pass	O
an	O
object	O
which	O
cannot	O
be	O
modified	O
,	O
using	O
a	O
wrapper	O
if	O
needed	O
.	O
This	O
ensure	O
the	O
class	O
cannot	O
modify	O
the	O
object	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
readOnly	O
=	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
the	O
object	O
is	O
Cloneable	B-api_mention
,	O
you	O
can	O
also	O
use	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
another	O
common	O
approach	O
is	O
to	O
use	O
a	O
copy	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
readOnly	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
care	O
about	O
such	O
behaviour	O
,	O
unit	O
tests	O
can	O
show	O
whether	O
a	O
method	O
modifies	O
an	O
object	O
or	O
not	O
.	O
If	O
you	O
have	O
unit	O
tests	O
already	O
,	O
it	O
is	O
usually	O
one	O
or	O
two	O
lines	O
extra	O
to	O
check	O
for	O
this	O
.	O
Question	O
-	O
30081520	O
I	O
am	O
aware	O
that	O
it	O
is	O
better	O
to	O
call	O
the	O
equals	O
method	O
over	O
using	O
the	O
=	O
=	O
operator	O
(	O
see	O
this	O
question	O
)	O
.	O
I	O
want	O
two	O
strings	O
to	O
compare	O
as	O
equal	O
if	O
they	O
are	O
both	O
null	O
or	O
if	O
they	O
represent	O
the	O
same	O
string	O
.	O
Unfortunately	O
the	O
equals	B-api_mention
method	O
will	O
throw	O
an	O
NPE	O
if	O
the	O
strings	O
are	O
null	O
.	O
My	O
code	O
is	O
currently	O
:	O
#	O
pre	O
This	O
is	O
inelegant	O
.	O
What	O
is	O
the	O
correct	O
way	O
to	O
perform	O
this	O
test	O
?	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
32362691	O
For	O
completeness	O
,	O
using	O
the	O
Guava	O
library	O
,	O
you	O
'	O
d	O
do	O
:	O
Splitter	B-api_mention
.	I-api_mention
on	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Another	O
example	O
:	O
#	O
pre	O
Splitter	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
Iterable	O
,	O
so	O
if	O
you	O
need	O
a	O
List	O
,	O
wrap	O
it	O
in	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
above	O
.	O
Otherwise	O
just	O
go	O
with	O
the	O
Iterable	O
,	O
for	O
example	O
:	O
#	O
pre	O
Note	O
how	O
trimResults	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
handles	O
all	O
your	O
trimming	O
needs	O
without	O
having	O
to	O
tweak	O
regexes	O
for	O
corner	O
cases	O
,	O
as	O
with	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
your	O
project	O
uses	O
Guava	O
already	O
,	O
this	O
should	O
be	O
your	O
preferred	O
solution	O
.	O
See	O
Splitter	B-api_mention
documentation	O
in	O
Guava	O
User	O
Guide	O
or	O
the	O
javadocs	O
for	O
more	O
configuration	O
options	O
.	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29922469	O
My	O
guess	O
is	O
that	O
enums	O
are	O
limited	O
in	O
size	O
(	O
i	O
.	O
e	O
the	O
size	O
is	O
not	O
limited	O
by	O
language	O
but	O
limited	O
by	O
usage	O
)	O
and	O
thus	O
they	O
don	O
'	O
t	O
need	O
a	O
native	O
stream	O
api	O
.	O
Streams	O
are	O
very	O
good	O
when	O
you	O
have	O
to	O
manipulate	O
transform	O
and	O
recollect	O
the	O
elements	O
in	O
a	O
stream	O
;	O
these	O
are	O
not	O
common	O
uses	O
case	O
for	O
Enum	O
(	O
usually	O
you	O
iterate	O
over	O
enum	O
values	O
,	O
but	O
rarely	O
you	O
need	O
to	O
transform	O
,	O
map	O
and	O
collect	O
them	O
)	O
.	O
If	O
you	O
need	O
only	O
to	O
do	O
an	O
action	O
over	O
each	O
elements	O
perhaps	O
you	O
should	O
expose	O
only	O
a	O
forEach	B-api_mention
method	O
#	O
pre	O
Question	O
-	O
27845223	O
,	O
answer	O
-	O
27846417	O
Pavel	O
Horal	O
'	O
s	O
answer	O
is	O
nice	O
.	O
As	O
he	O
says	O
,	O
the	O
word	O
"	O
file	O
"	O
has	O
totally	O
different	O
(	O
practically	O
unrelated	O
)	O
meanings	O
in	O
URL	B-api_mention
#	O
getFile	B-api_mention
vs	O
java	O
.	O
io	O
.	O
File	O
-	O
may	O
be	O
that	O
'	O
s	O
part	O
of	O
the	O
confusion	O
.	O
Just	O
to	O
add	O
:	O
#	O
li	O
A	O
resource	O
in	O
Java	O
is	O
an	O
abstract	O
concept	O
,	O
a	O
source	O
of	O
data	O
that	O
can	O
be	O
read	O
.	O
The	O
location	O
(	O
or	O
address	O
)	O
of	O
a	O
resource	O
is	O
represented	O
in	O
Java	O
by	O
a	O
URL	B-api_mention
object	O
.	O
#	O
li	O
A	O
resource	O
can	O
correspond	O
to	O
a	O
regular	O
file	O
in	O
the	O
local	O
filesystem	O
(	O
specifically	O
,	O
when	O
its	O
URL	O
begins	O
with	O
file	O
:	O
/	O
/	O
)	O
.	O
But	O
a	O
resource	O
is	O
more	O
general	O
(	O
it	O
can	O
be	O
also	O
some	O
file	O
stored	O
in	O
a	O
jar	O
,	O
or	O
some	O
data	O
to	O
be	O
read	O
from	O
the	O
network	O
,	O
or	O
from	O
memory	O
,	O
or	O
.	O
.	O
.	O
)	O
.	O
And	O
it	O
'	O
s	O
also	O
more	O
limited	O
,	O
because	O
a	O
File	B-api_mention
(	O
besides	O
being	O
other	O
things	O
than	O
a	O
regular	O
file	O
:	O
a	O
directory	O
,	O
a	O
link	O
)	O
can	O
also	O
be	O
created	O
and	O
writen	O
to	O
.	O
#	O
li	O
Remember	O
in	O
Java	O
a	O
File	B-api_mention
object	O
does	O
not	O
really	O
represents	O
"	O
a	O
file	O
"	O
but	O
the	O
location	O
(	O
the	O
full	O
name	O
,	O
with	O
path	O
)	O
of	O
a	O
file	O
.	O
So	O
,	O
a	O
File	B-api_mention
object	O
allows	O
you	O
to	O
locate	O
(	O
and	O
open	O
)	O
a	O
file	O
,	O
as	O
a	O
URL	B-api_mention
allows	O
you	O
to	O
access	O
(	O
and	O
open	O
)	O
a	O
resource	O
.	O
(	O
There	O
is	O
no	O
Resource	B-api_mention
class	O
in	O
Java	O
to	O
represent	O
a	O
resource	O
,	O
but	O
neither	O
there	O
is	O
one	O
to	O
represent	O
a	O
file	O
!	O
once	O
more	O
:	O
File	B-api_mention
is	O
not	O
a	O
file	O
,	O
it	O
'	O
s	O
the	O
path	O
of	O
a	O
file	O
)	O
.	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877161	O
Integer	B-api_mention
objects	O
caches	O
between	O
-	O
128	O
and	O
127	O
of	O
256	O
Integer	B-api_mention
You	O
should	O
not	O
compare	O
object	O
references	O
with	O
=	O
=	O
or	O
!	O
=	O
.	O
You	O
should	O
use	O
.	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
instead	O
,	O
or	O
better	O
-	O
use	O
the	O
primitive	O
int	O
rather	O
than	O
Integer	B-api_mention
.	O
parseInt	B-api_mention
:	O
Parses	O
the	O
string	O
argument	O
as	O
a	O
signed	O
decimal	O
integer	O
.	O
The	O
characters	O
in	O
the	O
string	O
must	O
all	O
be	O
decimal	O
digits	O
,	O
except	O
that	O
the	O
first	O
character	O
may	O
be	O
an	O
ASCII	O
minus	O
sign	O
'	O
-	O
'	O
(	O
'	O
\	O
u002D	O
'	O
)	O
to	O
indicate	O
a	O
negative	O
value	O
.	O
The	O
resulting	O
integer	O
value	O
is	O
returned	O
,	O
exactly	O
as	O
if	O
the	O
argument	O
and	O
the	O
radix	O
10	O
were	O
given	O
as	O
arguments	O
to	O
the	O
parseInt	B-api_mention
(	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
int	O
)	O
method	O
.	O
valueOf	B-api_mention
Returns	O
an	O
Integer	B-api_mention
object	O
holding	O
the	O
value	O
extracted	O
from	O
the	O
specified	O
String	B-api_mention
when	O
parsed	O
with	O
the	O
radix	O
given	O
by	O
the	O
second	O
argument	O
.	O
The	O
first	O
argument	O
is	O
interpreted	O
as	O
representing	O
a	O
signed	O
integer	O
in	O
the	O
radix	O
specified	O
by	O
the	O
second	O
argument	O
,	O
exactly	O
as	O
if	O
the	O
arguments	O
were	O
given	O
to	O
the	O
parseInt	B-api_mention
(	I-api_mention
java	I-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
method	O
.	O
The	O
result	O
is	O
an	O
Integer	B-api_mention
object	O
that	O
represents	O
the	O
integer	O
value	O
specified	O
by	O
the	O
string	O
.	O
equivalent	O
to	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
radix	O
-	O
the	O
radix	O
to	O
be	O
used	O
in	O
interpreting	O
s	O
so	O
if	O
you	O
equal	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
integer	O
inbetween	O
-	O
128	O
to	O
127	O
it	O
returns	O
true	O
in	O
your	O
condition	O
for	O
lesser	O
than	O
-	O
128	O
and	O
greater	O
than	O
127	O
it	O
gives	O
false	O
Question	O
-	O
15156857	O
,	O
answer	O
-	O
15157021	O
You	O
must	O
use	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
methodReturningVoid	O
(	O
args	O
)	O
;	O
and	O
not	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
explained	O
in	O
the	O
documentation	O
Question	O
-	O
32632364	O
,	O
answer	O
-	O
32633199	O
It	O
shouldn	O
'	O
t	O
have	O
compiled	O
,	O
according	O
to	O
JLS	O
7	O
.	O
int	O
can	O
be	O
compared	O
to	O
boxed	O
numeric	O
types	O
,	O
i	O
.	O
e	O
.	O
Byte	B-api_mention
,	O
Short	B-api_mention
,	O
Character	B-api_mention
,	O
Integer	B-api_mention
,	O
Long	B-api_mention
,	O
Float	B-api_mention
,	O
Double	B-api_mention
.	O
But	O
that	O
is	O
all	O
.	O
And	O
if	O
comparison	O
is	O
between	O
int	O
and	O
say	O
Float	B-api_mention
,	O
Float	B-api_mention
will	O
be	O
unboxed	O
first	O
,	O
so	O
that	O
the	O
comparison	O
is	O
between	O
float	O
and	O
int	O
.	O
It	O
'	O
ll	O
make	O
no	O
sense	O
to	O
do	O
the	O
other	O
way	O
around	O
-	O
box	O
int	O
then	O
examine	O
the	O
identity	O
of	O
the	O
Integer	B-api_mention
(	O
with	O
a	O
Float	B-api_mention
no	O
less	O
)	O
.	O
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056821	O
Documentation	O
:	O
For	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
It	O
will	O
simply	O
return	O
the	O
entire	O
string	O
that	O
'	O
s	O
why	O
it	O
returns	O
1	O
.	O
For	O
the	O
second	O
case	O
,	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
will	O
discard	O
the	O
,	O
so	O
the	O
result	O
will	O
be	O
empty	O
.	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
silently	O
discards	O
trailing	O
separators	O
see	O
guava	O
StringsExplained	B-api_mention
too	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684822	O
You	O
can	O
'	O
t	O
just	O
take	O
the	O
returned	O
string	O
and	O
construct	O
a	O
string	O
from	O
it	O
.	O
.	O
.	O
it	O
'	O
s	O
not	O
a	O
byte	O
[	O
]	O
data	O
type	O
anymore	O
,	O
it	O
'	O
s	O
already	O
a	O
string	O
;	O
you	O
need	O
to	O
parse	O
it	O
.	O
For	O
example	O
:	O
#	O
pre	O
*	O
*	O
EDIT	O
*	O
*	O
You	O
get	O
an	O
hint	O
of	O
your	O
problem	O
in	O
your	O
question	O
,	O
where	O
you	O
say	O
"	O
Whatever	O
I	O
seem	O
to	O
try	O
I	O
end	O
up	O
getting	O
a	O
byte	O
array	O
which	O
looks	O
as	O
follows	O
.	O
.	O
.	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
"	O
,	O
because	O
91	O
is	O
the	O
byte	O
value	O
for	O
[	O
,	O
so	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
is	O
the	O
byte	O
array	O
of	O
the	O
string	O
"	O
[	O
-	O
45	O
,	O
1	O
,	O
16	O
,	O
.	O
.	O
.	O
"	O
string	O
.	O
The	O
method	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
a	O
String	B-api_mention
representation	O
of	O
the	O
specified	O
array	O
;	O
meaning	O
that	O
the	O
returned	O
value	O
will	O
not	O
be	O
a	O
array	O
anymore	O
.	O
For	O
example	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
s1	O
holds	O
the	O
string	O
representation	O
of	O
the	O
array	O
b1	O
,	O
while	O
s2	O
holds	O
the	O
string	O
representation	O
of	O
the	O
bytes	O
contained	O
in	O
b1	O
.	O
Now	O
,	O
in	O
your	O
problem	O
,	O
your	O
server	O
returns	O
a	O
string	O
similar	O
to	O
s1	O
,	O
therefore	O
to	O
get	O
the	O
array	O
representation	O
back	O
,	O
you	O
need	O
the	O
opposite	O
constructor	O
method	O
.	O
If	O
s2	O
.	B-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
opposite	O
of	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
need	O
to	O
find	O
the	O
opposite	O
of	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
thus	O
the	O
code	O
I	O
pasted	O
in	O
the	O
first	O
snippet	O
of	O
this	O
answer	O
.	O
Question	O
-	O
4709175	O
,	O
answer	O
-	O
4709892	O
Something	O
none	O
of	O
the	O
other	O
answers	O
have	O
covered	O
that	O
make	O
enums	O
particularly	O
powerful	O
are	O
the	O
ability	O
to	O
have	O
template	O
methods	O
.	O
Methods	O
can	O
be	O
part	O
of	O
the	O
base	O
enum	O
and	O
overridden	O
by	O
each	O
type	O
.	O
And	O
,	O
with	O
the	O
behavior	O
attached	O
to	O
the	O
enum	O
,	O
it	O
often	O
eliminates	O
the	O
need	O
for	O
if	O
-	O
else	O
constructs	O
or	O
switch	O
statements	O
as	O
this	O
blog	O
post	O
demonstrates	O
-	O
where	O
enum	O
.	O
method	O
(	O
args	O
)	O
does	O
what	O
originally	O
would	O
be	O
executed	O
inside	O
the	O
conditional	O
.	O
The	O
same	O
example	O
also	O
shows	O
the	O
use	O
of	O
static	O
imports	O
with	O
enums	O
as	O
well	O
producing	O
much	O
cleaner	O
DSL	O
like	O
code	O
.	O
Some	O
other	O
interesting	O
qualities	O
include	O
the	O
fact	O
that	O
enums	O
provide	O
implementation	O
for	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
implement	O
Serializable	B-api_mention
and	O
Comparable	B-api_mention
.	O
For	O
a	O
complete	O
rundown	O
of	O
all	O
that	O
enums	O
have	O
to	O
offer	O
I	O
highly	O
recommend	O
Bruce	O
Eckel	O
'	O
s	O
Thinking	O
in	O
Java	O
4th	O
edition	O
which	O
devotes	O
an	O
entire	O
chapter	O
to	O
the	O
topic	O
.	O
Particularly	O
illuminating	O
are	O
the	O
examples	O
involving	O
a	O
Rock	O
,	O
Paper	O
,	O
Scissors	O
(	O
i	O
.	O
e	O
.	O
RoShamBo	O
)	O
game	O
as	O
enums	O
.	O
Question	O
-	O
22463062	O
,	O
answer	O
-	O
28324294	O
You	O
can	O
also	O
use	O
LocalDate	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
LocalDateTime	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
String	B-api_mention
without	O
providing	O
it	O
with	O
a	O
pattern	O
,	O
if	O
the	O
String	B-api_mention
is	O
in	O
ISO	O
-	O
8601	O
format	O
.	O
for	O
example	O
,	O
#	O
pre	O
Output	O
,	O
#	O
pre	O
and	O
use	O
DateTimeFormatter	B-api_mention
only	O
if	O
you	O
have	O
to	O
deal	O
with	O
other	O
date	O
patterns	O
,	O
For	O
example	O
,	O
dd	O
MMM	O
uuuu	O
represents	O
the	O
day	O
of	O
the	O
month	O
(	O
two	O
digits	O
)	O
,	O
three	O
letters	O
of	O
the	O
name	O
of	O
the	O
month	O
(	O
Jan	O
,	O
Feb	O
,	O
Mar	O
,	O
.	O
.	O
.	O
)	O
,	O
and	O
a	O
four	O
-	O
digit	O
year	O
:	O
#	O
pre	O
Output	O
04	O
Aug	O
2015	O
parses	O
to	O
2015	O
-	O
08	O
-	O
04	O
also	O
remember	O
that	O
the	O
DateTimeFormatter	B-api_mention
object	O
is	O
bidirectional	O
;	O
it	O
can	O
both	O
parse	O
input	O
and	O
format	O
output	O
.	O
#	O
pre	O
Output	O
2015	O
-	O
08	O
-	O
04	O
formats	O
as	O
04	O
Aug	O
2015	O
(	O
see	O
complete	O
list	O
of	O
Patterns	O
for	O
Formatting	O
and	O
Parsing	O
DateFormatter	B-api_mention
)	O
#	O
pre	O
Question	O
-	O
29140402	O
I	O
have	O
a	O
class	O
defined	O
as	O
follows	O
:	O
#	O
pre	O
I	O
tried	O
to	O
print	O
an	O
instance	O
of	O
my	O
class	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
but	O
I	O
got	O
the	O
following	O
output	O
:	O
com	O
.	O
foo	O
.	O
Person	O
@	O
2f92e0f4	O
.	O
A	O
similar	O
thing	O
happened	O
when	O
I	O
tried	O
to	O
print	O
an	O
array	O
of	O
Person	O
objects	O
:	O
#	O
pre	O
I	O
got	O
the	O
output	O
:	O
[	O
Lcom	O
.	O
foo	O
.	O
Person	O
;	O
@	O
28a418fc	O
What	O
does	O
this	O
output	O
mean	O
?	O
How	O
do	O
I	O
change	O
this	O
output	O
so	O
it	O
contains	O
the	O
name	O
of	O
my	O
person	O
?	O
And	O
how	O
do	O
I	O
print	O
collections	O
of	O
my	O
objects	O
?	O
Note	O
:	O
this	O
is	O
intended	O
as	O
a	O
canonical	O
Q	O
&	O
A	O
about	O
this	O
subject	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
20793241	O
Environment	O
variables	O
may	O
also	O
provide	O
a	O
useful	O
means	O
-	O
-	O
COMPUTERNAME	O
on	O
Windows	O
,	O
HOSTNAME	O
on	O
most	O
modern	O
Unix	O
/	O
Linux	O
shells	O
.	O
See	O
:	O
#	O
a	O
I	O
'	O
m	O
using	O
these	O
as	O
"	O
supplementary	O
"	O
methods	O
to	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
since	O
as	O
several	O
people	O
point	O
out	O
,	O
that	O
function	O
doesn	O
'	O
t	O
work	O
in	O
all	O
environments	O
.	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
another	O
possible	O
supplement	O
.	O
At	O
this	O
stage	O
,	O
I	O
haven	O
'	O
t	O
used	O
it	O
.	O
#	O
pre	O
Question	O
-	O
28724850	O
Running	O
the	O
following	O
stream	O
example	O
in	O
Java8	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
yields	O
:	O
/	O
a	O
/	O
b	O
/	O
c	O
/	O
d	O
/	O
e	O
/	O
f	O
Which	O
is	O
-	O
of	O
course	O
-	O
no	O
surprise	O
.	O
Due	O
to	O
#	O
a	O
it	O
shouldn	O
'	O
t	O
matter	O
whether	O
the	O
stream	O
is	O
executed	O
sequentially	O
or	O
parallel	O
:	O
#	O
blockquote	O
AFAIK	O
reduce	O
(	O
args	O
)	O
is	O
deterministic	O
and	O
(	O
s1	O
,	O
s2	O
)	O
-	O
>	O
s1	O
+	O
StringLiteral	O
+	O
s2	O
is	O
associative	O
,	O
so	O
that	O
adding	O
parallel	O
(	O
args	O
)	O
should	O
yield	O
the	O
same	O
result	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
the	O
result	O
on	O
my	O
machine	O
is	O
:	O
/	O
a	O
/	O
/	O
b	O
/	O
/	O
c	O
/	O
/	O
d	O
/	O
/	O
e	O
/	O
/	O
f	O
What	O
'	O
s	O
wrong	O
here	O
?	O
BTW	O
:	O
using	O
(	O
the	O
preferred	O
)	O
.	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
yields	O
the	O
same	O
result	O
a	O
/	O
b	O
/	O
c	O
/	O
d	O
/	O
e	O
/	O
f	O
for	O
sequential	O
and	O
parallel	O
execution	O
.	O
JVM	O
details	O
:	O
#	O
pre	O
Question	O
-	O
29280857	O
,	O
answer	O
-	O
29282558	O
As	O
you	O
have	O
mentioned	O
there	O
will	O
be	O
1000	O
-	O
10000	O
concurrent	O
transaction	O
you	O
expecting	O
at	O
a	O
time	O
than	O
you	O
can	O
store	O
accounts	O
on	O
which	O
some	O
transaction	O
is	O
going	O
on	O
and	O
handle	O
concurrency	O
One	O
Solution	O
is	O
to	O
allow	O
system	O
to	O
create	O
only	O
one	O
object	O
of	O
particulate	O
account	O
id	O
,	O
means	O
that	O
if	O
you	O
want	O
to	O
make	O
a	O
transaction	O
between	O
account	O
"	O
123	O
"	O
and	O
"	O
456	O
"	O
than	O
your	O
thread	O
will	O
create	O
account	O
object	O
and	O
in	O
that	O
constructor	O
of	O
account	O
class	O
we	O
will	O
check	O
if	O
any	O
other	O
object	O
of	O
account	O
is	O
there	O
with	O
particulate	O
account	O
id	O
,	O
if	O
other	O
object	O
of	O
account	O
is	O
there	O
with	O
same	O
account	O
id	O
means	O
that	O
some	O
transaction	O
is	O
going	O
on	O
with	O
particulate	O
account	O
id	O
so	O
you	O
have	O
to	O
wait	O
to	O
get	O
the	O
account	O
object	O
.	O
So	O
we	O
can	O
do	O
transaction	O
between	O
"	O
123	O
"	O
and	O
"	O
456	O
"	O
and	O
at	O
same	O
time	O
we	O
can	O
do	O
transaction	O
between	O
"	O
abc	O
"	O
and	O
"	O
xyz	O
"	O
but	O
if	O
at	O
same	O
time	O
some	O
other	O
thread	O
will	O
try	O
to	O
create	O
object	O
of	O
account	O
"	O
123	O
"	O
than	O
system	O
will	O
say	O
please	O
wait	O
for	O
reference	O
you	O
can	O
see	O
below	O
code	O
Please	O
note	O
:	O
#	O
li	O
dont	O
forgote	O
to	O
remove	O
your	O
account	O
id	O
from	O
locks	O
map	O
by	O
call	O
to	O
freeAccount	O
(	O
BigDecimal	B-api_mention
accId	O
)	O
from	O
LockHolder	O
class	O
#	O
li	O
I	O
have	O
used	O
HasMap	O
instand	O
of	O
list	O
because	O
list	O
will	O
not	O
be	O
a	O
good	O
choice	O
when	O
you	O
are	O
randomly	O
removing	O
element	O
from	O
it	O
(	O
or	O
when	O
frequently	O
you	O
are	O
updating	O
it	O
)	O
#	O
pre	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28588854	O
The	O
correct	O
answer	O
is	O
a	O
simple	O
"	O
because	O
the	O
standard	O
(	O
and	O
the	O
docs	O
)	O
say	O
so	O
"	O
.	O
But	O
I	O
'	O
m	O
not	O
gonna	O
be	O
cynical	O
because	O
it	O
'	O
s	O
obvious	O
that	O
'	O
s	O
not	O
what	O
you	O
are	O
after	O
.	O
In	O
addition	O
to	O
the	O
other	O
answers	O
here	O
,	O
I	O
'	O
ll	O
try	O
to	O
relate	O
the	O
infinities	O
to	O
saturating	O
arithmetic	O
.	O
Other	O
answers	O
have	O
already	O
stated	O
that	O
the	O
reason	O
the	O
comparisons	O
on	O
NaNs	O
result	O
in	O
true	O
,	O
so	O
I	O
'	O
m	O
not	O
gonna	O
beat	O
a	O
dead	O
horse	O
.	O
Let	O
'	O
s	O
say	O
I	O
have	O
a	O
saturating	O
integer	O
that	O
represents	O
grayscale	O
colors	O
.	O
Why	O
am	O
I	O
using	O
saturating	O
arithmetic	O
?	O
Because	O
anything	O
brighter	O
than	O
white	O
is	O
still	O
white	O
,	O
and	O
anything	O
darker	O
than	O
black	O
is	O
still	O
black	O
(	O
except	O
orange	O
)	O
.	O
That	O
means	O
BLACK	O
-	O
x	O
=	O
=	O
BLACK	O
and	O
WHITE	O
+	O
x	O
=	O
=	O
WHITE	O
.	O
Makes	O
sense	O
?	O
Now	O
,	O
let	O
'	O
s	O
say	O
we	O
want	O
to	O
represent	O
those	O
grayscale	O
colors	O
with	O
a	O
(	O
signed	O
)	O
1s	O
complement	O
8	O
-	O
bit	O
integer	O
where	O
BLACK	O
=	O
=	O
-	O
127	O
and	O
WHITE	O
=	O
=	O
127	O
.	O
Why	O
1s	O
complement	O
?	O
Because	O
it	O
gives	O
us	O
a	O
signed	O
zero	O
like	O
IEEE	O
754	O
floating	O
point	O
.	O
And	O
,	O
because	O
we	O
are	O
using	O
saturating	O
arithmetic	O
,	O
-	O
127	O
-	O
x	O
=	O
=	O
-	O
127	O
and	O
127	O
+	O
x	O
=	O
=	O
127	O
.	O
How	O
does	O
this	O
relate	O
to	O
floating	O
point	O
infinities	O
?	O
Replace	O
the	O
integer	O
with	O
floating	O
point	O
,	O
BLACK	O
with	O
NEGATIVE	O
_	O
INFINITY	O
,	O
and	O
WHITE	O
with	O
POSITIVE	O
_	O
INFINITY	O
and	O
what	O
do	O
you	O
get	O
?	O
NEGATIVE	O
_	O
INFINITY	O
-	O
x	O
=	O
=	O
NEGATIVE	O
_	O
INFINITY	O
and	O
POSITIVE	O
_	O
INFINITY	O
+	O
x	O
=	O
=	O
POSITIVE	O
_	O
INFINITY	O
.	O
Since	O
you	O
used	O
POSITIVE	O
_	O
INFINITY	O
,	O
I	O
'	O
ll	O
use	O
it	O
also	O
.	O
First	O
we	O
need	O
a	O
class	O
to	O
represent	O
our	O
saturating	O
integer	O
-	O
based	O
color	O
;	O
let	O
'	O
s	O
call	O
it	O
SaturatedColor	O
and	O
assume	O
it	O
works	O
like	O
any	O
other	O
integer	O
in	O
Java	O
.	O
Now	O
,	O
let	O
'	O
s	O
take	O
your	O
code	O
and	O
replace	O
double	O
with	O
our	O
own	O
SaturatedColor	O
and	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
with	O
SaturatedColor	O
.	O
WHITE	O
:	O
#	O
pre	O
As	O
we	O
established	O
above	O
,	O
SaturatedColor	O
.	O
WHITE	O
(	O
just	O
WHITE	O
above	O
)	O
is	O
127	O
,	O
so	O
let	O
'	O
s	O
do	O
that	O
here	O
:	O
#	O
pre	O
Now	O
we	O
take	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
statements	O
you	O
used	O
and	O
replace	O
a	O
and	O
b	O
with	O
their	O
value	O
(	O
values	O
?	O
)	O
:	O
#	O
pre	O
It	O
should	O
be	O
obvious	O
what	O
this	O
will	O
print	O
.	O
Question	O
-	O
13744450	O
The	O
interviewer	O
asked	O
me	O
:	O
#	O
blockquote	O
I	O
wasn	O
'	O
t	O
aware	O
of	O
these	O
terms	O
.	O
So	O
,	O
when	O
I	O
came	O
back	O
to	O
home	O
,	O
then	O
I	O
started	O
looking	O
into	O
Google	O
about	O
Observer	B-api_mention
and	O
Observable	B-api_mention
and	O
found	O
some	O
point	O
from	O
different	O
resources	O
:	O
#	O
blockquote	O
I	O
found	O
this	O
example	O
:	O
#	O
pre	O
But	O
I	O
'	O
m	O
still	O
unable	O
to	O
figure	O
out	O
why	O
do	O
we	O
need	O
Observer	B-api_mention
and	O
Observable	B-api_mention
?	O
What	O
are	O
the	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
for	O
?	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32821016	O
If	O
you	O
look	O
at	O
IntFunction	B-api_mention
it	O
might	O
become	O
clearer	O
:	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
FunctionalInterface	O
.	O
It	O
represents	O
a	O
function	O
that	O
takes	O
an	O
int	O
and	O
returns	O
a	O
value	O
of	O
type	O
R	O
.	O
In	O
this	O
case	O
,	O
the	O
return	O
type	O
R	O
is	O
also	O
a	O
FunctionalInterface	O
,	O
namely	O
an	O
IntUnaryOperator	O
.	O
So	O
the	O
first	O
(	O
outer	O
)	O
function	O
itself	O
returns	O
a	O
function	O
.	O
In	O
this	O
case	O
:	O
When	O
applied	O
to	O
an	O
int	O
,	O
curriedAdd	O
is	O
supposed	O
to	O
return	O
a	O
function	O
that	O
again	O
takes	O
an	O
int	O
(	O
and	O
returns	O
again	O
int	O
,	O
because	O
that	O
'	O
s	O
what	O
IntUnaryOperator	O
does	O
)	O
.	O
In	O
functional	O
programming	O
it	O
is	O
common	O
to	O
write	O
the	O
type	O
of	O
a	O
function	O
as	O
param	O
-	O
>	O
return	O
_	O
value	O
and	O
you	O
see	O
exactly	O
that	O
here	O
.	O
So	O
the	O
type	O
of	O
curriedAdd	O
is	O
int	O
-	O
>	O
int	O
-	O
>	O
int	O
(	O
or	O
int	O
-	O
>	O
(	O
int	O
-	O
>	O
int	O
)	O
if	O
you	O
like	O
that	O
better	O
)	O
.	O
Java	O
8	O
'	O
s	O
lambda	O
syntax	O
goes	O
along	O
with	O
this	O
.	O
To	O
define	O
such	O
a	O
function	O
,	O
you	O
write	O
a	O
-	O
>	O
b	O
-	O
>	O
a	O
+	O
b	O
which	O
is	O
very	O
much	O
similar	O
to	O
actual	O
lambda	O
calculus	O
:	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
λ	O
b	O
a	O
+	O
b	O
is	O
a	O
function	O
that	O
takes	O
a	O
single	O
parameter	O
b	O
and	O
returns	O
a	O
value	O
(	O
the	O
sum	O
)	O
.	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
is	O
a	O
function	O
that	O
accepts	O
a	O
single	O
parameter	O
a	O
and	O
returns	O
another	O
function	O
of	O
a	O
single	O
parameter	O
.	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
returns	O
λ	O
b	O
a	O
+	O
b	O
with	O
a	O
set	O
to	O
the	O
parameter	O
value	O
.	O
Question	O
-	O
29945627	O
,	O
answer	O
-	O
29946155	O
The	O
syntax	O
you	O
'	O
re	O
after	O
is	O
possible	O
with	O
a	O
little	O
helper	O
function	O
that	O
converts	O
a	O
Runnable	B-api_mention
into	O
Action	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	O
you	O
can	O
place	O
it	O
in	O
Action	B-api_mention
for	O
example	O
)	O
:	O
#	O
pre	O
Question	O
-	O
7348711	O
Which	O
of	O
the	O
following	O
is	O
the	O
best	O
and	O
most	O
portable	O
way	O
to	O
get	O
the	O
hostname	O
of	O
the	O
current	O
computer	O
in	O
Java	O
?	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
vs	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
32323081	O
,	O
answer	O
-	O
32323305	O
Any	O
lambda	O
which	O
could	O
be	O
accepted	O
as	O
a	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
can	O
also	O
be	O
accepted	O
as	O
a	O
ThrowingSupplier	O
<	O
T	O
>	O
.	O
The	O
following	O
compiles	O
:	O
#	O
pre	O
Given	O
the	O
above	O
,	O
you	O
probably	O
don	O
'	O
t	O
need	O
this	O
,	O
but	O
if	O
foo	O
must	O
accept	O
a	O
non	O
-	O
throwing	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
you	O
can	O
always	O
wrap	O
the	O
Exception	O
-	O
throwing	O
method	O
in	O
a	O
method	O
which	O
launders	O
it	O
into	O
an	O
unchecked	O
Exception	O
:	O
#	O
pre	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
31931870	O
Collections	B-api_mention
.	I-api_mention
singletonList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
31202946	O
,	O
answer	O
-	O
31203218	O
You	O
can	O
of	O
course	O
choose	O
to	O
shoot	O
yourself	O
in	O
the	O
foot	O
,	O
but	O
that	O
doesn	O
'	O
t	O
mean	O
you	O
must	O
.	O
#	O
blockquote	O
Because	O
the	O
recommended	O
way	O
to	O
create	O
a	O
start	O
a	O
thread	O
is	O
not	O
to	O
subclass	O
Thread	B-api_mention
.	O
The	O
recommended	O
way	O
is	O
to	O
define	O
a	O
Runnable	B-api_mention
,	O
and	O
pass	O
it	O
as	O
argument	O
to	O
the	O
Thread	B-api_mention
constructor	O
:	O
#	O
pre	O
#	O
blockquote	O
Yes	O
and	O
no	O
.	O
You	O
can	O
'	O
t	O
replace	O
the	O
implementation	O
of	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
by	O
your	O
own	O
implementation	O
,	O
but	O
you	O
can	O
do	O
additional	O
things	O
in	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
if	O
you	O
want	O
:	O
#	O
pre	O
That	O
said	O
,	O
if	O
Java	O
was	O
redesigned	O
from	O
scratch	O
today	O
,	O
there	O
is	O
a	O
good	O
chance	O
the	O
design	O
would	O
be	O
different	O
.	O
Remember	O
that	O
this	O
class	O
dates	O
from	O
Java	O
1	O
.	O
0	O
,	O
and	O
is	O
still	O
backward	O
-	O
compatible	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
18481387	O
If	O
you	O
code	O
in	O
Android	O
,	O
there	O
is	O
SparseArray	B-api_mention
,	O
mapping	O
integer	O
to	O
object	O
.	O
Question	O
-	O
9510125	O
,	O
answer	O
-	O
9511880	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
In	O
Swing	O
when	O
you	O
create	O
Component	O
,	O
it	O
is	O
not	O
valid	O
i	O
.	O
e	O
.	O
it	O
'	O
s	O
valid	O
property	O
is	O
false	O
.	O
A	O
component	O
is	O
said	O
to	O
be	O
valid	O
,	O
when	O
it	O
'	O
s	O
width	O
,	O
height	O
,	O
location	O
and	O
stuff	O
has	O
been	O
determined	O
.	O
This	O
is	O
usually	O
done	O
by	O
calling	O
their	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
directly	O
or	O
indirectly	O
.	O
When	O
we	O
call	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
containers	O
,	O
it	O
will	O
validate	O
the	O
container	O
(	O
if	O
it	O
is	O
invalid	O
)	O
by	O
calling	O
its	O
doLayout	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
typically	O
will	O
invoke	O
the	O
LayoutManager	B-api_mention
.	O
Now	O
each	O
child	O
placed	O
on	O
this	O
container	O
will	O
be	O
validated	O
recursively	O
,	O
so	O
that	O
the	O
entire	O
tree	O
will	O
be	O
laid	O
out	O
and	O
will	O
become	O
valid	O
.	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
to	O
be	O
called	O
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
width	O
/	O
height	O
and	O
call	O
repaint	O
(	O
)	O
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
appearance	O
.	O
For	O
Example	O
,	O
If	O
your	O
JFrame	O
contains	O
a	O
JPanel	O
,	O
now	O
at	O
certain	O
point	O
of	O
time	O
you	O
removed	O
that	O
JPanel	O
and	O
inserted	O
a	O
new	O
one	O
in	O
it	O
'	O
s	O
place	O
,	O
depending	O
on	O
the	O
contents	O
of	O
the	O
newly	O
placed	O
JPanel	O
,	O
the	O
size	O
of	O
the	O
components	O
inside	O
the	O
JPanel	O
as	O
well	O
as	O
The	O
CONTAINER	O
itself	O
(	O
by	O
virtue	O
of	O
the	O
layout	O
manager	O
used	O
by	O
it	O
)	O
,	O
changes	O
.	O
Which	O
pushes	O
it	O
to	O
the	O
invalidate	O
state	O
.	O
So	O
in	O
order	O
to	O
validate	O
this	O
change	O
,	O
you	O
have	O
to	O
explicitly	O
call	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
This	O
thing	O
is	O
something	O
,	O
I	O
had	O
never	O
used	O
,	O
so	O
might	O
be	O
not	O
much	O
of	O
the	O
info	O
I	O
can	O
give	O
.	O
But	O
seems	O
like	O
the	O
scenario	O
presented	O
above	O
,	O
can	O
give	O
a	O
bit	O
of	O
hint	O
,	O
as	O
to	O
what	O
happens	O
in	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33147610	O
a	O
<	O
b	O
and	O
a	O
-	O
b	O
<	O
0	O
can	O
mean	O
two	O
different	O
things	O
.	O
Consider	O
the	O
following	O
code	O
:	O
#	O
pre	O
When	O
run	O
,	O
this	O
will	O
only	O
print	O
a	O
-	O
b	O
<	O
0	O
.	O
What	O
happens	O
is	O
that	O
a	O
<	O
b	O
is	O
clearly	O
false	O
,	O
but	O
a	O
-	O
b	O
overflows	O
and	O
becomes	O
-	O
1	O
,	O
which	O
is	O
negative	O
.	O
Now	O
,	O
having	O
said	O
that	O
,	O
consider	O
that	O
the	O
array	O
has	O
a	O
length	O
that	O
is	O
really	O
close	O
to	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
The	O
code	O
in	O
ArrayList	B-api_mention
goes	O
like	O
this	O
:	O
#	O
pre	O
oldCapacity	O
is	O
really	O
close	O
to	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
so	O
newCapacity	O
(	O
which	O
is	O
oldCapacity	O
+	O
0	O
.	O
5	O
*	O
oldCapacity	O
)	O
might	O
overflow	O
and	O
become	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
(	O
i	O
.	O
e	O
.	O
negative	O
)	O
.	O
Then	O
,	O
subtracting	O
minCapacity	O
underflows	O
back	O
into	O
a	O
positive	O
number	O
.	O
This	O
check	O
ensures	O
that	O
the	O
if	O
is	O
not	O
executed	O
.	O
If	O
the	O
code	O
were	O
written	O
as	O
if	O
(	O
args	O
)	O
,	O
it	O
would	O
be	O
true	O
in	O
this	O
case	O
(	O
since	O
newCapacity	O
is	O
negative	O
)	O
so	O
the	O
newCapacity	O
would	O
be	O
forced	O
to	O
minCapacity	O
regardless	O
of	O
the	O
oldCapacity	O
.	O
This	O
overflow	O
case	O
is	O
handled	O
by	O
the	O
next	O
if	O
.	O
When	O
newCapacity	O
has	O
overflowed	O
,	O
this	O
will	O
be	O
true	O
:	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
is	O
defined	O
as	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
8	O
and	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
(	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
8	O
)	O
>	O
0	O
is	O
true	O
.	O
The	O
newCapacity	O
is	O
therefore	O
rightly	O
handled	O
:	O
hugeCapacity	O
method	O
returns	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
or	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
NB	O
:	O
this	O
is	O
what	O
the	O
/	O
/	O
overflow	O
-	O
conscious	O
code	O
comment	O
in	O
this	O
method	O
is	O
saying	O
.	O
Question	O
-	O
11821801	O
,	O
answer	O
-	O
11821900	O
A	O
ReentrantLock	B-api_mention
is	O
unstructured	O
,	O
unlike	O
synchronized	O
constructs	O
-	O
-	O
i	O
.	O
e	O
.	O
you	O
don	O
'	O
t	O
need	O
to	O
use	O
a	O
block	O
structure	O
for	O
locking	O
and	O
can	O
even	O
hold	O
a	O
lock	O
across	O
methods	O
.	O
An	O
example	O
:	O
#	O
pre	O
Such	O
flow	O
is	O
impossible	O
to	O
represent	O
via	O
a	O
single	O
monitor	O
in	O
a	O
synchronized	B-api_mention
construct	O
.	O
Aside	O
from	O
that	O
,	O
ReentrantLock	B-api_mention
supports	O
lock	O
polling	O
and	O
interruptible	O
lock	O
waits	O
that	O
support	O
time	O
-	O
out	O
.	O
ReentrantLock	B-api_mention
also	O
has	O
support	O
for	O
configurable	O
fairness	O
policy	O
,	O
allowing	O
more	O
flexible	O
thread	O
scheduling	O
.	O
#	O
blockquote	O
ReentrantLock	B-api_mention
may	O
also	O
be	O
more	O
scalable	O
,	O
performing	O
much	O
better	O
under	O
higher	O
contention	O
.	O
You	O
can	O
read	O
more	O
about	O
this	O
here	O
.	O
This	O
claim	O
has	O
been	O
contested	O
,	O
however	O
;	O
see	O
the	O
following	O
comment	O
:	O
#	O
blockquote	O
When	O
should	O
you	O
use	O
ReentrantLock	B-api_mention
s	O
?	O
According	O
to	O
that	O
developerWorks	O
article	O
.	O
.	O
.	O
#	O
blockquote	O
Question	O
-	O
31202946	O
,	O
answer	O
-	O
31203252	O
#	O
blockquote	O
This	O
question	O
actually	O
boils	O
down	O
to	O
the	O
fact	O
that	O
you	O
should	O
always	O
prefer	O
composition	O
over	O
inheritance	O
.	O
If	O
the	O
Thread	B-api_mention
class	O
was	O
declared	O
as	O
abstract	O
,	O
the	O
language	O
would	O
have	O
to	O
provide	O
another	O
class	O
that	O
extended	O
from	O
it	O
which	O
programmers	O
could	O
use	O
to	O
create	O
a	O
Thread	B-api_mention
.	O
Your	O
question	O
would	O
then	O
be	O
about	O
why	O
this	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
is	O
not	O
abstract	O
.	O
If	O
the	O
language	O
did	O
not	O
provide	O
another	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
,	O
programmers	O
would	O
have	O
to	O
create	O
their	O
own	O
class	O
that	O
extend	O
s	O
from	O
Thread	B-api_mention
and	O
override	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
blockquote	O
The	O
only	O
possible	O
explanation	O
I	O
can	O
give	O
is	O
that	O
the	O
developers	O
of	O
the	O
language	O
saw	O
some	O
use	O
-	O
cases	O
for	O
overriding	O
start	O
when	O
the	O
class	O
was	O
introduced	O
to	O
the	O
JDK	O
.	O
The	O
first	O
version	O
of	O
Java	O
that	O
I	O
used	O
was	O
1	O
.	O
5	O
and	O
I	O
personally	O
have	O
not	O
come	O
across	O
a	O
use	O
-	O
case	O
where	O
I	O
found	O
the	O
need	O
to	O
override	O
start	O
.	O
As	O
JB	O
Nizet	O
stated	O
in	O
his	O
answer	O
#	O
blockquote	O
Question	O
-	O
28584669	O
Why	O
doesn	O
'	O
t	O
infinity	O
comparison	O
follow	O
the	O
logic	O
applied	O
to	O
NaNs	O
?	O
This	O
code	O
prints	O
out	O
false	O
three	O
times	O
:	O
#	O
pre	O
However	O
,	O
if	O
I	O
change	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
to	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
,	O
I	O
get	O
true	O
for	O
equality	O
,	O
but	O
false	O
for	O
the	O
greater	O
-	O
than	O
and	O
less	O
-	O
than	O
comparisons	O
:	O
#	O
pre	O
This	O
seems	O
dangerous	O
.	O
Assuming	O
that	O
infinite	O
values	O
result	O
from	O
overflows	O
,	O
I	O
imagine	O
it	O
'	O
s	O
more	O
likely	O
that	O
two	O
variables	O
that	O
ended	O
up	O
as	O
infinities	O
wouldn	O
'	O
t	O
actually	O
be	O
equal	O
in	O
perfect	O
arithmetic	O
.	O
Question	O
-	O
19235606	O
,	O
answer	O
-	O
19235863	O
You	O
should	O
almost	O
certainly	O
never	O
have	O
to	O
deal	O
with	O
Spliterator	B-api_mention
as	O
a	O
user	O
;	O
it	O
should	O
only	O
be	O
necessary	O
if	O
you	O
'	O
re	O
writing	O
Collection	B-api_mention
types	O
yourself	O
and	O
also	O
intending	O
to	O
optimize	O
parallelized	O
operations	O
on	O
them	O
.	O
For	O
what	O
it	O
'	O
s	O
worth	O
,	O
a	O
Spliterator	B-api_mention
is	O
a	O
way	O
of	O
operating	O
over	O
the	O
elements	O
of	O
a	O
collection	O
in	O
a	O
way	O
that	O
it	O
'	O
s	O
easy	O
to	O
split	O
off	O
part	O
of	O
the	O
collection	O
,	O
e	O
.	O
g	O
.	O
because	O
you	O
'	O
re	O
parallelizing	O
and	O
want	O
one	O
thread	O
to	O
work	O
on	O
one	O
part	O
of	O
the	O
collection	O
,	O
one	O
thread	O
to	O
work	O
on	O
another	O
part	O
,	O
etc	O
.	O
You	O
should	O
essentially	O
never	O
be	O
saving	O
values	O
of	O
type	O
Stream	B-api_mention
to	O
a	O
variable	O
,	O
either	O
.	O
Stream	B-api_mention
is	O
sort	O
of	O
like	O
an	O
Iterator	B-api_mention
,	O
in	O
that	O
it	O
'	O
s	O
a	O
one	O
-	O
time	O
-	O
use	O
object	O
that	O
you	O
'	O
ll	O
almost	O
always	O
use	O
in	O
a	O
fluent	O
chain	O
,	O
as	O
in	O
the	O
Javadoc	O
example	O
:	O
int	O
sum	O
=	O
widgets	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
mapToInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sum	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Collector	B-api_mention
is	O
the	O
most	O
generalized	O
,	O
abstract	O
possible	O
version	O
of	O
a	O
"	O
reduce	O
"	O
operation	O
a	O
la	O
map	O
/	O
reduce	O
;	O
in	O
particular	O
,	O
it	O
needs	O
to	O
support	O
parallelization	O
and	O
finalization	O
steps	O
.	O
Examples	O
of	O
Collector	B-api_mention
s	O
include	O
:	O
#	O
li	O
summing	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
reducing	I-api_mention
(	O
args	O
)	O
#	O
li	O
StringBuilder	B-api_mention
appending	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275761	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
defined	O
in	O
Object	B-api_mention
class	O
with	O
the	O
following	O
signature	O
:	O
#	O
blockquote	O
Since	O
it	O
is	O
not	O
defined	O
as	O
static	O
,	O
you	O
can	O
not	O
call	O
it	O
within	O
a	O
static	O
code	O
block	O
.	O
See	O
these	O
answers	O
for	O
more	O
information	O
:	O
Q1	O
,	O
Q2	O
,	O
Q3	O
.	O
If	O
you	O
'	O
re	O
in	O
a	O
static	O
context	O
,	O
then	O
you	O
have	O
to	O
use	O
the	O
class	O
literal	O
expression	O
to	O
get	O
the	O
Class	B-api_mention
,	O
so	O
you	O
basically	O
have	O
to	O
do	O
like	O
:	O
#	O
blockquote	O
This	O
type	O
of	O
expression	O
is	O
called	O
Class	B-api_mention
Literals	O
and	O
they	O
are	O
explained	O
in	O
Java	O
Language	O
Specification	O
Book	O
as	O
follows	O
:	O
#	O
blockquote	O
You	O
can	O
also	O
find	O
information	O
about	O
this	O
subject	O
on	O
API	O
documentation	O
for	O
Class	B-api_mention
.	O
Question	O
-	O
14534767	O
I	O
have	O
a	O
StringBuilder	B-api_mention
object	O
,	O
#	O
pre	O
Now	O
I	O
want	O
to	O
append	O
a	O
newline	O
character	O
to	O
the	O
StringBuilder	B-api_mention
.	O
How	O
can	O
I	O
do	O
it	O
?	O
result	O
.	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Does	O
not	O
work	O
.	O
So	O
,	O
I	O
was	O
thinking	O
about	O
writing	O
a	O
newline	O
using	O
Unicode	O
.	O
Will	O
this	O
help	O
?	O
If	O
so	O
,	O
how	O
can	O
I	O
add	O
one	O
?	O
Question	O
-	O
15182496	O
The	O
following	O
print	O
statement	O
would	O
print	O
"	O
hello	O
world	O
"	O
.	O
Could	O
anyone	O
explain	O
this	O
?	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
randomString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
looks	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
23079003	O
,	O
answer	O
-	O
23079174	O
You	O
can	O
use	O
the	O
overloaded	O
version	O
of	O
toArray	B-api_mention
,	O
as	O
the	O
following	O
:	O
#	O
pre	O
The	O
purpose	O
of	O
the	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
generator	O
is	O
to	O
convert	O
an	O
integer	O
,	O
the	O
size	O
of	O
the	O
array	O
,	O
to	O
a	O
new	O
array	O
.	O
Example	O
code	O
:	O
#	O
pre	O
Prints	O
:	O
#	O
pre	O
Another	O
option	O
is	O
to	O
use	O
a	O
method	O
reference	O
to	O
the	O
string	O
array	O
constructor	O
,	O
this	O
one	O
is	O
a	O
bit	O
more	O
tricky	O
.	O
Usage	O
is	O
easy	O
:	O
String	B-api_mention
[	O
]	O
stringArray	O
=	O
streamString	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
What	O
it	O
does	O
,	O
is	O
find	O
a	O
method	O
that	O
takes	O
in	O
an	O
integer	O
(	O
the	O
size	O
)	O
as	O
argument	O
,	O
and	O
returns	O
a	O
String	B-api_mention
[	O
]	O
,	O
which	O
is	O
exactly	O
what	O
(	O
one	O
of	O
the	O
overloads	O
of	O
)	O
new	O
String	B-api_mention
[	O
]	O
does	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29111023	O
Although	O
there	O
are	O
several	O
answers	O
already	O
,	O
and	O
an	O
accepted	O
answer	O
,	O
there	O
are	O
still	O
a	O
couple	O
points	O
missing	O
from	O
this	O
topic	O
.	O
First	O
,	O
the	O
consensus	O
seems	O
to	O
be	O
that	O
solving	O
this	O
problem	O
using	O
streams	O
is	O
merely	O
an	O
exercise	O
,	O
and	O
that	O
the	O
conventional	O
for	O
-	O
loop	O
approach	O
is	O
preferable	O
.	O
Second	O
,	O
the	O
answers	O
given	O
thus	O
far	O
have	O
overlooked	O
an	O
approach	O
using	O
array	O
or	O
vector	O
-	O
style	O
techniques	O
that	O
I	O
think	O
improves	O
the	O
streams	O
solution	O
considerably	O
.	O
First	O
,	O
here	O
'	O
s	O
a	O
conventional	O
solution	O
,	O
for	O
purposes	O
of	O
discussion	O
and	O
analysis	O
:	O
#	O
pre	O
This	O
is	O
mostly	O
straightforward	O
but	O
there	O
'	O
s	O
a	O
bit	O
of	O
subtlety	O
.	O
One	O
point	O
is	O
that	O
a	O
pending	O
sublist	O
from	O
prev	O
to	O
cur	O
is	O
always	O
open	O
.	O
When	O
we	O
encounter	O
null	O
we	O
close	O
it	O
,	O
add	O
it	O
to	O
the	O
result	O
list	O
,	O
and	O
advance	O
prev	O
.	O
After	O
the	O
loop	O
we	O
close	O
the	O
sublist	O
unconditionally	O
.	O
Another	O
observation	O
is	O
that	O
this	O
is	O
a	O
loop	O
over	O
indexes	O
,	O
not	O
over	O
the	O
values	O
themselves	O
,	O
thus	O
we	O
use	O
an	O
arithmetic	O
for	O
-	O
loop	O
instead	O
of	O
the	O
enhanced	O
"	O
for	O
-	O
each	O
"	O
loop	O
.	O
But	O
it	O
suggests	O
that	O
we	O
can	O
stream	O
using	O
the	O
indexes	O
to	O
generate	O
subranges	O
instead	O
of	O
streaming	O
over	O
values	O
and	O
putting	O
the	O
logic	O
into	O
the	O
collector	O
(	O
as	O
was	O
done	O
by	O
Joop	O
Eggen	O
'	O
s	O
proposed	O
solution	O
)	O
.	O
Once	O
we	O
'	O
ve	O
realized	O
that	O
,	O
we	O
can	O
see	O
that	O
each	O
position	O
of	O
null	O
in	O
the	O
input	O
is	O
the	O
delimiter	O
for	O
a	O
sublist	O
:	O
it	O
'	O
s	O
the	O
right	O
end	O
of	O
the	O
sublist	O
to	O
the	O
left	O
,	O
and	O
it	O
(	O
plus	O
one	O
)	O
is	O
the	O
left	O
end	O
of	O
the	O
sublist	O
to	O
the	O
right	O
.	O
If	O
we	O
can	O
handle	O
the	O
edge	O
cases	O
,	O
it	O
leads	O
to	O
an	O
approach	O
where	O
we	O
find	O
the	O
indexes	O
at	O
which	O
null	O
elements	O
occur	O
,	O
map	O
them	O
to	O
sublists	O
,	O
and	O
collect	O
the	O
sublists	O
.	O
The	O
resulting	O
code	O
is	O
as	O
follows	O
:	O
#	O
pre	O
Getting	O
the	O
indexes	O
at	O
which	O
null	O
occurs	O
is	O
pretty	O
easy	O
.	O
The	O
stumbling	O
block	O
is	O
adding	O
-	O
1	O
at	O
the	O
left	O
and	O
size	O
at	O
the	O
right	O
end	O
.	O
I	O
'	O
ve	O
opted	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
to	O
do	O
the	O
appending	O
and	O
then	O
flatMapToInt	O
to	O
flatten	O
them	O
out	O
.	O
(	O
I	O
tried	O
several	O
other	O
approaches	O
but	O
this	O
one	O
seemed	O
like	O
the	O
cleanest	O
.	O
)	O
It	O
'	O
s	O
a	O
bit	O
more	O
convenient	O
to	O
use	O
arrays	O
for	O
the	O
indexes	O
here	O
.	O
First	O
,	O
the	O
notation	O
for	O
accessing	O
an	O
array	O
is	O
nicer	O
than	O
for	O
a	O
List	B-api_mention
:	O
indexes	O
[	O
i	O
]	O
vs	O
.	O
indexes	O
.	B-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Second	O
,	O
using	O
an	O
array	O
avoids	O
boxing	O
.	O
At	O
this	O
point	O
,	O
each	O
index	O
value	O
in	O
the	O
array	O
(	O
except	O
for	O
the	O
last	O
)	O
is	O
one	O
less	O
than	O
the	O
beginning	O
position	O
of	O
a	O
sublist	O
.	O
The	O
index	O
to	O
its	O
immediate	O
right	O
is	O
the	O
end	O
of	O
the	O
sublist	O
.	O
We	O
simply	O
stream	O
over	O
the	O
array	O
and	O
map	O
each	O
pair	O
of	O
indexes	O
into	O
a	O
sublist	O
and	O
collect	O
the	O
output	O
.	O
Discussion	O
The	O
streams	O
approach	O
is	O
slightly	O
shorter	O
than	O
the	O
for	O
-	O
loop	O
version	O
,	O
but	O
it	O
'	O
s	O
denser	O
.	O
The	O
for	O
-	O
loop	O
version	O
is	O
familiar	O
,	O
because	O
we	O
do	O
this	O
stuff	O
in	O
Java	O
all	O
the	O
time	O
,	O
but	O
if	O
you	O
'	O
re	O
not	O
already	O
aware	O
of	O
what	O
this	O
loop	O
is	O
supposed	O
to	O
be	O
doing	O
,	O
it	O
'	O
s	O
not	O
obvious	O
.	O
You	O
might	O
have	O
to	O
simulate	O
a	O
few	O
loop	O
executions	O
before	O
you	O
figure	O
out	O
what	O
prev	O
is	O
doing	O
and	O
why	O
the	O
open	O
sublist	O
has	O
to	O
be	O
closed	O
after	O
the	O
end	O
of	O
the	O
loop	O
.	O
(	O
I	O
initially	O
forgot	O
to	O
have	O
it	O
,	O
but	O
I	O
caught	O
this	O
in	O
testing	O
.	O
)	O
The	O
streams	O
approach	O
is	O
,	O
I	O
think	O
,	O
easier	O
to	O
conceptualize	O
what	O
'	O
s	O
going	O
on	O
:	O
get	O
a	O
list	O
(	O
or	O
an	O
array	O
)	O
that	O
indicates	O
the	O
boundaries	O
between	O
sublists	O
.	O
That	O
'	O
s	O
an	O
easy	O
streams	O
two	O
-	O
liner	O
.	O
The	O
difficulty	O
,	O
as	O
I	O
mentioned	O
above	O
,	O
is	O
finding	O
a	O
way	O
to	O
tack	O
the	O
edge	O
values	O
onto	O
the	O
ends	O
.	O
If	O
there	O
were	O
a	O
better	O
syntax	O
for	O
doing	O
this	O
,	O
e	O
.	O
g	O
.	O
,	O
/	O
/	O
Java	O
plus	O
pidgin	O
Scala	O
int	O
[	O
]	O
indexes	O
=	O
[	O
-	O
1	O
]	O
+	O
+	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
+	O
+	O
[	O
input	O
.	O
size	O
(	O
args	O
)	O
]	O
;	O
it	O
would	O
make	O
things	O
a	O
lot	O
less	O
cluttered	O
.	O
(	O
What	O
we	O
really	O
need	O
is	O
array	O
or	O
list	O
comprehension	O
.	O
)	O
Once	O
you	O
have	O
the	O
indexes	O
,	O
it	O
'	O
s	O
a	O
simple	O
matter	O
to	O
map	O
them	O
into	O
actual	O
sublists	O
and	O
collect	O
them	O
into	O
the	O
result	O
list	O
.	O
And	O
of	O
course	O
this	O
is	O
safe	O
when	O
run	O
in	O
parallel	O
.	O
UPDATE	O
2016	O
-	O
02	O
-	O
06	O
Here	O
'	O
s	O
a	O
nicer	O
way	O
to	O
create	O
the	O
array	O
of	O
sublist	O
indexes	O
.	O
It	O
'	O
s	O
based	O
on	O
the	O
same	O
principles	O
,	O
but	O
it	O
adjusts	O
the	O
index	O
range	O
and	O
adds	O
some	O
conditions	O
to	O
the	O
filter	O
to	O
avoid	O
having	O
to	O
concatenate	O
and	O
flatmap	O
the	O
indexes	O
.	O
#	O
pre	O
Question	O
-	O
26318569	O
,	O
answer	O
-	O
26319364	O
You	O
'	O
re	O
nesting	O
mocking	O
inside	O
of	O
mocking	O
.	O
You	O
'	O
re	O
calling	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
does	O
some	O
mocking	O
,	O
before	O
you	O
'	O
ve	O
finished	O
the	O
mocking	O
for	O
MyMainModel	B-api_mention
.	O
Mockito	O
doesn	O
'	O
t	O
like	O
it	O
when	O
you	O
do	O
this	O
.	O
Replace	O
#	O
pre	O
with	O
#	O
pre	O
To	O
understand	O
why	O
this	O
causes	O
a	O
problem	O
,	O
you	O
need	O
to	O
know	O
a	O
little	O
about	O
how	O
Mockito	B-api_mention
works	O
,	O
and	O
also	O
be	O
aware	O
in	O
what	O
order	O
expressions	O
and	O
statements	O
are	O
evaluated	O
in	O
Java	O
.	O
Mockito	B-api_mention
can	O
'	O
t	O
read	O
your	O
source	O
code	O
,	O
so	O
in	O
order	O
to	O
figure	O
out	O
what	O
you	O
are	O
asking	O
it	O
to	O
do	O
,	O
it	O
relies	O
a	O
lot	O
on	O
static	O
state	O
.	O
When	O
you	O
call	O
a	O
method	O
on	O
a	O
mock	B-api_mention
object	O
,	O
Mockito	B-api_mention
records	O
the	O
details	O
of	O
the	O
call	O
in	O
an	O
internal	O
list	O
of	O
invocations	O
.	O
The	O
when	O
method	O
reads	O
the	O
last	O
of	O
these	O
invocations	O
off	O
the	O
list	O
and	O
records	O
this	O
invocation	O
in	O
the	O
OngoingStubbing	B-api_mention
object	O
it	O
returns	O
.	O
The	O
line	O
Mockito	B-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
thenReturn	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
causes	O
the	O
following	O
interactions	O
with	O
Mockito	B-api_mention
:	O
#	O
li	O
Mock	B-api_mention
method	O
mainModel	B-api_mention
.	I-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
#	O
li	O
Static	O
method	O
when	O
is	O
called	O
,	O
#	O
li	O
Method	O
thenReturn	O
is	O
called	O
on	O
the	O
OngoingStubbing	B-api_mention
object	O
returned	O
by	O
the	O
when	O
method	O
.	O
The	O
thenReturn	O
method	O
can	O
then	O
instruct	O
the	O
mock	O
it	O
received	O
via	O
the	O
OngoingStubbing	B-api_mention
method	O
to	O
handle	O
any	O
suitable	O
call	O
to	O
the	O
getList	O
method	O
to	O
return	O
someModelList	O
.	O
In	O
fact	O
,	O
as	O
Mockito	B-api_mention
can	O
'	O
t	O
see	O
your	O
code	O
,	O
you	O
can	O
also	O
write	O
your	O
mocking	O
as	O
follows	O
:	O
#	O
pre	O
This	O
style	O
is	O
somewhat	O
less	O
clear	O
to	O
read	O
,	O
especially	O
since	O
in	O
this	O
case	O
the	O
null	O
has	O
to	O
be	O
casted	O
,	O
but	O
it	O
generates	O
the	O
same	O
sequence	O
of	O
interactions	O
with	O
Mockito	B-api_mention
and	O
will	O
achieve	O
the	O
same	O
result	O
as	O
the	O
line	O
above	O
.	O
However	O
,	O
the	O
line	O
Mockito	B-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
thenReturn	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
causes	O
the	O
following	O
interactions	O
with	O
Mockito	B-api_mention
:	O
#	O
li	O
Mock	B-api_mention
method	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
#	O
li	O
Static	O
method	O
when	O
is	O
called	O
,	O
#	O
li	O
A	O
new	O
mock	O
of	O
SomeModel	O
is	O
created	O
(	O
inside	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
,	O
#	O
li	O
Mock	B-api_mention
method	O
model	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
At	O
this	O
point	O
Mockito	B-api_mention
gets	O
confused	O
.	O
It	O
thought	O
you	O
were	O
mocking	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
now	O
you	O
'	O
re	O
telling	O
it	O
you	O
want	O
to	O
mock	O
the	O
model	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
To	O
Mockito	B-api_mention
,	O
it	O
looks	O
like	O
you	O
'	O
re	O
doing	O
the	O
following	O
:	O
#	O
pre	O
This	O
looks	O
silly	O
to	O
Mockito	B-api_mention
as	O
it	O
can	O
'	O
t	O
be	O
sure	O
what	O
you	O
'	O
re	O
doing	O
with	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Note	O
that	O
we	O
did	O
not	O
get	O
to	O
the	O
thenReturn	O
method	O
call	O
,	O
as	O
the	O
JVM	O
needs	O
to	O
evaluate	O
the	O
parameters	O
to	O
this	O
method	O
before	O
it	O
can	O
call	O
the	O
method	O
.	O
In	O
this	O
case	O
,	O
this	O
means	O
calling	O
the	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Generally	O
it	O
is	O
a	O
bad	O
design	O
decision	O
to	O
rely	O
on	O
static	O
state	O
,	O
as	O
Mockito	B-api_mention
does	O
,	O
because	O
it	O
can	O
lead	O
to	O
cases	O
where	O
the	O
Principle	O
of	O
Least	O
Astonishment	O
is	O
violated	O
.	O
However	O
,	O
Mockito	B-api_mention
'	I-api_mention
s	I-api_mention
design	O
does	O
make	O
for	O
clear	O
and	O
expressive	O
mocking	O
,	O
even	O
if	O
it	O
leads	O
to	O
astonishment	O
sometimes	O
.	O
Finally	O
,	O
recent	O
versions	O
of	O
Mockito	B-api_mention
add	O
an	O
extra	O
line	O
to	O
the	O
error	O
message	O
above	O
.	O
This	O
extra	O
line	O
indicates	O
you	O
may	O
be	O
in	O
the	O
same	O
situation	O
as	O
this	O
question	O
:	O
#	O
blockquote	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
10827900	O
In	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
the	O
replace	O
method	O
either	O
takes	O
a	O
pair	O
of	O
char	O
'	O
s	O
or	O
a	O
pair	O
of	O
CharSequence	B-api_mention
'	O
s	O
(	O
of	O
which	O
String	O
is	O
a	O
subclass	O
,	O
so	O
it	O
'	O
ll	O
happily	O
take	O
a	O
pair	O
of	O
String	O
'	O
s	O
)	O
.	O
The	O
replace	O
method	O
will	O
replace	O
all	O
occurrences	O
of	O
a	O
char	O
or	O
CharSequence	B-api_mention
.	O
On	O
the	O
other	O
hand	O
,	O
both	O
String	O
arguments	O
to	O
replaceFirst	B-api_mention
and	O
replaceAll	B-api_mention
are	O
regular	O
expressions	O
(	O
regex	O
)	O
.	O
Using	O
the	O
wrong	O
function	O
can	O
lead	O
to	O
subtle	O
bugs	O
.	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
9481939	O
You	O
can	O
use	O
java	B-api_mention
.	I-api_mention
net	I-api_mention
.	I-api_mention
InetAddress	I-api_mention
API	O
.	O
Try	O
this	O
:	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostAddress	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
32653133	O
This	O
is	O
looks	O
like	O
a	O
good	O
fit	O
for	O
pattern	O
matching	O
and	O
a	O
more	O
traditional	O
Option	O
interface	O
with	O
Some	O
and	O
None	O
implementations	O
(	O
such	O
as	O
those	O
in	O
Javaslang	O
,	O
FunctionalJava	O
)	O
or	O
a	O
lazy	O
Maybe	O
implementation	O
in	O
cyclops	O
-	O
react	O
.	O
I	O
'	O
m	O
the	O
author	O
of	O
this	O
library	O
.	O
With	O
cyclops	O
-	O
react	O
you	O
can	O
also	O
use	O
structural	O
pattern	O
matching	O
on	O
JDK	O
types	O
.	O
For	O
Optional	B-api_mention
you	O
can	O
match	O
on	O
the	O
present	O
and	O
absent	O
cases	O
via	O
the	O
visitor	O
pattern	O
.	O
it	O
would	O
look	O
something	O
like	O
this	O
-	O
#	O
pre	O
Question	O
-	O
29333689	O
The	O
following	O
is	O
taken	O
from	O
a	O
job	O
interview	O
:	O
#	O
blockquote	O
I	O
thought	O
about	O
using	O
an	O
HashSet	B-api_mention
,	O
but	O
it	O
might	O
complicate	O
everything	O
.	O
.	O
.	O
Any	O
ideas	O
of	O
a	O
simple	O
solution	O
?	O
Question	O
-	O
4709175	O
,	O
answer	O
-	O
4709284	O
#	O
blockquote	O
You	O
can	O
use	O
an	O
Enum	B-api_mention
to	O
represent	O
a	O
smallish	O
fixed	O
set	O
of	O
constants	O
or	O
an	O
internal	O
class	O
mode	O
while	O
increasing	O
readability	O
.	O
Also	O
,	O
Enums	O
can	O
enforce	O
a	O
certain	O
rigidity	O
when	O
used	O
in	O
method	O
parameters	O
.	O
They	O
offer	O
the	O
interesting	O
possibility	O
of	O
passing	O
information	O
to	O
a	O
constructor	O
like	O
in	O
the	O
Planets	O
example	O
on	O
Oracle	O
'	O
s	O
site	O
and	O
,	O
as	O
you	O
'	O
ve	O
discovered	O
,	O
also	O
allow	O
a	O
simple	O
way	O
to	O
create	O
a	O
singleton	O
pattern	O
.	O
ex	O
:	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
reads	O
better	O
than	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
enforces	O
the	O
use	O
of	O
fixed	O
set	O
of	O
values	O
shown	O
in	O
an	O
IDE	O
when	O
you	O
add	O
the	O
.	O
separator	O
instead	O
of	O
all	O
integers	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
31707746	O
One	O
of	O
most	O
upleasing	O
functional	O
forEach	B-api_mention
'	O
s	O
limitations	O
is	O
lack	O
of	O
checked	O
exceptions	O
support	O
.	O
One	O
possible	O
workaround	O
is	O
to	O
replace	O
terminal	O
forEach	B-api_mention
with	O
plain	O
old	O
foreach	O
loop	O
:	O
#	O
pre	O
Here	O
is	O
list	O
of	O
most	O
popular	O
questions	O
with	O
other	O
workarounds	O
on	O
checked	O
exception	O
handling	O
within	O
lambdas	O
and	O
streams	O
:	O
Java	O
8	O
Lambda	O
function	O
that	O
throws	O
exception	O
?	O
Java	O
8	O
:	O
Lambda	O
-	O
Streams	O
,	O
Filter	O
by	O
Method	O
with	O
Exception	B-api_mention
How	O
can	O
I	O
throw	O
CHECKED	O
exceptions	O
from	O
inside	O
Java	O
8	O
streams	O
?	O
Java	O
8	O
:	O
Mandatory	O
checked	O
exceptions	O
handling	O
in	O
lambda	O
expressions	O
.	O
Why	O
mandatory	O
,	O
not	O
optional	O
?	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31871515	O
Autoboxing	O
is	O
absolutely	O
implemented	O
using	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
in	O
the	O
OpenJDK	O
.	O
If	O
that	O
'	O
s	O
your	O
implementation	O
,	O
read	O
on	O
.	O
.	O
.	O
if	O
not	O
,	O
skip	O
to	O
below	O
.	O
#	O
pre	O
Java	O
documentation	O
states	O
that	O
Boolean	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
returns	O
Boolean	B-api_mention
.	I-api_mention
TRUE	I-api_mention
or	O
Boolean	B-api_mention
.	I-api_mention
FALSE	I-api_mention
,	O
therefore	O
your	O
reference	O
comparisons	O
in	O
these	O
cases	O
will	O
succeed	O
.	O
(	O
(	O
Integer	B-api_mention
)	O
1	O
)	O
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
For	O
this	O
particular	O
example	O
,	O
under	O
the	O
OpenJDK	O
implementation	O
with	O
default	O
settings	O
,	O
it	O
will	O
probably	O
work	O
by	O
virtue	O
of	O
the	O
fact	O
that	O
you	O
picked	O
a	O
value	O
<	O
128	O
which	O
is	O
cached	O
at	O
startup	O
(	O
although	O
this	O
can	O
be	O
overridden	O
as	O
a	O
commandline	O
arg	O
)	O
.	O
It	O
may	O
also	O
work	O
for	O
larger	O
values	O
if	O
it	O
'	O
s	O
frequently	O
used	O
enough	O
to	O
be	O
cached	O
.	O
Unless	O
you	O
'	O
re	O
working	O
under	O
"	O
safe	O
"	O
assumptions	O
about	O
the	O
Integer	B-api_mention
cache	O
,	O
don	O
'	O
t	O
expect	O
the	O
reference	O
comparison	O
to	O
be	O
an	O
equality	O
.	O
Long	B-api_mention
,	O
Short	B-api_mention
,	O
Character	B-api_mention
and	O
Byte	B-api_mention
incidentally	O
implement	O
this	O
caching	O
too	O
,	O
but	O
unlike	O
Integer	B-api_mention
,	O
it	O
'	O
s	O
not	O
tunable	O
.	O
Byte	O
will	O
always	O
work	O
if	O
you	O
'	O
re	O
comparing	O
autobox	O
/	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
references	O
since	O
obviously	O
,	O
you	O
can	O
'	O
t	O
go	O
out	O
of	O
range	O
.	O
Float	B-api_mention
and	O
Double	B-api_mention
will	O
unsurprisingly	O
always	O
create	O
a	O
new	O
instance	O
.	O
Now	O
,	O
in	O
purely	O
generic	O
terms	O
?	O
See	O
this	O
section	O
of	O
the	O
JLS	O
-	O
you	O
MUST	O
be	O
given	O
equal	O
references	O
for	O
boolean	O
and	O
any	O
int	O
or	O
char	O
within	O
the	O
-	O
128	O
to	O
127	O
range	O
.	O
There	O
are	O
no	O
guarantees	O
for	O
anything	O
else	O
.	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894356	O
Looks	O
like	O
niether	O
is	O
faster	O
or	O
slower	O
#	O
pre	O
For	O
long	O
strings	O
I	O
'	O
ll	O
chose	O
the	O
first	O
one	O
.	O
Why	O
copy	O
around	O
long	O
strings	O
?	O
Documentations	O
says	O
:	O
#	O
blockquote	O
/	O
/	O
Edit	O
1	O
I	O
'	O
ve	O
changed	O
the	O
test	O
to	O
trick	O
JIT	O
optimisation	O
.	O
/	O
/	O
Edit	O
2	O
Repeat	O
test	O
10	O
times	O
to	O
let	O
JVM	O
warm	O
up	O
.	O
/	O
/	O
Edit	O
3	O
Conclusions	O
:	O
First	O
of	O
all	O
str	B-api_mention
.	I-api_mention
toCharArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
copies	O
entire	O
string	O
in	O
memory	O
.	O
It	O
can	O
be	O
memory	O
consuming	O
for	O
long	O
strings	O
.	O
Method	O
String	B-api_mention
.	I-api_mention
charAt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
looks	O
up	O
char	O
in	O
char	O
array	O
inside	O
String	O
class	O
checking	O
index	O
before	O
.	O
It	O
looks	O
like	O
for	O
short	O
enough	O
Strings	B-api_mention
first	O
method	O
(	O
i	O
.	O
e	O
.	O
chatAt	B-api_mention
method	O
)	O
is	O
a	O
bit	O
slower	O
due	O
to	O
this	O
index	O
check	O
.	O
But	O
if	O
the	O
String	O
is	O
long	O
enough	O
,	O
copying	O
whole	O
char	O
array	O
gets	O
slower	O
,	O
and	O
the	O
first	O
method	O
is	O
faster	O
.	O
The	O
longer	O
the	O
string	O
is	O
,	O
the	O
slower	O
toCharArray	B-api_mention
performs	O
.	O
Try	O
to	O
change	O
limit	O
in	O
for	O
(	O
args	O
)	O
loop	O
to	O
see	O
it	O
.	O
If	O
we	O
let	O
JVM	O
warm	O
up	O
code	O
runs	O
faster	O
,	O
but	O
proportions	O
are	O
the	O
same	O
.	O
After	O
all	O
it	O
'	O
s	O
just	O
micro	O
-	O
optimisation	O
.	O
Question	O
-	O
20746429	O
,	O
answer	O
-	O
20765715	O
Such	O
an	O
operation	O
ought	O
to	O
be	O
possible	O
with	O
a	O
Java	O
8	O
Stream	B-api_mention
,	O
but	O
it	O
can	O
'	O
t	O
necessarily	O
be	O
done	O
efficiently	O
-	O
-	O
for	O
example	O
,	O
you	O
can	O
'	O
t	O
necessarily	O
parallelize	O
such	O
an	O
operation	O
,	O
as	O
you	O
have	O
to	O
look	O
at	O
elements	O
in	O
order	O
.	O
The	O
API	O
doesn	O
'	O
t	O
provide	O
an	O
easy	O
way	O
to	O
do	O
it	O
,	O
but	O
what	O
'	O
s	O
probably	O
the	O
simplest	O
way	O
is	O
to	O
take	O
Stream	B-api_mention
.	I-api_mention
iterator	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
wrap	O
the	O
Iterator	O
to	O
have	O
a	O
"	O
take	O
-	O
while	O
"	O
implementation	O
,	O
and	O
then	O
go	O
back	O
to	O
a	O
Spliterator	B-api_mention
and	O
then	O
a	O
Stream	B-api_mention
.	O
Or	O
-	O
-	O
maybe	O
-	O
-	O
wrap	O
the	O
Spliterator	B-api_mention
,	O
though	O
it	O
can	O
'	O
t	O
really	O
be	O
split	O
anymore	O
in	O
this	O
implementation	O
.	O
Here	O
'	O
s	O
an	O
untested	O
implementation	O
of	O
takeWhile	O
on	O
a	O
Spliterator	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
27478241	O
=	O
=	O
can	O
be	O
used	O
in	O
many	O
object	O
types	O
but	O
you	O
can	O
use	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
for	O
any	O
type	O
,	O
especially	O
Strings	O
and	O
Google	O
Map	O
Markers	O
.	O
Question	O
-	O
29494800	O
I	O
have	O
trouble	O
understanding	O
the	O
source	O
code	O
of	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
.	O
#	O
pre	O
#	O
li	O
what	O
is	O
this	O
line	O
checking	O
?	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	O
class	O
#	O
li	O
What	O
are	O
the	O
differences	O
between	O
(	O
T	O
[	O
]	O
)	O
new	O
Object	B-api_mention
[	O
newLength	O
]	O
and	O
(	O
T	O
[	O
]	O
)	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
why	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
not	O
good	O
enough	O
for	O
both	O
cases	O
?	O
#	O
li	O
This	O
following	O
line	O
compiles	O
,	O
but	O
crashes	O
at	O
run	O
time	O
(	O
as	O
expected	O
)	O
.	O
When	O
should	O
I	O
use	O
this	O
method	O
?	O
Integer	O
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
27683759	O
I	O
just	O
studied	O
about	O
generic	O
programming	O
,	O
the	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
,	O
and	O
ArrayList	B-api_mention
,	O
so	O
I	O
can	O
understand	O
the	O
statement	O
below	O
.	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
I	O
don	O
'	O
t	O
understand	O
the	O
next	O
statement	O
which	O
I	O
saw	O
while	O
surfing	O
the	O
web	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list2	O
=	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
What	O
is	O
Collections	B-api_mention
?	O
Why	O
isn	O
'	O
t	O
it	O
Collections	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
or	O
Collections	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
?	O
#	O
li	O
Why	O
is	O
<	O
String	O
>	O
placed	O
before	O
the	O
method	O
name	O
emptyList	O
?	O
(	O
Isn	O
'	O
t	O
emptyList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
correct	O
for	O
Generic	O
?	O
)	O
#	O
li	O
What	O
does	O
the	O
statement	O
mean	O
?	O
Question	O
-	O
11821801	O
,	O
answer	O
-	O
36827191	O
From	O
oracle	O
documentation	O
page	O
about	O
ReentrantLock	B-api_mention
:	O
#	O
blockquote	O
#	O
li	O
A	O
ReentrantLock	B-api_mention
is	O
owned	O
by	O
the	O
thread	O
last	O
successfully	O
locking	O
,	O
but	O
not	O
yet	O
unlocking	O
it	O
.	O
A	O
thread	O
invoking	O
lock	O
will	O
return	O
,	O
successfully	O
acquiring	O
the	O
lock	O
,	O
when	O
the	O
lock	O
is	O
not	O
owned	O
by	O
another	O
thread	O
.	O
The	O
method	O
will	O
return	O
immediately	O
if	O
the	O
current	O
thread	O
already	O
owns	O
the	O
lock	O
.	O
#	O
li	O
The	O
constructor	O
for	O
this	O
class	O
accepts	O
an	O
optional	O
fairness	O
parameter	O
.	O
When	O
set	O
true	O
,	O
under	O
contention	O
,	O
locks	O
favor	O
granting	O
access	O
to	O
the	O
longest	O
-	O
waiting	O
thread	O
.	O
Otherwise	O
this	O
lock	O
does	O
not	O
guarantee	O
any	O
particular	O
access	O
order	O
.	O
ReentrantLock	B-api_mention
key	O
features	O
as	O
per	O
this	O
article	O
#	O
li	O
Ability	O
to	O
lock	O
interruptibly	O
.	O
#	O
li	O
Ability	O
to	O
timeout	O
while	O
waiting	O
for	O
lock	O
.	O
#	O
li	O
Power	O
to	O
create	O
fair	O
lock	O
.	O
#	O
li	O
API	O
to	O
get	O
list	O
of	O
waiting	O
thread	O
for	O
lock	O
.	O
#	O
li	O
Flexibility	O
to	O
try	O
for	O
lock	O
without	O
blocking	O
.	O
You	O
can	O
use	O
ReentrantReadWriteLock	B-api_mention
.	I-api_mention
ReadLock	I-api_mention
,	O
ReentrantReadWriteLock	B-api_mention
.	I-api_mention
WriteLock	I-api_mention
to	O
further	O
acquire	O
control	O
on	O
granular	O
locking	O
on	O
read	O
and	O
write	O
operations	O
.	O
Have	O
a	O
look	O
at	O
this	O
article	O
by	O
Benjamen	O
on	O
usage	O
of	O
different	O
type	O
of	O
ReentrantLocks	B-api_mention
Question	O
-	O
8881291	O
,	O
answer	O
-	O
14060804	O
#	O
li	O
Strings	O
are	O
immutable	O
in	O
Java	O
if	O
you	O
store	O
password	O
as	O
plain	O
text	O
it	O
will	O
be	O
available	O
in	O
memory	O
until	O
Garbage	O
collector	O
clears	O
it	O
and	O
since	O
Strings	O
are	O
used	O
in	O
String	B-api_mention
pool	O
for	O
re	O
-	O
usability	O
there	O
is	O
pretty	O
high	O
chance	O
that	O
it	O
will	O
be	O
remain	O
in	O
memory	O
for	O
long	O
duration	O
,	O
which	O
pose	O
a	O
security	O
threat	O
.	O
Since	O
any	O
one	O
who	O
has	O
access	O
to	O
memory	O
dump	O
can	O
find	O
the	O
password	O
in	O
clear	O
text	O
#	O
li	O
Java	O
recommendation	O
using	O
getPassword	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
JPasswordField	O
which	O
returns	O
a	O
char	O
[	O
]	O
and	O
deprecated	O
getText	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
which	O
returns	O
password	O
in	O
clear	O
text	O
stating	O
security	O
reason	O
.	O
#	O
li	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
there	O
is	O
always	O
a	O
risk	O
of	O
printing	O
plain	O
text	O
in	O
log	O
file	O
or	O
console	O
but	O
if	O
use	O
Array	O
you	O
won	O
'	O
t	O
print	O
contents	O
of	O
array	O
instead	O
its	O
memory	O
location	O
get	O
printed	O
.	O
#	O
pre	O
#	O
blockquote	O
Final	O
thoughts	O
:	O
Though	O
using	O
char	O
[	O
]	O
is	O
not	O
just	O
enough	O
you	O
need	O
to	O
erase	O
content	O
to	O
be	O
more	O
secure	O
.	O
I	O
also	O
suggest	O
working	O
with	O
hash	O
'	O
d	O
or	O
encrypted	O
password	O
instead	O
of	O
plaintext	O
and	O
clearing	O
it	O
from	O
memory	O
as	O
soon	O
as	O
authentication	O
is	O
completed	O
.	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894384	O
This	O
is	O
just	O
micro	O
-	O
optimisation	O
that	O
you	O
shouldn	O
'	O
t	O
worry	O
about	O
.	O
char	O
[	O
]	O
chars	O
=	O
str	B-api_mention
.	I-api_mention
toCharArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
returns	O
you	O
a	O
copy	O
of	O
str	O
character	O
arrays	O
(	O
in	O
JDK	O
,	O
it	O
returns	O
a	O
copy	O
of	O
characters	O
by	O
calling	O
System	O
.	O
arrayCopy	O
)	O
.	O
Other	O
than	O
that	O
,	O
str	B-api_mention
.	I-api_mention
charAt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
only	O
checks	O
if	O
the	O
index	O
is	O
indeed	O
in	O
bounds	O
and	O
returns	O
a	O
character	O
within	O
the	O
array	O
index	O
.	O
The	O
first	O
one	O
doesn	O
'	O
t	O
create	O
additional	O
memory	O
in	O
JVM	O
.	O
Question	O
-	O
12544479	O
I	O
am	O
looking	O
for	O
the	O
easiest	O
and	O
simplest	O
way	O
to	O
bind	O
and	O
convert	O
data	O
in	O
Spring	O
MVC	O
.	O
If	O
possible	O
,	O
without	O
doing	O
any	O
xml	O
configuration	O
.	O
So	O
far	O
I	O
'	O
ve	O
been	O
using	O
PropertyEditors	B-api_mention
like	O
so	O
:	O
#	O
pre	O
and	O
#	O
pre	O
It	O
is	O
simple	O
:	O
both	O
conversion	O
are	O
defined	O
in	O
the	O
same	O
class	O
,	O
and	O
the	O
binding	O
is	O
straightforward	O
.	O
If	O
I	O
wanted	O
to	O
do	O
a	O
general	O
binding	O
across	O
all	O
my	O
controllers	O
,	O
I	O
could	O
still	O
add	O
3	O
lines	O
in	O
my	O
xml	O
config	O
.	O
But	O
Spring	O
3	O
.	O
x	O
introduced	O
a	O
new	O
way	O
to	O
do	O
it	O
,	O
using	O
Converters	B-api_mention
:	O
#	O
blockquote	O
So	O
let	O
'	O
s	O
say	O
I	O
want	O
to	O
use	O
Converters	B-api_mention
because	O
it	O
is	O
"	O
the	O
latest	O
alternative	O
"	O
.	O
I	O
would	O
have	O
to	O
create	O
two	O
converters	O
:	O
#	O
pre	O
First	O
drawback	O
:	O
I	O
have	O
to	O
make	O
two	O
classes	O
.	O
Benefit	O
:	O
no	O
need	O
to	O
cast	O
thanks	O
to	O
genericity	O
.	O
Then	O
,	O
how	O
do	O
I	O
simply	O
data	O
bind	O
the	O
converters	B-api_mention
?	O
Second	O
drawback	O
:	O
I	O
haven	O
'	O
t	O
found	O
any	O
simple	O
way	O
(	O
annotations	O
or	O
other	O
programmatic	O
facilities	O
)	O
to	O
do	O
it	O
in	O
a	O
controller	O
:	O
nothing	O
like	O
someSpringObject	O
.	O
registerCustomConverter	O
(	O
args	O
)	O
;	O
.	O
The	O
only	O
ways	O
I	O
'	O
ve	O
found	O
would	O
be	O
tedious	O
,	O
not	O
simple	O
,	O
and	O
only	O
about	O
general	O
cross	O
-	O
controller	O
binding	O
:	O
#	O
li	O
XML	O
config	O
:	O
#	O
pre	O
#	O
li	O
Java	O
config	O
(	O
only	O
in	O
Spring	O
3	O
.	O
1	O
+	O
)	O
:	O
#	O
pre	O
With	O
all	O
these	O
drawbacks	O
,	O
why	O
using	O
Converters	B-api_mention
?	O
Am	O
I	O
missing	O
something	O
?	O
Are	O
there	O
other	O
tricks	O
that	O
I	O
am	O
not	O
aware	O
of	O
?	O
I	O
am	O
tempted	O
to	O
go	O
on	O
using	O
PropertyEditors	B-api_mention
.	O
.	O
.	O
Binding	O
is	O
much	O
easier	O
and	O
quicker	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14502259	O
There	O
are	O
many	O
,	O
many	O
pseudo	O
random	O
number	O
generators	O
out	O
there	O
.	O
For	O
example	O
Knuth	O
'	O
s	O
ranarray	O
,	O
the	O
Mersenne	O
twister	O
,	O
or	O
look	O
for	O
LFSR	O
generators	O
.	O
Knuth	O
'	O
s	O
monumental	O
"	O
Seminumerical	O
algorithms	O
"	O
analizes	O
the	O
area	O
,	O
and	O
proposes	O
some	O
linear	O
congruential	O
generators	O
(	O
simple	O
to	O
implement	O
,	O
fast	O
)	O
.	O
But	O
I	O
'	O
d	O
suggest	O
you	O
just	O
stick	O
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
or	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
,	O
they	O
fast	O
and	O
at	O
least	O
OK	O
for	O
occasional	O
use	O
(	O
i	O
.	O
e	O
.	O
,	O
games	O
and	O
such	O
)	O
.	O
If	O
you	O
are	O
just	O
paranoid	O
on	O
the	O
distribution	O
(	O
some	O
Monte	O
Carlo	O
program	O
,	O
or	O
a	O
genetic	O
algorithm	O
)	O
,	O
check	O
out	O
their	O
implementation	O
(	O
source	O
is	O
available	O
somewhere	O
)	O
,	O
and	O
seed	O
them	O
with	O
some	O
truly	O
random	O
number	O
,	O
either	O
from	O
your	O
operating	O
system	O
or	O
from	O
random	O
.	O
org	O
.	O
If	O
this	O
is	O
required	O
for	O
some	O
application	O
where	O
security	O
is	O
critical	O
,	O
you	O
'	O
ll	O
have	O
to	O
dig	O
yourself	O
.	O
And	O
as	O
in	O
that	O
case	O
you	O
shouldn	O
'	O
t	O
believe	O
what	O
some	O
colored	O
square	O
with	O
missing	O
bits	O
spouts	O
here	O
,	O
I	O
'	O
ll	O
shut	O
up	O
now	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
20593147	O
In	O
Java	O
8	O
,	O
you	O
could	O
do	O
:	O
#	O
pre	O
Some	O
notes	O
:	O
The	O
stream	O
returned	O
by	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	O
unlike	O
most	O
streams	O
)	O
needs	O
to	O
be	O
closed	O
.	O
For	O
the	O
reasons	O
mentioned	O
here	O
I	O
avoid	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
strange	O
code	O
(	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
lines	B-api_mention
:	I-api_mention
:	I-api_mention
iterator	I-api_mention
casts	O
a	O
Stream	B-api_mention
to	O
an	O
Iterable	B-api_mention
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723666	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
without	O
getting	O
any	O
exception	O
.	O
println	B-api_mention
method	O
does	O
not	O
throw	O
null	O
pointer	O
because	O
it	O
first	O
checks	O
whether	O
the	O
object	O
is	O
null	O
or	O
not	O
.	O
If	O
null	O
then	O
it	O
simply	O
prints	O
the	O
string	O
StringLiteral	O
.	O
Otherwise	O
it	O
will	O
call	O
the	O
toString	B-api_mention
method	O
of	O
that	O
object	O
.	O
Adding	O
more	O
details	O
:	O
Internally	O
print	O
methods	O
call	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
the	O
input	O
object	O
.	O
And	O
in	O
valueOf	B-api_mention
method	O
,	O
this	O
check	O
helps	O
to	O
avoid	O
null	O
pointer	O
excpeiton	O
:	O
return	O
(	O
args	O
)	O
?	O
StringLiteral	O
:	O
obj	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
rest	O
of	O
your	O
confusion	O
,	O
calling	O
any	O
method	O
on	O
a	O
null	O
object	O
should	O
throw	O
a	O
null	O
pointer	O
exception	O
,	O
if	O
not	O
a	O
special	O
case	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
35074360	O
I	O
have	O
written	O
a	O
complete	O
utility	O
class	O
(	O
inspired	O
by	O
Askar	O
'	O
s	O
proposal	O
)	O
that	O
can	O
take	O
Java	O
8	O
lambda	O
expression	O
and	O
turn	O
them	O
(	O
if	O
applicable	O
)	O
into	O
any	O
typed	O
standard	O
Java	O
8	O
lambda	O
defined	O
in	O
the	O
package	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	O
You	O
can	O
for	O
example	O
do	O
:	O
#	O
li	O
asPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
asBiPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Because	O
there	O
would	O
be	O
numerous	O
ambiguities	O
if	O
all	O
the	O
static	O
methods	O
would	O
be	O
named	O
just	O
as	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
opted	O
to	O
call	O
the	O
method	O
"	O
as	O
"	O
followed	O
by	O
the	O
returned	O
type	O
.	O
This	O
gives	O
us	O
full	O
control	O
of	O
the	O
lambda	O
interpretation	O
.	O
Below	O
is	O
the	O
first	O
part	O
of	O
the	O
(	O
somewhat	O
large	O
)	O
utility	O
class	O
revealing	O
the	O
pattern	O
used	O
.	O
Have	O
a	O
look	O
at	O
the	O
complete	O
class	O
here	O
(	O
at	O
gist	O
)	O
.	O
#	O
pre	O
Question	O
-	O
22182669	O
,	O
answer	O
-	O
22222274	O
StackOverflowError	B-api_mention
occurs	O
due	O
to	O
an	O
application	O
recurses	O
too	O
deeply	O
(	O
This	O
is	O
not	O
an	O
answer	O
you	O
are	O
expecting	O
)	O
.	O
Now	O
other	O
things	O
to	O
happen	O
to	O
StackOverflowError	B-api_mention
is	O
keep	O
calling	O
methods	O
from	O
methods	O
till	O
you	O
get	O
StackOverflowError	B-api_mention
,	O
but	O
nobody	O
can	O
program	O
to	O
get	O
StackOverflowError	B-api_mention
and	O
even	O
if	O
those	O
programmer	O
are	O
doing	O
so	O
then	O
they	O
are	O
not	O
following	O
coding	O
standards	O
for	O
cyclomatic	O
complixity	O
that	O
every	O
programmer	O
has	O
to	O
understand	O
while	O
programming	O
.	O
Such	O
reason	O
for	O
'	B-api_mention
StackOverflowError	I-api_mention
'	I-api_mention
will	O
require	O
much	O
time	O
to	O
rectify	O
it	O
.	O
But	O
unknowingly	O
coding	O
one	O
line	O
or	O
two	O
line	O
which	O
causes	O
StackOverflowError	B-api_mention
is	O
understandable	O
and	O
JVM	O
throws	O
that	O
and	O
we	O
can	O
rectify	O
it	O
instantly	O
.	O
Here	O
is	O
my	O
answer	O
with	O
picture	O
for	O
some	O
other	O
question	O
.	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
34073047	O
Another	O
option	O
is	O
to	O
use	O
Apache	O
Commons	O
StrBuilder	O
,	O
which	O
has	O
the	O
functionality	O
that	O
'	O
s	O
lacking	O
in	O
StringBuilder	B-api_mention
.	O
StrBuilder	O
.	O
appendLn	O
(	O
)	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781189	O
The	O
only	O
int	O
value	O
for	O
which	O
it	O
works	O
is	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
It	O
'	O
s	O
because	O
integers	O
are	O
negated	O
using	O
the	O
two	O
'	O
s	O
complement	O
way	O
.	O
Using	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
you	O
see	O
that	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
10000000000000000000000000000000	O
Taking	O
the	O
negative	O
value	O
is	O
done	O
by	O
first	O
swapping	O
0	O
and	O
1	O
,	O
which	O
gives	O
01111111111111111111111111111111	O
and	O
by	O
adding	O
1	O
,	O
which	O
gives	O
10000000000000000000000000000000	O
As	O
you	O
can	O
see	O
in	O
the	O
link	O
I	O
gave	O
,	O
Wikipedia	O
mentions	O
the	O
problem	O
with	O
the	O
most	O
negative	O
numbers	O
and	O
specifies	O
it	O
'	O
s	O
the	O
sole	O
exception	O
:	O
#	O
blockquote	O
Of	O
course	O
you	O
have	O
the	O
same	O
phenomenon	O
for	O
Long	B-api_mention
.	O
Min	O
_	O
Value	O
if	O
you	O
store	O
it	O
in	O
a	O
long	O
variable	O
.	O
Note	O
that	O
this	O
is	O
only	O
due	O
to	O
choices	O
that	O
were	O
made	O
regarding	O
the	O
binary	O
storage	O
of	O
ints	O
in	O
Java	O
.	O
Another	O
(	O
bad	O
)	O
solution	O
could	O
for	O
example	O
have	O
been	O
to	O
negate	O
by	O
simply	O
changing	O
the	O
most	O
significant	O
bit	O
and	O
letting	O
the	O
other	O
bits	O
unchanged	O
,	O
this	O
would	O
have	O
avoided	O
this	O
problem	O
with	O
MIN	B-api_mention
_	I-api_mention
VALUE	I-api_mention
but	O
would	O
have	O
made	O
2	O
different	O
0	O
values	O
and	O
complicated	O
binary	O
arithmetic	O
(	O
how	O
would	O
you	O
have	O
incremented	O
for	O
example	O
?	O
)	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276498	O
Assuming	O
all	O
the	O
streams	O
get	O
created	O
okay	O
,	O
yes	O
,	O
just	O
closing	O
bw	O
is	O
fine	O
with	O
those	O
stream	O
implementations	O
;	O
but	O
that	O
'	O
s	O
a	O
big	O
assumption	O
.	O
I	O
'	O
d	O
use	O
try	O
-	O
with	O
-	O
resources	O
(	O
tutorial	O
)	O
so	O
that	O
any	O
issues	O
constructing	O
the	O
subsequent	O
streams	O
that	O
throw	O
exceptions	O
don	O
'	O
t	O
leave	O
the	O
previous	O
streams	O
hanging	O
,	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
rely	O
on	O
the	O
stream	O
implementation	O
having	O
the	O
call	O
to	O
close	O
the	O
underlying	O
stream	O
:	O
#	O
pre	O
Note	O
you	O
no	O
longer	O
call	O
close	O
at	O
all	O
.	O
Important	O
note	O
:	O
To	O
have	O
try	O
-	O
with	O
-	O
resources	O
close	O
them	O
,	O
you	O
must	O
assign	O
the	O
streams	O
to	O
variables	O
as	O
you	O
open	O
them	O
,	O
you	O
cannot	O
use	O
nesting	O
.	O
If	O
you	O
use	O
nesting	O
,	O
an	O
exception	O
during	O
construction	O
of	O
one	O
of	O
the	O
later	O
streams	O
(	O
say	O
,	O
GZIPOutputStream	O
)	O
will	O
leave	O
any	O
stream	O
constructed	O
by	O
the	O
nested	O
calls	O
inside	O
it	O
open	O
.	O
From	O
JLS	O
§	O
14	O
.	O
20	O
.	O
3	O
:	O
#	O
blockquote	O
Note	O
the	O
word	O
"	O
variables	O
"	O
(	O
my	O
emphasis	O
)	O
.	O
E	O
.	O
g	O
.	O
,	O
don	O
'	O
t	O
do	O
this	O
:	O
#	O
pre	O
.	O
.	O
.	O
because	O
an	O
exception	O
from	O
the	O
GZIPOutputStream	O
(	O
OutputStream	O
)	O
constructor	O
(	O
which	O
says	O
it	O
may	O
throw	O
IOException	O
,	O
and	O
writes	O
a	O
header	O
to	O
the	O
underlying	O
stream	O
)	O
would	O
leave	O
the	O
FileOutputStream	B-api_mention
open	O
.	O
Since	O
some	O
resources	O
have	O
constructors	O
that	O
may	O
throw	O
and	O
others	O
don	O
'	O
t	O
,	O
it	O
'	O
s	O
a	O
good	O
habit	O
to	O
just	O
list	O
them	O
separately	O
.	O
We	O
can	O
double	O
-	O
check	O
our	O
interpretation	O
of	O
that	O
JLS	O
section	O
with	O
this	O
program	O
:	O
#	O
pre	O
.	O
.	O
.	O
which	O
has	O
the	O
output	O
:	O
#	O
pre	O
Note	O
that	O
there	O
are	O
no	O
calls	O
to	O
close	O
there	O
.	O
If	O
we	O
fix	O
main	O
:	O
#	O
pre	O
then	O
we	O
get	O
the	O
appropriate	O
close	O
calls	O
:	O
#	O
pre	O
(	O
Yes	O
,	O
two	O
calls	O
to	O
InnerMost	O
#	O
close	O
is	O
correct	O
;	O
one	O
is	O
from	O
Middle	O
,	O
the	O
other	O
from	O
try	O
-	O
with	O
-	O
resources	O
.	O
)	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16635489	O
The	O
advantage	O
comes	O
into	O
account	O
when	O
the	O
operations	O
can	O
be	O
executed	O
in	O
parallel	O
.	O
(	O
See	O
#	O
a	O
-	O
the	O
section	O
about	O
internal	O
and	O
external	O
iteration	O
)	O
#	O
li	O
The	O
main	O
advantage	O
from	O
my	O
point	O
of	O
view	O
is	O
that	O
the	O
implementation	O
of	O
what	O
is	O
to	O
be	O
done	O
within	O
the	O
loop	O
can	O
be	O
defined	O
without	O
having	O
to	O
decide	O
if	O
it	O
will	O
be	O
executed	O
in	O
parallel	O
or	O
sequential	O
#	O
li	O
If	O
you	O
want	O
your	O
loop	O
to	O
be	O
executed	O
in	O
parallel	O
you	O
could	O
simply	O
write	O
joins	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
will	O
have	O
to	O
write	O
some	O
extra	O
code	O
for	O
thread	O
handling	O
etc	O
.	O
Note	O
:	O
for	O
my	O
answer	O
I	O
assumed	O
joins	O
implementing	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
interface	O
.	O
If	O
joins	O
implements	O
only	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Iterable	I-api_mention
interface	O
this	O
is	O
no	O
longer	O
true	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
31265714	O
In	O
Java	O
8	O
,	O
there	O
is	O
also	O
an	O
alternative	O
to	O
using	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
If	O
your	O
input	O
source	O
isn	O
'	O
t	O
a	O
file	O
but	O
something	O
more	O
abstract	O
like	O
a	O
Reader	B-api_mention
or	O
an	O
InputStream	B-api_mention
,	O
you	O
can	O
stream	O
the	O
lines	O
via	O
the	O
BufferedReader	B-api_mention
s	O
lines	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
For	O
example	O
:	O
#	O
pre	O
will	O
call	O
processLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
each	O
input	O
line	O
read	O
by	O
the	O
BufferedReader	B-api_mention
.	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908402	O
Although	O
there	O
is	O
no	O
explicit	O
guarantee	O
of	O
this	O
,	O
the	O
end	O
result	O
is	O
bound	O
to	O
be	O
such	O
that	O
the	O
comparison	O
always	O
succeeds	O
for	O
enum	O
constants	O
with	O
identical	O
names	O
:	O
#	O
pre	O
The	O
reason	O
for	O
this	O
is	O
that	O
Java	O
compiler	O
constructs	O
subclasses	O
of	O
Enum	O
in	O
such	O
a	O
way	O
that	O
they	O
end	O
up	O
calling	O
Enum	O
'	O
s	O
sole	O
protected	O
constructor	O
,	O
passing	O
it	O
the	O
name	O
of	O
enum	O
value	O
:	O
protected	O
Enum	O
(	O
args	O
)	O
;	O
The	O
name	O
is	O
embedded	O
into	O
the	O
generated	O
code	O
in	O
the	O
form	O
of	O
a	O
string	O
literal	O
.	O
According	O
to	O
String	B-api_mention
documentation	O
,	O
#	O
blockquote	O
This	O
amounts	O
to	O
an	O
implicit	O
guarantee	O
of	O
your	O
expression	O
succeeding	O
when	O
names	O
of	O
enum	O
constants	O
are	O
identical	O
.	O
However	O
,	O
I	O
would	O
not	O
rely	O
on	O
this	O
behavior	O
,	O
and	O
use	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
,	O
because	O
anyone	O
reading	O
my	O
code	O
would	O
be	O
scratching	O
his	O
head	O
,	O
thinking	O
that	O
I	O
made	O
a	O
mistake	O
.	O
Question	O
-	O
31188231	O
It	O
has	O
generally	O
been	O
the	O
case	O
the	O
Java	O
source	O
code	O
has	O
been	O
forward	O
compatible	O
.	O
Until	O
Java	O
8	O
,	O
as	O
far	O
as	O
I	O
know	O
,	O
both	O
compiled	O
classes	O
and	O
source	O
have	O
been	O
forward	O
compatible	O
with	O
later	O
JDK	O
/	O
JVM	O
releases	O
.	O
[	O
Update	O
:	O
this	O
is	O
not	O
correct	O
,	O
see	O
comments	O
re	O
'	O
enum	O
'	O
,	O
etc	O
,	O
below	O
.	O
]	O
However	O
,	O
with	O
the	O
addition	O
of	O
default	O
methods	O
in	O
Java	O
8	O
this	O
appears	O
to	O
no	O
longer	O
be	O
the	O
case	O
.	O
For	O
example	O
,	O
a	O
library	O
I	O
have	O
been	O
using	O
has	O
an	O
implementation	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
which	O
includes	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
sort	O
(	O
args	O
)	O
.	O
This	O
method	O
returns	O
a	O
copy	O
of	O
the	O
contents	O
of	O
the	O
list	O
sorted	O
.	O
This	O
library	O
,	O
deployed	O
as	O
a	O
jar	O
file	O
dependency	O
,	O
worked	O
fine	O
in	O
a	O
project	O
being	O
built	O
using	O
JDK	O
1	O
.	O
8	O
.	O
However	O
,	O
later	O
I	O
had	O
occasion	O
to	O
recompile	O
the	O
library	O
itself	O
using	O
JDK	O
1	O
.	O
8	O
and	O
I	O
found	O
the	O
library	O
no	O
longer	O
compiles	O
:	O
the	O
List	O
-	O
implementing	O
class	O
with	O
its	O
own	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
now	O
conflicts	O
with	O
the	O
Java	O
8	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
.	O
The	O
Java	O
8	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
sorts	O
the	O
list	O
in	O
place	O
(	O
returns	O
void	O
)	O
;	O
my	O
library	O
'	O
s	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
-	O
since	O
it	O
returns	O
a	O
new	O
sorted	O
list	O
-	O
has	O
an	O
incompatible	O
signature	O
.	O
So	O
my	O
basic	O
question	O
is	O
:	O
#	O
li	O
Doesn	O
'	O
t	O
JDK	O
1	O
.	O
8	O
introduce	O
a	O
forward	O
incompatibility	O
for	O
Java	O
source	O
code	O
due	O
to	O
default	O
methods	O
?	O
Also	O
:	O
#	O
li	O
Is	O
this	O
the	O
first	O
such	O
forward	O
incompatible	O
change	O
?	O
#	O
li	O
Was	O
this	O
considered	O
or	O
discussed	O
when	O
default	O
methods	O
where	O
designed	O
and	O
implemented	O
?	O
Is	O
it	O
documented	O
anywhere	O
?	O
#	O
li	O
Was	O
the	O
(	O
admittedly	O
small	O
)	O
inconvenience	O
discounted	O
versus	O
the	O
benefits	O
?	O
The	O
following	O
is	O
an	O
example	O
of	O
some	O
code	O
that	O
compiles	O
and	O
runs	O
under	O
1	O
.	O
7	O
and	O
runs	O
under	O
1	O
.	O
8	O
-	O
but	O
does	O
not	O
compile	O
under	O
1	O
.	O
8	O
:	O
#	O
pre	O
The	O
following	O
shows	O
this	O
code	O
being	O
compiled	O
(	O
or	O
failing	O
to	O
)	O
and	O
being	O
run	O
.	O
#	O
pre	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
10796174	O
You	O
need	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
split	B-api_mention
uses	O
regular	O
expression	O
and	O
in	O
regex	O
|	O
is	O
metacharacter	O
representing	O
OR	O
operator	O
.	O
You	O
need	O
to	O
escape	O
that	O
character	O
using	O
\	O
(	O
written	O
in	O
String	B-api_mention
as	O
StringLiteral	O
since	O
\	O
is	O
also	O
metacharacter	O
in	O
String	O
literals	O
and	O
require	O
another	O
\	O
to	O
escape	O
it	O
)	O
.	O
You	O
can	O
also	O
use	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
let	O
Pattern	B-api_mention
.	I-api_mention
quote	I-api_mention
create	O
escaped	O
version	O
of	O
regex	O
representing	O
|	O
.	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
21274808	O
Use	O
CodeSource	B-api_mention
#	I-api_mention
getLocation	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
This	O
works	O
fine	O
in	O
JAR	O
files	O
as	O
well	O
.	O
You	O
can	O
obtain	O
CodeSource	B-api_mention
by	O
ProtectionDomain	B-api_mention
#	I-api_mention
getCodeSource	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
the	O
ProtectionDomain	B-api_mention
in	O
turn	O
can	O
be	O
obtained	O
by	O
Class	B-api_mention
#	I-api_mention
getProtectionDomain	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
#	O
pre	O
Question	O
-	O
7032070	O
Assuming	O
that	O
arraylist	O
is	O
defined	O
as	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
arraylist	O
,	O
is	O
arraylist	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
arraylist	I-api_mention
)	I-api_mention
equivalent	O
to	O
arraylist	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
)	I-api_mention
?	O
If	O
so	O
,	O
can	O
I	O
assume	O
that	O
the	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
more	O
efficient	O
for	O
emptying	O
the	O
array	O
list	O
?	O
Are	O
there	O
any	O
caveats	O
in	O
using	O
arraylist	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
arraylist	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Question	O
-	O
24885223	O
,	O
answer	O
-	O
29841832	O
Thanks	O
to	O
@	O
marmor	O
,	O
I	O
updated	O
my	O
answer	O
.	O
I	O
think	O
it	O
'	O
s	O
a	O
good	O
solution	O
to	O
handle	O
the	O
onClick	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
the	O
ViewHolder	B-api_mention
class	O
constructor	O
and	O
pass	O
it	O
to	O
the	O
parent	O
class	O
via	O
OnItemClickListener	B-api_mention
interface	O
.	O
MyAdapter	O
.	O
java	O
#	O
pre	O
Usage	O
of	O
adapter	O
in	O
other	O
classes	O
:	O
MyFragment	O
.	O
java	O
#	O
pre	O
Question	O
-	O
25903137	O
,	O
answer	O
-	O
25903190	O
#	O
pre	O
It	O
'	O
s	O
not	O
quite	O
as	O
nice	O
as	O
the	O
list	O
code	O
.	O
You	O
can	O
'	O
t	O
construct	O
new	O
Map	B-api_mention
.	I-api_mention
Entry	I-api_mention
s	O
in	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
so	O
the	O
work	O
is	O
mixed	O
into	O
the	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
.	O
Question	O
-	O
23674624	O
,	O
answer	O
-	O
23674719	O
IntStream	B-api_mention
.	I-api_mention
boxed	I-api_mention
turns	O
an	O
IntStream	B-api_mention
into	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
you	O
can	O
then	O
collect	O
into	O
a	O
list	O
:	O
theIntStream	O
.	B-api_mention
boxed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28513908	O
I	O
have	O
some	O
recollections	O
from	O
the	O
early	O
design	O
of	O
the	O
Streams	O
API	O
that	O
might	O
shed	O
some	O
light	O
on	O
the	O
design	O
rationale	O
.	O
Back	O
in	O
2012	O
,	O
we	O
were	O
adding	O
lambdas	O
to	O
the	O
language	O
,	O
and	O
we	O
wanted	O
a	O
collections	O
-	O
oriented	O
or	O
"	O
bulk	O
data	O
"	O
set	O
of	O
operations	O
,	O
programmed	O
using	O
lambdas	O
,	O
that	O
would	O
facilitate	O
parallelism	O
.	O
The	O
idea	O
of	O
lazily	O
chaining	O
operations	O
together	O
was	O
well	O
established	O
by	O
this	O
point	O
.	O
We	O
also	O
didn	O
'	O
t	O
want	O
the	O
intermediate	O
operations	O
to	O
store	O
results	O
.	O
The	O
main	O
issues	O
we	O
needed	O
to	O
decide	O
were	O
what	O
the	O
objects	O
in	O
the	O
chain	O
looked	O
like	O
in	O
the	O
API	O
and	O
how	O
they	O
hooked	O
up	O
to	O
data	O
sources	O
.	O
The	O
sources	O
were	O
often	O
collections	O
,	O
but	O
we	O
also	O
wanted	O
to	O
support	O
data	O
coming	O
from	O
a	O
file	O
or	O
the	O
network	O
,	O
or	O
data	O
generated	O
on	O
-	O
the	O
-	O
fly	O
,	O
e	O
.	O
g	O
.	O
,	O
from	O
a	O
random	O
number	O
generator	O
.	O
There	O
were	O
many	O
influences	O
of	O
existing	O
work	O
on	O
the	O
design	O
.	O
Among	O
the	O
more	O
influential	O
were	O
Google	O
'	O
s	O
Guava	O
library	O
and	O
the	O
Scala	O
collections	O
library	O
.	O
(	O
If	O
anybody	O
is	O
surprised	O
about	O
the	O
influence	O
from	O
Guava	O
,	O
note	O
that	O
Kevin	O
Bourrillion	O
,	O
Guava	O
lead	O
developer	O
,	O
was	O
on	O
the	O
JSR	O
-	O
335	O
Lambda	O
expert	O
group	O
.	O
)	O
On	O
Scala	O
collections	O
,	O
we	O
found	O
this	O
talk	O
by	O
Martin	O
Odersky	O
to	O
be	O
of	O
particular	O
interest	O
:	O
Future	O
-	O
Proofing	O
Scala	O
Collections	O
:	O
from	O
Mutable	O
to	O
Persistent	O
to	O
Parallel	O
.	O
(	O
Stanford	O
EE380	O
,	O
2011	O
June	O
1	O
.	O
)	O
Our	O
prototype	O
design	O
at	O
the	O
time	O
was	O
based	O
around	O
Iterable	B-api_mention
.	O
The	O
familiar	O
operations	O
filter	O
,	O
map	O
,	O
and	O
so	O
forth	O
were	O
extension	O
(	O
default	O
)	O
methods	O
on	O
Iterable	B-api_mention
.	O
Calling	O
one	O
added	O
an	O
operation	O
to	O
the	O
chain	O
and	O
returned	O
another	O
Iterable	O
.	O
A	O
terminal	O
operation	O
like	O
count	O
would	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
up	O
the	O
chain	O
to	O
the	O
source	O
,	O
and	O
the	O
operations	O
were	O
implemented	O
within	O
each	O
stage	O
'	O
s	O
Iterator	B-api_mention
.	O
Since	O
these	O
are	O
Iterables	O
,	O
you	O
can	O
call	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
more	O
than	O
once	O
.	O
What	O
should	O
happen	O
then	O
?	O
If	O
the	O
source	O
is	O
a	O
collection	O
,	O
this	O
mostly	O
works	O
fine	O
.	O
Collections	O
are	O
Iterable	B-api_mention
,	O
and	O
each	O
call	O
to	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
produces	O
a	O
distinct	O
Iterator	B-api_mention
instance	O
that	O
is	O
independent	O
of	O
any	O
other	O
active	O
instances	O
,	O
and	O
each	O
traverses	O
the	O
collection	O
independently	O
.	O
Great	O
.	O
Now	O
what	O
if	O
the	O
source	O
is	O
one	O
-	O
shot	O
,	O
like	O
reading	O
lines	O
from	O
a	O
file	O
?	O
Maybe	O
the	O
first	O
Iterator	O
should	O
get	O
all	O
the	O
values	O
but	O
the	O
second	O
and	O
subsequent	O
ones	O
should	O
be	O
empty	O
.	O
Maybe	O
the	O
values	O
should	O
be	O
interleaved	O
among	O
the	O
Iterators	O
.	O
Or	O
maybe	O
each	O
Iterator	B-api_mention
should	O
get	O
all	O
the	O
same	O
values	O
.	O
Then	O
,	O
what	O
if	O
you	O
have	O
two	O
iterators	O
and	O
one	O
gets	O
farther	O
ahead	O
of	O
the	O
other	O
?	O
Somebody	O
will	O
have	O
to	O
buffer	O
up	O
the	O
values	O
in	O
the	O
second	O
Iterator	O
until	O
they	O
'	O
re	O
read	O
.	O
Worse	O
,	O
what	O
if	O
you	O
get	O
one	O
Iterator	B-api_mention
and	O
read	O
all	O
the	O
values	O
,	O
and	O
only	O
then	O
get	O
a	O
second	O
Iterator	B-api_mention
.	O
Where	O
do	O
the	O
values	O
come	O
from	O
now	O
?	O
Is	O
there	O
a	O
requirement	O
for	O
them	O
all	O
to	O
be	O
buffered	O
up	O
just	O
in	O
case	O
somebody	O
wants	O
a	O
second	O
Iterator	B-api_mention
?	O
Clearly	O
,	O
allowing	O
multiple	O
Iterators	O
over	O
a	O
one	O
-	O
shot	O
source	O
raises	O
a	O
lot	O
of	O
questions	O
.	O
We	O
didn	O
'	O
t	O
have	O
good	O
answers	O
for	O
them	O
.	O
We	O
wanted	O
consistent	O
,	O
predictable	O
behavior	O
for	O
what	O
happens	O
if	O
you	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
twice	O
.	O
This	O
pushed	O
us	O
toward	O
disallowing	O
multiple	O
traversals	O
,	O
making	O
the	O
pipelines	O
one	O
-	O
shot	O
.	O
We	O
also	O
observed	O
others	O
bumping	O
into	O
these	O
issues	O
.	O
In	O
the	O
JDK	O
,	O
most	O
Iterables	O
are	O
collections	O
or	O
collection	O
-	O
like	O
objects	O
,	O
which	O
allow	O
multiple	O
traversal	O
.	O
It	O
isn	O
'	O
t	O
specified	O
anywhere	O
,	O
but	O
there	O
seemed	O
to	O
be	O
an	O
unwritten	O
expectation	O
that	O
Iterables	O
allow	O
multiple	O
traversal	O
.	O
A	O
notable	O
exception	O
is	O
the	O
NIO	O
DirectoryStream	O
interface	O
.	O
Its	O
specification	O
includes	O
this	O
interesting	O
warning	O
:	O
#	O
blockquote	O
[	O
bold	O
in	O
original	O
]	O
This	O
seemed	O
unusual	O
and	O
unpleasant	O
enough	O
that	O
we	O
didn	O
'	O
t	O
want	O
to	O
create	O
a	O
whole	O
bunch	O
of	O
new	O
Iterables	O
that	O
might	O
be	O
once	O
-	O
only	O
.	O
This	O
pushed	O
us	O
away	O
from	O
using	O
Iterable	B-api_mention
.	O
About	O
this	O
time	O
,	O
an	O
article	O
by	O
Bruce	O
Eckel	O
appeared	O
that	O
described	O
a	O
spot	O
of	O
trouble	O
he	O
'	O
d	O
had	O
with	O
Scala	O
.	O
He	O
'	O
d	O
written	O
this	O
code	O
:	O
#	O
pre	O
It	O
'	O
s	O
pretty	O
straightforward	O
.	O
It	O
parses	O
lines	O
of	O
text	O
into	O
Registrant	O
objects	O
and	O
prints	O
them	O
out	O
twice	O
.	O
Except	O
that	O
it	O
actually	O
only	O
prints	O
them	O
out	O
once	O
.	O
It	O
turns	O
out	O
that	O
he	O
thought	O
that	O
registrants	O
was	O
a	O
collection	O
,	O
when	O
in	O
fact	O
it	O
'	O
s	O
an	O
iterator	O
.	O
The	O
second	O
call	O
to	O
foreach	O
encounters	O
an	O
empty	O
iterator	O
,	O
from	O
which	O
all	O
values	O
have	O
been	O
exhausted	O
,	O
so	O
it	O
prints	O
nothing	O
.	O
This	O
kind	O
of	O
experience	O
convinced	O
us	O
that	O
it	O
was	O
very	O
important	O
to	O
have	O
clearly	O
predictable	O
results	O
if	O
multiple	O
traversal	O
is	O
attempted	O
.	O
It	O
also	O
highlighted	O
the	O
importance	O
of	O
distinguishing	O
between	O
lazy	O
pipeline	O
-	O
like	O
structures	O
from	O
actual	O
collections	O
that	O
store	O
data	O
.	O
This	O
in	O
turn	O
drove	O
the	O
separation	O
of	O
the	O
lazy	O
pipeline	O
operations	O
into	O
the	O
new	O
Stream	B-api_mention
interface	O
and	O
keeping	O
only	O
eager	O
,	O
mutative	O
operations	O
directly	O
on	O
Collections	B-api_mention
.	O
Brian	O
Goetz	O
has	O
explained	O
the	O
rationale	O
for	O
that	O
.	O
What	O
about	O
allowing	O
multiple	O
traversal	O
for	O
collection	O
-	O
based	O
pipelines	O
but	O
disallowing	O
it	O
for	O
non	O
-	O
collection	O
-	O
based	O
pipelines	O
?	O
It	O
'	O
s	O
inconsistent	O
,	O
but	O
it	O
'	O
s	O
sensible	O
.	O
If	O
you	O
'	O
re	O
reading	O
values	O
from	O
the	O
network	O
,	O
of	O
course	O
you	O
can	O
'	O
t	O
traverse	O
them	O
again	O
.	O
If	O
you	O
want	O
to	O
traverse	O
them	O
multiple	O
times	O
,	O
you	O
have	O
to	O
pull	O
them	O
into	O
a	O
collection	O
explicitly	O
.	O
But	O
let	O
'	O
s	O
explore	O
allowing	O
multiple	O
traversal	O
from	O
collections	O
-	O
based	O
pipelines	O
.	O
Let	O
'	O
s	O
say	O
you	O
did	O
this	O
:	O
#	O
pre	O
(	O
The	O
into	O
operation	O
is	O
now	O
spelled	O
collect	O
(	O
args	O
)	O
.	O
)	O
If	O
source	O
is	O
a	O
collection	O
,	O
then	O
the	O
first	O
into	O
(	O
args	O
)	O
call	O
will	O
create	O
a	O
chain	O
of	O
Iterators	O
back	O
to	O
the	O
source	O
,	O
execute	O
the	O
pipeline	O
operations	O
,	O
and	O
send	O
the	O
results	O
into	O
the	O
destination	O
.	O
The	O
second	O
call	O
to	O
into	O
(	O
args	O
)	O
will	O
create	O
another	O
chain	O
of	O
Iterators	O
,	O
and	O
execute	O
the	O
pipeline	O
operations	O
again	O
.	O
This	O
isn	O
'	O
t	O
obviously	O
wrong	O
but	O
it	O
does	O
have	O
the	O
effect	O
of	O
performing	O
all	O
the	O
filter	O
and	O
map	O
operations	O
a	O
second	O
time	O
for	O
each	O
element	O
.	O
I	O
think	O
many	O
programmers	O
would	O
have	O
been	O
surprised	O
by	O
this	O
behavior	O
.	O
As	O
I	O
mentioned	O
above	O
,	O
we	O
had	O
been	O
talking	O
to	O
the	O
Guava	O
developers	O
.	O
One	O
of	O
the	O
cool	O
things	O
they	O
have	O
is	O
an	O
Idea	O
Graveyard	O
where	O
they	O
describe	O
features	O
that	O
they	O
decided	O
not	O
to	O
implement	O
along	O
with	O
the	O
reasons	O
.	O
The	O
idea	O
of	O
lazy	O
collections	O
sounds	O
pretty	O
cool	O
,	O
but	O
here	O
'	O
s	O
what	O
they	O
have	O
to	O
say	O
about	O
it	O
.	O
Consider	O
a	O
List	B-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
operation	O
that	O
returns	O
a	O
List	B-api_mention
:	O
#	O
blockquote	O
To	O
take	O
a	O
specific	O
example	O
,	O
what	O
'	O
s	O
the	O
cost	O
of	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
List	B-api_mention
?	O
For	O
commonly	O
used	O
classes	O
like	O
ArrayList	B-api_mention
,	O
they	O
'	O
re	O
O	O
(	O
1	O
)	O
.	O
But	O
if	O
you	O
call	O
one	O
of	O
these	O
on	O
a	O
lazily	O
-	O
filtered	O
list	O
,	O
it	O
has	O
to	O
run	O
the	O
filter	O
over	O
the	O
backing	O
list	O
,	O
and	O
all	O
of	O
a	O
sudden	O
these	O
operations	O
are	O
O	O
(	O
n	O
)	O
.	O
Worse	O
,	O
it	O
has	O
to	O
traverse	O
the	O
backing	O
list	O
on	O
every	O
operation	O
.	O
This	O
seemed	O
to	O
us	O
to	O
be	O
too	O
much	O
laziness	O
.	O
It	O
'	O
s	O
one	O
thing	O
to	O
set	O
up	O
some	O
operations	O
and	O
defer	O
actual	O
execution	O
until	O
you	O
so	O
"	O
Go	O
"	O
.	O
It	O
'	O
s	O
another	O
to	O
set	O
things	O
up	O
in	O
such	O
a	O
way	O
that	O
hides	O
a	O
potentially	O
large	O
amount	O
of	O
recomputation	O
.	O
In	O
proposing	O
to	O
disallow	O
non	O
-	O
linear	O
or	O
"	O
no	O
-	O
reuse	O
"	O
streams	O
,	O
Paul	O
Sandoz	O
described	O
the	O
potential	O
consequences	O
of	O
allowing	O
them	O
as	O
giving	O
rise	O
to	O
"	O
unexpected	O
or	O
confusing	O
results	O
.	O
"	O
He	O
also	O
mentioned	O
that	O
parallel	O
execution	O
would	O
make	O
things	O
even	O
trickier	O
.	O
Finally	O
,	O
I	O
'	O
d	O
add	O
that	O
a	O
pipeline	O
operation	O
with	O
side	O
effects	O
would	O
lead	O
to	O
difficult	O
and	O
obscure	O
bugs	O
if	O
the	O
operation	O
were	O
unexpectedly	O
executed	O
multiple	O
times	O
,	O
or	O
at	O
least	O
a	O
different	O
number	O
of	O
times	O
than	O
the	O
programmer	O
expected	O
.	O
(	O
But	O
Java	O
programmers	O
don	O
'	O
t	O
write	O
lambda	O
expressions	O
with	O
side	O
effects	O
,	O
do	O
they	O
?	O
DO	O
THEY	O
?	O
?	O
)	O
So	O
that	O
'	O
s	O
the	O
basic	O
rationale	O
for	O
the	O
Java	O
8	O
Streams	O
API	O
design	O
that	O
allows	O
one	O
-	O
shot	O
traversal	O
and	O
that	O
requires	O
a	O
strictly	O
linear	O
(	O
no	O
branching	O
)	O
pipeline	O
.	O
It	O
provides	O
consistent	O
behavior	O
across	O
multiple	O
different	O
stream	O
sources	O
,	O
it	O
clearly	O
separates	O
lazy	O
from	O
eager	O
operations	O
,	O
and	O
it	O
provides	O
a	O
straightforward	O
execution	O
model	O
.	O
With	O
regard	O
to	O
IEnumerable	O
,	O
I	O
am	O
far	O
from	O
an	O
expert	O
on	O
C	O
#	O
and	O
.	O
NET	O
,	O
so	O
I	O
would	O
appreciate	O
being	O
corrected	O
(	O
gently	O
)	O
if	O
I	O
draw	O
any	O
incorrect	O
conclusions	O
.	O
It	O
does	O
appear	O
,	O
however	O
,	O
that	O
IEnumerable	O
permits	O
multiple	O
traversal	O
to	O
behave	O
differently	O
with	O
different	O
sources	O
;	O
and	O
it	O
permits	O
a	O
branching	O
structure	O
of	O
nested	O
IEnumerable	O
operations	O
,	O
which	O
may	O
result	O
in	O
some	O
significant	O
recomputation	O
.	O
While	O
I	O
appreciate	O
that	O
different	O
systems	O
make	O
different	O
tradeoffs	O
,	O
these	O
are	O
two	O
characteristics	O
that	O
we	O
sought	O
to	O
avoid	O
in	O
the	O
design	O
of	O
the	O
Java	O
8	O
Streams	O
API	O
.	O
The	O
quicksort	O
example	O
given	O
by	O
the	O
OP	O
is	O
interesting	O
,	O
puzzling	O
,	O
and	O
I	O
'	O
m	O
sorry	O
to	O
say	O
,	O
somewhat	O
horrifying	O
.	O
Calling	O
QuickSort	O
takes	O
an	O
IEnumerable	O
and	O
returns	O
an	O
IEnumerable	O
,	O
so	O
no	O
sorting	O
is	O
actually	O
done	O
until	O
the	O
final	O
IEnumerable	O
is	O
traversed	O
.	O
What	O
the	O
call	O
seems	O
to	O
do	O
,	O
though	O
,	O
is	O
build	O
up	O
a	O
tree	O
structure	O
of	O
IEnumerables	O
that	O
reflects	O
the	O
partitioning	O
that	O
quicksort	O
would	O
do	O
,	O
without	O
actually	O
doing	O
it	O
.	O
(	O
This	O
is	O
lazy	O
computation	O
,	O
after	O
all	O
.	O
)	O
If	O
the	O
source	O
has	O
N	O
elements	O
,	O
the	O
tree	O
will	O
be	O
N	O
elements	O
wide	O
at	O
its	O
widest	O
,	O
and	O
it	O
will	O
be	O
lg	O
(	O
N	O
)	O
levels	O
deep	O
.	O
It	O
seems	O
to	O
me	O
-	O
-	O
and	O
once	O
again	O
,	O
I	O
'	O
m	O
not	O
a	O
C	O
#	O
or	O
.	O
NET	O
expert	O
-	O
-	O
that	O
this	O
will	O
cause	O
certain	O
innocuous	O
-	O
looking	O
calls	O
,	O
such	O
as	O
pivot	O
selection	O
via	O
ints	O
.	O
First	O
(	O
args	O
)	O
,	O
to	O
be	O
more	O
expensive	O
than	O
they	O
look	O
.	O
At	O
the	O
first	O
level	O
,	O
of	O
course	O
,	O
it	O
'	O
s	O
O	O
(	O
1	O
)	O
.	O
But	O
consider	O
a	O
partition	O
deep	O
in	O
the	O
tree	O
,	O
at	O
the	O
right	O
-	O
hand	O
edge	O
.	O
To	O
compute	O
the	O
first	O
element	O
of	O
this	O
partition	O
,	O
the	O
entire	O
source	O
has	O
to	O
be	O
traversed	O
,	O
an	O
O	O
(	O
N	O
)	O
operation	O
.	O
But	O
since	O
the	O
partitions	O
above	O
are	O
lazy	O
,	O
they	O
must	O
be	O
recomputed	O
,	O
requiring	O
O	O
(	O
lg	O
N	O
)	O
comparisons	O
.	O
So	O
selecting	O
the	O
pivot	O
would	O
be	O
an	O
O	O
(	O
N	O
lg	O
N	O
)	O
operation	O
,	O
which	O
is	O
as	O
expensive	O
as	O
an	O
entire	O
sort	O
.	O
But	O
we	O
don	O
'	O
t	O
actually	O
sort	O
until	O
we	O
traverse	O
the	O
returned	O
IEnumerable	O
.	O
In	O
the	O
standard	O
quicksort	O
algorithm	O
,	O
each	O
level	O
of	O
partitioning	O
doubles	O
the	O
number	O
of	O
partitions	O
.	O
Each	O
partition	O
is	O
only	O
half	O
the	O
size	O
,	O
so	O
each	O
level	O
remains	O
at	O
O	O
(	O
N	O
)	O
complexity	O
.	O
The	O
tree	O
of	O
partitions	O
is	O
O	O
(	O
lg	O
N	O
)	O
high	O
,	O
so	O
the	O
total	O
work	O
is	O
O	O
(	O
N	O
lg	O
N	O
)	O
.	O
With	O
the	O
tree	O
of	O
lazy	O
IEnumerables	O
,	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
there	O
are	O
N	O
partitions	O
.	O
Computing	O
each	O
partition	O
requires	O
a	O
traversal	O
of	O
N	O
elements	O
,	O
each	O
of	O
which	O
requires	O
lg	O
(	O
N	O
)	O
comparisons	O
up	O
the	O
tree	O
.	O
To	O
compute	O
all	O
the	O
partitions	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
,	O
then	O
,	O
requires	O
O	O
(	O
N	O
^	O
2	O
lg	O
N	O
)	O
comparisons	O
.	O
(	O
Is	O
this	O
right	O
?	O
I	O
can	O
hardly	O
believe	O
this	O
.	O
Somebody	O
please	O
check	O
this	O
for	O
me	O
.	O
)	O
In	O
any	O
case	O
,	O
it	O
is	O
indeed	O
cool	O
that	O
IEnumerable	O
can	O
be	O
used	O
this	O
way	O
to	O
build	O
up	O
complicated	O
structures	O
of	O
computation	O
.	O
But	O
if	O
it	O
does	O
increase	O
the	O
computational	O
complexity	O
as	O
much	O
as	O
I	O
think	O
it	O
does	O
,	O
it	O
would	O
seem	O
that	O
programming	O
this	O
way	O
is	O
something	O
that	O
should	O
be	O
avoided	O
unless	O
one	O
is	O
extremely	O
careful	O
.	O
Question	O
-	O
22036885	O
,	O
answer	O
-	O
22037068	O
As	O
said	O
in	O
API	O
#	O
blockquote	O
It	O
'	O
s	O
because	O
of	O
cannot	O
represent	O
double	O
value	O
exactly	O
.	O
So	O
you	O
have	O
to	O
use	O
BigDecimal	B-api_mention
bigDecimal	O
=	O
BigDecimal	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
of	O
BigDecimal	B-api_mention
bigDecimal	O
=	O
new	O
BigDecimal	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
24676877	O
,	O
answer	O
-	O
24681959	O
I	O
have	O
a	O
few	O
points	O
to	O
add	O
to	O
Brian	O
Goetz	O
'	O
excellent	O
answer	O
.	O
It	O
'	O
s	O
quite	O
common	O
to	O
return	O
a	O
Stream	B-api_mention
from	O
a	O
"	O
getter	O
"	O
style	O
method	O
call	O
.	O
See	O
the	O
Stream	B-api_mention
usage	O
page	O
in	O
the	O
Java	O
8	O
javadoc	O
and	O
look	O
for	O
"	O
methods	O
.	O
.	O
.	O
that	O
return	O
Stream	B-api_mention
"	O
for	O
the	O
packages	O
other	O
than	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
.	O
These	O
methods	O
are	O
usually	O
on	O
classes	O
that	O
represent	O
or	O
can	O
contain	O
multiple	O
values	O
or	O
aggregations	O
of	O
something	O
.	O
In	O
such	O
cases	O
,	O
APIs	O
typically	O
have	O
returned	O
collections	O
or	O
arrays	O
of	O
them	O
.	O
For	O
all	O
the	O
reasons	O
that	O
Brian	O
noted	O
in	O
his	O
answer	O
,	O
it	O
'	O
s	O
very	O
flexible	O
to	O
add	O
Stream	O
-	O
returning	O
methods	O
here	O
.	O
Many	O
of	O
these	O
classes	O
have	O
collections	O
-	O
or	O
array	O
-	O
returning	O
methods	O
already	O
,	O
because	O
the	O
classes	O
predate	O
the	O
Streams	B-api_mention
API	O
.	O
If	O
you	O
'	O
re	O
designing	O
a	O
new	O
API	O
,	O
and	O
it	O
makes	O
sense	O
to	O
provide	O
Stream	O
-	O
returning	O
methods	O
,	O
it	O
might	O
not	O
be	O
necessary	O
to	O
add	O
collection	O
-	O
returning	O
methods	O
as	O
well	O
.	O
Brian	O
mentioned	O
the	O
cost	O
of	O
"	O
materializing	O
"	O
the	O
values	O
into	O
a	O
collection	O
.	O
To	O
amplify	O
this	O
point	O
,	O
there	O
are	O
actually	O
two	O
costs	O
here	O
:	O
the	O
cost	O
of	O
storing	O
values	O
in	O
the	O
collection	O
(	O
memory	O
allocation	O
and	O
copying	O
)	O
and	O
also	O
the	O
cost	O
of	O
creating	O
the	O
values	O
in	O
the	O
first	O
place	O
.	O
The	O
latter	O
cost	O
can	O
often	O
be	O
reduced	O
or	O
avoided	O
by	O
taking	O
advantage	O
of	O
a	O
Stream	O
'	O
s	O
laziness	O
-	O
seeking	O
behavior	O
.	O
A	O
good	O
example	O
of	O
this	O
are	O
the	O
APIs	O
in	O
java	B-api_mention
.	I-api_mention
nio	I-api_mention
.	I-api_mention
file	I-api_mention
.	I-api_mention
Files	I-api_mention
:	O
#	O
pre	O
Not	O
only	O
does	O
readAllLines	B-api_mention
have	O
to	O
hold	O
the	O
entire	O
file	O
contents	O
in	O
memory	O
in	O
order	O
to	O
store	O
it	O
into	O
the	O
result	O
list	O
,	O
it	O
also	O
has	O
to	O
read	O
the	O
file	O
to	O
the	O
very	O
end	O
before	O
it	O
returns	O
the	O
list	O
.	O
The	O
lines	B-api_mention
method	O
can	O
return	O
almost	O
immediately	O
after	O
it	O
has	O
performed	O
some	O
setup	O
,	O
leaving	O
file	O
reading	O
and	O
line	O
breaking	O
until	O
later	O
when	O
it	O
'	O
s	O
necessary	O
-	O
-	O
or	O
not	O
at	O
all	O
.	O
This	O
is	O
a	O
huge	O
benefit	O
,	O
if	O
for	O
example	O
,	O
the	O
caller	O
is	O
interested	O
only	O
in	O
the	O
first	O
ten	O
lines	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
firstTen	O
=	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Of	O
course	O
considerable	O
memory	O
space	O
can	O
be	O
saved	O
if	O
the	O
caller	O
filters	O
the	O
stream	O
to	O
return	O
only	O
lines	O
matching	O
a	O
pattern	O
,	O
etc	O
.	O
An	O
idiom	O
that	O
seems	O
to	O
be	O
emerging	O
is	O
to	O
name	O
stream	O
-	O
returning	O
methods	O
after	O
the	O
plural	O
of	O
the	O
name	O
of	O
the	O
things	O
that	O
it	O
represents	O
or	O
contains	O
,	O
without	O
a	O
get	O
prefix	O
.	O
Also	O
,	O
while	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
reasonable	O
name	O
for	O
a	O
stream	O
-	O
returning	O
method	O
when	O
there	O
is	O
only	O
one	O
possible	O
set	O
of	O
values	O
to	O
be	O
returned	O
,	O
sometimes	O
there	O
are	O
classes	O
that	O
have	O
aggregations	O
of	O
multiple	O
types	O
of	O
values	O
.	O
For	O
example	O
,	O
suppose	O
you	O
have	O
some	O
object	O
that	O
contains	O
both	O
attributes	O
and	O
elements	O
.	O
You	O
might	O
provide	O
two	O
stream	O
-	O
returning	O
APIs	O
:	O
#	O
pre	O
Question	O
-	O
28770822	O
I	O
understand	O
the	O
use	O
of	O
the	O
@	O
Native	O
annotation	O
.	O
#	O
blockquote	O
However	O
,	O
while	O
reading	O
the	O
java	O
source	O
code	O
I	O
noticed	O
that	O
in	O
the	O
class	O
Integer	B-api_mention
and	O
Long	B-api_mention
the	O
SIZE	O
constant	O
is	O
@	O
Native	O
while	O
it	O
is	O
not	O
for	O
the	O
Float	B-api_mention
,	O
Byte	B-api_mention
,	O
Double	B-api_mention
,	O
Short	B-api_mention
and	O
Character	B-api_mention
.	O
Note	O
that	O
the	O
SIZE	O
constant	O
represents	O
the	O
number	O
of	O
bits	O
used	O
to	O
represent	O
the	O
actual	O
value	O
.	O
#	O
pre	O
Edit	O
:	O
I	O
just	O
noticed	O
that	O
this	O
also	O
applies	O
for	O
MAX	O
_	O
VALUE	O
and	O
MIN	O
_	O
VALUE	O
of	O
the	O
same	O
classes	O
.	O
Edit	O
2	O
:	O
I	O
had	O
spare	O
time	O
to	O
do	O
some	O
research	O
on	O
this	O
,	O
and	O
looking	O
at	O
the	O
header	O
files	O
of	O
the	O
Long	B-api_mention
,	O
Float	B-api_mention
etc	O
.	O
classes	O
I	O
had	O
hope	O
to	O
figure	O
out	O
that	O
the	O
constants	O
were	O
not	O
present	O
in	O
the	O
other	O
headers	O
,	O
but	O
unfortunately	O
they	O
are	O
.	O
#	O
pre	O
Why	O
is	O
the	O
SIZE	O
constant	O
only	O
@	O
Native	O
for	O
Integer	B-api_mention
and	O
Long	B-api_mention
?	O
Question	O
-	O
33477695	O
,	O
answer	O
-	O
33477803	O
The	O
java	O
.	O
time	O
API	O
in	O
general	O
does	O
have	O
nanosecond	O
precision	O
.	O
For	O
example	O
:	O
#	O
pre	O
Output	O
:	O
2015	O
-	O
11	O
-	O
02T12	O
:	O
38	O
:	O
00	O
,	O
123456789	O
+	O
0000	O
However	O
,	O
it	O
'	O
s	O
the	O
clock	O
value	O
returned	O
by	O
OffsetDateTime	O
.	O
now	O
(	O
args	O
)	O
which	O
is	O
returning	O
a	O
value	O
which	O
only	O
has	O
milliseconds	O
.	O
From	O
Clock	B-api_mention
implementation	O
in	O
Java	O
8	O
:	O
#	O
blockquote	O
So	O
there	O
'	O
s	O
nothing	O
inherently	O
imprecise	O
here	O
-	O
just	O
the	O
default	O
implementation	O
of	O
Clock	B-api_mention
using	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
could	O
potentially	O
create	O
your	O
own	O
more	O
precise	O
subclass	O
.	O
However	O
,	O
you	O
should	O
note	O
that	O
adding	O
more	O
precision	O
without	O
adding	O
more	O
accuracy	O
probably	O
isn	O
'	O
t	O
terribly	O
useful	O
.	O
(	O
There	O
are	O
times	O
when	O
it	O
might	O
be	O
,	O
admittedly	O
.	O
.	O
.	O
)	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
12619799	O
I	O
would	O
say	O
don	O
'	O
t	O
use	O
ARM	O
and	O
go	O
on	O
with	O
Closeable	B-api_mention
.	O
Use	O
method	O
like	O
,	O
#	O
pre	O
Also	O
you	O
should	O
consider	O
calling	O
close	O
of	O
BufferedWriter	B-api_mention
as	O
it	O
is	O
not	O
just	O
delegating	O
the	O
close	O
to	O
FileWriter	B-api_mention
,	O
but	O
it	O
does	O
some	O
cleanup	O
like	O
flushBuffer	B-api_mention
.	O
Question	O
-	O
29328785	O
,	O
answer	O
-	O
29330741	O
It	O
'	O
s	O
not	O
so	O
hard	O
to	O
track	O
down	O
the	O
reason	O
for	O
the	O
odd	O
behavior	O
.	O
The	O
divide	O
call	O
goes	O
to	O
#	O
pre	O
This	O
,	O
internally	O
,	O
delegates	O
to	O
another	O
divide	O
method	O
,	O
based	O
on	O
the	O
rounding	O
mode	O
:	O
#	O
pre	O
In	O
this	O
case	O
,	O
the	O
last	O
call	O
applies	O
.	O
Note	O
that	O
the	O
intVal	O
(	O
which	O
is	O
a	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
)	O
is	O
passed	O
directly	O
to	O
this	O
method	O
as	O
the	O
first	O
argument	O
:	O
#	O
pre	O
Finally	O
,	O
the	O
path	O
to	O
the	O
second	O
divideAndRound	O
is	O
taken	O
here	O
,	O
again	O
passing	O
the	O
dividend	O
on	O
(	O
which	O
was	O
the	O
intVal	O
of	O
the	O
original	O
BigDecimal	B-api_mention
)	O
,	O
ending	O
up	O
with	O
this	O
code	O
:	O
#	O
pre	O
And	O
this	O
is	O
where	O
the	O
error	O
is	O
introduced	O
:	O
The	O
mdivididend	O
is	O
a	O
mutable	O
BigInteger	B-api_mention
,	O
that	O
was	O
created	O
as	O
a	O
mutable	O
view	O
on	O
the	O
mag	O
array	O
of	O
the	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
x	O
from	O
the	O
original	O
call	O
.	O
The	O
division	O
modifies	O
the	O
mag	O
field	O
,	O
and	O
thus	O
,	O
the	O
state	O
of	O
the	O
(	O
now	O
not	O
-	O
so	O
-	O
immutable	O
)	O
BigDecimal	B-api_mention
.	O
This	O
is	O
clearly	O
a	O
bug	O
in	O
the	O
implementation	O
of	O
one	O
of	O
the	O
divide	O
methods	O
.	O
I	O
already	O
started	O
tracking	O
the	O
change	O
sets	O
of	O
the	O
OpenJDK	O
,	O
but	O
have	O
not	O
yet	O
spotted	O
the	O
definite	O
culprit	O
.	O
(	O
Edit	O
:	O
See	O
updates	O
below	O
)	O
(	O
A	O
side	O
note	O
:	O
Calling	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
doing	O
the	O
division	O
does	O
not	O
really	O
avoid	O
,	O
but	O
only	O
hide	O
the	O
bug	O
:	O
It	O
causes	O
a	O
string	O
cache	O
of	O
the	O
correct	O
state	O
to	O
be	O
created	O
internally	O
.	O
The	O
right	O
value	O
is	O
printed	O
,	O
but	O
the	O
internal	O
state	O
is	O
still	O
wrong	O
-	O
which	O
is	O
concerning	O
,	O
to	O
say	O
the	O
least	O
.	O
.	O
.	O
)	O
#	O
blockquote	O
Question	O
-	O
10904911	O
,	O
answer	O
-	O
10904956	O
What	O
you	O
want	O
is	O
the	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
There	O
is	O
a	O
static	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
helper	O
method	O
for	O
every	O
different	O
primitive	O
java	O
type	O
;	O
the	O
one	O
for	O
int	O
[	O
]	O
says	O
this	O
:	O
#	O
blockquote	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276463	O
If	O
all	O
of	O
the	O
streams	O
have	O
been	O
instantiated	O
then	O
closing	O
only	O
the	O
outermost	O
is	O
just	O
fine	O
.	O
The	O
documentation	O
on	O
Closeable	B-api_mention
interface	O
states	O
that	O
close	O
method	O
:	O
#	O
blockquote	O
The	O
releasing	O
system	O
resources	O
includes	O
closing	O
streams	O
.	O
It	O
also	O
states	O
that	O
:	O
#	O
blockquote	O
So	O
if	O
you	O
close	O
them	O
explicitly	O
afterwards	O
,	O
nothing	O
wrong	O
will	O
happen	O
.	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
17909839	O
The	O
correct	O
way	O
to	O
do	O
this	O
is	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
I	O
'	O
d	O
like	O
to	O
add	O
to	O
the	O
other	O
great	O
answers	O
here	O
and	O
explain	O
how	O
you	O
could	O
have	O
used	O
the	O
Javadocs	O
to	O
answer	O
your	O
question	O
.	O
The	O
Javadoc	O
for	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
no	O
arguments	O
)	O
is	O
here	O
.	O
As	O
you	O
can	O
see	O
,	O
this	O
method	O
returns	O
an	O
Object	B-api_mention
[	O
]	O
and	O
not	O
String	B-api_mention
[	O
]	O
which	O
is	O
an	O
array	O
of	O
the	O
runtime	O
type	O
of	O
your	O
list	O
:	O
#	O
blockquote	O
Right	O
below	O
that	O
method	O
,	O
though	O
,	O
is	O
the	O
Javadoc	O
for	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
As	O
you	O
can	O
see	O
,	O
this	O
method	O
returns	O
a	O
T	O
[	O
]	O
where	O
T	O
is	O
the	O
type	O
of	O
the	O
array	O
you	O
pass	O
in	O
.	O
At	O
first	O
this	O
seems	O
like	O
what	O
you	O
'	O
re	O
looking	O
for	O
,	O
but	O
it	O
'	O
s	O
unclear	O
exactly	O
why	O
you	O
'	O
re	O
passing	O
in	O
an	O
array	O
(	O
are	O
you	O
adding	O
to	O
it	O
,	O
using	O
it	O
for	O
just	O
the	O
type	O
,	O
etc	O
)	O
.	O
The	O
documentation	O
makes	O
it	O
clear	O
that	O
the	O
purpose	O
of	O
the	O
passed	O
array	O
is	O
essentially	O
to	O
define	O
the	O
type	O
of	O
array	O
to	O
return	O
(	O
which	O
is	O
exactly	O
your	O
use	O
case	O
)	O
:	O
#	O
blockquote	O
Of	O
course	O
,	O
an	O
understanding	O
of	O
generics	O
(	O
as	O
described	O
in	O
the	O
other	O
answers	O
)	O
is	O
required	O
to	O
really	O
understand	O
the	O
difference	O
between	O
these	O
two	O
methods	O
.	O
Nevertheless	O
,	O
if	O
you	O
first	O
go	O
to	O
the	O
Javadocs	O
,	O
you	O
will	O
usually	O
find	O
your	O
answer	O
and	O
then	O
see	O
for	O
yourself	O
what	O
else	O
you	O
need	O
to	O
learn	O
(	O
if	O
you	O
really	O
do	O
)	O
.	O
Also	O
note	O
that	O
reading	O
the	O
Javadocs	O
here	O
helps	O
you	O
to	O
understand	O
what	O
the	O
structure	O
of	O
the	O
array	O
you	O
pass	O
in	O
should	O
be	O
.	O
Though	O
it	O
may	O
not	O
really	O
practically	O
matter	O
,	O
you	O
should	O
not	O
pass	O
in	O
an	O
empty	O
array	O
like	O
this	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Because	O
,	O
from	O
the	O
doc	O
,	O
this	O
implementation	O
checks	O
if	O
the	O
array	O
is	O
large	O
enough	O
to	O
contain	O
the	O
collection	O
;	O
if	O
not	O
,	O
it	O
allocates	O
a	O
new	O
array	O
of	O
the	O
correct	O
size	O
and	O
type	O
(	O
using	O
reflection	O
)	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
the	O
extra	O
overhead	O
in	O
creating	O
a	O
new	O
array	O
when	O
you	O
could	O
easily	O
pass	O
in	O
the	O
size	O
.	O
As	O
is	O
usually	O
the	O
case	O
,	O
the	O
Javadocs	O
provide	O
you	O
with	O
a	O
wealth	O
of	O
information	O
and	O
direction	O
.	O
Hey	O
wait	O
a	O
minute	O
,	O
what	O
'	O
s	O
reflection	O
?	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31188818	O
Ironically	O
default	O
methods	O
in	O
interfaces	O
were	O
introduced	O
to	O
allow	O
existing	O
libraries	O
using	O
those	O
interfaces	O
not	O
to	O
break	O
,	O
while	O
introducing	O
massive	O
new	O
functionality	O
in	O
the	O
interfaces	O
.	O
(	O
backward	O
compatibility	O
.	O
)	O
Conflicts	O
like	O
that	O
sort	O
method	O
might	O
arise	O
.	O
Something	O
to	O
pay	O
for	O
the	O
extra	O
functionality	O
.	O
In	O
your	O
case	O
also	O
something	O
to	O
investigate	O
(	O
should	O
new	O
functionality	O
be	O
used	O
instead	O
?	O
)	O
.	O
Java	O
forward	O
compatibility	O
breaks	O
are	O
little	O
,	O
more	O
in	O
its	O
typing	O
system	O
,	O
which	O
was	O
constantly	O
enlarged	O
.	O
First	O
with	O
generic	O
types	O
and	O
now	O
with	O
inferred	O
types	O
from	O
functional	O
interfaces	O
.	O
From	O
version	O
to	O
version	O
and	O
from	O
compiler	O
to	O
compiler	O
there	O
were	O
slight	O
differences	O
.	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667354	O
Enum	O
is	O
just	O
a	O
little	O
bit	O
special	O
class	O
.	O
Enums	O
can	O
store	O
additional	O
fields	O
,	O
implement	O
methods	O
etc	O
.	O
For	O
example	O
#	O
pre	O
Now	O
you	O
can	O
say	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
see	O
output	O
:	O
a	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
33687544	O
For	O
HTML	O
response	O
below	O
code	O
can	O
be	O
used	O
bufString	O
.	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
24547673	O
,	O
answer	O
-	O
24547831	O
It	O
'	O
s	O
a	O
curious	O
omission	O
.	O
You	O
would	O
have	O
to	O
mark	O
the	O
field	O
as	O
transient	O
and	O
provide	O
your	O
own	O
custom	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
wrote	O
the	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
result	O
itself	O
,	O
and	O
a	O
readObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
restored	O
the	O
Optional	B-api_mention
by	O
reading	O
that	O
result	O
from	O
the	O
stream	O
.	O
Not	O
forgetting	O
to	O
call	O
defaultWriteObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
defaultReadObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
respectively	O
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
7520464	O
In	O
general	O
,	O
the	O
answer	O
to	O
your	O
question	O
is	O
"	O
yes	O
"	O
,	O
but	O
.	O
.	O
.	O
#	O
li	O
equals	B-api_mention
will	O
only	O
compare	O
what	O
it	O
is	O
written	O
to	O
compare	O
,	O
no	O
more	O
,	O
no	O
less	O
.	O
#	O
li	O
if	O
a	O
class	O
does	O
not	O
override	O
the	O
equals	O
method	O
,	O
then	O
it	O
defaults	O
to	O
the	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
closest	O
parent	O
class	O
that	O
has	O
overridden	O
this	O
method	O
.	O
#	O
li	O
If	O
no	O
parent	O
classes	O
have	O
provided	O
an	O
override	O
,	O
then	O
it	O
defaults	O
to	O
the	O
method	O
from	O
the	O
ultimate	O
parent	O
class	O
,	O
Object	B-api_mention
,	O
and	O
so	O
you	O
'	O
re	O
left	O
with	O
the	O
Object	B-api_mention
#	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Per	O
the	O
Object	O
API	O
this	O
is	O
the	O
same	O
as	O
=	O
=	O
;	O
that	O
is	O
,	O
it	O
returns	O
true	O
if	O
and	O
only	O
if	O
both	O
variables	O
refer	O
to	O
the	O
same	O
object	O
,	O
if	O
their	O
references	O
are	O
one	O
and	O
the	O
same	O
.	O
Thus	O
you	O
will	O
be	O
testing	O
for	O
object	O
equality	O
and	O
not	O
functional	O
equality	O
.	O
#	O
li	O
Always	O
remember	O
to	O
override	O
hashCode	B-api_mention
if	O
you	O
override	O
equals	O
so	O
as	O
not	O
to	O
"	O
break	O
the	O
contract	O
"	O
.	O
As	O
per	O
the	O
API	O
,	O
the	O
result	O
returned	O
from	O
the	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
two	O
objects	O
must	O
be	O
the	O
same	O
if	O
their	O
equals	O
methods	O
shows	O
that	O
they	O
are	O
equivalent	O
.	O
The	O
converse	O
is	O
not	O
necessarily	O
true	O
.	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
15633542	O
Nice	O
question	O
.	O
I	O
'	O
ve	O
got	O
of	O
the	O
following	O
five	O
6	O
methods	O
to	O
do	O
it	O
.	O
#	O
pre	O
#	O
blockquote	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
in	O
turn	O
sets	O
the	O
value	O
char	O
array	O
.	O
#	O
pre	O
On	O
the	O
other	O
hand	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
the	O
following	O
package	O
private	O
constructor	O
.	O
#	O
pre	O
Source	O
code	O
from	O
String	B-api_mention
.	O
java	O
in	O
Java	O
8	O
source	O
code	O
#	O
blockquote	O
#	O
li	O
Java	O
:	O
:	O
How	O
to	O
convert	O
primitive	O
char	O
to	O
String	B-api_mention
in	O
Java	O
#	O
li	O
How	O
to	O
convert	O
Char	B-api_mention
to	O
String	B-api_mention
in	O
Java	O
with	O
Example	O
Question	O
-	O
27683759	O
,	O
answer	O
-	O
27684042	O
In	O
a	O
nutshell	O
,	O
this	O
creates	O
an	O
empty	O
,	O
immutable	O
list	O
of	O
strings	O
.	O
Let	O
'	O
s	O
look	O
at	O
the	O
expression	O
bit	O
by	O
bit	O
.	O
Collections	B-api_mention
is	O
the	O
name	O
of	O
a	O
class	O
.	O
From	O
the	O
Javadoc	O
:	O
#	O
blockquote	O
emptyList	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
the	O
name	O
of	O
a	O
static	O
method	O
defined	O
in	O
the	O
Collections	B-api_mention
class	O
(	O
Javadoc	O
)	O
.	O
It	O
is	O
a	O
generic	O
method	O
,	O
and	O
the	O
<	O
String	O
>	O
in	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
specifies	O
the	O
generic	O
type	O
argument	O
.	O
The	O
method	O
returns	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
in	O
this	O
case	O
is	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
:	O
a	O
list	O
of	O
strings	O
.	O
More	O
specifically	O
,	O
it	O
returns	O
an	O
empty	O
,	O
immutable	O
list	O
of	O
strings	O
.	O
Question	O
-	O
29280857	O
,	O
answer	O
-	O
29382161	O
As	O
stated	O
previously	O
,	O
you	O
should	O
lock	O
on	O
both	O
accounts	O
,	O
always	O
in	O
the	O
same	O
order	O
.	O
The	O
key	O
part	O
,	O
however	O
,	O
is	O
ensuring	O
both	O
high	O
granularity	O
and	O
singularity	O
across	O
the	O
VM	O
instance	O
.	O
This	O
can	O
be	O
done	O
using	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
12576156	O
,	O
answer	O
-	O
12576308	O
Have	O
you	O
considered	O
@	O
Autowired	O
ing	O
the	O
constructor	O
or	O
a	O
setter	O
and	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
ing	O
in	O
the	O
body	O
?	O
#	O
pre	O
I	O
tend	O
to	O
prefer	O
doing	O
my	O
autowiring	O
in	O
one	O
of	O
these	O
ways	O
to	O
enhance	O
the	O
testability	O
of	O
my	O
code	O
.	O
Question	O
-	O
12539365	O
,	O
answer	O
-	O
12562433	O
This	O
is	O
great	O
question	O
!	O
I	O
think	O
the	O
root	O
cause	O
of	O
it	O
is	O
the	O
following	O
,	O
we	O
are	O
using	O
JUnit	O
not	O
only	O
for	O
unit	O
testing	O
.	O
So	O
the	O
question	O
should	O
be	O
splited	O
up	O
:	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
black	O
-	O
box	O
unit	O
-	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
white	O
-	O
box	O
unit	O
-	O
testing	O
?	O
so	O
if	O
we	O
will	O
ignore	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
,	O
the	O
question	O
can	O
be	O
rephrased	O
"	O
Using	O
white	O
-	O
box	O
unit	O
-	O
testing	O
with	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
creates	O
great	O
couple	O
between	O
unit	O
test	O
and	O
my	O
could	O
implementation	O
,	O
can	O
I	O
make	O
some	O
"	O
grey	O
-	O
box	O
"	O
unit	O
-	O
testing	O
and	O
what	O
rules	O
of	O
thumb	O
I	O
should	O
use	O
for	O
this	O
"	O
.	O
Now	O
,	O
let	O
'	O
s	O
go	O
through	O
all	O
of	O
this	O
step	O
-	O
by	O
-	O
step	O
.	O
*	O
-	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
*	O
I	O
think	O
the	O
answer	O
is	O
clearly	O
no	O
,	O
moreover	O
you	O
shouldn	O
'	O
t	O
use	O
mocks	O
for	O
this	O
.	O
Your	O
test	O
should	O
be	O
as	O
close	O
to	O
real	O
application	O
as	O
possible	O
.	O
You	O
are	O
testing	O
complete	O
use	O
case	O
,	O
not	O
isolated	O
part	O
of	O
the	O
application	O
.	O
*	O
black	O
-	O
box	O
vs	O
white	O
-	O
box	O
unit	O
-	O
testing	O
black	O
-	O
box	O
state	O
If	O
you	O
are	O
using	O
white	O
-	O
box	O
approach	O
what	O
is	O
you	O
really	O
doing	O
,	O
you	O
'	O
re	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
.	O
In	O
this	O
approach	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
should	O
verify	O
that	O
your	O
unit	O
behaves	O
as	O
you	O
'	O
re	O
expecting	O
to	O
.	O
rules	O
of	O
thumbs	O
for	O
grey	O
-	O
box	O
-	O
testing	O
The	O
problem	O
with	O
white	O
-	O
box	O
testing	O
is	O
it	O
creates	O
a	O
high	O
coupling	O
.	O
One	O
possible	O
solution	O
is	O
to	O
do	O
grey	O
-	O
box	O
-	O
testing	O
,	O
not	O
white	O
-	O
box	O
-	O
testing	O
.	O
This	O
is	O
sort	O
of	O
combination	O
of	O
black	O
&	O
white	O
box	O
testing	O
.	O
You	O
are	O
really	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
like	O
in	O
white	O
-	O
box	O
testing	O
,	O
but	O
in	O
general	O
you	O
make	O
it	O
implementation	O
-	O
agnostic	O
when	O
possible	O
.	O
When	O
it	O
is	O
possible	O
,	O
you	O
will	O
just	O
make	O
a	O
check	O
like	O
in	O
black	O
-	O
box	O
case	O
,	O
just	O
asserts	O
that	O
output	O
is	O
what	O
is	O
your	O
expected	O
to	O
be	O
.	O
So	O
,	O
the	O
essence	O
of	O
your	O
question	O
is	O
when	O
it	O
is	O
possible	O
.	O
This	O
is	O
really	O
hard	O
.	O
I	O
don	O
'	O
t	O
have	O
a	O
good	O
example	O
,	O
but	O
I	O
can	O
give	O
you	O
to	O
examples	O
.	O
In	O
the	O
case	O
that	O
was	O
mentioned	O
above	O
with	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
vs	O
equalsIgnoreCase	B-api_mention
(	I-api_mention
)	I-api_mention
you	O
shouldn	O
'	O
t	O
call	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
just	O
assert	O
the	O
output	O
.	O
If	O
you	O
couldn	O
'	O
t	O
do	O
it	O
,	O
break	O
down	O
your	O
code	O
to	O
the	O
smaller	O
unit	O
,	O
until	O
you	O
can	O
do	O
it	O
.	O
On	O
the	O
other	O
hand	O
,	O
suppose	O
you	O
have	O
some	O
@	O
Service	O
and	O
you	O
are	O
writting	O
@	O
Web	O
-	O
Service	O
that	O
is	O
essentially	O
wrapper	O
upon	O
your	O
@	O
Service	O
-	O
it	O
delegates	O
all	O
calls	O
to	O
the	O
@	O
Service	O
(	O
and	O
making	O
some	O
extra	O
error	O
handling	O
)	O
.	O
In	O
this	O
case	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
shouldn	O
'	O
t	O
duplicate	O
all	O
of	O
your	O
checks	O
that	O
you	O
did	O
for	O
the	O
@	O
Serive	O
,	O
verifying	O
that	O
you	O
'	O
re	O
calling	O
to	O
@	O
Service	O
with	O
correct	O
parammeter	O
list	O
is	O
sufficient	O
.	O
Question	O
-	O
31202946	O
Why	O
was	O
the	O
Thread	B-api_mention
class	O
implemented	O
as	O
a	O
regular	O
class	O
and	O
not	O
an	O
abstract	O
class	O
with	O
run	O
(	O
args	O
)	O
method	O
being	O
abstract	O
.	O
Will	O
it	O
possibly	O
introduce	O
any	O
problems	O
?	O
Or	O
does	O
it	O
have	O
any	O
use	O
in	O
being	O
this	O
way	O
?	O
Also	O
,	O
the	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
supposed	O
to	O
be	O
a	O
very	O
specific	O
method	O
whose	O
functionality	O
cannot	O
be	O
implemented	O
by	O
any	O
other	O
class	O
(	O
If	O
I	O
am	O
not	O
wrong	O
)	O
.	O
And	O
hence	O
I	O
guess	O
the	O
final	O
keyword	O
would	O
be	O
apt	O
for	O
this	O
more	O
than	O
any	O
other	O
method	O
.	O
But	O
I	O
am	O
able	O
to	O
override	O
this	O
method	O
and	O
use	O
it	O
as	O
I	O
like	O
,	O
#	O
pre	O
It	O
obviously	O
only	O
printed	O
,	O
#	O
blockquote	O
Is	O
there	O
any	O
use	O
in	O
overriding	O
other	O
than	O
confusing	O
the	O
engineer	O
replacing	O
you	O
?	O
If	O
not	O
,	O
why	O
was	O
the	O
method	O
not	O
declared	O
final	O
in	O
Thread	B-api_mention
class	O
?	O
Question	O
-	O
23453287	O
,	O
answer	O
-	O
23456085	O
It	O
will	O
be	O
hard	O
to	O
find	O
and	O
identify	O
"	O
THE	O
"	O
answer	O
,	O
for	O
the	O
resons	O
mentioned	O
in	O
the	O
comments	O
from	O
@	O
EJP	O
:	O
There	O
are	O
roughly	O
2	O
(	O
+	O
/	O
-	O
2	O
)	O
people	O
in	O
the	O
world	O
who	O
can	O
give	O
the	O
definite	O
answer	O
at	O
all	O
.	O
And	O
in	O
doubt	O
,	O
the	O
answer	O
might	O
just	O
be	O
something	O
like	O
"	O
Supporting	O
final	O
default	O
methods	O
did	O
not	O
seem	O
to	O
be	O
worth	O
the	O
effort	O
of	O
restructuring	O
the	O
internal	O
call	O
resolution	O
mechanisms	O
"	O
.	O
This	O
is	O
speculation	O
,	O
of	O
course	O
,	O
but	O
it	O
is	O
at	O
least	O
backed	O
by	O
subtle	O
evidences	O
,	O
like	O
this	O
Statement	O
(	O
by	O
one	O
of	O
the	O
two	O
persons	O
)	O
in	O
the	O
OpenJDK	O
mailing	O
list	O
:	O
#	O
blockquote	O
and	O
trivial	O
facts	O
like	O
that	O
a	O
method	O
is	O
simply	O
not	O
considered	O
to	O
be	O
a	O
(	O
really	O
)	O
final	O
method	O
when	O
it	O
is	O
a	O
default	O
method	O
,	O
as	O
currently	O
implemented	O
in	O
the	O
Method	B-api_mention
:	I-api_mention
:	I-api_mention
is	I-api_mention
_	I-api_mention
final	I-api_mention
_	I-api_mention
method	I-api_mention
method	O
in	O
the	O
OpenJDK	O
.	O
Further	O
really	O
"	O
authorative	O
"	O
information	O
is	O
indeed	O
hard	O
to	O
find	O
,	O
even	O
with	O
excessive	O
websearches	O
and	O
by	O
reading	O
commit	O
logs	O
.	O
I	O
thought	O
that	O
it	O
might	O
be	O
related	O
to	O
potential	O
ambiguities	O
during	O
the	O
resolution	O
of	O
interface	O
method	O
calls	O
with	O
the	O
invokeinterface	B-api_mention
instruction	O
and	O
and	O
class	O
method	O
calls	O
,	O
corresponding	O
to	O
the	O
invokevirtual	B-api_mention
instruction	O
:	O
For	O
the	O
invokevirtual	B-api_mention
instruction	O
,	O
there	O
may	O
be	O
a	O
simple	O
vtable	O
lookup	O
,	O
because	O
the	O
method	O
must	O
either	O
be	O
inherited	O
from	O
a	O
superclass	O
,	O
or	O
implemented	O
by	O
the	O
class	O
directly	O
.	O
In	O
contrast	O
to	O
that	O
,	O
an	O
invokeinterface	B-api_mention
call	O
must	O
examine	O
the	O
respective	O
call	O
site	O
to	O
find	O
out	O
which	O
interface	O
this	O
call	O
actually	O
refers	O
to	O
(	O
this	O
is	O
explained	O
in	O
more	O
detail	O
in	O
the	O
InterfaceCalls	O
page	O
of	O
the	O
HotSpot	O
Wiki	O
)	O
.	O
However	O
,	O
final	O
methods	O
do	O
either	O
not	O
get	O
inserted	O
into	O
the	O
vtable	O
at	O
all	O
,	O
or	O
replace	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
.	O
Line	O
333	O
)	O
,	O
and	O
similarly	O
,	O
default	O
methods	O
are	O
replacing	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
,	O
Line	O
202	O
)	O
.	O
So	O
the	O
actual	O
reason	O
(	O
and	O
thus	O
,	O
the	O
answer	O
)	O
must	O
be	O
hidden	O
deeper	O
inside	O
the	O
(	O
rather	O
complex	O
)	O
method	O
call	O
resolution	O
mechanisms	O
,	O
but	O
maybe	O
these	O
references	O
will	O
nevertheless	O
be	O
considered	O
as	O
being	O
helpful	O
,	O
be	O
it	O
only	O
for	O
others	O
that	O
manage	O
to	O
derive	O
the	O
actual	O
answer	O
from	O
that	O
.	O
Question	O
-	O
25850328	O
I	O
was	O
being	O
taught	O
that	O
Marker	O
interface	O
in	O
Java	O
is	O
an	O
empty	O
interface	O
and	O
is	O
used	O
to	O
signal	O
to	O
compiler	O
or	O
JVM	O
that	O
the	O
objects	O
of	O
the	O
class	O
implementing	O
this	O
interface	O
must	O
be	O
treated	O
in	O
a	O
special	O
way	O
,	O
like	O
serializing	O
,	O
cloning	O
,	O
etc	O
.	O
But	O
lately	O
I	O
have	O
learned	O
that	O
it	O
actually	O
has	O
nothing	O
to	O
do	O
with	O
the	O
compiler	O
or	O
the	O
JVM	O
.	O
For	O
example	O
,	O
in	O
case	O
of	O
Serializable	B-api_mention
interface	O
the	O
method	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
ObjectOutputStream	B-api_mention
does	O
something	O
like	O
instanceOf	B-api_mention
Serializable	I-api_mention
to	O
detect	O
whether	O
the	O
class	O
implements	O
Serializable	B-api_mention
&	O
throws	O
NotSerializableException	B-api_mention
accordingly	O
.	O
Everything	O
is	O
handled	O
in	O
the	O
code	O
and	O
this	O
seems	O
to	O
be	O
a	O
design	O
-	O
pattern	O
so	O
I	O
think	O
we	O
can	O
define	O
our	O
own	O
marker	O
interfaces	O
.	O
Now	O
my	O
doubts	O
:	O
#	O
li	O
Is	O
the	O
definition	O
of	O
a	O
marker	O
interface	O
mentioned	O
above	O
in	O
1st	O
point	O
wrong	O
?	O
How	O
can	O
we	O
define	O
a	O
Marker	B-api_mention
interface	O
then	O
?	O
#	O
li	O
And	O
instead	O
of	O
using	O
the	O
instanceOf	B-api_mention
operator	O
why	O
can	O
'	O
t	O
the	O
method	O
be	O
something	O
like	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
that	O
there	O
is	O
a	O
compile	O
-	O
time	O
type	O
checking	O
rather	O
than	O
runtime	O
?	O
#	O
li	O
How	O
are	O
Annotations	B-api_mention
better	O
than	O
Marker	B-api_mention
Interfaces	O
?	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29502668	O
#	O
blockquote	O
It	O
'	O
s	O
checking	O
simple	O
equality	O
(	O
likely	O
for	O
the	O
purpose	O
of	O
a	O
micro	O
-	O
optimization	O
,	O
but	O
more	O
on	O
that	O
later	O
)	O
.	O
The	O
unusual	O
casting	O
is	O
necessary	O
because	O
Class	O
<	O
T	O
>	O
(	O
the	O
type	O
of	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
and	O
Class	O
<	O
T	O
>	O
are	O
incomparable	O
types	O
.	O
Basically	O
,	O
for	O
an	O
equality	O
comparison	O
with	O
=	O
=	O
to	O
compile	O
,	O
one	O
of	O
the	O
sides	O
has	O
to	O
be	O
a	O
subtype	O
or	O
supertype	O
of	O
the	O
other	O
.	O
I	O
.	O
e	O
.	O
we	O
can	O
'	O
t	O
do	O
:	O
#	O
pre	O
The	O
rules	O
for	O
generic	O
types	O
are	O
a	O
bit	O
more	O
complicated	O
and	O
there	O
are	O
a	O
few	O
cases	O
where	O
a	O
comparison	O
doesn	O
'	O
t	O
compile	O
,	O
but	O
it	O
may	O
still	O
evaluate	O
to	O
true	O
.	O
The	O
reason	O
Class	O
<	O
T	O
>	O
is	O
not	O
a	O
supertype	O
of	O
Class	O
<	O
T	O
>	O
,	O
despite	O
Object	B-api_mention
[	O
]	O
being	O
a	O
supertype	O
of	O
all	O
object	O
array	O
types	O
,	O
is	O
that	O
Java	O
generics	O
are	O
invariant	O
without	O
the	O
presence	O
of	O
a	O
wildcard	O
.	O
Another	O
way	O
to	O
do	O
the	O
comparison	O
would	O
be	O
:	O
(	O
newType	O
=	O
=	O
(	O
Class	O
<	O
T	O
>	O
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
#	O
blockquote	O
#	O
li	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
creates	O
an	O
array	O
the	O
normal	O
way	O
,	O
of	O
a	O
type	O
that	O
is	O
statically	O
known	O
.	O
Remember	O
,	O
the	O
code	O
has	O
just	O
checked	O
that	O
T	O
[	O
]	O
is	O
Object	B-api_mention
[	O
]	O
.	O
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
reflection	O
to	O
dynamically	O
create	O
an	O
array	O
of	O
the	O
Class	O
type	O
passed	O
in	O
.	O
#	O
blockquote	O
An	O
operation	O
using	O
reflection	O
is	O
generally	O
slower	O
than	O
its	O
non	O
-	O
reflective	O
counterpart	O
.	O
The	O
reflection	O
tutorial	O
says	O
:	O
#	O
blockquote	O
Java	O
SE	O
is	O
filled	O
with	O
micro	O
-	O
optimization	O
like	O
this	O
.	O
The	O
writers	O
of	O
SE	O
try	O
to	O
squeeze	O
everything	O
they	O
can	O
out	O
of	O
it	O
.	O
But	O
I	O
wouldn	O
'	O
t	O
be	O
worried	O
about	O
a	O
performance	O
hit	O
in	O
this	O
case	O
:	O
newInstance	O
and	O
copyOf	B-api_mention
are	O
HotSpot	O
intrinsics	O
.	O
This	O
means	O
that	O
ideally	O
calls	O
to	O
these	O
methods	O
get	O
replaced	O
with	O
machine	O
-	O
specific	O
assembly	O
.	O
Anecdotally	O
,	O
I	O
ran	O
some	O
tests	O
and	O
found	O
the	O
difference	O
between	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
and	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
be	O
negligible	O
.	O
The	O
code	O
in	O
the	O
question	O
is	O
probably	O
a	O
relic	O
,	O
although	O
it	O
may	O
still	O
be	O
useful	O
on	O
less	O
well	O
-	O
equipped	O
JVMs	O
.	O
Reflection	O
can	O
also	O
be	O
disabled	O
in	O
certain	O
contexts	O
with	O
strict	O
security	O
(	O
such	O
as	O
an	O
applet	O
)	O
,	O
but	O
not	O
typically	O
for	O
a	O
normal	O
desktop	O
application	O
.	O
#	O
blockquote	O
In	O
general	O
,	O
you	O
will	O
probably	O
never	O
use	O
this	O
overload	O
.	O
This	O
overload	O
is	O
only	O
useful	O
if	O
you	O
want	O
to	O
change	O
the	O
type	O
of	O
the	O
array	O
.	O
#	O
li	O
Widening	O
:	O
#	O
pre	O
#	O
li	O
Narrowing	O
:	O
#	O
pre	O
It	O
'	O
s	O
more	O
typical	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
T	I-api_mention
[	I-api_mention
]	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
14833008	O
,	O
answer	O
-	O
14833048	O
You	O
need	O
to	O
escape	O
the	O
dot	O
if	O
you	O
want	O
to	O
split	O
on	O
a	O
literal	O
dot	O
:	O
String	B-api_mention
extensionRemoved	O
=	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
Otherwise	O
you	O
are	O
splitting	O
on	O
the	O
regex	O
.	O
,	O
which	O
means	O
"	O
any	O
character	O
"	O
.	O
Note	O
the	O
double	O
backslash	O
needed	O
to	O
create	O
a	O
single	O
backslash	O
in	O
the	O
regex	O
.	O
You	O
'	O
re	O
getting	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
because	O
your	O
input	O
string	O
is	O
just	O
a	O
dot	O
,	O
ie	O
StringLiteral	O
,	O
which	O
is	O
an	O
edge	O
case	O
that	O
produces	O
an	O
empty	O
array	O
when	O
split	O
on	O
dot	O
;	O
split	B-api_mention
(	I-api_mention
regex	I-api_mention
)	I-api_mention
removes	O
all	O
trailing	O
blanks	O
from	O
the	O
result	O
,	O
but	O
since	O
splitting	O
a	O
dot	O
on	O
a	O
dot	O
leaves	O
only	O
two	O
blanks	O
,	O
after	O
trailing	O
blanks	O
are	O
removed	O
you	O
'	O
re	O
left	O
with	O
an	O
empty	O
array	O
.	O
To	O
avoid	O
getting	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
for	O
this	O
edge	O
case	O
,	O
use	O
the	O
overloaded	O
version	O
of	O
split	B-api_mention
(	I-api_mention
regex	I-api_mention
,	I-api_mention
limit	I-api_mention
)	I-api_mention
,	O
which	O
has	O
a	O
second	O
parameter	O
that	O
is	O
the	O
size	O
limit	O
for	O
the	O
resulting	O
array	O
.	O
When	O
limit	O
is	O
negative	O
,	O
the	O
behaviour	O
of	O
removing	O
trailing	O
blanks	O
from	O
the	O
resulting	O
array	O
is	O
disabled	O
:	O
StringLiteral	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
returns	O
an	O
array	O
of	O
two	O
blanks	O
,	O
ie	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
ie	O
,	O
when	O
filename	O
is	O
just	O
a	O
dot	O
StringLiteral	O
,	O
calling	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
will	O
return	O
a	O
blank	O
,	O
but	O
calling	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
will	O
throw	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
.	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
4871135	O
Current	O
working	O
directory	O
is	O
defined	O
differently	O
in	O
different	O
Java	O
implementations	O
For	O
certain	O
prior	O
to	O
Java	O
7	O
there	O
was	O
no	O
consistent	O
way	O
to	O
get	O
the	O
working	O
directory	O
.	O
You	O
could	O
work	O
around	O
this	O
by	O
launching	O
Java	O
with	O
-	O
D	O
and	O
defining	O
a	O
variable	O
to	O
hold	O
the	O
info	O
Something	O
like	O
java	O
-	O
Dcom	O
.	O
mycompany	O
.	O
workingDir	O
=	O
StringLiteral	O
That	O
'	O
s	O
not	O
quite	O
right	O
,	O
but	O
you	O
get	O
the	O
idea	O
.	O
Then	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
Question	O
-	O
16232833	O
,	O
answer	O
-	O
16250729	O
change	O
your	O
return	O
type	O
to	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
then	O
you	O
can	O
use	O
below	O
for	O
400	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
for	O
correct	O
request	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
UPDATE	O
1	O
after	O
spring	O
4	O
.	O
1	O
there	O
are	O
helper	O
methods	O
in	O
ResponseEntity	B-api_mention
could	O
be	O
used	O
as	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
status	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
body	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
ok	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
8430805	O
,	O
answer	O
-	O
22332291	O
Sudheesh	O
B	O
Nair	O
'	O
s	O
has	O
a	O
nice	O
(	O
and	O
accepted	O
)	O
answer	O
on	O
the	O
question	O
,	O
which	O
i	O
think	O
should	O
have	O
a	O
better	O
alternative	O
such	O
as	O
;	O
What	O
'	O
s	O
wrong	O
with	O
measuring	O
time	O
passed	O
and	O
checking	O
if	O
TIME	O
_	O
INTERVAL	O
miliseconds	O
(	O
say	O
2000	O
)	O
passed	O
since	O
the	O
last	O
back	O
press	O
.	O
The	O
following	O
sample	O
code	O
uses	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
to	O
store	O
the	O
time	O
onBackPressed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
;	O
#	O
pre	O
Back	O
on	O
accepted	O
answer	O
critique	O
;	O
Using	O
a	O
flag	O
to	O
indicate	O
if	O
it	O
was	O
pressed	O
in	O
last	O
TIME	O
_	O
INTERVAL	O
(	O
say	O
2000	O
)	O
milliseconds	O
and	O
set	O
-	O
reset	O
is	O
via	O
Handler	B-api_mention
'	O
s	O
postDelayed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
was	O
the	O
first	O
thing	O
to	O
come	O
in	O
my	O
mind	O
.	O
But	O
the	O
postDelayed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
action	O
should	O
be	O
cancelled	O
when	O
activity	O
is	O
closing	O
,	O
removing	O
the	O
Runnable	B-api_mention
.	O
In	O
order	O
to	O
remove	O
the	O
Runnable	B-api_mention
,	O
it	O
must	O
not	O
be	O
declared	O
anonymous	O
,	O
and	O
be	O
declared	O
as	O
member	O
along	O
with	O
the	O
Handler	B-api_mention
aswell	O
.	O
Then	O
removeCallbacks	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
Handler	B-api_mention
can	O
be	O
called	O
appropriately	O
.	O
The	O
following	O
sample	O
is	O
the	O
demonstration	O
;	O
#	O
pre	O
Thanks	O
to	O
@	O
NSouth	O
for	O
contributing	O
;	O
In	O
order	O
to	O
prevent	O
toast	O
message	O
appearing	O
even	O
after	O
the	O
application	O
is	O
closed	O
,	O
Toast	O
can	O
be	O
declared	O
as	O
a	O
member	O
-	O
say	O
mExitToast	O
-	O
and	O
can	O
be	O
cancelled	O
via	O
mExitToast	O
.	B-api_mention
cancel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
just	O
before	O
super	O
.	B-api_mention
onBackPressed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
.	O
Question	O
-	O
19431234	O
Java	O
8	O
has	O
a	O
completely	O
new	O
API	O
for	O
date	O
and	O
time	O
.	O
One	O
of	O
the	O
most	O
useful	O
classes	O
in	O
this	O
API	O
is	O
LocalDateTime	B-api_mention
,	O
for	O
holding	O
a	O
timezone	O
-	O
independent	O
date	O
-	O
with	O
-	O
time	O
value	O
.	O
There	O
are	O
probably	O
millions	O
of	O
lines	O
of	O
code	O
using	O
the	O
legacy	O
class	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
for	O
this	O
purpose	O
.	O
As	O
such	O
,	O
when	O
interfacing	O
old	O
and	O
new	O
code	O
there	O
will	O
be	O
a	O
need	O
for	O
converting	O
between	O
the	O
two	O
.	O
As	O
there	O
seems	O
to	O
be	O
no	O
direct	O
methods	O
for	O
accomplishing	O
this	O
,	O
how	O
can	O
it	O
be	O
done	O
?	O
Question	O
-	O
27747562	O
In	O
the	O
following	O
code	O
,	O
a	O
dowcast	O
to	O
an	O
apparently	O
incompatible	O
type	O
passes	O
compilation	O
:	O
#	O
pre	O
Item	B-api_mention
and	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
are	O
disparate	O
types	O
so	O
the	O
cast	O
can	O
never	O
succeed	O
.	O
Why	O
did	O
the	O
compiler	O
allow	O
this	O
?	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
10786112	O
URLEncoder	B-api_mention
should	O
be	O
the	O
way	O
to	O
go	O
.	O
You	O
only	O
need	O
to	O
keep	O
in	O
mind	O
to	O
encode	O
only	O
the	O
individual	O
query	O
string	O
parameter	O
name	O
and	O
/	O
or	O
value	O
,	O
not	O
the	O
entire	O
URL	O
,	O
for	O
sure	O
not	O
the	O
query	O
string	O
parameter	O
separator	O
character	O
&	O
nor	O
the	O
parameter	O
name	O
-	O
value	O
separator	O
character	O
=	O
.	O
#	O
pre	O
Note	O
that	O
spaces	O
in	O
query	O
parameters	O
are	O
represented	O
by	O
+	O
,	O
not	O
%	O
20	O
,	O
which	O
is	O
legitimately	O
valid	O
.	O
The	O
%	O
20	O
is	O
usually	O
to	O
be	O
used	O
to	O
represent	O
spaces	O
in	O
URI	O
itself	O
(	O
the	O
part	O
before	O
the	O
URI	O
-	O
query	O
string	O
separator	O
character	O
?	O
)	O
,	O
not	O
in	O
query	O
string	O
(	O
the	O
part	O
after	O
?	O
)	O
.	O
Also	O
note	O
that	O
there	O
are	O
two	O
encode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
.	O
One	O
without	O
charset	O
argument	O
and	O
another	O
with	O
.	O
The	O
one	O
without	O
charset	O
argument	O
is	O
deprecated	O
.	O
Never	O
use	O
it	O
and	O
always	O
specify	O
the	O
charset	O
argument	O
.	O
The	O
javadoc	O
even	O
explicitly	O
recommends	O
to	O
use	O
the	O
UTF	O
-	O
8	O
encoding	O
,	O
as	O
mandated	O
by	O
RFC3986	O
and	O
W3C	O
.	O
#	O
blockquote	O
See	O
also	O
:	O
#	O
li	O
What	O
every	O
web	O
developer	O
must	O
know	O
about	O
URL	O
encoding	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
33233407	O
We	O
can	O
use	O
the	O
parseInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
Integer	B-api_mention
wrapper	O
class	O
for	O
converting	O
a	O
String	B-api_mention
value	O
to	O
an	O
integer	O
value	O
.	O
For	O
example	O
:	O
#	O
pre	O
The	O
Integer	B-api_mention
class	O
also	O
provides	O
the	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
We	O
can	O
also	O
use	O
toInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
of	O
NumberUtils	B-api_mention
Utility	O
Class	O
for	O
the	O
conversion	O
:	O
#	O
pre	O
Question	O
-	O
18448671	O
,	O
answer	O
-	O
18448685	O
If	O
you	O
want	O
to	O
modify	O
your	O
List	B-api_mention
during	O
traversal	O
,	O
then	O
you	O
need	O
to	O
use	O
the	O
Iterator	B-api_mention
.	O
And	O
then	O
you	O
can	O
use	O
iterator	O
.	B-api_mention
remove	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
remove	O
the	O
elements	O
during	O
traversal	O
.	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27950675	O
Since	O
your	O
first	O
question	O
has	O
already	O
been	O
answered	O
,	O
I	O
'	O
ll	O
answer	O
your	O
second	O
question	O
.	O
The	O
String	B-api_mention
objects	O
must	O
be	O
compared	O
character	O
by	O
character	O
,	O
because	O
though	O
equal	O
Object	B-api_mention
s	O
implies	O
equal	O
hashes	O
,	O
the	O
inverse	O
is	O
not	O
necessarily	O
true	O
.	O
As	O
Holger	O
said	O
in	O
his	O
comment	O
,	O
this	O
represents	O
a	O
hash	O
collision	O
.	O
The	O
applicable	O
specifications	O
for	O
the	O
hashcode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
are	O
as	O
follows	O
:	O
#	O
blockquote	O
This	O
means	O
that	O
in	O
order	O
for	O
them	O
to	O
guarantee	O
equality	O
,	O
the	O
comparison	O
of	O
each	O
character	O
is	O
necessary	O
in	O
order	O
for	O
them	O
to	O
confirm	O
the	O
equality	O
of	O
the	O
two	O
objects	O
.	O
They	O
start	O
by	O
comparing	O
hashCode	O
s	O
rather	O
than	O
using	O
equals	O
since	O
they	O
are	O
using	O
a	O
hash	O
table	O
for	O
the	O
references	O
,	O
and	O
this	O
improves	O
performance	O
.	O
Question	O
-	O
24630963	O
,	O
answer	O
-	O
32648397	O
I	O
wrote	O
a	O
Collector	B-api_mention
which	O
,	O
unlike	O
the	O
default	O
java	O
one	O
,	O
does	O
not	O
crash	O
when	O
you	O
have	O
null	O
values	O
:	O
#	O
pre	O
Just	O
replace	O
your	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
to	O
a	O
call	O
to	O
this	O
function	O
and	O
it	O
'	O
ll	O
fix	O
the	O
problem	O
.	O
Question	O
-	O
27625611	O
,	O
answer	O
-	O
27625722	O
Because	O
nextDouble	B-api_mention
works	O
like	O
this	O
:	O
(	O
source	O
)	O
#	O
pre	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
makes	O
x	O
random	O
bits	O
.	O
Now	O
why	O
does	O
this	O
matter	O
?	O
Because	O
about	O
half	O
the	O
numbers	O
generated	O
by	O
the	O
first	O
part	O
(	O
before	O
the	O
division	O
)	O
are	O
less	O
than	O
1L	O
<	O
<	O
52	O
,	O
and	O
therefore	O
their	O
significand	O
doesn	O
'	O
t	O
entirely	O
fill	O
the	O
53	O
bits	O
that	O
it	O
could	O
fill	O
,	O
meaning	O
the	O
least	O
significant	O
bit	O
of	O
the	O
significand	O
is	O
always	O
zero	O
for	O
those	O
.	O
Because	O
of	O
the	O
amount	O
of	O
attention	O
this	O
is	O
receiving	O
,	O
here	O
'	O
s	O
some	O
extra	O
explanation	O
of	O
what	O
a	O
double	O
in	O
Java	O
(	O
and	O
many	O
other	O
languages	O
)	O
really	O
looks	O
like	O
and	O
why	O
it	O
mattered	O
in	O
this	O
question	O
.	O
Basically	O
,	O
a	O
double	O
looks	O
like	O
this	O
:	O
(	O
source	O
)	O
#	O
img	O
A	O
very	O
important	O
detail	O
not	O
visible	O
in	O
this	O
picture	O
is	O
that	O
numbers	O
are	O
"	O
normalized	O
"	O
1	O
such	O
that	O
the	O
53	O
bit	O
fraction	O
starts	O
with	O
a	O
1	O
(	O
by	O
choosing	O
the	O
exponent	O
such	O
that	O
it	O
is	O
so	O
)	O
,	O
that	O
1	O
is	O
then	O
omitted	O
.	O
That	O
is	O
why	O
the	O
picture	O
shows	O
52	O
bits	O
for	O
the	O
fraction	O
(	O
significand	O
)	O
but	O
there	O
are	O
effectively	O
53	O
bits	O
in	O
it	O
.	O
The	O
normalization	O
means	O
that	O
if	O
in	O
the	O
code	O
for	O
nextDouble	B-api_mention
the	O
53rd	O
bit	O
is	O
set	O
,	O
that	O
bit	O
is	O
the	O
implicit	O
leading	O
1	O
and	O
it	O
goes	O
away	O
,	O
and	O
the	O
other	O
52	O
bits	O
are	O
copied	O
literally	O
to	O
the	O
significand	O
of	O
the	O
resulting	O
double	O
.	O
If	O
that	O
bit	O
is	O
not	O
set	O
however	O
,	O
the	O
remaining	O
bits	O
must	O
be	O
shifted	O
left	O
until	O
it	O
becomes	O
set	O
.	O
On	O
average	O
,	O
half	O
the	O
generated	O
numbers	O
fall	O
into	O
the	O
case	O
where	O
the	O
significand	O
was	O
not	O
shifted	O
left	O
at	O
all	O
(	O
and	O
about	O
half	O
those	O
have	O
a	O
0	O
as	O
their	O
least	O
significant	O
bit	O
)	O
,	O
and	O
the	O
other	O
half	O
is	O
shifted	O
by	O
at	O
least	O
1	O
(	O
or	O
is	O
just	O
completely	O
zero	O
)	O
so	O
their	O
least	O
significant	O
bit	O
is	O
always	O
0	O
.	O
1	O
:	O
not	O
always	O
,	O
clearly	O
it	O
cannot	O
be	O
done	O
for	O
zero	O
,	O
which	O
has	O
no	O
highest	O
1	O
.	O
These	O
numbers	O
are	O
called	O
denormal	O
or	O
subnormal	O
numbers	O
,	O
see	O
wikipedia	O
:	O
denormal	O
number	O
.	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
5243798	O
#	O
li	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
http	O
request	O
parameters	O
.	O
Those	O
passed	O
from	O
the	O
client	O
to	O
the	O
server	O
.	O
For	O
example	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
servlet	O
?	O
parameter	O
=	O
1	O
.	O
Can	O
only	O
return	O
String	B-api_mention
#	O
li	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
for	O
server	O
-	O
side	O
usage	O
only	O
-	O
you	O
fill	O
the	O
request	O
with	O
attributes	O
that	O
you	O
can	O
use	O
within	O
the	O
same	O
request	O
.	O
For	O
example	O
-	O
you	O
set	O
an	O
attribute	O
in	O
a	O
servlet	O
,	O
and	O
read	O
it	O
from	O
a	O
JSP	O
.	O
Can	O
be	O
used	O
for	O
any	O
object	O
,	O
not	O
just	O
string	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
35264580	O
Main	O
difference	O
is	O
that	O
when	O
program	O
calls	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
a	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
is	O
executed	O
in	O
new	O
Thread	B-api_mention
while	O
if	O
you	O
call	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
directly	O
no	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	O
(	O
)	O
will	O
execute	O
on	O
current	O
Thread	O
.	O
Another	O
difference	O
between	O
start	O
vs	O
run	O
in	O
Java	O
thread	O
is	O
that	O
you	O
can	O
not	O
call	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
on	O
thread	O
object	O
.	O
once	O
started	O
,	O
second	O
call	O
of	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
throw	O
IllegalStateException	B-api_mention
in	O
Java	O
while	O
you	O
can	O
call	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
.	O
Question	O
-	O
31419029	O
I	O
'	O
ve	O
tried	O
to	O
build	O
my	O
own	O
Map	B-api_mention
to	O
increase	O
the	O
performance	O
for	O
a	O
special	O
environment	O
,	O
and	O
I	O
realized	O
something	O
pretty	O
interesting	O
:	O
Creating	O
a	O
new	O
Hashmap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
faster	O
than	O
new	O
Object	B-api_mention
[	I-api_mention
2000	I-api_mention
]	I-api_mention
-	O
no	O
matter	O
in	O
which	O
order	O
I	O
execute	O
these	O
commands	O
.	O
That	O
'	O
s	O
pretty	O
confusing	O
to	O
me	O
,	O
esp	O
.	O
because	O
the	O
Hashmap	B-api_mention
constructor	O
contains	O
a	O
table	O
=	O
new	O
Entry	O
[	O
capacity	O
]	O
,	O
according	O
to	O
this	O
.	O
Is	O
there	O
something	O
wrong	O
with	O
my	O
testbench	O
?	O
#	O
pre	O
I	O
'	O
d	O
love	O
to	O
see	O
the	O
results	O
of	O
testing	O
on	O
another	O
computer	O
.	O
I	O
'	O
ve	O
got	O
no	O
clue	O
why	O
creating	O
a	O
HashMap	B-api_mention
is	O
10	O
times	O
faster	O
than	O
creating	O
a	O
Object	B-api_mention
[	I-api_mention
]	I-api_mention
.	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17832168	O
I	O
think	O
the	O
number	O
displayed	O
is	O
the	O
number	O
of	O
time	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
call	O
throws	O
the	O
Stackoverflow	O
exception	O
.	O
It	O
probably	O
depend	O
on	O
the	O
implementation	O
of	O
the	O
println	B-api_mention
and	O
the	O
number	O
of	O
stacking	O
call	O
it	O
is	O
made	O
in	O
it	O
.	O
As	O
an	O
illustration	O
:	O
The	O
main	O
(	O
args	O
)	O
call	O
trigger	O
the	O
Stackoverflow	O
exception	O
at	O
call	O
i	O
.	O
The	O
i	O
-	O
1	O
call	O
of	O
main	O
catch	O
the	O
exception	O
and	O
call	O
println	B-api_mention
which	O
trigger	O
a	O
second	O
Stackoverflow	O
.	O
cnt	O
get	O
increment	O
to	O
1	O
.	O
The	O
i	O
-	O
2	O
call	O
of	O
main	O
catch	O
now	O
the	O
exception	O
and	O
call	O
println	B-api_mention
.	O
In	O
println	B-api_mention
a	O
method	O
is	O
called	O
triggering	O
a	O
3rd	O
exception	O
.	O
cnt	O
get	O
increment	O
to	O
2	O
.	O
this	O
continue	O
until	O
println	B-api_mention
can	O
make	O
all	O
its	O
needed	O
call	O
and	O
finally	O
display	O
the	O
value	O
of	O
cnt	O
.	O
This	O
is	O
then	O
dependent	O
of	O
the	O
actual	O
implementation	O
of	O
println	B-api_mention
.	O
For	O
the	O
JDK7	O
either	O
it	O
detect	O
cycling	O
call	O
and	O
throws	O
the	O
exception	O
earlier	O
either	O
it	O
keep	O
some	O
stack	O
resource	O
and	O
throw	O
the	O
exception	O
before	O
reaching	O
the	O
limit	O
to	O
give	O
some	O
room	O
for	O
remediation	O
logic	O
either	O
the	O
println	O
implementation	O
doesn	O
'	O
t	O
make	O
calls	O
either	O
the	O
+	O
+	O
operation	O
is	O
done	O
after	O
the	O
println	B-api_mention
call	O
thus	O
is	O
by	O
pass	O
by	O
the	O
exception	O
.	O
Question	O
-	O
27430092	O
,	O
answer	O
-	O
27430172	O
A	O
possible	O
use	O
case	O
is	O
in	O
testing	O
primality	O
of	O
a	O
given	O
number	O
(	O
at	O
test	O
which	O
in	O
itself	O
has	O
many	O
uses	O
)	O
.	O
The	O
isProbablePrime	B-api_mention
algorithm	O
will	O
run	O
much	O
faster	O
than	O
an	O
exact	O
algorithm	O
,	O
so	O
if	O
the	O
number	O
fails	O
isProbablePrime	B-api_mention
,	O
then	O
one	O
need	O
not	O
go	O
to	O
the	O
expense	O
of	O
running	O
the	O
more	O
expensive	O
algorithm	O
.	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888452	O
Alternative	O
to	O
@	O
sol4me	O
'	O
s	O
solution	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Of	O
the	O
difference	O
between	O
this	O
and	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
it	O
does	O
make	O
a	O
difference	O
if	O
your	O
array	O
is	O
of	O
a	O
primitive	O
type	O
.	O
For	O
instance	O
,	O
if	O
you	O
do	O
:	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
where	O
someArray	O
is	O
a	O
long	O
[	O
]	O
,	O
it	O
will	O
return	O
a	O
LongStream	B-api_mention
.	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
on	O
the	O
other	O
hand	O
,	O
will	O
return	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
with	O
a	O
single	O
element	O
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28323553	O
One	O
of	O
the	O
main	O
benefits	O
of	O
using	O
streams	O
is	O
that	O
it	O
gives	O
the	O
ability	O
to	O
process	O
data	O
in	O
a	O
declarative	O
way	O
,	O
that	O
is	O
,	O
using	O
a	O
functional	O
style	O
of	O
programming	O
.	O
It	O
also	O
gives	O
multi	O
-	O
threading	O
capability	O
for	O
free	O
meaning	O
there	O
is	O
no	O
need	O
to	O
write	O
any	O
extra	O
multi	O
-	O
threaded	O
code	O
to	O
make	O
your	O
stream	O
concurrent	O
.	O
Assuming	O
the	O
reason	O
you	O
are	O
exploring	O
this	O
style	O
of	O
programming	O
is	O
that	O
you	O
want	O
to	O
exploit	O
these	O
benefits	O
then	O
your	O
first	O
code	O
sample	O
is	O
potentially	O
not	O
functional	O
since	O
the	O
foreach	O
method	O
is	O
classed	O
as	O
being	O
terminal	O
(	O
meaning	O
that	O
it	O
can	O
produce	O
side	O
-	O
effects	O
)	O
.	O
The	O
second	O
way	O
is	O
preferred	O
from	O
functional	O
programming	O
point	O
of	O
view	O
since	O
the	O
map	O
function	O
can	O
accept	O
stateless	O
lambda	O
functions	O
.	O
More	O
explicitly	O
,	O
the	O
lambda	O
passed	O
to	O
the	O
map	O
function	O
should	O
be	O
#	O
li	O
Non	O
-	O
interfering	O
,	O
meaning	O
that	O
the	O
function	O
should	O
not	O
alter	O
the	O
source	O
of	O
the	O
stream	O
if	O
it	O
is	O
non	O
-	O
concurrent	O
(	O
e	O
.	O
g	O
.	O
ArrayList	B-api_mention
)	O
.	O
#	O
li	O
Stateless	O
to	O
avoid	O
unexpected	O
results	O
when	O
doing	O
parallel	O
processing	O
(	O
caused	O
by	O
thread	O
scheduling	O
differences	O
)	O
.	O
Another	O
benefit	O
with	O
the	O
second	O
approach	O
is	O
if	O
the	O
stream	O
is	O
parallel	O
and	O
the	O
collector	O
is	O
concurrent	O
and	O
unordered	O
then	O
these	O
characteristics	O
can	O
provide	O
useful	O
hints	O
to	O
the	O
reduction	O
operation	O
to	O
do	O
the	O
collecting	O
concurrently	O
.	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
14534798	O
It	O
should	O
be	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
I	O
recommend	O
you	O
to	O
do	O
as	O
below	O
,	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
system	O
-	O
dependent	O
newline	O
in	O
java	O
.	O
Also	O
from	O
Java	O
7	O
there	O
'	O
s	O
a	O
method	O
that	O
returns	O
the	O
value	O
directly	O
:	O
System	B-api_mention
.	I-api_mention
lineSeparator	I-api_mention
(	I-api_mention
)	I-api_mention
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28319148	O
I	O
prefer	O
the	O
second	O
way	O
.	O
When	O
you	O
use	O
the	O
first	O
way	O
,	O
if	O
you	O
decide	O
to	O
use	O
a	O
parallel	O
stream	O
to	O
improve	O
performance	O
,	O
you	O
'	O
ll	O
have	O
no	O
control	O
over	O
the	O
order	O
in	O
which	O
the	O
elements	O
will	O
be	O
added	O
to	O
the	O
output	O
list	O
by	O
forEach	B-api_mention
.	O
When	O
you	O
use	O
toList	B-api_mention
,	O
the	O
Streams	O
API	O
will	O
preserve	O
the	O
order	O
even	O
if	O
you	O
use	O
a	O
parallel	O
stream	O
.	O
Question	O
-	O
15156857	O
I	O
have	O
a	O
method	O
with	O
a	O
void	O
return	O
type	O
.	O
It	O
can	O
also	O
throw	O
a	O
number	O
of	O
exceptions	O
so	O
I	O
'	O
d	O
like	O
to	O
test	O
those	O
exceptions	O
being	O
thrown	O
.	O
All	O
attempts	O
have	O
failed	O
with	O
the	O
same	O
reason	O
:	O
#	O
blockquote	O
Any	O
ideas	O
how	O
I	O
can	O
get	O
the	O
method	O
to	O
throw	O
a	O
specified	O
exception	O
?	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
14602062	O
,	O
answer	O
-	O
14602155	O
From	O
the	O
documentation	O
of	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
So	O
you	O
will	O
have	O
to	O
use	O
the	O
two	O
argument	O
version	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
,	I-api_mention
int	I-api_mention
limit	I-api_mention
)	I-api_mention
with	O
a	O
negative	O
value	O
:	O
String	B-api_mention
[	O
]	O
split	O
=	O
data	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Doc	O
:	O
#	O
blockquote	O
This	O
will	O
not	O
leave	O
out	O
any	O
empty	O
elements	O
,	O
including	O
the	O
trailing	O
ones	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
31838310	O
The	O
main	O
purpose	O
of	O
marker	B-api_mention
interfaces	O
is	O
to	O
create	O
special	O
types	O
where	O
types	O
themselves	O
have	O
no	O
behavior	O
of	O
their	O
own	O
.	O
#	O
pre	O
Here	O
save	O
method	O
makes	O
sure	O
that	O
only	O
the	O
objects	O
of	O
classes	O
that	O
implement	O
the	O
MarkerEntity	B-api_mention
interface	O
are	O
saved	O
,	O
for	O
other	O
types	O
InvalidEntityFoundException	B-api_mention
is	O
thrown	O
.	O
So	O
here	O
MarkerEntity	B-api_mention
marker	O
interface	O
is	O
defining	O
a	O
type	O
that	O
adds	O
special	O
behavior	O
to	O
the	O
classes	O
implementing	O
it	O
.	O
Though	O
annotations	O
can	O
also	O
used	O
now	O
to	O
mark	O
classes	O
for	O
some	O
special	O
treatments	O
but	O
marker	O
annotations	O
are	O
replacement	O
for	O
naming	O
pattern	O
not	O
for	O
Marker	B-api_mention
interfaces	O
.	O
But	O
marker	O
annotations	O
can	O
'	O
t	O
fully	O
replace	O
the	O
marker	O
interfaces	O
because	O
;	O
marker	O
interfaces	O
are	O
used	O
to	O
define	O
type	O
(	O
as	O
already	O
explained	O
above	O
)	O
where	O
as	O
marker	B-api_mention
annotations	O
do	O
not	O
.	O
Source	O
for	O
marker	O
interface	O
comment	O
Question	O
-	O
12468764	O
,	O
answer	O
-	O
24537575	O
I	O
'	O
ve	O
found	O
a	O
very	O
nice	O
and	O
concise	O
solution	O
,	O
especially	O
useful	O
when	O
you	O
cannot	O
modify	O
enum	O
classes	O
as	O
it	O
was	O
in	O
my	O
case	O
.	O
Then	O
you	O
should	O
provide	O
a	O
custom	O
ObjectMapper	B-api_mention
with	O
a	O
certain	O
feature	O
enabled	O
.	O
Those	O
features	O
are	O
available	O
since	O
Jackson	O
1	O
.	O
6	O
.	O
So	O
you	O
only	O
need	O
to	O
write	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
your	O
enum	O
.	O
#	O
pre	O
There	O
are	O
more	O
enum	O
-	O
related	O
features	O
available	O
,	O
see	O
here	O
:	O
#	O
a	O
#	O
a	O
Question	O
-	O
30384955	O
,	O
answer	O
-	O
30385343	O
This	O
happens	O
because	O
of	O
the	O
way	O
capture	O
conversion	O
works	O
:	O
#	O
blockquote	O
Note	O
the	O
end	O
bit	O
.	O
So	O
,	O
what	O
this	O
means	O
is	O
that	O
,	O
given	O
a	O
type	O
like	O
this	O
:	O
#	O
pre	O
Only	O
"	O
outside	O
"	O
wildcards	O
are	O
captured	O
.	O
The	O
Map	O
key	O
wildcard	O
is	O
captured	O
,	O
but	O
the	O
List	O
element	O
wildcard	O
is	O
not	O
.	O
This	O
is	O
why	O
,	O
for	O
example	O
,	O
we	O
can	O
add	O
to	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
but	O
not	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
The	O
placement	O
of	O
the	O
wildcard	O
is	O
what	O
matters	O
.	O
Carrying	O
this	O
over	O
to	O
TbinList	O
,	O
if	O
we	O
have	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
the	O
wildcard	O
is	O
in	O
a	O
place	O
where	O
it	O
does	O
not	O
get	O
captured	O
,	O
but	O
if	O
we	O
have	O
a	O
TbinList	O
<	O
T	O
>	O
,	O
the	O
wildcard	O
is	O
in	O
a	O
place	O
where	O
it	O
gets	O
captured	O
.	O
As	O
I	O
alluded	O
to	O
in	O
the	O
comments	O
,	O
one	O
very	O
interesting	O
test	O
is	O
this	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
test3	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
We	O
get	O
this	O
error	O
:	O
#	O
pre	O
So	O
there	O
'	O
s	O
no	O
way	O
to	O
make	O
it	O
work	O
as	O
-	O
is	O
.	O
One	O
of	O
the	O
class	O
declarations	O
needs	O
to	O
be	O
changed	O
.	O
Additionally	O
,	O
think	O
about	O
it	O
this	O
way	O
.	O
Suppose	O
we	O
had	O
:	O
#	O
pre	O
And	O
since	O
a	O
wildcard	O
allows	O
subtyping	O
,	O
we	O
can	O
do	O
this	O
:	O
TbinList	O
<	O
T	O
>	O
test4	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
Should	O
we	O
be	O
able	O
to	O
add	O
a	O
Tbin	O
<	O
T	O
>	O
to	O
test4	O
?	O
No	O
,	O
this	O
would	O
be	O
heap	O
pollution	O
.	O
We	O
might	O
end	O
up	O
with	O
Derived2	O
s	O
floating	O
around	O
in	O
a	O
TbinList	O
<	O
T	O
>	O
.	O
Question	O
-	O
31270759	O
,	O
answer	O
-	O
31273726	O
What	O
if	O
every	O
functional	O
interface	O
provided	O
by	O
java	O
.	O
util	O
.	O
function	O
was	O
allowed	O
to	O
throw	O
an	O
exception	O
?	O
#	O
pre	O
We	O
could	O
use	O
some	O
default	O
methods	O
to	O
provide	O
the	O
behavior	O
you	O
want	O
.	O
#	O
li	O
You	O
could	O
fallback	O
to	O
some	O
default	O
value	O
or	O
action	O
#	O
li	O
Or	O
you	O
could	O
try	O
to	O
perform	O
another	O
action	O
which	O
may	O
throw	O
an	O
exception	O
I	O
'	O
ve	O
written	O
a	O
library	O
which	O
redefines	O
most	O
of	O
the	O
interfaces	O
in	O
java	O
.	O
util	O
.	O
function	O
this	O
way	O
.	O
I	O
even	O
provide	O
a	O
ThrowingStream	O
which	O
let	O
'	O
s	O
you	O
use	O
these	O
new	O
interfaces	O
with	O
the	O
same	O
API	O
as	O
a	O
regular	O
Stream	B-api_mention
.	O
#	O
pre	O
(	O
Nothing	O
is	O
a	O
RuntimeException	B-api_mention
that	O
can	O
never	O
be	O
thrown	O
.	O
)	O
Your	O
original	O
example	O
would	O
become	O
#	O
pre	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908302	O
With	O
strings	O
you	O
'	O
re	O
going	O
to	O
want	O
to	O
use	O
the	O
equals	O
method	O
of	O
Strings	O
.	O
That	O
aside	O
,	O
you	O
already	O
have	O
the	O
enum	O
that	O
you	O
could	O
compare	O
with	O
the	O
equality	O
operator	O
.	O
Under	O
what	O
scenario	O
would	O
this	O
arise	O
?	O
That	O
being	O
said	O
,	O
yes	O
,	O
the	O
.	O
equals	O
method	O
will	O
return	O
true	O
if	O
they	O
are	O
the	O
same	O
.	O
I	O
'	O
m	O
not	O
sure	O
about	O
equality	O
operator	O
,	O
and	O
without	O
looking	O
it	O
up	O
,	O
I	O
can	O
tell	O
you	O
that	O
it	O
'	O
s	O
poor	O
programming	O
to	O
use	O
it	O
if	O
it	O
is	O
.	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781376	O
Like	O
the	O
others	O
have	O
mentioned	O
,	O
this	O
is	O
only	O
fulfilled	O
by	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
As	O
for	O
proof	O
,	O
let	O
me	O
offer	O
an	O
easier	O
to	O
understand	O
explanation	O
other	O
than	O
in	O
binary	O
(	O
although	O
it	O
is	O
still	O
rooted	O
in	O
that	O
)	O
.	O
Note	O
that	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
equal	O
to	O
-	O
2	O
^	O
31	O
or	O
-	O
2147483648	O
and	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
equal	O
to	O
2	O
^	O
31	O
-	O
1	O
or	O
2147483647	O
.	O
-	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
2	O
^	O
31	O
,	O
which	O
is	O
now	O
too	O
large	O
for	O
an	O
Integer	B-api_mention
(	O
since	O
it	O
is	O
past	O
MAX	B-api_mention
_	I-api_mention
VALUE	I-api_mention
)	O
thus	O
causing	O
an	O
Integer	B-api_mention
overflow	O
,	O
making	O
it	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
again	O
.	O
It	O
'	O
s	O
the	O
only	O
Integer	O
that	O
does	O
this	O
since	O
MIN	B-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
the	O
only	O
number	O
with	O
no	O
negative	O
equivalent	O
aside	O
from	O
0	O
.	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781168	O
The	O
value	O
you	O
are	O
looking	O
for	O
is	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
#	O
blockquote	O
That	O
'	O
s	O
off	O
-	O
topic	O
for	O
Stack	O
Exchange	O
.	O
But	O
you	O
could	O
do	O
it	O
starting	O
from	O
the	O
definition	O
of	O
Java	O
integers	O
(	O
JLS	O
4	O
.	O
2	O
)	O
#	O
blockquote	O
and	O
#	O
blockquote	O
and	O
the	O
definition	O
of	O
the	O
Java	O
unary	O
'	O
-	O
'	O
operator	O
(	O
JLS	O
15	O
.	O
15	O
.	O
4	O
)	O
:	O
#	O
blockquote	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
30749407	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
doesn	O
'	O
t	O
uses	O
regex	O
pattern	O
whereas	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
uses	O
regex	O
pattern	O
.	O
So	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
performs	O
faster	O
than	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28460301	O
Stream	B-api_mention
s	O
are	O
built	O
around	O
Spliterator	O
s	O
which	O
are	O
stateful	O
,	O
mutable	O
objects	O
.	O
They	O
don	O
’	O
t	O
have	O
a	O
“	O
reset	O
”	O
action	O
and	O
in	O
fact	O
,	O
requiring	O
to	O
support	O
such	O
rewind	O
action	O
would	O
“	O
take	O
away	O
much	O
power	O
”	O
.	O
How	O
would	O
Random	B-api_mention
.	I-api_mention
ints	I-api_mention
(	I-api_mention
)	I-api_mention
be	O
supposed	O
to	O
handle	O
such	O
a	O
request	O
?	O
On	O
the	O
other	O
hand	O
,	O
for	O
Stream	B-api_mention
s	O
which	O
have	O
a	O
retraceable	O
origin	O
,	O
it	O
is	O
easy	O
to	O
construct	O
an	O
equivalent	O
Stream	B-api_mention
to	O
be	O
used	O
again	O
.	O
Just	O
put	O
the	O
steps	O
made	O
to	O
construct	O
the	O
Stream	B-api_mention
into	O
a	O
reusable	O
method	O
.	O
Keep	O
in	O
mind	O
that	O
repeating	O
these	O
steps	O
is	O
not	O
an	O
expensive	O
operation	O
as	O
all	O
these	O
steps	O
are	O
lazy	O
operations	O
;	O
the	O
actual	O
work	O
starts	O
with	O
the	O
terminal	O
operation	O
and	O
depending	O
on	O
the	O
actual	O
terminal	O
operation	O
entirely	O
different	O
code	O
might	O
get	O
executed	O
.	O
It	O
would	O
be	O
up	O
to	O
you	O
,	O
the	O
writer	O
of	O
such	O
a	O
method	O
,	O
to	O
specify	O
what	O
calling	O
the	O
method	O
twice	O
implies	O
:	O
does	O
it	O
reproduce	O
exactly	O
the	O
same	O
sequence	O
,	O
as	O
streams	O
created	O
for	O
an	O
unmodified	O
array	O
or	O
collection	O
do	O
,	O
or	O
does	O
it	O
produce	O
a	O
stream	O
with	O
a	O
similar	O
semantics	O
but	O
different	O
elements	O
like	O
a	O
stream	O
of	O
random	O
ints	O
or	O
a	O
stream	O
of	O
console	O
input	O
lines	O
,	O
etc	O
.	O
By	O
the	O
way	O
,	O
to	O
avoid	O
confusion	O
,	O
a	O
terminal	O
operation	O
consumes	O
the	O
Stream	B-api_mention
which	O
is	O
distinct	O
from	O
closing	O
the	O
Stream	B-api_mention
as	O
calling	O
close	O
(	O
args	O
)	O
on	O
the	O
stream	O
does	O
(	O
which	O
is	O
required	O
for	O
streams	O
having	O
associated	O
resources	O
like	O
,	O
e	O
.	O
g	O
.	O
produced	O
by	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
It	O
seems	O
that	O
a	O
lot	O
of	O
confusion	O
stems	O
from	O
misguiding	O
comparison	O
of	O
IEnumerable	O
with	O
Stream	B-api_mention
.	O
An	O
IEnumerable	O
represents	O
the	O
ability	O
to	O
provide	O
an	O
actual	O
IEnumerator	O
,	O
so	O
its	O
like	O
an	O
Iterable	B-api_mention
in	O
Java	O
.	O
In	O
contrast	O
,	O
a	O
Stream	B-api_mention
is	O
a	O
kind	O
of	O
iterator	O
and	O
comparable	O
to	O
an	O
IEnumerator	O
so	O
it	O
’	O
s	O
wrong	O
to	O
claim	O
that	O
this	O
kind	O
of	O
data	O
type	O
can	O
be	O
used	O
multiple	O
times	O
in	O
.	O
NET	O
,	O
the	O
support	O
for	O
IEnumerator	O
.	O
Reset	O
is	O
optional	O
.	O
The	O
examples	O
discussed	O
here	O
rather	O
use	O
the	O
fact	O
that	O
an	O
IEnumerable	O
can	O
be	O
used	O
to	O
fetch	O
new	O
IEnumerator	O
s	O
and	O
that	O
works	O
with	O
Java	O
’	O
s	O
Collection	B-api_mention
s	O
as	O
well	O
;	O
you	O
can	O
get	O
a	O
new	O
Stream	B-api_mention
.	O
If	O
the	O
Java	O
developers	O
decided	O
to	O
add	O
the	O
Stream	B-api_mention
operations	O
to	O
Iterable	B-api_mention
directly	O
,	O
with	O
intermediate	O
operations	O
returning	O
another	O
Iterable	B-api_mention
,	O
it	O
was	O
really	O
comparable	O
and	O
it	O
could	O
work	O
the	O
same	O
way	O
.	O
However	O
,	O
the	O
developers	O
decided	O
against	O
it	O
and	O
the	O
decision	O
is	O
discussed	O
in	O
this	O
question	O
.	O
The	O
biggest	O
point	O
is	O
the	O
confusion	O
about	O
eager	O
Collection	B-api_mention
operations	O
and	O
lazy	O
Stream	B-api_mention
operations	O
.	O
By	O
looking	O
at	O
the	O
.	O
NET	O
API	O
,	O
I	O
(	O
yes	O
,	O
personally	O
)	O
find	O
it	O
justified	O
.	O
While	O
it	O
looks	O
reasonable	O
looking	O
at	O
IEnumerable	O
alone	O
,	O
a	O
particular	O
Collection	B-api_mention
will	O
have	O
lots	O
of	O
methods	O
manipulating	O
the	O
Collection	B-api_mention
directly	O
and	O
lots	O
of	O
methods	O
returning	O
a	O
lazy	O
IEnumerable	O
,	O
while	O
the	O
particular	O
nature	O
of	O
a	O
method	O
isn	O
’	O
t	O
always	O
intuitively	O
recognizable	O
.	O
The	O
worst	O
example	O
I	O
found	O
(	O
within	O
the	O
few	O
minutes	O
I	O
looked	O
at	O
it	O
)	O
is	O
List	B-api_mention
.	I-api_mention
Reverse	I-api_mention
(	I-api_mention
)	I-api_mention
whose	O
name	O
matches	O
exactly	O
the	O
name	O
of	O
the	O
inherited	O
(	O
is	O
this	O
the	O
right	O
terminus	O
for	O
extension	O
methods	O
?	O
)	O
Enumerable	O
.	O
Reverse	O
(	O
)	O
while	O
having	O
an	O
entirely	O
contradicting	O
behavior	O
.	O
Of	O
course	O
,	O
these	O
are	O
two	O
distinct	O
decisions	O
.	O
The	O
first	O
one	O
to	O
make	O
Stream	B-api_mention
a	O
type	O
distinct	O
from	O
Iterable	B-api_mention
/	O
Collection	B-api_mention
and	O
the	O
second	O
to	O
make	O
Stream	B-api_mention
a	O
kind	O
of	O
one	O
time	O
iterator	O
rather	O
than	O
another	O
kind	O
of	O
iterable	O
.	O
But	O
these	O
decision	O
were	O
made	O
together	O
and	O
it	O
might	O
be	O
the	O
case	O
that	O
separating	O
these	O
two	O
decision	O
never	O
was	O
considered	O
.	O
It	O
wasn	O
’	O
t	O
created	O
with	O
being	O
comparable	O
to	O
.	O
NET	O
’	O
s	O
in	O
mind	O
.	O
The	O
actual	O
API	O
design	O
decision	O
was	O
to	O
add	O
an	O
improved	O
type	O
of	O
iterator	O
,	O
the	O
Spliterator	B-api_mention
.	O
Spliterator	B-api_mention
s	O
can	O
be	O
provided	O
by	O
the	O
old	O
Iterable	B-api_mention
s	O
(	O
which	O
is	O
the	O
way	O
how	O
these	O
were	O
retrofitted	O
)	O
or	O
entirely	O
new	O
implementations	O
.	O
Then	O
,	O
Stream	B-api_mention
was	O
added	O
as	O
a	O
high	O
-	O
level	O
front	O
-	O
end	O
to	O
the	O
rather	O
low	O
level	O
Spliterator	B-api_mention
s	O
.	O
That	O
’	O
s	O
it	O
.	O
You	O
may	O
discuss	O
about	O
whether	O
a	O
different	O
design	O
would	O
be	O
better	O
,	O
but	O
that	O
’	O
s	O
not	O
productive	O
,	O
it	O
won	O
’	O
t	O
change	O
,	O
given	O
the	O
way	O
they	O
are	O
designed	O
now	O
.	O
There	O
is	O
another	O
implementation	O
aspect	O
you	O
have	O
to	O
consider	O
.	O
Stream	B-api_mention
s	O
are	O
not	O
immutable	O
data	O
structures	O
.	O
Each	O
intermediate	O
operation	O
may	O
return	O
a	O
new	O
Stream	B-api_mention
instance	O
encapsulating	O
the	O
old	O
one	O
but	O
it	O
may	O
also	O
manipulate	O
its	O
own	O
instance	O
instead	O
and	O
return	O
itself	O
(	O
that	O
doesn	O
’	O
t	O
preclude	O
doing	O
even	O
both	O
for	O
the	O
same	O
operation	O
)	O
.	O
Commonly	O
known	O
examples	O
are	O
operations	O
like	O
parallel	O
or	O
unordered	O
which	O
do	O
not	O
add	O
another	O
step	O
but	O
manipulate	O
the	O
entire	O
pipeline	O
)	O
.	O
Having	O
such	O
a	O
mutable	O
data	O
structure	O
and	O
attempts	O
to	O
reuse	O
(	O
or	O
even	O
worse	O
,	O
using	O
it	O
multiple	O
times	O
at	O
the	O
same	O
time	O
)	O
doesn	O
’	O
t	O
play	O
well	O
…	O
For	O
completeness	O
,	O
here	O
is	O
your	O
quicksort	O
example	O
translated	O
to	O
the	O
Java	O
Stream	B-api_mention
API	O
.	O
It	O
shows	O
that	O
it	O
does	O
not	O
really	O
“	O
take	O
away	O
much	O
power	O
”	O
.	O
#	O
pre	O
It	O
can	O
be	O
used	O
like	O
#	O
pre	O
You	O
can	O
write	O
it	O
even	O
more	O
compact	O
as	O
#	O
pre	O
Question	O
-	O
10066590	O
With	O
Mockito	O
,	O
I	O
want	O
to	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
a	O
method	O
call	O
with	O
byte	O
[	O
]	O
in	O
its	O
argument	O
list	O
,	O
but	O
I	O
didn	O
'	O
t	O
find	O
how	O
to	O
write	O
this	O
.	O
myMethod	O
(	O
args	O
)	O
I	O
just	O
want	O
something	O
like	O
anyByteArray	O
(	O
args	O
)	O
,	O
how	O
to	O
do	O
that	O
with	O
Mockito	O
?	O
Question	O
-	O
31170459	O
,	O
answer	O
-	O
31170506	O
No	O
,	O
you	O
appear	O
to	O
have	O
a	O
legit	O
bug	O
.	O
The	O
bug	O
presents	O
in	O
JDK7	O
but	O
fixed	O
in	O
JDK8	O
.	O
Your	O
values	O
are	O
correctly	O
representable	O
as	O
BigDecimal	B-api_mention
s	O
,	O
and	O
should	O
behave	O
correctly	O
,	O
but	O
don	O
'	O
t	O
.	O
Tracing	O
through	O
the	O
source	O
code	O
of	O
BigDecimal	B-api_mention
,	O
on	O
line	O
2585	O
,	O
this	O
.	B-api_mention
precision	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
1	O
,	O
and	O
this	O
.	B-api_mention
scale	I-api_mention
is	O
-	O
2147483647	O
.	O
this	O
.	B-api_mention
precision	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
this	O
.	O
scale	O
therefore	O
overflows	O
,	O
and	O
the	O
following	O
overflow	O
is	O
not	O
handled	O
correctly	O
.	O
This	O
bug	O
has	O
been	O
fixed	O
in	O
JDK8	O
by	O
doing	O
the	O
subtraction	O
in	O
long	O
arithmetic	O
.	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
29652714	O
You	O
can	O
use	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
list	O
if	O
your	O
list	O
contains	O
Comparable	B-api_mention
elements	O
.	O
Otherwise	O
I	O
would	O
recommend	O
you	O
to	O
implement	O
that	O
interface	O
like	O
here	O
:	O
public	O
class	O
Circle	O
implements	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
{	O
}	O
and	O
of	O
course	O
provide	O
your	O
own	O
realization	O
of	O
compareTo	B-api_mention
method	O
like	O
here	O
:	O
#	O
pre	O
And	O
then	O
you	O
can	O
again	O
use	O
Colection	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
now	O
list	O
contains	O
objects	O
of	O
Comparable	B-api_mention
type	O
and	O
can	O
be	O
sorted	O
.	O
Order	O
depends	O
on	O
compareTo	B-api_mention
method	O
.	O
Check	O
this	O
#	O
a	O
for	O
more	O
detailed	O
information	O
.	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673356	O
#	O
pre	O
Generally	O
speaking	O
,	O
when	O
you	O
have	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
write	O
anything	O
there	O
.	O
You	O
can	O
pass	O
this	O
output	O
stream	O
as	O
a	O
place	O
to	O
put	O
generated	O
PDF	O
to	O
your	O
generator	O
.	O
Also	O
,	O
if	O
you	O
know	O
what	O
file	O
type	O
you	O
are	O
sending	O
,	O
you	O
can	O
set	O
response	O
.	B-api_mention
setContentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
8172439	O
You	O
can	O
use	O
Character	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
char	I-api_mention
)	I-api_mention
.	O
Note	O
that	O
this	O
method	O
simply	O
returns	O
a	O
call	O
to	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
char	I-api_mention
)	I-api_mention
,	O
which	O
also	O
works	O
.	O
As	O
others	O
have	O
noted	O
,	O
string	O
concatenation	O
works	O
as	O
a	O
shortcut	O
as	O
well	O
:	O
String	B-api_mention
s	O
=	O
StringLiteral	O
+	O
CharLiteral	O
;	O
But	O
this	O
compiles	O
down	O
to	O
:	O
String	B-api_mention
s	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
is	O
less	O
efficient	O
because	O
the	O
StringBuilder	B-api_mention
is	O
backed	O
by	O
a	O
char	O
[	O
]	O
(	O
over	O
-	O
allocated	O
by	O
StringBuilder	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
16	O
)	O
,	O
only	O
for	O
that	O
array	O
to	O
be	O
defensively	O
copied	O
by	O
the	O
resulting	O
String	B-api_mention
.	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
"	O
gets	O
in	O
the	O
back	O
door	O
"	O
by	O
wrapping	O
the	O
char	O
in	O
a	O
single	O
-	O
element	O
array	O
and	O
passing	O
it	O
to	O
the	O
package	O
private	O
constructor	O
String	B-api_mention
(	I-api_mention
char	I-api_mention
[	I-api_mention
]	I-api_mention
,	I-api_mention
boolean	I-api_mention
)	I-api_mention
,	O
which	O
avoids	O
the	O
array	O
copy	O
.	O
Question	O
-	O
10977992	O
#	O
pre	O
We	O
can	O
use	O
Iterator	B-api_mention
to	O
traverse	O
a	O
Set	B-api_mention
or	O
a	O
List	B-api_mention
or	O
a	O
Map	B-api_mention
.	O
But	O
ListIterator	B-api_mention
can	O
only	O
be	O
used	O
to	O
traverse	O
a	O
List	B-api_mention
,	O
it	O
can	O
'	O
t	O
traverse	O
a	O
Set	B-api_mention
.	O
Why	O
?	O
I	O
know	O
that	O
the	O
main	O
difference	O
is	O
that	O
with	O
iterator	B-api_mention
we	O
can	O
travel	O
in	O
only	O
one	O
direction	O
but	O
with	O
ListIterator	B-api_mention
we	O
can	O
travel	O
both	O
directions	O
.	O
Are	O
there	O
any	O
other	O
differences	O
?	O
And	O
any	O
advantages	O
of	O
ListIterator	B-api_mention
over	O
Iterator	B-api_mention
?	O
Question	O
-	O
29691513	O
,	O
answer	O
-	O
29727412	O
The	O
JLS	O
describes	O
a	O
few	O
special	O
behaviors	O
of	O
what	O
it	O
calls	O
constant	O
variables	O
,	O
which	O
are	O
final	O
variables	O
(	O
whether	O
static	O
or	O
not	O
)	O
which	O
are	O
initialized	O
with	O
constant	O
expressions	O
of	O
String	B-api_mention
or	O
primitive	O
type	O
.	O
Constant	O
variables	O
have	O
a	O
major	O
difference	O
with	O
respect	O
to	O
binary	O
compatibility	O
:	O
the	O
values	O
of	O
constant	O
variables	O
become	O
part	O
of	O
the	O
class	O
'	O
s	O
API	O
,	O
as	O
far	O
as	O
the	O
compiler	O
is	O
concerned	O
.	O
An	O
example	O
:	O
#	O
pre	O
Here	O
,	O
XFOO	O
is	O
a	O
"	O
constant	O
variable	O
"	O
and	O
YFOO	O
is	O
not	O
,	O
but	O
they	O
are	O
otherwise	O
equivalent	O
.	O
Class	O
Z	O
prints	O
out	O
each	O
of	O
them	O
.	O
Compile	O
those	O
classes	O
,	O
then	O
disassemble	O
them	O
with	O
javap	O
-	O
v	O
X	O
Y	O
Z	O
,	O
and	O
here	O
is	O
the	O
output	O
:	O
Class	O
X	O
:	O
#	O
pre	O
Class	O
Y	O
:	O
#	O
pre	O
Class	O
Z	O
:	O
#	O
pre	O
Things	O
to	O
notice	O
in	O
the	O
disassembly	O
,	O
which	O
tell	O
you	O
the	O
differences	O
between	O
X	O
and	O
Y	O
run	O
deeper	O
than	O
syntactic	O
sugar	O
:	O
#	O
li	O
XFOO	O
has	O
a	O
ConstantValue	O
attribute	O
,	O
signifying	O
that	O
its	O
value	O
is	O
a	O
compile	O
-	O
time	O
constant	O
.	O
Whereas	O
YFOO	O
does	O
not	O
,	O
and	O
uses	O
a	O
static	O
block	O
with	O
a	O
putstatic	O
instruction	O
to	O
initialize	O
the	O
value	O
at	O
runtime	O
.	O
#	O
li	O
The	O
String	B-api_mention
constant	O
StringLiteral	O
has	O
become	O
part	O
of	O
class	O
Z	O
'	O
s	O
constant	O
pool	O
,	O
but	O
StringLiteral	O
has	O
not	O
.	O
#	O
li	O
Z	O
.	O
main	O
uses	O
the	O
ldc	O
(	O
load	O
constant	O
)	O
instruction	O
to	O
load	O
StringLiteral	O
onto	O
the	O
stack	O
directly	O
from	O
its	O
own	O
constant	O
pool	O
,	O
but	O
it	O
uses	O
a	O
getstatic	O
instruction	O
to	O
load	O
the	O
value	O
of	O
Y	O
.	O
YFOO	O
.	O
Other	O
differences	O
you	O
will	O
find	O
:	O
#	O
li	O
If	O
you	O
change	O
the	O
value	O
of	O
XFOO	O
and	O
recompile	O
X	O
.	O
java	O
but	O
not	O
Z	O
.	O
java	O
,	O
you	O
have	O
a	O
problem	O
:	O
class	O
Z	O
is	O
still	O
using	O
the	O
old	O
value	O
.	O
If	O
you	O
change	O
the	O
value	O
of	O
YFOO	O
and	O
recompile	O
Y	O
.	O
java	O
,	O
class	O
Z	O
uses	O
the	O
new	O
value	O
whether	O
you	O
recompile	O
Z	O
.	O
java	O
or	O
not	O
.	O
#	O
li	O
If	O
you	O
delete	O
the	O
X	O
.	O
class	O
file	O
entirely	O
,	O
class	O
Z	O
still	O
runs	O
correctly	O
.	O
Z	O
has	O
no	O
runtime	O
dependency	O
on	O
X	O
.	O
Whereas	O
if	O
you	O
delete	O
the	O
Y	O
.	O
class	O
file	O
,	O
class	O
Z	O
fails	O
to	O
initialize	O
with	O
a	O
ClassNotFoundException	O
:	O
Y	O
.	O
#	O
li	O
If	O
you	O
generate	O
documentation	O
for	O
the	O
classes	O
with	O
javadoc	O
,	O
the	O
"	O
Constant	O
Field	O
Values	O
"	O
page	O
will	O
document	O
the	O
value	O
of	O
XFOO	O
,	O
but	O
not	O
the	O
value	O
of	O
YFOO	O
.	O
The	O
JLS	O
describes	O
the	O
above	O
effects	O
constant	O
variables	O
have	O
on	O
compiled	O
class	O
files	O
in	O
§	O
13	O
.	O
1	O
.	O
3	O
:	O
#	O
blockquote	O
And	O
in	O
§	O
13	O
.	O
4	O
.	O
9	O
:	O
#	O
blockquote	O
The	O
upshot	O
is	O
that	O
if	O
your	O
public	O
library	O
exposes	O
any	O
constant	O
variables	O
,	O
you	O
must	O
never	O
change	O
their	O
values	O
if	O
your	O
new	O
library	O
version	O
is	O
otherwise	O
supposed	O
to	O
be	O
compatible	O
with	O
code	O
compiled	O
against	O
old	O
versions	O
of	O
the	O
library	O
.	O
It	O
won	O
'	O
t	O
necessarily	O
cause	O
an	O
error	O
,	O
but	O
the	O
existing	O
code	O
will	O
probably	O
malfunction	O
since	O
it	O
will	O
have	O
outdated	O
ideas	O
about	O
the	O
values	O
of	O
constants	O
.	O
(	O
If	O
your	O
new	O
library	O
version	O
needs	O
for	O
classes	O
which	O
use	O
it	O
to	O
be	O
recompiled	O
anyway	O
,	O
then	O
changing	O
constants	O
doesn	O
'	O
t	O
cause	O
this	O
problem	O
.	O
)	O
Thus	O
,	O
initializing	O
a	O
constant	O
with	O
a	O
block	O
gives	O
you	O
more	O
freedom	O
to	O
change	O
its	O
value	O
,	O
because	O
it	O
prevents	O
the	O
compiler	O
embedding	O
the	O
value	O
into	O
other	O
classes	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846963	O
#	O
blockquote	O
For	O
the	O
same	O
reason	O
you	O
'	O
d	O
use	O
Collections	B-api_mention
.	I-api_mention
unmodifiableMap	I-api_mention
(	I-api_mention
)	I-api_mention
at	O
some	O
point	O
.	O
You	O
want	O
to	O
return	O
a	O
Map	B-api_mention
instance	O
that	O
throws	O
an	O
exception	O
if	O
the	O
user	O
attempts	O
to	O
modify	O
it	O
.	O
It	O
'	O
s	O
just	O
a	O
special	O
case	O
:	O
the	O
empty	O
Map	B-api_mention
.	O
Question	O
-	O
30581531	O
What	O
is	O
the	O
maximum	O
number	O
of	O
parameters	O
that	O
a	O
method	O
in	O
Java	O
can	O
have	O
and	O
why	O
?	O
I	O
am	O
using	O
Java	O
1	O
.	O
8	O
on	O
a	O
64	O
-	O
bit	O
Windows	O
system	O
.	O
All	O
the	O
answers	O
on	O
StackOverflow	O
about	O
this	O
say	O
that	O
the	O
technical	O
limit	O
is	O
255	O
parameters	O
without	O
specifying	O
why	O
.	O
To	O
be	O
precise	O
,	O
255	O
for	O
static	O
and	O
254	O
for	O
non	O
-	O
static	O
(	O
this	O
will	O
be	O
the	O
255th	O
in	O
this	O
case	O
)	O
methods	O
.	O
I	O
thought	O
this	O
could	O
be	O
specified	O
in	O
some	O
sort	O
of	O
specification	O
and	O
that	O
this	O
was	O
simply	O
a	O
statically	O
defined	O
maximum	O
number	O
of	O
parameters	O
allowed	O
.	O
But	O
this	O
was	O
only	O
valid	O
for	O
int	O
and	O
all	O
4	O
-	O
bytes	O
types	O
.	O
I	O
did	O
some	O
tests	O
with	O
long	O
parameters	O
,	O
and	O
I	O
was	O
only	O
able	O
to	O
declare	O
127	O
parameters	O
in	O
that	O
case	O
.	O
With	O
String	B-api_mention
parameters	O
,	O
the	O
allowed	O
number	O
i	O
deduced	O
from	O
testing	O
is	O
255	O
(	O
it	O
may	O
be	O
because	O
the	O
reference	O
size	O
is	O
4	O
bytes	O
in	O
Java	O
?	O
)	O
.	O
But	O
since	O
I	O
am	O
using	O
a	O
64	O
-	O
bit	O
system	O
,	O
references	O
size	O
should	O
be	O
8	O
bytes	O
wide	O
and	O
so	O
with	O
String	B-api_mention
parameters	O
the	O
maximum	O
allowed	O
number	O
should	O
be	O
127	O
,	O
similar	O
to	O
long	O
types	O
.	O
How	O
does	O
this	O
limit	O
is	O
exactly	O
applied	O
?	O
Does	O
the	O
limit	O
have	O
anything	O
to	O
do	O
with	O
the	O
stack	O
size	O
of	O
the	O
method	O
?	O
Note	O
:	O
I	O
am	O
not	O
really	O
going	O
to	O
use	O
these	O
many	O
parameters	O
in	O
any	O
method	O
,	O
but	O
this	O
question	O
is	O
only	O
to	O
clarify	O
the	O
exact	O
behavior	O
.	O
Question	O
-	O
21524642	O
,	O
answer	O
-	O
21524694	O
Or	O
.	O
.	O
Pattern	B-api_mention
#	I-api_mention
quote	I-api_mention
:	O
String	B-api_mention
[	O
]	O
value	O
_	O
split	O
=	O
rat	O
_	O
values	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
happening	O
because	O
String	B-api_mention
#	I-api_mention
split	I-api_mention
accepts	O
a	O
regex	O
:	O
|	O
has	O
a	O
special	O
meaning	O
in	O
regex	O
.	O
quote	B-api_mention
will	O
return	O
a	O
String	B-api_mention
representation	O
for	O
the	O
regex	O
.	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667307	O
mode1	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
It	O
doesn	O
'	O
t	O
get	O
better	O
than	O
that	O
,	O
I	O
'	O
m	O
afraid	O
Question	O
-	O
19416644	O
,	O
answer	O
-	O
19416665	O
One	O
simple	O
way	O
is	O
to	O
use	O
Float	B-api_mention
.	I-api_mention
NaN	I-api_mention
:	O
#	O
pre	O
#	O
pre	O
You	O
can	O
do	O
the	O
same	O
with	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
.	O
From	O
JLS	O
§	O
15	O
.	O
21	O
.	O
1	O
.	O
Numerical	O
Equality	O
Operators	O
=	O
=	O
and	O
!	O
=	O
:	O
#	O
blockquote	O
Question	O
-	O
26684562	O
,	O
answer	O
-	O
26684710	O
Both	O
map	B-api_mention
and	O
flatMap	B-api_mention
can	O
be	O
applied	O
to	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
and	O
they	O
both	O
return	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
The	O
difference	O
is	O
that	O
the	O
map	B-api_mention
operation	O
produces	O
one	O
output	O
value	O
for	O
each	O
input	O
value	O
,	O
whereas	O
the	O
flatMap	B-api_mention
operation	O
produces	O
an	O
arbitrary	O
number	O
(	O
zero	O
or	O
more	O
)	O
values	O
for	O
each	O
input	O
value	O
.	O
This	O
is	O
reflected	O
in	O
the	O
arguments	O
to	O
each	O
operation	O
.	O
The	O
map	O
operation	O
takes	O
a	O
Function	O
,	O
which	O
is	O
called	O
for	O
each	O
value	O
in	O
the	O
input	O
stream	O
and	O
produces	O
one	O
result	O
value	O
,	O
which	O
is	O
sent	O
to	O
the	O
output	O
stream	O
.	O
The	O
flatMap	B-api_mention
operation	O
takes	O
a	O
function	O
that	O
conceptually	O
wants	O
to	O
consume	O
one	O
value	O
and	O
produce	O
an	O
arbitrary	O
number	O
of	O
values	O
.	O
However	O
,	O
in	O
Java	O
,	O
it	O
'	O
s	O
cumbersome	O
for	O
a	O
method	O
to	O
return	O
an	O
arbitrary	O
number	O
of	O
values	O
,	O
since	O
methods	O
can	O
return	O
only	O
zero	O
or	O
one	O
value	O
.	O
One	O
could	O
imagine	O
an	O
API	O
where	O
the	O
mapper	O
function	O
for	O
flatMap	B-api_mention
takes	O
a	O
value	O
and	O
returns	O
an	O
array	O
or	O
a	O
List	O
of	O
values	O
,	O
which	O
are	O
then	O
sent	O
to	O
the	O
output	O
.	O
Given	O
that	O
this	O
is	O
the	O
streams	O
library	O
,	O
a	O
particularly	O
apt	O
way	O
to	O
represent	O
an	O
arbitrary	O
number	O
of	O
return	O
values	O
is	O
for	O
the	O
mapper	O
function	O
itself	O
to	O
return	O
a	O
stream	O
!	O
The	O
values	O
from	O
the	O
stream	O
returned	O
by	O
the	O
mapper	O
are	O
drained	O
from	O
the	O
stream	O
and	O
are	O
passed	O
to	O
the	O
output	O
stream	O
.	O
The	O
"	O
clumps	O
"	O
of	O
values	O
returned	O
by	O
each	O
call	O
to	O
the	O
mapper	O
function	O
are	O
not	O
distinguished	O
at	O
all	O
in	O
the	O
output	O
stream	O
,	O
thus	O
the	O
output	O
is	O
said	O
to	O
have	O
been	O
"	O
flattened	O
.	O
"	O
Typical	O
use	O
is	O
for	O
the	O
mapper	O
function	O
of	O
flatMap	B-api_mention
to	O
return	O
Stream	B-api_mention
.	I-api_mention
empty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
it	O
wants	O
to	O
send	O
zero	O
values	O
,	O
or	O
something	O
like	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
it	O
wants	O
to	O
return	O
several	O
values	O
.	O
But	O
of	O
course	O
any	O
stream	O
can	O
be	O
returned	O
.	O
Question	O
-	O
28671903	O
I	O
have	O
a	O
set	O
–	O
a	O
HashSet	B-api_mention
I	O
want	O
to	O
remove	O
some	O
items	O
from	O
it	O
…	O
none	O
of	O
the	O
items	O
in	O
the	O
"	O
removals	O
"	O
collection	O
will	O
be	O
in	O
the	O
original	O
set	O
.	O
I	O
specify	O
the	O
size	O
of	O
the	O
"	O
source	O
"	O
set	O
and	O
the	O
size	O
of	O
the	O
"	O
removals	O
"	O
collection	O
on	O
the	O
command	O
line	O
,	O
and	O
build	O
both	O
of	O
them	O
.	O
The	O
source	O
set	O
contains	O
only	O
non	O
-	O
negative	O
integers	O
;	O
the	O
removals	O
set	O
contains	O
only	O
negative	O
integers	O
.	O
I	O
measure	O
how	O
long	O
it	O
takes	O
to	O
remove	O
all	O
the	O
elements	O
using	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
which	O
isn	O
’	O
t	O
the	O
world	O
most	O
accurate	O
stopwatch	O
but	O
is	O
more	O
than	O
adequate	O
in	O
this	O
case	O
,	O
as	O
you	O
’	O
ll	O
see	O
.	O
Here	O
’	O
s	O
the	O
code	O
:	O
#	O
pre	O
Let	O
’	O
s	O
start	O
off	O
by	O
giving	O
it	O
an	O
easy	O
job	O
:	O
a	O
source	O
set	O
of	O
100	O
items	O
,	O
and	O
100	O
to	O
remove	O
:	O
#	O
pre	O
Okay	O
,	O
That	O
'	O
s	O
fast	O
as	O
I	O
expected	O
.	O
Next	O
i	O
tried	O
source	O
of	O
one	O
million	O
items	O
and	O
300	O
,	O
000	O
items	O
to	O
remove	O
?	O
#	O
pre	O
That	O
still	O
seems	O
pretty	O
speedy	O
.	O
Now	O
make	O
it	O
a	O
bit	O
easier	O
–	O
300	O
,	O
000	O
source	O
items	O
and	O
300	O
,	O
000	O
removals	O
:	O
#	O
pre	O
Nearly	O
three	O
minutes	O
?	O
Really	O
confused	O
!	O
!	O
can	O
some	O
one	O
explain	O
why	O
this	O
is	O
happening	O
.	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
26826084	O
#	O
li	O
If	O
you	O
have	O
a	O
business	O
key	O
,	O
then	O
you	O
should	O
use	O
that	O
for	O
equals	B-api_mention
/	O
hashCode	B-api_mention
.	O
#	O
li	O
If	O
you	O
don	O
'	O
t	O
have	O
a	O
business	O
key	O
,	O
you	O
should	O
not	O
leave	O
it	O
with	O
the	O
default	O
Object	B-api_mention
equals	I-api_mention
and	O
hashCode	B-api_mention
implementations	O
because	O
that	O
does	O
not	O
work	O
after	O
you	O
merge	O
and	O
entity	O
.	O
#	O
li	O
You	O
can	O
use	O
the	O
entity	O
identifier	O
as	O
suggested	O
in	O
this	O
post	O
.	O
The	O
only	O
catch	O
is	O
that	O
you	O
need	O
to	O
use	O
a	O
hashCode	B-api_mention
implementation	O
that	O
always	O
return	O
the	O
same	O
value	O
,	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
5439543	O
You	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
the	O
integer	O
from	O
the	O
string	O
,	O
and	O
catch	O
the	O
exception	O
if	O
it	O
is	O
not	O
a	O
parsable	O
int	O
.	O
You	O
want	O
to	O
be	O
sure	O
to	O
catch	O
the	O
NumberFormatException	B-api_mention
it	O
can	O
throw	O
.	O
It	O
may	O
be	O
helpful	O
to	O
note	O
that	O
valueOf	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
return	O
an	O
Integer	B-api_mention
object	O
,	O
not	O
the	O
primitive	O
int	O
.	O
Question	O
-	O
22740464	O
I	O
can	O
add	O
streams	O
or	O
extra	O
elements	O
,	O
like	O
this	O
:	O
Stream	B-api_mention
stream	O
=	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	O
stream1	O
,	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
I	O
can	O
add	O
new	O
stuff	O
as	O
I	O
go	O
,	O
like	O
this	O
:	O
Stream	B-api_mention
stream	O
=	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
this	O
is	O
ugly	O
,	O
because	O
concat	B-api_mention
is	O
static	O
.	O
If	O
concat	O
were	O
an	O
instance	O
method	O
,	O
the	O
above	O
examples	O
would	O
be	O
much	O
easier	O
to	O
read	O
:	O
Stream	B-api_mention
stream	O
=	O
stream1	O
.	B-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
Stream	B-api_mention
stream	O
=	O
stream1	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
My	O
question	O
is	O
:	O
1	O
)	O
Is	O
there	O
any	O
good	O
reason	O
why	O
concat	B-api_mention
is	O
static	O
?	O
Or	O
is	O
there	O
some	O
equivalent	O
instance	O
method	O
I	O
'	O
m	O
missing	O
?	O
2	O
)	O
In	O
any	O
case	O
,	O
is	O
there	O
a	O
better	O
way	O
of	O
doing	O
this	O
?	O
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993534	O
You	O
have	O
a	O
single	O
extra	O
newline	O
at	O
the	O
end	O
of	O
your	O
file	O
.	O
#	O
li	O
hasNextLine	B-api_mention
(	I-api_mention
)	I-api_mention
checks	O
to	O
see	O
if	O
there	O
is	O
another	O
linePattern	O
in	O
the	O
buffer	O
.	O
#	O
li	O
hasNext	B-api_mention
(	I-api_mention
)	I-api_mention
checks	O
to	O
see	O
if	O
there	O
is	O
a	O
parseable	O
token	O
in	O
the	O
buffer	O
,	O
as	O
separated	O
by	O
the	O
scanner	O
'	O
s	O
delimiter	O
.	O
Since	O
the	O
scanner	O
'	O
s	O
delimiter	O
is	O
whitespace	O
,	O
and	O
the	O
linePattern	O
is	O
also	O
white	O
space	O
,	O
it	O
is	O
possible	O
for	O
there	O
to	O
be	O
a	O
linePattern	O
in	O
the	O
buffer	O
but	O
no	O
parseable	O
tokens	O
.	O
Typically	O
,	O
the	O
most	O
common	O
way	O
to	O
deal	O
with	O
this	O
issue	O
by	O
always	O
calling	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
after	O
parsing	O
all	O
the	O
tokens	O
(	O
e	O
.	O
g	O
.	O
numbers	O
)	O
in	O
each	O
line	O
of	O
your	O
text	O
.	O
You	O
need	O
to	O
do	O
this	O
when	O
using	O
Scanner	B-api_mention
when	O
reading	O
a	O
user	O
'	O
s	O
input	O
too	O
from	O
System	B-api_mention
.	I-api_mention
in	I-api_mention
.	O
To	O
advance	O
the	O
scanner	O
past	O
this	O
whitespace	O
delimiter	O
,	O
you	O
must	O
use	O
scanner	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
clear	O
the	O
line	O
delimiter	O
.	O
See	O
:	O
Using	O
scanner	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
)	I-api_mention
Appendix	O
:	O
LinePattern	O
is	O
defined	O
to	O
be	O
a	O
Pattern	B-api_mention
that	O
matches	O
this	O
:	O
#	O
pre	O
The	O
default	O
token	O
delimiter	O
is	O
this	O
Pattern	B-api_mention
:	O
private	O
static	O
Pattern	B-api_mention
WHITESPACE	O
_	O
PATTERN	O
=	O
Pattern	B-api_mention
.	I-api_mention
compile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14492320	O
Your	O
QuickRandom	B-api_mention
implementation	O
hasn	O
'	O
t	O
really	O
an	O
uniform	O
distribution	O
.	O
The	O
frequencies	O
are	O
generally	O
higher	O
at	O
the	O
lower	O
values	O
while	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
a	O
more	O
uniform	O
distribution	O
.	O
Here	O
'	O
s	O
a	O
SSCCE	O
which	O
shows	O
that	O
:	O
#	O
pre	O
The	O
average	O
result	O
looks	O
like	O
this	O
:	O
#	O
pre	O
If	O
you	O
repeat	O
the	O
test	O
,	O
you	O
'	O
ll	O
see	O
that	O
the	O
QR	O
distribution	O
varies	O
heavily	O
,	O
depending	O
on	O
the	O
initial	O
seeds	O
,	O
while	O
the	O
MR	O
distribution	O
is	O
stable	O
.	O
Sometimes	O
it	O
reaches	O
the	O
desired	O
uniform	O
distribution	O
,	O
but	O
more	O
than	O
often	O
it	O
doesn	O
'	O
t	O
.	O
Here	O
'	O
s	O
one	O
of	O
the	O
more	O
extreme	O
examples	O
,	O
it	O
'	O
s	O
even	O
beyond	O
the	O
borders	O
of	O
the	O
graph	O
:	O
#	O
pre	O
Question	O
-	O
27430092	O
,	O
answer	O
-	O
27449187	O
The	O
standard	O
use	O
case	O
for	O
BigInteger	B-api_mention
.	I-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
is	O
in	O
cryptography	O
.	O
Specifically	O
,	O
certain	O
cryptographic	O
algorithms	O
,	O
such	O
as	O
RSA	O
,	O
require	O
randomly	O
chosen	O
large	O
primes	O
.	O
Importantly	O
,	O
however	O
,	O
these	O
algorithms	O
don	O
'	O
t	O
really	O
require	O
these	O
numbers	O
to	O
be	O
guaranteed	O
to	O
be	O
prime	O
—	O
they	O
just	O
need	O
to	O
be	O
prime	O
with	O
a	O
very	O
high	O
probability	O
.	O
How	O
high	O
is	O
very	O
high	O
?	O
Well	O
,	O
in	O
a	O
crypto	O
application	O
,	O
one	O
would	O
typically	O
call	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
an	O
argument	O
somewhere	O
between	O
128	O
and	O
256	O
.	O
Thus	O
,	O
the	O
probability	O
of	O
a	O
non	O
-	O
prime	O
number	O
passing	O
such	O
a	O
test	O
is	O
less	O
than	O
one	O
in	O
2	O
128	O
or	O
2	O
256	O
.	O
Let	O
'	O
s	O
put	O
that	O
in	O
perspective	O
:	O
if	O
you	O
had	O
10	O
billion	O
computers	O
,	O
each	O
generating	O
10	O
billion	O
probable	O
prime	O
numbers	O
per	O
second	O
(	O
which	O
would	O
mean	O
less	O
than	O
one	O
clock	O
cycle	O
per	O
number	O
on	O
any	O
modern	O
CPU	O
)	O
,	O
and	O
the	O
primality	O
of	O
those	O
numbers	O
was	O
tested	O
with	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
would	O
,	O
on	O
average	O
,	O
expect	O
one	O
non	O
-	O
prime	O
number	O
to	O
slip	O
in	O
once	O
in	O
every	O
100	O
billion	O
years	O
.	O
That	O
is	O
,	O
that	O
would	O
be	O
the	O
case	O
,	O
if	O
those	O
10	O
billion	O
computers	O
could	O
somehow	O
all	O
run	O
for	O
hundreds	O
of	O
billions	O
of	O
years	O
without	O
experiencing	O
any	O
hardware	O
failures	O
.	O
In	O
practice	O
,	O
though	O
,	O
it	O
'	O
s	O
a	O
lot	O
more	O
likely	O
for	O
a	O
random	O
cosmic	O
ray	O
to	O
strike	O
your	O
computer	O
at	O
just	O
the	O
right	O
time	O
and	O
place	O
to	O
flip	O
the	O
return	O
value	O
of	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
false	O
to	O
true	O
,	O
without	O
causing	O
any	O
other	O
detectable	O
effects	O
,	O
than	O
it	O
is	O
for	O
a	O
non	O
-	O
prime	O
number	O
to	O
actually	O
pass	O
the	O
probabilistic	O
primality	O
test	O
at	O
that	O
certainty	O
level	O
.	O
Of	O
course	O
,	O
the	O
same	O
risk	O
of	O
random	O
cosmic	O
rays	O
and	O
other	O
hardware	O
faults	O
also	O
applies	O
to	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
.	O
Thus	O
,	O
in	O
practice	O
,	O
even	O
these	O
tests	O
have	O
a	O
(	O
very	O
small	O
)	O
baseline	O
false	O
positive	O
rate	O
due	O
to	O
random	O
hardware	O
failures	O
(	O
not	O
to	O
mention	O
all	O
other	O
possible	O
sources	O
of	O
errors	O
,	O
such	O
as	O
implementation	O
bugs	O
)	O
.	O
Since	O
it	O
'	O
s	O
easy	O
to	O
push	O
the	O
intrinsic	O
false	O
positive	O
rate	O
of	O
the	O
Miller	O
–	O
Rabin	O
primality	O
test	O
used	O
by	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
far	O
below	O
this	O
baseline	O
rate	O
,	O
simply	O
by	O
repeating	O
the	O
test	O
sufficiently	O
many	O
times	O
,	O
and	O
since	O
,	O
even	O
repeated	O
so	O
many	O
times	O
,	O
the	O
Miller	O
–	O
Rabin	O
test	O
is	O
still	O
much	O
faster	O
in	O
practice	O
than	O
the	O
best	O
known	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
,	O
it	O
remains	O
the	O
standard	O
primality	O
test	O
for	O
cryptographic	O
applications	O
.	O
(	O
Besides	O
,	O
even	O
if	O
you	O
happened	O
to	O
accidentally	O
select	O
a	O
strong	O
pseudoprime	O
as	O
one	O
of	O
the	O
factors	O
of	O
your	O
RSA	O
modulus	O
,	O
it	O
would	O
not	O
generally	O
lead	O
to	O
a	O
catastrophic	O
failure	O
.	O
Typically	O
,	O
such	O
pseudoprimes	O
would	O
be	O
products	O
of	O
two	O
(	O
or	O
rarely	O
more	O
)	O
primes	O
of	O
approximately	O
half	O
the	O
length	O
,	O
which	O
means	O
that	O
you	O
'	O
d	O
end	O
up	O
with	O
a	O
multi	O
-	O
prime	O
RSA	O
key	O
.	O
As	O
long	O
as	O
none	O
of	O
the	O
factors	O
were	O
too	O
small	O
(	O
and	O
if	O
they	O
were	O
,	O
the	O
primality	O
test	O
should	O
'	O
ve	O
caught	O
them	O
)	O
,	O
the	O
RSA	O
algorithm	O
will	O
still	O
work	O
just	O
fine	O
,	O
and	O
the	O
key	O
,	O
although	O
somewhat	O
weaker	O
against	O
certain	O
types	O
of	O
attacks	O
than	O
normal	O
RSA	O
keys	O
of	O
the	O
same	O
length	O
,	O
should	O
still	O
be	O
reasonably	O
secure	O
if	O
you	O
didn	O
'	O
t	O
needlessly	O
skimp	O
on	O
the	O
key	O
length	O
.	O
)	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488683	O
You	O
can	O
first	O
split	O
them	O
using	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
convert	O
the	O
returned	O
String	B-api_mention
array	O
to	O
an	O
ArrayList	B-api_mention
using	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
8172420	O
,	O
answer	O
-	O
32174377	O
We	O
have	O
various	O
ways	O
to	O
convert	O
a	O
char	O
to	O
String	B-api_mention
.	O
One	O
way	O
is	O
to	O
make	O
use	O
of	O
static	O
method	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
Character	O
class	O
:	O
#	O
pre	O
Actually	O
this	O
toString	B-api_mention
method	O
internally	O
makes	O
use	O
of	O
valueOf	B-api_mention
method	O
from	O
String	B-api_mention
class	O
which	O
makes	O
use	O
of	O
char	O
array	O
:	O
#	O
pre	O
So	O
second	O
way	O
is	O
to	O
use	O
this	O
directly	O
:	O
String	B-api_mention
str2	O
=	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
valueOf	B-api_mention
method	O
in	O
String	B-api_mention
class	O
makes	O
use	O
of	O
char	O
array	O
:	O
#	O
pre	O
So	O
the	O
third	O
way	O
is	O
to	O
make	O
use	O
of	O
an	O
anonymous	O
array	O
to	O
wrap	O
a	O
single	O
character	O
and	O
then	O
passing	O
it	O
to	O
String	B-api_mention
constructor	O
:	O
String	B-api_mention
str4	O
=	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
fourth	O
way	O
is	O
to	O
make	O
use	O
of	O
concatenation	O
:	O
String	B-api_mention
str3	O
=	O
StringLiteral	O
+	O
ch	O
;	O
This	O
will	O
actually	O
make	O
use	O
of	O
append	B-api_mention
method	O
from	O
StringBuilder	B-api_mention
class	O
which	O
is	O
actually	O
preferred	O
when	O
we	O
are	O
doing	O
concatenation	O
in	O
a	O
loop	O
.	O
Question	O
-	O
26375932	O
,	O
answer	O
-	O
26407637	O
It	O
is	O
an	O
integer	O
overflow	O
.	O
The	O
int	O
data	O
type	O
is	O
4	O
bytes	O
,	O
or	O
32	O
bits	O
.	O
Therefore	O
,	O
numbers	O
larger	O
than	O
2	O
^	O
(	O
32	O
-	O
1	O
)	O
-	O
1	O
(	O
2	O
,	O
147	O
,	O
483	O
,	O
647	O
)	O
cannot	O
be	O
stored	O
in	O
this	O
data	O
type	O
.	O
Your	O
numerical	O
values	O
will	O
be	O
incorrect	O
.	O
For	O
very	O
large	O
numbers	O
,	O
you	O
will	O
want	O
to	O
import	O
and	O
use	O
the	O
class	O
java	B-api_mention
.	I-api_mention
math	I-api_mention
.	I-api_mention
BigInteger	I-api_mention
:	O
#	O
pre	O
NOTE	O
:	O
For	O
numerical	O
values	O
that	O
are	O
still	O
too	O
large	O
for	O
the	O
int	O
data	O
type	O
,	O
but	O
small	O
enough	O
to	O
fit	O
within	O
8	O
bytes	O
(	O
absolute	O
value	O
less	O
than	O
or	O
equal	O
to	O
2	O
^	O
(	O
64	O
-	O
1	O
)	O
-	O
1	O
)	O
,	O
you	O
should	O
probably	O
use	O
the	O
long	O
primitive	O
.	O
HackerRank	O
'	O
s	O
practice	O
problems	O
(	O
www	O
.	O
hackerrank	O
.	O
com	O
)	O
,	O
such	O
as	O
the	O
Algorithms	O
practice	O
section	O
,	O
(	O
#	O
a	O
)	O
include	O
some	O
very	O
good	O
large	O
-	O
number	O
questions	O
that	O
give	O
good	O
practice	O
about	O
how	O
to	O
think	O
about	O
the	O
appropriate	O
data	O
type	O
to	O
use	O
.	O
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375818	O
This	O
isn	O
'	O
t	O
strictly	O
an	O
answer	O
to	O
your	O
question	O
,	O
but	O
if	O
behind	O
your	O
question	O
is	O
a	O
wish	O
to	O
have	O
mutable	O
strings	O
that	O
you	O
can	O
manipulate	O
,	O
you	O
should	O
check	O
out	O
the	O
StringBuilder	B-api_mention
class	O
,	O
which	O
implements	O
many	O
of	O
the	O
exact	O
same	O
methods	O
that	O
String	B-api_mention
has	O
but	O
also	O
adds	O
methods	O
to	O
change	O
the	O
current	O
contents	O
.	O
Once	O
you	O
'	O
ve	O
built	O
your	O
string	O
in	O
such	O
a	O
way	O
that	O
you	O
'	O
re	O
content	O
with	O
it	O
,	O
you	O
simply	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
it	O
in	O
order	O
to	O
convert	O
it	O
to	O
an	O
ordinary	O
String	B-api_mention
that	O
you	O
can	O
pass	O
to	O
library	O
routines	O
and	O
other	O
functions	O
that	O
only	O
take	O
String	B-api_mention
s	O
.	O
Also	O
,	O
both	O
StringBuilder	B-api_mention
and	O
String	B-api_mention
implements	O
the	O
CharSequence	B-api_mention
interface	O
,	O
so	O
if	O
you	O
want	O
to	O
write	O
functions	O
in	O
your	O
own	O
code	O
that	O
can	O
use	O
both	O
mutable	O
and	O
immutable	O
strings	O
,	O
you	O
can	O
declare	O
them	O
to	O
take	O
any	O
CharSequence	B-api_mention
object	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29098447	O
The	O
solution	O
is	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
collect	I-api_mention
.	O
To	O
create	O
a	O
Collector	B-api_mention
using	O
its	O
builder	O
pattern	O
is	O
already	O
given	O
as	O
solution	O
.	O
The	O
alternative	O
is	O
the	O
other	O
overloaded	O
collect	O
being	O
a	O
tiny	O
bit	O
more	O
primitive	O
.	O
#	O
pre	O
As	O
one	O
sees	O
,	O
I	O
make	O
a	O
list	O
of	O
string	O
lists	O
,	O
where	O
there	O
always	O
is	O
at	O
least	O
one	O
last	O
(	O
empty	O
)	O
string	O
list	O
.	O
#	O
li	O
The	O
first	O
function	O
creates	O
a	O
starting	O
list	O
of	O
string	O
lists	O
.	O
It	O
specifies	O
the	O
result	O
(	O
typed	O
)	O
object	O
.	O
#	O
li	O
The	O
second	O
function	O
is	O
called	O
to	O
process	O
each	O
element	O
.	O
It	O
is	O
an	O
action	O
on	O
the	O
partial	O
result	O
and	O
an	O
element	O
.	O
#	O
li	O
The	O
third	O
is	O
not	O
really	O
used	O
,	O
it	O
comes	O
into	O
play	O
on	O
parallelising	O
the	O
processing	O
,	O
when	O
partial	O
results	O
must	O
be	O
combined	O
.	O
A	O
solution	O
with	O
an	O
accumulator	O
:	O
As	O
@	O
StuartMarks	O
points	O
out	O
,	O
the	O
combiner	O
does	O
not	O
fullfill	O
the	O
contract	O
for	O
parallelism	O
.	O
Due	O
to	O
the	O
comment	O
of	O
@	O
ArnaudDenoyelle	O
a	O
version	O
using	O
reduce	O
.	O
#	O
pre	O
#	O
li	O
The	O
first	O
parameter	O
is	O
the	O
accumulated	O
object	O
.	O
#	O
li	O
The	O
second	O
function	O
accumulates	O
.	O
#	O
li	O
The	O
third	O
is	O
the	O
aforementioned	O
combiner	O
.	O
Question	O
-	O
29333689	O
,	O
answer	O
-	O
29341981	O
The	O
best	O
answer	O
is	O
already	O
given	O
(	O
XOR	O
-	O
ing	O
the	O
elements	O
)	O
,	O
this	O
is	O
to	O
provide	O
an	O
alternative	O
,	O
more	O
general	O
way	O
.	O
If	O
the	O
input	O
array	O
would	O
be	O
sorted	O
(	O
we	O
can	O
make	O
it	O
sorted	O
)	O
,	O
we	O
could	O
simply	O
iterate	O
over	O
the	O
elements	O
in	O
pairs	O
(	O
stepping	O
by	O
2	O
)	O
and	O
if	O
the	O
elements	O
of	O
the	O
"	O
pair	O
"	O
are	O
different	O
,	O
we	O
'	O
re	O
done	O
:	O
#	O
pre	O
Note	O
:	O
This	O
solution	O
sorts	O
the	O
input	O
array	O
;	O
if	O
this	O
is	O
unwanted	O
or	O
not	O
allowed	O
,	O
it	O
can	O
be	O
cloned	O
first	O
:	O
arr	O
=	O
arr	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
input	O
array	O
is	O
sorted	O
,	O
the	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
can	O
be	O
left	O
out	O
of	O
course	O
.	O
Generalization	O
The	O
advantage	O
of	O
this	O
solution	O
is	O
that	O
it	O
can	O
be	O
applied	O
to	O
all	O
types	O
which	O
are	O
comparable	O
and	O
therefore	O
can	O
be	O
sorted	O
(	O
types	O
which	O
implement	O
Comparable	B-api_mention
)	O
,	O
for	O
example	O
String	B-api_mention
or	O
Date	B-api_mention
.	O
The	O
XOR	O
solution	O
is	O
limited	O
to	O
numbers	O
only	O
.	O
Here	O
is	O
a	O
slightly	O
modified	O
version	O
which	O
takes	O
an	O
input	O
array	O
of	O
any	O
element	O
type	O
which	O
is	O
comparable	O
:	O
#	O
pre	O
Note	O
:	O
In	O
most	O
cases	O
you	O
could	O
also	O
use	O
arr	O
[	O
i	O
]	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
compare	O
elements	O
instead	O
of	O
using	O
Comparable	B-api_mention
.	I-api_mention
compareTo	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
For	O
details	O
read	O
the	O
linked	O
javadoc	O
.	O
Quoting	O
the	O
relevant	O
part	O
:	O
#	O
blockquote	O
Now	O
you	O
can	O
call	O
this	O
with	O
a	O
String	B-api_mention
[	O
]	O
for	O
example	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Output	O
:	O
2	O
Final	O
notes	O
:	O
Starting	O
from	O
the	O
problem	O
statement	O
it	O
is	O
not	O
checked	O
whether	O
there	O
are	O
more	O
than	O
2	O
occurrences	O
of	O
the	O
elements	O
,	O
and	O
neither	O
is	O
whether	O
the	O
array	O
length	O
is	O
odd	O
.	O
Also	O
the	O
second	O
example	O
doesn	O
'	O
t	O
check	O
for	O
null	O
values	O
,	O
these	O
are	O
to	O
be	O
added	O
if	O
necessary	O
.	O
Question	O
-	O
23674624	O
I	O
'	O
m	O
looking	O
at	O
the	O
docs	O
for	O
the	O
IntStream	B-api_mention
,	O
and	O
I	O
see	O
an	O
toArray	B-api_mention
method	O
,	O
but	O
no	O
way	O
to	O
go	O
directly	O
to	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Surely	O
there	O
is	O
a	O
way	O
to	O
convert	O
a	O
Stream	B-api_mention
to	O
a	O
List	B-api_mention
?	O
Question	O
-	O
27504925	O
,	O
answer	O
-	O
27505121	O
I	O
'	O
d	O
like	O
to	O
point	O
out	O
this	O
article	O
.	O
It	O
seems	O
as	O
though	O
arrays	O
and	O
objects	O
follow	O
different	O
opcodes	O
.	O
I	O
can	O
'	O
t	O
honestly	O
summarize	O
it	O
more	O
than	O
that	O
however	O
it	O
seems	O
,	O
arrays	O
are	O
simply	O
not	O
treated	O
as	O
Objects	B-api_mention
like	O
we	O
'	O
re	O
normally	O
used	O
to	O
so	O
they	O
don	O
'	O
t	O
inherit	O
Object	B-api_mention
methods	O
.	O
Full	O
credits	O
to	O
the	O
author	O
of	O
that	O
post	O
as	O
it	O
'	O
s	O
a	O
very	O
interesting	O
read	O
,	O
both	O
short	O
&	O
detailed	O
.	O
Upon	O
further	O
digging	O
into	O
the	O
topic	O
via	O
multiple	O
sources	O
I	O
'	O
ve	O
decided	O
to	O
give	O
a	O
more	O
elaborate	O
version	O
of	O
my	O
previous	O
answer	O
.	O
The	O
first	O
thing	O
to	O
note	O
that	O
instantiation	O
of	O
Objects	B-api_mention
and	O
Arrays	B-api_mention
are	O
very	O
different	O
within	O
the	O
JVM	O
,	O
their	O
follow	O
their	O
respective	O
bytecode	O
.	O
Object	O
:	O
Object	B-api_mention
instantiation	O
follows	O
a	O
simple	O
Opcode	O
new	O
which	O
is	O
a	O
combination	O
of	O
two	O
operands	O
-	O
indexbyte1	O
&	O
indexbyte2	O
.	O
Once	O
instantiated	O
the	O
JVM	O
pushes	O
the	O
reference	O
to	O
this	O
object	O
onto	O
the	O
stack	O
.	O
This	O
occurs	O
for	O
all	O
objects	O
irrespective	O
of	O
their	O
types	O
.	O
Arrays	O
:	O
Array	B-api_mention
Opcodes	O
(	O
regarding	O
instantiation	O
of	O
an	O
array	O
)	O
however	O
are	O
divided	O
into	O
three	O
different	O
codes	O
.	O
#	O
blockquote	O
newarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
that	O
involve	O
primitive	O
datatypes	O
(	O
byte	O
short	O
char	O
int	O
long	O
float	O
double	O
boolean	O
)	O
rather	O
than	O
object	O
references	O
.	O
#	O
blockquote	O
anewarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
of	O
object	O
references	O
#	O
blockquote	O
multianewarray	O
instruction	O
is	O
used	O
when	O
allocating	O
multi	O
-	O
dimensional	O
arrays	O
Object	B-api_mention
can	O
be	O
a	O
class	O
instance	O
or	O
an	O
array	O
.	O
Take	O
from	O
Oracle	O
Docs	O
#	O
blockquote	O
BUT	O
#	O
blockquote	O
This	O
goes	O
hand	O
in	O
hand	O
with	O
the	O
information	O
regarding	O
the	O
opcodes	O
.	O
Arrays	O
are	O
simply	O
not	O
developed	O
to	O
be	O
class	O
interfaces	O
but	O
are	O
instead	O
explicitly	O
created	O
by	O
array	O
creation	O
expression	O
thus	O
naturally	O
wouldn	O
'	O
t	O
implicitly	O
be	O
able	O
to	O
inherit	O
and	O
/	O
or	O
override	O
Object	B-api_mention
.	O
As	O
we	O
have	O
seen	O
,	O
it	O
has	O
nothing	O
to	O
do	O
with	O
the	O
fact	O
that	O
arrays	O
may	O
hold	O
primitive	O
datatypes	O
.	O
After	O
giving	O
it	O
some	O
thought	O
though	O
,	O
it	O
isn	O
'	O
t	O
very	O
common	O
to	O
come	O
across	O
situations	O
where	O
one	O
might	O
want	O
to	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
however	O
was	O
still	O
a	O
very	O
interesting	O
question	O
to	O
try	O
and	O
answer	O
.	O
Resources	O
:	O
Oracle	O
-	O
Docs	O
chapter	O
4	O
.	O
3	O
.	O
1	O
Oracle	O
-	O
Docs	O
chapter	O
15	O
.	O
10	O
.	O
1	O
Artima	O
-	O
UnderTheHood	O
Question	O
-	O
32475166	O
,	O
answer	O
-	O
32475290	O
The	O
chief	O
difference	O
is	O
that	O
an	O
if	O
else	O
block	O
is	O
a	O
statement	O
whereas	O
the	O
ternary	O
(	O
more	O
often	O
known	O
as	O
the	O
conditional	O
operator	O
in	O
Java	O
)	O
is	O
an	O
expression	O
.	O
A	O
statement	O
can	O
do	O
things	O
like	O
return	O
to	O
the	O
caller	O
on	O
some	O
of	O
the	O
control	O
paths	O
.	O
An	O
expression	O
can	O
be	O
used	O
in	O
an	O
assignment	O
:	O
int	O
n	O
=	O
condition	O
?	O
3	O
:	O
2	O
;	O
So	O
the	O
two	O
expressions	O
in	O
the	O
ternary	O
after	O
the	O
condition	O
need	O
to	O
be	O
coercable	O
to	O
the	O
same	O
type	O
.	O
This	O
can	O
cause	O
some	O
odd	O
effects	O
in	O
Java	O
particularly	O
with	O
auto	O
-	O
boxing	O
and	O
automatic	O
reference	O
casting	O
-	O
this	O
is	O
what	O
the	O
comment	O
in	O
your	O
posted	O
code	O
is	O
referring	O
to	O
.	O
The	O
coercion	O
of	O
the	O
expressions	O
in	O
your	O
case	O
would	O
be	O
to	O
a	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Executable	O
type	O
(	O
as	O
that	O
'	O
s	O
the	O
most	O
specialised	O
type	O
)	O
and	O
that	O
does	O
not	O
exist	O
in	O
older	O
versions	O
of	O
Java	O
.	O
Stylistically	O
you	O
should	O
use	O
an	O
if	O
else	O
block	O
if	O
the	O
code	O
is	O
statement	O
-	O
like	O
,	O
and	O
a	O
ternary	O
if	O
it	O
'	O
s	O
expression	O
-	O
like	O
.	O
Of	O
course	O
,	O
you	O
can	O
make	O
an	O
if	O
else	O
block	O
behave	O
like	O
an	O
expression	O
if	O
you	O
use	O
a	O
lambda	O
function	O
.	O
Question	O
-	O
6841333	O
,	O
answer	O
-	O
20906129	O
As	O
explained	O
by	O
others	O
,	O
there	O
'	O
s	O
a	O
time	O
discontinuity	O
there	O
.	O
There	O
are	O
two	O
possible	O
timezone	O
offsets	O
for	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
54	O
:	O
08	O
at	O
Asia	O
/	O
Shanghai	O
,	O
but	O
only	O
one	O
offset	O
for	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
54	O
:	O
07	O
.	O
So	O
,	O
depending	O
on	O
which	O
offset	O
is	O
used	O
,	O
there	O
'	O
s	O
either	O
a	O
one	O
second	O
difference	O
or	O
a	O
5	O
minutes	O
and	O
53	O
seconds	O
difference	O
.	O
This	O
slight	O
shift	O
of	O
offsets	O
,	O
instead	O
of	O
the	O
usual	O
one	O
-	O
hour	O
daylight	O
savings	O
(	O
summer	O
time	O
)	O
we	O
are	O
used	O
to	O
,	O
obscures	O
the	O
problem	O
a	O
bit	O
.	O
Note	O
that	O
the	O
2013a	O
update	O
of	O
the	O
timezone	O
database	O
moved	O
this	O
discontinuity	O
a	O
few	O
seconds	O
earlier	O
,	O
but	O
the	O
effect	O
would	O
still	O
be	O
observable	O
.	O
The	O
new	O
java	O
.	O
time	O
package	O
on	O
Java	O
8	O
let	O
use	O
see	O
this	O
more	O
clearly	O
,	O
and	O
provide	O
tools	O
to	O
handle	O
it	O
.	O
Given	O
:	O
#	O
pre	O
Then	O
durationAtEarlierOffset	B-api_mention
will	O
be	O
one	O
second	O
,	O
while	O
durationAtLaterOffset	B-api_mention
will	O
be	O
five	O
minutes	O
and	O
53	O
seconds	O
.	O
Also	O
,	O
these	O
two	O
offsets	O
are	O
the	O
same	O
:	O
#	O
pre	O
But	O
these	O
two	O
are	O
different	O
:	O
#	O
pre	O
You	O
can	O
see	O
the	O
same	O
problem	O
comparing	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
59	O
:	O
59	O
with	O
1928	O
-	O
01	O
-	O
01	O
00	O
:	O
00	O
:	O
00	O
,	O
though	O
,	O
in	O
this	O
case	O
,	O
it	O
is	O
the	O
earlier	O
offset	O
that	O
produce	O
the	O
longer	O
divergence	O
,	O
and	O
it	O
is	O
the	O
earlier	O
date	O
that	O
has	O
two	O
possible	O
offsets	O
.	O
Another	O
way	O
to	O
approach	O
this	O
is	O
to	O
check	O
whether	O
there	O
'	O
s	O
a	O
transition	O
going	O
on	O
.	O
We	O
can	O
do	O
this	O
like	O
this	O
:	O
#	O
pre	O
You	O
can	O
check	O
whether	O
the	O
transition	O
is	O
an	O
overlap	O
-	O
in	O
which	O
case	O
there	O
'	O
s	O
more	O
than	O
one	O
valid	O
offset	O
for	O
that	O
date	O
/	O
time	O
-	O
or	O
a	O
gap	O
-	O
in	O
which	O
case	O
that	O
date	O
/	O
time	O
is	O
not	O
valid	O
for	O
that	O
zone	O
id	O
-	O
by	O
using	O
the	O
isOverlap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
isGap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
zot4	O
.	O
I	O
hope	O
this	O
helps	O
people	O
handle	O
this	O
sort	O
of	O
issue	O
once	O
Java	O
8	O
becomes	O
widely	O
available	O
,	O
or	O
to	O
those	O
using	O
Java	O
7	O
who	O
adopt	O
the	O
JSR	O
310	O
backport	O
.	O
Question	O
-	O
28770822	O
,	O
answer	O
-	O
28816219	O
Looking	O
at	O
the	O
issue	O
and	O
fix	O
,	O
it	O
looks	O
like	O
this	O
has	O
been	O
done	O
to	O
resolve	O
a	O
handling	O
of	O
a	O
header	O
file	O
generation	O
for	O
special	O
classes	O
in	O
jigsaw	O
Jigsaw	O
is	O
a	O
module	O
system	O
designated	O
to	O
use	O
in	O
Java	O
SE	O
Platform	O
and	O
JDK	O
.	O
More	O
details	O
here	O
Here	O
is	O
a	O
corresponding	O
changeset	O
.	O
You	O
can	O
see	O
a	O
comment	O
,	O
#	O
blockquote	O
From	O
the	O
changeset	O
I	O
see	O
that	O
for	O
the	O
sake	O
of	O
purpose	O
in	O
addition	O
to	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Integer	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Long	I-api_mention
,	O
also	O
some	O
properties	O
in	O
java	O
.	O
net	O
.	O
SocketOptions	O
,	O
sun	O
.	O
nio	O
.	O
ch	O
.	O
IOStatus	O
,	O
java	B-api_mention
.	I-api_mention
io	I-api_mention
.	I-api_mention
FileSystem	I-api_mention
have	O
been	O
changed	O
to	O
@	O
Native	O
.	O
So	O
I	O
assume	O
only	O
those	O
were	O
needed	O
to	O
solve	O
the	O
dependency	O
with	O
jigsaw	O
.	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262511	O
The	O
first	O
case	O
is	O
ok	O
because	O
you	O
are	O
invoking	O
a	O
"	O
special	O
"	O
method	O
(	O
a	O
constructor	O
)	O
and	O
you	O
are	O
no	O
actually	O
taking	O
the	O
created	O
object	O
.	O
Just	O
to	O
make	O
it	O
more	O
clear	O
,	O
I	O
'	O
ll	O
put	O
the	O
optional	O
braces	O
in	O
your	O
lambdas	O
:	O
#	O
pre	O
And	O
more	O
clear	O
,	O
I	O
'	O
ll	O
translate	O
that	O
to	O
the	O
older	O
notation	O
:	O
#	O
pre	O
In	O
the	O
first	O
case	O
you	O
are	O
executing	O
a	O
constructor	O
,	O
but	O
you	O
are	O
NOT	O
returning	O
the	O
created	O
object	O
,	O
in	O
the	O
second	O
case	O
you	O
are	O
attempting	O
to	O
return	O
a	O
String	B-api_mention
value	O
,	O
but	O
your	O
method	O
in	O
your	O
interface	O
BiConsumer	O
returns	O
void	O
,	O
hence	O
the	O
compiler	O
error	O
.	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
33142346	O
Once	O
a	O
repeat	O
function	O
is	O
somewhere	O
defined	O
as	O
#	O
pre	O
You	O
can	O
use	O
it	O
now	O
and	O
then	O
this	O
way	O
,	O
e	O
.	O
g	O
.	O
:	O
repeat	O
.	B-api_mention
accept	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
To	O
get	O
and	O
equivalent	O
to	O
Haskell	O
'	O
s	O
take	O
8	O
(	O
args	O
)	O
You	O
could	O
write	O
#	O
pre	O
Question	O
-	O
7935858	O
,	O
answer	O
-	O
7935881	O
The	O
documentation	O
on	O
split	B-api_mention
(	I-api_mention
)	I-api_mention
says	O
:	O
#	O
blockquote	O
(	O
Emphasis	O
mine	O
.	O
)	O
A	O
dot	O
is	O
a	O
special	O
character	O
in	O
regular	O
expression	O
syntax	O
.	O
Use	O
Pattern	B-api_mention
.	I-api_mention
quote	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
the	O
parameter	O
to	O
split	B-api_mention
(	I-api_mention
)	I-api_mention
if	O
you	O
want	O
the	O
split	O
to	O
be	O
on	O
a	O
literal	O
string	O
pattern	O
:	O
String	B-api_mention
[	O
]	O
words	O
=	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
5031614	O
There	O
have	O
been	O
some	O
discussions	O
here	O
about	O
JPA	O
entities	O
and	O
which	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
implementation	O
should	O
be	O
used	O
for	O
JPA	O
entity	O
classes	O
.	O
Most	O
(	O
if	O
not	O
all	O
)	O
of	O
them	O
depend	O
on	O
Hibernate	O
,	O
but	O
I	O
'	O
d	O
like	O
to	O
discuss	O
them	O
JPA	O
-	O
implementation	O
-	O
neutrally	O
(	O
I	O
am	O
using	O
EclipseLink	O
,	O
by	O
the	O
way	O
)	O
.	O
All	O
possible	O
implementations	O
are	O
having	O
their	O
own	O
advantages	O
and	O
disadvantages	O
regarding	O
:	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
contract	O
conformity	O
(	O
immutability	O
)	O
for	O
List	O
/	O
Set	O
operations	O
#	O
li	O
Whether	O
identical	O
objects	O
(	O
e	O
.	O
g	O
.	O
from	O
different	O
sessions	O
,	O
dynamic	O
proxies	O
from	O
lazily	O
-	O
loaded	O
data	O
structures	O
)	O
can	O
be	O
detected	O
#	O
li	O
Whether	O
entities	O
behave	O
correctly	O
in	O
detached	O
(	O
or	O
non	O
-	O
persisted	O
)	O
state	O
As	O
far	O
I	O
can	O
see	O
,	O
there	O
are	O
three	O
options	O
:	O
#	O
li	O
Do	O
not	O
override	O
them	O
;	O
rely	O
on	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Object	B-api_mention
.	I-api_mention
hashCode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
work	O
#	O
li	O
cannot	O
identify	O
identical	O
objects	O
,	O
problems	O
with	O
dynamic	O
proxies	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
primary	O
key	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
Business	O
-	O
Id	O
(	O
non	O
-	O
primary	O
key	O
fields	O
;	O
what	O
about	O
foreign	O
keys	O
?	O
)	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
My	O
questions	O
are	O
:	O
#	O
li	O
Did	O
I	O
miss	O
an	O
option	O
and	O
/	O
or	O
pro	O
/	O
con	O
point	O
?	O
#	O
li	O
What	O
option	O
did	O
you	O
choose	O
and	O
why	O
?	O
UPDATE	O
1	O
:	O
By	O
"	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
"	O
,	O
I	O
mean	O
that	O
successive	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invocations	O
may	O
return	O
differing	O
values	O
,	O
which	O
is	O
(	O
when	O
correctly	O
implemented	O
)	O
not	O
broken	O
in	O
the	O
sense	O
of	O
the	O
Object	O
API	O
documentation	O
,	O
but	O
which	O
causes	O
problems	O
when	O
trying	O
to	O
retrieve	O
a	O
changed	O
entity	O
from	O
a	O
Map	O
,	O
Set	O
or	O
other	O
hash	O
-	O
based	O
Collection	O
.	O
Consequently	O
,	O
JPA	O
implementations	O
(	O
at	O
least	O
EclipseLink	O
)	O
will	O
not	O
work	O
correctly	O
in	O
some	O
cases	O
.	O
UPDATE	O
2	O
:	O
Thank	O
you	O
for	O
your	O
answers	O
-	O
-	O
most	O
of	O
them	O
have	O
remarkable	O
quality	O
.	O
Unfortunately	O
,	O
I	O
am	O
still	O
unsure	O
which	O
approach	O
will	O
be	O
the	O
best	O
for	O
a	O
real	O
-	O
life	O
application	O
,	O
or	O
how	O
to	O
determine	O
the	O
best	O
approach	O
for	O
my	O
application	O
.	O
So	O
,	O
I	O
'	O
ll	O
keep	O
the	O
question	O
open	O
and	O
hope	O
for	O
some	O
more	O
discussions	O
and	O
/	O
or	O
opinions	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
30506585	O
Predicate	B-api_mention
has	O
methods	O
and	O
,	O
or	O
and	O
negate	O
.	O
However	O
,	O
String	B-api_mention
:	I-api_mention
:	I-api_mention
isEmpty	I-api_mention
is	O
not	O
a	O
Predicate	B-api_mention
.	O
It	O
could	O
as	O
well	O
be	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
or	O
MyProprietaryClass	B-api_mention
.	O
The	O
type	O
information	O
is	O
inferred	O
from	O
the	O
variable	O
or	O
the	O
call	O
.	O
So	O
,	O
you	O
need	O
to	O
cast	O
a	O
method	O
reference	O
explicitly	O
(	O
as	O
@	O
axtavt	O
mentioned	O
)	O
:	O
(	O
(	O
Predicate	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
String	B-api_mention
:	I-api_mention
:	I-api_mention
isEmpty	I-api_mention
)	O
.	B-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
But	O
it	O
'	O
s	O
absolutely	O
ugly	O
and	O
Predicate	B-api_mention
seems	O
to	O
use	O
lambdas	O
under	O
the	O
hood	O
anyway	O
.	O
So	O
I	O
think	O
you	O
are	O
better	O
off	O
writing	O
a	O
lambda	O
or	O
even	O
your	O
own	O
not	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
e	O
.	O
g	O
.	O
in	O
utility	O
,	O
static	O
import	O
)	O
.	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
34845194	O
You	O
can	O
also	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOfRange	I-api_mention
.	O
Example	O
:	O
#	O
pre	O
This	O
method	O
is	O
similar	O
to	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
,	O
but	O
it	O
'	O
s	O
more	O
flexible	O
.	O
Both	O
of	O
them	O
use	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
under	O
the	O
hood	O
.	O
See	O
:	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
Question	O
-	O
6416706	O
,	O
answer	O
-	O
6416788	O
As	O
soon	O
as	O
you	O
call	O
contains	B-api_mention
,	O
containsAll	B-api_mention
,	O
equals	B-api_mention
,	O
hashCode	B-api_mention
,	O
remove	B-api_mention
,	O
retainAll	B-api_mention
,	O
size	B-api_mention
or	O
toArray	B-api_mention
,	O
you	O
'	O
d	O
have	O
to	O
traverse	O
the	O
elements	O
anyway	O
.	O
If	O
you	O
'	O
re	O
occasionally	O
only	O
calling	O
methods	O
such	O
as	O
isEmpty	B-api_mention
or	O
clear	O
I	O
suppose	O
you	O
'	O
d	O
be	O
better	O
of	O
by	O
creating	O
the	O
collection	O
lazily	O
.	O
You	O
could	O
for	O
instance	O
have	O
a	O
backing	O
ArrayList	B-api_mention
for	O
storing	O
previously	O
iterated	O
elements	O
.	O
I	O
don	O
'	O
t	O
know	O
of	O
any	O
such	O
class	O
in	O
any	O
library	O
,	O
but	O
it	O
should	O
be	O
a	O
fairly	O
simple	O
exercise	O
to	O
write	O
up	O
.	O
Question	O
-	O
24603186	O
In	O
Java	O
8	O
,	O
the	O
Collection	B-api_mention
interface	O
was	O
extended	O
with	O
two	O
methods	O
that	O
return	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
:	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
a	O
sequential	O
stream	O
,	O
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
a	O
possibly	O
-	O
parallel	O
stream	O
.	O
Stream	O
itself	O
also	O
has	O
a	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
returns	O
an	O
equivalent	O
parallel	O
stream	O
(	O
either	O
mutating	O
the	O
current	O
stream	O
to	O
be	O
parallel	O
or	O
creating	O
a	O
new	O
stream	O
)	O
.	O
The	O
duplication	O
has	O
obvious	O
disadvantages	O
:	O
#	O
li	O
It	O
'	O
s	O
confusing	O
.	O
A	O
question	O
asks	O
whether	O
calling	O
both	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
necessary	O
to	O
be	O
sure	O
the	O
stream	O
is	O
parallel	O
,	O
given	O
that	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
may	O
return	O
a	O
sequential	O
stream	O
.	O
Why	O
does	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
exist	O
if	O
it	O
can	O
'	O
t	O
make	O
a	O
guarantee	O
?	O
The	O
other	O
way	O
around	O
is	O
also	O
confusing	O
-	O
-	O
if	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
returns	O
a	O
sequential	O
stream	O
,	O
there	O
'	O
s	O
probably	O
a	O
reason	O
(	O
e	O
.	O
g	O
.	O
,	O
an	O
inherently	O
sequential	O
data	O
structure	O
for	O
which	O
parallel	O
streams	O
are	O
a	O
performance	O
trap	O
)	O
;	O
what	O
should	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
do	O
for	O
such	O
a	O
stream	O
?	O
(	O
UnsupportedOperationException	B-api_mention
is	O
not	O
allowed	O
by	O
parallel	B-api_mention
(	I-api_mention
)	I-api_mention
'	O
s	O
specification	O
.	O
)	O
#	O
li	O
Adding	O
methods	O
to	O
an	O
interface	O
risks	O
conflicts	O
if	O
an	O
existing	O
implementation	O
has	O
a	O
similarly	O
-	O
named	O
method	O
with	O
an	O
incompatible	O
return	O
type	O
.	O
Adding	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
addition	O
to	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
doubles	O
the	O
risk	O
for	O
little	O
gain	O
.	O
(	O
Note	O
that	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
was	O
at	O
one	O
point	O
just	O
named	O
parallel	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
though	O
I	O
don	O
'	O
t	O
know	O
if	O
it	O
was	O
renamed	O
to	O
avoid	O
name	O
clashes	O
or	O
for	O
another	O
reason	O
.	O
)	O
Why	O
does	O
Collection	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
)	I-api_mention
exist	O
when	O
calling	O
Collection	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
does	O
the	O
same	O
thing	O
?	O
Question	O
-	O
32475166	O
,	O
answer	O
-	O
32476850	O
When	O
you	O
think	O
about	O
the	O
type	O
of	O
the	O
operands	O
,	O
the	O
problem	O
becomes	O
more	O
apparent	O
:	O
this	O
.	O
method	O
!	O
=	O
null	O
?	O
this	O
.	O
method	O
:	O
this	O
.	O
constructor	O
has	O
as	O
type	O
the	O
most	O
specialized	O
common	O
type	O
of	O
both	O
the	O
operands	O
,	O
i	O
.	O
e	O
.	O
the	O
most	O
specialized	O
type	O
common	O
to	O
both	O
this	O
.	O
method	O
and	O
this	O
.	O
constructor	O
.	O
In	O
Java	O
7	O
this	O
is	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Member	O
,	O
however	O
the	O
Java	O
8	O
class	O
library	O
introduces	O
a	O
new	O
type	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Executable	O
which	O
is	O
more	O
specialized	O
than	O
the	O
generic	O
Member	O
.	O
Hence	O
with	O
a	O
Java	O
8	O
class	O
library	O
the	O
result	O
type	O
of	O
the	O
ternary	O
expression	O
is	O
Executable	O
rather	O
than	O
Member	O
.	O
Some	O
(	O
pre	O
-	O
release	O
)	O
versions	O
of	O
the	O
Java	O
8	O
compiler	O
seem	O
to	O
have	O
produced	O
an	O
explicit	O
reference	O
to	O
Executable	O
inside	O
generated	O
code	O
when	O
compiling	O
the	O
ternary	O
operator	O
.	O
This	O
would	O
trigger	O
a	O
class	O
load	O
,	O
and	O
thus	O
in	O
turn	O
a	O
ClassNotFoundException	O
at	O
runtime	O
when	O
running	O
with	O
a	O
class	O
library	O
<	O
JDK	O
8	O
,	O
because	O
Executable	O
only	O
exists	O
for	O
JDK	O
≥	O
8	O
.	O
As	O
noted	O
by	O
Tagir	O
Valeev	O
in	O
this	O
answer	O
,	O
this	O
is	O
actually	O
a	O
bug	O
in	O
pre	O
-	O
release	O
versions	O
of	O
JDK	O
8	O
and	O
has	O
since	O
been	O
fixed	O
,	O
so	O
both	O
the	O
if	O
-	O
else	O
workaround	O
and	O
the	O
explanatory	O
comment	O
are	O
now	O
obsolete	O
.	O
Additional	O
note	O
:	O
One	O
might	O
come	O
to	O
the	O
conclusion	O
that	O
this	O
compiler	O
bug	O
was	O
present	O
before	O
Java	O
8	O
.	O
However	O
,	O
the	O
byte	O
code	O
generated	O
for	O
the	O
ternary	O
by	O
OpenJDK	O
7	O
is	O
the	O
same	O
as	O
the	O
byte	O
code	O
generated	O
by	O
OpenJDK	O
8	O
.	O
In	O
fact	O
,	O
the	O
type	O
of	O
the	O
expression	O
goes	O
completely	O
unmentioned	O
at	O
runtime	O
,	O
the	O
code	O
is	O
really	O
only	O
test	O
,	O
branch	O
,	O
load	O
,	O
return	O
without	O
any	O
additional	O
checks	O
going	O
on	O
.	O
So	O
rest	O
assured	O
that	O
this	O
is	O
not	O
a	O
problem	O
(	O
anymore	O
)	O
and	O
indeed	O
seems	O
to	O
have	O
been	O
a	O
temporary	O
problem	O
during	O
development	O
of	O
Java	O
8	O
.	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33147762	O
I	O
found	O
this	O
explanation	O
:	O
#	O
blockquote	O
In	O
Java	O
6	O
,	O
if	O
you	O
use	O
the	O
API	O
as	O
:	O
#	O
pre	O
And	O
newCount	O
overflows	O
(	O
this	O
becomes	O
negative	O
)	O
,	O
if	O
(	O
args	O
)	O
will	O
return	O
false	O
and	O
you	O
may	O
mistakenly	O
assume	O
that	O
the	O
ArrayList	B-api_mention
was	O
increased	O
by	O
len	B-api_mention
.	O
Question	O
-	O
8098953	O
,	O
answer	O
-	O
8103083	O
The	O
first	O
thing	O
to	O
keep	O
in	O
mind	O
is	O
that	O
Java	O
ternary	O
operators	O
have	O
a	O
"	O
type	O
"	O
,	O
and	O
that	O
this	O
is	O
what	O
the	O
compiler	O
will	O
determine	O
and	O
consider	O
no	O
matter	O
what	O
the	O
actual	O
/	O
real	O
types	O
of	O
the	O
second	O
or	O
third	O
parameter	O
are	O
.	O
Depending	O
on	O
several	O
factors	O
the	O
ternary	O
operator	O
type	O
is	O
determined	O
in	O
different	O
ways	O
as	O
illustrated	O
in	O
the	O
Java	O
Language	O
Specification	O
15	O
.	O
26	O
In	O
the	O
question	O
above	O
we	O
should	O
consider	O
the	O
last	O
case	O
:	O
#	O
blockquote	O
This	O
is	O
by	O
far	O
the	O
most	O
complex	O
case	O
once	O
you	O
take	O
a	O
look	O
at	O
applying	O
capture	O
conversion	O
(	O
§	O
5	O
.	O
1	O
.	O
10	O
)	O
and	O
most	O
of	O
all	O
at	O
lub	O
(	O
T1	O
,	O
T2	O
)	O
.	O
In	O
plain	O
English	O
and	O
after	O
an	O
extreme	O
simplification	O
we	O
can	O
describe	O
the	O
process	O
as	O
calculating	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
(	O
yes	O
,	O
think	O
of	O
the	O
LCM	O
)	O
of	O
the	O
second	O
and	O
third	O
parameters	O
.	O
This	O
will	O
give	O
us	O
the	O
ternary	O
operator	O
"	O
type	O
"	O
.	O
Again	O
,	O
what	O
I	O
just	O
said	O
is	O
an	O
extreme	O
simplification	O
(	O
consider	O
classes	O
that	O
implement	O
multiple	O
common	O
interfaces	O
)	O
.	O
For	O
example	O
,	O
if	O
you	O
try	O
the	O
following	O
:	O
#	O
pre	O
You	O
'	O
ll	O
notice	O
that	O
resulting	O
type	O
of	O
the	O
conditional	O
expression	O
is	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
since	O
it	O
'	O
s	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
for	O
the	O
Timestamp	B-api_mention
/	O
Time	B-api_mention
pair	O
.	O
Since	O
null	O
can	O
be	O
autoboxed	O
to	O
anything	O
,	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
is	O
the	O
Integer	O
class	O
and	O
this	O
will	O
be	O
the	O
return	O
type	O
of	O
the	O
conditional	O
expression	O
(	O
ternary	O
operator	O
)	O
above	O
.	O
The	O
return	O
value	O
will	O
then	O
be	O
a	O
null	O
pointer	O
of	O
type	O
Integer	B-api_mention
and	O
that	O
is	O
what	O
will	O
be	O
returned	O
by	O
the	O
ternary	O
operator	O
.	O
At	O
runtime	O
,	O
when	O
the	O
Java	O
Virtual	O
Machine	O
unboxes	O
the	O
Integer	B-api_mention
a	O
NullPointerException	B-api_mention
is	O
thrown	O
.	O
This	O
happens	O
because	O
the	O
JVM	O
attempts	O
to	O
invoke	O
the	O
function	O
null	O
.	B-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
where	O
null	O
is	O
the	O
result	O
of	O
autoboxing	O
.	O
In	O
my	O
opinion	O
(	O
and	O
since	O
my	O
opinion	O
is	O
not	O
in	O
the	O
Java	O
Language	O
Specification	O
many	O
people	O
will	O
find	O
it	O
wrong	O
anyway	O
)	O
the	O
compiler	O
does	O
a	O
poor	O
job	O
in	O
evaluating	O
the	O
expression	O
in	O
your	O
question	O
.	O
Given	O
that	O
you	O
wrote	O
true	O
?	O
param1	O
:	O
param2	O
the	O
compiler	O
should	O
determine	O
right	O
away	O
that	O
the	O
first	O
parameter	O
-	O
null	O
-	O
will	O
be	O
returned	O
and	O
it	O
should	O
generate	O
a	O
compiler	O
error	O
.	O
This	O
is	O
somewhat	O
similar	O
to	O
when	O
you	O
write	O
while	O
(	O
args	O
)	O
{	O
}	O
etc	O
.	O
.	O
.	O
and	O
the	O
compiler	O
complains	O
about	O
the	O
code	O
underneath	O
the	O
loop	O
and	O
flags	O
it	O
with	O
Unreachable	O
Statements	O
.	O
Your	O
second	O
case	O
is	O
pretty	O
straightforward	O
and	O
this	O
answer	O
is	O
already	O
too	O
long	O
.	O
.	O
.	O
;	O
)	O
CORRECTION	O
:	O
After	O
another	O
analysis	O
I	O
believe	O
that	O
I	O
was	O
wrong	O
to	O
say	O
that	O
a	O
null	O
value	O
can	O
be	O
boxed	O
/	O
autoboxed	O
to	O
anything	O
.	O
Talking	O
about	O
the	O
class	O
Integer	O
,	O
explicit	O
boxing	O
consists	O
in	O
invoking	O
the	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
constructor	O
or	O
maybe	O
the	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
(	O
I	O
found	O
this	O
version	O
somewhere	O
)	O
.	O
The	O
former	O
would	O
throw	O
a	O
NumberFormatException	B-api_mention
(	O
and	O
this	O
does	O
not	O
happen	O
)	O
while	O
the	O
second	O
would	O
just	O
not	O
make	O
sense	O
since	O
an	O
int	O
cannot	O
be	O
null	O
.	O
.	O
.	O
Question	O
-	O
14809293	O
,	O
answer	O
-	O
14821488	O
The	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
has	O
already	O
been	O
mentioned	O
-	O
the	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
strangely	O
not	O
!	O
My	O
solution	O
would	O
also	O
be	O
to	O
use	O
the	O
list	O
from	O
the	O
outside	O
and	O
wrap	O
the	O
array	O
as	O
follows	O
:	O
#	O
pre	O
The	O
problem	O
with	O
copying	O
the	O
array	O
is	O
:	O
if	O
you	O
'	O
re	O
doing	O
it	O
every	O
time	O
you	O
access	O
the	O
code	O
and	O
the	O
array	O
is	O
big	O
,	O
you	O
'	O
ll	O
create	O
a	O
lot	O
of	O
work	O
for	O
the	O
garbage	O
collector	O
for	O
sure	O
.	O
So	O
the	O
copy	O
is	O
a	O
simple	O
but	O
really	O
bad	O
approach	O
-	O
I	O
'	O
d	O
say	O
"	O
cheap	O
"	O
,	O
but	O
memory	O
-	O
expensive	O
!	O
Especially	O
when	O
you	O
'	O
re	O
having	O
more	O
than	O
just	O
2	O
elements	O
.	O
If	O
you	O
look	O
at	O
the	O
source	O
code	O
of	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
and	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
there	O
is	O
actually	O
not	O
much	O
created	O
.	O
The	O
first	O
just	O
wraps	O
the	O
array	O
without	O
copying	O
it	O
,	O
the	O
second	O
just	O
wraps	O
the	O
list	O
,	O
making	O
changes	O
to	O
it	O
unavailable	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
20358917	O
Very	O
simply	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
12552863	O
,	O
answer	O
-	O
18496449	O
The	O
first	O
style	O
is	O
the	O
one	O
suggested	O
by	O
Oracle	O
.	O
BufferedWriter	B-api_mention
doesn	O
'	O
t	O
throw	O
checked	O
exceptions	O
,	O
so	O
if	O
any	O
exception	O
is	O
thrown	O
,	O
the	O
program	O
is	O
not	O
expected	O
to	O
recover	O
from	O
it	O
,	O
making	O
resource	O
recover	O
mostly	O
moot	O
.	O
Mostly	O
because	O
it	O
could	O
happen	O
in	O
a	O
thread	O
,	O
with	O
the	O
thread	O
dieing	O
but	O
the	O
program	O
still	O
continuing	O
-	O
-	O
say	O
,	O
there	O
was	O
a	O
temporary	O
memory	O
outage	O
that	O
wasn	O
'	O
t	O
long	O
enough	O
to	O
seriously	O
impair	O
the	O
rest	O
of	O
the	O
program	O
.	O
It	O
'	O
s	O
a	O
rather	O
corner	O
case	O
,	O
though	O
,	O
and	O
if	O
it	O
happens	O
often	O
enough	O
to	O
make	O
resource	O
leak	O
a	O
problem	O
,	O
the	O
try	O
-	O
with	O
-	O
resources	O
is	O
the	O
least	O
of	O
your	O
problems	O
.	O
Question	O
-	O
12575990	O
,	O
answer	O
-	O
12576219	O
A	O
Java	O
Date	B-api_mention
is	O
a	O
container	O
for	O
the	O
number	O
of	O
milliseconds	O
since	O
January	O
1	O
,	O
1970	O
,	O
00	O
:	O
00	O
:	O
00	O
GMT	O
.	O
When	O
you	O
use	O
something	O
like	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
Java	O
uses	O
Date	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
print	O
the	O
contents	O
.	O
The	O
only	O
way	O
to	O
change	O
it	O
is	O
to	O
override	O
Date	O
and	O
provide	O
your	O
own	O
implementation	O
of	O
Date	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Now	O
before	O
you	O
fire	O
up	O
your	O
IDE	O
and	O
try	O
this	O
,	O
I	O
wouldn	O
'	O
t	O
;	O
it	O
will	O
only	O
complicate	O
matters	O
.	O
You	O
are	O
better	O
off	O
formatting	O
the	O
date	O
to	O
the	O
format	O
you	O
want	O
to	O
use	O
(	O
or	O
display	O
)	O
.	O
What	O
you	O
can	O
do	O
,	O
is	O
format	O
the	O
date	O
.	O
#	O
pre	O
These	O
are	O
actually	O
the	O
same	O
date	O
,	O
represented	O
differently	O
.	O
Question	O
-	O
18723596	O
String	B-api_mention
x	O
=	O
(	O
String	B-api_mention
)	O
null	O
;	O
Why	O
there	O
is	O
no	O
exception	O
in	O
this	O
statement	O
?	O
#	O
pre	O
It	O
prints	O
null	O
.	O
But	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
should	O
throw	O
a	O
null	O
pointer	O
exception	O
.	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
10827945	O
The	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
overloaded	O
to	O
accept	O
both	O
a	O
primitive	O
char	O
and	O
a	O
CharSequence	O
as	O
arguments	O
.	O
Now	O
as	O
far	O
as	O
the	O
performance	O
is	O
concerned	O
,	O
the	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
a	O
bit	O
faster	O
than	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
the	O
later	O
first	O
compiles	O
the	O
regex	O
pattern	O
and	O
then	O
matches	O
before	O
finally	O
replacing	O
whereas	O
the	O
former	O
simply	O
matches	O
for	O
the	O
provided	O
argument	O
and	O
replaces	O
.	O
Since	O
we	O
know	O
the	O
regex	O
pattern	O
matching	O
is	O
a	O
bit	O
more	O
complex	O
and	O
consequently	O
slower	O
,	O
then	O
preferring	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
over	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
suggested	O
whenever	O
possible	O
.	O
For	O
example	O
,	O
for	O
simple	O
substitutions	O
like	O
you	O
mentioned	O
,	O
it	O
is	O
better	O
to	O
use	O
:	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
of	O
:	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
:	O
the	O
above	O
conversion	O
method	O
arguments	O
are	O
system	O
-	O
dependent	O
.	O
Question	O
-	O
22740464	O
,	O
answer	O
-	O
37436520	O
Just	O
do	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
where	O
identity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
static	O
import	O
of	O
Function	B-api_mention
.	I-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Concatenating	O
multiple	O
streams	O
into	O
one	O
stream	O
is	O
the	O
same	O
as	O
flattening	O
a	O
stream	O
.	O
However	O
,	O
unfortunately	O
,	O
for	O
some	O
reason	O
there	O
is	O
no	O
flatten	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
Stream	B-api_mention
,	O
so	O
you	O
have	O
to	O
use	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
the	O
identity	O
function	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28465634	O
I	O
think	O
there	O
are	O
very	O
few	O
differences	O
between	O
the	O
two	O
when	O
you	O
look	O
closely	O
enough	O
.	O
At	O
it	O
'	O
s	O
face	O
,	O
an	O
IEnumerable	O
does	O
appear	O
to	O
be	O
a	O
reusable	O
construct	O
:	O
#	O
pre	O
However	O
,	O
the	O
compiler	O
is	O
actually	O
doing	O
a	O
little	O
bit	O
of	O
work	O
to	O
help	O
us	O
out	O
;	O
it	O
generates	O
the	O
following	O
code	O
:	O
#	O
pre	O
Each	O
time	O
you	O
would	O
actually	O
iterate	O
over	O
the	O
enumerable	O
,	O
the	O
compiler	O
creates	O
an	O
enumerator	O
.	O
The	O
enumerator	O
is	O
not	O
reusable	O
;	O
further	O
calls	O
to	O
MoveNext	O
will	O
just	O
return	O
false	O
,	O
and	O
there	O
is	O
no	O
way	O
to	O
reset	O
it	O
to	O
the	O
beginning	O
.	O
If	O
you	O
want	O
to	O
iterate	O
over	O
the	O
numbers	O
again	O
,	O
you	O
will	O
need	O
to	O
create	O
another	O
enumerator	O
instance	O
.	O
To	O
better	O
illustrate	O
that	O
the	O
IEnumerable	O
has	O
(	O
can	O
have	O
)	O
the	O
same	O
'	O
feature	O
'	O
as	O
a	O
Java	O
Stream	B-api_mention
,	O
consider	O
a	O
enumerable	O
whose	O
source	O
of	O
the	O
numbers	O
is	O
not	O
a	O
static	O
collection	O
.	O
For	O
example	O
,	O
we	O
can	O
create	O
an	O
enumerable	O
object	O
which	O
generates	O
a	O
sequence	O
of	O
5	O
random	O
numbers	O
:	O
#	O
pre	O
Now	O
we	O
have	O
very	O
similar	O
code	O
to	O
the	O
previous	O
array	O
-	O
based	O
enumerable	O
,	O
but	O
with	O
a	O
second	O
iteration	O
over	O
numbers	O
:	O
#	O
pre	O
The	O
second	O
time	O
we	O
iterate	O
over	O
numbers	O
we	O
will	O
get	O
a	O
different	O
sequence	O
of	O
numbers	O
,	O
which	O
isn	O
'	O
t	O
reusable	O
in	O
the	O
same	O
sense	O
.	O
Or	O
,	O
we	O
could	O
have	O
written	O
the	O
RandomNumberStream	O
to	O
thrown	O
an	O
exception	O
if	O
you	O
try	O
to	O
iterate	O
over	O
it	O
multiple	O
times	O
,	O
making	O
the	O
enumerable	O
actually	O
unusable	O
(	O
like	O
a	O
Java	O
Stream	B-api_mention
)	O
.	O
Also	O
,	O
what	O
does	O
your	O
enumerable	O
-	O
based	O
quick	O
sort	O
mean	O
when	O
applied	O
to	O
a	O
RandomNumberStream	O
?	O
Conclusion	O
So	O
,	O
the	O
biggest	O
difference	O
is	O
that	O
.	O
NET	O
allows	O
you	O
to	O
reuse	O
an	O
IEnumerable	O
by	O
implicitly	O
creating	O
a	O
new	O
IEnumerator	O
in	O
the	O
background	O
whenever	O
it	O
would	O
need	O
to	O
access	O
elements	O
in	O
the	O
sequence	O
.	O
This	O
implicit	O
behavior	O
is	O
often	O
useful	O
(	O
and	O
'	O
powerful	O
'	O
as	O
you	O
state	O
)	O
,	O
because	O
we	O
can	O
repeatedly	O
iterate	O
over	O
a	O
collection	O
.	O
But	O
sometimes	O
,	O
this	O
implicit	O
behavior	O
can	O
actually	O
cause	O
problems	O
.	O
If	O
your	O
data	O
source	O
is	O
not	O
static	O
,	O
or	O
is	O
costly	O
to	O
access	O
(	O
like	O
a	O
database	O
or	O
web	O
site	O
)	O
,	O
then	O
a	O
lot	O
of	O
assumptions	O
about	O
IEnumerable	O
have	O
to	O
be	O
discarded	O
;	O
reuse	O
is	O
not	O
that	O
straight	O
-	O
forward	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
15962949	O
If	O
you	O
want	O
to	O
make	O
a	O
copy	O
of	O
:	O
int	O
[	O
]	O
a	O
=	O
{	O
1	O
,	O
2	O
,	O
3	O
,	O
4	O
,	O
5	O
}	O
;	O
This	O
is	O
the	O
way	O
to	O
go	O
:	O
int	O
[	O
]	O
b	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
may	O
be	O
faster	O
than	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
small	O
arrays	O
.	O
Both	O
copy	O
elements	O
equally	O
fast	O
but	O
clone	B-api_mention
(	I-api_mention
)	I-api_mention
returns	O
Object	B-api_mention
so	O
the	O
compiler	O
has	O
to	O
insert	O
an	O
implicit	O
cast	O
to	O
int	O
[	O
]	O
.	O
You	O
can	O
see	O
it	O
in	O
the	O
bytecode	O
,	O
something	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
20375176	O
,	O
answer	O
-	O
20375622	O
A	O
parallel	O
stream	O
has	O
a	O
much	O
higher	O
overhead	O
compared	O
to	O
a	O
sequential	O
one	O
.	O
Coordinating	O
the	O
threads	O
takes	O
a	O
significant	O
amount	O
of	O
time	O
.	O
I	O
would	O
use	O
sequential	O
streams	O
by	O
default	O
and	O
only	O
consider	O
parallel	O
ones	O
if	O
#	O
li	O
I	O
have	O
a	O
massive	O
amount	O
of	O
items	O
to	O
process	O
(	O
or	O
the	O
processing	O
of	O
each	O
item	O
takes	O
time	O
and	O
is	O
parallelizable	O
)	O
#	O
li	O
I	O
have	O
a	O
performance	O
problem	O
in	O
the	O
first	O
place	O
#	O
li	O
I	O
don	O
'	O
t	O
already	O
run	O
the	O
process	O
in	O
a	O
multi	O
-	O
thread	O
environment	O
(	O
for	O
example	O
:	O
in	O
a	O
web	O
container	O
,	O
if	O
I	O
already	O
have	O
many	O
requests	O
to	O
process	O
in	O
parallel	O
,	O
adding	O
an	O
additional	O
layer	O
of	O
parallelism	O
inside	O
each	O
request	O
could	O
have	O
more	O
negative	O
than	O
positive	O
effects	O
)	O
In	O
your	O
example	O
,	O
the	O
performance	O
will	O
anyway	O
be	O
driven	O
by	O
the	O
synchronized	O
access	O
to	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
making	O
this	O
process	O
parallel	O
will	O
have	O
no	O
effect	O
,	O
or	O
even	O
a	O
negative	O
one	O
.	O
Moreover	O
,	O
remember	O
that	O
parallel	O
streams	O
don	O
'	O
t	O
magically	O
solve	O
all	O
the	O
synchronization	O
problems	O
.	O
If	O
a	O
shared	O
resource	O
is	O
used	O
by	O
the	O
predicates	O
and	O
functions	O
used	O
in	O
the	O
process	O
,	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
that	O
everything	O
is	O
thread	O
-	O
safe	O
.	O
In	O
particular	O
,	O
side	O
effects	O
are	O
tings	O
you	O
really	O
have	O
to	O
worry	O
about	O
if	O
you	O
go	O
parallel	O
.	O
In	O
any	O
case	O
,	O
measure	O
,	O
don	O
'	O
t	O
guess	O
!	O
Only	O
a	O
measurement	O
will	O
tell	O
you	O
if	O
the	O
parallelism	O
is	O
worth	O
it	O
or	O
not	O
.	O
Question	O
-	O
27482579	O
How	O
is	O
the	O
compiler	O
not	O
complaining	O
when	O
I	O
write	O
the	O
following	O
code	O
?	O
#	O
pre	O
Even	O
though	O
it	O
is	O
an	O
instance	O
of	O
the	O
same	O
class	O
in	O
which	O
testPrivate	O
is	O
written	O
,	O
shouldn	O
'	O
t	O
it	O
give	O
a	O
compilation	O
error	O
at	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
After	O
all	O
,	O
I	O
am	O
trying	O
to	O
access	O
a	O
private	O
variable	O
directly	O
.	O
The	O
code	O
even	O
runs	O
fine	O
.	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
36771568	O
In	O
Eclipse	O
,	O
Go	O
to	O
your	O
class	O
,	O
Right	O
click	O
-	O
>	O
source	O
-	O
>	O
Generate	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
;	O
It	O
will	O
override	O
the	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
and	O
print	O
the	O
object	O
of	O
that	O
class	O
.	O
Question	O
-	O
19757300	O
,	O
answer	O
-	O
19759653	O
You	O
can	O
also	O
propagate	O
your	O
static	O
pain	O
with	O
lambdas	O
,	O
so	O
the	O
whole	O
thing	O
looks	O
readable	O
:	O
s	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
propagate	O
here	O
receives	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
concurrent	I-api_mention
.	I-api_mention
Callable	I-api_mention
as	O
a	O
parameter	O
and	O
converts	O
any	O
exception	O
caught	O
during	O
the	O
call	O
into	O
RuntimeException	B-api_mention
.	O
There	O
is	O
a	O
similar	O
conversion	O
method	O
Throwables	B-api_mention
#	I-api_mention
propagate	I-api_mention
(	I-api_mention
Throwable	I-api_mention
)	I-api_mention
in	O
Guava	O
.	O
This	O
method	O
seems	O
being	O
essential	O
for	O
lambda	O
method	O
chaining	O
,	O
so	O
I	O
hope	O
one	O
day	O
it	O
will	O
be	O
added	O
to	O
one	O
of	O
the	O
popular	O
libs	O
or	O
this	O
propagating	O
behavior	O
would	O
be	O
by	O
default	O
.	O
#	O
pre	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
30270403	O
There	O
is	O
a	O
function	O
called	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
that	O
can	O
remove	O
all	O
whitespaces	O
by	O
replacing	O
them	O
with	O
whatever	O
you	O
want	O
.	O
As	O
an	O
example	O
#	O
pre	O
will	O
give	O
you	O
:	O
First	O
:	O
15	O
.	O
94	O
,	O
Second	O
:	O
16	O
.	O
01	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
35931153	O
If	O
you	O
directly	O
call	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
not	O
using	O
multi	O
-	O
threading	O
feature	O
since	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
executed	O
as	O
part	O
of	O
caller	O
thread	O
.	O
If	O
you	O
call	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
Thread	B-api_mention
,	O
the	O
Java	O
Virtual	O
Machine	O
will	O
call	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
and	O
two	O
threads	O
will	O
run	O
concurrently	O
-	O
Current	O
Thread	B-api_mention
(	O
main	O
(	O
args	O
)	O
in	O
your	O
example	O
)	O
and	O
Other	O
Thread	B-api_mention
(	O
Runnable	B-api_mention
r1	O
in	O
your	O
example	O
)	O
.	O
Have	O
a	O
look	O
at	O
source	O
code	O
of	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
Thread	B-api_mention
class	O
#	O
pre	O
In	O
above	O
code	O
,	O
you	O
can	O
'	O
t	O
see	O
invocation	O
to	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
private	O
native	O
void	O
start0	O
(	O
args	O
)	O
is	O
responsible	O
for	O
calling	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
JVM	O
executes	O
this	O
native	O
method	O
.	O
Question	O
-	O
8189466	O
Note	O
:	O
I	O
am	O
aware	O
of	O
the	O
Iterator	B-api_mention
#	I-api_mention
remove	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
In	O
the	O
following	O
code	O
sample	O
,	O
I	O
don	O
'	O
t	O
understand	O
why	O
the	O
List	B-api_mention
.	I-api_mention
remove	I-api_mention
in	O
main	O
method	O
throws	O
ConcurrentModificationException	B-api_mention
but	O
not	O
in	O
the	O
remove	B-api_mention
method	O
.	O
#	O
pre	O
Question	O
-	O
30217236	O
,	O
answer	O
-	O
30217518	O
Presumably	O
,	O
you	O
are	O
not	O
calling	O
your	O
generic	O
method	O
in	O
a	O
generic	O
fashion	O
,	O
so	O
it	O
'	O
s	O
treated	O
like	O
a	O
call	O
to	O
x	O
(	O
args	O
)	O
.	O
In	O
this	O
example	O
:	O
#	O
pre	O
The	O
first	O
call	O
to	O
x	O
is	O
not	O
made	O
generically	O
so	O
it	O
compiles	O
.	O
The	O
second	O
call	O
equates	O
T	O
to	O
String	B-api_mention
,	O
so	O
it	O
fails	O
because	O
1	O
and	O
2	O
are	O
not	O
Strings	O
.	O
The	O
third	O
call	O
compiles	O
because	O
it	O
properly	O
passes	O
in	O
Strings	O
.	O
Question	O
-	O
31696485	O
,	O
answer	O
-	O
31696584	O
Your	O
question	O
is	O
based	O
on	O
assumption	O
that	O
the	O
code	O
which	O
may	O
throw	O
NullPointerException	B-api_mention
is	O
worse	O
than	O
the	O
code	O
which	O
may	O
not	O
.	O
This	O
assumption	O
is	O
wrong	O
.	O
If	O
you	O
expect	O
that	O
your	O
foobar	O
is	O
never	O
null	O
due	O
to	O
the	O
program	O
logic	O
,	O
it	O
'	O
s	O
much	O
better	O
to	O
use	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
you	O
will	O
see	O
a	O
NullPointerException	B-api_mention
which	O
will	O
indicate	O
that	O
your	O
program	O
has	O
a	O
bug	O
.	O
If	O
you	O
use	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
the	O
foobar	O
happens	O
to	O
be	O
null	O
due	O
to	O
the	O
bug	O
,	O
then	O
your	O
program	O
will	O
silently	O
continue	O
working	O
incorrectly	O
,	O
which	O
may	O
be	O
a	O
bigger	O
disaster	O
.	O
This	O
way	O
an	O
error	O
may	O
occur	O
much	O
later	O
and	O
it	O
would	O
be	O
much	O
harder	O
to	O
understand	O
at	O
which	O
point	O
it	O
went	O
wrong	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
16229988	O
My	O
solution	O
is	O
to	O
do	O
a	O
"	O
extract	O
method	O
"	O
refactoring	O
,	O
as	O
following	O
:	O
#	O
pre	O
printToFile	B-api_mention
can	O
be	O
written	O
either	O
#	O
pre	O
or	O
#	O
pre	O
For	O
class	O
lib	O
designers	O
,	O
I	O
will	O
suggest	O
them	O
extend	O
the	O
AutoClosable	B-api_mention
interface	O
with	O
an	O
additional	O
method	O
to	O
suppress	O
the	O
close	O
.	O
In	O
this	O
case	O
we	O
can	O
then	O
manually	O
control	O
the	O
close	O
behavior	O
.	O
For	O
language	O
designers	O
,	O
the	O
lesson	O
is	O
that	O
adding	O
a	O
new	O
feature	O
could	O
mean	O
adding	O
a	O
lot	O
others	O
.	O
In	O
this	O
Java	O
case	O
,	O
obviously	O
ARM	O
feature	O
will	O
work	O
better	O
with	O
a	O
resource	O
ownership	O
transfer	O
mechanism	O
.	O
UPDATE	O
Originally	O
the	O
code	O
above	O
requires	O
@	O
SuppressWarning	O
since	O
the	O
BufferedWriter	B-api_mention
inside	O
the	O
function	O
requires	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
As	O
suggested	O
by	O
a	O
comment	O
,	O
if	O
flush	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
be	O
called	O
before	O
close	O
the	O
writer	O
,	O
we	O
need	O
to	O
do	O
so	O
before	O
any	O
return	B-api_mention
(	O
implicit	O
or	O
explicit	O
)	O
statements	O
inside	O
the	O
try	O
block	O
.	O
There	O
is	O
currently	O
no	O
way	O
to	O
ensure	O
the	O
caller	O
doing	O
this	O
I	O
think	O
,	O
so	O
this	O
must	O
be	O
documented	O
for	O
writeFileWriter	B-api_mention
.	O
UPDATE	O
AGAIN	O
The	O
above	O
update	O
makes	O
@	O
SuppressWarning	O
unnecessary	O
since	O
it	O
require	O
the	O
function	O
to	O
return	O
the	O
resource	O
to	O
the	O
caller	O
,	O
so	O
itself	O
does	O
not	O
necessary	O
being	O
closed	O
.	O
Unfortunately	O
,	O
this	O
pull	O
us	O
back	O
to	O
the	O
beginning	O
of	O
the	O
situation	O
:	O
the	O
warning	O
is	O
now	O
moved	O
back	O
to	O
the	O
caller	O
side	O
.	O
So	O
to	O
properly	O
solve	O
this	O
,	O
we	O
need	O
a	O
customised	O
AutoClosable	B-api_mention
that	O
whenever	O
it	O
closes	O
,	O
the	O
underline	O
BufferedWriter	B-api_mention
shall	O
be	O
flush	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
ed	O
.	O
Actually	O
,	O
this	O
shows	O
us	O
another	O
way	O
to	O
bypass	O
the	O
warning	O
,	O
since	O
the	O
BufferWriter	B-api_mention
is	O
never	O
closed	O
in	O
either	O
way	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
32302353	O
To	O
concur	O
with	O
earlier	O
comments	O
:	O
simplest	O
is	O
(	O
2	O
)	O
to	O
use	O
Closeable	B-api_mention
resources	O
and	O
declare	O
them	O
in	O
order	O
in	O
the	O
try	O
-	O
with	O
-	O
resources	O
clause	O
.	O
If	O
you	O
only	O
have	O
AutoCloseable	B-api_mention
,	O
you	O
can	O
wrap	O
them	O
in	O
another	O
(	O
nested	O
)	O
class	O
that	O
just	O
checks	O
that	O
close	B-api_mention
is	O
only	O
called	O
once	O
(	O
Facade	O
Pattern	O
)	O
,	O
e	O
.	O
g	O
.	O
by	O
having	O
private	O
bool	O
isClosed	O
;	O
.	O
In	O
practice	O
even	O
Oracle	O
just	O
(	O
1	O
)	O
chains	O
the	O
constructors	O
and	O
doesn	O
'	O
t	O
correctly	O
handle	O
exceptions	O
partway	O
through	O
the	O
chain	O
.	O
Alternatively	O
,	O
you	O
can	O
manually	O
create	O
a	O
chained	O
resource	O
,	O
using	O
a	O
static	O
factory	O
method	O
;	O
this	O
encapsulates	O
the	O
chain	O
,	O
and	O
handle	O
cleanup	O
if	O
it	O
fails	O
part	O
-	O
way	O
:	O
#	O
pre	O
The	O
complexity	O
comes	O
from	O
handling	O
multiple	O
exceptions	O
;	O
otherwise	O
it	O
'	O
s	O
just	O
"	O
close	O
resources	O
that	O
you	O
'	O
ve	O
acquired	O
so	O
far	O
"	O
.	O
A	O
common	O
practice	O
seems	O
to	O
be	O
to	O
first	O
initialize	O
the	O
variable	O
that	O
holds	O
the	O
object	O
that	O
holds	O
the	O
resource	O
to	O
null	O
(	O
here	O
fileWriter	B-api_mention
)	O
,	O
and	O
then	O
include	O
a	O
null	O
check	O
in	O
the	O
cleanup	O
,	O
but	O
that	O
seems	O
unnecessary	O
:	O
if	O
the	O
constructor	O
fails	O
,	O
there	O
'	O
s	O
nothing	O
to	O
clean	O
up	O
,	O
so	O
we	O
can	O
just	O
let	O
that	O
exception	O
propagate	O
,	O
which	O
simplifies	O
the	O
code	O
a	O
little	O
.	O
You	O
could	O
probably	O
do	O
this	O
generically	O
:	O
#	O
pre	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
22269778	O
There	O
actually	O
is	O
a	O
trick	O
how	O
to	O
execute	O
a	O
parallel	O
operation	O
in	O
a	O
specific	O
fork	O
-	O
join	O
pool	O
.	O
If	O
you	O
execute	O
it	O
as	O
a	O
task	O
in	O
a	O
fork	O
-	O
join	O
pool	O
,	O
it	O
stays	O
there	O
and	O
does	O
not	O
use	O
the	O
common	O
one	O
.	O
#	O
pre	O
The	O
trick	O
is	O
based	O
on	O
ForkJoinTask	B-api_mention
.	I-api_mention
fork	I-api_mention
which	O
specifies	O
:	O
"	O
Arranges	O
to	O
asynchronously	O
execute	O
this	O
task	O
in	O
the	O
pool	O
the	O
current	O
task	O
is	O
running	O
in	O
,	O
if	O
applicable	O
,	O
or	O
using	O
the	O
ForkJoinPool	B-api_mention
.	I-api_mention
commonPool	I-api_mention
(	I-api_mention
)	I-api_mention
if	O
not	O
inForkJoinPool	B-api_mention
(	I-api_mention
)	I-api_mention
"	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
15656208	O
This	O
is	O
favorite	O
interview	O
question	O
.	O
Interviewer	O
tries	O
to	O
find	O
out	O
here	O
,	O
how	O
much	O
you	O
understand	O
about	O
behavior	O
of	O
objects	O
with	O
respect	O
to	O
constructors	O
,	O
methods	O
,	O
class	O
variables	O
(	O
static	O
variables	O
)	O
,	O
instance	O
variables	O
.	O
#	O
pre	O
In	O
above	O
case	O
we	O
have	O
defined	O
Test	O
constructor	O
and	O
setFoo	O
method	O
.	O
About	O
constructor	O
:	O
Constructor	O
can	O
be	O
invoked	O
only	O
one	O
time	O
per	O
object	O
creation	O
by	O
using	O
new	O
keyword	O
.	O
Programmer	O
cannot	O
invoke	O
constructor	O
many	O
times	O
because	O
constructor	O
are	O
designed	O
so	O
.	O
About	O
method	O
:	O
Method	O
can	O
be	O
invoked	O
as	O
many	O
time	O
as	O
programmer	O
wants	O
and	O
compiler	O
knows	O
it	O
programmer	O
may	O
invoke	O
method	O
zero	O
or	O
multiple	O
time	O
.	O
Scenario	O
1	O
private	O
final	O
List	B-api_mention
foo	O
;	O
/	O
/	O
1	O
foo	O
is	O
an	O
instance	O
variable	O
.	O
When	O
we	O
create	O
Test	O
class	O
'	O
object	O
then	O
instance	O
variable	O
foo	O
will	O
be	O
copied	O
inside	O
object	O
of	O
Test	O
class	O
.	O
If	O
we	O
assign	O
foo	O
inside	O
constructor	O
then	O
compiler	O
know	O
that	O
Constructor	O
will	O
be	O
invoked	O
only	O
one	O
time	O
.	O
so	O
there	O
is	O
no	O
problem	O
to	O
assign	O
it	O
inside	O
constructor	O
.	O
If	O
we	O
assign	O
foo	O
inside	O
method	O
then	O
compiler	O
knows	O
that	O
method	O
may	O
be	O
invoked	O
multiple	O
time	O
.	O
So	O
value	O
will	O
have	O
to	O
be	O
changed	O
multiple	O
time	O
which	O
is	O
not	O
allowed	O
for	O
final	O
variable	O
.	O
You	O
can	O
assign	O
value	O
to	O
the	O
final	O
variable	O
only	O
one	O
time	O
.	O
So	O
compiler	O
decides	O
constructor	O
is	O
good	O
choice	O
!	O
Scenario	O
2	O
private	O
static	O
final	O
List	B-api_mention
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
foo	O
is	O
now	O
static	O
variable	O
.	O
When	O
we	O
create	O
object	O
of	O
Test	O
class	O
then	O
foo	O
will	O
not	O
be	O
copied	O
to	O
the	O
object	O
of	O
Test	O
class	O
because	O
foo	O
is	O
static	O
.	O
Now	O
foo	O
is	O
not	O
the	O
property	O
of	O
each	O
object	O
.	O
This	O
is	O
the	O
property	O
of	O
Test	O
class	O
.	O
But	O
foo	O
can	O
be	O
seen	O
by	O
many	O
objects	O
and	O
if	O
every	O
object	O
which	O
is	O
created	O
by	O
using	O
new	O
keyword	O
which	O
ultimately	O
invoke	O
Test	O
constructor	O
then	O
value	O
will	O
be	O
changed	O
at	O
the	O
time	O
of	O
multiple	O
object	O
creation	O
(	O
Remember	O
static	O
foo	O
is	O
not	O
copied	O
in	O
every	O
object	O
now	O
but	O
is	O
shared	O
between	O
multiple	O
objects	O
.	O
)	O
Scenario	O
3	O
t	O
.	O
foo	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
Modification	O
-	O
2	O
Above	O
Modification	O
-	O
2	O
is	O
from	O
your	O
question	O
.	O
In	O
above	O
case	O
you	O
are	O
not	O
changing	O
first	O
referenced	O
object	O
but	O
you	O
are	O
adding	O
contents	O
inside	O
foo	O
which	O
is	O
allowed	O
.	O
Compiler	O
complains	O
if	O
you	O
try	O
to	O
assign	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
object	O
to	O
the	O
foo	O
reference	O
variable	O
.	O
Rule	O
is	O
that	O
if	O
you	O
have	O
initialized	O
object	O
to	O
final	O
reference	O
variable	O
then	O
you	O
cannot	O
change	O
it	O
to	O
refer	O
different	O
ArrayList	B-api_mention
object	O
.	O
(	O
in	O
this	O
case	O
ArrayList	B-api_mention
)	O
final	O
class	O
cannot	O
be	O
subclassed	O
final	O
methods	O
cannot	O
be	O
overridden	O
.	O
(	O
This	O
method	O
is	O
in	O
superclass	O
)	O
final	O
methods	O
can	O
override	O
.	O
(	O
Read	O
this	O
in	O
grammatical	O
way	O
.	O
This	O
method	O
is	O
in	O
subclass	O
)	O
Question	O
-	O
27747562	O
,	O
answer	O
-	O
27747702	O
A	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
could	O
very	O
well	O
be	O
an	O
Item	O
.	O
See	O
for	O
example	O
:	O
#	O
pre	O
A	O
cast	O
tells	O
the	O
compiler	O
:	O
"	O
I	O
know	O
you	O
can	O
'	O
t	O
be	O
sure	O
that	O
this	O
is	O
a	O
object	O
of	O
type	O
Item	O
,	O
but	O
I	O
know	O
better	O
than	O
you	O
,	O
so	O
please	O
compile	O
"	O
.	O
The	O
compiler	O
will	O
only	O
refuse	O
to	O
compile	O
that	O
if	O
it	O
'	O
s	O
impossible	O
for	O
the	O
returned	O
object	O
to	O
be	O
an	O
instance	O
of	O
Item	B-api_mention
(	O
like	O
,	O
for	O
example	O
,	O
Integer	B-api_mention
can	O
'	O
t	O
ever	O
be	O
a	O
String	B-api_mention
)	O
At	O
runtime	O
,	O
the	O
type	O
of	O
the	O
actual	O
object	O
returned	O
by	O
the	O
method	O
will	O
be	O
checked	O
,	O
and	O
if	O
it	O
'	O
s	O
not	O
actually	O
an	O
object	O
of	O
type	O
Item	O
,	O
you	O
'	O
ll	O
get	O
a	O
ClassCastException	O
.	O
Question	O
-	O
30522698	O
The	O
problem	O
I	O
would	O
like	O
to	O
be	O
able	O
to	O
override	O
my	O
apps	O
resources	O
such	O
as	O
R	O
.	O
colour	O
.	O
brand	O
_	O
colour	O
or	O
R	O
.	O
drawable	O
.	O
ic	O
_	O
action	O
_	O
start	O
at	O
runtime	O
.	O
My	O
application	O
connects	O
to	O
a	O
CMS	O
system	O
that	O
will	O
provide	O
branding	O
colours	O
and	O
images	O
.	O
Once	O
the	O
app	O
has	O
downloaded	O
the	O
CMS	O
data	O
it	O
needs	O
to	O
be	O
able	O
to	O
re	O
-	O
skin	O
itself	O
.	O
I	O
know	O
what	O
you	O
are	O
about	O
to	O
say	O
-	O
overriding	O
resources	O
at	O
runtime	O
is	O
not	O
possible	O
.	O
Except	O
that	O
it	O
kinda	O
is	O
.	O
In	O
particular	O
I	O
have	O
found	O
this	O
Bachelor	O
Thesis	O
from	O
2012	O
which	O
explains	O
the	O
basic	O
concept	O
-	O
The	O
Activity	O
class	O
in	O
android	O
extends	O
ContextWrapper	O
,	O
which	O
contains	O
the	O
attachBaseContext	O
method	O
.	O
You	O
can	O
override	O
attachBaseContext	O
to	O
wrap	O
the	O
Context	O
with	O
your	O
own	O
custom	O
class	O
which	O
overrides	O
methods	O
such	O
as	O
getColor	O
and	O
getDrawable	O
.	O
Your	O
own	O
implementation	O
of	O
getColor	O
could	O
look	O
the	O
colour	O
up	O
however	O
it	O
wanted	O
.	O
The	O
Calligraphy	O
library	O
uses	O
a	O
similar	O
approach	O
to	O
inject	O
a	O
custom	O
LayoutInflator	O
which	O
can	O
deal	O
with	O
loading	O
custom	O
fonts	O
.	O
The	O
code	O
I	O
have	O
created	O
a	O
simple	O
Activity	O
which	O
uses	O
this	O
approach	O
to	O
override	O
the	O
loading	O
of	O
a	O
colour	O
.	O
#	O
pre	O
The	O
problem	O
is	O
,	O
it	O
doesn	O
'	O
t	O
work	O
!	O
The	O
logging	O
shows	O
calls	O
to	O
load	O
resources	O
such	O
as	O
layout	O
/	O
activity	O
_	O
main	O
and	O
mipmap	O
/	O
ic	O
_	O
launcher	O
however	O
color	O
/	O
theme	O
_	O
colour	O
is	O
never	O
loaded	O
.	O
It	O
seems	O
that	O
the	O
context	O
is	O
being	O
used	O
to	O
create	O
the	O
window	O
and	O
action	O
bar	O
,	O
but	O
not	O
the	O
activity	O
'	O
s	O
content	O
view	O
.	O
My	O
questions	O
is	O
-	O
Where	O
does	O
the	O
layout	O
inflator	O
load	O
resources	O
from	O
,	O
if	O
not	O
the	O
activities	O
context	O
?	O
I	O
would	O
also	O
like	O
to	O
know	O
-	O
Is	O
there	O
a	O
workable	O
way	O
to	O
override	O
the	O
loading	O
of	O
colours	O
and	O
drawables	O
at	O
runtime	O
?	O
A	O
word	O
about	O
alternative	O
approaches	O
I	O
know	O
its	O
possible	O
to	O
theme	O
an	O
app	O
from	O
CMS	O
data	O
other	O
ways	O
-	O
for	O
example	O
we	O
could	O
create	O
a	O
method	O
getCMSColour	O
(	O
args	O
)	O
then	O
inside	O
our	O
onCreate	O
(	O
args	O
)	O
we	O
have	O
a	O
bunch	O
of	O
code	O
along	O
the	O
lines	O
of	O
:	O
myTextView	O
.	O
setTextColour	O
(	O
args	O
)	O
A	O
similar	O
approach	O
could	O
be	O
taken	O
for	O
drawables	O
,	O
strings	O
,	O
etc	O
.	O
However	O
this	O
would	O
result	O
in	O
a	O
large	O
amount	O
of	O
boilerplate	O
code	O
-	O
all	O
of	O
which	O
needs	O
maintaining	O
.	O
When	O
modifying	O
the	O
UI	O
it	O
would	O
be	O
easy	O
to	O
forget	O
to	O
set	O
the	O
colour	O
on	O
a	O
particular	O
view	O
.	O
Wrapping	O
the	O
Context	O
to	O
return	O
our	O
own	O
custom	O
values	O
is	O
'	O
cleaner	O
'	O
and	O
less	O
prone	O
to	O
breakage	O
.	O
I	O
would	O
like	O
to	O
understand	O
why	O
it	O
doesn	O
'	O
t	O
work	O
,	O
before	O
exploring	O
alternative	O
approaches	O
.	O
Question	O
-	O
4772425	O
,	O
answer	O
-	O
4772461	O
Use	O
LocalDateTime	B-api_mention
#	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
or	O
ZonedDateTime	B-api_mention
#	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
if	O
the	O
string	O
happens	O
to	O
contain	O
a	O
time	O
zone	O
part	O
)	O
to	O
parse	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
into	O
a	O
LocalDateTime	B-api_mention
.	O
#	O
pre	O
Use	O
LocalDateTime	B-api_mention
#	I-api_mention
format	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
or	O
ZonedDateTime	B-api_mention
#	I-api_mention
format	I-api_mention
(	I-api_mention
)	I-api_mention
)	O
to	O
format	O
a	O
LocalDateTime	B-api_mention
into	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
.	O
#	O
pre	O
Or	O
,	O
when	O
you	O
'	O
re	O
not	O
on	O
Java	O
8	O
yet	O
,	O
use	O
SimpleDateFormat	B-api_mention
#	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
parse	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
into	O
a	O
Date	B-api_mention
.	O
#	O
pre	O
Use	O
SimpleDateFormat	B-api_mention
#	I-api_mention
format	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
format	O
a	O
Date	B-api_mention
into	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
.	O
#	O
pre	O
See	O
also	O
:	O
#	O
li	O
Java	O
string	O
to	O
date	O
conversion	O
Update	O
:	O
as	O
per	O
your	O
failed	O
attempt	O
:	O
the	O
patterns	O
are	O
case	O
sensitive	O
.	O
Read	O
the	O
java	B-api_mention
.	I-api_mention
text	I-api_mention
.	I-api_mention
SimpleDateFormat	I-api_mention
javadoc	O
what	O
the	O
individual	O
parts	O
stands	O
for	O
.	O
So	O
stands	O
for	O
example	O
M	O
for	O
months	O
and	O
m	O
for	O
minutes	O
.	O
Also	O
,	O
years	O
exist	O
of	O
four	O
digits	O
yyyy	O
,	O
not	O
five	O
yyyyy	O
.	O
Look	O
closer	O
at	O
the	O
code	O
snippets	O
I	O
posted	O
here	O
above	O
.	O
Question	O
-	O
5455794	O
I	O
have	O
a	O
string	O
like	O
this	O
:	O
mysz	O
=	O
StringLiteral	O
;	O
I	O
want	O
to	O
remove	O
the	O
whitespaces	O
in	O
the	O
string	O
.	O
I	O
tried	O
trim	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
this	O
removes	O
only	O
whitespaces	O
before	O
and	O
after	O
the	O
whole	O
string	O
.	O
I	O
also	O
tried	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
then	O
the	O
=	O
also	O
gets	O
removed	O
.	O
How	O
can	O
I	O
achieve	O
a	O
string	O
with	O
:	O
mysz2	O
=	O
StringLiteral	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
30548433	O
I	O
would	O
like	O
to	O
point	O
out	O
that	O
StreamEx	O
does	O
implement	O
Iterable	B-api_mention
(	O
and	O
Stream	B-api_mention
)	O
,	O
as	O
well	O
as	O
a	O
host	O
of	O
other	O
immensely	O
awesome	O
functionality	O
missing	O
from	O
Stream	B-api_mention
.	O
Question	O
-	O
27683759	O
,	O
answer	O
-	O
27684040	O
That	O
line	O
creates	O
an	O
empty	O
list	O
of	O
strings	O
by	O
calling	O
a	O
static	O
method	O
with	O
a	O
generic	O
type	O
parameter	O
.	O
Inside	O
the	O
Collections	B-api_mention
class	O
,	O
there	O
is	O
a	O
static	O
method	O
emptyList	O
declared	O
like	O
:	O
#	O
pre	O
This	O
has	O
a	O
generic	O
type	O
parameter	O
T	B-api_mention
.	O
We	O
call	O
call	O
this	O
method	O
by	O
using	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
T	O
is	O
infered	O
to	O
be	O
a	O
String	B-api_mention
because	O
of	O
the	O
type	O
of	O
list	O
.	O
We	O
can	O
also	O
specify	O
the	O
type	O
of	O
T	O
by	O
putting	O
it	O
in	O
angle	O
brackets	O
when	O
calling	O
emptyList	B-api_mention
.	O
This	O
may	O
be	O
needed	O
if	O
we	O
want	O
a	O
more	O
specific	O
type	O
than	O
is	O
inferred	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
emptyList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
not	O
correct	O
because	O
that	O
placement	O
is	O
only	O
valid	O
when	O
creating	O
instances	O
of	O
generic	O
classes	O
,	O
not	O
calling	O
methods	O
.	O
When	O
using	O
new	O
there	O
are	O
two	O
possible	O
type	O
parameters	O
,	O
the	O
ones	O
before	O
the	O
class	O
name	O
are	O
for	O
the	O
constructor	O
only	O
,	O
and	O
the	O
ones	O
after	O
the	O
class	O
name	O
are	O
for	O
the	O
whole	O
instance	O
,	O
so	O
with	O
the	O
class	O
:	O
#	O
pre	O
We	O
can	O
call	O
its	O
constructor	O
where	O
A	O
is	O
String	O
and	O
B	O
is	O
Integer	O
like	O
:	O
MyClass	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
a	O
=	O
new	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
MyClass	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	O
;	O
or	O
by	O
using	O
type	O
inference	O
:	O
MyClass	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
a	O
=	O
new	O
MyClass	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
See	O
also	O
:	O
#	O
li	O
Generic	O
Methods	O
#	O
li	O
Type	O
Inference	O
Question	O
-	O
23114015	O
,	O
answer	O
-	O
23177907	O
This	O
was	O
not	O
an	O
omission	O
;	O
there	O
was	O
detailed	O
discussion	O
on	O
the	O
EG	O
list	O
in	O
June	O
of	O
2013	O
.	O
The	O
definitive	O
discussion	O
of	O
the	O
Expert	O
Group	O
is	O
rooted	O
at	O
this	O
thread	O
.	O
While	O
it	O
seemed	O
"	O
obvious	O
"	O
(	O
even	O
to	O
the	O
Expert	O
Group	O
,	O
initially	O
)	O
that	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
seemed	O
to	O
make	O
sense	O
on	O
Iterable	B-api_mention
,	O
the	O
fact	O
that	O
Iterable	B-api_mention
was	O
so	O
general	O
became	O
a	O
problem	O
,	O
because	O
the	O
obvious	O
signature	O
:	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
not	O
always	O
what	O
you	O
were	O
going	O
to	O
want	O
.	O
Some	O
things	O
that	O
were	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
would	O
rather	O
have	O
their	O
stream	O
method	O
return	O
an	O
IntStream	B-api_mention
,	O
for	O
example	O
.	O
But	O
putting	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
this	O
high	O
up	O
in	O
the	O
hierarchy	O
would	O
make	O
that	O
impossible	O
.	O
So	O
instead	O
,	O
we	O
made	O
it	O
really	O
easy	O
to	O
make	O
a	O
Stream	B-api_mention
from	O
an	O
Iterable	B-api_mention
,	O
by	O
providing	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
implementation	O
of	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
Collection	B-api_mention
is	O
just	O
:	O
#	O
pre	O
Any	O
client	O
can	O
get	O
the	O
stream	O
they	O
want	O
from	O
an	O
Iterable	O
with	O
:	O
Stream	B-api_mention
s	O
=	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
In	O
the	O
end	O
we	O
concluded	O
that	O
adding	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
Iterable	O
would	O
be	O
a	O
mistake	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276493	O
You	O
can	O
close	O
the	O
outer	O
most	O
stream	O
,	O
in	O
fact	O
you	O
don	O
'	O
t	O
need	O
to	O
retain	O
all	O
the	O
streams	O
wrapped	O
and	O
you	O
can	O
use	O
Java	O
7	O
try	O
-	O
with	O
-	O
resources	O
.	O
#	O
pre	O
If	O
you	O
subscribe	O
to	O
YAGNI	O
,	O
or	O
you	O
-	O
aint	O
-	O
gonna	O
-	O
need	O
-	O
it	O
,	O
you	O
should	O
be	O
only	O
adding	O
code	O
you	O
actually	O
need	O
.	O
You	O
shouldn	O
'	O
t	O
be	O
adding	O
code	O
you	O
imagine	O
you	O
might	O
need	O
but	O
in	O
reality	O
doesn	O
'	O
t	O
do	O
anything	O
useful	O
.	O
Take	O
this	O
example	O
and	O
imagine	O
what	O
could	O
possibly	O
go	O
wrong	O
if	O
you	O
didn	O
'	O
t	O
do	O
this	O
and	O
what	O
the	O
impact	O
would	O
be	O
?	O
#	O
pre	O
Lets	O
start	O
with	O
FileOutputStream	B-api_mention
which	O
calls	O
open	O
to	O
do	O
all	O
the	O
real	O
work	O
.	O
/	O
*	O
*	O
*	O
Opens	O
a	O
file	O
,	O
with	O
the	O
specified	O
name	O
,	O
for	O
overwriting	O
or	O
appending	O
.	O
*	O
@	O
param	O
name	O
name	O
of	O
file	O
to	O
be	O
opened	O
*	O
@	O
param	O
append	O
whether	O
the	O
file	O
is	O
to	O
be	O
opened	O
in	O
append	O
mode	O
*	O
/	O
private	O
native	O
void	O
open	O
(	O
args	O
)	O
throws	O
FileNotFoundException	B-api_mention
;	O
If	O
the	O
file	O
is	O
not	O
found	O
,	O
there	O
is	O
no	O
underlying	O
resource	O
to	O
close	O
,	O
so	O
closing	O
it	O
won	O
'	O
t	O
make	O
any	O
difference	O
.	O
If	O
The	O
file	O
exists	O
,	O
it	O
should	O
be	O
throwing	O
a	O
FileNotFoundException	B-api_mention
.	O
So	O
there	O
is	O
nothing	O
to	O
be	O
gained	O
by	O
trying	O
to	O
close	O
the	O
resource	O
from	O
this	O
line	O
alone	O
.	O
The	O
reason	O
you	O
need	O
to	O
close	O
the	O
file	O
is	O
when	O
the	O
file	O
is	O
opened	O
successfully	O
,	O
but	O
you	O
later	O
get	O
an	O
error	O
.	O
Lets	O
look	O
at	O
the	O
next	O
stream	O
GZIPOutputStream	O
There	O
is	O
code	O
which	O
can	O
throw	O
an	O
exception	O
#	O
pre	O
This	O
writes	O
the	O
header	O
of	O
the	O
file	O
.	O
Now	O
it	O
would	O
be	O
very	O
unusual	O
for	O
you	O
to	O
be	O
able	O
to	O
open	O
a	O
file	O
for	O
writing	O
but	O
not	O
be	O
able	O
to	O
write	O
even	O
8	O
bytes	O
to	O
it	O
,	O
but	O
lets	O
imagine	O
this	O
could	O
happen	O
and	O
we	O
don	O
'	O
t	O
close	O
the	O
file	O
afterwards	O
.	O
What	O
does	O
happen	O
to	O
a	O
file	O
if	O
it	O
is	O
not	O
closed	O
?	O
You	O
don	O
'	O
t	O
get	O
any	O
unflushed	O
writes	O
,	O
they	O
are	O
discarded	O
and	O
in	O
this	O
case	O
,	O
there	O
is	O
no	O
successfully	O
written	O
bytes	O
to	O
the	O
stream	O
which	O
isn	O
'	O
t	O
buffered	O
at	O
this	O
point	O
anyway	O
.	O
But	O
a	O
file	O
which	O
is	O
not	O
closed	O
doesn	O
'	O
t	O
live	O
forever	O
,	O
instead	O
FileOutputStream	B-api_mention
has	O
#	O
pre	O
If	O
you	O
don	O
'	O
t	O
close	O
a	O
file	O
at	O
all	O
,	O
it	O
gets	O
closed	O
anyway	O
,	O
just	O
not	O
immediately	O
(	O
and	O
like	O
I	O
said	O
,	O
data	O
which	O
is	O
left	O
in	O
a	O
buffer	O
will	O
be	O
lost	O
this	O
way	O
,	O
but	O
there	O
is	O
none	O
at	O
this	O
point	O
)	O
What	O
is	O
the	O
consequence	O
of	O
not	O
closing	O
the	O
file	O
immediately	O
?	O
Under	O
normal	O
conditions	O
,	O
you	O
potentially	O
lose	O
some	O
data	O
,	O
and	O
you	O
potentially	O
run	O
out	O
of	O
file	O
descriptors	O
.	O
But	O
if	O
you	O
have	O
a	O
system	O
where	O
you	O
can	O
create	O
files	O
but	O
you	O
can	O
'	O
t	O
write	O
anything	O
to	O
them	O
,	O
you	O
have	O
a	O
bigger	O
problem	O
.	O
i	O
.	O
e	O
.	O
it	O
hard	O
to	O
imagine	O
why	O
you	O
are	O
repeatedly	O
trying	O
to	O
create	O
this	O
file	O
despite	O
the	O
fact	O
you	O
are	O
failing	O
.	O
Both	O
OutputStreamWriter	O
and	O
BufferedWriter	O
don	O
'	O
t	O
throw	O
IOException	B-api_mention
in	O
their	O
constructors	O
,	O
so	O
it	O
not	O
clear	O
what	O
problem	O
they	O
would	O
cause	O
.	O
In	O
The	O
case	O
of	O
BufferedWriter	O
,	O
you	O
could	O
get	O
an	O
OutOfMemoryError	O
.	O
In	O
this	O
case	O
it	O
will	O
immediately	O
trigger	O
a	O
GC	O
,	O
which	O
as	O
we	O
have	O
seen	O
will	O
close	O
the	O
file	O
anyway	O
.	O
Question	O
-	O
13744450	O
,	O
answer	O
-	O
13744816	O
In	O
very	O
simple	O
terms	O
(	O
because	O
the	O
other	O
answers	O
are	O
referring	O
you	O
to	O
all	O
the	O
official	O
design	O
patterns	O
anyway	O
,	O
so	O
look	O
at	O
them	O
for	O
further	O
details	O
)	O
:	O
If	O
you	O
want	O
to	O
have	O
a	O
class	O
which	O
is	O
monitored	O
by	O
other	O
classes	O
in	O
the	O
ecosystem	O
of	O
your	O
program	O
you	O
say	O
that	O
you	O
want	O
the	O
class	O
to	O
be	O
observable	O
.	O
I	O
.	O
e	O
.	O
there	O
might	O
be	O
some	O
changes	O
in	O
its	O
state	O
which	O
you	O
would	O
want	O
to	O
broadcast	O
to	O
the	O
rest	O
of	O
the	O
program	O
.	O
Now	O
,	O
to	O
do	O
this	O
we	O
have	O
to	O
call	O
some	O
kind	O
of	O
method	O
.	O
We	O
don	O
'	O
t	O
want	O
the	O
Observable	B-api_mention
class	O
to	O
be	O
tightly	O
coupled	O
with	O
the	O
classes	O
that	O
are	O
interested	O
in	O
observing	O
it	O
.	O
It	O
doesn	O
'	O
t	O
care	O
who	O
it	O
is	O
as	O
long	O
as	O
it	O
fulfils	O
certain	O
criteria	O
.	O
(	O
Imagine	O
it	O
is	O
a	O
radio	O
station	O
,	O
it	O
doesn	O
'	O
t	O
care	O
who	O
is	O
listening	O
as	O
long	O
as	O
they	O
have	O
an	O
FM	O
radio	O
tuned	O
on	O
their	O
frequency	O
)	O
.	O
To	O
achieve	O
that	O
we	O
use	O
an	O
interface	O
,	O
referred	O
to	O
as	O
the	O
Observer	B-api_mention
.	O
Therefore	O
,	O
the	O
Observable	B-api_mention
class	O
will	O
have	O
a	O
list	O
of	O
Observers	O
(	O
i	O
.	O
e	O
.	O
instances	O
implementing	O
the	O
Observer	B-api_mention
interface	O
methods	O
you	O
might	O
have	O
)	O
.	O
Whenever	O
it	O
wants	O
to	O
broadcast	O
something	O
,	O
it	O
just	O
calls	O
the	O
method	O
on	O
all	O
the	O
observers	O
,	O
one	O
after	O
the	O
other	O
.	O
The	O
last	O
thing	O
to	O
close	O
the	O
puzzle	O
is	O
how	O
will	O
the	O
Observable	B-api_mention
class	O
know	O
who	O
is	O
interested	O
?	O
So	O
the	O
Observable	B-api_mention
class	O
must	O
offer	O
some	O
mechanism	O
to	O
allow	O
Observers	O
to	O
register	O
their	O
interest	O
.	O
A	O
method	O
such	O
as	O
addObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
internally	O
adds	O
the	O
Observer	O
to	O
the	O
list	O
of	O
observers	O
,	O
so	O
that	O
when	O
something	O
important	O
happens	O
,	O
it	O
loops	O
through	O
the	O
list	O
and	O
calls	O
the	O
respective	O
notification	O
method	O
of	O
the	O
Observer	B-api_mention
interface	O
of	O
each	O
instance	O
in	O
the	O
list	O
.	O
It	O
might	O
be	O
that	O
in	O
the	O
interview	O
they	O
did	O
not	O
ask	O
you	O
explicitly	O
about	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observer	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observable	I-api_mention
but	O
about	O
the	O
generic	O
concept	O
.	O
The	O
concept	O
is	O
a	O
design	O
pattern	O
,	O
which	O
Java	O
happens	O
to	O
provide	O
support	O
for	O
directly	O
out	O
of	O
the	O
box	O
to	O
help	O
you	O
implement	O
it	O
quickly	O
when	O
you	O
need	O
it	O
.	O
So	O
I	O
would	O
suggest	O
that	O
you	O
understand	O
the	O
concept	O
rather	O
than	O
the	O
actual	O
methods	O
/	O
classes	O
(	O
which	O
you	O
can	O
look	O
up	O
when	O
you	O
need	O
them	O
)	O
.	O
UPDATE	O
In	O
response	O
to	O
your	O
comment	O
,	O
the	O
actual	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observable	I-api_mention
class	O
offers	O
the	O
following	O
facilities	O
:	O
#	O
li	O
Maintaining	O
a	O
list	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observer	I-api_mention
instances	O
.	O
New	O
instances	O
interested	O
in	O
being	O
notified	O
can	O
be	O
added	O
through	O
addObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
removed	O
through	O
deleteObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Maintaining	O
an	O
internal	O
state	O
,	O
specifying	O
whether	O
the	O
object	O
has	O
changed	O
since	O
the	O
last	O
notification	O
to	O
the	O
observers	O
.	O
This	O
is	O
useful	O
because	O
it	O
separates	O
the	O
part	O
where	O
you	O
say	O
that	O
the	O
Observable	B-api_mention
has	O
changed	O
,	O
from	O
the	O
part	O
where	O
you	O
notify	O
the	O
changes	O
.	O
(	O
E	O
.	O
g	O
.	O
Its	O
useful	O
if	O
you	O
have	O
multiple	O
changes	O
happening	O
and	O
you	O
only	O
want	O
to	O
notify	O
at	O
the	O
end	O
of	O
the	O
process	O
rather	O
than	O
at	O
each	O
small	O
step	O
)	O
.	O
This	O
is	O
done	O
through	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
So	O
you	O
just	O
call	O
it	O
when	O
you	O
changed	O
something	O
to	O
the	O
Observable	B-api_mention
and	O
you	O
want	O
the	O
rest	O
of	O
the	O
Observers	B-api_mention
to	O
eventually	O
know	O
about	O
it	O
.	O
#	O
li	O
Notifying	O
all	O
observers	O
that	O
the	O
specific	O
Observable	B-api_mention
has	O
changed	O
state	O
.	O
This	O
is	O
done	O
through	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
checks	O
if	O
the	O
object	O
has	O
actually	O
changed	O
(	O
i	O
.	O
e	O
.	O
a	O
call	O
to	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
made	O
)	O
before	O
proceeding	O
with	O
the	O
notification	O
.	O
There	O
are	O
2	O
versions	O
,	O
one	O
with	O
no	O
arguments	O
and	O
one	O
with	O
an	O
Object	O
argument	O
,	O
in	O
case	O
you	O
want	O
to	O
pass	O
some	O
extra	O
information	O
with	O
the	O
notification	O
.	O
Internally	O
what	O
happens	O
is	O
that	O
it	O
just	O
iterates	O
through	O
the	O
list	O
of	O
Observer	B-api_mention
instances	O
and	O
calls	O
the	O
update	B-api_mention
(	I-api_mention
Observable	I-api_mention
o	I-api_mention
,	I-api_mention
Object	I-api_mention
arg	I-api_mention
)	I-api_mention
method	O
for	O
each	O
of	O
them	O
.	O
This	O
tells	O
the	O
Observer	B-api_mention
which	O
was	O
the	O
Observable	B-api_mention
object	O
that	O
changed	O
(	O
you	O
could	O
be	O
observing	O
more	O
than	O
one	O
)	O
,	O
and	O
the	O
extra	O
Object	O
arg	O
to	O
potentially	O
carry	O
some	O
extra	O
information	O
(	O
passed	O
through	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
18666710	O
,	O
answer	O
-	O
18792306	O
An	O
important	O
feature	O
of	O
parametric	O
types	O
is	O
the	O
ability	O
to	O
write	O
polymorphic	O
algorithms	O
,	O
i	O
.	O
e	O
.	O
algorithms	O
that	O
operate	O
on	O
a	O
data	O
structure	O
regardless	O
of	O
its	O
parameter	O
value	O
,	O
such	O
as	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
With	O
generics	O
,	O
that	O
'	O
s	O
done	O
with	O
wildcard	O
types	O
:	O
<	O
E	O
extends	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
>	O
void	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
To	O
be	O
truly	O
useful	O
,	O
wildcard	O
types	O
require	O
wildcard	O
capture	O
,	O
and	O
that	O
requires	O
the	O
notion	O
of	O
a	O
type	O
parameter	O
.	O
None	O
of	O
that	O
was	O
available	O
at	O
the	O
time	O
arrays	O
were	O
added	O
to	O
Java	O
,	O
and	O
makings	O
arrays	O
of	O
reference	O
type	O
covariant	O
permitted	O
a	O
far	O
simpler	O
way	O
to	O
permit	O
polymorphic	O
algorithms	O
:	O
void	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
,	O
that	O
simplicity	O
opened	O
a	O
loophole	O
in	O
the	O
static	O
type	O
system	O
:	O
#	O
pre	O
requiring	O
a	O
runtime	O
check	O
of	O
every	O
write	O
access	O
to	O
an	O
array	O
of	O
reference	O
type	O
.	O
In	O
a	O
nutshell	O
,	O
the	O
newer	O
approach	O
embodied	O
by	O
generics	O
makes	O
the	O
type	O
system	O
more	O
complex	O
,	O
but	O
also	O
more	O
statically	O
type	O
safe	O
,	O
while	O
the	O
older	O
approach	O
was	O
simpler	O
,	O
and	O
less	O
statically	O
type	O
safe	O
.	O
The	O
designers	O
of	O
the	O
language	O
opted	O
for	O
the	O
simpler	O
approach	O
,	O
having	O
more	O
important	O
things	O
to	O
do	O
than	O
closing	O
a	O
small	O
loophole	O
in	O
the	O
type	O
system	O
that	O
rarely	O
causes	O
problems	O
.	O
Later	O
,	O
when	O
Java	O
was	O
established	O
,	O
and	O
the	O
pressing	O
needs	O
taken	O
care	O
of	O
,	O
they	O
had	O
the	O
resources	O
to	O
do	O
it	O
right	O
for	O
generics	O
(	O
but	O
changing	O
it	O
for	O
arrays	O
would	O
have	O
broken	O
existing	O
Java	O
programs	O
)	O
.	O
Question	O
-	O
32623834	O
,	O
answer	O
-	O
32624143	O
You	O
just	O
changed	O
the	O
String	B-api_mention
of	O
String	B-api_mention
constant	O
pool	O
Mario	O
to	O
Luigi	O
which	O
was	O
referenced	O
by	O
multiple	O
String	B-api_mention
s	O
,	O
so	O
every	O
referencing	O
literal	O
Mario	O
is	O
now	O
Luigi	O
.	O
Field	B-api_mention
stringValue	O
=	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
.	I-api_mention
getDeclaredField	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
have	O
fetched	O
the	O
char	O
[	O
]	O
named	O
value	O
field	O
from	O
class	O
String	B-api_mention
stringValue	O
.	B-api_mention
setAccessible	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Make	O
it	O
accessible	O
.	O
stringValue	O
.	B-api_mention
set	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
changed	O
original	O
String	B-api_mention
field	O
to	O
Luigi	O
.	O
But	O
original	O
is	O
Mario	O
the	O
String	B-api_mention
literal	O
and	O
literal	O
belongs	O
to	O
the	O
String	B-api_mention
pool	O
and	O
all	O
are	O
interned	O
.	O
Which	O
means	O
all	O
the	O
literals	O
which	O
has	O
same	O
content	O
refers	O
to	O
the	O
same	O
memory	O
address	O
.	O
#	O
pre	O
Basically	O
you	O
have	O
changed	O
the	O
Mario	O
of	O
String	B-api_mention
pool	O
which	O
got	O
reflected	O
in	O
all	O
the	O
referencing	O
fields	O
.	O
If	O
you	O
create	O
String	B-api_mention
Object	O
(	O
i	O
.	O
e	O
.	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
instead	O
of	O
literal	O
you	O
will	O
not	O
face	O
this	O
behavior	O
because	O
than	O
you	O
will	O
have	O
two	O
different	O
Mario	O
s	O
.	O
Question	O
-	O
9749746	O
,	O
answer	O
-	O
9749864	O
You	O
are	O
specifically	O
asking	O
about	O
how	O
they	O
internally	O
work	O
,	O
so	O
here	O
you	O
are	O
:	O
No	O
synchronization	O
#	O
pre	O
It	O
basically	O
reads	O
value	O
from	O
memory	O
,	O
increments	O
it	O
and	O
puts	O
back	O
to	O
memory	O
.	O
This	O
works	O
in	O
single	O
thread	O
but	O
nowadays	O
,	O
in	O
the	O
era	O
of	O
multi	O
-	O
core	O
,	O
multi	O
-	O
CPU	O
,	O
multi	O
-	O
level	O
caches	O
it	O
won	O
'	O
t	O
work	O
correctly	O
.	O
First	O
of	O
all	O
it	O
introduces	O
race	O
condition	O
(	O
several	O
threads	O
can	O
read	O
the	O
value	O
at	O
the	O
same	O
time	O
)	O
,	O
but	O
also	O
visibility	O
problems	O
.	O
The	O
value	O
might	O
only	O
be	O
stored	O
in	O
"	O
local	O
"	O
CPU	O
memory	O
(	O
some	O
cache	O
)	O
and	O
not	O
be	O
visible	O
for	O
other	O
CPUs	O
/	O
cores	O
(	O
and	O
thus	O
-	O
threads	O
)	O
.	O
This	O
is	O
why	O
many	O
refer	O
to	O
local	O
copy	O
of	O
a	O
variable	O
in	O
a	O
thread	O
.	O
It	O
is	O
very	O
unsafe	O
.	O
Consider	O
this	O
popular	O
but	O
broken	O
thread	O
-	O
stopping	O
code	O
:	O
#	O
pre	O
Add	O
volatile	O
to	O
stopped	O
variable	O
and	O
it	O
works	O
fine	O
-	O
if	O
any	O
other	O
thread	O
modifies	O
stopped	O
variable	O
via	O
pleaseStop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
that	O
change	O
immediately	O
in	O
working	O
thread	O
'	O
s	O
while	O
(	O
args	O
)	O
loop	O
.	O
BTW	O
this	O
is	O
not	O
a	O
good	O
way	O
to	O
interrupt	O
a	O
thread	O
either	O
,	O
see	O
:	O
How	O
to	O
stop	O
a	O
thread	O
that	O
is	O
running	O
forever	O
without	O
any	O
use	O
and	O
Stopping	O
a	O
specific	O
java	O
thread	O
.	O
AtomicInteger	O
#	O
pre	O
The	O
AtomicInteger	B-api_mention
class	O
uses	O
CAS	O
(	O
compare	O
-	O
and	O
-	O
swap	O
)	O
low	O
-	O
level	O
CPU	O
operations	O
(	O
no	O
synchronization	O
needed	O
!	O
)	O
They	O
allow	O
you	O
to	O
modify	O
a	O
particular	O
variable	O
only	O
if	O
the	O
present	O
value	O
is	O
equal	O
to	O
something	O
else	O
(	O
and	O
is	O
returned	O
successfully	O
)	O
.	O
So	O
when	O
you	O
execute	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
actually	O
runs	O
in	O
a	O
loop	O
(	O
simplified	O
real	O
implementation	O
)	O
:	O
#	O
pre	O
So	O
basically	O
:	O
read	O
;	O
try	O
to	O
store	O
incremented	O
value	O
;	O
if	O
not	O
successful	O
(	O
the	O
value	O
is	O
no	O
longer	O
equal	O
to	O
current	O
)	O
,	O
read	O
and	O
try	O
again	O
.	O
The	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
implemented	O
in	O
native	O
code	O
(	O
assembly	O
)	O
.	O
volatile	O
without	O
synchronization	O
#	O
pre	O
This	O
code	O
is	O
not	O
correct	O
.	O
It	O
fixes	O
the	O
visibility	O
issue	O
(	O
volatile	O
makes	O
sure	O
other	O
threads	O
can	O
see	O
change	O
made	O
to	O
counter	O
)	O
but	O
still	O
has	O
a	O
race	O
condition	O
.	O
This	O
has	O
been	O
explained	O
multiple	O
times	O
:	O
pre	O
/	O
post	O
-	O
incrementation	O
is	O
not	O
atomic	B-api_mention
.	O
The	O
only	O
side	O
effect	O
of	O
volatile	O
is	O
"	O
flushing	O
"	O
caches	O
so	O
that	O
all	O
other	O
parties	O
see	O
the	O
freshest	O
version	O
of	O
the	O
data	O
.	O
This	O
is	O
too	O
strict	O
in	O
most	O
situations	O
;	O
that	O
is	O
why	O
volatile	O
is	O
not	O
default	O
.	O
volatile	O
without	O
synchronization	O
(	O
2	O
)	O
#	O
pre	O
The	O
same	O
problem	O
as	O
above	O
,	O
but	O
even	O
worse	O
because	O
i	O
is	O
not	O
private	O
.	O
The	O
race	O
condition	O
is	O
still	O
present	O
.	O
Why	O
is	O
it	O
a	O
problem	O
?	O
If	O
,	O
say	O
,	O
two	O
threads	O
run	O
this	O
code	O
simultaneously	O
,	O
the	O
output	O
might	O
be	O
+	O
5	O
or	O
+	O
10	O
.	O
However	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
the	O
change	O
.	O
Multiple	O
independent	O
synchronized	O
#	O
pre	O
Surprise	O
,	O
this	O
code	O
is	O
incorrect	O
as	O
well	O
.	O
In	O
fact	O
,	O
it	O
is	O
completely	O
wrong	O
.	O
First	O
of	O
all	O
you	O
are	O
synchronizing	O
on	O
i	O
,	O
which	O
is	O
about	O
to	O
be	O
changed	O
(	O
moreover	O
,	O
i	O
is	O
a	O
primitive	O
,	O
so	O
I	O
guess	O
you	O
are	O
synchronizing	O
on	O
a	O
temporary	O
Integer	O
created	O
via	O
autoboxing	O
.	O
.	O
.	O
)	O
Completely	O
flawed	O
.	O
You	O
could	O
also	O
write	O
:	O
#	O
pre	O
No	O
two	O
threads	O
can	O
enter	O
the	O
same	O
synchronized	O
block	O
with	O
the	O
same	O
lock	O
.	O
In	O
this	O
case	O
(	O
and	O
similarly	O
in	O
your	O
code	O
)	O
the	O
lock	O
object	O
changes	O
upon	O
every	O
execution	O
,	O
so	O
synchronized	O
effectively	O
has	O
no	O
effect	O
.	O
Even	O
if	O
you	O
have	O
used	O
a	O
final	O
variable	O
(	O
or	O
this	O
)	O
for	O
synchronization	O
,	O
the	O
code	O
is	O
still	O
incorrect	O
.	O
Two	O
threads	O
can	O
first	O
read	O
i	O
to	O
temp	O
synchronously	O
(	O
having	O
the	O
same	O
value	O
locally	O
in	O
temp	O
)	O
,	O
then	O
the	O
first	O
assigns	O
a	O
new	O
value	O
to	O
i	O
(	O
say	O
,	O
from	O
1	O
to	O
6	O
)	O
and	O
the	O
other	O
one	O
does	O
the	O
same	O
thing	O
(	O
from	O
1	O
to	O
6	O
)	O
.	O
The	O
synchronization	O
must	O
span	O
from	O
reading	O
to	O
assigning	O
a	O
value	O
.	O
Your	O
first	O
synchronization	O
has	O
no	O
effect	O
(	O
reading	O
an	O
int	O
is	O
atomic	O
)	O
and	O
the	O
second	O
as	O
well	O
.	O
In	O
my	O
opinion	O
,	O
these	O
are	O
the	O
correct	O
forms	O
:	O
#	O
pre	O
Question	O
-	O
14526260	O
,	O
answer	O
-	O
14526289	O
just	O
use	O
File	B-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
pre	O
using	O
String	O
methods	O
:	O
#	O
pre	O
Question	O
-	O
23114015	O
,	O
answer	O
-	O
32874755	O
If	O
you	O
know	O
the	O
size	O
you	O
could	O
use	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collection	I-api_mention
which	O
provides	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
And	O
then	O
:	O
new	O
Hand	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
I	O
faced	O
the	O
same	O
problem	O
and	O
was	O
surprised	O
that	O
my	O
Iterable	B-api_mention
implementation	O
could	O
be	O
very	O
easily	O
extended	O
to	O
an	O
AbstractCollection	B-api_mention
implementation	O
by	O
simply	O
adding	O
the	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
luckily	O
I	O
had	O
the	O
size	O
of	O
the	O
collection	O
:	O
-	O
)	O
You	O
should	O
also	O
consider	O
to	O
override	O
Spliterator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
spliterator	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
12317668	O
,	O
answer	O
-	O
12375312	O
Here	O
we	O
are	O
faced	O
with	O
a	O
bug	O
in	O
the	O
JIT	O
-	O
compiler	O
.	O
Compiler	O
determines	O
that	O
the	O
allocated	O
array	O
is	O
filled	O
after	O
allocation	O
in	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
the	O
check	O
for	O
uses	O
between	O
the	O
allocation	O
and	O
the	O
fill	O
is	O
faulty	O
.	O
So	O
,	O
compiler	O
performs	O
an	O
illegal	O
optimization	O
-	O
it	O
skips	O
zeroing	O
of	O
allocated	O
array	O
.	O
This	O
bug	O
is	O
placed	O
in	O
Oracle	O
bug	O
tracker	O
(	O
bug	O
id	O
7196857	O
)	O
.	O
Unfortunately	O
,	O
I	O
did	O
not	O
wait	O
for	O
any	O
clarifications	O
from	O
Oracle	O
about	O
the	O
following	O
points	O
.	O
As	O
I	O
see	O
,	O
this	O
bug	O
is	O
OS	O
-	O
specific	O
:	O
it	O
absolutely	O
reproducible	O
on	O
64	O
-	O
bit	O
Linux	O
and	O
Mac	O
,	O
but	O
,	O
as	O
I	O
see	O
from	O
comments	O
,	O
it	O
reproduces	O
not	O
regularly	O
on	O
Windows	O
(	O
for	O
similar	O
versions	O
of	O
JDK	O
)	O
.	O
Additionally	O
it	O
would	O
be	O
nice	O
to	O
know	O
when	O
this	O
bug	O
will	O
be	O
fixed	O
.	O
There	O
is	O
only	O
advice	O
at	O
the	O
moment	O
:	O
do	O
not	O
use	O
JDK1	O
.	O
7	O
.	O
0	O
_	O
04	O
or	O
later	O
if	O
you	O
depend	O
on	O
JLS	O
for	O
newly	O
declared	O
arrays	O
.	O
Update	O
at	O
October	O
5	O
:	O
In	O
the	O
new	O
Build	O
10	O
of	O
the	O
JDK	O
7u10	O
(	O
early	O
access	O
)	O
released	O
at	O
October	O
04	O
,	O
2012	O
,	O
this	O
bug	O
was	O
fixed	O
at	O
least	O
for	O
Linux	O
OS	O
(	O
I	O
did	O
not	O
test	O
for	O
other	O
)	O
.	O
Thanks	O
to	O
@	O
Makoto	O
,	O
who	O
found	O
that	O
this	O
bug	O
is	O
no	O
longer	O
available	O
for	O
public	O
access	O
in	O
Oracle	O
bug	O
database	O
.	O
Unfortunately	O
,	O
I	O
do	O
not	O
know	O
for	O
the	O
reasons	O
Oracle	O
removed	O
it	O
from	O
public	O
access	O
,	O
but	O
it	O
is	O
available	O
in	O
Google	O
cache	O
.	O
Also	O
,	O
this	O
bug	O
has	O
caught	O
the	O
attention	O
of	O
Redhat	O
:	O
the	O
CVE	O
identifiers	O
CVE	O
-	O
2012	O
-	O
4420	O
(	O
bugzilla	O
)	O
and	O
CVE	O
-	O
2012	O
-	O
4416	O
(	O
bugzilla	O
)	O
were	O
assigned	O
to	O
this	O
flaw	O
.	O
Question	O
-	O
32859038	O
I	O
have	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
collection	O
.	O
I	O
need	O
to	O
convert	O
it	O
into	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
The	O
key	O
of	O
the	O
map	O
must	O
be	O
the	O
index	O
of	O
the	O
item	O
in	O
the	O
collection	O
.	O
I	O
can	O
not	O
figure	O
it	O
out	O
how	O
to	O
do	O
this	O
with	O
streams	O
.	O
Something	O
like	O
:	O
items	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Any	O
help	O
?	O
As	O
this	O
question	O
is	O
identified	O
as	O
possible	O
duplicate	O
I	O
need	O
to	O
add	O
that	O
my	O
concrete	O
problem	O
was	O
-	O
how	O
to	O
get	O
the	O
position	O
of	O
the	O
item	O
in	O
the	O
list	O
and	O
put	O
it	O
as	O
a	O
key	O
value	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32918035	O
Eran	O
'	O
s	O
answer	O
is	O
usually	O
the	O
best	O
approach	O
for	O
random	O
-	O
access	O
lists	O
.	O
If	O
your	O
List	B-api_mention
isn	O
'	O
t	O
random	O
access	O
,	O
or	O
if	O
you	O
have	O
a	O
Stream	B-api_mention
instead	O
of	O
a	O
List	B-api_mention
,	O
you	O
can	O
use	O
forEachOrdered	O
:	O
#	O
pre	O
This	O
is	O
safe	O
,	O
if	O
the	O
stream	O
is	O
parallel	O
,	O
even	O
though	O
the	O
destination	O
map	O
is	O
thread	O
-	O
unsafe	O
and	O
is	O
operated	O
upon	O
as	O
a	O
side	O
effect	O
.	O
The	O
forEachOrdered	O
guarantees	O
that	O
items	O
are	O
processed	O
one	O
-	O
at	O
-	O
a	O
-	O
time	O
,	O
in	O
order	O
.	O
For	O
this	O
reason	O
it	O
'	O
s	O
unlikely	O
that	O
any	O
speedup	O
will	O
result	O
from	O
running	O
in	O
parallel	O
.	O
(	O
There	O
might	O
be	O
some	O
speedup	O
if	O
there	O
are	O
expensive	O
operations	O
in	O
the	O
pipeline	O
before	O
the	O
forEachOrdered	O
.	O
)	O
Question	O
-	O
15336477	O
All	O
I	O
'	O
m	O
trying	O
to	O
do	O
is	O
download	O
some	O
JSON	O
and	O
deserialize	O
it	O
into	O
an	O
object	O
.	O
I	O
haven	O
'	O
t	O
got	O
as	O
far	O
as	O
downloading	O
the	O
JSON	O
yet	O
.	O
Almost	O
every	O
single	O
HttpClient	B-api_mention
example	O
I	O
can	O
find	O
,	O
including	O
those	O
on	O
the	O
apache	O
site	O
looks	O
something	O
like	O
.	O
.	O
.	O
#	O
pre	O
However	O
,	O
Netbeans	O
tells	O
me	O
that	O
DefaultHttpClient	B-api_mention
is	O
deprecated	O
.	O
I	O
'	O
ve	O
tried	O
googling	O
for	O
DefaultHttpClient	B-api_mention
deprecated	O
and	O
as	O
many	O
other	O
variations	O
as	O
I	O
can	O
think	O
of	O
and	O
can	O
'	O
t	O
find	O
any	O
useful	O
results	O
,	O
so	O
I	O
'	O
m	O
obviously	O
missing	O
something	O
.	O
What	O
is	O
the	O
correct	O
Java7	O
way	O
to	O
download	O
the	O
contents	O
of	O
a	O
webpage	O
?	O
Is	O
there	O
really	O
no	O
decent	O
Http	O
Client	O
as	O
part	O
of	O
the	O
language	O
?	O
I	O
find	O
that	O
hard	O
to	O
believe	O
.	O
My	O
Maven	O
dependency	O
for	O
this	O
is	O
.	O
.	O
.	O
#	O
pre	O
Question	O
-	O
19416644	O
,	O
answer	O
-	O
19775881	O
Create	O
your	O
own	O
class	O
System	O
in	O
tha	O
same	O
package	O
with	O
Condition	O
.	O
In	O
this	O
case	O
your	O
System	O
class	O
will	O
hide	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
System	I-api_mention
class	O
#	O
pre	O
Ideone	O
DEMO	O
Question	O
-	O
4645020	O
It	O
is	O
supposed	O
to	O
be	O
generally	O
preferable	O
to	O
use	O
a	O
StringBuilder	B-api_mention
for	O
string	O
concatenation	O
in	O
Java	O
.	O
Is	O
this	O
always	O
the	O
case	O
?	O
What	O
I	O
mean	O
is	O
this	O
:	O
Is	O
the	O
overhead	O
of	O
creating	O
a	O
StringBuilder	B-api_mention
object	O
,	O
calling	O
the	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
and	O
finally	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
already	O
smaller	O
then	O
concatenating	O
existing	O
strings	O
with	O
the	O
+	O
operator	O
for	O
two	O
strings	O
,	O
or	O
is	O
it	O
only	O
advisable	O
for	O
more	O
(	O
than	O
two	O
)	O
strings	O
?	O
If	O
there	O
is	O
such	O
a	O
threshold	O
,	O
what	O
does	O
it	O
depend	O
on	O
(	O
perhaps	O
the	O
string	O
length	O
,	O
but	O
in	O
which	O
way	O
)	O
?	O
And	O
finally	O
,	O
would	O
you	O
trade	O
the	O
readability	O
and	O
conciseness	O
of	O
the	O
+	O
concatenation	O
for	O
the	O
performance	O
of	O
the	O
StringBuilder	B-api_mention
in	O
smaller	O
cases	O
like	O
two	O
,	O
three	O
or	O
four	O
strings	O
?	O
EDIT	O
Explicit	O
use	O
of	O
StringBuilder	B-api_mention
for	O
regular	O
concatenations	O
is	O
being	O
mentioned	O
as	O
obsolete	O
at	O
obsolete	O
java	O
optimization	O
tips	O
as	O
well	O
as	O
at	O
java	O
urban	O
myths	O
.	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561690	O
Comparator	O
is	O
a	O
functional	O
interface	O
,	O
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
max	I-api_mention
complies	O
with	O
that	O
interface	O
(	O
after	O
autoboxing	O
/	O
unboxing	O
is	O
taken	O
into	O
consideration	O
)	O
.	O
It	O
takes	O
two	O
int	O
values	O
and	O
returns	O
an	O
int	O
-	O
just	O
as	O
you	O
'	O
d	O
expect	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
(	O
again	O
,	O
squinting	O
to	O
ignore	O
the	O
Integer	B-api_mention
/	O
int	O
difference	O
)	O
.	O
However	O
,	O
I	O
wouldn	O
'	O
t	O
expect	O
it	O
to	O
do	O
the	O
right	O
thing	O
,	O
given	O
that	O
Integer	B-api_mention
.	I-api_mention
max	I-api_mention
doesn	O
'	O
t	O
comply	O
with	O
the	O
semantics	O
of	O
Comparator	B-api_mention
.	I-api_mention
compare	I-api_mention
.	O
And	O
indeed	O
it	O
doesn	O
'	O
t	O
really	O
work	O
in	O
general	O
.	O
For	O
example	O
,	O
make	O
one	O
small	O
change	O
:	O
#	O
pre	O
.	O
.	O
.	O
and	O
now	O
the	O
max	O
value	O
is	O
-	O
20	O
and	O
the	O
min	O
value	O
is	O
-	O
1	O
.	O
Instead	O
,	O
both	O
calls	O
should	O
use	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
compare	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571352	O
You	O
can	O
use	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
returns	O
the	O
byte	O
[	O
]	O
array	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
38560612	O
This	O
is	O
part	O
of	O
JDK	O
9	O
in	O
the	O
form	O
of	O
or	O
,	O
which	O
takes	O
a	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Your	O
example	O
would	O
then	O
be	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
;	O
For	O
details	O
see	O
the	O
(	O
preliminary	O
)	O
Javadoc	O
or	O
this	O
post	O
I	O
wrote	O
.	O
Question	O
-	O
28818506	O
I	O
'	O
ve	O
been	O
working	O
with	O
the	O
new	O
Optional	B-api_mention
type	O
in	O
Java	O
8	O
,	O
and	O
I	O
'	O
ve	O
come	O
across	O
what	O
seems	O
like	O
a	O
common	O
operation	O
that	O
isn	O
'	O
t	O
supported	O
functionally	O
:	O
an	O
"	O
orElseOptional	O
"	O
Consider	O
the	O
following	O
pattern	O
:	O
#	O
pre	O
There	O
are	O
many	O
forms	O
of	O
this	O
pattern	O
,	O
but	O
it	O
boils	O
down	O
to	O
wanting	O
an	O
"	O
orElse	O
"	O
on	O
an	O
optional	O
that	O
takes	O
a	O
function	O
producing	O
a	O
new	O
optional	O
,	O
called	O
only	O
if	O
the	O
current	O
one	O
does	O
not	O
exist	O
.	O
It	O
'	O
s	O
implementation	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
'	O
m	O
curious	O
if	O
there	O
'	O
s	O
a	O
reason	O
such	O
a	O
method	O
doesn	O
'	O
t	O
exist	O
,	O
if	O
I	O
'	O
m	O
just	O
using	O
Optional	B-api_mention
in	O
an	O
unintended	O
way	O
,	O
and	O
what	O
other	O
ways	O
people	O
have	O
come	O
up	O
with	O
to	O
deal	O
with	O
this	O
case	O
.	O
I	O
should	O
say	O
that	O
I	O
think	O
that	O
solutions	O
involving	O
custom	O
utility	O
classes	O
/	O
methods	O
aren	O
'	O
t	O
elegant	O
because	O
people	O
working	O
with	O
my	O
code	O
won	O
'	O
t	O
necessarily	O
know	O
they	O
exist	O
.	O
Also	O
,	O
if	O
anyone	O
knows	O
,	O
will	O
such	O
a	O
method	O
be	O
included	O
in	O
JDK	O
9	O
,	O
and	O
where	O
might	O
I	O
propose	O
such	O
a	O
method	O
?	O
This	O
seems	O
like	O
a	O
pretty	O
glaring	O
omission	O
to	O
the	O
API	O
to	O
me	O
.	O
Question	O
-	O
18410035	O
,	O
answer	O
-	O
37409771	O
In	O
Java	O
8	O
collection	O
classes	O
that	O
implement	O
Iterable	B-api_mention
(	O
for	O
example	O
all	O
lists	O
)	O
now	O
have	O
forEach	B-api_mention
method	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
above	O
example	O
makes	O
use	O
of	O
method	O
-	O
reference	O
introduced	O
in	O
Java	O
8	O
.	O
We	O
can	O
also	O
iterate	O
over	O
a	O
list	O
using	O
Stream	B-api_mention
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
advantage	O
with	O
later	O
option	O
is	O
that	O
we	O
can	O
also	O
make	O
use	O
of	O
parallel	O
streams	O
wherever	O
appropriate	O
.	O
If	O
the	O
objective	O
is	O
only	O
to	O
print	O
the	O
items	O
irrespective	O
of	O
the	O
order	O
then	O
we	O
can	O
use	O
parallel	O
stream	O
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684935	O
If	O
you	O
want	O
to	O
convert	O
the	O
string	O
back	O
into	O
a	O
byte	O
array	O
you	O
will	O
need	O
to	O
use	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
or	O
equivalent	O
Python	O
function	O
)	O
and	O
this	O
will	O
allow	O
you	O
print	O
out	O
the	O
original	O
byte	O
array	O
.	O
Question	O
-	O
31170459	O
I	O
was	O
testing	O
boundary	O
conditions	O
on	O
some	O
code	O
involving	O
a	O
BigDecimal	B-api_mention
,	O
and	O
I	O
noticed	O
that	O
when	O
a	O
BigDecimal	B-api_mention
is	O
initialized	O
with	O
the	O
String	B-api_mention
StringLiteral	O
it	O
behaves	O
unexpectedly	O
.	O
It	O
seems	O
to	O
have	O
a	O
value	O
between	O
0	O
and	O
1e	O
-	O
2147483647	O
.	O
When	O
I	O
try	O
calling	O
intValue	O
(	O
args	O
)	O
,	O
I	O
get	O
a	O
NegativeArraySizeException	O
.	O
I	O
should	O
note	O
that	O
2147483647	O
is	O
the	O
max	O
value	O
of	O
an	O
integer	O
on	O
my	O
system	O
.	O
Am	O
I	O
doing	O
something	O
wrong	O
,	O
or	O
is	O
this	O
a	O
problem	O
with	O
BigDecimal	B-api_mention
?	O
#	O
pre	O
Question	O
-	O
5263187	O
,	O
answer	O
-	O
5263201	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
9510125	O
Swing	O
components	O
have	O
multiple	O
methods	O
related	O
to	O
updates	O
of	O
screen	O
layout	O
,	O
in	O
particular	O
:	O
#	O
li	O
validate	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
invalidate	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
revalidate	B-api_mention
(	I-api_mention
)	I-api_mention
The	O
Java	O
documentation	O
defines	O
these	O
somewhat	O
from	O
a	O
technical	O
perspective	O
,	O
but	O
it	O
'	O
s	O
not	O
particularly	O
clear	O
how	O
they	O
are	O
meant	O
to	O
be	O
used	O
.	O
What	O
is	O
the	O
difference	O
between	O
these	O
,	O
and	O
in	O
what	O
circumstances	O
should	O
you	O
use	O
one	O
rather	O
than	O
the	O
others	O
?	O
Question	O
-	O
15182496	O
,	O
answer	O
-	O
15182578	O
The	O
other	O
answers	O
explain	O
why	O
,	O
but	O
here	O
is	O
how	O
:	O
new	O
Random	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
The	O
first	O
6	O
numbers	O
that	O
the	O
above	O
random	O
generates	O
are	O
:	O
#	O
pre	O
and	O
the	O
first	O
6	O
numbers	O
that	O
new	O
Random	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
generates	O
are	O
:	O
#	O
pre	O
Then	O
just	O
add	O
those	O
numbers	O
to	O
the	O
integer	O
representation	O
of	O
the	O
character	O
`	O
(	O
which	O
is	O
96	O
)	O
:	O
#	O
pre	O
Question	O
-	O
32312876	O
,	O
answer	O
-	O
32313069	O
This	O
is	O
possible	O
using	O
the	O
mergeFunction	O
parameter	O
of	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
keyMapper	I-api_mention
,	I-api_mention
valueMapper	I-api_mention
,	I-api_mention
mergeFunction	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
mergeFunction	O
is	O
a	O
function	O
that	O
operates	O
on	O
two	O
values	O
associated	O
with	O
the	O
same	O
key	O
.	O
adress1	O
corresponds	O
to	O
the	O
first	O
address	O
that	O
was	O
encountered	O
when	O
collecting	O
elements	O
and	O
adress2	O
corresponds	O
to	O
the	O
second	O
address	O
encountered	O
:	O
this	O
lambda	O
just	O
tells	O
to	O
keep	O
the	O
first	O
address	O
and	O
ignores	O
the	O
second	O
.	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275508	O
Just	O
use	O
TheClassName	O
.	O
class	O
instead	O
of	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
15336477	O
,	O
answer	O
-	O
15336606	O
It	O
got	O
deprecated	O
in	O
version	O
4	O
.	O
3	O
-	O
alpha1	O
which	O
you	O
use	O
because	O
of	O
the	O
LATEST	O
version	O
specification	O
.	O
If	O
you	O
take	O
a	O
look	O
at	O
the	O
javadoc	O
of	O
the	O
class	O
,	O
it	O
tells	O
you	O
what	O
to	O
use	O
instead	O
:	O
HttpClientBuilder	B-api_mention
.	O
In	O
the	O
latest	O
stable	O
version	O
(	O
4	O
.	O
2	O
.	O
3	O
)	O
the	O
DefaultHttpClient	B-api_mention
is	O
not	O
deprecated	O
yet	O
.	O
Question	O
-	O
15430247	O
The	O
usual	O
constructor	O
of	O
ArrayList	B-api_mention
is	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
there	O
is	O
also	O
an	O
overloaded	O
constructor	O
with	O
a	O
parameter	O
for	O
its	O
initial	O
capacity	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Why	O
is	O
it	O
useful	O
to	O
create	O
an	O
ArrayList	B-api_mention
with	O
an	O
initial	O
capacity	O
when	O
we	O
can	O
append	O
to	O
it	O
as	O
we	O
please	O
?	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
32866218	O
The	O
main	O
reason	O
with	O
HashMap	B-api_mention
not	O
allowing	O
primitive	O
as	O
keys	O
is	O
that	O
HashMap	B-api_mention
is	O
designed	O
in	O
such	O
a	O
way	O
that	O
for	O
comparing	O
the	O
keys	O
,	O
it	O
makes	O
use	O
of	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
,	O
and	O
a	O
method	O
can	O
be	O
called	O
only	O
on	O
an	O
object	O
not	O
on	O
a	O
primitive	O
.	O
Thus	O
when	O
int	O
is	O
autoboxed	O
to	O
Integer	B-api_mention
,	O
Hashmap	O
can	O
call	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
on	O
Integer	B-api_mention
object	O
.	O
That	O
is	O
why	O
,	O
you	O
should	O
use	O
Integer	B-api_mention
instead	O
of	O
int	O
.	O
I	O
mean	O
hashmap	O
throws	O
an	O
error	O
while	O
putting	O
int	O
as	O
a	O
key	O
(	O
Don	O
'	O
t	O
know	O
the	O
meaning	O
of	O
the	O
error	O
that	O
is	O
thrown	O
)	O
And	O
if	O
you	O
think	O
that	O
,	O
you	O
can	O
make	O
Map	B-api_mention
performance	O
faster	O
by	O
making	O
a	O
primitive	O
as	O
a	O
key	O
,	O
there	O
is	O
a	O
library	O
called	O
FastUtil	B-api_mention
which	O
contains	O
a	O
Map	B-api_mention
implementation	O
with	O
int	O
type	O
as	O
a	O
key	O
.	O
Because	O
of	O
this	O
,	O
it	O
is	O
much	O
faster	O
than	O
Hashmap	O
Question	O
-	O
6416706	O
,	O
answer	O
-	O
6416800	O
With	O
Guava	O
you	O
can	O
use	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
Iterable	I-api_mention
)	I-api_mention
or	O
Sets	B-api_mention
.	I-api_mention
newHashSet	I-api_mention
(	I-api_mention
Iterable	I-api_mention
)	I-api_mention
,	O
among	O
other	O
similar	O
methods	O
.	O
This	O
will	O
of	O
course	O
copy	O
all	O
the	O
elements	O
in	O
to	O
memory	O
.	O
If	O
that	O
isn	O
'	O
t	O
acceptable	O
,	O
I	O
think	O
your	O
code	O
that	O
works	O
with	O
these	O
ought	O
to	O
take	O
Iterable	B-api_mention
rather	O
than	O
Collection	B-api_mention
.	O
Guava	O
also	O
happens	O
to	O
provide	O
convenient	O
methods	O
for	O
doing	O
things	O
you	O
can	O
do	O
on	O
a	O
Collection	B-api_mention
using	O
an	O
Iterable	B-api_mention
(	O
such	O
as	O
Iterables	B-api_mention
.	I-api_mention
isEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Iterables	B-api_mention
.	I-api_mention
contains	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
,	O
but	O
the	O
performance	O
implications	O
are	O
more	O
obvious	O
.	O
Question	O
-	O
23218874	O
I	O
understand	O
that	O
with	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
can	O
use	O
chain	O
operations	O
like	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
use	O
parallel	O
stream	O
.	O
But	O
what	O
is	O
difference	O
between	O
them	O
if	O
I	O
need	O
to	O
execute	O
small	O
operations	O
(	O
for	O
example	O
,	O
printing	O
the	O
elements	O
of	O
the	O
list	O
)	O
?	O
#	O
pre	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
33375616	O
Most	O
of	O
these	O
answers	O
miss	O
the	O
big	O
picture	O
,	O
which	O
is	O
that	O
,	O
as	O
far	O
as	O
the	O
Java	O
language	O
is	O
concerned	O
,	O
there	O
is	O
no	O
more	O
difference	O
between	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
than	O
there	O
is	O
between	O
any	O
other	O
two	O
methods	O
.	O
They	O
'	O
re	O
both	O
just	O
methods	O
.	O
They	O
both	O
run	O
in	O
the	O
thread	O
that	O
called	O
them	O
.	O
They	O
both	O
do	O
whatever	O
they	O
were	O
coded	O
to	O
do	O
,	O
and	O
then	O
they	O
both	O
return	O
,	O
still	O
in	O
the	O
same	O
thread	O
,	O
to	O
their	O
callers	O
.	O
The	O
biggest	O
difference	O
is	O
that	O
most	O
of	O
the	O
code	O
for	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
native	O
code	O
while	O
,	O
in	O
most	O
cases	O
,	O
the	O
code	O
for	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
going	O
to	O
be	O
pure	O
Java	O
.	O
But	O
that	O
'	O
s	O
not	O
much	O
of	O
a	O
difference	O
.	O
Code	O
is	O
code	O
.	O
Native	O
code	O
is	O
harder	O
to	O
find	O
,	O
and	O
harder	O
to	O
understand	O
when	O
you	O
find	O
it	O
,	O
but	O
it	O
'	O
s	O
still	O
just	O
code	O
that	O
tells	O
the	O
computer	O
what	O
to	O
do	O
.	O
So	O
,	O
what	O
does	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
do	O
?	O
It	O
creates	O
a	O
new	O
native	O
thread	O
,	O
it	O
arranges	O
for	O
that	O
thread	O
to	O
call	O
t	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
it	O
tells	O
the	O
OS	O
to	O
let	O
the	O
new	O
thread	O
run	O
.	O
Then	O
it	O
returns	O
.	O
And	O
what	O
does	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
do	O
?	O
The	O
funny	O
thing	O
is	O
,	O
the	O
person	O
asking	O
this	O
question	O
is	O
the	O
person	O
who	O
wrote	O
it	O
.	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
whatever	O
you	O
(	O
i	O
.	O
e	O
.	O
,	O
the	O
developer	O
who	O
wrote	O
it	O
)	O
designed	O
it	O
to	O
do	O
.	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
method	O
that	O
the	O
library	O
provides	O
for	O
your	O
code	O
to	O
call	O
when	O
you	O
want	O
a	O
new	O
thread	O
.	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
method	O
that	O
you	O
provide	O
for	O
the	O
library	O
to	O
call	O
in	O
the	O
new	O
thread	O
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
7521675	O
Just	O
remember	O
that	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
to	O
be	O
implemented	O
by	O
the	O
class	O
you	O
are	O
trying	O
to	O
compare	O
.	O
Otherwise	O
,	O
there	O
isn	O
'	O
t	O
much	O
of	O
a	O
point	O
;	O
the	O
version	O
of	O
the	O
method	O
for	O
the	O
Object	B-api_mention
class	O
does	O
the	O
same	O
thing	O
as	O
the	O
comparison	O
operation	O
:	O
Object	B-api_mention
#	I-api_mention
equals	I-api_mention
.	O
The	O
only	O
time	O
you	O
really	O
want	O
to	O
use	O
the	O
comparison	O
operator	O
for	O
objects	O
is	O
wen	O
you	O
are	O
comparing	O
Enums	O
.	O
This	O
is	O
because	O
there	O
is	O
only	O
one	O
instance	O
of	O
an	O
Enum	O
value	O
at	O
a	O
time	O
.	O
For	O
instance	O
,	O
given	O
the	O
enum	O
enum	O
FooEnum	O
{	O
A	O
,	O
B	O
,	O
C	O
}	O
You	O
will	O
never	O
have	O
more	O
than	O
one	O
instance	O
of	O
A	O
at	O
a	O
time	O
,	O
and	O
the	O
same	O
for	O
B	O
and	O
C	O
.	O
This	O
means	O
that	O
you	O
can	O
actually	O
write	O
a	O
method	O
like	O
so	O
:	O
#	O
pre	O
And	O
you	O
will	O
have	O
no	O
problems	O
whatsoever	O
.	O
Question	O
-	O
5071040	O
,	O
answer	O
-	O
5071064	O
There	O
are	O
multiple	O
ways	O
:	O
#	O
li	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
my	O
preference	O
)	O
#	O
li	O
StringLiteral	O
+	O
number	O
(	O
I	O
don	O
'	O
t	O
know	O
how	O
the	O
compiler	O
handles	O
it	O
,	O
perhaps	O
it	O
is	O
as	O
efficient	O
as	O
the	O
above	O
)	O
#	O
li	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
16324831	O
,	O
answer	O
-	O
16324963	O
Note	O
:	O
everything	O
in	O
this	O
post	O
is	O
in	O
the	O
source	O
of	O
Java7	O
-	O
b147	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
goes	O
into	O
a	O
Sun	O
library	O
(	O
in	O
sun	B-api_mention
.	I-api_mention
misc	I-api_mention
.	I-api_mention
FloatingDecimal	I-api_mention
)	O
the	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
done	O
manually	O
in	O
the	O
Integer	B-api_mention
class	O
.	O
The	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
I	O
would	O
guess	O
there	O
are	O
two	O
different	O
authors	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32749756	O
I	O
'	O
m	O
going	O
to	O
shoot	O
in	O
the	O
dark	O
here	O
.	O
.	O
.	O
My	O
guess	O
is	O
that	O
it	O
might	O
have	O
been	O
changed	O
in	O
order	O
to	O
prepare	O
the	O
ground	O
for	O
Specialization	O
(	O
aka	O
generics	O
over	O
primitive	O
types	O
)	O
.	O
Maybe	O
(	O
and	O
I	O
insist	O
on	O
maybe	O
)	O
,	O
this	O
change	O
is	O
meant	O
to	O
make	O
transition	O
to	O
Java	O
10	O
easier	O
,	O
in	O
the	O
event	O
of	O
specialization	O
being	O
part	O
of	O
the	O
JDK	O
.	O
If	O
you	O
look	O
at	O
the	O
State	O
of	O
the	O
Specialization	O
document	O
,	O
Language	O
restrictions	O
section	O
,	O
it	O
says	O
the	O
following	O
:	O
#	O
blockquote	O
(	O
Emphasis	O
is	O
mine	O
)	O
.	O
And	O
ahead	O
in	O
the	O
Specializer	O
transformations	O
section	O
,	O
it	O
says	O
:	O
#	O
blockquote	O
Later	O
on	O
,	O
near	O
the	O
end	O
of	O
the	O
document	O
,	O
in	O
the	O
Further	O
investigation	O
section	O
,	O
it	O
says	O
:	O
#	O
blockquote	O
Now	O
,	O
regarding	O
the	O
change	O
.	O
.	O
.	O
If	O
the	O
Arrays	O
.	O
fill	O
(	O
args	O
)	O
method	O
is	O
going	O
to	O
be	O
specialized	O
,	O
then	O
its	O
signature	O
should	O
change	O
to	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
However	O
this	O
case	O
is	O
specifically	O
listed	O
in	O
the	O
(	O
already	O
mentioned	O
)	O
Language	O
restrictions	O
section	O
(	O
it	O
would	O
violate	O
the	O
emphasized	O
items	O
)	O
.	O
So	O
maybe	O
someone	O
decided	O
that	O
it	O
would	O
be	O
better	O
to	O
not	O
use	O
it	O
from	O
the	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
especially	O
if	O
value	O
is	O
null	O
.	O
Question	O
-	O
5769669	O
,	O
answer	O
-	O
5769679	O
You	O
can	O
use	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
convert	O
a	O
String	B-api_mention
to	O
a	O
double	O
:	O
#	O
pre	O
For	O
your	O
case	O
it	O
looks	O
like	O
you	O
want	O
:	O
#	O
pre	O
Question	O
-	O
9297899	O
We	O
can	O
determine	O
the	O
length	O
of	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
using	O
its	O
public	O
method	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
like	O
#	O
pre	O
Similarly	O
we	O
can	O
determine	O
the	O
length	O
of	O
an	O
Array	O
object	O
using	O
the	O
length	O
property	O
#	O
pre	O
Whereas	O
the	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
ArrayList	B-api_mention
is	O
defined	O
inside	O
the	O
ArrayList	B-api_mention
class	O
,	O
where	O
is	O
this	O
length	O
property	O
of	O
Array	O
defined	O
?	O
Question	O
-	O
22694884	O
,	O
answer	O
-	O
39385411	O
As	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
a	O
throwing	O
merger	O
to	O
handle	O
multiple	O
entries	O
with	O
the	O
same	O
key	O
it	O
is	O
easy	O
:	O
#	O
pre	O
You	O
will	O
get	O
a	O
IllegalStateException	B-api_mention
for	O
duplicate	O
keys	O
.	O
But	O
at	O
the	O
end	O
I	O
am	O
not	O
sure	O
if	O
the	O
code	O
would	O
not	O
be	O
even	O
more	O
readable	O
using	O
an	O
if	O
.	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17836189	O
I	O
think	O
the	O
others	O
have	O
done	O
a	O
good	O
job	O
at	O
explaining	O
why	O
cnt	O
>	O
0	O
,	O
but	O
there	O
'	O
s	O
not	O
enough	O
details	O
regarding	O
why	O
cnt	O
=	O
4	O
,	O
and	O
why	O
cnt	O
varies	O
so	O
widely	O
among	O
different	O
settings	O
.	O
I	O
will	O
attempt	O
to	O
fill	O
that	O
void	O
here	O
.	O
Let	O
#	O
li	O
X	O
be	O
the	O
total	O
stack	O
size	O
#	O
li	O
M	O
be	O
the	O
stack	O
space	O
used	O
when	O
we	O
enter	O
main	O
the	O
first	O
time	O
#	O
li	O
R	O
be	O
the	O
stack	O
space	O
increase	O
each	O
time	O
we	O
enter	O
into	O
main	O
#	O
li	O
P	O
be	O
the	O
stack	O
space	O
necessary	O
to	O
run	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
When	O
we	O
first	O
get	O
into	O
main	O
,	O
the	O
space	O
left	O
over	O
is	O
X	O
-	O
M	O
.	O
Each	O
recursive	O
call	O
takes	O
up	O
R	O
more	O
memory	O
.	O
So	O
for	O
1	O
recursive	O
call	O
(	O
1	O
more	O
than	O
original	O
)	O
,	O
the	O
memory	O
use	O
is	O
M	O
+	O
R	O
.	O
Suppose	O
that	O
StackOverflowError	B-api_mention
is	O
thrown	O
after	O
C	O
successful	O
recursive	O
calls	O
,	O
that	O
is	O
,	O
M	O
+	O
C	O
*	O
R	O
<	O
=	O
X	O
and	O
M	O
+	O
C	O
*	O
(	O
R	O
+	O
1	O
)	O
>	O
X	O
.	O
At	O
the	O
time	O
of	O
the	O
first	O
StackOverflowError	B-api_mention
,	O
there	O
'	O
s	O
X	O
-	O
M	O
-	O
C	O
*	O
R	O
memory	O
left	O
.	O
To	O
be	O
able	O
to	O
run	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
prinln	I-api_mention
,	O
we	O
need	O
P	O
amount	O
of	O
space	O
left	O
on	O
the	O
stack	O
.	O
If	O
it	O
so	O
happens	O
that	O
X	O
-	O
M	O
-	O
C	O
*	O
R	O
>	O
=	O
P	O
,	O
then	O
0	O
will	O
be	O
printed	O
.	O
If	O
P	O
requires	O
more	O
space	O
,	O
then	O
we	O
remove	O
frames	O
from	O
the	O
stack	O
,	O
gaining	O
R	O
memory	O
at	O
the	O
cost	O
of	O
cnt	O
+	O
+	O
.	O
When	O
println	B-api_mention
is	O
finally	O
able	O
to	O
run	O
,	O
X	O
-	O
M	O
-	O
(	O
C	O
-	O
cnt	O
)	O
*	O
R	O
>	O
=	O
P	O
.	O
So	O
if	O
P	O
is	O
large	O
for	O
a	O
particular	O
system	O
,	O
then	O
cnt	O
will	O
be	O
large	O
.	O
Let	O
'	O
s	O
look	O
at	O
this	O
with	O
some	O
examples	O
.	O
Example	O
1	O
:	O
Suppose	O
#	O
li	O
X	O
=	O
100	O
#	O
li	O
M	O
=	O
1	O
#	O
li	O
R	O
=	O
2	O
#	O
li	O
P	O
=	O
1	O
Then	O
C	O
=	O
floor	O
(	O
(	O
X	O
-	O
M	O
)	O
/	O
R	O
)	O
=	O
49	O
,	O
and	O
cnt	O
=	O
ceiling	O
(	O
(	O
P	O
-	O
(	O
X	O
-	O
M	O
-	O
C	O
*	O
R	O
)	O
)	O
/	O
R	O
)	O
=	O
0	O
.	O
Example	O
2	O
:	O
Suppose	O
that	O
#	O
li	O
X	O
=	O
100	O
#	O
li	O
M	O
=	O
1	O
#	O
li	O
R	O
=	O
5	O
#	O
li	O
P	O
=	O
12	O
Then	O
C	O
=	O
19	O
,	O
and	O
cnt	O
=	O
2	O
.	O
Example	O
3	O
:	O
Suppose	O
that	O
#	O
li	O
X	O
=	O
101	O
#	O
li	O
M	O
=	O
1	O
#	O
li	O
R	O
=	O
5	O
#	O
li	O
P	O
=	O
12	O
Then	O
C	O
=	O
20	O
,	O
and	O
cnt	O
=	O
3	O
.	O
Example	O
4	O
:	O
Suppose	O
that	O
#	O
li	O
X	O
=	O
101	O
#	O
li	O
M	O
=	O
2	O
#	O
li	O
R	O
=	O
5	O
#	O
li	O
P	O
=	O
12	O
Then	O
C	O
=	O
19	O
,	O
and	O
cnt	O
=	O
2	O
.	O
Thus	O
,	O
we	O
see	O
that	O
both	O
the	O
system	O
(	O
M	O
,	O
R	O
,	O
and	O
P	O
)	O
and	O
the	O
stack	O
size	O
(	O
X	O
)	O
affects	O
cnt	O
.	O
As	O
a	O
side	O
note	O
,	O
it	O
does	O
not	O
matter	O
how	O
much	O
space	O
catch	O
requires	O
to	O
start	O
.	O
As	O
long	O
as	O
there	O
is	O
not	O
enough	O
space	O
for	O
catch	O
,	O
then	O
cnt	O
will	O
not	O
increase	O
,	O
so	O
there	O
are	O
no	O
external	O
effects	O
.	O
EDIT	O
I	O
take	O
back	O
what	O
I	O
said	O
about	O
catch	O
.	O
It	O
does	O
play	O
a	O
role	O
.	O
Suppose	O
it	O
requires	O
T	O
amount	O
of	O
space	O
to	O
start	O
.	O
cnt	O
starts	O
to	O
increment	O
when	O
the	O
leftover	O
space	O
is	O
greater	O
than	O
T	O
,	O
and	O
println	B-api_mention
runs	O
when	O
the	O
leftover	O
space	O
is	O
greater	O
than	O
T	O
+	O
P	O
.	O
This	O
adds	O
an	O
extra	O
step	O
to	O
the	O
calculations	O
and	O
further	O
muddies	O
up	O
the	O
already	O
muddy	O
analysis	O
.	O
EDIT	O
I	O
finally	O
found	O
time	O
to	O
run	O
some	O
experiments	O
to	O
back	O
up	O
my	O
theory	O
.	O
Unfortunately	O
,	O
the	O
theory	O
doesn	O
'	O
t	O
seem	O
to	O
match	O
up	O
with	O
the	O
experiments	O
.	O
What	O
actually	O
happens	O
is	O
very	O
different	O
.	O
Experiment	O
setup	O
:	O
Ubuntu	O
12	O
.	O
04	O
server	O
with	O
default	O
java	O
and	O
default	O
-	O
jdk	O
.	O
Xss	O
starting	O
at	O
70	O
,	O
000	O
at	O
1	O
byte	O
increments	O
to	O
460	O
,	O
000	O
.	O
The	O
results	O
are	O
available	O
at	O
:	O
#	O
a	O
I	O
'	O
ve	O
created	O
another	O
version	O
where	O
every	O
repeated	O
data	O
point	O
is	O
removed	O
.	O
In	O
other	O
words	O
,	O
only	O
points	O
that	O
are	O
different	O
from	O
the	O
previous	O
are	O
shown	O
.	O
This	O
makes	O
it	O
easier	O
to	O
see	O
anomalies	O
.	O
#	O
a	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20945268	O
In	O
Java	O
,	O
if	O
two	O
string	O
primitive	O
variables	O
are	O
initialized	O
to	O
the	O
same	O
literal	O
,	O
it	O
assigns	O
the	O
same	O
reference	O
to	O
both	O
variables	O
:	O
#	O
pre	O
#	O
blockquote	O
That	O
is	O
the	O
reason	O
the	O
comparison	O
returns	O
true	O
.	O
The	O
third	O
string	O
is	O
created	O
using	O
substring	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
makes	O
a	O
new	O
string	O
instead	O
of	O
pointing	O
to	O
the	O
same	O
.	O
#	O
blockquote	O
When	O
you	O
access	O
a	O
string	O
using	O
reflection	O
,	O
you	O
get	O
the	O
actual	O
pointer	O
:	O
#	O
pre	O
So	O
change	O
to	O
this	O
will	O
change	O
the	O
string	O
holding	O
a	O
pointer	O
to	O
it	O
,	O
but	O
as	O
s3	O
is	O
created	O
with	O
a	O
new	O
string	O
due	O
to	O
substring	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
would	O
not	O
change	O
.	O
#	O
blockquote	O
Question	O
-	O
5455794	O
,	O
answer	O
-	O
5455820	O
How	O
about	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Refer	O
here	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
26159918	O
invoke	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
executing	O
on	O
the	O
calling	O
thread	O
,	O
like	O
any	O
other	O
method	O
call	O
.	O
whereas	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
new	O
thread	O
.	O
invoking	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
programmatic	O
bug	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32745612	O
For	O
me	O
,	O
the	O
reason	O
is	O
a	O
likely	O
performance	O
inprovement	O
,	O
at	O
a	O
negligible	O
cost	O
in	O
terms	O
of	O
code	O
clarity	O
.	O
Note	O
that	O
the	O
implementation	O
of	O
the	O
fill	O
method	O
is	O
trivial	O
,	O
a	O
simple	O
for	O
-	O
loop	O
setting	O
each	O
array	O
element	O
to	O
null	O
.	O
So	O
,	O
replacing	O
a	O
call	O
to	O
it	O
with	O
the	O
actual	O
implementation	O
does	O
not	O
cause	O
any	O
significant	O
degradation	O
in	O
the	O
clarity	O
/	O
conciseness	O
of	O
the	O
caller	O
method	O
.	O
The	O
potential	O
performance	O
benefits	O
are	O
not	O
so	O
insignificant	O
,	O
if	O
you	O
consider	O
everything	O
that	O
is	O
involved	O
:	O
#	O
li	O
There	O
will	O
be	O
no	O
need	O
for	O
the	O
JVM	O
to	O
resolve	O
the	O
Arrays	B-api_mention
class	O
,	O
plus	O
loading	O
and	O
initializing	O
it	O
if	O
needed	O
.	O
This	O
is	O
a	O
non	O
-	O
trivial	O
process	O
where	O
the	O
JVM	O
performs	O
several	O
steps	O
.	O
Firstly	O
,	O
it	O
checks	O
the	O
class	O
loader	O
to	O
see	O
if	O
the	O
class	O
is	O
already	O
loaded	O
,	O
and	O
this	O
happens	O
every	O
time	O
a	O
method	O
is	O
called	O
;	O
there	O
are	O
optimizations	O
involved	O
here	O
,	O
of	O
course	O
,	O
but	O
it	O
still	O
takes	O
some	O
effort	O
.	O
If	O
the	O
class	O
is	O
not	O
loaded	O
,	O
the	O
JVM	O
will	O
need	O
to	O
go	O
through	O
the	O
expensive	O
process	O
of	O
loading	O
it	O
,	O
verifying	O
the	O
bytecode	O
,	O
resolving	O
other	O
necessary	O
dependencies	O
,	O
and	O
finally	O
performing	O
static	O
initialization	O
of	O
the	O
class	O
(	O
which	O
can	O
be	O
arbitrarily	O
expensive	O
)	O
.	O
Given	O
that	O
HashMap	B-api_mention
is	O
such	O
a	O
core	O
class	O
,	O
and	O
that	O
Arrays	B-api_mention
is	O
such	O
a	O
huge	O
class	O
(	O
3600	O
+	O
lines	O
)	O
,	O
avoiding	O
these	O
costs	O
may	O
add	O
up	O
to	O
noticeable	O
savings	O
.	O
#	O
li	O
Since	O
there	O
is	O
no	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
call	O
,	O
the	O
JVM	O
won	O
'	O
t	O
have	O
to	O
decide	O
whether	O
/	O
when	O
to	O
inline	O
the	O
method	O
into	O
the	O
caller	O
'	O
s	O
body	O
.	O
Since	O
HashMap	B-api_mention
#	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
tends	O
to	O
get	O
called	O
a	O
lot	O
,	O
the	O
JVM	O
will	O
eventually	O
perform	O
the	O
inlining	O
,	O
which	O
requires	O
JIT	O
recompilation	O
of	O
the	O
clear	O
method	O
.	O
With	O
no	O
method	O
calls	O
,	O
clear	O
will	O
always	O
run	O
at	O
top	O
-	O
speed	O
(	O
once	O
initially	O
JITed	O
)	O
.	O
Another	O
benefit	O
of	O
no	O
longer	O
calling	O
methods	O
in	O
Arrays	B-api_mention
is	O
that	O
it	O
simplifies	O
the	O
dependency	O
graph	O
inside	O
the	O
java	O
.	O
util	O
package	O
,	O
since	O
one	O
dependency	O
is	O
removed	O
.	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32820984	O
Let	O
'	O
s	O
rewrite	O
that	O
lambda	O
expression	O
with	O
parentheses	O
to	O
make	O
it	O
more	O
clear	O
:	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
curriedAdd	O
=	O
a	O
-	O
>	O
(	O
b	O
-	O
>	O
(	O
a	O
+	O
b	O
)	O
)	O
;	O
So	O
we	O
are	O
declaring	O
a	O
function	O
taking	O
an	O
int	O
which	O
returns	O
a	O
Function	B-api_mention
.	O
More	O
specifically	O
,	O
the	O
function	O
returned	O
takes	O
an	O
int	O
and	O
returns	O
an	O
int	O
(	O
the	O
sum	O
of	O
the	O
two	O
elements	O
)	O
:	O
this	O
can	O
be	O
represented	O
as	O
an	O
IntUnaryOperator	O
.	O
Therefore	O
,	O
curriedAdd	O
is	O
a	O
function	O
taking	O
an	O
int	O
and	O
returning	O
an	O
IntUnaryOperator	O
,	O
so	O
it	O
can	O
be	O
represented	O
as	O
IntFunction	B-api_mention
<	I-api_mention
IntUnaryOperator	I-api_mention
>	I-api_mention
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7353473	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
better	O
(	O
as	O
explained	O
by	O
Nick	O
)	O
,	O
but	O
still	O
not	O
very	O
good	O
One	O
host	O
can	O
be	O
known	O
under	O
many	O
different	O
hostnames	O
.	O
Usually	O
you	O
'	O
ll	O
be	O
looking	O
for	O
the	O
hostname	O
your	O
host	O
has	O
in	O
a	O
specific	O
context	O
.	O
For	O
example	O
,	O
in	O
a	O
web	O
application	O
,	O
you	O
might	O
be	O
looking	O
for	O
the	O
hostname	O
used	O
by	O
whoever	O
issued	O
the	O
request	O
you	O
'	O
re	O
currently	O
handling	O
.	O
How	O
to	O
best	O
find	O
that	O
one	O
depends	O
on	O
which	O
framework	O
you	O
'	O
re	O
using	O
for	O
your	O
web	O
application	O
.	O
In	O
some	O
kind	O
of	O
other	O
internet	O
-	O
facing	O
service	O
,	O
you	O
'	O
ll	O
want	O
the	O
hostname	O
your	O
service	O
is	O
available	O
through	O
from	O
the	O
'	O
outside	O
'	O
.	O
Due	O
to	O
proxies	O
,	O
firewalls	O
etc	O
this	O
might	O
not	O
even	O
be	O
a	O
hostname	O
on	O
the	O
machine	O
your	O
service	O
is	O
installed	O
on	O
-	O
you	O
might	O
try	O
to	O
come	O
up	O
with	O
a	O
reasonable	O
default	O
,	O
but	O
you	O
should	O
definitely	O
make	O
this	O
configurable	O
for	O
whoever	O
installs	O
this	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
25757711	O
ArrayList	B-api_mention
shrinks	O
or	O
expands	O
dynamically	O
.	O
This	O
is	O
a	O
effective	O
but	O
costly	O
operation	O
,	O
if	O
you	O
know	O
size	O
of	O
your	O
array	O
will	O
be	O
fixed	O
then	O
its	O
better	O
to	O
mention	O
the	O
size	O
of	O
the	O
array	O
,	O
If	O
you	O
don	O
'	O
t	O
,	O
new	O
array	O
will	O
be	O
created	O
at	O
each	O
insertion	O
and	O
reallocation	O
will	O
be	O
done	O
for	O
each	O
element	O
.	O
this	O
will	O
cost	O
you	O
.	O
ensureCapacity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
this	O
method	O
help	O
to	O
avoid	O
reallocations	O
and	O
helps	O
increase	O
size	O
of	O
arraylist	O
.	O
trimToSize	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
this	O
is	O
reverse	O
used	O
to	O
shrink	O
size	O
Arraylist	B-api_mention
has	O
3	O
constructors	O
:	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
)	I-api_mention
-	O
builds	O
empty	O
ArrayList	B-api_mention
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
Collection	I-api_mention
c	I-api_mention
)	I-api_mention
-	O
builds	O
a	O
ArrayList	B-api_mention
initialized	O
with	O
elements	O
of	O
collection	O
c	O
.	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
int	I-api_mention
capacity	I-api_mention
)	I-api_mention
-	O
builds	O
an	O
ArrayList	B-api_mention
with	O
specified	O
initial	O
capacity	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29495065	O
#	O
li	O
It	O
is	O
checking	O
if	O
newType	O
is	O
array	O
of	O
Objects	O
or	O
not	O
:	O
#	O
pre	O
Why	O
to	O
do	O
that	O
?	O
Because	O
new	O
Object	B-api_mention
[	O
n	O
]	O
is	O
faster	O
than	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
an	O
array	O
of	O
types	O
defined	O
by	O
the	O
first	O
argument	O
,	O
eg	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
-	O
>	O
String	B-api_mention
[	O
]	O
.	O
Note	O
that	O
String	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
.	I-api_mention
getComponentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
#	O
li	O
You	O
cannot	O
use	O
it	O
like	O
that	O
,	O
but	O
it	O
can	O
be	O
like	O
this	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
in	O
this	O
case	O
it	O
depends	O
only	O
on	O
actual	O
type	O
of	O
elements	O
,	O
eg	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
fail	O
,	O
you	O
cannot	O
write	O
in	O
Integer	B-api_mention
[	O
]	O
anything	O
but	O
Integer	B-api_mention
Question	O
-	O
7348711	O
,	O
answer	O
-	O
28043703	O
As	O
others	O
have	O
noted	O
,	O
getting	O
the	O
hostname	O
based	O
on	O
DNS	O
resolution	O
is	O
unreliable	O
.	O
Since	O
this	O
question	O
is	O
unfortunately	O
still	O
relevant	O
in	O
2016	O
,	O
I	O
'	O
d	O
like	O
to	O
share	O
with	O
you	O
my	O
network	O
-	O
independent	O
solution	O
,	O
with	O
some	O
test	O
runs	O
on	O
different	O
systems	O
.	O
The	O
following	O
code	O
tries	O
to	O
do	O
the	O
following	O
:	O
#	O
li	O
On	O
Windows	O
#	O
li	O
Read	O
the	O
COMPUTERNAME	O
environment	O
variable	O
through	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Execute	O
hostname	O
.	O
exe	O
and	O
read	O
the	O
response	O
#	O
li	O
On	O
Linux	O
#	O
li	O
Read	O
the	O
HOSTNAME	O
environment	O
variable	O
through	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
Execute	O
hostname	O
and	O
read	O
the	O
response	O
#	O
li	O
Read	O
/	O
etc	O
/	O
hostname	O
(	O
to	O
do	O
this	O
I	O
'	O
m	O
executing	O
cat	O
since	O
the	O
snippet	O
already	O
contains	O
code	O
to	O
execute	O
and	O
read	O
.	O
Simply	O
reading	O
the	O
file	O
would	O
be	O
better	O
,	O
though	O
)	O
.	O
The	O
code	O
:	O
#	O
pre	O
Results	O
for	O
different	O
operating	O
systems	O
:	O
OpenSuse	O
13	O
.	O
1	O
#	O
pre	O
Ubuntu	O
14	O
.	O
04	O
LTS	O
This	O
one	O
is	O
kinda	O
strange	O
since	O
echo	O
$	O
HOSTNAME	O
returns	O
the	O
correct	O
hostname	O
,	O
but	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
:	O
#	O
pre	O
EDIT	O
:	O
According	O
to	O
legolas108	O
,	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
works	O
on	O
Ubuntu	O
14	O
.	O
04	O
if	O
you	O
run	O
export	O
HOSTNAME	O
before	O
executing	O
the	O
Java	O
code	O
.	O
Windows	O
7	O
#	O
pre	O
The	O
machine	O
names	O
have	O
been	O
replaced	O
but	O
I	O
kept	O
the	O
capitalization	O
and	O
structure	O
.	O
Note	O
the	O
extra	O
newline	O
when	O
executing	O
hostname	O
,	O
you	O
might	O
have	O
to	O
take	O
it	O
into	O
account	O
in	O
some	O
cases	O
.	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173040	O
Since	O
there	O
are	O
only	O
4	O
elements	O
that	O
pass	O
the	O
filter	O
,	O
limit	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
never	O
reaches	O
10	O
elements	O
,	O
so	O
the	O
Stream	B-api_mention
pipeline	O
keeps	O
generating	O
new	O
elements	O
and	O
feeding	O
them	O
to	O
the	O
filter	O
,	O
trying	O
to	O
reach	O
10	O
elements	O
that	O
pass	O
the	O
filter	O
,	O
but	O
since	O
only	O
the	O
first	O
4	O
elements	O
pass	O
the	O
filter	O
,	O
the	O
processing	O
never	O
ends	O
(	O
at	O
least	O
until	O
i	O
overflows	O
)	O
.	O
The	O
Stream	B-api_mention
pipeline	O
is	O
not	O
smart	O
enough	O
to	O
know	O
that	O
no	O
more	O
elements	O
can	O
pass	O
the	O
filter	O
,	O
so	O
it	O
keeps	O
processing	O
new	O
elements	O
.	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
15357940	O
Or	O
simply	O
mystring	O
.	B-api_mention
matches	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
it	O
would	O
return	O
true	O
for	O
numbers	O
larger	O
than	O
an	O
int	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31190722	O
We	O
can	O
draw	O
a	O
parallel	O
with	O
abstract	O
class	O
.	O
An	O
abstract	O
class	O
is	O
intended	O
to	O
be	O
subclassed	O
so	O
that	O
the	O
abstract	O
methods	O
can	O
be	O
implemented	O
.	O
The	O
abstract	O
class	O
itself	O
contains	O
concrete	O
methods	O
that	O
invoke	O
the	O
abstract	O
methods	O
.	O
The	O
abstract	O
class	O
is	O
free	O
to	O
evolve	O
by	O
adding	O
more	O
concrete	O
methods	O
;	O
and	O
this	O
practice	O
may	O
break	O
subclasses	O
.	O
Therefore	O
the	O
exact	O
problem	O
you	O
described	O
existed	O
even	O
before	O
Java8	O
.	O
The	O
problem	O
is	O
much	O
more	O
manifested	O
on	O
Collection	B-api_mention
APIs	O
because	O
there	O
are	O
a	O
lot	O
of	O
subclasses	O
out	O
in	O
the	O
wild	O
.	O
While	O
the	O
leading	O
motivation	O
of	O
default	O
method	O
was	O
to	O
add	O
some	O
useful	O
methods	O
to	O
existing	O
Collection	B-api_mention
APIs	O
without	O
breaking	O
subclasses	O
,	O
they	O
had	O
to	O
exercise	O
great	O
self	O
-	O
control	O
of	O
doing	O
it	O
too	O
much	O
,	O
for	O
fear	O
of	O
breaking	O
subclasses	O
.	O
A	O
default	O
method	O
is	O
added	O
only	O
if	O
it	O
'	O
s	O
absolutely	O
necessary	O
.	O
The	O
real	O
question	O
here	O
is	O
,	O
why	O
List	B-api_mention
.	I-api_mention
sort	I-api_mention
is	O
considered	O
absolutely	O
necessary	O
.	O
I	O
think	O
that	O
is	O
debatable	O
.	O
Regardless	O
of	O
why	O
default	O
method	O
was	O
introduced	O
in	O
the	O
1st	O
place	O
,	O
it	O
is	O
now	O
a	O
great	O
tool	O
for	O
API	O
designers	O
,	O
and	O
we	O
ought	O
to	O
treat	O
it	O
the	O
same	O
as	O
concrete	O
methods	O
in	O
abstract	O
classes	O
-	O
they	O
need	O
to	O
be	O
designed	O
carefully	O
up	O
front	O
;	O
and	O
new	O
ones	O
must	O
be	O
introduced	O
with	O
great	O
caution	O
.	O
Question	O
-	O
12146298	O
I	O
would	O
like	O
to	O
know	O
what	O
is	O
the	O
cleanest	O
and	O
best	O
way	O
to	O
perform	O
form	O
validation	O
of	O
user	O
inputs	O
.	O
I	O
have	O
seen	O
some	O
developers	O
implement	O
org	B-api_mention
.	I-api_mention
springframework	I-api_mention
.	I-api_mention
validation	I-api_mention
.	I-api_mention
Validator	I-api_mention
.	O
A	O
question	O
about	O
that	O
:	O
I	O
saw	O
it	O
validates	O
a	O
class	O
.	O
Does	O
the	O
class	O
have	O
to	O
be	O
filled	O
manually	O
with	O
the	O
values	O
from	O
the	O
user	O
input	O
,	O
and	O
then	O
passed	O
to	O
the	O
validator	O
?	O
I	O
am	O
confused	O
about	O
the	O
cleanest	O
and	O
best	O
way	O
to	O
validate	O
the	O
user	O
input	O
.	O
I	O
know	O
about	O
the	O
traditional	O
method	O
of	O
using	O
request	B-api_mention
.	I-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
then	O
manually	O
checking	O
for	O
nulls	O
,	O
but	O
I	O
don	O
'	O
t	O
want	O
to	O
do	O
all	O
the	O
validation	O
in	O
my	O
Controller	O
.	O
Some	O
good	O
advice	O
on	O
this	O
area	O
will	O
be	O
greatly	O
appreciated	O
.	O
I	O
am	O
not	O
using	O
Hibernate	O
in	O
this	O
application	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16636899	O
I	O
feel	O
that	O
I	O
need	O
to	O
extend	O
my	O
comment	O
a	O
bit	O
.	O
.	O
.	O
About	O
paradigm	O
\	O
style	O
That	O
'	O
s	O
probably	O
the	O
most	O
notable	O
aspect	O
.	O
FP	O
became	O
popular	O
due	O
to	O
what	O
you	O
can	O
get	O
avoiding	O
side	O
-	O
effects	O
.	O
I	O
won	O
'	O
t	O
delve	O
deep	O
into	O
what	O
pros	O
\	O
cons	O
you	O
can	O
get	O
from	O
this	O
,	O
since	O
this	O
is	O
not	O
related	O
to	O
the	O
question	O
.	O
However	O
,	O
I	O
will	O
say	O
that	O
the	O
iteration	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
inspired	O
by	O
FP	O
and	O
rather	O
result	O
of	O
bringing	O
more	O
FP	O
to	O
Java	O
(	O
ironically	O
,	O
I	O
'	O
d	O
say	O
that	O
there	O
is	O
no	O
much	O
use	O
for	O
forEach	B-api_mention
in	O
pure	O
FP	O
,	O
since	O
it	O
does	O
nothing	O
except	O
introducing	O
side	O
-	O
effects	O
)	O
.	O
In	O
the	O
end	O
I	O
would	O
say	O
that	O
it	O
is	O
rather	O
a	O
matter	O
of	O
taste	O
\	O
style	O
\	O
paradigm	O
you	O
are	O
currently	O
writing	O
in	O
.	O
About	O
parallelism	O
.	O
From	O
performance	O
point	O
of	O
view	O
there	O
is	O
no	O
promised	O
notable	O
benefits	O
from	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
over	O
foreach	O
(	O
.	O
.	O
.	O
)	O
.	O
According	O
to	O
official	O
docs	O
on	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
:	O
#	O
blockquote	O
.	O
.	O
.	O
i	O
.	O
e	O
.	O
docs	O
pretty	O
much	O
clear	O
that	O
there	O
will	O
be	O
no	O
implicit	O
parallelism	O
.	O
Adding	O
one	O
would	O
be	O
LSP	O
violation	O
.	O
Now	O
,	O
there	O
are	O
"	O
parallell	O
collections	O
"	O
that	O
are	O
promised	O
in	O
Java	O
8	O
,	O
but	O
to	O
work	O
with	O
those	O
you	O
need	O
to	O
me	O
more	O
explicit	O
and	O
put	O
some	O
extra	O
care	O
to	O
use	O
them	O
(	O
see	O
mschenk74	O
'	O
s	O
answer	O
for	O
example	O
)	O
.	O
BTW	O
:	O
in	O
this	O
case	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
be	O
used	O
,	O
and	O
it	O
doesn	O
'	O
t	O
guarantee	O
that	O
actual	O
work	O
will	O
be	O
done	O
in	O
parallell	O
(	O
depends	O
on	O
underlying	O
collection	O
)	O
.	O
UPDATE	O
:	O
might	O
be	O
not	O
that	O
obvious	O
and	O
a	O
little	O
stretched	O
at	O
a	O
glance	O
but	O
there	O
is	O
another	O
facet	O
of	O
style	O
and	O
readability	O
perspective	O
.	O
First	O
of	O
all	O
-	O
plain	O
old	O
forloops	O
are	O
plain	O
and	O
old	O
.	O
Everybody	O
already	O
knows	O
them	O
.	O
Second	O
,	O
and	O
more	O
important	O
-	O
you	O
probably	O
want	O
to	O
use	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
only	O
with	O
one	O
-	O
liner	O
lambdas	O
.	O
If	O
"	O
body	O
"	O
gets	O
heavier	O
-	O
they	O
tend	O
to	O
be	O
not	O
-	O
that	O
readable	O
.	O
You	O
have	O
2	O
options	O
from	O
here	O
-	O
use	O
inner	O
classes	O
(	O
yuck	O
)	O
or	O
use	O
plain	O
old	O
forloop	O
.	O
People	O
often	O
gets	O
annoyed	O
when	O
they	O
see	O
the	O
same	O
things	O
(	O
iteratins	O
over	O
collections	O
)	O
being	O
done	O
various	O
vays	O
/	O
styles	O
in	O
the	O
same	O
codebase	O
,	O
and	O
this	O
seems	O
to	O
be	O
the	O
case	O
.	O
Again	O
,	O
this	O
might	O
or	O
might	O
not	O
be	O
an	O
issue	O
.	O
Depends	O
on	O
people	O
working	O
on	O
code	O
.	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20945113	O
String	B-api_mention
is	O
immutable	O
*	O
but	O
this	O
only	O
means	O
you	O
cannot	O
change	O
it	O
using	O
its	O
public	O
API	O
.	O
What	O
you	O
are	O
doing	O
here	O
is	O
circumventing	O
the	O
normal	O
API	O
,	O
using	O
reflection	O
.	O
The	O
same	O
way	O
,	O
you	O
can	O
change	O
the	O
values	O
of	O
enums	O
,	O
change	O
the	O
lookup	O
table	O
used	O
in	O
Integer	B-api_mention
autoboxing	O
etc	O
.	O
Now	O
,	O
the	O
reason	O
s1	O
and	O
s2	O
change	O
value	O
,	O
is	O
that	O
they	O
both	O
refer	O
to	O
the	O
same	O
interned	O
string	O
.	O
The	O
compiler	O
does	O
this	O
(	O
as	O
mentioned	O
by	O
other	O
answers	O
)	O
.	O
The	O
reason	O
s3	O
does	O
not	O
was	O
actually	O
a	O
bit	O
surprising	O
to	O
me	O
,	O
as	O
I	O
thought	O
it	O
would	O
share	O
the	O
value	O
array	O
(	O
it	O
did	O
in	O
earlier	O
version	O
of	O
Java	O
,	O
before	O
Java	O
7u6	O
)	O
.	O
However	O
,	O
looking	O
at	O
the	O
source	O
code	O
of	O
String	B-api_mention
,	O
we	O
can	O
see	O
that	O
the	O
value	O
character	O
array	O
for	O
a	O
substring	O
is	O
actually	O
copied	O
(	O
using	O
Arrays	B-api_mention
.	I-api_mention
copyOfRange	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
This	O
is	O
why	O
it	O
goes	O
unchanged	O
.	O
You	O
can	O
install	O
a	O
SecurityManager	B-api_mention
,	O
to	O
avoid	O
malicious	O
code	O
to	O
do	O
such	O
things	O
.	O
But	O
keep	O
in	O
mind	O
that	O
some	O
libraries	O
depend	O
on	O
using	O
these	O
kind	O
of	O
reflection	O
tricks	O
(	O
typically	O
ORM	O
tools	O
,	O
AOP	O
libraries	O
etc	O
)	O
.	O
*	O
)	O
I	O
initially	O
wrote	O
that	O
String	B-api_mention
s	O
aren	O
'	O
t	O
really	O
immutable	O
,	O
just	O
"	O
effective	O
immutable	O
"	O
.	O
This	O
might	O
be	O
misleading	O
in	O
the	O
current	O
implementation	O
of	O
String	B-api_mention
,	O
where	O
the	O
value	O
array	O
is	O
indeed	O
marked	O
private	O
final	O
.	O
It	O
'	O
s	O
still	O
worth	O
noting	O
,	O
though	O
,	O
that	O
there	O
is	O
no	O
way	O
to	O
declare	O
an	O
array	O
in	O
Java	O
as	O
immutable	O
,	O
so	O
care	O
must	O
be	O
taken	O
not	O
to	O
expose	O
it	O
outside	O
its	O
class	O
,	O
even	O
with	O
the	O
proper	O
access	O
modifiers	O
.	O
As	O
this	O
topic	O
seems	O
overwhelmingly	O
popular	O
,	O
here	O
'	O
s	O
some	O
suggested	O
further	O
reading	O
:	O
Heinz	O
Kabutz	O
'	O
s	O
Reflection	O
Madness	O
talk	O
from	O
JavaZone	O
2009	O
,	O
which	O
covers	O
a	O
lot	O
of	O
the	O
issues	O
in	O
the	O
OP	O
,	O
along	O
with	O
other	O
reflection	O
.	O
.	O
.	O
well	O
.	O
.	O
.	O
madness	O
.	O
It	O
covers	O
why	O
this	O
is	O
sometimes	O
useful	O
.	O
And	O
why	O
,	O
most	O
of	O
the	O
time	O
,	O
you	O
should	O
avoid	O
it	O
.	O
:	O
-	O
)	O
Question	O
-	O
21105403	O
I	O
'	O
ve	O
written	O
a	O
factory	O
to	O
produce	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Connection	I-api_mention
objects	O
:	O
#	O
pre	O
I	O
'	O
d	O
like	O
to	O
validate	O
the	O
parameters	O
passed	O
to	O
DriverManager	B-api_mention
.	I-api_mention
getConnection	I-api_mention
,	O
but	O
I	O
don	O
'	O
t	O
know	O
how	O
to	O
mock	O
a	O
static	O
method	O
.	O
I	O
'	O
m	O
using	O
JUnit	O
4	O
and	O
Mockito	B-api_mention
for	O
my	O
test	O
cases	O
.	O
Is	O
there	O
a	O
good	O
way	O
to	O
mock	O
/	O
verify	O
this	O
specific	O
use	O
-	O
case	O
?	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489437	O
Java	O
.	O
lang	O
.	O
String	B-api_mention
is	O
not	O
just	O
a	O
class	O
.	O
It	O
'	O
s	O
an	O
integral	O
part	O
of	O
the	O
core	O
language	O
.	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
it	O
.	O
For	O
example	O
,	O
StringLiteral	O
is	O
like	O
an	O
abbreviation	O
for	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
When	O
written	O
StringLiteral	O
the	O
compiler	O
optimizes	O
identical	O
strings	O
to	O
the	O
same	O
instance	O
to	O
save	O
space	O
.	O
StringLiteral	O
+	O
5	O
=	O
=	O
StringLiteral	O
=	O
=	O
>	O
true	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
a	O
lot	O
of	O
stuff	O
,	O
including	O
not	O
having	O
to	O
box	O
/	O
unbox	O
between	O
object	O
versions	O
and	O
their	O
native	O
types	O
,	O
no	O
parent	O
means	O
Object	B-api_mention
,	O
default	O
constructor	O
,	O
.	O
.	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777266	O
It	O
'	O
s	O
a	O
famous	O
problem	O
:	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
arrays	O
is	O
badly	O
broken	O
,	O
just	O
don	O
'	O
t	O
use	O
it	O
,	O
ever	O
.	O
That	O
said	O
,	O
it	O
'	O
s	O
not	O
"	O
broken	O
"	O
as	O
in	O
"	O
someone	O
has	O
done	O
it	O
in	O
a	O
really	O
wrong	O
way	O
"	O
—	O
it	O
'	O
s	O
just	O
doing	O
what	O
'	O
s	O
defined	O
and	O
not	O
what	O
'	O
s	O
usually	O
expected	O
.	O
So	O
for	O
purists	O
:	O
it	O
'	O
s	O
perfectly	O
fine	O
,	O
and	O
that	O
also	O
means	O
,	O
don	O
'	O
t	O
use	O
it	O
,	O
ever	O
.	O
Now	O
the	O
expected	O
behaviour	O
for	O
equals	B-api_mention
is	O
to	O
compare	O
data	O
.	O
The	O
default	O
behaviour	O
is	O
to	O
compare	O
the	O
identity	O
,	O
as	O
Object	B-api_mention
does	O
not	O
have	O
any	O
data	O
(	O
for	O
purists	O
:	O
yes	O
it	O
has	O
,	O
but	O
it	O
'	O
s	O
not	O
the	O
point	O
)	O
;	O
assumption	O
is	O
,	O
if	O
you	O
need	O
equals	B-api_mention
in	O
subclasses	O
,	O
you	O
'	O
ll	O
implement	O
it	O
.	O
In	O
arrays	O
,	O
there	O
'	O
s	O
no	O
implementation	O
for	O
you	O
,	O
so	O
you	O
'	O
re	O
not	O
supposed	O
to	O
use	O
it	O
.	O
So	O
the	O
difference	O
is	O
,	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
works	O
as	O
you	O
would	O
expect	O
(	O
i	O
.	O
e	O
.	O
compares	O
content	O
)	O
,	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
falls	O
back	O
to	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
implementation	O
,	O
which	O
in	O
turn	O
compares	O
identity	O
,	O
and	O
thus	O
better	O
replaced	O
by	O
=	O
=	O
(	O
for	O
purists	O
:	O
yes	O
I	O
know	O
about	O
null	O
)	O
.	O
Problem	O
is	O
,	O
even	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
bite	O
you	O
hard	O
if	O
elements	O
of	O
array	O
do	O
not	O
implement	O
equals	B-api_mention
properly	O
.	O
It	O
'	O
s	O
a	O
very	O
naive	O
statement	O
,	O
I	O
know	O
,	O
but	O
there	O
'	O
s	O
a	O
very	O
important	O
less	O
-	O
than	O
-	O
obvious	O
case	O
:	O
consider	O
a	O
2D	O
array	O
.	O
2D	O
array	O
in	O
Java	O
is	O
an	O
array	O
of	O
arrays	O
,	O
and	O
arrays	O
'	O
equals	B-api_mention
is	O
broken	O
(	O
or	O
useless	O
if	O
you	O
prefer	O
)	O
,	O
so	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
work	O
as	O
you	O
expect	O
on	O
2D	O
arrays	O
.	O
Hope	O
that	O
helps	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14563808	O
It	O
is	O
very	O
unlikely	O
that	O
random	O
number	O
generation	O
performance	O
would	O
be	O
an	O
issue	O
for	O
any	O
use	O
-	O
case	O
you	O
came	O
up	O
with	O
unless	O
accessing	O
a	O
single	O
Random	B-api_mention
instance	O
from	O
multiple	O
threads	O
(	O
because	O
Random	B-api_mention
is	O
synchronized	O
)	O
.	O
However	O
,	O
if	O
that	O
really	O
is	O
the	O
case	O
and	O
you	O
need	O
lots	O
of	O
random	O
numbers	O
fast	O
,	O
your	O
solution	O
is	O
far	O
too	O
unreliable	O
.	O
Sometimes	O
it	O
gives	O
good	O
results	O
,	O
sometimes	O
it	O
gives	O
horrible	O
results	O
(	O
based	O
on	O
the	O
initial	O
settings	O
)	O
.	O
If	O
you	O
want	O
the	O
same	O
numbers	O
that	O
the	O
Random	B-api_mention
class	O
gives	O
you	O
,	O
only	O
faster	O
,	O
you	O
could	O
get	O
rid	O
of	O
the	O
synchronization	O
in	O
there	O
:	O
#	O
pre	O
I	O
simply	O
took	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
code	O
and	O
removed	O
the	O
synchronization	O
which	O
results	O
in	O
twice	O
the	O
performance	O
compared	O
to	O
the	O
original	O
on	O
my	O
Oracle	O
HotSpot	O
JVM	O
7u9	O
.	O
It	O
is	O
still	O
slower	O
than	O
your	O
QuickRandom	B-api_mention
,	O
but	O
it	O
gives	O
much	O
more	O
consistent	O
results	O
.	O
To	O
be	O
precise	O
,	O
for	O
the	O
same	O
seed	O
values	O
and	O
single	O
threaded	O
applications	O
,	O
it	O
gives	O
the	O
same	O
pseudo	O
-	O
random	O
numbers	O
as	O
the	O
original	O
Random	B-api_mention
class	O
would	O
.	O
This	O
code	O
is	O
based	O
on	O
the	O
current	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
in	O
OpenJDK	O
7u	O
which	O
is	O
licensed	O
under	O
GNU	O
GPL	O
v2	O
.	O
EDIT	O
10	O
months	O
later	O
:	O
I	O
just	O
discovered	O
that	O
you	O
don	O
'	O
t	O
even	O
have	O
to	O
use	O
my	O
code	O
above	O
to	O
get	O
an	O
unsynchronized	O
Random	B-api_mention
instance	O
.	O
There	O
'	O
s	O
one	O
in	O
the	O
JDK	O
,	O
too	O
!	O
Look	O
at	O
Java	O
7	O
'	O
s	O
ThreadLocalRandom	B-api_mention
class	O
.	O
The	O
code	O
inside	O
it	O
is	O
almost	O
identical	O
to	O
my	O
code	O
above	O
.	O
The	O
class	O
is	O
simply	O
a	O
local	O
-	O
thread	O
-	O
isolated	O
Random	B-api_mention
version	O
suitable	O
for	O
generating	O
random	O
numbers	O
quickly	O
.	O
The	O
only	O
downside	O
I	O
can	O
think	O
of	O
is	O
that	O
you	O
can	O
'	O
t	O
set	O
its	O
seed	O
manually	O
.	O
Example	O
usage	O
:	O
Random	B-api_mention
random	O
=	O
ThreadLocalRandom	B-api_mention
.	I-api_mention
current	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489394	O
It	O
'	O
s	O
a	O
feature	O
of	O
the	O
Java	O
language	O
.	O
String	B-api_mention
literals	O
in	O
the	O
source	O
code	O
is	O
given	O
special	O
treatment	O
.	O
The	O
language	O
spec	O
,	O
here	O
,	O
simply	O
says	O
that	O
a	O
string	O
literal	O
is	O
of	O
String	B-api_mention
type	O
Question	O
-	O
7935858	O
,	O
answer	O
-	O
7935873	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
.	I-api_mention
split	I-api_mention
splits	O
on	O
regular	O
expressions	O
,	O
and	O
.	O
in	O
a	O
regular	O
expression	O
means	O
"	O
any	O
character	O
"	O
.	O
Try	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32852619	O
Because	O
it	O
'	O
s	O
much	O
faster	O
!	O
I	O
ran	O
some	O
thorough	O
benchmarking	O
tests	O
on	O
cut	O
down	O
versions	O
of	O
the	O
two	O
methods	O
:	O
#	O
pre	O
operating	O
on	O
arrays	O
of	O
various	O
sizes	O
containing	O
random	O
values	O
.	O
Here	O
are	O
the	O
(	O
typical	O
)	O
results	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
results	O
when	O
operating	O
over	O
an	O
array	O
filled	O
with	O
nulls	O
(	O
so	O
garbage	O
collection	O
issues	O
are	O
eradicated	O
)	O
:	O
#	O
pre	O
The	O
numbers	O
are	O
in	O
nanoseconds	O
,	O
(	O
sd	O
)	O
is	O
1	O
standard	O
deviation	O
expressed	O
as	O
a	O
percentage	O
of	O
the	O
result	O
(	O
fyi	O
,	O
a	O
"	O
normally	O
distributed	O
"	O
population	O
has	O
an	O
SD	O
of	O
68	O
)	O
,	O
vs	O
is	O
the	O
JDK	O
8	O
timing	O
relative	O
to	O
JDK	O
7	O
.	O
It	O
is	O
interesting	O
that	O
not	O
only	O
is	O
it	O
significantly	O
faster	O
,	O
but	O
the	O
deviation	O
is	O
also	O
slightly	O
narrower	O
,	O
which	O
means	O
that	O
the	O
JDK	O
8	O
implementation	O
gives	O
slightly	O
more	O
consistent	O
performance	O
.	O
The	O
tests	O
were	O
run	O
on	O
jdk	O
1	O
.	O
8	O
.	O
0	O
_	O
45	O
over	O
a	O
large	O
(	O
millions	O
)	O
number	O
of	O
times	O
on	O
arrays	O
populated	O
with	O
random	O
Integer	B-api_mention
objects	O
.	O
To	O
remove	O
out	O
-	O
lying	O
numbers	O
,	O
on	O
each	O
set	O
of	O
results	O
the	O
fastest	O
and	O
slowest	O
3	O
%	O
of	O
timings	O
were	O
discarded	O
.	O
Garbage	O
collection	O
was	O
requested	O
and	O
the	O
thread	O
yielded	O
and	O
slept	O
just	O
prior	O
to	O
running	O
each	O
invocation	O
of	O
the	O
method	O
.	O
JVM	O
warm	O
up	O
was	O
done	O
on	O
the	O
first	O
20	O
%	O
of	O
work	O
and	O
those	O
results	O
were	O
discarded	O
.	O
Question	O
-	O
13659217	O
,	O
answer	O
-	O
13659231	O
You	O
can	O
'	O
t	O
see	O
this	O
method	O
in	O
javadoc	O
because	O
it	O
'	O
s	O
added	O
by	O
the	O
compiler	O
.	O
Documented	O
in	O
three	O
places	O
:	O
#	O
li	O
Enum	O
Types	O
,	O
The	O
Java	O
Tutorials	O
#	O
blockquote	O
#	O
li	O
Enum	B-api_mention
.	I-api_mention
valueOf	I-api_mention
class	O
(	O
The	O
special	O
implicit	O
values	B-api_mention
method	O
is	O
mentioned	O
in	O
description	O
of	O
valueOf	B-api_mention
method	O
)	O
#	O
blockquote	O
#	O
li	O
Enum	O
Types	O
,	O
Section	O
8	O
.	O
9	O
,	O
Java	O
Language	O
Specification	O
The	O
values	B-api_mention
function	O
simply	O
list	O
all	O
values	O
of	O
the	O
enumeration	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
34405789	O
Set	B-api_mention
and	O
Map	B-api_mention
are	O
non	O
-	O
linear	O
data	O
structure	O
.	O
List	B-api_mention
is	O
linear	O
data	O
structure	O
.	O
The	O
tree	O
data	O
structure	O
SortedSet	B-api_mention
and	O
SortedMap	B-api_mention
interfaces	O
implements	O
TreeSet	B-api_mention
and	O
TreeMap	B-api_mention
respectively	O
using	O
used	O
Red	O
-	O
Black	O
tree	O
implementation	O
algorithm	O
.	O
So	O
it	O
ensure	O
that	O
there	O
are	O
no	O
duplicated	O
items	O
(	O
or	O
keys	O
in	O
case	O
of	O
Map	O
)	O
.	O
#	O
li	O
Tree	O
by	O
definition	O
cannot	O
contain	O
duplicates	O
.	O
#	O
li	O
In	O
List	B-api_mention
we	O
can	O
have	O
duplicates	O
,	O
so	O
there	O
is	O
no	O
TreeList	B-api_mention
.	O
So	O
if	O
we	O
want	O
to	O
sort	O
the	O
list	O
we	O
have	O
to	O
use	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
19418427	O
,	O
answer	O
-	O
19418553	O
If	O
you	O
take	O
a	O
look	O
at	O
this	O
methods	O
#	O
pre	O
and	O
its	O
decompiled	O
with	O
javap	O
-	O
c	O
ClassWithTheseMethods	O
versions	O
you	O
will	O
see	O
#	O
pre	O
and	O
#	O
pre	O
So	O
if	O
Strings	O
are	O
not	O
final	O
compiler	O
will	O
have	O
to	O
use	O
StringBuilder	B-api_mention
to	O
concatenate	O
str1	O
and	O
str2	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
will	O
be	O
compiled	O
to	O
String	B-api_mention
concat	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
means	O
that	O
concat	O
will	O
be	O
created	O
at	O
runtime	O
so	O
will	O
not	O
come	O
from	O
String	B-api_mention
pool	O
.	O
Also	O
if	O
Strings	O
are	O
final	O
then	O
compiler	O
can	O
assume	O
that	O
they	O
will	O
never	O
change	O
so	O
instead	O
of	O
using	O
StringBuilder	B-api_mention
it	O
can	O
safely	O
concatenate	O
its	O
values	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
can	O
be	O
changed	O
to	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
+	O
StringLiteral	O
;	O
and	O
concatenated	O
into	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
;	O
which	O
means	O
that	O
concate	O
will	O
become	O
sting	O
literal	O
which	O
will	O
be	O
interned	O
in	O
string	O
pool	O
and	O
then	O
compared	O
with	O
same	O
string	O
literal	O
from	O
that	O
pool	O
in	O
if	O
statement	O
.	O
Question	O
-	O
19418427	O
,	O
answer	O
-	O
19418548	O
As	O
per	O
my	O
research	O
,	O
all	O
the	O
final	O
String	B-api_mention
are	O
interned	O
in	O
Java	O
.	O
From	O
one	O
of	O
the	O
blog	O
post	O
:	O
#	O
blockquote	O
So	O
it	O
means	O
if	O
you	O
call	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
can	O
compare	O
two	O
strings	O
using	O
=	O
=	O
operator	O
.	O
But	O
here	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
not	O
necessary	O
because	O
in	O
Java	O
final	O
String	B-api_mention
are	O
internally	O
interned	O
.	O
You	O
can	O
find	O
more	O
information	O
String	B-api_mention
comparision	O
using	O
=	O
=	O
operator	O
and	O
Javadoc	O
for	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
Also	O
refer	O
this	O
Stackoverflow	O
post	O
for	O
more	O
information	O
.	O
Question	O
-	O
32323081	O
,	O
answer	O
-	O
32323641	O
First	O
of	O
all	O
,	O
you	O
don	O
'	O
have	O
to	O
overload	O
:	O
D	O
-	O
overloading	O
is	O
never	O
a	O
necessity	O
;	O
use	O
2	O
different	O
method	O
names	O
,	O
e	O
.	O
g	O
.	O
foo	O
and	O
fooX	O
Secondly	O
,	O
I	O
don	O
'	O
t	O
see	O
why	O
you	O
need	O
2	O
methods	O
here	O
.	O
If	O
you	O
want	O
to	O
handle	O
checked	O
and	O
unchecked	O
exceptions	O
differently	O
,	O
it	O
can	O
be	O
done	O
at	O
runtime	O
.	O
To	O
achieve	O
"	O
exception	O
transparency	O
"	O
,	O
you	O
can	O
do	O
#	O
pre	O
Finally	O
,	O
disambiguity	O
can	O
be	O
achieved	O
throw	O
lambda	O
return	O
type	O
;	O
the	O
compiler	O
uses	O
the	O
return	O
type	O
as	O
if	O
using	O
an	O
argument	O
type	O
for	O
choosing	O
the	O
most	O
specific	O
method	O
.	O
This	O
gives	O
us	O
the	O
idea	O
to	O
wrap	O
the	O
value	O
together	O
with	O
the	O
exception	O
type	O
,	O
as	O
Result	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
a	O
"	O
monad	O
"	O
as	O
they	O
say	O
.	O
#	O
pre	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725470	O
List	B-api_mention
iterators	O
guarantee	O
first	O
and	O
foremost	O
that	O
you	O
get	O
the	O
list	O
'	O
s	O
elements	O
in	O
the	O
internal	O
order	O
of	O
the	O
list	O
(	O
aka	O
.	O
insertion	O
order	O
)	O
.	O
More	O
specifically	O
it	O
is	O
in	O
the	O
order	O
you	O
'	O
ve	O
inserted	O
the	O
elements	O
or	O
on	O
how	O
you	O
'	O
ve	O
manipulated	O
the	O
list	O
.	O
Sorting	O
can	O
be	O
seen	O
as	O
a	O
manipulation	O
of	O
the	O
data	O
structure	O
,	O
and	O
there	O
are	O
several	O
ways	O
to	O
sort	O
the	O
list	O
.	O
I	O
'	O
ll	O
order	O
the	O
ways	O
in	O
the	O
order	O
of	O
usefulness	O
as	O
I	O
personally	O
see	O
it	O
:	O
1	O
.	O
Consider	O
using	O
Set	B-api_mention
or	O
Bag	B-api_mention
collections	O
instead	O
NOTE	O
:	O
I	O
put	O
this	O
option	O
at	O
the	O
top	O
because	O
this	O
is	O
what	O
you	O
normally	O
want	O
to	O
do	O
anyway	O
.	O
A	O
sorted	O
set	O
automatically	O
sorts	O
the	O
collection	O
at	O
insertion	O
,	O
meaning	O
that	O
it	O
does	O
the	O
sorting	O
while	O
you	O
add	O
elements	O
into	O
the	O
collection	O
.	O
It	O
also	O
means	O
you	O
don	O
'	O
t	O
need	O
to	O
manually	O
sort	O
it	O
.	O
Furthermore	O
if	O
you	O
are	O
sure	O
that	O
you	O
don	O
'	O
t	O
need	O
to	O
worry	O
about	O
(	O
or	O
have	O
)	O
duplicate	O
elements	O
then	O
you	O
can	O
use	O
the	O
TreeSet	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
instead	O
.	O
It	O
implements	O
SortedSet	B-api_mention
and	O
NavigableSet	B-api_mention
interfaces	O
and	O
works	O
as	O
you	O
'	O
d	O
probably	O
expect	O
from	O
a	O
list	O
:	O
#	O
pre	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
natural	O
ordering	O
you	O
can	O
use	O
the	O
constructor	O
parameter	O
that	O
takes	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Alternatively	O
you	O
can	O
use	O
Multisets	B-api_mention
(	O
also	O
known	O
as	O
Bags	B-api_mention
)	O
,	O
that	O
is	O
a	O
Set	B-api_mention
that	O
allows	O
duplicate	O
elements	O
,	O
instead	O
and	O
there	O
are	O
third	O
party	O
implementations	O
of	O
them	O
.	O
Most	O
notably	O
from	O
the	O
Guava	O
libraries	O
there	O
is	O
a	O
TreeMultiset	B-api_mention
,	O
that	O
works	O
a	O
lot	O
like	O
the	O
TreeSet	B-api_mention
.	O
2	O
.	O
Sort	O
your	O
list	O
with	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
As	O
mentioned	O
above	O
,	O
sorting	O
of	O
List	B-api_mention
s	O
is	O
an	O
manipulation	O
of	O
the	O
data	O
structure	O
.	O
So	O
for	O
situations	O
where	O
you	O
need	O
"	O
one	O
source	O
of	O
truth	O
"	O
that	O
will	O
be	O
sorted	O
in	O
a	O
variety	O
of	O
ways	O
then	O
sorting	O
it	O
manually	O
is	O
the	O
way	O
to	O
go	O
.	O
You	O
can	O
sort	O
your	O
list	O
with	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
is	O
a	O
code	O
sample	O
on	O
how	O
:	O
#	O
pre	O
Using	O
comparators	O
One	O
clear	O
benefit	O
is	O
that	O
you	O
may	O
use	O
Comparator	B-api_mention
in	O
the	O
sort	B-api_mention
method	O
.	O
Java	O
also	O
provides	O
some	O
implementations	O
for	O
the	O
Comparator	B-api_mention
such	O
as	O
the	O
Collator	B-api_mention
which	O
is	O
useful	O
for	O
locale	O
sensitive	O
sorting	O
strings	O
.	O
Here	O
is	O
one	O
example	O
:	O
#	O
pre	O
Sorting	O
in	O
concurrent	O
environments	O
Do	O
note	O
though	O
that	O
using	O
the	O
sort	B-api_mention
method	O
is	O
not	O
friendly	O
in	O
concurrent	O
environments	O
,	O
since	O
the	O
collection	O
instance	O
will	O
be	O
manipulated	O
,	O
and	O
you	O
should	O
consider	O
using	O
immutable	O
collections	O
instead	O
.	O
This	O
is	O
something	O
Guava	O
provides	O
in	O
the	O
Ordering	B-api_mention
class	O
and	O
is	O
a	O
simple	O
one	O
-	O
liner	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
sorted	O
=	O
Ordering	B-api_mention
.	I-api_mention
natural	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sortedCopy	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
3	O
.	O
Wrap	O
your	O
list	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
PriorityQueue	I-api_mention
Though	O
there	O
is	O
no	O
sorted	O
list	O
in	O
Java	O
there	O
is	O
however	O
a	O
sorted	O
queue	O
which	O
would	O
probably	O
work	O
just	O
as	O
well	O
for	O
you	O
.	O
It	O
is	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
PriorityQueue	I-api_mention
class	O
.	O
Nico	O
Haase	O
linked	O
in	O
the	O
comments	O
to	O
a	O
related	O
question	O
that	O
also	O
answers	O
this	O
.	O
In	O
a	O
sorted	O
collection	O
you	O
most	O
likely	O
don	O
'	O
t	O
want	O
to	O
manipulate	O
the	O
internal	O
data	O
structure	O
which	O
is	O
why	O
PriorityQueue	B-api_mention
doesn	O
'	O
t	O
implement	O
the	O
List	B-api_mention
interface	O
(	O
because	O
that	O
would	O
give	O
you	O
direct	O
access	O
to	O
it	O
'	O
s	O
elements	O
)	O
.	O
Caveat	O
on	O
the	O
PriorityQueue	B-api_mention
iterator	O
The	O
PriorityQueue	B-api_mention
class	O
implements	O
the	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
and	O
Collection	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interfaces	O
so	O
it	O
can	O
be	O
iterated	O
as	O
usual	O
.	O
However	O
the	O
iterator	O
is	O
not	O
guaranteed	O
to	O
return	O
elements	O
in	O
the	O
sorted	O
order	O
.	O
Instead	O
(	O
as	O
Alderath	O
points	O
out	O
in	O
the	O
comments	O
)	O
you	O
need	O
to	O
poll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
the	O
queue	O
until	O
empty	O
.	O
Note	O
that	O
you	O
can	O
convert	O
a	O
list	O
to	O
a	O
priority	O
queue	O
via	O
the	O
constructor	O
that	O
takes	O
any	O
collection	O
:	O
#	O
pre	O
4	O
.	O
Write	O
your	O
own	O
SortedList	B-api_mention
class	O
NOTE	O
:	O
You	O
shouldn	O
'	O
t	O
have	O
to	O
do	O
this	O
.	O
You	O
can	O
write	O
your	O
own	O
List	B-api_mention
class	O
that	O
sorts	O
each	O
time	O
you	O
add	O
a	O
new	O
element	O
.	O
This	O
can	O
get	O
rather	O
computation	O
heavy	O
depending	O
on	O
your	O
implementation	O
and	O
is	O
pointless	O
,	O
unless	O
you	O
want	O
to	O
do	O
it	O
as	O
an	O
exercise	O
,	O
because	O
of	O
two	O
main	O
reasons	O
:	O
#	O
li	O
It	O
breaks	O
the	O
contract	O
that	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
has	O
,	O
because	O
the	O
add	B-api_mention
methods	O
should	O
ensure	O
that	O
the	O
element	O
will	O
reside	O
in	O
the	O
index	O
that	O
the	O
user	O
specifies	O
.	O
#	O
li	O
Why	O
reinvent	O
the	O
wheel	O
?	O
You	O
should	O
be	O
using	O
the	O
TreeSet	B-api_mention
or	O
Multisets	B-api_mention
instead	O
as	O
pointed	O
out	O
in	O
the	O
first	O
point	O
above	O
.	O
However	O
if	O
you	O
want	O
to	O
do	O
it	O
as	O
an	O
exercise	O
here	O
is	O
a	O
code	O
sample	O
to	O
get	O
you	O
started	O
,	O
it	O
uses	O
the	O
AbstractList	B-api_mention
abstract	O
class	O
:	O
#	O
pre	O
Note	O
that	O
if	O
you	O
haven	O
'	O
t	O
overridden	O
the	O
methods	O
you	O
need	O
,	O
then	O
the	O
default	O
implementations	O
from	O
AbstractList	B-api_mention
will	O
throw	O
UnsupportedOperationException	B-api_mention
s	O
.	O
Question	O
-	O
18777989	O
,	O
answer	O
-	O
18778228	O
You	O
made	O
a	O
good	O
summery	O
of	O
the	O
practical	O
differences	O
in	O
use	O
and	O
implementation	O
but	O
did	O
not	O
say	O
anything	O
about	O
the	O
difference	O
in	O
meaning	O
.	O
An	O
interface	O
is	O
a	O
description	O
of	O
the	O
behaviour	O
an	O
implementing	O
class	O
will	O
have	O
.	O
The	O
implementing	O
class	O
ensures	O
,	O
that	O
it	O
will	O
have	O
these	O
methods	O
that	O
can	O
be	O
used	O
on	O
it	O
.	O
It	O
is	O
basically	O
a	O
contract	O
or	O
a	O
promise	O
the	O
class	O
has	O
to	O
make	O
.	O
An	O
abstract	O
class	O
is	O
a	O
basis	O
for	O
different	O
subclasses	O
that	O
share	O
behaviour	O
which	O
does	O
not	O
need	O
to	O
be	O
repeatedly	O
be	O
created	O
.	O
Subclasses	O
must	O
complete	O
the	O
behaviour	O
and	O
have	O
the	O
option	O
to	O
override	O
predefine	O
behaviour	O
(	O
as	O
long	O
as	O
it	O
is	O
not	O
defined	O
as	O
final	O
or	O
private	O
)	O
.	O
You	O
will	O
find	O
good	O
examples	O
in	O
the	O
java	O
.	O
util	O
package	O
which	O
includes	O
interfaces	O
like	O
List	B-api_mention
and	O
abstract	O
classes	O
like	O
AbstractList	B-api_mention
which	O
already	O
implements	O
the	O
interface	O
.	O
The	O
official	O
documentation	O
describes	O
the	O
AbstractList	B-api_mention
as	O
follows	O
:	O
#	O
blockquote	O
Question	O
-	O
31922866	O
I	O
'	O
ve	O
read	O
on	O
many	O
Web	O
sites	O
Optional	B-api_mention
should	O
be	O
used	O
as	O
a	O
return	O
type	O
only	O
,	O
and	O
not	O
used	O
in	O
method	O
arguments	O
.	O
I	O
'	O
m	O
struggling	O
to	O
find	O
a	O
logical	O
reason	O
why	O
.	O
For	O
example	O
I	O
have	O
a	O
piece	O
of	O
logic	O
which	O
has	O
2	O
optional	O
parameters	O
.	O
Therefore	O
I	O
think	O
it	O
would	O
make	O
sense	O
to	O
write	O
my	O
method	O
signature	O
like	O
this	O
(	O
solution	O
1	O
)	O
:	O
#	O
pre	O
Many	O
web	O
pages	O
specify	O
Optional	B-api_mention
should	O
not	O
be	O
used	O
as	O
method	O
arguments	O
.	O
With	O
this	O
in	O
mind	O
I	O
could	O
use	O
the	O
following	O
method	O
signature	O
and	O
add	O
a	O
clear	O
Javadoc	O
comment	O
specifying	O
the	O
arguments	O
maybe	O
null	O
hoping	O
future	O
future	O
maintainers	O
will	O
read	O
the	O
javadoc	O
and	O
therefore	O
always	O
carry	O
out	O
null	O
checks	O
prior	O
to	O
using	O
the	O
arguments	O
(	O
solution	O
2	O
)	O
:	O
#	O
pre	O
Alternatively	O
I	O
could	O
replace	O
my	O
method	O
with	O
4	O
public	O
methods	O
to	O
provide	O
a	O
nicer	O
interface	O
and	O
make	O
it	O
more	O
obvious	O
p1	O
and	O
p2	O
are	O
optional	O
(	O
solution	O
3	O
)	O
:	O
#	O
pre	O
Now	O
I	O
try	O
writing	O
the	O
code	O
of	O
the	O
class	O
which	O
invokes	O
this	O
piece	O
of	O
logic	O
for	O
each	O
approach	O
.	O
I	O
first	O
retrieve	O
the	O
2	O
input	O
parameters	O
from	O
another	O
object	O
which	O
returns	O
optionals	O
and	O
then	O
I	O
invoke	O
calculateSomething	O
.	O
Therefore	O
if	O
solution	O
1	O
is	O
used	O
the	O
calling	O
code	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
if	O
solution	O
2	O
is	O
used	O
the	O
calling	O
code	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
if	O
solution	O
3	O
is	O
used	O
I	O
could	O
use	O
the	O
code	O
above	O
or	O
I	O
could	O
use	O
the	O
following	O
(	O
but	O
its	O
a	O
significant	O
amount	O
more	O
code	O
)	O
:	O
#	O
pre	O
So	O
my	O
question	O
is	O
why	O
is	O
it	O
considered	O
bad	O
practice	O
to	O
use	O
Optionals	O
as	O
method	O
arguments	O
as	O
in	O
solution	O
1	O
?	O
It	O
looks	O
like	O
the	O
most	O
readable	O
solution	O
to	O
me	O
and	O
makes	O
it	O
most	O
obvious	O
that	O
the	O
parameters	O
could	O
be	O
empty	O
/	O
null	O
to	O
future	O
maintainers	O
.	O
(	O
I	O
'	O
m	O
aware	O
the	O
designers	O
of	O
Optional	B-api_mention
intended	O
it	O
to	O
only	O
be	O
used	O
as	O
a	O
return	O
type	O
,	O
but	O
I	O
can	O
'	O
t	O
find	O
any	O
logical	O
reasons	O
not	O
to	O
use	O
it	O
in	O
this	O
scenario	O
)	O
Question	O
-	O
12576156	O
,	O
answer	O
-	O
12576394	O
By	O
specifying	O
the	O
the	O
my	O
.	O
list	O
.	O
of	O
.	O
strings	O
=	O
ABC	O
,	O
CDE	O
,	O
EFG	O
in	O
.	O
properties	O
file	O
and	O
using	O
@	O
Value	O
(	O
args	O
)	O
private	O
String	O
[	O
]	O
myString	O
;	O
You	O
can	O
get	O
the	O
arrays	O
of	O
strings	O
.	O
And	O
using	O
CollectionUtils	B-api_mention
.	I-api_mention
addAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
get	O
the	O
list	O
of	O
strings	O
.	O
Question	O
-	O
5243754	O
What	O
is	O
the	O
difference	O
between	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
within	O
HttpServletRequest	B-api_mention
class	O
?	O
Question	O
-	O
14376807	O
,	O
answer	O
-	O
22092971	O
For	O
those	O
looking	O
for	O
a	O
general	O
strategy	O
for	O
reading	O
and	O
writing	O
a	O
string	O
to	O
file	O
:	O
First	O
,	O
get	O
a	O
file	O
object	O
You	O
'	O
ll	O
need	O
the	O
storage	O
path	O
.	O
For	O
the	O
internal	O
storage	O
,	O
use	O
:	O
File	B-api_mention
path	O
=	O
context	O
.	B-api_mention
getFilesDir	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
the	O
external	O
storage	O
(	O
SD	O
card	O
)	O
,	O
use	O
:	O
File	B-api_mention
path	O
=	O
context	O
.	B-api_mention
getExternalFilesDir	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Then	O
create	O
your	O
file	O
object	O
:	O
File	B-api_mention
file	O
=	O
new	O
File	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Write	O
a	O
string	O
to	O
the	O
file	O
#	O
pre	O
Or	O
with	O
Google	O
Guava	O
Files	B-api_mention
.	I-api_mention
write	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Read	O
the	O
file	O
to	O
a	O
string	O
#	O
pre	O
Or	O
if	O
you	O
are	O
using	O
Google	O
Guava	O
String	B-api_mention
contents	O
=	O
Files	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
completeness	O
I	O
'	O
ll	O
mention	O
String	B-api_mention
contents	O
=	O
new	O
Scanner	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
useDelimiter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
next	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
requires	O
no	O
libraries	O
,	O
but	O
benchmarks	O
50	O
%	O
-	O
400	O
%	O
slower	O
than	O
the	O
other	O
options	O
(	O
in	O
various	O
tests	O
on	O
my	O
Nexus	O
5	O
)	O
.	O
Notes	O
For	O
each	O
of	O
these	O
strategies	O
,	O
you	O
'	O
ll	O
be	O
asked	O
to	O
catch	O
an	O
IOException	B-api_mention
.	O
The	O
default	O
character	O
encoding	O
on	O
Android	O
is	O
UTF	O
-	O
8	O
.	O
If	O
you	O
are	O
using	O
external	O
storage	O
,	O
you	O
'	O
ll	O
need	O
to	O
add	O
to	O
your	O
manifest	O
either	O
:	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
or	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
Write	O
permission	O
implies	O
read	O
permission	O
,	O
so	O
you	O
don	O
'	O
t	O
need	O
both	O
.	O
Question	O
-	O
22847105	O
,	O
answer	O
-	O
37354549	O
The	O
way	O
I	O
think	O
about	O
it	O
is	O
that	O
you	O
use	O
flatMap	B-api_mention
when	O
the	O
function	O
you	O
wanted	O
to	O
put	O
inside	O
of	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
Observable	B-api_mention
.	O
In	O
which	O
case	O
you	O
might	O
still	O
try	O
to	O
use	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
it	O
would	O
be	O
unpractical	O
.	O
Let	O
me	O
try	O
to	O
explain	O
why	O
.	O
If	O
in	O
such	O
case	O
you	O
decided	O
to	O
stick	O
with	O
map	O
,	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
For	O
example	O
in	O
your	O
case	O
,	O
if	O
we	O
used	O
an	O
imaginary	O
RxGson	O
library	O
,	O
that	O
returned	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
from	O
it	O
'	O
s	O
toJson	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
instead	O
of	O
simply	O
returning	O
a	O
String	B-api_mention
)	O
it	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
At	O
this	O
point	O
it	O
would	O
be	O
pretty	O
tricky	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
such	O
an	O
observable	O
.	O
Inside	O
of	O
it	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
which	O
you	O
would	O
again	O
need	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
the	O
value	O
.	O
Which	O
is	O
not	O
practical	O
or	O
nice	O
to	O
look	O
at	O
.	O
So	O
to	O
make	O
it	O
useful	O
one	O
idea	O
is	O
to	O
"	O
flatten	O
"	O
this	O
observable	O
of	O
observables	O
(	O
you	O
might	O
start	O
to	O
see	O
where	O
the	O
name	O
_	O
flat	O
_	O
Map	O
comes	O
from	O
)	O
.	O
RxJava	O
provides	O
a	O
few	O
ways	O
to	O
flatten	O
observables	O
and	O
for	O
sake	O
of	O
simplicity	O
lets	O
assume	O
merge	O
is	O
what	O
we	O
want	O
.	O
Merge	O
basically	O
takes	O
a	O
bunch	O
of	O
observables	O
and	O
emits	O
whenever	O
any	O
of	O
them	O
emits	O
.	O
(	O
Lots	O
of	O
people	O
would	O
argue	O
switch	O
would	O
be	O
a	O
better	O
default	O
.	O
But	O
if	O
you	O
'	O
re	O
emitting	O
just	O
one	O
value	O
,	O
it	O
doesn	O
'	O
t	O
matter	O
anyway	O
.	O
)	O
So	O
amending	O
our	O
previous	O
snippet	O
we	O
would	O
get	O
:	O
#	O
pre	O
This	O
is	O
a	O
lot	O
more	O
useful	O
,	O
because	O
subscribing	O
to	O
that	O
(	O
or	O
mapping	O
,	O
or	O
filtering	O
,	O
or	O
.	O
.	O
.	O
)	O
you	O
just	O
get	O
the	O
String	B-api_mention
value	O
.	O
(	O
Also	O
,	O
mind	O
you	O
,	O
such	O
variant	O
of	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
exist	O
in	O
RxJava	O
,	O
but	O
if	O
you	O
understand	O
the	O
idea	O
of	O
merge	O
then	O
I	O
hope	O
you	O
also	O
understand	O
how	O
that	O
would	O
work	O
.	O
)	O
So	O
basically	O
because	O
such	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
probably	O
only	O
ever	O
be	O
useful	O
when	O
it	O
succeeds	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
returning	O
an	O
observable	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
type	O
this	O
over	O
and	O
over	O
again	O
,	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
created	O
as	O
a	O
shorthand	O
.	O
It	O
applies	O
the	O
mapping	O
function	O
just	O
as	O
a	O
normal	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
,	O
but	O
later	O
instead	O
of	O
emitting	O
the	O
returned	O
values	O
it	O
also	O
"	O
flattens	O
"	O
(	O
or	O
merges	O
)	O
them	O
.	O
That	O
'	O
s	O
the	O
general	O
use	O
case	O
.	O
It	O
is	O
most	O
useful	O
in	O
a	O
codebase	O
that	O
uses	O
Rx	O
allover	O
the	O
place	O
and	O
you	O
'	O
ve	O
got	O
many	O
methods	O
returning	O
observables	O
,	O
which	O
you	O
want	O
to	O
chain	O
with	O
other	O
methods	O
returning	O
observables	O
.	O
In	O
your	O
use	O
case	O
it	O
happens	O
to	O
be	O
useful	O
as	O
well	O
,	O
because	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
only	O
transform	O
one	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
into	O
another	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
it	O
cannot	O
transform	O
it	O
into	O
multiple	O
values	O
,	O
no	O
value	O
at	O
all	O
or	O
an	O
error	O
.	O
And	O
as	O
akarnokd	O
wrote	O
in	O
his	O
answer	O
(	O
and	O
mind	O
you	O
he	O
'	O
s	O
much	O
smarter	O
than	O
me	O
,	O
probably	O
in	O
general	O
,	O
but	O
at	O
least	O
when	O
it	O
comes	O
to	O
RxJava	O
)	O
you	O
shouldn	O
'	O
t	O
throw	O
exceptions	O
from	O
your	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
So	O
instead	O
you	O
can	O
use	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
return	O
Observable	B-api_mention
.	I-api_mention
just	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
all	O
goes	O
well	O
,	O
but	O
return	O
Observable	B-api_mention
.	I-api_mention
error	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
something	O
fails	O
.	O
See	O
his	O
answer	O
for	O
a	O
complete	O
snippet	O
:	O
#	O
a	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032208	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
underlying	O
Array	B-api_mention
and	O
set	O
each	O
entry	O
to	O
null	O
;	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
ArrayList	B-api_mention
checking	O
for	O
collection	O
and	O
remove	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
if	O
it	O
exists	O
.	O
I	O
would	O
imagine	O
that	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
way	O
faster	O
then	O
removeAll	B-api_mention
because	O
it	O
'	O
s	O
not	O
comparing	O
,	O
etc	O
.	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
36978943	O
I	O
'	O
ve	O
been	O
confused	O
by	O
the	O
wide	O
range	O
of	O
different	O
naming	O
schemes	O
as	O
well	O
,	O
and	O
was	O
just	O
about	O
to	O
ask	O
and	O
answer	O
my	O
own	O
question	O
on	O
this	O
when	O
I	O
found	O
this	O
question	O
here	O
.	O
I	O
think	O
my	O
findings	O
fit	O
it	O
well	O
enough	O
,	O
and	O
complement	O
what	O
'	O
s	O
already	O
here	O
.	O
My	O
focus	O
is	O
looking	O
for	O
documentation	O
on	O
the	O
various	O
terms	O
,	O
and	O
adding	O
some	O
more	O
related	O
terms	O
that	O
might	O
crop	O
up	O
in	O
other	O
places	O
.	O
Consider	O
the	O
following	O
example	O
:	O
#	O
pre	O
#	O
li	O
The	O
simple	O
name	O
of	O
D	O
is	O
D	O
.	O
That	O
'	O
s	O
just	O
the	O
part	O
you	O
wrote	O
when	O
declaring	O
the	O
class	O
.	O
Anonymous	O
classes	O
have	O
no	O
simple	O
name	O
.	O
Class	B-api_mention
.	I-api_mention
getSimpleName	I-api_mention
(	I-api_mention
)	I-api_mention
returns	O
this	O
name	O
or	O
the	O
empty	O
string	O
.	O
It	O
is	O
possible	O
for	O
the	O
simple	O
name	O
to	O
contain	O
a	O
$	O
if	O
you	O
write	O
it	O
like	O
this	O
,	O
since	O
$	O
is	O
a	O
valid	O
part	O
of	O
an	O
identifier	O
.	O
#	O
li	O
According	O
to	O
the	O
JLS	O
section	O
6	O
.	O
7	O
,	O
both	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
and	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
.	O
D	O
.	O
D	O
would	O
be	O
fully	O
qualified	O
names	O
,	O
but	O
only	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
would	O
be	O
the	O
canonical	O
name	O
of	O
D	O
.	O
So	O
every	O
canonical	O
name	O
is	O
a	O
fully	O
qualified	O
name	O
,	O
but	O
the	O
converes	O
is	O
not	O
always	O
true	O
.	O
Class	B-api_mention
.	I-api_mention
getCanonicalName	I-api_mention
(	I-api_mention
)	I-api_mention
will	O
return	O
the	O
canonical	O
name	O
or	O
null	O
.	O
#	O
li	O
Class	B-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
documented	O
to	O
return	O
the	O
binary	O
name	O
,	O
as	O
specified	O
in	O
JLS	O
section	O
13	O
.	O
1	O
.	O
In	O
this	O
case	O
it	O
returns	O
a	O
.	O
b	O
.	O
C	O
$	O
D	O
for	O
D	O
and	O
[	O
La	O
.	O
b	O
.	O
C	O
$	O
D	O
;	O
for	O
D	O
[	O
]	O
.	O
#	O
li	O
This	O
answer	O
demonstrates	O
that	O
it	O
is	O
possible	O
for	O
two	O
classes	O
loaded	O
by	O
the	O
same	O
class	O
loader	O
to	O
have	O
the	O
same	O
canonical	O
name	O
but	O
distinct	O
binary	O
names	O
.	O
Neither	O
name	O
is	O
sufficient	O
to	O
reliably	O
deduce	O
the	O
other	O
:	O
if	O
you	O
have	O
the	O
canonical	O
name	O
,	O
you	O
don	O
'	O
t	O
know	O
which	O
parts	O
of	O
the	O
name	O
are	O
packages	O
and	O
which	O
are	O
containing	O
classes	O
.	O
If	O
you	O
have	O
the	O
binary	O
name	O
,	O
you	O
don	O
'	O
t	O
know	O
which	O
$	O
were	O
introduced	O
as	O
separators	O
and	O
which	O
were	O
part	O
of	O
some	O
simple	O
name	O
.	O
#	O
li	O
Anonymous	O
classes	O
and	O
local	O
classes	O
have	O
no	O
fully	O
qualified	O
names	O
but	O
still	O
have	O
a	O
binary	O
name	O
.	O
The	O
same	O
holds	O
for	O
classes	O
nested	O
inside	O
such	O
classes	O
.	O
Every	O
class	O
has	O
a	O
binary	O
name	O
.	O
#	O
li	O
Running	O
javap	O
-	O
v	O
-	O
private	O
on	O
a	O
/	O
b	O
/	O
C	O
.	O
class	O
shows	O
that	O
the	O
bytecode	O
refers	O
to	O
the	O
type	O
of	O
d	O
as	O
La	O
/	O
b	O
/	O
C	O
$	O
D	O
;	O
and	O
that	O
of	O
the	O
array	O
ds	O
as	O
[	O
La	O
/	O
b	O
/	O
C	O
$	O
D	O
;	O
.	O
These	O
are	O
called	O
descriptors	O
,	O
and	O
they	O
are	O
specified	O
in	O
JVMS	O
section	O
4	O
.	O
3	O
.	O
#	O
li	O
The	O
class	O
name	O
a	O
/	O
b	O
/	O
C	O
$	O
D	O
used	O
in	O
both	O
of	O
these	O
descriptors	O
is	O
what	O
you	O
get	O
by	O
replacing	O
.	O
by	O
/	O
in	O
the	O
binary	O
name	O
.	O
The	O
JVM	O
spec	O
apparently	O
calls	O
this	O
the	O
internal	O
form	O
of	O
the	O
binary	O
name	O
.	O
JVMS	O
section	O
4	O
.	O
2	O
.	O
1	O
describes	O
it	O
,	O
and	O
states	O
that	O
the	O
difference	O
from	O
the	O
binary	O
name	O
were	O
for	O
historical	O
reasons	O
.	O
#	O
li	O
The	O
file	O
name	O
of	O
a	O
class	O
in	O
one	O
of	O
the	O
typical	O
filename	O
-	O
based	O
class	O
loaders	O
is	O
what	O
you	O
get	O
if	O
you	O
interpret	O
the	O
/	O
in	O
the	O
internal	O
form	O
of	O
the	O
binary	O
name	O
as	O
a	O
directory	O
separator	O
,	O
and	O
append	O
the	O
file	O
name	O
extension	O
.	O
class	O
to	O
it	O
.	O
It	O
'	O
s	O
resolved	O
relative	O
to	O
the	O
class	O
path	O
used	O
by	O
the	O
class	O
loader	O
in	O
question	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
39005452	O
The	O
best	O
post	O
I	O
'	O
ve	O
seen	O
on	O
the	O
topic	O
was	O
written	O
by	O
Daniel	O
Olszewski	O
and	O
can	O
be	O
found	O
at	O
#	O
a	O
.	O
While	O
others	O
mention	O
when	O
you	O
should	O
or	O
should	O
not	O
use	O
Optional	B-api_mention
,	O
this	O
post	O
actually	O
explains	O
why	O
.	O
Cross	O
-	O
posting	O
here	O
in	O
case	O
the	O
link	O
goes	O
down	O
:	O
#	O
blockquote	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
9482369	O
This	O
could	O
be	O
a	O
bit	O
tricky	O
in	O
the	O
most	O
general	O
case	O
.	O
On	O
the	O
face	O
of	O
it	O
,	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
give	O
you	O
the	O
IP	O
address	O
of	O
this	O
host	O
.	O
The	O
problem	O
is	O
that	O
a	O
host	O
could	O
have	O
lots	O
of	O
network	O
interfaces	O
,	O
and	O
an	O
interface	O
could	O
be	O
bound	O
to	O
more	O
than	O
one	O
IP	O
address	O
.	O
And	O
to	O
top	O
that	O
,	O
not	O
all	O
IP	O
addresses	O
will	O
be	O
reachable	O
outside	O
of	O
your	O
machine	O
or	O
your	O
LAN	O
.	O
For	O
example	O
,	O
they	O
could	O
be	O
IP	O
addresses	O
for	O
virtual	O
network	O
devices	O
,	O
private	O
network	O
IP	O
addresses	O
,	O
and	O
so	O
on	O
.	O
What	O
this	O
means	O
is	O
that	O
the	O
IP	O
address	O
returned	O
by	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
might	O
not	O
be	O
the	O
right	O
one	O
to	O
use	O
.	O
How	O
can	O
you	O
deal	O
with	O
this	O
?	O
#	O
li	O
One	O
approach	O
is	O
to	O
use	O
NetworkInterface	B-api_mention
.	I-api_mention
getNetworkInterfaces	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
all	O
of	O
the	O
known	O
network	O
interfaces	O
on	O
the	O
host	O
,	O
and	O
then	O
iterate	O
over	O
each	O
NI	O
'	O
s	O
addresses	O
.	O
#	O
li	O
Another	O
approach	O
is	O
to	O
(	O
somehow	O
)	O
get	O
the	O
externally	O
advertized	O
FQDN	O
for	O
the	O
host	O
,	O
and	O
use	O
InetAddress	B-api_mention
.	I-api_mention
getByName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
look	O
up	O
the	O
primary	O
IP	O
address	O
.	O
(	O
But	O
how	O
do	O
you	O
get	O
it	O
,	O
and	O
how	O
do	O
you	O
deal	O
with	O
a	O
DNS	O
-	O
based	O
load	O
balancer	O
?	O
)	O
#	O
li	O
A	O
variation	O
of	O
the	O
previous	O
is	O
to	O
get	O
the	O
preferred	O
FQDN	O
from	O
a	O
config	O
file	O
or	O
a	O
command	O
line	O
parameter	O
.	O
#	O
li	O
Another	O
variation	O
is	O
to	O
get	O
the	O
preferred	O
IP	O
address	O
from	O
a	O
config	O
file	O
or	O
a	O
command	O
line	O
parameter	O
.	O
In	O
summary	O
,	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
typically	O
work	O
,	O
but	O
you	O
may	O
need	O
to	O
provide	O
an	O
alternative	O
method	O
for	O
the	O
cases	O
where	O
your	O
code	O
is	O
run	O
in	O
an	O
environment	O
with	O
"	O
complicated	O
"	O
networking	O
.	O
#	O
blockquote	O
#	O
li	O
Any	O
address	O
in	O
the	O
range	O
127	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
is	O
a	O
"	O
loopback	O
"	O
address	O
.	O
It	O
is	O
only	O
visible	O
to	O
"	O
this	O
"	O
host	O
.	O
#	O
li	O
Any	O
address	O
in	O
the	O
range	O
192	O
.	O
168	O
.	O
xxx	O
.	O
xxx	O
is	O
a	O
private	O
(	O
aka	O
site	O
local	O
)	O
IP	O
address	O
.	O
These	O
are	O
reserved	O
for	O
use	O
within	O
an	O
organization	O
.	O
The	O
same	O
applies	O
to	O
10	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
addresses	O
,	O
and	O
172	O
.	O
16	O
.	O
xxx	O
.	O
xxx	O
through	O
172	O
.	O
31	O
.	O
xxx	O
.	O
xxx	O
.	O
#	O
li	O
Addresses	O
in	O
the	O
range	O
169	O
.	O
254	O
.	O
xxx	O
.	O
xxx	O
are	O
link	O
local	O
IP	O
addresses	O
.	O
These	O
are	O
reserved	O
for	O
use	O
on	O
a	O
single	O
network	O
segment	O
.	O
#	O
li	O
Addresses	O
in	O
the	O
range	O
224	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
through	O
239	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
are	O
multicast	O
addresses	O
.	O
#	O
li	O
The	O
address	O
255	O
.	O
255	O
.	O
255	O
.	O
255	O
is	O
the	O
broadcast	O
address	O
.	O
#	O
li	O
Anything	O
else	O
should	O
be	O
a	O
valid	O
public	O
point	O
-	O
to	O
-	O
point	O
IPv4	O
address	O
.	O
In	O
fact	O
,	O
the	O
InetAddress	B-api_mention
API	O
provides	O
methods	O
for	O
testing	O
for	O
loopback	O
,	O
link	O
local	O
,	O
site	O
local	O
,	O
multicast	O
and	O
broadcast	O
addresses	O
.	O
You	O
can	O
use	O
these	O
to	O
sort	O
out	O
which	O
of	O
the	O
IP	O
addresses	O
you	O
get	O
back	O
is	O
most	O
appropriate	O
.	O
Question	O
-	O
5175728	O
,	O
answer	O
-	O
5175771	O
Have	O
a	O
look	O
at	O
the	O
Date	B-api_mention
class	O
.	O
There	O
'	O
s	O
also	O
the	O
newer	O
Calendar	O
class	O
which	O
is	O
the	O
preferred	O
method	O
of	O
doing	O
many	O
date	O
/	O
time	O
operations	O
(	O
a	O
lot	O
of	O
the	O
methods	O
on	O
Date	B-api_mention
have	O
been	O
deprecated	O
.	O
)	O
If	O
you	O
just	O
want	O
the	O
current	O
date	O
,	O
then	O
either	O
create	O
a	O
new	O
Date	B-api_mention
object	O
or	O
call	O
Calendar	B-api_mention
.	I-api_mention
getInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
20358928	O
You	O
can	O
use	O
the	O
utility	O
method	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
and	O
feed	O
that	O
result	O
into	O
a	O
new	O
ArrayList	B-api_mention
.	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Other	O
options	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
Collection	I-api_mention
)	I-api_mention
constructor	O
.	O
#	O
li	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
method	O
.	O
#	O
li	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
method	O
.	O
#	O
li	O
Collections	B-api_mention
.	I-api_mention
singletonList	I-api_mention
method	O
.	O
Question	O
-	O
6608795	O
,	O
answer	O
-	O
20069798	O
All	O
these	O
answers	O
around	O
here	O
,	O
as	O
well	O
as	O
the	O
answers	O
in	O
this	O
question	O
,	O
suggest	O
that	O
loading	O
absolute	O
URLs	O
,	O
like	O
"	O
/	O
foo	O
/	O
bar	O
.	O
properties	O
"	O
treated	O
the	O
same	O
by	O
class	O
.	B-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
class	O
.	B-api_mention
getClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
NOT	O
the	O
case	O
,	O
at	O
least	O
not	O
in	O
my	O
Tomcat	O
configuration	O
/	O
version	O
(	O
currently	O
7	O
.	O
0	O
.	O
40	O
)	O
.	O
#	O
pre	O
Sorry	O
,	O
I	O
have	O
absolutely	O
no	O
satisfying	O
explanation	O
,	O
but	O
I	O
guess	O
that	O
tomcat	O
does	O
dirty	O
tricks	O
and	O
his	O
black	O
magic	O
with	O
the	O
classloaders	O
and	O
cause	O
the	O
difference	O
.	O
I	O
always	O
used	O
class	O
.	B-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
past	O
and	O
haven	O
'	O
t	O
had	O
any	O
problems	O
.	O
PS	O
:	O
I	O
also	O
posted	O
this	O
over	O
here	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894348	O
The	O
first	O
one	O
using	O
str	B-api_mention
.	I-api_mention
charAt	I-api_mention
should	O
be	O
faster	O
.	O
If	O
you	O
dig	O
inside	O
the	O
source	O
code	O
of	O
String	O
class	O
,	O
we	O
can	O
see	O
that	O
charAt	O
is	O
implemented	O
as	O
follows	O
:	O
#	O
pre	O
Here	O
,	O
all	O
it	O
does	O
is	O
index	O
an	O
array	O
and	O
return	O
the	O
value	O
.	O
Now	O
,	O
if	O
we	O
see	O
the	O
implementation	O
of	O
toCharArray	B-api_mention
,	O
we	O
will	O
find	O
the	O
below	O
:	O
#	O
pre	O
As	O
you	O
see	O
,	O
it	O
is	O
doing	O
a	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
which	O
is	O
definitely	O
going	O
to	O
be	O
a	O
tad	O
slower	O
than	O
not	O
doing	O
it	O
.	O
Question	O
-	O
23218874	O
,	O
answer	O
-	O
23232560	O
For	O
simple	O
cases	O
such	O
as	O
the	O
one	O
illustrated	O
,	O
they	O
are	O
mostly	O
the	O
same	O
.	O
However	O
,	O
there	O
are	O
a	O
number	O
of	O
subtle	O
differences	O
that	O
might	O
be	O
significant	O
.	O
One	O
issue	O
is	O
with	O
ordering	O
.	O
With	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
the	O
order	O
is	O
undefined	O
.	O
It	O
'	O
s	O
unlikely	O
to	O
occur	O
with	O
sequential	O
streams	O
,	O
still	O
,	O
it	O
'	O
s	O
within	O
the	O
specification	O
for	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
to	O
execute	O
in	O
some	O
arbitrary	O
order	O
.	O
This	O
does	O
occur	O
frequently	O
in	O
parallel	O
streams	O
.	O
By	O
contrast	O
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
always	O
executed	O
in	O
the	O
iteration	O
order	O
of	O
the	O
Iterable	B-api_mention
,	O
if	O
one	O
is	O
specified	O
.	O
Another	O
issue	O
is	O
with	O
side	O
effects	O
.	O
The	O
action	O
specified	O
in	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
required	O
to	O
be	O
non	O
-	O
interfering	O
.	O
(	O
See	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
stream	I-api_mention
package	O
doc	O
.	O
)	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
potentially	O
has	O
fewer	O
restrictions	O
.	O
For	O
the	O
collections	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
generally	O
use	O
that	O
collection	O
'	O
s	O
Iterator	B-api_mention
,	O
most	O
of	O
which	O
are	O
designed	O
to	O
be	O
fail	O
-	O
fast	O
and	O
which	O
will	O
throw	O
ConcurrentModificationException	B-api_mention
if	O
the	O
collection	O
is	O
structurally	O
modified	O
during	O
the	O
iteration	O
.	O
However	O
,	O
modifications	O
that	O
aren	O
'	O
t	O
structural	O
are	O
allowed	O
during	O
iteration	O
.	O
For	O
example	O
,	O
the	O
ArrayList	B-api_mention
class	O
documentation	O
says	O
"	O
merely	O
setting	O
the	O
value	O
of	O
an	O
element	O
is	O
not	O
a	O
structural	O
modification	O
.	O
"	O
Thus	O
,	O
the	O
action	O
for	O
ArrayList	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
allowed	O
to	O
set	O
values	O
in	O
the	O
underlying	O
ArrayList	B-api_mention
without	O
problems	O
.	O
The	O
concurrent	O
collections	O
are	O
yet	O
again	O
different	O
.	O
Instead	O
of	O
fail	O
-	O
fast	O
,	O
they	O
are	O
designed	O
to	O
be	O
weakly	O
consistent	O
.	O
The	O
full	O
definition	O
is	O
at	O
that	O
link	O
.	O
Briefly	O
,	O
though	O
,	O
consider	O
ConcurrentLinkedDeque	B-api_mention
.	O
The	O
action	O
passed	O
to	O
its	O
forEach	B-api_mention
method	O
is	O
allowed	O
to	O
modify	O
the	O
underlying	O
deque	O
,	O
even	O
structurally	O
,	O
and	O
ConcurrentModificationException	B-api_mention
is	O
never	O
thrown	O
.	O
However	O
,	O
the	O
modification	O
that	O
occurs	O
might	O
or	O
might	O
not	O
be	O
visible	O
in	O
this	O
iteration	O
.	O
(	O
Hence	O
the	O
"	O
weak	O
"	O
consistency	O
.	O
)	O
Still	O
another	O
difference	O
is	O
visible	O
if	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
iterating	O
over	O
a	O
synchronized	O
collection	O
.	O
On	O
such	O
a	O
collection	O
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
takes	O
the	O
collection	O
'	O
s	O
lock	O
once	O
and	O
holds	O
it	O
across	O
all	O
the	O
calls	O
to	O
the	O
action	O
method	O
.	O
The	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
call	O
uses	O
the	O
collection	O
'	O
s	O
spliterator	O
,	O
which	O
does	O
not	O
lock	O
,	O
and	O
which	O
relies	O
on	O
the	O
prevailing	O
rule	O
of	O
non	O
-	O
interference	O
.	O
The	O
collection	O
backing	O
the	O
stream	O
could	O
be	O
modified	O
during	O
iteration	O
,	O
and	O
if	O
it	O
is	O
,	O
a	O
ConcurrentModificationException	B-api_mention
or	O
inconsistent	O
behavior	O
could	O
result	O
.	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
21025279	O
Use	O
proper	O
escaping	O
:	O
string	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
the	O
helper	O
Regexp	B-api_mention
.	I-api_mention
quote	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
has	O
been	O
created	O
for	O
exactly	O
this	O
purpose	O
:	O
string	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
works	O
with	O
arbitrary	O
input	O
strings	O
.	O
Very	O
useful	O
when	O
you	O
need	O
to	O
quote	O
/	O
escape	O
user	O
input	O
.	O
Question	O
-	O
23308193	O
,	O
answer	O
-	O
32566745	O
This	O
is	O
possible	O
for	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
solution	O
is	O
not	O
nice	O
,	O
but	O
it	O
is	O
possible	O
.	O
WARNING	O
:	O
You	O
should	O
not	O
use	O
it	O
for	O
controlling	O
business	O
logic	O
,	O
but	O
purely	O
for	O
handling	O
an	O
exceptional	O
situation	O
which	O
occurs	O
during	O
the	O
execution	O
of	O
the	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Such	O
as	O
a	O
resource	O
suddenly	O
stops	O
being	O
accessible	O
,	O
one	O
of	O
the	O
processed	O
objects	O
is	O
violating	O
a	O
contract	O
(	O
e	O
.	O
g	O
.	O
contract	O
says	O
that	O
all	O
the	O
elements	O
in	O
the	O
stream	O
must	O
not	O
be	O
null	O
but	O
suddenly	O
and	O
unexpectedly	O
one	O
of	O
them	O
is	O
null	O
)	O
etc	O
.	O
According	O
to	O
the	O
documentation	O
for	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
So	O
you	O
throw	O
an	O
exception	O
which	O
will	O
immediately	O
break	O
the	O
internal	O
loop	O
.	O
The	O
code	O
will	O
be	O
something	O
like	O
this	O
-	O
I	O
cannot	O
say	O
I	O
like	O
it	O
but	O
it	O
works	O
.	O
You	O
create	O
your	O
own	O
class	O
BreakException	B-api_mention
which	O
extends	O
RuntimeException	B-api_mention
.	O
#	O
pre	O
Notice	O
that	O
the	O
try	O
.	O
.	O
.	O
catch	O
is	O
not	O
around	O
the	O
lambda	O
expression	O
,	O
but	O
rather	O
around	O
the	O
whole	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
To	O
make	O
it	O
more	O
visible	O
,	O
see	O
the	O
following	O
transcription	O
of	O
the	O
code	O
which	O
shows	O
it	O
more	O
clearly	O
:	O
#	O
pre	O
Question	O
-	O
20363719	O
,	O
answer	O
-	O
34675066	O
I	O
was	O
trying	O
to	O
do	O
this	O
and	O
found	O
that	O
,	O
using	O
the	O
answers	O
above	O
,	O
when	O
using	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
key	O
to	O
the	O
Map	B-api_mention
,	O
then	O
I	O
had	O
issues	O
with	O
using	O
a	O
local	O
method	O
like	O
this	O
:	O
:	O
localMethodName	O
to	O
actually	O
work	O
because	O
of	O
typing	O
issues	O
.	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
actually	O
does	O
something	O
to	O
the	O
typing	O
in	O
this	O
case	O
so	O
the	O
method	O
would	O
only	O
work	O
by	O
returning	O
Object	B-api_mention
and	O
accepting	O
a	O
param	O
of	O
Object	B-api_mention
To	O
solve	O
this	O
,	O
I	O
ended	O
up	O
ditching	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
using	O
s	O
-	O
>	O
s	O
instead	O
.	O
So	O
my	O
code	O
,	O
in	O
my	O
case	O
to	O
list	O
all	O
directories	O
inside	O
a	O
directory	O
,	O
and	O
for	O
each	O
one	O
use	O
the	O
name	O
of	O
the	O
directory	O
as	O
the	O
key	O
to	O
the	O
map	O
and	O
then	O
call	O
a	O
method	O
with	O
the	O
directory	O
name	O
and	O
return	O
a	O
collection	O
of	O
items	O
,	O
looks	O
like	O
:	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
items	O
=	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888481	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
,	O
if	O
you	O
are	O
already	O
have	O
an	O
array	O
,	O
you	O
can	O
also	O
do	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
For	O
primitive	O
types	O
use	O
IntStream	B-api_mention
.	I-api_mention
of	I-api_mention
or	O
LongStream	B-api_mention
.	I-api_mention
of	I-api_mention
etc	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
5585876	O
For	O
example	O
,	O
here	O
are	O
two	O
ways	O
:	O
#	O
pre	O
There	O
is	O
a	O
slight	O
difference	O
between	O
these	O
methods	O
:	O
#	O
li	O
valueOf	B-api_mention
returns	O
a	O
new	O
or	O
cached	O
instance	O
of	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Integer	I-api_mention
#	O
li	O
parseInt	B-api_mention
returns	O
primitive	O
int	O
.	O
The	O
same	O
is	O
for	O
all	O
cases	O
:	O
Short	B-api_mention
.	I-api_mention
valueOf	I-api_mention
/	O
parseShort	B-api_mention
,	O
Long	B-api_mention
.	I-api_mention
valueOf	I-api_mention
/	O
parseLong	B-api_mention
,	O
etc	O
.	O
Question	O
-	O
4759570	O
,	O
answer	O
-	O
19459145	O
This	O
works	O
on	O
Windows	O
with	O
Cygwin	O
installed	O
:	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
25441088	O
,	O
answer	O
-	O
25441208	O
I	O
think	O
you	O
'	O
re	O
just	O
looking	O
for	O
the	O
overload	O
which	O
takes	O
another	O
Collector	B-api_mention
to	O
specify	O
what	O
to	O
do	O
with	O
each	O
group	O
.	O
.	O
.	O
and	O
then	O
Collectors	B-api_mention
.	I-api_mention
counting	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
do	O
the	O
counting	O
:	O
#	O
pre	O
Result	O
:	O
{	O
Hello	O
=	O
2	O
,	O
World	O
=	O
1	O
}	O
(	O
There	O
'	O
s	O
also	O
the	O
possibility	O
of	O
using	O
groupingByConcurrent	B-api_mention
for	O
more	O
efficiency	O
.	O
Something	O
to	O
bear	O
in	O
mind	O
for	O
your	O
real	O
code	O
,	O
if	O
it	O
would	O
be	O
safe	O
in	O
your	O
context	O
.	O
)	O
Question	O
-	O
7707556	O
,	O
answer	O
-	O
15870428	O
There	O
is	O
a	O
subtle	O
issue	O
here	O
that	O
is	O
a	O
bit	O
of	O
a	O
gotcha	O
.	O
The	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
a	O
base	O
implementation	O
in	O
Object	B-api_mention
.	O
CharSequence	B-api_mention
is	O
an	O
interface	O
;	O
and	O
although	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
appears	O
as	O
part	O
of	O
that	O
interface	O
,	O
there	O
is	O
nothing	O
at	O
compile	O
-	O
time	O
that	O
will	O
force	O
you	O
to	O
override	O
it	O
and	O
honor	O
the	O
additional	O
constraints	O
that	O
the	O
CharSequence	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
'	O
s	O
javadoc	O
puts	O
on	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
;	O
ie	O
that	O
it	O
should	O
return	O
a	O
string	O
containing	O
the	O
characters	O
in	O
the	O
order	O
returned	O
by	O
charAt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Your	O
IDE	O
won	O
'	O
t	O
even	O
help	O
you	O
out	O
by	O
reminding	O
that	O
you	O
that	O
you	O
probably	O
should	O
override	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
For	O
example	O
,	O
in	O
intellij	O
,	O
this	O
is	O
what	O
you	O
'	O
ll	O
see	O
if	O
you	O
create	O
a	O
new	O
CharSequence	B-api_mention
implementation	O
:	O
#	O
a	O
.	O
Note	O
the	O
absence	O
of	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
.	O
If	O
you	O
rely	O
on	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
on	O
an	O
arbitrary	O
CharSequence	B-api_mention
,	O
it	O
should	O
work	O
provided	O
the	O
CharSequence	B-api_mention
implementer	O
did	O
their	O
job	O
properly	O
.	O
But	O
if	O
you	O
want	O
to	O
avoid	O
any	O
uncertainty	O
altogether	O
,	O
you	O
should	O
use	O
a	O
StringBuilder	B-api_mention
and	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
like	O
so	O
:	O
#	O
pre	O
Question	O
-	O
24914525	O
,	O
answer	O
-	O
24914586	O
std	O
:	O
:	O
list	O
in	O
C	O
+	O
+	O
is	O
a	O
linked	O
list	O
,	O
whereas	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
ArrayList	I-api_mention
is	O
an	O
array	O
.	O
Try	O
replacing	O
std	O
:	O
:	O
list	O
by	O
std	O
:	O
:	O
vector	O
.	O
Also	O
,	O
be	O
sure	O
to	O
compile	O
with	O
optimization	O
turned	O
on	O
.	O
Question	O
-	O
18410035	O
Being	O
somewhat	O
new	O
to	O
the	O
Java	O
language	O
I	O
'	O
m	O
trying	O
to	O
familiarize	O
myself	O
with	O
all	O
the	O
ways	O
(	O
or	O
at	O
least	O
the	O
non	O
-	O
pathological	O
ones	O
)	O
that	O
one	O
might	O
iterate	O
through	O
a	O
list	O
(	O
or	O
perhaps	O
other	O
collections	O
)	O
and	O
the	O
advantages	O
or	O
disadvantages	O
of	O
each	O
.	O
Given	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
object	O
,	O
I	O
know	O
of	O
the	O
following	O
ways	O
to	O
loop	O
through	O
all	O
elements	O
:	O
Basic	O
for	O
loop	O
(	O
of	O
course	O
,	O
there	O
'	O
re	O
equivalent	O
while	O
/	O
do	O
while	O
loops	O
as	O
well	O
)	O
#	O
pre	O
Note	O
:	O
As	O
@	O
amarseillan	O
pointed	O
out	O
,	O
this	O
form	O
is	O
a	O
poor	O
choice	O
for	O
iterating	O
over	O
List	B-api_mention
s	O
because	O
the	O
actual	O
implementation	O
of	O
the	O
get	O
method	O
may	O
not	O
be	O
as	O
efficient	O
as	O
when	O
using	O
an	O
Iterator	B-api_mention
.	O
For	O
example	O
,	O
LinkedList	B-api_mention
implementations	O
must	O
traverse	O
all	O
of	O
the	O
elements	O
preceding	O
i	O
to	O
get	O
the	O
i	O
-	O
th	O
element	O
.	O
In	O
the	O
above	O
example	O
there	O
'	O
s	O
no	O
way	O
for	O
the	O
List	B-api_mention
implementation	O
to	O
"	O
save	O
its	O
place	O
"	O
to	O
make	O
future	O
iterations	O
more	O
efficient	O
.	O
For	O
an	O
ArrayList	B-api_mention
it	O
doesn	O
'	O
t	O
really	O
matter	O
because	O
the	O
complexity	O
/	O
cost	O
of	O
get	O
is	O
constant	O
time	O
(	O
O	O
(	O
1	O
)	O
)	O
whereas	O
for	O
a	O
LinkedList	B-api_mention
is	O
it	O
proportional	O
to	O
the	O
size	O
of	O
the	O
list	O
(	O
O	O
(	O
n	O
)	O
)	O
.	O
For	O
more	O
information	O
about	O
the	O
computational	O
complexity	O
of	O
the	O
built	O
-	O
in	O
Collections	B-api_mention
implementations	O
,	O
check	O
out	O
this	O
question	O
.	O
Enhanced	O
for	O
loop	O
(	O
nicely	O
explained	O
in	O
this	O
question	O
)	O
#	O
pre	O
Iterator	B-api_mention
#	O
pre	O
EDIT	O
:	O
Added	O
ListIterator	B-api_mention
ListIterator	I-api_mention
#	O
pre	O
EDIT	O
:	O
Added	O
"	O
functional	O
-	O
style	O
"	O
solution	O
(	O
thanks	O
Dave	O
Newton	O
)	O
Functional	O
Java	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
can	O
apply	O
a	O
transformation	O
function	O
for	O
e	O
EDIT	O
:	O
Added	O
map	O
method	O
from	O
Java	O
8	O
'	O
s	O
Stream	O
API	O
(	O
see	O
@	O
i	O
_	O
am	O
_	O
zero	O
'	O
s	O
answer	O
)	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
.	O
.	O
.	O
In	O
Java	O
8	O
collection	O
classes	O
that	O
implement	O
Iterable	B-api_mention
(	O
for	O
example	O
all	O
List	B-api_mention
s	O
)	O
now	O
have	O
a	O
forEach	B-api_mention
method	O
,	O
which	O
can	O
be	O
used	O
instead	O
of	O
the	O
for	O
loop	O
statement	O
demonstrated	O
above	O
.	O
(	O
Here	O
is	O
another	O
question	O
that	O
provides	O
a	O
good	O
comparison	O
.	O
)	O
#	O
pre	O
What	O
other	O
ways	O
are	O
there	O
,	O
if	O
any	O
?	O
I	O
feel	O
like	O
this	O
has	O
got	O
to	O
be	O
a	O
duplicate	O
,	O
but	O
I	O
haven	O
'	O
t	O
been	O
able	O
to	O
find	O
what	O
I	O
'	O
m	O
looking	O
for	O
,	O
so	O
I	O
apologize	O
for	O
this	O
question	O
potentially	O
being	O
redundant	O
.	O
(	O
BTW	O
,	O
my	O
interest	O
does	O
not	O
stem	O
at	O
all	O
from	O
a	O
desire	O
to	O
optimize	O
performance	O
;	O
I	O
just	O
want	O
to	O
know	O
what	O
forms	O
are	O
available	O
to	O
me	O
as	O
a	O
developer	O
.	O
)	O
EDIT	O
:	O
Moved	O
ListIterationExample	O
.	O
java	O
to	O
a	O
suggested	O
answer	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27949367	O
The	O
strategy	O
they	O
describe	O
is	O
to	O
simply	O
reuse	O
the	O
internal	O
character	O
array	O
of	O
one	O
String	B-api_mention
in	O
possibly	O
many	O
equal	O
Strings	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
each	O
String	B-api_mention
to	O
have	O
its	O
own	O
copy	O
if	O
they	O
are	O
equal	O
.	O
In	O
order	O
to	O
more	O
quickly	O
determine	O
if	O
2	O
strings	O
are	O
equal	O
,	O
the	O
hash	O
code	O
is	O
used	O
as	O
a	O
first	O
step	O
,	O
as	O
it	O
is	O
a	O
fast	O
way	O
to	O
determine	O
if	O
Strings	O
may	O
be	O
equal	O
.	O
Hence	O
their	O
statement	O
:	O
#	O
blockquote	O
This	O
is	O
to	O
make	O
a	O
certain	O
(	O
but	O
slower	O
)	O
comparison	O
for	O
equality	O
once	O
possible	O
equality	O
has	O
been	O
determined	O
using	O
the	O
hash	O
code	O
.	O
In	O
the	O
end	O
,	O
equal	O
Strings	O
will	O
share	O
a	O
single	O
underlying	O
char	O
array	O
.	O
Java	O
has	O
had	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
a	O
long	O
time	O
,	O
to	O
do	O
more	O
or	O
less	O
the	O
same	O
(	O
i	O
.	O
e	O
.	O
save	O
memory	O
by	O
deduplicating	O
equal	O
Strings	O
)	O
.	O
What	O
'	O
s	O
novel	O
about	O
this	O
is	O
that	O
it	O
happens	O
during	O
garbage	O
collection	O
time	O
and	O
can	O
be	O
externally	O
controlled	O
.	O
Question	O
-	O
6667243	O
What	O
is	O
the	O
best	O
way	O
to	O
use	O
the	O
values	O
stored	O
in	O
an	O
Enum	B-api_mention
as	O
String	B-api_mention
literals	O
?	O
For	O
example	O
:	O
#	O
pre	O
Then	O
later	O
I	O
could	O
use	O
Mode	O
.	O
mode1	O
to	O
return	O
its	O
string	O
representation	O
as	O
mode1	O
.	O
Without	O
having	O
to	O
keep	O
calling	O
Mode	O
.	O
model	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
30125296	O
,	O
answer	O
-	O
30125487	O
I	O
suggest	O
2	O
more	O
options	O
:	O
#	O
pre	O
The	O
second	O
one	O
uses	O
Collectors	B-api_mention
.	I-api_mention
summingInt	I-api_mention
(	I-api_mention
)	I-api_mention
collector	O
.	O
Besides	O
,	O
Java	O
8	O
introduces	O
a	O
very	O
effective	O
LongAdder	O
accumulator	O
designed	O
to	O
speed	O
-	O
up	O
summarizing	O
in	O
parallel	O
streams	O
and	O
multi	O
-	O
thread	O
environments	O
.	O
Here	O
,	O
it	O
may	O
be	O
used	O
as	O
follows	O
:	O
#	O
pre	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276469	O
It	O
will	O
be	O
fine	O
if	O
you	O
only	O
close	O
the	O
last	O
stream	O
-	O
the	O
close	O
call	O
will	O
be	O
send	O
to	O
the	O
underlying	O
streams	O
,	O
too	O
.	O
Question	O
-	O
9297899	O
,	O
answer	O
-	O
25816501	O
Even	O
though	O
this	O
is	O
not	O
a	O
direct	O
answer	O
to	O
the	O
question	O
,	O
it	O
is	O
an	O
addition	O
to	O
the	O
.	B-api_mention
length	I-api_mention
vs	O
.	B-api_mention
size	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
argument	O
.	O
I	O
was	O
researching	O
something	O
related	O
to	O
this	O
question	O
so	O
when	O
I	O
came	O
across	O
it	O
I	O
noticed	O
that	O
the	O
definition	O
(	O
s	O
)	O
provided	O
here	O
#	O
blockquote	O
is	O
not	O
"	O
exactly	O
"	O
correct	O
.	O
The	O
field	O
length	O
contains	O
the	O
number	O
of	O
available	O
places	O
to	O
put	O
a	O
component	O
,	O
not	O
the	O
number	O
of	O
components	O
present	O
in	O
the	O
array	O
.	O
So	O
it	O
represents	O
the	O
total	O
available	O
memory	O
allocated	O
to	O
that	O
array	O
,	O
not	O
how	O
much	O
of	O
that	O
memory	O
is	O
filled	O
.	O
#	O
img	O
Example	O
:	O
#	O
pre	O
Output	O
:	O
#	O
pre	O
However	O
,	O
the	O
.	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
property	O
of	O
the	O
ArrayList	B-api_mention
does	O
give	O
the	O
number	O
of	O
elements	O
in	O
the	O
list	O
:	O
#	O
pre	O
Output	O
:	O
#	O
pre	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29099896	O
This	O
is	O
a	O
very	O
interesting	O
problem	O
.	O
I	O
came	O
up	O
with	O
a	O
one	O
line	O
solution	O
.	O
It	O
might	O
not	O
very	O
performant	O
but	O
it	O
works	O
.	O
#	O
pre	O
It	O
is	O
a	O
similar	O
idea	O
that	O
@	O
Rohit	O
Jain	O
came	O
up	O
with	O
.	O
I	O
'	O
m	O
grouping	O
the	O
space	O
between	O
the	O
null	O
values	O
.	O
If	O
you	O
really	O
want	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
you	O
may	O
append	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ll	O
=	O
cl	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
18636561	O
,	O
answer	O
-	O
18824858	O
Whenever	O
a	O
new	O
keyword	O
is	O
used	O
it	O
Creates	O
a	O
Object	B-api_mention
at	O
the	O
Heap	O
1	O
)	O
StringBuilder	B-api_mention
sample	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
)	I-api_mention
;	O
2	O
)	O
StringBuilder	B-api_mention
referToSample	O
=	O
sample	O
;	O
In	O
2	O
)	O
the	O
Reference	O
of	O
referSample	O
is	O
created	O
on	O
same	O
object	O
sample	O
thus	O
referToSample	O
=	O
null	O
;	O
is	O
Nulling	O
Only	O
the	O
referSample	O
Reference	O
giving	O
no	O
effect	O
to	O
sample	O
that	O
'	O
s	O
why	O
you	O
are	O
not	O
getting	O
NULL	O
Pointer	O
Exception	O
Thanks	O
to	O
Java	O
'	O
s	O
Garbage	O
Collection	O
Question	O
-	O
24603186	O
,	O
answer	O
-	O
24603187	O
The	O
Javadocs	O
for	O
Collection	B-api_mention
.	I-api_mention
(	I-api_mention
parallelS	I-api_mention
|	I-api_mention
s	I-api_mention
)	I-api_mention
tream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Stream	B-api_mention
itself	O
don	O
'	O
t	O
answer	O
the	O
question	O
,	O
so	O
it	O
'	O
s	O
off	O
to	O
the	O
mailing	O
lists	O
for	O
the	O
rationale	O
.	O
I	O
went	O
through	O
the	O
lambda	O
-	O
libs	O
-	O
spec	O
-	O
observers	O
archives	O
and	O
found	O
one	O
thread	O
specifically	O
about	O
Collection	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
another	O
thread	O
that	O
touched	O
on	O
whether	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Arrays	I-api_mention
should	O
provide	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
match	O
(	O
or	O
actually	O
,	O
whether	O
it	O
should	O
be	O
removed	O
)	O
.	O
There	O
was	O
no	O
once	O
-	O
and	O
-	O
for	O
-	O
all	O
conclusion	O
,	O
so	O
perhaps	O
I	O
'	O
ve	O
missed	O
something	O
from	O
another	O
list	O
or	O
the	O
matter	O
was	O
settled	O
in	O
private	O
discussion	O
.	O
(	O
Perhaps	O
Brian	O
Goetz	O
,	O
one	O
of	O
the	O
principals	O
of	O
this	O
discussion	O
,	O
can	O
fill	O
in	O
anything	O
missing	O
.	O
)	O
The	O
participants	O
made	O
their	O
points	O
well	O
,	O
so	O
this	O
answer	O
is	O
mostly	O
just	O
an	O
organization	O
of	O
the	O
relevant	O
quotes	O
,	O
with	O
a	O
few	O
clarifications	O
in	O
[	O
brackets	O
]	O
,	O
presented	O
in	O
order	O
of	O
importance	O
(	O
as	O
I	O
interpret	O
it	O
)	O
.	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
covers	O
a	O
very	O
common	O
case	O
Brian	O
Goetz	O
in	O
the	O
first	O
thread	O
,	O
explaining	O
why	O
Collections	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
valuable	O
enough	O
to	O
keep	O
even	O
after	O
other	O
parallel	O
stream	O
factory	O
methods	O
have	O
been	O
removed	O
:	O
#	O
blockquote	O
Brian	O
Goetz	O
stands	O
by	O
this	O
position	O
in	O
the	O
later	O
discussion	O
about	O
Arrays	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
more	O
performant	O
Brian	O
Goetz	O
:	O
#	O
blockquote	O
In	O
response	O
to	O
Kevin	O
Bourrillion	O
'	O
s	O
skepticism	O
about	O
whether	O
the	O
effect	O
is	O
significant	O
,	O
Brian	O
again	O
:	O
#	O
blockquote	O
Doug	O
Lea	O
follows	O
up	O
,	O
but	O
hedges	O
his	O
position	O
:	O
#	O
blockquote	O
Indeed	O
,	O
the	O
later	O
discussion	O
about	O
Arrays	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
takes	O
notice	O
of	O
lower	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
cost	O
.	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
statefulness	O
complicates	O
the	O
future	O
At	O
the	O
time	O
of	O
the	O
discussion	O
,	O
switching	O
a	O
stream	O
from	O
sequential	O
to	O
parallel	O
and	O
back	O
could	O
be	O
interleaved	O
with	O
other	O
stream	O
operations	O
.	O
Brian	O
Goetz	O
,	O
on	O
behalf	O
of	O
Doug	O
Lea	O
,	O
explains	O
why	O
sequential	O
/	O
parallel	O
mode	O
switching	O
may	O
complicate	O
future	O
development	O
of	O
the	O
Java	O
platform	O
:	O
#	O
blockquote	O
This	O
mode	O
switching	O
was	O
removed	O
after	O
further	O
discussion	O
.	O
In	O
the	O
current	O
version	O
of	O
the	O
library	O
,	O
a	O
stream	O
pipeline	O
is	O
either	O
sequential	O
or	O
parallel	O
;	O
last	O
call	O
to	O
sequential	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
wins	O
.	O
Besides	O
side	O
-	O
stepping	O
the	O
statefulness	O
problem	O
,	O
this	O
change	O
also	O
improved	O
the	O
performance	O
of	O
using	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
set	O
up	O
a	O
parallel	O
pipeline	O
from	O
a	O
sequential	O
stream	O
factory	O
.	O
exposing	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
as	O
a	O
first	O
-	O
class	O
citizen	O
improves	O
programmer	O
perception	O
of	O
the	O
library	O
,	O
leading	O
them	O
to	O
write	O
better	O
code	O
Brian	O
Goetz	O
again	O
,	O
in	O
response	O
to	O
Tim	O
Peierls	O
'	O
s	O
argument	O
that	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
allows	O
programmers	O
to	O
understand	O
streams	O
sequentially	O
before	O
going	O
parallel	O
:	O
#	O
blockquote	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571348	O
The	O
object	O
your	O
method	O
decompressGZIP	O
(	O
args	O
)	O
needs	O
is	O
a	O
byte	O
[	O
]	O
.	O
So	O
the	O
basic	O
,	O
technical	O
answer	O
to	O
the	O
question	O
you	O
have	O
asked	O
is	O
:	O
#	O
pre	O
However	O
the	O
problem	O
you	O
appear	O
to	O
be	O
wrestling	O
with	O
is	O
that	O
this	O
doesn	O
'	O
t	O
display	O
very	O
well	O
.	O
Calling	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
just	O
give	O
you	O
the	O
default	O
Object	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
is	O
the	O
class	O
name	O
+	O
memory	O
address	O
.	O
In	O
your	O
result	O
[	O
B	O
@	O
38ee9f13	O
,	O
the	O
[	O
B	O
means	O
byte	O
[	O
]	O
and	O
38ee9f13	O
is	O
the	O
memory	O
address	O
,	O
separated	O
by	O
an	O
@	O
.	O
For	O
display	O
purposes	O
you	O
can	O
use	O
:	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
this	O
will	O
just	O
display	O
as	O
a	O
sequence	O
of	O
comma	O
-	O
separated	O
integers	O
,	O
which	O
may	O
or	O
may	O
not	O
be	O
what	O
you	O
want	O
.	O
To	O
get	O
a	O
readable	O
String	B-api_mention
back	O
from	O
a	O
byte	O
[	O
]	O
,	O
use	O
:	O
String	B-api_mention
string	O
=	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
reason	O
the	O
Charset	B-api_mention
version	O
is	O
favoured	O
,	O
is	O
that	O
all	O
String	B-api_mention
objects	O
in	O
Java	O
are	O
stored	O
internally	O
as	O
UTF	O
-	O
16	O
.	O
When	O
converting	O
to	O
a	O
byte	O
[	O
]	O
you	O
will	O
get	O
a	O
different	O
breakdown	O
of	O
bytes	O
for	O
the	O
given	O
glyphs	O
of	O
that	O
String	B-api_mention
,	O
depending	O
upon	O
the	O
chosen	O
charset	O
.	O
Question	O
-	O
14833008	O
,	O
answer	O
-	O
14833098	O
"	O
.	O
"	O
is	O
a	O
special	O
character	O
in	O
java	O
.	O
You	O
have	O
to	O
use	O
"	O
\	O
.	O
"	O
to	O
escape	O
this	O
character	O
:	O
final	O
String	B-api_mention
extensionRemoved	O
=	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
I	O
hope	O
this	O
helps	O
Question	O
-	O
27504925	O
The	O
Java	O
language	O
specification	O
specifies	O
that	O
#	O
blockquote	O
So	O
,	O
considering	O
arrays	O
are	O
objects	O
—	O
why	O
did	O
the	O
Java	O
designers	O
make	O
the	O
decision	O
not	O
to	O
allow	O
inherit	O
and	O
override	O
from	O
it	O
,	O
for	O
example	O
,	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
The	O
current	O
syntax	O
wouldn	O
'	O
t	O
allow	O
creating	O
anonymous	O
classes	O
with	O
an	O
array	O
as	O
the	O
base	O
class	O
,	O
but	O
I	O
don	O
'	O
t	O
think	O
that	O
was	O
the	O
reason	O
for	O
their	O
decision	O
.	O
Question	O
-	O
4576352	O
I	O
can	O
use	O
this	O
:	O
#	O
pre	O
Is	O
there	O
a	O
way	O
to	O
remove	O
all	O
occurrences	O
of	O
character	O
X	O
from	O
a	O
String	O
in	O
Java	O
?	O
I	O
tried	O
this	O
and	O
is	O
not	O
what	O
I	O
want	O
:	O
str	B-api_mention
.	I-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
replace	O
with	O
space	O
Question	O
-	O
29328785	O
#	O
pre	O
Compile	O
>	O
javac	O
BigDecimalTest	O
.	O
java	O
Execute	O
>	O
java	O
BigDecimalTest	O
Output	O
#	O
pre	O
The	O
value	O
of	O
z	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
output	O
is	O
correct	O
4	O
.	O
883242e	O
+	O
888	O
/	O
7	O
.	O
115109e	O
+	O
302	O
=	O
6	O
.	O
863200e	O
+	O
585	O
as	O
is	O
the	O
value	O
of	O
y	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
notice	O
that	O
the	O
value	O
given	O
for	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
completely	O
wrong	O
.	O
Why	O
is	O
this	O
?	O
Strangely	O
,	O
if	O
the	O
scale	O
(	O
i	O
.	O
e	O
.	O
desired	O
decimal	O
places	O
)	O
of	O
the	O
result	O
of	O
the	O
division	O
is	O
changed	O
BigDecimal	B-api_mention
z	O
=	O
x	O
.	B-api_mention
divide	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
produce	O
the	O
correct	O
value	O
for	O
x	O
.	O
Or	O
,	O
if	O
the	O
operands	O
are	O
swapped	O
BigDecimal	B-api_mention
z	O
=	O
y	O
.	B-api_mention
divide	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
also	O
then	O
produce	O
the	O
correct	O
value	O
.	O
Or	O
,	O
if	O
the	O
exponent	O
of	O
x	O
is	O
changed	O
from	O
e	O
+	O
888	O
to	O
e	O
.	O
g	O
.	O
e	O
+	O
878	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
correct	O
.	O
Or	O
,	O
if	O
another	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
is	O
added	O
above	O
the	O
divide	O
operation	O
,	O
then	O
both	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
will	O
produce	O
the	O
correct	O
value	O
!	O
On	O
the	O
machine	O
I	O
'	O
m	O
testing	O
this	O
,	O
Windows	O
7	O
64	O
bit	O
,	O
the	O
behaviour	O
is	O
the	O
same	O
using	O
java	O
7	O
and	O
8	O
,	O
both	O
32bit	O
and	O
64	O
bit	O
versions	O
,	O
but	O
testing	O
online	O
at	O
#	O
a	O
produces	O
different	O
results	O
for	O
java	O
7	O
and	O
java	O
8	O
.	O
Using	O
java	O
7	O
,	O
the	O
value	O
of	O
x	O
is	O
given	O
correctly	O
:	O
#	O
a	O
,	O
but	O
using	O
java	O
8	O
its	O
value	O
is	O
incorrect	O
:	O
#	O
a	O
.	O
Also	O
,	O
this	O
behaviour	O
is	O
not	O
unique	O
to	O
this	O
particular	O
value	O
of	O
x	O
,	O
as	O
calling	O
toString	B-api_mention
on	O
other	O
BigDecimals	O
with	O
more	O
than	O
about	O
1500	O
digits	O
after	O
passing	O
them	O
as	O
the	O
first	O
operand	O
to	O
a	O
divide	O
operation	O
will	O
also	O
produce	O
incorrect	O
values	O
.	O
What	O
is	O
the	O
explanation	O
for	O
this	O
?	O
The	O
divide	O
operation	O
seems	O
to	O
be	O
mutating	O
the	O
value	O
produced	O
by	O
subsequent	O
toString	B-api_mention
calls	O
on	O
its	O
operands	O
.	O
Does	O
this	O
happen	O
on	O
your	O
platform	O
?	O
Edit	O
:	O
The	O
issue	O
seems	O
to	O
be	O
with	O
the	O
java	O
8	O
runtime	O
only	O
,	O
as	O
the	O
above	O
program	O
compiled	O
with	O
java	O
7	O
produces	O
correct	O
output	O
when	O
executed	O
with	O
the	O
java	O
7	O
runtime	O
,	O
but	O
incorrect	O
output	O
when	O
executed	O
with	O
the	O
java	O
8	O
runtime	O
.	O
Edit	O
:	O
I	O
'	O
ve	O
tested	O
with	O
the	O
early	O
access	O
jre1	O
.	O
8	O
.	O
0	O
_	O
60	O
and	O
the	O
bug	O
does	O
not	O
appear	O
,	O
and	O
according	O
to	O
Marco13	O
'	O
s	O
answer	O
it	O
was	O
fixed	O
in	O
build	O
51	O
.	O
The	O
Oracle	O
JDK	O
8	O
product	O
binaries	O
are	O
only	O
at	O
update	O
40	O
though	O
so	O
it	O
may	O
be	O
some	O
time	O
before	O
the	O
fixed	O
versions	O
are	O
widely	O
used	O
.	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
13291166	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
"	O
built	O
-	O
in	O
"	O
method	O
of	O
enum	O
.	O
It	O
is	O
final	O
and	O
you	O
cannot	O
change	O
its	O
implementation	O
.	O
It	O
returns	O
the	O
name	O
of	O
enum	O
constant	O
as	O
it	O
is	O
written	O
,	O
e	O
.	O
g	O
.	O
in	O
upper	O
case	O
,	O
without	O
spaces	O
etc	O
.	O
Compare	O
MOBILE	O
_	O
PHONE	O
_	O
NUMBER	O
and	O
Mobile	O
phone	O
number	O
.	O
Which	O
version	O
is	O
more	O
readable	O
?	O
I	O
believe	O
the	O
second	O
one	O
.	O
This	O
is	O
the	O
difference	O
:	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
always	O
returns	O
MOBILE	O
_	O
PHONE	O
_	O
NUMBER	O
,	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
be	O
overriden	O
to	O
return	O
Mobile	O
phone	O
number	O
.	O
Question	O
-	O
7693324	O
,	O
answer	O
-	O
7693341	O
To	O
convert	O
a	O
String	B-api_mention
to	O
a	O
Long	B-api_mention
(	O
object	O
)	O
,	O
use	O
Long	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
longValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
See	O
link	O
Question	O
-	O
15621083	O
I	O
am	O
working	O
on	O
some	O
Java	O
code	O
which	O
needs	O
to	O
be	O
highly	O
optimized	O
as	O
it	O
will	O
run	O
in	O
hot	O
functions	O
that	O
are	O
invoked	O
at	O
many	O
points	O
in	O
my	O
main	O
program	O
logic	O
.	O
Part	O
of	O
this	O
code	O
involves	O
multiplying	O
double	O
variables	O
by	O
10	O
raised	O
to	O
arbitrary	O
non	O
-	O
negative	O
int	O
exponent	O
s	O
.	O
One	O
fast	O
way	O
(	O
edit	O
:	O
but	O
not	O
the	O
fastest	O
possible	O
,	O
see	O
Update	O
2	O
below	O
)	O
to	O
get	O
the	O
multiplied	O
value	O
is	O
to	O
switch	O
on	O
the	O
exponent	O
:	O
#	O
pre	O
The	O
commented	O
ellipses	O
above	O
indicate	O
that	O
the	O
case	O
int	O
constants	O
continue	O
incrementing	O
by	O
1	O
,	O
so	O
there	O
are	O
really	O
19	O
case	O
s	O
in	O
the	O
above	O
code	O
snippet	O
.	O
Since	O
I	O
wasn	O
'	O
t	O
sure	O
whether	O
I	O
would	O
actually	O
need	O
all	O
the	O
powers	O
of	O
10	O
in	O
case	O
statements	O
10	O
thru	O
18	O
,	O
I	O
ran	O
some	O
microbenchmarks	O
comparing	O
the	O
time	O
to	O
complete	O
10	O
million	O
operations	O
with	O
this	O
switch	O
statement	O
versus	O
a	O
switch	O
with	O
only	O
case	O
s	O
0	O
thru	O
9	O
(	O
with	O
the	O
exponent	O
limited	O
to	O
9	O
or	O
less	O
to	O
avoid	O
breaking	O
the	O
pared	O
-	O
down	O
switch	O
)	O
.	O
I	O
got	O
the	O
rather	O
surprising	O
(	O
to	O
me	O
,	O
at	O
least	O
!	O
)	O
result	O
that	O
the	O
longer	O
switch	O
with	O
more	O
case	O
statements	O
actually	O
ran	O
faster	O
.	O
On	O
a	O
lark	O
,	O
I	O
tried	O
adding	O
even	O
more	O
case	O
s	O
which	O
just	O
returned	O
dummy	O
values	O
,	O
and	O
found	O
that	O
I	O
could	O
get	O
the	O
switch	O
to	O
run	O
even	O
faster	O
with	O
around	O
22	O
-	O
27	O
declared	O
case	O
s	O
(	O
even	O
though	O
those	O
dummy	O
cases	O
are	O
never	O
actually	O
hit	O
while	O
the	O
code	O
is	O
running	O
)	O
.	O
(	O
Again	O
,	O
case	O
s	O
were	O
added	O
in	O
a	O
contiguous	O
fashion	O
by	O
incrementing	O
the	O
prior	O
case	O
constant	O
by	O
1	O
.	O
)	O
These	O
execution	O
time	O
differences	O
are	O
not	O
very	O
significant	O
:	O
for	O
a	O
random	O
exponent	O
between	O
0	O
and	O
10	O
,	O
the	O
dummy	O
padded	O
switch	O
statement	O
finishes	O
10	O
million	O
executions	O
in	O
1	O
.	O
49	O
secs	O
versus	O
1	O
.	O
54	O
secs	O
for	O
the	O
unpadded	O
version	O
,	O
for	O
a	O
grand	O
total	O
savings	O
of	O
5ns	O
per	O
execution	O
.	O
So	O
,	O
not	O
the	O
kind	O
of	O
thing	O
that	O
makes	O
obsessing	O
over	O
padding	O
out	O
a	O
switch	O
statement	O
worth	O
the	O
effort	O
from	O
an	O
optimization	O
standpoint	O
.	O
But	O
I	O
still	O
just	O
find	O
it	O
curious	O
and	O
counter	O
-	O
intuitive	O
that	O
a	O
switch	O
doesn	O
'	O
t	O
become	O
slower	O
(	O
or	O
perhaps	O
at	O
best	O
maintain	O
constant	O
O	O
(	O
1	O
)	O
time	O
)	O
to	O
execute	O
as	O
more	O
case	O
s	O
are	O
added	O
to	O
it	O
.	O
#	O
img	O
These	O
are	O
the	O
results	O
I	O
obtained	O
from	O
running	O
with	O
various	O
limits	O
on	O
the	O
randomly	O
-	O
generated	O
exponent	O
values	O
.	O
I	O
didn	O
'	O
t	O
include	O
the	O
results	O
all	O
the	O
way	O
down	O
to	O
1	O
for	O
the	O
exponent	O
limit	O
,	O
but	O
the	O
general	O
shape	O
of	O
the	O
curve	O
remains	O
the	O
same	O
,	O
with	O
a	O
ridge	O
around	O
the	O
12	O
-	O
17	O
case	O
mark	O
,	O
and	O
a	O
valley	O
between	O
18	O
-	O
28	O
.	O
All	O
tests	O
were	O
run	O
in	O
JUnitBenchmarks	O
using	O
shared	O
containers	O
for	O
the	O
random	O
values	O
to	O
ensure	O
identical	O
testing	O
inputs	O
.	O
I	O
also	O
ran	O
the	O
tests	O
both	O
in	O
order	O
from	O
longest	O
switch	O
statement	O
to	O
shortest	O
,	O
and	O
vice	O
-	O
versa	O
,	O
to	O
try	O
and	O
eliminate	O
the	O
possibility	O
of	O
ordering	O
-	O
related	O
test	O
problems	O
.	O
I	O
'	O
ve	O
put	O
my	O
testing	O
code	O
up	O
on	O
a	O
github	O
repo	O
if	O
anyone	O
wants	O
to	O
try	O
to	O
reproduce	O
these	O
results	O
.	O
So	O
,	O
what	O
'	O
s	O
going	O
on	O
here	O
?	O
Some	O
vagaries	O
of	O
my	O
architecture	O
or	O
micro	O
-	O
benchmark	O
construction	O
?	O
Or	O
is	O
the	O
Java	O
switch	O
really	O
a	O
little	O
faster	O
to	O
execute	O
in	O
the	O
18	O
to	O
28	O
case	O
range	O
than	O
it	O
is	O
from	O
11	O
up	O
to	O
17	O
?	O
github	O
test	O
repo	O
"	O
switch	O
-	O
experiment	O
"	O
UPDATE	O
:	O
I	O
cleaned	O
up	O
the	O
benchmarking	O
library	O
quite	O
a	O
bit	O
and	O
added	O
a	O
text	O
file	O
in	O
/	O
results	O
with	O
some	O
output	O
across	O
a	O
wider	O
range	O
of	O
possible	O
exponent	O
values	O
.	O
I	O
also	O
added	O
an	O
option	O
in	O
the	O
testing	O
code	O
not	O
to	O
throw	O
an	O
Exception	B-api_mention
from	O
default	O
,	O
but	O
this	O
doesn	O
'	O
t	O
appear	O
to	O
affect	O
the	O
results	O
.	O
UPDATE	O
2	O
:	O
Found	O
some	O
pretty	O
good	O
discussion	O
of	O
this	O
issue	O
from	O
back	O
in	O
2009	O
on	O
the	O
xkcd	O
forum	O
here	O
:	O
#	O
a	O
.	O
The	O
OP	O
'	O
s	O
discussion	O
of	O
using	O
Array	B-api_mention
.	I-api_mention
binarySearch	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gave	O
me	O
the	O
idea	O
for	O
a	O
simple	O
array	O
-	O
based	O
implementation	O
of	O
the	O
exponentiation	O
pattern	O
above	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
the	O
binary	O
search	O
since	O
I	O
know	O
what	O
the	O
entries	O
in	O
the	O
array	O
are	O
.	O
It	O
appears	O
to	O
run	O
about	O
3	O
times	O
faster	O
than	O
using	O
switch	O
,	O
obviously	O
at	O
the	O
expense	O
of	O
some	O
of	O
the	O
control	O
flow	O
that	O
switch	O
affords	O
.	O
That	O
code	O
has	O
been	O
added	O
to	O
the	O
github	O
repo	O
also	O
.	O
Question	O
-	O
25903137	O
,	O
answer	O
-	O
25905196	O
Here	O
are	O
some	O
variations	O
on	O
Sotirios	O
Delimanolis	O
'	O
answer	O
,	O
which	O
was	O
pretty	O
good	O
to	O
begin	O
with	O
(	O
+	O
1	O
)	O
.	O
Consider	O
the	O
following	O
:	O
#	O
pre	O
A	O
couple	O
points	O
here	O
.	O
First	O
is	O
the	O
use	O
of	O
wildcards	O
in	O
the	O
generics	O
;	O
this	O
makes	O
the	O
function	O
somewhat	O
more	O
flexible	O
.	O
A	O
wildcard	O
would	O
be	O
necessary	O
if	O
,	O
for	O
example	O
,	O
you	O
wanted	O
the	O
output	O
map	O
to	O
have	O
a	O
key	O
that	O
'	O
s	O
a	O
superclass	O
of	O
the	O
input	O
map	O
'	O
s	O
key	O
:	O
#	O
pre	O
(	O
There	O
is	O
also	O
an	O
example	O
for	O
the	O
map	O
'	O
s	O
values	O
,	O
but	O
it	O
'	O
s	O
really	O
contrived	O
,	O
and	O
I	O
admit	O
that	O
having	O
the	O
bounded	O
wildcard	O
for	O
Y	O
only	O
helps	O
in	O
edge	O
cases	O
.	O
)	O
A	O
second	O
point	O
is	O
that	O
instead	O
of	O
running	O
the	O
stream	O
over	O
the	O
input	O
map	O
'	O
s	O
entrySet	B-api_mention
,	O
I	O
ran	O
it	O
over	O
the	O
keySet	B-api_mention
.	O
This	O
makes	O
the	O
code	O
a	O
little	O
cleaner	O
,	O
I	O
think	O
,	O
at	O
the	O
cost	O
of	O
having	O
to	O
fetch	O
values	O
out	O
of	O
the	O
map	O
instead	O
of	O
from	O
the	O
map	O
entry	O
.	O
Incidentally	O
,	O
I	O
initially	O
had	O
key	O
-	O
>	O
key	O
as	O
the	O
first	O
argument	O
to	O
toMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
this	O
failed	O
with	O
a	O
type	O
inference	O
error	O
for	O
some	O
reason	O
.	O
Changing	O
it	O
to	O
(	O
X	O
key	O
)	O
-	O
>	O
key	O
worked	O
,	O
as	O
did	O
Function	B-api_mention
.	I-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Still	O
another	O
variation	O
is	O
as	O
follows	O
:	O
#	O
pre	O
This	O
uses	O
Map	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
streams	O
.	O
This	O
is	O
even	O
simpler	O
,	O
I	O
think	O
,	O
because	O
it	O
dispenses	O
with	O
the	O
collectors	O
,	O
which	O
are	O
somewhat	O
clumsy	O
to	O
use	O
with	O
maps	O
.	O
The	O
reason	O
is	O
that	O
Map	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
the	O
key	O
and	O
value	O
as	O
separate	O
parameters	O
,	O
whereas	O
the	O
stream	O
has	O
only	O
one	O
value	O
-	O
-	O
and	O
you	O
have	O
to	O
choose	O
whether	O
to	O
use	O
the	O
key	O
or	O
the	O
map	O
entry	O
as	O
that	O
value	O
.	O
On	O
the	O
minus	O
side	O
,	O
this	O
lacks	O
the	O
rich	O
,	O
streamy	O
goodness	O
of	O
the	O
other	O
approaches	O
.	O
:	O
-	O
)	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
10631738	O
You	O
could	O
do	O
this	O
:	O
#	O
pre	O
Basically	O
the	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
will	O
split	O
the	O
string	O
according	O
to	O
(	O
in	O
this	O
case	O
)	O
delimiter	O
you	O
are	O
passing	O
and	O
will	O
return	O
an	O
array	O
of	O
strings	O
.	O
However	O
,	O
you	O
seem	O
to	O
be	O
after	O
a	O
List	B-api_mention
of	O
Strings	O
rather	O
than	O
an	O
array	O
,	O
so	O
the	O
array	O
must	O
be	O
turned	O
into	O
a	O
list	O
by	O
using	O
the	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
)	I-api_mention
utility	O
.	O
Just	O
as	O
an	O
FYI	O
you	O
could	O
also	O
do	O
something	O
like	O
so	O
:	O
#	O
pre	O
But	O
it	O
is	O
usually	O
better	O
practice	O
to	O
program	O
to	O
an	O
interface	O
rather	O
than	O
to	O
an	O
actual	O
concrete	O
implementation	O
,	O
so	O
I	O
would	O
recommend	O
the	O
1st	O
option	O
.	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509659	O
Four	O
things	O
are	O
going	O
on	O
:	O
#	O
li	O
(	O
You	O
clearly	O
know	O
this	O
,	O
but	O
for	O
lurkers	O
)	O
=	O
=	O
tests	O
to	O
see	O
if	O
the	O
variables	O
point	O
to	O
the	O
same	O
String	B-api_mention
object	O
,	O
not	O
equivalent	O
strings	O
.	O
So	O
even	O
if	O
x	O
is	O
StringLiteral	O
and	O
y	O
is	O
also	O
StringLiteral	O
,	O
x	O
=	O
=	O
y	O
may	O
be	O
true	O
or	O
false	O
,	O
depending	O
on	O
whether	O
x	O
and	O
y	O
refer	O
to	O
the	O
same	O
String	B-api_mention
object	O
or	O
different	O
ones	O
.	O
That	O
'	O
s	O
why	O
we	O
use	O
equals	O
,	O
not	O
=	O
=	O
,	O
to	O
compare	O
strings	O
for	O
equivalence	O
.	O
All	O
of	O
the	O
following	O
is	O
just	O
meant	O
to	O
explain	O
why	O
=	O
=	O
is	O
sometimes	O
true	O
,	O
it	O
'	O
s	O
not	O
a	O
suggestion	O
to	O
use	O
=	O
=	O
to	O
compare	O
strings	O
.	O
:	O
-	O
)	O
#	O
li	O
Equivalent	O
string	O
constants	O
(	O
strings	O
the	O
compiler	O
knows	O
are	O
constants	O
according	O
to	O
various	O
rules	O
in	O
the	O
JLS	O
)	O
within	O
the	O
same	O
class	O
are	O
made	O
to	O
refer	O
to	O
the	O
same	O
string	O
by	O
the	O
compiler	O
(	O
which	O
also	O
lists	O
them	O
in	O
the	O
class	O
'	O
s	O
"	O
constant	O
pool	O
"	O
)	O
.	O
That	O
'	O
s	O
why	O
a	O
=	O
=	O
b	O
is	O
true	O
.	O
#	O
li	O
When	O
the	O
class	O
is	O
loaded	O
,	O
each	O
of	O
its	O
string	O
constants	O
is	O
automatically	O
interned	O
—	O
the	O
JVM	O
'	O
s	O
string	O
pool	O
is	O
checked	O
for	O
an	O
equivalent	O
string	O
and	O
if	O
one	O
is	O
found	O
,	O
that	O
String	B-api_mention
object	O
is	O
used	O
(	O
if	O
not	O
,	O
the	O
new	O
String	B-api_mention
object	O
for	O
the	O
new	O
constant	O
is	O
added	O
to	O
the	O
pool	O
)	O
.	O
So	O
even	O
if	O
x	O
is	O
a	O
string	O
constant	O
initialized	O
in	O
class	O
Foo	O
and	O
y	O
is	O
a	O
string	O
constant	O
initialized	O
in	O
class	O
Bar	O
,	O
they	O
'	O
ll	O
be	O
=	O
=	O
each	O
other	O
.	O
Points	O
2	O
and	O
3	O
above	O
are	O
covered	O
in	O
part	O
by	O
JLS	O
§	O
3	O
.	O
10	O
.	O
5	O
.	O
(	O
The	O
bit	O
about	O
the	O
class	O
constant	O
pool	O
is	O
a	O
bit	O
of	O
an	O
implementation	O
detail	O
,	O
hence	O
the	O
link	O
to	O
the	O
JVM	O
spec	O
earlier	O
;	O
the	O
JLS	O
just	O
speaks	O
of	O
interning	O
.	O
)	O
#	O
li	O
The	O
compiler	O
does	O
string	O
concatenation	O
if	O
it	O
'	O
s	O
dealing	O
with	O
constant	O
values	O
,	O
so	O
String	B-api_mention
d	O
=	O
StringLiteral	O
+	O
StringLiteral	O
;	O
is	O
compiled	O
to	O
String	B-api_mention
d	O
=	O
StringLiteral	O
;	O
and	O
StringLiteral	O
is	O
a	O
string	O
constant	O
the	O
compiler	O
and	O
JVM	O
apply	O
points	O
2	O
and	O
3	O
above	O
to	O
.	O
E	O
.	O
g	O
.	O
,	O
no	O
StringBuilder	B-api_mention
is	O
used	O
,	O
the	O
concatenation	O
happens	O
at	O
compile	O
-	O
time	O
,	O
not	O
runtime	O
.	O
This	O
is	O
covered	O
in	O
JLS	O
§	O
15	O
.	O
28	O
-	O
Constant	O
Expressions	O
.	O
So	O
a	O
=	O
=	O
d	O
is	O
true	O
for	O
the	O
same	O
reason	O
a	O
=	O
=	O
b	O
is	O
true	O
:	O
They	O
refer	O
to	O
the	O
same	O
constant	O
string	O
,	O
so	O
the	O
compiler	O
ensured	O
they	O
were	O
referring	O
to	O
the	O
same	O
string	O
in	O
the	O
class	O
'	O
s	O
constant	O
pool	O
.	O
The	O
compiler	O
can	O
'	O
t	O
do	O
that	O
when	O
any	O
of	O
the	O
operands	O
is	O
not	O
a	O
constant	O
,	O
so	O
it	O
can	O
'	O
t	O
do	O
that	O
with	O
:	O
String	B-api_mention
e	O
=	O
c	O
+	O
StringLiteral	O
;	O
.	O
.	O
.	O
even	O
though	O
code	O
analysis	O
could	O
easily	O
show	O
that	O
the	O
value	O
of	O
c	O
will	O
definitely	O
be	O
StringLiteral	O
and	O
thus	O
e	O
will	O
definitely	O
be	O
StringLiteral	O
.	O
The	O
specification	O
only	O
has	O
the	O
compiler	O
do	O
the	O
concatenation	O
with	O
constant	O
values	O
,	O
specifically	O
.	O
So	O
since	O
the	O
compiler	O
can	O
'	O
t	O
do	O
it	O
,	O
it	O
outputs	O
the	O
StringBuilder	B-api_mention
code	O
you	O
referred	O
to	O
and	O
that	O
work	O
is	O
done	O
at	O
runtime	O
,	O
creating	O
a	O
new	O
String	B-api_mention
object	O
.	O
That	O
string	O
isn	O
'	O
t	O
automatically	O
interned	O
,	O
so	O
e	O
ends	O
up	O
referring	O
to	O
a	O
different	O
String	B-api_mention
object	O
than	O
a	O
does	O
,	O
and	O
so	O
a	O
=	O
=	O
e	O
is	O
false	O
.	O
Note	O
that	O
as	O
Vinod	O
said	O
,	O
if	O
you	O
declared	O
c	O
as	O
final	O
:	O
final	O
String	B-api_mention
c	O
=	O
StringLiteral	O
;	O
Then	O
it	O
would	O
be	O
a	O
constant	O
variable	O
(	O
yes	O
,	O
they	O
'	O
re	O
really	O
called	O
that	O
)	O
and	O
so	O
§	O
15	O
.	O
28	O
would	O
apply	O
and	O
the	O
compiler	O
would	O
turn	O
String	B-api_mention
e	O
=	O
c	O
+	O
StringLiteral	O
;	O
into	O
String	B-api_mention
e	O
=	O
StringLiteral	O
;	O
and	O
a	O
=	O
=	O
e	O
would	O
also	O
be	O
true	O
.	O
Just	O
to	O
reiterate	O
:	O
None	O
of	O
which	O
means	O
we	O
should	O
use	O
=	O
=	O
to	O
compare	O
strings	O
for	O
equivalence	O
.	O
:	O
-	O
)	O
That	O
'	O
s	O
what	O
equals	O
is	O
for	O
.	O
Question	O
-	O
4576352	O
,	O
answer	O
-	O
11325546	O
You	O
can	O
use	O
str	O
=	O
str	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
as	O
mentioned	O
before	O
and	O
you	O
will	O
be	O
fine	O
.	O
For	O
your	O
information	O
CharLiteral	O
is	O
not	O
an	O
empty	O
(	O
or	O
a	O
valid	O
)	O
character	O
but	O
CharLiteral	O
is	O
.	O
So	O
you	O
could	O
use	O
str	O
=	O
str	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
.	O
Question	O
-	O
6840803	O
,	O
answer	O
-	O
6840856	O
SimpleDateFormat	B-api_mention
stores	O
intermediate	O
results	O
in	O
instance	O
fields	O
.	O
So	O
if	O
one	O
instance	O
is	O
used	O
by	O
two	O
threads	O
they	O
can	O
mess	O
each	O
other	O
'	O
s	O
results	O
.	O
Looking	O
at	O
the	O
source	O
code	O
reveals	O
that	O
there	O
is	O
a	O
Calendar	B-api_mention
instance	O
field	O
,	O
which	O
is	O
used	O
by	O
operations	O
on	O
DateFormat	B-api_mention
/	O
SimpleDateFormat	B-api_mention
For	O
example	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
calendar	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
initially	O
and	O
then	O
calendar	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
another	O
thread	O
invokes	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
the	O
completion	O
of	O
the	O
first	O
invocation	O
,	O
it	O
will	O
clear	O
the	O
calendar	O
,	O
but	O
the	O
other	O
invocation	O
will	O
expect	O
it	O
to	O
be	O
populated	O
with	O
intermediate	O
results	O
of	O
the	O
calculation	O
.	O
One	O
way	O
to	O
reuse	O
date	O
formats	O
without	O
trading	O
thread	O
-	O
safety	O
is	O
to	O
put	O
them	O
in	O
a	O
ThreadLocal	B-api_mention
-	O
some	O
libraries	O
do	O
that	O
.	O
That	O
'	O
s	O
if	O
you	O
need	O
to	O
use	O
the	O
same	O
format	O
multiple	O
times	O
within	O
one	O
thread	O
.	O
But	O
in	O
case	O
you	O
are	O
using	O
a	O
servlet	O
container	O
(	O
that	O
has	O
a	O
thread	O
pool	O
)	O
,	O
remember	O
to	O
clean	O
the	O
thread	O
-	O
local	O
after	O
you	O
finish	O
.	O
To	O
be	O
honest	O
,	O
I	O
don	O
'	O
t	O
understand	O
why	O
they	O
need	O
the	O
instance	O
field	O
,	O
but	O
that	O
'	O
s	O
the	O
way	O
it	O
is	O
.	O
You	O
can	O
also	O
use	O
joda	O
-	O
time	O
DateTimeFormat	B-api_mention
which	O
is	O
threadsafe	O
.	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5032837	O
If	O
you	O
want	O
to	O
use	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
your	O
Sets	O
,	O
in	O
the	O
sense	O
that	O
the	O
same	O
entity	O
can	O
only	O
be	O
in	O
there	O
once	O
,	O
then	O
there	O
is	O
only	O
one	O
option	O
:	O
Option	O
2	O
.	O
That	O
'	O
s	O
because	O
a	O
primary	O
key	O
for	O
an	O
entity	O
by	O
definition	O
never	O
changes	O
(	O
if	O
somebody	O
indeed	O
updates	O
it	O
,	O
it	O
'	O
s	O
not	O
the	O
same	O
entity	O
anymore	O
)	O
You	O
should	O
take	O
that	O
literally	O
:	O
Since	O
your	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
based	O
on	O
the	O
primary	O
key	O
,	O
you	O
must	O
not	O
use	O
these	O
methods	O
,	O
until	O
the	O
primary	O
key	O
is	O
set	O
.	O
So	O
you	O
shouldn	O
'	O
t	O
put	O
entities	O
in	O
the	O
set	O
,	O
until	O
they	O
'	O
re	O
assigned	O
a	O
primary	O
key	O
.	O
(	O
Yes	O
,	O
UUIDs	O
and	O
similar	O
concepts	O
may	O
help	O
to	O
assign	O
primary	O
keys	O
early	O
.	O
)	O
Now	O
,	O
it	O
'	O
s	O
theoretically	O
also	O
possible	O
to	O
achieve	O
that	O
with	O
Option	O
3	O
,	O
even	O
though	O
so	O
-	O
called	O
"	O
business	O
-	O
keys	O
"	O
have	O
the	O
nasty	O
drawback	O
that	O
they	O
can	O
change	O
:	O
"	O
All	O
you	O
'	O
ll	O
have	O
to	O
do	O
is	O
delete	O
the	O
already	O
inserted	O
entities	O
from	O
the	O
set	O
(	O
s	O
)	O
,	O
and	O
re	O
-	O
insert	O
them	O
.	O
"	O
That	O
is	O
true	O
-	O
but	O
it	O
also	O
means	O
,	O
that	O
in	O
a	O
distributed	O
system	O
,	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
,	O
that	O
this	O
is	O
done	O
absolutely	O
everywhere	O
the	O
data	O
has	O
been	O
inserted	O
to	O
(	O
and	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
,	O
that	O
the	O
update	O
is	O
performed	O
,	O
before	O
other	O
things	O
occur	O
)	O
.	O
You	O
'	O
ll	O
need	O
a	O
sophisticated	O
update	O
mechanism	O
,	O
especially	O
if	O
some	O
remote	O
systems	O
aren	O
'	O
t	O
currently	O
reachable	O
.	O
.	O
.	O
Option	O
1	O
can	O
only	O
be	O
used	O
,	O
if	O
all	O
the	O
objects	O
in	O
your	O
sets	O
are	O
from	O
the	O
same	O
Hibernate	O
session	O
.	O
The	O
Hibernate	O
documentation	O
makes	O
this	O
very	O
clear	O
in	O
chapter	O
13	O
.	O
1	O
.	O
3	O
.	O
Considering	O
object	O
identity	O
:	O
#	O
blockquote	O
It	O
continues	O
to	O
argue	O
in	O
favor	O
of	O
Option	O
3	O
:	O
#	O
blockquote	O
This	O
is	O
true	O
,	O
if	O
you	O
#	O
li	O
cannot	O
assign	O
the	O
id	O
early	O
(	O
e	O
.	O
g	O
.	O
by	O
using	O
UUIDs	O
)	O
#	O
li	O
and	O
yet	O
you	O
absolutely	O
want	O
to	O
put	O
your	O
objects	O
in	O
sets	O
while	O
they	O
'	O
re	O
in	O
transient	O
state	O
.	O
Otherwise	O
,	O
you	O
'	O
re	O
free	O
to	O
choose	O
Option	O
2	O
.	O
Then	O
it	O
mentions	O
the	O
need	O
for	O
a	O
relative	O
stability	O
:	O
#	O
blockquote	O
This	O
is	O
correct	O
.	O
The	O
practical	O
problem	O
I	O
see	O
with	O
this	O
is	O
:	O
If	O
you	O
can	O
'	O
t	O
guarantee	O
absolute	O
stability	O
,	O
how	O
will	O
you	O
be	O
able	O
to	O
guarantee	O
stability	O
"	O
as	O
long	O
as	O
the	O
objects	O
are	O
in	O
the	O
same	O
Set	O
"	O
.	O
I	O
can	O
imagine	O
some	O
special	O
cases	O
(	O
like	O
using	O
sets	O
only	O
for	O
a	O
conversation	O
and	O
then	O
throwing	O
it	O
away	O
)	O
,	O
but	O
I	O
would	O
question	O
the	O
general	O
practicability	O
of	O
this	O
.	O
Short	O
version	O
:	O
#	O
li	O
Option	O
1	O
can	O
only	O
be	O
used	O
with	O
objects	O
within	O
a	O
single	O
session	O
.	O
#	O
li	O
If	O
you	O
can	O
,	O
use	O
Option	O
2	O
.	O
(	O
Assign	O
PK	O
as	O
early	O
as	O
possible	O
,	O
because	O
you	O
can	O
'	O
t	O
use	O
the	O
objects	O
in	O
sets	O
until	O
the	O
PK	O
is	O
assigned	O
.	O
)	O
#	O
li	O
If	O
you	O
can	O
guarantee	O
relative	O
stability	O
,	O
you	O
can	O
use	O
Option	O
3	O
.	O
But	O
be	O
careful	O
with	O
this	O
.	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489376	O
String	B-api_mention
gets	O
special	O
treatment	O
in	O
the	O
JLS	O
:	O
it	O
'	O
s	O
one	O
of	O
the	O
two	O
non	O
-	O
primitive	O
types	O
for	O
which	O
literals	O
exist	O
(	O
the	O
other	O
is	O
Class	B-api_mention
)	O
*	O
.	O
From	O
the	O
JLS	O
:	O
#	O
blockquote	O
*	O
well	O
,	O
there	O
'	O
s	O
also	O
the	O
"	O
null	O
type	O
"	O
with	O
it	O
'	O
s	O
"	O
null	O
literal	O
"	O
null	O
,	O
but	O
most	O
people	O
don	O
'	O
t	O
think	O
of	O
the	O
"	O
null	O
type	O
"	O
as	O
a	O
proper	O
type	O
.	O
Question	O
-	O
23932061	O
,	O
answer	O
-	O
23936723	O
There	O
'	O
s	O
a	O
much	O
better	O
answer	O
than	O
using	O
spliteratorUnknownSize	B-api_mention
directly	O
,	O
which	O
is	O
both	O
easier	O
and	O
gets	O
a	O
better	O
result	O
.	O
Iterable	O
has	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
so	O
you	O
should	O
just	O
use	O
that	O
to	O
get	O
your	O
spliterator	O
.	O
In	O
the	O
worst	O
case	O
,	O
its	O
the	O
same	O
code	O
(	O
the	O
default	O
implementation	O
uses	O
spliteratorUnknownSize	B-api_mention
)	O
,	O
but	O
in	O
the	O
more	O
common	O
case	O
,	O
where	O
your	O
Iterable	O
is	O
already	O
a	O
collection	O
,	O
you	O
'	O
ll	O
get	O
a	O
better	O
spliterator	O
,	O
and	O
therefore	O
better	O
stream	O
performance	O
(	O
maybe	O
even	O
good	O
parallelism	O
.	O
)	O
Its	O
also	O
less	O
code	O
:	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
moreStreamOps	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
As	O
you	O
can	O
see	O
,	O
getting	O
a	O
stream	O
from	O
an	O
Iterable	B-api_mention
(	O
see	O
Why	O
does	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
provide	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
methods	O
?	O
)	O
is	O
not	O
very	O
painful	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
20454885	O
For	O
everybody	O
who	O
codes	O
Java	O
for	O
Android	O
devices	O
and	O
ends	O
up	O
here	O
:	O
use	O
SparseArray	B-api_mention
for	O
better	O
performance	O
private	O
final	O
SparseArray	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
SparseArray	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
with	O
this	O
you	O
can	O
use	O
int	O
instead	O
of	O
Integer	B-api_mention
like	O
#	O
pre	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032137	O
Unless	O
there	O
is	O
a	O
specific	O
optimization	O
that	O
checks	O
if	O
the	O
argument	O
passed	O
to	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
collection	O
itself	O
(	O
and	O
I	O
highly	O
doubt	O
that	O
such	O
an	O
optimization	O
is	O
there	O
)	O
it	O
will	O
be	O
significantly	O
slower	O
than	O
a	O
simple	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Apart	O
from	O
that	O
(	O
and	O
at	O
least	O
equally	O
important	O
)	O
:	O
arraylist	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
just	O
obtuse	O
,	O
confusing	O
code	O
.	O
It	O
is	O
a	O
very	O
backwards	O
way	O
of	O
saying	O
"	O
clear	O
this	O
collection	O
"	O
.	O
What	O
advantage	O
would	O
it	O
have	O
over	O
the	O
very	O
understandable	O
arraylist	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Question	O
-	O
8157755	O
,	O
answer	O
-	O
8157791	O
If	O
you	O
want	O
the	O
value	O
you	O
are	O
assigning	O
in	O
the	O
constructor	O
,	O
you	O
need	O
to	O
add	O
a	O
method	O
in	O
the	O
enum	O
definition	O
to	O
return	O
that	O
value	O
.	O
If	O
you	O
want	O
a	O
unique	O
number	O
that	O
represent	O
the	O
enum	O
value	O
,	O
you	O
can	O
use	O
ordinal	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
14316487	O
,	O
answer	O
-	O
14316543	O
A	O
very	O
simple	O
implementation	O
with	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
28671903	O
,	O
answer	O
-	O
28672583	O
The	O
behaviour	O
is	O
(	O
somewhat	O
)	O
documented	O
in	O
the	O
javadoc	O
:	O
#	O
blockquote	O
What	O
this	O
means	O
in	O
practice	O
,	O
when	O
you	O
call	O
source	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
:	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
a	O
smaller	O
size	O
than	O
source	O
,	O
the	O
remove	O
method	O
of	O
HashSet	B-api_mention
is	O
called	O
,	O
which	O
is	O
fast	O
.	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
equal	O
or	O
larger	O
size	O
than	O
the	O
source	O
,	O
then	O
removals	O
.	O
contains	O
is	O
called	O
,	O
which	O
is	O
slow	O
for	O
an	O
ArrayList	B-api_mention
.	O
Quick	O
fix	O
:	O
Collection	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
removals	O
=	O
new	O
HashSet	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
that	O
there	O
is	O
an	O
open	O
bug	O
that	O
is	O
very	O
similar	O
to	O
what	O
you	O
describe	O
.	O
The	O
bottom	O
line	O
seems	O
to	O
be	O
that	O
it	O
is	O
probably	O
a	O
poor	O
choice	O
but	O
can	O
'	O
t	O
be	O
changed	O
because	O
it	O
is	O
documented	O
in	O
the	O
javadoc	O
.	O
For	O
reference	O
,	O
this	O
is	O
the	O
code	O
of	O
removeAll	B-api_mention
(	O
in	O
Java	O
8	O
-	O
haven	O
'	O
t	O
checked	O
other	O
versions	O
)	O
:	O
#	O
pre	O
Question	O
-	O
21947452	O
I	O
generated	O
two	O
matrices	O
of	O
1000	O
x	O
1000	O
:	O
First	O
Matrix	O
:	O
O	O
and	O
#	O
.	O
Second	O
Matrix	O
:	O
O	O
and	O
B	O
.	O
Using	O
the	O
following	O
code	O
,	O
the	O
first	O
matrix	O
took	O
8	O
.	O
52	O
seconds	O
to	O
complete	O
:	O
#	O
pre	O
With	O
this	O
code	O
,	O
the	O
second	O
matrix	O
took	O
259	O
.	O
152	O
seconds	O
to	O
complete	O
:	O
#	O
pre	O
What	O
is	O
the	O
reason	O
behind	O
the	O
dramatically	O
different	O
run	O
times	O
?	O
As	O
suggested	O
in	O
the	O
comments	O
,	O
printing	O
only	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
takes	O
7	O
.	O
8871	O
seconds	O
,	O
whereas	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
gives	O
still	O
printing	O
.	O
.	O
.	O
.	O
As	O
others	O
who	O
pointed	O
out	O
that	O
it	O
works	O
for	O
them	O
normally	O
,	O
I	O
tried	O
Ideone	O
.	O
com	O
for	O
instance	O
,	O
and	O
both	O
pieces	O
of	O
code	O
execute	O
at	O
the	O
same	O
speed	O
.	O
Test	O
Conditions	O
:	O
#	O
li	O
I	O
ran	O
this	O
test	O
from	O
Netbeans	O
7	O
.	O
2	O
,	O
with	O
the	O
output	O
into	O
its	O
console	O
#	O
li	O
I	O
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
measurements	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25850576	O
#	O
li	O
Is	O
the	O
definition	O
of	O
a	O
marker	B-api_mention
interface	O
mentioned	O
above	O
in	O
1st	O
point	O
wrong	O
?	O
-	O
It	O
is	O
correct	O
in	O
the	O
parts	O
that	O
(	O
1	O
)	O
a	O
marker	B-api_mention
interface	O
must	O
be	O
empty	O
,	O
and	O
(	O
2	O
)	O
implementing	O
it	O
is	O
meant	O
to	O
imply	O
some	O
special	O
treatment	O
of	O
the	O
implementing	O
class	O
.	O
The	O
part	O
that	O
is	O
incorrect	O
is	O
that	O
it	O
implies	O
that	O
JVM	O
or	O
the	O
compiler	O
would	O
treat	O
the	O
objects	O
of	O
that	O
class	O
differently	O
:	O
you	O
are	O
correct	O
in	O
observing	O
that	O
it	O
is	O
the	O
code	O
of	O
Java	O
class	O
library	O
that	O
treats	O
these	O
objects	O
as	O
cloneable	O
,	O
serializable	O
,	O
etc	O
.	O
It	O
has	O
nothing	O
to	O
do	O
with	O
the	O
compiler	O
or	O
the	O
JVM	O
.	O
#	O
li	O
instead	O
of	O
using	O
the	O
instanceOf	B-api_mention
operator	O
why	O
can	O
'	O
t	O
the	O
method	O
be	O
something	O
like	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
that	O
there	O
is	O
a	O
compile	O
-	O
time	O
type	O
checking	O
-	O
This	O
lets	O
you	O
avoid	O
polluting	O
your	O
code	O
with	O
the	O
name	O
of	O
the	O
marker	O
interface	O
when	O
a	O
"	O
plain	O
Object	O
"	O
is	O
needed	O
.	O
For	O
example	O
,	O
if	O
you	O
make	O
a	O
class	O
that	O
needs	O
to	O
be	O
serializable	O
,	O
and	O
has	O
object	O
members	O
,	O
you	O
would	O
be	O
forced	O
to	O
either	O
do	O
casting	O
or	O
make	O
your	O
objects	O
Serializable	B-api_mention
at	O
compile	O
time	O
.	O
This	O
is	O
inconvenient	O
,	O
because	O
the	O
interface	O
is	O
devoid	O
of	O
any	O
functionality	O
.	O
#	O
li	O
How	O
Annotations	B-api_mention
are	O
better	O
than	O
Marker	B-api_mention
Interfaces	I-api_mention
?	O
-	O
They	O
let	O
you	O
achieve	O
the	O
same	O
purpose	O
of	O
conveying	O
metadata	O
about	O
the	O
class	O
to	O
its	O
consumers	O
without	O
creating	O
a	O
separate	O
type	O
for	O
it	O
.	O
Annotations	B-api_mention
are	O
more	O
powerful	O
,	O
too	O
,	O
letting	O
programmers	O
pass	O
more	O
sophisticated	O
information	O
to	O
classes	O
that	O
"	O
consume	O
"	O
it	O
.	O
Question	O
-	O
22718744	O
,	O
answer	O
-	O
27477312	O
The	O
behavior	O
of	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	O
which	O
calls	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
)	O
changes	O
between	O
Java	O
7	O
and	O
Java	O
8	O
.	O
Documentation	O
Comparing	O
between	O
the	O
documentation	O
of	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
in	O
Java	O
7	O
and	O
Java	O
8	O
,	O
we	O
observe	O
the	O
following	O
clause	O
being	O
added	O
:	O
#	O
blockquote	O
The	O
same	O
clause	O
is	O
also	O
added	O
to	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
in	O
Java	O
8	O
,	O
compared	O
to	O
Java	O
7	O
.	O
Reference	O
implementation	O
Let	O
us	O
compare	O
the	O
code	O
of	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
of	O
the	O
reference	O
implemetation	O
in	O
Java	O
7	O
and	O
Java	O
8	O
.	O
The	O
code	O
is	O
retrieved	O
from	O
grepcode	O
,	O
for	O
version	O
7u40	O
-	O
b43	O
and	O
8	O
-	O
b132	O
.	O
Java	O
7	O
#	O
pre	O
Java	O
8	O
#	O
pre	O
The	O
addition	O
of	O
the	O
following	O
code	O
in	O
Java	O
8	O
excludes	O
the	O
zero	O
-	O
length	O
match	O
at	O
the	O
beginning	O
of	O
the	O
input	O
string	O
,	O
which	O
explains	O
the	O
behavior	O
above	O
.	O
#	O
pre	O
Maintaining	O
compatibility	O
Following	O
behavior	O
in	O
Java	O
8	O
and	O
above	O
To	O
make	O
split	B-api_mention
behaves	O
consistently	O
across	O
versions	O
and	O
compatible	O
with	O
the	O
behavior	O
in	O
Java	O
8	O
:	O
#	O
li	O
If	O
your	O
regex	O
can	O
match	O
zero	O
-	O
length	O
string	O
,	O
just	O
add	O
(	O
?	O
!	O
\	O
A	O
)	O
at	O
the	O
end	O
of	O
the	O
regex	O
and	O
wrap	O
the	O
original	O
regex	O
in	O
non	O
-	O
capturing	O
group	O
(	O
?	O
:	O
.	O
.	O
.	O
)	O
(	O
if	O
necessary	O
)	O
.	O
#	O
li	O
If	O
your	O
regex	O
can	O
'	O
t	O
match	O
zero	O
-	O
length	O
string	O
,	O
you	O
don	O
'	O
t	O
need	O
to	O
do	O
anything	O
.	O
#	O
li	O
If	O
you	O
don	O
'	O
t	O
know	O
whether	O
the	O
regex	O
can	O
match	O
zero	O
-	O
length	O
string	O
or	O
not	O
,	O
do	O
both	O
the	O
actions	O
in	O
step	O
1	O
.	O
(	O
?	O
!	O
\	O
A	O
)	O
checks	O
that	O
the	O
string	O
does	O
not	O
end	O
at	O
the	O
beginning	O
of	O
the	O
string	O
,	O
which	O
implies	O
that	O
the	O
match	O
is	O
an	O
empty	O
match	O
at	O
the	O
beginning	O
of	O
the	O
string	O
.	O
Following	O
behavior	O
in	O
Java	O
7	O
and	O
prior	O
There	O
is	O
no	O
general	O
solution	O
to	O
make	O
split	B-api_mention
backward	O
-	O
compatible	O
with	O
Java	O
7	O
and	O
prior	O
,	O
short	O
of	O
replacing	O
all	O
instance	O
of	O
split	B-api_mention
to	O
point	O
to	O
your	O
own	O
custom	O
implementation	O
.	O
Question	O
-	O
14846920	O
What	O
are	O
some	O
of	O
the	O
situations	O
where	O
I	O
can	O
use	O
Collections	B-api_mention
.	I-api_mention
emptyMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
The	O
Documentation	O
says	O
I	O
can	O
use	O
this	O
method	O
if	O
I	O
want	O
my	O
collection	O
to	O
be	O
immutable	O
.	O
Why	O
would	O
I	O
want	O
an	O
immutable	O
empty	O
collection	O
?	O
What	O
is	O
the	O
point	O
?	O
Question	O
-	O
30727515	O
,	O
answer	O
-	O
30739477	O
Since	O
this	O
hasn	O
’	O
t	O
addressed	O
yet	O
,	O
here	O
an	O
explanation	O
,	O
why	O
the	O
translation	O
of	O
Unicode	O
escapes	O
happens	O
before	O
any	O
other	O
source	O
code	O
processing	O
:	O
The	O
idea	O
behind	O
it	O
was	O
that	O
it	O
allows	O
lossless	O
translations	O
of	O
Java	O
source	O
code	O
between	O
different	O
character	O
encodings	O
.	O
Today	O
,	O
there	O
is	O
widespread	O
Unicode	O
support	O
,	O
and	O
this	O
doesn	O
’	O
t	O
look	O
like	O
a	O
problem	O
,	O
but	O
back	O
then	O
it	O
wasn	O
’	O
t	O
easy	O
for	O
a	O
developer	O
from	O
a	O
western	O
country	O
to	O
receive	O
some	O
source	O
code	O
from	O
his	O
Asian	O
colleague	O
containing	O
Asian	O
characters	O
,	O
make	O
some	O
changes	O
(	O
including	O
compiling	O
and	O
testing	O
it	O
)	O
and	O
sending	O
the	O
result	O
back	O
,	O
all	O
without	O
damaging	O
something	O
.	O
So	O
,	O
Java	O
source	O
code	O
can	O
be	O
written	O
in	O
any	O
encoding	O
and	O
allows	O
a	O
wide	O
range	O
of	O
characters	O
within	O
identifiers	O
,	O
character	O
and	O
String	B-api_mention
literals	O
and	O
comments	O
.	O
Then	O
,	O
in	O
order	O
to	O
transfer	O
it	O
losslessly	O
,	O
all	O
characters	O
not	O
supported	O
by	O
the	O
target	O
encoding	O
are	O
replaced	O
by	O
their	O
Unicode	O
escapes	O
.	O
This	O
is	O
a	O
reversible	O
process	O
and	O
the	O
interesting	O
point	O
is	O
that	O
the	O
translation	O
can	O
be	O
done	O
by	O
a	O
tool	O
which	O
doesn	O
’	O
t	O
need	O
to	O
know	O
anything	O
about	O
the	O
Java	O
source	O
code	O
syntax	O
as	O
the	O
translation	O
rule	O
is	O
not	O
dependent	O
on	O
it	O
.	O
This	O
works	O
as	O
the	O
translation	O
to	O
their	O
actual	O
Unicode	O
characters	O
inside	O
the	O
compiler	O
happens	O
independently	O
to	O
the	O
Java	O
source	O
code	O
syntax	O
as	O
well	O
.	O
It	O
implies	O
that	O
you	O
can	O
perform	O
an	O
arbitrary	O
number	O
of	O
translation	O
steps	O
in	O
both	O
directions	O
without	O
ever	O
changing	O
the	O
meaning	O
of	O
the	O
source	O
code	O
.	O
This	O
is	O
the	O
reason	O
for	O
another	O
weird	O
feature	O
which	O
hasn	O
’	O
t	O
even	O
mentioned	O
:	O
the	O
\	O
uuuuuuxxxx	O
syntax	O
:	O
When	O
a	O
translation	O
tool	O
is	O
escaping	O
characters	O
and	O
encounters	O
a	O
sequence	O
that	O
is	O
already	O
an	O
escaped	O
sequence	O
,	O
it	O
should	O
insert	O
an	O
additional	O
u	O
into	O
the	O
sequence	O
,	O
converting	O
\	O
ucafe	O
to	O
\	O
uucafe	O
.	O
The	O
meaning	O
doesn	O
’	O
t	O
change	O
,	O
but	O
when	O
converting	O
into	O
the	O
other	O
direction	O
,	O
the	O
tool	O
should	O
just	O
remove	O
one	O
u	O
and	O
replace	O
only	O
sequences	O
containing	O
a	O
single	O
u	O
by	O
their	O
Unicode	O
characters	O
.	O
That	O
way	O
,	O
even	O
Unicode	O
escapes	O
are	O
retained	O
in	O
their	O
original	O
form	O
when	O
converting	O
back	O
and	O
forth	O
.	O
I	O
guess	O
,	O
no	O
-	O
one	O
ever	O
used	O
that	O
feature	O
…	O
Question	O
-	O
34250207	O
,	O
answer	O
-	O
34250231	O
Technically	O
,	O
it	O
'	O
s	O
10	O
,	O
not	O
zero	O
,	O
if	O
you	O
admit	O
for	O
a	O
lazy	O
initialisation	O
of	O
the	O
backing	O
array	O
.	O
See	O
:	O
#	O
pre	O
where	O
/	O
*	O
*	O
*	O
Default	O
initial	O
capacity	O
.	O
*	O
/	O
private	O
static	O
final	O
int	O
DEFAULT	O
_	O
CAPACITY	O
=	O
10	O
;	O
What	O
you	O
'	O
re	O
referring	O
to	O
is	O
just	O
the	O
zero	O
-	O
sized	O
initial	O
array	O
object	O
that	O
is	O
shared	O
among	O
all	O
initially	O
empty	O
ArrayList	B-api_mention
objects	O
.	O
I	O
.	O
e	O
.	O
the	O
capacity	O
of	O
10	O
is	O
guaranteed	O
lazily	O
,	O
an	O
optimisation	O
that	O
is	O
present	O
also	O
in	O
Java	O
7	O
.	O
Admittedly	O
,	O
the	O
constructor	O
contract	O
is	O
not	O
entirely	O
accurate	O
.	O
Perhaps	O
this	O
is	O
the	O
source	O
of	O
confusion	O
here	O
.	O
Background	O
Here	O
'	O
s	O
an	O
E	O
-	O
Mail	O
by	O
Mike	O
Duigou	O
#	O
blockquote	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
33093380	O
You	O
may	O
try	O
isReachable	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
InetAddress	O
class	O
to	O
figure	O
out	O
which	O
IP	O
address	O
is	O
your	O
real	O
publicly	O
available	O
IP	O
address	O
.	O
I	O
think	O
other	O
type	O
of	O
addresses	O
(	O
site	O
local	O
,	O
link	O
local	O
)	O
are	O
not	O
reachable	O
from	O
outside	O
.	O
#	O
pre	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
32542424	O
What	O
you	O
can	O
do	O
is	O
scan	O
the	O
entire	O
text	O
using	O
Scanner	B-api_mention
and	O
go	O
through	O
the	O
text	O
line	O
by	O
line	O
.	O
Of	O
course	O
you	O
should	O
import	O
the	O
following	O
:	O
#	O
pre	O
Scanner	B-api_mention
basically	O
scans	O
all	O
the	O
text	O
.	O
The	O
while	O
loop	O
is	O
used	O
to	O
traverse	O
through	O
the	O
entire	O
text	O
.	O
The	O
.	B-api_mention
hasNextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
is	O
a	O
boolean	O
that	O
returns	O
true	O
if	O
there	O
are	O
still	O
more	O
lines	O
in	O
the	O
text	O
.	O
The	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
gives	O
you	O
an	O
entire	O
line	O
as	O
a	O
String	B-api_mention
which	O
you	O
can	O
then	O
use	O
the	O
way	O
you	O
want	O
.	O
Try	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
print	O
the	O
text	O
.	O
Side	O
Note	O
:	O
.	O
txt	O
is	O
the	O
file	O
type	O
text	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28459604	O
Background	O
While	O
the	O
question	O
appears	O
simple	O
,	O
the	O
actual	O
answer	O
requires	O
some	O
background	O
to	O
make	O
sense	O
.	O
If	O
you	O
want	O
to	O
skip	O
to	O
the	O
conclusion	O
,	O
scroll	O
down	O
.	O
.	O
.	O
Pick	O
your	O
comparison	O
point	O
-	O
Basic	O
functionality	O
Using	O
basic	O
concepts	O
,	O
C	O
#	O
'	O
s	O
IEnumerable	O
concept	O
is	O
more	O
closely	O
related	O
to	O
Java	O
'	O
s	O
Iterable	B-api_mention
,	O
which	O
is	O
able	O
to	O
create	O
as	O
many	O
Iterators	O
as	O
you	O
want	O
.	O
IEnumerables	O
create	O
IEnumerators	O
.	O
Java	O
'	O
s	O
Iterable	B-api_mention
create	O
Iterators	O
The	O
history	O
of	O
each	O
concept	O
is	O
similar	O
,	O
in	O
that	O
both	O
IEnumerable	O
and	O
Iterable	B-api_mention
have	O
a	O
basic	O
motivation	O
to	O
allow	O
'	O
for	O
-	O
each	O
'	O
style	O
looping	O
over	O
the	O
members	O
of	O
data	O
collections	O
.	O
That	O
'	O
s	O
an	O
oversimplification	O
as	O
they	O
both	O
allow	O
more	O
than	O
just	O
that	O
,	O
and	O
they	O
also	O
arrived	O
at	O
that	O
stage	O
via	O
different	O
progressions	O
,	O
but	O
it	O
is	O
a	O
significant	O
common	O
feature	O
regardless	O
.	O
Let	O
'	O
s	O
compare	O
that	O
feature	O
:	O
in	O
both	O
languages	O
,	O
if	O
a	O
class	O
implements	O
the	O
IEnumerable	O
/	O
Iterable	B-api_mention
,	O
then	O
that	O
class	O
must	O
implement	O
at	O
least	O
a	O
single	O
method	O
(	O
for	O
C	O
#	O
,	O
it	O
'	O
s	O
GetEnumerator	O
and	O
for	O
Java	O
it	O
'	O
s	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
In	O
each	O
case	O
,	O
the	O
instance	O
returned	O
from	O
that	O
(	O
IEnumerator	O
/	O
Iterator	B-api_mention
)	O
allows	O
you	O
to	O
access	O
the	O
current	O
and	O
subsequent	O
members	O
of	O
the	O
data	O
.	O
This	O
feature	O
is	O
used	O
in	O
the	O
for	O
-	O
each	O
language	O
syntax	O
.	O
Pick	O
your	O
comparison	O
point	O
-	O
Enhanced	O
functionality	O
IEnumerable	O
in	O
C	O
#	O
has	O
been	O
extended	O
to	O
allow	O
a	O
number	O
of	O
other	O
language	O
features	O
(	O
mostly	O
related	O
to	O
Linq	O
)	O
.	O
Features	O
added	O
include	O
selections	O
,	O
projections	O
,	O
aggregations	O
,	O
etc	O
.	O
These	O
extensions	O
have	O
a	O
strong	O
motivation	O
from	O
use	O
in	O
set	O
-	O
theory	O
,	O
similar	O
to	O
SQL	O
and	O
Relational	O
Database	O
concepts	O
.	O
Java	O
8	O
has	O
also	O
had	O
functionality	O
added	O
to	O
enable	O
a	O
degree	O
of	O
functional	O
programming	O
using	O
Streams	O
and	O
Lambdas	O
.	O
Note	O
that	O
Java	O
8	O
streams	O
are	O
not	O
primarily	O
motivated	O
by	O
set	O
theory	O
,	O
but	O
by	O
functional	O
programming	O
.	O
Regardless	O
,	O
there	O
are	O
a	O
lot	O
of	O
parallels	O
.	O
So	O
,	O
this	O
is	O
the	O
second	O
point	O
.	O
The	O
enhancements	O
made	O
to	O
C	O
#	O
were	O
implemented	O
as	O
an	O
enhancement	O
to	O
the	O
IEnumerable	O
concept	O
.	O
In	O
Java	O
,	O
though	O
,	O
the	O
enhancements	O
made	O
were	O
implemented	O
by	O
creating	O
new	O
base	O
concepts	O
of	O
Lambdas	O
and	O
Streams	O
,	O
and	O
then	O
also	O
creating	O
a	O
relatively	O
trivial	O
way	O
to	O
convert	O
from	O
Iterators	O
and	O
Iterables	O
to	O
Streams	O
,	O
and	O
visa	O
-	O
versa	O
.	O
So	O
,	O
comparing	O
IEnumerable	O
to	O
Java	O
'	O
s	O
Stream	B-api_mention
concept	O
is	O
incomplete	O
.	O
You	O
need	O
to	O
compare	O
it	O
to	O
the	O
combined	O
Streams	O
and	O
Collections	O
API	O
'	O
s	O
in	O
Java	O
.	O
In	O
Java	O
,	O
Streams	O
are	O
not	O
the	O
same	O
as	O
Iterables	O
,	O
or	O
Iterators	O
Streams	O
are	O
not	O
designed	O
to	O
solve	O
problems	O
the	O
same	O
way	O
that	O
iterators	O
are	O
:	O
#	O
li	O
Iterators	O
are	O
a	O
way	O
of	O
describing	O
the	O
sequence	O
of	O
data	O
.	O
#	O
li	O
Streams	O
are	O
a	O
way	O
of	O
describing	O
a	O
sequence	O
of	O
data	O
transformations	O
.	O
With	O
an	O
Iterator	O
,	O
you	O
get	O
a	O
data	O
value	O
,	O
process	O
it	O
,	O
and	O
then	O
get	O
another	O
data	O
value	O
.	O
With	O
Streams	O
,	O
you	O
chain	O
a	O
sequence	O
of	O
functions	O
together	O
,	O
then	O
you	O
feed	O
an	O
input	O
value	O
to	O
the	O
stream	O
,	O
and	O
get	O
the	O
output	O
value	O
from	O
the	O
combined	O
sequence	O
.	O
Note	O
,	O
in	O
Java	O
terms	O
,	O
each	O
function	O
is	O
encapsulated	O
in	O
a	O
single	O
Stream	B-api_mention
instance	O
.	O
The	O
Streams	O
API	O
allows	O
you	O
to	O
link	O
a	O
sequence	O
of	O
Stream	O
instances	O
in	O
a	O
way	O
that	O
chains	O
a	O
sequence	O
of	O
transformation	O
expressions	O
.	O
In	O
order	O
to	O
complete	O
the	O
Stream	B-api_mention
concept	O
,	O
you	O
need	O
a	O
source	O
of	O
data	O
to	O
feed	O
the	O
stream	O
,	O
and	O
a	O
terminal	O
function	O
that	O
consumes	O
the	O
stream	O
.	O
The	O
way	O
you	O
feed	O
values	O
in	O
to	O
the	O
stream	O
may	O
in	O
fact	O
be	O
from	O
an	O
Iterable	B-api_mention
,	O
but	O
the	O
Stream	O
sequence	O
itself	O
is	O
not	O
an	O
Iterable	B-api_mention
,	O
it	O
is	O
a	O
compound	O
function	O
.	O
A	O
Stream	B-api_mention
is	O
also	O
intended	O
to	O
be	O
lazy	O
,	O
in	O
the	O
sense	O
that	O
it	O
only	O
does	O
work	O
when	O
you	O
request	O
a	O
value	O
from	O
it	O
.	O
Note	O
these	O
significant	O
assumptions	O
and	O
features	O
of	O
Streams	O
:	O
#	O
li	O
A	O
Stream	B-api_mention
in	O
Java	O
is	O
a	O
transformation	O
engine	O
,	O
it	O
transforms	O
a	O
data	O
item	O
in	O
one	O
state	O
,	O
to	O
being	O
in	O
another	O
state	O
.	O
#	O
li	O
streams	O
have	O
no	O
concept	O
of	O
the	O
data	O
order	O
or	O
position	O
,	O
the	O
simply	O
transform	O
whatever	O
they	O
are	O
asked	O
to	O
.	O
#	O
li	O
streams	O
can	O
be	O
supplied	O
with	O
data	O
from	O
many	O
sources	O
,	O
including	O
other	O
streams	O
,	O
Iterators	O
,	O
Iterables	O
,	O
Collections	B-api_mention
,	O
#	O
li	O
you	O
cannot	O
"	O
reset	O
"	O
a	O
stream	O
,	O
that	O
would	O
be	O
like	O
"	O
reprogramming	O
the	O
transformation	O
"	O
.	O
Resetting	O
the	O
data	O
source	O
is	O
probably	O
what	O
you	O
want	O
.	O
#	O
li	O
there	O
is	O
logically	O
only	O
1	O
data	O
item	O
'	O
in	O
flight	O
'	O
in	O
the	O
stream	O
at	O
any	O
time	O
(	O
unless	O
the	O
stream	O
is	O
a	O
parallel	O
stream	O
,	O
at	O
which	O
point	O
,	O
there	O
is	O
1	O
item	O
per	O
thread	O
)	O
.	O
This	O
is	O
independent	O
of	O
the	O
data	O
source	O
which	O
may	O
have	O
more	O
than	O
the	O
current	O
items	O
'	O
ready	O
'	O
to	O
be	O
supplied	O
to	O
the	O
stream	O
,	O
or	O
the	O
stream	O
collector	O
which	O
may	O
need	O
to	O
aggregate	O
and	O
reduce	O
multiple	O
values	O
.	O
#	O
li	O
Streams	O
can	O
be	O
unbound	O
(	O
infinite	O
)	O
,	O
limited	O
only	O
by	O
the	O
data	O
source	O
,	O
or	O
collector	O
(	O
which	O
can	O
be	O
infinite	O
too	O
)	O
.	O
#	O
li	O
Streams	O
are	O
'	O
chainable	O
'	O
,	O
the	O
output	O
of	O
filtering	O
one	O
stream	O
,	O
is	O
another	O
stream	O
.	O
Values	O
input	O
to	O
and	O
transformed	O
by	O
a	O
stream	O
can	O
in	O
turn	O
be	O
supplied	O
to	O
another	O
stream	O
which	O
does	O
a	O
different	O
transformation	O
.	O
The	O
data	O
,	O
in	O
its	O
transformed	O
state	O
flows	O
from	O
one	O
stream	O
to	O
the	O
next	O
.	O
You	O
do	O
not	O
need	O
to	O
intervene	O
and	O
pull	O
the	O
data	O
from	O
one	O
stream	O
and	O
plug	O
it	O
in	O
to	O
the	O
next	O
.	O
C	O
#	O
Comparison	O
When	O
you	O
consider	O
that	O
a	O
Java	O
Stream	B-api_mention
is	O
just	O
a	O
part	O
of	O
a	O
supply	O
,	O
stream	O
,	O
and	O
collect	O
system	O
,	O
and	O
that	O
Streams	O
and	O
Iterators	O
are	O
often	O
used	O
together	O
with	O
Collections	O
,	O
then	O
it	O
is	O
no	O
wonder	O
that	O
it	O
is	O
hard	O
to	O
relate	O
to	O
the	O
same	O
concepts	O
which	O
are	O
almost	O
all	O
embedded	O
in	O
to	O
a	O
single	O
IEnumerable	O
concept	O
in	O
C	O
#	O
.	O
Parts	O
of	O
IEnumerable	O
(	O
and	O
close	O
related	O
concepts	O
)	O
are	O
apparent	O
in	O
all	O
of	O
the	O
Java	O
Iterator	B-api_mention
,	O
Iterable	B-api_mention
,	O
Lambda	O
,	O
and	O
Stream	B-api_mention
concepts	O
.	O
There	O
are	O
small	O
things	O
that	O
the	O
Java	O
concepts	O
can	O
do	O
that	O
are	O
harder	O
in	O
IEnumerable	O
,	O
and	O
visa	O
-	O
versa	O
.	O
Conclusion	O
#	O
li	O
There	O
'	O
s	O
no	O
design	O
problem	O
here	O
,	O
just	O
a	O
problem	O
in	O
matching	O
concepts	O
between	O
the	O
languages	O
.	O
#	O
li	O
Streams	O
solve	O
problems	O
in	O
a	O
different	O
way	O
#	O
li	O
Streams	O
add	O
functionality	O
to	O
Java	O
(	O
they	O
add	O
a	O
different	O
way	O
of	O
doing	O
things	O
,	O
they	O
do	O
not	O
take	O
functionality	O
away	O
)	O
Adding	O
Streams	O
gives	O
you	O
more	O
choices	O
when	O
solving	O
problems	O
,	O
which	O
is	O
fair	O
to	O
classify	O
as	O
'	O
enhancing	O
power	O
'	O
,	O
not	O
'	O
reducing	O
'	O
,	O
'	O
taking	O
away	O
'	O
,	O
or	O
'	O
restricting	O
'	O
it	O
.	O
Why	O
are	O
Java	O
Streams	O
once	O
-	O
off	O
?	O
This	O
question	O
is	O
misguided	O
,	O
because	O
streams	O
are	O
function	O
sequences	O
,	O
not	O
data	O
.	O
Depending	O
on	O
the	O
data	O
source	O
that	O
feeds	O
the	O
stream	O
,	O
you	O
can	O
reset	O
the	O
data	O
source	O
,	O
and	O
feed	O
the	O
same	O
,	O
or	O
different	O
stream	O
.	O
Unlike	O
C	O
#	O
'	O
s	O
IEnumerable	O
,	O
where	O
an	O
execution	O
pipeline	O
can	O
be	O
executed	O
as	O
many	O
times	O
as	O
we	O
want	O
,	O
in	O
Java	O
a	O
stream	O
can	O
be	O
'	O
iterated	O
'	O
only	O
once	O
.	O
Comparing	O
an	O
IEnumerable	O
to	O
a	O
Stream	B-api_mention
is	O
misguided	O
.	O
The	O
context	O
you	O
are	O
using	O
to	O
say	O
IEnumerable	O
can	O
be	O
executed	O
as	O
many	O
times	O
as	O
you	O
want	O
,	O
is	O
best	O
compared	O
to	O
Java	O
Iterables	O
,	O
which	O
can	O
be	O
iterated	O
as	O
many	O
times	O
as	O
you	O
want	O
.	O
A	O
Java	O
Stream	B-api_mention
represents	O
a	O
subset	O
of	O
the	O
IEnumerable	O
concept	O
,	O
and	O
not	O
the	O
subset	O
that	O
supplies	O
data	O
,	O
and	O
thus	O
cannot	O
be	O
'	O
rerun	O
'	O
.	O
Any	O
call	O
to	O
a	O
terminal	O
operation	O
closes	O
the	O
stream	O
,	O
rendering	O
it	O
unusable	O
.	O
This	O
'	O
feature	O
'	O
takes	O
away	O
a	O
lot	O
of	O
power	O
.	O
The	O
first	O
statement	O
is	O
true	O
,	O
in	O
a	O
sense	O
.	O
The	O
'	O
takes	O
away	O
power	O
'	O
statement	O
is	O
not	O
.	O
You	O
are	O
still	O
comparing	O
Streams	O
it	O
IEnumerables	O
.	O
The	O
terminal	O
operation	O
in	O
the	O
stream	O
is	O
like	O
a	O
'	O
break	O
'	O
clause	O
in	O
a	O
for	O
loop	O
.	O
You	O
are	O
always	O
free	O
to	O
have	O
another	O
stream	O
,	O
if	O
you	O
want	O
,	O
and	O
if	O
you	O
can	O
re	O
-	O
supply	O
the	O
data	O
you	O
need	O
.	O
Again	O
,	O
if	O
you	O
consider	O
the	O
IEnumerable	O
to	O
be	O
more	O
like	O
an	O
Iterable	B-api_mention
,	O
for	O
this	O
statement	O
,	O
Java	O
does	O
it	O
just	O
fine	O
.	O
I	O
imagine	O
the	O
reason	O
for	O
this	O
is	O
not	O
technical	O
.	O
What	O
were	O
the	O
design	O
considerations	O
behind	O
this	O
strange	O
restriction	O
?	O
The	O
reason	O
is	O
technical	O
,	O
and	O
for	O
the	O
simple	O
reason	O
that	O
a	O
Stream	B-api_mention
a	O
subset	O
of	O
what	O
think	O
it	O
is	O
.	O
The	O
stream	O
subset	O
does	O
not	O
control	O
the	O
data	O
supply	O
,	O
so	O
you	O
should	O
reset	O
the	O
supply	O
,	O
not	O
the	O
stream	O
.	O
In	O
that	O
context	O
,	O
it	O
is	O
not	O
so	O
strange	O
.	O
QuickSort	O
example	O
Your	O
quicksort	O
example	O
has	O
the	O
signature	O
:	O
IEnumerable	O
<	O
T	O
>	O
QuickSort	O
(	O
args	O
)	O
You	O
are	O
treating	O
the	O
input	O
IEnumerable	O
as	O
a	O
data	O
source	O
:	O
IEnumerable	O
<	O
T	O
>	O
lt	O
=	O
ints	O
.	O
Where	O
(	O
args	O
)	O
;	O
Additionally	O
,	O
return	O
value	O
is	O
IEnumerable	O
too	O
,	O
which	O
is	O
a	O
supply	O
of	O
data	O
,	O
and	O
since	O
this	O
is	O
a	O
Sort	O
operation	O
,	O
the	O
order	O
of	O
that	O
supply	O
is	O
significant	O
.	O
If	O
you	O
consider	O
the	O
Java	O
Iterable	B-api_mention
class	O
to	O
be	O
the	O
appropriate	O
match	O
for	O
this	O
,	O
specifically	O
the	O
List	B-api_mention
specialization	O
of	O
Iterable	B-api_mention
,	O
since	O
List	B-api_mention
is	O
a	O
supply	O
of	O
data	O
which	O
has	O
a	O
guaranteed	O
order	O
or	O
iteration	O
,	O
then	O
the	O
equivalent	O
Java	O
code	O
to	O
your	O
code	O
would	O
be	O
:	O
#	O
pre	O
Note	O
there	O
is	O
a	O
bug	O
(	O
which	O
I	O
have	O
reproduced	O
)	O
,	O
in	O
that	O
the	O
sort	O
does	O
not	O
handle	O
duplicate	O
values	O
gracefully	O
,	O
it	O
is	O
a	O
'	O
unique	O
value	O
'	O
sort	O
.	O
Also	O
note	O
how	O
the	O
Java	O
code	O
uses	O
data	O
source	O
(	O
List	O
)	O
,	O
and	O
stream	O
concepts	O
at	O
different	O
point	O
,	O
and	O
that	O
in	O
C	O
#	O
those	O
two	O
'	O
personalities	O
'	O
can	O
be	O
expressed	O
in	O
just	O
IEnumerable	O
.	O
Also	O
,	O
although	O
I	O
have	O
use	O
List	B-api_mention
as	O
the	O
base	O
type	O
,	O
I	O
could	O
have	O
used	O
the	O
more	O
general	O
Collection	B-api_mention
,	O
and	O
with	O
a	O
small	O
iterator	O
-	O
to	O
-	O
Stream	O
conversion	O
,	O
I	O
could	O
have	O
used	O
the	O
even	O
more	O
general	O
Iterable	B-api_mention
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667310	O
You	O
can	O
use	O
Mode	O
.	O
mode1	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
however	O
you	O
often	O
don	O
'	O
t	O
need	O
to	O
do	O
this	O
.	O
Mode	O
mode	O
=	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
28840047	O
Some	O
time	O
ago	O
,	O
I	O
'	O
ve	O
blogged	O
about	O
a	O
Java	O
8	O
functional	O
way	O
of	O
calculating	O
fibonacci	O
numbers	O
recursively	O
,	O
with	O
a	O
ConcurrentHashMap	B-api_mention
cache	O
and	O
the	O
new	O
,	O
useful	O
computeIfAbsent	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
I	O
chose	O
ConcurrentHashMap	B-api_mention
because	O
I	O
was	O
thinking	O
of	O
making	O
this	O
example	O
even	O
more	O
sophisticated	O
by	O
introducing	O
parallelism	O
(	O
which	O
I	O
didn	O
'	O
t	O
in	O
the	O
end	O
)	O
.	O
Now	O
,	O
let	O
'	O
s	O
increase	O
the	O
number	O
from	O
8	O
to	O
25	O
and	O
observe	O
what	O
happens	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
program	O
never	O
halts	O
.	O
Inside	O
the	O
method	O
,	O
there	O
'	O
s	O
a	O
loop	O
that	O
just	O
runs	O
forever	O
:	O
#	O
pre	O
I	O
'	O
m	O
using	O
:	O
#	O
pre	O
Matthias	O
,	O
a	O
reader	O
of	O
that	O
blog	O
post	O
also	O
confirmed	O
the	O
issue	O
(	O
he	O
actually	O
found	O
it	O
)	O
.	O
This	O
is	O
weird	O
.	O
I	O
would	O
have	O
expected	O
any	O
of	O
the	O
following	O
two	O
:	O
#	O
li	O
It	O
works	O
#	O
li	O
It	O
throws	O
a	O
ConcurrentModificationException	B-api_mention
But	O
just	O
never	O
halting	O
?	O
That	O
seems	O
dangerous	O
.	O
Is	O
it	O
a	O
bug	O
?	O
Or	O
did	O
I	O
misunderstand	O
some	O
contract	O
?	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15430259	O
If	O
you	O
know	O
in	O
advance	O
what	O
the	O
size	O
of	O
the	O
ArrayList	B-api_mention
is	O
going	O
to	O
be	O
,	O
it	O
is	O
more	O
efficient	O
to	O
specify	O
the	O
initial	O
capacity	O
.	O
If	O
you	O
don	O
'	O
t	O
do	O
this	O
,	O
the	O
internal	O
array	O
will	O
have	O
to	O
be	O
repeatedly	O
reallocated	O
as	O
the	O
list	O
grows	O
.	O
The	O
larger	O
the	O
final	O
list	O
,	O
the	O
more	O
time	O
you	O
save	O
by	O
avoiding	O
the	O
reallocations	O
.	O
That	O
said	O
,	O
even	O
without	O
pre	O
-	O
allocation	O
,	O
inserting	O
n	O
elements	O
at	O
the	O
back	O
of	O
an	O
ArrayList	B-api_mention
is	O
guaranteed	O
to	O
take	O
total	O
O	O
(	O
args	O
)	O
time	O
.	O
In	O
other	O
words	O
,	O
appending	O
an	O
element	O
is	O
an	O
amortized	O
constant	O
-	O
time	O
operation	O
.	O
This	O
is	O
achieved	O
by	O
having	O
each	O
reallocation	O
increase	O
the	O
size	O
of	O
the	O
array	O
exponentially	O
,	O
typically	O
by	O
a	O
factor	O
of	O
1	O
.	O
5	O
.	O
With	O
this	O
approach	O
,	O
the	O
total	O
number	O
of	O
operations	O
can	O
be	O
shown	O
to	O
be	O
O	O
(	O
n	O
)	O
.	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818916	O
The	O
primary	O
use	O
of	O
AtomicInteger	B-api_mention
is	O
when	O
you	O
are	O
in	O
a	O
multithreaded	O
context	O
and	O
you	O
need	O
to	O
perform	O
thread	O
safe	O
operations	O
on	O
an	O
integer	O
without	O
using	O
synchronized	O
.	O
The	O
assignation	O
and	O
retrieval	O
on	O
the	O
primitive	O
type	O
int	O
are	O
already	O
atomic	O
but	O
AtomicInteger	B-api_mention
comes	O
with	O
many	O
operations	O
which	O
are	O
not	O
atomic	O
on	O
int	O
.	O
The	O
simplest	O
are	O
the	O
getAndXXX	O
or	O
xXXAndGet	O
.	O
For	O
instance	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
an	O
atomic	O
equivalent	O
to	O
i	O
+	O
+	O
which	O
is	O
not	O
atomic	O
because	O
it	O
is	O
actually	O
a	O
short	O
cut	O
for	O
three	O
operations	O
:	O
retrieval	O
,	O
addition	O
and	O
assignation	O
.	O
compareAndSet	B-api_mention
is	O
very	O
useful	O
to	O
implements	O
semaphores	O
,	O
locks	O
,	O
latches	O
,	O
etc	O
.	O
Using	O
the	O
AtomicInteger	B-api_mention
is	O
faster	O
and	O
more	O
readable	O
than	O
performing	O
the	O
same	O
using	O
synchronization	O
.	O
A	O
simple	O
test	O
:	O
#	O
pre	O
On	O
my	O
PC	O
with	O
Java	O
1	O
.	O
6	O
the	O
atomic	O
test	O
runs	O
in	O
3	O
seconds	O
while	O
the	O
synchronized	O
one	O
runs	O
in	O
about	O
5	O
.	O
5	O
seconds	O
.	O
The	O
problem	O
here	O
is	O
that	O
the	O
operation	O
to	O
synchronize	O
(	O
notAtomic	O
+	O
+	O
)	O
is	O
really	O
short	O
.	O
So	O
the	O
cost	O
of	O
the	O
synchronization	O
is	O
really	O
important	O
compared	O
to	O
the	O
operation	O
.	O
Beside	O
atomicity	O
AtomicInteger	B-api_mention
can	O
be	O
use	O
as	O
a	O
mutable	O
version	O
of	O
Integer	B-api_mention
for	O
instance	O
in	O
Map	B-api_mention
s	O
as	O
values	O
.	O
Question	O
-	O
6094575	O
,	O
answer	O
-	O
6094600	O
You	O
can	O
use	O
Class	B-api_mention
.	I-api_mention
forName	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
get	O
a	O
Class	B-api_mention
object	O
of	O
the	O
desired	O
class	O
.	O
Then	O
use	O
getConstructor	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
find	O
the	O
desired	O
Constructor	B-api_mention
object	O
.	O
Finally	O
,	O
call	O
newInstance	B-api_mention
(	I-api_mention
)	I-api_mention
on	O
that	O
object	O
to	O
get	O
your	O
new	O
instance	O
.	O
#	O
pre	O
Question	O
-	O
26318569	O
I	O
am	O
getting	O
following	O
exception	O
while	O
running	O
the	O
tests	O
.	O
I	O
am	O
using	O
Mockito	B-api_mention
for	O
mocking	O
.	O
The	O
hints	O
mentioned	O
by	O
Mockito	B-api_mention
library	O
are	O
not	O
helping	O
.	O
#	O
pre	O
Test	O
Code	O
from	O
DomainTestFactory	O
.	O
When	O
I	O
run	O
the	O
following	O
test	O
,	O
I	O
see	O
the	O
exception	O
#	O
pre	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
22502206	O
When	O
reading	O
this	O
question	O
one	O
can	O
get	O
the	O
impression	O
,	O
that	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
in	O
combination	O
with	O
lambda	O
expressions	O
is	O
a	O
shortcut	O
/	O
replacement	O
for	O
writing	O
a	O
traditional	O
for	O
-	O
each	O
loop	O
.	O
This	O
is	O
simply	O
not	O
true	O
.	O
This	O
code	O
from	O
the	O
OP	O
:	O
joins	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
is	O
not	O
intended	O
as	O
a	O
shortcut	O
for	O
writing	O
#	O
pre	O
and	O
should	O
certainly	O
not	O
be	O
used	O
in	O
this	O
way	O
.	O
Instead	O
it	O
is	O
intended	O
as	O
a	O
shortcut	O
(	O
although	O
it	O
is	O
not	O
exactly	O
the	O
same	O
)	O
for	O
writing	O
#	O
pre	O
And	O
it	O
is	O
as	O
a	O
replacement	O
for	O
the	O
following	O
Java	O
7	O
code	O
:	O
#	O
pre	O
Replacing	O
the	O
body	O
of	O
a	O
loop	O
with	O
a	O
functional	O
interface	O
,	O
as	O
in	O
the	O
examples	O
above	O
,	O
makes	O
your	O
code	O
more	O
explicit	O
:	O
You	O
are	O
saying	O
that	O
(	O
1	O
)	O
the	O
body	O
of	O
the	O
loop	O
does	O
not	O
affect	O
the	O
surrounding	O
code	O
and	O
control	O
flow	O
,	O
and	O
(	O
2	O
)	O
the	O
body	O
of	O
the	O
loop	O
may	O
be	O
replaced	O
with	O
a	O
different	O
implementation	O
of	O
the	O
function	O
,	O
without	O
affecting	O
the	O
surrounding	O
code	O
.	O
Not	O
being	O
able	O
to	O
access	O
non	O
final	O
variables	O
of	O
the	O
outer	O
scope	O
is	O
not	O
a	O
deficit	O
of	O
functions	O
/	O
lambdas	O
,	O
it	O
is	O
a	O
feature	O
that	O
distinguishes	O
the	O
semantics	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
from	O
the	O
semantics	O
of	O
a	O
traditional	O
for	O
-	O
each	O
loop	O
.	O
Once	O
one	O
gets	O
used	O
to	O
the	O
syntax	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
,	O
it	O
makes	O
the	O
code	O
more	O
readable	O
,	O
because	O
you	O
immediately	O
get	O
this	O
additional	O
information	O
about	O
the	O
code	O
.	O
Traditional	O
for	O
-	O
each	O
loops	O
will	O
certainly	O
stay	O
good	O
practice	O
(	O
to	O
avoid	O
the	O
overused	O
term	O
"	O
best	O
practice	O
"	O
)	O
in	O
Java	O
.	O
But	O
this	O
doesn	O
'	O
t	O
mean	O
,	O
that	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
should	O
be	O
considered	O
bad	O
practice	O
or	O
bad	O
style	O
.	O
It	O
is	O
always	O
good	O
practice	O
,	O
to	O
use	O
the	O
right	O
tool	O
for	O
doing	O
the	O
job	O
,	O
and	O
this	O
includes	O
mixing	O
traditional	O
for	O
-	O
each	O
loops	O
with	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
,	O
where	O
it	O
makes	O
sense	O
.	O
Since	O
the	O
downsides	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
have	O
already	O
been	O
discussed	O
in	O
this	O
thread	O
,	O
here	O
are	O
some	O
reasons	O
,	O
why	O
you	O
might	O
probably	O
want	O
to	O
use	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
:	O
#	O
li	O
To	O
make	O
your	O
code	O
more	O
explicit	O
:	O
As	O
described	O
above	O
,	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
can	O
make	O
your	O
code	O
more	O
explicit	O
and	O
readable	O
in	O
some	O
situations	O
.	O
#	O
li	O
To	O
make	O
your	O
code	O
more	O
extensible	O
and	O
maintainable	O
:	O
Using	O
a	O
function	O
as	O
the	O
body	O
of	O
a	O
loop	O
allows	O
you	O
to	O
replace	O
this	O
function	O
with	O
different	O
implementations	O
(	O
see	O
Strategy	O
Pattern	O
)	O
.	O
You	O
could	O
e	O
.	O
g	O
.	O
easily	O
replace	O
the	O
lambda	O
expression	O
with	O
a	O
method	O
call	O
,	O
that	O
may	O
be	O
overwritten	O
by	O
sub	O
-	O
classes	O
:	O
joins	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Then	O
you	O
could	O
provide	O
default	O
strategies	O
using	O
an	O
enum	O
,	O
that	O
implements	O
the	O
functional	O
interface	O
.	O
This	O
not	O
only	O
makes	O
your	O
code	O
more	O
extensible	O
,	O
it	O
also	O
increases	O
maintainability	O
because	O
it	O
decouples	O
the	O
loop	O
implementation	O
from	O
the	O
loop	O
declaration	O
.	O
#	O
li	O
To	O
make	O
your	O
code	O
more	O
debuggable	O
:	O
Seperating	O
the	O
loop	O
implementation	O
from	O
the	O
declaration	O
can	O
also	O
make	O
debugging	O
more	O
easy	O
,	O
because	O
you	O
could	O
have	O
a	O
specialized	O
debug	O
implementation	O
,	O
that	O
prints	O
out	O
debug	O
messages	O
,	O
without	O
the	O
need	O
to	O
clutter	O
your	O
main	O
code	O
with	O
if	O
(	O
args	O
)	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
debug	O
implementation	O
could	O
e	O
.	O
g	O
.	O
be	O
a	O
delegate	O
,	O
that	O
decorates	O
the	O
actual	O
function	O
implementation	O
.	O
#	O
li	O
To	O
optimize	O
performance	O
-	O
critical	O
code	O
:	O
Contrary	O
to	O
some	O
of	O
the	O
assertions	O
in	O
this	O
thread	O
,	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
does	O
already	O
provide	O
better	O
performance	O
than	O
a	O
traditional	O
for	O
-	O
each	O
loop	O
,	O
at	O
least	O
when	O
using	O
ArrayList	B-api_mention
and	O
running	O
Hotspot	O
in	O
"	O
-	O
client	O
"	O
mode	O
.	O
While	O
this	O
performance	O
boost	O
is	O
small	O
and	O
negligible	O
for	O
most	O
use	O
cases	O
,	O
there	O
are	O
situations	O
,	O
where	O
this	O
extra	O
performance	O
can	O
make	O
a	O
difference	O
.	O
E	O
.	O
g	O
.	O
library	O
maintainers	O
will	O
certainly	O
want	O
to	O
evaluate	O
,	O
if	O
some	O
of	O
their	O
existing	O
loop	O
implementations	O
should	O
be	O
replaced	O
with	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
.	O
To	O
back	O
this	O
statement	O
up	O
with	O
facts	O
,	O
I	O
have	O
done	O
some	O
micro	O
-	O
benchmarks	O
with	O
Caliper	O
.	O
Here	O
is	O
the	O
test	O
code	O
(	O
latest	O
Caliper	O
from	O
git	O
is	O
needed	O
)	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
results	O
:	O
#	O
li	O
Results	O
for	O
-	O
client	O
#	O
li	O
Results	O
for	O
-	O
server	O
When	O
running	O
with	O
"	O
-	O
client	O
"	O
,	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
outperforms	O
the	O
traditional	O
for	O
loop	O
over	O
an	O
ArrayList	B-api_mention
,	O
but	O
is	O
still	O
slower	O
than	O
directly	O
iterating	O
over	O
an	O
array	O
.	O
When	O
running	O
with	O
"	O
-	O
server	O
"	O
,	O
the	O
performance	O
of	O
all	O
approaches	O
is	O
about	O
the	O
same	O
.	O
#	O
li	O
To	O
provide	O
optional	O
support	O
for	O
parallel	O
execution	O
:	O
It	O
has	O
already	O
been	O
said	O
here	O
,	O
that	O
the	O
possibility	O
to	O
execute	O
the	O
functional	O
interface	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
in	O
parallel	O
using	O
streams	O
,	O
is	O
certainly	O
an	O
important	O
aspect	O
.	O
Since	O
Collection	B-api_mention
#	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
guarantee	O
,	O
that	O
the	O
loop	O
is	O
actually	O
executed	O
in	O
parallel	O
,	O
one	O
must	O
consider	O
this	O
an	O
optional	O
feature	O
.	O
By	O
iterating	O
over	O
your	O
list	O
with	O
list	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
you	O
explicitly	O
say	O
:	O
This	O
loop	O
supports	O
parallel	O
execution	O
,	O
but	O
it	O
does	O
not	O
depend	O
on	O
it	O
.	O
Again	O
,	O
this	O
is	O
a	O
feature	O
and	O
not	O
a	O
deficit	O
!	O
By	O
moving	O
the	O
decision	O
for	O
parallel	O
execution	O
away	O
from	O
your	O
actual	O
loop	O
implementation	O
,	O
you	O
allow	O
optional	O
optimization	O
of	O
your	O
code	O
,	O
without	O
affecting	O
the	O
code	O
itself	O
,	O
which	O
is	O
a	O
good	O
thing	O
.	O
Also	O
,	O
if	O
the	O
default	O
parallel	O
stream	O
implementation	O
does	O
not	O
fit	O
your	O
needs	O
,	O
no	O
one	O
is	O
preventing	O
you	O
from	O
providing	O
your	O
own	O
implementation	O
.	O
You	O
could	O
e	O
.	O
g	O
.	O
provide	O
an	O
optimized	O
collection	O
depending	O
on	O
the	O
underlying	O
operating	O
system	O
,	O
on	O
the	O
size	O
of	O
the	O
collection	O
,	O
on	O
the	O
number	O
of	O
cores	O
,	O
and	O
on	O
some	O
preference	O
settings	O
:	O
#	O
pre	O
The	O
nice	O
thing	O
here	O
is	O
,	O
that	O
your	O
loop	O
implementation	O
doesn	O
'	O
t	O
need	O
to	O
know	O
or	O
care	O
about	O
these	O
details	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7800008	O
Strictly	O
speaking	O
-	O
you	O
have	O
no	O
choice	O
but	O
calling	O
either	O
hostname	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
-	O
on	O
Unix	O
gethostname	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
the	O
name	O
of	O
your	O
computer	O
.	O
Any	O
attempt	O
to	O
determine	O
the	O
hostname	O
by	O
an	O
IP	O
address	O
like	O
this	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
bound	O
to	O
fail	O
in	O
some	O
circumstances	O
:	O
#	O
li	O
The	O
IP	O
address	O
might	O
not	O
resolve	O
into	O
any	O
name	O
.	O
Bad	O
DNS	O
setup	O
,	O
bad	O
system	O
setup	O
or	O
bad	O
provider	O
setup	O
may	O
be	O
the	O
reason	O
for	O
this	O
.	O
#	O
li	O
A	O
name	O
in	O
DNS	O
can	O
have	O
many	O
aliases	O
called	O
CNAMEs	O
.	O
These	O
can	O
only	O
be	O
resolved	O
in	O
one	O
direction	O
properly	O
:	O
name	O
to	O
address	O
.	O
The	O
reverse	O
direction	O
is	O
ambiguous	O
.	O
Which	O
one	O
is	O
the	O
"	O
official	O
"	O
name	O
?	O
#	O
li	O
A	O
host	O
can	O
have	O
many	O
different	O
IP	O
addresses	O
-	O
and	O
each	O
address	O
can	O
have	O
many	O
different	O
names	O
.	O
Two	O
common	O
cases	O
are	O
:	O
One	O
ethernet	O
port	O
has	O
several	O
"	O
logical	O
"	O
IP	O
addresses	O
or	O
the	O
computer	O
has	O
several	O
ethernet	O
ports	O
.	O
It	O
is	O
configurable	O
whether	O
they	O
share	O
an	O
IP	O
or	O
have	O
different	O
IPs	O
.	O
This	O
is	O
called	O
"	O
multihomed	O
"	O
.	O
#	O
li	O
One	O
Name	O
in	O
DNS	O
can	O
resolve	O
to	O
several	O
IP	O
Addresses	O
.	O
And	O
not	O
all	O
of	O
those	O
addresses	O
must	O
be	O
located	O
on	O
the	O
same	O
computer	O
!	O
(	O
Usecase	O
:	O
A	O
simple	O
form	O
of	O
load	O
-	O
balancing	O
)	O
#	O
li	O
Let	O
'	O
s	O
not	O
even	O
start	O
talking	O
about	O
dynamic	O
IP	O
addresses	O
.	O
Also	O
don	O
'	O
t	O
confuse	O
the	O
name	O
of	O
an	O
IP	O
-	O
address	O
with	O
the	O
name	O
of	O
the	O
host	O
(	O
hostname	O
)	O
.	O
A	O
metaphor	O
might	O
make	O
it	O
clearer	O
:	O
#	O
blockquote	O
This	O
illustrates	O
it	O
pretty	O
much	O
I	O
think	O
.	O
The	O
good	O
news	O
is	O
:	O
The	O
real	O
hostname	O
is	O
usually	O
not	O
necessary	O
.	O
In	O
most	O
cases	O
any	O
name	O
which	O
resolves	O
into	O
an	O
IP	O
address	O
on	O
this	O
host	O
will	O
do	O
.	O
(	O
The	O
stranger	O
might	O
enter	O
the	O
city	O
by	O
Northgate	O
,	O
but	O
helpful	O
locals	O
translate	O
the	O
"	O
2nd	O
left	O
"	O
part	O
.	O
)	O
If	O
the	O
remaining	O
corner	O
cases	O
you	O
must	O
use	O
the	O
definitive	O
source	O
of	O
this	O
configuration	O
setting	O
-	O
which	O
is	O
the	O
C	O
function	O
gethostname	O
(	O
args	O
)	O
.	O
That	O
function	O
is	O
also	O
called	O
by	O
the	O
program	O
hostname	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331243	O
Create	O
a	O
DateTimeFormatter	B-api_mention
using	O
DateTimeFormat	B-api_mention
.	I-api_mention
forPattern	I-api_mention
(	O
String	B-api_mention
)	O
Using	O
Joda	O
time	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
Also	O
,	O
if	O
you	O
wanted	O
to	O
use	O
standard	O
Java	O
,	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
31471444	O
,	O
answer	O
-	O
31476657	O
From	O
Class	O
NumberUtils	O
you	O
'	O
ll	O
see	O
it	O
'	O
s	O
defined	O
as	O
:	O
#	O
pre	O
So	O
,	O
you	O
'	O
ll	O
see	O
that	O
INTEGER	O
_	O
ONE	O
is	O
not	O
the	O
same	O
as	O
1	O
.	O
It	O
'	O
s	O
an	O
object	O
that	O
'	O
s	O
already	O
been	O
constructed	O
for	O
you	O
.	O
So	O
,	O
if	O
we	O
'	O
re	O
needing	O
an	O
instance	O
of	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
rather	O
than	O
create	O
your	O
own	O
,	O
you	O
can	O
reuse	O
the	O
one	O
from	O
the	O
library	O
saving	O
time	O
and	O
memory	O
.	O
It	O
really	O
depends	O
on	O
your	O
application	O
,	O
if	O
you	O
indeed	O
what	O
the	O
int	O
version	O
of	O
1	O
,	O
then	O
,	O
you	O
'	O
d	O
probably	O
be	O
better	O
of	O
using	O
that	O
instead	O
of	O
this	O
Integer	B-api_mention
class	O
.	O
Question	O
-	O
8189466	O
,	O
answer	O
-	O
8189786	O
Here	O
'	O
s	O
why	O
:	O
As	O
it	O
is	O
says	O
in	O
the	O
Javadoc	O
:	O
#	O
blockquote	O
This	O
check	O
is	O
done	O
in	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
iterator	O
(	O
as	O
you	O
can	O
see	O
by	O
the	O
stacktrace	O
)	O
.	O
But	O
we	O
will	O
reach	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
only	O
if	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
delivered	O
true	O
,	O
which	O
is	O
what	O
is	O
called	O
by	O
the	O
for	O
each	O
to	O
check	O
if	O
the	O
boundary	O
is	O
met	O
.	O
In	O
your	O
remove	O
method	O
,	O
when	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
checks	O
if	O
it	O
needs	O
to	O
return	O
another	O
element	O
,	O
it	O
will	O
see	O
that	O
it	O
returned	O
two	O
elements	O
,	O
and	O
now	O
after	O
one	O
element	O
was	O
removed	O
the	O
list	O
only	O
contains	O
two	O
elements	O
.	O
So	O
all	O
is	O
peachy	O
and	O
we	O
are	O
done	O
with	O
iterating	O
.	O
The	O
check	O
for	O
concurrent	O
modifications	O
does	O
not	O
occur	O
,	O
as	O
this	O
is	O
done	O
in	O
the	O
next	O
(	O
args	O
)	O
method	O
which	O
is	O
never	O
called	O
.	O
Next	O
we	O
get	O
to	O
the	O
second	O
loop	O
.	O
After	O
we	O
remove	O
the	O
second	O
number	O
the	O
hasNext	B-api_mention
method	O
will	O
check	O
again	O
if	O
can	O
return	O
more	O
values	O
.	O
It	O
has	O
returned	O
two	O
values	O
already	O
,	O
but	O
the	O
list	O
now	O
only	O
contains	O
one	O
.	O
But	O
the	O
code	O
here	O
is	O
:	O
#	O
pre	O
1	O
!	O
=	O
2	O
,	O
so	O
we	O
continue	O
to	O
the	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
now	O
realizes	O
that	O
someone	O
has	O
been	O
messing	O
with	O
the	O
list	O
and	O
fires	O
the	O
exception	O
.	O
Hope	O
that	O
clears	O
your	O
question	O
up	O
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723651	O
Println	O
(	O
args	O
)	O
uses	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
Print	O
(	O
args	O
)	O
does	O
null	O
check	O
.	O
#	O
pre	O
Question	O
-	O
32323081	O
I	O
have	O
a	O
question	O
regarding	O
Java	O
8	O
inference	O
with	O
respect	O
to	O
lambdas	O
and	O
their	O
related	O
exception	O
signatures	O
.	O
If	O
I	O
define	O
some	O
method	O
foo	O
:	O
#	O
pre	O
then	O
I	O
get	O
the	O
nice	O
and	O
concise	O
semantic	O
of	O
being	O
able	O
to	O
write	O
foo	O
(	O
args	O
)	O
;	O
in	O
most	O
cases	O
for	O
a	O
given	O
T	O
.	O
However	O
,	O
in	O
this	O
example	O
,	O
if	O
my	O
getTheT	O
operation	O
declares	O
that	O
it	O
throws	O
Exception	O
,	O
my	O
foo	O
method	O
which	O
takes	O
a	O
Supplier	B-api_mention
no	O
longer	O
compiles	O
:	O
the	O
Supplier	B-api_mention
method	O
signature	O
for	O
get	O
doesn	O
'	O
t	O
throw	O
exceptions	O
.	O
It	O
seems	O
like	O
a	O
decent	O
way	O
to	O
get	O
around	O
this	O
would	O
be	O
to	O
overload	O
foo	O
to	O
accept	O
either	O
option	O
,	O
with	O
the	O
overloaded	O
definition	O
being	O
:	O
#	O
pre	O
where	O
ThrowingSupplier	O
is	O
defined	O
as	O
#	O
pre	O
In	O
this	O
way	O
,	O
we	O
have	O
one	O
Supplier	B-api_mention
type	O
which	O
throws	O
exceptions	O
and	O
one	O
which	O
doesn	O
'	O
t	O
.	O
The	O
desired	O
syntax	O
would	O
be	O
something	O
like	O
this	O
:	O
#	O
pre	O
However	O
,	O
this	O
causes	O
issues	O
due	O
to	O
the	O
lambda	O
type	O
being	O
ambiguous	O
(	O
presumably	O
unable	O
to	O
resolve	O
between	O
Supplier	B-api_mention
and	O
ThrowingSupplier	O
)	O
.	O
Doing	O
an	O
explicit	O
cast	O
a	O
la	O
foo	O
(	O
args	O
)	O
;	O
would	O
work	O
,	O
but	O
it	O
gets	O
rid	O
of	O
most	O
of	O
the	O
conciseness	O
of	O
the	O
desired	O
syntax	O
.	O
I	O
guess	O
the	O
underlying	O
question	O
is	O
:	O
if	O
the	O
Java	O
compiler	O
is	O
able	O
to	O
resolve	O
the	O
fact	O
that	O
one	O
of	O
my	O
lambdas	O
is	O
incompatible	O
due	O
to	O
it	O
throwing	O
an	O
exception	O
in	O
the	O
Supplier	O
-	O
only	O
case	O
,	O
why	O
isn	O
'	O
t	O
it	O
able	O
to	O
use	O
that	O
same	O
information	O
to	O
derive	O
the	O
type	O
of	O
the	O
lambda	O
in	O
the	O
secondary	O
,	O
type	O
-	O
inference	O
case	O
?	O
Any	O
information	O
or	O
resources	O
which	O
anyone	O
could	O
point	O
me	O
to	O
would	O
likewise	O
be	O
much	O
appreciated	O
,	O
as	O
I	O
'	O
m	O
just	O
not	O
too	O
sure	O
where	O
to	O
look	O
for	O
more	O
information	O
on	O
the	O
matter	O
.	O
Thanks	O
!	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
31886637	O
name	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
literally	O
the	O
textual	O
name	O
in	O
the	O
java	O
code	O
of	O
the	O
enum	O
.	O
That	O
means	O
it	O
is	O
limited	O
to	O
strings	O
that	O
can	O
actually	O
appear	O
in	O
your	O
java	O
code	O
,	O
but	O
not	O
all	O
desirable	O
strings	O
are	O
expressible	O
in	O
code	O
.	O
For	O
example	O
,	O
you	O
may	O
need	O
a	O
string	O
that	O
begins	O
with	O
a	O
number	O
.	O
name	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
never	O
be	O
able	O
to	O
obtain	O
that	O
string	O
for	O
you	O
.	O
Question	O
-	O
23114015	O
I	O
am	O
wondering	O
why	O
the	O
Iterable	B-api_mention
interface	O
does	O
not	O
provide	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
.	O
Consider	O
the	O
following	O
class	O
:	O
#	O
pre	O
It	O
is	O
an	O
implementation	O
of	O
a	O
Hand	O
as	O
you	O
can	O
have	O
cards	O
in	O
your	O
hand	O
while	O
playing	O
a	O
Trading	O
Card	O
Game	O
.	O
Essentially	O
it	O
wraps	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
ensures	O
a	O
maximum	O
capacity	O
and	O
offers	O
some	O
other	O
useful	O
features	O
.	O
It	O
is	O
better	O
as	O
implementing	O
it	O
directly	O
as	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Now	O
,	O
for	O
convienience	O
I	O
thought	O
it	O
would	O
be	O
nice	O
to	O
implement	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
such	O
that	O
you	O
can	O
use	O
enhanced	O
for	O
-	O
loops	O
if	O
you	O
want	O
to	O
loop	O
over	O
it	O
.	O
(	O
My	O
Hand	O
class	O
also	O
provides	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
hence	O
the	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
justified	O
in	O
my	O
opinion	O
.	O
)	O
The	O
Iterable	O
interface	O
provides	O
the	O
following	O
(	O
left	O
out	O
javadoc	O
)	O
:	O
#	O
pre	O
Now	O
can	O
you	O
obtain	O
a	O
stream	O
with	O
:	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
stream	O
=	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
onto	O
the	O
real	O
question	O
:	O
#	O
li	O
Why	O
does	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
provide	O
a	O
default	O
methods	O
that	O
implement	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
see	O
nothing	O
that	O
would	O
make	O
this	O
impossible	O
or	O
unwanted	O
?	O
A	O
related	O
question	O
I	O
found	O
is	O
the	O
following	O
though	O
:	O
Why	O
does	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
implement	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
?	O
Which	O
is	O
oddly	O
enough	O
suggesting	O
it	O
to	O
do	O
it	O
somewhat	O
the	O
other	O
way	O
around	O
.	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
20262456	O
You	O
might	O
wanna	O
try	O
return	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
22409102	O
,	O
answer	O
-	O
22409270	O
You	O
can	O
use	O
Float	B-api_mention
.	I-api_mention
floatToIntBits	I-api_mention
to	O
convert	O
it	O
to	O
an	O
int	O
and	O
look	O
at	O
the	O
bit	O
pattern	O
:	O
#	O
pre	O
Question	O
-	O
22501230	O
,	O
answer	O
-	O
22511214	O
I	O
don	O
'	O
t	O
like	O
any	O
of	O
the	O
solutions	O
presented	O
except	O
for	O
JAB	O
'	O
s	O
.	O
None	O
of	O
the	O
others	O
make	O
it	O
easy	O
to	O
read	O
the	O
code	O
and	O
understand	O
what	O
is	O
being	O
computed	O
.	O
Here	O
'	O
s	O
how	O
I	O
would	O
write	O
this	O
code	O
-	O
-	O
I	O
only	O
know	O
C	O
#	O
,	O
not	O
Java	O
,	O
but	O
you	O
get	O
the	O
picture	O
:	O
#	O
pre	O
Now	O
it	O
is	O
much	O
more	O
clear	O
what	O
is	O
being	O
computed	O
here	O
:	O
this	O
emphasizes	O
that	O
we	O
are	O
computing	O
who	O
gets	O
hit	O
by	O
what	O
attack	O
,	O
and	O
returning	O
both	O
results	O
.	O
However	O
this	O
could	O
be	O
even	O
better	O
;	O
that	O
Boolean	B-api_mention
array	O
is	O
somewhat	O
opaque	O
.	O
I	O
like	O
the	O
table	O
lookup	O
approach	O
but	O
I	O
would	O
be	O
inclined	O
to	O
write	O
it	O
in	O
such	O
a	O
way	O
that	O
made	O
it	O
clear	O
what	O
the	O
intended	O
game	O
semantics	O
were	O
.	O
That	O
is	O
,	O
rather	O
than	O
"	O
an	O
attack	O
of	O
zero	O
and	O
a	O
defense	O
of	O
one	O
results	O
in	O
no	O
hit	O
"	O
,	O
instead	O
find	O
a	O
way	O
to	O
make	O
the	O
code	O
more	O
clearly	O
imply	O
"	O
a	O
low	O
kick	O
attack	O
and	O
a	O
low	O
block	O
defense	O
results	O
in	O
no	O
hit	O
"	O
.	O
Make	O
the	O
code	O
reflect	O
the	O
business	O
logic	O
of	O
the	O
game	O
.	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
14534791	O
Escape	O
should	O
be	O
done	O
with	O
\	O
,	O
not	O
/	O
.	O
So	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
work	O
(	O
StringBuilder	B-api_mention
has	O
overloaded	O
methods	O
for	O
char	O
and	O
String	B-api_mention
type	O
)	O
.	O
Question	O
-	O
6094575	O
,	O
answer	O
-	O
6094602	O
Yes	O
,	O
something	O
like	O
:	O
#	O
pre	O
That	O
will	O
only	O
work	O
for	O
a	O
single	O
string	O
parameter	O
of	O
course	O
,	O
but	O
you	O
can	O
modify	O
it	O
pretty	O
easily	O
.	O
Note	O
that	O
the	O
class	O
name	O
has	O
to	O
be	O
a	O
fully	O
-	O
qualified	O
one	O
,	O
i	O
.	O
e	O
.	O
including	O
the	O
namespace	O
.	O
For	O
nested	O
classes	O
,	O
you	O
need	O
to	O
use	O
a	O
dollar	O
(	O
as	O
that	O
'	O
s	O
what	O
the	O
compiler	O
uses	O
)	O
.	O
For	O
example	O
:	O
#	O
pre	O
To	O
obtain	O
the	O
Class	B-api_mention
object	O
for	O
that	O
,	O
you	O
'	O
d	O
need	O
Class	B-api_mention
.	I-api_mention
forName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
16635398	O
Which	O
of	O
the	O
following	O
is	O
better	O
practice	O
in	O
Java	O
8	O
?	O
Java	O
8	O
:	O
joins	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Java	O
7	O
:	O
#	O
pre	O
I	O
have	O
lots	O
of	O
for	O
loops	O
that	O
could	O
be	O
"	O
simplified	O
"	O
with	O
lambdas	O
,	O
but	O
is	O
there	O
really	O
any	O
advantage	O
of	O
using	O
them	O
including	O
performance	O
and	O
readability	O
?	O
EDIT	O
I	O
'	O
ll	O
also	O
extend	O
this	O
question	O
to	O
longer	O
methods	O
-	O
I	O
know	O
that	O
you	O
cant	O
return	O
or	O
break	O
the	O
parent	O
function	O
from	O
a	O
lambda	O
and	O
this	O
should	O
be	O
mentioned	O
to	O
if	O
they	O
are	O
compared	O
,	O
but	O
is	O
there	O
anything	O
else	O
to	O
be	O
considered	O
?	O
Question	O
-	O
18448671	O
,	O
answer	O
-	O
26937769	O
Though	O
one	O
answer	O
is	O
accepted	O
and	O
this	O
is	O
an	O
old	O
one	O
,	O
I	O
thought	O
posting	O
this	O
answer	O
as	O
it	O
does	O
not	O
use	O
Iterator	B-api_mention
#	O
pre	O
Question	O
-	O
22694884	O
,	O
answer	O
-	O
22695031	O
Technically	O
there	O
'	O
s	O
an	O
ugly	O
'	O
workaround	O
'	O
that	O
involves	O
peek	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
an	O
AtomicInteger	B-api_mention
,	O
but	O
really	O
you	O
shouldn	O
'	O
t	O
be	O
using	O
that	O
.	O
What	O
I	O
do	O
in	O
these	O
cases	O
is	O
just	O
collecting	O
it	O
in	O
a	O
list	O
,	O
like	O
this	O
:	O
#	O
pre	O
I	O
am	O
not	O
aware	O
of	O
a	O
way	O
to	O
do	O
this	O
in	O
the	O
API	O
,	O
meanwhile	O
I	O
will	O
work	O
on	O
another	O
example	O
involving	O
a	O
custom	O
element	O
.	O
Update	O
,	O
You	O
should	O
create	O
your	O
own	O
Collector	B-api_mention
for	O
this	O
:	O
#	O
pre	O
What	O
it	O
does	O
is	O
:	O
#	O
li	O
It	O
mimicks	O
the	O
Collectors	B-api_mention
.	I-api_mention
toList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
collector	O
.	O
#	O
li	O
It	O
applies	O
an	O
extra	O
finisher	O
at	O
the	O
end	O
,	O
that	O
throws	O
an	O
exception	O
,	O
or	O
if	O
no	O
exception	O
,	O
returns	O
the	O
first	O
element	O
of	O
the	O
list	O
.	O
Used	O
as	O
:	O
User	B-api_mention
resultUser	O
=	O
users	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
can	O
then	O
customize	O
this	O
singletonCollector	B-api_mention
as	O
much	O
as	O
you	O
want	O
,	O
for	O
example	O
give	O
the	O
exception	O
as	O
argument	O
in	O
the	O
constructor	O
,	O
tweak	O
it	O
to	O
allow	O
two	O
values	O
,	O
and	O
more	O
.	O
New	O
update	O
,	O
I	O
revised	O
my	O
old	O
answer	O
once	O
more	O
for	O
singletonCollector	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
it	O
can	O
actually	O
be	O
obtained	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888447	O
You	O
can	O
use	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
E	O
.	O
g	O
.	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
can	O
also	O
use	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
as	O
mentioned	O
by	O
@	O
fge	O
,	O
which	O
looks	O
like	O
#	O
pre	O
But	O
note	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
whereas	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
IntStream	B-api_mention
providing	O
you	O
pass	O
an	O
array	O
of	O
type	O
int	O
[	O
]	O
.	O
So	O
in	O
a	O
nutshell	O
for	O
primitives	O
type	O
you	O
can	O
observe	O
the	O
difference	O
between	O
2	O
methods	O
E	O
.	O
g	O
.	O
#	O
pre	O
When	O
you	O
pass	O
primitive	O
array	O
to	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
,	O
the	O
following	O
code	O
is	O
invoked	O
#	O
pre	O
and	O
when	O
you	O
pass	O
primitive	O
array	O
to	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
the	O
following	O
code	O
is	O
invoked	O
#	O
pre	O
Hence	O
you	O
get	O
different	O
results	O
.	O
Updated	O
:	O
As	O
mentioned	O
by	O
Stuart	O
Marks	O
comment	O
The	O
subrange	O
overload	O
of	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
is	O
preferable	O
to	O
using	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
the	O
former	O
results	O
in	O
a	O
SIZED	O
stream	O
whereas	O
the	O
latter	O
does	O
not	O
.	O
The	O
reason	O
is	O
that	O
limit	O
(	O
args	O
)	O
doesn	O
'	O
t	O
know	O
whether	O
the	O
size	O
is	O
m	O
or	O
less	O
than	O
m	O
,	O
whereas	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
does	O
range	O
checks	O
and	O
knows	O
the	O
exact	O
size	O
of	O
the	O
stream	O
You	O
can	O
read	O
the	O
source	O
code	O
for	O
stream	O
implementation	O
returned	O
by	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
here	O
,	O
whereas	O
for	O
stream	O
implementation	O
returned	O
by	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
within	O
this	O
method	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16149160	O
HashMap	B-api_mention
does	O
not	O
allow	O
primitive	O
data	O
types	O
as	O
arguments	O
.	O
It	O
can	O
only	O
accept	O
objects	O
so	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
not	O
work	O
.	O
You	O
have	O
to	O
change	O
the	O
declaration	O
to	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
so	O
even	O
when	O
you	O
do	O
the	O
following	O
myMap	O
.	O
put	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
primitive	O
data	O
type	O
is	O
autoboxed	O
to	O
an	O
Integer	O
object	O
.	O
8	O
(	O
args	O
)	O
=	O
=	O
=	O
boxing	O
=	O
=	O
=	O
>	O
8	O
(	O
args	O
)	O
You	O
can	O
read	O
more	O
on	O
autoboxing	O
here	O
#	O
a	O
Question	O
-	O
32356762	O
Is	O
there	O
a	O
good	O
reason	O
that	O
the	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
in	O
the	O
java	O
.	O
utils	O
package	O
returns	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
instead	O
of	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
?	O
Obviously	O
an	O
ArrayList	B-api_mention
is	O
a	O
List	B-api_mention
,	O
but	O
I	O
'	O
m	O
under	O
the	O
impression	O
that	O
it	O
'	O
s	O
generally	O
good	O
practice	O
to	O
return	O
the	O
interface	O
type	O
instead	O
of	O
implementation	O
type	O
.	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908294	O
The	O
Oracle	O
documentation	O
about	O
Enum	O
says	O
(	O
first	O
line	O
)	O
:	O
#	O
blockquote	O
If	O
this	O
is	O
true	O
then	O
,	O
yes	O
,	O
your	O
enum1	O
.	O
name	O
(	O
args	O
)	O
=	O
=	O
enum2	O
.	O
name	O
(	O
args	O
)	O
is	O
guaranteed	O
to	O
be	O
true	O
if	O
the	O
names	O
are	O
the	O
same	O
.	O
Also	O
,	O
in	O
the	O
method	O
name	O
(	O
args	O
)	O
javadoc	O
:	O
#	O
blockquote	O
For	O
example	O
,	O
if	O
you	O
had	O
two	O
enums	O
,	O
Days	O
and	O
MyDays	O
,	O
where	O
SUNDAY	O
is	O
a	O
common	O
value	O
,	O
=	O
=	O
between	O
the	O
enum	O
object	O
values	O
,	O
SUNDAY	O
will	O
return	O
true	O
as	O
you	O
are	O
comparing	O
two	O
strings	O
-	O
see	O
the	O
working	O
example	O
in	O
#	O
a	O
.	O
#	O
pre	O
Question	O
-	O
32714194	O
,	O
answer	O
-	O
32714537	O
While	O
currently	O
most	O
of	O
Java	O
compilers	O
using	O
StringBuilder	B-api_mention
chain	O
,	O
it	O
'	O
s	O
not	O
specified	O
that	O
it	O
should	O
be	O
always	O
in	O
this	O
way	O
.	O
In	O
particular	O
there	O
'	O
s	O
a	O
proposal	O
to	O
change	O
this	O
drastically	O
in	O
Java	O
-	O
9	O
replacing	O
with	O
single	O
invokedynamic	O
call	O
and	O
introduce	O
new	O
metafactory	O
which	O
will	O
generate	O
an	O
appropriate	O
MethodHandle	O
in	O
runtime	O
to	O
perform	O
concatenation	O
.	O
Question	O
-	O
30081520	O
,	O
answer	O
-	O
30081600	O
From	O
Objects	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
return	O
(	O
args	O
)	O
|	O
|	O
(	O
a	O
!	O
=	O
null	O
&	O
&	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
;	O
Very	O
simple	O
,	O
self	O
-	O
explaining	O
and	O
elegant	O
.	O
Question	O
-	O
31696485	O
When	O
using	O
the	O
Java	O
8	O
Optional	B-api_mention
class	O
,	O
there	O
are	O
two	O
ways	O
in	O
which	O
a	O
value	O
can	O
be	O
wrapped	O
in	O
an	O
optional	O
.	O
#	O
pre	O
I	O
understand	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
is	O
the	O
only	O
safe	O
way	O
of	O
using	O
Optional	B-api_mention
,	O
but	O
why	O
does	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
exist	O
at	O
all	O
?	O
Why	O
not	O
just	O
use	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
and	O
be	O
on	O
the	O
safe	O
side	O
at	O
all	O
times	O
?	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923211	O
This	O
advice	O
is	O
a	O
variant	O
of	O
the	O
"	O
be	O
as	O
unspecific	O
as	O
possible	O
regarding	O
inputs	O
and	O
as	O
specific	O
as	O
possible	O
regarding	O
outputs	O
"	O
rule	O
of	O
thumb	O
.	O
Usually	O
if	O
you	O
have	O
a	O
method	O
that	O
takes	O
a	O
plain	O
non	O
-	O
null	O
value	O
,	O
you	O
can	O
map	O
it	O
over	O
the	O
Optional	B-api_mention
,	O
so	O
the	O
plain	O
version	O
is	O
strictly	O
more	O
unspecific	O
regarding	O
inputs	O
.	O
However	O
there	O
are	O
a	O
bunch	O
of	O
possible	O
reasons	O
why	O
you	O
would	O
want	O
to	O
require	O
an	O
Optional	B-api_mention
argument	O
nonetheless	O
:	O
#	O
li	O
you	O
want	O
your	O
function	O
to	O
be	O
used	O
in	O
conjunction	O
with	O
another	O
API	O
that	O
returns	O
an	O
Optional	B-api_mention
#	O
li	O
Your	O
function	O
should	O
return	O
something	O
other	O
than	O
an	O
empty	O
Optional	B-api_mention
if	O
the	O
given	O
value	O
is	O
empty	O
#	O
li	O
You	O
think	O
Optional	B-api_mention
is	O
so	O
awesome	O
that	O
whoever	O
uses	O
your	O
API	O
should	O
be	O
required	O
to	O
learn	O
about	O
it	O
;	O
-	O
)	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
25575077	O
You	O
could	O
override	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
each	O
enum	O
value	O
.	O
Example	O
:	O
#	O
pre	O
Usage	O
:	O
#	O
pre	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23526153	O
Everything	O
is	O
here	O
:	O
#	O
a	O
The	O
answer	O
with	O
"	O
round	O
-	O
tripping	O
"	O
is	O
not	O
exact	O
:	O
when	O
you	O
do	O
LocalDateTime	B-api_mention
ldt	O
=	O
LocalDateTime	B-api_mention
.	I-api_mention
ofInstant	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
if	O
your	O
system	O
timezone	O
is	O
not	O
UTC	O
/	O
GMT	O
,	O
you	O
change	O
the	O
time	O
!	O
Question	O
-	O
20358883	O
Is	O
there	O
a	O
Utility	O
method	O
somewhere	O
that	O
can	O
do	O
this	O
in	O
1	O
line	O
?	O
I	O
can	O
'	O
t	O
find	O
it	O
anywhere	O
in	O
Collections	B-api_mention
,	O
or	O
List	B-api_mention
.	O
#	O
pre	O
I	O
don	O
'	O
t	O
want	O
to	O
re	O
-	O
invent	O
the	O
wheel	O
unless	O
I	O
plan	O
on	O
putting	O
fancy	O
rims	O
on	O
it	O
.	O
Well	O
.	O
.	O
.	O
the	O
type	O
can	O
be	O
T	O
,	O
and	O
not	O
String	B-api_mention
.	O
but	O
you	O
get	O
the	O
point	O
.	O
(	O
with	O
all	O
the	O
null	O
checking	O
,	O
safety	O
checks	O
.	O
.	O
.	O
etc	O
)	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
20810612	O
I	O
'	O
m	O
on	O
Linux	O
and	O
get	O
same	O
result	O
for	O
both	O
of	O
these	O
approaches	O
:	O
#	O
pre	O
Paths	B-api_mention
.	I-api_mention
get	I-api_mention
(	I-api_mention
"	I-api_mention
"	I-api_mention
)	I-api_mention
docs	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
"	I-api_mention
user	I-api_mention
.	I-api_mention
dir	I-api_mention
"	I-api_mention
)	I-api_mention
docs	O
Question	O
-	O
6652687	O
,	O
answer	O
-	O
6652772	O
Use	O
String	B-api_mention
#	I-api_mention
trim	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
or	O
String	B-api_mention
allRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
trim	O
both	O
the	O
end	O
.	O
For	O
left	O
trim	O
:	O
String	B-api_mention
leftRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
right	O
trim	O
:	O
String	B-api_mention
rightRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
15046253	O
It	O
does	O
that	O
because	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
doesn	O
'	O
t	O
capture	O
the	O
newline	O
.	O
you	O
could	O
do	O
like	O
the	O
others	O
proposed	O
by	O
adding	O
an	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
underneath	O
.	O
Alternatively	O
you	O
can	O
do	O
it	O
C	O
#	O
style	O
and	O
parse	O
a	O
nextLine	B-api_mention
to	O
an	O
integer	O
like	O
so	O
:	O
int	O
number	O
=	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Doing	O
this	O
works	O
just	O
as	O
well	O
,	O
and	O
it	O
saves	O
you	O
a	O
line	O
of	O
code	O
.	O
Question	O
-	O
5694385	O
,	O
answer	O
-	O
5694464	O
Rather	O
than	O
spoon	O
-	O
feed	O
you	O
code	O
,	O
here	O
'	O
s	O
how	O
to	O
look	O
in	O
the	O
documentation	O
.	O
First	O
,	O
you	O
'	O
re	O
dealing	O
with	O
IO	O
,	O
so	O
look	O
in	O
the	O
java	O
.	O
io	O
package	O
.	O
There	O
are	O
two	O
classes	O
that	O
look	O
interesting	O
:	O
FileFilter	B-api_mention
and	O
FileNameFilter	B-api_mention
.	O
When	O
I	O
clicked	O
on	O
the	O
first	O
,	O
it	O
showed	O
me	O
that	O
there	O
was	O
a	O
a	O
listFiles	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
the	O
File	B-api_mention
class	O
.	O
And	O
the	O
documentation	O
for	O
that	O
method	O
says	O
:	O
#	O
blockquote	O
Scrolling	O
up	O
in	O
the	O
File	O
JavaDoc	O
,	O
I	O
see	O
the	O
constructors	O
.	O
And	O
that	O
'	O
s	O
really	O
all	O
I	O
need	O
to	O
be	O
able	O
to	O
create	O
a	O
File	O
instance	O
and	O
call	O
listFiles	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
it	O
.	O
Scrolling	O
still	O
further	O
,	O
I	O
can	O
see	O
some	O
information	O
about	O
how	O
files	O
are	O
named	O
in	O
different	O
operating	O
systems	O
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28584954	O
Because	O
thats	O
the	O
standard	O
.	O
Infinity	O
represents	O
a	O
number	O
greater	O
than	O
or	O
less	O
than	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
/	O
-	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
NaN	O
represents	O
the	O
outcome	O
of	O
an	O
operation	O
that	O
didn	O
'	O
t	O
make	O
sense	O
.	O
That	O
is	O
,	O
the	O
operation	O
didn	O
'	O
t	O
possibly	O
come	O
out	O
with	O
a	O
number	O
.	O
I	O
would	O
guess	O
the	O
logic	O
is	O
once	O
a	O
number	O
gets	O
big	O
enough	O
(	O
infinity	O
)	O
and	O
because	O
of	O
the	O
limitation	O
of	O
floating	O
point	O
numbers	O
,	O
adding	O
numbers	O
to	O
it	O
won	O
'	O
t	O
change	O
the	O
outcome	O
,	O
so	O
its	O
'	O
like	O
'	O
infinity	O
.	O
So	O
if	O
you	O
want	O
to	O
compare	O
to	O
really	O
big	O
numbers	O
,	O
at	O
some	O
point	O
you	O
might	O
just	O
say	O
those	O
two	O
big	O
numbers	O
are	O
close	O
enough	O
for	O
all	O
intents	O
and	O
purposes	O
.	O
But	O
if	O
you	O
want	O
to	O
compare	O
two	O
things	O
that	O
both	O
aren	O
'	O
t	O
numbers	O
,	O
you	O
can	O
'	O
t	O
compare	O
them	O
so	O
its	O
false	O
.	O
At	O
least	O
you	O
couldn	O
'	O
t	O
compare	O
them	O
as	O
a	O
primitive	O
.	O
Question	O
-	O
27908213	O
Are	O
enum	O
names	O
interned	O
in	O
Java	O
?	O
I	O
.	O
e	O
.	O
is	O
it	O
guaranteed	O
that	O
enum1	O
.	O
name	O
(	O
args	O
)	O
=	O
=	O
enum2	O
.	O
name	O
(	O
args	O
)	O
in	O
case	O
of	O
the	O
same	O
name	O
?	O
And	O
is	O
it	O
safe	O
to	O
compare	O
enum	O
.	O
name	O
(	O
args	O
)	O
to	O
a	O
String	B-api_mention
that	O
is	O
guaranteed	O
to	O
be	O
interned	O
.	O
Question	O
-	O
21242110	O
,	O
answer	O
-	O
27378709	O
Better	O
way	O
is	O
:	O
#	O
pre	O
Advantages	O
of	O
this	O
version	O
:	O
#	O
li	O
works	O
regardless	O
the	O
input	O
is	O
an	O
instance	O
of	O
java	O
.	O
util	O
.	O
Date	O
or	O
it	O
'	O
s	O
subclass	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
(	O
unlike	O
@	O
JodaStephen	O
'	O
s	O
way	O
)	O
.	O
This	O
is	O
common	O
with	O
JDBC	O
originated	O
data	O
.	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
toInstant	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
throws	O
an	O
exception	O
.	O
#	O
li	O
it	O
'	O
s	O
the	O
same	O
for	O
JDK8	O
and	O
JDK7	O
with	O
JSR	O
-	O
310	O
backport	O
I	O
personally	O
use	O
an	O
utility	O
class	O
(	O
but	O
this	O
is	O
not	O
backport	O
-	O
compatible	O
)	O
:	O
#	O
pre	O
The	O
asLocalDate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
here	O
is	O
null	O
-	O
safe	O
,	O
uses	O
toLocalDate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
if	O
input	O
is	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
(	O
it	O
may	O
be	O
overriden	O
by	O
the	O
JDBC	O
driver	O
to	O
avoid	O
timezone	O
problems	O
or	O
unnecessary	O
calculations	O
)	O
,	O
otherwise	O
uses	O
the	O
abovementioned	O
method	O
.	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262126	O
The	O
JLS	O
specify	O
that	O
#	O
blockquote	O
Now	O
let	O
'	O
s	O
see	O
that	O
in	O
detail	O
,	O
Since	O
your	O
takeBiConsumer	O
method	O
is	O
of	O
void	O
type	O
,	O
the	O
lambda	O
receiving	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
interpret	O
it	O
as	O
a	O
block	O
like	O
#	O
pre	O
which	O
is	O
valid	O
in	O
a	O
void	O
,	O
hence	O
the	O
first	O
case	O
compile	O
.	O
However	O
,	O
in	O
the	O
case	O
where	O
the	O
lambda	O
is	O
-	O
>	O
StringLiteral	O
,	O
a	O
block	O
such	O
as	O
#	O
pre	O
is	O
not	O
valid	O
syntax	O
in	O
java	O
.	O
Therefore	O
the	O
only	O
thing	O
to	O
do	O
with	O
"	O
hi	O
"	O
is	O
to	O
try	O
and	O
return	O
it	O
.	O
#	O
pre	O
which	O
is	O
not	O
valid	O
in	O
a	O
void	O
and	O
explain	O
the	O
error	O
message	O
#	O
pre	O
For	O
a	O
better	O
understanding	O
,	O
note	O
that	O
if	O
you	O
change	O
the	O
type	O
of	O
takeBiConsumer	O
to	O
a	O
String	B-api_mention
,	O
-	O
>	O
StringLiteral	O
will	O
be	O
valid	O
as	O
it	O
will	O
simply	O
try	O
to	O
directly	O
return	O
the	O
string	O
.	O
Note	O
that	O
at	O
first	O
I	O
tought	O
the	O
error	O
was	O
caused	O
by	O
the	O
lambda	O
being	O
in	O
a	O
wrong	O
invocation	O
context	O
,	O
so	O
I	O
'	O
ll	O
share	O
this	O
possibility	O
with	O
the	O
community	O
:	O
JLS	O
15	O
.	O
27	O
#	O
blockquote	O
However	O
in	O
our	O
case	O
,	O
we	O
are	O
in	O
an	O
invocation	O
context	O
which	O
is	O
correct	O
.	O
Question	O
-	O
19757300	O
,	O
answer	O
-	O
35512247	O
Keeping	O
this	O
issue	O
in	O
mind	O
I	O
developed	O
a	O
small	O
library	O
for	O
dealing	O
with	O
checked	O
exceptions	O
and	O
lambdas	O
.	O
Custom	O
adapters	O
allow	O
you	O
to	O
integrate	O
with	O
existing	O
functional	O
types	O
:	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
with	O
a	O
static	O
import	O
#	O
a	O
Question	O
-	O
6802483	O
,	O
answer	O
-	O
6802523	O
There	O
is	O
no	O
direct	O
way	O
to	O
do	O
this	O
-	O
Java	O
has	O
no	O
Map	B-api_mention
literals	O
(	O
yet	O
-	O
I	O
think	O
they	O
were	O
proposed	O
for	O
Java	O
8	O
)	O
.	O
Some	O
people	O
like	O
this	O
:	O
#	O
pre	O
This	O
creates	O
an	O
anonymous	O
subclass	O
of	O
HashMap	B-api_mention
,	O
whose	O
instance	O
initializer	O
puts	O
these	O
values	O
.	O
(	O
By	O
the	O
way	O
,	O
a	O
map	O
can	O
'	O
t	O
contain	O
twice	O
the	O
same	O
value	O
,	O
your	O
second	O
put	O
will	O
overwrite	O
the	O
first	O
one	O
.	O
I	O
'	O
ll	O
use	O
different	O
values	O
for	O
the	O
next	O
examples	O
.	O
)	O
The	O
normal	O
way	O
would	O
be	O
this	O
(	O
for	O
a	O
local	O
variable	O
)	O
:	O
#	O
pre	O
If	O
your	O
test	O
map	O
is	O
an	O
instance	O
variable	O
,	O
put	O
the	O
initialization	O
in	O
a	O
constructor	O
or	O
instance	O
initializer	O
:	O
#	O
pre	O
If	O
your	O
test	O
map	O
is	O
a	O
class	O
variable	O
,	O
put	O
the	O
initialization	O
in	O
a	O
static	O
initializer	O
:	O
#	O
pre	O
If	O
you	O
want	O
your	O
map	O
to	O
never	O
change	O
,	O
you	O
should	O
after	O
the	O
initialization	O
wrap	O
your	O
map	O
by	O
Collections	B-api_mention
.	I-api_mention
unmodifiableMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
can	O
do	O
this	O
in	O
a	O
static	O
initializer	O
too	O
:	O
#	O
pre	O
(	O
I	O
'	O
m	O
not	O
sure	O
if	O
you	O
can	O
now	O
make	O
test	O
final	O
.	O
.	O
.	O
try	O
it	O
out	O
and	O
report	O
here	O
.	O
)	O
Question	O
-	O
5778658	O
,	O
answer	O
-	O
5778863	O
An	O
OutputStream	B-api_mention
is	O
one	O
where	O
you	O
write	O
data	O
to	O
.	O
If	O
some	O
module	O
exposes	O
an	O
OutputStream	B-api_mention
,	O
the	O
expectation	O
is	O
that	O
there	O
is	O
something	O
at	O
the	O
other	O
end	O
that	O
is	O
reading	O
.	O
Something	O
that	O
exposes	O
an	O
InputStream	B-api_mention
on	O
the	O
other	O
hand	O
is	O
indicating	O
that	O
you	O
will	O
need	O
to	O
listen	O
to	O
this	O
stream	O
,	O
and	O
there	O
will	O
be	O
data	O
that	O
you	O
can	O
read	O
.	O
So	O
it	O
is	O
possible	O
to	O
connect	O
an	O
InputStream	B-api_mention
to	O
an	O
OutputStream	B-api_mention
InputStream	I-api_mention
-	O
-	O
-	O
-	O
read	O
-	O
-	O
-	O
>	O
intermediateBytes	O
[	O
n	O
]	O
-	O
-	O
-	O
-	O
write	O
-	O
-	O
-	O
-	O
>	O
OutputStream	B-api_mention
As	O
someone	O
metioned	O
,	O
this	O
is	O
what	O
the	O
copy	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
from	O
IOUtils	B-api_mention
lets	O
you	O
do	O
.	O
It	O
does	O
not	O
make	O
sense	O
to	O
go	O
the	O
other	O
way	O
.	O
.	O
.	O
hopefully	O
this	O
makes	O
some	O
sense	O
UPDATE	O
:	O
Of	O
course	O
the	O
more	O
I	O
think	O
of	O
this	O
,	O
the	O
more	O
I	O
can	O
see	O
how	O
this	O
actually	O
would	O
be	O
a	O
requirement	O
.	O
I	O
know	O
some	O
of	O
the	O
comments	O
mentioned	O
Piped	O
input	O
/	O
ouput	O
streams	O
,	O
but	O
there	O
is	O
another	O
possibility	O
.	O
If	O
the	O
output	O
stream	O
that	O
is	O
exposed	O
is	O
a	O
ByteArrayOutputStream	B-api_mention
,	O
then	O
you	O
can	O
always	O
get	O
the	O
full	O
contents	O
by	O
calling	O
the	O
toByteArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Then	O
you	O
can	O
create	O
an	O
input	O
stream	O
wrapper	O
by	O
using	O
the	O
ByteArrayInputStream	B-api_mention
sub	O
-	O
class	O
.	O
These	O
two	O
are	O
pseudo	O
-	O
streams	O
,	O
they	O
both	O
basically	O
just	O
wrap	O
an	O
array	O
of	O
bytes	O
.	O
Using	O
the	O
streams	O
this	O
way	O
,	O
therefore	O
,	O
is	O
technically	O
possible	O
,	O
but	O
to	O
me	O
it	O
is	O
still	O
very	O
strange	O
.	O
.	O
.	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
24907860	O
Instead	O
of	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
use	O
input	O
.	B-api_mention
next	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
that	O
should	O
solve	O
the	O
problem	O
.	O
Modified	O
code	O
:	O
#	O
pre	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
36875991	O
Basically	O
,	O
=	O
=	O
compares	O
if	O
two	O
objects	O
have	O
the	O
same	O
reference	O
on	O
the	O
heap	O
,	O
so	O
unless	O
two	O
references	O
are	O
linked	O
to	O
the	O
same	O
object	O
,	O
this	O
comparison	O
will	O
be	O
false	O
.	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
method	O
inherited	O
from	O
Object	B-api_mention
class	O
.	O
This	O
method	O
by	O
default	O
compares	O
if	O
two	O
objects	O
have	O
the	O
same	O
referece	O
.	O
It	O
means	O
:	O
object1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
<	O
=	O
>	O
object1	O
=	O
=	O
object2	O
However	O
,	O
if	O
you	O
want	O
to	O
establish	O
equality	O
between	O
two	O
objects	O
of	O
the	O
same	O
class	O
you	O
should	O
override	O
this	O
method	O
.	O
It	O
is	O
also	O
very	O
important	O
to	O
override	O
the	O
method	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
you	O
have	O
overriden	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Implement	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
establishing	O
equality	O
is	O
part	O
of	O
the	O
Java	O
Object	B-api_mention
Contract	O
.	O
If	O
you	O
are	O
working	O
with	O
collections	O
,	O
and	O
you	O
haven	O
'	O
t	O
implemented	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
Strange	O
Bad	O
Things	O
could	O
happen	O
:	O
#	O
pre	O
null	O
will	O
be	O
printed	O
after	O
executing	O
the	O
previous	O
code	O
if	O
you	O
haven	O
'	O
t	O
implemented	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32370677	O
There	O
is	O
a	O
small	O
overhead	O
in	O
calling	O
methods	O
var	O
an	O
interface	O
rather	O
than	O
directly	O
on	O
an	O
object	O
.	O
This	O
overhead	O
is	O
often	O
no	O
more	O
than	O
1	O
or	O
2	O
processor	O
instructions	O
.	O
The	O
overhead	O
of	O
calling	O
a	O
method	O
is	O
even	O
lower	O
if	O
the	O
JIT	O
knows	O
that	O
the	O
method	O
is	O
final	O
.	O
This	O
is	O
not	O
measurable	O
for	O
most	O
code	O
you	O
and	O
me	O
right	O
,	O
but	O
for	O
the	O
low	O
level	O
methods	O
in	O
java	O
.	O
utils	O
may	O
be	O
used	O
in	O
some	O
code	O
where	O
it	O
is	O
an	O
issue	O
.	O
Also	O
as	O
has	O
been	O
pointed	O
out	O
in	O
other	O
answers	O
,	O
the	O
concrete	O
type	O
of	O
the	O
object	O
that	O
is	O
return	O
(	O
even	O
when	O
hidden	O
behind	O
an	O
interface	O
)	O
effects	O
the	O
performance	O
of	O
code	O
that	O
uses	O
it	O
.	O
This	O
change	O
in	O
performance	O
can	O
be	O
very	O
great	O
,	O
so	O
such	O
an	O
extent	O
that	O
the	O
calling	O
software	O
fails	O
to	O
work	O
.	O
Clearly	O
the	O
authors	O
of	O
java	O
.	O
utils	O
have	O
no	O
way	O
to	O
know	O
what	O
all	O
the	O
software	O
that	O
calls	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
does	O
with	O
the	O
result	O
and	O
no	O
way	O
to	O
re	O
-	O
test	O
this	O
software	O
if	O
they	O
change	O
the	O
implantation	O
of	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Therefore	O
they	O
are	O
not	O
going	O
to	O
change	O
the	O
implantation	O
of	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
return	O
a	O
different	O
type	O
of	O
List	B-api_mention
,	O
even	O
if	O
the	O
type	O
system	O
allowed	O
it	O
!	O
When	O
writing	O
your	O
own	O
software	O
,	O
you	O
(	O
hopefully	O
)	O
have	O
automated	O
test	O
that	O
cover	O
all	O
your	O
code	O
and	O
a	O
good	O
understand	O
of	O
how	O
your	O
code	O
interrelates	O
include	O
know	O
where	O
performance	O
is	O
an	O
issue	O
.	O
Being	O
able	O
to	O
make	O
a	O
change	O
to	O
a	O
method	O
,	O
without	O
having	O
to	O
change	O
the	O
callers	O
is	O
of	O
great	O
value	O
while	O
the	O
design	O
of	O
the	O
software	O
is	O
changing	O
.	O
Therefore	O
the	O
two	O
set	O
of	O
trade	O
offs	O
are	O
very	O
different	O
.	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271460	O
The	O
"	O
$	O
1	O
"	O
is	O
not	O
"	O
useless	O
non	O
-	O
sense	O
"	O
.	O
If	O
your	O
class	O
is	O
anonymous	O
,	O
a	O
number	O
is	O
appended	O
.	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
class	O
itself	O
,	O
but	O
its	O
declaring	O
class	O
,	O
then	O
you	O
can	O
use	O
getEnclosingClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
For	O
example	O
:	O
#	O
pre	O
You	O
can	O
move	O
that	O
in	O
some	O
static	O
utility	O
method	O
.	O
But	O
note	O
that	O
this	O
is	O
not	O
the	O
current	O
class	O
name	O
.	O
The	O
anonymous	O
class	O
is	O
different	O
class	O
than	O
its	O
enclosing	O
class	O
.	O
The	O
case	O
is	O
similar	O
for	O
inner	O
classes	O
.	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32863263	O
Don	O
'	O
t	O
feel	O
like	O
you	O
have	O
to	O
do	O
everything	O
in	O
/	O
with	O
the	O
stream	O
.	O
I	O
would	O
just	O
do	O
:	O
#	O
pre	O
As	O
long	O
as	O
you	O
don	O
'	O
t	O
parallelise	O
the	O
stream	O
this	O
will	O
work	O
and	O
it	O
avoids	O
potentially	O
expensive	O
and	O
/	O
or	O
problematic	O
(	O
in	O
the	O
case	O
of	O
duplicates	O
)	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
indexOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
operations	O
.	O
(	O
You	O
cannot	O
use	O
a	O
regular	O
int	O
variable	O
in	O
place	O
of	O
the	O
AtomicInteger	O
because	O
variables	O
used	O
from	O
outside	O
a	O
lambda	O
expression	O
must	O
be	O
effectively	O
final	O
.	O
Note	O
that	O
when	O
uncontested	O
(	O
as	O
in	O
this	O
case	O
)	O
,	O
AtomicInteger	O
is	O
very	O
fast	O
and	O
won	O
'	O
t	O
pose	O
a	O
performance	O
problem	O
.	O
But	O
if	O
it	O
worries	O
you	O
you	O
can	O
use	O
a	O
non	O
-	O
thread	O
-	O
safe	O
counter	O
.	O
)	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32820940	O
An	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
function	O
int	O
-	O
>	O
R	O
.	O
An	O
IntUnaryOperator	O
is	O
a	O
function	O
int	O
-	O
>	O
int	O
.	O
Thus	O
an	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
function	O
that	O
takes	O
an	O
int	O
as	O
parameter	O
and	O
return	O
a	O
function	O
that	O
takes	O
an	O
int	O
as	O
parameter	O
and	O
return	O
an	O
int	O
.	O
#	O
pre	O
Maybe	O
it	O
is	O
more	O
clear	O
if	O
you	O
use	O
anonymous	O
classes	O
to	O
"	O
decompose	O
"	O
the	O
lambda	O
:	O
#	O
pre	O
Question	O
-	O
12732422	O
I	O
'	O
m	O
trying	O
to	O
add	O
header	O
for	O
my	O
request	O
using	O
HttpUrlConnection	B-api_mention
but	O
the	O
method	O
setRequestProperty	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
doesn	O
'	O
t	O
seem	O
working	O
.	O
The	O
server	O
side	O
doesn	O
'	O
t	O
receive	O
any	O
request	O
with	O
my	O
header	O
.	O
Can	O
anyone	O
help	O
me	O
?	O
Thanks	O
in	O
advance	O
.	O
#	O
pre	O
Question	O
-	O
13195797	O
,	O
answer	O
-	O
13195890	O
FileUtils	B-api_mention
.	I-api_mention
cleanDirectory	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
There	O
is	O
this	O
method	O
available	O
in	O
the	O
same	O
file	O
.	O
This	O
will	O
also	O
recursively	O
deletes	O
all	O
sub	O
-	O
folders	O
and	O
files	O
under	O
them	O
.	O
Docs	O
:	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
commons	I-api_mention
.	I-api_mention
io	I-api_mention
.	I-api_mention
FileUtils	I-api_mention
.	I-api_mention
cleanDirectory	I-api_mention
Question	O
-	O
31993377	O
Question	O
How	O
is	O
it	O
that	O
for	O
a	O
scanner	O
object	O
the	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
true	O
while	O
the	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
false	O
?	O
Note	O
:	O
Based	O
on	O
the	O
input	O
file	O
,	O
the	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
returning	O
the	O
result	O
as	O
expected	O
;	O
the	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
seem	O
to	O
be	O
returning	O
the	O
correct	O
result	O
.	O
Code	O
Here	O
'	O
s	O
the	O
code	O
I	O
'	O
m	O
running	O
that	O
'	O
s	O
creating	O
the	O
results	O
below	O
:	O
#	O
pre	O
Input	O
File	O
The	O
following	O
is	O
the	O
actual	O
content	O
of	O
the	O
file	O
that	O
I	O
'	O
m	O
passing	O
to	O
this	O
scanner	O
:	O
#	O
pre	O
Result	O
The	O
following	O
is	O
the	O
end	O
of	O
what	O
'	O
s	O
printed	O
in	O
the	O
console	O
when	O
I	O
run	O
my	O
code	O
,	O
and	O
includes	O
the	O
portion	O
I	O
can	O
'	O
t	O
make	O
sense	O
of	O
:	O
#	O
pre	O
Question	O
-	O
29922296	O
I	O
'	O
m	O
wondering	O
what	O
the	O
best	O
way	O
is	O
in	O
Java	O
8	O
to	O
work	O
with	O
all	O
the	O
values	O
of	O
an	O
enum	O
.	O
Specifically	O
when	O
you	O
need	O
to	O
get	O
all	O
the	O
values	O
and	O
add	O
it	O
to	O
somewhere	O
,	O
for	O
example	O
,	O
supposing	O
that	O
we	O
have	O
the	O
following	O
enum	O
:	O
#	O
pre	O
I	O
could	O
of	O
course	O
do	O
the	O
following	O
:	O
#	O
pre	O
But	O
,	O
I	O
could	O
also	O
add	O
the	O
following	O
method	O
to	O
the	O
enum	O
definition	O
:	O
#	O
pre	O
And	O
then	O
replace	O
the	O
for	O
from	O
above	O
with	O
:	O
Letter	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Is	O
this	O
approach	O
OK	O
or	O
does	O
it	O
have	O
some	O
fault	O
in	O
design	O
or	O
performance	O
?	O
Moreover	O
,	O
why	O
don	O
'	O
t	O
enums	O
have	O
a	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
?	O
Question	O
-	O
32676771	O
,	O
answer	O
-	O
32677400	O
Despite	O
of	O
the	O
fact	O
that	O
there	O
is	O
no	O
AtomicDouble	O
or	O
AtomicDoubleArray	O
in	O
java	O
,	O
you	O
can	O
easily	O
create	O
your	O
own	O
based	O
on	O
AtomicLongArray	O
.	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
I	O
use	O
Double	B-api_mention
.	I-api_mention
doubleToLongBits	I-api_mention
and	O
Double	B-api_mention
.	I-api_mention
longBitsToDouble	I-api_mention
to	O
store	O
Doubles	O
as	O
Longs	O
in	O
AtomicLongArray	O
.	O
They	O
both	O
have	O
the	O
same	O
size	O
in	O
bits	O
,	O
so	O
precision	O
is	O
not	O
lost	O
(	O
except	O
for	O
-	O
NaN	O
,	O
but	O
I	O
don	O
'	O
t	O
think	O
it	O
is	O
important	O
)	O
.	O
In	O
Java	O
8	O
the	O
implementation	O
of	O
add	O
can	O
be	O
even	O
easier	O
,	O
as	O
you	O
can	O
use	O
accumulateAndGet	O
method	O
of	O
AtomicLongArray	O
that	O
was	O
added	O
in	O
java	O
1	O
.	O
8	O
.	O
Upd	O
:	O
It	O
appears	O
that	O
I	O
virtually	O
re	O
-	O
implemented	O
guava	O
'	O
s	O
AtomicDoubleArray	O
.	O
Question	O
-	O
20331163	O
I	O
have	O
a	O
string	O
"	O
11	O
/	O
15	O
/	O
2013	O
08	O
:	O
00	O
:	O
00	O
"	O
,	O
I	O
want	O
to	O
format	O
it	O
to	O
"	O
11	O
/	O
15	O
/	O
2013	O
"	O
,	O
what	O
is	O
the	O
correct	O
DateTimeFormatter	B-api_mention
pattern	O
?	O
I	O
'	O
ve	O
tried	O
many	O
and	O
googled	O
and	O
still	O
unable	O
to	O
find	O
the	O
correct	O
pattern	O
.	O
edit	O
:	O
I	O
am	O
looking	O
for	O
Joda	O
-	O
Time	O
DateTimeFormatter	B-api_mention
,	O
not	O
Java	O
'	O
s	O
SimpleDateFormat	B-api_mention
.	O
.	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
25735202	O
You	O
need	O
to	O
first	O
create	O
a	O
URI	O
like	O
:	O
#	O
pre	O
Then	O
convert	O
that	O
Uri	O
to	O
ASCII	O
string	O
:	O
urlStr	O
=	O
uri	B-api_mention
.	I-api_mention
toASCIIString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Now	O
your	O
url	O
string	O
is	O
completely	O
encoded	O
first	O
we	O
did	O
simple	O
url	O
encoding	O
and	O
then	O
we	O
converted	O
it	O
to	O
ASCII	O
String	O
to	O
make	O
sure	O
no	O
character	O
outside	O
US	O
-	O
ASCII	O
are	O
remaining	O
in	O
string	O
.	O
This	O
is	O
exactly	O
how	O
browsers	O
do	O
.	O
Question	O
-	O
7438612	O
,	O
answer	O
-	O
7438613	O
Replace	O
will	O
replace	O
all	O
instances	O
of	O
a	O
letter	O
.	O
All	O
you	O
need	O
to	O
do	O
is	O
use	O
substring	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
9324933	O
I	O
looked	O
at	O
the	O
default	O
Zip	B-api_mention
library	O
that	O
comes	O
with	O
the	O
JDK	O
and	O
the	O
Apache	O
compression	O
libs	O
and	O
I	O
am	O
unhappy	O
with	O
them	O
for	O
3	O
reasons	O
:	O
#	O
li	O
They	O
are	O
bloated	O
and	O
have	O
bad	O
API	O
design	O
.	O
I	O
have	O
to	O
write	O
50	O
lines	O
of	O
boiler	O
plate	O
byte	O
array	O
output	O
,	O
zip	O
input	O
,	O
file	O
out	O
streams	O
and	O
close	O
relevant	O
streams	O
and	O
catch	O
exceptions	O
and	O
move	O
byte	O
buffers	O
on	O
my	O
own	O
?	O
Why	O
can	O
'	O
t	O
I	O
have	O
a	O
simple	O
API	O
that	O
looks	O
like	O
this	O
Zipper	B-api_mention
.	I-api_mention
unzip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Zipper	B-api_mention
.	I-api_mention
zip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
that	O
just	O
works	O
?	O
#	O
li	O
It	O
seems	O
zipping	O
unzipping	O
destroys	O
file	O
meta	O
-	O
data	O
and	O
password	O
handling	O
is	O
broken	O
.	O
#	O
li	O
Also	O
,	O
all	O
the	O
libraries	O
I	O
tried	O
were	O
2	O
-	O
3x	O
slow	O
compared	O
to	O
the	O
command	O
line	O
zip	O
tools	O
I	O
get	O
with	O
UNIX	O
?	O
For	O
me	O
(	O
2	O
)	O
and	O
(	O
3	O
)	O
are	O
minor	O
points	O
but	O
I	O
really	O
want	O
a	O
good	O
tested	O
library	O
with	O
a	O
one	O
-	O
line	O
interface	O
.	O
Question	O
-	O
14636178	O
I	O
am	O
trying	O
to	O
use	O
the	O
org	B-api_mention
.	I-api_mention
springframework	I-api_mention
.	I-api_mention
orm	I-api_mention
.	I-api_mention
jdo	I-api_mention
.	I-api_mention
TransactionAwarePersistenceManagerFactoryProxy	I-api_mention
in	O
my	O
Spring	O
project	O
,	O
but	O
I	O
am	O
not	O
sure	O
how	O
to	O
use	O
it	O
or	O
whether	O
it	O
'	O
s	O
exactly	O
what	O
I	O
am	O
looking	O
for	O
.	O
I	O
realize	O
it	O
can	O
help	O
make	O
my	O
DAOs	O
work	O
with	O
a	O
plain	O
JDO	O
PersistenceManagerFactory	B-api_mention
.	O
Another	O
question	O
is	O
:	O
what	O
happens	O
if	O
the	O
proxy	O
doesn	O
'	O
t	O
get	O
made	O
properly	O
?	O
Can	O
I	O
still	O
use	O
it	O
to	O
access	O
my	O
factory	O
to	O
create	O
a	O
transaction	O
aware	O
persistence	O
manager	O
?	O
If	O
the	O
object	O
managed	O
by	O
the	O
factory	O
is	O
a	O
singleton	O
,	O
does	O
this	O
change	O
things	O
?	O
Why	O
not	O
just	O
access	O
the	O
PersistenceManagerFactory	B-api_mention
directly	O
?	O
Perhaps	O
PersistenceManagerFactoryUtils	B-api_mention
.	I-api_mention
getPersistenceManager	I-api_mention
would	O
be	O
more	O
suited	O
to	O
my	O
needs	O
?	O
Can	O
getObject	B-api_mention
return	O
null	O
?	O
Question	O
-	O
31419029	O
,	O
answer	O
-	O
31419047	O
An	O
empty	O
HashMap	B-api_mention
object	O
is	O
much	O
smaller	O
than	O
an	O
array	O
of	O
2000	O
Object	B-api_mention
references	O
.	O
Even	O
though	O
you	O
pass	O
2000	O
to	O
the	O
initialCapacity	O
parameter	O
of	O
the	O
HashMap	B-api_mention
constructor	O
,	O
it	O
'	O
s	O
not	O
actually	O
creating	O
2000	O
spaces	O
for	O
objects	O
yet	O
.	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509655	O
As	O
you	O
said	O
internally	O
the	O
last	O
concatenation	O
is	O
done	O
to	O
something	O
similar	O
to	O
String	B-api_mention
e	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
the	O
implementation	O
of	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
StringBuilder	B-api_mention
creates	O
a	O
new	O
String	B-api_mention
.	O
Here	O
is	O
the	O
implementation	O
.	O
#	O
pre	O
Comparing	O
strings	O
using	O
=	O
=	O
instead	O
of	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
true	O
only	O
if	O
both	O
strings	O
are	O
the	O
same	O
.	O
In	O
this	O
case	O
they	O
are	O
not	O
the	O
same	O
because	O
the	O
second	O
string	O
is	O
created	O
as	O
a	O
new	O
object	O
of	O
type	O
String	B-api_mention
.	O
The	O
other	O
concatenations	O
are	O
performed	O
directly	O
by	O
the	O
compiler	O
so	O
no	O
new	O
String	B-api_mention
is	O
created	O
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31760309	O
Until	O
the	O
language	O
specification	O
mentions	O
it	O
,	O
it	O
is	O
not	O
guaranteed	O
that	O
autoboxing	O
is	O
equivalent	O
to	O
a	O
call	O
to	O
the	O
static	O
valueOf	B-api_mention
methods	O
.	O
It	O
is	O
an	O
implementation	O
aspect	O
,	O
not	O
part	O
of	O
the	O
boxing	O
conversion	O
specification	O
.	O
An	O
implementation	O
is	O
theoretically	O
free	O
to	O
use	O
another	O
mechanism	O
as	O
long	O
as	O
it	O
conforms	O
to	O
the	O
rule	O
you	O
mentioned	O
from	O
the	O
JLS	O
.	O
In	O
practice	O
,	O
there	O
are	O
many	O
Sun	O
JDK	O
bug	O
reports	O
(	O
e	O
.	O
g	O
.	O
JDK	O
-	O
4990346	O
and	O
JDK	O
-	O
6628737	O
)	O
that	O
clearly	O
imply	O
that	O
when	O
autoboxing	O
was	O
introduced	O
in	O
Java	O
5	O
,	O
the	O
intention	O
was	O
having	O
the	O
compiler	O
to	O
rely	O
on	O
valueOf	B-api_mention
as	O
stated	O
in	O
JDK	O
-	O
6628737	O
:	O
#	O
blockquote	O
But	O
that	O
'	O
s	O
only	O
for	O
javac	O
,	O
not	O
necessarily	O
all	O
compilers	O
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28590286	O
Since	O
Double	B-api_mention
.	I-api_mention
Nan	I-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
Double	I-api_mention
.	I-api_mention
NaN	I-api_mention
)	I-api_mention
was	O
mentioned	O
:	O
It	O
'	O
s	O
one	O
thing	O
what	O
should	O
happen	O
when	O
you	O
perform	O
arithmetic	O
and	O
compare	O
numbers	O
,	O
it	O
'	O
s	O
a	O
totally	O
different	O
thing	O
when	O
you	O
consider	O
how	O
objects	O
should	O
behave	O
.	O
Two	O
typical	O
problem	O
cases	O
are	O
:	O
Sorting	O
an	O
array	O
of	O
numbers	O
,	O
and	O
using	O
hash	O
values	O
to	O
implement	O
dictionaries	O
,	O
sets	O
,	O
and	O
so	O
on	O
.	O
There	O
are	O
two	O
exceptional	O
cases	O
where	O
the	O
normal	O
ordering	O
with	O
<	O
,	O
=	O
and	O
>	O
doesn	O
'	O
t	O
apply	O
:	O
One	O
case	O
is	O
that	O
+	O
0	O
=	O
-	O
0	O
and	O
the	O
other	O
is	O
that	O
NaN	O
≠	O
NaN	O
,	O
and	O
x	O
<	O
NaN	O
,	O
x	O
>	O
NaN	O
,	O
x	O
=	O
NaN	O
will	O
always	O
be	O
false	O
whatever	O
x	O
is	O
.	O
Sorting	O
algorithms	O
can	O
get	O
into	O
trouble	O
with	O
this	O
.	O
A	O
sorting	O
algorithm	O
may	O
assume	O
that	O
x	O
=	O
x	O
is	O
always	O
true	O
.	O
So	O
if	O
I	O
know	O
that	O
x	O
is	O
stored	O
in	O
an	O
array	O
and	O
look	O
for	O
it	O
,	O
I	O
might	O
not	O
do	O
any	O
bounds	O
check	O
because	O
the	O
search	O
for	O
it	O
must	O
find	O
something	O
.	O
Not	O
if	O
x	O
is	O
NaN	O
.	O
A	O
sorting	O
algorithm	O
may	O
assume	O
that	O
exactly	O
one	O
of	O
a	O
<	O
b	O
and	O
a	O
>	O
=	O
b	O
must	O
be	O
true	O
.	O
Not	O
if	O
one	O
is	O
NaN	O
.	O
So	O
a	O
naive	O
sorting	O
algorithm	O
may	O
crash	O
when	O
NaNs	O
are	O
present	O
.	O
You	O
'	O
d	O
have	O
to	O
decide	O
where	O
you	O
want	O
NaNs	O
to	O
end	O
up	O
when	O
sorting	O
the	O
array	O
,	O
and	O
then	O
change	O
your	O
comparison	O
code	O
so	O
that	O
it	O
works	O
.	O
Now	O
dictionaries	O
and	O
sets	O
and	O
generally	O
hashing	O
:	O
What	O
if	O
I	O
use	O
an	O
NaN	O
as	O
the	O
key	O
?	O
A	O
set	O
contains	O
unique	O
objects	O
.	O
If	O
the	O
set	O
contains	O
an	O
NaN	O
and	O
I	O
try	O
to	O
add	O
another	O
one	O
,	O
is	O
it	O
unique	O
because	O
it	O
is	O
not	O
equal	O
to	O
the	O
one	O
that	O
is	O
already	O
there	O
?	O
What	O
about	O
+	O
0	O
and	O
-	O
0	O
,	O
should	O
they	O
be	O
considered	O
equal	O
or	O
different	O
?	O
There	O
'	O
s	O
the	O
rule	O
that	O
any	O
two	O
items	O
considered	O
equal	O
must	O
have	O
the	O
same	O
hash	O
value	O
.	O
So	O
the	O
sensible	O
thing	O
is	O
(	O
probably	O
)	O
that	O
a	O
hash	O
function	O
returns	O
one	O
unique	O
value	O
for	O
all	O
NaNs	O
,	O
and	O
one	O
unique	O
value	O
for	O
+	O
0	O
and	O
-	O
0	O
.	O
And	O
after	O
the	O
hash	O
lookup	O
when	O
you	O
need	O
to	O
find	O
an	O
element	O
with	O
the	O
same	O
hash	O
value	O
that	O
is	O
actually	O
equal	O
,	O
two	O
NaNs	O
should	O
be	O
considered	O
equal	O
(	O
but	O
different	O
from	O
anything	O
else	O
)	O
.	O
That	O
'	O
s	O
probably	O
why	O
Double	B-api_mention
.	I-api_mention
Nan	I-api_mention
.	I-api_mention
equal	I-api_mention
(	I-api_mention
)	I-api_mention
behaves	O
different	O
from	O
=	O
=	O
.	O
Question	O
-	O
27482579	O
,	O
answer	O
-	O
27483288	O
#	O
blockquote	O
No	O
.	O
It	O
will	O
never	O
throw	O
a	O
compilation	O
error	O
.	O
This	O
is	O
much	O
similar	O
to	O
what	O
a	O
simple	O
getter	B-api_mention
and	O
setter	B-api_mention
does	O
or	O
a	O
copy	B-api_mention
constructor	O
does	O
.	O
Remember	O
we	O
can	O
access	O
private	O
members	O
using	O
this	O
.	O
#	O
pre	O
Your	O
testPrivate	B-api_mention
method	O
accepts	O
an	O
instance	O
of	O
MyClass	B-api_mention
.	O
Since	O
testPrivate	B-api_mention
is	O
a	O
method	O
inside	O
MyClass	B-api_mention
,	O
it	O
will	O
have	O
access	O
to	O
private	O
properties	O
.	O
#	O
pre	O
Methods	O
defined	O
inside	O
the	O
class	O
will	O
always	O
have	O
access	O
to	O
it	O
'	O
s	O
private	O
members	O
,	O
through	O
this	O
.	O
and	O
instance	O
variable	O
.	O
But	O
if	O
you	O
define	O
testPrivate	B-api_mention
outside	O
of	O
MyClass	B-api_mention
then	O
,	O
you	O
won	O
'	O
t	O
have	O
access	O
to	O
private	O
members	O
.	O
There	O
you	O
will	O
have	O
to	O
use	O
a	O
method	O
or	O
a	O
setter	O
or	O
a	O
getter	O
.	O
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056878	O
We	O
can	O
take	O
a	O
look	O
into	O
the	O
source	O
code	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
regex	I-api_mention
.	I-api_mention
Pattern	I-api_mention
which	O
is	O
behind	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
.	O
Way	O
down	O
the	O
rabbit	O
hole	O
the	O
method	O
public	O
String	B-api_mention
[	O
]	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
invoked	O
.	O
Input	O
StringLiteral	O
For	O
input	O
StringLiteral	O
this	O
method	O
is	O
called	O
as	O
String	B-api_mention
[	O
]	O
parts	O
=	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
intersting	O
part	O
of	O
this	O
method	O
is	O
:	O
#	O
pre	O
And	O
that	O
is	O
what	O
happens	O
:	O
new	O
String	B-api_mention
[	O
]	O
{	O
input	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
)	I-api_mention
}	O
is	O
returned	O
.	O
Input	O
StringLiteral	O
For	O
input	O
StringLiteral	O
the	O
intersting	O
part	O
is	O
#	O
pre	O
Here	O
resultSize	O
=	O
=	O
0	O
and	O
limit	O
=	O
=	O
0	O
so	O
new	O
String	B-api_mention
[	O
0	O
]	O
is	O
returned	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14513598	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
is	O
not	O
much	O
different	O
,	O
a	O
basic	O
LCG	O
described	O
by	O
Knuth	O
.	O
However	O
it	O
has	O
main	O
2	O
main	O
advantages	O
/	O
differences	O
:	O
#	O
li	O
thread	O
safe	O
-	O
each	O
update	O
is	O
a	O
CAS	O
which	O
is	O
more	O
expensive	O
than	O
a	O
simple	O
write	O
and	O
needs	O
a	O
branch	O
(	O
even	O
if	O
perfectly	O
predicted	O
single	O
threaded	O
)	O
.	O
Depending	O
on	O
the	O
CPU	O
it	O
could	O
be	O
significant	O
difference	O
.	O
#	O
li	O
undisclosed	O
internal	O
state	O
-	O
this	O
is	O
very	O
important	O
for	O
anything	O
non	O
-	O
trivial	O
.	O
You	O
wish	O
the	O
random	O
numbers	O
not	O
to	O
be	O
predictable	O
.	O
Below	O
it	O
'	O
s	O
the	O
main	O
routine	O
generating	O
'	O
random	O
'	O
integers	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
.	O
#	O
pre	O
If	O
you	O
remove	O
the	O
AtomicLong	B-api_mention
and	O
the	O
undisclosed	O
sate	O
(	O
i	O
.	O
e	O
.	O
using	O
all	O
bits	O
of	O
the	O
long	O
)	O
,	O
you	O
'	O
d	O
get	O
more	O
performance	O
than	O
the	O
double	O
multiplication	O
/	O
modulo	O
.	O
Last	O
note	O
:	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
should	O
not	O
be	O
used	O
for	O
anything	O
but	O
simple	O
tests	O
,	O
it	O
'	O
s	O
prone	O
to	O
contention	O
and	O
if	O
you	O
have	O
even	O
a	O
couple	O
of	O
threads	O
calling	O
it	O
concurrently	O
the	O
performance	O
degrades	O
.	O
One	O
little	O
known	O
historical	O
feature	O
of	O
it	O
is	O
the	O
introduction	O
of	O
CAS	O
in	O
java	O
-	O
to	O
beat	O
an	O
infamous	O
benchmark	O
(	O
first	O
by	O
IBM	O
via	O
intrinsics	O
and	O
then	O
Sun	O
made	O
"	O
CAS	O
from	O
Java	O
"	O
)	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
22578124	O
Old	O
thread	O
I	O
know	O
but	O
I	O
am	O
sort	O
of	O
new	O
to	O
Java	O
and	O
discover	O
one	O
of	O
it	O
'	O
s	O
strange	O
things	O
.	O
I	O
have	O
used	O
String	B-api_mention
.	I-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
get	O
unpredictable	O
results	O
.	O
Something	O
like	O
this	O
mess	O
up	O
the	O
string	O
:	O
sUrl	O
=	O
sUrl	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
I	O
designed	O
this	O
function	O
to	O
get	O
around	O
the	O
weird	O
problem	O
:	O
#	O
pre	O
Which	O
make	O
you	O
able	O
to	O
do	O
:	O
#	O
pre	O
Question	O
-	O
15336477	O
,	O
answer	O
-	O
32364785	O
Examples	O
from	O
Apache	O
(	O
link	O
)	O
use	O
this	O
:	O
HttpClient	B-api_mention
httpclient	O
=	O
HttpClients	B-api_mention
.	I-api_mention
createDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
class	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
http	I-api_mention
.	I-api_mention
impl	I-api_mention
.	I-api_mention
client	I-api_mention
.	I-api_mention
HttpClients	I-api_mention
is	O
there	O
since	O
version	O
4	O
.	O
3	O
.	O
The	O
code	O
for	O
HttpClients	B-api_mention
.	I-api_mention
createDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
same	O
as	O
the	O
accepted	O
answer	O
in	O
here	O
.	O
Question	O
-	O
31370403	O
,	O
answer	O
-	O
31466466	O
Idea	O
#	O
1	O
,	O
storing	O
the	O
Graphics	B-api_mention
objects	O
simply	O
wouldn	O
'	O
t	O
work	O
.	O
The	O
Graphics	B-api_mention
should	O
not	O
be	O
considered	O
as	O
"	O
holding	O
"	O
some	O
display	O
memory	O
,	O
but	O
rather	O
as	O
a	O
handle	O
to	O
access	O
an	O
area	O
of	O
display	O
memory	O
.	O
In	O
the	O
case	O
of	O
BufferedImage	O
,	O
each	O
Graphics	B-api_mention
object	O
will	O
be	O
always	O
the	O
handle	O
to	O
the	O
same	O
given	O
image	O
memory	O
buffer	O
,	O
so	O
they	O
all	O
will	O
represent	O
the	O
same	O
image	O
.	O
Even	O
more	O
importantly	O
,	O
you	O
can	O
'	O
t	O
actually	O
do	O
anything	O
with	O
the	O
stored	O
Graphics	B-api_mention
:	O
As	O
they	O
do	O
not	O
store	O
anything	O
,	O
there	O
is	O
no	O
way	O
whatsoever	O
they	O
could	O
"	O
re	O
-	O
store	O
"	O
anything	O
.	O
Idea	O
#	O
2	O
,	O
cloning	O
the	O
BufferedImage	O
s	O
is	O
a	O
much	O
better	O
idea	O
,	O
but	O
you	O
'	O
ll	O
indeed	O
be	O
wasting	O
memory	O
,	O
and	O
quickly	O
run	O
out	O
of	O
it	O
.	O
It	O
helps	O
only	O
to	O
store	O
those	O
parts	O
of	O
the	O
image	O
affected	O
by	O
the	O
draw	O
,	O
for	O
example	O
using	O
rectangular	O
areas	O
,	O
but	O
it	O
still	O
costs	O
a	O
lot	O
of	O
memory	O
.	O
Buffering	O
those	O
undo	O
images	O
to	O
disk	O
could	O
help	O
,	O
but	O
it	O
will	O
make	O
your	O
UI	O
slow	O
and	O
unresponsive	O
,	O
and	O
that	O
'	O
s	O
bad	O
;	O
furthermore	O
,	O
it	O
makes	O
you	O
application	O
more	O
complex	O
and	O
error	O
-	O
prone	O
.	O
My	O
alternative	O
would	O
be	O
to	O
store	O
store	O
the	O
image	O
modifications	O
in	O
a	O
list	O
,	O
rendered	O
from	O
first	O
to	O
last	O
on	O
top	O
of	O
the	O
image	O
.	O
An	O
undo	O
operation	O
then	O
simply	O
consists	O
of	O
removing	O
the	O
modification	O
from	O
the	O
list	O
.	O
This	O
requires	O
you	O
to	O
"	O
reify	O
"	O
the	O
image	O
modifications	O
,	O
i	O
.	O
e	O
.	O
create	O
a	O
class	O
that	O
implements	O
a	O
single	O
modification	O
,	O
by	O
providing	O
a	O
void	O
draw	O
(	O
args	O
)	O
method	O
which	O
performs	O
the	O
actual	O
drawing	O
.	O
As	O
you	O
said	O
,	O
random	O
modifications	O
pose	O
an	O
additional	O
problem	O
.	O
However	O
,	O
the	O
key	O
problem	O
is	O
your	O
use	O
of	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
create	O
random	O
numbers	O
.	O
Instead	O
,	O
perform	O
each	O
random	O
modification	O
with	O
a	O
Random	B-api_mention
created	O
from	O
a	O
fixed	O
seed	O
value	O
,	O
so	O
that	O
the	O
(	O
pseudo	O
-	O
)	O
random	O
number	O
sequences	O
are	O
the	O
same	O
on	O
each	O
invocation	O
of	O
draw	O
(	O
args	O
)	O
,	O
i	O
.	O
e	O
.	O
,	O
each	O
draw	O
has	O
exactly	O
the	O
same	O
effects	O
.	O
(	O
That	O
'	O
s	O
why	O
they	O
are	O
called	O
"	O
pseudo	O
-	O
random	O
"	O
-	O
-	O
the	O
generated	O
numbers	O
look	O
random	O
,	O
but	O
they	O
are	O
just	O
as	O
deterministic	O
as	O
any	O
other	O
function	O
.	O
)	O
In	O
contrast	O
to	O
the	O
image	O
storing	O
technique	O
,	O
which	O
has	O
memory	O
problems	O
,	O
the	O
problem	O
with	O
this	O
technique	O
is	O
that	O
many	O
modifications	O
may	O
make	O
the	O
GUI	O
slow	O
,	O
especially	O
if	O
the	O
modifications	O
are	O
computationally	O
intensive	O
.	O
To	O
prevent	O
this	O
,	O
the	O
simplest	O
way	O
would	O
be	O
to	O
fix	O
an	O
appropriate	O
maximum	O
size	O
of	O
the	O
list	O
of	O
undoable	O
modifications	O
.	O
If	O
this	O
limit	O
would	O
be	O
exceeded	O
by	O
adding	O
a	O
new	O
modification	O
,	O
remove	O
the	O
oldest	O
modification	O
the	O
list	O
and	O
apply	O
it	O
to	O
the	O
backing	O
BufferedImage	O
itself	O
.	O
The	O
following	O
simple	O
demo	O
application	O
shows	O
that	O
(	O
and	O
how	O
)	O
this	O
all	O
works	O
together	O
.	O
It	O
also	O
includes	O
a	O
nice	O
"	O
redo	O
"	O
feature	O
for	O
redoing	O
undone	O
actions	O
.	O
#	O
pre	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28833677	O
The	O
cleanest	O
“	O
try	O
services	O
”	O
approach	O
given	O
the	O
current	O
API	O
would	O
be	O
:	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
o	O
=	O
Stream	B-api_mention
.	I-api_mention
<	I-api_mention
Supplier	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
>	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
important	O
aspect	O
is	O
not	O
the	O
(	O
constant	O
)	O
chain	O
of	O
operations	O
you	O
have	O
to	O
write	O
once	O
but	O
how	O
easy	O
it	O
is	O
to	O
add	O
another	O
service	O
(	O
or	O
modify	O
the	O
list	O
of	O
services	O
is	O
general	O
)	O
.	O
Here	O
,	O
adding	O
or	O
removing	O
a	O
single	O
(	O
)	O
-	O
>	O
serviceX	O
(	O
args	O
)	O
is	O
enough	O
.	O
Due	O
to	O
the	O
lazy	O
evaluation	O
of	O
streams	O
,	O
no	O
service	O
will	O
be	O
invoked	O
if	O
a	O
preceding	O
service	O
returned	O
a	O
non	O
-	O
empty	O
Optional	B-api_mention
.	O
Question	O
-	O
8894258	O
In	O
Java	O
,	O
what	O
would	O
the	O
fastest	O
way	O
to	O
iterate	O
over	O
all	O
the	O
chars	O
in	O
a	O
String	B-api_mention
,	O
this	O
:	O
#	O
pre	O
Or	O
this	O
:	O
#	O
pre	O
EDIT	O
:	O
What	O
I	O
'	O
d	O
like	O
to	O
know	O
is	O
if	O
the	O
cost	O
of	O
repeatedly	O
calling	O
the	O
charAt	B-api_mention
method	O
during	O
a	O
long	O
iteration	O
ends	O
up	O
being	O
either	O
less	O
than	O
or	O
greater	O
than	O
the	O
cost	O
of	O
performing	O
a	O
single	O
call	O
to	O
toCharArray	B-api_mention
at	O
the	O
beginning	O
and	O
then	O
directly	O
accessing	O
the	O
array	O
during	O
the	O
iteration	O
.	O
It	O
'	O
d	O
be	O
great	O
if	O
someone	O
could	O
provide	O
a	O
robust	O
benchmark	O
for	O
different	O
string	O
lengths	O
,	O
having	O
in	O
mind	O
JIT	O
warm	O
-	O
up	O
time	O
,	O
JVM	O
start	O
-	O
up	O
time	O
,	O
etc	O
.	O
and	O
not	O
just	O
the	O
difference	O
between	O
two	O
calls	O
to	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
16324831	O
Why	O
do	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
null	I-api_mention
)	I-api_mention
and	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
null	I-api_mention
)	I-api_mention
throw	O
different	O
exceptions	O
?	O
Is	O
this	O
a	O
historical	O
accident	O
or	O
intentional	O
?	O
The	O
documentation	O
clearly	O
states	O
two	O
types	O
of	O
exceptions	O
for	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
and	O
one	O
for	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
but	O
it	O
seems	O
inconsistent	O
:	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
throws	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
NumberFormatException	I-api_mention
:	O
null	O
However	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
throws	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
NullPointerException	I-api_mention
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173658	O
If	O
you	O
want	O
to	O
stop	O
either	O
if	O
number	O
5	O
is	O
reached	O
or	O
10	O
elements	O
are	O
collected	O
,	O
there	O
'	O
s	O
Stream	B-api_mention
.	I-api_mention
takeWhile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
added	O
in	O
Java	O
-	O
9	O
:	O
#	O
pre	O
Question	O
-	O
26549659	O
Google	O
Guava	B-api_mention
has	O
a	O
predicate	O
that	O
always	O
returns	O
true	O
.	O
Does	O
Java	O
8	O
have	O
something	O
similar	O
for	O
its	O
Predicate	B-api_mention
?	O
I	O
know	O
I	O
could	O
use	O
(	O
foo	O
)	O
-	O
>	O
{	O
return	O
true	O
;	O
}	O
,	O
but	O
I	O
want	O
something	O
pre	O
-	O
made	O
,	O
analogous	O
to	O
Collections	B-api_mention
.	I-api_mention
emptySet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725550	O
Think	O
of	O
it	O
like	O
this	O
:	O
the	O
List	B-api_mention
interface	O
has	O
methods	O
like	O
add	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
set	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
contract	O
is	O
that	O
once	O
you	O
added	O
an	O
element	O
at	O
position	O
X	O
you	O
will	O
find	O
it	O
there	O
unless	O
you	O
add	O
or	O
remove	O
elements	O
before	O
it	O
.	O
If	O
any	O
list	O
implementation	O
would	O
store	O
elements	O
in	O
some	O
order	O
other	O
than	O
based	O
on	O
the	O
index	O
,	O
the	O
above	O
list	O
methods	O
would	O
make	O
no	O
sense	O
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28319221	O
Don	O
'	O
t	O
worry	O
about	O
any	O
performance	O
differences	O
,	O
they	O
'	O
re	O
going	O
to	O
be	O
minimal	O
in	O
this	O
case	O
normally	O
.	O
Method	O
2	O
is	O
preferable	O
because	O
#	O
li	O
it	O
doesn	O
'	O
t	O
require	O
mutating	O
a	O
collection	O
that	O
exists	O
outside	O
the	O
lambda	O
expression	O
,	O
#	O
li	O
it	O
'	O
s	O
more	O
readable	O
because	O
the	O
different	O
steps	O
that	O
are	O
performed	O
in	O
the	O
collection	O
pipeline	O
are	O
written	O
sequentially	O
(	O
first	O
a	O
filter	O
operation	O
,	O
then	O
a	O
map	O
operation	O
,	O
then	O
collecting	O
the	O
result	O
)	O
,	O
(	O
for	O
more	O
info	O
on	O
the	O
benefits	O
of	O
collection	O
pipelines	O
,	O
see	O
Martin	O
Fowler	O
'	O
s	O
excellent	O
article	O
)	O
#	O
li	O
you	O
can	O
easily	O
change	O
the	O
way	O
values	O
are	O
collected	O
by	O
replacing	O
the	O
Collector	B-api_mention
that	O
is	O
used	O
.	O
In	O
some	O
cases	O
you	O
may	O
need	O
to	O
write	O
your	O
own	O
Collector	B-api_mention
,	O
but	O
then	O
the	O
benefit	O
is	O
that	O
you	O
can	O
easily	O
reuse	O
that	O
.	O
Question	O
-	O
10827872	O
What	O
'	O
s	O
the	O
difference	O
between	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
'	O
s	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
,	O
other	O
than	O
later	O
uses	O
regex	O
?	O
For	O
simple	O
substitutions	O
like	O
,	O
replace	O
.	O
with	O
/	O
,	O
is	O
there	O
any	O
difference	O
?	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29097694	O
Please	O
do	O
not	O
vote	O
.	O
I	O
do	O
not	O
have	O
enough	O
place	O
to	O
explain	O
this	O
in	O
comments	O
.	O
This	O
is	O
a	O
solution	O
with	O
a	O
Stream	B-api_mention
and	O
a	O
foreach	O
but	O
this	O
is	O
strictly	O
equivalent	O
to	O
Alexis	O
'	O
s	O
solution	O
or	O
a	O
foreach	O
loop	O
(	O
and	O
less	O
clear	O
,	O
and	O
I	O
could	O
not	O
get	O
rid	O
of	O
the	O
copy	O
constructor	O
)	O
:	O
#	O
pre	O
I	O
understand	O
that	O
you	O
want	O
to	O
find	O
a	O
more	O
elegant	O
solution	O
with	O
Java	O
8	O
but	O
I	O
truly	O
think	O
that	O
it	O
has	O
not	O
been	O
designed	O
for	O
this	O
case	O
.	O
And	O
as	O
said	O
by	O
Mr	O
spoon	O
,	O
highly	O
prefer	O
the	O
naive	O
way	O
in	O
this	O
case	O
.	O
Question	O
-	O
32294367	O
,	O
answer	O
-	O
32378895	O
#	O
blockquote	O
Yes	O
and	O
No	O
.	O
I	O
explain	O
:	O
#	O
li	O
Referring	O
to	O
shared	O
memory	O
:	O
Different	O
threads	O
in	O
a	O
Java	O
process	O
share	O
the	O
whole	O
heap	O
,	O
therefore	O
threads	O
can	O
interact	O
in	O
a	O
huge	O
number	O
of	O
planned	O
and	O
unplanned	O
ways	O
.	O
However	O
objects	O
in	O
the	O
stack	O
(	O
e	O
.	O
g	O
.	O
a	O
context	O
you	O
pass	O
down	O
to	O
called	O
method	O
)	O
or	O
a	O
ThreadLocal	O
are	O
their	O
own	O
thread	O
'	O
s	O
(	O
unless	O
they	O
start	O
sharing	O
references	O
)	O
.	O
#	O
li	O
Crashing	O
:	O
If	O
a	O
thread	O
crashes	O
in	O
Java	O
(	O
a	O
Throwable	B-api_mention
is	O
propagated	O
into	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
or	O
something	O
gets	O
looped	O
or	O
blocked	O
)	O
,	O
that	O
mishap	O
might	O
not	O
affect	O
other	O
threads	O
(	O
e	O
.	O
g	O
.	O
a	O
pool	O
of	O
connections	O
in	O
a	O
server	O
will	O
continue	O
to	O
operate	O
)	O
.	O
However	O
as	O
different	O
threads	O
interact	O
.	O
Other	O
threads	O
will	O
easily	O
get	O
stranded	O
if	O
one	O
of	O
them	O
ends	O
abnormally	O
(	O
e	O
.	O
g	O
.	O
one	O
thread	O
trying	O
to	O
read	O
from	O
an	O
empty	O
pipe	O
from	O
another	O
thread	O
which	O
did	O
not	O
close	O
its	O
end	O
)	O
.	O
So	O
unless	O
the	O
developers	O
are	O
highly	O
paranoid	O
careful	O
,	O
it	O
is	O
very	O
likely	O
that	O
side	O
effects	O
will	O
occur	O
.	O
I	O
doubt	O
that	O
any	O
other	O
paradigm	O
intends	O
threads	O
to	O
operate	O
as	O
totally	O
independent	O
islands	O
.	O
They	O
must	O
share	O
information	O
and	O
coordinate	O
somehow	O
.	O
And	O
then	O
there	O
will	O
be	O
the	O
chance	O
to	O
mess	O
things	O
up	O
.	O
It	O
is	O
just	O
they	O
will	O
take	O
a	O
more	O
defensive	O
approach	O
that	O
"	O
gives	O
you	O
less	O
rope	O
to	O
hang	O
yourself	O
"	O
(	O
same	O
idiom	O
as	O
with	O
pointers	O
)	O
.	O
Question	O
-	O
20363719	O
,	O
answer	O
-	O
25453317	O
If	O
your	O
key	O
is	O
NOT	O
guaranteed	O
to	O
be	O
unique	O
for	O
all	O
elements	O
in	O
the	O
list	O
,	O
you	O
should	O
convert	O
it	O
to	O
a	O
Map	B-api_mention
<	O
String	B-api_mention
,	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
instead	O
of	O
a	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Map	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
result	O
=	O
choices	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
26684562	O
In	O
Java	O
8	O
,	O
what	O
'	O
s	O
the	O
difference	O
between	O
Stream	B-api_mention
.	I-api_mention
map	I-api_mention
and	O
Stream	B-api_mention
.	I-api_mention
flatMap	I-api_mention
methods	O
?	O
Question	O
-	O
15940234	O
I	O
'	O
m	O
relative	O
new	O
to	O
the	O
webservices	O
world	O
and	O
my	O
research	O
seems	O
to	O
have	O
confused	O
me	O
more	O
than	O
enlighten	O
me	O
,	O
my	O
problem	O
is	O
that	O
I	O
was	O
given	O
a	O
library	O
(	O
jar	O
)	O
which	O
I	O
have	O
to	O
extend	O
with	O
some	O
webservice	O
functionality	O
.	O
This	O
library	O
will	O
be	O
shared	O
to	O
other	O
developers	O
,	O
and	O
among	O
the	O
classes	O
in	O
the	O
jar	O
will	O
be	O
classes	O
that	O
have	O
a	O
method	O
which	O
calls	O
a	O
webservice	O
(	O
that	O
essentially	O
sets	O
an	O
attribute	O
of	O
the	O
class	O
,	O
does	O
some	O
business	O
logic	O
,	O
like	O
storing	O
the	O
object	O
in	O
a	O
db	O
,	O
etc	O
and	O
sends	O
back	O
the	O
object	O
with	O
those	O
modifications	O
)	O
.	O
I	O
want	O
to	O
make	O
the	O
call	O
to	O
this	O
service	O
as	O
simple	O
as	O
possible	O
,	O
hopefully	O
as	O
simple	O
so	O
that	O
the	O
developer	O
using	O
the	O
class	O
only	O
need	O
to	O
do	O
.	O
#	O
pre	O
I	O
have	O
been	O
studying	O
JAX	O
-	O
WS	O
to	O
use	O
on	O
the	O
server	O
but	O
seems	O
to	O
me	O
that	O
I	O
don	O
'	O
t	O
need	O
to	O
create	O
a	O
wsimport	O
in	O
the	O
server	O
nor	O
the	O
wsimport	O
on	O
the	O
client	O
,	O
since	O
I	O
know	O
that	O
both	O
have	O
the	O
classes	O
,	O
I	O
just	O
need	O
some	O
interaction	O
between	O
classes	O
shared	O
in	O
both	O
the	O
server	O
and	O
the	O
client	O
.	O
How	O
do	O
you	O
think	O
makes	O
sense	O
to	O
do	O
the	O
webservice	O
and	O
the	O
call	O
in	O
the	O
class	O
?	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777311	O
The	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
check	O
if	O
both	O
arrays	O
contain	O
the	O
same	O
number	O
of	O
elements	O
,	O
and	O
all	O
corresponding	O
pairs	O
of	O
elements	O
in	O
the	O
two	O
arrays	O
are	O
equal	O
.	O
The	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
compare	O
the	O
object	O
to	O
another	O
object	O
and	O
return	O
true	O
only	O
if	O
the	O
reference	O
of	O
the	O
two	O
object	O
are	O
equal	O
as	O
in	O
the	O
Object	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489334	O
Text	O
inside	O
double	O
quotes	O
creates	O
a	O
literal	O
String	B-api_mention
object	O
.	O
String	B-api_mention
myString	O
=	O
StringLiteral	O
;	O
The	O
code	O
above	O
creates	O
a	O
String	B-api_mention
object	O
,	O
using	O
double	O
quotes	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
5868454	O
You	O
need	O
to	O
use	O
the	O
readLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
class	O
BufferedReader	B-api_mention
.	O
Create	O
a	O
new	O
object	O
from	O
that	O
class	O
and	O
operate	O
this	O
method	O
on	O
him	O
and	O
save	O
it	O
to	O
a	O
string	O
.	O
BufferReader	B-api_mention
API	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489453	O
Java	O
treats	O
String	B-api_mention
as	O
a	O
special	O
class	O
,	O
you	O
can	O
initialize	O
in	O
both	O
ways	O
#	O
li	O
Directly	O
assigning	O
literal	O
String	B-api_mention
a	O
=	O
StringLiteral	O
;	O
#	O
li	O
As	O
other	O
Objects	B-api_mention
using	O
new	O
keyword	O
String	B-api_mention
a	O
=	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
need	O
to	O
take	O
special	O
care	O
when	O
you	O
wants	O
to	O
compare	O
with	O
=	O
=	O
sign	O
:	O
#	O
pre	O
That	O
is	O
because	O
in	O
first	O
case	O
the	O
objects	O
a	O
and	O
b	O
are	O
kept	O
in	O
something	O
called	O
literal	O
pool	O
and	O
they	O
both	O
are	O
referencing	O
same	O
object	O
so	O
they	O
are	O
equal	O
in	O
both	O
ways	O
.	O
But	O
in	O
second	O
case	O
a	O
and	O
b	O
references	O
different	O
objects	O
like	O
when	O
we	O
initialize	O
any	O
other	O
objects	O
.	O
so	O
they	O
are	O
unequal	O
when	O
compared	O
with	O
=	O
=	O
operator	O
whereas	O
they	O
are	O
equal	O
in	O
values	O
.	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
18544736	O
Threads	O
are	O
not	O
collected	O
until	O
they	O
terminate	O
.	O
They	O
serve	O
as	O
roots	O
of	O
garbage	O
collection	O
.	O
They	O
are	O
one	O
of	O
the	O
few	O
objects	O
that	O
won	O
'	O
t	O
be	O
reclaimed	O
simply	O
by	O
forgetting	O
about	O
them	O
or	O
clearing	O
references	O
to	O
them	O
.	O
Consider	O
:	O
the	O
basic	O
pattern	O
to	O
terminate	O
a	O
worker	O
thread	O
is	O
to	O
set	O
some	O
condition	O
variable	O
seen	O
by	O
the	O
thread	O
.	O
The	O
thread	O
can	O
check	O
the	O
variable	O
periodically	O
and	O
use	O
that	O
as	O
a	O
signal	O
to	O
terminate	O
.	O
If	O
the	O
variable	O
is	O
not	O
declared	O
volatile	O
,	O
then	O
the	O
change	O
to	O
the	O
variable	O
might	O
not	O
be	O
seen	O
by	O
the	O
thread	O
,	O
so	O
it	O
won	O
'	O
t	O
know	O
to	O
terminate	O
.	O
Or	O
imagine	O
if	O
some	O
threads	O
want	O
to	O
update	O
a	O
shared	O
object	O
,	O
but	O
deadlock	O
while	O
trying	O
to	O
lock	O
on	O
it	O
.	O
If	O
you	O
only	O
have	O
a	O
handful	O
of	O
threads	O
these	O
bugs	O
will	O
probably	O
be	O
obvious	O
because	O
your	O
program	O
will	O
stop	O
working	O
properly	O
.	O
If	O
you	O
have	O
a	O
thread	O
pool	O
that	O
creates	O
more	O
threads	O
as	O
needed	O
,	O
then	O
the	O
obsolete	O
/	O
stuck	O
threads	O
might	O
not	O
be	O
noticed	O
,	O
and	O
will	O
accumulate	O
indefinitely	O
,	O
causing	O
a	O
memory	O
leak	O
.	O
Threads	O
are	O
likely	O
to	O
use	O
other	O
data	O
in	O
your	O
application	O
,	O
so	O
will	O
also	O
prevent	O
anything	O
they	O
directly	O
reference	O
from	O
ever	O
being	O
collected	O
.	O
As	O
a	O
toy	O
example	O
:	O
#	O
pre	O
Call	O
System	B-api_mention
.	I-api_mention
gc	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
all	O
you	O
like	O
,	O
but	O
the	O
object	O
passed	O
to	O
leakMe	O
will	O
never	O
die	O
.	O
(	O
*	O
edited	O
*	O
)	O
Question	O
-	O
13195797	O
I	O
want	O
to	O
delete	O
all	O
files	O
inside	O
ABC	O
directory	O
.	O
When	O
I	O
tried	O
with	O
FileUtils	B-api_mention
.	I-api_mention
deleteDirectory	I-api_mention
(	I-api_mention
args	I-api_mention
)	O
;	O
it	O
also	O
deletes	O
folder	O
ABC	O
.	O
Is	O
there	O
a	O
one	O
liner	O
solution	O
where	O
I	O
can	O
delete	O
files	O
inside	O
directory	O
but	O
not	O
directory	O
?	O
Question	O
-	O
32294367	O
,	O
answer	O
-	O
32294898	O
#	O
blockquote	O
Let	O
me	O
ask	O
a	O
counterquestion	O
:	O
why	O
do	O
you	O
think	O
Thread	B-api_mention
.	I-api_mention
stop	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
been	O
deprecated	O
for	O
more	O
than	O
a	O
decade	O
?	O
The	O
reason	O
why	O
is	O
precisely	O
the	O
negation	O
of	O
your	O
statement	O
above	O
.	O
To	O
give	O
two	O
specific	O
examples	O
:	O
you	O
stop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
a	O
thread	O
while	O
it	O
'	O
s	O
executing	O
something	O
as	O
innocuous	O
-	O
sounding	O
as	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Result	O
:	O
those	O
two	O
features	O
are	O
now	O
broken	O
for	O
the	O
entire	O
JVM	O
.	O
The	O
same	O
pertains	O
to	O
any	O
other	O
synchronized	O
code	O
your	O
application	O
may	O
execute	O
.	O
#	O
blockquote	O
The	O
application	O
may	O
theoretically	O
be	O
coded	O
such	O
that	O
absolutely	O
no	O
shared	O
resource	O
protected	O
by	O
locks	O
is	O
ever	O
used	O
;	O
however	O
that	O
will	O
only	O
help	O
to	O
point	O
out	O
the	O
exact	O
extent	O
to	O
which	O
Java	O
threads	O
are	O
codependent	O
.	O
And	O
the	O
"	O
independence	O
"	O
achieved	O
will	O
only	O
pertain	O
to	O
the	O
request	O
-	O
processing	O
threads	O
,	O
not	O
to	O
all	O
threads	O
in	O
such	O
an	O
application	O
.	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33148103	O
Looking	O
at	O
the	O
code	O
:	O
int	O
newCapacity	O
=	O
oldCapacity	O
+	O
(	O
oldCapacity	O
>	O
>	O
1	O
)	O
;	O
If	O
oldCapacity	O
is	O
quite	O
large	O
,	O
this	O
will	O
overflow	O
,	O
and	O
newCapacity	O
will	O
be	O
a	O
negative	O
number	O
.	O
A	O
comparison	O
like	O
newCapacity	O
<	O
oldCapacity	O
will	O
incorrectly	O
evaluate	O
true	O
and	O
the	O
ArrayList	B-api_mention
will	O
fail	O
to	O
grow	O
.	O
Instead	O
,	O
the	O
code	O
as	O
written	O
(	O
newCapacity	O
-	O
minCapacity	O
<	O
0	O
returns	O
false	O
)	O
will	O
allow	O
the	O
negative	O
value	O
of	O
newCapacity	O
to	O
be	O
further	O
evaluated	O
in	O
the	O
next	O
line	O
,	O
resulting	O
in	O
recalculating	O
newCapacity	O
by	O
invoking	O
hugeCapacity	O
(	O
newCapacity	O
=	O
hugeCapacity	O
(	O
args	O
)	O
;	O
)	O
to	O
allow	O
for	O
the	O
ArrayList	B-api_mention
to	O
grow	O
up	O
to	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
.	O
This	O
is	O
what	O
the	O
/	O
/	O
overflow	O
-	O
conscious	O
code	O
comment	O
is	O
trying	O
to	O
communicate	O
,	O
though	O
rather	O
obliquely	O
.	O
So	O
,	O
bottom	O
line	O
,	O
the	O
new	O
comparison	O
protects	O
against	O
allocating	O
an	O
ArrayList	B-api_mention
larger	O
than	O
the	O
predefined	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
while	O
allowing	O
it	O
to	O
grow	O
right	O
up	O
to	O
that	O
limit	O
if	O
needed	O
.	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29926133	O
I	O
'	O
d	O
go	O
for	O
EnumSet	B-api_mention
.	O
Because	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
also	O
defined	O
on	O
Iterable	B-api_mention
,	O
you	O
can	O
avoid	O
creating	O
the	O
stream	O
altogether	O
:	O
EnumSet	B-api_mention
.	I-api_mention
allOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
with	O
a	O
method	O
reference	O
:	O
EnumSet	B-api_mention
.	I-api_mention
allOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Still	O
,	O
the	O
oldschool	O
for	O
-	O
loop	O
feels	O
a	O
bit	O
simpler	O
:	O
#	O
pre	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
8172444	O
Try	O
this	O
:	O
Character	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
just	O
this	O
:	O
aChar	O
+	O
StringLiteral	O
Question	O
-	O
18448671	O
,	O
answer	O
-	O
18448699	O
Use	O
an	O
Iterator	B-api_mention
and	O
call	O
remove	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
20918650	O
,	O
answer	O
-	O
20918709	O
A	O
subsequent	O
post	O
by	O
the	O
same	O
user	O
in	O
the	O
same	O
conversation	O
:	O
#	O
blockquote	O
(	O
This	O
was	O
in	O
response	O
to	O
a	O
statement	O
by	O
another	O
user	O
,	O
namely	O
that	O
"	O
it	O
seems	O
in	O
some	O
situations	O
'	O
new	O
T	B-api_mention
'	O
would	O
be	O
better	O
"	O
,	O
the	O
idea	O
being	O
that	O
new	O
T	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
impossible	O
due	O
to	O
type	O
erasure	O
.	O
(	O
This	O
is	O
debatable	O
—	O
even	O
if	O
T	B-api_mention
were	O
available	O
at	O
runtime	O
,	O
it	O
could	O
be	O
an	O
abstract	O
class	O
or	O
interface	O
,	O
or	O
it	O
could	O
be	O
Void	O
,	O
or	O
it	O
could	O
lack	O
a	O
no	O
-	O
arg	O
constructor	O
,	O
or	O
its	O
no	O
-	O
arg	O
constructor	O
could	O
be	O
private	O
(	O
e	O
.	O
g	O
.	O
,	O
because	O
it	O
'	O
s	O
supposed	O
to	O
be	O
a	O
singleton	O
class	O
)	O
,	O
or	O
its	O
no	O
-	O
arg	O
constructor	O
could	O
specify	O
a	O
checked	O
exception	O
that	O
the	O
generic	O
method	O
does	O
not	O
catch	O
or	O
specify	O
—	O
but	O
that	O
was	O
the	O
premise	O
.	O
Regardless	O
,	O
it	O
'	O
s	O
true	O
that	O
without	O
erasure	O
you	O
could	O
at	O
least	O
write	O
T	B-api_mention
.	I-api_mention
class	I-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
handles	O
those	O
issues	O
.	O
)	O
)	O
This	O
view	O
,	O
that	O
types	O
are	O
isomorphic	O
to	O
propositions	O
,	O
suggests	O
that	O
the	O
user	O
has	O
a	O
background	O
in	O
formal	O
type	O
theory	O
.	O
(	O
S	O
)	O
he	O
very	O
likely	O
does	O
not	O
like	O
"	O
dynamic	O
types	O
"	O
or	O
"	O
runtime	O
-	O
types	O
"	O
and	O
would	O
prefer	O
a	O
Java	O
without	O
downcasts	O
and	O
instanceof	B-api_mention
and	O
reflection	O
and	O
so	O
on	O
.	O
(	O
Think	O
of	O
a	O
language	O
like	O
Standard	O
ML	O
,	O
which	O
has	O
a	O
very	O
rich	O
(	O
static	O
)	O
type	O
system	O
and	O
whose	O
dynamic	O
semantics	O
do	O
not	O
depend	O
on	O
any	O
type	O
information	O
whatsoever	O
.	O
)	O
It	O
'	O
s	O
worth	O
keeping	O
in	O
mind	O
,	O
by	O
the	O
way	O
,	O
that	O
the	O
user	O
is	O
trolling	O
:	O
while	O
(	O
s	O
)	O
he	O
likely	O
sincerely	O
prefers	O
(	O
statically	O
)	O
typed	O
languages	O
,	O
(	O
s	O
)	O
he	O
is	O
not	O
sincerely	O
trying	O
to	O
persuade	O
others	O
of	O
that	O
view	O
.	O
Rather	O
,	O
the	O
main	O
purpose	O
of	O
the	O
original	O
tweet	O
was	O
to	O
mock	O
those	O
who	O
disagree	O
,	O
and	O
after	O
some	O
of	O
those	O
disagree	O
-	O
ers	O
chimed	O
in	O
,	O
the	O
user	O
posted	O
follow	O
-	O
up	O
tweets	O
such	O
as	O
"	O
the	O
reason	O
java	O
has	O
type	O
erasure	O
is	O
that	O
Wadler	O
et	O
al	O
know	O
what	O
they	O
are	O
doing	O
,	O
unlike	O
users	O
of	O
java	O
"	O
.	O
Unfortunately	O
,	O
this	O
makes	O
it	O
hard	O
to	O
find	O
out	O
what	O
(	O
s	O
)	O
he	O
'	O
s	O
actually	O
thinking	O
;	O
but	O
fortunately	O
,	O
it	O
also	O
likely	O
means	O
that	O
it	O
'	O
s	O
not	O
very	O
important	O
to	O
do	O
so	O
.	O
People	O
with	O
actual	O
depth	O
to	O
their	O
views	O
don	O
'	O
t	O
generally	O
resort	O
to	O
trolls	O
that	O
are	O
quite	O
this	O
content	O
-	O
free	O
.	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509669	O
The	O
difference	O
between	O
d	O
and	O
e	O
is	O
that	O
when	O
you	O
concatenate	O
string	O
literals	O
,	O
the	O
concatenation	O
is	O
performed	O
at	O
compile	O
time	O
.	O
Java	O
compiler	O
treats	O
StringLiteral	O
+	O
StringLiteral	O
expression	O
in	O
the	O
same	O
way	O
as	O
StringLiteral	O
expression	O
,	O
producing	O
the	O
same	O
literal	O
at	O
compile	O
time	O
.	O
Since	O
all	O
String	B-api_mention
literals	O
get	O
interned	O
,	O
d	O
,	O
which	O
is	O
a	O
result	O
of	O
StringLiteral	O
+	O
StringLiteral	O
,	O
also	O
ends	O
up	O
referencing	O
the	O
same	O
object	O
as	O
a	O
and	O
b	O
'	O
s	O
StringLiteral	O
.	O
The	O
expression	O
for	O
e	O
,	O
which	O
is	O
c	O
+	O
StringLiteral	O
,	O
is	O
evaluated	O
at	O
runtime	O
.	O
Even	O
though	O
it	O
produces	O
the	O
same	O
string	O
,	O
this	O
fact	O
is	O
not	O
used	O
by	O
the	O
compiler	O
.	O
That	O
'	O
s	O
why	O
a	O
different	O
String	B-api_mention
object	O
is	O
produced	O
,	O
resulting	O
in	O
failed	O
comparison	O
on	O
=	O
=	O
.	O
Question	O
-	O
16148575	O
I	O
am	O
trying	O
to	O
build	O
a	O
HashMap	B-api_mention
which	O
will	O
have	O
integer	O
as	O
keys	O
and	O
objects	O
as	O
values	O
.	O
My	O
syntax	O
is	O
:	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
,	O
the	O
error	O
returned	O
is	O
-	O
Syntax	O
error	O
on	O
token	O
"	O
int	O
"	O
,	O
Dimensions	O
expected	O
after	O
this	O
token	O
-	O
I	O
don	O
'	O
t	O
understand	O
why	O
I	O
should	O
add	O
a	O
dimension	O
(	O
ie	O
:	O
making	O
the	O
int	O
into	O
an	O
array	O
)	O
since	O
I	O
only	O
need	O
to	O
store	O
a	O
digit	O
as	O
key	O
.	O
What	O
could	O
I	O
do	O
?	O
Thanks	O
in	O
advance	O
!	O
:	O
)	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
20130131	O
There	O
are	O
already	O
people	O
asked	O
the	O
same	O
on	O
the	O
mailing	O
list	O
☺	O
.	O
The	O
main	O
reason	O
is	O
Iterable	B-api_mention
also	O
has	O
a	O
re	O
-	O
iterable	O
semantic	O
,	O
while	O
Stream	B-api_mention
is	O
not	O
.	O
#	O
blockquote	O
Question	O
-	O
5839359	O
,	O
answer	O
-	O
5839392	O
You	O
'	O
re	O
essentially	O
running	O
out	O
of	O
memory	O
to	O
run	O
the	O
process	O
smoothly	O
.	O
Options	O
that	O
come	O
to	O
mind	O
:	O
#	O
li	O
Specify	O
more	O
memory	O
like	O
you	O
mentioned	O
,	O
try	O
something	O
in	O
between	O
like	O
-	O
Xmx512m	O
first	O
#	O
li	O
Work	O
with	O
smaller	O
batches	O
of	O
HashMap	B-api_mention
objects	O
to	O
process	O
at	O
once	O
if	O
possible	O
#	O
li	O
If	O
you	O
have	O
a	O
lot	O
of	O
duplicate	O
strings	O
,	O
use	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
them	O
before	O
putting	O
them	O
into	O
the	O
HashMap	B-api_mention
#	O
li	O
Use	O
the	O
HashMap	B-api_mention
(	I-api_mention
int	I-api_mention
initialCapacity	I-api_mention
,	I-api_mention
float	I-api_mention
loadFactor	I-api_mention
)	I-api_mention
constructor	O
to	O
tune	O
for	O
your	O
case	O
Question	O
-	O
16159203	O
,	O
answer	O
-	O
16323196	O
#	O
blockquote	O
currentPos	O
=	O
new	O
Point	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
does	O
a	O
few	O
things	O
,	O
including	O
writing	O
default	O
values	O
to	O
x	O
and	O
y	O
(	O
0	O
)	O
and	O
then	O
writing	O
their	O
initial	O
values	O
in	O
the	O
constructor	O
.	O
Since	O
your	O
object	O
is	O
not	O
safely	O
published	O
those	O
4	O
write	O
operations	O
can	O
be	O
freely	O
reordered	O
by	O
the	O
compiler	O
/	O
JVM	O
.	O
So	O
from	O
the	O
perspective	O
of	O
the	O
reading	O
thread	O
,	O
it	O
is	O
a	O
legal	O
execution	O
to	O
read	O
x	O
with	O
its	O
new	O
value	O
but	O
y	O
with	O
its	O
default	O
value	O
of	O
0	O
for	O
example	O
.	O
By	O
the	O
time	O
you	O
reach	O
the	O
println	O
statement	O
(	O
which	O
by	O
the	O
way	O
is	O
synchronized	O
and	O
therefore	O
does	O
influence	O
the	O
read	O
operations	O
)	O
,	O
the	O
variables	O
have	O
their	O
initial	O
values	O
and	O
the	O
program	O
prints	O
the	O
expected	O
values	O
.	O
Marking	O
currentPos	O
as	O
volatile	O
will	O
ensure	O
safe	O
publication	O
since	O
your	O
object	O
is	O
effectively	O
immutable	O
-	O
if	O
in	O
your	O
real	O
use	O
case	O
the	O
object	O
is	O
mutated	O
after	O
construction	O
,	O
volatile	O
guarantees	O
won	O
'	O
t	O
be	O
enough	O
and	O
you	O
could	O
see	O
an	O
inconsistent	O
object	O
again	O
.	O
Alternatively	O
,	O
you	O
can	O
make	O
the	O
Point	B-api_mention
immutable	O
which	O
will	O
also	O
ensure	O
safe	O
publication	O
,	O
even	O
without	O
using	O
volatile	O
.	O
To	O
achieve	O
immutability	O
,	O
you	O
simply	O
need	O
to	O
mark	O
x	O
and	O
y	O
final	O
.	O
As	O
a	O
side	O
note	O
and	O
as	O
already	O
mentioned	O
,	O
synchronized	O
(	O
args	O
)	O
{	O
}	O
can	O
be	O
treated	O
as	O
a	O
no	O
-	O
op	O
by	O
the	O
JVM	O
(	O
I	O
understand	O
you	O
included	O
it	O
to	O
reproduce	O
the	O
behaviour	O
)	O
.	O
Question	O
-	O
6992608	O
,	O
answer	O
-	O
26764904	O
As	O
pointed	O
by	O
this	O
the	O
best	O
way	O
to	O
obtain	O
a	O
concurrency	O
-	O
able	O
HashSet	B-api_mention
is	O
by	O
means	O
of	O
Collections	B-api_mention
.	I-api_mention
synchronizedSet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Set	O
s	O
=	O
Collections	B-api_mention
.	I-api_mention
synchronizedSet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
worked	O
for	O
me	O
and	O
I	O
haven	O
'	O
t	O
seen	O
anybody	O
really	O
pointing	O
to	O
it	O
.	O
EDIT	O
This	O
is	O
less	O
efficient	O
than	O
the	O
currently	O
aproved	O
solution	O
,	O
as	O
Eugene	O
points	O
out	O
,	O
since	O
it	O
just	O
wraps	O
your	O
set	O
into	O
a	O
synchronized	O
decorator	O
,	O
while	O
a	O
ConcurrentHashMap	B-api_mention
actually	O
implements	O
low	O
-	O
level	O
concurrency	O
and	O
it	O
can	O
back	O
your	O
Set	O
just	O
as	O
fine	O
.	O
So	O
thanks	O
to	O
Mr	O
.	O
Stepanenkov	O
for	O
making	O
that	O
clear	O
.	O
#	O
a	O
Question	O
-	O
12317668	O
According	O
to	O
the	O
JLS	O
,	O
an	O
int	O
array	O
should	O
be	O
filled	O
by	O
zeros	O
just	O
after	O
initialization	O
.	O
However	O
,	O
I	O
am	O
faced	O
with	O
a	O
situation	O
where	O
it	O
is	O
not	O
.	O
Such	O
a	O
behavior	O
occurs	O
first	O
in	O
JDK	O
7u4	O
and	O
also	O
occurs	O
in	O
all	O
later	O
updates	O
(	O
I	O
use	O
64	O
-	O
bit	O
implementation	O
)	O
.	O
The	O
following	O
code	O
throws	O
exception	O
:	O
#	O
pre	O
The	O
exception	O
occurs	O
after	O
the	O
JVM	O
performs	O
compilation	O
of	O
the	O
code	O
block	O
and	O
does	O
not	O
arise	O
with	O
-	O
Xint	O
flag	O
.	O
Additionally	O
,	O
the	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
statement	O
(	O
as	O
all	O
other	O
statements	O
in	O
this	O
code	O
)	O
is	O
necessary	O
,	O
and	O
the	O
exception	O
does	O
not	O
occurs	O
if	O
it	O
is	O
absent	O
.	O
It	O
is	O
clear	O
that	O
this	O
possible	O
bug	O
is	O
bounded	O
with	O
some	O
JVM	O
optimization	O
.	O
Any	O
ideas	O
for	O
the	O
reason	O
of	O
such	O
a	O
behavior	O
?	O
Update	O
:	O
I	O
see	O
this	O
behavior	O
on	O
HotSpot	O
64	O
-	O
bit	O
server	O
VM	O
,	O
Java	O
version	O
from	O
1	O
.	O
7	O
.	O
0	O
_	O
04	O
to	O
1	O
.	O
7	O
.	O
0	O
_	O
10	O
on	O
Gentoo	O
Linux	O
,	O
Debian	O
Linux	O
(	O
both	O
kernel	O
3	O
.	O
0	O
version	O
)	O
and	O
MacOS	O
Lion	O
.	O
This	O
error	O
can	O
always	O
be	O
reproduced	O
with	O
the	O
code	O
above	O
.	O
I	O
did	O
not	O
test	O
this	O
problem	O
with	O
a	O
32	O
-	O
bit	O
JDK	O
or	O
on	O
Windows	O
.	O
I	O
already	O
sent	O
a	O
bug	O
report	O
to	O
the	O
Oracle	O
(	O
bug	O
id	O
7196857	O
)	O
and	O
it	O
will	O
appear	O
in	O
public	O
Oracle	O
bug	O
database	O
in	O
few	O
days	O
.	O
Update	O
:	O
Oracle	O
published	O
this	O
bug	O
at	O
their	O
public	O
bug	O
database	O
:	O
#	O
a	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
34930831	O
To	O
measure	O
the	O
actual	O
number	O
of	O
used	O
threads	O
,	O
you	O
can	O
check	O
Thread	B-api_mention
.	I-api_mention
activeCount	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
This	O
can	O
produce	O
on	O
a	O
4	O
-	O
core	O
CPU	O
an	O
output	O
like	O
:	O
#	O
pre	O
Without	O
.	B-api_mention
parallel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
gives	O
:	O
#	O
pre	O
Question	O
-	O
31965179	O
,	O
answer	O
-	O
35427268	O
There	O
'	O
s	O
a	O
long	O
list	O
of	O
things	O
that	O
have	O
been	O
changed	O
in	O
Hibernate	O
5	O
:	O
#	O
li	O
New	O
bootstrap	O
API	O
so	O
we	O
can	O
bootstrap	O
a	O
JPA	O
environment	O
programmatically	O
without	O
the	O
need	O
of	O
a	O
persistence	O
.	O
xml	O
file	O
.	O
#	O
li	O
Starting	O
in	O
5	O
.	O
0	O
Hibernate	O
Spatial	O
is	O
part	O
of	O
the	O
Hibernate	O
project	O
so	O
we	O
can	O
handle	O
GIS	O
data	O
too	O
.	O
#	O
li	O
The	O
Java	O
8	O
Date	B-api_mention
and	O
Time	B-api_mention
types	O
are	O
supported	O
in	O
domain	O
model	O
mappings	O
.	O
The	O
mapping	O
between	O
the	O
standard	O
SQL	O
Date	O
/	O
Time	O
types	O
and	O
the	O
supported	O
Java	O
8	O
Date	B-api_mention
/	O
Time	B-api_mention
class	O
types	O
looks	O
as	O
follows	O
;	O
#	O
li	O
DATE	O
:	O
java	O
.	O
time	O
.	O
LocalDate	O
#	O
li	O
TIME	O
:	O
java	O
.	O
time	O
.	O
LocalTime	O
,	O
java	O
.	O
time	O
.	O
OffsetTime	O
#	O
li	O
TIMESTAMP	O
:	O
java	O
.	O
time	O
.	O
Instant	O
,	O
java	O
.	O
time	O
.	O
LocalDateTime	O
,	O
java	O
.	O
time	O
.	O
OffsetDateTime	O
and	O
java	O
.	O
time	O
.	O
ZonedDateTime	O
#	O
li	O
The	O
bytecode	O
enhancement	O
mechanism	O
was	O
redesigned	O
from	O
scratch	O
,	O
and	O
Hibernate	O
features	O
both	O
a	O
Maven	O
and	O
a	O
Gradle	O
plugin	O
.	O
There	O
are	O
three	O
main	O
aspects	O
which	O
we	O
can	O
enhance	O
with	O
bytecode	O
instrumentation	O
:	O
#	O
li	O
Lazy	O
initialization	O
:	O
Fields	O
can	O
be	O
declared	O
as	O
LAZY	O
and	O
they	O
will	O
be	O
fetched	O
only	O
when	O
being	O
accessed	O
for	O
the	O
first	O
time	O
.	O
#	O
li	O
Dirty	O
checking	O
:	O
Entities	O
are	O
enhanced	O
so	O
that	O
they	O
can	O
keep	O
track	O
of	O
all	O
the	O
properties	O
that	O
get	O
changed	O
after	O
being	O
loaded	O
in	O
a	O
Persistence	O
Context	O
.	O
#	O
li	O
Bidirectional	O
associations	O
:	O
It	O
'	O
s	O
possible	O
to	O
synchronize	O
both	O
sides	O
of	O
a	O
bidirectional	O
association	O
automatically	O
,	O
even	O
if	O
the	O
developer	O
only	O
updates	O
a	O
single	O
side	O
.	O
#	O
li	O
Hibernate	O
'	O
s	O
native	O
APIs	O
(	O
Session	O
,	O
etc	O
)	O
have	O
been	O
updated	O
to	O
use	O
generic	O
typed	O
.	O
No	O
need	O
to	O
cast	O
when	O
fetching	O
entities	O
.	O
#	O
li	O
Hibernate	O
5	O
.	O
0	O
expends	O
this	O
to	O
a	O
broader	O
set	O
of	O
types	O
(	O
e	O
.	O
g	O
.	O
UUID	O
)	O
.	O
#	O
li	O
Second	O
-	O
level	O
cache	O
by	O
reference	O
.	O
This	O
feature	O
enables	O
direct	O
storage	O
of	O
entity	O
references	O
into	O
the	O
second	O
level	O
cache	O
for	O
immutable	O
entities	O
.	O
#	O
li	O
Starting	O
with	O
Hibernate	O
5	O
.	O
0	O
,	O
we	O
have	O
a	O
completely	O
new	O
User	O
Guide	O
that	O
was	O
written	O
from	O
scratch	O
.	O
Question	O
-	O
32334319	O
,	O
answer	O
-	O
32334651	O
The	O
API	O
guarantees	O
a	O
stable	O
sorting	O
which	O
Quicksort	O
doesn	O
’	O
t	O
offer	O
.	O
However	O
,	O
when	O
sorting	O
primitive	O
values	O
by	O
their	O
natural	O
order	O
you	O
won	O
’	O
t	O
notice	O
a	O
difference	O
as	O
primitive	O
values	O
have	O
no	O
identity	O
.	O
Therefore	O
,	O
Quicksort	O
is	O
used	O
for	O
primitive	O
arrays	O
as	O
it	O
is	O
slightly	O
more	O
efficient	O
.	O
For	O
objects	O
you	O
may	O
notice	O
,	O
when	O
objects	O
which	O
are	O
deemed	O
equal	O
according	O
to	O
their	O
equals	O
implementation	O
or	O
the	O
provided	O
Comparator	O
change	O
their	O
order	O
.	O
Therefore	O
,	O
Quicksort	O
is	O
not	O
an	O
option	O
.	O
So	O
a	O
variant	O
of	O
MergeSort	O
is	O
used	O
,	O
the	O
current	O
Java	O
versions	O
use	O
TimSort	O
.	O
This	O
applies	O
to	O
both	O
,	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
and	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
,	O
though	O
with	O
Java	O
8	O
,	O
the	O
List	B-api_mention
itself	O
may	O
override	O
the	O
sort	O
algorithms	O
.	O
Question	O
-	O
22463062	O
Java	O
8	O
added	O
a	O
new	O
API	O
for	O
working	O
with	O
dates	O
and	O
times	O
(	O
JSR	O
310	O
)	O
.	O
I	O
have	O
date	O
and	O
time	O
as	O
string	O
(	O
e	O
.	O
g	O
.	O
StringLiteral	B-api_mention
)	O
.	O
How	O
can	O
I	O
obtain	O
a	O
LocalDateTime	O
instance	O
from	O
the	O
given	O
string	O
?	O
After	O
I	O
finished	O
working	O
with	O
the	O
LocalDateTime	B-api_mention
object	O
:	O
How	O
can	O
I	O
then	O
convert	O
the	O
LocalDateTime	B-api_mention
instance	O
back	O
to	O
a	O
string	O
with	O
the	O
same	O
format	O
as	O
shown	O
above	O
?	O
Question	O
-	O
10786042	O
Say	O
I	O
have	O
a	O
URL	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
query	O
?	O
q	O
=	O
and	O
I	O
have	O
a	O
query	O
entered	O
by	O
the	O
user	O
such	O
as	O
:	O
#	O
blockquote	O
I	O
want	O
the	O
result	O
to	O
be	O
a	O
properly	O
encoded	O
URL	O
:	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
query	O
?	O
q	O
=	O
random	O
%	O
20word	O
%	O
20	O
%	O
A3500	O
%	O
20bank	O
%	O
20	O
%	O
24	O
What	O
'	O
s	O
the	O
best	O
way	O
to	O
achieve	O
this	O
?	O
I	O
tried	O
URLEncoder	B-api_mention
and	O
creating	O
URI	O
/	O
URL	O
objects	O
but	O
none	O
of	O
them	O
come	O
out	O
quite	O
right	O
.	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
6540248	O
Below	O
there	O
will	O
be	O
a	O
non	O
-	O
obvious	O
case	O
where	O
Java	O
leaks	O
,	O
besides	O
the	O
standard	O
case	O
of	O
forgotten	O
listeners	O
,	O
static	O
references	O
,	O
bogus	O
/	O
modifiable	O
keys	O
in	O
hashmaps	O
,	O
or	O
just	O
threads	O
stuck	O
without	O
any	O
chance	O
to	O
end	O
their	O
life	O
-	O
cycle	O
.	O
#	O
li	O
File	B-api_mention
.	I-api_mention
deleteOnExit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
always	O
leaks	O
the	O
string	O
,	O
if	O
the	O
string	O
is	O
a	O
substring	O
,	O
the	O
leak	O
is	O
even	O
worse	O
(	O
the	O
underlying	O
char	O
[	O
]	O
is	O
also	O
leaked	O
)	O
-	O
in	O
Java	O
7	O
substring	O
also	O
copies	O
the	O
char	O
[	O
]	O
,	O
so	O
the	O
later	O
doesn	O
'	O
t	O
apply	O
;	O
@	O
Daniel	O
,	O
no	O
needs	O
for	O
votes	O
,	O
though	O
.	O
I	O
'	O
ll	O
concentrate	O
on	O
threads	O
to	O
show	O
the	O
danger	O
of	O
unmanaged	O
threads	O
mostly	O
,	O
don	O
'	O
t	O
wish	O
to	O
even	O
touch	O
swing	O
.	O
#	O
li	O
Runtime	B-api_mention
.	I-api_mention
addShutdownHook	I-api_mention
and	O
not	O
remove	O
.	O
.	O
.	O
and	O
then	O
even	O
with	O
removeShutdownHook	B-api_mention
due	O
to	O
a	O
bug	O
in	O
ThreadGroup	B-api_mention
class	O
regarding	O
unstarted	O
threads	O
it	O
may	O
not	O
get	O
collected	O
,	O
effectively	O
leak	O
the	O
ThreadGroup	B-api_mention
.	O
JGroup	O
has	O
the	O
leak	O
in	O
GossipRouter	O
.	O
#	O
li	O
Creating	O
,	O
but	O
not	O
starting	O
,	O
a	O
Thread	B-api_mention
goes	O
into	O
the	O
same	O
category	O
as	O
above	O
.	O
#	O
li	O
Creating	O
a	O
thread	O
inherits	O
the	O
ContextClassLoader	B-api_mention
and	O
AccessControlContext	B-api_mention
,	O
plus	O
the	O
ThreadGroup	B-api_mention
and	O
any	O
InheritedThreadLocal	B-api_mention
,	O
all	O
those	O
references	O
are	O
potential	O
leaks	O
,	O
along	O
with	O
the	O
entire	O
classes	O
loaded	O
by	O
the	O
classloader	O
and	O
all	O
static	O
references	O
,	O
and	O
ja	O
-	O
ja	O
.	O
The	O
effect	O
is	O
especially	O
visible	O
with	O
the	O
entire	O
j	O
.	O
u	O
.	O
c	O
.	O
Executor	O
framework	O
that	O
features	O
a	O
super	O
simple	O
ThreadFactory	B-api_mention
interface	O
,	O
yet	O
most	O
developers	O
have	O
no	O
clue	O
of	O
the	O
lurking	O
danger	O
.	O
Also	O
a	O
lot	O
of	O
libraries	O
do	O
start	O
threads	O
upon	O
request	O
(	O
way	O
too	O
many	O
industry	O
popular	O
libraries	O
)	O
.	O
#	O
li	O
ThreadLocal	O
caches	O
;	O
those	O
are	O
evil	O
in	O
many	O
cases	O
.	O
I	O
am	O
sure	O
everyone	O
has	O
seen	O
quite	O
a	O
bit	O
of	O
simple	O
caches	O
based	O
on	O
ThreadLocal	B-api_mention
,	O
well	O
the	O
bad	O
news	O
:	O
if	O
the	O
thread	O
keeps	O
going	O
more	O
than	O
expected	O
the	O
life	O
the	O
context	O
ClassLoader	B-api_mention
,	O
it	O
is	O
a	O
pure	O
nice	O
little	O
leak	O
.	O
Do	O
not	O
use	O
ThreadLocal	B-api_mention
caches	O
unless	O
really	O
needed	O
.	O
#	O
li	O
Calling	O
ThreadGroup	B-api_mention
.	I-api_mention
destroy	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
the	O
ThreadGroup	B-api_mention
has	O
no	O
threads	O
itself	O
,	O
but	O
it	O
still	O
keeps	O
child	O
ThreadGroups	B-api_mention
.	O
A	O
bad	O
leak	O
that	O
will	O
prevent	O
the	O
ThreadGroup	B-api_mention
to	O
remove	O
from	O
its	O
parent	O
,	O
but	O
all	O
the	O
children	O
become	O
un	O
-	O
enumerateable	O
.	O
#	O
li	O
Using	O
WeakHashMap	B-api_mention
and	O
the	O
value	O
(	O
in	O
)	O
directly	O
references	O
the	O
key	O
.	O
This	O
is	O
a	O
hard	O
one	O
to	O
find	O
without	O
a	O
heap	O
dump	O
.	O
That	O
applies	O
to	O
all	O
extended	O
Weak	O
/	O
SoftReference	B-api_mention
that	O
might	O
keep	O
a	O
hard	O
reference	O
back	O
to	O
the	O
guarded	O
object	O
.	O
#	O
li	O
Using	O
java	B-api_mention
.	I-api_mention
net	I-api_mention
.	I-api_mention
URL	I-api_mention
with	O
the	O
HTTP	O
(	O
S	O
)	O
protocol	O
and	O
loading	O
the	O
resource	O
from	O
(	O
!	O
)	O
.	O
This	O
one	O
is	O
special	O
,	O
the	O
KeepAliveCache	B-api_mention
creates	O
a	O
new	O
thread	O
in	O
the	O
system	O
ThreadGroup	B-api_mention
which	O
leaks	O
the	O
current	O
thread	O
'	O
s	O
context	O
classloader	O
.	O
The	O
thread	O
is	O
created	O
upon	O
the	O
first	O
request	O
when	O
no	O
alive	O
thread	O
exists	O
,	O
so	O
either	O
you	O
may	O
get	O
lucky	O
or	O
just	O
leak	O
.	O
The	O
leak	O
is	O
already	O
fixed	O
in	O
Java	O
7	O
and	O
the	O
code	O
that	O
creates	O
thread	O
properly	O
removes	O
the	O
context	O
classloader	O
.	O
There	O
are	O
few	O
more	O
cases	O
(	O
like	O
ImageFetcher	B-api_mention
,	O
also	O
fixed	O
)	O
of	O
creating	O
similar	O
threads	O
.	O
#	O
li	O
Using	O
InflaterInputStream	B-api_mention
passing	O
new	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
zip	I-api_mention
.	I-api_mention
Inflater	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
constructor	O
(	O
PNGImageDecoder	B-api_mention
for	O
instance	O
)	O
and	O
not	O
calling	O
end	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
the	O
inflater	O
.	O
Well	O
,	O
if	O
you	O
pass	O
in	O
the	O
constructor	O
with	O
just	O
new	O
,	O
no	O
chance	O
.	O
.	O
.	O
And	O
yes	O
,	O
calling	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
the	O
stream	O
does	O
not	O
close	O
the	O
inflater	O
if	O
it	O
'	O
s	O
manually	O
passed	O
as	O
constructor	O
parameter	O
.	O
This	O
is	O
not	O
a	O
true	O
leak	O
since	O
it	O
'	O
d	O
be	O
released	O
by	O
the	O
finalizer	O
.	O
.	O
.	O
when	O
it	O
deems	O
it	O
necessary	O
.	O
Till	O
that	O
moment	O
it	O
eats	O
native	O
memory	O
so	O
badly	O
it	O
can	O
cause	O
Linux	O
oom	O
_	O
killer	O
to	O
kill	O
the	O
process	O
with	O
impunity	O
.	O
The	O
main	O
issue	O
is	O
that	O
finalization	O
in	O
Java	O
is	O
very	O
unreliable	O
and	O
G1	O
made	O
it	O
worse	O
till	O
7	O
.	O
0	O
.	O
2	O
.	O
Moral	O
of	O
the	O
story	O
:	O
release	O
native	O
resources	O
as	O
soon	O
as	O
you	O
can	O
;	O
the	O
finalizer	O
is	O
just	O
too	O
poor	O
.	O
#	O
li	O
The	O
same	O
case	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
zip	I-api_mention
.	I-api_mention
Deflater	I-api_mention
.	O
This	O
one	O
is	O
far	O
worse	O
since	O
Deflater	B-api_mention
is	O
memory	O
hungry	O
in	O
Java	O
,	O
i	O
.	O
e	O
.	O
always	O
uses	O
15	O
bits	O
(	O
max	O
)	O
and	O
8	O
memory	O
levels	O
(	O
9	O
is	O
max	O
)	O
allocating	O
several	O
hundreds	O
KB	O
of	O
native	O
memory	O
.	O
Fortunately	O
,	O
Deflater	O
is	O
not	O
widely	O
used	O
and	O
to	O
my	O
knowledge	O
JDK	O
contains	O
no	O
misuses	O
.	O
Always	O
call	O
end	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
you	O
manually	O
create	O
a	O
Deflater	B-api_mention
or	O
Inflater	B-api_mention
.	O
The	O
best	O
part	O
of	O
the	O
last	O
two	O
:	O
you	O
can	O
'	O
t	O
find	O
them	O
via	O
normal	O
profiling	O
tools	O
available	O
.	O
(	O
I	O
can	O
add	O
some	O
more	O
time	O
wasters	O
I	O
have	O
encountered	O
upon	O
request	O
.	O
)	O
Good	O
luck	O
and	O
stay	O
safe	O
;	O
leaks	O
are	O
evil	O
!	O
Question	O
-	O
22382453	O
,	O
answer	O
-	O
22384113	O
Made	O
up	O
example	O
Imagine	O
that	O
you	O
want	O
to	O
create	O
the	O
following	O
sequence	O
:	O
1	O
,	O
2	O
,	O
2	O
,	O
3	O
,	O
3	O
,	O
3	O
,	O
4	O
,	O
4	O
,	O
4	O
,	O
4	O
etc	O
.	O
(	O
in	O
other	O
words	O
:	O
1x1	O
,	O
2x2	O
,	O
3x3	O
etc	O
.	O
)	O
With	O
flatMap	B-api_mention
it	O
could	O
look	O
like	O
:	O
#	O
pre	O
where	O
:	O
#	O
li	O
IntStream	B-api_mention
.	I-api_mention
rangeClosed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
stream	O
of	O
int	O
from	O
1	O
to	O
4	O
,	O
inclusive	O
#	O
li	O
IntStream	B-api_mention
.	I-api_mention
iterate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
stream	O
of	O
length	O
i	O
of	O
int	O
i	O
-	O
so	O
applied	O
to	O
i	O
=	O
4	O
it	O
creates	O
a	O
stream	O
:	O
4	O
,	O
4	O
,	O
4	O
,	O
4	O
#	O
li	O
flatMap	B-api_mention
"	O
flattens	O
"	O
the	O
stream	O
and	O
"	O
concatenates	O
"	O
it	O
to	O
the	O
original	O
stream	O
With	O
Java	O
<	O
8	O
you	O
would	O
need	O
two	O
nested	O
loops	O
:	O
#	O
pre	O
Real	O
world	O
example	O
Let	O
'	O
s	O
say	O
I	O
have	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
where	O
each	O
TimeSeries	O
is	O
essentially	O
a	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
I	O
want	O
to	O
get	O
a	O
list	O
of	O
all	O
dates	O
for	O
which	O
at	O
least	O
one	O
of	O
the	O
time	O
series	O
has	O
a	O
value	O
.	O
flatMap	B-api_mention
to	O
the	O
rescue	O
:	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
for	O
each	O
TS	O
,	O
stream	O
dates	O
and	O
flatmap	O
.	B-api_mention
distinct	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
remove	O
duplicates	O
.	B-api_mention
sorted	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
sort	O
ascending	O
.	B-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Not	O
only	O
is	O
it	O
readable	O
,	O
but	O
if	O
you	O
suddenly	O
need	O
to	O
process	O
100k	O
elements	O
,	O
simply	O
adding	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
improve	O
performance	O
without	O
you	O
writing	O
any	O
concurrent	O
code	O
.	O
Question	O
-	O
20746429	O
,	O
answer	O
-	O
24531394	O
Here	O
is	O
a	O
version	O
done	O
on	O
ints	O
-	O
as	O
asked	O
in	O
the	O
question	O
.	O
Usage	O
:	O
StreamUtil	B-api_mention
.	O
takeWhile	O
(	O
args	O
)	O
;	O
Here	O
'	O
s	O
code	O
for	O
StreamUtil	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
13612866	O
It	O
is	O
crucial	O
to	O
know	O
that	O
attributes	O
are	O
not	O
parameters	O
.	O
The	O
return	O
type	O
for	O
attributes	O
is	O
an	O
Object	B-api_mention
,	O
whereas	O
the	O
return	O
type	O
for	O
a	O
parameter	O
is	O
a	O
String	B-api_mention
.	O
When	O
calling	O
the	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
bear	O
in	O
mind	O
that	O
the	O
attributes	O
must	O
be	O
cast	O
.	O
Additionally	O
,	O
there	O
is	O
no	O
servlet	O
specific	O
attributes	O
,	O
and	O
there	O
are	O
no	O
session	O
parameters	O
.	O
This	O
post	O
is	O
written	O
with	O
the	O
purpose	O
to	O
connect	O
on	O
@	O
Bozho	O
'	O
s	O
response	O
,	O
as	O
additional	O
information	O
that	O
can	O
be	O
useful	O
for	O
other	O
people	O
.	O
Question	O
-	O
22463062	O
,	O
answer	O
-	O
22463063	O
Parsing	O
date	O
and	O
time	O
To	O
create	O
a	O
LocalDateTime	B-api_mention
object	O
from	O
a	O
string	O
you	O
can	O
use	O
the	O
static	O
LocalDateTime	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
It	O
takes	O
a	O
string	O
and	O
a	O
DateTimeFormatter	B-api_mention
as	O
parameter	O
.	O
The	O
DateTimeFormatter	B-api_mention
is	O
used	O
to	O
specify	O
the	O
date	O
/	O
time	O
pattern	O
.	O
#	O
pre	O
Formatting	O
date	O
and	O
time	O
To	O
create	O
a	O
formatted	O
string	O
out	O
a	O
LocalDateTime	B-api_mention
object	O
you	O
can	O
use	O
the	O
format	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
pre	O
Note	O
that	O
there	O
are	O
some	O
commonly	O
used	O
date	O
/	O
time	O
formats	O
predefined	O
as	O
constants	O
in	O
DateTimeFormatter	B-api_mention
.	O
For	O
example	O
:	O
Using	O
DateTimeFormatter	B-api_mention
.	I-api_mention
ISO	I-api_mention
_	I-api_mention
DATE	I-api_mention
_	I-api_mention
TIME	I-api_mention
to	O
format	O
the	O
LocalDateTime	B-api_mention
instance	O
from	O
above	O
would	O
result	O
in	O
the	O
string	O
StringLiteral	B-api_mention
.	O
The	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
format	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
are	O
available	O
for	O
all	O
date	O
/	O
time	O
related	O
objects	O
(	O
e	O
.	O
g	O
.	O
LocalDate	B-api_mention
or	O
ZonedDateTime	B-api_mention
)	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27949581	O
Imagine	O
you	O
have	O
a	O
phone	O
book	O
,	O
which	O
contains	O
people	O
,	O
which	O
have	O
a	O
String	B-api_mention
firstName	O
and	O
a	O
String	O
lastName	O
.	O
And	O
it	O
happens	O
that	O
in	O
your	O
phone	O
book	O
,	O
100	O
,	O
000	O
people	O
have	O
the	O
same	O
firstName	O
=	O
StringLiteral	O
.	O
Because	O
you	O
get	O
the	O
data	O
from	O
a	O
database	O
or	O
a	O
file	O
those	O
strings	O
are	O
not	O
interned	O
so	O
your	O
JVM	O
memory	O
contains	O
the	O
char	O
array	O
{	O
CharLiteral	O
,	O
CharLiteral	O
,	O
CharLiteral	O
,	O
CharLiteral	O
}	O
100	O
thousand	O
times	O
,	O
one	O
per	O
John	O
string	O
.	O
Each	O
of	O
these	O
arrays	O
takes	O
,	O
say	O
,	O
20	O
bytes	O
of	O
memory	O
so	O
those	O
100k	O
Johns	O
take	O
up	O
2	O
MB	O
of	O
memory	O
.	O
With	O
deduplication	O
,	O
the	O
JVM	O
will	O
realise	O
that	O
"	O
John	O
"	O
is	O
duplicated	O
many	O
times	O
and	O
make	O
all	O
those	O
John	O
strings	O
point	O
to	O
the	O
same	O
underlying	O
char	O
array	O
,	O
decreasing	O
the	O
memory	O
usage	O
from	O
2MB	O
to	O
20	O
bytes	O
.	O
You	O
can	O
find	O
a	O
more	O
detailed	O
explanation	O
in	O
the	O
JEP	O
.	O
In	O
particular	O
:	O
#	O
blockquote	O
Question	O
-	O
32623834	O
,	O
answer	O
-	O
32652449	O
Another	O
related	O
point	O
:	O
you	O
can	O
make	O
use	O
of	O
the	O
constant	O
pool	O
to	O
improve	O
the	O
performance	O
of	O
string	O
comparisons	O
in	O
some	O
circumstances	O
,	O
by	O
using	O
the	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
That	O
method	O
returns	O
the	O
instance	O
of	O
String	B-api_mention
with	O
the	O
same	O
contents	O
as	O
the	O
String	B-api_mention
on	O
which	O
it	O
is	O
invoked	O
from	O
the	O
String	B-api_mention
constants	O
pool	O
,	O
adding	O
it	O
it	O
if	O
is	O
not	O
yet	O
present	O
.	O
In	O
other	O
words	O
,	O
after	O
using	O
intern	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
all	O
Strings	O
with	O
the	O
same	O
contents	O
are	O
guaranteed	O
to	O
be	O
the	O
same	O
String	B-api_mention
instance	O
as	O
each	O
other	O
and	O
as	O
any	O
String	B-api_mention
constants	O
with	O
those	O
contents	O
,	O
meaning	O
you	O
can	O
then	O
use	O
the	O
equals	O
operator	O
(	O
=	O
=	O
)	O
on	O
them	O
.	O
This	O
is	O
just	O
an	O
example	O
which	O
is	O
not	O
very	O
useful	O
on	O
its	O
own	O
,	O
but	O
it	O
illustrates	O
the	O
point	O
:	O
#	O
pre	O
This	O
little	O
trick	O
isn	O
'	O
t	O
worth	O
designing	O
your	O
code	O
around	O
,	O
but	O
it	O
is	O
worth	O
keeping	O
in	O
mind	O
for	O
the	O
day	O
when	O
you	O
notice	O
a	O
little	O
more	O
speed	O
could	O
be	O
eked	O
out	O
of	O
some	O
bit	O
of	O
performance	O
sensitive	O
code	O
by	O
using	O
the	O
=	O
=	O
operator	O
on	O
a	O
string	O
with	O
judicious	O
use	O
of	O
intern	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
9481865	O
I	O
am	O
trying	O
to	O
develop	O
a	O
system	O
where	O
there	O
are	O
different	O
nodes	O
that	O
are	O
run	O
on	O
different	O
system	O
or	O
on	O
different	O
ports	O
on	O
the	O
same	O
system	O
.	O
Now	O
all	O
the	O
nodes	O
create	O
a	O
Socket	B-api_mention
with	O
a	O
target	O
IP	O
as	O
the	O
IP	O
of	O
a	O
special	O
node	O
known	O
as	O
a	O
bootstrapping	O
node	O
.	O
The	O
nodes	O
then	O
create	O
their	O
own	O
ServerSocket	B-api_mention
and	O
start	O
listening	O
for	O
connections	O
.	O
The	O
bootstrapping	O
node	O
maintains	O
a	O
list	O
of	O
Nodes	O
and	O
returns	O
them	O
on	O
being	O
quired	O
.	O
Now	O
what	O
I	O
need	O
is	O
the	O
node	O
must	O
register	O
its	O
IP	O
to	O
the	O
bootstrapping	O
node	O
.	O
I	O
tried	O
using	O
cli	B-api_mention
.	I-api_mention
getInetAddress	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
once	O
the	O
client	O
connects	O
to	O
the	O
ServerSocket	B-api_mention
of	O
bootstrapping	O
node	O
but	O
that	O
didn	O
'	O
t	O
work	O
.	O
#	O
li	O
I	O
need	O
the	O
client	O
to	O
register	O
its	O
PPP	O
IP	O
if	O
available	O
;	O
#	O
li	O
Otherwise	O
the	O
LAN	O
IP	O
if	O
available	O
;	O
#	O
li	O
Otherwise	O
it	O
must	O
register	O
127	O
.	O
0	O
.	O
0	O
.	O
1	O
assuming	O
its	O
the	O
same	O
computer	O
.	O
Please	O
help	O
me	O
with	O
this	O
.	O
EDIT	O
using	O
the	O
code	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
My	O
PPP	O
Connection	O
IP	O
address	O
is	O
:	O
117	O
.	O
204	O
.	O
44	O
.	O
192	O
but	O
the	O
above	O
returns	O
me	O
192	O
.	O
168	O
.	O
1	O
.	O
2	O
EDIT2	O
I	O
am	O
using	O
the	O
following	O
code	O
:	O
#	O
pre	O
I	O
am	O
able	O
to	O
get	O
all	O
the	O
IP	O
addresses	O
associated	O
all	O
NetworkInterface	B-api_mention
s	O
,	O
but	O
how	O
do	O
I	O
distinguish	O
them	O
?	O
?	O
This	O
is	O
the	O
output	O
I	O
am	O
getting	O
:	O
#	O
pre	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29922831	O
Three	O
questions	O
:	O
three	O
-	O
part	O
answer	O
:	O
Is	O
it	O
okay	O
from	O
a	O
design	O
point	O
of	O
view	O
?	O
Absolutely	O
.	O
Nothing	O
wrong	O
with	O
it	O
.	O
If	O
you	O
need	O
to	O
do	O
lots	O
of	O
iterating	O
over	O
your	O
enum	O
,	O
the	O
stream	O
API	O
is	O
the	O
clean	O
way	O
to	O
go	O
and	O
hiding	O
the	O
boiler	O
plate	O
behind	O
a	O
little	O
method	O
is	O
fine	O
.	O
Although	O
I	O
’	O
d	O
consider	O
OldCumudgeon	O
’	O
s	O
version	O
even	O
better	O
.	O
Is	O
it	O
okay	O
from	O
a	O
performance	O
point	O
of	O
view	O
?	O
It	O
most	O
likely	O
doesn	O
’	O
t	O
matter	O
.	O
Most	O
of	O
the	O
time	O
,	O
enums	O
are	O
not	O
that	O
big	O
.	O
Therefore	O
,	O
whatever	O
overhead	O
there	O
is	O
for	O
one	O
method	O
or	O
the	O
other	O
probably	O
doesn	O
’	O
t	O
matter	O
in	O
99	O
.	O
9	O
%	O
of	O
the	O
cases	O
.	O
Of	O
course	O
,	O
there	O
are	O
the	O
0	O
.	O
1	O
%	O
where	O
it	O
does	O
.	O
In	O
that	O
case	O
:	O
measure	O
properly	O
,	O
with	O
your	O
real	O
-	O
world	O
data	O
and	O
consumers	O
.	O
If	O
I	O
had	O
to	O
bet	O
,	O
I	O
’	O
d	O
expect	O
the	O
for	O
each	O
loop	O
to	O
be	O
faster	O
,	O
since	O
it	O
maps	O
more	O
directly	O
to	O
the	O
memory	O
model	O
,	O
but	O
don	O
’	O
t	O
guess	O
when	O
talking	O
performance	O
,	O
and	O
don	O
’	O
t	O
tune	O
before	O
there	O
is	O
actual	O
need	O
for	O
tuning	O
.	O
Write	O
your	O
code	O
in	O
a	O
way	O
that	O
is	O
correct	O
first	O
,	O
easy	O
to	O
read	O
second	O
and	O
only	O
then	O
worry	O
about	O
performance	O
of	O
code	O
style	O
.	O
Why	O
aren	O
’	O
t	O
Enums	O
properly	O
integrated	O
into	O
the	O
Stream	B-api_mention
API	O
?	O
If	O
you	O
compare	O
Java	O
’	O
s	O
Stream	B-api_mention
API	O
to	O
the	O
equivalent	O
in	O
many	O
other	O
languages	O
,	O
it	O
appears	O
seriously	O
limited	O
.	O
There	O
are	O
various	O
pieces	O
that	O
are	O
missing	O
(	O
reusable	O
Streams	O
and	O
Optionals	O
as	O
Streams	O
,	O
for	O
example	O
)	O
.	O
On	O
the	O
other	O
hand	O
,	O
implementing	O
the	O
Stream	B-api_mention
API	O
was	O
certainly	O
a	O
huge	O
change	O
for	O
the	O
API	O
.	O
It	O
was	O
postponed	O
multiple	O
times	O
for	O
a	O
reason	O
.	O
So	O
I	O
guess	O
Oracle	O
wanted	O
to	O
limit	O
the	O
changes	O
to	O
the	O
most	O
important	O
use	O
cases	O
.	O
Enums	O
aren	O
’	O
t	O
used	O
that	O
much	O
anyway	O
.	O
Sure	O
,	O
every	O
project	O
has	O
a	O
couple	O
of	O
them	O
,	O
but	O
they	O
’	O
re	O
nothing	O
compared	O
to	O
the	O
number	O
of	O
Lists	O
and	O
other	O
Collections	B-api_mention
.	O
Even	O
when	O
you	O
have	O
an	O
Enum	O
,	O
in	O
many	O
cases	O
you	O
won	O
’	O
t	O
ever	O
iterate	O
over	O
it	O
.	O
Lists	O
and	O
Sets	O
,	O
on	O
the	O
other	O
hand	O
,	O
are	O
probably	O
iterated	O
over	O
almost	O
every	O
time	O
.	O
I	O
assume	O
that	O
these	O
were	O
the	O
reasons	O
why	O
the	O
Enums	O
didn	O
’	O
t	O
get	O
their	O
own	O
adapter	O
to	O
the	O
Stream	B-api_mention
world	O
.	O
We	O
’	O
ll	O
see	O
whether	O
more	O
of	O
this	O
gets	O
added	O
in	O
future	O
versions	O
.	O
And	O
until	O
then	O
you	O
always	O
can	O
use	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28584932	O
Your	O
reasoning	O
is	O
that	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
should	O
not	O
be	O
equal	O
to	O
itself	O
because	O
it	O
is	O
“	O
likely	O
”	O
to	O
have	O
been	O
obtained	O
as	O
the	O
result	O
of	O
a	O
loss	O
of	O
accuracy	O
.	O
This	O
line	O
of	O
reasoning	O
applies	O
to	O
all	O
of	O
floating	O
-	O
point	O
.	O
Any	O
finite	O
value	O
can	O
be	O
obtained	O
as	O
the	O
result	O
of	O
an	O
inaccurate	O
operation	O
.	O
That	O
did	O
not	O
push	O
the	O
IEEE	O
754	O
standardization	O
committee	O
to	O
define	O
=	O
=	O
as	O
always	O
evaluating	O
to	O
false	O
for	O
finite	O
values	O
,	O
so	O
why	O
should	O
infinities	O
be	O
different	O
?	O
As	O
defined	O
,	O
=	O
=	O
is	O
useful	O
for	O
people	O
who	O
understand	O
what	O
it	O
does	O
(	O
that	O
is	O
,	O
test	O
the	O
floating	O
-	O
point	O
values	O
that	O
have	O
been	O
obtained	O
,	O
and	O
certainly	O
not	O
the	O
values	O
that	O
should	O
have	O
been	O
obtained	O
with	O
real	O
computations	O
)	O
.	O
For	O
anyone	O
who	O
understands	O
that	O
,	O
and	O
you	O
need	O
to	O
understand	O
it	O
to	O
use	O
floating	O
-	O
point	O
even	O
for	O
computations	O
that	O
do	O
not	O
involve	O
infinity	O
,	O
having	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
=	O
=	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
evaluate	O
to	O
true	O
is	O
convenient	O
,	O
if	O
only	O
to	O
test	O
if	O
the	O
floating	O
-	O
point	O
result	O
of	O
a	O
floating	O
-	O
point	O
computation	O
is	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
.	O
That	O
leaves	O
the	O
question	O
of	O
why	O
NaN	O
can	O
afford	O
to	O
have	O
special	O
behavior	O
,	O
and	O
infinities	O
should	O
follow	O
the	O
same	O
general	O
principles	O
as	O
finite	O
values	O
.	O
NaN	O
is	O
different	O
from	O
infinities	O
:	O
the	O
underlying	O
principle	O
of	O
the	O
IEEE	O
754	O
standard	O
is	O
that	O
values	O
are	O
exactly	O
what	O
they	O
are	O
,	O
but	O
the	O
result	O
of	O
an	O
operation	O
can	O
be	O
approximated	O
with	O
respect	O
to	O
the	O
real	O
result	O
,	O
and	O
in	O
this	O
case	O
,	O
the	O
resulting	O
floating	O
-	O
point	O
value	O
is	O
obtained	O
according	O
to	O
the	O
rounding	O
mode	O
.	O
Forget	O
for	O
an	O
instant	O
that	O
1	O
.	O
0	O
/	O
0	O
.	O
0	O
is	O
defined	O
as	O
+	O
inf	O
,	O
which	O
is	O
an	O
annoyance	O
in	O
this	O
discussion	O
.	O
Think	O
for	O
the	O
moment	O
of	O
Double	O
.	O
POSITIVE	O
_	O
INFINITY	O
only	O
as	O
the	O
result	O
of	O
operations	O
such	O
as	O
1	O
.	O
0e100	O
/	O
1	O
.	O
0e	O
-	O
300	O
or	O
Double	O
.	O
MAX	O
_	O
VALUE	O
+	O
Double	O
.	O
MAX	O
_	O
VALUE	O
.	O
For	O
these	O
operations	O
,	O
+	O
inf	O
is	O
the	O
closest	O
approximation	O
of	O
the	O
real	O
result	O
,	O
just	O
like	O
for	O
operations	O
that	O
produce	O
a	O
finite	O
result	O
.	O
By	O
contrast	O
,	O
NaN	O
is	O
the	O
result	O
you	O
obtain	O
when	O
the	O
operation	O
doesn	O
'	O
t	O
make	O
sense	O
.	O
It	O
is	O
defensible	O
to	O
have	O
NaN	O
behave	O
specially	O
,	O
but	O
inf	O
is	O
just	O
an	O
approximation	O
of	O
all	O
the	O
values	O
too	O
large	O
to	O
represent	O
.	O
In	O
reality	O
,	O
1	O
.	O
0	O
/	O
0	O
.	O
0	O
also	O
produces	O
+	O
inf	O
,	O
but	O
that	O
should	O
be	O
considered	O
an	O
exception	O
.	O
It	O
would	O
have	O
been	O
just	O
as	O
coherent	O
to	O
define	O
the	O
result	O
of	O
that	O
operation	O
as	O
NaN	O
,	O
but	O
defining	O
it	O
as	O
+	O
inf	O
was	O
more	O
convenient	O
in	O
the	O
implementation	O
of	O
some	O
algorithms	O
.	O
An	O
example	O
is	O
provided	O
page	O
10	O
in	O
Kahan	O
'	O
s	O
notes	O
.	O
More	O
details	O
than	O
most	O
will	O
wish	O
for	O
are	O
in	O
the	O
article	O
“	O
Branch	O
Cuts	O
for	O
Complex	O
Elementary	O
Functions	O
,	O
or	O
Much	O
Ado	O
About	O
Nothing	O
'	O
s	O
Sign	O
Bit	O
”	O
.	O
I	O
would	O
also	O
interpret	O
the	O
existence	O
in	O
IEEE	O
754	O
of	O
a	O
“	O
division	O
by	O
zero	O
”	O
flag	O
separate	O
from	O
the	O
NaN	O
flag	O
as	O
recognition	O
that	O
the	O
user	O
may	O
want	O
to	O
treat	O
division	O
by	O
zero	O
specially	O
although	O
it	O
is	O
not	O
defined	O
as	O
producing	O
NaN	O
.	O
Question	O
-	O
13195797	O
,	O
answer	O
-	O
20043507	O
Peter	O
Lawrey	O
'	O
s	O
answer	O
is	O
great	O
because	O
it	O
is	O
simple	O
and	O
not	O
depending	O
on	O
anything	O
special	O
,	O
and	O
it	O
'	O
s	O
the	O
way	O
you	O
should	O
do	O
it	O
.	O
If	O
you	O
need	O
something	O
that	O
removes	O
subdirectories	O
and	O
their	O
contents	O
as	O
well	O
,	O
use	O
recursion	O
:	O
#	O
pre	O
To	O
spare	O
subdirectories	O
and	O
their	O
contents	O
(	O
part	O
of	O
your	O
question	O
)	O
,	O
modify	O
as	O
follows	O
:	O
#	O
pre	O
Or	O
,	O
since	O
you	O
wanted	O
a	O
one	O
-	O
line	O
solution	O
:	O
for	O
(	O
args	O
)	O
if	O
(	O
args	O
)	O
file	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Using	O
an	O
external	O
library	O
for	O
such	O
a	O
trivial	O
task	O
is	O
not	O
a	O
good	O
idea	O
unless	O
you	O
need	O
this	O
library	O
for	O
something	O
else	O
anyway	O
,	O
in	O
which	O
case	O
it	O
is	O
preferrable	O
to	O
use	O
existing	O
code	O
.	O
You	O
appear	O
to	O
be	O
using	O
the	O
Apache	O
library	O
anyway	O
so	O
use	O
its	O
FileUtils	B-api_mention
.	I-api_mention
cleanDirectory	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
27760556	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923105	O
Oh	O
,	O
those	O
coding	O
styles	O
are	O
to	O
be	O
taken	O
with	O
a	O
bit	O
of	O
salt	O
.	O
#	O
li	O
(	O
+	O
)	O
Passing	O
an	O
Option	O
result	O
to	O
another	O
method	O
,	O
without	O
any	O
semantic	O
analysis	O
;	O
leaving	O
that	O
to	O
the	O
method	O
,	O
is	O
quite	O
alright	O
.	O
#	O
li	O
(	O
-	O
)	O
Using	O
Optional	O
parameters	O
causing	O
conditional	O
logic	O
inside	O
the	O
methods	O
is	O
literally	O
contra	O
-	O
productive	O
.	O
#	O
li	O
(	O
-	O
)	O
Needing	O
to	O
pack	O
an	O
argument	O
in	O
an	O
Optional	B-api_mention
,	O
is	O
suboptimal	O
for	O
the	O
compiler	O
,	O
and	O
does	O
an	O
unnecessary	O
wrapping	O
.	O
#	O
li	O
(	O
-	O
)	O
In	O
comparison	O
to	O
nullable	O
parameters	O
Optional	B-api_mention
is	O
more	O
costly	O
.	O
In	O
general	O
:	O
Optional	B-api_mention
unifies	O
two	O
states	O
,	O
which	O
have	O
to	O
be	O
unraveled	O
.	O
Hence	O
better	O
suited	O
for	O
result	O
than	O
input	O
,	O
for	O
the	O
complexity	O
of	O
the	O
data	O
flow	O
.	O
Question	O
-	O
5011932	O
I	O
am	O
storing	O
a	O
SQL	O
query	O
in	O
my	O
strings	O
.	O
xml	O
file	O
and	O
I	O
want	O
to	O
use	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
to	O
build	O
the	O
final	O
string	O
in	O
code	O
.	O
The	O
SELECT	O
statement	O
uses	O
a	O
like	O
,	O
something	O
like	O
this	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
'	O
%	O
something	O
%	O
'	O
In	O
order	O
to	O
format	O
that	O
I	O
replace	O
'	O
something	O
'	O
with	O
%	O
1	O
$	O
s	O
so	O
it	O
becomes	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
\	O
'	O
%	O
%	O
1	O
$	O
s	O
%	O
\	O
'	O
I	O
escape	O
the	O
single	O
quotes	O
with	O
the	O
backslash	O
.	O
However	O
I	O
am	O
not	O
able	O
to	O
escape	O
the	O
%	O
sign	O
.	O
How	O
can	O
I	O
include	O
a	O
like	O
statement	O
in	O
my	O
strings	O
.	O
xml	O
file	O
?	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
22593693	O
There	O
seem	O
to	O
be	O
many	O
questions	O
about	O
this	O
issue	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Scanner	I-api_mention
.	O
I	O
think	O
a	O
more	O
readable	O
/	O
idiomatic	O
solution	O
would	O
be	O
to	O
call	O
scanner	B-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
drop	O
any	O
newline	O
characters	O
after	O
calling	O
nextInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
4576352	O
,	O
answer	O
-	O
4576367	O
using	O
public	O
String	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
work	O
usage	O
would	O
be	O
str	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
executing	O
StringLiteral	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
returns	O
:	O
lakjsdf	O
xx	O
Question	O
-	O
8725387	O
In	O
Java	O
there	O
are	O
the	O
SortedSet	B-api_mention
and	O
SortedMap	B-api_mention
interfaces	O
.	O
Both	O
belong	O
to	O
Java	O
'	O
s	O
standard	O
Collections	B-api_mention
framework	O
and	O
provide	O
a	O
sorted	O
way	O
to	O
access	O
the	O
elements	O
.	O
However	O
,	O
in	O
my	O
understanding	O
there	O
is	O
no	O
SortedList	O
in	O
Java	O
.	O
You	O
can	O
use	O
java	O
.	O
util	O
.	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
a	O
list	O
.	O
Any	O
idea	O
why	O
it	O
is	O
designed	O
like	O
that	O
?	O
Question	O
-	O
22929237	O
,	O
answer	O
-	O
28564046	O
You	O
can	O
use	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
as	O
:	O
Date	B-api_mention
date	O
=	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
No	O
need	O
to	O
add	O
time	O
and	O
time	O
zone	O
info	O
here	O
because	O
they	O
are	O
taken	O
implicitly	O
.	O
See	O
Simpliest	O
java8	O
LocalDate	B-api_mention
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
conversion	O
and	O
vice	O
versa	O
?	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923015	O
I	O
believe	O
the	O
reson	O
of	O
being	O
is	O
you	O
have	O
to	O
first	O
check	O
whether	O
or	O
not	O
Optional	B-api_mention
is	O
null	O
itself	O
and	O
then	O
try	O
to	O
evaluate	O
value	O
it	O
wraps	O
.	O
Too	O
many	O
unnecessary	O
validations	O
.	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23885950	O
Short	O
answer	O
:	O
#	O
pre	O
Explanation	O
:	O
(	O
based	O
on	O
this	O
question	O
about	O
LocalDate	B-api_mention
)	O
Despite	O
its	O
name	O
,	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
represents	O
an	O
instant	O
on	O
the	O
time	O
-	O
line	O
,	O
not	O
a	O
"	O
date	O
"	O
.	O
The	O
actual	O
data	O
stored	O
within	O
the	O
object	O
is	O
a	O
long	O
count	O
of	O
milliseconds	O
since	O
1970	O
-	O
01	O
-	O
01T00	O
:	O
00Z	O
(	O
midnight	O
at	O
the	O
start	O
of	O
1970	O
GMT	O
/	O
UTC	O
)	O
.	O
The	O
equivalent	O
class	O
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
in	O
JSR	O
-	O
310	O
is	O
Instant	B-api_mention
,	O
thus	O
there	O
are	O
convenient	O
methods	O
to	O
provide	O
the	O
conversion	O
to	O
and	O
fro	O
:	O
#	O
pre	O
A	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
instance	O
has	O
no	O
concept	O
of	O
time	O
-	O
zone	O
.	O
This	O
might	O
seem	O
strange	O
if	O
you	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
,	O
because	O
the	O
toString	B-api_mention
is	O
relative	O
to	O
a	O
time	O
-	O
zone	O
.	O
However	O
that	O
method	O
actually	O
uses	O
Java	O
'	O
s	O
default	O
time	O
-	O
zone	O
on	O
the	O
fly	O
to	O
provide	O
the	O
string	O
.	O
The	O
time	O
-	O
zone	O
is	O
not	O
part	O
of	O
the	O
actual	O
state	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
.	O
An	O
Instant	O
also	O
does	O
not	O
contain	O
any	O
information	O
about	O
the	O
time	O
-	O
zone	O
.	O
Thus	O
,	O
to	O
convert	O
from	O
an	O
Instant	O
to	O
a	O
local	O
date	O
-	O
time	O
it	O
is	O
necessary	O
to	O
specify	O
a	O
time	O
-	O
zone	O
.	O
This	O
might	O
be	O
the	O
default	O
zone	O
-	O
ZoneId	B-api_mention
.	I-api_mention
systemDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
or	O
it	O
might	O
be	O
a	O
time	O
-	O
zone	O
that	O
your	O
application	O
controls	O
,	O
such	O
as	O
a	O
time	O
-	O
zone	O
from	O
user	O
preferences	O
.	O
LocalDateTime	B-api_mention
has	O
a	O
convenient	O
factory	O
method	O
that	O
takes	O
both	O
the	O
instant	O
and	O
time	O
-	O
zone	O
:	O
#	O
pre	O
In	O
reverse	O
,	O
the	O
LocalDateTime	B-api_mention
the	O
time	O
-	O
zone	O
is	O
specified	O
by	O
calling	O
the	O
atZone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
ZonedDateTime	B-api_mention
can	O
then	O
be	O
converted	O
directly	O
to	O
an	O
Instant	B-api_mention
:	O
#	O
pre	O
Note	O
that	O
the	O
conversion	O
from	O
LocalDateTime	B-api_mention
to	O
ZonedDateTime	B-api_mention
has	O
the	O
potential	O
to	O
introduce	O
unexpected	O
behaviour	O
.	O
This	O
is	O
because	O
not	O
every	O
local	O
date	O
-	O
time	O
exists	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
In	O
autumn	O
/	O
fall	O
,	O
there	O
is	O
an	O
overlap	O
in	O
the	O
local	O
time	O
-	O
line	O
where	O
the	O
same	O
local	O
date	O
-	O
time	O
occurs	O
twice	O
.	O
In	O
spring	O
,	O
there	O
is	O
a	O
gap	O
,	O
where	O
an	O
hour	O
disappears	O
.	O
See	O
the	O
Javadoc	O
of	O
atZone	B-api_mention
(	I-api_mention
ZoneId	I-api_mention
)	I-api_mention
for	O
more	O
the	O
definition	O
of	O
what	O
the	O
conversion	O
will	O
do	O
.	O
Summary	O
,	O
if	O
you	O
round	O
-	O
trip	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
to	O
a	O
LocalDateTime	B-api_mention
and	O
back	O
to	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
you	O
may	O
end	O
up	O
with	O
a	O
different	O
instant	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
Question	O
-	O
20945049	O
We	O
all	O
know	O
that	O
String	B-api_mention
is	O
immutable	O
in	O
Java	O
,	O
but	O
check	O
the	O
following	O
code	O
:	O
#	O
pre	O
Why	O
does	O
this	O
program	O
operate	O
like	O
this	O
?	O
And	O
why	O
is	O
the	O
value	O
of	O
s1	O
and	O
s2	O
changed	O
,	O
but	O
not	O
s3	O
?	O
Question	O
-	O
23453287	O
One	O
of	O
the	O
most	O
useful	O
features	O
of	O
Java	O
8	O
are	O
the	O
new	O
default	O
methods	O
on	O
interfaces	O
.	O
There	O
are	O
essentially	O
two	O
reasons	O
(	O
there	O
may	O
be	O
others	O
)	O
why	O
they	O
have	O
been	O
introduced	O
:	O
#	O
li	O
Providing	O
actual	O
default	O
implementations	O
.	O
Example	O
:	O
Iterator	B-api_mention
.	I-api_mention
remove	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
Allowing	O
for	O
JDK	O
API	O
evolution	O
.	O
Example	O
:	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
)	I-api_mention
From	O
an	O
API	O
designer	O
'	O
s	O
perspective	O
,	O
I	O
would	O
have	O
liked	O
to	O
be	O
able	O
to	O
use	O
other	O
modifiers	O
on	O
interface	O
methods	O
,	O
e	O
.	O
g	O
.	O
final	O
.	O
This	O
would	O
be	O
useful	O
when	O
adding	O
convenience	O
methods	O
,	O
preventing	O
"	O
accidental	O
"	O
overrides	O
in	O
implementing	O
classes	O
:	O
#	O
pre	O
The	O
above	O
is	O
already	O
common	O
practice	O
if	O
Sender	O
were	O
a	O
class	O
:	O
#	O
pre	O
Now	O
,	O
default	O
and	O
final	O
are	O
obviously	O
contradicting	O
keywords	O
,	O
but	O
the	O
default	O
keyword	O
itself	O
would	O
not	O
have	O
been	O
strictly	O
required	O
,	O
so	O
I	O
'	O
m	O
assuming	O
that	O
this	O
contradiction	O
is	O
deliberate	O
,	O
to	O
reflect	O
the	O
subtle	O
differences	O
between	O
"	O
class	O
methods	O
with	O
body	O
"	O
(	O
just	O
methods	O
)	O
and	O
"	O
interface	O
methods	O
with	O
body	O
"	O
(	O
default	O
methods	O
)	O
,	O
i	O
.	O
e	O
.	O
differences	O
which	O
I	O
have	O
not	O
yet	O
understood	O
.	O
At	O
some	O
point	O
of	O
time	O
,	O
support	O
for	O
modifiers	O
like	O
static	O
and	O
final	O
on	O
interface	O
methods	O
was	O
not	O
yet	O
fully	O
explored	O
,	O
citing	O
Brian	O
Goetz	O
:	O
#	O
blockquote	O
Since	O
that	O
time	O
in	O
late	O
2011	O
,	O
obviously	O
,	O
support	O
for	O
static	O
methods	O
in	O
interfaces	O
was	O
added	O
.	O
Clearly	O
,	O
this	O
added	O
a	O
lot	O
of	O
value	O
to	O
the	O
JDK	O
libraries	O
themselves	O
,	O
such	O
as	O
with	O
Comparator	B-api_mention
.	I-api_mention
comparing	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
:	O
What	O
is	O
the	O
reason	O
final	O
(	O
and	O
also	O
static	O
final	O
)	O
never	O
made	O
it	O
to	O
Java	O
8	O
interfaces	O
?	O
Question	O
-	O
26548660	O
,	O
answer	O
-	O
26548894	O
You	O
can	O
use	O
a	O
Callback	B-api_mention
to	O
get	O
onSuccess	B-api_mention
and	O
onError	B-api_mention
events	O
.	O
Just	O
add	O
a	O
new	O
Callback	B-api_mention
to	O
your	O
request	O
like	O
so	O
:	O
Picasso	B-api_mention
.	I-api_mention
with	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
load	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
into	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Then	O
you	O
can	O
perform	O
any	O
alterations	O
and	O
modifications	O
in	O
the	O
onSuccess	B-api_mention
callback	O
.	O
Question	O
-	O
23932061	O
,	O
answer	O
-	O
23932216	O
You	O
can	O
easily	O
create	O
a	O
Stream	B-api_mention
out	O
of	O
an	O
Iterable	B-api_mention
or	O
Iterator	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14495128	O
If	O
the	O
Math	B-api_mention
.	I-api_mention
Random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
calls	O
the	O
operating	O
system	O
to	O
get	O
the	O
time	O
of	O
day	O
,	O
then	O
you	O
cannot	O
compare	O
it	O
to	O
your	O
function	O
.	O
Your	O
function	O
is	O
a	O
PRNG	O
,	O
whereas	O
that	O
function	O
is	O
striving	O
for	O
real	O
random	O
numbers	O
.	O
Apples	O
and	O
oranges	O
.	O
Your	O
PRNG	O
may	O
be	O
fast	O
,	O
but	O
it	O
does	O
not	O
have	O
enough	O
state	O
information	O
to	O
achieve	O
a	O
long	O
period	O
before	O
it	O
repeats	O
(	O
and	O
its	O
logic	O
is	O
not	O
sophisticated	O
enough	O
to	O
even	O
achieve	O
the	O
periods	O
that	O
are	O
possible	O
with	O
that	O
much	O
state	O
information	O
)	O
.	O
Period	O
is	O
the	O
length	O
of	O
the	O
sequence	O
before	O
your	O
PRNG	O
begins	O
to	O
repeat	O
itself	O
.	O
This	O
happens	O
as	O
soon	O
as	O
the	O
PRNG	O
machine	O
makes	O
a	O
state	O
transition	O
to	O
a	O
state	O
which	O
is	O
identical	O
to	O
some	O
past	O
state	O
.	O
From	O
there	O
,	O
it	O
will	O
repeat	O
the	O
transitions	O
which	O
began	O
in	O
that	O
state	O
.	O
Another	O
problem	O
with	O
PRNG	O
'	O
s	O
can	O
be	O
a	O
low	O
number	O
of	O
unique	O
sequences	O
,	O
as	O
well	O
as	O
degenerate	O
convergence	O
on	O
a	O
particular	O
sequence	O
which	O
repeats	O
.	O
There	O
can	O
also	O
be	O
undesirable	O
patterns	O
.	O
For	O
instance	O
,	O
suppose	O
that	O
a	O
PRNG	O
looks	O
fairly	O
random	O
when	O
the	O
numbers	O
are	O
printed	O
in	O
decimal	O
,	O
but	O
an	O
inspection	O
of	O
the	O
values	O
in	O
binary	O
shows	O
that	O
bit	O
4	O
is	O
simply	O
toggling	O
between	O
0	O
and	O
1	O
on	O
each	O
call	O
.	O
Oops	O
!	O
Take	O
a	O
look	O
at	O
the	O
Mersenne	O
Twister	O
and	O
other	O
algorithms	O
.	O
There	O
are	O
ways	O
to	O
strike	O
a	O
balance	O
between	O
the	O
period	O
length	O
and	O
CPU	O
cycles	O
.	O
One	O
basic	O
approach	O
(	O
used	O
in	O
the	O
Mersenne	O
Twister	O
)	O
is	O
to	O
cycle	O
around	O
in	O
the	O
state	O
vector	O
.	O
That	O
is	O
to	O
say	O
,	O
when	O
a	O
number	O
is	O
being	O
generated	O
,	O
it	O
is	O
not	O
based	O
on	O
the	O
entire	O
state	O
,	O
just	O
on	O
a	O
few	O
words	O
from	O
the	O
state	O
array	O
subject	O
to	O
a	O
few	O
bit	O
operations	O
.	O
But	O
at	O
each	O
step	O
,	O
the	O
algorithm	O
also	O
moves	O
around	O
in	O
the	O
array	O
,	O
scrambling	O
the	O
contents	O
a	O
little	O
bit	O
at	O
a	O
time	O
.	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561687	O
This	O
works	O
because	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
min	I-api_mention
resolves	O
to	O
an	O
implementation	O
of	O
the	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
.	O
The	O
method	O
reference	O
of	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
min	I-api_mention
resolves	O
to	O
Integer	B-api_mention
.	I-api_mention
min	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
resolved	O
to	O
IntBinaryOperator	B-api_mention
,	O
and	O
presumably	O
autoboxing	O
occurs	O
somewhere	O
making	O
it	O
a	O
BinaryOperator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
And	O
the	O
min	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
resp	O
max	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
of	O
the	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ask	O
the	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
to	O
be	O
implemented	O
.	O
Now	O
this	O
resolves	O
to	O
the	O
single	O
method	O
Integer	B-api_mention
compareTo	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Which	O
is	O
of	O
type	O
BinaryOperator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
And	O
thus	O
the	O
magic	O
has	O
happened	O
as	O
both	O
methods	O
are	O
a	O
BinaryOperator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Question	O
-	O
6992608	O
,	O
answer	O
-	O
6992643	O
There	O
'	O
s	O
no	O
built	O
in	O
type	O
for	O
ConcurrentHashSet	B-api_mention
because	O
you	O
can	O
always	O
derive	O
a	O
set	O
from	O
a	O
map	O
.	O
Since	O
there	O
are	O
many	O
types	O
of	O
maps	O
,	O
you	O
use	O
a	O
method	O
to	O
produce	O
a	O
set	O
from	O
a	O
given	O
map	O
(	O
or	O
map	O
class	O
)	O
.	O
Prior	O
to	O
Java	O
8	O
,	O
you	O
produce	O
a	O
concurrent	O
hash	O
set	O
backed	O
by	O
a	O
concurrent	O
hash	O
map	O
,	O
by	O
using	O
Collections	B-api_mention
.	I-api_mention
newSetFromMap	I-api_mention
(	I-api_mention
map	I-api_mention
)	I-api_mention
In	O
Java	O
8	O
(	O
pointed	O
out	O
by	O
@	O
Matt	O
)	O
,	O
you	O
can	O
get	O
a	O
concurrent	O
hash	O
set	O
view	O
via	O
ConcurrentHashMap	B-api_mention
.	I-api_mention
newKeySet	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
This	O
is	O
a	O
bit	O
simpler	O
than	O
the	O
old	O
newSetFromMap	B-api_mention
which	O
required	O
you	O
to	O
pass	O
in	O
an	O
empty	O
map	O
object	O
.	O
But	O
it	O
is	O
specific	O
to	O
ConcurrentHashMap	B-api_mention
.	O
Anyway	O
,	O
the	O
Java	O
designers	O
could	O
have	O
created	O
a	O
new	O
set	O
interface	O
every	O
time	O
a	O
new	O
map	O
interface	O
was	O
created	O
,	O
but	O
that	O
pattern	O
would	O
be	O
impossible	O
to	O
enforce	O
when	O
third	O
parties	O
create	O
their	O
own	O
maps	O
.	O
It	O
is	O
better	O
to	O
have	O
the	O
static	O
methods	O
that	O
derive	O
new	O
sets	O
;	O
that	O
approach	O
always	O
works	O
,	O
even	O
when	O
you	O
create	O
your	O
own	O
map	O
implementations	O
.	O
Question	O
-	O
9510125	O
,	O
answer	O
-	O
9511578	O
Just	O
IMHO	O
.	O
Not	O
sure	O
it	O
'	O
s	O
100	O
%	O
correct	O
.	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
marks	O
the	O
container	O
as	O
invalid	O
.	O
Means	O
the	O
content	O
is	O
somehow	O
wrong	O
and	O
must	O
be	O
relayed	O
out	O
.	O
But	O
it	O
'	O
s	O
just	O
a	O
kind	O
of	O
mark	O
/	O
flag	O
.	O
It	O
'	O
s	O
possible	O
that	O
multiple	O
invalid	O
containers	O
must	O
be	O
refreshed	O
later	O
.	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
performs	O
relayout	O
.	O
It	O
means	O
invalid	O
content	O
is	O
asked	O
for	O
all	O
the	O
sizes	O
and	O
all	O
the	O
subcomponents	O
'	O
sizes	O
are	O
set	O
to	O
proper	O
values	O
by	O
LayoutManager	B-api_mention
.	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
just	O
sum	O
of	O
both	O
.	O
It	O
marks	O
the	O
container	O
as	O
invalid	O
and	O
performs	O
layout	O
of	O
the	O
container	O
.	O
Question	O
-	O
24631909	O
,	O
answer	O
-	O
24635657	O
Common	O
features	O
a	O
)	O
Both	O
libraries	O
use	O
immutable	O
types	O
.	O
Joda	O
-	O
Time	O
also	O
offers	O
additional	O
mutable	O
types	O
like	O
MutableDateTime	B-api_mention
.	O
b	O
)	O
Furthermore	O
:	O
Both	O
libraries	O
are	O
inspired	O
by	O
the	O
design	O
study	O
"	O
TimeAndMoney	O
"	O
from	O
Eric	O
Evans	O
or	O
ideas	O
from	O
Martin	O
Fowler	O
about	O
domain	O
driven	O
style	O
so	O
they	O
strive	O
more	O
or	O
less	O
for	O
a	O
fluent	O
programming	O
style	O
(	O
although	O
not	O
always	O
perfect	O
;	O
-	O
)	O
)	O
.	O
c	O
)	O
With	O
both	O
libraries	O
we	O
get	O
a	O
real	O
calendar	O
date	O
type	O
(	O
called	O
LocalDate	B-api_mention
)	O
,	O
a	O
real	O
wall	O
time	O
type	O
(	O
called	O
LocalTime	B-api_mention
)	O
and	O
the	O
composition	O
(	O
called	O
LocalDateTime	B-api_mention
)	O
.	O
That	O
is	O
a	O
very	O
big	O
win	O
compared	O
with	O
old	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Calendar	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
.	O
d	O
)	O
Both	O
libraries	O
use	O
a	O
method	O
-	O
centric	O
approach	O
meaning	O
they	O
encourage	O
the	O
user	O
to	O
use	O
getDayOfYear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
causes	O
a	O
lot	O
of	O
extra	O
methods	O
compared	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Calendar	I-api_mention
(	O
although	O
latter	O
is	O
not	O
type	O
-	O
safe	O
at	O
all	O
due	O
to	O
excessive	O
use	O
of	O
ints	O
)	O
.	O
Performance	O
See	O
the	O
other	O
answer	O
by	O
@	O
OO7	O
pointing	O
to	O
the	O
analysis	O
of	O
Mikhail	O
Vorontsov	O
although	O
point	O
3	O
(	O
exception	O
catching	O
)	O
is	O
probably	O
obsolete	O
-	O
see	O
this	O
JDK	O
-	O
bug	O
.	O
The	O
different	O
performance	O
(	O
which	O
is	O
in	O
general	O
favour	O
of	O
JSR	O
-	O
310	O
)	O
is	O
mainly	O
due	O
to	O
the	O
fact	O
that	O
the	O
internal	O
implementation	O
of	O
Joda	O
-	O
Time	O
always	O
use	O
a	O
machine	O
-	O
time	O
-	O
like	O
long	O
-	O
primitive	O
(	O
in	O
milliseconds	O
)	O
.	O
Null	O
Joda	O
-	O
Time	O
often	O
use	O
NULL	O
as	O
default	O
for	O
system	O
timezone	O
,	O
default	O
locale	O
,	O
current	O
timestamp	O
etc	O
.	O
while	O
JSR	O
-	O
310	O
almost	O
always	O
rejects	O
NULL	O
values	O
.	O
Precision	O
JSR	O
-	O
310	O
handles	O
nanosecond	O
precision	O
while	O
Joda	O
-	O
Time	O
is	O
limited	O
to	O
millisecond	O
precision	O
.	O
Supported	O
fields	O
:	O
An	O
overview	O
about	O
supported	O
fields	O
in	O
Java	O
-	O
8	O
(	O
JSR	O
-	O
310	O
)	O
is	O
given	O
by	O
some	O
classes	O
in	O
the	O
temporal	O
-	O
package	O
(	O
for	O
example	O
ChronoField	B-api_mention
and	O
WeekFields	B-api_mention
)	O
while	O
Joda	O
-	O
Time	O
is	O
rather	O
weak	O
on	O
this	O
area	O
-	O
see	O
DateTimeFieldType	O
.	O
The	O
biggest	O
lack	O
of	O
Joda	O
-	O
Time	O
is	O
here	O
the	O
absence	O
of	O
localized	O
week	O
-	O
related	O
fields	O
.	O
A	O
common	O
feature	O
of	O
both	O
field	O
implementation	O
design	O
is	O
that	O
both	O
are	O
based	O
on	O
values	O
of	O
type	O
long	O
(	O
no	O
other	O
types	O
,	O
not	O
even	O
enums	O
)	O
.	O
Enum	O
JSR	O
-	O
310	O
offers	O
enums	O
like	O
DayOfWeek	O
or	O
Month	O
while	O
Joda	O
-	O
Time	O
does	O
not	O
offer	O
this	O
because	O
it	O
was	O
mainly	O
developed	O
in	O
years	O
2002	O
-	O
2004	O
before	O
Java	O
5	O
.	O
Zone	O
API	O
a	O
)	O
JSR	O
-	O
310	O
offers	O
more	O
timezone	O
features	O
than	O
Joda	O
-	O
Time	O
.	O
Latter	O
is	O
not	O
able	O
to	O
yield	O
a	O
programmatical	O
access	O
to	O
the	O
history	O
of	O
timezone	O
offset	O
transitions	O
while	O
JSR	O
-	O
310	O
is	O
capable	O
to	O
do	O
this	O
.	O
b	O
)	O
For	O
your	O
information	O
:	O
JSR	O
-	O
310	O
has	O
moved	O
its	O
internal	O
timezone	O
repository	O
to	O
a	O
new	O
location	O
and	O
a	O
different	O
format	O
.	O
The	O
old	O
library	O
folder	O
lib	O
/	O
zi	O
does	O
not	O
exist	O
any	O
more	O
.	O
Adjuster	O
vs	O
.	O
Property	O
JSR	O
-	O
310	O
has	O
introduced	O
the	O
TemporalAdjuster	B-api_mention
-	O
interface	O
as	O
a	O
formalized	O
way	O
to	O
externalize	O
temporal	O
calculations	O
and	O
manipulations	O
,	O
especially	O
for	O
library	O
or	O
framework	O
-	O
writers	O
this	O
is	O
a	O
nice	O
and	O
relative	O
easy	O
way	O
to	O
embed	O
new	O
extensions	O
of	O
JSR	O
-	O
310	O
(	O
a	O
kind	O
of	O
equivalent	O
to	O
static	O
helper	O
classes	O
for	O
former	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
)	O
.	O
For	O
most	O
users	O
however	O
,	O
this	O
feature	O
has	O
very	O
limited	O
value	O
because	O
the	O
burden	O
to	O
write	O
code	O
is	O
still	O
with	O
the	O
user	O
.	O
Built	O
-	O
in	O
solutions	O
based	O
on	O
the	O
new	O
TemporalAdjuster	B-api_mention
-	O
concept	O
are	O
not	O
so	O
many	O
,	O
there	O
is	O
currently	O
only	O
the	O
helper	O
class	O
TemporalAdjusters	B-api_mention
with	O
a	O
limited	O
set	O
of	O
manipulations	O
(	O
and	O
the	O
enums	O
Month	O
or	O
other	O
temporal	O
types	O
)	O
.	O
Joda	O
-	O
Time	O
offers	O
a	O
field	O
-	O
package	O
but	O
practice	O
has	O
shown	O
evidence	O
that	O
new	O
field	O
implementations	O
are	O
very	O
hard	O
to	O
code	O
.	O
On	O
the	O
other	O
side	O
Joda	O
-	O
Time	O
offers	O
so	O
-	O
called	O
properties	O
which	O
make	O
some	O
manipulations	O
much	O
easier	O
and	O
more	O
elegant	O
than	O
in	O
JSR	O
-	O
310	O
,	O
for	O
example	O
property	O
.	O
withMaximumValue	O
(	O
)	O
.	O
Calendar	O
systems	O
JSR	O
-	O
310	O
offers	O
4	O
extra	O
calendar	O
systems	O
.	O
The	O
most	O
interesting	O
one	O
is	O
Umalqura	O
(	O
used	O
in	O
Saudi	O
Arabia	O
)	O
.	O
The	O
other	O
3	O
are	O
:	O
Minguo	O
(	O
Taiwan	O
)	O
,	O
Japanese	O
(	O
only	O
the	O
modern	O
calendar	O
since	O
1871	O
!	O
)	O
and	O
ThaiBuddhist	O
(	O
only	O
correct	O
after	O
1940	O
)	O
.	O
Joda	O
-	O
Time	O
offers	O
an	O
Islamic	O
calendar	O
based	O
on	O
calculatory	O
base	O
-	O
not	O
a	O
sighting	O
-	O
based	O
calendar	O
like	O
Umalqura	O
.	O
Thai	O
-	O
Buddhist	O
is	O
also	O
offered	O
by	O
Joda	O
-	O
Time	O
in	O
a	O
similar	O
form	O
,	O
Minguo	O
and	O
the	O
japanese	O
one	O
not	O
.	O
Otherwise	O
Joda	O
-	O
Time	O
offers	O
coptic	O
and	O
ethiopic	O
calendar	O
,	O
too	O
(	O
but	O
without	O
any	O
support	O
for	O
internationalization	O
)	O
.	O
More	O
interesting	O
for	O
Europeans	O
:	O
Joda	O
-	O
Time	O
also	O
offers	O
a	O
Gregorian	O
,	O
Julian	O
and	O
mixed	O
-	O
gregorian	O
-	O
julian	O
calendar	O
.	O
However	O
,	O
the	O
practical	O
value	O
for	O
real	O
historical	O
calculations	O
is	O
limited	O
because	O
important	O
features	O
like	O
different	O
year	O
starts	O
in	O
date	O
history	O
are	O
not	O
supported	O
at	O
all	O
(	O
the	O
same	O
criticism	O
is	O
valid	O
for	O
old	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
GregorianCalendar	I-api_mention
)	O
.	O
Other	O
calendars	O
like	O
Hebrew	O
or	O
Persian	O
or	O
Hindu	O
are	O
completely	O
missing	O
in	O
both	O
libraries	O
.	O
Epoch	O
days	O
JSR	O
-	O
310	O
has	O
the	O
class	O
JulianFields	B-api_mention
while	O
Joda	O
-	O
Time	O
(	O
version	O
2	O
.	O
0	O
)	O
offers	O
some	O
helper	O
methods	O
in	O
the	O
class	O
DateTimeUtils	B-api_mention
.	O
Clocks	O
JSR	O
-	O
310	O
has	O
no	O
interface	O
(	O
a	O
design	O
mistake	O
)	O
but	O
an	O
abstract	O
class	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
Clock	I-api_mention
which	O
can	O
be	O
used	O
for	O
any	O
clock	O
dependency	O
injection	O
.	O
Joda	O
-	O
Time	O
offers	O
the	O
interface	O
MillisProvider	B-api_mention
and	O
some	O
helper	O
methods	O
in	O
DateTimeUtils	B-api_mention
instead	O
.	O
So	O
this	O
way	O
Joda	O
-	O
Time	O
is	O
also	O
capable	O
of	O
supporting	O
test	O
-	O
driven	O
models	O
with	O
different	O
clocks	O
(	O
mocking	O
etc	O
.	O
)	O
.	O
Duration	O
arithmetic	O
Both	O
libraries	O
support	O
the	O
calculation	O
of	O
time	O
distances	O
in	O
one	O
or	O
more	O
temporal	O
units	O
.	O
However	O
,	O
when	O
handling	O
single	O
-	O
unit	O
-	O
durations	O
the	O
JSR	O
-	O
310	O
-	O
style	O
is	O
obviously	O
nicer	O
(	O
and	O
long	O
-	O
based	O
instead	O
of	O
using	O
int	O
)	O
:	O
JSR	O
-	O
310	O
=	O
>	O
long	O
days	O
=	O
ChronoUnit	B-api_mention
.	I-api_mention
DAYS	I-api_mention
.	I-api_mention
between	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Joda	O
-	O
Time	O
=	O
>	O
int	O
days	O
=	O
DAYS	B-api_mention
.	I-api_mention
daysBetween	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getDays	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Handling	O
of	O
multiple	O
-	O
unit	O
-	O
durations	O
are	O
also	O
different	O
.	O
Even	O
the	O
calculation	O
results	O
can	O
differ	O
-	O
see	O
this	O
closed	O
Joda	O
-	O
Time	O
issue	O
.	O
While	O
JSR	O
-	O
310	O
use	O
a	O
very	O
simple	O
and	O
limited	O
approach	O
to	O
use	O
just	O
the	O
classes	O
Period	B-api_mention
(	O
duration	O
based	O
on	O
years	O
,	O
months	O
and	O
days	O
)	O
and	O
Duration	B-api_mention
(	O
based	O
on	O
seconds	O
and	O
nanoseconds	O
)	O
,	O
Joda	O
-	O
Time	O
uses	O
a	O
more	O
sophisticated	O
way	O
using	O
the	O
class	O
PeriodType	O
in	O
order	O
to	O
control	O
in	O
which	O
units	O
a	O
duration	O
(	O
Joda	O
-	O
Time	O
call	O
it	O
"	O
Period	O
"	O
)	O
shall	O
be	O
expressed	O
.	O
While	O
the	O
PeriodType	O
-	O
API	O
is	O
somehow	O
awkward	O
to	O
use	O
a	O
similar	O
way	O
is	O
not	O
offered	O
by	O
JSR	O
-	O
310	O
at	O
all	O
.	O
Especially	O
it	O
is	O
not	O
yet	O
possible	O
in	O
JSR	O
-	O
310	O
to	O
define	O
mixed	O
date	O
and	O
time	O
durations	O
(	O
based	O
on	O
days	O
and	O
hours	O
for	O
example	O
)	O
.	O
So	O
be	O
warned	O
if	O
it	O
comes	O
to	O
migration	O
from	O
one	O
library	O
to	O
another	O
.	O
The	O
libraries	O
in	O
discussion	O
are	O
incompatible	O
-	O
despite	O
of	O
partially	O
same	O
class	O
names	O
.	O
Intervals	O
JSR	O
-	O
310	O
does	O
not	O
support	O
this	O
feature	O
while	O
Joda	O
-	O
Time	O
has	O
limited	O
support	O
.	O
See	O
also	O
this	O
SO	O
-	O
answer	O
.	O
Formatting	O
and	O
Parsing	O
Best	O
way	O
to	O
compare	O
both	O
libraries	O
is	O
to	O
view	O
the	O
equal	O
-	O
named	O
classes	O
DateTimeFormatterBuilder	B-api_mention
(	O
JSR	O
-	O
310	O
)	O
and	O
DateTimeFormatterBuilder	B-api_mention
(	O
Joda	O
-	O
Time	O
)	O
.	O
The	O
JSR	O
-	O
310	O
-	O
variant	O
is	O
a	O
little	O
bit	O
more	O
powerful	O
(	O
can	O
also	O
handle	O
any	O
kind	O
of	O
TemporalField	O
provided	O
the	O
field	O
implementor	O
has	O
managed	O
to	O
code	O
some	O
extension	O
points	O
like	O
resolve	B-api_mention
(	I-api_mention
)	I-api_mention
)	O
.	O
Most	O
important	O
difference	O
is	O
however	O
-	O
in	O
my	O
opinion	O
:	O
JSR	O
-	O
310	O
can	O
much	O
better	O
parse	O
timezone	O
names	O
(	O
format	O
pattern	O
symbol	O
z	O
)	O
while	O
Joda	O
-	O
Time	O
could	O
not	O
do	O
this	O
at	O
all	O
in	O
its	O
earlier	O
versions	O
and	O
now	O
only	O
in	O
a	O
very	O
limited	O
way	O
.	O
Another	O
advantage	O
of	O
JSR	O
-	O
310	O
is	O
support	O
for	O
standalone	O
month	O
names	O
which	O
is	O
important	O
in	O
languages	O
like	O
Russian	O
or	O
Polish	O
etc	O
.	O
Joda	O
-	O
Time	O
has	O
no	O
access	O
to	O
such	O
resources	O
-	O
not	O
even	O
on	O
Java	O
-	O
8	O
platforms	O
.	O
The	O
pattern	O
syntax	O
in	O
JSR	O
-	O
310	O
is	O
also	O
more	O
flexible	O
than	O
in	O
Joda	O
-	O
Time	O
,	O
allows	O
for	O
optional	O
sections	O
(	O
using	O
square	O
brackets	O
)	O
,	O
is	O
more	O
orientated	O
towards	O
CLDR	O
-	O
standard	O
and	O
offers	O
padding	O
(	O
letter	O
symbol	O
p	O
)	O
and	O
more	O
fields	O
.	O
Otherwise	O
it	O
should	O
be	O
noted	O
that	O
Joda	O
-	O
Time	O
can	O
format	O
durations	O
using	O
PeriodFormatter	B-api_mention
.	O
JSR	O
-	O
310	O
cannot	O
do	O
this	O
.	O
Hope	O
this	O
overview	O
helps	O
.	O
All	O
the	O
gathered	O
information	O
is	O
mainly	O
there	O
due	O
to	O
my	O
efforts	O
and	O
investigations	O
how	O
to	O
design	O
and	O
implement	O
a	O
better	O
date	O
-	O
and	O
-	O
time	O
library	O
(	O
nothing	O
is	O
perfect	O
)	O
.	O
Update	O
from	O
2015	O
-	O
06	O
-	O
24	O
:	O
Meanwhile	O
I	O
have	O
found	O
the	O
time	O
to	O
write	O
and	O
publish	O
a	O
tabular	O
overview	O
for	O
different	O
time	O
libraries	O
in	O
Java	O
.	O
The	O
tables	O
also	O
contain	O
a	O
comparison	O
between	O
Joda	O
-	O
Time	O
v2	O
.	O
8	O
.	O
1	O
and	O
Java	O
-	O
8	O
(	O
JSR	O
-	O
310	O
)	O
.	O
It	O
is	O
more	O
detailed	O
than	O
this	O
post	O
.	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173110	O
Flipping	O
the	O
limit	O
and	O
the	O
filter	O
clauses	O
has	O
different	O
behaviors	O
.	O
If	O
you	O
put	O
the	O
limit	O
first	O
,	O
the	O
stream	O
will	O
first	O
generate	O
10	O
integers	O
[	O
1	O
.	O
.	O
10	O
]	O
,	O
and	O
then	O
filter	O
them	O
leaving	O
only	O
those	O
smaller	O
than	O
5	O
.	O
In	O
the	O
original	O
ordering	O
,	O
with	O
the	O
filter	O
applied	O
first	O
,	O
integers	O
are	O
generated	O
and	O
filtered	O
until	O
you	O
reach	O
10	O
elements	O
.	O
This	O
isn	O
'	O
t	O
an	O
infinite	O
operator	O
,	O
as	O
i	O
in	O
the	O
supplier	O
will	O
eventually	O
overflow	O
,	O
but	O
it	O
will	O
take	O
a	O
while	O
,	O
especially	O
on	O
a	O
slow	O
computer	O
,	O
to	O
reach	O
MAX	O
_	O
INT	O
.	O
