Question	O	O
-	O	O
34172978	O	O
,	O	O
answer	O	O
-	O	O
34173040	O	O
Since	O	O
there	O	O
are	O	O
only	O	O
4	O	O
elements	O	O
that	O	O
pass	O	O
the	O	O
filter	O	O
,	O	O
limit	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
never	O	O
reaches	O	O
10	O	O
elements	O	O
,	O	O
so	O	O
the	O	O
Stream	B-api_mention	B-api_mention
pipeline	O	O
keeps	O	O
generating	O	O
new	O	O
elements	O	O
and	O	O
feeding	O	O
them	O	O
to	O	O
the	O	O
filter	O	O
,	O	O
trying	O	O
to	O	O
reach	O	O
10	O	O
elements	O	O
that	O	O
pass	O	O
the	O	O
filter	O	O
,	O	O
but	O	O
since	O	O
only	O	O
the	O	O
first	O	O
4	O	O
elements	O	O
pass	O	O
the	O	O
filter	O	O
,	O	O
the	O	O
processing	O	O
never	O	O
ends	O	O
(	O	O
at	O	O
least	O	O
until	O	O
i	O	O
overflows	O	O
)	O	O
.	O	O
The	O	O
Stream	B-api_mention	B-api_mention
pipeline	O	O
is	O	O
not	O	O
smart	O	O
enough	O	O
to	O	O
know	O	O
that	O	O
no	O	O
more	O	O
elements	O	O
can	O	O
pass	O	O
the	O	O
filter	O	O
,	O	O
so	O	O
it	O	O
keeps	O	O
processing	O	O
new	O	O
elements	O	O
.	O	O
Question	O	O
-	O	O
6667243	O	O
,	O	O
answer	O	O
-	O	O
6667354	O	O
Enum	O	O
is	O	O
just	O	O
a	O	O
little	O	O
bit	O	O
special	O	O
class	O	O
.	O	O
Enums	O	O
can	O	O
store	O	O
additional	O	O
fields	O	O
,	O	O
implement	O	O
methods	O	O
etc	O	O
.	O	O
For	O	O
example	O	O
#	O	O
pre	O	O
Now	O	O
you	O	O
can	O	O
say	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
see	O	O
output	O	O
:	O	O
a	O	O
Question	O	O
-	O	O
27908213	O	O
,	O	O
answer	O	O
-	O	O
27908402	O	O
Although	O	O
there	O	O
is	O	O
no	O	O
explicit	O	O
guarantee	O	O
of	O	O
this	O	O
,	O	O
the	O	O
end	O	O
result	O	O
is	O	O
bound	O	O
to	O	O
be	O	O
such	O	O
that	O	O
the	O	O
comparison	O	O
always	O	O
succeeds	O	O
for	O	O
enum	O	O
constants	O	O
with	O	O
identical	O	O
names	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
reason	O	O
for	O	O
this	O	O
is	O	O
that	O	O
Java	O	O
compiler	O	O
constructs	O	O
subclasses	O	O
of	O	O
Enum	B-api_mention	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
they	O	O
end	O	O
up	O	O
calling	O	O
Enum	B-api_mention	O
'	O	O
s	O	O
sole	O	O
protected	O	O
constructor	O	O
,	O	O
passing	O	O
it	O	O
the	O	O
name	O	O
of	O	O
enum	O	O
value	O	O
:	O	O
protected	O	O
Enum	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
name	O	O
is	O	O
embedded	O	O
into	O	O
the	O	O
generated	O	O
code	O	O
in	O	O
the	O	O
form	O	O
of	O	O
a	O	O
string	O	O
literal	O	O
.	O	O
According	O	O
to	O	O
String	B-api_mention	B-api_mention
documentation	O	O
,	O	O
#	O	O
blockquote	O	O
This	O	O
amounts	O	O
to	O	O
an	O	O
implicit	O	O
guarantee	O	O
of	O	O
your	O	O
expression	O	O
succeeding	O	O
when	O	O
names	O	O
of	O	O
enum	O	O
constants	O	O
are	O	O
identical	O	O
.	O	O
However	O	O
,	O	O
I	O	O
would	O	O
not	O	O
rely	O	O
on	O	O
this	O	O
behavior	O	O
,	O	O
and	O	O
use	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
,	O	O
because	O	O
anyone	O	O
reading	O	O
my	O	O
code	O	O
would	O	O
be	O	O
scratching	O	O
his	O	O
head	O	O
,	O	O
thinking	O	O
that	O	O
I	O	O
made	O	O
a	O	O
mistake	O	O
.	O	O
Question	O	O
-	O	O
10631715	O	O
,	O	O
answer	O	O
-	O	O
32362691	O	O
For	O	O
completeness	O	O
,	O	O
using	O	O
the	O	O
Guava	O	O
library	O	O
,	O	O
you	O	O
'	O	O
d	O	O
do	O	O
:	O	O
Splitter	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
on	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Another	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Splitter	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
an	O	O
Iterable	O	B-api_mention
,	O	O
so	O	O
if	O	O
you	O	O
need	O	O
a	O	O
List	B-api_mention	B-api_mention
,	O	O
wrap	O	O
it	O	O
in	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
above	O	O
.	O	O
Otherwise	O	O
just	O	O
go	O	O
with	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
how	O	O
trimResults	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
handles	O	O
all	O	O
your	O	O
trimming	O	O
needs	O	O
without	O	O
having	O	O
to	O	O
tweak	O	O
regexes	O	O
for	O	O
corner	O	O
cases	O	O
,	O	O
as	O	O
with	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
your	O	O
project	O	O
uses	O	O
Guava	O	O
already	O	O
,	O	O
this	O	O
should	O	O
be	O	O
your	O	O
preferred	O	O
solution	O	O
.	O	O
See	O	O
Splitter	B-api_mention	O
documentation	O	O
in	O	O
Guava	O	O
User	O	O
Guide	O	O
or	O	O
the	O	O
javadocs	O	O
for	O	O
more	O	O
configuration	O	O
options	O	O
.	O	O
Question	O	O
-	O	O
10977992	O	O
,	O	O
answer	O	O
-	O	O
17939167	O	O
There	O	O
are	O	O
two	O	O
differences	O	O
:	O	O
#	O	O
li	O	O
We	O	O
can	O	O
use	O	O
Iterator	B-api_mention	B-api_mention
to	O	O
traverse	O	O
Set	B-api_mention	B-api_mention
and	O	O
List	B-api_mention	B-api_mention
and	O	O
also	O	O
Map	B-api_mention	B-api_mention
type	O	O
of	O	O
Objects	B-api_mention	B-api_mention
.	O	O
While	O	O
a	O	O
ListIterator	B-api_mention	B-api_mention
can	O	O
be	O	O
used	O	O
to	O	O
traverse	O	O
for	O	O
List	B-api_mention	B-api_mention
-	O	O
type	O	O
Objects	B-api_mention	B-api_mention
,	O	O
but	O	O
not	O	O
for	O	O
Set	B-api_mention	B-api_mention
-	O	O
type	O	O
of	O	O
Objects	B-api_mention	B-api_mention
.	O	O
That	O	O
is	O	O
,	O	O
we	O	O
can	O	O
get	O	O
a	O	O
Iterator	O	B-api_mention
object	O	O
by	O	O
using	O	O
Set	B-api_mention	B-api_mention
and	O	O
List	B-api_mention	B-api_mention
,	O	O
see	O	O
here	O	O
:	O	O
By	O	O
using	O	O
Iterator	O	B-api_mention
we	O	O
can	O	O
retrieve	O	O
the	O	O
elements	O	O
from	O	O
Collection	B-api_mention	B-api_mention
Object	O	B-api_mention
in	O	O
forward	O	O
direction	O	O
only	O	O
.	O	O
Methods	O	O
in	O	O
Iterator	O	B-api_mention
:	O	O
#	O	O
li	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
remove	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
pre	O	O
#	O	O
li	O	O
But	O	O
we	O	O
get	O	O
ListIterator	B-api_mention	B-api_mention
object	O	O
only	O	O
from	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
,	O	O
see	O	O
here	O	O
:	O	O
where	O	O
as	O	O
a	O	O
ListIterator	B-api_mention	B-api_mention
allows	O	O
you	O	O
to	O	O
traverse	O	O
in	O	O
either	O	O
directions	O	O
(	O	O
Both	O	O
forward	O	O
and	O	O
backward	O	O
)	O	O
.	O	O
So	O	O
it	O	O
has	O	O
two	O	O
more	O	O
methods	O	O
like	O	O
hasPrevious	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
previous	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
other	O	O
than	O	O
those	O	O
of	O	O
Iterator	B-api_mention	B-api_mention
.	O	O
Also	O	O
,	O	O
we	O	O
can	O	O
get	O	O
indexes	O	O
of	O	O
the	O	O
next	O	O
or	O	O
previous	O	O
elements	O	O
(	O	O
using	O	O
nextIndex	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
previousIndex	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
respectively	O	O
)	O	O
Methods	O	O
in	O	O
ListIterator	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
previous	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
hasPrevious	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
remove	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
nextIndex	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
previousIndex	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
ListIterator	I-api_mention	I-api_mention
listiterator	O	O
=	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
listIterator	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
i	O	O
.	O	O
e	O	O
.	O	O
,	O	O
we	O	O
can	O	O
'	O	O
t	O	O
get	O	O
ListIterator	B-api_mention	B-api_mention
object	O	O
from	O	O
Set	B-api_mention	B-api_mention
interface	O	O
.	O	O
Question	O	O
-	O	O
9749746	O	O
,	O	O
answer	O	O
-	O	O
9749864	O	O
You	O	O
are	O	O
specifically	O	O
asking	O	O
about	O	O
how	O	O
they	O	O
internally	O	O
work	O	O
,	O	O
so	O	O
here	O	O
you	O	O
are	O	O
:	O	O
No	O	O
synchronization	O	O
#	O	O
pre	O	O
It	O	O
basically	O	O
reads	O	O
value	O	O
from	O	O
memory	O	O
,	O	O
increments	O	O
it	O	O
and	O	O
puts	O	O
back	O	O
to	O	O
memory	O	O
.	O	O
This	O	O
works	O	O
in	O	O
single	O	O
thread	O	O
but	O	O
nowadays	O	O
,	O	O
in	O	O
the	O	O
era	O	O
of	O	O
multi	O	O
-	O	O
core	O	O
,	O	O
multi	O	O
-	O	O
CPU	O	O
,	O	O
multi	O	O
-	O	O
level	O	O
caches	O	O
it	O	O
won	O	O
'	O	O
t	O	O
work	O	O
correctly	O	O
.	O	O
First	O	O
of	O	O
all	O	O
it	O	O
introduces	O	O
race	O	O
condition	O	O
(	O	O
several	O	O
threads	O	O
can	O	O
read	O	O
the	O	O
value	O	O
at	O	O
the	O	O
same	O	O
time	O	O
)	O	O
,	O	O
but	O	O
also	O	O
visibility	O	O
problems	O	O
.	O	O
The	O	O
value	O	O
might	O	O
only	O	O
be	O	O
stored	O	O
in	O	O
"	O	O
local	O	O
"	O	O
CPU	O	O
memory	O	O
(	O	O
some	O	O
cache	O	O
)	O	O
and	O	O
not	O	O
be	O	O
visible	O	O
for	O	O
other	O	O
CPUs	O	O
/	O	O
cores	O	O
(	O	O
and	O	O
thus	O	O
-	O	O
threads	O	O
)	O	O
.	O	O
This	O	O
is	O	O
why	O	O
many	O	O
refer	O	O
to	O	O
local	O	O
copy	O	O
of	O	O
a	O	O
variable	O	O
in	O	O
a	O	O
thread	O	O
.	O	O
It	O	O
is	O	O
very	O	O
unsafe	O	O
.	O	O
Consider	O	O
this	O	O
popular	O	O
but	O	O
broken	O	O
thread	O	O
-	O	O
stopping	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Add	O	O
volatile	O	O
to	O	O
stopped	O	O
variable	O	O
and	O	O
it	O	O
works	O	O
fine	O	O
-	O	O
if	O	O
any	O	O
other	O	O
thread	O	O
modifies	O	O
stopped	O	O
variable	O	O
via	O	O
pleaseStop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
you	O	O
are	O	O
guaranteed	O	O
to	O	O
see	O	O
that	O	O
change	O	O
immediately	O	O
in	O	O
working	O	O
thread	O	O
'	O	O
s	O	O
while	O	O
(	O	O
args	O	O
)	O	O
loop	O	O
.	O	O
BTW	O	O
this	O	O
is	O	O
not	O	O
a	O	O
good	O	O
way	O	O
to	O	O
interrupt	O	O
a	O	O
thread	O	O
either	O	O
,	O	O
see	O	O
:	O	O
How	O	O
to	O	O
stop	O	O
a	O	O
thread	O	O
that	O	O
is	O	O
running	O	O
forever	O	O
without	O	O
any	O	O
use	O	O
and	O	O
Stopping	O	O
a	O	O
specific	O	O
java	O	O
thread	O	O
.	O	O
AtomicInteger	B-api_mention	B-api_mention
#	O	O
pre	O	O
The	O	O
AtomicInteger	B-api_mention	B-api_mention
class	O	O
uses	O	O
CAS	O	O
(	O	O
compare	O	O
-	O	O
and	O	O
-	O	O
swap	O	O
)	O	O
low	O	O
-	O	O
level	O	O
CPU	O	O
operations	O	O
(	O	O
no	O	O
synchronization	O	O
needed	O	O
!	O	O
)	O	O
They	O	O
allow	O	O
you	O	O
to	O	O
modify	O	O
a	O	O
particular	O	O
variable	O	O
only	O	O
if	O	O
the	O	O
present	O	O
value	O	O
is	O	O
equal	O	O
to	O	O
something	O	O
else	O	O
(	O	O
and	O	O
is	O	O
returned	O	O
successfully	O	O
)	O	O
.	O	O
So	O	O
when	O	O
you	O	O
execute	O	O
getAndIncrement	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
actually	O	O
runs	O	O
in	O	O
a	O	O
loop	O	O
(	O	O
simplified	O	O
real	O	O
implementation	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
basically	O	O
:	O	O
read	O	O
;	O	O
try	O	O
to	O	O
store	O	O
incremented	O	O
value	O	O
;	O	O
if	O	O
not	O	O
successful	O	O
(	O	O
the	O	O
value	O	O
is	O	O
no	O	O
longer	O	O
equal	O	O
to	O	O
current	O	O
)	O	O
,	O	O
read	O	O
and	O	O
try	O	O
again	O	O
.	O	O
The	O	O
compareAndSet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
implemented	O	O
in	O	O
native	O	O
code	O	O
(	O	O
assembly	O	O
)	O	O
.	O	O
volatile	O	O
without	O	O
synchronization	O	O
#	O	O
pre	O	O
This	O	O
code	O	O
is	O	O
not	O	O
correct	O	O
.	O	O
It	O	O
fixes	O	O
the	O	O
visibility	O	O
issue	O	O
(	O	O
volatile	O	O
makes	O	O
sure	O	O
other	O	O
threads	O	O
can	O	O
see	O	O
change	O	O
made	O	O
to	O	O
counter	O	O
)	O	O
but	O	O
still	O	O
has	O	O
a	O	O
race	O	O
condition	O	O
.	O	O
This	O	O
has	O	O
been	O	O
explained	O	O
multiple	O	O
times	O	O
:	O	O
pre	O	O
/	O	O
post	O	O
-	O	O
incrementation	O	O
is	O	O
not	O	O
atomic	O	O
.	O	O
The	O	O
only	O	O
side	O	O
effect	O	O
of	O	O
volatile	O	O
is	O	O
"	O	O
flushing	O	O
"	O	O
caches	O	O
so	O	O
that	O	O
all	O	O
other	O	O
parties	O	O
see	O	O
the	O	O
freshest	O	O
version	O	O
of	O	O
the	O	O
data	O	O
.	O	O
This	O	O
is	O	O
too	O	O
strict	O	O
in	O	O
most	O	O
situations	O	O
;	O	O
that	O	O
is	O	O
why	O	O
volatile	O	O
is	O	O
not	O	O
default	O	O
.	O	O
volatile	O	O
without	O	O
synchronization	O	O
(	O	O
2	O	O
)	O	O
#	O	O
pre	O	O
The	O	O
same	O	O
problem	O	O
as	O	O
above	O	O
,	O	O
but	O	O
even	O	O
worse	O	O
because	O	O
i	O	O
is	O	O
not	O	O
private	O	O
.	O	O
The	O	O
race	O	O
condition	O	O
is	O	O
still	O	O
present	O	O
.	O	O
Why	O	O
is	O	O
it	O	O
a	O	O
problem	O	O
?	O	O
If	O	O
,	O	O
say	O	O
,	O	O
two	O	O
threads	O	O
run	O	O
this	O	O
code	O	O
simultaneously	O	O
,	O	O
the	O	O
output	O	O
might	O	O
be	O	O
+	O	O
5	O	O
or	O	O
+	O	O
10	O	O
.	O	O
However	O	O
,	O	O
you	O	O
are	O	O
guaranteed	O	O
to	O	O
see	O	O
the	O	O
change	O	O
.	O	O
Multiple	O	O
independent	O	O
synchronized	O	O
#	O	O
pre	O	O
Surprise	O	O
,	O	O
this	O	O
code	O	O
is	O	O
incorrect	O	O
as	O	O
well	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
it	O	O
is	O	O
completely	O	O
wrong	O	O
.	O	O
First	O	O
of	O	O
all	O	O
you	O	O
are	O	O
synchronizing	O	O
on	O	O
i	O	O
,	O	O
which	O	O
is	O	O
about	O	O
to	O	O
be	O	O
changed	O	O
(	O	O
moreover	O	O
,	O	O
i	O	O
is	O	O
a	O	O
primitive	O	O
,	O	O
so	O	O
I	O	O
guess	O	O
you	O	O
are	O	O
synchronizing	O	O
on	O	O
a	O	O
temporary	O	O
Integer	O	B-api_mention
created	O	O
via	O	O
autoboxing	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Completely	O	O
flawed	O	O
.	O	O
You	O	O
could	O	O
also	O	O
write	O	O
:	O	O
#	O	O
pre	O	O
No	O	O
two	O	O
threads	O	O
can	O	O
enter	O	O
the	O	O
same	O	O
synchronized	O	O
block	O	O
with	O	O
the	O	O
same	O	O
lock	O	O
.	O	O
In	O	O
this	O	O
case	O	O
(	O	O
and	O	O
similarly	O	O
in	O	O
your	O	O
code	O	O
)	O	O
the	O	O
lock	O	O
object	O	O
changes	O	O
upon	O	O
every	O	O
execution	O	O
,	O	O
so	O	O
synchronized	O	O
effectively	O	O
has	O	O
no	O	O
effect	O	O
.	O	O
Even	O	O
if	O	O
you	O	O
have	O	O
used	O	O
a	O	O
final	O	O
variable	O	O
(	O	O
or	O	O
this	O	O
)	O	O
for	O	O
synchronization	O	O
,	O	O
the	O	O
code	O	O
is	O	O
still	O	O
incorrect	O	O
.	O	O
Two	O	O
threads	O	O
can	O	O
first	O	O
read	O	O
i	O	O
to	O	O
temp	O	O
synchronously	O	O
(	O	O
having	O	O
the	O	O
same	O	O
value	O	O
locally	O	O
in	O	O
temp	O	O
)	O	O
,	O	O
then	O	O
the	O	O
first	O	O
assigns	O	O
a	O	O
new	O	O
value	O	O
to	O	O
i	O	O
(	O	O
say	O	O
,	O	O
from	O	O
1	O	O
to	O	O
6	O	O
)	O	O
and	O	O
the	O	O
other	O	O
one	O	O
does	O	O
the	O	O
same	O	O
thing	O	O
(	O	O
from	O	O
1	O	O
to	O	O
6	O	O
)	O	O
.	O	O
The	O	O
synchronization	O	O
must	O	O
span	O	O
from	O	O
reading	O	O
to	O	O
assigning	O	O
a	O	O
value	O	O
.	O	O
Your	O	O
first	O	O
synchronization	O	O
has	O	O
no	O	O
effect	O	O
(	O	O
reading	O	O
an	O	O
int	O	O
is	O	O
atomic	O	O
)	O	O
and	O	O
the	O	O
second	O	O
as	O	O
well	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
,	O	O
these	O	O
are	O	O
the	O	O
correct	O	O
forms	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32693704	O	O
I	O	O
noticed	O	O
something	O	O
strange	O	O
in	O	O
the	O	O
implementation	O	O
of	O	O
HashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
is	O	O
how	O	O
it	O	O
looked	O	O
in	O	O
OpenJDK	O	O
7u40	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
this	O	O
is	O	O
how	O	O
it	O	O
looks	O	O
as	O	O
of	O	O
OpenJDK	O	O
8u40	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
understand	O	O
that	O	O
now	O	O
the	O	O
table	O	O
can	O	O
be	O	O
null	O	O
for	O	O
empty	O	O
an	O	O
map	O	O
,	O	O
thus	O	O
the	O	O
additional	O	O
check	O	O
and	O	O
caching	O	O
in	O	O
a	O	O
local	O	O
variable	O	O
is	O	O
required	O	O
.	O	O
But	O	O
why	O	O
was	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
replaced	O	O
with	O	O
a	O	O
for	O	O
-	O	O
loop	O	O
?	O	O
It	O	O
seems	O	O
that	O	O
the	O	O
change	O	O
was	O	O
introduced	O	O
in	O	O
this	O	O
commit	O	O
.	O	O
Unfortunately	O	O
I	O	O
found	O	O
no	O	O
explanation	O	O
for	O	O
why	O	O
a	O	O
plain	O	O
for	O	O
loop	O	O
might	O	O
be	O	O
better	O	O
than	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Is	O	O
it	O	O
faster	O	O
?	O	O
Or	O	O
safer	O	O
?	O	O
Question	O	O
-	O	O
27845223	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
at	O	O
a	O	O
piece	O	O
of	O	O
Java	O	O
code	O	O
right	O	O
now	O	O
,	O	O
and	O	O
it	O	O
takes	O	O
a	O	O
path	O	O
as	O	O
a	O	O
String	B-api_mention	B-api_mention
and	O	O
gets	O	O
its	O	O
URL	O	B-api_mention
using	O	O
URL	B-api_mention	B-api_mention
resource	O	O
=	O	O
ClassLoader	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getSystemClassLoader	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
,	O	O
then	O	O
calls	O	O
String	B-api_mention	B-api_mention
path	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
getPath	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
finally	O	O
executes	O	O
new	O	O
File	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
Oh	O	O
,	O	O
and	O	O
there	O	O
are	O	O
also	O	O
calls	O	O
to	O	O
URL	B-api_mention	O
url	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
toURI	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
String	B-api_mention	B-api_mention
file	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
getFile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
'	O	O
m	O	O
totally	O	O
confused	O	O
right	O	O
now	O	O
-	O	O
mostly	O	O
because	O	O
of	O	O
the	O	O
terminology	O	O
,	O	O
I	O	O
guess	O	O
.	O	O
Can	O	O
someone	O	O
please	O	O
walk	O	O
me	O	O
through	O	O
the	O	O
differences	O	O
,	O	O
or	O	O
provide	O	O
a	O	O
few	O	O
links	O	O
to	O	O
Dummy	O	O
-	O	O
proof	O	O
material	O	O
?	O	O
Especially	O	O
URI	B-api_mention	O
to	O	O
URL	B-api_mention	O
and	O	O
Resource	B-api_mention	B-api_mention
to	O	O
File	B-api_mention	B-api_mention
?	O	O
To	O	O
me	O	O
,	O	O
it	O	O
feels	O	O
like	O	O
they	O	O
should	O	O
be	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
respectively	O	O
.	O	O
.	O	O
.	O	O
The	O	O
difference	O	O
between	O	O
getFile	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getPath	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
explained	O	O
here	O	O
:	O	O
What	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
url	O	O
.	B-api_mention	B-api_mention
getFile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getpath	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
(	O	O
Interestingly	O	O
they	O	O
both	O	O
seem	O	O
to	O	O
return	O	O
Strings	O	O
,	O	O
which	O	O
probably	O	O
adds	O	O
a	O	O
whole	O	O
lot	O	O
to	O	O
my	O	O
state	O	O
of	O	O
mind	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Now	O	O
,	O	O
if	O	O
I	O	O
have	O	O
a	O	O
locator	O	O
that	O	O
references	O	O
a	O	O
class	O	O
or	O	O
package	O	O
in	O	O
a	O	O
jar	O	O
file	O	O
,	O	O
will	O	O
those	O	O
two	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
path	O	O
an	O	O
file	O	O
strings	O	O
)	O	O
differ	O	O
?	O	O
resource	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
give	O	O
you	O	O
jar	O	O
:	O	O
file	O	O
:	O	O
/	O	O
C	O	O
:	O	O
/	O	O
path	O	O
/	O	O
to	O	O
/	O	O
my	O	O
.	O	O
jar	O	O
!	O	O
/	O	O
com	O	O
/	O	O
example	O	O
/	O	O
,	O	O
after	O	O
all	O	O
(	O	O
note	O	O
the	O	O
exclamation	O	O
mark	O	O
)	O	O
.	O	O
Is	O	O
the	O	O
difference	O	O
between	O	O
URI	B-api_mention	O
and	O	O
URL	B-api_mention	B-api_mention
in	O	O
Java	O	O
that	O	O
the	O	O
former	O	O
doesn	O	O
'	O	O
t	O	O
encode	O	O
spaces	O	O
?	O	O
Cf	O	O
.	O	O
Files	O	O
,	O	O
URIs	O	O
,	O	O
and	O	O
URLs	O	O
conflicting	O	O
in	O	O
Java	O	O
(	O	O
This	O	O
answer	O	O
explains	O	O
the	O	O
general	O	O
,	O	O
conceptual	O	O
difference	O	O
between	O	O
the	O	O
two	O	O
terms	O	O
fairly	O	O
well	O	O
:	O	O
URIs	O	O
identify	O	O
and	O	O
URLs	O	O
locate	O	O
;	O	O
)	O	O
Lastly	O	O
-	O	O
and	O	O
most	O	O
importantly	O	O
-	O	O
why	O	O
do	O	O
I	O	O
need	O	O
File	B-api_mention	B-api_mention
object	O	O
;	O	O
why	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
Resource	B-api_mention	B-api_mention
(	O	O
URL	B-api_mention	O
)	O	O
enough	O	O
?	O	O
(	O	O
And	O	O
is	O	O
there	O	O
a	O	O
Resource	B-api_mention	B-api_mention
object	O	O
?	O	O
)	O	O
Sorry	O	O
if	O	O
this	O	O
question	O	O
is	O	O
a	O	O
bit	O	O
unorganized	O	O
;	O	O
it	O	O
just	O	O
reflects	O	O
the	O	O
confusion	O	O
I	O	O
have	O	O
.	O	O
.	O	O
.	O	O
:	O	O
)	O	O
Question	O	O
-	O	O
10786042	O	O
,	O	O
answer	O	O
-	O	O
10786112	O	O
URLEncoder	B-api_mention	B-api_mention
should	O	O
be	O	O
the	O	O
way	O	O
to	O	O
go	O	O
.	O	O
You	O	O
only	O	O
need	O	O
to	O	O
keep	O	O
in	O	O
mind	O	O
to	O	O
encode	O	O
only	O	O
the	O	O
individual	O	O
query	O	O
string	O	O
parameter	O	O
name	O	O
and	O	O
/	O	O
or	O	O
value	O	O
,	O	O
not	O	O
the	O	O
entire	O	O
URL	O	O
,	O	O
for	O	O
sure	O	O
not	O	O
the	O	O
query	O	O
string	O	O
parameter	O	O
separator	O	O
character	O	O
&	O	O
nor	O	O
the	O	O
parameter	O	O
name	O	O
-	O	O
value	O	O
separator	O	O
character	O	O
=	O	O
.	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
spaces	O	O
in	O	O
query	O	O
parameters	O	O
are	O	O
represented	O	O
by	O	O
+	O	O
,	O	O
not	O	O
%	O	O
20	O	O
,	O	O
which	O	O
is	O	O
legitimately	O	O
valid	O	O
.	O	O
The	O	O
%	O	O
20	O	O
is	O	O
usually	O	O
to	O	O
be	O	O
used	O	O
to	O	O
represent	O	O
spaces	O	O
in	O	O
URI	O	O
itself	O	O
(	O	O
the	O	O
part	O	O
before	O	O
the	O	O
URI	O	O
-	O	O
query	O	O
string	O	O
separator	O	O
character	O	O
?	O	O
)	O	O
,	O	O
not	O	O
in	O	O
query	O	O
string	O	O
(	O	O
the	O	O
part	O	O
after	O	O
?	O	O
)	O	O
.	O	O
Also	O	O
note	O	O
that	O	O
there	O	O
are	O	O
two	O	O
encode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
.	O	O
One	O	O
without	O	O
charset	O	O
argument	O	O
and	O	O
another	O	O
with	O	O
.	O	O
The	O	O
one	O	O
without	O	O
charset	O	O
argument	O	O
is	O	O
deprecated	O	O
.	O	O
Never	O	O
use	O	O
it	O	O
and	O	O
always	O	O
specify	O	O
the	O	O
charset	O	O
argument	O	O
.	O	O
The	O	O
javadoc	O	O
even	O	O
explicitly	O	O
recommends	O	O
to	O	O
use	O	O
the	O	O
UTF	O	O
-	O	O
8	O	O
encoding	O	O
,	O	O
as	O	O
mandated	O	O
by	O	O
RFC3986	O	O
and	O	O
W3C	O	O
.	O	O
#	O	O
blockquote	O	O
See	O	O
also	O	O
:	O	O
#	O	O
li	O	O
What	O	O
every	O	O
web	O	O
developer	O	O
must	O	O
know	O	O
about	O	O
URL	O	O
encoding	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777292	O	O
The	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
arrays	O	O
is	O	O
inherited	O	O
from	O	O
Object	B-api_mention	B-api_mention
,	O	O
so	O	O
it	O	O
does	O	O
not	O	O
look	O	O
at	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
arrrays	O	O
,	O	O
it	O	O
only	O	O
considers	O	O
each	O	O
array	O	O
equal	O	O
to	O	O
itself	O	O
.	O	O
The	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
do	O	O
compare	O	O
the	O	O
arrays	O	O
'	O	O
contents	O	O
.	O	O
There	O	O
'	O	O
s	O	O
overloads	O	O
for	O	O
all	O	O
primitive	O	O
types	O	O
,	O	O
and	O	O
the	O	O
one	O	O
for	O	O
objects	O	O
uses	O	O
the	O	O
objects	O	O
'	O	O
own	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
.	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29500496	O	O
First	O	O
of	O	O
all	O	O
,	O	O
the	O	O
cast	O	O
in	O	O
that	O	O
line	O	O
(	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
newType	O	O
=	O	O
=	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	B-api_mention
class	I-api_mention	I-api_mention
)	O	I-api_mention
are	O	O
absobuletly	O	O
needed	O	O
.	O	O
Removing	O	O
them	O	O
will	O	O
result	O	O
in	O	O
a	O	O
compilation	O	O
error	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
to	O	O
answer	O	O
your	O	O
question	O	O
What	O	O
is	O	O
this	O	O
line	O	O
checking	O	O
?	O	O
It	O	O
simply	O	O
verify	O	O
if	O	O
the	O	O
given	O	O
array	O	O
is	O	O
of	O	O
object	O	O
type	O	O
,	O	O
which	O	O
is	O	O
part	O	O
of	O	O
the	O	O
answer	O	O
for	O	O
your	O	O
other	O	O
question	O	O
Why	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
not	O	O
good	O	O
enough	O	O
for	O	O
both	O	O
cases	O	O
?	O	O
In	O	O
the	O	O
first	O	O
case	O	O
,	O	O
we	O	O
already	O	O
know	O	O
that	O	O
the	O	O
array	O	O
is	O	O
of	O	O
Object	B-api_mention	B-api_mention
type	O	O
so	O	O
there	O	O
is	O	O
no	O	O
point	O	O
in	O	O
calling	O	O
the	O	O
newInstance	O	B-api_mention
method	O	O
to	O	O
retrieve	O	O
the	O	O
correct	O	O
type	O	O
,	O	O
this	O	O
would	O	O
only	O	O
result	O	O
in	O	O
performance	O	O
loss	O	O
.	O	O
As	O	O
for	O	O
your	O	O
final	O	O
example	O	O
,	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
nums	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
That	O	O
it	O	O
does	O	O
compile	O	O
,	O	O
it	O	O
is	O	O
true	O	O
.	O	O
Because	O	O
the	O	O
given	O	O
arguments	O	O
to	O	O
the	O	O
method	O	O
are	O	O
all	O	O
valids	O	O
.	O	O
It	O	O
will	O	O
certainly	O	O
fail	O	O
at	O	O
runtime	O	O
;	O	O
what	O	O
would	O	O
be	O	O
the	O	O
expected	O	O
output	O	O
of	O	O
converting	O	O
"	O	O
a	O	O
"	O	O
to	O	O
Integer	B-api_mention	B-api_mention
type	O	O
?	O	O
Now	O	O
,	O	O
when	O	O
to	O	O
use	O	O
copyOf	B-api_mention	O
?	O	O
When	O	O
you	O	O
already	O	O
know	O	O
the	O	O
both	O	O
types	O	O
,	O	O
and	O	O
already	O	O
know	O	O
that	O	O
they	O	O
are	O	O
valid	O	O
together	O	O
.	O	O
It	O	O
main	O	O
usage	O	O
is	O	O
to	O	O
return	O	O
a	O	O
copy	O	O
but	O	O
truncated	O	O
or	O	O
padded	O	O
with	O	O
[	O	O
null	O	O
/	O	O
default	O	O
values	O	O
]	O	O
to	O	O
the	O	O
original	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
32356762	O	O
,	O	O
answer	O	O
-	O	O
32357149	O	O
Disclaimer	O	O
:	O	O
I	O	O
am	O	O
not	O	O
a	O	O
JDK	O	O
author	O	O
.	O	O
I	O	O
agree	O	O
that	O	O
it	O	O
'	O	O
s	O	O
correct	O	O
to	O	O
write	O	O
your	O	O
own	O	O
code	O	O
to	O	O
interfaces	O	O
,	O	O
but	O	O
if	O	O
you	O	O
'	O	O
re	O	O
going	O	O
return	O	O
a	O	O
mutable	O	O
collection	O	O
to	O	O
a	O	O
third	O	O
party	O	O
,	O	O
it	O	O
'	O	O
s	O	O
important	O	O
to	O	O
let	O	O
the	O	O
third	O	O
party	O	O
know	O	O
what	O	O
sort	O	O
of	O	O
List	B-api_mention	B-api_mention
they	O	O
'	O	O
re	O	O
getting	O	O
back	O	O
.	O	O
LinkedList	B-api_mention	B-api_mention
and	O	O
ArrayList	B-api_mention	B-api_mention
are	O	O
very	O	O
different	O	O
,	O	O
performance	O	O
wise	O	O
,	O	O
for	O	O
various	O	O
operations	O	O
.	O	O
For	O	O
example	O	O
,	O	O
removing	O	O
the	O	O
first	O	O
element	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
O	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
but	O	O
removing	O	O
the	O	O
first	O	O
element	O	O
of	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
is	O	O
O	O	O
(	O	O
args	O	O
)	O	O
.	O	O
By	O	O
fully	O	O
specifying	O	O
the	O	O
return	O	O
type	O	O
,	O	O
the	O	O
JDK	O	O
authors	O	O
are	O	O
communicating	O	O
extra	O	O
information	O	O
,	O	O
in	O	O
unambiguous	O	O
code	O	O
,	O	O
about	O	O
what	O	O
sort	O	O
of	O	O
object	O	O
they	O	O
'	O	O
re	O	O
giving	O	O
back	O	O
to	O	O
you	O	O
,	O	O
so	O	O
you	O	O
can	O	O
write	O	O
your	O	O
code	O	O
to	O	O
use	O	O
this	O	O
method	O	O
properly	O	O
.	O	O
If	O	O
you	O	O
really	O	O
need	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
,	O	O
you	O	O
know	O	O
that	O	O
you	O	O
have	O	O
to	O	O
specify	O	O
one	O	O
here	O	O
.	O	O
Finally	O	O
,	O	O
the	O	O
main	O	O
reason	O	O
to	O	O
code	O	O
to	O	O
an	O	O
interface	O	O
over	O	O
an	O	O
implementation	O	O
is	O	O
if	O	O
you	O	O
think	O	O
that	O	O
the	O	O
implementation	O	O
will	O	O
change	O	O
.	O	O
The	O	O
JDK	O	O
authors	O	O
probably	O	O
figure	O	O
they	O	O
are	O	O
never	O	O
going	O	O
to	O	O
change	O	O
this	O	O
method	O	O
;	O	O
it	O	O
'	O	O
s	O	O
never	O	O
going	O	O
to	O	O
return	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
or	O	O
a	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
UnmodifiableList	I-api_mention	I-api_mention
.	O	O
However	O	O
,	O	O
in	O	O
most	O	O
cases	O	O
,	O	O
you	O	O
would	O	O
probably	O	O
still	O	O
do	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
6667243	O	O
,	O	O
answer	O	O
-	O	O
25575077	O	O
You	O	O
could	O	O
override	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
for	O	O
each	O	O
enum	O	O
value	O	O
.	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
Usage	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
13195797	O	O
,	O	O
answer	O	O
-	O	O
13195890	O	O
FileUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
cleanDirectory	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
There	O	O
is	O	O
this	O	O
method	O	O
available	O	O
in	O	O
the	O	O
same	O	O
file	O	O
.	O	O
This	O	O
will	O	O
also	O	O
recursively	O	O
deletes	O	O
all	O	O
sub	O	O
-	O	O
folders	O	O
and	O	O
files	O	O
under	O	O
them	O	O
.	O	O
Docs	O	O
:	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
apache	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
commons	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
io	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
FileUtils	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
cleanDirectory	I-api_mention	I-api_mention
Question	O	O
-	O	O
25056607	O	O
,	O	O
answer	O	O
-	O	O
25056878	O	O
We	O	O
can	O	O
take	O	O
a	O	O
look	O	O
into	O	O
the	O	O
source	O	O
code	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Pattern	I-api_mention	I-api_mention
which	O	O
is	O	O
behind	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
.	O	O
Way	O	O
down	O	O
the	O	O
rabbit	O	O
hole	O	O
the	O	O
method	O	O
public	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
invoked	O	O
.	O	O
Input	O	O
StringLiteral	O	O
For	O	O
input	O	O
StringLiteral	O	O
this	O	O
method	O	O
is	O	O
called	O	O
as	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
parts	O	O
=	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
intersting	O	O
part	O	O
of	O	O
this	O	O
method	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
that	O	O
is	O	O
what	O	O
happens	O	O
:	O	O
new	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
{	O	O
input	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
}	O	O
is	O	O
returned	O	O
.	O	O
Input	O	O
StringLiteral	O	O
For	O	O
input	O	O
StringLiteral	O	O
the	O	O
intersting	O	O
part	O	O
is	O	O
#	O	O
pre	O	O
Here	O	O
resultSize	O	O
=	O	O
=	O	O
0	O	O
and	O	O
limit	O	O
=	O	O
=	O	O
0	O	O
so	O	O
new	O	O
String	B-api_mention	B-api_mention
[	O	O
0	O	O
]	O	O
is	O	O
returned	O	O
.	O	O
Question	O	O
-	O	O
21375659	O	O
,	O	O
answer	O	O
-	O	O
21375818	O	O
This	O	O
isn	O	O
'	O	O
t	O	O
strictly	O	O
an	O	O
answer	O	O
to	O	O
your	O	O
question	O	O
,	O	O
but	O	O
if	O	O
behind	O	O
your	O	O
question	O	O
is	O	O
a	O	O
wish	O	O
to	O	O
have	O	O
mutable	O	O
strings	O	O
that	O	O
you	O	O
can	O	O
manipulate	O	O
,	O	O
you	O	O
should	O	O
check	O	O
out	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
class	O	O
,	O	O
which	O	O
implements	O	O
many	O	O
of	O	O
the	O	O
exact	O	O
same	O	O
methods	O	O
that	O	O
String	B-api_mention	B-api_mention
has	O	O
but	O	O
also	O	O
adds	O	O
methods	O	O
to	O	O
change	O	O
the	O	O
current	O	O
contents	O	O
.	O	O
Once	O	O
you	O	O
'	O	O
ve	O	O
built	O	O
your	O	O
string	O	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
you	O	O
'	O	O
re	O	O
content	O	O
with	O	O
it	O	O
,	O	O
you	O	O
simply	O	O
call	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
it	O	O
in	O	O
order	O	O
to	O	O
convert	O	O
it	O	O
to	O	O
an	O	O
ordinary	O	O
String	B-api_mention	B-api_mention
that	O	O
you	O	O
can	O	O
pass	O	O
to	O	O
library	O	O
routines	O	O
and	O	O
other	O	O
functions	O	O
that	O	O
only	O	O
take	O	O
String	B-api_mention	B-api_mention
s	O	O
.	O	O
Also	O	O
,	O	O
both	O	O
StringBuilder	B-api_mention	B-api_mention
and	O	O
String	B-api_mention	B-api_mention
implements	O	O
the	O	O
CharSequence	B-api_mention	B-api_mention
interface	O	O
,	O	O
so	O	O
if	O	O
you	O	O
want	O	O
to	O	O
write	O	O
functions	O	O
in	O	O
your	O	O
own	O	O
code	O	O
that	O	O
can	O	O
use	O	O
both	O	O
mutable	O	O
and	O	O
immutable	O	O
strings	O	O
,	O	O
you	O	O
can	O	O
declare	O	O
them	O	O
to	O	O
take	O	O
any	O	O
CharSequence	B-api_mention	B-api_mention
object	O	O
.	O	O
Question	O	O
-	O	O
20877086	O	O
,	O	O
answer	O	O
-	O	O
20877161	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
caches	O	O
between	O	O
-	O	O
128	O	O
and	O	O
127	O	O
of	O	O
256	O	O
Integer	B-api_mention	B-api_mention
You	O	O
should	O	O
not	O	O
compare	O	O
object	O	O
references	O	O
with	O	O
=	O	O
=	O	O
or	O	O
!	O	O
=	O	O
.	O	O
You	O	O
should	O	O
use	O	O
.	B-api_mention	B-api_mention
equals	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
,	O	O
or	O	O
better	O	O
-	O	O
use	O	O
the	O	O
primitive	O	O
int	O	O
rather	O	O
than	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	B-api_mention	I-api_mention
:	O	O
Parses	O	O
the	O	O
string	O	O
argument	O	O
as	O	O
a	O	O
signed	O	O
decimal	O	O
integer	O	O
.	O	O
The	O	O
characters	O	O
in	O	O
the	O	O
string	O	O
must	O	O
all	O	O
be	O	O
decimal	O	O
digits	O	O
,	O	O
except	O	O
that	O	O
the	O	O
first	O	O
character	O	O
may	O	O
be	O	O
an	O	O
ASCII	O	O
minus	O	O
sign	O	O
'	O	O
-	O	O
'	O	O
(	O	O
'	O	O
\	O	O
u002D	O	O
'	O	O
)	O	O
to	O	O
indicate	O	O
a	O	O
negative	O	O
value	O	O
.	O	O
The	O	O
resulting	O	O
integer	O	O
value	O	O
is	O	O
returned	O	O
,	O	O
exactly	O	O
as	O	O
if	O	O
the	O	O
argument	O	O
and	O	O
the	O	O
radix	O	O
10	O	O
were	O	O
given	O	O
as	O	O
arguments	O	O
to	O	O
the	O	O
parseInt	B-api_mention	B-api_mention
(	O	I-api_mention
java	B-api_mention	I-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
,	O	I-api_mention
int	O	I-api_mention
)	O	I-api_mention
method	O	O
.	O	O
valueOf	B-api_mention	B-api_mention
Returns	O	O
an	O	O
Integer	B-api_mention	B-api_mention
object	O	O
holding	O	O
the	O	O
value	O	O
extracted	O	O
from	O	O
the	O	O
specified	O	O
String	B-api_mention	B-api_mention
when	O	O
parsed	O	O
with	O	O
the	O	O
radix	O	O
given	O	O
by	O	O
the	O	O
second	O	O
argument	O	O
.	O	O
The	O	O
first	O	O
argument	O	O
is	O	O
interpreted	O	O
as	O	O
representing	O	O
a	O	O
signed	O	O
integer	O	O
in	O	O
the	O	O
radix	O	O
specified	O	O
by	O	O
the	O	O
second	O	O
argument	O	O
,	O	O
exactly	O	O
as	O	O
if	O	O
the	O	O
arguments	O	O
were	O	O
given	O	O
to	O	O
the	O	O
parseInt	B-api_mention	O
(	I-api_mention	O
java	I-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
result	O	O
is	O	O
an	O	O
Integer	B-api_mention	B-api_mention
object	O	O
that	O	O
represents	O	O
the	O	O
integer	O	O
value	O	O
specified	O	O
by	O	O
the	O	O
string	O	O
.	O	O
equivalent	O	O
to	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
radix	O	O
-	O	O
the	O	O
radix	O	O
to	O	O
be	O	O
used	O	O
in	O	O
interpreting	O	O
s	O	O
so	O	O
if	O	O
you	O	O
equal	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
the	O	O
integer	O	O
inbetween	O	O
-	O	O
128	O	O
to	O	O
127	O	O
it	O	O
returns	O	O
true	O	O
in	O	O
your	O	O
condition	O	O
for	O	O
lesser	O	O
than	O	O
-	O	O
128	O	O
and	O	O
greater	O	O
than	O	O
127	O	O
it	O	O
gives	O	O
false	O	O
Question	O	O
-	O	O
18723596	O	O
String	B-api_mention	B-api_mention
x	O	O
=	O	O
(	O	O
String	B-api_mention	B-api_mention
)	O	O
null	O	O
;	O	O
Why	O	O
there	O	O
is	O	O
no	O	O
exception	O	O
in	O	O
this	O	O
statement	O	O
?	O	O
#	O	O
pre	O	O
It	O	O
prints	O	O
null	O	O
.	O	O
But	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
should	O	O
throw	O	O
a	O	O
null	O	O
pointer	O	O
exception	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
8579702	O	O
If	O	O
you	O	O
just	O	O
invoke	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
directly	O	O
,	O	O
it	O	O
'	O	O
s	O	O
executed	O	O
on	O	O
the	O	O
calling	O	O
thread	O	O
,	O	O
just	O	O
like	O	O
any	O	O
other	O	O
method	O	O
call	O	O
.	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
required	O	O
to	O	O
actually	O	O
create	O	O
a	O	O
new	O	O
thread	O	O
so	O	O
that	O	O
the	O	O
runnable	O	O
'	O	O
s	O	O
run	O	O
method	O	O
is	O	O
executed	O	O
in	O	O
parallel	O	O
.	O	O
Question	O	O
-	O	O
32623834	O	O
,	O	O
answer	O	O
-	O	O
32652449	O	O
Another	O	O
related	O	O
point	O	O
:	O	O
you	O	O
can	O	O
make	O	O
use	O	O
of	O	O
the	O	O
constant	O	O
pool	O	O
to	O	O
improve	O	O
the	O	O
performance	O	O
of	O	O
string	O	O
comparisons	O	O
in	O	O
some	O	O
circumstances	O	O
,	O	O
by	O	O
using	O	O
the	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
That	O	O
method	O	O
returns	O	O
the	O	O
instance	O	O
of	O	O
String	B-api_mention	B-api_mention
with	O	O
the	O	O
same	O	O
contents	O	O
as	O	O
the	O	O
String	B-api_mention	B-api_mention
on	O	O
which	O	O
it	O	O
is	O	O
invoked	O	O
from	O	O
the	O	O
String	B-api_mention	B-api_mention
constants	O	O
pool	O	O
,	O	O
adding	O	O
it	O	O
it	O	O
if	O	O
is	O	O
not	O	O
yet	O	O
present	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
after	O	O
using	O	O
intern	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
all	O	O
Strings	O	O
with	O	O
the	O	O
same	O	O
contents	O	O
are	O	O
guaranteed	O	O
to	O	O
be	O	O
the	O	O
same	O	O
String	B-api_mention	B-api_mention
instance	O	O
as	O	O
each	O	O
other	O	O
and	O	O
as	O	O
any	O	O
String	B-api_mention	B-api_mention
constants	O	O
with	O	O
those	O	O
contents	O	O
,	O	O
meaning	O	O
you	O	O
can	O	O
then	O	O
use	O	O
the	O	O
equals	O	O
operator	O	O
(	O	O
=	O	O
=	O	O
)	O	O
on	O	O
them	O	O
.	O	O
This	O	O
is	O	O
just	O	O
an	O	O
example	O	O
which	O	O
is	O	O
not	O	O
very	O	O
useful	O	O
on	O	O
its	O	O
own	O	O
,	O	O
but	O	O
it	O	O
illustrates	O	O
the	O	O
point	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
little	O	O
trick	O	O
isn	O	O
'	O	O
t	O	O
worth	O	O
designing	O	O
your	O	O
code	O	O
around	O	O
,	O	O
but	O	O
it	O	O
is	O	O
worth	O	O
keeping	O	O
in	O	O
mind	O	O
for	O	O
the	O	O
day	O	O
when	O	O
you	O	O
notice	O	O
a	O	O
little	O	O
more	O	O
speed	O	O
could	O	O
be	O	O
eked	O	O
out	O	O
of	O	O
some	O	O
bit	O	O
of	O	O
performance	O	O
sensitive	O	O
code	O	O
by	O	O
using	O	O
the	O	O
=	O	O
=	O	O
operator	O	O
on	O	O
a	O	O
string	O	O
with	O	O
judicious	O	O
use	O	O
of	O	O
intern	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
26684562	O	O
,	O	O
answer	O	O
-	O	O
26684710	O	O
Both	O	O
map	B-api_mention	O
and	O	O
flatMap	B-api_mention	B-api_mention
can	O	O
be	O	O
applied	O	O
to	O	O
a	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
and	O	O
they	O	O
both	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
The	O	O
difference	O	O
is	O	O
that	O	O
the	O	O
map	B-api_mention	O
operation	O	O
produces	O	O
one	O	O
output	O	O
value	O	O
for	O	O
each	O	O
input	O	O
value	O	O
,	O	O
whereas	O	O
the	O	O
flatMap	B-api_mention	B-api_mention
operation	O	O
produces	O	O
an	O	O
arbitrary	O	O
number	O	O
(	O	O
zero	O	O
or	O	O
more	O	O
)	O	O
values	O	O
for	O	O
each	O	O
input	O	O
value	O	O
.	O	O
This	O	O
is	O	O
reflected	O	O
in	O	O
the	O	O
arguments	O	O
to	O	O
each	O	O
operation	O	O
.	O	O
The	O	O
map	O	O
operation	O	O
takes	O	O
a	O	O
Function	O	B-api_mention
,	O	O
which	O	O
is	O	O
called	O	O
for	O	O
each	O	O
value	O	O
in	O	O
the	O	O
input	O	O
stream	O	O
and	O	O
produces	O	O
one	O	O
result	O	O
value	O	O
,	O	O
which	O	O
is	O	O
sent	O	O
to	O	O
the	O	O
output	O	O
stream	O	O
.	O	O
The	O	O
flatMap	B-api_mention	B-api_mention
operation	O	O
takes	O	O
a	O	O
function	O	O
that	O	O
conceptually	O	O
wants	O	O
to	O	O
consume	O	O
one	O	O
value	O	O
and	O	O
produce	O	O
an	O	O
arbitrary	O	O
number	O	O
of	O	O
values	O	O
.	O	O
However	O	O
,	O	O
in	O	O
Java	O	O
,	O	O
it	O	O
'	O	O
s	O	O
cumbersome	O	O
for	O	O
a	O	O
method	O	O
to	O	O
return	O	O
an	O	O
arbitrary	O	O
number	O	O
of	O	O
values	O	O
,	O	O
since	O	O
methods	O	O
can	O	O
return	O	O
only	O	O
zero	O	O
or	O	O
one	O	O
value	O	O
.	O	O
One	O	O
could	O	O
imagine	O	O
an	O	O
API	O	O
where	O	O
the	O	O
mapper	O	O
function	O	O
for	O	O
flatMap	B-api_mention	B-api_mention
takes	O	O
a	O	O
value	O	O
and	O	O
returns	O	O
an	O	O
array	O	O
or	O	O
a	O	O
List	O	B-api_mention
of	O	O
values	O	O
,	O	O
which	O	O
are	O	O
then	O	O
sent	O	O
to	O	O
the	O	O
output	O	O
.	O	O
Given	O	O
that	O	O
this	O	O
is	O	O
the	O	O
streams	O	O
library	O	O
,	O	O
a	O	O
particularly	O	O
apt	O	O
way	O	O
to	O	O
represent	O	O
an	O	O
arbitrary	O	O
number	O	O
of	O	O
return	O	O
values	O	O
is	O	O
for	O	O
the	O	O
mapper	O	O
function	O	O
itself	O	O
to	O	O
return	O	O
a	O	O
stream	O	O
!	O	O
The	O	O
values	O	O
from	O	O
the	O	O
stream	O	O
returned	O	O
by	O	O
the	O	O
mapper	O	O
are	O	O
drained	O	O
from	O	O
the	O	O
stream	O	O
and	O	O
are	O	O
passed	O	O
to	O	O
the	O	O
output	O	O
stream	O	O
.	O	O
The	O	O
"	O	O
clumps	O	O
"	O	O
of	O	O
values	O	O
returned	O	O
by	O	O
each	O	O
call	O	O
to	O	O
the	O	O
mapper	O	O
function	O	O
are	O	O
not	O	O
distinguished	O	O
at	O	O
all	O	O
in	O	O
the	O	O
output	O	O
stream	O	O
,	O	O
thus	O	O
the	O	O
output	O	O
is	O	O
said	O	O
to	O	O
have	O	O
been	O	O
"	O	O
flattened	O	O
.	O	O
"	O	O
Typical	O	O
use	O	O
is	O	O
for	O	O
the	O	O
mapper	O	O
function	O	O
of	O	O
flatMap	B-api_mention	B-api_mention
to	O	O
return	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
empty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
it	O	O
wants	O	O
to	O	O
send	O	O
zero	O	O
values	O	O
,	O	O
or	O	O
something	O	O
like	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
it	O	O
wants	O	O
to	O	O
return	O	O
several	O	O
values	O	O
.	O	O
But	O	O
of	O	O
course	O	O
any	O	O
stream	O	O
can	O	O
be	O	O
returned	O	O
.	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
7353473	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
better	O	O
(	O	O
as	O	O
explained	O	O
by	O	O
Nick	O	O
)	O	O
,	O	O
but	O	O
still	O	O
not	O	O
very	O	O
good	O	O
One	O	O
host	O	O
can	O	O
be	O	O
known	O	O
under	O	O
many	O	O
different	O	O
hostnames	O	O
.	O	O
Usually	O	O
you	O	O
'	O	O
ll	O	O
be	O	O
looking	O	O
for	O	O
the	O	O
hostname	O	O
your	O	O
host	O	O
has	O	O
in	O	O
a	O	O
specific	O	O
context	O	O
.	O	O
For	O	O
example	O	O
,	O	O
in	O	O
a	O	O
web	O	O
application	O	O
,	O	O
you	O	O
might	O	O
be	O	O
looking	O	O
for	O	O
the	O	O
hostname	O	O
used	O	O
by	O	O
whoever	O	O
issued	O	O
the	O	O
request	O	O
you	O	O
'	O	O
re	O	O
currently	O	O
handling	O	O
.	O	O
How	O	O
to	O	O
best	O	O
find	O	O
that	O	O
one	O	O
depends	O	O
on	O	O
which	O	O
framework	O	O
you	O	O
'	O	O
re	O	O
using	O	O
for	O	O
your	O	O
web	O	O
application	O	O
.	O	O
In	O	O
some	O	O
kind	O	O
of	O	O
other	O	O
internet	O	O
-	O	O
facing	O	O
service	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
want	O	O
the	O	O
hostname	O	O
your	O	O
service	O	O
is	O	O
available	O	O
through	O	O
from	O	O
the	O	O
'	O	O
outside	O	O
'	O	O
.	O	O
Due	O	O
to	O	O
proxies	O	O
,	O	O
firewalls	O	O
etc	O	O
this	O	O
might	O	O
not	O	O
even	O	O
be	O	O
a	O	O
hostname	O	O
on	O	O
the	O	O
machine	O	O
your	O	O
service	O	O
is	O	O
installed	O	O
on	O	O
-	O	O
you	O	O
might	O	O
try	O	O
to	O	O
come	O	O
up	O	O
with	O	O
a	O	O
reasonable	O	O
default	O	O
,	O	O
but	O	O
you	O	O
should	O	O
definitely	O	O
make	O	O
this	O	O
configurable	O	O
for	O	O
whoever	O	O
installs	O	O
this	O	O
.	O	O
Question	O	O
-	O	O
32312876	O	O
,	O	O
answer	O	O
-	O	O
32313069	O	O
This	O	O
is	O	O
possible	O	O
using	O	O
the	O	O
mergeFunction	O	B-api_mention
parameter	O	O
of	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
keyMapper	I-api_mention	I-api_mention
,	I-api_mention	O
valueMapper	I-api_mention	B-api_mention
,	I-api_mention	O
mergeFunction	I-api_mention	O
)	I-api_mention	O
:	O	O
#	O	O
pre	O	O
mergeFunction	O	O
is	O	O
a	O	O
function	O	O
that	O	O
operates	O	O
on	O	O
two	O	O
values	O	O
associated	O	O
with	O	O
the	O	O
same	O	O
key	O	O
.	O	O
adress1	O	O
corresponds	O	O
to	O	O
the	O	O
first	O	O
address	O	O
that	O	O
was	O	O
encountered	O	O
when	O	O
collecting	O	O
elements	O	O
and	O	O
adress2	O	O
corresponds	O	O
to	O	O
the	O	O
second	O	O
address	O	O
encountered	O	O
:	O	O
this	O	O
lambda	O	O
just	O	O
tells	O	O
to	O	O
keep	O	O
the	O	O
first	O	O
address	O	O
and	O	O
ignores	O	O
the	O	O
second	O	O
.	O	O
Question	O	O
-	O	O
15336477	O	O
,	O	O
answer	O	O
-	O	O
15336606	O	O
It	O	O
got	O	O
deprecated	O	O
in	O	O
version	O	O
4	O	O
.	O	O
3	O	O
-	O	O
alpha1	O	O
which	O	O
you	O	O
use	O	O
because	O	O
of	O	O
the	O	O
LATEST	O	O
version	O	O
specification	O	O
.	O	O
If	O	O
you	O	O
take	O	O
a	O	O
look	O	O
at	O	O
the	O	O
javadoc	O	O
of	O	O
the	O	O
class	O	O
,	O	O
it	O	O
tells	O	O
you	O	O
what	O	O
to	O	O
use	O	O
instead	O	O
:	O	O
HttpClientBuilder	B-api_mention	B-api_mention
.	O	O
In	O	O
the	O	O
latest	O	O
stable	O	O
version	O	O
(	O	O
4	O	O
.	O	O
2	O	O
.	O	O
3	O	O
)	O	O
the	O	O
DefaultHttpClient	B-api_mention	B-api_mention
is	O	O
not	O	O
deprecated	O	O
yet	O	O
.	O	O
Question	O	O
-	O	O
7520432	O	O
I	O	O
wanted	O	O
to	O	O
clarify	O	O
if	O	O
I	O	O
understand	O	O
this	O	O
correctly	O	O
:	O	O
#	O	O
li	O	O
=	O	O
=	O	O
-	O	O
>	O	O
is	O	O
a	O	O
reference	O	O
comparison	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
both	O	O
objects	O	O
point	O	O
to	O	O
the	O	O
same	O	O
memory	O	O
location	O	O
#	O	O
li	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
>	O	O
evaluates	O	O
to	O	O
the	O	O
comparison	O	O
of	O	O
values	O	O
in	O	O
the	O	O
objects	O	O
Am	O	O
I	O	O
correct	O	O
in	O	O
my	O	O
understanding	O	O
?	O	O
Question	O	O
-	O	O
18532488	O	O
In	O	O
many	O	O
other	O	O
languages	O	O
,	O	O
eg	O	O
.	O	O
Haskell	O	O
,	O	O
it	O	O
is	O	O
easy	O	O
to	O	O
repeat	O	O
a	O	O
value	O	O
or	O	O
function	O	O
multiple	O	O
times	O	O
,	O	O
eg	O	O
.	O	O
to	O	O
get	O	O
a	O	O
list	O	O
of	O	O
8	O	O
copies	O	O
of	O	O
the	O	O
value	O	O
1	O	O
:	O	O
take	O	O
8	O	O
(	O	O
args	O	O
)	O	O
but	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
found	O	O
this	O	O
yet	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
Is	O	O
there	O	O
such	O	O
a	O	O
function	O	O
in	O	O
Java	O	O
8	O	O
'	O	O
s	O	O
JDK	O	O
?	O	O
Or	O	O
alternatively	O	O
something	O	O
equivalent	O	O
to	O	O
a	O	O
range	O	O
like	O	O
[	O	O
1	O	O
.	O	O
.	O	O
8	O	O
]	O	O
It	O	O
would	O	O
seem	O	O
an	O	O
obvious	O	O
replacement	O	O
for	O	O
a	O	O
verbose	O	O
statement	O	O
in	O	O
Java	O	O
like	O	O
#	O	O
pre	O	O
to	O	O
have	O	O
something	O	O
like	O	O
Range	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
from	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
though	O	O
this	O	O
particular	O	O
example	O	O
doesn	O	O
'	O	O
t	O	O
look	O	O
much	O	O
more	O	O
concise	O	O
actually	O	O
.	O	O
.	O	O
.	O	O
but	O	O
hopefully	O	O
it	O	O
'	O	O
s	O	O
more	O	O
readable	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31922994	O	O
I	O	O
think	O	O
that	O	O
is	O	O
because	O	O
you	O	O
usually	O	O
write	O	O
your	O	O
functions	O	O
to	O	O
manipulate	O	O
data	O	O
,	O	O
and	O	O
then	O	O
lift	O	O
it	O	O
to	O	O
Optional	B-api_mention	B-api_mention
using	O	O
map	O	O
and	O	O
similar	O	O
functions	O	O
.	O	O
This	O	O
adds	O	O
the	O	O
default	O	O
Optional	B-api_mention	B-api_mention
behavior	O	O
to	O	O
it	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
there	O	O
might	O	O
be	O	O
cases	O	O
,	O	O
when	O	O
it	O	O
is	O	O
necessary	O	O
to	O	O
write	O	O
your	O	O
own	O	O
auxilary	O	O
function	O	O
that	O	O
works	O	O
on	O	O
Optional	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
22561614	O	O
,	O	O
answer	O	O
-	O	O
22561690	O	O
Comparator	B-api_mention	B-api_mention
is	O	O
a	O	O
functional	O	O
interface	O	O
,	O	O
and	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
complies	O	O
with	O	O
that	O	O
interface	O	O
(	O	O
after	O	O
autoboxing	O	O
/	O	O
unboxing	O	O
is	O	O
taken	O	O
into	O	O
consideration	O	O
)	O	O
.	O	O
It	O	O
takes	O	O
two	O	O
int	O	O
values	O	O
and	O	O
returns	O	O
an	O	O
int	O	O
-	O	O
just	O	O
as	O	O
you	O	O
'	O	O
d	O	O
expect	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
to	O	O
(	O	O
again	O	O
,	O	O
squinting	O	O
to	O	O
ignore	O	O
the	O	O
Integer	B-api_mention	B-api_mention
/	O	O
int	O	O
difference	O	O
)	O	O
.	O	O
However	O	O
,	O	O
I	O	O
wouldn	O	O
'	O	O
t	O	O
expect	O	O
it	O	O
to	O	O
do	O	O
the	O	O
right	O	O
thing	O	O
,	O	O
given	O	O
that	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
doesn	O	O
'	O	O
t	O	O
comply	O	O
with	O	O
the	O	O
semantics	O	O
of	O	O
Comparator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
compare	I-api_mention	I-api_mention
.	O	O
And	O	O
indeed	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
really	O	O
work	O	O
in	O	O
general	O	O
.	O	O
For	O	O
example	O	O
,	O	O
make	O	O
one	O	O
small	O	O
change	O	O
:	O	O
#	O	O
pre	O	O
.	O	O
.	O	O
.	O	O
and	O	O
now	O	O
the	O	O
max	O	O
value	O	O
is	O	O
-	O	O
20	O	O
and	O	O
the	O	O
min	O	O
value	O	O
is	O	O
-	O	O
1	O	O
.	O	O
Instead	O	O
,	O	O
both	O	O
calls	O	O
should	O	O
use	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
compare	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
27747562	O	O
,	O	O
answer	O	O
-	O	O
27747702	O	O
A	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
could	O	O
very	O	O
well	O	O
be	O	O
an	O	O
Item	B-api_mention	O
.	O	O
See	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
A	O	O
cast	O	O
tells	O	O
the	O	O
compiler	O	O
:	O	O
"	O	O
I	O	O
know	O	O
you	O	O
can	O	O
'	O	O
t	O	O
be	O	O
sure	O	O
that	O	O
this	O	O
is	O	O
a	O	O
object	O	O
of	O	O
type	O	O
Item	O	O
,	O	O
but	O	O
I	O	O
know	O	O
better	O	O
than	O	O
you	O	O
,	O	O
so	O	O
please	O	O
compile	O	O
"	O	O
.	O	O
The	O	O
compiler	O	O
will	O	O
only	O	O
refuse	O	O
to	O	O
compile	O	O
that	O	O
if	O	O
it	O	O
'	O	O
s	O	O
impossible	O	O
for	O	O
the	O	O
returned	O	O
object	O	O
to	O	O
be	O	O
an	O	O
instance	O	O
of	O	O
Item	B-api_mention	O
(	O	O
like	O	O
,	O	O
for	O	O
example	O	O
,	O	O
Integer	B-api_mention	B-api_mention
can	O	O
'	O	O
t	O	O
ever	O	O
be	O	O
a	O	O
String	B-api_mention	B-api_mention
)	O	O
At	O	O
runtime	O	O
,	O	O
the	O	O
type	O	O
of	O	O
the	O	O
actual	O	O
object	O	O
returned	O	O
by	O	O
the	O	O
method	O	O
will	O	O
be	O	O
checked	O	O
,	O	O
and	O	O
if	O	O
it	O	O
'	O	O
s	O	O
not	O	O
actually	O	O
an	O	O
object	O	O
of	O	O
type	O	O
Item	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
get	O	O
a	O	O
ClassCastException	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26796725	O	O
Swapping	O	O
Only	O	O
One	O	O
Occurrence	O	O
If	O	O
there	O	O
is	O	O
only	O	O
one	O	O
occurrence	O	O
of	O	O
each	O	O
of	O	O
the	O	O
swapable	O	O
strings	O	O
in	O	O
the	O	O
input	O	O
,	O	O
you	O	O
can	O	O
do	O	O
the	O	O
following	O	O
:	O	O
Before	O	O
proceeding	O	O
to	O	O
any	O	O
replace	O	O
,	O	O
get	O	O
the	O	O
indices	O	O
of	O	O
the	O	O
occurrences	O	O
of	O	O
the	O	O
words	O	O
.	O	O
After	O	O
that	O	O
we	O	O
only	O	O
replace	O	O
the	O	O
word	O	O
found	O	O
at	O	O
these	O	O
indexes	O	O
,	O	O
and	O	O
not	O	O
all	O	O
occurrences	O	O
.	O	O
This	O	O
solution	O	O
uses	O	O
StringBuilder	B-api_mention	B-api_mention
and	O	O
does	O	O
not	O	O
produce	O	O
intermediate	O	O
String	B-api_mention	B-api_mention
s	O	O
like	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
One	O	O
thing	O	O
to	O	O
note	O	O
:	O	O
if	O	O
the	O	O
swapable	O	O
words	O	O
have	O	O
different	O	O
lengths	O	O
,	O	O
after	O	O
the	O	O
first	O	O
replace	O	O
the	O	O
second	O	O
index	O	O
might	O	O
change	O	O
(	O	O
if	O	O
the	O	O
1st	O	O
word	O	O
occurs	O	O
before	O	O
the	O	O
2nd	O	O
)	O	O
exactly	O	O
with	O	O
the	O	O
difference	O	O
of	O	O
the	O	O
2	O	O
lengths	O	O
.	O	O
So	O	O
aligning	O	O
the	O	O
second	O	O
index	O	O
will	O	O
ensure	O	O
this	O	O
works	O	O
even	O	O
if	O	O
we	O	O
'	O	O
re	O	O
swapping	O	O
words	O	O
with	O	O
different	O	O
lengths	O	O
.	O	O
#	O	O
pre	O	O
Swapping	O	O
Arbitrary	O	O
Number	O	O
of	O	O
Occurrences	O	O
Analogous	O	O
to	O	O
the	O	O
previous	O	O
case	O	O
we	O	O
will	O	O
first	O	O
collect	O	O
the	O	O
indexes	O	O
(	O	O
occurrences	O	O
)	O	O
of	O	O
the	O	O
words	O	O
,	O	O
but	O	O
in	O	O
this	O	O
case	O	O
it	O	O
will	O	O
a	O	O
list	O	O
of	O	O
integers	O	O
for	O	O
each	O	O
word	O	O
,	O	O
not	O	O
just	O	O
one	O	O
int	O	O
.	O	O
For	O	O
this	O	O
we	O	O
will	O	O
use	O	O
the	O	O
following	O	O
utility	O	O
method	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
using	O	O
this	O	O
we	O	O
will	O	O
replace	O	O
the	O	O
words	O	O
with	O	O
the	O	O
other	O	O
one	O	O
by	O	O
decreasing	O	O
index	O	O
(	O	O
which	O	O
might	O	O
require	O	O
to	O	O
alternate	O	O
between	O	O
the	O	O
2	O	O
swapable	O	O
words	O	O
)	O	O
so	O	O
that	O	O
we	O	O
won	O	O
'	O	O
t	O	O
even	O	O
have	O	O
to	O	O
correct	O	O
the	O	O
indices	O	O
after	O	O
a	O	O
replace	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32693704	O	O
,	O	O
answer	O	O
-	O	O
32749756	O	O
I	O	O
'	O	O
m	O	O
going	O	O
to	O	O
shoot	O	O
in	O	O
the	O	O
dark	O	O
here	O	O
.	O	O
.	O	O
.	O	O
My	O	O
guess	O	O
is	O	O
that	O	O
it	O	O
might	O	O
have	O	O
been	O	O
changed	O	O
in	O	O
order	O	O
to	O	O
prepare	O	O
the	O	O
ground	O	O
for	O	O
Specialization	O	O
(	O	O
aka	O	O
generics	O	O
over	O	O
primitive	O	O
types	O	O
)	O	O
.	O	O
Maybe	O	O
(	O	O
and	O	O
I	O	O
insist	O	O
on	O	O
maybe	O	O
)	O	O
,	O	O
this	O	O
change	O	O
is	O	O
meant	O	O
to	O	O
make	O	O
transition	O	O
to	O	O
Java	O	O
10	O	O
easier	O	O
,	O	O
in	O	O
the	O	O
event	O	O
of	O	O
specialization	O	O
being	O	O
part	O	O
of	O	O
the	O	O
JDK	O	O
.	O	O
If	O	O
you	O	O
look	O	O
at	O	O
the	O	O
State	O	O
of	O	O
the	O	O
Specialization	O	O
document	O	O
,	O	O
Language	O	O
restrictions	O	O
section	O	O
,	O	O
it	O	O
says	O	O
the	O	O
following	O	O
:	O	O
#	O	O
blockquote	O	O
(	O	O
Emphasis	O	O
is	O	O
mine	O	O
)	O	O
.	O	O
And	O	O
ahead	O	O
in	O	O
the	O	O
Specializer	O	O
transformations	O	O
section	O	O
,	O	O
it	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
Later	O	O
on	O	O
,	O	O
near	O	O
the	O	O
end	O	O
of	O	O
the	O	O
document	O	O
,	O	O
in	O	O
the	O	O
Further	O	O
investigation	O	O
section	O	O
,	O	O
it	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
Now	O	O
,	O	O
regarding	O	O
the	O	O
change	O	O
.	O	O
.	O	O
.	O	O
If	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
going	O	O
to	O	O
be	O	O
specialized	O	O
,	O	O
then	O	O
its	O	O
signature	O	O
should	O	O
change	O	O
to	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
However	O	O
this	O	O
case	O	O
is	O	O
specifically	O	O
listed	O	O
in	O	O
the	O	O
(	O	O
already	O	O
mentioned	O	O
)	O	O
Language	O	O
restrictions	O	O
section	O	O
(	O	O
it	O	O
would	O	O
violate	O	O
the	O	O
emphasized	O	O
items	O	O
)	O	O
.	O	O
So	O	O
maybe	O	O
someone	O	O
decided	O	O
that	O	O
it	O	O
would	O	O
be	O	O
better	O	O
to	O	O
not	O	O
use	O	O
it	O	O
from	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
especially	O	O
if	O	O
value	O	O
is	O	O
null	O	O
.	O	O
Question	O	O
-	O	O
18410035	O	O
,	O	O
answer	O	O
-	O	O
37409771	O	O
In	O	O
Java	O	O
8	O	O
collection	O	O
classes	O	O
that	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
for	O	O
example	O	O
all	O	O
lists	O	O
)	O	O
now	O	O
have	O	O
forEach	B-api_mention	B-api_mention
method	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
above	O	O
example	O	O
makes	O	O
use	O	O
of	O	O
method	O	O
-	O	O
reference	O	O
introduced	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
We	O	O
can	O	O
also	O	O
iterate	O	O
over	O	O
a	O	O
list	O	O
using	O	O
Stream	B-api_mention	B-api_mention
as	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
advantage	O	O
with	O	O
later	O	O
option	O	O
is	O	O
that	O	O
we	O	O
can	O	O
also	O	O
make	O	O
use	O	O
of	O	O
parallel	O	O
streams	O	O
wherever	O	O
appropriate	O	O
.	O	O
If	O	O
the	O	O
objective	O	O
is	O	O
only	O	O
to	O	O
print	O	O
the	O	O
items	O	O
irrespective	O	O
of	O	O
the	O	O
order	O	O
then	O	O
we	O	O
can	O	O
use	O	O
parallel	O	O
stream	O	O
as	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
14014086	O	O
,	O	O
answer	O	O
-	O	O
20784007	O	O
Ken	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
basically	O	O
right	O	O
but	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
chime	O	O
in	O	O
on	O	O
the	O	O
"	O	O
why	O	O
would	O	O
you	O	O
want	O	O
to	O	O
use	O	O
one	O	O
over	O	O
the	O	O
other	O	O
?	O	O
"	O	O
part	O	O
of	O	O
your	O	O
question	O	O
.	O	O
Basics	O	O
The	O	O
base	O	O
interface	O	O
you	O	O
choose	O	O
for	O	O
your	O	O
repository	O	O
has	O	O
two	O	O
main	O	O
purposes	O	O
.	O	O
First	O	O
,	O	O
you	O	O
allow	O	O
the	O	O
Spring	O	O
Data	O	O
repository	O	O
infrastructure	O	O
to	O	O
find	O	O
your	O	O
interface	O	O
and	O	O
trigger	O	O
the	O	O
proxy	O	O
creation	O	O
so	O	O
that	O	O
you	O	O
inject	O	O
instances	O	O
of	O	O
the	O	O
interface	O	O
into	O	O
clients	O	O
.	O	O
The	O	O
second	O	O
purpose	O	O
is	O	O
to	O	O
pull	O	O
in	O	O
as	O	O
much	O	O
functionality	O	O
as	O	O
needed	O	O
into	O	O
the	O	O
interface	O	O
without	O	O
having	O	O
to	O	O
declare	O	O
extra	O	O
methods	O	O
.	O	O
The	O	O
common	O	O
interfaces	O	O
The	O	O
Spring	O	O
Data	O	O
core	O	O
library	O	O
ships	O	O
with	O	O
two	O	O
base	O	O
interfaces	O	O
that	O	O
expose	O	O
a	O	O
dedicated	O	O
set	O	O
of	O	O
functionalities	O	O
:	O	O
#	O	O
li	O	O
CrudRepository	B-api_mention	O
-	O	O
CRUD	O	O
methods	O	O
#	O	O
li	O	O
PagingAndSortingRepository	B-api_mention	O
-	O	O
methods	O	O
for	O	O
pagination	O	O
and	O	O
sorting	O	O
(	O	O
extends	O	O
CrudRepository	B-api_mention	B-api_mention
)	O	O
Store	O	O
-	O	O
specific	O	O
interfaces	O	O
The	O	O
individual	O	O
store	O	O
modules	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
for	O	O
JPA	O	O
or	O	O
MongoDB	O	O
)	O	O
expose	O	O
store	O	O
-	O	O
specific	O	O
extensions	O	O
of	O	O
these	O	O
base	O	O
interfaces	O	O
to	O	O
allow	O	O
access	O	O
to	O	O
store	O	O
-	O	O
specific	O	O
functionality	O	O
like	O	O
flushing	O	O
or	O	O
dedicated	O	O
batching	O	O
that	O	O
take	O	O
some	O	O
store	O	O
specifics	O	O
into	O	O
account	O	O
.	O	O
An	O	O
example	O	O
for	O	O
this	O	O
is	O	O
deleteInBatch	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
JpaRepository	B-api_mention	B-api_mention
which	O	O
is	O	O
different	O	O
from	O	O
delete	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
as	O	O
it	O	O
uses	O	O
a	O	O
query	O	O
to	O	O
delete	O	O
the	O	O
given	O	O
entities	O	O
which	O	O
is	O	O
more	O	O
performant	O	O
but	O	O
comes	O	O
with	O	O
the	O	O
side	O	O
effect	O	O
of	O	O
not	O	O
triggering	O	O
the	O	O
JPA	O	O
-	O	O
defined	O	O
cascades	O	O
(	O	O
as	O	O
the	O	O
spec	O	O
defines	O	O
it	O	O
)	O	O
.	O	O
We	O	O
generally	O	O
recommend	O	O
not	O	O
to	O	O
use	O	O
these	O	O
base	O	O
interfaces	O	O
as	O	O
they	O	O
expose	O	O
the	O	O
underlying	O	O
persistence	O	O
technology	O	O
to	O	O
the	O	O
clients	O	O
and	O	O
thus	O	O
tighten	O	O
the	O	O
coupling	O	O
between	O	O
them	O	O
and	O	O
the	O	O
repository	O	O
.	O	O
Plus	O	O
,	O	O
you	O	O
get	O	O
a	O	O
bit	O	O
away	O	O
from	O	O
the	O	O
original	O	O
definition	O	O
of	O	O
a	O	O
repository	O	O
which	O	O
is	O	O
basically	O	O
"	O	O
a	O	O
collection	O	O
of	O	O
entities	O	O
"	O	O
.	O	O
So	O	O
if	O	O
you	O	O
can	O	O
,	O	O
stay	O	O
with	O	O
PagingAndSortingRepository	B-api_mention	B-api_mention
.	O	O
Custom	O	O
repository	O	O
base	O	O
interfaces	O	O
The	O	O
downside	O	O
of	O	O
directly	O	O
depending	O	O
on	O	O
one	O	O
of	O	O
the	O	O
provided	O	O
base	O	O
interfaces	O	O
is	O	O
two	O	O
-	O	O
fold	O	O
.	O	O
Both	O	O
of	O	O
them	O	O
might	O	O
be	O	O
considered	O	O
as	O	O
theoretical	O	O
but	O	O
I	O	O
think	O	O
they	O	O
'	O	O
re	O	O
important	O	O
to	O	O
be	O	O
aware	O	O
of	O	O
:	O	O
#	O	O
li	O	O
Depending	O	O
on	O	O
a	O	O
a	O	O
Spring	O	O
Data	O	O
repository	O	O
interface	O	O
couples	O	O
your	O	O
repository	O	O
interface	O	O
to	O	O
the	O	O
library	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
this	O	O
is	O	O
a	O	O
particular	O	O
issue	O	O
as	O	O
you	O	O
'	O	O
ll	O	O
probably	O	O
use	O	O
abstractions	O	O
like	O	O
Page	B-api_mention	O
or	O	O
Pageable	B-api_mention	B-api_mention
in	O	O
your	O	O
code	O	O
anyway	O	O
.	O	O
Spring	O	O
Data	O	O
is	O	O
not	O	O
any	O	O
different	O	O
from	O	O
any	O	O
other	O	O
general	O	O
purpose	O	O
library	O	O
like	O	O
commons	O	O
-	O	O
lang	O	O
or	O	O
Guava	O	O
.	O	O
As	O	O
long	O	O
as	O	O
it	O	O
provides	O	O
reasonable	O	O
benefit	O	O
,	O	O
it	O	O
'	O	O
s	O	O
just	O	O
fine	O	O
.	O	O
#	O	O
li	O	O
By	O	O
extending	O	O
e	O	O
.	O	O
g	O	O
.	O	O
CrudRepository	B-api_mention	B-api_mention
,	O	O
you	O	O
expose	O	O
a	O	O
complete	O	O
set	O	O
of	O	O
persistence	O	O
method	O	O
at	O	O
once	O	O
.	O	O
This	O	O
is	O	O
probably	O	O
fine	O	O
in	O	O
most	O	O
circumstances	O	O
as	O	O
well	O	O
but	O	O
you	O	O
might	O	O
run	O	O
into	O	O
situations	O	O
where	O	O
you	O	O
'	O	O
d	O	O
like	O	O
to	O	O
gain	O	O
more	O	O
fine	O	O
-	O	O
grained	O	O
control	O	O
over	O	O
the	O	O
methods	O	O
expose	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
to	O	O
create	O	O
a	O	O
ReadOnlyRepository	B-api_mention	O
that	O	O
doesn	O	O
'	O	O
t	O	O
include	O	O
the	O	O
save	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
delete	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
of	O	O
CrudRepository	B-api_mention	B-api_mention
.	O	O
The	O	O
solution	O	O
to	O	O
both	O	O
of	O	O
these	O	O
downsides	O	O
is	O	O
to	O	O
craft	O	O
your	O	O
own	O	O
base	O	O
repository	O	O
interface	O	O
or	O	O
even	O	O
a	O	O
set	O	O
of	O	O
them	O	O
.	O	O
In	O	O
a	O	O
lot	O	O
of	O	O
applications	O	O
we	O	O
'	O	O
ve	O	O
seen	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
first	O	O
repository	O	O
interface	O	O
is	O	O
some	O	O
general	O	O
purpose	O	O
base	O	O
interface	O	O
that	O	O
actually	O	O
only	O	O
fixes	O	O
point	O	O
1	O	O
but	O	O
also	O	O
ties	O	O
the	O	O
ID	O	O
type	O	O
to	O	O
be	O	O
Long	B-api_mention	O
for	O	O
consistency	O	O
.	O	O
The	O	O
second	O	O
interface	O	O
usually	O	O
has	O	O
all	O	O
the	O	O
find	O	O
…	O	O
(	O	O
…	O	O
)	O	O
methods	O	O
copied	O	O
from	O	O
CrudRepository	B-api_mention	B-api_mention
and	O	O
PagingAndSortingRepository	B-api_mention	B-api_mention
but	O	O
does	O	O
not	O	O
expose	O	O
the	O	O
manipulating	O	O
ones	O	O
.	O	O
Read	O	O
more	O	O
on	O	O
that	O	O
approach	O	O
in	O	O
the	O	O
reference	O	O
documentation	O	O
.	O	O
Summary	O	O
-	O	O
tl	O	O
;	O	O
dr	O	O
The	O	O
repository	O	O
abstraction	O	O
allows	O	O
you	O	O
to	O	O
pickt	O	O
the	O	O
base	O	O
repository	O	O
totally	O	O
driven	O	O
by	O	O
you	O	O
architectural	O	O
and	O	O
functional	O	O
needs	O	O
.	O	O
Use	O	O
the	O	O
ones	O	O
provided	O	O
out	O	O
of	O	O
the	O	O
box	O	O
if	O	O
they	O	O
suit	O	O
,	O	O
craft	O	O
your	O	O
own	O	O
repository	O	O
base	O	O
interfaces	O	O
if	O	O
necessary	O	O
.	O	O
Stay	O	O
away	O	O
from	O	O
the	O	O
store	O	O
specific	O	O
repository	O	O
interfaces	O	O
unless	O	O
unavoidable	O	O
.	O	O
Question	O	O
-	O	O
32164385	O	O
,	O	O
answer	O	O
-	O	O
32164423	O	O
#	O	O
blockquote	O	O
The	O	O
only	O	O
way	O	O
is	O	O
to	O	O
read	O	O
the	O	O
code	O	O
unfortunately	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
common	O	O
convention	O	O
is	O	O
to	O	O
pass	O	O
an	O	O
object	O	O
which	O	O
cannot	O	O
be	O	O
modified	O	O
,	O	O
using	O	O
a	O	O
wrapper	O	O
if	O	O
needed	O	O
.	O	O
This	O	O
ensure	O	O
the	O	O
class	O	O
cannot	O	O
modify	O	O
the	O	O
object	O	O
.	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
readOnly	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
If	O	O
the	O	O
object	O	O
is	O	O
Cloneable	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
also	O	O
use	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
another	O	O
common	O	O
approach	O	O
is	O	O
to	O	O
use	O	O
a	O	O
copy	O	O
.	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
readOnly	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
If	O	O
you	O	O
care	O	O
about	O	O
such	O	O
behaviour	O	O
,	O	O
unit	O	O
tests	O	O
can	O	O
show	O	O
whether	O	O
a	O	O
method	O	O
modifies	O	O
an	O	O
object	O	O
or	O	O
not	O	O
.	O	O
If	O	O
you	O	O
have	O	O
unit	O	O
tests	O	O
already	O	O
,	O	O
it	O	O
is	O	O
usually	O	O
one	O	O
or	O	O
two	O	O
lines	O	O
extra	O	O
to	O	O
check	O	O
for	O	O
this	O	O
.	O	O
Question	O	O
-	O	O
5031614	O	O
,	O	O
answer	O	O
-	O	O
26826084	O	O
#	O	O
li	O	O
If	O	O
you	O	O
have	O	O
a	O	O
business	O	O
key	O	O
,	O	O
then	O	O
you	O	O
should	O	O
use	O	O
that	O	O
for	O	O
equals	B-api_mention	B-api_mention
/	O	O
hashCode	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
a	O	O
business	O	O
key	O	O
,	O	O
you	O	O
should	O	O
not	O	O
leave	O	O
it	O	O
with	O	O
the	O	O
default	O	O
Object	B-api_mention	B-api_mention
equals	I-api_mention	O
and	O	O
hashCode	B-api_mention	B-api_mention
implementations	O	O
because	O	O
that	O	O
does	O	O
not	O	O
work	O	O
after	O	O
you	O	O
merge	O	O
and	O	O
entity	O	O
.	O	O
#	O	O
li	O	O
You	O	O
can	O	O
use	O	O
the	O	O
entity	O	O
identifier	O	O
as	O	O
suggested	O	O
in	O	O
this	O	O
post	O	O
.	O	O
The	O	O
only	O	O
catch	O	O
is	O	O
that	O	O
you	O	O
need	O	O
to	O	O
use	O	O
a	O	O
hashCode	B-api_mention	B-api_mention
implementation	O	O
that	O	O
always	O	O
return	O	O
the	O	O
same	O	O
value	O	O
,	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
32653133	O	O
This	O	O
is	O	O
looks	O	O
like	O	O
a	O	O
good	O	O
fit	O	O
for	O	O
pattern	O	O
matching	O	O
and	O	O
a	O	O
more	O	O
traditional	O	O
Option	B-api_mention	B-api_mention
interface	O	O
with	O	O
Some	O	O
and	O	O
None	O	O
implementations	O	O
(	O	O
such	O	O
as	O	O
those	O	O
in	O	O
Javaslang	O	O
,	O	O
FunctionalJava	O	O
)	O	O
or	O	O
a	O	O
lazy	O	O
Maybe	O	O
implementation	O	O
in	O	O
cyclops	O	O
-	O	O
react	O	O
.	O	O
I	O	O
'	O	O
m	O	O
the	O	O
author	O	O
of	O	O
this	O	O
library	O	O
.	O	O
With	O	O
cyclops	O	O
-	O	O
react	O	O
you	O	O
can	O	O
also	O	O
use	O	O
structural	O	O
pattern	O	O
matching	O	O
on	O	O
JDK	O	O
types	O	O
.	O	O
For	O	O
Optional	B-api_mention	B-api_mention
you	O	O
can	O	O
match	O	O
on	O	O
the	O	O
present	O	O
and	O	O
absent	O	O
cases	O	O
via	O	O
the	O	O
visitor	O	O
pattern	O	O
.	O	O
it	O	O
would	O	O
look	O	O
something	O	O
like	O	O
this	O	O
-	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31965179	O	O
,	O	O
answer	O	O
-	O	O
35427268	O	O
There	O	O
'	O	O
s	O	O
a	O	O
long	O	O
list	O	O
of	O	O
things	O	O
that	O	O
have	O	O
been	O	O
changed	O	O
in	O	O
Hibernate	O	O
5	O	O
:	O	O
#	O	O
li	O	O
New	O	O
bootstrap	O	O
API	O	O
so	O	O
we	O	O
can	O	O
bootstrap	O	O
a	O	O
JPA	O	O
environment	O	O
programmatically	O	O
without	O	O
the	O	O
need	O	O
of	O	O
a	O	O
persistence	O	O
.	O	O
xml	O	O
file	O	O
.	O	O
#	O	O
li	O	O
Starting	O	O
in	O	O
5	O	O
.	O	O
0	O	O
Hibernate	O	O
Spatial	O	O
is	O	O
part	O	O
of	O	O
the	O	O
Hibernate	O	O
project	O	O
so	O	O
we	O	O
can	O	O
handle	O	O
GIS	O	O
data	O	O
too	O	O
.	O	O
#	O	O
li	O	O
The	O	O
Java	O	O
8	O	O
Date	B-api_mention	O
and	O	O
Time	B-api_mention	O
types	O	O
are	O	O
supported	O	O
in	O	O
domain	O	O
model	O	O
mappings	O	O
.	O	O
The	O	O
mapping	O	O
between	O	O
the	O	O
standard	O	O
SQL	O	O
Date	O	B-api_mention
/	O	O
Time	O	O
types	O	O
and	O	O
the	O	O
supported	O	O
Java	O	O
8	O	O
Date	B-api_mention	O
/	O	O
Time	B-api_mention	O
class	O	O
types	O	O
looks	O	O
as	O	O
follows	O	O
;	O	O
#	O	O
li	O	O
DATE	O	O
:	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
LocalDate	I-api_mention	I-api_mention
#	O	O
li	O	O
TIME	O	O
:	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
LocalTime	I-api_mention	I-api_mention
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
OffsetTime	I-api_mention	I-api_mention
#	O	O
li	O	O
TIMESTAMP	O	O
:	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Instant	I-api_mention	I-api_mention
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
LocalDateTime	I-api_mention	I-api_mention
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
OffsetDateTime	I-api_mention	I-api_mention
and	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
ZonedDateTime	I-api_mention	I-api_mention
#	O	O
li	O	O
The	O	O
bytecode	O	O
enhancement	O	O
mechanism	O	O
was	O	O
redesigned	O	O
from	O	O
scratch	O	O
,	O	O
and	O	O
Hibernate	O	O
features	O	O
both	O	O
a	O	O
Maven	O	O
and	O	O
a	O	O
Gradle	O	O
plugin	O	O
.	O	O
There	O	O
are	O	O
three	O	O
main	O	O
aspects	O	O
which	O	O
we	O	O
can	O	O
enhance	O	O
with	O	O
bytecode	O	O
instrumentation	O	O
:	O	O
#	O	O
li	O	O
Lazy	O	O
initialization	O	O
:	O	O
Fields	O	O
can	O	O
be	O	O
declared	O	O
as	O	O
LAZY	O	O
and	O	O
they	O	O
will	O	O
be	O	O
fetched	O	O
only	O	O
when	O	O
being	O	O
accessed	O	O
for	O	O
the	O	O
first	O	O
time	O	O
.	O	O
#	O	O
li	O	O
Dirty	O	O
checking	O	O
:	O	O
Entities	O	O
are	O	O
enhanced	O	O
so	O	O
that	O	O
they	O	O
can	O	O
keep	O	O
track	O	O
of	O	O
all	O	O
the	O	O
properties	O	O
that	O	O
get	O	O
changed	O	O
after	O	O
being	O	O
loaded	O	O
in	O	O
a	O	O
Persistence	O	O
Context	O	B-api_mention
.	O	O
#	O	O
li	O	O
Bidirectional	O	O
associations	O	O
:	O	O
It	O	O
'	O	O
s	O	O
possible	O	O
to	O	O
synchronize	O	O
both	O	O
sides	O	O
of	O	O
a	O	O
bidirectional	O	O
association	O	O
automatically	O	O
,	O	O
even	O	O
if	O	O
the	O	O
developer	O	O
only	O	O
updates	O	O
a	O	O
single	O	O
side	O	O
.	O	O
#	O	O
li	O	O
Hibernate	O	O
'	O	O
s	O	O
native	O	O
APIs	O	O
(	O	O
Session	O	O
,	O	O
etc	O	O
)	O	O
have	O	O
been	O	O
updated	O	O
to	O	O
use	O	O
generic	O	O
typed	O	O
.	O	O
No	O	O
need	O	O
to	O	O
cast	O	O
when	O	O
fetching	O	O
entities	O	O
.	O	O
#	O	O
li	O	O
Hibernate	O	O
5	O	O
.	O	O
0	O	O
expends	O	O
this	O	O
to	O	O
a	O	O
broader	O	O
set	O	O
of	O	O
types	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
UUID	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Second	O	O
-	O	O
level	O	O
cache	O	O
by	O	O
reference	O	O
.	O	O
This	O	O
feature	O	O
enables	O	O
direct	O	O
storage	O	O
of	O	O
entity	O	O
references	O	O
into	O	O
the	O	O
second	O	O
level	O	O
cache	O	O
for	O	O
immutable	O	O
entities	O	O
.	O	O
#	O	O
li	O	O
Starting	O	O
with	O	O
Hibernate	O	O
5	O	O
.	O	O
0	O	O
,	O	O
we	O	O
have	O	O
a	O	O
completely	O	O
new	O	O
User	O	O
Guide	O	O
that	O	O
was	O	O
written	O	O
from	O	O
scratch	O	O
.	O	O
Question	O	O
-	O	O
24651403	O	O
,	O	O
answer	O	O
-	O	O
24651855	O	O
OK	O	O
,	O	O
first	O	O
of	O	O
all	O	O
,	O	O
your	O	O
setExits	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
will	O	O
not	O	O
work	O	O
as	O	O
intended	O	O
,	O	O
chained	O	O
if	O	O
-	O	O
elseif	O	O
will	O	O
maximally	O	O
execute	O	O
1	O	O
branch	O	O
of	O	O
code	O	O
,	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Even	O	O
if	O	O
e	O	O
contains	O	O
both	O	O
N	O	O
and	O	O
W	O	O
,	O	O
only	O	O
bexits	O	O
[	O	O
0	O	O
]	O	O
will	O	O
be	O	O
set	O	O
.	O	O
Also	O	O
this	O	O
method	O	O
will	O	O
only	O	O
add	O	O
exits	O	O
(	O	O
for	O	O
example	O	O
calling	O	O
setExits	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
not	O	O
delete	O	O
any	O	O
existing	O	O
exits	O	O
.	O	O
I	O	O
would	O	O
change	O	O
that	O	O
method	O	O
to	O	O
:	O	O
#	O	O
pre	O	O
Also	O	O
,	O	O
i	O	O
definetly	O	O
wouldn	O	O
'	O	O
t	O	O
remember	O	O
that	O	O
north	O	O
is	O	O
on	O	O
index	O	O
0	O	O
,	O	O
west	O	O
in	O	O
on	O	O
1	O	O
,	O	O
.	O	O
.	O	O
.	O	O
so	O	O
a	O	O
common	O	O
practice	O	O
is	O	O
to	O	O
name	O	O
your	O	O
indexes	O	O
using	O	O
final	O	O
static	O	O
constants	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
you	O	O
can	O	O
write	O	O
in	O	O
your	O	O
setExits	B-api_mention	O
method	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
much	O	O
more	O	O
readible	O	O
)	O	O
Finally	O	O
,	O	O
if	O	O
you	O	O
want	O	O
your	O	O
code	O	O
even	O	O
more	O	O
well	O	O
-	O	O
arranged	O	O
,	O	O
you	O	O
can	O	O
make	O	O
a	O	O
Exits	B-api_mention	O
class	O	O
representing	O	O
avaliable	O	O
exits	O	O
,	O	O
and	O	O
backed	O	O
by	O	O
boolean	O	O
array	O	O
.	O	O
Then	O	O
on	O	O
place	O	O
where	O	O
you	O	O
create	O	O
your	O	O
String	B-api_mention	B-api_mention
,	O	O
you	O	O
could	O	O
create	O	O
this	O	O
class	O	O
instead	O	O
and	O	O
save	O	O
yourself	O	O
work	O	O
with	O	O
generating	O	O
and	O	O
then	O	O
parsing	O	O
a	O	O
string	O	O
.	O	O
EDIT	O	O
:	O	O
as	O	O
@	O	O
gexicide	O	O
answers	O	O
,	O	O
there	O	O
is	O	O
a	O	O
really	O	O
handy	O	O
class	O	O
EnumSet	B-api_mention	B-api_mention
which	O	O
would	O	O
be	O	O
probably	O	O
better	O	O
for	O	O
representing	O	O
the	O	O
exits	O	O
than	O	O
bollean	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
10827872	O	O
What	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
'	O	I-api_mention
s	O	I-api_mention
replace	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
,	O	O
other	O	O
than	O	O
later	O	O
uses	O	O
regex	O	O
?	O	O
For	O	O
simple	O	O
substitutions	O	O
like	O	O
,	O	O
replace	O	O
.	O	O
with	O	O
/	O	O
,	O	O
is	O	O
there	O	O
any	O	O
difference	O	O
?	O	O
Question	O	O
-	O	O
28770822	O	O
,	O	O
answer	O	O
-	O	O
28853754	O	O
TLDR	O	O
:	O	O
Jump	O	O
to	O	O
the	O	O
conclusion	O	O
#	O	O
blockquote	O	O
A	O	O
brief	O	O
history	O	O
of	O	O
@	O	O
Native	O	O
I	O	O
made	O	O
some	O	O
search	O	O
on	O	O
the	O	O
mailing	O	O
lists	O	O
.	O	O
I	O	O
found	O	O
some	O	O
interesting	O	O
things	O	O
.	O	O
At	O	O
first	O	O
an	O	O
annotation	O	O
(	O	O
1	O	O
2	O	O
)	O	O
javax	B-api_mention	O
.	I-api_mention	O
tools	I-api_mention	O
.	I-api_mention	O
annotation	I-api_mention	O
.	I-api_mention	O
ForceNativeHeader	I-api_mention	B-api_mention
was	O	O
introduced	O	O
to	O	O
#	O	O
blockquote	O	O
It	O	O
is	O	O
used	O	O
by	O	O
com	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sun	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
tools	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
javac	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
processing	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
NativeapiVisitor	I-api_mention	I-api_mention
.	O	O
By	O	O
looking	O	O
at	O	O
the	O	O
code	O	O
we	O	O
can	O	O
see	O	O
that	O	O
the	O	O
native	O	O
header	O	O
is	O	O
generated	O	O
if	O	O
the	O	O
class	O	O
declare	O	O
some	O	O
native	O	O
methods	O	O
or	O	O
if	O	O
the	O	O
class	O	O
is	O	O
annotated	O	O
@	O	O
ForceNativeHeader	O	O
.	O	O
Later	O	O
this	O	O
annotation	O	O
was	O	O
renamed	O	O
to	O	O
GenerateNativeHeader	B-api_mention	B-api_mention
(	O	O
1	O	O
2	O	O
)	O	O
.	O	O
Then	O	O
this	O	O
annotation	O	O
was	O	O
added	O	O
to	O	O
several	O	O
types	O	O
(	O	O
especially	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
)	O	O
with	O	O
an	O	O
interresting	O	O
comment	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
by	O	O
adding	O	O
this	O	O
annotation	O	O
it	O	O
add	O	O
a	O	O
problematic	O	O
dependency	O	O
from	O	O
base	O	O
module	O	O
to	O	O
the	O	O
module	O	O
containing	O	O
javax	O	O
.	O	O
tools	O	O
.	O	O
So	O	O
the	O	O
annotation	O	O
were	O	O
removed	O	O
from	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
and	O	O
these	O	O
files	O	O
were	O	O
explicitly	O	O
added	O	O
to	O	O
the	O	O
build	O	O
process	O	O
since	O	O
the	O	O
header	O	O
were	O	O
no	O	O
more	O	O
automatically	O	O
generated	O	O
.	O	O
.	O	O
.	O	O
a	O	O
"	O	O
(	O	O
hopefully	O	O
temporary	O	O
)	O	O
hack	O	O
"	O	O
.	O	O
So	O	O
a	O	O
new	O	O
annotation	B-api_mention	O
java	I-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
annotation	I-api_mention	I-api_mention
.	I-api_mention	O
Native	I-api_mention	O
was	O	O
created	O	O
and	O	O
used	O	O
in	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
.	O	O
The	O	O
annotation	O	O
was	O	O
set	O	O
a	O	O
TargetType	O	B-api_mention
FIELD	O	O
.	O	O
#	O	O
blockquote	O	O
All	O	O
the	O	O
purpose	O	O
of	O	O
this	O	O
stuff	O	O
is	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
is	O	O
the	O	O
case	O	O
of	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
this	O	O
was	O	O
a	O	O
part	O	O
of	O	O
the	O	O
JEP	O	O
139	O	O
:	O	O
Enhance	O	O
javac	O	O
to	O	O
Improve	O	O
Build	O	O
Speed	O	O
:	O	O
#	O	O
blockquote	O	O
A	O	O
basic	O	O
experimentation	O	O
I	O	O
made	O	O
a	O	O
basic	O	O
experimentation	O	O
on	O	O
the	O	O
JDK	O	O
.	O	O
I	O	O
clone	O	O
the	O	O
open	O	O
-	O	O
jdk	O	O
forest	O	O
and	O	O
i	O	O
successfully	O	O
build	O	O
it	O	O
.	O	O
As	O	O
expected	O	O
the	O	O
header	O	O
files	O	O
where	O	O
generated	O	O
for	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
(	O	O
thanks	O	O
to	O	O
@	O	O
Native	O	O
)	O	O
and	O	O
for	O	O
Float	B-api_mention	B-api_mention
and	O	O
Double	B-api_mention	B-api_mention
(	O	O
thanks	O	O
to	O	O
their	O	O
native	O	O
methods	O	O
)	O	O
but	O	O
not	O	O
for	O	O
Byte	B-api_mention	B-api_mention
,	O	O
Short	B-api_mention	B-api_mention
.	O	O
.	O	O
.	O	O
#	O	O
pre	O	O
Then	O	O
i	O	O
tried	O	O
to	O	O
remove	O	O
the	O	O
@	O	O
Native	O	O
from	O	O
the	O	O
Integer	B-api_mention	B-api_mention
fields	O	O
and	O	O
i	O	O
tried	O	O
to	O	O
build	O	O
again	O	O
the	O	O
jdk	O	O
but	O	O
i	O	O
get	O	O
an	O	O
error	O	O
:	O	O
#	O	O
pre	O	O
logically	O	O
since	O	O
the	O	O
header	O	O
have	O	O
not	O	O
been	O	O
generated	O	O
.	O	O
I	O	O
have	O	O
also	O	O
confirmed	O	O
that	O	O
java	O	O
_	O	O
lang	O	O
_	O	O
Integer	O	B-api_mention
.	O	I-api_mention
h	O	I-api_mention
is	O	O
included	O	O
in	O	O
several	O	O
c	O	O
and	O	O
cpp	O	O
files	O	O
:	O	O
#	O	O
pre	O	O
like	O	O
Long	B-api_mention	O
#	O	O
pre	O	O
like	O	O
Float	B-api_mention	B-api_mention
#	O	O
pre	O	O
and	O	O
like	O	O
Double	B-api_mention	B-api_mention
#	O	O
pre	O	O
but	O	O
neither	O	O
Short	B-api_mention	O
find	O	O
.	O	O
\	O	O
(	O	O
-	O	O
name	O	O
StringLiteral	O	O
-	O	O
o	O	O
-	O	O
name	O	O
StringLiteral	O	O
\	O	O
)	O	O
-	O	O
exec	O	O
grep	O	O
StringLiteral	O	O
{	O	O
}	O	O
\	O	O
;	O	O
-	O	O
print	O	O
nor	O	O
Byte	B-api_mention	B-api_mention
,	O	O
nor	O	O
Character	B-api_mention	B-api_mention
.	O	O
Conclusion	O	O
Among	O	O
all	O	O
these	O	O
types	O	O
,	O	O
only	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Long	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
are	O	O
used	O	O
in	O	O
the	O	O
native	O	O
source	O	O
code	O	O
of	O	O
the	O	O
jdk	O	O
.	O	O
And	O	O
only	O	O
the	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
fields	O	O
are	O	O
annotated	O	O
with	O	O
@	O	O
Native	O	O
because	O	O
they	O	O
have	O	O
no	O	O
native	O	O
methods	O	O
(	O	O
as	O	O
opposed	O	O
to	O	O
Float	B-api_mention	B-api_mention
and	O	O
Double	B-api_mention	B-api_mention
)	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14492320	O	O
Your	O	O
QuickRandom	B-api_mention	B-api_mention
implementation	O	O
hasn	O	O
'	O	O
t	O	O
really	O	O
an	O	O
uniform	O	O
distribution	O	O
.	O	O
The	O	O
frequencies	O	O
are	O	O
generally	O	O
higher	O	O
at	O	O
the	O	O
lower	O	O
values	O	O
while	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
has	O	O
a	O	O
more	O	O
uniform	O	O
distribution	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
a	O	O
SSCCE	O	O
which	O	O
shows	O	O
that	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
average	O	O
result	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
repeat	O	O
the	O	O
test	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
see	O	O
that	O	O
the	O	O
QR	O	O
distribution	O	O
varies	O	O
heavily	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
initial	O	O
seeds	O	O
,	O	O
while	O	O
the	O	O
MR	O	O
distribution	O	O
is	O	O
stable	O	O
.	O	O
Sometimes	O	O
it	O	O
reaches	O	O
the	O	O
desired	O	O
uniform	O	O
distribution	O	O
,	O	O
but	O	O
more	O	O
than	O	O
often	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
one	O	O
of	O	O
the	O	O
more	O	O
extreme	O	O
examples	O	O
,	O	O
it	O	O
'	O	O
s	O	O
even	O	O
beyond	O	O
the	O	O
borders	O	O
of	O	O
the	O	O
graph	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
12619799	O	O
I	O	O
would	O	O
say	O	O
don	O	O
'	O	O
t	O	O
use	O	O
ARM	O	O
and	O	O
go	O	O
on	O	O
with	O	O
Closeable	B-api_mention	B-api_mention
.	O	O
Use	O	O
method	O	O
like	O	O
,	O	O
#	O	O
pre	O	O
Also	O	O
you	O	O
should	O	O
consider	O	O
calling	O	O
close	O	O
of	O	O
BufferedWriter	B-api_mention	B-api_mention
as	O	O
it	O	O
is	O	O
not	O	O
just	O	O
delegating	O	O
the	O	O
close	O	O
to	O	O
FileWriter	B-api_mention	B-api_mention
,	O	O
but	O	O
it	O	O
does	O	O
some	O	O
cleanup	O	O
like	O	O
flushBuffer	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
29140402	O	O
,	O	O
answer	O	O
-	O	O
38628203	O	O
In	O	O
intellij	O	O
you	O	O
can	O	O
auto	O	O
generate	O	O
toString	B-api_mention	B-api_mention
method	O	O
by	O	O
pressing	O	O
alt	O	O
+	O	O
inset	O	O
and	O	O
then	O	O
selecting	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
here	O	O
is	O	O
an	O	O
out	O	O
put	O	O
for	O	O
a	O	O
test	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
it	O	O
generates	O	O
a	O	O
String	B-api_mention	B-api_mention
by	O	O
concatenating	O	O
,	O	O
several	O	O
attributes	O	O
of	O	O
the	O	O
class	O	O
,	O	O
for	O	O
primitives	O	O
it	O	O
will	O	O
print	O	O
their	O	O
values	O	O
and	O	O
for	O	O
reference	O	O
types	O	O
it	O	O
will	O	O
use	O	O
their	O	O
class	O	O
type	O	O
(	O	O
in	O	O
this	O	O
case	O	O
to	O	O
string	O	O
method	O	O
of	O	O
Test2	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
13291076	O	O
,	O	O
answer	O	O
-	O	O
13291108	O	O
Use	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
you	O	O
want	O	O
to	O	O
make	O	O
a	O	O
comparison	O	O
or	O	O
use	O	O
the	O	O
hardcoded	O	O
value	O	O
for	O	O
some	O	O
internal	O	O
use	O	O
in	O	O
your	O	O
code	O	O
.	O	O
Use	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
you	O	O
want	O	O
to	O	O
present	O	O
information	O	O
to	O	O
a	O	O
user	O	O
(	O	O
including	O	O
a	O	O
developper	O	O
looking	O	O
at	O	O
a	O	O
log	O	O
)	O	O
.	O	O
Never	O	O
rely	O	O
in	O	O
your	O	O
code	O	O
on	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
giving	O	O
a	O	O
specific	O	O
value	O	O
.	O	O
Never	O	O
test	O	O
it	O	O
against	O	O
a	O	O
specific	O	O
string	O	O
.	O	O
If	O	O
your	O	O
code	O	O
breaks	O	O
when	O	O
someone	O	O
correctly	O	O
changes	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
return	O	O
,	O	O
then	O	O
it	O	O
was	O	O
already	O	O
broken	O	O
.	O	O
From	O	O
the	O	O
javadoc	O	O
(	O	O
emphasis	O	O
mine	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
28833677	O	O
The	O	O
cleanest	O	O
“	O	O
try	O	O
services	O	O
”	O	O
approach	O	O
given	O	O
the	O	O
current	O	O
API	O	O
would	O	O
be	O	O
:	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
o	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
Supplier	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
important	O	O
aspect	O	O
is	O	O
not	O	O
the	O	O
(	O	O
constant	O	O
)	O	O
chain	O	O
of	O	O
operations	O	O
you	O	O
have	O	O
to	O	O
write	O	O
once	O	O
but	O	O
how	O	O
easy	O	O
it	O	O
is	O	O
to	O	O
add	O	O
another	O	O
service	O	O
(	O	O
or	O	O
modify	O	O
the	O	O
list	O	O
of	O	O
services	O	O
is	O	O
general	O	O
)	O	O
.	O	O
Here	O	O
,	O	O
adding	O	O
or	O	O
removing	O	O
a	O	O
single	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
-	O	O
>	O	O
serviceX	O	O
(	O	O
args	O	O
)	O	O
is	O	O
enough	O	O
.	O	O
Due	O	O
to	O	O
the	O	O
lazy	O	O
evaluation	O	O
of	O	O
streams	O	O
,	O	O
no	O	O
service	O	O
will	O	O
be	O	O
invoked	O	O
if	O	O
a	O	O
preceding	O	O
service	O	O
returned	O	O
a	O	O
non	O	O
-	O	O
empty	O	O
Optional	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
22847105	O	O
,	O	O
answer	O	O
-	O	O
37354549	O	O
The	O	O
way	O	O
I	O	O
think	O	O
about	O	O
it	O	O
is	O	O
that	O	O
you	O	O
use	O	O
flatMap	B-api_mention	B-api_mention
when	O	O
the	O	O
function	O	O
you	O	O
wanted	O	O
to	O	O
put	O	O
inside	O	O
of	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
an	O	O
Observable	B-api_mention	B-api_mention
.	O	O
In	O	O
which	O	O
case	O	O
you	O	O
might	O	O
still	O	O
try	O	O
to	O	O
use	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
it	O	O
would	O	O
be	O	O
unpractical	O	O
.	O	O
Let	O	O
me	O	O
try	O	O
to	O	O
explain	O	O
why	O	O
.	O	O
If	O	O
in	O	O
such	O	O
case	O	O
you	O	O
decided	O	O
to	O	O
stick	O	O
with	O	O
map	O	O
,	O	O
you	O	O
would	O	O
get	O	O
an	O	O
Observable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
For	O	O
example	O	O
in	O	O
your	O	O
case	O	O
,	O	O
if	O	O
we	O	O
used	O	O
an	O	O
imaginary	O	O
RxGson	O	O
library	O	O
,	O	O
that	O	O
returned	O	O
an	O	O
Observable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
from	O	O
it	O	O
'	O	O
s	O	O
toJson	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
(	O	O
instead	O	O
of	O	O
simply	O	O
returning	O	O
a	O	O
String	B-api_mention	B-api_mention
)	O	O
it	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
At	O	O
this	O	O
point	O	O
it	O	O
would	O	O
be	O	O
pretty	O	O
tricky	O	O
to	O	O
subscribe	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
such	O	O
an	O	O
observable	O	O
.	O	O
Inside	O	O
of	O	O
it	O	O
you	O	O
would	O	O
get	O	O
an	O	O
Observable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
to	O	O
which	O	O
you	O	O
would	O	O
again	O	O
need	O	O
to	O	O
subscribe	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
the	O	O
value	O	O
.	O	O
Which	O	O
is	O	O
not	O	O
practical	O	O
or	O	O
nice	O	O
to	O	O
look	O	O
at	O	O
.	O	O
So	O	O
to	O	O
make	O	O
it	O	O
useful	O	O
one	O	O
idea	O	O
is	O	O
to	O	O
"	O	O
flatten	O	O
"	O	O
this	O	O
observable	O	O
of	O	O
observables	O	O
(	O	O
you	O	O
might	O	O
start	O	O
to	O	O
see	O	O
where	O	O
the	O	O
name	O	O
_	O	O
flat	O	O
_	O	O
Map	O	B-api_mention
comes	O	O
from	O	O
)	O	O
.	O	O
RxJava	O	O
provides	O	O
a	O	O
few	O	O
ways	O	O
to	O	O
flatten	O	O
observables	O	O
and	O	O
for	O	O
sake	O	O
of	O	O
simplicity	O	O
lets	O	O
assume	O	O
merge	O	O
is	O	O
what	O	O
we	O	O
want	O	O
.	O	O
Merge	O	O
basically	O	O
takes	O	O
a	O	O
bunch	O	O
of	O	O
observables	O	O
and	O	O
emits	O	O
whenever	O	O
any	O	O
of	O	O
them	O	O
emits	O	O
.	O	O
(	O	O
Lots	O	O
of	O	O
people	O	O
would	O	O
argue	O	O
switch	O	O
would	O	O
be	O	O
a	O	O
better	O	O
default	O	O
.	O	O
But	O	O
if	O	O
you	O	O
'	O	O
re	O	O
emitting	O	O
just	O	O
one	O	O
value	O	O
,	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
matter	O	O
anyway	O	O
.	O	O
)	O	O
So	O	O
amending	O	O
our	O	O
previous	O	O
snippet	O	O
we	O	O
would	O	O
get	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
a	O	O
lot	O	O
more	O	O
useful	O	O
,	O	O
because	O	O
subscribing	O	O
to	O	O
that	O	O
(	O	O
or	O	O
mapping	O	O
,	O	O
or	O	O
filtering	O	O
,	O	O
or	O	O
.	O	O
.	O	O
.	O	O
)	O	O
you	O	O
just	O	O
get	O	O
the	O	O
String	B-api_mention	B-api_mention
value	O	O
.	O	O
(	O	O
Also	O	O
,	O	O
mind	O	O
you	O	O
,	O	O
such	O	O
variant	O	O
of	O	O
merge	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
exist	O	O
in	O	O
RxJava	B-api_mention	B-api_mention
,	O	O
but	O	O
if	O	O
you	O	O
understand	O	O
the	O	O
idea	O	O
of	O	O
merge	O	O
then	O	O
I	O	O
hope	O	O
you	O	O
also	O	O
understand	O	O
how	O	O
that	O	O
would	O	O
work	O	O
.	O	O
)	O	O
So	O	O
basically	O	O
because	O	O
such	O	O
merge	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
probably	O	O
only	O	O
ever	O	O
be	O	O
useful	O	O
when	O	O
it	O	O
succeeds	O	O
a	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
returning	O	O
an	O	O
observable	O	O
and	O	O
so	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
type	O	O
this	O	O
over	O	O
and	O	O
over	O	O
again	O	O
,	O	O
flatMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
created	O	O
as	O	O
a	O	O
shorthand	O	O
.	O	O
It	O	O
applies	O	O
the	O	O
mapping	O	O
function	O	O
just	O	O
as	O	O
a	O	O
normal	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
,	O	O
but	O	O
later	O	O
instead	O	O
of	O	O
emitting	O	O
the	O	O
returned	O	O
values	O	O
it	O	O
also	O	O
"	O	O
flattens	O	O
"	O	O
(	O	O
or	O	O
merges	O	O
)	O	O
them	O	O
.	O	O
That	O	O
'	O	O
s	O	O
the	O	O
general	O	O
use	O	O
case	O	O
.	O	O
It	O	O
is	O	O
most	O	O
useful	O	O
in	O	O
a	O	O
codebase	O	O
that	O	O
uses	O	O
Rx	O	O
allover	O	O
the	O	O
place	O	O
and	O	O
you	O	O
'	O	O
ve	O	O
got	O	O
many	O	O
methods	O	O
returning	O	O
observables	O	O
,	O	O
which	O	O
you	O	O
want	O	O
to	O	O
chain	O	O
with	O	O
other	O	O
methods	O	O
returning	O	O
observables	O	O
.	O	O
In	O	O
your	O	O
use	O	O
case	O	O
it	O	O
happens	O	O
to	O	O
be	O	O
useful	O	O
as	O	O
well	O	O
,	O	O
because	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
can	O	O
only	O	O
transform	O	O
one	O	O
value	O	O
emitted	O	O
in	O	O
onNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
into	O	O
another	O	O
value	O	O
emitted	O	O
in	O	O
onNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
it	O	O
cannot	O	O
transform	O	O
it	O	O
into	O	O
multiple	O	O
values	O	O
,	O	O
no	O	O
value	O	O
at	O	O
all	O	O
or	O	O
an	O	O
error	O	O
.	O	O
And	O	O
as	O	O
akarnokd	O	O
wrote	O	O
in	O	O
his	O	O
answer	O	O
(	O	O
and	O	O
mind	O	O
you	O	O
he	O	O
'	O	O
s	O	O
much	O	O
smarter	O	O
than	O	O
me	O	O
,	O	O
probably	O	O
in	O	O
general	O	O
,	O	O
but	O	O
at	O	O
least	O	O
when	O	O
it	O	O
comes	O	O
to	O	O
RxJava	O	B-api_mention
)	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
throw	O	O
exceptions	O	O
from	O	O
your	O	O
map	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
.	O	O
So	O	O
instead	O	O
you	O	O
can	O	O
use	O	O
flatMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
return	O	O
Observable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
just	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
when	O	O
all	O	O
goes	O	O
well	O	O
,	O	O
but	O	O
return	O	O
Observable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
error	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
when	O	O
something	O	O
fails	O	O
.	O	O
See	O	O
his	O	O
answer	O	O
for	O	O
a	O	O
complete	O	O
snippet	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
9510125	O	O
,	O	O
answer	O	O
-	O	O
9511880	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
In	O	O
Swing	O	O
when	O	O
you	O	O
create	O	O
Component	B-api_mention	B-api_mention
,	O	O
it	O	O
is	O	O
not	O	O
valid	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
'	O	O
s	O	O
valid	O	O
property	O	O
is	O	O
false	O	O
.	O	O
A	O	O
component	O	O
is	O	O
said	O	O
to	O	O
be	O	O
valid	O	O
,	O	O
when	O	O
it	O	O
'	O	O
s	O	O
width	O	O
,	O	O
height	O	O
,	O	O
location	O	O
and	O	O
stuff	O	O
has	O	O
been	O	O
determined	O	O
.	O	O
This	O	O
is	O	O
usually	O	O
done	O	O
by	O	O
calling	O	O
their	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
directly	O	O
or	O	O
indirectly	O	O
.	O	O
When	O	O
we	O	O
call	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
containers	O	O
,	O	O
it	O	O
will	O	O
validate	O	O
the	O	O
container	O	O
(	O	O
if	O	O
it	O	O
is	O	O
invalid	O	O
)	O	O
by	O	O
calling	O	O
its	O	O
doLayout	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
typically	O	O
will	O	O
invoke	O	O
the	O	O
LayoutManager	B-api_mention	B-api_mention
.	O	O
Now	O	O
each	O	O
child	O	O
placed	O	O
on	O	O
this	O	O
container	O	O
will	O	O
be	O	O
validated	O	O
recursively	O	O
,	O	O
so	O	O
that	O	O
the	O	O
entire	O	O
tree	O	O
will	O	O
be	O	O
laid	O	O
out	O	O
and	O	O
will	O	O
become	O	O
valid	O	O
.	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
to	O	O
be	O	O
called	O	O
when	O	O
you	O	O
change	O	O
an	O	O
attribute	O	O
that	O	O
would	O	O
affect	O	O
their	O	O
width	O	O
/	O	O
height	O	O
and	O	O
call	O	O
repaint	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
you	O	O
change	O	O
an	O	O
attribute	O	O
that	O	O
would	O	O
affect	O	O
their	O	O
appearance	O	O
.	O	O
For	O	O
Example	O	O
,	O	O
If	O	O
your	O	O
JFrame	O	O
contains	O	O
a	O	O
JPanel	O	O
,	O	O
now	O	O
at	O	O
certain	O	O
point	O	O
of	O	O
time	O	O
you	O	O
removed	O	O
that	O	O
JPanel	O	O
and	O	O
inserted	O	O
a	O	O
new	O	O
one	O	O
in	O	O
it	O	O
'	O	O
s	O	O
place	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
newly	O	O
placed	O	O
JPanel	O	O
,	O	O
the	O	O
size	O	O
of	O	O
the	O	O
components	O	O
inside	O	O
the	O	O
JPanel	O	O
as	O	O
well	O	O
as	O	O
The	O	O
CONTAINER	O	O
itself	O	O
(	O	O
by	O	O
virtue	O	O
of	O	O
the	O	O
layout	O	O
manager	O	O
used	O	O
by	O	O
it	O	O
)	O	O
,	O	O
changes	O	O
.	O	O
Which	O	O
pushes	O	O
it	O	O
to	O	O
the	O	O
invalidate	O	O
state	O	O
.	O	O
So	O	O
in	O	O
order	O	O
to	O	O
validate	O	O
this	O	O
change	O	O
,	O	O
you	O	O
have	O	O
to	O	O
explicitly	O	O
call	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
invalidate	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
This	O	O
thing	O	O
is	O	O
something	O	O
,	O	O
I	O	O
had	O	O
never	O	O
used	O	O
,	O	O
so	O	O
might	O	O
be	O	O
not	O	O
much	O	O
of	O	O
the	O	O
info	O	O
I	O	O
can	O	O
give	O	O
.	O	O
But	O	O
seems	O	O
like	O	O
the	O	O
scenario	O	O
presented	O	O
above	O	O
,	O	O
can	O	O
give	O	O
a	O	O
bit	O	O
of	O	O
hint	O	O
,	O	O
as	O	O
to	O	O
what	O	O
happens	O	O
in	O	O
invalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
28818506	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
working	O	O
with	O	O
the	O	O
new	O	O
Optional	B-api_mention	B-api_mention
type	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
and	O	O
I	O	O
'	O	O
ve	O	O
come	O	O
across	O	O
what	O	O
seems	O	O
like	O	O
a	O	O
common	O	O
operation	O	O
that	O	O
isn	O	O
'	O	O
t	O	O
supported	O	O
functionally	O	O
:	O	O
an	O	O
"	O	O
orElseOptional	O	O
"	O	O
Consider	O	O
the	O	O
following	O	O
pattern	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
are	O	O
many	O	O
forms	O	O
of	O	O
this	O	O
pattern	O	O
,	O	O
but	O	O
it	O	O
boils	O	O
down	O	O
to	O	O
wanting	O	O
an	O	O
"	O	O
orElse	O	O
"	O	O
on	O	O
an	O	O
optional	O	O
that	O	O
takes	O	O
a	O	O
function	O	O
producing	O	O
a	O	O
new	O	O
optional	O	O
,	O	O
called	O	O
only	O	O
if	O	O
the	O	O
current	O	O
one	O	O
does	O	O
not	O	O
exist	O	O
.	O	O
It	O	O
'	O	O
s	O	O
implementation	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
m	O	O
curious	O	O
if	O	O
there	O	O
'	O	O
s	O	O
a	O	O
reason	O	O
such	O	O
a	O	O
method	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
,	O	O
if	O	O
I	O	O
'	O	O
m	O	O
just	O	O
using	O	O
Optional	B-api_mention	B-api_mention
in	O	O
an	O	O
unintended	O	O
way	O	O
,	O	O
and	O	O
what	O	O
other	O	O
ways	O	O
people	O	O
have	O	O
come	O	O
up	O	O
with	O	O
to	O	O
deal	O	O
with	O	O
this	O	O
case	O	O
.	O	O
I	O	O
should	O	O
say	O	O
that	O	O
I	O	O
think	O	O
that	O	O
solutions	O	O
involving	O	O
custom	O	O
utility	O	O
classes	O	O
/	O	O
methods	O	O
aren	O	O
'	O	O
t	O	O
elegant	O	O
because	O	O
people	O	O
working	O	O
with	O	O
my	O	O
code	O	O
won	O	O
'	O	O
t	O	O
necessarily	O	O
know	O	O
they	O	O
exist	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
anyone	O	O
knows	O	O
,	O	O
will	O	O
such	O	O
a	O	O
method	O	O
be	O	O
included	O	O
in	O	O
JDK	O	O
9	O	O
,	O	O
and	O	O
where	O	O
might	O	O
I	O	O
propose	O	O
such	O	O
a	O	O
method	O	O
?	O	O
This	O	O
seems	O	O
like	O	O
a	O	O
pretty	O	O
glaring	O	O
omission	O	O
to	O	O
the	O	O
API	O	O
to	O	O
me	O	O
.	O	O
Question	O	O
-	O	O
20358883	O	O
Is	O	O
there	O	O
a	O	O
Utility	B-api_mention	B-api_mention
method	O	O
somewhere	O	O
that	O	O
can	O	O
do	O	O
this	O	O
in	O	O
1	O	O
line	O	O
?	O	O
I	O	O
can	O	O
'	O	O
t	O	O
find	O	O
it	O	O
anywhere	O	O
in	O	O
Collections	B-api_mention	B-api_mention
,	O	O
or	O	O
List	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
I	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
re	O	O
-	O	O
invent	O	O
the	O	O
wheel	O	O
unless	O	O
I	O	O
plan	O	O
on	O	O
putting	O	O
fancy	O	O
rims	O	O
on	O	O
it	O	O
.	O	O
Well	O	O
.	O	O
.	O	O
.	O	O
the	O	O
type	O	O
can	O	O
be	O	O
T	O	O
,	O	O
and	O	O
not	O	O
String	B-api_mention	B-api_mention
.	O	O
but	O	O
you	O	O
get	O	O
the	O	O
point	O	O
.	O	O
(	O	O
with	O	O
all	O	O
the	O	O
null	O	O
checking	O	O
,	O	O
safety	O	O
checks	O	O
.	O	O
.	O	O
.	O	O
etc	O	O
)	O	O
Question	O	O
-	O	O
29140402	O	O
I	O	O
have	O	O
a	O	O
class	O	O
defined	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
tried	O	O
to	O	O
print	O	O
an	O	O
instance	O	O
of	O	O
my	O	O
class	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
but	O	O
I	O	O
got	O	O
the	O	O
following	O	O
output	O	O
:	O	O
com	O	O
.	O	O
foo	O	O
.	O	O
Person	O	O
@	O	O
2f92e0f4	O	O
.	O	O
A	O	O
similar	O	O
thing	O	O
happened	O	O
when	O	O
I	O	O
tried	O	O
to	O	O
print	O	O
an	O	O
array	O	O
of	O	O
Person	O	O
objects	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
got	O	O
the	O	O
output	O	O
:	O	O
[	O	O
Lcom	O	O
.	O	O
foo	O	O
.	O	O
Person	O	O
;	O	O
@	O	O
28a418fc	O	O
What	O	O
does	O	O
this	O	O
output	O	O
mean	O	O
?	O	O
How	O	O
do	O	O
I	O	O
change	O	O
this	O	O
output	O	O
so	O	O
it	O	O
contains	O	O
the	O	O
name	O	O
of	O	O
my	O	O
person	O	O
?	O	O
And	O	O
how	O	O
do	O	O
I	O	O
print	O	O
collections	O	O
of	O	O
my	O	O
objects	O	O
?	O	O
Note	O	O
:	O	O
this	O	O
is	O	O
intended	O	O
as	O	O
a	O	O
canonical	O	O
Q	O	O
&	O	O
A	O	O
about	O	O
this	O	O
subject	O	O
.	O	O
Question	O	O
-	O	O
7935858	O	O
,	O	O
answer	O	O
-	O	O
7935881	O	O
The	O	O
documentation	O	O
on	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
says	O	O
:	O	O
#	O	O
blockquote	O	O
(	O	O
Emphasis	O	O
mine	O	O
.	O	O
)	O	O
A	O	O
dot	O	O
is	O	O
a	O	O
special	O	O
character	O	O
in	O	O
regular	O	O
expression	O	O
syntax	O	O
.	O	O
Use	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
quote	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
parameter	O	O
to	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
want	O	O
the	O	O
split	O	O
to	O	O
be	O	O
on	O	O
a	O	O
literal	O	O
string	O	O
pattern	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
words	O	O
=	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
26548660	O	O
,	O	O
answer	O	O
-	O	O
26548894	O	O
You	O	O
can	O	O
use	O	O
a	O	O
Callback	B-api_mention	B-api_mention
to	O	O
get	O	O
onSuccess	B-api_mention	O
and	O	O
onError	B-api_mention	B-api_mention
events	O	O
.	O	O
Just	O	O
add	O	O
a	O	O
new	O	O
Callback	B-api_mention	O
to	O	O
your	O	O
request	O	O
like	O	O
so	O	O
:	O	O
Picasso	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
with	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
load	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
into	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Then	O	O
you	O	O
can	O	O
perform	O	O
any	O	O
alterations	O	O
and	O	O
modifications	O	O
in	O	O
the	O	O
onSuccess	B-api_mention	O
callback	O	O
.	O	O
Question	O	O
-	O	O
32820722	O	O
,	O	O
answer	O	O
-	O	O
32820940	O	O
An	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
a	O	O
function	O	O
int	O	O
-	O	O
>	O	O
R	O	O
.	O	O
An	O	O
IntUnaryOperator	O	B-api_mention
is	O	O
a	O	O
function	O	O
int	O	O
-	O	O
>	O	O
int	O	O
.	O	O
Thus	O	O
an	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
a	O	O
function	O	O
that	O	O
takes	O	O
an	O	O
int	O	O
as	O	O
parameter	O	O
and	O	O
return	O	O
a	O	O
function	O	O
that	O	O
takes	O	O
an	O	O
int	O	O
as	O	O
parameter	O	O
and	O	O
return	O	O
an	O	O
int	O	O
.	O	O
#	O	O
pre	O	O
Maybe	O	O
it	O	O
is	O	O
more	O	O
clear	O	O
if	O	O
you	O	O
use	O	O
anonymous	O	O
classes	O	O
to	O	O
"	O	O
decompose	O	O
"	O	O
the	O	O
lambda	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32177563	O	O
The	O	O
other	O	O
answers	O	O
have	O	O
already	O	O
answered	O	O
your	O	O
question	O	O
-	O	O
no	O	O
,	O	O
this	O	O
is	O	O
not	O	O
possible	O	O
with	O	O
the	O	O
Java	O	O
'	O	O
s	O	O
primitive	O	O
wrapper	O	O
classes	O	O
.	O	O
I	O	O
'	O	O
ll	O	O
try	O	O
to	O	O
address	O	O
the	O	O
"	O	O
question	O	O
behind	O	O
the	O	O
question	O	O
"	O	O
:	O	O
Is	O	O
this	O	O
possible	O	O
with	O	O
other	O	O
classes	O	O
?	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
actually	O	O
a	O	O
good	O	O
question	O	O
,	O	O
and	O	O
the	O	O
answer	O	O
is	O	O
:	O	O
Yes	O	O
,	O	O
it	O	O
is	O	O
possible	O	O
to	O	O
create	O	O
such	O	O
a	O	O
situation	O	O
,	O	O
and	O	O
yes	O	O
,	O	O
it	O	O
would	O	O
make	O	O
Aristotle	O	O
angry	O	O
.	O	O
Actually	O	O
,	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
if	O	O
it	O	O
would	O	O
make	O	O
Aristotle	O	O
angry	O	O
,	O	O
not	O	O
having	O	O
known	O	O
him	O	O
,	O	O
but	O	O
it	O	O
will	O	O
certainly	O	O
cause	O	O
a	O	O
lot	O	O
of	O	O
grief	O	O
for	O	O
whoever	O	O
has	O	O
to	O	O
work	O	O
with	O	O
the	O	O
code	O	O
.	O	O
The	O	O
thing	O	O
is	O	O
:	O	O
There	O	O
is	O	O
a	O	O
contract	O	O
associated	O	O
with	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
Javadocs	O	O
for	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
Yes	O	O
,	O	O
when	O	O
creating	O	O
your	O	O
own	O	O
class	O	O
,	O	O
you	O	O
can	O	O
violate	O	O
this	O	O
contract	O	O
.	O	O
There	O	O
is	O	O
(	O	O
unfortunately	O	O
)	O	O
nothing	O	O
in	O	O
the	O	O
compiler	O	O
or	O	O
runtime	O	O
stopping	O	O
you	O	O
.	O	O
However	O	O
,	O	O
a	O	O
lot	O	O
of	O	O
code	O	O
relies	O	O
on	O	O
this	O	O
contract	O	O
,	O	O
so	O	O
if	O	O
you	O	O
violate	O	O
it	O	O
,	O	O
any	O	O
code	O	O
that	O	O
uses	O	O
equals	B-api_mention	B-api_mention
will	O	O
probably	O	O
fail	O	O
in	O	O
mysterious	O	O
ways	O	O
.	O	O
One	O	O
example	O	O
:	O	O
Java	O	O
'	O	O
s	O	O
own	O	O
Collection	B-api_mention	B-api_mention
classes	O	O
(	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collection	I-api_mention	I-api_mention
and	O	O
friends	O	O
)	O	O
rely	O	O
on	O	O
equals	B-api_mention	O
.	O	O
If	O	O
an	O	O
instance	O	O
of	O	O
a	O	O
class	O	O
that	O	O
does	O	O
not	O	O
correctly	O	O
implement	O	O
equals	B-api_mention	B-api_mention
is	O	O
put	O	O
into	O	O
a	O	O
collection	O	O
,	O	O
weird	O	O
things	O	O
happen	O	O
,	O	O
such	O	O
as	O	O
the	O	O
collection	O	O
sometimes	O	O
containing	O	O
the	O	O
instance	O	O
and	O	O
sometimes	O	O
not	O	O
.	O	O
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
28818627	O	O
Perhaps	O	O
this	O	O
is	O	O
what	O	O
you	O	O
'	O	O
re	O	O
after	O	O
:	O	O
Get	O	O
value	O	O
from	O	O
one	O	O
Optional	B-api_mention	B-api_mention
or	O	O
another	O	O
Otherwise	O	O
,	O	O
you	O	O
may	O	O
want	O	O
to	O	O
have	O	O
a	O	O
look	O	O
at	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
.	O	O
Here	O	O
'	O	O
s	O	O
an	O	O
example	O	O
of	O	O
what	O	O
I	O	O
think	O	O
that	O	O
you	O	O
'	O	O
re	O	O
after	O	O
:	O	O
result	O	O
=	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofNullable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
11774099	O	O
,	O	O
answer	O	O
-	O	O
11774137	O	O
iterate	O	O
through	O	O
the	O	O
whole	O	O
65k	O	O
chars	O	O
and	O	O
ask	O	O
Character	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isJavaIdentifierStart	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
answer	O	O
is	O	O
:	O	O
"	O	O
undertie	O	O
"	O	O
decimal	O	O
8255	O	O
Question	O	O
-	O	O
34172978	O	O
,	O	O
answer	O	O
-	O	O
34173110	O	O
Flipping	O	O
the	O	O
limit	O	O
and	O	O
the	O	O
filter	O	O
clauses	O	O
has	O	O
different	O	O
behaviors	O	O
.	O	O
If	O	O
you	O	O
put	O	O
the	O	O
limit	O	O
first	O	O
,	O	O
the	O	O
stream	O	O
will	O	O
first	O	O
generate	O	O
10	O	O
integers	O	O
[	O	O
1	O	O
.	O	O
.	O	O
10	O	O
]	O	O
,	O	O
and	O	O
then	O	O
filter	O	O
them	O	O
leaving	O	O
only	O	O
those	O	O
smaller	O	O
than	O	O
5	O	O
.	O	O
In	O	O
the	O	O
original	O	O
ordering	O	O
,	O	O
with	O	O
the	O	O
filter	O	O
applied	O	O
first	O	O
,	O	O
integers	O	O
are	O	O
generated	O	O
and	O	O
filtered	O	O
until	O	O
you	O	O
reach	O	O
10	O	O
elements	O	O
.	O	O
This	O	O
isn	O	O
'	O	O
t	O	O
an	O	O
infinite	O	O
operator	O	O
,	O	O
as	O	O
i	O	O
in	O	O
the	O	O
supplier	O	O
will	O	O
eventually	O	O
overflow	O	O
,	O	O
but	O	O
it	O	O
will	O	O
take	O	O
a	O	O
while	O	O
,	O	O
especially	O	O
on	O	O
a	O	O
slow	O	O
computer	O	O
,	O	O
to	O	O
reach	O	O
MAX	O	O
_	O	O
INT	O	O
.	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26791826	O	O
Search	O	O
for	O	O
the	O	O
first	O	O
word	O	O
to	O	O
be	O	O
replaced	O	O
.	O	O
If	O	O
it	O	O
'	O	O
s	O	O
in	O	O
the	O	O
string	O	O
,	O	O
recurse	O	O
on	O	O
the	O	O
the	O	O
part	O	O
of	O	O
the	O	O
string	O	O
before	O	O
the	O	O
occurrence	O	O
,	O	O
and	O	O
on	O	O
the	O	O
part	O	O
of	O	O
the	O	O
string	O	O
after	O	O
the	O	O
occurrence	O	O
.	O	O
Otherwise	O	O
,	O	O
continue	O	O
with	O	O
the	O	O
next	O	O
word	O	O
to	O	O
be	O	O
replaced	O	O
.	O	O
A	O	O
naive	O	O
implementation	O	O
might	O	O
look	O	O
like	O	O
this	O	O
#	O	O
pre	O	O
Sample	O	O
usage	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
Once	O	O
upon	O	O
a	O	O
foo	O	O
,	O	O
there	O	O
was	O	O
a	O	O
bar	O	O
and	O	O
a	O	O
baz	O	O
.	O	O
A	O	O
less	O	O
-	O	O
naive	O	O
version	O	O
:	O	O
#	O	O
pre	O	O
Unfortunately	O	O
,	O	O
Java	O	O
'	O	O
s	O	O
String	B-api_mention	B-api_mention
has	O	O
no	O	O
indexOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
omitted	O	O
the	O	O
implementation	O	O
of	O	O
indexOf	B-api_mention	O
here	O	O
as	O	O
I	O	O
'	O	O
m	O	O
not	O	O
certain	O	O
it	O	O
'	O	O
s	O	O
correct	O	O
,	O	O
but	O	O
it	O	O
can	O	O
be	O	O
found	O	O
on	O	O
ideone	O	O
,	O	O
along	O	O
with	O	O
some	O	O
rough	O	O
timings	O	O
of	O	O
various	O	O
solutions	O	O
posted	O	O
here	O	O
.	O	O
Question	O	O
-	O	O
34172978	O	O
#	O	O
pre	O	O
Counter	O	O
to	O	O
my	O	O
expectation	O	O
,	O	O
the	O	O
collect	O	O
call	O	O
never	O	O
returns	O	O
.	O	O
Setting	O	O
limit	O	O
before	O	O
filter	O	O
produces	O	O
the	O	O
expected	O	O
result	O	O
.	O	O
Why	O	O
?	O	O
Question	O	O
-	O	O
29333689	O	O
,	O	O
answer	O	O
-	O	O
29337734	O	O
My	O	O
intuition	O	O
in	O	O
Python	O	O
is	O	O
to	O	O
use	O	O
the	O	O
collections	O	O
.	O	O
Counter	O	O
as	O	O
a	O	O
multiset	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
we	O	O
have	O	O
a	O	O
list	O	O
of	O	O
integers	O	O
from	O	O
0	O	O
-	O	O
99	O	O
twice	O	O
except	O	O
for	O	O
66	O	O
.	O	O
#	O	O
pre	O	O
Which	O	O
gets	O	O
the	O	O
least	O	O
common	O	O
(	O	O
last	O	O
item	O	O
)	O	O
from	O	O
a	O	O
list	O	O
sorted	O	O
by	O	O
frequency	O	O
.	O	O
Such	O	O
a	O	O
function	O	O
would	O	O
be	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
usage	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
a	O	O
generalized	O	O
solution	O	O
that	O	O
works	O	O
for	O	O
any	O	O
number	O	O
of	O	O
items	O	O
.	O	O
Question	O	O
-	O	O
14833008	O	O
,	O	O
answer	O	O
-	O	O
14833098	O	O
"	O	O
.	O	O
"	O	O
is	O	O
a	O	O
special	O	O
character	O	O
in	O	O
java	O	O
.	O	O
You	O	O
have	O	O
to	O	O
use	O	O
"	O	O
\	O	O
.	O	O
"	O	O
to	O	O
escape	O	O
this	O	O
character	O	O
:	O	O
final	O	O
String	B-api_mention	B-api_mention
extensionRemoved	O	O
=	O	O
filename	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
[	O	O
0	O	O
]	O	O
;	O	O
I	O	O
hope	O	O
this	O	O
helps	O	O
Question	O	O
-	O	O
4871051	O	O
,	O	O
answer	O	O
-	O	O
4871135	O	O
Current	O	O
working	O	O
directory	O	O
is	O	O
defined	O	O
differently	O	O
in	O	O
different	O	O
Java	O	O
implementations	O	O
For	O	O
certain	O	O
prior	O	O
to	O	O
Java	O	O
7	O	O
there	O	O
was	O	O
no	O	O
consistent	O	O
way	O	O
to	O	O
get	O	O
the	O	O
working	O	O
directory	O	O
.	O	O
You	O	O
could	O	O
work	O	O
around	O	O
this	O	O
by	O	O
launching	O	O
Java	O	O
with	O	O
-	O	O
D	O	O
and	O	O
defining	O	O
a	O	O
variable	O	O
to	O	O
hold	O	O
the	O	O
info	O	O
Something	O	O
like	O	O
java	O	O
-	O	O
Dcom	O	O
.	O	O
mycompany	O	O
.	O	O
workingDir	O	O
=	O	O
StringLiteral	O	O
That	O	O
'	O	O
s	O	O
not	O	O
quite	O	O
right	O	O
,	O	O
but	O	O
you	O	O
get	O	O
the	O	O
idea	O	O
.	O	O
Then	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getProperty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
22718744	O	O
,	O	O
answer	O	O
-	O	O
22718904	O	O
This	O	O
has	O	O
been	O	O
specified	O	O
in	O	O
the	O	O
documentation	O	O
of	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
blockquote	O	O
In	O	O
StringLiteral	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
got	O	O
a	O	O
zero	O	O
-	O	O
width	O	O
match	O	O
at	O	O
the	O	O
beginning	O	O
so	O	O
the	O	O
leading	O	O
empty	O	O
substring	O	O
is	O	O
not	O	O
included	O	O
in	O	O
the	O	O
resulting	O	O
array	O	O
.	O	O
However	O	O
in	O	O
your	O	O
second	O	O
snippet	O	O
when	O	O
you	O	O
split	O	O
on	O	O
StringLiteral	O	O
you	O	O
got	O	O
a	O	O
positive	O	O
width	O	O
match	O	O
(	O	O
1	O	O
in	O	O
this	O	O
case	O	O
)	O	O
,	O	O
so	O	O
the	O	O
empty	O	O
leading	O	O
substring	O	O
is	O	O
included	O	O
as	O	O
expected	O	O
.	O	O
(	O	O
Removed	O	O
irrelevant	O	O
source	O	O
code	O	O
)	O	O
Question	O	O
-	O	O
4709175	O	O
,	O	O
answer	O	O
-	O	O
4709284	O	O
#	O	O
blockquote	O	O
You	O	O
can	O	O
use	O	O
an	O	O
Enum	B-api_mention	O
to	O	O
represent	O	O
a	O	O
smallish	O	O
fixed	O	O
set	O	O
of	O	O
constants	O	O
or	O	O
an	O	O
internal	O	O
class	O	O
mode	O	O
while	O	O
increasing	O	O
readability	O	O
.	O	O
Also	O	O
,	O	O
Enums	O	O
can	O	O
enforce	O	O
a	O	O
certain	O	O
rigidity	O	O
when	O	O
used	O	O
in	O	O
method	O	O
parameters	O	O
.	O	O
They	O	O
offer	O	O
the	O	O
interesting	O	O
possibility	O	O
of	O	O
passing	O	O
information	O	O
to	O	O
a	O	O
constructor	O	O
like	O	O
in	O	O
the	O	O
Planets	O	O
example	O	O
on	O	O
Oracle	O	O
'	O	O
s	O	O
site	O	O
and	O	O
,	O	O
as	O	O
you	O	O
'	O	O
ve	O	O
discovered	O	O
,	O	O
also	O	O
allow	O	O
a	O	O
simple	O	O
way	O	O
to	O	O
create	O	O
a	O	O
singleton	O	O
pattern	O	O
.	O	O
ex	O	O
:	O	O
Locale	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
reads	O	O
better	O	O
than	O	O
Locale	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
enforces	O	O
the	O	O
use	O	O
of	O	O
fixed	O	O
set	O	O
of	O	O
values	O	O
shown	O	O
in	O	O
an	O	O
IDE	O	O
when	O	O
you	O	O
add	O	O
the	O	O
.	O	O
separator	O	O
instead	O	O
of	O	O
all	O	O
integers	O	O
.	O	O
Question	O	O
-	O	O
29280857	O	O
,	O	O
answer	O	O
-	O	O
29282558	O	O
As	O	O
you	O	O
have	O	O
mentioned	O	O
there	O	O
will	O	O
be	O	O
1000	O	O
-	O	O
10000	O	O
concurrent	O	O
transaction	O	O
you	O	O
expecting	O	O
at	O	O
a	O	O
time	O	O
than	O	O
you	O	O
can	O	O
store	O	O
accounts	O	O
on	O	O
which	O	O
some	O	O
transaction	O	O
is	O	O
going	O	O
on	O	O
and	O	O
handle	O	O
concurrency	O	O
One	O	O
Solution	O	O
is	O	O
to	O	O
allow	O	O
system	O	O
to	O	O
create	O	O
only	O	O
one	O	O
object	O	O
of	O	O
particulate	O	O
account	O	O
id	O	O
,	O	O
means	O	O
that	O	O
if	O	O
you	O	O
want	O	O
to	O	O
make	O	O
a	O	O
transaction	O	O
between	O	O
account	O	O
"	O	O
123	O	O
"	O	O
and	O	O
"	O	O
456	O	O
"	O	O
than	O	O
your	O	O
thread	O	O
will	O	O
create	O	O
account	O	O
object	O	O
and	O	O
in	O	O
that	O	O
constructor	O	O
of	O	O
account	O	O
class	O	O
we	O	O
will	O	O
check	O	O
if	O	O
any	O	O
other	O	O
object	O	O
of	O	O
account	O	O
is	O	O
there	O	O
with	O	O
particulate	O	O
account	O	O
id	O	O
,	O	O
if	O	O
other	O	O
object	O	O
of	O	O
account	O	O
is	O	O
there	O	O
with	O	O
same	O	O
account	O	O
id	O	O
means	O	O
that	O	O
some	O	O
transaction	O	O
is	O	O
going	O	O
on	O	O
with	O	O
particulate	O	O
account	O	O
id	O	O
so	O	O
you	O	O
have	O	O
to	O	O
wait	O	O
to	O	O
get	O	O
the	O	O
account	O	O
object	O	O
.	O	O
So	O	O
we	O	O
can	O	O
do	O	O
transaction	O	O
between	O	O
"	O	O
123	O	O
"	O	O
and	O	O
"	O	O
456	O	O
"	O	O
and	O	O
at	O	O
same	O	O
time	O	O
we	O	O
can	O	O
do	O	O
transaction	O	O
between	O	O
"	O	O
abc	O	O
"	O	O
and	O	O
"	O	O
xyz	O	O
"	O	O
but	O	O
if	O	O
at	O	O
same	O	O
time	O	O
some	O	O
other	O	O
thread	O	O
will	O	O
try	O	O
to	O	O
create	O	O
object	O	O
of	O	O
account	O	O
"	O	O
123	O	O
"	O	O
than	O	O
system	O	O
will	O	O
say	O	O
please	O	O
wait	O	O
for	O	O
reference	O	O
you	O	O
can	O	O
see	O	O
below	O	O
code	O	O
Please	O	O
note	O	O
:	O	O
#	O	O
li	O	O
dont	O	O
forgote	O	O
to	O	O
remove	O	O
your	O	O
account	O	O
id	O	O
from	O	O
locks	O	O
map	O	O
by	O	O
call	O	O
to	O	O
freeAccount	O	O
(	O	O
BigDecimal	B-api_mention	B-api_mention
accId	O	O
)	O	O
from	O	O
LockHolder	B-api_mention	B-api_mention
class	O	O
#	O	O
li	O	O
I	O	O
have	O	O
used	O	O
HasMap	B-api_mention	B-api_mention
instand	O	O
of	O	O
list	O	O
because	O	O
list	O	O
will	O	O
not	O	O
be	O	O
a	O	O
good	O	O
choice	O	O
when	O	O
you	O	O
are	O	O
randomly	O	O
removing	O	O
element	O	O
from	O	O
it	O	O
(	O	O
or	O	O
when	O	O
frequently	O	O
you	O	O
are	O	O
updating	O	O
it	O	O
)	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
29000802	O	O
There	O	O
is	O	O
a	O	O
third	O	O
option	O	O
-	O	O
using	O	O
stream	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	B-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
see	O	O
comments	O	O
under	O	O
why	O	O
didn	O	O
'	O	O
t	O	O
stream	O	O
have	O	O
a	O	O
toList	B-api_mention	B-api_mention
method	O	O
.	O	O
It	O	O
turns	O	O
out	O	O
to	O	O
be	O	O
slower	O	O
than	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
less	O	O
expressive	O	O
.	O	O
It	O	O
might	O	O
be	O	O
optimised	O	O
in	O	O
later	O	O
JDK	O	O
builds	O	O
,	O	O
so	O	O
adding	O	O
it	O	O
here	O	O
just	O	O
in	O	O
case	O	O
.	O	O
assuming	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myFinalList	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
with	O	O
a	O	O
micro	O	O
-	O	O
micro	O	O
benchmark	O	O
,	O	O
1M	O	O
entries	O	O
,	O	O
20	O	O
%	O	O
nulls	O	O
and	O	O
simple	O	O
transform	O	O
in	O	O
doSomething	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
#	O	O
pre	O	O
the	O	O
results	O	O
are	O	O
parallel	O	O
:	O	O
#	O	O
pre	O	O
sequential	O	O
:	O	O
#	O	O
pre	O	O
parallel	O	O
without	O	O
nulls	O	O
and	O	O
filter	O	O
(	O	O
so	O	O
the	O	O
stream	O	O
is	O	O
SIZED	O	O
)	O	O
:	O	O
toArrays	B-api_mention	O
has	O	O
the	O	O
best	O	O
performance	O	O
in	O	O
such	O	O
case	O	O
,	O	O
and	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
fails	O	O
with	O	O
"	O	O
indexOutOfBounds	O	O
"	O	O
on	O	O
the	O	O
recepient	O	O
ArrayList	B-api_mention	B-api_mention
,	O	O
had	O	O
to	O	O
replace	O	O
with	O	O
.	B-api_mention	B-api_mention
forEachOrdered	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
pre	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489334	O	O
Text	O	O
inside	O	O
double	O	O
quotes	O	O
creates	O	O
a	O	O
literal	O	O
String	B-api_mention	B-api_mention
object	O	O
.	O	O
String	B-api_mention	B-api_mention
myString	O	O
=	O	O
StringLiteral	O	O
;	O	O
The	O	O
code	O	O
above	O	O
creates	O	O
a	O	O
String	B-api_mention	B-api_mention
object	O	O
,	O	O
using	O	O
double	O	O
quotes	O	O
.	O	O
Question	O	O
-	O	O
8881291	O	O
,	O	O
answer	O	O
-	O	O
14060804	O	O
#	O	O
li	O	O
Strings	B-api_mention	O
are	O	O
immutable	O	O
in	O	O
Java	O	O
if	O	O
you	O	O
store	O	O
password	O	O
as	O	O
plain	O	O
text	O	O
it	O	O
will	O	O
be	O	O
available	O	O
in	O	O
memory	O	O
until	O	O
Garbage	O	O
collector	O	O
clears	O	O
it	O	O
and	O	O
since	O	O
Strings	B-api_mention	O
are	O	O
used	O	O
in	O	O
String	B-api_mention	B-api_mention
pool	O	O
for	O	O
re	O	O
-	O	O
usability	O	O
there	O	O
is	O	O
pretty	O	O
high	O	O
chance	O	O
that	O	O
it	O	O
will	O	O
be	O	O
remain	O	O
in	O	O
memory	O	O
for	O	O
long	O	O
duration	O	O
,	O	O
which	O	O
pose	O	O
a	O	O
security	O	O
threat	O	O
.	O	O
Since	O	O
any	O	O
one	O	O
who	O	O
has	O	O
access	O	O
to	O	O
memory	O	O
dump	O	O
can	O	O
find	O	O
the	O	O
password	O	O
in	O	O
clear	O	O
text	O	O
#	O	O
li	O	O
Java	O	O
recommendation	O	O
using	O	O
getPassword	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
JPasswordField	O	O
which	O	O
returns	O	O
a	O	O
char	O	O
[	O	O
]	O	O
and	O	O
deprecated	O	O
getText	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
which	O	O
returns	O	O
password	O	O
in	O	O
clear	O	O
text	O	O
stating	O	O
security	O	O
reason	O	O
.	O	O
#	O	O
li	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
there	O	O
is	O	O
always	O	O
a	O	O
risk	O	O
of	O	O
printing	O	O
plain	O	O
text	O	O
in	O	O
log	O	O
file	O	O
or	O	O
console	O	O
but	O	O
if	O	O
use	O	O
Array	B-api_mention	B-api_mention
you	O	O
won	O	O
'	O	O
t	O	O
print	O	O
contents	O	O
of	O	O
array	O	O
instead	O	O
its	O	O
memory	O	O
location	O	O
get	O	O
printed	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
Final	O	O
thoughts	O	O
:	O	O
Though	O	O
using	O	O
char	O	O
[	O	O
]	O	O
is	O	O
not	O	O
just	O	O
enough	O	O
you	O	O
need	O	O
to	O	O
erase	O	O
content	O	O
to	O	O
be	O	O
more	O	O
secure	O	O
.	O	O
I	O	O
also	O	O
suggest	O	O
working	O	O
with	O	O
hash	O	O
'	O	O
d	O	O
or	O	O
encrypted	O	O
password	O	O
instead	O	O
of	O	O
plaintext	O	O
and	O	O
clearing	O	O
it	O	O
from	O	O
memory	O	O
as	O	O
soon	O	O
as	O	O
authentication	O	O
is	O	O
completed	O	O
.	O	O
Question	O	O
-	O	O
5769669	O	O
,	O	O
answer	O	O
-	O	O
5769679	O	O
You	O	O
can	O	O
use	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseDouble	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
convert	O	O
a	O	O
String	B-api_mention	B-api_mention
to	O	O
a	O	O
double	O	O
:	O	O
#	O	O
pre	O	O
For	O	O
your	O	O
case	O	O
it	O	O
looks	O	O
like	O	O
you	O	O
want	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725550	O	O
Think	O	O
of	O	O
it	O	O
like	O	O
this	O	O
:	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
has	O	O
methods	O	O
like	O	O
add	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
set	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
contract	O	O
is	O	O
that	O	O
once	O	O
you	O	O
added	O	O
an	O	O
element	O	O
at	O	O
position	O	O
X	O	O
you	O	O
will	O	O
find	O	O
it	O	O
there	O	O
unless	O	O
you	O	O
add	O	O
or	O	O
remove	O	O
elements	O	O
before	O	O
it	O	O
.	O	O
If	O	O
any	O	O
list	O	O
implementation	O	O
would	O	O
store	O	O
elements	O	O
in	O	O
some	O	O
order	O	O
other	O	O
than	O	O
based	O	O
on	O	O
the	O	O
index	O	O
,	O	O
the	O	O
above	O	O
list	O	O
methods	O	O
would	O	O
make	O	O
no	O	O
sense	O	O
.	O	O
Question	O	O
-	O	O
23114015	O	O
I	O	O
am	O	O
wondering	O	O
why	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
interface	O	O
does	O	O
not	O	O
provide	O	O
the	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
.	O	O
Consider	O	O
the	O	O
following	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
an	O	O
implementation	O	O
of	O	O
a	O	O
Hand	O	O
as	O	O
you	O	O
can	O	O
have	O	O
cards	O	O
in	O	O
your	O	O
hand	O	O
while	O	O
playing	O	O
a	O	O
Trading	O	O
Card	O	O
Game	O	O
.	O	O
Essentially	O	O
it	O	O
wraps	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
ensures	O	O
a	O	O
maximum	O	O
capacity	O	O
and	O	O
offers	O	O
some	O	O
other	O	O
useful	O	O
features	O	O
.	O	O
It	O	O
is	O	O
better	O	O
as	O	O
implementing	O	O
it	O	O
directly	O	O
as	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Now	O	O
,	O	O
for	O	O
convienience	O	O
I	O	O
thought	O	O
it	O	O
would	O	O
be	O	O
nice	O	O
to	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
such	O	O
that	O	O
you	O	O
can	O	O
use	O	O
enhanced	O	O
for	O	O
-	O	O
loops	O	O
if	O	O
you	O	O
want	O	O
to	O	O
loop	O	O
over	O	O
it	O	O
.	O	O
(	O	O
My	O	O
Hand	O	O
class	O	O
also	O	O
provides	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
hence	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
justified	O	O
in	O	O
my	O	O
opinion	O	O
.	O	O
)	O	O
The	O	O
Iterable	O	B-api_mention
interface	O	O
provides	O	O
the	O	O
following	O	O
(	O	O
left	O	O
out	O	O
javadoc	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
can	O	O
you	O	O
obtain	O	O
a	O	O
stream	O	O
with	O	O
:	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
stream	O	O
=	O	O
StreamSupport	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
So	O	O
onto	O	O
the	O	O
real	O	O
question	O	O
:	O	O
#	O	O
li	O	O
Why	O	O
does	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
not	O	O
provide	O	O
a	O	O
default	O	O
methods	O	O
that	O	O
implement	B-api_mention	O
stream	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
I	O	O
see	O	O
nothing	O	O
that	O	O
would	O	O
make	O	O
this	O	O
impossible	O	O
or	O	O
unwanted	O	O
?	O	O
A	O	O
related	O	O
question	O	O
I	O	O
found	O	O
is	O	O
the	O	O
following	O	O
though	O	O
:	O	O
Why	O	O
does	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
not	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
?	O	O
Which	O	O
is	O	O
oddly	O	O
enough	O	O
suggesting	O	O
it	O	O
to	O	O
do	O	O
it	O	O
somewhat	O	O
the	O	O
other	O	O
way	O	O
around	O	O
.	O	O
Question	O	O
-	O	O
12146298	O	O
I	O	O
would	O	O
like	O	O
to	O	O
know	O	O
what	O	O
is	O	O
the	O	O
cleanest	O	O
and	O	O
best	O	O
way	O	O
to	O	O
perform	O	O
form	O	O
validation	O	O
of	O	O
user	O	O
inputs	O	O
.	O	O
I	O	O
have	O	O
seen	O	O
some	O	O
developers	O	O
implement	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
springframework	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
validation	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Validator	I-api_mention	I-api_mention
.	O	O
A	O	O
question	O	O
about	O	O
that	O	O
:	O	O
I	O	O
saw	O	O
it	O	O
validates	O	O
a	O	O
class	O	O
.	O	O
Does	O	O
the	O	O
class	O	O
have	O	O
to	O	O
be	O	O
filled	O	O
manually	O	O
with	O	O
the	O	O
values	O	O
from	O	O
the	O	O
user	O	O
input	O	O
,	O	O
and	O	O
then	O	O
passed	O	O
to	O	O
the	O	O
validator	O	O
?	O	O
I	O	O
am	O	O
confused	O	O
about	O	O
the	O	O
cleanest	O	O
and	O	O
best	O	O
way	O	O
to	O	O
validate	O	O
the	O	O
user	O	O
input	O	O
.	O	O
I	O	O
know	O	O
about	O	O
the	O	O
traditional	O	O
method	O	O
of	O	O
using	O	O
request	B-api_mention	O
.	I-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
then	O	O
manually	O	O
checking	O	O
for	O	O
nulls	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
do	O	O
all	O	O
the	O	O
validation	O	O
in	O	O
my	O	O
Controller	O	O
.	O	O
Some	O	O
good	O	O
advice	O	O
on	O	O
this	O	O
area	O	O
will	O	O
be	O	O
greatly	O	O
appreciated	O	O
.	O	O
I	O	O
am	O	O
not	O	O
using	O	O
Hibernate	O	O
in	O	O
this	O	O
application	O	O
.	O	O
Question	O	O
-	O	O
19757300	O	O
,	O	O
answer	O	O
-	O	O
35512247	O	O
Keeping	O	O
this	O	O
issue	O	O
in	O	O
mind	O	O
I	O	O
developed	O	O
a	O	O
small	O	O
library	O	O
for	O	O
dealing	O	O
with	O	O
checked	O	O
exceptions	O	O
and	O	O
lambdas	O	O
.	O	O
Custom	O	O
adapters	O	O
allow	O	O
you	O	O
to	O	O
integrate	O	O
with	O	O
existing	O	O
functional	O	O
types	O	O
:	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
/	O	O
with	O	O
a	O	O
static	O	O
import	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
6094575	O	O
,	O	O
answer	O	O
-	O	O
6094602	O	O
Yes	O	O
,	O	O
something	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
will	O	O
only	O	O
work	O	O
for	O	O
a	O	O
single	O	O
string	O	O
parameter	O	O
of	O	O
course	O	O
,	O	O
but	O	O
you	O	O
can	O	O
modify	O	O
it	O	O
pretty	O	O
easily	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
class	O	O
name	O	O
has	O	O
to	O	O
be	O	O
a	O	O
fully	O	O
-	O	O
qualified	O	O
one	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
including	O	O
the	O	O
namespace	O	O
.	O	O
For	O	O
nested	O	O
classes	O	O
,	O	O
you	O	O
need	O	O
to	O	O
use	O	O
a	O	O
dollar	O	O
(	O	O
as	O	O
that	O	O
'	O	O
s	O	O
what	O	O
the	O	O
compiler	O	O
uses	O	O
)	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
To	O	O
obtain	O	O
the	O	O
Class	B-api_mention	B-api_mention
object	O	O
for	O	O
that	O	O
,	O	O
you	O	O
'	O	O
d	O	O
need	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
17828584	O	O
,	O	O
answer	O	O
-	O	O
17842210	O	O
After	O	O
digging	O	O
around	O	O
for	O	O
a	O	O
while	O	O
,	O	O
I	O	O
can	O	O
'	O	O
t	O	O
say	O	O
that	O	O
I	O	O
find	O	O
the	O	O
answer	O	O
,	O	O
but	O	O
I	O	O
think	O	O
it	O	O
'	O	O
s	O	O
quite	O	O
close	O	O
now	O	O
.	O	O
First	O	O
,	O	O
we	O	O
need	O	O
to	O	O
know	O	O
when	O	O
a	O	O
StackOverflowError	B-api_mention	B-api_mention
will	O	O
be	O	O
thrown	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
the	O	O
stack	O	O
for	O	O
a	O	O
java	O	O
thread	O	O
stores	O	O
frames	O	O
,	O	O
which	O	O
containing	O	O
all	O	O
the	O	O
data	O	O
needed	O	O
for	O	O
invoking	O	O
a	O	O
method	O	O
and	O	O
resume	O	O
.	O	O
According	O	O
to	O	O
Java	O	O
Language	O	O
Specifications	O	O
for	O	O
JAVA	O	O
6	O	O
,	O	O
when	O	O
invoking	O	O
a	O	O
method	O	O
,	O	O
#	O	O
blockquote	O	O
Second	O	O
,	O	O
we	O	O
should	O	O
make	O	O
it	O	O
clear	O	O
what	O	O
is	O	O
"	O	O
there	O	O
is	O	O
not	O	O
sufficient	O	O
memory	O	O
available	O	O
to	O	O
create	O	O
such	O	O
an	O	O
activation	O	O
frame	O	O
"	O	O
.	O	O
According	O	O
to	O	O
Java	O	O
Virtual	O	O
Machine	O	O
Specifications	O	O
for	O	O
JAVA	O	O
6	O	O
,	O	O
#	O	O
blockquote	O	O
So	O	O
,	O	O
when	O	O
a	O	O
frame	O	O
is	O	O
created	O	O
,	O	O
there	O	O
should	O	O
be	O	O
enough	O	O
heap	O	O
space	O	O
to	O	O
create	O	O
a	O	O
stack	O	O
frame	O	O
and	O	O
enough	O	O
stack	O	O
space	O	O
to	O	O
store	O	O
the	O	O
new	O	O
reference	O	O
which	O	O
point	O	O
to	O	O
the	O	O
new	O	O
stack	O	O
frame	O	O
if	O	O
the	O	O
frame	O	O
is	O	O
heap	O	O
allocated	O	O
.	O	O
Now	O	O
let	O	O
'	O	O
s	O	O
go	O	O
back	O	O
to	O	O
the	O	O
question	O	O
.	O	O
From	O	O
the	O	O
above	O	O
,	O	O
we	O	O
can	O	O
know	O	O
that	O	O
when	O	O
a	O	O
method	O	O
is	O	O
execute	O	O
,	O	O
it	O	O
may	O	O
just	O	O
costs	O	O
the	O	O
same	O	O
amount	O	O
of	O	O
stack	O	O
space	O	O
.	O	O
And	O	O
invoking	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	O
may	I-api_mention	O
)	I-api_mention	O
needs	O	O
5	O	O
level	O	O
of	O	O
method	O	O
invocation	O	O
,	O	O
so	O	O
5	O	O
frames	O	O
need	O	O
to	O	O
be	O	O
created	O	O
.	O	O
Then	O	O
when	O	O
StackOverflowError	B-api_mention	B-api_mention
is	O	O
thrown	O	O
out	O	O
,	O	O
it	O	O
has	O	O
to	O	O
go	O	O
back	O	O
5	O	O
times	O	O
to	O	O
get	O	O
enough	O	O
stack	O	O
space	O	O
to	O	O
store	O	O
5	O	O
frames	O	O
'	O	O
references	O	O
.	O	O
Hence	O	O
4	O	O
is	O	O
print	O	O
out	O	O
.	O	O
Why	O	O
not	O	O
5	O	O
?	O	O
Because	O	O
you	O	O
use	O	O
cnt	O	O
+	O	O
+	O	O
.	O	O
Change	O	O
it	O	O
to	O	O
+	O	O
+	O	O
cnt	O	O
,	O	O
and	O	O
then	O	O
you	O	O
will	O	O
get	O	O
5	O	O
.	O	O
And	O	O
you	O	O
will	O	O
notice	O	O
that	O	O
when	O	O
the	O	O
size	O	O
of	O	O
stack	O	O
go	O	O
to	O	O
a	O	O
high	O	O
level	O	O
,	O	O
you	O	O
will	O	O
get	O	O
50	O	O
sometimes	O	O
.	O	O
That	O	O
is	O	O
because	O	O
the	O	O
amount	O	O
of	O	O
available	O	O
heap	O	O
space	O	O
need	O	O
to	O	O
be	O	O
taken	O	O
into	O	O
consideration	O	O
then	O	O
.	O	O
When	O	O
the	O	O
stack	O	O
'	O	O
s	O	O
size	O	O
is	O	O
too	O	O
large	O	O
,	O	O
maybe	O	O
heap	O	O
space	O	O
will	O	O
run	O	O
out	O	O
before	O	O
stack	O	O
.	O	O
And	O	O
(	O	O
maybe	O	O
)	O	O
the	O	O
actual	O	O
size	O	O
of	O	O
stack	O	O
frames	O	O
of	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
is	O	O
about	O	O
51	O	O
times	O	O
of	O	O
main	O	O
,	O	O
therefore	O	O
it	O	O
goes	O	O
back	O	O
51	O	O
times	O	O
and	O	O
print	O	O
50	O	O
.	O	O
Question	O	O
-	O	O
27949213	O	O
,	O	O
answer	O	O
-	O	O
27949581	O	O
Imagine	O	O
you	O	O
have	O	O
a	O	O
phone	O	O
book	O	O
,	O	O
which	O	O
contains	O	O
people	O	O
,	O	O
which	O	O
have	O	O
a	O	O
String	B-api_mention	B-api_mention
firstName	O	O
and	O	O
a	O	O
String	B-api_mention	B-api_mention
lastName	O	O
.	O	O
And	O	O
it	O	O
happens	O	O
that	O	O
in	O	O
your	O	O
phone	O	O
book	O	O
,	O	O
100	O	O
,	O	O
000	O	O
people	O	O
have	O	O
the	O	O
same	O	O
firstName	O	O
=	O	O
StringLiteral	O	O
.	O	O
Because	O	O
you	O	O
get	O	O
the	O	O
data	O	O
from	O	O
a	O	O
database	O	O
or	O	O
a	O	O
file	O	O
those	O	O
strings	O	O
are	O	O
not	O	O
interned	O	O
so	O	O
your	O	O
JVM	O	O
memory	O	O
contains	O	O
the	O	O
char	O	O
array	O	O
{	O	O
CharLiteral	O	O
,	O	O
CharLiteral	O	O
,	O	O
CharLiteral	O	O
,	O	O
CharLiteral	O	O
}	O	O
100	O	O
thousand	O	O
times	O	O
,	O	O
one	O	O
per	O	O
John	O	O
string	O	O
.	O	O
Each	O	O
of	O	O
these	O	O
arrays	O	O
takes	O	O
,	O	O
say	O	O
,	O	O
20	O	O
bytes	O	O
of	O	O
memory	O	O
so	O	O
those	O	O
100k	O	O
Johns	O	O
take	O	O
up	O	O
2	O	O
MB	O	O
of	O	O
memory	O	O
.	O	O
With	O	O
deduplication	O	O
,	O	O
the	O	O
JVM	O	O
will	O	O
realise	O	O
that	O	O
"	O	O
John	O	O
"	O	O
is	O	O
duplicated	O	O
many	O	O
times	O	O
and	O	O
make	O	O
all	O	O
those	O	O
John	O	O
strings	O	O
point	O	O
to	O	O
the	O	O
same	O	O
underlying	O	O
char	O	O
array	O	O
,	O	O
decreasing	O	O
the	O	O
memory	O	O
usage	O	O
from	O	O
2MB	O	O
to	O	O
20	O	O
bytes	O	O
.	O	O
You	O	O
can	O	O
find	O	O
a	O	O
more	O	O
detailed	O	O
explanation	O	O
in	O	O
the	O	O
JEP	O	O
.	O	O
In	O	O
particular	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
8098953	O	O
,	O	O
answer	O	O
-	O	O
8103083	O	O
The	O	O
first	O	O
thing	O	O
to	O	O
keep	O	O
in	O	O
mind	O	O
is	O	O
that	O	O
Java	O	O
ternary	O	O
operators	O	O
have	O	O
a	O	O
"	O	O
type	O	O
"	O	O
,	O	O
and	O	O
that	O	O
this	O	O
is	O	O
what	O	O
the	O	O
compiler	O	O
will	O	O
determine	O	O
and	O	O
consider	O	O
no	O	O
matter	O	O
what	O	O
the	O	O
actual	O	O
/	O	O
real	O	O
types	O	O
of	O	O
the	O	O
second	O	O
or	O	O
third	O	O
parameter	O	O
are	O	O
.	O	O
Depending	O	O
on	O	O
several	O	O
factors	O	O
the	O	O
ternary	O	O
operator	O	O
type	O	O
is	O	O
determined	O	O
in	O	O
different	O	O
ways	O	O
as	O	O
illustrated	O	O
in	O	O
the	O	O
Java	O	O
Language	O	O
Specification	O	O
15	O	O
.	O	O
26	O	O
In	O	O
the	O	O
question	O	O
above	O	O
we	O	O
should	O	O
consider	O	O
the	O	O
last	O	O
case	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
by	O	O
far	O	O
the	O	O
most	O	O
complex	O	O
case	O	O
once	O	O
you	O	O
take	O	O
a	O	O
look	O	O
at	O	O
applying	O	O
capture	O	O
conversion	O	O
(	O	O
§	O	O
5	O	O
.	O	O
1	O	O
.	O	O
10	O	O
)	O	O
and	O	O
most	O	O
of	O	O
all	O	O
at	O	O
lub	O	O
(	O	O
T1	O	O
,	O	O
T2	O	O
)	O	O
.	O	O
In	O	O
plain	O	O
English	O	O
and	O	O
after	O	O
an	O	O
extreme	O	O
simplification	O	O
we	O	O
can	O	O
describe	O	O
the	O	O
process	O	O
as	O	O
calculating	O	O
the	O	O
"	O	O
Least	O	O
Common	O	O
Superclass	O	O
"	O	O
(	O	O
yes	O	O
,	O	O
think	O	O
of	O	O
the	O	O
LCM	O	O
)	O	O
of	O	O
the	O	O
second	O	O
and	O	O
third	O	O
parameters	O	O
.	O	O
This	O	O
will	O	O
give	O	O
us	O	O
the	O	O
ternary	O	O
operator	O	O
"	O	O
type	O	O
"	O	O
.	O	O
Again	O	O
,	O	O
what	O	O
I	O	O
just	O	O
said	O	O
is	O	O
an	O	O
extreme	O	O
simplification	O	O
(	O	O
consider	O	O
classes	O	O
that	O	O
implement	O	O
multiple	O	O
common	O	O
interfaces	O	O
)	O	O
.	O	O
For	O	O
example	O	O
,	O	O
if	O	O
you	O	O
try	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
'	O	O
ll	O	O
notice	O	O
that	O	O
resulting	O	O
type	O	O
of	O	O
the	O	O
conditional	O	O
expression	O	O
is	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
since	O	O
it	O	O
'	O	O
s	O	O
the	O	O
"	O	O
Least	O	O
Common	O	O
Superclass	O	O
"	O	O
for	O	O
the	O	O
Timestamp	B-api_mention	O
/	O	O
Time	B-api_mention	O
pair	O	O
.	O	O
Since	O	O
null	O	O
can	O	O
be	O	O
autoboxed	O	O
to	O	O
anything	O	O
,	O	O
the	O	O
"	O	O
Least	O	O
Common	O	O
Superclass	O	O
"	O	O
is	O	O
the	O	O
Integer	O	B-api_mention
class	O	O
and	O	O
this	O	O
will	O	O
be	O	O
the	O	O
return	O	O
type	O	O
of	O	O
the	O	O
conditional	O	O
expression	O	O
(	O	O
ternary	O	O
operator	O	O
)	O	O
above	O	O
.	O	O
The	O	O
return	O	O
value	O	O
will	O	O
then	O	O
be	O	O
a	O	O
null	O	O
pointer	O	O
of	O	O
type	O	O
Integer	B-api_mention	B-api_mention
and	O	O
that	O	O
is	O	O
what	O	O
will	O	O
be	O	O
returned	O	O
by	O	O
the	O	O
ternary	O	O
operator	O	O
.	O	O
At	O	O
runtime	O	O
,	O	O
when	O	O
the	O	O
Java	O	O
Virtual	O	O
Machine	O	O
unboxes	O	O
the	O	O
Integer	B-api_mention	B-api_mention
a	O	O
NullPointerException	B-api_mention	B-api_mention
is	O	O
thrown	O	O
.	O	O
This	O	O
happens	O	O
because	O	O
the	O	O
JVM	O	O
attempts	O	O
to	O	O
invoke	O	O
the	O	O
function	O	O
null	O	O
.	B-api_mention	B-api_mention
intValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
where	O	O
null	O	O
is	O	O
the	O	O
result	O	O
of	O	O
autoboxing	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
(	O	O
and	O	O
since	O	O
my	O	O
opinion	O	O
is	O	O
not	O	O
in	O	O
the	O	O
Java	O	O
Language	O	O
Specification	O	O
many	O	O
people	O	O
will	O	O
find	O	O
it	O	O
wrong	O	O
anyway	O	O
)	O	O
the	O	O
compiler	O	O
does	O	O
a	O	O
poor	O	O
job	O	O
in	O	O
evaluating	O	O
the	O	O
expression	O	O
in	O	O
your	O	O
question	O	O
.	O	O
Given	O	O
that	O	O
you	O	O
wrote	O	O
true	O	O
?	O	O
param1	O	O
:	O	O
param2	O	O
the	O	O
compiler	O	O
should	O	O
determine	O	O
right	O	O
away	O	O
that	O	O
the	O	O
first	O	O
parameter	O	O
-	O	O
null	O	O
-	O	O
will	O	O
be	O	O
returned	O	O
and	O	O
it	O	O
should	O	O
generate	O	O
a	O	O
compiler	O	O
error	O	O
.	O	O
This	O	O
is	O	O
somewhat	O	O
similar	O	O
to	O	O
when	O	O
you	O	O
write	O	O
while	O	O
(	O	O
args	O	O
)	O	O
{	O	O
}	O	O
etc	O	O
.	O	O
.	O	O
.	O	O
and	O	O
the	O	O
compiler	O	O
complains	O	O
about	O	O
the	O	O
code	O	O
underneath	O	O
the	O	O
loop	O	O
and	O	O
flags	O	O
it	O	O
with	O	O
Unreachable	O	O
Statements	O	O
.	O	O
Your	O	O
second	O	O
case	O	O
is	O	O
pretty	O	O
straightforward	O	O
and	O	O
this	O	O
answer	O	O
is	O	O
already	O	O
too	O	O
long	O	O
.	O	O
.	O	O
.	O	O
;	O	O
)	O	O
CORRECTION	O	O
:	O	O
After	O	O
another	O	O
analysis	O	O
I	O	O
believe	O	O
that	O	O
I	O	O
was	O	O
wrong	O	O
to	O	O
say	O	O
that	O	O
a	O	O
null	O	O
value	O	O
can	O	O
be	O	O
boxed	O	O
/	O	O
autoboxed	O	O
to	O	O
anything	O	O
.	O	O
Talking	O	O
about	O	O
the	O	O
class	O	O
Integer	O	B-api_mention
,	O	O
explicit	O	O
boxing	O	O
consists	O	O
in	O	O
invoking	O	O
the	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
constructor	O	O
or	O	O
maybe	O	O
the	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
(	O	O
I	O	O
found	O	O
this	O	O
version	O	O
somewhere	O	O
)	O	O
.	O	O
The	O	O
former	O	O
would	O	O
throw	O	O
a	O	O
NumberFormatException	B-api_mention	B-api_mention
(	O	O
and	O	O
this	O	O
does	O	O
not	O	O
happen	O	O
)	O	O
while	O	O
the	O	O
second	O	O
would	O	O
just	O	O
not	O	O
make	O	O
sense	O	O
since	O	O
an	O	O
int	O	O
cannot	O	O
be	O	O
null	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
31188231	O	O
,	O	O
answer	O	O
-	O	O
31190722	O	O
We	O	O
can	O	O
draw	O	O
a	O	O
parallel	O	O
with	O	O
abstract	O	O
class	O	O
.	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
intended	O	O
to	O	O
be	O	O
subclassed	O	O
so	O	O
that	O	O
the	O	O
abstract	O	O
methods	O	O
can	O	O
be	O	O
implemented	O	O
.	O	O
The	O	O
abstract	O	O
class	O	O
itself	O	O
contains	O	O
concrete	O	O
methods	O	O
that	O	O
invoke	O	O
the	O	O
abstract	O	O
methods	O	O
.	O	O
The	O	O
abstract	O	O
class	O	O
is	O	O
free	O	O
to	O	O
evolve	O	O
by	O	O
adding	O	O
more	O	O
concrete	O	O
methods	O	O
;	O	O
and	O	O
this	O	O
practice	O	O
may	O	O
break	O	O
subclasses	O	O
.	O	O
Therefore	O	O
the	O	O
exact	O	O
problem	O	O
you	O	O
described	O	O
existed	O	O
even	O	O
before	O	O
Java8	O	O
.	O	O
The	O	O
problem	O	O
is	O	O
much	O	O
more	O	O
manifested	O	O
on	O	O
Collection	B-api_mention	B-api_mention
APIs	O	O
because	O	O
there	O	O
are	O	O
a	O	O
lot	O	O
of	O	O
subclasses	O	O
out	O	O
in	O	O
the	O	O
wild	O	O
.	O	O
While	O	O
the	O	O
leading	O	O
motivation	O	O
of	O	O
default	O	O
method	O	O
was	O	O
to	O	O
add	O	O
some	O	O
useful	O	O
methods	O	O
to	O	O
existing	O	O
Collection	B-api_mention	B-api_mention
APIs	O	O
without	O	O
breaking	O	O
subclasses	O	O
,	O	O
they	O	O
had	O	O
to	O	O
exercise	O	O
great	O	O
self	O	O
-	O	O
control	O	O
of	O	O
doing	O	O
it	O	O
too	O	O
much	O	O
,	O	O
for	O	O
fear	O	O
of	O	O
breaking	O	O
subclasses	O	O
.	O	O
A	O	O
default	O	O
method	O	O
is	O	O
added	O	O
only	O	O
if	O	O
it	O	O
'	O	O
s	O	O
absolutely	O	O
necessary	O	O
.	O	O
The	O	O
real	O	O
question	O	O
here	O	O
is	O	O
,	O	O
why	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
is	O	O
considered	O	O
absolutely	O	O
necessary	O	O
.	O	O
I	O	O
think	O	O
that	O	O
is	O	O
debatable	O	O
.	O	O
Regardless	O	O
of	O	O
why	O	O
default	O	O
method	O	O
was	O	O
introduced	O	O
in	O	O
the	O	O
1st	O	O
place	O	O
,	O	O
it	O	O
is	O	O
now	O	O
a	O	O
great	O	O
tool	O	O
for	O	O
API	O	O
designers	O	O
,	O	O
and	O	O
we	O	O
ought	O	O
to	O	O
treat	O	O
it	O	O
the	O	O
same	O	O
as	O	O
concrete	O	O
methods	O	O
in	O	O
abstract	O	O
classes	O	O
-	O	O
they	O	O
need	O	O
to	O	O
be	O	O
designed	O	O
carefully	O	O
up	O	O
front	O	O
;	O	O
and	O	O
new	O	O
ones	O	O
must	O	O
be	O	O
introduced	O	O
with	O	O
great	O	O
caution	O	O
.	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725453	O	O
Since	O	O
all	O	O
lists	O	O
are	O	O
already	O	O
"	O	O
sorted	O	O
"	O	O
by	O	O
the	O	O
order	O	O
the	O	O
items	O	O
were	O	O
added	O	O
(	O	O
FIFO	O	O
ordering	O	O
)	O	O
,	O	O
you	O	O
can	O	O
"	O	O
resort	O	O
"	O	O
them	O	O
with	O	O
another	O	O
ordering	O	O
,	O	O
including	O	O
the	O	O
natural	O	O
ordering	O	O
of	O	O
elements	O	O
,	O	O
using	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
EDIT	O	O
:	O	O
Lists	B-api_mention	O
as	O	O
data	O	O
structures	O	O
are	O	O
based	O	O
in	O	O
what	O	O
is	O	O
interesting	O	O
is	O	O
the	O	O
ordering	O	O
in	O	O
which	O	O
the	O	O
items	O	O
where	O	O
inserted	O	O
.	O	O
Sets	O	O
do	O	O
not	O	O
have	O	O
that	O	O
information	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
order	O	O
by	O	O
addition	O	O
time	O	O
,	O	O
use	O	O
List	B-api_mention	B-api_mention
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
order	O	O
by	O	O
other	O	O
criteria	O	O
,	O	O
use	O	O
SortedSet	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
30081520	O	O
I	O	O
am	O	O
aware	O	O
that	O	O
it	O	O
is	O	O
better	O	O
to	O	O
call	O	O
the	O	O
equals	O	O
method	O	O
over	O	O
using	O	O
the	O	O
=	O	O
=	O	O
operator	O	O
(	O	O
see	O	O
this	O	O
question	O	O
)	O	O
.	O	O
I	O	O
want	O	O
two	O	O
strings	O	O
to	O	O
compare	O	O
as	O	O
equal	O	O
if	O	O
they	O	O
are	O	O
both	O	O
null	O	O
or	O	O
if	O	O
they	O	O
represent	O	O
the	O	O
same	O	O
string	O	O
.	O	O
Unfortunately	O	O
the	O	O
equals	B-api_mention	O
method	O	O
will	O	O
throw	O	O
an	O	O
NPE	O	O
if	O	O
the	O	O
strings	O	O
are	O	O
null	O	O
.	O	O
My	O	O
code	O	O
is	O	O
currently	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
inelegant	O	O
.	O	O
What	O	O
is	O	O
the	O	O
correct	O	O
way	O	O
to	O	O
perform	O	O
this	O	O
test	O	O
?	O	O
Question	O	O
-	O	O
12317668	O	O
According	O	O
to	O	O
the	O	O
JLS	O	O
,	O	O
an	O	O
int	O	O
array	O	O
should	O	O
be	O	O
filled	O	O
by	O	O
zeros	O	O
just	O	O
after	O	O
initialization	O	O
.	O	O
However	O	O
,	O	O
I	O	O
am	O	O
faced	O	O
with	O	O
a	O	O
situation	O	O
where	O	O
it	O	O
is	O	O
not	O	O
.	O	O
Such	O	O
a	O	O
behavior	O	O
occurs	O	O
first	O	O
in	O	O
JDK	O	O
7u4	O	O
and	O	O
also	O	O
occurs	O	O
in	O	O
all	O	O
later	O	O
updates	O	O
(	O	O
I	O	O
use	O	O
64	O	O
-	O	O
bit	O	O
implementation	O	O
)	O	O
.	O	O
The	O	O
following	O	O
code	O	O
throws	O	O
exception	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
exception	O	O
occurs	O	O
after	O	O
the	O	O
JVM	O	O
performs	O	O
compilation	O	O
of	O	O
the	O	O
code	O	O
block	O	O
and	O	O
does	O	O
not	O	O
arise	O	O
with	O	O
-	O	O
Xint	O	O
flag	O	O
.	O	O
Additionally	O	O
,	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
statement	O	O
(	O	O
as	O	O
all	O	O
other	O	O
statements	O	O
in	O	O
this	O	O
code	O	O
)	O	O
is	O	O
necessary	O	O
,	O	O
and	O	O
the	O	O
exception	O	O
does	O	O
not	O	O
occurs	O	O
if	O	O
it	O	O
is	O	O
absent	O	O
.	O	O
It	O	O
is	O	O
clear	O	O
that	O	O
this	O	O
possible	O	O
bug	O	O
is	O	O
bounded	O	O
with	O	O
some	O	O
JVM	O	O
optimization	O	O
.	O	O
Any	O	O
ideas	O	O
for	O	O
the	O	O
reason	O	O
of	O	O
such	O	O
a	O	O
behavior	O	O
?	O	O
Update	O	O
:	O	O
I	O	O
see	O	O
this	O	O
behavior	O	O
on	O	O
HotSpot	O	O
64	O	O
-	O	O
bit	O	O
server	O	O
VM	O	O
,	O	O
Java	O	O
version	O	O
from	O	O
1	O	O
.	O	O
7	O	O
.	O	O
0	O	O
_	O	O
04	O	O
to	O	O
1	O	O
.	O	O
7	O	O
.	O	O
0	O	O
_	O	O
10	O	O
on	O	O
Gentoo	O	O
Linux	O	O
,	O	O
Debian	O	O
Linux	O	O
(	O	O
both	O	O
kernel	O	O
3	O	O
.	O	O
0	O	O
version	O	O
)	O	O
and	O	O
MacOS	O	O
Lion	O	O
.	O	O
This	O	O
error	O	O
can	O	O
always	O	O
be	O	O
reproduced	O	O
with	O	O
the	O	O
code	O	O
above	O	O
.	O	O
I	O	O
did	O	O
not	O	O
test	O	O
this	O	O
problem	O	O
with	O	O
a	O	O
32	O	O
-	O	O
bit	O	O
JDK	O	O
or	O	O
on	O	O
Windows	O	O
.	O	O
I	O	O
already	O	O
sent	O	O
a	O	O
bug	O	O
report	O	O
to	O	O
the	O	O
Oracle	O	O
(	O	O
bug	O	O
id	O	O
7196857	O	O
)	O	O
and	O	O
it	O	O
will	O	O
appear	O	O
in	O	O
public	O	O
Oracle	O	O
bug	O	O
database	O	O
in	O	O
few	O	O
days	O	O
.	O	O
Update	O	O
:	O	O
Oracle	O	O
published	O	O
this	O	O
bug	O	O
at	O	O
their	O	O
public	O	O
bug	O	O
database	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
29922296	O	O
,	O	O
answer	O	O
-	O	O
29922831	O	O
Three	O	O
questions	O	O
:	O	O
three	O	O
-	O	O
part	O	O
answer	O	O
:	O	O
Is	O	O
it	O	O
okay	O	O
from	O	O
a	O	O
design	O	O
point	O	O
of	O	O
view	O	O
?	O	O
Absolutely	O	O
.	O	O
Nothing	O	O
wrong	O	O
with	O	O
it	O	O
.	O	O
If	O	O
you	O	O
need	O	O
to	O	O
do	O	O
lots	O	O
of	O	O
iterating	O	O
over	O	O
your	O	O
enum	O	O
,	O	O
the	O	O
stream	O	O
API	O	O
is	O	O
the	O	O
clean	O	O
way	O	O
to	O	O
go	O	O
and	O	O
hiding	O	O
the	O	O
boiler	O	O
plate	O	O
behind	O	O
a	O	O
little	O	O
method	O	O
is	O	O
fine	O	O
.	O	O
Although	O	O
I	O	O
’	O	O
d	O	O
consider	O	O
OldCumudgeon	O	O
’	O	O
s	O	O
version	O	O
even	O	O
better	O	O
.	O	O
Is	O	O
it	O	O
okay	O	O
from	O	O
a	O	O
performance	O	O
point	O	O
of	O	O
view	O	O
?	O	O
It	O	O
most	O	O
likely	O	O
doesn	O	O
’	O	O
t	O	O
matter	O	O
.	O	O
Most	O	O
of	O	O
the	O	O
time	O	O
,	O	O
enums	O	O
are	O	O
not	O	O
that	O	O
big	O	O
.	O	O
Therefore	O	O
,	O	O
whatever	O	O
overhead	O	O
there	O	O
is	O	O
for	O	O
one	O	O
method	O	O
or	O	O
the	O	O
other	O	O
probably	O	O
doesn	O	O
’	O	O
t	O	O
matter	O	O
in	O	O
99	O	O
.	O	O
9	O	O
%	O	O
of	O	O
the	O	O
cases	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
there	O	O
are	O	O
the	O	O
0	O	O
.	O	O
1	O	O
%	O	O
where	O	O
it	O	O
does	O	O
.	O	O
In	O	O
that	O	O
case	O	O
:	O	O
measure	O	O
properly	O	O
,	O	O
with	O	O
your	O	O
real	O	O
-	O	O
world	O	O
data	O	O
and	O	O
consumers	O	O
.	O	O
If	O	O
I	O	O
had	O	O
to	O	O
bet	O	O
,	O	O
I	O	O
’	O	O
d	O	O
expect	O	O
the	O	O
for	O	O
each	O	O
loop	O	O
to	O	O
be	O	O
faster	O	O
,	O	O
since	O	O
it	O	O
maps	O	O
more	O	O
directly	O	O
to	O	O
the	O	O
memory	O	O
model	O	O
,	O	O
but	O	O
don	O	O
’	O	O
t	O	O
guess	O	O
when	O	O
talking	O	O
performance	O	O
,	O	O
and	O	O
don	O	O
’	O	O
t	O	O
tune	O	O
before	O	O
there	O	O
is	O	O
actual	O	O
need	O	O
for	O	O
tuning	O	O
.	O	O
Write	O	O
your	O	O
code	O	O
in	O	O
a	O	O
way	O	O
that	O	O
is	O	O
correct	O	O
first	O	O
,	O	O
easy	O	O
to	O	O
read	O	O
second	O	O
and	O	O
only	O	O
then	O	O
worry	O	O
about	O	O
performance	O	O
of	O	O
code	O	O
style	O	O
.	O	O
Why	O	O
aren	O	O
’	O	O
t	O	O
Enums	O	O
properly	O	O
integrated	O	O
into	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
?	O	O
If	O	O
you	O	O
compare	O	O
Java	O	O
’	O	O
s	O	O
Stream	B-api_mention	B-api_mention
API	O	O
to	O	O
the	O	O
equivalent	O	O
in	O	O
many	O	O
other	O	O
languages	O	O
,	O	O
it	O	O
appears	O	O
seriously	O	O
limited	O	O
.	O	O
There	O	O
are	O	O
various	O	O
pieces	O	O
that	O	O
are	O	O
missing	O	O
(	O	O
reusable	O	O
Streams	O	B-api_mention
and	O	O
Optionals	O	B-api_mention
as	O	O
Streams	O	B-api_mention
,	O	O
for	O	O
example	O	O
)	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
implementing	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
was	O	O
certainly	O	O
a	O	O
huge	O	O
change	O	O
for	O	O
the	O	O
API	O	O
.	O	O
It	O	O
was	O	O
postponed	O	O
multiple	O	O
times	O	O
for	O	O
a	O	O
reason	O	O
.	O	O
So	O	O
I	O	O
guess	O	O
Oracle	O	O
wanted	O	O
to	O	O
limit	O	O
the	O	O
changes	O	O
to	O	O
the	O	O
most	O	O
important	O	O
use	O	O
cases	O	O
.	O	O
Enums	O	O
aren	O	O
’	O	O
t	O	O
used	O	O
that	O	O
much	O	O
anyway	O	O
.	O	O
Sure	O	O
,	O	O
every	O	O
project	O	O
has	O	O
a	O	O
couple	O	O
of	O	O
them	O	O
,	O	O
but	O	O
they	O	O
’	O	O
re	O	O
nothing	O	O
compared	O	O
to	O	O
the	O	O
number	O	O
of	O	O
Lists	O	B-api_mention
and	O	O
other	O	O
Collections	B-api_mention	B-api_mention
.	O	O
Even	O	O
when	O	O
you	O	O
have	O	O
an	O	O
Enum	O	O
,	O	O
in	O	O
many	O	O
cases	O	O
you	O	O
won	O	O
’	O	O
t	O	O
ever	O	O
iterate	O	O
over	O	O
it	O	O
.	O	O
Lists	O	O
and	O	O
Sets	O	O
,	O	O
on	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
are	O	O
probably	O	O
iterated	O	O
over	O	O
almost	O	O
every	O	O
time	O	O
.	O	O
I	O	O
assume	O	O
that	O	O
these	O	O
were	O	O
the	O	O
reasons	O	O
why	O	O
the	O	O
Enums	O	O
didn	O	O
’	O	O
t	O	O
get	O	O
their	O	O
own	O	O
adapter	O	O
to	O	O
the	O	O
Stream	B-api_mention	B-api_mention
world	O	O
.	O	O
We	O	O
’	O	O
ll	O	O
see	O	O
whether	O	O
more	O	O
of	O	O
this	O	O
gets	O	O
added	O	O
in	O	O
future	O	O
versions	O	O
.	O	O
And	O	O
until	O	O
then	O	O
you	O	O
always	O	O
can	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
28724850	O	O
Running	O	O
the	O	O
following	O	O
stream	O	O
example	O	O
in	O	O
Java8	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
yields	O	O
:	O	O
/	O	O
a	O	O
/	O	O
b	O	O
/	O	O
c	O	O
/	O	O
d	O	O
/	O	O
e	O	O
/	O	O
f	O	O
Which	O	O
is	O	O
-	O	O
of	O	O
course	O	O
-	O	O
no	O	O
surprise	O	O
.	O	O
Due	O	O
to	O	O
#	O	O
a	O	O
it	O	O
shouldn	O	O
'	O	O
t	O	O
matter	O	O
whether	O	O
the	O	O
stream	O	O
is	O	O
executed	O	O
sequentially	O	O
or	O	O
parallel	O	O
:	O	O
#	O	O
blockquote	O	O
AFAIK	O	O
reduce	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
is	O	O
deterministic	O	O
and	O	O
(	O	O
s1	O	O
,	O	O
s2	O	O
)	O	O
-	O	O
>	O	O
s1	O	O
+	O	O
StringLiteral	O	O
+	O	O
s2	O	O
is	O	O
associative	O	O
,	O	O
so	O	O
that	O	O
adding	O	O
parallel	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
should	O	O
yield	O	O
the	O	O
same	O	O
result	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
However	O	O
the	O	O
result	O	O
on	O	O
my	O	O
machine	O	O
is	O	O
:	O	O
/	O	O
a	O	O
/	O	O
/	O	O
b	O	O
/	O	O
/	O	O
c	O	O
/	O	O
/	O	O
d	O	O
/	O	O
/	O	O
e	O	O
/	O	O
/	O	O
f	O	O
What	O	O
'	O	O
s	O	O
wrong	O	O
here	O	O
?	O	O
BTW	O	O
:	O	O
using	O	O
(	O	O
the	O	O
preferred	O	O
)	O	O
.	O	B-api_mention
collect	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
of	O	O
reduce	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
yields	O	O
the	O	O
same	O	O
result	O	O
a	O	O
/	O	O
b	O	O
/	O	O
c	O	O
/	O	O
d	O	O
/	O	O
e	O	O
/	O	O
f	O	O
for	O	O
sequential	O	O
and	O	O
parallel	O	O
execution	O	O
.	O	O
JVM	O	O
details	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
22694884	O	O
,	O	O
answer	O	O
-	O	O
39385411	O	O
As	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
uses	O	O
a	O	O
throwing	O	O
merger	O	O
to	O	O
handle	O	O
multiple	O	O
entries	O	O
with	O	O
the	O	O
same	O	O
key	O	O
it	O	O
is	O	O
easy	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
will	O	O
get	O	O
a	O	O
IllegalStateException	B-api_mention	B-api_mention
for	O	O
duplicate	O	O
keys	O	O
.	O	O
But	O	O
at	O	O
the	O	O
end	O	O
I	O	O
am	O	O
not	O	O
sure	O	O
if	O	O
the	O	O
code	O	O
would	O	O
not	O	O
be	O	O
even	O	O
more	O	O
readable	O	O
using	O	O
an	O	O
if	O	O
.	O	O
Question	O	O
-	O	O
8881291	O	O
In	O	O
Swing	O	O
,	O	O
the	O	O
password	O	O
field	O	O
has	O	O
a	O	O
getPassword	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
returns	O	O
char	O	O
[	O	O
]	O	O
)	O	O
method	O	O
instead	O	O
of	O	O
the	O	O
usual	O	O
getText	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
returns	O	O
String	B-api_mention	B-api_mention
)	O	O
method	O	O
.	O	O
Similarly	O	O
,	O	O
I	O	O
have	O	O
come	O	O
across	O	O
a	O	O
suggestion	O	O
not	O	O
to	O	O
use	O	O
String	B-api_mention	B-api_mention
to	O	O
handle	O	O
passwords	O	O
.	O	O
Why	O	O
does	O	O
String	B-api_mention	B-api_mention
pose	O	O
a	O	O
threat	O	O
to	O	O
security	O	O
when	O	O
it	O	O
comes	O	O
to	O	O
passwords	O	O
?	O	O
It	O	O
feels	O	O
inconvenient	O	O
to	O	O
use	O	O
char	O	O
[	O	O
]	O	O
.	O	O
Question	O	O
-	O	O
4772425	O	O
,	O	O
answer	O	O
-	O	O
4772461	O	O
Use	O	O
LocalDateTime	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
or	O	O
ZonedDateTime	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
the	O	O
string	O	O
happens	O	O
to	O	O
contain	O	O
a	O	O
time	O	O
zone	O	O
part	O	O
)	O	O
to	O	O
parse	O	O
a	O	O
String	B-api_mention	B-api_mention
in	O	O
a	O	O
certain	O	O
pattern	O	O
into	O	O
a	O	O
LocalDateTime	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
Use	O	O
LocalDateTime	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
format	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
or	O	O
ZonedDateTime	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
format	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
to	O	O
format	O	O
a	O	O
LocalDateTime	B-api_mention	B-api_mention
into	O	O
a	O	O
String	B-api_mention	B-api_mention
in	O	O
a	O	O
certain	O	O
pattern	O	O
.	O	O
#	O	O
pre	O	O
Or	O	O
,	O	O
when	O	O
you	O	O
'	O	O
re	O	O
not	O	O
on	O	O
Java	O	O
8	O	O
yet	O	O
,	O	O
use	O	O
SimpleDateFormat	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
parse	O	O
a	O	O
String	B-api_mention	B-api_mention
in	O	O
a	O	O
certain	O	O
pattern	O	O
into	O	O
a	O	O
Date	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
Use	O	O
SimpleDateFormat	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
format	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
format	O	O
a	O	O
Date	B-api_mention	B-api_mention
into	O	O
a	O	O
String	B-api_mention	B-api_mention
in	O	O
a	O	O
certain	O	O
pattern	O	O
.	O	O
#	O	O
pre	O	O
See	O	O
also	O	O
:	O	O
#	O	O
li	O	O
Java	O	O
string	O	O
to	O	O
date	O	O
conversion	O	O
Update	O	O
:	O	O
as	O	O
per	O	O
your	O	O
failed	O	O
attempt	O	O
:	O	O
the	O	O
patterns	O	O
are	O	O
case	O	O
sensitive	O	O
.	O	O
Read	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
text	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
SimpleDateFormat	I-api_mention	I-api_mention
javadoc	O	O
what	O	O
the	O	O
individual	O	O
parts	O	O
stands	O	O
for	O	O
.	O	O
So	O	O
stands	O	O
for	O	O
example	O	O
M	O	O
for	O	O
months	O	O
and	O	O
m	O	O
for	O	O
minutes	O	O
.	O	O
Also	O	O
,	O	O
years	O	O
exist	O	O
of	O	O
four	O	O
digits	O	O
yyyy	O	O
,	O	O
not	O	O
five	O	O
yyyyy	O	O
.	O	O
Look	O	O
closer	O	O
at	O	O
the	O	O
code	O	O
snippets	O	O
I	O	O
posted	O	O
here	O	O
above	O	O
.	O	O
Question	O	O
-	O	O
8275499	O	O
,	O	O
answer	O	O
-	O	O
8275508	O	O
Just	O	O
use	O	O
TheClassName	O	O
.	O	O
class	O	O
instead	O	O
of	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
34509566	O	O
,	O	O
answer	O	O
-	O	O
34509655	O	O
As	O	O
you	O	O
said	O	O
internally	O	O
the	O	O
last	O	O
concatenation	O	O
is	O	O
done	O	O
to	O	O
something	O	O
similar	O	O
to	O	O
String	B-api_mention	B-api_mention
e	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
the	O	O
implementation	O	O
of	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
StringBuilder	B-api_mention	B-api_mention
creates	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
.	O	O
Here	O	O
is	O	O
the	O	O
implementation	O	O
.	O	O
#	O	O
pre	O	O
Comparing	O	O
strings	O	O
using	O	O
=	O	O
=	O	O
instead	O	O
of	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
true	O	O
only	O	O
if	O	O
both	O	O
strings	O	O
are	O	O
the	O	O
same	O	O
.	O	O
In	O	O
this	O	O
case	O	O
they	O	O
are	O	O
not	O	O
the	O	O
same	O	O
because	O	O
the	O	O
second	O	O
string	O	O
is	O	O
created	O	O
as	O	O
a	O	O
new	O	O
object	O	O
of	O	O
type	O	O
String	B-api_mention	B-api_mention
.	O	O
The	O	O
other	O	O
concatenations	O	O
are	O	O
performed	O	O
directly	O	O
by	O	O
the	O	O
compiler	O	O
so	O	O
no	O	O
new	O	O
String	B-api_mention	B-api_mention
is	O	O
created	O	O
.	O	O
Question	O	O
-	O	O
18448671	O	O
,	O	O
answer	O	O
-	O	O
26937769	O	O
Though	O	O
one	O	O
answer	O	O
is	O	O
accepted	O	O
and	O	O
this	O	O
is	O	O
an	O	O
old	O	O
one	O	O
,	O	O
I	O	O
thought	O	O
posting	O	O
this	O	O
answer	O	O
as	O	O
it	O	O
does	O	O
not	O	O
use	O	O
Iterator	B-api_mention	B-api_mention
#	O	O
pre	O	O
Question	O	O
-	O	O
32714194	O	O
,	O	O
answer	O	O
-	O	O
32714222	O	O
+	O	O
is	O	O
implemented	O	O
in	O	O
java	O	O
compilers	O	O
.	O	O
The	O	O
compiler	O	O
replaces	O	O
String	B-api_mention	B-api_mention
+	O	O
String	B-api_mention	B-api_mention
with	O	O
either	O	O
compile	O	O
time	O	O
constants	O	O
or	O	O
StringBuilder	B-api_mention	B-api_mention
code	O	O
.	O	O
Note	O	O
that	O	O
this	O	O
applies	O	O
to	O	O
primitives	O	O
too	O	O
.	O	O
i	O	O
.	O	O
e	O	O
,	O	O
int	O	O
i	O	O
=	O	O
1	O	O
+	O	O
2	O	O
could	O	O
get	O	O
directly	O	O
replaced	O	O
to	O	O
int	O	O
i	O	O
=	O	O
3	O	O
during	O	O
compilation	O	O
itself	O	O
.	O	O
Question	O	O
-	O	O
31419029	O	O
,	O	O
answer	O	O
-	O	O
31419077	O	O
If	O	O
you	O	O
look	O	O
at	O	O
the	O	O
implementation	O	O
of	O	O
HashMap	B-api_mention	B-api_mention
,	O	O
the	O	O
constructor	O	O
looks	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
init	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
looks	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
initialCapacity	O	O
doesn	O	O
'	O	O
t	O	O
actually	O	O
get	O	O
used	O	O
to	O	O
create	O	O
an	O	O
array	O	O
.	O	O
Where	O	O
does	O	O
it	O	O
get	O	O
used	O	O
?	O	O
Look	O	O
at	O	O
the	O	O
put	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
pre	O	O
When	O	O
doing	O	O
a	O	O
put	O	O
,	O	O
the	O	O
array	O	O
is	O	O
actually	O	O
created	O	O
.	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
show	O	O
inflateTable	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
but	O	O
it	O	O
does	O	O
some	O	O
math	O	O
and	O	O
initializes	O	O
the	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
15156857	O	O
,	O	O
answer	O	O
-	O	O
15157021	O	O
You	O	O
must	O	O
use	O	O
doThrow	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
methodReturningVoid	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
not	O	O
doThrow	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
explained	O	O
in	O	O
the	O	O
documentation	O	O
Question	O	O
-	O	O
15621083	O	O
I	O	O
am	O	O
working	O	O
on	O	O
some	O	O
Java	O	O
code	O	O
which	O	O
needs	O	O
to	O	O
be	O	O
highly	O	O
optimized	O	O
as	O	O
it	O	O
will	O	O
run	O	O
in	O	O
hot	O	O
functions	O	O
that	O	O
are	O	O
invoked	O	O
at	O	O
many	O	O
points	O	O
in	O	O
my	O	O
main	O	O
program	O	O
logic	O	O
.	O	O
Part	O	O
of	O	O
this	O	O
code	O	O
involves	O	O
multiplying	O	O
double	O	O
variables	O	O
by	O	O
10	O	O
raised	O	O
to	O	O
arbitrary	O	O
non	O	O
-	O	O
negative	O	O
int	O	O
exponent	O	O
s	O	O
.	O	O
One	O	O
fast	O	O
way	O	O
(	O	O
edit	O	O
:	O	O
but	O	O
not	O	O
the	O	O
fastest	O	O
possible	O	O
,	O	O
see	O	O
Update	O	O
2	O	O
below	O	O
)	O	O
to	O	O
get	O	O
the	O	O
multiplied	O	O
value	O	O
is	O	O
to	O	O
switch	O	O
on	O	O
the	O	O
exponent	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
commented	O	O
ellipses	O	O
above	O	O
indicate	O	O
that	O	O
the	O	O
case	O	O
int	O	O
constants	O	O
continue	O	O
incrementing	O	O
by	O	O
1	O	O
,	O	O
so	O	O
there	O	O
are	O	O
really	O	O
19	O	O
case	O	O
s	O	O
in	O	O
the	O	O
above	O	O
code	O	O
snippet	O	O
.	O	O
Since	O	O
I	O	O
wasn	O	O
'	O	O
t	O	O
sure	O	O
whether	O	O
I	O	O
would	O	O
actually	O	O
need	O	O
all	O	O
the	O	O
powers	O	O
of	O	O
10	O	O
in	O	O
case	O	O
statements	O	O
10	O	O
thru	O	O
18	O	O
,	O	O
I	O	O
ran	O	O
some	O	O
microbenchmarks	O	O
comparing	O	O
the	O	O
time	O	O
to	O	O
complete	O	O
10	O	O
million	O	O
operations	O	O
with	O	O
this	O	O
switch	O	O
statement	O	O
versus	O	O
a	O	O
switch	O	O
with	O	O
only	O	O
case	O	O
s	O	O
0	O	O
thru	O	O
9	O	O
(	O	O
with	O	O
the	O	O
exponent	O	O
limited	O	O
to	O	O
9	O	O
or	O	O
less	O	O
to	O	O
avoid	O	O
breaking	O	O
the	O	O
pared	O	O
-	O	O
down	O	O
switch	O	O
)	O	O
.	O	O
I	O	O
got	O	O
the	O	O
rather	O	O
surprising	O	O
(	O	O
to	O	O
me	O	O
,	O	O
at	O	O
least	O	O
!	O	O
)	O	O
result	O	O
that	O	O
the	O	O
longer	O	O
switch	O	O
with	O	O
more	O	O
case	O	O
statements	O	O
actually	O	O
ran	O	O
faster	O	O
.	O	O
On	O	O
a	O	O
lark	O	O
,	O	O
I	O	O
tried	O	O
adding	O	O
even	O	O
more	O	O
case	O	O
s	O	O
which	O	O
just	O	O
returned	O	O
dummy	O	O
values	O	O
,	O	O
and	O	O
found	O	O
that	O	O
I	O	O
could	O	O
get	O	O
the	O	O
switch	O	O
to	O	O
run	O	O
even	O	O
faster	O	O
with	O	O
around	O	O
22	O	O
-	O	O
27	O	O
declared	O	O
case	O	O
s	O	O
(	O	O
even	O	O
though	O	O
those	O	O
dummy	O	O
cases	O	O
are	O	O
never	O	O
actually	O	O
hit	O	O
while	O	O
the	O	O
code	O	O
is	O	O
running	O	O
)	O	O
.	O	O
(	O	O
Again	O	O
,	O	O
case	O	O
s	O	O
were	O	O
added	O	O
in	O	O
a	O	O
contiguous	O	O
fashion	O	O
by	O	O
incrementing	O	O
the	O	O
prior	O	O
case	O	O
constant	O	O
by	O	O
1	O	O
.	O	O
)	O	O
These	O	O
execution	O	O
time	O	O
differences	O	O
are	O	O
not	O	O
very	O	O
significant	O	O
:	O	O
for	O	O
a	O	O
random	O	O
exponent	O	O
between	O	O
0	O	O
and	O	O
10	O	O
,	O	O
the	O	O
dummy	O	O
padded	O	O
switch	O	O
statement	O	O
finishes	O	O
10	O	O
million	O	O
executions	O	O
in	O	O
1	O	O
.	O	O
49	O	O
secs	O	O
versus	O	O
1	O	O
.	O	O
54	O	O
secs	O	O
for	O	O
the	O	O
unpadded	O	O
version	O	O
,	O	O
for	O	O
a	O	O
grand	O	O
total	O	O
savings	O	O
of	O	O
5ns	O	O
per	O	O
execution	O	O
.	O	O
So	O	O
,	O	O
not	O	O
the	O	O
kind	O	O
of	O	O
thing	O	O
that	O	O
makes	O	O
obsessing	O	O
over	O	O
padding	O	O
out	O	O
a	O	O
switch	O	O
statement	O	O
worth	O	O
the	O	O
effort	O	O
from	O	O
an	O	O
optimization	O	O
standpoint	O	O
.	O	O
But	O	O
I	O	O
still	O	O
just	O	O
find	O	O
it	O	O
curious	O	O
and	O	O
counter	O	O
-	O	O
intuitive	O	O
that	O	O
a	O	O
switch	O	O
doesn	O	O
'	O	O
t	O	O
become	O	O
slower	O	O
(	O	O
or	O	O
perhaps	O	O
at	O	O
best	O	O
maintain	O	O
constant	O	O
O	O	O
(	O	O
1	O	O
)	O	O
time	O	O
)	O	O
to	O	O
execute	O	O
as	O	O
more	O	O
case	O	O
s	O	O
are	O	O
added	O	O
to	O	O
it	O	O
.	O	O
#	O	O
img	O	O
These	O	O
are	O	O
the	O	O
results	O	O
I	O	O
obtained	O	O
from	O	O
running	O	O
with	O	O
various	O	O
limits	O	O
on	O	O
the	O	O
randomly	O	O
-	O	O
generated	O	O
exponent	O	O
values	O	O
.	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
include	O	O
the	O	O
results	O	O
all	O	O
the	O	O
way	O	O
down	O	O
to	O	O
1	O	O
for	O	O
the	O	O
exponent	O	O
limit	O	O
,	O	O
but	O	O
the	O	O
general	O	O
shape	O	O
of	O	O
the	O	O
curve	O	O
remains	O	O
the	O	O
same	O	O
,	O	O
with	O	O
a	O	O
ridge	O	O
around	O	O
the	O	O
12	O	O
-	O	O
17	O	O
case	O	O
mark	O	O
,	O	O
and	O	O
a	O	O
valley	O	O
between	O	O
18	O	O
-	O	O
28	O	O
.	O	O
All	O	O
tests	O	O
were	O	O
run	O	O
in	O	O
JUnitBenchmarks	O	O
using	O	O
shared	O	O
containers	O	O
for	O	O
the	O	O
random	O	O
values	O	O
to	O	O
ensure	O	O
identical	O	O
testing	O	O
inputs	O	O
.	O	O
I	O	O
also	O	O
ran	O	O
the	O	O
tests	O	O
both	O	O
in	O	O
order	O	O
from	O	O
longest	O	O
switch	O	O
statement	O	O
to	O	O
shortest	O	O
,	O	O
and	O	O
vice	O	O
-	O	O
versa	O	O
,	O	O
to	O	O
try	O	O
and	O	O
eliminate	O	O
the	O	O
possibility	O	O
of	O	O
ordering	O	O
-	O	O
related	O	O
test	O	O
problems	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
put	O	O
my	O	O
testing	O	O
code	O	O
up	O	O
on	O	O
a	O	O
github	O	O
repo	O	O
if	O	O
anyone	O	O
wants	O	O
to	O	O
try	O	O
to	O	O
reproduce	O	O
these	O	O
results	O	O
.	O	O
So	O	O
,	O	O
what	O	O
'	O	O
s	O	O
going	O	O
on	O	O
here	O	O
?	O	O
Some	O	O
vagaries	O	O
of	O	O
my	O	O
architecture	O	O
or	O	O
micro	O	O
-	O	O
benchmark	O	O
construction	O	O
?	O	O
Or	O	O
is	O	O
the	O	O
Java	O	O
switch	O	O
really	O	O
a	O	O
little	O	O
faster	O	O
to	O	O
execute	O	O
in	O	O
the	O	O
18	O	O
to	O	O
28	O	O
case	O	O
range	O	O
than	O	O
it	O	O
is	O	O
from	O	O
11	O	O
up	O	O
to	O	O
17	O	O
?	O	O
github	O	O
test	O	O
repo	O	O
"	O	O
switch	O	O
-	O	O
experiment	O	O
"	O	O
UPDATE	O	O
:	O	O
I	O	O
cleaned	O	O
up	O	O
the	O	O
benchmarking	O	O
library	O	O
quite	O	O
a	O	O
bit	O	O
and	O	O
added	O	O
a	O	O
text	O	O
file	O	O
in	O	O
/	O	O
results	O	O
with	O	O
some	O	O
output	O	O
across	O	O
a	O	O
wider	O	O
range	O	O
of	O	O
possible	O	O
exponent	O	O
values	O	O
.	O	O
I	O	O
also	O	O
added	O	O
an	O	O
option	O	O
in	O	O
the	O	O
testing	O	O
code	O	O
not	O	O
to	O	O
throw	O	O
an	O	O
Exception	B-api_mention	B-api_mention
from	O	O
default	O	O
,	O	O
but	O	O
this	O	O
doesn	O	O
'	O	O
t	O	O
appear	O	O
to	O	O
affect	O	O
the	O	O
results	O	O
.	O	O
UPDATE	O	O
2	O	O
:	O	O
Found	O	O
some	O	O
pretty	O	O
good	O	O
discussion	O	O
of	O	O
this	O	O
issue	O	O
from	O	O
back	O	O
in	O	O
2009	O	O
on	O	O
the	O	O
xkcd	O	O
forum	O	O
here	O	O
:	O	O
#	O	O
a	O	O
.	O	O
The	O	O
OP	O	O
'	O	O
s	O	O
discussion	O	O
of	O	O
using	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
binarySearch	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gave	O	O
me	O	O
the	O	O
idea	O	O
for	O	O
a	O	O
simple	O	O
array	O	O
-	O	O
based	O	O
implementation	O	O
of	O	O
the	O	O
exponentiation	O	O
pattern	O	O
above	O	O
.	O	O
There	O	O
'	O	O
s	O	O
no	O	O
need	O	O
for	O	O
the	O	O
binary	O	O
search	O	O
since	O	O
I	O	O
know	O	O
what	O	O
the	O	O
entries	O	O
in	O	O
the	O	O
array	O	O
are	O	O
.	O	O
It	O	O
appears	O	O
to	O	O
run	O	O
about	O	O
3	O	O
times	O	O
faster	O	O
than	O	O
using	O	O
switch	O	O
,	O	O
obviously	O	O
at	O	O
the	O	O
expense	O	O
of	O	O
some	O	O
of	O	O
the	O	O
control	O	O
flow	O	O
that	O	O
switch	O	O
affords	O	O
.	O	O
That	O	O
code	O	O
has	O	O
been	O	O
added	O	O
to	O	O
the	O	O
github	O	O
repo	O	O
also	O	O
.	O	O
Question	O	O
-	O	O
6652687	O	O
#	O	O
blockquote	O	O
Is	O	O
there	O	O
a	O	O
convenience	O	O
method	O	O
to	O	O
strip	O	O
any	O	O
leading	O	O
or	O	O
trailing	O	O
spaces	O	O
from	O	O
a	O	O
Java	O	O
String	B-api_mention	B-api_mention
?	O	O
Something	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
Result	O	O
:	O	O
no	O	O
spaces	O	O
:	O	O
keep	O	O
this	O	O
myString	O	O
.	B-api_mention	B-api_mention
replace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
replace	O	O
the	O	O
space	O	O
between	O	O
keep	O	O
and	O	O
this	O	O
.	O	O
Thanks	O	O
Question	O	O
-	O	O
29183904	O	O
,	O	O
answer	O	O
-	O	O
29972028	O	O
Use	O	O
enum	O	O
when	O	O
you	O	O
need	O	O
its	O	O
features	O	O
.	O	O
Don	O	O
'	O	O
t	O	O
avoid	O	O
it	O	O
strictly	O	O
.	O	O
Java	O	O
enum	O	O
is	O	O
more	O	O
powerful	O	O
,	O	O
but	O	O
if	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
its	O	O
features	O	O
,	O	O
use	O	O
constants	O	O
,	O	O
they	O	O
occupy	O	O
less	O	O
space	O	O
and	O	O
they	O	O
can	O	O
be	O	O
primitive	O	O
itself	O	O
.	O	O
When	O	O
to	O	O
use	O	O
enum	O	O
:	O	O
#	O	O
li	O	O
type	O	O
checking	O	O
-	O	O
you	O	O
can	O	O
accept	O	O
only	O	O
listed	O	O
values	O	O
,	O	O
and	O	O
they	O	O
are	O	O
not	O	O
continuous	O	O
(	O	O
see	O	O
below	O	O
what	O	O
I	O	O
call	O	O
continuous	O	O
here	O	O
)	O	O
#	O	O
li	O	O
method	O	O
overloading	O	O
-	O	O
every	O	O
enum	O	O
constant	O	O
has	O	O
its	O	O
own	O	O
implementation	O	O
of	O	O
a	O	O
method	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
more	O	O
data	O	O
-	O	O
your	O	O
one	O	O
constant	O	O
contains	O	O
more	O	O
than	O	O
one	O	O
information	O	O
that	O	O
cannot	O	O
be	O	O
put	O	O
in	O	O
one	O	O
variable	O	O
#	O	O
li	O	O
complicated	O	O
data	O	O
-	O	O
your	O	O
constant	O	O
need	O	O
methods	O	O
to	O	O
operate	O	O
on	O	O
the	O	O
data	O	O
When	O	O
not	O	O
to	O	O
use	O	O
enum	O	O
:	O	O
#	O	O
li	O	O
you	O	O
can	O	O
accept	O	O
all	O	O
values	O	O
of	O	O
one	O	O
type	O	O
,	O	O
and	O	O
your	O	O
constants	O	O
contain	O	O
only	O	O
these	O	O
most	O	O
used	O	O
#	O	O
li	O	O
you	O	O
can	O	O
accept	O	O
continuous	O	O
data	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
for	O	O
names	O	O
(	O	O
like	O	O
in	O	O
your	O	O
example	O	O
)	O	O
#	O	O
li	O	O
for	O	O
everything	O	O
other	O	O
that	O	O
really	O	O
doesn	O	O
'	O	O
t	O	O
need	O	O
an	O	O
enum	O	O
Enum	O	O
occupies	O	O
more	O	O
space	O	O
#	O	O
li	O	O
a	O	O
single	O	O
reference	O	O
to	O	O
an	O	O
enum	O	O
constant	O	O
occupy	O	O
4	O	O
bytes	O	O
#	O	O
li	O	O
every	O	O
enum	O	O
constant	O	O
occupy	O	O
space	O	O
that	O	O
is	O	O
a	O	O
sum	O	O
of	O	O
its	O	O
fields	O	O
'	O	O
sizes	O	O
aligned	O	O
to	O	O
8	O	O
bytes	O	O
+	O	O
overhead	O	O
of	O	O
the	O	O
object	O	O
#	O	O
li	O	O
the	O	O
enum	O	O
class	O	O
itself	O	O
occupy	O	O
some	O	O
space	O	O
Constant	O	O
occupies	O	O
less	O	O
space	O	O
#	O	O
li	O	O
a	O	O
constant	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
a	O	O
reference	O	O
so	O	O
it	O	O
'	O	O
s	O	O
a	O	O
pure	O	O
data	O	O
(	O	O
even	O	O
if	O	O
it	O	O
'	O	O
s	O	O
a	O	O
reference	O	O
,	O	O
then	O	O
enum	O	O
instance	O	O
would	O	O
be	O	O
a	O	O
reference	O	O
to	O	O
another	O	O
reference	O	O
)	O	O
#	O	O
li	O	O
constants	O	O
may	O	O
be	O	O
added	O	O
to	O	O
existing	O	O
class	O	O
-	O	O
it	O	O
'	O	O
s	O	O
not	O	O
necessary	O	O
to	O	O
add	O	O
another	O	O
class	O	O
#	O	O
li	O	O
constants	O	O
may	O	O
be	O	O
inlined	O	O
;	O	O
it	O	O
brings	O	O
extended	O	O
compile	O	O
-	O	O
time	O	O
features	O	O
(	O	O
such	O	O
as	O	O
null	O	O
checking	O	O
,	O	O
finding	O	O
dead	O	O
code	O	O
etc	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
18723596	O	O
,	O	O
answer	O	O
-	O	O
18723704	O	O
You	O	O
can	O	O
cast	O	O
null	O	O
to	O	O
any	O	O
reference	O	O
type	O	O
.	O	O
You	O	O
can	O	O
also	O	O
call	O	O
methods	O	O
which	O	O
handle	O	O
a	O	O
null	O	O
as	O	O
an	O	O
argument	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
,	O	O
but	O	O
you	O	O
cannot	O	O
reference	O	O
a	O	O
null	O	O
value	O	O
and	O	O
call	O	O
a	O	O
method	O	O
on	O	O
it	O	O
.	O	O
BTW	O	O
There	O	O
is	O	O
a	O	O
tricky	O	O
situation	O	O
where	O	O
it	O	O
appears	O	O
you	O	O
can	O	O
call	O	O
static	O	O
methods	O	O
on	O	O
null	O	O
values	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
27482579	O	O
,	O	O
answer	O	O
-	O	O
27483288	O	O
#	O	O
blockquote	O	O
No	O	O
.	O	O
It	O	O
will	O	O
never	O	O
throw	O	O
a	O	O
compilation	O	O
error	O	O
.	O	O
This	O	O
is	O	O
much	O	O
similar	O	O
to	O	O
what	O	O
a	O	O
simple	O	O
getter	B-api_mention	O
and	O	O
setter	B-api_mention	O
does	O	O
or	O	O
a	O	O
copy	B-api_mention	O
constructor	O	O
does	O	O
.	O	O
Remember	O	O
we	O	O
can	O	O
access	O	O
private	O	O
members	O	O
using	O	O
this	O	O
.	O	O
#	O	O
pre	O	O
Your	O	O
testPrivate	O	O
method	O	O
accepts	O	O
an	O	O
instance	O	O
of	O	O
MyClass	O	B-api_mention
.	O	O
Since	O	O
testPrivate	O	O
is	O	O
a	O	O
method	O	O
inside	O	O
MyClass	O	O
,	O	O
it	O	O
will	O	O
have	O	O
access	O	O
to	O	O
private	O	O
properties	O	O
.	O	O
#	O	O
pre	O	O
Methods	O	O
defined	O	O
inside	O	O
the	O	O
class	O	O
will	O	O
always	O	O
have	O	O
access	O	O
to	O	O
it	O	O
'	O	O
s	O	O
private	O	O
members	O	O
,	O	O
through	O	O
this	O	O
.	O	O
and	O	O
instance	O	O
variable	O	O
.	O	O
But	O	O
if	O	O
you	O	O
define	O	O
testPrivate	O	O
outside	O	O
of	O	O
MyClass	O	O
then	O	O
,	O	O
you	O	O
won	O	O
'	O	O
t	O	O
have	O	O
access	O	O
to	O	O
private	O	O
members	O	O
.	O	O
There	O	O
you	O	O
will	O	O
have	O	O
to	O	O
use	O	O
a	O	O
method	O	O
or	O	O
a	O	O
setter	B-api_mention	O
or	O	O
a	O	O
getter	B-api_mention	O
.	O	O
Question	O	O
-	O	O
20363719	O	O
,	O	O
answer	O	O
-	O	O
25453317	O	O
If	O	O
your	O	O
key	O	O
is	O	O
NOT	O	O
guaranteed	O	O
to	O	O
be	O	O
unique	O	O
for	O	O
all	O	O
elements	O	O
in	O	O
the	O	O
list	O	O
,	O	O
you	O	O
should	O	O
convert	O	O
it	O	O
to	O	O
a	O	O
Map	B-api_mention	B-api_mention
<	O	O
String	B-api_mention	B-api_mention
,	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
instead	O	O
of	O	O
a	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
Map	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
result	O	O
=	O	O
choices	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276493	O	O
You	O	O
can	O	O
close	O	O
the	O	O
outer	O	O
most	O	O
stream	O	O
,	O	O
in	O	O
fact	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
retain	O	O
all	O	O
the	O	O
streams	O	O
wrapped	O	O
and	O	O
you	O	O
can	O	O
use	O	O
Java	O	O
7	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
.	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
subscribe	O	O
to	O	O
YAGNI	O	O
,	O	O
or	O	O
you	O	O
-	O	O
aint	O	O
-	O	O
gonna	O	O
-	O	O
need	O	O
-	O	O
it	O	O
,	O	O
you	O	O
should	O	O
be	O	O
only	O	O
adding	O	O
code	O	O
you	O	O
actually	O	O
need	O	O
.	O	O
You	O	O
shouldn	O	O
'	O	O
t	O	O
be	O	O
adding	O	O
code	O	O
you	O	O
imagine	O	O
you	O	O
might	O	O
need	O	O
but	O	O
in	O	O
reality	O	O
doesn	O	O
'	O	O
t	O	O
do	O	O
anything	O	O
useful	O	O
.	O	O
Take	O	O
this	O	O
example	O	O
and	O	O
imagine	O	O
what	O	O
could	O	O
possibly	O	O
go	O	O
wrong	O	O
if	O	O
you	O	O
didn	O	O
'	O	O
t	O	O
do	O	O
this	O	O
and	O	O
what	O	O
the	O	O
impact	O	O
would	O	O
be	O	O
?	O	O
#	O	O
pre	O	O
Lets	O	O
start	O	O
with	O	O
FileOutputStream	B-api_mention	B-api_mention
which	O	O
calls	O	O
open	O	O
to	O	O
do	O	O
all	O	O
the	O	O
real	O	O
work	O	O
.	O	O
/	O	O
*	O	O
*	O	O
*	O	O
Opens	O	O
a	O	O
file	O	O
,	O	O
with	O	O
the	O	O
specified	O	O
name	O	O
,	O	O
for	O	O
overwriting	O	O
or	O	O
appending	O	O
.	O	O
*	O	O
@	O	O
param	O	O
name	O	O
name	O	O
of	O	O
file	O	O
to	O	O
be	O	O
opened	O	O
*	O	O
@	O	O
param	O	O
append	O	O
whether	O	O
the	O	O
file	O	O
is	O	O
to	O	O
be	O	O
opened	O	O
in	O	O
append	O	O
mode	O	O
*	O	O
/	O	O
private	O	O
native	O	O
void	O	O
open	O	O
(	O	O
args	O	O
)	O	O
throws	O	O
FileNotFoundException	B-api_mention	B-api_mention
;	O	O
If	O	O
the	O	O
file	O	O
is	O	O
not	O	O
found	O	O
,	O	O
there	O	O
is	O	O
no	O	O
underlying	O	O
resource	O	O
to	O	O
close	O	O
,	O	O
so	O	O
closing	O	O
it	O	O
won	O	O
'	O	O
t	O	O
make	O	O
any	O	O
difference	O	O
.	O	O
If	O	O
The	O	O
file	O	O
exists	O	O
,	O	O
it	O	O
should	O	O
be	O	O
throwing	O	O
a	O	O
FileNotFoundException	B-api_mention	B-api_mention
.	O	O
So	O	O
there	O	O
is	O	O
nothing	O	O
to	O	O
be	O	O
gained	O	O
by	O	O
trying	O	O
to	O	O
close	O	O
the	O	O
resource	O	O
from	O	O
this	O	O
line	O	O
alone	O	O
.	O	O
The	O	O
reason	O	O
you	O	O
need	O	O
to	O	O
close	O	O
the	O	O
file	O	O
is	O	O
when	O	O
the	O	O
file	O	O
is	O	O
opened	O	O
successfully	O	O
,	O	O
but	O	O
you	O	O
later	O	O
get	O	O
an	O	O
error	O	O
.	O	O
Lets	O	O
look	O	O
at	O	O
the	O	O
next	O	O
stream	O	O
GZIPOutputStream	B-api_mention	O
There	O	O
is	O	O
code	O	O
which	O	O
can	O	O
throw	O	O
an	O	O
exception	O	O
#	O	O
pre	O	O
This	O	O
writes	O	O
the	O	O
header	O	O
of	O	O
the	O	O
file	O	O
.	O	O
Now	O	O
it	O	O
would	O	O
be	O	O
very	O	O
unusual	O	O
for	O	O
you	O	O
to	O	O
be	O	O
able	O	O
to	O	O
open	O	O
a	O	O
file	O	O
for	O	O
writing	O	O
but	O	O
not	O	O
be	O	O
able	O	O
to	O	O
write	O	O
even	O	O
8	O	O
bytes	O	O
to	O	O
it	O	O
,	O	O
but	O	O
lets	O	O
imagine	O	O
this	O	O
could	O	O
happen	O	O
and	O	O
we	O	O
don	O	O
'	O	O
t	O	O
close	O	O
the	O	O
file	O	O
afterwards	O	O
.	O	O
What	O	O
does	O	O
happen	O	O
to	O	O
a	O	O
file	O	O
if	O	O
it	O	O
is	O	O
not	O	O
closed	O	O
?	O	O
You	O	O
don	O	O
'	O	O
t	O	O
get	O	O
any	O	O
unflushed	O	O
writes	O	O
,	O	O
they	O	O
are	O	O
discarded	O	O
and	O	O
in	O	O
this	O	O
case	O	O
,	O	O
there	O	O
is	O	O
no	O	O
successfully	O	O
written	O	O
bytes	O	O
to	O	O
the	O	O
stream	O	O
which	O	O
isn	O	O
'	O	O
t	O	O
buffered	O	O
at	O	O
this	O	O
point	O	O
anyway	O	O
.	O	O
But	O	O
a	O	O
file	O	O
which	O	O
is	O	O
not	O	O
closed	O	O
doesn	O	O
'	O	O
t	O	O
live	O	O
forever	O	O
,	O	O
instead	O	O
FileOutputStream	B-api_mention	B-api_mention
has	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
close	O	O
a	O	O
file	O	O
at	O	O
all	O	O
,	O	O
it	O	O
gets	O	O
closed	O	O
anyway	O	O
,	O	O
just	O	O
not	O	O
immediately	O	O
(	O	O
and	O	O
like	O	O
I	O	O
said	O	O
,	O	O
data	O	O
which	O	O
is	O	O
left	O	O
in	O	O
a	O	O
buffer	O	O
will	O	O
be	O	O
lost	O	O
this	O	O
way	O	O
,	O	O
but	O	O
there	O	O
is	O	O
none	O	O
at	O	O
this	O	O
point	O	O
)	O	O
What	O	O
is	O	O
the	O	O
consequence	O	O
of	O	O
not	O	O
closing	O	O
the	O	O
file	O	O
immediately	O	O
?	O	O
Under	O	O
normal	O	O
conditions	O	O
,	O	O
you	O	O
potentially	O	O
lose	O	O
some	O	O
data	O	O
,	O	O
and	O	O
you	O	O
potentially	O	O
run	O	O
out	O	O
of	O	O
file	O	O
descriptors	O	O
.	O	O
But	O	O
if	O	O
you	O	O
have	O	O
a	O	O
system	O	O
where	O	O
you	O	O
can	O	O
create	O	O
files	O	O
but	O	O
you	O	O
can	O	O
'	O	O
t	O	O
write	O	O
anything	O	O
to	O	O
them	O	O
,	O	O
you	O	O
have	O	O
a	O	O
bigger	O	O
problem	O	O
.	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
hard	O	O
to	O	O
imagine	O	O
why	O	O
you	O	O
are	O	O
repeatedly	O	O
trying	O	O
to	O	O
create	O	O
this	O	O
file	O	O
despite	O	O
the	O	O
fact	O	O
you	O	O
are	O	O
failing	O	O
.	O	O
Both	O	O
OutputStreamWriter	B-api_mention	B-api_mention
and	O	O
BufferedWriter	B-api_mention	B-api_mention
don	O	O
'	O	O
t	O	O
throw	O	O
IOException	B-api_mention	B-api_mention
in	O	O
their	O	O
constructors	O	O
,	O	O
so	O	O
it	O	O
not	O	O
clear	O	O
what	O	O
problem	O	O
they	O	O
would	O	O
cause	O	O
.	O	O
In	O	O
The	O	O
case	O	O
of	O	O
BufferedWriter	B-api_mention	B-api_mention
,	O	O
you	O	O
could	O	O
get	O	O
an	O	O
OutOfMemoryError	B-api_mention	B-api_mention
.	O	O
In	O	O
this	O	O
case	O	O
it	O	O
will	O	O
immediately	O	O
trigger	O	O
a	O	O
GC	O	O
,	O	O
which	O	O
as	O	O
we	O	O
have	O	O
seen	O	O
will	O	O
close	O	O
the	O	O
file	O	O
anyway	O	O
.	O	O
Question	O	O
-	O	O
5031614	O	O
,	O	O
answer	O	O
-	O	O
5103360	O	O
We	O	O
usually	O	O
have	O	O
two	O	O
IDs	O	O
in	O	O
our	O	O
entities	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
for	O	O
persistence	O	O
layer	O	O
only	O	O
(	O	O
so	O	O
that	O	O
persistence	O	O
provider	O	O
and	O	O
database	O	O
can	O	O
figure	O	O
out	O	O
relationships	O	O
between	O	O
objects	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Is	O	O
for	O	O
our	O	O
application	O	O
needs	O	O
(	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
particular	O	O
)	O	O
Take	O	O
a	O	O
look	O	O
:	O	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
to	O	O
clarify	O	O
my	O	O
point	O	O
regarding	O	O
calls	O	O
to	O	O
setUuid	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
a	O	O
typical	O	O
scenario	O	O
:	O	O
#	O	O
pre	O	O
When	O	O
I	O	O
run	O	O
my	O	O
tests	O	O
and	O	O
see	O	O
the	O	O
log	O	O
output	O	O
I	O	O
fix	O	O
the	O	O
problem	O	O
:	O	O
#	O	O
pre	O	O
Alternatively	O	O
,	O	O
one	O	O
can	O	O
provide	O	O
a	O	O
separate	O	O
constructor	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
my	O	O
example	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
use	O	O
a	O	O
default	O	O
constructor	O	O
and	O	O
a	O	O
setter	O	O
,	O	O
but	O	O
you	O	O
may	O	O
find	O	O
two	O	O
-	O	O
constructors	O	O
approach	O	O
more	O	O
suitable	O	O
for	O	O
you	O	O
.	O	O
Question	O	O
-	O	O
32693704	O	O
,	O	O
answer	O	O
-	O	O
32852619	O	O
Because	O	O
it	O	O
'	O	O
s	O	O
much	O	O
faster	O	O
!	O	O
I	O	O
ran	O	O
some	O	O
thorough	O	O
benchmarking	O	O
tests	O	O
on	O	O
cut	O	O
down	O	O
versions	O	O
of	O	O
the	O	O
two	O	O
methods	O	O
:	O	O
#	O	O
pre	O	O
operating	O	O
on	O	O
arrays	O	O
of	O	O
various	O	O
sizes	O	O
containing	O	O
random	O	O
values	O	O
.	O	O
Here	O	O
are	O	O
the	O	O
(	O	O
typical	O	O
)	O	O
results	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
are	O	O
the	O	O
results	O	O
when	O	O
operating	O	O
over	O	O
an	O	O
array	O	O
filled	O	O
with	O	O
nulls	O	O
(	O	O
so	O	O
garbage	O	O
collection	O	O
issues	O	O
are	O	O
eradicated	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
numbers	O	O
are	O	O
in	O	O
nanoseconds	O	O
,	O	O
(	O	O
sd	O	O
)	O	O
is	O	O
1	O	O
standard	O	O
deviation	O	O
expressed	O	O
as	O	O
a	O	O
percentage	O	O
of	O	O
the	O	O
result	O	O
(	O	O
fyi	O	O
,	O	O
a	O	O
"	O	O
normally	O	O
distributed	O	O
"	O	O
population	O	O
has	O	O
an	O	O
SD	O	O
of	O	O
68	O	O
)	O	O
,	O	O
vs	O	O
is	O	O
the	O	O
JDK	O	O
8	O	O
timing	O	O
relative	O	O
to	O	O
JDK	O	O
7	O	O
.	O	O
It	O	O
is	O	O
interesting	O	O
that	O	O
not	O	O
only	O	O
is	O	O
it	O	O
significantly	O	O
faster	O	O
,	O	O
but	O	O
the	O	O
deviation	O	O
is	O	O
also	O	O
slightly	O	O
narrower	O	O
,	O	O
which	O	O
means	O	O
that	O	O
the	O	O
JDK	O	O
8	O	O
implementation	O	O
gives	O	O
slightly	O	O
more	O	O
consistent	O	O
performance	O	O
.	O	O
The	O	O
tests	O	O
were	O	O
run	O	O
on	O	O
jdk	O	O
1	O	O
.	O	O
8	O	O
.	O	O
0	O	O
_	O	O
45	O	O
over	O	O
a	O	O
large	O	O
(	O	O
millions	O	O
)	O	O
number	O	O
of	O	O
times	O	O
on	O	O
arrays	O	O
populated	O	O
with	O	O
random	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
.	O	O
To	O	O
remove	O	O
out	O	O
-	O	O
lying	O	O
numbers	O	O
,	O	O
on	O	O
each	O	O
set	O	O
of	O	O
results	O	O
the	O	O
fastest	O	O
and	O	O
slowest	O	O
3	O	O
%	O	O
of	O	O
timings	O	O
were	O	O
discarded	O	O
.	O	O
Garbage	O	O
collection	O	O
was	O	O
requested	O	O
and	O	O
the	O	O
thread	O	O
yielded	O	O
and	O	O
slept	O	O
just	O	O
prior	O	O
to	O	O
running	O	O
each	O	O
invocation	O	O
of	O	O
the	O	O
method	O	O
.	O	O
JVM	O	O
warm	O	O
up	O	O
was	O	O
done	O	O
on	O	O
the	O	O
first	O	O
20	O	O
%	O	O
of	O	O
work	O	O
and	O	O
those	O	O
results	O	O
were	O	O
discarded	O	O
.	O	O
Question	O	O
-	O	O
16324831	O	O
Why	O	O
do	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseDouble	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
null	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
null	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
throw	O	O
different	O	O
exceptions	O	O
?	O	O
Is	O	O
this	O	O
a	O	O
historical	O	O
accident	O	O
or	O	O
intentional	O	O
?	O	O
The	O	O
documentation	O	O
clearly	O	O
states	O	O
two	O	O
types	O	O
of	O	O
exceptions	O	O
for	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseDouble	I-api_mention	I-api_mention
(	I-api_mention	O
.	I-api_mention	O
.	I-api_mention	O
.	I-api_mention	O
)	I-api_mention	O
and	O	O
one	O	O
for	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
it	O	O
seems	O	O
inconsistent	O	O
:	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
throws	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
NumberFormatException	I-api_mention	I-api_mention
:	O	O
null	O	O
However	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseDouble	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
throws	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
NullPointerException	I-api_mention	I-api_mention
Question	O	O
-	O	O
12539365	O	O
,	O	O
answer	O	O
-	O	O
12562433	O	O
This	O	O
is	O	O
great	O	O
question	O	O
!	O	O
I	O	O
think	O	O
the	O	O
root	O	O
cause	O	O
of	O	O
it	O	O
is	O	O
the	O	O
following	O	O
,	O	O
we	O	O
are	O	O
using	O	O
JUnit	O	O
not	O	O
only	O	O
for	O	O
unit	O	O
testing	O	O
.	O	O
So	O	O
the	O	O
question	O	O
should	O	O
be	O	O
splited	O	O
up	O	O
:	O	O
#	O	O
li	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
integration	O	O
(	O	O
or	O	O
any	O	O
other	O	O
higher	O	O
-	O	O
than	O	O
-	O	O
unit	O	O
testing	O	O
)	O	O
testing	O	O
?	O	O
#	O	O
li	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
black	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
?	O	O
#	O	O
li	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
white	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
?	O	O
so	O	O
if	O	O
we	O	O
will	O	O
ignore	O	O
higher	O	O
-	O	O
than	O	O
-	O	O
unit	O	O
testing	O	O
,	O	O
the	O	O
question	O	O
can	O	O
be	O	O
rephrased	O	O
"	O	O
Using	O	O
white	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
great	O	O
couple	O	O
between	O	O
unit	O	O
test	O	O
and	O	O
my	O	O
could	O	O
implementation	O	O
,	O	O
can	O	O
I	O	O
make	O	O
some	O	O
"	O	O
grey	O	O
-	O	O
box	O	O
"	O	O
unit	O	O
-	O	O
testing	O	O
and	O	O
what	O	O
rules	O	O
of	O	O
thumb	O	O
I	O	O
should	O	O
use	O	O
for	O	O
this	O	O
"	O	O
.	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
go	O	O
through	O	O
all	O	O
of	O	O
this	O	O
step	O	O
-	O	O
by	O	O
-	O	O
step	O	O
.	O	O
*	O	O
-	O	O
Should	O	O
I	O	O
use	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
my	O	O
integration	O	O
(	O	O
or	O	O
any	O	O
other	O	O
higher	O	O
-	O	O
than	O	O
-	O	O
unit	O	O
testing	O	O
)	O	O
testing	O	O
?	O	O
*	O	O
I	O	O
think	O	O
the	O	O
answer	O	O
is	O	O
clearly	O	O
no	O	O
,	O	O
moreover	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
use	O	O
mocks	O	O
for	O	O
this	O	O
.	O	O
Your	O	O
test	O	O
should	O	O
be	O	O
as	O	O
close	O	O
to	O	O
real	O	O
application	O	O
as	O	O
possible	O	O
.	O	O
You	O	O
are	O	O
testing	O	O
complete	O	O
use	O	O
case	O	O
,	O	O
not	O	O
isolated	O	O
part	O	O
of	O	O
the	O	O
application	O	O
.	O	O
*	O	O
black	O	O
-	O	O
box	O	O
vs	O	O
white	O	O
-	O	O
box	O	O
unit	O	O
-	O	O
testing	O	O
black	O	O
-	O	O
box	O	O
state	O	O
If	O	O
you	O	O
are	O	O
using	O	O
white	O	O
-	O	O
box	O	O
approach	O	O
what	O	O
is	O	O
you	O	O
really	O	O
doing	O	O
,	O	O
you	O	O
'	O	O
re	O	O
testing	O	O
the	O	O
behaviour	O	O
of	O	O
your	O	O
unit	O	O
.	O	O
In	O	O
this	O	O
approach	O	O
calling	O	O
to	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
essential	O	O
,	O	O
you	O	O
should	O	O
verify	O	O
that	O	O
your	O	O
unit	O	O
behaves	O	O
as	O	O
you	O	O
'	O	O
re	O	O
expecting	O	O
to	O	O
.	O	O
rules	O	O
of	O	O
thumbs	O	O
for	O	O
grey	O	O
-	O	O
box	O	O
-	O	O
testing	O	O
The	O	O
problem	O	O
with	O	O
white	O	O
-	O	O
box	O	O
testing	O	O
is	O	O
it	O	O
creates	O	O
a	O	O
high	O	O
coupling	O	O
.	O	O
One	O	O
possible	O	O
solution	O	O
is	O	O
to	O	O
do	O	O
grey	O	O
-	O	O
box	O	O
-	O	O
testing	O	O
,	O	O
not	O	O
white	O	O
-	O	O
box	O	O
-	O	O
testing	O	O
.	O	O
This	O	O
is	O	O
sort	O	O
of	O	O
combination	O	O
of	O	O
black	O	O
&	O	O
white	O	O
box	O	O
testing	O	O
.	O	O
You	O	O
are	O	O
really	O	O
testing	O	O
the	O	O
behaviour	O	O
of	O	O
your	O	O
unit	O	O
like	O	O
in	O	O
white	O	O
-	O	O
box	O	O
testing	O	O
,	O	O
but	O	O
in	O	O
general	O	O
you	O	O
make	O	O
it	O	O
implementation	O	O
-	O	O
agnostic	O	O
when	O	O
possible	O	O
.	O	O
When	O	O
it	O	O
is	O	O
possible	O	O
,	O	O
you	O	O
will	O	O
just	O	O
make	O	O
a	O	O
check	O	O
like	O	O
in	O	O
black	O	O
-	O	O
box	O	O
case	O	O
,	O	O
just	O	O
asserts	O	O
that	O	O
output	O	O
is	O	O
what	O	O
is	O	O
your	O	O
expected	O	O
to	O	O
be	O	O
.	O	O
So	O	O
,	O	O
the	O	O
essence	O	O
of	O	O
your	O	O
question	O	O
is	O	O
when	O	O
it	O	O
is	O	O
possible	O	O
.	O	O
This	O	O
is	O	O
really	O	O
hard	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
have	O	O
a	O	O
good	O	O
example	O	O
,	O	O
but	O	O
I	O	O
can	O	O
give	O	O
you	O	O
to	O	O
examples	O	O
.	O	O
In	O	O
the	O	O
case	O	O
that	O	O
was	O	O
mentioned	O	O
above	O	O
with	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
vs	O	O
equalsIgnoreCase	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
shouldn	O	O
'	O	O
t	O	O
call	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
just	O	O
assert	O	O
the	O	O
output	O	O
.	O	O
If	O	O
you	O	O
couldn	O	O
'	O	O
t	O	O
do	O	O
it	O	O
,	O	O
break	O	O
down	O	O
your	O	O
code	O	O
to	O	O
the	O	O
smaller	O	O
unit	O	O
,	O	O
until	O	O
you	O	O
can	O	O
do	O	O
it	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
suppose	O	O
you	O	O
have	O	O
some	O	O
@	O	O
Service	O	O
and	O	O
you	O	O
are	O	O
writting	O	O
@	O	O
Web	O	O
-	O	O
Service	O	O
that	O	O
is	O	O
essentially	O	O
wrapper	O	O
upon	O	O
your	O	O
@	O	O
Service	O	O
-	O	O
it	O	O
delegates	O	O
all	O	O
calls	O	O
to	O	O
the	O	O
@	O	O
Service	O	O
(	O	O
and	O	O
making	O	O
some	O	O
extra	O	O
error	O	O
handling	O	O
)	O	O
.	O	O
In	O	O
this	O	O
case	O	O
calling	O	O
to	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
essential	O	O
,	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
duplicate	O	O
all	O	O
of	O	O
your	O	O
checks	O	O
that	O	O
you	O	O
did	O	O
for	O	O
the	O	O
@	O	O
Serive	O	O
,	O	O
verifying	O	O
that	O	O
you	O	O
'	O	O
re	O	O
calling	O	O
to	O	O
@	O	O
Service	O	O
with	O	O
correct	O	O
parammeter	O	O
list	O	O
is	O	O
sufficient	O	O
.	O	O
Question	O	O
-	O	O
23756966	O	O
While	O	O
investigating	O	O
for	O	O
a	O	O
little	O	O
debate	O	O
w	O	O
.	O	O
r	O	O
.	O	O
t	O	O
.	O	O
using	O	O
StringLiteral	O	O
+	O	O
n	O	O
and	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
convert	O	O
an	O	O
integer	O	O
primitive	O	O
to	O	O
a	O	O
string	O	O
I	O	O
wrote	O	O
this	O	O
JMH	O	O
microbenchmark	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
ran	O	O
it	O	O
with	O	O
the	O	O
default	O	O
JMH	O	O
options	O	O
with	O	O
both	O	O
Java	O	O
VMs	O	O
that	O	O
exist	O	O
on	O	O
my	O	O
Linux	O	O
machine	O	O
(	O	O
up	O	O
-	O	O
to	O	O
-	O	O
date	O	O
Mageia	O	O
4	O	O
64	O	O
-	O	O
bit	O	O
,	O	O
Intel	O	O
i7	O	O
-	O	O
3770	O	O
CPU	O	O
,	O	O
32GB	O	O
RAM	O	O
)	O	O
.	O	O
The	O	O
first	O	O
JVM	O	O
was	O	O
the	O	O
one	O	O
supplied	O	O
with	O	O
Oracle	O	O
JDK	O	O
8u5	O	O
64	O	O
-	O	O
bit	O	O
:	O	O
#	O	O
pre	O	O
With	O	O
this	O	O
JVM	O	O
I	O	O
got	O	O
pretty	O	O
much	O	O
what	O	O
I	O	O
expected	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
.	O	O
e	O	O
.	O	O
using	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
class	O	O
is	O	O
slower	O	O
due	O	O
to	O	O
the	O	O
additional	O	O
overhead	O	O
of	O	O
creating	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
object	O	O
and	O	O
appending	O	O
an	O	O
empty	O	O
string	O	O
.	O	O
Using	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
format	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
is	O	O
even	O	O
slower	O	O
,	O	O
by	O	O
an	O	O
order	O	O
of	O	O
magnitude	O	O
or	O	O
so	O	O
.	O	O
The	O	O
distribution	O	O
-	O	O
provided	O	O
compiler	O	O
,	O	O
on	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
is	O	O
based	O	O
on	O	O
OpenJDK	O	O
1	O	O
.	O	O
7	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
results	O	O
here	O	O
were	O	O
interesting	O	O
:	O	O
#	O	O
pre	O	O
Why	O	O
does	O	O
StringBuilder	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
appear	O	O
so	O	O
much	O	O
faster	O	O
with	O	O
this	O	O
JVM	O	O
?	O	O
Looking	O	O
at	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
class	O	O
source	O	O
code	O	O
revealed	O	O
nothing	O	O
particularly	O	O
interesting	O	O
-	O	O
the	O	O
method	O	O
in	O	O
question	O	O
is	O	O
almost	O	O
identical	O	O
to	O	O
Integer	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Interestingly	O	O
enough	O	O
,	O	O
appending	O	O
the	O	O
result	O	O
of	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
the	O	O
stringBuilder2	O	O
microbenchmark	O	O
)	O	O
does	O	O
not	O	O
appear	O	O
to	O	O
be	O	O
faster	O	O
.	O	O
Is	O	O
this	O	O
performance	O	O
discrepancy	O	O
an	O	O
issue	O	O
with	O	O
the	O	O
testing	O	O
harness	O	O
?	O	O
Or	O	O
does	O	O
my	O	O
OpenJDK	O	O
JVM	O	O
contain	O	O
optimizations	O	O
that	O	O
would	O	O
affect	O	O
this	O	O
particular	O	O
code	O	O
(	O	O
anti	O	O
)	O	O
-	O	O
pattern	O	O
?	O	O
EDIT	O	O
:	O	O
For	O	O
a	O	O
more	O	O
straight	O	O
-	O	O
forward	O	O
comparison	O	O
,	O	O
I	O	O
installed	O	O
Oracle	O	O
JDK	O	O
1	O	O
.	O	O
7u55	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
results	O	O
are	O	O
similar	O	O
to	O	O
those	O	O
of	O	O
OpenJDK	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
seems	O	O
that	O	O
this	O	O
is	O	O
a	O	O
more	O	O
general	O	O
Java	O	O
7	O	O
vs	O	O
Java	O	O
8	O	O
issue	O	O
.	O	O
Perhaps	O	O
Java	O	O
7	O	O
had	O	O
more	O	O
aggressive	O	O
string	O	O
optimizations	O	O
?	O	O
EDIT	O	O
2	O	O
:	O	O
For	O	O
completeness	O	O
,	O	O
here	O	O
are	O	O
the	O	O
string	O	O
-	O	O
related	O	O
VM	O	O
options	O	O
for	O	O
both	O	O
of	O	O
these	O	O
JVMs	O	O
:	O	O
For	O	O
Oracle	O	O
JDK	O	O
8u5	O	O
:	O	O
#	O	O
pre	O	O
For	O	O
OpenJDK	O	O
1	O	O
.	O	O
7	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
UseStringCache	B-api_mention	B-api_mention
option	O	O
was	O	O
removed	O	O
in	O	O
Java	O	O
8	O	O
with	O	O
no	O	O
replacement	O	O
,	O	O
so	O	O
I	O	O
doubt	O	O
that	O	O
makes	O	O
any	O	O
difference	O	O
.	O	O
The	O	O
rest	O	O
of	O	O
the	O	O
options	O	O
appear	O	O
to	O	O
have	O	O
the	O	O
same	O	O
settings	O	O
.	O	O
EDIT	O	O
3	O	O
:	O	O
A	O	O
side	O	O
-	O	O
by	O	O
-	O	O
side	O	O
comparison	O	O
of	O	O
the	O	O
source	O	O
code	O	O
of	O	O
the	O	O
AbstractStringBuilder	B-api_mention	B-api_mention
,	O	O
StringBuilder	B-api_mention	B-api_mention
and	O	O
Integer	B-api_mention	B-api_mention
classes	O	O
from	O	O
the	O	O
src	O	O
.	O	O
zip	O	O
file	O	O
of	O	O
reveals	O	O
nothing	O	O
noteworty	O	O
.	O	O
Apart	O	O
from	O	O
a	O	O
whole	O	O
lot	O	O
of	O	O
cosmetic	O	O
and	O	O
documentation	O	O
changes	O	O
,	O	O
Integer	B-api_mention	B-api_mention
now	O	O
has	O	O
some	O	O
support	O	O
for	O	O
unsigned	O	O
integers	O	O
and	O	O
StringBuilder	B-api_mention	B-api_mention
has	O	O
been	O	O
slightly	O	O
refactored	O	O
to	O	O
share	O	O
more	O	O
code	O	O
with	O	O
StringBuffer	B-api_mention	B-api_mention
.	O	O
None	O	O
of	O	O
these	O	O
changes	O	O
seem	O	O
to	O	O
affect	O	O
the	O	O
code	O	O
paths	O	O
used	O	O
by	O	O
StringBuilder	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
although	O	O
I	O	O
may	O	O
have	O	O
missed	O	O
something	O	O
.	O	O
A	O	O
comparison	O	O
of	O	O
the	O	O
assembly	O	O
code	O	O
generated	O	O
for	O	O
IntStr	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
integerToString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
IntStr	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
stringBuilder0	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
far	O	O
more	O	O
interesting	O	O
.	O	O
The	O	O
basic	O	O
layout	O	O
of	O	O
the	O	O
code	O	O
generated	O	O
for	O	O
IntStr	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
integerToString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
similar	O	O
for	O	O
both	O	O
JVMs	O	O
,	O	O
although	O	O
Oracle	O	O
JDK	O	O
8u5	O	O
seemed	O	O
to	O	O
be	O	O
more	O	O
aggressive	O	O
w	O	O
.	O	O
r	O	O
.	O	O
t	O	O
.	O	O
inlining	O	O
some	O	O
calls	O	O
within	O	O
the	O	O
Integer	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
code	O	O
.	O	O
There	O	O
was	O	O
a	O	O
clear	O	O
correspondence	O	O
with	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
,	O	O
even	O	O
for	O	O
someone	O	O
with	O	O
minimal	O	O
assembly	O	O
experience	O	O
.	O	O
The	O	O
assembly	O	O
code	O	O
for	O	O
IntStr	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
stringBuilder0	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
however	O	O
,	O	O
was	O	O
radically	O	O
different	O	O
.	O	O
The	O	O
code	O	O
generated	O	O
by	O	O
Oracle	O	O
JDK	O	O
8u5	O	O
was	O	O
once	O	O
again	O	O
directly	O	O
related	O	O
to	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
-	O	O
I	O	O
could	O	O
easily	O	O
recognise	O	O
the	O	O
same	O	O
layout	O	O
.	O	O
On	O	O
the	O	O
contrary	O	O
,	O	O
the	O	O
code	O	O
generated	O	O
by	O	O
OpenJDK	O	O
7	O	O
was	O	O
almost	O	O
unrecognisable	O	O
to	O	O
the	O	O
untrained	O	O
eye	O	O
(	O	O
like	O	O
mine	O	O
)	O	O
.	O	O
The	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
was	O	O
seemingly	O	O
removed	O	O
,	O	O
as	O	O
was	O	O
the	O	O
creation	O	O
of	O	O
the	O	O
array	O	O
in	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
constructor	O	O
.	O	O
Additionaly	O	O
,	O	O
the	O	O
disassembler	O	O
plugin	O	O
was	O	O
not	O	O
able	O	O
to	O	O
provide	O	O
as	O	O
many	O	O
references	O	O
to	O	O
the	O	O
source	O	O
code	O	O
as	O	O
it	O	O
did	O	O
in	O	O
JDK	O	O
8	O	O
.	O	O
I	O	O
assume	O	O
that	O	O
this	O	O
is	O	O
either	O	O
the	O	O
result	O	O
of	O	O
a	O	O
much	O	O
more	O	O
aggressive	O	O
optimization	O	O
pass	O	O
in	O	O
OpenJDK	O	O
7	O	O
,	O	O
or	O	O
more	O	O
probably	O	O
the	O	O
result	O	O
of	O	O
inserting	O	O
hand	O	O
-	O	O
written	O	O
low	O	O
-	O	O
level	O	O
code	O	O
for	O	O
certain	O	O
StringBuilder	B-api_mention	B-api_mention
operations	O	O
.	O	O
I	O	O
am	O	O
unsure	O	O
why	O	O
this	O	O
optimization	O	O
does	O	O
not	O	O
happen	O	O
in	O	O
my	O	O
JVM	O	O
8	O	O
implementation	O	O
or	O	O
why	O	O
the	O	O
same	O	O
optimizations	O	O
were	O	O
not	O	O
implemented	O	O
for	O	O
Integer	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
JVM	O	O
7	O	O
.	O	O
I	O	O
guess	O	O
someone	O	O
familiar	O	O
with	O	O
the	O	O
related	O	O
parts	O	O
of	O	O
the	O	O
JRE	O	O
source	O	O
code	O	O
would	O	O
have	O	O
to	O	O
answer	O	O
these	O	O
questions	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
16232833	O	O
I	O	O
'	O	O
m	O	O
using	O	O
Spring	O	O
MVC	O	O
for	O	O
a	O	O
simple	O	O
JSON	O	O
API	O	O
,	O	O
with	O	O
@	O	O
ResponseBody	O	O
based	O	O
approach	O	O
like	O	O
the	O	O
following	O	O
.	O	O
(	O	O
I	O	O
already	O	O
have	O	O
a	O	O
service	O	O
layer	O	O
producing	O	O
JSON	O	O
directly	O	O
.	O	O
)	O	O
#	O	O
pre	O	O
Question	O	O
is	O	O
,	O	O
in	O	O
the	O	O
given	O	O
scenario	O	O
,	O	O
what	O	O
is	O	O
the	O	O
simplest	O	O
,	O	O
cleanest	O	O
way	O	O
to	O	O
respond	O	O
with	O	O
a	O	O
HTTP	O	O
400	O	O
error	O	O
?	O	O
I	O	O
did	O	O
come	O	O
across	O	O
approaches	O	O
like	O	O
:	O	O
return	O	O
new	O	O
ResponseEntity	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
.	O	O
.	O	O
but	O	O
I	O	O
can	O	O
'	O	O
t	O	O
use	O	O
it	O	O
here	O	O
since	O	O
my	O	O
method	O	O
'	O	O
s	O	O
return	O	O
type	O	O
is	O	O
String	B-api_mention	B-api_mention
,	O	O
not	O	O
ResponseEntity	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
15655012	O	O
,	O	O
answer	O	O
-	O	O
15656208	O	O
This	O	O
is	O	O
favorite	O	O
interview	O	O
question	O	O
.	O	O
Interviewer	O	O
tries	O	O
to	O	O
find	O	O
out	O	O
here	O	O
,	O	O
how	O	O
much	O	O
you	O	O
understand	O	O
about	O	O
behavior	O	O
of	O	O
objects	O	O
with	O	O
respect	O	O
to	O	O
constructors	O	O
,	O	O
methods	O	O
,	O	O
class	O	O
variables	O	O
(	O	O
static	O	O
variables	O	O
)	O	O
,	O	O
instance	O	O
variables	O	O
.	O	O
#	O	O
pre	O	O
In	O	O
above	O	O
case	O	O
we	O	O
have	O	O
defined	O	O
Test	O	O
constructor	O	O
and	O	O
setFoo	O	B-api_mention
method	O	O
.	O	O
About	O	O
constructor	O	O
:	O	O
Constructor	O	B-api_mention
can	O	O
be	O	O
invoked	O	O
only	O	O
one	O	O
time	O	O
per	O	O
object	O	O
creation	O	O
by	O	O
using	O	O
new	O	O
keyword	O	O
.	O	O
Programmer	O	O
cannot	O	O
invoke	O	O
constructor	O	O
many	O	O
times	O	O
because	O	O
constructor	O	O
are	O	O
designed	O	O
so	O	O
.	O	O
About	O	O
method	O	O
:	O	O
Method	O	O
can	O	O
be	O	O
invoked	O	O
as	O	O
many	O	O
time	O	O
as	O	O
programmer	O	O
wants	O	O
and	O	O
compiler	O	O
knows	O	O
it	O	O
programmer	O	O
may	O	O
invoke	O	O
method	O	O
zero	O	O
or	O	O
multiple	O	O
time	O	O
.	O	O
Scenario	O	O
1	O	O
private	O	O
final	O	O
List	B-api_mention	B-api_mention
foo	O	O
;	O	O
/	O	O
/	O	O
1	O	O
foo	O	O
is	O	O
an	O	O
instance	O	O
variable	O	O
.	O	O
When	O	O
we	O	O
create	O	O
Test	O	O
class	O	O
'	O	O
object	O	O
then	O	O
instance	O	O
variable	O	O
foo	O	O
will	O	O
be	O	O
copied	O	O
inside	O	O
object	O	O
of	O	O
Test	O	O
class	O	O
.	O	O
If	O	O
we	O	O
assign	O	O
foo	O	O
inside	O	O
constructor	O	O
then	O	O
compiler	O	O
know	O	O
that	O	O
Constructor	O	B-api_mention
will	O	O
be	O	O
invoked	O	O
only	O	O
one	O	O
time	O	O
.	O	O
so	O	O
there	O	O
is	O	O
no	O	O
problem	O	O
to	O	O
assign	O	O
it	O	O
inside	O	O
constructor	O	O
.	O	O
If	O	O
we	O	O
assign	O	O
foo	O	O
inside	O	O
method	O	O
then	O	O
compiler	O	O
knows	O	O
that	O	O
method	O	O
may	O	O
be	O	O
invoked	O	O
multiple	O	O
time	O	O
.	O	O
So	O	O
value	O	O
will	O	O
have	O	O
to	O	O
be	O	O
changed	O	O
multiple	O	O
time	O	O
which	O	O
is	O	O
not	O	O
allowed	O	O
for	O	O
final	O	O
variable	O	O
.	O	O
You	O	O
can	O	O
assign	O	O
value	O	O
to	O	O
the	O	O
final	O	O
variable	O	O
only	O	O
one	O	O
time	O	O
.	O	O
So	O	O
compiler	O	O
decides	O	O
constructor	O	O
is	O	O
good	O	O
choice	O	O
!	O	O
Scenario	O	O
2	O	O
private	O	O
static	O	O
final	O	O
List	B-api_mention	B-api_mention
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
foo	O	O
is	O	O
now	O	O
static	O	O
variable	O	O
.	O	O
When	O	O
we	O	O
create	O	O
object	O	O
of	O	O
Test	O	O
class	O	O
then	O	O
foo	O	O
will	O	O
not	O	O
be	O	O
copied	O	O
to	O	O
the	O	O
object	O	O
of	O	O
Test	O	O
class	O	O
because	O	O
foo	O	O
is	O	O
static	O	O
.	O	O
Now	O	O
foo	O	O
is	O	O
not	O	O
the	O	O
property	O	O
of	O	O
each	O	O
object	O	O
.	O	O
This	O	O
is	O	O
the	O	O
property	O	O
of	O	O
Test	O	O
class	O	O
.	O	O
But	O	O
foo	O	O
can	O	O
be	O	O
seen	O	O
by	O	O
many	O	O
objects	O	O
and	O	O
if	O	O
every	O	O
object	O	O
which	O	O
is	O	O
created	O	O
by	O	O
using	O	O
new	O	O
keyword	O	O
which	O	O
ultimately	O	O
invoke	O	O
Test	O	O
constructor	O	O
then	O	O
value	O	O
will	O	O
be	O	O
changed	O	O
at	O	O
the	O	O
time	O	O
of	O	O
multiple	O	O
object	O	O
creation	O	O
(	O	O
Remember	O	O
static	O	O
foo	O	O
is	O	O
not	O	O
copied	O	O
in	O	O
every	O	O
object	O	O
now	O	O
but	O	O
is	O	O
shared	O	O
between	O	O
multiple	O	O
objects	O	O
.	O	O
)	O	O
Scenario	O	O
3	O	O
t	O	O
.	O	O
foo	O	O
.	B-api_mention	O
add	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
Modification	O	O
-	O	O
2	O	O
Above	O	O
Modification	O	O
-	O	O
2	O	O
is	O	O
from	O	O
your	O	O
question	O	O
.	O	O
In	O	O
above	O	O
case	O	O
you	O	O
are	O	O
not	O	O
changing	O	O
first	O	O
referenced	O	O
object	O	O
but	O	O
you	O	O
are	O	O
adding	O	O
contents	O	O
inside	O	O
foo	O	O
which	O	O
is	O	O
allowed	O	O
.	O	O
Compiler	O	O
complains	O	O
if	O	O
you	O	O
try	O	O
to	O	O
assign	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
object	O	O
to	O	O
the	O	O
foo	O	O
reference	O	O
variable	O	O
.	O	O
Rule	O	O
is	O	O
that	O	O
if	O	O
you	O	O
have	O	O
initialized	O	O
object	O	O
to	O	O
final	O	O
reference	O	O
variable	O	O
then	O	O
you	O	O
cannot	O	O
change	O	O
it	O	O
to	O	O
refer	O	O
different	O	O
ArrayList	B-api_mention	B-api_mention
object	O	O
.	O	O
(	O	O
in	O	O
this	O	O
case	O	O
ArrayList	B-api_mention	B-api_mention
)	O	O
final	O	O
class	O	O
cannot	O	O
be	O	O
subclassed	O	O
final	O	O
methods	O	O
cannot	O	O
be	O	O
overridden	O	O
.	O	O
(	O	O
This	O	O
method	O	O
is	O	O
in	O	O
superclass	O	O
)	O	O
final	O	O
methods	O	O
can	O	O
override	O	O
.	O	O
(	O	O
Read	O	O
this	O	O
in	O	O
grammatical	O	O
way	O	O
.	O	O
This	O	O
method	O	O
is	O	O
in	O	O
subclass	O	O
)	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
15446006	O	O
I	O	O
actually	O	O
wrote	O	O
a	O	O
blog	O	O
post	O	O
on	O	O
the	O	O
topic	O	O
2	O	O
months	O	O
ago	O	O
.	O	O
The	O	O
article	O	O
is	O	O
for	O	O
C	O	O
#	O	O
'	O	O
s	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
but	O	O
Java	O	O
'	O	O
s	O	O
ArrayList	B-api_mention	B-api_mention
has	O	O
a	O	O
very	O	O
similar	O	O
implementation	O	O
.	O	O
Since	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
implemented	O	O
using	O	O
a	O	O
dynamic	O	O
array	O	O
,	O	O
it	O	O
increases	O	O
in	O	O
size	O	O
on	O	O
demand	O	O
.	O	O
So	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
capacity	O	O
constructor	O	O
is	O	O
for	O	O
optimisation	O	O
purposes	O	O
.	O	O
When	O	O
one	O	O
of	O	O
these	O	O
resizings	O	O
operation	O	O
occurs	O	O
,	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
copies	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
array	O	O
into	O	O
a	O	O
new	O	O
array	O	O
that	O	O
is	O	O
twice	O	O
the	O	O
capacity	O	O
of	O	O
the	O	O
old	O	O
one	O	O
.	O	O
This	O	O
operation	O	O
runs	O	O
in	O	O
O	O	O
(	O	O
n	O	O
)	O	O
time	O	O
.	O	O
Example	O	O
Here	O	O
is	O	O
an	O	O
example	O	O
of	O	O
how	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
would	O	O
increase	O	O
in	O	O
size	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
the	O	O
list	O	O
starts	O	O
with	O	O
a	O	O
capacity	O	O
of	O	O
10	O	O
,	O	O
when	O	O
the	O	O
11th	O	O
item	O	O
is	O	O
added	O	O
it	O	O
is	O	O
increase	O	O
by	O	O
50	O	O
%	O	O
+	O	O
1	O	O
to	O	O
16	O	O
.	O	O
On	O	O
the	O	O
17th	O	O
item	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
increased	O	O
again	O	O
to	O	O
25	O	O
and	O	O
so	O	O
on	O	O
.	O	O
Now	O	O
consider	O	O
the	O	O
example	O	O
where	O	O
we	O	O
'	O	O
re	O	O
creating	O	O
a	O	O
list	O	O
where	O	O
the	O	O
desired	O	O
capacity	O	O
is	O	O
already	O	O
known	O	O
as	O	O
1000000	O	O
.	O	O
Creating	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
without	O	O
the	O	O
size	O	O
constructor	O	O
will	O	O
call	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	O
add	I-api_mention	O
1000000	O	O
times	O	O
which	O	O
takes	O	O
O	O	O
(	O	O
1	O	O
)	O	O
normally	O	O
or	O	O
O	O	O
(	O	O
n	O	O
)	O	O
on	O	O
resize	O	O
.	O	O
#	O	O
blockquote	O	O
Compare	O	O
this	O	O
using	O	O
the	O	O
constructor	O	O
and	O	O
then	O	O
calling	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
add	I-api_mention	I-api_mention
which	O	O
is	O	O
guaranteed	O	O
to	O	O
run	O	O
in	O	O
O	O	O
(	O	O
1	O	O
)	O	O
.	O	O
#	O	O
blockquote	O	O
Java	O	O
vs	O	O
C	O	O
#	O	O
Java	O	O
is	O	O
as	O	O
above	O	O
,	O	O
starting	O	O
at	O	O
10	O	O
and	O	O
increasing	O	O
each	O	O
resize	O	O
at	O	O
50	O	O
%	O	O
+	O	O
1	O	O
.	O	O
C	O	O
#	O	O
starts	O	O
at	O	O
4	O	O
and	O	O
increases	O	O
much	O	O
more	O	O
aggressively	O	O
,	O	O
doubling	O	O
at	O	O
each	O	O
resize	O	O
.	O	O
The	O	O
1000000	O	O
adds	O	O
example	O	O
from	O	O
above	O	O
for	O	O
C	O	O
#	O	O
uses	O	O
3097084	O	O
operations	O	O
.	O	O
References	O	O
#	O	O
li	O	O
My	O	O
blog	O	O
post	O	O
on	O	O
C	O	O
#	O	O
'	O	O
s	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
#	O	O
li	O	O
Java	O	O
'	O	O
s	O	O
ArrayList	B-api_mention	B-api_mention
source	O	O
code	O	O
Question	O	O
-	O	O
6684665	O	O
,	O	O
answer	O	O
-	O	O
12685471	O	O
The	O	O
kind	O	O
of	O	O
output	O	O
you	O	O
are	O	O
seeing	O	O
from	O	O
your	O	O
byte	O	O
array	O	O
(	O	O
[	O	O
B	O	O
@	O	O
405217f8	O	O
)	O	O
is	O	O
also	O	O
an	O	O
output	O	O
for	O	O
a	O	O
zero	O	O
length	O	O
byte	O	O
array	O	O
(	O	O
ie	O	O
new	O	O
byte	O	O
[	O	O
0	O	O
]	O	O
)	O	O
.	O	O
It	O	O
looks	O	O
like	O	O
this	O	O
string	O	O
is	O	O
a	O	O
reference	O	O
to	O	O
the	O	O
array	O	O
rather	O	O
than	O	O
a	O	O
description	O	O
of	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
array	O	O
like	O	O
we	O	O
might	O	O
expect	O	O
from	O	O
a	O	O
regular	O	O
collection	O	O
'	O	O
s	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
As	O	O
with	O	O
other	O	O
respondents	O	O
,	O	O
I	O	O
would	O	O
point	O	O
you	O	O
to	O	O
the	O	O
String	B-api_mention	B-api_mention
constructors	O	O
that	O	O
accept	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
parameter	O	O
to	O	O
construct	O	O
a	O	O
string	O	O
from	O	O
the	O	O
contents	O	O
of	O	O
a	O	O
byte	O	O
array	O	O
.	O	O
You	O	O
should	O	O
be	O	O
able	O	O
to	O	O
read	O	O
raw	O	O
bytes	O	O
from	O	O
a	O	O
socket	O	O
'	O	O
s	O	O
InputStream	B-api_mention	B-api_mention
if	O	O
you	O	O
want	O	O
to	O	O
obtain	O	O
bytes	O	O
from	O	O
a	O	O
TCP	O	O
connection	O	O
.	O	O
If	O	O
you	O	O
have	O	O
already	O	O
read	O	O
those	O	O
bytes	O	O
as	O	O
a	O	O
String	B-api_mention	B-api_mention
(	O	O
using	O	O
an	O	O
InputStreamReader	B-api_mention	B-api_mention
)	O	O
,	O	O
then	O	O
,	O	O
the	O	O
string	O	O
can	O	O
be	O	O
converted	O	O
to	O	O
bytes	O	O
using	O	O
the	O	O
getBytes	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
.	O	O
Be	O	O
sure	O	O
to	O	O
pass	O	O
in	O	O
your	O	O
desired	O	O
character	O	O
set	O	O
to	O	O
both	O	O
the	O	O
String	B-api_mention	B-api_mention
constructor	O	O
and	O	O
getBytes	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
functions	O	O
,	O	O
and	O	O
this	O	O
will	O	O
only	O	O
work	O	O
if	O	O
the	O	O
byte	O	O
data	O	O
can	O	O
be	O	O
converted	O	O
to	O	O
characters	O	O
by	O	O
the	O	O
InputStreamReader	B-api_mention	B-api_mention
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
deal	O	O
with	O	O
raw	O	O
bytes	O	O
you	O	O
should	O	O
really	O	O
avoid	O	O
using	O	O
this	O	O
stream	O	O
reader	O	O
layer	O	O
.	O	O
Question	O	O
-	O	O
29333689	O	O
The	O	O
following	O	O
is	O	O
taken	O	O
from	O	O
a	O	O
job	O	O
interview	O	O
:	O	O
#	O	O
blockquote	O	O
I	O	O
thought	O	O
about	O	O
using	O	O
an	O	O
HashSet	B-api_mention	B-api_mention
,	O	O
but	O	O
it	O	O
might	O	O
complicate	O	O
everything	O	O
.	O	O
.	O	O
.	O	O
Any	O	O
ideas	O	O
of	O	O
a	O	O
simple	O	O
solution	O	O
?	O	O
Question	O	O
-	O	O
6667243	O	O
,	O	O
answer	O	O
-	O	O
6667307	O	O
mode1	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
It	O	O
doesn	O	O
'	O	O
t	O	O
get	O	O
better	O	O
than	O	O
that	O	O
,	O	O
I	O	O
'	O	O
m	O	O
afraid	O	O
Question	O	O
-	O	O
7488643	O	O
,	O	O
answer	O	O
-	O	O
7488683	O	O
You	O	O
can	O	O
first	O	O
split	O	O
them	O	O
using	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
then	O	O
convert	O	O
the	O	O
returned	O	O
String	B-api_mention	B-api_mention
array	O	O
to	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
using	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
34405789	O	O
Set	B-api_mention	O
and	O	O
Map	B-api_mention	B-api_mention
are	O	O
non	O	O
-	O	O
linear	O	O
data	O	O
structure	O	O
.	O	O
List	B-api_mention	B-api_mention
is	O	O
linear	O	O
data	O	O
structure	O	O
.	O	O
The	O	O
tree	O	O
data	O	O
structure	O	O
SortedSet	B-api_mention	B-api_mention
and	O	O
SortedMap	B-api_mention	B-api_mention
interfaces	O	O
implements	O	O
TreeSet	B-api_mention	B-api_mention
and	O	O
TreeMap	B-api_mention	B-api_mention
respectively	O	O
using	O	O
used	O	O
Red	O	O
-	O	O
Black	O	O
tree	O	O
implementation	O	O
algorithm	O	O
.	O	O
So	O	O
it	O	O
ensure	O	O
that	O	O
there	O	O
are	O	O
no	O	O
duplicated	O	O
items	O	O
(	O	O
or	O	O
keys	O	O
in	O	O
case	O	O
of	O	O
Map	O	B-api_mention
)	O	O
.	O	O
#	O	O
li	O	O
Tree	O	O
by	O	O
definition	O	O
cannot	O	O
contain	O	O
duplicates	O	O
.	O	O
#	O	O
li	O	O
In	O	O
List	B-api_mention	B-api_mention
we	O	O
can	O	O
have	O	O
duplicates	O	O
,	O	O
so	O	O
there	O	O
is	O	O
no	O	O
TreeList	B-api_mention	O
.	O	O
So	O	O
if	O	O
we	O	O
want	O	O
to	O	O
sort	O	O
the	O	O
list	O	O
we	O	O
have	O	O
to	O	O
use	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
7353205	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
more	O	O
portable	O	O
way	O	O
.	O	B-api_mention
exec	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
actually	O	O
calls	O	O
out	O	O
to	O	O
the	O	O
operating	O	O
system	O	O
to	O	O
execute	O	O
the	O	O
hostname	O	O
command	O	O
.	O	O
Here	O	O
are	O	O
a	O	O
couple	O	O
other	O	O
related	O	O
answers	O	O
on	O	O
SO	O	O
:	O	O
#	O	O
li	O	O
Java	O	O
current	O	O
machine	O	O
name	O	O
and	O	O
logged	O	O
in	O	O
user	O	O
?	O	O
#	O	O
li	O	O
Get	O	O
DNS	O	O
name	O	O
of	O	O
local	O	O
machine	O	O
as	O	O
seen	O	O
by	O	O
a	O	O
remote	O	O
machine	O	O
EDIT	O	O
:	O	O
You	O	O
should	O	O
take	O	O
a	O	O
look	O	O
at	O	O
A	O	O
.	O	O
H	O	O
.	O	O
'	O	O
s	O	O
answer	O	O
or	O	O
Arnout	O	O
Engelen	O	O
'	O	O
s	O	O
answer	O	O
for	O	O
details	O	O
on	O	O
why	O	O
this	O	O
might	O	O
not	O	O
work	O	O
as	O	O
expected	O	O
,	O	O
depending	O	O
on	O	O
your	O	O
situation	O	O
.	O	O
As	O	O
an	O	O
answer	O	O
for	O	O
this	O	O
person	O	O
who	O	O
specifically	O	O
requested	O	O
portable	O	O
,	O	O
I	O	O
still	O	O
think	O	O
getHostName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
fine	O	O
,	O	O
but	O	O
they	O	O
bring	O	O
up	O	O
some	O	O
good	O	O
points	O	O
that	O	O
should	O	O
be	O	O
considered	O	O
.	O	O
Question	O	O
-	O	O
5785745	O	O
,	O	O
answer	O	O
-	O	O
34845194	O	O
You	O	O
can	O	O
also	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOfRange	I-api_mention	I-api_mention
.	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
method	O	O
is	O	O
similar	O	O
to	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
more	O	O
flexible	O	O
.	O	O
Both	O	O
of	O	O
them	O	O
use	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
arraycopy	I-api_mention	I-api_mention
under	O	O
the	O	O
hood	O	O
.	O	O
See	O	O
:	O	O
#	O	O
li	O	O
#	O	O
a	O	O
#	O	O
li	O	O
#	O	O
a	O	O
#	O	O
li	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
14846920	O	O
What	O	O
are	O	O
some	O	O
of	O	O
the	O	O
situations	O	O
where	O	O
I	O	O
can	O	O
use	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
emptyMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
The	O	O
Documentation	O	O
says	O	O
I	O	O
can	O	O
use	O	O
this	O	O
method	O	O
if	O	O
I	O	O
want	O	O
my	O	O
collection	O	O
to	O	O
be	O	O
immutable	O	O
.	O	O
Why	O	O
would	O	O
I	O	O
want	O	O
an	O	O
immutable	O	O
empty	O	O
collection	O	O
?	O	O
What	O	O
is	O	O
the	O	O
point	O	O
?	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846943	O	O
It	O	O
is	O	O
,	O	O
in	O	O
my	O	O
personal	O	O
experience	O	O
admittedly	O	O
,	O	O
very	O	O
useful	O	O
in	O	O
cases	O	O
where	O	O
an	O	O
API	O	O
requires	O	O
a	O	O
collection	O	O
of	O	O
parameters	O	O
,	O	O
but	O	O
you	O	O
have	O	O
nothing	O	O
to	O	O
provide	O	O
.	O	O
For	O	O
example	O	O
you	O	O
may	O	O
have	O	O
an	O	O
API	O	O
that	O	O
looks	O	O
something	O	O
like	O	O
this	O	O
,	O	O
and	O	O
does	O	O
not	O	O
allow	O	O
null	O	O
references	O	O
:	O	O
public	O	O
ResultSet	B-api_mention	B-api_mention
executeQuery	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
;	O	O
If	O	O
you	O	O
have	O	O
a	O	O
query	O	O
that	O	O
doesn	O	O
'	O	O
t	O	O
take	O	O
any	O	O
parameters	O	O
,	O	O
it	O	O
'	O	O
s	O	O
certainly	O	O
a	O	O
bit	O	O
wasteful	O	O
to	O	O
create	O	O
a	O	O
HashMap	B-api_mention	B-api_mention
,	O	O
which	O	O
involves	O	O
allocating	O	O
an	O	O
array	O	O
,	O	O
when	O	O
you	O	O
could	O	O
just	O	O
pass	O	O
in	O	O
the	O	O
'	O	O
Empty	O	O
Map	O	O
'	O	O
which	O	O
is	O	O
effectively	O	O
a	O	O
constant	O	O
,	O	O
the	O	O
way	O	O
it	O	O
'	O	O
s	O	O
implemented	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
14376807	O	O
,	O	O
answer	O	O
-	O	O
22092971	O	O
For	O	O
those	O	O
looking	O	O
for	O	O
a	O	O
general	O	O
strategy	O	O
for	O	O
reading	O	O
and	O	O
writing	O	O
a	O	O
string	O	O
to	O	O
file	O	O
:	O	O
First	O	O
,	O	O
get	O	O
a	O	O
file	O	O
object	O	O
You	O	O
'	O	O
ll	O	O
need	O	O
the	O	O
storage	O	O
path	O	O
.	O	O
For	O	O
the	O	O
internal	O	O
storage	O	O
,	O	O
use	O	O
:	O	O
File	B-api_mention	B-api_mention
path	O	O
=	O	O
context	O	O
.	B-api_mention	B-api_mention
getFilesDir	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
the	O	O
external	O	O
storage	O	O
(	O	O
SD	O	O
card	O	O
)	O	O
,	O	O
use	O	O
:	O	O
File	B-api_mention	B-api_mention
path	O	O
=	O	O
context	O	O
.	B-api_mention	B-api_mention
getExternalFilesDir	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Then	O	O
create	O	O
your	O	O
file	O	O
object	O	O
:	O	O
File	B-api_mention	B-api_mention
file	O	O
=	O	O
new	O	O
File	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Write	O	O
a	O	O
string	O	O
to	O	O
the	O	O
file	O	O
#	O	O
pre	O	O
Or	O	O
with	O	O
Google	O	O
Guava	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
write	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Read	O	O
the	O	O
file	O	O
to	O	O
a	O	O
string	O	O
#	O	O
pre	O	O
Or	O	O
if	O	O
you	O	O
are	O	O
using	O	O
Google	O	O
Guava	O	O
String	B-api_mention	B-api_mention
contents	O	O
=	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
completeness	O	O
I	O	O
'	O	O
ll	O	O
mention	O	O
String	B-api_mention	B-api_mention
contents	O	O
=	O	O
new	O	O
Scanner	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
useDelimiter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	O
next	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
requires	O	O
no	O	O
libraries	O	O
,	O	O
but	O	O
benchmarks	O	O
50	O	O
%	O	O
-	O	O
400	O	O
%	O	O
slower	O	O
than	O	O
the	O	O
other	O	O
options	O	O
(	O	O
in	O	O
various	O	O
tests	O	O
on	O	O
my	O	O
Nexus	O	O
5	O	O
)	O	O
.	O	O
Notes	O	O
For	O	O
each	O	O
of	O	O
these	O	O
strategies	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
be	O	O
asked	O	O
to	O	O
catch	O	O
an	O	O
IOException	B-api_mention	B-api_mention
.	O	O
The	O	O
default	O	O
character	O	O
encoding	O	O
on	O	O
Android	O	O
is	O	O
UTF	O	O
-	O	O
8	O	O
.	O	O
If	O	O
you	O	O
are	O	O
using	O	O
external	O	O
storage	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
need	O	O
to	O	O
add	O	O
to	O	O
your	O	O
manifest	O	O
either	O	O
:	O	O
<	O	O
uses	O	O
-	O	O
permission	O	O
android	O	O
:	O	O
name	O	O
=	O	O
StringLiteral	O	O
/	O	O
>	O	O
or	O	O
<	O	O
uses	O	O
-	O	O
permission	O	O
android	O	O
:	O	O
name	O	O
=	O	O
StringLiteral	O	O
/	O	O
>	O	O
Write	O	O
permission	O	O
implies	O	O
read	O	O
permission	O	O
,	O	O
so	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
both	O	O
.	O	O
Question	O	O
-	O	O
25168062	O	O
Why	O	O
is	O	O
i	O	O
+	O	O
+	O	O
not	O	O
atomic	O	O
in	O	O
Java	O	O
?	O	O
To	O	O
get	O	O
a	O	O
bit	O	O
deeper	O	O
in	O	O
Java	O	O
I	O	O
tried	O	O
to	O	O
count	O	O
how	O	O
often	O	O
the	O	O
loop	O	O
in	O	O
threads	O	O
are	O	O
executed	O	O
.	O	O
So	O	O
I	O	O
used	O	O
a	O	O
private	O	O
static	O	O
int	O	O
total	O	O
=	O	O
0	O	O
;	O	O
in	O	O
the	O	O
main	O	O
class	O	O
.	O	O
I	O	O
have	O	O
two	O	O
threads	O	O
.	O	O
#	O	O
li	O	O
Thread	O	O
1	O	O
:	O	O
Prints	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
Thread	O	O
2	O	O
:	O	O
Prints	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
And	O	O
I	O	O
count	O	O
the	O	O
lines	O	O
printed	O	O
by	O	O
thread	O	O
1	O	O
and	O	O
thread	O	O
2	O	O
.	O	O
But	O	O
the	O	O
lines	O	O
of	O	O
thread	O	O
1	O	O
+	O	O
lines	O	O
of	O	O
thread	O	O
2	O	O
don	O	O
'	O	O
t	O	O
match	O	O
the	O	O
total	O	O
number	O	O
of	O	O
lines	O	O
printed	O	O
out	O	O
.	O	O
Here	O	O
is	O	O
my	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
10827872	O	O
,	O	O
answer	O	O
-	O	O
22578124	O	O
Old	O	O
thread	O	O
I	O	O
know	O	O
but	O	O
I	O	O
am	O	O
sort	O	O
of	O	O
new	O	O
to	O	O
Java	O	O
and	O	O
discover	O	O
one	O	O
of	O	O
it	O	O
'	O	O
s	O	O
strange	O	O
things	O	O
.	O	O
I	O	O
have	O	O
used	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
get	O	O
unpredictable	O	O
results	O	O
.	O	O
Something	O	O
like	O	O
this	O	O
mess	O	O
up	O	O
the	O	O
string	O	O
:	O	O
sUrl	O	O
=	O	O
sUrl	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
So	O	O
I	O	O
designed	O	O
this	O	O
function	O	O
to	O	O
get	O	O
around	O	O
the	O	O
weird	O	O
problem	O	O
:	O	O
#	O	O
pre	O	O
Which	O	O
make	O	O
you	O	O
able	O	O
to	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
14534798	O	O
It	O	O
should	O	O
be	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
I	O	O
recommend	O	O
you	O	O
to	O	O
do	O	O
as	O	O
below	O	O
,	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getProperty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
system	O	O
-	O	O
dependent	O	O
newline	O	O
in	O	O
java	O	O
.	O	O
Also	O	O
from	O	O
Java	O	O
7	O	O
there	O	O
'	O	O
s	O	O
a	O	O
method	O	O
that	O	O
returns	O	O
the	O	O
value	O	O
directly	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lineSeparator	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
32623834	O	O
,	O	O
answer	O	O
-	O	O
32624143	O	O
You	O	O
just	O	O
changed	O	O
the	O	O
String	B-api_mention	B-api_mention
of	O	O
String	B-api_mention	B-api_mention
constant	O	O
pool	O	O
Mario	O	O
to	O	O
Luigi	O	O
which	O	O
was	O	O
referenced	O	O
by	O	O
multiple	O	O
String	B-api_mention	B-api_mention
s	O	O
,	O	O
so	O	O
every	O	O
referencing	O	O
literal	O	O
Mario	O	O
is	O	O
now	O	O
Luigi	O	O
.	O	O
Field	B-api_mention	O
stringValue	O	O
=	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
class	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getDeclaredField	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
have	O	O
fetched	O	O
the	O	O
char	O	O
[	O	O
]	O	O
named	O	O
value	O	O
field	O	O
from	O	O
class	O	O
String	B-api_mention	B-api_mention
stringValue	O	O
.	B-api_mention	B-api_mention
setAccessible	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Make	O	O
it	O	O
accessible	O	O
.	O	O
stringValue	O	O
.	B-api_mention	B-api_mention
set	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
changed	O	O
original	O	O
String	B-api_mention	B-api_mention
field	O	O
to	O	O
Luigi	O	O
.	O	O
But	O	O
original	O	O
is	O	O
Mario	O	O
the	O	O
String	B-api_mention	B-api_mention
literal	O	O
and	O	O
literal	O	O
belongs	O	O
to	O	O
the	O	O
String	B-api_mention	B-api_mention
pool	O	O
and	O	O
all	O	O
are	O	O
interned	O	O
.	O	O
Which	O	O
means	O	O
all	O	O
the	O	O
literals	O	O
which	O	O
has	O	O
same	O	O
content	O	O
refers	O	O
to	O	O
the	O	O
same	O	O
memory	O	O
address	O	O
.	O	O
#	O	O
pre	O	O
Basically	O	O
you	O	O
have	O	O
changed	O	O
the	O	O
Mario	O	O
of	O	O
String	B-api_mention	B-api_mention
pool	O	O
which	O	O
got	O	O
reflected	O	O
in	O	O
all	O	O
the	O	O
referencing	O	O
fields	O	O
.	O	O
If	O	O
you	O	O
create	O	O
String	B-api_mention	B-api_mention
Object	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
instead	O	O
of	O	O
literal	O	O
you	O	O
will	O	O
not	O	O
face	O	O
this	O	O
behavior	O	O
because	O	O
than	O	O
you	O	O
will	O	O
have	O	O
two	O	O
different	O	O
Mario	O	O
s	O	O
.	O	O
Question	O	O
-	O	O
10066590	O	O
With	O	O
Mockito	B-api_mention	B-api_mention
,	O	O
I	O	O
want	O	O
to	O	O
verify	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
a	O	O
method	O	O
call	O	O
with	O	O
byte	O	O
[	O	O
]	O	O
in	O	O
its	O	O
argument	O	O
list	O	O
,	O	O
but	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
find	O	O
how	O	O
to	O	O
write	O	O
this	O	O
.	O	B-api_mention
myMethod	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
I	O	O
just	O	O
want	O	O
something	O	O
like	O	O
anyByteArray	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
how	O	O
to	O	O
do	O	O
that	O	O
with	O	O
Mockito	B-api_mention	B-api_mention
?	O	O
Question	O	O
-	O	O
30384955	O	O
,	O	O
answer	O	O
-	O	O
30385343	O	O
This	O	O
happens	O	O
because	O	O
of	O	O
the	O	O
way	O	O
capture	O	O
conversion	O	O
works	O	O
:	O	O
#	O	O
blockquote	O	O
Note	O	O
the	O	O
end	O	O
bit	O	O
.	O	O
So	O	O
,	O	O
what	O	O
this	O	O
means	O	O
is	O	O
that	O	O
,	O	O
given	O	O
a	O	O
type	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Only	O	O
"	O	O
outside	O	O
"	O	O
wildcards	O	O
are	O	O
captured	O	O
.	O	O
The	O	O
Map	O	B-api_mention
key	O	O
wildcard	O	O
is	O	O
captured	O	O
,	O	O
but	O	O
the	O	O
List	O	B-api_mention
element	O	O
wildcard	O	O
is	O	O
not	O	O
.	O	O
This	O	O
is	O	O
why	O	O
,	O	O
for	O	O
example	O	O
,	O	O
we	O	O
can	O	O
add	O	O
to	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
but	O	O
not	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
The	O	O
placement	O	O
of	O	O
the	O	O
wildcard	O	O
is	O	O
what	O	O
matters	O	O
.	O	O
Carrying	O	O
this	O	O
over	O	O
to	O	O
TbinList	O	O
,	O	O
if	O	O
we	O	O
have	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
the	O	O
wildcard	O	O
is	O	O
in	O	O
a	O	O
place	O	O
where	O	O
it	O	O
does	O	O
not	O	O
get	O	O
captured	O	O
,	O	O
but	O	O
if	O	O
we	O	O
have	O	O
a	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
,	O	O
the	O	O
wildcard	O	O
is	O	O
in	O	O
a	O	O
place	O	O
where	O	O
it	O	O
gets	O	O
captured	O	O
.	O	O
As	O	O
I	O	O
alluded	O	O
to	O	O
in	O	O
the	O	O
comments	O	O
,	O	O
one	O	O
very	O	O
interesting	O	O
test	O	O
is	O	O
this	O	O
:	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
test3	O	O
=	O	O
new	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
(	O	O
args	O	O
)	O	O
;	O	O
We	O	O
get	O	O
this	O	O
error	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
there	O	O
'	O	O
s	O	O
no	O	O
way	O	O
to	O	O
make	O	O
it	O	O
work	O	O
as	O	O
-	O	O
is	O	O
.	O	O
One	O	O
of	O	O
the	O	O
class	O	O
declarations	O	O
needs	O	O
to	O	O
be	O	O
changed	O	O
.	O	O
Additionally	O	O
,	O	O
think	O	O
about	O	O
it	O	O
this	O	O
way	O	O
.	O	O
Suppose	O	O
we	O	O
had	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
since	O	O
a	O	O
wildcard	O	O
allows	O	O
subtyping	O	O
,	O	O
we	O	O
can	O	O
do	O	O
this	O	O
:	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
test4	O	O
=	O	O
new	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
(	O	O
args	O	O
)	O	O
;	O	O
Should	O	O
we	O	O
be	O	O
able	O	O
to	O	O
add	O	O
a	O	O
Tbin	O	O
<	O	O
T	O	O
>	O	O
to	O	O
test4	O	O
?	O	O
No	O	O
,	O	O
this	O	O
would	O	O
be	O	O
heap	O	O
pollution	O	O
.	O	O
We	O	O
might	O	O
end	O	O
up	O	O
with	O	O
Derived2	O	O
s	O	O
floating	O	O
around	O	O
in	O	O
a	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
.	O	O
Question	O	O
-	O	O
32632364	O	O
,	O	O
answer	O	O
-	O	O
32633199	O	O
It	O	O
shouldn	O	O
'	O	O
t	O	O
have	O	O
compiled	O	O
,	O	O
according	O	O
to	O	O
JLS	O	O
7	O	O
.	O	O
int	O	O
can	O	O
be	O	O
compared	O	O
to	O	O
boxed	O	O
numeric	O	O
types	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
Byte	B-api_mention	O
,	O	O
Short	B-api_mention	B-api_mention
,	O	O
Character	B-api_mention	B-api_mention
,	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Long	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
.	O	O
But	O	O
that	O	O
is	O	O
all	O	O
.	O	O
And	O	O
if	O	O
comparison	O	O
is	O	O
between	O	O
int	O	O
and	O	O
say	O	O
Float	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
will	O	O
be	O	O
unboxed	O	O
first	O	O
,	O	O
so	O	O
that	O	O
the	O	O
comparison	O	O
is	O	O
between	O	O
float	O	O
and	O	O
int	O	O
.	O	O
It	O	O
'	O	O
ll	O	O
make	O	O
no	O	O
sense	O	O
to	O	O
do	O	O
the	O	O
other	O	O
way	O	O
around	O	O
-	O	O
box	O	O
int	O	O
then	O	O
examine	O	O
the	O	O
identity	O	O
of	O	O
the	O	O
Integer	B-api_mention	B-api_mention
(	O	O
with	O	O
a	O	O
Float	B-api_mention	B-api_mention
no	O	O
less	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32175224	O	O
Since	O	O
equals	B-api_mention	O
(	I-api_mention	O
.	I-api_mention	O
.	I-api_mention	O
.	I-api_mention	O
)	I-api_mention	O
is	O	O
not	O	O
a	O	O
final	O	O
method	O	O
of	O	O
Object	B-api_mention	B-api_mention
,	O	O
yes	O	O
,	O	O
it	O	O
is	O	O
very	O	O
well	O	O
be	O	O
possible	O	O
in	O	O
a	O	O
different	O	O
situation	O	O
.	O	O
#	O	O
pre	O	O
This	O	O
question	O	O
,	O	O
however	O	O
,	O	O
specifically	O	O
says	O	O
that	O	O
these	O	O
are	O	O
primitive	O	O
wrappers	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Boolean	B-api_mention	O
,	O	O
etc	O	O
.	O	O
)	O	O
and	O	O
since	O	O
these	O	O
classes	O	O
are	O	O
final	O	O
,	O	O
you	O	O
cannot	O	O
extend	O	O
them	O	O
,	O	O
thus	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
always	O	O
return	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
6841333	O	O
,	O	O
answer	O	O
-	O	O
20906129	O	O
As	O	O
explained	O	O
by	O	O
others	O	O
,	O	O
there	O	O
'	O	O
s	O	O
a	O	O
time	O	O
discontinuity	O	O
there	O	O
.	O	O
There	O	O
are	O	O
two	O	O
possible	O	O
timezone	O	O
offsets	O	O
for	O	O
1927	O	O
-	O	O
12	O	O
-	O	O
31	O	O
23	O	O
:	O	O
54	O	O
:	O	O
08	O	O
at	O	O
Asia	O	O
/	O	O
Shanghai	O	O
,	O	O
but	O	O
only	O	O
one	O	O
offset	O	O
for	O	O
1927	O	O
-	O	O
12	O	O
-	O	O
31	O	O
23	O	O
:	O	O
54	O	O
:	O	O
07	O	O
.	O	O
So	O	O
,	O	O
depending	O	O
on	O	O
which	O	O
offset	O	O
is	O	O
used	O	O
,	O	O
there	O	O
'	O	O
s	O	O
either	O	O
a	O	O
one	O	O
second	O	O
difference	O	O
or	O	O
a	O	O
5	O	O
minutes	O	O
and	O	O
53	O	O
seconds	O	O
difference	O	O
.	O	O
This	O	O
slight	O	O
shift	O	O
of	O	O
offsets	O	O
,	O	O
instead	O	O
of	O	O
the	O	O
usual	O	O
one	O	O
-	O	O
hour	O	O
daylight	O	O
savings	O	O
(	O	O
summer	O	O
time	O	O
)	O	O
we	O	O
are	O	O
used	O	O
to	O	O
,	O	O
obscures	O	O
the	O	O
problem	O	O
a	O	O
bit	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
2013a	O	O
update	O	O
of	O	O
the	O	O
timezone	O	O
database	O	O
moved	O	O
this	O	O
discontinuity	O	O
a	O	O
few	O	O
seconds	O	O
earlier	O	O
,	O	O
but	O	O
the	O	O
effect	O	O
would	O	O
still	O	O
be	O	O
observable	O	O
.	O	O
The	O	O
new	O	O
java	O	O
.	O	O
time	O	O
package	O	O
on	O	O
Java	O	O
8	O	O
let	O	O
use	O	O
see	O	O
this	O	O
more	O	O
clearly	O	O
,	O	O
and	O	O
provide	O	O
tools	O	O
to	O	O
handle	O	O
it	O	O
.	O	O
Given	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
durationAtEarlierOffset	B-api_mention	O
will	O	O
be	O	O
one	O	O
second	O	O
,	O	O
while	O	O
durationAtLaterOffset	B-api_mention	O
will	O	O
be	O	O
five	O	O
minutes	O	O
and	O	O
53	O	O
seconds	O	O
.	O	O
Also	O	O
,	O	O
these	O	O
two	O	O
offsets	O	O
are	O	O
the	O	O
same	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
these	O	O
two	O	O
are	O	O
different	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
see	O	O
the	O	O
same	O	O
problem	O	O
comparing	O	O
1927	O	O
-	O	O
12	O	O
-	O	O
31	O	O
23	O	O
:	O	O
59	O	O
:	O	O
59	O	O
with	O	O
1928	O	O
-	O	O
01	O	O
-	O	O
01	O	O
00	O	O
:	O	O
00	O	O
:	O	O
00	O	O
,	O	O
though	O	O
,	O	O
in	O	O
this	O	O
case	O	O
,	O	O
it	O	O
is	O	O
the	O	O
earlier	O	O
offset	O	O
that	O	O
produce	O	O
the	O	O
longer	O	O
divergence	O	O
,	O	O
and	O	O
it	O	O
is	O	O
the	O	O
earlier	O	O
date	O	O
that	O	O
has	O	O
two	O	O
possible	O	O
offsets	O	O
.	O	O
Another	O	O
way	O	O
to	O	O
approach	O	O
this	O	O
is	O	O
to	O	O
check	O	O
whether	O	O
there	O	O
'	O	O
s	O	O
a	O	O
transition	O	O
going	O	O
on	O	O
.	O	O
We	O	O
can	O	O
do	O	O
this	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
check	O	O
whether	O	O
the	O	O
transition	O	O
is	O	O
an	O	O
overlap	O	O
-	O	O
in	O	O
which	O	O
case	O	O
there	O	O
'	O	O
s	O	O
more	O	O
than	O	O
one	O	O
valid	O	O
offset	O	O
for	O	O
that	O	O
date	O	O
/	O	O
time	O	O
-	O	O
or	O	O
a	O	O
gap	O	O
-	O	O
in	O	O
which	O	O
case	O	O
that	O	O
date	O	O
/	O	O
time	O	O
is	O	O
not	O	O
valid	O	O
for	O	O
that	O	O
zone	O	O
id	O	O
-	O	O
by	O	O
using	O	O
the	O	O
isOverlap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
isGap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
on	O	O
zot4	O	O
.	O	O
I	O	O
hope	O	O
this	O	O
helps	O	O
people	O	O
handle	O	O
this	O	O
sort	O	O
of	O	O
issue	O	O
once	O	O
Java	O	O
8	O	O
becomes	O	O
widely	O	O
available	O	O
,	O	O
or	O	O
to	O	O
those	O	O
using	O	O
Java	O	O
7	O	O
who	O	O
adopt	O	O
the	O	O
JSR	O	O
310	O	O
backport	O	O
.	O	O
Question	O	O
-	O	O
18532488	O	O
,	O	O
answer	O	O
-	O	O
33142346	O	O
Once	O	O
a	O	O
repeat	O	O
function	O	O
is	O	O
somewhere	O	O
defined	O	O
as	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
use	O	O
it	O	O
now	O	O
and	O	O
then	O	O
this	O	O
way	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
:	O	O
repeat	O	O
.	B-api_mention	B-api_mention
accept	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
To	O	O
get	O	O
and	O	O
equivalent	O	O
to	O	O
Haskell	O	O
'	O	O
s	O	O
take	O	O
8	O	O
(	O	O
args	O	O
)	O	O
You	O	O
could	O	O
write	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26791724	O	O
Use	O	O
the	O	O
replaceEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
from	O	O
Apache	O	O
Commons	O	O
StringUtils	B-api_mention	B-api_mention
:	O	O
StringUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replaceEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
33147339	O	O
I	O	O
was	O	O
reading	O	O
Java	O	O
'	O	O
s	O	O
ArrayList	B-api_mention	B-api_mention
source	O	O
code	O	O
and	O	O
noticed	O	O
some	O	O
comparisons	O	O
in	O	O
if	O	O
-	O	O
statements	O	O
.	O	O
In	O	O
Java	O	O
7	O	O
,	O	O
the	O	O
method	O	O
grow	B-api_mention	O
(	I-api_mention	O
int	I-api_mention	O
)	I-api_mention	O
uses	O	O
if	O	O
(	O	O
args	O	O
)	O	O
newCapacity	O	O
=	O	O
minCapacity	O	O
;	O	O
In	O	O
Java	O	O
6	O	O
,	O	O
grow	O	O
didn	O	O
'	O	O
t	O	O
exist	O	O
.	O	O
The	O	O
method	O	O
ensureCapacity	O	B-api_mention
(	O	I-api_mention
int	O	I-api_mention
)	O	I-api_mention
however	O	O
uses	O	O
if	O	O
(	O	O
args	O	O
)	O	O
newCapacity	O	O
=	O	O
minCapacity	O	O
;	O	O
What	O	O
was	O	O
the	O	O
reason	O	O
behind	O	O
the	O	O
change	O	O
?	O	O
Was	O	O
it	O	O
a	O	O
performance	O	O
issue	O	O
or	O	O
just	O	O
a	O	O
style	O	O
?	O	O
I	O	O
could	O	O
imagine	O	O
that	O	O
comparing	O	O
against	O	O
zero	O	O
is	O	O
faster	O	O
,	O	O
but	O	O
performing	O	O
a	O	O
complete	O	O
subtraction	O	O
just	O	O
to	O	O
check	O	O
whether	O	O
it	O	O
'	O	O
s	O	O
negative	O	O
seems	O	O
a	O	O
bit	O	O
overkill	O	O
to	O	O
me	O	O
.	O	O
Also	O	O
in	O	O
terms	O	O
of	O	O
bytecode	O	O
,	O	O
this	O	O
would	O	O
involve	O	O
two	O	O
instructions	O	O
(	O	O
ISUB	O	O
and	O	O
IF	O	O
_	O	O
ICMPGE	O	O
)	O	O
instead	O	O
of	O	O
one	O	O
(	O	O
IFGE	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
15046253	O	O
It	O	O
does	O	O
that	O	O
because	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
doesn	O	O
'	O	O
t	O	O
capture	O	O
the	O	O
newline	O	O
.	O	O
you	O	O
could	O	O
do	O	O
like	O	O
the	O	O
others	O	O
proposed	O	O
by	O	O
adding	O	O
an	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
underneath	O	O
.	O	O
Alternatively	O	O
you	O	O
can	O	O
do	O	O
it	O	O
C	O	O
#	O	O
style	O	O
and	O	O
parse	O	O
a	O	O
nextLine	B-api_mention	B-api_mention
to	O	O
an	O	O
integer	O	O
like	O	O
so	O	O
:	O	O
int	O	O
number	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Doing	O	O
this	O	O
works	O	O
just	O	O
as	O	O
well	O	O
,	O	O
and	O	O
it	O	O
saves	O	O
you	O	O
a	O	O
line	O	O
of	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
19998454	O	O
,	O	O
answer	O	O
-	O	O
19998652	O	O
This	O	O
is	O	O
being	O	O
described	O	O
in	O	O
this	O	O
article	O	O
.	O	O
Think	O	O
about	O	O
forEach	B-api_mention	B-api_mention
of	O	O
Collections	O	B-api_mention
.	O	I-api_mention
List	B-api_mention	I-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
…	O	O
list	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
34073047	O	O
Another	O	O
option	O	O
is	O	O
to	O	O
use	O	O
Apache	O	O
Commons	O	O
StrBuilder	B-api_mention	B-api_mention
,	O	O
which	O	O
has	O	O
the	O	O
functionality	O	O
that	O	O
'	O	O
s	O	O
lacking	O	O
in	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
StrBuilder	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
appendLn	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
20793241	O	O
Environment	O	O
variables	O	O
may	O	O
also	O	O
provide	O	O
a	O	O
useful	O	O
means	O	O
-	O	O
-	O	O
COMPUTERNAME	O	O
on	O	O
Windows	O	O
,	O	O
HOSTNAME	O	O
on	O	O
most	O	O
modern	O	O
Unix	O	O
/	O	O
Linux	O	O
shells	O	O
.	O	O
See	O	O
:	O	O
#	O	O
a	O	O
I	O	O
'	O	O
m	O	O
using	O	O
these	O	O
as	O	O
"	O	O
supplementary	O	O
"	O	O
methods	O	O
to	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
since	O	O
as	O	O
several	O	O
people	O	O
point	O	O
out	O	O
,	O	O
that	O	O
function	O	O
doesn	O	O
'	O	O
t	O	O
work	O	O
in	O	O
all	O	O
environments	O	O
.	O	O
Runtime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getRuntime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
exec	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
another	O	O
possible	O	O
supplement	O	O
.	O	O
At	O	O
this	O	O
stage	O	O
,	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
used	O	O
it	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
22409102	O	O
,	O	O
answer	O	O
-	O	O
22409270	O	O
You	O	O
can	O	O
use	O	O
Float	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
floatToIntBits	I-api_mention	I-api_mention
to	O	O
convert	O	O
it	O	O
to	O	O
an	O	O
int	O	O
and	O	O
look	O	O
at	O	O
the	O	O
bit	O	O
pattern	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29183904	O	O
I	O	O
used	O	O
to	O	O
define	O	O
a	O	O
set	O	O
of	O	O
related	O	O
constants	O	O
like	O	O
Bundle	B-api_mention	O
keys	O	O
together	O	O
in	O	O
an	O	O
interface	O	O
like	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
provides	O	O
me	O	O
a	O	O
nicer	O	O
way	O	O
to	O	O
group	O	O
related	O	O
constants	O	O
together	O	O
and	O	O
used	O	O
them	O	O
by	O	O
making	O	O
a	O	O
static	O	O
import	O	O
(	O	O
not	O	O
implements	O	O
)	O	O
.	O	O
I	O	O
know	O	O
Android	O	O
framework	O	O
also	O	O
uses	O	O
the	O	O
constants	O	O
in	O	O
same	O	O
way	O	O
like	O	O
Toast	B-api_mention	O
.	I-api_mention	O
LENTH	I-api_mention	O
_	I-api_mention	O
LONG	I-api_mention	O
,	O	O
View	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
GONE	I-api_mention	I-api_mention
.	O	O
However	O	O
,	O	O
I	O	O
often	O	O
feel	O	O
that	O	O
the	O	O
Java	O	O
Enums	O	O
provide	O	O
much	O	O
better	O	O
and	O	O
powerful	O	O
way	O	O
to	O	O
represent	O	O
the	O	O
constant	O	O
.	O	O
But	O	O
is	O	O
there	O	O
a	O	O
performence	O	O
issue	O	O
in	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
?	O	O
With	O	O
a	O	O
bit	O	O
of	O	O
research	O	O
I	O	O
ended	O	O
up	O	O
in	O	O
confusion	O	O
.	O	O
From	O	O
this	O	O
question	O	O
"	O	O
Avoid	O	O
Enums	O	O
Where	O	O
You	O	O
Only	O	O
Need	O	O
Ints	O	O
”	O	O
removed	O	O
from	O	O
Android	O	O
'	O	O
s	O	O
performance	O	O
tips	O	O
?	O	O
it	O	O
'	O	O
s	O	O
clear	O	O
that	O	O
Google	O	O
has	O	O
removed	O	O
"	O	O
Avoid	O	O
enums	O	O
"	O	O
from	O	O
its	O	O
performance	O	O
tips	O	O
,	O	O
but	O	O
from	O	O
it	O	O
'	O	O
s	O	O
official	O	O
training	O	O
docs	O	O
Be	O	O
aware	O	O
of	O	O
memory	O	O
overhead	O	O
section	O	O
it	O	O
clearly	O	O
says	O	O
:	O	O
"	O	O
Enums	O	O
often	O	O
require	O	O
more	O	O
than	O	O
twice	O	O
as	O	O
much	O	O
memory	O	O
as	O	O
static	O	O
constants	O	O
.	O	O
You	O	O
should	O	O
strictly	O	O
avoid	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
.	O	O
"	O	O
Is	O	O
this	O	O
still	O	O
holds	O	O
good	O	O
?	O	O
(	O	O
say	O	O
in	O	O
Java	O	O
versions	O	O
after	O	O
1	O	O
.	O	O
6	O	O
)	O	O
One	O	O
more	O	O
issue	O	O
that	O	O
I	O	O
observed	O	O
is	O	O
to	O	O
send	O	O
enums	O	O
across	O	O
intents	O	O
using	O	O
Bundle	B-api_mention	O
I	O	O
should	O	O
send	O	O
them	O	O
by	O	O
serializing	O	O
(	O	O
i	O	O
.	O	O
e	O	O
putSerializable	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
that	O	O
I	O	O
think	O	O
an	O	O
expensive	O	O
operation	O	O
compared	O	O
to	O	O
primitive	O	O
putString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
eventhough	O	O
enums	O	O
provides	O	O
it	O	O
for	O	O
free	O	O
)	O	O
.	O	O
Can	O	O
someone	O	O
please	O	O
clarify	O	O
which	O	O
one	O	O
is	O	O
the	O	O
best	O	O
way	O	O
to	O	O
represent	O	O
the	O	O
same	O	O
in	O	O
Android	O	O
?	O	O
Should	O	O
I	O	O
strictly	O	O
avoid	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
?	O	O
Question	O	O
-	O	O
29229373	O	O
,	O	O
answer	O	O
-	O	O
33839551	O	O
In	O	O
my	O	O
free	O	O
StreamEx	O	O
library	O	O
I	O	O
introduced	O	O
the	O	O
short	O	O
-	O	O
circuiting	O	O
collectors	O	O
.	O	O
When	O	O
collecting	O	O
sequential	O	O
stream	O	O
with	O	O
short	O	O
-	O	O
circuiting	O	O
collector	O	O
(	O	O
like	O	O
MoreCollectors	O	B-api_mention
.	B-api_mention	I-api_mention
first	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
exactly	O	O
one	O	O
element	O	O
is	O	O
consumed	O	O
from	O	O
the	O	O
source	O	O
.	O	O
Internally	O	O
it	O	O
'	O	O
s	O	O
implemented	O	O
in	O	O
quite	O	O
dirty	O	O
way	O	O
:	O	O
using	O	O
a	O	O
custom	O	O
exception	O	O
to	O	O
break	O	O
the	O	O
control	O	O
flow	O	O
.	O	O
Using	O	O
my	O	O
library	O	O
your	O	O
sample	O	O
could	O	O
be	O	O
rewritten	O	O
in	O	O
this	O	O
way	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
result	O	O
is	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14513598	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
is	O	O
not	O	O
much	O	O
different	O	O
,	O	O
a	O	O
basic	O	O
LCG	O	O
described	O	O
by	O	O
Knuth	O	O
.	O	O
However	O	O
it	O	O
has	O	O
main	O	O
2	O	O
main	O	O
advantages	O	O
/	O	O
differences	O	O
:	O	O
#	O	O
li	O	O
thread	O	O
safe	O	O
-	O	O
each	O	O
update	O	O
is	O	O
a	O	O
CAS	O	O
which	O	O
is	O	O
more	O	O
expensive	O	O
than	O	O
a	O	O
simple	O	O
write	O	O
and	O	O
needs	O	O
a	O	O
branch	O	O
(	O	O
even	O	O
if	O	O
perfectly	O	O
predicted	O	O
single	O	O
threaded	O	O
)	O	O
.	O	O
Depending	O	O
on	O	O
the	O	O
CPU	O	O
it	O	O
could	O	O
be	O	O
significant	O	O
difference	O	O
.	O	O
#	O	O
li	O	O
undisclosed	O	O
internal	O	O
state	O	O
-	O	O
this	O	O
is	O	O
very	O	O
important	O	O
for	O	O
anything	O	O
non	O	O
-	O	O
trivial	O	O
.	O	O
You	O	O
wish	O	O
the	O	O
random	O	O
numbers	O	O
not	O	O
to	O	O
be	O	O
predictable	O	O
.	O	O
Below	O	O
it	O	O
'	O	O
s	O	O
the	O	O
main	O	O
routine	O	O
generating	O	O
'	O	O
random	O	O
'	O	O
integers	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
.	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
remove	O	O
the	O	O
AtomicLong	B-api_mention	B-api_mention
and	O	O
the	O	O
undisclosed	O	O
sate	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
using	O	O
all	O	O
bits	O	O
of	O	O
the	O	O
long	O	O
)	O	O
,	O	O
you	O	O
'	O	O
d	O	O
get	O	O
more	O	O
performance	O	O
than	O	O
the	O	O
double	O	O
multiplication	O	O
/	O	O
modulo	O	O
.	O	O
Last	O	O
note	O	O
:	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
should	O	O
not	O	O
be	O	O
used	O	O
for	O	O
anything	O	O
but	O	O
simple	O	O
tests	O	O
,	O	O
it	O	O
'	O	O
s	O	O
prone	O	O
to	O	O
contention	O	O
and	O	O
if	O	O
you	O	O
have	O	O
even	O	O
a	O	O
couple	O	O
of	O	O
threads	O	O
calling	O	O
it	O	O
concurrently	O	O
the	O	O
performance	O	O
degrades	O	O
.	O	O
One	O	O
little	O	O
known	O	O
historical	O	O
feature	O	O
of	O	O
it	O	O
is	O	O
the	O	O
introduction	O	O
of	O	O
CAS	O	O
in	O	O
java	O	O
-	O	O
to	O	O
beat	O	O
an	O	O
infamous	O	O
benchmark	O	O
(	O	O
first	O	O
by	O	O
IBM	O	O
via	O	O
intrinsics	O	O
and	O	O
then	O	O
Sun	O	O
made	O	O
"	O	O
CAS	O	O
from	O	O
Java	O	O
"	O	O
)	O	O
Question	O	O
-	O	O
11359187	O	O
,	O	O
answer	O	O
-	O	O
11359320	O	O
#	O	O
li	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
logging	I-api_mention	I-api_mention
was	O	O
introduced	O	O
in	O	O
Java	O	O
1	O	O
.	O	O
4	O	O
.	O	O
There	O	O
were	O	O
uses	O	O
for	O	O
logging	O	O
before	O	O
that	O	O
,	O	O
that	O	O
'	O	O
s	O	O
why	O	O
many	O	O
other	O	O
logging	O	O
APIs	O	O
exist	O	O
.	O	O
Those	O	O
APIs	O	O
where	O	O
used	O	O
heavily	O	O
before	O	O
Java	O	O
1	O	O
.	O	O
4	O	O
and	O	O
thus	O	O
had	O	O
a	O	O
great	O	O
marketshare	O	O
that	O	O
didn	O	O
'	O	O
t	O	O
just	O	O
drop	O	O
to	O	O
0	O	O
when	O	O
1	O	O
.	O	O
4	O	O
was	O	O
release	O	O
.	O	O
#	O	O
li	O	O
JUL	B-api_mention	B-api_mention
didn	O	O
'	O	O
t	O	O
start	O	O
out	O	O
all	O	O
that	O	O
great	O	O
,	O	O
many	O	O
of	O	O
the	O	O
things	O	O
you	O	O
mentioned	O	O
where	O	O
a	O	O
lot	O	O
worse	O	O
in	O	O
1	O	O
.	O	O
4	O	O
and	O	O
only	O	O
got	O	O
better	O	O
in	O	O
1	O	O
.	O	O
5	O	O
(	O	O
and	O	O
I	O	O
guess	O	O
in	O	O
6	O	O
as	O	O
well	O	O
,	O	O
but	O	O
I	O	O
'	O	O
m	O	O
not	O	O
too	O	O
sure	O	O
)	O	O
.	O	O
#	O	O
li	O	O
JUL	B-api_mention	B-api_mention
isn	O	O
'	O	O
t	O	O
well	O	O
suited	O	O
for	O	O
multiple	O	O
applications	O	O
with	O	O
different	O	O
configurations	O	O
in	O	O
the	O	O
same	O	O
JVM	O	O
(	O	O
think	O	O
multiple	O	O
web	O	O
applications	O	O
that	O	O
should	O	O
not	O	O
interact	O	O
)	O	O
.	O	O
Tomcat	O	O
needs	O	O
to	O	O
jump	O	O
through	O	O
some	O	O
hoops	O	O
to	O	O
get	O	O
that	O	O
working	O	O
(	O	O
effectively	O	O
re	O	O
-	O	O
implementing	O	O
JUL	B-api_mention	B-api_mention
if	O	O
I	O	O
understood	O	O
that	O	O
correctly	O	O
)	O	O
.	O	O
#	O	O
li	O	O
You	O	O
can	O	O
'	O	O
t	O	O
always	O	O
influence	O	O
what	O	O
logging	O	O
framework	O	O
your	O	O
libraries	O	O
use	O	O
.	O	O
Therefore	O	O
using	O	O
SLF4J	B-api_mention	B-api_mention
(	O	O
which	O	O
is	O	O
actually	O	O
just	O	O
a	O	O
very	O	O
thin	O	O
API	O	O
layer	O	O
above	O	O
other	O	O
libraries	O	O
)	O	O
helps	O	O
keeping	O	O
a	O	O
somewhat	O	O
consistent	O	O
picture	O	O
of	O	O
the	O	O
entire	O	O
logging	O	O
world	O	O
(	O	O
so	O	O
you	O	O
can	O	O
decide	O	O
the	O	O
underlying	O	O
logging	O	O
framework	O	O
while	O	O
still	O	O
having	O	O
library	O	O
logging	O	O
in	O	O
the	O	O
same	O	O
system	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Libraries	O	O
can	O	O
'	O	O
t	O	O
easily	O	O
change	O	O
.	O	O
If	O	O
a	O	O
previous	O	O
version	O	O
of	O	O
a	O	O
library	O	O
used	O	O
to	O	O
use	O	O
logging	O	O
-	O	O
library	O	O
-	O	O
X	O	O
it	O	O
can	O	O
'	O	O
t	O	O
easily	O	O
switch	O	O
to	O	O
logging	O	O
-	O	O
library	O	O
-	O	O
Y	O	O
(	O	O
for	O	O
example	O	O
JUL	B-api_mention	B-api_mention
)	O	O
,	O	O
even	O	O
if	O	O
the	O	O
latter	O	O
is	O	O
clearly	O	O
superious	O	O
:	O	O
any	O	O
user	O	O
of	O	O
that	O	O
library	O	O
would	O	O
need	O	O
to	O	O
learn	O	O
the	O	O
new	O	O
logging	O	O
framework	O	O
and	O	O
(	O	O
at	O	O
least	O	O
)	O	O
reconfigure	O	O
their	O	O
logging	O	O
.	O	O
That	O	O
'	O	O
s	O	O
a	O	O
big	O	O
no	O	O
-	O	O
no	O	O
,	O	O
especially	O	O
when	O	O
it	O	O
brings	O	O
no	O	O
apparent	O	O
gain	O	O
to	O	O
most	O	O
people	O	O
.	O	O
Having	O	O
said	O	O
all	O	O
that	O	O
I	O	O
think	O	O
JUL	B-api_mention	B-api_mention
is	O	O
at	O	O
least	O	O
a	O	O
valid	O	O
alternative	O	O
to	O	O
other	O	O
logging	O	O
frameworks	O	O
these	O	O
days	O	O
.	O	O
Question	O	O
-	O	O
23453287	O	O
,	O	O
answer	O	O
-	O	O
23456085	O	O
It	O	O
will	O	O
be	O	O
hard	O	O
to	O	O
find	O	O
and	O	O
identify	O	O
"	O	O
THE	O	O
"	O	O
answer	O	O
,	O	O
for	O	O
the	O	O
resons	O	O
mentioned	O	O
in	O	O
the	O	O
comments	O	O
from	O	O
@	O	O
EJP	O	O
:	O	O
There	O	O
are	O	O
roughly	O	O
2	O	O
(	O	O
+	O	O
/	O	O
-	O	O
2	O	O
)	O	O
people	O	O
in	O	O
the	O	O
world	O	O
who	O	O
can	O	O
give	O	O
the	O	O
definite	O	O
answer	O	O
at	O	O
all	O	O
.	O	O
And	O	O
in	O	O
doubt	O	O
,	O	O
the	O	O
answer	O	O
might	O	O
just	O	O
be	O	O
something	O	O
like	O	O
"	O	O
Supporting	O	O
final	O	O
default	O	O
methods	O	O
did	O	O
not	O	O
seem	O	O
to	O	O
be	O	O
worth	O	O
the	O	O
effort	O	O
of	O	O
restructuring	O	O
the	O	O
internal	O	O
call	O	O
resolution	O	O
mechanisms	O	O
"	O	O
.	O	O
This	O	O
is	O	O
speculation	O	O
,	O	O
of	O	O
course	O	O
,	O	O
but	O	O
it	O	O
is	O	O
at	O	O
least	O	O
backed	O	O
by	O	O
subtle	O	O
evidences	O	O
,	O	O
like	O	O
this	O	O
Statement	O	O
(	O	O
by	O	O
one	O	O
of	O	O
the	O	O
two	O	O
persons	O	O
)	O	O
in	O	O
the	O	O
OpenJDK	O	O
mailing	O	O
list	O	O
:	O	O
#	O	O
blockquote	O	O
and	O	O
trivial	O	O
facts	O	O
like	O	O
that	O	O
a	O	O
method	O	O
is	O	O
simply	O	O
not	O	O
considered	O	O
to	O	O
be	O	O
a	O	O
(	O	O
really	O	O
)	O	O
final	O	O
method	O	O
when	O	O
it	O	O
is	O	O
a	O	O
default	O	O
method	O	O
,	O	O
as	O	O
currently	O	O
implemented	O	O
in	O	O
the	O	O
Method	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
is	I-api_mention	O
_	I-api_mention	O
final	I-api_mention	O
_	I-api_mention	O
method	I-api_mention	O
method	O	O
in	O	O
the	O	O
OpenJDK	O	O
.	O	O
Further	O	O
really	O	O
"	O	O
authorative	O	O
"	O	O
information	O	O
is	O	O
indeed	O	O
hard	O	O
to	O	O
find	O	O
,	O	O
even	O	O
with	O	O
excessive	O	O
websearches	O	O
and	O	O
by	O	O
reading	O	O
commit	O	O
logs	O	O
.	O	O
I	O	O
thought	O	O
that	O	O
it	O	O
might	O	O
be	O	O
related	O	O
to	O	O
potential	O	O
ambiguities	O	O
during	O	O
the	O	O
resolution	O	O
of	O	O
interface	O	O
method	O	O
calls	O	O
with	O	O
the	O	O
invokeinterface	B-api_mention	O
instruction	O	O
and	O	O
and	O	O
class	O	O
method	O	O
calls	O	O
,	O	O
corresponding	O	O
to	O	O
the	O	O
invokevirtual	B-api_mention	O
instruction	O	O
:	O	O
For	O	O
the	O	O
invokevirtual	B-api_mention	O
instruction	O	O
,	O	O
there	O	O
may	O	O
be	O	O
a	O	O
simple	O	O
vtable	O	O
lookup	O	O
,	O	O
because	O	O
the	O	O
method	O	O
must	O	O
either	O	O
be	O	O
inherited	O	O
from	O	O
a	O	O
superclass	O	O
,	O	O
or	O	O
implemented	O	O
by	O	O
the	O	O
class	O	O
directly	O	O
.	O	O
In	O	O
contrast	O	O
to	O	O
that	O	O
,	O	O
an	O	O
invokeinterface	B-api_mention	O
call	O	O
must	O	O
examine	O	O
the	O	O
respective	O	O
call	O	O
site	O	O
to	O	O
find	O	O
out	O	O
which	O	O
interface	O	O
this	O	O
call	O	O
actually	O	O
refers	O	O
to	O	O
(	O	O
this	O	O
is	O	O
explained	O	O
in	O	O
more	O	O
detail	O	O
in	O	O
the	O	O
InterfaceCalls	O	B-api_mention
page	O	O
of	O	O
the	O	O
HotSpot	O	O
Wiki	O	O
)	O	O
.	O	O
However	O	O
,	O	O
final	O	O
methods	O	O
do	O	O
either	O	O
not	O	O
get	O	O
inserted	O	O
into	O	O
the	O	O
vtable	O	O
at	O	O
all	O	O
,	O	O
or	O	O
replace	O	O
existing	O	O
entries	O	O
in	O	O
the	O	O
vtable	O	O
(	O	O
see	O	O
klassVtable	O	B-api_mention
.	O	O
cpp	O	O
.	O	O
Line	O	O
333	O	O
)	O	O
,	O	O
and	O	O
similarly	O	O
,	O	O
default	O	O
methods	O	O
are	O	O
replacing	O	O
existing	O	O
entries	O	O
in	O	O
the	O	O
vtable	O	O
(	O	O
see	O	O
klassVtable	O	O
.	O	O
cpp	O	O
,	O	O
Line	O	O
202	O	O
)	O	O
.	O	O
So	O	O
the	O	O
actual	O	O
reason	O	O
(	O	O
and	O	O
thus	O	O
,	O	O
the	O	O
answer	O	O
)	O	O
must	O	O
be	O	O
hidden	O	O
deeper	O	O
inside	O	O
the	O	O
(	O	O
rather	O	O
complex	O	O
)	O	O
method	O	O
call	O	O
resolution	O	O
mechanisms	O	O
,	O	O
but	O	O
maybe	O	O
these	O	O
references	O	O
will	O	O
nevertheless	O	O
be	O	O
considered	O	O
as	O	O
being	O	O
helpful	O	O
,	O	O
be	O	O
it	O	O
only	O	O
for	O	O
others	O	O
that	O	O
manage	O	O
to	O	O
derive	O	O
the	O	O
actual	O	O
answer	O	O
from	O	O
that	O	O
.	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
16229988	O	O
My	O	O
solution	O	O
is	O	O
to	O	O
do	O	O
a	O	O
"	O	O
extract	O	O
method	O	O
"	O	O
refactoring	O	O
,	O	O
as	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
printToFile	B-api_mention	B-api_mention
can	O	O
be	O	O
written	O	O
either	O	O
#	O	O
pre	O	O
or	O	O
#	O	O
pre	O	O
For	O	O
class	O	O
lib	O	O
designers	O	O
,	O	O
I	O	O
will	O	O
suggest	O	O
them	O	O
extend	O	O
the	O	O
AutoClosable	B-api_mention	B-api_mention
interface	O	O
with	O	O
an	O	O
additional	O	O
method	O	O
to	O	O
suppress	O	O
the	O	O
close	O	O
.	O	O
In	O	O
this	O	O
case	O	O
we	O	O
can	O	O
then	O	O
manually	O	O
control	O	O
the	O	O
close	O	O
behavior	O	O
.	O	O
For	O	O
language	O	O
designers	O	O
,	O	O
the	O	O
lesson	O	O
is	O	O
that	O	O
adding	O	O
a	O	O
new	O	O
feature	O	O
could	O	O
mean	O	O
adding	O	O
a	O	O
lot	O	O
others	O	O
.	O	O
In	O	O
this	O	O
Java	O	O
case	O	O
,	O	O
obviously	O	O
ARM	O	O
feature	O	O
will	O	O
work	O	O
better	O	O
with	O	O
a	O	O
resource	O	O
ownership	O	O
transfer	O	O
mechanism	O	O
.	O	O
UPDATE	O	O
Originally	O	O
the	O	O
code	O	O
above	O	O
requires	O	O
@	O	O
SuppressWarning	O	O
since	O	O
the	O	O
BufferedWriter	B-api_mention	B-api_mention
inside	O	O
the	O	O
function	O	O
requires	O	O
close	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
As	O	O
suggested	O	O
by	O	O
a	O	O
comment	O	O
,	O	O
if	O	O
flush	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
be	O	O
called	O	O
before	O	O
close	O	O
the	O	O
writer	O	O
,	O	O
we	O	O
need	O	O
to	O	O
do	O	O
so	O	O
before	O	O
any	O	O
return	B-api_mention	O
(	O	O
implicit	O	O
or	O	O
explicit	O	O
)	O	O
statements	O	O
inside	O	O
the	O	O
try	O	O
block	O	O
.	O	O
There	O	O
is	O	O
currently	O	O
no	O	O
way	O	O
to	O	O
ensure	O	O
the	O	O
caller	O	O
doing	O	O
this	O	O
I	O	O
think	O	O
,	O	O
so	O	O
this	O	O
must	O	O
be	O	O
documented	O	O
for	O	O
writeFileWriter	B-api_mention	B-api_mention
.	O	I-api_mention
UPDATE	O	I-api_mention
AGAIN	O	O
The	O	O
above	O	O
update	O	O
makes	O	O
@	O	O
SuppressWarning	O	O
unnecessary	O	O
since	O	O
it	O	O
require	O	O
the	O	O
function	O	O
to	O	O
return	O	O
the	O	O
resource	O	O
to	O	O
the	O	O
caller	O	O
,	O	O
so	O	O
itself	O	O
does	O	O
not	O	O
necessary	O	O
being	O	O
closed	O	O
.	O	O
Unfortunately	O	O
,	O	O
this	O	O
pull	O	O
us	O	O
back	O	O
to	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
situation	O	O
:	O	O
the	O	O
warning	O	O
is	O	O
now	O	O
moved	O	O
back	O	O
to	O	O
the	O	O
caller	O	O
side	O	O
.	O	O
So	O	O
to	O	O
properly	O	O
solve	O	O
this	O	O
,	O	O
we	O	O
need	O	O
a	O	O
customised	O	O
AutoClosable	B-api_mention	B-api_mention
that	O	O
whenever	O	O
it	O	O
closes	O	O
,	O	O
the	O	O
underline	O	O
BufferedWriter	B-api_mention	B-api_mention
shall	O	O
be	O	O
flush	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
ed	O	O
.	O	O
Actually	O	O
,	O	O
this	O	O
shows	O	O
us	O	O
another	O	O
way	O	O
to	O	O
bypass	O	O
the	O	O
warning	O	O
,	O	O
since	O	O
the	O	O
BufferWriter	B-api_mention	B-api_mention
is	O	O
never	O	O
closed	O	O
in	O	O
either	O	O
way	O	O
.	O	O
Question	O	O
-	O	O
32820722	O	O
,	O	O
answer	O	O
-	O	O
32820984	O	O
Let	O	O
'	O	O
s	O	O
rewrite	O	O
that	O	O
lambda	O	O
expression	O	O
with	O	O
parentheses	O	O
to	O	O
make	O	O
it	O	O
more	O	O
clear	O	O
:	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
curriedAdd	O	O
=	O	O
a	O	O
-	O	O
>	O	O
(	O	O
b	O	O
-	O	O
>	O	O
(	O	O
a	O	O
+	O	O
b	O	O
)	O	O
)	O	O
;	O	O
So	O	O
we	O	O
are	O	O
declaring	O	O
a	O	O
function	O	O
taking	O	O
an	O	O
int	O	O
which	O	O
returns	O	O
a	O	O
Function	B-api_mention	B-api_mention
.	O	O
More	O	O
specifically	O	O
,	O	O
the	O	O
function	O	O
returned	O	O
takes	O	O
an	O	O
int	O	O
and	O	O
returns	O	O
an	O	O
int	O	O
(	O	O
the	O	O
sum	O	O
of	O	O
the	O	O
two	O	O
elements	O	O
)	O	O
:	O	O
this	O	O
can	O	O
be	O	O
represented	O	O
as	O	O
an	O	O
IntUnaryOperator	B-api_mention	B-api_mention
.	O	O
Therefore	O	O
,	O	O
curriedAdd	O	O
is	O	O
a	O	O
function	O	O
taking	O	O
an	O	O
int	O	O
and	O	O
returning	O	O
an	O	O
IntUnaryOperator	O	B-api_mention
,	O	O
so	O	O
it	O	O
can	O	O
be	O	O
represented	O	O
as	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
IntUnaryOperator	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
32714194	O	O
,	O	O
answer	O	O
-	O	O
32714537	O	O
While	O	O
currently	O	O
most	O	O
of	O	O
Java	O	O
compilers	O	O
using	O	O
StringBuilder	B-api_mention	B-api_mention
chain	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
specified	O	O
that	O	O
it	O	O
should	O	O
be	O	O
always	O	O
in	O	O
this	O	O
way	O	O
.	O	O
In	O	O
particular	O	O
there	O	O
'	O	O
s	O	O
a	O	O
proposal	O	O
to	O	O
change	O	O
this	O	O
drastically	O	O
in	O	O
Java	O	O
-	O	O
9	O	O
replacing	O	O
with	O	O
single	O	O
invokedynamic	O	O
call	O	O
and	O	O
introduce	O	O
new	O	O
metafactory	O	O
which	O	O
will	O	O
generate	O	O
an	O	O
appropriate	O	O
MethodHandle	O	O
in	O	O
runtime	O	O
to	O	O
perform	O	O
concatenation	O	O
.	O	O
Question	O	O
-	O	O
8430805	O	O
,	O	O
answer	O	O
-	O	O
22332291	O	O
Sudheesh	O	O
B	O	O
Nair	O	O
'	O	O
s	O	O
has	O	O
a	O	O
nice	O	O
(	O	O
and	O	O
accepted	O	O
)	O	O
answer	O	O
on	O	O
the	O	O
question	O	O
,	O	O
which	O	O
i	O	O
think	O	O
should	O	O
have	O	O
a	O	O
better	O	O
alternative	O	O
such	O	O
as	O	O
;	O	O
What	O	O
'	O	O
s	O	O
wrong	O	O
with	O	O
measuring	O	O
time	O	O
passed	O	O
and	O	O
checking	O	O
if	O	O
TIME	O	O
_	O	O
INTERVAL	O	O
miliseconds	O	O
(	O	O
say	O	O
2000	O	O
)	O	O
passed	O	O
since	O	O
the	O	O
last	O	O
back	O	O
press	O	O
.	O	O
The	O	O
following	O	O
sample	O	O
code	O	O
uses	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
to	O	O
store	O	O
the	O	O
time	O	O
onBackPressed	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
;	O	O
#	O	O
pre	O	O
Back	O	O
on	O	O
accepted	O	O
answer	O	O
critique	O	O
;	O	O
Using	O	O
a	O	O
flag	O	O
to	O	O
indicate	O	O
if	O	O
it	O	O
was	O	O
pressed	O	O
in	O	O
last	O	O
TIME	O	O
_	O	O
INTERVAL	O	O
(	O	O
say	O	O
2000	O	O
)	O	O
milliseconds	O	O
and	O	O
set	O	O
-	O	O
reset	O	O
is	O	O
via	O	O
Handler	B-api_mention	O
'	O	O
s	O	O
postDelayed	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
was	O	O
the	O	O
first	O	O
thing	O	O
to	O	O
come	O	O
in	O	O
my	O	O
mind	O	O
.	O	O
But	O	O
the	O	O
postDelayed	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
action	O	O
should	O	O
be	O	O
cancelled	O	O
when	O	O
activity	O	O
is	O	O
closing	O	O
,	O	O
removing	O	O
the	O	O
Runnable	B-api_mention	B-api_mention
.	O	O
In	O	O
order	O	O
to	O	O
remove	O	O
the	O	O
Runnable	B-api_mention	B-api_mention
,	O	O
it	O	O
must	O	O
not	O	O
be	O	O
declared	O	O
anonymous	O	O
,	O	O
and	O	O
be	O	O
declared	O	O
as	O	O
member	O	O
along	O	O
with	O	O
the	O	O
Handler	B-api_mention	O
aswell	O	O
.	O	O
Then	O	O
removeCallbacks	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
Handler	B-api_mention	B-api_mention
can	O	O
be	O	O
called	O	O
appropriately	O	O
.	O	O
The	O	O
following	O	O
sample	O	O
is	O	O
the	O	O
demonstration	O	O
;	O	O
#	O	O
pre	O	O
Thanks	O	O
to	O	O
@	O	O
NSouth	O	O
for	O	O
contributing	O	O
;	O	O
In	O	O
order	O	O
to	O	O
prevent	O	O
toast	O	O
message	O	O
appearing	O	O
even	O	O
after	O	O
the	O	O
application	O	O
is	O	O
closed	O	O
,	O	O
Toast	O	O
can	O	O
be	O	O
declared	O	O
as	O	O
a	O	O
member	O	O
-	O	O
say	O	O
mExitToast	O	O
-	O	O
and	O	O
can	O	O
be	O	O
cancelled	O	O
via	O	O
mExitToast	O	O
.	B-api_mention	B-api_mention
cancel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
just	O	O
before	O	O
super	O	O
.	B-api_mention	B-api_mention
onBackPressed	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
call	O	O
.	O	O
Question	O	O
-	O	O
9481865	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
develop	O	O
a	O	O
system	O	O
where	O	O
there	O	O
are	O	O
different	O	O
nodes	O	O
that	O	O
are	O	O
run	O	O
on	O	O
different	O	O
system	O	O
or	O	O
on	O	O
different	O	O
ports	O	O
on	O	O
the	O	O
same	O	O
system	O	O
.	O	O
Now	O	O
all	O	O
the	O	O
nodes	O	O
create	O	O
a	O	O
Socket	B-api_mention	B-api_mention
with	O	O
a	O	O
target	O	O
IP	O	O
as	O	O
the	O	O
IP	O	O
of	O	O
a	O	O
special	O	O
node	O	O
known	O	O
as	O	O
a	O	O
bootstrapping	O	O
node	O	O
.	O	O
The	O	O
nodes	O	O
then	O	O
create	O	O
their	O	O
own	O	O
ServerSocket	B-api_mention	B-api_mention
and	O	O
start	O	O
listening	O	O
for	O	O
connections	O	O
.	O	O
The	O	O
bootstrapping	O	O
node	O	O
maintains	O	O
a	O	O
list	O	O
of	O	O
Nodes	O	O
and	O	O
returns	O	O
them	O	O
on	O	O
being	O	O
quired	O	O
.	O	O
Now	O	O
what	O	O
I	O	O
need	O	O
is	O	O
the	O	O
node	O	O
must	O	O
register	O	O
its	O	O
IP	O	O
to	O	O
the	O	O
bootstrapping	O	O
node	O	O
.	O	O
I	O	O
tried	O	O
using	O	O
cli	B-api_mention	O
.	I-api_mention	B-api_mention
getInetAddress	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
once	O	O
the	O	O
client	O	O
connects	O	O
to	O	O
the	O	O
ServerSocket	B-api_mention	B-api_mention
of	O	O
bootstrapping	O	O
node	O	O
but	O	O
that	O	O
didn	O	O
'	O	O
t	O	O
work	O	O
.	O	O
#	O	O
li	O	O
I	O	O
need	O	O
the	O	O
client	O	O
to	O	O
register	O	O
its	O	O
PPP	O	O
IP	O	O
if	O	O
available	O	O
;	O	O
#	O	O
li	O	O
Otherwise	O	O
the	O	O
LAN	O	O
IP	O	O
if	O	O
available	O	O
;	O	O
#	O	O
li	O	O
Otherwise	O	O
it	O	O
must	O	O
register	O	O
127	O	O
.	O	O
0	O	O
.	O	O
0	O	O
.	O	O
1	O	O
assuming	O	O
its	O	O
the	O	O
same	O	O
computer	O	O
.	O	O
Please	O	O
help	O	O
me	O	O
with	O	O
this	O	O
.	O	O
EDIT	O	O
using	O	O
the	O	O
code	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
My	O	O
PPP	O	O
Connection	O	O
IP	O	O
address	O	O
is	O	O
:	O	O
117	O	O
.	O	O
204	O	O
.	O	O
44	O	O
.	O	O
192	O	O
but	O	O
the	O	O
above	O	O
returns	O	O
me	O	O
192	O	O
.	O	O
168	O	O
.	O	O
1	O	O
.	O	O
2	O	O
EDIT2	O	O
I	O	O
am	O	O
using	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
am	O	O
able	O	O
to	O	O
get	O	O
all	O	O
the	O	O
IP	O	O
addresses	O	O
associated	O	O
all	O	O
NetworkInterface	B-api_mention	O
s	O	O
,	O	O
but	O	O
how	O	O
do	O	O
I	O	O
distinguish	O	O
them	O	O
?	O	O
?	O	O
This	O	O
is	O	O
the	O	O
output	O	O
I	O	O
am	O	O
getting	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29502668	O	O
#	O	O
blockquote	O	O
It	O	O
'	O	O
s	O	O
checking	O	O
simple	O	O
equality	O	O
(	O	O
likely	O	O
for	O	O
the	O	O
purpose	O	O
of	O	O
a	O	O
micro	O	O
-	O	O
optimization	O	O
,	O	O
but	O	O
more	O	O
on	O	O
that	O	O
later	O	O
)	O	O
.	O	O
The	O	O
unusual	O	O
casting	O	O
is	O	O
necessary	O	O
because	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	O	O
the	O	O
type	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	B-api_mention
class	I-api_mention	I-api_mention
)	O	O
and	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
are	O	O
incomparable	O	O
types	O	O
.	O	O
Basically	O	O
,	O	O
for	O	O
an	O	O
equality	O	O
comparison	O	O
with	O	O
=	O	O
=	O	O
to	O	O
compile	O	O
,	O	O
one	O	O
of	O	O
the	O	O
sides	O	O
has	O	O
to	O	O
be	O	O
a	O	O
subtype	O	O
or	O	O
supertype	O	O
of	O	O
the	O	O
other	O	O
.	O	O
I	O	O
.	O	O
e	O	O
.	O	O
we	O	O
can	O	O
'	O	O
t	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
rules	O	O
for	O	O
generic	O	O
types	O	O
are	O	O
a	O	O
bit	O	O
more	O	O
complicated	O	O
and	O	O
there	O	O
are	O	O
a	O	O
few	O	O
cases	O	O
where	O	O
a	O	O
comparison	O	O
doesn	O	O
'	O	O
t	O	O
compile	O	O
,	O	O
but	O	O
it	O	O
may	O	O
still	O	O
evaluate	O	O
to	O	O
true	O	O
.	O	O
The	O	O
reason	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
not	O	O
a	O	O
supertype	O	O
of	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
despite	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
being	O	O
a	O	O
supertype	O	O
of	O	O
all	O	O
object	O	O
array	O	O
types	O	O
,	O	O
is	O	O
that	O	O
Java	O	O
generics	O	O
are	O	O
invariant	O	O
without	O	O
the	O	O
presence	O	O
of	O	O
a	O	O
wildcard	O	O
.	O	O
Another	O	O
way	O	O
to	O	O
do	O	O
the	O	O
comparison	O	O
would	O	O
be	O	O
:	O	O
(	O	O
newType	O	O
=	O	O
=	O	O
(	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	B-api_mention
class	I-api_mention	I-api_mention
)	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
.	O	O
.	O	O
.	O	O
]	O	O
creates	O	O
an	O	O
array	O	O
the	O	O
normal	O	O
way	O	O
,	O	O
of	O	O
a	O	O
type	O	O
that	O	O
is	O	O
statically	O	O
known	O	O
.	O	O
Remember	O	O
,	O	O
the	O	O
code	O	O
has	O	O
just	O	O
checked	O	O
that	O	O
T	O	O
[	O	O
]	O	O
is	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
#	O	O
li	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
uses	O	O
reflection	O	O
to	O	O
dynamically	O	O
create	O	O
an	O	O
array	O	O
of	O	O
the	O	O
Class	O	B-api_mention
type	O	O
passed	O	O
in	O	O
.	O	O
#	O	O
blockquote	O	O
An	O	O
operation	O	O
using	O	O
reflection	O	O
is	O	O
generally	O	O
slower	O	O
than	O	O
its	O	O
non	O	O
-	O	O
reflective	O	O
counterpart	O	O
.	O	O
The	O	O
reflection	O	O
tutorial	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
Java	O	O
SE	O	O
is	O	O
filled	O	O
with	O	O
micro	O	O
-	O	O
optimization	O	O
like	O	O
this	O	O
.	O	O
The	O	O
writers	O	O
of	O	O
SE	O	O
try	O	O
to	O	O
squeeze	O	O
everything	O	O
they	O	O
can	O	O
out	O	O
of	O	O
it	O	O
.	O	O
But	O	O
I	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
worried	O	O
about	O	O
a	O	O
performance	O	O
hit	O	O
in	O	O
this	O	O
case	O	O
:	O	O
newInstance	O	O
and	O	O
copyOf	B-api_mention	O
are	O	O
HotSpot	O	O
intrinsics	O	O
.	O	O
This	O	O
means	O	O
that	O	O
ideally	O	O
calls	O	O
to	O	O
these	O	O
methods	O	O
get	O	O
replaced	O	O
with	O	O
machine	O	O
-	O	O
specific	O	O
assembly	O	O
.	O	O
Anecdotally	O	O
,	O	O
I	O	O
ran	O	O
some	O	O
tests	O	O
and	O	O
found	O	O
the	O	O
difference	O	O
between	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
.	O	O
.	O	O
.	O	O
]	O	O
and	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
be	O	O
negligible	O	O
.	O	O
The	O	O
code	O	O
in	O	O
the	O	O
question	O	O
is	O	O
probably	O	O
a	O	O
relic	O	O
,	O	O
although	O	O
it	O	O
may	O	O
still	O	O
be	O	O
useful	O	O
on	O	O
less	O	O
well	O	O
-	O	O
equipped	O	O
JVMs	O	O
.	O	O
Reflection	O	O
can	O	O
also	O	O
be	O	O
disabled	O	O
in	O	O
certain	O	O
contexts	O	O
with	O	O
strict	O	O
security	O	O
(	O	O
such	O	O
as	O	O
an	O	O
applet	O	O
)	O	O
,	O	O
but	O	O
not	O	O
typically	O	O
for	O	O
a	O	O
normal	O	O
desktop	O	O
application	O	O
.	O	O
#	O	O
blockquote	O	O
In	O	O
general	O	O
,	O	O
you	O	O
will	O	O
probably	O	O
never	O	O
use	O	O
this	O	O
overload	O	O
.	O	O
This	O	O
overload	O	O
is	O	O
only	O	O
useful	O	O
if	O	O
you	O	O
want	O	O
to	O	O
change	O	O
the	O	O
type	O	O
of	O	O
the	O	O
array	O	O
.	O	O
#	O	O
li	O	O
Widening	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
Narrowing	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
'	O	O
s	O	O
more	O	O
typical	O	O
to	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	O
T	I-api_mention	O
[	I-api_mention	O
]	I-api_mention	O
,	I-api_mention	O
int	I-api_mention	O
)	I-api_mention	O
.	O	O
Question	O	O
-	O	O
25850328	O	O
,	O	O
answer	O	O
-	O	O
25850622	O	O
a	O	O
.	O	O
I	O	O
have	O	O
always	O	O
seen	O	O
them	O	O
as	O	O
a	O	O
design	O	O
pattern	O	O
and	O	O
nothing	O	O
JVM	O	O
-	O	O
Special	O	O
I	O	O
have	O	O
used	O	O
that	O	O
pattern	O	O
in	O	O
several	O	O
situations	O	O
.	O	O
c	O	O
.	O	O
I	O	O
beleive	O	O
that	O	O
using	O	O
Annotations	B-api_mention	B-api_mention
to	O	O
mark	O	O
something	O	O
is	O	O
a	O	O
better	O	O
solution	O	O
then	O	O
using	O	O
marker	O	B-api_mention
interfaces	O	O
.	O	O
Simply	O	O
because	O	O
Interfaces	B-api_mention	O
are	O	O
in	O	O
the	O	O
first	O	O
place	O	O
aimed	O	O
to	O	O
define	O	O
common	O	O
interfaces	O	O
of	O	O
Types	O	O
/	O	O
Classes	O	O
.	O	O
They	O	O
are	O	O
part	O	O
of	O	O
the	O	O
class	O	O
-	O	O
hierachy	O	O
.	O	O
Annotations	O	B-api_mention
are	O	O
aimed	O	O
to	O	O
provide	O	O
Meta	O	O
-	O	O
Informations	O	O
to	O	O
Code	O	O
,	O	O
and	O	O
I	O	O
think	O	O
that	O	O
marker	O	O
are	O	O
meta	O	O
-	O	O
informations	O	O
.	O	O
So	O	O
they	O	O
are	O	O
exactly	O	O
for	O	O
that	O	O
use	O	O
-	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
19235606	O	O
I	O	O
am	O	O
having	O	O
trouble	O	O
understanding	O	O
the	O	O
Stream	B-api_mention	B-api_mention
interface	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
especially	O	O
where	O	O
it	O	O
has	O	O
to	O	O
do	O	O
with	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
Collector	B-api_mention	B-api_mention
interfaces	O	O
.	O	O
My	O	O
problem	O	O
is	O	O
that	O	O
I	O	O
simply	O	O
can	O	O
'	O	O
t	O	O
understand	O	O
yet	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
the	O	O
Collector	B-api_mention	B-api_mention
interfaces	O	O
,	O	O
and	O	O
as	O	O
a	O	O
result	O	O
the	O	O
Stream	B-api_mention	B-api_mention
interface	O	O
is	O	O
still	O	O
somewhat	O	O
obscure	O	O
to	O	O
me	O	O
.	O	O
What	O	O
exactly	O	O
is	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
a	O	O
Collector	B-api_mention	B-api_mention
,	O	O
and	O	O
how	O	O
can	O	O
I	O	O
use	O	O
them	O	O
?	O	O
If	O	O
I	O	O
am	O	O
willing	O	O
to	O	O
write	O	O
my	O	O
own	O	O
Spliterator	B-api_mention	B-api_mention
or	O	O
Collector	B-api_mention	B-api_mention
(	O	O
and	O	O
probably	O	O
my	O	O
own	O	O
Stream	B-api_mention	B-api_mention
in	O	O
that	O	O
process	O	O
)	O	O
,	O	O
what	O	O
should	O	O
I	O	O
do	O	O
and	O	O
not	O	O
do	O	O
?	O	O
I	O	O
read	O	O
some	O	O
examples	O	O
scattered	O	O
around	O	O
the	O	O
web	O	O
,	O	O
but	O	O
since	O	O
everything	O	O
here	O	O
is	O	O
stil	O	O
new	O	O
and	O	O
subject	O	O
to	O	O
changes	O	O
,	O	O
examples	O	O
and	O	O
tutorials	O	O
are	O	O
still	O	O
very	O	O
sparse	O	O
.	O	O
Question	O	O
-	O	O
29494800	O	O
I	O	O
have	O	O
trouble	O	O
understanding	O	O
the	O	O
source	O	O
code	O	O
of	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
.	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
what	O	O
is	O	O
this	O	O
line	O	O
checking	O	O
?	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
newType	O	O
=	O	O
=	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	B-api_mention
class	O	I-api_mention
#	O	O
li	O	O
What	O	O
are	O	O
the	O	O
differences	O	O
between	O	O
(	O	O
T	O	O
[	O	O
]	O	O
)	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
newLength	O	O
]	O	O
and	O	O
(	O	O
T	O	O
[	O	O
]	O	O
)	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
why	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
not	O	O
good	O	O
enough	O	O
for	O	O
both	O	O
cases	O	O
?	O	O
#	O	O
li	O	O
This	O	O
following	O	O
line	O	O
compiles	O	O
,	O	O
but	O	O
crashes	O	O
at	O	O
run	O	O
time	O	O
(	O	O
as	O	O
expected	O	O
)	O	O
.	O	O
When	O	O
should	O	O
I	O	O
use	O	O
this	O	O
method	O	O
?	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
nums	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
12468764	O	O
,	O	O
answer	O	O
-	O	O
24537575	O	O
I	O	O
'	O	O
ve	O	O
found	O	O
a	O	O
very	O	O
nice	O	O
and	O	O
concise	O	O
solution	O	O
,	O	O
especially	O	O
useful	O	O
when	O	O
you	O	O
cannot	O	O
modify	O	O
enum	O	O
classes	O	O
as	O	O
it	O	O
was	O	O
in	O	O
my	O	O
case	O	O
.	O	O
Then	O	O
you	O	O
should	O	O
provide	O	O
a	O	O
custom	O	O
ObjectMapper	B-api_mention	B-api_mention
with	O	O
a	O	O
certain	O	O
feature	O	O
enabled	O	O
.	O	O
Those	O	O
features	O	O
are	O	O
available	O	O
since	O	O
Jackson	O	O
1	O	O
.	O	O
6	O	O
.	O	O
So	O	O
you	O	O
only	O	O
need	O	O
to	O	O
write	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
your	O	O
enum	O	O
.	O	O
#	O	O
pre	O	O
There	O	O
are	O	O
more	O	O
enum	O	O
-	O	O
related	O	O
features	O	O
available	O	O
,	O	O
see	O	O
here	O	O
:	O	O
#	O	O
a	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
30081520	O	O
,	O	O
answer	O	O
-	O	O
30081600	O	O
From	O	O
Objects	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
return	O	O
(	O	O
args	O	O
)	O	O
|	O	O
|	O	O
(	O	O
a	O	O
!	O	O
=	O	O
null	O	O
&	O	O
&	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
;	O	O
Very	O	O
simple	O	O
,	O	O
self	O	O
-	O	O
explaining	O	O
and	O	O
elegant	O	O
.	O	O
Question	O	O
-	O	O
32323081	O	O
,	O	O
answer	O	O
-	O	O
32323305	O	O
Any	O	O
lambda	B-api_mention	O
which	O	O
could	O	O
be	O	O
accepted	O	O
as	O	O
a	O	O
Supplier	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
can	O	O
also	O	O
be	O	O
accepted	O	O
as	O	O
a	O	O
ThrowingSupplier	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
The	O	O
following	O	O
compiles	O	O
:	O	O
#	O	O
pre	O	O
Given	O	O
the	O	O
above	O	O
,	O	O
you	O	O
probably	O	O
don	O	O
'	O	O
t	O	O
need	O	O
this	O	O
,	O	O
but	O	O
if	O	O
foo	O	O
must	O	O
accept	O	O
a	O	O
non	O	O
-	O	O
throwing	O	O
Supplier	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
you	O	O
can	O	O
always	O	O
wrap	O	O
the	O	O
Exception	B-api_mention	B-api_mention
-	O	O
throwing	O	O
method	O	O
in	O	O
a	O	O
method	O	O
which	O	O
launders	O	O
it	O	O
into	O	O
an	O	O
unchecked	O	O
Exception	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
18777989	O	O
,	O	O
answer	O	O
-	O	O
18778228	O	O
You	O	O
made	O	O
a	O	O
good	O	O
summery	O	O
of	O	O
the	O	O
practical	O	O
differences	O	O
in	O	O
use	O	O
and	O	O
implementation	O	O
but	O	O
did	O	O
not	O	O
say	O	O
anything	O	O
about	O	O
the	O	O
difference	O	O
in	O	O
meaning	O	O
.	O	O
An	O	O
interface	O	O
is	O	O
a	O	O
description	O	O
of	O	O
the	O	O
behaviour	O	O
an	O	O
implementing	O	O
class	O	O
will	O	O
have	O	O
.	O	O
The	O	O
implementing	O	O
class	O	O
ensures	O	O
,	O	O
that	O	O
it	O	O
will	O	O
have	O	O
these	O	O
methods	O	O
that	O	O
can	O	O
be	O	O
used	O	O
on	O	O
it	O	O
.	O	O
It	O	O
is	O	O
basically	O	O
a	O	O
contract	O	O
or	O	O
a	O	O
promise	O	O
the	O	O
class	O	O
has	O	O
to	O	O
make	O	O
.	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
a	O	O
basis	O	O
for	O	O
different	O	O
subclasses	O	O
that	O	O
share	O	O
behaviour	O	O
which	O	O
does	O	O
not	O	O
need	O	O
to	O	O
be	O	O
repeatedly	O	O
be	O	O
created	O	O
.	O	O
Subclasses	O	O
must	O	O
complete	O	O
the	O	O
behaviour	O	O
and	O	O
have	O	O
the	O	O
option	O	O
to	O	O
override	O	O
predefine	O	O
behaviour	O	O
(	O	O
as	O	O
long	O	O
as	O	O
it	O	O
is	O	O
not	O	O
defined	O	O
as	O	O
final	O	O
or	O	O
private	O	O
)	O	O
.	O	O
You	O	O
will	O	O
find	O	O
good	O	O
examples	O	O
in	O	O
the	O	O
java	O	O
.	O	O
util	O	O
package	O	O
which	O	O
includes	O	O
interfaces	O	O
like	O	O
List	B-api_mention	B-api_mention
and	O	O
abstract	O	O
classes	O	O
like	O	O
AbstractList	B-api_mention	B-api_mention
which	O	O
already	O	O
implements	O	O
the	O	O
interface	O	O
.	O	O
The	O	O
official	O	O
documentation	O	O
describes	O	O
the	O	O
AbstractList	B-api_mention	B-api_mention
as	O	O
follows	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
10631715	O	O
,	O	O
answer	O	O
-	O	O
30270403	O	O
There	O	O
is	O	O
a	O	O
function	O	O
called	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
that	O	O
can	O	O
remove	O	O
all	O	O
whitespaces	O	O
by	O	O
replacing	O	O
them	O	O
with	O	O
whatever	O	O
you	O	O
want	O	O
.	O	O
As	O	O
an	O	O
example	O	O
#	O	O
pre	O	O
will	O	O
give	O	O
you	O	O
:	O	O
First	O	O
:	O	O
15	O	O
.	O	O
94	O	O
,	O	O
Second	O	O
:	O	O
16	O	O
.	O	O
01	O	O
Question	O	O
-	O	O
10904911	O	O
,	O	O
answer	O	O
-	O	O
10904956	O	O
What	O	O
you	O	O
want	O	O
is	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
is	O	O
a	O	O
static	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
helper	O	O
method	O	O
for	O	O
every	O	O
different	O	O
primitive	O	O
java	O	O
type	O	O
;	O	O
the	O	O
one	O	O
for	O	O
int	O	O
[	O	O
]	O	O
says	O	O
this	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
15430247	O	O
The	O	O
usual	O	O
constructor	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
:	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
there	O	O
is	O	O
also	O	O
an	O	O
overloaded	O	O
constructor	O	O
with	O	O
a	O	O
parameter	O	O
for	O	O
its	O	O
initial	O	O
capacity	O	O
:	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Why	O	O
is	O	O
it	O	O
useful	O	O
to	O	O
create	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
with	O	O
an	O	O
initial	O	O
capacity	O	O
when	O	O
we	O	O
can	O	O
append	O	O
to	O	O
it	O	O
as	O	O
we	O	O
please	O	O
?	O	O
Question	O	O
-	O	O
18532488	O	O
,	O	O
answer	O	O
-	O	O
24296741	O	O
Here	O	O
'	O	O
s	O	O
another	O	O
technique	O	O
I	O	O
ran	O	O
across	O	O
the	O	O
other	O	O
day	O	O
:	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
call	O	O
creates	O	O
a	O	O
List	B-api_mention	B-api_mention
containing	O	O
n	O	O
copies	O	O
of	O	O
whatever	O	O
value	O	O
you	O	O
provide	O	O
.	O	O
In	O	O
this	O	O
case	O	O
it	O	O
'	O	O
s	O	O
the	O	O
boxed	O	O
Integer	O	B-api_mention
value	O	O
1	O	O
.	O	O
Of	O	O
course	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
actually	O	O
create	O	O
a	O	O
list	O	O
with	O	O
n	O	O
elements	O	O
;	O	O
it	O	O
creates	O	O
a	O	O
"	O	O
virtualized	O	O
"	O	O
list	O	O
that	O	O
contains	O	O
only	O	O
the	O	O
value	O	O
and	O	O
the	O	O
length	O	O
,	O	O
and	O	O
any	O	O
call	O	O
to	O	O
get	O	O
within	O	O
range	O	O
just	O	O
returns	O	O
the	O	O
value	O	O
.	O	O
The	O	O
nCopies	B-api_mention	O
method	O	O
has	O	O
been	O	O
around	O	O
since	O	O
the	O	O
Collections	B-api_mention	B-api_mention
Framework	O	O
was	O	O
introduced	O	O
way	O	O
back	O	O
in	O	O
JDK	O	O
1	O	O
.	O	O
2	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
the	O	O
ability	O	O
to	O	O
create	O	O
a	O	O
stream	O	O
from	O	O
its	O	O
result	O	O
was	O	O
added	O	O
in	O	O
Java	O	O
SE	O	O
8	O	O
.	O	O
Big	O	O
deal	O	O
,	O	O
another	O	O
way	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
in	O	O
about	O	O
the	O	O
same	O	O
number	O	O
of	O	O
lines	O	O
.	O	O
However	O	O
,	O	O
this	O	O
technique	O	O
is	O	O
faster	O	O
than	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
generate	I-api_mention	I-api_mention
and	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
iterate	I-api_mention	I-api_mention
approaches	O	O
,	O	O
and	O	O
surprisingly	O	O
,	O	O
it	O	O
'	O	O
s	O	O
also	O	O
faster	O	O
than	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
approach	O	O
.	O	O
For	O	O
iterate	O	O
and	O	O
generate	O	O
the	O	O
result	O	O
is	O	O
perhaps	O	O
not	O	O
too	O	O
surprising	O	O
.	O	O
The	O	O
streams	O	O
framework	O	O
(	O	O
really	O	O
,	O	O
the	O	O
Spliterators	O	O
for	O	O
these	O	O
streams	O	O
)	O	O
is	O	O
built	O	O
on	O	O
the	O	O
assumption	O	O
that	O	O
the	O	O
lambdas	O	O
will	O	O
potentially	O	O
generate	O	O
different	O	O
values	O	O
each	O	O
time	O	O
,	O	O
and	O	O
that	O	O
they	O	O
will	O	O
generate	O	O
an	O	O
unbounded	O	O
number	O	O
of	O	O
results	O	O
.	O	O
This	O	O
makes	O	O
parallel	O	O
splitting	O	O
particularly	O	O
difficult	O	O
.	O	O
The	O	O
iterate	O	O
method	O	O
is	O	O
also	O	O
problematic	O	O
for	O	O
this	O	O
case	O	O
because	O	O
each	O	O
call	O	O
requires	O	O
the	O	O
result	O	O
of	O	O
the	O	O
previous	O	O
one	O	O
.	O	O
So	O	O
the	O	O
streams	O	O
using	O	O
generate	O	O
and	O	O
iterate	O	O
don	O	O
'	O	O
t	O	O
do	O	O
very	O	O
well	O	O
for	O	O
generating	O	O
repeated	O	O
constants	O	O
.	O	O
The	O	O
relatively	O	O
poor	O	O
performance	O	O
of	O	O
range	O	O
is	O	O
surprising	O	O
.	O	O
This	O	O
too	O	O
is	O	O
virtualized	O	O
,	O	O
so	O	O
the	O	O
elements	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
all	O	O
exist	O	O
in	O	O
memory	O	O
,	O	O
and	O	O
the	O	O
size	O	O
is	O	O
known	O	O
up	O	O
front	O	O
.	O	O
This	O	O
should	O	O
make	O	O
for	O	O
a	O	O
fast	O	O
and	O	O
easily	O	O
parallelizable	O	O
spliterator	O	O
.	O	O
But	O	O
it	O	O
surprisingly	O	O
didn	O	O
'	O	O
t	O	O
do	O	O
very	O	O
well	O	O
.	O	O
Perhaps	O	O
the	O	O
reason	O	O
is	O	O
that	O	O
range	O	O
has	O	O
to	O	O
compute	O	O
a	O	O
value	O	O
for	O	O
each	O	O
element	O	O
of	O	O
the	O	O
range	O	O
and	O	O
then	O	O
call	O	O
a	O	O
function	O	O
on	O	O
it	O	O
.	O	O
But	O	O
this	O	O
function	O	O
just	O	O
ignores	O	O
its	O	O
input	O	O
and	O	O
returns	O	O
a	O	O
constant	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
surprised	O	O
this	O	O
isn	O	O
'	O	O
t	O	O
inlined	O	O
and	O	O
killed	O	O
.	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
technique	O	O
has	O	O
to	O	O
do	O	O
boxing	O	O
/	O	O
unboxing	O	O
in	O	O
order	O	O
to	O	O
handle	O	O
the	O	O
values	O	O
,	O	O
since	O	O
there	O	O
are	O	O
no	O	O
primitive	O	O
specializations	O	O
of	O	O
List	B-api_mention	B-api_mention
.	O	O
Since	O	O
the	O	O
value	O	O
is	O	O
the	O	O
same	O	O
every	O	O
time	O	O
,	O	O
it	O	O
'	O	O
s	O	O
basically	O	O
boxed	O	O
once	O	O
and	O	O
that	O	O
box	O	O
is	O	O
shared	O	O
by	O	O
all	O	O
n	O	O
copies	O	O
.	O	O
I	O	O
suspect	O	O
boxing	O	O
/	O	O
unboxing	O	O
is	O	O
highly	O	O
optimized	O	O
,	O	O
even	O	O
intrinsified	O	O
,	O	O
and	O	O
it	O	O
can	O	O
be	O	O
inlined	O	O
well	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
are	O	O
the	O	O
JMH	O	O
results	O	O
:	O	O
(	O	O
2	O	O
.	O	O
8GHz	O	O
Core2Duo	O	O
)	O	O
#	O	O
pre	O	O
There	O	O
is	O	O
a	O	O
fair	O	O
amount	O	O
of	O	O
variance	O	O
in	O	O
the	O	O
ncopies	O	O
version	O	O
,	O	O
but	O	O
overall	O	O
it	O	O
seems	O	O
comfortably	O	O
20x	O	O
faster	O	O
than	O	O
the	O	O
range	O	O
version	O	O
.	O	O
(	O	O
I	O	O
'	O	O
d	O	O
be	O	O
quite	O	O
willing	O	O
to	O	O
believe	O	O
that	O	O
I	O	O
'	O	O
ve	O	O
done	O	O
something	O	O
wrong	O	O
,	O	O
though	O	O
.	O	O
)	O	O
I	O	O
'	O	O
m	O	O
surprised	O	O
at	O	O
how	O	O
well	O	O
the	O	O
nCopies	B-api_mention	O
technique	O	O
works	O	O
.	O	O
Internally	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
do	O	O
very	O	O
much	O	O
special	O	O
,	O	O
with	O	O
the	O	O
stream	O	O
of	O	O
the	O	O
virtualized	O	O
list	O	O
simply	O	O
being	O	O
implemented	O	O
using	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
!	O	O
I	O	O
had	O	O
expected	O	O
that	O	O
it	O	O
would	O	O
be	O	O
necessary	O	O
to	O	O
create	O	O
a	O	O
specialized	O	O
spliterator	O	O
to	O	O
get	O	O
this	O	O
to	O	O
go	O	O
fast	O	O
,	O	O
but	O	O
it	O	O
already	O	O
seems	O	O
to	O	O
be	O	O
pretty	O	O
good	O	O
.	O	O
Question	O	O
-	O	O
25606833	O	O
,	O	O
answer	O	O
-	O	O
25757572	O	O
There	O	O
are	O	O
several	O	O
issues	O	O
here	O	O
.	O	O
#	O	O
li	O	O
Any	O	O
solution	O	O
based	O	O
on	O	O
reading	O	O
lines	O	O
is	O	O
going	O	O
to	O	O
process	O	O
each	O	O
character	O	O
twice	O	O
.	O	O
Compilers	O	O
for	O	O
example	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
,	O	O
they	O	O
read	O	O
one	O	O
character	O	O
at	O	O
a	O	O
time	O	O
and	O	O
despatch	O	O
on	O	O
it	O	O
directly	O	O
.	O	O
#	O	O
li	O	O
Any	O	O
solution	O	O
based	O	O
on	O	O
readLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
going	O	O
to	O	O
create	O	O
Strings	B-api_mention	O
.	O	O
#	O	O
li	O	O
You	O	O
are	O	O
using	O	O
different	O	O
buffer	O	O
sizes	O	O
.	O	O
#	O	O
li	O	O
You	O	O
are	O	O
using	O	O
different	O	O
I	O	O
/	O	O
O	O	O
technologies	O	O
.	O	O
#	O	O
li	O	O
In	O	O
some	O	O
cases	O	O
you	O	O
are	O	O
using	O	O
character	O	O
conversion	O	O
,	O	O
while	O	O
in	O	O
others	O	O
you	O	O
aren	O	O
'	O	O
t	O	O
.	O	O
#	O	O
li	O	O
You	O	O
'	O	O
re	O	O
over	O	O
-	O	O
analyzing	O	O
the	O	O
file	O	O
.	O	O
You	O	O
don	O	O
'	O	O
t	O	O
really	O	O
care	O	O
where	O	O
the	O	O
white	O	O
space	O	O
is	O	O
,	O	O
or	O	O
how	O	O
much	O	O
of	O	O
it	O	O
there	O	O
is	O	O
,	O	O
as	O	O
long	O	O
as	O	O
it	O	O
separates	O	O
the	O	O
numbers	O	O
from	O	O
each	O	O
other	O	O
.	O	O
My	O	O
solution	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
27908213	O	O
,	O	O
answer	O	O
-	O	O
27908294	O	O
The	O	O
Oracle	O	O
documentation	O	O
about	O	O
Enum	B-api_mention	O
says	O	O
(	O	O
first	O	O
line	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
If	O	O
this	O	O
is	O	O
true	O	O
then	O	O
,	O	O
yes	O	O
,	O	O
your	O	O
enum1	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
enum2	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
guaranteed	O	O
to	O	O
be	O	O
true	O	O
if	O	O
the	O	O
names	O	O
are	O	O
the	O	O
same	O	O
.	O	O
Also	O	O
,	O	O
in	O	O
the	O	O
method	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
For	O	O
example	O	O
,	O	O
if	O	O
you	O	O
had	O	O
two	O	O
enums	O	O
,	O	O
Days	O	O
and	O	O
MyDays	O	B-api_mention
,	O	O
where	O	O
SUNDAY	O	O
is	O	O
a	O	O
common	O	O
value	O	O
,	O	O
=	O	O
=	O	O
between	O	O
the	O	O
enum	O	O
object	O	O
values	O	O
,	O	O
SUNDAY	O	O
will	O	O
return	O	O
true	O	O
as	O	O
you	O	O
are	O	O
comparing	O	O
two	O	O
strings	O	O
-	O	O
see	O	O
the	O	O
working	O	O
example	O	O
in	O	O
#	O	O
a	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276469	O	O
It	O	O
will	O	O
be	O	O
fine	O	O
if	O	O
you	O	O
only	O	O
close	O	O
the	O	O
last	O	O
stream	O	O
-	O	O
the	O	O
close	O	O
call	O	O
will	O	O
be	O	O
send	O	O
to	O	O
the	O	O
underlying	O	O
streams	O	O
,	O	O
too	O	O
.	O	O
Question	O	O
-	O	O
27747562	O	O
In	O	O
the	O	O
following	O	O
code	O	O
,	O	O
a	O	O
dowcast	O	O
to	O	O
an	O	O
apparently	O	O
incompatible	O	O
type	O	O
passes	O	O
compilation	O	O
:	O	O
#	O	O
pre	O	O
Item	B-api_mention	O
and	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
are	O	O
disparate	O	O
types	O	O
so	O	O
the	O	O
cast	O	O
can	O	O
never	O	O
succeed	O	O
.	O	O
Why	O	O
did	O	O
the	O	O
compiler	O	O
allow	O	O
this	O	O
?	O	O
Question	O	O
-	O	O
10827872	O	O
,	O	O
answer	O	O
-	O	O
10827945	O	O
The	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
overloaded	O	O
to	O	O
accept	O	O
both	O	O
a	O	O
primitive	O	O
char	O	O
and	O	O
a	O	O
CharSequence	B-api_mention	B-api_mention
as	O	O
arguments	O	O
.	O	O
Now	O	O
as	O	O
far	O	O
as	O	O
the	O	O
performance	O	O
is	O	O
concerned	O	O
,	O	O
the	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
a	O	O
bit	O	O
faster	O	O
than	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
because	O	O
the	O	O
later	O	O
first	O	O
compiles	O	O
the	O	O
regex	O	O
pattern	O	O
and	O	O
then	O	O
matches	O	O
before	O	O
finally	O	O
replacing	O	O
whereas	O	O
the	O	O
former	O	O
simply	O	O
matches	O	O
for	O	O
the	O	O
provided	O	O
argument	O	O
and	O	O
replaces	O	O
.	O	O
Since	O	O
we	O	O
know	O	O
the	O	O
regex	O	O
pattern	O	O
matching	O	O
is	O	O
a	O	O
bit	O	O
more	O	O
complex	O	O
and	O	O
consequently	O	O
slower	O	O
,	O	O
then	O	O
preferring	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
over	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
suggested	O	O
whenever	O	O
possible	O	O
.	O	O
For	O	O
example	O	O
,	O	O
for	O	O
simple	O	O
substitutions	O	O
like	O	O
you	O	O
mentioned	O	O
,	O	O
it	O	O
is	O	O
better	O	O
to	O	O
use	O	O
:	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
of	O	O
:	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
:	O	O
the	O	O
above	O	O
conversion	O	O
method	O	O
arguments	O	O
are	O	O
system	O	O
-	O	O
dependent	O	O
.	O	O
Question	O	O
-	O	O
22694884	O	O
,	O	O
answer	O	O
-	O	O
22695031	O	O
Technically	O	O
there	O	O
'	O	O
s	O	O
an	O	O
ugly	O	O
'	O	O
workaround	O	O
'	O	O
that	O	O
involves	O	O
peek	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
an	O	O
AtomicInteger	B-api_mention	B-api_mention
,	O	O
but	O	O
really	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
be	O	O
using	O	O
that	O	O
.	O	O
What	O	O
I	O	O
do	O	O
in	O	O
these	O	O
cases	O	O
is	O	O
just	O	O
collecting	O	O
it	O	O
in	O	O
a	O	O
list	O	O
,	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
am	O	O
not	O	O
aware	O	O
of	O	O
a	O	O
way	O	O
to	O	O
do	O	O
this	O	O
in	O	O
the	O	O
API	O	O
,	O	O
meanwhile	O	O
I	O	O
will	O	O
work	O	O
on	O	O
another	O	O
example	O	O
involving	O	O
a	O	O
custom	O	O
element	O	O
.	O	O
Update	O	O
,	O	O
You	O	O
should	O	O
create	O	O
your	O	O
own	O	O
Collector	B-api_mention	B-api_mention
for	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
What	O	O
it	O	O
does	O	O
is	O	O
:	O	O
#	O	O
li	O	O
It	O	O
mimicks	O	O
the	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
collector	O	O
.	O	O
#	O	O
li	O	O
It	O	O
applies	O	O
an	O	O
extra	O	O
finisher	O	O
at	O	O
the	O	O
end	O	O
,	O	O
that	O	O
throws	O	O
an	O	O
exception	O	O
,	O	O
or	O	O
if	O	O
no	O	O
exception	O	O
,	O	O
returns	O	O
the	O	O
first	O	O
element	O	O
of	O	O
the	O	O
list	O	O
.	O	O
Used	O	O
as	O	O
:	O	O
User	B-api_mention	B-api_mention
resultUser	O	O
=	O	O
users	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
can	O	O
then	O	O
customize	O	O
this	O	O
singletonCollector	B-api_mention	B-api_mention
as	O	O
much	O	O
as	O	O
you	O	O
want	O	O
,	O	O
for	O	O
example	O	O
give	O	O
the	O	O
exception	O	O
as	O	O
argument	O	O
in	O	O
the	O	O
constructor	O	O
,	O	O
tweak	O	O
it	O	O
to	O	O
allow	O	O
two	O	O
values	O	O
,	O	O
and	O	O
more	O	O
.	O	O
New	O	O
update	O	O
,	O	O
I	O	O
revised	O	O
my	O	O
old	O	O
answer	O	O
once	O	O
more	O	O
for	O	O
singletonCollector	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
it	O	O
can	O	O
actually	O	O
be	O	O
obtained	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8275499	O	O
,	O	O
answer	O	O
-	O	O
8275761	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
defined	O	O
in	O	O
Object	B-api_mention	B-api_mention
class	O	O
with	O	O
the	O	O
following	O	O
signature	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
it	O	O
is	O	O
not	O	O
defined	O	O
as	O	O
static	O	O
,	O	O
you	O	O
can	O	O
not	O	O
call	O	O
it	O	O
within	O	O
a	O	O
static	O	O
code	O	O
block	O	O
.	O	O
See	O	O
these	O	O
answers	O	O
for	O	O
more	O	O
information	O	O
:	O	O
Q1	O	O
,	O	O
Q2	O	O
,	O	O
Q3	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
in	O	O
a	O	O
static	O	O
context	O	O
,	O	O
then	O	O
you	O	O
have	O	O
to	O	O
use	O	O
the	O	O
class	O	O
literal	O	O
expression	O	O
to	O	O
get	O	O
the	O	O
Class	B-api_mention	B-api_mention
,	O	O
so	O	O
you	O	O
basically	O	O
have	O	O
to	O	O
do	O	O
like	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
type	O	O
of	O	O
expression	O	O
is	O	O
called	O	O
Class	B-api_mention	O
Literals	O	O
and	O	O
they	O	O
are	O	O
explained	O	O
in	O	O
Java	O	O
Language	O	O
Specification	O	O
Book	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
blockquote	O	O
You	O	O
can	O	O
also	O	O
find	O	O
information	O	O
about	O	O
this	O	O
subject	O	O
on	O	O
API	O	O
documentation	O	O
for	O	O
Class	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26819171	O	O
This	O	O
is	O	O
not	O	O
an	O	O
easy	O	O
problem	O	O
.	O	O
And	O	O
the	O	O
more	O	O
search	O	O
-	O	O
replacement	O	O
parameters	O	O
you	O	O
have	O	O
,	O	O
the	O	O
trickier	O	O
it	O	O
gets	O	O
.	O	O
You	O	O
have	O	O
several	O	O
options	O	O
,	O	O
scattered	O	O
on	O	O
the	O	O
palette	O	O
of	O	O
ugly	O	O
-	O	O
elegant	O	O
,	O	O
efficient	O	O
-	O	O
wasteful	O	O
:	O	O
#	O	O
li	O	O
Use	O	O
StringUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replaceEach	I-api_mention	I-api_mention
from	O	O
Apache	O	O
Commons	O	O
as	O	O
@	O	O
AlanHay	O	O
recommended	O	O
.	O	O
This	O	O
is	O	O
a	O	O
good	O	O
option	O	O
if	O	O
you	O	O
'	O	O
re	O	O
free	O	O
to	O	O
add	O	O
new	O	O
dependencies	O	O
in	O	O
your	O	O
project	O	O
.	O	O
You	O	O
might	O	O
get	O	O
lucky	O	O
:	O	O
the	O	O
dependency	O	O
might	O	O
be	O	O
included	O	O
already	O	O
in	O	O
your	O	O
project	O	O
#	O	O
li	O	O
Use	O	O
a	O	O
temporary	O	O
placeholder	O	O
as	O	O
@	O	O
Jeroen	O	O
suggested	O	O
,	O	O
and	O	O
perform	O	O
the	O	O
replacement	O	O
in	O	O
2	O	O
steps	O	O
:	O	O
#	O	O
li	O	O
Replace	O	O
all	O	O
search	O	O
patterns	O	O
with	O	O
a	O	O
unique	O	O
tag	O	O
that	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
in	O	O
the	O	O
original	O	O
text	O	O
#	O	O
li	O	O
Replace	O	O
the	O	O
placeholders	O	O
with	O	O
the	O	O
real	O	O
target	O	O
replacement	O	O
This	O	O
is	O	O
not	O	O
a	O	O
great	O	O
approach	O	O
,	O	O
for	O	O
several	O	O
reasons	O	O
:	O	O
it	O	O
needs	O	O
to	O	O
ensure	O	O
that	O	O
the	O	O
tags	O	O
used	O	O
in	O	O
the	O	O
first	O	O
step	O	O
are	O	O
really	O	O
unique	O	O
;	O	O
it	O	O
performs	O	O
more	O	O
string	O	O
replacement	O	O
operations	O	O
than	O	O
really	O	O
necessary	O	O
#	O	O
li	O	O
Build	O	O
a	O	O
regex	O	O
from	O	O
all	O	O
the	O	O
patterns	O	O
and	O	O
use	O	O
the	O	O
method	O	O
with	O	O
Matcher	B-api_mention	O
and	O	O
StringBuffer	B-api_mention	B-api_mention
as	O	O
suggested	O	O
by	O	O
@	O	O
arshajii	O	O
.	O	O
This	O	O
is	O	O
not	O	O
terrible	O	O
,	O	O
but	O	O
not	O	O
that	O	O
great	O	O
either	O	O
,	O	O
as	O	O
building	O	O
the	O	O
regex	O	O
is	O	O
kind	O	O
of	O	O
hackish	O	O
,	O	O
and	O	O
it	O	O
involves	O	O
StringBuffer	B-api_mention	B-api_mention
which	O	O
went	O	O
out	O	O
of	O	O
fashion	O	O
a	O	O
while	O	O
ago	O	O
in	O	O
favor	O	O
of	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
Use	O	O
a	O	O
recursive	O	O
solution	O	O
proposed	O	O
by	O	O
@	O	O
mjolka	O	O
,	O	O
by	O	O
splitting	O	O
the	O	O
string	O	O
at	O	O
the	O	O
matched	O	O
patterns	O	O
,	O	O
and	O	O
recursing	O	O
on	O	O
the	O	O
remaining	O	O
segments	O	O
.	O	O
This	O	O
is	O	O
a	O	O
fine	O	O
solution	O	O
,	O	O
compact	O	O
and	O	O
quite	O	O
elegant	O	O
.	O	O
Its	O	O
weakness	O	O
is	O	O
the	O	O
potentially	O	O
many	O	O
substring	O	O
and	O	O
concatenation	O	O
operations	O	O
,	O	O
and	O	O
the	O	O
stack	O	O
size	O	O
limits	O	O
that	O	O
apply	O	O
to	O	O
all	O	O
recursive	O	O
solutions	O	O
#	O	O
li	O	O
Split	O	B-api_mention
the	O	O
text	O	O
to	O	O
words	O	O
and	O	O
use	O	O
Java	O	O
8	O	O
streams	O	O
to	O	O
perform	O	O
the	O	O
replacements	O	O
elegantly	O	O
as	O	O
@	O	O
msandiford	O	O
suggested	O	O
,	O	O
but	O	O
of	O	O
course	O	O
that	O	O
only	O	O
works	O	O
if	O	O
you	O	O
are	O	O
ok	O	O
with	O	O
splitting	O	O
at	O	O
word	O	O
boundaries	O	O
,	O	O
which	O	O
makes	O	O
it	O	O
not	O	O
suitable	O	O
as	O	O
a	O	O
general	O	O
solution	O	O
Here	O	O
'	O	O
s	O	O
my	O	O
version	O	O
,	O	O
based	O	O
on	O	O
ideas	O	O
borrowed	O	O
from	O	O
Apache	O	O
'	O	O
s	O	O
implementation	O	O
.	O	O
It	O	O
'	O	O
s	O	O
neither	O	O
simple	O	O
nor	O	O
elegant	O	O
,	O	O
but	O	O
it	O	O
works	O	O
,	O	O
and	O	O
should	O	O
be	O	O
relatively	O	O
efficient	O	O
,	O	O
without	O	O
unnecessary	O	O
steps	O	O
.	O	O
In	O	O
a	O	O
nutshell	O	O
,	O	O
it	O	O
works	O	O
like	O	O
this	O	O
:	O	O
repeatedly	O	O
find	O	O
the	O	O
next	O	O
matching	O	O
search	O	O
pattern	O	O
in	O	O
the	O	O
text	O	O
,	O	O
and	O	O
use	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
to	O	O
accumulate	O	O
the	O	O
unmatched	O	O
segments	O	O
and	O	O
the	O	O
replacements	O	O
.	O	O
#	O	O
pre	O	O
Unit	O	O
tests	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29280857	O	O
,	O	O
answer	O	O
-	O	O
29382161	O	O
As	O	O
stated	O	O
previously	O	O
,	O	O
you	O	O
should	O	O
lock	O	O
on	O	O
both	O	O
accounts	O	O
,	O	O
always	O	O
in	O	O
the	O	O
same	O	O
order	O	O
.	O	O
The	O	O
key	O	O
part	O	O
,	O	O
however	O	O
,	O	O
is	O	O
ensuring	O	O
both	O	O
high	O	O
granularity	O	O
and	O	O
singularity	O	O
across	O	O
the	O	O
VM	O	O
instance	O	O
.	O	O
This	O	O
can	O	O
be	O	O
done	O	O
using	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6684665	O	O
,	O	O
answer	O	O
-	O	O
6684852	O	O
What	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
is	O	O
create	O	O
a	O	O
string	O	O
representation	O	O
of	O	O
each	O	O
individual	O	O
byte	O	O
in	O	O
your	O	O
byteArray	B-api_mention	O
.	O	O
Please	O	O
check	O	O
the	O	O
API	O	O
documentation	O	O
Arrays	B-api_mention	O
API	O	O
To	O	O
convert	O	O
your	O	O
response	O	O
string	O	O
back	O	O
to	O	O
the	O	O
original	O	O
byte	O	O
array	O	O
,	O	O
you	O	O
have	O	O
to	O	O
use	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
something	O	O
and	O	O
convert	O	O
it	O	O
into	O	O
a	O	O
collection	O	O
and	O	O
then	O	O
convert	O	O
each	O	O
individual	O	O
item	O	O
in	O	O
there	O	O
to	O	O
a	O	O
byte	O	O
to	O	O
recreate	O	O
your	O	O
byte	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
23674624	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
at	O	O
the	O	O
docs	O	O
for	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
,	O	O
and	O	O
I	O	O
see	O	O
an	O	O
toArray	B-api_mention	B-api_mention
method	O	O
,	O	O
but	O	O
no	O	O
way	O	O
to	O	O
go	O	O
directly	O	O
to	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
Surely	O	O
there	O	O
is	O	O
a	O	O
way	O	O
to	O	O
convert	O	O
a	O	O
Stream	B-api_mention	B-api_mention
to	O	O
a	O	O
List	B-api_mention	B-api_mention
?	O	O
Question	O	O
-	O	O
16324831	O	O
,	O	O
answer	O	O
-	O	O
16324963	O	O
Note	O	O
:	O	O
everything	O	O
in	O	O
this	O	O
post	O	O
is	O	O
in	O	O
the	O	O
source	O	O
of	O	O
Java7	O	O
-	O	O
b147	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseDouble	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
goes	O	O
into	O	O
a	O	O
Sun	O	O
library	O	O
(	O	O
in	O	O
sun	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
misc	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
FloatingDecimal	I-api_mention	I-api_mention
)	O	O
the	O	O
first	O	O
important	O	O
thing	O	O
that	O	O
happens	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
done	O	O
manually	O	O
in	O	O
the	O	O
Integer	B-api_mention	B-api_mention
class	O	O
.	O	O
The	O	O
first	O	O
important	O	O
thing	O	O
that	O	O
happens	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
would	O	O
guess	O	O
there	O	O
are	O	O
two	O	O
different	O	O
authors	O	O
.	O	O
Question	O	O
-	O	O
31188231	O	O
It	O	O
has	O	O
generally	O	O
been	O	O
the	O	O
case	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
has	O	O
been	O	O
forward	O	O
compatible	O	O
.	O	O
Until	O	O
Java	O	O
8	O	O
,	O	O
as	O	O
far	O	O
as	O	O
I	O	O
know	O	O
,	O	O
both	O	O
compiled	O	O
classes	O	O
and	O	O
source	O	O
have	O	O
been	O	O
forward	O	O
compatible	O	O
with	O	O
later	O	O
JDK	O	O
/	O	O
JVM	O	O
releases	O	O
.	O	O
[	O	O
Update	O	O
:	O	O
this	O	O
is	O	O
not	O	O
correct	O	O
,	O	O
see	O	O
comments	O	O
re	O	O
'	O	O
enum	O	O
'	O	O
,	O	O
etc	O	O
,	O	O
below	O	O
.	O	O
]	O	O
However	O	O
,	O	O
with	O	O
the	O	O
addition	O	O
of	O	O
default	O	O
methods	O	O
in	O	O
Java	O	O
8	O	O
this	O	O
appears	O	O
to	O	O
no	O	O
longer	O	O
be	O	O
the	O	O
case	O	O
.	O	O
For	O	O
example	O	O
,	O	O
a	O	O
library	O	O
I	O	O
have	O	O
been	O	O
using	O	O
has	O	O
an	O	O
implementation	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
List	I-api_mention	I-api_mention
which	O	O
includes	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
method	O	O
returns	O	O
a	O	O
copy	O	O
of	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
list	O	O
sorted	O	O
.	O	O
This	O	O
library	O	O
,	O	O
deployed	O	O
as	O	O
a	O	O
jar	O	O
file	O	O
dependency	O	O
,	O	O
worked	O	O
fine	O	O
in	O	O
a	O	O
project	O	O
being	O	O
built	O	O
using	O	O
JDK	O	O
1	O	O
.	O	O
8	O	O
.	O	O
However	O	O
,	O	O
later	O	O
I	O	O
had	O	O
occasion	O	O
to	O	O
recompile	O	O
the	O	O
library	O	O
itself	O	O
using	O	O
JDK	O	O
1	O	O
.	O	O
8	O	O
and	O	O
I	O	O
found	O	O
the	O	O
library	O	O
no	O	O
longer	O	O
compiles	O	O
:	O	O
the	O	O
List	B-api_mention	B-api_mention
-	O	O
implementing	O	O
class	O	O
with	O	O
its	O	O
own	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
now	O	O
conflicts	O	O
with	O	O
the	O	O
Java	O	O
8	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
List	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
default	O	O
method	O	O
.	O	O
The	O	O
Java	O	O
8	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
default	O	O
method	O	O
sorts	O	O
the	O	O
list	O	O
in	O	O
place	O	O
(	O	O
returns	O	O
void	O	O
)	O	O
;	O	O
my	O	O
library	O	O
'	O	O
s	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
-	O	O
since	O	O
it	O	O
returns	O	O
a	O	O
new	O	O
sorted	O	O
list	O	O
-	O	O
has	O	O
an	O	O
incompatible	O	O
signature	O	O
.	O	O
So	O	O
my	O	O
basic	O	O
question	O	O
is	O	O
:	O	O
#	O	O
li	O	O
Doesn	O	O
'	O	O
t	O	O
JDK	O	O
1	O	O
.	O	O
8	O	O
introduce	O	O
a	O	O
forward	O	O
incompatibility	O	O
for	O	O
Java	O	O
source	O	O
code	O	O
due	O	O
to	O	O
default	O	O
methods	O	O
?	O	O
Also	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
this	O	O
the	O	O
first	O	O
such	O	O
forward	O	O
incompatible	O	O
change	O	O
?	O	O
#	O	O
li	O	O
Was	O	O
this	O	O
considered	O	O
or	O	O
discussed	O	O
when	O	O
default	O	O
methods	O	O
where	O	O
designed	O	O
and	O	O
implemented	O	O
?	O	O
Is	O	O
it	O	O
documented	O	O
anywhere	O	O
?	O	O
#	O	O
li	O	O
Was	O	O
the	O	O
(	O	O
admittedly	O	O
small	O	O
)	O	O
inconvenience	O	O
discounted	O	O
versus	O	O
the	O	O
benefits	O	O
?	O	O
The	O	O
following	O	O
is	O	O
an	O	O
example	O	O
of	O	O
some	O	O
code	O	O
that	O	O
compiles	O	O
and	O	O
runs	O	O
under	O	O
1	O	O
.	O	O
7	O	O
and	O	O
runs	O	O
under	O	O
1	O	O
.	O	O
8	O	O
-	O	O
but	O	O
does	O	O
not	O	O
compile	O	O
under	O	O
1	O	O
.	O	O
8	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
following	O	O
shows	O	O
this	O	O
code	O	O
being	O	O
compiled	O	O
(	O	O
or	O	O
failing	O	O
to	O	O
)	O	O
and	O	O
being	O	O
run	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5839359	O	O
,	O	O
answer	O	O
-	O	O
5839392	O	O
You	O	O
'	O	O
re	O	O
essentially	O	O
running	O	O
out	O	O
of	O	O
memory	O	O
to	O	O
run	O	O
the	O	O
process	O	O
smoothly	O	O
.	O	O
Options	O	O
that	O	O
come	O	O
to	O	O
mind	O	O
:	O	O
#	O	O
li	O	O
Specify	O	O
more	O	O
memory	O	O
like	O	O
you	O	O
mentioned	O	O
,	O	O
try	O	O
something	O	O
in	O	O
between	O	O
like	O	O
-	O	O
Xmx512m	O	O
first	O	O
#	O	O
li	O	O
Work	O	O
with	O	O
smaller	O	O
batches	O	O
of	O	O
HashMap	B-api_mention	B-api_mention
objects	O	O
to	O	O
process	O	O
at	O	O
once	O	O
if	O	O
possible	O	O
#	O	O
li	O	O
If	O	O
you	O	O
have	O	O
a	O	O
lot	O	O
of	O	O
duplicate	O	O
strings	O	O
,	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
them	O	O
before	O	O
putting	O	O
them	O	O
into	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
#	O	O
li	O	O
Use	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
(	O	I-api_mention
int	O	I-api_mention
initialCapacity	O	I-api_mention
,	O	O
float	O	O
loadFactor	O	B-api_mention
)	O	O
constructor	O	O
to	O	O
tune	O	O
for	O	O
your	O	O
case	O	O
Question	O	O
-	O	O
5455794	O	O
,	O	O
answer	O	O
-	O	O
5455820	O	O
How	O	O
about	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Refer	O	O
here	O	O
.	O	O
Question	O	O
-	O	O
32693704	O	O
,	O	O
answer	O	O
-	O	O
32744190	O	O
There	O	O
is	O	O
no	O	O
actual	O	O
difference	O	O
in	O	O
the	O	O
functionality	O	O
between	O	O
the	O	O
2	O	O
version	O	O
'	O	O
s	O	O
loop	O	O
.	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
does	O	O
the	O	O
exact	O	O
same	O	O
thing	O	O
.	O	O
So	O	O
the	O	O
choice	O	O
to	O	O
use	O	O
it	O	O
or	O	O
not	O	O
may	O	O
not	O	O
necessarily	O	O
be	O	O
considered	O	O
a	O	O
mistake	O	O
.	O	O
It	O	O
is	O	O
left	O	O
up	O	O
to	O	O
the	O	O
developer	O	O
to	O	O
decide	O	O
when	O	O
it	O	O
comes	O	O
to	O	O
this	O	O
kind	O	O
of	O	O
micromanagement	O	O
.	O	O
There	O	O
are	O	O
2	O	O
separate	O	O
concerns	O	O
for	O	O
each	O	O
approach	O	O
:	O	O
#	O	O
li	O	O
using	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
makes	O	O
the	O	O
code	O	O
less	O	O
verbose	O	O
and	O	O
more	O	O
readable	O	O
.	O	O
#	O	O
li	O	O
looping	O	O
directly	O	O
in	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
code	O	O
(	O	O
like	O	O
version	O	O
8	O	O
)	O	O
peformance	O	O
wise	O	O
is	O	O
actually	O	O
a	O	O
better	O	O
option	O	O
.	O	O
While	O	O
the	O	O
overhead	O	O
that	O	O
inserting	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
is	O	O
negligible	O	O
it	O	O
may	O	O
become	O	O
less	O	O
so	O	O
when	O	O
it	O	O
comes	O	O
to	O	O
something	O	O
as	O	O
widespread	O	O
as	O	O
HashMap	B-api_mention	B-api_mention
where	O	O
every	O	O
bit	O	O
of	O	O
performance	O	O
enhancement	O	O
has	O	O
a	O	O
large	O	O
effect	O	O
(	O	O
imagine	O	O
the	O	O
tiniest	O	O
footprint	O	O
reduce	O	O
of	O	O
a	O	O
HashMap	B-api_mention	B-api_mention
in	O	O
fullblown	O	O
webapp	O	O
)	O	O
.	O	O
Take	O	O
into	O	O
consideration	O	O
the	O	O
fact	O	O
that	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
was	O	O
used	O	O
only	O	O
for	O	O
this	O	O
one	O	O
loop	O	O
.	O	O
The	O	O
change	O	O
is	O	O
small	O	O
enough	O	O
that	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
the	O	O
clear	O	O
method	O	O
less	O	O
readable	O	O
.	O	O
The	O	O
precise	O	O
reason	O	O
can	O	O
'	O	O
t	O	O
be	O	O
found	O	O
out	O	O
without	O	O
asking	O	O
the	O	O
developer	O	O
who	O	O
actually	O	O
did	O	O
this	O	O
,	O	O
however	O	O
i	O	O
suspect	O	O
it	O	O
'	O	O
s	O	O
either	O	O
a	O	O
mistake	O	O
or	O	O
a	O	O
small	O	O
enhancement	O	O
.	O	O
better	O	O
option	O	O
.	O	O
My	O	O
opinion	O	O
is	O	O
it	O	O
can	O	O
be	O	O
considered	O	O
an	O	O
enhancement	O	O
,	O	O
even	O	O
if	O	O
only	O	O
by	O	O
accident	O	O
.	O	O
Question	O	O
-	O	O
8189466	O	O
,	O	O
answer	O	O
-	O	O
23592535	O	O
I	O	O
had	O	O
that	O	O
same	O	O
problem	O	O
but	O	O
in	O	O
case	O	O
that	O	O
I	O	O
was	O	O
adding	O	O
en	O	O
element	O	O
into	O	O
iterated	O	O
list	O	O
.	O	O
I	O	O
made	O	O
it	O	O
this	O	O
way	O	O
#	O	O
pre	O	O
Now	O	O
everything	O	O
goes	O	O
fine	O	O
because	O	O
you	O	O
don	O	O
'	O	O
t	O	O
create	O	O
any	O	O
iterator	O	O
over	O	O
your	O	O
list	O	O
,	O	O
you	O	O
iterate	O	O
over	O	O
it	O	O
"	O	O
manually	O	O
"	O	O
.	O	O
And	O	O
condition	O	O
i	O	O
<	O	O
integerList	O	O
.	B-api_mention	B-api_mention
size	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
never	O	O
fool	O	O
you	O	O
because	O	O
when	O	O
you	O	O
remove	O	O
/	O	O
add	O	O
something	O	O
into	O	O
List	B-api_mention	B-api_mention
size	O	O
of	O	O
the	O	O
List	B-api_mention	B-api_mention
decrement	O	O
/	O	O
increment	O	O
.	O	O
.	O	O
Hope	O	O
it	O	O
helps	O	O
,	O	O
for	O	O
me	O	O
that	O	O
was	O	O
solution	O	O
.	O	O
Question	O	O
-	O	O
15336477	O	O
All	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
do	O	O
is	O	O
download	O	O
some	O	O
JSON	O	O
and	O	O
deserialize	O	O
it	O	O
into	O	O
an	O	O
object	O	O
.	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
got	O	O
as	O	O
far	O	O
as	O	O
downloading	O	O
the	O	O
JSON	O	O
yet	O	O
.	O	O
Almost	O	O
every	O	O
single	O	O
HttpClient	B-api_mention	B-api_mention
example	O	O
I	O	O
can	O	O
find	O	O
,	O	O
including	O	O
those	O	O
on	O	O
the	O	O
apache	O	O
site	O	O
looks	O	O
something	O	O
like	O	O
.	O	O
.	O	O
.	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
Netbeans	O	O
tells	O	O
me	O	O
that	O	O
DefaultHttpClient	B-api_mention	B-api_mention
is	O	O
deprecated	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
tried	O	O
googling	O	O
for	O	O
DefaultHttpClient	B-api_mention	B-api_mention
deprecated	O	O
and	O	O
as	O	O
many	O	O
other	O	O
variations	O	O
as	O	O
I	O	O
can	O	O
think	O	O
of	O	O
and	O	O
can	O	O
'	O	O
t	O	O
find	O	O
any	O	O
useful	O	O
results	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
obviously	O	O
missing	O	O
something	O	O
.	O	O
What	O	O
is	O	O
the	O	O
correct	O	O
Java7	O	O
way	O	O
to	O	O
download	O	O
the	O	O
contents	O	O
of	O	O
a	O	O
webpage	O	O
?	O	O
Is	O	O
there	O	O
really	O	O
no	O	O
decent	O	O
Http	O	O
Client	O	O
as	O	O
part	O	O
of	O	O
the	O	O
language	O	O
?	O	O
I	O	O
find	O	O
that	O	O
hard	O	O
to	O	O
believe	O	O
.	O	O
My	O	O
Maven	O	O
dependency	O	O
for	O	O
this	O	O
is	O	O
.	O	O
.	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
15432106	O	O
This	O	O
is	O	O
to	O	O
avoid	O	O
possible	O	O
efforts	O	O
for	O	O
reallocation	O	O
for	O	O
every	O	O
single	O	O
object	O	O
.	O	O
int	O	O
newCapacity	O	O
=	O	O
(	O	O
oldCapacity	O	O
*	O	O
3	O	O
)	O	O
/	O	O
2	O	O
+	O	O
1	O	O
;	O	O
internally	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
is	O	O
created	O	O
.	O	O
JVM	O	O
needs	O	O
effort	O	O
to	O	O
create	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
when	O	O
you	O	O
add	O	O
element	O	O
in	O	O
the	O	O
arraylist	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
above	O	O
code	O	O
(	O	O
any	O	O
algo	O	O
you	O	O
think	O	O
)	O	O
for	O	O
reallocation	O	O
then	O	O
every	O	O
time	O	O
when	O	O
you	O	O
invoke	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
then	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
has	O	O
to	O	O
be	O	O
created	O	O
which	O	O
is	O	O
pointless	O	O
and	O	O
we	O	O
are	O	O
loosing	O	O
time	O	O
for	O	O
increasing	O	O
size	O	O
by	O	O
1	O	O
for	O	O
each	O	O
and	O	O
every	O	O
objects	O	O
to	O	O
be	O	O
added	O	O
.	O	O
So	O	O
it	O	O
is	O	O
better	O	O
to	O	O
increase	O	O
size	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
with	O	O
following	O	O
formula	O	O
.	O	O
(	O	O
JSL	O	O
has	O	O
used	O	O
forcasting	O	O
formula	O	O
given	O	O
below	O	O
for	O	O
dynamically	O	O
growing	O	O
arraylist	O	O
instead	O	O
of	O	O
growing	O	O
by	O	O
1	O	O
every	O	O
time	O	O
.	O	O
Because	O	O
to	O	O
grow	O	O
it	O	O
takes	O	O
effort	O	O
by	O	O
JVM	O	O
)	O	O
int	O	O
newCapacity	O	O
=	O	O
(	O	O
oldCapacity	O	O
*	O	O
3	O	O
)	O	O
/	O	O
2	O	O
+	O	O
1	O	O
;	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14495128	O	O
If	O	O
the	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
calls	O	O
the	O	O
operating	O	O
system	O	O
to	O	O
get	O	O
the	O	O
time	O	O
of	O	O
day	O	O
,	O	O
then	O	O
you	O	O
cannot	O	O
compare	O	O
it	O	O
to	O	O
your	O	O
function	O	O
.	O	O
Your	O	O
function	O	O
is	O	O
a	O	O
PRNG	O	O
,	O	O
whereas	O	O
that	O	O
function	O	O
is	O	O
striving	O	O
for	O	O
real	O	O
random	O	O
numbers	O	O
.	O	O
Apples	O	O
and	O	O
oranges	O	O
.	O	O
Your	O	O
PRNG	O	O
may	O	O
be	O	O
fast	O	O
,	O	O
but	O	O
it	O	O
does	O	O
not	O	O
have	O	O
enough	O	O
state	O	O
information	O	O
to	O	O
achieve	O	O
a	O	O
long	O	O
period	O	O
before	O	O
it	O	O
repeats	O	O
(	O	O
and	O	O
its	O	O
logic	O	O
is	O	O
not	O	O
sophisticated	O	O
enough	O	O
to	O	O
even	O	O
achieve	O	O
the	O	O
periods	O	O
that	O	O
are	O	O
possible	O	O
with	O	O
that	O	O
much	O	O
state	O	O
information	O	O
)	O	O
.	O	O
Period	O	O
is	O	O
the	O	O
length	O	O
of	O	O
the	O	O
sequence	O	O
before	O	O
your	O	O
PRNG	O	O
begins	O	O
to	O	O
repeat	O	O
itself	O	O
.	O	O
This	O	O
happens	O	O
as	O	O
soon	O	O
as	O	O
the	O	O
PRNG	O	O
machine	O	O
makes	O	O
a	O	O
state	O	O
transition	O	O
to	O	O
a	O	O
state	O	O
which	O	O
is	O	O
identical	O	O
to	O	O
some	O	O
past	O	O
state	O	O
.	O	O
From	O	O
there	O	O
,	O	O
it	O	O
will	O	O
repeat	O	O
the	O	O
transitions	O	O
which	O	O
began	O	O
in	O	O
that	O	O
state	O	O
.	O	O
Another	O	O
problem	O	O
with	O	O
PRNG	O	O
'	O	O
s	O	O
can	O	O
be	O	O
a	O	O
low	O	O
number	O	O
of	O	O
unique	O	O
sequences	O	O
,	O	O
as	O	O
well	O	O
as	O	O
degenerate	O	O
convergence	O	O
on	O	O
a	O	O
particular	O	O
sequence	O	O
which	O	O
repeats	O	O
.	O	O
There	O	O
can	O	O
also	O	O
be	O	O
undesirable	O	O
patterns	O	O
.	O	O
For	O	O
instance	O	O
,	O	O
suppose	O	O
that	O	O
a	O	O
PRNG	O	O
looks	O	O
fairly	O	O
random	O	O
when	O	O
the	O	O
numbers	O	O
are	O	O
printed	O	O
in	O	O
decimal	O	O
,	O	O
but	O	O
an	O	O
inspection	O	O
of	O	O
the	O	O
values	O	O
in	O	O
binary	O	O
shows	O	O
that	O	O
bit	O	O
4	O	O
is	O	O
simply	O	O
toggling	O	O
between	O	O
0	O	O
and	O	O
1	O	O
on	O	O
each	O	O
call	O	O
.	O	O
Oops	O	O
!	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
the	O	O
Mersenne	O	O
Twister	O	O
and	O	O
other	O	O
algorithms	O	O
.	O	O
There	O	O
are	O	O
ways	O	O
to	O	O
strike	O	O
a	O	O
balance	O	O
between	O	O
the	O	O
period	O	O
length	O	O
and	O	O
CPU	O	O
cycles	O	O
.	O	O
One	O	O
basic	O	O
approach	O	O
(	O	O
used	O	O
in	O	O
the	O	O
Mersenne	O	O
Twister	O	O
)	O	O
is	O	O
to	O	O
cycle	O	O
around	O	O
in	O	O
the	O	O
state	O	O
vector	O	O
.	O	O
That	O	O
is	O	O
to	O	O
say	O	O
,	O	O
when	O	O
a	O	O
number	O	O
is	O	O
being	O	O
generated	O	O
,	O	O
it	O	O
is	O	O
not	O	O
based	O	O
on	O	O
the	O	O
entire	O	O
state	O	O
,	O	O
just	O	O
on	O	O
a	O	O
few	O	O
words	O	O
from	O	O
the	O	O
state	O	O
array	O	O
subject	O	O
to	O	O
a	O	O
few	O	O
bit	O	O
operations	O	O
.	O	O
But	O	O
at	O	O
each	O	O
step	O	O
,	O	O
the	O	O
algorithm	O	O
also	O	O
moves	O	O
around	O	O
in	O	O
the	O	O
array	O	O
,	O	O
scrambling	O	O
the	O	O
contents	O	O
a	O	O
little	O	O
bit	O	O
at	O	O
a	O	O
time	O	O
.	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
31707746	O	O
One	O	O
of	O	O
most	O	O
upleasing	O	O
functional	O	O
forEach	B-api_mention	B-api_mention
'	O	O
s	O	O
limitations	O	O
is	O	O
lack	O	O
of	O	O
checked	O	O
exceptions	O	O
support	O	O
.	O	O
One	O	O
possible	O	O
workaround	O	O
is	O	O
to	O	O
replace	O	O
terminal	O	O
forEach	B-api_mention	O
with	O	O
plain	O	O
old	O	O
foreach	O	O
loop	O	O
:	O	O
#	O	O
pre	O	O
Here	O	O
is	O	O
list	O	O
of	O	O
most	O	O
popular	O	O
questions	O	O
with	O	O
other	O	O
workarounds	O	O
on	O	O
checked	O	O
exception	O	O
handling	O	O
within	O	O
lambdas	O	O
and	O	O
streams	O	O
:	O	O
Java	O	O
8	O	O
Lambda	B-api_mention	O
function	O	O
that	O	O
throws	O	O
exception	O	O
?	O	O
Java	O	O
8	O	O
:	O	O
Lambda	B-api_mention	O
-	O	O
Streams	B-api_mention	O
,	O	O
Filter	B-api_mention	B-api_mention
by	O	O
Method	O	O
with	O	O
Exception	B-api_mention	B-api_mention
How	O	O
can	O	O
I	O	O
throw	O	O
CHECKED	O	O
exceptions	O	O
from	O	O
inside	O	O
Java	O	O
8	O	O
streams	B-api_mention	O
?	O	O
Java	O	O
8	O	O
:	O	O
Mandatory	O	O
checked	O	O
exceptions	O	O
handling	O	O
in	O	O
lambda	O	O
expressions	O	O
.	O	O
Why	O	O
mandatory	O	O
,	O	O
not	O	O
optional	O	O
?	O	O
Question	O	O
-	O	O
29328785	O	O
,	O	O
answer	O	O
-	O	O
29330741	O	O
It	O	O
'	O	O
s	O	O
not	O	O
so	O	O
hard	O	O
to	O	O
track	O	O
down	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
odd	O	O
behavior	O	O
.	O	O
The	O	O
divide	O	O
call	O	O
goes	O	O
to	O	O
#	O	O
pre	O	O
This	O	O
,	O	O
internally	O	O
,	O	O
delegates	O	O
to	O	O
another	O	O
divide	O	O
method	O	O
,	O	O
based	O	O
on	O	O
the	O	O
rounding	O	O
mode	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
this	O	O
case	O	O
,	O	O
the	O	O
last	O	O
call	O	O
applies	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
intVal	O	O
(	O	O
which	O	O
is	O	O
a	O	O
BigInteger	B-api_mention	B-api_mention
that	O	O
is	O	O
stored	O	O
in	O	O
the	O	O
BigDecimal	B-api_mention	B-api_mention
)	O	O
is	O	O
passed	O	O
directly	O	O
to	O	O
this	O	O
method	O	O
as	O	O
the	O	O
first	O	O
argument	O	O
:	O	O
#	O	O
pre	O	O
Finally	O	O
,	O	O
the	O	O
path	O	O
to	O	O
the	O	O
second	O	O
divideAndRound	O	O
is	O	O
taken	O	O
here	O	O
,	O	O
again	O	O
passing	O	O
the	O	O
dividend	O	O
on	O	O
(	O	O
which	O	O
was	O	O
the	O	O
intVal	O	O
of	O	O
the	O	O
original	O	O
BigDecimal	B-api_mention	B-api_mention
)	O	O
,	O	O
ending	O	O
up	O	O
with	O	O
this	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
this	O	O
is	O	O
where	O	O
the	O	O
error	O	O
is	O	O
introduced	O	O
:	O	O
The	O	O
mdivididend	O	O
is	O	O
a	O	O
mutable	O	O
BigInteger	B-api_mention	B-api_mention
,	O	O
that	O	O
was	O	O
created	O	O
as	O	O
a	O	O
mutable	O	O
view	O	O
on	O	O
the	O	O
mag	O	O
array	O	O
of	O	O
the	O	O
BigInteger	B-api_mention	B-api_mention
that	O	O
is	O	O
stored	O	O
in	O	O
the	O	O
BigDecimal	B-api_mention	B-api_mention
x	O	O
from	O	O
the	O	O
original	O	O
call	O	O
.	O	O
The	O	O
division	O	O
modifies	O	O
the	O	O
mag	O	O
field	O	O
,	O	O
and	O	O
thus	O	O
,	O	O
the	O	O
state	O	O
of	O	O
the	O	O
(	O	O
now	O	O
not	O	O
-	O	O
so	O	O
-	O	O
immutable	O	O
)	O	O
BigDecimal	B-api_mention	O
.	O	O
This	O	O
is	O	O
clearly	O	O
a	O	O
bug	O	O
in	O	O
the	O	O
implementation	O	O
of	O	O
one	O	O
of	O	O
the	O	O
divide	O	O
methods	O	O
.	O	O
I	O	O
already	O	O
started	O	O
tracking	O	O
the	O	O
change	O	O
sets	O	O
of	O	O
the	O	O
OpenJDK	O	O
,	O	O
but	O	O
have	O	O
not	O	O
yet	O	O
spotted	O	O
the	O	O
definite	O	O
culprit	O	O
.	O	O
(	O	O
Edit	O	O
:	O	O
See	O	O
updates	O	O
below	O	O
)	O	O
(	O	O
A	O	O
side	O	O
note	O	O
:	O	O
Calling	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
before	O	O
doing	O	O
the	O	O
division	O	O
does	O	O
not	O	O
really	O	O
avoid	O	O
,	O	O
but	O	O
only	O	O
hide	O	O
the	O	O
bug	O	O
:	O	O
It	O	O
causes	O	O
a	O	O
string	O	O
cache	O	O
of	O	O
the	O	O
correct	O	O
state	O	O
to	O	O
be	O	O
created	O	O
internally	O	O
.	O	O
The	O	O
right	O	O
value	O	O
is	O	O
printed	O	O
,	O	O
but	O	O
the	O	O
internal	O	O
state	O	O
is	O	O
still	O	O
wrong	O	O
-	O	O
which	O	O
is	O	O
concerning	O	O
,	O	O
to	O	O
say	O	O
the	O	O
least	O	O
.	O	O
.	O	O
.	O	O
)	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
7521675	O	O
Just	O	O
remember	O	O
that	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
has	O	O
to	O	O
be	O	O
implemented	O	O
by	O	O
the	O	O
class	O	O
you	O	O
are	O	O
trying	O	O
to	O	O
compare	O	O
.	O	O
Otherwise	O	O
,	O	O
there	O	O
isn	O	O
'	O	O
t	O	O
much	O	O
of	O	O
a	O	O
point	O	O
;	O	O
the	O	O
version	O	O
of	O	O
the	O	O
method	O	O
for	O	O
the	O	O
Object	B-api_mention	B-api_mention
class	O	O
does	O	O
the	O	O
same	O	O
thing	O	O
as	O	O
the	O	O
comparison	O	O
operation	O	O
:	O	O
Object	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
.	O	O
The	O	O
only	O	O
time	O	O
you	O	O
really	O	O
want	O	O
to	O	O
use	O	O
the	O	O
comparison	O	O
operator	O	O
for	O	O
objects	O	O
is	O	O
wen	O	O
you	O	O
are	O	O
comparing	O	O
Enums	O	O
.	O	O
This	O	O
is	O	O
because	O	O
there	O	O
is	O	O
only	O	O
one	O	O
instance	O	O
of	O	O
an	O	O
Enum	O	O
value	O	O
at	O	O
a	O	O
time	O	O
.	O	O
For	O	O
instance	O	O
,	O	O
given	O	O
the	O	O
enum	O	O
enum	O	O
FooEnum	O	O
{	O	O
A	O	O
,	O	O
B	O	O
,	O	O
C	O	O
}	O	O
You	O	O
will	O	O
never	O	O
have	O	O
more	O	O
than	O	O
one	O	O
instance	O	O
of	O	O
A	O	O
at	O	O
a	O	O
time	O	O
,	O	O
and	O	O
the	O	O
same	O	O
for	O	O
B	O	O
and	O	O
C	O	O
.	O	O
This	O	O
means	O	O
that	O	O
you	O	O
can	O	O
actually	O	O
write	O	O
a	O	O
method	O	O
like	O	O
so	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
you	O	O
will	O	O
have	O	O
no	O	O
problems	O	O
whatsoever	O	O
.	O	O
Question	O	O
-	O	O
28459498	O	O
,	O	O
answer	O	O
-	O	O
28460301	O	O
Stream	B-api_mention	B-api_mention
s	O	O
are	O	O
built	O	O
around	O	O
Spliterator	O	B-api_mention
s	O	O
which	O	O
are	O	O
stateful	O	O
,	O	O
mutable	O	O
objects	O	O
.	O	O
They	O	O
don	O	O
’	O	O
t	O	O
have	O	O
a	O	O
“	O	O
reset	O	O
”	O	O
action	O	O
and	O	O
in	O	O
fact	O	O
,	O	O
requiring	O	O
to	O	O
support	O	O
such	O	O
rewind	O	O
action	O	O
would	O	O
“	O	O
take	O	O
away	O	O
much	O	O
power	O	O
”	O	O
.	O	O
How	O	O
would	O	O
Random	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ints	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
be	O	O
supposed	O	O
to	O	O
handle	O	O
such	O	O
a	O	O
request	O	O
?	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
for	O	O
Stream	B-api_mention	B-api_mention
s	O	O
which	O	O
have	O	O
a	O	O
retraceable	O	O
origin	O	O
,	O	O
it	O	O
is	O	O
easy	O	O
to	O	O
construct	O	O
an	O	O
equivalent	O	O
Stream	B-api_mention	B-api_mention
to	O	O
be	O	O
used	O	O
again	O	O
.	O	O
Just	O	O
put	O	O
the	O	O
steps	O	O
made	O	O
to	O	O
construct	O	O
the	O	O
Stream	B-api_mention	B-api_mention
into	O	O
a	O	O
reusable	O	O
method	O	O
.	O	O
Keep	O	O
in	O	O
mind	O	O
that	O	O
repeating	O	O
these	O	O
steps	O	O
is	O	O
not	O	O
an	O	O
expensive	O	O
operation	O	O
as	O	O
all	O	O
these	O	O
steps	O	O
are	O	O
lazy	O	O
operations	O	O
;	O	O
the	O	O
actual	O	O
work	O	O
starts	O	O
with	O	O
the	O	O
terminal	O	O
operation	O	O
and	O	O
depending	O	O
on	O	O
the	O	O
actual	O	O
terminal	O	O
operation	O	O
entirely	O	O
different	O	O
code	O	O
might	O	O
get	O	O
executed	O	O
.	O	O
It	O	O
would	O	O
be	O	O
up	O	O
to	O	O
you	O	O
,	O	O
the	O	O
writer	O	O
of	O	O
such	O	O
a	O	O
method	O	O
,	O	O
to	O	O
specify	O	O
what	O	O
calling	O	O
the	O	O
method	O	O
twice	O	O
implies	O	O
:	O	O
does	O	O
it	O	O
reproduce	O	O
exactly	O	O
the	O	O
same	O	O
sequence	O	O
,	O	O
as	O	O
streams	O	O
created	O	O
for	O	O
an	O	O
unmodified	O	O
array	O	O
or	O	O
collection	O	O
do	O	O
,	O	O
or	O	O
does	O	O
it	O	O
produce	O	O
a	O	O
stream	O	O
with	O	O
a	O	O
similar	O	O
semantics	O	O
but	O	O
different	O	O
elements	O	O
like	O	O
a	O	O
stream	O	O
of	O	O
random	O	O
ints	O	O
or	O	O
a	O	O
stream	O	O
of	O	O
console	O	O
input	O	O
lines	O	O
,	O	O
etc	O	O
.	O	O
By	O	O
the	O	O
way	O	O
,	O	O
to	O	O
avoid	O	O
confusion	O	O
,	O	O
a	O	O
terminal	O	O
operation	O	O
consumes	O	O
the	O	O
Stream	B-api_mention	B-api_mention
which	O	O
is	O	O
distinct	O	O
from	O	O
closing	O	O
the	O	O
Stream	B-api_mention	B-api_mention
as	O	O
calling	O	O
close	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
stream	O	O
does	O	O
(	O	O
which	O	O
is	O	O
required	O	O
for	O	O
streams	O	O
having	O	O
associated	O	O
resources	O	O
like	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
produced	O	O
by	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
It	O	O
seems	O	O
that	O	O
a	O	O
lot	O	O
of	O	O
confusion	O	O
stems	O	O
from	O	O
misguiding	O	O
comparison	O	O
of	O	O
IEnumerable	O	O
with	O	O
Stream	B-api_mention	B-api_mention
.	O	O
An	O	O
IEnumerable	O	O
represents	O	O
the	O	O
ability	O	O
to	O	O
provide	O	O
an	O	O
actual	O	O
IEnumerator	O	O
,	O	O
so	O	O
its	O	O
like	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
in	O	O
Java	O	O
.	O	O
In	O	O
contrast	O	O
,	O	O
a	O	O
Stream	B-api_mention	B-api_mention
is	O	O
a	O	O
kind	O	O
of	O	O
iterator	O	O
and	O	O
comparable	O	O
to	O	O
an	O	O
IEnumerator	O	O
so	O	O
it	O	O
’	O	O
s	O	O
wrong	O	O
to	O	O
claim	O	O
that	O	O
this	O	O
kind	O	O
of	O	O
data	O	O
type	O	O
can	O	O
be	O	O
used	O	O
multiple	O	O
times	O	O
in	O	O
.	O	O
NET	O	O
,	O	O
the	O	O
support	O	O
for	O	O
IEnumerator	O	O
.	O	O
Reset	O	O
is	O	O
optional	O	O
.	O	O
The	O	O
examples	O	O
discussed	O	O
here	O	O
rather	O	O
use	O	O
the	O	O
fact	O	O
that	O	O
an	O	O
IEnumerable	O	O
can	O	O
be	O	O
used	O	O
to	O	O
fetch	O	O
new	O	O
IEnumerator	O	O
s	O	O
and	O	O
that	O	O
works	O	O
with	O	O
Java	O	O
’	O	O
s	O	O
Collection	B-api_mention	B-api_mention
s	O	O
as	O	O
well	O	O
;	O	O
you	O	O
can	O	O
get	O	O
a	O	O
new	O	O
Stream	B-api_mention	B-api_mention
.	O	O
If	O	O
the	O	O
Java	O	O
developers	O	O
decided	O	O
to	O	O
add	O	O
the	O	O
Stream	B-api_mention	B-api_mention
operations	O	O
to	O	O
Iterable	B-api_mention	B-api_mention
directly	O	O
,	O	O
with	O	O
intermediate	O	O
operations	O	O
returning	O	O
another	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
it	O	O
was	O	O
really	O	O
comparable	O	O
and	O	O
it	O	O
could	O	O
work	O	O
the	O	O
same	O	O
way	O	O
.	O	O
However	O	O
,	O	O
the	O	O
developers	O	O
decided	O	O
against	O	O
it	O	O
and	O	O
the	O	O
decision	O	O
is	O	O
discussed	O	O
in	O	O
this	O	O
question	O	O
.	O	O
The	O	O
biggest	O	O
point	O	O
is	O	O
the	O	O
confusion	O	O
about	O	O
eager	O	O
Collection	B-api_mention	B-api_mention
operations	O	O
and	O	O
lazy	O	O
Stream	B-api_mention	B-api_mention
operations	O	O
.	O	O
By	O	O
looking	O	O
at	O	O
the	O	O
.	O	O
NET	O	O
API	O	O
,	O	O
I	O	O
(	O	O
yes	O	O
,	O	O
personally	O	O
)	O	O
find	O	O
it	O	O
justified	O	O
.	O	O
While	O	O
it	O	O
looks	O	O
reasonable	O	O
looking	O	O
at	O	O
IEnumerable	O	O
alone	O	O
,	O	O
a	O	O
particular	O	O
Collection	B-api_mention	B-api_mention
will	O	O
have	O	O
lots	O	O
of	O	O
methods	O	O
manipulating	O	O
the	O	O
Collection	B-api_mention	B-api_mention
directly	O	O
and	O	O
lots	O	O
of	O	O
methods	O	O
returning	O	O
a	O	O
lazy	O	O
IEnumerable	O	O
,	O	O
while	O	O
the	O	O
particular	O	O
nature	O	O
of	O	O
a	O	O
method	O	O
isn	O	O
’	O	O
t	O	O
always	O	O
intuitively	O	O
recognizable	O	O
.	O	O
The	O	O
worst	O	O
example	O	O
I	O	O
found	O	O
(	O	O
within	O	O
the	O	O
few	O	O
minutes	O	O
I	O	O
looked	O	O
at	O	O
it	O	O
)	O	O
is	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Reverse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
whose	O	O
name	O	O
matches	O	O
exactly	O	O
the	O	O
name	O	O
of	O	O
the	O	O
inherited	O	O
(	O	O
is	O	O
this	O	O
the	O	O
right	O	O
terminus	O	O
for	O	O
extension	O	O
methods	O	O
?	O	O
)	O	O
Enumerable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Reverse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
while	O	O
having	O	O
an	O	O
entirely	O	O
contradicting	O	O
behavior	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
these	O	O
are	O	O
two	O	O
distinct	O	O
decisions	O	O
.	O	O
The	O	O
first	O	O
one	O	O
to	O	O
make	O	O
Stream	B-api_mention	B-api_mention
a	O	O
type	O	O
distinct	O	O
from	O	O
Iterable	B-api_mention	B-api_mention
/	O	O
Collection	B-api_mention	B-api_mention
and	O	O
the	O	O
second	O	O
to	O	O
make	O	O
Stream	B-api_mention	B-api_mention
a	O	O
kind	O	O
of	O	O
one	O	O
time	O	O
iterator	O	O
rather	O	O
than	O	O
another	O	O
kind	O	O
of	O	O
iterable	O	O
.	O	O
But	O	O
these	O	O
decision	O	O
were	O	O
made	O	O
together	O	O
and	O	O
it	O	O
might	O	O
be	O	O
the	O	O
case	O	O
that	O	O
separating	O	O
these	O	O
two	O	O
decision	O	O
never	O	O
was	O	O
considered	O	O
.	O	O
It	O	O
wasn	O	O
’	O	O
t	O	O
created	O	O
with	O	O
being	O	O
comparable	O	O
to	O	O
.	O	O
NET	O	O
’	O	O
s	O	O
in	O	O
mind	O	O
.	O	O
The	O	O
actual	O	O
API	O	O
design	O	O
decision	O	O
was	O	O
to	O	O
add	O	O
an	O	O
improved	O	O
type	O	O
of	O	O
iterator	O	O
,	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
.	O	I-api_mention
Spliterator	B-api_mention	I-api_mention
s	O	O
can	O	O
be	O	O
provided	O	O
by	O	O
the	O	O
old	O	O
Iterable	B-api_mention	B-api_mention
s	O	O
(	O	O
which	O	O
is	O	O
the	O	O
way	O	O
how	O	O
these	O	O
were	O	O
retrofitted	O	O
)	O	O
or	O	O
entirely	O	O
new	O	O
implementations	O	O
.	O	O
Then	O	O
,	O	O
Stream	B-api_mention	B-api_mention
was	O	O
added	O	O
as	O	O
a	O	O
high	O	O
-	O	O
level	O	O
front	O	O
-	O	O
end	O	O
to	O	O
the	O	O
rather	O	O
low	O	O
level	O	O
Spliterator	B-api_mention	B-api_mention
s	O	O
.	O	O
That	O	O
’	O	O
s	O	O
it	O	O
.	O	O
You	O	O
may	O	O
discuss	O	O
about	O	O
whether	O	O
a	O	O
different	O	O
design	O	O
would	O	O
be	O	O
better	O	O
,	O	O
but	O	O
that	O	O
’	O	O
s	O	O
not	O	O
productive	O	O
,	O	O
it	O	O
won	O	O
’	O	O
t	O	O
change	O	O
,	O	O
given	O	O
the	O	O
way	O	O
they	O	O
are	O	O
designed	O	O
now	O	O
.	O	O
There	O	O
is	O	O
another	O	O
implementation	O	O
aspect	O	O
you	O	O
have	O	O
to	O	O
consider	O	O
.	O	O
Stream	B-api_mention	B-api_mention
s	O	O
are	O	O
not	O	O
immutable	O	O
data	O	O
structures	O	O
.	O	O
Each	O	O
intermediate	O	O
operation	O	O
may	O	O
return	O	O
a	O	O
new	O	O
Stream	B-api_mention	B-api_mention
instance	O	O
encapsulating	O	O
the	O	O
old	O	O
one	O	O
but	O	O
it	O	O
may	O	O
also	O	O
manipulate	O	O
its	O	O
own	O	O
instance	O	O
instead	O	O
and	O	O
return	O	O
itself	O	O
(	O	O
that	O	O
doesn	O	O
’	O	O
t	O	O
preclude	O	O
doing	O	O
even	O	O
both	O	O
for	O	O
the	O	O
same	O	O
operation	O	O
)	O	O
.	O	O
Commonly	O	O
known	O	O
examples	O	O
are	O	O
operations	O	O
like	O	O
parallel	O	O
or	O	O
unordered	O	O
which	O	O
do	O	O
not	O	O
add	O	O
another	O	O
step	O	O
but	O	O
manipulate	O	O
the	O	O
entire	O	O
pipeline	O	O
)	O	O
.	O	O
Having	O	O
such	O	O
a	O	O
mutable	O	O
data	O	O
structure	O	O
and	O	O
attempts	O	O
to	O	O
reuse	O	O
(	O	O
or	O	O
even	O	O
worse	O	O
,	O	O
using	O	O
it	O	O
multiple	O	O
times	O	O
at	O	O
the	O	O
same	O	O
time	O	O
)	O	O
doesn	O	O
’	O	O
t	O	O
play	O	O
well	O	O
…	O	O
For	O	O
completeness	O	O
,	O	O
here	O	O
is	O	O
your	O	O
quicksort	O	O
example	O	O
translated	O	O
to	O	O
the	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
API	O	O
.	O	O
It	O	O
shows	O	O
that	O	O
it	O	O
does	O	O
not	O	O
really	O	O
“	O	O
take	O	O
away	O	O
much	O	O
power	O	O
”	O	O
.	O	O
#	O	O
pre	O	O
It	O	O
can	O	O
be	O	O
used	O	O
like	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
write	O	O
it	O	O
even	O	O
more	O	O
compact	O	O
as	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26877910	O	O
What	O	O
I	O	O
can	O	O
only	O	O
share	O	O
is	O	O
my	O	O
own	O	O
method	O	O
.	O	O
You	O	O
can	O	O
use	O	O
a	O	O
temporary	O	O
String	B-api_mention	B-api_mention
temp	O	O
=	O	O
StringLiteral	O	O
;	O	O
or	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Format	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
my	O	O
example	O	O
code	O	O
created	O	O
in	O	O
console	O	O
application	O	O
via	O	O
c	O	O
#	O	O
-	O	O
"	O	O
Idea	O	O
Only	O	O
,	O	O
Not	O	O
Exact	O	O
Answer	O	O
"	O	O
.	O	O
#	O	O
pre	O	O
Or	O	O
you	O	O
can	O	O
also	O	O
use	O	O
the	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Format	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
time	O	O
upon	O	O
a	O	O
Once	O	O
,	O	O
there	O	O
was	O	O
a	O	O
bar	O	O
and	O	O
a	O	O
foo	O	O
.	O	O
Question	O	O
-	O	O
17781150	O	O
,	O	O
answer	O	O
-	O	O
17781376	O	O
Like	O	O
the	O	O
others	O	O
have	O	O
mentioned	O	O
,	O	O
this	O	O
is	O	O
only	O	O
fulfilled	O	O
by	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
As	O	O
for	O	O
proof	O	O
,	O	O
let	O	O
me	O	O
offer	O	O
an	O	O
easier	O	O
to	O	O
understand	O	O
explanation	O	O
other	O	O
than	O	O
in	O	O
binary	O	O
(	O	O
although	O	O
it	O	O
is	O	O
still	O	O
rooted	O	O
in	O	O
that	O	O
)	O	O
.	O	O
Note	O	O
that	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
is	O	O
equal	O	O
to	O	O
-	O	O
2	O	O
^	O	O
31	O	O
or	O	O
-	O	O
2147483648	O	O
and	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
is	O	O
equal	O	O
to	O	O
2	O	O
^	O	O
31	O	O
-	O	O
1	O	O
or	O	O
2147483647	O	O
.	O	O
-	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
is	O	O
2	O	O
^	O	O
31	O	O
,	O	O
which	O	O
is	O	O
now	O	O
too	O	O
large	O	O
for	O	O
an	O	O
Integer	B-api_mention	B-api_mention
(	O	O
since	O	O
it	O	O
is	O	O
past	O	O
MAX	B-api_mention	O
_	I-api_mention	O
VALUE	I-api_mention	O
)	O	O
thus	O	O
causing	O	O
an	O	O
Integer	B-api_mention	B-api_mention
overflow	O	O
,	O	O
making	O	O
it	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
again	O	O
.	O	O
It	O	O
'	O	O
s	O	O
the	O	O
only	O	O
Integer	B-api_mention	B-api_mention
that	O	O
does	O	O
this	O	O
since	O	O
MIN	B-api_mention	O
_	I-api_mention	O
VALUE	I-api_mention	O
is	O	O
the	O	O
only	O	O
number	O	O
with	O	O
no	O	O
negative	O	O
equivalent	O	O
aside	O	O
from	O	O
0	O	O
.	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
20945268	O	O
In	O	O
Java	O	O
,	O	O
if	O	O
two	O	O
string	O	O
primitive	O	O
variables	O	O
are	O	O
initialized	O	O
to	O	O
the	O	O
same	O	O
literal	O	O
,	O	O
it	O	O
assigns	O	O
the	O	O
same	O	O
reference	O	O
to	O	O
both	O	O
variables	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
That	O	O
is	O	O
the	O	O
reason	O	O
the	O	O
comparison	O	O
returns	O	O
true	O	O
.	O	O
The	O	O
third	O	O
string	O	O
is	O	O
created	O	O
using	O	O
substring	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
makes	O	O
a	O	O
new	O	O
string	O	O
instead	O	O
of	O	O
pointing	O	O
to	O	O
the	O	O
same	O	O
.	O	O
#	O	O
blockquote	O	O
When	O	O
you	O	O
access	O	O
a	O	O
string	O	O
using	O	O
reflection	O	O
,	O	O
you	O	O
get	O	O
the	O	O
actual	O	O
pointer	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
change	O	O
to	O	O
this	O	O
will	O	O
change	O	O
the	O	O
string	O	O
holding	O	O
a	O	O
pointer	O	O
to	O	O
it	O	O
,	O	O
but	O	O
as	O	O
s3	O	O
is	O	O
created	O	O
with	O	O
a	O	O
new	O	O
string	O	O
due	O	O
to	O	O
substring	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
would	O	O
not	O	O
change	O	O
.	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14847046	O	O
Most	O	O
of	O	O
the	O	O
time	O	O
we	O	O
use	O	O
a	O	O
constructor	O	O
to	O	O
create	O	O
a	O	O
new	O	O
empty	O	O
map	O	O
.	O	O
But	O	O
the	O	O
Collections	B-api_mention	B-api_mention
methods	O	O
offer	O	O
a	O	O
couple	O	O
of	O	O
advantages	O	O
to	O	O
create	O	O
an	O	O
empty	O	O
map	O	O
using	O	O
static	O	O
method	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
emptyMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
blockquote	O	O

