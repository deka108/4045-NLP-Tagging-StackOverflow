Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276463	O	O
If	O	O
all	O	O
of	O	O
the	O	O
streams	O	O
have	O	O
been	O	O
instantiated	O	O
then	O	O
closing	O	O
only	O	O
the	O	O
outermost	O	O
is	O	O
just	O	O
fine	O	O
.	O	O
The	O	O
documentation	O	O
on	O	O
Closeable	B-api_mention	B-api_mention
interface	O	O
states	O	O
that	O	O
close	O	O
method	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
releasing	O	O
system	O	O
resources	O	O
includes	O	O
closing	O	O
streams	O	O
.	O	O
It	O	O
also	O	O
states	O	O
that	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
if	O	O
you	O	O
close	O	O
them	O	O
explicitly	O	O
afterwards	O	O
,	O	O
nothing	O	O
wrong	O	O
will	O	O
happen	O	O
.	O	O
Question	O	O
-	O	O
12146298	O	O
I	O	O
would	O	O
like	O	O
to	O	O
know	O	O
what	O	O
is	O	O
the	O	O
cleanest	O	O
and	O	O
best	O	O
way	O	O
to	O	O
perform	O	O
form	O	O
validation	O	O
of	O	O
user	O	O
inputs	O	O
.	O	O
I	O	O
have	O	O
seen	O	O
some	O	O
developers	O	O
implement	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
springframework	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
validation	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Validator	I-api_mention	I-api_mention
.	O	O
A	O	O
question	O	O
about	O	O
that	O	O
:	O	O
I	O	O
saw	O	O
it	O	O
validates	O	O
a	O	O
class	O	O
.	O	O
Does	O	O
the	O	O
class	O	O
have	O	O
to	O	O
be	O	O
filled	O	O
manually	O	O
with	O	O
the	O	O
values	O	O
from	O	O
the	O	O
user	O	O
input	O	O
,	O	O
and	O	O
then	O	O
passed	O	O
to	O	O
the	O	O
validator	O	O
?	O	O
I	O	O
am	O	O
confused	O	O
about	O	O
the	O	O
cleanest	O	O
and	O	O
best	O	O
way	O	O
to	O	O
validate	O	O
the	O	O
user	O	O
input	O	O
.	O	O
I	O	O
know	O	O
about	O	O
the	O	O
traditional	O	O
method	O	O
of	O	O
using	O	O
request	B-api_mention	O
.	I-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
then	O	O
manually	O	O
checking	O	O
for	O	O
nulls	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
do	O	O
all	O	O
the	O	O
validation	O	O
in	O	O
my	O	O
Controller	O	O
.	O	O
Some	O	O
good	O	O
advice	O	O
on	O	O
this	O	O
area	O	O
will	O	O
be	O	O
greatly	O	O
appreciated	O	O
.	O	O
I	O	O
am	O	O
not	O	O
using	O	O
Hibernate	O	O
in	O	O
this	O	O
application	O	O
.	O	O
Question	O	O
-	O	O
5192512	O	O
,	O	O
answer	O	O
-	O	O
5192545	O	O
Edit	O	O
Updated	O	O
to	O	O
bring	O	O
in	O	O
feedback	O	O
.	O	O
So	O	O
two	O	O
ways	O	O
that	O	O
work	O	O
:	O	O
#	O	O
li	O	O
Use	O	O
StringBulderObj	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setLength	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
li	O	O
Allocate	O	O
a	O	O
new	O	O
one	O	O
instead	O	O
of	O	O
clearing	O	O
the	O	O
buffer	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
31265714	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
there	O	O
is	O	O
also	O	O
an	O	O
alternative	O	O
to	O	O
using	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
your	O	O
input	O	O
source	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
file	O	O
but	O	O
something	O	O
more	O	O
abstract	O	O
like	O	O
a	O	O
Reader	B-api_mention	B-api_mention
or	O	O
an	O	O
InputStream	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
stream	O	O
the	O	O
lines	O	O
via	O	O
the	O	O
BufferedReader	B-api_mention	B-api_mention
s	O	O
lines	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
will	O	O
call	O	O
processLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
each	O	O
input	O	O
line	O	O
read	O	O
by	O	O
the	O	O
BufferedReader	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
8172420	O	O
,	O	O
answer	O	O
-	O	O
32174377	O	O
We	O	O
have	O	O
various	O	O
ways	O	O
to	O	O
convert	O	O
a	O	O
char	O	O
to	O	O
String	B-api_mention	B-api_mention
.	O	O
One	O	O
way	O	O
is	O	O
to	O	O
make	O	O
use	O	O
of	O	O
static	O	O
method	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
Character	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
Actually	O	O
this	O	O
toString	B-api_mention	B-api_mention
method	O	O
internally	O	O
makes	O	O
use	O	O
of	O	O
valueOf	B-api_mention	B-api_mention
method	O	O
from	O	O
String	B-api_mention	B-api_mention
class	O	O
which	O	O
makes	O	O
use	O	O
of	O	O
char	O	O
array	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
second	O	O
way	O	O
is	O	O
to	O	O
use	O	O
this	O	O
directly	O	O
:	O	O
String	B-api_mention	B-api_mention
str2	O	O
=	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
valueOf	B-api_mention	B-api_mention
method	O	O
in	O	O
String	B-api_mention	B-api_mention
class	O	O
makes	O	O
use	O	O
of	O	O
char	O	O
array	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
the	O	O
third	O	O
way	O	O
is	O	O
to	O	O
make	O	O
use	O	O
of	O	O
an	O	O
anonymous	O	O
array	O	O
to	O	O
wrap	O	O
a	O	O
single	O	O
character	O	O
and	O	O
then	O	O
passing	O	O
it	O	O
to	O	O
String	B-api_mention	B-api_mention
constructor	O	O
:	O	O
String	B-api_mention	B-api_mention
str4	O	O
=	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
fourth	O	O
way	O	O
is	O	O
to	O	O
make	O	O
use	O	O
of	O	O
concatenation	O	O
:	O	O
String	B-api_mention	B-api_mention
str3	O	O
=	O	O
StringLiteral	O	O
+	O	O
ch	O	O
;	O	O
This	O	O
will	O	O
actually	O	O
make	O	O
use	O	O
of	O	O
append	B-api_mention	O
method	O	O
from	O	O
StringBuilder	B-api_mention	B-api_mention
class	O	O
which	O	O
is	O	O
actually	O	O
preferred	O	O
when	O	O
we	O	O
are	O	O
doing	O	O
concatenation	O	O
in	O	O
a	O	O
loop	O	O
.	O	O
Question	O	O
-	O	O
25441088	O	O
,	O	O
answer	O	O
-	O	O
25441208	O	O
I	O	O
think	O	O
you	O	O
'	O	O
re	O	O
just	O	O
looking	O	O
for	O	O
the	O	O
overload	O	O
which	O	O
takes	O	O
another	O	O
Collector	B-api_mention	B-api_mention
to	O	O
specify	O	O
what	O	O
to	O	O
do	O	O
with	O	O
each	O	O
group	O	O
.	O	O
.	O	O
.	O	O
and	O	O
then	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
counting	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
do	O	O
the	O	O
counting	O	O
:	O	O
#	O	O
pre	O	O
Result	O	O
:	O	O
{	O	O
Hello	O	O
=	O	O
2	O	O
,	O	O
World	O	O
=	O	O
1	O	O
}	O	O
(	O	O
There	O	O
'	O	O
s	O	O
also	O	O
the	O	O
possibility	O	O
of	O	O
using	O	O
groupingByConcurrent	B-api_mention	O
for	O	O
more	O	O
efficiency	O	O
.	O	O
Something	O	O
to	O	O
bear	O	O
in	O	O
mind	O	O
for	O	O
your	O	O
real	O	O
code	O	O
,	O	O
if	O	O
it	O	O
would	O	O
be	O	O
safe	O	O
in	O	O
your	O	O
context	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
16229988	O	O
My	O	O
solution	O	O
is	O	O
to	O	O
do	O	O
a	O	O
"	O	O
extract	O	O
method	O	O
"	O	O
refactoring	O	O
,	O	O
as	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
printToFile	B-api_mention	B-api_mention
can	O	O
be	O	O
written	O	O
either	O	O
#	O	O
pre	O	O
or	O	O
#	O	O
pre	O	O
For	O	O
class	O	O
lib	O	O
designers	O	O
,	O	O
I	O	O
will	O	O
suggest	O	O
them	O	O
extend	O	O
the	O	O
AutoClosable	B-api_mention	B-api_mention
interface	O	O
with	O	O
an	O	O
additional	O	O
method	O	O
to	O	O
suppress	O	O
the	O	O
close	O	O
.	O	O
In	O	O
this	O	O
case	O	O
we	O	O
can	O	O
then	O	O
manually	O	O
control	O	O
the	O	O
close	O	O
behavior	O	O
.	O	O
For	O	O
language	O	O
designers	O	O
,	O	O
the	O	O
lesson	O	O
is	O	O
that	O	O
adding	O	O
a	O	O
new	O	O
feature	O	O
could	O	O
mean	O	O
adding	O	O
a	O	O
lot	O	O
others	O	O
.	O	O
In	O	O
this	O	O
Java	O	O
case	O	O
,	O	O
obviously	O	O
ARM	O	O
feature	O	O
will	O	O
work	O	O
better	O	O
with	O	O
a	O	O
resource	O	O
ownership	O	O
transfer	O	O
mechanism	O	O
.	O	O
UPDATE	O	O
Originally	O	O
the	O	O
code	O	O
above	O	O
requires	O	O
@	O	O
SuppressWarning	O	O
since	O	O
the	O	O
BufferedWriter	B-api_mention	B-api_mention
inside	O	O
the	O	O
function	O	O
requires	O	O
close	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
As	O	O
suggested	O	O
by	O	O
a	O	O
comment	O	O
,	O	O
if	O	O
flush	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
be	O	O
called	O	O
before	O	O
close	O	O
the	O	O
writer	O	O
,	O	O
we	O	O
need	O	O
to	O	O
do	O	O
so	O	O
before	O	O
any	O	O
return	B-api_mention	O
(	O	O
implicit	O	O
or	O	O
explicit	O	O
)	O	O
statements	O	O
inside	O	O
the	O	O
try	O	O
block	O	O
.	O	O
There	O	O
is	O	O
currently	O	O
no	O	O
way	O	O
to	O	O
ensure	O	O
the	O	O
caller	O	O
doing	O	O
this	O	O
I	O	O
think	O	O
,	O	O
so	O	O
this	O	O
must	O	O
be	O	O
documented	O	O
for	O	O
writeFileWriter	B-api_mention	B-api_mention
.	O	I-api_mention
UPDATE	O	I-api_mention
AGAIN	O	O
The	O	O
above	O	O
update	O	O
makes	O	O
@	O	O
SuppressWarning	O	O
unnecessary	O	O
since	O	O
it	O	O
require	O	O
the	O	O
function	O	O
to	O	O
return	O	O
the	O	O
resource	O	O
to	O	O
the	O	O
caller	O	O
,	O	O
so	O	O
itself	O	O
does	O	O
not	O	O
necessary	O	O
being	O	O
closed	O	O
.	O	O
Unfortunately	O	O
,	O	O
this	O	O
pull	O	O
us	O	O
back	O	O
to	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
situation	O	O
:	O	O
the	O	O
warning	O	O
is	O	O
now	O	O
moved	O	O
back	O	O
to	O	O
the	O	O
caller	O	O
side	O	O
.	O	O
So	O	O
to	O	O
properly	O	O
solve	O	O
this	O	O
,	O	O
we	O	O
need	O	O
a	O	O
customised	O	O
AutoClosable	B-api_mention	B-api_mention
that	O	O
whenever	O	O
it	O	O
closes	O	O
,	O	O
the	O	O
underline	O	O
BufferedWriter	B-api_mention	B-api_mention
shall	O	O
be	O	O
flush	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
ed	O	O
.	O	O
Actually	O	O
,	O	O
this	O	O
shows	O	O
us	O	O
another	O	O
way	O	O
to	O	O
bypass	O	O
the	O	O
warning	O	O
,	O	O
since	O	O
the	O	O
BufferWriter	B-api_mention	B-api_mention
is	O	O
never	O	O
closed	O	O
in	O	O
either	O	O
way	O	O
.	O	O
Question	O	O
-	O	O
24511052	O	O
I	O	O
am	O	O
looking	O	O
for	O	O
a	O	O
concise	O	O
way	O	O
to	O	O
convert	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
to	O	O
a	O	O
Stream	B-api_mention	B-api_mention
or	O	O
more	O	O
specifically	O	O
to	O	O
"	O	O
view	O	O
"	O	O
the	O	O
iterator	O	O
as	O	O
a	O	O
stream	O	O
.	O	O
For	O	O
performance	O	O
reason	O	O
,	O	O
I	O	O
would	O	O
like	O	O
to	O	O
avoid	O	O
a	O	O
copy	O	O
of	O	O
the	O	O
iterator	O	O
in	O	O
a	O	O
new	O	O
list	O	O
:	O	O
#	O	O
pre	O	O
Based	O	O
on	O	O
the	O	O
some	O	O
suggestions	O	O
in	O	O
the	O	O
comments	O	O
,	O	O
I	O	O
have	O	O
also	O	O
tried	O	O
to	O	O
use	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
generate	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
I	O	O
get	O	O
a	O	O
NoSuchElementException	B-api_mention	B-api_mention
(	O	O
since	O	O
there	O	O
is	O	O
no	O	O
invocation	O	O
of	O	O
hasNext	B-api_mention	B-api_mention
)	O	O
#	O	O
pre	O	O
I	O	O
have	O	O
looked	O	O
at	O	O
StreamSupport	B-api_mention	B-api_mention
and	O	O
Collections	B-api_mention	B-api_mention
but	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
find	O	O
anything	O	O
.	O	O
Question	O	O
-	O	O
34172978	O	O
,	O	O
answer	O	O
-	O	O
34173040	O	O
Since	O	O
there	O	O
are	O	O
only	O	O
4	O	O
elements	O	O
that	O	O
pass	O	O
the	O	O
filter	O	O
,	O	O
limit	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
never	O	O
reaches	O	O
10	O	O
elements	O	O
,	O	O
so	O	O
the	O	O
Stream	B-api_mention	B-api_mention
pipeline	O	O
keeps	O	O
generating	O	O
new	O	O
elements	O	O
and	O	O
feeding	O	O
them	O	O
to	O	O
the	O	O
filter	O	O
,	O	O
trying	O	O
to	O	O
reach	O	O
10	O	O
elements	O	O
that	O	O
pass	O	O
the	O	O
filter	O	O
,	O	O
but	O	O
since	O	O
only	O	O
the	O	O
first	O	O
4	O	O
elements	O	O
pass	O	O
the	O	O
filter	O	O
,	O	O
the	O	O
processing	O	O
never	O	O
ends	O	O
(	O	O
at	O	O
least	O	O
until	O	O
i	O	O
overflows	O	O
)	O	O
.	O	O
The	O	O
Stream	B-api_mention	B-api_mention
pipeline	O	O
is	O	O
not	O	O
smart	O	O
enough	O	O
to	O	O
know	O	O
that	O	O
no	O	O
more	O	O
elements	O	O
can	O	O
pass	O	O
the	O	O
filter	O	O
,	O	O
so	O	O
it	O	O
keeps	O	O
processing	O	O
new	O	O
elements	O	O
.	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26886202	O	O
You	O	O
are	O	O
performing	O	O
multiple	O	O
search	O	O
-	O	O
replace	O	O
operations	O	O
on	O	O
the	O	O
input	O	O
.	O	O
This	O	O
will	O	O
produce	O	O
undesired	O	O
results	O	O
when	O	O
the	O	O
replacement	O	O
strings	O	O
contain	O	O
search	O	O
strings	O	O
.	O	O
Consider	O	O
the	O	O
foo	O	O
-	O	O
>	O	O
bar	O	O
,	O	O
bar	O	O
-	O	O
foo	O	O
example	O	O
,	O	O
here	O	O
are	O	O
the	O	O
results	O	O
for	O	O
each	O	O
iteration	O	O
:	O	O
#	O	O
li	O	O
Once	O	O
upon	O	O
a	O	O
time	O	O
,	O	O
there	O	O
was	O	O
a	O	O
foo	O	O
and	O	O
a	O	O
bar	O	O
.	O	O
(	O	O
input	O	O
)	O	O
#	O	O
li	O	O
Once	O	O
upon	O	O
a	O	O
time	O	O
,	O	O
there	O	O
was	O	O
a	O	O
bar	O	O
and	O	O
a	O	O
bar	O	O
.	O	O
(	O	O
foo	O	O
-	O	O
>	O	O
bar	O	O
)	O	O
#	O	O
li	O	O
Once	O	O
upon	O	O
a	O	O
time	O	O
,	O	O
there	O	O
was	O	O
a	O	O
foo	O	O
and	O	O
a	O	O
foo	O	O
.	O	O
(	O	O
bar	O	O
-	O	O
>	O	O
foo	O	O
,	O	O
output	O	O
)	O	O
You	O	O
need	O	O
to	O	O
perform	O	O
the	O	O
replacement	O	O
in	O	O
one	O	O
iteration	O	O
without	O	O
going	O	O
back	O	O
.	O	O
A	O	O
brute	O	O
-	O	O
force	O	O
solution	O	O
is	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
li	O	O
Search	O	O
the	O	O
input	O	O
from	O	O
current	O	O
position	O	O
to	O	O
end	O	O
for	O	O
multiple	O	O
search	O	O
strings	O	O
until	O	O
a	O	O
match	O	O
is	O	O
found	O	O
#	O	O
li	O	O
Replace	O	O
the	O	O
matched	O	O
search	O	O
string	O	O
with	O	O
corresponding	O	O
replace	O	O
string	O	O
#	O	O
li	O	O
Set	O	O
current	O	O
position	O	O
to	O	O
the	O	O
next	O	O
character	O	O
after	O	O
the	O	O
replaced	O	O
string	O	O
#	O	O
li	O	O
Repeat	O	O
A	O	O
function	O	O
such	O	O
as	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
indexOfAny	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
>	O	O
int	O	O
[	O	O
]	O	O
{	O	O
index	O	O
,	O	O
whichString	O	O
}	O	O
would	O	O
be	O	O
useful	O	O
.	O	O
Here	O	O
is	O	O
an	O	O
example	O	O
(	O	O
not	O	O
the	O	O
most	O	O
efficient	O	O
one	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Some	O	O
tests	O	O
:	O	O
#	O	O
pre	O	O
Demo	O	O
on	O	O
IDEONE	O	O
Demo	O	O
on	O	O
IDEONE	O	O
,	O	O
alternate	O	O
code	O	O
Question	O	O
-	O	O
6840803	O	O
,	O	O
answer	O	O
-	O	O
6840856	O	O
SimpleDateFormat	B-api_mention	B-api_mention
stores	O	O
intermediate	O	O
results	O	O
in	O	O
instance	O	O
fields	O	O
.	O	O
So	O	O
if	O	O
one	O	O
instance	O	O
is	O	O
used	O	O
by	O	O
two	O	O
threads	O	O
they	O	O
can	O	O
mess	O	O
each	O	O
other	O	O
'	O	O
s	O	O
results	O	O
.	O	O
Looking	O	O
at	O	O
the	O	O
source	O	O
code	O	O
reveals	O	O
that	O	O
there	O	O
is	O	O
a	O	O
Calendar	B-api_mention	B-api_mention
instance	O	O
field	O	O
,	O	O
which	O	O
is	O	O
used	O	O
by	O	O
operations	O	O
on	O	O
DateFormat	B-api_mention	B-api_mention
/	O	O
SimpleDateFormat	B-api_mention	B-api_mention
For	O	O
example	O	O
parse	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
calls	O	O
calendar	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
initially	O	O
and	O	O
then	O	O
calendar	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
another	O	O
thread	O	O
invokes	O	O
parse	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
before	O	O
the	O	O
completion	O	O
of	O	O
the	O	O
first	O	O
invocation	O	O
,	O	O
it	O	O
will	O	O
clear	O	O
the	O	O
calendar	O	O
,	O	O
but	O	O
the	O	O
other	O	O
invocation	O	O
will	O	O
expect	O	O
it	O	O
to	O	O
be	O	O
populated	O	O
with	O	O
intermediate	O	O
results	O	O
of	O	O
the	O	O
calculation	O	O
.	O	O
One	O	O
way	O	O
to	O	O
reuse	O	O
date	O	O
formats	O	O
without	O	O
trading	O	O
thread	O	O
-	O	O
safety	O	O
is	O	O
to	O	O
put	O	O
them	O	O
in	O	O
a	O	O
ThreadLocal	B-api_mention	B-api_mention
-	O	O
some	O	O
libraries	O	O
do	O	O
that	O	O
.	O	O
That	O	O
'	O	O
s	O	O
if	O	O
you	O	O
need	O	O
to	O	O
use	O	O
the	O	O
same	O	O
format	O	O
multiple	O	O
times	O	O
within	O	O
one	O	O
thread	O	O
.	O	O
But	O	O
in	O	O
case	O	O
you	O	O
are	O	O
using	O	O
a	O	O
servlet	O	O
container	O	O
(	O	O
that	O	O
has	O	O
a	O	O
thread	O	O
pool	O	O
)	O	O
,	O	O
remember	O	O
to	O	O
clean	O	O
the	O	O
thread	O	O
-	O	O
local	O	O
after	O	O
you	O	O
finish	O	O
.	O	O
To	O	O
be	O	O
honest	O	O
,	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
why	O	O
they	O	O
need	O	O
the	O	O
instance	O	O
field	O	O
,	O	O
but	O	O
that	O	O
'	O	O
s	O	O
the	O	O
way	O	O
it	O	O
is	O	O
.	O	O
You	O	O
can	O	O
also	O	O
use	O	O
joda	O	O
-	O	O
time	O	O
DateTimeFormat	B-api_mention	B-api_mention
which	O	O
is	O	O
threadsafe	O	O
.	O	O
Question	O	O
-	O	O
13195797	O	O
,	O	O
answer	O	O
-	O	O
20043507	O	O
Peter	O	O
Lawrey	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
great	O	O
because	O	O
it	O	O
is	O	O
simple	O	O
and	O	O
not	O	O
depending	O	O
on	O	O
anything	O	O
special	O	O
,	O	O
and	O	O
it	O	O
'	O	O
s	O	O
the	O	O
way	O	O
you	O	O
should	O	O
do	O	O
it	O	O
.	O	O
If	O	O
you	O	O
need	O	O
something	O	O
that	O	O
removes	O	O
subdirectories	O	O
and	O	O
their	O	O
contents	O	O
as	O	O
well	O	O
,	O	O
use	O	O
recursion	O	O
:	O	O
#	O	O
pre	O	O
To	O	O
spare	O	O
subdirectories	O	O
and	O	O
their	O	O
contents	O	O
(	O	O
part	O	O
of	O	O
your	O	O
question	O	O
)	O	O
,	O	O
modify	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
Or	O	O
,	O	O
since	O	O
you	O	O
wanted	O	O
a	O	O
one	O	O
-	O	O
line	O	O
solution	O	O
:	O	O
for	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
if	O	O
(	O	O
args	O	O
)	O	O
file	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Using	O	O
an	O	O
external	O	O
library	O	O
for	O	O
such	O	O
a	O	O
trivial	O	O
task	O	O
is	O	O
not	O	O
a	O	O
good	O	O
idea	O	O
unless	O	O
you	O	O
need	O	O
this	O	O
library	O	O
for	O	O
something	O	O
else	O	O
anyway	O	O
,	O	O
in	O	O
which	O	O
case	O	O
it	O	O
is	O	O
preferrable	O	O
to	O	O
use	O	O
existing	O	O
code	O	O
.	O	O
You	O	O
appear	O	O
to	O	O
be	O	O
using	O	O
the	O	O
Apache	O	O
library	O	O
anyway	O	O
so	O	O
use	O	O
its	O	O
FileUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
cleanDirectory	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Question	O	O
-	O	O
23453287	O	O
One	O	O
of	O	O
the	O	O
most	O	O
useful	O	O
features	O	O
of	O	O
Java	O	O
8	O	O
are	O	O
the	O	O
new	O	O
default	O	O
methods	O	O
on	O	O
interfaces	O	O
.	O	O
There	O	O
are	O	O
essentially	O	O
two	O	O
reasons	O	O
(	O	O
there	O	O
may	O	O
be	O	O
others	O	O
)	O	O
why	O	O
they	O	O
have	O	O
been	O	O
introduced	O	O
:	O	O
#	O	O
li	O	O
Providing	O	O
actual	O	O
default	O	O
implementations	O	O
.	O	O
Example	O	O
:	O	O
Iterator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Allowing	O	O
for	O	O
JDK	O	O
API	O	O
evolution	O	O
.	O	O
Example	O	O
:	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
From	O	O
an	O	O
API	O	O
designer	O	O
'	O	O
s	O	O
perspective	O	O
,	O	O
I	O	O
would	O	O
have	O	O
liked	O	O
to	O	O
be	O	O
able	O	O
to	O	O
use	O	O
other	O	O
modifiers	O	O
on	O	O
interface	O	O
methods	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
final	O	O
.	O	O
This	O	O
would	O	O
be	O	O
useful	O	O
when	O	O
adding	O	O
convenience	O	O
methods	O	O
,	O	O
preventing	O	O
"	O	O
accidental	O	O
"	O	O
overrides	O	O
in	O	O
implementing	O	O
classes	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
above	O	O
is	O	O
already	O	O
common	O	O
practice	O	O
if	O	O
Sender	O	O
were	O	O
a	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
,	O	O
default	O	O
and	O	O
final	O	O
are	O	O
obviously	O	O
contradicting	O	O
keywords	O	O
,	O	O
but	O	O
the	O	O
default	O	O
keyword	O	O
itself	O	O
would	O	O
not	O	O
have	O	O
been	O	O
strictly	O	O
required	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
assuming	O	O
that	O	O
this	O	O
contradiction	O	O
is	O	O
deliberate	O	O
,	O	O
to	O	O
reflect	O	O
the	O	O
subtle	O	O
differences	O	O
between	O	O
"	O	O
class	O	O
methods	O	O
with	O	O
body	O	O
"	O	O
(	O	O
just	O	O
methods	O	O
)	O	O
and	O	O
"	O	O
interface	O	O
methods	O	O
with	O	O
body	O	O
"	O	O
(	O	O
default	O	O
methods	O	O
)	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
differences	O	O
which	O	O
I	O	O
have	O	O
not	O	O
yet	O	O
understood	O	O
.	O	O
At	O	O
some	O	O
point	O	O
of	O	O
time	O	O
,	O	O
support	O	O
for	O	O
modifiers	O	O
like	O	O
static	O	O
and	O	O
final	O	O
on	O	O
interface	O	O
methods	O	O
was	O	O
not	O	O
yet	O	O
fully	O	O
explored	O	O
,	O	O
citing	O	O
Brian	O	O
Goetz	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
that	O	O
time	O	O
in	O	O
late	O	O
2011	O	O
,	O	O
obviously	O	O
,	O	O
support	O	O
for	O	O
static	O	O
methods	O	O
in	O	O
interfaces	O	O
was	O	O
added	O	O
.	O	O
Clearly	O	O
,	O	O
this	O	O
added	O	O
a	O	O
lot	O	O
of	O	O
value	O	O
to	O	O
the	O	O
JDK	O	O
libraries	O	O
themselves	O	O
,	O	O
such	O	O
as	O	O
with	O	O
Comparator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
comparing	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
:	O	O
What	O	O
is	O	O
the	O	O
reason	O	O
final	O	O
(	O	O
and	O	O
also	O	O
static	O	O
final	O	O
)	O	O
never	O	O
made	O	O
it	O	O
to	O	O
Java	O	O
8	O	O
interfaces	O	O
?	O	O
Question	O	O
-	O	O
22435833	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
there	O	O
is	O	O
a	O	O
new	O	O
method	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
chars	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
returns	O	O
a	O	O
stream	O	O
of	O	O
int	O	O
s	O	O
(	O	O
IntStream	B-api_mention	B-api_mention
)	O	O
that	O	O
represent	O	O
the	O	O
character	O	O
codes	O	O
.	O	O
I	O	O
guess	O	O
many	O	O
people	O	O
would	O	O
expect	O	O
a	O	O
stream	O	O
of	O	O
char	O	O
s	O	O
here	O	O
instead	O	O
.	O	O
What	O	O
was	O	O
the	O	O
motivation	O	O
to	O	O
design	O	O
the	O	O
API	O	O
this	O	O
way	O	O
?	O	O
Question	O	O
-	O	O
32164385	O	O
,	O	O
answer	O	O
-	O	O
32167166	O	O
#	O	O
blockquote	O	O
I	O	O
must	O	O
agree	O	O
with	O	O
other	O	O
answers	O	O
that	O	O
there	O	O
is	O	O
no	O	O
direct	O	O
way	O	O
to	O	O
determine	O	O
that	O	O
method	O	O
will	O	O
modify	O	O
your	O	O
object	O	O
or	O	O
not	O	O
and	O	O
yes	O	O
to	O	O
make	O	O
sure	O	O
that	O	O
method	O	O
can	O	O
not	O	O
modify	O	O
your	O	O
Object	B-api_mention	B-api_mention
you	O	O
all	O	O
have	O	O
to	O	O
do	O	O
it	O	O
is	O	O
from	O	O
your	O	O
side	O	O
.	O	O
#	O	O
blockquote	O	O
Here	O	O
the	O	O
method	O	O
name	O	O
comes	O	O
to	O	O
the	O	O
scene	O	O
.	O	O
Moving	O	O
ahead	O	O
with	O	O
the	O	O
naming	O	O
convention	O	O
of	O	O
method	O	O
we	O	O
have	O	O
to	O	O
take	O	O
a	O	O
look	O	O
at	O	O
some	O	O
method	O	O
declarations	O	O
which	O	O
clearly	O	O
convince	O	O
you	O	O
that	O	O
your	O	O
Object	B-api_mention	B-api_mention
will	O	O
not	O	O
be	O	O
changed	O	O
at	O	O
all	O	O
.	O	O
For	O	O
example	O	O
,	O	O
You	O	O
know	O	O
that	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
will	O	O
not	O	O
change	O	O
your	O	O
actual	O	O
array	O	O
,	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
not	O	O
change	O	O
your	O	O
boo	O	O
Method	O	O
names	O	O
are	O	O
real	O	O
weapons	O	O
to	O	O
provide	O	O
as	O	O
much	O	O
information	O	O
as	O	O
possible	O	O
to	O	O
the	O	O
method	O	O
user	O	O
.	O	O
(	O	O
Yes	O	O
!	O	O
it	O	O
'	O	O
s	O	O
always	O	O
not	O	O
possible	O	O
but	O	O
quite	O	O
a	O	O
good	O	O
practice	O	O
to	O	O
follow	O	O
.	O	O
)	O	O
Let	O	O
'	O	O
s	O	O
consider	O	O
it	O	O
in	O	O
your	O	O
case	O	O
that	O	O
say	O	O
printBoo	O	B-api_mention
will	O	O
only	O	O
print	O	O
,	O	O
copyBoo	O	B-api_mention
will	O	O
only	O	O
copy	O	O
,	O	O
clearBoo	O	O
will	O	O
reset	O	O
all	O	O
attributes	O	O
,	O	O
checkAndCreateNewBoo	O	O
will	O	O
check	O	O
your	O	O
boo	O	O
Object	B-api_mention	B-api_mention
and	O	O
create	O	O
new	O	O
if	O	O
required	O	O
.	O	O
So	O	O
,	O	O
ultimately	O	O
if	O	O
we	O	O
can	O	O
use	O	O
them	O	O
in	O	O
a	O	O
proper	O	O
way	O	O
caller	O	O
can	O	O
be	O	O
assured	O	O
with	O	O
the	O	O
fact	O	O
that	O	O
Object	B-api_mention	B-api_mention
will	O	O
remain	O	O
the	O	O
same	O	O
after	O	O
calling	O	O
the	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
17828584	O	O
,	O	O
answer	O	O
-	O	O
17836189	O	O
I	O	O
think	O	O
the	O	O
others	O	O
have	O	O
done	O	O
a	O	O
good	O	O
job	O	O
at	O	O
explaining	O	O
why	O	O
cnt	O	O
>	O	O
0	O	O
,	O	O
but	O	O
there	O	O
'	O	O
s	O	O
not	O	O
enough	O	O
details	O	O
regarding	O	O
why	O	O
cnt	O	O
=	O	O
4	O	O
,	O	O
and	O	O
why	O	O
cnt	O	O
varies	O	O
so	O	O
widely	O	O
among	O	O
different	O	O
settings	O	O
.	O	O
I	O	O
will	O	O
attempt	O	O
to	O	O
fill	O	O
that	O	O
void	O	O
here	O	O
.	O	O
Let	O	O
#	O	O
li	O	O
X	O	O
be	O	O
the	O	O
total	O	O
stack	O	O
size	O	O
#	O	O
li	O	O
M	O	O
be	O	O
the	O	O
stack	O	O
space	O	O
used	O	O
when	O	O
we	O	O
enter	O	O
main	O	O
the	O	O
first	O	O
time	O	O
#	O	O
li	O	O
R	O	O
be	O	O
the	O	O
stack	O	O
space	O	O
increase	O	O
each	O	O
time	O	O
we	O	O
enter	O	O
into	O	O
main	O	O
#	O	O
li	O	O
P	O	O
be	O	O
the	O	O
stack	O	O
space	O	O
necessary	O	O
to	O	O
run	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
When	O	O
we	O	O
first	O	O
get	O	O
into	O	O
main	O	O
,	O	O
the	O	O
space	O	O
left	O	O
over	O	O
is	O	O
X	O	O
-	O	O
M	O	O
.	O	O
Each	O	O
recursive	O	O
call	O	O
takes	O	O
up	O	O
R	O	O
more	O	O
memory	O	O
.	O	O
So	O	O
for	O	O
1	O	O
recursive	O	O
call	O	O
(	O	O
1	O	O
more	O	O
than	O	O
original	O	O
)	O	O
,	O	O
the	O	O
memory	O	O
use	O	O
is	O	O
M	O	O
+	O	O
R	O	O
.	O	O
Suppose	O	O
that	O	O
StackOverflowError	B-api_mention	B-api_mention
is	O	O
thrown	O	O
after	O	O
C	O	O
successful	O	O
recursive	O	O
calls	O	O
,	O	O
that	O	O
is	O	O
,	O	O
M	O	O
+	O	O
C	O	O
*	O	O
R	O	O
<	O	O
=	O	O
X	O	O
and	O	O
M	O	O
+	O	O
C	O	O
*	O	O
(	O	O
R	O	O
+	O	O
1	O	O
)	O	O
>	O	O
X	O	O
.	O	O
At	O	O
the	O	O
time	O	O
of	O	O
the	O	O
first	O	O
StackOverflowError	B-api_mention	B-api_mention
,	O	O
there	O	O
'	O	O
s	O	O
X	O	O
-	O	O
M	O	O
-	O	O
C	O	O
*	O	O
R	O	O
memory	O	O
left	O	O
.	O	O
To	O	O
be	O	O
able	O	O
to	O	O
run	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
prinln	I-api_mention	I-api_mention
,	O	O
we	O	O
need	O	O
P	O	O
amount	O	O
of	O	O
space	O	O
left	O	O
on	O	O
the	O	O
stack	O	O
.	O	O
If	O	O
it	O	O
so	O	O
happens	O	O
that	O	O
X	O	O
-	O	O
M	O	O
-	O	O
C	O	O
*	O	O
R	O	O
>	O	O
=	O	O
P	O	O
,	O	O
then	O	O
0	O	O
will	O	O
be	O	O
printed	O	O
.	O	O
If	O	O
P	O	O
requires	O	O
more	O	O
space	O	O
,	O	O
then	O	O
we	O	O
remove	O	O
frames	O	O
from	O	O
the	O	O
stack	O	O
,	O	O
gaining	O	O
R	O	O
memory	O	O
at	O	O
the	O	O
cost	O	O
of	O	O
cnt	O	O
+	O	O
+	O	O
.	O	O
When	O	O
println	B-api_mention	B-api_mention
is	O	O
finally	O	O
able	O	O
to	O	O
run	O	O
,	O	O
X	O	O
-	O	O
M	O	O
-	O	O
(	O	O
C	O	O
-	O	O
cnt	O	O
)	O	O
*	O	O
R	O	O
>	O	O
=	O	O
P	O	O
.	O	O
So	O	O
if	O	O
P	O	O
is	O	O
large	O	O
for	O	O
a	O	O
particular	O	O
system	O	O
,	O	O
then	O	O
cnt	O	O
will	O	O
be	O	O
large	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
look	O	O
at	O	O
this	O	O
with	O	O
some	O	O
examples	O	O
.	O	O
Example	O	O
1	O	O
:	O	O
Suppose	O	O
#	O	O
li	O	O
X	O	O
=	O	O
100	O	O
#	O	O
li	O	O
M	O	O
=	O	O
1	O	O
#	O	O
li	O	O
R	O	O
=	O	O
2	O	O
#	O	O
li	O	O
P	O	O
=	O	O
1	O	O
Then	O	O
C	O	O
=	O	O
floor	O	O
(	O	O
(	O	O
X	O	O
-	O	O
M	O	O
)	O	O
/	O	O
R	O	O
)	O	O
=	O	O
49	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
ceiling	O	O
(	O	O
(	O	O
P	O	O
-	O	O
(	O	O
X	O	O
-	O	O
M	O	O
-	O	O
C	O	O
*	O	O
R	O	O
)	O	O
)	O	O
/	O	O
R	O	O
)	O	O
=	O	O
0	O	O
.	O	O
Example	O	O
2	O	O
:	O	O
Suppose	O	O
that	O	O
#	O	O
li	O	O
X	O	O
=	O	O
100	O	O
#	O	O
li	O	O
M	O	O
=	O	O
1	O	O
#	O	O
li	O	O
R	O	O
=	O	O
5	O	O
#	O	O
li	O	O
P	O	O
=	O	O
12	O	O
Then	O	O
C	O	O
=	O	O
19	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
2	O	O
.	O	O
Example	O	O
3	O	O
:	O	O
Suppose	O	O
that	O	O
#	O	O
li	O	O
X	O	O
=	O	O
101	O	O
#	O	O
li	O	O
M	O	O
=	O	O
1	O	O
#	O	O
li	O	O
R	O	O
=	O	O
5	O	O
#	O	O
li	O	O
P	O	O
=	O	O
12	O	O
Then	O	O
C	O	O
=	O	O
20	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
3	O	O
.	O	O
Example	O	O
4	O	O
:	O	O
Suppose	O	O
that	O	O
#	O	O
li	O	O
X	O	O
=	O	O
101	O	O
#	O	O
li	O	O
M	O	O
=	O	O
2	O	O
#	O	O
li	O	O
R	O	O
=	O	O
5	O	O
#	O	O
li	O	O
P	O	O
=	O	O
12	O	O
Then	O	O
C	O	O
=	O	O
19	O	O
,	O	O
and	O	O
cnt	O	O
=	O	O
2	O	O
.	O	O
Thus	O	O
,	O	O
we	O	O
see	O	O
that	O	O
both	O	O
the	O	O
system	O	O
(	O	O
M	O	O
,	O	O
R	O	O
,	O	O
and	O	O
P	O	O
)	O	O
and	O	O
the	O	O
stack	O	O
size	O	O
(	O	O
X	O	O
)	O	O
affects	O	O
cnt	O	O
.	O	O
As	O	O
a	O	O
side	O	O
note	O	O
,	O	O
it	O	O
does	O	O
not	O	O
matter	O	O
how	O	O
much	O	O
space	O	O
catch	O	O
requires	O	O
to	O	O
start	O	O
.	O	O
As	O	O
long	O	O
as	O	O
there	O	O
is	O	O
not	O	O
enough	O	O
space	O	O
for	O	O
catch	O	O
,	O	O
then	O	O
cnt	O	O
will	O	O
not	O	O
increase	O	O
,	O	O
so	O	O
there	O	O
are	O	O
no	O	O
external	O	O
effects	O	O
.	O	O
EDIT	O	O
I	O	O
take	O	O
back	O	O
what	O	O
I	O	O
said	O	O
about	O	O
catch	O	O
.	O	O
It	O	O
does	O	O
play	O	O
a	O	O
role	O	O
.	O	O
Suppose	O	O
it	O	O
requires	O	O
T	O	O
amount	O	O
of	O	O
space	O	O
to	O	O
start	O	O
.	O	O
cnt	O	O
starts	O	O
to	O	O
increment	O	O
when	O	O
the	O	O
leftover	O	O
space	O	O
is	O	O
greater	O	O
than	O	O
T	O	O
,	O	O
and	O	O
println	B-api_mention	B-api_mention
runs	O	O
when	O	O
the	O	O
leftover	O	O
space	O	O
is	O	O
greater	O	O
than	O	O
T	O	O
+	O	O
P	O	O
.	O	O
This	O	O
adds	O	O
an	O	O
extra	O	O
step	O	O
to	O	O
the	O	O
calculations	O	O
and	O	O
further	O	O
muddies	O	O
up	O	O
the	O	O
already	O	O
muddy	O	O
analysis	O	O
.	O	O
EDIT	O	O
I	O	O
finally	O	O
found	O	O
time	O	O
to	O	O
run	O	O
some	O	O
experiments	O	O
to	O	O
back	O	O
up	O	O
my	O	O
theory	O	O
.	O	O
Unfortunately	O	O
,	O	O
the	O	O
theory	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
match	O	O
up	O	O
with	O	O
the	O	O
experiments	O	O
.	O	O
What	O	O
actually	O	O
happens	O	O
is	O	O
very	O	O
different	O	O
.	O	O
Experiment	O	O
setup	O	O
:	O	O
Ubuntu	O	O
12	O	O
.	O	O
04	O	O
server	O	O
with	O	O
default	O	O
java	O	O
and	O	O
default	O	O
-	O	O
jdk	O	O
.	O	O
Xss	O	O
starting	O	O
at	O	O
70	O	O
,	O	O
000	O	O
at	O	O
1	O	O
byte	O	O
increments	O	O
to	O	O
460	O	O
,	O	O
000	O	O
.	O	O
The	O	O
results	O	O
are	O	O
available	O	O
at	O	O
:	O	O
#	O	O
a	O	O
I	O	O
'	O	O
ve	O	O
created	O	O
another	O	O
version	O	O
where	O	O
every	O	O
repeated	O	O
data	O	O
point	O	O
is	O	O
removed	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
only	O	O
points	O	O
that	O	O
are	O	O
different	O	O
from	O	O
the	O	O
previous	O	O
are	O	O
shown	O	O
.	O	O
This	O	O
makes	O	O
it	O	O
easier	O	O
to	O	O
see	O	O
anomalies	O	O
.	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
14636178	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
use	O	O
the	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
springframework	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orm	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
jdo	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
TransactionAwarePersistenceManagerFactoryProxy	I-api_mention	I-api_mention
in	O	O
my	O	O
Spring	O	O
project	O	O
,	O	O
but	O	O
I	O	O
am	O	O
not	O	O
sure	O	O
how	O	O
to	O	O
use	O	O
it	O	O
or	O	O
whether	O	O
it	O	O
'	O	O
s	O	O
exactly	O	O
what	O	O
I	O	O
am	O	O
looking	O	O
for	O	O
.	O	O
I	O	O
realize	O	O
it	O	O
can	O	O
help	O	O
make	O	O
my	O	O
DAOs	O	O
work	O	O
with	O	O
a	O	O
plain	O	O
JDO	O	O
PersistenceManagerFactory	B-api_mention	B-api_mention
.	O	O
Another	O	O
question	O	O
is	O	O
:	O	O
what	O	O
happens	O	O
if	O	O
the	O	O
proxy	O	O
doesn	O	O
'	O	O
t	O	O
get	O	O
made	O	O
properly	O	O
?	O	O
Can	O	O
I	O	O
still	O	O
use	O	O
it	O	O
to	O	O
access	O	O
my	O	O
factory	O	O
to	O	O
create	O	O
a	O	O
transaction	O	O
aware	O	O
persistence	O	O
manager	O	O
?	O	O
If	O	O
the	O	O
object	O	O
managed	O	O
by	O	O
the	O	O
factory	O	O
is	O	O
a	O	O
singleton	O	O
,	O	O
does	O	O
this	O	O
change	O	O
things	O	O
?	O	O
Why	O	O
not	O	O
just	O	O
access	O	O
the	O	O
PersistenceManagerFactory	B-api_mention	B-api_mention
directly	O	O
?	O	O
Perhaps	O	O
PersistenceManagerFactoryUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getPersistenceManager	I-api_mention	I-api_mention
would	O	O
be	O	O
more	O	O
suited	O	O
to	O	O
my	O	O
needs	O	O
?	O	O
Can	O	O
getObject	B-api_mention	B-api_mention
return	O	O
null	O	O
?	O	O
Question	O	O
-	O	O
27888429	O	O
,	O	O
answer	O	O
-	O	O
27888452	O	O
Alternative	O	O
to	O	O
@	O	O
sol4me	O	O
'	O	O
s	O	O
solution	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Of	O	O
the	O	O
difference	O	O
between	O	O
this	O	O
and	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
it	O	O
does	O	O
make	O	O
a	O	O
difference	O	O
if	O	O
your	O	O
array	O	O
is	O	O
of	O	O
a	O	O
primitive	O	O
type	O	O
.	O	O
For	O	O
instance	O	O
,	O	O
if	O	O
you	O	O
do	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
where	O	O
someArray	O	O
is	O	O
a	O	O
long	O	O
[	O	O
]	O	O
,	O	O
it	O	O
will	O	O
return	O	O
a	O	O
LongStream	B-api_mention	B-api_mention
.	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
on	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
will	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
with	O	O
a	O	O
single	O	O
element	O	O
.	O	O
Question	O	O
-	O	O
22182669	O	O
,	O	O
answer	O	O
-	O	O
22223113	O	O
The	O	O
most	O	O
common	O	O
cause	O	O
of	O	O
StackOverFlowError	B-api_mention	B-api_mention
is	O	O
excessively	O	O
deep	O	O
or	O	O
infinite	O	O
recursion	O	O
.	O	O
For	O	O
instance	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
Java	O	O
:	O	O
There	O	O
are	O	O
two	O	O
areas	O	O
in	O	O
memory	O	O
the	O	O
heap	O	O
and	O	O
stack	O	O
.	O	O
The	O	O
stack	O	O
memory	O	O
is	O	O
used	O	O
to	O	O
store	O	O
local	O	O
variables	O	O
and	O	O
function	O	O
call	O	O
,	O	O
while	O	O
heap	O	O
memory	O	O
is	O	O
used	O	O
to	O	O
store	O	O
objects	O	O
in	O	O
Java	O	O
.	O	O
If	O	O
there	O	O
is	O	O
no	O	O
memory	O	O
left	O	O
in	O	O
stack	O	O
for	O	O
storing	O	O
function	O	O
call	O	O
or	O	O
local	O	O
variable	O	O
,	O	O
JVM	O	O
will	O	O
throw	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
StackOverFlowError	I-api_mention	I-api_mention
while	O	O
if	O	O
there	O	O
is	O	O
no	O	O
more	O	O
heap	O	O
space	O	O
for	O	O
creating	O	O
object	O	O
,	O	O
JVM	O	O
will	O	O
throw	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
OutOfMemoryError	I-api_mention	I-api_mention
Question	O	O
-	O	O
32475166	O	O
,	O	O
answer	O	O
-	O	O
32475290	O	O
The	O	O
chief	O	O
difference	O	O
is	O	O
that	O	O
an	O	O
if	O	O
else	O	O
block	O	O
is	O	O
a	O	O
statement	O	O
whereas	O	O
the	O	O
ternary	O	O
(	O	O
more	O	O
often	O	O
known	O	O
as	O	O
the	O	O
conditional	O	O
operator	O	O
in	O	O
Java	O	O
)	O	O
is	O	O
an	O	O
expression	O	O
.	O	O
A	O	O
statement	O	O
can	O	O
do	O	O
things	O	O
like	O	O
return	O	O
to	O	O
the	O	O
caller	O	O
on	O	O
some	O	O
of	O	O
the	O	O
control	O	O
paths	O	O
.	O	O
An	O	O
expression	O	O
can	O	O
be	O	O
used	O	O
in	O	O
an	O	O
assignment	O	O
:	O	O
int	O	O
n	O	O
=	O	O
condition	O	O
?	O	O
3	O	O
:	O	O
2	O	O
;	O	O
So	O	O
the	O	O
two	O	O
expressions	O	O
in	O	O
the	O	O
ternary	O	O
after	O	O
the	O	O
condition	O	O
need	O	O
to	O	O
be	O	O
coercable	O	O
to	O	O
the	O	O
same	O	O
type	O	O
.	O	O
This	O	O
can	O	O
cause	O	O
some	O	O
odd	O	O
effects	O	O
in	O	O
Java	O	O
particularly	O	O
with	O	O
auto	O	O
-	O	O
boxing	O	O
and	O	O
automatic	O	O
reference	O	O
casting	O	O
-	O	O
this	O	O
is	O	O
what	O	O
the	O	O
comment	O	O
in	O	O
your	O	O
posted	O	O
code	O	O
is	O	O
referring	O	O
to	O	O
.	O	O
The	O	O
coercion	O	O
of	O	O
the	O	O
expressions	O	O
in	O	O
your	O	O
case	O	O
would	O	O
be	O	O
to	O	O
a	O	O
java	O	B-api_mention
.	O	I-api_mention
lang	O	I-api_mention
.	O	I-api_mention
reflect	O	I-api_mention
.	O	O
Executable	O	O
type	O	O
(	O	O
as	O	O
that	O	O
'	O	O
s	O	O
the	O	O
most	O	O
specialised	O	O
type	O	O
)	O	O
and	O	O
that	O	O
does	O	O
not	O	O
exist	O	O
in	O	O
older	O	O
versions	O	O
of	O	O
Java	O	O
.	O	O
Stylistically	O	O
you	O	O
should	O	O
use	O	O
an	O	O
if	O	O
else	O	O
block	O	O
if	O	O
the	O	O
code	O	O
is	O	O
statement	O	O
-	O	O
like	O	O
,	O	O
and	O	O
a	O	O
ternary	O	O
if	O	O
it	O	O
'	O	O
s	O	O
expression	O	O
-	O	O
like	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
you	O	O
can	O	O
make	O	O
an	O	O
if	O	O
else	O	O
block	O	O
behave	O	O
like	O	O
an	O	O
expression	O	O
if	O	O
you	O	O
use	O	O
a	O	O
lambda	O	O
function	O	O
.	O	O
Question	O	O
-	O	O
23114015	O	O
,	O	O
answer	O	O
-	O	O
32874755	O	O
If	O	O
you	O	O
know	O	O
the	O	O
size	O	O
you	O	O
could	O	O
use	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collection	I-api_mention	I-api_mention
which	O	O
provides	O	O
the	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
then	O	O
:	O	O
new	O	O
Hand	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
I	O	O
faced	O	O
the	O	O
same	O	O
problem	O	O
and	O	O
was	O	O
surprised	O	O
that	O	O
my	O	O
Iterable	B-api_mention	B-api_mention
implementation	O	O
could	O	O
be	O	O
very	O	O
easily	O	O
extended	O	O
to	O	O
an	O	O
AbstractCollection	B-api_mention	B-api_mention
implementation	O	O
by	O	O
simply	O	O
adding	O	O
the	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
(	O	O
luckily	O	O
I	O	O
had	O	O
the	O	O
size	O	O
of	O	O
the	O	O
collection	O	O
:	O	O
-	O	O
)	O	O
You	O	O
should	O	O
also	O	O
consider	O	O
to	O	O
override	O	O
Spliterator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
spliterator	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
31696485	O	O
,	O	O
answer	O	O
-	O	O
31696584	O	O
Your	O	O
question	O	O
is	O	O
based	O	O
on	O	O
assumption	O	O
that	O	O
the	O	O
code	O	O
which	O	O
may	O	O
throw	O	O
NullPointerException	B-api_mention	B-api_mention
is	O	O
worse	O	O
than	O	O
the	O	O
code	O	O
which	O	O
may	O	O
not	O	O
.	O	O
This	O	O
assumption	O	O
is	O	O
wrong	O	O
.	O	O
If	O	O
you	O	O
expect	O	O
that	O	O
your	O	O
foobar	O	O
is	O	O
never	O	O
null	O	O
due	O	O
to	O	O
the	O	O
program	O	O
logic	O	O
,	O	O
it	O	O
'	O	O
s	O	O
much	O	O
better	O	O
to	O	O
use	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
you	O	O
will	O	O
see	O	O
a	O	O
NullPointerException	B-api_mention	B-api_mention
which	O	O
will	O	O
indicate	O	O
that	O	O
your	O	O
program	O	O
has	O	O
a	O	O
bug	O	O
.	O	O
If	O	O
you	O	O
use	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofNullable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
the	O	O
foobar	O	O
happens	O	O
to	O	O
be	O	O
null	O	O
due	O	O
to	O	O
the	O	O
bug	O	O
,	O	O
then	O	O
your	O	O
program	O	O
will	O	O
silently	O	O
continue	O	O
working	O	O
incorrectly	O	O
,	O	O
which	O	O
may	O	O
be	O	O
a	O	O
bigger	O	O
disaster	O	O
.	O	O
This	O	O
way	O	O
an	O	O
error	O	O
may	O	O
occur	O	O
much	O	O
later	O	O
and	O	O
it	O	O
would	O	O
be	O	O
much	O	O
harder	O	O
to	O	O
understand	O	O
at	O	O
which	O	O
point	O	O
it	O	O
went	O	O
wrong	O	O
.	O	O
Question	O	O
-	O	O
18263489	O	O
,	O	O
answer	O	O
-	O	O
29873100	O	O
It	O	O
isn	O	O
'	O	O
t	O	O
pretty	O	O
,	O	O
but	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
allows	O	O
you	O	O
to	O	O
use	O	O
a	O	O
null	O	O
String	B-api_mention	B-api_mention
in	O	O
a	O	O
switch	O	O
.	O	O
If	O	O
it	O	O
finds	O	O
null	O	O
,	O	O
it	O	O
converts	O	O
it	O	O
to	O	O
StringLiteral	O	O
,	O	O
otherwise	O	O
it	O	O
just	O	O
returns	O	O
the	O	O
same	O	O
String	B-api_mention	B-api_mention
you	O	O
passed	O	O
it	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
handle	O	O
StringLiteral	O	O
explicitly	O	O
,	O	O
then	O	O
it	O	O
will	O	O
go	O	O
to	O	O
default	O	O
.	O	O
The	O	O
only	O	O
caveat	O	O
is	O	O
that	O	O
there	O	O
is	O	O
no	O	O
way	O	O
of	O	O
distinguishing	O	O
between	O	O
the	O	O
String	B-api_mention	B-api_mention
StringLiteral	O	O
and	O	O
an	O	O
actual	O	O
null	O	O
String	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5785745	O	O
,	O	O
answer	O	O
-	O	O
34845194	O	O
You	O	O
can	O	O
also	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOfRange	I-api_mention	I-api_mention
.	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
method	O	O
is	O	O
similar	O	O
to	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
more	O	O
flexible	O	O
.	O	O
Both	O	O
of	O	O
them	O	O
use	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
arraycopy	I-api_mention	I-api_mention
under	O	O
the	O	O
hood	O	O
.	O	O
See	O	O
:	O	O
#	O	O
li	O	O
#	O	O
a	O	O
#	O	O
li	O	O
#	O	O
a	O	O
#	O	O
li	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16148619	O	O
use	O	O
int	O	O
as	O	O
Object	B-api_mention	B-api_mention
not	O	O
as	O	O
primitive	O	O
type	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
7488643	O	O
,	O	O
answer	O	O
-	O	O
7488710	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
returns	O	O
a	O	O
fixed	O	O
-	O	O
size	O	O
List	B-api_mention	B-api_mention
backed	O	O
by	O	O
the	O	O
array	O	O
.	O	O
If	O	O
you	O	O
want	O	O
a	O	O
normal	O	O
mutable	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
ArrayList	I-api_mention	I-api_mention
you	O	O
need	O	O
to	O	O
do	O	O
this	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Or	O	O
,	O	O
using	O	O
Guava	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Using	O	O
a	O	O
Splitter	B-api_mention	B-api_mention
gives	O	O
you	O	O
more	O	O
flexibility	O	O
in	O	O
how	O	O
you	O	O
split	O	O
the	O	O
string	O	O
and	O	O
gives	O	O
you	O	O
the	O	O
ability	O	O
to	O	O
,	O	O
for	O	O
example	O	O
,	O	O
skip	O	O
empty	O	O
strings	O	O
in	O	O
the	O	O
results	O	O
and	O	O
trim	O	O
results	O	O
.	O	O
It	O	O
also	O	O
has	O	O
less	O	O
weird	O	O
behavior	O	O
than	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
as	O	O
well	O	O
as	O	O
not	O	O
requiring	O	O
you	O	O
to	O	O
split	O	O
by	O	O
regex	O	O
(	O	O
that	O	O
'	O	O
s	O	O
just	O	O
one	O	O
option	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
27482579	O	O
How	O	O
is	O	O
the	O	O
compiler	O	O
not	O	O
complaining	O	O
when	O	O
I	O	O
write	O	O
the	O	O
following	O	O
code	O	O
?	O	O
#	O	O
pre	O	O
Even	O	O
though	O	O
it	O	O
is	O	O
an	O	O
instance	O	O
of	O	O
the	O	O
same	O	O
class	O	O
in	O	O
which	O	O
testPrivate	O	O
is	O	O
written	O	O
,	O	O
shouldn	O	O
'	O	O
t	O	O
it	O	O
give	O	O
a	O	O
compilation	O	O
error	O	O
at	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
After	O	O
all	O	O
,	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
access	O	O
a	O	O
private	O	O
variable	O	O
directly	O	O
.	O	O
The	O	O
code	O	O
even	O	O
runs	O	O
fine	O	O
.	O	O
Question	O	O
-	O	O
10786042	O	O
,	O	O
answer	O	O
-	O	O
25735202	O	O
You	O	O
need	O	O
to	O	O
first	O	O
create	O	O
a	O	O
URI	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
convert	O	O
that	O	O
Uri	B-api_mention	O
to	O	O
ASCII	O	O
string	O	O
:	O	O
urlStr	O	O
=	O	O
uri	O	O
.	B-api_mention	B-api_mention
toASCIIString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Now	O	O
your	O	O
url	O	O
string	O	O
is	O	O
completely	O	O
encoded	O	O
first	O	O
we	O	O
did	O	O
simple	O	O
url	O	O
encoding	O	O
and	O	O
then	O	O
we	O	O
converted	O	O
it	O	O
to	O	O
ASCII	O	O
String	B-api_mention	B-api_mention
to	O	O
make	O	O
sure	O	O
no	O	O
character	O	O
outside	O	O
US	O	O
-	O	O
ASCII	O	O
are	O	O
remaining	O	O
in	O	O
string	O	O
.	O	O
This	O	O
is	O	O
exactly	O	O
how	O	O
browsers	O	O
do	O	O
.	O	O
Question	O	O
-	O	O
9510125	O	O
,	O	O
answer	O	O
-	O	O
9511880	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
In	O	O
Swing	O	O
when	O	O
you	O	O
create	O	O
Component	B-api_mention	B-api_mention
,	O	O
it	O	O
is	O	O
not	O	O
valid	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
'	O	O
s	O	O
valid	O	O
property	O	O
is	O	O
false	O	O
.	O	O
A	O	O
component	O	O
is	O	O
said	O	O
to	O	O
be	O	O
valid	O	O
,	O	O
when	O	O
it	O	O
'	O	O
s	O	O
width	O	O
,	O	O
height	O	O
,	O	O
location	O	O
and	O	O
stuff	O	O
has	O	O
been	O	O
determined	O	O
.	O	O
This	O	O
is	O	O
usually	O	O
done	O	O
by	O	O
calling	O	O
their	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
directly	O	O
or	O	O
indirectly	O	O
.	O	O
When	O	O
we	O	O
call	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
containers	O	O
,	O	O
it	O	O
will	O	O
validate	O	O
the	O	O
container	O	O
(	O	O
if	O	O
it	O	O
is	O	O
invalid	O	O
)	O	O
by	O	O
calling	O	O
its	O	O
doLayout	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
typically	O	O
will	O	O
invoke	O	O
the	O	O
LayoutManager	B-api_mention	B-api_mention
.	O	O
Now	O	O
each	O	O
child	O	O
placed	O	O
on	O	O
this	O	O
container	O	O
will	O	O
be	O	O
validated	O	O
recursively	O	O
,	O	O
so	O	O
that	O	O
the	O	O
entire	O	O
tree	O	O
will	O	O
be	O	O
laid	O	O
out	O	O
and	O	O
will	O	O
become	O	O
valid	O	O
.	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
to	O	O
be	O	O
called	O	O
when	O	O
you	O	O
change	O	O
an	O	O
attribute	O	O
that	O	O
would	O	O
affect	O	O
their	O	O
width	O	O
/	O	O
height	O	O
and	O	O
call	O	O
repaint	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
you	O	O
change	O	O
an	O	O
attribute	O	O
that	O	O
would	O	O
affect	O	O
their	O	O
appearance	O	O
.	O	O
For	O	O
Example	O	O
,	O	O
If	O	O
your	O	O
JFrame	O	O
contains	O	O
a	O	O
JPanel	O	O
,	O	O
now	O	O
at	O	O
certain	O	O
point	O	O
of	O	O
time	O	O
you	O	O
removed	O	O
that	O	O
JPanel	O	O
and	O	O
inserted	O	O
a	O	O
new	O	O
one	O	O
in	O	O
it	O	O
'	O	O
s	O	O
place	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
newly	O	O
placed	O	O
JPanel	O	O
,	O	O
the	O	O
size	O	O
of	O	O
the	O	O
components	O	O
inside	O	O
the	O	O
JPanel	O	O
as	O	O
well	O	O
as	O	O
The	O	O
CONTAINER	O	O
itself	O	O
(	O	O
by	O	O
virtue	O	O
of	O	O
the	O	O
layout	O	O
manager	O	O
used	O	O
by	O	O
it	O	O
)	O	O
,	O	O
changes	O	O
.	O	O
Which	O	O
pushes	O	O
it	O	O
to	O	O
the	O	O
invalidate	O	O
state	O	O
.	O	O
So	O	O
in	O	O
order	O	O
to	O	O
validate	O	O
this	O	O
change	O	O
,	O	O
you	O	O
have	O	O
to	O	O
explicitly	O	O
call	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
invalidate	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
This	O	O
thing	O	O
is	O	O
something	O	O
,	O	O
I	O	O
had	O	O
never	O	O
used	O	O
,	O	O
so	O	O
might	O	O
be	O	O
not	O	O
much	O	O
of	O	O
the	O	O
info	O	O
I	O	O
can	O	O
give	O	O
.	O	O
But	O	O
seems	O	O
like	O	O
the	O	O
scenario	O	O
presented	O	O
above	O	O
,	O	O
can	O	O
give	O	O
a	O	O
bit	O	O
of	O	O
hint	O	O
,	O	O
as	O	O
to	O	O
what	O	O
happens	O	O
in	O	O
invalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
22561614	O	O
Note	O	O
:	O	O
this	O	O
question	O	O
originates	O	O
from	O	O
a	O	O
dead	O	O
link	O	O
which	O	O
was	O	O
a	O	O
previous	O	O
SO	O	O
question	O	O
,	O	O
but	O	O
here	O	O
goes	O	O
.	O	O
.	O	O
.	O	O
See	O	O
this	O	O
code	O	O
(	O	O
note	O	O
:	O	O
I	O	O
do	O	O
know	O	O
that	O	O
this	O	O
code	O	O
won	O	O
'	O	O
t	O	O
"	O	O
work	O	O
"	O	O
and	O	O
that	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
compare	I-api_mention	I-api_mention
should	O	O
be	O	O
used	O	O
-	O	O
-	O	O
I	O	O
just	O	O
extracted	O	O
it	O	O
from	O	O
the	O	O
linked	O	O
question	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
According	O	O
to	O	O
the	O	O
javadoc	O	O
of	O	O
.	B-api_mention	B-api_mention
min	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
.	B-api_mention	B-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
the	O	O
argument	O	O
of	O	O
both	O	O
should	O	O
be	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
.	O	O
Yet	O	O
here	O	O
the	O	O
method	O	O
references	O	O
are	O	O
to	O	O
static	O	O
methods	O	O
of	O	O
the	O	O
Integer	B-api_mention	B-api_mention
class	O	O
.	O	O
So	O	O
,	O	O
why	O	O
does	O	O
this	O	O
compile	O	O
at	O	O
all	O	O
?	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
33687544	O	O
For	O	O
HTML	O	O
response	O	O
below	O	O
code	O	O
can	O	O
be	O	O
used	O	O
bufString	O	O
.	O	B-api_mention
append	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
32623834	O	O
,	O	O
answer	O	O
-	O	O
32624143	O	O
You	O	O
just	O	O
changed	O	O
the	O	O
String	B-api_mention	B-api_mention
of	O	O
String	B-api_mention	B-api_mention
constant	O	O
pool	O	O
Mario	O	O
to	O	O
Luigi	O	O
which	O	O
was	O	O
referenced	O	O
by	O	O
multiple	O	O
String	B-api_mention	B-api_mention
s	O	O
,	O	O
so	O	O
every	O	O
referencing	O	O
literal	O	O
Mario	O	O
is	O	O
now	O	O
Luigi	O	O
.	O	O
Field	B-api_mention	O
stringValue	O	O
=	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
class	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getDeclaredField	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
have	O	O
fetched	O	O
the	O	O
char	O	O
[	O	O
]	O	O
named	O	O
value	O	O
field	O	O
from	O	O
class	O	O
String	B-api_mention	B-api_mention
stringValue	O	O
.	B-api_mention	B-api_mention
setAccessible	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Make	O	O
it	O	O
accessible	O	O
.	O	O
stringValue	O	O
.	B-api_mention	B-api_mention
set	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
changed	O	O
original	O	O
String	B-api_mention	B-api_mention
field	O	O
to	O	O
Luigi	O	O
.	O	O
But	O	O
original	O	O
is	O	O
Mario	O	O
the	O	O
String	B-api_mention	B-api_mention
literal	O	O
and	O	O
literal	O	O
belongs	O	O
to	O	O
the	O	O
String	B-api_mention	B-api_mention
pool	O	O
and	O	O
all	O	O
are	O	O
interned	O	O
.	O	O
Which	O	O
means	O	O
all	O	O
the	O	O
literals	O	O
which	O	O
has	O	O
same	O	O
content	O	O
refers	O	O
to	O	O
the	O	O
same	O	O
memory	O	O
address	O	O
.	O	O
#	O	O
pre	O	O
Basically	O	O
you	O	O
have	O	O
changed	O	O
the	O	O
Mario	O	O
of	O	O
String	B-api_mention	B-api_mention
pool	O	O
which	O	O
got	O	O
reflected	O	O
in	O	O
all	O	O
the	O	O
referencing	O	O
fields	O	O
.	O	O
If	O	O
you	O	O
create	O	O
String	B-api_mention	B-api_mention
Object	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
instead	O	O
of	O	O
literal	O	O
you	O	O
will	O	O
not	O	O
face	O	O
this	O	O
behavior	O	O
because	O	O
than	O	O
you	O	O
will	O	O
have	O	O
two	O	O
different	O	O
Mario	O	O
s	O	O
.	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28596792	O	O
To	O	O
me	O	O
,	O	O
it	O	O
seems	O	O
that	O	O
"	O	O
because	O	O
it	O	O
should	O	O
behave	O	O
the	O	O
same	O	O
as	O	O
zero	O	O
"	O	O
would	O	O
make	O	O
a	O	O
good	O	O
answer	O	O
.	O	O
Arithmetic	O	O
overflow	O	O
and	O	O
underflow	O	O
should	O	O
be	O	O
handlable	O	O
similarly	O	O
.	O	O
If	O	O
you	O	O
underflow	O	O
from	O	O
the	O	O
largest	O	O
near	O	O
-	O	O
infinitesimally	O	O
small	O	O
value	O	O
which	O	O
can	O	O
be	O	O
stored	O	O
in	O	O
a	O	O
float	O	O
,	O	O
you	O	O
get	O	O
zero	O	O
,	O	O
and	O	O
zeros	O	O
compare	O	O
as	O	O
identical	O	O
.	O	O
If	O	O
you	O	O
overflow	O	O
from	O	O
the	O	O
largest	O	O
near	O	O
-	O	O
infinitely	O	O
large	O	O
value	O	O
which	O	O
can	O	O
be	O	O
stored	O	O
in	O	O
a	O	O
float	O	O
,	O	O
you	O	O
get	O	O
INF	O	O
,	O	O
and	O	O
INFs	O	O
compare	O	O
as	O	O
identical	O	O
.	O	O
This	O	O
means	O	O
that	O	O
code	O	O
which	O	O
handles	O	O
numbers	O	O
which	O	O
are	O	O
out	O	O
-	O	O
of	O	O
-	O	O
scope	O	O
in	O	O
both	O	O
directions	O	O
will	O	O
not	O	O
require	O	O
separate	O	O
special	O	O
-	O	O
casing	O	O
for	O	O
one	O	O
or	O	O
the	O	O
other	O	O
.	O	O
Instead	O	O
,	O	O
either	O	O
both	O	O
or	O	O
neither	O	O
will	O	O
need	O	O
to	O	O
be	O	O
treated	O	O
differently	O	O
.	O	O
And	O	O
the	O	O
simplest	O	O
requirement	O	O
is	O	O
covered	O	O
by	O	O
the	O	O
"	O	O
neither	O	O
"	O	O
case	O	O
:	O	O
you	O	O
want	O	O
to	O	O
check	O	O
if	O	O
something	O	O
over	O	O
/	O	O
underflowed	O	O
,	O	O
you	O	O
can	O	O
compare	O	O
it	O	O
to	O	O
zero	O	O
/	O	O
INF	O	O
using	O	O
just	O	O
the	O	O
normal	O	O
arithmetic	O	O
comparison	O	O
operators	O	O
,	O	O
without	O	O
needing	O	O
to	O	O
know	O	O
you	O	O
current	O	O
language	O	O
'	O	O
s	O	O
special	O	O
syntax	O	O
for	O	O
the	O	O
checking	O	O
command	O	O
:	O	O
is	O	O
it	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isInfinite	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
Float	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
checkForPositiveInfinity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
hasOverflowed	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
.	O	O
.	O	O
?	O	O
Question	O	O
-	O	O
23699371	O	O
In	O	O
Java	O	O
8	O	O
how	O	O
can	O	O
I	O	O
filter	O	O
a	O	O
collection	O	O
using	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
by	O	O
checking	O	O
the	O	O
distinctness	O	O
of	O	O
a	O	O
property	O	O
of	O	O
each	O	O
object	O	O
?	O	O
For	O	O
example	O	O
I	O	O
have	O	O
a	O	O
list	O	O
of	O	O
Person	O	O
object	O	O
and	O	O
I	O	O
want	O	O
to	O	O
remove	O	O
people	O	O
with	O	O
the	O	O
same	O	O
name	O	O
,	O	O
persons	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
distinct	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Will	O	O
use	O	O
the	O	O
default	O	O
equality	O	O
check	O	O
for	O	O
a	O	O
Person	O	O
object	O	O
,	O	O
so	O	O
I	O	O
need	O	O
something	O	O
like	O	O
,	O	O
persons	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
distinct	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Unfortunately	O	O
the	O	O
distinct	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
no	O	O
such	O	O
overload	O	O
.	O	O
Without	O	O
modifying	O	O
the	O	O
equality	O	O
check	O	O
inside	O	O
the	O	O
Person	O	O
class	O	O
is	O	O
it	O	O
possible	O	O
to	O	O
do	O	O
this	O	O
succinctly	O	O
?	O	O
Question	O	O
-	O	O
16635398	O	O
Which	O	O
of	O	O
the	O	O
following	O	O
is	O	O
better	O	O
practice	O	O
in	O	O
Java	O	O
8	O	O
?	O	O
Java	O	O
8	O	O
:	O	O
joins	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Java	O	O
7	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
have	O	O
lots	O	O
of	O	O
for	O	O
loops	O	O
that	O	O
could	O	O
be	O	O
"	O	O
simplified	O	O
"	O	O
with	O	O
lambdas	O	O
,	O	O
but	O	O
is	O	O
there	O	O
really	O	O
any	O	O
advantage	O	O
of	O	O
using	O	O
them	O	O
including	O	O
performance	O	O
and	O	O
readability	O	O
?	O	O
EDIT	O	O
I	O	O
'	O	O
ll	O	O
also	O	O
extend	O	O
this	O	O
question	O	O
to	O	O
longer	O	O
methods	O	O
-	O	O
I	O	O
know	O	O
that	O	O
you	O	O
cant	O	O
return	O	O
or	O	O
break	O	O
the	O	O
parent	O	O
function	O	O
from	O	O
a	O	O
lambda	O	O
and	O	O
this	O	O
should	O	O
be	O	O
mentioned	O	O
to	O	O
if	O	O
they	O	O
are	O	O
compared	O	O
,	O	O
but	O	O
is	O	O
there	O	O
anything	O	O
else	O	O
to	O	O
be	O	O
considered	O	O
?	O	O
Question	O	O
-	O	O
25850328	O	O
,	O	O
answer	O	O
-	O	O
25850576	O	O
#	O	O
li	O	O
Is	O	O
the	O	O
definition	O	O
of	O	O
a	O	O
marker	B-api_mention	O
interface	O	O
mentioned	O	O
above	O	O
in	O	O
1st	O	O
point	O	O
wrong	O	O
?	O	O
-	O	O
It	O	O
is	O	O
correct	O	O
in	O	O
the	O	O
parts	O	O
that	O	O
(	O	O
1	O	O
)	O	O
a	O	O
marker	B-api_mention	O
interface	O	O
must	O	O
be	O	O
empty	O	O
,	O	O
and	O	O
(	O	O
2	O	O
)	O	O
implementing	O	O
it	O	O
is	O	O
meant	O	O
to	O	O
imply	O	O
some	O	O
special	O	O
treatment	O	O
of	O	O
the	O	O
implementing	O	O
class	O	O
.	O	O
The	O	O
part	O	O
that	O	O
is	O	O
incorrect	O	O
is	O	O
that	O	O
it	O	O
implies	O	O
that	O	O
JVM	O	O
or	O	O
the	O	O
compiler	O	O
would	O	O
treat	O	O
the	O	O
objects	O	O
of	O	O
that	O	O
class	O	O
differently	O	O
:	O	O
you	O	O
are	O	O
correct	O	O
in	O	O
observing	O	O
that	O	O
it	O	O
is	O	O
the	O	O
code	O	O
of	O	O
Java	O	O
class	O	O
library	O	O
that	O	O
treats	O	O
these	O	O
objects	O	O
as	O	O
cloneable	O	O
,	O	O
serializable	O	O
,	O	O
etc	O	O
.	O	O
It	O	O
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
the	O	O
compiler	O	O
or	O	O
the	O	O
JVM	O	O
.	O	O
#	O	O
li	O	O
instead	O	O
of	O	O
using	O	O
the	O	O
instanceOf	B-api_mention	B-api_mention
operator	O	O
why	O	O
can	O	O
'	O	O
t	O	O
the	O	O
method	O	O
be	O	O
something	O	O
like	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
so	O	O
that	O	O
there	O	O
is	O	O
a	O	O
compile	O	O
-	O	O
time	O	O
type	O	O
checking	O	O
-	O	O
This	O	O
lets	O	O
you	O	O
avoid	O	O
polluting	O	O
your	O	O
code	O	O
with	O	O
the	O	O
name	O	O
of	O	O
the	O	O
marker	O	O
interface	O	O
when	O	O
a	O	O
"	O	O
plain	O	O
Object	O	B-api_mention
"	O	O
is	O	O
needed	O	O
.	O	O
For	O	O
example	O	O
,	O	O
if	O	O
you	O	O
make	O	O
a	O	O
class	O	O
that	O	O
needs	O	O
to	O	O
be	O	O
serializable	O	O
,	O	O
and	O	O
has	O	O
object	O	O
members	O	O
,	O	O
you	O	O
would	O	O
be	O	O
forced	O	O
to	O	O
either	O	O
do	O	O
casting	O	O
or	O	O
make	O	O
your	O	O
objects	O	O
Serializable	B-api_mention	B-api_mention
at	O	O
compile	O	O
time	O	O
.	O	O
This	O	O
is	O	O
inconvenient	O	O
,	O	O
because	O	O
the	O	O
interface	O	O
is	O	O
devoid	O	O
of	O	O
any	O	O
functionality	O	O
.	O	O
#	O	O
li	O	O
How	O	O
Annotations	B-api_mention	B-api_mention
are	O	O
better	O	O
than	O	O
Marker	B-api_mention	B-api_mention
Interfaces	O	O
?	O	O
-	O	O
They	O	O
let	O	O
you	O	O
achieve	O	O
the	O	O
same	O	O
purpose	O	O
of	O	O
conveying	O	O
metadata	O	O
about	O	O
the	O	O
class	O	O
to	O	O
its	O	O
consumers	O	O
without	O	O
creating	O	O
a	O	O
separate	O	O
type	O	O
for	O	O
it	O	O
.	O	O
Annotations	B-api_mention	O
are	O	O
more	O	O
powerful	O	O
,	O	O
too	O	O
,	O	O
letting	O	O
programmers	O	O
pass	O	O
more	O	O
sophisticated	O	O
information	O	O
to	O	O
classes	O	O
that	O	O
"	O	O
consume	O	O
"	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
13134221	O	O
Actually	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
a	O	O
new	O	O
thread	O	O
and	O	O
have	O	O
its	O	O
own	O	O
execution	O	O
scenario	O	O
.	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
calls	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
asynchronously	O	O
,	O	O
which	O	O
changes	O	O
the	O	O
state	O	O
of	O	O
new	O	O
Thread	B-api_mention	B-api_mention
to	O	O
Runnable	B-api_mention	B-api_mention
.	O	O
But	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
create	O	O
any	O	O
new	O	O
thread	O	O
.	O	O
Instead	O	O
it	O	O
execute	O	O
the	O	O
run	O	O
method	O	O
in	O	O
the	O	O
current	O	O
running	O	O
thread	O	O
synchronously	O	O
.	O	O
If	O	O
you	O	O
are	O	O
using	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
then	O	O
you	O	O
are	O	O
not	O	O
using	O	O
the	O	O
features	O	O
of	O	O
multi	O	O
threading	O	O
at	O	O
all	O	O
.	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
33233407	O	O
We	O	O
can	O	O
use	O	O
the	O	O
parseInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
the	O	O
Integer	B-api_mention	B-api_mention
wrapper	O	O
class	O	O
for	O	O
converting	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
to	O	O
an	O	O
integer	O	O
value	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
Integer	B-api_mention	B-api_mention
class	O	O
also	O	O
provides	O	O
the	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
We	O	O
can	O	O
also	O	O
use	O	O
toInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
of	O	O
NumberUtils	B-api_mention	B-api_mention
Utility	O	O
Class	O	O
for	O	O
the	O	O
conversion	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
9481865	O	O
,	O	O
answer	O	O
-	O	O
9482369	O	O
This	O	O
could	O	O
be	O	O
a	O	O
bit	O	O
tricky	O	O
in	O	O
the	O	O
most	O	O
general	O	O
case	O	O
.	O	O
On	O	O
the	O	O
face	O	O
of	O	O
it	O	O
,	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
give	O	O
you	O	O
the	O	O
IP	O	O
address	O	O
of	O	O
this	O	O
host	O	O
.	O	O
The	O	O
problem	O	O
is	O	O
that	O	O
a	O	O
host	O	O
could	O	O
have	O	O
lots	O	O
of	O	O
network	O	O
interfaces	O	O
,	O	O
and	O	O
an	O	O
interface	O	O
could	O	O
be	O	O
bound	O	O
to	O	O
more	O	O
than	O	O
one	O	O
IP	O	O
address	O	O
.	O	O
And	O	O
to	O	O
top	O	O
that	O	O
,	O	O
not	O	O
all	O	O
IP	O	O
addresses	O	O
will	O	O
be	O	O
reachable	O	O
outside	O	O
of	O	O
your	O	O
machine	O	O
or	O	O
your	O	O
LAN	O	O
.	O	O
For	O	O
example	O	O
,	O	O
they	O	O
could	O	O
be	O	O
IP	O	O
addresses	O	O
for	O	O
virtual	O	O
network	O	O
devices	O	O
,	O	O
private	O	O
network	O	O
IP	O	O
addresses	O	O
,	O	O
and	O	O
so	O	O
on	O	O
.	O	O
What	O	O
this	O	O
means	O	O
is	O	O
that	O	O
the	O	O
IP	O	O
address	O	O
returned	O	O
by	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
might	O	O
not	O	O
be	O	O
the	O	O
right	O	O
one	O	O
to	O	O
use	O	O
.	O	O
How	O	O
can	O	O
you	O	O
deal	O	O
with	O	O
this	O	O
?	O	O
#	O	O
li	O	O
One	O	O
approach	O	O
is	O	O
to	O	O
use	O	O
NetworkInterface	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getNetworkInterfaces	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
all	O	O
of	O	O
the	O	O
known	O	O
network	O	O
interfaces	O	O
on	O	O
the	O	O
host	O	O
,	O	O
and	O	O
then	O	O
iterate	O	O
over	O	O
each	O	O
NI	O	O
'	O	O
s	O	O
addresses	O	O
.	O	O
#	O	O
li	O	O
Another	O	O
approach	O	O
is	O	O
to	O	O
(	O	O
somehow	O	O
)	O	O
get	O	O
the	O	O
externally	O	O
advertized	O	O
FQDN	O	O
for	O	O
the	O	O
host	O	O
,	O	O
and	O	O
use	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getByName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
look	O	O
up	O	O
the	O	O
primary	O	O
IP	O	O
address	O	O
.	O	O
(	O	O
But	O	O
how	O	O
do	O	O
you	O	O
get	O	O
it	O	O
,	O	O
and	O	O
how	O	O
do	O	O
you	O	O
deal	O	O
with	O	O
a	O	O
DNS	O	O
-	O	O
based	O	O
load	O	O
balancer	O	O
?	O	O
)	O	O
#	O	O
li	O	O
A	O	O
variation	O	O
of	O	O
the	O	O
previous	O	O
is	O	O
to	O	O
get	O	O
the	O	O
preferred	O	O
FQDN	O	O
from	O	O
a	O	O
config	O	O
file	O	O
or	O	O
a	O	O
command	O	O
line	O	O
parameter	O	O
.	O	O
#	O	O
li	O	O
Another	O	O
variation	O	O
is	O	O
to	O	O
get	O	O
the	O	O
preferred	O	O
IP	O	O
address	O	O
from	O	O
a	O	O
config	O	O
file	O	O
or	O	O
a	O	O
command	O	O
line	O	O
parameter	O	O
.	O	O
In	O	O
summary	O	O
,	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
typically	O	O
work	O	O
,	O	O
but	O	O
you	O	O
may	O	O
need	O	O
to	O	O
provide	O	O
an	O	O
alternative	O	O
method	O	O
for	O	O
the	O	O
cases	O	O
where	O	O
your	O	O
code	O	O
is	O	O
run	O	O
in	O	O
an	O	O
environment	O	O
with	O	O
"	O	O
complicated	O	O
"	O	O
networking	O	O
.	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Any	O	O
address	O	O
in	O	O
the	O	O
range	O	O
127	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
is	O	O
a	O	O
"	O	O
loopback	O	O
"	O	O
address	O	O
.	O	O
It	O	O
is	O	O
only	O	O
visible	O	O
to	O	O
"	O	O
this	O	O
"	O	O
host	O	O
.	O	O
#	O	O
li	O	O
Any	O	O
address	O	O
in	O	O
the	O	O
range	O	O
192	O	O
.	O	O
168	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
is	O	O
a	O	O
private	O	O
(	O	O
aka	O	O
site	O	O
local	O	O
)	O	O
IP	O	O
address	O	O
.	O	O
These	O	O
are	O	O
reserved	O	O
for	O	O
use	O	O
within	O	O
an	O	O
organization	O	O
.	O	O
The	O	O
same	O	O
applies	O	O
to	O	O
10	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
addresses	O	O
,	O	O
and	O	O
172	O	O
.	O	O
16	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
through	O	O
172	O	O
.	O	O
31	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
#	O	O
li	O	O
Addresses	O	O
in	O	O
the	O	O
range	O	O
169	O	O
.	O	O
254	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
are	O	O
link	O	O
local	O	O
IP	O	O
addresses	O	O
.	O	O
These	O	O
are	O	O
reserved	O	O
for	O	O
use	O	O
on	O	O
a	O	O
single	O	O
network	O	O
segment	O	O
.	O	O
#	O	O
li	O	O
Addresses	O	O
in	O	O
the	O	O
range	O	O
224	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
through	O	O
239	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
are	O	O
multicast	O	O
addresses	O	O
.	O	O
#	O	O
li	O	O
The	O	O
address	O	O
255	O	O
.	O	O
255	O	O
.	O	O
255	O	O
.	O	O
255	O	O
is	O	O
the	O	O
broadcast	O	O
address	O	O
.	O	O
#	O	O
li	O	O
Anything	O	O
else	O	O
should	O	O
be	O	O
a	O	O
valid	O	O
public	O	O
point	O	O
-	O	O
to	O	O
-	O	O
point	O	O
IPv4	O	O
address	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
the	O	O
InetAddress	B-api_mention	B-api_mention
API	O	O
provides	O	O
methods	O	O
for	O	O
testing	O	O
for	O	O
loopback	O	O
,	O	O
link	O	O
local	O	O
,	O	O
site	O	O
local	O	O
,	O	O
multicast	O	O
and	O	O
broadcast	O	O
addresses	O	O
.	O	O
You	O	O
can	O	O
use	O	O
these	O	O
to	O	O
sort	O	O
out	O	O
which	O	O
of	O	O
the	O	O
IP	O	O
addresses	O	O
you	O	O
get	O	O
back	O	O
is	O	O
most	O	O
appropriate	O	O
.	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
20945268	O	O
In	O	O
Java	O	O
,	O	O
if	O	O
two	O	O
string	O	O
primitive	O	O
variables	O	O
are	O	O
initialized	O	O
to	O	O
the	O	O
same	O	O
literal	O	O
,	O	O
it	O	O
assigns	O	O
the	O	O
same	O	O
reference	O	O
to	O	O
both	O	O
variables	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
That	O	O
is	O	O
the	O	O
reason	O	O
the	O	O
comparison	O	O
returns	O	O
true	O	O
.	O	O
The	O	O
third	O	O
string	O	O
is	O	O
created	O	O
using	O	O
substring	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
makes	O	O
a	O	O
new	O	O
string	O	O
instead	O	O
of	O	O
pointing	O	O
to	O	O
the	O	O
same	O	O
.	O	O
#	O	O
blockquote	O	O
When	O	O
you	O	O
access	O	O
a	O	O
string	O	O
using	O	O
reflection	O	O
,	O	O
you	O	O
get	O	O
the	O	O
actual	O	O
pointer	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
change	O	O
to	O	O
this	O	O
will	O	O
change	O	O
the	O	O
string	O	O
holding	O	O
a	O	O
pointer	O	O
to	O	O
it	O	O
,	O	O
but	O	O
as	O	O
s3	O	O
is	O	O
created	O	O
with	O	O
a	O	O
new	O	O
string	O	O
due	O	O
to	O	O
substring	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
would	O	O
not	O	O
change	O	O
.	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
14316487	O	O
,	O	O
answer	O	O
-	O	O
14316543	O	O
A	O	O
very	O	O
simple	O	O
implementation	O	O
with	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
23932061	O	O
,	O	O
answer	O	O
-	O	O
23932216	O	O
You	O	O
can	O	O
easily	O	O
create	O	O
a	O	O
Stream	B-api_mention	B-api_mention
out	O	O
of	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
or	O	O
Iterator	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
12468764	O	O
,	O	O
answer	O	O
-	O	O
13368831	O	O
Actual	O	O
Answer	O	O
:	O	O
The	O	O
default	O	O
deserializer	O	O
for	O	O
enums	O	O
uses	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
deserialize	O	O
,	O	O
so	O	O
it	O	O
'	O	O
s	O	O
not	O	O
using	O	O
the	O	O
@	O	O
JsonValue	O	O
.	O	O
So	O	O
as	O	O
@	O	O
OldCurmudgeon	O	O
pointed	O	O
out	O	O
,	O	O
you	O	O
'	O	O
d	O	O
need	O	O
to	O	O
pass	O	O
in	O	O
{	O	O
StringLiteral	O	O
:	O	O
StringLiteral	O	O
}	O	O
to	O	O
match	O	O
the	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
value	O	O
.	O	O
An	O	O
other	O	O
option	O	O
(	O	O
assuming	O	O
you	O	O
want	O	O
the	O	O
write	O	O
and	O	O
read	O	O
json	O	O
values	O	O
to	O	O
be	O	O
the	O	O
same	O	O
)	O	O
.	O	O
.	O	O
.	O	O
More	O	O
Info	O	O
:	O	O
There	O	O
is	O	O
(	O	O
yet	O	O
)	O	O
another	O	O
way	O	O
to	O	O
manage	O	O
the	O	O
serialization	O	O
and	O	O
deserialization	O	O
process	O	O
with	O	O
Jackson	O	O
.	O	O
You	O	O
can	O	O
specify	O	O
these	O	O
annotations	O	O
to	O	O
use	O	O
your	O	O
own	O	O
custom	O	O
serializer	O	O
and	O	O
deserializer	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
you	O	O
have	O	O
to	O	O
write	O	O
MySerializer	O	B-api_mention
and	O	O
MyDeserializer	O	B-api_mention
which	O	O
look	O	O
like	O	O
this	O	O
:	O	O
MySerializer	O	O
#	O	O
pre	O	O
MyDeserializer	O	O
#	O	O
pre	O	O
Last	O	O
little	O	O
bit	O	O
,	O	O
particularly	O	O
for	O	O
doing	O	O
this	O	O
to	O	O
an	O	O
enum	O	O
JsonEnum	O	O
that	O	O
serializes	O	O
with	O	O
the	O	O
method	O	O
getYourValue	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
your	O	O
serializer	O	O
and	O	O
deserializer	O	O
might	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8189466	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
aware	O	O
of	O	O
the	O	O
Iterator	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
In	O	O
the	O	O
following	O	O
code	O	O
sample	O	O
,	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
why	O	O
the	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
in	O	O
main	O	O
method	O	O
throws	O	O
ConcurrentModificationException	B-api_mention	B-api_mention
but	O	O
not	O	O
in	O	O
the	O	O
remove	B-api_mention	O
method	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32182250	O	O
Integer	B-api_mention	B-api_mention
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	O
a	I-api_mention	O
)	I-api_mention	O
can	O	O
return	O	O
false	O	O
But	O	O
you	O	O
have	O	O
to	O	O
be	O	O
really	O	O
evil	O	O
and	O	O
use	O	O
reflections	O	O
and	O	O
Multithreading	O	O
:	O	O
If	O	O
you	O	O
run	O	O
this	O	O
code	O	O
,	O	O
there	O	O
is	O	O
a	O	O
chance	O	O
that	O	O
a	O	O
racing	O	O
condition	O	O
can	O	O
change	O	O
the	O	O
internal	O	O
Value	O	O
of	O	O
myInt	O	O
while	O	O
the	O	O
comparision	O	O
takes	O	O
place	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
simulate	O	O
this	O	O
condition	O	O
,	O	O
just	O	O
set	O	O
a	O	O
breakpoint	O	O
inside	O	O
of	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
run	O	O
the	O	O
code	O	O
in	O	O
debug	O	O
and	O	O
hit	O	O
continue	O	O
.	O	O
This	O	O
will	O	O
create	O	O
a	O	O
delay	O	O
which	O	O
creates	O	O
the	O	O
race	O	O
condition	O	O
artificially	O	O
and	O	O
the	O	O
console	O	O
will	O	O
return	O	O
false	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725470	O	O
List	B-api_mention	B-api_mention
iterators	O	O
guarantee	O	O
first	O	O
and	O	O
foremost	O	O
that	O	O
you	O	O
get	O	O
the	O	O
list	O	O
'	O	O
s	O	O
elements	O	O
in	O	O
the	O	O
internal	O	O
order	O	O
of	O	O
the	O	O
list	O	O
(	O	O
aka	O	O
.	O	O
insertion	O	O
order	O	O
)	O	O
.	O	O
More	O	O
specifically	O	O
it	O	O
is	O	O
in	O	O
the	O	O
order	O	O
you	O	O
'	O	O
ve	O	O
inserted	O	O
the	O	O
elements	O	O
or	O	O
on	O	O
how	O	O
you	O	O
'	O	O
ve	O	O
manipulated	O	O
the	O	O
list	O	O
.	O	O
Sorting	O	O
can	O	O
be	O	O
seen	O	O
as	O	O
a	O	O
manipulation	O	O
of	O	O
the	O	O
data	O	O
structure	O	O
,	O	O
and	O	O
there	O	O
are	O	O
several	O	O
ways	O	O
to	O	O
sort	O	O
the	O	O
list	O	O
.	O	O
I	O	O
'	O	O
ll	O	O
order	O	O
the	O	O
ways	O	O
in	O	O
the	O	O
order	O	O
of	O	O
usefulness	O	O
as	O	O
I	O	O
personally	O	O
see	O	O
it	O	O
:	O	O
1	O	O
.	O	O
Consider	O	O
using	O	O
Set	B-api_mention	B-api_mention
or	O	O
Bag	B-api_mention	O
collections	O	O
instead	O	O
NOTE	O	O
:	O	O
I	O	O
put	O	O
this	O	O
option	O	O
at	O	O
the	O	O
top	O	O
because	O	O
this	O	O
is	O	O
what	O	O
you	O	O
normally	O	O
want	O	O
to	O	O
do	O	O
anyway	O	O
.	O	O
A	O	O
sorted	O	O
set	O	O
automatically	O	O
sorts	O	O
the	O	O
collection	O	O
at	O	O
insertion	O	O
,	O	O
meaning	O	O
that	O	O
it	O	O
does	O	O
the	O	O
sorting	O	O
while	O	O
you	O	O
add	O	O
elements	O	O
into	O	O
the	O	O
collection	O	O
.	O	O
It	O	O
also	O	O
means	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
manually	O	O
sort	O	O
it	O	O
.	O	O
Furthermore	O	O
if	O	O
you	O	O
are	O	O
sure	O	O
that	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
worry	O	O
about	O	O
(	O	O
or	O	O
have	O	O
)	O	O
duplicate	O	O
elements	O	O
then	O	O
you	O	O
can	O	O
use	O	O
the	O	O
TreeSet	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
instead	O	O
.	O	O
It	O	O
implements	O	O
SortedSet	B-api_mention	B-api_mention
and	O	O
NavigableSet	B-api_mention	B-api_mention
interfaces	O	O
and	O	O
works	O	O
as	O	O
you	O	O
'	O	O
d	O	O
probably	O	O
expect	O	O
from	O	O
a	O	O
list	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
want	O	O
the	O	O
natural	O	O
ordering	O	O
you	O	O
can	O	O
use	O	O
the	O	O
constructor	O	O
parameter	O	O
that	O	O
takes	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Alternatively	O	O
you	O	O
can	O	O
use	O	O
Multisets	B-api_mention	O
(	O	O
also	O	O
known	O	O
as	O	O
Bags	B-api_mention	O
)	O	O
,	O	O
that	O	O
is	O	O
a	O	O
Set	B-api_mention	B-api_mention
that	O	O
allows	O	O
duplicate	O	O
elements	O	O
,	O	O
instead	O	O
and	O	O
there	O	O
are	O	O
third	O	O
party	O	O
implementations	O	O
of	O	O
them	O	O
.	O	O
Most	O	O
notably	O	O
from	O	O
the	O	O
Guava	O	O
libraries	O	O
there	O	O
is	O	O
a	O	O
TreeMultiset	B-api_mention	B-api_mention
,	O	O
that	O	O
works	O	O
a	O	O
lot	O	O
like	O	O
the	O	O
TreeSet	B-api_mention	B-api_mention
.	O	O
2	O	O
.	O	O
Sort	O	O
your	O	O
list	O	O
with	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
As	O	O
mentioned	O	O
above	O	O
,	O	O
sorting	O	O
of	O	O
List	B-api_mention	B-api_mention
s	O	O
is	O	O
an	O	O
manipulation	O	O
of	O	O
the	O	O
data	O	O
structure	O	O
.	O	O
So	O	O
for	O	O
situations	O	O
where	O	O
you	O	O
need	O	O
"	O	O
one	O	O
source	O	O
of	O	O
truth	O	O
"	O	O
that	O	O
will	O	O
be	O	O
sorted	O	O
in	O	O
a	O	O
variety	O	O
of	O	O
ways	O	O
then	O	O
sorting	O	O
it	O	O
manually	O	O
is	O	O
the	O	O
way	O	O
to	O	O
go	O	O
.	O	O
You	O	O
can	O	O
sort	O	O
your	O	O
list	O	O
with	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Here	O	O
is	O	O
a	O	O
code	O	O
sample	O	O
on	O	O
how	O	O
:	O	O
#	O	O
pre	O	O
Using	O	O
comparators	O	O
One	O	O
clear	O	O
benefit	O	O
is	O	O
that	O	O
you	O	O
may	O	O
use	O	O
Comparator	B-api_mention	B-api_mention
in	O	O
the	O	O
sort	B-api_mention	O
method	O	O
.	O	O
Java	O	O
also	O	O
provides	O	O
some	O	O
implementations	O	O
for	O	O
the	O	O
Comparator	B-api_mention	B-api_mention
such	O	O
as	O	O
the	O	O
Collator	B-api_mention	B-api_mention
which	O	O
is	O	O
useful	O	O
for	O	O
locale	O	O
sensitive	O	O
sorting	O	O
strings	O	O
.	O	O
Here	O	O
is	O	O
one	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Sorting	O	O
in	O	O
concurrent	O	O
environments	O	O
Do	O	O
note	O	O
though	O	O
that	O	O
using	O	O
the	O	O
sort	B-api_mention	O
method	O	O
is	O	O
not	O	O
friendly	O	O
in	O	O
concurrent	O	O
environments	O	O
,	O	O
since	O	O
the	O	O
collection	O	O
instance	O	O
will	O	O
be	O	O
manipulated	O	O
,	O	O
and	O	O
you	O	O
should	O	O
consider	O	O
using	O	O
immutable	O	O
collections	O	O
instead	O	O
.	O	O
This	O	O
is	O	O
something	O	O
Guava	O	O
provides	O	O
in	O	O
the	O	O
Ordering	B-api_mention	O
class	O	O
and	O	O
is	O	O
a	O	O
simple	O	O
one	O	O
-	O	O
liner	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
sorted	O	O
=	O	O
Ordering	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
natural	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sortedCopy	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
3	O	O
.	O	O
Wrap	O	O
your	O	O
list	O	O
with	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
PriorityQueue	I-api_mention	I-api_mention
Though	O	O
there	O	O
is	O	O
no	O	O
sorted	O	O
list	O	O
in	O	O
Java	O	O
there	O	O
is	O	O
however	O	O
a	O	O
sorted	O	O
queue	O	O
which	O	O
would	O	O
probably	O	O
work	O	O
just	O	O
as	O	O
well	O	O
for	O	O
you	O	O
.	O	O
It	O	O
is	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
PriorityQueue	I-api_mention	I-api_mention
class	O	O
.	O	O
Nico	O	O
Haase	O	O
linked	O	O
in	O	O
the	O	O
comments	O	O
to	O	O
a	O	O
related	O	O
question	O	O
that	O	O
also	O	O
answers	O	O
this	O	O
.	O	O
In	O	O
a	O	O
sorted	O	O
collection	O	O
you	O	O
most	O	O
likely	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
manipulate	O	O
the	O	O
internal	O	O
data	O	O
structure	O	O
which	O	O
is	O	O
why	O	O
PriorityQueue	B-api_mention	B-api_mention
doesn	O	O
'	O	O
t	O	O
implement	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
(	O	O
because	O	O
that	O	O
would	O	O
give	O	O
you	O	O
direct	O	O
access	O	O
to	O	O
it	O	O
'	O	O
s	O	O
elements	O	O
)	O	O
.	O	O
Caveat	O	O
on	O	O
the	O	O
PriorityQueue	B-api_mention	B-api_mention
iterator	O	O
The	O	O
PriorityQueue	B-api_mention	B-api_mention
class	O	O
implements	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
and	O	O
Collection	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interfaces	O	O
so	O	O
it	O	O
can	O	O
be	O	O
iterated	O	O
as	O	O
usual	O	O
.	O	O
However	O	O
the	O	O
iterator	O	O
is	O	O
not	O	O
guaranteed	O	O
to	O	O
return	O	O
elements	O	O
in	O	O
the	O	O
sorted	O	O
order	O	O
.	O	O
Instead	O	O
(	O	O
as	O	O
Alderath	O	O
points	O	O
out	O	O
in	O	O
the	O	O
comments	O	O
)	O	O
you	O	O
need	O	O
to	O	O
poll	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
the	O	O
queue	O	O
until	O	O
empty	O	O
.	O	O
Note	O	O
that	O	O
you	O	O
can	O	O
convert	O	O
a	O	O
list	O	O
to	O	O
a	O	O
priority	O	O
queue	O	O
via	O	O
the	O	O
constructor	O	O
that	O	O
takes	O	O
any	O	O
collection	O	O
:	O	O
#	O	O
pre	O	O
4	O	O
.	O	O
Write	O	O
your	O	O
own	O	O
SortedList	B-api_mention	B-api_mention
class	O	O
NOTE	O	O
:	O	O
You	O	O
shouldn	O	O
'	O	O
t	O	O
have	O	O
to	O	O
do	O	O
this	O	O
.	O	O
You	O	O
can	O	O
write	O	O
your	O	O
own	O	O
List	B-api_mention	B-api_mention
class	O	O
that	O	O
sorts	O	O
each	O	O
time	O	O
you	O	O
add	O	O
a	O	O
new	O	O
element	O	O
.	O	O
This	O	O
can	O	O
get	O	O
rather	O	O
computation	O	O
heavy	O	O
depending	O	O
on	O	O
your	O	O
implementation	O	O
and	O	O
is	O	O
pointless	O	O
,	O	O
unless	O	O
you	O	O
want	O	O
to	O	O
do	O	O
it	O	O
as	O	O
an	O	O
exercise	O	O
,	O	O
because	O	O
of	O	O
two	O	O
main	O	O
reasons	O	O
:	O	O
#	O	O
li	O	O
It	O	O
breaks	O	O
the	O	O
contract	O	O
that	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
has	O	O
,	O	O
because	O	O
the	O	O
add	B-api_mention	O
methods	O	O
should	O	O
ensure	O	O
that	O	O
the	O	O
element	O	O
will	O	O
reside	O	O
in	O	O
the	O	O
index	O	O
that	O	O
the	O	O
user	O	O
specifies	O	O
.	O	O
#	O	O
li	O	O
Why	O	O
reinvent	O	O
the	O	O
wheel	O	O
?	O	O
You	O	O
should	O	O
be	O	O
using	O	O
the	O	O
TreeSet	B-api_mention	B-api_mention
or	O	O
Multisets	B-api_mention	O
instead	O	O
as	O	O
pointed	O	O
out	O	O
in	O	O
the	O	O
first	O	O
point	O	O
above	O	O
.	O	O
However	O	O
if	O	O
you	O	O
want	O	O
to	O	O
do	O	O
it	O	O
as	O	O
an	O	O
exercise	O	O
here	O	O
is	O	O
a	O	O
code	O	O
sample	O	O
to	O	O
get	O	O
you	O	O
started	O	O
,	O	O
it	O	O
uses	O	O
the	O	O
AbstractList	B-api_mention	B-api_mention
abstract	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
if	O	O
you	O	O
haven	O	O
'	O	O
t	O	O
overridden	O	O
the	O	O
methods	O	O
you	O	O
need	O	O
,	O	O
then	O	O
the	O	O
default	O	O
implementations	O	O
from	O	O
AbstractList	B-api_mention	B-api_mention
will	O	O
throw	O	O
UnsupportedOperationException	B-api_mention	B-api_mention
s	O	O
.	O	O
Question	O	O
-	O	O
29183904	O	O
I	O	O
used	O	O
to	O	O
define	O	O
a	O	O
set	O	O
of	O	O
related	O	O
constants	O	O
like	O	O
Bundle	B-api_mention	O
keys	O	O
together	O	O
in	O	O
an	O	O
interface	O	O
like	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
provides	O	O
me	O	O
a	O	O
nicer	O	O
way	O	O
to	O	O
group	O	O
related	O	O
constants	O	O
together	O	O
and	O	O
used	O	O
them	O	O
by	O	O
making	O	O
a	O	O
static	O	O
import	O	O
(	O	O
not	O	O
implements	O	O
)	O	O
.	O	O
I	O	O
know	O	O
Android	O	O
framework	O	O
also	O	O
uses	O	O
the	O	O
constants	O	O
in	O	O
same	O	O
way	O	O
like	O	O
Toast	B-api_mention	O
.	I-api_mention	O
LENTH	I-api_mention	O
_	I-api_mention	O
LONG	I-api_mention	O
,	O	O
View	B-api_mention	O
.	I-api_mention	O
GONE	I-api_mention	O
.	O	O
However	O	O
,	O	O
I	O	O
often	O	O
feel	O	O
that	O	O
the	O	O
Java	O	O
Enums	O	O
provide	O	O
much	O	O
better	O	O
and	O	O
powerful	O	O
way	O	O
to	O	O
represent	O	O
the	O	O
constant	O	O
.	O	O
But	O	O
is	O	O
there	O	O
a	O	O
performence	O	O
issue	O	O
in	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
?	O	O
With	O	O
a	O	O
bit	O	O
of	O	O
research	O	O
I	O	O
ended	O	O
up	O	O
in	O	O
confusion	O	O
.	O	O
From	O	O
this	O	O
question	O	O
"	O	O
Avoid	O	O
Enums	O	O
Where	O	O
You	O	O
Only	O	O
Need	O	O
Ints	O	O
”	O	O
removed	O	O
from	O	O
Android	O	O
'	O	O
s	O	O
performance	O	O
tips	O	O
?	O	O
it	O	O
'	O	O
s	O	O
clear	O	O
that	O	O
Google	O	O
has	O	O
removed	O	O
"	O	O
Avoid	O	O
enums	O	O
"	O	O
from	O	O
its	O	O
performance	O	O
tips	O	O
,	O	O
but	O	O
from	O	O
it	O	O
'	O	O
s	O	O
official	O	O
training	O	O
docs	O	O
Be	O	O
aware	O	O
of	O	O
memory	O	O
overhead	O	O
section	O	O
it	O	O
clearly	O	O
says	O	O
:	O	O
"	O	O
Enums	O	O
often	O	O
require	O	O
more	O	O
than	O	O
twice	O	O
as	O	O
much	O	O
memory	O	O
as	O	O
static	O	O
constants	O	O
.	O	O
You	O	O
should	O	O
strictly	O	O
avoid	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
.	O	O
"	O	O
Is	O	O
this	O	O
still	O	O
holds	O	O
good	O	O
?	O	O
(	O	O
say	O	O
in	O	O
Java	O	O
versions	O	O
after	O	O
1	O	O
.	O	O
6	O	O
)	O	O
One	O	O
more	O	O
issue	O	O
that	O	O
I	O	O
observed	O	O
is	O	O
to	O	O
send	O	O
enums	O	O
across	O	O
intents	O	O
using	O	O
Bundle	B-api_mention	O
I	O	O
should	O	O
send	O	O
them	O	O
by	O	O
serializing	O	O
(	O	O
i	O	O
.	O	O
e	O	O
putSerializable	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
that	O	O
I	O	O
think	O	O
an	O	O
expensive	O	O
operation	O	O
compared	O	O
to	O	O
primitive	O	O
putString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
eventhough	O	O
enums	O	O
provides	O	O
it	O	O
for	O	O
free	O	O
)	O	O
.	O	O
Can	O	O
someone	O	O
please	O	O
clarify	O	O
which	O	O
one	O	O
is	O	O
the	O	O
best	O	O
way	O	O
to	O	O
represent	O	O
the	O	O
same	O	O
in	O	O
Android	O	O
?	O	O
Should	O	O
I	O	O
strictly	O	O
avoid	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
?	O	O
Question	O	O
-	O	O
5439529	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
determine	O	O
if	O	O
a	O	O
particular	O	O
item	O	O
in	O	O
an	O	O
Array	B-api_mention	B-api_mention
of	O	O
strings	O	O
is	O	O
an	O	O
integer	O	O
or	O	O
not	O	O
.	O	O
I	O	O
am	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
'	O	O
ing	O	O
an	O	O
infix	O	O
expression	O	O
in	O	O
String	B-api_mention	B-api_mention
form	O	O
,	O	O
and	O	O
then	O	O
trying	O	O
to	O	O
split	O	O
the	O	O
resultant	O	O
array	O	O
into	O	O
two	O	O
arrays	O	O
;	O	O
one	O	O
for	O	O
integers	O	O
,	O	O
one	O	O
for	O	O
operators	O	O
,	O	O
whilst	O	O
discarding	O	O
parentheses	O	O
,	O	O
and	O	O
other	O	O
miscellaneous	O	O
items	O	O
.	O	O
What	O	O
would	O	O
be	O	O
the	O	O
best	O	O
way	O	O
to	O	O
accomplish	O	O
this	O	O
?	O	O
I	O	O
thought	O	O
I	O	O
might	O	O
be	O	O
able	O	O
to	O	O
find	O	O
a	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isInteger	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
or	O	O
something	O	O
,	O	O
but	O	O
no	O	O
such	O	O
luck	O	O
.	O	O
Question	O	O
-	O	O
13659217	O	O
I	O	O
declare	O	O
an	O	O
enum	O	O
as	O	O
:	O	O
enum	O	O
Sex	O	O
{	O	O
MALE	O	O
,	O	O
FEMALE	O	O
}	O	O
;	O	O
And	O	O
then	O	O
,	O	O
iterate	O	O
enum	O	O
as	O	O
shown	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
checked	O	O
the	O	O
Java	O	O
API	O	O
but	O	O
can	O	O
'	O	O
t	O	O
find	O	O
the	O	O
values	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
?	O	O
I	O	O
'	O	O
m	O	O
curious	O	O
as	O	O
to	O	O
where	O	O
this	O	O
method	O	O
comes	O	O
from	O	O
?	O	O
API	O	O
link	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
29691513	O	O
,	O	O
answer	O	O
-	O	O
29727412	O	O
The	O	O
JLS	O	O
describes	O	O
a	O	O
few	O	O
special	O	O
behaviors	O	O
of	O	O
what	O	O
it	O	O
calls	O	O
constant	O	O
variables	O	O
,	O	O
which	O	O
are	O	O
final	O	O
variables	O	O
(	O	O
whether	O	O
static	O	O
or	O	O
not	O	O
)	O	O
which	O	O
are	O	O
initialized	O	O
with	O	O
constant	O	O
expressions	O	O
of	O	O
String	B-api_mention	B-api_mention
or	O	O
primitive	O	O
type	O	O
.	O	O
Constant	O	O
variables	O	O
have	O	O
a	O	O
major	O	O
difference	O	O
with	O	O
respect	O	O
to	O	O
binary	O	O
compatibility	O	O
:	O	O
the	O	O
values	O	O
of	O	O
constant	O	O
variables	O	O
become	O	O
part	O	O
of	O	O
the	O	O
class	O	O
'	O	O
s	O	O
API	O	O
,	O	O
as	O	O
far	O	O
as	O	O
the	O	O
compiler	O	O
is	O	O
concerned	O	O
.	O	O
An	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Here	O	O
,	O	O
XFOO	O	O
is	O	O
a	O	O
"	O	O
constant	O	O
variable	O	O
"	O	O
and	O	O
YFOO	O	O
is	O	O
not	O	O
,	O	O
but	O	O
they	O	O
are	O	O
otherwise	O	O
equivalent	O	O
.	O	O
Class	O	O
Z	O	O
prints	O	O
out	O	O
each	O	O
of	O	O
them	O	O
.	O	O
Compile	O	O
those	O	O
classes	O	O
,	O	O
then	O	O
disassemble	O	O
them	O	O
with	O	O
javap	O	O
-	O	O
v	O	O
X	O	O
Y	O	O
Z	O	O
,	O	O
and	O	O
here	O	O
is	O	O
the	O	O
output	O	O
:	O	O
Class	O	O
X	O	O
:	O	O
#	O	O
pre	O	O
Class	O	O
Y	O	O
:	O	O
#	O	O
pre	O	O
Class	O	O
Z	O	O
:	O	O
#	O	O
pre	O	O
Things	O	O
to	O	O
notice	O	O
in	O	O
the	O	O
disassembly	O	O
,	O	O
which	O	O
tell	O	O
you	O	O
the	O	O
differences	O	O
between	O	O
X	O	O
and	O	O
Y	O	O
run	O	O
deeper	O	O
than	O	O
syntactic	O	O
sugar	O	O
:	O	O
#	O	O
li	O	O
XFOO	O	O
has	O	O
a	O	O
ConstantValue	O	B-api_mention
attribute	O	O
,	O	O
signifying	O	O
that	O	O
its	O	O
value	O	O
is	O	O
a	O	O
compile	O	O
-	O	O
time	O	O
constant	O	O
.	O	O
Whereas	O	O
YFOO	O	O
does	O	O
not	O	O
,	O	O
and	O	O
uses	O	O
a	O	O
static	O	O
block	O	O
with	O	O
a	O	O
putstatic	O	O
instruction	O	O
to	O	O
initialize	O	O
the	O	O
value	O	O
at	O	O
runtime	O	O
.	O	O
#	O	O
li	O	O
The	O	O
String	B-api_mention	B-api_mention
constant	O	O
StringLiteral	O	O
has	O	O
become	O	O
part	O	O
of	O	O
class	O	O
Z	O	O
'	O	O
s	O	O
constant	O	O
pool	O	O
,	O	O
but	O	O
StringLiteral	O	O
has	O	O
not	O	O
.	O	O
#	O	O
li	O	O
Z	O	O
.	O	O
main	O	O
uses	O	O
the	O	O
ldc	O	O
(	O	O
load	O	O
constant	O	O
)	O	O
instruction	O	O
to	O	O
load	O	O
StringLiteral	O	O
onto	O	O
the	O	O
stack	O	O
directly	O	O
from	O	O
its	O	O
own	O	O
constant	O	O
pool	O	O
,	O	O
but	O	O
it	O	O
uses	O	O
a	O	O
getstatic	O	O
instruction	O	O
to	O	O
load	O	O
the	O	O
value	O	O
of	O	O
Y	O	O
.	O	O
YFOO	O	O
.	O	O
Other	O	O
differences	O	O
you	O	O
will	O	O
find	O	O
:	O	O
#	O	O
li	O	O
If	O	O
you	O	O
change	O	O
the	O	O
value	O	O
of	O	O
XFOO	O	O
and	O	O
recompile	O	O
X	O	O
.	O	O
java	O	O
but	O	O
not	O	O
Z	O	O
.	O	O
java	O	O
,	O	O
you	O	O
have	O	O
a	O	O
problem	O	O
:	O	O
class	O	O
Z	O	O
is	O	O
still	O	O
using	O	O
the	O	O
old	O	O
value	O	O
.	O	O
If	O	O
you	O	O
change	O	O
the	O	O
value	O	O
of	O	O
YFOO	O	O
and	O	O
recompile	O	O
Y	O	O
.	O	O
java	O	O
,	O	O
class	O	O
Z	O	O
uses	O	O
the	O	O
new	O	O
value	O	O
whether	O	O
you	O	O
recompile	O	O
Z	O	O
.	O	O
java	O	O
or	O	O
not	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
delete	O	O
the	O	O
X	O	O
.	O	O
class	O	O
file	O	O
entirely	O	O
,	O	O
class	O	O
Z	O	O
still	O	O
runs	O	O
correctly	O	O
.	O	O
Z	O	O
has	O	O
no	O	O
runtime	O	O
dependency	O	O
on	O	O
X	O	O
.	O	O
Whereas	O	O
if	O	O
you	O	O
delete	O	O
the	O	O
Y	O	O
.	O	O
class	O	O
file	O	O
,	O	O
class	O	O
Z	O	O
fails	O	O
to	O	O
initialize	O	O
with	O	O
a	O	O
ClassNotFoundException	B-api_mention	B-api_mention
:	O	O
Y	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
generate	O	O
documentation	O	O
for	O	O
the	O	O
classes	O	O
with	O	O
javadoc	O	O
,	O	O
the	O	O
"	O	O
Constant	O	O
Field	O	O
Values	O	O
"	O	O
page	O	O
will	O	O
document	O	O
the	O	O
value	O	O
of	O	O
XFOO	O	O
,	O	O
but	O	O
not	O	O
the	O	O
value	O	O
of	O	O
YFOO	O	O
.	O	O
The	O	O
JLS	O	O
describes	O	O
the	O	O
above	O	O
effects	O	O
constant	O	O
variables	O	O
have	O	O
on	O	O
compiled	O	O
class	O	O
files	O	O
in	O	O
§	O	O
13	O	O
.	O	O
1	O	O
.	O	O
3	O	O
:	O	O
#	O	O
blockquote	O	O
And	O	O
in	O	O
§	O	O
13	O	O
.	O	O
4	O	O
.	O	O
9	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
upshot	O	O
is	O	O
that	O	O
if	O	O
your	O	O
public	O	O
library	O	O
exposes	O	O
any	O	O
constant	O	O
variables	O	O
,	O	O
you	O	O
must	O	O
never	O	O
change	O	O
their	O	O
values	O	O
if	O	O
your	O	O
new	O	O
library	O	O
version	O	O
is	O	O
otherwise	O	O
supposed	O	O
to	O	O
be	O	O
compatible	O	O
with	O	O
code	O	O
compiled	O	O
against	O	O
old	O	O
versions	O	O
of	O	O
the	O	O
library	O	O
.	O	O
It	O	O
won	O	O
'	O	O
t	O	O
necessarily	O	O
cause	O	O
an	O	O
error	O	O
,	O	O
but	O	O
the	O	O
existing	O	O
code	O	O
will	O	O
probably	O	O
malfunction	O	O
since	O	O
it	O	O
will	O	O
have	O	O
outdated	O	O
ideas	O	O
about	O	O
the	O	O
values	O	O
of	O	O
constants	O	O
.	O	O
(	O	O
If	O	O
your	O	O
new	O	O
library	O	O
version	O	O
needs	O	O
for	O	O
classes	O	O
which	O	O
use	O	O
it	O	O
to	O	O
be	O	O
recompiled	O	O
anyway	O	O
,	O	O
then	O	O
changing	O	O
constants	O	O
doesn	O	O
'	O	O
t	O	O
cause	O	O
this	O	O
problem	O	O
.	O	O
)	O	O
Thus	O	O
,	O	O
initializing	O	O
a	O	O
constant	O	O
with	O	O
a	O	O
block	O	O
gives	O	O
you	O	O
more	O	O
freedom	O	O
to	O	O
change	O	O
its	O	O
value	O	O
,	O	O
because	O	O
it	O	O
prevents	O	O
the	O	O
compiler	O	O
embedding	O	O
the	O	O
value	O	O
into	O	O
other	O	O
classes	O	O
.	O	O
Question	O	O
-	O	O
28459498	O	O
,	O	O
answer	O	O
-	O	O
28460301	O	O
Stream	B-api_mention	B-api_mention
s	O	O
are	O	O
built	O	O
around	O	O
Spliterator	O	B-api_mention
s	O	O
which	O	O
are	O	O
stateful	O	O
,	O	O
mutable	O	O
objects	O	O
.	O	O
They	O	O
don	O	O
’	O	O
t	O	O
have	O	O
a	O	O
“	O	O
reset	O	O
”	O	O
action	O	O
and	O	O
in	O	O
fact	O	O
,	O	O
requiring	O	O
to	O	O
support	O	O
such	O	O
rewind	O	O
action	O	O
would	O	O
“	O	O
take	O	O
away	O	O
much	O	O
power	O	O
”	O	O
.	O	O
How	O	O
would	O	O
Random	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ints	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
be	O	O
supposed	O	O
to	O	O
handle	O	O
such	O	O
a	O	O
request	O	O
?	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
for	O	O
Stream	B-api_mention	B-api_mention
s	O	O
which	O	O
have	O	O
a	O	O
retraceable	O	O
origin	O	O
,	O	O
it	O	O
is	O	O
easy	O	O
to	O	O
construct	O	O
an	O	O
equivalent	O	O
Stream	B-api_mention	B-api_mention
to	O	O
be	O	O
used	O	O
again	O	O
.	O	O
Just	O	O
put	O	O
the	O	O
steps	O	O
made	O	O
to	O	O
construct	O	O
the	O	O
Stream	B-api_mention	B-api_mention
into	O	O
a	O	O
reusable	O	O
method	O	O
.	O	O
Keep	O	O
in	O	O
mind	O	O
that	O	O
repeating	O	O
these	O	O
steps	O	O
is	O	O
not	O	O
an	O	O
expensive	O	O
operation	O	O
as	O	O
all	O	O
these	O	O
steps	O	O
are	O	O
lazy	O	O
operations	O	O
;	O	O
the	O	O
actual	O	O
work	O	O
starts	O	O
with	O	O
the	O	O
terminal	O	O
operation	O	O
and	O	O
depending	O	O
on	O	O
the	O	O
actual	O	O
terminal	O	O
operation	O	O
entirely	O	O
different	O	O
code	O	O
might	O	O
get	O	O
executed	O	O
.	O	O
It	O	O
would	O	O
be	O	O
up	O	O
to	O	O
you	O	O
,	O	O
the	O	O
writer	O	O
of	O	O
such	O	O
a	O	O
method	O	O
,	O	O
to	O	O
specify	O	O
what	O	O
calling	O	O
the	O	O
method	O	O
twice	O	O
implies	O	O
:	O	O
does	O	O
it	O	O
reproduce	O	O
exactly	O	O
the	O	O
same	O	O
sequence	O	O
,	O	O
as	O	O
streams	O	O
created	O	O
for	O	O
an	O	O
unmodified	O	O
array	O	O
or	O	O
collection	O	O
do	O	O
,	O	O
or	O	O
does	O	O
it	O	O
produce	O	O
a	O	O
stream	O	O
with	O	O
a	O	O
similar	O	O
semantics	O	O
but	O	O
different	O	O
elements	O	O
like	O	O
a	O	O
stream	O	O
of	O	O
random	O	O
ints	O	O
or	O	O
a	O	O
stream	O	O
of	O	O
console	O	O
input	O	O
lines	O	O
,	O	O
etc	O	O
.	O	O
By	O	O
the	O	O
way	O	O
,	O	O
to	O	O
avoid	O	O
confusion	O	O
,	O	O
a	O	O
terminal	O	O
operation	O	O
consumes	O	O
the	O	O
Stream	B-api_mention	B-api_mention
which	O	O
is	O	O
distinct	O	O
from	O	O
closing	O	O
the	O	O
Stream	B-api_mention	B-api_mention
as	O	O
calling	O	O
close	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
stream	O	O
does	O	O
(	O	O
which	O	O
is	O	O
required	O	O
for	O	O
streams	O	O
having	O	O
associated	O	O
resources	O	O
like	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
produced	O	O
by	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
It	O	O
seems	O	O
that	O	O
a	O	O
lot	O	O
of	O	O
confusion	O	O
stems	O	O
from	O	O
misguiding	O	O
comparison	O	O
of	O	O
IEnumerable	O	O
with	O	O
Stream	B-api_mention	B-api_mention
.	O	O
An	O	O
IEnumerable	O	O
represents	O	O
the	O	O
ability	O	O
to	O	O
provide	O	O
an	O	O
actual	O	O
IEnumerator	O	O
,	O	O
so	O	O
its	O	O
like	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
in	O	O
Java	O	O
.	O	O
In	O	O
contrast	O	O
,	O	O
a	O	O
Stream	B-api_mention	B-api_mention
is	O	O
a	O	O
kind	O	O
of	O	O
iterator	O	O
and	O	O
comparable	O	O
to	O	O
an	O	O
IEnumerator	O	O
so	O	O
it	O	O
’	O	O
s	O	O
wrong	O	O
to	O	O
claim	O	O
that	O	O
this	O	O
kind	O	O
of	O	O
data	O	O
type	O	O
can	O	O
be	O	O
used	O	O
multiple	O	O
times	O	O
in	O	O
.	O	O
NET	O	O
,	O	O
the	O	O
support	O	O
for	O	O
IEnumerator	O	O
.	O	O
Reset	O	O
is	O	O
optional	O	O
.	O	O
The	O	O
examples	O	O
discussed	O	O
here	O	O
rather	O	O
use	O	O
the	O	O
fact	O	O
that	O	O
an	O	O
IEnumerable	O	O
can	O	O
be	O	O
used	O	O
to	O	O
fetch	O	O
new	O	O
IEnumerator	O	O
s	O	O
and	O	O
that	O	O
works	O	O
with	O	O
Java	O	O
’	O	O
s	O	O
Collection	B-api_mention	B-api_mention
s	O	O
as	O	O
well	O	O
;	O	O
you	O	O
can	O	O
get	O	O
a	O	O
new	O	O
Stream	B-api_mention	B-api_mention
.	O	O
If	O	O
the	O	O
Java	O	O
developers	O	O
decided	O	O
to	O	O
add	O	O
the	O	O
Stream	B-api_mention	B-api_mention
operations	O	O
to	O	O
Iterable	B-api_mention	B-api_mention
directly	O	O
,	O	O
with	O	O
intermediate	O	O
operations	O	O
returning	O	O
another	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
it	O	O
was	O	O
really	O	O
comparable	O	O
and	O	O
it	O	O
could	O	O
work	O	O
the	O	O
same	O	O
way	O	O
.	O	O
However	O	O
,	O	O
the	O	O
developers	O	O
decided	O	O
against	O	O
it	O	O
and	O	O
the	O	O
decision	O	O
is	O	O
discussed	O	O
in	O	O
this	O	O
question	O	O
.	O	O
The	O	O
biggest	O	O
point	O	O
is	O	O
the	O	O
confusion	O	O
about	O	O
eager	O	O
Collection	B-api_mention	B-api_mention
operations	O	O
and	O	O
lazy	O	O
Stream	B-api_mention	B-api_mention
operations	O	O
.	O	O
By	O	O
looking	O	O
at	O	O
the	O	O
.	O	O
NET	O	O
API	O	O
,	O	O
I	O	O
(	O	O
yes	O	O
,	O	O
personally	O	O
)	O	O
find	O	O
it	O	O
justified	O	O
.	O	O
While	O	O
it	O	O
looks	O	O
reasonable	O	O
looking	O	O
at	O	O
IEnumerable	O	O
alone	O	O
,	O	O
a	O	O
particular	O	O
Collection	B-api_mention	B-api_mention
will	O	O
have	O	O
lots	O	O
of	O	O
methods	O	O
manipulating	O	O
the	O	O
Collection	B-api_mention	B-api_mention
directly	O	O
and	O	O
lots	O	O
of	O	O
methods	O	O
returning	O	O
a	O	O
lazy	O	O
IEnumerable	O	O
,	O	O
while	O	O
the	O	O
particular	O	O
nature	O	O
of	O	O
a	O	O
method	O	O
isn	O	O
’	O	O
t	O	O
always	O	O
intuitively	O	O
recognizable	O	O
.	O	O
The	O	O
worst	O	O
example	O	O
I	O	O
found	O	O
(	O	O
within	O	O
the	O	O
few	O	O
minutes	O	O
I	O	O
looked	O	O
at	O	O
it	O	O
)	O	O
is	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Reverse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
whose	O	O
name	O	O
matches	O	O
exactly	O	O
the	O	O
name	O	O
of	O	O
the	O	O
inherited	O	O
(	O	O
is	O	O
this	O	O
the	O	O
right	O	O
terminus	O	O
for	O	O
extension	O	O
methods	O	O
?	O	O
)	O	O
Enumerable	B-api_mention	O
.	I-api_mention	O
Reverse	I-api_mention	O
(	I-api_mention	O
)	I-api_mention	O
while	O	O
having	O	O
an	O	O
entirely	O	O
contradicting	O	O
behavior	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
these	O	O
are	O	O
two	O	O
distinct	O	O
decisions	O	O
.	O	O
The	O	O
first	O	O
one	O	O
to	O	O
make	O	O
Stream	B-api_mention	B-api_mention
a	O	O
type	O	O
distinct	O	O
from	O	O
Iterable	B-api_mention	B-api_mention
/	O	O
Collection	B-api_mention	B-api_mention
and	O	O
the	O	O
second	O	O
to	O	O
make	O	O
Stream	B-api_mention	B-api_mention
a	O	O
kind	O	O
of	O	O
one	O	O
time	O	O
iterator	O	O
rather	O	O
than	O	O
another	O	O
kind	O	O
of	O	O
iterable	O	O
.	O	O
But	O	O
these	O	O
decision	O	O
were	O	O
made	O	O
together	O	O
and	O	O
it	O	O
might	O	O
be	O	O
the	O	O
case	O	O
that	O	O
separating	O	O
these	O	O
two	O	O
decision	O	O
never	O	O
was	O	O
considered	O	O
.	O	O
It	O	O
wasn	O	O
’	O	O
t	O	O
created	O	O
with	O	O
being	O	O
comparable	O	O
to	O	O
.	O	O
NET	O	O
’	O	O
s	O	O
in	O	O
mind	O	O
.	O	O
The	O	O
actual	O	O
API	O	O
design	O	O
decision	O	O
was	O	O
to	O	O
add	O	O
an	O	O
improved	O	O
type	O	O
of	O	O
iterator	O	O
,	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
.	O	I-api_mention
Spliterator	B-api_mention	I-api_mention
s	O	O
can	O	O
be	O	O
provided	O	O
by	O	O
the	O	O
old	O	O
Iterable	B-api_mention	B-api_mention
s	O	O
(	O	O
which	O	O
is	O	O
the	O	O
way	O	O
how	O	O
these	O	O
were	O	O
retrofitted	O	O
)	O	O
or	O	O
entirely	O	O
new	O	O
implementations	O	O
.	O	O
Then	O	O
,	O	O
Stream	B-api_mention	B-api_mention
was	O	O
added	O	O
as	O	O
a	O	O
high	O	O
-	O	O
level	O	O
front	O	O
-	O	O
end	O	O
to	O	O
the	O	O
rather	O	O
low	O	O
level	O	O
Spliterator	B-api_mention	B-api_mention
s	O	O
.	O	O
That	O	O
’	O	O
s	O	O
it	O	O
.	O	O
You	O	O
may	O	O
discuss	O	O
about	O	O
whether	O	O
a	O	O
different	O	O
design	O	O
would	O	O
be	O	O
better	O	O
,	O	O
but	O	O
that	O	O
’	O	O
s	O	O
not	O	O
productive	O	O
,	O	O
it	O	O
won	O	O
’	O	O
t	O	O
change	O	O
,	O	O
given	O	O
the	O	O
way	O	O
they	O	O
are	O	O
designed	O	O
now	O	O
.	O	O
There	O	O
is	O	O
another	O	O
implementation	O	O
aspect	O	O
you	O	O
have	O	O
to	O	O
consider	O	O
.	O	O
Stream	B-api_mention	B-api_mention
s	O	O
are	O	O
not	O	O
immutable	O	O
data	O	O
structures	O	O
.	O	O
Each	O	O
intermediate	O	O
operation	O	O
may	O	O
return	O	O
a	O	O
new	O	O
Stream	B-api_mention	B-api_mention
instance	O	O
encapsulating	O	O
the	O	O
old	O	O
one	O	O
but	O	O
it	O	O
may	O	O
also	O	O
manipulate	O	O
its	O	O
own	O	O
instance	O	O
instead	O	O
and	O	O
return	O	O
itself	O	O
(	O	O
that	O	O
doesn	O	O
’	O	O
t	O	O
preclude	O	O
doing	O	O
even	O	O
both	O	O
for	O	O
the	O	O
same	O	O
operation	O	O
)	O	O
.	O	O
Commonly	O	O
known	O	O
examples	O	O
are	O	O
operations	O	O
like	O	O
parallel	O	O
or	O	O
unordered	O	O
which	O	O
do	O	O
not	O	O
add	O	O
another	O	O
step	O	O
but	O	O
manipulate	O	O
the	O	O
entire	O	O
pipeline	O	O
)	O	O
.	O	O
Having	O	O
such	O	O
a	O	O
mutable	O	O
data	O	O
structure	O	O
and	O	O
attempts	O	O
to	O	O
reuse	O	O
(	O	O
or	O	O
even	O	O
worse	O	O
,	O	O
using	O	O
it	O	O
multiple	O	O
times	O	O
at	O	O
the	O	O
same	O	O
time	O	O
)	O	O
doesn	O	O
’	O	O
t	O	O
play	O	O
well	O	O
…	O	O
For	O	O
completeness	O	O
,	O	O
here	O	O
is	O	O
your	O	O
quicksort	O	O
example	O	O
translated	O	O
to	O	O
the	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
API	O	O
.	O	O
It	O	O
shows	O	O
that	O	O
it	O	O
does	O	O
not	O	O
really	O	O
“	O	O
take	O	O
away	O	O
much	O	O
power	O	O
”	O	O
.	O	O
#	O	O
pre	O	O
It	O	O
can	O	O
be	O	O
used	O	O
like	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
write	O	O
it	O	O
even	O	O
more	O	O
compact	O	O
as	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5038204	O	O
,	O	O
answer	O	O
-	O	O
5039178	O	O
The	O	O
commons	O	O
/	O	O
lang	O	O
builders	O	O
are	O	O
great	O	O
and	O	O
I	O	O
have	O	O
been	O	O
using	O	O
them	O	O
for	O	O
years	O	O
without	O	O
noticeable	O	O
performance	O	O
overhead	O	O
(	O	O
with	O	O
and	O	O
without	O	O
hibernate	O	O
)	O	O
.	O	O
But	O	O
as	O	O
Alain	O	O
writes	O	O
,	O	O
the	O	O
Guava	O	O
way	O	O
is	O	O
even	O	O
nicer	O	O
:	O	O
Here	O	O
'	O	O
s	O	O
a	O	O
sample	O	O
Bean	O	O
:	O	O
#	O	O
pre	O	O
Here	O	O
'	O	O
s	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
implemented	O	O
with	O	O
Commons	O	O
/	O	O
Lang	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
here	O	O
with	O	O
Guava	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
the	O	O
Guava	O	O
version	O	O
is	O	O
shorter	O	O
and	O	O
avoids	O	O
superfluous	O	O
helper	O	O
objects	O	O
.	O	O
In	O	O
case	O	O
of	O	O
equals	O	O
,	O	O
it	O	O
even	O	O
allows	O	O
for	O	O
short	O	O
-	O	O
circuiting	O	O
the	O	O
evaluation	O	O
if	O	O
an	O	O
earlier	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equal	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
returns	O	O
false	O	O
(	O	O
to	O	O
be	O	O
fair	O	O
:	O	O
commons	O	O
/	O	O
lang	O	O
has	O	O
an	O	O
ObjectUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
with	O	O
identical	O	O
semantics	O	O
which	O	O
could	O	O
be	O	O
used	O	O
instead	O	O
of	O	O
EqualsBuilder	B-api_mention	B-api_mention
to	O	O
allow	O	O
short	O	O
-	O	O
circuiting	O	O
as	O	O
above	O	O
)	O	O
.	O	O
So	O	O
:	O	O
yes	O	O
,	O	O
the	O	O
commons	O	O
lang	O	O
builders	O	O
are	O	O
very	O	O
preferable	O	O
over	O	O
manually	O	O
constructed	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
(	O	O
or	O	O
those	O	O
awful	O	O
monsters	O	O
Eclipse	O	O
will	O	O
generate	O	O
for	O	O
you	O	O
)	O	O
,	O	O
but	O	O
the	O	O
Guava	O	O
versions	O	O
are	O	O
even	O	O
better	O	O
.	O	O
And	O	O
a	O	O
note	O	O
about	O	O
Hibernate	O	O
:	O	O
be	O	O
careful	O	O
about	O	O
using	O	O
lazy	O	O
collections	O	O
in	O	O
your	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
implementations	O	O
.	O	O
That	O	O
will	O	O
fail	O	O
miserably	O	O
if	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
an	O	O
open	O	O
Session	B-api_mention	O
.	O	O
Note	O	O
(	O	O
about	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
:	O	O
a	O	O
)	O	O
in	O	O
both	O	O
versions	O	O
of	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
above	O	O
,	O	O
you	O	O
might	O	O
want	O	O
to	O	O
use	O	O
one	O	O
or	O	O
both	O	O
of	O	O
these	O	O
shortcuts	O	O
also	O	O
:	O	O
#	O	O
pre	O	O
b	O	O
)	O	O
depending	O	O
on	O	O
your	O	O
interpretation	O	O
of	O	O
the	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
contract	O	O
,	O	O
you	O	O
might	O	O
also	O	O
change	O	O
the	O	O
line	O	O
(	O	O
s	O	O
)	O	O
if	O	O
(	O	O
args	O	O
)	O	O
{	O	O
to	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
use	O	O
the	O	O
second	O	O
version	O	O
,	O	O
you	O	O
probably	O	O
also	O	O
want	O	O
to	O	O
call	O	O
super	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
inside	O	O
your	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Opinions	O	O
differ	O	O
here	O	O
,	O	O
the	O	O
topic	O	O
is	O	O
discussed	O	O
in	O	O
this	O	O
question	O	O
:	O	O
#	O	O
blockquote	O	O
(	O	O
although	O	O
it	O	O
'	O	O
s	O	O
about	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
the	O	O
same	O	O
applies	O	O
to	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
Note	O	O
(	O	O
inspired	O	O
by	O	O
Comment	O	O
from	O	O
kayahr	O	O
)	O	O
Objects	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
hashCode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
just	O	O
as	O	O
the	O	O
underlying	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
hashCode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
might	O	O
perform	O	O
badly	O	O
if	O	O
you	O	O
have	O	O
many	O	O
primitive	O	O
fields	O	O
.	O	O
In	O	O
such	O	O
cases	O	O
,	O	O
EqualsBuilder	B-api_mention	B-api_mention
may	O	O
actually	O	O
be	O	O
the	O	O
better	O	O
solution	O	O
.	O	O
Question	O	O
-	O	O
21163108	O	O
,	O	O
answer	O	O
-	O	O
34930831	O	O
To	O	O
measure	O	O
the	O	O
actual	O	O
number	O	O
of	O	O
used	O	O
threads	O	O
,	O	O
you	O	O
can	O	O
check	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
activeCount	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
This	O	O
can	O	O
produce	O	O
on	O	O
a	O	O
4	O	O
-	O	O
core	O	O
CPU	O	O
an	O	O
output	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
Without	O	B-api_mention
.	B-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
gives	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29229373	O	O
,	O	O
answer	O	O
-	O	O
33839551	O	O
In	O	O
my	O	O
free	O	O
StreamEx	O	O
library	O	O
I	O	O
introduced	O	O
the	O	O
short	O	O
-	O	O
circuiting	O	O
collectors	O	O
.	O	O
When	O	O
collecting	O	O
sequential	O	O
stream	O	O
with	O	O
short	O	O
-	O	O
circuiting	O	O
collector	O	O
(	O	O
like	O	O
MoreCollectors	O	B-api_mention
.	B-api_mention	I-api_mention
first	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
exactly	O	O
one	O	O
element	O	O
is	O	O
consumed	O	O
from	O	O
the	O	O
source	O	O
.	O	O
Internally	O	O
it	O	O
'	O	O
s	O	O
implemented	O	O
in	O	O
quite	O	O
dirty	O	O
way	O	O
:	O	O
using	O	O
a	O	O
custom	O	O
exception	O	O
to	O	O
break	O	O
the	O	O
control	O	O
flow	O	O
.	O	O
Using	O	O
my	O	O
library	O	O
your	O	O
sample	O	O
could	O	O
be	O	O
rewritten	O	O
in	O	O
this	O	O
way	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
result	O	O
is	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31202946	O	O
,	O	O
answer	O	O
-	O	O
31203218	O	O
You	O	O
can	O	O
of	O	O
course	O	O
choose	O	O
to	O	O
shoot	O	O
yourself	O	O
in	O	O
the	O	O
foot	O	O
,	O	O
but	O	O
that	O	O
doesn	O	O
'	O	O
t	O	O
mean	O	O
you	O	O
must	O	O
.	O	O
#	O	O
blockquote	O	O
Because	O	O
the	O	O
recommended	O	O
way	O	O
to	O	O
create	O	O
a	O	O
start	O	O
a	O	O
thread	O	O
is	O	O
not	O	O
to	O	O
subclass	O	O
Thread	B-api_mention	B-api_mention
.	O	O
The	O	O
recommended	O	O
way	O	O
is	O	O
to	O	O
define	O	O
a	O	O
Runnable	B-api_mention	B-api_mention
,	O	O
and	O	O
pass	O	O
it	O	O
as	O	O
argument	O	O
to	O	O
the	O	O
Thread	B-api_mention	B-api_mention
constructor	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
Yes	O	O
and	O	O
no	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
replace	O	O
the	O	O
implementation	O	O
of	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
by	O	O
your	O	O
own	O	O
implementation	O	O
,	O	O
but	O	O
you	O	O
can	O	O
do	O	O
additional	O	O
things	O	O
in	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
want	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
said	O	O
,	O	O
if	O	O
Java	O	O
was	O	O
redesigned	O	O
from	O	O
scratch	O	O
today	O	O
,	O	O
there	O	O
is	O	O
a	O	O
good	O	O
chance	O	O
the	O	O
design	O	O
would	O	O
be	O	O
different	O	O
.	O	O
Remember	O	O
that	O	O
this	O	O
class	O	O
dates	O	O
from	O	O
Java	O	O
1	O	O
.	O	O
0	O	O
,	O	O
and	O	O
is	O	O
still	O	O
backward	O	O
-	O	O
compatible	O	O
.	O	O
Question	O	O
-	O	O
4759570	O	O
,	O	O
answer	O	O
-	O	O
19459145	O	O
This	O	O
works	O	O
on	O	O
Windows	O	O
with	O	O
Cygwin	O	O
installed	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getenv	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
31170459	O	O
,	O	O
answer	O	O
-	O	O
31170506	O	O
No	O	O
,	O	O
you	O	O
appear	O	O
to	O	O
have	O	O
a	O	O
legit	O	O
bug	O	O
.	O	O
The	O	O
bug	O	O
presents	O	O
in	O	O
JDK7	O	O
but	O	O
fixed	O	O
in	O	O
JDK8	O	O
.	O	O
Your	O	O
values	O	O
are	O	O
correctly	O	O
representable	O	O
as	O	O
BigDecimal	B-api_mention	B-api_mention
s	O	O
,	O	O
and	O	O
should	O	O
behave	O	O
correctly	O	O
,	O	O
but	O	O
don	O	O
'	O	O
t	O	O
.	O	O
Tracing	O	O
through	O	O
the	O	O
source	O	O
code	O	O
of	O	O
BigDecimal	B-api_mention	B-api_mention
,	O	O
on	O	O
line	O	O
2585	O	O
,	O	O
this	O	O
.	B-api_mention	B-api_mention
precision	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
1	O	O
,	O	O
and	O	O
this	O	O
.	B-api_mention	O
scale	I-api_mention	O
is	O	O
-	O	O
2147483647	O	O
.	O	O
this	O	O
.	B-api_mention	B-api_mention
precision	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
this	O	O
.	O	O
scale	O	O
therefore	O	O
overflows	O	O
,	O	O
and	O	O
the	O	O
following	O	O
overflow	O	O
is	O	O
not	O	O
handled	O	O
correctly	O	O
.	O	O
This	O	O
bug	O	O
has	O	O
been	O	O
fixed	O	O
in	O	O
JDK8	O	O
by	O	O
doing	O	O
the	O	O
subtraction	O	O
in	O	O
long	O	O
arithmetic	O	O
.	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
5585800	O	O
int	O	O
foo	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
See	O	O
the	O	O
Java	O	O
Documentation	O	O
for	O	O
more	O	O
information	O	O
.	O	O
(	O	O
If	O	O
you	O	O
have	O	O
it	O	O
in	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
(	O	O
or	O	O
the	O	O
ancient	O	O
StringBuffer	B-api_mention	B-api_mention
)	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
need	O	O
to	O	O
do	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
16252269	O	O
,	O	O
answer	O	O
-	O	O
29652714	O	O
You	O	O
can	O	O
use	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
sort	O	O
list	O	O
if	O	O
your	O	O
list	O	O
contains	O	O
Comparable	B-api_mention	B-api_mention
elements	O	O
.	O	O
Otherwise	O	O
I	O	O
would	O	O
recommend	O	O
you	O	O
to	O	O
implement	O	O
that	O	O
interface	O	O
like	O	O
here	O	O
:	O	O
public	O	O
class	O	O
Circle	O	O
implements	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
{	O	O
}	O	O
and	O	O
of	O	O
course	O	O
provide	O	O
your	O	O
own	O	O
realization	O	O
of	O	O
compareTo	B-api_mention	B-api_mention
method	O	O
like	O	O
here	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
then	O	O
you	O	O
can	O	O
again	O	O
use	O	O
Colection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
now	O	O
list	O	O
contains	O	O
objects	O	O
of	O	O
Comparable	B-api_mention	B-api_mention
type	O	O
and	O	O
can	O	O
be	O	O
sorted	O	O
.	O	O
Order	O	O
depends	O	O
on	O	O
compareTo	B-api_mention	B-api_mention
method	O	O
.	O	O
Check	O	O
this	O	O
#	O	O
a	O	O
for	O	O
more	O	O
detailed	O	O
information	O	O
.	O	O
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
13612866	O	O
It	O	O
is	O	O
crucial	O	O
to	O	O
know	O	O
that	O	O
attributes	O	O
are	O	O
not	O	O
parameters	O	O
.	O	O
The	O	O
return	O	O
type	O	O
for	O	O
attributes	O	O
is	O	O
an	O	O
Object	B-api_mention	B-api_mention
,	O	O
whereas	O	O
the	O	O
return	O	O
type	O	O
for	O	O
a	O	O
parameter	O	O
is	O	O
a	O	O
String	B-api_mention	B-api_mention
.	O	O
When	O	O
calling	O	O
the	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
bear	O	O
in	O	O
mind	O	O
that	O	O
the	O	O
attributes	O	O
must	O	O
be	O	O
cast	O	O
.	O	O
Additionally	O	O
,	O	O
there	O	O
is	O	O
no	O	O
servlet	O	O
specific	O	O
attributes	O	O
,	O	O
and	O	O
there	O	O
are	O	O
no	O	O
session	O	O
parameters	O	O
.	O	O
This	O	O
post	O	O
is	O	O
written	O	O
with	O	O
the	O	O
purpose	O	O
to	O	O
connect	O	O
on	O	O
@	O	O
Bozho	O	O
'	O	O
s	O	O
response	O	O
,	O	O
as	O	O
additional	O	O
information	O	O
that	O	O
can	O	O
be	O	O
useful	O	O
for	O	O
other	O	O
people	O	O
.	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26826286	O	O
It	O	O
'	O	O
s	O	O
easy	O	O
to	O	O
write	O	O
a	O	O
method	O	O
to	O	O
do	O	O
this	O	O
using	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
regionMatches	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Testing	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
is	O	O
not	O	O
immediately	O	O
obvious	O	O
,	O	O
but	O	O
a	O	O
function	O	O
like	O	O
this	O	O
can	O	O
still	O	O
be	O	O
dependent	O	O
on	O	O
the	O	O
order	O	O
in	O	O
which	O	O
the	O	O
replacements	O	O
are	O	O
specified	O	O
.	O	O
Consider	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
blockquote	O	O
But	O	O
reverse	O	O
the	O	O
replacements	O	O
:	O	O
truth	O	O
+	O	O
=	O	O
StringLiteral	O	O
+	O	O
simultaneousReplace	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
Output	O	O
:	O	O
#	O	O
blockquote	O	O
Oops	O	O
!	O	O
:	O	O
)	O	O
Therefore	O	O
it	O	O
is	O	O
sometimes	O	O
useful	O	O
to	O	O
make	O	O
sure	O	O
to	O	O
look	O	O
for	O	O
the	O	O
longest	O	O
match	O	O
(	O	O
as	O	O
PHP	O	O
'	O	O
s	O	O
strtr	O	O
function	O	O
does	O	O
,	O	O
for	O	O
example	O	O
)	O	O
.	O	O
This	O	O
version	O	O
of	O	O
the	O	O
method	O	O
will	O	O
do	O	O
that	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
the	O	O
above	O	O
methods	O	O
are	O	O
case	O	O
-	O	O
sensitive	O	O
.	O	O
If	O	O
you	O	O
need	O	O
a	O	O
case	O	O
-	O	O
insensitive	O	O
version	O	O
it	O	O
is	O	O
easy	O	O
to	O	O
modify	O	O
the	O	O
above	O	O
because	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
regionMatches	I-api_mention	I-api_mention
can	O	O
take	O	O
an	O	O
ignoreCase	B-api_mention	O
parameter	O	O
.	O	O
Question	O	O
-	O	O
17781150	O	O
,	O	O
answer	O	O
-	O	O
17781168	O	O
The	O	O
value	O	O
you	O	O
are	O	O
looking	O	O
for	O	O
is	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
#	O	O
blockquote	O	O
That	O	O
'	O	O
s	O	O
off	O	O
-	O	O
topic	O	O
for	O	O
Stack	O	O
Exchange	O	O
.	O	O
But	O	O
you	O	O
could	O	O
do	O	O
it	O	O
starting	O	O
from	O	O
the	O	O
definition	O	O
of	O	O
Java	O	O
integers	O	O
(	O	O
JLS	O	O
4	O	O
.	O	O
2	O	O
)	O	O
#	O	O
blockquote	O	O
and	O	O
#	O	O
blockquote	O	O
and	O	O
the	O	O
definition	O	O
of	O	O
the	O	O
Java	O	O
unary	O	O
'	O	O
-	O	O
'	O	O
operator	O	O
(	O	O
JLS	O	O
15	O	O
.	O	O
15	O	O
.	O	O
4	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
24907860	O	O
Instead	O	O
of	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
use	O	O
input	O	O
.	B-api_mention	O
next	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
that	O	O
should	O	O
solve	O	O
the	O	O
problem	O	O
.	O	O
Modified	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
10827872	O	O
,	O	O
answer	O	O
-	O	O
30749407	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
doesn	O	O
'	O	O
t	O	O
uses	O	O
regex	O	O
pattern	O	O
whereas	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
uses	O	O
regex	O	O
pattern	O	O
.	O	O
So	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
performs	O	O
faster	O	O
than	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
13102045	O	O
I	O	O
am	O	O
using	O	O
Scanner	B-api_mention	B-api_mention
methods	O	O
nextInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
nextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
reading	O	O
input	O	O
.	O	O
Basically	O	O
,	O	O
it	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
problem	O	O
is	O	O
that	O	O
after	O	O
entering	O	O
the	O	O
numerical	O	O
value	O	O
,	O	O
the	O	O
first	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
skipped	O	O
and	O	O
the	O	O
second	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
executed	O	O
,	O	O
so	O	O
that	O	O
my	O	O
output	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
tested	O	O
my	O	O
application	O	O
and	O	O
it	O	O
looks	O	O
like	O	O
the	O	O
problem	O	O
lies	O	O
in	O	O
using	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
I	O	O
delete	O	O
it	O	O
,	O	O
then	O	O
both	O	O
string1	O	O
=	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
string2	O	O
=	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
executed	O	O
as	O	O
I	O	O
want	O	O
them	O	O
to	O	O
be	O	O
.	O	O
Question	O	O
-	O	O
9297899	O	O
,	O	O
answer	O	O
-	O	O
25816501	O	O
Even	O	O
though	O	O
this	O	O
is	O	O
not	O	O
a	O	O
direct	O	O
answer	O	O
to	O	O
the	O	O
question	O	O
,	O	O
it	O	O
is	O	O
an	O	O
addition	O	O
to	O	O
the	O	O
.	B-api_mention	O
length	I-api_mention	O
vs	O	O
.	B-api_mention	B-api_mention
size	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
argument	O	O
.	O	O
I	O	O
was	O	O
researching	O	O
something	O	O
related	O	O
to	O	O
this	O	O
question	O	O
so	O	O
when	O	O
I	O	O
came	O	O
across	O	O
it	O	O
I	O	O
noticed	O	O
that	O	O
the	O	O
definition	O	O
(	O	O
s	O	O
)	O	O
provided	O	O
here	O	O
#	O	O
blockquote	O	O
is	O	O
not	O	O
"	O	O
exactly	O	O
"	O	O
correct	O	O
.	O	O
The	O	O
field	O	O
length	O	O
contains	O	O
the	O	O
number	O	O
of	O	O
available	O	O
places	O	O
to	O	O
put	O	O
a	O	O
component	O	O
,	O	O
not	O	O
the	O	O
number	O	O
of	O	O
components	O	O
present	O	O
in	O	O
the	O	O
array	O	O
.	O	O
So	O	O
it	O	O
represents	O	O
the	O	O
total	O	O
available	O	O
memory	O	O
allocated	O	O
to	O	O
that	O	O
array	O	O
,	O	O
not	O	O
how	O	O
much	O	O
of	O	O
that	O	O
memory	O	O
is	O	O
filled	O	O
.	O	O
#	O	O
img	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
the	O	O
.	O	B-api_mention
size	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
property	O	O
of	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
does	O	O
give	O	O
the	O	O
number	O	O
of	O	O
elements	O	O
in	O	O
the	O	O
list	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29097694	O	O
Please	O	O
do	O	O
not	O	O
vote	O	O
.	O	O
I	O	O
do	O	O
not	O	O
have	O	O
enough	O	O
place	O	O
to	O	O
explain	O	O
this	O	O
in	O	O
comments	O	O
.	O	O
This	O	O
is	O	O
a	O	O
solution	O	O
with	O	O
a	O	O
Stream	B-api_mention	B-api_mention
and	O	O
a	O	O
foreach	O	O
but	O	O
this	O	O
is	O	O
strictly	O	O
equivalent	O	O
to	O	O
Alexis	O	O
'	O	O
s	O	O
solution	O	O
or	O	O
a	O	O
foreach	O	O
loop	O	O
(	O	O
and	O	O
less	O	O
clear	O	O
,	O	O
and	O	O
I	O	O
could	O	O
not	O	O
get	O	O
rid	O	O
of	O	O
the	O	O
copy	O	O
constructor	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
understand	O	O
that	O	O
you	O	O
want	O	O
to	O	O
find	O	O
a	O	O
more	O	O
elegant	O	O
solution	O	O
with	O	O
Java	O	O
8	O	O
but	O	O
I	O	O
truly	O	O
think	O	O
that	O	O
it	O	O
has	O	O
not	O	O
been	O	O
designed	O	O
for	O	O
this	O	O
case	O	O
.	O	O
And	O	O
as	O	O
said	O	O
by	O	O
Mr	O	O
spoon	O	O
,	O	O
highly	O	O
prefer	O	O
the	O	O
naive	O	O
way	O	O
in	O	O
this	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
8894384	O	O
This	O	O
is	O	O
just	O	O
micro	O	O
-	O	O
optimisation	O	O
that	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
worry	O	O
about	O	O
.	O	O
char	O	O
[	O	O
]	O	O
chars	O	O
=	O	O
str	O	O
.	B-api_mention	B-api_mention
toCharArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
returns	O	O
you	O	O
a	O	O
copy	O	O
of	O	O
str	O	O
character	O	O
arrays	O	O
(	O	O
in	O	O
JDK	O	O
,	O	O
it	O	O
returns	O	O
a	O	O
copy	O	O
of	O	O
characters	O	O
by	O	O
calling	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
arrayCopy	I-api_mention	I-api_mention
)	O	I-api_mention
.	O	O
Other	O	O
than	O	O
that	O	O
,	O	O
str	O	O
.	B-api_mention	B-api_mention
charAt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
only	O	O
checks	O	O
if	O	O
the	O	O
index	O	O
is	O	O
indeed	O	O
in	O	O
bounds	O	O
and	O	O
returns	O	O
a	O	O
character	O	O
within	O	O
the	O	O
array	O	O
index	O	O
.	O	O
The	O	O
first	O	O
one	O	O
doesn	O	O
'	O	O
t	O	O
create	O	O
additional	O	O
memory	O	O
in	O	O
JVM	O	O
.	O	O
Question	O	O
-	O	O
10796160	O	O
,	O	O
answer	O	O
-	O	O
21025279	O	O
Use	O	O
proper	O	O
escaping	O	O
:	O	O
string	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Or	O	O
the	O	O
helper	O	O
Regexp	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
quote	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
has	O	O
been	O	O
created	O	O
for	O	O
exactly	O	O
this	O	O
purpose	O	O
:	O	O
string	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
works	O	O
with	O	O
arbitrary	O	O
input	O	O
strings	O	O
.	O	O
Very	O	O
useful	O	O
when	O	O
you	O	O
need	O	O
to	O	O
quote	O	O
/	O	O
escape	O	O
user	O	O
input	O	O
.	O	O
Question	O	O
-	O	O
22740464	O	O
I	O	O
can	O	O
add	O	O
streams	O	O
or	O	O
extra	O	O
elements	O	O
,	O	O
like	O	O
this	O	O
:	O	O
Stream	B-api_mention	B-api_mention
stream	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	O	O
stream1	O	O
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
And	O	O
I	O	O
can	O	O
add	O	O
new	O	O
stuff	O	O
as	O	O
I	O	O
go	O	O
,	O	O
like	O	O
this	O	O
:	O	O
Stream	B-api_mention	B-api_mention
stream	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
this	O	O
is	O	O
ugly	O	O
,	O	O
because	O	O
concat	B-api_mention	O
is	O	O
static	O	O
.	O	O
If	O	O
concat	B-api_mention	O
were	O	O
an	O	O
instance	O	O
method	O	O
,	O	O
the	O	O
above	O	O
examples	O	O
would	O	O
be	O	O
much	O	O
easier	O	O
to	O	O
read	O	O
:	O	O
Stream	B-api_mention	B-api_mention
stream	O	O
=	O	O
stream1	O	O
.	B-api_mention	B-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
And	O	O
Stream	B-api_mention	B-api_mention
stream	O	O
=	O	O
stream1	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
My	O	O
question	O	O
is	O	O
:	O	O
1	O	O
)	O	O
Is	O	O
there	O	O
any	O	O
good	O	O
reason	O	O
why	O	O
concat	B-api_mention	O
is	O	O
static	O	O
?	O	O
Or	O	O
is	O	O
there	O	O
some	O	O
equivalent	O	O
instance	O	O
method	O	O
I	O	O
'	O	O
m	O	O
missing	O	O
?	O	O
2	O	O
)	O	O
In	O	O
any	O	O
case	O	O
,	O	O
is	O	O
there	O	O
a	O	O
better	O	O
way	O	O
of	O	O
doing	O	O
this	O	O
?	O	O
Question	O	O
-	O	O
6416706	O	O
,	O	O
answer	O	O
-	O	O
6416800	O	O
With	O	O
Guava	O	O
you	O	O
can	O	O
use	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
Iterable	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Sets	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newHashSet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
Iterable	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
among	O	O
other	O	O
similar	O	O
methods	O	O
.	O	O
This	O	O
will	O	O
of	O	O
course	O	O
copy	O	O
all	O	O
the	O	O
elements	O	O
in	O	O
to	O	O
memory	O	O
.	O	O
If	O	O
that	O	O
isn	O	O
'	O	O
t	O	O
acceptable	O	O
,	O	O
I	O	O
think	O	O
your	O	O
code	O	O
that	O	O
works	O	O
with	O	O
these	O	O
ought	O	O
to	O	O
take	O	O
Iterable	B-api_mention	B-api_mention
rather	O	O
than	O	O
Collection	B-api_mention	B-api_mention
.	O	O
Guava	O	O
also	O	O
happens	O	O
to	O	O
provide	O	O
convenient	O	O
methods	O	O
for	O	O
doing	O	O
things	O	O
you	O	O
can	O	O
do	O	O
on	O	O
a	O	O
Collection	B-api_mention	B-api_mention
using	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
such	O	O
as	O	O
Iterables	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Iterables	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
contains	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
,	O	O
but	O	O
the	O	O
performance	O	O
implications	O	O
are	O	O
more	O	O
obvious	O	O
.	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
35834484	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	O
decode	I-api_mention	O
You	O	O
can	O	O
also	O	O
use	O	O
public	O	O
static	O	O
Integer	B-api_mention	B-api_mention
decode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
throws	O	O
NumberFormatException	B-api_mention	B-api_mention
.	O	O
It	O	O
also	O	O
works	O	O
for	O	O
base	O	O
8	O	O
and	O	O
16	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
want	O	O
to	O	O
get	O	O
int	O	O
instead	O	O
of	O	O
Integer	B-api_mention	B-api_mention
you	O	O
can	O	O
use	O	O
:	O	O
#	O	O
li	O	O
Unboxing	O	O
:	O	O
int	O	O
val	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
decode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
intValue	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
decode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
intValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777312	O	O
Arrays	O	B-api_mention
inherit	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
from	O	O
Object	B-api_mention	B-api_mention
and	O	O
hence	O	O
compare	O	O
only	O	O
returns	O	O
true	O	O
if	O	O
comparing	O	O
an	O	O
array	O	O
against	O	O
itself	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
compares	O	O
the	O	O
elements	O	O
of	O	O
the	O	O
arrays	O	O
.	O	O
This	O	O
snippet	O	O
elucidates	O	O
the	O	O
difference	O	O
:	O	O
#	O	O
pre	O	O
See	O	O
also	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Another	O	O
static	O	O
method	O	O
there	O	O
may	O	O
also	O	O
be	O	O
of	O	O
interest	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
deepEquals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
18448671	O	O
,	O	O
answer	O	O
-	O	O
26937769	O	O
Though	O	O
one	O	O
answer	O	O
is	O	O
accepted	O	O
and	O	O
this	O	O
is	O	O
an	O	O
old	O	O
one	O	O
,	O	O
I	O	O
thought	O	O
posting	O	O
this	O	O
answer	O	O
as	O	O
it	O	O
does	O	O
not	O	O
use	O	O
Iterator	B-api_mention	B-api_mention
#	O	O
pre	O	O
Question	O	O
-	O	O
19416644	O	O
,	O	O
answer	O	O
-	O	O
19775881	O	O
Create	O	O
your	O	O
own	O	O
class	O	O
System	B-api_mention	B-api_mention
in	O	O
tha	O	O
same	O	O
package	O	O
with	O	O
Condition	O	B-api_mention
.	O	O
In	O	O
this	O	O
case	O	O
your	O	O
System	B-api_mention	O
class	O	O
will	O	O
hide	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
System	I-api_mention	I-api_mention
class	O	O
#	O	O
pre	O	O
Ideone	O	O
DEMO	O	O
Question	O	O
-	O	O
23653778	O	O
,	O	O
answer	O	O
-	O	O
25564062	O	O
Try	O	O
OnStart	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
and	O	O
just	O	O
use	O	O
View	B-api_mention	O
view	O	O
=	O	O
getView	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findViewById	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
Declare	O	O
any	O	O
View	B-api_mention	O
using	O	O
getView	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	O
findViewById	I-api_mention	O
method	O	O
in	O	O
onStart	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Declare	O	O
click	O	O
listener	O	O
on	O	O
view	O	O
by	O	O
anyView	O	O
.	B-api_mention	B-api_mention
setOnClickListener	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14526729	O	O
The	O	O
real	O	O
problem	O	O
with	O	O
this	O	O
is	O	O
that	O	O
it	O	O
'	O	O
s	O	O
output	O	O
histogram	O	O
is	O	O
dependent	O	O
on	O	O
the	O	O
initial	O	O
seed	O	O
far	O	O
to	O	O
much	O	O
-	O	O
much	O	O
of	O	O
the	O	O
time	O	O
it	O	O
will	O	O
end	O	O
up	O	O
with	O	O
a	O	O
near	O	O
uniform	O	O
output	O	O
but	O	O
a	O	O
lot	O	O
of	O	O
the	O	O
time	O	O
will	O	O
have	O	O
distinctly	O	O
un	O	O
-	O	O
uniform	O	O
output	O	O
.	O	O
Inspired	O	O
by	O	O
this	O	O
article	O	O
about	O	O
how	O	O
bad	O	O
php	O	O
'	O	O
s	O	O
rand	O	O
(	O	O
)	O	O
function	O	O
is	O	O
,	O	O
I	O	O
made	O	O
some	O	O
random	O	O
matrix	O	O
images	O	O
using	O	O
QuickRandom	B-api_mention	B-api_mention
and	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
.	O	O
This	O	O
run	O	O
shows	O	O
how	O	O
sometimes	O	O
the	O	O
seed	O	O
can	O	O
have	O	O
a	O	O
bad	O	O
effect	O	O
(	O	O
in	O	O
this	O	O
case	O	O
favouring	O	O
lower	O	O
numbers	O	O
)	O	O
where	O	O
as	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
is	O	O
pretty	O	O
uniform	O	O
.	O	O
QuickRandom	B-api_mention	O
#	O	O
img	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
#	O	O
img	O	O
Even	O	O
Worse	O	O
If	O	O
we	O	O
initialise	O	O
QuickRandom	B-api_mention	B-api_mention
as	O	O
new	O	O
QuickRandom	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
we	O	O
get	O	O
this	O	O
image	O	O
:	O	O
#	O	O
img	O	O
The	O	O
Code	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29262002	O	O
,	O	O
answer	O	O
-	O	O
29262511	O	O
The	O	O
first	O	O
case	O	O
is	O	O
ok	O	O
because	O	O
you	O	O
are	O	O
invoking	O	O
a	O	O
"	O	O
special	O	O
"	O	O
method	O	O
(	O	O
a	O	O
constructor	O	O
)	O	O
and	O	O
you	O	O
are	O	O
no	O	O
actually	O	O
taking	O	O
the	O	O
created	O	O
object	O	O
.	O	O
Just	O	O
to	O	O
make	O	O
it	O	O
more	O	O
clear	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
put	O	O
the	O	O
optional	O	O
braces	O	O
in	O	O
your	O	O
lambdas	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
more	O	O
clear	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
translate	O	O
that	O	O
to	O	O
the	O	O
older	O	O
notation	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
the	O	O
first	O	O
case	O	O
you	O	O
are	O	O
executing	O	O
a	O	O
constructor	O	O
,	O	O
but	O	O
you	O	O
are	O	O
NOT	O	O
returning	O	O
the	O	O
created	O	O
object	O	O
,	O	O
in	O	O
the	O	O
second	O	O
case	O	O
you	O	O
are	O	O
attempting	O	O
to	O	O
return	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
,	O	O
but	O	O
your	O	O
method	O	O
in	O	O
your	O	O
interface	O	O
BiConsumer	O	B-api_mention
returns	O	O
void	O	O
,	O	O
hence	O	O
the	O	O
compiler	O	O
error	O	O
.	O	O
Question	O	O
-	O	O
27949213	O	O
,	O	O
answer	O	O
-	O	O
27949581	O	O
Imagine	O	O
you	O	O
have	O	O
a	O	O
phone	O	O
book	O	O
,	O	O
which	O	O
contains	O	O
people	O	O
,	O	O
which	O	O
have	O	O
a	O	O
String	B-api_mention	B-api_mention
firstName	O	O
and	O	O
a	O	O
String	B-api_mention	B-api_mention
lastName	O	O
.	O	O
And	O	O
it	O	O
happens	O	O
that	O	O
in	O	O
your	O	O
phone	O	O
book	O	O
,	O	O
100	O	O
,	O	O
000	O	O
people	O	O
have	O	O
the	O	O
same	O	O
firstName	O	O
=	O	O
StringLiteral	O	O
.	O	O
Because	O	O
you	O	O
get	O	O
the	O	O
data	O	O
from	O	O
a	O	O
database	O	O
or	O	O
a	O	O
file	O	O
those	O	O
strings	O	O
are	O	O
not	O	O
interned	O	O
so	O	O
your	O	O
JVM	O	O
memory	O	O
contains	O	O
the	O	O
char	O	O
array	O	O
{	O	O
CharLiteral	O	O
,	O	O
CharLiteral	O	O
,	O	O
CharLiteral	O	O
,	O	O
CharLiteral	O	O
}	O	O
100	O	O
thousand	O	O
times	O	O
,	O	O
one	O	O
per	O	O
John	O	O
string	O	O
.	O	O
Each	O	O
of	O	O
these	O	O
arrays	O	O
takes	O	O
,	O	O
say	O	O
,	O	O
20	O	O
bytes	O	O
of	O	O
memory	O	O
so	O	O
those	O	O
100k	O	O
Johns	O	O
take	O	O
up	O	O
2	O	O
MB	O	O
of	O	O
memory	O	O
.	O	O
With	O	O
deduplication	O	O
,	O	O
the	O	O
JVM	O	O
will	O	O
realise	O	O
that	O	O
"	O	O
John	O	O
"	O	O
is	O	O
duplicated	O	O
many	O	O
times	O	O
and	O	O
make	O	O
all	O	O
those	O	O
John	O	O
strings	O	O
point	O	O
to	O	O
the	O	O
same	O	O
underlying	O	O
char	O	O
array	O	O
,	O	O
decreasing	O	O
the	O	O
memory	O	O
usage	O	O
from	O	O
2MB	O	O
to	O	O
20	O	O
bytes	O	O
.	O	O
You	O	O
can	O	O
find	O	O
a	O	O
more	O	O
detailed	O	O
explanation	O	O
in	O	O
the	O	O
JEP	O	O
.	O	O
In	O	O
particular	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
15156857	O	O
I	O	O
have	O	O
a	O	O
method	O	O
with	O	O
a	O	O
void	O	O
return	O	O
type	O	O
.	O	O
It	O	O
can	O	O
also	O	O
throw	O	O
a	O	O
number	O	O
of	O	O
exceptions	O	O
so	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
test	O	O
those	O	O
exceptions	O	O
being	O	O
thrown	O	O
.	O	O
All	O	O
attempts	O	O
have	O	O
failed	O	O
with	O	O
the	O	O
same	O	O
reason	O	O
:	O	O
#	O	O
blockquote	O	O
Any	O	O
ideas	O	O
how	O	O
I	O	O
can	O	O
get	O	O
the	O	O
method	O	O
to	O	O
throw	O	O
a	O	O
specified	O	O
exception	O	O
?	O	O
doThrow	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
when	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
22561614	O	O
,	O	O
answer	O	O
-	O	O
22561687	O	O
This	O	O
works	O	O
because	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
min	I-api_mention	O
resolves	O	O
to	O	O
an	O	O
implementation	O	O
of	O	O
the	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
.	O	O
The	O	O
method	O	O
reference	O	O
of	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
resolves	O	O
to	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
resolved	O	O
to	O	O
IntBinaryOperator	B-api_mention	B-api_mention
,	O	O
and	O	O
presumably	O	O
autoboxing	O	O
occurs	O	O
somewhere	O	O
making	O	O
it	O	O
a	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
And	O	O
the	O	O
min	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
resp	O	I-api_mention
max	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
of	O	O
the	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
ask	O	O
the	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
to	O	O
be	O	O
implemented	O	O
.	O	O
Now	O	O
this	O	O
resolves	O	O
to	O	O
the	O	O
single	O	O
method	O	O
Integer	B-api_mention	B-api_mention
compareTo	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Which	O	O
is	O	O
of	O	O
type	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
And	O	O
thus	O	O
the	O	O
magic	O	O
has	O	O
happened	O	O
as	O	O
both	O	O
methods	O	O
are	O	O
a	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
29280857	O	O
,	O	O
answer	O	O
-	O	O
29382161	O	O
As	O	O
stated	O	O
previously	O	O
,	O	O
you	O	O
should	O	O
lock	O	O
on	O	O
both	O	O
accounts	O	O
,	O	O
always	O	O
in	O	O
the	O	O
same	O	O
order	O	O
.	O	O
The	O	O
key	O	O
part	O	O
,	O	O
however	O	O
,	O	O
is	O	O
ensuring	O	O
both	O	O
high	O	O
granularity	O	O
and	O	O
singularity	O	O
across	O	O
the	O	O
VM	O	O
instance	O	O
.	O	O
This	O	O
can	O	O
be	O	O
done	O	O
using	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
11359187	O	O
,	O	O
answer	O	O
-	O	O
11359320	O	O
#	O	O
li	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
logging	I-api_mention	I-api_mention
was	O	O
introduced	O	O
in	O	O
Java	O	O
1	O	O
.	O	O
4	O	O
.	O	O
There	O	O
were	O	O
uses	O	O
for	O	O
logging	O	O
before	O	O
that	O	O
,	O	O
that	O	O
'	O	O
s	O	O
why	O	O
many	O	O
other	O	O
logging	O	O
APIs	O	O
exist	O	O
.	O	O
Those	O	O
APIs	O	O
where	O	O
used	O	O
heavily	O	O
before	O	O
Java	O	O
1	O	O
.	O	O
4	O	O
and	O	O
thus	O	O
had	O	O
a	O	O
great	O	O
marketshare	O	O
that	O	O
didn	O	O
'	O	O
t	O	O
just	O	O
drop	O	O
to	O	O
0	O	O
when	O	O
1	O	O
.	O	O
4	O	O
was	O	O
release	O	O
.	O	O
#	O	O
li	O	O
JUL	B-api_mention	B-api_mention
didn	O	O
'	O	O
t	O	O
start	O	O
out	O	O
all	O	O
that	O	O
great	O	O
,	O	O
many	O	O
of	O	O
the	O	O
things	O	O
you	O	O
mentioned	O	O
where	O	O
a	O	O
lot	O	O
worse	O	O
in	O	O
1	O	O
.	O	O
4	O	O
and	O	O
only	O	O
got	O	O
better	O	O
in	O	O
1	O	O
.	O	O
5	O	O
(	O	O
and	O	O
I	O	O
guess	O	O
in	O	O
6	O	O
as	O	O
well	O	O
,	O	O
but	O	O
I	O	O
'	O	O
m	O	O
not	O	O
too	O	O
sure	O	O
)	O	O
.	O	O
#	O	O
li	O	O
JUL	B-api_mention	B-api_mention
isn	O	O
'	O	O
t	O	O
well	O	O
suited	O	O
for	O	O
multiple	O	O
applications	O	O
with	O	O
different	O	O
configurations	O	O
in	O	O
the	O	O
same	O	O
JVM	O	O
(	O	O
think	O	O
multiple	O	O
web	O	O
applications	O	O
that	O	O
should	O	O
not	O	O
interact	O	O
)	O	O
.	O	O
Tomcat	O	O
needs	O	O
to	O	O
jump	O	O
through	O	O
some	O	O
hoops	O	O
to	O	O
get	O	O
that	O	O
working	O	O
(	O	O
effectively	O	O
re	O	O
-	O	O
implementing	O	O
JUL	B-api_mention	B-api_mention
if	O	O
I	O	O
understood	O	O
that	O	O
correctly	O	O
)	O	O
.	O	O
#	O	O
li	O	O
You	O	O
can	O	O
'	O	O
t	O	O
always	O	O
influence	O	O
what	O	O
logging	O	O
framework	O	O
your	O	O
libraries	O	O
use	O	O
.	O	O
Therefore	O	O
using	O	O
SLF4J	B-api_mention	B-api_mention
(	O	O
which	O	O
is	O	O
actually	O	O
just	O	O
a	O	O
very	O	O
thin	O	O
API	O	O
layer	O	O
above	O	O
other	O	O
libraries	O	O
)	O	O
helps	O	O
keeping	O	O
a	O	O
somewhat	O	O
consistent	O	O
picture	O	O
of	O	O
the	O	O
entire	O	O
logging	O	O
world	O	O
(	O	O
so	O	O
you	O	O
can	O	O
decide	O	O
the	O	O
underlying	O	O
logging	O	O
framework	O	O
while	O	O
still	O	O
having	O	O
library	O	O
logging	O	O
in	O	O
the	O	O
same	O	O
system	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Libraries	O	O
can	O	O
'	O	O
t	O	O
easily	O	O
change	O	O
.	O	O
If	O	O
a	O	O
previous	O	O
version	O	O
of	O	O
a	O	O
library	O	O
used	O	O
to	O	O
use	O	O
logging	O	O
-	O	O
library	O	O
-	O	O
X	O	O
it	O	O
can	O	O
'	O	O
t	O	O
easily	O	O
switch	O	O
to	O	O
logging	O	O
-	O	O
library	O	O
-	O	O
Y	O	O
(	O	O
for	O	O
example	O	O
JUL	B-api_mention	B-api_mention
)	O	O
,	O	O
even	O	O
if	O	O
the	O	O
latter	O	O
is	O	O
clearly	O	O
superious	O	O
:	O	O
any	O	O
user	O	O
of	O	O
that	O	O
library	O	O
would	O	O
need	O	O
to	O	O
learn	O	O
the	O	O
new	O	O
logging	O	O
framework	O	O
and	O	O
(	O	O
at	O	O
least	O	O
)	O	O
reconfigure	O	O
their	O	O
logging	O	O
.	O	O
That	O	O
'	O	O
s	O	O
a	O	O
big	O	O
no	O	O
-	O	O
no	O	O
,	O	O
especially	O	O
when	O	O
it	O	O
brings	O	O
no	O	O
apparent	O	O
gain	O	O
to	O	O
most	O	O
people	O	O
.	O	O
Having	O	O
said	O	O
all	O	O
that	O	O
I	O	O
think	O	O
JUL	B-api_mention	B-api_mention
is	O	O
at	O	O
least	O	O
a	O	O
valid	O	O
alternative	O	O
to	O	O
other	O	O
logging	O	O
frameworks	O	O
these	O	O
days	O	O
.	O	O
Question	O	O
-	O	O
4871051	O	O
,	O	O
answer	O	O
-	O	O
20810612	O	O
I	O	O
'	O	O
m	O	O
on	O	O
Linux	O	O
and	O	O
get	O	O
same	O	O
result	O	O
for	O	O
both	O	O
of	O	O
these	O	O
approaches	O	O
:	O	O
#	O	O
pre	O	O
Paths	B-api_mention	O
.	I-api_mention	O
get	I-api_mention	O
(	I-api_mention	O
"	I-api_mention	O
"	I-api_mention	O
)	I-api_mention	O
docs	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getProperty	I-api_mention	I-api_mention
(	I-api_mention	O
"	I-api_mention	O
user	I-api_mention	O
.	I-api_mention	O
dir	I-api_mention	O
"	I-api_mention	O
)	I-api_mention	O
docs	O	O
Question	O	O
-	O	O
16148575	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
build	O	O
a	O	O
HashMap	B-api_mention	B-api_mention
which	O	O
will	O	O
have	O	O
integer	O	O
as	O	O
keys	O	O
and	O	O
objects	O	O
as	O	O
values	O	O
.	O	O
My	O	O
syntax	O	O
is	O	O
:	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
However	O	O
,	O	O
the	O	O
error	O	O
returned	O	O
is	O	O
-	O	O
Syntax	O	O
error	O	O
on	O	O
token	O	O
"	O	O
int	O	O
"	O	O
,	O	O
Dimensions	O	O
expected	O	O
after	O	O
this	O	O
token	O	O
-	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
why	O	O
I	O	O
should	O	O
add	O	O
a	O	O
dimension	O	O
(	O	O
ie	O	O
:	O	O
making	O	O
the	O	O
int	O	O
into	O	O
an	O	O
array	O	O
)	O	O
since	O	O
I	O	O
only	O	O
need	O	O
to	O	O
store	O	O
a	O	O
digit	O	O
as	O	O
key	O	O
.	O	O
What	O	O
could	O	O
I	O	O
do	O	O
?	O	O
Thanks	O	O
in	O	O
advance	O	O
!	O	O
:	O	O
)	O	O
Question	O	O
-	O	O
32820722	O	O
,	O	O
answer	O	O
-	O	O
32820984	O	O
Let	O	O
'	O	O
s	O	O
rewrite	O	O
that	O	O
lambda	O	O
expression	O	O
with	O	O
parentheses	O	O
to	O	O
make	O	O
it	O	O
more	O	O
clear	O	O
:	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
curriedAdd	O	O
=	O	O
a	O	O
-	O	O
>	O	O
(	O	O
b	O	O
-	O	O
>	O	O
(	O	O
a	O	O
+	O	O
b	O	O
)	O	O
)	O	O
;	O	O
So	O	O
we	O	O
are	O	O
declaring	O	O
a	O	O
function	O	O
taking	O	O
an	O	O
int	O	O
which	O	O
returns	O	O
a	O	O
Function	B-api_mention	O
.	O	O
More	O	O
specifically	O	O
,	O	O
the	O	O
function	O	O
returned	O	O
takes	O	O
an	O	O
int	O	O
and	O	O
returns	O	O
an	O	O
int	O	O
(	O	O
the	O	O
sum	O	O
of	O	O
the	O	O
two	O	O
elements	O	O
)	O	O
:	O	O
this	O	O
can	O	O
be	O	O
represented	O	O
as	O	O
an	O	O
IntUnaryOperator	B-api_mention	B-api_mention
.	O	O
Therefore	O	O
,	O	O
curriedAdd	O	O
is	O	O
a	O	O
function	O	O
taking	O	O
an	O	O
int	O	O
and	O	O
returning	O	O
an	O	O
IntUnaryOperator	O	B-api_mention
,	O	O
so	O	O
it	O	O
can	O	O
be	O	O
represented	O	O
as	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
IntUnaryOperator	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
29140402	O	O
,	O	O
answer	O	O
-	O	O
29141638	O	O
Every	O	O
class	O	O
in	O	O
java	O	O
has	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
it	O	O
by	O	O
default	O	O
,	O	O
which	O	O
is	O	O
called	O	O
by	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
pass	O	O
some	O	O
object	O	O
of	O	O
a	O	O
class	O	O
to	O	O
it	O	O
.	O	O
When	O	O
you	O	O
try	O	O
to	O	O
print	O	O
object	O	O
of	O	O
a	O	O
class	O	O
,	O	O
the	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
will	O	O
call	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
the	O	O
class	O	O
which	O	O
returns	O	O
the	O	O
className	O	O
@	O	O
hashcode	O	O
of	O	O
that	O	O
object	O	O
.	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
override	O	O
the	O	O
toString	B-api_mention	B-api_mention
method	O	O
of	O	O
a	O	O
class	O	O
to	O	O
get	O	O
different	O	O
output	O	O
.	O	O
See	O	O
this	O	O
example	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276498	O	O
Assuming	O	O
all	O	O
the	O	O
streams	O	O
get	O	O
created	O	O
okay	O	O
,	O	O
yes	O	O
,	O	O
just	O	O
closing	O	O
bw	O	O
is	O	O
fine	O	O
with	O	O
those	O	O
stream	O	O
implementations	O	O
;	O	O
but	O	O
that	O	O
'	O	O
s	O	O
a	O	O
big	O	O
assumption	O	O
.	O	O
I	O	O
'	O	O
d	O	O
use	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
(	O	O
tutorial	O	O
)	O	O
so	O	O
that	O	O
any	O	O
issues	O	O
constructing	O	O
the	O	O
subsequent	O	O
streams	O	O
that	O	O
throw	O	O
exceptions	O	O
don	O	O
'	O	O
t	O	O
leave	O	O
the	O	O
previous	O	O
streams	O	O
hanging	O	O
,	O	O
and	O	O
so	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
rely	O	O
on	O	O
the	O	O
stream	O	O
implementation	O	O
having	O	O
the	O	O
call	O	O
to	O	O
close	O	O
the	O	O
underlying	O	O
stream	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
you	O	O
no	O	O
longer	O	O
call	O	O
close	O	O
at	O	O
all	O	O
.	O	O
Important	O	O
note	O	O
:	O	O
To	O	O
have	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
close	O	O
them	O	O
,	O	O
you	O	O
must	O	O
assign	O	O
the	O	O
streams	O	O
to	O	O
variables	O	O
as	O	O
you	O	O
open	O	O
them	O	O
,	O	O
you	O	O
cannot	O	O
use	O	O
nesting	O	O
.	O	O
If	O	O
you	O	O
use	O	O
nesting	O	O
,	O	O
an	O	O
exception	O	O
during	O	O
construction	O	O
of	O	O
one	O	O
of	O	O
the	O	O
later	O	O
streams	O	O
(	O	O
say	O	O
,	O	O
GZIPOutputStream	B-api_mention	B-api_mention
)	O	O
will	O	O
leave	O	O
any	O	O
stream	O	O
constructed	O	O
by	O	O
the	O	O
nested	O	O
calls	O	O
inside	O	O
it	O	O
open	O	O
.	O	O
From	O	O
JLS	O	O
§	O	O
14	O	O
.	O	O
20	O	O
.	O	O
3	O	O
:	O	O
#	O	O
blockquote	O	O
Note	O	O
the	O	O
word	O	O
"	O	O
variables	O	O
"	O	O
(	O	O
my	O	O
emphasis	O	O
)	O	O
.	O	O
E	O	O
.	O	O
g	O	O
.	O	O
,	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
.	O	O
.	O	O
.	O	O
because	O	O
an	O	O
exception	O	O
from	O	O
the	O	O
GZIPOutputStream	B-api_mention	B-api_mention
(	O	I-api_mention
OutputStream	B-api_mention	I-api_mention
)	O	I-api_mention
constructor	O	O
(	O	O
which	O	O
says	O	O
it	O	O
may	O	O
throw	O	O
IOException	B-api_mention	B-api_mention
,	O	O
and	O	O
writes	O	O
a	O	O
header	O	O
to	O	O
the	O	O
underlying	O	O
stream	O	O
)	O	O
would	O	O
leave	O	O
the	O	O
FileOutputStream	B-api_mention	B-api_mention
open	O	O
.	O	O
Since	O	O
some	O	O
resources	O	O
have	O	O
constructors	O	O
that	O	O
may	O	O
throw	O	O
and	O	O
others	O	O
don	O	O
'	O	O
t	O	O
,	O	O
it	O	O
'	O	O
s	O	O
a	O	O
good	O	O
habit	O	O
to	O	O
just	O	O
list	O	O
them	O	O
separately	O	O
.	O	O
We	O	O
can	O	O
double	O	O
-	O	O
check	O	O
our	O	O
interpretation	O	O
of	O	O
that	O	O
JLS	O	O
section	O	O
with	O	O
this	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
.	O	O
.	O	O
.	O	O
which	O	O
has	O	O
the	O	O
output	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
there	O	O
are	O	O
no	O	O
calls	O	O
to	O	O
close	O	O
there	O	O
.	O	O
If	O	O
we	O	O
fix	O	O
main	O	O
:	O	O
#	O	O
pre	O	O
then	O	O
we	O	O
get	O	O
the	O	O
appropriate	O	O
close	O	O
calls	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
Yes	O	O
,	O	O
two	O	O
calls	O	O
to	O	O
InnerMost	O	B-api_mention
#	O	O
close	O	O
is	O	O
correct	O	O
;	O	O
one	O	O
is	O	O
from	O	O
Middle	O	O
,	O	O
the	O	O
other	O	O
from	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
9481865	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
develop	O	O
a	O	O
system	O	O
where	O	O
there	O	O
are	O	O
different	O	O
nodes	O	O
that	O	O
are	O	O
run	O	O
on	O	O
different	O	O
system	O	O
or	O	O
on	O	O
different	O	O
ports	O	O
on	O	O
the	O	O
same	O	O
system	O	O
.	O	O
Now	O	O
all	O	O
the	O	O
nodes	O	O
create	O	O
a	O	O
Socket	B-api_mention	B-api_mention
with	O	O
a	O	O
target	O	O
IP	O	O
as	O	O
the	O	O
IP	O	O
of	O	O
a	O	O
special	O	O
node	O	O
known	O	O
as	O	O
a	O	O
bootstrapping	O	O
node	O	O
.	O	O
The	O	O
nodes	O	O
then	O	O
create	O	O
their	O	O
own	O	O
ServerSocket	B-api_mention	B-api_mention
and	O	O
start	O	O
listening	O	O
for	O	O
connections	O	O
.	O	O
The	O	O
bootstrapping	O	O
node	O	O
maintains	O	O
a	O	O
list	O	O
of	O	O
Nodes	O	O
and	O	O
returns	O	O
them	O	O
on	O	O
being	O	O
quired	O	O
.	O	O
Now	O	O
what	O	O
I	O	O
need	O	O
is	O	O
the	O	O
node	O	O
must	O	O
register	O	O
its	O	O
IP	O	O
to	O	O
the	O	O
bootstrapping	O	O
node	O	O
.	O	O
I	O	O
tried	O	O
using	O	O
cli	B-api_mention	O
.	I-api_mention	B-api_mention
getInetAddress	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
once	O	O
the	O	O
client	O	O
connects	O	O
to	O	O
the	O	O
ServerSocket	B-api_mention	B-api_mention
of	O	O
bootstrapping	O	O
node	O	O
but	O	O
that	O	O
didn	O	O
'	O	O
t	O	O
work	O	O
.	O	O
#	O	O
li	O	O
I	O	O
need	O	O
the	O	O
client	O	O
to	O	O
register	O	O
its	O	O
PPP	O	O
IP	O	O
if	O	O
available	O	O
;	O	O
#	O	O
li	O	O
Otherwise	O	O
the	O	O
LAN	O	O
IP	O	O
if	O	O
available	O	O
;	O	O
#	O	O
li	O	O
Otherwise	O	O
it	O	O
must	O	O
register	O	O
127	O	O
.	O	O
0	O	O
.	O	O
0	O	O
.	O	O
1	O	O
assuming	O	O
its	O	O
the	O	O
same	O	O
computer	O	O
.	O	O
Please	O	O
help	O	O
me	O	O
with	O	O
this	O	O
.	O	O
EDIT	O	O
using	O	O
the	O	O
code	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
My	O	O
PPP	O	O
Connection	O	O
IP	O	O
address	O	O
is	O	O
:	O	O
117	O	O
.	O	O
204	O	O
.	O	O
44	O	O
.	O	O
192	O	O
but	O	O
the	O	O
above	O	O
returns	O	O
me	O	O
192	O	O
.	O	O
168	O	O
.	O	O
1	O	O
.	O	O
2	O	O
EDIT2	O	O
I	O	O
am	O	O
using	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
am	O	O
able	O	O
to	O	O
get	O	O
all	O	O
the	O	O
IP	O	O
addresses	O	O
associated	O	O
all	O	O
NetworkInterface	B-api_mention	O
s	O	O
,	O	O
but	O	O
how	O	O
do	O	O
I	O	O
distinguish	O	O
them	O	O
?	O	O
?	O	O
This	O	O
is	O	O
the	O	O
output	O	O
I	O	O
am	O	O
getting	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
14376807	O	O
,	O	O
answer	O	O
-	O	O
22092971	O	O
For	O	O
those	O	O
looking	O	O
for	O	O
a	O	O
general	O	O
strategy	O	O
for	O	O
reading	O	O
and	O	O
writing	O	O
a	O	O
string	O	O
to	O	O
file	O	O
:	O	O
First	O	O
,	O	O
get	O	O
a	O	O
file	O	O
object	O	O
You	O	O
'	O	O
ll	O	O
need	O	O
the	O	O
storage	O	O
path	O	O
.	O	O
For	O	O
the	O	O
internal	O	O
storage	O	O
,	O	O
use	O	O
:	O	O
File	B-api_mention	B-api_mention
path	O	O
=	O	O
context	O	O
.	B-api_mention	B-api_mention
getFilesDir	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
the	O	O
external	O	O
storage	O	O
(	O	O
SD	O	O
card	O	O
)	O	O
,	O	O
use	O	O
:	O	O
File	B-api_mention	B-api_mention
path	O	O
=	O	O
context	O	O
.	B-api_mention	B-api_mention
getExternalFilesDir	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Then	O	O
create	O	O
your	O	O
file	O	O
object	O	O
:	O	O
File	B-api_mention	B-api_mention
file	O	O
=	O	O
new	O	O
File	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Write	O	O
a	O	O
string	O	O
to	O	O
the	O	O
file	O	O
#	O	O
pre	O	O
Or	O	O
with	O	O
Google	O	O
Guava	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
write	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Read	O	O
the	O	O
file	O	O
to	O	O
a	O	O
string	O	O
#	O	O
pre	O	O
Or	O	O
if	O	O
you	O	O
are	O	O
using	O	O
Google	O	O
Guava	O	O
String	B-api_mention	B-api_mention
contents	O	O
=	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
completeness	O	O
I	O	O
'	O	O
ll	O	O
mention	O	O
String	B-api_mention	B-api_mention
contents	O	O
=	O	O
new	O	O
Scanner	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
useDelimiter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	O
next	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
requires	O	O
no	O	O
libraries	O	O
,	O	O
but	O	O
benchmarks	O	O
50	O	O
%	O	O
-	O	O
400	O	O
%	O	O
slower	O	O
than	O	O
the	O	O
other	O	O
options	O	O
(	O	O
in	O	O
various	O	O
tests	O	O
on	O	O
my	O	O
Nexus	O	O
5	O	O
)	O	O
.	O	O
Notes	O	O
For	O	O
each	O	O
of	O	O
these	O	O
strategies	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
be	O	O
asked	O	O
to	O	O
catch	O	O
an	O	O
IOException	B-api_mention	B-api_mention
.	O	O
The	O	O
default	O	O
character	O	O
encoding	O	O
on	O	O
Android	O	O
is	O	O
UTF	O	O
-	O	O
8	O	O
.	O	O
If	O	O
you	O	O
are	O	O
using	O	O
external	O	O
storage	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
need	O	O
to	O	O
add	O	O
to	O	O
your	O	O
manifest	O	O
either	O	O
:	O	O
<	O	O
uses	O	O
-	O	O
permission	O	O
android	O	O
:	O	O
name	O	O
=	O	O
StringLiteral	O	O
/	O	O
>	O	O
or	O	O
<	O	O
uses	O	O
-	O	O
permission	O	O
android	O	O
:	O	O
name	O	O
=	O	O
StringLiteral	O	O
/	O	O
>	O	O
Write	O	O
permission	O	O
implies	O	O
read	O	O
permission	O	O
,	O	O
so	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
both	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
33375616	O	O
Most	O	O
of	O	O
these	O	O
answers	O	O
miss	O	O
the	O	O
big	O	O
picture	O	O
,	O	O
which	O	O
is	O	O
that	O	O
,	O	O
as	O	O
far	O	O
as	O	O
the	O	O
Java	O	O
language	O	O
is	O	O
concerned	O	O
,	O	O
there	O	O
is	O	O
no	O	O
more	O	O
difference	O	O
between	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
than	O	O
there	O	O
is	O	O
between	O	O
any	O	O
other	O	O
two	O	O
methods	O	O
.	O	O
They	O	O
'	O	O
re	O	O
both	O	O
just	O	O
methods	O	O
.	O	O
They	O	O
both	O	O
run	O	O
in	O	O
the	O	O
thread	O	O
that	O	O
called	O	O
them	O	O
.	O	O
They	O	O
both	O	O
do	O	O
whatever	O	O
they	O	O
were	O	O
coded	O	O
to	O	O
do	O	O
,	O	O
and	O	O
then	O	O
they	O	O
both	O	O
return	O	O
,	O	O
still	O	O
in	O	O
the	O	O
same	O	O
thread	O	O
,	O	O
to	O	O
their	O	O
callers	O	O
.	O	O
The	O	O
biggest	O	O
difference	O	O
is	O	O
that	O	O
most	O	O
of	O	O
the	O	O
code	O	O
for	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
native	O	O
code	O	O
while	O	O
,	O	O
in	O	O
most	O	O
cases	O	O
,	O	O
the	O	O
code	O	O
for	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
going	O	O
to	O	O
be	O	O
pure	O	O
Java	O	O
.	O	O
But	O	O
that	O	O
'	O	O
s	O	O
not	O	O
much	O	O
of	O	O
a	O	O
difference	O	O
.	O	O
Code	O	O
is	O	O
code	O	O
.	O	O
Native	O	O
code	O	O
is	O	O
harder	O	O
to	O	O
find	O	O
,	O	O
and	O	O
harder	O	O
to	O	O
understand	O	O
when	O	O
you	O	O
find	O	O
it	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
still	O	O
just	O	O
code	O	O
that	O	O
tells	O	O
the	O	O
computer	O	O
what	O	O
to	O	O
do	O	O
.	O	O
So	O	O
,	O	O
what	O	O
does	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
do	O	O
?	O	O
It	O	O
creates	O	O
a	O	O
new	O	O
native	O	O
thread	O	O
,	O	O
it	O	O
arranges	O	O
for	O	O
that	O	O
thread	O	O
to	O	O
call	O	O
t	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
then	O	O
it	O	O
tells	O	O
the	O	O
OS	O	O
to	O	O
let	O	O
the	O	O
new	O	O
thread	O	O
run	O	O
.	O	O
Then	O	O
it	O	O
returns	O	O
.	O	O
And	O	O
what	O	O
does	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
do	O	O
?	O	O
The	O	O
funny	O	O
thing	O	O
is	O	O
,	O	O
the	O	O
person	O	O
asking	O	O
this	O	O
question	O	O
is	O	O
the	O	O
person	O	O
who	O	O
wrote	O	O
it	O	O
.	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
whatever	O	O
you	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
,	O	O
the	O	O
developer	O	O
who	O	O
wrote	O	O
it	O	O
)	O	O
designed	O	O
it	O	O
to	O	O
do	O	O
.	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
method	O	O
that	O	O
the	O	O
library	O	O
provides	O	O
for	O	O
your	O	O
code	O	O
to	O	O
call	O	O
when	O	O
you	O	O
want	O	O
a	O	O
new	O	O
thread	O	O
.	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
method	O	O
that	O	O
you	O	O
provide	O	O
for	O	O
the	O	O
library	O	O
to	O	O
call	O	O
in	O	O
the	O	O
new	O	O
thread	O	O
.	O	O
Question	O	O
-	O	O
22725537	O	O
,	O	O
answer	O	O
-	O	O
36334855	O	O
As	O	O
my	O	O
previous	O	O
answer	O	O
appeared	O	O
not	O	O
to	O	O
be	O	O
very	O	O
popular	O	O
,	O	O
I	O	O
will	O	O
give	O	O
this	O	O
another	O	O
go	O	O
.	O	O
A	O	O
short	O	O
answer	O	O
:	O	O
You	O	O
are	O	O
mostly	O	O
on	O	O
a	O	O
right	O	O
track	O	O
.	O	O
The	O	O
shortest	O	O
code	O	O
to	O	O
get	O	O
to	O	O
your	O	O
desired	O	O
output	O	O
I	O	O
could	O	O
come	O	O
up	O	O
with	O	O
is	O	O
this	O	O
:	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
will	O	O
fit	O	O
all	O	O
your	O	O
requirements	O	O
:	O	O
#	O	O
li	O	O
It	O	O
will	O	O
find	O	O
first	O	O
response	O	O
that	O	O
resolves	O	O
to	O	O
a	O	O
nonempty	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
#	O	O
li	O	O
It	O	O
calls	O	O
this	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
resolve	I-api_mention	O
lazily	O	O
as	O	O
needed	O	O
#	O	O
li	O	O
this	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
resolve	I-api_mention	O
will	O	O
not	O	O
be	O	O
called	O	O
after	O	O
first	O	O
non	O	O
-	O	O
empty	O	O
result	O	O
#	O	O
li	O	O
It	O	O
will	O	O
return	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
Longer	O	O
answer	O	O
The	O	O
only	O	O
modification	O	O
compared	O	O
to	O	O
OP	O	O
initial	O	O
version	O	O
was	O	O
that	O	O
I	O	O
removed	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
before	O	O
call	O	O
to	O	O
.	B-api_mention	B-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
added	O	O
.	B-api_mention	B-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
the	O	O
last	O	O
call	O	O
in	O	O
the	O	O
chain	O	O
.	O	O
This	O	O
has	O	O
a	O	O
nice	O	O
effect	O	O
of	O	O
getting	O	O
rid	O	O
of	O	O
the	O	O
double	O	O
-	O	O
Optional	O	B-api_mention
,	O	O
whenever	O	O
stream	O	O
finds	O	O
an	O	O
actual	O	O
result	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
really	O	O
go	O	O
any	O	O
shorter	O	O
than	O	O
this	O	O
in	O	O
Java	O	O
.	O	O
The	O	O
alternative	O	O
snippet	O	O
of	O	O
code	O	O
using	O	O
the	O	O
more	O	O
conventional	O	O
for	O	O
loop	O	O
technique	O	O
is	O	O
going	O	O
to	O	O
be	O	O
about	O	O
same	O	O
number	O	O
of	O	O
lines	O	O
of	O	O
code	O	O
and	O	O
have	O	O
more	O	O
or	O	O
less	O	O
same	O	O
order	O	O
and	O	O
number	O	O
of	O	O
operations	O	O
you	O	O
need	O	O
to	O	O
perform	O	O
:	O	O
#	O	O
li	O	O
Calling	O	O
this	O	O
.	B-api_mention	O
resolve	I-api_mention	O
,	O	O
#	O	O
li	O	O
filtering	O	O
based	O	O
on	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isPresent	I-api_mention	I-api_mention
#	O	O
li	O	O
returning	O	O
the	O	O
result	O	O
and	O	O
#	O	O
li	O	O
some	O	O
way	O	O
of	O	O
dealing	O	O
with	O	O
negative	O	O
result	O	O
(	O	O
when	O	O
nothing	O	O
was	O	O
found	O	O
)	O	O
Just	O	O
to	O	O
prove	O	O
that	O	O
my	O	O
solution	O	O
works	O	O
as	O	O
advertised	O	O
,	O	O
I	O	O
wrote	O	O
a	O	O
small	O	O
test	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
It	O	O
does	O	O
have	O	O
few	O	O
extra	O	O
lines	O	O
for	O	O
debugging	O	O
and	O	O
verifying	O	O
that	O	O
only	O	O
as	O	O
many	O	O
calls	O	O
to	O	O
resolve	O	O
as	O	O
needed	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Executing	O	O
this	O	O
on	O	O
a	O	O
command	O	O
line	O	O
,	O	O
I	O	O
got	O	O
the	O	O
following	O	O
results	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
18410035	O	O
,	O	O
answer	O	O
-	O	O
37409771	O	O
In	O	O
Java	O	O
8	O	O
collection	O	O
classes	O	O
that	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
for	O	O
example	O	O
all	O	O
lists	O	O
)	O	O
now	O	O
have	O	O
forEach	B-api_mention	B-api_mention
method	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
above	O	O
example	O	O
makes	O	O
use	O	O
of	O	O
method	O	O
-	O	O
reference	O	O
introduced	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
We	O	O
can	O	O
also	O	O
iterate	O	O
over	O	O
a	O	O
list	O	O
using	O	O
Stream	B-api_mention	B-api_mention
as	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
advantage	O	O
with	O	O
later	O	O
option	O	O
is	O	O
that	O	O
we	O	O
can	O	O
also	O	O
make	O	O
use	O	O
of	O	O
parallel	O	O
streams	O	O
wherever	O	O
appropriate	O	O
.	O	O
If	O	O
the	O	O
objective	O	O
is	O	O
only	O	O
to	O	O
print	O	O
the	O	O
items	O	O
irrespective	O	O
of	O	O
the	O	O
order	O	O
then	O	O
we	O	O
can	O	O
use	O	O
parallel	O	O
stream	O	O
as	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
27845223	O	O
,	O	O
answer	O	O
-	O	O
27846417	O	O
Pavel	O	O
Horal	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
nice	O	O
.	O	O
As	O	O
he	O	O
says	O	O
,	O	O
the	O	O
word	O	O
"	O	O
file	O	O
"	O	O
has	O	O
totally	O	O
different	O	O
(	O	O
practically	O	O
unrelated	O	O
)	O	O
meanings	O	O
in	O	O
URL	B-api_mention	O
#	I-api_mention	O
getFile	I-api_mention	O
vs	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
io	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
File	I-api_mention	I-api_mention
-	O	O
may	O	O
be	O	O
that	O	O
'	O	O
s	O	O
part	O	O
of	O	O
the	O	O
confusion	O	O
.	O	O
Just	O	O
to	O	O
add	O	O
:	O	O
#	O	O
li	O	O
A	O	O
resource	O	O
in	O	O
Java	O	O
is	O	O
an	O	O
abstract	O	O
concept	O	O
,	O	O
a	O	O
source	O	O
of	O	O
data	O	O
that	O	O
can	O	O
be	O	O
read	O	O
.	O	O
The	O	O
location	O	O
(	O	O
or	O	O
address	O	O
)	O	O
of	O	O
a	O	O
resource	O	O
is	O	O
represented	O	O
in	O	O
Java	O	O
by	O	O
a	O	O
URL	B-api_mention	B-api_mention
object	O	O
.	O	O
#	O	O
li	O	O
A	O	O
resource	O	O
can	O	O
correspond	O	O
to	O	O
a	O	O
regular	O	O
file	O	O
in	O	O
the	O	O
local	O	O
filesystem	O	O
(	O	O
specifically	O	O
,	O	O
when	O	O
its	O	O
URL	B-api_mention	O
begins	O	O
with	O	O
file	O	O
:	O	O
/	O	O
/	O	O
)	O	O
.	O	O
But	O	O
a	O	O
resource	O	O
is	O	O
more	O	O
general	O	O
(	O	O
it	O	O
can	O	O
be	O	O
also	O	O
some	O	O
file	O	O
stored	O	O
in	O	O
a	O	O
jar	O	O
,	O	O
or	O	O
some	O	O
data	O	O
to	O	O
be	O	O
read	O	O
from	O	O
the	O	O
network	O	O
,	O	O
or	O	O
from	O	O
memory	O	O
,	O	O
or	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
And	O	O
it	O	O
'	O	O
s	O	O
also	O	O
more	O	O
limited	O	O
,	O	O
because	O	O
a	O	O
File	B-api_mention	B-api_mention
(	O	O
besides	O	O
being	O	O
other	O	O
things	O	O
than	O	O
a	O	O
regular	O	O
file	O	O
:	O	O
a	O	O
directory	O	O
,	O	O
a	O	O
link	O	O
)	O	O
can	O	O
also	O	O
be	O	O
created	O	O
and	O	O
writen	O	O
to	O	O
.	O	O
#	O	O
li	O	O
Remember	O	O
in	O	O
Java	O	O
a	O	O
File	B-api_mention	B-api_mention
object	O	O
does	O	O
not	O	O
really	O	O
represents	O	O
"	O	O
a	O	O
file	O	O
"	O	O
but	O	O
the	O	O
location	O	O
(	O	O
the	O	O
full	O	O
name	O	O
,	O	O
with	O	O
path	O	O
)	O	O
of	O	O
a	O	O
file	O	O
.	O	O
So	O	O
,	O	O
a	O	O
File	B-api_mention	B-api_mention
object	O	O
allows	O	O
you	O	O
to	O	O
locate	O	O
(	O	O
and	O	O
open	O	O
)	O	O
a	O	O
file	O	O
,	O	O
as	O	O
a	O	O
URL	B-api_mention	O
allows	O	O
you	O	O
to	O	O
access	O	O
(	O	O
and	O	O
open	O	O
)	O	O
a	O	O
resource	O	O
.	O	O
(	O	O
There	O	O
is	O	O
no	O	O
Resource	B-api_mention	O
class	O	O
in	O	O
Java	O	O
to	O	O
represent	O	O
a	O	O
resource	O	O
,	O	O
but	O	O
neither	O	O
there	O	O
is	O	O
one	O	O
to	O	O
represent	O	O
a	O	O
file	O	O
!	O	O
once	O	O
more	O	O
:	O	O
File	B-api_mention	O
is	O	O
not	O	O
a	O	O
file	O	O
,	O	O
it	O	O
'	O	O
s	O	O
the	O	O
path	O	O
of	O	O
a	O	O
file	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276497	O	O
No	O	O
,	O	O
the	O	O
topmost	O	O
level	O	O
Stream	B-api_mention	B-api_mention
or	O	O
reader	O	O
will	O	O
ensure	O	O
that	O	O
all	O	O
underlying	O	O
streams	O	O
/	O	O
readers	O	O
are	O	O
closed	O	O
.	O	O
Check	O	O
the	O	O
close	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
implementation	O	O
of	O	O
your	O	O
topmost	O	O
level	O	O
stream	O	O
.	O	O
Question	O	O
-	O	O
4576352	O	O
I	O	O
can	O	O
use	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Is	O	O
there	O	O
a	O	O
way	O	O
to	O	O
remove	O	O
all	O	O
occurrences	O	O
of	O	O
character	O	O
X	O	O
from	O	O
a	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
?	O	O
I	O	O
tried	O	O
this	O	O
and	O	O
is	O	O
not	O	O
what	O	O
I	O	O
want	O	O
:	O	O
str	O	O
.	B-api_mention	B-api_mention
replace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
replace	O	O
with	O	O
space	O	O
Question	O	O
-	O	O
31419029	O	O
,	O	O
answer	O	O
-	O	O
31419047	O	O
An	O	O
empty	O	O
HashMap	B-api_mention	B-api_mention
object	O	O
is	O	O
much	O	O
smaller	O	O
than	O	O
an	O	O
array	O	O
of	O	O
2000	O	O
Object	B-api_mention	B-api_mention
references	O	O
.	O	O
Even	O	O
though	O	O
you	O	O
pass	O	O
2000	O	O
to	O	O
the	O	O
initialCapacity	O	O
parameter	O	O
of	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
constructor	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
actually	O	O
creating	O	O
2000	O	O
spaces	O	O
for	O	O
objects	O	O
yet	O	O
.	O	O
Question	O	O
-	O	O
5554217	O	O
,	O	O
answer	O	O
-	O	O
17300003	O	O
Another	O	O
way	O	O
is	O	O
to	O	O
use	O	O
an	O	O
array	O	O
as	O	O
a	O	O
type	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
:	O	O
MyClass	O	O
[	O	O
]	O	O
mcArray	O	O
=	O	O
gson	O	O
.	B-api_mention	B-api_mention
fromJson	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
way	O	O
you	O	O
avoid	O	O
all	O	O
the	O	O
hassle	O	O
with	O	O
the	O	O
Type	B-api_mention	O
object	O	O
,	O	O
and	O	O
if	O	O
you	O	O
really	O	O
need	O	O
a	O	O
list	O	O
you	O	O
can	O	O
always	O	O
convert	O	O
the	O	O
array	O	O
to	O	O
a	O	O
list	O	O
by	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
mcList	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
IMHO	O	O
this	O	O
is	O	O
much	O	O
more	O	O
readable	O	O
.	O	O
And	O	O
to	O	O
make	O	O
it	O	O
be	O	O
an	O	O
actual	O	O
list	O	O
(	O	O
that	O	O
can	O	O
be	O	O
modified	O	O
,	O	O
see	O	O
limitations	O	O
of	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
then	O	O
just	O	O
do	O	O
the	O	O
following	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
mcList	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
22694884	O	O
,	O	O
answer	O	O
-	O	O
39385411	O	O
As	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
uses	O	O
a	O	O
throwing	O	O
merger	O	O
to	O	O
handle	O	O
multiple	O	O
entries	O	O
with	O	O
the	O	O
same	O	O
key	O	O
it	O	O
is	O	O
easy	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
will	O	O
get	O	O
a	O	O
IllegalStateException	B-api_mention	B-api_mention
for	O	O
duplicate	O	O
keys	O	O
.	O	O
But	O	O
at	O	O
the	O	O
end	O	O
I	O	O
am	O	O
not	O	O
sure	O	O
if	O	O
the	O	O
code	O	O
would	O	O
not	O	O
be	O	O
even	O	O
more	O	O
readable	O	O
using	O	O
an	O	O
if	O	O
.	O	O
Question	O	O
-	O	O
32714194	O	O
,	O	O
answer	O	O
-	O	O
32714222	O	O
+	O	O
is	O	O
implemented	O	O
in	O	O
java	O	O
compilers	O	O
.	O	O
The	O	O
compiler	O	O
replaces	O	O
String	B-api_mention	B-api_mention
+	O	O
String	B-api_mention	B-api_mention
with	O	O
either	O	O
compile	O	O
time	O	O
constants	O	O
or	O	O
StringBuilder	B-api_mention	B-api_mention
code	O	O
.	O	O
Note	O	O
that	O	O
this	O	O
applies	O	O
to	O	O
primitives	O	O
too	O	O
.	O	O
i	O	O
.	O	O
e	O	O
,	O	O
int	O	O
i	O	O
=	O	O
1	O	O
+	O	O
2	O	O
could	O	O
get	O	O
directly	O	O
replaced	O	O
to	O	O
int	O	O
i	O	O
=	O	O
3	O	O
during	O	O
compilation	O	O
itself	O	O
.	O	O
Question	O	O
-	O	O
18723596	O	O
,	O	O
answer	O	O
-	O	O
18723651	O	O
Println	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
uses	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
pre	O	O
Print	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
does	O	O
null	O	O
check	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
22740464	O	O
,	O	O
answer	O	O
-	O	O
37436520	O	O
Just	O	O
do	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
where	O	O
identity	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
static	O	O
import	O	O
of	O	O
Function	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Concatenating	O	O
multiple	O	O
streams	O	O
into	O	O
one	O	O
stream	O	O
is	O	O
the	O	O
same	O	O
as	O	O
flattening	O	O
a	O	O
stream	O	O
.	O	O
However	O	O
,	O	O
unfortunately	O	O
,	O	O
for	O	O
some	O	O
reason	O	O
there	O	O
is	O	O
no	O	O
flatten	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
on	O	O
Stream	B-api_mention	B-api_mention
,	O	O
so	O	O
you	O	O
have	O	O
to	O	O
use	O	O
flatMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
with	O	O
the	O	O
identity	O	O
function	O	O
.	O	O
Question	O	O
-	O	O
18092160	O	O
Why	O	O
were	O	O
181783497276652981	O	O
and	O	O
8682522807148012	O	O
chosen	O	O
in	O	O
Random	O	B-api_mention
.	O	O
java	O	O
?	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
relevant	O	O
source	O	O
code	O	O
from	O	O
Java	O	O
SE	O	O
JDK	O	O
1	O	O
.	O	O
7	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
,	O	O
invoking	O	O
new	O	O
Random	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
without	O	O
any	O	O
seed	O	O
parameter	O	O
takes	O	O
the	O	O
current	O	O
"	O	O
seed	O	O
uniquifier	O	O
"	O	O
and	O	O
XORs	O	O
it	O	O
with	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Then	O	O
it	O	O
uses	O	O
181783497276652981	O	O
to	O	O
create	O	O
another	O	O
seed	O	O
uniquifier	O	O
to	O	O
be	O	O
stored	O	O
for	O	O
the	O	O
next	O	O
time	O	O
new	O	O
Random	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
.	O	O
The	O	O
literals	O	O
181783497276652981L	O	O
and	O	O
8682522807148012L	O	O
are	O	O
not	O	O
placed	O	O
in	O	O
constants	O	O
,	O	O
but	O	O
they	O	O
don	O	O
'	O	O
t	O	O
appear	O	O
anywhere	O	O
else	O	O
.	O	O
At	O	O
first	O	O
the	O	O
comment	O	O
gives	O	O
me	O	O
an	O	O
easy	O	O
lead	O	O
.	O	O
Searching	O	O
online	O	O
for	O	O
that	O	O
article	O	O
yields	O	O
the	O	O
actual	O	O
article	O	O
.	O	O
8682522807148012	O	O
doesn	O	O
'	O	O
t	O	O
appear	O	O
in	O	O
the	O	O
paper	O	O
,	O	O
but	O	O
181783497276652981	O	O
does	O	O
appear	O	O
-	O	O
-	O	O
as	O	O
a	O	O
substring	O	O
of	O	O
another	O	O
number	O	O
,	O	O
1181783497276652981	O	O
,	O	O
which	O	O
is	O	O
181783497276652981	O	O
with	O	O
a	O	O
1	O	O
prepended	O	O
.	O	O
The	O	O
paper	O	O
claims	O	O
that	O	O
1181783497276652981	O	O
is	O	O
a	O	O
number	O	O
that	O	O
yields	O	O
good	O	O
"	O	O
merit	O	O
"	O	O
for	O	O
a	O	O
linear	O	O
congruential	O	O
generator	O	O
.	O	O
Was	O	O
this	O	O
number	O	O
simply	O	O
mis	O	O
-	O	O
copied	O	O
into	O	O
Java	O	O
?	O	O
Does	O	O
181783497276652981	O	O
have	O	O
an	O	O
acceptable	O	O
merit	O	O
?	O	O
And	O	O
why	O	O
was	O	O
8682522807148012	O	O
chosen	O	O
?	O	O
Searching	O	O
online	O	O
for	O	O
either	O	O
number	O	O
yields	O	O
no	O	O
explanation	O	O
,	O	O
only	O	O
this	O	O
page	O	O
that	O	O
also	O	O
notices	O	O
the	O	O
dropped	O	O
1	O	O
in	O	O
front	O	O
of	O	O
181783497276652981	O	O
.	O	O
Could	O	O
other	O	O
numbers	O	O
have	O	O
been	O	O
chosen	O	O
that	O	O
would	O	O
have	O	O
worked	O	O
as	O	O
well	O	O
as	O	O
these	O	O
two	O	O
numbers	O	O
?	O	O
Why	O	O
or	O	O
why	O	O
not	O	O
?	O	O
Question	O	O
-	O	O
21242110	O	O
,	O	O
answer	O	O
-	O	O
27378709	O	O
Better	O	O
way	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
Advantages	O	O
of	O	O
this	O	O
version	O	O
:	O	O
#	O	O
li	O	O
works	O	O
regardless	O	O
the	O	O
input	O	O
is	O	O
an	O	O
instance	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
or	O	O
it	O	O
'	O	O
s	O	O
subclass	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
(	O	O
unlike	O	O
@	O	O
JodaStephen	O	O
'	O	O
s	O	O
way	O	O
)	O	O
.	O	O
This	O	O
is	O	O
common	O	O
with	O	O
JDBC	O	O
originated	O	O
data	O	O
.	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toInstant	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
always	O	O
throws	O	O
an	O	O
exception	O	O
.	O	O
#	O	O
li	O	O
it	O	O
'	O	O
s	O	O
the	O	O
same	O	O
for	O	O
JDK8	O	O
and	O	O
JDK7	O	O
with	O	O
JSR	O	O
-	O	O
310	O	O
backport	O	O
I	O	O
personally	O	O
use	O	O
an	O	O
utility	O	O
class	O	O
(	O	O
but	O	O
this	O	O
is	O	O
not	O	O
backport	O	O
-	O	O
compatible	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
asLocalDate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
here	O	O
is	O	O
null	O	O
-	O	O
safe	O	O
,	O	O
uses	O	O
toLocalDate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
if	O	O
input	O	O
is	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
(	O	O
it	O	O
may	O	O
be	O	O
overriden	O	O
by	O	O
the	O	O
JDBC	O	O
driver	O	O
to	O	O
avoid	O	O
timezone	O	O
problems	O	O
or	O	O
unnecessary	O	O
calculations	O	O
)	O	O
,	O	O
otherwise	O	O
uses	O	O
the	O	O
abovementioned	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
6684665	O	O
,	O	O
answer	O	O
-	O	O
6684852	O	O
What	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
is	O	O
create	O	O
a	O	O
string	O	O
representation	O	O
of	O	O
each	O	O
individual	O	O
byte	O	O
in	O	O
your	O	O
byteArray	B-api_mention	O
.	O	O
Please	O	O
check	O	O
the	O	O
API	O	O
documentation	O	O
Arrays	B-api_mention	B-api_mention
API	O	O
To	O	O
convert	O	O
your	O	O
response	O	O
string	O	O
back	O	O
to	O	O
the	O	O
original	O	O
byte	O	O
array	O	O
,	O	O
you	O	O
have	O	O
to	O	O
use	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
something	O	O
and	O	O
convert	O	O
it	O	O
into	O	O
a	O	O
collection	O	O
and	O	O
then	O	O
convert	O	O
each	O	O
individual	O	O
item	O	O
in	O	O
there	O	O
to	O	O
a	O	O
byte	O	O
to	O	O
recreate	O	O
your	O	O
byte	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
9481865	O	O
,	O	O
answer	O	O
-	O	O
9481939	O	O
You	O	O
can	O	O
use	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
net	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
InetAddress	I-api_mention	I-api_mention
API	O	O
.	O	O
Try	O	O
this	O	O
:	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostAddress	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846963	O	O
#	O	O
blockquote	O	O
For	O	O
the	O	O
same	O	O
reason	O	O
you	O	O
'	O	O
d	O	O
use	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
at	O	O
some	O	O
point	O	O
.	O	O
You	O	O
want	O	O
to	O	O
return	O	O
a	O	O
Map	B-api_mention	B-api_mention
instance	O	O
that	O	O
throws	O	O
an	O	O
exception	O	O
if	O	O
the	O	O
user	O	O
attempts	O	O
to	O	O
modify	O	O
it	O	O
.	O	O
It	O	O
'	O	O
s	O	O
just	O	O
a	O	O
special	O	O
case	O	O
:	O	O
the	O	O
empty	O	O
Map	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
18723596	O	O
,	O	O
answer	O	O
-	O	O
18723704	O	O
You	O	O
can	O	O
cast	O	O
null	O	O
to	O	O
any	O	O
reference	O	O
type	O	O
.	O	O
You	O	O
can	O	O
also	O	O
call	O	O
methods	O	O
which	O	O
handle	O	O
a	O	O
null	O	O
as	O	O
an	O	O
argument	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
,	O	O
but	O	O
you	O	O
cannot	O	O
reference	O	O
a	O	O
null	O	O
value	O	O
and	O	O
call	O	O
a	O	O
method	O	O
on	O	O
it	O	O
.	O	O
BTW	O	O
There	O	O
is	O	O
a	O	O
tricky	O	O
situation	O	O
where	O	O
it	O	O
appears	O	O
you	O	O
can	O	O
call	O	O
static	O	O
methods	O	O
on	O	O
null	O	O
values	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6470651	O	O
,	O	O
answer	O	O
-	O	O
6470695	O	O
A	O	O
simple	O	O
thing	O	O
to	O	O
do	O	O
is	O	O
to	O	O
use	O	O
a	O	O
HashSet	B-api_mention	B-api_mention
with	O	O
an	O	O
incorrect	O	O
(	O	O
or	O	O
non	O	O
-	O	O
existent	O	O
)	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
then	O	O
keep	O	O
adding	O	O
"	O	O
duplicates	O	O
"	O	O
.	O	O
Instead	O	O
of	O	O
ignoring	O	O
duplicates	O	O
as	O	O
it	O	O
should	O	O
,	O	O
the	O	O
set	O	O
will	O	O
only	O	O
ever	O	O
grow	O	O
and	O	O
you	O	O
won	O	O
'	O	O
t	O	O
be	O	O
able	O	O
to	O	O
remove	O	O
them	O	O
.	O	O
If	O	O
you	O	O
want	O	O
these	O	O
bad	O	O
keys	O	O
/	O	O
elements	O	O
to	O	O
hang	O	O
around	O	O
you	O	O
can	O	O
use	O	O
a	O	O
static	O	O
field	O	O
like	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
22725537	O	O
,	O	O
answer	O	O
-	O	O
27215810	O	O
A	O	O
slightly	O	O
shorter	O	O
version	O	O
using	O	O
reduce	B-api_mention	O
:	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reduce	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
could	O	O
also	O	O
move	O	O
the	O	O
reduce	B-api_mention	O
function	O	O
to	O	O
a	O	O
static	O	O
utility	O	O
method	O	O
and	O	O
then	O	O
it	O	O
becomes	O	O
:	O	O
.	B-api_mention	B-api_mention
reduce	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
14833008	O	O
,	O	O
answer	O	O
-	O	O
14833098	O	O
"	O	O
.	O	O
"	O	O
is	O	O
a	O	O
special	O	O
character	O	O
in	O	O
java	O	O
.	O	O
You	O	O
have	O	O
to	O	O
use	O	O
"	O	O
\	O	O
.	O	O
"	O	O
to	O	O
escape	O	O
this	O	O
character	O	O
:	O	O
final	O	O
String	B-api_mention	B-api_mention
extensionRemoved	O	O
=	O	O
filename	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
[	O	O
0	O	O
]	O	O
;	O	O
I	O	O
hope	O	O
this	O	O
helps	O	O
Question	O	O
-	O	O
26684562	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
what	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
and	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
methods	O	O
?	O	O
Question	O	O
-	O	O
7693324	O	O
I	O	O
got	O	O
a	O	O
simple	O	O
question	O	O
in	O	O
Java	O	O
:	O	O
How	O	O
can	O	O
I	O	O
convert	O	O
a	O	O
String	B-api_mention	B-api_mention
that	O	O
was	O	O
obtained	O	O
by	O	O
Long	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
long	O	O
?	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29502668	O	O
#	O	O
blockquote	O	O
It	O	O
'	O	O
s	O	O
checking	O	O
simple	O	O
equality	O	O
(	O	O
likely	O	O
for	O	O
the	O	O
purpose	O	O
of	O	O
a	O	O
micro	O	O
-	O	O
optimization	O	O
,	O	O
but	O	O
more	O	O
on	O	O
that	O	O
later	O	O
)	O	O
.	O	O
The	O	O
unusual	O	O
casting	O	O
is	O	O
necessary	O	O
because	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	O	O
the	O	O
type	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	B-api_mention
class	I-api_mention	I-api_mention
)	O	O
and	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
are	O	O
incomparable	O	O
types	O	O
.	O	O
Basically	O	O
,	O	O
for	O	O
an	O	O
equality	O	O
comparison	O	O
with	O	O
=	O	O
=	O	O
to	O	O
compile	O	O
,	O	O
one	O	O
of	O	O
the	O	O
sides	O	O
has	O	O
to	O	O
be	O	O
a	O	O
subtype	O	O
or	O	O
supertype	O	O
of	O	O
the	O	O
other	O	O
.	O	O
I	O	O
.	O	O
e	O	O
.	O	O
we	O	O
can	O	O
'	O	O
t	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
rules	O	O
for	O	O
generic	O	O
types	O	O
are	O	O
a	O	O
bit	O	O
more	O	O
complicated	O	O
and	O	O
there	O	O
are	O	O
a	O	O
few	O	O
cases	O	O
where	O	O
a	O	O
comparison	O	O
doesn	O	O
'	O	O
t	O	O
compile	O	O
,	O	O
but	O	O
it	O	O
may	O	O
still	O	O
evaluate	O	O
to	O	O
true	O	O
.	O	O
The	O	O
reason	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
not	O	O
a	O	O
supertype	O	O
of	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
despite	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
being	O	O
a	O	O
supertype	O	O
of	O	O
all	O	O
object	O	O
array	O	O
types	O	O
,	O	O
is	O	O
that	O	O
Java	O	O
generics	O	O
are	O	O
invariant	O	O
without	O	O
the	O	O
presence	O	O
of	O	O
a	O	O
wildcard	O	O
.	O	O
Another	O	O
way	O	O
to	O	O
do	O	O
the	O	O
comparison	O	O
would	O	O
be	O	O
:	O	O
(	O	O
newType	O	O
=	O	O
=	O	O
(	O	O
Class	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	B-api_mention
class	I-api_mention	I-api_mention
)	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
.	O	O
.	O	O
.	O	O
]	O	O
creates	O	O
an	O	O
array	O	O
the	O	O
normal	O	O
way	O	O
,	O	O
of	O	O
a	O	O
type	O	O
that	O	O
is	O	O
statically	O	O
known	O	O
.	O	O
Remember	O	O
,	O	O
the	O	O
code	O	O
has	O	O
just	O	O
checked	O	O
that	O	O
T	O	O
[	O	O
]	O	O
is	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
#	O	O
li	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
uses	O	O
reflection	O	O
to	O	O
dynamically	O	O
create	O	O
an	O	O
array	O	O
of	O	O
the	O	O
Class	O	B-api_mention
type	O	O
passed	O	O
in	O	O
.	O	O
#	O	O
blockquote	O	O
An	O	O
operation	O	O
using	O	O
reflection	O	O
is	O	O
generally	O	O
slower	O	O
than	O	O
its	O	O
non	O	O
-	O	O
reflective	O	O
counterpart	O	O
.	O	O
The	O	O
reflection	O	O
tutorial	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
Java	O	O
SE	O	O
is	O	O
filled	O	O
with	O	O
micro	O	O
-	O	O
optimization	O	O
like	O	O
this	O	O
.	O	O
The	O	O
writers	O	O
of	O	O
SE	O	O
try	O	O
to	O	O
squeeze	O	O
everything	O	O
they	O	O
can	O	O
out	O	O
of	O	O
it	O	O
.	O	O
But	O	O
I	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
worried	O	O
about	O	O
a	O	O
performance	O	O
hit	O	O
in	O	O
this	O	O
case	O	O
:	O	O
newInstance	O	O
and	O	O
copyOf	B-api_mention	B-api_mention
are	O	O
HotSpot	O	O
intrinsics	O	O
.	O	O
This	O	O
means	O	O
that	O	O
ideally	O	O
calls	O	O
to	O	O
these	O	O
methods	O	O
get	O	O
replaced	O	O
with	O	O
machine	O	O
-	O	O
specific	O	O
assembly	O	O
.	O	O
Anecdotally	O	O
,	O	O
I	O	O
ran	O	O
some	O	O
tests	O	O
and	O	O
found	O	O
the	O	O
difference	O	O
between	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
.	O	O
.	O	O
.	O	O
]	O	O
and	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
be	O	O
negligible	O	O
.	O	O
The	O	O
code	O	O
in	O	O
the	O	O
question	O	O
is	O	O
probably	O	O
a	O	O
relic	O	O
,	O	O
although	O	O
it	O	O
may	O	O
still	O	O
be	O	O
useful	O	O
on	O	O
less	O	O
well	O	O
-	O	O
equipped	O	O
JVMs	O	O
.	O	O
Reflection	O	O
can	O	O
also	O	O
be	O	O
disabled	O	O
in	O	O
certain	O	O
contexts	O	O
with	O	O
strict	O	O
security	O	O
(	O	O
such	O	O
as	O	O
an	O	O
applet	O	O
)	O	O
,	O	O
but	O	O
not	O	O
typically	O	O
for	O	O
a	O	O
normal	O	O
desktop	O	O
application	O	O
.	O	O
#	O	O
blockquote	O	O
In	O	O
general	O	O
,	O	O
you	O	O
will	O	O
probably	O	O
never	O	O
use	O	O
this	O	O
overload	O	O
.	O	O
This	O	O
overload	O	O
is	O	O
only	O	O
useful	O	O
if	O	O
you	O	O
want	O	O
to	O	O
change	O	O
the	O	O
type	O	O
of	O	O
the	O	O
array	O	O
.	O	O
#	O	O
li	O	O
Widening	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
Narrowing	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
'	O	O
s	O	O
more	O	O
typical	O	O
to	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	O
T	I-api_mention	O
[	I-api_mention	O
]	I-api_mention	O
,	I-api_mention	O
int	I-api_mention	O
)	I-api_mention	O
.	O	O
Question	O	O
-	O	O
22409102	O	O
,	O	O
answer	O	O
-	O	O
22409270	O	O
You	O	O
can	O	O
use	O	O
Float	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
floatToIntBits	I-api_mention	I-api_mention
to	O	O
convert	O	O
it	O	O
to	O	O
an	O	O
int	O	O
and	O	O
look	O	O
at	O	O
the	O	O
bit	O	O
pattern	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
16232833	O	O
I	O	O
'	O	O
m	O	O
using	O	O
Spring	O	O
MVC	O	O
for	O	O
a	O	O
simple	O	O
JSON	O	O
API	O	O
,	O	O
with	O	O
@	O	O
ResponseBody	O	O
based	O	O
approach	O	O
like	O	O
the	O	O
following	O	O
.	O	O
(	O	O
I	O	O
already	O	O
have	O	O
a	O	O
service	O	O
layer	O	O
producing	O	O
JSON	O	O
directly	O	O
.	O	O
)	O	O
#	O	O
pre	O	O
Question	O	O
is	O	O
,	O	O
in	O	O
the	O	O
given	O	O
scenario	O	O
,	O	O
what	O	O
is	O	O
the	O	O
simplest	O	O
,	O	O
cleanest	O	O
way	O	O
to	O	O
respond	O	O
with	O	O
a	O	O
HTTP	O	O
400	O	O
error	O	O
?	O	O
I	O	O
did	O	O
come	O	O
across	O	O
approaches	O	O
like	O	O
:	O	O
return	O	O
new	O	O
ResponseEntity	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
.	O	O
.	O	O
but	O	O
I	O	O
can	O	O
'	O	O
t	O	O
use	O	O
it	O	O
here	O	O
since	O	O
my	O	O
method	O	O
'	O	O
s	O	O
return	O	O
type	O	O
is	O	O
String	B-api_mention	B-api_mention
,	O	O
not	O	O
ResponseEntity	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32175175	O	O
Note	O	O
that	O	O
a	O	O
.	O	O
b	O	O
and	O	O
c	O	O
are	O	O
instances	O	O
of	O	O
primitive	O	O
wrapper	O	O
classes	O	O
(	O	O
such	O	O
as	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
,	O	O
etc	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
These	O	O
classes	O	O
are	O	O
final	O	O
and	O	O
cannot	O	O
be	O	O
extended	O	O
,	O	O
so	O	O
you	O	O
can	O	O
'	O	O
t	O	O
override	O	O
their	O	O
equals	O	O
implementation	O	O
.	O	O
Therefore	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
always	O	O
return	O	O
true	O	O
,	O	O
since	O	O
those	O	O
classes	O	O
implement	O	O
equals	O	B-api_mention
properly	O	O
.	O	O
Question	O	O
-	O	O
6470651	O	O
,	O	O
answer	O	O
-	O	O
6548647	O	O
Static	O	O
field	O	O
holding	O	O
object	O	O
reference	O	O
[	O	O
esp	O	O
final	O	O
field	O	O
]	O	O
#	O	O
pre	O	O
Calling	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
lengthy	O	O
String	B-api_mention	B-api_mention
#	O	O
pre	O	O
(	O	O
Unclosed	O	O
)	O	O
open	O	O
streams	O	O
(	O	O
file	O	O
,	O	O
network	O	O
etc	O	O
.	O	O
.	O	O
.	O	O
)	O	O
#	O	O
pre	O	O
Unclosed	O	O
connections	O	O
#	O	O
pre	O	O
Areas	O	O
that	O	O
are	O	O
unreachable	O	O
from	O	O
JVM	O	O
'	O	O
s	O	O
garbage	O	O
collector	O	O
,	O	O
such	O	O
as	O	O
memory	O	O
allocated	O	O
through	O	O
native	O	O
methods	O	O
In	O	O
web	O	O
applications	O	O
,	O	O
some	O	O
objects	O	O
are	O	O
stored	O	O
in	O	O
application	O	O
scope	O	O
until	O	O
the	O	O
application	O	O
is	O	O
explicitly	O	O
stopped	O	O
or	O	O
removed	O	O
.	O	B-api_mention
getServletContext	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Incorrect	O	O
or	O	O
inappropriate	O	O
JVM	O	O
options	O	O
,	O	O
such	O	O
as	O	O
the	O	O
noclassgc	O	O
option	O	O
on	O	O
IBM	O	O
JDK	O	O
that	O	O
prevents	O	O
unused	O	O
class	O	O
garbage	O	O
collection	O	O
See	O	O
IBM	O	O
jdk	O	O
settings	O	O
.	O	O
Question	O	O
-	O	O
29140402	O	O
I	O	O
have	O	O
a	O	O
class	O	O
defined	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
tried	O	O
to	O	O
print	O	O
an	O	O
instance	O	O
of	O	O
my	O	O
class	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
but	O	O
I	O	O
got	O	O
the	O	O
following	O	O
output	O	O
:	O	O
com	O	O
.	O	O
foo	O	O
.	O	O
Person	O	O
@	O	O
2f92e0f4	O	O
.	O	O
A	O	O
similar	O	O
thing	O	O
happened	O	O
when	O	O
I	O	O
tried	O	O
to	O	O
print	O	O
an	O	O
array	O	O
of	O	O
Person	O	O
objects	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
got	O	O
the	O	O
output	O	O
:	O	O
[	O	O
Lcom	O	O
.	O	O
foo	O	O
.	O	O
Person	O	O
;	O	O
@	O	O
28a418fc	O	O
What	O	O
does	O	O
this	O	O
output	O	O
mean	O	O
?	O	O
How	O	O
do	O	O
I	O	O
change	O	O
this	O	O
output	O	O
so	O	O
it	O	O
contains	O	O
the	O	O
name	O	O
of	O	O
my	O	O
person	O	O
?	O	O
And	O	O
how	O	O
do	O	O
I	O	O
print	O	O
collections	O	O
of	O	O
my	O	O
objects	O	O
?	O	O
Note	O	O
:	O	O
this	O	O
is	O	O
intended	O	O
as	O	O
a	O	O
canonical	O	O
Q	O	O
&	O	O
A	O	O
about	O	O
this	O	O
subject	O	O
.	O	O
Question	O	O
-	O	O
24603186	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
the	O	O
Collection	B-api_mention	B-api_mention
interface	O	O
was	O	O
extended	O	O
with	O	O
two	O	O
methods	O	O
that	O	O
return	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
:	O	I-api_mention
stream	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
returns	O	O
a	O	O
sequential	O	O
stream	O	O
,	O	O
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
returns	O	O
a	O	O
possibly	O	O
-	O	O
parallel	O	O
stream	O	O
.	O	O
Stream	B-api_mention	B-api_mention
itself	O	O
also	O	O
has	O	O
a	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
that	O	O
returns	O	O
an	O	O
equivalent	O	O
parallel	O	O
stream	O	O
(	O	O
either	O	O
mutating	O	O
the	O	O
current	O	O
stream	O	O
to	O	O
be	O	O
parallel	O	O
or	O	O
creating	O	O
a	O	O
new	O	O
stream	O	O
)	O	O
.	O	O
The	O	O
duplication	O	O
has	O	O
obvious	O	O
disadvantages	O	O
:	O	O
#	O	O
li	O	O
It	O	O
'	O	O
s	O	O
confusing	O	O
.	O	O
A	O	O
question	O	O
asks	O	O
whether	O	O
calling	O	O
both	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
necessary	O	O
to	O	O
be	O	O
sure	O	O
the	O	O
stream	O	O
is	O	O
parallel	O	O
,	O	O
given	O	O
that	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
return	O	O
a	O	O
sequential	O	O
stream	O	O
.	O	O
Why	O	O
does	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
exist	O	O
if	O	O
it	O	O
can	O	O
'	O	O
t	O	O
make	O	O
a	O	O
guarantee	O	O
?	O	O
The	O	O
other	O	O
way	O	O
around	O	O
is	O	O
also	O	O
confusing	O	O
-	O	O
-	O	O
if	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
a	O	O
sequential	O	O
stream	O	O
,	O	O
there	O	O
'	O	O
s	O	O
probably	O	O
a	O	O
reason	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
an	O	O
inherently	O	O
sequential	O	O
data	O	O
structure	O	O
for	O	O
which	O	O
parallel	O	O
streams	O	O
are	O	O
a	O	O
performance	O	O
trap	O	O
)	O	O
;	O	O
what	O	O
should	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
do	O	O
for	O	O
such	O	O
a	O	O
stream	O	O
?	O	O
(	O	O
UnsupportedOperationException	B-api_mention	B-api_mention
is	O	O
not	O	O
allowed	O	O
by	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
'	O	O
s	O	O
specification	O	O
.	O	O
)	O	O
#	O	O
li	O	O
Adding	O	O
methods	O	O
to	O	O
an	O	O
interface	O	O
risks	O	O
conflicts	O	O
if	O	O
an	O	O
existing	O	O
implementation	O	O
has	O	O
a	O	O
similarly	O	O
-	O	O
named	O	O
method	O	O
with	O	O
an	O	O
incompatible	O	O
return	O	O
type	O	O
.	O	O
Adding	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
addition	O	O
to	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
doubles	O	O
the	O	O
risk	O	O
for	O	O
little	O	O
gain	O	O
.	O	O
(	O	O
Note	O	O
that	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
at	O	O
one	O	O
point	O	O
just	O	O
named	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
though	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
if	O	O
it	O	O
was	O	O
renamed	O	O
to	O	O
avoid	O	O
name	O	O
clashes	O	O
or	O	O
for	O	O
another	O	O
reason	O	O
.	O	O
)	O	O
Why	O	O
does	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
exist	O	O
when	O	O
calling	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
the	O	O
same	O	O
thing	O	O
?	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14513598	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
is	O	O
not	O	O
much	O	O
different	O	O
,	O	O
a	O	O
basic	O	O
LCG	O	O
described	O	O
by	O	O
Knuth	O	O
.	O	O
However	O	O
it	O	O
has	O	O
main	O	O
2	O	O
main	O	O
advantages	O	O
/	O	O
differences	O	O
:	O	O
#	O	O
li	O	O
thread	O	O
safe	O	O
-	O	O
each	O	O
update	O	O
is	O	O
a	O	O
CAS	O	O
which	O	O
is	O	O
more	O	O
expensive	O	O
than	O	O
a	O	O
simple	O	O
write	O	O
and	O	O
needs	O	O
a	O	O
branch	O	O
(	O	O
even	O	O
if	O	O
perfectly	O	O
predicted	O	O
single	O	O
threaded	O	O
)	O	O
.	O	O
Depending	O	O
on	O	O
the	O	O
CPU	O	O
it	O	O
could	O	O
be	O	O
significant	O	O
difference	O	O
.	O	O
#	O	O
li	O	O
undisclosed	O	O
internal	O	O
state	O	O
-	O	O
this	O	O
is	O	O
very	O	O
important	O	O
for	O	O
anything	O	O
non	O	O
-	O	O
trivial	O	O
.	O	O
You	O	O
wish	O	O
the	O	O
random	O	O
numbers	O	O
not	O	O
to	O	O
be	O	O
predictable	O	O
.	O	O
Below	O	O
it	O	O
'	O	O
s	O	O
the	O	O
main	O	O
routine	O	O
generating	O	O
'	O	O
random	O	O
'	O	O
integers	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
.	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
remove	O	O
the	O	O
AtomicLong	B-api_mention	B-api_mention
and	O	O
the	O	O
undisclosed	O	O
sate	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
using	O	O
all	O	O
bits	O	O
of	O	O
the	O	O
long	O	O
)	O	O
,	O	O
you	O	O
'	O	O
d	O	O
get	O	O
more	O	O
performance	O	O
than	O	O
the	O	O
double	O	O
multiplication	O	O
/	O	O
modulo	O	O
.	O	O
Last	O	O
note	O	O
:	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
should	O	O
not	O	O
be	O	O
used	O	O
for	O	O
anything	O	O
but	O	O
simple	O	O
tests	O	O
,	O	O
it	O	O
'	O	O
s	O	O
prone	O	O
to	O	O
contention	O	O
and	O	O
if	O	O
you	O	O
have	O	O
even	O	O
a	O	O
couple	O	O
of	O	O
threads	O	O
calling	O	O
it	O	O
concurrently	O	O
the	O	O
performance	O	O
degrades	O	O
.	O	O
One	O	O
little	O	O
known	O	O
historical	O	O
feature	O	O
of	O	O
it	O	O
is	O	O
the	O	O
introduction	O	O
of	O	O
CAS	O	O
in	O	O
java	O	O
-	O	O
to	O	O
beat	O	O
an	O	O
infamous	O	O
benchmark	O	O
(	O	O
first	O	O
by	O	O
IBM	O	O
via	O	O
intrinsics	O	O
and	O	O
then	O	O
Sun	O	O
made	O	O
"	O	O
CAS	O	O
from	O	O
Java	O	O
"	O	O
)	O	O
Question	O	O
-	O	O
5192512	O	O
,	O	O
answer	O	O
-	O	O
30190425	O	O
I	O	O
'	O	O
ll	O	O
vote	O	O
for	O	O
sb	O	O
.	B-api_mention	B-api_mention
setLength	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
not	O	O
only	O	O
because	O	O
it	O	O
'	O	O
s	O	O
one	O	O
function	O	O
call	O	O
but	O	O
because	O	O
it	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
copy	O	O
the	O	O
array	O	O
into	O	O
another	O	O
array	O	O
like	O	O
sb	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
,	O	O
It	O	O
just	O	O
fill	O	O
the	O	O
remaining	O	O
characters	O	O
to	O	O
be	O	O
0	O	O
and	O	O
set	O	O
the	O	O
length	O	O
variable	O	O
to	O	O
the	O	O
new	O	O
length	O	O
.	O	O
You	O	O
can	O	O
take	O	O
a	O	O
look	O	O
into	O	O
their	O	O
implementation	O	O
to	O	O
validate	O	O
my	O	O
point	O	O
from	O	O
here	O	O
at	O	O
setLength	B-api_mention	B-api_mention
function	O	O
and	O	O
delete0	O	O
function	O	O
.	O	O
Question	O	O
-	O	O
18571223	O	O
,	O	O
answer	O	O
-	O	O
20262456	O	O
You	O	O
might	O	O
wanna	O	O
try	O	O
return	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
22725537	O	O
,	O	O
answer	O	O
-	O	O
22735184	O	O
You	O	O
cannot	O	O
do	O	O
it	O	O
more	O	O
concise	O	O
as	O	O
you	O	O
are	O	O
already	O	O
doing	O	O
.	O	O
You	O	O
claim	O	O
that	O	O
you	O	O
do	O	O
not	O	O
want	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
has	O	O
been	O	O
resolved	O	O
by	O	O
the	O	O
method	O	O
@	O	O
StuartMarks	O	O
describes	O	O
,	O	O
however	O	O
as	O	O
a	O	O
result	O	O
you	O	O
now	O	O
map	O	O
it	O	O
to	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
so	O	O
now	O	O
you	O	O
need	O	O
to	O	O
use	O	O
.	B-api_mention	B-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
end	O	O
.	O	O
So	O	O
it	O	O
still	O	O
consists	O	O
of	O	O
two	O	O
statements	O	O
and	O	O
you	O	O
can	O	O
now	O	O
get	O	O
exceptions	O	O
with	O	O
the	O	O
new	O	O
method	O	O
!	O	O
Because	O	O
,	O	O
what	O	O
if	O	O
every	O	O
optional	O	O
is	O	O
empty	O	O
?	O	O
Then	O	O
the	O	O
findFirst	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
an	O	O
empty	O	O
optional	O	O
and	O	O
your	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
fail	O	O
!	O	O
So	O	O
what	O	O
you	O	O
have	O	O
:	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
is	O	O
actually	O	O
the	O	O
best	O	O
way	O	O
to	O	O
accomplish	O	O
what	O	O
you	O	O
want	O	O
,	O	O
and	O	O
that	O	O
is	O	O
you	O	O
want	O	O
to	O	O
save	O	O
the	O	O
result	O	O
as	O	O
a	O	O
T	B-api_mention	O
,	O	O
not	O	O
as	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
I	O	O
took	O	O
the	O	O
liberty	O	O
of	O	O
creating	O	O
a	O	O
CustomOptional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
class	O	O
that	O	O
wraps	O	O
the	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
and	O	O
provides	O	O
an	O	O
extra	O	O
method	O	O
,	O	O
flatStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
that	O	O
you	O	O
cannot	O	O
extend	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
You	O	O
will	O	O
see	O	O
that	O	O
I	O	O
added	O	O
flatStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
as	O	O
here	O	O
:	O	O
#	O	O
pre	O	O
Used	O	O
as	O	O
:	O	O
String	B-api_mention	B-api_mention
result	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
still	O	O
will	O	O
need	O	O
to	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
here	O	O
,	O	O
as	O	O
you	O	O
cannot	O	O
return	O	O
T	B-api_mention	O
,	O	O
because	O	O
if	O	O
!	O	O
optional	O	O
.	B-api_mention	B-api_mention
isPresent	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
then	O	O
T	O	O
=	O	O
=	O	O
null	O	O
if	O	O
you	O	O
declare	O	O
it	O	O
such	O	O
,	O	O
but	O	O
then	O	O
your	O	O
.	B-api_mention	B-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
attempt	O	O
to	O	O
add	O	O
null	O	O
to	O	O
a	O	O
stream	O	O
and	O	O
that	O	O
is	O	O
not	O	O
possible	O	O
.	O	O
As	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Used	O	O
as	O	O
:	O	O
String	B-api_mention	B-api_mention
result	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Will	O	O
now	O	O
throw	O	O
a	O	O
NullPointerException	B-api_mention	B-api_mention
inside	O	O
the	O	O
stream	O	O
operations	O	O
.	O	O
Conclusion	O	O
The	O	O
method	O	O
you	O	O
used	O	O
,	O	O
is	O	O
actually	O	O
the	O	O
best	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
5455794	O	O
,	O	O
answer	O	O
-	O	O
5455809	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
removes	O	O
all	O	O
whitespaces	O	O
and	O	O
non	O	O
-	O	O
visible	O	O
characters	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
tab	O	O
,	O	O
\	O	O
n	O	O
)	O	O
.	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
produce	O	O
the	O	O
same	O	O
result	O	O
.	O	O
The	O	O
second	O	O
regex	O	O
is	O	O
20	O	O
%	O	O
faster	O	O
than	O	O
the	O	O
first	O	O
one	O	O
,	O	O
but	O	O
as	O	O
the	O	O
number	O	O
consecutive	O	O
spaces	O	O
increases	O	O
,	O	O
the	O	O
first	O	O
one	O	O
performs	O	O
better	O	O
than	O	O
the	O	O
second	O	O
one	O	O
.	O	O
Assign	O	O
the	O	O
value	O	O
to	O	O
a	O	O
variable	O	O
,	O	O
if	O	O
not	O	O
used	O	O
directly	O	O
:	O	O
st	O	O
=	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
30727515	O	O
,	O	O
answer	O	O
-	O	O
30739477	O	O
Since	O	O
this	O	O
hasn	O	O
’	O	O
t	O	O
addressed	O	O
yet	O	O
,	O	O
here	O	O
an	O	O
explanation	O	O
,	O	O
why	O	O
the	O	O
translation	O	O
of	O	O
Unicode	O	O
escapes	O	O
happens	O	O
before	O	O
any	O	O
other	O	O
source	O	O
code	O	O
processing	O	O
:	O	O
The	O	O
idea	O	O
behind	O	O
it	O	O
was	O	O
that	O	O
it	O	O
allows	O	O
lossless	O	O
translations	O	O
of	O	O
Java	O	O
source	O	O
code	O	O
between	O	O
different	O	O
character	O	O
encodings	O	O
.	O	O
Today	O	O
,	O	O
there	O	O
is	O	O
widespread	O	O
Unicode	O	O
support	O	O
,	O	O
and	O	O
this	O	O
doesn	O	O
’	O	O
t	O	O
look	O	O
like	O	O
a	O	O
problem	O	O
,	O	O
but	O	O
back	O	O
then	O	O
it	O	O
wasn	O	O
’	O	O
t	O	O
easy	O	O
for	O	O
a	O	O
developer	O	O
from	O	O
a	O	O
western	O	O
country	O	O
to	O	O
receive	O	O
some	O	O
source	O	O
code	O	O
from	O	O
his	O	O
Asian	O	O
colleague	O	O
containing	O	O
Asian	O	O
characters	O	O
,	O	O
make	O	O
some	O	O
changes	O	O
(	O	O
including	O	O
compiling	O	O
and	O	O
testing	O	O
it	O	O
)	O	O
and	O	O
sending	O	O
the	O	O
result	O	O
back	O	O
,	O	O
all	O	O
without	O	O
damaging	O	O
something	O	O
.	O	O
So	O	O
,	O	O
Java	O	O
source	O	O
code	O	O
can	O	O
be	O	O
written	O	O
in	O	O
any	O	O
encoding	O	O
and	O	O
allows	O	O
a	O	O
wide	O	O
range	O	O
of	O	O
characters	O	O
within	O	O
identifiers	O	O
,	O	O
character	O	O
and	O	O
String	B-api_mention	B-api_mention
literals	O	O
and	O	O
comments	O	O
.	O	O
Then	O	O
,	O	O
in	O	O
order	O	O
to	O	O
transfer	O	O
it	O	O
losslessly	O	O
,	O	O
all	O	O
characters	O	O
not	O	O
supported	O	O
by	O	O
the	O	O
target	O	O
encoding	O	O
are	O	O
replaced	O	O
by	O	O
their	O	O
Unicode	O	O
escapes	O	O
.	O	O
This	O	O
is	O	O
a	O	O
reversible	O	O
process	O	O
and	O	O
the	O	O
interesting	O	O
point	O	O
is	O	O
that	O	O
the	O	O
translation	O	O
can	O	O
be	O	O
done	O	O
by	O	O
a	O	O
tool	O	O
which	O	O
doesn	O	O
’	O	O
t	O	O
need	O	O
to	O	O
know	O	O
anything	O	O
about	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
syntax	O	O
as	O	O
the	O	O
translation	O	O
rule	O	O
is	O	O
not	O	O
dependent	O	O
on	O	O
it	O	O
.	O	O
This	O	O
works	O	O
as	O	O
the	O	O
translation	O	O
to	O	O
their	O	O
actual	O	O
Unicode	O	O
characters	O	O
inside	O	O
the	O	O
compiler	O	O
happens	O	O
independently	O	O
to	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
syntax	O	O
as	O	O
well	O	O
.	O	O
It	O	O
implies	O	O
that	O	O
you	O	O
can	O	O
perform	O	O
an	O	O
arbitrary	O	O
number	O	O
of	O	O
translation	O	O
steps	O	O
in	O	O
both	O	O
directions	O	O
without	O	O
ever	O	O
changing	O	O
the	O	O
meaning	O	O
of	O	O
the	O	O
source	O	O
code	O	O
.	O	O
This	O	O
is	O	O
the	O	O
reason	O	O
for	O	O
another	O	O
weird	O	O
feature	O	O
which	O	O
hasn	O	O
’	O	O
t	O	O
even	O	O
mentioned	O	O
:	O	O
the	O	O
\	O	O
uuuuuuxxxx	O	O
syntax	O	O
:	O	O
When	O	O
a	O	O
translation	O	O
tool	O	O
is	O	O
escaping	O	O
characters	O	O
and	O	O
encounters	O	O
a	O	O
sequence	O	O
that	O	O
is	O	O
already	O	O
an	O	O
escaped	O	O
sequence	O	O
,	O	O
it	O	O
should	O	O
insert	O	O
an	O	O
additional	O	O
u	O	O
into	O	O
the	O	O
sequence	O	O
,	O	O
converting	O	O
\	O	O
ucafe	O	O
to	O	O
\	O	O
uucafe	O	O
.	O	O
The	O	O
meaning	O	O
doesn	O	O
’	O	O
t	O	O
change	O	O
,	O	O
but	O	O
when	O	O
converting	O	O
into	O	O
the	O	O
other	O	O
direction	O	O
,	O	O
the	O	O
tool	O	O
should	O	O
just	O	O
remove	O	O
one	O	O
u	O	O
and	O	O
replace	O	O
only	O	O
sequences	O	O
containing	O	O
a	O	O
single	O	O
u	O	O
by	O	O
their	O	O
Unicode	O	O
characters	O	O
.	O	O
That	O	O
way	O	O
,	O	O
even	O	O
Unicode	O	O
escapes	O	O
are	O	O
retained	O	O
in	O	O
their	O	O
original	O	O
form	O	O
when	O	O
converting	O	O
back	O	O
and	O	O
forth	O	O
.	O	O
I	O	O
guess	O	O
,	O	O
no	O	O
-	O	O
one	O	O
ever	O	O
used	O	O
that	O	O
feature	O	O
…	O	O
Question	O	O
-	O	O
6470651	O	O
,	O	O
answer	O	O
-	O	O
6540248	O	O
Below	O	O
there	O	O
will	O	O
be	O	O
a	O	O
non	O	O
-	O	O
obvious	O	O
case	O	O
where	O	O
Java	O	O
leaks	O	O
,	O	O
besides	O	O
the	O	O
standard	O	O
case	O	O
of	O	O
forgotten	O	O
listeners	O	O
,	O	O
static	O	O
references	O	O
,	O	O
bogus	O	O
/	O	O
modifiable	O	O
keys	O	O
in	O	O
hashmaps	O	O
,	O	O
or	O	O
just	O	O
threads	O	O
stuck	O	O
without	O	O
any	O	O
chance	O	O
to	O	O
end	O	O
their	O	O
life	O	O
-	O	O
cycle	O	O
.	O	O
#	O	O
li	O	O
File	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
deleteOnExit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
always	O	O
leaks	O	O
the	O	O
string	O	O
,	O	O
if	O	O
the	O	O
string	O	O
is	O	O
a	O	O
substring	O	O
,	O	O
the	O	O
leak	O	O
is	O	O
even	O	O
worse	O	O
(	O	O
the	O	O
underlying	O	O
char	O	O
[	O	O
]	O	O
is	O	O
also	O	O
leaked	O	O
)	O	O
-	O	O
in	O	O
Java	O	O
7	O	O
substring	O	O
also	O	O
copies	O	O
the	O	O
char	O	O
[	O	O
]	O	O
,	O	O
so	O	O
the	O	O
later	O	O
doesn	O	O
'	O	O
t	O	O
apply	O	O
;	O	O
@	O	O
Daniel	O	O
,	O	O
no	O	O
needs	O	O
for	O	O
votes	O	O
,	O	O
though	O	O
.	O	O
I	O	O
'	O	O
ll	O	O
concentrate	O	O
on	O	O
threads	O	O
to	O	O
show	O	O
the	O	O
danger	O	O
of	O	O
unmanaged	O	O
threads	O	O
mostly	O	O
,	O	O
don	O	O
'	O	O
t	O	O
wish	O	O
to	O	O
even	O	O
touch	O	O
swing	O	O
.	O	O
#	O	O
li	O	O
Runtime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
addShutdownHook	I-api_mention	I-api_mention
and	O	O
not	O	O
remove	O	O
.	O	O
.	O	O
.	O	O
and	O	O
then	O	O
even	O	O
with	O	O
removeShutdownHook	B-api_mention	B-api_mention
due	O	O
to	O	O
a	O	O
bug	O	O
in	O	O
ThreadGroup	B-api_mention	B-api_mention
class	O	O
regarding	O	O
unstarted	O	O
threads	O	O
it	O	O
may	O	O
not	O	O
get	O	O
collected	O	O
,	O	O
effectively	O	O
leak	O	O
the	O	O
ThreadGroup	B-api_mention	B-api_mention
.	O	O
JGroup	O	O
has	O	O
the	O	O
leak	O	O
in	O	O
GossipRouter	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
Creating	O	O
,	O	O
but	O	O
not	O	O
starting	O	O
,	O	O
a	O	O
Thread	B-api_mention	B-api_mention
goes	O	O
into	O	O
the	O	O
same	O	O
category	O	O
as	O	O
above	O	O
.	O	O
#	O	O
li	O	O
Creating	O	O
a	O	O
thread	O	O
inherits	O	O
the	O	O
ContextClassLoader	B-api_mention	B-api_mention
and	O	O
AccessControlContext	B-api_mention	B-api_mention
,	O	O
plus	O	O
the	O	O
ThreadGroup	B-api_mention	B-api_mention
and	O	O
any	O	O
InheritedThreadLocal	B-api_mention	B-api_mention
,	O	O
all	O	O
those	O	O
references	O	O
are	O	O
potential	O	O
leaks	O	O
,	O	O
along	O	O
with	O	O
the	O	O
entire	O	O
classes	O	O
loaded	O	O
by	O	O
the	O	O
classloader	O	O
and	O	O
all	O	O
static	O	O
references	O	O
,	O	O
and	O	O
ja	O	O
-	O	O
ja	O	O
.	O	O
The	O	O
effect	O	O
is	O	O
especially	O	O
visible	O	O
with	O	O
the	O	O
entire	O	O
j	O	O
.	O	O
u	O	O
.	O	O
c	O	O
.	O	O
Executor	O	O
framework	O	O
that	O	O
features	O	O
a	O	O
super	O	O
simple	O	O
ThreadFactory	B-api_mention	B-api_mention
interface	O	O
,	O	O
yet	O	O
most	O	O
developers	O	O
have	O	O
no	O	O
clue	O	O
of	O	O
the	O	O
lurking	O	O
danger	O	O
.	O	O
Also	O	O
a	O	O
lot	O	O
of	O	O
libraries	O	O
do	O	O
start	O	O
threads	O	O
upon	O	O
request	O	O
(	O	O
way	O	O
too	O	O
many	O	O
industry	O	O
popular	O	O
libraries	O	O
)	O	O
.	O	O
#	O	O
li	O	O
ThreadLocal	O	B-api_mention
caches	O	O
;	O	O
those	O	O
are	O	O
evil	O	O
in	O	O
many	O	O
cases	O	O
.	O	O
I	O	O
am	O	O
sure	O	O
everyone	O	O
has	O	O
seen	O	O
quite	O	O
a	O	O
bit	O	O
of	O	O
simple	O	O
caches	O	O
based	O	O
on	O	O
ThreadLocal	B-api_mention	B-api_mention
,	O	O
well	O	O
the	O	O
bad	O	O
news	O	O
:	O	O
if	O	O
the	O	O
thread	O	O
keeps	O	O
going	O	O
more	O	O
than	O	O
expected	O	O
the	O	O
life	O	O
the	O	O
context	O	O
ClassLoader	B-api_mention	B-api_mention
,	O	O
it	O	O
is	O	O
a	O	O
pure	O	O
nice	O	O
little	O	O
leak	O	O
.	O	O
Do	O	O
not	O	O
use	O	O
ThreadLocal	B-api_mention	B-api_mention
caches	O	O
unless	O	O
really	O	O
needed	O	O
.	O	O
#	O	O
li	O	O
Calling	O	O
ThreadGroup	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
destroy	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
the	O	O
ThreadGroup	B-api_mention	B-api_mention
has	O	O
no	O	O
threads	O	O
itself	O	O
,	O	O
but	O	O
it	O	O
still	O	O
keeps	O	O
child	O	O
ThreadGroups	B-api_mention	B-api_mention
.	O	O
A	O	O
bad	O	O
leak	O	O
that	O	O
will	O	O
prevent	O	O
the	O	O
ThreadGroup	B-api_mention	B-api_mention
to	O	O
remove	O	O
from	O	O
its	O	O
parent	O	O
,	O	O
but	O	O
all	O	O
the	O	O
children	O	O
become	O	O
un	O	O
-	O	O
enumerateable	O	O
.	O	O
#	O	O
li	O	O
Using	O	O
WeakHashMap	B-api_mention	B-api_mention
and	O	O
the	O	O
value	O	O
(	O	O
in	O	O
)	O	O
directly	O	O
references	O	O
the	O	O
key	O	O
.	O	O
This	O	O
is	O	O
a	O	O
hard	O	O
one	O	O
to	O	O
find	O	O
without	O	O
a	O	O
heap	O	O
dump	O	O
.	O	O
That	O	O
applies	O	O
to	O	O
all	O	O
extended	O	O
Weak	O	O
/	O	O
SoftReference	O	O
that	O	O
might	O	O
keep	O	O
a	O	O
hard	O	O
reference	O	O
back	O	O
to	O	O
the	O	O
guarded	O	O
object	O	O
.	O	O
#	O	O
li	O	O
Using	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
net	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
URL	I-api_mention	I-api_mention
with	O	O
the	O	O
HTTP	O	O
(	O	O
S	O	O
)	O	O
protocol	O	O
and	O	O
loading	O	O
the	O	O
resource	O	O
from	O	O
(	O	O
!	O	O
)	O	O
.	O	O
This	O	O
one	O	O
is	O	O
special	O	O
,	O	O
the	O	O
KeepAliveCache	B-api_mention	B-api_mention
creates	O	O
a	O	O
new	O	O
thread	O	O
in	O	O
the	O	O
system	O	O
ThreadGroup	B-api_mention	B-api_mention
which	O	O
leaks	O	O
the	O	O
current	O	O
thread	O	O
'	O	O
s	O	O
context	O	O
classloader	O	O
.	O	O
The	O	O
thread	O	O
is	O	O
created	O	O
upon	O	O
the	O	O
first	O	O
request	O	O
when	O	O
no	O	O
alive	O	O
thread	O	O
exists	O	O
,	O	O
so	O	O
either	O	O
you	O	O
may	O	O
get	O	O
lucky	O	O
or	O	O
just	O	O
leak	O	O
.	O	O
The	O	O
leak	O	O
is	O	O
already	O	O
fixed	O	O
in	O	O
Java	O	O
7	O	O
and	O	O
the	O	O
code	O	O
that	O	O
creates	O	O
thread	O	O
properly	O	O
removes	O	O
the	O	O
context	O	O
classloader	O	O
.	O	O
There	O	O
are	O	O
few	O	O
more	O	O
cases	O	O
(	O	O
like	O	O
ImageFetcher	B-api_mention	B-api_mention
,	O	O
also	O	O
fixed	O	O
)	O	O
of	O	O
creating	O	O
similar	O	O
threads	O	O
.	O	O
#	O	O
li	O	O
Using	O	O
InflaterInputStream	B-api_mention	B-api_mention
passing	O	O
new	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
zip	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Inflater	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
constructor	O	O
(	O	O
PNGImageDecoder	B-api_mention	O
for	O	O
instance	O	O
)	O	O
and	O	O
not	O	O
calling	O	O
end	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
the	O	O
inflater	O	O
.	O	O
Well	O	O
,	O	O
if	O	O
you	O	O
pass	O	O
in	O	O
the	O	O
constructor	O	O
with	O	O
just	O	O
new	O	O
,	O	O
no	O	O
chance	O	O
.	O	O
.	O	O
.	O	O
And	O	O
yes	O	O
,	O	O
calling	O	O
close	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
stream	O	O
does	O	O
not	O	O
close	O	O
the	O	O
inflater	O	O
if	O	O
it	O	O
'	O	O
s	O	O
manually	O	O
passed	O	O
as	O	O
constructor	O	O
parameter	O	O
.	O	O
This	O	O
is	O	O
not	O	O
a	O	O
true	O	O
leak	O	O
since	O	O
it	O	O
'	O	O
d	O	O
be	O	O
released	O	O
by	O	O
the	O	O
finalizer	O	O
.	O	O
.	O	O
.	O	O
when	O	O
it	O	O
deems	O	O
it	O	O
necessary	O	O
.	O	O
Till	O	O
that	O	O
moment	O	O
it	O	O
eats	O	O
native	O	O
memory	O	O
so	O	O
badly	O	O
it	O	O
can	O	O
cause	O	O
Linux	O	O
oom	O	O
_	O	O
killer	O	O
to	O	O
kill	O	O
the	O	O
process	O	O
with	O	O
impunity	O	O
.	O	O
The	O	O
main	O	O
issue	O	O
is	O	O
that	O	O
finalization	O	O
in	O	O
Java	O	O
is	O	O
very	O	O
unreliable	O	O
and	O	O
G1	O	O
made	O	O
it	O	O
worse	O	O
till	O	O
7	O	O
.	O	O
0	O	O
.	O	O
2	O	O
.	O	O
Moral	O	O
of	O	O
the	O	O
story	O	O
:	O	O
release	O	O
native	O	O
resources	O	O
as	O	O
soon	O	O
as	O	O
you	O	O
can	O	O
;	O	O
the	O	O
finalizer	O	O
is	O	O
just	O	O
too	O	O
poor	O	O
.	O	O
#	O	O
li	O	O
The	O	O
same	O	O
case	O	O
with	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
zip	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Deflater	I-api_mention	I-api_mention
.	O	O
This	O	O
one	O	O
is	O	O
far	O	O
worse	O	O
since	O	O
Deflater	B-api_mention	O
is	O	O
memory	O	O
hungry	O	O
in	O	O
Java	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
always	O	O
uses	O	O
15	O	O
bits	O	O
(	O	O
max	O	O
)	O	O
and	O	O
8	O	O
memory	O	O
levels	O	O
(	O	O
9	O	O
is	O	O
max	O	O
)	O	O
allocating	O	O
several	O	O
hundreds	O	O
KB	O	O
of	O	O
native	O	O
memory	O	O
.	O	O
Fortunately	O	O
,	O	O
Deflater	O	O
is	O	O
not	O	O
widely	O	O
used	O	O
and	O	O
to	O	O
my	O	O
knowledge	O	O
JDK	O	O
contains	O	O
no	O	O
misuses	O	O
.	O	O
Always	O	O
call	O	O
end	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
manually	O	O
create	O	O
a	O	O
Deflater	B-api_mention	O
or	O	O
Inflater	B-api_mention	O
.	O	O
The	O	O
best	O	O
part	O	O
of	O	O
the	O	O
last	O	O
two	O	O
:	O	O
you	O	O
can	O	O
'	O	O
t	O	O
find	O	O
them	O	O
via	O	O
normal	O	O
profiling	O	O
tools	O	O
available	O	O
.	O	O
(	O	O
I	O	O
can	O	O
add	O	O
some	O	O
more	O	O
time	O	O
wasters	O	O
I	O	O
have	O	O
encountered	O	O
upon	O	O
request	O	O
.	O	O
)	O	O
Good	O	O
luck	O	O
and	O	O
stay	O	O
safe	O	O
;	O	O
leaks	O	O
are	O	O
evil	O	O
!	O	O
Question	O	O
-	O	O
27908213	O	O
,	O	O
answer	O	O
-	O	O
27908402	O	O
Although	O	O
there	O	O
is	O	O
no	O	O
explicit	O	O
guarantee	O	O
of	O	O
this	O	O
,	O	O
the	O	O
end	O	O
result	O	O
is	O	O
bound	O	O
to	O	O
be	O	O
such	O	O
that	O	O
the	O	O
comparison	O	O
always	O	O
succeeds	O	O
for	O	O
enum	O	O
constants	O	O
with	O	O
identical	O	O
names	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
reason	O	O
for	O	O
this	O	O
is	O	O
that	O	O
Java	O	O
compiler	O	O
constructs	O	O
subclasses	O	O
of	O	O
Enum	B-api_mention	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
they	O	O
end	O	O
up	O	O
calling	O	O
Enum	B-api_mention	O
'	O	O
s	O	O
sole	O	O
protected	O	O
constructor	O	O
,	O	O
passing	O	O
it	O	O
the	O	O
name	O	O
of	O	O
enum	O	O
value	O	O
:	O	O
protected	O	O
Enum	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
name	O	O
is	O	O
embedded	O	O
into	O	O
the	O	O
generated	O	O
code	O	O
in	O	O
the	O	O
form	O	O
of	O	O
a	O	O
string	O	O
literal	O	O
.	O	O
According	O	O
to	O	O
String	B-api_mention	B-api_mention
documentation	O	O
,	O	O
#	O	O
blockquote	O	O
This	O	O
amounts	O	O
to	O	O
an	O	O
implicit	O	O
guarantee	O	O
of	O	O
your	O	O
expression	O	O
succeeding	O	O
when	O	O
names	O	O
of	O	O
enum	O	O
constants	O	O
are	O	O
identical	O	O
.	O	O
However	O	O
,	O	O
I	O	O
would	O	O
not	O	O
rely	O	O
on	O	O
this	O	O
behavior	O	O
,	O	O
and	O	O
use	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
,	O	O
because	O	O
anyone	O	O
reading	O	O
my	O	O
code	O	O
would	O	O
be	O	O
scratching	O	O
his	O	O
head	O	O
,	O	O
thinking	O	O
that	O	O
I	O	O
made	O	O
a	O	O
mistake	O	O
.	O	O
Question	O	O
-	O	O
29945627	O	O
,	O	O
answer	O	O
-	O	O
29945754	O	O
The	O	O
lambda	O	B-api_mention
:	O	I-api_mention
(	O	I-api_mention
)	O	I-api_mention
-	O	O
>	O	O
{	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
}	O	O
;	O	O
actually	O	O
represents	O	O
an	O	O
implementation	O	O
for	O	O
an	O	O
interface	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
which	O	O
is	O	O
completely	O	O
different	O	O
than	O	O
the	O	O
one	O	O
you	O	O
'	O	O
ve	O	O
defined	O	O
.	O	O
That	O	O
'	O	O
s	O	O
why	O	O
you	O	O
get	O	O
an	O	O
error	O	O
.	O	O
Since	O	O
you	O	O
can	O	O
'	O	O
t	O	O
extend	O	O
your	O	O
@	O	O
FunctionalInterface	O	O
,	O	O
nor	O	O
introduce	O	O
a	O	O
brand	O	O
new	O	O
one	O	O
,	O	O
then	O	O
I	O	O
think	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
much	O	O
options	O	O
.	O	O
You	O	O
can	O	O
use	O	O
the	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interfaces	O	O
to	O	O
denote	O	O
that	O	O
some	O	O
of	O	O
the	O	O
values	O	O
(	O	O
return	O	O
type	O	O
or	O	O
method	O	O
parameter	O	O
)	O	O
is	O	O
missing	O	O
,	O	O
though	O	O
.	O	O
However	O	O
,	O	O
this	O	O
won	O	O
'	O	O
t	O	O
make	O	O
the	O	O
lambda	O	O
body	O	O
simpler	O	O
.	O	O
Question	O	O
-	O	O
24676877	O	O
,	O	O
answer	O	O
-	O	O
24681959	O	O
I	O	O
have	O	O
a	O	O
few	O	O
points	O	O
to	O	O
add	O	O
to	O	O
Brian	O	O
Goetz	O	O
'	O	O
excellent	O	O
answer	O	O
.	O	O
It	O	O
'	O	O
s	O	O
quite	O	O
common	O	O
to	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
from	O	O
a	O	O
"	O	O
getter	O	O
"	O	O
style	O	O
method	O	O
call	O	O
.	O	O
See	O	O
the	O	O
Stream	B-api_mention	B-api_mention
usage	O	O
page	O	O
in	O	O
the	O	O
Java	O	O
8	O	O
javadoc	O	O
and	O	O
look	O	O
for	O	O
"	O	O
methods	O	O
.	O	O
.	O	O
.	O	O
that	O	O
return	O	O
Stream	B-api_mention	B-api_mention
"	O	O
for	O	O
the	O	O
packages	O	O
other	O	O
than	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Stream	I-api_mention	I-api_mention
.	O	O
These	O	O
methods	O	O
are	O	O
usually	O	O
on	O	O
classes	O	O
that	O	O
represent	O	O
or	O	O
can	O	O
contain	O	O
multiple	O	O
values	O	O
or	O	O
aggregations	O	O
of	O	O
something	O	O
.	O	O
In	O	O
such	O	O
cases	O	O
,	O	O
APIs	O	O
typically	O	O
have	O	O
returned	O	O
collections	O	O
or	O	O
arrays	O	O
of	O	O
them	O	O
.	O	O
For	O	O
all	O	O
the	O	O
reasons	O	O
that	O	O
Brian	O	O
noted	O	O
in	O	O
his	O	O
answer	O	O
,	O	O
it	O	O
'	O	O
s	O	O
very	O	O
flexible	O	O
to	O	O
add	O	O
Stream	B-api_mention	B-api_mention
-	O	O
returning	O	O
methods	O	O
here	O	O
.	O	O
Many	O	O
of	O	O
these	O	O
classes	O	O
have	O	O
collections	O	O
-	O	O
or	O	O
array	O	O
-	O	O
returning	O	O
methods	O	O
already	O	O
,	O	O
because	O	O
the	O	O
classes	O	O
predate	O	O
the	O	O
Streams	B-api_mention	B-api_mention
API	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
designing	O	O
a	O	O
new	O	O
API	O	O
,	O	O
and	O	O
it	O	O
makes	O	O
sense	O	O
to	O	O
provide	O	O
Stream	B-api_mention	B-api_mention
-	O	O
returning	O	O
methods	O	O
,	O	O
it	O	O
might	O	O
not	O	O
be	O	O
necessary	O	O
to	O	O
add	O	O
collection	O	O
-	O	O
returning	O	O
methods	O	O
as	O	O
well	O	O
.	O	O
Brian	O	O
mentioned	O	O
the	O	O
cost	O	O
of	O	O
"	O	O
materializing	O	O
"	O	O
the	O	O
values	O	O
into	O	O
a	O	O
collection	O	O
.	O	O
To	O	O
amplify	O	O
this	O	O
point	O	O
,	O	O
there	O	O
are	O	O
actually	O	O
two	O	O
costs	O	O
here	O	O
:	O	O
the	O	O
cost	O	O
of	O	O
storing	O	O
values	O	O
in	O	O
the	O	O
collection	O	O
(	O	O
memory	O	O
allocation	O	O
and	O	O
copying	O	O
)	O	O
and	O	O
also	O	O
the	O	O
cost	O	O
of	O	O
creating	O	O
the	O	O
values	O	O
in	O	O
the	O	O
first	O	O
place	O	O
.	O	O
The	O	O
latter	O	O
cost	O	O
can	O	O
often	O	O
be	O	O
reduced	O	O
or	O	O
avoided	O	O
by	O	O
taking	O	O
advantage	O	O
of	O	O
a	O	O
Stream	B-api_mention	B-api_mention
'	O	O
s	O	O
laziness	O	O
-	O	O
seeking	O	O
behavior	O	O
.	O	O
A	O	O
good	O	O
example	O	O
of	O	O
this	O	O
are	O	O
the	O	O
APIs	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nio	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
file	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Files	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Not	O	O
only	O	O
does	O	O
readAllLines	B-api_mention	O
have	O	O
to	O	O
hold	O	O
the	O	O
entire	O	O
file	O	O
contents	O	O
in	O	O
memory	O	O
in	O	O
order	O	O
to	O	O
store	O	O
it	O	O
into	O	O
the	O	O
result	O	O
list	O	O
,	O	O
it	O	O
also	O	O
has	O	O
to	O	O
read	O	O
the	O	O
file	O	O
to	O	O
the	O	O
very	O	O
end	O	O
before	O	O
it	O	O
returns	O	O
the	O	O
list	O	O
.	O	O
The	O	O
lines	B-api_mention	O
method	O	O
can	O	O
return	O	O
almost	O	O
immediately	O	O
after	O	O
it	O	O
has	O	O
performed	O	O
some	O	O
setup	O	O
,	O	O
leaving	O	O
file	O	O
reading	O	O
and	O	O
line	O	O
breaking	O	O
until	O	O
later	O	O
when	O	O
it	O	O
'	O	O
s	O	O
necessary	O	O
-	O	O
-	O	O
or	O	O
not	O	O
at	O	O
all	O	O
.	O	O
This	O	O
is	O	O
a	O	O
huge	O	O
benefit	O	O
,	O	O
if	O	O
for	O	O
example	O	O
,	O	O
the	O	O
caller	O	O
is	O	O
interested	O	O
only	O	O
in	O	O
the	O	O
first	O	O
ten	O	O
lines	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
firstTen	O	O
=	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Of	O	O
course	O	O
considerable	O	O
memory	O	O
space	O	O
can	O	O
be	O	O
saved	O	O
if	O	O
the	O	O
caller	O	O
filters	O	O
the	O	O
stream	O	O
to	O	O
return	O	O
only	O	O
lines	O	O
matching	O	O
a	O	O
pattern	O	O
,	O	O
etc	O	O
.	O	O
An	O	O
idiom	O	O
that	O	O
seems	O	O
to	O	O
be	O	O
emerging	O	O
is	O	O
to	O	O
name	O	O
stream	O	O
-	O	O
returning	O	O
methods	O	O
after	O	O
the	O	O
plural	O	O
of	O	O
the	O	O
name	O	O
of	O	O
the	O	O
things	O	O
that	O	O
it	O	O
represents	O	O
or	O	O
contains	O	O
,	O	O
without	O	O
a	O	O
get	O	O
prefix	O	O
.	O	O
Also	O	O
,	O	O
while	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
reasonable	O	O
name	O	O
for	O	O
a	O	O
stream	O	O
-	O	O
returning	O	O
method	O	O
when	O	O
there	O	O
is	O	O
only	O	O
one	O	O
possible	O	O
set	O	O
of	O	O
values	O	O
to	O	O
be	O	O
returned	O	O
,	O	O
sometimes	O	O
there	O	O
are	O	O
classes	O	O
that	O	O
have	O	O
aggregations	O	O
of	O	O
multiple	O	O
types	O	O
of	O	O
values	O	O
.	O	O
For	O	O
example	O	O
,	O	O
suppose	O	O
you	O	O
have	O	O
some	O	O
object	O	O
that	O	O
contains	O	O
both	O	O
attributes	O	O
and	O	O
elements	O	O
.	O	O
You	O	O
might	O	O
provide	O	O
two	O	O
stream	O	O
-	O	O
returning	O	O
APIs	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8430805	O	O
,	O	O
answer	O	O
-	O	O
22332291	O	O
Sudheesh	O	O
B	O	O
Nair	O	O
'	O	O
s	O	O
has	O	O
a	O	O
nice	O	O
(	O	O
and	O	O
accepted	O	O
)	O	O
answer	O	O
on	O	O
the	O	O
question	O	O
,	O	O
which	O	O
i	O	O
think	O	O
should	O	O
have	O	O
a	O	O
better	O	O
alternative	O	O
such	O	O
as	O	O
;	O	O
What	O	O
'	O	O
s	O	O
wrong	O	O
with	O	O
measuring	O	O
time	O	O
passed	O	O
and	O	O
checking	O	O
if	O	O
TIME	O	O
_	O	O
INTERVAL	O	O
miliseconds	O	O
(	O	O
say	O	O
2000	O	O
)	O	O
passed	O	O
since	O	O
the	O	O
last	O	O
back	O	O
press	O	O
.	O	O
The	O	O
following	O	O
sample	O	O
code	O	O
uses	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
to	O	O
store	O	O
the	O	O
time	O	O
onBackPressed	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
;	O	O
#	O	O
pre	O	O
Back	O	O
on	O	O
accepted	O	O
answer	O	O
critique	O	O
;	O	O
Using	O	O
a	O	O
flag	O	O
to	O	O
indicate	O	O
if	O	O
it	O	O
was	O	O
pressed	O	O
in	O	O
last	O	O
TIME	O	O
_	O	O
INTERVAL	O	O
(	O	O
say	O	O
2000	O	O
)	O	O
milliseconds	O	O
and	O	O
set	O	O
-	O	O
reset	O	O
is	O	O
via	O	O
Handler	B-api_mention	O
'	O	O
s	O	O
postDelayed	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
was	O	O
the	O	O
first	O	O
thing	O	O
to	O	O
come	O	O
in	O	O
my	O	O
mind	O	O
.	O	O
But	O	O
the	O	O
postDelayed	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
action	O	O
should	O	O
be	O	O
cancelled	O	O
when	O	O
activity	O	O
is	O	O
closing	O	O
,	O	O
removing	O	O
the	O	O
Runnable	B-api_mention	B-api_mention
.	O	O
In	O	O
order	O	O
to	O	O
remove	O	O
the	O	O
Runnable	B-api_mention	B-api_mention
,	O	O
it	O	O
must	O	O
not	O	O
be	O	O
declared	O	O
anonymous	O	O
,	O	O
and	O	O
be	O	O
declared	O	O
as	O	O
member	O	O
along	O	O
with	O	O
the	O	O
Handler	B-api_mention	O
aswell	O	O
.	O	O
Then	O	O
removeCallbacks	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
Handler	B-api_mention	O
can	O	O
be	O	O
called	O	O
appropriately	O	O
.	O	O
The	O	O
following	O	O
sample	O	O
is	O	O
the	O	O
demonstration	O	O
;	O	O
#	O	O
pre	O	O
Thanks	O	O
to	O	O
@	O	O
NSouth	O	O
for	O	O
contributing	O	O
;	O	O
In	O	O
order	O	O
to	O	O
prevent	O	O
toast	O	O
message	O	O
appearing	O	O
even	O	O
after	O	O
the	O	O
application	O	O
is	O	O
closed	O	O
,	O	O
Toast	O	O
can	O	O
be	O	O
declared	O	O
as	O	O
a	O	O
member	O	O
-	O	O
say	O	O
mExitToast	O	O
-	O	O
and	O	O
can	O	O
be	O	O
cancelled	O	O
via	O	O
mExitToast	O	O
.	B-api_mention	B-api_mention
cancel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
just	O	O
before	O	O
super	O	O
.	B-api_mention	B-api_mention
onBackPressed	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
call	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923015	O	O
I	O	O
believe	O	O
the	O	O
reson	O	O
of	O	O
being	O	O
is	O	O
you	O	O
have	O	O
to	O	O
first	O	O
check	O	O
whether	O	O
or	O	O
not	O	O
Optional	B-api_mention	B-api_mention
is	O	O
null	O	O
itself	O	O
and	O	O
then	O	O
try	O	O
to	O	O
evaluate	O	O
value	O	O
it	O	O
wraps	O	O
.	O	O
Too	O	O
many	O	O
unnecessary	O	O
validations	O	O
.	O	O
Question	O	O
-	O	O
27908213	O	O
,	O	O
answer	O	O
-	O	O
27908294	O	O
The	O	O
Oracle	O	O
documentation	O	O
about	O	O
Enum	B-api_mention	O
says	O	O
(	O	O
first	O	O
line	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
If	O	O
this	O	O
is	O	O
true	O	O
then	O	O
,	O	O
yes	O	O
,	O	O
your	O	O
enum1	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
enum2	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
guaranteed	O	O
to	O	O
be	O	O
true	O	O
if	O	O
the	O	O
names	O	O
are	O	O
the	O	O
same	O	O
.	O	O
Also	O	O
,	O	O
in	O	O
the	O	O
method	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
For	O	O
example	O	O
,	O	O
if	O	O
you	O	O
had	O	O
two	O	O
enums	O	O
,	O	O
Days	O	O
and	O	O
MyDays	O	B-api_mention
,	O	O
where	O	O
SUNDAY	O	O
is	O	O
a	O	O
common	O	O
value	O	O
,	O	O
=	O	O
=	O	O
between	O	O
the	O	O
enum	O	O
object	O	O
values	O	O
,	O	O
SUNDAY	O	O
will	O	O
return	O	O
true	O	O
as	O	O
you	O	O
are	O	O
comparing	O	O
two	O	O
strings	O	O
-	O	O
see	O	O
the	O	O
working	O	O
example	O	O
in	O	O
#	O	O
a	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
32866218	O	O
The	O	O
main	O	O
reason	O	O
with	O	O
HashMap	B-api_mention	B-api_mention
not	O	O
allowing	O	O
primitive	O	O
as	O	O
keys	O	O
is	O	O
that	O	O
HashMap	B-api_mention	B-api_mention
is	O	O
designed	O	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
for	O	O
comparing	O	O
the	O	O
keys	O	O
,	O	O
it	O	O
makes	O	O
use	O	O
of	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
and	O	O
a	O	O
method	O	O
can	O	O
be	O	O
called	O	O
only	O	O
on	O	O
an	O	O
object	O	O
not	O	O
on	O	O
a	O	O
primitive	O	O
.	O	O
Thus	O	O
when	O	O
int	O	O
is	O	O
autoboxed	O	O
to	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Hashmap	O	B-api_mention
can	O	O
call	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
on	O	O
Integer	B-api_mention	B-api_mention
object	O	O
.	O	O
That	O	O
is	O	O
why	O	O
,	O	O
you	O	O
should	O	O
use	O	O
Integer	B-api_mention	B-api_mention
instead	O	O
of	O	O
int	O	O
.	O	O
I	O	O
mean	O	O
hashmap	O	O
throws	O	O
an	O	O
error	O	O
while	O	O
putting	O	O
int	O	O
as	O	O
a	O	O
key	O	O
(	O	O
Don	O	O
'	O	O
t	O	O
know	O	O
the	O	O
meaning	O	O
of	O	O
the	O	O
error	O	O
that	O	O
is	O	O
thrown	O	O
)	O	O
And	O	O
if	O	O
you	O	O
think	O	O
that	O	O
,	O	O
you	O	O
can	O	O
make	O	O
Map	B-api_mention	B-api_mention
performance	O	O
faster	O	O
by	O	O
making	O	O
a	O	O
primitive	O	O
as	O	O
a	O	O
key	O	O
,	O	O
there	O	O
is	O	O
a	O	O
library	O	O
called	O	O
FastUtil	B-api_mention	B-api_mention
which	O	O
contains	O	O
a	O	O
Map	B-api_mention	B-api_mention
implementation	O	O
with	O	O
int	O	O
type	O	O
as	O	O
a	O	O
key	O	O
.	O	O
Because	O	O
of	O	O
this	O	O
,	O	O
it	O	O
is	O	O
much	O	O
faster	O	O
than	O	O
Hashmap	B-api_mention	O
Question	O	O
-	O	O
7438612	O	O
,	O	O
answer	O	O
-	O	O
7438613	O	O
Replace	O	O
will	O	O
replace	O	O
all	O	O
instances	O	O
of	O	O
a	O	O
letter	O	O
.	O	O
All	O	O
you	O	O
need	O	O
to	O	O
do	O	O
is	O	O
use	O	O
substring	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
16252269	O	O
,	O	O
answer	O	O
-	O	O
16252296	O	O
Use	O	O
util	O	O
method	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
class	O	O
,	O	O
i	O	O
.	O	O
e	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
In	O	O
fact	O	O
,	O	O
if	O	O
you	O	O
want	O	O
to	O	O
sort	O	O
custom	O	O
object	O	O
you	O	O
can	O	O
use	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
see	O	O
collections	O	O
api	O	O
Question	O	O
-	O	O
5192512	O	O
,	O	O
answer	O	O
-	O	O
5193094	O	O
There	O	O
are	O	O
basically	O	O
two	O	O
alternatives	O	O
,	O	O
using	O	O
setLength	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
reset	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
or	O	O
creating	O	O
a	O	O
new	O	O
one	O	O
in	O	O
each	O	O
iteration	O	O
.	O	O
Both	O	O
can	O	O
have	O	O
pros	O	O
and	O	O
cons	O	O
depending	O	O
on	O	O
the	O	O
usage	O	O
.	O	O
If	O	O
you	O	O
know	O	O
the	O	O
expected	O	O
capacity	O	O
of	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
beforehand	O	O
,	O	O
creating	O	O
a	O	O
new	O	O
one	O	O
each	O	O
time	O	O
should	O	O
be	O	O
just	O	O
as	O	O
fast	O	O
as	O	O
setting	O	O
a	O	O
new	O	O
length	O	O
.	O	O
It	O	O
will	O	O
also	O	O
help	O	O
the	O	O
garbage	O	O
collector	O	O
,	O	O
since	O	O
each	O	O
StringBuilder	B-api_mention	B-api_mention
will	O	O
be	O	O
relatively	O	O
short	O	O
-	O	O
lived	O	O
and	O	O
the	O	O
gc	O	O
is	O	O
optimized	O	O
for	O	O
that	O	O
.	O	O
When	O	O
you	O	O
don	O	O
'	O	O
t	O	O
know	O	O
the	O	O
capacity	O	O
,	O	O
reusing	O	O
the	O	O
same	O	O
StringBuilder	B-api_mention	B-api_mention
might	O	O
be	O	O
faster	O	O
.	O	O
Each	O	O
time	O	O
you	O	O
exceed	O	O
the	O	O
capacity	O	O
when	O	O
appending	O	O
,	O	O
a	O	O
new	O	O
backing	O	O
array	O	O
has	O	O
to	O	O
be	O	O
allocated	O	O
and	O	O
the	O	O
previous	O	O
content	O	O
has	O	O
to	O	O
be	O	O
copied	O	O
.	O	O
By	O	O
reusing	O	O
the	O	O
same	O	O
StringBuilder	B-api_mention	B-api_mention
,	O	O
it	O	O
will	O	O
reach	O	O
the	O	O
needed	O	O
capacity	O	O
after	O	O
some	O	O
iterations	O	O
and	O	O
there	O	O
won	O	O
'	O	O
t	O	O
be	O	O
any	O	O
copying	O	O
thereafter	O	O
.	O	O
Question	O	O
-	O	O
27949213	O	O
Since	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
(	O	O
like	O	O
other	O	O
languages	O	O
)	O	O
consumes	O	O
a	O	O
lot	O	O
of	O	O
memory	O	O
because	O	O
each	O	O
character	O	O
consumes	O	O
two	O	O
bytes	O	O
,	O	O
Java	O	O
8	O	O
has	O	O
introduced	O	O
a	O	O
new	O	O
feature	O	O
called	O	O
String	B-api_mention	B-api_mention
Deduplication	O	O
which	O	O
takes	O	O
advantage	O	O
of	O	O
the	O	O
fact	O	O
that	O	O
the	O	O
char	O	O
arrays	O	O
are	O	O
internal	O	O
to	O	O
strings	O	O
and	O	O
final	O	O
,	O	O
so	O	O
the	O	O
JVM	O	O
can	O	O
mess	O	O
around	O	O
with	O	O
them	O	O
.	O	O
I	O	O
have	O	O
read	O	O
this	O	O
example	O	O
so	O	O
far	O	O
but	O	O
since	O	O
I	O	O
am	O	O
not	O	O
a	O	O
pro	O	O
java	O	O
coder	O	O
,	O	O
I	O	O
am	O	O
having	O	O
a	O	O
hard	O	O
time	O	O
grasping	O	O
the	O	O
concept	O	O
.	O	O
Here	O	O
is	O	O
what	O	O
it	O	O
says	O	O
,	O	O
#	O	O
blockquote	O	O
My	O	O
First	O	O
question	O	O
,	O	O
There	O	O
is	O	O
still	O	O
a	O	O
lack	O	O
of	O	O
resources	O	O
on	O	O
this	O	O
topic	O	O
since	O	O
it	O	O
is	O	O
recently	O	O
added	O	O
in	O	O
Java	O	O
8	O	O
update	O	O
20	O	O
,	O	O
could	O	O
anyone	O	O
here	O	O
share	O	O
some	O	O
practical	O	O
examples	O	O
on	O	O
how	O	O
it	O	O
help	O	O
in	O	O
reducing	O	O
the	O	O
memory	O	O
consumed	O	O
by	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
?	O	O
Edit	O	O
:	O	O
The	O	O
above	O	O
link	O	O
says	O	O
,	O	O
#	O	O
blockquote	O	O
My	O	O
2nd	O	O
question	O	O
,	O	O
If	O	O
hash	O	O
code	O	O
of	O	O
two	O	O
String	B-api_mention	B-api_mention
are	O	O
same	O	O
then	O	O
the	O	O
Strings	B-api_mention	O
are	O	O
already	O	O
the	O	O
same	O	O
,	O	O
then	O	O
why	O	O
compare	O	O
them	O	O
char	O	O
by	O	O
char	O	O
once	O	O
it	O	O
is	O	O
found	O	O
that	O	O
the	O	O
two	O	O
String	B-api_mention	B-api_mention
have	O	O
same	O	O
hash	O	O
code	O	O
?	O	O
Question	O	O
-	O	O
20746429	O	O
,	O	O
answer	O	O
-	O	O
20765715	O	O
Such	O	O
an	O	O
operation	O	O
ought	O	O
to	O	O
be	O	O
possible	O	O
with	O	O
a	O	O
Java	O	O
8	O	O
Stream	B-api_mention	B-api_mention
,	O	O
but	O	O
it	O	O
can	O	O
'	O	O
t	O	O
necessarily	O	O
be	O	O
done	O	O
efficiently	O	O
-	O	O
-	O	O
for	O	O
example	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
necessarily	O	O
parallelize	O	O
such	O	O
an	O	O
operation	O	O
,	O	O
as	O	O
you	O	O
have	O	O
to	O	O
look	O	O
at	O	O
elements	O	O
in	O	O
order	O	O
.	O	O
The	O	O
API	O	O
doesn	O	O
'	O	O
t	O	O
provide	O	O
an	O	O
easy	O	O
way	O	O
to	O	O
do	O	O
it	O	O
,	O	O
but	O	O
what	O	O
'	O	O
s	O	O
probably	O	O
the	O	O
simplest	O	O
way	O	O
is	O	O
to	O	O
take	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
iterator	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
wrap	O	O
the	O	O
Iterator	O	B-api_mention
to	O	O
have	O	O
a	O	O
"	O	O
take	O	O
-	O	O
while	O	O
"	O	O
implementation	O	O
,	O	O
and	O	O
then	O	O
go	O	O
back	O	O
to	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
then	O	O
a	O	O
Stream	B-api_mention	B-api_mention
.	O	O
Or	O	O
-	O	O
-	O	O
maybe	O	O
-	O	O
-	O	O
wrap	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
,	O	O
though	O	O
it	O	O
can	O	O
'	O	O
t	O	O
really	O	O
be	O	O
split	O	O
anymore	O	O
in	O	O
this	O	O
implementation	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
an	O	O
untested	O	O
implementation	O	O
of	O	O
takeWhile	O	O
on	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
11408427	O	O
,	O	O
answer	O	O
-	O	O
11408482	O	O
The	O	O
Java	O	O
language	O	O
provides	O	O
special	O	O
support	O	O
for	O	O
the	O	O
string	O	O
concatenation	O	O
operator	O	O
(	O	O
+	O	O
)	O	O
and	O	O
for	O	O
conversion	O	O
of	O	O
other	O	O
objects	O	O
to	O	O
strings	O	O
.	O	O
String	B-api_mention	B-api_mention
concatenation	O	O
is	O	O
implemented	O	O
through	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
(	O	O
or	O	O
StringBuffer	B-api_mention	B-api_mention
)	O	O
class	O	O
and	O	O
its	O	O
append	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
29262002	O	O
,	O	O
answer	O	O
-	O	O
29262520	O	O
Basicly	O	O
,	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
an	O	O
executable	O	O
piece	O	O
of	O	O
code	O	O
that	O	O
actually	O	O
does	O	O
something	O	O
(	O	O
it	O	O
creates	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
and	O	O
then	O	O
returns	O	O
it	O	O
)	O	O
.	O	O
The	O	O
returned	O	O
value	O	O
can	O	O
be	O	O
ignored	O	O
and	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
can	O	O
still	O	O
be	O	O
used	O	O
in	O	O
void	O	O
-	O	O
return	O	O
lambda	O	O
to	O	O
create	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
.	O	O
However	O	O
,	O	O
StringLiteral	O	O
is	O	O
just	O	O
a	O	O
constant	O	O
that	O	O
doesn	O	O
'	O	O
t	O	O
do	O	O
anything	O	O
on	O	O
it	O	O
'	O	O
s	O	O
own	O	O
.	O	O
The	O	O
only	O	O
reasonable	O	O
thing	O	O
to	O	O
do	O	O
with	O	O
it	O	O
in	O	O
lambda	O	O
body	O	O
is	O	O
to	O	O
return	O	O
it	O	O
.	O	O
But	O	O
the	O	O
lambda	O	O
method	O	O
would	O	O
have	O	O
to	O	O
have	O	O
return	O	O
type	O	O
String	B-api_mention	B-api_mention
or	O	O
Object	B-api_mention	B-api_mention
,	O	O
but	O	O
it	O	O
returns	O	O
void	O	O
,	O	O
hence	O	O
the	O	O
String	B-api_mention	B-api_mention
cannot	O	O
be	O	O
casted	O	O
to	O	O
void	O	O
error	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14502259	O	O
There	O	O
are	O	O
many	O	O
,	O	O
many	O	O
pseudo	O	O
random	O	O
number	O	O
generators	O	O
out	O	O
there	O	O
.	O	O
For	O	O
example	O	O
Knuth	O	O
'	O	O
s	O	O
ranarray	O	O
,	O	O
the	O	O
Mersenne	O	O
twister	O	O
,	O	O
or	O	O
look	O	O
for	O	O
LFSR	O	O
generators	O	O
.	O	O
Knuth	O	O
'	O	O
s	O	O
monumental	O	O
"	O	O
Seminumerical	O	O
algorithms	O	O
"	O	O
analizes	O	O
the	O	O
area	O	O
,	O	O
and	O	O
proposes	O	O
some	O	O
linear	O	O
congruential	O	O
generators	O	O
(	O	O
simple	O	O
to	O	O
implement	O	O
,	O	O
fast	O	O
)	O	O
.	O	O
But	O	O
I	O	O
'	O	O
d	O	O
suggest	O	O
you	O	O
just	O	O
stick	O	O
to	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
or	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
,	O	O
they	O	O
fast	O	O
and	O	O
at	O	O
least	O	O
OK	O	O
for	O	O
occasional	O	O
use	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
,	O	O
games	O	O
and	O	O
such	O	O
)	O	O
.	O	O
If	O	O
you	O	O
are	O	O
just	O	O
paranoid	O	O
on	O	O
the	O	O
distribution	O	O
(	O	O
some	O	O
Monte	O	O
Carlo	O	O
program	O	O
,	O	O
or	O	O
a	O	O
genetic	O	O
algorithm	O	O
)	O	O
,	O	O
check	O	O
out	O	O
their	O	O
implementation	O	O
(	O	O
source	O	O
is	O	O
available	O	O
somewhere	O	O
)	O	O
,	O	O
and	O	O
seed	O	O
them	O	O
with	O	O
some	O	O
truly	O	O
random	O	O
number	O	O
,	O	O
either	O	O
from	O	O
your	O	O
operating	O	O
system	O	O
or	O	O
from	O	O
random	O	O
.	O	O
org	O	O
.	O	O
If	O	O
this	O	O
is	O	O
required	O	O
for	O	O
some	O	O
application	O	O
where	O	O
security	O	O
is	O	O
critical	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
dig	O	O
yourself	O	O
.	O	O
And	O	O
as	O	O
in	O	O
that	O	O
case	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
believe	O	O
what	O	O
some	O	O
colored	O	O
square	O	O
with	O	O
missing	O	O
bits	O	O
spouts	O	O
here	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
shut	O	O
up	O	O
now	O	O
.	O	O
Question	O	O
-	O	O
15430247	O	O
The	O	O
usual	O	O
constructor	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
:	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
there	O	O
is	O	O
also	O	O
an	O	O
overloaded	O	O
constructor	O	O
with	O	O
a	O	O
parameter	O	O
for	O	O
its	O	O
initial	O	O
capacity	O	O
:	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Why	O	O
is	O	O
it	O	O
useful	O	O
to	O	O
create	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
with	O	O
an	O	O
initial	O	O
capacity	O	O
when	O	O
we	O	O
can	O	O
append	O	O
to	O	O
it	O	O
as	O	O
we	O	O
please	O	O
?	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
19629304	O	O
If	O	O
you	O	O
do	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
main	O	O
method	O	O
,	O	O
the	O	O
thread	O	O
of	O	O
main	O	O
method	O	O
will	O	O
invoke	O	O
the	O	O
run	O	O
method	O	O
instead	O	O
of	O	O
the	O	O
thread	O	O
you	O	O
require	O	O
to	O	O
run	O	O
.	O	O
The	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
creates	O	O
new	O	O
thread	O	O
and	O	O
for	O	O
which	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
to	O	O
be	O	O
done	O	O
Question	O	O
-	O	O
23756966	O	O
While	O	O
investigating	O	O
for	O	O
a	O	O
little	O	O
debate	O	O
w	O	O
.	O	O
r	O	O
.	O	O
t	O	O
.	O	O
using	O	O
StringLiteral	O	O
+	O	O
n	O	O
and	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
convert	O	O
an	O	O
integer	O	O
primitive	O	O
to	O	O
a	O	O
string	O	O
I	O	O
wrote	O	O
this	O	O
JMH	O	O
microbenchmark	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
ran	O	O
it	O	O
with	O	O
the	O	O
default	O	O
JMH	O	O
options	O	O
with	O	O
both	O	O
Java	O	O
VMs	O	O
that	O	O
exist	O	O
on	O	O
my	O	O
Linux	O	O
machine	O	O
(	O	O
up	O	O
-	O	O
to	O	O
-	O	O
date	O	O
Mageia	O	O
4	O	O
64	O	O
-	O	O
bit	O	O
,	O	O
Intel	O	O
i7	O	O
-	O	O
3770	O	O
CPU	O	O
,	O	O
32GB	O	O
RAM	O	O
)	O	O
.	O	O
The	O	O
first	O	O
JVM	O	O
was	O	O
the	O	O
one	O	O
supplied	O	O
with	O	O
Oracle	O	O
JDK	O	O
8u5	O	O
64	O	O
-	O	O
bit	O	O
:	O	O
#	O	O
pre	O	O
With	O	O
this	O	O
JVM	O	O
I	O	O
got	O	O
pretty	O	O
much	O	O
what	O	O
I	O	O
expected	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
.	O	O
e	O	O
.	O	O
using	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
class	O	O
is	O	O
slower	O	O
due	O	O
to	O	O
the	O	O
additional	O	O
overhead	O	O
of	O	O
creating	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
object	O	O
and	O	O
appending	O	O
an	O	O
empty	O	O
string	O	O
.	O	O
Using	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
format	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
is	O	O
even	O	O
slower	O	O
,	O	O
by	O	O
an	O	O
order	O	O
of	O	O
magnitude	O	O
or	O	O
so	O	O
.	O	O
The	O	O
distribution	O	O
-	O	O
provided	O	O
compiler	O	O
,	O	O
on	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
is	O	O
based	O	O
on	O	O
OpenJDK	O	O
1	O	O
.	O	O
7	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
results	O	O
here	O	O
were	O	O
interesting	O	O
:	O	O
#	O	O
pre	O	O
Why	O	O
does	O	O
StringBuilder	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
appear	O	O
so	O	O
much	O	O
faster	O	O
with	O	O
this	O	O
JVM	O	O
?	O	O
Looking	O	O
at	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
class	O	O
source	O	O
code	O	O
revealed	O	O
nothing	O	O
particularly	O	O
interesting	O	O
-	O	O
the	O	O
method	O	O
in	O	O
question	O	O
is	O	O
almost	O	O
identical	O	O
to	O	O
Integer	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Interestingly	O	O
enough	O	O
,	O	O
appending	O	O
the	O	O
result	O	O
of	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
the	O	O
stringBuilder2	O	O
microbenchmark	O	O
)	O	O
does	O	O
not	O	O
appear	O	O
to	O	O
be	O	O
faster	O	O
.	O	O
Is	O	O
this	O	O
performance	O	O
discrepancy	O	O
an	O	O
issue	O	O
with	O	O
the	O	O
testing	O	O
harness	O	O
?	O	O
Or	O	O
does	O	O
my	O	O
OpenJDK	O	O
JVM	O	O
contain	O	O
optimizations	O	O
that	O	O
would	O	O
affect	O	O
this	O	O
particular	O	O
code	O	O
(	O	O
anti	O	O
)	O	O
-	O	O
pattern	O	O
?	O	O
EDIT	O	O
:	O	O
For	O	O
a	O	O
more	O	O
straight	O	O
-	O	O
forward	O	O
comparison	O	O
,	O	O
I	O	O
installed	O	O
Oracle	O	O
JDK	O	O
1	O	O
.	O	O
7u55	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
results	O	O
are	O	O
similar	O	O
to	O	O
those	O	O
of	O	O
OpenJDK	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
seems	O	O
that	O	O
this	O	O
is	O	O
a	O	O
more	O	O
general	O	O
Java	O	O
7	O	O
vs	O	O
Java	O	O
8	O	O
issue	O	O
.	O	O
Perhaps	O	O
Java	O	O
7	O	O
had	O	O
more	O	O
aggressive	O	O
string	O	O
optimizations	O	O
?	O	O
EDIT	O	O
2	O	O
:	O	O
For	O	O
completeness	O	O
,	O	O
here	O	O
are	O	O
the	O	O
string	O	O
-	O	O
related	O	O
VM	O	O
options	O	O
for	O	O
both	O	O
of	O	O
these	O	O
JVMs	O	O
:	O	O
For	O	O
Oracle	O	O
JDK	O	O
8u5	O	O
:	O	O
#	O	O
pre	O	O
For	O	O
OpenJDK	O	O
1	O	O
.	O	O
7	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
UseStringCache	B-api_mention	B-api_mention
option	O	O
was	O	O
removed	O	O
in	O	O
Java	O	O
8	O	O
with	O	O
no	O	O
replacement	O	O
,	O	O
so	O	O
I	O	O
doubt	O	O
that	O	O
makes	O	O
any	O	O
difference	O	O
.	O	O
The	O	O
rest	O	O
of	O	O
the	O	O
options	O	O
appear	O	O
to	O	O
have	O	O
the	O	O
same	O	O
settings	O	O
.	O	O
EDIT	O	O
3	O	O
:	O	O
A	O	O
side	O	O
-	O	O
by	O	O
-	O	O
side	O	O
comparison	O	O
of	O	O
the	O	O
source	O	O
code	O	O
of	O	O
the	O	O
AbstractStringBuilder	B-api_mention	B-api_mention
,	O	O
StringBuilder	B-api_mention	B-api_mention
and	O	O
Integer	B-api_mention	B-api_mention
classes	O	O
from	O	O
the	O	O
src	O	O
.	O	O
zip	O	O
file	O	O
of	O	O
reveals	O	O
nothing	O	O
noteworty	O	O
.	O	O
Apart	O	O
from	O	O
a	O	O
whole	O	O
lot	O	O
of	O	O
cosmetic	O	O
and	O	O
documentation	O	O
changes	O	O
,	O	O
Integer	B-api_mention	B-api_mention
now	O	O
has	O	O
some	O	O
support	O	O
for	O	O
unsigned	O	O
integers	O	O
and	O	O
StringBuilder	B-api_mention	B-api_mention
has	O	O
been	O	O
slightly	O	O
refactored	O	O
to	O	O
share	O	O
more	O	O
code	O	O
with	O	O
StringBuffer	B-api_mention	B-api_mention
.	O	O
None	O	O
of	O	O
these	O	O
changes	O	O
seem	O	O
to	O	O
affect	O	O
the	O	O
code	O	O
paths	O	O
used	O	O
by	O	O
StringBuilder	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
although	O	O
I	O	O
may	O	O
have	O	O
missed	O	O
something	O	O
.	O	O
A	O	O
comparison	O	O
of	O	O
the	O	O
assembly	O	O
code	O	O
generated	O	O
for	O	O
IntStr	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
integerToString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
IntStr	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
stringBuilder0	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
far	O	O
more	O	O
interesting	O	O
.	O	O
The	O	O
basic	O	O
layout	O	O
of	O	O
the	O	O
code	O	O
generated	O	O
for	O	O
IntStr	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
integerToString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
similar	O	O
for	O	O
both	O	O
JVMs	O	O
,	O	O
although	O	O
Oracle	O	O
JDK	O	O
8u5	O	O
seemed	O	O
to	O	O
be	O	O
more	O	O
aggressive	O	O
w	O	O
.	O	O
r	O	O
.	O	O
t	O	O
.	O	O
inlining	O	O
some	O	O
calls	O	O
within	O	O
the	O	O
Integer	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
code	O	O
.	O	O
There	O	O
was	O	O
a	O	O
clear	O	O
correspondence	O	O
with	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
,	O	O
even	O	O
for	O	O
someone	O	O
with	O	O
minimal	O	O
assembly	O	O
experience	O	O
.	O	O
The	O	O
assembly	O	O
code	O	O
for	O	O
IntStr	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
stringBuilder0	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
however	O	O
,	O	O
was	O	O
radically	O	O
different	O	O
.	O	O
The	O	O
code	O	O
generated	O	O
by	O	O
Oracle	O	O
JDK	O	O
8u5	O	O
was	O	O
once	O	O
again	O	O
directly	O	O
related	O	O
to	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
-	O	O
I	O	O
could	O	O
easily	O	O
recognise	O	O
the	O	O
same	O	O
layout	O	O
.	O	O
On	O	O
the	O	O
contrary	O	O
,	O	O
the	O	O
code	O	O
generated	O	O
by	O	O
OpenJDK	O	O
7	O	O
was	O	O
almost	O	O
unrecognisable	O	O
to	O	O
the	O	O
untrained	O	O
eye	O	O
(	O	O
like	O	O
mine	O	O
)	O	O
.	O	O
The	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
was	O	O
seemingly	O	O
removed	O	O
,	O	O
as	O	O
was	O	O
the	O	O
creation	O	O
of	O	O
the	O	O
array	O	O
in	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
constructor	O	O
.	O	O
Additionaly	O	O
,	O	O
the	O	O
disassembler	O	O
plugin	O	O
was	O	O
not	O	O
able	O	O
to	O	O
provide	O	O
as	O	O
many	O	O
references	O	O
to	O	O
the	O	O
source	O	O
code	O	O
as	O	O
it	O	O
did	O	O
in	O	O
JDK	O	O
8	O	O
.	O	O
I	O	O
assume	O	O
that	O	O
this	O	O
is	O	O
either	O	O
the	O	O
result	O	O
of	O	O
a	O	O
much	O	O
more	O	O
aggressive	O	O
optimization	O	O
pass	O	O
in	O	O
OpenJDK	O	O
7	O	O
,	O	O
or	O	O
more	O	O
probably	O	O
the	O	O
result	O	O
of	O	O
inserting	O	O
hand	O	O
-	O	O
written	O	O
low	O	O
-	O	O
level	O	O
code	O	O
for	O	O
certain	O	O
StringBuilder	B-api_mention	B-api_mention
operations	O	O
.	O	O
I	O	O
am	O	O
unsure	O	O
why	O	O
this	O	O
optimization	O	O
does	O	O
not	O	O
happen	O	O
in	O	O
my	O	O
JVM	O	O
8	O	O
implementation	O	O
or	O	O
why	O	O
the	O	O
same	O	O
optimizations	O	O
were	O	O
not	O	O
implemented	O	O
for	O	O
Integer	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
JVM	O	O
7	O	O
.	O	O
I	O	O
guess	O	O
someone	O	O
familiar	O	O
with	O	O
the	O	O
related	O	O
parts	O	O
of	O	O
the	O	O
JRE	O	O
source	O	O
code	O	O
would	O	O
have	O	O
to	O	O
answer	O	O
these	O	O
questions	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
32820722	O	O
,	O	O
answer	O	O
-	O	O
32820940	O	O
An	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
a	O	O
function	O	O
int	O	O
-	O	O
>	O	O
R	O	O
.	O	O
An	O	O
IntUnaryOperator	O	O
is	O	O
a	O	O
function	O	O
int	O	O
-	O	O
>	O	O
int	O	O
.	O	O
Thus	O	O
an	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
a	O	O
function	O	O
that	O	O
takes	O	O
an	O	O
int	O	O
as	O	O
parameter	O	O
and	O	O
return	O	O
a	O	O
function	O	O
that	O	O
takes	O	O
an	O	O
int	O	O
as	O	O
parameter	O	O
and	O	O
return	O	O
an	O	O
int	O	O
.	O	O
#	O	O
pre	O	O
Maybe	O	O
it	O	O
is	O	O
more	O	O
clear	O	O
if	O	O
you	O	O
use	O	O
anonymous	O	O
classes	O	O
to	O	O
"	O	O
decompose	O	O
"	O	O
the	O	O
lambda	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28770822	O	O
,	O	O
answer	O	O
-	O	O
28816219	O	O
Looking	O	O
at	O	O
the	O	O
issue	O	O
and	O	O
fix	O	O
,	O	O
it	O	O
looks	O	O
like	O	O
this	O	O
has	O	O
been	O	O
done	O	O
to	O	O
resolve	O	O
a	O	O
handling	O	O
of	O	O
a	O	O
header	O	O
file	O	O
generation	O	O
for	O	O
special	O	O
classes	O	O
in	O	O
jigsaw	O	O
Jigsaw	O	O
is	O	O
a	O	O
module	O	O
system	O	O
designated	O	O
to	O	O
use	O	O
in	O	O
Java	O	O
SE	O	O
Platform	O	O
and	O	O
JDK	O	O
.	O	O
More	O	O
details	O	O
here	O	O
Here	O	O
is	O	O
a	O	O
corresponding	O	O
changeset	O	O
.	O	O
You	O	O
can	O	O
see	O	O
a	O	O
comment	O	O
,	O	O
#	O	O
blockquote	O	O
From	O	O
the	O	O
changeset	O	O
I	O	O
see	O	O
that	O	O
for	O	O
the	O	O
sake	O	O
of	O	O
purpose	O	O
in	O	O
addition	O	O
to	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Integer	I-api_mention	I-api_mention
and	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Long	I-api_mention	I-api_mention
,	O	O
also	O	O
some	O	O
properties	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
net	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
SocketOptions	I-api_mention	I-api_mention
,	O	O
sun	B-api_mention	O
.	I-api_mention	O
nio	I-api_mention	O
.	I-api_mention	O
ch	I-api_mention	O
.	I-api_mention	O
IOStatus	I-api_mention	O
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
io	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
FileSystem	I-api_mention	I-api_mention
have	O	O
been	O	O
changed	O	O
to	O	O
@	O	O
Native	O	O
.	O	O
So	O	O
I	O	O
assume	O	O
only	O	O
those	O	O
were	O	O
needed	O	O
to	O	O
solve	O	O
the	O	O
dependency	O	O
with	O	O
jigsaw	O	O
.	O	O
Question	O	O
-	O	O
5263187	O	O
,	O	O
answer	O	O
-	O	O
5263201	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
20358883	O	O
,	O	O
answer	O	O
-	O	O
31965160	O	O
With	O	O
Java	O	O
8	O	O
Streams	O	B-api_mention
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
if	O	O
you	O	O
need	O	O
a	O	O
set	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
32653133	O	O
This	O	O
is	O	O
looks	O	O
like	O	O
a	O	O
good	O	O
fit	O	O
for	O	O
pattern	O	O
matching	O	O
and	O	O
a	O	O
more	O	O
traditional	O	O
Option	B-api_mention	B-api_mention
interface	O	O
with	O	O
Some	O	O
and	O	O
None	O	O
implementations	O	O
(	O	O
such	O	O
as	O	O
those	O	O
in	O	O
Javaslang	O	O
,	O	O
FunctionalJava	O	O
)	O	O
or	O	O
a	O	O
lazy	O	O
Maybe	O	O
implementation	O	O
in	O	O
cyclops	O	O
-	O	O
react	O	O
.	O	O
I	O	O
'	O	O
m	O	O
the	O	O
author	O	O
of	O	O
this	O	O
library	O	O
.	O	O
With	O	O
cyclops	O	O
-	O	O
react	O	O
you	O	O
can	O	O
also	O	O
use	O	O
structural	O	O
pattern	O	O
matching	O	O
on	O	O
JDK	O	O
types	O	O
.	O	O
For	O	O
Optional	B-api_mention	B-api_mention
you	O	O
can	O	O
match	O	O
on	O	O
the	O	O
present	O	O
and	O	O
absent	O	O
cases	O	O
via	O	O
the	O	O
visitor	O	O
pattern	O	O
.	O	O
it	O	O
would	O	O
look	O	O
something	O	O
like	O	O
this	O	O
-	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
7353205	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
more	O	O
portable	O	O
way	O	O
.	O	B-api_mention
exec	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
actually	O	O
calls	O	O
out	O	O
to	O	O
the	O	O
operating	O	O
system	O	O
to	O	O
execute	O	O
the	O	O
hostname	O	O
command	O	O
.	O	O
Here	O	O
are	O	O
a	O	O
couple	O	O
other	O	O
related	O	O
answers	O	O
on	O	O
SO	O	O
:	O	O
#	O	O
li	O	O
Java	O	O
current	O	O
machine	O	O
name	O	O
and	O	O
logged	O	O
in	O	O
user	O	O
?	O	O
#	O	O
li	O	O
Get	O	O
DNS	O	O
name	O	O
of	O	O
local	O	O
machine	O	O
as	O	O
seen	O	O
by	O	O
a	O	O
remote	O	O
machine	O	O
EDIT	O	O
:	O	O
You	O	O
should	O	O
take	O	O
a	O	O
look	O	O
at	O	O
A	O	O
.	O	O
H	O	O
.	O	O
'	O	O
s	O	O
answer	O	O
or	O	O
Arnout	O	O
Engelen	O	O
'	O	O
s	O	O
answer	O	O
for	O	O
details	O	O
on	O	O
why	O	O
this	O	O
might	O	O
not	O	O
work	O	O
as	O	O
expected	O	O
,	O	O
depending	O	O
on	O	O
your	O	O
situation	O	O
.	O	O
As	O	O
an	O	O
answer	O	O
for	O	O
this	O	O
person	O	O
who	O	O
specifically	O	O
requested	O	O
portable	O	O
,	O	O
I	O	O
still	O	O
think	O	O
getHostName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
fine	O	O
,	O	O
but	O	O
they	O	O
bring	O	O
up	O	O
some	O	O
good	O	O
points	O	O
that	O	O
should	O	O
be	O	O
considered	O	O
.	O	O
Question	O	O
-	O	O
8189466	O	O
,	O	O
answer	O	O
-	O	O
8189786	O	O
Here	O	O
'	O	O
s	O	O
why	O	O
:	O	O
As	O	O
it	O	O
is	O	O
says	O	O
in	O	O
the	O	O
Javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
check	O	O
is	O	O
done	O	O
in	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
the	O	O
iterator	O	O
(	O	O
as	O	O
you	O	O
can	O	O
see	O	O
by	O	O
the	O	O
stacktrace	O	O
)	O	O
.	O	O
But	O	O
we	O	O
will	O	O
reach	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
only	O	O
if	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
delivered	O	O
true	O	O
,	O	O
which	O	O
is	O	O
what	O	O
is	O	O
called	O	O
by	O	O
the	O	O
for	O	O
each	O	O
to	O	O
check	O	O
if	O	O
the	O	O
boundary	O	O
is	O	O
met	O	O
.	O	O
In	O	O
your	O	O
remove	O	O
method	O	O
,	O	O
when	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
if	O	O
it	O	O
needs	O	O
to	O	O
return	O	O
another	O	O
element	O	O
,	O	O
it	O	O
will	O	O
see	O	O
that	O	O
it	O	O
returned	O	O
two	O	O
elements	O	O
,	O	O
and	O	O
now	O	O
after	O	O
one	O	O
element	O	O
was	O	O
removed	O	O
the	O	O
list	O	O
only	O	O
contains	O	O
two	O	O
elements	O	O
.	O	O
So	O	O
all	O	O
is	O	O
peachy	O	O
and	O	O
we	O	O
are	O	O
done	O	O
with	O	O
iterating	O	O
.	O	O
The	O	O
check	O	O
for	O	O
concurrent	O	O
modifications	O	O
does	O	O
not	O	O
occur	O	O
,	O	O
as	O	O
this	O	O
is	O	O
done	O	O
in	O	O
the	O	O
next	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
which	O	O
is	O	O
never	O	O
called	O	O
.	O	O
Next	O	O
we	O	O
get	O	O
to	O	O
the	O	O
second	O	O
loop	O	O
.	O	O
After	O	O
we	O	O
remove	O	O
the	O	O
second	O	O
number	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
method	O	O
will	O	O
check	O	O
again	O	O
if	O	O
can	O	O
return	O	O
more	O	O
values	O	O
.	O	O
It	O	O
has	O	O
returned	O	O
two	O	O
values	O	O
already	O	O
,	O	O
but	O	O
the	O	O
list	O	O
now	O	O
only	O	O
contains	O	O
one	O	O
.	O	O
But	O	O
the	O	O
code	O	O
here	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
1	O	O
!	O	O
=	O	O
2	O	O
,	O	O
so	O	O
we	O	O
continue	O	O
to	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
now	O	O
realizes	O	O
that	O	O
someone	O	O
has	O	O
been	O	O
messing	O	O
with	O	O
the	O	O
list	O	O
and	O	O
fires	O	O
the	O	O
exception	O	O
.	O	O
Hope	O	O
that	O	O
clears	O	O
your	O	O
question	O	O
up	O	O
.	O	O
Question	O	O
-	O	O
6094575	O	O
,	O	O
answer	O	O
-	O	O
26159586	O	O
when	O	O
using	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
)	O	O
getConstructor	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
the	O	O
constructor	O	O
has	O	O
to	O	O
be	O	O
declared	O	O
public	O	O
.	O	O
Otherwise	O	O
a	O	O
NoSuchMethodException	B-api_mention	B-api_mention
is	O	O
thrown	O	O
.	O	O
if	O	O
you	O	O
want	O	O
to	O	O
access	O	O
a	O	O
non	O	O
-	O	O
public	O	O
constructor	O	O
you	O	O
have	O	O
to	O	O
use	O	O
instead	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
)	O	O
getDeclaredConstructor	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
4818699	O	O
,	O	O
answer	O	O
-	O	O
4818916	O	O
The	O	O
primary	O	O
use	O	O
of	O	O
AtomicInteger	B-api_mention	B-api_mention
is	O	O
when	O	O
you	O	O
are	O	O
in	O	O
a	O	O
multithreaded	O	O
context	O	O
and	O	O
you	O	O
need	O	O
to	O	O
perform	O	O
thread	O	O
safe	O	O
operations	O	O
on	O	O
an	O	O
integer	O	O
without	O	O
using	O	O
synchronized	O	O
.	O	O
The	O	O
assignation	O	O
and	O	O
retrieval	O	O
on	O	O
the	O	O
primitive	O	O
type	O	O
int	O	O
are	O	O
already	O	O
atomic	O	O
but	O	O
AtomicInteger	B-api_mention	B-api_mention
comes	O	O
with	O	O
many	O	O
operations	O	O
which	O	O
are	O	O
not	O	O
atomic	O	O
on	O	O
int	O	O
.	O	O
The	O	O
simplest	O	O
are	O	O
the	O	O
getAndXXX	O	O
or	O	O
xXXAndGet	O	O
.	O	O
For	O	O
instance	O	O
getAndIncrement	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
an	O	O
atomic	O	O
equivalent	O	O
to	O	O
i	O	O
+	O	O
+	O	O
which	O	O
is	O	O
not	O	O
atomic	O	O
because	O	O
it	O	O
is	O	O
actually	O	O
a	O	O
short	O	O
cut	O	O
for	O	O
three	O	O
operations	O	O
:	O	O
retrieval	O	O
,	O	O
addition	O	O
and	O	O
assignation	O	B-api_mention
.	O	I-api_mention
compareAndSet	B-api_mention	I-api_mention
is	O	O
very	O	O
useful	O	O
to	O	O
implements	O	O
semaphores	O	O
,	O	O
locks	O	O
,	O	O
latches	O	O
,	O	O
etc	O	O
.	O	O
Using	O	O
the	O	O
AtomicInteger	B-api_mention	B-api_mention
is	O	O
faster	O	O
and	O	O
more	O	O
readable	O	O
than	O	O
performing	O	O
the	O	O
same	O	O
using	O	O
synchronization	O	O
.	O	O
A	O	O
simple	O	O
test	O	O
:	O	O
#	O	O
pre	O	O
On	O	O
my	O	O
PC	O	O
with	O	O
Java	O	O
1	O	O
.	O	O
6	O	O
the	O	O
atomic	O	O
test	O	O
runs	O	O
in	O	O
3	O	O
seconds	O	O
while	O	O
the	O	O
synchronized	O	O
one	O	O
runs	O	O
in	O	O
about	O	O
5	O	O
.	O	O
5	O	O
seconds	O	O
.	O	O
The	O	O
problem	O	O
here	O	O
is	O	O
that	O	O
the	O	O
operation	O	O
to	O	O
synchronize	O	O
(	O	O
notAtomic	O	O
+	O	O
+	O	O
)	O	O
is	O	O
really	O	O
short	O	O
.	O	O
So	O	O
the	O	O
cost	O	O
of	O	O
the	O	O
synchronization	O	O
is	O	O
really	O	O
important	O	O
compared	O	O
to	O	O
the	O	O
operation	O	O
.	O	O
Beside	O	O
atomicity	O	O
AtomicInteger	B-api_mention	B-api_mention
can	O	O
be	O	O
use	O	O
as	O	O
a	O	O
mutable	O	O
version	O	O
of	O	O
Integer	B-api_mention	B-api_mention
for	O	O
instance	O	O
in	O	O
Map	B-api_mention	O
s	O	O
as	O	O
values	O	O
.	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29495113	O	O
#	O	O
blockquote	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
newType	O	O
=	O	O
=	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	O
class	I-api_mention	O
It	O	O
is	O	O
checking	O	O
whether	O	O
variable	O	O
newType	O	O
holds	O	O
a	O	O
reference	O	O
to	O	O
an	O	O
instance	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Class	I-api_mention	I-api_mention
representing	O	O
type	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
The	O	O
casts	O	O
are	O	O
unneeded	O	O
.	O	O
#	O	O
blockquote	O	O
As	O	O
far	O	O
as	O	O
I	O	O
can	O	O
tell	O	O
,	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
could	O	O
be	O	O
used	O	O
in	O	O
both	O	O
cases	O	O
,	O	O
but	O	O
non	O	O
-	O	O
reflective	O	O
ordinary	O	O
array	O	O
construction	O	O
is	O	O
likely	O	O
a	O	O
bit	O	O
faster	O	O
.	O	O
Thus	O	O
,	O	O
I	O	O
suppose	O	O
that	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
is	O	O
called	O	O
out	O	O
as	O	O
a	O	O
special	O	O
case	O	O
for	O	O
performance	O	O
reasons	O	O
,	O	O
but	O	O
I	O	O
have	O	O
no	O	O
idea	O	O
whether	O	O
that	O	O
case	O	O
is	O	O
exercised	O	O
frequently	O	O
enough	O	O
for	O	O
the	O	O
optimization	O	O
to	O	O
be	O	O
important	O	O
.	O	O
#	O	O
blockquote	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
nums	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
You	O	O
should	O	O
use	O	O
it	O	O
when	O	O
you	O	O
need	O	O
to	O	O
copy	O	O
an	O	O
array	O	O
to	O	O
an	O	O
array	O	O
with	O	O
a	O	O
possibly	O	O
different	O	O
(	O	O
but	O	O
compatible	O	O
)	O	O
element	O	O
type	O	O
,	O	O
especially	O	O
when	O	O
the	O	O
element	O	O
types	O	O
are	O	O
not	O	O
statically	O	O
known	O	O
.	O	O
If	O	O
you	O	O
know	O	O
you	O	O
want	O	O
the	O	O
copy	O	O
to	O	O
have	O	O
the	O	O
same	O	O
element	O	O
type	O	O
as	O	O
the	O	O
original	O	O
,	O	O
then	O	O
it	O	O
'	O	O
s	O	O
easier	O	O
to	O	O
use	O	O
the	O	O
original	O	O
array	O	O
'	O	O
s	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Question	O	O
-	O	O
31188231	O	O
,	O	O
answer	O	O
-	O	O
31188818	O	O
Ironically	O	O
default	O	O
methods	O	O
in	O	O
interfaces	O	O
were	O	O
introduced	O	O
to	O	O
allow	O	O
existing	O	O
libraries	O	O
using	O	O
those	O	O
interfaces	O	O
not	O	O
to	O	O
break	O	O
,	O	O
while	O	O
introducing	O	O
massive	O	O
new	O	O
functionality	O	O
in	O	O
the	O	O
interfaces	O	O
.	O	O
(	O	O
backward	O	O
compatibility	O	O
.	O	O
)	O	O
Conflicts	O	O
like	O	O
that	O	O
sort	O	O
method	O	O
might	O	O
arise	O	O
.	O	O
Something	O	O
to	O	O
pay	O	O
for	O	O
the	O	O
extra	O	O
functionality	O	O
.	O	O
In	O	O
your	O	O
case	O	O
also	O	O
something	O	O
to	O	O
investigate	O	O
(	O	O
should	O	O
new	O	O
functionality	O	O
be	O	O
used	O	O
instead	O	O
?	O	O
)	O	O
.	O	O
Java	O	O
forward	O	O
compatibility	O	O
breaks	O	O
are	O	O
little	O	O
,	O	O
more	O	O
in	O	O
its	O	O
typing	O	O
system	O	O
,	O	O
which	O	O
was	O	O
constantly	O	O
enlarged	O	O
.	O	O
First	O	O
with	O	O
generic	O	O
types	O	O
and	O	O
now	O	O
with	O	O
inferred	O	O
types	O	O
from	O	O
functional	O	O
interfaces	O	O
.	O	O
From	O	O
version	O	O
to	O	O
version	O	O
and	O	O
from	O	O
compiler	O	O
to	O	O
compiler	O	O
there	O	O
were	O	O
slight	O	O
differences	O	O
.	O	O
Question	O	O
-	O	O
19431234	O	O
Java	O	O
8	O	O
has	O	O
a	O	O
completely	O	O
new	O	O
API	O	O
for	O	O
date	O	O
and	O	O
time	O	O
.	O	O
One	O	O
of	O	O
the	O	O
most	O	O
useful	O	O
classes	O	O
in	O	O
this	O	O
API	O	O
is	O	O
LocalDateTime	B-api_mention	B-api_mention
,	O	O
for	O	O
holding	O	O
a	O	O
timezone	O	O
-	O	O
independent	O	O
date	O	O
-	O	O
with	O	O
-	O	O
time	O	O
value	O	O
.	O	O
There	O	O
are	O	O
probably	O	O
millions	O	O
of	O	O
lines	O	O
of	O	O
code	O	O
using	O	O
the	O	O
legacy	O	O
class	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
for	O	O
this	O	O
purpose	O	O
.	O	O
As	O	O
such	O	O
,	O	O
when	O	O
interfacing	O	O
old	O	O
and	O	O
new	O	O
code	O	O
there	O	O
will	O	O
be	O	O
a	O	O
need	O	O
for	O	O
converting	O	O
between	O	O
the	O	O
two	O	O
.	O	O
As	O	O
there	O	O
seems	O	O
to	O	O
be	O	O
no	O	O
direct	O	O
methods	O	O
for	O	O
accomplishing	O	O
this	O	O
,	O	O
how	O	O
can	O	O
it	O	O
be	O	O
done	O	O
?	O	O
Question	O	O
-	O	O
12539365	O	O
I	O	O
write	O	O
jUnit	O	O
test	O	O
cases	O	O
for	O	O
3	O	O
purposes	O	O
:	O	O
#	O	O
li	O	O
To	O	O
ensure	O	O
that	O	O
my	O	O
code	O	O
satisfies	O	O
all	O	O
of	O	O
the	O	O
required	O	O
functionality	O	O
,	O	O
under	O	O
all	O	O
(	O	O
or	O	O
most	O	O
of	O	O
)	O	O
the	O	O
input	O	O
combinations	O	O
/	O	O
values	O	O
.	O	O
#	O	O
li	O	O
To	O	O
ensure	O	O
that	O	O
I	O	O
can	O	O
change	O	O
the	O	O
implementation	O	O
,	O	O
and	O	O
rely	O	O
on	O	O
JUnit	O	O
test	O	O
cases	O	O
to	O	O
tell	O	O
me	O	O
that	O	O
all	O	O
my	O	O
functionality	O	O
is	O	O
still	O	O
satisfied	O	O
.	O	O
#	O	O
li	O	O
As	O	O
a	O	O
documentation	O	O
of	O	O
all	O	O
the	O	O
use	O	O
cases	O	O
my	O	O
code	O	O
handles	O	O
,	O	O
and	O	O
act	O	O
as	O	O
a	O	O
spec	O	O
for	O	O
refactoring	O	O
-	O	O
should	O	O
the	O	O
code	O	O
ever	O	O
need	O	O
to	O	O
be	O	O
rewritten	O	O
.	O	O
(	O	O
Refactor	O	O
the	O	O
code	O	O
,	O	O
and	O	O
if	O	O
my	O	O
jUnit	O	O
tests	O	O
fail	O	O
-	O	O
you	O	O
probably	O	O
missed	O	O
some	O	O
use	O	O
case	O	O
)	O	O
.	O	O
I	O	O
do	O	O
not	O	O
understand	O	O
why	O	O
or	O	O
when	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
be	O	O
used	O	O
.	O	O
When	O	O
I	O	O
see	O	O
verify	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
being	O	O
called	O	O
,	O	O
it	O	O
is	O	O
telling	O	O
me	O	O
that	O	O
my	O	O
jUnit	O	O
is	O	O
becoming	O	O
aware	O	O
of	O	O
the	O	O
implementation	O	O
.	O	O
(	O	O
Thus	O	O
changing	O	O
my	O	O
implementation	O	O
would	O	O
break	O	O
my	O	O
jUnits	O	O
,	O	O
even	O	O
though	O	O
my	O	O
functionality	O	O
was	O	O
unaffected	O	O
)	O	O
.	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
:	O	O
#	O	O
li	O	O
What	O	O
should	O	O
be	O	O
the	O	O
guidelines	O	O
for	O	O
appropriate	O	O
usage	O	O
of	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
#	O	O
li	O	O
Is	O	O
it	O	O
fundamentally	O	O
correct	O	O
for	O	O
jUnits	O	O
to	O	O
be	O	O
aware	O	O
of	O	O
,	O	O
or	O	O
tightly	O	O
coupled	O	O
to	O	O
,	O	O
the	O	O
implementation	O	O
of	O	O
the	O	O
class	O	O
under	O	O
test	O	O
?	O	O
Question	O	O
-	O	O
13195797	O	O
I	O	O
want	O	O
to	O	O
delete	O	O
all	O	O
files	O	O
inside	O	O
ABC	O	O
directory	O	O
.	O	O
When	O	O
I	O	O
tried	O	O
with	O	O
FileUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
deleteDirectory	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
;	O	O
it	O	O
also	O	O
deletes	O	O
folder	O	O
ABC	O	O
.	O	O
Is	O	O
there	O	O
a	O	O
one	O	O
liner	O	O
solution	O	O
where	O	O
I	O	O
can	O	O
delete	O	O
files	O	O
inside	O	O
directory	O	O
but	O	O
not	O	O
directory	O	O
?	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16148593	O	O
Use	O	O
Integer	B-api_mention	B-api_mention
instead	O	O
.	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Java	O	O
will	O	O
automatically	O	O
autobox	O	O
your	O	O
int	O	O
primitive	O	O
values	O	O
to	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
.	O	O
Read	O	O
more	O	O
about	O	O
autoboxing	O	O
from	O	O
Oracle	O	O
Java	O	O
documentations	O	O
.	O	O
Question	O	O
-	O	O
22725537	O	O
The	O	O
new	O	O
Java	O	O
8	O	O
stream	O	O
framework	O	O
and	O	O
friends	O	O
make	O	O
for	O	O
some	O	O
very	O	O
concise	O	O
java	O	O
code	O	O
,	O	O
but	O	O
I	O	O
have	O	O
come	O	O
across	O	O
a	O	O
seemingly	O	O
-	O	O
simple	O	O
situation	O	O
that	O	O
is	O	O
tricky	O	O
to	O	O
do	O	O
concisely	O	O
.	O	O
Consider	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
things	O	O
and	O	O
method	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
resolve	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
want	O	O
to	O	O
map	O	O
the	O	O
Thing	O	O
s	O	O
to	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
s	O	O
and	O	O
get	O	O
the	O	O
first	O	O
Other	O	O
.	O	O
The	O	O
obvious	O	O
solution	O	O
would	O	O
be	O	O
to	O	O
use	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
flatMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
flatMap	B-api_mention	B-api_mention
requires	O	O
that	O	O
you	O	O
return	O	O
a	O	O
stream	O	O
,	O	O
and	O	O
Optional	B-api_mention	B-api_mention
doesn	O	O
'	O	O
t	O	O
have	O	O
a	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
(	O	O
or	O	O
is	O	O
it	O	O
a	O	O
Collection	B-api_mention	B-api_mention
or	O	O
provide	O	O
a	O	O
method	O	O
to	O	O
convert	O	O
it	O	O
to	O	O
or	O	O
view	O	O
it	O	O
as	O	O
a	O	O
Collection	B-api_mention	B-api_mention
)	O	O
.	O	O
The	O	O
best	O	O
I	O	O
can	O	O
come	O	O
up	O	O
with	O	O
is	O	O
this	O	O
:	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
that	O	O
seems	O	O
awfully	O	O
long	O	O
-	O	O
winded	O	O
for	O	O
what	O	O
seems	O	O
like	O	O
a	O	O
very	O	O
common	O	O
case	O	O
.	O	O
Anyone	O	O
have	O	O
a	O	O
better	O	O
idea	O	O
?	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
16637740	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
can	O	O
be	O	O
implemented	O	O
to	O	O
be	O	O
faster	O	O
than	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
,	O	O
because	O	O
the	O	O
iterable	O	O
knows	O	O
the	O	O
best	O	O
way	O	O
to	O	O
iterate	O	O
its	O	O
elements	O	O
,	O	O
as	O	O
opposed	O	O
to	O	O
the	O	O
standard	O	O
iterator	O	O
way	O	O
.	O	O
So	O	O
the	O	O
difference	O	O
is	O	O
loop	O	O
internally	O	O
or	O	O
loop	O	O
externally	O	O
.	O	O
For	O	O
example	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
be	O	O
simply	O	O
implemented	O	O
as	O	O
#	O	O
pre	O	O
as	O	O
opposed	O	O
to	O	O
the	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
which	O	O
requires	O	O
a	O	O
lot	O	O
of	O	O
scaffolding	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
we	O	O
also	O	O
need	O	O
to	O	O
account	O	O
for	O	O
two	O	O
overhead	O	O
costs	O	O
by	O	O
using	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
one	O	O
is	O	O
making	O	O
the	O	O
lambda	O	O
object	O	O
,	O	O
the	O	O
other	O	O
is	O	O
invoking	O	O
the	O	O
lambda	O	O
method	O	O
.	O	O
They	O	O
are	O	O
probably	O	O
not	O	O
significant	O	O
.	O	O
see	O	O
also	O	O
#	O	O
a	O	O
for	O	O
comparing	O	O
internal	O	O
/	O	O
external	O	O
iterations	O	O
for	O	O
different	O	O
use	O	O
cases	O	O
.	O	O
Question	O	O
-	O	O
13291076	O	O
,	O	O
answer	O	O
-	O	O
13291109	O	O
It	O	O
really	O	O
depends	O	O
on	O	O
what	O	O
you	O	O
want	O	O
to	O	O
do	O	O
with	O	O
the	O	O
returned	O	O
value	O	O
:	O	O
#	O	O
li	O	O
If	O	O
you	O	O
need	O	O
to	O	O
get	O	O
the	O	O
exact	O	O
name	O	O
used	O	O
to	O	O
declare	O	O
the	O	O
enum	O	O
constant	O	O
,	O	O
you	O	O
should	O	O
use	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
toString	B-api_mention	B-api_mention
may	O	O
have	O	O
been	O	O
overriden	O	O
#	O	O
li	O	O
If	O	O
you	O	O
want	O	O
to	O	O
print	O	O
the	O	O
enum	O	O
constant	O	O
in	O	O
a	O	O
user	O	O
friendly	O	O
way	O	O
,	O	O
you	O	O
should	O	O
use	O	O
toString	B-api_mention	B-api_mention
which	O	O
may	O	O
have	O	O
been	O	O
overriden	O	O
(	O	O
or	O	O
not	O	O
!	O	O
)	O	O
.	O	O
When	O	O
I	O	O
feel	O	O
that	O	O
it	O	O
might	O	O
be	O	O
confusing	O	O
,	O	O
I	O	O
provide	O	O
a	O	O
more	O	O
specific	O	O
getXXX	O	O
method	O	O
,	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
8579702	O	O
If	O	O
you	O	O
just	O	O
invoke	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
directly	O	O
,	O	O
it	O	O
'	O	O
s	O	O
executed	O	O
on	O	O
the	O	O
calling	O	O
thread	O	O
,	O	O
just	O	O
like	O	O
any	O	O
other	O	O
method	O	O
call	O	O
.	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
required	O	O
to	O	O
actually	O	O
create	O	O
a	O	O
new	O	O
thread	O	O
so	O	O
that	O	O
the	O	O
runnable	O	O
'	O	O
s	O	O
run	O	O
method	O	O
is	O	O
executed	O	O
in	O	O
parallel	O	O
.	O	O
Question	O	O
-	O	O
18636561	O	O
,	O	O
answer	O	O
-	O	O
18824858	O	O
Whenever	O	O
a	O	O
new	O	O
keyword	O	O
is	O	O
used	O	O
it	O	O
Creates	O	O
a	O	O
Object	B-api_mention	B-api_mention
at	O	O
the	O	O
Heap	O	O
1	O	O
)	O	O
StringBuilder	B-api_mention	B-api_mention
sample	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
2	O	O
)	O	O
StringBuilder	B-api_mention	B-api_mention
referToSample	O	O
=	O	O
sample	O	O
;	O	O
In	O	O
2	O	O
)	O	O
the	O	O
Reference	O	O
of	O	O
referSample	O	O
is	O	O
created	O	O
on	O	O
same	O	O
object	O	O
sample	O	O
thus	O	O
referToSample	O	O
=	O	O
null	O	O
;	O	O
is	O	O
Nulling	O	O
Only	O	O
the	O	O
referSample	O	O
Reference	O	O
giving	O	O
no	O	O
effect	O	O
to	O	O
sample	O	O
that	O	O
'	O	O
s	O	O
why	O	O
you	O	O
are	O	O
not	O	O
getting	O	O
NULL	O	O
Pointer	O	O
Exception	O	O
Thanks	O	O
to	O	O
Java	O	O
'	O	O
s	O	O
Garbage	O	O
Collection	O	B-api_mention
Question	O	O
-	O	O
7693324	O	O
,	O	O
answer	O	O
-	O	O
7693341	O	O
To	O	O
convert	O	O
a	O	O
String	B-api_mention	B-api_mention
to	O	O
a	O	O
Long	B-api_mention	B-api_mention
(	O	O
object	O	O
)	O	O
,	O	O
use	O	O
Long	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
longValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
See	O	O
link	O	O
Question	O	O
-	O	O
22561614	O	O
,	O	O
answer	O	O
-	O	O
22561853	O	O
Let	O	O
me	O	O
explain	O	O
what	O	O
is	O	O
happening	O	O
here	O	O
,	O	O
because	O	O
it	O	O
isn	O	O
'	O	O
t	O	O
obvious	O	O
!	O	O
First	O	O
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
accepts	O	O
an	O	O
instance	O	O
of	O	O
Comparator	B-api_mention	B-api_mention
so	O	O
that	O	O
items	O	O
in	O	O
the	O	O
stream	O	O
can	O	O
be	O	O
compared	O	O
against	O	O
each	O	O
other	O	O
to	O	O
find	O	O
the	O	O
minimum	O	O
or	O	O
maximum	O	O
,	O	O
in	O	O
some	O	O
optimal	O	O
order	O	O
that	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
worry	O	O
too	O	O
much	O	O
about	O	O
.	O	O
So	O	O
the	O	O
question	O	O
is	O	O
,	O	O
of	O	O
course	O	O
,	O	O
why	O	O
is	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
accepted	O	O
?	O	O
After	O	O
all	O	O
it	O	O
'	O	O
s	O	O
not	O	O
a	O	O
comparator	O	O
!	O	O
The	O	O
answer	O	O
is	O	O
in	O	O
the	O	O
way	O	O
that	O	O
the	O	O
new	O	O
lambda	O	O
functionality	O	O
works	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
It	O	O
relies	O	O
on	O	O
a	O	O
concept	O	O
which	O	O
is	O	O
informally	O	O
known	O	O
as	O	O
"	O	O
single	O	O
abstract	O	O
method	O	O
"	O	O
interfaces	O	O
,	O	O
or	O	O
"	O	O
SAM	O	O
"	O	O
interfaces	O	O
.	O	O
The	O	O
idea	O	O
is	O	O
that	O	O
any	O	O
interface	O	O
with	O	O
one	O	O
abstract	O	O
method	O	O
can	O	O
be	O	O
automatically	O	O
implemented	O	O
by	O	O
any	O	O
lambda	O	O
-	O	O
or	O	O
method	O	O
reference	O	O
-	O	O
whose	O	O
method	O	O
signature	O	O
is	O	O
a	O	O
match	O	O
for	O	O
the	O	O
one	O	O
method	O	O
on	O	O
the	O	O
interface	O	O
.	O	O
So	O	O
examining	O	O
the	O	O
Comparator	B-api_mention	B-api_mention
interface	O	O
(	O	O
simple	O	O
version	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
a	O	O
method	O	O
is	O	O
looking	O	O
for	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
then	O	O
it	O	O
'	O	O
s	O	O
essentially	O	O
looking	O	O
for	O	O
this	O	O
signature	O	O
:	O	O
int	O	O
xxx	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
I	O	O
use	O	O
"	O	O
xxx	O	O
"	O	O
because	O	O
the	O	O
method	O	O
name	O	O
is	O	O
not	O	O
used	O	O
for	O	O
matching	O	O
purposes	O	O
.	O	O
Therefore	O	O
,	O	O
both	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
close	O	O
enough	O	O
that	O	O
autoboxing	O	O
will	O	O
allow	O	O
this	O	O
to	O	O
appear	O	O
as	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
in	O	O
a	O	O
method	O	O
context	O	O
.	O	O
Question	O	O
-	O	O
32356762	O	O
Is	O	O
there	O	O
a	O	O
good	O	O
reason	O	O
that	O	O
the	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
the	O	O
java	O	O
.	O	O
utils	O	O
package	O	O
returns	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
instead	O	O
of	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
?	O	O
Obviously	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
a	O	O
List	B-api_mention	B-api_mention
,	O	O
but	O	O
I	O	O
'	O	O
m	O	O
under	O	O
the	O	O
impression	O	O
that	O	O
it	O	O
'	O	O
s	O	O
generally	O	O
good	O	O
practice	O	O
to	O	O
return	O	O
the	O	O
interface	O	O
type	O	O
instead	O	O
of	O	O
implementation	O	O
type	O	O
.	O	O
Question	O	O
-	O	O
20918650	O	O
,	O	O
answer	O	O
-	O	O
20918709	O	O
A	O	O
subsequent	O	O
post	O	O
by	O	O
the	O	O
same	O	O
user	O	O
in	O	O
the	O	O
same	O	O
conversation	O	O
:	O	O
#	O	O
blockquote	O	O
(	O	O
This	O	O
was	O	O
in	O	O
response	O	O
to	O	O
a	O	O
statement	O	O
by	O	O
another	O	O
user	O	O
,	O	O
namely	O	O
that	O	O
"	O	O
it	O	O
seems	O	O
in	O	O
some	O	O
situations	O	O
'	O	O
new	O	O
T	B-api_mention	O
'	O	O
would	O	O
be	O	O
better	O	O
"	O	O
,	O	O
the	O	O
idea	O	O
being	O	O
that	O	O
new	O	O
T	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
impossible	O	O
due	O	O
to	O	O
type	O	O
erasure	O	O
.	O	O
(	O	O
This	O	O
is	O	O
debatable	O	O
—	O	O
even	O	O
if	O	O
T	B-api_mention	O
were	O	O
available	O	O
at	O	O
runtime	O	O
,	O	O
it	O	O
could	O	O
be	O	O
an	O	O
abstract	O	O
class	O	O
or	O	O
interface	O	O
,	O	O
or	O	O
it	O	O
could	O	O
be	O	O
Void	O	O
,	O	O
or	O	O
it	O	O
could	O	O
lack	O	O
a	O	O
no	O	O
-	O	O
arg	O	O
constructor	O	O
,	O	O
or	O	O
its	O	O
no	O	O
-	O	O
arg	O	O
constructor	O	O
could	O	O
be	O	O
private	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
because	O	O
it	O	O
'	O	O
s	O	O
supposed	O	O
to	O	O
be	O	O
a	O	O
singleton	O	O
class	O	O
)	O	O
,	O	O
or	O	O
its	O	O
no	O	O
-	O	O
arg	O	O
constructor	O	O
could	O	O
specify	O	O
a	O	O
checked	O	O
exception	O	O
that	O	O
the	O	O
generic	O	O
method	O	O
does	O	O
not	O	O
catch	O	O
or	O	O
specify	O	O
—	O	O
but	O	O
that	O	O
was	O	O
the	O	O
premise	O	O
.	O	O
Regardless	O	O
,	O	O
it	O	O
'	O	O
s	O	O
true	O	O
that	O	O
without	O	O
erasure	O	O
you	O	O
could	O	O
at	O	O
least	O	O
write	O	O
T	B-api_mention	O
.	I-api_mention	O
class	I-api_mention	O
.	I-api_mention	B-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
handles	O	O
those	O	O
issues	O	O
.	O	O
)	O	O
)	O	O
This	O	O
view	O	O
,	O	O
that	O	O
types	O	O
are	O	O
isomorphic	O	O
to	O	O
propositions	O	O
,	O	O
suggests	O	O
that	O	O
the	O	O
user	O	O
has	O	O
a	O	O
background	O	O
in	O	O
formal	O	O
type	O	O
theory	O	O
.	O	O
(	O	O
S	O	O
)	O	O
he	O	O
very	O	O
likely	O	O
does	O	O
not	O	O
like	O	O
"	O	O
dynamic	O	O
types	O	O
"	O	O
or	O	O
"	O	O
runtime	O	O
-	O	O
types	O	O
"	O	O
and	O	O
would	O	O
prefer	O	O
a	O	O
Java	O	O
without	O	O
downcasts	O	O
and	O	O
instanceof	B-api_mention	O
and	O	O
reflection	O	O
and	O	O
so	O	O
on	O	O
.	O	O
(	O	O
Think	O	O
of	O	O
a	O	O
language	O	O
like	O	O
Standard	O	O
ML	O	O
,	O	O
which	O	O
has	O	O
a	O	O
very	O	O
rich	O	O
(	O	O
static	O	O
)	O	O
type	O	O
system	O	O
and	O	O
whose	O	O
dynamic	O	O
semantics	O	O
do	O	O
not	O	O
depend	O	O
on	O	O
any	O	O
type	O	O
information	O	O
whatsoever	O	O
.	O	O
)	O	O
It	O	O
'	O	O
s	O	O
worth	O	O
keeping	O	O
in	O	O
mind	O	O
,	O	O
by	O	O
the	O	O
way	O	O
,	O	O
that	O	O
the	O	O
user	O	O
is	O	O
trolling	O	O
:	O	O
while	O	O
(	O	O
s	O	O
)	O	O
he	O	O
likely	O	O
sincerely	O	O
prefers	O	O
(	O	O
statically	O	O
)	O	O
typed	O	O
languages	O	O
,	O	O
(	O	O
s	O	O
)	O	O
he	O	O
is	O	O
not	O	O
sincerely	O	O
trying	O	O
to	O	O
persuade	O	O
others	O	O
of	O	O
that	O	O
view	O	O
.	O	O
Rather	O	O
,	O	O
the	O	O
main	O	O
purpose	O	O
of	O	O
the	O	O
original	O	O
tweet	O	O
was	O	O
to	O	O
mock	O	O
those	O	O
who	O	O
disagree	O	O
,	O	O
and	O	O
after	O	O
some	O	O
of	O	O
those	O	O
disagree	O	O
-	O	O
ers	O	O
chimed	O	O
in	O	O
,	O	O
the	O	O
user	O	O
posted	O	O
follow	O	O
-	O	O
up	O	O
tweets	O	O
such	O	O
as	O	O
"	O	O
the	O	O
reason	O	O
java	O	O
has	O	O
type	O	O
erasure	O	O
is	O	O
that	O	O
Wadler	O	O
et	O	O
al	O	O
know	O	O
what	O	O
they	O	O
are	O	O
doing	O	O
,	O	O
unlike	O	O
users	O	O
of	O	O
java	O	O
"	O	O
.	O	O
Unfortunately	O	O
,	O	O
this	O	O
makes	O	O
it	O	O
hard	O	O
to	O	O
find	O	O
out	O	O
what	O	O
(	O	O
s	O	O
)	O	O
he	O	O
'	O	O
s	O	O
actually	O	O
thinking	O	O
;	O	O
but	O	O
fortunately	O	O
,	O	O
it	O	O
also	O	O
likely	O	O
means	O	O
that	O	O
it	O	O
'	O	O
s	O	O
not	O	O
very	O	O
important	O	O
to	O	O
do	O	O
so	O	O
.	O	O
People	O	O
with	O	O
actual	O	O
depth	O	O
to	O	O
their	O	O
views	O	O
don	O	O
'	O	O
t	O	O
generally	O	O
resort	O	O
to	O	O
trolls	O	O
that	O	O
are	O	O
quite	O	O
this	O	O
content	O	O
-	O	O
free	O	O
.	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8727998	O	O
Another	O	O
point	O	O
is	O	O
the	O	O
time	O	O
complexity	O	O
of	O	O
insert	O	O
operations	O	O
.	O	O
For	O	O
a	O	O
list	O	O
insert	O	O
,	O	O
one	O	O
expects	O	O
a	O	O
complexity	O	O
of	O	O
O	O	O
(	O	O
1	O	O
)	O	O
.	O	O
But	O	O
this	O	O
could	O	O
not	O	O
be	O	O
guaranteed	O	O
with	O	O
a	O	O
sorted	O	O
list	O	O
.	O	O
And	O	O
the	O	O
most	O	O
important	O	O
point	O	O
is	O	O
that	O	O
lists	O	O
assume	O	O
nothing	O	O
about	O	O
their	O	O
elements	O	O
.	O	O
For	O	O
example	O	O
,	O	O
you	O	O
can	O	O
make	O	O
lists	O	O
of	O	O
things	O	O
that	O	O
do	O	O
not	O	O
implement	O	O
equals	B-api_mention	B-api_mention
or	O	O
compare	B-api_mention	O
.	O	O
Question	O	O
-	O	O
33147339	O	O
I	O	O
was	O	O
reading	O	O
Java	O	O
'	O	O
s	O	O
ArrayList	B-api_mention	B-api_mention
source	O	O
code	O	O
and	O	O
noticed	O	O
some	O	O
comparisons	O	O
in	O	O
if	O	O
-	O	O
statements	O	O
.	O	O
In	O	O
Java	O	O
7	O	O
,	O	O
the	O	O
method	O	O
grow	B-api_mention	O
(	I-api_mention	O
int	I-api_mention	O
)	I-api_mention	O
uses	O	O
if	O	O
(	O	O
args	O	O
)	O	O
newCapacity	O	O
=	O	O
minCapacity	O	O
;	O	O
In	O	O
Java	O	O
6	O	O
,	O	O
grow	O	O
didn	O	O
'	O	O
t	O	O
exist	O	O
.	O	O
The	O	O
method	O	O
ensureCapacity	O	B-api_mention
(	O	I-api_mention
int	O	I-api_mention
)	O	I-api_mention
however	O	O
uses	O	O
if	O	O
(	O	O
args	O	O
)	O	O
newCapacity	O	O
=	O	O
minCapacity	O	O
;	O	O
What	O	O
was	O	O
the	O	O
reason	O	O
behind	O	O
the	O	O
change	O	O
?	O	O
Was	O	O
it	O	O
a	O	O
performance	O	O
issue	O	O
or	O	O
just	O	O
a	O	O
style	O	O
?	O	O
I	O	O
could	O	O
imagine	O	O
that	O	O
comparing	O	O
against	O	O
zero	O	O
is	O	O
faster	O	O
,	O	O
but	O	O
performing	O	O
a	O	O
complete	O	O
subtraction	O	O
just	O	O
to	O	O
check	O	O
whether	O	O
it	O	O
'	O	O
s	O	O
negative	O	O
seems	O	O
a	O	O
bit	O	O
overkill	O	O
to	O	O
me	O	O
.	O	O
Also	O	O
in	O	O
terms	O	O
of	O	O
bytecode	O	O
,	O	O
this	O	O
would	O	O
involve	O	O
two	O	O
instructions	O	O
(	O	O
ISUB	O	O
and	O	O
IF	O	O
_	O	O
ICMPGE	O	O
)	O	O
instead	O	O
of	O	O
one	O	O
(	O	O
IFGE	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29098447	O	O
The	O	O
solution	O	O
is	O	O
to	O	O
use	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
.	O	O
To	O	O
create	O	O
a	O	O
Collector	B-api_mention	B-api_mention
using	O	O
its	O	O
builder	O	O
pattern	O	O
is	O	O
already	O	O
given	O	O
as	O	O
solution	O	O
.	O	O
The	O	O
alternative	O	O
is	O	O
the	O	O
other	O	O
overloaded	O	O
collect	O	O
being	O	O
a	O	O
tiny	O	O
bit	O	O
more	O	O
primitive	O	O
.	O	O
#	O	O
pre	O	O
As	O	O
one	O	O
sees	O	O
,	O	O
I	O	O
make	O	O
a	O	O
list	O	O
of	O	O
string	O	O
lists	O	O
,	O	O
where	O	O
there	O	O
always	O	O
is	O	O
at	O	O
least	O	O
one	O	O
last	O	O
(	O	O
empty	O	O
)	O	O
string	O	O
list	O	O
.	O	O
#	O	O
li	O	O
The	O	O
first	O	O
function	O	O
creates	O	O
a	O	O
starting	O	O
list	O	O
of	O	O
string	O	O
lists	O	O
.	O	O
It	O	O
specifies	O	O
the	O	O
result	O	O
(	O	O
typed	O	O
)	O	O
object	O	O
.	O	O
#	O	O
li	O	O
The	O	O
second	O	O
function	O	O
is	O	O
called	O	O
to	O	O
process	O	O
each	O	O
element	O	O
.	O	O
It	O	O
is	O	O
an	O	O
action	O	O
on	O	O
the	O	O
partial	O	O
result	O	O
and	O	O
an	O	O
element	O	O
.	O	O
#	O	O
li	O	O
The	O	O
third	O	O
is	O	O
not	O	O
really	O	O
used	O	O
,	O	O
it	O	O
comes	O	O
into	O	O
play	O	O
on	O	O
parallelising	O	O
the	O	O
processing	O	O
,	O	O
when	O	O
partial	O	O
results	O	O
must	O	O
be	O	O
combined	O	O
.	O	O
A	O	O
solution	O	O
with	O	O
an	O	O
accumulator	O	O
:	O	O
As	O	O
@	O	O
StuartMarks	O	O
points	O	O
out	O	O
,	O	O
the	O	O
combiner	O	O
does	O	O
not	O	O
fullfill	O	O
the	O	O
contract	O	O
for	O	O
parallelism	O	O
.	O	O
Due	O	O
to	O	O
the	O	O
comment	O	O
of	O	O
@	O	O
ArnaudDenoyelle	O	O
a	O	O
version	O	O
using	O	O
reduce	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
The	O	O
first	O	O
parameter	O	O
is	O	O
the	O	O
accumulated	O	O
object	O	O
.	O	O
#	O	O
li	O	O
The	O	O
second	O	O
function	O	O
accumulates	O	O
.	O	O
#	O	O
li	O	O
The	O	O
third	O	O
is	O	O
the	O	O
aforementioned	O	O
combiner	O	O
.	O	O
Question	O	O
-	O	O
31471444	O	O
,	O	O
answer	O	O
-	O	O
31471530	O	O
You	O	O
should	O	O
not	O	O
.	O	O
The	O	O
INTEGER	O	O
_	O	O
ONE	O	O
name	O	O
is	O	O
no	O	O
more	O	O
meaningful	O	O
than	O	O
1	O	O
.	O	O
If	O	O
however	O	O
this	O	O
value	O	O
has	O	O
some	O	O
other	O	O
meaning	O	O
(	O	O
for	O	O
example	O	O
,	O	O
month	O	O
in	O	O
the	O	O
year	O	O
)	O	O
,	O	O
then	O	O
using	O	O
a	O	O
constant	O	O
(	O	O
like	O	O
Calendar	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
FEBRUARY	I-api_mention	I-api_mention
)	O	I-api_mention
will	O	O
make	O	O
your	O	O
code	O	O
clearer	O	O
.	O	O
I	O	O
can	O	O
guess	O	O
that	O	O
this	O	O
constant	O	O
in	O	O
Commons	O	O
Math	O	O
library	O	O
was	O	O
created	O	O
in	O	O
Java	O	O
1	O	O
.	O	O
4	O	O
when	O	O
there	O	O
were	O	O
no	O	O
Integer	B-api_mention	B-api_mention
cache	O	O
and	O	O
autoboxing	O	O
,	O	O
so	O	O
it	O	O
had	O	O
sense	O	O
in	O	O
terms	O	O
that	O	O
you	O	O
may	O	O
reuse	O	O
the	O	O
same	O	O
Integer	B-api_mention	B-api_mention
object	O	O
(	O	O
not	O	O
primitive	O	O
int	O	O
)	O	O
in	O	O
different	O	O
places	O	O
to	O	O
save	O	O
memory	O	O
.	O	O
So	O	O
it	O	O
was	O	O
added	O	O
for	O	O
performance	O	O
reasons	O	O
,	O	O
not	O	O
for	O	O
code	O	O
clarity	O	O
.	O	O
Now	O	O
it	O	O
'	O	O
s	O	O
obsolete	O	O
:	O	O
even	O	O
if	O	O
you	O	O
need	O	O
an	O	O
Integer	B-api_mention	B-api_mention
object	O	O
,	O	O
you	O	O
can	O	O
use	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
implicit	O	O
autoboxing	O	O
and	O	O
get	O	O
the	O	O
cached	O	O
one	O	O
.	O	O
Question	O	O
-	O	O
21375659	O	O
,	O	O
answer	O	O
-	O	O
21375716	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
irrespective	O	O
of	O	O
how	O	O
it	O	O
is	O	O
instantiated	O	O
1	O	O
)	O	O
Short	O	O
answer	O	O
is	O	O
yes	O	O
,	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
immutable	O	O
too	O	O
.	O	O
Because	O	O
every	O	O
possible	O	O
mutable	O	O
operation	O	O
(	O	O
like	O	O
replace	O	O
,	O	O
toLowerCase	B-api_mention	O
etcetra	O	O
)	O	O
that	O	O
you	O	O
perform	O	O
on	O	O
String	B-api_mention	B-api_mention
does	O	O
not	O	O
affect	O	O
the	O	O
original	O	O
String	B-api_mention	B-api_mention
instance	O	O
and	O	O
returns	O	O
you	O	O
a	O	O
new	O	O
instance	O	O
.	O	O
You	O	O
may	O	O
check	O	O
this	O	O
in	O	O
Javadoc	O	O
for	O	O
String	B-api_mention	B-api_mention
.	O	O
Each	O	O
public	O	O
method	O	O
of	O	O
String	B-api_mention	B-api_mention
that	O	O
is	O	O
exposed	O	O
returns	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
instance	O	O
and	O	O
does	O	O
not	O	O
alter	O	O
the	O	O
present	O	O
instance	O	O
on	O	O
which	O	O
you	O	O
called	O	O
the	O	O
method	O	O
.	O	O
This	O	O
is	O	O
very	O	O
helpful	O	O
in	O	O
Multi	O	O
-	O	O
threaded	O	O
environment	O	O
as	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
think	O	O
about	O	O
mutability	O	O
(	O	O
someone	O	O
will	O	O
change	O	O
the	O	O
value	O	O
)	O	O
every	O	O
time	O	O
you	O	O
pass	O	O
or	O	O
share	O	O
the	O	O
String	B-api_mention	B-api_mention
around	O	O
.	O	O
String	B-api_mention	B-api_mention
can	O	O
easily	O	O
be	O	O
the	O	O
most	O	O
used	O	O
data	O	O
type	O	O
,	O	O
so	O	O
the	O	O
designers	O	O
have	O	O
blessed	O	O
us	O	O
all	O	O
to	O	O
not	O	O
think	O	O
about	O	O
mutability	O	O
everytime	O	O
and	O	O
saved	O	O
us	O	O
a	O	O
lot	O	O
of	O	O
pain	O	O
.	O	O
Immutability	O	O
allowed	O	O
String	B-api_mention	B-api_mention
pool	O	O
or	O	O
caching	O	O
It	O	O
is	O	O
because	O	O
of	O	O
immutability	O	O
property	O	O
that	O	O
the	O	O
internal	O	O
pool	O	O
of	O	O
string	O	O
was	O	O
possible	O	O
,	O	O
as	O	O
when	O	O
same	O	O
String	B-api_mention	B-api_mention
value	O	O
is	O	O
required	O	O
at	O	O
some	O	O
other	O	O
place	O	O
then	O	O
that	O	O
immutable	O	O
reference	O	O
is	O	O
returned	O	O
.	O	O
If	O	O
String	B-api_mention	B-api_mention
would	O	O
have	O	O
been	O	O
mutable	O	O
then	O	O
it	O	O
would	O	O
not	O	O
have	O	O
been	O	O
possible	O	O
to	O	O
share	O	O
String	B-api_mention	B-api_mention
s	O	O
like	O	O
this	O	O
to	O	O
save	O	O
memory	O	O
.	O	O
String	B-api_mention	B-api_mention
immutablity	O	O
was	O	O
not	O	O
because	O	O
of	O	O
pooling	O	O
,	O	O
but	O	O
immutability	O	O
has	O	O
more	O	O
benefits	O	O
attached	O	O
to	O	O
it	O	O
.	O	O
String	B-api_mention	B-api_mention
interning	O	O
or	O	O
pooling	O	O
is	O	O
an	O	O
example	O	O
of	O	O
Flyweight	O	O
Design	O	O
pattern	O	O
2	O	O
)	O	O
Yes	O	O
it	O	O
will	O	O
be	O	O
interned	O	O
like	O	O
any	O	O
other	O	O
String	B-api_mention	B-api_mention
as	O	O
a	O	O
blank	O	O
String	B-api_mention	B-api_mention
is	O	O
also	O	O
as	O	O
much	O	O
a	O	O
String	B-api_mention	B-api_mention
as	O	O
other	O	O
String	B-api_mention	B-api_mention
instances	O	O
.	O	O
References	O	O
:	O	O
#	O	O
li	O	O
Immutability	O	O
benefits	O	O
of	O	O
String	B-api_mention	B-api_mention
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
22593693	O	O
There	O	O
seem	O	O
to	O	O
be	O	O
many	O	O
questions	O	O
about	O	O
this	O	O
issue	O	O
with	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Scanner	I-api_mention	I-api_mention
.	O	O
I	O	O
think	O	O
a	O	O
more	O	O
readable	O	O
/	O	O
idiomatic	O	O
solution	O	O
would	O	O
be	O	O
to	O	O
call	O	O
scanner	O	B-api_mention
.	B-api_mention	I-api_mention
skip	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
drop	O	O
any	O	O
newline	O	O
characters	O	O
after	O	O
calling	O	O
nextInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
18448671	O	O
,	O	O
answer	O	O
-	O	O
18448699	O	O
Use	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
and	O	O
call	O	O
remove	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29945627	O	O
,	O	O
answer	O	O
-	O	O
29946155	O	O
The	O	O
syntax	O	O
you	O	O
'	O	O
re	O	O
after	O	O
is	O	O
possible	O	O
with	O	O
a	O	O
little	O	O
helper	O	O
function	O	O
that	O	O
converts	O	O
a	O	O
Runnable	B-api_mention	B-api_mention
into	O	O
Action	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	O	O
you	O	O
can	O	O
place	O	O
it	O	O
in	O	O
Action	B-api_mention	O
for	O	O
example	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
10631715	O	O
,	O	O
answer	O	O
-	O	O
10631738	O	O
You	O	O
could	O	O
do	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Basically	O	O
the	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
will	O	O
split	O	O
the	O	O
string	O	O
according	O	O
to	O	O
(	O	O
in	O	O
this	O	O
case	O	O
)	O	O
delimiter	O	O
you	O	O
are	O	O
passing	O	O
and	O	O
will	O	O
return	O	O
an	O	O
array	O	O
of	O	O
strings	O	O
.	O	O
However	O	O
,	O	O
you	O	O
seem	O	O
to	O	O
be	O	O
after	O	O
a	O	O
List	B-api_mention	B-api_mention
of	O	O
Strings	B-api_mention	O
rather	O	O
than	O	O
an	O	O
array	O	O
,	O	O
so	O	O
the	O	O
array	O	O
must	O	O
be	O	O
turned	O	O
into	O	O
a	O	O
list	O	O
by	O	O
using	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
utility	O	O
.	O	O
Just	O	O
as	O	O
an	O	O
FYI	O	O
you	O	O
could	O	O
also	O	O
do	O	O
something	O	O
like	O	O
so	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
it	O	O
is	O	O
usually	O	O
better	O	O
practice	O	O
to	O	O
program	O	O
to	O	O
an	O	O
interface	O	O
rather	O	O
than	O	O
to	O	O
an	O	O
actual	O	O
concrete	O	O
implementation	O	O
,	O	O
so	O	O
I	O	O
would	O	O
recommend	O	O
the	O	O
1st	O	O
option	O	O
.	O	O
Question	O	O
-	O	O
27908213	O	O
Are	O	O
enum	O	O
names	O	O
interned	O	O
in	O	O
Java	O	O
?	O	O
I	O	O
.	O	O
e	O	O
.	O	O
is	O	O
it	O	O
guaranteed	O	O
that	O	O
enum1	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
enum2	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
case	O	O
of	O	O
the	O	O
same	O	O
name	O	O
?	O	O
And	O	O
is	O	O
it	O	O
safe	O	O
to	O	O
compare	O	O
enum	O	O
.	B-api_mention	O
name	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
a	O	O
String	B-api_mention	B-api_mention
that	O	O
is	O	O
guaranteed	O	O
to	O	O
be	O	O
interned	O	O
.	O	O
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
5243798	O	O
#	O	O
li	O	O
getParameter	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
http	O	O
request	O	O
parameters	O	O
.	O	O
Those	O	O
passed	O	O
from	O	O
the	O	O
client	O	O
to	O	O
the	O	O
server	O	O
.	O	O
For	O	O
example	O	O
http	O	O
:	O	O
/	O	O
/	O	O
example	O	O
.	O	O
com	O	O
/	O	O
servlet	O	O
?	O	O
parameter	O	O
=	O	O
1	O	O
.	O	O
Can	O	O
only	O	O
return	O	O
String	B-api_mention	B-api_mention
#	O	O
li	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
for	O	O
server	O	O
-	O	O
side	O	O
usage	O	O
only	O	O
-	O	O
you	O	O
fill	O	O
the	O	O
request	O	O
with	O	O
attributes	O	O
that	O	O
you	O	O
can	O	O
use	O	O
within	O	O
the	O	O
same	O	O
request	O	O
.	O	O
For	O	O
example	O	O
-	O	O
you	O	O
set	O	O
an	O	O
attribute	O	O
in	O	O
a	O	O
servlet	O	O
,	O	O
and	O	O
read	O	O
it	O	O
from	O	O
a	O	O
JSP	O	O
.	O	O
Can	O	O
be	O	O
used	O	O
for	O	O
any	O	O
object	O	O
,	O	O
not	O	O
just	O	O
string	O	O
.	O	O
Question	O	O
-	O	O
24676877	O	O
,	O	O
answer	O	O
-	O	O
24679745	O	O
The	O	O
answer	O	O
is	O	O
,	O	O
as	O	O
always	O	O
,	O	O
"	O	O
it	O	O
depends	O	O
"	O	O
.	O	O
It	O	O
depends	O	O
on	O	O
how	O	O
big	O	O
the	O	O
returned	O	O
collection	O	O
will	O	O
be	O	O
.	O	O
It	O	O
depends	O	O
on	O	O
whether	O	O
the	O	O
result	O	O
changes	O	O
over	O	O
time	O	O
,	O	O
and	O	O
how	O	O
important	O	O
consistency	O	O
of	O	O
the	O	O
returned	O	O
result	O	O
is	O	O
.	O	O
And	O	O
it	O	O
depends	O	O
very	O	O
much	O	O
on	O	O
how	O	O
the	O	O
user	O	O
is	O	O
likely	O	O
to	O	O
use	O	O
the	O	O
answer	O	O
.	O	O
First	O	O
,	O	O
note	O	O
that	O	O
you	O	O
can	O	O
always	O	O
get	O	O
a	O	O
Collection	B-api_mention	B-api_mention
from	O	O
a	O	O
Stream	B-api_mention	B-api_mention
,	O	O
and	O	O
vice	O	O
versa	O	O
:	O	O
/	O	O
/	O	O
If	O	O
API	O	O
returns	O	O
Collection	B-api_mention	B-api_mention
,	O	O
convert	O	O
with	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
getFoo	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
.	O	O
.	O	O
/	O	O
/	O	O
If	O	O
API	O	O
returns	O	O
Stream	B-api_mention	B-api_mention
,	O	O
use	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Collection	I-api_mention	O
<	I-api_mention	O
T	I-api_mention	O
>	I-api_mention	O
c	O	O
=	O	O
getFooStream	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	B-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
So	O	O
the	O	O
question	O	O
is	O	O
,	O	O
which	O	O
is	O	O
more	O	O
useful	O	O
to	O	O
your	O	O
callers	O	O
.	O	O
If	O	O
your	O	O
result	O	O
might	O	O
be	O	O
infinite	O	O
,	O	O
there	O	O
'	O	O
s	O	O
only	O	O
one	O	O
choice	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	O	O
If	O	O
your	O	O
result	O	O
might	O	O
be	O	O
very	O	O
large	O	O
,	O	O
you	O	O
probably	O	O
prefer	O	O
Stream	B-api_mention	B-api_mention
,	O	O
since	O	O
there	O	O
may	O	O
not	O	O
be	O	O
any	O	O
value	O	O
in	O	O
materializing	O	O
it	O	O
all	O	O
at	O	O
once	O	O
,	O	O
and	O	O
doing	O	O
so	O	O
could	O	O
create	O	O
significant	O	O
heap	O	O
pressure	O	O
.	O	O
If	O	O
all	O	O
the	O	O
caller	O	O
is	O	O
going	O	O
to	O	O
do	O	O
is	O	O
iterate	O	O
through	O	O
it	O	O
(	O	O
search	O	O
,	O	O
filter	O	O
,	O	O
aggregate	O	O
)	O	O
,	O	O
you	O	O
should	O	O
prefer	O	O
Stream	B-api_mention	B-api_mention
,	O	O
since	O	O
Stream	B-api_mention	B-api_mention
has	O	O
these	O	O
built	O	O
-	O	O
in	O	O
already	O	O
and	O	O
there	O	O
'	O	O
s	O	O
no	O	O
need	O	O
to	O	O
materialize	O	O
a	O	O
collection	O	O
(	O	O
especially	O	O
if	O	O
the	O	O
user	O	O
might	O	O
not	O	O
process	O	O
the	O	O
whole	O	O
result	O	O
.	O	O
)	O	O
This	O	O
is	O	O
a	O	O
very	O	O
common	O	O
case	O	O
.	O	O
Even	O	O
if	O	O
you	O	O
know	O	O
that	O	O
the	O	O
user	O	O
will	O	O
iterate	O	O
it	O	O
multiple	O	O
times	O	O
or	O	O
otherwise	O	O
keep	O	O
it	O	O
around	O	O
,	O	O
you	O	O
still	O	O
may	O	O
want	O	O
to	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
instead	O	O
,	O	O
for	O	O
the	O	O
simple	O	O
fact	O	O
that	O	O
whatever	O	O
Collection	B-api_mention	B-api_mention
you	O	O
choose	O	O
to	O	O
put	O	O
it	O	O
in	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
ArrayList	B-api_mention	B-api_mention
)	O	O
may	O	O
not	O	O
be	O	O
the	O	O
form	O	O
they	O	O
want	O	O
,	O	O
and	O	O
then	O	O
the	O	O
caller	O	O
has	O	O
to	O	O
copy	O	O
it	O	O
anyway	O	O
.	O	O
if	O	O
you	O	O
return	O	O
a	O	O
stream	O	O
,	O	O
they	O	O
can	O	O
do	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
get	O	O
it	O	O
in	O	O
exactly	O	O
the	O	O
form	O	O
they	O	O
want	O	O
.	O	O
The	O	O
above	O	O
"	O	O
prefer	O	O
Stream	O	B-api_mention
"	O	O
cases	O	O
mostly	O	O
derive	O	O
from	O	O
the	O	O
fact	O	O
that	O	O
Stream	B-api_mention	B-api_mention
is	O	O
more	O	O
flexible	O	O
;	O	O
you	O	O
can	O	O
late	O	O
-	O	O
bind	O	O
to	O	O
how	O	O
you	O	O
use	O	O
it	O	O
without	O	O
incurring	O	O
the	O	O
costs	O	O
and	O	O
constraints	O	O
of	O	O
materializing	O	O
it	O	O
to	O	O
a	O	O
Collection	B-api_mention	B-api_mention
.	O	O
The	O	O
one	O	O
case	O	O
where	O	O
you	O	O
must	O	O
return	O	O
a	O	O
Collection	B-api_mention	B-api_mention
is	O	O
when	O	O
there	O	O
are	O	O
strong	O	O
consistency	O	O
requirements	O	O
,	O	O
and	O	O
you	O	O
have	O	O
to	O	O
produce	O	O
a	O	O
consistent	O	O
snapshot	O	O
of	O	O
a	O	O
moving	O	O
target	O	O
.	O	O
Then	O	O
,	O	O
you	O	O
will	O	O
want	O	O
put	O	O
the	O	O
elements	O	O
into	O	O
a	O	O
collection	O	O
that	O	O
will	O	O
not	O	O
change	O	O
.	O	O
So	O	O
I	O	O
would	O	O
say	O	O
that	O	O
most	O	O
of	O	O
the	O	O
time	O	O
,	O	O
Stream	B-api_mention	B-api_mention
is	O	O
the	O	O
right	O	O
answer	O	O
-	O	O
-	O	O
it	O	O
is	O	O
more	O	O
flexible	O	O
,	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
impose	O	O
usually	O	O
-	O	O
unnecessary	O	O
materialization	O	O
costs	O	O
,	O	O
and	O	O
can	O	O
be	O	O
easily	O	O
turned	O	O
into	O	O
the	O	O
Collection	B-api_mention	B-api_mention
of	O	O
your	O	O
choice	O	O
if	O	O
needed	O	O
.	O	O
But	O	O
sometimes	O	O
,	O	O
you	O	O
may	O	O
have	O	O
to	O	O
return	O	O
a	O	O
Collection	B-api_mention	B-api_mention
(	O	O
say	O	O
,	O	O
due	O	O
to	O	O
strong	O	O
consistency	O	O
requirements	O	O
)	O	O
,	O	O
or	O	O
you	O	O
may	O	O
want	O	O
to	O	O
return	O	O
Collection	B-api_mention	B-api_mention
because	O	O
you	O	O
know	O	O
how	O	O
the	O	O
user	O	O
will	O	O
be	O	O
using	O	O
it	O	O
and	O	O
know	O	O
this	O	O
is	O	O
the	O	O
most	O	O
convenient	O	O
thing	O	O
for	O	O
them	O	O
.	O	O
Question	O	O
-	O	O
7935858	O	O
,	O	O
answer	O	O
-	O	O
7935881	O	O
The	O	O
documentation	O	O
on	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
says	O	O
:	O	O
#	O	O
blockquote	O	O
(	O	O
Emphasis	O	O
mine	O	O
.	O	O
)	O	O
A	O	O
dot	O	O
is	O	O
a	O	O
special	O	O
character	O	O
in	O	O
regular	O	O
expression	O	O
syntax	O	O
.	O	O
Use	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
quote	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
parameter	O	O
to	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
want	O	O
the	O	O
split	O	O
to	O	O
be	O	O
on	O	O
a	O	O
literal	O	O
string	O	O
pattern	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
words	O	O
=	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
9297899	O	O
We	O	O
can	O	O
determine	O	O
the	O	O
length	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
using	O	O
its	O	O
public	O	O
method	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
like	O	O
#	O	O
pre	O	O
Similarly	O	O
we	O	O
can	O	O
determine	O	O
the	O	O
length	O	O
of	O	O
an	O	O
Array	O	B-api_mention
object	O	O
using	O	O
the	O	O
length	O	O
property	O	O
#	O	O
pre	O	O
Whereas	O	O
the	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
defined	O	O
inside	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
class	O	O
,	O	O
where	O	O
is	O	O
this	O	O
length	O	O
property	O	O
of	O	O
Array	B-api_mention	B-api_mention
defined	O	O
?	O	O
Question	O	O
-	O	O
21524642	O	O
,	O	O
answer	O	O
-	O	O
21524694	O	O
Or	O	O
.	O	O
.	O	O
Pattern	B-api_mention	O
#	I-api_mention	O
quote	I-api_mention	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
value	O	O
_	O	O
split	O	O
=	O	O
rat	O	O
_	O	O
values	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
happening	O	O
because	O	O
String	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
accepts	O	O
a	O	O
regex	O	O
:	O	O
|	O	O
has	O	O
a	O	O
special	O	O
meaning	O	O
in	O	O
regex	O	O
.	O	O
quote	B-api_mention	O
will	O	O
return	O	O
a	O	O
String	B-api_mention	B-api_mention
representation	O	O
for	O	O
the	O	O
regex	O	O
.	O	O

