Question	O
-	O
28818506	O
,	O
answer	O
-	O
38560612	O
This	O
is	O
part	O
of	O
JDK	O
9	O
in	O
the	O
form	O
of	O
or	O
,	O
which	O
takes	O
a	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Your	O
example	O
would	O
then	O
be	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
;	O
For	O
details	O
see	O
the	O
(	O
preliminary	O
)	O
Javadoc	O
or	O
this	O
post	O
I	O
wrote	O
.	O
Question	O
-	O
24603186	O
,	O
answer	O
-	O
24603187	O
The	O
Javadocs	O
for	O
Collection	B-api_mention
.	I-api_mention
(	I-api_mention
parallelS	I-api_mention
|	I-api_mention
s	I-api_mention
)	I-api_mention
tream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Stream	B-api_mention
itself	O
don	O
'	O
t	O
answer	O
the	O
question	O
,	O
so	O
it	O
'	O
s	O
off	O
to	O
the	O
mailing	O
lists	O
for	O
the	O
rationale	O
.	O
I	O
went	O
through	O
the	O
lambda	O
-	O
libs	O
-	O
spec	O
-	O
observers	O
archives	O
and	O
found	O
one	O
thread	O
specifically	O
about	O
Collection	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
another	O
thread	O
that	O
touched	O
on	O
whether	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Arrays	I-api_mention
should	O
provide	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
match	O
(	O
or	O
actually	O
,	O
whether	O
it	O
should	O
be	O
removed	O
)	O
.	O
There	O
was	O
no	O
once	O
-	O
and	O
-	O
for	O
-	O
all	O
conclusion	O
,	O
so	O
perhaps	O
I	O
'	O
ve	O
missed	O
something	O
from	O
another	O
list	O
or	O
the	O
matter	O
was	O
settled	O
in	O
private	O
discussion	O
.	O
(	O
Perhaps	O
Brian	O
Goetz	O
,	O
one	O
of	O
the	O
principals	O
of	O
this	O
discussion	O
,	O
can	O
fill	O
in	O
anything	O
missing	O
.	O
)	O
The	O
participants	O
made	O
their	O
points	O
well	O
,	O
so	O
this	O
answer	O
is	O
mostly	O
just	O
an	O
organization	O
of	O
the	O
relevant	O
quotes	O
,	O
with	O
a	O
few	O
clarifications	O
in	O
[	O
brackets	O
]	O
,	O
presented	O
in	O
order	O
of	O
importance	O
(	O
as	O
I	O
interpret	O
it	O
)	O
.	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
covers	O
a	O
very	O
common	O
case	O
Brian	O
Goetz	O
in	O
the	O
first	O
thread	O
,	O
explaining	O
why	O
Collections	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
valuable	O
enough	O
to	O
keep	O
even	O
after	O
other	O
parallel	O
stream	O
factory	O
methods	O
have	O
been	O
removed	O
:	O
#	O
blockquote	O
Brian	O
Goetz	O
stands	O
by	O
this	O
position	O
in	O
the	O
later	O
discussion	O
about	O
Arrays	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
more	O
performant	O
Brian	O
Goetz	O
:	O
#	O
blockquote	O
In	O
response	O
to	O
Kevin	O
Bourrillion	O
'	O
s	O
skepticism	O
about	O
whether	O
the	O
effect	O
is	O
significant	O
,	O
Brian	O
again	O
:	O
#	O
blockquote	O
Doug	O
Lea	O
follows	O
up	O
,	O
but	O
hedges	O
his	O
position	O
:	O
#	O
blockquote	O
Indeed	O
,	O
the	O
later	O
discussion	O
about	O
Arrays	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
takes	O
notice	O
of	O
lower	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
cost	O
.	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
statefulness	O
complicates	O
the	O
future	O
At	O
the	O
time	O
of	O
the	O
discussion	O
,	O
switching	O
a	O
stream	O
from	O
sequential	O
to	O
parallel	O
and	O
back	O
could	O
be	O
interleaved	O
with	O
other	O
stream	O
operations	O
.	O
Brian	O
Goetz	O
,	O
on	O
behalf	O
of	O
Doug	O
Lea	O
,	O
explains	O
why	O
sequential	O
/	O
parallel	O
mode	O
switching	O
may	O
complicate	O
future	O
development	O
of	O
the	O
Java	O
platform	O
:	O
#	O
blockquote	O
This	O
mode	O
switching	O
was	O
removed	O
after	O
further	O
discussion	O
.	O
In	O
the	O
current	O
version	O
of	O
the	O
library	O
,	O
a	O
stream	O
pipeline	O
is	O
either	O
sequential	O
or	O
parallel	O
;	O
last	O
call	O
to	O
sequential	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
wins	O
.	O
Besides	O
side	O
-	O
stepping	O
the	O
statefulness	O
problem	O
,	O
this	O
change	O
also	O
improved	O
the	O
performance	O
of	O
using	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
set	O
up	O
a	O
parallel	O
pipeline	O
from	O
a	O
sequential	O
stream	O
factory	O
.	O
exposing	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
as	O
a	O
first	O
-	O
class	O
citizen	O
improves	O
programmer	O
perception	O
of	O
the	O
library	O
,	O
leading	O
them	O
to	O
write	O
better	O
code	O
Brian	O
Goetz	O
again	O
,	O
in	O
response	O
to	O
Tim	O
Peierls	O
'	O
s	O
argument	O
that	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
allows	O
programmers	O
to	O
understand	O
streams	O
sequentially	O
before	O
going	O
parallel	O
:	O
#	O
blockquote	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
14534798	O
It	O
should	O
be	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
I	O
recommend	O
you	O
to	O
do	O
as	O
below	O
,	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
system	O
-	O
dependent	O
newline	O
in	O
java	O
.	O
Also	O
from	O
Java	O
7	O
there	O
'	O
s	O
a	O
method	O
that	O
returns	O
the	O
value	O
directly	O
:	O
System	B-api_mention
.	I-api_mention
lineSeparator	I-api_mention
(	I-api_mention
)	I-api_mention
Question	O
-	O
24609564	O
,	O
answer	O
-	O
24609841	O
If	O
you	O
will	O
read	O
comment	O
above	O
the	O
code	O
,	O
It	O
is	O
mentioned	O
that	O
.	O
.	O
.	O
If	O
the	O
caller	O
is	O
not	O
a	O
ForkJoinTask	B-api_mention
,	O
this	O
method	O
is	O
behaviorally	O
equivalent	O
to	O
#	O
pre	O
So	O
it	O
is	O
just	O
another	O
form	O
to	O
implement	O
above	O
code	O
in	O
else	O
part	O
.	O
.	O
.	O
!	O
!	O
In	O
Style	O
notes	O
it	O
is	O
mentioned	O
that	O
,	O
#	O
blockquote	O
And	O
if	O
you	O
will	O
see	O
implementation	O
of	O
ManagedLocker	B-api_mention
#	I-api_mention
isReleasable	I-api_mention
,	O
It	O
is	O
updating	O
the	O
lock	O
and	O
returns	O
true	O
if	O
blocking	O
is	O
unnecessary	O
.	O
Interpretation	O
:	O
Blank	O
while	O
loops	O
are	O
used	O
to	O
provide	O
an	O
interrupt	O
until	O
some	O
condition	O
reset	O
to	O
true	O
/	O
false	O
.	O
Here	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
is	O
a	O
blocker	O
/	O
interrupt	O
until	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
true	O
when	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
false	O
.	O
Loop	O
will	O
continue	O
execution	O
while	O
blocker	O
is	O
not	O
releasable	O
(	O
!	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
and	O
blocker	O
is	O
not	O
blocked	O
!	O
!	O
Execution	O
will	O
be	O
out	O
of	O
loop	O
as	O
soon	O
as	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
set	O
to	O
true	O
.	O
Note	O
that	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
does	O
not	O
update	O
CAS	O
variable	O
,	O
but	O
it	O
guarantee	O
that	O
program	O
will	O
wait	O
until	O
variable	O
gets	O
updated	O
(	O
force	O
to	O
wait	O
until	O
variable	O
gets	O
updated	O
)	O
.	O
Question	O
-	O
6094575	O
,	O
answer	O
-	O
6094600	O
You	O
can	O
use	O
Class	B-api_mention
.	I-api_mention
forName	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
get	O
a	O
Class	B-api_mention
object	O
of	O
the	O
desired	O
class	O
.	O
Then	O
use	O
getConstructor	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
find	O
the	O
desired	O
Constructor	B-api_mention
object	O
.	O
Finally	O
,	O
call	O
newInstance	B-api_mention
(	I-api_mention
)	I-api_mention
on	O
that	O
object	O
to	O
get	O
your	O
new	O
instance	O
.	O
#	O
pre	O
Question	O
-	O
27482579	O
,	O
answer	O
-	O
27483288	O
#	O
blockquote	O
No	O
.	O
It	O
will	O
never	O
throw	O
a	O
compilation	O
error	O
.	O
This	O
is	O
much	O
similar	O
to	O
what	O
a	O
simple	O
getter	B-api_mention
and	O
setter	B-api_mention
does	O
or	O
a	O
copy	B-api_mention
constructor	O
does	O
.	O
Remember	O
we	O
can	O
access	O
private	O
members	O
using	O
this	O
.	O
#	O
pre	O
Your	O
testPrivate	O
method	O
accepts	O
an	O
instance	O
of	O
MyClass	O
.	O
Since	O
testPrivate	O
is	O
a	O
method	O
inside	O
MyClass	O
,	O
it	O
will	O
have	O
access	O
to	O
private	O
properties	O
.	O
#	O
pre	O
Methods	O
defined	O
inside	O
the	O
class	O
will	O
always	O
have	O
access	O
to	O
it	O
'	O
s	O
private	O
members	O
,	O
through	O
this	O
.	O
and	O
instance	O
variable	O
.	O
But	O
if	O
you	O
define	O
testPrivate	O
outside	O
of	O
MyClass	O
then	O
,	O
you	O
won	O
'	O
t	O
have	O
access	O
to	O
private	O
members	O
.	O
There	O
you	O
will	O
have	O
to	O
use	O
a	O
method	O
or	O
a	O
setter	B-api_mention
or	O
a	O
getter	B-api_mention
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15432106	O
This	O
is	O
to	O
avoid	O
possible	O
efforts	O
for	O
reallocation	O
for	O
every	O
single	O
object	O
.	O
int	O
newCapacity	O
=	O
(	O
oldCapacity	O
*	O
3	O
)	O
/	O
2	O
+	O
1	O
;	O
internally	O
new	O
Object	B-api_mention
[	O
]	O
is	O
created	O
.	O
JVM	O
needs	O
effort	O
to	O
create	O
new	O
Object	B-api_mention
[	O
]	O
when	O
you	O
add	O
element	O
in	O
the	O
arraylist	O
.	O
If	O
you	O
don	O
'	O
t	O
have	O
above	O
code	O
(	O
any	O
algo	O
you	O
think	O
)	O
for	O
reallocation	O
then	O
every	O
time	O
when	O
you	O
invoke	O
arraylist	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
then	O
new	O
Object	B-api_mention
[	O
]	O
has	O
to	O
be	O
created	O
which	O
is	O
pointless	O
and	O
we	O
are	O
loosing	O
time	O
for	O
increasing	O
size	O
by	O
1	O
for	O
each	O
and	O
every	O
objects	O
to	O
be	O
added	O
.	O
So	O
it	O
is	O
better	O
to	O
increase	O
size	O
of	O
Object	B-api_mention
[	O
]	O
with	O
following	O
formula	O
.	O
(	O
JSL	O
has	O
used	O
forcasting	O
formula	O
given	O
below	O
for	O
dynamically	O
growing	O
arraylist	O
instead	O
of	O
growing	O
by	O
1	O
every	O
time	O
.	O
Because	O
to	O
grow	O
it	O
takes	O
effort	O
by	O
JVM	O
)	O
int	O
newCapacity	O
=	O
(	O
oldCapacity	O
*	O
3	O
)	O
/	O
2	O
+	O
1	O
;	O
Question	O
-	O
12468764	O
,	O
answer	O
-	O
24537575	O
I	O
'	O
ve	O
found	O
a	O
very	O
nice	O
and	O
concise	O
solution	O
,	O
especially	O
useful	O
when	O
you	O
cannot	O
modify	O
enum	O
classes	O
as	O
it	O
was	O
in	O
my	O
case	O
.	O
Then	O
you	O
should	O
provide	O
a	O
custom	O
ObjectMapper	B-api_mention
with	O
a	O
certain	O
feature	O
enabled	O
.	O
Those	O
features	O
are	O
available	O
since	O
Jackson	O
1	O
.	O
6	O
.	O
So	O
you	O
only	O
need	O
to	O
write	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
your	O
enum	O
.	O
#	O
pre	O
There	O
are	O
more	O
enum	O
-	O
related	O
features	O
available	O
,	O
see	O
here	O
:	O
#	O
a	O
#	O
a	O
Question	O
-	O
18777989	O
,	O
answer	O
-	O
18778228	O
You	O
made	O
a	O
good	O
summery	O
of	O
the	O
practical	O
differences	O
in	O
use	O
and	O
implementation	O
but	O
did	O
not	O
say	O
anything	O
about	O
the	O
difference	O
in	O
meaning	O
.	O
An	O
interface	O
is	O
a	O
description	O
of	O
the	O
behaviour	O
an	O
implementing	O
class	O
will	O
have	O
.	O
The	O
implementing	O
class	O
ensures	O
,	O
that	O
it	O
will	O
have	O
these	O
methods	O
that	O
can	O
be	O
used	O
on	O
it	O
.	O
It	O
is	O
basically	O
a	O
contract	O
or	O
a	O
promise	O
the	O
class	O
has	O
to	O
make	O
.	O
An	O
abstract	O
class	O
is	O
a	O
basis	O
for	O
different	O
subclasses	O
that	O
share	O
behaviour	O
which	O
does	O
not	O
need	O
to	O
be	O
repeatedly	O
be	O
created	O
.	O
Subclasses	O
must	O
complete	O
the	O
behaviour	O
and	O
have	O
the	O
option	O
to	O
override	O
predefine	O
behaviour	O
(	O
as	O
long	O
as	O
it	O
is	O
not	O
defined	O
as	O
final	O
or	O
private	O
)	O
.	O
You	O
will	O
find	O
good	O
examples	O
in	O
the	O
java	O
.	O
util	O
package	O
which	O
includes	O
interfaces	O
like	O
List	B-api_mention
and	O
abstract	O
classes	O
like	O
AbstractList	B-api_mention
which	O
already	O
implements	O
the	O
interface	O
.	O
The	O
official	O
documentation	O
describes	O
the	O
AbstractList	B-api_mention
as	O
follows	O
:	O
#	O
blockquote	O
Question	O
-	O
8881291	O
,	O
answer	O
-	O
14060804	O
#	O
li	O
Strings	B-api_mention
are	O
immutable	O
in	O
Java	O
if	O
you	O
store	O
password	O
as	O
plain	O
text	O
it	O
will	O
be	O
available	O
in	O
memory	O
until	O
Garbage	O
collector	O
clears	O
it	O
and	O
since	O
Strings	B-api_mention
are	O
used	O
in	O
String	B-api_mention
pool	O
for	O
re	O
-	O
usability	O
there	O
is	O
pretty	O
high	O
chance	O
that	O
it	O
will	O
be	O
remain	O
in	O
memory	O
for	O
long	O
duration	O
,	O
which	O
pose	O
a	O
security	O
threat	O
.	O
Since	O
any	O
one	O
who	O
has	O
access	O
to	O
memory	O
dump	O
can	O
find	O
the	O
password	O
in	O
clear	O
text	O
#	O
li	O
Java	O
recommendation	O
using	O
getPassword	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
JPasswordField	O
which	O
returns	O
a	O
char	O
[	O
]	O
and	O
deprecated	O
getText	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
which	O
returns	O
password	O
in	O
clear	O
text	O
stating	O
security	O
reason	O
.	O
#	O
li	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
there	O
is	O
always	O
a	O
risk	O
of	O
printing	O
plain	O
text	O
in	O
log	O
file	O
or	O
console	O
but	O
if	O
use	O
Array	B-api_mention
you	O
won	O
'	O
t	O
print	O
contents	O
of	O
array	O
instead	O
its	O
memory	O
location	O
get	O
printed	O
.	O
#	O
pre	O
#	O
blockquote	O
Final	O
thoughts	O
:	O
Though	O
using	O
char	O
[	O
]	O
is	O
not	O
just	O
enough	O
you	O
need	O
to	O
erase	O
content	O
to	O
be	O
more	O
secure	O
.	O
I	O
also	O
suggest	O
working	O
with	O
hash	O
'	O
d	O
or	O
encrypted	O
password	O
instead	O
of	O
plaintext	O
and	O
clearing	O
it	O
from	O
memory	O
as	O
soon	O
as	O
authentication	O
is	O
completed	O
.	O
Question	O
-	O
21105403	O
I	O
'	O
ve	O
written	O
a	O
factory	O
to	O
produce	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Connection	I-api_mention
objects	O
:	O
#	O
pre	O
I	O
'	O
d	O
like	O
to	O
validate	O
the	O
parameters	O
passed	O
to	O
DriverManager	B-api_mention
.	I-api_mention
getConnection	I-api_mention
,	O
but	O
I	O
don	O
'	O
t	O
know	O
how	O
to	O
mock	O
a	O
static	O
method	O
.	O
I	O
'	O
m	O
using	O
JUnit	O
4	O
and	O
Mockito	B-api_mention
for	O
my	O
test	O
cases	O
.	O
Is	O
there	O
a	O
good	O
way	O
to	O
mock	O
/	O
verify	O
this	O
specific	O
use	O
-	O
case	O
?	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923105	O
Oh	O
,	O
those	O
coding	O
styles	O
are	O
to	O
be	O
taken	O
with	O
a	O
bit	O
of	O
salt	O
.	O
#	O
li	O
(	O
+	O
)	O
Passing	O
an	O
Option	O
result	O
to	O
another	O
method	O
,	O
without	O
any	O
semantic	O
analysis	O
;	O
leaving	O
that	O
to	O
the	O
method	O
,	O
is	O
quite	O
alright	O
.	O
#	O
li	O
(	O
-	O
)	O
Using	O
Optional	B-api_mention
parameters	O
causing	O
conditional	O
logic	O
inside	O
the	O
methods	O
is	O
literally	O
contra	O
-	O
productive	O
.	O
#	O
li	O
(	O
-	O
)	O
Needing	O
to	O
pack	O
an	O
argument	O
in	O
an	O
Optional	B-api_mention
,	O
is	O
suboptimal	O
for	O
the	O
compiler	O
,	O
and	O
does	O
an	O
unnecessary	O
wrapping	O
.	O
#	O
li	O
(	O
-	O
)	O
In	O
comparison	O
to	O
nullable	O
parameters	O
Optional	B-api_mention
is	O
more	O
costly	O
.	O
In	O
general	O
:	O
Optional	B-api_mention
unifies	O
two	O
states	O
,	O
which	O
have	O
to	O
be	O
unraveled	O
.	O
Hence	O
better	O
suited	O
for	O
result	O
than	O
input	O
,	O
for	O
the	O
complexity	O
of	O
the	O
data	O
flow	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7353473	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
better	O
(	O
as	O
explained	O
by	O
Nick	O
)	O
,	O
but	O
still	O
not	O
very	O
good	O
One	O
host	O
can	O
be	O
known	O
under	O
many	O
different	O
hostnames	O
.	O
Usually	O
you	O
'	O
ll	O
be	O
looking	O
for	O
the	O
hostname	O
your	O
host	O
has	O
in	O
a	O
specific	O
context	O
.	O
For	O
example	O
,	O
in	O
a	O
web	O
application	O
,	O
you	O
might	O
be	O
looking	O
for	O
the	O
hostname	O
used	O
by	O
whoever	O
issued	O
the	O
request	O
you	O
'	O
re	O
currently	O
handling	O
.	O
How	O
to	O
best	O
find	O
that	O
one	O
depends	O
on	O
which	O
framework	O
you	O
'	O
re	O
using	O
for	O
your	O
web	O
application	O
.	O
In	O
some	O
kind	O
of	O
other	O
internet	O
-	O
facing	O
service	O
,	O
you	O
'	O
ll	O
want	O
the	O
hostname	O
your	O
service	O
is	O
available	O
through	O
from	O
the	O
'	O
outside	O
'	O
.	O
Due	O
to	O
proxies	O
,	O
firewalls	O
etc	O
this	O
might	O
not	O
even	O
be	O
a	O
hostname	O
on	O
the	O
machine	O
your	O
service	O
is	O
installed	O
on	O
-	O
you	O
might	O
try	O
to	O
come	O
up	O
with	O
a	O
reasonable	O
default	O
,	O
but	O
you	O
should	O
definitely	O
make	O
this	O
configurable	O
for	O
whoever	O
installs	O
this	O
.	O
Question	O
-	O
31370403	O
I	O
'	O
m	O
currently	O
in	O
the	O
process	O
of	O
writing	O
a	O
paint	O
program	O
in	O
java	O
,	O
designed	O
to	O
have	O
flexible	O
and	O
comprehensive	O
functionalities	O
.	O
It	O
stemmed	O
from	O
my	O
final	O
project	O
,	O
that	O
I	O
wrote	O
overnight	O
the	O
day	O
before	O
.	O
Because	O
of	O
that	O
,	O
it	O
'	O
s	O
got	O
tons	O
and	O
tons	O
of	O
bugs	O
,	O
which	O
I	O
'	O
ve	O
been	O
tackling	O
one	O
by	O
one	O
(	O
e	O
.	O
g	O
.	O
I	O
can	O
only	O
save	O
files	O
that	O
will	O
be	O
empty	O
,	O
my	O
rectangles	O
don	O
'	O
t	O
draw	O
right	O
but	O
my	O
circles	O
do	O
.	O
.	O
.	O
)	O
.	O
This	O
time	O
,	O
I	O
'	O
ve	O
been	O
trying	O
to	O
add	O
undo	O
/	O
redo	O
functionality	O
to	O
my	O
program	O
.	O
However	O
,	O
I	O
can	O
'	O
t	O
"	O
undo	O
"	O
something	O
that	O
I	O
have	O
done	O
.	O
Therefore	O
,	O
I	O
got	O
an	O
idea	O
to	O
save	O
copies	O
of	O
my	O
BufferedImage	B-api_mention
each	O
time	O
a	O
mouseReleased	B-api_mention
event	O
was	O
fired	O
.	O
However	O
,	O
with	O
some	O
of	O
the	O
images	O
going	O
to	O
1920x1080	O
resolution	O
,	O
I	O
figured	O
that	O
this	O
wouldn	O
'	O
t	O
be	O
efficient	O
:	O
storing	O
them	O
would	O
probably	O
take	O
gigabytes	O
of	O
memory	O
.	O
The	O
reason	O
for	O
why	O
I	O
can	O
'	O
t	O
simply	O
paint	O
the	O
same	O
thing	O
with	O
the	O
background	O
colour	O
to	O
undo	O
is	O
because	O
I	O
have	O
many	O
different	O
brushes	O
,	O
which	O
paint	O
based	O
on	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
because	O
there	O
are	O
many	O
different	O
layers	O
(	O
in	O
a	O
single	O
layer	O
)	O
.	O
Then	O
,	O
I	O
'	O
ve	O
considered	O
cloning	O
the	O
Graphics	B-api_mention
objects	O
that	O
I	O
use	O
to	O
paint	O
to	O
the	O
BufferedImage	B-api_mention
.	O
Like	O
this	O
:	O
#	O
pre	O
I	O
haven	O
'	O
t	O
done	O
this	O
before	O
,	O
so	O
I	O
have	O
a	O
couple	O
questions	O
:	O
#	O
li	O
Would	O
I	O
still	O
be	O
wasting	O
pointless	O
memory	O
by	O
doing	O
this	O
,	O
like	O
cloning	O
my	O
BufferedImages	B-api_mention
?	O
#	O
li	O
Is	O
there	O
necessarily	O
a	O
different	O
way	O
I	O
can	O
do	O
this	O
?	O
Question	O
-	O
33358248	O
Currently	O
the	O
BlendModes	O
(	O
Subtract	O
,	O
Exclusion	O
etc	O
)	O
use	O
the	O
LauncherImage	O
as	O
the	O
mask	O
.	O
Can	O
I	O
apply	O
these	O
BlendModes	O
to	O
a	O
ColorMatrix	O
?	O
I	O
'	O
m	O
using	O
the	O
GPUImageLibrary	O
colorMatrix	O
[	O
0	O
.	O
393	O
,	O
0	O
.	O
7689999	O
,	O
0	O
.	O
18899999	O
,	O
0	O
,	O
0	O
,	O
0	O
.	O
349	O
,	O
0	O
.	O
6859999	O
,	O
0	O
.	O
16799999	O
,	O
0	O
,	O
0	O
,	O
0	O
.	O
272	O
,	O
0	O
.	O
5339999	O
,	O
0	O
.	O
13099999	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
1	O
,	O
0	O
]	O
;	O
SubtractBlendFilter	O
.	O
java	O
#	O
pre	O
GPUIMageTwoInputFilter	O
.	O
java	O
#	O
pre	O
My	O
guess	O
it	O
involves	O
changing	O
something	O
with	O
String	B-api_mention
SUBTRACT	O
_	O
BLEND	O
_	O
GRAGMENT	O
_	O
SHADER	O
&	O
String	B-api_mention
VERTEX	O
_	O
SHADER	O
.	O
Question	O
-	O
6608795	O
,	O
answer	O
-	O
20069798	O
All	O
these	O
answers	O
around	O
here	O
,	O
as	O
well	O
as	O
the	O
answers	O
in	O
this	O
question	O
,	O
suggest	O
that	O
loading	O
absolute	O
URLs	O
,	O
like	O
"	O
/	O
foo	O
/	O
bar	O
.	O
properties	O
"	O
treated	O
the	O
same	O
by	O
class	O
.	B-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
class	O
.	B-api_mention
getClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
NOT	O
the	O
case	O
,	O
at	O
least	O
not	O
in	O
my	O
Tomcat	O
configuration	O
/	O
version	O
(	O
currently	O
7	O
.	O
0	O
.	O
40	O
)	O
.	O
#	O
pre	O
Sorry	O
,	O
I	O
have	O
absolutely	O
no	O
satisfying	O
explanation	O
,	O
but	O
I	O
guess	O
that	O
tomcat	O
does	O
dirty	O
tricks	O
and	O
his	O
black	O
magic	O
with	O
the	O
classloaders	O
and	O
cause	O
the	O
difference	O
.	O
I	O
always	O
used	O
class	O
.	B-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
past	O
and	O
haven	O
'	O
t	O
had	O
any	O
problems	O
.	O
PS	O
:	O
I	O
also	O
posted	O
this	O
over	O
here	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
8641412	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
code	O
registers	O
the	O
Thread	B-api_mention
with	O
scheduler	O
and	O
the	O
scheduler	O
calls	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Also	O
,	O
Thread	B-api_mention
is	O
class	O
while	O
Runnable	B-api_mention
is	O
an	O
interface	O
.	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
7056786	O
It	O
'	O
s	O
because	O
when	O
you	O
enter	O
a	O
number	O
then	O
press	O
Enter	O
,	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
consumes	O
only	O
the	O
number	O
,	O
not	O
the	O
"	O
end	O
of	O
line	O
"	O
.	O
When	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
executes	O
,	O
it	O
consumes	O
the	O
"	O
end	O
of	O
line	O
"	O
still	O
in	O
the	O
buffer	O
from	O
the	O
first	O
input	O
.	O
Instead	O
,	O
use	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
immediately	O
after	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23884116	O
the	O
following	O
seems	O
to	O
work	O
when	O
converting	O
from	O
new	O
API	O
LocalDateTime	B-api_mention
into	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
date	I-api_mention
:	O
Date	B-api_mention
.	I-api_mention
from	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
the	O
reverse	O
conversion	O
can	O
be	O
(	O
hopefully	O
)	O
achieved	O
similar	O
way	O
.	O
.	O
.	O
hope	O
it	O
helps	O
.	O
.	O
.	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33148103	O
Looking	O
at	O
the	O
code	O
:	O
int	O
newCapacity	O
=	O
oldCapacity	O
+	O
(	O
oldCapacity	O
>	O
>	O
1	O
)	O
;	O
If	O
oldCapacity	O
is	O
quite	O
large	O
,	O
this	O
will	O
overflow	O
,	O
and	O
newCapacity	O
will	O
be	O
a	O
negative	O
number	O
.	O
A	O
comparison	O
like	O
newCapacity	O
<	O
oldCapacity	O
will	O
incorrectly	O
evaluate	O
true	O
and	O
the	O
ArrayList	B-api_mention
will	O
fail	O
to	O
grow	O
.	O
Instead	O
,	O
the	O
code	O
as	O
written	O
(	O
newCapacity	O
-	O
minCapacity	O
<	O
0	O
returns	O
false	O
)	O
will	O
allow	O
the	O
negative	O
value	O
of	O
newCapacity	O
to	O
be	O
further	O
evaluated	O
in	O
the	O
next	O
line	O
,	O
resulting	O
in	O
recalculating	O
newCapacity	O
by	O
invoking	O
hugeCapacity	O
(	O
newCapacity	O
=	O
hugeCapacity	O
(	O
args	O
)	O
;	O
)	O
to	O
allow	O
for	O
the	O
ArrayList	B-api_mention
to	O
grow	O
up	O
to	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
.	O
This	O
is	O
what	O
the	O
/	O
/	O
overflow	O
-	O
conscious	O
code	O
comment	O
is	O
trying	O
to	O
communicate	O
,	O
though	O
rather	O
obliquely	O
.	O
So	O
,	O
bottom	O
line	O
,	O
the	O
new	O
comparison	O
protects	O
against	O
allocating	O
an	O
ArrayList	B-api_mention
larger	O
than	O
the	O
predefined	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
while	O
allowing	O
it	O
to	O
grow	O
right	O
up	O
to	O
that	O
limit	O
if	O
needed	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29495065	O
#	O
li	O
It	O
is	O
checking	O
if	O
newType	O
is	O
array	O
of	O
Objects	O
or	O
not	O
:	O
#	O
pre	O
Why	O
to	O
do	O
that	O
?	O
Because	O
new	O
Object	B-api_mention
[	O
n	O
]	O
is	O
faster	O
than	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
an	O
array	O
of	O
types	O
defined	O
by	O
the	O
first	O
argument	O
,	O
eg	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
-	O
>	O
String	B-api_mention
[	O
]	O
.	O
Note	O
that	O
String	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
.	I-api_mention
getComponentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
#	O
li	O
You	O
cannot	O
use	O
it	O
like	O
that	O
,	O
but	O
it	O
can	O
be	O
like	O
this	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
in	O
this	O
case	O
it	O
depends	O
only	O
on	O
actual	O
type	O
of	O
elements	O
,	O
eg	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
fail	O
,	O
you	O
cannot	O
write	O
in	O
Integer	B-api_mention
[	O
]	O
anything	O
but	O
Integer	B-api_mention
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29923793	O
I	O
think	O
the	O
shortest	O
code	O
to	O
get	O
a	O
Stream	B-api_mention
of	O
enum	O
constants	O
is	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
It	O
'	O
s	O
not	O
as	O
nice	O
as	O
Letter	O
.	B-api_mention
values	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
that	O
'	O
s	O
an	O
issue	O
with	O
arrays	O
,	O
not	O
specifically	O
enums	O
.	O
#	O
blockquote	O
You	O
are	O
right	O
that	O
the	O
nicest	O
possible	O
call	O
would	O
be	O
Letter	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Unfortunately	O
a	O
class	O
cannot	O
have	O
two	O
methods	O
with	O
the	O
same	O
signature	O
,	O
so	O
it	O
would	O
not	O
be	O
possible	O
to	O
implicitly	O
add	O
a	O
static	O
method	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
every	O
enum	O
(	O
in	O
the	O
same	O
way	O
that	O
every	O
enum	O
has	O
an	O
implicitly	O
added	O
static	O
method	O
values	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
as	O
this	O
would	O
break	O
every	O
existing	O
enum	O
that	O
already	O
has	O
a	O
static	O
or	O
instance	O
method	O
without	O
parameters	O
called	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
blockquote	O
I	O
think	O
so	O
.	O
The	O
drawback	O
is	O
that	O
stream	O
is	O
a	O
static	O
method	O
,	O
so	O
there	O
is	O
no	O
way	O
to	O
avoid	O
code	O
duplication	O
;	O
it	O
would	O
have	O
to	O
be	O
added	O
to	O
every	O
enum	O
separately	O
.	O
Question	O
-	O
7283338	O
,	O
answer	O
-	O
7283475	O
Because	O
any	O
particular	O
implementation	O
of	O
Set	O
may	O
or	O
may	O
not	O
be	O
random	O
access	O
.	O
You	O
can	O
always	O
get	O
an	O
iterator	O
and	O
step	O
through	O
the	O
Set	B-api_mention
,	O
using	O
the	O
iterators	O
'	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
return	O
the	O
result	O
you	O
want	O
once	O
you	O
find	O
the	O
equal	O
element	O
.	O
This	O
works	O
regardless	O
of	O
the	O
implementation	O
.	O
If	O
the	O
implementation	O
is	O
NOT	O
random	O
access	O
(	O
picture	O
a	O
linked	O
-	O
list	O
backed	O
Set	B-api_mention
)	O
,	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
the	O
interface	O
would	O
be	O
deceptive	O
,	O
since	O
it	O
would	O
have	O
to	O
iterate	O
the	O
collection	O
to	O
find	O
the	O
element	O
to	O
return	O
,	O
and	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
seem	O
to	O
imply	O
this	O
would	O
be	O
necessary	O
,	O
that	O
the	O
Set	B-api_mention
could	O
jump	O
directly	O
to	O
the	O
element	O
to	O
get	O
.	O
contains	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
or	O
may	O
not	O
have	O
to	O
do	O
the	O
same	O
thing	O
,	O
of	O
course	O
,	O
depending	O
on	O
the	O
implementation	O
,	O
but	O
the	O
name	O
doesn	O
'	O
t	O
seem	O
to	O
lend	O
itself	O
to	O
the	O
same	O
sort	O
of	O
misunderstandings	O
.	O
Question	O
-	O
14491966	O
I	O
made	O
a	O
class	O
called	O
QuickRandom	B-api_mention
,	O
and	O
its	O
job	O
is	O
to	O
produce	O
random	O
numbers	O
quickly	O
.	O
It	O
'	O
s	O
really	O
simple	O
:	O
just	O
take	O
the	O
old	O
value	O
,	O
multiply	O
by	O
a	O
double	O
,	O
and	O
take	O
the	O
decimal	O
part	O
.	O
Here	O
is	O
my	O
QuickRandom	B-api_mention
class	O
in	O
its	O
entirety	O
:	O
#	O
pre	O
And	O
here	O
is	O
the	O
code	O
I	O
wrote	O
to	O
test	O
it	O
:	O
#	O
pre	O
It	O
is	O
a	O
very	O
simple	O
algorithm	O
that	O
simply	O
multiplies	O
the	O
previous	O
double	O
by	O
a	O
"	O
magic	O
number	O
"	O
double	O
.	O
I	O
threw	O
it	O
together	O
pretty	O
quickly	O
,	O
so	O
I	O
could	O
probably	O
make	O
it	O
better	O
,	O
but	O
strangely	O
,	O
it	O
seems	O
to	O
be	O
working	O
fine	O
.	O
This	O
is	O
sample	O
output	O
of	O
the	O
commented	O
-	O
out	O
lines	O
in	O
the	O
main	O
method	O
:	O
#	O
pre	O
Hm	O
.	O
Pretty	O
random	O
.	O
In	O
fact	O
,	O
that	O
would	O
work	O
for	O
a	O
random	O
number	O
generator	O
in	O
a	O
game	O
.	O
Here	O
is	O
sample	O
output	O
of	O
the	O
non	O
-	O
commented	O
out	O
part	O
:	O
#	O
pre	O
Wow	O
!	O
It	O
performs	O
almost	O
4	O
times	O
faster	O
than	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
.	O
I	O
remember	O
reading	O
somewhere	O
that	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
tons	O
of	O
crazy	O
modulus	O
and	O
division	O
stuff	O
.	O
Is	O
that	O
really	O
necessary	O
?	O
My	O
algorithm	O
performs	O
a	O
lot	O
faster	O
and	O
it	O
seems	O
pretty	O
random	O
.	O
I	O
have	O
two	O
questions	O
:	O
#	O
li	O
Is	O
my	O
algorithm	O
"	O
good	O
enough	O
"	O
(	O
for	O
,	O
say	O
,	O
a	O
game	O
,	O
where	O
really	O
random	O
numbers	O
aren	O
'	O
t	O
too	O
important	O
)	O
?	O
#	O
li	O
Why	O
does	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
do	O
so	O
much	O
when	O
it	O
seems	O
just	O
simple	O
multiplication	O
and	O
cutting	O
out	O
the	O
decimal	O
will	O
suffice	O
?	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
15962949	O
If	O
you	O
want	O
to	O
make	O
a	O
copy	O
of	O
:	O
int	O
[	O
]	O
a	O
=	O
{	O
1	O
,	O
2	O
,	O
3	O
,	O
4	O
,	O
5	O
}	O
;	O
This	O
is	O
the	O
way	O
to	O
go	O
:	O
int	O
[	O
]	O
b	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
may	O
be	O
faster	O
than	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
small	O
arrays	O
.	O
Both	O
copy	O
elements	O
equally	O
fast	O
but	O
clone	B-api_mention
(	I-api_mention
)	I-api_mention
returns	O
Object	B-api_mention
so	O
the	O
compiler	O
has	O
to	O
insert	O
an	O
implicit	O
cast	O
to	O
int	O
[	O
]	O
.	O
You	O
can	O
see	O
it	O
in	O
the	O
bytecode	O
,	O
something	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489453	O
Java	O
treats	O
String	B-api_mention
as	O
a	O
special	O
class	O
,	O
you	O
can	O
initialize	O
in	O
both	O
ways	O
#	O
li	O
Directly	O
assigning	O
literal	O
String	B-api_mention
a	O
=	O
StringLiteral	O
;	O
#	O
li	O
As	O
other	O
Objects	B-api_mention
using	O
new	O
keyword	O
String	B-api_mention
a	O
=	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
need	O
to	O
take	O
special	O
care	O
when	O
you	O
wants	O
to	O
compare	O
with	O
=	O
=	O
sign	O
:	O
#	O
pre	O
That	O
is	O
because	O
in	O
first	O
case	O
the	O
objects	O
a	O
and	O
b	O
are	O
kept	O
in	O
something	O
called	O
literal	O
pool	O
and	O
they	O
both	O
are	O
referencing	O
same	O
object	O
so	O
they	O
are	O
equal	O
in	O
both	O
ways	O
.	O
But	O
in	O
second	O
case	O
a	O
and	O
b	O
references	O
different	O
objects	O
like	O
when	O
we	O
initialize	O
any	O
other	O
objects	O
.	O
so	O
they	O
are	O
unequal	O
when	O
compared	O
with	O
=	O
=	O
operator	O
whereas	O
they	O
are	O
equal	O
in	O
values	O
.	O
Question	O
-	O
29815636	O
,	O
answer	O
-	O
29815698	O
The	O
first	O
form	O
is	O
called	O
Javadoc	O
.	O
You	O
use	O
this	O
when	O
you	O
'	O
re	O
writing	O
formal	O
APIs	O
for	O
your	O
code	O
,	O
which	O
are	O
generated	O
by	O
the	O
javadoc	O
tool	O
.	O
For	O
an	O
example	O
,	O
the	O
Java	O
7	O
API	O
page	O
uses	O
Javadoc	O
and	O
was	O
generated	O
by	O
that	O
tool	O
.	O
Some	O
common	O
elements	O
you	O
'	O
d	O
see	O
in	O
Javadoc	O
include	O
:	O
#	O
li	O
@	O
param	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
parameters	O
are	O
being	O
passed	O
to	O
a	O
method	O
,	O
and	O
what	O
value	O
they	O
'	O
re	O
expected	O
to	O
have	O
#	O
li	O
@	O
return	O
:	O
this	O
is	O
used	O
to	O
indicate	O
what	O
result	O
the	O
method	O
is	O
going	O
to	O
give	O
back	O
#	O
li	O
@	O
throws	O
:	O
this	O
is	O
used	O
to	O
indicate	O
that	O
a	O
method	O
throws	O
an	O
exception	O
or	O
error	O
in	O
case	O
of	O
certain	O
input	O
#	O
li	O
@	O
since	O
:	O
this	O
is	O
used	O
to	O
indicate	O
the	O
earliest	O
Java	O
version	O
this	O
class	O
or	O
function	O
was	O
available	O
in	O
As	O
an	O
example	O
,	O
here	O
'	O
s	O
Javadoc	O
for	O
the	O
compare	O
method	O
of	O
Integer	B-api_mention
:	O
#	O
pre	O
The	O
second	O
form	O
is	O
a	O
block	O
(	O
multi	O
-	O
line	O
)	O
comment	O
.	O
You	O
use	O
this	O
if	O
you	O
want	O
to	O
have	O
multiple	O
lines	O
in	O
a	O
comment	O
.	O
I	O
will	O
say	O
that	O
you	O
'	O
d	O
only	O
want	O
to	O
use	O
the	O
latter	O
form	O
sparingly	O
;	O
that	O
is	O
,	O
you	O
don	O
'	O
t	O
want	O
to	O
overburden	O
your	O
code	O
with	O
block	O
comments	O
that	O
don	O
'	O
t	O
describe	O
what	O
behaviors	O
the	O
method	O
/	O
complex	O
function	O
is	O
supposed	O
to	O
have	O
.	O
Since	O
Javadoc	O
is	O
the	O
more	O
descriptive	O
of	O
the	O
two	O
,	O
and	O
you	O
can	O
generate	O
actual	O
documentation	O
as	O
a	O
result	O
of	O
using	O
it	O
,	O
using	O
Javadoc	O
would	O
be	O
more	O
preferable	O
to	O
simple	O
block	O
comments	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31924845	O
There	O
are	O
almost	O
no	O
good	O
reasons	O
for	O
not	O
using	O
Optional	B-api_mention
as	O
parameters	O
.	O
The	O
arguments	O
against	O
this	O
rely	O
on	O
arguments	O
from	O
authority	O
(	O
see	O
Brian	O
Goetz	O
-	O
his	O
argument	O
is	O
we	O
can	O
'	O
t	O
enforce	O
non	O
null	O
optionals	O
)	O
or	O
that	O
the	O
Optional	B-api_mention
arguments	O
may	O
be	O
null	O
(	O
essentially	O
the	O
same	O
argument	O
)	O
.	O
Of	O
course	O
,	O
any	O
reference	O
in	O
Java	O
can	O
be	O
null	O
,	O
we	O
need	O
to	O
encourage	O
rules	O
being	O
enforced	O
by	O
the	O
compiler	O
,	O
not	O
programmers	O
memory	O
(	O
which	O
is	O
problematic	O
and	O
does	O
not	O
scale	O
)	O
.	O
Functional	O
programming	O
languages	O
encourage	O
Optional	B-api_mention
parameters	O
.	O
One	O
of	O
the	O
best	O
ways	O
of	O
using	O
this	O
is	O
to	O
have	O
multiple	O
optional	O
parameters	O
and	O
using	O
liftM2	O
to	O
use	O
a	O
function	O
assuming	O
the	O
parameters	O
are	O
not	O
empty	O
and	O
returning	O
an	O
optional	O
(	O
see	O
#	O
a	O
)	O
.	O
Java	O
8	O
has	O
unfortunately	O
implemented	O
a	O
very	O
limited	O
library	O
supporting	O
optional	O
.	O
As	O
Java	O
programmers	O
we	O
should	O
only	O
be	O
using	O
null	O
to	O
interact	O
with	O
legacy	O
libraries	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
34405789	O
Set	B-api_mention
and	O
Map	B-api_mention
are	O
non	O
-	O
linear	O
data	O
structure	O
.	O
List	B-api_mention
is	O
linear	O
data	O
structure	O
.	O
The	O
tree	O
data	O
structure	O
SortedSet	B-api_mention
and	O
SortedMap	B-api_mention
interfaces	O
implements	O
TreeSet	B-api_mention
and	O
TreeMap	B-api_mention
respectively	O
using	O
used	O
Red	O
-	O
Black	O
tree	O
implementation	O
algorithm	O
.	O
So	O
it	O
ensure	O
that	O
there	O
are	O
no	O
duplicated	O
items	O
(	O
or	O
keys	O
in	O
case	O
of	O
Map	O
)	O
.	O
#	O
li	O
Tree	O
by	O
definition	O
cannot	O
contain	O
duplicates	O
.	O
#	O
li	O
In	O
List	B-api_mention
we	O
can	O
have	O
duplicates	O
,	O
so	O
there	O
is	O
no	O
TreeList	B-api_mention
.	O
So	O
if	O
we	O
want	O
to	O
sort	O
the	O
list	O
we	O
have	O
to	O
use	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
24651403	O
,	O
answer	O
-	O
24651855	O
OK	O
,	O
first	O
of	O
all	O
,	O
your	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
will	O
not	O
work	O
as	O
intended	O
,	O
chained	O
if	O
-	O
elseif	O
will	O
maximally	O
execute	O
1	O
branch	O
of	O
code	O
,	O
for	O
example	O
:	O
#	O
pre	O
Even	O
if	O
e	O
contains	O
both	O
N	O
and	O
W	O
,	O
only	O
bexits	O
[	O
0	O
]	O
will	O
be	O
set	O
.	O
Also	O
this	O
method	O
will	O
only	O
add	O
exits	O
(	O
for	O
example	O
calling	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
delete	O
any	O
existing	O
exits	O
.	O
I	O
would	O
change	O
that	O
method	O
to	O
:	O
#	O
pre	O
Also	O
,	O
i	O
definetly	O
wouldn	O
'	O
t	O
remember	O
that	O
north	O
is	O
on	O
index	O
0	O
,	O
west	O
in	O
on	O
1	O
,	O
.	O
.	O
.	O
so	O
a	O
common	O
practice	O
is	O
to	O
name	O
your	O
indexes	O
using	O
final	O
static	O
constants	O
:	O
#	O
pre	O
Then	O
you	O
can	O
write	O
in	O
your	O
setExits	B-api_mention
method	O
:	O
#	O
pre	O
(	O
much	O
more	O
readible	O
)	O
Finally	O
,	O
if	O
you	O
want	O
your	O
code	O
even	O
more	O
well	O
-	O
arranged	O
,	O
you	O
can	O
make	O
a	O
Exits	B-api_mention
class	O
representing	O
avaliable	O
exits	O
,	O
and	O
backed	O
by	O
boolean	O
array	O
.	O
Then	O
on	O
place	O
where	O
you	O
create	O
your	O
String	B-api_mention
,	O
you	O
could	O
create	O
this	O
class	O
instead	O
and	O
save	O
yourself	O
work	O
with	O
generating	O
and	O
then	O
parsing	O
a	O
string	O
.	O
EDIT	O
:	O
as	O
@	O
gexicide	O
answers	O
,	O
there	O
is	O
a	O
really	O
handy	O
class	O
EnumSet	B-api_mention
which	O
would	O
be	O
probably	O
better	O
for	O
representing	O
the	O
exits	O
than	O
bollean	O
array	O
.	O
Question	O
-	O
25903137	O
,	O
answer	O
-	O
25903190	O
#	O
pre	O
It	O
'	O
s	O
not	O
quite	O
as	O
nice	O
as	O
the	O
list	O
code	O
.	O
You	O
can	O
'	O
t	O
construct	O
new	O
Map	B-api_mention
.	I-api_mention
Entry	I-api_mention
s	O
in	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
so	O
the	O
work	O
is	O
mixed	O
into	O
the	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
.	O
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993533	O
The	O
reason	O
is	O
that	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
checks	O
if	O
there	O
are	O
any	O
more	O
non	O
-	O
whitespace	O
characters	O
available	O
.	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
checks	O
to	O
see	O
if	O
there	O
is	O
another	O
line	O
of	O
text	O
available	O
.	O
Your	O
text	O
file	O
probably	O
has	O
a	O
newline	O
at	O
the	O
end	O
of	O
it	O
so	O
it	O
has	O
another	O
line	O
but	O
no	O
more	O
characters	O
that	O
are	O
not	O
whitespace	O
.	O
Many	O
text	O
editors	O
automatically	O
add	O
a	O
newline	O
to	O
the	O
end	O
of	O
a	O
file	O
if	O
there	O
isn	O
'	O
t	O
one	O
already	O
.	O
In	O
other	O
words	O
,	O
your	O
input	O
file	O
is	O
not	O
this	O
(	O
the	O
numbers	O
are	O
line	O
numbers	O
)	O
:	O
#	O
pre	O
It	O
is	O
actually	O
this	O
:	O
#	O
pre	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14847046	O
Most	O
of	O
the	O
time	O
we	O
use	O
a	O
constructor	O
to	O
create	O
a	O
new	O
empty	O
map	O
.	O
But	O
the	O
Collections	B-api_mention
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
to	O
create	O
an	O
empty	O
map	O
using	O
static	O
method	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
emptyMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
blockquote	O
Question	O
-	O
4772425	O
,	O
answer	O
-	O
18953213	O
remove	O
one	O
y	O
form	O
SimpleDateFormat	B-api_mention
dt1	O
=	O
new	O
SimpleDateFormat	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
should	O
be	O
SimpleDateFormat	B-api_mention
dt1	O
=	O
new	O
SimpleDateFormat	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
30581531	O
What	O
is	O
the	O
maximum	O
number	O
of	O
parameters	O
that	O
a	O
method	O
in	O
Java	O
can	O
have	O
and	O
why	O
?	O
I	O
am	O
using	O
Java	O
1	O
.	O
8	O
on	O
a	O
64	O
-	O
bit	O
Windows	O
system	O
.	O
All	O
the	O
answers	O
on	O
StackOverflow	O
about	O
this	O
say	O
that	O
the	O
technical	O
limit	O
is	O
255	O
parameters	O
without	O
specifying	O
why	O
.	O
To	O
be	O
precise	O
,	O
255	O
for	O
static	O
and	O
254	O
for	O
non	O
-	O
static	O
(	O
this	O
will	O
be	O
the	O
255th	O
in	O
this	O
case	O
)	O
methods	O
.	O
I	O
thought	O
this	O
could	O
be	O
specified	O
in	O
some	O
sort	O
of	O
specification	O
and	O
that	O
this	O
was	O
simply	O
a	O
statically	O
defined	O
maximum	O
number	O
of	O
parameters	O
allowed	O
.	O
But	O
this	O
was	O
only	O
valid	O
for	O
int	O
and	O
all	O
4	O
-	O
bytes	O
types	O
.	O
I	O
did	O
some	O
tests	O
with	O
long	O
parameters	O
,	O
and	O
I	O
was	O
only	O
able	O
to	O
declare	O
127	O
parameters	O
in	O
that	O
case	O
.	O
With	O
String	B-api_mention
parameters	O
,	O
the	O
allowed	O
number	O
i	O
deduced	O
from	O
testing	O
is	O
255	O
(	O
it	O
may	O
be	O
because	O
the	O
reference	O
size	O
is	O
4	O
bytes	O
in	O
Java	O
?	O
)	O
.	O
But	O
since	O
I	O
am	O
using	O
a	O
64	O
-	O
bit	O
system	O
,	O
references	O
size	O
should	O
be	O
8	O
bytes	O
wide	O
and	O
so	O
with	O
String	B-api_mention
parameters	O
the	O
maximum	O
allowed	O
number	O
should	O
be	O
127	O
,	O
similar	O
to	O
long	O
types	O
.	O
How	O
does	O
this	O
limit	O
is	O
exactly	O
applied	O
?	O
Does	O
the	O
limit	O
have	O
anything	O
to	O
do	O
with	O
the	O
stack	O
size	O
of	O
the	O
method	O
?	O
Note	O
:	O
I	O
am	O
not	O
really	O
going	O
to	O
use	O
these	O
many	O
parameters	O
in	O
any	O
method	O
,	O
but	O
this	O
question	O
is	O
only	O
to	O
clarify	O
the	O
exact	O
behavior	O
.	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509655	O
As	O
you	O
said	O
internally	O
the	O
last	O
concatenation	O
is	O
done	O
to	O
something	O
similar	O
to	O
String	B-api_mention
e	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
the	O
implementation	O
of	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
StringBuilder	B-api_mention
creates	O
a	O
new	O
String	B-api_mention
.	O
Here	O
is	O
the	O
implementation	O
.	O
#	O
pre	O
Comparing	O
strings	O
using	O
=	O
=	O
instead	O
of	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
true	O
only	O
if	O
both	O
strings	O
are	O
the	O
same	O
.	O
In	O
this	O
case	O
they	O
are	O
not	O
the	O
same	O
because	O
the	O
second	O
string	O
is	O
created	O
as	O
a	O
new	O
object	O
of	O
type	O
String	B-api_mention
.	O
The	O
other	O
concatenations	O
are	O
performed	O
directly	O
by	O
the	O
compiler	O
so	O
no	O
new	O
String	B-api_mention
is	O
created	O
.	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33147610	O
a	O
<	O
b	O
and	O
a	O
-	O
b	O
<	O
0	O
can	O
mean	O
two	O
different	O
things	O
.	O
Consider	O
the	O
following	O
code	O
:	O
#	O
pre	O
When	O
run	O
,	O
this	O
will	O
only	O
print	O
a	O
-	O
b	O
<	O
0	O
.	O
What	O
happens	O
is	O
that	O
a	O
<	O
b	O
is	O
clearly	O
false	O
,	O
but	O
a	O
-	O
b	O
overflows	O
and	O
becomes	O
-	O
1	O
,	O
which	O
is	O
negative	O
.	O
Now	O
,	O
having	O
said	O
that	O
,	O
consider	O
that	O
the	O
array	O
has	O
a	O
length	O
that	O
is	O
really	O
close	O
to	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
The	O
code	O
in	O
ArrayList	B-api_mention
goes	O
like	O
this	O
:	O
#	O
pre	O
oldCapacity	O
is	O
really	O
close	O
to	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
so	O
newCapacity	O
(	O
which	O
is	O
oldCapacity	O
+	O
0	O
.	O
5	O
*	O
oldCapacity	O
)	O
might	O
overflow	O
and	O
become	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
(	O
i	O
.	O
e	O
.	O
negative	O
)	O
.	O
Then	O
,	O
subtracting	O
minCapacity	O
underflows	O
back	O
into	O
a	O
positive	O
number	O
.	O
This	O
check	O
ensures	O
that	O
the	O
if	O
is	O
not	O
executed	O
.	O
If	O
the	O
code	O
were	O
written	O
as	O
if	O
(	O
args	O
)	O
,	O
it	O
would	O
be	O
true	O
in	O
this	O
case	O
(	O
since	O
newCapacity	O
is	O
negative	O
)	O
so	O
the	O
newCapacity	O
would	O
be	O
forced	O
to	O
minCapacity	O
regardless	O
of	O
the	O
oldCapacity	O
.	O
This	O
overflow	O
case	O
is	O
handled	O
by	O
the	O
next	O
if	O
.	O
When	O
newCapacity	O
has	O
overflowed	O
,	O
this	O
will	O
be	O
true	O
:	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
is	O
defined	O
as	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
8	O
and	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
(	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
8	O
)	O
>	O
0	O
is	O
true	O
.	O
The	O
newCapacity	O
is	O
therefore	O
rightly	O
handled	O
:	O
hugeCapacity	O
method	O
returns	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
or	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
NB	O
:	O
this	O
is	O
what	O
the	O
/	O
/	O
overflow	O
-	O
conscious	O
code	O
comment	O
in	O
this	O
method	O
is	O
saying	O
.	O
Question	O
-	O
32475166	O
,	O
answer	O
-	O
32476850	O
When	O
you	O
think	O
about	O
the	O
type	O
of	O
the	O
operands	O
,	O
the	O
problem	O
becomes	O
more	O
apparent	O
:	O
this	O
.	O
method	O
!	O
=	O
null	O
?	O
this	O
.	O
method	O
:	O
this	O
.	O
constructor	O
has	O
as	O
type	O
the	O
most	O
specialized	O
common	O
type	O
of	O
both	O
the	O
operands	O
,	O
i	O
.	O
e	O
.	O
the	O
most	O
specialized	O
type	O
common	O
to	O
both	O
this	O
.	O
method	O
and	O
this	O
.	O
constructor	O
.	O
In	O
Java	O
7	O
this	O
is	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
reflect	I-api_mention
.	I-api_mention
Member	I-api_mention
,	O
however	O
the	O
Java	O
8	O
class	O
library	O
introduces	O
a	O
new	O
type	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Executable	O
which	O
is	O
more	O
specialized	O
than	O
the	O
generic	O
Member	O
.	O
Hence	O
with	O
a	O
Java	O
8	O
class	O
library	O
the	O
result	O
type	O
of	O
the	O
ternary	O
expression	O
is	O
Executable	O
rather	O
than	O
Member	O
.	O
Some	O
(	O
pre	O
-	O
release	O
)	O
versions	O
of	O
the	O
Java	O
8	O
compiler	O
seem	O
to	O
have	O
produced	O
an	O
explicit	O
reference	O
to	O
Executable	O
inside	O
generated	O
code	O
when	O
compiling	O
the	O
ternary	O
operator	O
.	O
This	O
would	O
trigger	O
a	O
class	O
load	O
,	O
and	O
thus	O
in	O
turn	O
a	O
ClassNotFoundException	B-api_mention
at	O
runtime	O
when	O
running	O
with	O
a	O
class	O
library	O
<	O
JDK	O
8	O
,	O
because	O
Executable	O
only	O
exists	O
for	O
JDK	O
≥	O
8	O
.	O
As	O
noted	O
by	O
Tagir	O
Valeev	O
in	O
this	O
answer	O
,	O
this	O
is	O
actually	O
a	O
bug	O
in	O
pre	O
-	O
release	O
versions	O
of	O
JDK	O
8	O
and	O
has	O
since	O
been	O
fixed	O
,	O
so	O
both	O
the	O
if	O
-	O
else	O
workaround	O
and	O
the	O
explanatory	O
comment	O
are	O
now	O
obsolete	O
.	O
Additional	O
note	O
:	O
One	O
might	O
come	O
to	O
the	O
conclusion	O
that	O
this	O
compiler	O
bug	O
was	O
present	O
before	O
Java	O
8	O
.	O
However	O
,	O
the	O
byte	O
code	O
generated	O
for	O
the	O
ternary	O
by	O
OpenJDK	O
7	O
is	O
the	O
same	O
as	O
the	O
byte	O
code	O
generated	O
by	O
OpenJDK	O
8	O
.	O
In	O
fact	O
,	O
the	O
type	O
of	O
the	O
expression	O
goes	O
completely	O
unmentioned	O
at	O
runtime	O
,	O
the	O
code	O
is	O
really	O
only	O
test	O
,	O
branch	O
,	O
load	O
,	O
return	O
without	O
any	O
additional	O
checks	O
going	O
on	O
.	O
So	O
rest	O
assured	O
that	O
this	O
is	O
not	O
a	O
problem	O
(	O
anymore	O
)	O
and	O
indeed	O
seems	O
to	O
have	O
been	O
a	O
temporary	O
problem	O
during	O
development	O
of	O
Java	O
8	O
.	O
Question	O
-	O
32714194	O
,	O
answer	O
-	O
32714537	O
While	O
currently	O
most	O
of	O
Java	O
compilers	O
using	O
StringBuilder	B-api_mention
chain	O
,	O
it	O
'	O
s	O
not	O
specified	O
that	O
it	O
should	O
be	O
always	O
in	O
this	O
way	O
.	O
In	O
particular	O
there	O
'	O
s	O
a	O
proposal	O
to	O
change	O
this	O
drastically	O
in	O
Java	O
-	O
9	O
replacing	O
with	O
single	O
invokedynamic	O
call	O
and	O
introduce	O
new	O
metafactory	O
which	O
will	O
generate	O
an	O
appropriate	O
MethodHandle	O
in	O
runtime	O
to	O
perform	O
concatenation	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15430259	O
If	O
you	O
know	O
in	O
advance	O
what	O
the	O
size	O
of	O
the	O
ArrayList	B-api_mention
is	O
going	O
to	O
be	O
,	O
it	O
is	O
more	O
efficient	O
to	O
specify	O
the	O
initial	O
capacity	O
.	O
If	O
you	O
don	O
'	O
t	O
do	O
this	O
,	O
the	O
internal	O
array	O
will	O
have	O
to	O
be	O
repeatedly	O
reallocated	O
as	O
the	O
list	O
grows	O
.	O
The	O
larger	O
the	O
final	O
list	O
,	O
the	O
more	O
time	O
you	O
save	O
by	O
avoiding	O
the	O
reallocations	O
.	O
That	O
said	O
,	O
even	O
without	O
pre	O
-	O
allocation	O
,	O
inserting	O
n	O
elements	O
at	O
the	O
back	O
of	O
an	O
ArrayList	B-api_mention
is	O
guaranteed	O
to	O
take	O
total	O
O	O
(	O
args	O
)	O
time	O
.	O
In	O
other	O
words	O
,	O
appending	O
an	O
element	O
is	O
an	O
amortized	O
constant	O
-	O
time	O
operation	O
.	O
This	O
is	O
achieved	O
by	O
having	O
each	O
reallocation	O
increase	O
the	O
size	O
of	O
the	O
array	O
exponentially	O
,	O
typically	O
by	O
a	O
factor	O
of	O
1	O
.	O
5	O
.	O
With	O
this	O
approach	O
,	O
the	O
total	O
number	O
of	O
operations	O
can	O
be	O
shown	O
to	O
be	O
O	O
(	O
n	O
)	O
.	O
Question	O
-	O
20363719	O
,	O
answer	O
-	O
34675066	O
I	O
was	O
trying	O
to	O
do	O
this	O
and	O
found	O
that	O
,	O
using	O
the	O
answers	O
above	O
,	O
when	O
using	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
key	O
to	O
the	O
Map	B-api_mention
,	O
then	O
I	O
had	O
issues	O
with	O
using	O
a	O
local	O
method	O
like	O
this	O
:	O
:	O
localMethodName	O
to	O
actually	O
work	O
because	O
of	O
typing	O
issues	O
.	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
actually	O
does	O
something	O
to	O
the	O
typing	O
in	O
this	O
case	O
so	O
the	O
method	O
would	O
only	O
work	O
by	O
returning	O
Object	B-api_mention
and	O
accepting	O
a	O
param	O
of	O
Object	B-api_mention
To	O
solve	O
this	O
,	O
I	O
ended	O
up	O
ditching	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
using	O
s	O
-	O
>	O
s	O
instead	O
.	O
So	O
my	O
code	O
,	O
in	O
my	O
case	O
to	O
list	O
all	O
directories	O
inside	O
a	O
directory	O
,	O
and	O
for	O
each	O
one	O
use	O
the	O
name	O
of	O
the	O
directory	O
as	O
the	O
key	O
to	O
the	O
map	O
and	O
then	O
call	O
a	O
method	O
with	O
the	O
directory	O
name	O
and	O
return	O
a	O
collection	O
of	O
items	O
,	O
looks	O
like	O
:	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
items	O
=	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
12539365	O
,	O
answer	O
-	O
29349910	O
I	O
must	O
say	O
,	O
that	O
you	O
are	O
absolutely	O
right	O
from	O
a	O
classical	O
approach	O
'	O
s	O
point	O
of	O
view	O
:	O
#	O
li	O
If	O
you	O
first	O
create	O
(	O
or	O
change	O
)	O
business	O
logic	O
of	O
your	O
application	O
and	O
then	O
cover	O
it	O
with	O
(	O
adopt	O
)	O
tests	O
(	O
Test	O
-	O
Last	O
approach	O
)	O
,	O
then	O
it	O
will	O
be	O
very	O
painful	O
and	O
dangerous	O
to	O
let	O
tests	O
know	O
anything	O
about	O
how	O
your	O
software	O
works	O
,	O
other	O
than	O
checking	O
inputs	O
and	O
outputs	O
.	O
#	O
li	O
If	O
you	O
are	O
practicing	O
a	O
Test	O
-	O
Driven	O
approach	O
,	O
then	O
your	O
tests	O
are	O
the	O
first	O
to	O
be	O
written	O
,	O
to	O
be	O
changed	O
and	O
to	O
reflect	O
the	O
use	O
cases	O
of	O
your	O
software	O
'	O
s	O
functionality	O
.	O
The	O
implementation	O
depends	O
on	O
tests	O
.	O
That	O
sometimes	O
mean	O
,	O
that	O
you	O
want	O
your	O
software	O
to	O
be	O
implemented	O
in	O
some	O
particular	O
way	O
,	O
e	O
.	O
g	O
.	O
rely	O
on	O
some	O
other	O
component	O
'	O
s	O
method	O
or	O
even	O
call	O
it	O
a	O
particular	O
amount	O
of	O
times	O
.	O
That	O
is	O
where	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
comes	O
in	O
handy	O
!	O
It	O
is	O
important	O
to	O
remember	O
,	O
that	O
there	O
are	O
no	O
universal	O
tools	O
.	O
The	O
type	O
of	O
software	O
,	O
it	O
'	O
s	O
size	O
,	O
company	O
goals	O
and	O
market	O
situation	O
,	O
team	O
skills	O
and	O
many	O
other	O
things	O
influence	O
the	O
decision	O
on	O
which	O
approach	O
to	O
use	O
at	O
your	O
particular	O
case	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25853827	O
I	O
would	O
argue	O
first	O
-	O
off	O
that	O
Serializable	B-api_mention
and	O
Cloneable	B-api_mention
are	O
bad	O
examples	O
of	O
marker	O
interfaces	O
.	O
Sure	O
,	O
they	O
'	O
re	O
interfaces	O
with	O
methods	O
,	O
but	O
they	O
imply	O
methods	O
,	O
such	O
as	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
(	O
The	O
compiler	O
will	O
create	O
a	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
you	O
if	O
you	O
don	O
'	O
t	O
override	O
it	O
,	O
and	O
all	O
objects	O
already	O
have	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
the	O
compiler	O
will	O
again	O
create	O
a	O
real	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
you	O
but	O
with	O
caveats	O
.	O
Both	O
of	O
these	O
are	O
weird	O
edge	O
cases	O
that	O
really	O
aren	O
'	O
t	O
good	O
design	O
examples	O
.	O
)	O
Marker	O
interfaces	O
are	O
generally	O
used	O
for	O
one	O
of	O
two	O
purposes	O
:	O
1	O
)	O
As	O
a	O
shortcut	O
to	O
avoid	O
an	O
excessively	O
long	O
type	O
,	O
which	O
can	O
happen	O
with	O
lots	O
of	O
generics	O
.	O
For	O
instance	O
,	O
say	O
you	O
have	O
this	O
method	O
signature	O
:	O
public	O
void	O
doSomething	O
(	O
args	O
)	O
{	O
.	O
.	O
.	O
}	O
That	O
'	O
s	O
messy	O
and	O
annoying	O
to	O
type	O
,	O
and	O
more	O
importantly	O
,	O
difficult	O
to	O
understand	O
.	O
Consider	O
this	O
instead	O
:	O
public	O
interface	O
Widget	O
extends	O
Foobar	O
<	O
T	O
>	O
{	O
}	O
Then	O
your	O
method	O
looks	O
like	O
this	O
:	O
public	O
void	O
doSomething	O
(	O
args	O
)	O
{	O
.	O
.	O
.	O
}	O
Not	O
only	O
is	O
it	O
clearer	O
,	O
but	O
you	O
can	O
now	O
Javadoc	O
the	O
Widget	B-api_mention
interface	O
,	O
and	O
it	O
'	O
s	O
also	O
easier	O
to	O
search	O
for	O
all	O
occurrences	O
in	O
your	O
code	O
of	O
Widget	B-api_mention
.	O
2	O
)	O
Marker	B-api_mention
interfaces	O
can	O
also	O
be	O
used	O
as	O
a	O
way	O
around	O
Java	O
'	O
s	O
lack	O
of	O
intersection	O
types	O
.	O
With	O
a	O
marker	B-api_mention
interface	O
,	O
you	O
can	O
require	O
something	O
to	O
be	O
of	O
two	O
different	O
types	O
,	O
such	O
as	O
in	O
a	O
method	O
signature	O
.	O
Say	O
you	O
have	O
some	O
interface	O
Widget	B-api_mention
in	O
your	O
application	O
,	O
like	O
we	O
described	O
above	O
.	O
If	O
you	O
have	O
a	O
method	O
that	O
requires	O
a	O
Widget	B-api_mention
that	O
also	O
happens	O
to	O
let	O
you	O
iterate	O
over	O
it	O
(	O
it	O
'	O
s	O
contrived	O
,	O
but	O
work	O
with	O
me	O
here	O
)	O
,	O
your	O
only	O
good	O
solution	O
is	O
to	O
create	O
a	O
marker	O
interface	O
that	O
extends	O
both	O
interfaces	O
:	O
public	O
interface	O
IterableWidget	B-api_mention
extends	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
Widget	B-api_mention
{	O
}	O
And	O
in	O
your	O
code	O
:	O
#	O
pre	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275508	O
Just	O
use	O
TheClassName	O
.	O
class	O
instead	O
of	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
20130475	O
To	O
convert	O
a	O
Stream	B-api_mention
to	O
an	O
Iterable	B-api_mention
,	O
you	O
can	O
do	O
#	O
pre	O
To	O
pass	O
a	O
Stream	B-api_mention
to	O
a	O
method	O
that	O
expects	O
Iterable	B-api_mention
,	O
void	O
foo	O
(	O
args	O
)	O
simply	O
foo	O
(	O
args	O
)	O
however	O
it	O
probably	O
looks	O
funny	O
;	O
it	O
might	O
be	O
better	O
to	O
be	O
a	O
little	O
bit	O
more	O
explicit	O
foo	O
(	O
args	O
)	O
;	O
Question	O
-	O
22929237	O
,	O
answer	O
-	O
28564046	O
You	O
can	O
use	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
as	O
:	O
Date	B-api_mention
date	O
=	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
No	O
need	O
to	O
add	O
time	O
and	O
time	O
zone	O
info	O
here	O
because	O
they	O
are	O
taken	O
implicitly	O
.	O
See	O
Simpliest	O
java8	O
LocalDate	B-api_mention
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
conversion	O
and	O
vice	O
versa	O
?	O
Question	O
-	O
22036885	O
,	O
answer	O
-	O
22037068	O
As	O
said	O
in	O
API	O
#	O
blockquote	O
It	O
'	O
s	O
because	O
of	O
cannot	O
represent	O
double	O
value	O
exactly	O
.	O
So	O
you	O
have	O
to	O
use	O
BigDecimal	B-api_mention
bigDecimal	O
=	O
BigDecimal	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
of	O
BigDecimal	B-api_mention
bigDecimal	O
=	O
new	O
BigDecimal	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
31170459	O
I	O
was	O
testing	O
boundary	O
conditions	O
on	O
some	O
code	O
involving	O
a	O
BigDecimal	B-api_mention
,	O
and	O
I	O
noticed	O
that	O
when	O
a	O
BigDecimal	B-api_mention
is	O
initialized	O
with	O
the	O
String	B-api_mention
StringLiteral	O
it	O
behaves	O
unexpectedly	O
.	O
It	O
seems	O
to	O
have	O
a	O
value	O
between	O
0	O
and	O
1e	O
-	O
2147483647	O
.	O
When	O
I	O
try	O
calling	O
intValue	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
get	O
a	O
NegativeArraySizeException	B-api_mention
.	O
I	O
should	O
note	O
that	O
2147483647	O
is	O
the	O
max	O
value	O
of	O
an	O
integer	O
on	O
my	O
system	O
.	O
Am	O
I	O
doing	O
something	O
wrong	O
,	O
or	O
is	O
this	O
a	O
problem	O
with	O
BigDecimal	B-api_mention
?	O
#	O
pre	O
Question	O
-	O
30888581	O
,	O
answer	O
-	O
30897102	O
Once	O
given	O
more	O
thought	O
In	O
hindsight	O
it	O
sounds	O
like	O
they	O
were	O
looking	O
for	O
the	O
execute	O
around	O
pattern	O
.	O
They	O
'	O
re	O
usually	O
used	O
to	O
do	O
things	O
like	O
enforce	O
closing	O
of	O
streams	O
.	O
This	O
is	O
also	O
more	O
relevant	O
due	O
to	O
this	O
line	O
:	O
#	O
blockquote	O
The	O
idea	O
is	O
you	O
give	O
the	O
thing	O
that	O
does	O
the	O
"	O
executing	O
around	O
"	O
some	O
class	O
to	O
do	O
somethings	O
with	O
.	O
You	O
'	O
ll	O
probably	O
use	O
Runnable	B-api_mention
but	O
it	O
'	O
s	O
not	O
necessary	O
.	O
(	O
Runnable	B-api_mention
makes	O
the	O
most	O
sense	O
and	O
you	O
'	O
ll	O
see	O
why	O
soon	O
.	O
)	O
In	O
your	O
StopWatch	B-api_mention
class	O
add	O
some	O
method	O
like	O
this	O
#	O
pre	O
You	O
would	O
then	O
call	O
it	O
like	O
this	O
#	O
pre	O
This	O
makes	O
it	O
fool	O
proof	O
.	O
You	O
don	O
'	O
t	O
have	O
to	O
worry	O
about	O
handling	O
stop	O
before	O
start	O
or	O
people	O
forgetting	O
to	O
call	O
one	O
and	O
not	O
the	O
other	O
,	O
etc	O
.	O
The	O
reason	O
Runnable	B-api_mention
is	O
nice	O
is	O
because	O
#	O
li	O
Standard	O
java	O
class	O
,	O
not	O
your	O
own	O
or	O
third	O
party	O
#	O
li	O
End	O
users	O
can	O
put	O
whatever	O
they	O
need	O
in	O
the	O
Runnable	B-api_mention
to	O
be	O
done	O
.	O
(	O
If	O
you	O
were	O
using	O
it	O
to	O
enforce	O
stream	O
closing	O
then	O
you	O
could	O
put	O
the	O
actions	O
that	O
need	O
to	O
be	O
done	O
with	O
a	O
database	O
connection	O
inside	O
so	O
the	O
end	O
user	O
doesn	O
'	O
t	O
need	O
to	O
worry	O
about	O
how	O
to	O
open	O
and	O
close	O
it	O
and	O
you	O
simultaneously	O
force	O
them	O
to	O
close	O
it	O
properly	O
.	O
)	O
If	O
you	O
wanted	O
,	O
you	O
could	O
make	O
some	O
StopWatchWrapper	B-api_mention
instead	O
leave	O
StopWatch	B-api_mention
unmodified	O
.	O
You	O
could	O
also	O
make	O
measureAction	O
(	O
args	O
)	O
not	O
return	O
a	O
time	O
and	O
make	O
getTime	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
public	O
instead	O
.	O
The	O
Java	O
8	O
way	O
to	O
calling	O
it	O
is	O
even	O
simpler	O
#	O
pre	O
#	O
blockquote	O
Original	O
answer	O
#	O
blockquote	O
To	O
me	O
something	O
like	O
this	O
seems	O
to	O
be	O
good	O
.	O
#	O
pre	O
The	O
reason	O
I	O
believe	O
this	O
to	O
be	O
good	O
is	O
the	O
recording	O
is	O
during	O
object	O
creation	O
so	O
it	O
can	O
'	O
t	O
be	O
forgotten	O
or	O
done	O
out	O
of	O
order	O
(	O
can	O
'	O
t	O
call	O
stop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
if	O
it	O
doesn	O
'	O
t	O
exist	O
)	O
.	O
One	O
flaw	O
is	O
probably	O
the	O
naming	O
of	O
stop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
At	O
first	O
I	O
thought	O
maybe	O
lap	O
(	O
args	O
)	O
but	O
that	O
usually	O
implies	O
a	O
restarting	O
or	O
some	O
sort	O
(	O
or	O
at	O
least	O
recording	O
since	O
last	O
lap	O
/	O
start	O
)	O
.	O
Perhaps	O
read	O
(	O
args	O
)	O
would	O
be	O
better	O
?	O
This	O
mimics	O
the	O
action	O
of	O
looking	O
at	O
the	O
time	O
on	O
a	O
stop	O
watch	O
.	O
I	O
chose	O
stop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
keep	O
it	O
similar	O
to	O
the	O
original	O
class	O
.	O
The	O
only	O
thing	O
I	O
'	O
m	O
not	O
100	O
%	O
sure	O
about	O
is	O
how	O
to	O
get	O
the	O
time	O
.	O
To	O
be	O
honest	O
that	O
seems	O
to	O
be	O
a	O
more	O
minor	O
detail	O
.	O
As	O
long	O
as	O
both	O
.	O
.	O
.	O
in	O
the	O
above	O
code	O
obtain	O
current	O
time	O
the	O
same	O
way	O
it	O
should	O
be	O
fine	O
.	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561690	O
Comparator	B-api_mention
is	O
a	O
functional	O
interface	O
,	O
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
max	I-api_mention
complies	O
with	O
that	O
interface	O
(	O
after	O
autoboxing	O
/	O
unboxing	O
is	O
taken	O
into	O
consideration	O
)	O
.	O
It	O
takes	O
two	O
int	O
values	O
and	O
returns	O
an	O
int	O
-	O
just	O
as	O
you	O
'	O
d	O
expect	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
(	O
again	O
,	O
squinting	O
to	O
ignore	O
the	O
Integer	B-api_mention
/	O
int	O
difference	O
)	O
.	O
However	O
,	O
I	O
wouldn	O
'	O
t	O
expect	O
it	O
to	O
do	O
the	O
right	O
thing	O
,	O
given	O
that	O
Integer	B-api_mention
.	I-api_mention
max	I-api_mention
doesn	O
'	O
t	O
comply	O
with	O
the	O
semantics	O
of	O
Comparator	B-api_mention
.	I-api_mention
compare	I-api_mention
.	O
And	O
indeed	O
it	O
doesn	O
'	O
t	O
really	O
work	O
in	O
general	O
.	O
For	O
example	O
,	O
make	O
one	O
small	O
change	O
:	O
#	O
pre	O
.	O
.	O
.	O
and	O
now	O
the	O
max	O
value	O
is	O
-	O
20	O
and	O
the	O
min	O
value	O
is	O
-	O
1	O
.	O
Instead	O
,	O
both	O
calls	O
should	O
use	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
compare	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173658	O
If	O
you	O
want	O
to	O
stop	O
either	O
if	O
number	O
5	O
is	O
reached	O
or	O
10	O
elements	O
are	O
collected	O
,	O
there	O
'	O
s	O
Stream	B-api_mention
.	I-api_mention
takeWhile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
added	O
in	O
Java	O
-	O
9	O
:	O
#	O
pre	O
Question	O
-	O
23699371	O
,	O
answer	O
-	O
34731808	O
You	O
can	O
use	O
the	O
distinct	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
Eclipse	O
Collections	B-api_mention
.	O
#	O
pre	O
If	O
you	O
can	O
refactor	O
persons	O
to	O
implement	O
an	O
Eclipse	O
Collections	B-api_mention
interface	O
,	O
you	O
can	O
call	O
the	O
method	O
directly	O
on	O
the	O
list	O
.	O
#	O
pre	O
HashingStrategy	O
is	O
simply	O
a	O
strategy	O
interface	O
that	O
allows	O
you	O
to	O
define	O
custom	O
implementations	O
of	O
equals	O
and	O
hashcode	O
.	O
#	O
pre	O
Note	O
:	O
I	O
am	O
a	O
committer	O
for	O
Eclipse	O
Collections	B-api_mention
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846943	O
It	O
is	O
,	O
in	O
my	O
personal	O
experience	O
admittedly	O
,	O
very	O
useful	O
in	O
cases	O
where	O
an	O
API	O
requires	O
a	O
collection	O
of	O
parameters	O
,	O
but	O
you	O
have	O
nothing	O
to	O
provide	O
.	O
For	O
example	O
you	O
may	O
have	O
an	O
API	O
that	O
looks	O
something	O
like	O
this	O
,	O
and	O
does	O
not	O
allow	O
null	O
references	O
:	O
public	O
ResultSet	B-api_mention
executeQuery	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
have	O
a	O
query	O
that	O
doesn	O
'	O
t	O
take	O
any	O
parameters	O
,	O
it	O
'	O
s	O
certainly	O
a	O
bit	O
wasteful	O
to	O
create	O
a	O
HashMap	B-api_mention
,	O
which	O
involves	O
allocating	O
an	O
array	O
,	O
when	O
you	O
could	O
just	O
pass	O
in	O
the	O
'	O
Empty	O
Map	O
'	O
which	O
is	O
effectively	O
a	O
constant	O
,	O
the	O
way	O
it	O
'	O
s	O
implemented	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	O
Question	O
-	O
14809293	O
,	O
answer	O
-	O
14821488	O
The	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
has	O
already	O
been	O
mentioned	O
-	O
the	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
strangely	O
not	O
!	O
My	O
solution	O
would	O
also	O
be	O
to	O
use	O
the	O
list	O
from	O
the	O
outside	O
and	O
wrap	O
the	O
array	O
as	O
follows	O
:	O
#	O
pre	O
The	O
problem	O
with	O
copying	O
the	O
array	O
is	O
:	O
if	O
you	O
'	O
re	O
doing	O
it	O
every	O
time	O
you	O
access	O
the	O
code	O
and	O
the	O
array	O
is	O
big	O
,	O
you	O
'	O
ll	O
create	O
a	O
lot	O
of	O
work	O
for	O
the	O
garbage	O
collector	O
for	O
sure	O
.	O
So	O
the	O
copy	O
is	O
a	O
simple	O
but	O
really	O
bad	O
approach	O
-	O
I	O
'	O
d	O
say	O
"	O
cheap	O
"	O
,	O
but	O
memory	O
-	O
expensive	O
!	O
Especially	O
when	O
you	O
'	O
re	O
having	O
more	O
than	O
just	O
2	O
elements	O
.	O
If	O
you	O
look	O
at	O
the	O
source	O
code	O
of	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
and	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
there	O
is	O
actually	O
not	O
much	O
created	O
.	O
The	O
first	O
just	O
wraps	O
the	O
array	O
without	O
copying	O
it	O
,	O
the	O
second	O
just	O
wraps	O
the	O
list	O
,	O
making	O
changes	O
to	O
it	O
unavailable	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
36394016	O
Whenever	O
there	O
is	O
the	O
slightest	O
possibility	O
that	O
the	O
given	O
String	B-api_mention
does	O
not	O
contain	O
an	O
Integer	B-api_mention
,	O
you	O
have	O
to	O
handle	O
this	O
special	O
case	O
.	O
Sadly	O
,	O
the	O
standard	O
Java	O
methods	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
parseInt	I-api_mention
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
valueOf	I-api_mention
throw	O
a	O
NumberFormatException	B-api_mention
to	O
signal	O
this	O
special	O
case	O
.	O
Thus	O
,	O
you	O
have	O
to	O
use	O
exceptions	O
for	O
flow	O
control	O
,	O
which	O
is	O
generally	O
considered	O
bad	O
coding	O
style	O
.	O
In	O
my	O
opinion	O
,	O
this	O
special	O
case	O
should	O
be	O
handled	O
by	O
returning	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Since	O
Java	O
does	O
not	O
offer	O
such	O
a	O
method	O
,	O
I	O
use	O
the	O
following	O
wrapper	O
:	O
#	O
pre	O
Usage	O
:	O
#	O
pre	O
While	O
this	O
is	O
still	O
using	O
exceptions	O
for	O
flow	O
control	O
internally	O
,	O
the	O
usage	O
code	O
becomes	O
very	O
clean	O
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
29226136	O
Also	O
note	O
that	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
normally	O
contains	O
=	O
=	O
for	O
testing	O
as	O
this	O
is	O
the	O
first	O
thing	O
you	O
would	O
wish	O
to	O
test	O
for	O
if	O
you	O
wanted	O
to	O
test	O
if	O
two	O
objects	O
are	O
equal	O
.	O
And	O
=	O
=	O
actually	O
does	O
look	O
at	O
values	O
for	O
primitive	O
types	O
,	O
for	O
objects	O
it	O
checks	O
the	O
reference	O
.	O
Question	O
-	O
25222811	O
,	O
answer	O
-	O
26676046	O
To	O
begin	O
with	O
(	O
and	O
unrelated	O
)	O
,	O
instantiating	O
the	O
Application	B-api_mention
class	O
by	O
yourself	O
does	O
not	O
seem	O
to	O
be	O
its	O
intended	O
use	O
.	O
From	O
what	O
one	O
can	O
read	O
from	O
its	O
source	O
,	O
you	O
are	O
rather	O
expected	O
to	O
use	O
the	O
static	O
instance	O
returned	O
by	O
getApplication	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Now	O
let	O
'	O
s	O
get	O
to	O
the	O
error	O
Eclipse	O
reports	O
.	O
I	O
'	O
ve	O
ran	O
into	O
a	O
similar	O
issue	O
recently	O
:	O
Access	O
restriction	O
:	O
The	O
method	O
.	O
.	O
.	O
is	O
not	O
API	O
(	O
args	O
)	O
.	O
I	O
called	O
the	O
method	O
in	O
question	O
as	O
a	O
method	O
of	O
an	O
object	O
which	O
inherited	O
that	O
method	O
from	O
a	O
super	O
class	O
.	O
All	O
I	O
had	O
to	O
do	O
was	O
to	O
add	O
the	O
package	O
the	O
super	O
class	O
was	O
in	O
to	O
the	O
packages	O
imported	O
by	O
my	O
plugin	O
.	O
However	O
,	O
there	O
is	O
a	O
lot	O
of	O
different	O
causes	O
for	O
errors	O
based	O
on	O
"	O
restriction	O
on	O
required	O
project	O
/	O
library	O
"	O
.	O
Similar	O
to	O
the	O
problem	O
described	O
above	O
,	O
the	O
type	O
you	O
are	O
using	O
might	O
have	O
dependencies	O
to	O
packages	O
that	O
are	O
not	O
exported	O
by	O
the	O
library	O
or	O
might	O
not	O
be	O
exported	O
itself	O
.	O
In	O
that	O
case	O
you	O
can	O
try	O
to	O
track	O
down	O
the	O
missing	O
packages	O
and	O
export	O
them	O
my	O
yourself	O
,	O
as	O
suggested	O
here	O
,	O
or	O
try	O
Access	O
Rules	O
.	O
Other	O
possible	O
scenarios	O
include	O
:	O
#	O
li	O
Eclipse	O
wants	O
to	O
keep	O
you	O
from	O
using	O
available	O
packages	O
that	O
are	O
not	O
part	O
of	O
the	O
public	O
Java	O
API	O
(	O
solution	O
1	O
,	O
2	O
)	O
#	O
li	O
Dependencies	O
are	O
satisfied	O
by	O
multiple	O
sources	O
,	O
versions	O
are	O
conflicting	O
etc	O
.	O
(	O
solution	O
1	O
,	O
2	O
,	O
3	O
)	O
#	O
li	O
Eclipse	O
is	O
using	O
a	O
JRE	O
where	O
a	O
JDK	O
is	O
necessary	O
(	O
which	O
might	O
be	O
the	O
case	O
here	O
,	O
from	O
what	O
your	O
errors	O
say	O
;	O
solution	O
)	O
or	O
JRE	O
/	O
JDK	O
version	O
in	O
project	O
build	O
path	O
is	O
not	O
the	O
right	O
one	O
This	O
ended	O
up	O
as	O
more	O
like	O
a	O
medley	O
of	O
restriction	O
-	O
related	O
issues	O
than	O
an	O
actual	O
answer	O
.	O
But	O
since	O
restriction	O
on	O
required	O
projects	O
is	O
such	O
a	O
versatile	O
error	O
to	O
be	O
reported	O
,	O
the	O
perfect	O
recipe	O
is	O
probably	O
still	O
to	O
be	O
found	O
.	O
Question	O
-	O
27683759	O
I	O
just	O
studied	O
about	O
generic	O
programming	O
,	O
the	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
,	O
and	O
ArrayList	B-api_mention
,	O
so	O
I	O
can	O
understand	O
the	O
statement	O
below	O
.	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
I	O
don	O
'	O
t	O
understand	O
the	O
next	O
statement	O
which	O
I	O
saw	O
while	O
surfing	O
the	O
web	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list2	O
=	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
What	O
is	O
Collections	B-api_mention
?	O
Why	O
isn	O
'	O
t	O
it	O
Collections	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
or	O
Collections	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
?	O
#	O
li	O
Why	O
is	O
<	O
String	O
>	O
placed	O
before	O
the	O
method	O
name	O
emptyList	B-api_mention
?	O
(	O
Isn	O
'	O
t	O
emptyList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
correct	O
for	O
Generic	O
?	O
)	O
#	O
li	O
What	O
does	O
the	O
statement	O
mean	O
?	O
Question	O
-	O
10977992	O
#	O
pre	O
We	O
can	O
use	O
Iterator	B-api_mention
to	O
traverse	O
a	O
Set	B-api_mention
or	O
a	O
List	B-api_mention
or	O
a	O
Map	B-api_mention
.	O
But	O
ListIterator	B-api_mention
can	O
only	O
be	O
used	O
to	O
traverse	O
a	O
List	B-api_mention
,	O
it	O
can	O
'	O
t	O
traverse	O
a	O
Set	B-api_mention
.	O
Why	O
?	O
I	O
know	O
that	O
the	O
main	O
difference	O
is	O
that	O
with	O
iterator	B-api_mention
we	O
can	O
travel	O
in	O
only	O
one	O
direction	O
but	O
with	O
ListIterator	B-api_mention
we	O
can	O
travel	O
both	O
directions	O
.	O
Are	O
there	O
any	O
other	O
differences	O
?	O
And	O
any	O
advantages	O
of	O
ListIterator	B-api_mention
over	O
Iterator	B-api_mention
?	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725518	O
Because	O
the	O
concept	O
of	O
a	O
List	B-api_mention
is	O
incompatible	O
with	O
the	O
concept	O
of	O
an	O
automatically	O
sorted	O
collection	O
.	O
The	O
point	O
of	O
a	O
List	B-api_mention
is	O
that	O
after	O
calling	O
list	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
a	O
call	O
to	O
list	O
.	B-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
elem	O
.	O
With	O
an	O
auto	O
-	O
sorted	O
list	O
,	O
the	O
element	O
could	O
end	O
up	O
in	O
an	O
arbitrary	O
position	O
.	O
Question	O
-	O
15336477	O
,	O
answer	O
-	O
32364785	O
Examples	O
from	O
Apache	O
(	O
link	O
)	O
use	O
this	O
:	O
HttpClient	B-api_mention
httpclient	O
=	O
HttpClients	B-api_mention
.	I-api_mention
createDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
class	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
http	I-api_mention
.	I-api_mention
impl	I-api_mention
.	I-api_mention
client	I-api_mention
.	I-api_mention
HttpClients	I-api_mention
is	O
there	O
since	O
version	O
4	O
.	O
3	O
.	O
The	O
code	O
for	O
HttpClients	B-api_mention
.	I-api_mention
createDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
same	O
as	O
the	O
accepted	O
answer	O
in	O
here	O
.	O
Question	O
-	O
27430092	O
,	O
answer	O
-	O
27449187	O
The	O
standard	O
use	O
case	O
for	O
BigInteger	B-api_mention
.	I-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
is	O
in	O
cryptography	O
.	O
Specifically	O
,	O
certain	O
cryptographic	O
algorithms	O
,	O
such	O
as	O
RSA	O
,	O
require	O
randomly	O
chosen	O
large	O
primes	O
.	O
Importantly	O
,	O
however	O
,	O
these	O
algorithms	O
don	O
'	O
t	O
really	O
require	O
these	O
numbers	O
to	O
be	O
guaranteed	O
to	O
be	O
prime	O
—	O
they	O
just	O
need	O
to	O
be	O
prime	O
with	O
a	O
very	O
high	O
probability	O
.	O
How	O
high	O
is	O
very	O
high	O
?	O
Well	O
,	O
in	O
a	O
crypto	O
application	O
,	O
one	O
would	O
typically	O
call	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
an	O
argument	O
somewhere	O
between	O
128	O
and	O
256	O
.	O
Thus	O
,	O
the	O
probability	O
of	O
a	O
non	O
-	O
prime	O
number	O
passing	O
such	O
a	O
test	O
is	O
less	O
than	O
one	O
in	O
2	O
128	O
or	O
2	O
256	O
.	O
Let	O
'	O
s	O
put	O
that	O
in	O
perspective	O
:	O
if	O
you	O
had	O
10	O
billion	O
computers	O
,	O
each	O
generating	O
10	O
billion	O
probable	O
prime	O
numbers	O
per	O
second	O
(	O
which	O
would	O
mean	O
less	O
than	O
one	O
clock	O
cycle	O
per	O
number	O
on	O
any	O
modern	O
CPU	O
)	O
,	O
and	O
the	O
primality	O
of	O
those	O
numbers	O
was	O
tested	O
with	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
would	O
,	O
on	O
average	O
,	O
expect	O
one	O
non	O
-	O
prime	O
number	O
to	O
slip	O
in	O
once	O
in	O
every	O
100	O
billion	O
years	O
.	O
That	O
is	O
,	O
that	O
would	O
be	O
the	O
case	O
,	O
if	O
those	O
10	O
billion	O
computers	O
could	O
somehow	O
all	O
run	O
for	O
hundreds	O
of	O
billions	O
of	O
years	O
without	O
experiencing	O
any	O
hardware	O
failures	O
.	O
In	O
practice	O
,	O
though	O
,	O
it	O
'	O
s	O
a	O
lot	O
more	O
likely	O
for	O
a	O
random	O
cosmic	O
ray	O
to	O
strike	O
your	O
computer	O
at	O
just	O
the	O
right	O
time	O
and	O
place	O
to	O
flip	O
the	O
return	O
value	O
of	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
false	O
to	O
true	O
,	O
without	O
causing	O
any	O
other	O
detectable	O
effects	O
,	O
than	O
it	O
is	O
for	O
a	O
non	O
-	O
prime	O
number	O
to	O
actually	O
pass	O
the	O
probabilistic	O
primality	O
test	O
at	O
that	O
certainty	O
level	O
.	O
Of	O
course	O
,	O
the	O
same	O
risk	O
of	O
random	O
cosmic	O
rays	O
and	O
other	O
hardware	O
faults	O
also	O
applies	O
to	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
.	O
Thus	O
,	O
in	O
practice	O
,	O
even	O
these	O
tests	O
have	O
a	O
(	O
very	O
small	O
)	O
baseline	O
false	O
positive	O
rate	O
due	O
to	O
random	O
hardware	O
failures	O
(	O
not	O
to	O
mention	O
all	O
other	O
possible	O
sources	O
of	O
errors	O
,	O
such	O
as	O
implementation	O
bugs	O
)	O
.	O
Since	O
it	O
'	O
s	O
easy	O
to	O
push	O
the	O
intrinsic	O
false	O
positive	O
rate	O
of	O
the	O
Miller	O
–	O
Rabin	O
primality	O
test	O
used	O
by	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
far	O
below	O
this	O
baseline	O
rate	O
,	O
simply	O
by	O
repeating	O
the	O
test	O
sufficiently	O
many	O
times	O
,	O
and	O
since	O
,	O
even	O
repeated	O
so	O
many	O
times	O
,	O
the	O
Miller	O
–	O
Rabin	O
test	O
is	O
still	O
much	O
faster	O
in	O
practice	O
than	O
the	O
best	O
known	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
,	O
it	O
remains	O
the	O
standard	O
primality	O
test	O
for	O
cryptographic	O
applications	O
.	O
(	O
Besides	O
,	O
even	O
if	O
you	O
happened	O
to	O
accidentally	O
select	O
a	O
strong	O
pseudoprime	O
as	O
one	O
of	O
the	O
factors	O
of	O
your	O
RSA	O
modulus	O
,	O
it	O
would	O
not	O
generally	O
lead	O
to	O
a	O
catastrophic	O
failure	O
.	O
Typically	O
,	O
such	O
pseudoprimes	O
would	O
be	O
products	O
of	O
two	O
(	O
or	O
rarely	O
more	O
)	O
primes	O
of	O
approximately	O
half	O
the	O
length	O
,	O
which	O
means	O
that	O
you	O
'	O
d	O
end	O
up	O
with	O
a	O
multi	O
-	O
prime	O
RSA	O
key	O
.	O
As	O
long	O
as	O
none	O
of	O
the	O
factors	O
were	O
too	O
small	O
(	O
and	O
if	O
they	O
were	O
,	O
the	O
primality	O
test	O
should	O
'	O
ve	O
caught	O
them	O
)	O
,	O
the	O
RSA	O
algorithm	O
will	O
still	O
work	O
just	O
fine	O
,	O
and	O
the	O
key	O
,	O
although	O
somewhat	O
weaker	O
against	O
certain	O
types	O
of	O
attacks	O
than	O
normal	O
RSA	O
keys	O
of	O
the	O
same	O
length	O
,	O
should	O
still	O
be	O
reasonably	O
secure	O
if	O
you	O
didn	O
'	O
t	O
needlessly	O
skimp	O
on	O
the	O
key	O
length	O
.	O
)	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
22578124	O
Old	O
thread	O
I	O
know	O
but	O
I	O
am	O
sort	O
of	O
new	O
to	O
Java	O
and	O
discover	O
one	O
of	O
it	O
'	O
s	O
strange	O
things	O
.	O
I	O
have	O
used	O
String	B-api_mention
.	I-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
get	O
unpredictable	O
results	O
.	O
Something	O
like	O
this	O
mess	O
up	O
the	O
string	O
:	O
sUrl	O
=	O
sUrl	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
I	O
designed	O
this	O
function	O
to	O
get	O
around	O
the	O
weird	O
problem	O
:	O
#	O
pre	O
Which	O
make	O
you	O
able	O
to	O
do	O
:	O
#	O
pre	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571348	O
The	O
object	O
your	O
method	O
decompressGZIP	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
needs	O
is	O
a	O
byte	O
[	O
]	O
.	O
So	O
the	O
basic	O
,	O
technical	O
answer	O
to	O
the	O
question	O
you	O
have	O
asked	O
is	O
:	O
#	O
pre	O
However	O
the	O
problem	O
you	O
appear	O
to	O
be	O
wrestling	O
with	O
is	O
that	O
this	O
doesn	O
'	O
t	O
display	O
very	O
well	O
.	O
Calling	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
just	O
give	O
you	O
the	O
default	O
Object	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
is	O
the	O
class	O
name	O
+	O
memory	O
address	O
.	O
In	O
your	O
result	O
[	O
B	O
@	O
38ee9f13	O
,	O
the	O
[	O
B	O
means	O
byte	O
[	O
]	O
and	O
38ee9f13	O
is	O
the	O
memory	O
address	O
,	O
separated	O
by	O
an	O
@	O
.	O
For	O
display	O
purposes	O
you	O
can	O
use	O
:	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
this	O
will	O
just	O
display	O
as	O
a	O
sequence	O
of	O
comma	O
-	O
separated	O
integers	O
,	O
which	O
may	O
or	O
may	O
not	O
be	O
what	O
you	O
want	O
.	O
To	O
get	O
a	O
readable	O
String	B-api_mention
back	O
from	O
a	O
byte	O
[	O
]	O
,	O
use	O
:	O
String	B-api_mention
string	O
=	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
reason	O
the	O
Charset	B-api_mention
version	O
is	O
favoured	O
,	O
is	O
that	O
all	O
String	B-api_mention
objects	O
in	O
Java	O
are	O
stored	O
internally	O
as	O
UTF	O
-	O
16	O
.	O
When	O
converting	O
to	O
a	O
byte	O
[	O
]	O
you	O
will	O
get	O
a	O
different	O
breakdown	O
of	O
bytes	O
for	O
the	O
given	O
glyphs	O
of	O
that	O
String	B-api_mention
,	O
depending	O
upon	O
the	O
chosen	O
charset	O
.	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032208	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
underlying	O
Array	B-api_mention
and	O
set	O
each	O
entry	O
to	O
null	O
;	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
ArrayList	B-api_mention
checking	O
for	O
collection	O
and	O
remove	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
if	O
it	O
exists	O
.	O
I	O
would	O
imagine	O
that	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
way	O
faster	O
then	O
removeAll	B-api_mention
because	O
it	O
'	O
s	O
not	O
comparing	O
,	O
etc	O
.	O
Question	O
-	O
23218874	O
I	O
understand	O
that	O
with	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
can	O
use	O
chain	O
operations	O
like	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
use	O
parallel	O
stream	O
.	O
But	O
what	O
is	O
difference	O
between	O
them	O
if	O
I	O
need	O
to	O
execute	O
small	O
operations	O
(	O
for	O
example	O
,	O
printing	O
the	O
elements	O
of	O
the	O
list	O
)	O
?	O
#	O
pre	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791724	O
Use	O
the	O
replaceEach	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
from	O
Apache	O
Commons	O
StringUtils	B-api_mention
:	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
14534767	O
I	O
have	O
a	O
StringBuilder	B-api_mention
object	O
,	O
#	O
pre	O
Now	O
I	O
want	O
to	O
append	O
a	O
newline	O
character	O
to	O
the	O
StringBuilder	B-api_mention
.	O
How	O
can	O
I	O
do	O
it	O
?	O
result	O
.	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Does	O
not	O
work	O
.	O
So	O
,	O
I	O
was	O
thinking	O
about	O
writing	O
a	O
newline	O
using	O
Unicode	O
.	O
Will	O
this	O
help	O
?	O
If	O
so	O
,	O
how	O
can	O
I	O
add	O
one	O
?	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27949367	O
The	O
strategy	O
they	O
describe	O
is	O
to	O
simply	O
reuse	O
the	O
internal	O
character	O
array	O
of	O
one	O
String	B-api_mention
in	O
possibly	O
many	O
equal	O
Strings	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
each	O
String	B-api_mention
to	O
have	O
its	O
own	O
copy	O
if	O
they	O
are	O
equal	O
.	O
In	O
order	O
to	O
more	O
quickly	O
determine	O
if	O
2	O
strings	O
are	O
equal	O
,	O
the	O
hash	O
code	O
is	O
used	O
as	O
a	O
first	O
step	O
,	O
as	O
it	O
is	O
a	O
fast	O
way	O
to	O
determine	O
if	O
Strings	O
may	O
be	O
equal	O
.	O
Hence	O
their	O
statement	O
:	O
#	O
blockquote	O
This	O
is	O
to	O
make	O
a	O
certain	O
(	O
but	O
slower	O
)	O
comparison	O
for	O
equality	O
once	O
possible	O
equality	O
has	O
been	O
determined	O
using	O
the	O
hash	O
code	O
.	O
In	O
the	O
end	O
,	O
equal	O
Strings	O
will	O
share	O
a	O
single	O
underlying	O
char	O
array	O
.	O
Java	O
has	O
had	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
a	O
long	O
time	O
,	O
to	O
do	O
more	O
or	O
less	O
the	O
same	O
(	O
i	O
.	O
e	O
.	O
save	O
memory	O
by	O
deduplicating	O
equal	O
Strings	O
)	O
.	O
What	O
'	O
s	O
novel	O
about	O
this	O
is	O
that	O
it	O
happens	O
during	O
garbage	O
collection	O
time	O
and	O
can	O
be	O
externally	O
controlled	O
.	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888447	O
You	O
can	O
use	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
E	O
.	O
g	O
.	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
can	O
also	O
use	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
as	O
mentioned	O
by	O
@	O
fge	O
,	O
which	O
looks	O
like	O
#	O
pre	O
But	O
note	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
whereas	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
IntStream	B-api_mention
providing	O
you	O
pass	O
an	O
array	O
of	O
type	O
int	O
[	O
]	O
.	O
So	O
in	O
a	O
nutshell	O
for	O
primitives	O
type	O
you	O
can	O
observe	O
the	O
difference	O
between	O
2	O
methods	O
E	O
.	O
g	O
.	O
#	O
pre	O
When	O
you	O
pass	O
primitive	O
array	O
to	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
,	O
the	O
following	O
code	O
is	O
invoked	O
#	O
pre	O
and	O
when	O
you	O
pass	O
primitive	O
array	O
to	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
the	O
following	O
code	O
is	O
invoked	O
#	O
pre	O
Hence	O
you	O
get	O
different	O
results	O
.	O
Updated	O
:	O
As	O
mentioned	O
by	O
Stuart	O
Marks	O
comment	O
The	O
subrange	O
overload	O
of	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
is	O
preferable	O
to	O
using	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
the	O
former	O
results	O
in	O
a	O
SIZED	O
stream	O
whereas	O
the	O
latter	O
does	O
not	O
.	O
The	O
reason	O
is	O
that	O
limit	O
(	O
args	O
)	O
doesn	O
'	O
t	O
know	O
whether	O
the	O
size	O
is	O
m	O
or	O
less	O
than	O
m	O
,	O
whereas	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
does	O
range	O
checks	O
and	O
knows	O
the	O
exact	O
size	O
of	O
the	O
stream	O
You	O
can	O
read	O
the	O
source	O
code	O
for	O
stream	O
implementation	O
returned	O
by	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
here	O
,	O
whereas	O
for	O
stream	O
implementation	O
returned	O
by	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
within	O
this	O
method	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846960	O
From	O
Effective	O
Java	O
,	O
Item	O
#	O
43	O
-	O
StringLiteral	O
demonstrates	O
returning	O
an	O
empty	O
collection	O
and	O
perhaps	O
even	O
demonstrates	O
using	O
these	O
emptyList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
emptySet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
emptyMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
the	O
Collections	B-api_mention
class	O
to	O
get	O
an	O
empty	O
collection	O
that	O
also	O
has	O
the	O
additional	O
benefit	O
of	O
being	O
immutable	O
.	O
From	O
Item	O
#	O
15	O
StringLiteral	O
.	O
From	O
Collections	B-api_mention
-	O
emptySet	B-api_mention
-	O
Collections	B-api_mention
-	O
emptyList	B-api_mention
-	O
Collections	B-api_mention
#	O
blockquote	O
Note	O
:	O
Below	O
code	O
is	O
just	O
an	O
example	O
(	O
change	O
it	O
according	O
to	O
your	O
use	O
case	O
)	O
:	O
#	O
pre	O
These	O
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
:	O
#	O
li	O
They	O
'	O
re	O
more	O
concise	O
because	O
you	O
don	O
'	O
t	O
need	O
to	O
explicitly	O
type	O
out	O
the	O
generic	O
type	O
of	O
the	O
collection	O
-	O
it	O
'	O
s	O
generally	O
just	O
inferred	O
from	O
the	O
context	O
of	O
the	O
method	O
call	O
.	O
#	O
li	O
They	O
'	O
re	O
more	O
efficient	O
because	O
they	O
don	O
'	O
t	O
bother	O
creating	O
new	O
objects	O
;	O
they	O
just	O
re	O
-	O
use	O
an	O
existing	O
empty	O
and	O
immutable	O
object	O
.	O
This	O
effect	O
is	O
generally	O
very	O
minor	O
,	O
but	O
it	O
'	O
s	O
occasionally	O
(	O
well	O
,	O
rarely	O
)	O
important	O
.	O
Question	O
-	O
23932061	O
,	O
answer	O
-	O
23936723	O
There	O
'	O
s	O
a	O
much	O
better	O
answer	O
than	O
using	O
spliteratorUnknownSize	B-api_mention
directly	O
,	O
which	O
is	O
both	O
easier	O
and	O
gets	O
a	O
better	O
result	O
.	O
Iterable	B-api_mention
has	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
so	O
you	O
should	O
just	O
use	O
that	O
to	O
get	O
your	O
spliterator	O
.	O
In	O
the	O
worst	O
case	O
,	O
its	O
the	O
same	O
code	O
(	O
the	O
default	O
implementation	O
uses	O
spliteratorUnknownSize	B-api_mention
)	O
,	O
but	O
in	O
the	O
more	O
common	O
case	O
,	O
where	O
your	O
Iterable	O
is	O
already	O
a	O
collection	O
,	O
you	O
'	O
ll	O
get	O
a	O
better	O
spliterator	O
,	O
and	O
therefore	O
better	O
stream	O
performance	O
(	O
maybe	O
even	O
good	O
parallelism	O
.	O
)	O
Its	O
also	O
less	O
code	O
:	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
moreStreamOps	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
As	O
you	O
can	O
see	O
,	O
getting	O
a	O
stream	O
from	O
an	O
Iterable	B-api_mention
(	O
see	O
Why	O
does	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
provide	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
methods	O
?	O
)	O
is	O
not	O
very	O
painful	O
.	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275761	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
defined	O
in	O
Object	B-api_mention
class	O
with	O
the	O
following	O
signature	O
:	O
#	O
blockquote	O
Since	O
it	O
is	O
not	O
defined	O
as	O
static	O
,	O
you	O
can	O
not	O
call	O
it	O
within	O
a	O
static	O
code	O
block	O
.	O
See	O
these	O
answers	O
for	O
more	O
information	O
:	O
Q1	O
,	O
Q2	O
,	O
Q3	O
.	O
If	O
you	O
'	O
re	O
in	O
a	O
static	O
context	O
,	O
then	O
you	O
have	O
to	O
use	O
the	O
class	O
literal	O
expression	O
to	O
get	O
the	O
Class	B-api_mention
,	O
so	O
you	O
basically	O
have	O
to	O
do	O
like	O
:	O
#	O
blockquote	O
This	O
type	O
of	O
expression	O
is	O
called	O
Class	B-api_mention
Literals	O
and	O
they	O
are	O
explained	O
in	O
Java	O
Language	O
Specification	O
Book	O
as	O
follows	O
:	O
#	O
blockquote	O
You	O
can	O
also	O
find	O
information	O
about	O
this	O
subject	O
on	O
API	O
documentation	O
for	O
Class	B-api_mention
.	O
Question	O
-	O
24649842	O
What	O
'	O
s	O
the	O
main	O
difference	O
between	O
scheduleAtFixedRate	B-api_mention
and	O
scheduleWithFixedDelay	B-api_mention
methods	O
of	O
ScheduledExecutorService	B-api_mention
?	O
#	O
pre	O
they	O
print	O
exact	O
the	O
same	O
time	O
,	O
seems	O
they	O
are	O
executed	O
at	O
exact	O
the	O
same	O
interval	O
.	O
Question	O
-	O
9510125	O
,	O
answer	O
-	O
9511578	O
Just	O
IMHO	O
.	O
Not	O
sure	O
it	O
'	O
s	O
100	O
%	O
correct	O
.	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
marks	O
the	O
container	O
as	O
invalid	O
.	O
Means	O
the	O
content	O
is	O
somehow	O
wrong	O
and	O
must	O
be	O
relayed	O
out	O
.	O
But	O
it	O
'	O
s	O
just	O
a	O
kind	O
of	O
mark	O
/	O
flag	O
.	O
It	O
'	O
s	O
possible	O
that	O
multiple	O
invalid	O
containers	O
must	O
be	O
refreshed	O
later	O
.	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
performs	O
relayout	O
.	O
It	O
means	O
invalid	O
content	O
is	O
asked	O
for	O
all	O
the	O
sizes	O
and	O
all	O
the	O
subcomponents	O
'	O
sizes	O
are	O
set	O
to	O
proper	O
values	O
by	O
LayoutManager	B-api_mention
.	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
just	O
sum	O
of	O
both	O
.	O
It	O
marks	O
the	O
container	O
as	O
invalid	O
and	O
performs	O
layout	O
of	O
the	O
container	O
.	O
Question	O
-	O
33804394	O
,	O
answer	O
-	O
33814549	O
In	O
this	O
sort	O
of	O
situation	O
I	O
would	O
write	O
#	O
pre	O
Interestingly	O
you	O
say	O
that	O
the	O
"	O
try	O
statement	O
will	O
never	O
fail	O
"	O
,	O
but	O
you	O
still	O
took	O
the	O
trouble	O
to	O
write	O
a	O
statement	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
that	O
you	O
claim	O
will	O
never	O
be	O
executed	O
.	O
Why	O
?	O
Perhaps	O
your	O
belief	O
is	O
not	O
that	O
firmly	O
held	O
.	O
That	O
is	O
good	O
(	O
in	O
my	O
opinion	O
)	O
,	O
since	O
your	O
belief	O
is	O
not	O
based	O
on	O
the	O
code	O
you	O
wrote	O
,	O
but	O
rather	O
on	O
the	O
expectation	O
that	O
your	O
client	O
will	O
not	O
violate	O
the	O
precondition	O
.	O
Better	O
to	O
program	O
public	O
methods	O
defensively	O
.	O
By	O
the	O
way	O
,	O
your	O
code	O
won	O
'	O
t	O
compile	O
for	O
me	O
.	O
You	O
can	O
'	O
t	O
call	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
even	O
if	O
the	O
type	O
of	O
a	O
is	O
Cloneable	B-api_mention
.	O
At	O
least	O
Eclipse	O
'	O
s	O
compiler	O
says	O
so	O
.	O
Expression	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
error	O
#	O
blockquote	O
What	O
I	O
would	O
do	O
for	O
your	O
specific	O
case	O
is	O
#	O
pre	O
Where	O
PubliclyCloneable	O
is	O
defined	O
by	O
#	O
pre	O
Or	O
,	O
if	O
you	O
absolutely	O
need	O
the	O
parameter	O
type	O
to	O
be	O
Cloneable	B-api_mention
,	O
the	O
following	O
at	O
least	O
compiles	O
.	O
#	O
pre	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509669	O
The	O
difference	O
between	O
d	O
and	O
e	O
is	O
that	O
when	O
you	O
concatenate	O
string	O
literals	O
,	O
the	O
concatenation	O
is	O
performed	O
at	O
compile	O
time	O
.	O
Java	O
compiler	O
treats	O
StringLiteral	O
+	O
StringLiteral	O
expression	O
in	O
the	O
same	O
way	O
as	O
StringLiteral	O
expression	O
,	O
producing	O
the	O
same	O
literal	O
at	O
compile	O
time	O
.	O
Since	O
all	O
String	B-api_mention
literals	O
get	O
interned	O
,	O
d	O
,	O
which	O
is	O
a	O
result	O
of	O
StringLiteral	O
+	O
StringLiteral	O
,	O
also	O
ends	O
up	O
referencing	O
the	O
same	O
object	O
as	O
a	O
and	O
b	O
'	O
s	O
StringLiteral	O
.	O
The	O
expression	O
for	O
e	O
,	O
which	O
is	O
c	O
+	O
StringLiteral	O
,	O
is	O
evaluated	O
at	O
runtime	O
.	O
Even	O
though	O
it	O
produces	O
the	O
same	O
string	O
,	O
this	O
fact	O
is	O
not	O
used	O
by	O
the	O
compiler	O
.	O
That	O
'	O
s	O
why	O
a	O
different	O
String	B-api_mention
object	O
is	O
produced	O
,	O
resulting	O
in	O
failed	O
comparison	O
on	O
=	O
=	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331323	O
Another	O
way	O
of	O
doing	O
that	O
is	O
:	O
String	B-api_mention
date	O
=	O
dateAndTime	O
.	B-api_mention
substring	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
I	O
'	O
m	O
not	O
exactly	O
certain	O
,	O
but	O
I	O
think	O
this	O
might	O
be	O
faster	O
/	O
use	O
less	O
memory	O
than	O
using	O
the	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
16226168	O
I	O
would	O
not	O
use	O
URLEncoder	B-api_mention
.	O
Besides	O
being	O
incorrectly	O
named	O
(	O
URLEncoder	B-api_mention
has	O
nothing	O
to	O
do	O
with	O
URLs	O
)	O
,	O
inefficient	O
(	O
it	O
uses	O
a	O
StringBuffer	B-api_mention
instead	O
of	O
Builder	B-api_mention
and	O
does	O
a	O
couple	O
of	O
other	O
things	O
that	O
are	O
slow	O
)	O
Its	O
also	O
way	O
too	O
easy	O
to	O
screw	O
it	O
up	O
.	O
Instead	O
I	O
would	O
use	O
URIBuilder	B-api_mention
or	O
Spring	O
'	O
s	O
URIUtils	B-api_mention
or	O
Commons	O
Apache	O
HttpClient	B-api_mention
.	O
The	O
reason	O
being	O
you	O
have	O
to	O
escape	O
the	O
query	O
parameters	O
name	O
(	O
ie	O
BalusC	O
'	O
s	O
answer	O
q	O
)	O
differently	O
than	O
the	O
parameter	O
value	O
.	O
The	O
only	O
downside	O
to	O
the	O
above	O
(	O
that	O
I	O
found	O
out	O
painfully	O
)	O
is	O
that	O
URL	O
'	O
s	O
are	O
not	O
a	O
true	O
subset	O
of	O
URI	O
'	O
s	O
.	O
Since	O
I	O
'	O
m	O
just	O
linking	O
to	O
other	O
answers	O
I	O
marked	O
this	O
as	O
a	O
community	O
wiki	O
.	O
Feel	O
free	O
to	O
edit	O
.	O
Question	O
-	O
14014086	O
,	O
answer	O
-	O
20784007	O
Ken	O
'	O
s	O
answer	O
is	O
basically	O
right	O
but	O
I	O
'	O
d	O
like	O
to	O
chime	O
in	O
on	O
the	O
"	O
why	O
would	O
you	O
want	O
to	O
use	O
one	O
over	O
the	O
other	O
?	O
"	O
part	O
of	O
your	O
question	O
.	O
Basics	O
The	O
base	O
interface	O
you	O
choose	O
for	O
your	O
repository	O
has	O
two	O
main	O
purposes	O
.	O
First	O
,	O
you	O
allow	O
the	O
Spring	O
Data	O
repository	O
infrastructure	O
to	O
find	O
your	O
interface	O
and	O
trigger	O
the	O
proxy	O
creation	O
so	O
that	O
you	O
inject	O
instances	O
of	O
the	O
interface	O
into	O
clients	O
.	O
The	O
second	O
purpose	O
is	O
to	O
pull	O
in	O
as	O
much	O
functionality	O
as	O
needed	O
into	O
the	O
interface	O
without	O
having	O
to	O
declare	O
extra	O
methods	O
.	O
The	O
common	O
interfaces	O
The	O
Spring	O
Data	O
core	O
library	O
ships	O
with	O
two	O
base	O
interfaces	O
that	O
expose	O
a	O
dedicated	O
set	O
of	O
functionalities	O
:	O
#	O
li	O
CrudRepository	B-api_mention
-	O
CRUD	O
methods	O
#	O
li	O
PagingAndSortingRepository	B-api_mention
-	O
methods	O
for	O
pagination	O
and	O
sorting	O
(	O
extends	O
CrudRepository	B-api_mention
)	O
Store	O
-	O
specific	O
interfaces	O
The	O
individual	O
store	O
modules	O
(	O
e	O
.	O
g	O
.	O
for	O
JPA	O
or	O
MongoDB	O
)	O
expose	O
store	O
-	O
specific	O
extensions	O
of	O
these	O
base	O
interfaces	O
to	O
allow	O
access	O
to	O
store	O
-	O
specific	O
functionality	O
like	O
flushing	O
or	O
dedicated	O
batching	O
that	O
take	O
some	O
store	O
specifics	O
into	O
account	O
.	O
An	O
example	O
for	O
this	O
is	O
deleteInBatch	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
JpaRepository	B-api_mention
which	O
is	O
different	O
from	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
it	O
uses	O
a	O
query	O
to	O
delete	O
the	O
given	O
entities	O
which	O
is	O
more	O
performant	O
but	O
comes	O
with	O
the	O
side	O
effect	O
of	O
not	O
triggering	O
the	O
JPA	O
-	O
defined	O
cascades	O
(	O
as	O
the	O
spec	O
defines	O
it	O
)	O
.	O
We	O
generally	O
recommend	O
not	O
to	O
use	O
these	O
base	O
interfaces	O
as	O
they	O
expose	O
the	O
underlying	O
persistence	O
technology	O
to	O
the	O
clients	O
and	O
thus	O
tighten	O
the	O
coupling	O
between	O
them	O
and	O
the	O
repository	O
.	O
Plus	O
,	O
you	O
get	O
a	O
bit	O
away	O
from	O
the	O
original	O
definition	O
of	O
a	O
repository	O
which	O
is	O
basically	O
"	O
a	O
collection	O
of	O
entities	O
"	O
.	O
So	O
if	O
you	O
can	O
,	O
stay	O
with	O
PagingAndSortingRepository	B-api_mention
.	O
Custom	O
repository	O
base	O
interfaces	O
The	O
downside	O
of	O
directly	O
depending	O
on	O
one	O
of	O
the	O
provided	O
base	O
interfaces	O
is	O
two	O
-	O
fold	O
.	O
Both	O
of	O
them	O
might	O
be	O
considered	O
as	O
theoretical	O
but	O
I	O
think	O
they	O
'	O
re	O
important	O
to	O
be	O
aware	O
of	O
:	O
#	O
li	O
Depending	O
on	O
a	O
a	O
Spring	O
Data	O
repository	O
interface	O
couples	O
your	O
repository	O
interface	O
to	O
the	O
library	O
.	O
I	O
don	O
'	O
t	O
think	O
this	O
is	O
a	O
particular	O
issue	O
as	O
you	O
'	O
ll	O
probably	O
use	O
abstractions	O
like	O
Page	B-api_mention
or	O
Pageable	B-api_mention
in	O
your	O
code	O
anyway	O
.	O
Spring	O
Data	O
is	O
not	O
any	O
different	O
from	O
any	O
other	O
general	O
purpose	O
library	O
like	O
commons	O
-	O
lang	O
or	O
Guava	O
.	O
As	O
long	O
as	O
it	O
provides	O
reasonable	O
benefit	O
,	O
it	O
'	O
s	O
just	O
fine	O
.	O
#	O
li	O
By	O
extending	O
e	O
.	O
g	O
.	O
CrudRepository	B-api_mention
,	O
you	O
expose	O
a	O
complete	O
set	O
of	O
persistence	O
method	O
at	O
once	O
.	O
This	O
is	O
probably	O
fine	O
in	O
most	O
circumstances	O
as	O
well	O
but	O
you	O
might	O
run	O
into	O
situations	O
where	O
you	O
'	O
d	O
like	O
to	O
gain	O
more	O
fine	O
-	O
grained	O
control	O
over	O
the	O
methods	O
expose	O
,	O
e	O
.	O
g	O
.	O
to	O
create	O
a	O
ReadOnlyRepository	B-api_mention
that	O
doesn	O
'	O
t	O
include	O
the	O
save	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
delete	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
of	O
CrudRepository	B-api_mention
.	O
The	O
solution	O
to	O
both	O
of	O
these	O
downsides	O
is	O
to	O
craft	O
your	O
own	O
base	O
repository	O
interface	O
or	O
even	O
a	O
set	O
of	O
them	O
.	O
In	O
a	O
lot	O
of	O
applications	O
we	O
'	O
ve	O
seen	O
something	O
like	O
this	O
:	O
#	O
pre	O
The	O
first	O
repository	O
interface	O
is	O
some	O
general	O
purpose	O
base	O
interface	O
that	O
actually	O
only	O
fixes	O
point	O
1	O
but	O
also	O
ties	O
the	O
ID	O
type	O
to	O
be	O
Long	B-api_mention
for	O
consistency	O
.	O
The	O
second	O
interface	O
usually	O
has	O
all	O
the	O
find	O
…	O
(	O
…	O
)	O
methods	O
copied	O
from	O
CrudRepository	B-api_mention
and	O
PagingAndSortingRepository	B-api_mention
but	O
does	O
not	O
expose	O
the	O
manipulating	O
ones	O
.	O
Read	O
more	O
on	O
that	O
approach	O
in	O
the	O
reference	O
documentation	O
.	O
Summary	O
-	O
tl	O
;	O
dr	O
The	O
repository	O
abstraction	O
allows	O
you	O
to	O
pickt	O
the	O
base	O
repository	O
totally	O
driven	O
by	O
you	O
architectural	O
and	O
functional	O
needs	O
.	O
Use	O
the	O
ones	O
provided	O
out	O
of	O
the	O
box	O
if	O
they	O
suit	O
,	O
craft	O
your	O
own	O
repository	O
base	O
interfaces	O
if	O
necessary	O
.	O
Stay	O
away	O
from	O
the	O
store	O
specific	O
repository	O
interfaces	O
unless	O
unavoidable	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14495128	O
If	O
the	O
Math	B-api_mention
.	I-api_mention
Random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
calls	O
the	O
operating	O
system	O
to	O
get	O
the	O
time	O
of	O
day	O
,	O
then	O
you	O
cannot	O
compare	O
it	O
to	O
your	O
function	O
.	O
Your	O
function	O
is	O
a	O
PRNG	O
,	O
whereas	O
that	O
function	O
is	O
striving	O
for	O
real	O
random	O
numbers	O
.	O
Apples	O
and	O
oranges	O
.	O
Your	O
PRNG	O
may	O
be	O
fast	O
,	O
but	O
it	O
does	O
not	O
have	O
enough	O
state	O
information	O
to	O
achieve	O
a	O
long	O
period	O
before	O
it	O
repeats	O
(	O
and	O
its	O
logic	O
is	O
not	O
sophisticated	O
enough	O
to	O
even	O
achieve	O
the	O
periods	O
that	O
are	O
possible	O
with	O
that	O
much	O
state	O
information	O
)	O
.	O
Period	O
is	O
the	O
length	O
of	O
the	O
sequence	O
before	O
your	O
PRNG	O
begins	O
to	O
repeat	O
itself	O
.	O
This	O
happens	O
as	O
soon	O
as	O
the	O
PRNG	O
machine	O
makes	O
a	O
state	O
transition	O
to	O
a	O
state	O
which	O
is	O
identical	O
to	O
some	O
past	O
state	O
.	O
From	O
there	O
,	O
it	O
will	O
repeat	O
the	O
transitions	O
which	O
began	O
in	O
that	O
state	O
.	O
Another	O
problem	O
with	O
PRNG	O
'	O
s	O
can	O
be	O
a	O
low	O
number	O
of	O
unique	O
sequences	O
,	O
as	O
well	O
as	O
degenerate	O
convergence	O
on	O
a	O
particular	O
sequence	O
which	O
repeats	O
.	O
There	O
can	O
also	O
be	O
undesirable	O
patterns	O
.	O
For	O
instance	O
,	O
suppose	O
that	O
a	O
PRNG	O
looks	O
fairly	O
random	O
when	O
the	O
numbers	O
are	O
printed	O
in	O
decimal	O
,	O
but	O
an	O
inspection	O
of	O
the	O
values	O
in	O
binary	O
shows	O
that	O
bit	O
4	O
is	O
simply	O
toggling	O
between	O
0	O
and	O
1	O
on	O
each	O
call	O
.	O
Oops	O
!	O
Take	O
a	O
look	O
at	O
the	O
Mersenne	O
Twister	O
and	O
other	O
algorithms	O
.	O
There	O
are	O
ways	O
to	O
strike	O
a	O
balance	O
between	O
the	O
period	O
length	O
and	O
CPU	O
cycles	O
.	O
One	O
basic	O
approach	O
(	O
used	O
in	O
the	O
Mersenne	O
Twister	O
)	O
is	O
to	O
cycle	O
around	O
in	O
the	O
state	O
vector	O
.	O
That	O
is	O
to	O
say	O
,	O
when	O
a	O
number	O
is	O
being	O
generated	O
,	O
it	O
is	O
not	O
based	O
on	O
the	O
entire	O
state	O
,	O
just	O
on	O
a	O
few	O
words	O
from	O
the	O
state	O
array	O
subject	O
to	O
a	O
few	O
bit	O
operations	O
.	O
But	O
at	O
each	O
step	O
,	O
the	O
algorithm	O
also	O
moves	O
around	O
in	O
the	O
array	O
,	O
scrambling	O
the	O
contents	O
a	O
little	O
bit	O
at	O
a	O
time	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14492043	O
'	O
Random	O
'	O
is	O
more	O
than	O
just	O
about	O
getting	O
numbers	O
.	O
.	O
.	O
.	O
what	O
you	O
have	O
is	O
pseudo	O
-	O
random	O
If	O
pseudo	O
-	O
random	O
is	O
good	O
enough	O
for	O
your	O
purposes	O
,	O
then	O
sure	O
,	O
it	O
'	O
s	O
way	O
faster	O
(	O
and	O
XOR	O
+	O
Bitshift	O
will	O
be	O
faster	O
than	O
what	O
you	O
have	O
)	O
Rolf	O
Edit	O
:	O
OK	O
,	O
after	O
being	O
too	O
hasty	O
in	O
this	O
answer	O
,	O
let	O
me	O
answer	O
the	O
real	O
reason	O
why	O
your	O
code	O
is	O
faster	O
:	O
From	O
the	O
JavaDoc	O
for	O
Math	B-api_mention
.	I-api_mention
Random	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
blockquote	O
This	O
is	O
likely	O
why	O
your	O
code	O
is	O
faster	O
.	O
Question	O
-	O
20001427	O
,	O
answer	O
-	O
22245383	O
:	O
:	O
is	O
called	O
Method	O
Reference	O
.	O
It	O
is	O
basically	O
a	O
reference	O
to	O
a	O
single	O
method	O
.	O
i	O
.	O
e	O
.	O
it	O
refers	O
to	O
an	O
existing	O
method	O
by	O
name	O
.	O
Short	O
Explanation	O
:	O
Below	O
is	O
an	O
example	O
of	O
a	O
reference	O
to	O
a	O
static	O
method	O
:	O
#	O
pre	O
square	O
can	O
be	O
passed	O
around	O
just	O
like	O
object	O
reference	O
'	O
s	O
and	O
trigger	O
when	O
at	O
need	O
.	O
In	O
fact	O
,	O
it	O
can	O
be	O
perfectly	O
used	O
as	O
a	O
reference	O
to	O
a	O
normal	O
method	O
of	O
an	O
object	O
and	O
not	O
just	O
static	O
ones	O
.	O
#	O
pre	O
Function	B-api_mention
above	O
is	O
a	O
functional	O
interface	O
.	O
Well	O
to	O
fully	O
explain	O
:	O
:	O
,	O
it	O
is	O
important	O
to	O
understand	O
Functional	O
Interface	O
.	O
Plainly	O
,	O
Function	O
interface	O
is	O
an	O
interface	O
with	O
just	O
one	O
abstract	O
method	O
.	O
For	O
example	O
:	O
Runnable	B-api_mention
,	O
Callable	B-api_mention
,	O
ActionListener	B-api_mention
and	O
so	O
.	O
Function	B-api_mention
above	O
is	O
a	O
functional	O
interface	O
with	O
just	O
one	O
method	O
apply	O
.	O
It	O
takes	O
one	O
argument	O
and	O
produces	O
a	O
result	O
.	O
The	O
reason	O
why	O
:	O
:	O
are	O
awesome	O
is	O
because	O
:	O
#	O
blockquote	O
i	O
.	O
e	O
.	O
Just	O
like	O
writing	O
lambda	O
body	O
:	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
square	O
=	O
(	O
Double	B-api_mention
x	O
)	O
-	O
>	O
x	O
*	O
x	O
;	O
You	O
can	O
simply	O
do	O
:	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
square	O
=	O
Hey	O
:	O
:	O
square	O
;	O
At	O
runtime	O
they	O
behave	O
exactly	O
the	O
same	O
.	O
The	O
bytecode	O
may	O
/	O
not	O
be	O
the	O
same	O
(	O
For	O
above	O
case	O
,	O
it	O
generates	O
the	O
same	O
bytecode	O
(	O
compile	O
above	O
and	O
check	O
javap	O
-	O
c	O
)	O
)	O
The	O
only	O
major	O
criteria	O
to	O
satisfy	O
is	O
:	O
the	O
method	O
you	O
provide	O
should	O
have	O
a	O
similar	O
signature	O
to	O
method	O
of	O
the	O
FunctionalInterface	B-api_mention
you	O
use	O
as	O
object	O
reference	O
.	O
Below	O
is	O
illegal	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
p	O
=	O
Hey	O
:	O
:	O
square	O
;	O
/	O
/	O
illegal	O
square	O
expects	O
an	O
argument	O
and	O
returns	O
a	O
double	O
.	O
get	O
method	O
in	O
Supplier	B-api_mention
expects	O
an	O
argument	O
but	O
doesn	O
'	O
t	O
return	O
anything	O
.	O
So	O
it	O
is	O
an	O
error	O
.	O
Method	O
Reference	O
refers	O
to	O
a	O
method	O
of	O
the	O
functional	O
interface	O
(	O
As	O
mentioned	O
,	O
functional	O
interface	O
can	O
only	O
have	O
one	O
method	O
)	O
.	O
Some	O
more	O
examples	O
:	O
accept	O
method	O
in	O
Consumer	B-api_mention
takes	O
an	O
input	O
but	O
doesnt	O
return	O
anything	O
.	O
#	O
pre	O
Above	O
getRandom	O
takes	O
no	O
argument	O
and	O
returns	O
a	O
double	O
.	O
So	O
any	O
functional	O
interface	O
that	O
satisfies	O
the	O
criteria	O
of	O
:	O
take	O
no	O
argument	O
and	O
return	O
double	O
can	O
be	O
used	O
.	O
Another	O
example	O
:	O
#	O
pre	O
In	O
case	O
of	O
Parametrized	O
Types	O
:	O
#	O
pre	O
Method	O
Reference	O
can	O
be	O
obtained	O
in	O
different	O
styles	O
,	O
but	O
fundamentally	O
they	O
all	O
mean	O
the	O
same	O
and	O
can	O
simply	O
be	O
visualized	O
as	O
a	O
lambda	O
:	O
#	O
li	O
A	O
static	O
method	O
(	O
ClassName	O
:	O
:	O
methName	O
)	O
#	O
li	O
An	O
instance	O
method	O
of	O
a	O
particular	O
object	O
(	O
instanceRef	O
:	O
:	O
methName	O
)	O
#	O
li	O
A	O
super	O
method	O
of	O
a	O
particular	O
object	O
(	O
super	O
:	O
:	O
methName	O
)	O
#	O
li	O
An	O
instance	O
method	O
of	O
an	O
arbitrary	O
object	O
of	O
a	O
particular	O
type	O
(	O
ClassName	O
:	O
:	O
methName	O
)	O
#	O
li	O
A	O
class	O
constructor	O
reference	O
(	O
ClassName	O
:	O
:	O
new	O
)	O
#	O
li	O
An	O
array	O
constructor	O
reference	O
(	O
TypeName	O
[	O
]	O
:	O
:	O
new	O
)	O
For	O
further	O
reference	O
:	O
#	O
a	O
Question	O
-	O
15336477	O
,	O
answer	O
-	O
15336606	O
It	O
got	O
deprecated	O
in	O
version	O
4	O
.	O
3	O
-	O
alpha1	O
which	O
you	O
use	O
because	O
of	O
the	O
LATEST	O
version	O
specification	O
.	O
If	O
you	O
take	O
a	O
look	O
at	O
the	O
javadoc	O
of	O
the	O
class	O
,	O
it	O
tells	O
you	O
what	O
to	O
use	O
instead	O
:	O
HttpClientBuilder	B-api_mention
.	O
In	O
the	O
latest	O
stable	O
version	O
(	O
4	O
.	O
2	O
.	O
3	O
)	O
the	O
DefaultHttpClient	B-api_mention
is	O
not	O
deprecated	O
yet	O
.	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
24296741	O
Here	O
'	O
s	O
another	O
technique	O
I	O
ran	O
across	O
the	O
other	O
day	O
:	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
call	O
creates	O
a	O
List	B-api_mention
containing	O
n	O
copies	O
of	O
whatever	O
value	O
you	O
provide	O
.	O
In	O
this	O
case	O
it	O
'	O
s	O
the	O
boxed	O
Integer	O
value	O
1	O
.	O
Of	O
course	O
it	O
doesn	O
'	O
t	O
actually	O
create	O
a	O
list	O
with	O
n	O
elements	O
;	O
it	O
creates	O
a	O
"	O
virtualized	O
"	O
list	O
that	O
contains	O
only	O
the	O
value	O
and	O
the	O
length	O
,	O
and	O
any	O
call	O
to	O
get	O
within	O
range	O
just	O
returns	O
the	O
value	O
.	O
The	O
nCopies	B-api_mention
method	O
has	O
been	O
around	O
since	O
the	O
Collections	B-api_mention
Framework	O
was	O
introduced	O
way	O
back	O
in	O
JDK	O
1	O
.	O
2	O
.	O
Of	O
course	O
,	O
the	O
ability	O
to	O
create	O
a	O
stream	O
from	O
its	O
result	O
was	O
added	O
in	O
Java	O
SE	O
8	O
.	O
Big	O
deal	O
,	O
another	O
way	O
to	O
do	O
the	O
same	O
thing	O
in	O
about	O
the	O
same	O
number	O
of	O
lines	O
.	O
However	O
,	O
this	O
technique	O
is	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
generate	I-api_mention
and	O
IntStream	B-api_mention
.	I-api_mention
iterate	I-api_mention
approaches	O
,	O
and	O
surprisingly	O
,	O
it	O
'	O
s	O
also	O
faster	O
than	O
the	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
approach	O
.	O
For	O
iterate	O
and	O
generate	O
the	O
result	O
is	O
perhaps	O
not	O
too	O
surprising	O
.	O
The	O
streams	O
framework	O
(	O
really	O
,	O
the	O
Spliterators	O
for	O
these	O
streams	O
)	O
is	O
built	O
on	O
the	O
assumption	O
that	O
the	O
lambdas	O
will	O
potentially	O
generate	O
different	O
values	O
each	O
time	O
,	O
and	O
that	O
they	O
will	O
generate	O
an	O
unbounded	O
number	O
of	O
results	O
.	O
This	O
makes	O
parallel	O
splitting	O
particularly	O
difficult	O
.	O
The	O
iterate	O
method	O
is	O
also	O
problematic	O
for	O
this	O
case	O
because	O
each	O
call	O
requires	O
the	O
result	O
of	O
the	O
previous	O
one	O
.	O
So	O
the	O
streams	O
using	O
generate	O
and	O
iterate	O
don	O
'	O
t	O
do	O
very	O
well	O
for	O
generating	O
repeated	O
constants	O
.	O
The	O
relatively	O
poor	O
performance	O
of	O
range	O
is	O
surprising	O
.	O
This	O
too	O
is	O
virtualized	O
,	O
so	O
the	O
elements	O
don	O
'	O
t	O
actually	O
all	O
exist	O
in	O
memory	O
,	O
and	O
the	O
size	O
is	O
known	O
up	O
front	O
.	O
This	O
should	O
make	O
for	O
a	O
fast	O
and	O
easily	O
parallelizable	O
spliterator	O
.	O
But	O
it	O
surprisingly	O
didn	O
'	O
t	O
do	O
very	O
well	O
.	O
Perhaps	O
the	O
reason	O
is	O
that	O
range	O
has	O
to	O
compute	O
a	O
value	O
for	O
each	O
element	O
of	O
the	O
range	O
and	O
then	O
call	O
a	O
function	O
on	O
it	O
.	O
But	O
this	O
function	O
just	O
ignores	O
its	O
input	O
and	O
returns	O
a	O
constant	O
,	O
so	O
I	O
'	O
m	O
surprised	O
this	O
isn	O
'	O
t	O
inlined	O
and	O
killed	O
.	O
The	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
technique	O
has	O
to	O
do	O
boxing	O
/	O
unboxing	O
in	O
order	O
to	O
handle	O
the	O
values	O
,	O
since	O
there	O
are	O
no	O
primitive	O
specializations	O
of	O
List	B-api_mention
.	O
Since	O
the	O
value	O
is	O
the	O
same	O
every	O
time	O
,	O
it	O
'	O
s	O
basically	O
boxed	O
once	O
and	O
that	O
box	O
is	O
shared	O
by	O
all	O
n	O
copies	O
.	O
I	O
suspect	O
boxing	O
/	O
unboxing	O
is	O
highly	O
optimized	O
,	O
even	O
intrinsified	O
,	O
and	O
it	O
can	O
be	O
inlined	O
well	O
.	O
Here	O
'	O
s	O
the	O
code	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
JMH	O
results	O
:	O
(	O
2	O
.	O
8GHz	O
Core2Duo	O
)	O
#	O
pre	O
There	O
is	O
a	O
fair	O
amount	O
of	O
variance	O
in	O
the	O
ncopies	O
version	O
,	O
but	O
overall	O
it	O
seems	O
comfortably	O
20x	O
faster	O
than	O
the	O
range	O
version	O
.	O
(	O
I	O
'	O
d	O
be	O
quite	O
willing	O
to	O
believe	O
that	O
I	O
'	O
ve	O
done	O
something	O
wrong	O
,	O
though	O
.	O
)	O
I	O
'	O
m	O
surprised	O
at	O
how	O
well	O
the	O
nCopies	B-api_mention
technique	O
works	O
.	O
Internally	O
it	O
doesn	O
'	O
t	O
do	O
very	O
much	O
special	O
,	O
with	O
the	O
stream	O
of	O
the	O
virtualized	O
list	O
simply	O
being	O
implemented	O
using	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
!	O
I	O
had	O
expected	O
that	O
it	O
would	O
be	O
necessary	O
to	O
create	O
a	O
specialized	O
spliterator	O
to	O
get	O
this	O
to	O
go	O
fast	O
,	O
but	O
it	O
already	O
seems	O
to	O
be	O
pretty	O
good	O
.	O
Question	O
-	O
18777989	O
,	O
answer	O
-	O
37905386	O
Many	O
junior	O
developers	O
make	O
the	O
mistake	O
of	O
thinking	O
of	O
interfaces	O
,	O
abstract	O
and	O
concrete	O
classes	O
as	O
slight	O
variations	O
of	O
the	O
same	O
thing	O
,	O
and	O
choose	O
one	O
of	O
them	O
purely	O
on	O
technical	O
grounds	O
:	O
Do	O
I	O
need	O
multiple	O
inheritance	O
?	O
Do	O
I	O
need	O
some	O
place	O
to	O
put	O
common	O
methods	O
?	O
Do	O
I	O
need	O
to	O
bother	O
with	O
something	O
other	O
than	O
just	O
a	O
concrete	O
class	O
?	O
This	O
is	O
wrong	O
,	O
and	O
hidden	O
in	O
these	O
questions	O
is	O
the	O
main	O
problem	O
:	O
"	O
I	O
"	O
.	O
When	O
you	O
write	O
code	O
for	O
yourself	O
,	O
by	O
yourself	O
,	O
you	O
rarely	O
think	O
of	O
other	O
present	O
or	O
future	O
developers	O
working	O
on	O
or	O
with	O
your	O
code	O
.	O
Interfaces	O
and	O
abstract	O
classes	O
,	O
although	O
apparently	O
similar	O
from	O
a	O
technical	O
point	O
of	O
view	O
,	O
have	O
completely	O
different	O
meanings	O
and	O
purposes	O
.	O
Summary	O
#	O
li	O
An	O
interface	O
defines	O
a	O
contract	O
that	O
some	O
implementation	O
will	O
fulfill	O
for	O
you	O
.	O
#	O
li	O
An	O
abstract	O
class	O
provides	O
a	O
default	O
behavior	O
that	O
your	O
implementation	O
can	O
reuse	O
.	O
These	O
two	O
points	O
above	O
is	O
what	O
I	O
'	O
m	O
looking	O
for	O
when	O
interviewing	O
,	O
and	O
is	O
a	O
compact	O
enough	O
summary	O
.	O
Read	O
on	O
for	O
more	O
details	O
.	O
Alternative	O
summary	O
#	O
li	O
An	O
interface	O
is	O
for	O
defining	O
public	O
APIs	O
#	O
li	O
An	O
abstract	O
class	O
is	O
for	O
internal	O
use	O
,	O
and	O
for	O
defining	O
SPIs	O
By	O
example	O
To	O
put	O
it	O
differently	O
:	O
A	O
concrete	O
class	O
does	O
the	O
actual	O
work	O
,	O
in	O
a	O
very	O
specific	O
way	O
.	O
For	O
example	O
,	O
an	O
ArrayList	B-api_mention
uses	O
a	O
contiguous	O
area	O
of	O
memory	O
to	O
store	O
a	O
list	O
of	O
objects	O
in	O
a	O
compact	O
manner	O
which	O
offers	O
fast	O
random	O
access	O
,	O
iteration	O
,	O
and	O
in	O
-	O
place	O
changes	O
,	O
but	O
is	O
terrible	O
at	O
insertions	O
,	O
deletions	O
,	O
and	O
occasionally	O
even	O
additions	O
;	O
meanwhile	O
,	O
a	O
LinkedList	B-api_mention
uses	O
double	O
-	O
linked	O
nodes	O
to	O
store	O
a	O
list	O
of	O
objects	O
,	O
which	O
instead	O
offers	O
fast	O
iteration	O
,	O
in	O
-	O
place	O
changes	O
,	O
and	O
insertion	O
/	O
deletion	O
/	O
addition	O
,	O
but	O
is	O
terrible	O
at	O
random	O
access	O
.	O
These	O
two	O
types	O
of	O
lists	O
are	O
optimized	O
for	O
different	O
use	O
cases	O
,	O
and	O
it	O
matters	O
a	O
lot	O
how	O
you	O
'	O
re	O
going	O
to	O
use	O
them	O
.	O
When	O
you	O
'	O
re	O
trying	O
to	O
squeeze	O
performance	O
out	O
of	O
a	O
list	O
that	O
you	O
'	O
re	O
heavily	O
interacting	O
with	O
,	O
and	O
when	O
picking	O
the	O
type	O
of	O
list	O
is	O
up	O
to	O
you	O
,	O
you	O
should	O
carefully	O
pick	O
which	O
one	O
you	O
'	O
re	O
instantiating	O
.	O
On	O
the	O
other	O
hand	O
,	O
high	O
level	O
users	O
of	O
a	O
list	O
don	O
'	O
t	O
really	O
care	O
how	O
it	O
is	O
actually	O
implemented	O
,	O
and	O
they	O
should	O
be	O
insulated	O
from	O
these	O
details	O
.	O
Let	O
'	O
s	O
imagine	O
that	O
Java	O
didn	O
'	O
t	O
expose	O
the	O
List	B-api_mention
interface	O
,	O
but	O
only	O
had	O
a	O
concrete	O
List	B-api_mention
class	O
that	O
'	O
s	O
actually	O
what	O
LinkedList	B-api_mention
is	O
right	O
now	O
.	O
All	O
Java	O
developers	O
would	O
have	O
tailored	O
their	O
code	O
to	O
fit	O
the	O
implementation	O
details	O
:	O
avoid	O
random	O
access	O
,	O
add	O
a	O
cache	O
to	O
speed	O
up	O
access	O
,	O
or	O
just	O
reimplement	O
ArrayList	B-api_mention
on	O
their	O
own	O
,	O
although	O
it	O
would	O
be	O
incompatible	O
with	O
all	O
the	O
other	O
code	O
that	O
actually	O
works	O
with	O
List	B-api_mention
only	O
.	O
That	O
would	O
be	O
terrible	O
.	O
.	O
.	O
But	O
now	O
imagine	O
that	O
the	O
Java	O
masters	O
actually	O
realize	O
that	O
a	O
linked	O
list	O
is	O
terrible	O
for	O
most	O
actual	O
use	O
cases	O
,	O
and	O
decided	O
to	O
switch	O
over	O
to	O
an	O
array	O
list	O
for	O
their	O
only	O
List	B-api_mention
class	O
available	O
.	O
This	O
would	O
affect	O
the	O
performance	O
of	O
every	O
Java	O
program	O
in	O
the	O
world	O
,	O
and	O
people	O
wouldn	O
'	O
t	O
be	O
happy	O
about	O
it	O
.	O
And	O
the	O
main	O
culprit	O
is	O
that	O
implementation	O
details	O
were	O
available	O
,	O
and	O
the	O
developers	O
assumed	O
that	O
those	O
details	O
are	O
a	O
permanent	O
contract	O
that	O
they	O
can	O
rely	O
on	O
.	O
This	O
is	O
why	O
it	O
'	O
s	O
important	O
to	O
hide	O
implementation	O
details	O
,	O
and	O
only	O
define	O
an	O
abstract	O
contract	O
.	O
This	O
is	O
the	O
purpose	O
of	O
an	O
interface	O
:	O
define	O
what	O
kind	O
of	O
input	O
a	O
method	O
accepts	O
,	O
and	O
what	O
kind	O
of	O
output	O
is	O
expected	O
,	O
without	O
exposing	O
all	O
the	O
guts	O
that	O
would	O
tempt	O
programmers	O
to	O
tweak	O
their	O
code	O
to	O
fit	O
the	O
internal	O
details	O
that	O
might	O
change	O
with	O
any	O
future	O
update	O
.	O
An	O
abstract	O
class	O
is	O
in	O
the	O
middle	O
between	O
interfaces	O
and	O
concrete	O
classes	O
.	O
It	O
is	O
supposed	O
to	O
help	O
implementations	O
share	O
common	O
or	O
boring	O
code	O
.	O
For	O
example	O
,	O
AbstractCollection	B-api_mention
provides	O
basic	O
implementations	O
for	O
isEmpty	B-api_mention
based	O
on	O
size	O
is	O
0	O
,	O
contains	B-api_mention
as	O
iterate	O
and	O
compare	O
,	O
addAll	B-api_mention
as	O
repeated	O
add	B-api_mention
,	O
and	O
so	O
on	O
.	O
This	O
lets	O
implementations	O
focus	O
on	O
the	O
crucial	O
parts	O
that	O
differentiate	O
between	O
them	O
:	O
how	O
to	O
actually	O
store	O
and	O
retrieve	O
data	O
.	O
Another	O
perspective	O
:	O
APIs	O
versus	O
SPIs	O
Interfaces	O
are	O
low	O
-	O
cohesion	O
gateways	O
between	O
different	O
parts	O
of	O
code	O
.	O
They	O
allow	O
libraries	O
to	O
exist	O
and	O
evolve	O
without	O
breaking	O
every	O
library	O
user	O
when	O
something	O
changes	O
internally	O
.	O
It	O
'	O
s	O
called	O
Application	O
Programming	O
Interface	O
Abstract	O
classes	O
are	O
high	O
-	O
cohesion	O
helpers	O
to	O
be	O
used	O
when	O
implementing	O
an	O
interface	O
,	O
assuming	O
some	O
level	O
of	O
implementation	O
details	O
.	O
Alternatively	O
,	O
abstract	O
classes	O
are	O
used	O
for	O
defining	O
SPIs	O
,	O
Service	O
Provider	O
Interfaces	O
.	O
The	O
difference	O
between	O
an	O
API	O
and	O
an	O
SPI	O
is	O
subtle	O
,	O
but	O
important	O
:	O
for	O
an	O
API	O
,	O
the	O
focus	O
is	O
on	O
who	O
uses	O
it	O
,	O
and	O
for	O
an	O
SPI	O
the	O
focus	O
is	O
on	O
who	O
implements	O
it	O
.	O
Adding	O
methods	O
to	O
an	O
API	O
is	O
easy	O
,	O
all	O
existing	O
users	O
of	O
the	O
API	O
will	O
still	O
compile	O
.	O
Adding	O
methods	O
to	O
an	O
SPI	O
is	O
hard	O
,	O
since	O
every	O
service	O
provider	O
(	O
concrete	O
implementation	O
)	O
will	O
have	O
to	O
implement	O
the	O
new	O
methods	O
.	O
If	O
interfaces	O
are	O
used	O
to	O
define	O
an	O
SPI	O
,	O
a	O
provider	O
will	O
have	O
to	O
release	O
a	O
new	O
version	O
whenever	O
the	O
SPI	O
contract	O
changes	O
.	O
If	O
abstract	O
classes	O
are	O
used	O
instead	O
,	O
new	O
methods	O
could	O
either	O
be	O
defined	O
in	O
terms	O
of	O
existing	O
abstract	O
methods	O
,	O
or	O
as	O
empty	O
throw	O
not	O
implemented	O
exception	O
stubs	O
,	O
which	O
will	O
at	O
least	O
allow	O
an	O
older	O
version	O
of	O
a	O
service	O
implementation	O
to	O
still	O
compile	O
and	O
run	O
.	O
A	O
note	O
on	O
Java	O
8	O
and	O
default	O
methods	O
Although	O
Java	O
8	O
introduced	O
default	O
methods	O
for	O
interfaces	O
,	O
which	O
makes	O
the	O
line	O
between	O
interfaces	O
and	O
abstract	O
classes	O
even	O
blurrier	O
,	O
this	O
wasn	O
'	O
t	O
so	O
that	O
implementations	O
can	O
reuse	O
code	O
,	O
but	O
to	O
make	O
it	O
easier	O
to	O
change	O
interfaces	O
that	O
serve	O
both	O
as	O
an	O
API	O
and	O
as	O
an	O
SPI	O
(	O
or	O
are	O
wrongly	O
used	O
for	O
defining	O
SPIs	O
instead	O
of	O
abstract	O
classes	O
)	O
.	O
"	O
Book	O
knowledge	O
"	O
The	O
technical	O
details	O
provided	O
in	O
the	O
OP	O
'	O
s	O
answer	O
are	O
considered	O
"	O
book	O
knowledge	O
"	O
because	O
this	O
is	O
usually	O
the	O
approach	O
used	O
in	O
school	O
and	O
in	O
most	O
technology	O
books	O
about	O
a	O
language	O
:	O
what	O
a	O
thing	O
is	O
,	O
not	O
how	O
to	O
use	O
it	O
in	O
practice	O
,	O
especially	O
in	O
large	O
scale	O
applications	O
.	O
Here	O
'	O
s	O
an	O
analogy	O
:	O
supposed	O
the	O
question	O
was	O
:	O
#	O
blockquote	O
The	O
technical	O
answer	O
sounds	O
like	O
:	O
#	O
blockquote	O
That	O
is	O
all	O
true	O
,	O
but	O
completely	O
misses	O
the	O
points	O
that	O
they	O
are	O
two	O
completely	O
different	O
things	O
,	O
and	O
both	O
can	O
be	O
used	O
at	O
the	O
same	O
time	O
for	O
different	O
purposes	O
,	O
and	O
the	O
"	O
doing	O
it	O
"	O
aspect	O
is	O
not	O
the	O
most	O
important	O
thing	O
about	O
either	O
of	O
the	O
two	O
options	O
.	O
The	O
answer	O
lacks	O
perspective	O
,	O
it	O
shows	O
an	O
immature	O
way	O
of	O
thinking	O
,	O
while	O
correctly	O
presenting	O
true	O
"	O
facts	O
"	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
5585876	O
For	O
example	O
,	O
here	O
are	O
two	O
ways	O
:	O
#	O
pre	O
There	O
is	O
a	O
slight	O
difference	O
between	O
these	O
methods	O
:	O
#	O
li	O
valueOf	B-api_mention
returns	O
a	O
new	O
or	O
cached	O
instance	O
of	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Integer	I-api_mention
#	O
li	O
parseInt	B-api_mention
returns	O
primitive	O
int	O
.	O
The	O
same	O
is	O
for	O
all	O
cases	O
:	O
Short	B-api_mention
.	I-api_mention
valueOf	I-api_mention
/	O
parseShort	B-api_mention
,	O
Long	B-api_mention
.	I-api_mention
valueOf	I-api_mention
/	O
parseLong	B-api_mention
,	O
etc	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28833677	O
The	O
cleanest	O
“	O
try	O
services	O
”	O
approach	O
given	O
the	O
current	O
API	O
would	O
be	O
:	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
o	O
=	O
Stream	B-api_mention
.	I-api_mention
<	I-api_mention
Supplier	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
>	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
important	O
aspect	O
is	O
not	O
the	O
(	O
constant	O
)	O
chain	O
of	O
operations	O
you	O
have	O
to	O
write	O
once	O
but	O
how	O
easy	O
it	O
is	O
to	O
add	O
another	O
service	O
(	O
or	O
modify	O
the	O
list	O
of	O
services	O
is	O
general	O
)	O
.	O
Here	O
,	O
adding	O
or	O
removing	O
a	O
single	O
(	O
)	O
-	O
>	O
serviceX	O
(	O
args	O
)	O
is	O
enough	O
.	O
Due	O
to	O
the	O
lazy	O
evaluation	O
of	O
streams	O
,	O
no	O
service	O
will	O
be	O
invoked	O
if	O
a	O
preceding	O
service	O
returned	O
a	O
non	O
-	O
empty	O
Optional	B-api_mention
.	O
Question	O
-	O
31188231	O
It	O
has	O
generally	O
been	O
the	O
case	O
the	O
Java	O
source	O
code	O
has	O
been	O
forward	O
compatible	O
.	O
Until	O
Java	O
8	O
,	O
as	O
far	O
as	O
I	O
know	O
,	O
both	O
compiled	O
classes	O
and	O
source	O
have	O
been	O
forward	O
compatible	O
with	O
later	O
JDK	O
/	O
JVM	O
releases	O
.	O
[	O
Update	O
:	O
this	O
is	O
not	O
correct	O
,	O
see	O
comments	O
re	O
'	O
enum	O
'	O
,	O
etc	O
,	O
below	O
.	O
]	O
However	O
,	O
with	O
the	O
addition	O
of	O
default	O
methods	O
in	O
Java	O
8	O
this	O
appears	O
to	O
no	O
longer	O
be	O
the	O
case	O
.	O
For	O
example	O
,	O
a	O
library	O
I	O
have	O
been	O
using	O
has	O
an	O
implementation	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
which	O
includes	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
method	O
returns	O
a	O
copy	O
of	O
the	O
contents	O
of	O
the	O
list	O
sorted	O
.	O
This	O
library	O
,	O
deployed	O
as	O
a	O
jar	O
file	O
dependency	O
,	O
worked	O
fine	O
in	O
a	O
project	O
being	O
built	O
using	O
JDK	O
1	O
.	O
8	O
.	O
However	O
,	O
later	O
I	O
had	O
occasion	O
to	O
recompile	O
the	O
library	O
itself	O
using	O
JDK	O
1	O
.	O
8	O
and	O
I	O
found	O
the	O
library	O
no	O
longer	O
compiles	O
:	O
the	O
List	B-api_mention
-	O
implementing	O
class	O
with	O
its	O
own	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
now	O
conflicts	O
with	O
the	O
Java	O
8	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
.	O
The	O
Java	O
8	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
sorts	O
the	O
list	O
in	O
place	O
(	O
returns	O
void	O
)	O
;	O
my	O
library	O
'	O
s	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
-	O
since	O
it	O
returns	O
a	O
new	O
sorted	O
list	O
-	O
has	O
an	O
incompatible	O
signature	O
.	O
So	O
my	O
basic	O
question	O
is	O
:	O
#	O
li	O
Doesn	O
'	O
t	O
JDK	O
1	O
.	O
8	O
introduce	O
a	O
forward	O
incompatibility	O
for	O
Java	O
source	O
code	O
due	O
to	O
default	O
methods	O
?	O
Also	O
:	O
#	O
li	O
Is	O
this	O
the	O
first	O
such	O
forward	O
incompatible	O
change	O
?	O
#	O
li	O
Was	O
this	O
considered	O
or	O
discussed	O
when	O
default	O
methods	O
where	O
designed	O
and	O
implemented	O
?	O
Is	O
it	O
documented	O
anywhere	O
?	O
#	O
li	O
Was	O
the	O
(	O
admittedly	O
small	O
)	O
inconvenience	O
discounted	O
versus	O
the	O
benefits	O
?	O
The	O
following	O
is	O
an	O
example	O
of	O
some	O
code	O
that	O
compiles	O
and	O
runs	O
under	O
1	O
.	O
7	O
and	O
runs	O
under	O
1	O
.	O
8	O
-	O
but	O
does	O
not	O
compile	O
under	O
1	O
.	O
8	O
:	O
#	O
pre	O
The	O
following	O
shows	O
this	O
code	O
being	O
compiled	O
(	O
or	O
failing	O
to	O
)	O
and	O
being	O
run	O
.	O
#	O
pre	O
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993478	O
You	O
are	O
consuming	O
the	O
value	O
of	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
asking	O
for	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
per	O
default	O
,	O
returns	O
everything	O
to	O
the	O
next	O
whitespace	O
(	O
args	O
)	O
.	O
So	O
you	O
are	O
iterating	O
through	O
all	O
whitespace	O
seperated	O
strings	O
,	O
and	O
after	O
each	O
of	O
them	O
you	O
are	O
asking	O
about	O
the	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
i	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
.	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
(	O
still	O
a	O
whitespace	O
left	O
)	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
(	O
Line	O
Seperator	O
,	O
probably	O
)	O
.	O
haxNext	B-api_mention
?	O
False	O
,	O
no	O
whitespace	O
anymore	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29096777	O
The	O
only	O
solution	O
I	O
come	O
up	O
with	O
for	O
the	O
moment	O
is	O
by	O
implementing	O
your	O
own	O
custom	O
collector	O
.	O
Before	O
reading	O
the	O
solution	O
,	O
I	O
want	O
to	O
add	O
a	O
few	O
notes	O
about	O
this	O
.	O
I	O
took	O
this	O
question	O
more	O
as	O
a	O
programming	O
exercise	O
,	O
I	O
'	O
m	O
not	O
sure	O
if	O
it	O
can	O
be	O
done	O
with	O
a	O
parallel	O
stream	O
.	O
So	O
you	O
have	O
to	O
be	O
aware	O
that	O
it	O
'	O
ll	O
silently	O
break	O
if	O
the	O
pipeline	O
is	O
run	O
in	O
parallel	O
.	O
This	O
is	O
not	O
a	O
desirable	O
behavior	O
and	O
should	O
be	O
avoided	O
.	O
This	O
is	O
why	O
I	O
throw	O
an	O
exception	O
in	O
the	O
combiner	O
part	O
(	O
instead	O
of	O
(	O
l1	O
,	O
l2	O
)	O
-	O
>	O
{	O
l1	O
.	B-api_mention
addAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
return	O
l1	O
;	O
}	O
)	O
,	O
as	O
it	O
'	O
s	O
used	O
in	O
parallel	O
when	O
combining	O
the	O
two	O
lists	O
,	O
so	O
that	O
you	O
have	O
an	O
exception	O
instead	O
of	O
a	O
wrong	O
result	O
.	O
Also	O
this	O
is	O
not	O
very	O
efficient	O
due	O
to	O
list	O
copying	O
(	O
although	O
it	O
uses	O
a	O
native	O
method	O
to	O
copy	O
the	O
underlying	O
array	O
)	O
.	O
So	O
here	O
'	O
s	O
the	O
collector	O
implementation	O
:	O
#	O
pre	O
and	O
how	O
to	O
use	O
it	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ll	O
=	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Output	O
:	O
[	O
[	O
a	O
,	O
b	O
]	O
,	O
[	O
c	O
]	O
,	O
[	O
d	O
,	O
e	O
]	O
]	O
As	O
the	O
answer	O
of	O
Joop	O
Eggen	O
is	O
out	O
,	O
it	O
appears	O
that	O
it	O
can	O
be	O
done	O
in	O
parallel	O
(	O
give	O
him	O
credit	O
for	O
that	O
!	O
)	O
.	O
With	O
that	O
it	O
reduces	O
the	O
custom	O
collector	O
implementation	O
to	O
:	O
#	O
pre	O
which	O
let	O
the	O
paragraph	O
about	O
parallelism	O
a	O
bit	O
obsolete	O
,	O
however	O
I	O
let	O
it	O
as	O
it	O
can	O
be	O
a	O
good	O
reminder	O
.	O
Note	O
that	O
the	O
Stream	B-api_mention
API	O
is	O
not	O
always	O
a	O
substitute	O
.	O
There	O
are	O
tasks	O
that	O
are	O
easier	O
and	O
more	O
suitable	O
using	O
the	O
streams	O
and	O
there	O
are	O
tasks	O
that	O
are	O
not	O
.	O
In	O
your	O
case	O
,	O
you	O
could	O
also	O
create	O
a	O
utility	O
method	O
for	O
that	O
:	O
#	O
pre	O
and	O
call	O
it	O
like	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
splitBySeparator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
It	O
can	O
be	O
improved	O
for	O
checking	O
edge	O
-	O
cases	O
.	O
Question	O
-	O
24630963	O
The	O
Java	O
8	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
throws	O
a	O
NullPointerException	B-api_mention
if	O
one	O
of	O
the	O
values	O
is	O
'	O
null	O
'	O
.	O
I	O
don	O
'	O
t	O
understand	O
this	O
behaviour	O
,	O
maps	O
can	O
contain	O
null	O
pointers	O
as	O
value	O
without	O
any	O
problems	O
.	O
Is	O
there	O
a	O
good	O
reason	O
why	O
values	O
cannot	O
be	O
null	O
for	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
?	O
Also	O
,	O
is	O
there	O
a	O
nice	O
Java	O
8	O
way	O
of	O
fixing	O
this	O
,	O
or	O
should	O
I	O
revert	O
to	O
plain	O
old	O
for	O
loop	O
?	O
An	O
example	O
of	O
my	O
problem	O
:	O
#	O
pre	O
Stacktrace	O
:	O
#	O
pre	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17842210	O
After	O
digging	O
around	O
for	O
a	O
while	O
,	O
I	O
can	O
'	O
t	O
say	O
that	O
I	O
find	O
the	O
answer	O
,	O
but	O
I	O
think	O
it	O
'	O
s	O
quite	O
close	O
now	O
.	O
First	O
,	O
we	O
need	O
to	O
know	O
when	O
a	O
StackOverflowError	B-api_mention
will	O
be	O
thrown	O
.	O
In	O
fact	O
,	O
the	O
stack	O
for	O
a	O
java	O
thread	O
stores	O
frames	O
,	O
which	O
containing	O
all	O
the	O
data	O
needed	O
for	O
invoking	O
a	O
method	O
and	O
resume	O
.	O
According	O
to	O
Java	O
Language	O
Specifications	O
for	O
JAVA	O
6	O
,	O
when	O
invoking	O
a	O
method	O
,	O
#	O
blockquote	O
Second	O
,	O
we	O
should	O
make	O
it	O
clear	O
what	O
is	O
"	O
there	O
is	O
not	O
sufficient	O
memory	O
available	O
to	O
create	O
such	O
an	O
activation	O
frame	O
"	O
.	O
According	O
to	O
Java	O
Virtual	O
Machine	O
Specifications	O
for	O
JAVA	O
6	O
,	O
#	O
blockquote	O
So	O
,	O
when	O
a	O
frame	O
is	O
created	O
,	O
there	O
should	O
be	O
enough	O
heap	O
space	O
to	O
create	O
a	O
stack	O
frame	O
and	O
enough	O
stack	O
space	O
to	O
store	O
the	O
new	O
reference	O
which	O
point	O
to	O
the	O
new	O
stack	O
frame	O
if	O
the	O
frame	O
is	O
heap	O
allocated	O
.	O
Now	O
let	O
'	O
s	O
go	O
back	O
to	O
the	O
question	O
.	O
From	O
the	O
above	O
,	O
we	O
can	O
know	O
that	O
when	O
a	O
method	O
is	O
execute	O
,	O
it	O
may	O
just	O
costs	O
the	O
same	O
amount	O
of	O
stack	O
space	O
.	O
And	O
invoking	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
may	I-api_mention
)	I-api_mention
needs	O
5	O
level	O
of	O
method	O
invocation	O
,	O
so	O
5	O
frames	O
need	O
to	O
be	O
created	O
.	O
Then	O
when	O
StackOverflowError	B-api_mention
is	O
thrown	O
out	O
,	O
it	O
has	O
to	O
go	O
back	O
5	O
times	O
to	O
get	O
enough	O
stack	O
space	O
to	O
store	O
5	O
frames	O
'	O
references	O
.	O
Hence	O
4	O
is	O
print	O
out	O
.	O
Why	O
not	O
5	O
?	O
Because	O
you	O
use	O
cnt	O
+	O
+	O
.	O
Change	O
it	O
to	O
+	O
+	O
cnt	O
,	O
and	O
then	O
you	O
will	O
get	O
5	O
.	O
And	O
you	O
will	O
notice	O
that	O
when	O
the	O
size	O
of	O
stack	O
go	O
to	O
a	O
high	O
level	O
,	O
you	O
will	O
get	O
50	O
sometimes	O
.	O
That	O
is	O
because	O
the	O
amount	O
of	O
available	O
heap	O
space	O
need	O
to	O
be	O
taken	O
into	O
consideration	O
then	O
.	O
When	O
the	O
stack	O
'	O
s	O
size	O
is	O
too	O
large	O
,	O
maybe	O
heap	O
space	O
will	O
run	O
out	O
before	O
stack	O
.	O
And	O
(	O
maybe	O
)	O
the	O
actual	O
size	O
of	O
stack	O
frames	O
of	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
is	O
about	O
51	O
times	O
of	O
main	O
,	O
therefore	O
it	O
goes	O
back	O
51	O
times	O
and	O
print	O
50	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791826	O
Search	O
for	O
the	O
first	O
word	O
to	O
be	O
replaced	O
.	O
If	O
it	O
'	O
s	O
in	O
the	O
string	O
,	O
recurse	O
on	O
the	O
the	O
part	O
of	O
the	O
string	O
before	O
the	O
occurrence	O
,	O
and	O
on	O
the	O
part	O
of	O
the	O
string	O
after	O
the	O
occurrence	O
.	O
Otherwise	O
,	O
continue	O
with	O
the	O
next	O
word	O
to	O
be	O
replaced	O
.	O
A	O
naive	O
implementation	O
might	O
look	O
like	O
this	O
#	O
pre	O
Sample	O
usage	O
:	O
#	O
pre	O
Output	O
:	O
Once	O
upon	O
a	O
foo	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
baz	O
.	O
A	O
less	O
-	O
naive	O
version	O
:	O
#	O
pre	O
Unfortunately	O
,	O
Java	O
'	O
s	O
String	B-api_mention
has	O
no	O
indexOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
I	O
'	O
ve	O
omitted	O
the	O
implementation	O
of	O
indexOf	B-api_mention
here	O
as	O
I	O
'	O
m	O
not	O
certain	O
it	O
'	O
s	O
correct	O
,	O
but	O
it	O
can	O
be	O
found	O
on	O
ideone	O
,	O
along	O
with	O
some	O
rough	O
timings	O
of	O
various	O
solutions	O
posted	O
here	O
.	O
Question	O
-	O
10827872	O
What	O
'	O
s	O
the	O
difference	O
between	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
'	O
s	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
,	O
other	O
than	O
later	O
uses	O
regex	O
?	O
For	O
simple	O
substitutions	O
like	O
,	O
replace	O
.	O
with	O
/	O
,	O
is	O
there	O
any	O
difference	O
?	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777279	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
same	O
as	O
array1	O
=	O
=	O
array2	O
,	O
i	O
.	O
e	O
.	O
is	O
it	O
the	O
same	O
array	O
.	O
As	O
@	O
alf	O
points	O
out	O
it	O
'	O
s	O
not	O
what	O
most	O
people	O
expect	O
.	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
compares	O
the	O
contents	O
of	O
the	O
arrays	O
.	O
Similarly	O
array	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
not	O
be	O
very	O
useful	O
and	O
you	O
need	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
27625611	O
,	O
answer	O
-	O
27625722	O
Because	O
nextDouble	B-api_mention
works	O
like	O
this	O
:	O
(	O
source	O
)	O
#	O
pre	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
makes	O
x	O
random	O
bits	O
.	O
Now	O
why	O
does	O
this	O
matter	O
?	O
Because	O
about	O
half	O
the	O
numbers	O
generated	O
by	O
the	O
first	O
part	O
(	O
before	O
the	O
division	O
)	O
are	O
less	O
than	O
1L	O
<	O
<	O
52	O
,	O
and	O
therefore	O
their	O
significand	O
doesn	O
'	O
t	O
entirely	O
fill	O
the	O
53	O
bits	O
that	O
it	O
could	O
fill	O
,	O
meaning	O
the	O
least	O
significant	O
bit	O
of	O
the	O
significand	O
is	O
always	O
zero	O
for	O
those	O
.	O
Because	O
of	O
the	O
amount	O
of	O
attention	O
this	O
is	O
receiving	O
,	O
here	O
'	O
s	O
some	O
extra	O
explanation	O
of	O
what	O
a	O
double	O
in	O
Java	O
(	O
and	O
many	O
other	O
languages	O
)	O
really	O
looks	O
like	O
and	O
why	O
it	O
mattered	O
in	O
this	O
question	O
.	O
Basically	O
,	O
a	O
double	O
looks	O
like	O
this	O
:	O
(	O
source	O
)	O
#	O
img	O
A	O
very	O
important	O
detail	O
not	O
visible	O
in	O
this	O
picture	O
is	O
that	O
numbers	O
are	O
"	O
normalized	O
"	O
1	O
such	O
that	O
the	O
53	O
bit	O
fraction	O
starts	O
with	O
a	O
1	O
(	O
by	O
choosing	O
the	O
exponent	O
such	O
that	O
it	O
is	O
so	O
)	O
,	O
that	O
1	O
is	O
then	O
omitted	O
.	O
That	O
is	O
why	O
the	O
picture	O
shows	O
52	O
bits	O
for	O
the	O
fraction	O
(	O
significand	O
)	O
but	O
there	O
are	O
effectively	O
53	O
bits	O
in	O
it	O
.	O
The	O
normalization	O
means	O
that	O
if	O
in	O
the	O
code	O
for	O
nextDouble	B-api_mention
the	O
53rd	O
bit	O
is	O
set	O
,	O
that	O
bit	O
is	O
the	O
implicit	O
leading	O
1	O
and	O
it	O
goes	O
away	O
,	O
and	O
the	O
other	O
52	O
bits	O
are	O
copied	O
literally	O
to	O
the	O
significand	O
of	O
the	O
resulting	O
double	O
.	O
If	O
that	O
bit	O
is	O
not	O
set	O
however	O
,	O
the	O
remaining	O
bits	O
must	O
be	O
shifted	O
left	O
until	O
it	O
becomes	O
set	O
.	O
On	O
average	O
,	O
half	O
the	O
generated	O
numbers	O
fall	O
into	O
the	O
case	O
where	O
the	O
significand	O
was	O
not	O
shifted	O
left	O
at	O
all	O
(	O
and	O
about	O
half	O
those	O
have	O
a	O
0	O
as	O
their	O
least	O
significant	O
bit	O
)	O
,	O
and	O
the	O
other	O
half	O
is	O
shifted	O
by	O
at	O
least	O
1	O
(	O
or	O
is	O
just	O
completely	O
zero	O
)	O
so	O
their	O
least	O
significant	O
bit	O
is	O
always	O
0	O
.	O
1	O
:	O
not	O
always	O
,	O
clearly	O
it	O
cannot	O
be	O
done	O
for	O
zero	O
,	O
which	O
has	O
no	O
highest	O
1	O
.	O
These	O
numbers	O
are	O
called	O
denormal	O
or	O
subnormal	O
numbers	O
,	O
see	O
wikipedia	O
:	O
denormal	O
number	O
.	O
Question	O
-	O
22182669	O
,	O
answer	O
-	O
22222274	O
StackOverflowError	B-api_mention
occurs	O
due	O
to	O
an	O
application	O
recurses	O
too	O
deeply	O
(	O
This	O
is	O
not	O
an	O
answer	O
you	O
are	O
expecting	O
)	O
.	O
Now	O
other	O
things	O
to	O
happen	O
to	O
StackOverflowError	B-api_mention
is	O
keep	O
calling	O
methods	O
from	O
methods	O
till	O
you	O
get	O
StackOverflowError	B-api_mention
,	O
but	O
nobody	O
can	O
program	O
to	O
get	O
StackOverflowError	B-api_mention
and	O
even	O
if	O
those	O
programmer	O
are	O
doing	O
so	O
then	O
they	O
are	O
not	O
following	O
coding	O
standards	O
for	O
cyclomatic	O
complixity	O
that	O
every	O
programmer	O
has	O
to	O
understand	O
while	O
programming	O
.	O
Such	O
reason	O
for	O
'	B-api_mention
StackOverflowError	I-api_mention
'	I-api_mention
will	O
require	O
much	O
time	O
to	O
rectify	O
it	O
.	O
But	O
unknowingly	O
coding	O
one	O
line	O
or	O
two	O
line	O
which	O
causes	O
StackOverflowError	B-api_mention
is	O
understandable	O
and	O
JVM	O
throws	O
that	O
and	O
we	O
can	O
rectify	O
it	O
instantly	O
.	O
Here	O
is	O
my	O
answer	O
with	O
picture	O
for	O
some	O
other	O
question	O
.	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29922831	O
Three	O
questions	O
:	O
three	O
-	O
part	O
answer	O
:	O
Is	O
it	O
okay	O
from	O
a	O
design	O
point	O
of	O
view	O
?	O
Absolutely	O
.	O
Nothing	O
wrong	O
with	O
it	O
.	O
If	O
you	O
need	O
to	O
do	O
lots	O
of	O
iterating	O
over	O
your	O
enum	O
,	O
the	O
stream	O
API	O
is	O
the	O
clean	O
way	O
to	O
go	O
and	O
hiding	O
the	O
boiler	O
plate	O
behind	O
a	O
little	O
method	O
is	O
fine	O
.	O
Although	O
I	O
’	O
d	O
consider	O
OldCumudgeon	O
’	O
s	O
version	O
even	O
better	O
.	O
Is	O
it	O
okay	O
from	O
a	O
performance	O
point	O
of	O
view	O
?	O
It	O
most	O
likely	O
doesn	O
’	O
t	O
matter	O
.	O
Most	O
of	O
the	O
time	O
,	O
enums	O
are	O
not	O
that	O
big	O
.	O
Therefore	O
,	O
whatever	O
overhead	O
there	O
is	O
for	O
one	O
method	O
or	O
the	O
other	O
probably	O
doesn	O
’	O
t	O
matter	O
in	O
99	O
.	O
9	O
%	O
of	O
the	O
cases	O
.	O
Of	O
course	O
,	O
there	O
are	O
the	O
0	O
.	O
1	O
%	O
where	O
it	O
does	O
.	O
In	O
that	O
case	O
:	O
measure	O
properly	O
,	O
with	O
your	O
real	O
-	O
world	O
data	O
and	O
consumers	O
.	O
If	O
I	O
had	O
to	O
bet	O
,	O
I	O
’	O
d	O
expect	O
the	O
for	O
each	O
loop	O
to	O
be	O
faster	O
,	O
since	O
it	O
maps	O
more	O
directly	O
to	O
the	O
memory	O
model	O
,	O
but	O
don	O
’	O
t	O
guess	O
when	O
talking	O
performance	O
,	O
and	O
don	O
’	O
t	O
tune	O
before	O
there	O
is	O
actual	O
need	O
for	O
tuning	O
.	O
Write	O
your	O
code	O
in	O
a	O
way	O
that	O
is	O
correct	O
first	O
,	O
easy	O
to	O
read	O
second	O
and	O
only	O
then	O
worry	O
about	O
performance	O
of	O
code	O
style	O
.	O
Why	O
aren	O
’	O
t	O
Enums	O
properly	O
integrated	O
into	O
the	O
Stream	B-api_mention
API	O
?	O
If	O
you	O
compare	O
Java	O
’	O
s	O
Stream	B-api_mention
API	O
to	O
the	O
equivalent	O
in	O
many	O
other	O
languages	O
,	O
it	O
appears	O
seriously	O
limited	O
.	O
There	O
are	O
various	O
pieces	O
that	O
are	O
missing	O
(	O
reusable	O
Streams	O
and	O
Optionals	O
as	O
Streams	O
,	O
for	O
example	O
)	O
.	O
On	O
the	O
other	O
hand	O
,	O
implementing	O
the	O
Stream	B-api_mention
API	O
was	O
certainly	O
a	O
huge	O
change	O
for	O
the	O
API	O
.	O
It	O
was	O
postponed	O
multiple	O
times	O
for	O
a	O
reason	O
.	O
So	O
I	O
guess	O
Oracle	O
wanted	O
to	O
limit	O
the	O
changes	O
to	O
the	O
most	O
important	O
use	O
cases	O
.	O
Enums	O
aren	O
’	O
t	O
used	O
that	O
much	O
anyway	O
.	O
Sure	O
,	O
every	O
project	O
has	O
a	O
couple	O
of	O
them	O
,	O
but	O
they	O
’	O
re	O
nothing	O
compared	O
to	O
the	O
number	O
of	O
Lists	O
and	O
other	O
Collections	B-api_mention
.	O
Even	O
when	O
you	O
have	O
an	O
Enum	O
,	O
in	O
many	O
cases	O
you	O
won	O
’	O
t	O
ever	O
iterate	O
over	O
it	O
.	O
Lists	O
and	O
Sets	O
,	O
on	O
the	O
other	O
hand	O
,	O
are	O
probably	O
iterated	O
over	O
almost	O
every	O
time	O
.	O
I	O
assume	O
that	O
these	O
were	O
the	O
reasons	O
why	O
the	O
Enums	O
didn	O
’	O
t	O
get	O
their	O
own	O
adapter	O
to	O
the	O
Stream	B-api_mention
world	O
.	O
We	O
’	O
ll	O
see	O
whether	O
more	O
of	O
this	O
gets	O
added	O
in	O
future	O
versions	O
.	O
And	O
until	O
then	O
you	O
always	O
can	O
use	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
.	O
Question	O
-	O
7569335	O
,	O
answer	O
-	O
39329245	O
As	O
others	O
have	O
pointed	O
out	O
the	O
preferred	O
way	O
is	O
to	O
use	O
:	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reverse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
if	O
you	O
want	O
to	O
implement	O
this	O
by	O
youself	O
,	O
i	O
'	O
am	O
afraid	O
that	O
the	O
rest	O
of	O
responses	O
have	O
flaws	O
.	O
The	O
reason	O
is	O
that	O
String	B-api_mention
represent	O
a	O
list	O
of	O
Unicode	O
points	O
,	O
encoded	O
in	O
a	O
char	O
[	O
]	O
array	O
according	O
to	O
the	O
variable	O
-	O
length	O
encoding	O
:	O
UTF	O
-	O
16	O
.	O
This	O
means	O
some	O
code	O
points	O
use	O
a	O
single	O
element	O
of	O
the	O
array	O
(	O
one	O
code	O
unit	O
)	O
but	O
others	O
use	O
two	O
of	O
them	O
,	O
so	O
there	O
might	O
be	O
pairs	O
of	O
characters	O
that	O
must	O
be	O
treated	O
as	O
a	O
single	O
unit	O
(	O
consecutive	O
"	O
high	O
"	O
and	O
"	O
low	O
"	O
surrogates	O
)	O
#	O
pre	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276493	O
You	O
can	O
close	O
the	O
outer	O
most	O
stream	O
,	O
in	O
fact	O
you	O
don	O
'	O
t	O
need	O
to	O
retain	O
all	O
the	O
streams	O
wrapped	O
and	O
you	O
can	O
use	O
Java	O
7	O
try	O
-	O
with	O
-	O
resources	O
.	O
#	O
pre	O
If	O
you	O
subscribe	O
to	O
YAGNI	O
,	O
or	O
you	O
-	O
aint	O
-	O
gonna	O
-	O
need	O
-	O
it	O
,	O
you	O
should	O
be	O
only	O
adding	O
code	O
you	O
actually	O
need	O
.	O
You	O
shouldn	O
'	O
t	O
be	O
adding	O
code	O
you	O
imagine	O
you	O
might	O
need	O
but	O
in	O
reality	O
doesn	O
'	O
t	O
do	O
anything	O
useful	O
.	O
Take	O
this	O
example	O
and	O
imagine	O
what	O
could	O
possibly	O
go	O
wrong	O
if	O
you	O
didn	O
'	O
t	O
do	O
this	O
and	O
what	O
the	O
impact	O
would	O
be	O
?	O
#	O
pre	O
Lets	O
start	O
with	O
FileOutputStream	B-api_mention
which	O
calls	O
open	O
to	O
do	O
all	O
the	O
real	O
work	O
.	O
/	O
*	O
*	O
*	O
Opens	O
a	O
file	O
,	O
with	O
the	O
specified	O
name	O
,	O
for	O
overwriting	O
or	O
appending	O
.	O
*	O
@	O
param	O
name	O
name	O
of	O
file	O
to	O
be	O
opened	O
*	O
@	O
param	O
append	O
whether	O
the	O
file	O
is	O
to	O
be	O
opened	O
in	O
append	O
mode	O
*	O
/	O
private	O
native	O
void	O
open	O
(	O
args	O
)	O
throws	O
FileNotFoundException	B-api_mention
;	O
If	O
the	O
file	O
is	O
not	O
found	O
,	O
there	O
is	O
no	O
underlying	O
resource	O
to	O
close	O
,	O
so	O
closing	O
it	O
won	O
'	O
t	O
make	O
any	O
difference	O
.	O
If	O
The	O
file	O
exists	O
,	O
it	O
should	O
be	O
throwing	O
a	O
FileNotFoundException	B-api_mention
.	O
So	O
there	O
is	O
nothing	O
to	O
be	O
gained	O
by	O
trying	O
to	O
close	O
the	O
resource	O
from	O
this	O
line	O
alone	O
.	O
The	O
reason	O
you	O
need	O
to	O
close	O
the	O
file	O
is	O
when	O
the	O
file	O
is	O
opened	O
successfully	O
,	O
but	O
you	O
later	O
get	O
an	O
error	O
.	O
Lets	O
look	O
at	O
the	O
next	O
stream	O
GZIPOutputStream	B-api_mention
There	O
is	O
code	O
which	O
can	O
throw	O
an	O
exception	O
#	O
pre	O
This	O
writes	O
the	O
header	O
of	O
the	O
file	O
.	O
Now	O
it	O
would	O
be	O
very	O
unusual	O
for	O
you	O
to	O
be	O
able	O
to	O
open	O
a	O
file	O
for	O
writing	O
but	O
not	O
be	O
able	O
to	O
write	O
even	O
8	O
bytes	O
to	O
it	O
,	O
but	O
lets	O
imagine	O
this	O
could	O
happen	O
and	O
we	O
don	O
'	O
t	O
close	O
the	O
file	O
afterwards	O
.	O
What	O
does	O
happen	O
to	O
a	O
file	O
if	O
it	O
is	O
not	O
closed	O
?	O
You	O
don	O
'	O
t	O
get	O
any	O
unflushed	O
writes	O
,	O
they	O
are	O
discarded	O
and	O
in	O
this	O
case	O
,	O
there	O
is	O
no	O
successfully	O
written	O
bytes	O
to	O
the	O
stream	O
which	O
isn	O
'	O
t	O
buffered	O
at	O
this	O
point	O
anyway	O
.	O
But	O
a	O
file	O
which	O
is	O
not	O
closed	O
doesn	O
'	O
t	O
live	O
forever	O
,	O
instead	O
FileOutputStream	B-api_mention
has	O
#	O
pre	O
If	O
you	O
don	O
'	O
t	O
close	O
a	O
file	O
at	O
all	O
,	O
it	O
gets	O
closed	O
anyway	O
,	O
just	O
not	O
immediately	O
(	O
and	O
like	O
I	O
said	O
,	O
data	O
which	O
is	O
left	O
in	O
a	O
buffer	O
will	O
be	O
lost	O
this	O
way	O
,	O
but	O
there	O
is	O
none	O
at	O
this	O
point	O
)	O
What	O
is	O
the	O
consequence	O
of	O
not	O
closing	O
the	O
file	O
immediately	O
?	O
Under	O
normal	O
conditions	O
,	O
you	O
potentially	O
lose	O
some	O
data	O
,	O
and	O
you	O
potentially	O
run	O
out	O
of	O
file	O
descriptors	O
.	O
But	O
if	O
you	O
have	O
a	O
system	O
where	O
you	O
can	O
create	O
files	O
but	O
you	O
can	O
'	O
t	O
write	O
anything	O
to	O
them	O
,	O
you	O
have	O
a	O
bigger	O
problem	O
.	O
i	O
.	O
e	O
.	O
it	O
hard	O
to	O
imagine	O
why	O
you	O
are	O
repeatedly	O
trying	O
to	O
create	O
this	O
file	O
despite	O
the	O
fact	O
you	O
are	O
failing	O
.	O
Both	O
OutputStreamWriter	B-api_mention
and	O
BufferedWriter	B-api_mention
don	O
'	O
t	O
throw	O
IOException	B-api_mention
in	O
their	O
constructors	O
,	O
so	O
it	O
not	O
clear	O
what	O
problem	O
they	O
would	O
cause	O
.	O
In	O
The	O
case	O
of	O
BufferedWriter	B-api_mention
,	O
you	O
could	O
get	O
an	O
OutOfMemoryError	B-api_mention
.	O
In	O
this	O
case	O
it	O
will	O
immediately	O
trigger	O
a	O
GC	O
,	O
which	O
as	O
we	O
have	O
seen	O
will	O
close	O
the	O
file	O
anyway	O
.	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894356	O
Looks	O
like	O
niether	O
is	O
faster	O
or	O
slower	O
#	O
pre	O
For	O
long	O
strings	O
I	O
'	O
ll	O
chose	O
the	O
first	O
one	O
.	O
Why	O
copy	O
around	O
long	O
strings	O
?	O
Documentations	O
says	O
:	O
#	O
blockquote	O
/	O
/	O
Edit	O
1	O
I	O
'	O
ve	O
changed	O
the	O
test	O
to	O
trick	O
JIT	O
optimisation	O
.	O
/	O
/	O
Edit	O
2	O
Repeat	O
test	O
10	O
times	O
to	O
let	O
JVM	O
warm	O
up	O
.	O
/	O
/	O
Edit	O
3	O
Conclusions	O
:	O
First	O
of	O
all	O
str	O
.	B-api_mention
toCharArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
copies	O
entire	O
string	O
in	O
memory	O
.	O
It	O
can	O
be	O
memory	O
consuming	O
for	O
long	O
strings	O
.	O
Method	O
String	B-api_mention
.	I-api_mention
charAt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
looks	O
up	O
char	O
in	O
char	O
array	O
inside	O
String	B-api_mention
class	O
checking	O
index	O
before	O
.	O
It	O
looks	O
like	O
for	O
short	O
enough	O
Strings	B-api_mention
first	O
method	O
(	O
i	O
.	O
e	O
.	O
chatAt	B-api_mention
method	O
)	O
is	O
a	O
bit	O
slower	O
due	O
to	O
this	O
index	O
check	O
.	O
But	O
if	O
the	O
String	B-api_mention
is	O
long	O
enough	O
,	O
copying	O
whole	O
char	O
array	O
gets	O
slower	O
,	O
and	O
the	O
first	O
method	O
is	O
faster	O
.	O
The	O
longer	O
the	O
string	O
is	O
,	O
the	O
slower	O
toCharArray	B-api_mention
performs	O
.	O
Try	O
to	O
change	O
limit	O
in	O
for	O
(	O
args	O
)	O
loop	O
to	O
see	O
it	O
.	O
If	O
we	O
let	O
JVM	O
warm	O
up	O
code	O
runs	O
faster	O
,	O
but	O
proportions	O
are	O
the	O
same	O
.	O
After	O
all	O
it	O
'	O
s	O
just	O
micro	O
-	O
optimisation	O
.	O
Question	O
-	O
28671903	O
,	O
answer	O
-	O
28672583	O
The	O
behaviour	O
is	O
(	O
somewhat	O
)	O
documented	O
in	O
the	O
javadoc	O
:	O
#	O
blockquote	O
What	O
this	O
means	O
in	O
practice	O
,	O
when	O
you	O
call	O
source	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
:	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
a	O
smaller	O
size	O
than	O
source	O
,	O
the	O
remove	O
method	O
of	O
HashSet	B-api_mention
is	O
called	O
,	O
which	O
is	O
fast	O
.	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
equal	O
or	O
larger	O
size	O
than	O
the	O
source	O
,	O
then	O
removals	O
.	B-api_mention
contains	I-api_mention
is	O
called	O
,	O
which	O
is	O
slow	O
for	O
an	O
ArrayList	B-api_mention
.	O
Quick	O
fix	O
:	O
Collection	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
removals	O
=	O
new	O
HashSet	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
that	O
there	O
is	O
an	O
open	O
bug	O
that	O
is	O
very	O
similar	O
to	O
what	O
you	O
describe	O
.	O
The	O
bottom	O
line	O
seems	O
to	O
be	O
that	O
it	O
is	O
probably	O
a	O
poor	O
choice	O
but	O
can	O
'	O
t	O
be	O
changed	O
because	O
it	O
is	O
documented	O
in	O
the	O
javadoc	O
.	O
For	O
reference	O
,	O
this	O
is	O
the	O
code	O
of	O
removeAll	B-api_mention
(	O
in	O
Java	O
8	O
-	O
haven	O
'	O
t	O
checked	O
other	O
versions	O
)	O
:	O
#	O
pre	O
Question	O
-	O
6802483	O
,	O
answer	O
-	O
6802523	O
There	O
is	O
no	O
direct	O
way	O
to	O
do	O
this	O
-	O
Java	O
has	O
no	O
Map	B-api_mention
literals	O
(	O
yet	O
-	O
I	O
think	O
they	O
were	O
proposed	O
for	O
Java	O
8	O
)	O
.	O
Some	O
people	O
like	O
this	O
:	O
#	O
pre	O
This	O
creates	O
an	O
anonymous	O
subclass	O
of	O
HashMap	B-api_mention
,	O
whose	O
instance	O
initializer	O
puts	O
these	O
values	O
.	O
(	O
By	O
the	O
way	O
,	O
a	O
map	O
can	O
'	O
t	O
contain	O
twice	O
the	O
same	O
value	O
,	O
your	O
second	O
put	O
will	O
overwrite	O
the	O
first	O
one	O
.	O
I	O
'	O
ll	O
use	O
different	O
values	O
for	O
the	O
next	O
examples	O
.	O
)	O
The	O
normal	O
way	O
would	O
be	O
this	O
(	O
for	O
a	O
local	O
variable	O
)	O
:	O
#	O
pre	O
If	O
your	O
test	O
map	O
is	O
an	O
instance	O
variable	O
,	O
put	O
the	O
initialization	O
in	O
a	O
constructor	O
or	O
instance	O
initializer	O
:	O
#	O
pre	O
If	O
your	O
test	O
map	O
is	O
a	O
class	O
variable	O
,	O
put	O
the	O
initialization	O
in	O
a	O
static	O
initializer	O
:	O
#	O
pre	O
If	O
you	O
want	O
your	O
map	O
to	O
never	O
change	O
,	O
you	O
should	O
after	O
the	O
initialization	O
wrap	O
your	O
map	O
by	O
Collections	B-api_mention
.	I-api_mention
unmodifiableMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
can	O
do	O
this	O
in	O
a	O
static	O
initializer	O
too	O
:	O
#	O
pre	O
(	O
I	O
'	O
m	O
not	O
sure	O
if	O
you	O
can	O
now	O
make	O
test	O
final	O
.	O
.	O
.	O
try	O
it	O
out	O
and	O
report	O
here	O
.	O
)	O
Question	O
-	O
6992608	O
,	O
answer	O
-	O
6992643	O
There	O
'	O
s	O
no	O
built	O
in	O
type	O
for	O
ConcurrentHashSet	B-api_mention
because	O
you	O
can	O
always	O
derive	O
a	O
set	O
from	O
a	O
map	O
.	O
Since	O
there	O
are	O
many	O
types	O
of	O
maps	O
,	O
you	O
use	O
a	O
method	O
to	O
produce	O
a	O
set	O
from	O
a	O
given	O
map	O
(	O
or	O
map	O
class	O
)	O
.	O
Prior	O
to	O
Java	O
8	O
,	O
you	O
produce	O
a	O
concurrent	O
hash	O
set	O
backed	O
by	O
a	O
concurrent	O
hash	O
map	O
,	O
by	O
using	O
Collections	B-api_mention
.	I-api_mention
newSetFromMap	I-api_mention
(	I-api_mention
map	I-api_mention
)	I-api_mention
In	O
Java	O
8	O
(	O
pointed	O
out	O
by	O
@	O
Matt	O
)	O
,	O
you	O
can	O
get	O
a	O
concurrent	O
hash	O
set	O
view	O
via	O
ConcurrentHashMap	B-api_mention
.	I-api_mention
newKeySet	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
This	O
is	O
a	O
bit	O
simpler	O
than	O
the	O
old	O
newSetFromMap	B-api_mention
which	O
required	O
you	O
to	O
pass	O
in	O
an	O
empty	O
map	O
object	O
.	O
But	O
it	O
is	O
specific	O
to	O
ConcurrentHashMap	B-api_mention
.	O
Anyway	O
,	O
the	O
Java	O
designers	O
could	O
have	O
created	O
a	O
new	O
set	O
interface	O
every	O
time	O
a	O
new	O
map	O
interface	O
was	O
created	O
,	O
but	O
that	O
pattern	O
would	O
be	O
impossible	O
to	O
enforce	O
when	O
third	O
parties	O
create	O
their	O
own	O
maps	O
.	O
It	O
is	O
better	O
to	O
have	O
the	O
static	O
methods	O
that	O
derive	O
new	O
sets	O
;	O
that	O
approach	O
always	O
works	O
,	O
even	O
when	O
you	O
create	O
your	O
own	O
map	O
implementations	O
.	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
15046253	O
It	O
does	O
that	O
because	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
doesn	O
'	O
t	O
capture	O
the	O
newline	O
.	O
you	O
could	O
do	O
like	O
the	O
others	O
proposed	O
by	O
adding	O
an	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
underneath	O
.	O
Alternatively	O
you	O
can	O
do	O
it	O
C	O
#	O
style	O
and	O
parse	O
a	O
nextLine	B-api_mention
to	O
an	O
integer	O
like	O
so	O
:	O
int	O
number	O
=	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Doing	O
this	O
works	O
just	O
as	O
well	O
,	O
and	O
it	O
saves	O
you	O
a	O
line	O
of	O
code	O
.	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
38628203	O
In	O
intellij	O
you	O
can	O
auto	O
generate	O
toString	B-api_mention
method	O
by	O
pressing	O
alt	O
+	O
inset	O
and	O
then	O
selecting	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
here	O
is	O
an	O
out	O
put	O
for	O
a	O
test	O
class	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
generates	O
a	O
String	B-api_mention
by	O
concatenating	O
,	O
several	O
attributes	O
of	O
the	O
class	O
,	O
for	O
primitives	O
it	O
will	O
print	O
their	O
values	O
and	O
for	O
reference	O
types	O
it	O
will	O
use	O
their	O
class	O
type	O
(	O
in	O
this	O
case	O
to	O
string	O
method	O
of	O
Test2	O
)	O
.	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
32362691	O
For	O
completeness	O
,	O
using	O
the	O
Guava	O
library	O
,	O
you	O
'	O
d	O
do	O
:	O
Splitter	B-api_mention
.	I-api_mention
on	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Another	O
example	O
:	O
#	O
pre	O
Splitter	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
Iterable	O
,	O
so	O
if	O
you	O
need	O
a	O
List	B-api_mention
,	O
wrap	O
it	O
in	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
above	O
.	O
Otherwise	O
just	O
go	O
with	O
the	O
Iterable	B-api_mention
,	O
for	O
example	O
:	O
#	O
pre	O
Note	O
how	O
trimResults	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
handles	O
all	O
your	O
trimming	O
needs	O
without	O
having	O
to	O
tweak	O
regexes	O
for	O
corner	O
cases	O
,	O
as	O
with	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
your	O
project	O
uses	O
Guava	O
already	O
,	O
this	O
should	O
be	O
your	O
preferred	O
solution	O
.	O
See	O
Splitter	B-api_mention
documentation	O
in	O
Guava	O
User	O
Guide	O
or	O
the	O
javadocs	O
for	O
more	O
configuration	O
options	O
.	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31190722	O
We	O
can	O
draw	O
a	O
parallel	O
with	O
abstract	O
class	O
.	O
An	O
abstract	O
class	O
is	O
intended	O
to	O
be	O
subclassed	O
so	O
that	O
the	O
abstract	O
methods	O
can	O
be	O
implemented	O
.	O
The	O
abstract	O
class	O
itself	O
contains	O
concrete	O
methods	O
that	O
invoke	O
the	O
abstract	O
methods	O
.	O
The	O
abstract	O
class	O
is	O
free	O
to	O
evolve	O
by	O
adding	O
more	O
concrete	O
methods	O
;	O
and	O
this	O
practice	O
may	O
break	O
subclasses	O
.	O
Therefore	O
the	O
exact	O
problem	O
you	O
described	O
existed	O
even	O
before	O
Java8	O
.	O
The	O
problem	O
is	O
much	O
more	O
manifested	O
on	O
Collection	B-api_mention
APIs	O
because	O
there	O
are	O
a	O
lot	O
of	O
subclasses	O
out	O
in	O
the	O
wild	O
.	O
While	O
the	O
leading	O
motivation	O
of	O
default	O
method	O
was	O
to	O
add	O
some	O
useful	O
methods	O
to	O
existing	O
Collection	B-api_mention
APIs	O
without	O
breaking	O
subclasses	O
,	O
they	O
had	O
to	O
exercise	O
great	O
self	O
-	O
control	O
of	O
doing	O
it	O
too	O
much	O
,	O
for	O
fear	O
of	O
breaking	O
subclasses	O
.	O
A	O
default	O
method	O
is	O
added	O
only	O
if	O
it	O
'	O
s	O
absolutely	O
necessary	O
.	O
The	O
real	O
question	O
here	O
is	O
,	O
why	O
List	B-api_mention
.	I-api_mention
sort	I-api_mention
is	O
considered	O
absolutely	O
necessary	O
.	O
I	O
think	O
that	O
is	O
debatable	O
.	O
Regardless	O
of	O
why	O
default	O
method	O
was	O
introduced	O
in	O
the	O
1st	O
place	O
,	O
it	O
is	O
now	O
a	O
great	O
tool	O
for	O
API	O
designers	O
,	O
and	O
we	O
ought	O
to	O
treat	O
it	O
the	O
same	O
as	O
concrete	O
methods	O
in	O
abstract	O
classes	O
-	O
they	O
need	O
to	O
be	O
designed	O
carefully	O
up	O
front	O
;	O
and	O
new	O
ones	O
must	O
be	O
introduced	O
with	O
great	O
caution	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175224	O
Since	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
is	O
not	O
a	O
final	O
method	O
of	O
Object	B-api_mention
,	O
yes	O
,	O
it	O
is	O
very	O
well	O
be	O
possible	O
in	O
a	O
different	O
situation	O
.	O
#	O
pre	O
This	O
question	O
,	O
however	O
,	O
specifically	O
says	O
that	O
these	O
are	O
primitive	O
wrappers	O
(	O
e	O
.	O
g	O
.	O
Integer	B-api_mention
,	O
Boolean	B-api_mention
,	O
etc	O
.	O
)	O
and	O
since	O
these	O
classes	O
are	O
final	O
,	O
you	O
cannot	O
extend	O
them	O
,	O
thus	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
.	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032180	O
The	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
removes	O
all	O
the	O
elements	O
of	O
a	O
single	O
ArrayList	B-api_mention
.	O
It	O
'	O
s	O
a	O
fast	O
operation	O
,	O
as	O
it	O
just	O
sets	O
some	O
array	O
elements	O
to	O
null	O
.	O
The	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
is	O
inherited	O
from	O
AbstractCollection	B-api_mention
,	O
removes	O
all	O
the	O
elements	O
that	O
are	O
in	O
the	O
argument	O
collection	O
from	O
the	O
collection	O
you	O
call	O
the	O
method	O
on	O
.	O
It	O
'	O
s	O
a	O
relatively	O
slow	O
operation	O
,	O
as	O
it	O
has	O
to	O
search	O
through	O
one	O
of	O
the	O
collections	O
involved	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32745612	O
For	O
me	O
,	O
the	O
reason	O
is	O
a	O
likely	O
performance	O
inprovement	O
,	O
at	O
a	O
negligible	O
cost	O
in	O
terms	O
of	O
code	O
clarity	O
.	O
Note	O
that	O
the	O
implementation	O
of	O
the	O
fill	O
method	O
is	O
trivial	O
,	O
a	O
simple	O
for	O
-	O
loop	O
setting	O
each	O
array	O
element	O
to	O
null	O
.	O
So	O
,	O
replacing	O
a	O
call	O
to	O
it	O
with	O
the	O
actual	O
implementation	O
does	O
not	O
cause	O
any	O
significant	O
degradation	O
in	O
the	O
clarity	O
/	O
conciseness	O
of	O
the	O
caller	O
method	O
.	O
The	O
potential	O
performance	O
benefits	O
are	O
not	O
so	O
insignificant	O
,	O
if	O
you	O
consider	O
everything	O
that	O
is	O
involved	O
:	O
#	O
li	O
There	O
will	O
be	O
no	O
need	O
for	O
the	O
JVM	O
to	O
resolve	O
the	O
Arrays	B-api_mention
class	O
,	O
plus	O
loading	O
and	O
initializing	O
it	O
if	O
needed	O
.	O
This	O
is	O
a	O
non	O
-	O
trivial	O
process	O
where	O
the	O
JVM	O
performs	O
several	O
steps	O
.	O
Firstly	O
,	O
it	O
checks	O
the	O
class	O
loader	O
to	O
see	O
if	O
the	O
class	O
is	O
already	O
loaded	O
,	O
and	O
this	O
happens	O
every	O
time	O
a	O
method	O
is	O
called	O
;	O
there	O
are	O
optimizations	O
involved	O
here	O
,	O
of	O
course	O
,	O
but	O
it	O
still	O
takes	O
some	O
effort	O
.	O
If	O
the	O
class	O
is	O
not	O
loaded	O
,	O
the	O
JVM	O
will	O
need	O
to	O
go	O
through	O
the	O
expensive	O
process	O
of	O
loading	O
it	O
,	O
verifying	O
the	O
bytecode	O
,	O
resolving	O
other	O
necessary	O
dependencies	O
,	O
and	O
finally	O
performing	O
static	O
initialization	O
of	O
the	O
class	O
(	O
which	O
can	O
be	O
arbitrarily	O
expensive	O
)	O
.	O
Given	O
that	O
HashMap	B-api_mention
is	O
such	O
a	O
core	O
class	O
,	O
and	O
that	O
Arrays	B-api_mention
is	O
such	O
a	O
huge	O
class	O
(	O
3600	O
+	O
lines	O
)	O
,	O
avoiding	O
these	O
costs	O
may	O
add	O
up	O
to	O
noticeable	O
savings	O
.	O
#	O
li	O
Since	O
there	O
is	O
no	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
call	O
,	O
the	O
JVM	O
won	O
'	O
t	O
have	O
to	O
decide	O
whether	O
/	O
when	O
to	O
inline	O
the	O
method	O
into	O
the	O
caller	O
'	O
s	O
body	O
.	O
Since	O
HashMap	B-api_mention
#	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
tends	O
to	O
get	O
called	O
a	O
lot	O
,	O
the	O
JVM	O
will	O
eventually	O
perform	O
the	O
inlining	O
,	O
which	O
requires	O
JIT	O
recompilation	O
of	O
the	O
clear	O
method	O
.	O
With	O
no	O
method	O
calls	O
,	O
clear	O
will	O
always	O
run	O
at	O
top	O
-	O
speed	O
(	O
once	O
initially	O
JITed	O
)	O
.	O
Another	O
benefit	O
of	O
no	O
longer	O
calling	O
methods	O
in	O
Arrays	B-api_mention
is	O
that	O
it	O
simplifies	O
the	O
dependency	O
graph	O
inside	O
the	O
java	O
.	O
util	O
package	O
,	O
since	O
one	O
dependency	O
is	O
removed	O
.	O
Question	O
-	O
11359187	O
For	O
the	O
first	O
time	O
in	O
my	O
life	O
I	O
find	O
myself	O
in	O
a	O
position	O
where	O
I	O
'	O
m	O
writing	O
a	O
Java	O
API	O
that	O
will	O
be	O
open	O
sourced	O
.	O
Hopefully	O
to	O
be	O
included	O
in	O
many	O
other	O
projects	O
.	O
For	O
logging	O
I	O
(	O
and	O
indeed	O
the	O
people	O
I	O
work	O
with	O
)	O
have	O
always	O
used	O
JUL	B-api_mention
(	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
logging	I-api_mention
)	O
and	O
never	O
had	O
any	O
issues	O
with	O
it	O
.	O
However	O
now	O
I	O
need	O
to	O
understand	O
in	O
more	O
detail	O
what	O
I	O
should	O
do	O
for	O
my	O
API	O
development	O
.	O
I	O
'	O
ve	O
done	O
some	O
research	O
on	O
this	O
and	O
with	O
the	O
information	O
I	O
'	O
ve	O
got	O
I	O
just	O
get	O
more	O
confused	O
.	O
Hence	O
this	O
post	O
.	O
Since	O
I	O
come	O
from	O
JUL	B-api_mention
I	O
'	O
m	O
biased	O
on	O
that	O
.	O
My	O
knowledge	O
of	O
the	O
rest	O
is	O
not	O
that	O
big	O
.	O
From	O
the	O
research	O
I	O
'	O
ve	O
done	O
I	O
'	O
ve	O
come	O
up	O
with	O
these	O
reasons	O
why	O
people	O
do	O
not	O
like	O
JUL	B-api_mention
:	O
#	O
li	O
"	O
I	O
started	O
developing	O
in	O
Java	O
long	O
before	O
Sun	O
released	O
JUL	O
and	O
it	O
was	O
just	O
easier	O
for	O
me	O
to	O
continue	O
with	O
logging	O
-	O
framework	O
-	O
X	O
rather	O
than	O
to	O
learn	O
something	O
new	O
"	O
.	O
Hmm	O
.	O
I	O
'	O
m	O
not	O
kidding	O
,	O
this	O
is	O
actually	O
what	O
people	O
say	O
.	O
With	O
this	O
argument	O
we	O
could	O
all	O
be	O
doing	O
COBOL	O
.	O
(	O
however	O
I	O
can	O
certainly	O
relate	O
to	O
this	O
being	O
a	O
lazy	O
dude	O
myself	O
)	O
#	O
li	O
"	O
I	O
don	O
'	O
t	O
like	O
the	O
names	O
of	O
the	O
logging	O
levels	O
in	O
JUL	O
"	O
.	O
Ok	O
,	O
seriously	O
,	O
this	O
is	O
just	O
not	O
enough	O
of	O
a	O
reason	O
to	O
introduce	O
a	O
new	O
dependency	O
.	O
#	O
li	O
"	O
I	O
don	O
'	O
t	O
like	O
the	O
standard	O
format	O
of	O
the	O
output	O
from	O
JUL	B-api_mention
"	O
.	O
Hmm	O
.	O
This	O
is	O
just	O
configuration	O
.	O
You	O
do	O
not	O
even	O
have	O
to	O
do	O
anything	O
code	O
-	O
wise	O
.	O
(	O
true	O
,	O
back	O
in	O
old	O
days	O
you	O
may	O
have	O
had	O
to	O
create	O
your	O
own	O
Formatter	O
class	O
to	O
get	O
it	O
right	O
)	O
.	O
#	O
li	O
"	O
I	O
use	O
other	O
libraries	O
that	O
also	O
use	O
logging	O
-	O
framework	O
-	O
X	O
so	O
I	O
thought	O
it	O
easier	O
just	O
to	O
use	O
that	O
one	O
"	O
.	O
This	O
is	O
a	O
cyclic	O
argument	O
,	O
isn	O
'	O
t	O
?	O
Why	O
does	O
'	O
everybody	O
'	O
use	O
logging	O
-	O
framework	O
-	O
X	O
and	O
not	O
JUL	B-api_mention
?	O
#	O
li	O
"	O
Everybody	O
else	O
is	O
using	O
logging	O
-	O
framework	O
-	O
X	O
"	O
.	O
This	O
to	O
me	O
is	O
just	O
a	O
special	O
case	O
of	O
the	O
above	O
.	O
Majority	O
is	O
not	O
always	O
right	O
.	O
So	O
the	O
real	O
big	O
question	O
is	O
why	O
not	O
JUL	B-api_mention
?	O
.	O
What	O
is	O
it	O
I	O
have	O
missed	O
?	O
The	O
raison	O
d	O
'	O
ê	O
tre	O
for	O
logging	O
facades	O
(	O
SLF4J	B-api_mention
,	O
JCL	B-api_mention
)	O
is	O
that	O
multiple	O
logging	O
implementations	O
have	O
existed	O
historically	O
and	O
the	O
reason	O
for	O
that	O
really	O
goes	O
back	O
to	O
the	O
era	O
before	O
JUL	B-api_mention
as	O
I	O
see	O
it	O
.	O
If	O
JUL	B-api_mention
was	O
perfect	O
then	O
logging	O
facades	O
wouldn	O
'	O
t	O
exist	O
,	O
or	O
what	O
?	O
Rather	O
than	O
embracing	O
them	O
shouldn	O
'	O
t	O
we	O
question	O
why	O
they	O
were	O
necessary	O
in	O
the	O
first	O
place	O
?	O
(	O
and	O
see	O
if	O
those	O
reasons	O
still	O
exist	O
)	O
Ok	O
,	O
my	O
research	O
so	O
far	O
has	O
led	O
to	O
a	O
couple	O
of	O
things	O
that	O
I	O
can	O
see	O
may	O
be	O
real	O
issues	O
with	O
JUL	B-api_mention
:	O
#	O
li	O
Performance	O
.	O
Some	O
say	O
that	O
performance	O
in	O
SLF4J	B-api_mention
is	O
superior	O
to	O
the	O
rest	O
.	O
This	O
seems	O
to	O
me	O
to	O
be	O
a	O
case	O
of	O
premature	O
optimization	O
.	O
If	O
you	O
need	O
to	O
log	O
hundreds	O
of	O
megabytes	O
per	O
second	O
then	O
I	O
'	O
m	O
not	O
sure	O
you	O
are	O
on	O
the	O
right	O
path	O
anyway	O
.	O
JUL	B-api_mention
has	O
also	O
evolved	O
and	O
the	O
tests	O
you	O
did	O
on	O
Java	O
1	O
.	O
4	O
may	O
no	O
longer	O
be	O
true	O
.	O
You	O
can	O
read	O
about	O
it	O
here	O
and	O
this	O
fix	O
has	O
made	O
it	O
into	O
Java	O
7	O
.	O
Many	O
also	O
talk	O
about	O
the	O
overhead	O
of	O
string	O
concatenation	O
in	O
logging	O
methods	O
.	O
However	O
template	O
based	O
logging	O
avoids	O
this	O
cost	O
and	O
it	O
exist	O
also	O
in	O
JUL	B-api_mention
.	O
Personally	O
I	O
never	O
really	O
write	O
template	O
based	O
logging	O
.	O
Too	O
lazy	O
for	O
that	O
.	O
For	O
example	O
if	O
I	O
do	O
this	O
with	O
JUL	B-api_mention
:	O
log	B-api_mention
.	I-api_mention
finest	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
;	O
my	O
IDE	O
will	O
warn	O
me	O
and	O
ask	O
permission	O
that	O
it	O
should	O
change	O
it	O
to	O
:	O
log	B-api_mention
.	I-api_mention
log	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
.	O
which	O
I	O
will	O
of	O
course	O
accept	O
.	O
Permission	O
granted	O
!	O
Thank	O
you	O
for	O
your	O
help	O
.	O
So	O
I	O
don	O
'	O
t	O
actually	O
write	O
such	O
statements	O
myself	O
,	O
that	O
is	O
done	O
by	O
the	O
IDE	O
.	O
In	O
conclusion	O
on	O
the	O
issue	O
of	O
performance	O
I	O
haven	O
'	O
t	O
found	O
anything	O
that	O
would	O
suggest	O
that	O
JUL	B-api_mention
'	O
s	O
performance	O
is	O
not	O
ok	O
compared	O
to	O
the	O
competition	O
.	O
#	O
li	O
Configuration	O
from	O
classpath	O
.	O
Out	O
-	O
of	O
-	O
the	O
-	O
box	O
JUL	B-api_mention
cannot	O
load	O
a	O
configuration	O
file	O
from	O
the	O
classpath	O
.	O
It	O
is	O
a	O
few	O
lines	O
of	O
code	O
to	O
make	O
it	O
do	O
so	O
.	O
I	O
can	O
see	O
why	O
this	O
may	O
be	O
annoying	O
but	O
the	O
solution	O
is	O
short	O
and	O
simple	O
.	O
#	O
li	O
Availability	O
of	O
output	O
handlers	O
.	O
JUL	B-api_mention
comes	O
with	O
5	O
output	O
handlers	O
out	O
-	O
of	O
-	O
the	O
-	O
box	O
:	O
console	O
,	O
file	O
stream	O
,	O
socket	O
and	O
memory	O
.	O
These	O
can	O
be	O
extended	O
or	O
new	O
ones	O
can	O
be	O
written	O
.	O
This	O
may	O
for	O
example	O
be	O
writing	O
to	O
UNIX	O
/	O
Linux	O
Syslog	O
and	O
Windows	O
Event	O
Log	O
.	O
I	O
have	O
personally	O
never	O
had	O
this	O
requirement	O
nor	O
have	O
I	O
seen	O
it	O
used	O
but	O
I	O
can	O
certainly	O
relate	O
to	O
why	O
it	O
may	O
be	O
a	O
useful	O
feature	O
.	O
Logback	B-api_mention
comes	O
with	O
an	O
appender	O
for	O
Syslog	O
for	O
example	O
.	O
Still	O
I	O
would	O
argue	O
that	O
#	O
li	O
99	O
.	O
5	O
%	O
of	O
the	O
needs	O
for	O
output	O
destinations	O
are	O
covered	O
by	O
what	O
is	O
in	O
JUL	B-api_mention
out	O
-	O
of	O
-	O
the	O
-	O
box	O
.	O
#	O
li	O
Special	O
needs	O
could	O
be	O
catered	O
for	O
by	O
custom	O
handlers	O
on	O
top	O
of	O
JUL	B-api_mention
rather	O
than	O
on	O
top	O
of	O
something	O
else	O
.	O
There	O
'	O
s	O
nothing	O
to	O
me	O
that	O
suggests	O
that	O
it	O
takes	O
more	O
time	O
to	O
write	O
a	O
Syslog	O
output	O
handler	O
for	O
JUL	B-api_mention
than	O
it	O
does	O
for	O
another	O
logging	O
framework	O
.	O
I	O
'	O
m	O
really	O
concerned	O
that	O
there	O
'	O
s	O
something	O
I	O
'	O
ve	O
overlooked	O
.	O
The	O
use	O
of	O
logging	O
facades	O
and	O
logging	O
implementations	O
other	O
than	O
JUL	B-api_mention
is	O
so	O
widespread	O
that	O
I	O
have	O
to	O
come	O
to	O
the	O
conclusion	O
that	O
it	O
'	O
s	O
me	O
who	O
just	O
doesn	O
'	O
t	O
understand	O
.	O
That	O
wouldn	O
'	O
t	O
be	O
the	O
first	O
time	O
,	O
I	O
'	O
m	O
afraid	O
.	O
:	O
-	O
)	O
So	O
what	O
should	O
I	O
do	O
with	O
my	O
API	O
?	O
I	O
want	O
it	O
to	O
become	O
successful	O
.	O
I	O
can	O
of	O
course	O
just	O
"	O
go	O
with	O
the	O
flow	O
"	O
and	O
implement	O
SLF4J	B-api_mention
(	O
which	O
seems	O
the	O
most	O
popular	O
these	O
days	O
)	O
but	O
for	O
my	O
own	O
sake	O
I	O
still	O
need	O
to	O
understand	O
exactly	O
what	O
is	O
wrong	O
with	O
the	O
JUL	B-api_mention
of	O
today	O
that	O
warrants	O
all	O
the	O
fuzz	O
?	O
Will	O
I	O
sabotage	O
myself	O
by	O
choosing	O
JUL	B-api_mention
for	O
my	O
library	O
?	O
Testing	O
performance	O
(	O
section	O
added	O
by	O
nolan600	O
on	O
07	O
-	O
JUL	O
-	O
2012	O
)	O
There	O
'	O
s	O
a	O
reference	O
below	O
from	O
Ceki	O
about	O
SLF4J	B-api_mention
'	O
s	O
parametrization	O
being	O
10	O
times	O
or	O
more	O
faster	O
than	O
JUL	B-api_mention
'	O
s	O
.	O
So	O
I	O
'	O
ve	O
started	O
doing	O
some	O
simple	O
tests	O
.	O
At	O
first	O
glance	O
the	O
claim	O
is	O
certainly	O
correct	O
.	O
Here	O
are	O
the	O
preliminary	O
results	O
(	O
but	O
read	O
on	O
!	O
)	O
:	O
#	O
li	O
Execution	O
time	O
SLF4J	B-api_mention
,	O
backend	O
Logback	O
:	O
1515	O
#	O
li	O
Execution	O
time	O
SLF4J	B-api_mention
,	O
backend	O
JUL	B-api_mention
:	O
12938	O
#	O
li	O
Execution	O
time	O
JUL	B-api_mention
:	O
16911	O
The	O
numbers	O
above	O
are	O
msecs	O
so	O
less	O
is	O
better	O
.	O
So	O
10	O
times	O
performance	O
difference	O
is	O
by	O
first	O
actually	O
pretty	O
close	O
.	O
My	O
initial	O
reaction	O
:	O
That	O
is	O
a	O
lot	O
!	O
Here	O
is	O
the	O
core	O
of	O
the	O
test	O
.	O
As	O
can	O
be	O
seen	O
an	O
integer	O
and	O
a	O
string	O
is	O
construted	O
in	O
a	O
loop	O
which	O
is	O
then	O
used	O
in	O
the	O
log	O
statement	O
:	O
#	O
pre	O
(	O
I	O
wanted	O
the	O
log	O
statement	O
to	O
have	O
both	O
a	O
primitive	O
data	O
type	O
(	O
in	O
this	O
case	O
an	O
int	O
)	O
and	O
a	O
more	O
complex	O
data	O
type	O
(	O
in	O
this	O
case	O
a	O
String	B-api_mention
)	O
.	O
Not	O
sure	O
it	O
matters	O
but	O
there	O
you	O
have	O
it	O
.	O
)	O
The	O
log	O
statement	O
for	O
SLF4J	B-api_mention
:	O
logger	B-api_mention
.	I-api_mention
info	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
log	O
statement	O
for	O
JUL	B-api_mention
:	O
logger	B-api_mention
.	I-api_mention
log	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
JVM	O
was	O
'	O
warmed	O
up	O
'	O
with	O
the	O
same	O
test	O
executed	O
once	O
before	O
the	O
actual	O
measurement	O
was	O
done	O
.	O
Java	O
1	O
.	O
7	O
.	O
03	O
was	O
used	O
on	O
Windows	O
7	O
.	O
Latest	O
versions	O
of	O
SLF4J	B-api_mention
(	O
v1	O
.	O
6	O
.	O
6	O
)	O
and	O
Logback	B-api_mention
(	O
v1	O
.	O
0	O
.	O
6	O
)	O
was	O
used	O
.	O
Stdout	O
and	O
stderr	O
was	O
redirected	O
to	O
null	O
device	O
.	O
However	O
,	O
careful	O
now	O
,	O
it	O
turns	O
out	O
JUL	O
is	O
spending	O
most	O
of	O
its	O
time	O
in	O
getSourceClassName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
JUL	B-api_mention
by	O
default	O
prints	O
the	O
source	O
class	O
name	O
in	O
the	O
output	O
,	O
while	O
Logback	B-api_mention
doesn	O
'	O
t	O
.	O
So	O
we	O
are	O
comparing	O
apples	O
and	O
oranges	O
.	O
I	O
have	O
to	O
do	O
the	O
test	O
again	O
and	O
configure	O
the	O
logging	O
implementations	O
in	O
a	O
similar	O
manner	O
so	O
that	O
they	O
actually	O
output	O
the	O
same	O
stuff	O
.	O
I	O
do	O
however	O
suspect	O
that	O
SLF4J	B-api_mention
+	O
Logback	B-api_mention
will	O
still	O
come	O
out	O
on	O
top	O
but	O
far	O
from	O
the	O
initial	O
numbers	O
as	O
given	O
above	O
.	O
Stay	O
tuned	O
.	O
Btw	O
:	O
The	O
test	O
was	O
first	O
time	O
I	O
'	O
ve	O
actually	O
worked	O
with	O
SLF4J	B-api_mention
or	O
Logback	B-api_mention
.	O
A	O
pleasant	O
experience	O
.	O
JUL	B-api_mention
is	O
certainly	O
a	O
lot	O
less	O
welcoming	O
when	O
you	O
are	O
starting	O
out	O
.	O
Testing	O
performance	O
(	O
part	O
2	O
)	O
(	O
section	O
added	O
by	O
nolan600	O
on	O
08	O
-	O
JUL	O
-	O
2012	O
)	O
As	O
it	O
turns	O
out	O
it	O
doesn	O
'	O
t	O
really	O
matter	O
for	O
performance	O
how	O
you	O
configure	O
your	O
pattern	O
in	O
JUL	B-api_mention
,	O
i	O
.	O
e	O
.	O
whether	O
or	O
not	O
it	O
includes	O
the	O
source	O
name	O
or	O
not	O
.	O
I	O
tried	O
with	O
a	O
very	O
simple	O
pattern	O
:	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
logging	I-api_mention
.	I-api_mention
SimpleFormatter	I-api_mention
.	I-api_mention
format	I-api_mention
=	O
StringLiteral	O
and	O
that	O
did	O
not	O
change	O
the	O
above	O
timings	O
at	O
all	O
.	O
My	O
profiler	O
revealed	O
that	O
the	O
logger	O
still	O
spent	O
a	O
lot	O
of	O
time	O
in	O
calls	O
to	O
getSourceClassName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
even	O
if	O
this	O
was	O
not	O
part	O
of	O
my	O
pattern	O
.	O
The	O
pattern	O
doesn	O
'	O
t	O
matter	O
.	O
I	O
'	O
m	O
therefore	O
concluding	O
on	O
the	O
issue	O
of	O
performance	O
that	O
at	O
least	O
for	O
the	O
tested	O
template	O
based	O
log	O
statement	O
there	O
seems	O
to	O
be	O
roughly	O
a	O
factor	O
of	O
10	O
in	O
real	O
performance	O
difference	O
between	O
JUL	B-api_mention
(	O
slow	O
)	O
and	O
SLF4J	B-api_mention
+	O
Logback	B-api_mention
(	O
quick	O
)	O
.	O
Just	O
like	O
Ceki	O
said	O
.	O
I	O
can	O
also	O
see	O
another	O
thing	O
namely	O
that	O
SLF4J	B-api_mention
'	O
s	O
getLogger	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
is	O
a	O
lot	O
more	O
expensive	O
than	O
JUL	B-api_mention
'	O
s	O
ditto	O
.	O
(	O
95	O
ms	O
vs	O
0	O
.	O
3	O
ms	O
if	O
my	O
profiler	O
is	O
accurate	O
)	O
.	O
This	O
makes	O
sense	O
.	O
SLF4J	B-api_mention
has	O
to	O
do	O
some	O
time	O
on	O
the	O
binding	O
of	O
the	O
underlying	O
logging	O
implementation	O
.	O
This	O
doesn	O
'	O
t	O
scare	O
me	O
.	O
These	O
calls	O
should	O
be	O
somewhat	O
rare	O
in	O
the	O
lifetime	O
of	O
an	O
application	O
.	O
The	O
fastness	O
should	O
be	O
in	O
the	O
actual	O
log	O
calls	O
.	O
Final	O
conclusion	O
(	O
section	O
added	O
by	O
nolan600	O
on	O
08	O
-	O
JUL	O
-	O
2012	O
)	O
Thank	O
you	O
for	O
all	O
your	O
answers	O
.	O
Contrary	O
to	O
what	O
I	O
initially	O
thought	O
I	O
'	O
ve	O
ended	O
up	O
deciding	O
to	O
use	O
SLF4J	B-api_mention
for	O
my	O
API	O
.	O
This	O
is	O
based	O
on	O
a	O
number	O
of	O
things	O
and	O
your	O
input	O
:	O
#	O
li	O
It	O
gives	O
flexibility	O
to	O
choose	O
log	O
implementation	O
at	O
deployment	O
time	O
.	O
#	O
li	O
Issues	O
with	O
lack	O
of	O
flexibility	O
of	O
JUL	B-api_mention
'	O
s	O
configuration	O
when	O
run	O
inside	O
an	O
application	O
server	O
.	O
#	O
li	O
SLF4J	B-api_mention
is	O
certainly	O
a	O
lot	O
faster	O
as	O
detailed	O
above	O
in	O
particular	O
if	O
you	O
couple	O
it	O
with	O
Logback	B-api_mention
.	O
Even	O
if	O
this	O
was	O
just	O
a	O
rough	O
test	O
I	O
have	O
reason	O
to	O
believe	O
that	O
a	O
lot	O
more	O
effort	O
has	O
gone	O
into	O
optimization	O
on	O
SLF4J	B-api_mention
+	O
Logback	B-api_mention
than	O
on	O
JUL	B-api_mention
.	O
#	O
li	O
Documentation	O
.	O
The	O
documentation	O
for	O
SLF4J	B-api_mention
is	O
simply	O
a	O
lot	O
more	O
comprehensive	O
and	O
precise	O
.	O
#	O
li	O
Pattern	O
flexibility	O
.	O
As	O
I	O
did	O
the	O
tests	O
I	O
set	O
out	O
to	O
have	O
JUL	B-api_mention
mimic	O
the	O
default	O
pattern	O
from	O
Logback	B-api_mention
.	O
This	O
pattern	O
includes	O
the	O
name	O
of	O
the	O
thread	O
.	O
It	O
turns	O
out	O
JUL	B-api_mention
cannot	O
do	O
this	O
out	O
of	O
the	O
box	O
.	O
Ok	O
,	O
I	O
haven	O
'	O
t	O
missed	O
it	O
until	O
now	O
,	O
but	O
I	O
don	O
'	O
t	O
think	O
it	O
is	O
a	O
thing	O
that	O
should	O
be	O
missing	O
from	O
a	O
log	O
framework	O
.	O
Period	O
!	O
#	O
li	O
Most	O
(	O
or	O
many	O
)	O
Java	O
projects	O
today	O
use	O
Maven	O
so	O
adding	O
a	O
dependency	O
is	O
not	O
that	O
big	O
a	O
thing	O
especially	O
if	O
that	O
dependency	O
is	O
rather	O
stable	O
,	O
i	O
.	O
e	O
.	O
doesn	O
'	O
t	O
constantly	O
change	O
its	O
API	O
.	O
This	O
seems	O
to	O
be	O
true	O
for	O
SLF4J	B-api_mention
.	O
Also	O
the	O
SLF4J	B-api_mention
jar	O
and	O
friends	O
are	O
small	O
in	O
size	O
.	O
So	O
the	O
strange	O
thing	O
that	O
happened	O
was	O
that	O
I	O
actually	O
got	O
quite	O
upset	O
with	O
JUL	B-api_mention
after	O
having	O
worked	O
a	O
bit	O
with	O
SLF4J	B-api_mention
.	O
I	O
still	O
regret	O
that	O
it	O
has	O
to	O
be	O
this	O
way	O
with	O
JUL	B-api_mention
.	O
JUL	B-api_mention
is	O
far	O
from	O
perfect	O
but	O
kind	O
of	O
does	O
the	O
job	O
.	O
Just	O
not	O
quite	O
well	O
enough	O
.	O
The	O
same	O
can	O
be	O
said	O
about	O
Properties	O
as	O
an	O
example	O
but	O
we	O
do	O
not	O
think	O
about	O
abstracting	O
that	O
so	O
people	O
can	O
plug	O
in	O
their	O
own	O
configuration	O
library	O
and	O
what	O
have	O
you	O
.	O
I	O
think	O
the	O
reason	O
is	O
that	O
Properties	O
comes	O
in	O
just	O
above	O
the	O
bar	O
while	O
the	O
opposite	O
is	O
true	O
for	O
JUL	B-api_mention
of	O
today	O
.	O
.	O
.	O
and	O
in	O
the	O
past	O
it	O
came	O
in	O
at	O
zero	O
because	O
it	O
didn	O
'	O
t	O
exist	O
.	O
Question	O
-	O
20945049	O
We	O
all	O
know	O
that	O
String	B-api_mention
is	O
immutable	O
in	O
Java	O
,	O
but	O
check	O
the	O
following	O
code	O
:	O
#	O
pre	O
Why	O
does	O
this	O
program	O
operate	O
like	O
this	O
?	O
And	O
why	O
is	O
the	O
value	O
of	O
s1	O
and	O
s2	O
changed	O
,	O
but	O
not	O
s3	O
?	O
Question	O
-	O
6667243	O
What	O
is	O
the	O
best	O
way	O
to	O
use	O
the	O
values	O
stored	O
in	O
an	O
Enum	B-api_mention
as	O
String	B-api_mention
literals	O
?	O
For	O
example	O
:	O
#	O
pre	O
Then	O
later	O
I	O
could	O
use	O
Mode	O
.	O
mode1	O
to	O
return	O
its	O
string	O
representation	O
as	O
mode1	O
.	O
Without	O
having	O
to	O
keep	O
calling	O
Mode	O
.	O
model	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
18544736	O
Threads	O
are	O
not	O
collected	O
until	O
they	O
terminate	O
.	O
They	O
serve	O
as	O
roots	O
of	O
garbage	O
collection	O
.	O
They	O
are	O
one	O
of	O
the	O
few	O
objects	O
that	O
won	O
'	O
t	O
be	O
reclaimed	O
simply	O
by	O
forgetting	O
about	O
them	O
or	O
clearing	O
references	O
to	O
them	O
.	O
Consider	O
:	O
the	O
basic	O
pattern	O
to	O
terminate	O
a	O
worker	O
thread	O
is	O
to	O
set	O
some	O
condition	O
variable	O
seen	O
by	O
the	O
thread	O
.	O
The	O
thread	O
can	O
check	O
the	O
variable	O
periodically	O
and	O
use	O
that	O
as	O
a	O
signal	O
to	O
terminate	O
.	O
If	O
the	O
variable	O
is	O
not	O
declared	O
volatile	O
,	O
then	O
the	O
change	O
to	O
the	O
variable	O
might	O
not	O
be	O
seen	O
by	O
the	O
thread	O
,	O
so	O
it	O
won	O
'	O
t	O
know	O
to	O
terminate	O
.	O
Or	O
imagine	O
if	O
some	O
threads	O
want	O
to	O
update	O
a	O
shared	O
object	O
,	O
but	O
deadlock	O
while	O
trying	O
to	O
lock	O
on	O
it	O
.	O
If	O
you	O
only	O
have	O
a	O
handful	O
of	O
threads	O
these	O
bugs	O
will	O
probably	O
be	O
obvious	O
because	O
your	O
program	O
will	O
stop	O
working	O
properly	O
.	O
If	O
you	O
have	O
a	O
thread	O
pool	O
that	O
creates	O
more	O
threads	O
as	O
needed	O
,	O
then	O
the	O
obsolete	O
/	O
stuck	O
threads	O
might	O
not	O
be	O
noticed	O
,	O
and	O
will	O
accumulate	O
indefinitely	O
,	O
causing	O
a	O
memory	O
leak	O
.	O
Threads	O
are	O
likely	O
to	O
use	O
other	O
data	O
in	O
your	O
application	O
,	O
so	O
will	O
also	O
prevent	O
anything	O
they	O
directly	O
reference	O
from	O
ever	O
being	O
collected	O
.	O
As	O
a	O
toy	O
example	O
:	O
#	O
pre	O
Call	O
System	B-api_mention
.	I-api_mention
gc	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
all	O
you	O
like	O
,	O
but	O
the	O
object	O
passed	O
to	O
leakMe	O
will	O
never	O
die	O
.	O
(	O
*	O
edited	O
*	O
)	O
Question	O
-	O
12317668	O
According	O
to	O
the	O
JLS	O
,	O
an	O
int	O
array	O
should	O
be	O
filled	O
by	O
zeros	O
just	O
after	O
initialization	O
.	O
However	O
,	O
I	O
am	O
faced	O
with	O
a	O
situation	O
where	O
it	O
is	O
not	O
.	O
Such	O
a	O
behavior	O
occurs	O
first	O
in	O
JDK	O
7u4	O
and	O
also	O
occurs	O
in	O
all	O
later	O
updates	O
(	O
I	O
use	O
64	O
-	O
bit	O
implementation	O
)	O
.	O
The	O
following	O
code	O
throws	O
exception	O
:	O
#	O
pre	O
The	O
exception	O
occurs	O
after	O
the	O
JVM	O
performs	O
compilation	O
of	O
the	O
code	O
block	O
and	O
does	O
not	O
arise	O
with	O
-	O
Xint	O
flag	O
.	O
Additionally	O
,	O
the	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
statement	O
(	O
as	O
all	O
other	O
statements	O
in	O
this	O
code	O
)	O
is	O
necessary	O
,	O
and	O
the	O
exception	O
does	O
not	O
occurs	O
if	O
it	O
is	O
absent	O
.	O
It	O
is	O
clear	O
that	O
this	O
possible	O
bug	O
is	O
bounded	O
with	O
some	O
JVM	O
optimization	O
.	O
Any	O
ideas	O
for	O
the	O
reason	O
of	O
such	O
a	O
behavior	O
?	O
Update	O
:	O
I	O
see	O
this	O
behavior	O
on	O
HotSpot	O
64	O
-	O
bit	O
server	O
VM	O
,	O
Java	O
version	O
from	O
1	O
.	O
7	O
.	O
0	O
_	O
04	O
to	O
1	O
.	O
7	O
.	O
0	O
_	O
10	O
on	O
Gentoo	O
Linux	O
,	O
Debian	O
Linux	O
(	O
both	O
kernel	O
3	O
.	O
0	O
version	O
)	O
and	O
MacOS	O
Lion	O
.	O
This	O
error	O
can	O
always	O
be	O
reproduced	O
with	O
the	O
code	O
above	O
.	O
I	O
did	O
not	O
test	O
this	O
problem	O
with	O
a	O
32	O
-	O
bit	O
JDK	O
or	O
on	O
Windows	O
.	O
I	O
already	O
sent	O
a	O
bug	O
report	O
to	O
the	O
Oracle	O
(	O
bug	O
id	O
7196857	O
)	O
and	O
it	O
will	O
appear	O
in	O
public	O
Oracle	O
bug	O
database	O
in	O
few	O
days	O
.	O
Update	O
:	O
Oracle	O
published	O
this	O
bug	O
at	O
their	O
public	O
bug	O
database	O
:	O
#	O
a	O
Question	O
-	O
7348711	O
Which	O
of	O
the	O
following	O
is	O
the	O
best	O
and	O
most	O
portable	O
way	O
to	O
get	O
the	O
hostname	O
of	O
the	O
current	O
computer	O
in	O
Java	O
?	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
vs	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
5439529	O
,	O
answer	O
-	O
9991624	O
You	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
catch	O
the	O
NumberFormatException	B-api_mention
if	O
the	O
string	O
is	O
not	O
a	O
valid	O
integer	O
,	O
in	O
the	O
following	O
fashion	O
(	O
as	O
pointed	O
out	O
by	O
all	O
answers	O
)	O
:	O
#	O
pre	O
However	O
,	O
note	O
here	O
that	O
if	O
the	O
evaluated	O
integer	O
overflows	O
,	O
the	O
same	O
exception	O
will	O
be	O
thrown	O
.	O
Your	O
purpose	O
was	O
to	O
find	O
out	O
whether	O
or	O
not	O
,	O
it	O
was	O
a	O
valid	O
integer	O
.	O
So	O
its	O
safer	O
to	O
make	O
your	O
own	O
method	O
to	O
check	O
for	O
validity	O
:	O
#	O
pre	O
Question	O
-	O
22718744	O
,	O
answer	O
-	O
27477312	O
The	O
behavior	O
of	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	O
which	O
calls	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
)	O
changes	O
between	O
Java	O
7	O
and	O
Java	O
8	O
.	O
Documentation	O
Comparing	O
between	O
the	O
documentation	O
of	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
in	O
Java	O
7	O
and	O
Java	O
8	O
,	O
we	O
observe	O
the	O
following	O
clause	O
being	O
added	O
:	O
#	O
blockquote	O
The	O
same	O
clause	O
is	O
also	O
added	O
to	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
in	O
Java	O
8	O
,	O
compared	O
to	O
Java	O
7	O
.	O
Reference	O
implementation	O
Let	O
us	O
compare	O
the	O
code	O
of	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
of	O
the	O
reference	O
implemetation	O
in	O
Java	O
7	O
and	O
Java	O
8	O
.	O
The	O
code	O
is	O
retrieved	O
from	O
grepcode	O
,	O
for	O
version	O
7u40	O
-	O
b43	O
and	O
8	O
-	O
b132	O
.	O
Java	O
7	O
#	O
pre	O
Java	O
8	O
#	O
pre	O
The	O
addition	O
of	O
the	O
following	O
code	O
in	O
Java	O
8	O
excludes	O
the	O
zero	O
-	O
length	O
match	O
at	O
the	O
beginning	O
of	O
the	O
input	O
string	O
,	O
which	O
explains	O
the	O
behavior	O
above	O
.	O
#	O
pre	O
Maintaining	O
compatibility	O
Following	O
behavior	O
in	O
Java	O
8	O
and	O
above	O
To	O
make	O
split	B-api_mention
behaves	O
consistently	O
across	O
versions	O
and	O
compatible	O
with	O
the	O
behavior	O
in	O
Java	O
8	O
:	O
#	O
li	O
If	O
your	O
regex	O
can	O
match	O
zero	O
-	O
length	O
string	O
,	O
just	O
add	O
(	O
?	O
!	O
\	O
A	O
)	O
at	O
the	O
end	O
of	O
the	O
regex	O
and	O
wrap	O
the	O
original	O
regex	O
in	O
non	O
-	O
capturing	O
group	O
(	O
?	O
:	O
.	O
.	O
.	O
)	O
(	O
if	O
necessary	O
)	O
.	O
#	O
li	O
If	O
your	O
regex	O
can	O
'	O
t	O
match	O
zero	O
-	O
length	O
string	O
,	O
you	O
don	O
'	O
t	O
need	O
to	O
do	O
anything	O
.	O
#	O
li	O
If	O
you	O
don	O
'	O
t	O
know	O
whether	O
the	O
regex	O
can	O
match	O
zero	O
-	O
length	O
string	O
or	O
not	O
,	O
do	O
both	O
the	O
actions	O
in	O
step	O
1	O
.	O
(	O
?	O
!	O
\	O
A	O
)	O
checks	O
that	O
the	O
string	O
does	O
not	O
end	O
at	O
the	O
beginning	O
of	O
the	O
string	O
,	O
which	O
implies	O
that	O
the	O
match	O
is	O
an	O
empty	O
match	O
at	O
the	O
beginning	O
of	O
the	O
string	O
.	O
Following	O
behavior	O
in	O
Java	O
7	O
and	O
prior	O
There	O
is	O
no	O
general	O
solution	O
to	O
make	O
split	B-api_mention
backward	O
-	O
compatible	O
with	O
Java	O
7	O
and	O
prior	O
,	O
short	O
of	O
replacing	O
all	O
instance	O
of	O
split	B-api_mention
to	O
point	O
to	O
your	O
own	O
custom	O
implementation	O
.	O
Question	O
-	O
19418427	O
,	O
answer	O
-	O
19418548	O
As	O
per	O
my	O
research	O
,	O
all	O
the	O
final	O
String	B-api_mention
are	O
interned	O
in	O
Java	O
.	O
From	O
one	O
of	O
the	O
blog	O
post	O
:	O
#	O
blockquote	O
So	O
it	O
means	O
if	O
you	O
call	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
can	O
compare	O
two	O
strings	O
using	O
=	O
=	O
operator	O
.	O
But	O
here	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
not	O
necessary	O
because	O
in	O
Java	O
final	O
String	B-api_mention
are	O
internally	O
interned	O
.	O
You	O
can	O
find	O
more	O
information	O
String	B-api_mention
comparision	O
using	O
=	O
=	O
operator	O
and	O
Javadoc	O
for	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
Also	O
refer	O
this	O
Stackoverflow	O
post	O
for	O
more	O
information	O
.	O
Question	O
-	O
32714194	O
String	B-api_mention
is	O
a	O
special	O
case	O
in	O
Java	O
.	O
It	O
'	O
s	O
a	O
class	O
,	O
which	O
I	O
can	O
examine	O
in	O
the	O
source	O
code	O
,	O
but	O
it	O
also	O
has	O
its	O
own	O
infix	O
operator	O
+	O
,	O
which	O
seems	O
to	O
be	O
syntactic	O
sugar	O
for	O
StringBuilder	B-api_mention
.	O
For	O
example	O
,	O
StringLiteral	O
+	O
yourName	O
;	O
could	O
become	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
There	O
are	O
no	O
user	O
-	O
defined	O
operators	O
in	O
Java	O
,	O
so	O
where	O
is	O
+	O
specified	O
for	O
String	B-api_mention
?	O
Could	O
the	O
same	O
mechanism	O
be	O
used	O
to	O
make	O
additional	O
operators	O
,	O
such	O
as	O
for	O
vectors	O
?	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
15656208	O
This	O
is	O
favorite	O
interview	O
question	O
.	O
Interviewer	O
tries	O
to	O
find	O
out	O
here	O
,	O
how	O
much	O
you	O
understand	O
about	O
behavior	O
of	O
objects	O
with	O
respect	O
to	O
constructors	O
,	O
methods	O
,	O
class	O
variables	O
(	O
static	O
variables	O
)	O
,	O
instance	O
variables	O
.	O
#	O
pre	O
In	O
above	O
case	O
we	O
have	O
defined	O
Test	O
constructor	O
and	O
setFoo	O
method	O
.	O
About	O
constructor	O
:	O
Constructor	O
can	O
be	O
invoked	O
only	O
one	O
time	O
per	O
object	O
creation	O
by	O
using	O
new	O
keyword	O
.	O
Programmer	O
cannot	O
invoke	O
constructor	O
many	O
times	O
because	O
constructor	O
are	O
designed	O
so	O
.	O
About	O
method	O
:	O
Method	O
can	O
be	O
invoked	O
as	O
many	O
time	O
as	O
programmer	O
wants	O
and	O
compiler	O
knows	O
it	O
programmer	O
may	O
invoke	O
method	O
zero	O
or	O
multiple	O
time	O
.	O
Scenario	O
1	O
private	O
final	O
List	B-api_mention
foo	O
;	O
/	O
/	O
1	O
foo	O
is	O
an	O
instance	O
variable	O
.	O
When	O
we	O
create	O
Test	O
class	O
'	O
object	O
then	O
instance	O
variable	O
foo	O
will	O
be	O
copied	O
inside	O
object	O
of	O
Test	O
class	O
.	O
If	O
we	O
assign	O
foo	O
inside	O
constructor	O
then	O
compiler	O
know	O
that	O
Constructor	O
will	O
be	O
invoked	O
only	O
one	O
time	O
.	O
so	O
there	O
is	O
no	O
problem	O
to	O
assign	O
it	O
inside	O
constructor	O
.	O
If	O
we	O
assign	O
foo	O
inside	O
method	O
then	O
compiler	O
knows	O
that	O
method	O
may	O
be	O
invoked	O
multiple	O
time	O
.	O
So	O
value	O
will	O
have	O
to	O
be	O
changed	O
multiple	O
time	O
which	O
is	O
not	O
allowed	O
for	O
final	O
variable	O
.	O
You	O
can	O
assign	O
value	O
to	O
the	O
final	O
variable	O
only	O
one	O
time	O
.	O
So	O
compiler	O
decides	O
constructor	O
is	O
good	O
choice	O
!	O
Scenario	O
2	O
private	O
static	O
final	O
List	B-api_mention
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
foo	O
is	O
now	O
static	O
variable	O
.	O
When	O
we	O
create	O
object	O
of	O
Test	O
class	O
then	O
foo	O
will	O
not	O
be	O
copied	O
to	O
the	O
object	O
of	O
Test	O
class	O
because	O
foo	O
is	O
static	O
.	O
Now	O
foo	O
is	O
not	O
the	O
property	O
of	O
each	O
object	O
.	O
This	O
is	O
the	O
property	O
of	O
Test	O
class	O
.	O
But	O
foo	O
can	O
be	O
seen	O
by	O
many	O
objects	O
and	O
if	O
every	O
object	O
which	O
is	O
created	O
by	O
using	O
new	O
keyword	O
which	O
ultimately	O
invoke	O
Test	O
constructor	O
then	O
value	O
will	O
be	O
changed	O
at	O
the	O
time	O
of	O
multiple	O
object	O
creation	O
(	O
Remember	O
static	O
foo	O
is	O
not	O
copied	O
in	O
every	O
object	O
now	O
but	O
is	O
shared	O
between	O
multiple	O
objects	O
.	O
)	O
Scenario	O
3	O
t	O
.	O
foo	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
Modification	O
-	O
2	O
Above	O
Modification	O
-	O
2	O
is	O
from	O
your	O
question	O
.	O
In	O
above	O
case	O
you	O
are	O
not	O
changing	O
first	O
referenced	O
object	O
but	O
you	O
are	O
adding	O
contents	O
inside	O
foo	O
which	O
is	O
allowed	O
.	O
Compiler	O
complains	O
if	O
you	O
try	O
to	O
assign	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
object	O
to	O
the	O
foo	O
reference	O
variable	O
.	O
Rule	O
is	O
that	O
if	O
you	O
have	O
initialized	O
object	O
to	O
final	O
reference	O
variable	O
then	O
you	O
cannot	O
change	O
it	O
to	O
refer	O
different	O
ArrayList	B-api_mention
object	O
.	O
(	O
in	O
this	O
case	O
ArrayList	B-api_mention
)	O
final	O
class	O
cannot	O
be	O
subclassed	O
final	O
methods	O
cannot	O
be	O
overridden	O
.	O
(	O
This	O
method	O
is	O
in	O
superclass	O
)	O
final	O
methods	O
can	O
override	O
.	O
(	O
Read	O
this	O
in	O
grammatical	O
way	O
.	O
This	O
method	O
is	O
in	O
subclass	O
)	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
22676782	O
Despite	O
@	O
Saint	O
Hill	O
'	O
s	O
answer	O
if	O
you	O
consider	O
the	O
time	O
complexity	O
of	O
str	O
.	B-api_mention
toCharArray	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
the	O
first	O
one	O
is	O
faster	O
even	O
for	O
very	O
large	O
strings	O
.	O
You	O
can	O
run	O
the	O
code	O
below	O
to	O
see	O
it	O
for	O
yourself	O
.	O
#	O
pre	O
output	O
:	O
#	O
pre	O
Question	O
-	O
4709175	O
,	O
answer	O
-	O
4709284	O
#	O
blockquote	O
You	O
can	O
use	O
an	O
Enum	B-api_mention
to	O
represent	O
a	O
smallish	O
fixed	O
set	O
of	O
constants	O
or	O
an	O
internal	O
class	O
mode	O
while	O
increasing	O
readability	O
.	O
Also	O
,	O
Enums	O
can	O
enforce	O
a	O
certain	O
rigidity	O
when	O
used	O
in	O
method	O
parameters	O
.	O
They	O
offer	O
the	O
interesting	O
possibility	O
of	O
passing	O
information	O
to	O
a	O
constructor	O
like	O
in	O
the	O
Planets	O
example	O
on	O
Oracle	O
'	O
s	O
site	O
and	O
,	O
as	O
you	O
'	O
ve	O
discovered	O
,	O
also	O
allow	O
a	O
simple	O
way	O
to	O
create	O
a	O
singleton	O
pattern	O
.	O
ex	O
:	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
reads	O
better	O
than	O
Locale	B-api_mention
.	I-api_mention
setDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
enforces	O
the	O
use	O
of	O
fixed	O
set	O
of	O
values	O
shown	O
in	O
an	O
IDE	O
when	O
you	O
add	O
the	O
.	O
separator	O
instead	O
of	O
all	O
integers	O
.	O
Question	O
-	O
24885223	O
,	O
answer	O
-	O
29841832	O
Thanks	O
to	O
@	O
marmor	O
,	O
I	O
updated	O
my	O
answer	O
.	O
I	O
think	O
it	O
'	O
s	O
a	O
good	O
solution	O
to	O
handle	O
the	O
onClick	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
the	O
ViewHolder	B-api_mention
class	O
constructor	O
and	O
pass	O
it	O
to	O
the	O
parent	O
class	O
via	O
OnItemClickListener	B-api_mention
interface	O
.	O
MyAdapter	O
.	O
java	O
#	O
pre	O
Usage	O
of	O
adapter	O
in	O
other	O
classes	O
:	O
MyFragment	O
.	O
java	O
#	O
pre	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571352	O
You	O
can	O
use	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
returns	O
the	O
byte	O
[	O
]	O
array	O
.	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
10827945	O
The	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
overloaded	O
to	O
accept	O
both	O
a	O
primitive	O
char	O
and	O
a	O
CharSequence	B-api_mention
as	O
arguments	O
.	O
Now	O
as	O
far	O
as	O
the	O
performance	O
is	O
concerned	O
,	O
the	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
a	O
bit	O
faster	O
than	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
the	O
later	O
first	O
compiles	O
the	O
regex	O
pattern	O
and	O
then	O
matches	O
before	O
finally	O
replacing	O
whereas	O
the	O
former	O
simply	O
matches	O
for	O
the	O
provided	O
argument	O
and	O
replaces	O
.	O
Since	O
we	O
know	O
the	O
regex	O
pattern	O
matching	O
is	O
a	O
bit	O
more	O
complex	O
and	O
consequently	O
slower	O
,	O
then	O
preferring	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
over	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
suggested	O
whenever	O
possible	O
.	O
For	O
example	O
,	O
for	O
simple	O
substitutions	O
like	O
you	O
mentioned	O
,	O
it	O
is	O
better	O
to	O
use	O
:	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
of	O
:	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
:	O
the	O
above	O
conversion	O
method	O
arguments	O
are	O
system	O
-	O
dependent	O
.	O
Question	O
-	O
23114015	O
I	O
am	O
wondering	O
why	O
the	O
Iterable	B-api_mention
interface	O
does	O
not	O
provide	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
.	O
Consider	O
the	O
following	O
class	O
:	O
#	O
pre	O
It	O
is	O
an	O
implementation	O
of	O
a	O
Hand	O
as	O
you	O
can	O
have	O
cards	O
in	O
your	O
hand	O
while	O
playing	O
a	O
Trading	O
Card	O
Game	O
.	O
Essentially	O
it	O
wraps	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
ensures	O
a	O
maximum	O
capacity	O
and	O
offers	O
some	O
other	O
useful	O
features	O
.	O
It	O
is	O
better	O
as	O
implementing	O
it	O
directly	O
as	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Now	O
,	O
for	O
convienience	O
I	O
thought	O
it	O
would	O
be	O
nice	O
to	O
implement	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
such	O
that	O
you	O
can	O
use	O
enhanced	O
for	O
-	O
loops	O
if	O
you	O
want	O
to	O
loop	O
over	O
it	O
.	O
(	O
My	O
Hand	O
class	O
also	O
provides	O
a	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
hence	O
the	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
justified	O
in	O
my	O
opinion	O
.	O
)	O
The	O
Iterable	O
interface	O
provides	O
the	O
following	O
(	O
left	O
out	O
javadoc	O
)	O
:	O
#	O
pre	O
Now	O
can	O
you	O
obtain	O
a	O
stream	O
with	O
:	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
stream	O
=	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
onto	O
the	O
real	O
question	O
:	O
#	O
li	O
Why	O
does	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
provide	O
a	O
default	O
methods	O
that	O
implement	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
see	O
nothing	O
that	O
would	O
make	O
this	O
impossible	O
or	O
unwanted	O
?	O
A	O
related	O
question	O
I	O
found	O
is	O
the	O
following	O
though	O
:	O
Why	O
does	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
implement	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
?	O
Which	O
is	O
oddly	O
enough	O
suggesting	O
it	O
to	O
do	O
it	O
somewhat	O
the	O
other	O
way	O
around	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725453	O
Since	O
all	O
lists	O
are	O
already	O
"	O
sorted	O
"	O
by	O
the	O
order	O
the	O
items	O
were	O
added	O
(	O
FIFO	O
ordering	O
)	O
,	O
you	O
can	O
"	O
resort	O
"	O
them	O
with	O
another	O
ordering	O
,	O
including	O
the	O
natural	O
ordering	O
of	O
elements	O
,	O
using	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
EDIT	O
:	O
Lists	B-api_mention
as	O
data	O
structures	O
are	O
based	O
in	O
what	O
is	O
interesting	O
is	O
the	O
ordering	O
in	O
which	O
the	O
items	O
where	O
inserted	O
.	O
Sets	O
do	O
not	O
have	O
that	O
information	O
.	O
If	O
you	O
want	O
to	O
order	O
by	O
addition	O
time	O
,	O
use	O
List	B-api_mention
.	O
If	O
you	O
want	O
to	O
order	O
by	O
other	O
criteria	O
,	O
use	O
SortedSet	B-api_mention
.	O
Question	O
-	O
7935858	O
,	O
answer	O
-	O
7935873	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
.	I-api_mention
split	I-api_mention
splits	O
on	O
regular	O
expressions	O
,	O
and	O
.	O
in	O
a	O
regular	O
expression	O
means	O
"	O
any	O
character	O
"	O
.	O
Try	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
28724850	O
Running	O
the	O
following	O
stream	O
example	O
in	O
Java8	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
yields	O
:	O
/	O
a	O
/	O
b	O
/	O
c	O
/	O
d	O
/	O
e	O
/	O
f	O
Which	O
is	O
-	O
of	O
course	O
-	O
no	O
surprise	O
.	O
Due	O
to	O
#	O
a	O
it	O
shouldn	O
'	O
t	O
matter	O
whether	O
the	O
stream	O
is	O
executed	O
sequentially	O
or	O
parallel	O
:	O
#	O
blockquote	O
AFAIK	O
reduce	O
(	O
args	O
)	O
is	O
deterministic	O
and	O
(	O
s1	O
,	O
s2	O
)	O
-	O
>	O
s1	O
+	O
StringLiteral	O
+	O
s2	O
is	O
associative	O
,	O
so	O
that	O
adding	O
parallel	O
(	O
args	O
)	O
should	O
yield	O
the	O
same	O
result	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
the	O
result	O
on	O
my	O
machine	O
is	O
:	O
/	O
a	O
/	O
/	O
b	O
/	O
/	O
c	O
/	O
/	O
d	O
/	O
/	O
e	O
/	O
/	O
f	O
What	O
'	O
s	O
wrong	O
here	O
?	O
BTW	O
:	O
using	O
(	O
the	O
preferred	O
)	O
.	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
yields	O
the	O
same	O
result	O
a	O
/	O
b	O
/	O
c	O
/	O
d	O
/	O
e	O
/	O
f	O
for	O
sequential	O
and	O
parallel	O
execution	O
.	O
JVM	O
details	O
:	O
#	O
pre	O
Question	O
-	O
29333689	O
The	O
following	O
is	O
taken	O
from	O
a	O
job	O
interview	O
:	O
#	O
blockquote	O
I	O
thought	O
about	O
using	O
an	O
HashSet	B-api_mention
,	O
but	O
it	O
might	O
complicate	O
everything	O
.	O
.	O
.	O
Any	O
ideas	O
of	O
a	O
simple	O
solution	O
?	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173110	O
Flipping	O
the	O
limit	O
and	O
the	O
filter	O
clauses	O
has	O
different	O
behaviors	O
.	O
If	O
you	O
put	O
the	O
limit	O
first	O
,	O
the	O
stream	O
will	O
first	O
generate	O
10	O
integers	O
[	O
1	O
.	O
.	O
10	O
]	O
,	O
and	O
then	O
filter	O
them	O
leaving	O
only	O
those	O
smaller	O
than	O
5	O
.	O
In	O
the	O
original	O
ordering	O
,	O
with	O
the	O
filter	O
applied	O
first	O
,	O
integers	O
are	O
generated	O
and	O
filtered	O
until	O
you	O
reach	O
10	O
elements	O
.	O
This	O
isn	O
'	O
t	O
an	O
infinite	O
operator	O
,	O
as	O
i	O
in	O
the	O
supplier	O
will	O
eventually	O
overflow	O
,	O
but	O
it	O
will	O
take	O
a	O
while	O
,	O
especially	O
on	O
a	O
slow	O
computer	O
,	O
to	O
reach	O
MAX	O
_	O
INT	O
.	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673356	O
#	O
pre	O
Generally	O
speaking	O
,	O
when	O
you	O
have	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
write	O
anything	O
there	O
.	O
You	O
can	O
pass	O
this	O
output	O
stream	O
as	O
a	O
place	O
to	O
put	O
generated	O
PDF	O
to	O
your	O
generator	O
.	O
Also	O
,	O
if	O
you	O
know	O
what	O
file	O
type	O
you	O
are	O
sending	O
,	O
you	O
can	O
set	O
response	O
.	B-api_mention
setContentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
18647214	O
,	O
answer	O
-	O
18647232	O
I	O
would	O
just	O
do	O
this	O
.	O
It	O
basically	O
takes	O
the	O
minimum	O
between	O
100	O
(	O
the	O
max	O
health	O
)	O
and	O
what	O
the	O
health	O
would	O
be	O
with	O
15	O
extra	O
points	O
.	O
It	O
ensures	O
that	O
the	O
user	O
'	O
s	O
health	O
does	O
not	O
exceed	O
100	O
.	O
#	O
pre	O
To	O
ensure	O
that	O
hitpoints	O
do	O
not	O
drop	O
below	O
zero	O
,	O
you	O
can	O
use	O
a	O
similar	O
function	O
:	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
.	O
#	O
pre	O
Question	O
-	O
34250207	O
As	O
I	O
recall	O
,	O
before	O
Java	O
8	O
,	O
the	O
default	O
capacity	O
of	O
ArrayList	B-api_mention
was	O
10	O
.	O
Surprisingly	O
,	O
the	O
comment	O
on	O
the	O
default	O
(	O
void	O
)	O
constructor	O
still	O
says	O
:	O
Constructs	O
an	O
empty	O
list	O
with	O
an	O
initial	O
capacity	O
of	O
ten	O
.	O
From	O
ArrayList	O
.	O
java	O
:	O
#	O
pre	O
Question	O
-	O
29333689	O
,	O
answer	O
-	O
29337734	O
My	O
intuition	O
in	O
Python	O
is	O
to	O
use	O
the	O
collections	O
.	O
Counter	O
as	O
a	O
multiset	O
:	O
#	O
pre	O
So	O
we	O
have	O
a	O
list	O
of	O
integers	O
from	O
0	O
-	O
99	O
twice	O
except	O
for	O
66	O
.	O
#	O
pre	O
Which	O
gets	O
the	O
least	O
common	O
(	O
last	O
item	O
)	O
from	O
a	O
list	O
sorted	O
by	O
frequency	O
.	O
Such	O
a	O
function	O
would	O
be	O
:	O
#	O
pre	O
And	O
usage	O
:	O
#	O
pre	O
This	O
is	O
a	O
generalized	O
solution	O
that	O
works	O
for	O
any	O
number	O
of	O
items	O
.	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
5374346	O
What	O
is	O
happening	O
is	O
that	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
creating	O
an	O
Object	B-api_mention
[	O
]	O
rather	O
than	O
a	O
String	B-api_mention
[	O
]	O
and	O
hence	O
the	O
typecast	O
is	O
failing	O
.	O
The	O
correct	O
code	O
would	O
be	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
even	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
more	O
details	O
,	O
refer	O
to	O
the	O
javadocs	O
for	O
the	O
two	O
overloads	O
of	O
List	B-api_mention
.	I-api_mention
toArray	I-api_mention
.	O
(	O
From	O
a	O
technical	O
perspective	O
,	O
the	O
reason	O
for	O
this	O
API	O
behaviour	O
/	O
design	O
is	O
that	O
an	O
implementation	O
of	O
the	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	I-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
no	O
information	O
of	O
what	O
the	O
<	O
T	O
>	O
is	O
at	O
runtime	O
.	O
All	O
it	O
knows	O
is	O
that	O
the	O
raw	O
element	O
type	O
is	O
Object	B-api_mention
.	O
By	O
contrast	O
,	O
in	O
the	O
other	O
case	O
,	O
the	O
array	O
parameter	O
gives	O
the	O
base	O
type	O
of	O
the	O
array	O
.	O
(	O
If	O
the	O
supplied	O
array	O
is	O
big	O
enough	O
,	O
it	O
is	O
used	O
.	O
Otherwise	O
a	O
new	O
array	O
of	O
the	O
same	O
type	O
and	O
a	O
larger	O
size	O
will	O
be	O
allocated	O
and	O
returned	O
as	O
the	O
result	O
.	O
)	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16636899	O
I	O
feel	O
that	O
I	O
need	O
to	O
extend	O
my	O
comment	O
a	O
bit	O
.	O
.	O
.	O
About	O
paradigm	O
\	O
style	O
That	O
'	O
s	O
probably	O
the	O
most	O
notable	O
aspect	O
.	O
FP	O
became	O
popular	O
due	O
to	O
what	O
you	O
can	O
get	O
avoiding	O
side	O
-	O
effects	O
.	O
I	O
won	O
'	O
t	O
delve	O
deep	O
into	O
what	O
pros	O
\	O
cons	O
you	O
can	O
get	O
from	O
this	O
,	O
since	O
this	O
is	O
not	O
related	O
to	O
the	O
question	O
.	O
However	O
,	O
I	O
will	O
say	O
that	O
the	O
iteration	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
inspired	O
by	O
FP	O
and	O
rather	O
result	O
of	O
bringing	O
more	O
FP	O
to	O
Java	O
(	O
ironically	O
,	O
I	O
'	O
d	O
say	O
that	O
there	O
is	O
no	O
much	O
use	O
for	O
forEach	B-api_mention
in	O
pure	O
FP	O
,	O
since	O
it	O
does	O
nothing	O
except	O
introducing	O
side	O
-	O
effects	O
)	O
.	O
In	O
the	O
end	O
I	O
would	O
say	O
that	O
it	O
is	O
rather	O
a	O
matter	O
of	O
taste	O
\	O
style	O
\	O
paradigm	O
you	O
are	O
currently	O
writing	O
in	O
.	O
About	O
parallelism	O
.	O
From	O
performance	O
point	O
of	O
view	O
there	O
is	O
no	O
promised	O
notable	O
benefits	O
from	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
over	O
foreach	O
(	O
.	O
.	O
.	O
)	O
.	O
According	O
to	O
official	O
docs	O
on	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
:	O
#	O
blockquote	O
.	O
.	O
.	O
i	O
.	O
e	O
.	O
docs	O
pretty	O
much	O
clear	O
that	O
there	O
will	O
be	O
no	O
implicit	O
parallelism	O
.	O
Adding	O
one	O
would	O
be	O
LSP	O
violation	O
.	O
Now	O
,	O
there	O
are	O
"	O
parallell	O
collections	O
"	O
that	O
are	O
promised	O
in	O
Java	O
8	O
,	O
but	O
to	O
work	O
with	O
those	O
you	O
need	O
to	O
me	O
more	O
explicit	O
and	O
put	O
some	O
extra	O
care	O
to	O
use	O
them	O
(	O
see	O
mschenk74	O
'	O
s	O
answer	O
for	O
example	O
)	O
.	O
BTW	O
:	O
in	O
this	O
case	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
be	O
used	O
,	O
and	O
it	O
doesn	O
'	O
t	O
guarantee	O
that	O
actual	O
work	O
will	O
be	O
done	O
in	O
parallell	O
(	O
depends	O
on	O
underlying	O
collection	O
)	O
.	O
UPDATE	O
:	O
might	O
be	O
not	O
that	O
obvious	O
and	O
a	O
little	O
stretched	O
at	O
a	O
glance	O
but	O
there	O
is	O
another	O
facet	O
of	O
style	O
and	O
readability	O
perspective	O
.	O
First	O
of	O
all	O
-	O
plain	O
old	O
forloops	O
are	O
plain	O
and	O
old	O
.	O
Everybody	O
already	O
knows	O
them	O
.	O
Second	O
,	O
and	O
more	O
important	O
-	O
you	O
probably	O
want	O
to	O
use	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
only	O
with	O
one	O
-	O
liner	O
lambdas	O
.	O
If	O
"	O
body	O
"	O
gets	O
heavier	O
-	O
they	O
tend	O
to	O
be	O
not	O
-	O
that	O
readable	O
.	O
You	O
have	O
2	O
options	O
from	O
here	O
-	O
use	O
inner	O
classes	O
(	O
yuck	O
)	O
or	O
use	O
plain	O
old	O
forloop	O
.	O
People	O
often	O
gets	O
annoyed	O
when	O
they	O
see	O
the	O
same	O
things	O
(	O
iteratins	O
over	O
collections	O
)	O
being	O
done	O
various	O
vays	O
/	O
styles	O
in	O
the	O
same	O
codebase	O
,	O
and	O
this	O
seems	O
to	O
be	O
the	O
case	O
.	O
Again	O
,	O
this	O
might	O
or	O
might	O
not	O
be	O
an	O
issue	O
.	O
Depends	O
on	O
people	O
working	O
on	O
code	O
.	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673375	O
You	O
should	O
be	O
able	O
to	O
write	O
the	O
file	O
on	O
the	O
response	O
directly	O
.	O
Something	O
like	O
#	O
pre	O
and	O
then	O
write	O
the	O
file	O
as	O
a	O
binary	O
stream	O
on	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Remember	O
to	O
do	O
response	O
.	B-api_mention
flush	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
at	O
the	O
end	O
and	O
that	O
should	O
do	O
it	O
.	O
Question	O
-	O
26318569	O
I	O
am	O
getting	O
following	O
exception	O
while	O
running	O
the	O
tests	O
.	O
I	O
am	O
using	O
Mockito	B-api_mention
for	O
mocking	O
.	O
The	O
hints	O
mentioned	O
by	O
Mockito	B-api_mention
library	O
are	O
not	O
helping	O
.	O
#	O
pre	O
Test	O
Code	O
from	O
DomainTestFactory	O
.	O
When	O
I	O
run	O
the	O
following	O
test	O
,	O
I	O
see	O
the	O
exception	O
#	O
pre	O
Question	O
-	O
31419029	O
I	O
'	O
ve	O
tried	O
to	O
build	O
my	O
own	O
Map	B-api_mention
to	O
increase	O
the	O
performance	O
for	O
a	O
special	O
environment	O
,	O
and	O
I	O
realized	O
something	O
pretty	O
interesting	O
:	O
Creating	O
a	O
new	O
Hashmap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
faster	O
than	O
new	O
Object	B-api_mention
[	I-api_mention
2000	I-api_mention
]	I-api_mention
-	O
no	O
matter	O
in	O
which	O
order	O
I	O
execute	O
these	O
commands	O
.	O
That	O
'	O
s	O
pretty	O
confusing	O
to	O
me	O
,	O
esp	O
.	O
because	O
the	O
Hashmap	B-api_mention
constructor	O
contains	O
a	O
table	O
=	O
new	O
Entry	O
[	O
capacity	O
]	O
,	O
according	O
to	O
this	O
.	O
Is	O
there	O
something	O
wrong	O
with	O
my	O
testbench	O
?	O
#	O
pre	O
I	O
'	O
d	O
love	O
to	O
see	O
the	O
results	O
of	O
testing	O
on	O
another	O
computer	O
.	O
I	O
'	O
ve	O
got	O
no	O
clue	O
why	O
creating	O
a	O
HashMap	B-api_mention
is	O
10	O
times	O
faster	O
than	O
creating	O
a	O
Object	B-api_mention
[	I-api_mention
]	I-api_mention
.	O
Question	O
-	O
18666710	O
,	O
answer	O
-	O
18792306	O
An	O
important	O
feature	O
of	O
parametric	O
types	O
is	O
the	O
ability	O
to	O
write	O
polymorphic	O
algorithms	O
,	O
i	O
.	O
e	O
.	O
algorithms	O
that	O
operate	O
on	O
a	O
data	O
structure	O
regardless	O
of	O
its	O
parameter	O
value	O
,	O
such	O
as	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
With	O
generics	O
,	O
that	O
'	O
s	O
done	O
with	O
wildcard	O
types	O
:	O
<	O
E	O
extends	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
>	O
void	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
To	O
be	O
truly	O
useful	O
,	O
wildcard	O
types	O
require	O
wildcard	O
capture	O
,	O
and	O
that	O
requires	O
the	O
notion	O
of	O
a	O
type	O
parameter	O
.	O
None	O
of	O
that	O
was	O
available	O
at	O
the	O
time	O
arrays	O
were	O
added	O
to	O
Java	O
,	O
and	O
makings	O
arrays	O
of	O
reference	O
type	O
covariant	O
permitted	O
a	O
far	O
simpler	O
way	O
to	O
permit	O
polymorphic	O
algorithms	O
:	O
void	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
,	O
that	O
simplicity	O
opened	O
a	O
loophole	O
in	O
the	O
static	O
type	O
system	O
:	O
#	O
pre	O
requiring	O
a	O
runtime	O
check	O
of	O
every	O
write	O
access	O
to	O
an	O
array	O
of	O
reference	O
type	O
.	O
In	O
a	O
nutshell	O
,	O
the	O
newer	O
approach	O
embodied	O
by	O
generics	O
makes	O
the	O
type	O
system	O
more	O
complex	O
,	O
but	O
also	O
more	O
statically	O
type	O
safe	O
,	O
while	O
the	O
older	O
approach	O
was	O
simpler	O
,	O
and	O
less	O
statically	O
type	O
safe	O
.	O
The	O
designers	O
of	O
the	O
language	O
opted	O
for	O
the	O
simpler	O
approach	O
,	O
having	O
more	O
important	O
things	O
to	O
do	O
than	O
closing	O
a	O
small	O
loophole	O
in	O
the	O
type	O
system	O
that	O
rarely	O
causes	O
problems	O
.	O
Later	O
,	O
when	O
Java	O
was	O
established	O
,	O
and	O
the	O
pressing	O
needs	O
taken	O
care	O
of	O
,	O
they	O
had	O
the	O
resources	O
to	O
do	O
it	O
right	O
for	O
generics	O
(	O
but	O
changing	O
it	O
for	O
arrays	O
would	O
have	O
broken	O
existing	O
Java	O
programs	O
)	O
.	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
24895623	O
First	O
of	O
all	O
,	O
the	O
place	O
in	O
your	O
code	O
where	O
you	O
are	O
initializing	O
(	O
i	O
.	O
e	O
.	O
assigning	O
for	O
the	O
first	O
time	O
)	O
foo	O
is	O
here	O
:	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
foo	O
is	O
an	O
object	O
(	O
with	O
type	O
List	O
)	O
so	O
it	O
is	O
a	O
reference	O
type	O
,	O
not	O
a	O
value	O
type	O
(	O
like	O
int	O
)	O
.	O
As	O
such	O
,	O
it	O
holds	O
a	O
reference	O
to	O
a	O
memory	O
location	O
(	O
e	O
.	O
g	O
.	O
0xA7D2A834	O
)	O
where	O
your	O
List	B-api_mention
elements	O
are	O
stored	O
.	O
Lines	O
like	O
this	O
foo	O
.	O
add	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
Modification	O
-	O
1	O
do	O
not	O
change	O
the	O
value	O
of	O
foo	O
(	O
which	O
,	O
again	O
,	O
is	O
just	O
a	O
reference	O
to	O
a	O
memory	O
location	O
)	O
.	O
Instead	O
,	O
they	O
just	O
add	O
elements	O
into	O
that	O
referenced	O
memory	O
location	O
.	O
To	O
violate	O
the	O
final	O
keyword	O
,	O
you	O
would	O
have	O
to	O
try	O
to	O
re	O
-	O
assign	O
foo	O
as	O
follows	O
again	O
:	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
That	O
would	O
give	O
you	O
a	O
compilation	O
error	O
.	O
Now	O
,	O
with	O
that	O
out	O
of	O
the	O
way	O
,	O
think	O
about	O
what	O
happens	O
when	O
you	O
add	O
the	O
static	O
keyword	O
.	O
When	O
you	O
do	O
NOT	O
have	O
the	O
static	O
keyword	O
,	O
each	O
object	O
that	O
instantiates	O
the	O
class	O
has	O
its	O
own	O
copy	O
of	O
foo	O
.	O
Therefore	O
,	O
the	O
constructor	O
assigns	O
a	O
value	O
to	O
a	O
blank	O
,	O
fresh	O
copy	O
of	O
the	O
foo	O
variable	O
,	O
which	O
is	O
perfectly	O
fine	O
.	O
However	O
,	O
when	O
you	O
DO	O
have	O
the	O
static	O
keyword	O
,	O
only	O
one	O
foo	O
exists	O
in	O
memory	O
that	O
is	O
associated	O
with	O
the	O
class	O
.	O
If	O
you	O
were	O
to	O
create	O
two	O
or	O
more	O
objects	O
,	O
the	O
constructor	O
would	O
be	O
attempting	O
to	O
re	O
-	O
assign	O
that	O
one	O
foo	O
each	O
time	O
,	O
violating	O
the	O
final	O
keyword	O
.	O
Question	O
-	O
13744450	O
The	O
interviewer	O
asked	O
me	O
:	O
#	O
blockquote	O
I	O
wasn	O
'	O
t	O
aware	O
of	O
these	O
terms	O
.	O
So	O
,	O
when	O
I	O
came	O
back	O
to	O
home	O
,	O
then	O
I	O
started	O
looking	O
into	O
Google	O
about	O
Observer	B-api_mention
and	O
Observable	B-api_mention
and	O
found	O
some	O
point	O
from	O
different	O
resources	O
:	O
#	O
blockquote	O
I	O
found	O
this	O
example	O
:	O
#	O
pre	O
But	O
I	O
'	O
m	O
still	O
unable	O
to	O
figure	O
out	O
why	O
do	O
we	O
need	O
Observer	B-api_mention
and	O
Observable	B-api_mention
?	O
What	O
are	O
the	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
for	O
?	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
22502206	O
When	O
reading	O
this	O
question	O
one	O
can	O
get	O
the	O
impression	O
,	O
that	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
in	O
combination	O
with	O
lambda	O
expressions	O
is	O
a	O
shortcut	O
/	O
replacement	O
for	O
writing	O
a	O
traditional	O
for	O
-	O
each	O
loop	O
.	O
This	O
is	O
simply	O
not	O
true	O
.	O
This	O
code	O
from	O
the	O
OP	O
:	O
joins	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
is	O
not	O
intended	O
as	O
a	O
shortcut	O
for	O
writing	O
#	O
pre	O
and	O
should	O
certainly	O
not	O
be	O
used	O
in	O
this	O
way	O
.	O
Instead	O
it	O
is	O
intended	O
as	O
a	O
shortcut	O
(	O
although	O
it	O
is	O
not	O
exactly	O
the	O
same	O
)	O
for	O
writing	O
#	O
pre	O
And	O
it	O
is	O
as	O
a	O
replacement	O
for	O
the	O
following	O
Java	O
7	O
code	O
:	O
#	O
pre	O
Replacing	O
the	O
body	O
of	O
a	O
loop	O
with	O
a	O
functional	O
interface	O
,	O
as	O
in	O
the	O
examples	O
above	O
,	O
makes	O
your	O
code	O
more	O
explicit	O
:	O
You	O
are	O
saying	O
that	O
(	O
1	O
)	O
the	O
body	O
of	O
the	O
loop	O
does	O
not	O
affect	O
the	O
surrounding	O
code	O
and	O
control	O
flow	O
,	O
and	O
(	O
2	O
)	O
the	O
body	O
of	O
the	O
loop	O
may	O
be	O
replaced	O
with	O
a	O
different	O
implementation	O
of	O
the	O
function	O
,	O
without	O
affecting	O
the	O
surrounding	O
code	O
.	O
Not	O
being	O
able	O
to	O
access	O
non	O
final	O
variables	O
of	O
the	O
outer	O
scope	O
is	O
not	O
a	O
deficit	O
of	O
functions	O
/	O
lambdas	O
,	O
it	O
is	O
a	O
feature	O
that	O
distinguishes	O
the	O
semantics	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
from	O
the	O
semantics	O
of	O
a	O
traditional	O
for	O
-	O
each	O
loop	O
.	O
Once	O
one	O
gets	O
used	O
to	O
the	O
syntax	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
,	O
it	O
makes	O
the	O
code	O
more	O
readable	O
,	O
because	O
you	O
immediately	O
get	O
this	O
additional	O
information	O
about	O
the	O
code	O
.	O
Traditional	O
for	O
-	O
each	O
loops	O
will	O
certainly	O
stay	O
good	O
practice	O
(	O
to	O
avoid	O
the	O
overused	O
term	O
"	O
best	O
practice	O
"	O
)	O
in	O
Java	O
.	O
But	O
this	O
doesn	O
'	O
t	O
mean	O
,	O
that	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
should	O
be	O
considered	O
bad	O
practice	O
or	O
bad	O
style	O
.	O
It	O
is	O
always	O
good	O
practice	O
,	O
to	O
use	O
the	O
right	O
tool	O
for	O
doing	O
the	O
job	O
,	O
and	O
this	O
includes	O
mixing	O
traditional	O
for	O
-	O
each	O
loops	O
with	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
,	O
where	O
it	O
makes	O
sense	O
.	O
Since	O
the	O
downsides	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
have	O
already	O
been	O
discussed	O
in	O
this	O
thread	O
,	O
here	O
are	O
some	O
reasons	O
,	O
why	O
you	O
might	O
probably	O
want	O
to	O
use	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
:	O
#	O
li	O
To	O
make	O
your	O
code	O
more	O
explicit	O
:	O
As	O
described	O
above	O
,	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
can	O
make	O
your	O
code	O
more	O
explicit	O
and	O
readable	O
in	O
some	O
situations	O
.	O
#	O
li	O
To	O
make	O
your	O
code	O
more	O
extensible	O
and	O
maintainable	O
:	O
Using	O
a	O
function	O
as	O
the	O
body	O
of	O
a	O
loop	O
allows	O
you	O
to	O
replace	O
this	O
function	O
with	O
different	O
implementations	O
(	O
see	O
Strategy	O
Pattern	O
)	O
.	O
You	O
could	O
e	O
.	O
g	O
.	O
easily	O
replace	O
the	O
lambda	O
expression	O
with	O
a	O
method	O
call	O
,	O
that	O
may	O
be	O
overwritten	O
by	O
sub	O
-	O
classes	O
:	O
joins	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Then	O
you	O
could	O
provide	O
default	O
strategies	O
using	O
an	O
enum	O
,	O
that	O
implements	O
the	O
functional	O
interface	O
.	O
This	O
not	O
only	O
makes	O
your	O
code	O
more	O
extensible	O
,	O
it	O
also	O
increases	O
maintainability	O
because	O
it	O
decouples	O
the	O
loop	O
implementation	O
from	O
the	O
loop	O
declaration	O
.	O
#	O
li	O
To	O
make	O
your	O
code	O
more	O
debuggable	O
:	O
Seperating	O
the	O
loop	O
implementation	O
from	O
the	O
declaration	O
can	O
also	O
make	O
debugging	O
more	O
easy	O
,	O
because	O
you	O
could	O
have	O
a	O
specialized	O
debug	O
implementation	O
,	O
that	O
prints	O
out	O
debug	O
messages	O
,	O
without	O
the	O
need	O
to	O
clutter	O
your	O
main	O
code	O
with	O
if	O
(	O
args	O
)	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
debug	O
implementation	O
could	O
e	O
.	O
g	O
.	O
be	O
a	O
delegate	O
,	O
that	O
decorates	O
the	O
actual	O
function	O
implementation	O
.	O
#	O
li	O
To	O
optimize	O
performance	O
-	O
critical	O
code	O
:	O
Contrary	O
to	O
some	O
of	O
the	O
assertions	O
in	O
this	O
thread	O
,	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
does	O
already	O
provide	O
better	O
performance	O
than	O
a	O
traditional	O
for	O
-	O
each	O
loop	O
,	O
at	O
least	O
when	O
using	O
ArrayList	B-api_mention
and	O
running	O
Hotspot	O
in	O
"	O
-	O
client	O
"	O
mode	O
.	O
While	O
this	O
performance	O
boost	O
is	O
small	O
and	O
negligible	O
for	O
most	O
use	O
cases	O
,	O
there	O
are	O
situations	O
,	O
where	O
this	O
extra	O
performance	O
can	O
make	O
a	O
difference	O
.	O
E	O
.	O
g	O
.	O
library	O
maintainers	O
will	O
certainly	O
want	O
to	O
evaluate	O
,	O
if	O
some	O
of	O
their	O
existing	O
loop	O
implementations	O
should	O
be	O
replaced	O
with	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
.	O
To	O
back	O
this	O
statement	O
up	O
with	O
facts	O
,	O
I	O
have	O
done	O
some	O
micro	O
-	O
benchmarks	O
with	O
Caliper	O
.	O
Here	O
is	O
the	O
test	O
code	O
(	O
latest	O
Caliper	O
from	O
git	O
is	O
needed	O
)	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
results	O
:	O
#	O
li	O
Results	O
for	O
-	O
client	O
#	O
li	O
Results	O
for	O
-	O
server	O
When	O
running	O
with	O
"	O
-	O
client	O
"	O
,	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
outperforms	O
the	O
traditional	O
for	O
loop	O
over	O
an	O
ArrayList	B-api_mention
,	O
but	O
is	O
still	O
slower	O
than	O
directly	O
iterating	O
over	O
an	O
array	O
.	O
When	O
running	O
with	O
"	O
-	O
server	O
"	O
,	O
the	O
performance	O
of	O
all	O
approaches	O
is	O
about	O
the	O
same	O
.	O
#	O
li	O
To	O
provide	O
optional	O
support	O
for	O
parallel	O
execution	O
:	O
It	O
has	O
already	O
been	O
said	O
here	O
,	O
that	O
the	O
possibility	O
to	O
execute	O
the	O
functional	O
interface	O
of	O
Iterable	B-api_mention
#	I-api_mention
forEach	I-api_mention
in	O
parallel	O
using	O
streams	O
,	O
is	O
certainly	O
an	O
important	O
aspect	O
.	O
Since	O
Collection	B-api_mention
#	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
guarantee	O
,	O
that	O
the	O
loop	O
is	O
actually	O
executed	O
in	O
parallel	O
,	O
one	O
must	O
consider	O
this	O
an	O
optional	O
feature	O
.	O
By	O
iterating	O
over	O
your	O
list	O
with	O
list	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
you	O
explicitly	O
say	O
:	O
This	O
loop	O
supports	O
parallel	O
execution	O
,	O
but	O
it	O
does	O
not	O
depend	O
on	O
it	O
.	O
Again	O
,	O
this	O
is	O
a	O
feature	O
and	O
not	O
a	O
deficit	O
!	O
By	O
moving	O
the	O
decision	O
for	O
parallel	O
execution	O
away	O
from	O
your	O
actual	O
loop	O
implementation	O
,	O
you	O
allow	O
optional	O
optimization	O
of	O
your	O
code	O
,	O
without	O
affecting	O
the	O
code	O
itself	O
,	O
which	O
is	O
a	O
good	O
thing	O
.	O
Also	O
,	O
if	O
the	O
default	O
parallel	O
stream	O
implementation	O
does	O
not	O
fit	O
your	O
needs	O
,	O
no	O
one	O
is	O
preventing	O
you	O
from	O
providing	O
your	O
own	O
implementation	O
.	O
You	O
could	O
e	O
.	O
g	O
.	O
provide	O
an	O
optimized	O
collection	O
depending	O
on	O
the	O
underlying	O
operating	O
system	O
,	O
on	O
the	O
size	O
of	O
the	O
collection	O
,	O
on	O
the	O
number	O
of	O
cores	O
,	O
and	O
on	O
some	O
preference	O
settings	O
:	O
#	O
pre	O
The	O
nice	O
thing	O
here	O
is	O
,	O
that	O
your	O
loop	O
implementation	O
doesn	O
'	O
t	O
need	O
to	O
know	O
or	O
care	O
about	O
these	O
details	O
.	O
Question	O
-	O
26549659	O
Google	O
Guava	B-api_mention
has	O
a	O
predicate	O
that	O
always	O
returns	O
true	O
.	O
Does	O
Java	O
8	O
have	O
something	O
similar	O
for	O
its	O
Predicate	B-api_mention
?	O
I	O
know	O
I	O
could	O
use	O
(	O
foo	O
)	O
-	O
>	O
{	O
return	O
true	O
;	O
}	O
,	O
but	O
I	O
want	O
something	O
pre	O
-	O
made	O
,	O
analogous	O
to	O
Collections	B-api_mention
.	I-api_mention
emptySet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
5439600	O
As	O
an	O
alternative	O
to	O
trying	O
to	O
parse	O
the	O
string	O
and	O
catching	O
NumberFormatException	B-api_mention
,	O
you	O
could	O
use	O
a	O
regex	O
;	O
e	O
.	O
g	O
.	O
#	O
pre	O
This	O
is	O
likely	O
to	O
be	O
faster	O
,	O
especially	O
if	O
you	O
precompile	O
and	O
reuse	O
the	O
regex	O
.	O
However	O
,	O
the	O
catch	O
is	O
that	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
still	O
fail	O
if	O
str	O
represents	O
a	O
number	O
that	O
is	O
outside	O
range	O
of	O
legal	O
int	O
values	O
.	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032137	O
Unless	O
there	O
is	O
a	O
specific	O
optimization	O
that	O
checks	O
if	O
the	O
argument	O
passed	O
to	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
collection	O
itself	O
(	O
and	O
I	O
highly	O
doubt	O
that	O
such	O
an	O
optimization	O
is	O
there	O
)	O
it	O
will	O
be	O
significantly	O
slower	O
than	O
a	O
simple	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Apart	O
from	O
that	O
(	O
and	O
at	O
least	O
equally	O
important	O
)	O
:	O
arraylist	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
just	O
obtuse	O
,	O
confusing	O
code	O
.	O
It	O
is	O
a	O
very	O
backwards	O
way	O
of	O
saying	O
"	O
clear	O
this	O
collection	O
"	O
.	O
What	O
advantage	O
would	O
it	O
have	O
over	O
the	O
very	O
understandable	O
arraylist	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Question	O
-	O
16324831	O
,	O
answer	O
-	O
16324963	O
Note	O
:	O
everything	O
in	O
this	O
post	O
is	O
in	O
the	O
source	O
of	O
Java7	O
-	O
b147	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
goes	O
into	O
a	O
Sun	O
library	O
(	O
in	O
sun	B-api_mention
.	I-api_mention
misc	I-api_mention
.	I-api_mention
FloatingDecimal	I-api_mention
)	O
the	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
done	O
manually	O
in	O
the	O
Integer	B-api_mention
class	O
.	O
The	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
I	O
would	O
guess	O
there	O
are	O
two	O
different	O
authors	O
.	O
Question	O
-	O
4812570	O
,	O
answer	O
-	O
21765043	O
You	O
can	O
use	O
the	O
ExceptionUtils	B-api_mention
.	I-api_mention
getStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
from	O
Apache	O
Commons	O
3	O
class	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
commons	I-api_mention
.	I-api_mention
lang3	I-api_mention
.	I-api_mention
exception	I-api_mention
.	I-api_mention
ExceptionUtils	I-api_mention
.	O
#	O
a	O
Question	O
-	O
10904911	O
I	O
am	O
using	O
trying	O
to	O
use	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
but	O
I	O
think	O
I	O
am	O
doing	O
it	O
wrong	O
:	O
#	O
a	O
My	O
code	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
[	O
I	O
@	O
23fc4bec	O
Also	O
I	O
tried	O
printing	O
like	O
this	O
,	O
but	O
:	O
#	O
pre	O
I	O
took	O
this	O
code	O
out	O
of	O
bigger	O
and	O
more	O
complex	O
code	O
,	O
but	O
I	O
can	O
add	O
it	O
if	O
needed	O
.	O
But	O
this	O
should	O
give	O
general	O
information	O
.	O
I	O
am	O
looking	O
for	O
output	O
,	O
like	O
in	O
Oracle	O
'	O
s	O
documentation	O
:	O
#	O
blockquote	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
36242382	O
You	O
can	O
use	O
Predicates	O
from	O
Eclipse	O
Collections	B-api_mention
#	O
pre	O
If	O
you	O
can	O
'	O
t	O
change	O
the	O
strings	O
from	O
List	B-api_mention
:	O
#	O
pre	O
If	O
you	O
only	O
need	O
a	O
negation	O
of	O
String	B-api_mention
.	I-api_mention
isEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
can	O
also	O
use	O
StringPredicates	B-api_mention
.	I-api_mention
notEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Note	O
:	O
I	O
am	O
a	O
contributor	O
to	O
Eclipse	O
Collections	O
.	O
Question	O
-	O
5778658	O
,	O
answer	O
-	O
10768914	O
You	O
will	O
need	O
an	O
intermediate	O
class	O
which	O
will	O
buffer	O
between	O
.	O
Each	O
time	O
InputStream	B-api_mention
.	I-api_mention
read	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
the	O
buffering	O
class	O
will	O
fill	O
the	O
passed	O
in	O
byte	O
array	O
with	O
the	O
next	O
chunk	O
passed	O
in	O
from	O
OutputStream	B-api_mention
.	I-api_mention
write	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Since	O
the	O
sizes	O
of	O
the	O
chunks	O
may	O
not	O
be	O
the	O
same	O
,	O
the	O
adapter	O
class	O
will	O
need	O
to	O
store	O
a	O
certain	O
amount	O
until	O
it	O
has	O
enough	O
to	O
fill	O
the	O
read	O
buffer	O
and	O
/	O
or	O
be	O
able	O
to	O
store	O
up	O
any	O
buffer	O
overflow	O
.	O
This	O
article	O
has	O
a	O
nice	O
breakdown	O
of	O
a	O
few	O
different	O
approaches	O
to	O
this	O
problem	O
:	O
#	O
a	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32744190	O
There	O
is	O
no	O
actual	O
difference	O
in	O
the	O
functionality	O
between	O
the	O
2	O
version	O
'	O
s	O
loop	O
.	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
does	O
the	O
exact	O
same	O
thing	O
.	O
So	O
the	O
choice	O
to	O
use	O
it	O
or	O
not	O
may	O
not	O
necessarily	O
be	O
considered	O
a	O
mistake	O
.	O
It	O
is	O
left	O
up	O
to	O
the	O
developer	O
to	O
decide	O
when	O
it	O
comes	O
to	O
this	O
kind	O
of	O
micromanagement	O
.	O
There	O
are	O
2	O
separate	O
concerns	O
for	O
each	O
approach	O
:	O
#	O
li	O
using	O
the	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
makes	O
the	O
code	O
less	O
verbose	O
and	O
more	O
readable	O
.	O
#	O
li	O
looping	O
directly	O
in	O
the	O
HashMap	B-api_mention
code	O
(	O
like	O
version	O
8	O
)	O
peformance	O
wise	O
is	O
actually	O
a	O
better	O
option	O
.	O
While	O
the	O
overhead	O
that	O
inserting	O
the	O
Arrays	B-api_mention
class	O
is	O
negligible	O
it	O
may	O
become	O
less	O
so	O
when	O
it	O
comes	O
to	O
something	O
as	O
widespread	O
as	O
HashMap	B-api_mention
where	O
every	O
bit	O
of	O
performance	O
enhancement	O
has	O
a	O
large	O
effect	O
(	O
imagine	O
the	O
tiniest	O
footprint	O
reduce	O
of	O
a	O
HashMap	B-api_mention
in	O
fullblown	O
webapp	O
)	O
.	O
Take	O
into	O
consideration	O
the	O
fact	O
that	O
the	O
Arrays	B-api_mention
class	O
was	O
used	O
only	O
for	O
this	O
one	O
loop	O
.	O
The	O
change	O
is	O
small	O
enough	O
that	O
it	O
doesn	O
'	O
t	O
make	O
the	O
clear	O
method	O
less	O
readable	O
.	O
The	O
precise	O
reason	O
can	O
'	O
t	O
be	O
found	O
out	O
without	O
asking	O
the	O
developer	O
who	O
actually	O
did	O
this	O
,	O
however	O
i	O
suspect	O
it	O
'	O
s	O
either	O
a	O
mistake	O
or	O
a	O
small	O
enhancement	O
.	O
better	O
option	O
.	O
My	O
opinion	O
is	O
it	O
can	O
be	O
considered	O
an	O
enhancement	O
,	O
even	O
if	O
only	O
by	O
accident	O
.	O
Question	O
-	O
23114015	O
,	O
answer	O
-	O
23177907	O
This	O
was	O
not	O
an	O
omission	O
;	O
there	O
was	O
detailed	O
discussion	O
on	O
the	O
EG	O
list	O
in	O
June	O
of	O
2013	O
.	O
The	O
definitive	O
discussion	O
of	O
the	O
Expert	O
Group	O
is	O
rooted	O
at	O
this	O
thread	O
.	O
While	O
it	O
seemed	O
"	O
obvious	O
"	O
(	O
even	O
to	O
the	O
Expert	O
Group	O
,	O
initially	O
)	O
that	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
seemed	O
to	O
make	O
sense	O
on	O
Iterable	B-api_mention
,	O
the	O
fact	O
that	O
Iterable	B-api_mention
was	O
so	O
general	O
became	O
a	O
problem	O
,	O
because	O
the	O
obvious	O
signature	O
:	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
not	O
always	O
what	O
you	O
were	O
going	O
to	O
want	O
.	O
Some	O
things	O
that	O
were	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
would	O
rather	O
have	O
their	O
stream	O
method	O
return	O
an	O
IntStream	B-api_mention
,	O
for	O
example	O
.	O
But	O
putting	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
this	O
high	O
up	O
in	O
the	O
hierarchy	O
would	O
make	O
that	O
impossible	O
.	O
So	O
instead	O
,	O
we	O
made	O
it	O
really	O
easy	O
to	O
make	O
a	O
Stream	B-api_mention
from	O
an	O
Iterable	B-api_mention
,	O
by	O
providing	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
implementation	O
of	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
Collection	B-api_mention
is	O
just	O
:	O
#	O
pre	O
Any	O
client	O
can	O
get	O
the	O
stream	O
they	O
want	O
from	O
an	O
Iterable	O
with	O
:	O
Stream	B-api_mention
s	O
=	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
In	O
the	O
end	O
we	O
concluded	O
that	O
adding	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
Iterable	O
would	O
be	O
a	O
mistake	O
.	O
Question	O
-	O
30384955	O
,	O
answer	O
-	O
30385343	O
This	O
happens	O
because	O
of	O
the	O
way	O
capture	O
conversion	O
works	O
:	O
#	O
blockquote	O
Note	O
the	O
end	O
bit	O
.	O
So	O
,	O
what	O
this	O
means	O
is	O
that	O
,	O
given	O
a	O
type	O
like	O
this	O
:	O
#	O
pre	O
Only	O
"	O
outside	O
"	O
wildcards	O
are	O
captured	O
.	O
The	O
Map	O
key	O
wildcard	O
is	O
captured	O
,	O
but	O
the	O
List	O
element	O
wildcard	O
is	O
not	O
.	O
This	O
is	O
why	O
,	O
for	O
example	O
,	O
we	O
can	O
add	O
to	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
but	O
not	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
The	O
placement	O
of	O
the	O
wildcard	O
is	O
what	O
matters	O
.	O
Carrying	O
this	O
over	O
to	O
TbinList	O
,	O
if	O
we	O
have	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
the	O
wildcard	O
is	O
in	O
a	O
place	O
where	O
it	O
does	O
not	O
get	O
captured	O
,	O
but	O
if	O
we	O
have	O
a	O
TbinList	O
<	O
T	O
>	O
,	O
the	O
wildcard	O
is	O
in	O
a	O
place	O
where	O
it	O
gets	O
captured	O
.	O
As	O
I	O
alluded	O
to	O
in	O
the	O
comments	O
,	O
one	O
very	O
interesting	O
test	O
is	O
this	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
test3	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
We	O
get	O
this	O
error	O
:	O
#	O
pre	O
So	O
there	O
'	O
s	O
no	O
way	O
to	O
make	O
it	O
work	O
as	O
-	O
is	O
.	O
One	O
of	O
the	O
class	O
declarations	O
needs	O
to	O
be	O
changed	O
.	O
Additionally	O
,	O
think	O
about	O
it	O
this	O
way	O
.	O
Suppose	O
we	O
had	O
:	O
#	O
pre	O
And	O
since	O
a	O
wildcard	O
allows	O
subtyping	O
,	O
we	O
can	O
do	O
this	O
:	O
TbinList	O
<	O
T	O
>	O
test4	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
Should	O
we	O
be	O
able	O
to	O
add	O
a	O
Tbin	O
<	O
T	O
>	O
to	O
test4	O
?	O
No	O
,	O
this	O
would	O
be	O
heap	O
pollution	O
.	O
We	O
might	O
end	O
up	O
with	O
Derived2	O
s	O
floating	O
around	O
in	O
a	O
TbinList	O
<	O
T	O
>	O
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28319148	O
I	O
prefer	O
the	O
second	O
way	O
.	O
When	O
you	O
use	O
the	O
first	O
way	O
,	O
if	O
you	O
decide	O
to	O
use	O
a	O
parallel	O
stream	O
to	O
improve	O
performance	O
,	O
you	O
'	O
ll	O
have	O
no	O
control	O
over	O
the	O
order	O
in	O
which	O
the	O
elements	O
will	O
be	O
added	O
to	O
the	O
output	O
list	O
by	O
forEach	B-api_mention
.	O
When	O
you	O
use	O
toList	B-api_mention
,	O
the	O
Streams	O
API	O
will	O
preserve	O
the	O
order	O
even	O
if	O
you	O
use	O
a	O
parallel	O
stream	O
.	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
34295445	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
)	I-api_mention
We	O
use	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
extract	O
request	O
parameters	O
(	O
i	O
.	O
e	O
.	O
data	O
sent	O
by	O
posting	O
a	O
html	O
form	O
)	O
.	O
The	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
returns	O
String	B-api_mention
value	O
and	O
the	O
data	O
come	O
from	O
client	O
.	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
)	I-api_mention
We	O
use	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
an	O
object	O
added	O
to	O
the	O
request	O
scope	O
on	O
the	O
server	O
side	O
i	O
.	O
e	O
.	O
using	O
request	O
.	B-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
can	O
add	O
any	O
type	O
of	O
object	O
you	O
like	O
here	O
,	O
Strings	O
,	O
Custom	O
objects	O
,	O
in	O
fact	O
any	O
object	O
.	O
You	O
add	O
the	O
attribute	O
to	O
the	O
request	O
and	O
forward	O
the	O
request	O
to	O
another	O
resource	O
,	O
the	O
client	O
does	O
not	O
know	O
about	O
this	O
.	O
So	O
all	O
the	O
code	O
handling	O
this	O
would	O
typically	O
be	O
in	O
JSP	O
/	O
servlets	O
.	O
You	O
can	O
use	O
request	O
.	B-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
add	O
extra	O
-	O
information	O
and	O
forward	O
/	O
redirect	O
the	O
current	O
request	O
to	O
another	O
resource	O
.	O
For	O
example	O
,	O
consider	O
about	O
first	O
.	O
jsp	O
,	O
#	O
pre	O
and	O
second	O
.	O
jsp	O
:	O
#	O
pre	O
From	O
your	O
browser	O
,	O
run	O
first	O
.	O
jsp	O
?	O
CLIENT	O
=	O
you	O
and	O
the	O
output	O
on	O
your	O
browser	O
is	O
#	O
pre	O
The	O
basic	O
difference	O
between	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
that	O
the	O
first	O
method	O
extracts	O
a	O
(	O
serialized	O
)	O
Java	O
object	O
and	O
the	O
other	O
provides	O
a	O
String	B-api_mention
value	O
.	O
For	O
both	O
cases	O
a	O
name	O
is	O
given	O
so	O
that	O
its	O
value	O
(	O
be	O
it	O
string	O
or	O
a	O
java	O
bean	O
)	O
can	O
be	O
looked	O
up	O
and	O
extracted	O
.	O
Question	O
-	O
29328785	O
,	O
answer	O
-	O
29330741	O
It	O
'	O
s	O
not	O
so	O
hard	O
to	O
track	O
down	O
the	O
reason	O
for	O
the	O
odd	O
behavior	O
.	O
The	O
divide	O
call	O
goes	O
to	O
#	O
pre	O
This	O
,	O
internally	O
,	O
delegates	O
to	O
another	O
divide	O
method	O
,	O
based	O
on	O
the	O
rounding	O
mode	O
:	O
#	O
pre	O
In	O
this	O
case	O
,	O
the	O
last	O
call	O
applies	O
.	O
Note	O
that	O
the	O
intVal	O
(	O
which	O
is	O
a	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
)	O
is	O
passed	O
directly	O
to	O
this	O
method	O
as	O
the	O
first	O
argument	O
:	O
#	O
pre	O
Finally	O
,	O
the	O
path	O
to	O
the	O
second	O
divideAndRound	O
is	O
taken	O
here	O
,	O
again	O
passing	O
the	O
dividend	O
on	O
(	O
which	O
was	O
the	O
intVal	O
of	O
the	O
original	O
BigDecimal	B-api_mention
)	O
,	O
ending	O
up	O
with	O
this	O
code	O
:	O
#	O
pre	O
And	O
this	O
is	O
where	O
the	O
error	O
is	O
introduced	O
:	O
The	O
mdivididend	O
is	O
a	O
mutable	O
BigInteger	B-api_mention
,	O
that	O
was	O
created	O
as	O
a	O
mutable	O
view	O
on	O
the	O
mag	O
array	O
of	O
the	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
x	O
from	O
the	O
original	O
call	O
.	O
The	O
division	O
modifies	O
the	O
mag	O
field	O
,	O
and	O
thus	O
,	O
the	O
state	O
of	O
the	O
(	O
now	O
not	O
-	O
so	O
-	O
immutable	O
)	O
BigDecimal	B-api_mention
.	O
This	O
is	O
clearly	O
a	O
bug	O
in	O
the	O
implementation	O
of	O
one	O
of	O
the	O
divide	O
methods	O
.	O
I	O
already	O
started	O
tracking	O
the	O
change	O
sets	O
of	O
the	O
OpenJDK	O
,	O
but	O
have	O
not	O
yet	O
spotted	O
the	O
definite	O
culprit	O
.	O
(	O
Edit	O
:	O
See	O
updates	O
below	O
)	O
(	O
A	O
side	O
note	O
:	O
Calling	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
doing	O
the	O
division	O
does	O
not	O
really	O
avoid	O
,	O
but	O
only	O
hide	O
the	O
bug	O
:	O
It	O
causes	O
a	O
string	O
cache	O
of	O
the	O
correct	O
state	O
to	O
be	O
created	O
internally	O
.	O
The	O
right	O
value	O
is	O
printed	O
,	O
but	O
the	O
internal	O
state	O
is	O
still	O
wrong	O
-	O
which	O
is	O
concerning	O
,	O
to	O
say	O
the	O
least	O
.	O
.	O
.	O
)	O
#	O
blockquote	O
Question	O
-	O
34172978	O
#	O
pre	O
Counter	O
to	O
my	O
expectation	O
,	O
the	O
collect	O
call	O
never	O
returns	O
.	O
Setting	O
limit	O
before	O
filter	O
produces	O
the	O
expected	O
result	O
.	O
Why	O
?	O
Question	O
-	O
12575990	O
,	O
answer	O
-	O
12576219	O
A	O
Java	O
Date	B-api_mention
is	O
a	O
container	O
for	O
the	O
number	O
of	O
milliseconds	O
since	O
January	O
1	O
,	O
1970	O
,	O
00	O
:	O
00	O
:	O
00	O
GMT	O
.	O
When	O
you	O
use	O
something	O
like	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
Java	O
uses	O
Date	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
print	O
the	O
contents	O
.	O
The	O
only	O
way	O
to	O
change	O
it	O
is	O
to	O
override	O
Date	O
and	O
provide	O
your	O
own	O
implementation	O
of	O
Date	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Now	O
before	O
you	O
fire	O
up	O
your	O
IDE	O
and	O
try	O
this	O
,	O
I	O
wouldn	O
'	O
t	O
;	O
it	O
will	O
only	O
complicate	O
matters	O
.	O
You	O
are	O
better	O
off	O
formatting	O
the	O
date	O
to	O
the	O
format	O
you	O
want	O
to	O
use	O
(	O
or	O
display	O
)	O
.	O
What	O
you	O
can	O
do	O
,	O
is	O
format	O
the	O
date	O
.	O
#	O
pre	O
These	O
are	O
actually	O
the	O
same	O
date	O
,	O
represented	O
differently	O
.	O
Question	O
-	O
19998454	O
,	O
answer	O
-	O
19998652	O
This	O
is	O
being	O
described	O
in	O
this	O
article	O
.	O
Think	O
about	O
forEach	B-api_mention
of	O
Collections	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
…	O
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
Question	O
-	O
14526260	O
,	O
answer	O
-	O
14526289	O
just	O
use	O
File	B-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
pre	O
using	O
String	O
methods	O
:	O
#	O
pre	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32357149	O
Disclaimer	O
:	O
I	O
am	O
not	O
a	O
JDK	O
author	O
.	O
I	O
agree	O
that	O
it	O
'	O
s	O
correct	O
to	O
write	O
your	O
own	O
code	O
to	O
interfaces	O
,	O
but	O
if	O
you	O
'	O
re	O
going	O
return	O
a	O
mutable	O
collection	O
to	O
a	O
third	O
party	O
,	O
it	O
'	O
s	O
important	O
to	O
let	O
the	O
third	O
party	O
know	O
what	O
sort	O
of	O
List	B-api_mention
they	O
'	O
re	O
getting	O
back	O
.	O
LinkedList	B-api_mention
and	O
ArrayList	B-api_mention
are	O
very	O
different	O
,	O
performance	O
wise	O
,	O
for	O
various	O
operations	O
.	O
For	O
example	O
,	O
removing	O
the	O
first	O
element	O
of	O
an	O
ArrayList	B-api_mention
is	O
O	O
(	O
args	O
)	O
,	O
but	O
removing	O
the	O
first	O
element	O
of	O
a	O
LinkedList	B-api_mention
is	O
O	O
(	O
args	O
)	O
.	O
By	O
fully	O
specifying	O
the	O
return	O
type	O
,	O
the	O
JDK	O
authors	O
are	O
communicating	O
extra	O
information	O
,	O
in	O
unambiguous	O
code	O
,	O
about	O
what	O
sort	O
of	O
object	O
they	O
'	O
re	O
giving	O
back	O
to	O
you	O
,	O
so	O
you	O
can	O
write	O
your	O
code	O
to	O
use	O
this	O
method	O
properly	O
.	O
If	O
you	O
really	O
need	O
a	O
LinkedList	B-api_mention
,	O
you	O
know	O
that	O
you	O
have	O
to	O
specify	O
one	O
here	O
.	O
Finally	O
,	O
the	O
main	O
reason	O
to	O
code	O
to	O
an	O
interface	O
over	O
an	O
implementation	O
is	O
if	O
you	O
think	O
that	O
the	O
implementation	O
will	O
change	O
.	O
The	O
JDK	O
authors	O
probably	O
figure	O
they	O
are	O
never	O
going	O
to	O
change	O
this	O
method	O
;	O
it	O
'	O
s	O
never	O
going	O
to	O
return	O
a	O
LinkedList	B-api_mention
or	O
a	O
Collections	B-api_mention
.	I-api_mention
UnmodifiableList	I-api_mention
.	O
However	O
,	O
in	O
most	O
cases	O
,	O
you	O
would	O
probably	O
still	O
do	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
33635717	O
I	O
'	O
m	O
reading	O
up	O
about	O
Java	O
streams	O
and	O
discovering	O
new	O
things	O
as	O
I	O
go	O
along	O
.	O
One	O
of	O
the	O
new	O
things	O
I	O
found	O
was	O
the	O
peek	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
.	O
Almost	O
everything	O
I	O
'	O
ve	O
read	O
on	O
peek	O
says	O
it	O
should	O
be	O
used	O
to	O
debug	O
your	O
Streams	O
.	O
What	O
if	O
I	O
had	O
a	O
Stream	B-api_mention
where	O
each	O
Account	O
has	O
a	O
username	O
,	O
password	O
field	O
and	O
a	O
login	O
(	O
)	O
and	O
loggedIn	O
(	O
)	O
method	O
.	O
I	O
also	O
have	O
Consumer	O
<	O
T	O
>	O
login	O
=	O
account	O
-	O
>	O
account	O
.	O
login	O
(	O
args	O
)	O
;	O
and	O
Predicate	O
<	O
T	O
>	O
loggedIn	O
=	O
account	O
-	O
>	O
account	O
.	O
loggedIn	O
(	O
args	O
)	O
;	O
Why	O
would	O
this	O
be	O
so	O
bad	O
?	O
#	O
pre	O
Now	O
as	O
far	O
as	O
I	O
can	O
tell	O
this	O
does	O
exactly	O
what	O
it	O
'	O
s	O
intended	O
to	O
do	O
.	O
It	O
;	O
#	O
li	O
Takes	O
a	O
list	O
of	O
accounts	O
#	O
li	O
Tries	O
to	O
log	O
in	O
to	O
each	O
account	O
#	O
li	O
Filters	O
out	O
any	O
account	O
which	O
aren	O
'	O
t	O
logged	O
in	O
#	O
li	O
Collects	O
the	O
logged	O
in	O
accounts	O
into	O
a	O
new	O
list	O
What	O
is	O
the	O
downside	O
of	O
doing	O
something	O
like	O
this	O
?	O
Any	O
reason	O
I	O
shouldn	O
'	O
t	O
proceed	O
?	O
Lastly	O
,	O
if	O
not	O
this	O
solution	O
then	O
what	O
?	O
The	O
original	O
version	O
of	O
this	O
used	O
the	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
as	O
follows	O
;	O
#	O
pre	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
7520464	O
In	O
general	O
,	O
the	O
answer	O
to	O
your	O
question	O
is	O
"	O
yes	O
"	O
,	O
but	O
.	O
.	O
.	O
#	O
li	O
equals	B-api_mention
will	O
only	O
compare	O
what	O
it	O
is	O
written	O
to	O
compare	O
,	O
no	O
more	O
,	O
no	O
less	O
.	O
#	O
li	O
if	O
a	O
class	O
does	O
not	O
override	O
the	O
equals	O
method	O
,	O
then	O
it	O
defaults	O
to	O
the	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
closest	O
parent	O
class	O
that	O
has	O
overridden	O
this	O
method	O
.	O
#	O
li	O
If	O
no	O
parent	O
classes	O
have	O
provided	O
an	O
override	O
,	O
then	O
it	O
defaults	O
to	O
the	O
method	O
from	O
the	O
ultimate	O
parent	O
class	O
,	O
Object	B-api_mention
,	O
and	O
so	O
you	O
'	O
re	O
left	O
with	O
the	O
Object	B-api_mention
#	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Per	O
the	O
Object	O
API	O
this	O
is	O
the	O
same	O
as	O
=	O
=	O
;	O
that	O
is	O
,	O
it	O
returns	O
true	O
if	O
and	O
only	O
if	O
both	O
variables	O
refer	O
to	O
the	O
same	O
object	O
,	O
if	O
their	O
references	O
are	O
one	O
and	O
the	O
same	O
.	O
Thus	O
you	O
will	O
be	O
testing	O
for	O
object	O
equality	O
and	O
not	O
functional	O
equality	O
.	O
#	O
li	O
Always	O
remember	O
to	O
override	O
hashCode	B-api_mention
if	O
you	O
override	O
equals	O
so	O
as	O
not	O
to	O
"	O
break	O
the	O
contract	O
"	O
.	O
As	O
per	O
the	O
API	O
,	O
the	O
result	O
returned	O
from	O
the	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
two	O
objects	O
must	O
be	O
the	O
same	O
if	O
their	O
equals	O
methods	O
shows	O
that	O
they	O
are	O
equivalent	O
.	O
The	O
converse	O
is	O
not	O
necessarily	O
true	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846964	O
For	O
one	O
,	O
you	O
can	O
get	O
away	O
with	O
reference	O
sharing	O
.	O
A	O
new	O
HashMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
etc	O
will	O
require	O
an	O
allocated	O
object	O
,	O
and	O
possibly	O
some	O
extra	O
elements	O
to	O
hold	O
the	O
data	O
,	O
but	O
you	O
only	O
need	O
one	O
copy	O
of	O
an	O
immutable	O
empty	O
collection	O
(	O
list	O
,	O
set	O
,	O
map	O
,	O
or	O
any	O
other	O
such	O
)	O
.	O
This	O
makes	O
it	O
an	O
obvious	O
choice	O
when	O
a	O
method	O
you	O
'	O
re	O
calling	O
needs	O
to	O
accept	O
a	O
Map	B-api_mention
but	O
does	O
not	O
need	O
to	O
edit	O
it	O
.	O
I	O
suggest	O
checking	O
out	O
Josh	O
Bloch	O
'	O
s	O
Effective	O
Java	O
,	O
which	O
lists	O
some	O
very	O
nice	O
attributes	O
of	O
immutable	O
objects	O
(	O
including	O
thread	O
safety	O
)	O
.	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684935	O
If	O
you	O
want	O
to	O
convert	O
the	O
string	O
back	O
into	O
a	O
byte	O
array	O
you	O
will	O
need	O
to	O
use	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
or	O
equivalent	O
Python	O
function	O
)	O
and	O
this	O
will	O
allow	O
you	O
print	O
out	O
the	O
original	O
byte	O
array	O
.	O
Question	O
-	O
6652687	O
,	O
answer	O
-	O
6652772	O
Use	O
String	B-api_mention
#	I-api_mention
trim	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
or	O
String	B-api_mention
allRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
trim	O
both	O
the	O
end	O
.	O
For	O
left	O
trim	O
:	O
String	B-api_mention
leftRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
right	O
trim	O
:	O
String	B-api_mention
rightRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
30081520	O
I	O
am	O
aware	O
that	O
it	O
is	O
better	O
to	O
call	O
the	O
equals	O
method	O
over	O
using	O
the	O
=	O
=	O
operator	O
(	O
see	O
this	O
question	O
)	O
.	O
I	O
want	O
two	O
strings	O
to	O
compare	O
as	O
equal	O
if	O
they	O
are	O
both	O
null	O
or	O
if	O
they	O
represent	O
the	O
same	O
string	O
.	O
Unfortunately	O
the	O
equals	B-api_mention
method	O
will	O
throw	O
an	O
NPE	O
if	O
the	O
strings	O
are	O
null	O
.	O
My	O
code	O
is	O
currently	O
:	O
#	O
pre	O
This	O
is	O
inelegant	O
.	O
What	O
is	O
the	O
correct	O
way	O
to	O
perform	O
this	O
test	O
?	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
20130131	O
There	O
are	O
already	O
people	O
asked	O
the	O
same	O
on	O
the	O
mailing	O
list	O
☺	O
.	O
The	O
main	O
reason	O
is	O
Iterable	B-api_mention
also	O
has	O
a	O
re	O
-	O
iterable	O
semantic	O
,	O
while	O
Stream	B-api_mention
is	O
not	O
.	O
#	O
blockquote	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818753	O
There	O
are	O
two	O
main	O
uses	O
of	O
AtomicInteger	B-api_mention
:	O
#	O
li	O
As	O
an	O
atomic	O
counter	O
(	O
incrementAndGet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
etc	O
)	O
that	O
can	O
be	O
used	O
by	O
many	O
threads	O
concurrently	O
#	O
li	O
As	O
a	O
primitive	O
that	O
supports	O
compare	O
-	O
and	O
-	O
swap	O
instruction	O
(	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
to	O
implement	O
non	O
-	O
blocking	O
algorithms	O
.	O
Here	O
is	O
an	O
example	O
of	O
non	O
-	O
blocking	O
random	O
number	O
generator	O
from	O
Brian	O
G	O
ö	O
etz	O
'	O
s	O
Java	O
Concurrency	O
In	O
Practice	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
basically	O
works	O
almost	O
the	O
same	O
way	O
as	O
incrementAndGet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
performs	O
arbitrary	O
calculation	O
(	O
calculateNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
instead	O
of	O
increment	O
(	O
and	O
processes	O
the	O
result	O
before	O
return	O
)	O
.	O
Question	O
-	O
32046078	O
I	O
have	O
a	O
server	O
side	O
implemented	O
in	O
Scala	O
and	O
React	O
/	O
Flux	O
based	O
front	O
end	O
.	O
My	O
services	O
return	O
Futures	O
and	O
they	O
are	O
handled	O
within	O
Scalatra	O
'	O
s	O
AsyncResult	O
for	O
JSON	O
responses	O
.	O
For	O
isomorphic	O
/	O
server	O
side	O
rendering	O
setup	O
I	O
did	O
not	O
want	O
to	O
change	O
services	O
to	O
be	O
blocking	O
so	O
I	O
started	O
with	O
Scala	O
Future	O
-	O
>	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	I-api_mention
Function	I-api_mention
conversion	O
shown	O
here	O
.	O
But	O
the	O
dispatcher	O
in	O
Flux	O
would	O
like	O
to	O
have	O
JS	O
Promise	O
.	O
So	O
far	O
I	O
found	O
only	O
rather	O
complicated	O
sounding	O
way	O
around	O
this	O
Slides	O
68	O
-	O
81	O
Is	O
there	O
any	O
recommended	O
way	O
to	O
deal	O
with	O
this	O
Scala	O
Future	O
-	O
>	O
JS	O
Promise	O
conversion	O
?	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781189	O
The	O
only	O
int	O
value	O
for	O
which	O
it	O
works	O
is	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
It	O
'	O
s	O
because	O
integers	O
are	O
negated	O
using	O
the	O
two	O
'	O
s	O
complement	O
way	O
.	O
Using	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
you	O
see	O
that	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
10000000000000000000000000000000	O
Taking	O
the	O
negative	O
value	O
is	O
done	O
by	O
first	O
swapping	O
0	O
and	O
1	O
,	O
which	O
gives	O
01111111111111111111111111111111	O
and	O
by	O
adding	O
1	O
,	O
which	O
gives	O
10000000000000000000000000000000	O
As	O
you	O
can	O
see	O
in	O
the	O
link	O
I	O
gave	O
,	O
Wikipedia	O
mentions	O
the	O
problem	O
with	O
the	O
most	O
negative	O
numbers	O
and	O
specifies	O
it	O
'	O
s	O
the	O
sole	O
exception	O
:	O
#	O
blockquote	O
Of	O
course	O
you	O
have	O
the	O
same	O
phenomenon	O
for	O
Long	B-api_mention
.	I-api_mention
Min	I-api_mention
_	I-api_mention
Value	I-api_mention
if	O
you	O
store	O
it	O
in	O
a	O
long	O
variable	O
.	O
Note	O
that	O
this	O
is	O
only	O
due	O
to	O
choices	O
that	O
were	O
made	O
regarding	O
the	O
binary	O
storage	O
of	O
ints	O
in	O
Java	O
.	O
Another	O
(	O
bad	O
)	O
solution	O
could	O
for	O
example	O
have	O
been	O
to	O
negate	O
by	O
simply	O
changing	O
the	O
most	O
significant	O
bit	O
and	O
letting	O
the	O
other	O
bits	O
unchanged	O
,	O
this	O
would	O
have	O
avoided	O
this	O
problem	O
with	O
MIN	B-api_mention
_	I-api_mention
VALUE	I-api_mention
but	O
would	O
have	O
made	O
2	O
different	O
0	O
values	O
and	O
complicated	O
binary	O
arithmetic	O
(	O
how	O
would	O
you	O
have	O
incremented	O
for	O
example	O
?	O
)	O
.	O
Question	O
-	O
5071040	O
,	O
answer	O
-	O
22547954	O
Always	O
use	O
either	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Using	O
"	O
"	O
+	O
number	O
is	O
an	O
overhead	O
and	O
does	O
the	O
following	O
:	O
#	O
pre	O
Question	O
-	O
4709175	O
,	O
answer	O
-	O
4709892	O
Something	O
none	O
of	O
the	O
other	O
answers	O
have	O
covered	O
that	O
make	O
enums	O
particularly	O
powerful	O
are	O
the	O
ability	O
to	O
have	O
template	O
methods	O
.	O
Methods	O
can	O
be	O
part	O
of	O
the	O
base	O
enum	O
and	O
overridden	O
by	O
each	O
type	O
.	O
And	O
,	O
with	O
the	O
behavior	O
attached	O
to	O
the	O
enum	O
,	O
it	O
often	O
eliminates	O
the	O
need	O
for	O
if	O
-	O
else	O
constructs	O
or	O
switch	O
statements	O
as	O
this	O
blog	O
post	O
demonstrates	O
-	O
where	O
enum	O
.	O
method	O
(	O
args	O
)	O
does	O
what	O
originally	O
would	O
be	O
executed	O
inside	O
the	O
conditional	O
.	O
The	O
same	O
example	O
also	O
shows	O
the	O
use	O
of	O
static	O
imports	O
with	O
enums	O
as	O
well	O
producing	O
much	O
cleaner	O
DSL	O
like	O
code	O
.	O
Some	O
other	O
interesting	O
qualities	O
include	O
the	O
fact	O
that	O
enums	O
provide	O
implementation	O
for	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
implement	O
Serializable	B-api_mention
and	O
Comparable	B-api_mention
.	O
For	O
a	O
complete	O
rundown	O
of	O
all	O
that	O
enums	O
have	O
to	O
offer	O
I	O
highly	O
recommend	O
Bruce	O
Eckel	O
'	O
s	O
Thinking	O
in	O
Java	O
4th	O
edition	O
which	O
devotes	O
an	O
entire	O
chapter	O
to	O
the	O
topic	O
.	O
Particularly	O
illuminating	O
are	O
the	O
examples	O
involving	O
a	O
Rock	O
,	O
Paper	O
,	O
Scissors	O
(	O
i	O
.	O
e	O
.	O
RoShamBo	O
)	O
game	O
as	O
enums	O
.	O
Question	O
-	O
17828584	O
I	O
was	O
wondering	O
what	O
happens	O
when	O
you	O
try	O
to	O
catch	O
an	O
StackOverflowError	B-api_mention
and	O
came	O
up	O
with	O
the	O
following	O
method	O
:	O
#	O
pre	O
Now	O
my	O
question	O
:	O
Why	O
does	O
this	O
method	O
print	O
'	O
4	O
'	O
?	O
I	O
thought	O
maybe	O
it	O
was	O
because	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
needs	O
3	O
segments	O
on	O
the	O
call	O
stack	O
,	O
but	O
I	O
don	O
'	O
t	O
know	O
where	O
the	O
number	O
3	O
comes	O
from	O
.	O
When	O
you	O
look	O
at	O
the	O
source	O
code	O
(	O
and	O
bytecode	O
)	O
of	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
it	O
normally	O
would	O
lead	O
to	O
far	O
more	O
method	O
invocations	O
than	O
3	O
(	O
so	O
3	O
segments	O
on	O
the	O
call	O
stack	O
would	O
not	O
be	O
sufficient	O
)	O
.	O
If	O
it	O
'	O
s	O
because	O
of	O
optimizations	O
the	O
Hotspot	O
VM	O
applies	O
(	O
method	O
inlining	O
)	O
,	O
I	O
wonder	O
if	O
the	O
result	O
would	O
be	O
different	O
on	O
another	O
VM	O
.	O
Edit	O
:	O
As	O
the	O
output	O
seems	O
to	O
be	O
highly	O
JVM	O
specific	O
,	O
I	O
get	O
the	O
result	O
4	O
using	O
Java	O
(	O
TM	O
)	O
SE	O
Runtime	O
Environment	O
(	O
build	O
1	O
.	O
6	O
.	O
0	O
_	O
41	O
-	O
b02	O
)	O
Java	O
HotSpot	O
(	O
TM	O
)	O
64	O
-	O
Bit	O
Server	O
VM	O
(	O
build	O
20	O
.	O
14	O
-	O
b01	O
,	O
mixed	O
mode	O
)	O
Explanation	O
why	O
I	O
think	O
this	O
question	O
is	O
different	O
from	O
Understanding	O
java	O
stack	O
:	O
My	O
question	O
is	O
not	O
about	O
why	O
there	O
is	O
a	O
cnt	O
>	O
0	O
(	O
obviously	O
because	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
requires	O
stack	O
size	O
and	O
throws	O
another	O
StackOverflowError	B-api_mention
before	O
something	O
gets	O
printed	O
)	O
,	O
but	O
why	O
it	O
has	O
the	O
particular	O
value	O
of	O
4	O
,	O
respectively	O
0	O
,	O
3	O
,	O
8	O
,	O
55	O
or	O
something	O
else	O
on	O
other	O
systems	O
.	O
Question	O
-	O
19235606	O
,	O
answer	O
-	O
19235863	O
You	O
should	O
almost	O
certainly	O
never	O
have	O
to	O
deal	O
with	O
Spliterator	B-api_mention
as	O
a	O
user	O
;	O
it	O
should	O
only	O
be	O
necessary	O
if	O
you	O
'	O
re	O
writing	O
Collection	B-api_mention
types	O
yourself	O
and	O
also	O
intending	O
to	O
optimize	O
parallelized	O
operations	O
on	O
them	O
.	O
For	O
what	O
it	O
'	O
s	O
worth	O
,	O
a	O
Spliterator	B-api_mention
is	O
a	O
way	O
of	O
operating	O
over	O
the	O
elements	O
of	O
a	O
collection	O
in	O
a	O
way	O
that	O
it	O
'	O
s	O
easy	O
to	O
split	O
off	O
part	O
of	O
the	O
collection	O
,	O
e	O
.	O
g	O
.	O
because	O
you	O
'	O
re	O
parallelizing	O
and	O
want	O
one	O
thread	O
to	O
work	O
on	O
one	O
part	O
of	O
the	O
collection	O
,	O
one	O
thread	O
to	O
work	O
on	O
another	O
part	O
,	O
etc	O
.	O
You	O
should	O
essentially	O
never	O
be	O
saving	O
values	O
of	O
type	O
Stream	B-api_mention
to	O
a	O
variable	O
,	O
either	O
.	O
Stream	B-api_mention
is	O
sort	O
of	O
like	O
an	O
Iterator	B-api_mention
,	O
in	O
that	O
it	O
'	O
s	O
a	O
one	O
-	O
time	O
-	O
use	O
object	O
that	O
you	O
'	O
ll	O
almost	O
always	O
use	O
in	O
a	O
fluent	O
chain	O
,	O
as	O
in	O
the	O
Javadoc	O
example	O
:	O
int	O
sum	O
=	O
widgets	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
mapToInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sum	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Collector	B-api_mention
is	O
the	O
most	O
generalized	O
,	O
abstract	O
possible	O
version	O
of	O
a	O
"	O
reduce	O
"	O
operation	O
a	O
la	O
map	O
/	O
reduce	O
;	O
in	O
particular	O
,	O
it	O
needs	O
to	O
support	O
parallelization	O
and	O
finalization	O
steps	O
.	O
Examples	O
of	O
Collector	B-api_mention
s	O
include	O
:	O
#	O
li	O
summing	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
reducing	I-api_mention
(	O
args	O
)	O
#	O
li	O
StringBuilder	B-api_mention
appending	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
16635398	O
,	O
answer	O
-	O
25855691	O
TL	O
;	O
DR	O
:	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
the	O
fastest	O
.	O
I	O
felt	O
I	O
should	O
add	O
my	O
results	O
from	O
benchmarking	O
iteration	O
.	O
I	O
took	O
a	O
very	O
simple	O
approach	O
(	O
no	O
benchmarking	O
frameworks	O
)	O
and	O
benchmarked	O
5	O
different	O
methods	O
:	O
#	O
li	O
classic	O
for	O
#	O
li	O
classic	O
foreach	O
#	O
li	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
the	O
testing	O
procedure	O
and	O
parameters	O
#	O
pre	O
The	O
list	O
in	O
this	O
class	O
shall	O
be	O
iterated	O
over	O
and	O
have	O
some	O
doIt	O
(	O
args	O
)	O
applied	O
to	O
all	O
it	O
'	O
s	O
members	O
,	O
each	O
time	O
via	O
a	O
different	O
method	O
.	O
in	O
the	O
Main	O
class	O
I	O
run	O
the	O
tested	O
method	O
three	O
times	O
to	O
warm	O
up	O
the	O
JVM	O
.	O
I	O
then	O
run	O
the	O
test	O
method	O
1000	O
times	O
summing	O
the	O
time	O
it	O
takes	O
for	O
each	O
iteration	O
method	O
(	O
using	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
After	O
that	O
'	O
s	O
done	O
i	O
divide	O
that	O
sum	O
by	O
1000	O
and	O
that	O
'	O
s	O
the	O
result	O
,	O
average	O
time	O
.	O
example	O
:	O
#	O
pre	O
I	O
ran	O
this	O
on	O
a	O
i5	O
4	O
core	O
CPU	O
,	O
with	O
java	O
version	O
1	O
.	O
8	O
.	O
0	O
_	O
05	O
classic	O
for	O
#	O
pre	O
execution	O
time	O
:	O
4	O
.	O
21	O
ms	O
classic	O
foreach	O
#	O
pre	O
execution	O
time	O
:	O
5	O
.	O
95	O
ms	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
11	O
ms	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
2	O
.	O
79	O
ms	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
list	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
6	O
ms	O
Question	O
-	O
20358883	O
Is	O
there	O
a	O
Utility	B-api_mention
method	O
somewhere	O
that	O
can	O
do	O
this	O
in	O
1	O
line	O
?	O
I	O
can	O
'	O
t	O
find	O
it	O
anywhere	O
in	O
Collections	B-api_mention
,	O
or	O
List	B-api_mention
.	O
#	O
pre	O
I	O
don	O
'	O
t	O
want	O
to	O
re	O
-	O
invent	O
the	O
wheel	O
unless	O
I	O
plan	O
on	O
putting	O
fancy	O
rims	O
on	O
it	O
.	O
Well	O
.	O
.	O
.	O
the	O
type	O
can	O
be	O
T	O
,	O
and	O
not	O
String	B-api_mention
.	O
but	O
you	O
get	O
the	O
point	O
.	O
(	O
with	O
all	O
the	O
null	O
checking	O
,	O
safety	O
checks	O
.	O
.	O
.	O
etc	O
)	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28319221	O
Don	O
'	O
t	O
worry	O
about	O
any	O
performance	O
differences	O
,	O
they	O
'	O
re	O
going	O
to	O
be	O
minimal	O
in	O
this	O
case	O
normally	O
.	O
Method	O
2	O
is	O
preferable	O
because	O
#	O
li	O
it	O
doesn	O
'	O
t	O
require	O
mutating	O
a	O
collection	O
that	O
exists	O
outside	O
the	O
lambda	O
expression	O
,	O
#	O
li	O
it	O
'	O
s	O
more	O
readable	O
because	O
the	O
different	O
steps	O
that	O
are	O
performed	O
in	O
the	O
collection	O
pipeline	O
are	O
written	O
sequentially	O
(	O
first	O
a	O
filter	O
operation	O
,	O
then	O
a	O
map	O
operation	O
,	O
then	O
collecting	O
the	O
result	O
)	O
,	O
(	O
for	O
more	O
info	O
on	O
the	O
benefits	O
of	O
collection	O
pipelines	O
,	O
see	O
Martin	O
Fowler	O
'	O
s	O
excellent	O
article	O
)	O
#	O
li	O
you	O
can	O
easily	O
change	O
the	O
way	O
values	O
are	O
collected	O
by	O
replacing	O
the	O
Collector	B-api_mention
that	O
is	O
used	O
.	O
In	O
some	O
cases	O
you	O
may	O
need	O
to	O
write	O
your	O
own	O
Collector	B-api_mention
,	O
but	O
then	O
the	O
benefit	O
is	O
that	O
you	O
can	O
easily	O
reuse	O
that	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
39005452	O
The	O
best	O
post	O
I	O
'	O
ve	O
seen	O
on	O
the	O
topic	O
was	O
written	O
by	O
Daniel	O
Olszewski	O
and	O
can	O
be	O
found	O
at	O
#	O
a	O
.	O
While	O
others	O
mention	O
when	O
you	O
should	O
or	O
should	O
not	O
use	O
Optional	B-api_mention
,	O
this	O
post	O
actually	O
explains	O
why	O
.	O
Cross	O
-	O
posting	O
here	O
in	O
case	O
the	O
link	O
goes	O
down	O
:	O
#	O
blockquote	O
