Question	O
-	O
22463062	O
Java	O
8	O
added	O
a	O
new	O
API	O
for	O
working	O
with	O
dates	O
and	O
times	O
(	O
JSR	O
310	O
)	O
.	O
I	O
have	O
date	O
and	O
time	O
as	O
string	O
(	O
e	O
.	O
g	O
.	O
StringLiteral	B-api_mention
)	O
.	O
How	O
can	O
I	O
obtain	O
a	O
LocalDateTime	O
instance	O
from	O
the	O
given	O
string	O
?	O
After	O
I	O
finished	O
working	O
with	O
the	O
LocalDateTime	B-api_mention
object	O
:	O
How	O
can	O
I	O
then	O
convert	O
the	O
LocalDateTime	B-api_mention
instance	O
back	O
to	O
a	O
string	O
with	O
the	O
same	O
format	O
as	O
shown	O
above	O
?	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
13134221	O
Actually	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
new	O
thread	O
and	O
have	O
its	O
own	O
execution	O
scenario	O
.	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
asynchronously	O
,	O
which	O
changes	O
the	O
state	O
of	O
new	O
Thread	B-api_mention
to	O
Runnable	B-api_mention
.	O
But	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
create	O
any	O
new	O
thread	O
.	O
Instead	O
it	O
execute	O
the	O
run	O
method	O
in	O
the	O
current	O
running	O
thread	O
synchronously	O
.	O
If	O
you	O
are	O
using	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
then	O
you	O
are	O
not	O
using	O
the	O
features	O
of	O
multi	O
threading	O
at	O
all	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276463	O
If	O
all	O
of	O
the	O
streams	O
have	O
been	O
instantiated	O
then	O
closing	O
only	O
the	O
outermost	O
is	O
just	O
fine	O
.	O
The	O
documentation	O
on	O
Closeable	B-api_mention
interface	O
states	O
that	O
close	O
method	O
:	O
#	O
blockquote	O
The	O
releasing	O
system	O
resources	O
includes	O
closing	O
streams	O
.	O
It	O
also	O
states	O
that	O
:	O
#	O
blockquote	O
So	O
if	O
you	O
close	O
them	O
explicitly	O
afterwards	O
,	O
nothing	O
wrong	O
will	O
happen	O
.	O
Question	O
-	O
24609564	O
,	O
answer	O
-	O
24609841	O
If	O
you	O
will	O
read	O
comment	O
above	O
the	O
code	O
,	O
It	O
is	O
mentioned	O
that	O
.	O
.	O
.	O
If	O
the	O
caller	O
is	O
not	O
a	O
ForkJoinTask	B-api_mention
,	O
this	O
method	O
is	O
behaviorally	O
equivalent	O
to	O
#	O
pre	O
So	O
it	O
is	O
just	O
another	O
form	O
to	O
implement	O
above	O
code	O
in	O
else	O
part	O
.	O
.	O
.	O
!	O
!	O
In	O
Style	O
notes	O
it	O
is	O
mentioned	O
that	O
,	O
#	O
blockquote	O
And	O
if	O
you	O
will	O
see	O
implementation	O
of	O
ManagedLocker	B-api_mention
#	I-api_mention
isReleasable	I-api_mention
,	O
It	O
is	O
updating	O
the	O
lock	O
and	O
returns	O
true	O
if	O
blocking	O
is	O
unnecessary	O
.	O
Interpretation	O
:	O
Blank	O
while	O
loops	O
are	O
used	O
to	O
provide	O
an	O
interrupt	O
until	O
some	O
condition	O
reset	O
to	O
true	O
/	O
false	O
.	O
Here	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
is	O
a	O
blocker	O
/	O
interrupt	O
until	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
true	O
when	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
false	O
.	O
Loop	O
will	O
continue	O
execution	O
while	O
blocker	O
is	O
not	O
releasable	O
(	O
!	O
blocker	O
.	B-api_mention
isReleasable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
and	O
blocker	O
is	O
not	O
blocked	O
!	O
!	O
Execution	O
will	O
be	O
out	O
of	O
loop	O
as	O
soon	O
as	O
blocker	O
.	B-api_mention
block	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
set	O
to	O
true	O
.	O
Note	O
that	O
,	O
do	O
{	O
}	O
while	O
(	O
args	O
)	O
does	O
not	O
update	O
CAS	O
variable	O
,	O
but	O
it	O
guarantee	O
that	O
program	O
will	O
wait	O
until	O
variable	O
gets	O
updated	O
(	O
force	O
to	O
wait	O
until	O
variable	O
gets	O
updated	O
)	O
.	O
Question	O
-	O
5769669	O
,	O
answer	O
-	O
5769679	O
You	O
can	O
use	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
convert	O
a	O
String	B-api_mention
to	O
a	O
double	O
:	O
#	O
pre	O
For	O
your	O
case	O
it	O
looks	O
like	O
you	O
want	O
:	O
#	O
pre	O
Question	O
-	O
30217236	O
,	O
answer	O
-	O
30219144	O
Why	O
this	O
should	O
be	O
problem	O
in	O
the	O
first	O
place	O
is	O
kind	O
of	O
nebulous	O
to	O
me	O
.	O
I	O
suspect	O
you	O
'	O
ve	O
instead	O
misunderstood	O
something	O
about	O
the	O
ways	O
in	O
which	O
the	O
type	O
system	O
is	O
useful	O
.	O
What	O
can	O
we	O
do	O
with	O
a	O
<	O
T	O
>	O
void	O
x	O
(	O
args	O
)	O
?	O
Well	O
,	O
not	O
a	O
whole	O
lot	O
.	O
Inside	O
the	O
body	O
of	O
x	O
,	O
T	O
is	O
the	O
same	O
as	O
Object	B-api_mention
,	O
so	O
we	O
could	O
only	O
do	O
something	O
like	O
call	O
toString	O
on	O
a	O
and	O
b	O
to	O
print	O
them	O
.	O
There	O
'	O
s	O
really	O
no	O
practical	O
reason	O
a	O
and	O
b	O
must	O
have	O
the	O
same	O
type	O
.	O
Just	O
that	O
they	O
have	O
some	O
type	O
in	O
common	O
,	O
and	O
that	O
type	O
is	O
Object	B-api_mention
or	O
a	O
subtype	O
of	O
it	O
.	O
In	O
fact	O
,	O
there	O
'	O
s	O
no	O
clear	O
reason	O
why	O
<	O
T	O
>	O
void	O
x	O
(	O
args	O
)	O
actually	O
needs	O
to	O
be	O
generic	O
at	O
all	O
.	O
#	O
li	O
The	O
method	O
body	O
doesn	O
'	O
t	O
care	O
what	O
the	O
actual	O
types	O
of	O
a	O
and	O
b	O
are	O
because	O
it	O
couldn	O
'	O
t	O
use	O
them	O
anyway	O
.	O
#	O
li	O
The	O
call	O
site	O
doesn	O
'	O
t	O
care	O
what	O
the	O
actual	O
types	O
of	O
a	O
and	O
b	O
are	O
because	O
x	O
is	O
a	O
void	O
method	O
so	O
it	O
'	O
s	O
a	O
black	O
hole	O
.	O
It	O
'	O
s	O
more	O
typical	O
for	O
a	O
method	O
to	O
have	O
a	O
result	O
,	O
like	O
<	O
T	O
>	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Arrays	I-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
/	O
/	O
This	O
will	O
cause	O
a	O
compile	O
error	O
because	O
/	O
/	O
the	O
type	O
inferred	O
must	O
be	O
compatible	O
/	O
/	O
with	O
the	O
return	O
assignment	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
r	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
a	O
bound	O
:	O
#	O
pre	O
Or	O
a	O
bound	O
which	O
asserts	O
some	O
kind	O
of	O
relation	O
:	O
#	O
pre	O
Question	O
-	O
7693324	O
I	O
got	O
a	O
simple	O
question	O
in	O
Java	O
:	O
How	O
can	O
I	O
convert	O
a	O
String	B-api_mention
that	O
was	O
obtained	O
by	O
Long	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
long	O
?	O
Question	O
-	O
18410035	O
,	O
answer	O
-	O
37409771	O
In	O
Java	O
8	O
collection	O
classes	O
that	O
implement	O
Iterable	B-api_mention
(	O
for	O
example	O
all	O
lists	O
)	O
now	O
have	O
forEach	B-api_mention
method	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
above	O
example	O
makes	O
use	O
of	O
method	O
-	O
reference	O
introduced	O
in	O
Java	O
8	O
.	O
We	O
can	O
also	O
iterate	O
over	O
a	O
list	O
using	O
Stream	B-api_mention
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
advantage	O
with	O
later	O
option	O
is	O
that	O
we	O
can	O
also	O
make	O
use	O
of	O
parallel	O
streams	O
wherever	O
appropriate	O
.	O
If	O
the	O
objective	O
is	O
only	O
to	O
print	O
the	O
items	O
irrespective	O
of	O
the	O
order	O
then	O
we	O
can	O
use	O
parallel	O
stream	O
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
30081520	O
I	O
am	O
aware	O
that	O
it	O
is	O
better	O
to	O
call	O
the	O
equals	O
method	O
over	O
using	O
the	O
=	O
=	O
operator	O
(	O
see	O
this	O
question	O
)	O
.	O
I	O
want	O
two	O
strings	O
to	O
compare	O
as	O
equal	O
if	O
they	O
are	O
both	O
null	O
or	O
if	O
they	O
represent	O
the	O
same	O
string	O
.	O
Unfortunately	O
the	O
equals	B-api_mention
method	O
will	O
throw	O
an	O
NPE	O
if	O
the	O
strings	O
are	O
null	O
.	O
My	O
code	O
is	O
currently	O
:	O
#	O
pre	O
This	O
is	O
inelegant	O
.	O
What	O
is	O
the	O
correct	O
way	O
to	O
perform	O
this	O
test	O
?	O
Question	O
-	O
26684562	O
,	O
answer	O
-	O
26684710	O
Both	O
map	B-api_mention
and	O
flatMap	B-api_mention
can	O
be	O
applied	O
to	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
and	O
they	O
both	O
return	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
The	O
difference	O
is	O
that	O
the	O
map	B-api_mention
operation	O
produces	O
one	O
output	O
value	O
for	O
each	O
input	O
value	O
,	O
whereas	O
the	O
flatMap	B-api_mention
operation	O
produces	O
an	O
arbitrary	O
number	O
(	O
zero	O
or	O
more	O
)	O
values	O
for	O
each	O
input	O
value	O
.	O
This	O
is	O
reflected	O
in	O
the	O
arguments	O
to	O
each	O
operation	O
.	O
The	O
map	O
operation	O
takes	O
a	O
Function	O
,	O
which	O
is	O
called	O
for	O
each	O
value	O
in	O
the	O
input	O
stream	O
and	O
produces	O
one	O
result	O
value	O
,	O
which	O
is	O
sent	O
to	O
the	O
output	O
stream	O
.	O
The	O
flatMap	B-api_mention
operation	O
takes	O
a	O
function	O
that	O
conceptually	O
wants	O
to	O
consume	O
one	O
value	O
and	O
produce	O
an	O
arbitrary	O
number	O
of	O
values	O
.	O
However	O
,	O
in	O
Java	O
,	O
it	O
'	O
s	O
cumbersome	O
for	O
a	O
method	O
to	O
return	O
an	O
arbitrary	O
number	O
of	O
values	O
,	O
since	O
methods	O
can	O
return	O
only	O
zero	O
or	O
one	O
value	O
.	O
One	O
could	O
imagine	O
an	O
API	O
where	O
the	O
mapper	O
function	O
for	O
flatMap	B-api_mention
takes	O
a	O
value	O
and	O
returns	O
an	O
array	O
or	O
a	O
List	O
of	O
values	O
,	O
which	O
are	O
then	O
sent	O
to	O
the	O
output	O
.	O
Given	O
that	O
this	O
is	O
the	O
streams	O
library	O
,	O
a	O
particularly	O
apt	O
way	O
to	O
represent	O
an	O
arbitrary	O
number	O
of	O
return	O
values	O
is	O
for	O
the	O
mapper	O
function	O
itself	O
to	O
return	O
a	O
stream	O
!	O
The	O
values	O
from	O
the	O
stream	O
returned	O
by	O
the	O
mapper	O
are	O
drained	O
from	O
the	O
stream	O
and	O
are	O
passed	O
to	O
the	O
output	O
stream	O
.	O
The	O
"	O
clumps	O
"	O
of	O
values	O
returned	O
by	O
each	O
call	O
to	O
the	O
mapper	O
function	O
are	O
not	O
distinguished	O
at	O
all	O
in	O
the	O
output	O
stream	O
,	O
thus	O
the	O
output	O
is	O
said	O
to	O
have	O
been	O
"	O
flattened	O
.	O
"	O
Typical	O
use	O
is	O
for	O
the	O
mapper	O
function	O
of	O
flatMap	B-api_mention
to	O
return	O
Stream	B-api_mention
.	I-api_mention
empty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
it	O
wants	O
to	O
send	O
zero	O
values	O
,	O
or	O
something	O
like	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
it	O
wants	O
to	O
return	O
several	O
values	O
.	O
But	O
of	O
course	O
any	O
stream	O
can	O
be	O
returned	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923015	O
I	O
believe	O
the	O
reson	O
of	O
being	O
is	O
you	O
have	O
to	O
first	O
check	O
whether	O
or	O
not	O
Optional	B-api_mention
is	O
null	O
itself	O
and	O
then	O
try	O
to	O
evaluate	O
value	O
it	O
wraps	O
.	O
Too	O
many	O
unnecessary	O
validations	O
.	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33147610	O
a	O
<	O
b	O
and	O
a	O
-	O
b	O
<	O
0	O
can	O
mean	O
two	O
different	O
things	O
.	O
Consider	O
the	O
following	O
code	O
:	O
#	O
pre	O
When	O
run	O
,	O
this	O
will	O
only	O
print	O
a	O
-	O
b	O
<	O
0	O
.	O
What	O
happens	O
is	O
that	O
a	O
<	O
b	O
is	O
clearly	O
false	O
,	O
but	O
a	O
-	O
b	O
overflows	O
and	O
becomes	O
-	O
1	O
,	O
which	O
is	O
negative	O
.	O
Now	O
,	O
having	O
said	O
that	O
,	O
consider	O
that	O
the	O
array	O
has	O
a	O
length	O
that	O
is	O
really	O
close	O
to	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
The	O
code	O
in	O
ArrayList	B-api_mention
goes	O
like	O
this	O
:	O
#	O
pre	O
oldCapacity	O
is	O
really	O
close	O
to	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
so	O
newCapacity	O
(	O
which	O
is	O
oldCapacity	O
+	O
0	O
.	O
5	O
*	O
oldCapacity	O
)	O
might	O
overflow	O
and	O
become	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
(	O
i	O
.	O
e	O
.	O
negative	O
)	O
.	O
Then	O
,	O
subtracting	O
minCapacity	O
underflows	O
back	O
into	O
a	O
positive	O
number	O
.	O
This	O
check	O
ensures	O
that	O
the	O
if	O
is	O
not	O
executed	O
.	O
If	O
the	O
code	O
were	O
written	O
as	O
if	O
(	O
args	O
)	O
,	O
it	O
would	O
be	O
true	O
in	O
this	O
case	O
(	O
since	O
newCapacity	O
is	O
negative	O
)	O
so	O
the	O
newCapacity	O
would	O
be	O
forced	O
to	O
minCapacity	O
regardless	O
of	O
the	O
oldCapacity	O
.	O
This	O
overflow	O
case	O
is	O
handled	O
by	O
the	O
next	O
if	O
.	O
When	O
newCapacity	O
has	O
overflowed	O
,	O
this	O
will	O
be	O
true	O
:	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
is	O
defined	O
as	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
8	O
and	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
(	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
-	O
8	O
)	O
>	O
0	O
is	O
true	O
.	O
The	O
newCapacity	O
is	O
therefore	O
rightly	O
handled	O
:	O
hugeCapacity	O
method	O
returns	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
or	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
NB	O
:	O
this	O
is	O
what	O
the	O
/	O
/	O
overflow	O
-	O
conscious	O
code	O
comment	O
in	O
this	O
method	O
is	O
saying	O
.	O
Question	O
-	O
12862659	O
,	O
answer	O
-	O
12862662	O
use	O
the	O
second	O
argument	O
on	O
the	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
method	O
,	O
as	O
in	O
:	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
someMethod	O
(	O
args	O
)	O
Question	O
-	O
8725387	O
In	O
Java	O
there	O
are	O
the	O
SortedSet	B-api_mention
and	O
SortedMap	B-api_mention
interfaces	O
.	O
Both	O
belong	O
to	O
Java	O
'	O
s	O
standard	O
Collections	B-api_mention
framework	O
and	O
provide	O
a	O
sorted	O
way	O
to	O
access	O
the	O
elements	O
.	O
However	O
,	O
in	O
my	O
understanding	O
there	O
is	O
no	O
SortedList	O
in	O
Java	O
.	O
You	O
can	O
use	O
java	O
.	O
util	O
.	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
a	O
list	O
.	O
Any	O
idea	O
why	O
it	O
is	O
designed	O
like	O
that	O
?	O
Question	O
-	O
28770822	O
,	O
answer	O
-	O
28853754	O
TLDR	O
:	O
Jump	O
to	O
the	O
conclusion	O
#	O
blockquote	O
A	O
brief	O
history	O
of	O
@	O
Native	O
I	O
made	O
some	O
search	O
on	O
the	O
mailing	O
lists	O
.	O
I	O
found	O
some	O
interesting	O
things	O
.	O
At	O
first	O
an	O
annotation	O
(	O
1	O
2	O
)	O
javax	O
.	O
tools	O
.	O
annotation	O
.	O
ForceNativeHeader	O
was	O
introduced	O
to	O
#	O
blockquote	O
It	O
is	O
used	O
by	O
com	O
.	O
sun	O
.	O
tools	O
.	O
javac	O
.	O
processing	O
.	O
NativeapiVisitor	O
.	O
By	O
looking	O
at	O
the	O
code	O
we	O
can	O
see	O
that	O
the	O
native	O
header	O
is	O
generated	O
if	O
the	O
class	O
declare	O
some	O
native	O
methods	O
or	O
if	O
the	O
class	O
is	O
annotated	O
@	O
ForceNativeHeader	O
.	O
Later	O
this	O
annotation	O
was	O
renamed	O
to	O
GenerateNativeHeader	O
(	O
1	O
2	O
)	O
.	O
Then	O
this	O
annotation	O
was	O
added	O
to	O
several	O
types	O
(	O
especially	O
Integer	B-api_mention
and	O
Long	B-api_mention
)	O
with	O
an	O
interresting	O
comment	O
:	O
#	O
pre	O
But	O
by	O
adding	O
this	O
annotation	O
it	O
add	O
a	O
problematic	O
dependency	O
from	O
base	O
module	O
to	O
the	O
module	O
containing	O
javax	O
.	O
tools	O
.	O
So	O
the	O
annotation	O
were	O
removed	O
from	O
Integer	B-api_mention
and	O
Long	B-api_mention
and	O
these	O
files	O
were	O
explicitly	O
added	O
to	O
the	O
build	O
process	O
since	O
the	O
header	O
were	O
no	O
more	O
automatically	O
generated	O
.	O
.	O
.	O
a	O
"	O
(	O
hopefully	O
temporary	O
)	O
hack	O
"	O
.	O
So	O
a	O
new	O
annotation	O
java	O
.	O
lang	O
.	O
annotation	O
.	O
Native	O
was	O
created	O
and	O
used	O
in	O
Integer	B-api_mention
and	O
Long	B-api_mention
.	O
The	O
annotation	O
was	O
set	O
a	O
TargetType	O
FIELD	O
.	O
#	O
blockquote	O
All	O
the	O
purpose	O
of	O
this	O
stuff	O
is	O
:	O
#	O
blockquote	O
It	O
is	O
the	O
case	O
of	O
Integer	B-api_mention
and	O
Long	B-api_mention
this	O
was	O
a	O
part	O
of	O
the	O
JEP	O
139	O
:	O
Enhance	O
javac	O
to	O
Improve	O
Build	O
Speed	O
:	O
#	O
blockquote	O
A	O
basic	O
experimentation	O
I	O
made	O
a	O
basic	O
experimentation	O
on	O
the	O
JDK	O
.	O
I	O
clone	O
the	O
open	O
-	O
jdk	O
forest	O
and	O
i	O
successfully	O
build	O
it	O
.	O
As	O
expected	O
the	O
header	O
files	O
where	O
generated	O
for	O
Integer	B-api_mention
and	O
Long	B-api_mention
(	O
thanks	O
to	O
@	O
Native	O
)	O
and	O
for	O
Float	B-api_mention
and	O
Double	B-api_mention
(	O
thanks	O
to	O
their	O
native	O
methods	O
)	O
but	O
not	O
for	O
Byte	B-api_mention
,	O
Short	B-api_mention
.	O
.	O
.	O
#	O
pre	O
Then	O
i	O
tried	O
to	O
remove	O
the	O
@	O
Native	O
from	O
the	O
Integer	B-api_mention
fields	O
and	O
i	O
tried	O
to	O
build	O
again	O
the	O
jdk	O
but	O
i	O
get	O
an	O
error	O
:	O
#	O
pre	O
logically	O
since	O
the	O
header	O
have	O
not	O
been	O
generated	O
.	O
I	O
have	O
also	O
confirmed	O
that	O
java	O
_	O
lang	O
_	O
Integer	O
.	O
h	O
is	O
included	O
in	O
several	O
c	O
and	O
cpp	O
files	O
:	O
#	O
pre	O
like	O
Long	B-api_mention
#	O
pre	O
like	O
Float	B-api_mention
#	O
pre	O
and	O
like	O
Double	B-api_mention
#	O
pre	O
but	O
neither	O
Short	B-api_mention
find	O
.	O
\	O
(	O
-	O
name	O
StringLiteral	O
-	O
o	O
-	O
name	O
StringLiteral	O
\	O
)	O
-	O
exec	O
grep	O
StringLiteral	O
{	O
}	O
\	O
;	O
-	O
print	O
nor	O
Byte	B-api_mention
,	O
nor	O
Character	B-api_mention
.	O
Conclusion	O
Among	O
all	O
these	O
types	O
,	O
only	O
Integer	B-api_mention
,	O
Long	B-api_mention
,	O
Float	B-api_mention
,	O
Double	B-api_mention
are	O
used	O
in	O
the	O
native	O
source	O
code	O
of	O
the	O
jdk	O
.	O
And	O
only	O
the	O
Integer	B-api_mention
and	O
Long	B-api_mention
fields	O
are	O
annotated	O
with	O
@	O
Native	O
because	O
they	O
have	O
no	O
native	O
methods	O
(	O
as	O
opposed	O
to	O
Float	B-api_mention
and	O
Double	B-api_mention
)	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
20810612	O
I	O
'	O
m	O
on	O
Linux	O
and	O
get	O
same	O
result	O
for	O
both	O
of	O
these	O
approaches	O
:	O
#	O
pre	O
Paths	B-api_mention
.	I-api_mention
get	I-api_mention
(	I-api_mention
"	I-api_mention
"	I-api_mention
)	I-api_mention
docs	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
"	I-api_mention
user	I-api_mention
.	I-api_mention
dir	I-api_mention
"	I-api_mention
)	I-api_mention
docs	O
Question	O
-	O
9510125	O
,	O
answer	O
-	O
9511578	O
Just	O
IMHO	O
.	O
Not	O
sure	O
it	O
'	O
s	O
100	O
%	O
correct	O
.	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
marks	O
the	O
container	O
as	O
invalid	O
.	O
Means	O
the	O
content	O
is	O
somehow	O
wrong	O
and	O
must	O
be	O
relayed	O
out	O
.	O
But	O
it	O
'	O
s	O
just	O
a	O
kind	O
of	O
mark	O
/	O
flag	O
.	O
It	O
'	O
s	O
possible	O
that	O
multiple	O
invalid	O
containers	O
must	O
be	O
refreshed	O
later	O
.	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
performs	O
relayout	O
.	O
It	O
means	O
invalid	O
content	O
is	O
asked	O
for	O
all	O
the	O
sizes	O
and	O
all	O
the	O
subcomponents	O
'	O
sizes	O
are	O
set	O
to	O
proper	O
values	O
by	O
LayoutManager	B-api_mention
.	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
just	O
sum	O
of	O
both	O
.	O
It	O
marks	O
the	O
container	O
as	O
invalid	O
and	O
performs	O
layout	O
of	O
the	O
container	O
.	O
Question	O
-	O
26375932	O
,	O
answer	O
-	O
26407637	O
It	O
is	O
an	O
integer	O
overflow	O
.	O
The	O
int	O
data	O
type	O
is	O
4	O
bytes	O
,	O
or	O
32	O
bits	O
.	O
Therefore	O
,	O
numbers	O
larger	O
than	O
2	O
^	O
(	O
32	O
-	O
1	O
)	O
-	O
1	O
(	O
2	O
,	O
147	O
,	O
483	O
,	O
647	O
)	O
cannot	O
be	O
stored	O
in	O
this	O
data	O
type	O
.	O
Your	O
numerical	O
values	O
will	O
be	O
incorrect	O
.	O
For	O
very	O
large	O
numbers	O
,	O
you	O
will	O
want	O
to	O
import	O
and	O
use	O
the	O
class	O
java	B-api_mention
.	I-api_mention
math	I-api_mention
.	I-api_mention
BigInteger	I-api_mention
:	O
#	O
pre	O
NOTE	O
:	O
For	O
numerical	O
values	O
that	O
are	O
still	O
too	O
large	O
for	O
the	O
int	O
data	O
type	O
,	O
but	O
small	O
enough	O
to	O
fit	O
within	O
8	O
bytes	O
(	O
absolute	O
value	O
less	O
than	O
or	O
equal	O
to	O
2	O
^	O
(	O
64	O
-	O
1	O
)	O
-	O
1	O
)	O
,	O
you	O
should	O
probably	O
use	O
the	O
long	O
primitive	O
.	O
HackerRank	O
'	O
s	O
practice	O
problems	O
(	O
www	O
.	O
hackerrank	O
.	O
com	O
)	O
,	O
such	O
as	O
the	O
Algorithms	O
practice	O
section	O
,	O
(	O
#	O
a	O
)	O
include	O
some	O
very	O
good	O
large	O
-	O
number	O
questions	O
that	O
give	O
good	O
practice	O
about	O
how	O
to	O
think	O
about	O
the	O
appropriate	O
data	O
type	O
to	O
use	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16637740	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
be	O
implemented	O
to	O
be	O
faster	O
than	O
for	O
-	O
each	O
loop	O
,	O
because	O
the	O
iterable	O
knows	O
the	O
best	O
way	O
to	O
iterate	O
its	O
elements	O
,	O
as	O
opposed	O
to	O
the	O
standard	O
iterator	O
way	O
.	O
So	O
the	O
difference	O
is	O
loop	O
internally	O
or	O
loop	O
externally	O
.	O
For	O
example	O
ArrayList	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
be	O
simply	O
implemented	O
as	O
#	O
pre	O
as	O
opposed	O
to	O
the	O
for	O
-	O
each	O
loop	O
which	O
requires	O
a	O
lot	O
of	O
scaffolding	O
#	O
pre	O
However	O
,	O
we	O
also	O
need	O
to	O
account	O
for	O
two	O
overhead	O
costs	O
by	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
one	O
is	O
making	O
the	O
lambda	O
object	O
,	O
the	O
other	O
is	O
invoking	O
the	O
lambda	O
method	O
.	O
They	O
are	O
probably	O
not	O
significant	O
.	O
see	O
also	O
#	O
a	O
for	O
comparing	O
internal	O
/	O
external	O
iterations	O
for	O
different	O
use	O
cases	O
.	O
Question	O
-	O
5038204	O
,	O
answer	O
-	O
5039178	O
The	O
commons	O
/	O
lang	O
builders	O
are	O
great	O
and	O
I	O
have	O
been	O
using	O
them	O
for	O
years	O
without	O
noticeable	O
performance	O
overhead	O
(	O
with	O
and	O
without	O
hibernate	O
)	O
.	O
But	O
as	O
Alain	O
writes	O
,	O
the	O
Guava	O
way	O
is	O
even	O
nicer	O
:	O
Here	O
'	O
s	O
a	O
sample	O
Bean	O
:	O
#	O
pre	O
Here	O
'	O
s	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
)	I-api_mention
implemented	O
with	O
Commons	O
/	O
Lang	O
:	O
#	O
pre	O
and	O
here	O
with	O
Guava	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
the	O
Guava	O
version	O
is	O
shorter	O
and	O
avoids	O
superfluous	O
helper	O
objects	O
.	O
In	O
case	O
of	O
equals	O
,	O
it	O
even	O
allows	O
for	O
short	O
-	O
circuiting	O
the	O
evaluation	O
if	O
an	O
earlier	O
Object	B-api_mention
.	I-api_mention
equal	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
returns	O
false	O
(	O
to	O
be	O
fair	O
:	O
commons	O
/	O
lang	O
has	O
an	O
ObjectUtils	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
with	O
identical	O
semantics	O
which	O
could	O
be	O
used	O
instead	O
of	O
EqualsBuilder	B-api_mention
to	O
allow	O
short	O
-	O
circuiting	O
as	O
above	O
)	O
.	O
So	O
:	O
yes	O
,	O
the	O
commons	O
lang	O
builders	O
are	O
very	O
preferable	O
over	O
manually	O
constructed	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
(	O
or	O
those	O
awful	O
monsters	O
Eclipse	O
will	O
generate	O
for	O
you	O
)	O
,	O
but	O
the	O
Guava	O
versions	O
are	O
even	O
better	O
.	O
And	O
a	O
note	O
about	O
Hibernate	O
:	O
be	O
careful	O
about	O
using	O
lazy	O
collections	O
in	O
your	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
hashCode	B-api_mention
(	I-api_mention
)	I-api_mention
and	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
implementations	O
.	O
That	O
will	O
fail	O
miserably	O
if	O
you	O
don	O
'	O
t	O
have	O
an	O
open	O
Session	B-api_mention
.	O
Note	O
(	O
about	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
)	O
:	O
a	O
)	O
in	O
both	O
versions	O
of	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
above	O
,	O
you	O
might	O
want	O
to	O
use	O
one	O
or	O
both	O
of	O
these	O
shortcuts	O
also	O
:	O
#	O
pre	O
b	O
)	O
depending	O
on	O
your	O
interpretation	O
of	O
the	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
contract	O
,	O
you	O
might	O
also	O
change	O
the	O
line	O
(	O
s	O
)	O
if	O
(	O
args	O
)	O
{	O
to	O
#	O
pre	O
If	O
you	O
use	O
the	O
second	O
version	O
,	O
you	O
probably	O
also	O
want	O
to	O
call	O
super	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
inside	O
your	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Opinions	O
differ	O
here	O
,	O
the	O
topic	O
is	O
discussed	O
in	O
this	O
question	O
:	O
#	O
blockquote	O
(	O
although	O
it	O
'	O
s	O
about	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
the	O
same	O
applies	O
to	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
Note	O
(	O
inspired	O
by	O
Comment	O
from	O
kayahr	O
)	O
Objects	B-api_mention
.	I-api_mention
hashCode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
just	O
as	O
the	O
underlying	O
Arrays	B-api_mention
.	I-api_mention
hashCode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
might	O
perform	O
badly	O
if	O
you	O
have	O
many	O
primitive	O
fields	O
.	O
In	O
such	O
cases	O
,	O
EqualsBuilder	B-api_mention
may	O
actually	O
be	O
the	O
better	O
solution	O
.	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27950675	O
Since	O
your	O
first	O
question	O
has	O
already	O
been	O
answered	O
,	O
I	O
'	O
ll	O
answer	O
your	O
second	O
question	O
.	O
The	O
String	B-api_mention
objects	O
must	O
be	O
compared	O
character	O
by	O
character	O
,	O
because	O
though	O
equal	O
Object	B-api_mention
s	O
implies	O
equal	O
hashes	O
,	O
the	O
inverse	O
is	O
not	O
necessarily	O
true	O
.	O
As	O
Holger	O
said	O
in	O
his	O
comment	O
,	O
this	O
represents	O
a	O
hash	O
collision	O
.	O
The	O
applicable	O
specifications	O
for	O
the	O
hashcode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
are	O
as	O
follows	O
:	O
#	O
blockquote	O
This	O
means	O
that	O
in	O
order	O
for	O
them	O
to	O
guarantee	O
equality	O
,	O
the	O
comparison	O
of	O
each	O
character	O
is	O
necessary	O
in	O
order	O
for	O
them	O
to	O
confirm	O
the	O
equality	O
of	O
the	O
two	O
objects	O
.	O
They	O
start	O
by	O
comparing	O
hashCode	O
s	O
rather	O
than	O
using	O
equals	O
since	O
they	O
are	O
using	O
a	O
hash	O
table	O
for	O
the	O
references	O
,	O
and	O
this	O
improves	O
performance	O
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28584932	O
Your	O
reasoning	O
is	O
that	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
should	O
not	O
be	O
equal	O
to	O
itself	O
because	O
it	O
is	O
“	O
likely	O
”	O
to	O
have	O
been	O
obtained	O
as	O
the	O
result	O
of	O
a	O
loss	O
of	O
accuracy	O
.	O
This	O
line	O
of	O
reasoning	O
applies	O
to	O
all	O
of	O
floating	O
-	O
point	O
.	O
Any	O
finite	O
value	O
can	O
be	O
obtained	O
as	O
the	O
result	O
of	O
an	O
inaccurate	O
operation	O
.	O
That	O
did	O
not	O
push	O
the	O
IEEE	O
754	O
standardization	O
committee	O
to	O
define	O
=	O
=	O
as	O
always	O
evaluating	O
to	O
false	O
for	O
finite	O
values	O
,	O
so	O
why	O
should	O
infinities	O
be	O
different	O
?	O
As	O
defined	O
,	O
=	O
=	O
is	O
useful	O
for	O
people	O
who	O
understand	O
what	O
it	O
does	O
(	O
that	O
is	O
,	O
test	O
the	O
floating	O
-	O
point	O
values	O
that	O
have	O
been	O
obtained	O
,	O
and	O
certainly	O
not	O
the	O
values	O
that	O
should	O
have	O
been	O
obtained	O
with	O
real	O
computations	O
)	O
.	O
For	O
anyone	O
who	O
understands	O
that	O
,	O
and	O
you	O
need	O
to	O
understand	O
it	O
to	O
use	O
floating	O
-	O
point	O
even	O
for	O
computations	O
that	O
do	O
not	O
involve	O
infinity	O
,	O
having	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
=	O
=	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
evaluate	O
to	O
true	O
is	O
convenient	O
,	O
if	O
only	O
to	O
test	O
if	O
the	O
floating	O
-	O
point	O
result	O
of	O
a	O
floating	O
-	O
point	O
computation	O
is	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
.	O
That	O
leaves	O
the	O
question	O
of	O
why	O
NaN	O
can	O
afford	O
to	O
have	O
special	O
behavior	O
,	O
and	O
infinities	O
should	O
follow	O
the	O
same	O
general	O
principles	O
as	O
finite	O
values	O
.	O
NaN	O
is	O
different	O
from	O
infinities	O
:	O
the	O
underlying	O
principle	O
of	O
the	O
IEEE	O
754	O
standard	O
is	O
that	O
values	O
are	O
exactly	O
what	O
they	O
are	O
,	O
but	O
the	O
result	O
of	O
an	O
operation	O
can	O
be	O
approximated	O
with	O
respect	O
to	O
the	O
real	O
result	O
,	O
and	O
in	O
this	O
case	O
,	O
the	O
resulting	O
floating	O
-	O
point	O
value	O
is	O
obtained	O
according	O
to	O
the	O
rounding	O
mode	O
.	O
Forget	O
for	O
an	O
instant	O
that	O
1	O
.	O
0	O
/	O
0	O
.	O
0	O
is	O
defined	O
as	O
+	O
inf	O
,	O
which	O
is	O
an	O
annoyance	O
in	O
this	O
discussion	O
.	O
Think	O
for	O
the	O
moment	O
of	O
Double	O
.	O
POSITIVE	O
_	O
INFINITY	O
only	O
as	O
the	O
result	O
of	O
operations	O
such	O
as	O
1	O
.	O
0e100	O
/	O
1	O
.	O
0e	O
-	O
300	O
or	O
Double	O
.	O
MAX	O
_	O
VALUE	O
+	O
Double	O
.	O
MAX	O
_	O
VALUE	O
.	O
For	O
these	O
operations	O
,	O
+	O
inf	O
is	O
the	O
closest	O
approximation	O
of	O
the	O
real	O
result	O
,	O
just	O
like	O
for	O
operations	O
that	O
produce	O
a	O
finite	O
result	O
.	O
By	O
contrast	O
,	O
NaN	O
is	O
the	O
result	O
you	O
obtain	O
when	O
the	O
operation	O
doesn	O
'	O
t	O
make	O
sense	O
.	O
It	O
is	O
defensible	O
to	O
have	O
NaN	O
behave	O
specially	O
,	O
but	O
inf	O
is	O
just	O
an	O
approximation	O
of	O
all	O
the	O
values	O
too	O
large	O
to	O
represent	O
.	O
In	O
reality	O
,	O
1	O
.	O
0	O
/	O
0	O
.	O
0	O
also	O
produces	O
+	O
inf	O
,	O
but	O
that	O
should	O
be	O
considered	O
an	O
exception	O
.	O
It	O
would	O
have	O
been	O
just	O
as	O
coherent	O
to	O
define	O
the	O
result	O
of	O
that	O
operation	O
as	O
NaN	O
,	O
but	O
defining	O
it	O
as	O
+	O
inf	O
was	O
more	O
convenient	O
in	O
the	O
implementation	O
of	O
some	O
algorithms	O
.	O
An	O
example	O
is	O
provided	O
page	O
10	O
in	O
Kahan	O
'	O
s	O
notes	O
.	O
More	O
details	O
than	O
most	O
will	O
wish	O
for	O
are	O
in	O
the	O
article	O
“	O
Branch	O
Cuts	O
for	O
Complex	O
Elementary	O
Functions	O
,	O
or	O
Much	O
Ado	O
About	O
Nothing	O
'	O
s	O
Sign	O
Bit	O
”	O
.	O
I	O
would	O
also	O
interpret	O
the	O
existence	O
in	O
IEEE	O
754	O
of	O
a	O
“	O
division	O
by	O
zero	O
”	O
flag	O
separate	O
from	O
the	O
NaN	O
flag	O
as	O
recognition	O
that	O
the	O
user	O
may	O
want	O
to	O
treat	O
division	O
by	O
zero	O
specially	O
although	O
it	O
is	O
not	O
defined	O
as	O
producing	O
NaN	O
.	O
Question	O
-	O
9510125	O
Swing	O
components	O
have	O
multiple	O
methods	O
related	O
to	O
updates	O
of	O
screen	O
layout	O
,	O
in	O
particular	O
:	O
#	O
li	O
validate	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
invalidate	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
revalidate	B-api_mention
(	I-api_mention
)	I-api_mention
The	O
Java	O
documentation	O
defines	O
these	O
somewhat	O
from	O
a	O
technical	O
perspective	O
,	O
but	O
it	O
'	O
s	O
not	O
particularly	O
clear	O
how	O
they	O
are	O
meant	O
to	O
be	O
used	O
.	O
What	O
is	O
the	O
difference	O
between	O
these	O
,	O
and	O
in	O
what	O
circumstances	O
should	O
you	O
use	O
one	O
rather	O
than	O
the	O
others	O
?	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673375	O
You	O
should	O
be	O
able	O
to	O
write	O
the	O
file	O
on	O
the	O
response	O
directly	O
.	O
Something	O
like	O
#	O
pre	O
and	O
then	O
write	O
the	O
file	O
as	O
a	O
binary	O
stream	O
on	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Remember	O
to	O
do	O
response	O
.	B-api_mention
flush	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
at	O
the	O
end	O
and	O
that	O
should	O
do	O
it	O
.	O
Question	O
-	O
13195797	O
,	O
answer	O
-	O
13195890	O
FileUtils	B-api_mention
.	I-api_mention
cleanDirectory	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
There	O
is	O
this	O
method	O
available	O
in	O
the	O
same	O
file	O
.	O
This	O
will	O
also	O
recursively	O
deletes	O
all	O
sub	O
-	O
folders	O
and	O
files	O
under	O
them	O
.	O
Docs	O
:	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
commons	I-api_mention
.	I-api_mention
io	I-api_mention
.	I-api_mention
FileUtils	I-api_mention
.	I-api_mention
cleanDirectory	I-api_mention
Question	O
-	O
6470651	O
,	O
answer	O
-	O
18544736	O
Threads	O
are	O
not	O
collected	O
until	O
they	O
terminate	O
.	O
They	O
serve	O
as	O
roots	O
of	O
garbage	O
collection	O
.	O
They	O
are	O
one	O
of	O
the	O
few	O
objects	O
that	O
won	O
'	O
t	O
be	O
reclaimed	O
simply	O
by	O
forgetting	O
about	O
them	O
or	O
clearing	O
references	O
to	O
them	O
.	O
Consider	O
:	O
the	O
basic	O
pattern	O
to	O
terminate	O
a	O
worker	O
thread	O
is	O
to	O
set	O
some	O
condition	O
variable	O
seen	O
by	O
the	O
thread	O
.	O
The	O
thread	O
can	O
check	O
the	O
variable	O
periodically	O
and	O
use	O
that	O
as	O
a	O
signal	O
to	O
terminate	O
.	O
If	O
the	O
variable	O
is	O
not	O
declared	O
volatile	O
,	O
then	O
the	O
change	O
to	O
the	O
variable	O
might	O
not	O
be	O
seen	O
by	O
the	O
thread	O
,	O
so	O
it	O
won	O
'	O
t	O
know	O
to	O
terminate	O
.	O
Or	O
imagine	O
if	O
some	O
threads	O
want	O
to	O
update	O
a	O
shared	O
object	O
,	O
but	O
deadlock	O
while	O
trying	O
to	O
lock	O
on	O
it	O
.	O
If	O
you	O
only	O
have	O
a	O
handful	O
of	O
threads	O
these	O
bugs	O
will	O
probably	O
be	O
obvious	O
because	O
your	O
program	O
will	O
stop	O
working	O
properly	O
.	O
If	O
you	O
have	O
a	O
thread	O
pool	O
that	O
creates	O
more	O
threads	O
as	O
needed	O
,	O
then	O
the	O
obsolete	O
/	O
stuck	O
threads	O
might	O
not	O
be	O
noticed	O
,	O
and	O
will	O
accumulate	O
indefinitely	O
,	O
causing	O
a	O
memory	O
leak	O
.	O
Threads	O
are	O
likely	O
to	O
use	O
other	O
data	O
in	O
your	O
application	O
,	O
so	O
will	O
also	O
prevent	O
anything	O
they	O
directly	O
reference	O
from	O
ever	O
being	O
collected	O
.	O
As	O
a	O
toy	O
example	O
:	O
#	O
pre	O
Call	O
System	B-api_mention
.	I-api_mention
gc	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
all	O
you	O
like	O
,	O
but	O
the	O
object	O
passed	O
to	O
leakMe	O
will	O
never	O
die	O
.	O
(	O
*	O
edited	O
*	O
)	O
Question	O
-	O
28584669	O
Why	O
doesn	O
'	O
t	O
infinity	O
comparison	O
follow	O
the	O
logic	O
applied	O
to	O
NaNs	O
?	O
This	O
code	O
prints	O
out	O
false	O
three	O
times	O
:	O
#	O
pre	O
However	O
,	O
if	O
I	O
change	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
to	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
,	O
I	O
get	O
true	O
for	O
equality	O
,	O
but	O
false	O
for	O
the	O
greater	O
-	O
than	O
and	O
less	O
-	O
than	O
comparisons	O
:	O
#	O
pre	O
This	O
seems	O
dangerous	O
.	O
Assuming	O
that	O
infinite	O
values	O
result	O
from	O
overflows	O
,	O
I	O
imagine	O
it	O
'	O
s	O
more	O
likely	O
that	O
two	O
variables	O
that	O
ended	O
up	O
as	O
infinities	O
wouldn	O
'	O
t	O
actually	O
be	O
equal	O
in	O
perfect	O
arithmetic	O
.	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894348	O
The	O
first	O
one	O
using	O
str	B-api_mention
.	I-api_mention
charAt	I-api_mention
should	O
be	O
faster	O
.	O
If	O
you	O
dig	O
inside	O
the	O
source	O
code	O
of	O
String	O
class	O
,	O
we	O
can	O
see	O
that	O
charAt	O
is	O
implemented	O
as	O
follows	O
:	O
#	O
pre	O
Here	O
,	O
all	O
it	O
does	O
is	O
index	O
an	O
array	O
and	O
return	O
the	O
value	O
.	O
Now	O
,	O
if	O
we	O
see	O
the	O
implementation	O
of	O
toCharArray	B-api_mention
,	O
we	O
will	O
find	O
the	O
below	O
:	O
#	O
pre	O
As	O
you	O
see	O
,	O
it	O
is	O
doing	O
a	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
which	O
is	O
definitely	O
going	O
to	O
be	O
a	O
tad	O
slower	O
than	O
not	O
doing	O
it	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14502259	O
There	O
are	O
many	O
,	O
many	O
pseudo	O
random	O
number	O
generators	O
out	O
there	O
.	O
For	O
example	O
Knuth	O
'	O
s	O
ranarray	O
,	O
the	O
Mersenne	O
twister	O
,	O
or	O
look	O
for	O
LFSR	O
generators	O
.	O
Knuth	O
'	O
s	O
monumental	O
"	O
Seminumerical	O
algorithms	O
"	O
analizes	O
the	O
area	O
,	O
and	O
proposes	O
some	O
linear	O
congruential	O
generators	O
(	O
simple	O
to	O
implement	O
,	O
fast	O
)	O
.	O
But	O
I	O
'	O
d	O
suggest	O
you	O
just	O
stick	O
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
or	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
,	O
they	O
fast	O
and	O
at	O
least	O
OK	O
for	O
occasional	O
use	O
(	O
i	O
.	O
e	O
.	O
,	O
games	O
and	O
such	O
)	O
.	O
If	O
you	O
are	O
just	O
paranoid	O
on	O
the	O
distribution	O
(	O
some	O
Monte	O
Carlo	O
program	O
,	O
or	O
a	O
genetic	O
algorithm	O
)	O
,	O
check	O
out	O
their	O
implementation	O
(	O
source	O
is	O
available	O
somewhere	O
)	O
,	O
and	O
seed	O
them	O
with	O
some	O
truly	O
random	O
number	O
,	O
either	O
from	O
your	O
operating	O
system	O
or	O
from	O
random	O
.	O
org	O
.	O
If	O
this	O
is	O
required	O
for	O
some	O
application	O
where	O
security	O
is	O
critical	O
,	O
you	O
'	O
ll	O
have	O
to	O
dig	O
yourself	O
.	O
And	O
as	O
in	O
that	O
case	O
you	O
shouldn	O
'	O
t	O
believe	O
what	O
some	O
colored	O
square	O
with	O
missing	O
bits	O
spouts	O
here	O
,	O
I	O
'	O
ll	O
shut	O
up	O
now	O
.	O
Question	O
-	O
9481865	O
I	O
am	O
trying	O
to	O
develop	O
a	O
system	O
where	O
there	O
are	O
different	O
nodes	O
that	O
are	O
run	O
on	O
different	O
system	O
or	O
on	O
different	O
ports	O
on	O
the	O
same	O
system	O
.	O
Now	O
all	O
the	O
nodes	O
create	O
a	O
Socket	B-api_mention
with	O
a	O
target	O
IP	O
as	O
the	O
IP	O
of	O
a	O
special	O
node	O
known	O
as	O
a	O
bootstrapping	O
node	O
.	O
The	O
nodes	O
then	O
create	O
their	O
own	O
ServerSocket	B-api_mention
and	O
start	O
listening	O
for	O
connections	O
.	O
The	O
bootstrapping	O
node	O
maintains	O
a	O
list	O
of	O
Nodes	O
and	O
returns	O
them	O
on	O
being	O
quired	O
.	O
Now	O
what	O
I	O
need	O
is	O
the	O
node	O
must	O
register	O
its	O
IP	O
to	O
the	O
bootstrapping	O
node	O
.	O
I	O
tried	O
using	O
cli	B-api_mention
.	I-api_mention
getInetAddress	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
once	O
the	O
client	O
connects	O
to	O
the	O
ServerSocket	B-api_mention
of	O
bootstrapping	O
node	O
but	O
that	O
didn	O
'	O
t	O
work	O
.	O
#	O
li	O
I	O
need	O
the	O
client	O
to	O
register	O
its	O
PPP	O
IP	O
if	O
available	O
;	O
#	O
li	O
Otherwise	O
the	O
LAN	O
IP	O
if	O
available	O
;	O
#	O
li	O
Otherwise	O
it	O
must	O
register	O
127	O
.	O
0	O
.	O
0	O
.	O
1	O
assuming	O
its	O
the	O
same	O
computer	O
.	O
Please	O
help	O
me	O
with	O
this	O
.	O
EDIT	O
using	O
the	O
code	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
My	O
PPP	O
Connection	O
IP	O
address	O
is	O
:	O
117	O
.	O
204	O
.	O
44	O
.	O
192	O
but	O
the	O
above	O
returns	O
me	O
192	O
.	O
168	O
.	O
1	O
.	O
2	O
EDIT2	O
I	O
am	O
using	O
the	O
following	O
code	O
:	O
#	O
pre	O
I	O
am	O
able	O
to	O
get	O
all	O
the	O
IP	O
addresses	O
associated	O
all	O
NetworkInterface	B-api_mention
s	O
,	O
but	O
how	O
do	O
I	O
distinguish	O
them	O
?	O
?	O
This	O
is	O
the	O
output	O
I	O
am	O
getting	O
:	O
#	O
pre	O
Question	O
-	O
8881291	O
,	O
answer	O
-	O
14060804	O
#	O
li	O
Strings	O
are	O
immutable	O
in	O
Java	O
if	O
you	O
store	O
password	O
as	O
plain	O
text	O
it	O
will	O
be	O
available	O
in	O
memory	O
until	O
Garbage	O
collector	O
clears	O
it	O
and	O
since	O
Strings	O
are	O
used	O
in	O
String	B-api_mention
pool	O
for	O
re	O
-	O
usability	O
there	O
is	O
pretty	O
high	O
chance	O
that	O
it	O
will	O
be	O
remain	O
in	O
memory	O
for	O
long	O
duration	O
,	O
which	O
pose	O
a	O
security	O
threat	O
.	O
Since	O
any	O
one	O
who	O
has	O
access	O
to	O
memory	O
dump	O
can	O
find	O
the	O
password	O
in	O
clear	O
text	O
#	O
li	O
Java	O
recommendation	O
using	O
getPassword	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
JPasswordField	O
which	O
returns	O
a	O
char	O
[	O
]	O
and	O
deprecated	O
getText	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
which	O
returns	O
password	O
in	O
clear	O
text	O
stating	O
security	O
reason	O
.	O
#	O
li	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
there	O
is	O
always	O
a	O
risk	O
of	O
printing	O
plain	O
text	O
in	O
log	O
file	O
or	O
console	O
but	O
if	O
use	O
Array	O
you	O
won	O
'	O
t	O
print	O
contents	O
of	O
array	O
instead	O
its	O
memory	O
location	O
get	O
printed	O
.	O
#	O
pre	O
#	O
blockquote	O
Final	O
thoughts	O
:	O
Though	O
using	O
char	O
[	O
]	O
is	O
not	O
just	O
enough	O
you	O
need	O
to	O
erase	O
content	O
to	O
be	O
more	O
secure	O
.	O
I	O
also	O
suggest	O
working	O
with	O
hash	O
'	O
d	O
or	O
encrypted	O
password	O
instead	O
of	O
plaintext	O
and	O
clearing	O
it	O
from	O
memory	O
as	O
soon	O
as	O
authentication	O
is	O
completed	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331241	O
I	O
have	O
a	O
very	O
dumb	O
but	O
working	O
option	O
.	O
if	O
you	O
have	O
the	O
String	B-api_mention
fullDate	O
=	O
"	O
11	O
/	O
15	O
/	O
2013	O
08	O
:	O
00	O
:	O
00	O
"	O
;	O
String	B-api_mention
finalDate	O
=	O
fullDate	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
That	O
should	O
work	O
easy	O
and	O
fast	O
.	O
:	O
)	O
Question	O
-	O
19235606	O
I	O
am	O
having	O
trouble	O
understanding	O
the	O
Stream	B-api_mention
interface	O
in	O
Java	O
8	O
,	O
especially	O
where	O
it	O
has	O
to	O
do	O
with	O
the	O
Spliterator	B-api_mention
and	O
Collector	B-api_mention
interfaces	O
.	O
My	O
problem	O
is	O
that	O
I	O
simply	O
can	O
'	O
t	O
understand	O
yet	O
the	O
Spliterator	B-api_mention
and	O
the	O
Collector	B-api_mention
interfaces	O
,	O
and	O
as	O
a	O
result	O
the	O
Stream	B-api_mention
interface	O
is	O
still	O
somewhat	O
obscure	O
to	O
me	O
.	O
What	O
exactly	O
is	O
a	O
Spliterator	B-api_mention
and	O
a	O
Collector	B-api_mention
,	O
and	O
how	O
can	O
I	O
use	O
them	O
?	O
If	O
I	O
am	O
willing	O
to	O
write	O
my	O
own	O
Spliterator	B-api_mention
or	O
Collector	B-api_mention
(	O
and	O
probably	O
my	O
own	O
Stream	B-api_mention
in	O
that	O
process	O
)	O
,	O
what	O
should	O
I	O
do	O
and	O
not	O
do	O
?	O
I	O
read	O
some	O
examples	O
scattered	O
around	O
the	O
web	O
,	O
but	O
since	O
everything	O
here	O
is	O
stil	O
new	O
and	O
subject	O
to	O
changes	O
,	O
examples	O
and	O
tutorials	O
are	O
still	O
very	O
sparse	O
.	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
34073047	O
Another	O
option	O
is	O
to	O
use	O
Apache	O
Commons	O
StrBuilder	O
,	O
which	O
has	O
the	O
functionality	O
that	O
'	O
s	O
lacking	O
in	O
StringBuilder	B-api_mention
.	O
StrBuilder	O
.	O
appendLn	O
(	O
)	O
Question	O
-	O
13102045	O
I	O
am	O
using	O
Scanner	B-api_mention
methods	O
nextInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
reading	O
input	O
.	O
Basically	O
,	O
it	O
looks	O
like	O
this	O
:	O
#	O
pre	O
The	O
problem	O
is	O
that	O
after	O
entering	O
the	O
numerical	O
value	O
,	O
the	O
first	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
skipped	O
and	O
the	O
second	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
executed	O
,	O
so	O
that	O
my	O
output	O
looks	O
like	O
this	O
:	O
#	O
pre	O
I	O
tested	O
my	O
application	O
and	O
it	O
looks	O
like	O
the	O
problem	O
lies	O
in	O
using	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
I	O
delete	O
it	O
,	O
then	O
both	O
string1	O
=	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
string2	O
=	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
executed	O
as	O
I	O
want	O
them	O
to	O
be	O
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28590286	O
Since	O
Double	B-api_mention
.	I-api_mention
Nan	I-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
Double	I-api_mention
.	I-api_mention
NaN	I-api_mention
)	I-api_mention
was	O
mentioned	O
:	O
It	O
'	O
s	O
one	O
thing	O
what	O
should	O
happen	O
when	O
you	O
perform	O
arithmetic	O
and	O
compare	O
numbers	O
,	O
it	O
'	O
s	O
a	O
totally	O
different	O
thing	O
when	O
you	O
consider	O
how	O
objects	O
should	O
behave	O
.	O
Two	O
typical	O
problem	O
cases	O
are	O
:	O
Sorting	O
an	O
array	O
of	O
numbers	O
,	O
and	O
using	O
hash	O
values	O
to	O
implement	O
dictionaries	O
,	O
sets	O
,	O
and	O
so	O
on	O
.	O
There	O
are	O
two	O
exceptional	O
cases	O
where	O
the	O
normal	O
ordering	O
with	O
<	O
,	O
=	O
and	O
>	O
doesn	O
'	O
t	O
apply	O
:	O
One	O
case	O
is	O
that	O
+	O
0	O
=	O
-	O
0	O
and	O
the	O
other	O
is	O
that	O
NaN	O
≠	O
NaN	O
,	O
and	O
x	O
<	O
NaN	O
,	O
x	O
>	O
NaN	O
,	O
x	O
=	O
NaN	O
will	O
always	O
be	O
false	O
whatever	O
x	O
is	O
.	O
Sorting	O
algorithms	O
can	O
get	O
into	O
trouble	O
with	O
this	O
.	O
A	O
sorting	O
algorithm	O
may	O
assume	O
that	O
x	O
=	O
x	O
is	O
always	O
true	O
.	O
So	O
if	O
I	O
know	O
that	O
x	O
is	O
stored	O
in	O
an	O
array	O
and	O
look	O
for	O
it	O
,	O
I	O
might	O
not	O
do	O
any	O
bounds	O
check	O
because	O
the	O
search	O
for	O
it	O
must	O
find	O
something	O
.	O
Not	O
if	O
x	O
is	O
NaN	O
.	O
A	O
sorting	O
algorithm	O
may	O
assume	O
that	O
exactly	O
one	O
of	O
a	O
<	O
b	O
and	O
a	O
>	O
=	O
b	O
must	O
be	O
true	O
.	O
Not	O
if	O
one	O
is	O
NaN	O
.	O
So	O
a	O
naive	O
sorting	O
algorithm	O
may	O
crash	O
when	O
NaNs	O
are	O
present	O
.	O
You	O
'	O
d	O
have	O
to	O
decide	O
where	O
you	O
want	O
NaNs	O
to	O
end	O
up	O
when	O
sorting	O
the	O
array	O
,	O
and	O
then	O
change	O
your	O
comparison	O
code	O
so	O
that	O
it	O
works	O
.	O
Now	O
dictionaries	O
and	O
sets	O
and	O
generally	O
hashing	O
:	O
What	O
if	O
I	O
use	O
an	O
NaN	O
as	O
the	O
key	O
?	O
A	O
set	O
contains	O
unique	O
objects	O
.	O
If	O
the	O
set	O
contains	O
an	O
NaN	O
and	O
I	O
try	O
to	O
add	O
another	O
one	O
,	O
is	O
it	O
unique	O
because	O
it	O
is	O
not	O
equal	O
to	O
the	O
one	O
that	O
is	O
already	O
there	O
?	O
What	O
about	O
+	O
0	O
and	O
-	O
0	O
,	O
should	O
they	O
be	O
considered	O
equal	O
or	O
different	O
?	O
There	O
'	O
s	O
the	O
rule	O
that	O
any	O
two	O
items	O
considered	O
equal	O
must	O
have	O
the	O
same	O
hash	O
value	O
.	O
So	O
the	O
sensible	O
thing	O
is	O
(	O
probably	O
)	O
that	O
a	O
hash	O
function	O
returns	O
one	O
unique	O
value	O
for	O
all	O
NaNs	O
,	O
and	O
one	O
unique	O
value	O
for	O
+	O
0	O
and	O
-	O
0	O
.	O
And	O
after	O
the	O
hash	O
lookup	O
when	O
you	O
need	O
to	O
find	O
an	O
element	O
with	O
the	O
same	O
hash	O
value	O
that	O
is	O
actually	O
equal	O
,	O
two	O
NaNs	O
should	O
be	O
considered	O
equal	O
(	O
but	O
different	O
from	O
anything	O
else	O
)	O
.	O
That	O
'	O
s	O
probably	O
why	O
Double	B-api_mention
.	I-api_mention
Nan	I-api_mention
.	I-api_mention
equal	I-api_mention
(	I-api_mention
)	I-api_mention
behaves	O
different	O
from	O
=	O
=	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28465634	O
I	O
think	O
there	O
are	O
very	O
few	O
differences	O
between	O
the	O
two	O
when	O
you	O
look	O
closely	O
enough	O
.	O
At	O
it	O
'	O
s	O
face	O
,	O
an	O
IEnumerable	O
does	O
appear	O
to	O
be	O
a	O
reusable	O
construct	O
:	O
#	O
pre	O
However	O
,	O
the	O
compiler	O
is	O
actually	O
doing	O
a	O
little	O
bit	O
of	O
work	O
to	O
help	O
us	O
out	O
;	O
it	O
generates	O
the	O
following	O
code	O
:	O
#	O
pre	O
Each	O
time	O
you	O
would	O
actually	O
iterate	O
over	O
the	O
enumerable	O
,	O
the	O
compiler	O
creates	O
an	O
enumerator	O
.	O
The	O
enumerator	O
is	O
not	O
reusable	O
;	O
further	O
calls	O
to	O
MoveNext	O
will	O
just	O
return	O
false	O
,	O
and	O
there	O
is	O
no	O
way	O
to	O
reset	O
it	O
to	O
the	O
beginning	O
.	O
If	O
you	O
want	O
to	O
iterate	O
over	O
the	O
numbers	O
again	O
,	O
you	O
will	O
need	O
to	O
create	O
another	O
enumerator	O
instance	O
.	O
To	O
better	O
illustrate	O
that	O
the	O
IEnumerable	O
has	O
(	O
can	O
have	O
)	O
the	O
same	O
'	O
feature	O
'	O
as	O
a	O
Java	O
Stream	B-api_mention
,	O
consider	O
a	O
enumerable	O
whose	O
source	O
of	O
the	O
numbers	O
is	O
not	O
a	O
static	O
collection	O
.	O
For	O
example	O
,	O
we	O
can	O
create	O
an	O
enumerable	O
object	O
which	O
generates	O
a	O
sequence	O
of	O
5	O
random	O
numbers	O
:	O
#	O
pre	O
Now	O
we	O
have	O
very	O
similar	O
code	O
to	O
the	O
previous	O
array	O
-	O
based	O
enumerable	O
,	O
but	O
with	O
a	O
second	O
iteration	O
over	O
numbers	O
:	O
#	O
pre	O
The	O
second	O
time	O
we	O
iterate	O
over	O
numbers	O
we	O
will	O
get	O
a	O
different	O
sequence	O
of	O
numbers	O
,	O
which	O
isn	O
'	O
t	O
reusable	O
in	O
the	O
same	O
sense	O
.	O
Or	O
,	O
we	O
could	O
have	O
written	O
the	O
RandomNumberStream	O
to	O
thrown	O
an	O
exception	O
if	O
you	O
try	O
to	O
iterate	O
over	O
it	O
multiple	O
times	O
,	O
making	O
the	O
enumerable	O
actually	O
unusable	O
(	O
like	O
a	O
Java	O
Stream	B-api_mention
)	O
.	O
Also	O
,	O
what	O
does	O
your	O
enumerable	O
-	O
based	O
quick	O
sort	O
mean	O
when	O
applied	O
to	O
a	O
RandomNumberStream	O
?	O
Conclusion	O
So	O
,	O
the	O
biggest	O
difference	O
is	O
that	O
.	O
NET	O
allows	O
you	O
to	O
reuse	O
an	O
IEnumerable	O
by	O
implicitly	O
creating	O
a	O
new	O
IEnumerator	O
in	O
the	O
background	O
whenever	O
it	O
would	O
need	O
to	O
access	O
elements	O
in	O
the	O
sequence	O
.	O
This	O
implicit	O
behavior	O
is	O
often	O
useful	O
(	O
and	O
'	O
powerful	O
'	O
as	O
you	O
state	O
)	O
,	O
because	O
we	O
can	O
repeatedly	O
iterate	O
over	O
a	O
collection	O
.	O
But	O
sometimes	O
,	O
this	O
implicit	O
behavior	O
can	O
actually	O
cause	O
problems	O
.	O
If	O
your	O
data	O
source	O
is	O
not	O
static	O
,	O
or	O
is	O
costly	O
to	O
access	O
(	O
like	O
a	O
database	O
or	O
web	O
site	O
)	O
,	O
then	O
a	O
lot	O
of	O
assumptions	O
about	O
IEnumerable	O
have	O
to	O
be	O
discarded	O
;	O
reuse	O
is	O
not	O
that	O
straight	O
-	O
forward	O
Question	O
-	O
32334319	O
,	O
answer	O
-	O
39380442	O
As	O
stated	O
across	O
many	O
of	O
the	O
answers	O
.	O
The	O
Quicksort	O
is	O
used	O
by	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
for	O
sorting	O
primitive	O
collections	O
because	O
stability	O
isn	O
'	O
t	O
required	O
(	O
you	O
won	O
'	O
t	O
know	O
or	O
care	O
if	O
two	O
identical	O
ints	O
were	O
swapped	O
in	O
the	O
sort	O
)	O
MergeSort	O
or	O
more	O
specifically	O
Timsort	O
is	O
used	O
by	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
for	O
sorting	O
collections	O
of	O
objects	O
.	O
Stability	O
is	O
required	O
.	O
Quicksort	O
does	O
not	O
provide	O
for	O
stability	O
,	O
Timsort	O
does	O
.	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
delegates	O
to	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
which	O
is	O
why	O
you	O
see	O
the	O
javadoc	O
referencing	O
the	O
MergeSort	O
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31445150	O
I	O
first	O
tought	O
your	O
question	O
was	O
a	O
dupe	O
of	O
What	O
code	O
does	O
the	O
compiler	O
generate	O
for	O
autoboxing	O
?	O
However	O
,	O
after	O
your	O
comment	O
on	O
@	O
ElliottFrisch	O
I	O
realized	O
it	O
was	O
different	O
:	O
#	O
blockquote	O
For	O
other	O
readers	O
,	O
assume	O
that	O
"	O
behaves	O
that	O
way	O
"	O
means	O
using	O
valueOf	B-api_mention
.	O
Remember	O
that	O
there	O
are	O
multiples	O
compilers	O
for	O
Java	O
.	O
To	O
be	O
"	O
legal	O
"	O
they	O
must	O
follow	O
the	O
contract	O
given	O
in	O
the	O
JLS	O
.	O
Therefore	O
,	O
as	O
long	O
as	O
all	O
the	O
rules	O
here	O
are	O
respected	O
,	O
there	O
is	O
no	O
guarantee	O
of	O
how	O
autoboxing	O
is	O
internally	O
implemented	O
.	O
But	O
I	O
don	O
'	O
t	O
see	O
any	O
reason	O
to	O
not	O
use	O
valueOf	B-api_mention
,	O
specially	O
that	O
it	O
uses	O
the	O
cached	O
values	O
and	O
is	O
the	O
recommended	O
way	O
as	O
per	O
this	O
article	O
by	O
Joseph	O
D	O
.	O
Darcy	O
.	O
Question	O
-	O
16324831	O
,	O
answer	O
-	O
16324963	O
Note	O
:	O
everything	O
in	O
this	O
post	O
is	O
in	O
the	O
source	O
of	O
Java7	O
-	O
b147	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
goes	O
into	O
a	O
Sun	O
library	O
(	O
in	O
sun	B-api_mention
.	I-api_mention
misc	I-api_mention
.	I-api_mention
FloatingDecimal	I-api_mention
)	O
the	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
done	O
manually	O
in	O
the	O
Integer	B-api_mention
class	O
.	O
The	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
I	O
would	O
guess	O
there	O
are	O
two	O
different	O
authors	O
.	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20945113	O
String	B-api_mention
is	O
immutable	O
*	O
but	O
this	O
only	O
means	O
you	O
cannot	O
change	O
it	O
using	O
its	O
public	O
API	O
.	O
What	O
you	O
are	O
doing	O
here	O
is	O
circumventing	O
the	O
normal	O
API	O
,	O
using	O
reflection	O
.	O
The	O
same	O
way	O
,	O
you	O
can	O
change	O
the	O
values	O
of	O
enums	O
,	O
change	O
the	O
lookup	O
table	O
used	O
in	O
Integer	B-api_mention
autoboxing	O
etc	O
.	O
Now	O
,	O
the	O
reason	O
s1	O
and	O
s2	O
change	O
value	O
,	O
is	O
that	O
they	O
both	O
refer	O
to	O
the	O
same	O
interned	O
string	O
.	O
The	O
compiler	O
does	O
this	O
(	O
as	O
mentioned	O
by	O
other	O
answers	O
)	O
.	O
The	O
reason	O
s3	O
does	O
not	O
was	O
actually	O
a	O
bit	O
surprising	O
to	O
me	O
,	O
as	O
I	O
thought	O
it	O
would	O
share	O
the	O
value	O
array	O
(	O
it	O
did	O
in	O
earlier	O
version	O
of	O
Java	O
,	O
before	O
Java	O
7u6	O
)	O
.	O
However	O
,	O
looking	O
at	O
the	O
source	O
code	O
of	O
String	B-api_mention
,	O
we	O
can	O
see	O
that	O
the	O
value	O
character	O
array	O
for	O
a	O
substring	O
is	O
actually	O
copied	O
(	O
using	O
Arrays	B-api_mention
.	I-api_mention
copyOfRange	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
This	O
is	O
why	O
it	O
goes	O
unchanged	O
.	O
You	O
can	O
install	O
a	O
SecurityManager	B-api_mention
,	O
to	O
avoid	O
malicious	O
code	O
to	O
do	O
such	O
things	O
.	O
But	O
keep	O
in	O
mind	O
that	O
some	O
libraries	O
depend	O
on	O
using	O
these	O
kind	O
of	O
reflection	O
tricks	O
(	O
typically	O
ORM	O
tools	O
,	O
AOP	O
libraries	O
etc	O
)	O
.	O
*	O
)	O
I	O
initially	O
wrote	O
that	O
String	B-api_mention
s	O
aren	O
'	O
t	O
really	O
immutable	O
,	O
just	O
"	O
effective	O
immutable	O
"	O
.	O
This	O
might	O
be	O
misleading	O
in	O
the	O
current	O
implementation	O
of	O
String	B-api_mention
,	O
where	O
the	O
value	O
array	O
is	O
indeed	O
marked	O
private	O
final	O
.	O
It	O
'	O
s	O
still	O
worth	O
noting	O
,	O
though	O
,	O
that	O
there	O
is	O
no	O
way	O
to	O
declare	O
an	O
array	O
in	O
Java	O
as	O
immutable	O
,	O
so	O
care	O
must	O
be	O
taken	O
not	O
to	O
expose	O
it	O
outside	O
its	O
class	O
,	O
even	O
with	O
the	O
proper	O
access	O
modifiers	O
.	O
As	O
this	O
topic	O
seems	O
overwhelmingly	O
popular	O
,	O
here	O
'	O
s	O
some	O
suggested	O
further	O
reading	O
:	O
Heinz	O
Kabutz	O
'	O
s	O
Reflection	O
Madness	O
talk	O
from	O
JavaZone	O
2009	O
,	O
which	O
covers	O
a	O
lot	O
of	O
the	O
issues	O
in	O
the	O
OP	O
,	O
along	O
with	O
other	O
reflection	O
.	O
.	O
.	O
well	O
.	O
.	O
.	O
madness	O
.	O
It	O
covers	O
why	O
this	O
is	O
sometimes	O
useful	O
.	O
And	O
why	O
,	O
most	O
of	O
the	O
time	O
,	O
you	O
should	O
avoid	O
it	O
.	O
:	O
-	O
)	O
Question	O
-	O
23218874	O
,	O
answer	O
-	O
23232560	O
For	O
simple	O
cases	O
such	O
as	O
the	O
one	O
illustrated	O
,	O
they	O
are	O
mostly	O
the	O
same	O
.	O
However	O
,	O
there	O
are	O
a	O
number	O
of	O
subtle	O
differences	O
that	O
might	O
be	O
significant	O
.	O
One	O
issue	O
is	O
with	O
ordering	O
.	O
With	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
the	O
order	O
is	O
undefined	O
.	O
It	O
'	O
s	O
unlikely	O
to	O
occur	O
with	O
sequential	O
streams	O
,	O
still	O
,	O
it	O
'	O
s	O
within	O
the	O
specification	O
for	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
to	O
execute	O
in	O
some	O
arbitrary	O
order	O
.	O
This	O
does	O
occur	O
frequently	O
in	O
parallel	O
streams	O
.	O
By	O
contrast	O
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
always	O
executed	O
in	O
the	O
iteration	O
order	O
of	O
the	O
Iterable	B-api_mention
,	O
if	O
one	O
is	O
specified	O
.	O
Another	O
issue	O
is	O
with	O
side	O
effects	O
.	O
The	O
action	O
specified	O
in	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
required	O
to	O
be	O
non	O
-	O
interfering	O
.	O
(	O
See	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
stream	I-api_mention
package	O
doc	O
.	O
)	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
potentially	O
has	O
fewer	O
restrictions	O
.	O
For	O
the	O
collections	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
generally	O
use	O
that	O
collection	O
'	O
s	O
Iterator	B-api_mention
,	O
most	O
of	O
which	O
are	O
designed	O
to	O
be	O
fail	O
-	O
fast	O
and	O
which	O
will	O
throw	O
ConcurrentModificationException	B-api_mention
if	O
the	O
collection	O
is	O
structurally	O
modified	O
during	O
the	O
iteration	O
.	O
However	O
,	O
modifications	O
that	O
aren	O
'	O
t	O
structural	O
are	O
allowed	O
during	O
iteration	O
.	O
For	O
example	O
,	O
the	O
ArrayList	B-api_mention
class	O
documentation	O
says	O
"	O
merely	O
setting	O
the	O
value	O
of	O
an	O
element	O
is	O
not	O
a	O
structural	O
modification	O
.	O
"	O
Thus	O
,	O
the	O
action	O
for	O
ArrayList	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
allowed	O
to	O
set	O
values	O
in	O
the	O
underlying	O
ArrayList	B-api_mention
without	O
problems	O
.	O
The	O
concurrent	O
collections	O
are	O
yet	O
again	O
different	O
.	O
Instead	O
of	O
fail	O
-	O
fast	O
,	O
they	O
are	O
designed	O
to	O
be	O
weakly	O
consistent	O
.	O
The	O
full	O
definition	O
is	O
at	O
that	O
link	O
.	O
Briefly	O
,	O
though	O
,	O
consider	O
ConcurrentLinkedDeque	B-api_mention
.	O
The	O
action	O
passed	O
to	O
its	O
forEach	B-api_mention
method	O
is	O
allowed	O
to	O
modify	O
the	O
underlying	O
deque	O
,	O
even	O
structurally	O
,	O
and	O
ConcurrentModificationException	B-api_mention
is	O
never	O
thrown	O
.	O
However	O
,	O
the	O
modification	O
that	O
occurs	O
might	O
or	O
might	O
not	O
be	O
visible	O
in	O
this	O
iteration	O
.	O
(	O
Hence	O
the	O
"	O
weak	O
"	O
consistency	O
.	O
)	O
Still	O
another	O
difference	O
is	O
visible	O
if	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
iterating	O
over	O
a	O
synchronized	O
collection	O
.	O
On	O
such	O
a	O
collection	O
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
takes	O
the	O
collection	O
'	O
s	O
lock	O
once	O
and	O
holds	O
it	O
across	O
all	O
the	O
calls	O
to	O
the	O
action	O
method	O
.	O
The	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
call	O
uses	O
the	O
collection	O
'	O
s	O
spliterator	O
,	O
which	O
does	O
not	O
lock	O
,	O
and	O
which	O
relies	O
on	O
the	O
prevailing	O
rule	O
of	O
non	O
-	O
interference	O
.	O
The	O
collection	O
backing	O
the	O
stream	O
could	O
be	O
modified	O
during	O
iteration	O
,	O
and	O
if	O
it	O
is	O
,	O
a	O
ConcurrentModificationException	B-api_mention
or	O
inconsistent	O
behavior	O
could	O
result	O
.	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
15962949	O
If	O
you	O
want	O
to	O
make	O
a	O
copy	O
of	O
:	O
int	O
[	O
]	O
a	O
=	O
{	O
1	O
,	O
2	O
,	O
3	O
,	O
4	O
,	O
5	O
}	O
;	O
This	O
is	O
the	O
way	O
to	O
go	O
:	O
int	O
[	O
]	O
b	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
may	O
be	O
faster	O
than	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
small	O
arrays	O
.	O
Both	O
copy	O
elements	O
equally	O
fast	O
but	O
clone	B-api_mention
(	I-api_mention
)	I-api_mention
returns	O
Object	B-api_mention
so	O
the	O
compiler	O
has	O
to	O
insert	O
an	O
implicit	O
cast	O
to	O
int	O
[	O
]	O
.	O
You	O
can	O
see	O
it	O
in	O
the	O
bytecode	O
,	O
something	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
34250207	O
As	O
I	O
recall	O
,	O
before	O
Java	O
8	O
,	O
the	O
default	O
capacity	O
of	O
ArrayList	B-api_mention
was	O
10	O
.	O
Surprisingly	O
,	O
the	O
comment	O
on	O
the	O
default	O
(	O
void	O
)	O
constructor	O
still	O
says	O
:	O
Constructs	O
an	O
empty	O
list	O
with	O
an	O
initial	O
capacity	O
of	O
ten	O
.	O
From	O
ArrayList	O
.	O
java	O
:	O
#	O
pre	O
Question	O
-	O
21947452	O
I	O
generated	O
two	O
matrices	O
of	O
1000	O
x	O
1000	O
:	O
First	O
Matrix	O
:	O
O	O
and	O
#	O
.	O
Second	O
Matrix	O
:	O
O	O
and	O
B	O
.	O
Using	O
the	O
following	O
code	O
,	O
the	O
first	O
matrix	O
took	O
8	O
.	O
52	O
seconds	O
to	O
complete	O
:	O
#	O
pre	O
With	O
this	O
code	O
,	O
the	O
second	O
matrix	O
took	O
259	O
.	O
152	O
seconds	O
to	O
complete	O
:	O
#	O
pre	O
What	O
is	O
the	O
reason	O
behind	O
the	O
dramatically	O
different	O
run	O
times	O
?	O
As	O
suggested	O
in	O
the	O
comments	O
,	O
printing	O
only	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
takes	O
7	O
.	O
8871	O
seconds	O
,	O
whereas	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
gives	O
still	O
printing	O
.	O
.	O
.	O
.	O
As	O
others	O
who	O
pointed	O
out	O
that	O
it	O
works	O
for	O
them	O
normally	O
,	O
I	O
tried	O
Ideone	O
.	O
com	O
for	O
instance	O
,	O
and	O
both	O
pieces	O
of	O
code	O
execute	O
at	O
the	O
same	O
speed	O
.	O
Test	O
Conditions	O
:	O
#	O
li	O
I	O
ran	O
this	O
test	O
from	O
Netbeans	O
7	O
.	O
2	O
,	O
with	O
the	O
output	O
into	O
its	O
console	O
#	O
li	O
I	O
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
measurements	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
22269778	O
There	O
actually	O
is	O
a	O
trick	O
how	O
to	O
execute	O
a	O
parallel	O
operation	O
in	O
a	O
specific	O
fork	O
-	O
join	O
pool	O
.	O
If	O
you	O
execute	O
it	O
as	O
a	O
task	O
in	O
a	O
fork	O
-	O
join	O
pool	O
,	O
it	O
stays	O
there	O
and	O
does	O
not	O
use	O
the	O
common	O
one	O
.	O
#	O
pre	O
The	O
trick	O
is	O
based	O
on	O
ForkJoinTask	B-api_mention
.	I-api_mention
fork	I-api_mention
which	O
specifies	O
:	O
"	O
Arranges	O
to	O
asynchronously	O
execute	O
this	O
task	O
in	O
the	O
pool	O
the	O
current	O
task	O
is	O
running	O
in	O
,	O
if	O
applicable	O
,	O
or	O
using	O
the	O
ForkJoinPool	B-api_mention
.	I-api_mention
commonPool	I-api_mention
(	I-api_mention
)	I-api_mention
if	O
not	O
inForkJoinPool	B-api_mention
(	I-api_mention
)	I-api_mention
"	O
Question	O
-	O
17828584	O
I	O
was	O
wondering	O
what	O
happens	O
when	O
you	O
try	O
to	O
catch	O
an	O
StackOverflowError	B-api_mention
and	O
came	O
up	O
with	O
the	O
following	O
method	O
:	O
#	O
pre	O
Now	O
my	O
question	O
:	O
Why	O
does	O
this	O
method	O
print	O
'	O
4	O
'	O
?	O
I	O
thought	O
maybe	O
it	O
was	O
because	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
needs	O
3	O
segments	O
on	O
the	O
call	O
stack	O
,	O
but	O
I	O
don	O
'	O
t	O
know	O
where	O
the	O
number	O
3	O
comes	O
from	O
.	O
When	O
you	O
look	O
at	O
the	O
source	O
code	O
(	O
and	O
bytecode	O
)	O
of	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
it	O
normally	O
would	O
lead	O
to	O
far	O
more	O
method	O
invocations	O
than	O
3	O
(	O
so	O
3	O
segments	O
on	O
the	O
call	O
stack	O
would	O
not	O
be	O
sufficient	O
)	O
.	O
If	O
it	O
'	O
s	O
because	O
of	O
optimizations	O
the	O
Hotspot	O
VM	O
applies	O
(	O
method	O
inlining	O
)	O
,	O
I	O
wonder	O
if	O
the	O
result	O
would	O
be	O
different	O
on	O
another	O
VM	O
.	O
Edit	O
:	O
As	O
the	O
output	O
seems	O
to	O
be	O
highly	O
JVM	O
specific	O
,	O
I	O
get	O
the	O
result	O
4	O
using	O
Java	O
(	O
TM	O
)	O
SE	O
Runtime	O
Environment	O
(	O
build	O
1	O
.	O
6	O
.	O
0	O
_	O
41	O
-	O
b02	O
)	O
Java	O
HotSpot	O
(	O
TM	O
)	O
64	O
-	O
Bit	O
Server	O
VM	O
(	O
build	O
20	O
.	O
14	O
-	O
b01	O
,	O
mixed	O
mode	O
)	O
Explanation	O
why	O
I	O
think	O
this	O
question	O
is	O
different	O
from	O
Understanding	O
java	O
stack	O
:	O
My	O
question	O
is	O
not	O
about	O
why	O
there	O
is	O
a	O
cnt	O
>	O
0	O
(	O
obviously	O
because	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
requires	O
stack	O
size	O
and	O
throws	O
another	O
StackOverflowError	B-api_mention
before	O
something	O
gets	O
printed	O
)	O
,	O
but	O
why	O
it	O
has	O
the	O
particular	O
value	O
of	O
4	O
,	O
respectively	O
0	O
,	O
3	O
,	O
8	O
,	O
55	O
or	O
something	O
else	O
on	O
other	O
systems	O
.	O
Question	O
-	O
8189466	O
Note	O
:	O
I	O
am	O
aware	O
of	O
the	O
Iterator	B-api_mention
#	I-api_mention
remove	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
In	O
the	O
following	O
code	O
sample	O
,	O
I	O
don	O
'	O
t	O
understand	O
why	O
the	O
List	B-api_mention
.	I-api_mention
remove	I-api_mention
in	O
main	O
method	O
throws	O
ConcurrentModificationException	B-api_mention
but	O
not	O
in	O
the	O
remove	B-api_mention
method	O
.	O
#	O
pre	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28596792	O
To	O
me	O
,	O
it	O
seems	O
that	O
"	O
because	O
it	O
should	O
behave	O
the	O
same	O
as	O
zero	O
"	O
would	O
make	O
a	O
good	O
answer	O
.	O
Arithmetic	O
overflow	O
and	O
underflow	O
should	O
be	O
handlable	O
similarly	O
.	O
If	O
you	O
underflow	O
from	O
the	O
largest	O
near	O
-	O
infinitesimally	O
small	O
value	O
which	O
can	O
be	O
stored	O
in	O
a	O
float	O
,	O
you	O
get	O
zero	O
,	O
and	O
zeros	O
compare	O
as	O
identical	O
.	O
If	O
you	O
overflow	O
from	O
the	O
largest	O
near	O
-	O
infinitely	O
large	O
value	O
which	O
can	O
be	O
stored	O
in	O
a	O
float	O
,	O
you	O
get	O
INF	O
,	O
and	O
INFs	O
compare	O
as	O
identical	O
.	O
This	O
means	O
that	O
code	O
which	O
handles	O
numbers	O
which	O
are	O
out	O
-	O
of	O
-	O
scope	O
in	O
both	O
directions	O
will	O
not	O
require	O
separate	O
special	O
-	O
casing	O
for	O
one	O
or	O
the	O
other	O
.	O
Instead	O
,	O
either	O
both	O
or	O
neither	O
will	O
need	O
to	O
be	O
treated	O
differently	O
.	O
And	O
the	O
simplest	O
requirement	O
is	O
covered	O
by	O
the	O
"	O
neither	O
"	O
case	O
:	O
you	O
want	O
to	O
check	O
if	O
something	O
over	O
/	O
underflowed	O
,	O
you	O
can	O
compare	O
it	O
to	O
zero	O
/	O
INF	O
using	O
just	O
the	O
normal	O
arithmetic	O
comparison	O
operators	O
,	O
without	O
needing	O
to	O
know	O
you	O
current	O
language	O
'	O
s	O
special	O
syntax	O
for	O
the	O
checking	O
command	O
:	O
is	O
it	O
Math	B-api_mention
.	I-api_mention
isInfinite	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
Float	B-api_mention
.	I-api_mention
checkForPositiveInfinity	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
hasOverflowed	B-api_mention
(	I-api_mention
)	I-api_mention
.	O
.	O
.	O
?	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408482	O
The	O
Java	O
language	O
provides	O
special	O
support	O
for	O
the	O
string	O
concatenation	O
operator	O
(	O
+	O
)	O
and	O
for	O
conversion	O
of	O
other	O
objects	O
to	O
strings	O
.	O
String	B-api_mention
concatenation	O
is	O
implemented	O
through	O
the	O
StringBuilder	B-api_mention
(	O
or	O
StringBuffer	B-api_mention
)	O
class	O
and	O
its	O
append	O
method	O
.	O
Question	O
-	O
13744450	O
,	O
answer	O
-	O
13744816	O
In	O
very	O
simple	O
terms	O
(	O
because	O
the	O
other	O
answers	O
are	O
referring	O
you	O
to	O
all	O
the	O
official	O
design	O
patterns	O
anyway	O
,	O
so	O
look	O
at	O
them	O
for	O
further	O
details	O
)	O
:	O
If	O
you	O
want	O
to	O
have	O
a	O
class	O
which	O
is	O
monitored	O
by	O
other	O
classes	O
in	O
the	O
ecosystem	O
of	O
your	O
program	O
you	O
say	O
that	O
you	O
want	O
the	O
class	O
to	O
be	O
observable	O
.	O
I	O
.	O
e	O
.	O
there	O
might	O
be	O
some	O
changes	O
in	O
its	O
state	O
which	O
you	O
would	O
want	O
to	O
broadcast	O
to	O
the	O
rest	O
of	O
the	O
program	O
.	O
Now	O
,	O
to	O
do	O
this	O
we	O
have	O
to	O
call	O
some	O
kind	O
of	O
method	O
.	O
We	O
don	O
'	O
t	O
want	O
the	O
Observable	B-api_mention
class	O
to	O
be	O
tightly	O
coupled	O
with	O
the	O
classes	O
that	O
are	O
interested	O
in	O
observing	O
it	O
.	O
It	O
doesn	O
'	O
t	O
care	O
who	O
it	O
is	O
as	O
long	O
as	O
it	O
fulfils	O
certain	O
criteria	O
.	O
(	O
Imagine	O
it	O
is	O
a	O
radio	O
station	O
,	O
it	O
doesn	O
'	O
t	O
care	O
who	O
is	O
listening	O
as	O
long	O
as	O
they	O
have	O
an	O
FM	O
radio	O
tuned	O
on	O
their	O
frequency	O
)	O
.	O
To	O
achieve	O
that	O
we	O
use	O
an	O
interface	O
,	O
referred	O
to	O
as	O
the	O
Observer	B-api_mention
.	O
Therefore	O
,	O
the	O
Observable	B-api_mention
class	O
will	O
have	O
a	O
list	O
of	O
Observers	O
(	O
i	O
.	O
e	O
.	O
instances	O
implementing	O
the	O
Observer	B-api_mention
interface	O
methods	O
you	O
might	O
have	O
)	O
.	O
Whenever	O
it	O
wants	O
to	O
broadcast	O
something	O
,	O
it	O
just	O
calls	O
the	O
method	O
on	O
all	O
the	O
observers	O
,	O
one	O
after	O
the	O
other	O
.	O
The	O
last	O
thing	O
to	O
close	O
the	O
puzzle	O
is	O
how	O
will	O
the	O
Observable	B-api_mention
class	O
know	O
who	O
is	O
interested	O
?	O
So	O
the	O
Observable	B-api_mention
class	O
must	O
offer	O
some	O
mechanism	O
to	O
allow	O
Observers	O
to	O
register	O
their	O
interest	O
.	O
A	O
method	O
such	O
as	O
addObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
internally	O
adds	O
the	O
Observer	O
to	O
the	O
list	O
of	O
observers	O
,	O
so	O
that	O
when	O
something	O
important	O
happens	O
,	O
it	O
loops	O
through	O
the	O
list	O
and	O
calls	O
the	O
respective	O
notification	O
method	O
of	O
the	O
Observer	B-api_mention
interface	O
of	O
each	O
instance	O
in	O
the	O
list	O
.	O
It	O
might	O
be	O
that	O
in	O
the	O
interview	O
they	O
did	O
not	O
ask	O
you	O
explicitly	O
about	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observer	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observable	I-api_mention
but	O
about	O
the	O
generic	O
concept	O
.	O
The	O
concept	O
is	O
a	O
design	O
pattern	O
,	O
which	O
Java	O
happens	O
to	O
provide	O
support	O
for	O
directly	O
out	O
of	O
the	O
box	O
to	O
help	O
you	O
implement	O
it	O
quickly	O
when	O
you	O
need	O
it	O
.	O
So	O
I	O
would	O
suggest	O
that	O
you	O
understand	O
the	O
concept	O
rather	O
than	O
the	O
actual	O
methods	O
/	O
classes	O
(	O
which	O
you	O
can	O
look	O
up	O
when	O
you	O
need	O
them	O
)	O
.	O
UPDATE	O
In	O
response	O
to	O
your	O
comment	O
,	O
the	O
actual	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observable	I-api_mention
class	O
offers	O
the	O
following	O
facilities	O
:	O
#	O
li	O
Maintaining	O
a	O
list	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observer	I-api_mention
instances	O
.	O
New	O
instances	O
interested	O
in	O
being	O
notified	O
can	O
be	O
added	O
through	O
addObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
removed	O
through	O
deleteObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Maintaining	O
an	O
internal	O
state	O
,	O
specifying	O
whether	O
the	O
object	O
has	O
changed	O
since	O
the	O
last	O
notification	O
to	O
the	O
observers	O
.	O
This	O
is	O
useful	O
because	O
it	O
separates	O
the	O
part	O
where	O
you	O
say	O
that	O
the	O
Observable	B-api_mention
has	O
changed	O
,	O
from	O
the	O
part	O
where	O
you	O
notify	O
the	O
changes	O
.	O
(	O
E	O
.	O
g	O
.	O
Its	O
useful	O
if	O
you	O
have	O
multiple	O
changes	O
happening	O
and	O
you	O
only	O
want	O
to	O
notify	O
at	O
the	O
end	O
of	O
the	O
process	O
rather	O
than	O
at	O
each	O
small	O
step	O
)	O
.	O
This	O
is	O
done	O
through	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
So	O
you	O
just	O
call	O
it	O
when	O
you	O
changed	O
something	O
to	O
the	O
Observable	B-api_mention
and	O
you	O
want	O
the	O
rest	O
of	O
the	O
Observers	B-api_mention
to	O
eventually	O
know	O
about	O
it	O
.	O
#	O
li	O
Notifying	O
all	O
observers	O
that	O
the	O
specific	O
Observable	B-api_mention
has	O
changed	O
state	O
.	O
This	O
is	O
done	O
through	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
checks	O
if	O
the	O
object	O
has	O
actually	O
changed	O
(	O
i	O
.	O
e	O
.	O
a	O
call	O
to	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
made	O
)	O
before	O
proceeding	O
with	O
the	O
notification	O
.	O
There	O
are	O
2	O
versions	O
,	O
one	O
with	O
no	O
arguments	O
and	O
one	O
with	O
an	O
Object	O
argument	O
,	O
in	O
case	O
you	O
want	O
to	O
pass	O
some	O
extra	O
information	O
with	O
the	O
notification	O
.	O
Internally	O
what	O
happens	O
is	O
that	O
it	O
just	O
iterates	O
through	O
the	O
list	O
of	O
Observer	B-api_mention
instances	O
and	O
calls	O
the	O
update	B-api_mention
(	I-api_mention
Observable	I-api_mention
o	I-api_mention
,	I-api_mention
Object	I-api_mention
arg	I-api_mention
)	I-api_mention
method	O
for	O
each	O
of	O
them	O
.	O
This	O
tells	O
the	O
Observer	B-api_mention
which	O
was	O
the	O
Observable	B-api_mention
object	O
that	O
changed	O
(	O
you	O
could	O
be	O
observing	O
more	O
than	O
one	O
)	O
,	O
and	O
the	O
extra	O
Object	O
arg	O
to	O
potentially	O
carry	O
some	O
extra	O
information	O
(	O
passed	O
through	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571352	O
You	O
can	O
use	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
returns	O
the	O
byte	O
[	O
]	O
array	O
.	O
Question	O
-	O
27908213	O
Are	O
enum	O
names	O
interned	O
in	O
Java	O
?	O
I	O
.	O
e	O
.	O
is	O
it	O
guaranteed	O
that	O
enum1	O
.	O
name	O
(	O
args	O
)	O
=	O
=	O
enum2	O
.	O
name	O
(	O
args	O
)	O
in	O
case	O
of	O
the	O
same	O
name	O
?	O
And	O
is	O
it	O
safe	O
to	O
compare	O
enum	O
.	O
name	O
(	O
args	O
)	O
to	O
a	O
String	B-api_mention
that	O
is	O
guaranteed	O
to	O
be	O
interned	O
.	O
Question	O
-	O
28840047	O
,	O
answer	O
-	O
28840048	O
This	O
is	O
of	O
course	O
a	O
"	O
feature	O
"	O
.	O
The	O
ConcurrentHashMap	B-api_mention
.	I-api_mention
computeIfAbsent	I-api_mention
(	I-api_mention
)	I-api_mention
Javadoc	O
reads	O
:	O
#	O
blockquote	O
The	O
"	O
must	O
not	O
"	O
wording	O
is	O
a	O
clear	O
contract	O
,	O
which	O
my	O
algorithm	O
violated	O
,	O
although	O
not	O
for	O
the	O
same	O
concurrency	O
reasons	O
.	O
What	O
'	O
s	O
still	O
interesting	O
is	O
that	O
there	O
is	O
no	O
ConcurrentModificationException	O
.	O
Instead	O
,	O
the	O
program	O
just	O
never	O
halts	O
-	O
which	O
still	O
is	O
a	O
rather	O
dangerous	O
bug	O
in	O
my	O
opinion	O
(	O
i	O
.	O
e	O
.	O
infinite	O
loops	O
.	O
or	O
:	O
anything	O
that	O
can	O
possibly	O
go	O
wrong	O
,	O
does	O
)	O
.	O
The	O
simplest	O
use	O
-	O
site	O
solution	O
for	O
this	O
concrete	O
problem	O
would	O
be	O
to	O
not	O
use	O
a	O
ConcurrentHashMap	B-api_mention
,	O
but	O
just	O
a	O
HashMap	B-api_mention
instead	O
:	O
static	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
cache	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Now	O
,	O
everything	O
works	O
fine	O
.	O
Note	O
:	O
The	O
HashMap	B-api_mention
.	I-api_mention
computeIfAbsent	I-api_mention
(	I-api_mention
)	I-api_mention
or	O
Map	B-api_mention
.	I-api_mention
computeIfAbsent	I-api_mention
(	I-api_mention
)	I-api_mention
Javadoc	O
don	O
'	O
t	O
forbid	O
such	O
recursive	O
computation	O
,	O
which	O
is	O
of	O
course	O
ridiculous	O
as	O
the	O
type	O
of	O
the	O
cache	O
is	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
not	O
ConcurrentHashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
It	O
is	O
very	O
dangerous	O
for	O
subtypes	O
to	O
drastically	O
re	O
-	O
define	O
super	O
type	O
contracts	O
(	O
Set	B-api_mention
vs	O
.	O
SortedSet	B-api_mention
is	O
greeting	O
)	O
.	O
It	O
should	O
thus	O
be	O
forbidden	O
also	O
in	O
super	O
types	O
,	O
to	O
perform	O
such	O
recursion	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
20358920	O
Fixed	O
size	O
List	B-api_mention
The	O
easiest	O
way	O
,	O
that	O
I	O
know	O
of	O
,	O
is	O
to	O
create	O
a	O
fixed	O
-	O
size	O
single	O
element	O
List	B-api_mention
with	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	O
T	O
.	O
.	O
.	O
)	O
like	O
/	O
/	O
Returns	O
a	O
List	O
backed	O
by	O
a	O
varargs	O
T	O
.	O
return	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Variable	O
size	O
List	B-api_mention
If	O
it	O
needs	O
vary	O
in	O
size	O
you	O
can	O
construct	O
an	O
ArrayList	B-api_mention
and	O
the	O
fixed	O
-	O
size	O
List	B-api_mention
like	O
return	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
(	O
in	O
Java	O
7	O
+	O
)	O
you	O
can	O
use	O
the	O
diamond	O
operator	O
<	O
>	O
to	O
make	O
it	O
return	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29495065	O
#	O
li	O
It	O
is	O
checking	O
if	O
newType	O
is	O
array	O
of	O
Objects	O
or	O
not	O
:	O
#	O
pre	O
Why	O
to	O
do	O
that	O
?	O
Because	O
new	O
Object	B-api_mention
[	O
n	O
]	O
is	O
faster	O
than	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
an	O
array	O
of	O
types	O
defined	O
by	O
the	O
first	O
argument	O
,	O
eg	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
-	O
>	O
String	B-api_mention
[	O
]	O
.	O
Note	O
that	O
String	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
.	I-api_mention
getComponentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
#	O
li	O
You	O
cannot	O
use	O
it	O
like	O
that	O
,	O
but	O
it	O
can	O
be	O
like	O
this	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
in	O
this	O
case	O
it	O
depends	O
only	O
on	O
actual	O
type	O
of	O
elements	O
,	O
eg	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
fail	O
,	O
you	O
cannot	O
write	O
in	O
Integer	B-api_mention
[	O
]	O
anything	O
but	O
Integer	B-api_mention
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509669	O
The	O
difference	O
between	O
d	O
and	O
e	O
is	O
that	O
when	O
you	O
concatenate	O
string	O
literals	O
,	O
the	O
concatenation	O
is	O
performed	O
at	O
compile	O
time	O
.	O
Java	O
compiler	O
treats	O
StringLiteral	O
+	O
StringLiteral	O
expression	O
in	O
the	O
same	O
way	O
as	O
StringLiteral	O
expression	O
,	O
producing	O
the	O
same	O
literal	O
at	O
compile	O
time	O
.	O
Since	O
all	O
String	B-api_mention
literals	O
get	O
interned	O
,	O
d	O
,	O
which	O
is	O
a	O
result	O
of	O
StringLiteral	O
+	O
StringLiteral	O
,	O
also	O
ends	O
up	O
referencing	O
the	O
same	O
object	O
as	O
a	O
and	O
b	O
'	O
s	O
StringLiteral	O
.	O
The	O
expression	O
for	O
e	O
,	O
which	O
is	O
c	O
+	O
StringLiteral	O
,	O
is	O
evaluated	O
at	O
runtime	O
.	O
Even	O
though	O
it	O
produces	O
the	O
same	O
string	O
,	O
this	O
fact	O
is	O
not	O
used	O
by	O
the	O
compiler	O
.	O
That	O
'	O
s	O
why	O
a	O
different	O
String	B-api_mention
object	O
is	O
produced	O
,	O
resulting	O
in	O
failed	O
comparison	O
on	O
=	O
=	O
.	O
Question	O
-	O
18777989	O
,	O
answer	O
-	O
37905386	O
Many	O
junior	O
developers	O
make	O
the	O
mistake	O
of	O
thinking	O
of	O
interfaces	O
,	O
abstract	O
and	O
concrete	O
classes	O
as	O
slight	O
variations	O
of	O
the	O
same	O
thing	O
,	O
and	O
choose	O
one	O
of	O
them	O
purely	O
on	O
technical	O
grounds	O
:	O
Do	O
I	O
need	O
multiple	O
inheritance	O
?	O
Do	O
I	O
need	O
some	O
place	O
to	O
put	O
common	O
methods	O
?	O
Do	O
I	O
need	O
to	O
bother	O
with	O
something	O
other	O
than	O
just	O
a	O
concrete	O
class	O
?	O
This	O
is	O
wrong	O
,	O
and	O
hidden	O
in	O
these	O
questions	O
is	O
the	O
main	O
problem	O
:	O
"	O
I	O
"	O
.	O
When	O
you	O
write	O
code	O
for	O
yourself	O
,	O
by	O
yourself	O
,	O
you	O
rarely	O
think	O
of	O
other	O
present	O
or	O
future	O
developers	O
working	O
on	O
or	O
with	O
your	O
code	O
.	O
Interfaces	O
and	O
abstract	O
classes	O
,	O
although	O
apparently	O
similar	O
from	O
a	O
technical	O
point	O
of	O
view	O
,	O
have	O
completely	O
different	O
meanings	O
and	O
purposes	O
.	O
Summary	O
#	O
li	O
An	O
interface	O
defines	O
a	O
contract	O
that	O
some	O
implementation	O
will	O
fulfill	O
for	O
you	O
.	O
#	O
li	O
An	O
abstract	O
class	O
provides	O
a	O
default	O
behavior	O
that	O
your	O
implementation	O
can	O
reuse	O
.	O
These	O
two	O
points	O
above	O
is	O
what	O
I	O
'	O
m	O
looking	O
for	O
when	O
interviewing	O
,	O
and	O
is	O
a	O
compact	O
enough	O
summary	O
.	O
Read	O
on	O
for	O
more	O
details	O
.	O
Alternative	O
summary	O
#	O
li	O
An	O
interface	O
is	O
for	O
defining	O
public	O
APIs	O
#	O
li	O
An	O
abstract	O
class	O
is	O
for	O
internal	O
use	O
,	O
and	O
for	O
defining	O
SPIs	O
By	O
example	O
To	O
put	O
it	O
differently	O
:	O
A	O
concrete	O
class	O
does	O
the	O
actual	O
work	O
,	O
in	O
a	O
very	O
specific	O
way	O
.	O
For	O
example	O
,	O
an	O
ArrayList	B-api_mention
uses	O
a	O
contiguous	O
area	O
of	O
memory	O
to	O
store	O
a	O
list	O
of	O
objects	O
in	O
a	O
compact	O
manner	O
which	O
offers	O
fast	O
random	O
access	O
,	O
iteration	O
,	O
and	O
in	O
-	O
place	O
changes	O
,	O
but	O
is	O
terrible	O
at	O
insertions	O
,	O
deletions	O
,	O
and	O
occasionally	O
even	O
additions	O
;	O
meanwhile	O
,	O
a	O
LinkedList	B-api_mention
uses	O
double	O
-	O
linked	O
nodes	O
to	O
store	O
a	O
list	O
of	O
objects	O
,	O
which	O
instead	O
offers	O
fast	O
iteration	O
,	O
in	O
-	O
place	O
changes	O
,	O
and	O
insertion	O
/	O
deletion	O
/	O
addition	O
,	O
but	O
is	O
terrible	O
at	O
random	O
access	O
.	O
These	O
two	O
types	O
of	O
lists	O
are	O
optimized	O
for	O
different	O
use	O
cases	O
,	O
and	O
it	O
matters	O
a	O
lot	O
how	O
you	O
'	O
re	O
going	O
to	O
use	O
them	O
.	O
When	O
you	O
'	O
re	O
trying	O
to	O
squeeze	O
performance	O
out	O
of	O
a	O
list	O
that	O
you	O
'	O
re	O
heavily	O
interacting	O
with	O
,	O
and	O
when	O
picking	O
the	O
type	O
of	O
list	O
is	O
up	O
to	O
you	O
,	O
you	O
should	O
carefully	O
pick	O
which	O
one	O
you	O
'	O
re	O
instantiating	O
.	O
On	O
the	O
other	O
hand	O
,	O
high	O
level	O
users	O
of	O
a	O
list	O
don	O
'	O
t	O
really	O
care	O
how	O
it	O
is	O
actually	O
implemented	O
,	O
and	O
they	O
should	O
be	O
insulated	O
from	O
these	O
details	O
.	O
Let	O
'	O
s	O
imagine	O
that	O
Java	O
didn	O
'	O
t	O
expose	O
the	O
List	B-api_mention
interface	O
,	O
but	O
only	O
had	O
a	O
concrete	O
List	B-api_mention
class	O
that	O
'	O
s	O
actually	O
what	O
LinkedList	B-api_mention
is	O
right	O
now	O
.	O
All	O
Java	O
developers	O
would	O
have	O
tailored	O
their	O
code	O
to	O
fit	O
the	O
implementation	O
details	O
:	O
avoid	O
random	O
access	O
,	O
add	O
a	O
cache	O
to	O
speed	O
up	O
access	O
,	O
or	O
just	O
reimplement	O
ArrayList	B-api_mention
on	O
their	O
own	O
,	O
although	O
it	O
would	O
be	O
incompatible	O
with	O
all	O
the	O
other	O
code	O
that	O
actually	O
works	O
with	O
List	B-api_mention
only	O
.	O
That	O
would	O
be	O
terrible	O
.	O
.	O
.	O
But	O
now	O
imagine	O
that	O
the	O
Java	O
masters	O
actually	O
realize	O
that	O
a	O
linked	O
list	O
is	O
terrible	O
for	O
most	O
actual	O
use	O
cases	O
,	O
and	O
decided	O
to	O
switch	O
over	O
to	O
an	O
array	O
list	O
for	O
their	O
only	O
List	B-api_mention
class	O
available	O
.	O
This	O
would	O
affect	O
the	O
performance	O
of	O
every	O
Java	O
program	O
in	O
the	O
world	O
,	O
and	O
people	O
wouldn	O
'	O
t	O
be	O
happy	O
about	O
it	O
.	O
And	O
the	O
main	O
culprit	O
is	O
that	O
implementation	O
details	O
were	O
available	O
,	O
and	O
the	O
developers	O
assumed	O
that	O
those	O
details	O
are	O
a	O
permanent	O
contract	O
that	O
they	O
can	O
rely	O
on	O
.	O
This	O
is	O
why	O
it	O
'	O
s	O
important	O
to	O
hide	O
implementation	O
details	O
,	O
and	O
only	O
define	O
an	O
abstract	O
contract	O
.	O
This	O
is	O
the	O
purpose	O
of	O
an	O
interface	O
:	O
define	O
what	O
kind	O
of	O
input	O
a	O
method	O
accepts	O
,	O
and	O
what	O
kind	O
of	O
output	O
is	O
expected	O
,	O
without	O
exposing	O
all	O
the	O
guts	O
that	O
would	O
tempt	O
programmers	O
to	O
tweak	O
their	O
code	O
to	O
fit	O
the	O
internal	O
details	O
that	O
might	O
change	O
with	O
any	O
future	O
update	O
.	O
An	O
abstract	O
class	O
is	O
in	O
the	O
middle	O
between	O
interfaces	O
and	O
concrete	O
classes	O
.	O
It	O
is	O
supposed	O
to	O
help	O
implementations	O
share	O
common	O
or	O
boring	O
code	O
.	O
For	O
example	O
,	O
AbstractCollection	B-api_mention
provides	O
basic	O
implementations	O
for	O
isEmpty	B-api_mention
based	O
on	O
size	O
is	O
0	O
,	O
contains	B-api_mention
as	O
iterate	O
and	O
compare	O
,	O
addAll	B-api_mention
as	O
repeated	O
add	B-api_mention
,	O
and	O
so	O
on	O
.	O
This	O
lets	O
implementations	O
focus	O
on	O
the	O
crucial	O
parts	O
that	O
differentiate	O
between	O
them	O
:	O
how	O
to	O
actually	O
store	O
and	O
retrieve	O
data	O
.	O
Another	O
perspective	O
:	O
APIs	O
versus	O
SPIs	O
Interfaces	O
are	O
low	O
-	O
cohesion	O
gateways	O
between	O
different	O
parts	O
of	O
code	O
.	O
They	O
allow	O
libraries	O
to	O
exist	O
and	O
evolve	O
without	O
breaking	O
every	O
library	O
user	O
when	O
something	O
changes	O
internally	O
.	O
It	O
'	O
s	O
called	O
Application	O
Programming	O
Interface	O
Abstract	O
classes	O
are	O
high	O
-	O
cohesion	O
helpers	O
to	O
be	O
used	O
when	O
implementing	O
an	O
interface	O
,	O
assuming	O
some	O
level	O
of	O
implementation	O
details	O
.	O
Alternatively	O
,	O
abstract	O
classes	O
are	O
used	O
for	O
defining	O
SPIs	O
,	O
Service	O
Provider	O
Interfaces	O
.	O
The	O
difference	O
between	O
an	O
API	O
and	O
an	O
SPI	O
is	O
subtle	O
,	O
but	O
important	O
:	O
for	O
an	O
API	O
,	O
the	O
focus	O
is	O
on	O
who	O
uses	O
it	O
,	O
and	O
for	O
an	O
SPI	O
the	O
focus	O
is	O
on	O
who	O
implements	O
it	O
.	O
Adding	O
methods	O
to	O
an	O
API	O
is	O
easy	O
,	O
all	O
existing	O
users	O
of	O
the	O
API	O
will	O
still	O
compile	O
.	O
Adding	O
methods	O
to	O
an	O
SPI	O
is	O
hard	O
,	O
since	O
every	O
service	O
provider	O
(	O
concrete	O
implementation	O
)	O
will	O
have	O
to	O
implement	O
the	O
new	O
methods	O
.	O
If	O
interfaces	O
are	O
used	O
to	O
define	O
an	O
SPI	O
,	O
a	O
provider	O
will	O
have	O
to	O
release	O
a	O
new	O
version	O
whenever	O
the	O
SPI	O
contract	O
changes	O
.	O
If	O
abstract	O
classes	O
are	O
used	O
instead	O
,	O
new	O
methods	O
could	O
either	O
be	O
defined	O
in	O
terms	O
of	O
existing	O
abstract	O
methods	O
,	O
or	O
as	O
empty	O
throw	O
not	O
implemented	O
exception	O
stubs	O
,	O
which	O
will	O
at	O
least	O
allow	O
an	O
older	O
version	O
of	O
a	O
service	O
implementation	O
to	O
still	O
compile	O
and	O
run	O
.	O
A	O
note	O
on	O
Java	O
8	O
and	O
default	O
methods	O
Although	O
Java	O
8	O
introduced	O
default	O
methods	O
for	O
interfaces	O
,	O
which	O
makes	O
the	O
line	O
between	O
interfaces	O
and	O
abstract	O
classes	O
even	O
blurrier	O
,	O
this	O
wasn	O
'	O
t	O
so	O
that	O
implementations	O
can	O
reuse	O
code	O
,	O
but	O
to	O
make	O
it	O
easier	O
to	O
change	O
interfaces	O
that	O
serve	O
both	O
as	O
an	O
API	O
and	O
as	O
an	O
SPI	O
(	O
or	O
are	O
wrongly	O
used	O
for	O
defining	O
SPIs	O
instead	O
of	O
abstract	O
classes	O
)	O
.	O
"	O
Book	O
knowledge	O
"	O
The	O
technical	O
details	O
provided	O
in	O
the	O
OP	O
'	O
s	O
answer	O
are	O
considered	O
"	O
book	O
knowledge	O
"	O
because	O
this	O
is	O
usually	O
the	O
approach	O
used	O
in	O
school	O
and	O
in	O
most	O
technology	O
books	O
about	O
a	O
language	O
:	O
what	O
a	O
thing	O
is	O
,	O
not	O
how	O
to	O
use	O
it	O
in	O
practice	O
,	O
especially	O
in	O
large	O
scale	O
applications	O
.	O
Here	O
'	O
s	O
an	O
analogy	O
:	O
supposed	O
the	O
question	O
was	O
:	O
#	O
blockquote	O
The	O
technical	O
answer	O
sounds	O
like	O
:	O
#	O
blockquote	O
That	O
is	O
all	O
true	O
,	O
but	O
completely	O
misses	O
the	O
points	O
that	O
they	O
are	O
two	O
completely	O
different	O
things	O
,	O
and	O
both	O
can	O
be	O
used	O
at	O
the	O
same	O
time	O
for	O
different	O
purposes	O
,	O
and	O
the	O
"	O
doing	O
it	O
"	O
aspect	O
is	O
not	O
the	O
most	O
important	O
thing	O
about	O
either	O
of	O
the	O
two	O
options	O
.	O
The	O
answer	O
lacks	O
perspective	O
,	O
it	O
shows	O
an	O
immature	O
way	O
of	O
thinking	O
,	O
while	O
correctly	O
presenting	O
true	O
"	O
facts	O
"	O
.	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
29527145	O
Adding	O
local	O
classes	O
,	O
lambdas	O
and	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
complete	O
the	O
previous	O
two	O
answers	O
.	O
Further	O
,	O
I	O
add	O
arrays	O
of	O
lambdas	O
and	O
arrays	O
of	O
anonymous	O
classes	O
(	O
which	O
do	O
not	O
make	O
any	O
sense	O
in	O
practice	O
though	O
)	O
:	O
#	O
pre	O
This	O
is	O
the	O
full	O
output	O
:	O
#	O
pre	O
So	O
,	O
here	O
are	O
the	O
rules	O
.	O
First	O
,	O
lets	O
start	O
with	O
primitive	O
types	O
and	O
void	O
:	O
#	O
li	O
If	O
the	O
class	O
object	O
represents	O
a	O
primitive	O
type	O
or	O
void	O
,	O
all	O
the	O
four	O
methods	O
simply	O
returns	O
its	O
name	O
.	O
Now	O
the	O
rules	O
for	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
Every	O
non	O
-	O
lambda	O
and	O
non	O
-	O
array	O
class	O
or	O
interface	O
(	O
i	O
.	O
e	O
,	O
top	O
-	O
level	O
,	O
nested	O
,	O
inner	O
,	O
local	O
and	O
anonymous	O
)	O
has	O
a	O
name	O
(	O
which	O
is	O
returned	O
by	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
that	O
is	O
the	O
package	O
name	O
followed	O
by	O
a	O
dot	O
(	O
if	O
there	O
is	O
a	O
package	O
)	O
,	O
followed	O
by	O
the	O
name	O
of	O
its	O
class	O
-	O
file	O
as	O
generated	O
by	O
the	O
compiler	O
(	O
whithout	O
the	O
suffix	O
.	O
class	O
)	O
.	O
If	O
there	O
is	O
no	O
package	O
,	O
it	O
is	O
simply	O
the	O
name	O
of	O
the	O
class	O
-	O
file	O
.	O
If	O
the	O
class	O
is	O
an	O
inner	O
,	O
nested	O
,	O
local	O
or	O
anonymous	O
class	O
,	O
the	O
compiler	O
should	O
generate	O
at	O
least	O
one	O
$	O
in	O
its	O
class	O
-	O
file	O
name	O
.	O
Note	O
that	O
for	O
anonymous	O
classes	O
,	O
the	O
class	O
name	O
would	O
end	O
with	O
a	O
dollar	O
-	O
sign	O
followed	O
by	O
a	O
number	O
.	O
#	O
li	O
Lambda	O
class	O
names	O
are	O
generally	O
unpredictable	O
,	O
and	O
you	O
shouldn	O
'	O
t	O
care	O
about	O
they	O
anyway	O
.	O
Exactly	O
,	O
their	O
name	O
is	O
the	O
name	O
of	O
the	O
enclosing	O
class	O
,	O
followed	O
by	O
$	O
$	O
Lambda	O
$	O
,	O
followed	O
by	O
a	O
number	O
,	O
followed	O
by	O
a	O
slash	O
,	O
followed	O
by	O
another	O
number	O
.	O
#	O
li	O
The	O
class	O
descriptor	O
of	O
the	O
primitives	O
are	O
Z	O
for	O
boolean	O
,	O
B	O
for	O
byte	O
,	O
S	O
for	O
short	O
,	O
C	O
for	O
char	O
,	O
I	O
for	O
int	O
,	O
J	O
for	O
long	O
,	O
F	O
for	O
float	O
and	O
D	O
for	O
double	O
.	O
For	O
non	O
-	O
array	O
classes	O
and	O
interfaces	O
the	O
class	O
descriptor	O
is	O
L	O
followed	O
by	O
what	O
is	O
given	O
by	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
followed	O
by	O
;	O
.	O
For	O
array	O
classes	O
,	O
the	O
class	O
descriptor	O
is	O
[	O
followed	O
by	O
the	O
class	O
descriptor	O
of	O
the	O
component	O
type	O
(	O
which	O
may	O
be	O
itself	O
another	O
array	O
class	O
)	O
.	O
#	O
li	O
For	O
array	O
classes	O
,	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
its	O
class	O
descriptor	O
.	O
This	O
rule	O
seems	O
to	O
fail	O
only	O
for	O
array	O
classes	O
whose	O
the	O
component	O
type	O
is	O
a	O
lambda	O
(	O
which	O
possibly	O
is	O
a	O
bug	O
)	O
,	O
but	O
hopefully	O
this	O
should	O
not	O
matter	O
anyway	O
because	O
there	O
is	O
no	O
point	O
even	O
on	O
the	O
existence	O
of	O
array	O
classes	O
whose	O
component	O
type	O
is	O
a	O
lambda	O
.	O
Now	O
,	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
If	O
the	O
class	O
instance	O
represents	O
an	O
interface	O
(	O
or	O
an	O
annotation	O
,	O
which	O
is	O
a	O
special	O
type	O
of	O
interface	O
)	O
,	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
StringLiteral	O
+	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
is	O
a	O
primitive	O
,	O
it	O
returns	O
simply	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
is	O
something	O
else	O
(	O
a	O
class	O
type	O
,	O
even	O
if	O
it	O
is	O
a	O
pretty	O
weird	O
one	O
)	O
,	O
it	O
returns	O
StringLiteral	O
+	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
For	O
top	O
-	O
level	O
classes	O
and	O
interfaces	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
just	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
.	O
#	O
li	O
The	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
null	O
for	O
anonymous	O
or	O
local	O
classes	O
and	O
for	O
array	O
classes	O
of	O
those	O
.	O
#	O
li	O
For	O
inner	O
and	O
nested	O
classes	O
and	O
interfaces	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
would	O
replacing	O
the	O
compiler	O
-	O
introduced	O
dollar	O
-	O
signs	O
by	O
dots	O
.	O
#	O
li	O
For	O
array	O
classes	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
null	O
if	O
the	O
canonical	O
name	O
of	O
the	O
component	O
type	O
is	O
null	O
.	O
Otherwise	O
,	O
it	O
returns	O
the	O
canonical	O
name	O
of	O
the	O
component	O
type	O
followed	O
by	O
[	O
]	O
.	O
The	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
For	O
top	O
-	O
level	O
,	O
nested	O
,	O
inner	O
and	O
local	O
classes	O
,	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
the	O
name	O
of	O
the	O
class	O
as	O
written	O
in	O
the	O
source	O
file	O
.	O
#	O
li	O
For	O
anonymous	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
empty	O
String	B-api_mention
.	O
#	O
li	O
For	O
lambda	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
just	O
returns	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
return	O
without	O
the	O
package	O
name	O
.	O
This	O
do	O
not	O
makes	O
much	O
sense	O
and	O
looks	O
like	O
a	O
bug	O
for	O
me	O
,	O
but	O
there	O
is	O
no	O
point	O
in	O
calling	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
lambda	O
class	O
to	O
start	O
with	O
.	O
#	O
li	O
For	O
array	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
the	O
simple	O
name	O
of	O
the	O
component	O
class	O
followed	O
by	O
[	O
]	O
.	O
This	O
have	O
the	O
funny	O
/	O
weird	O
side	O
-	O
effect	O
that	O
array	O
classes	O
whose	O
component	O
type	O
is	O
an	O
anonymous	O
class	O
have	O
just	O
[	O
]	O
as	O
their	O
simple	O
names	O
.	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
16252296	O
Use	O
util	O
method	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
class	O
,	O
i	O
.	O
e	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
In	O
fact	O
,	O
if	O
you	O
want	O
to	O
sort	O
custom	O
object	O
you	O
can	O
use	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
see	O
collections	O
api	O
Question	O
-	O
16148575	O
I	O
am	O
trying	O
to	O
build	O
a	O
HashMap	B-api_mention
which	O
will	O
have	O
integer	O
as	O
keys	O
and	O
objects	O
as	O
values	O
.	O
My	O
syntax	O
is	O
:	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
,	O
the	O
error	O
returned	O
is	O
-	O
Syntax	O
error	O
on	O
token	O
"	O
int	O
"	O
,	O
Dimensions	O
expected	O
after	O
this	O
token	O
-	O
I	O
don	O
'	O
t	O
understand	O
why	O
I	O
should	O
add	O
a	O
dimension	O
(	O
ie	O
:	O
making	O
the	O
int	O
into	O
an	O
array	O
)	O
since	O
I	O
only	O
need	O
to	O
store	O
a	O
digit	O
as	O
key	O
.	O
What	O
could	O
I	O
do	O
?	O
Thanks	O
in	O
advance	O
!	O
:	O
)	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
5585800	O
int	O
foo	O
=	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
See	O
the	O
Java	O
Documentation	O
for	O
more	O
information	O
.	O
(	O
If	O
you	O
have	O
it	O
in	O
a	O
StringBuilder	B-api_mention
(	O
or	O
the	O
ancient	O
StringBuffer	B-api_mention
)	O
,	O
you	O
'	O
ll	O
need	O
to	O
do	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
)	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331243	O
Create	O
a	O
DateTimeFormatter	B-api_mention
using	O
DateTimeFormat	B-api_mention
.	I-api_mention
forPattern	I-api_mention
(	O
String	B-api_mention
)	O
Using	O
Joda	O
time	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
Also	O
,	O
if	O
you	O
wanted	O
to	O
use	O
standard	O
Java	O
,	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25850576	O
#	O
li	O
Is	O
the	O
definition	O
of	O
a	O
marker	B-api_mention
interface	O
mentioned	O
above	O
in	O
1st	O
point	O
wrong	O
?	O
-	O
It	O
is	O
correct	O
in	O
the	O
parts	O
that	O
(	O
1	O
)	O
a	O
marker	B-api_mention
interface	O
must	O
be	O
empty	O
,	O
and	O
(	O
2	O
)	O
implementing	O
it	O
is	O
meant	O
to	O
imply	O
some	O
special	O
treatment	O
of	O
the	O
implementing	O
class	O
.	O
The	O
part	O
that	O
is	O
incorrect	O
is	O
that	O
it	O
implies	O
that	O
JVM	O
or	O
the	O
compiler	O
would	O
treat	O
the	O
objects	O
of	O
that	O
class	O
differently	O
:	O
you	O
are	O
correct	O
in	O
observing	O
that	O
it	O
is	O
the	O
code	O
of	O
Java	O
class	O
library	O
that	O
treats	O
these	O
objects	O
as	O
cloneable	O
,	O
serializable	O
,	O
etc	O
.	O
It	O
has	O
nothing	O
to	O
do	O
with	O
the	O
compiler	O
or	O
the	O
JVM	O
.	O
#	O
li	O
instead	O
of	O
using	O
the	O
instanceOf	B-api_mention
operator	O
why	O
can	O
'	O
t	O
the	O
method	O
be	O
something	O
like	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
that	O
there	O
is	O
a	O
compile	O
-	O
time	O
type	O
checking	O
-	O
This	O
lets	O
you	O
avoid	O
polluting	O
your	O
code	O
with	O
the	O
name	O
of	O
the	O
marker	O
interface	O
when	O
a	O
"	O
plain	O
Object	O
"	O
is	O
needed	O
.	O
For	O
example	O
,	O
if	O
you	O
make	O
a	O
class	O
that	O
needs	O
to	O
be	O
serializable	O
,	O
and	O
has	O
object	O
members	O
,	O
you	O
would	O
be	O
forced	O
to	O
either	O
do	O
casting	O
or	O
make	O
your	O
objects	O
Serializable	B-api_mention
at	O
compile	O
time	O
.	O
This	O
is	O
inconvenient	O
,	O
because	O
the	O
interface	O
is	O
devoid	O
of	O
any	O
functionality	O
.	O
#	O
li	O
How	O
Annotations	B-api_mention
are	O
better	O
than	O
Marker	B-api_mention
Interfaces	I-api_mention
?	O
-	O
They	O
let	O
you	O
achieve	O
the	O
same	O
purpose	O
of	O
conveying	O
metadata	O
about	O
the	O
class	O
to	O
its	O
consumers	O
without	O
creating	O
a	O
separate	O
type	O
for	O
it	O
.	O
Annotations	B-api_mention
are	O
more	O
powerful	O
,	O
too	O
,	O
letting	O
programmers	O
pass	O
more	O
sophisticated	O
information	O
to	O
classes	O
that	O
"	O
consume	O
"	O
it	O
.	O
Question	O
-	O
33358248	O
Currently	O
the	O
BlendModes	O
(	O
Subtract	O
,	O
Exclusion	O
etc	O
)	O
use	O
the	O
LauncherImage	O
as	O
the	O
mask	O
.	O
Can	O
I	O
apply	O
these	O
BlendModes	O
to	O
a	O
ColorMatrix	O
?	O
I	O
'	O
m	O
using	O
the	O
GPUImageLibrary	O
colorMatrix	O
[	O
0	O
.	O
393	O
,	O
0	O
.	O
7689999	O
,	O
0	O
.	O
18899999	O
,	O
0	O
,	O
0	O
,	O
0	O
.	O
349	O
,	O
0	O
.	O
6859999	O
,	O
0	O
.	O
16799999	O
,	O
0	O
,	O
0	O
,	O
0	O
.	O
272	O
,	O
0	O
.	O
5339999	O
,	O
0	O
.	O
13099999	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
1	O
,	O
0	O
]	O
;	O
SubtractBlendFilter	O
.	O
java	O
#	O
pre	O
GPUIMageTwoInputFilter	O
.	O
java	O
#	O
pre	O
My	O
guess	O
it	O
involves	O
changing	O
something	O
with	O
String	B-api_mention
SUBTRACT	O
_	O
BLEND	O
_	O
GRAGMENT	O
_	O
SHADER	O
&	O
String	B-api_mention
VERTEX	O
_	O
SHADER	O
.	O
Question	O
-	O
18987692	O
,	O
answer	O
-	O
18987738	O
You	O
can	O
use	O
IsNull	O
.	O
nullValue	O
(	O
)	O
method	O
:	O
#	O
pre	O
Question	O
-	O
29945627	O
,	O
answer	O
-	O
29946155	O
The	O
syntax	O
you	O
'	O
re	O
after	O
is	O
possible	O
with	O
a	O
little	O
helper	O
function	O
that	O
converts	O
a	O
Runnable	B-api_mention
into	O
Action	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	O
you	O
can	O
place	O
it	O
in	O
Action	B-api_mention
for	O
example	O
)	O
:	O
#	O
pre	O
Question	O
-	O
11821801	O
I	O
'	O
m	O
trying	O
to	O
understand	O
what	O
makes	O
the	O
lock	O
in	O
concurrency	O
so	O
important	O
if	O
one	O
can	O
use	O
synchronized	O
(	O
args	O
)	O
.	O
In	O
the	O
dummy	O
code	O
below	O
,	O
I	O
can	O
do	O
either	O
:	O
#	O
li	O
synchronized	O
the	O
entire	O
method	O
or	O
synchronize	O
the	O
vulnerable	O
area	O
(	O
synchronized	O
(	O
this	O
)	O
{	O
.	O
.	O
.	O
}	O
)	O
#	O
li	O
OR	O
lock	O
the	O
vulnerable	O
code	O
area	O
with	O
a	O
ReentrantLock	B-api_mention
.	O
Code	O
:	O
#	O
pre	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
20793241	O
Environment	O
variables	O
may	O
also	O
provide	O
a	O
useful	O
means	O
-	O
-	O
COMPUTERNAME	O
on	O
Windows	O
,	O
HOSTNAME	O
on	O
most	O
modern	O
Unix	O
/	O
Linux	O
shells	O
.	O
See	O
:	O
#	O
a	O
I	O
'	O
m	O
using	O
these	O
as	O
"	O
supplementary	O
"	O
methods	O
to	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
since	O
as	O
several	O
people	O
point	O
out	O
,	O
that	O
function	O
doesn	O
'	O
t	O
work	O
in	O
all	O
environments	O
.	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
another	O
possible	O
supplement	O
.	O
At	O
this	O
stage	O
,	O
I	O
haven	O
'	O
t	O
used	O
it	O
.	O
#	O
pre	O
Question	O
-	O
28840047	O
Some	O
time	O
ago	O
,	O
I	O
'	O
ve	O
blogged	O
about	O
a	O
Java	O
8	O
functional	O
way	O
of	O
calculating	O
fibonacci	O
numbers	O
recursively	O
,	O
with	O
a	O
ConcurrentHashMap	B-api_mention
cache	O
and	O
the	O
new	O
,	O
useful	O
computeIfAbsent	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
I	O
chose	O
ConcurrentHashMap	B-api_mention
because	O
I	O
was	O
thinking	O
of	O
making	O
this	O
example	O
even	O
more	O
sophisticated	O
by	O
introducing	O
parallelism	O
(	O
which	O
I	O
didn	O
'	O
t	O
in	O
the	O
end	O
)	O
.	O
Now	O
,	O
let	O
'	O
s	O
increase	O
the	O
number	O
from	O
8	O
to	O
25	O
and	O
observe	O
what	O
happens	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
program	O
never	O
halts	O
.	O
Inside	O
the	O
method	O
,	O
there	O
'	O
s	O
a	O
loop	O
that	O
just	O
runs	O
forever	O
:	O
#	O
pre	O
I	O
'	O
m	O
using	O
:	O
#	O
pre	O
Matthias	O
,	O
a	O
reader	O
of	O
that	O
blog	O
post	O
also	O
confirmed	O
the	O
issue	O
(	O
he	O
actually	O
found	O
it	O
)	O
.	O
This	O
is	O
weird	O
.	O
I	O
would	O
have	O
expected	O
any	O
of	O
the	O
following	O
two	O
:	O
#	O
li	O
It	O
works	O
#	O
li	O
It	O
throws	O
a	O
ConcurrentModificationException	B-api_mention
But	O
just	O
never	O
halting	O
?	O
That	O
seems	O
dangerous	O
.	O
Is	O
it	O
a	O
bug	O
?	O
Or	O
did	O
I	O
misunderstand	O
some	O
contract	O
?	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28833677	O
The	O
cleanest	O
“	O
try	O
services	O
”	O
approach	O
given	O
the	O
current	O
API	O
would	O
be	O
:	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
o	O
=	O
Stream	B-api_mention
.	I-api_mention
<	I-api_mention
Supplier	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
>	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findFirst	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
important	O
aspect	O
is	O
not	O
the	O
(	O
constant	O
)	O
chain	O
of	O
operations	O
you	O
have	O
to	O
write	O
once	O
but	O
how	O
easy	O
it	O
is	O
to	O
add	O
another	O
service	O
(	O
or	O
modify	O
the	O
list	O
of	O
services	O
is	O
general	O
)	O
.	O
Here	O
,	O
adding	O
or	O
removing	O
a	O
single	O
(	O
)	O
-	O
>	O
serviceX	O
(	O
args	O
)	O
is	O
enough	O
.	O
Due	O
to	O
the	O
lazy	O
evaluation	O
of	O
streams	O
,	O
no	O
service	O
will	O
be	O
invoked	O
if	O
a	O
preceding	O
service	O
returned	O
a	O
non	O
-	O
empty	O
Optional	B-api_mention
.	O
Question	O
-	O
24676877	O
,	O
answer	O
-	O
24681959	O
I	O
have	O
a	O
few	O
points	O
to	O
add	O
to	O
Brian	O
Goetz	O
'	O
excellent	O
answer	O
.	O
It	O
'	O
s	O
quite	O
common	O
to	O
return	O
a	O
Stream	B-api_mention
from	O
a	O
"	O
getter	O
"	O
style	O
method	O
call	O
.	O
See	O
the	O
Stream	B-api_mention
usage	O
page	O
in	O
the	O
Java	O
8	O
javadoc	O
and	O
look	O
for	O
"	O
methods	O
.	O
.	O
.	O
that	O
return	O
Stream	B-api_mention
"	O
for	O
the	O
packages	O
other	O
than	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
.	O
These	O
methods	O
are	O
usually	O
on	O
classes	O
that	O
represent	O
or	O
can	O
contain	O
multiple	O
values	O
or	O
aggregations	O
of	O
something	O
.	O
In	O
such	O
cases	O
,	O
APIs	O
typically	O
have	O
returned	O
collections	O
or	O
arrays	O
of	O
them	O
.	O
For	O
all	O
the	O
reasons	O
that	O
Brian	O
noted	O
in	O
his	O
answer	O
,	O
it	O
'	O
s	O
very	O
flexible	O
to	O
add	O
Stream	O
-	O
returning	O
methods	O
here	O
.	O
Many	O
of	O
these	O
classes	O
have	O
collections	O
-	O
or	O
array	O
-	O
returning	O
methods	O
already	O
,	O
because	O
the	O
classes	O
predate	O
the	O
Streams	B-api_mention
API	O
.	O
If	O
you	O
'	O
re	O
designing	O
a	O
new	O
API	O
,	O
and	O
it	O
makes	O
sense	O
to	O
provide	O
Stream	O
-	O
returning	O
methods	O
,	O
it	O
might	O
not	O
be	O
necessary	O
to	O
add	O
collection	O
-	O
returning	O
methods	O
as	O
well	O
.	O
Brian	O
mentioned	O
the	O
cost	O
of	O
"	O
materializing	O
"	O
the	O
values	O
into	O
a	O
collection	O
.	O
To	O
amplify	O
this	O
point	O
,	O
there	O
are	O
actually	O
two	O
costs	O
here	O
:	O
the	O
cost	O
of	O
storing	O
values	O
in	O
the	O
collection	O
(	O
memory	O
allocation	O
and	O
copying	O
)	O
and	O
also	O
the	O
cost	O
of	O
creating	O
the	O
values	O
in	O
the	O
first	O
place	O
.	O
The	O
latter	O
cost	O
can	O
often	O
be	O
reduced	O
or	O
avoided	O
by	O
taking	O
advantage	O
of	O
a	O
Stream	O
'	O
s	O
laziness	O
-	O
seeking	O
behavior	O
.	O
A	O
good	O
example	O
of	O
this	O
are	O
the	O
APIs	O
in	O
java	B-api_mention
.	I-api_mention
nio	I-api_mention
.	I-api_mention
file	I-api_mention
.	I-api_mention
Files	I-api_mention
:	O
#	O
pre	O
Not	O
only	O
does	O
readAllLines	B-api_mention
have	O
to	O
hold	O
the	O
entire	O
file	O
contents	O
in	O
memory	O
in	O
order	O
to	O
store	O
it	O
into	O
the	O
result	O
list	O
,	O
it	O
also	O
has	O
to	O
read	O
the	O
file	O
to	O
the	O
very	O
end	O
before	O
it	O
returns	O
the	O
list	O
.	O
The	O
lines	B-api_mention
method	O
can	O
return	O
almost	O
immediately	O
after	O
it	O
has	O
performed	O
some	O
setup	O
,	O
leaving	O
file	O
reading	O
and	O
line	O
breaking	O
until	O
later	O
when	O
it	O
'	O
s	O
necessary	O
-	O
-	O
or	O
not	O
at	O
all	O
.	O
This	O
is	O
a	O
huge	O
benefit	O
,	O
if	O
for	O
example	O
,	O
the	O
caller	O
is	O
interested	O
only	O
in	O
the	O
first	O
ten	O
lines	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
firstTen	O
=	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Of	O
course	O
considerable	O
memory	O
space	O
can	O
be	O
saved	O
if	O
the	O
caller	O
filters	O
the	O
stream	O
to	O
return	O
only	O
lines	O
matching	O
a	O
pattern	O
,	O
etc	O
.	O
An	O
idiom	O
that	O
seems	O
to	O
be	O
emerging	O
is	O
to	O
name	O
stream	O
-	O
returning	O
methods	O
after	O
the	O
plural	O
of	O
the	O
name	O
of	O
the	O
things	O
that	O
it	O
represents	O
or	O
contains	O
,	O
without	O
a	O
get	O
prefix	O
.	O
Also	O
,	O
while	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
reasonable	O
name	O
for	O
a	O
stream	O
-	O
returning	O
method	O
when	O
there	O
is	O
only	O
one	O
possible	O
set	O
of	O
values	O
to	O
be	O
returned	O
,	O
sometimes	O
there	O
are	O
classes	O
that	O
have	O
aggregations	O
of	O
multiple	O
types	O
of	O
values	O
.	O
For	O
example	O
,	O
suppose	O
you	O
have	O
some	O
object	O
that	O
contains	O
both	O
attributes	O
and	O
elements	O
.	O
You	O
might	O
provide	O
two	O
stream	O
-	O
returning	O
APIs	O
:	O
#	O
pre	O
Question	O
-	O
28770822	O
,	O
answer	O
-	O
28816219	O
Looking	O
at	O
the	O
issue	O
and	O
fix	O
,	O
it	O
looks	O
like	O
this	O
has	O
been	O
done	O
to	O
resolve	O
a	O
handling	O
of	O
a	O
header	O
file	O
generation	O
for	O
special	O
classes	O
in	O
jigsaw	O
Jigsaw	O
is	O
a	O
module	O
system	O
designated	O
to	O
use	O
in	O
Java	O
SE	O
Platform	O
and	O
JDK	O
.	O
More	O
details	O
here	O
Here	O
is	O
a	O
corresponding	O
changeset	O
.	O
You	O
can	O
see	O
a	O
comment	O
,	O
#	O
blockquote	O
From	O
the	O
changeset	O
I	O
see	O
that	O
for	O
the	O
sake	O
of	O
purpose	O
in	O
addition	O
to	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Integer	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Long	I-api_mention
,	O
also	O
some	O
properties	O
in	O
java	O
.	O
net	O
.	O
SocketOptions	O
,	O
sun	O
.	O
nio	O
.	O
ch	O
.	O
IOStatus	O
,	O
java	B-api_mention
.	I-api_mention
io	I-api_mention
.	I-api_mention
FileSystem	I-api_mention
have	O
been	O
changed	O
to	O
@	O
Native	O
.	O
So	O
I	O
assume	O
only	O
those	O
were	O
needed	O
to	O
solve	O
the	O
dependency	O
with	O
jigsaw	O
.	O
Question	O
-	O
20363719	O
,	O
answer	O
-	O
34675066	O
I	O
was	O
trying	O
to	O
do	O
this	O
and	O
found	O
that	O
,	O
using	O
the	O
answers	O
above	O
,	O
when	O
using	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
key	O
to	O
the	O
Map	B-api_mention
,	O
then	O
I	O
had	O
issues	O
with	O
using	O
a	O
local	O
method	O
like	O
this	O
:	O
:	O
localMethodName	O
to	O
actually	O
work	O
because	O
of	O
typing	O
issues	O
.	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
actually	O
does	O
something	O
to	O
the	O
typing	O
in	O
this	O
case	O
so	O
the	O
method	O
would	O
only	O
work	O
by	O
returning	O
Object	B-api_mention
and	O
accepting	O
a	O
param	O
of	O
Object	B-api_mention
To	O
solve	O
this	O
,	O
I	O
ended	O
up	O
ditching	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
using	O
s	O
-	O
>	O
s	O
instead	O
.	O
So	O
my	O
code	O
,	O
in	O
my	O
case	O
to	O
list	O
all	O
directories	O
inside	O
a	O
directory	O
,	O
and	O
for	O
each	O
one	O
use	O
the	O
name	O
of	O
the	O
directory	O
as	O
the	O
key	O
to	O
the	O
map	O
and	O
then	O
call	O
a	O
method	O
with	O
the	O
directory	O
name	O
and	O
return	O
a	O
collection	O
of	O
items	O
,	O
looks	O
like	O
:	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
items	O
=	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
30522698	O
The	O
problem	O
I	O
would	O
like	O
to	O
be	O
able	O
to	O
override	O
my	O
apps	O
resources	O
such	O
as	O
R	O
.	O
colour	O
.	O
brand	O
_	O
colour	O
or	O
R	O
.	O
drawable	O
.	O
ic	O
_	O
action	O
_	O
start	O
at	O
runtime	O
.	O
My	O
application	O
connects	O
to	O
a	O
CMS	O
system	O
that	O
will	O
provide	O
branding	O
colours	O
and	O
images	O
.	O
Once	O
the	O
app	O
has	O
downloaded	O
the	O
CMS	O
data	O
it	O
needs	O
to	O
be	O
able	O
to	O
re	O
-	O
skin	O
itself	O
.	O
I	O
know	O
what	O
you	O
are	O
about	O
to	O
say	O
-	O
overriding	O
resources	O
at	O
runtime	O
is	O
not	O
possible	O
.	O
Except	O
that	O
it	O
kinda	O
is	O
.	O
In	O
particular	O
I	O
have	O
found	O
this	O
Bachelor	O
Thesis	O
from	O
2012	O
which	O
explains	O
the	O
basic	O
concept	O
-	O
The	O
Activity	O
class	O
in	O
android	O
extends	O
ContextWrapper	O
,	O
which	O
contains	O
the	O
attachBaseContext	O
method	O
.	O
You	O
can	O
override	O
attachBaseContext	O
to	O
wrap	O
the	O
Context	O
with	O
your	O
own	O
custom	O
class	O
which	O
overrides	O
methods	O
such	O
as	O
getColor	O
and	O
getDrawable	O
.	O
Your	O
own	O
implementation	O
of	O
getColor	O
could	O
look	O
the	O
colour	O
up	O
however	O
it	O
wanted	O
.	O
The	O
Calligraphy	O
library	O
uses	O
a	O
similar	O
approach	O
to	O
inject	O
a	O
custom	O
LayoutInflator	O
which	O
can	O
deal	O
with	O
loading	O
custom	O
fonts	O
.	O
The	O
code	O
I	O
have	O
created	O
a	O
simple	O
Activity	O
which	O
uses	O
this	O
approach	O
to	O
override	O
the	O
loading	O
of	O
a	O
colour	O
.	O
#	O
pre	O
The	O
problem	O
is	O
,	O
it	O
doesn	O
'	O
t	O
work	O
!	O
The	O
logging	O
shows	O
calls	O
to	O
load	O
resources	O
such	O
as	O
layout	O
/	O
activity	O
_	O
main	O
and	O
mipmap	O
/	O
ic	O
_	O
launcher	O
however	O
color	O
/	O
theme	O
_	O
colour	O
is	O
never	O
loaded	O
.	O
It	O
seems	O
that	O
the	O
context	O
is	O
being	O
used	O
to	O
create	O
the	O
window	O
and	O
action	O
bar	O
,	O
but	O
not	O
the	O
activity	O
'	O
s	O
content	O
view	O
.	O
My	O
questions	O
is	O
-	O
Where	O
does	O
the	O
layout	O
inflator	O
load	O
resources	O
from	O
,	O
if	O
not	O
the	O
activities	O
context	O
?	O
I	O
would	O
also	O
like	O
to	O
know	O
-	O
Is	O
there	O
a	O
workable	O
way	O
to	O
override	O
the	O
loading	O
of	O
colours	O
and	O
drawables	O
at	O
runtime	O
?	O
A	O
word	O
about	O
alternative	O
approaches	O
I	O
know	O
its	O
possible	O
to	O
theme	O
an	O
app	O
from	O
CMS	O
data	O
other	O
ways	O
-	O
for	O
example	O
we	O
could	O
create	O
a	O
method	O
getCMSColour	O
(	O
args	O
)	O
then	O
inside	O
our	O
onCreate	O
(	O
args	O
)	O
we	O
have	O
a	O
bunch	O
of	O
code	O
along	O
the	O
lines	O
of	O
:	O
myTextView	O
.	O
setTextColour	O
(	O
args	O
)	O
A	O
similar	O
approach	O
could	O
be	O
taken	O
for	O
drawables	O
,	O
strings	O
,	O
etc	O
.	O
However	O
this	O
would	O
result	O
in	O
a	O
large	O
amount	O
of	O
boilerplate	O
code	O
-	O
all	O
of	O
which	O
needs	O
maintaining	O
.	O
When	O
modifying	O
the	O
UI	O
it	O
would	O
be	O
easy	O
to	O
forget	O
to	O
set	O
the	O
colour	O
on	O
a	O
particular	O
view	O
.	O
Wrapping	O
the	O
Context	O
to	O
return	O
our	O
own	O
custom	O
values	O
is	O
'	O
cleaner	O
'	O
and	O
less	O
prone	O
to	O
breakage	O
.	O
I	O
would	O
like	O
to	O
understand	O
why	O
it	O
doesn	O
'	O
t	O
work	O
,	O
before	O
exploring	O
alternative	O
approaches	O
.	O
Question	O
-	O
27683759	O
,	O
answer	O
-	O
27684040	O
That	O
line	O
creates	O
an	O
empty	O
list	O
of	O
strings	O
by	O
calling	O
a	O
static	O
method	O
with	O
a	O
generic	O
type	O
parameter	O
.	O
Inside	O
the	O
Collections	B-api_mention
class	O
,	O
there	O
is	O
a	O
static	O
method	O
emptyList	O
declared	O
like	O
:	O
#	O
pre	O
This	O
has	O
a	O
generic	O
type	O
parameter	O
T	B-api_mention
.	O
We	O
call	O
call	O
this	O
method	O
by	O
using	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
T	O
is	O
infered	O
to	O
be	O
a	O
String	B-api_mention
because	O
of	O
the	O
type	O
of	O
list	O
.	O
We	O
can	O
also	O
specify	O
the	O
type	O
of	O
T	O
by	O
putting	O
it	O
in	O
angle	O
brackets	O
when	O
calling	O
emptyList	B-api_mention
.	O
This	O
may	O
be	O
needed	O
if	O
we	O
want	O
a	O
more	O
specific	O
type	O
than	O
is	O
inferred	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
emptyList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
not	O
correct	O
because	O
that	O
placement	O
is	O
only	O
valid	O
when	O
creating	O
instances	O
of	O
generic	O
classes	O
,	O
not	O
calling	O
methods	O
.	O
When	O
using	O
new	O
there	O
are	O
two	O
possible	O
type	O
parameters	O
,	O
the	O
ones	O
before	O
the	O
class	O
name	O
are	O
for	O
the	O
constructor	O
only	O
,	O
and	O
the	O
ones	O
after	O
the	O
class	O
name	O
are	O
for	O
the	O
whole	O
instance	O
,	O
so	O
with	O
the	O
class	O
:	O
#	O
pre	O
We	O
can	O
call	O
its	O
constructor	O
where	O
A	O
is	O
String	O
and	O
B	O
is	O
Integer	O
like	O
:	O
MyClass	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
a	O
=	O
new	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
MyClass	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	O
;	O
or	O
by	O
using	O
type	O
inference	O
:	O
MyClass	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
a	O
=	O
new	O
MyClass	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
See	O
also	O
:	O
#	O
li	O
Generic	O
Methods	O
#	O
li	O
Type	O
Inference	O
Question	O
-	O
30125296	O
,	O
answer	O
-	O
35035659	O
You	O
can	O
use	O
reduce	O
method	O
:	O
long	O
creditAmountSum	O
=	O
result	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
20358883	O
Is	O
there	O
a	O
Utility	O
method	O
somewhere	O
that	O
can	O
do	O
this	O
in	O
1	O
line	O
?	O
I	O
can	O
'	O
t	O
find	O
it	O
anywhere	O
in	O
Collections	B-api_mention
,	O
or	O
List	B-api_mention
.	O
#	O
pre	O
I	O
don	O
'	O
t	O
want	O
to	O
re	O
-	O
invent	O
the	O
wheel	O
unless	O
I	O
plan	O
on	O
putting	O
fancy	O
rims	O
on	O
it	O
.	O
Well	O
.	O
.	O
.	O
the	O
type	O
can	O
be	O
T	O
,	O
and	O
not	O
String	B-api_mention
.	O
but	O
you	O
get	O
the	O
point	O
.	O
(	O
with	O
all	O
the	O
null	O
checking	O
,	O
safety	O
checks	O
.	O
.	O
.	O
etc	O
)	O
Question	O
-	O
25850328	O
I	O
was	O
being	O
taught	O
that	O
Marker	O
interface	O
in	O
Java	O
is	O
an	O
empty	O
interface	O
and	O
is	O
used	O
to	O
signal	O
to	O
compiler	O
or	O
JVM	O
that	O
the	O
objects	O
of	O
the	O
class	O
implementing	O
this	O
interface	O
must	O
be	O
treated	O
in	O
a	O
special	O
way	O
,	O
like	O
serializing	O
,	O
cloning	O
,	O
etc	O
.	O
But	O
lately	O
I	O
have	O
learned	O
that	O
it	O
actually	O
has	O
nothing	O
to	O
do	O
with	O
the	O
compiler	O
or	O
the	O
JVM	O
.	O
For	O
example	O
,	O
in	O
case	O
of	O
Serializable	B-api_mention
interface	O
the	O
method	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
ObjectOutputStream	B-api_mention
does	O
something	O
like	O
instanceOf	B-api_mention
Serializable	I-api_mention
to	O
detect	O
whether	O
the	O
class	O
implements	O
Serializable	B-api_mention
&	O
throws	O
NotSerializableException	B-api_mention
accordingly	O
.	O
Everything	O
is	O
handled	O
in	O
the	O
code	O
and	O
this	O
seems	O
to	O
be	O
a	O
design	O
-	O
pattern	O
so	O
I	O
think	O
we	O
can	O
define	O
our	O
own	O
marker	O
interfaces	O
.	O
Now	O
my	O
doubts	O
:	O
#	O
li	O
Is	O
the	O
definition	O
of	O
a	O
marker	O
interface	O
mentioned	O
above	O
in	O
1st	O
point	O
wrong	O
?	O
How	O
can	O
we	O
define	O
a	O
Marker	B-api_mention
interface	O
then	O
?	O
#	O
li	O
And	O
instead	O
of	O
using	O
the	O
instanceOf	B-api_mention
operator	O
why	O
can	O
'	O
t	O
the	O
method	O
be	O
something	O
like	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
that	O
there	O
is	O
a	O
compile	O
-	O
time	O
type	O
checking	O
rather	O
than	O
runtime	O
?	O
#	O
li	O
How	O
are	O
Annotations	B-api_mention
better	O
than	O
Marker	B-api_mention
Interfaces	O
?	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26819171	O
This	O
is	O
not	O
an	O
easy	O
problem	O
.	O
And	O
the	O
more	O
search	O
-	O
replacement	O
parameters	O
you	O
have	O
,	O
the	O
trickier	O
it	O
gets	O
.	O
You	O
have	O
several	O
options	O
,	O
scattered	O
on	O
the	O
palette	O
of	O
ugly	O
-	O
elegant	O
,	O
efficient	O
-	O
wasteful	O
:	O
#	O
li	O
Use	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
from	O
Apache	O
Commons	O
as	O
@	O
AlanHay	O
recommended	O
.	O
This	O
is	O
a	O
good	O
option	O
if	O
you	O
'	O
re	O
free	O
to	O
add	O
new	O
dependencies	O
in	O
your	O
project	O
.	O
You	O
might	O
get	O
lucky	O
:	O
the	O
dependency	O
might	O
be	O
included	O
already	O
in	O
your	O
project	O
#	O
li	O
Use	O
a	O
temporary	O
placeholder	O
as	O
@	O
Jeroen	O
suggested	O
,	O
and	O
perform	O
the	O
replacement	O
in	O
2	O
steps	O
:	O
#	O
li	O
Replace	O
all	O
search	O
patterns	O
with	O
a	O
unique	O
tag	O
that	O
doesn	O
'	O
t	O
exist	O
in	O
the	O
original	O
text	O
#	O
li	O
Replace	O
the	O
placeholders	O
with	O
the	O
real	O
target	O
replacement	O
This	O
is	O
not	O
a	O
great	O
approach	O
,	O
for	O
several	O
reasons	O
:	O
it	O
needs	O
to	O
ensure	O
that	O
the	O
tags	O
used	O
in	O
the	O
first	O
step	O
are	O
really	O
unique	O
;	O
it	O
performs	O
more	O
string	O
replacement	O
operations	O
than	O
really	O
necessary	O
#	O
li	O
Build	O
a	O
regex	O
from	O
all	O
the	O
patterns	O
and	O
use	O
the	O
method	O
with	O
Matcher	B-api_mention
and	O
StringBuffer	B-api_mention
as	O
suggested	O
by	O
@	O
arshajii	O
.	O
This	O
is	O
not	O
terrible	O
,	O
but	O
not	O
that	O
great	O
either	O
,	O
as	O
building	O
the	O
regex	O
is	O
kind	O
of	O
hackish	O
,	O
and	O
it	O
involves	O
StringBuffer	B-api_mention
which	O
went	O
out	O
of	O
fashion	O
a	O
while	O
ago	O
in	O
favor	O
of	O
StringBuilder	B-api_mention
.	O
#	O
li	O
Use	O
a	O
recursive	O
solution	O
proposed	O
by	O
@	O
mjolka	O
,	O
by	O
splitting	O
the	O
string	O
at	O
the	O
matched	O
patterns	O
,	O
and	O
recursing	O
on	O
the	O
remaining	O
segments	O
.	O
This	O
is	O
a	O
fine	O
solution	O
,	O
compact	O
and	O
quite	O
elegant	O
.	O
Its	O
weakness	O
is	O
the	O
potentially	O
many	O
substring	O
and	O
concatenation	O
operations	O
,	O
and	O
the	O
stack	O
size	O
limits	O
that	O
apply	O
to	O
all	O
recursive	O
solutions	O
#	O
li	O
Split	O
the	O
text	O
to	O
words	O
and	O
use	O
Java	O
8	O
streams	O
to	O
perform	O
the	O
replacements	O
elegantly	O
as	O
@	O
msandiford	O
suggested	O
,	O
but	O
of	O
course	O
that	O
only	O
works	O
if	O
you	O
are	O
ok	O
with	O
splitting	O
at	O
word	O
boundaries	O
,	O
which	O
makes	O
it	O
not	O
suitable	O
as	O
a	O
general	O
solution	O
Here	O
'	O
s	O
my	O
version	O
,	O
based	O
on	O
ideas	O
borrowed	O
from	O
Apache	O
'	O
s	O
implementation	O
.	O
It	O
'	O
s	O
neither	O
simple	O
nor	O
elegant	O
,	O
but	O
it	O
works	O
,	O
and	O
should	O
be	O
relatively	O
efficient	O
,	O
without	O
unnecessary	O
steps	O
.	O
In	O
a	O
nutshell	O
,	O
it	O
works	O
like	O
this	O
:	O
repeatedly	O
find	O
the	O
next	O
matching	O
search	O
pattern	O
in	O
the	O
text	O
,	O
and	O
use	O
a	O
StringBuilder	O
to	O
accumulate	O
the	O
unmatched	O
segments	O
and	O
the	O
replacements	O
.	O
#	O
pre	O
Unit	O
tests	O
:	O
#	O
pre	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32175224	O
Since	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
is	O
not	O
a	O
final	O
method	O
of	O
Object	B-api_mention
,	O
yes	O
,	O
it	O
is	O
very	O
well	O
be	O
possible	O
in	O
a	O
different	O
situation	O
.	O
#	O
pre	O
This	O
question	O
,	O
however	O
,	O
specifically	O
says	O
that	O
these	O
are	O
primitive	O
wrappers	O
(	O
e	O
.	O
g	O
.	O
Integer	B-api_mention
,	O
Boolean	B-api_mention
,	O
etc	O
.	O
)	O
and	O
since	O
these	O
classes	O
are	O
final	O
,	O
you	O
cannot	O
extend	O
them	O
,	O
thus	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
always	O
return	O
true	O
.	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489437	O
Java	O
.	O
lang	O
.	O
String	B-api_mention
is	O
not	O
just	O
a	O
class	O
.	O
It	O
'	O
s	O
an	O
integral	O
part	O
of	O
the	O
core	O
language	O
.	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
it	O
.	O
For	O
example	O
,	O
StringLiteral	O
is	O
like	O
an	O
abbreviation	O
for	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
When	O
written	O
StringLiteral	O
the	O
compiler	O
optimizes	O
identical	O
strings	O
to	O
the	O
same	O
instance	O
to	O
save	O
space	O
.	O
StringLiteral	O
+	O
5	O
=	O
=	O
StringLiteral	O
=	O
=	O
>	O
true	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
a	O
lot	O
of	O
stuff	O
,	O
including	O
not	O
having	O
to	O
box	O
/	O
unbox	O
between	O
object	O
versions	O
and	O
their	O
native	O
types	O
,	O
no	O
parent	O
means	O
Object	B-api_mention
,	O
default	O
constructor	O
,	O
.	O
.	O
.	O
Question	O
-	O
5071040	O
,	O
answer	O
-	O
22547954	O
Always	O
use	O
either	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Using	O
"	O
"	O
+	O
number	O
is	O
an	O
overhead	O
and	O
does	O
the	O
following	O
:	O
#	O
pre	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173658	O
If	O
you	O
want	O
to	O
stop	O
either	O
if	O
number	O
5	O
is	O
reached	O
or	O
10	O
elements	O
are	O
collected	O
,	O
there	O
'	O
s	O
Stream	B-api_mention
.	I-api_mention
takeWhile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
added	O
in	O
Java	O
-	O
9	O
:	O
#	O
pre	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777266	O
It	O
'	O
s	O
a	O
famous	O
problem	O
:	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
arrays	O
is	O
badly	O
broken	O
,	O
just	O
don	O
'	O
t	O
use	O
it	O
,	O
ever	O
.	O
That	O
said	O
,	O
it	O
'	O
s	O
not	O
"	O
broken	O
"	O
as	O
in	O
"	O
someone	O
has	O
done	O
it	O
in	O
a	O
really	O
wrong	O
way	O
"	O
—	O
it	O
'	O
s	O
just	O
doing	O
what	O
'	O
s	O
defined	O
and	O
not	O
what	O
'	O
s	O
usually	O
expected	O
.	O
So	O
for	O
purists	O
:	O
it	O
'	O
s	O
perfectly	O
fine	O
,	O
and	O
that	O
also	O
means	O
,	O
don	O
'	O
t	O
use	O
it	O
,	O
ever	O
.	O
Now	O
the	O
expected	O
behaviour	O
for	O
equals	B-api_mention
is	O
to	O
compare	O
data	O
.	O
The	O
default	O
behaviour	O
is	O
to	O
compare	O
the	O
identity	O
,	O
as	O
Object	B-api_mention
does	O
not	O
have	O
any	O
data	O
(	O
for	O
purists	O
:	O
yes	O
it	O
has	O
,	O
but	O
it	O
'	O
s	O
not	O
the	O
point	O
)	O
;	O
assumption	O
is	O
,	O
if	O
you	O
need	O
equals	B-api_mention
in	O
subclasses	O
,	O
you	O
'	O
ll	O
implement	O
it	O
.	O
In	O
arrays	O
,	O
there	O
'	O
s	O
no	O
implementation	O
for	O
you	O
,	O
so	O
you	O
'	O
re	O
not	O
supposed	O
to	O
use	O
it	O
.	O
So	O
the	O
difference	O
is	O
,	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
works	O
as	O
you	O
would	O
expect	O
(	O
i	O
.	O
e	O
.	O
compares	O
content	O
)	O
,	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
falls	O
back	O
to	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
implementation	O
,	O
which	O
in	O
turn	O
compares	O
identity	O
,	O
and	O
thus	O
better	O
replaced	O
by	O
=	O
=	O
(	O
for	O
purists	O
:	O
yes	O
I	O
know	O
about	O
null	O
)	O
.	O
Problem	O
is	O
,	O
even	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
bite	O
you	O
hard	O
if	O
elements	O
of	O
array	O
do	O
not	O
implement	O
equals	B-api_mention
properly	O
.	O
It	O
'	O
s	O
a	O
very	O
naive	O
statement	O
,	O
I	O
know	O
,	O
but	O
there	O
'	O
s	O
a	O
very	O
important	O
less	O
-	O
than	O
-	O
obvious	O
case	O
:	O
consider	O
a	O
2D	O
array	O
.	O
2D	O
array	O
in	O
Java	O
is	O
an	O
array	O
of	O
arrays	O
,	O
and	O
arrays	O
'	O
equals	B-api_mention
is	O
broken	O
(	O
or	O
useless	O
if	O
you	O
prefer	O
)	O
,	O
so	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
work	O
as	O
you	O
expect	O
on	O
2D	O
arrays	O
.	O
Hope	O
that	O
helps	O
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
29226136	O
Also	O
note	O
that	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
normally	O
contains	O
=	O
=	O
for	O
testing	O
as	O
this	O
is	O
the	O
first	O
thing	O
you	O
would	O
wish	O
to	O
test	O
for	O
if	O
you	O
wanted	O
to	O
test	O
if	O
two	O
objects	O
are	O
equal	O
.	O
And	O
=	O
=	O
actually	O
does	O
look	O
at	O
values	O
for	O
primitive	O
types	O
,	O
for	O
objects	O
it	O
checks	O
the	O
reference	O
.	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32863263	O
Don	O
'	O
t	O
feel	O
like	O
you	O
have	O
to	O
do	O
everything	O
in	O
/	O
with	O
the	O
stream	O
.	O
I	O
would	O
just	O
do	O
:	O
#	O
pre	O
As	O
long	O
as	O
you	O
don	O
'	O
t	O
parallelise	O
the	O
stream	O
this	O
will	O
work	O
and	O
it	O
avoids	O
potentially	O
expensive	O
and	O
/	O
or	O
problematic	O
(	O
in	O
the	O
case	O
of	O
duplicates	O
)	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
indexOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
operations	O
.	O
(	O
You	O
cannot	O
use	O
a	O
regular	O
int	O
variable	O
in	O
place	O
of	O
the	O
AtomicInteger	O
because	O
variables	O
used	O
from	O
outside	O
a	O
lambda	O
expression	O
must	O
be	O
effectively	O
final	O
.	O
Note	O
that	O
when	O
uncontested	O
(	O
as	O
in	O
this	O
case	O
)	O
,	O
AtomicInteger	O
is	O
very	O
fast	O
and	O
won	O
'	O
t	O
pose	O
a	O
performance	O
problem	O
.	O
But	O
if	O
it	O
worries	O
you	O
you	O
can	O
use	O
a	O
non	O
-	O
thread	O
-	O
safe	O
counter	O
.	O
)	O
Question	O
-	O
12539365	O
,	O
answer	O
-	O
29349910	O
I	O
must	O
say	O
,	O
that	O
you	O
are	O
absolutely	O
right	O
from	O
a	O
classical	O
approach	O
'	O
s	O
point	O
of	O
view	O
:	O
#	O
li	O
If	O
you	O
first	O
create	O
(	O
or	O
change	O
)	O
business	O
logic	O
of	O
your	O
application	O
and	O
then	O
cover	O
it	O
with	O
(	O
adopt	O
)	O
tests	O
(	O
Test	O
-	O
Last	O
approach	O
)	O
,	O
then	O
it	O
will	O
be	O
very	O
painful	O
and	O
dangerous	O
to	O
let	O
tests	O
know	O
anything	O
about	O
how	O
your	O
software	O
works	O
,	O
other	O
than	O
checking	O
inputs	O
and	O
outputs	O
.	O
#	O
li	O
If	O
you	O
are	O
practicing	O
a	O
Test	O
-	O
Driven	O
approach	O
,	O
then	O
your	O
tests	O
are	O
the	O
first	O
to	O
be	O
written	O
,	O
to	O
be	O
changed	O
and	O
to	O
reflect	O
the	O
use	O
cases	O
of	O
your	O
software	O
'	O
s	O
functionality	O
.	O
The	O
implementation	O
depends	O
on	O
tests	O
.	O
That	O
sometimes	O
mean	O
,	O
that	O
you	O
want	O
your	O
software	O
to	O
be	O
implemented	O
in	O
some	O
particular	O
way	O
,	O
e	O
.	O
g	O
.	O
rely	O
on	O
some	O
other	O
component	O
'	O
s	O
method	O
or	O
even	O
call	O
it	O
a	O
particular	O
amount	O
of	O
times	O
.	O
That	O
is	O
where	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
comes	O
in	O
handy	O
!	O
It	O
is	O
important	O
to	O
remember	O
,	O
that	O
there	O
are	O
no	O
universal	O
tools	O
.	O
The	O
type	O
of	O
software	O
,	O
it	O
'	O
s	O
size	O
,	O
company	O
goals	O
and	O
market	O
situation	O
,	O
team	O
skills	O
and	O
many	O
other	O
things	O
influence	O
the	O
decision	O
on	O
which	O
approach	O
to	O
use	O
at	O
your	O
particular	O
case	O
.	O
Question	O
-	O
12575990	O
,	O
answer	O
-	O
12576219	O
A	O
Java	O
Date	B-api_mention
is	O
a	O
container	O
for	O
the	O
number	O
of	O
milliseconds	O
since	O
January	O
1	O
,	O
1970	O
,	O
00	O
:	O
00	O
:	O
00	O
GMT	O
.	O
When	O
you	O
use	O
something	O
like	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
Java	O
uses	O
Date	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
print	O
the	O
contents	O
.	O
The	O
only	O
way	O
to	O
change	O
it	O
is	O
to	O
override	O
Date	O
and	O
provide	O
your	O
own	O
implementation	O
of	O
Date	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Now	O
before	O
you	O
fire	O
up	O
your	O
IDE	O
and	O
try	O
this	O
,	O
I	O
wouldn	O
'	O
t	O
;	O
it	O
will	O
only	O
complicate	O
matters	O
.	O
You	O
are	O
better	O
off	O
formatting	O
the	O
date	O
to	O
the	O
format	O
you	O
want	O
to	O
use	O
(	O
or	O
display	O
)	O
.	O
What	O
you	O
can	O
do	O
,	O
is	O
format	O
the	O
date	O
.	O
#	O
pre	O
These	O
are	O
actually	O
the	O
same	O
date	O
,	O
represented	O
differently	O
.	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684822	O
You	O
can	O
'	O
t	O
just	O
take	O
the	O
returned	O
string	O
and	O
construct	O
a	O
string	O
from	O
it	O
.	O
.	O
.	O
it	O
'	O
s	O
not	O
a	O
byte	O
[	O
]	O
data	O
type	O
anymore	O
,	O
it	O
'	O
s	O
already	O
a	O
string	O
;	O
you	O
need	O
to	O
parse	O
it	O
.	O
For	O
example	O
:	O
#	O
pre	O
*	O
*	O
EDIT	O
*	O
*	O
You	O
get	O
an	O
hint	O
of	O
your	O
problem	O
in	O
your	O
question	O
,	O
where	O
you	O
say	O
"	O
Whatever	O
I	O
seem	O
to	O
try	O
I	O
end	O
up	O
getting	O
a	O
byte	O
array	O
which	O
looks	O
as	O
follows	O
.	O
.	O
.	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
"	O
,	O
because	O
91	O
is	O
the	O
byte	O
value	O
for	O
[	O
,	O
so	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
is	O
the	O
byte	O
array	O
of	O
the	O
string	O
"	O
[	O
-	O
45	O
,	O
1	O
,	O
16	O
,	O
.	O
.	O
.	O
"	O
string	O
.	O
The	O
method	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
a	O
String	B-api_mention
representation	O
of	O
the	O
specified	O
array	O
;	O
meaning	O
that	O
the	O
returned	O
value	O
will	O
not	O
be	O
a	O
array	O
anymore	O
.	O
For	O
example	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
s1	O
holds	O
the	O
string	O
representation	O
of	O
the	O
array	O
b1	O
,	O
while	O
s2	O
holds	O
the	O
string	O
representation	O
of	O
the	O
bytes	O
contained	O
in	O
b1	O
.	O
Now	O
,	O
in	O
your	O
problem	O
,	O
your	O
server	O
returns	O
a	O
string	O
similar	O
to	O
s1	O
,	O
therefore	O
to	O
get	O
the	O
array	O
representation	O
back	O
,	O
you	O
need	O
the	O
opposite	O
constructor	O
method	O
.	O
If	O
s2	O
.	B-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
opposite	O
of	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
need	O
to	O
find	O
the	O
opposite	O
of	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
thus	O
the	O
code	O
I	O
pasted	O
in	O
the	O
first	O
snippet	O
of	O
this	O
answer	O
.	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509655	O
As	O
you	O
said	O
internally	O
the	O
last	O
concatenation	O
is	O
done	O
to	O
something	O
similar	O
to	O
String	B-api_mention
e	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
the	O
implementation	O
of	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
StringBuilder	B-api_mention
creates	O
a	O
new	O
String	B-api_mention
.	O
Here	O
is	O
the	O
implementation	O
.	O
#	O
pre	O
Comparing	O
strings	O
using	O
=	O
=	O
instead	O
of	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
true	O
only	O
if	O
both	O
strings	O
are	O
the	O
same	O
.	O
In	O
this	O
case	O
they	O
are	O
not	O
the	O
same	O
because	O
the	O
second	O
string	O
is	O
created	O
as	O
a	O
new	O
object	O
of	O
type	O
String	B-api_mention
.	O
The	O
other	O
concatenations	O
are	O
performed	O
directly	O
by	O
the	O
compiler	O
so	O
no	O
new	O
String	B-api_mention
is	O
created	O
.	O
Question	O
-	O
29229373	O
,	O
answer	O
-	O
33839551	O
In	O
my	O
free	O
StreamEx	O
library	O
I	O
introduced	O
the	O
short	O
-	O
circuiting	O
collectors	O
.	O
When	O
collecting	O
sequential	O
stream	O
with	O
short	O
-	O
circuiting	O
collector	O
(	O
like	O
MoreCollectors	O
.	B-api_mention
first	I-api_mention
(	I-api_mention
)	I-api_mention
)	O
exactly	O
one	O
element	O
is	O
consumed	O
from	O
the	O
source	O
.	O
Internally	O
it	O
'	O
s	O
implemented	O
in	O
quite	O
dirty	O
way	O
:	O
using	O
a	O
custom	O
exception	O
to	O
break	O
the	O
control	O
flow	O
.	O
Using	O
my	O
library	O
your	O
sample	O
could	O
be	O
rewritten	O
in	O
this	O
way	O
:	O
#	O
pre	O
The	O
result	O
is	O
the	O
following	O
:	O
#	O
pre	O
Question	O
-	O
29280857	O
,	O
answer	O
-	O
29282558	O
As	O
you	O
have	O
mentioned	O
there	O
will	O
be	O
1000	O
-	O
10000	O
concurrent	O
transaction	O
you	O
expecting	O
at	O
a	O
time	O
than	O
you	O
can	O
store	O
accounts	O
on	O
which	O
some	O
transaction	O
is	O
going	O
on	O
and	O
handle	O
concurrency	O
One	O
Solution	O
is	O
to	O
allow	O
system	O
to	O
create	O
only	O
one	O
object	O
of	O
particulate	O
account	O
id	O
,	O
means	O
that	O
if	O
you	O
want	O
to	O
make	O
a	O
transaction	O
between	O
account	O
"	O
123	O
"	O
and	O
"	O
456	O
"	O
than	O
your	O
thread	O
will	O
create	O
account	O
object	O
and	O
in	O
that	O
constructor	O
of	O
account	O
class	O
we	O
will	O
check	O
if	O
any	O
other	O
object	O
of	O
account	O
is	O
there	O
with	O
particulate	O
account	O
id	O
,	O
if	O
other	O
object	O
of	O
account	O
is	O
there	O
with	O
same	O
account	O
id	O
means	O
that	O
some	O
transaction	O
is	O
going	O
on	O
with	O
particulate	O
account	O
id	O
so	O
you	O
have	O
to	O
wait	O
to	O
get	O
the	O
account	O
object	O
.	O
So	O
we	O
can	O
do	O
transaction	O
between	O
"	O
123	O
"	O
and	O
"	O
456	O
"	O
and	O
at	O
same	O
time	O
we	O
can	O
do	O
transaction	O
between	O
"	O
abc	O
"	O
and	O
"	O
xyz	O
"	O
but	O
if	O
at	O
same	O
time	O
some	O
other	O
thread	O
will	O
try	O
to	O
create	O
object	O
of	O
account	O
"	O
123	O
"	O
than	O
system	O
will	O
say	O
please	O
wait	O
for	O
reference	O
you	O
can	O
see	O
below	O
code	O
Please	O
note	O
:	O
#	O
li	O
dont	O
forgote	O
to	O
remove	O
your	O
account	O
id	O
from	O
locks	O
map	O
by	O
call	O
to	O
freeAccount	O
(	O
BigDecimal	B-api_mention
accId	O
)	O
from	O
LockHolder	O
class	O
#	O
li	O
I	O
have	O
used	O
HasMap	O
instand	O
of	O
list	O
because	O
list	O
will	O
not	O
be	O
a	O
good	O
choice	O
when	O
you	O
are	O
randomly	O
removing	O
element	O
from	O
it	O
(	O
or	O
when	O
frequently	O
you	O
are	O
updating	O
it	O
)	O
#	O
pre	O
Question	O
-	O
33147339	O
I	O
was	O
reading	O
Java	O
'	O
s	O
ArrayList	B-api_mention
source	O
code	O
and	O
noticed	O
some	O
comparisons	O
in	O
if	O
-	O
statements	O
.	O
In	O
Java	O
7	O
,	O
the	O
method	O
grow	B-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
uses	O
if	O
(	O
args	O
)	O
newCapacity	O
=	O
minCapacity	O
;	O
In	O
Java	O
6	O
,	O
grow	O
didn	O
'	O
t	O
exist	O
.	O
The	O
method	O
ensureCapacity	O
(	O
int	O
)	O
however	O
uses	O
if	O
(	O
args	O
)	O
newCapacity	O
=	O
minCapacity	O
;	O
What	O
was	O
the	O
reason	O
behind	O
the	O
change	O
?	O
Was	O
it	O
a	O
performance	O
issue	O
or	O
just	O
a	O
style	O
?	O
I	O
could	O
imagine	O
that	O
comparing	O
against	O
zero	O
is	O
faster	O
,	O
but	O
performing	O
a	O
complete	O
subtraction	O
just	O
to	O
check	O
whether	O
it	O
'	O
s	O
negative	O
seems	O
a	O
bit	O
overkill	O
to	O
me	O
.	O
Also	O
in	O
terms	O
of	O
bytecode	O
,	O
this	O
would	O
involve	O
two	O
instructions	O
(	O
ISUB	O
and	O
IF	O
_	O
ICMPGE	O
)	O
instead	O
of	O
one	O
(	O
IFGE	O
)	O
.	O
Question	O
-	O
22929237	O
,	O
answer	O
-	O
28564046	O
You	O
can	O
use	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
as	O
:	O
Date	B-api_mention
date	O
=	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
No	O
need	O
to	O
add	O
time	O
and	O
time	O
zone	O
info	O
here	O
because	O
they	O
are	O
taken	O
implicitly	O
.	O
See	O
Simpliest	O
java8	O
LocalDate	B-api_mention
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
conversion	O
and	O
vice	O
versa	O
?	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571348	O
The	O
object	O
your	O
method	O
decompressGZIP	O
(	O
args	O
)	O
needs	O
is	O
a	O
byte	O
[	O
]	O
.	O
So	O
the	O
basic	O
,	O
technical	O
answer	O
to	O
the	O
question	O
you	O
have	O
asked	O
is	O
:	O
#	O
pre	O
However	O
the	O
problem	O
you	O
appear	O
to	O
be	O
wrestling	O
with	O
is	O
that	O
this	O
doesn	O
'	O
t	O
display	O
very	O
well	O
.	O
Calling	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
just	O
give	O
you	O
the	O
default	O
Object	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
is	O
the	O
class	O
name	O
+	O
memory	O
address	O
.	O
In	O
your	O
result	O
[	O
B	O
@	O
38ee9f13	O
,	O
the	O
[	O
B	O
means	O
byte	O
[	O
]	O
and	O
38ee9f13	O
is	O
the	O
memory	O
address	O
,	O
separated	O
by	O
an	O
@	O
.	O
For	O
display	O
purposes	O
you	O
can	O
use	O
:	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
this	O
will	O
just	O
display	O
as	O
a	O
sequence	O
of	O
comma	O
-	O
separated	O
integers	O
,	O
which	O
may	O
or	O
may	O
not	O
be	O
what	O
you	O
want	O
.	O
To	O
get	O
a	O
readable	O
String	B-api_mention
back	O
from	O
a	O
byte	O
[	O
]	O
,	O
use	O
:	O
String	B-api_mention
string	O
=	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
reason	O
the	O
Charset	B-api_mention
version	O
is	O
favoured	O
,	O
is	O
that	O
all	O
String	B-api_mention
objects	O
in	O
Java	O
are	O
stored	O
internally	O
as	O
UTF	O
-	O
16	O
.	O
When	O
converting	O
to	O
a	O
byte	O
[	O
]	O
you	O
will	O
get	O
a	O
different	O
breakdown	O
of	O
bytes	O
for	O
the	O
given	O
glyphs	O
of	O
that	O
String	B-api_mention
,	O
depending	O
upon	O
the	O
chosen	O
charset	O
.	O
Question	O
-	O
6094575	O
,	O
answer	O
-	O
26159586	O
when	O
using	O
(	O
i	O
.	O
e	O
.	O
)	O
getConstructor	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
the	O
constructor	O
has	O
to	O
be	O
declared	O
public	O
.	O
Otherwise	O
a	O
NoSuchMethodException	B-api_mention
is	O
thrown	O
.	O
if	O
you	O
want	O
to	O
access	O
a	O
non	O
-	O
public	O
constructor	O
you	O
have	O
to	O
use	O
instead	O
(	O
i	O
.	O
e	O
.	O
)	O
getDeclaredConstructor	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
23114015	O
,	O
answer	O
-	O
32874755	O
If	O
you	O
know	O
the	O
size	O
you	O
could	O
use	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collection	I-api_mention
which	O
provides	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
And	O
then	O
:	O
new	O
Hand	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
I	O
faced	O
the	O
same	O
problem	O
and	O
was	O
surprised	O
that	O
my	O
Iterable	B-api_mention
implementation	O
could	O
be	O
very	O
easily	O
extended	O
to	O
an	O
AbstractCollection	B-api_mention
implementation	O
by	O
simply	O
adding	O
the	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
luckily	O
I	O
had	O
the	O
size	O
of	O
the	O
collection	O
:	O
-	O
)	O
You	O
should	O
also	O
consider	O
to	O
override	O
Spliterator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
spliterator	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32918035	O
Eran	O
'	O
s	O
answer	O
is	O
usually	O
the	O
best	O
approach	O
for	O
random	O
-	O
access	O
lists	O
.	O
If	O
your	O
List	B-api_mention
isn	O
'	O
t	O
random	O
access	O
,	O
or	O
if	O
you	O
have	O
a	O
Stream	B-api_mention
instead	O
of	O
a	O
List	B-api_mention
,	O
you	O
can	O
use	O
forEachOrdered	O
:	O
#	O
pre	O
This	O
is	O
safe	O
,	O
if	O
the	O
stream	O
is	O
parallel	O
,	O
even	O
though	O
the	O
destination	O
map	O
is	O
thread	O
-	O
unsafe	O
and	O
is	O
operated	O
upon	O
as	O
a	O
side	O
effect	O
.	O
The	O
forEachOrdered	O
guarantees	O
that	O
items	O
are	O
processed	O
one	O
-	O
at	O
-	O
a	O
-	O
time	O
,	O
in	O
order	O
.	O
For	O
this	O
reason	O
it	O
'	O
s	O
unlikely	O
that	O
any	O
speedup	O
will	O
result	O
from	O
running	O
in	O
parallel	O
.	O
(	O
There	O
might	O
be	O
some	O
speedup	O
if	O
there	O
are	O
expensive	O
operations	O
in	O
the	O
pipeline	O
before	O
the	O
forEachOrdered	O
.	O
)	O
Question	O
-	O
14526260	O
,	O
answer	O
-	O
14526289	O
just	O
use	O
File	B-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
pre	O
using	O
String	O
methods	O
:	O
#	O
pre	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
33142346	O
Once	O
a	O
repeat	O
function	O
is	O
somewhere	O
defined	O
as	O
#	O
pre	O
You	O
can	O
use	O
it	O
now	O
and	O
then	O
this	O
way	O
,	O
e	O
.	O
g	O
.	O
:	O
repeat	O
.	B-api_mention
accept	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
To	O
get	O
and	O
equivalent	O
to	O
Haskell	O
'	O
s	O
take	O
8	O
(	O
args	O
)	O
You	O
could	O
write	O
#	O
pre	O
Question	O
-	O
7520432	O
I	O
wanted	O
to	O
clarify	O
if	O
I	O
understand	O
this	O
correctly	O
:	O
#	O
li	O
=	O
=	O
-	O
>	O
is	O
a	O
reference	O
comparison	O
,	O
i	O
.	O
e	O
.	O
both	O
objects	O
point	O
to	O
the	O
same	O
memory	O
location	O
#	O
li	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
>	O
evaluates	O
to	O
the	O
comparison	O
of	O
values	O
in	O
the	O
objects	O
Am	O
I	O
correct	O
in	O
my	O
understanding	O
?	O
Question	O
-	O
22409102	O
,	O
answer	O
-	O
22409270	O
You	O
can	O
use	O
Float	B-api_mention
.	I-api_mention
floatToIntBits	I-api_mention
to	O
convert	O
it	O
to	O
an	O
int	O
and	O
look	O
at	O
the	O
bit	O
pattern	O
:	O
#	O
pre	O
Question	O
-	O
18636561	O
,	O
answer	O
-	O
18824858	O
Whenever	O
a	O
new	O
keyword	O
is	O
used	O
it	O
Creates	O
a	O
Object	B-api_mention
at	O
the	O
Heap	O
1	O
)	O
StringBuilder	B-api_mention
sample	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
)	I-api_mention
;	O
2	O
)	O
StringBuilder	B-api_mention
referToSample	O
=	O
sample	O
;	O
In	O
2	O
)	O
the	O
Reference	O
of	O
referSample	O
is	O
created	O
on	O
same	O
object	O
sample	O
thus	O
referToSample	O
=	O
null	O
;	O
is	O
Nulling	O
Only	O
the	O
referSample	O
Reference	O
giving	O
no	O
effect	O
to	O
sample	O
that	O
'	O
s	O
why	O
you	O
are	O
not	O
getting	O
NULL	O
Pointer	O
Exception	O
Thanks	O
to	O
Java	O
'	O
s	O
Garbage	O
Collection	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
31707746	O
One	O
of	O
most	O
upleasing	O
functional	O
forEach	B-api_mention
'	O
s	O
limitations	O
is	O
lack	O
of	O
checked	O
exceptions	O
support	O
.	O
One	O
possible	O
workaround	O
is	O
to	O
replace	O
terminal	O
forEach	B-api_mention
with	O
plain	O
old	O
foreach	O
loop	O
:	O
#	O
pre	O
Here	O
is	O
list	O
of	O
most	O
popular	O
questions	O
with	O
other	O
workarounds	O
on	O
checked	O
exception	O
handling	O
within	O
lambdas	O
and	O
streams	O
:	O
Java	O
8	O
Lambda	O
function	O
that	O
throws	O
exception	O
?	O
Java	O
8	O
:	O
Lambda	O
-	O
Streams	O
,	O
Filter	O
by	O
Method	O
with	O
Exception	B-api_mention
How	O
can	O
I	O
throw	O
CHECKED	O
exceptions	O
from	O
inside	O
Java	O
8	O
streams	O
?	O
Java	O
8	O
:	O
Mandatory	O
checked	O
exceptions	O
handling	O
in	O
lambda	O
expressions	O
.	O
Why	O
mandatory	O
,	O
not	O
optional	O
?	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20889556	O
To	O
complement	O
the	O
given	O
answers	O
,	O
also	O
take	O
note	O
of	O
the	O
following	O
:	O
#	O
pre	O
This	O
code	O
will	O
also	O
print	O
:	O
false	O
As	O
user	O
Jay	O
has	O
claimed	O
in	O
a	O
comment	O
for	O
the	O
accepted	O
answer	O
,	O
care	O
must	O
be	O
taken	O
when	O
using	O
operator	O
=	O
=	O
on	O
objects	O
,	O
here	O
you	O
'	O
re	O
checking	O
if	O
both	O
references	O
are	O
the	O
same	O
,	O
which	O
is	O
not	O
,	O
because	O
they	O
are	O
different	O
objets	O
,	O
although	O
they	O
represent	O
the	O
very	O
same	O
value	O
.	O
To	O
compare	O
objects	O
,	O
you	O
should	O
use	O
the	O
equals	O
method	O
instead	O
:	O
#	O
pre	O
This	O
will	O
print	O
:	O
true	O
You	O
may	O
ask	O
,	O
But	O
then	O
why	O
the	O
first	O
line	O
printed	O
true	O
?	O
.	O
Checking	O
the	O
source	O
code	O
for	O
the	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
method	O
,	O
you	O
can	O
see	O
the	O
following	O
:	O
#	O
pre	O
If	O
the	O
param	O
is	O
an	O
integer	O
between	O
IntegerCache	B-api_mention
.	I-api_mention
low	I-api_mention
(	O
defaulted	O
to	O
-	O
128	O
)	O
and	O
IntegerCache	B-api_mention
.	I-api_mention
high	I-api_mention
(	O
calculated	O
at	O
runtime	O
with	O
minimum	O
value	O
127	O
)	O
then	O
a	O
pre	O
-	O
allocated	O
(	O
cached	O
)	O
object	O
is	O
returned	O
.	O
So	O
when	O
you	O
use	O
127	O
as	O
parameter	O
,	O
you	O
'	O
re	O
getting	O
two	O
references	O
to	O
same	O
cached	O
object	O
and	O
getting	O
true	O
in	O
the	O
comparison	O
of	O
the	O
references	O
.	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
6548647	O
Static	O
field	O
holding	O
object	O
reference	O
[	O
esp	O
final	O
field	O
]	O
#	O
pre	O
Calling	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
lengthy	O
String	B-api_mention
#	O
pre	O
(	O
Unclosed	O
)	O
open	O
streams	O
(	O
file	O
,	O
network	O
etc	O
.	O
.	O
.	O
)	O
#	O
pre	O
Unclosed	O
connections	O
#	O
pre	O
Areas	O
that	O
are	O
unreachable	O
from	O
JVM	O
'	O
s	O
garbage	O
collector	O
,	O
such	O
as	O
memory	O
allocated	O
through	O
native	O
methods	O
In	O
web	O
applications	O
,	O
some	O
objects	O
are	O
stored	O
in	O
application	O
scope	O
until	O
the	O
application	O
is	O
explicitly	O
stopped	O
or	O
removed	O
.	O
getServletContext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Incorrect	O
or	O
inappropriate	O
JVM	O
options	O
,	O
such	O
as	O
the	O
noclassgc	O
option	O
on	O
IBM	O
JDK	O
that	O
prevents	O
unused	O
class	O
garbage	O
collection	O
See	O
IBM	O
jdk	O
settings	O
.	O
Question	O
-	O
13659217	O
,	O
answer	O
-	O
13659231	O
You	O
can	O
'	O
t	O
see	O
this	O
method	O
in	O
javadoc	O
because	O
it	O
'	O
s	O
added	O
by	O
the	O
compiler	O
.	O
Documented	O
in	O
three	O
places	O
:	O
#	O
li	O
Enum	O
Types	O
,	O
The	O
Java	O
Tutorials	O
#	O
blockquote	O
#	O
li	O
Enum	B-api_mention
.	I-api_mention
valueOf	I-api_mention
class	O
(	O
The	O
special	O
implicit	O
values	B-api_mention
method	O
is	O
mentioned	O
in	O
description	O
of	O
valueOf	B-api_mention
method	O
)	O
#	O
blockquote	O
#	O
li	O
Enum	O
Types	O
,	O
Section	O
8	O
.	O
9	O
,	O
Java	O
Language	O
Specification	O
The	O
values	B-api_mention
function	O
simply	O
list	O
all	O
values	O
of	O
the	O
enumeration	O
.	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5103360	O
We	O
usually	O
have	O
two	O
IDs	O
in	O
our	O
entities	O
:	O
#	O
li	O
Is	O
for	O
persistence	O
layer	O
only	O
(	O
so	O
that	O
persistence	O
provider	O
and	O
database	O
can	O
figure	O
out	O
relationships	O
between	O
objects	O
)	O
.	O
#	O
li	O
Is	O
for	O
our	O
application	O
needs	O
(	O
equals	O
(	O
args	O
)	O
and	O
hashCode	O
(	O
args	O
)	O
in	O
particular	O
)	O
Take	O
a	O
look	O
:	O
#	O
pre	O
EDIT	O
:	O
to	O
clarify	O
my	O
point	O
regarding	O
calls	O
to	O
setUuid	O
(	O
args	O
)	O
method	O
.	O
Here	O
'	O
s	O
a	O
typical	O
scenario	O
:	O
#	O
pre	O
When	O
I	O
run	O
my	O
tests	O
and	O
see	O
the	O
log	O
output	O
I	O
fix	O
the	O
problem	O
:	O
#	O
pre	O
Alternatively	O
,	O
one	O
can	O
provide	O
a	O
separate	O
constructor	O
:	O
#	O
pre	O
So	O
my	O
example	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
use	O
a	O
default	O
constructor	O
and	O
a	O
setter	O
,	O
but	O
you	O
may	O
find	O
two	O
-	O
constructors	O
approach	O
more	O
suitable	O
for	O
you	O
.	O
Question	O
-	O
14602062	O
,	O
answer	O
-	O
14602092	O
From	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
)	I-api_mention
API	O
Doc	O
:	O
#	O
blockquote	O
Overloaded	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
regex	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
is	O
more	O
appropriate	O
for	O
your	O
case	O
.	O
Question	O
-	O
22718744	O
,	O
answer	O
-	O
27477312	O
The	O
behavior	O
of	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	O
which	O
calls	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
)	O
changes	O
between	O
Java	O
7	O
and	O
Java	O
8	O
.	O
Documentation	O
Comparing	O
between	O
the	O
documentation	O
of	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
in	O
Java	O
7	O
and	O
Java	O
8	O
,	O
we	O
observe	O
the	O
following	O
clause	O
being	O
added	O
:	O
#	O
blockquote	O
The	O
same	O
clause	O
is	O
also	O
added	O
to	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
in	O
Java	O
8	O
,	O
compared	O
to	O
Java	O
7	O
.	O
Reference	O
implementation	O
Let	O
us	O
compare	O
the	O
code	O
of	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
of	O
the	O
reference	O
implemetation	O
in	O
Java	O
7	O
and	O
Java	O
8	O
.	O
The	O
code	O
is	O
retrieved	O
from	O
grepcode	O
,	O
for	O
version	O
7u40	O
-	O
b43	O
and	O
8	O
-	O
b132	O
.	O
Java	O
7	O
#	O
pre	O
Java	O
8	O
#	O
pre	O
The	O
addition	O
of	O
the	O
following	O
code	O
in	O
Java	O
8	O
excludes	O
the	O
zero	O
-	O
length	O
match	O
at	O
the	O
beginning	O
of	O
the	O
input	O
string	O
,	O
which	O
explains	O
the	O
behavior	O
above	O
.	O
#	O
pre	O
Maintaining	O
compatibility	O
Following	O
behavior	O
in	O
Java	O
8	O
and	O
above	O
To	O
make	O
split	B-api_mention
behaves	O
consistently	O
across	O
versions	O
and	O
compatible	O
with	O
the	O
behavior	O
in	O
Java	O
8	O
:	O
#	O
li	O
If	O
your	O
regex	O
can	O
match	O
zero	O
-	O
length	O
string	O
,	O
just	O
add	O
(	O
?	O
!	O
\	O
A	O
)	O
at	O
the	O
end	O
of	O
the	O
regex	O
and	O
wrap	O
the	O
original	O
regex	O
in	O
non	O
-	O
capturing	O
group	O
(	O
?	O
:	O
.	O
.	O
.	O
)	O
(	O
if	O
necessary	O
)	O
.	O
#	O
li	O
If	O
your	O
regex	O
can	O
'	O
t	O
match	O
zero	O
-	O
length	O
string	O
,	O
you	O
don	O
'	O
t	O
need	O
to	O
do	O
anything	O
.	O
#	O
li	O
If	O
you	O
don	O
'	O
t	O
know	O
whether	O
the	O
regex	O
can	O
match	O
zero	O
-	O
length	O
string	O
or	O
not	O
,	O
do	O
both	O
the	O
actions	O
in	O
step	O
1	O
.	O
(	O
?	O
!	O
\	O
A	O
)	O
checks	O
that	O
the	O
string	O
does	O
not	O
end	O
at	O
the	O
beginning	O
of	O
the	O
string	O
,	O
which	O
implies	O
that	O
the	O
match	O
is	O
an	O
empty	O
match	O
at	O
the	O
beginning	O
of	O
the	O
string	O
.	O
Following	O
behavior	O
in	O
Java	O
7	O
and	O
prior	O
There	O
is	O
no	O
general	O
solution	O
to	O
make	O
split	B-api_mention
backward	O
-	O
compatible	O
with	O
Java	O
7	O
and	O
prior	O
,	O
short	O
of	O
replacing	O
all	O
instance	O
of	O
split	B-api_mention
to	O
point	O
to	O
your	O
own	O
custom	O
implementation	O
.	O
Question	O
-	O
31419029	O
I	O
'	O
ve	O
tried	O
to	O
build	O
my	O
own	O
Map	B-api_mention
to	O
increase	O
the	O
performance	O
for	O
a	O
special	O
environment	O
,	O
and	O
I	O
realized	O
something	O
pretty	O
interesting	O
:	O
Creating	O
a	O
new	O
Hashmap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
faster	O
than	O
new	O
Object	B-api_mention
[	I-api_mention
2000	I-api_mention
]	I-api_mention
-	O
no	O
matter	O
in	O
which	O
order	O
I	O
execute	O
these	O
commands	O
.	O
That	O
'	O
s	O
pretty	O
confusing	O
to	O
me	O
,	O
esp	O
.	O
because	O
the	O
Hashmap	B-api_mention
constructor	O
contains	O
a	O
table	O
=	O
new	O
Entry	O
[	O
capacity	O
]	O
,	O
according	O
to	O
this	O
.	O
Is	O
there	O
something	O
wrong	O
with	O
my	O
testbench	O
?	O
#	O
pre	O
I	O
'	O
d	O
love	O
to	O
see	O
the	O
results	O
of	O
testing	O
on	O
another	O
computer	O
.	O
I	O
'	O
ve	O
got	O
no	O
clue	O
why	O
creating	O
a	O
HashMap	B-api_mention
is	O
10	O
times	O
faster	O
than	O
creating	O
a	O
Object	B-api_mention
[	I-api_mention
]	I-api_mention
.	O
Question	O
-	O
13659217	O
I	O
declare	O
an	O
enum	O
as	O
:	O
enum	O
Sex	O
{	O
MALE	O
,	O
FEMALE	O
}	O
;	O
And	O
then	O
,	O
iterate	O
enum	O
as	O
shown	O
below	O
:	O
#	O
pre	O
I	O
checked	O
the	O
Java	O
API	O
but	O
can	O
'	O
t	O
find	O
the	O
values	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
?	O
I	O
'	O
m	O
curious	O
as	O
to	O
where	O
this	O
method	O
comes	O
from	O
?	O
API	O
link	O
:	O
#	O
a	O
Question	O
-	O
20363719	O
,	O
answer	O
-	O
25453317	O
If	O
your	O
key	O
is	O
NOT	O
guaranteed	O
to	O
be	O
unique	O
for	O
all	O
elements	O
in	O
the	O
list	O
,	O
you	O
should	O
convert	O
it	O
to	O
a	O
Map	B-api_mention
<	O
String	B-api_mention
,	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
instead	O
of	O
a	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Map	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
result	O
=	O
choices	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
35264580	O
Main	O
difference	O
is	O
that	O
when	O
program	O
calls	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
a	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
is	O
executed	O
in	O
new	O
Thread	B-api_mention
while	O
if	O
you	O
call	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
directly	O
no	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	O
(	O
)	O
will	O
execute	O
on	O
current	O
Thread	O
.	O
Another	O
difference	O
between	O
start	O
vs	O
run	O
in	O
Java	O
thread	O
is	O
that	O
you	O
can	O
not	O
call	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
on	O
thread	O
object	O
.	O
once	O
started	O
,	O
second	O
call	O
of	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
throw	O
IllegalStateException	B-api_mention
in	O
Java	O
while	O
you	O
can	O
call	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
.	O
Question	O
-	O
22463062	O
,	O
answer	O
-	O
28324294	O
You	O
can	O
also	O
use	O
LocalDate	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
LocalDateTime	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
String	B-api_mention
without	O
providing	O
it	O
with	O
a	O
pattern	O
,	O
if	O
the	O
String	B-api_mention
is	O
in	O
ISO	O
-	O
8601	O
format	O
.	O
for	O
example	O
,	O
#	O
pre	O
Output	O
,	O
#	O
pre	O
and	O
use	O
DateTimeFormatter	B-api_mention
only	O
if	O
you	O
have	O
to	O
deal	O
with	O
other	O
date	O
patterns	O
,	O
For	O
example	O
,	O
dd	O
MMM	O
uuuu	O
represents	O
the	O
day	O
of	O
the	O
month	O
(	O
two	O
digits	O
)	O
,	O
three	O
letters	O
of	O
the	O
name	O
of	O
the	O
month	O
(	O
Jan	O
,	O
Feb	O
,	O
Mar	O
,	O
.	O
.	O
.	O
)	O
,	O
and	O
a	O
four	O
-	O
digit	O
year	O
:	O
#	O
pre	O
Output	O
04	O
Aug	O
2015	O
parses	O
to	O
2015	O
-	O
08	O
-	O
04	O
also	O
remember	O
that	O
the	O
DateTimeFormatter	B-api_mention
object	O
is	O
bidirectional	O
;	O
it	O
can	O
both	O
parse	O
input	O
and	O
format	O
output	O
.	O
#	O
pre	O
Output	O
2015	O
-	O
08	O
-	O
04	O
formats	O
as	O
04	O
Aug	O
2015	O
(	O
see	O
complete	O
list	O
of	O
Patterns	O
for	O
Formatting	O
and	O
Parsing	O
DateFormatter	B-api_mention
)	O
#	O
pre	O
Question	O
-	O
31696485	O
When	O
using	O
the	O
Java	O
8	O
Optional	B-api_mention
class	O
,	O
there	O
are	O
two	O
ways	O
in	O
which	O
a	O
value	O
can	O
be	O
wrapped	O
in	O
an	O
optional	O
.	O
#	O
pre	O
I	O
understand	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
is	O
the	O
only	O
safe	O
way	O
of	O
using	O
Optional	B-api_mention
,	O
but	O
why	O
does	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
exist	O
at	O
all	O
?	O
Why	O
not	O
just	O
use	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
and	O
be	O
on	O
the	O
safe	O
side	O
at	O
all	O
times	O
?	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032144	O
The	O
source	O
code	O
for	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
The	O
source	O
code	O
for	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
As	O
defined	O
in	O
AbstractCollection	B-api_mention
)	O
:	O
#	O
pre	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
much	O
faster	O
since	O
it	O
doesn	O
'	O
t	O
have	O
to	O
deal	O
with	O
all	O
those	O
extra	O
method	O
calls	O
.	O
And	O
as	O
Atrey	O
points	O
out	O
,	O
c	O
.	B-api_mention
contains	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
increases	O
the	O
time	O
complexity	O
of	O
removeAll	B-api_mention
to	O
O	O
(	O
n	O
^	O
2	O
)	O
as	O
opposed	O
to	O
clear	O
'	O
s	O
O	O
(	O
n	O
)	O
.	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
9991624	O
You	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
catch	O
the	O
NumberFormatException	B-api_mention
if	O
the	O
string	O
is	O
not	O
a	O
valid	O
integer	O
,	O
in	O
the	O
following	O
fashion	O
(	O
as	O
pointed	O
out	O
by	O
all	O
answers	O
)	O
:	O
#	O
pre	O
However	O
,	O
note	O
here	O
that	O
if	O
the	O
evaluated	O
integer	O
overflows	O
,	O
the	O
same	O
exception	O
will	O
be	O
thrown	O
.	O
Your	O
purpose	O
was	O
to	O
find	O
out	O
whether	O
or	O
not	O
,	O
it	O
was	O
a	O
valid	O
integer	O
.	O
So	O
its	O
safer	O
to	O
make	O
your	O
own	O
method	O
to	O
check	O
for	O
validity	O
:	O
#	O
pre	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
20454885	O
For	O
everybody	O
who	O
codes	O
Java	O
for	O
Android	O
devices	O
and	O
ends	O
up	O
here	O
:	O
use	O
SparseArray	B-api_mention
for	O
better	O
performance	O
private	O
final	O
SparseArray	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
SparseArray	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
with	O
this	O
you	O
can	O
use	O
int	O
instead	O
of	O
Integer	B-api_mention
like	O
#	O
pre	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
30190425	O
I	O
'	O
ll	O
vote	O
for	O
sb	O
.	B-api_mention
setLength	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
not	O
only	O
because	O
it	O
'	O
s	O
one	O
function	O
call	O
but	O
because	O
it	O
don	O
'	O
t	O
actually	O
copy	O
the	O
array	O
into	O
another	O
array	O
like	O
sb	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
It	O
just	O
fill	O
the	O
remaining	O
characters	O
to	O
be	O
0	O
and	O
set	O
the	O
length	O
variable	O
to	O
the	O
new	O
length	O
.	O
You	O
can	O
take	O
a	O
look	O
into	O
their	O
implementation	O
to	O
validate	O
my	O
point	O
from	O
here	O
at	O
setLength	B-api_mention
function	O
and	O
delete0	O
function	O
.	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908402	O
Although	O
there	O
is	O
no	O
explicit	O
guarantee	O
of	O
this	O
,	O
the	O
end	O
result	O
is	O
bound	O
to	O
be	O
such	O
that	O
the	O
comparison	O
always	O
succeeds	O
for	O
enum	O
constants	O
with	O
identical	O
names	O
:	O
#	O
pre	O
The	O
reason	O
for	O
this	O
is	O
that	O
Java	O
compiler	O
constructs	O
subclasses	O
of	O
Enum	O
in	O
such	O
a	O
way	O
that	O
they	O
end	O
up	O
calling	O
Enum	O
'	O
s	O
sole	O
protected	O
constructor	O
,	O
passing	O
it	O
the	O
name	O
of	O
enum	O
value	O
:	O
protected	O
Enum	O
(	O
args	O
)	O
;	O
The	O
name	O
is	O
embedded	O
into	O
the	O
generated	O
code	O
in	O
the	O
form	O
of	O
a	O
string	O
literal	O
.	O
According	O
to	O
String	B-api_mention
documentation	O
,	O
#	O
blockquote	O
This	O
amounts	O
to	O
an	O
implicit	O
guarantee	O
of	O
your	O
expression	O
succeeding	O
when	O
names	O
of	O
enum	O
constants	O
are	O
identical	O
.	O
However	O
,	O
I	O
would	O
not	O
rely	O
on	O
this	O
behavior	O
,	O
and	O
use	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
,	O
because	O
anyone	O
reading	O
my	O
code	O
would	O
be	O
scratching	O
his	O
head	O
,	O
thinking	O
that	O
I	O
made	O
a	O
mistake	O
.	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
36978943	O
I	O
'	O
ve	O
been	O
confused	O
by	O
the	O
wide	O
range	O
of	O
different	O
naming	O
schemes	O
as	O
well	O
,	O
and	O
was	O
just	O
about	O
to	O
ask	O
and	O
answer	O
my	O
own	O
question	O
on	O
this	O
when	O
I	O
found	O
this	O
question	O
here	O
.	O
I	O
think	O
my	O
findings	O
fit	O
it	O
well	O
enough	O
,	O
and	O
complement	O
what	O
'	O
s	O
already	O
here	O
.	O
My	O
focus	O
is	O
looking	O
for	O
documentation	O
on	O
the	O
various	O
terms	O
,	O
and	O
adding	O
some	O
more	O
related	O
terms	O
that	O
might	O
crop	O
up	O
in	O
other	O
places	O
.	O
Consider	O
the	O
following	O
example	O
:	O
#	O
pre	O
#	O
li	O
The	O
simple	O
name	O
of	O
D	O
is	O
D	O
.	O
That	O
'	O
s	O
just	O
the	O
part	O
you	O
wrote	O
when	O
declaring	O
the	O
class	O
.	O
Anonymous	O
classes	O
have	O
no	O
simple	O
name	O
.	O
Class	B-api_mention
.	I-api_mention
getSimpleName	I-api_mention
(	I-api_mention
)	I-api_mention
returns	O
this	O
name	O
or	O
the	O
empty	O
string	O
.	O
It	O
is	O
possible	O
for	O
the	O
simple	O
name	O
to	O
contain	O
a	O
$	O
if	O
you	O
write	O
it	O
like	O
this	O
,	O
since	O
$	O
is	O
a	O
valid	O
part	O
of	O
an	O
identifier	O
.	O
#	O
li	O
According	O
to	O
the	O
JLS	O
section	O
6	O
.	O
7	O
,	O
both	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
and	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
.	O
D	O
.	O
D	O
would	O
be	O
fully	O
qualified	O
names	O
,	O
but	O
only	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
would	O
be	O
the	O
canonical	O
name	O
of	O
D	O
.	O
So	O
every	O
canonical	O
name	O
is	O
a	O
fully	O
qualified	O
name	O
,	O
but	O
the	O
converes	O
is	O
not	O
always	O
true	O
.	O
Class	B-api_mention
.	I-api_mention
getCanonicalName	I-api_mention
(	I-api_mention
)	I-api_mention
will	O
return	O
the	O
canonical	O
name	O
or	O
null	O
.	O
#	O
li	O
Class	B-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
documented	O
to	O
return	O
the	O
binary	O
name	O
,	O
as	O
specified	O
in	O
JLS	O
section	O
13	O
.	O
1	O
.	O
In	O
this	O
case	O
it	O
returns	O
a	O
.	O
b	O
.	O
C	O
$	O
D	O
for	O
D	O
and	O
[	O
La	O
.	O
b	O
.	O
C	O
$	O
D	O
;	O
for	O
D	O
[	O
]	O
.	O
#	O
li	O
This	O
answer	O
demonstrates	O
that	O
it	O
is	O
possible	O
for	O
two	O
classes	O
loaded	O
by	O
the	O
same	O
class	O
loader	O
to	O
have	O
the	O
same	O
canonical	O
name	O
but	O
distinct	O
binary	O
names	O
.	O
Neither	O
name	O
is	O
sufficient	O
to	O
reliably	O
deduce	O
the	O
other	O
:	O
if	O
you	O
have	O
the	O
canonical	O
name	O
,	O
you	O
don	O
'	O
t	O
know	O
which	O
parts	O
of	O
the	O
name	O
are	O
packages	O
and	O
which	O
are	O
containing	O
classes	O
.	O
If	O
you	O
have	O
the	O
binary	O
name	O
,	O
you	O
don	O
'	O
t	O
know	O
which	O
$	O
were	O
introduced	O
as	O
separators	O
and	O
which	O
were	O
part	O
of	O
some	O
simple	O
name	O
.	O
#	O
li	O
Anonymous	O
classes	O
and	O
local	O
classes	O
have	O
no	O
fully	O
qualified	O
names	O
but	O
still	O
have	O
a	O
binary	O
name	O
.	O
The	O
same	O
holds	O
for	O
classes	O
nested	O
inside	O
such	O
classes	O
.	O
Every	O
class	O
has	O
a	O
binary	O
name	O
.	O
#	O
li	O
Running	O
javap	O
-	O
v	O
-	O
private	O
on	O
a	O
/	O
b	O
/	O
C	O
.	O
class	O
shows	O
that	O
the	O
bytecode	O
refers	O
to	O
the	O
type	O
of	O
d	O
as	O
La	O
/	O
b	O
/	O
C	O
$	O
D	O
;	O
and	O
that	O
of	O
the	O
array	O
ds	O
as	O
[	O
La	O
/	O
b	O
/	O
C	O
$	O
D	O
;	O
.	O
These	O
are	O
called	O
descriptors	O
,	O
and	O
they	O
are	O
specified	O
in	O
JVMS	O
section	O
4	O
.	O
3	O
.	O
#	O
li	O
The	O
class	O
name	O
a	O
/	O
b	O
/	O
C	O
$	O
D	O
used	O
in	O
both	O
of	O
these	O
descriptors	O
is	O
what	O
you	O
get	O
by	O
replacing	O
.	O
by	O
/	O
in	O
the	O
binary	O
name	O
.	O
The	O
JVM	O
spec	O
apparently	O
calls	O
this	O
the	O
internal	O
form	O
of	O
the	O
binary	O
name	O
.	O
JVMS	O
section	O
4	O
.	O
2	O
.	O
1	O
describes	O
it	O
,	O
and	O
states	O
that	O
the	O
difference	O
from	O
the	O
binary	O
name	O
were	O
for	O
historical	O
reasons	O
.	O
#	O
li	O
The	O
file	O
name	O
of	O
a	O
class	O
in	O
one	O
of	O
the	O
typical	O
filename	O
-	O
based	O
class	O
loaders	O
is	O
what	O
you	O
get	O
if	O
you	O
interpret	O
the	O
/	O
in	O
the	O
internal	O
form	O
of	O
the	O
binary	O
name	O
as	O
a	O
directory	O
separator	O
,	O
and	O
append	O
the	O
file	O
name	O
extension	O
.	O
class	O
to	O
it	O
.	O
It	O
'	O
s	O
resolved	O
relative	O
to	O
the	O
class	O
path	O
used	O
by	O
the	O
class	O
loader	O
in	O
question	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26877910	O
What	O
I	O
can	O
only	O
share	O
is	O
my	O
own	O
method	O
.	O
You	O
can	O
use	O
a	O
temporary	O
String	B-api_mention
temp	O
=	O
StringLiteral	O
;	O
or	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
my	O
example	O
code	O
created	O
in	O
console	O
application	O
via	O
c	O
#	O
-	O
"	O
Idea	O
Only	O
,	O
Not	O
Exact	O
Answer	O
"	O
.	O
#	O
pre	O
Or	O
you	O
can	O
also	O
use	O
the	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
pre	O
Output	O
:	O
time	O
upon	O
a	O
Once	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
foo	O
.	O
Question	O
-	O
22561614	O
Note	O
:	O
this	O
question	O
originates	O
from	O
a	O
dead	O
link	O
which	O
was	O
a	O
previous	O
SO	O
question	O
,	O
but	O
here	O
goes	O
.	O
.	O
.	O
See	O
this	O
code	O
(	O
note	O
:	O
I	O
do	O
know	O
that	O
this	O
code	O
won	O
'	O
t	O
"	O
work	O
"	O
and	O
that	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
compare	I-api_mention
should	O
be	O
used	O
-	O
-	O
I	O
just	O
extracted	O
it	O
from	O
the	O
linked	O
question	O
)	O
:	O
#	O
pre	O
According	O
to	O
the	O
javadoc	O
of	O
.	B-api_mention
min	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
.	B-api_mention
max	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
the	O
argument	O
of	O
both	O
should	O
be	O
a	O
Comparator	B-api_mention
.	O
Yet	O
here	O
the	O
method	O
references	O
are	O
to	O
static	O
methods	O
of	O
the	O
Integer	B-api_mention
class	O
.	O
So	O
,	O
why	O
does	O
this	O
compile	O
at	O
all	O
?	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
7056786	O
It	O
'	O
s	O
because	O
when	O
you	O
enter	O
a	O
number	O
then	O
press	O
Enter	O
,	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
consumes	O
only	O
the	O
number	O
,	O
not	O
the	O
"	O
end	O
of	O
line	O
"	O
.	O
When	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
executes	O
,	O
it	O
consumes	O
the	O
"	O
end	O
of	O
line	O
"	O
still	O
in	O
the	O
buffer	O
from	O
the	O
first	O
input	O
.	O
Instead	O
,	O
use	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
immediately	O
after	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489410	O
Java	O
String	B-api_mention
is	O
Special	O
#	O
blockquote	O
For	O
example	O
#	O
pre	O
#	O
img	O
Note	O
:	O
String	B-api_mention
literals	O
are	O
stored	O
in	O
a	O
common	O
pool	O
.	O
This	O
facilitates	O
sharing	O
of	O
storage	O
for	O
strings	O
with	O
the	O
same	O
contents	O
to	O
conserve	O
storage	O
.	O
String	B-api_mention
objects	O
allocated	O
via	O
new	O
operator	O
are	O
stored	O
in	O
the	O
heap	O
,	O
and	O
there	O
is	O
no	O
sharing	O
of	O
storage	O
for	O
the	O
same	O
contents	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28818627	O
Perhaps	O
this	O
is	O
what	O
you	O
'	O
re	O
after	O
:	O
Get	O
value	O
from	O
one	O
Optional	B-api_mention
or	O
another	O
Otherwise	O
,	O
you	O
may	O
want	O
to	O
have	O
a	O
look	O
at	O
Optional	B-api_mention
.	I-api_mention
orElseGet	I-api_mention
.	O
Here	O
'	O
s	O
an	O
example	O
of	O
what	O
I	O
think	O
that	O
you	O
'	O
re	O
after	O
:	O
result	O
=	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
31188231	O
It	O
has	O
generally	O
been	O
the	O
case	O
the	O
Java	O
source	O
code	O
has	O
been	O
forward	O
compatible	O
.	O
Until	O
Java	O
8	O
,	O
as	O
far	O
as	O
I	O
know	O
,	O
both	O
compiled	O
classes	O
and	O
source	O
have	O
been	O
forward	O
compatible	O
with	O
later	O
JDK	O
/	O
JVM	O
releases	O
.	O
[	O
Update	O
:	O
this	O
is	O
not	O
correct	O
,	O
see	O
comments	O
re	O
'	O
enum	O
'	O
,	O
etc	O
,	O
below	O
.	O
]	O
However	O
,	O
with	O
the	O
addition	O
of	O
default	O
methods	O
in	O
Java	O
8	O
this	O
appears	O
to	O
no	O
longer	O
be	O
the	O
case	O
.	O
For	O
example	O
,	O
a	O
library	O
I	O
have	O
been	O
using	O
has	O
an	O
implementation	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
which	O
includes	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
sort	O
(	O
args	O
)	O
.	O
This	O
method	O
returns	O
a	O
copy	O
of	O
the	O
contents	O
of	O
the	O
list	O
sorted	O
.	O
This	O
library	O
,	O
deployed	O
as	O
a	O
jar	O
file	O
dependency	O
,	O
worked	O
fine	O
in	O
a	O
project	O
being	O
built	O
using	O
JDK	O
1	O
.	O
8	O
.	O
However	O
,	O
later	O
I	O
had	O
occasion	O
to	O
recompile	O
the	O
library	O
itself	O
using	O
JDK	O
1	O
.	O
8	O
and	O
I	O
found	O
the	O
library	O
no	O
longer	O
compiles	O
:	O
the	O
List	O
-	O
implementing	O
class	O
with	O
its	O
own	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
now	O
conflicts	O
with	O
the	O
Java	O
8	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
List	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
.	O
The	O
Java	O
8	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
default	O
method	O
sorts	O
the	O
list	O
in	O
place	O
(	O
returns	O
void	O
)	O
;	O
my	O
library	O
'	O
s	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
-	O
since	O
it	O
returns	O
a	O
new	O
sorted	O
list	O
-	O
has	O
an	O
incompatible	O
signature	O
.	O
So	O
my	O
basic	O
question	O
is	O
:	O
#	O
li	O
Doesn	O
'	O
t	O
JDK	O
1	O
.	O
8	O
introduce	O
a	O
forward	O
incompatibility	O
for	O
Java	O
source	O
code	O
due	O
to	O
default	O
methods	O
?	O
Also	O
:	O
#	O
li	O
Is	O
this	O
the	O
first	O
such	O
forward	O
incompatible	O
change	O
?	O
#	O
li	O
Was	O
this	O
considered	O
or	O
discussed	O
when	O
default	O
methods	O
where	O
designed	O
and	O
implemented	O
?	O
Is	O
it	O
documented	O
anywhere	O
?	O
#	O
li	O
Was	O
the	O
(	O
admittedly	O
small	O
)	O
inconvenience	O
discounted	O
versus	O
the	O
benefits	O
?	O
The	O
following	O
is	O
an	O
example	O
of	O
some	O
code	O
that	O
compiles	O
and	O
runs	O
under	O
1	O
.	O
7	O
and	O
runs	O
under	O
1	O
.	O
8	O
-	O
but	O
does	O
not	O
compile	O
under	O
1	O
.	O
8	O
:	O
#	O
pre	O
The	O
following	O
shows	O
this	O
code	O
being	O
compiled	O
(	O
or	O
failing	O
to	O
)	O
and	O
being	O
run	O
.	O
#	O
pre	O
Question	O
-	O
32693704	O
I	O
noticed	O
something	O
strange	O
in	O
the	O
implementation	O
of	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
how	O
it	O
looked	O
in	O
OpenJDK	O
7u40	O
:	O
#	O
pre	O
And	O
this	O
is	O
how	O
it	O
looks	O
as	O
of	O
OpenJDK	O
8u40	O
:	O
#	O
pre	O
I	O
understand	O
that	O
now	O
the	O
table	O
can	O
be	O
null	O
for	O
empty	O
an	O
map	O
,	O
thus	O
the	O
additional	O
check	O
and	O
caching	O
in	O
a	O
local	O
variable	O
is	O
required	O
.	O
But	O
why	O
was	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
replaced	O
with	O
a	O
for	O
-	O
loop	O
?	O
It	O
seems	O
that	O
the	O
change	O
was	O
introduced	O
in	O
this	O
commit	O
.	O
Unfortunately	O
I	O
found	O
no	O
explanation	O
for	O
why	O
a	O
plain	O
for	O
loop	O
might	O
be	O
better	O
than	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Is	O
it	O
faster	O
?	O
Or	O
safer	O
?	O
Question	O
-	O
8430805	O
,	O
answer	O
-	O
22332291	O
Sudheesh	O
B	O
Nair	O
'	O
s	O
has	O
a	O
nice	O
(	O
and	O
accepted	O
)	O
answer	O
on	O
the	O
question	O
,	O
which	O
i	O
think	O
should	O
have	O
a	O
better	O
alternative	O
such	O
as	O
;	O
What	O
'	O
s	O
wrong	O
with	O
measuring	O
time	O
passed	O
and	O
checking	O
if	O
TIME	O
_	O
INTERVAL	O
miliseconds	O
(	O
say	O
2000	O
)	O
passed	O
since	O
the	O
last	O
back	O
press	O
.	O
The	O
following	O
sample	O
code	O
uses	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
to	O
store	O
the	O
time	O
onBackPressed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
;	O
#	O
pre	O
Back	O
on	O
accepted	O
answer	O
critique	O
;	O
Using	O
a	O
flag	O
to	O
indicate	O
if	O
it	O
was	O
pressed	O
in	O
last	O
TIME	O
_	O
INTERVAL	O
(	O
say	O
2000	O
)	O
milliseconds	O
and	O
set	O
-	O
reset	O
is	O
via	O
Handler	B-api_mention
'	O
s	O
postDelayed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
was	O
the	O
first	O
thing	O
to	O
come	O
in	O
my	O
mind	O
.	O
But	O
the	O
postDelayed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
action	O
should	O
be	O
cancelled	O
when	O
activity	O
is	O
closing	O
,	O
removing	O
the	O
Runnable	B-api_mention
.	O
In	O
order	O
to	O
remove	O
the	O
Runnable	B-api_mention
,	O
it	O
must	O
not	O
be	O
declared	O
anonymous	O
,	O
and	O
be	O
declared	O
as	O
member	O
along	O
with	O
the	O
Handler	B-api_mention
aswell	O
.	O
Then	O
removeCallbacks	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
Handler	B-api_mention
can	O
be	O
called	O
appropriately	O
.	O
The	O
following	O
sample	O
is	O
the	O
demonstration	O
;	O
#	O
pre	O
Thanks	O
to	O
@	O
NSouth	O
for	O
contributing	O
;	O
In	O
order	O
to	O
prevent	O
toast	O
message	O
appearing	O
even	O
after	O
the	O
application	O
is	O
closed	O
,	O
Toast	O
can	O
be	O
declared	O
as	O
a	O
member	O
-	O
say	O
mExitToast	O
-	O
and	O
can	O
be	O
cancelled	O
via	O
mExitToast	O
.	B-api_mention
cancel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
just	O
before	O
super	O
.	B-api_mention
onBackPressed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
.	O
Question	O
-	O
12468764	O
,	O
answer	O
-	O
13368831	O
Actual	O
Answer	O
:	O
The	O
default	O
deserializer	O
for	O
enums	O
uses	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
deserialize	O
,	O
so	O
it	O
'	O
s	O
not	O
using	O
the	O
@	O
JsonValue	O
.	O
So	O
as	O
@	O
OldCurmudgeon	O
pointed	O
out	O
,	O
you	O
'	O
d	O
need	O
to	O
pass	O
in	O
{	O
StringLiteral	O
:	O
StringLiteral	O
}	O
to	O
match	O
the	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
value	O
.	O
An	O
other	O
option	O
(	O
assuming	O
you	O
want	O
the	O
write	O
and	O
read	O
json	O
values	O
to	O
be	O
the	O
same	O
)	O
.	O
.	O
.	O
More	O
Info	O
:	O
There	O
is	O
(	O
yet	O
)	O
another	O
way	O
to	O
manage	O
the	O
serialization	O
and	O
deserialization	O
process	O
with	O
Jackson	O
.	O
You	O
can	O
specify	O
these	O
annotations	O
to	O
use	O
your	O
own	O
custom	O
serializer	O
and	O
deserializer	O
:	O
#	O
pre	O
Then	O
you	O
have	O
to	O
write	O
MySerializer	O
and	O
MyDeserializer	O
which	O
look	O
like	O
this	O
:	O
MySerializer	O
#	O
pre	O
MyDeserializer	O
#	O
pre	O
Last	O
little	O
bit	O
,	O
particularly	O
for	O
doing	O
this	O
to	O
an	O
enum	O
JsonEnum	O
that	O
serializes	O
with	O
the	O
method	O
getYourValue	O
(	O
args	O
)	O
,	O
your	O
serializer	O
and	O
deserializer	O
might	O
look	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
12539365	O
I	O
write	O
jUnit	O
test	O
cases	O
for	O
3	O
purposes	O
:	O
#	O
li	O
To	O
ensure	O
that	O
my	O
code	O
satisfies	O
all	O
of	O
the	O
required	O
functionality	O
,	O
under	O
all	O
(	O
or	O
most	O
of	O
)	O
the	O
input	O
combinations	O
/	O
values	O
.	O
#	O
li	O
To	O
ensure	O
that	O
I	O
can	O
change	O
the	O
implementation	O
,	O
and	O
rely	O
on	O
JUnit	O
test	O
cases	O
to	O
tell	O
me	O
that	O
all	O
my	O
functionality	O
is	O
still	O
satisfied	O
.	O
#	O
li	O
As	O
a	O
documentation	O
of	O
all	O
the	O
use	O
cases	O
my	O
code	O
handles	O
,	O
and	O
act	O
as	O
a	O
spec	O
for	O
refactoring	O
-	O
should	O
the	O
code	O
ever	O
need	O
to	O
be	O
rewritten	O
.	O
(	O
Refactor	O
the	O
code	O
,	O
and	O
if	O
my	O
jUnit	O
tests	O
fail	O
-	O
you	O
probably	O
missed	O
some	O
use	O
case	O
)	O
.	O
I	O
do	O
not	O
understand	O
why	O
or	O
when	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
be	O
used	O
.	O
When	O
I	O
see	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
being	O
called	O
,	O
it	O
is	O
telling	O
me	O
that	O
my	O
jUnit	O
is	O
becoming	O
aware	O
of	O
the	O
implementation	O
.	O
(	O
Thus	O
changing	O
my	O
implementation	O
would	O
break	O
my	O
jUnits	O
,	O
even	O
though	O
my	O
functionality	O
was	O
unaffected	O
)	O
.	O
I	O
'	O
m	O
looking	O
for	O
:	O
#	O
li	O
What	O
should	O
be	O
the	O
guidelines	O
for	O
appropriate	O
usage	O
of	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
#	O
li	O
Is	O
it	O
fundamentally	O
correct	O
for	O
jUnits	O
to	O
be	O
aware	O
of	O
,	O
or	O
tightly	O
coupled	O
to	O
,	O
the	O
implementation	O
of	O
the	O
class	O
under	O
test	O
?	O
Question	O
-	O
10904911	O
I	O
am	O
using	O
trying	O
to	O
use	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
but	O
I	O
think	O
I	O
am	O
doing	O
it	O
wrong	O
:	O
#	O
a	O
My	O
code	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
[	O
I	O
@	O
23fc4bec	O
Also	O
I	O
tried	O
printing	O
like	O
this	O
,	O
but	O
:	O
#	O
pre	O
I	O
took	O
this	O
code	O
out	O
of	O
bigger	O
and	O
more	O
complex	O
code	O
,	O
but	O
I	O
can	O
add	O
it	O
if	O
needed	O
.	O
But	O
this	O
should	O
give	O
general	O
information	O
.	O
I	O
am	O
looking	O
for	O
output	O
,	O
like	O
in	O
Oracle	O
'	O
s	O
documentation	O
:	O
#	O
blockquote	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
28043703	O
As	O
others	O
have	O
noted	O
,	O
getting	O
the	O
hostname	O
based	O
on	O
DNS	O
resolution	O
is	O
unreliable	O
.	O
Since	O
this	O
question	O
is	O
unfortunately	O
still	O
relevant	O
in	O
2016	O
,	O
I	O
'	O
d	O
like	O
to	O
share	O
with	O
you	O
my	O
network	O
-	O
independent	O
solution	O
,	O
with	O
some	O
test	O
runs	O
on	O
different	O
systems	O
.	O
The	O
following	O
code	O
tries	O
to	O
do	O
the	O
following	O
:	O
#	O
li	O
On	O
Windows	O
#	O
li	O
Read	O
the	O
COMPUTERNAME	O
environment	O
variable	O
through	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Execute	O
hostname	O
.	O
exe	O
and	O
read	O
the	O
response	O
#	O
li	O
On	O
Linux	O
#	O
li	O
Read	O
the	O
HOSTNAME	O
environment	O
variable	O
through	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
Execute	O
hostname	O
and	O
read	O
the	O
response	O
#	O
li	O
Read	O
/	O
etc	O
/	O
hostname	O
(	O
to	O
do	O
this	O
I	O
'	O
m	O
executing	O
cat	O
since	O
the	O
snippet	O
already	O
contains	O
code	O
to	O
execute	O
and	O
read	O
.	O
Simply	O
reading	O
the	O
file	O
would	O
be	O
better	O
,	O
though	O
)	O
.	O
The	O
code	O
:	O
#	O
pre	O
Results	O
for	O
different	O
operating	O
systems	O
:	O
OpenSuse	O
13	O
.	O
1	O
#	O
pre	O
Ubuntu	O
14	O
.	O
04	O
LTS	O
This	O
one	O
is	O
kinda	O
strange	O
since	O
echo	O
$	O
HOSTNAME	O
returns	O
the	O
correct	O
hostname	O
,	O
but	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
:	O
#	O
pre	O
EDIT	O
:	O
According	O
to	O
legolas108	O
,	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
works	O
on	O
Ubuntu	O
14	O
.	O
04	O
if	O
you	O
run	O
export	O
HOSTNAME	O
before	O
executing	O
the	O
Java	O
code	O
.	O
Windows	O
7	O
#	O
pre	O
The	O
machine	O
names	O
have	O
been	O
replaced	O
but	O
I	O
kept	O
the	O
capitalization	O
and	O
structure	O
.	O
Note	O
the	O
extra	O
newline	O
when	O
executing	O
hostname	O
,	O
you	O
might	O
have	O
to	O
take	O
it	O
into	O
account	O
in	O
some	O
cases	O
.	O
Question	O
-	O
6652687	O
,	O
answer	O
-	O
6652772	O
Use	O
String	B-api_mention
#	I-api_mention
trim	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
or	O
String	B-api_mention
allRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
trim	O
both	O
the	O
end	O
.	O
For	O
left	O
trim	O
:	O
String	B-api_mention
leftRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
right	O
trim	O
:	O
String	B-api_mention
rightRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
25074487	O
-	O
getParameter	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
get	O
the	O
value	O
from	O
the	O
posted	O
form	O
of	O
the	O
input	O
box	O
named	O
"	O
testParam	O
"	O
which	O
is	O
"	O
Client	O
param	O
"	O
.	O
It	O
will	O
then	O
print	O
it	O
out	O
,	O
so	O
you	O
should	O
see	O
"	O
Client	O
Param	O
"	O
on	O
the	O
screen	O
.	O
So	O
request	O
.	B-api_mention
getParameter	I-api_mention
(	I-api_mention
)	I-api_mention
will	O
retrieve	O
a	O
value	O
that	O
the	O
client	O
has	O
submitted	O
.	O
You	O
will	O
get	O
the	O
value	O
on	O
the	O
server	O
side	O
.	O
-	O
getAttribute	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
request	O
.	B-api_mention
getAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
this	O
is	O
all	O
done	O
server	O
side	O
.	O
YOU	O
add	O
the	O
attribute	O
to	O
the	O
request	O
and	O
YOU	O
submit	O
the	O
request	O
to	O
another	O
resource	O
,	O
the	O
client	O
does	O
not	O
know	O
about	O
this	O
.	O
So	O
all	O
the	O
code	O
handling	O
this	O
would	O
typically	O
be	O
in	O
servlets	O
.	B-api_mention
getAttribute	I-api_mention
always	O
return	O
object	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
20358928	O
You	O
can	O
use	O
the	O
utility	O
method	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
and	O
feed	O
that	O
result	O
into	O
a	O
new	O
ArrayList	B-api_mention
.	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Other	O
options	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
Collection	I-api_mention
)	I-api_mention
constructor	O
.	O
#	O
li	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
method	O
.	O
#	O
li	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
method	O
.	O
#	O
li	O
Collections	B-api_mention
.	I-api_mention
singletonList	I-api_mention
method	O
.	O
Question	O
-	O
22718744	O
,	O
answer	O
-	O
22718904	O
This	O
has	O
been	O
specified	O
in	O
the	O
documentation	O
of	O
split	B-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
,	I-api_mention
limit	I-api_mention
)	I-api_mention
.	O
#	O
blockquote	O
In	O
StringLiteral	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
got	O
a	O
zero	O
-	O
width	O
match	O
at	O
the	O
beginning	O
so	O
the	O
leading	O
empty	O
substring	O
is	O
not	O
included	O
in	O
the	O
resulting	O
array	O
.	O
However	O
in	O
your	O
second	O
snippet	O
when	O
you	O
split	O
on	O
StringLiteral	B-api_mention
you	O
got	O
a	O
positive	O
width	O
match	O
(	O
1	O
in	O
this	O
case	O
)	O
,	O
so	O
the	O
empty	O
leading	O
substring	O
is	O
included	O
as	O
expected	O
.	O
(	O
Removed	O
irrelevant	O
source	O
code	O
)	O
Question	O
-	O
32475166	O
,	O
answer	O
-	O
32476850	O
When	O
you	O
think	O
about	O
the	O
type	O
of	O
the	O
operands	O
,	O
the	O
problem	O
becomes	O
more	O
apparent	O
:	O
this	O
.	O
method	O
!	O
=	O
null	O
?	O
this	O
.	O
method	O
:	O
this	O
.	O
constructor	O
has	O
as	O
type	O
the	O
most	O
specialized	O
common	O
type	O
of	O
both	O
the	O
operands	O
,	O
i	O
.	O
e	O
.	O
the	O
most	O
specialized	O
type	O
common	O
to	O
both	O
this	O
.	O
method	O
and	O
this	O
.	O
constructor	O
.	O
In	O
Java	O
7	O
this	O
is	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Member	O
,	O
however	O
the	O
Java	O
8	O
class	O
library	O
introduces	O
a	O
new	O
type	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Executable	O
which	O
is	O
more	O
specialized	O
than	O
the	O
generic	O
Member	O
.	O
Hence	O
with	O
a	O
Java	O
8	O
class	O
library	O
the	O
result	O
type	O
of	O
the	O
ternary	O
expression	O
is	O
Executable	O
rather	O
than	O
Member	O
.	O
Some	O
(	O
pre	O
-	O
release	O
)	O
versions	O
of	O
the	O
Java	O
8	O
compiler	O
seem	O
to	O
have	O
produced	O
an	O
explicit	O
reference	O
to	O
Executable	O
inside	O
generated	O
code	O
when	O
compiling	O
the	O
ternary	O
operator	O
.	O
This	O
would	O
trigger	O
a	O
class	O
load	O
,	O
and	O
thus	O
in	O
turn	O
a	O
ClassNotFoundException	O
at	O
runtime	O
when	O
running	O
with	O
a	O
class	O
library	O
<	O
JDK	O
8	O
,	O
because	O
Executable	O
only	O
exists	O
for	O
JDK	O
≥	O
8	O
.	O
As	O
noted	O
by	O
Tagir	O
Valeev	O
in	O
this	O
answer	O
,	O
this	O
is	O
actually	O
a	O
bug	O
in	O
pre	O
-	O
release	O
versions	O
of	O
JDK	O
8	O
and	O
has	O
since	O
been	O
fixed	O
,	O
so	O
both	O
the	O
if	O
-	O
else	O
workaround	O
and	O
the	O
explanatory	O
comment	O
are	O
now	O
obsolete	O
.	O
Additional	O
note	O
:	O
One	O
might	O
come	O
to	O
the	O
conclusion	O
that	O
this	O
compiler	O
bug	O
was	O
present	O
before	O
Java	O
8	O
.	O
However	O
,	O
the	O
byte	O
code	O
generated	O
for	O
the	O
ternary	O
by	O
OpenJDK	O
7	O
is	O
the	O
same	O
as	O
the	O
byte	O
code	O
generated	O
by	O
OpenJDK	O
8	O
.	O
In	O
fact	O
,	O
the	O
type	O
of	O
the	O
expression	O
goes	O
completely	O
unmentioned	O
at	O
runtime	O
,	O
the	O
code	O
is	O
really	O
only	O
test	O
,	O
branch	O
,	O
load	O
,	O
return	O
without	O
any	O
additional	O
checks	O
going	O
on	O
.	O
So	O
rest	O
assured	O
that	O
this	O
is	O
not	O
a	O
problem	O
(	O
anymore	O
)	O
and	O
indeed	O
seems	O
to	O
have	O
been	O
a	O
temporary	O
problem	O
during	O
development	O
of	O
Java	O
8	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276498	O
Assuming	O
all	O
the	O
streams	O
get	O
created	O
okay	O
,	O
yes	O
,	O
just	O
closing	O
bw	O
is	O
fine	O
with	O
those	O
stream	O
implementations	O
;	O
but	O
that	O
'	O
s	O
a	O
big	O
assumption	O
.	O
I	O
'	O
d	O
use	O
try	O
-	O
with	O
-	O
resources	O
(	O
tutorial	O
)	O
so	O
that	O
any	O
issues	O
constructing	O
the	O
subsequent	O
streams	O
that	O
throw	O
exceptions	O
don	O
'	O
t	O
leave	O
the	O
previous	O
streams	O
hanging	O
,	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
rely	O
on	O
the	O
stream	O
implementation	O
having	O
the	O
call	O
to	O
close	O
the	O
underlying	O
stream	O
:	O
#	O
pre	O
Note	O
you	O
no	O
longer	O
call	O
close	O
at	O
all	O
.	O
Important	O
note	O
:	O
To	O
have	O
try	O
-	O
with	O
-	O
resources	O
close	O
them	O
,	O
you	O
must	O
assign	O
the	O
streams	O
to	O
variables	O
as	O
you	O
open	O
them	O
,	O
you	O
cannot	O
use	O
nesting	O
.	O
If	O
you	O
use	O
nesting	O
,	O
an	O
exception	O
during	O
construction	O
of	O
one	O
of	O
the	O
later	O
streams	O
(	O
say	O
,	O
GZIPOutputStream	O
)	O
will	O
leave	O
any	O
stream	O
constructed	O
by	O
the	O
nested	O
calls	O
inside	O
it	O
open	O
.	O
From	O
JLS	O
§	O
14	O
.	O
20	O
.	O
3	O
:	O
#	O
blockquote	O
Note	O
the	O
word	O
"	O
variables	O
"	O
(	O
my	O
emphasis	O
)	O
.	O
E	O
.	O
g	O
.	O
,	O
don	O
'	O
t	O
do	O
this	O
:	O
#	O
pre	O
.	O
.	O
.	O
because	O
an	O
exception	O
from	O
the	O
GZIPOutputStream	O
(	O
OutputStream	O
)	O
constructor	O
(	O
which	O
says	O
it	O
may	O
throw	O
IOException	O
,	O
and	O
writes	O
a	O
header	O
to	O
the	O
underlying	O
stream	O
)	O
would	O
leave	O
the	O
FileOutputStream	B-api_mention
open	O
.	O
Since	O
some	O
resources	O
have	O
constructors	O
that	O
may	O
throw	O
and	O
others	O
don	O
'	O
t	O
,	O
it	O
'	O
s	O
a	O
good	O
habit	O
to	O
just	O
list	O
them	O
separately	O
.	O
We	O
can	O
double	O
-	O
check	O
our	O
interpretation	O
of	O
that	O
JLS	O
section	O
with	O
this	O
program	O
:	O
#	O
pre	O
.	O
.	O
.	O
which	O
has	O
the	O
output	O
:	O
#	O
pre	O
Note	O
that	O
there	O
are	O
no	O
calls	O
to	O
close	O
there	O
.	O
If	O
we	O
fix	O
main	O
:	O
#	O
pre	O
then	O
we	O
get	O
the	O
appropriate	O
close	O
calls	O
:	O
#	O
pre	O
(	O
Yes	O
,	O
two	O
calls	O
to	O
InnerMost	O
#	O
close	O
is	O
correct	O
;	O
one	O
is	O
from	O
Middle	O
,	O
the	O
other	O
from	O
try	O
-	O
with	O
-	O
resources	O
.	O
)	O
Question	O
-	O
5031614	O
There	O
have	O
been	O
some	O
discussions	O
here	O
about	O
JPA	O
entities	O
and	O
which	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
implementation	O
should	O
be	O
used	O
for	O
JPA	O
entity	O
classes	O
.	O
Most	O
(	O
if	O
not	O
all	O
)	O
of	O
them	O
depend	O
on	O
Hibernate	O
,	O
but	O
I	O
'	O
d	O
like	O
to	O
discuss	O
them	O
JPA	O
-	O
implementation	O
-	O
neutrally	O
(	O
I	O
am	O
using	O
EclipseLink	O
,	O
by	O
the	O
way	O
)	O
.	O
All	O
possible	O
implementations	O
are	O
having	O
their	O
own	O
advantages	O
and	O
disadvantages	O
regarding	O
:	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
contract	O
conformity	O
(	O
immutability	O
)	O
for	O
List	O
/	O
Set	O
operations	O
#	O
li	O
Whether	O
identical	O
objects	O
(	O
e	O
.	O
g	O
.	O
from	O
different	O
sessions	O
,	O
dynamic	O
proxies	O
from	O
lazily	O
-	O
loaded	O
data	O
structures	O
)	O
can	O
be	O
detected	O
#	O
li	O
Whether	O
entities	O
behave	O
correctly	O
in	O
detached	O
(	O
or	O
non	O
-	O
persisted	O
)	O
state	O
As	O
far	O
I	O
can	O
see	O
,	O
there	O
are	O
three	O
options	O
:	O
#	O
li	O
Do	O
not	O
override	O
them	O
;	O
rely	O
on	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Object	B-api_mention
.	I-api_mention
hashCode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
work	O
#	O
li	O
cannot	O
identify	O
identical	O
objects	O
,	O
problems	O
with	O
dynamic	O
proxies	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
primary	O
key	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
Business	O
-	O
Id	O
(	O
non	O
-	O
primary	O
key	O
fields	O
;	O
what	O
about	O
foreign	O
keys	O
?	O
)	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
My	O
questions	O
are	O
:	O
#	O
li	O
Did	O
I	O
miss	O
an	O
option	O
and	O
/	O
or	O
pro	O
/	O
con	O
point	O
?	O
#	O
li	O
What	O
option	O
did	O
you	O
choose	O
and	O
why	O
?	O
UPDATE	O
1	O
:	O
By	O
"	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
"	O
,	O
I	O
mean	O
that	O
successive	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invocations	O
may	O
return	O
differing	O
values	O
,	O
which	O
is	O
(	O
when	O
correctly	O
implemented	O
)	O
not	O
broken	O
in	O
the	O
sense	O
of	O
the	O
Object	O
API	O
documentation	O
,	O
but	O
which	O
causes	O
problems	O
when	O
trying	O
to	O
retrieve	O
a	O
changed	O
entity	O
from	O
a	O
Map	O
,	O
Set	O
or	O
other	O
hash	O
-	O
based	O
Collection	O
.	O
Consequently	O
,	O
JPA	O
implementations	O
(	O
at	O
least	O
EclipseLink	O
)	O
will	O
not	O
work	O
correctly	O
in	O
some	O
cases	O
.	O
UPDATE	O
2	O
:	O
Thank	O
you	O
for	O
your	O
answers	O
-	O
-	O
most	O
of	O
them	O
have	O
remarkable	O
quality	O
.	O
Unfortunately	O
,	O
I	O
am	O
still	O
unsure	O
which	O
approach	O
will	O
be	O
the	O
best	O
for	O
a	O
real	O
-	O
life	O
application	O
,	O
or	O
how	O
to	O
determine	O
the	O
best	O
approach	O
for	O
my	O
application	O
.	O
So	O
,	O
I	O
'	O
ll	O
keep	O
the	O
question	O
open	O
and	O
hope	O
for	O
some	O
more	O
discussions	O
and	O
/	O
or	O
opinions	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29500496	O
First	O
of	O
all	O
,	O
the	O
cast	O
in	O
that	O
line	O
(	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
are	O
absobuletly	O
needed	O
.	O
Removing	O
them	O
will	O
result	O
in	O
a	O
compilation	O
error	O
:	O
#	O
pre	O
Now	O
to	O
answer	O
your	O
question	O
What	O
is	O
this	O
line	O
checking	O
?	O
It	O
simply	O
verify	O
if	O
the	O
given	O
array	O
is	O
of	O
object	O
type	O
,	O
which	O
is	O
part	O
of	O
the	O
answer	O
for	O
your	O
other	O
question	O
Why	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
not	O
good	O
enough	O
for	O
both	O
cases	O
?	O
In	O
the	O
first	O
case	O
,	O
we	O
already	O
know	O
that	O
the	O
array	O
is	O
of	O
Object	B-api_mention
type	O
so	O
there	O
is	O
no	O
point	O
in	O
calling	O
the	O
newInstance	O
method	O
to	O
retrieve	O
the	O
correct	O
type	O
,	O
this	O
would	O
only	O
result	O
in	O
performance	O
loss	O
.	O
As	O
for	O
your	O
final	O
example	O
,	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
That	O
it	O
does	O
compile	O
,	O
it	O
is	O
true	O
.	O
Because	O
the	O
given	O
arguments	O
to	O
the	O
method	O
are	O
all	O
valids	O
.	O
It	O
will	O
certainly	O
fail	O
at	O
runtime	O
;	O
what	O
would	O
be	O
the	O
expected	O
output	O
of	O
converting	O
"	O
a	O
"	O
to	O
Integer	B-api_mention
type	O
?	O
Now	O
,	O
when	O
to	O
use	O
copyOf	B-api_mention
?	O
When	O
you	O
already	O
know	O
the	O
both	O
types	O
,	O
and	O
already	O
know	O
that	O
they	O
are	O
valid	O
together	O
.	O
It	O
main	O
usage	O
is	O
to	O
return	O
a	O
copy	O
but	O
truncated	O
or	O
padded	O
with	O
[	O
null	O
/	O
default	O
values	O
]	O
to	O
the	O
original	O
array	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
34405789	O
Set	B-api_mention
and	O
Map	B-api_mention
are	O
non	O
-	O
linear	O
data	O
structure	O
.	O
List	B-api_mention
is	O
linear	O
data	O
structure	O
.	O
The	O
tree	O
data	O
structure	O
SortedSet	B-api_mention
and	O
SortedMap	B-api_mention
interfaces	O
implements	O
TreeSet	B-api_mention
and	O
TreeMap	B-api_mention
respectively	O
using	O
used	O
Red	O
-	O
Black	O
tree	O
implementation	O
algorithm	O
.	O
So	O
it	O
ensure	O
that	O
there	O
are	O
no	O
duplicated	O
items	O
(	O
or	O
keys	O
in	O
case	O
of	O
Map	O
)	O
.	O
#	O
li	O
Tree	O
by	O
definition	O
cannot	O
contain	O
duplicates	O
.	O
#	O
li	O
In	O
List	B-api_mention
we	O
can	O
have	O
duplicates	O
,	O
so	O
there	O
is	O
no	O
TreeList	B-api_mention
.	O
So	O
if	O
we	O
want	O
to	O
sort	O
the	O
list	O
we	O
have	O
to	O
use	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
22740464	O
,	O
answer	O
-	O
37436520	O
Just	O
do	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
where	O
identity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
static	O
import	O
of	O
Function	B-api_mention
.	I-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Concatenating	O
multiple	O
streams	O
into	O
one	O
stream	O
is	O
the	O
same	O
as	O
flattening	O
a	O
stream	O
.	O
However	O
,	O
unfortunately	O
,	O
for	O
some	O
reason	O
there	O
is	O
no	O
flatten	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
Stream	B-api_mention
,	O
so	O
you	O
have	O
to	O
use	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
the	O
identity	O
function	O
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723704	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
.	O
You	O
can	O
also	O
call	O
methods	O
which	O
handle	O
a	O
null	O
as	O
an	O
argument	O
,	O
e	O
.	O
g	O
.	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
,	O
but	O
you	O
cannot	O
reference	O
a	O
null	O
value	O
and	O
call	O
a	O
method	O
on	O
it	O
.	O
BTW	O
There	O
is	O
a	O
tricky	O
situation	O
where	O
it	O
appears	O
you	O
can	O
call	O
static	O
methods	O
on	O
null	O
values	O
.	O
#	O
pre	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
29000802	O
There	O
is	O
a	O
third	O
option	O
-	O
using	O
stream	O
(	O
args	O
)	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
see	O
comments	O
under	O
why	O
didn	O
'	O
t	O
stream	O
have	O
a	O
toList	B-api_mention
method	O
.	O
It	O
turns	O
out	O
to	O
be	O
slower	O
than	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
or	O
collect	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
and	O
less	O
expressive	O
.	O
It	O
might	O
be	O
optimised	O
in	O
later	O
JDK	O
builds	O
,	O
so	O
adding	O
it	O
here	O
just	O
in	O
case	O
.	O
assuming	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myFinalList	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
with	O
a	O
micro	O
-	O
micro	O
benchmark	O
,	O
1M	O
entries	O
,	O
20	O
%	O
nulls	O
and	O
simple	O
transform	O
in	O
doSomething	O
(	O
)	O
#	O
pre	O
the	O
results	O
are	O
parallel	O
:	O
#	O
pre	O
sequential	O
:	O
#	O
pre	O
parallel	O
without	O
nulls	O
and	O
filter	O
(	O
so	O
the	O
stream	O
is	O
SIZED	O
)	O
:	O
toArrays	B-api_mention
has	O
the	O
best	O
performance	O
in	O
such	O
case	O
,	O
and	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
fails	O
with	O
"	O
indexOutOfBounds	O
"	O
on	O
the	O
recepient	O
ArrayList	B-api_mention
,	O
had	O
to	O
replace	O
with	O
.	B-api_mention
forEachOrdered	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
Question	O
-	O
14316487	O
,	O
answer	O
-	O
14316543	O
A	O
very	O
simple	O
implementation	O
with	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846960	O
From	O
Effective	O
Java	O
,	O
Item	O
#	O
43	O
-	O
StringLiteral	O
demonstrates	O
returning	O
an	O
empty	O
collection	O
and	O
perhaps	O
even	O
demonstrates	O
using	O
these	O
emptyList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
emptySet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
emptyMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
the	O
Collections	B-api_mention
class	O
to	O
get	O
an	O
empty	O
collection	O
that	O
also	O
has	O
the	O
additional	O
benefit	O
of	O
being	O
immutable	O
.	O
From	O
Item	O
#	O
15	O
StringLiteral	O
.	O
From	O
Collections	B-api_mention
-	O
emptySet	B-api_mention
-	O
Collections	B-api_mention
-	O
emptyList	B-api_mention
-	O
Collections	B-api_mention
#	O
blockquote	O
Note	O
:	O
Below	O
code	O
is	O
just	O
an	O
example	O
(	O
change	O
it	O
according	O
to	O
your	O
use	O
case	O
)	O
:	O
#	O
pre	O
These	O
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
:	O
#	O
li	O
They	O
'	O
re	O
more	O
concise	O
because	O
you	O
don	O
'	O
t	O
need	O
to	O
explicitly	O
type	O
out	O
the	O
generic	O
type	O
of	O
the	O
collection	O
-	O
it	O
'	O
s	O
generally	O
just	O
inferred	O
from	O
the	O
context	O
of	O
the	O
method	O
call	O
.	O
#	O
li	O
They	O
'	O
re	O
more	O
efficient	O
because	O
they	O
don	O
'	O
t	O
bother	O
creating	O
new	O
objects	O
;	O
they	O
just	O
re	O
-	O
use	O
an	O
existing	O
empty	O
and	O
immutable	O
object	O
.	O
This	O
effect	O
is	O
generally	O
very	O
minor	O
,	O
but	O
it	O
'	O
s	O
occasionally	O
(	O
well	O
,	O
rarely	O
)	O
important	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
31838310	O
The	O
main	O
purpose	O
of	O
marker	B-api_mention
interfaces	O
is	O
to	O
create	O
special	O
types	O
where	O
types	O
themselves	O
have	O
no	O
behavior	O
of	O
their	O
own	O
.	O
#	O
pre	O
Here	O
save	O
method	O
makes	O
sure	O
that	O
only	O
the	O
objects	O
of	O
classes	O
that	O
implement	O
the	O
MarkerEntity	B-api_mention
interface	O
are	O
saved	O
,	O
for	O
other	O
types	O
InvalidEntityFoundException	B-api_mention
is	O
thrown	O
.	O
So	O
here	O
MarkerEntity	B-api_mention
marker	O
interface	O
is	O
defining	O
a	O
type	O
that	O
adds	O
special	O
behavior	O
to	O
the	O
classes	O
implementing	O
it	O
.	O
Though	O
annotations	O
can	O
also	O
used	O
now	O
to	O
mark	O
classes	O
for	O
some	O
special	O
treatments	O
but	O
marker	O
annotations	O
are	O
replacement	O
for	O
naming	O
pattern	O
not	O
for	O
Marker	B-api_mention
interfaces	O
.	O
But	O
marker	O
annotations	O
can	O
'	O
t	O
fully	O
replace	O
the	O
marker	O
interfaces	O
because	O
;	O
marker	O
interfaces	O
are	O
used	O
to	O
define	O
type	O
(	O
as	O
already	O
explained	O
above	O
)	O
where	O
as	O
marker	B-api_mention
annotations	O
do	O
not	O
.	O
Source	O
for	O
marker	O
interface	O
comment	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262520	O
Basicly	O
,	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
an	O
executable	O
piece	O
of	O
code	O
that	O
actually	O
does	O
something	O
(	O
it	O
creates	O
a	O
new	O
String	B-api_mention
and	O
then	O
returns	O
it	O
)	O
.	O
The	O
returned	O
value	O
can	O
be	O
ignored	O
and	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
still	O
be	O
used	O
in	O
void	O
-	O
return	O
lambda	O
to	O
create	O
a	O
new	O
String	B-api_mention
.	O
However	O
,	O
StringLiteral	O
is	O
just	O
a	O
constant	O
that	O
doesn	O
'	O
t	O
do	O
anything	O
on	O
it	O
'	O
s	O
own	O
.	O
The	O
only	O
reasonable	O
thing	O
to	O
do	O
with	O
it	O
in	O
lambda	O
body	O
is	O
to	O
return	O
it	O
.	O
But	O
the	O
lambda	O
method	O
would	O
have	O
to	O
have	O
return	O
type	O
String	B-api_mention
or	O
Object	B-api_mention
,	O
but	O
it	O
returns	O
void	O
,	O
hence	O
the	O
String	B-api_mention
cannot	O
be	O
casted	O
to	O
void	O
error	O
.	O
Question	O
-	O
14809293	O
,	O
answer	O
-	O
14821488	O
The	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
has	O
already	O
been	O
mentioned	O
-	O
the	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
strangely	O
not	O
!	O
My	O
solution	O
would	O
also	O
be	O
to	O
use	O
the	O
list	O
from	O
the	O
outside	O
and	O
wrap	O
the	O
array	O
as	O
follows	O
:	O
#	O
pre	O
The	O
problem	O
with	O
copying	O
the	O
array	O
is	O
:	O
if	O
you	O
'	O
re	O
doing	O
it	O
every	O
time	O
you	O
access	O
the	O
code	O
and	O
the	O
array	O
is	O
big	O
,	O
you	O
'	O
ll	O
create	O
a	O
lot	O
of	O
work	O
for	O
the	O
garbage	O
collector	O
for	O
sure	O
.	O
So	O
the	O
copy	O
is	O
a	O
simple	O
but	O
really	O
bad	O
approach	O
-	O
I	O
'	O
d	O
say	O
"	O
cheap	O
"	O
,	O
but	O
memory	O
-	O
expensive	O
!	O
Especially	O
when	O
you	O
'	O
re	O
having	O
more	O
than	O
just	O
2	O
elements	O
.	O
If	O
you	O
look	O
at	O
the	O
source	O
code	O
of	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
and	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
there	O
is	O
actually	O
not	O
much	O
created	O
.	O
The	O
first	O
just	O
wraps	O
the	O
array	O
without	O
copying	O
it	O
,	O
the	O
second	O
just	O
wraps	O
the	O
list	O
,	O
making	O
changes	O
to	O
it	O
unavailable	O
.	O
Question	O
-	O
15430247	O
The	O
usual	O
constructor	O
of	O
ArrayList	B-api_mention
is	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
there	O
is	O
also	O
an	O
overloaded	O
constructor	O
with	O
a	O
parameter	O
for	O
its	O
initial	O
capacity	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Why	O
is	O
it	O
useful	O
to	O
create	O
an	O
ArrayList	B-api_mention
with	O
an	O
initial	O
capacity	O
when	O
we	O
can	O
append	O
to	O
it	O
as	O
we	O
please	O
?	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16149127	O
You	O
can	O
'	O
t	O
use	O
a	O
primitive	O
because	O
HashMap	B-api_mention
use	O
object	O
internally	O
for	O
the	O
key	O
.	O
So	O
you	O
can	O
only	O
use	O
an	O
object	O
that	O
inherits	O
from	O
Object	B-api_mention
(	O
that	O
is	O
any	O
object	O
)	O
.	O
That	O
is	O
the	O
function	O
put	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
HashMap	B-api_mention
and	O
as	O
you	O
can	O
see	O
it	O
uses	O
Object	B-api_mention
for	O
K	O
:	O
#	O
pre	O
The	O
expression	O
"	O
k	O
=	O
e	O
.	O
key	O
"	O
should	O
make	O
it	O
clear	O
.	O
I	O
suggest	O
to	O
use	O
a	O
wrapper	O
like	O
Integer	B-api_mention
and	O
autoboxing	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14847046	O
Most	O
of	O
the	O
time	O
we	O
use	O
a	O
constructor	O
to	O
create	O
a	O
new	O
empty	O
map	O
.	O
But	O
the	O
Collections	B-api_mention
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
to	O
create	O
an	O
empty	O
map	O
using	O
static	O
method	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
emptyMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
blockquote	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723666	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
without	O
getting	O
any	O
exception	O
.	O
println	B-api_mention
method	O
does	O
not	O
throw	O
null	O
pointer	O
because	O
it	O
first	O
checks	O
whether	O
the	O
object	O
is	O
null	O
or	O
not	O
.	O
If	O
null	O
then	O
it	O
simply	O
prints	O
the	O
string	O
StringLiteral	O
.	O
Otherwise	O
it	O
will	O
call	O
the	O
toString	B-api_mention
method	O
of	O
that	O
object	O
.	O
Adding	O
more	O
details	O
:	O
Internally	O
print	O
methods	O
call	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
the	O
input	O
object	O
.	O
And	O
in	O
valueOf	B-api_mention
method	O
,	O
this	O
check	O
helps	O
to	O
avoid	O
null	O
pointer	O
excpeiton	O
:	O
return	O
(	O
args	O
)	O
?	O
StringLiteral	O
:	O
obj	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
rest	O
of	O
your	O
confusion	O
,	O
calling	O
any	O
method	O
on	O
a	O
null	O
object	O
should	O
throw	O
a	O
null	O
pointer	O
exception	O
,	O
if	O
not	O
a	O
special	O
case	O
.	O
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056878	O
We	O
can	O
take	O
a	O
look	O
into	O
the	O
source	O
code	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
regex	I-api_mention
.	I-api_mention
Pattern	I-api_mention
which	O
is	O
behind	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
.	O
Way	O
down	O
the	O
rabbit	O
hole	O
the	O
method	O
public	O
String	B-api_mention
[	O
]	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
invoked	O
.	O
Input	O
StringLiteral	O
For	O
input	O
StringLiteral	O
this	O
method	O
is	O
called	O
as	O
String	B-api_mention
[	O
]	O
parts	O
=	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
intersting	O
part	O
of	O
this	O
method	O
is	O
:	O
#	O
pre	O
And	O
that	O
is	O
what	O
happens	O
:	O
new	O
String	B-api_mention
[	O
]	O
{	O
input	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
)	I-api_mention
}	O
is	O
returned	O
.	O
Input	O
StringLiteral	O
For	O
input	O
StringLiteral	O
the	O
intersting	O
part	O
is	O
#	O
pre	O
Here	O
resultSize	O
=	O
=	O
0	O
and	O
limit	O
=	O
=	O
0	O
so	O
new	O
String	B-api_mention
[	O
0	O
]	O
is	O
returned	O
.	O
Question	O
-	O
29328785	O
,	O
answer	O
-	O
29330741	O
It	O
'	O
s	O
not	O
so	O
hard	O
to	O
track	O
down	O
the	O
reason	O
for	O
the	O
odd	O
behavior	O
.	O
The	O
divide	O
call	O
goes	O
to	O
#	O
pre	O
This	O
,	O
internally	O
,	O
delegates	O
to	O
another	O
divide	O
method	O
,	O
based	O
on	O
the	O
rounding	O
mode	O
:	O
#	O
pre	O
In	O
this	O
case	O
,	O
the	O
last	O
call	O
applies	O
.	O
Note	O
that	O
the	O
intVal	O
(	O
which	O
is	O
a	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
)	O
is	O
passed	O
directly	O
to	O
this	O
method	O
as	O
the	O
first	O
argument	O
:	O
#	O
pre	O
Finally	O
,	O
the	O
path	O
to	O
the	O
second	O
divideAndRound	O
is	O
taken	O
here	O
,	O
again	O
passing	O
the	O
dividend	O
on	O
(	O
which	O
was	O
the	O
intVal	O
of	O
the	O
original	O
BigDecimal	B-api_mention
)	O
,	O
ending	O
up	O
with	O
this	O
code	O
:	O
#	O
pre	O
And	O
this	O
is	O
where	O
the	O
error	O
is	O
introduced	O
:	O
The	O
mdivididend	O
is	O
a	O
mutable	O
BigInteger	B-api_mention
,	O
that	O
was	O
created	O
as	O
a	O
mutable	O
view	O
on	O
the	O
mag	O
array	O
of	O
the	O
BigInteger	B-api_mention
that	O
is	O
stored	O
in	O
the	O
BigDecimal	B-api_mention
x	O
from	O
the	O
original	O
call	O
.	O
The	O
division	O
modifies	O
the	O
mag	O
field	O
,	O
and	O
thus	O
,	O
the	O
state	O
of	O
the	O
(	O
now	O
not	O
-	O
so	O
-	O
immutable	O
)	O
BigDecimal	B-api_mention
.	O
This	O
is	O
clearly	O
a	O
bug	O
in	O
the	O
implementation	O
of	O
one	O
of	O
the	O
divide	O
methods	O
.	O
I	O
already	O
started	O
tracking	O
the	O
change	O
sets	O
of	O
the	O
OpenJDK	O
,	O
but	O
have	O
not	O
yet	O
spotted	O
the	O
definite	O
culprit	O
.	O
(	O
Edit	O
:	O
See	O
updates	O
below	O
)	O
(	O
A	O
side	O
note	O
:	O
Calling	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
doing	O
the	O
division	O
does	O
not	O
really	O
avoid	O
,	O
but	O
only	O
hide	O
the	O
bug	O
:	O
It	O
causes	O
a	O
string	O
cache	O
of	O
the	O
correct	O
state	O
to	O
be	O
created	O
internally	O
.	O
The	O
right	O
value	O
is	O
printed	O
,	O
but	O
the	O
internal	O
state	O
is	O
still	O
wrong	O
-	O
which	O
is	O
concerning	O
,	O
to	O
say	O
the	O
least	O
.	O
.	O
.	O
)	O
#	O
blockquote	O
Question	O
-	O
34172978	O
#	O
pre	O
Counter	O
to	O
my	O
expectation	O
,	O
the	O
collect	O
call	O
never	O
returns	O
.	O
Setting	O
limit	O
before	O
filter	O
produces	O
the	O
expected	O
result	O
.	O
Why	O
?	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488683	O
You	O
can	O
first	O
split	O
them	O
using	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
convert	O
the	O
returned	O
String	B-api_mention
array	O
to	O
an	O
ArrayList	B-api_mention
using	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
29280857	O
,	O
answer	O
-	O
29382161	O
As	O
stated	O
previously	O
,	O
you	O
should	O
lock	O
on	O
both	O
accounts	O
,	O
always	O
in	O
the	O
same	O
order	O
.	O
The	O
key	O
part	O
,	O
however	O
,	O
is	O
ensuring	O
both	O
high	O
granularity	O
and	O
singularity	O
across	O
the	O
VM	O
instance	O
.	O
This	O
can	O
be	O
done	O
using	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
22694891	O
I	O
think	O
many	O
of	O
the	O
answers	O
here	O
may	O
be	O
missing	O
a	O
quality	O
method	O
included	O
in	O
StringBuilder	B-api_mention
:	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
know	O
this	O
is	O
a	O
late	O
reply	O
;	O
however	O
,	O
this	O
should	O
be	O
made	O
known	O
(	O
and	O
explained	O
a	O
bit	O
more	O
thoroughly	O
)	O
.	O
Let	O
'	O
s	O
say	O
you	O
have	O
a	O
StringBuilder	B-api_mention
table	O
-	O
which	O
you	O
wish	O
to	O
modify	O
,	O
dynamically	O
,	O
throughout	O
your	O
program	O
(	O
one	O
I	O
am	O
working	O
on	O
right	O
now	O
does	O
this	O
)	O
,	O
e	O
.	O
g	O
.	O
StringBuilder	B-api_mention
table	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
are	O
looping	O
through	O
the	O
method	O
and	O
alter	O
the	O
content	O
,	O
use	O
the	O
content	O
,	O
then	O
wish	O
to	O
discard	O
the	O
content	O
to	O
"	O
clean	O
up	O
"	O
the	O
StringBuilder	B-api_mention
for	O
the	O
next	O
iteration	O
,	O
you	O
can	O
delete	O
it	O
'	O
s	O
contents	O
,	O
e	O
.	O
g	O
.	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
start	O
and	O
end	O
being	O
the	O
indices	O
of	O
the	O
chars	O
you	O
wish	O
to	O
remove	O
.	O
Don	O
'	O
t	O
know	O
the	O
length	O
in	O
chars	O
and	O
want	O
to	O
delete	O
the	O
whole	O
thing	O
?	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
NOW	O
,	O
for	O
the	O
kicker	O
.	O
StringBuilders	O
,	O
as	O
mentioned	O
previously	O
,	O
take	O
a	O
lot	O
of	O
overhead	O
when	O
altered	O
frequently	O
(	O
and	O
can	O
cause	O
safety	O
issues	O
with	O
regard	O
to	O
threading	O
)	O
;	O
therefore	O
,	O
use	O
StringBuffer	B-api_mention
-	O
same	O
as	O
StringBuilder	B-api_mention
(	O
with	O
a	O
few	O
exceptions	O
)	O
-	O
if	O
your	O
StringBuilder	B-api_mention
is	O
used	O
for	O
the	O
purpose	O
of	O
interfacing	O
with	O
the	O
user	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16635489	O
The	O
advantage	O
comes	O
into	O
account	O
when	O
the	O
operations	O
can	O
be	O
executed	O
in	O
parallel	O
.	O
(	O
See	O
#	O
a	O
-	O
the	O
section	O
about	O
internal	O
and	O
external	O
iteration	O
)	O
#	O
li	O
The	O
main	O
advantage	O
from	O
my	O
point	O
of	O
view	O
is	O
that	O
the	O
implementation	O
of	O
what	O
is	O
to	O
be	O
done	O
within	O
the	O
loop	O
can	O
be	O
defined	O
without	O
having	O
to	O
decide	O
if	O
it	O
will	O
be	O
executed	O
in	O
parallel	O
or	O
sequential	O
#	O
li	O
If	O
you	O
want	O
your	O
loop	O
to	O
be	O
executed	O
in	O
parallel	O
you	O
could	O
simply	O
write	O
joins	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
will	O
have	O
to	O
write	O
some	O
extra	O
code	O
for	O
thread	O
handling	O
etc	O
.	O
Note	O
:	O
for	O
my	O
answer	O
I	O
assumed	O
joins	O
implementing	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
interface	O
.	O
If	O
joins	O
implements	O
only	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Iterable	I-api_mention
interface	O
this	O
is	O
no	O
longer	O
true	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16149160	O
HashMap	B-api_mention
does	O
not	O
allow	O
primitive	O
data	O
types	O
as	O
arguments	O
.	O
It	O
can	O
only	O
accept	O
objects	O
so	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
not	O
work	O
.	O
You	O
have	O
to	O
change	O
the	O
declaration	O
to	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
so	O
even	O
when	O
you	O
do	O
the	O
following	O
myMap	O
.	O
put	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
primitive	O
data	O
type	O
is	O
autoboxed	O
to	O
an	O
Integer	O
object	O
.	O
8	O
(	O
args	O
)	O
=	O
=	O
=	O
boxing	O
=	O
=	O
=	O
>	O
8	O
(	O
args	O
)	O
You	O
can	O
read	O
more	O
on	O
autoboxing	O
here	O
#	O
a	O
Question	O
-	O
10786042	O
Say	O
I	O
have	O
a	O
URL	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
query	O
?	O
q	O
=	O
and	O
I	O
have	O
a	O
query	O
entered	O
by	O
the	O
user	O
such	O
as	O
:	O
#	O
blockquote	O
I	O
want	O
the	O
result	O
to	O
be	O
a	O
properly	O
encoded	O
URL	O
:	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
query	O
?	O
q	O
=	O
random	O
%	O
20word	O
%	O
20	O
%	O
A3500	O
%	O
20bank	O
%	O
20	O
%	O
24	O
What	O
'	O
s	O
the	O
best	O
way	O
to	O
achieve	O
this	O
?	O
I	O
tried	O
URLEncoder	B-api_mention
and	O
creating	O
URI	O
/	O
URL	O
objects	O
but	O
none	O
of	O
them	O
come	O
out	O
quite	O
right	O
.	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
15357940	O
Or	O
simply	O
mystring	O
.	B-api_mention
matches	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
it	O
would	O
return	O
true	O
for	O
numbers	O
larger	O
than	O
an	O
int	O
Question	O
-	O
31370403	O
,	O
answer	O
-	O
31466466	O
Idea	O
#	O
1	O
,	O
storing	O
the	O
Graphics	B-api_mention
objects	O
simply	O
wouldn	O
'	O
t	O
work	O
.	O
The	O
Graphics	B-api_mention
should	O
not	O
be	O
considered	O
as	O
"	O
holding	O
"	O
some	O
display	O
memory	O
,	O
but	O
rather	O
as	O
a	O
handle	O
to	O
access	O
an	O
area	O
of	O
display	O
memory	O
.	O
In	O
the	O
case	O
of	O
BufferedImage	O
,	O
each	O
Graphics	B-api_mention
object	O
will	O
be	O
always	O
the	O
handle	O
to	O
the	O
same	O
given	O
image	O
memory	O
buffer	O
,	O
so	O
they	O
all	O
will	O
represent	O
the	O
same	O
image	O
.	O
Even	O
more	O
importantly	O
,	O
you	O
can	O
'	O
t	O
actually	O
do	O
anything	O
with	O
the	O
stored	O
Graphics	B-api_mention
:	O
As	O
they	O
do	O
not	O
store	O
anything	O
,	O
there	O
is	O
no	O
way	O
whatsoever	O
they	O
could	O
"	O
re	O
-	O
store	O
"	O
anything	O
.	O
Idea	O
#	O
2	O
,	O
cloning	O
the	O
BufferedImage	O
s	O
is	O
a	O
much	O
better	O
idea	O
,	O
but	O
you	O
'	O
ll	O
indeed	O
be	O
wasting	O
memory	O
,	O
and	O
quickly	O
run	O
out	O
of	O
it	O
.	O
It	O
helps	O
only	O
to	O
store	O
those	O
parts	O
of	O
the	O
image	O
affected	O
by	O
the	O
draw	O
,	O
for	O
example	O
using	O
rectangular	O
areas	O
,	O
but	O
it	O
still	O
costs	O
a	O
lot	O
of	O
memory	O
.	O
Buffering	O
those	O
undo	O
images	O
to	O
disk	O
could	O
help	O
,	O
but	O
it	O
will	O
make	O
your	O
UI	O
slow	O
and	O
unresponsive	O
,	O
and	O
that	O
'	O
s	O
bad	O
;	O
furthermore	O
,	O
it	O
makes	O
you	O
application	O
more	O
complex	O
and	O
error	O
-	O
prone	O
.	O
My	O
alternative	O
would	O
be	O
to	O
store	O
store	O
the	O
image	O
modifications	O
in	O
a	O
list	O
,	O
rendered	O
from	O
first	O
to	O
last	O
on	O
top	O
of	O
the	O
image	O
.	O
An	O
undo	O
operation	O
then	O
simply	O
consists	O
of	O
removing	O
the	O
modification	O
from	O
the	O
list	O
.	O
This	O
requires	O
you	O
to	O
"	O
reify	O
"	O
the	O
image	O
modifications	O
,	O
i	O
.	O
e	O
.	O
create	O
a	O
class	O
that	O
implements	O
a	O
single	O
modification	O
,	O
by	O
providing	O
a	O
void	O
draw	O
(	O
args	O
)	O
method	O
which	O
performs	O
the	O
actual	O
drawing	O
.	O
As	O
you	O
said	O
,	O
random	O
modifications	O
pose	O
an	O
additional	O
problem	O
.	O
However	O
,	O
the	O
key	O
problem	O
is	O
your	O
use	O
of	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
create	O
random	O
numbers	O
.	O
Instead	O
,	O
perform	O
each	O
random	O
modification	O
with	O
a	O
Random	B-api_mention
created	O
from	O
a	O
fixed	O
seed	O
value	O
,	O
so	O
that	O
the	O
(	O
pseudo	O
-	O
)	O
random	O
number	O
sequences	O
are	O
the	O
same	O
on	O
each	O
invocation	O
of	O
draw	O
(	O
args	O
)	O
,	O
i	O
.	O
e	O
.	O
,	O
each	O
draw	O
has	O
exactly	O
the	O
same	O
effects	O
.	O
(	O
That	O
'	O
s	O
why	O
they	O
are	O
called	O
"	O
pseudo	O
-	O
random	O
"	O
-	O
-	O
the	O
generated	O
numbers	O
look	O
random	O
,	O
but	O
they	O
are	O
just	O
as	O
deterministic	O
as	O
any	O
other	O
function	O
.	O
)	O
In	O
contrast	O
to	O
the	O
image	O
storing	O
technique	O
,	O
which	O
has	O
memory	O
problems	O
,	O
the	O
problem	O
with	O
this	O
technique	O
is	O
that	O
many	O
modifications	O
may	O
make	O
the	O
GUI	O
slow	O
,	O
especially	O
if	O
the	O
modifications	O
are	O
computationally	O
intensive	O
.	O
To	O
prevent	O
this	O
,	O
the	O
simplest	O
way	O
would	O
be	O
to	O
fix	O
an	O
appropriate	O
maximum	O
size	O
of	O
the	O
list	O
of	O
undoable	O
modifications	O
.	O
If	O
this	O
limit	O
would	O
be	O
exceeded	O
by	O
adding	O
a	O
new	O
modification	O
,	O
remove	O
the	O
oldest	O
modification	O
the	O
list	O
and	O
apply	O
it	O
to	O
the	O
backing	O
BufferedImage	O
itself	O
.	O
The	O
following	O
simple	O
demo	O
application	O
shows	O
that	O
(	O
and	O
how	O
)	O
this	O
all	O
works	O
together	O
.	O
It	O
also	O
includes	O
a	O
nice	O
"	O
redo	O
"	O
feature	O
for	O
redoing	O
undone	O
actions	O
.	O
#	O
pre	O
Question	O
-	O
13195797	O
,	O
answer	O
-	O
20043507	O
Peter	O
Lawrey	O
'	O
s	O
answer	O
is	O
great	O
because	O
it	O
is	O
simple	O
and	O
not	O
depending	O
on	O
anything	O
special	O
,	O
and	O
it	O
'	O
s	O
the	O
way	O
you	O
should	O
do	O
it	O
.	O
If	O
you	O
need	O
something	O
that	O
removes	O
subdirectories	O
and	O
their	O
contents	O
as	O
well	O
,	O
use	O
recursion	O
:	O
#	O
pre	O
To	O
spare	O
subdirectories	O
and	O
their	O
contents	O
(	O
part	O
of	O
your	O
question	O
)	O
,	O
modify	O
as	O
follows	O
:	O
#	O
pre	O
Or	O
,	O
since	O
you	O
wanted	O
a	O
one	O
-	O
line	O
solution	O
:	O
for	O
(	O
args	O
)	O
if	O
(	O
args	O
)	O
file	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Using	O
an	O
external	O
library	O
for	O
such	O
a	O
trivial	O
task	O
is	O
not	O
a	O
good	O
idea	O
unless	O
you	O
need	O
this	O
library	O
for	O
something	O
else	O
anyway	O
,	O
in	O
which	O
case	O
it	O
is	O
preferrable	O
to	O
use	O
existing	O
code	O
.	O
You	O
appear	O
to	O
be	O
using	O
the	O
Apache	O
library	O
anyway	O
so	O
use	O
its	O
FileUtils	B-api_mention
.	I-api_mention
cleanDirectory	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28821352	O
It	O
'	O
s	O
not	O
pretty	O
,	O
but	O
this	O
will	O
work	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
;	O
.	O
map	O
(	O
args	O
)	O
.	O
orElseGet	O
(	O
args	O
)	O
is	O
a	O
fairly	O
handy	O
pattern	O
for	O
use	O
with	O
Optional	B-api_mention
.	O
It	O
means	O
"	O
If	O
this	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
give	O
me	O
func	O
(	O
args	O
)	O
,	O
otherwise	O
give	O
me	O
sup	O
.	O
get	O
(	O
args	O
)	O
"	O
.	O
In	O
this	O
case	O
,	O
we	O
call	O
serviceA	O
(	O
args	O
)	O
and	O
get	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
If	O
that	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
we	O
want	O
to	O
get	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
if	O
it	O
is	O
empty	O
,	O
we	O
want	O
to	O
get	O
serviceB	O
(	O
args	O
)	O
.	O
Rinse	O
-	O
repeat	O
with	O
more	O
alternatives	O
.	O
Other	O
uses	O
of	O
this	O
pattern	O
are	O
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781376	O
Like	O
the	O
others	O
have	O
mentioned	O
,	O
this	O
is	O
only	O
fulfilled	O
by	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
As	O
for	O
proof	O
,	O
let	O
me	O
offer	O
an	O
easier	O
to	O
understand	O
explanation	O
other	O
than	O
in	O
binary	O
(	O
although	O
it	O
is	O
still	O
rooted	O
in	O
that	O
)	O
.	O
Note	O
that	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
equal	O
to	O
-	O
2	O
^	O
31	O
or	O
-	O
2147483648	O
and	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
equal	O
to	O
2	O
^	O
31	O
-	O
1	O
or	O
2147483647	O
.	O
-	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
2	O
^	O
31	O
,	O
which	O
is	O
now	O
too	O
large	O
for	O
an	O
Integer	B-api_mention
(	O
since	O
it	O
is	O
past	O
MAX	B-api_mention
_	I-api_mention
VALUE	I-api_mention
)	O
thus	O
causing	O
an	O
Integer	B-api_mention
overflow	O
,	O
making	O
it	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
again	O
.	O
It	O
'	O
s	O
the	O
only	O
Integer	O
that	O
does	O
this	O
since	O
MIN	B-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
the	O
only	O
number	O
with	O
no	O
negative	O
equivalent	O
aside	O
from	O
0	O
.	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888452	O
Alternative	O
to	O
@	O
sol4me	O
'	O
s	O
solution	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Of	O
the	O
difference	O
between	O
this	O
and	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
it	O
does	O
make	O
a	O
difference	O
if	O
your	O
array	O
is	O
of	O
a	O
primitive	O
type	O
.	O
For	O
instance	O
,	O
if	O
you	O
do	O
:	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
where	O
someArray	O
is	O
a	O
long	O
[	O
]	O
,	O
it	O
will	O
return	O
a	O
LongStream	B-api_mention
.	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
on	O
the	O
other	O
hand	O
,	O
will	O
return	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
with	O
a	O
single	O
element	O
.	O
Question	O
-	O
10977992	O
,	O
answer	O
-	O
17939167	O
There	O
are	O
two	O
differences	O
:	O
#	O
li	O
We	O
can	O
use	O
Iterator	O
to	O
traverse	O
Set	B-api_mention
and	O
List	B-api_mention
and	O
also	O
Map	B-api_mention
type	O
of	O
Objects	O
.	O
While	O
a	O
ListIterator	B-api_mention
can	O
be	O
used	O
to	O
traverse	O
for	O
List	O
-	O
type	O
Objects	O
,	O
but	O
not	O
for	O
Set	O
-	O
type	O
of	O
Objects	O
.	O
That	O
is	O
,	O
we	O
can	O
get	O
a	O
Iterator	O
object	O
by	O
using	O
Set	B-api_mention
and	O
List	B-api_mention
,	O
see	O
here	O
:	O
By	O
using	O
Iterator	O
we	O
can	O
retrieve	O
the	O
elements	O
from	O
Collection	B-api_mention
Object	O
in	O
forward	O
direction	O
only	O
.	O
Methods	O
in	O
Iterator	O
:	O
#	O
li	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
remove	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
#	O
li	O
But	O
we	O
get	O
ListIterator	B-api_mention
object	O
only	O
from	O
the	O
List	B-api_mention
interface	O
,	O
see	O
here	O
:	O
where	O
as	O
a	O
ListIterator	B-api_mention
allows	O
you	O
to	O
traverse	O
in	O
either	O
directions	O
(	O
Both	O
forward	O
and	O
backward	O
)	O
.	O
So	O
it	O
has	O
two	O
more	O
methods	O
like	O
hasPrevious	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
previous	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
other	O
than	O
those	O
of	O
Iterator	B-api_mention
.	O
Also	O
,	O
we	O
can	O
get	O
indexes	O
of	O
the	O
next	O
or	O
previous	O
elements	O
(	O
using	O
nextIndex	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
previousIndex	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
respectively	O
)	O
Methods	O
in	O
ListIterator	B-api_mention
:	O
#	O
li	O
hasNext	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
next	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
previous	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
hasPrevious	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
remove	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
nextIndex	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
previousIndex	B-api_mention
(	I-api_mention
)	I-api_mention
ListIterator	I-api_mention
listiterator	O
=	O
List	B-api_mention
.	I-api_mention
listIterator	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
i	O
.	O
e	O
.	O
,	O
we	O
can	O
'	O
t	O
get	O
ListIterator	B-api_mention
object	O
from	O
Set	B-api_mention
interface	O
.	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173110	O
Flipping	O
the	O
limit	O
and	O
the	O
filter	O
clauses	O
has	O
different	O
behaviors	O
.	O
If	O
you	O
put	O
the	O
limit	O
first	O
,	O
the	O
stream	O
will	O
first	O
generate	O
10	O
integers	O
[	O
1	O
.	O
.	O
10	O
]	O
,	O
and	O
then	O
filter	O
them	O
leaving	O
only	O
those	O
smaller	O
than	O
5	O
.	O
In	O
the	O
original	O
ordering	O
,	O
with	O
the	O
filter	O
applied	O
first	O
,	O
integers	O
are	O
generated	O
and	O
filtered	O
until	O
you	O
reach	O
10	O
elements	O
.	O
This	O
isn	O
'	O
t	O
an	O
infinite	O
operator	O
,	O
as	O
i	O
in	O
the	O
supplier	O
will	O
eventually	O
overflow	O
,	O
but	O
it	O
will	O
take	O
a	O
while	O
,	O
especially	O
on	O
a	O
slow	O
computer	O
,	O
to	O
reach	O
MAX	O
_	O
INT	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
33233407	O
We	O
can	O
use	O
the	O
parseInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
Integer	B-api_mention
wrapper	O
class	O
for	O
converting	O
a	O
String	B-api_mention
value	O
to	O
an	O
integer	O
value	O
.	O
For	O
example	O
:	O
#	O
pre	O
The	O
Integer	B-api_mention
class	O
also	O
provides	O
the	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
We	O
can	O
also	O
use	O
toInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
of	O
NumberUtils	B-api_mention
Utility	O
Class	O
for	O
the	O
conversion	O
:	O
#	O
pre	O
Question	O
-	O
14491966	O
I	O
made	O
a	O
class	O
called	O
QuickRandom	B-api_mention
,	O
and	O
its	O
job	O
is	O
to	O
produce	O
random	O
numbers	O
quickly	O
.	O
It	O
'	O
s	O
really	O
simple	O
:	O
just	O
take	O
the	O
old	O
value	O
,	O
multiply	O
by	O
a	O
double	O
,	O
and	O
take	O
the	O
decimal	O
part	O
.	O
Here	O
is	O
my	O
QuickRandom	B-api_mention
class	O
in	O
its	O
entirety	O
:	O
#	O
pre	O
And	O
here	O
is	O
the	O
code	O
I	O
wrote	O
to	O
test	O
it	O
:	O
#	O
pre	O
It	O
is	O
a	O
very	O
simple	O
algorithm	O
that	O
simply	O
multiplies	O
the	O
previous	O
double	O
by	O
a	O
"	O
magic	O
number	O
"	O
double	O
.	O
I	O
threw	O
it	O
together	O
pretty	O
quickly	O
,	O
so	O
I	O
could	O
probably	O
make	O
it	O
better	O
,	O
but	O
strangely	O
,	O
it	O
seems	O
to	O
be	O
working	O
fine	O
.	O
This	O
is	O
sample	O
output	O
of	O
the	O
commented	O
-	O
out	O
lines	O
in	O
the	O
main	O
method	O
:	O
#	O
pre	O
Hm	O
.	O
Pretty	O
random	O
.	O
In	O
fact	O
,	O
that	O
would	O
work	O
for	O
a	O
random	O
number	O
generator	O
in	O
a	O
game	O
.	O
Here	O
is	O
sample	O
output	O
of	O
the	O
non	O
-	O
commented	O
out	O
part	O
:	O
#	O
pre	O
Wow	O
!	O
It	O
performs	O
almost	O
4	O
times	O
faster	O
than	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
.	O
I	O
remember	O
reading	O
somewhere	O
that	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
tons	O
of	O
crazy	O
modulus	O
and	O
division	O
stuff	O
.	O
Is	O
that	O
really	O
necessary	O
?	O
My	O
algorithm	O
performs	O
a	O
lot	O
faster	O
and	O
it	O
seems	O
pretty	O
random	O
.	O
I	O
have	O
two	O
questions	O
:	O
#	O
li	O
Is	O
my	O
algorithm	O
"	O
good	O
enough	O
"	O
(	O
for	O
,	O
say	O
,	O
a	O
game	O
,	O
where	O
really	O
random	O
numbers	O
aren	O
'	O
t	O
too	O
important	O
)	O
?	O
#	O
li	O
Why	O
does	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
do	O
so	O
much	O
when	O
it	O
seems	O
just	O
simple	O
multiplication	O
and	O
cutting	O
out	O
the	O
decimal	O
will	O
suffice	O
?	O
Question	O
-	O
16098046	O
,	O
answer	O
-	O
25307973	O
In	O
short	O
:	O
If	O
you	O
want	O
to	O
get	O
rid	O
of	O
trailing	O
zeros	O
and	O
Locale	O
problems	O
,	O
then	O
you	O
should	O
use	O
:	O
#	O
pre	O
Explanation	O
:	O
Why	O
other	O
answers	O
did	O
not	O
suit	O
me	O
:	O
#	O
li	O
Double	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
or	O
FloatingDecimal	B-api_mention
.	I-api_mention
toJavaFormatString	I-api_mention
uses	O
scientific	O
notations	O
if	O
double	O
is	O
less	O
than	O
10	O
^	O
-	O
3	O
or	O
greater	O
than	O
or	O
equal	O
to	O
10	O
^	O
7	O
#	O
li	O
by	O
using	O
%	O
f	O
,	O
the	O
default	O
decimal	O
precision	O
is	O
6	O
,	O
otherwise	O
you	O
can	O
hardcode	O
it	O
but	O
it	O
results	O
in	O
extra	O
zeros	O
added	O
if	O
you	O
have	O
less	O
decimals	O
.	O
Example	O
:	O
#	O
pre	O
#	O
li	O
by	O
using	O
setMaximumFractionDigits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
%	O
.	O
0f	O
you	O
remove	O
any	O
decimal	O
precision	O
,	O
which	O
is	O
fine	O
for	O
integers	O
/	O
longs	O
but	O
not	O
for	O
double	O
#	O
pre	O
#	O
li	O
by	O
using	O
DecimalFormat	B-api_mention
,	O
you	O
are	O
local	O
dependent	O
.	O
In	O
French	O
locale	O
,	O
the	O
decimal	O
separator	O
is	O
a	O
comma	O
,	O
not	O
a	O
point	O
:	O
#	O
pre	O
Using	O
the	O
ENGLISH	O
locale	O
makes	O
sure	O
you	O
get	O
a	O
point	O
for	O
decimal	O
separator	O
,	O
wherever	O
your	O
program	O
will	O
run	O
Why	O
using	O
340	O
then	O
for	O
setMaximumFractionDigits	B-api_mention
?	O
Two	O
reasons	O
:	O
#	O
li	O
setMaximumFractionDigits	B-api_mention
accepts	O
an	O
integer	O
but	O
its	O
implementation	O
has	O
a	O
maximum	O
digits	O
allowed	O
of	O
DecimalFormat	B-api_mention
.	I-api_mention
DOUBLE	I-api_mention
_	I-api_mention
FRACTION	I-api_mention
_	I-api_mention
DIGITS	I-api_mention
which	O
equals	O
340	O
#	O
li	O
Double	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
=	O
4	O
.	O
9E	O
-	O
324	O
so	O
with	O
340	O
digits	O
you	O
are	O
sure	O
not	O
to	O
round	O
your	O
double	O
and	O
loose	O
precision	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32744190	O
There	O
is	O
no	O
actual	O
difference	O
in	O
the	O
functionality	O
between	O
the	O
2	O
version	O
'	O
s	O
loop	O
.	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
does	O
the	O
exact	O
same	O
thing	O
.	O
So	O
the	O
choice	O
to	O
use	O
it	O
or	O
not	O
may	O
not	O
necessarily	O
be	O
considered	O
a	O
mistake	O
.	O
It	O
is	O
left	O
up	O
to	O
the	O
developer	O
to	O
decide	O
when	O
it	O
comes	O
to	O
this	O
kind	O
of	O
micromanagement	O
.	O
There	O
are	O
2	O
separate	O
concerns	O
for	O
each	O
approach	O
:	O
#	O
li	O
using	O
the	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
makes	O
the	O
code	O
less	O
verbose	O
and	O
more	O
readable	O
.	O
#	O
li	O
looping	O
directly	O
in	O
the	O
HashMap	B-api_mention
code	O
(	O
like	O
version	O
8	O
)	O
peformance	O
wise	O
is	O
actually	O
a	O
better	O
option	O
.	O
While	O
the	O
overhead	O
that	O
inserting	O
the	O
Arrays	B-api_mention
class	O
is	O
negligible	O
it	O
may	O
become	O
less	O
so	O
when	O
it	O
comes	O
to	O
something	O
as	O
widespread	O
as	O
HashMap	B-api_mention
where	O
every	O
bit	O
of	O
performance	O
enhancement	O
has	O
a	O
large	O
effect	O
(	O
imagine	O
the	O
tiniest	O
footprint	O
reduce	O
of	O
a	O
HashMap	B-api_mention
in	O
fullblown	O
webapp	O
)	O
.	O
Take	O
into	O
consideration	O
the	O
fact	O
that	O
the	O
Arrays	B-api_mention
class	O
was	O
used	O
only	O
for	O
this	O
one	O
loop	O
.	O
The	O
change	O
is	O
small	O
enough	O
that	O
it	O
doesn	O
'	O
t	O
make	O
the	O
clear	O
method	O
less	O
readable	O
.	O
The	O
precise	O
reason	O
can	O
'	O
t	O
be	O
found	O
out	O
without	O
asking	O
the	O
developer	O
who	O
actually	O
did	O
this	O
,	O
however	O
i	O
suspect	O
it	O
'	O
s	O
either	O
a	O
mistake	O
or	O
a	O
small	O
enhancement	O
.	O
better	O
option	O
.	O
My	O
opinion	O
is	O
it	O
can	O
be	O
considered	O
an	O
enhancement	O
,	O
even	O
if	O
only	O
by	O
accident	O
.	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
10631738	O
You	O
could	O
do	O
this	O
:	O
#	O
pre	O
Basically	O
the	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
will	O
split	O
the	O
string	O
according	O
to	O
(	O
in	O
this	O
case	O
)	O
delimiter	O
you	O
are	O
passing	O
and	O
will	O
return	O
an	O
array	O
of	O
strings	O
.	O
However	O
,	O
you	O
seem	O
to	O
be	O
after	O
a	O
List	B-api_mention
of	O
Strings	O
rather	O
than	O
an	O
array	O
,	O
so	O
the	O
array	O
must	O
be	O
turned	O
into	O
a	O
list	O
by	O
using	O
the	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
)	I-api_mention
utility	O
.	O
Just	O
as	O
an	O
FYI	O
you	O
could	O
also	O
do	O
something	O
like	O
so	O
:	O
#	O
pre	O
But	O
it	O
is	O
usually	O
better	O
practice	O
to	O
program	O
to	O
an	O
interface	O
rather	O
than	O
to	O
an	O
actual	O
concrete	O
implementation	O
,	O
so	O
I	O
would	O
recommend	O
the	O
1st	O
option	O
.	O
Question	O
-	O
26549659	O
Google	O
Guava	B-api_mention
has	O
a	O
predicate	O
that	O
always	O
returns	O
true	O
.	O
Does	O
Java	O
8	O
have	O
something	O
similar	O
for	O
its	O
Predicate	B-api_mention
?	O
I	O
know	O
I	O
could	O
use	O
(	O
foo	O
)	O
-	O
>	O
{	O
return	O
true	O
;	O
}	O
,	O
but	O
I	O
want	O
something	O
pre	O
-	O
made	O
,	O
analogous	O
to	O
Collections	B-api_mention
.	I-api_mention
emptySet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
22847105	O
,	O
answer	O
-	O
37354549	O
The	O
way	O
I	O
think	O
about	O
it	O
is	O
that	O
you	O
use	O
flatMap	B-api_mention
when	O
the	O
function	O
you	O
wanted	O
to	O
put	O
inside	O
of	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
Observable	B-api_mention
.	O
In	O
which	O
case	O
you	O
might	O
still	O
try	O
to	O
use	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
it	O
would	O
be	O
unpractical	O
.	O
Let	O
me	O
try	O
to	O
explain	O
why	O
.	O
If	O
in	O
such	O
case	O
you	O
decided	O
to	O
stick	O
with	O
map	O
,	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
For	O
example	O
in	O
your	O
case	O
,	O
if	O
we	O
used	O
an	O
imaginary	O
RxGson	O
library	O
,	O
that	O
returned	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
from	O
it	O
'	O
s	O
toJson	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
instead	O
of	O
simply	O
returning	O
a	O
String	B-api_mention
)	O
it	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
At	O
this	O
point	O
it	O
would	O
be	O
pretty	O
tricky	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
such	O
an	O
observable	O
.	O
Inside	O
of	O
it	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
which	O
you	O
would	O
again	O
need	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
the	O
value	O
.	O
Which	O
is	O
not	O
practical	O
or	O
nice	O
to	O
look	O
at	O
.	O
So	O
to	O
make	O
it	O
useful	O
one	O
idea	O
is	O
to	O
"	O
flatten	O
"	O
this	O
observable	O
of	O
observables	O
(	O
you	O
might	O
start	O
to	O
see	O
where	O
the	O
name	O
_	O
flat	O
_	O
Map	O
comes	O
from	O
)	O
.	O
RxJava	O
provides	O
a	O
few	O
ways	O
to	O
flatten	O
observables	O
and	O
for	O
sake	O
of	O
simplicity	O
lets	O
assume	O
merge	O
is	O
what	O
we	O
want	O
.	O
Merge	O
basically	O
takes	O
a	O
bunch	O
of	O
observables	O
and	O
emits	O
whenever	O
any	O
of	O
them	O
emits	O
.	O
(	O
Lots	O
of	O
people	O
would	O
argue	O
switch	O
would	O
be	O
a	O
better	O
default	O
.	O
But	O
if	O
you	O
'	O
re	O
emitting	O
just	O
one	O
value	O
,	O
it	O
doesn	O
'	O
t	O
matter	O
anyway	O
.	O
)	O
So	O
amending	O
our	O
previous	O
snippet	O
we	O
would	O
get	O
:	O
#	O
pre	O
This	O
is	O
a	O
lot	O
more	O
useful	O
,	O
because	O
subscribing	O
to	O
that	O
(	O
or	O
mapping	O
,	O
or	O
filtering	O
,	O
or	O
.	O
.	O
.	O
)	O
you	O
just	O
get	O
the	O
String	B-api_mention
value	O
.	O
(	O
Also	O
,	O
mind	O
you	O
,	O
such	O
variant	O
of	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
exist	O
in	O
RxJava	O
,	O
but	O
if	O
you	O
understand	O
the	O
idea	O
of	O
merge	O
then	O
I	O
hope	O
you	O
also	O
understand	O
how	O
that	O
would	O
work	O
.	O
)	O
So	O
basically	O
because	O
such	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
probably	O
only	O
ever	O
be	O
useful	O
when	O
it	O
succeeds	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
returning	O
an	O
observable	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
type	O
this	O
over	O
and	O
over	O
again	O
,	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
created	O
as	O
a	O
shorthand	O
.	O
It	O
applies	O
the	O
mapping	O
function	O
just	O
as	O
a	O
normal	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
,	O
but	O
later	O
instead	O
of	O
emitting	O
the	O
returned	O
values	O
it	O
also	O
"	O
flattens	O
"	O
(	O
or	O
merges	O
)	O
them	O
.	O
That	O
'	O
s	O
the	O
general	O
use	O
case	O
.	O
It	O
is	O
most	O
useful	O
in	O
a	O
codebase	O
that	O
uses	O
Rx	O
allover	O
the	O
place	O
and	O
you	O
'	O
ve	O
got	O
many	O
methods	O
returning	O
observables	O
,	O
which	O
you	O
want	O
to	O
chain	O
with	O
other	O
methods	O
returning	O
observables	O
.	O
In	O
your	O
use	O
case	O
it	O
happens	O
to	O
be	O
useful	O
as	O
well	O
,	O
because	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
only	O
transform	O
one	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
into	O
another	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
it	O
cannot	O
transform	O
it	O
into	O
multiple	O
values	O
,	O
no	O
value	O
at	O
all	O
or	O
an	O
error	O
.	O
And	O
as	O
akarnokd	O
wrote	O
in	O
his	O
answer	O
(	O
and	O
mind	O
you	O
he	O
'	O
s	O
much	O
smarter	O
than	O
me	O
,	O
probably	O
in	O
general	O
,	O
but	O
at	O
least	O
when	O
it	O
comes	O
to	O
RxJava	O
)	O
you	O
shouldn	O
'	O
t	O
throw	O
exceptions	O
from	O
your	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
So	O
instead	O
you	O
can	O
use	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
return	O
Observable	B-api_mention
.	I-api_mention
just	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
all	O
goes	O
well	O
,	O
but	O
return	O
Observable	B-api_mention
.	I-api_mention
error	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
something	O
fails	O
.	O
See	O
his	O
answer	O
for	O
a	O
complete	O
snippet	O
:	O
#	O
a	O
Question	O
-	O
23453287	O
,	O
answer	O
-	O
23456085	O
It	O
will	O
be	O
hard	O
to	O
find	O
and	O
identify	O
"	O
THE	O
"	O
answer	O
,	O
for	O
the	O
resons	O
mentioned	O
in	O
the	O
comments	O
from	O
@	O
EJP	O
:	O
There	O
are	O
roughly	O
2	O
(	O
+	O
/	O
-	O
2	O
)	O
people	O
in	O
the	O
world	O
who	O
can	O
give	O
the	O
definite	O
answer	O
at	O
all	O
.	O
And	O
in	O
doubt	O
,	O
the	O
answer	O
might	O
just	O
be	O
something	O
like	O
"	O
Supporting	O
final	O
default	O
methods	O
did	O
not	O
seem	O
to	O
be	O
worth	O
the	O
effort	O
of	O
restructuring	O
the	O
internal	O
call	O
resolution	O
mechanisms	O
"	O
.	O
This	O
is	O
speculation	O
,	O
of	O
course	O
,	O
but	O
it	O
is	O
at	O
least	O
backed	O
by	O
subtle	O
evidences	O
,	O
like	O
this	O
Statement	O
(	O
by	O
one	O
of	O
the	O
two	O
persons	O
)	O
in	O
the	O
OpenJDK	O
mailing	O
list	O
:	O
#	O
blockquote	O
and	O
trivial	O
facts	O
like	O
that	O
a	O
method	O
is	O
simply	O
not	O
considered	O
to	O
be	O
a	O
(	O
really	O
)	O
final	O
method	O
when	O
it	O
is	O
a	O
default	O
method	O
,	O
as	O
currently	O
implemented	O
in	O
the	O
Method	B-api_mention
:	I-api_mention
:	I-api_mention
is	I-api_mention
_	I-api_mention
final	I-api_mention
_	I-api_mention
method	I-api_mention
method	O
in	O
the	O
OpenJDK	O
.	O
Further	O
really	O
"	O
authorative	O
"	O
information	O
is	O
indeed	O
hard	O
to	O
find	O
,	O
even	O
with	O
excessive	O
websearches	O
and	O
by	O
reading	O
commit	O
logs	O
.	O
I	O
thought	O
that	O
it	O
might	O
be	O
related	O
to	O
potential	O
ambiguities	O
during	O
the	O
resolution	O
of	O
interface	O
method	O
calls	O
with	O
the	O
invokeinterface	B-api_mention
instruction	O
and	O
and	O
class	O
method	O
calls	O
,	O
corresponding	O
to	O
the	O
invokevirtual	B-api_mention
instruction	O
:	O
For	O
the	O
invokevirtual	B-api_mention
instruction	O
,	O
there	O
may	O
be	O
a	O
simple	O
vtable	O
lookup	O
,	O
because	O
the	O
method	O
must	O
either	O
be	O
inherited	O
from	O
a	O
superclass	O
,	O
or	O
implemented	O
by	O
the	O
class	O
directly	O
.	O
In	O
contrast	O
to	O
that	O
,	O
an	O
invokeinterface	B-api_mention
call	O
must	O
examine	O
the	O
respective	O
call	O
site	O
to	O
find	O
out	O
which	O
interface	O
this	O
call	O
actually	O
refers	O
to	O
(	O
this	O
is	O
explained	O
in	O
more	O
detail	O
in	O
the	O
InterfaceCalls	O
page	O
of	O
the	O
HotSpot	O
Wiki	O
)	O
.	O
However	O
,	O
final	O
methods	O
do	O
either	O
not	O
get	O
inserted	O
into	O
the	O
vtable	O
at	O
all	O
,	O
or	O
replace	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
.	O
Line	O
333	O
)	O
,	O
and	O
similarly	O
,	O
default	O
methods	O
are	O
replacing	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
,	O
Line	O
202	O
)	O
.	O
So	O
the	O
actual	O
reason	O
(	O
and	O
thus	O
,	O
the	O
answer	O
)	O
must	O
be	O
hidden	O
deeper	O
inside	O
the	O
(	O
rather	O
complex	O
)	O
method	O
call	O
resolution	O
mechanisms	O
,	O
but	O
maybe	O
these	O
references	O
will	O
nevertheless	O
be	O
considered	O
as	O
being	O
helpful	O
,	O
be	O
it	O
only	O
for	O
others	O
that	O
manage	O
to	O
derive	O
the	O
actual	O
answer	O
from	O
that	O
.	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781168	O
The	O
value	O
you	O
are	O
looking	O
for	O
is	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
#	O
blockquote	O
That	O
'	O
s	O
off	O
-	O
topic	O
for	O
Stack	O
Exchange	O
.	O
But	O
you	O
could	O
do	O
it	O
starting	O
from	O
the	O
definition	O
of	O
Java	O
integers	O
(	O
JLS	O
4	O
.	O
2	O
)	O
#	O
blockquote	O
and	O
#	O
blockquote	O
and	O
the	O
definition	O
of	O
the	O
Java	O
unary	O
'	O
-	O
'	O
operator	O
(	O
JLS	O
15	O
.	O
15	O
.	O
4	O
)	O
:	O
#	O
blockquote	O
Question	O
-	O
31993377	O
Question	O
How	O
is	O
it	O
that	O
for	O
a	O
scanner	O
object	O
the	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
true	O
while	O
the	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
false	O
?	O
Note	O
:	O
Based	O
on	O
the	O
input	O
file	O
,	O
the	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
returning	O
the	O
result	O
as	O
expected	O
;	O
the	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
seem	O
to	O
be	O
returning	O
the	O
correct	O
result	O
.	O
Code	O
Here	O
'	O
s	O
the	O
code	O
I	O
'	O
m	O
running	O
that	O
'	O
s	O
creating	O
the	O
results	O
below	O
:	O
#	O
pre	O
Input	O
File	O
The	O
following	O
is	O
the	O
actual	O
content	O
of	O
the	O
file	O
that	O
I	O
'	O
m	O
passing	O
to	O
this	O
scanner	O
:	O
#	O
pre	O
Result	O
The	O
following	O
is	O
the	O
end	O
of	O
what	O
'	O
s	O
printed	O
in	O
the	O
console	O
when	O
I	O
run	O
my	O
code	O
,	O
and	O
includes	O
the	O
portion	O
I	O
can	O
'	O
t	O
make	O
sense	O
of	O
:	O
#	O
pre	O
Question	O
-	O
7655127	O
,	O
answer	O
-	O
7655177	O
String	B-api_mention
text	O
=	O
String	B-api_mention
.	I-api_mention
copyValueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
String	B-api_mention
text	O
=	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
is	O
arguably	O
better	O
(	O
encapsulates	O
the	O
new	O
String	B-api_mention
call	O
)	O
.	O
