Question	O
-	O
5192512	O
,	O
answer	O
-	O
22694891	O
I	O
think	O
many	O
of	O
the	O
answers	O
here	O
may	O
be	O
missing	O
a	O
quality	O
method	O
included	O
in	O
StringBuilder	B-api_mention
:	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
know	O
this	O
is	O
a	O
late	O
reply	O
;	O
however	O
,	O
this	O
should	O
be	O
made	O
known	O
(	O
and	O
explained	O
a	O
bit	O
more	O
thoroughly	O
)	O
.	O
Let	O
'	O
s	O
say	O
you	O
have	O
a	O
StringBuilder	B-api_mention
table	O
-	O
which	O
you	O
wish	O
to	O
modify	O
,	O
dynamically	O
,	O
throughout	O
your	O
program	O
(	O
one	O
I	O
am	O
working	O
on	O
right	O
now	O
does	O
this	O
)	O
,	O
e	O
.	O
g	O
.	O
StringBuilder	B-api_mention
table	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
are	O
looping	O
through	O
the	O
method	O
and	O
alter	O
the	O
content	O
,	O
use	O
the	O
content	O
,	O
then	O
wish	O
to	O
discard	O
the	O
content	O
to	O
"	O
clean	O
up	O
"	O
the	O
StringBuilder	B-api_mention
for	O
the	O
next	O
iteration	O
,	O
you	O
can	O
delete	O
it	O
'	O
s	O
contents	O
,	O
e	O
.	O
g	O
.	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
start	O
and	O
end	O
being	O
the	O
indices	O
of	O
the	O
chars	O
you	O
wish	O
to	O
remove	O
.	O
Don	O
'	O
t	O
know	O
the	O
length	O
in	O
chars	O
and	O
want	O
to	O
delete	O
the	O
whole	O
thing	O
?	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
NOW	O
,	O
for	O
the	O
kicker	O
.	O
StringBuilders	B-api_mention
,	O
as	O
mentioned	O
previously	O
,	O
take	O
a	O
lot	O
of	O
overhead	O
when	O
altered	O
frequently	O
(	O
and	O
can	O
cause	O
safety	O
issues	O
with	O
regard	O
to	O
threading	O
)	O
;	O
therefore	O
,	O
use	O
StringBuffer	B-api_mention
-	O
same	O
as	O
StringBuilder	B-api_mention
(	O
with	O
a	O
few	O
exceptions	O
)	O
-	O
if	O
your	O
StringBuilder	B-api_mention
is	O
used	O
for	O
the	O
purpose	O
of	O
interfacing	O
with	O
the	O
user	O
.	O
Question	O
-	O
6416706	O
,	O
answer	O
-	O
6416800	O
With	O
Guava	O
you	O
can	O
use	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
Iterable	I-api_mention
)	I-api_mention
or	O
Sets	B-api_mention
.	I-api_mention
newHashSet	I-api_mention
(	I-api_mention
Iterable	I-api_mention
)	I-api_mention
,	O
among	O
other	O
similar	O
methods	O
.	O
This	O
will	O
of	O
course	O
copy	O
all	O
the	O
elements	O
in	O
to	O
memory	O
.	O
If	O
that	O
isn	O
'	O
t	O
acceptable	O
,	O
I	O
think	O
your	O
code	O
that	O
works	O
with	O
these	O
ought	O
to	O
take	O
Iterable	B-api_mention
rather	O
than	O
Collection	B-api_mention
.	O
Guava	O
also	O
happens	O
to	O
provide	O
convenient	O
methods	O
for	O
doing	O
things	O
you	O
can	O
do	O
on	O
a	O
Collection	B-api_mention
using	O
an	O
Iterable	B-api_mention
(	O
such	O
as	O
Iterables	B-api_mention
.	I-api_mention
isEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Iterables	B-api_mention
.	I-api_mention
contains	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
,	O
but	O
the	O
performance	O
implications	O
are	O
more	O
obvious	O
.	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488710	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
returns	O
a	O
fixed	O
-	O
size	O
List	B-api_mention
backed	O
by	O
the	O
array	O
.	O
If	O
you	O
want	O
a	O
normal	O
mutable	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
ArrayList	I-api_mention
you	O
need	O
to	O
do	O
this	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
,	O
using	O
Guava	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Using	O
a	O
Splitter	B-api_mention
gives	O
you	O
more	O
flexibility	O
in	O
how	O
you	O
split	O
the	O
string	O
and	O
gives	O
you	O
the	O
ability	O
to	O
,	O
for	O
example	O
,	O
skip	O
empty	O
strings	O
in	O
the	O
results	O
and	O
trim	O
results	O
.	O
It	O
also	O
has	O
less	O
weird	O
behavior	O
than	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
as	O
well	O
as	O
not	O
requiring	O
you	O
to	O
split	O
by	O
regex	O
(	O
that	O
'	O
s	O
just	O
one	O
option	O
)	O
.	O
Question	O
-	O
22182669	O
,	O
answer	O
-	O
22222274	O
StackOverflowError	B-api_mention
occurs	O
due	O
to	O
an	O
application	O
recurses	O
too	O
deeply	O
(	O
This	O
is	O
not	O
an	O
answer	O
you	O
are	O
expecting	O
)	O
.	O
Now	O
other	O
things	O
to	O
happen	O
to	O
StackOverflowError	B-api_mention
is	O
keep	O
calling	O
methods	O
from	O
methods	O
till	O
you	O
get	O
StackOverflowError	B-api_mention
,	O
but	O
nobody	O
can	O
program	O
to	O
get	O
StackOverflowError	B-api_mention
and	O
even	O
if	O
those	O
programmer	O
are	O
doing	O
so	O
then	O
they	O
are	O
not	O
following	O
coding	O
standards	O
for	O
cyclomatic	O
complixity	O
that	O
every	O
programmer	O
has	O
to	O
understand	O
while	O
programming	O
.	O
Such	O
reason	O
for	O
'	B-api_mention
StackOverflowError	I-api_mention
'	I-api_mention
will	O
require	O
much	O
time	O
to	O
rectify	O
it	O
.	O
But	O
unknowingly	O
coding	O
one	O
line	O
or	O
two	O
line	O
which	O
causes	O
StackOverflowError	B-api_mention
is	O
understandable	O
and	O
JVM	O
throws	O
that	O
and	O
we	O
can	O
rectify	O
it	O
instantly	O
.	O
Here	O
is	O
my	O
answer	O
with	O
picture	O
for	O
some	O
other	O
question	O
.	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
29527145	O
Adding	O
local	O
classes	O
,	O
lambdas	O
and	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
complete	O
the	O
previous	O
two	O
answers	O
.	O
Further	O
,	O
I	O
add	O
arrays	O
of	O
lambdas	O
and	O
arrays	O
of	O
anonymous	O
classes	O
(	O
which	O
do	O
not	O
make	O
any	O
sense	O
in	O
practice	O
though	O
)	O
:	O
#	O
pre	O
This	O
is	O
the	O
full	O
output	O
:	O
#	O
pre	O
So	O
,	O
here	O
are	O
the	O
rules	O
.	O
First	O
,	O
lets	O
start	O
with	O
primitive	O
types	O
and	O
void	O
:	O
#	O
li	O
If	O
the	O
class	O
object	O
represents	O
a	O
primitive	O
type	O
or	O
void	O
,	O
all	O
the	O
four	O
methods	O
simply	O
returns	O
its	O
name	O
.	O
Now	O
the	O
rules	O
for	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
Every	O
non	O
-	O
lambda	O
and	O
non	O
-	O
array	O
class	O
or	O
interface	O
(	O
i	O
.	O
e	O
,	O
top	O
-	O
level	O
,	O
nested	O
,	O
inner	O
,	O
local	O
and	O
anonymous	O
)	O
has	O
a	O
name	O
(	O
which	O
is	O
returned	O
by	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
that	O
is	O
the	O
package	O
name	O
followed	O
by	O
a	O
dot	O
(	O
if	O
there	O
is	O
a	O
package	O
)	O
,	O
followed	O
by	O
the	O
name	O
of	O
its	O
class	O
-	O
file	O
as	O
generated	O
by	O
the	O
compiler	O
(	O
whithout	O
the	O
suffix	O
.	O
class	O
)	O
.	O
If	O
there	O
is	O
no	O
package	O
,	O
it	O
is	O
simply	O
the	O
name	O
of	O
the	O
class	O
-	O
file	O
.	O
If	O
the	O
class	O
is	O
an	O
inner	O
,	O
nested	O
,	O
local	O
or	O
anonymous	O
class	O
,	O
the	O
compiler	O
should	O
generate	O
at	O
least	O
one	O
$	O
in	O
its	O
class	O
-	O
file	O
name	O
.	O
Note	O
that	O
for	O
anonymous	O
classes	O
,	O
the	O
class	O
name	O
would	O
end	O
with	O
a	O
dollar	O
-	O
sign	O
followed	O
by	O
a	O
number	O
.	O
#	O
li	O
Lambda	O
class	O
names	O
are	O
generally	O
unpredictable	O
,	O
and	O
you	O
shouldn	O
'	O
t	O
care	O
about	O
they	O
anyway	O
.	O
Exactly	O
,	O
their	O
name	O
is	O
the	O
name	O
of	O
the	O
enclosing	O
class	O
,	O
followed	O
by	O
$	O
$	O
Lambda	O
$	O
,	O
followed	O
by	O
a	O
number	O
,	O
followed	O
by	O
a	O
slash	O
,	O
followed	O
by	O
another	O
number	O
.	O
#	O
li	O
The	O
class	O
descriptor	O
of	O
the	O
primitives	O
are	O
Z	O
for	O
boolean	O
,	O
B	O
for	O
byte	O
,	O
S	O
for	O
short	O
,	O
C	O
for	O
char	O
,	O
I	O
for	O
int	O
,	O
J	O
for	O
long	O
,	O
F	O
for	O
float	O
and	O
D	O
for	O
double	O
.	O
For	O
non	O
-	O
array	O
classes	O
and	O
interfaces	O
the	O
class	O
descriptor	O
is	O
L	O
followed	O
by	O
what	O
is	O
given	O
by	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
followed	O
by	O
;	O
.	O
For	O
array	O
classes	O
,	O
the	O
class	O
descriptor	O
is	O
[	O
followed	O
by	O
the	O
class	O
descriptor	O
of	O
the	O
component	O
type	O
(	O
which	O
may	O
be	O
itself	O
another	O
array	O
class	O
)	O
.	O
#	O
li	O
For	O
array	O
classes	O
,	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
its	O
class	O
descriptor	O
.	O
This	O
rule	O
seems	O
to	O
fail	O
only	O
for	O
array	O
classes	O
whose	O
the	O
component	O
type	O
is	O
a	O
lambda	O
(	O
which	O
possibly	O
is	O
a	O
bug	O
)	O
,	O
but	O
hopefully	O
this	O
should	O
not	O
matter	O
anyway	O
because	O
there	O
is	O
no	O
point	O
even	O
on	O
the	O
existence	O
of	O
array	O
classes	O
whose	O
component	O
type	O
is	O
a	O
lambda	O
.	O
Now	O
,	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
If	O
the	O
class	O
instance	O
represents	O
an	O
interface	O
(	O
or	O
an	O
annotation	O
,	O
which	O
is	O
a	O
special	O
type	O
of	O
interface	O
)	O
,	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
StringLiteral	O
+	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
is	O
a	O
primitive	O
,	O
it	O
returns	O
simply	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
is	O
something	O
else	O
(	O
a	O
class	O
type	O
,	O
even	O
if	O
it	O
is	O
a	O
pretty	O
weird	O
one	O
)	O
,	O
it	O
returns	O
StringLiteral	O
+	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
For	O
top	O
-	O
level	O
classes	O
and	O
interfaces	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
just	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
.	O
#	O
li	O
The	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
null	O
for	O
anonymous	O
or	O
local	O
classes	O
and	O
for	O
array	O
classes	O
of	O
those	O
.	O
#	O
li	O
For	O
inner	O
and	O
nested	O
classes	O
and	O
interfaces	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
would	O
replacing	O
the	O
compiler	O
-	O
introduced	O
dollar	O
-	O
signs	O
by	O
dots	O
.	O
#	O
li	O
For	O
array	O
classes	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
null	O
if	O
the	O
canonical	O
name	O
of	O
the	O
component	O
type	O
is	O
null	O
.	O
Otherwise	O
,	O
it	O
returns	O
the	O
canonical	O
name	O
of	O
the	O
component	O
type	O
followed	O
by	O
[	O
]	O
.	O
The	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
For	O
top	O
-	O
level	O
,	O
nested	O
,	O
inner	O
and	O
local	O
classes	O
,	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
the	O
name	O
of	O
the	O
class	O
as	O
written	O
in	O
the	O
source	O
file	O
.	O
#	O
li	O
For	O
anonymous	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
empty	O
String	B-api_mention
.	O
#	O
li	O
For	O
lambda	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
just	O
returns	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
return	O
without	O
the	O
package	O
name	O
.	O
This	O
do	O
not	O
makes	O
much	O
sense	O
and	O
looks	O
like	O
a	O
bug	O
for	O
me	O
,	O
but	O
there	O
is	O
no	O
point	O
in	O
calling	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
lambda	O
class	O
to	O
start	O
with	O
.	O
#	O
li	O
For	O
array	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
the	O
simple	O
name	O
of	O
the	O
component	O
class	O
followed	O
by	O
[	O
]	O
.	O
This	O
have	O
the	O
funny	O
/	O
weird	O
side	O
-	O
effect	O
that	O
array	O
classes	O
whose	O
component	O
type	O
is	O
an	O
anonymous	O
class	O
have	O
just	O
[	O
]	O
as	O
their	O
simple	O
names	O
.	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
10796174	O
You	O
need	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
split	B-api_mention
uses	O
regular	O
expression	O
and	O
in	O
regex	O
|	O
is	O
metacharacter	O
representing	O
OR	O
operator	O
.	O
You	O
need	O
to	O
escape	O
that	O
character	O
using	O
\	O
(	O
written	O
in	O
String	B-api_mention
as	O
StringLiteral	O
since	O
\	O
is	O
also	O
metacharacter	O
in	O
String	B-api_mention
literals	O
and	O
require	O
another	O
\	O
to	O
escape	O
it	O
)	O
.	O
You	O
can	O
also	O
use	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
let	O
Pattern	B-api_mention
.	I-api_mention
quote	I-api_mention
create	O
escaped	O
version	O
of	O
regex	O
representing	O
|	O
.	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
33687544	O
For	O
HTML	O
response	O
below	O
code	O
can	O
be	O
used	O
bufString	O
.	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
20001427	O
,	O
answer	O
-	O
22245383	O
:	O
:	O
is	O
called	O
Method	O
Reference	O
.	O
It	O
is	O
basically	O
a	O
reference	O
to	O
a	O
single	O
method	O
.	O
i	O
.	O
e	O
.	O
it	O
refers	O
to	O
an	O
existing	O
method	O
by	O
name	O
.	O
Short	O
Explanation	O
:	O
Below	O
is	O
an	O
example	O
of	O
a	O
reference	O
to	O
a	O
static	O
method	O
:	O
#	O
pre	O
square	O
can	O
be	O
passed	O
around	O
just	O
like	O
object	O
reference	O
'	O
s	O
and	O
trigger	O
when	O
at	O
need	O
.	O
In	O
fact	O
,	O
it	O
can	O
be	O
perfectly	O
used	O
as	O
a	O
reference	O
to	O
a	O
normal	O
method	O
of	O
an	O
object	O
and	O
not	O
just	O
static	O
ones	O
.	O
#	O
pre	O
Function	B-api_mention
above	O
is	O
a	O
functional	O
interface	O
.	O
Well	O
to	O
fully	O
explain	O
:	O
:	O
,	O
it	O
is	O
important	O
to	O
understand	O
Functional	O
Interface	O
.	O
Plainly	O
,	O
Function	O
interface	O
is	O
an	O
interface	O
with	O
just	O
one	O
abstract	O
method	O
.	O
For	O
example	O
:	O
Runnable	B-api_mention
,	O
Callable	B-api_mention
,	O
ActionListener	B-api_mention
and	O
so	O
.	O
Function	B-api_mention
above	O
is	O
a	O
functional	O
interface	O
with	O
just	O
one	O
method	O
apply	O
.	O
It	O
takes	O
one	O
argument	O
and	O
produces	O
a	O
result	O
.	O
The	O
reason	O
why	O
:	O
:	O
are	O
awesome	O
is	O
because	O
:	O
#	O
blockquote	O
i	O
.	O
e	O
.	O
Just	O
like	O
writing	O
lambda	O
body	O
:	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
square	O
=	O
(	O
Double	B-api_mention
x	O
)	O
-	O
>	O
x	O
*	O
x	O
;	O
You	O
can	O
simply	O
do	O
:	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
square	O
=	O
Hey	O
:	O
:	O
square	O
;	O
At	O
runtime	O
they	O
behave	O
exactly	O
the	O
same	O
.	O
The	O
bytecode	O
may	O
/	O
not	O
be	O
the	O
same	O
(	O
For	O
above	O
case	O
,	O
it	O
generates	O
the	O
same	O
bytecode	O
(	O
compile	O
above	O
and	O
check	O
javap	O
-	O
c	O
)	O
)	O
The	O
only	O
major	O
criteria	O
to	O
satisfy	O
is	O
:	O
the	O
method	O
you	O
provide	O
should	O
have	O
a	O
similar	O
signature	O
to	O
method	O
of	O
the	O
FunctionalInterface	B-api_mention
you	O
use	O
as	O
object	O
reference	O
.	O
Below	O
is	O
illegal	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
p	O
=	O
Hey	O
:	O
:	O
square	O
;	O
/	O
/	O
illegal	O
square	O
expects	O
an	O
argument	O
and	O
returns	O
a	O
double	O
.	O
get	O
method	O
in	O
Supplier	B-api_mention
expects	O
an	O
argument	O
but	O
doesn	O
'	O
t	O
return	O
anything	O
.	O
So	O
it	O
is	O
an	O
error	O
.	O
Method	O
Reference	O
refers	O
to	O
a	O
method	O
of	O
the	O
functional	O
interface	O
(	O
As	O
mentioned	O
,	O
functional	O
interface	O
can	O
only	O
have	O
one	O
method	O
)	O
.	O
Some	O
more	O
examples	O
:	O
accept	O
method	O
in	O
Consumer	B-api_mention
takes	O
an	O
input	O
but	O
doesnt	O
return	O
anything	O
.	O
#	O
pre	O
Above	O
getRandom	O
takes	O
no	O
argument	O
and	O
returns	O
a	O
double	O
.	O
So	O
any	O
functional	O
interface	O
that	O
satisfies	O
the	O
criteria	O
of	O
:	O
take	O
no	O
argument	O
and	O
return	O
double	O
can	O
be	O
used	O
.	O
Another	O
example	O
:	O
#	O
pre	O
In	O
case	O
of	O
Parametrized	O
Types	O
:	O
#	O
pre	O
Method	O
Reference	O
can	O
be	O
obtained	O
in	O
different	O
styles	O
,	O
but	O
fundamentally	O
they	O
all	O
mean	O
the	O
same	O
and	O
can	O
simply	O
be	O
visualized	O
as	O
a	O
lambda	O
:	O
#	O
li	O
A	O
static	O
method	O
(	O
ClassName	O
:	O
:	O
methName	O
)	O
#	O
li	O
An	O
instance	O
method	O
of	O
a	O
particular	O
object	O
(	O
instanceRef	O
:	O
:	O
methName	O
)	O
#	O
li	O
A	O
super	O
method	O
of	O
a	O
particular	O
object	O
(	O
super	O
:	O
:	O
methName	O
)	O
#	O
li	O
An	O
instance	O
method	O
of	O
an	O
arbitrary	O
object	O
of	O
a	O
particular	O
type	O
(	O
ClassName	O
:	O
:	O
methName	O
)	O
#	O
li	O
A	O
class	O
constructor	O
reference	O
(	O
ClassName	O
:	O
:	O
new	O
)	O
#	O
li	O
An	O
array	O
constructor	O
reference	O
(	O
TypeName	O
[	O
]	O
:	O
:	O
new	O
)	O
For	O
further	O
reference	O
:	O
#	O
a	O
Question	O
-	O
22725537	O
,	O
answer	O
-	O
27215810	O
A	O
slightly	O
shorter	O
version	O
using	O
reduce	B-api_mention
:	O
things	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
could	O
also	O
move	O
the	O
reduce	B-api_mention
function	O
to	O
a	O
static	O
utility	O
method	O
and	O
then	O
it	O
becomes	O
:	O
.	B-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
4812570	O
,	O
answer	O
-	O
21765043	O
You	O
can	O
use	O
the	O
ExceptionUtils	B-api_mention
.	I-api_mention
getStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
from	O
Apache	O
Commons	O
3	O
class	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
commons	I-api_mention
.	I-api_mention
lang3	I-api_mention
.	I-api_mention
exception	I-api_mention
.	I-api_mention
ExceptionUtils	I-api_mention
.	O
#	O
a	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
29226136	O
Also	O
note	O
that	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
normally	O
contains	O
=	O
=	O
for	O
testing	O
as	O
this	O
is	O
the	O
first	O
thing	O
you	O
would	O
wish	O
to	O
test	O
for	O
if	O
you	O
wanted	O
to	O
test	O
if	O
two	O
objects	O
are	O
equal	O
.	O
And	O
=	O
=	O
actually	O
does	O
look	O
at	O
values	O
for	O
primitive	O
types	O
,	O
for	O
objects	O
it	O
checks	O
the	O
reference	O
.	O
Question	O
-	O
32714194	O
String	B-api_mention
is	O
a	O
special	O
case	O
in	O
Java	O
.	O
It	O
'	O
s	O
a	O
class	O
,	O
which	O
I	O
can	O
examine	O
in	O
the	O
source	O
code	O
,	O
but	O
it	O
also	O
has	O
its	O
own	O
infix	O
operator	O
+	O
,	O
which	O
seems	O
to	O
be	O
syntactic	O
sugar	O
for	O
StringBuilder	B-api_mention
.	O
For	O
example	O
,	O
StringLiteral	O
+	O
yourName	O
;	O
could	O
become	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
There	O
are	O
no	O
user	O
-	O
defined	O
operators	O
in	O
Java	O
,	O
so	O
where	O
is	O
+	O
specified	O
for	O
String	B-api_mention
?	O
Could	O
the	O
same	O
mechanism	O
be	O
used	O
to	O
make	O
additional	O
operators	O
,	O
such	O
as	O
for	O
vectors	O
?	O
Question	O
-	O
13102045	O
I	O
am	O
using	O
Scanner	B-api_mention
methods	O
nextInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
reading	O
input	O
.	O
Basically	O
,	O
it	O
looks	O
like	O
this	O
:	O
#	O
pre	O
The	O
problem	O
is	O
that	O
after	O
entering	O
the	O
numerical	O
value	O
,	O
the	O
first	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
skipped	O
and	O
the	O
second	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
executed	O
,	O
so	O
that	O
my	O
output	O
looks	O
like	O
this	O
:	O
#	O
pre	O
I	O
tested	O
my	O
application	O
and	O
it	O
looks	O
like	O
the	O
problem	O
lies	O
in	O
using	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
I	O
delete	O
it	O
,	O
then	O
both	O
string1	O
=	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
string2	O
=	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
executed	O
as	O
I	O
want	O
them	O
to	O
be	O
.	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
9482369	O
This	O
could	O
be	O
a	O
bit	O
tricky	O
in	O
the	O
most	O
general	O
case	O
.	O
On	O
the	O
face	O
of	O
it	O
,	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
give	O
you	O
the	O
IP	O
address	O
of	O
this	O
host	O
.	O
The	O
problem	O
is	O
that	O
a	O
host	O
could	O
have	O
lots	O
of	O
network	O
interfaces	O
,	O
and	O
an	O
interface	O
could	O
be	O
bound	O
to	O
more	O
than	O
one	O
IP	O
address	O
.	O
And	O
to	O
top	O
that	O
,	O
not	O
all	O
IP	O
addresses	O
will	O
be	O
reachable	O
outside	O
of	O
your	O
machine	O
or	O
your	O
LAN	O
.	O
For	O
example	O
,	O
they	O
could	O
be	O
IP	O
addresses	O
for	O
virtual	O
network	O
devices	O
,	O
private	O
network	O
IP	O
addresses	O
,	O
and	O
so	O
on	O
.	O
What	O
this	O
means	O
is	O
that	O
the	O
IP	O
address	O
returned	O
by	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
might	O
not	O
be	O
the	O
right	O
one	O
to	O
use	O
.	O
How	O
can	O
you	O
deal	O
with	O
this	O
?	O
#	O
li	O
One	O
approach	O
is	O
to	O
use	O
NetworkInterface	B-api_mention
.	I-api_mention
getNetworkInterfaces	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
all	O
of	O
the	O
known	O
network	O
interfaces	O
on	O
the	O
host	O
,	O
and	O
then	O
iterate	O
over	O
each	O
NI	O
'	O
s	O
addresses	O
.	O
#	O
li	O
Another	O
approach	O
is	O
to	O
(	O
somehow	O
)	O
get	O
the	O
externally	O
advertized	O
FQDN	O
for	O
the	O
host	O
,	O
and	O
use	O
InetAddress	B-api_mention
.	I-api_mention
getByName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
look	O
up	O
the	O
primary	O
IP	O
address	O
.	O
(	O
But	O
how	O
do	O
you	O
get	O
it	O
,	O
and	O
how	O
do	O
you	O
deal	O
with	O
a	O
DNS	O
-	O
based	O
load	O
balancer	O
?	O
)	O
#	O
li	O
A	O
variation	O
of	O
the	O
previous	O
is	O
to	O
get	O
the	O
preferred	O
FQDN	O
from	O
a	O
config	O
file	O
or	O
a	O
command	O
line	O
parameter	O
.	O
#	O
li	O
Another	O
variation	O
is	O
to	O
get	O
the	O
preferred	O
IP	O
address	O
from	O
a	O
config	O
file	O
or	O
a	O
command	O
line	O
parameter	O
.	O
In	O
summary	O
,	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
typically	O
work	O
,	O
but	O
you	O
may	O
need	O
to	O
provide	O
an	O
alternative	O
method	O
for	O
the	O
cases	O
where	O
your	O
code	O
is	O
run	O
in	O
an	O
environment	O
with	O
"	O
complicated	O
"	O
networking	O
.	O
#	O
blockquote	O
#	O
li	O
Any	O
address	O
in	O
the	O
range	O
127	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
is	O
a	O
"	O
loopback	O
"	O
address	O
.	O
It	O
is	O
only	O
visible	O
to	O
"	O
this	O
"	O
host	O
.	O
#	O
li	O
Any	O
address	O
in	O
the	O
range	O
192	O
.	O
168	O
.	O
xxx	O
.	O
xxx	O
is	O
a	O
private	O
(	O
aka	O
site	O
local	O
)	O
IP	O
address	O
.	O
These	O
are	O
reserved	O
for	O
use	O
within	O
an	O
organization	O
.	O
The	O
same	O
applies	O
to	O
10	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
addresses	O
,	O
and	O
172	O
.	O
16	O
.	O
xxx	O
.	O
xxx	O
through	O
172	O
.	O
31	O
.	O
xxx	O
.	O
xxx	O
.	O
#	O
li	O
Addresses	O
in	O
the	O
range	O
169	O
.	O
254	O
.	O
xxx	O
.	O
xxx	O
are	O
link	O
local	O
IP	O
addresses	O
.	O
These	O
are	O
reserved	O
for	O
use	O
on	O
a	O
single	O
network	O
segment	O
.	O
#	O
li	O
Addresses	O
in	O
the	O
range	O
224	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
through	O
239	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
are	O
multicast	O
addresses	O
.	O
#	O
li	O
The	O
address	O
255	O
.	O
255	O
.	O
255	O
.	O
255	O
is	O
the	O
broadcast	O
address	O
.	O
#	O
li	O
Anything	O
else	O
should	O
be	O
a	O
valid	O
public	O
point	O
-	O
to	O
-	O
point	O
IPv4	O
address	O
.	O
In	O
fact	O
,	O
the	O
InetAddress	B-api_mention
API	O
provides	O
methods	O
for	O
testing	O
for	O
loopback	O
,	O
link	O
local	O
,	O
site	O
local	O
,	O
multicast	O
and	O
broadcast	O
addresses	O
.	O
You	O
can	O
use	O
these	O
to	O
sort	O
out	O
which	O
of	O
the	O
IP	O
addresses	O
you	O
get	O
back	O
is	O
most	O
appropriate	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
30190425	O
I	O
'	O
ll	O
vote	O
for	O
sb	O
.	B-api_mention
setLength	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
not	O
only	O
because	O
it	O
'	O
s	O
one	O
function	O
call	O
but	O
because	O
it	O
don	O
'	O
t	O
actually	O
copy	O
the	O
array	O
into	O
another	O
array	O
like	O
sb	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
It	O
just	O
fill	O
the	O
remaining	O
characters	O
to	O
be	O
0	O
and	O
set	O
the	O
length	O
variable	O
to	O
the	O
new	O
length	O
.	O
You	O
can	O
take	O
a	O
look	O
into	O
their	O
implementation	O
to	O
validate	O
my	O
point	O
from	O
here	O
at	O
setLength	B-api_mention
function	O
and	O
delete0	O
function	O
.	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262511	O
The	O
first	O
case	O
is	O
ok	O
because	O
you	O
are	O
invoking	O
a	O
"	O
special	O
"	O
method	O
(	O
a	O
constructor	O
)	O
and	O
you	O
are	O
no	O
actually	O
taking	O
the	O
created	O
object	O
.	O
Just	O
to	O
make	O
it	O
more	O
clear	O
,	O
I	O
'	O
ll	O
put	O
the	O
optional	O
braces	O
in	O
your	O
lambdas	O
:	O
#	O
pre	O
And	O
more	O
clear	O
,	O
I	O
'	O
ll	O
translate	O
that	O
to	O
the	O
older	O
notation	O
:	O
#	O
pre	O
In	O
the	O
first	O
case	O
you	O
are	O
executing	O
a	O
constructor	O
,	O
but	O
you	O
are	O
NOT	O
returning	O
the	O
created	O
object	O
,	O
in	O
the	O
second	O
case	O
you	O
are	O
attempting	O
to	O
return	O
a	O
String	B-api_mention
value	O
,	O
but	O
your	O
method	O
in	O
your	O
interface	O
BiConsumer	O
returns	O
void	O
,	O
hence	O
the	O
compiler	O
error	O
.	O
Question	O
-	O
24630963	O
The	O
Java	O
8	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
throws	O
a	O
NullPointerException	B-api_mention
if	O
one	O
of	O
the	O
values	O
is	O
'	O
null	O
'	O
.	O
I	O
don	O
'	O
t	O
understand	O
this	O
behaviour	O
,	O
maps	O
can	O
contain	O
null	O
pointers	O
as	O
value	O
without	O
any	O
problems	O
.	O
Is	O
there	O
a	O
good	O
reason	O
why	O
values	O
cannot	O
be	O
null	O
for	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
?	O
Also	O
,	O
is	O
there	O
a	O
nice	O
Java	O
8	O
way	O
of	O
fixing	O
this	O
,	O
or	O
should	O
I	O
revert	O
to	O
plain	O
old	O
for	O
loop	O
?	O
An	O
example	O
of	O
my	O
problem	O
:	O
#	O
pre	O
Stacktrace	O
:	O
#	O
pre	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28584954	O
Because	O
thats	O
the	O
standard	O
.	O
Infinity	O
represents	O
a	O
number	O
greater	O
than	O
or	O
less	O
than	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
/	O
-	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
NaN	O
represents	O
the	O
outcome	O
of	O
an	O
operation	O
that	O
didn	O
'	O
t	O
make	O
sense	O
.	O
That	O
is	O
,	O
the	O
operation	O
didn	O
'	O
t	O
possibly	O
come	O
out	O
with	O
a	O
number	O
.	O
I	O
would	O
guess	O
the	O
logic	O
is	O
once	O
a	O
number	O
gets	O
big	O
enough	O
(	O
infinity	O
)	O
and	O
because	O
of	O
the	O
limitation	O
of	O
floating	O
point	O
numbers	O
,	O
adding	O
numbers	O
to	O
it	O
won	O
'	O
t	O
change	O
the	O
outcome	O
,	O
so	O
its	O
'	O
like	O
'	O
infinity	O
.	O
So	O
if	O
you	O
want	O
to	O
compare	O
to	O
really	O
big	O
numbers	O
,	O
at	O
some	O
point	O
you	O
might	O
just	O
say	O
those	O
two	O
big	O
numbers	O
are	O
close	O
enough	O
for	O
all	O
intents	O
and	O
purposes	O
.	O
But	O
if	O
you	O
want	O
to	O
compare	O
two	O
things	O
that	O
both	O
aren	O
'	O
t	O
numbers	O
,	O
you	O
can	O
'	O
t	O
compare	O
them	O
so	O
its	O
false	O
.	O
At	O
least	O
you	O
couldn	O
'	O
t	O
compare	O
them	O
as	O
a	O
primitive	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29098447	O
The	O
solution	O
is	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
collect	I-api_mention
.	O
To	O
create	O
a	O
Collector	B-api_mention
using	O
its	O
builder	O
pattern	O
is	O
already	O
given	O
as	O
solution	O
.	O
The	O
alternative	O
is	O
the	O
other	O
overloaded	O
collect	O
being	O
a	O
tiny	O
bit	O
more	O
primitive	O
.	O
#	O
pre	O
As	O
one	O
sees	O
,	O
I	O
make	O
a	O
list	O
of	O
string	O
lists	O
,	O
where	O
there	O
always	O
is	O
at	O
least	O
one	O
last	O
(	O
empty	O
)	O
string	O
list	O
.	O
#	O
li	O
The	O
first	O
function	O
creates	O
a	O
starting	O
list	O
of	O
string	O
lists	O
.	O
It	O
specifies	O
the	O
result	O
(	O
typed	O
)	O
object	O
.	O
#	O
li	O
The	O
second	O
function	O
is	O
called	O
to	O
process	O
each	O
element	O
.	O
It	O
is	O
an	O
action	O
on	O
the	O
partial	O
result	O
and	O
an	O
element	O
.	O
#	O
li	O
The	O
third	O
is	O
not	O
really	O
used	O
,	O
it	O
comes	O
into	O
play	O
on	O
parallelising	O
the	O
processing	O
,	O
when	O
partial	O
results	O
must	O
be	O
combined	O
.	O
A	O
solution	O
with	O
an	O
accumulator	O
:	O
As	O
@	O
StuartMarks	O
points	O
out	O
,	O
the	O
combiner	O
does	O
not	O
fullfill	O
the	O
contract	O
for	O
parallelism	O
.	O
Due	O
to	O
the	O
comment	O
of	O
@	O
ArnaudDenoyelle	O
a	O
version	O
using	O
reduce	O
.	O
#	O
pre	O
#	O
li	O
The	O
first	O
parameter	O
is	O
the	O
accumulated	O
object	O
.	O
#	O
li	O
The	O
second	O
function	O
accumulates	O
.	O
#	O
li	O
The	O
third	O
is	O
the	O
aforementioned	O
combiner	O
.	O
Question	O
-	O
5263187	O
,	O
answer	O
-	O
5263201	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571348	O
The	O
object	O
your	O
method	O
decompressGZIP	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
needs	O
is	O
a	O
byte	O
[	O
]	O
.	O
So	O
the	O
basic	O
,	O
technical	O
answer	O
to	O
the	O
question	O
you	O
have	O
asked	O
is	O
:	O
#	O
pre	O
However	O
the	O
problem	O
you	O
appear	O
to	O
be	O
wrestling	O
with	O
is	O
that	O
this	O
doesn	O
'	O
t	O
display	O
very	O
well	O
.	O
Calling	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
just	O
give	O
you	O
the	O
default	O
Object	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
is	O
the	O
class	O
name	O
+	O
memory	O
address	O
.	O
In	O
your	O
result	O
[	O
B	O
@	O
38ee9f13	O
,	O
the	O
[	O
B	O
means	O
byte	O
[	O
]	O
and	O
38ee9f13	O
is	O
the	O
memory	O
address	O
,	O
separated	O
by	O
an	O
@	O
.	O
For	O
display	O
purposes	O
you	O
can	O
use	O
:	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
this	O
will	O
just	O
display	O
as	O
a	O
sequence	O
of	O
comma	O
-	O
separated	O
integers	O
,	O
which	O
may	O
or	O
may	O
not	O
be	O
what	O
you	O
want	O
.	O
To	O
get	O
a	O
readable	O
String	B-api_mention
back	O
from	O
a	O
byte	O
[	O
]	O
,	O
use	O
:	O
String	B-api_mention
string	O
=	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
reason	O
the	O
Charset	B-api_mention
version	O
is	O
favoured	O
,	O
is	O
that	O
all	O
String	B-api_mention
objects	O
in	O
Java	O
are	O
stored	O
internally	O
as	O
UTF	O
-	O
16	O
.	O
When	O
converting	O
to	O
a	O
byte	O
[	O
]	O
you	O
will	O
get	O
a	O
different	O
breakdown	O
of	O
bytes	O
for	O
the	O
given	O
glyphs	O
of	O
that	O
String	B-api_mention
,	O
depending	O
upon	O
the	O
chosen	O
charset	O
.	O
Question	O
-	O
28584669	O
Why	O
doesn	O
'	O
t	O
infinity	O
comparison	O
follow	O
the	O
logic	O
applied	O
to	O
NaNs	O
?	O
This	O
code	O
prints	O
out	O
false	O
three	O
times	O
:	O
#	O
pre	O
However	O
,	O
if	O
I	O
change	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
to	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
,	O
I	O
get	O
true	O
for	O
equality	O
,	O
but	O
false	O
for	O
the	O
greater	O
-	O
than	O
and	O
less	O
-	O
than	O
comparisons	O
:	O
#	O
pre	O
This	O
seems	O
dangerous	O
.	O
Assuming	O
that	O
infinite	O
values	O
result	O
from	O
overflows	O
,	O
I	O
imagine	O
it	O
'	O
s	O
more	O
likely	O
that	O
two	O
variables	O
that	O
ended	O
up	O
as	O
infinities	O
wouldn	O
'	O
t	O
actually	O
be	O
equal	O
in	O
perfect	O
arithmetic	O
.	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
30133063	O
Much	O
more	O
convenient	O
way	O
if	O
you	O
are	O
sure	O
you	O
need	O
a	O
default	O
timezone	O
:	O
Date	B-api_mention
d	O
=	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Timestamp	I-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
23932061	O
,	O
answer	O
-	O
23932216	O
You	O
can	O
easily	O
create	O
a	O
Stream	B-api_mention
out	O
of	O
an	O
Iterable	B-api_mention
or	O
Iterator	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
14809293	O
,	O
answer	O
-	O
14821488	O
The	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
has	O
already	O
been	O
mentioned	O
-	O
the	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
strangely	O
not	O
!	O
My	O
solution	O
would	O
also	O
be	O
to	O
use	O
the	O
list	O
from	O
the	O
outside	O
and	O
wrap	O
the	O
array	O
as	O
follows	O
:	O
#	O
pre	O
The	O
problem	O
with	O
copying	O
the	O
array	O
is	O
:	O
if	O
you	O
'	O
re	O
doing	O
it	O
every	O
time	O
you	O
access	O
the	O
code	O
and	O
the	O
array	O
is	O
big	O
,	O
you	O
'	O
ll	O
create	O
a	O
lot	O
of	O
work	O
for	O
the	O
garbage	O
collector	O
for	O
sure	O
.	O
So	O
the	O
copy	O
is	O
a	O
simple	O
but	O
really	O
bad	O
approach	O
-	O
I	O
'	O
d	O
say	O
"	O
cheap	O
"	O
,	O
but	O
memory	O
-	O
expensive	O
!	O
Especially	O
when	O
you	O
'	O
re	O
having	O
more	O
than	O
just	O
2	O
elements	O
.	O
If	O
you	O
look	O
at	O
the	O
source	O
code	O
of	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
and	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
there	O
is	O
actually	O
not	O
much	O
created	O
.	O
The	O
first	O
just	O
wraps	O
the	O
array	O
without	O
copying	O
it	O
,	O
the	O
second	O
just	O
wraps	O
the	O
list	O
,	O
making	O
changes	O
to	O
it	O
unavailable	O
.	O
Question	O
-	O
30727515	O
,	O
answer	O
-	O
30739477	O
Since	O
this	O
hasn	O
’	O
t	O
addressed	O
yet	O
,	O
here	O
an	O
explanation	O
,	O
why	O
the	O
translation	O
of	O
Unicode	O
escapes	O
happens	O
before	O
any	O
other	O
source	O
code	O
processing	O
:	O
The	O
idea	O
behind	O
it	O
was	O
that	O
it	O
allows	O
lossless	O
translations	O
of	O
Java	O
source	O
code	O
between	O
different	O
character	O
encodings	O
.	O
Today	O
,	O
there	O
is	O
widespread	O
Unicode	O
support	O
,	O
and	O
this	O
doesn	O
’	O
t	O
look	O
like	O
a	O
problem	O
,	O
but	O
back	O
then	O
it	O
wasn	O
’	O
t	O
easy	O
for	O
a	O
developer	O
from	O
a	O
western	O
country	O
to	O
receive	O
some	O
source	O
code	O
from	O
his	O
Asian	O
colleague	O
containing	O
Asian	O
characters	O
,	O
make	O
some	O
changes	O
(	O
including	O
compiling	O
and	O
testing	O
it	O
)	O
and	O
sending	O
the	O
result	O
back	O
,	O
all	O
without	O
damaging	O
something	O
.	O
So	O
,	O
Java	O
source	O
code	O
can	O
be	O
written	O
in	O
any	O
encoding	O
and	O
allows	O
a	O
wide	O
range	O
of	O
characters	O
within	O
identifiers	O
,	O
character	O
and	O
String	B-api_mention
literals	O
and	O
comments	O
.	O
Then	O
,	O
in	O
order	O
to	O
transfer	O
it	O
losslessly	O
,	O
all	O
characters	O
not	O
supported	O
by	O
the	O
target	O
encoding	O
are	O
replaced	O
by	O
their	O
Unicode	O
escapes	O
.	O
This	O
is	O
a	O
reversible	O
process	O
and	O
the	O
interesting	O
point	O
is	O
that	O
the	O
translation	O
can	O
be	O
done	O
by	O
a	O
tool	O
which	O
doesn	O
’	O
t	O
need	O
to	O
know	O
anything	O
about	O
the	O
Java	O
source	O
code	O
syntax	O
as	O
the	O
translation	O
rule	O
is	O
not	O
dependent	O
on	O
it	O
.	O
This	O
works	O
as	O
the	O
translation	O
to	O
their	O
actual	O
Unicode	O
characters	O
inside	O
the	O
compiler	O
happens	O
independently	O
to	O
the	O
Java	O
source	O
code	O
syntax	O
as	O
well	O
.	O
It	O
implies	O
that	O
you	O
can	O
perform	O
an	O
arbitrary	O
number	O
of	O
translation	O
steps	O
in	O
both	O
directions	O
without	O
ever	O
changing	O
the	O
meaning	O
of	O
the	O
source	O
code	O
.	O
This	O
is	O
the	O
reason	O
for	O
another	O
weird	O
feature	O
which	O
hasn	O
’	O
t	O
even	O
mentioned	O
:	O
the	O
\	O
uuuuuuxxxx	O
syntax	O
:	O
When	O
a	O
translation	O
tool	O
is	O
escaping	O
characters	O
and	O
encounters	O
a	O
sequence	O
that	O
is	O
already	O
an	O
escaped	O
sequence	O
,	O
it	O
should	O
insert	O
an	O
additional	O
u	O
into	O
the	O
sequence	O
,	O
converting	O
\	O
ucafe	O
to	O
\	O
uucafe	O
.	O
The	O
meaning	O
doesn	O
’	O
t	O
change	O
,	O
but	O
when	O
converting	O
into	O
the	O
other	O
direction	O
,	O
the	O
tool	O
should	O
just	O
remove	O
one	O
u	O
and	O
replace	O
only	O
sequences	O
containing	O
a	O
single	O
u	O
by	O
their	O
Unicode	O
characters	O
.	O
That	O
way	O
,	O
even	O
Unicode	O
escapes	O
are	O
retained	O
in	O
their	O
original	O
form	O
when	O
converting	O
back	O
and	O
forth	O
.	O
I	O
guess	O
,	O
no	O
-	O
one	O
ever	O
used	O
that	O
feature	O
…	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276463	O
If	O
all	O
of	O
the	O
streams	O
have	O
been	O
instantiated	O
then	O
closing	O
only	O
the	O
outermost	O
is	O
just	O
fine	O
.	O
The	O
documentation	O
on	O
Closeable	B-api_mention
interface	O
states	O
that	O
close	O
method	O
:	O
#	O
blockquote	O
The	O
releasing	O
system	O
resources	O
includes	O
closing	O
streams	O
.	O
It	O
also	O
states	O
that	O
:	O
#	O
blockquote	O
So	O
if	O
you	O
close	O
them	O
explicitly	O
afterwards	O
,	O
nothing	O
wrong	O
will	O
happen	O
.	O
Question	O
-	O
9510125	O
Swing	O
components	O
have	O
multiple	O
methods	O
related	O
to	O
updates	O
of	O
screen	O
layout	O
,	O
in	O
particular	O
:	O
#	O
li	O
validate	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
invalidate	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
revalidate	B-api_mention
(	I-api_mention
)	I-api_mention
The	O
Java	O
documentation	O
defines	O
these	O
somewhat	O
from	O
a	O
technical	O
perspective	O
,	O
but	O
it	O
'	O
s	O
not	O
particularly	O
clear	O
how	O
they	O
are	O
meant	O
to	O
be	O
used	O
.	O
What	O
is	O
the	O
difference	O
between	O
these	O
,	O
and	O
in	O
what	O
circumstances	O
should	O
you	O
use	O
one	O
rather	O
than	O
the	O
others	O
?	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28821352	O
It	O
'	O
s	O
not	O
pretty	O
,	O
but	O
this	O
will	O
work	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
fairly	O
handy	O
pattern	O
for	O
use	O
with	O
Optional	B-api_mention
.	O
It	O
means	O
"	O
If	O
this	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
give	O
me	O
func	O
(	O
args	O
)	O
,	O
otherwise	O
give	O
me	O
sup	O
.	B-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
"	O
.	O
In	O
this	O
case	O
,	O
we	O
call	O
serviceA	O
(	O
args	O
)	O
and	O
get	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
If	O
that	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
we	O
want	O
to	O
get	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
if	O
it	O
is	O
empty	O
,	O
we	O
want	O
to	O
get	O
serviceB	O
(	O
args	O
)	O
.	O
Rinse	O
-	O
repeat	O
with	O
more	O
alternatives	O
.	O
Other	O
uses	O
of	O
this	O
pattern	O
are	O
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
14316487	O
,	O
answer	O
-	O
14316543	O
A	O
very	O
simple	O
implementation	O
with	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
19416644	O
,	O
answer	O
-	O
19775881	O
Create	O
your	O
own	O
class	O
System	B-api_mention
in	O
tha	O
same	O
package	O
with	O
Condition	O
.	O
In	O
this	O
case	O
your	O
System	B-api_mention
class	O
will	O
hide	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
System	I-api_mention
class	O
#	O
pre	O
Ideone	O
DEMO	O
Question	O
-	O
16098046	O
,	O
answer	O
-	O
25307973	O
In	O
short	O
:	O
If	O
you	O
want	O
to	O
get	O
rid	O
of	O
trailing	O
zeros	O
and	O
Locale	B-api_mention
problems	O
,	O
then	O
you	O
should	O
use	O
:	O
#	O
pre	O
Explanation	O
:	O
Why	O
other	O
answers	O
did	O
not	O
suit	O
me	O
:	O
#	O
li	O
Double	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
or	O
FloatingDecimal	B-api_mention
.	I-api_mention
toJavaFormatString	I-api_mention
uses	O
scientific	O
notations	O
if	O
double	O
is	O
less	O
than	O
10	O
^	O
-	O
3	O
or	O
greater	O
than	O
or	O
equal	O
to	O
10	O
^	O
7	O
#	O
li	O
by	O
using	O
%	O
f	O
,	O
the	O
default	O
decimal	O
precision	O
is	O
6	O
,	O
otherwise	O
you	O
can	O
hardcode	O
it	O
but	O
it	O
results	O
in	O
extra	O
zeros	O
added	O
if	O
you	O
have	O
less	O
decimals	O
.	O
Example	O
:	O
#	O
pre	O
#	O
li	O
by	O
using	O
setMaximumFractionDigits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
%	O
.	O
0f	O
you	O
remove	O
any	O
decimal	O
precision	O
,	O
which	O
is	O
fine	O
for	O
integers	O
/	O
longs	O
but	O
not	O
for	O
double	O
#	O
pre	O
#	O
li	O
by	O
using	O
DecimalFormat	B-api_mention
,	O
you	O
are	O
local	O
dependent	O
.	O
In	O
French	O
locale	O
,	O
the	O
decimal	O
separator	O
is	O
a	O
comma	O
,	O
not	O
a	O
point	O
:	O
#	O
pre	O
Using	O
the	O
ENGLISH	O
locale	O
makes	O
sure	O
you	O
get	O
a	O
point	O
for	O
decimal	O
separator	O
,	O
wherever	O
your	O
program	O
will	O
run	O
Why	O
using	O
340	O
then	O
for	O
setMaximumFractionDigits	B-api_mention
?	O
Two	O
reasons	O
:	O
#	O
li	O
setMaximumFractionDigits	B-api_mention
accepts	O
an	O
integer	O
but	O
its	O
implementation	O
has	O
a	O
maximum	O
digits	O
allowed	O
of	O
DecimalFormat	B-api_mention
.	I-api_mention
DOUBLE	I-api_mention
_	I-api_mention
FRACTION	I-api_mention
_	I-api_mention
DIGITS	I-api_mention
which	O
equals	O
340	O
#	O
li	O
Double	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
=	O
4	O
.	O
9E	O
-	O
324	O
so	O
with	O
340	O
digits	O
you	O
are	O
sure	O
not	O
to	O
round	O
your	O
double	O
and	O
loose	O
precision	O
Question	O
-	O
24676877	O
,	O
answer	O
-	O
24679745	O
The	O
answer	O
is	O
,	O
as	O
always	O
,	O
"	O
it	O
depends	O
"	O
.	O
It	O
depends	O
on	O
how	O
big	O
the	O
returned	O
collection	O
will	O
be	O
.	O
It	O
depends	O
on	O
whether	O
the	O
result	O
changes	O
over	O
time	O
,	O
and	O
how	O
important	O
consistency	O
of	O
the	O
returned	O
result	O
is	O
.	O
And	O
it	O
depends	O
very	O
much	O
on	O
how	O
the	O
user	O
is	O
likely	O
to	O
use	O
the	O
answer	O
.	O
First	O
,	O
note	O
that	O
you	O
can	O
always	O
get	O
a	O
Collection	B-api_mention
from	O
a	O
Stream	B-api_mention
,	O
and	O
vice	O
versa	O
:	O
/	O
/	O
If	O
API	O
returns	O
Collection	B-api_mention
,	O
convert	O
with	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
getFoo	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
/	O
/	O
If	O
API	O
returns	O
Stream	B-api_mention
,	O
use	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Collection	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
c	O
=	O
getFooStream	O
(	O
args	O
)	O
.	B-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
the	O
question	O
is	O
,	O
which	O
is	O
more	O
useful	O
to	O
your	O
callers	O
.	O
If	O
your	O
result	O
might	O
be	O
infinite	O
,	O
there	O
'	O
s	O
only	O
one	O
choice	O
:	O
Stream	B-api_mention
.	O
If	O
your	O
result	O
might	O
be	O
very	O
large	O
,	O
you	O
probably	O
prefer	O
Stream	B-api_mention
,	O
since	O
there	O
may	O
not	O
be	O
any	O
value	O
in	O
materializing	O
it	O
all	O
at	O
once	O
,	O
and	O
doing	O
so	O
could	O
create	O
significant	O
heap	O
pressure	O
.	O
If	O
all	O
the	O
caller	O
is	O
going	O
to	O
do	O
is	O
iterate	O
through	O
it	O
(	O
search	O
,	O
filter	O
,	O
aggregate	O
)	O
,	O
you	O
should	O
prefer	O
Stream	B-api_mention
,	O
since	O
Stream	B-api_mention
has	O
these	O
built	O
-	O
in	O
already	O
and	O
there	O
'	O
s	O
no	O
need	O
to	O
materialize	O
a	O
collection	O
(	O
especially	O
if	O
the	O
user	O
might	O
not	O
process	O
the	O
whole	O
result	O
.	O
)	O
This	O
is	O
a	O
very	O
common	O
case	O
.	O
Even	O
if	O
you	O
know	O
that	O
the	O
user	O
will	O
iterate	O
it	O
multiple	O
times	O
or	O
otherwise	O
keep	O
it	O
around	O
,	O
you	O
still	O
may	O
want	O
to	O
return	O
a	O
Stream	B-api_mention
instead	O
,	O
for	O
the	O
simple	O
fact	O
that	O
whatever	O
Collection	B-api_mention
you	O
choose	O
to	O
put	O
it	O
in	O
(	O
e	O
.	O
g	O
.	O
,	O
ArrayList	B-api_mention
)	O
may	O
not	O
be	O
the	O
form	O
they	O
want	O
,	O
and	O
then	O
the	O
caller	O
has	O
to	O
copy	O
it	O
anyway	O
.	O
if	O
you	O
return	O
a	O
stream	O
,	O
they	O
can	O
do	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
get	O
it	O
in	O
exactly	O
the	O
form	O
they	O
want	O
.	O
The	O
above	O
"	O
prefer	O
Stream	O
"	O
cases	O
mostly	O
derive	O
from	O
the	O
fact	O
that	O
Stream	B-api_mention
is	O
more	O
flexible	O
;	O
you	O
can	O
late	O
-	O
bind	O
to	O
how	O
you	O
use	O
it	O
without	O
incurring	O
the	O
costs	O
and	O
constraints	O
of	O
materializing	O
it	O
to	O
a	O
Collection	B-api_mention
.	O
The	O
one	O
case	O
where	O
you	O
must	O
return	O
a	O
Collection	B-api_mention
is	O
when	O
there	O
are	O
strong	O
consistency	O
requirements	O
,	O
and	O
you	O
have	O
to	O
produce	O
a	O
consistent	O
snapshot	O
of	O
a	O
moving	O
target	O
.	O
Then	O
,	O
you	O
will	O
want	O
put	O
the	O
elements	O
into	O
a	O
collection	O
that	O
will	O
not	O
change	O
.	O
So	O
I	O
would	O
say	O
that	O
most	O
of	O
the	O
time	O
,	O
Stream	B-api_mention
is	O
the	O
right	O
answer	O
-	O
-	O
it	O
is	O
more	O
flexible	O
,	O
it	O
doesn	O
'	O
t	O
impose	O
usually	O
-	O
unnecessary	O
materialization	O
costs	O
,	O
and	O
can	O
be	O
easily	O
turned	O
into	O
the	O
Collection	B-api_mention
of	O
your	O
choice	O
if	O
needed	O
.	O
But	O
sometimes	O
,	O
you	O
may	O
have	O
to	O
return	O
a	O
Collection	B-api_mention
(	O
say	O
,	O
due	O
to	O
strong	O
consistency	O
requirements	O
)	O
,	O
or	O
you	O
may	O
want	O
to	O
return	O
Collection	B-api_mention
because	O
you	O
know	O
how	O
the	O
user	O
will	O
be	O
using	O
it	O
and	O
know	O
this	O
is	O
the	O
most	O
convenient	O
thing	O
for	O
them	O
.	O
Question	O
-	O
20363719	O
,	O
answer	O
-	O
34675066	O
I	O
was	O
trying	O
to	O
do	O
this	O
and	O
found	O
that	O
,	O
using	O
the	O
answers	O
above	O
,	O
when	O
using	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
key	O
to	O
the	O
Map	B-api_mention
,	O
then	O
I	O
had	O
issues	O
with	O
using	O
a	O
local	O
method	O
like	O
this	O
:	O
:	O
localMethodName	O
to	O
actually	O
work	O
because	O
of	O
typing	O
issues	O
.	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
actually	O
does	O
something	O
to	O
the	O
typing	O
in	O
this	O
case	O
so	O
the	O
method	O
would	O
only	O
work	O
by	O
returning	O
Object	B-api_mention
and	O
accepting	O
a	O
param	O
of	O
Object	B-api_mention
To	O
solve	O
this	O
,	O
I	O
ended	O
up	O
ditching	O
Functions	O
.	B-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
using	O
s	O
-	O
>	O
s	O
instead	O
.	O
So	O
my	O
code	O
,	O
in	O
my	O
case	O
to	O
list	O
all	O
directories	O
inside	O
a	O
directory	O
,	O
and	O
for	O
each	O
one	O
use	O
the	O
name	O
of	O
the	O
directory	O
as	O
the	O
key	O
to	O
the	O
map	O
and	O
then	O
call	O
a	O
method	O
with	O
the	O
directory	O
name	O
and	O
return	O
a	O
collection	O
of	O
items	O
,	O
looks	O
like	O
:	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
items	O
=	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
6416706	O
,	O
answer	O
-	O
6416788	O
As	O
soon	O
as	O
you	O
call	O
contains	B-api_mention
,	O
containsAll	B-api_mention
,	O
equals	B-api_mention
,	O
hashCode	B-api_mention
,	O
remove	B-api_mention
,	O
retainAll	B-api_mention
,	O
size	B-api_mention
or	O
toArray	B-api_mention
,	O
you	O
'	O
d	O
have	O
to	O
traverse	O
the	O
elements	O
anyway	O
.	O
If	O
you	O
'	O
re	O
occasionally	O
only	O
calling	O
methods	O
such	O
as	O
isEmpty	B-api_mention
or	O
clear	O
I	O
suppose	O
you	O
'	O
d	O
be	O
better	O
of	O
by	O
creating	O
the	O
collection	O
lazily	O
.	O
You	O
could	O
for	O
instance	O
have	O
a	O
backing	O
ArrayList	B-api_mention
for	O
storing	O
previously	O
iterated	O
elements	O
.	O
I	O
don	O
'	O
t	O
know	O
of	O
any	O
such	O
class	O
in	O
any	O
library	O
,	O
but	O
it	O
should	O
be	O
a	O
fairly	O
simple	O
exercise	O
to	O
write	O
up	O
.	O
Question	O
-	O
22740464	O
,	O
answer	O
-	O
22741520	O
Unfortunately	O
this	O
answer	O
is	O
probably	O
of	O
little	O
or	O
no	O
help	O
whatsoever	O
,	O
but	O
I	O
did	O
a	O
forensics	O
analysis	O
of	O
the	O
Java	O
Lambda	B-api_mention
Mailing	O
list	O
to	O
see	O
if	O
I	O
could	O
find	O
the	O
cause	O
of	O
this	O
design	O
.	O
This	O
is	O
what	O
I	O
found	O
out	O
.	O
In	O
the	O
beginning	O
there	O
was	O
an	O
instance	O
method	O
for	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
Stream	I-api_mention
)	I-api_mention
In	O
the	O
mailing	O
list	O
I	O
can	O
clearly	O
see	O
the	O
method	O
was	O
originally	O
implemented	O
as	O
an	O
instance	O
method	O
,	O
as	O
you	O
can	O
read	O
in	O
this	O
thread	O
by	O
Paul	O
Sandoz	O
,	O
about	O
the	O
concat	B-api_mention
operation	O
.	O
In	O
it	O
they	O
discuss	O
the	O
issues	O
that	O
could	O
arise	O
from	O
those	O
cases	O
in	O
which	O
the	O
stream	O
could	O
be	O
infinite	O
and	O
what	O
concatenation	O
would	O
mean	O
in	O
those	O
cases	O
,	O
but	O
I	O
do	O
not	O
think	O
that	O
was	O
the	O
reason	O
for	O
the	O
modification	O
.	O
You	O
see	O
in	O
this	O
other	O
thread	O
that	O
some	O
early	O
users	O
of	O
the	O
JDK	O
8	O
questioned	O
about	O
the	O
behavior	O
of	O
the	O
concat	O
instance	O
method	O
when	O
used	O
with	O
null	O
arguments	O
.	O
This	O
other	O
thread	O
reveals	O
,	O
though	O
,	O
that	O
the	O
design	O
of	O
the	O
concat	O
method	O
was	O
under	O
discussion	O
.	O
Refactored	O
to	O
Streams	B-api_mention
.	I-api_mention
concat	I-api_mention
(	O
Stream	B-api_mention
,	O
Stream	B-api_mention
)	O
But	O
without	O
any	O
explanation	O
,	O
suddenly	O
,	O
the	O
methods	O
were	O
changed	O
to	O
static	O
methods	O
,	O
as	O
you	O
can	O
see	O
in	O
this	O
thread	O
about	O
combining	O
streams	O
.	O
This	O
is	O
perhaps	O
the	O
only	O
mail	O
thread	O
that	O
sheds	O
a	O
bit	O
of	O
light	O
about	O
this	O
change	O
,	O
but	O
it	O
was	O
not	O
clear	O
enough	O
for	O
me	O
to	O
determine	O
the	O
reason	O
for	O
the	O
refactoring	O
.	O
But	O
we	O
can	O
see	O
they	O
did	O
a	O
commit	O
in	O
which	O
they	O
suggested	O
to	O
move	O
the	O
concat	O
method	O
out	O
of	O
Stream	B-api_mention
and	O
into	O
the	O
helper	O
class	O
Streams	B-api_mention
.	O
Refactored	O
to	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	O
Stream	B-api_mention
,	O
Stream	B-api_mention
)	O
Later	O
,	O
it	O
was	O
moved	O
again	O
from	O
Streams	B-api_mention
to	O
Stream	B-api_mention
,	O
but	O
yet	O
again	O
,	O
no	O
explanation	O
for	O
that	O
.	O
So	O
,	O
bottom	O
line	O
,	O
the	O
reason	O
for	O
the	O
design	O
is	O
not	O
entirely	O
clear	O
for	O
me	O
and	O
I	O
could	O
not	O
find	O
a	O
good	O
explanation	O
.	O
I	O
guess	O
you	O
could	O
still	O
ask	O
the	O
question	O
in	O
the	O
mailing	O
list	O
.	O
Some	O
Alternatives	O
for	O
Stream	B-api_mention
Concatenation	O
This	O
other	O
thread	O
by	O
Michael	O
Hixson	O
discusses	O
/	O
asks	O
about	O
other	O
ways	O
to	O
combine	O
/	O
concat	O
streams	O
#	O
blockquote	O
Question	O
-	O
5554217	O
,	O
answer	O
-	O
17300003	O
Another	O
way	O
is	O
to	O
use	O
an	O
array	O
as	O
a	O
type	O
,	O
e	O
.	O
g	O
.	O
:	O
MyClass	O
[	O
]	O
mcArray	O
=	O
gson	O
.	B-api_mention
fromJson	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
way	O
you	O
avoid	O
all	O
the	O
hassle	O
with	O
the	O
Type	B-api_mention
object	O
,	O
and	O
if	O
you	O
really	O
need	O
a	O
list	O
you	O
can	O
always	O
convert	O
the	O
array	O
to	O
a	O
list	O
by	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
mcList	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
IMHO	O
this	O
is	O
much	O
more	O
readable	O
.	O
And	O
to	O
make	O
it	O
be	O
an	O
actual	O
list	O
(	O
that	O
can	O
be	O
modified	O
,	O
see	O
limitations	O
of	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
then	O
just	O
do	O
the	O
following	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
mcList	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
17828584	O
I	O
was	O
wondering	O
what	O
happens	O
when	O
you	O
try	O
to	O
catch	O
an	O
StackOverflowError	B-api_mention
and	O
came	O
up	O
with	O
the	O
following	O
method	O
:	O
#	O
pre	O
Now	O
my	O
question	O
:	O
Why	O
does	O
this	O
method	O
print	O
'	O
4	O
'	O
?	O
I	O
thought	O
maybe	O
it	O
was	O
because	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
needs	O
3	O
segments	O
on	O
the	O
call	O
stack	O
,	O
but	O
I	O
don	O
'	O
t	O
know	O
where	O
the	O
number	O
3	O
comes	O
from	O
.	O
When	O
you	O
look	O
at	O
the	O
source	O
code	O
(	O
and	O
bytecode	O
)	O
of	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
it	O
normally	O
would	O
lead	O
to	O
far	O
more	O
method	O
invocations	O
than	O
3	O
(	O
so	O
3	O
segments	O
on	O
the	O
call	O
stack	O
would	O
not	O
be	O
sufficient	O
)	O
.	O
If	O
it	O
'	O
s	O
because	O
of	O
optimizations	O
the	O
Hotspot	O
VM	O
applies	O
(	O
method	O
inlining	O
)	O
,	O
I	O
wonder	O
if	O
the	O
result	O
would	O
be	O
different	O
on	O
another	O
VM	O
.	O
Edit	O
:	O
As	O
the	O
output	O
seems	O
to	O
be	O
highly	O
JVM	O
specific	O
,	O
I	O
get	O
the	O
result	O
4	O
using	O
Java	O
(	O
TM	O
)	O
SE	O
Runtime	O
Environment	O
(	O
build	O
1	O
.	O
6	O
.	O
0	O
_	O
41	O
-	O
b02	O
)	O
Java	O
HotSpot	O
(	O
TM	O
)	O
64	O
-	O
Bit	O
Server	O
VM	O
(	O
build	O
20	O
.	O
14	O
-	O
b01	O
,	O
mixed	O
mode	O
)	O
Explanation	O
why	O
I	O
think	O
this	O
question	O
is	O
different	O
from	O
Understanding	O
java	O
stack	O
:	O
My	O
question	O
is	O
not	O
about	O
why	O
there	O
is	O
a	O
cnt	O
>	O
0	O
(	O
obviously	O
because	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
requires	O
stack	O
size	O
and	O
throws	O
another	O
StackOverflowError	B-api_mention
before	O
something	O
gets	O
printed	O
)	O
,	O
but	O
why	O
it	O
has	O
the	O
particular	O
value	O
of	O
4	O
,	O
respectively	O
0	O
,	O
3	O
,	O
8	O
,	O
55	O
or	O
something	O
else	O
on	O
other	O
systems	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
20177092	O
The	O
better	O
practice	O
is	O
to	O
use	O
for	O
-	O
each	O
.	O
Besides	O
violating	O
the	O
Keep	O
It	O
Simple	O
,	O
Stupid	O
principle	O
,	O
the	O
new	O
-	O
fangled	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
at	O
least	O
the	O
following	O
deficiencies	O
:	O
#	O
li	O
Can	O
'	O
t	O
use	O
non	O
-	O
final	O
variables	O
.	O
So	O
,	O
code	O
like	O
the	O
following	O
can	O
'	O
t	O
be	O
turned	O
into	O
a	O
forEach	B-api_mention
lambda	O
:	O
#	O
blockquote	O
#	O
li	O
Can	O
'	O
t	O
handle	O
checked	O
exceptions	O
.	O
Lambdas	B-api_mention
aren	O
'	O
t	O
actually	O
forbidden	O
from	O
throwing	O
checked	O
exceptions	O
,	O
but	O
common	O
functional	O
interfaces	O
like	O
Consumer	B-api_mention
don	O
'	O
t	O
declare	O
any	O
.	O
Therefore	O
,	O
any	O
code	O
that	O
throws	O
checked	O
exceptions	O
must	O
wrap	O
them	O
in	O
try	O
-	O
catch	O
or	O
Throwables	B-api_mention
.	I-api_mention
propagate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
even	O
if	O
you	O
do	O
that	O
,	O
it	O
'	O
s	O
not	O
always	O
clear	O
what	O
happens	O
to	O
the	O
thrown	O
exception	O
.	O
It	O
could	O
get	O
swallowed	O
somewhere	O
in	O
the	O
guts	O
of	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
Limited	O
flow	O
-	O
control	O
.	O
A	O
return	O
in	O
a	O
lambda	O
equals	O
a	O
continue	O
in	O
a	O
for	O
-	O
each	O
,	O
but	O
there	O
is	O
no	O
equivalent	O
to	O
a	O
break	O
.	O
It	O
'	O
s	O
also	O
difficult	O
to	O
do	O
things	O
like	O
return	O
values	O
,	O
short	O
circuit	O
,	O
or	O
set	O
flags	O
(	O
which	O
would	O
have	O
alleviated	O
things	O
a	O
bit	O
,	O
if	O
it	O
wasn	O
'	O
t	O
a	O
violation	O
of	O
the	O
no	O
non	O
-	O
final	O
variables	O
rule	O
)	O
.	O
"	O
This	O
is	O
not	O
just	O
an	O
optimization	O
,	O
but	O
critical	O
when	O
you	O
consider	O
that	O
some	O
sequences	O
(	O
like	O
reading	O
the	O
lines	O
in	O
a	O
file	O
)	O
may	O
have	O
side	O
-	O
effects	O
,	O
or	O
you	O
may	O
have	O
an	O
infinite	O
sequence	O
.	O
"	O
#	O
li	O
Might	O
execute	O
in	O
parallel	O
,	O
which	O
is	O
a	O
horrible	O
,	O
horrible	O
thing	O
for	O
all	O
but	O
the	O
0	O
.	O
1	O
%	O
of	O
your	O
code	O
that	O
needs	O
to	O
be	O
optimized	O
.	O
Any	O
parallel	O
code	O
has	O
to	O
be	O
thought	O
through	O
(	O
even	O
if	O
it	O
doesn	O
'	O
t	O
use	O
locks	O
,	O
volatiles	O
,	O
and	O
other	O
particularly	O
nasty	O
aspects	O
of	O
traditional	O
multi	O
-	O
threaded	O
execution	O
)	O
.	O
Any	O
bug	O
will	O
be	O
tough	O
to	O
find	O
.	O
#	O
li	O
Might	O
hurt	O
performance	O
,	O
because	O
the	O
JIT	O
can	O
'	O
t	O
optimize	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
+	O
lambda	O
to	O
the	O
same	O
extent	O
as	O
plain	O
loops	O
,	O
especially	O
now	O
that	O
lambdas	O
are	O
new	O
.	O
By	O
"	O
optimization	O
"	O
I	O
do	O
not	O
mean	O
the	O
overhead	O
of	O
calling	O
lambdas	O
(	O
which	O
is	O
small	O
)	O
,	O
but	O
to	O
the	O
sophisticated	O
analysis	O
and	O
transformation	O
that	O
the	O
modern	O
JIT	O
compiler	O
performs	O
on	O
running	O
code	O
.	O
#	O
li	O
If	O
you	O
do	O
need	O
parallelism	O
,	O
it	O
is	O
probably	O
much	O
faster	O
and	O
not	O
much	O
more	O
difficult	O
to	O
use	O
an	O
ExecutorService	B-api_mention
.	O
Streams	B-api_mention
are	O
both	O
automagical	O
(	O
read	O
:	O
don	O
'	O
t	O
know	O
much	O
about	O
your	O
problem	O
)	O
and	O
use	O
a	O
specialized	O
(	O
read	O
:	O
inefficient	O
for	O
the	O
general	O
case	O
)	O
parallelization	O
strategy	O
(	O
fork	O
-	O
join	O
recursive	O
decomposition	O
)	O
.	O
#	O
li	O
Makes	O
debugging	O
more	O
confusing	O
,	O
because	O
of	O
the	O
nested	O
call	O
hierarchy	O
and	O
,	O
god	O
forbid	O
,	O
parallel	O
execution	O
.	O
The	O
debugger	O
may	O
have	O
issues	O
displaying	O
variables	O
from	O
the	O
surrounding	O
code	O
,	O
and	O
things	O
like	O
step	O
-	O
through	O
may	O
not	O
work	O
as	O
expected	O
.	O
#	O
li	O
Streams	B-api_mention
in	O
general	O
are	O
more	O
difficult	O
to	O
code	O
,	O
read	O
,	O
and	O
debug	O
.	O
Actually	O
,	O
this	O
is	O
true	O
of	O
complex	O
"	O
fluent	O
"	O
APIs	O
in	O
general	O
.	O
The	O
combination	O
of	O
complex	O
single	O
statements	O
,	O
heavy	O
use	O
of	O
generics	O
,	O
and	O
lack	O
of	O
intermediate	O
variables	O
conspire	O
to	O
produce	O
confusing	O
error	O
messages	O
and	O
frustrate	O
debugging	O
.	O
Instead	O
of	O
"	O
this	O
method	O
doesn	O
'	O
t	O
have	O
an	O
overload	O
for	O
type	O
X	O
"	O
you	O
get	O
an	O
error	O
message	O
closer	O
to	O
"	O
somewhere	O
you	O
messed	O
up	O
the	O
types	O
,	O
but	O
we	O
don	O
'	O
t	O
know	O
where	O
or	O
how	O
.	O
"	O
Similarly	O
,	O
you	O
can	O
'	O
t	O
step	O
through	O
and	O
examine	O
things	O
in	O
a	O
debugger	O
as	O
easily	O
as	O
when	O
the	O
code	O
is	O
broken	O
into	O
multiple	O
statements	O
,	O
and	O
intermediate	O
values	O
are	O
saved	O
to	O
variables	O
.	O
Finally	O
,	O
reading	O
the	O
code	O
and	O
understanding	O
the	O
types	O
and	O
behavior	O
at	O
each	O
stage	O
of	O
execution	O
may	O
be	O
non	O
-	O
trivial	O
.	O
#	O
li	O
Sticks	O
out	O
like	O
a	O
sore	O
thumb	O
.	O
The	O
Java	O
language	O
already	O
has	O
the	O
for	O
-	O
each	O
statement	O
.	O
Why	O
replace	O
it	O
with	O
a	O
function	O
call	O
?	O
Why	O
encourage	O
hiding	O
side	O
-	O
effects	O
somewhere	O
in	O
expressions	O
?	O
Why	O
encourage	O
unwieldy	O
one	O
-	O
liners	O
?	O
Mixing	O
regular	O
for	O
-	O
each	O
and	O
new	O
forEach	B-api_mention
willy	O
-	O
nilly	O
is	O
bad	O
style	O
.	O
Code	O
should	O
speak	O
in	O
idioms	O
(	O
patterns	O
that	O
are	O
quick	O
to	O
comprehend	O
due	O
to	O
their	O
repetition	O
)	O
,	O
and	O
the	O
fewer	O
idioms	O
are	O
used	O
the	O
clearer	O
the	O
code	O
is	O
and	O
less	O
time	O
is	O
spent	O
deciding	O
which	O
idiom	O
to	O
use	O
(	O
a	O
big	O
time	O
-	O
drain	O
for	O
perfectionists	O
like	O
myself	O
!	O
)	O
.	O
As	O
you	O
can	O
see	O
,	O
I	O
'	O
m	O
not	O
a	O
big	O
fan	O
of	O
the	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
except	O
in	O
cases	O
when	O
it	O
makes	O
sense	O
.	O
Particularly	O
offensive	O
to	O
me	O
is	O
the	O
fact	O
that	O
Stream	B-api_mention
does	O
not	O
implement	O
Iterable	B-api_mention
(	O
despite	O
actually	O
having	O
method	O
iterator	O
)	O
and	O
cannot	O
be	O
used	O
in	O
a	O
for	O
-	O
each	O
,	O
only	O
with	O
a	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
.	O
I	O
recommend	O
casting	O
Streams	B-api_mention
into	O
Iterables	B-api_mention
with	O
(	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
stream	O
:	O
:	O
iterator	O
.	O
A	O
better	O
alternative	O
is	O
to	O
use	O
StreamEx	O
which	O
fixes	O
a	O
number	O
of	O
Stream	B-api_mention
API	O
problems	O
,	O
including	O
implementing	O
Iterable	B-api_mention
.	O
That	O
said	O
,	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
useful	O
for	O
the	O
following	O
:	O
#	O
li	O
Atomically	O
iterating	O
over	O
a	O
synchronized	O
list	O
.	O
Prior	O
to	O
this	O
,	O
a	O
list	O
generated	O
with	O
Collections	B-api_mention
.	I-api_mention
synchronizedList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
atomic	O
with	O
respect	O
to	O
things	O
like	O
get	O
or	O
set	O
,	O
but	O
was	O
not	O
thread	O
-	O
safe	O
when	O
iterating	O
.	O
#	O
li	O
Parallel	O
execution	O
(	O
using	O
an	O
appropriate	O
parallel	O
stream	O
)	O
.	O
This	O
saves	O
you	O
a	O
few	O
lines	O
of	O
code	O
vs	O
using	O
an	O
ExecutorService	B-api_mention
,	O
if	O
your	O
problem	O
matches	O
the	O
performance	O
assumptions	O
built	O
into	O
Streams	B-api_mention
and	O
Spliterators	B-api_mention
.	O
#	O
li	O
Specific	O
containers	O
which	O
,	O
like	O
the	O
synchronized	O
list	O
,	O
benefit	O
from	O
being	O
in	O
control	O
of	O
iteration	O
(	O
although	O
this	O
is	O
largely	O
theoretical	O
unless	O
people	O
can	O
bring	O
up	O
more	O
examples	O
)	O
#	O
li	O
Calling	O
a	O
single	O
function	O
more	O
cleanly	O
by	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
a	O
method	O
reference	O
argument	O
(	O
ie	O
,	O
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
However	O
,	O
keep	O
in	O
mind	O
the	O
points	O
on	O
checked	O
exceptions	O
,	O
more	O
difficult	O
debugging	O
,	O
and	O
reducing	O
the	O
number	O
of	O
idioms	O
you	O
use	O
when	O
writing	O
code	O
.	O
Articles	O
I	O
used	O
for	O
reference	O
:	O
#	O
li	O
Everything	O
about	O
Java	O
8	O
#	O
li	O
Iteration	O
Inside	O
and	O
Out	O
(	O
as	O
pointed	O
out	O
by	O
another	O
poster	O
)	O
EDIT	O
:	O
Looks	O
like	O
some	O
of	O
the	O
original	O
proposals	O
for	O
lambdas	O
(	O
such	O
as	O
#	O
a	O
)	O
solved	O
some	O
of	O
the	O
issues	O
I	O
mentioned	O
(	O
while	O
adding	O
their	O
own	O
complications	O
,	O
of	O
course	O
)	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846960	O
From	O
Effective	O
Java	O
,	O
Item	O
#	O
43	O
-	O
StringLiteral	O
demonstrates	O
returning	O
an	O
empty	O
collection	O
and	O
perhaps	O
even	O
demonstrates	O
using	O
these	O
emptyList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
emptySet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
emptyMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
the	O
Collections	B-api_mention
class	O
to	O
get	O
an	O
empty	O
collection	O
that	O
also	O
has	O
the	O
additional	O
benefit	O
of	O
being	O
immutable	O
.	O
From	O
Item	O
#	O
15	O
StringLiteral	O
.	O
From	O
Collections	B-api_mention
-	O
emptySet	B-api_mention
-	O
Collections	B-api_mention
-	O
emptyList	B-api_mention
-	O
Collections	B-api_mention
#	O
blockquote	O
Note	O
:	O
Below	O
code	O
is	O
just	O
an	O
example	O
(	O
change	O
it	O
according	O
to	O
your	O
use	O
case	O
)	O
:	O
#	O
pre	O
These	O
methods	O
offer	O
a	O
couple	O
of	O
advantages	O
:	O
#	O
li	O
They	O
'	O
re	O
more	O
concise	O
because	O
you	O
don	O
'	O
t	O
need	O
to	O
explicitly	O
type	O
out	O
the	O
generic	O
type	O
of	O
the	O
collection	O
-	O
it	O
'	O
s	O
generally	O
just	O
inferred	O
from	O
the	O
context	O
of	O
the	O
method	O
call	O
.	O
#	O
li	O
They	O
'	O
re	O
more	O
efficient	O
because	O
they	O
don	O
'	O
t	O
bother	O
creating	O
new	O
objects	O
;	O
they	O
just	O
re	O
-	O
use	O
an	O
existing	O
empty	O
and	O
immutable	O
object	O
.	O
This	O
effect	O
is	O
generally	O
very	O
minor	O
,	O
but	O
it	O
'	O
s	O
occasionally	O
(	O
well	O
,	O
rarely	O
)	O
important	O
.	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673375	O
You	O
should	O
be	O
able	O
to	O
write	O
the	O
file	O
on	O
the	O
response	O
directly	O
.	O
Something	O
like	O
#	O
pre	O
and	O
then	O
write	O
the	O
file	O
as	O
a	O
binary	O
stream	O
on	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Remember	O
to	O
do	O
response	O
.	B-api_mention
flush	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
at	O
the	O
end	O
and	O
that	O
should	O
do	O
it	O
.	O
Question	O
-	O
29095967	O
I	O
have	O
this	O
list	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
:	O
[	O
StringLiteral	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
StringLiteral	O
]	O
And	O
I	O
'	O
d	O
like	O
something	O
like	O
this	O
:	O
[	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
]	O
In	O
other	O
words	O
I	O
want	O
to	O
split	O
my	O
list	O
in	O
sublists	O
using	O
the	O
null	O
value	O
as	O
separator	O
,	O
in	O
order	O
to	O
obtain	O
a	O
list	O
of	O
lists	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
.	O
I	O
'	O
m	O
looking	O
for	O
a	O
Java	O
8	O
solution	O
.	O
I	O
'	O
ve	O
tried	O
with	O
Collectors	B-api_mention
.	I-api_mention
partitioningBy	I-api_mention
but	O
I	O
'	O
m	O
not	O
sure	O
it	O
is	O
what	O
I	O
'	O
m	O
looking	O
for	O
.	O
Thanks	O
!	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923015	O
I	O
believe	O
the	O
reson	O
of	O
being	O
is	O
you	O
have	O
to	O
first	O
check	O
whether	O
or	O
not	O
Optional	B-api_mention
is	O
null	O
itself	O
and	O
then	O
try	O
to	O
evaluate	O
value	O
it	O
wraps	O
.	O
Too	O
many	O
unnecessary	O
validations	O
.	O
Question	O
-	O
8894258	O
In	O
Java	O
,	O
what	O
would	O
the	O
fastest	O
way	O
to	O
iterate	O
over	O
all	O
the	O
chars	O
in	O
a	O
String	B-api_mention
,	O
this	O
:	O
#	O
pre	O
Or	O
this	O
:	O
#	O
pre	O
EDIT	O
:	O
What	O
I	O
'	O
d	O
like	O
to	O
know	O
is	O
if	O
the	O
cost	O
of	O
repeatedly	O
calling	O
the	O
charAt	B-api_mention
method	O
during	O
a	O
long	O
iteration	O
ends	O
up	O
being	O
either	O
less	O
than	O
or	O
greater	O
than	O
the	O
cost	O
of	O
performing	O
a	O
single	O
call	O
to	O
toCharArray	B-api_mention
at	O
the	O
beginning	O
and	O
then	O
directly	O
accessing	O
the	O
array	O
during	O
the	O
iteration	O
.	O
It	O
'	O
d	O
be	O
great	O
if	O
someone	O
could	O
provide	O
a	O
robust	O
benchmark	O
for	O
different	O
string	O
lengths	O
,	O
having	O
in	O
mind	O
JIT	O
warm	O
-	O
up	O
time	O
,	O
JVM	O
start	O
-	O
up	O
time	O
,	O
etc	O
.	O
and	O
not	O
just	O
the	O
difference	O
between	O
two	O
calls	O
to	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888452	O
Alternative	O
to	O
@	O
sol4me	O
'	O
s	O
solution	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Of	O
the	O
difference	O
between	O
this	O
and	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
it	O
does	O
make	O
a	O
difference	O
if	O
your	O
array	O
is	O
of	O
a	O
primitive	O
type	O
.	O
For	O
instance	O
,	O
if	O
you	O
do	O
:	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
where	O
someArray	O
is	O
a	O
long	O
[	O
]	O
,	O
it	O
will	O
return	O
a	O
LongStream	B-api_mention
.	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
on	O
the	O
other	O
hand	O
,	O
will	O
return	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
with	O
a	O
single	O
element	O
.	O
Question	O
-	O
11821801	O
,	O
answer	O
-	O
11821900	O
A	O
ReentrantLock	B-api_mention
is	O
unstructured	O
,	O
unlike	O
synchronized	O
constructs	O
-	O
-	O
i	O
.	O
e	O
.	O
you	O
don	O
'	O
t	O
need	O
to	O
use	O
a	O
block	O
structure	O
for	O
locking	O
and	O
can	O
even	O
hold	O
a	O
lock	O
across	O
methods	O
.	O
An	O
example	O
:	O
#	O
pre	O
Such	O
flow	O
is	O
impossible	O
to	O
represent	O
via	O
a	O
single	O
monitor	O
in	O
a	O
synchronized	B-api_mention
construct	O
.	O
Aside	O
from	O
that	O
,	O
ReentrantLock	B-api_mention
supports	O
lock	O
polling	O
and	O
interruptible	O
lock	O
waits	O
that	O
support	O
time	O
-	O
out	O
.	O
ReentrantLock	B-api_mention
also	O
has	O
support	O
for	O
configurable	O
fairness	O
policy	O
,	O
allowing	O
more	O
flexible	O
thread	O
scheduling	O
.	O
#	O
blockquote	O
ReentrantLock	B-api_mention
may	O
also	O
be	O
more	O
scalable	O
,	O
performing	O
much	O
better	O
under	O
higher	O
contention	O
.	O
You	O
can	O
read	O
more	O
about	O
this	O
here	O
.	O
This	O
claim	O
has	O
been	O
contested	O
,	O
however	O
;	O
see	O
the	O
following	O
comment	O
:	O
#	O
blockquote	O
When	O
should	O
you	O
use	O
ReentrantLock	B-api_mention
s	O
?	O
According	O
to	O
that	O
developerWorks	O
article	O
.	O
.	O
.	O
#	O
blockquote	O
Question	O
-	O
13744450	O
,	O
answer	O
-	O
13744816	O
In	O
very	O
simple	O
terms	O
(	O
because	O
the	O
other	O
answers	O
are	O
referring	O
you	O
to	O
all	O
the	O
official	O
design	O
patterns	O
anyway	O
,	O
so	O
look	O
at	O
them	O
for	O
further	O
details	O
)	O
:	O
If	O
you	O
want	O
to	O
have	O
a	O
class	O
which	O
is	O
monitored	O
by	O
other	O
classes	O
in	O
the	O
ecosystem	O
of	O
your	O
program	O
you	O
say	O
that	O
you	O
want	O
the	O
class	O
to	O
be	O
observable	O
.	O
I	O
.	O
e	O
.	O
there	O
might	O
be	O
some	O
changes	O
in	O
its	O
state	O
which	O
you	O
would	O
want	O
to	O
broadcast	O
to	O
the	O
rest	O
of	O
the	O
program	O
.	O
Now	O
,	O
to	O
do	O
this	O
we	O
have	O
to	O
call	O
some	O
kind	O
of	O
method	O
.	O
We	O
don	O
'	O
t	O
want	O
the	O
Observable	B-api_mention
class	O
to	O
be	O
tightly	O
coupled	O
with	O
the	O
classes	O
that	O
are	O
interested	O
in	O
observing	O
it	O
.	O
It	O
doesn	O
'	O
t	O
care	O
who	O
it	O
is	O
as	O
long	O
as	O
it	O
fulfils	O
certain	O
criteria	O
.	O
(	O
Imagine	O
it	O
is	O
a	O
radio	O
station	O
,	O
it	O
doesn	O
'	O
t	O
care	O
who	O
is	O
listening	O
as	O
long	O
as	O
they	O
have	O
an	O
FM	O
radio	O
tuned	O
on	O
their	O
frequency	O
)	O
.	O
To	O
achieve	O
that	O
we	O
use	O
an	O
interface	O
,	O
referred	O
to	O
as	O
the	O
Observer	B-api_mention
.	O
Therefore	O
,	O
the	O
Observable	B-api_mention
class	O
will	O
have	O
a	O
list	O
of	O
Observers	B-api_mention
(	O
i	O
.	O
e	O
.	O
instances	O
implementing	O
the	O
Observer	B-api_mention
interface	O
methods	O
you	O
might	O
have	O
)	O
.	O
Whenever	O
it	O
wants	O
to	O
broadcast	O
something	O
,	O
it	O
just	O
calls	O
the	O
method	O
on	O
all	O
the	O
observers	O
,	O
one	O
after	O
the	O
other	O
.	O
The	O
last	O
thing	O
to	O
close	O
the	O
puzzle	O
is	O
how	O
will	O
the	O
Observable	B-api_mention
class	O
know	O
who	O
is	O
interested	O
?	O
So	O
the	O
Observable	B-api_mention
class	O
must	O
offer	O
some	O
mechanism	O
to	O
allow	O
Observers	B-api_mention
to	O
register	O
their	O
interest	O
.	O
A	O
method	O
such	O
as	O
addObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
internally	O
adds	O
the	O
Observer	B-api_mention
to	O
the	O
list	O
of	O
observers	O
,	O
so	O
that	O
when	O
something	O
important	O
happens	O
,	O
it	O
loops	O
through	O
the	O
list	O
and	O
calls	O
the	O
respective	O
notification	O
method	O
of	O
the	O
Observer	B-api_mention
interface	O
of	O
each	O
instance	O
in	O
the	O
list	O
.	O
It	O
might	O
be	O
that	O
in	O
the	O
interview	O
they	O
did	O
not	O
ask	O
you	O
explicitly	O
about	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observer	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observable	I-api_mention
but	O
about	O
the	O
generic	O
concept	O
.	O
The	O
concept	O
is	O
a	O
design	O
pattern	O
,	O
which	O
Java	O
happens	O
to	O
provide	O
support	O
for	O
directly	O
out	O
of	O
the	O
box	O
to	O
help	O
you	O
implement	O
it	O
quickly	O
when	O
you	O
need	O
it	O
.	O
So	O
I	O
would	O
suggest	O
that	O
you	O
understand	O
the	O
concept	O
rather	O
than	O
the	O
actual	O
methods	O
/	O
classes	O
(	O
which	O
you	O
can	O
look	O
up	O
when	O
you	O
need	O
them	O
)	O
.	O
UPDATE	O
In	O
response	O
to	O
your	O
comment	O
,	O
the	O
actual	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observable	I-api_mention
class	O
offers	O
the	O
following	O
facilities	O
:	O
#	O
li	O
Maintaining	O
a	O
list	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observer	I-api_mention
instances	O
.	O
New	O
instances	O
interested	O
in	O
being	O
notified	O
can	O
be	O
added	O
through	O
addObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
removed	O
through	O
deleteObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Maintaining	O
an	O
internal	O
state	O
,	O
specifying	O
whether	O
the	O
object	O
has	O
changed	O
since	O
the	O
last	O
notification	O
to	O
the	O
observers	O
.	O
This	O
is	O
useful	O
because	O
it	O
separates	O
the	O
part	O
where	O
you	O
say	O
that	O
the	O
Observable	B-api_mention
has	O
changed	O
,	O
from	O
the	O
part	O
where	O
you	O
notify	O
the	O
changes	O
.	O
(	O
E	O
.	O
g	O
.	O
Its	O
useful	O
if	O
you	O
have	O
multiple	O
changes	O
happening	O
and	O
you	O
only	O
want	O
to	O
notify	O
at	O
the	O
end	O
of	O
the	O
process	O
rather	O
than	O
at	O
each	O
small	O
step	O
)	O
.	O
This	O
is	O
done	O
through	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
So	O
you	O
just	O
call	O
it	O
when	O
you	O
changed	O
something	O
to	O
the	O
Observable	B-api_mention
and	O
you	O
want	O
the	O
rest	O
of	O
the	O
Observers	B-api_mention
to	O
eventually	O
know	O
about	O
it	O
.	O
#	O
li	O
Notifying	O
all	O
observers	O
that	O
the	O
specific	O
Observable	B-api_mention
has	O
changed	O
state	O
.	O
This	O
is	O
done	O
through	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
checks	O
if	O
the	O
object	O
has	O
actually	O
changed	O
(	O
i	O
.	O
e	O
.	O
a	O
call	O
to	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
made	O
)	O
before	O
proceeding	O
with	O
the	O
notification	O
.	O
There	O
are	O
2	O
versions	O
,	O
one	O
with	O
no	O
arguments	O
and	O
one	O
with	O
an	O
Object	B-api_mention
argument	O
,	O
in	O
case	O
you	O
want	O
to	O
pass	O
some	O
extra	O
information	O
with	O
the	O
notification	O
.	O
Internally	O
what	O
happens	O
is	O
that	O
it	O
just	O
iterates	O
through	O
the	O
list	O
of	O
Observer	B-api_mention
instances	O
and	O
calls	O
the	O
update	B-api_mention
(	O
Observable	B-api_mention
o	O
,	O
Object	B-api_mention
arg	O
)	O
method	O
for	O
each	O
of	O
them	O
.	O
This	O
tells	O
the	O
Observer	B-api_mention
which	O
was	O
the	O
Observable	B-api_mention
object	O
that	O
changed	O
(	O
you	O
could	O
be	O
observing	O
more	O
than	O
one	O
)	O
,	O
and	O
the	O
extra	O
Object	B-api_mention
arg	O
to	O
potentially	O
carry	O
some	O
extra	O
information	O
(	O
passed	O
through	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
12544479	O
I	O
am	O
looking	O
for	O
the	O
easiest	O
and	O
simplest	O
way	O
to	O
bind	O
and	O
convert	O
data	O
in	O
Spring	B-api_mention
MVC	O
.	O
If	O
possible	O
,	O
without	O
doing	O
any	O
xml	O
configuration	O
.	O
So	O
far	O
I	O
'	O
ve	O
been	O
using	O
PropertyEditors	B-api_mention
like	O
so	O
:	O
#	O
pre	O
and	O
#	O
pre	O
It	O
is	O
simple	O
:	O
both	O
conversion	O
are	O
defined	O
in	O
the	O
same	O
class	O
,	O
and	O
the	O
binding	O
is	O
straightforward	O
.	O
If	O
I	O
wanted	O
to	O
do	O
a	O
general	O
binding	O
across	O
all	O
my	O
controllers	O
,	O
I	O
could	O
still	O
add	O
3	O
lines	O
in	O
my	O
xml	O
config	O
.	O
But	O
Spring	O
3	O
.	O
x	O
introduced	O
a	O
new	O
way	O
to	O
do	O
it	O
,	O
using	O
Converters	B-api_mention
:	O
#	O
blockquote	O
So	O
let	O
'	O
s	O
say	O
I	O
want	O
to	O
use	O
Converters	B-api_mention
because	O
it	O
is	O
"	O
the	O
latest	O
alternative	O
"	O
.	O
I	O
would	O
have	O
to	O
create	O
two	O
converters	O
:	O
#	O
pre	O
First	O
drawback	O
:	O
I	O
have	O
to	O
make	O
two	O
classes	O
.	O
Benefit	O
:	O
no	O
need	O
to	O
cast	O
thanks	O
to	O
genericity	O
.	O
Then	O
,	O
how	O
do	O
I	O
simply	O
data	O
bind	O
the	O
converters	B-api_mention
?	O
Second	O
drawback	O
:	O
I	O
haven	O
'	O
t	O
found	O
any	O
simple	O
way	O
(	O
annotations	O
or	O
other	O
programmatic	O
facilities	O
)	O
to	O
do	O
it	O
in	O
a	O
controller	O
:	O
nothing	O
like	O
someSpringObject	O
.	B-api_mention
registerCustomConverter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
The	O
only	O
ways	O
I	O
'	O
ve	O
found	O
would	O
be	O
tedious	O
,	O
not	O
simple	O
,	O
and	O
only	O
about	O
general	O
cross	O
-	O
controller	O
binding	O
:	O
#	O
li	O
XML	O
config	O
:	O
#	O
pre	O
#	O
li	O
Java	O
config	O
(	O
only	O
in	O
Spring	O
3	O
.	O
1	O
+	O
)	O
:	O
#	O
pre	O
With	O
all	O
these	O
drawbacks	O
,	O
why	O
using	O
Converters	B-api_mention
?	O
Am	O
I	O
missing	O
something	O
?	O
Are	O
there	O
other	O
tricks	O
that	O
I	O
am	O
not	O
aware	O
of	O
?	O
I	O
am	O
tempted	O
to	O
go	O
on	O
using	O
PropertyEditors	B-api_mention
.	O
.	O
.	O
Binding	O
is	O
much	O
easier	O
and	O
quicker	O
.	O
Question	O
-	O
21242110	O
What	O
is	O
the	O
best	O
way	O
to	O
convert	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
object	O
to	O
the	O
new	O
JDK	O
8	O
/	O
JSR	O
-	O
310	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalDate	I-api_mention
?	O
#	O
pre	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
13291109	O
It	O
really	O
depends	O
on	O
what	O
you	O
want	O
to	O
do	O
with	O
the	O
returned	O
value	O
:	O
#	O
li	O
If	O
you	O
need	O
to	O
get	O
the	O
exact	O
name	O
used	O
to	O
declare	O
the	O
enum	O
constant	O
,	O
you	O
should	O
use	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
toString	B-api_mention
may	O
have	O
been	O
overriden	O
#	O
li	O
If	O
you	O
want	O
to	O
print	O
the	O
enum	O
constant	O
in	O
a	O
user	O
friendly	O
way	O
,	O
you	O
should	O
use	O
toString	B-api_mention
which	O
may	O
have	O
been	O
overriden	O
(	O
or	O
not	O
!	O
)	O
.	O
When	O
I	O
feel	O
that	O
it	O
might	O
be	O
confusing	O
,	O
I	O
provide	O
a	O
more	O
specific	O
getXXX	O
method	O
,	O
for	O
example	O
:	O
#	O
pre	O
Question	O
-	O
31419029	O
,	O
answer	O
-	O
31419047	O
An	O
empty	O
HashMap	B-api_mention
object	O
is	O
much	O
smaller	O
than	O
an	O
array	O
of	O
2000	O
Object	B-api_mention
references	O
.	O
Even	O
though	O
you	O
pass	O
2000	O
to	O
the	O
initialCapacity	O
parameter	O
of	O
the	O
HashMap	B-api_mention
constructor	O
,	O
it	O
'	O
s	O
not	O
actually	O
creating	O
2000	O
spaces	O
for	O
objects	O
yet	O
.	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
15655071	O
If	O
you	O
make	O
foo	O
static	O
,	O
you	O
must	O
initialize	O
it	O
in	O
the	O
class	O
constructor	O
(	O
or	O
inline	O
where	O
you	O
define	O
it	O
)	O
like	O
the	O
following	O
examples	O
.	O
Class	O
constructor	O
(	O
not	O
instance	O
)	O
:	O
#	O
pre	O
Inline	O
:	O
private	O
static	O
final	O
List	B-api_mention
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
problem	O
here	O
is	O
not	O
how	O
the	O
final	O
modifier	O
works	O
,	O
but	O
rather	O
how	O
the	O
static	O
modifier	O
works	O
.	O
The	O
final	O
modifier	O
enforces	O
an	O
initialization	O
of	O
your	O
reference	O
by	O
the	O
time	O
the	O
call	O
to	O
your	O
constructor	O
completes	O
(	O
i	O
.	O
e	O
.	O
you	O
must	O
initialize	O
it	O
in	O
the	O
constructor	O
)	O
.	O
When	O
you	O
initialize	O
an	O
attribute	O
in	O
-	O
line	O
,	O
it	O
gets	O
initialized	O
before	O
the	O
code	O
you	O
have	O
defined	O
for	O
the	O
constructor	O
is	O
run	O
,	O
so	O
you	O
get	O
the	O
following	O
outcomes	O
:	O
#	O
li	O
if	O
foo	O
is	O
static	O
,	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
executed	O
before	O
the	O
static	O
{	O
}	O
constructor	O
you	O
have	O
defined	O
for	O
your	O
class	O
is	O
executed	O
#	O
li	O
if	O
foo	O
is	O
not	O
static	O
,	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
executed	O
before	O
your	O
constructor	O
is	O
run	O
When	O
you	O
do	O
not	O
initilize	O
an	O
attribute	O
in	O
-	O
line	O
,	O
the	O
final	O
modifier	O
enforces	O
that	O
you	O
initialize	O
it	O
and	O
that	O
you	O
must	O
do	O
so	O
in	O
the	O
constructor	O
.	O
If	O
you	O
also	O
have	O
a	O
static	O
modifier	O
,	O
the	O
constructor	O
you	O
will	O
have	O
to	O
initialize	O
the	O
attribute	O
in	O
is	O
the	O
class	O
'	O
initialization	O
block	O
:	O
static	O
{	O
}	O
.	O
The	O
error	O
you	O
get	O
in	O
your	O
code	O
is	O
from	O
the	O
fact	O
that	O
static	O
{	O
}	O
is	O
run	O
when	O
the	O
class	O
is	O
loaded	O
,	O
before	O
the	O
time	O
you	O
instantiate	O
an	O
object	O
of	O
that	O
class	O
.	O
Thus	O
,	O
you	O
will	O
have	O
not	O
initialized	O
foo	O
when	O
the	O
class	O
is	O
created	O
.	O
Think	O
of	O
the	O
static	O
{	O
}	O
block	O
as	O
a	O
constructor	O
for	O
an	O
object	O
of	O
type	O
Class	B-api_mention
.	O
This	O
is	O
where	O
you	O
must	O
do	O
the	O
initialization	O
of	O
your	O
static	O
final	O
class	O
attributes	O
(	O
if	O
not	O
done	O
inline	O
)	O
.	O
Side	O
note	O
:	O
The	O
final	O
modifier	O
assures	O
const	O
-	O
ness	O
only	O
for	O
primitive	O
types	O
and	O
references	O
.	O
When	O
you	O
declare	O
a	O
final	O
object	O
,	O
what	O
you	O
get	O
is	O
a	O
final	O
reference	O
to	O
that	O
object	O
,	O
but	O
the	O
object	O
itself	O
is	O
not	O
constant	O
.	O
What	O
you	O
are	O
really	O
achieving	O
when	O
declaring	O
a	O
final	O
attribute	O
is	O
that	O
,	O
once	O
you	O
declare	O
an	O
object	O
for	O
your	O
specific	O
purpose	O
(	O
like	O
the	O
final	O
List	B-api_mention
that	O
you	O
have	O
declared	O
)	O
,	O
that	O
and	O
only	O
that	O
object	O
will	O
be	O
used	O
for	O
that	O
purpose	O
:	O
you	O
will	O
not	O
be	O
able	O
to	O
change	O
List	B-api_mention
foo	O
to	O
another	O
List	B-api_mention
,	O
but	O
you	O
can	O
still	O
alter	O
your	O
List	B-api_mention
by	O
adding	O
/	O
removing	O
items	O
(	O
the	O
List	B-api_mention
you	O
are	O
using	O
will	O
be	O
the	O
same	O
,	O
only	O
with	O
its	O
contents	O
altered	O
)	O
.	O
Question	O
-	O
5778658	O
,	O
answer	O
-	O
10768914	O
You	O
will	O
need	O
an	O
intermediate	O
class	O
which	O
will	O
buffer	O
between	O
.	O
Each	O
time	O
InputStream	B-api_mention
.	I-api_mention
read	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
the	O
buffering	O
class	O
will	O
fill	O
the	O
passed	O
in	O
byte	O
array	O
with	O
the	O
next	O
chunk	O
passed	O
in	O
from	O
OutputStream	B-api_mention
.	I-api_mention
write	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Since	O
the	O
sizes	O
of	O
the	O
chunks	O
may	O
not	O
be	O
the	O
same	O
,	O
the	O
adapter	O
class	O
will	O
need	O
to	O
store	O
a	O
certain	O
amount	O
until	O
it	O
has	O
enough	O
to	O
fill	O
the	O
read	O
buffer	O
and	O
/	O
or	O
be	O
able	O
to	O
store	O
up	O
any	O
buffer	O
overflow	O
.	O
This	O
article	O
has	O
a	O
nice	O
breakdown	O
of	O
a	O
few	O
different	O
approaches	O
to	O
this	O
problem	O
:	O
#	O
a	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
24895623	O
First	O
of	O
all	O
,	O
the	O
place	O
in	O
your	O
code	O
where	O
you	O
are	O
initializing	O
(	O
i	O
.	O
e	O
.	O
assigning	O
for	O
the	O
first	O
time	O
)	O
foo	O
is	O
here	O
:	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
foo	O
is	O
an	O
object	O
(	O
with	O
type	O
List	O
)	O
so	O
it	O
is	O
a	O
reference	O
type	O
,	O
not	O
a	O
value	O
type	O
(	O
like	O
int	O
)	O
.	O
As	O
such	O
,	O
it	O
holds	O
a	O
reference	O
to	O
a	O
memory	O
location	O
(	O
e	O
.	O
g	O
.	O
0xA7D2A834	O
)	O
where	O
your	O
List	B-api_mention
elements	O
are	O
stored	O
.	O
Lines	O
like	O
this	O
foo	O
.	O
add	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
Modification	O
-	O
1	O
do	O
not	O
change	O
the	O
value	O
of	O
foo	O
(	O
which	O
,	O
again	O
,	O
is	O
just	O
a	O
reference	O
to	O
a	O
memory	O
location	O
)	O
.	O
Instead	O
,	O
they	O
just	O
add	O
elements	O
into	O
that	O
referenced	O
memory	O
location	O
.	O
To	O
violate	O
the	O
final	O
keyword	O
,	O
you	O
would	O
have	O
to	O
try	O
to	O
re	O
-	O
assign	O
foo	O
as	O
follows	O
again	O
:	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
That	O
would	O
give	O
you	O
a	O
compilation	O
error	O
.	O
Now	O
,	O
with	O
that	O
out	O
of	O
the	O
way	O
,	O
think	O
about	O
what	O
happens	O
when	O
you	O
add	O
the	O
static	O
keyword	O
.	O
When	O
you	O
do	O
NOT	O
have	O
the	O
static	O
keyword	O
,	O
each	O
object	O
that	O
instantiates	O
the	O
class	O
has	O
its	O
own	O
copy	O
of	O
foo	O
.	O
Therefore	O
,	O
the	O
constructor	O
assigns	O
a	O
value	O
to	O
a	O
blank	O
,	O
fresh	O
copy	O
of	O
the	O
foo	O
variable	O
,	O
which	O
is	O
perfectly	O
fine	O
.	O
However	O
,	O
when	O
you	O
DO	O
have	O
the	O
static	O
keyword	O
,	O
only	O
one	O
foo	O
exists	O
in	O
memory	O
that	O
is	O
associated	O
with	O
the	O
class	O
.	O
If	O
you	O
were	O
to	O
create	O
two	O
or	O
more	O
objects	O
,	O
the	O
constructor	O
would	O
be	O
attempting	O
to	O
re	O
-	O
assign	O
that	O
one	O
foo	O
each	O
time	O
,	O
violating	O
the	O
final	O
keyword	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
25757711	O
ArrayList	B-api_mention
shrinks	O
or	O
expands	O
dynamically	O
.	O
This	O
is	O
a	O
effective	O
but	O
costly	O
operation	O
,	O
if	O
you	O
know	O
size	O
of	O
your	O
array	O
will	O
be	O
fixed	O
then	O
its	O
better	O
to	O
mention	O
the	O
size	O
of	O
the	O
array	O
,	O
If	O
you	O
don	O
'	O
t	O
,	O
new	O
array	O
will	O
be	O
created	O
at	O
each	O
insertion	O
and	O
reallocation	O
will	O
be	O
done	O
for	O
each	O
element	O
.	O
this	O
will	O
cost	O
you	O
.	O
ensureCapacity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
this	O
method	O
help	O
to	O
avoid	O
reallocations	O
and	O
helps	O
increase	O
size	O
of	O
arraylist	O
.	O
trimToSize	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
this	O
is	O
reverse	O
used	O
to	O
shrink	O
size	O
Arraylist	B-api_mention
has	O
3	O
constructors	O
:	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
)	I-api_mention
-	O
builds	O
empty	O
ArrayList	B-api_mention
#	O
li	O
ArrayList	B-api_mention
(	O
Collection	B-api_mention
c	O
)	O
-	O
builds	O
a	O
ArrayList	B-api_mention
initialized	O
with	O
elements	O
of	O
collection	B-api_mention
c	O
.	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
int	I-api_mention
capacity	I-api_mention
)	I-api_mention
-	O
builds	O
an	O
ArrayList	B-api_mention
with	O
specified	O
initial	O
capacity	O
.	O
Question	O
-	O
30522698	O
The	O
problem	O
I	O
would	O
like	O
to	O
be	O
able	O
to	O
override	O
my	O
apps	O
resources	O
such	O
as	O
R	O
.	O
colour	O
.	O
brand	O
_	O
colour	O
or	O
R	O
.	O
drawable	O
.	O
ic	O
_	O
action	O
_	O
start	O
at	O
runtime	O
.	O
My	O
application	O
connects	O
to	O
a	O
CMS	O
system	O
that	O
will	O
provide	O
branding	O
colours	O
and	O
images	O
.	O
Once	O
the	O
app	O
has	O
downloaded	O
the	O
CMS	O
data	O
it	O
needs	O
to	O
be	O
able	O
to	O
re	O
-	O
skin	O
itself	O
.	O
I	O
know	O
what	O
you	O
are	O
about	O
to	O
say	O
-	O
overriding	O
resources	O
at	O
runtime	O
is	O
not	O
possible	O
.	O
Except	O
that	O
it	O
kinda	O
is	O
.	O
In	O
particular	O
I	O
have	O
found	O
this	O
Bachelor	O
Thesis	O
from	O
2012	O
which	O
explains	O
the	O
basic	O
concept	O
-	O
The	O
Activity	B-api_mention
class	O
in	O
android	O
extends	O
ContextWrapper	B-api_mention
,	O
which	O
contains	O
the	O
attachBaseContext	B-api_mention
method	O
.	O
You	O
can	O
override	O
attachBaseContext	B-api_mention
to	O
wrap	O
the	O
Context	B-api_mention
with	O
your	O
own	O
custom	O
class	O
which	O
overrides	O
methods	O
such	O
as	O
getColor	B-api_mention
and	O
getDrawable	B-api_mention
.	O
Your	O
own	O
implementation	O
of	O
getColor	B-api_mention
could	O
look	O
the	O
colour	O
up	O
however	O
it	O
wanted	O
.	O
The	O
Calligraphy	O
library	O
uses	O
a	O
similar	O
approach	O
to	O
inject	O
a	O
custom	O
LayoutInflator	B-api_mention
which	O
can	O
deal	O
with	O
loading	O
custom	O
fonts	O
.	O
The	O
code	O
I	O
have	O
created	O
a	O
simple	O
Activity	B-api_mention
which	O
uses	O
this	O
approach	O
to	O
override	O
the	O
loading	O
of	O
a	O
colour	O
.	O
#	O
pre	O
The	O
problem	O
is	O
,	O
it	O
doesn	O
'	O
t	O
work	O
!	O
The	O
logging	O
shows	O
calls	O
to	O
load	O
resources	O
such	O
as	O
layout	O
/	O
activity	O
_	O
main	O
and	O
mipmap	O
/	O
ic	O
_	O
launcher	O
however	O
color	O
/	O
theme	O
_	O
colour	O
is	O
never	O
loaded	O
.	O
It	O
seems	O
that	O
the	O
context	O
is	O
being	O
used	O
to	O
create	O
the	O
window	O
and	O
action	O
bar	O
,	O
but	O
not	O
the	O
activity	O
'	O
s	O
content	O
view	O
.	O
My	O
questions	O
is	O
-	O
Where	O
does	O
the	O
layout	O
inflator	O
load	O
resources	O
from	O
,	O
if	O
not	O
the	O
activities	O
context	O
?	O
I	O
would	O
also	O
like	O
to	O
know	O
-	O
Is	O
there	O
a	O
workable	O
way	O
to	O
override	O
the	O
loading	O
of	O
colours	O
and	O
drawables	O
at	O
runtime	O
?	O
A	O
word	O
about	O
alternative	O
approaches	O
I	O
know	O
its	O
possible	O
to	O
theme	O
an	O
app	O
from	O
CMS	O
data	O
other	O
ways	O
-	O
for	O
example	O
we	O
could	O
create	O
a	O
method	O
getCMSColour	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
then	O
inside	O
our	O
onCreate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
we	O
have	O
a	O
bunch	O
of	O
code	O
along	O
the	O
lines	O
of	O
:	O
myTextView	O
.	B-api_mention
setTextColour	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
A	O
similar	O
approach	O
could	O
be	O
taken	O
for	O
drawables	O
,	O
strings	O
,	O
etc	O
.	O
However	O
this	O
would	O
result	O
in	O
a	O
large	O
amount	O
of	O
boilerplate	O
code	O
-	O
all	O
of	O
which	O
needs	O
maintaining	O
.	O
When	O
modifying	O
the	O
UI	O
it	O
would	O
be	O
easy	O
to	O
forget	O
to	O
set	O
the	O
colour	O
on	O
a	O
particular	O
view	O
.	O
Wrapping	O
the	O
Context	B-api_mention
to	O
return	O
our	O
own	O
custom	O
values	O
is	O
'	O
cleaner	O
'	O
and	O
less	O
prone	O
to	O
breakage	O
.	O
I	O
would	O
like	O
to	O
understand	O
why	O
it	O
doesn	O
'	O
t	O
work	O
,	O
before	O
exploring	O
alternative	O
approaches	O
.	O
Question	O
-	O
5071040	O
,	O
answer	O
-	O
5071064	O
There	O
are	O
multiple	O
ways	O
:	O
#	O
li	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
my	O
preference	O
)	O
#	O
li	O
StringLiteral	O
+	O
number	O
(	O
I	O
don	O
'	O
t	O
know	O
how	O
the	O
compiler	O
handles	O
it	O
,	O
perhaps	O
it	O
is	O
as	O
efficient	O
as	O
the	O
above	O
)	O
#	O
li	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
15202997	O
,	O
answer	O
-	O
37603567	O
this	O
is	O
best	O
document	O
I	O
found	O
describing	O
getName	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
getSimpleName	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
getCanonicalName	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
a	O
#	O
pre	O
Question	O
-	O
20746429	O
,	O
answer	O
-	O
24531394	O
Here	O
is	O
a	O
version	O
done	O
on	O
ints	O
-	O
as	O
asked	O
in	O
the	O
question	O
.	O
Usage	O
:	O
StreamUtil	B-api_mention
.	I-api_mention
takeWhile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Here	O
'	O
s	O
code	O
for	O
StreamUtil	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
5031614	O
There	O
have	O
been	O
some	O
discussions	O
here	O
about	O
JPA	O
entities	O
and	O
which	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
implementation	O
should	O
be	O
used	O
for	O
JPA	O
entity	O
classes	O
.	O
Most	O
(	O
if	O
not	O
all	O
)	O
of	O
them	O
depend	O
on	O
Hibernate	O
,	O
but	O
I	O
'	O
d	O
like	O
to	O
discuss	O
them	O
JPA	O
-	O
implementation	O
-	O
neutrally	O
(	O
I	O
am	O
using	O
EclipseLink	O
,	O
by	O
the	O
way	O
)	O
.	O
All	O
possible	O
implementations	O
are	O
having	O
their	O
own	O
advantages	O
and	O
disadvantages	O
regarding	O
:	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
contract	O
conformity	O
(	O
immutability	O
)	O
for	O
List	B-api_mention
/	O
Set	B-api_mention
operations	O
#	O
li	O
Whether	O
identical	O
objects	O
(	O
e	O
.	O
g	O
.	O
from	O
different	O
sessions	O
,	O
dynamic	O
proxies	O
from	O
lazily	O
-	O
loaded	O
data	O
structures	O
)	O
can	O
be	O
detected	O
#	O
li	O
Whether	O
entities	O
behave	O
correctly	O
in	O
detached	O
(	O
or	O
non	O
-	O
persisted	O
)	O
state	O
As	O
far	O
I	O
can	O
see	O
,	O
there	O
are	O
three	O
options	O
:	O
#	O
li	O
Do	O
not	O
override	O
them	O
;	O
rely	O
on	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Object	B-api_mention
.	I-api_mention
hashCode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
work	O
#	O
li	O
cannot	O
identify	O
identical	O
objects	O
,	O
problems	O
with	O
dynamic	O
proxies	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
primary	O
key	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
Business	O
-	O
Id	O
(	O
non	O
-	O
primary	O
key	O
fields	O
;	O
what	O
about	O
foreign	O
keys	O
?	O
)	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
My	O
questions	O
are	O
:	O
#	O
li	O
Did	O
I	O
miss	O
an	O
option	O
and	O
/	O
or	O
pro	O
/	O
con	O
point	O
?	O
#	O
li	O
What	O
option	O
did	O
you	O
choose	O
and	O
why	O
?	O
UPDATE	O
1	O
:	O
By	O
"	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
"	O
,	O
I	O
mean	O
that	O
successive	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invocations	O
may	O
return	O
differing	O
values	O
,	O
which	O
is	O
(	O
when	O
correctly	O
implemented	O
)	O
not	O
broken	O
in	O
the	O
sense	O
of	O
the	O
Object	O
API	O
documentation	O
,	O
but	O
which	O
causes	O
problems	O
when	O
trying	O
to	O
retrieve	O
a	O
changed	O
entity	O
from	O
a	O
Map	O
,	O
Set	O
or	O
other	O
hash	O
-	O
based	O
Collection	B-api_mention
.	O
Consequently	O
,	O
JPA	O
implementations	O
(	O
at	O
least	O
EclipseLink	O
)	O
will	O
not	O
work	O
correctly	O
in	O
some	O
cases	O
.	O
UPDATE	O
2	O
:	O
Thank	O
you	O
for	O
your	O
answers	O
-	O
-	O
most	O
of	O
them	O
have	O
remarkable	O
quality	O
.	O
Unfortunately	O
,	O
I	O
am	O
still	O
unsure	O
which	O
approach	O
will	O
be	O
the	O
best	O
for	O
a	O
real	O
-	O
life	O
application	O
,	O
or	O
how	O
to	O
determine	O
the	O
best	O
approach	O
for	O
my	O
application	O
.	O
So	O
,	O
I	O
'	O
ll	O
keep	O
the	O
question	O
open	O
and	O
hope	O
for	O
some	O
more	O
discussions	O
and	O
/	O
or	O
opinions	O
.	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
22676782	O
Despite	O
@	O
Saint	O
Hill	O
'	O
s	O
answer	O
if	O
you	O
consider	O
the	O
time	O
complexity	O
of	O
str	O
.	B-api_mention
toCharArray	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
the	O
first	O
one	O
is	O
faster	O
even	O
for	O
very	O
large	O
strings	O
.	O
You	O
can	O
run	O
the	O
code	O
below	O
to	O
see	O
it	O
for	O
yourself	O
.	O
#	O
pre	O
output	O
:	O
#	O
pre	O
Question	O
-	O
21947452	O
,	O
answer	O
-	O
29434641	O
I	O
performed	O
tests	O
on	O
Eclipse	O
vs	O
Netbeans	O
8	O
.	O
0	O
.	O
2	O
,	O
both	O
with	O
Java	O
version	O
1	O
.	O
8	O
;	O
I	O
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
measurements	O
.	O
Eclipse	O
:	O
I	O
got	O
the	O
same	O
time	O
on	O
both	O
cases	O
-	O
around	O
1	O
.	O
564	O
seconds	O
.	O
Netbeans	O
:	O
#	O
li	O
Using	O
"	O
#	O
"	O
:	O
1	O
.	O
536	O
seconds	O
#	O
li	O
Using	O
"	O
B	O
"	O
:	O
44	O
.	O
164	O
seconds	O
So	O
,	O
it	O
looks	O
like	O
Netbeans	O
has	O
bad	O
performance	O
on	O
print	O
to	O
console	O
.	O
After	O
more	O
research	O
I	O
realized	O
that	O
the	O
problem	O
is	O
line	O
-	O
wrapping	O
of	O
the	O
max	O
buffer	O
of	O
Netbeans	O
(	O
it	O
'	O
s	O
not	O
restricted	O
to	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
command	O
)	O
,	O
demonstrated	O
by	O
this	O
code	O
:	O
#	O
pre	O
The	O
time	O
results	O
are	O
less	O
then	O
1	O
millisecond	O
every	O
iteration	O
except	O
every	O
fifth	O
iteration	O
,	O
when	O
the	O
time	O
result	O
is	O
around	O
225	O
millisecond	O
.	O
Something	O
like	O
(	O
in	O
nanoseconds	O
)	O
:	O
#	O
pre	O
And	O
so	O
on	O
.	O
.	O
Summary	O
:	O
#	O
li	O
Eclipse	O
works	O
perfectly	O
with	O
"	O
B	O
"	O
#	O
li	O
Netbeans	O
has	O
a	O
line	O
-	O
wrapping	O
problem	O
that	O
can	O
be	O
solved	O
(	O
because	O
the	O
problem	O
does	O
not	O
occur	O
in	O
eclipse	O
)	O
(	O
without	O
adding	O
space	O
after	O
B	O
(	O
"	O
B	O
"	O
)	O
)	O
.	O
Question	O
-	O
31922866	O
I	O
'	O
ve	O
read	O
on	O
many	O
Web	O
sites	O
Optional	B-api_mention
should	O
be	O
used	O
as	O
a	O
return	O
type	O
only	O
,	O
and	O
not	O
used	O
in	O
method	O
arguments	O
.	O
I	O
'	O
m	O
struggling	O
to	O
find	O
a	O
logical	O
reason	O
why	O
.	O
For	O
example	O
I	O
have	O
a	O
piece	O
of	O
logic	O
which	O
has	O
2	O
optional	O
parameters	O
.	O
Therefore	O
I	O
think	O
it	O
would	O
make	O
sense	O
to	O
write	O
my	O
method	O
signature	O
like	O
this	O
(	O
solution	O
1	O
)	O
:	O
#	O
pre	O
Many	O
web	O
pages	O
specify	O
Optional	B-api_mention
should	O
not	O
be	O
used	O
as	O
method	O
arguments	O
.	O
With	O
this	O
in	O
mind	O
I	O
could	O
use	O
the	O
following	O
method	O
signature	O
and	O
add	O
a	O
clear	O
Javadoc	O
comment	O
specifying	O
the	O
arguments	O
maybe	O
null	O
hoping	O
future	O
future	O
maintainers	O
will	O
read	O
the	O
javadoc	O
and	O
therefore	O
always	O
carry	O
out	O
null	O
checks	O
prior	O
to	O
using	O
the	O
arguments	O
(	O
solution	O
2	O
)	O
:	O
#	O
pre	O
Alternatively	O
I	O
could	O
replace	O
my	O
method	O
with	O
4	O
public	O
methods	O
to	O
provide	O
a	O
nicer	O
interface	O
and	O
make	O
it	O
more	O
obvious	O
p1	O
and	O
p2	O
are	O
optional	O
(	O
solution	O
3	O
)	O
:	O
#	O
pre	O
Now	O
I	O
try	O
writing	O
the	O
code	O
of	O
the	O
class	O
which	O
invokes	O
this	O
piece	O
of	O
logic	O
for	O
each	O
approach	O
.	O
I	O
first	O
retrieve	O
the	O
2	O
input	O
parameters	O
from	O
another	O
object	O
which	O
returns	O
optionals	O
and	O
then	O
I	O
invoke	O
calculateSomething	O
.	O
Therefore	O
if	O
solution	O
1	O
is	O
used	O
the	O
calling	O
code	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
if	O
solution	O
2	O
is	O
used	O
the	O
calling	O
code	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
if	O
solution	O
3	O
is	O
used	O
I	O
could	O
use	O
the	O
code	O
above	O
or	O
I	O
could	O
use	O
the	O
following	O
(	O
but	O
its	O
a	O
significant	O
amount	O
more	O
code	O
)	O
:	O
#	O
pre	O
So	O
my	O
question	O
is	O
why	O
is	O
it	O
considered	O
bad	O
practice	O
to	O
use	O
Optionals	O
as	O
method	O
arguments	O
as	O
in	O
solution	O
1	O
?	O
It	O
looks	O
like	O
the	O
most	O
readable	O
solution	O
to	O
me	O
and	O
makes	O
it	O
most	O
obvious	O
that	O
the	O
parameters	O
could	O
be	O
empty	O
/	O
null	O
to	O
future	O
maintainers	O
.	O
(	O
I	O
'	O
m	O
aware	O
the	O
designers	O
of	O
Optional	B-api_mention
intended	O
it	O
to	O
only	O
be	O
used	O
as	O
a	O
return	O
type	O
,	O
but	O
I	O
can	O
'	O
t	O
find	O
any	O
logical	O
reasons	O
not	O
to	O
use	O
it	O
in	O
this	O
scenario	O
)	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923105	O
Oh	O
,	O
those	O
coding	O
styles	O
are	O
to	O
be	O
taken	O
with	O
a	O
bit	O
of	O
salt	O
.	O
#	O
li	O
(	O
+	O
)	O
Passing	O
an	O
Option	O
result	O
to	O
another	O
method	O
,	O
without	O
any	O
semantic	O
analysis	O
;	O
leaving	O
that	O
to	O
the	O
method	O
,	O
is	O
quite	O
alright	O
.	O
#	O
li	O
(	O
-	O
)	O
Using	O
Optional	B-api_mention
parameters	O
causing	O
conditional	O
logic	O
inside	O
the	O
methods	O
is	O
literally	O
contra	O
-	O
productive	O
.	O
#	O
li	O
(	O
-	O
)	O
Needing	O
to	O
pack	O
an	O
argument	O
in	O
an	O
Optional	B-api_mention
,	O
is	O
suboptimal	O
for	O
the	O
compiler	O
,	O
and	O
does	O
an	O
unnecessary	O
wrapping	O
.	O
#	O
li	O
(	O
-	O
)	O
In	O
comparison	O
to	O
nullable	O
parameters	O
Optional	B-api_mention
is	O
more	O
costly	O
.	O
In	O
general	O
:	O
Optional	B-api_mention
unifies	O
two	O
states	O
,	O
which	O
have	O
to	O
be	O
unraveled	O
.	O
Hence	O
better	O
suited	O
for	O
result	O
than	O
input	O
,	O
for	O
the	O
complexity	O
of	O
the	O
data	O
flow	O
.	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262126	O
The	O
JLS	O
specify	O
that	O
#	O
blockquote	O
Now	O
let	O
'	O
s	O
see	O
that	O
in	O
detail	O
,	O
Since	O
your	O
takeBiConsumer	O
method	O
is	O
of	O
void	O
type	O
,	O
the	O
lambda	O
receiving	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
interpret	O
it	O
as	O
a	O
block	O
like	O
#	O
pre	O
which	O
is	O
valid	O
in	O
a	O
void	O
,	O
hence	O
the	O
first	O
case	O
compile	O
.	O
However	O
,	O
in	O
the	O
case	O
where	O
the	O
lambda	O
is	O
-	O
>	O
StringLiteral	O
,	O
a	O
block	O
such	O
as	O
#	O
pre	O
is	O
not	O
valid	O
syntax	O
in	O
java	O
.	O
Therefore	O
the	O
only	O
thing	O
to	O
do	O
with	O
"	O
hi	O
"	O
is	O
to	O
try	O
and	O
return	O
it	O
.	O
#	O
pre	O
which	O
is	O
not	O
valid	O
in	O
a	O
void	O
and	O
explain	O
the	O
error	O
message	O
#	O
pre	O
For	O
a	O
better	O
understanding	O
,	O
note	O
that	O
if	O
you	O
change	O
the	O
type	O
of	O
takeBiConsumer	O
to	O
a	O
String	B-api_mention
,	O
-	O
>	O
StringLiteral	O
will	O
be	O
valid	O
as	O
it	O
will	O
simply	O
try	O
to	O
directly	O
return	O
the	O
string	O
.	O
Note	O
that	O
at	O
first	O
I	O
tought	O
the	O
error	O
was	O
caused	O
by	O
the	O
lambda	O
being	O
in	O
a	O
wrong	O
invocation	O
context	O
,	O
so	O
I	O
'	O
ll	O
share	O
this	O
possibility	O
with	O
the	O
community	O
:	O
JLS	O
15	O
.	O
27	O
#	O
blockquote	O
However	O
in	O
our	O
case	O
,	O
we	O
are	O
in	O
an	O
invocation	O
context	O
which	O
is	O
correct	O
.	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673356	O
#	O
pre	O
Generally	O
speaking	O
,	O
when	O
you	O
have	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
write	O
anything	O
there	O
.	O
You	O
can	O
pass	O
this	O
output	O
stream	O
as	O
a	O
place	O
to	O
put	O
generated	O
PDF	O
to	O
your	O
generator	O
.	O
Also	O
,	O
if	O
you	O
know	O
what	O
file	O
type	O
you	O
are	O
sending	O
,	O
you	O
can	O
set	O
response	O
.	B-api_mention
setContentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
7707556	O
,	O
answer	O
-	O
15870428	O
There	O
is	O
a	O
subtle	O
issue	O
here	O
that	O
is	O
a	O
bit	O
of	O
a	O
gotcha	O
.	O
The	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
a	O
base	O
implementation	O
in	O
Object	B-api_mention
.	O
CharSequence	B-api_mention
is	O
an	O
interface	O
;	O
and	O
although	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
appears	O
as	O
part	O
of	O
that	O
interface	O
,	O
there	O
is	O
nothing	O
at	O
compile	O
-	O
time	O
that	O
will	O
force	O
you	O
to	O
override	O
it	O
and	O
honor	O
the	O
additional	O
constraints	O
that	O
the	O
CharSequence	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
'	O
s	O
javadoc	O
puts	O
on	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
;	O
ie	O
that	O
it	O
should	O
return	O
a	O
string	O
containing	O
the	O
characters	O
in	O
the	O
order	O
returned	O
by	O
charAt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Your	O
IDE	O
won	O
'	O
t	O
even	O
help	O
you	O
out	O
by	O
reminding	O
that	O
you	O
that	O
you	O
probably	O
should	O
override	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
For	O
example	O
,	O
in	O
intellij	O
,	O
this	O
is	O
what	O
you	O
'	O
ll	O
see	O
if	O
you	O
create	O
a	O
new	O
CharSequence	B-api_mention
implementation	O
:	O
#	O
a	O
.	O
Note	O
the	O
absence	O
of	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
.	O
If	O
you	O
rely	O
on	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
on	O
an	O
arbitrary	O
CharSequence	B-api_mention
,	O
it	O
should	O
work	O
provided	O
the	O
CharSequence	B-api_mention
implementer	O
did	O
their	O
job	O
properly	O
.	O
But	O
if	O
you	O
want	O
to	O
avoid	O
any	O
uncertainty	O
altogether	O
,	O
you	O
should	O
use	O
a	O
StringBuilder	B-api_mention
and	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
like	O
so	O
:	O
#	O
pre	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
16226168	O
I	O
would	O
not	O
use	O
URLEncoder	B-api_mention
.	O
Besides	O
being	O
incorrectly	O
named	O
(	O
URLEncoder	B-api_mention
has	O
nothing	O
to	O
do	O
with	O
URLs	O
)	O
,	O
inefficient	O
(	O
it	O
uses	O
a	O
StringBuffer	B-api_mention
instead	O
of	O
Builder	B-api_mention
and	O
does	O
a	O
couple	O
of	O
other	O
things	O
that	O
are	O
slow	O
)	O
Its	O
also	O
way	O
too	O
easy	O
to	O
screw	O
it	O
up	O
.	O
Instead	O
I	O
would	O
use	O
URIBuilder	B-api_mention
or	O
Spring	O
'	O
s	O
URIUtils	B-api_mention
or	O
Commons	O
Apache	O
HttpClient	B-api_mention
.	O
The	O
reason	O
being	O
you	O
have	O
to	O
escape	O
the	O
query	O
parameters	O
name	O
(	O
ie	O
BalusC	O
'	O
s	O
answer	O
q	O
)	O
differently	O
than	O
the	O
parameter	O
value	O
.	O
The	O
only	O
downside	O
to	O
the	O
above	O
(	O
that	O
I	O
found	O
out	O
painfully	O
)	O
is	O
that	O
URL	O
'	O
s	O
are	O
not	O
a	O
true	O
subset	O
of	O
URI	O
'	O
s	O
.	O
Since	O
I	O
'	O
m	O
just	O
linking	O
to	O
other	O
answers	O
I	O
marked	O
this	O
as	O
a	O
community	O
wiki	O
.	O
Feel	O
free	O
to	O
edit	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25850576	O
#	O
li	O
Is	O
the	O
definition	O
of	O
a	O
marker	B-api_mention
interface	O
mentioned	O
above	O
in	O
1st	O
point	O
wrong	O
?	O
-	O
It	O
is	O
correct	O
in	O
the	O
parts	O
that	O
(	O
1	O
)	O
a	O
marker	B-api_mention
interface	O
must	O
be	O
empty	O
,	O
and	O
(	O
2	O
)	O
implementing	O
it	O
is	O
meant	O
to	O
imply	O
some	O
special	O
treatment	O
of	O
the	O
implementing	O
class	O
.	O
The	O
part	O
that	O
is	O
incorrect	O
is	O
that	O
it	O
implies	O
that	O
JVM	O
or	O
the	O
compiler	O
would	O
treat	O
the	O
objects	O
of	O
that	O
class	O
differently	O
:	O
you	O
are	O
correct	O
in	O
observing	O
that	O
it	O
is	O
the	O
code	O
of	O
Java	O
class	O
library	O
that	O
treats	O
these	O
objects	O
as	O
cloneable	O
,	O
serializable	O
,	O
etc	O
.	O
It	O
has	O
nothing	O
to	O
do	O
with	O
the	O
compiler	O
or	O
the	O
JVM	O
.	O
#	O
li	O
instead	O
of	O
using	O
the	O
instanceOf	B-api_mention
operator	O
why	O
can	O
'	O
t	O
the	O
method	O
be	O
something	O
like	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
that	O
there	O
is	O
a	O
compile	O
-	O
time	O
type	O
checking	O
-	O
This	O
lets	O
you	O
avoid	O
polluting	O
your	O
code	O
with	O
the	O
name	O
of	O
the	O
marker	O
interface	O
when	O
a	O
"	O
plain	O
Object	O
"	O
is	O
needed	O
.	O
For	O
example	O
,	O
if	O
you	O
make	O
a	O
class	O
that	O
needs	O
to	O
be	O
serializable	O
,	O
and	O
has	O
object	O
members	O
,	O
you	O
would	O
be	O
forced	O
to	O
either	O
do	O
casting	O
or	O
make	O
your	O
objects	O
Serializable	B-api_mention
at	O
compile	O
time	O
.	O
This	O
is	O
inconvenient	O
,	O
because	O
the	O
interface	O
is	O
devoid	O
of	O
any	O
functionality	O
.	O
#	O
li	O
How	O
Annotations	B-api_mention
are	O
better	O
than	O
Marker	B-api_mention
Interfaces	O
?	O
-	O
They	O
let	O
you	O
achieve	O
the	O
same	O
purpose	O
of	O
conveying	O
metadata	O
about	O
the	O
class	O
to	O
its	O
consumers	O
without	O
creating	O
a	O
separate	O
type	O
for	O
it	O
.	O
Annotations	B-api_mention
are	O
more	O
powerful	O
,	O
too	O
,	O
letting	O
programmers	O
pass	O
more	O
sophisticated	O
information	O
to	O
classes	O
that	O
"	O
consume	O
"	O
it	O
.	O
Question	O
-	O
13950338	O
,	O
answer	O
-	O
17066803	O
Grant	O
Vibration	O
Permission	O
Before	O
you	O
start	O
implementing	O
any	O
vibration	O
code	O
,	O
you	O
have	O
to	O
give	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
:	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
Make	O
sure	O
to	O
include	O
this	O
line	O
in	O
your	O
AndroidManifest	O
.	O
xml	O
file	O
.	O
Import	O
the	O
Vibration	O
Library	O
Most	O
IDEs	O
will	O
do	O
this	O
for	O
you	O
,	O
but	O
here	O
is	O
the	O
import	O
statement	O
if	O
yours	O
doesn	O
'	O
t	O
:	O
import	O
android	B-api_mention
.	I-api_mention
os	I-api_mention
.	I-api_mention
Vibrator	I-api_mention
;	O
Make	O
sure	O
this	O
in	O
the	O
activity	O
where	O
you	O
want	O
the	O
vibration	O
to	O
occur	O
.	O
How	O
to	O
Vibrate	B-api_mention
for	O
a	O
Given	O
Time	O
In	O
most	O
circumstances	O
,	O
you	O
'	O
ll	O
be	O
wanting	O
to	O
vibrate	O
the	O
device	O
for	O
a	O
short	O
,	O
predetermined	O
amount	O
of	O
time	O
.	O
You	O
can	O
achieve	O
this	O
by	O
using	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
is	O
a	O
quick	O
example	O
:	O
#	O
pre	O
That	O
'	O
s	O
it	O
,	O
simple	O
!	O
How	O
to	O
Vibrate	O
Indefinitely	O
It	O
may	O
be	O
the	O
case	O
that	O
you	O
want	O
the	O
device	O
to	O
continue	O
vibrating	O
indefinitely	O
.	O
For	O
this	O
,	O
we	O
use	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
When	O
you	O
'	O
re	O
ready	O
to	O
stop	O
the	O
vibration	O
,	O
just	O
call	O
the	O
cancel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
v	O
.	B-api_mention
cancel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
How	O
to	O
use	O
Vibration	O
Patterns	O
If	O
you	O
want	O
a	O
more	O
bespoke	O
vibration	O
,	O
you	O
can	O
attempt	O
to	O
create	O
your	O
own	O
vibration	O
patterns	O
:	O
#	O
pre	O
More	O
Complex	O
Vibrations	O
There	O
are	O
multiple	O
SDKs	O
that	O
offer	O
a	O
more	O
comprehensive	O
range	O
of	O
haptic	O
feedback	O
.	O
One	O
that	O
I	O
use	O
for	O
special	O
effects	O
is	O
Immersion	O
'	O
s	O
Haptic	O
Development	O
Platform	O
for	O
Android	O
.	O
Troubleshooting	O
If	O
your	O
device	O
won	O
'	O
t	O
vibrate	O
,	O
first	O
make	O
sure	O
that	O
it	O
can	O
vibrate	O
:	O
#	O
pre	O
Secondly	O
,	O
please	O
ensure	O
that	O
you	O
'	O
ve	O
given	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
!	O
Refer	O
back	O
to	O
the	O
first	O
point	O
.	O
Question	O
-	O
8725387	O
In	O
Java	O
there	O
are	O
the	O
SortedSet	B-api_mention
and	O
SortedMap	B-api_mention
interfaces	O
.	O
Both	O
belong	O
to	O
Java	O
'	O
s	O
standard	O
Collections	B-api_mention
framework	O
and	O
provide	O
a	O
sorted	O
way	O
to	O
access	O
the	O
elements	O
.	O
However	O
,	O
in	O
my	O
understanding	O
there	O
is	O
no	O
SortedList	O
in	O
Java	O
.	O
You	O
can	O
use	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
a	O
list	O
.	O
Any	O
idea	O
why	O
it	O
is	O
designed	O
like	O
that	O
?	O
Question	O
-	O
27430092	O
,	O
answer	O
-	O
27449187	O
The	O
standard	O
use	O
case	O
for	O
BigInteger	B-api_mention
.	I-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
is	O
in	O
cryptography	O
.	O
Specifically	O
,	O
certain	O
cryptographic	O
algorithms	O
,	O
such	O
as	O
RSA	O
,	O
require	O
randomly	O
chosen	O
large	O
primes	O
.	O
Importantly	O
,	O
however	O
,	O
these	O
algorithms	O
don	O
'	O
t	O
really	O
require	O
these	O
numbers	O
to	O
be	O
guaranteed	O
to	O
be	O
prime	O
—	O
they	O
just	O
need	O
to	O
be	O
prime	O
with	O
a	O
very	O
high	O
probability	O
.	O
How	O
high	O
is	O
very	O
high	O
?	O
Well	O
,	O
in	O
a	O
crypto	O
application	O
,	O
one	O
would	O
typically	O
call	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
an	O
argument	O
somewhere	O
between	O
128	O
and	O
256	O
.	O
Thus	O
,	O
the	O
probability	O
of	O
a	O
non	O
-	O
prime	O
number	O
passing	O
such	O
a	O
test	O
is	O
less	O
than	O
one	O
in	O
2	O
128	O
or	O
2	O
256	O
.	O
Let	O
'	O
s	O
put	O
that	O
in	O
perspective	O
:	O
if	O
you	O
had	O
10	O
billion	O
computers	O
,	O
each	O
generating	O
10	O
billion	O
probable	O
prime	O
numbers	O
per	O
second	O
(	O
which	O
would	O
mean	O
less	O
than	O
one	O
clock	O
cycle	O
per	O
number	O
on	O
any	O
modern	O
CPU	O
)	O
,	O
and	O
the	O
primality	O
of	O
those	O
numbers	O
was	O
tested	O
with	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
would	O
,	O
on	O
average	O
,	O
expect	O
one	O
non	O
-	O
prime	O
number	O
to	O
slip	O
in	O
once	O
in	O
every	O
100	O
billion	O
years	O
.	O
That	O
is	O
,	O
that	O
would	O
be	O
the	O
case	O
,	O
if	O
those	O
10	O
billion	O
computers	O
could	O
somehow	O
all	O
run	O
for	O
hundreds	O
of	O
billions	O
of	O
years	O
without	O
experiencing	O
any	O
hardware	O
failures	O
.	O
In	O
practice	O
,	O
though	O
,	O
it	O
'	O
s	O
a	O
lot	O
more	O
likely	O
for	O
a	O
random	O
cosmic	O
ray	O
to	O
strike	O
your	O
computer	O
at	O
just	O
the	O
right	O
time	O
and	O
place	O
to	O
flip	O
the	O
return	O
value	O
of	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
false	O
to	O
true	O
,	O
without	O
causing	O
any	O
other	O
detectable	O
effects	O
,	O
than	O
it	O
is	O
for	O
a	O
non	O
-	O
prime	O
number	O
to	O
actually	O
pass	O
the	O
probabilistic	O
primality	O
test	O
at	O
that	O
certainty	O
level	O
.	O
Of	O
course	O
,	O
the	O
same	O
risk	O
of	O
random	O
cosmic	O
rays	O
and	O
other	O
hardware	O
faults	O
also	O
applies	O
to	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
.	O
Thus	O
,	O
in	O
practice	O
,	O
even	O
these	O
tests	O
have	O
a	O
(	O
very	O
small	O
)	O
baseline	O
false	O
positive	O
rate	O
due	O
to	O
random	O
hardware	O
failures	O
(	O
not	O
to	O
mention	O
all	O
other	O
possible	O
sources	O
of	O
errors	O
,	O
such	O
as	O
implementation	O
bugs	O
)	O
.	O
Since	O
it	O
'	O
s	O
easy	O
to	O
push	O
the	O
intrinsic	O
false	O
positive	O
rate	O
of	O
the	O
Miller	O
–	O
Rabin	O
primality	O
test	O
used	O
by	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
far	O
below	O
this	O
baseline	O
rate	O
,	O
simply	O
by	O
repeating	O
the	O
test	O
sufficiently	O
many	O
times	O
,	O
and	O
since	O
,	O
even	O
repeated	O
so	O
many	O
times	O
,	O
the	O
Miller	O
–	O
Rabin	O
test	O
is	O
still	O
much	O
faster	O
in	O
practice	O
than	O
the	O
best	O
known	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
,	O
it	O
remains	O
the	O
standard	O
primality	O
test	O
for	O
cryptographic	O
applications	O
.	O
(	O
Besides	O
,	O
even	O
if	O
you	O
happened	O
to	O
accidentally	O
select	O
a	O
strong	O
pseudoprime	O
as	O
one	O
of	O
the	O
factors	O
of	O
your	O
RSA	O
modulus	O
,	O
it	O
would	O
not	O
generally	O
lead	O
to	O
a	O
catastrophic	O
failure	O
.	O
Typically	O
,	O
such	O
pseudoprimes	O
would	O
be	O
products	O
of	O
two	O
(	O
or	O
rarely	O
more	O
)	O
primes	O
of	O
approximately	O
half	O
the	O
length	O
,	O
which	O
means	O
that	O
you	O
'	O
d	O
end	O
up	O
with	O
a	O
multi	O
-	O
prime	O
RSA	O
key	O
.	O
As	O
long	O
as	O
none	O
of	O
the	O
factors	O
were	O
too	O
small	O
(	O
and	O
if	O
they	O
were	O
,	O
the	O
primality	O
test	O
should	O
'	O
ve	O
caught	O
them	O
)	O
,	O
the	O
RSA	O
algorithm	O
will	O
still	O
work	O
just	O
fine	O
,	O
and	O
the	O
key	O
,	O
although	O
somewhat	O
weaker	O
against	O
certain	O
types	O
of	O
attacks	O
than	O
normal	O
RSA	O
keys	O
of	O
the	O
same	O
length	O
,	O
should	O
still	O
be	O
reasonably	O
secure	O
if	O
you	O
didn	O
'	O
t	O
needlessly	O
skimp	O
on	O
the	O
key	O
length	O
.	O
)	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
33093380	O
You	O
may	O
try	O
isReachable	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
InetAddress	B-api_mention
class	O
to	O
figure	O
out	O
which	O
IP	O
address	O
is	O
your	O
real	O
publicly	O
available	O
IP	O
address	O
.	O
I	O
think	O
other	O
type	O
of	O
addresses	O
(	O
site	O
local	O
,	O
link	O
local	O
)	O
are	O
not	O
reachable	O
from	O
outside	O
.	O
#	O
pre	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34529067	O
Keep	O
in	O
mind	O
that	O
Java	O
holds	O
a	O
pool	O
of	O
all	O
string	O
literals	O
found	O
in	O
program	O
,	O
used	O
for	O
matching	O
purposes	O
among	O
others	O
,	O
so	O
any	O
different	O
string	O
literal	O
concatenation	O
above	O
will	O
lead	O
to	O
the	O
same	O
object	O
,	O
to	O
the	O
same	O
string	O
literal	O
.	O
You	O
can	O
check	O
out	O
this	O
useful	O
article	O
for	O
more	O
.	O
On	O
the	O
other	O
hand	O
,	O
the	O
concatenation	O
of	O
a	O
String	B-api_mention
object	O
and	O
a	O
literal	O
(	O
case	O
c	O
+	O
StringLiteral	O
)	O
will	O
lead	O
to	O
the	O
creation	O
of	O
a	O
as	O
StringBuilder	B-api_mention
object	O
at	O
runtime	O
,	O
different	O
to	O
the	O
literals	O
found	O
in	O
pool	O
.	O
Question	O
-	O
16159203	O
,	O
answer	O
-	O
18258659	O
You	O
have	O
ordinary	O
memory	O
,	O
the	O
'	O
currentpos	O
'	O
reference	O
and	O
the	O
Point	B-api_mention
object	O
and	O
its	O
fields	O
behind	O
it	O
,	O
shared	O
between	O
2	O
threads	O
,	O
without	O
synchronisation	O
.	O
Thus	O
,	O
there	O
is	O
no	O
defined	O
ordering	O
between	O
the	O
writes	O
that	O
happen	O
to	O
this	O
memory	O
in	O
the	O
main	O
thread	O
and	O
the	O
reads	O
in	O
the	O
created	O
thread	O
(	O
call	O
it	O
T	O
)	O
.	O
Main	O
thread	O
is	O
doing	O
the	O
following	O
writes	O
(	O
ignoring	O
the	O
initial	O
setup	O
of	O
point	O
,	O
will	O
result	O
in	O
p	O
.	O
x	O
and	O
p	O
.	O
y	O
having	O
default	O
values	O
)	O
:	O
#	O
li	O
to	O
p	O
.	O
x	O
#	O
li	O
to	O
p	O
.	O
y	O
#	O
li	O
to	O
currentpos	O
Because	O
there	O
is	O
nothing	O
special	O
about	O
these	O
writes	O
in	O
terms	O
of	O
synchronisation	O
/	O
barriers	O
,	O
the	O
runtime	O
is	O
free	O
to	O
allow	O
the	O
T	O
thread	O
see	O
them	O
occur	O
in	O
any	O
order	O
(	O
the	O
main	O
thread	O
of	O
course	O
always	O
sees	O
writes	O
and	O
reads	O
ordered	O
according	O
to	O
programme	O
order	O
)	O
,	O
and	O
occur	O
at	O
any	O
point	O
between	O
the	O
reads	O
in	O
T	O
.	O
So	O
T	O
is	O
doing	O
:	O
#	O
li	O
reads	O
currentpos	O
to	O
p	O
#	O
li	O
read	O
p	O
.	O
x	O
and	O
p	O
.	O
y	O
(	O
in	O
either	O
order	O
)	O
#	O
li	O
compare	O
,	O
and	O
take	O
the	O
branch	O
#	O
li	O
read	O
p	O
.	O
x	O
and	O
p	O
.	O
y	O
(	O
either	O
order	O
)	O
and	O
call	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
Given	O
there	O
'	O
s	O
no	O
ordering	O
relationships	O
between	O
the	O
writes	O
in	O
main	O
,	O
and	O
the	O
reads	O
in	O
T	O
,	O
there	O
are	O
clearly	O
several	O
ways	O
this	O
can	O
produce	O
your	O
result	O
,	O
as	O
T	O
may	O
see	O
main	O
'	O
s	O
write	O
to	O
currentpos	O
before	O
the	O
writes	O
to	O
currentpos	O
.	O
y	O
or	O
currentpos	O
.	O
x	O
:	O
#	O
li	O
It	O
reads	O
currentpos	O
.	O
x	O
first	O
,	O
before	O
the	O
x	O
write	O
has	O
occurred	O
-	O
gets	O
0	O
,	O
then	O
reads	O
currentpos	O
.	O
y	O
before	O
the	O
y	O
write	O
has	O
occurred	O
-	O
gets	O
0	O
.	O
Compare	O
evals	O
to	O
true	O
.	O
The	O
writes	O
become	O
visible	O
to	O
T	O
.	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
is	O
called	O
.	O
#	O
li	O
It	O
reads	O
currentpos	O
.	O
x	O
first	O
,	O
after	O
the	O
x	O
write	O
has	O
occurred	O
,	O
then	O
reads	O
currentpos	O
.	O
y	O
before	O
the	O
y	O
write	O
has	O
occurred	O
-	O
gets	O
0	O
.	O
Compare	O
evals	O
to	O
true	O
.	O
Writes	O
become	O
visible	O
to	O
T	O
.	O
.	O
.	O
etc	O
.	O
#	O
li	O
It	O
reads	O
currentpos	O
.	O
y	O
first	O
,	O
before	O
the	O
y	O
write	O
has	O
occurred	O
(	O
0	O
)	O
,	O
then	O
reads	O
currentpos	O
.	O
x	O
after	O
the	O
x	O
write	O
,	O
evals	O
to	O
true	O
.	O
etc	O
.	O
and	O
so	O
on	O
.	O
.	O
.	O
There	O
are	O
a	O
number	O
of	O
data	O
races	O
here	O
.	O
I	O
suspect	O
the	O
flawed	O
assumption	O
here	O
is	O
thinking	O
that	O
the	O
writes	O
that	O
result	O
from	O
this	O
line	O
are	O
made	O
visible	O
across	O
all	O
the	O
threads	O
in	O
the	O
programme	O
order	O
of	O
the	O
thread	O
executing	O
it	O
:	O
currentPos	O
=	O
new	O
Point	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Java	O
makes	O
no	O
such	O
guarantee	O
(	O
it	O
'	O
d	O
be	O
terrible	O
for	O
performance	O
)	O
.	O
Something	O
more	O
must	O
be	O
added	O
if	O
your	O
programme	O
needs	O
a	O
guaranteed	O
ordering	O
of	O
the	O
writes	O
relative	O
to	O
reads	O
in	O
other	O
threads	O
.	O
Others	O
have	O
suggested	O
making	O
the	O
x	O
,	O
y	O
fields	O
final	O
,	O
or	O
alternatively	O
making	O
currentpos	O
volatile	O
.	O
#	O
li	O
If	O
you	O
make	O
the	O
x	O
,	O
y	O
fields	O
final	O
,	O
then	O
Java	O
guarantees	O
that	O
the	O
writes	O
of	O
their	O
values	O
will	O
be	O
seen	O
to	O
occur	O
before	O
the	O
constructor	O
returns	O
,	O
in	O
all	O
threads	O
.	O
Thus	O
,	O
as	O
the	O
assignment	O
to	O
currentpos	O
is	O
after	O
the	O
constructor	O
,	O
the	O
T	O
thread	O
is	O
guaranteed	O
to	O
see	O
the	O
writes	O
in	O
the	O
correct	O
order	O
.	O
#	O
li	O
If	O
you	O
make	O
currentpos	O
volatile	O
,	O
then	O
Java	O
guarantees	O
that	O
that	O
this	O
is	O
a	O
synchronisation	O
point	O
which	O
will	O
be	O
total	O
-	O
ordered	O
wrt	O
other	O
synchronisation	O
points	O
.	O
As	O
in	O
main	O
the	O
writes	O
to	O
x	O
and	O
y	O
must	O
happen	O
before	O
the	O
write	O
to	O
currentpos	O
,	O
then	O
any	O
read	O
of	O
currentpos	O
in	O
another	O
thread	O
must	O
see	O
also	O
the	O
writes	O
of	O
x	O
,	O
y	O
that	O
happened	O
before	O
.	O
Using	O
final	O
has	O
the	O
advantage	O
that	O
it	O
makes	O
the	O
fields	O
immutable	O
,	O
and	O
thus	O
allows	O
the	O
values	O
to	O
be	O
cached	O
.	O
Using	O
volatile	O
leads	O
to	O
synchronisation	O
on	O
every	O
write	O
and	O
read	O
of	O
currentpos	O
,	O
which	O
might	O
hurt	O
performance	O
.	O
See	O
chapter	O
17	O
of	O
the	O
Java	O
Language	O
Spec	O
for	O
the	O
gory	O
details	O
:	O
#	O
a	O
(	O
Initial	O
answer	O
assumed	O
a	O
weaker	O
memory	O
model	O
,	O
as	O
I	O
was	O
not	O
sure	O
the	O
JLS	O
guaranteed	O
volatile	O
was	O
sufficient	O
.	O
Answer	O
edited	O
to	O
reflect	O
comment	O
from	O
assylias	O
,	O
pointing	O
out	O
the	O
Java	O
model	O
is	O
stronger	O
-	O
happens	O
-	O
before	O
is	O
transitive	O
-	O
and	O
so	O
volatile	O
on	O
currentpos	O
also	O
suffices	O
)	O
.	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
10631738	O
You	O
could	O
do	O
this	O
:	O
#	O
pre	O
Basically	O
the	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
will	O
split	O
the	O
string	O
according	O
to	O
(	O
in	O
this	O
case	O
)	O
delimiter	O
you	O
are	O
passing	O
and	O
will	O
return	O
an	O
array	O
of	O
strings	O
.	O
However	O
,	O
you	O
seem	O
to	O
be	O
after	O
a	O
List	B-api_mention
of	O
Strings	B-api_mention
rather	O
than	O
an	O
array	O
,	O
so	O
the	O
array	O
must	O
be	O
turned	O
into	O
a	O
list	O
by	O
using	O
the	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
)	I-api_mention
utility	O
.	O
Just	O
as	O
an	O
FYI	O
you	O
could	O
also	O
do	O
something	O
like	O
so	O
:	O
#	O
pre	O
But	O
it	O
is	O
usually	O
better	O
practice	O
to	O
program	O
to	O
an	O
interface	O
rather	O
than	O
to	O
an	O
actual	O
concrete	O
implementation	O
,	O
so	O
I	O
would	O
recommend	O
the	O
1st	O
option	O
.	O
Question	O
-	O
22718744	O
,	O
answer	O
-	O
27477312	O
The	O
behavior	O
of	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	O
which	O
calls	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
)	O
changes	O
between	O
Java	O
7	O
and	O
Java	O
8	O
.	O
Documentation	O
Comparing	O
between	O
the	O
documentation	O
of	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
in	O
Java	O
7	O
and	O
Java	O
8	O
,	O
we	O
observe	O
the	O
following	O
clause	O
being	O
added	O
:	O
#	O
blockquote	O
The	O
same	O
clause	O
is	O
also	O
added	O
to	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
in	O
Java	O
8	O
,	O
compared	O
to	O
Java	O
7	O
.	O
Reference	O
implementation	O
Let	O
us	O
compare	O
the	O
code	O
of	O
Pattern	B-api_mention
.	I-api_mention
split	I-api_mention
of	O
the	O
reference	O
implemetation	O
in	O
Java	O
7	O
and	O
Java	O
8	O
.	O
The	O
code	O
is	O
retrieved	O
from	O
grepcode	O
,	O
for	O
version	O
7u40	O
-	O
b43	O
and	O
8	O
-	O
b132	O
.	O
Java	O
7	O
#	O
pre	O
Java	O
8	O
#	O
pre	O
The	O
addition	O
of	O
the	O
following	O
code	O
in	O
Java	O
8	O
excludes	O
the	O
zero	O
-	O
length	O
match	O
at	O
the	O
beginning	O
of	O
the	O
input	O
string	O
,	O
which	O
explains	O
the	O
behavior	O
above	O
.	O
#	O
pre	O
Maintaining	O
compatibility	O
Following	O
behavior	O
in	O
Java	O
8	O
and	O
above	O
To	O
make	O
split	B-api_mention
behaves	O
consistently	O
across	O
versions	O
and	O
compatible	O
with	O
the	O
behavior	O
in	O
Java	O
8	O
:	O
#	O
li	O
If	O
your	O
regex	O
can	O
match	O
zero	O
-	O
length	O
string	O
,	O
just	O
add	O
(	O
?	O
!	O
\	O
A	O
)	O
at	O
the	O
end	O
of	O
the	O
regex	O
and	O
wrap	O
the	O
original	O
regex	O
in	O
non	O
-	O
capturing	O
group	O
(	O
?	O
:	O
.	O
.	O
.	O
)	O
(	O
if	O
necessary	O
)	O
.	O
#	O
li	O
If	O
your	O
regex	O
can	O
'	O
t	O
match	O
zero	O
-	O
length	O
string	O
,	O
you	O
don	O
'	O
t	O
need	O
to	O
do	O
anything	O
.	O
#	O
li	O
If	O
you	O
don	O
'	O
t	O
know	O
whether	O
the	O
regex	O
can	O
match	O
zero	O
-	O
length	O
string	O
or	O
not	O
,	O
do	O
both	O
the	O
actions	O
in	O
step	O
1	O
.	O
(	O
?	O
!	O
\	O
A	O
)	O
checks	O
that	O
the	O
string	O
does	O
not	O
end	O
at	O
the	O
beginning	O
of	O
the	O
string	O
,	O
which	O
implies	O
that	O
the	O
match	O
is	O
an	O
empty	O
match	O
at	O
the	O
beginning	O
of	O
the	O
string	O
.	O
Following	O
behavior	O
in	O
Java	O
7	O
and	O
prior	O
There	O
is	O
no	O
general	O
solution	O
to	O
make	O
split	B-api_mention
backward	O
-	O
compatible	O
with	O
Java	O
7	O
and	O
prior	O
,	O
short	O
of	O
replacing	O
all	O
instance	O
of	O
split	B-api_mention
to	O
point	O
to	O
your	O
own	O
custom	O
implementation	O
.	O
Question	O
-	O
23699371	O
,	O
answer	O
-	O
23733628	O
The	O
easiest	O
way	O
to	O
implement	O
this	O
is	O
to	O
jump	O
on	O
the	O
sort	O
feature	O
as	O
it	O
already	O
provides	O
an	O
optional	O
Comparator	B-api_mention
which	O
can	O
be	O
created	O
using	O
an	O
element	O
’	O
s	O
property	O
.	O
Then	O
you	O
have	O
to	O
filter	O
duplicates	O
out	O
which	O
can	O
be	O
done	O
using	O
a	O
statefull	O
Predicate	B-api_mention
which	O
uses	O
the	O
fact	O
that	O
for	O
a	O
sorted	O
stream	O
all	O
equal	O
elements	O
are	O
adjacent	O
:	O
#	O
pre	O
Of	O
course	O
,	O
a	O
statefull	O
Predicate	B-api_mention
is	O
not	O
thread	O
-	O
safe	O
,	O
however	O
if	O
that	O
’	O
s	O
your	O
need	O
you	O
can	O
move	O
this	O
logic	O
into	O
a	O
Collector	B-api_mention
and	O
let	O
the	O
stream	O
take	O
care	O
of	O
the	O
thread	O
-	O
safety	O
when	O
using	O
your	O
Collector	B-api_mention
.	O
This	O
depends	O
on	O
what	O
you	O
want	O
to	O
do	O
with	O
the	O
stream	O
of	O
distinct	O
elements	O
which	O
you	O
didn	O
’	O
t	O
tell	O
us	O
in	O
your	O
question	O
.	O
Question	O
-	O
31370403	O
I	O
'	O
m	O
currently	O
in	O
the	O
process	O
of	O
writing	O
a	O
paint	O
program	O
in	O
java	O
,	O
designed	O
to	O
have	O
flexible	O
and	O
comprehensive	O
functionalities	O
.	O
It	O
stemmed	O
from	O
my	O
final	O
project	O
,	O
that	O
I	O
wrote	O
overnight	O
the	O
day	O
before	O
.	O
Because	O
of	O
that	O
,	O
it	O
'	O
s	O
got	O
tons	O
and	O
tons	O
of	O
bugs	O
,	O
which	O
I	O
'	O
ve	O
been	O
tackling	O
one	O
by	O
one	O
(	O
e	O
.	O
g	O
.	O
I	O
can	O
only	O
save	O
files	O
that	O
will	O
be	O
empty	O
,	O
my	O
rectangles	O
don	O
'	O
t	O
draw	O
right	O
but	O
my	O
circles	O
do	O
.	O
.	O
.	O
)	O
.	O
This	O
time	O
,	O
I	O
'	O
ve	O
been	O
trying	O
to	O
add	O
undo	O
/	O
redo	O
functionality	O
to	O
my	O
program	O
.	O
However	O
,	O
I	O
can	O
'	O
t	O
"	O
undo	O
"	O
something	O
that	O
I	O
have	O
done	O
.	O
Therefore	O
,	O
I	O
got	O
an	O
idea	O
to	O
save	O
copies	O
of	O
my	O
BufferedImage	B-api_mention
each	O
time	O
a	O
mouseReleased	B-api_mention
event	O
was	O
fired	O
.	O
However	O
,	O
with	O
some	O
of	O
the	O
images	O
going	O
to	O
1920x1080	O
resolution	O
,	O
I	O
figured	O
that	O
this	O
wouldn	O
'	O
t	O
be	O
efficient	O
:	O
storing	O
them	O
would	O
probably	O
take	O
gigabytes	O
of	O
memory	O
.	O
The	O
reason	O
for	O
why	O
I	O
can	O
'	O
t	O
simply	O
paint	O
the	O
same	O
thing	O
with	O
the	O
background	O
colour	O
to	O
undo	O
is	O
because	O
I	O
have	O
many	O
different	O
brushes	O
,	O
which	O
paint	O
based	O
on	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
because	O
there	O
are	O
many	O
different	O
layers	O
(	O
in	O
a	O
single	O
layer	O
)	O
.	O
Then	O
,	O
I	O
'	O
ve	O
considered	O
cloning	O
the	O
Graphics	B-api_mention
objects	O
that	O
I	O
use	O
to	O
paint	O
to	O
the	O
BufferedImage	B-api_mention
.	O
Like	O
this	O
:	O
#	O
pre	O
I	O
haven	O
'	O
t	O
done	O
this	O
before	O
,	O
so	O
I	O
have	O
a	O
couple	O
questions	O
:	O
#	O
li	O
Would	O
I	O
still	O
be	O
wasting	O
pointless	O
memory	O
by	O
doing	O
this	O
,	O
like	O
cloning	O
my	O
BufferedImages	B-api_mention
?	O
#	O
li	O
Is	O
there	O
necessarily	O
a	O
different	O
way	O
I	O
can	O
do	O
this	O
?	O
Question	O
-	O
32323081	O
I	O
have	O
a	O
question	O
regarding	O
Java	O
8	O
inference	O
with	O
respect	O
to	O
lambdas	O
and	O
their	O
related	O
exception	O
signatures	O
.	O
If	O
I	O
define	O
some	O
method	O
foo	O
:	O
#	O
pre	O
then	O
I	O
get	O
the	O
nice	O
and	O
concise	O
semantic	O
of	O
being	O
able	O
to	O
write	O
foo	O
(	O
args	O
)	O
;	O
in	O
most	O
cases	O
for	O
a	O
given	O
T	O
.	O
However	O
,	O
in	O
this	O
example	O
,	O
if	O
my	O
getTheT	O
operation	O
declares	O
that	O
it	O
throws	O
Exception	B-api_mention
,	O
my	O
foo	O
method	O
which	O
takes	O
a	O
Supplier	B-api_mention
no	O
longer	O
compiles	O
:	O
the	O
Supplier	B-api_mention
method	O
signature	O
for	O
get	O
doesn	O
'	O
t	O
throw	O
exceptions	O
.	O
It	O
seems	O
like	O
a	O
decent	O
way	O
to	O
get	O
around	O
this	O
would	O
be	O
to	O
overload	O
foo	O
to	O
accept	O
either	O
option	O
,	O
with	O
the	O
overloaded	O
definition	O
being	O
:	O
#	O
pre	O
where	O
ThrowingSupplier	B-api_mention
is	O
defined	O
as	O
#	O
pre	O
In	O
this	O
way	O
,	O
we	O
have	O
one	O
Supplier	B-api_mention
type	O
which	O
throws	O
exceptions	O
and	O
one	O
which	O
doesn	O
'	O
t	O
.	O
The	O
desired	O
syntax	O
would	O
be	O
something	O
like	O
this	O
:	O
#	O
pre	O
However	O
,	O
this	O
causes	O
issues	O
due	O
to	O
the	O
lambda	O
type	O
being	O
ambiguous	O
(	O
presumably	O
unable	O
to	O
resolve	O
between	O
Supplier	B-api_mention
and	O
ThrowingSupplier	B-api_mention
)	O
.	O
Doing	O
an	O
explicit	O
cast	O
a	O
la	O
foo	O
(	O
args	O
)	O
;	O
would	O
work	O
,	O
but	O
it	O
gets	O
rid	O
of	O
most	O
of	O
the	O
conciseness	O
of	O
the	O
desired	O
syntax	O
.	O
I	O
guess	O
the	O
underlying	O
question	O
is	O
:	O
if	O
the	O
Java	O
compiler	O
is	O
able	O
to	O
resolve	O
the	O
fact	O
that	O
one	O
of	O
my	O
lambdas	O
is	O
incompatible	O
due	O
to	O
it	O
throwing	O
an	O
exception	O
in	O
the	O
Supplier	B-api_mention
-	O
only	O
case	O
,	O
why	O
isn	O
'	O
t	O
it	O
able	O
to	O
use	O
that	O
same	O
information	O
to	O
derive	O
the	O
type	O
of	O
the	O
lambda	O
in	O
the	O
secondary	O
,	O
type	O
-	O
inference	O
case	O
?	O
Any	O
information	O
or	O
resources	O
which	O
anyone	O
could	O
point	O
me	O
to	O
would	O
likewise	O
be	O
much	O
appreciated	O
,	O
as	O
I	O
'	O
m	O
just	O
not	O
too	O
sure	O
where	O
to	O
look	O
for	O
more	O
information	O
on	O
the	O
matter	O
.	O
Thanks	O
!	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
20262456	O
You	O
might	O
wanna	O
try	O
return	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33148103	O
Looking	O
at	O
the	O
code	O
:	O
int	O
newCapacity	O
=	O
oldCapacity	O
+	O
(	O
oldCapacity	O
>	O
>	O
1	O
)	O
;	O
If	O
oldCapacity	O
is	O
quite	O
large	O
,	O
this	O
will	O
overflow	O
,	O
and	O
newCapacity	O
will	O
be	O
a	O
negative	O
number	O
.	O
A	O
comparison	O
like	O
newCapacity	O
<	O
oldCapacity	O
will	O
incorrectly	O
evaluate	O
true	O
and	O
the	O
ArrayList	B-api_mention
will	O
fail	O
to	O
grow	O
.	O
Instead	O
,	O
the	O
code	O
as	O
written	O
(	O
newCapacity	O
-	O
minCapacity	O
<	O
0	O
returns	O
false	O
)	O
will	O
allow	O
the	O
negative	O
value	O
of	O
newCapacity	O
to	O
be	O
further	O
evaluated	O
in	O
the	O
next	O
line	O
,	O
resulting	O
in	O
recalculating	O
newCapacity	O
by	O
invoking	O
hugeCapacity	O
(	O
newCapacity	O
=	O
hugeCapacity	O
(	O
args	O
)	O
;	O
)	O
to	O
allow	O
for	O
the	O
ArrayList	B-api_mention
to	O
grow	O
up	O
to	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
.	O
This	O
is	O
what	O
the	O
/	O
/	O
overflow	O
-	O
conscious	O
code	O
comment	O
is	O
trying	O
to	O
communicate	O
,	O
though	O
rather	O
obliquely	O
.	O
So	O
,	O
bottom	O
line	O
,	O
the	O
new	O
comparison	O
protects	O
against	O
allocating	O
an	O
ArrayList	B-api_mention
larger	O
than	O
the	O
predefined	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
while	O
allowing	O
it	O
to	O
grow	O
right	O
up	O
to	O
that	O
limit	O
if	O
needed	O
.	O
Question	O
-	O
18263489	O
,	O
answer	O
-	O
29873100	O
It	O
isn	O
'	O
t	O
pretty	O
,	O
but	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
allows	O
you	O
to	O
use	O
a	O
null	O
String	B-api_mention
in	O
a	O
switch	O
.	O
If	O
it	O
finds	O
null	O
,	O
it	O
converts	O
it	O
to	O
StringLiteral	O
,	O
otherwise	O
it	O
just	O
returns	O
the	O
same	O
String	B-api_mention
you	O
passed	O
it	O
.	O
If	O
you	O
don	O
'	O
t	O
handle	O
StringLiteral	O
explicitly	O
,	O
then	O
it	O
will	O
go	O
to	O
default	O
.	O
The	O
only	O
caveat	O
is	O
that	O
there	O
is	O
no	O
way	O
of	O
distinguishing	O
between	O
the	O
String	B-api_mention
StringLiteral	O
and	O
an	O
actual	O
null	O
String	B-api_mention
.	O
#	O
pre	O
Question	O
-	O
5243754	O
What	O
is	O
the	O
difference	O
between	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
within	O
HttpServletRequest	B-api_mention
class	O
?	O
Question	O
-	O
5455794	O
,	O
answer	O
-	O
5455809	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
removes	O
all	O
whitespaces	O
and	O
non	O
-	O
visible	O
characters	O
(	O
e	O
.	O
g	O
.	O
,	O
tab	O
,	O
\	O
n	O
)	O
.	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
produce	O
the	O
same	O
result	O
.	O
The	O
second	O
regex	O
is	O
20	O
%	O
faster	O
than	O
the	O
first	O
one	O
,	O
but	O
as	O
the	O
number	O
consecutive	O
spaces	O
increases	O
,	O
the	O
first	O
one	O
performs	O
better	O
than	O
the	O
second	O
one	O
.	O
Assign	O
the	O
value	O
to	O
a	O
variable	O
,	O
if	O
not	O
used	O
directly	O
:	O
st	O
=	O
st	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993478	O
You	O
are	O
consuming	O
the	O
value	O
of	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
asking	O
for	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
per	O
default	O
,	O
returns	O
everything	O
to	O
the	O
next	O
whitespace	O
(	O
args	O
)	O
.	O
So	O
you	O
are	O
iterating	O
through	O
all	O
whitespace	O
seperated	O
strings	O
,	O
and	O
after	O
each	O
of	O
them	O
you	O
are	O
asking	O
about	O
the	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
i	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
.	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
(	O
still	O
a	O
whitespace	O
left	O
)	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
(	O
Line	O
Seperator	O
,	O
probably	O
)	O
.	O
haxNext	B-api_mention
?	O
False	O
,	O
no	O
whitespace	O
anymore	O
.	O
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993534	O
You	O
have	O
a	O
single	O
extra	O
newline	O
at	O
the	O
end	O
of	O
your	O
file	O
.	O
#	O
li	O
hasNextLine	B-api_mention
(	I-api_mention
)	I-api_mention
checks	O
to	O
see	O
if	O
there	O
is	O
another	O
linePattern	B-api_mention
in	O
the	O
buffer	O
.	O
#	O
li	O
hasNext	B-api_mention
(	I-api_mention
)	I-api_mention
checks	O
to	O
see	O
if	O
there	O
is	O
a	O
parseable	O
token	O
in	O
the	O
buffer	O
,	O
as	O
separated	O
by	O
the	O
scanner	O
'	O
s	O
delimiter	O
.	O
Since	O
the	O
scanner	O
'	O
s	O
delimiter	O
is	O
whitespace	O
,	O
and	O
the	O
linePattern	B-api_mention
is	O
also	O
white	O
space	O
,	O
it	O
is	O
possible	O
for	O
there	O
to	O
be	O
a	O
linePattern	B-api_mention
in	O
the	O
buffer	O
but	O
no	O
parseable	O
tokens	O
.	O
Typically	O
,	O
the	O
most	O
common	O
way	O
to	O
deal	O
with	O
this	O
issue	O
by	O
always	O
calling	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
after	O
parsing	O
all	O
the	O
tokens	O
(	O
e	O
.	O
g	O
.	O
numbers	O
)	O
in	O
each	O
line	O
of	O
your	O
text	O
.	O
You	O
need	O
to	O
do	O
this	O
when	O
using	O
Scanner	B-api_mention
when	O
reading	O
a	O
user	O
'	O
s	O
input	O
too	O
from	O
System	B-api_mention
.	I-api_mention
in	I-api_mention
.	O
To	O
advance	O
the	O
scanner	O
past	O
this	O
whitespace	O
delimiter	O
,	O
you	O
must	O
use	O
scanner	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
clear	O
the	O
line	O
delimiter	O
.	O
See	O
:	O
Using	O
scanner	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
)	I-api_mention
Appendix	O
:	O
LinePattern	B-api_mention
is	O
defined	O
to	O
be	O
a	O
Pattern	B-api_mention
that	O
matches	O
this	O
:	O
#	O
pre	O
The	O
default	O
token	O
delimiter	O
is	O
this	O
Pattern	B-api_mention
:	O
private	O
static	O
Pattern	B-api_mention
WHITESPACE	O
_	O
PATTERN	O
=	O
Pattern	B-api_mention
.	I-api_mention
compile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
29328785	O
#	O
pre	O
Compile	O
>	O
javac	O
BigDecimalTest	O
.	O
java	O
Execute	O
>	O
java	O
BigDecimalTest	O
Output	O
#	O
pre	O
The	O
value	O
of	O
z	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
output	O
is	O
correct	O
4	O
.	O
883242e	O
+	O
888	O
/	O
7	O
.	O
115109e	O
+	O
302	O
=	O
6	O
.	O
863200e	O
+	O
585	O
as	O
is	O
the	O
value	O
of	O
y	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
notice	O
that	O
the	O
value	O
given	O
for	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
completely	O
wrong	O
.	O
Why	O
is	O
this	O
?	O
Strangely	O
,	O
if	O
the	O
scale	O
(	O
i	O
.	O
e	O
.	O
desired	O
decimal	O
places	O
)	O
of	O
the	O
result	O
of	O
the	O
division	O
is	O
changed	O
BigDecimal	B-api_mention
z	O
=	O
x	O
.	B-api_mention
divide	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
produce	O
the	O
correct	O
value	O
for	O
x	O
.	O
Or	O
,	O
if	O
the	O
operands	O
are	O
swapped	O
BigDecimal	B-api_mention
z	O
=	O
y	O
.	B-api_mention
divide	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
also	O
then	O
produce	O
the	O
correct	O
value	O
.	O
Or	O
,	O
if	O
the	O
exponent	O
of	O
x	O
is	O
changed	O
from	O
e	O
+	O
888	O
to	O
e	O
.	O
g	O
.	O
e	O
+	O
878	O
then	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
correct	O
.	O
Or	O
,	O
if	O
another	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
is	O
added	O
above	O
the	O
divide	O
operation	O
,	O
then	O
both	O
x	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
will	O
produce	O
the	O
correct	O
value	O
!	O
On	O
the	O
machine	O
I	O
'	O
m	O
testing	O
this	O
,	O
Windows	O
7	O
64	O
bit	O
,	O
the	O
behaviour	O
is	O
the	O
same	O
using	O
java	O
7	O
and	O
8	O
,	O
both	O
32bit	O
and	O
64	O
bit	O
versions	O
,	O
but	O
testing	O
online	O
at	O
#	O
a	O
produces	O
different	O
results	O
for	O
java	O
7	O
and	O
java	O
8	O
.	O
Using	O
java	O
7	O
,	O
the	O
value	O
of	O
x	O
is	O
given	O
correctly	O
:	O
#	O
a	O
,	O
but	O
using	O
java	O
8	O
its	O
value	O
is	O
incorrect	O
:	O
#	O
a	O
.	O
Also	O
,	O
this	O
behaviour	O
is	O
not	O
unique	O
to	O
this	O
particular	O
value	O
of	O
x	O
,	O
as	O
calling	O
toString	B-api_mention
on	O
other	O
BigDecimals	B-api_mention
with	O
more	O
than	O
about	O
1500	O
digits	O
after	O
passing	O
them	O
as	O
the	O
first	O
operand	O
to	O
a	O
divide	O
operation	O
will	O
also	O
produce	O
incorrect	O
values	O
.	O
What	O
is	O
the	O
explanation	O
for	O
this	O
?	O
The	O
divide	O
operation	O
seems	O
to	O
be	O
mutating	O
the	O
value	O
produced	O
by	O
subsequent	O
toString	B-api_mention
calls	O
on	O
its	O
operands	O
.	O
Does	O
this	O
happen	O
on	O
your	O
platform	O
?	O
Edit	O
:	O
The	O
issue	O
seems	O
to	O
be	O
with	O
the	O
java	O
8	O
runtime	O
only	O
,	O
as	O
the	O
above	O
program	O
compiled	O
with	O
java	O
7	O
produces	O
correct	O
output	O
when	O
executed	O
with	O
the	O
java	O
7	O
runtime	O
,	O
but	O
incorrect	O
output	O
when	O
executed	O
with	O
the	O
java	O
8	O
runtime	O
.	O
Edit	O
:	O
I	O
'	O
ve	O
tested	O
with	O
the	O
early	O
access	O
jre1	O
.	O
8	O
.	O
0	O
_	O
60	O
and	O
the	O
bug	O
does	O
not	O
appear	O
,	O
and	O
according	O
to	O
Marco13	O
'	O
s	O
answer	O
it	O
was	O
fixed	O
in	O
build	O
51	O
.	O
The	O
Oracle	O
JDK	O
8	O
product	O
binaries	O
are	O
only	O
at	O
update	O
40	O
though	O
so	O
it	O
may	O
be	O
some	O
time	O
before	O
the	O
fixed	O
versions	O
are	O
widely	O
used	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
20593147	O
In	O
Java	O
8	O
,	O
you	O
could	O
do	O
:	O
#	O
pre	O
Some	O
notes	O
:	O
The	O
stream	O
returned	O
by	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	O
unlike	O
most	O
streams	O
)	O
needs	O
to	O
be	O
closed	O
.	O
For	O
the	O
reasons	O
mentioned	O
here	O
I	O
avoid	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
strange	O
code	O
(	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
lines	B-api_mention
:	I-api_mention
:	I-api_mention
iterator	I-api_mention
casts	O
a	O
Stream	B-api_mention
to	O
an	O
Iterable	B-api_mention
.	O
Question	O
-	O
22463062	O
,	O
answer	O
-	O
28324294	O
You	O
can	O
also	O
use	O
LocalDate	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
LocalDateTime	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
String	B-api_mention
without	O
providing	O
it	O
with	O
a	O
pattern	O
,	O
if	O
the	O
String	B-api_mention
is	O
in	O
ISO	O
-	O
8601	O
format	O
.	O
for	O
example	O
,	O
#	O
pre	O
Output	O
,	O
#	O
pre	O
and	O
use	O
DateTimeFormatter	B-api_mention
only	O
if	O
you	O
have	O
to	O
deal	O
with	O
other	O
date	O
patterns	O
,	O
For	O
example	O
,	O
dd	O
MMM	O
uuuu	O
represents	O
the	O
day	O
of	O
the	O
month	O
(	O
two	O
digits	O
)	O
,	O
three	O
letters	O
of	O
the	O
name	O
of	O
the	O
month	O
(	O
Jan	O
,	O
Feb	O
,	O
Mar	O
,	O
.	O
.	O
.	O
)	O
,	O
and	O
a	O
four	O
-	O
digit	O
year	O
:	O
#	O
pre	O
Output	O
04	O
Aug	O
2015	O
parses	O
to	O
2015	O
-	O
08	O
-	O
04	O
also	O
remember	O
that	O
the	O
DateTimeFormatter	B-api_mention
object	O
is	O
bidirectional	O
;	O
it	O
can	O
both	O
parse	O
input	O
and	O
format	O
output	O
.	O
#	O
pre	O
Output	O
2015	O
-	O
08	O
-	O
04	O
formats	O
as	O
04	O
Aug	O
2015	O
(	O
see	O
complete	O
list	O
of	O
Patterns	B-api_mention
for	O
Formatting	O
and	O
Parsing	O
DateFormatter	B-api_mention
)	O
#	O
pre	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29096777	O
The	O
only	O
solution	O
I	O
come	O
up	O
with	O
for	O
the	O
moment	O
is	O
by	O
implementing	O
your	O
own	O
custom	O
collector	O
.	O
Before	O
reading	O
the	O
solution	O
,	O
I	O
want	O
to	O
add	O
a	O
few	O
notes	O
about	O
this	O
.	O
I	O
took	O
this	O
question	O
more	O
as	O
a	O
programming	O
exercise	O
,	O
I	O
'	O
m	O
not	O
sure	O
if	O
it	O
can	O
be	O
done	O
with	O
a	O
parallel	O
stream	O
.	O
So	O
you	O
have	O
to	O
be	O
aware	O
that	O
it	O
'	O
ll	O
silently	O
break	O
if	O
the	O
pipeline	O
is	O
run	O
in	O
parallel	O
.	O
This	O
is	O
not	O
a	O
desirable	O
behavior	O
and	O
should	O
be	O
avoided	O
.	O
This	O
is	O
why	O
I	O
throw	O
an	O
exception	O
in	O
the	O
combiner	O
part	O
(	O
instead	O
of	O
(	O
l1	O
,	O
l2	O
)	O
-	O
>	O
{	O
l1	O
.	B-api_mention
addAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
return	O
l1	O
;	O
}	O
)	O
,	O
as	O
it	O
'	O
s	O
used	O
in	O
parallel	O
when	O
combining	O
the	O
two	O
lists	O
,	O
so	O
that	O
you	O
have	O
an	O
exception	O
instead	O
of	O
a	O
wrong	O
result	O
.	O
Also	O
this	O
is	O
not	O
very	O
efficient	O
due	O
to	O
list	O
copying	O
(	O
although	O
it	O
uses	O
a	O
native	O
method	O
to	O
copy	O
the	O
underlying	O
array	O
)	O
.	O
So	O
here	O
'	O
s	O
the	O
collector	O
implementation	O
:	O
#	O
pre	O
and	O
how	O
to	O
use	O
it	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ll	O
=	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Output	O
:	O
[	O
[	O
a	O
,	O
b	O
]	O
,	O
[	O
c	O
]	O
,	O
[	O
d	O
,	O
e	O
]	O
]	O
As	O
the	O
answer	O
of	O
Joop	O
Eggen	O
is	O
out	O
,	O
it	O
appears	O
that	O
it	O
can	O
be	O
done	O
in	O
parallel	O
(	O
give	O
him	O
credit	O
for	O
that	O
!	O
)	O
.	O
With	O
that	O
it	O
reduces	O
the	O
custom	O
collector	O
implementation	O
to	O
:	O
#	O
pre	O
which	O
let	O
the	O
paragraph	O
about	O
parallelism	O
a	O
bit	O
obsolete	O
,	O
however	O
I	O
let	O
it	O
as	O
it	O
can	O
be	O
a	O
good	O
reminder	O
.	O
Note	O
that	O
the	O
Stream	B-api_mention
API	O
is	O
not	O
always	O
a	O
substitute	O
.	O
There	O
are	O
tasks	O
that	O
are	O
easier	O
and	O
more	O
suitable	O
using	O
the	O
streams	O
and	O
there	O
are	O
tasks	O
that	O
are	O
not	O
.	O
In	O
your	O
case	O
,	O
you	O
could	O
also	O
create	O
a	O
utility	O
method	O
for	O
that	O
:	O
#	O
pre	O
and	O
call	O
it	O
like	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
splitBySeparator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
It	O
can	O
be	O
improved	O
for	O
checking	O
edge	O
-	O
cases	O
.	O
Question	O
-	O
32046078	O
I	O
have	O
a	O
server	O
side	O
implemented	O
in	O
Scala	O
and	O
React	O
/	O
Flux	O
based	O
front	O
end	O
.	O
My	O
services	O
return	O
Futures	O
and	O
they	O
are	O
handled	O
within	O
Scalatra	O
'	O
s	O
AsyncResult	O
for	O
JSON	O
responses	O
.	O
For	O
isomorphic	O
/	O
server	O
side	O
rendering	O
setup	O
I	O
did	O
not	O
want	O
to	O
change	O
services	O
to	O
be	O
blocking	O
so	O
I	O
started	O
with	O
Scala	O
Future	O
-	O
>	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	I-api_mention
Function	I-api_mention
conversion	O
shown	O
here	O
.	O
But	O
the	O
dispatcher	O
in	O
Flux	O
would	O
like	O
to	O
have	O
JS	O
Promise	O
.	O
So	O
far	O
I	O
found	O
only	O
rather	O
complicated	O
sounding	O
way	O
around	O
this	O
Slides	O
68	O
-	O
81	O
Is	O
there	O
any	O
recommended	O
way	O
to	O
deal	O
with	O
this	O
Scala	O
Future	O
-	O
>	O
JS	O
Promise	O
conversion	O
?	O
Question	O
-	O
12468764	O
,	O
answer	O
-	O
13368831	O
Actual	O
Answer	O
:	O
The	O
default	O
deserializer	O
for	O
enums	O
uses	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
deserialize	O
,	O
so	O
it	O
'	O
s	O
not	O
using	O
the	O
@	O
JsonValue	O
.	O
So	O
as	O
@	O
OldCurmudgeon	O
pointed	O
out	O
,	O
you	O
'	O
d	O
need	O
to	O
pass	O
in	O
{	O
StringLiteral	O
:	O
StringLiteral	O
}	O
to	O
match	O
the	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
value	O
.	O
An	O
other	O
option	O
(	O
assuming	O
you	O
want	O
the	O
write	O
and	O
read	O
json	O
values	O
to	O
be	O
the	O
same	O
)	O
.	O
.	O
.	O
More	O
Info	O
:	O
There	O
is	O
(	O
yet	O
)	O
another	O
way	O
to	O
manage	O
the	O
serialization	O
and	O
deserialization	O
process	O
with	O
Jackson	O
.	O
You	O
can	O
specify	O
these	O
annotations	O
to	O
use	O
your	O
own	O
custom	O
serializer	O
and	O
deserializer	O
:	O
#	O
pre	O
Then	O
you	O
have	O
to	O
write	O
MySerializer	O
and	O
MyDeserializer	O
which	O
look	O
like	O
this	O
:	O
MySerializer	O
#	O
pre	O
MyDeserializer	O
#	O
pre	O
Last	O
little	O
bit	O
,	O
particularly	O
for	O
doing	O
this	O
to	O
an	O
enum	O
JsonEnum	O
that	O
serializes	O
with	O
the	O
method	O
getYourValue	O
(	O
args	O
)	O
,	O
your	O
serializer	O
and	O
deserializer	O
might	O
look	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
7569335	O
,	O
answer	O
-	O
39329245	O
As	O
others	O
have	O
pointed	O
out	O
the	O
preferred	O
way	O
is	O
to	O
use	O
:	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reverse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
if	O
you	O
want	O
to	O
implement	O
this	O
by	O
youself	O
,	O
i	O
'	O
am	O
afraid	O
that	O
the	O
rest	O
of	O
responses	O
have	O
flaws	O
.	O
The	O
reason	O
is	O
that	O
String	B-api_mention
represent	O
a	O
list	O
of	O
Unicode	O
points	O
,	O
encoded	O
in	O
a	O
char	O
[	O
]	O
array	O
according	O
to	O
the	O
variable	O
-	O
length	O
encoding	O
:	O
UTF	O
-	O
16	O
.	O
This	O
means	O
some	O
code	O
points	O
use	O
a	O
single	O
element	O
of	O
the	O
array	O
(	O
one	O
code	O
unit	O
)	O
but	O
others	O
use	O
two	O
of	O
them	O
,	O
so	O
there	O
might	O
be	O
pairs	O
of	O
characters	O
that	O
must	O
be	O
treated	O
as	O
a	O
single	O
unit	O
(	O
consecutive	O
"	O
high	O
"	O
and	O
"	O
low	O
"	O
surrogates	O
)	O
#	O
pre	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
22593693	O
There	O
seem	O
to	O
be	O
many	O
questions	O
about	O
this	O
issue	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Scanner	I-api_mention
.	O
I	O
think	O
a	O
more	O
readable	O
/	O
idiomatic	O
solution	O
would	O
be	O
to	O
call	O
scanner	O
.	B-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
drop	O
any	O
newline	O
characters	O
after	O
calling	O
nextInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271460	O
The	O
"	O
$	O
1	O
"	O
is	O
not	O
"	O
useless	O
non	O
-	O
sense	O
"	O
.	O
If	O
your	O
class	O
is	O
anonymous	O
,	O
a	O
number	O
is	O
appended	O
.	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
class	O
itself	O
,	O
but	O
its	O
declaring	O
class	O
,	O
then	O
you	O
can	O
use	O
getEnclosingClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
For	O
example	O
:	O
#	O
pre	O
You	O
can	O
move	O
that	O
in	O
some	O
static	O
utility	O
method	O
.	O
But	O
note	O
that	O
this	O
is	O
not	O
the	O
current	O
class	O
name	O
.	O
The	O
anonymous	O
class	O
is	O
different	O
class	O
than	O
its	O
enclosing	O
class	O
.	O
The	O
case	O
is	O
similar	O
for	O
inner	O
classes	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
19629304	O
If	O
you	O
do	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
main	O
method	O
,	O
the	O
thread	O
of	O
main	O
method	O
will	O
invoke	O
the	O
run	O
method	O
instead	O
of	O
the	O
thread	O
you	O
require	O
to	O
run	O
.	O
The	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
creates	O
new	O
thread	O
and	O
for	O
which	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
to	O
be	O
done	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
29938300	O
Use	O
this	O
method	O
,	O
but	O
be	O
careful	O
to	O
make	O
an	O
object	O
in	O
your	O
main	O
.	O
public	O
static	O
void	O
setName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
Class	B-api_mention
setClass	O
=	O
obj	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
String	B-api_mention
className	O
=	O
setClass	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
}	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276497	O
No	O
,	O
the	O
topmost	O
level	O
Stream	B-api_mention
or	O
reader	O
will	O
ensure	O
that	O
all	O
underlying	O
streams	O
/	O
readers	O
are	O
closed	O
.	O
Check	O
the	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
implementation	O
of	O
your	O
topmost	O
level	O
stream	O
.	O
Question	O
-	O
27908213	O
Are	O
enum	O
names	O
interned	O
in	O
Java	O
?	O
I	O
.	O
e	O
.	O
is	O
it	O
guaranteed	O
that	O
enum1	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
enum2	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
case	O
of	O
the	O
same	O
name	O
?	O
And	O
is	O
it	O
safe	O
to	O
compare	O
enum	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
a	O
String	B-api_mention
that	O
is	O
guaranteed	O
to	O
be	O
interned	O
.	O
Question	O
-	O
25903137	O
,	O
answer	O
-	O
25903190	O
#	O
pre	O
It	O
'	O
s	O
not	O
quite	O
as	O
nice	O
as	O
the	O
list	O
code	O
.	O
You	O
can	O
'	O
t	O
construct	O
new	O
Map	B-api_mention
.	I-api_mention
Entry	I-api_mention
s	O
in	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
so	O
the	O
work	O
is	O
mixed	O
into	O
the	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
.	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894348	O
The	O
first	O
one	O
using	O
str	O
.	B-api_mention
charAt	I-api_mention
should	O
be	O
faster	O
.	O
If	O
you	O
dig	O
inside	O
the	O
source	O
code	O
of	O
String	O
class	O
,	O
we	O
can	O
see	O
that	O
charAt	O
is	O
implemented	O
as	O
follows	O
:	O
#	O
pre	O
Here	O
,	O
all	O
it	O
does	O
is	O
index	O
an	O
array	O
and	O
return	O
the	O
value	O
.	O
Now	O
,	O
if	O
we	O
see	O
the	O
implementation	O
of	O
toCharArray	B-api_mention
,	O
we	O
will	O
find	O
the	O
below	O
:	O
#	O
pre	O
As	O
you	O
see	O
,	O
it	O
is	O
doing	O
a	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
which	O
is	O
definitely	O
going	O
to	O
be	O
a	O
tad	O
slower	O
than	O
not	O
doing	O
it	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16637740	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
be	O
implemented	O
to	O
be	O
faster	O
than	O
for	O
-	O
each	O
loop	O
,	O
because	O
the	O
iterable	O
knows	O
the	O
best	O
way	O
to	O
iterate	O
its	O
elements	O
,	O
as	O
opposed	O
to	O
the	O
standard	O
iterator	O
way	O
.	O
So	O
the	O
difference	O
is	O
loop	O
internally	O
or	O
loop	O
externally	O
.	O
For	O
example	O
ArrayList	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
be	O
simply	O
implemented	O
as	O
#	O
pre	O
as	O
opposed	O
to	O
the	O
for	O
-	O
each	O
loop	O
which	O
requires	O
a	O
lot	O
of	O
scaffolding	O
#	O
pre	O
However	O
,	O
we	O
also	O
need	O
to	O
account	O
for	O
two	O
overhead	O
costs	O
by	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
one	O
is	O
making	O
the	O
lambda	O
object	O
,	O
the	O
other	O
is	O
invoking	O
the	O
lambda	O
method	O
.	O
They	O
are	O
probably	O
not	O
significant	O
.	O
see	O
also	O
#	O
a	O
for	O
comparing	O
internal	O
/	O
external	O
iterations	O
for	O
different	O
use	O
cases	O
.	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
30548433	O
I	O
would	O
like	O
to	O
point	O
out	O
that	O
StreamEx	O
does	O
implement	O
Iterable	B-api_mention
(	O
and	O
Stream	B-api_mention
)	O
,	O
as	O
well	O
as	O
a	O
host	O
of	O
other	O
immensely	O
awesome	O
functionality	O
missing	O
from	O
Stream	B-api_mention
.	O
Question	O
-	O
32859038	O
I	O
have	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
collection	O
.	O
I	O
need	O
to	O
convert	O
it	O
into	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
The	O
key	O
of	O
the	O
map	O
must	O
be	O
the	O
index	O
of	O
the	O
item	O
in	O
the	O
collection	O
.	O
I	O
can	O
not	O
figure	O
it	O
out	O
how	O
to	O
do	O
this	O
with	O
streams	O
.	O
Something	O
like	O
:	O
items	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Any	O
help	O
?	O
As	O
this	O
question	O
is	O
identified	O
as	O
possible	O
duplicate	O
I	O
need	O
to	O
add	O
that	O
my	O
concrete	O
problem	O
was	O
-	O
how	O
to	O
get	O
the	O
position	O
of	O
the	O
item	O
in	O
the	O
list	O
and	O
put	O
it	O
as	O
a	O
key	O
value	O
Question	O
-	O
20945049	O
We	O
all	O
know	O
that	O
String	B-api_mention
is	O
immutable	O
in	O
Java	O
,	O
but	O
check	O
the	O
following	O
code	O
:	O
#	O
pre	O
Why	O
does	O
this	O
program	O
operate	O
like	O
this	O
?	O
And	O
why	O
is	O
the	O
value	O
of	O
s1	O
and	O
s2	O
changed	O
,	O
but	O
not	O
s3	O
?	O
Question	O
-	O
10904911	O
I	O
am	O
using	O
trying	O
to	O
use	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
but	O
I	O
think	O
I	O
am	O
doing	O
it	O
wrong	O
:	O
#	O
a	O
My	O
code	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
[	O
I	O
@	O
23fc4bec	O
Also	O
I	O
tried	O
printing	O
like	O
this	O
,	O
but	O
:	O
#	O
pre	O
I	O
took	O
this	O
code	O
out	O
of	O
bigger	O
and	O
more	O
complex	O
code	O
,	O
but	O
I	O
can	O
add	O
it	O
if	O
needed	O
.	O
But	O
this	O
should	O
give	O
general	O
information	O
.	O
I	O
am	O
looking	O
for	O
output	O
,	O
like	O
in	O
Oracle	O
'	O
s	O
documentation	O
:	O
#	O
blockquote	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
20130475	O
To	O
convert	O
a	O
Stream	B-api_mention
to	O
an	O
Iterable	B-api_mention
,	O
you	O
can	O
do	O
#	O
pre	O
To	O
pass	O
a	O
Stream	B-api_mention
to	O
a	O
method	O
that	O
expects	O
Iterable	B-api_mention
,	O
void	O
foo	O
(	O
args	O
)	O
simply	O
foo	O
(	O
args	O
)	O
however	O
it	O
probably	O
looks	O
funny	O
;	O
it	O
might	O
be	O
better	O
to	O
be	O
a	O
little	O
bit	O
more	O
explicit	O
foo	O
(	O
args	O
)	O
;	O
Question	O
-	O
14833008	O
,	O
answer	O
-	O
14833048	O
You	O
need	O
to	O
escape	O
the	O
dot	O
if	O
you	O
want	O
to	O
split	O
on	O
a	O
literal	O
dot	O
:	O
String	B-api_mention
extensionRemoved	O
=	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
Otherwise	O
you	O
are	O
splitting	O
on	O
the	O
regex	O
.	O
,	O
which	O
means	O
"	O
any	O
character	O
"	O
.	O
Note	O
the	O
double	O
backslash	O
needed	O
to	O
create	O
a	O
single	O
backslash	O
in	O
the	O
regex	O
.	O
You	O
'	O
re	O
getting	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
because	O
your	O
input	O
string	O
is	O
just	O
a	O
dot	O
,	O
ie	O
StringLiteral	O
,	O
which	O
is	O
an	O
edge	O
case	O
that	O
produces	O
an	O
empty	O
array	O
when	O
split	O
on	O
dot	O
;	O
split	B-api_mention
(	I-api_mention
regex	I-api_mention
)	I-api_mention
removes	O
all	O
trailing	O
blanks	O
from	O
the	O
result	O
,	O
but	O
since	O
splitting	O
a	O
dot	O
on	O
a	O
dot	O
leaves	O
only	O
two	O
blanks	O
,	O
after	O
trailing	O
blanks	O
are	O
removed	O
you	O
'	O
re	O
left	O
with	O
an	O
empty	O
array	O
.	O
To	O
avoid	O
getting	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
for	O
this	O
edge	O
case	O
,	O
use	O
the	O
overloaded	O
version	O
of	O
split	B-api_mention
(	I-api_mention
regex	I-api_mention
,	I-api_mention
limit	I-api_mention
)	I-api_mention
,	O
which	O
has	O
a	O
second	O
parameter	O
that	O
is	O
the	O
size	O
limit	O
for	O
the	O
resulting	O
array	O
.	O
When	O
limit	O
is	O
negative	O
,	O
the	O
behaviour	O
of	O
removing	O
trailing	O
blanks	O
from	O
the	O
resulting	O
array	O
is	O
disabled	O
:	O
StringLiteral	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
returns	O
an	O
array	O
of	O
two	O
blanks	O
,	O
ie	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
ie	O
,	O
when	O
filename	O
is	O
just	O
a	O
dot	O
StringLiteral	O
,	O
calling	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
will	O
return	O
a	O
blank	O
,	O
but	O
calling	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
will	O
throw	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
.	O
Question	O
-	O
31471444	O
,	O
answer	O
-	O
31476657	O
From	O
Class	O
NumberUtils	B-api_mention
you	O
'	O
ll	O
see	O
it	O
'	O
s	O
defined	O
as	O
:	O
#	O
pre	O
So	O
,	O
you	O
'	O
ll	O
see	O
that	O
INTEGER	O
_	O
ONE	O
is	O
not	O
the	O
same	O
as	O
1	O
.	O
It	O
'	O
s	O
an	O
object	O
that	O
'	O
s	O
already	O
been	O
constructed	O
for	O
you	O
.	O
So	O
,	O
if	O
we	O
'	O
re	O
needing	O
an	O
instance	O
of	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
rather	O
than	O
create	O
your	O
own	O
,	O
you	O
can	O
reuse	O
the	O
one	O
from	O
the	O
library	O
saving	O
time	O
and	O
memory	O
.	O
It	O
really	O
depends	O
on	O
your	O
application	O
,	O
if	O
you	O
indeed	O
what	O
the	O
int	O
version	O
of	O
1	O
,	O
then	O
,	O
you	O
'	O
d	O
probably	O
be	O
better	O
of	O
using	O
that	O
instead	O
of	O
this	O
Integer	B-api_mention
class	O
.	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888481	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
,	O
if	O
you	O
are	O
already	O
have	O
an	O
array	O
,	O
you	O
can	O
also	O
do	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
For	O
primitive	O
types	O
use	O
IntStream	B-api_mention
.	I-api_mention
of	I-api_mention
or	O
LongStream	B-api_mention
.	I-api_mention
of	I-api_mention
etc	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29099896	O
This	O
is	O
a	O
very	O
interesting	O
problem	O
.	O
I	O
came	O
up	O
with	O
a	O
one	O
line	O
solution	O
.	O
It	O
might	O
not	O
very	O
performant	O
but	O
it	O
works	O
.	O
#	O
pre	O
It	O
is	O
a	O
similar	O
idea	O
that	O
@	O
Rohit	O
Jain	O
came	O
up	O
with	O
.	O
I	O
'	O
m	O
grouping	O
the	O
space	O
between	O
the	O
null	O
values	O
.	O
If	O
you	O
really	O
want	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
you	O
may	O
append	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ll	O
=	O
cl	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
34250207	O
As	O
I	O
recall	O
,	O
before	O
Java	O
8	O
,	O
the	O
default	O
capacity	O
of	O
ArrayList	B-api_mention
was	O
10	O
.	O
Surprisingly	O
,	O
the	O
comment	O
on	O
the	O
default	O
(	O
void	O
)	O
constructor	O
still	O
says	O
:	O
Constructs	O
an	O
empty	O
list	O
with	O
an	O
initial	O
capacity	O
of	O
ten	O
.	O
From	O
ArrayList	O
.	O
java	O
:	O
#	O
pre	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29922469	O
My	O
guess	O
is	O
that	O
enums	O
are	O
limited	O
in	O
size	O
(	O
i	O
.	O
e	O
the	O
size	O
is	O
not	O
limited	O
by	O
language	O
but	O
limited	O
by	O
usage	O
)	O
and	O
thus	O
they	O
don	O
'	O
t	O
need	O
a	O
native	O
stream	O
api	O
.	O
Streams	O
are	O
very	O
good	O
when	O
you	O
have	O
to	O
manipulate	O
transform	O
and	O
recollect	O
the	O
elements	O
in	O
a	O
stream	O
;	O
these	O
are	O
not	O
common	O
uses	O
case	O
for	O
Enum	O
(	O
usually	O
you	O
iterate	O
over	O
enum	O
values	O
,	O
but	O
rarely	O
you	O
need	O
to	O
transform	O
,	O
map	O
and	O
collect	O
them	O
)	O
.	O
If	O
you	O
need	O
only	O
to	O
do	O
an	O
action	O
over	O
each	O
elements	O
perhaps	O
you	O
should	O
expose	O
only	O
a	O
forEach	B-api_mention
method	O
#	O
pre	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
32866218	O
The	O
main	O
reason	O
with	O
HashMap	B-api_mention
not	O
allowing	O
primitive	O
as	O
keys	O
is	O
that	O
HashMap	B-api_mention
is	O
designed	O
in	O
such	O
a	O
way	O
that	O
for	O
comparing	O
the	O
keys	O
,	O
it	O
makes	O
use	O
of	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
,	O
and	O
a	O
method	O
can	O
be	O
called	O
only	O
on	O
an	O
object	O
not	O
on	O
a	O
primitive	O
.	O
Thus	O
when	O
int	O
is	O
autoboxed	O
to	O
Integer	B-api_mention
,	O
Hashmap	O
can	O
call	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
on	O
Integer	B-api_mention
object	O
.	O
That	O
is	O
why	O
,	O
you	O
should	O
use	O
Integer	B-api_mention
instead	O
of	O
int	O
.	O
I	O
mean	O
hashmap	O
throws	O
an	O
error	O
while	O
putting	O
int	O
as	O
a	O
key	O
(	O
Don	O
'	O
t	O
know	O
the	O
meaning	O
of	O
the	O
error	O
that	O
is	O
thrown	O
)	O
And	O
if	O
you	O
think	O
that	O
,	O
you	O
can	O
make	O
Map	B-api_mention
performance	O
faster	O
by	O
making	O
a	O
primitive	O
as	O
a	O
key	O
,	O
there	O
is	O
a	O
library	O
called	O
FastUtil	B-api_mention
which	O
contains	O
a	O
Map	B-api_mention
implementation	O
with	O
int	O
type	O
as	O
a	O
key	O
.	O
Because	O
of	O
this	O
,	O
it	O
is	O
much	O
faster	O
than	O
Hashmap	B-api_mention
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571358	O
Try	O
using	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
It	O
returns	O
a	O
byte	O
[	O
]	O
representing	O
string	O
data	O
.	O
Example	O
:	O
#	O
pre	O
Question	O
-	O
29229373	O
I	O
have	O
the	O
following	O
sample	O
code	O
:	O
#	O
pre	O
The	O
output	O
is	O
as	O
follows	O
:	O
#	O
pre	O
From	O
here	O
I	O
see	O
that	O
in	O
first	O
case	O
stream	O
really	O
behaves	O
lazily	O
-	O
we	O
use	O
findFirst	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
once	O
we	O
have	O
first	O
element	O
our	O
filtering	O
lambda	O
is	O
not	O
invoked	O
.	O
However	O
,	O
in	O
second	O
case	O
which	O
uses	O
flatMaps	O
we	O
see	O
that	O
despite	O
first	O
element	O
which	O
fulfils	O
the	O
filter	O
condition	O
is	O
found	O
(	O
it	O
'	O
s	O
just	O
any	O
first	O
element	O
as	O
lambda	O
always	O
returns	O
true	O
)	O
further	O
contents	O
of	O
the	O
stream	O
are	O
still	O
being	O
fed	O
through	O
filtering	O
function	O
.	O
I	O
am	O
trying	O
to	O
understand	O
why	O
it	O
behaves	O
like	O
this	O
rather	O
than	O
giving	O
up	O
after	O
first	O
element	O
is	O
calculated	O
as	O
in	O
the	O
first	O
case	O
.	O
Any	O
helpful	O
information	O
would	O
be	O
appreciated	O
.	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
21025279	O
Use	O
proper	O
escaping	O
:	O
string	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
the	O
helper	O
Regexp	B-api_mention
.	I-api_mention
quote	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
has	O
been	O
created	O
for	O
exactly	O
this	O
purpose	O
:	O
string	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
works	O
with	O
arbitrary	O
input	O
strings	O
.	O
Very	O
useful	O
when	O
you	O
need	O
to	O
quote	O
/	O
escape	O
user	O
input	O
.	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509669	O
The	O
difference	O
between	O
d	O
and	O
e	O
is	O
that	O
when	O
you	O
concatenate	O
string	O
literals	O
,	O
the	O
concatenation	O
is	O
performed	O
at	O
compile	O
time	O
.	O
Java	O
compiler	O
treats	O
StringLiteral	O
+	O
StringLiteral	O
expression	O
in	O
the	O
same	O
way	O
as	O
StringLiteral	O
expression	O
,	O
producing	O
the	O
same	O
literal	O
at	O
compile	O
time	O
.	O
Since	O
all	O
String	B-api_mention
literals	O
get	O
interned	O
,	O
d	O
,	O
which	O
is	O
a	O
result	O
of	O
StringLiteral	O
+	O
StringLiteral	O
,	O
also	O
ends	O
up	O
referencing	O
the	O
same	O
object	O
as	O
a	O
and	O
b	O
'	O
s	O
StringLiteral	O
.	O
The	O
expression	O
for	O
e	O
,	O
which	O
is	O
c	O
+	O
StringLiteral	O
,	O
is	O
evaluated	O
at	O
runtime	O
.	O
Even	O
though	O
it	O
produces	O
the	O
same	O
string	O
,	O
this	O
fact	O
is	O
not	O
used	O
by	O
the	O
compiler	O
.	O
That	O
'	O
s	O
why	O
a	O
different	O
String	B-api_mention
object	O
is	O
produced	O
,	O
resulting	O
in	O
failed	O
comparison	O
on	O
=	O
=	O
.	O
Question	O
-	O
18987692	O
,	O
answer	O
-	O
18987738	O
You	O
can	O
use	O
IsNull	O
.	O
nullValue	O
(	O
)	O
method	O
:	O
#	O
pre	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28465634	O
I	O
think	O
there	O
are	O
very	O
few	O
differences	O
between	O
the	O
two	O
when	O
you	O
look	O
closely	O
enough	O
.	O
At	O
it	O
'	O
s	O
face	O
,	O
an	O
IEnumerable	O
does	O
appear	O
to	O
be	O
a	O
reusable	O
construct	O
:	O
#	O
pre	O
However	O
,	O
the	O
compiler	O
is	O
actually	O
doing	O
a	O
little	O
bit	O
of	O
work	O
to	O
help	O
us	O
out	O
;	O
it	O
generates	O
the	O
following	O
code	O
:	O
#	O
pre	O
Each	O
time	O
you	O
would	O
actually	O
iterate	O
over	O
the	O
enumerable	O
,	O
the	O
compiler	O
creates	O
an	O
enumerator	O
.	O
The	O
enumerator	O
is	O
not	O
reusable	O
;	O
further	O
calls	O
to	O
MoveNext	B-api_mention
will	O
just	O
return	O
false	O
,	O
and	O
there	O
is	O
no	O
way	O
to	O
reset	O
it	O
to	O
the	O
beginning	O
.	O
If	O
you	O
want	O
to	O
iterate	O
over	O
the	O
numbers	O
again	O
,	O
you	O
will	O
need	O
to	O
create	O
another	O
enumerator	O
instance	O
.	O
To	O
better	O
illustrate	O
that	O
the	O
IEnumerable	O
has	O
(	O
can	O
have	O
)	O
the	O
same	O
'	O
feature	O
'	O
as	O
a	O
Java	O
Stream	B-api_mention
,	O
consider	O
a	O
enumerable	O
whose	O
source	O
of	O
the	O
numbers	O
is	O
not	O
a	O
static	O
collection	O
.	O
For	O
example	O
,	O
we	O
can	O
create	O
an	O
enumerable	O
object	O
which	O
generates	O
a	O
sequence	O
of	O
5	O
random	O
numbers	O
:	O
#	O
pre	O
Now	O
we	O
have	O
very	O
similar	O
code	O
to	O
the	O
previous	O
array	O
-	O
based	O
enumerable	O
,	O
but	O
with	O
a	O
second	O
iteration	O
over	O
numbers	O
:	O
#	O
pre	O
The	O
second	O
time	O
we	O
iterate	O
over	O
numbers	O
we	O
will	O
get	O
a	O
different	O
sequence	O
of	O
numbers	O
,	O
which	O
isn	O
'	O
t	O
reusable	O
in	O
the	O
same	O
sense	O
.	O
Or	O
,	O
we	O
could	O
have	O
written	O
the	O
RandomNumberStream	B-api_mention
to	O
thrown	O
an	O
exception	O
if	O
you	O
try	O
to	O
iterate	O
over	O
it	O
multiple	O
times	O
,	O
making	O
the	O
enumerable	O
actually	O
unusable	O
(	O
like	O
a	O
Java	O
Stream	B-api_mention
)	O
.	O
Also	O
,	O
what	O
does	O
your	O
enumerable	O
-	O
based	O
quick	O
sort	O
mean	O
when	O
applied	O
to	O
a	O
RandomNumberStream	B-api_mention
?	O
Conclusion	O
So	O
,	O
the	O
biggest	O
difference	O
is	O
that	O
.	O
NET	O
allows	O
you	O
to	O
reuse	O
an	O
IEnumerable	O
by	O
implicitly	O
creating	O
a	O
new	O
IEnumerator	O
in	O
the	O
background	O
whenever	O
it	O
would	O
need	O
to	O
access	O
elements	O
in	O
the	O
sequence	O
.	O
This	O
implicit	O
behavior	O
is	O
often	O
useful	O
(	O
and	O
'	O
powerful	O
'	O
as	O
you	O
state	O
)	O
,	O
because	O
we	O
can	O
repeatedly	O
iterate	O
over	O
a	O
collection	O
.	O
But	O
sometimes	O
,	O
this	O
implicit	O
behavior	O
can	O
actually	O
cause	O
problems	O
.	O
If	O
your	O
data	O
source	O
is	O
not	O
static	O
,	O
or	O
is	O
costly	O
to	O
access	O
(	O
like	O
a	O
database	O
or	O
web	O
site	O
)	O
,	O
then	O
a	O
lot	O
of	O
assumptions	O
about	O
IEnumerable	O
have	O
to	O
be	O
discarded	O
;	O
reuse	O
is	O
not	O
that	O
straight	O
-	O
forward	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923214	O
This	O
seems	O
a	O
bit	O
silly	O
to	O
me	O
,	O
but	O
the	O
only	O
reason	O
I	O
can	O
think	O
of	O
is	O
that	O
object	O
arguments	O
in	O
method	O
parameters	O
already	O
are	O
optional	O
in	O
a	O
way	O
-	O
they	O
can	O
be	O
null	O
.	O
Therefore	O
forcing	O
someone	O
to	O
take	O
an	O
existing	O
object	O
and	O
wrap	O
it	O
in	O
an	O
optional	O
is	O
sort	O
of	O
pointless	O
.	O
That	O
being	O
said	O
,	O
chaining	O
methods	O
together	O
that	O
take	O
/	O
return	O
optionals	O
is	O
a	O
reasonable	O
thing	O
to	O
do	O
,	O
e	O
.	O
g	O
.	O
Maybe	O
monad	O
.	O
Question	O
-	O
4576352	O
I	O
can	O
use	O
this	O
:	O
#	O
pre	O
Is	O
there	O
a	O
way	O
to	O
remove	O
all	O
occurrences	O
of	O
character	O
X	O
from	O
a	O
String	B-api_mention
in	O
Java	O
?	O
I	O
tried	O
this	O
and	O
is	O
not	O
what	O
I	O
want	O
:	O
str	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
replace	O
with	O
space	O
Question	O
-	O
12539365	O
,	O
answer	O
-	O
29349910	O
I	O
must	O
say	O
,	O
that	O
you	O
are	O
absolutely	O
right	O
from	O
a	O
classical	O
approach	O
'	O
s	O
point	O
of	O
view	O
:	O
#	O
li	O
If	O
you	O
first	O
create	O
(	O
or	O
change	O
)	O
business	O
logic	O
of	O
your	O
application	O
and	O
then	O
cover	O
it	O
with	O
(	O
adopt	O
)	O
tests	O
(	O
Test	O
-	O
Last	O
approach	O
)	O
,	O
then	O
it	O
will	O
be	O
very	O
painful	O
and	O
dangerous	O
to	O
let	O
tests	O
know	O
anything	O
about	O
how	O
your	O
software	O
works	O
,	O
other	O
than	O
checking	O
inputs	O
and	O
outputs	O
.	O
#	O
li	O
If	O
you	O
are	O
practicing	O
a	O
Test	O
-	O
Driven	O
approach	O
,	O
then	O
your	O
tests	O
are	O
the	O
first	O
to	O
be	O
written	O
,	O
to	O
be	O
changed	O
and	O
to	O
reflect	O
the	O
use	O
cases	O
of	O
your	O
software	O
'	O
s	O
functionality	O
.	O
The	O
implementation	O
depends	O
on	O
tests	O
.	O
That	O
sometimes	O
mean	O
,	O
that	O
you	O
want	O
your	O
software	O
to	O
be	O
implemented	O
in	O
some	O
particular	O
way	O
,	O
e	O
.	O
g	O
.	O
rely	O
on	O
some	O
other	O
component	O
'	O
s	O
method	O
or	O
even	O
call	O
it	O
a	O
particular	O
amount	O
of	O
times	O
.	O
That	O
is	O
where	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
comes	O
in	O
handy	O
!	O
It	O
is	O
important	O
to	O
remember	O
,	O
that	O
there	O
are	O
no	O
universal	O
tools	O
.	O
The	O
type	O
of	O
software	O
,	O
it	O
'	O
s	O
size	O
,	O
company	O
goals	O
and	O
market	O
situation	O
,	O
team	O
skills	O
and	O
many	O
other	O
things	O
influence	O
the	O
decision	O
on	O
which	O
approach	O
to	O
use	O
at	O
your	O
particular	O
case	O
.	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
29652714	O
You	O
can	O
use	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
list	O
if	O
your	O
list	O
contains	O
Comparable	B-api_mention
elements	O
.	O
Otherwise	O
I	O
would	O
recommend	O
you	O
to	O
implement	O
that	O
interface	O
like	O
here	O
:	O
public	O
class	O
Circle	O
implements	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
{	O
}	O
and	O
of	O
course	O
provide	O
your	O
own	O
realization	O
of	O
compareTo	B-api_mention
method	O
like	O
here	O
:	O
#	O
pre	O
And	O
then	O
you	O
can	O
again	O
use	O
Colection	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
now	O
list	O
contains	O
objects	O
of	O
Comparable	B-api_mention
type	O
and	O
can	O
be	O
sorted	O
.	O
Order	O
depends	O
on	O
compareTo	B-api_mention
method	O
.	O
Check	O
this	O
#	O
a	O
for	O
more	O
detailed	O
information	O
.	O
Question	O
-	O
5982447	O
,	O
answer	O
-	O
5982478	O
Use	O
the	O
Set	B-api_mention
#	I-api_mention
toArray	I-api_mention
(	I-api_mention
T	I-api_mention
[	I-api_mention
]	I-api_mention
)	I-api_mention
method	O
taking	O
a	O
typed	O
array	O
argument	O
of	O
the	O
same	O
size	O
.	O
String	B-api_mention
[	O
]	O
GPXFILES1	O
=	O
myset	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
A	O
different	O
size	O
can	O
also	O
,	O
but	O
that	O
would	O
force	O
the	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
create	O
a	O
new	O
array	O
to	O
return	O
instead	O
of	O
reusing	O
the	O
provided	O
argument	O
,	O
which	O
may	O
end	O
up	O
to	O
be	O
less	O
efficient	O
.	O
See	O
also	O
the	O
source	O
code	O
of	O
AbstractCollection	B-api_mention
#	I-api_mention
toArray	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29926133	O
I	O
'	O
d	O
go	O
for	O
EnumSet	B-api_mention
.	O
Because	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
also	O
defined	O
on	O
Iterable	B-api_mention
,	O
you	O
can	O
avoid	O
creating	O
the	O
stream	O
altogether	O
:	O
EnumSet	B-api_mention
.	I-api_mention
allOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
with	O
a	O
method	O
reference	O
:	O
EnumSet	B-api_mention
.	I-api_mention
allOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Still	O
,	O
the	O
oldschool	O
for	O
-	O
loop	O
feels	O
a	O
bit	O
simpler	O
:	O
#	O
pre	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561853	O
Let	O
me	O
explain	O
what	O
is	O
happening	O
here	O
,	O
because	O
it	O
isn	O
'	O
t	O
obvious	O
!	O
First	O
,	O
Stream	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
)	I-api_mention
accepts	O
an	O
instance	O
of	O
Comparator	B-api_mention
so	O
that	O
items	O
in	O
the	O
stream	O
can	O
be	O
compared	O
against	O
each	O
other	O
to	O
find	O
the	O
minimum	O
or	O
maximum	O
,	O
in	O
some	O
optimal	O
order	O
that	O
you	O
don	O
'	O
t	O
need	O
to	O
worry	O
too	O
much	O
about	O
.	O
So	O
the	O
question	O
is	O
,	O
of	O
course	O
,	O
why	O
is	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
max	I-api_mention
accepted	O
?	O
After	O
all	O
it	O
'	O
s	O
not	O
a	O
comparator	O
!	O
The	O
answer	O
is	O
in	O
the	O
way	O
that	O
the	O
new	O
lambda	O
functionality	O
works	O
in	O
Java	O
8	O
.	O
It	O
relies	O
on	O
a	O
concept	O
which	O
is	O
informally	O
known	O
as	O
"	O
single	O
abstract	O
method	O
"	O
interfaces	O
,	O
or	O
"	O
SAM	O
"	O
interfaces	O
.	O
The	O
idea	O
is	O
that	O
any	O
interface	O
with	O
one	O
abstract	O
method	O
can	O
be	O
automatically	O
implemented	O
by	O
any	O
lambda	O
-	O
or	O
method	O
reference	O
-	O
whose	O
method	O
signature	O
is	O
a	O
match	O
for	O
the	O
one	O
method	O
on	O
the	O
interface	O
.	O
So	O
examining	O
the	O
Comparator	B-api_mention
interface	O
(	O
simple	O
version	O
)	O
:	O
#	O
pre	O
If	O
a	O
method	O
is	O
looking	O
for	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
then	O
it	O
'	O
s	O
essentially	O
looking	O
for	O
this	O
signature	O
:	O
int	O
xxx	O
(	O
args	O
)	O
;	O
I	O
use	O
"	O
xxx	O
"	O
because	O
the	O
method	O
name	O
is	O
not	O
used	O
for	O
matching	O
purposes	O
.	O
Therefore	O
,	O
both	O
Integer	B-api_mention
.	I-api_mention
min	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Integer	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
close	O
enough	O
that	O
autoboxing	O
will	O
allow	O
this	O
to	O
appear	O
as	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
in	O
a	O
method	O
context	O
.	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684822	O
You	O
can	O
'	O
t	O
just	O
take	O
the	O
returned	O
string	O
and	O
construct	O
a	O
string	O
from	O
it	O
.	O
.	O
.	O
it	O
'	O
s	O
not	O
a	O
byte	O
[	O
]	O
data	O
type	O
anymore	O
,	O
it	O
'	O
s	O
already	O
a	O
string	O
;	O
you	O
need	O
to	O
parse	O
it	O
.	O
For	O
example	O
:	O
#	O
pre	O
*	O
*	O
EDIT	O
*	O
*	O
You	O
get	O
an	O
hint	O
of	O
your	O
problem	O
in	O
your	O
question	O
,	O
where	O
you	O
say	O
"	O
Whatever	O
I	O
seem	O
to	O
try	O
I	O
end	O
up	O
getting	O
a	O
byte	O
array	O
which	O
looks	O
as	O
follows	O
.	O
.	O
.	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
"	O
,	O
because	O
91	O
is	O
the	O
byte	O
value	O
for	O
[	O
,	O
so	O
[	O
91	O
,	O
45	O
,	O
.	O
.	O
.	O
is	O
the	O
byte	O
array	O
of	O
the	O
string	O
"	O
[	O
-	O
45	O
,	O
1	O
,	O
16	O
,	O
.	O
.	O
.	O
"	O
string	O
.	O
The	O
method	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
a	O
String	B-api_mention
representation	O
of	O
the	O
specified	O
array	O
;	O
meaning	O
that	O
the	O
returned	O
value	O
will	O
not	O
be	O
a	O
array	O
anymore	O
.	O
For	O
example	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
s1	O
holds	O
the	O
string	O
representation	O
of	O
the	O
array	O
b1	O
,	O
while	O
s2	O
holds	O
the	O
string	O
representation	O
of	O
the	O
bytes	O
contained	O
in	O
b1	O
.	O
Now	O
,	O
in	O
your	O
problem	O
,	O
your	O
server	O
returns	O
a	O
string	O
similar	O
to	O
s1	O
,	O
therefore	O
to	O
get	O
the	O
array	O
representation	O
back	O
,	O
you	O
need	O
the	O
opposite	O
constructor	O
method	O
.	O
If	O
s2	O
.	B-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
opposite	O
of	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
need	O
to	O
find	O
the	O
opposite	O
of	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
thus	O
the	O
code	O
I	O
pasted	O
in	O
the	O
first	O
snippet	O
of	O
this	O
answer	O
.	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781168	O
The	O
value	O
you	O
are	O
looking	O
for	O
is	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
#	O
blockquote	O
That	O
'	O
s	O
off	O
-	O
topic	O
for	O
Stack	O
Exchange	O
.	O
But	O
you	O
could	O
do	O
it	O
starting	O
from	O
the	O
definition	O
of	O
Java	O
integers	O
(	O
JLS	O
4	O
.	O
2	O
)	O
#	O
blockquote	O
and	O
#	O
blockquote	O
and	O
the	O
definition	O
of	O
the	O
Java	O
unary	O
'	O
-	O
'	O
operator	O
(	O
JLS	O
15	O
.	O
15	O
.	O
4	O
)	O
:	O
#	O
blockquote	O
Question	O
-	O
24603186	O
In	O
Java	O
8	O
,	O
the	O
Collection	B-api_mention
interface	O
was	O
extended	O
with	O
two	O
methods	O
that	O
return	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
:	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
a	O
sequential	O
stream	O
,	O
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
a	O
possibly	O
-	O
parallel	O
stream	O
.	O
Stream	B-api_mention
itself	O
also	O
has	O
a	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
returns	O
an	O
equivalent	O
parallel	O
stream	O
(	O
either	O
mutating	O
the	O
current	O
stream	O
to	O
be	O
parallel	O
or	O
creating	O
a	O
new	O
stream	O
)	O
.	O
The	O
duplication	O
has	O
obvious	O
disadvantages	O
:	O
#	O
li	O
It	O
'	O
s	O
confusing	O
.	O
A	O
question	O
asks	O
whether	O
calling	O
both	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
necessary	O
to	O
be	O
sure	O
the	O
stream	O
is	O
parallel	O
,	O
given	O
that	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
may	O
return	O
a	O
sequential	O
stream	O
.	O
Why	O
does	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
exist	O
if	O
it	O
can	O
'	O
t	O
make	O
a	O
guarantee	O
?	O
The	O
other	O
way	O
around	O
is	O
also	O
confusing	O
-	O
-	O
if	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
returns	O
a	O
sequential	O
stream	O
,	O
there	O
'	O
s	O
probably	O
a	O
reason	O
(	O
e	O
.	O
g	O
.	O
,	O
an	O
inherently	O
sequential	O
data	O
structure	O
for	O
which	O
parallel	O
streams	O
are	O
a	O
performance	O
trap	O
)	O
;	O
what	O
should	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
do	O
for	O
such	O
a	O
stream	O
?	O
(	O
UnsupportedOperationException	B-api_mention
is	O
not	O
allowed	O
by	O
parallel	B-api_mention
(	I-api_mention
)	I-api_mention
'	O
s	O
specification	O
.	O
)	O
#	O
li	O
Adding	O
methods	O
to	O
an	O
interface	O
risks	O
conflicts	O
if	O
an	O
existing	O
implementation	O
has	O
a	O
similarly	O
-	O
named	O
method	O
with	O
an	O
incompatible	O
return	O
type	O
.	O
Adding	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
addition	O
to	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
doubles	O
the	O
risk	O
for	O
little	O
gain	O
.	O
(	O
Note	O
that	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
was	O
at	O
one	O
point	O
just	O
named	O
parallel	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
though	O
I	O
don	O
'	O
t	O
know	O
if	O
it	O
was	O
renamed	O
to	O
avoid	O
name	O
clashes	O
or	O
for	O
another	O
reason	O
.	O
)	O
Why	O
does	O
Collection	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
)	I-api_mention
exist	O
when	O
calling	O
Collection	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
does	O
the	O
same	O
thing	O
?	O
Question	O
-	O
22463062	O
,	O
answer	O
-	O
22463063	O
Parsing	O
date	O
and	O
time	O
To	O
create	O
a	O
LocalDateTime	B-api_mention
object	O
from	O
a	O
string	O
you	O
can	O
use	O
the	O
static	O
LocalDateTime	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
It	O
takes	O
a	O
string	O
and	O
a	O
DateTimeFormatter	B-api_mention
as	O
parameter	O
.	O
The	O
DateTimeFormatter	B-api_mention
is	O
used	O
to	O
specify	O
the	O
date	O
/	O
time	O
pattern	O
.	O
#	O
pre	O
Formatting	O
date	O
and	O
time	O
To	O
create	O
a	O
formatted	O
string	O
out	O
a	O
LocalDateTime	B-api_mention
object	O
you	O
can	O
use	O
the	O
format	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
pre	O
Note	O
that	O
there	O
are	O
some	O
commonly	O
used	O
date	O
/	O
time	O
formats	O
predefined	O
as	O
constants	O
in	O
DateTimeFormatter	B-api_mention
.	O
For	O
example	O
:	O
Using	O
DateTimeFormatter	B-api_mention
.	I-api_mention
ISO	I-api_mention
_	I-api_mention
DATE	I-api_mention
_	I-api_mention
TIME	I-api_mention
to	O
format	O
the	O
LocalDateTime	B-api_mention
instance	O
from	O
above	O
would	O
result	O
in	O
the	O
string	O
StringLiteral	O
.	O
The	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
format	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
are	O
available	O
for	O
all	O
date	O
/	O
time	O
related	O
objects	O
(	O
e	O
.	O
g	O
.	O
LocalDate	B-api_mention
or	O
ZonedDateTime	B-api_mention
)	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32821016	O
If	O
you	O
look	O
at	O
IntFunction	B-api_mention
it	O
might	O
become	O
clearer	O
:	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
FunctionalInterface	O
.	O
It	O
represents	O
a	O
function	O
that	O
takes	O
an	O
int	O
and	O
returns	O
a	O
value	O
of	O
type	O
R	O
.	O
In	O
this	O
case	O
,	O
the	O
return	O
type	O
R	O
is	O
also	O
a	O
FunctionalInterface	O
,	O
namely	O
an	O
IntUnaryOperator	O
.	O
So	O
the	O
first	O
(	O
outer	O
)	O
function	O
itself	O
returns	O
a	O
function	O
.	O
In	O
this	O
case	O
:	O
When	O
applied	O
to	O
an	O
int	O
,	O
curriedAdd	O
is	O
supposed	O
to	O
return	O
a	O
function	O
that	O
again	O
takes	O
an	O
int	O
(	O
and	O
returns	O
again	O
int	O
,	O
because	O
that	O
'	O
s	O
what	O
IntUnaryOperator	O
does	O
)	O
.	O
In	O
functional	O
programming	O
it	O
is	O
common	O
to	O
write	O
the	O
type	O
of	O
a	O
function	O
as	O
param	O
-	O
>	O
return	O
_	O
value	O
and	O
you	O
see	O
exactly	O
that	O
here	O
.	O
So	O
the	O
type	O
of	O
curriedAdd	O
is	O
int	O
-	O
>	O
int	O
-	O
>	O
int	O
(	O
or	O
int	O
-	O
>	O
(	O
int	O
-	O
>	O
int	O
)	O
if	O
you	O
like	O
that	O
better	O
)	O
.	O
Java	O
8	O
'	O
s	O
lambda	O
syntax	O
goes	O
along	O
with	O
this	O
.	O
To	O
define	O
such	O
a	O
function	O
,	O
you	O
write	O
a	O
-	O
>	O
b	O
-	O
>	O
a	O
+	O
b	O
which	O
is	O
very	O
much	O
similar	O
to	O
actual	O
lambda	O
calculus	O
:	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
λ	O
b	O
a	O
+	O
b	O
is	O
a	O
function	O
that	O
takes	O
a	O
single	O
parameter	O
b	O
and	O
returns	O
a	O
value	O
(	O
the	O
sum	O
)	O
.	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
is	O
a	O
function	O
that	O
accepts	O
a	O
single	O
parameter	O
a	O
and	O
returns	O
another	O
function	O
of	O
a	O
single	O
parameter	O
.	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
returns	O
λ	O
b	O
a	O
+	O
b	O
with	O
a	O
set	O
to	O
the	O
parameter	O
value	O
.	O
Question	O
-	O
9749746	O
How	O
do	O
atomic	B-api_mention
/	O
volatile	O
/	O
synchronized	O
work	O
internally	O
?	O
What	O
is	O
the	O
difference	O
between	O
the	O
following	O
code	O
blocks	O
?	O
Code	O
1	O
#	O
pre	O
Code	O
2	O
#	O
pre	O
Code	O
3	O
#	O
pre	O
Does	O
volatile	O
work	O
in	O
the	O
following	O
way	O
?	O
Is	O
#	O
pre	O
equivalent	O
to	O
#	O
pre	O
I	O
think	O
that	O
two	O
threads	O
cannot	O
enter	O
a	O
synchronized	O
block	O
at	O
the	O
same	O
time	O
.	O
.	O
.	O
am	O
I	O
right	O
?	O
If	O
this	O
is	O
true	O
then	O
how	O
does	O
atomic	B-api_mention
.	I-api_mention
incrementAndGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
work	O
without	O
synchronized	O
?	O
And	O
is	O
it	O
thread	O
-	O
safe	O
?	O
And	O
what	O
is	O
the	O
difference	O
between	O
internal	O
reading	O
and	O
writing	O
to	O
volatile	O
variables	O
/	O
atomic	B-api_mention
variables	O
?	O
I	O
read	O
in	O
some	O
article	O
that	O
the	O
thread	O
has	O
a	O
local	O
copy	O
of	O
the	O
variables	O
-	O
what	O
is	O
that	O
?	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26886202	O
You	O
are	O
performing	O
multiple	O
search	O
-	O
replace	O
operations	O
on	O
the	O
input	O
.	O
This	O
will	O
produce	O
undesired	O
results	O
when	O
the	O
replacement	O
strings	O
contain	O
search	O
strings	O
.	O
Consider	O
the	O
foo	O
-	O
>	O
bar	O
,	O
bar	O
-	O
foo	O
example	O
,	O
here	O
are	O
the	O
results	O
for	O
each	O
iteration	O
:	O
#	O
li	O
Once	O
upon	O
a	O
time	O
,	O
there	O
was	O
a	O
foo	O
and	O
a	O
bar	O
.	O
(	O
input	O
)	O
#	O
li	O
Once	O
upon	O
a	O
time	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
bar	O
.	O
(	O
foo	O
-	O
>	O
bar	O
)	O
#	O
li	O
Once	O
upon	O
a	O
time	O
,	O
there	O
was	O
a	O
foo	O
and	O
a	O
foo	O
.	O
(	O
bar	O
-	O
>	O
foo	O
,	O
output	O
)	O
You	O
need	O
to	O
perform	O
the	O
replacement	O
in	O
one	O
iteration	O
without	O
going	O
back	O
.	O
A	O
brute	O
-	O
force	O
solution	O
is	O
as	O
follows	O
:	O
#	O
li	O
Search	O
the	O
input	O
from	O
current	O
position	O
to	O
end	O
for	O
multiple	O
search	O
strings	O
until	O
a	O
match	O
is	O
found	O
#	O
li	O
Replace	O
the	O
matched	O
search	O
string	O
with	O
corresponding	O
replace	O
string	O
#	O
li	O
Set	O
current	O
position	O
to	O
the	O
next	O
character	O
after	O
the	O
replaced	O
string	O
#	O
li	O
Repeat	O
A	O
function	O
such	O
as	O
String	B-api_mention
.	I-api_mention
indexOfAny	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
>	O
int	O
[	O
]	O
{	O
index	O
,	O
whichString	O
}	O
would	O
be	O
useful	O
.	O
Here	O
is	O
an	O
example	O
(	O
not	O
the	O
most	O
efficient	O
one	O
)	O
:	O
#	O
pre	O
Some	O
tests	O
:	O
#	O
pre	O
Demo	O
on	O
IDEONE	O
Demo	O
on	O
IDEONE	O
,	O
alternate	O
code	O
Question	O
-	O
33358248	O
Currently	O
the	O
BlendModes	O
(	O
Subtract	O
,	O
Exclusion	O
etc	O
)	O
use	O
the	O
LauncherImage	O
as	O
the	O
mask	O
.	O
Can	O
I	O
apply	O
these	O
BlendModes	O
to	O
a	O
ColorMatrix	O
?	O
I	O
'	O
m	O
using	O
the	O
GPUImageLibrary	O
colorMatrix	O
[	O
0	O
.	O
393	O
,	O
0	O
.	O
7689999	O
,	O
0	O
.	O
18899999	O
,	O
0	O
,	O
0	O
,	O
0	O
.	O
349	O
,	O
0	O
.	O
6859999	O
,	O
0	O
.	O
16799999	O
,	O
0	O
,	O
0	O
,	O
0	O
.	O
272	O
,	O
0	O
.	O
5339999	O
,	O
0	O
.	O
13099999	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
0	O
,	O
1	O
,	O
0	O
]	O
;	O
SubtractBlendFilter	O
.	O
java	O
#	O
pre	O
GPUIMageTwoInputFilter	O
.	O
java	O
#	O
pre	O
My	O
guess	O
it	O
involves	O
changing	O
something	O
with	O
String	B-api_mention
SUBTRACT	O
_	O
BLEND	O
_	O
GRAGMENT	O
_	O
SHADER	O
&	O
String	B-api_mention
VERTEX	O
_	O
SHADER	O
.	O
Question	O
-	O
27504925	O
,	O
answer	O
-	O
27505121	O
I	O
'	O
d	O
like	O
to	O
point	O
out	O
this	O
article	O
.	O
It	O
seems	O
as	O
though	O
arrays	O
and	O
objects	O
follow	O
different	O
opcodes	O
.	O
I	O
can	O
'	O
t	O
honestly	O
summarize	O
it	O
more	O
than	O
that	O
however	O
it	O
seems	O
,	O
arrays	O
are	O
simply	O
not	O
treated	O
as	O
Objects	B-api_mention
like	O
we	O
'	O
re	O
normally	O
used	O
to	O
so	O
they	O
don	O
'	O
t	O
inherit	O
Object	B-api_mention
methods	O
.	O
Full	O
credits	O
to	O
the	O
author	O
of	O
that	O
post	O
as	O
it	O
'	O
s	O
a	O
very	O
interesting	O
read	O
,	O
both	O
short	O
&	O
detailed	O
.	O
Upon	O
further	O
digging	O
into	O
the	O
topic	O
via	O
multiple	O
sources	O
I	O
'	O
ve	O
decided	O
to	O
give	O
a	O
more	O
elaborate	O
version	O
of	O
my	O
previous	O
answer	O
.	O
The	O
first	O
thing	O
to	O
note	O
that	O
instantiation	O
of	O
Objects	B-api_mention
and	O
Arrays	B-api_mention
are	O
very	O
different	O
within	O
the	O
JVM	O
,	O
their	O
follow	O
their	O
respective	O
bytecode	O
.	O
Object	B-api_mention
:	O
Object	B-api_mention
instantiation	O
follows	O
a	O
simple	O
Opcode	O
new	O
which	O
is	O
a	O
combination	O
of	O
two	O
operands	O
-	O
indexbyte1	O
&	O
indexbyte2	O
.	O
Once	O
instantiated	O
the	O
JVM	O
pushes	O
the	O
reference	O
to	O
this	O
object	O
onto	O
the	O
stack	O
.	O
This	O
occurs	O
for	O
all	O
objects	O
irrespective	O
of	O
their	O
types	O
.	O
Arrays	B-api_mention
:	O
Array	B-api_mention
Opcodes	O
(	O
regarding	O
instantiation	O
of	O
an	O
array	O
)	O
however	O
are	O
divided	O
into	O
three	O
different	O
codes	O
.	O
#	O
blockquote	O
newarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
that	O
involve	O
primitive	O
datatypes	O
(	O
byte	O
short	O
char	O
int	O
long	O
float	O
double	O
boolean	O
)	O
rather	O
than	O
object	O
references	O
.	O
#	O
blockquote	O
anewarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
of	O
object	O
references	O
#	O
blockquote	O
multianewarray	O
instruction	O
is	O
used	O
when	O
allocating	O
multi	O
-	O
dimensional	O
arrays	O
Object	B-api_mention
can	O
be	O
a	O
class	O
instance	O
or	O
an	O
array	O
.	O
Take	O
from	O
Oracle	O
Docs	O
#	O
blockquote	O
BUT	O
#	O
blockquote	O
This	O
goes	O
hand	O
in	O
hand	O
with	O
the	O
information	O
regarding	O
the	O
opcodes	O
.	O
Arrays	O
are	O
simply	O
not	O
developed	O
to	O
be	O
class	O
interfaces	O
but	O
are	O
instead	O
explicitly	O
created	O
by	O
array	O
creation	O
expression	O
thus	O
naturally	O
wouldn	O
'	O
t	O
implicitly	O
be	O
able	O
to	O
inherit	O
and	O
/	O
or	O
override	O
Object	B-api_mention
.	O
As	O
we	O
have	O
seen	O
,	O
it	O
has	O
nothing	O
to	O
do	O
with	O
the	O
fact	O
that	O
arrays	O
may	O
hold	O
primitive	O
datatypes	O
.	O
After	O
giving	O
it	O
some	O
thought	O
though	O
,	O
it	O
isn	O
'	O
t	O
very	O
common	O
to	O
come	O
across	O
situations	O
where	O
one	O
might	O
want	O
to	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
however	O
was	O
still	O
a	O
very	O
interesting	O
question	O
to	O
try	O
and	O
answer	O
.	O
Resources	O
:	O
Oracle	O
-	O
Docs	O
chapter	O
4	O
.	O
3	O
.	O
1	O
Oracle	O
-	O
Docs	O
chapter	O
15	O
.	O
10	O
.	O
1	O
Artima	O
-	O
UnderTheHood	O
Question	O
-	O
4576352	O
,	O
answer	O
-	O
11325546	O
You	O
can	O
use	O
str	O
=	O
str	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
as	O
mentioned	O
before	O
and	O
you	O
will	O
be	O
fine	O
.	O
For	O
your	O
information	O
CharLiteral	O
is	O
not	O
an	O
empty	O
(	O
or	O
a	O
valid	O
)	O
character	O
but	O
CharLiteral	O
is	O
.	O
So	O
you	O
could	O
use	O
str	O
=	O
str	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
.	O
Question	O
-	O
32676771	O
,	O
answer	O
-	O
32677400	O
Despite	O
of	O
the	O
fact	O
that	O
there	O
is	O
no	O
AtomicDouble	B-api_mention
or	O
AtomicDoubleArray	B-api_mention
in	O
java	O
,	O
you	O
can	O
easily	O
create	O
your	O
own	O
based	O
on	O
AtomicLongArray	B-api_mention
.	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
I	O
use	O
Double	B-api_mention
.	I-api_mention
doubleToLongBits	I-api_mention
and	O
Double	B-api_mention
.	I-api_mention
longBitsToDouble	I-api_mention
to	O
store	O
Doubles	B-api_mention
as	O
Longs	B-api_mention
in	O
AtomicLongArray	B-api_mention
.	O
They	O
both	O
have	O
the	O
same	O
size	O
in	O
bits	O
,	O
so	O
precision	O
is	O
not	O
lost	O
(	O
except	O
for	O
-	O
NaN	O
,	O
but	O
I	O
don	O
'	O
t	O
think	O
it	O
is	O
important	O
)	O
.	O
In	O
Java	O
8	O
the	O
implementation	O
of	O
add	O
can	O
be	O
even	O
easier	O
,	O
as	O
you	O
can	O
use	O
accumulateAndGet	B-api_mention
method	O
of	O
AtomicLongArray	B-api_mention
that	O
was	O
added	O
in	O
java	O
1	O
.	O
8	O
.	O
Upd	O
:	O
It	O
appears	O
that	O
I	O
virtually	O
re	O
-	O
implemented	O
guava	O
'	O
s	O
AtomicDoubleArray	B-api_mention
.	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27949367	O
The	O
strategy	O
they	O
describe	O
is	O
to	O
simply	O
reuse	O
the	O
internal	O
character	O
array	O
of	O
one	O
String	B-api_mention
in	O
possibly	O
many	O
equal	O
Strings	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
each	O
String	B-api_mention
to	O
have	O
its	O
own	O
copy	O
if	O
they	O
are	O
equal	O
.	O
In	O
order	O
to	O
more	O
quickly	O
determine	O
if	O
2	O
strings	O
are	O
equal	O
,	O
the	O
hash	O
code	O
is	O
used	O
as	O
a	O
first	O
step	O
,	O
as	O
it	O
is	O
a	O
fast	O
way	O
to	O
determine	O
if	O
Strings	O
may	O
be	O
equal	O
.	O
Hence	O
their	O
statement	O
:	O
#	O
blockquote	O
This	O
is	O
to	O
make	O
a	O
certain	O
(	O
but	O
slower	O
)	O
comparison	O
for	O
equality	O
once	O
possible	O
equality	O
has	O
been	O
determined	O
using	O
the	O
hash	O
code	O
.	O
In	O
the	O
end	O
,	O
equal	O
Strings	O
will	O
share	O
a	O
single	O
underlying	O
char	O
array	O
.	O
Java	O
has	O
had	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
a	O
long	O
time	O
,	O
to	O
do	O
more	O
or	O
less	O
the	O
same	O
(	O
i	O
.	O
e	O
.	O
save	O
memory	O
by	O
deduplicating	O
equal	O
Strings	O
)	O
.	O
What	O
'	O
s	O
novel	O
about	O
this	O
is	O
that	O
it	O
happens	O
during	O
garbage	O
collection	O
time	O
and	O
can	O
be	O
externally	O
controlled	O
.	O
Question	O
-	O
18448671	O
,	O
answer	O
-	O
18448685	O
If	O
you	O
want	O
to	O
modify	O
your	O
List	B-api_mention
during	O
traversal	O
,	O
then	O
you	O
need	O
to	O
use	O
the	O
Iterator	B-api_mention
.	O
And	O
then	O
you	O
can	O
use	O
iterator	O
.	B-api_mention
remove	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
remove	O
the	O
elements	O
during	O
traversal	O
.	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818916	O
The	O
primary	O
use	O
of	O
AtomicInteger	B-api_mention
is	O
when	O
you	O
are	O
in	O
a	O
multithreaded	O
context	O
and	O
you	O
need	O
to	O
perform	O
thread	O
safe	O
operations	O
on	O
an	O
integer	O
without	O
using	O
synchronized	O
.	O
The	O
assignation	O
and	O
retrieval	O
on	O
the	O
primitive	O
type	O
int	O
are	O
already	O
atomic	O
but	O
AtomicInteger	B-api_mention
comes	O
with	O
many	O
operations	O
which	O
are	O
not	O
atomic	O
on	O
int	O
.	O
The	O
simplest	O
are	O
the	O
getAndXXX	O
or	O
xXXAndGet	O
.	O
For	O
instance	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
an	O
atomic	O
equivalent	O
to	O
i	O
+	O
+	O
which	O
is	O
not	O
atomic	O
because	O
it	O
is	O
actually	O
a	O
short	O
cut	O
for	O
three	O
operations	O
:	O
retrieval	O
,	O
addition	O
and	O
assignation	O
.	O
compareAndSet	B-api_mention
is	O
very	O
useful	O
to	O
implements	O
semaphores	O
,	O
locks	O
,	O
latches	O
,	O
etc	O
.	O
Using	O
the	O
AtomicInteger	B-api_mention
is	O
faster	O
and	O
more	O
readable	O
than	O
performing	O
the	O
same	O
using	O
synchronization	O
.	O
A	O
simple	O
test	O
:	O
#	O
pre	O
On	O
my	O
PC	O
with	O
Java	O
1	O
.	O
6	O
the	O
atomic	O
test	O
runs	O
in	O
3	O
seconds	O
while	O
the	O
synchronized	O
one	O
runs	O
in	O
about	O
5	O
.	O
5	O
seconds	O
.	O
The	O
problem	O
here	O
is	O
that	O
the	O
operation	O
to	O
synchronize	O
(	O
notAtomic	O
+	O
+	O
)	O
is	O
really	O
short	O
.	O
So	O
the	O
cost	O
of	O
the	O
synchronization	O
is	O
really	O
important	O
compared	O
to	O
the	O
operation	O
.	O
Beside	O
atomicity	O
AtomicInteger	B-api_mention
can	O
be	O
use	O
as	O
a	O
mutable	O
version	O
of	O
Integer	B-api_mention
for	O
instance	O
in	O
Map	B-api_mention
s	O
as	O
values	O
.	O
Question	O
-	O
22740464	O
I	O
can	O
add	O
streams	O
or	O
extra	O
elements	O
,	O
like	O
this	O
:	O
Stream	B-api_mention
stream	O
=	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	O
stream1	O
,	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
I	O
can	O
add	O
new	O
stuff	O
as	O
I	O
go	O
,	O
like	O
this	O
:	O
Stream	B-api_mention
stream	O
=	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
this	O
is	O
ugly	O
,	O
because	O
concat	B-api_mention
is	O
static	O
.	O
If	O
concat	B-api_mention
were	O
an	O
instance	O
method	O
,	O
the	O
above	O
examples	O
would	O
be	O
much	O
easier	O
to	O
read	O
:	O
Stream	B-api_mention
stream	O
=	O
stream1	O
.	B-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
Stream	B-api_mention
stream	O
=	O
stream1	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
My	O
question	O
is	O
:	O
1	O
)	O
Is	O
there	O
any	O
good	O
reason	O
why	O
concat	B-api_mention
is	O
static	O
?	O
Or	O
is	O
there	O
some	O
equivalent	O
instance	O
method	O
I	O
'	O
m	O
missing	O
?	O
2	O
)	O
In	O
any	O
case	O
,	O
is	O
there	O
a	O
better	O
way	O
of	O
doing	O
this	O
?	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
38560612	O
This	O
is	O
part	O
of	O
JDK	O
9	O
in	O
the	O
form	O
of	O
or	O
,	O
which	O
takes	O
a	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Your	O
example	O
would	O
then	O
be	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
;	O
For	O
details	O
see	O
the	O
(	O
preliminary	O
)	O
Javadoc	O
or	O
this	O
post	O
I	O
wrote	O
.	O
Question	O
-	O
6652687	O
,	O
answer	O
-	O
6652772	O
Use	O
String	B-api_mention
#	I-api_mention
trim	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
or	O
String	B-api_mention
allRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
trim	O
both	O
the	O
end	O
.	O
For	O
left	O
trim	O
:	O
String	B-api_mention
leftRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
right	O
trim	O
:	O
String	B-api_mention
rightRemoved	O
=	O
myString	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408482	O
The	O
Java	O
language	O
provides	O
special	O
support	O
for	O
the	O
string	O
concatenation	O
operator	O
(	O
+	O
)	O
and	O
for	O
conversion	O
of	O
other	O
objects	O
to	O
strings	O
.	O
String	B-api_mention
concatenation	O
is	O
implemented	O
through	O
the	O
StringBuilder	B-api_mention
(	O
or	O
StringBuffer	B-api_mention
)	O
class	O
and	O
its	O
append	O
method	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29097694	O
Please	O
do	O
not	O
vote	O
.	O
I	O
do	O
not	O
have	O
enough	O
place	O
to	O
explain	O
this	O
in	O
comments	O
.	O
This	O
is	O
a	O
solution	O
with	O
a	O
Stream	B-api_mention
and	O
a	O
foreach	O
but	O
this	O
is	O
strictly	O
equivalent	O
to	O
Alexis	O
'	O
s	O
solution	O
or	O
a	O
foreach	O
loop	O
(	O
and	O
less	O
clear	O
,	O
and	O
I	O
could	O
not	O
get	O
rid	O
of	O
the	O
copy	O
constructor	O
)	O
:	O
#	O
pre	O
I	O
understand	O
that	O
you	O
want	O
to	O
find	O
a	O
more	O
elegant	O
solution	O
with	O
Java	O
8	O
but	O
I	O
truly	O
think	O
that	O
it	O
has	O
not	O
been	O
designed	O
for	O
this	O
case	O
.	O
And	O
as	O
said	O
by	O
Mr	O
spoon	O
,	O
highly	O
prefer	O
the	O
naive	O
way	O
in	O
this	O
case	O
.	O
Question	O
-	O
22409102	O
,	O
answer	O
-	O
22501695	O
The	O
approach	O
used	O
by	O
Math	B-api_mention
.	I-api_mention
min	I-api_mention
is	O
similar	O
to	O
what	O
Jesper	O
proposes	O
but	O
a	O
little	O
clearer	O
:	O
#	O
pre	O
Question	O
-	O
30384955	O
,	O
answer	O
-	O
30385298	O
Replacing	O
the	O
definition	O
of	O
TbinList	O
with	O
class	O
TbinList	O
<	O
T	O
>	O
extends	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
{	O
}	O
and	O
defining	O
test2	O
with	O
TbinList	O
<	O
T	O
>	O
test2	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
instead	O
would	O
solve	O
the	O
issue	O
.	O
With	O
your	O
definition	O
you	O
'	O
re	O
ending	O
up	O
with	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
where	O
T	O
is	O
any	O
fixed	O
class	O
extending	O
Base	O
.	O
Question	O
-	O
27949213	O
Since	O
String	B-api_mention
in	O
Java	O
(	O
like	O
other	O
languages	O
)	O
consumes	O
a	O
lot	O
of	O
memory	O
because	O
each	O
character	O
consumes	O
two	O
bytes	O
,	O
Java	O
8	O
has	O
introduced	O
a	O
new	O
feature	O
called	O
String	B-api_mention
Deduplication	O
which	O
takes	O
advantage	O
of	O
the	O
fact	O
that	O
the	O
char	O
arrays	O
are	O
internal	O
to	O
strings	O
and	O
final	O
,	O
so	O
the	O
JVM	O
can	O
mess	O
around	O
with	O
them	O
.	O
I	O
have	O
read	O
this	O
example	O
so	O
far	O
but	O
since	O
I	O
am	O
not	O
a	O
pro	O
java	O
coder	O
,	O
I	O
am	O
having	O
a	O
hard	O
time	O
grasping	O
the	O
concept	O
.	O
Here	O
is	O
what	O
it	O
says	O
,	O
#	O
blockquote	O
My	O
First	O
question	O
,	O
There	O
is	O
still	O
a	O
lack	O
of	O
resources	O
on	O
this	O
topic	O
since	O
it	O
is	O
recently	O
added	O
in	O
Java	O
8	O
update	O
20	O
,	O
could	O
anyone	O
here	O
share	O
some	O
practical	O
examples	O
on	O
how	O
it	O
help	O
in	O
reducing	O
the	O
memory	O
consumed	O
by	O
String	B-api_mention
in	O
Java	O
?	O
Edit	O
:	O
The	O
above	O
link	O
says	O
,	O
#	O
blockquote	O
My	O
2nd	O
question	O
,	O
If	O
hash	O
code	O
of	O
two	O
String	B-api_mention
are	O
same	O
then	O
the	O
Strings	B-api_mention
are	O
already	O
the	O
same	O
,	O
then	O
why	O
compare	O
them	O
char	O
by	O
char	O
once	O
it	O
is	O
found	O
that	O
the	O
two	O
String	B-api_mention
have	O
same	O
hash	O
code	O
?	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818753	O
There	O
are	O
two	O
main	O
uses	O
of	O
AtomicInteger	B-api_mention
:	O
#	O
li	O
As	O
an	O
atomic	O
counter	O
(	O
incrementAndGet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
etc	O
)	O
that	O
can	O
be	O
used	O
by	O
many	O
threads	O
concurrently	O
#	O
li	O
As	O
a	O
primitive	O
that	O
supports	O
compare	O
-	O
and	O
-	O
swap	O
instruction	O
(	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
to	O
implement	O
non	O
-	O
blocking	O
algorithms	O
.	O
Here	O
is	O
an	O
example	O
of	O
non	O
-	O
blocking	O
random	O
number	O
generator	O
from	O
Brian	O
G	O
ö	O
etz	O
'	O
s	O
Java	O
Concurrency	O
In	O
Practice	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
basically	O
works	O
almost	O
the	O
same	O
way	O
as	O
incrementAndGet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
performs	O
arbitrary	O
calculation	O
(	O
calculateNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
instead	O
of	O
increment	O
(	O
and	O
processes	O
the	O
result	O
before	O
return	O
)	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16636899	O
I	O
feel	O
that	O
I	O
need	O
to	O
extend	O
my	O
comment	O
a	O
bit	O
.	O
.	O
.	O
About	O
paradigm	O
\	O
style	O
That	O
'	O
s	O
probably	O
the	O
most	O
notable	O
aspect	O
.	O
FP	O
became	O
popular	O
due	O
to	O
what	O
you	O
can	O
get	O
avoiding	O
side	O
-	O
effects	O
.	O
I	O
won	O
'	O
t	O
delve	O
deep	O
into	O
what	O
pros	O
\	O
cons	O
you	O
can	O
get	O
from	O
this	O
,	O
since	O
this	O
is	O
not	O
related	O
to	O
the	O
question	O
.	O
However	O
,	O
I	O
will	O
say	O
that	O
the	O
iteration	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
inspired	O
by	O
FP	O
and	O
rather	O
result	O
of	O
bringing	O
more	O
FP	O
to	O
Java	O
(	O
ironically	O
,	O
I	O
'	O
d	O
say	O
that	O
there	O
is	O
no	O
much	O
use	O
for	O
forEach	B-api_mention
in	O
pure	O
FP	O
,	O
since	O
it	O
does	O
nothing	O
except	O
introducing	O
side	O
-	O
effects	O
)	O
.	O
In	O
the	O
end	O
I	O
would	O
say	O
that	O
it	O
is	O
rather	O
a	O
matter	O
of	O
taste	O
\	O
style	O
\	O
paradigm	O
you	O
are	O
currently	O
writing	O
in	O
.	O
About	O
parallelism	O
.	O
From	O
performance	O
point	O
of	O
view	O
there	O
is	O
no	O
promised	O
notable	O
benefits	O
from	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
over	O
foreach	O
(	O
.	O
.	O
.	O
)	O
.	O
According	O
to	O
official	O
docs	O
on	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
:	O
#	O
blockquote	O
.	O
.	O
.	O
i	O
.	O
e	O
.	O
docs	O
pretty	O
much	O
clear	O
that	O
there	O
will	O
be	O
no	O
implicit	O
parallelism	O
.	O
Adding	O
one	O
would	O
be	O
LSP	O
violation	O
.	O
Now	O
,	O
there	O
are	O
"	O
parallell	O
collections	O
"	O
that	O
are	O
promised	O
in	O
Java	O
8	O
,	O
but	O
to	O
work	O
with	O
those	O
you	O
need	O
to	O
me	O
more	O
explicit	O
and	O
put	O
some	O
extra	O
care	O
to	O
use	O
them	O
(	O
see	O
mschenk74	O
'	O
s	O
answer	O
for	O
example	O
)	O
.	O
BTW	O
:	O
in	O
this	O
case	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
be	O
used	O
,	O
and	O
it	O
doesn	O
'	O
t	O
guarantee	O
that	O
actual	O
work	O
will	O
be	O
done	O
in	O
parallell	O
(	O
depends	O
on	O
underlying	O
collection	O
)	O
.	O
UPDATE	O
:	O
might	O
be	O
not	O
that	O
obvious	O
and	O
a	O
little	O
stretched	O
at	O
a	O
glance	O
but	O
there	O
is	O
another	O
facet	O
of	O
style	O
and	O
readability	O
perspective	O
.	O
First	O
of	O
all	O
-	O
plain	O
old	O
forloops	O
are	O
plain	O
and	O
old	O
.	O
Everybody	O
already	O
knows	O
them	O
.	O
Second	O
,	O
and	O
more	O
important	O
-	O
you	O
probably	O
want	O
to	O
use	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
only	O
with	O
one	O
-	O
liner	O
lambdas	O
.	O
If	O
"	O
body	O
"	O
gets	O
heavier	O
-	O
they	O
tend	O
to	O
be	O
not	O
-	O
that	O
readable	O
.	O
You	O
have	O
2	O
options	O
from	O
here	O
-	O
use	O
inner	O
classes	O
(	O
yuck	O
)	O
or	O
use	O
plain	O
old	O
forloop	O
.	O
People	O
often	O
gets	O
annoyed	O
when	O
they	O
see	O
the	O
same	O
things	O
(	O
iteratins	O
over	O
collections	O
)	O
being	O
done	O
various	O
vays	O
/	O
styles	O
in	O
the	O
same	O
codebase	O
,	O
and	O
this	O
seems	O
to	O
be	O
the	O
case	O
.	O
Again	O
,	O
this	O
might	O
or	O
might	O
not	O
be	O
an	O
issue	O
.	O
Depends	O
on	O
people	O
working	O
on	O
code	O
.	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17832168	O
I	O
think	O
the	O
number	O
displayed	O
is	O
the	O
number	O
of	O
time	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
call	O
throws	O
the	O
Stackoverflow	B-api_mention
exception	O
.	O
It	O
probably	O
depend	O
on	O
the	O
implementation	O
of	O
the	O
println	B-api_mention
and	O
the	O
number	O
of	O
stacking	O
call	O
it	O
is	O
made	O
in	O
it	O
.	O
As	O
an	O
illustration	O
:	O
The	O
main	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
trigger	O
the	O
Stackoverflow	B-api_mention
exception	O
at	O
call	O
i	O
.	O
The	O
i	O
-	O
1	O
call	O
of	O
main	O
catch	O
the	O
exception	O
and	O
call	O
println	B-api_mention
which	O
trigger	O
a	O
second	O
Stackoverflow	B-api_mention
.	O
cnt	O
get	O
increment	O
to	O
1	O
.	O
The	O
i	O
-	O
2	O
call	O
of	O
main	O
catch	O
now	O
the	O
exception	O
and	O
call	O
println	B-api_mention
.	O
In	O
println	B-api_mention
a	O
method	O
is	O
called	O
triggering	O
a	O
3rd	O
exception	O
.	O
cnt	O
get	O
increment	O
to	O
2	O
.	O
this	O
continue	O
until	O
println	B-api_mention
can	O
make	O
all	O
its	O
needed	O
call	O
and	O
finally	O
display	O
the	O
value	O
of	O
cnt	O
.	O
This	O
is	O
then	O
dependent	O
of	O
the	O
actual	O
implementation	O
of	O
println	B-api_mention
.	O
For	O
the	O
JDK7	O
either	O
it	O
detect	O
cycling	O
call	O
and	O
throws	O
the	O
exception	O
earlier	O
either	O
it	O
keep	O
some	O
stack	O
resource	O
and	O
throw	O
the	O
exception	O
before	O
reaching	O
the	O
limit	O
to	O
give	O
some	O
room	O
for	O
remediation	O
logic	O
either	O
the	O
println	O
implementation	O
doesn	O
'	O
t	O
make	O
calls	O
either	O
the	O
+	O
+	O
operation	O
is	O
done	O
after	O
the	O
println	B-api_mention
call	O
thus	O
is	O
by	O
pass	O
by	O
the	O
exception	O
.	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
13612866	O
It	O
is	O
crucial	O
to	O
know	O
that	O
attributes	O
are	O
not	O
parameters	O
.	O
The	O
return	O
type	O
for	O
attributes	O
is	O
an	O
Object	B-api_mention
,	O
whereas	O
the	O
return	O
type	O
for	O
a	O
parameter	O
is	O
a	O
String	B-api_mention
.	O
When	O
calling	O
the	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
bear	O
in	O
mind	O
that	O
the	O
attributes	O
must	O
be	O
cast	O
.	O
Additionally	O
,	O
there	O
is	O
no	O
servlet	O
specific	O
attributes	O
,	O
and	O
there	O
are	O
no	O
session	O
parameters	O
.	O
This	O
post	O
is	O
written	O
with	O
the	O
purpose	O
to	O
connect	O
on	O
@	O
Bozho	O
'	O
s	O
response	O
,	O
as	O
additional	O
information	O
that	O
can	O
be	O
useful	O
for	O
other	O
people	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14563808	O
It	O
is	O
very	O
unlikely	O
that	O
random	O
number	O
generation	O
performance	O
would	O
be	O
an	O
issue	O
for	O
any	O
use	O
-	O
case	O
you	O
came	O
up	O
with	O
unless	O
accessing	O
a	O
single	O
Random	B-api_mention
instance	O
from	O
multiple	O
threads	O
(	O
because	O
Random	B-api_mention
is	O
synchronized	O
)	O
.	O
However	O
,	O
if	O
that	O
really	O
is	O
the	O
case	O
and	O
you	O
need	O
lots	O
of	O
random	O
numbers	O
fast	O
,	O
your	O
solution	O
is	O
far	O
too	O
unreliable	O
.	O
Sometimes	O
it	O
gives	O
good	O
results	O
,	O
sometimes	O
it	O
gives	O
horrible	O
results	O
(	O
based	O
on	O
the	O
initial	O
settings	O
)	O
.	O
If	O
you	O
want	O
the	O
same	O
numbers	O
that	O
the	O
Random	B-api_mention
class	O
gives	O
you	O
,	O
only	O
faster	O
,	O
you	O
could	O
get	O
rid	O
of	O
the	O
synchronization	O
in	O
there	O
:	O
#	O
pre	O
I	O
simply	O
took	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
code	O
and	O
removed	O
the	O
synchronization	O
which	O
results	O
in	O
twice	O
the	O
performance	O
compared	O
to	O
the	O
original	O
on	O
my	O
Oracle	O
HotSpot	O
JVM	O
7u9	O
.	O
It	O
is	O
still	O
slower	O
than	O
your	O
QuickRandom	B-api_mention
,	O
but	O
it	O
gives	O
much	O
more	O
consistent	O
results	O
.	O
To	O
be	O
precise	O
,	O
for	O
the	O
same	O
seed	O
values	O
and	O
single	O
threaded	O
applications	O
,	O
it	O
gives	O
the	O
same	O
pseudo	O
-	O
random	O
numbers	O
as	O
the	O
original	O
Random	B-api_mention
class	O
would	O
.	O
This	O
code	O
is	O
based	O
on	O
the	O
current	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
in	O
OpenJDK	O
7u	O
which	O
is	O
licensed	O
under	O
GNU	O
GPL	O
v2	O
.	O
EDIT	O
10	O
months	O
later	O
:	O
I	O
just	O
discovered	O
that	O
you	O
don	O
'	O
t	O
even	O
have	O
to	O
use	O
my	O
code	O
above	O
to	O
get	O
an	O
unsynchronized	O
Random	B-api_mention
instance	O
.	O
There	O
'	O
s	O
one	O
in	O
the	O
JDK	O
,	O
too	O
!	O
Look	O
at	O
Java	O
7	O
'	O
s	O
ThreadLocalRandom	B-api_mention
class	O
.	O
The	O
code	O
inside	O
it	O
is	O
almost	O
identical	O
to	O
my	O
code	O
above	O
.	O
The	O
class	O
is	O
simply	O
a	O
local	O
-	O
thread	O
-	O
isolated	O
Random	B-api_mention
version	O
suitable	O
for	O
generating	O
random	O
numbers	O
quickly	O
.	O
The	O
only	O
downside	O
I	O
can	O
think	O
of	O
is	O
that	O
you	O
can	O
'	O
t	O
set	O
its	O
seed	O
manually	O
.	O
Example	O
usage	O
:	O
Random	B-api_mention
random	O
=	O
ThreadLocalRandom	B-api_mention
.	I-api_mention
current	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
18481387	O
If	O
you	O
code	O
in	O
Android	O
,	O
there	O
is	O
SparseArray	B-api_mention
,	O
mapping	O
integer	O
to	O
object	O
.	O
Question	O
-	O
18666710	O
,	O
answer	O
-	O
18792306	O
An	O
important	O
feature	O
of	O
parametric	O
types	O
is	O
the	O
ability	O
to	O
write	O
polymorphic	O
algorithms	O
,	O
i	O
.	O
e	O
.	O
algorithms	O
that	O
operate	O
on	O
a	O
data	O
structure	O
regardless	O
of	O
its	O
parameter	O
value	O
,	O
such	O
as	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
With	O
generics	O
,	O
that	O
'	O
s	O
done	O
with	O
wildcard	O
types	O
:	O
<	O
E	O
extends	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
>	O
void	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
To	O
be	O
truly	O
useful	O
,	O
wildcard	O
types	O
require	O
wildcard	O
capture	O
,	O
and	O
that	O
requires	O
the	O
notion	O
of	O
a	O
type	O
parameter	O
.	O
None	O
of	O
that	O
was	O
available	O
at	O
the	O
time	O
arrays	O
were	O
added	O
to	O
Java	O
,	O
and	O
makings	O
arrays	O
of	O
reference	O
type	O
covariant	O
permitted	O
a	O
far	O
simpler	O
way	O
to	O
permit	O
polymorphic	O
algorithms	O
:	O
void	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
,	O
that	O
simplicity	O
opened	O
a	O
loophole	O
in	O
the	O
static	O
type	O
system	O
:	O
#	O
pre	O
requiring	O
a	O
runtime	O
check	O
of	O
every	O
write	O
access	O
to	O
an	O
array	O
of	O
reference	O
type	O
.	O
In	O
a	O
nutshell	O
,	O
the	O
newer	O
approach	O
embodied	O
by	O
generics	O
makes	O
the	O
type	O
system	O
more	O
complex	O
,	O
but	O
also	O
more	O
statically	O
type	O
safe	O
,	O
while	O
the	O
older	O
approach	O
was	O
simpler	O
,	O
and	O
less	O
statically	O
type	O
safe	O
.	O
The	O
designers	O
of	O
the	O
language	O
opted	O
for	O
the	O
simpler	O
approach	O
,	O
having	O
more	O
important	O
things	O
to	O
do	O
than	O
closing	O
a	O
small	O
loophole	O
in	O
the	O
type	O
system	O
that	O
rarely	O
causes	O
problems	O
.	O
Later	O
,	O
when	O
Java	O
was	O
established	O
,	O
and	O
the	O
pressing	O
needs	O
taken	O
care	O
of	O
,	O
they	O
had	O
the	O
resources	O
to	O
do	O
it	O
right	O
for	O
generics	O
(	O
but	O
changing	O
it	O
for	O
arrays	O
would	O
have	O
broken	O
existing	O
Java	O
programs	O
)	O
.	O
Question	O
-	O
10786042	O
Say	O
I	O
have	O
a	O
URL	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
query	O
?	O
q	O
=	O
and	O
I	O
have	O
a	O
query	O
entered	O
by	O
the	O
user	O
such	O
as	O
:	O
#	O
blockquote	O
I	O
want	O
the	O
result	O
to	O
be	O
a	O
properly	O
encoded	O
URL	O
:	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
query	O
?	O
q	O
=	O
random	O
%	O
20word	O
%	O
20	O
%	O
A3500	O
%	O
20bank	O
%	O
20	O
%	O
24	O
What	O
'	O
s	O
the	O
best	O
way	O
to	O
achieve	O
this	O
?	O
I	O
tried	O
URLEncoder	B-api_mention
and	O
creating	O
URI	O
/	O
URL	O
objects	O
but	O
none	O
of	O
them	O
come	O
out	O
quite	O
right	O
.	O
Question	O
-	O
32334319	O
,	O
answer	O
-	O
39380442	O
As	O
stated	O
across	O
many	O
of	O
the	O
answers	O
.	O
The	O
Quicksort	O
is	O
used	O
by	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
for	O
sorting	O
primitive	O
collections	O
because	O
stability	O
isn	O
'	O
t	O
required	O
(	O
you	O
won	O
'	O
t	O
know	O
or	O
care	O
if	O
two	O
identical	O
ints	O
were	O
swapped	O
in	O
the	O
sort	O
)	O
MergeSort	O
or	O
more	O
specifically	O
Timsort	O
is	O
used	O
by	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
for	O
sorting	O
collections	O
of	O
objects	O
.	O
Stability	O
is	O
required	O
.	O
Quicksort	O
does	O
not	O
provide	O
for	O
stability	O
,	O
Timsort	O
does	O
.	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
delegates	O
to	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
which	O
is	O
why	O
you	O
see	O
the	O
javadoc	O
referencing	O
the	O
MergeSort	O
.	O
Question	O
-	O
6470651	O
,	O
answer	O
-	O
6548647	O
Static	O
field	O
holding	O
object	O
reference	O
[	O
esp	O
final	O
field	O
]	O
#	O
pre	O
Calling	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
lengthy	O
String	B-api_mention
#	O
pre	O
(	O
Unclosed	O
)	O
open	O
streams	O
(	O
file	O
,	O
network	O
etc	O
.	O
.	O
.	O
)	O
#	O
pre	O
Unclosed	O
connections	O
#	O
pre	O
Areas	O
that	O
are	O
unreachable	O
from	O
JVM	O
'	O
s	O
garbage	O
collector	O
,	O
such	O
as	O
memory	O
allocated	O
through	O
native	O
methods	O
In	O
web	O
applications	O
,	O
some	O
objects	O
are	O
stored	O
in	O
application	O
scope	O
until	O
the	O
application	O
is	O
explicitly	O
stopped	O
or	O
removed	O
.	O
getServletContext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
setAttribute	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Incorrect	O
or	O
inappropriate	O
JVM	O
options	O
,	O
such	O
as	O
the	O
noclassgc	O
option	O
on	O
IBM	O
JDK	O
that	O
prevents	O
unused	O
class	O
garbage	O
collection	O
See	O
IBM	O
jdk	O
settings	O
.	O
Question	O
-	O
33635717	O
I	O
'	O
m	O
reading	O
up	O
about	O
Java	O
streams	O
and	O
discovering	O
new	O
things	O
as	O
I	O
go	O
along	O
.	O
One	O
of	O
the	O
new	O
things	O
I	O
found	O
was	O
the	O
peek	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
.	O
Almost	O
everything	O
I	O
'	O
ve	O
read	O
on	O
peek	O
says	O
it	O
should	O
be	O
used	O
to	O
debug	O
your	O
Streams	O
.	O
What	O
if	O
I	O
had	O
a	O
Stream	B-api_mention
where	O
each	O
Account	O
has	O
a	O
username	O
,	O
password	O
field	O
and	O
a	O
login	O
(	O
)	O
and	O
loggedIn	O
(	O
)	O
method	O
.	O
I	O
also	O
have	O
Consumer	O
<	O
T	O
>	O
login	O
=	O
account	O
-	O
>	O
account	O
.	O
login	O
(	O
args	O
)	O
;	O
and	O
Predicate	O
<	O
T	O
>	O
loggedIn	O
=	O
account	O
-	O
>	O
account	O
.	O
loggedIn	O
(	O
args	O
)	O
;	O
Why	O
would	O
this	O
be	O
so	O
bad	O
?	O
#	O
pre	O
Now	O
as	O
far	O
as	O
I	O
can	O
tell	O
this	O
does	O
exactly	O
what	O
it	O
'	O
s	O
intended	O
to	O
do	O
.	O
It	O
;	O
#	O
li	O
Takes	O
a	O
list	O
of	O
accounts	O
#	O
li	O
Tries	O
to	O
log	O
in	O
to	O
each	O
account	O
#	O
li	O
Filters	O
out	O
any	O
account	O
which	O
aren	O
'	O
t	O
logged	O
in	O
#	O
li	O
Collects	O
the	O
logged	O
in	O
accounts	O
into	O
a	O
new	O
list	O
What	O
is	O
the	O
downside	O
of	O
doing	O
something	O
like	O
this	O
?	O
Any	O
reason	O
I	O
shouldn	O
'	O
t	O
proceed	O
?	O
Lastly	O
,	O
if	O
not	O
this	O
solution	O
then	O
what	O
?	O
The	O
original	O
version	O
of	O
this	O
used	O
the	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
as	O
follows	O
;	O
#	O
pre	O
Question	O
-	O
25222811	O
,	O
answer	O
-	O
26676046	O
To	O
begin	O
with	O
(	O
and	O
unrelated	O
)	O
,	O
instantiating	O
the	O
Application	B-api_mention
class	O
by	O
yourself	O
does	O
not	O
seem	O
to	O
be	O
its	O
intended	O
use	O
.	O
From	O
what	O
one	O
can	O
read	O
from	O
its	O
source	O
,	O
you	O
are	O
rather	O
expected	O
to	O
use	O
the	O
static	O
instance	O
returned	O
by	O
getApplication	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Now	O
let	O
'	O
s	O
get	O
to	O
the	O
error	O
Eclipse	O
reports	O
.	O
I	O
'	O
ve	O
ran	O
into	O
a	O
similar	O
issue	O
recently	O
:	O
Access	O
restriction	O
:	O
The	O
method	O
.	O
.	O
.	O
is	O
not	O
API	O
(	O
args	O
)	O
.	O
I	O
called	O
the	O
method	O
in	O
question	O
as	O
a	O
method	O
of	O
an	O
object	O
which	O
inherited	O
that	O
method	O
from	O
a	O
super	O
class	O
.	O
All	O
I	O
had	O
to	O
do	O
was	O
to	O
add	O
the	O
package	O
the	O
super	O
class	O
was	O
in	O
to	O
the	O
packages	O
imported	O
by	O
my	O
plugin	O
.	O
However	O
,	O
there	O
is	O
a	O
lot	O
of	O
different	O
causes	O
for	O
errors	O
based	O
on	O
"	O
restriction	O
on	O
required	O
project	O
/	O
library	O
"	O
.	O
Similar	O
to	O
the	O
problem	O
described	O
above	O
,	O
the	O
type	O
you	O
are	O
using	O
might	O
have	O
dependencies	O
to	O
packages	O
that	O
are	O
not	O
exported	O
by	O
the	O
library	O
or	O
might	O
not	O
be	O
exported	O
itself	O
.	O
In	O
that	O
case	O
you	O
can	O
try	O
to	O
track	O
down	O
the	O
missing	O
packages	O
and	O
export	O
them	O
my	O
yourself	O
,	O
as	O
suggested	O
here	O
,	O
or	O
try	O
Access	O
Rules	O
.	O
Other	O
possible	O
scenarios	O
include	O
:	O
#	O
li	O
Eclipse	O
wants	O
to	O
keep	O
you	O
from	O
using	O
available	O
packages	O
that	O
are	O
not	O
part	O
of	O
the	O
public	O
Java	O
API	O
(	O
solution	O
1	O
,	O
2	O
)	O
#	O
li	O
Dependencies	O
are	O
satisfied	O
by	O
multiple	O
sources	O
,	O
versions	O
are	O
conflicting	O
etc	O
.	O
(	O
solution	O
1	O
,	O
2	O
,	O
3	O
)	O
#	O
li	O
Eclipse	O
is	O
using	O
a	O
JRE	O
where	O
a	O
JDK	O
is	O
necessary	O
(	O
which	O
might	O
be	O
the	O
case	O
here	O
,	O
from	O
what	O
your	O
errors	O
say	O
;	O
solution	O
)	O
or	O
JRE	O
/	O
JDK	O
version	O
in	O
project	O
build	O
path	O
is	O
not	O
the	O
right	O
one	O
This	O
ended	O
up	O
as	O
more	O
like	O
a	O
medley	O
of	O
restriction	O
-	O
related	O
issues	O
than	O
an	O
actual	O
answer	O
.	O
But	O
since	O
restriction	O
on	O
required	O
projects	O
is	O
such	O
a	O
versatile	O
error	O
to	O
be	O
reported	O
,	O
the	O
perfect	O
recipe	O
is	O
probably	O
still	O
to	O
be	O
found	O
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28323553	O
One	O
of	O
the	O
main	O
benefits	O
of	O
using	O
streams	O
is	O
that	O
it	O
gives	O
the	O
ability	O
to	O
process	O
data	O
in	O
a	O
declarative	O
way	O
,	O
that	O
is	O
,	O
using	O
a	O
functional	O
style	O
of	O
programming	O
.	O
It	O
also	O
gives	O
multi	O
-	O
threading	O
capability	O
for	O
free	O
meaning	O
there	O
is	O
no	O
need	O
to	O
write	O
any	O
extra	O
multi	O
-	O
threaded	O
code	O
to	O
make	O
your	O
stream	O
concurrent	O
.	O
Assuming	O
the	O
reason	O
you	O
are	O
exploring	O
this	O
style	O
of	O
programming	O
is	O
that	O
you	O
want	O
to	O
exploit	O
these	O
benefits	O
then	O
your	O
first	O
code	O
sample	O
is	O
potentially	O
not	O
functional	O
since	O
the	O
foreach	O
method	O
is	O
classed	O
as	O
being	O
terminal	O
(	O
meaning	O
that	O
it	O
can	O
produce	O
side	O
-	O
effects	O
)	O
.	O
The	O
second	O
way	O
is	O
preferred	O
from	O
functional	O
programming	O
point	O
of	O
view	O
since	O
the	O
map	O
function	O
can	O
accept	O
stateless	O
lambda	O
functions	O
.	O
More	O
explicitly	O
,	O
the	O
lambda	O
passed	O
to	O
the	O
map	O
function	O
should	O
be	O
#	O
li	O
Non	O
-	O
interfering	O
,	O
meaning	O
that	O
the	O
function	O
should	O
not	O
alter	O
the	O
source	O
of	O
the	O
stream	O
if	O
it	O
is	O
non	O
-	O
concurrent	O
(	O
e	O
.	O
g	O
.	O
ArrayList	B-api_mention
)	O
.	O
#	O
li	O
Stateless	O
to	O
avoid	O
unexpected	O
results	O
when	O
doing	O
parallel	O
processing	O
(	O
caused	O
by	O
thread	O
scheduling	O
differences	O
)	O
.	O
Another	O
benefit	O
with	O
the	O
second	O
approach	O
is	O
if	O
the	O
stream	O
is	O
parallel	O
and	O
the	O
collector	O
is	O
concurrent	O
and	O
unordered	O
then	O
these	O
characteristics	O
can	O
provide	O
useful	O
hints	O
to	O
the	O
reduction	O
operation	O
to	O
do	O
the	O
collecting	O
concurrently	O
.	O
Question	O
-	O
16635398	O
Which	O
of	O
the	O
following	O
is	O
better	O
practice	O
in	O
Java	O
8	O
?	O
Java	O
8	O
:	O
joins	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Java	O
7	O
:	O
#	O
pre	O
I	O
have	O
lots	O
of	O
for	O
loops	O
that	O
could	O
be	O
"	O
simplified	O
"	O
with	O
lambdas	O
,	O
but	O
is	O
there	O
really	O
any	O
advantage	O
of	O
using	O
them	O
including	O
performance	O
and	O
readability	O
?	O
EDIT	O
I	O
'	O
ll	O
also	O
extend	O
this	O
question	O
to	O
longer	O
methods	O
-	O
I	O
know	O
that	O
you	O
cant	O
return	O
or	O
break	O
the	O
parent	O
function	O
from	O
a	O
lambda	O
and	O
this	O
should	O
be	O
mentioned	O
to	O
if	O
they	O
are	O
compared	O
,	O
but	O
is	O
there	O
anything	O
else	O
to	O
be	O
considered	O
?	O
Question	O
-	O
24511052	O
I	O
am	O
looking	O
for	O
a	O
concise	O
way	O
to	O
convert	O
an	O
Iterator	B-api_mention
to	O
a	O
Stream	B-api_mention
or	O
more	O
specifically	O
to	O
"	O
view	O
"	O
the	O
iterator	O
as	O
a	O
stream	O
.	O
For	O
performance	O
reason	O
,	O
I	O
would	O
like	O
to	O
avoid	O
a	O
copy	O
of	O
the	O
iterator	O
in	O
a	O
new	O
list	O
:	O
#	O
pre	O
Based	O
on	O
the	O
some	O
suggestions	O
in	O
the	O
comments	O
,	O
I	O
have	O
also	O
tried	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
generate	I-api_mention
:	O
#	O
pre	O
However	O
,	O
I	O
get	O
a	O
NoSuchElementException	B-api_mention
(	O
since	O
there	O
is	O
no	O
invocation	O
of	O
hasNext	B-api_mention
)	O
#	O
pre	O
I	O
have	O
looked	O
at	O
StreamSupport	B-api_mention
and	O
Collections	B-api_mention
but	O
I	O
didn	O
'	O
t	O
find	O
anything	O
.	O
Question	O
-	O
20375176	O
,	O
answer	O
-	O
20375622	O
A	O
parallel	O
stream	O
has	O
a	O
much	O
higher	O
overhead	O
compared	O
to	O
a	O
sequential	O
one	O
.	O
Coordinating	O
the	O
threads	O
takes	O
a	O
significant	O
amount	O
of	O
time	O
.	O
I	O
would	O
use	O
sequential	O
streams	O
by	O
default	O
and	O
only	O
consider	O
parallel	O
ones	O
if	O
#	O
li	O
I	O
have	O
a	O
massive	O
amount	O
of	O
items	O
to	O
process	O
(	O
or	O
the	O
processing	O
of	O
each	O
item	O
takes	O
time	O
and	O
is	O
parallelizable	O
)	O
#	O
li	O
I	O
have	O
a	O
performance	O
problem	O
in	O
the	O
first	O
place	O
#	O
li	O
I	O
don	O
'	O
t	O
already	O
run	O
the	O
process	O
in	O
a	O
multi	O
-	O
thread	O
environment	O
(	O
for	O
example	O
:	O
in	O
a	O
web	O
container	O
,	O
if	O
I	O
already	O
have	O
many	O
requests	O
to	O
process	O
in	O
parallel	O
,	O
adding	O
an	O
additional	O
layer	O
of	O
parallelism	O
inside	O
each	O
request	O
could	O
have	O
more	O
negative	O
than	O
positive	O
effects	O
)	O
In	O
your	O
example	O
,	O
the	O
performance	O
will	O
anyway	O
be	O
driven	O
by	O
the	O
synchronized	O
access	O
to	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
making	O
this	O
process	O
parallel	O
will	O
have	O
no	O
effect	O
,	O
or	O
even	O
a	O
negative	O
one	O
.	O
Moreover	O
,	O
remember	O
that	O
parallel	O
streams	O
don	O
'	O
t	O
magically	O
solve	O
all	O
the	O
synchronization	O
problems	O
.	O
If	O
a	O
shared	O
resource	O
is	O
used	O
by	O
the	O
predicates	O
and	O
functions	O
used	O
in	O
the	O
process	O
,	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
that	O
everything	O
is	O
thread	O
-	O
safe	O
.	O
In	O
particular	O
,	O
side	O
effects	O
are	O
tings	O
you	O
really	O
have	O
to	O
worry	O
about	O
if	O
you	O
go	O
parallel	O
.	O
In	O
any	O
case	O
,	O
measure	O
,	O
don	O
'	O
t	O
guess	O
!	O
Only	O
a	O
measurement	O
will	O
tell	O
you	O
if	O
the	O
parallelism	O
is	O
worth	O
it	O
or	O
not	O
.	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
27760556	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28590286	O
Since	O
Double	B-api_mention
.	I-api_mention
Nan	I-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
Double	I-api_mention
.	I-api_mention
NaN	I-api_mention
)	I-api_mention
was	O
mentioned	O
:	O
It	O
'	O
s	O
one	O
thing	O
what	O
should	O
happen	O
when	O
you	O
perform	O
arithmetic	O
and	O
compare	O
numbers	O
,	O
it	O
'	O
s	O
a	O
totally	O
different	O
thing	O
when	O
you	O
consider	O
how	O
objects	O
should	O
behave	O
.	O
Two	O
typical	O
problem	O
cases	O
are	O
:	O
Sorting	O
an	O
array	O
of	O
numbers	O
,	O
and	O
using	O
hash	O
values	O
to	O
implement	O
dictionaries	O
,	O
sets	O
,	O
and	O
so	O
on	O
.	O
There	O
are	O
two	O
exceptional	O
cases	O
where	O
the	O
normal	O
ordering	O
with	O
<	O
,	O
=	O
and	O
>	O
doesn	O
'	O
t	O
apply	O
:	O
One	O
case	O
is	O
that	O
+	O
0	O
=	O
-	O
0	O
and	O
the	O
other	O
is	O
that	O
NaN	O
≠	O
NaN	O
,	O
and	O
x	O
<	O
NaN	O
,	O
x	O
>	O
NaN	O
,	O
x	O
=	O
NaN	O
will	O
always	O
be	O
false	O
whatever	O
x	O
is	O
.	O
Sorting	O
algorithms	O
can	O
get	O
into	O
trouble	O
with	O
this	O
.	O
A	O
sorting	O
algorithm	O
may	O
assume	O
that	O
x	O
=	O
x	O
is	O
always	O
true	O
.	O
So	O
if	O
I	O
know	O
that	O
x	O
is	O
stored	O
in	O
an	O
array	O
and	O
look	O
for	O
it	O
,	O
I	O
might	O
not	O
do	O
any	O
bounds	O
check	O
because	O
the	O
search	O
for	O
it	O
must	O
find	O
something	O
.	O
Not	O
if	O
x	O
is	O
NaN	O
.	O
A	O
sorting	O
algorithm	O
may	O
assume	O
that	O
exactly	O
one	O
of	O
a	O
<	O
b	O
and	O
a	O
>	O
=	O
b	O
must	O
be	O
true	O
.	O
Not	O
if	O
one	O
is	O
NaN	O
.	O
So	O
a	O
naive	O
sorting	O
algorithm	O
may	O
crash	O
when	O
NaNs	O
are	O
present	O
.	O
You	O
'	O
d	O
have	O
to	O
decide	O
where	O
you	O
want	O
NaNs	O
to	O
end	O
up	O
when	O
sorting	O
the	O
array	O
,	O
and	O
then	O
change	O
your	O
comparison	O
code	O
so	O
that	O
it	O
works	O
.	O
Now	O
dictionaries	O
and	O
sets	O
and	O
generally	O
hashing	O
:	O
What	O
if	O
I	O
use	O
an	O
NaN	O
as	O
the	O
key	O
?	O
A	O
set	O
contains	O
unique	O
objects	O
.	O
If	O
the	O
set	O
contains	O
an	O
NaN	O
and	O
I	O
try	O
to	O
add	O
another	O
one	O
,	O
is	O
it	O
unique	O
because	O
it	O
is	O
not	O
equal	O
to	O
the	O
one	O
that	O
is	O
already	O
there	O
?	O
What	O
about	O
+	O
0	O
and	O
-	O
0	O
,	O
should	O
they	O
be	O
considered	O
equal	O
or	O
different	O
?	O
There	O
'	O
s	O
the	O
rule	O
that	O
any	O
two	O
items	O
considered	O
equal	O
must	O
have	O
the	O
same	O
hash	O
value	O
.	O
So	O
the	O
sensible	O
thing	O
is	O
(	O
probably	O
)	O
that	O
a	O
hash	O
function	O
returns	O
one	O
unique	O
value	O
for	O
all	O
NaNs	O
,	O
and	O
one	O
unique	O
value	O
for	O
+	O
0	O
and	O
-	O
0	O
.	O
And	O
after	O
the	O
hash	O
lookup	O
when	O
you	O
need	O
to	O
find	O
an	O
element	O
with	O
the	O
same	O
hash	O
value	O
that	O
is	O
actually	O
equal	O
,	O
two	O
NaNs	O
should	O
be	O
considered	O
equal	O
(	O
but	O
different	O
from	O
anything	O
else	O
)	O
.	O
That	O
'	O
s	O
probably	O
why	O
Double	B-api_mention
.	I-api_mention
Nan	I-api_mention
.	I-api_mention
equal	I-api_mention
(	I-api_mention
)	I-api_mention
behaves	O
different	O
from	O
=	O
=	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148647	O
Please	O
use	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888447	O
You	O
can	O
use	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
E	O
.	O
g	O
.	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
can	O
also	O
use	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
as	O
mentioned	O
by	O
@	O
fge	O
,	O
which	O
looks	O
like	O
#	O
pre	O
But	O
note	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
whereas	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
IntStream	B-api_mention
providing	O
you	O
pass	O
an	O
array	O
of	O
type	O
int	O
[	O
]	O
.	O
So	O
in	O
a	O
nutshell	O
for	O
primitives	O
type	O
you	O
can	O
observe	O
the	O
difference	O
between	O
2	O
methods	O
E	O
.	O
g	O
.	O
#	O
pre	O
When	O
you	O
pass	O
primitive	O
array	O
to	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
,	O
the	O
following	O
code	O
is	O
invoked	O
#	O
pre	O
and	O
when	O
you	O
pass	O
primitive	O
array	O
to	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
the	O
following	O
code	O
is	O
invoked	O
#	O
pre	O
Hence	O
you	O
get	O
different	O
results	O
.	O
Updated	O
:	O
As	O
mentioned	O
by	O
Stuart	O
Marks	O
comment	O
The	O
subrange	O
overload	O
of	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
is	O
preferable	O
to	O
using	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
the	O
former	O
results	O
in	O
a	O
SIZED	O
stream	O
whereas	O
the	O
latter	O
does	O
not	O
.	O
The	O
reason	O
is	O
that	O
limit	O
(	O
args	O
)	O
doesn	O
'	O
t	O
know	O
whether	O
the	O
size	O
is	O
m	O
or	O
less	O
than	O
m	O
,	O
whereas	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
does	O
range	O
checks	O
and	O
knows	O
the	O
exact	O
size	O
of	O
the	O
stream	O
You	O
can	O
read	O
the	O
source	O
code	O
for	O
stream	O
implementation	O
returned	O
by	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
here	O
,	O
whereas	O
for	O
stream	O
implementation	O
returned	O
by	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
within	O
this	O
method	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
35074360	O
I	O
have	O
written	O
a	O
complete	O
utility	O
class	O
(	O
inspired	O
by	O
Askar	O
'	O
s	O
proposal	O
)	O
that	O
can	O
take	O
Java	O
8	O
lambda	O
expression	O
and	O
turn	O
them	O
(	O
if	O
applicable	O
)	O
into	O
any	O
typed	O
standard	O
Java	O
8	O
lambda	O
defined	O
in	O
the	O
package	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	O
You	O
can	O
for	O
example	O
do	O
:	O
#	O
li	O
asPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
asBiPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Because	O
there	O
would	O
be	O
numerous	O
ambiguities	O
if	O
all	O
the	O
static	O
methods	O
would	O
be	O
named	O
just	O
as	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
opted	O
to	O
call	O
the	O
method	O
"	O
as	O
"	O
followed	O
by	O
the	O
returned	O
type	O
.	O
This	O
gives	O
us	O
full	O
control	O
of	O
the	O
lambda	O
interpretation	O
.	O
Below	O
is	O
the	O
first	O
part	O
of	O
the	O
(	O
somewhat	O
large	O
)	O
utility	O
class	O
revealing	O
the	O
pattern	O
used	O
.	O
Have	O
a	O
look	O
at	O
the	O
complete	O
class	O
here	O
(	O
at	O
gist	O
)	O
.	O
#	O
pre	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
25855691	O
TL	O
;	O
DR	O
:	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
the	O
fastest	O
.	O
I	O
felt	O
I	O
should	O
add	O
my	O
results	O
from	O
benchmarking	O
iteration	O
.	O
I	O
took	O
a	O
very	O
simple	O
approach	O
(	O
no	O
benchmarking	O
frameworks	O
)	O
and	O
benchmarked	O
5	O
different	O
methods	O
:	O
#	O
li	O
classic	O
for	O
#	O
li	O
classic	O
foreach	O
#	O
li	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
the	O
testing	O
procedure	O
and	O
parameters	O
#	O
pre	O
The	O
list	O
in	O
this	O
class	O
shall	O
be	O
iterated	O
over	O
and	O
have	O
some	O
doIt	O
(	O
args	O
)	O
applied	O
to	O
all	O
it	O
'	O
s	O
members	O
,	O
each	O
time	O
via	O
a	O
different	O
method	O
.	O
in	O
the	O
Main	O
class	O
I	O
run	O
the	O
tested	O
method	O
three	O
times	O
to	O
warm	O
up	O
the	O
JVM	O
.	O
I	O
then	O
run	O
the	O
test	O
method	O
1000	O
times	O
summing	O
the	O
time	O
it	O
takes	O
for	O
each	O
iteration	O
method	O
(	O
using	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
After	O
that	O
'	O
s	O
done	O
i	O
divide	O
that	O
sum	O
by	O
1000	O
and	O
that	O
'	O
s	O
the	O
result	O
,	O
average	O
time	O
.	O
example	O
:	O
#	O
pre	O
I	O
ran	O
this	O
on	O
a	O
i5	O
4	O
core	O
CPU	O
,	O
with	O
java	O
version	O
1	O
.	O
8	O
.	O
0	O
_	O
05	O
classic	O
for	O
#	O
pre	O
execution	O
time	O
:	O
4	O
.	O
21	O
ms	O
classic	O
foreach	O
#	O
pre	O
execution	O
time	O
:	O
5	O
.	O
95	O
ms	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
11	O
ms	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
2	O
.	O
79	O
ms	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
list	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
6	O
ms	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489376	O
String	B-api_mention
gets	O
special	O
treatment	O
in	O
the	O
JLS	O
:	O
it	O
'	O
s	O
one	O
of	O
the	O
two	O
non	O
-	O
primitive	O
types	O
for	O
which	O
literals	O
exist	O
(	O
the	O
other	O
is	O
Class	B-api_mention
)	O
*	O
.	O
From	O
the	O
JLS	O
:	O
#	O
blockquote	O
*	O
well	O
,	O
there	O
'	O
s	O
also	O
the	O
"	O
null	O
type	O
"	O
with	O
it	O
'	O
s	O
"	O
null	O
literal	O
"	O
null	O
,	O
but	O
most	O
people	O
don	O
'	O
t	O
think	O
of	O
the	O
"	O
null	O
type	O
"	O
as	O
a	O
proper	O
type	O
.	O
Question	O
-	O
13604703	O
,	O
answer	O
-	O
13604748	O
Lambdas	O
are	O
purely	O
a	O
call	O
-	O
site	O
construct	O
:	O
the	O
recipient	O
of	O
the	O
lambda	O
does	O
not	O
need	O
to	O
know	O
that	O
a	O
Lambda	O
is	O
involved	O
,	O
instead	O
it	O
accepts	O
an	O
Interface	O
with	O
the	O
appropriate	O
method	O
.	O
In	O
other	O
words	O
,	O
you	O
define	O
or	O
use	O
a	O
functional	O
interface	O
(	O
i	O
.	O
e	O
.	O
an	O
interface	O
with	O
a	O
single	O
method	O
)	O
that	O
accepts	O
and	O
returns	O
exactly	O
what	O
you	O
want	O
.	O
For	O
this	O
Java	O
8	O
comes	O
with	O
a	O
set	O
of	O
commonly	O
-	O
used	O
interface	O
types	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
(	O
thanks	O
to	O
Maurice	O
Naftalin	O
for	O
the	O
hint	O
about	O
the	O
JavaDoc	O
)	O
.	O
For	O
this	O
specific	O
use	O
case	O
there	O
'	O
s	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	I-api_mention
IntBinaryOperator	I-api_mention
with	O
a	O
single	O
int	O
applyAsInt	B-api_mention
(	I-api_mention
int	I-api_mention
left	I-api_mention
,	I-api_mention
int	I-api_mention
right	I-api_mention
)	I-api_mention
method	O
,	O
so	O
you	O
could	O
write	O
your	O
method	O
like	O
this	O
:	O
#	O
pre	O
But	O
you	O
can	O
just	O
as	O
well	O
define	O
your	O
own	O
interface	O
and	O
use	O
it	O
like	O
this	O
:	O
#	O
pre	O
Using	O
your	O
own	O
interface	O
has	O
the	O
advantage	O
that	O
you	O
can	O
have	O
names	O
that	O
more	O
clearly	O
indicate	O
the	O
intent	O
.	O
Question	O
-	O
5778658	O
,	O
answer	O
-	O
5778863	O
An	O
OutputStream	B-api_mention
is	O
one	O
where	O
you	O
write	O
data	O
to	O
.	O
If	O
some	O
module	O
exposes	O
an	O
OutputStream	B-api_mention
,	O
the	O
expectation	O
is	O
that	O
there	O
is	O
something	O
at	O
the	O
other	O
end	O
that	O
is	O
reading	O
.	O
Something	O
that	O
exposes	O
an	O
InputStream	B-api_mention
on	O
the	O
other	O
hand	O
is	O
indicating	O
that	O
you	O
will	O
need	O
to	O
listen	O
to	O
this	O
stream	O
,	O
and	O
there	O
will	O
be	O
data	O
that	O
you	O
can	O
read	O
.	O
So	O
it	O
is	O
possible	O
to	O
connect	O
an	O
InputStream	B-api_mention
to	O
an	O
OutputStream	B-api_mention
InputStream	I-api_mention
-	O
-	O
-	O
-	O
read	O
-	O
-	O
-	O
>	O
intermediateBytes	O
[	O
n	O
]	O
-	O
-	O
-	O
-	O
write	O
-	O
-	O
-	O
-	O
>	O
OutputStream	B-api_mention
As	O
someone	O
metioned	O
,	O
this	O
is	O
what	O
the	O
copy	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
from	O
IOUtils	B-api_mention
lets	O
you	O
do	O
.	O
It	O
does	O
not	O
make	O
sense	O
to	O
go	O
the	O
other	O
way	O
.	O
.	O
.	O
hopefully	O
this	O
makes	O
some	O
sense	O
UPDATE	O
:	O
Of	O
course	O
the	O
more	O
I	O
think	O
of	O
this	O
,	O
the	O
more	O
I	O
can	O
see	O
how	O
this	O
actually	O
would	O
be	O
a	O
requirement	O
.	O
I	O
know	O
some	O
of	O
the	O
comments	O
mentioned	O
Piped	O
input	O
/	O
ouput	O
streams	O
,	O
but	O
there	O
is	O
another	O
possibility	O
.	O
If	O
the	O
output	O
stream	O
that	O
is	O
exposed	O
is	O
a	O
ByteArrayOutputStream	B-api_mention
,	O
then	O
you	O
can	O
always	O
get	O
the	O
full	O
contents	O
by	O
calling	O
the	O
toByteArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Then	O
you	O
can	O
create	O
an	O
input	O
stream	O
wrapper	O
by	O
using	O
the	O
ByteArrayInputStream	B-api_mention
sub	O
-	O
class	O
.	O
These	O
two	O
are	O
pseudo	O
-	O
streams	O
,	O
they	O
both	O
basically	O
just	O
wrap	O
an	O
array	O
of	O
bytes	O
.	O
Using	O
the	O
streams	O
this	O
way	O
,	O
therefore	O
,	O
is	O
technically	O
possible	O
,	O
but	O
to	O
me	O
it	O
is	O
still	O
very	O
strange	O
.	O
.	O
.	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
35834484	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
You	O
can	O
also	O
use	O
public	O
static	O
Integer	B-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
throws	O
NumberFormatException	B-api_mention
.	O
It	O
also	O
works	O
for	O
base	O
8	O
and	O
16	O
:	O
#	O
pre	O
If	O
you	O
want	O
to	O
get	O
int	O
instead	O
of	O
Integer	B-api_mention
you	O
can	O
use	O
:	O
#	O
li	O
Unboxing	O
:	O
int	O
val	O
=	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
intValue	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
Integer	B-api_mention
.	I-api_mention
decode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
26549659	O
Google	O
Guava	B-api_mention
has	O
a	O
predicate	O
that	O
always	O
returns	O
true	O
.	O
Does	O
Java	O
8	O
have	O
something	O
similar	O
for	O
its	O
Predicate	B-api_mention
?	O
I	O
know	O
I	O
could	O
use	O
(	O
foo	O
)	O
-	O
>	O
{	O
return	O
true	O
;	O
}	O
,	O
but	O
I	O
want	O
something	O
pre	O
-	O
made	O
,	O
analogous	O
to	O
Collections	B-api_mention
.	I-api_mention
emptySet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
19235606	O
,	O
answer	O
-	O
19235863	O
You	O
should	O
almost	O
certainly	O
never	O
have	O
to	O
deal	O
with	O
Spliterator	B-api_mention
as	O
a	O
user	O
;	O
it	O
should	O
only	O
be	O
necessary	O
if	O
you	O
'	O
re	O
writing	O
Collection	B-api_mention
types	O
yourself	O
and	O
also	O
intending	O
to	O
optimize	O
parallelized	O
operations	O
on	O
them	O
.	O
For	O
what	O
it	O
'	O
s	O
worth	O
,	O
a	O
Spliterator	B-api_mention
is	O
a	O
way	O
of	O
operating	O
over	O
the	O
elements	O
of	O
a	O
collection	O
in	O
a	O
way	O
that	O
it	O
'	O
s	O
easy	O
to	O
split	O
off	O
part	O
of	O
the	O
collection	O
,	O
e	O
.	O
g	O
.	O
because	O
you	O
'	O
re	O
parallelizing	O
and	O
want	O
one	O
thread	O
to	O
work	O
on	O
one	O
part	O
of	O
the	O
collection	O
,	O
one	O
thread	O
to	O
work	O
on	O
another	O
part	O
,	O
etc	O
.	O
You	O
should	O
essentially	O
never	O
be	O
saving	O
values	O
of	O
type	O
Stream	B-api_mention
to	O
a	O
variable	O
,	O
either	O
.	O
Stream	B-api_mention
is	O
sort	O
of	O
like	O
an	O
Iterator	B-api_mention
,	O
in	O
that	O
it	O
'	O
s	O
a	O
one	O
-	O
time	O
-	O
use	O
object	O
that	O
you	O
'	O
ll	O
almost	O
always	O
use	O
in	O
a	O
fluent	O
chain	O
,	O
as	O
in	O
the	O
Javadoc	O
example	O
:	O
int	O
sum	O
=	O
widgets	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
mapToInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sum	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Collector	B-api_mention
is	O
the	O
most	O
generalized	O
,	O
abstract	O
possible	O
version	O
of	O
a	O
"	O
reduce	O
"	O
operation	O
a	O
la	O
map	O
/	O
reduce	O
;	O
in	O
particular	O
,	O
it	O
needs	O
to	O
support	O
parallelization	O
and	O
finalization	O
steps	O
.	O
Examples	O
of	O
Collector	B-api_mention
s	O
include	O
:	O
#	O
li	O
summing	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
reducing	I-api_mention
(	O
args	O
)	O
#	O
li	O
StringBuilder	B-api_mention
appending	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
13291076	O
,	O
answer	O
-	O
13291166	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
"	O
built	O
-	O
in	O
"	O
method	O
of	O
enum	O
.	O
It	O
is	O
final	O
and	O
you	O
cannot	O
change	O
its	O
implementation	O
.	O
It	O
returns	O
the	O
name	O
of	O
enum	O
constant	O
as	O
it	O
is	O
written	O
,	O
e	O
.	O
g	O
.	O
in	O
upper	O
case	O
,	O
without	O
spaces	O
etc	O
.	O
Compare	O
MOBILE	O
_	O
PHONE	O
_	O
NUMBER	O
and	O
Mobile	O
phone	O
number	O
.	O
Which	O
version	O
is	O
more	O
readable	O
?	O
I	O
believe	O
the	O
second	O
one	O
.	O
This	O
is	O
the	O
difference	O
:	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
always	O
returns	O
MOBILE	O
_	O
PHONE	O
_	O
NUMBER	O
,	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
be	O
overriden	O
to	O
return	O
Mobile	O
phone	O
number	O
.	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
14534791	O
Escape	O
should	O
be	O
done	O
with	O
\	O
,	O
not	O
/	O
.	O
So	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
work	O
(	O
StringBuilder	B-api_mention
has	O
overloaded	O
methods	O
for	O
char	O
and	O
String	B-api_mention
type	O
)	O
.	O
Question	O
-	O
30217236	O
,	O
answer	O
-	O
30217518	O
Presumably	O
,	O
you	O
are	O
not	O
calling	O
your	O
generic	O
method	O
in	O
a	O
generic	O
fashion	O
,	O
so	O
it	O
'	O
s	O
treated	O
like	O
a	O
call	O
to	O
x	O
(	O
args	O
)	O
.	O
In	O
this	O
example	O
:	O
#	O
pre	O
The	O
first	O
call	O
to	O
x	O
is	O
not	O
made	O
generically	O
so	O
it	O
compiles	O
.	O
The	O
second	O
call	O
equates	O
T	O
to	O
String	B-api_mention
,	O
so	O
it	O
fails	O
because	O
1	O
and	O
2	O
are	O
not	O
Strings	O
.	O
The	O
third	O
call	O
compiles	O
because	O
it	O
properly	O
passes	O
in	O
Strings	O
.	O
Question	O
-	O
6840803	O
,	O
answer	O
-	O
6840856	O
SimpleDateFormat	B-api_mention
stores	O
intermediate	O
results	O
in	O
instance	O
fields	O
.	O
So	O
if	O
one	O
instance	O
is	O
used	O
by	O
two	O
threads	O
they	O
can	O
mess	O
each	O
other	O
'	O
s	O
results	O
.	O
Looking	O
at	O
the	O
source	O
code	O
reveals	O
that	O
there	O
is	O
a	O
Calendar	B-api_mention
instance	O
field	O
,	O
which	O
is	O
used	O
by	O
operations	O
on	O
DateFormat	B-api_mention
/	O
SimpleDateFormat	B-api_mention
For	O
example	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
calendar	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
initially	O
and	O
then	O
calendar	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
another	O
thread	O
invokes	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
the	O
completion	O
of	O
the	O
first	O
invocation	O
,	O
it	O
will	O
clear	O
the	O
calendar	O
,	O
but	O
the	O
other	O
invocation	O
will	O
expect	O
it	O
to	O
be	O
populated	O
with	O
intermediate	O
results	O
of	O
the	O
calculation	O
.	O
One	O
way	O
to	O
reuse	O
date	O
formats	O
without	O
trading	O
thread	O
-	O
safety	O
is	O
to	O
put	O
them	O
in	O
a	O
ThreadLocal	B-api_mention
-	O
some	O
libraries	O
do	O
that	O
.	O
That	O
'	O
s	O
if	O
you	O
need	O
to	O
use	O
the	O
same	O
format	O
multiple	O
times	O
within	O
one	O
thread	O
.	O
But	O
in	O
case	O
you	O
are	O
using	O
a	O
servlet	O
container	O
(	O
that	O
has	O
a	O
thread	O
pool	O
)	O
,	O
remember	O
to	O
clean	O
the	O
thread	O
-	O
local	O
after	O
you	O
finish	O
.	O
To	O
be	O
honest	O
,	O
I	O
don	O
'	O
t	O
understand	O
why	O
they	O
need	O
the	O
instance	O
field	O
,	O
but	O
that	O
'	O
s	O
the	O
way	O
it	O
is	O
.	O
You	O
can	O
also	O
use	O
joda	O
-	O
time	O
DateTimeFormat	B-api_mention
which	O
is	O
threadsafe	O
.	O
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056821	O
Documentation	O
:	O
For	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
It	O
will	O
simply	O
return	O
the	O
entire	O
string	O
that	O
'	O
s	O
why	O
it	O
returns	O
1	O
.	O
For	O
the	O
second	O
case	O
,	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
will	O
discard	O
the	O
,	O
so	O
the	O
result	O
will	O
be	O
empty	O
.	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
silently	O
discards	O
trailing	O
separators	O
see	O
guava	O
StringsExplained	B-api_mention
too	O
Question	O
-	O
22435833	O
In	O
Java	O
8	O
,	O
there	O
is	O
a	O
new	O
method	O
String	B-api_mention
.	I-api_mention
chars	I-api_mention
(	I-api_mention
)	I-api_mention
which	O
returns	O
a	O
stream	O
of	O
int	O
s	O
(	O
IntStream	B-api_mention
)	O
that	O
represent	O
the	O
character	O
codes	O
.	O
I	O
guess	O
many	O
people	O
would	O
expect	O
a	O
stream	O
of	O
char	O
s	O
here	O
instead	O
.	O
What	O
was	O
the	O
motivation	O
to	O
design	O
the	O
API	O
this	O
way	O
?	O
