Question	O
-	O
8430805	O
,	O
answer	O
-	O
22332291	O
Sudheesh	O
B	O
Nair	O
'	O
s	O
has	O
a	O
nice	O
(	O
and	O
accepted	O
)	O
answer	O
on	O
the	O
question	O
,	O
which	O
i	O
think	O
should	O
have	O
a	O
better	O
alternative	O
such	O
as	O
;	O
What	O
'	O
s	O
wrong	O
with	O
measuring	O
time	O
passed	O
and	O
checking	O
if	O
TIME	O
_	O
INTERVAL	O
miliseconds	O
(	O
say	O
2000	O
)	O
passed	O
since	O
the	O
last	O
back	O
press	O
.	O
The	O
following	O
sample	O
code	O
uses	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
to	O
store	O
the	O
time	O
onBackPressed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
;	O
#	O
pre	O
Back	O
on	O
accepted	O
answer	O
critique	O
;	O
Using	O
a	O
flag	O
to	O
indicate	O
if	O
it	O
was	O
pressed	O
in	O
last	O
TIME	O
_	O
INTERVAL	O
(	O
say	O
2000	O
)	O
milliseconds	O
and	O
set	O
-	O
reset	O
is	O
via	O
Handler	B-api_mention
'	O
s	O
postDelayed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
was	O
the	O
first	O
thing	O
to	O
come	O
in	O
my	O
mind	O
.	O
But	O
the	O
postDelayed	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
action	O
should	O
be	O
cancelled	O
when	O
activity	O
is	O
closing	O
,	O
removing	O
the	O
Runnable	B-api_mention
.	O
In	O
order	O
to	O
remove	O
the	O
Runnable	B-api_mention
,	O
it	O
must	O
not	O
be	O
declared	O
anonymous	O
,	O
and	O
be	O
declared	O
as	O
member	O
along	O
with	O
the	O
Handler	B-api_mention
aswell	O
.	O
Then	O
removeCallbacks	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
Handler	B-api_mention
can	O
be	O
called	O
appropriately	O
.	O
The	O
following	O
sample	O
is	O
the	O
demonstration	O
;	O
#	O
pre	O
Thanks	O
to	O
@	O
NSouth	O
for	O
contributing	O
;	O
In	O
order	O
to	O
prevent	O
toast	O
message	O
appearing	O
even	O
after	O
the	O
application	O
is	O
closed	O
,	O
Toast	O
can	O
be	O
declared	O
as	O
a	O
member	O
-	O
say	O
mExitToast	O
-	O
and	O
can	O
be	O
cancelled	O
via	O
mExitToast	O
.	B-api_mention
cancel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
just	O
before	O
super	O
.	B-api_mention
onBackPressed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
.	O
Question	O
-	O
19431234	O
Java	O
8	O
has	O
a	O
completely	O
new	O
API	O
for	O
date	O
and	O
time	O
.	O
One	O
of	O
the	O
most	O
useful	O
classes	O
in	O
this	O
API	O
is	O
LocalDateTime	B-api_mention
,	O
for	O
holding	O
a	O
timezone	O
-	O
independent	O
date	O
-	O
with	O
-	O
time	O
value	O
.	O
There	O
are	O
probably	O
millions	O
of	O
lines	O
of	O
code	O
using	O
the	O
legacy	O
class	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
for	O
this	O
purpose	O
.	O
As	O
such	O
,	O
when	O
interfacing	O
old	O
and	O
new	O
code	O
there	O
will	O
be	O
a	O
need	O
for	O
converting	O
between	O
the	O
two	O
.	O
As	O
there	O
seems	O
to	O
be	O
no	O
direct	O
methods	O
for	O
accomplishing	O
this	O
,	O
how	O
can	O
it	O
be	O
done	O
?	O
Question	O
-	O
27747562	O
In	O
the	O
following	O
code	O
,	O
a	O
dowcast	O
to	O
an	O
apparently	O
incompatible	O
type	O
passes	O
compilation	O
:	O
#	O
pre	O
Item	B-api_mention
and	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
are	O
disparate	O
types	O
so	O
the	O
cast	O
can	O
never	O
succeed	O
.	O
Why	O
did	O
the	O
compiler	O
allow	O
this	O
?	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
10786112	O
URLEncoder	B-api_mention
should	O
be	O
the	O
way	O
to	O
go	O
.	O
You	O
only	O
need	O
to	O
keep	O
in	O
mind	O
to	O
encode	O
only	O
the	O
individual	O
query	O
string	O
parameter	O
name	O
and	O
/	O
or	O
value	O
,	O
not	O
the	O
entire	O
URL	O
,	O
for	O
sure	O
not	O
the	O
query	O
string	O
parameter	O
separator	O
character	O
&	O
nor	O
the	O
parameter	O
name	O
-	O
value	O
separator	O
character	O
=	O
.	O
#	O
pre	O
Note	O
that	O
spaces	O
in	O
query	O
parameters	O
are	O
represented	O
by	O
+	O
,	O
not	O
%	O
20	O
,	O
which	O
is	O
legitimately	O
valid	O
.	O
The	O
%	O
20	O
is	O
usually	O
to	O
be	O
used	O
to	O
represent	O
spaces	O
in	O
URI	O
itself	O
(	O
the	O
part	O
before	O
the	O
URI	O
-	O
query	O
string	O
separator	O
character	O
?	O
)	O
,	O
not	O
in	O
query	O
string	O
(	O
the	O
part	O
after	O
?	O
)	O
.	O
Also	O
note	O
that	O
there	O
are	O
two	O
encode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
.	O
One	O
without	O
charset	O
argument	O
and	O
another	O
with	O
.	O
The	O
one	O
without	O
charset	O
argument	O
is	O
deprecated	O
.	O
Never	O
use	O
it	O
and	O
always	O
specify	O
the	O
charset	O
argument	O
.	O
The	O
javadoc	O
even	O
explicitly	O
recommends	O
to	O
use	O
the	O
UTF	O
-	O
8	O
encoding	O
,	O
as	O
mandated	O
by	O
RFC3986	O
and	O
W3C	O
.	O
#	O
blockquote	O
See	O
also	O
:	O
#	O
li	O
What	O
every	O
web	O
developer	O
must	O
know	O
about	O
URL	O
encoding	O
Question	O
-	O
5585779	O
,	O
answer	O
-	O
33233407	O
We	O
can	O
use	O
the	O
parseInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
the	O
Integer	B-api_mention
wrapper	O
class	O
for	O
converting	O
a	O
String	B-api_mention
value	O
to	O
an	O
integer	O
value	O
.	O
For	O
example	O
:	O
#	O
pre	O
The	O
Integer	B-api_mention
class	O
also	O
provides	O
the	O
valueOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
We	O
can	O
also	O
use	O
toInt	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
of	O
NumberUtils	B-api_mention
Utility	O
Class	O
for	O
the	O
conversion	O
:	O
#	O
pre	O
Question	O
-	O
18448671	O
,	O
answer	O
-	O
18448685	O
If	O
you	O
want	O
to	O
modify	O
your	O
List	B-api_mention
during	O
traversal	O
,	O
then	O
you	O
need	O
to	O
use	O
the	O
Iterator	B-api_mention
.	O
And	O
then	O
you	O
can	O
use	O
iterator	O
.	B-api_mention
remove	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
remove	O
the	O
elements	O
during	O
traversal	O
.	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27950675	O
Since	O
your	O
first	O
question	O
has	O
already	O
been	O
answered	O
,	O
I	O
'	O
ll	O
answer	O
your	O
second	O
question	O
.	O
The	O
String	B-api_mention
objects	O
must	O
be	O
compared	O
character	O
by	O
character	O
,	O
because	O
though	O
equal	O
Object	B-api_mention
s	O
implies	O
equal	O
hashes	O
,	O
the	O
inverse	O
is	O
not	O
necessarily	O
true	O
.	O
As	O
Holger	O
said	O
in	O
his	O
comment	O
,	O
this	O
represents	O
a	O
hash	O
collision	O
.	O
The	O
applicable	O
specifications	O
for	O
the	O
hashcode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
are	O
as	O
follows	O
:	O
#	O
blockquote	O
This	O
means	O
that	O
in	O
order	O
for	O
them	O
to	O
guarantee	O
equality	O
,	O
the	O
comparison	O
of	O
each	O
character	O
is	O
necessary	O
in	O
order	O
for	O
them	O
to	O
confirm	O
the	O
equality	O
of	O
the	O
two	O
objects	O
.	O
They	O
start	O
by	O
comparing	O
hashCode	O
s	O
rather	O
than	O
using	O
equals	O
since	O
they	O
are	O
using	O
a	O
hash	O
table	O
for	O
the	O
references	O
,	O
and	O
this	O
improves	O
performance	O
.	O
Question	O
-	O
24630963	O
,	O
answer	O
-	O
32648397	O
I	O
wrote	O
a	O
Collector	B-api_mention
which	O
,	O
unlike	O
the	O
default	O
java	O
one	O
,	O
does	O
not	O
crash	O
when	O
you	O
have	O
null	O
values	O
:	O
#	O
pre	O
Just	O
replace	O
your	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
to	O
a	O
call	O
to	O
this	O
function	O
and	O
it	O
'	O
ll	O
fix	O
the	O
problem	O
.	O
Question	O
-	O
27625611	O
,	O
answer	O
-	O
27625722	O
Because	O
nextDouble	B-api_mention
works	O
like	O
this	O
:	O
(	O
source	O
)	O
#	O
pre	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
makes	O
x	O
random	O
bits	O
.	O
Now	O
why	O
does	O
this	O
matter	O
?	O
Because	O
about	O
half	O
the	O
numbers	O
generated	O
by	O
the	O
first	O
part	O
(	O
before	O
the	O
division	O
)	O
are	O
less	O
than	O
1L	O
<	O
<	O
52	O
,	O
and	O
therefore	O
their	O
significand	O
doesn	O
'	O
t	O
entirely	O
fill	O
the	O
53	O
bits	O
that	O
it	O
could	O
fill	O
,	O
meaning	O
the	O
least	O
significant	O
bit	O
of	O
the	O
significand	O
is	O
always	O
zero	O
for	O
those	O
.	O
Because	O
of	O
the	O
amount	O
of	O
attention	O
this	O
is	O
receiving	O
,	O
here	O
'	O
s	O
some	O
extra	O
explanation	O
of	O
what	O
a	O
double	O
in	O
Java	O
(	O
and	O
many	O
other	O
languages	O
)	O
really	O
looks	O
like	O
and	O
why	O
it	O
mattered	O
in	O
this	O
question	O
.	O
Basically	O
,	O
a	O
double	O
looks	O
like	O
this	O
:	O
(	O
source	O
)	O
#	O
img	O
A	O
very	O
important	O
detail	O
not	O
visible	O
in	O
this	O
picture	O
is	O
that	O
numbers	O
are	O
"	O
normalized	O
"	O
1	O
such	O
that	O
the	O
53	O
bit	O
fraction	O
starts	O
with	O
a	O
1	O
(	O
by	O
choosing	O
the	O
exponent	O
such	O
that	O
it	O
is	O
so	O
)	O
,	O
that	O
1	O
is	O
then	O
omitted	O
.	O
That	O
is	O
why	O
the	O
picture	O
shows	O
52	O
bits	O
for	O
the	O
fraction	O
(	O
significand	O
)	O
but	O
there	O
are	O
effectively	O
53	O
bits	O
in	O
it	O
.	O
The	O
normalization	O
means	O
that	O
if	O
in	O
the	O
code	O
for	O
nextDouble	B-api_mention
the	O
53rd	O
bit	O
is	O
set	O
,	O
that	O
bit	O
is	O
the	O
implicit	O
leading	O
1	O
and	O
it	O
goes	O
away	O
,	O
and	O
the	O
other	O
52	O
bits	O
are	O
copied	O
literally	O
to	O
the	O
significand	O
of	O
the	O
resulting	O
double	O
.	O
If	O
that	O
bit	O
is	O
not	O
set	O
however	O
,	O
the	O
remaining	O
bits	O
must	O
be	O
shifted	O
left	O
until	O
it	O
becomes	O
set	O
.	O
On	O
average	O
,	O
half	O
the	O
generated	O
numbers	O
fall	O
into	O
the	O
case	O
where	O
the	O
significand	O
was	O
not	O
shifted	O
left	O
at	O
all	O
(	O
and	O
about	O
half	O
those	O
have	O
a	O
0	O
as	O
their	O
least	O
significant	O
bit	O
)	O
,	O
and	O
the	O
other	O
half	O
is	O
shifted	O
by	O
at	O
least	O
1	O
(	O
or	O
is	O
just	O
completely	O
zero	O
)	O
so	O
their	O
least	O
significant	O
bit	O
is	O
always	O
0	O
.	O
1	O
:	O
not	O
always	O
,	O
clearly	O
it	O
cannot	O
be	O
done	O
for	O
zero	O
,	O
which	O
has	O
no	O
highest	O
1	O
.	O
These	O
numbers	O
are	O
called	O
denormal	O
or	O
subnormal	O
numbers	O
,	O
see	O
wikipedia	O
:	O
denormal	O
number	O
.	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
5243798	O
#	O
li	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
http	O
request	O
parameters	O
.	O
Those	O
passed	O
from	O
the	O
client	O
to	O
the	O
server	O
.	O
For	O
example	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
servlet	O
?	O
parameter	O
=	O
1	O
.	O
Can	O
only	O
return	O
String	B-api_mention
#	O
li	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
for	O
server	O
-	O
side	O
usage	O
only	O
-	O
you	O
fill	O
the	O
request	O
with	O
attributes	O
that	O
you	O
can	O
use	O
within	O
the	O
same	O
request	O
.	O
For	O
example	O
-	O
you	O
set	O
an	O
attribute	O
in	O
a	O
servlet	O
,	O
and	O
read	O
it	O
from	O
a	O
JSP	O
.	O
Can	O
be	O
used	O
for	O
any	O
object	O
,	O
not	O
just	O
string	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
35264580	O
Main	O
difference	O
is	O
that	O
when	O
program	O
calls	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
a	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
is	O
executed	O
in	O
new	O
Thread	B-api_mention
while	O
if	O
you	O
call	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
directly	O
no	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	O
(	O
)	O
will	O
execute	O
on	O
current	O
Thread	O
.	O
Another	O
difference	O
between	O
start	O
vs	O
run	O
in	O
Java	O
thread	O
is	O
that	O
you	O
can	O
not	O
call	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
on	O
thread	O
object	O
.	O
once	O
started	O
,	O
second	O
call	O
of	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
throw	O
IllegalStateException	B-api_mention
in	O
Java	O
while	O
you	O
can	O
call	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
.	O
Question	O
-	O
31419029	O
I	O
'	O
ve	O
tried	O
to	O
build	O
my	O
own	O
Map	B-api_mention
to	O
increase	O
the	O
performance	O
for	O
a	O
special	O
environment	O
,	O
and	O
I	O
realized	O
something	O
pretty	O
interesting	O
:	O
Creating	O
a	O
new	O
Hashmap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
faster	O
than	O
new	O
Object	B-api_mention
[	I-api_mention
2000	I-api_mention
]	I-api_mention
-	O
no	O
matter	O
in	O
which	O
order	O
I	O
execute	O
these	O
commands	O
.	O
That	O
'	O
s	O
pretty	O
confusing	O
to	O
me	O
,	O
esp	O
.	O
because	O
the	O
Hashmap	B-api_mention
constructor	O
contains	O
a	O
table	O
=	O
new	O
Entry	O
[	O
capacity	O
]	O
,	O
according	O
to	O
this	O
.	O
Is	O
there	O
something	O
wrong	O
with	O
my	O
testbench	O
?	O
#	O
pre	O
I	O
'	O
d	O
love	O
to	O
see	O
the	O
results	O
of	O
testing	O
on	O
another	O
computer	O
.	O
I	O
'	O
ve	O
got	O
no	O
clue	O
why	O
creating	O
a	O
HashMap	B-api_mention
is	O
10	O
times	O
faster	O
than	O
creating	O
a	O
Object	B-api_mention
[	I-api_mention
]	I-api_mention
.	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17832168	O
I	O
think	O
the	O
number	O
displayed	O
is	O
the	O
number	O
of	O
time	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
call	O
throws	O
the	O
Stackoverflow	O
exception	O
.	O
It	O
probably	O
depend	O
on	O
the	O
implementation	O
of	O
the	O
println	B-api_mention
and	O
the	O
number	O
of	O
stacking	O
call	O
it	O
is	O
made	O
in	O
it	O
.	O
As	O
an	O
illustration	O
:	O
The	O
main	O
(	O
args	O
)	O
call	O
trigger	O
the	O
Stackoverflow	O
exception	O
at	O
call	O
i	O
.	O
The	O
i	O
-	O
1	O
call	O
of	O
main	O
catch	O
the	O
exception	O
and	O
call	O
println	B-api_mention
which	O
trigger	O
a	O
second	O
Stackoverflow	O
.	O
cnt	O
get	O
increment	O
to	O
1	O
.	O
The	O
i	O
-	O
2	O
call	O
of	O
main	O
catch	O
now	O
the	O
exception	O
and	O
call	O
println	B-api_mention
.	O
In	O
println	B-api_mention
a	O
method	O
is	O
called	O
triggering	O
a	O
3rd	O
exception	O
.	O
cnt	O
get	O
increment	O
to	O
2	O
.	O
this	O
continue	O
until	O
println	B-api_mention
can	O
make	O
all	O
its	O
needed	O
call	O
and	O
finally	O
display	O
the	O
value	O
of	O
cnt	O
.	O
This	O
is	O
then	O
dependent	O
of	O
the	O
actual	O
implementation	O
of	O
println	B-api_mention
.	O
For	O
the	O
JDK7	O
either	O
it	O
detect	O
cycling	O
call	O
and	O
throws	O
the	O
exception	O
earlier	O
either	O
it	O
keep	O
some	O
stack	O
resource	O
and	O
throw	O
the	O
exception	O
before	O
reaching	O
the	O
limit	O
to	O
give	O
some	O
room	O
for	O
remediation	O
logic	O
either	O
the	O
println	O
implementation	O
doesn	O
'	O
t	O
make	O
calls	O
either	O
the	O
+	O
+	O
operation	O
is	O
done	O
after	O
the	O
println	B-api_mention
call	O
thus	O
is	O
by	O
pass	O
by	O
the	O
exception	O
.	O
Question	O
-	O
27430092	O
,	O
answer	O
-	O
27430172	O
A	O
possible	O
use	O
case	O
is	O
in	O
testing	O
primality	O
of	O
a	O
given	O
number	O
(	O
at	O
test	O
which	O
in	O
itself	O
has	O
many	O
uses	O
)	O
.	O
The	O
isProbablePrime	B-api_mention
algorithm	O
will	O
run	O
much	O
faster	O
than	O
an	O
exact	O
algorithm	O
,	O
so	O
if	O
the	O
number	O
fails	O
isProbablePrime	B-api_mention
,	O
then	O
one	O
need	O
not	O
go	O
to	O
the	O
expense	O
of	O
running	O
the	O
more	O
expensive	O
algorithm	O
.	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888452	O
Alternative	O
to	O
@	O
sol4me	O
'	O
s	O
solution	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Of	O
the	O
difference	O
between	O
this	O
and	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
it	O
does	O
make	O
a	O
difference	O
if	O
your	O
array	O
is	O
of	O
a	O
primitive	O
type	O
.	O
For	O
instance	O
,	O
if	O
you	O
do	O
:	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
where	O
someArray	O
is	O
a	O
long	O
[	O
]	O
,	O
it	O
will	O
return	O
a	O
LongStream	B-api_mention
.	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
on	O
the	O
other	O
hand	O
,	O
will	O
return	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
with	O
a	O
single	O
element	O
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28323553	O
One	O
of	O
the	O
main	O
benefits	O
of	O
using	O
streams	O
is	O
that	O
it	O
gives	O
the	O
ability	O
to	O
process	O
data	O
in	O
a	O
declarative	O
way	O
,	O
that	O
is	O
,	O
using	O
a	O
functional	O
style	O
of	O
programming	O
.	O
It	O
also	O
gives	O
multi	O
-	O
threading	O
capability	O
for	O
free	O
meaning	O
there	O
is	O
no	O
need	O
to	O
write	O
any	O
extra	O
multi	O
-	O
threaded	O
code	O
to	O
make	O
your	O
stream	O
concurrent	O
.	O
Assuming	O
the	O
reason	O
you	O
are	O
exploring	O
this	O
style	O
of	O
programming	O
is	O
that	O
you	O
want	O
to	O
exploit	O
these	O
benefits	O
then	O
your	O
first	O
code	O
sample	O
is	O
potentially	O
not	O
functional	O
since	O
the	O
foreach	O
method	O
is	O
classed	O
as	O
being	O
terminal	O
(	O
meaning	O
that	O
it	O
can	O
produce	O
side	O
-	O
effects	O
)	O
.	O
The	O
second	O
way	O
is	O
preferred	O
from	O
functional	O
programming	O
point	O
of	O
view	O
since	O
the	O
map	O
function	O
can	O
accept	O
stateless	O
lambda	O
functions	O
.	O
More	O
explicitly	O
,	O
the	O
lambda	O
passed	O
to	O
the	O
map	O
function	O
should	O
be	O
#	O
li	O
Non	O
-	O
interfering	O
,	O
meaning	O
that	O
the	O
function	O
should	O
not	O
alter	O
the	O
source	O
of	O
the	O
stream	O
if	O
it	O
is	O
non	O
-	O
concurrent	O
(	O
e	O
.	O
g	O
.	O
ArrayList	B-api_mention
)	O
.	O
#	O
li	O
Stateless	O
to	O
avoid	O
unexpected	O
results	O
when	O
doing	O
parallel	O
processing	O
(	O
caused	O
by	O
thread	O
scheduling	O
differences	O
)	O
.	O
Another	O
benefit	O
with	O
the	O
second	O
approach	O
is	O
if	O
the	O
stream	O
is	O
parallel	O
and	O
the	O
collector	O
is	O
concurrent	O
and	O
unordered	O
then	O
these	O
characteristics	O
can	O
provide	O
useful	O
hints	O
to	O
the	O
reduction	O
operation	O
to	O
do	O
the	O
collecting	O
concurrently	O
.	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
14534798	O
It	O
should	O
be	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
I	O
recommend	O
you	O
to	O
do	O
as	O
below	O
,	O
r	O
.	B-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
System	B-api_mention
.	I-api_mention
getProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
system	O
-	O
dependent	O
newline	O
in	O
java	O
.	O
Also	O
from	O
Java	O
7	O
there	O
'	O
s	O
a	O
method	O
that	O
returns	O
the	O
value	O
directly	O
:	O
System	B-api_mention
.	I-api_mention
lineSeparator	I-api_mention
(	I-api_mention
)	I-api_mention
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28319148	O
I	O
prefer	O
the	O
second	O
way	O
.	O
When	O
you	O
use	O
the	O
first	O
way	O
,	O
if	O
you	O
decide	O
to	O
use	O
a	O
parallel	O
stream	O
to	O
improve	O
performance	O
,	O
you	O
'	O
ll	O
have	O
no	O
control	O
over	O
the	O
order	O
in	O
which	O
the	O
elements	O
will	O
be	O
added	O
to	O
the	O
output	O
list	O
by	O
forEach	B-api_mention
.	O
When	O
you	O
use	O
toList	B-api_mention
,	O
the	O
Streams	O
API	O
will	O
preserve	O
the	O
order	O
even	O
if	O
you	O
use	O
a	O
parallel	O
stream	O
.	O
Question	O
-	O
15156857	O
I	O
have	O
a	O
method	O
with	O
a	O
void	O
return	O
type	O
.	O
It	O
can	O
also	O
throw	O
a	O
number	O
of	O
exceptions	O
so	O
I	O
'	O
d	O
like	O
to	O
test	O
those	O
exceptions	O
being	O
thrown	O
.	O
All	O
attempts	O
have	O
failed	O
with	O
the	O
same	O
reason	O
:	O
#	O
blockquote	O
Any	O
ideas	O
how	O
I	O
can	O
get	O
the	O
method	O
to	O
throw	O
a	O
specified	O
exception	O
?	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
14602062	O
,	O
answer	O
-	O
14602155	O
From	O
the	O
documentation	O
of	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
So	O
you	O
will	O
have	O
to	O
use	O
the	O
two	O
argument	O
version	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
,	I-api_mention
int	I-api_mention
limit	I-api_mention
)	I-api_mention
with	O
a	O
negative	O
value	O
:	O
String	B-api_mention
[	O
]	O
split	O
=	O
data	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Doc	O
:	O
#	O
blockquote	O
This	O
will	O
not	O
leave	O
out	O
any	O
empty	O
elements	O
,	O
including	O
the	O
trailing	O
ones	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
31838310	O
The	O
main	O
purpose	O
of	O
marker	B-api_mention
interfaces	O
is	O
to	O
create	O
special	O
types	O
where	O
types	O
themselves	O
have	O
no	O
behavior	O
of	O
their	O
own	O
.	O
#	O
pre	O
Here	O
save	O
method	O
makes	O
sure	O
that	O
only	O
the	O
objects	O
of	O
classes	O
that	O
implement	O
the	O
MarkerEntity	B-api_mention
interface	O
are	O
saved	O
,	O
for	O
other	O
types	O
InvalidEntityFoundException	B-api_mention
is	O
thrown	O
.	O
So	O
here	O
MarkerEntity	B-api_mention
marker	O
interface	O
is	O
defining	O
a	O
type	O
that	O
adds	O
special	O
behavior	O
to	O
the	O
classes	O
implementing	O
it	O
.	O
Though	O
annotations	O
can	O
also	O
used	O
now	O
to	O
mark	O
classes	O
for	O
some	O
special	O
treatments	O
but	O
marker	O
annotations	O
are	O
replacement	O
for	O
naming	O
pattern	O
not	O
for	O
Marker	B-api_mention
interfaces	O
.	O
But	O
marker	O
annotations	O
can	O
'	O
t	O
fully	O
replace	O
the	O
marker	O
interfaces	O
because	O
;	O
marker	O
interfaces	O
are	O
used	O
to	O
define	O
type	O
(	O
as	O
already	O
explained	O
above	O
)	O
where	O
as	O
marker	B-api_mention
annotations	O
do	O
not	O
.	O
Source	O
for	O
marker	O
interface	O
comment	O
Question	O
-	O
12468764	O
,	O
answer	O
-	O
24537575	O
I	O
'	O
ve	O
found	O
a	O
very	O
nice	O
and	O
concise	O
solution	O
,	O
especially	O
useful	O
when	O
you	O
cannot	O
modify	O
enum	O
classes	O
as	O
it	O
was	O
in	O
my	O
case	O
.	O
Then	O
you	O
should	O
provide	O
a	O
custom	O
ObjectMapper	B-api_mention
with	O
a	O
certain	O
feature	O
enabled	O
.	O
Those	O
features	O
are	O
available	O
since	O
Jackson	O
1	O
.	O
6	O
.	O
So	O
you	O
only	O
need	O
to	O
write	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
your	O
enum	O
.	O
#	O
pre	O
There	O
are	O
more	O
enum	O
-	O
related	O
features	O
available	O
,	O
see	O
here	O
:	O
#	O
a	O
#	O
a	O
Question	O
-	O
30384955	O
,	O
answer	O
-	O
30385343	O
This	O
happens	O
because	O
of	O
the	O
way	O
capture	O
conversion	O
works	O
:	O
#	O
blockquote	O
Note	O
the	O
end	O
bit	O
.	O
So	O
,	O
what	O
this	O
means	O
is	O
that	O
,	O
given	O
a	O
type	O
like	O
this	O
:	O
#	O
pre	O
Only	O
"	O
outside	O
"	O
wildcards	O
are	O
captured	O
.	O
The	O
Map	O
key	O
wildcard	O
is	O
captured	O
,	O
but	O
the	O
List	O
element	O
wildcard	O
is	O
not	O
.	O
This	O
is	O
why	O
,	O
for	O
example	O
,	O
we	O
can	O
add	O
to	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
but	O
not	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
The	O
placement	O
of	O
the	O
wildcard	O
is	O
what	O
matters	O
.	O
Carrying	O
this	O
over	O
to	O
TbinList	O
,	O
if	O
we	O
have	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
the	O
wildcard	O
is	O
in	O
a	O
place	O
where	O
it	O
does	O
not	O
get	O
captured	O
,	O
but	O
if	O
we	O
have	O
a	O
TbinList	O
<	O
T	O
>	O
,	O
the	O
wildcard	O
is	O
in	O
a	O
place	O
where	O
it	O
gets	O
captured	O
.	O
As	O
I	O
alluded	O
to	O
in	O
the	O
comments	O
,	O
one	O
very	O
interesting	O
test	O
is	O
this	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
test3	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
We	O
get	O
this	O
error	O
:	O
#	O
pre	O
So	O
there	O
'	O
s	O
no	O
way	O
to	O
make	O
it	O
work	O
as	O
-	O
is	O
.	O
One	O
of	O
the	O
class	O
declarations	O
needs	O
to	O
be	O
changed	O
.	O
Additionally	O
,	O
think	O
about	O
it	O
this	O
way	O
.	O
Suppose	O
we	O
had	O
:	O
#	O
pre	O
And	O
since	O
a	O
wildcard	O
allows	O
subtyping	O
,	O
we	O
can	O
do	O
this	O
:	O
TbinList	O
<	O
T	O
>	O
test4	O
=	O
new	O
TbinList	O
<	O
T	O
>	O
(	O
args	O
)	O
;	O
Should	O
we	O
be	O
able	O
to	O
add	O
a	O
Tbin	O
<	O
T	O
>	O
to	O
test4	O
?	O
No	O
,	O
this	O
would	O
be	O
heap	O
pollution	O
.	O
We	O
might	O
end	O
up	O
with	O
Derived2	O
s	O
floating	O
around	O
in	O
a	O
TbinList	O
<	O
T	O
>	O
.	O
Question	O
-	O
31270759	O
,	O
answer	O
-	O
31273726	O
What	O
if	O
every	O
functional	O
interface	O
provided	O
by	O
java	O
.	O
util	O
.	O
function	O
was	O
allowed	O
to	O
throw	O
an	O
exception	O
?	O
#	O
pre	O
We	O
could	O
use	O
some	O
default	O
methods	O
to	O
provide	O
the	O
behavior	O
you	O
want	O
.	O
#	O
li	O
You	O
could	O
fallback	O
to	O
some	O
default	O
value	O
or	O
action	O
#	O
li	O
Or	O
you	O
could	O
try	O
to	O
perform	O
another	O
action	O
which	O
may	O
throw	O
an	O
exception	O
I	O
'	O
ve	O
written	O
a	O
library	O
which	O
redefines	O
most	O
of	O
the	O
interfaces	O
in	O
java	O
.	O
util	O
.	O
function	O
this	O
way	O
.	O
I	O
even	O
provide	O
a	O
ThrowingStream	O
which	O
let	O
'	O
s	O
you	O
use	O
these	O
new	O
interfaces	O
with	O
the	O
same	O
API	O
as	O
a	O
regular	O
Stream	B-api_mention
.	O
#	O
pre	O
(	O
Nothing	O
is	O
a	O
RuntimeException	B-api_mention
that	O
can	O
never	O
be	O
thrown	O
.	O
)	O
Your	O
original	O
example	O
would	O
become	O
#	O
pre	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908302	O
With	O
strings	O
you	O
'	O
re	O
going	O
to	O
want	O
to	O
use	O
the	O
equals	O
method	O
of	O
Strings	O
.	O
That	O
aside	O
,	O
you	O
already	O
have	O
the	O
enum	O
that	O
you	O
could	O
compare	O
with	O
the	O
equality	O
operator	O
.	O
Under	O
what	O
scenario	O
would	O
this	O
arise	O
?	O
That	O
being	O
said	O
,	O
yes	O
,	O
the	O
.	O
equals	O
method	O
will	O
return	O
true	O
if	O
they	O
are	O
the	O
same	O
.	O
I	O
'	O
m	O
not	O
sure	O
about	O
equality	O
operator	O
,	O
and	O
without	O
looking	O
it	O
up	O
,	O
I	O
can	O
tell	O
you	O
that	O
it	O
'	O
s	O
poor	O
programming	O
to	O
use	O
it	O
if	O
it	O
is	O
.	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781376	O
Like	O
the	O
others	O
have	O
mentioned	O
,	O
this	O
is	O
only	O
fulfilled	O
by	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
As	O
for	O
proof	O
,	O
let	O
me	O
offer	O
an	O
easier	O
to	O
understand	O
explanation	O
other	O
than	O
in	O
binary	O
(	O
although	O
it	O
is	O
still	O
rooted	O
in	O
that	O
)	O
.	O
Note	O
that	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
equal	O
to	O
-	O
2	O
^	O
31	O
or	O
-	O
2147483648	O
and	O
Integer	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
equal	O
to	O
2	O
^	O
31	O
-	O
1	O
or	O
2147483647	O
.	O
-	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
2	O
^	O
31	O
,	O
which	O
is	O
now	O
too	O
large	O
for	O
an	O
Integer	B-api_mention
(	O
since	O
it	O
is	O
past	O
MAX	B-api_mention
_	I-api_mention
VALUE	I-api_mention
)	O
thus	O
causing	O
an	O
Integer	B-api_mention
overflow	O
,	O
making	O
it	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
again	O
.	O
It	O
'	O
s	O
the	O
only	O
Integer	O
that	O
does	O
this	O
since	O
MIN	B-api_mention
_	I-api_mention
VALUE	I-api_mention
is	O
the	O
only	O
number	O
with	O
no	O
negative	O
equivalent	O
aside	O
from	O
0	O
.	O
Question	O
-	O
17781150	O
,	O
answer	O
-	O
17781168	O
The	O
value	O
you	O
are	O
looking	O
for	O
is	O
Integer	B-api_mention
.	I-api_mention
MIN	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
#	O
blockquote	O
That	O
'	O
s	O
off	O
-	O
topic	O
for	O
Stack	O
Exchange	O
.	O
But	O
you	O
could	O
do	O
it	O
starting	O
from	O
the	O
definition	O
of	O
Java	O
integers	O
(	O
JLS	O
4	O
.	O
2	O
)	O
#	O
blockquote	O
and	O
#	O
blockquote	O
and	O
the	O
definition	O
of	O
the	O
Java	O
unary	O
'	O
-	O
'	O
operator	O
(	O
JLS	O
15	O
.	O
15	O
.	O
4	O
)	O
:	O
#	O
blockquote	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
30749407	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
doesn	O
'	O
t	O
uses	O
regex	O
pattern	O
whereas	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
uses	O
regex	O
pattern	O
.	O
So	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
performs	O
faster	O
than	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28460301	O
Stream	B-api_mention
s	O
are	O
built	O
around	O
Spliterator	O
s	O
which	O
are	O
stateful	O
,	O
mutable	O
objects	O
.	O
They	O
don	O
’	O
t	O
have	O
a	O
“	O
reset	O
”	O
action	O
and	O
in	O
fact	O
,	O
requiring	O
to	O
support	O
such	O
rewind	O
action	O
would	O
“	O
take	O
away	O
much	O
power	O
”	O
.	O
How	O
would	O
Random	B-api_mention
.	I-api_mention
ints	I-api_mention
(	I-api_mention
)	I-api_mention
be	O
supposed	O
to	O
handle	O
such	O
a	O
request	O
?	O
On	O
the	O
other	O
hand	O
,	O
for	O
Stream	B-api_mention
s	O
which	O
have	O
a	O
retraceable	O
origin	O
,	O
it	O
is	O
easy	O
to	O
construct	O
an	O
equivalent	O
Stream	B-api_mention
to	O
be	O
used	O
again	O
.	O
Just	O
put	O
the	O
steps	O
made	O
to	O
construct	O
the	O
Stream	B-api_mention
into	O
a	O
reusable	O
method	O
.	O
Keep	O
in	O
mind	O
that	O
repeating	O
these	O
steps	O
is	O
not	O
an	O
expensive	O
operation	O
as	O
all	O
these	O
steps	O
are	O
lazy	O
operations	O
;	O
the	O
actual	O
work	O
starts	O
with	O
the	O
terminal	O
operation	O
and	O
depending	O
on	O
the	O
actual	O
terminal	O
operation	O
entirely	O
different	O
code	O
might	O
get	O
executed	O
.	O
It	O
would	O
be	O
up	O
to	O
you	O
,	O
the	O
writer	O
of	O
such	O
a	O
method	O
,	O
to	O
specify	O
what	O
calling	O
the	O
method	O
twice	O
implies	O
:	O
does	O
it	O
reproduce	O
exactly	O
the	O
same	O
sequence	O
,	O
as	O
streams	O
created	O
for	O
an	O
unmodified	O
array	O
or	O
collection	O
do	O
,	O
or	O
does	O
it	O
produce	O
a	O
stream	O
with	O
a	O
similar	O
semantics	O
but	O
different	O
elements	O
like	O
a	O
stream	O
of	O
random	O
ints	O
or	O
a	O
stream	O
of	O
console	O
input	O
lines	O
,	O
etc	O
.	O
By	O
the	O
way	O
,	O
to	O
avoid	O
confusion	O
,	O
a	O
terminal	O
operation	O
consumes	O
the	O
Stream	B-api_mention
which	O
is	O
distinct	O
from	O
closing	O
the	O
Stream	B-api_mention
as	O
calling	O
close	O
(	O
args	O
)	O
on	O
the	O
stream	O
does	O
(	O
which	O
is	O
required	O
for	O
streams	O
having	O
associated	O
resources	O
like	O
,	O
e	O
.	O
g	O
.	O
produced	O
by	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
It	O
seems	O
that	O
a	O
lot	O
of	O
confusion	O
stems	O
from	O
misguiding	O
comparison	O
of	O
IEnumerable	O
with	O
Stream	B-api_mention
.	O
An	O
IEnumerable	O
represents	O
the	O
ability	O
to	O
provide	O
an	O
actual	O
IEnumerator	O
,	O
so	O
its	O
like	O
an	O
Iterable	B-api_mention
in	O
Java	O
.	O
In	O
contrast	O
,	O
a	O
Stream	B-api_mention
is	O
a	O
kind	O
of	O
iterator	O
and	O
comparable	O
to	O
an	O
IEnumerator	O
so	O
it	O
’	O
s	O
wrong	O
to	O
claim	O
that	O
this	O
kind	O
of	O
data	O
type	O
can	O
be	O
used	O
multiple	O
times	O
in	O
.	O
NET	O
,	O
the	O
support	O
for	O
IEnumerator	O
.	O
Reset	O
is	O
optional	O
.	O
The	O
examples	O
discussed	O
here	O
rather	O
use	O
the	O
fact	O
that	O
an	O
IEnumerable	O
can	O
be	O
used	O
to	O
fetch	O
new	O
IEnumerator	O
s	O
and	O
that	O
works	O
with	O
Java	O
’	O
s	O
Collection	B-api_mention
s	O
as	O
well	O
;	O
you	O
can	O
get	O
a	O
new	O
Stream	B-api_mention
.	O
If	O
the	O
Java	O
developers	O
decided	O
to	O
add	O
the	O
Stream	B-api_mention
operations	O
to	O
Iterable	B-api_mention
directly	O
,	O
with	O
intermediate	O
operations	O
returning	O
another	O
Iterable	B-api_mention
,	O
it	O
was	O
really	O
comparable	O
and	O
it	O
could	O
work	O
the	O
same	O
way	O
.	O
However	O
,	O
the	O
developers	O
decided	O
against	O
it	O
and	O
the	O
decision	O
is	O
discussed	O
in	O
this	O
question	O
.	O
The	O
biggest	O
point	O
is	O
the	O
confusion	O
about	O
eager	O
Collection	B-api_mention
operations	O
and	O
lazy	O
Stream	B-api_mention
operations	O
.	O
By	O
looking	O
at	O
the	O
.	O
NET	O
API	O
,	O
I	O
(	O
yes	O
,	O
personally	O
)	O
find	O
it	O
justified	O
.	O
While	O
it	O
looks	O
reasonable	O
looking	O
at	O
IEnumerable	O
alone	O
,	O
a	O
particular	O
Collection	B-api_mention
will	O
have	O
lots	O
of	O
methods	O
manipulating	O
the	O
Collection	B-api_mention
directly	O
and	O
lots	O
of	O
methods	O
returning	O
a	O
lazy	O
IEnumerable	O
,	O
while	O
the	O
particular	O
nature	O
of	O
a	O
method	O
isn	O
’	O
t	O
always	O
intuitively	O
recognizable	O
.	O
The	O
worst	O
example	O
I	O
found	O
(	O
within	O
the	O
few	O
minutes	O
I	O
looked	O
at	O
it	O
)	O
is	O
List	B-api_mention
.	I-api_mention
Reverse	I-api_mention
(	I-api_mention
)	I-api_mention
whose	O
name	O
matches	O
exactly	O
the	O
name	O
of	O
the	O
inherited	O
(	O
is	O
this	O
the	O
right	O
terminus	O
for	O
extension	O
methods	O
?	O
)	O
Enumerable	O
.	O
Reverse	O
(	O
)	O
while	O
having	O
an	O
entirely	O
contradicting	O
behavior	O
.	O
Of	O
course	O
,	O
these	O
are	O
two	O
distinct	O
decisions	O
.	O
The	O
first	O
one	O
to	O
make	O
Stream	B-api_mention
a	O
type	O
distinct	O
from	O
Iterable	B-api_mention
/	O
Collection	B-api_mention
and	O
the	O
second	O
to	O
make	O
Stream	B-api_mention
a	O
kind	O
of	O
one	O
time	O
iterator	O
rather	O
than	O
another	O
kind	O
of	O
iterable	O
.	O
But	O
these	O
decision	O
were	O
made	O
together	O
and	O
it	O
might	O
be	O
the	O
case	O
that	O
separating	O
these	O
two	O
decision	O
never	O
was	O
considered	O
.	O
It	O
wasn	O
’	O
t	O
created	O
with	O
being	O
comparable	O
to	O
.	O
NET	O
’	O
s	O
in	O
mind	O
.	O
The	O
actual	O
API	O
design	O
decision	O
was	O
to	O
add	O
an	O
improved	O
type	O
of	O
iterator	O
,	O
the	O
Spliterator	B-api_mention
.	O
Spliterator	B-api_mention
s	O
can	O
be	O
provided	O
by	O
the	O
old	O
Iterable	B-api_mention
s	O
(	O
which	O
is	O
the	O
way	O
how	O
these	O
were	O
retrofitted	O
)	O
or	O
entirely	O
new	O
implementations	O
.	O
Then	O
,	O
Stream	B-api_mention
was	O
added	O
as	O
a	O
high	O
-	O
level	O
front	O
-	O
end	O
to	O
the	O
rather	O
low	O
level	O
Spliterator	B-api_mention
s	O
.	O
That	O
’	O
s	O
it	O
.	O
You	O
may	O
discuss	O
about	O
whether	O
a	O
different	O
design	O
would	O
be	O
better	O
,	O
but	O
that	O
’	O
s	O
not	O
productive	O
,	O
it	O
won	O
’	O
t	O
change	O
,	O
given	O
the	O
way	O
they	O
are	O
designed	O
now	O
.	O
There	O
is	O
another	O
implementation	O
aspect	O
you	O
have	O
to	O
consider	O
.	O
Stream	B-api_mention
s	O
are	O
not	O
immutable	O
data	O
structures	O
.	O
Each	O
intermediate	O
operation	O
may	O
return	O
a	O
new	O
Stream	B-api_mention
instance	O
encapsulating	O
the	O
old	O
one	O
but	O
it	O
may	O
also	O
manipulate	O
its	O
own	O
instance	O
instead	O
and	O
return	O
itself	O
(	O
that	O
doesn	O
’	O
t	O
preclude	O
doing	O
even	O
both	O
for	O
the	O
same	O
operation	O
)	O
.	O
Commonly	O
known	O
examples	O
are	O
operations	O
like	O
parallel	O
or	O
unordered	O
which	O
do	O
not	O
add	O
another	O
step	O
but	O
manipulate	O
the	O
entire	O
pipeline	O
)	O
.	O
Having	O
such	O
a	O
mutable	O
data	O
structure	O
and	O
attempts	O
to	O
reuse	O
(	O
or	O
even	O
worse	O
,	O
using	O
it	O
multiple	O
times	O
at	O
the	O
same	O
time	O
)	O
doesn	O
’	O
t	O
play	O
well	O
…	O
For	O
completeness	O
,	O
here	O
is	O
your	O
quicksort	O
example	O
translated	O
to	O
the	O
Java	O
Stream	B-api_mention
API	O
.	O
It	O
shows	O
that	O
it	O
does	O
not	O
really	O
“	O
take	O
away	O
much	O
power	O
”	O
.	O
#	O
pre	O
It	O
can	O
be	O
used	O
like	O
#	O
pre	O
You	O
can	O
write	O
it	O
even	O
more	O
compact	O
as	O
#	O
pre	O
Question	O
-	O
10066590	O
With	O
Mockito	O
,	O
I	O
want	O
to	O
verify	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
a	O
method	O
call	O
with	O
byte	O
[	O
]	O
in	O
its	O
argument	O
list	O
,	O
but	O
I	O
didn	O
'	O
t	O
find	O
how	O
to	O
write	O
this	O
.	O
myMethod	O
(	O
args	O
)	O
I	O
just	O
want	O
something	O
like	O
anyByteArray	O
(	O
args	O
)	O
,	O
how	O
to	O
do	O
that	O
with	O
Mockito	O
?	O
Question	O
-	O
31170459	O
,	O
answer	O
-	O
31170506	O
No	O
,	O
you	O
appear	O
to	O
have	O
a	O
legit	O
bug	O
.	O
The	O
bug	O
presents	O
in	O
JDK7	O
but	O
fixed	O
in	O
JDK8	O
.	O
Your	O
values	O
are	O
correctly	O
representable	O
as	O
BigDecimal	B-api_mention
s	O
,	O
and	O
should	O
behave	O
correctly	O
,	O
but	O
don	O
'	O
t	O
.	O
Tracing	O
through	O
the	O
source	O
code	O
of	O
BigDecimal	B-api_mention
,	O
on	O
line	O
2585	O
,	O
this	O
.	B-api_mention
precision	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
1	O
,	O
and	O
this	O
.	B-api_mention
scale	I-api_mention
is	O
-	O
2147483647	O
.	O
this	O
.	B-api_mention
precision	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
this	O
.	O
scale	O
therefore	O
overflows	O
,	O
and	O
the	O
following	O
overflow	O
is	O
not	O
handled	O
correctly	O
.	O
This	O
bug	O
has	O
been	O
fixed	O
in	O
JDK8	O
by	O
doing	O
the	O
subtraction	O
in	O
long	O
arithmetic	O
.	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
29652714	O
You	O
can	O
use	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
list	O
if	O
your	O
list	O
contains	O
Comparable	B-api_mention
elements	O
.	O
Otherwise	O
I	O
would	O
recommend	O
you	O
to	O
implement	O
that	O
interface	O
like	O
here	O
:	O
public	O
class	O
Circle	O
implements	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
{	O
}	O
and	O
of	O
course	O
provide	O
your	O
own	O
realization	O
of	O
compareTo	B-api_mention
method	O
like	O
here	O
:	O
#	O
pre	O
And	O
then	O
you	O
can	O
again	O
use	O
Colection	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
now	O
list	O
contains	O
objects	O
of	O
Comparable	B-api_mention
type	O
and	O
can	O
be	O
sorted	O
.	O
Order	O
depends	O
on	O
compareTo	B-api_mention
method	O
.	O
Check	O
this	O
#	O
a	O
for	O
more	O
detailed	O
information	O
.	O
Question	O
-	O
5673260	O
,	O
answer	O
-	O
5673356	O
#	O
pre	O
Generally	O
speaking	O
,	O
when	O
you	O
have	O
response	O
.	B-api_mention
getOutputStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
write	O
anything	O
there	O
.	O
You	O
can	O
pass	O
this	O
output	O
stream	O
as	O
a	O
place	O
to	O
put	O
generated	O
PDF	O
to	O
your	O
generator	O
.	O
Also	O
,	O
if	O
you	O
know	O
what	O
file	O
type	O
you	O
are	O
sending	O
,	O
you	O
can	O
set	O
response	O
.	B-api_mention
setContentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
8172439	O
You	O
can	O
use	O
Character	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
char	I-api_mention
)	I-api_mention
.	O
Note	O
that	O
this	O
method	O
simply	O
returns	O
a	O
call	O
to	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
char	I-api_mention
)	I-api_mention
,	O
which	O
also	O
works	O
.	O
As	O
others	O
have	O
noted	O
,	O
string	O
concatenation	O
works	O
as	O
a	O
shortcut	O
as	O
well	O
:	O
String	B-api_mention
s	O
=	O
StringLiteral	O
+	O
CharLiteral	O
;	O
But	O
this	O
compiles	O
down	O
to	O
:	O
String	B-api_mention
s	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
is	O
less	O
efficient	O
because	O
the	O
StringBuilder	B-api_mention
is	O
backed	O
by	O
a	O
char	O
[	O
]	O
(	O
over	O
-	O
allocated	O
by	O
StringBuilder	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
16	O
)	O
,	O
only	O
for	O
that	O
array	O
to	O
be	O
defensively	O
copied	O
by	O
the	O
resulting	O
String	B-api_mention
.	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
"	O
gets	O
in	O
the	O
back	O
door	O
"	O
by	O
wrapping	O
the	O
char	O
in	O
a	O
single	O
-	O
element	O
array	O
and	O
passing	O
it	O
to	O
the	O
package	O
private	O
constructor	O
String	B-api_mention
(	I-api_mention
char	I-api_mention
[	I-api_mention
]	I-api_mention
,	I-api_mention
boolean	I-api_mention
)	I-api_mention
,	O
which	O
avoids	O
the	O
array	O
copy	O
.	O
Question	O
-	O
10977992	O
#	O
pre	O
We	O
can	O
use	O
Iterator	B-api_mention
to	O
traverse	O
a	O
Set	B-api_mention
or	O
a	O
List	B-api_mention
or	O
a	O
Map	B-api_mention
.	O
But	O
ListIterator	B-api_mention
can	O
only	O
be	O
used	O
to	O
traverse	O
a	O
List	B-api_mention
,	O
it	O
can	O
'	O
t	O
traverse	O
a	O
Set	B-api_mention
.	O
Why	O
?	O
I	O
know	O
that	O
the	O
main	O
difference	O
is	O
that	O
with	O
iterator	B-api_mention
we	O
can	O
travel	O
in	O
only	O
one	O
direction	O
but	O
with	O
ListIterator	B-api_mention
we	O
can	O
travel	O
both	O
directions	O
.	O
Are	O
there	O
any	O
other	O
differences	O
?	O
And	O
any	O
advantages	O
of	O
ListIterator	B-api_mention
over	O
Iterator	B-api_mention
?	O
Question	O
-	O
29691513	O
,	O
answer	O
-	O
29727412	O
The	O
JLS	O
describes	O
a	O
few	O
special	O
behaviors	O
of	O
what	O
it	O
calls	O
constant	O
variables	O
,	O
which	O
are	O
final	O
variables	O
(	O
whether	O
static	O
or	O
not	O
)	O
which	O
are	O
initialized	O
with	O
constant	O
expressions	O
of	O
String	B-api_mention
or	O
primitive	O
type	O
.	O
Constant	O
variables	O
have	O
a	O
major	O
difference	O
with	O
respect	O
to	O
binary	O
compatibility	O
:	O
the	O
values	O
of	O
constant	O
variables	O
become	O
part	O
of	O
the	O
class	O
'	O
s	O
API	O
,	O
as	O
far	O
as	O
the	O
compiler	O
is	O
concerned	O
.	O
An	O
example	O
:	O
#	O
pre	O
Here	O
,	O
XFOO	O
is	O
a	O
"	O
constant	O
variable	O
"	O
and	O
YFOO	O
is	O
not	O
,	O
but	O
they	O
are	O
otherwise	O
equivalent	O
.	O
Class	O
Z	O
prints	O
out	O
each	O
of	O
them	O
.	O
Compile	O
those	O
classes	O
,	O
then	O
disassemble	O
them	O
with	O
javap	O
-	O
v	O
X	O
Y	O
Z	O
,	O
and	O
here	O
is	O
the	O
output	O
:	O
Class	O
X	O
:	O
#	O
pre	O
Class	O
Y	O
:	O
#	O
pre	O
Class	O
Z	O
:	O
#	O
pre	O
Things	O
to	O
notice	O
in	O
the	O
disassembly	O
,	O
which	O
tell	O
you	O
the	O
differences	O
between	O
X	O
and	O
Y	O
run	O
deeper	O
than	O
syntactic	O
sugar	O
:	O
#	O
li	O
XFOO	O
has	O
a	O
ConstantValue	O
attribute	O
,	O
signifying	O
that	O
its	O
value	O
is	O
a	O
compile	O
-	O
time	O
constant	O
.	O
Whereas	O
YFOO	O
does	O
not	O
,	O
and	O
uses	O
a	O
static	O
block	O
with	O
a	O
putstatic	O
instruction	O
to	O
initialize	O
the	O
value	O
at	O
runtime	O
.	O
#	O
li	O
The	O
String	B-api_mention
constant	O
StringLiteral	O
has	O
become	O
part	O
of	O
class	O
Z	O
'	O
s	O
constant	O
pool	O
,	O
but	O
StringLiteral	O
has	O
not	O
.	O
#	O
li	O
Z	O
.	O
main	O
uses	O
the	O
ldc	O
(	O
load	O
constant	O
)	O
instruction	O
to	O
load	O
StringLiteral	O
onto	O
the	O
stack	O
directly	O
from	O
its	O
own	O
constant	O
pool	O
,	O
but	O
it	O
uses	O
a	O
getstatic	O
instruction	O
to	O
load	O
the	O
value	O
of	O
Y	O
.	O
YFOO	O
.	O
Other	O
differences	O
you	O
will	O
find	O
:	O
#	O
li	O
If	O
you	O
change	O
the	O
value	O
of	O
XFOO	O
and	O
recompile	O
X	O
.	O
java	O
but	O
not	O
Z	O
.	O
java	O
,	O
you	O
have	O
a	O
problem	O
:	O
class	O
Z	O
is	O
still	O
using	O
the	O
old	O
value	O
.	O
If	O
you	O
change	O
the	O
value	O
of	O
YFOO	O
and	O
recompile	O
Y	O
.	O
java	O
,	O
class	O
Z	O
uses	O
the	O
new	O
value	O
whether	O
you	O
recompile	O
Z	O
.	O
java	O
or	O
not	O
.	O
#	O
li	O
If	O
you	O
delete	O
the	O
X	O
.	O
class	O
file	O
entirely	O
,	O
class	O
Z	O
still	O
runs	O
correctly	O
.	O
Z	O
has	O
no	O
runtime	O
dependency	O
on	O
X	O
.	O
Whereas	O
if	O
you	O
delete	O
the	O
Y	O
.	O
class	O
file	O
,	O
class	O
Z	O
fails	O
to	O
initialize	O
with	O
a	O
ClassNotFoundException	O
:	O
Y	O
.	O
#	O
li	O
If	O
you	O
generate	O
documentation	O
for	O
the	O
classes	O
with	O
javadoc	O
,	O
the	O
"	O
Constant	O
Field	O
Values	O
"	O
page	O
will	O
document	O
the	O
value	O
of	O
XFOO	O
,	O
but	O
not	O
the	O
value	O
of	O
YFOO	O
.	O
The	O
JLS	O
describes	O
the	O
above	O
effects	O
constant	O
variables	O
have	O
on	O
compiled	O
class	O
files	O
in	O
§	O
13	O
.	O
1	O
.	O
3	O
:	O
#	O
blockquote	O
And	O
in	O
§	O
13	O
.	O
4	O
.	O
9	O
:	O
#	O
blockquote	O
The	O
upshot	O
is	O
that	O
if	O
your	O
public	O
library	O
exposes	O
any	O
constant	O
variables	O
,	O
you	O
must	O
never	O
change	O
their	O
values	O
if	O
your	O
new	O
library	O
version	O
is	O
otherwise	O
supposed	O
to	O
be	O
compatible	O
with	O
code	O
compiled	O
against	O
old	O
versions	O
of	O
the	O
library	O
.	O
It	O
won	O
'	O
t	O
necessarily	O
cause	O
an	O
error	O
,	O
but	O
the	O
existing	O
code	O
will	O
probably	O
malfunction	O
since	O
it	O
will	O
have	O
outdated	O
ideas	O
about	O
the	O
values	O
of	O
constants	O
.	O
(	O
If	O
your	O
new	O
library	O
version	O
needs	O
for	O
classes	O
which	O
use	O
it	O
to	O
be	O
recompiled	O
anyway	O
,	O
then	O
changing	O
constants	O
doesn	O
'	O
t	O
cause	O
this	O
problem	O
.	O
)	O
Thus	O
,	O
initializing	O
a	O
constant	O
with	O
a	O
block	O
gives	O
you	O
more	O
freedom	O
to	O
change	O
its	O
value	O
,	O
because	O
it	O
prevents	O
the	O
compiler	O
embedding	O
the	O
value	O
into	O
other	O
classes	O
.	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846963	O
#	O
blockquote	O
For	O
the	O
same	O
reason	O
you	O
'	O
d	O
use	O
Collections	B-api_mention
.	I-api_mention
unmodifiableMap	I-api_mention
(	I-api_mention
)	I-api_mention
at	O
some	O
point	O
.	O
You	O
want	O
to	O
return	O
a	O
Map	B-api_mention
instance	O
that	O
throws	O
an	O
exception	O
if	O
the	O
user	O
attempts	O
to	O
modify	O
it	O
.	O
It	O
'	O
s	O
just	O
a	O
special	O
case	O
:	O
the	O
empty	O
Map	B-api_mention
.	O
Question	O
-	O
30581531	O
What	O
is	O
the	O
maximum	O
number	O
of	O
parameters	O
that	O
a	O
method	O
in	O
Java	O
can	O
have	O
and	O
why	O
?	O
I	O
am	O
using	O
Java	O
1	O
.	O
8	O
on	O
a	O
64	O
-	O
bit	O
Windows	O
system	O
.	O
All	O
the	O
answers	O
on	O
StackOverflow	O
about	O
this	O
say	O
that	O
the	O
technical	O
limit	O
is	O
255	O
parameters	O
without	O
specifying	O
why	O
.	O
To	O
be	O
precise	O
,	O
255	O
for	O
static	O
and	O
254	O
for	O
non	O
-	O
static	O
(	O
this	O
will	O
be	O
the	O
255th	O
in	O
this	O
case	O
)	O
methods	O
.	O
I	O
thought	O
this	O
could	O
be	O
specified	O
in	O
some	O
sort	O
of	O
specification	O
and	O
that	O
this	O
was	O
simply	O
a	O
statically	O
defined	O
maximum	O
number	O
of	O
parameters	O
allowed	O
.	O
But	O
this	O
was	O
only	O
valid	O
for	O
int	O
and	O
all	O
4	O
-	O
bytes	O
types	O
.	O
I	O
did	O
some	O
tests	O
with	O
long	O
parameters	O
,	O
and	O
I	O
was	O
only	O
able	O
to	O
declare	O
127	O
parameters	O
in	O
that	O
case	O
.	O
With	O
String	B-api_mention
parameters	O
,	O
the	O
allowed	O
number	O
i	O
deduced	O
from	O
testing	O
is	O
255	O
(	O
it	O
may	O
be	O
because	O
the	O
reference	O
size	O
is	O
4	O
bytes	O
in	O
Java	O
?	O
)	O
.	O
But	O
since	O
I	O
am	O
using	O
a	O
64	O
-	O
bit	O
system	O
,	O
references	O
size	O
should	O
be	O
8	O
bytes	O
wide	O
and	O
so	O
with	O
String	B-api_mention
parameters	O
the	O
maximum	O
allowed	O
number	O
should	O
be	O
127	O
,	O
similar	O
to	O
long	O
types	O
.	O
How	O
does	O
this	O
limit	O
is	O
exactly	O
applied	O
?	O
Does	O
the	O
limit	O
have	O
anything	O
to	O
do	O
with	O
the	O
stack	O
size	O
of	O
the	O
method	O
?	O
Note	O
:	O
I	O
am	O
not	O
really	O
going	O
to	O
use	O
these	O
many	O
parameters	O
in	O
any	O
method	O
,	O
but	O
this	O
question	O
is	O
only	O
to	O
clarify	O
the	O
exact	O
behavior	O
.	O
Question	O
-	O
21524642	O
,	O
answer	O
-	O
21524694	O
Or	O
.	O
.	O
Pattern	B-api_mention
#	I-api_mention
quote	I-api_mention
:	O
String	B-api_mention
[	O
]	O
value	O
_	O
split	O
=	O
rat	O
_	O
values	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
happening	O
because	O
String	B-api_mention
#	I-api_mention
split	I-api_mention
accepts	O
a	O
regex	O
:	O
|	O
has	O
a	O
special	O
meaning	O
in	O
regex	O
.	O
quote	B-api_mention
will	O
return	O
a	O
String	B-api_mention
representation	O
for	O
the	O
regex	O
.	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667307	O
mode1	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
It	O
doesn	O
'	O
t	O
get	O
better	O
than	O
that	O
,	O
I	O
'	O
m	O
afraid	O
Question	O
-	O
19416644	O
,	O
answer	O
-	O
19416665	O
One	O
simple	O
way	O
is	O
to	O
use	O
Float	B-api_mention
.	I-api_mention
NaN	I-api_mention
:	O
#	O
pre	O
#	O
pre	O
You	O
can	O
do	O
the	O
same	O
with	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
.	O
From	O
JLS	O
§	O
15	O
.	O
21	O
.	O
1	O
.	O
Numerical	O
Equality	O
Operators	O
=	O
=	O
and	O
!	O
=	O
:	O
#	O
blockquote	O
Question	O
-	O
26684562	O
,	O
answer	O
-	O
26684710	O
Both	O
map	B-api_mention
and	O
flatMap	B-api_mention
can	O
be	O
applied	O
to	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
and	O
they	O
both	O
return	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
The	O
difference	O
is	O
that	O
the	O
map	B-api_mention
operation	O
produces	O
one	O
output	O
value	O
for	O
each	O
input	O
value	O
,	O
whereas	O
the	O
flatMap	B-api_mention
operation	O
produces	O
an	O
arbitrary	O
number	O
(	O
zero	O
or	O
more	O
)	O
values	O
for	O
each	O
input	O
value	O
.	O
This	O
is	O
reflected	O
in	O
the	O
arguments	O
to	O
each	O
operation	O
.	O
The	O
map	O
operation	O
takes	O
a	O
Function	O
,	O
which	O
is	O
called	O
for	O
each	O
value	O
in	O
the	O
input	O
stream	O
and	O
produces	O
one	O
result	O
value	O
,	O
which	O
is	O
sent	O
to	O
the	O
output	O
stream	O
.	O
The	O
flatMap	B-api_mention
operation	O
takes	O
a	O
function	O
that	O
conceptually	O
wants	O
to	O
consume	O
one	O
value	O
and	O
produce	O
an	O
arbitrary	O
number	O
of	O
values	O
.	O
However	O
,	O
in	O
Java	O
,	O
it	O
'	O
s	O
cumbersome	O
for	O
a	O
method	O
to	O
return	O
an	O
arbitrary	O
number	O
of	O
values	O
,	O
since	O
methods	O
can	O
return	O
only	O
zero	O
or	O
one	O
value	O
.	O
One	O
could	O
imagine	O
an	O
API	O
where	O
the	O
mapper	O
function	O
for	O
flatMap	B-api_mention
takes	O
a	O
value	O
and	O
returns	O
an	O
array	O
or	O
a	O
List	O
of	O
values	O
,	O
which	O
are	O
then	O
sent	O
to	O
the	O
output	O
.	O
Given	O
that	O
this	O
is	O
the	O
streams	O
library	O
,	O
a	O
particularly	O
apt	O
way	O
to	O
represent	O
an	O
arbitrary	O
number	O
of	O
return	O
values	O
is	O
for	O
the	O
mapper	O
function	O
itself	O
to	O
return	O
a	O
stream	O
!	O
The	O
values	O
from	O
the	O
stream	O
returned	O
by	O
the	O
mapper	O
are	O
drained	O
from	O
the	O
stream	O
and	O
are	O
passed	O
to	O
the	O
output	O
stream	O
.	O
The	O
"	O
clumps	O
"	O
of	O
values	O
returned	O
by	O
each	O
call	O
to	O
the	O
mapper	O
function	O
are	O
not	O
distinguished	O
at	O
all	O
in	O
the	O
output	O
stream	O
,	O
thus	O
the	O
output	O
is	O
said	O
to	O
have	O
been	O
"	O
flattened	O
.	O
"	O
Typical	O
use	O
is	O
for	O
the	O
mapper	O
function	O
of	O
flatMap	B-api_mention
to	O
return	O
Stream	B-api_mention
.	I-api_mention
empty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
it	O
wants	O
to	O
send	O
zero	O
values	O
,	O
or	O
something	O
like	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
it	O
wants	O
to	O
return	O
several	O
values	O
.	O
But	O
of	O
course	O
any	O
stream	O
can	O
be	O
returned	O
.	O
Question	O
-	O
28671903	O
I	O
have	O
a	O
set	O
–	O
a	O
HashSet	B-api_mention
I	O
want	O
to	O
remove	O
some	O
items	O
from	O
it	O
…	O
none	O
of	O
the	O
items	O
in	O
the	O
"	O
removals	O
"	O
collection	O
will	O
be	O
in	O
the	O
original	O
set	O
.	O
I	O
specify	O
the	O
size	O
of	O
the	O
"	O
source	O
"	O
set	O
and	O
the	O
size	O
of	O
the	O
"	O
removals	O
"	O
collection	O
on	O
the	O
command	O
line	O
,	O
and	O
build	O
both	O
of	O
them	O
.	O
The	O
source	O
set	O
contains	O
only	O
non	O
-	O
negative	O
integers	O
;	O
the	O
removals	O
set	O
contains	O
only	O
negative	O
integers	O
.	O
I	O
measure	O
how	O
long	O
it	O
takes	O
to	O
remove	O
all	O
the	O
elements	O
using	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
which	O
isn	O
’	O
t	O
the	O
world	O
most	O
accurate	O
stopwatch	O
but	O
is	O
more	O
than	O
adequate	O
in	O
this	O
case	O
,	O
as	O
you	O
’	O
ll	O
see	O
.	O
Here	O
’	O
s	O
the	O
code	O
:	O
#	O
pre	O
Let	O
’	O
s	O
start	O
off	O
by	O
giving	O
it	O
an	O
easy	O
job	O
:	O
a	O
source	O
set	O
of	O
100	O
items	O
,	O
and	O
100	O
to	O
remove	O
:	O
#	O
pre	O
Okay	O
,	O
That	O
'	O
s	O
fast	O
as	O
I	O
expected	O
.	O
Next	O
i	O
tried	O
source	O
of	O
one	O
million	O
items	O
and	O
300	O
,	O
000	O
items	O
to	O
remove	O
?	O
#	O
pre	O
That	O
still	O
seems	O
pretty	O
speedy	O
.	O
Now	O
make	O
it	O
a	O
bit	O
easier	O
–	O
300	O
,	O
000	O
source	O
items	O
and	O
300	O
,	O
000	O
removals	O
:	O
#	O
pre	O
Nearly	O
three	O
minutes	O
?	O
Really	O
confused	O
!	O
!	O
can	O
some	O
one	O
explain	O
why	O
this	O
is	O
happening	O
.	O
Question	O
-	O
5031614	O
,	O
answer	O
-	O
26826084	O
#	O
li	O
If	O
you	O
have	O
a	O
business	O
key	O
,	O
then	O
you	O
should	O
use	O
that	O
for	O
equals	B-api_mention
/	O
hashCode	B-api_mention
.	O
#	O
li	O
If	O
you	O
don	O
'	O
t	O
have	O
a	O
business	O
key	O
,	O
you	O
should	O
not	O
leave	O
it	O
with	O
the	O
default	O
Object	B-api_mention
equals	I-api_mention
and	O
hashCode	B-api_mention
implementations	O
because	O
that	O
does	O
not	O
work	O
after	O
you	O
merge	O
and	O
entity	O
.	O
#	O
li	O
You	O
can	O
use	O
the	O
entity	O
identifier	O
as	O
suggested	O
in	O
this	O
post	O
.	O
The	O
only	O
catch	O
is	O
that	O
you	O
need	O
to	O
use	O
a	O
hashCode	B-api_mention
implementation	O
that	O
always	O
return	O
the	O
same	O
value	O
,	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
5439543	O
You	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
the	O
integer	O
from	O
the	O
string	O
,	O
and	O
catch	O
the	O
exception	O
if	O
it	O
is	O
not	O
a	O
parsable	O
int	O
.	O
You	O
want	O
to	O
be	O
sure	O
to	O
catch	O
the	O
NumberFormatException	B-api_mention
it	O
can	O
throw	O
.	O
It	O
may	O
be	O
helpful	O
to	O
note	O
that	O
valueOf	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
return	O
an	O
Integer	B-api_mention
object	O
,	O
not	O
the	O
primitive	O
int	O
.	O
Question	O
-	O
22740464	O
I	O
can	O
add	O
streams	O
or	O
extra	O
elements	O
,	O
like	O
this	O
:	O
Stream	B-api_mention
stream	O
=	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	O
stream1	O
,	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
I	O
can	O
add	O
new	O
stuff	O
as	O
I	O
go	O
,	O
like	O
this	O
:	O
Stream	B-api_mention
stream	O
=	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
this	O
is	O
ugly	O
,	O
because	O
concat	B-api_mention
is	O
static	O
.	O
If	O
concat	O
were	O
an	O
instance	O
method	O
,	O
the	O
above	O
examples	O
would	O
be	O
much	O
easier	O
to	O
read	O
:	O
Stream	B-api_mention
stream	O
=	O
stream1	O
.	B-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
Stream	B-api_mention
stream	O
=	O
stream1	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
My	O
question	O
is	O
:	O
1	O
)	O
Is	O
there	O
any	O
good	O
reason	O
why	O
concat	B-api_mention
is	O
static	O
?	O
Or	O
is	O
there	O
some	O
equivalent	O
instance	O
method	O
I	O
'	O
m	O
missing	O
?	O
2	O
)	O
In	O
any	O
case	O
,	O
is	O
there	O
a	O
better	O
way	O
of	O
doing	O
this	O
?	O
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993534	O
You	O
have	O
a	O
single	O
extra	O
newline	O
at	O
the	O
end	O
of	O
your	O
file	O
.	O
#	O
li	O
hasNextLine	B-api_mention
(	I-api_mention
)	I-api_mention
checks	O
to	O
see	O
if	O
there	O
is	O
another	O
linePattern	O
in	O
the	O
buffer	O
.	O
#	O
li	O
hasNext	B-api_mention
(	I-api_mention
)	I-api_mention
checks	O
to	O
see	O
if	O
there	O
is	O
a	O
parseable	O
token	O
in	O
the	O
buffer	O
,	O
as	O
separated	O
by	O
the	O
scanner	O
'	O
s	O
delimiter	O
.	O
Since	O
the	O
scanner	O
'	O
s	O
delimiter	O
is	O
whitespace	O
,	O
and	O
the	O
linePattern	O
is	O
also	O
white	O
space	O
,	O
it	O
is	O
possible	O
for	O
there	O
to	O
be	O
a	O
linePattern	O
in	O
the	O
buffer	O
but	O
no	O
parseable	O
tokens	O
.	O
Typically	O
,	O
the	O
most	O
common	O
way	O
to	O
deal	O
with	O
this	O
issue	O
by	O
always	O
calling	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
after	O
parsing	O
all	O
the	O
tokens	O
(	O
e	O
.	O
g	O
.	O
numbers	O
)	O
in	O
each	O
line	O
of	O
your	O
text	O
.	O
You	O
need	O
to	O
do	O
this	O
when	O
using	O
Scanner	B-api_mention
when	O
reading	O
a	O
user	O
'	O
s	O
input	O
too	O
from	O
System	B-api_mention
.	I-api_mention
in	I-api_mention
.	O
To	O
advance	O
the	O
scanner	O
past	O
this	O
whitespace	O
delimiter	O
,	O
you	O
must	O
use	O
scanner	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
clear	O
the	O
line	O
delimiter	O
.	O
See	O
:	O
Using	O
scanner	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
)	I-api_mention
Appendix	O
:	O
LinePattern	O
is	O
defined	O
to	O
be	O
a	O
Pattern	B-api_mention
that	O
matches	O
this	O
:	O
#	O
pre	O
The	O
default	O
token	O
delimiter	O
is	O
this	O
Pattern	B-api_mention
:	O
private	O
static	O
Pattern	B-api_mention
WHITESPACE	O
_	O
PATTERN	O
=	O
Pattern	B-api_mention
.	I-api_mention
compile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14492320	O
Your	O
QuickRandom	B-api_mention
implementation	O
hasn	O
'	O
t	O
really	O
an	O
uniform	O
distribution	O
.	O
The	O
frequencies	O
are	O
generally	O
higher	O
at	O
the	O
lower	O
values	O
while	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
a	O
more	O
uniform	O
distribution	O
.	O
Here	O
'	O
s	O
a	O
SSCCE	O
which	O
shows	O
that	O
:	O
#	O
pre	O
The	O
average	O
result	O
looks	O
like	O
this	O
:	O
#	O
pre	O
If	O
you	O
repeat	O
the	O
test	O
,	O
you	O
'	O
ll	O
see	O
that	O
the	O
QR	O
distribution	O
varies	O
heavily	O
,	O
depending	O
on	O
the	O
initial	O
seeds	O
,	O
while	O
the	O
MR	O
distribution	O
is	O
stable	O
.	O
Sometimes	O
it	O
reaches	O
the	O
desired	O
uniform	O
distribution	O
,	O
but	O
more	O
than	O
often	O
it	O
doesn	O
'	O
t	O
.	O
Here	O
'	O
s	O
one	O
of	O
the	O
more	O
extreme	O
examples	O
,	O
it	O
'	O
s	O
even	O
beyond	O
the	O
borders	O
of	O
the	O
graph	O
:	O
#	O
pre	O
Question	O
-	O
27430092	O
,	O
answer	O
-	O
27449187	O
The	O
standard	O
use	O
case	O
for	O
BigInteger	B-api_mention
.	I-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
int	I-api_mention
)	I-api_mention
is	O
in	O
cryptography	O
.	O
Specifically	O
,	O
certain	O
cryptographic	O
algorithms	O
,	O
such	O
as	O
RSA	O
,	O
require	O
randomly	O
chosen	O
large	O
primes	O
.	O
Importantly	O
,	O
however	O
,	O
these	O
algorithms	O
don	O
'	O
t	O
really	O
require	O
these	O
numbers	O
to	O
be	O
guaranteed	O
to	O
be	O
prime	O
—	O
they	O
just	O
need	O
to	O
be	O
prime	O
with	O
a	O
very	O
high	O
probability	O
.	O
How	O
high	O
is	O
very	O
high	O
?	O
Well	O
,	O
in	O
a	O
crypto	O
application	O
,	O
one	O
would	O
typically	O
call	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
an	O
argument	O
somewhere	O
between	O
128	O
and	O
256	O
.	O
Thus	O
,	O
the	O
probability	O
of	O
a	O
non	O
-	O
prime	O
number	O
passing	O
such	O
a	O
test	O
is	O
less	O
than	O
one	O
in	O
2	O
128	O
or	O
2	O
256	O
.	O
Let	O
'	O
s	O
put	O
that	O
in	O
perspective	O
:	O
if	O
you	O
had	O
10	O
billion	O
computers	O
,	O
each	O
generating	O
10	O
billion	O
probable	O
prime	O
numbers	O
per	O
second	O
(	O
which	O
would	O
mean	O
less	O
than	O
one	O
clock	O
cycle	O
per	O
number	O
on	O
any	O
modern	O
CPU	O
)	O
,	O
and	O
the	O
primality	O
of	O
those	O
numbers	O
was	O
tested	O
with	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
would	O
,	O
on	O
average	O
,	O
expect	O
one	O
non	O
-	O
prime	O
number	O
to	O
slip	O
in	O
once	O
in	O
every	O
100	O
billion	O
years	O
.	O
That	O
is	O
,	O
that	O
would	O
be	O
the	O
case	O
,	O
if	O
those	O
10	O
billion	O
computers	O
could	O
somehow	O
all	O
run	O
for	O
hundreds	O
of	O
billions	O
of	O
years	O
without	O
experiencing	O
any	O
hardware	O
failures	O
.	O
In	O
practice	O
,	O
though	O
,	O
it	O
'	O
s	O
a	O
lot	O
more	O
likely	O
for	O
a	O
random	O
cosmic	O
ray	O
to	O
strike	O
your	O
computer	O
at	O
just	O
the	O
right	O
time	O
and	O
place	O
to	O
flip	O
the	O
return	O
value	O
of	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
from	O
false	O
to	O
true	O
,	O
without	O
causing	O
any	O
other	O
detectable	O
effects	O
,	O
than	O
it	O
is	O
for	O
a	O
non	O
-	O
prime	O
number	O
to	O
actually	O
pass	O
the	O
probabilistic	O
primality	O
test	O
at	O
that	O
certainty	O
level	O
.	O
Of	O
course	O
,	O
the	O
same	O
risk	O
of	O
random	O
cosmic	O
rays	O
and	O
other	O
hardware	O
faults	O
also	O
applies	O
to	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
.	O
Thus	O
,	O
in	O
practice	O
,	O
even	O
these	O
tests	O
have	O
a	O
(	O
very	O
small	O
)	O
baseline	O
false	O
positive	O
rate	O
due	O
to	O
random	O
hardware	O
failures	O
(	O
not	O
to	O
mention	O
all	O
other	O
possible	O
sources	O
of	O
errors	O
,	O
such	O
as	O
implementation	O
bugs	O
)	O
.	O
Since	O
it	O
'	O
s	O
easy	O
to	O
push	O
the	O
intrinsic	O
false	O
positive	O
rate	O
of	O
the	O
Miller	O
–	O
Rabin	O
primality	O
test	O
used	O
by	O
.	B-api_mention
isProbablePrime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
far	O
below	O
this	O
baseline	O
rate	O
,	O
simply	O
by	O
repeating	O
the	O
test	O
sufficiently	O
many	O
times	O
,	O
and	O
since	O
,	O
even	O
repeated	O
so	O
many	O
times	O
,	O
the	O
Miller	O
–	O
Rabin	O
test	O
is	O
still	O
much	O
faster	O
in	O
practice	O
than	O
the	O
best	O
known	O
deterministic	O
primality	O
tests	O
like	O
AKS	O
,	O
it	O
remains	O
the	O
standard	O
primality	O
test	O
for	O
cryptographic	O
applications	O
.	O
(	O
Besides	O
,	O
even	O
if	O
you	O
happened	O
to	O
accidentally	O
select	O
a	O
strong	O
pseudoprime	O
as	O
one	O
of	O
the	O
factors	O
of	O
your	O
RSA	O
modulus	O
,	O
it	O
would	O
not	O
generally	O
lead	O
to	O
a	O
catastrophic	O
failure	O
.	O
Typically	O
,	O
such	O
pseudoprimes	O
would	O
be	O
products	O
of	O
two	O
(	O
or	O
rarely	O
more	O
)	O
primes	O
of	O
approximately	O
half	O
the	O
length	O
,	O
which	O
means	O
that	O
you	O
'	O
d	O
end	O
up	O
with	O
a	O
multi	O
-	O
prime	O
RSA	O
key	O
.	O
As	O
long	O
as	O
none	O
of	O
the	O
factors	O
were	O
too	O
small	O
(	O
and	O
if	O
they	O
were	O
,	O
the	O
primality	O
test	O
should	O
'	O
ve	O
caught	O
them	O
)	O
,	O
the	O
RSA	O
algorithm	O
will	O
still	O
work	O
just	O
fine	O
,	O
and	O
the	O
key	O
,	O
although	O
somewhat	O
weaker	O
against	O
certain	O
types	O
of	O
attacks	O
than	O
normal	O
RSA	O
keys	O
of	O
the	O
same	O
length	O
,	O
should	O
still	O
be	O
reasonably	O
secure	O
if	O
you	O
didn	O
'	O
t	O
needlessly	O
skimp	O
on	O
the	O
key	O
length	O
.	O
)	O
Question	O
-	O
7488643	O
,	O
answer	O
-	O
7488683	O
You	O
can	O
first	O
split	O
them	O
using	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
convert	O
the	O
returned	O
String	B-api_mention
array	O
to	O
an	O
ArrayList	B-api_mention
using	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
8172420	O
,	O
answer	O
-	O
32174377	O
We	O
have	O
various	O
ways	O
to	O
convert	O
a	O
char	O
to	O
String	B-api_mention
.	O
One	O
way	O
is	O
to	O
make	O
use	O
of	O
static	O
method	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
Character	O
class	O
:	O
#	O
pre	O
Actually	O
this	O
toString	B-api_mention
method	O
internally	O
makes	O
use	O
of	O
valueOf	B-api_mention
method	O
from	O
String	B-api_mention
class	O
which	O
makes	O
use	O
of	O
char	O
array	O
:	O
#	O
pre	O
So	O
second	O
way	O
is	O
to	O
use	O
this	O
directly	O
:	O
String	B-api_mention
str2	O
=	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
valueOf	B-api_mention
method	O
in	O
String	B-api_mention
class	O
makes	O
use	O
of	O
char	O
array	O
:	O
#	O
pre	O
So	O
the	O
third	O
way	O
is	O
to	O
make	O
use	O
of	O
an	O
anonymous	O
array	O
to	O
wrap	O
a	O
single	O
character	O
and	O
then	O
passing	O
it	O
to	O
String	B-api_mention
constructor	O
:	O
String	B-api_mention
str4	O
=	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
fourth	O
way	O
is	O
to	O
make	O
use	O
of	O
concatenation	O
:	O
String	B-api_mention
str3	O
=	O
StringLiteral	O
+	O
ch	O
;	O
This	O
will	O
actually	O
make	O
use	O
of	O
append	B-api_mention
method	O
from	O
StringBuilder	B-api_mention
class	O
which	O
is	O
actually	O
preferred	O
when	O
we	O
are	O
doing	O
concatenation	O
in	O
a	O
loop	O
.	O
Question	O
-	O
26375932	O
,	O
answer	O
-	O
26407637	O
It	O
is	O
an	O
integer	O
overflow	O
.	O
The	O
int	O
data	O
type	O
is	O
4	O
bytes	O
,	O
or	O
32	O
bits	O
.	O
Therefore	O
,	O
numbers	O
larger	O
than	O
2	O
^	O
(	O
32	O
-	O
1	O
)	O
-	O
1	O
(	O
2	O
,	O
147	O
,	O
483	O
,	O
647	O
)	O
cannot	O
be	O
stored	O
in	O
this	O
data	O
type	O
.	O
Your	O
numerical	O
values	O
will	O
be	O
incorrect	O
.	O
For	O
very	O
large	O
numbers	O
,	O
you	O
will	O
want	O
to	O
import	O
and	O
use	O
the	O
class	O
java	B-api_mention
.	I-api_mention
math	I-api_mention
.	I-api_mention
BigInteger	I-api_mention
:	O
#	O
pre	O
NOTE	O
:	O
For	O
numerical	O
values	O
that	O
are	O
still	O
too	O
large	O
for	O
the	O
int	O
data	O
type	O
,	O
but	O
small	O
enough	O
to	O
fit	O
within	O
8	O
bytes	O
(	O
absolute	O
value	O
less	O
than	O
or	O
equal	O
to	O
2	O
^	O
(	O
64	O
-	O
1	O
)	O
-	O
1	O
)	O
,	O
you	O
should	O
probably	O
use	O
the	O
long	O
primitive	O
.	O
HackerRank	O
'	O
s	O
practice	O
problems	O
(	O
www	O
.	O
hackerrank	O
.	O
com	O
)	O
,	O
such	O
as	O
the	O
Algorithms	O
practice	O
section	O
,	O
(	O
#	O
a	O
)	O
include	O
some	O
very	O
good	O
large	O
-	O
number	O
questions	O
that	O
give	O
good	O
practice	O
about	O
how	O
to	O
think	O
about	O
the	O
appropriate	O
data	O
type	O
to	O
use	O
.	O
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375818	O
This	O
isn	O
'	O
t	O
strictly	O
an	O
answer	O
to	O
your	O
question	O
,	O
but	O
if	O
behind	O
your	O
question	O
is	O
a	O
wish	O
to	O
have	O
mutable	O
strings	O
that	O
you	O
can	O
manipulate	O
,	O
you	O
should	O
check	O
out	O
the	O
StringBuilder	B-api_mention
class	O
,	O
which	O
implements	O
many	O
of	O
the	O
exact	O
same	O
methods	O
that	O
String	B-api_mention
has	O
but	O
also	O
adds	O
methods	O
to	O
change	O
the	O
current	O
contents	O
.	O
Once	O
you	O
'	O
ve	O
built	O
your	O
string	O
in	O
such	O
a	O
way	O
that	O
you	O
'	O
re	O
content	O
with	O
it	O
,	O
you	O
simply	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
it	O
in	O
order	O
to	O
convert	O
it	O
to	O
an	O
ordinary	O
String	B-api_mention
that	O
you	O
can	O
pass	O
to	O
library	O
routines	O
and	O
other	O
functions	O
that	O
only	O
take	O
String	B-api_mention
s	O
.	O
Also	O
,	O
both	O
StringBuilder	B-api_mention
and	O
String	B-api_mention
implements	O
the	O
CharSequence	B-api_mention
interface	O
,	O
so	O
if	O
you	O
want	O
to	O
write	O
functions	O
in	O
your	O
own	O
code	O
that	O
can	O
use	O
both	O
mutable	O
and	O
immutable	O
strings	O
,	O
you	O
can	O
declare	O
them	O
to	O
take	O
any	O
CharSequence	B-api_mention
object	O
.	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29098447	O
The	O
solution	O
is	O
to	O
use	O
Stream	B-api_mention
.	I-api_mention
collect	I-api_mention
.	O
To	O
create	O
a	O
Collector	B-api_mention
using	O
its	O
builder	O
pattern	O
is	O
already	O
given	O
as	O
solution	O
.	O
The	O
alternative	O
is	O
the	O
other	O
overloaded	O
collect	O
being	O
a	O
tiny	O
bit	O
more	O
primitive	O
.	O
#	O
pre	O
As	O
one	O
sees	O
,	O
I	O
make	O
a	O
list	O
of	O
string	O
lists	O
,	O
where	O
there	O
always	O
is	O
at	O
least	O
one	O
last	O
(	O
empty	O
)	O
string	O
list	O
.	O
#	O
li	O
The	O
first	O
function	O
creates	O
a	O
starting	O
list	O
of	O
string	O
lists	O
.	O
It	O
specifies	O
the	O
result	O
(	O
typed	O
)	O
object	O
.	O
#	O
li	O
The	O
second	O
function	O
is	O
called	O
to	O
process	O
each	O
element	O
.	O
It	O
is	O
an	O
action	O
on	O
the	O
partial	O
result	O
and	O
an	O
element	O
.	O
#	O
li	O
The	O
third	O
is	O
not	O
really	O
used	O
,	O
it	O
comes	O
into	O
play	O
on	O
parallelising	O
the	O
processing	O
,	O
when	O
partial	O
results	O
must	O
be	O
combined	O
.	O
A	O
solution	O
with	O
an	O
accumulator	O
:	O
As	O
@	O
StuartMarks	O
points	O
out	O
,	O
the	O
combiner	O
does	O
not	O
fullfill	O
the	O
contract	O
for	O
parallelism	O
.	O
Due	O
to	O
the	O
comment	O
of	O
@	O
ArnaudDenoyelle	O
a	O
version	O
using	O
reduce	O
.	O
#	O
pre	O
#	O
li	O
The	O
first	O
parameter	O
is	O
the	O
accumulated	O
object	O
.	O
#	O
li	O
The	O
second	O
function	O
accumulates	O
.	O
#	O
li	O
The	O
third	O
is	O
the	O
aforementioned	O
combiner	O
.	O
Question	O
-	O
29333689	O
,	O
answer	O
-	O
29341981	O
The	O
best	O
answer	O
is	O
already	O
given	O
(	O
XOR	O
-	O
ing	O
the	O
elements	O
)	O
,	O
this	O
is	O
to	O
provide	O
an	O
alternative	O
,	O
more	O
general	O
way	O
.	O
If	O
the	O
input	O
array	O
would	O
be	O
sorted	O
(	O
we	O
can	O
make	O
it	O
sorted	O
)	O
,	O
we	O
could	O
simply	O
iterate	O
over	O
the	O
elements	O
in	O
pairs	O
(	O
stepping	O
by	O
2	O
)	O
and	O
if	O
the	O
elements	O
of	O
the	O
"	O
pair	O
"	O
are	O
different	O
,	O
we	O
'	O
re	O
done	O
:	O
#	O
pre	O
Note	O
:	O
This	O
solution	O
sorts	O
the	O
input	O
array	O
;	O
if	O
this	O
is	O
unwanted	O
or	O
not	O
allowed	O
,	O
it	O
can	O
be	O
cloned	O
first	O
:	O
arr	O
=	O
arr	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
input	O
array	O
is	O
sorted	O
,	O
the	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
can	O
be	O
left	O
out	O
of	O
course	O
.	O
Generalization	O
The	O
advantage	O
of	O
this	O
solution	O
is	O
that	O
it	O
can	O
be	O
applied	O
to	O
all	O
types	O
which	O
are	O
comparable	O
and	O
therefore	O
can	O
be	O
sorted	O
(	O
types	O
which	O
implement	O
Comparable	B-api_mention
)	O
,	O
for	O
example	O
String	B-api_mention
or	O
Date	B-api_mention
.	O
The	O
XOR	O
solution	O
is	O
limited	O
to	O
numbers	O
only	O
.	O
Here	O
is	O
a	O
slightly	O
modified	O
version	O
which	O
takes	O
an	O
input	O
array	O
of	O
any	O
element	O
type	O
which	O
is	O
comparable	O
:	O
#	O
pre	O
Note	O
:	O
In	O
most	O
cases	O
you	O
could	O
also	O
use	O
arr	O
[	O
i	O
]	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
compare	O
elements	O
instead	O
of	O
using	O
Comparable	B-api_mention
.	I-api_mention
compareTo	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
For	O
details	O
read	O
the	O
linked	O
javadoc	O
.	O
Quoting	O
the	O
relevant	O
part	O
:	O
#	O
blockquote	O
Now	O
you	O
can	O
call	O
this	O
with	O
a	O
String	B-api_mention
[	O
]	O
for	O
example	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Output	O
:	O
2	O
Final	O
notes	O
:	O
Starting	O
from	O
the	O
problem	O
statement	O
it	O
is	O
not	O
checked	O
whether	O
there	O
are	O
more	O
than	O
2	O
occurrences	O
of	O
the	O
elements	O
,	O
and	O
neither	O
is	O
whether	O
the	O
array	O
length	O
is	O
odd	O
.	O
Also	O
the	O
second	O
example	O
doesn	O
'	O
t	O
check	O
for	O
null	O
values	O
,	O
these	O
are	O
to	O
be	O
added	O
if	O
necessary	O
.	O
Question	O
-	O
23674624	O
I	O
'	O
m	O
looking	O
at	O
the	O
docs	O
for	O
the	O
IntStream	B-api_mention
,	O
and	O
I	O
see	O
an	O
toArray	B-api_mention
method	O
,	O
but	O
no	O
way	O
to	O
go	O
directly	O
to	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Surely	O
there	O
is	O
a	O
way	O
to	O
convert	O
a	O
Stream	B-api_mention
to	O
a	O
List	B-api_mention
?	O
Question	O
-	O
27504925	O
,	O
answer	O
-	O
27505121	O
I	O
'	O
d	O
like	O
to	O
point	O
out	O
this	O
article	O
.	O
It	O
seems	O
as	O
though	O
arrays	O
and	O
objects	O
follow	O
different	O
opcodes	O
.	O
I	O
can	O
'	O
t	O
honestly	O
summarize	O
it	O
more	O
than	O
that	O
however	O
it	O
seems	O
,	O
arrays	O
are	O
simply	O
not	O
treated	O
as	O
Objects	B-api_mention
like	O
we	O
'	O
re	O
normally	O
used	O
to	O
so	O
they	O
don	O
'	O
t	O
inherit	O
Object	B-api_mention
methods	O
.	O
Full	O
credits	O
to	O
the	O
author	O
of	O
that	O
post	O
as	O
it	O
'	O
s	O
a	O
very	O
interesting	O
read	O
,	O
both	O
short	O
&	O
detailed	O
.	O
Upon	O
further	O
digging	O
into	O
the	O
topic	O
via	O
multiple	O
sources	O
I	O
'	O
ve	O
decided	O
to	O
give	O
a	O
more	O
elaborate	O
version	O
of	O
my	O
previous	O
answer	O
.	O
The	O
first	O
thing	O
to	O
note	O
that	O
instantiation	O
of	O
Objects	B-api_mention
and	O
Arrays	B-api_mention
are	O
very	O
different	O
within	O
the	O
JVM	O
,	O
their	O
follow	O
their	O
respective	O
bytecode	O
.	O
Object	O
:	O
Object	B-api_mention
instantiation	O
follows	O
a	O
simple	O
Opcode	O
new	O
which	O
is	O
a	O
combination	O
of	O
two	O
operands	O
-	O
indexbyte1	O
&	O
indexbyte2	O
.	O
Once	O
instantiated	O
the	O
JVM	O
pushes	O
the	O
reference	O
to	O
this	O
object	O
onto	O
the	O
stack	O
.	O
This	O
occurs	O
for	O
all	O
objects	O
irrespective	O
of	O
their	O
types	O
.	O
Arrays	O
:	O
Array	B-api_mention
Opcodes	O
(	O
regarding	O
instantiation	O
of	O
an	O
array	O
)	O
however	O
are	O
divided	O
into	O
three	O
different	O
codes	O
.	O
#	O
blockquote	O
newarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
that	O
involve	O
primitive	O
datatypes	O
(	O
byte	O
short	O
char	O
int	O
long	O
float	O
double	O
boolean	O
)	O
rather	O
than	O
object	O
references	O
.	O
#	O
blockquote	O
anewarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
of	O
object	O
references	O
#	O
blockquote	O
multianewarray	O
instruction	O
is	O
used	O
when	O
allocating	O
multi	O
-	O
dimensional	O
arrays	O
Object	B-api_mention
can	O
be	O
a	O
class	O
instance	O
or	O
an	O
array	O
.	O
Take	O
from	O
Oracle	O
Docs	O
#	O
blockquote	O
BUT	O
#	O
blockquote	O
This	O
goes	O
hand	O
in	O
hand	O
with	O
the	O
information	O
regarding	O
the	O
opcodes	O
.	O
Arrays	O
are	O
simply	O
not	O
developed	O
to	O
be	O
class	O
interfaces	O
but	O
are	O
instead	O
explicitly	O
created	O
by	O
array	O
creation	O
expression	O
thus	O
naturally	O
wouldn	O
'	O
t	O
implicitly	O
be	O
able	O
to	O
inherit	O
and	O
/	O
or	O
override	O
Object	B-api_mention
.	O
As	O
we	O
have	O
seen	O
,	O
it	O
has	O
nothing	O
to	O
do	O
with	O
the	O
fact	O
that	O
arrays	O
may	O
hold	O
primitive	O
datatypes	O
.	O
After	O
giving	O
it	O
some	O
thought	O
though	O
,	O
it	O
isn	O
'	O
t	O
very	O
common	O
to	O
come	O
across	O
situations	O
where	O
one	O
might	O
want	O
to	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
however	O
was	O
still	O
a	O
very	O
interesting	O
question	O
to	O
try	O
and	O
answer	O
.	O
Resources	O
:	O
Oracle	O
-	O
Docs	O
chapter	O
4	O
.	O
3	O
.	O
1	O
Oracle	O
-	O
Docs	O
chapter	O
15	O
.	O
10	O
.	O
1	O
Artima	O
-	O
UnderTheHood	O
Question	O
-	O
32475166	O
,	O
answer	O
-	O
32475290	O
The	O
chief	O
difference	O
is	O
that	O
an	O
if	O
else	O
block	O
is	O
a	O
statement	O
whereas	O
the	O
ternary	O
(	O
more	O
often	O
known	O
as	O
the	O
conditional	O
operator	O
in	O
Java	O
)	O
is	O
an	O
expression	O
.	O
A	O
statement	O
can	O
do	O
things	O
like	O
return	O
to	O
the	O
caller	O
on	O
some	O
of	O
the	O
control	O
paths	O
.	O
An	O
expression	O
can	O
be	O
used	O
in	O
an	O
assignment	O
:	O
int	O
n	O
=	O
condition	O
?	O
3	O
:	O
2	O
;	O
So	O
the	O
two	O
expressions	O
in	O
the	O
ternary	O
after	O
the	O
condition	O
need	O
to	O
be	O
coercable	O
to	O
the	O
same	O
type	O
.	O
This	O
can	O
cause	O
some	O
odd	O
effects	O
in	O
Java	O
particularly	O
with	O
auto	O
-	O
boxing	O
and	O
automatic	O
reference	O
casting	O
-	O
this	O
is	O
what	O
the	O
comment	O
in	O
your	O
posted	O
code	O
is	O
referring	O
to	O
.	O
The	O
coercion	O
of	O
the	O
expressions	O
in	O
your	O
case	O
would	O
be	O
to	O
a	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Executable	O
type	O
(	O
as	O
that	O
'	O
s	O
the	O
most	O
specialised	O
type	O
)	O
and	O
that	O
does	O
not	O
exist	O
in	O
older	O
versions	O
of	O
Java	O
.	O
Stylistically	O
you	O
should	O
use	O
an	O
if	O
else	O
block	O
if	O
the	O
code	O
is	O
statement	O
-	O
like	O
,	O
and	O
a	O
ternary	O
if	O
it	O
'	O
s	O
expression	O
-	O
like	O
.	O
Of	O
course	O
,	O
you	O
can	O
make	O
an	O
if	O
else	O
block	O
behave	O
like	O
an	O
expression	O
if	O
you	O
use	O
a	O
lambda	O
function	O
.	O
Question	O
-	O
6841333	O
,	O
answer	O
-	O
20906129	O
As	O
explained	O
by	O
others	O
,	O
there	O
'	O
s	O
a	O
time	O
discontinuity	O
there	O
.	O
There	O
are	O
two	O
possible	O
timezone	O
offsets	O
for	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
54	O
:	O
08	O
at	O
Asia	O
/	O
Shanghai	O
,	O
but	O
only	O
one	O
offset	O
for	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
54	O
:	O
07	O
.	O
So	O
,	O
depending	O
on	O
which	O
offset	O
is	O
used	O
,	O
there	O
'	O
s	O
either	O
a	O
one	O
second	O
difference	O
or	O
a	O
5	O
minutes	O
and	O
53	O
seconds	O
difference	O
.	O
This	O
slight	O
shift	O
of	O
offsets	O
,	O
instead	O
of	O
the	O
usual	O
one	O
-	O
hour	O
daylight	O
savings	O
(	O
summer	O
time	O
)	O
we	O
are	O
used	O
to	O
,	O
obscures	O
the	O
problem	O
a	O
bit	O
.	O
Note	O
that	O
the	O
2013a	O
update	O
of	O
the	O
timezone	O
database	O
moved	O
this	O
discontinuity	O
a	O
few	O
seconds	O
earlier	O
,	O
but	O
the	O
effect	O
would	O
still	O
be	O
observable	O
.	O
The	O
new	O
java	O
.	O
time	O
package	O
on	O
Java	O
8	O
let	O
use	O
see	O
this	O
more	O
clearly	O
,	O
and	O
provide	O
tools	O
to	O
handle	O
it	O
.	O
Given	O
:	O
#	O
pre	O
Then	O
durationAtEarlierOffset	B-api_mention
will	O
be	O
one	O
second	O
,	O
while	O
durationAtLaterOffset	B-api_mention
will	O
be	O
five	O
minutes	O
and	O
53	O
seconds	O
.	O
Also	O
,	O
these	O
two	O
offsets	O
are	O
the	O
same	O
:	O
#	O
pre	O
But	O
these	O
two	O
are	O
different	O
:	O
#	O
pre	O
You	O
can	O
see	O
the	O
same	O
problem	O
comparing	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
59	O
:	O
59	O
with	O
1928	O
-	O
01	O
-	O
01	O
00	O
:	O
00	O
:	O
00	O
,	O
though	O
,	O
in	O
this	O
case	O
,	O
it	O
is	O
the	O
earlier	O
offset	O
that	O
produce	O
the	O
longer	O
divergence	O
,	O
and	O
it	O
is	O
the	O
earlier	O
date	O
that	O
has	O
two	O
possible	O
offsets	O
.	O
Another	O
way	O
to	O
approach	O
this	O
is	O
to	O
check	O
whether	O
there	O
'	O
s	O
a	O
transition	O
going	O
on	O
.	O
We	O
can	O
do	O
this	O
like	O
this	O
:	O
#	O
pre	O
You	O
can	O
check	O
whether	O
the	O
transition	O
is	O
an	O
overlap	O
-	O
in	O
which	O
case	O
there	O
'	O
s	O
more	O
than	O
one	O
valid	O
offset	O
for	O
that	O
date	O
/	O
time	O
-	O
or	O
a	O
gap	O
-	O
in	O
which	O
case	O
that	O
date	O
/	O
time	O
is	O
not	O
valid	O
for	O
that	O
zone	O
id	O
-	O
by	O
using	O
the	O
isOverlap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
isGap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
zot4	O
.	O
I	O
hope	O
this	O
helps	O
people	O
handle	O
this	O
sort	O
of	O
issue	O
once	O
Java	O
8	O
becomes	O
widely	O
available	O
,	O
or	O
to	O
those	O
using	O
Java	O
7	O
who	O
adopt	O
the	O
JSR	O
310	O
backport	O
.	O
Question	O
-	O
28770822	O
,	O
answer	O
-	O
28816219	O
Looking	O
at	O
the	O
issue	O
and	O
fix	O
,	O
it	O
looks	O
like	O
this	O
has	O
been	O
done	O
to	O
resolve	O
a	O
handling	O
of	O
a	O
header	O
file	O
generation	O
for	O
special	O
classes	O
in	O
jigsaw	O
Jigsaw	O
is	O
a	O
module	O
system	O
designated	O
to	O
use	O
in	O
Java	O
SE	O
Platform	O
and	O
JDK	O
.	O
More	O
details	O
here	O
Here	O
is	O
a	O
corresponding	O
changeset	O
.	O
You	O
can	O
see	O
a	O
comment	O
,	O
#	O
blockquote	O
From	O
the	O
changeset	O
I	O
see	O
that	O
for	O
the	O
sake	O
of	O
purpose	O
in	O
addition	O
to	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Integer	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Long	I-api_mention
,	O
also	O
some	O
properties	O
in	O
java	O
.	O
net	O
.	O
SocketOptions	O
,	O
sun	O
.	O
nio	O
.	O
ch	O
.	O
IOStatus	O
,	O
java	B-api_mention
.	I-api_mention
io	I-api_mention
.	I-api_mention
FileSystem	I-api_mention
have	O
been	O
changed	O
to	O
@	O
Native	O
.	O
So	O
I	O
assume	O
only	O
those	O
were	O
needed	O
to	O
solve	O
the	O
dependency	O
with	O
jigsaw	O
.	O
Question	O
-	O
29262002	O
,	O
answer	O
-	O
29262511	O
The	O
first	O
case	O
is	O
ok	O
because	O
you	O
are	O
invoking	O
a	O
"	O
special	O
"	O
method	O
(	O
a	O
constructor	O
)	O
and	O
you	O
are	O
no	O
actually	O
taking	O
the	O
created	O
object	O
.	O
Just	O
to	O
make	O
it	O
more	O
clear	O
,	O
I	O
'	O
ll	O
put	O
the	O
optional	O
braces	O
in	O
your	O
lambdas	O
:	O
#	O
pre	O
And	O
more	O
clear	O
,	O
I	O
'	O
ll	O
translate	O
that	O
to	O
the	O
older	O
notation	O
:	O
#	O
pre	O
In	O
the	O
first	O
case	O
you	O
are	O
executing	O
a	O
constructor	O
,	O
but	O
you	O
are	O
NOT	O
returning	O
the	O
created	O
object	O
,	O
in	O
the	O
second	O
case	O
you	O
are	O
attempting	O
to	O
return	O
a	O
String	B-api_mention
value	O
,	O
but	O
your	O
method	O
in	O
your	O
interface	O
BiConsumer	O
returns	O
void	O
,	O
hence	O
the	O
compiler	O
error	O
.	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
33142346	O
Once	O
a	O
repeat	O
function	O
is	O
somewhere	O
defined	O
as	O
#	O
pre	O
You	O
can	O
use	O
it	O
now	O
and	O
then	O
this	O
way	O
,	O
e	O
.	O
g	O
.	O
:	O
repeat	O
.	B-api_mention
accept	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
To	O
get	O
and	O
equivalent	O
to	O
Haskell	O
'	O
s	O
take	O
8	O
(	O
args	O
)	O
You	O
could	O
write	O
#	O
pre	O
Question	O
-	O
7935858	O
,	O
answer	O
-	O
7935881	O
The	O
documentation	O
on	O
split	B-api_mention
(	I-api_mention
)	I-api_mention
says	O
:	O
#	O
blockquote	O
(	O
Emphasis	O
mine	O
.	O
)	O
A	O
dot	O
is	O
a	O
special	O
character	O
in	O
regular	O
expression	O
syntax	O
.	O
Use	O
Pattern	B-api_mention
.	I-api_mention
quote	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
the	O
parameter	O
to	O
split	B-api_mention
(	I-api_mention
)	I-api_mention
if	O
you	O
want	O
the	O
split	O
to	O
be	O
on	O
a	O
literal	O
string	O
pattern	O
:	O
String	B-api_mention
[	O
]	O
words	O
=	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
5031614	O
There	O
have	O
been	O
some	O
discussions	O
here	O
about	O
JPA	O
entities	O
and	O
which	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
implementation	O
should	O
be	O
used	O
for	O
JPA	O
entity	O
classes	O
.	O
Most	O
(	O
if	O
not	O
all	O
)	O
of	O
them	O
depend	O
on	O
Hibernate	O
,	O
but	O
I	O
'	O
d	O
like	O
to	O
discuss	O
them	O
JPA	O
-	O
implementation	O
-	O
neutrally	O
(	O
I	O
am	O
using	O
EclipseLink	O
,	O
by	O
the	O
way	O
)	O
.	O
All	O
possible	O
implementations	O
are	O
having	O
their	O
own	O
advantages	O
and	O
disadvantages	O
regarding	O
:	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
contract	O
conformity	O
(	O
immutability	O
)	O
for	O
List	O
/	O
Set	O
operations	O
#	O
li	O
Whether	O
identical	O
objects	O
(	O
e	O
.	O
g	O
.	O
from	O
different	O
sessions	O
,	O
dynamic	O
proxies	O
from	O
lazily	O
-	O
loaded	O
data	O
structures	O
)	O
can	O
be	O
detected	O
#	O
li	O
Whether	O
entities	O
behave	O
correctly	O
in	O
detached	O
(	O
or	O
non	O
-	O
persisted	O
)	O
state	O
As	O
far	O
I	O
can	O
see	O
,	O
there	O
are	O
three	O
options	O
:	O
#	O
li	O
Do	O
not	O
override	O
them	O
;	O
rely	O
on	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
Object	B-api_mention
.	I-api_mention
hashCode	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
work	O
#	O
li	O
cannot	O
identify	O
identical	O
objects	O
,	O
problems	O
with	O
dynamic	O
proxies	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
primary	O
key	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
problems	O
with	O
detached	O
entities	O
#	O
li	O
Override	O
them	O
,	O
based	O
on	O
the	O
Business	O
-	O
Id	O
(	O
non	O
-	O
primary	O
key	O
fields	O
;	O
what	O
about	O
foreign	O
keys	O
?	O
)	O
#	O
li	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
#	O
li	O
correct	O
identity	O
(	O
for	O
all	O
managed	O
entities	O
)	O
#	O
li	O
no	O
problems	O
with	O
detached	O
entities	O
My	O
questions	O
are	O
:	O
#	O
li	O
Did	O
I	O
miss	O
an	O
option	O
and	O
/	O
or	O
pro	O
/	O
con	O
point	O
?	O
#	O
li	O
What	O
option	O
did	O
you	O
choose	O
and	O
why	O
?	O
UPDATE	O
1	O
:	O
By	O
"	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
broken	O
"	O
,	O
I	O
mean	O
that	O
successive	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invocations	O
may	O
return	O
differing	O
values	O
,	O
which	O
is	O
(	O
when	O
correctly	O
implemented	O
)	O
not	O
broken	O
in	O
the	O
sense	O
of	O
the	O
Object	O
API	O
documentation	O
,	O
but	O
which	O
causes	O
problems	O
when	O
trying	O
to	O
retrieve	O
a	O
changed	O
entity	O
from	O
a	O
Map	O
,	O
Set	O
or	O
other	O
hash	O
-	O
based	O
Collection	O
.	O
Consequently	O
,	O
JPA	O
implementations	O
(	O
at	O
least	O
EclipseLink	O
)	O
will	O
not	O
work	O
correctly	O
in	O
some	O
cases	O
.	O
UPDATE	O
2	O
:	O
Thank	O
you	O
for	O
your	O
answers	O
-	O
-	O
most	O
of	O
them	O
have	O
remarkable	O
quality	O
.	O
Unfortunately	O
,	O
I	O
am	O
still	O
unsure	O
which	O
approach	O
will	O
be	O
the	O
best	O
for	O
a	O
real	O
-	O
life	O
application	O
,	O
or	O
how	O
to	O
determine	O
the	O
best	O
approach	O
for	O
my	O
application	O
.	O
So	O
,	O
I	O
'	O
ll	O
keep	O
the	O
question	O
open	O
and	O
hope	O
for	O
some	O
more	O
discussions	O
and	O
/	O
or	O
opinions	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
30506585	O
Predicate	B-api_mention
has	O
methods	O
and	O
,	O
or	O
and	O
negate	O
.	O
However	O
,	O
String	B-api_mention
:	I-api_mention
:	I-api_mention
isEmpty	I-api_mention
is	O
not	O
a	O
Predicate	B-api_mention
.	O
It	O
could	O
as	O
well	O
be	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
or	O
MyProprietaryClass	B-api_mention
.	O
The	O
type	O
information	O
is	O
inferred	O
from	O
the	O
variable	O
or	O
the	O
call	O
.	O
So	O
,	O
you	O
need	O
to	O
cast	O
a	O
method	O
reference	O
explicitly	O
(	O
as	O
@	O
axtavt	O
mentioned	O
)	O
:	O
(	O
(	O
Predicate	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
String	B-api_mention
:	I-api_mention
:	I-api_mention
isEmpty	I-api_mention
)	O
.	B-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
But	O
it	O
'	O
s	O
absolutely	O
ugly	O
and	O
Predicate	B-api_mention
seems	O
to	O
use	O
lambdas	O
under	O
the	O
hood	O
anyway	O
.	O
So	O
I	O
think	O
you	O
are	O
better	O
off	O
writing	O
a	O
lambda	O
or	O
even	O
your	O
own	O
not	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
e	O
.	O
g	O
.	O
in	O
utility	O
,	O
static	O
import	O
)	O
.	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
34845194	O
You	O
can	O
also	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOfRange	I-api_mention
.	O
Example	O
:	O
#	O
pre	O
This	O
method	O
is	O
similar	O
to	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
,	O
but	O
it	O
'	O
s	O
more	O
flexible	O
.	O
Both	O
of	O
them	O
use	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
under	O
the	O
hood	O
.	O
See	O
:	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
Question	O
-	O
6416706	O
,	O
answer	O
-	O
6416788	O
As	O
soon	O
as	O
you	O
call	O
contains	B-api_mention
,	O
containsAll	B-api_mention
,	O
equals	B-api_mention
,	O
hashCode	B-api_mention
,	O
remove	B-api_mention
,	O
retainAll	B-api_mention
,	O
size	B-api_mention
or	O
toArray	B-api_mention
,	O
you	O
'	O
d	O
have	O
to	O
traverse	O
the	O
elements	O
anyway	O
.	O
If	O
you	O
'	O
re	O
occasionally	O
only	O
calling	O
methods	O
such	O
as	O
isEmpty	B-api_mention
or	O
clear	O
I	O
suppose	O
you	O
'	O
d	O
be	O
better	O
of	O
by	O
creating	O
the	O
collection	O
lazily	O
.	O
You	O
could	O
for	O
instance	O
have	O
a	O
backing	O
ArrayList	B-api_mention
for	O
storing	O
previously	O
iterated	O
elements	O
.	O
I	O
don	O
'	O
t	O
know	O
of	O
any	O
such	O
class	O
in	O
any	O
library	O
,	O
but	O
it	O
should	O
be	O
a	O
fairly	O
simple	O
exercise	O
to	O
write	O
up	O
.	O
Question	O
-	O
24603186	O
In	O
Java	O
8	O
,	O
the	O
Collection	B-api_mention
interface	O
was	O
extended	O
with	O
two	O
methods	O
that	O
return	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
:	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
a	O
sequential	O
stream	O
,	O
and	O
parallelStream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
returns	O
a	O
possibly	O
-	O
parallel	O
stream	O
.	O
Stream	O
itself	O
also	O
has	O
a	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
returns	O
an	O
equivalent	O
parallel	O
stream	O
(	O
either	O
mutating	O
the	O
current	O
stream	O
to	O
be	O
parallel	O
or	O
creating	O
a	O
new	O
stream	O
)	O
.	O
The	O
duplication	O
has	O
obvious	O
disadvantages	O
:	O
#	O
li	O
It	O
'	O
s	O
confusing	O
.	O
A	O
question	O
asks	O
whether	O
calling	O
both	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
necessary	O
to	O
be	O
sure	O
the	O
stream	O
is	O
parallel	O
,	O
given	O
that	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
may	O
return	O
a	O
sequential	O
stream	O
.	O
Why	O
does	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
exist	O
if	O
it	O
can	O
'	O
t	O
make	O
a	O
guarantee	O
?	O
The	O
other	O
way	O
around	O
is	O
also	O
confusing	O
-	O
-	O
if	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
returns	O
a	O
sequential	O
stream	O
,	O
there	O
'	O
s	O
probably	O
a	O
reason	O
(	O
e	O
.	O
g	O
.	O
,	O
an	O
inherently	O
sequential	O
data	O
structure	O
for	O
which	O
parallel	O
streams	O
are	O
a	O
performance	O
trap	O
)	O
;	O
what	O
should	O
Stream	B-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
do	O
for	O
such	O
a	O
stream	O
?	O
(	O
UnsupportedOperationException	B-api_mention
is	O
not	O
allowed	O
by	O
parallel	B-api_mention
(	I-api_mention
)	I-api_mention
'	O
s	O
specification	O
.	O
)	O
#	O
li	O
Adding	O
methods	O
to	O
an	O
interface	O
risks	O
conflicts	O
if	O
an	O
existing	O
implementation	O
has	O
a	O
similarly	O
-	O
named	O
method	O
with	O
an	O
incompatible	O
return	O
type	O
.	O
Adding	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
addition	O
to	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
doubles	O
the	O
risk	O
for	O
little	O
gain	O
.	O
(	O
Note	O
that	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
was	O
at	O
one	O
point	O
just	O
named	O
parallel	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
though	O
I	O
don	O
'	O
t	O
know	O
if	O
it	O
was	O
renamed	O
to	O
avoid	O
name	O
clashes	O
or	O
for	O
another	O
reason	O
.	O
)	O
Why	O
does	O
Collection	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
)	I-api_mention
exist	O
when	O
calling	O
Collection	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
)	I-api_mention
does	O
the	O
same	O
thing	O
?	O
Question	O
-	O
32475166	O
,	O
answer	O
-	O
32476850	O
When	O
you	O
think	O
about	O
the	O
type	O
of	O
the	O
operands	O
,	O
the	O
problem	O
becomes	O
more	O
apparent	O
:	O
this	O
.	O
method	O
!	O
=	O
null	O
?	O
this	O
.	O
method	O
:	O
this	O
.	O
constructor	O
has	O
as	O
type	O
the	O
most	O
specialized	O
common	O
type	O
of	O
both	O
the	O
operands	O
,	O
i	O
.	O
e	O
.	O
the	O
most	O
specialized	O
type	O
common	O
to	O
both	O
this	O
.	O
method	O
and	O
this	O
.	O
constructor	O
.	O
In	O
Java	O
7	O
this	O
is	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Member	O
,	O
however	O
the	O
Java	O
8	O
class	O
library	O
introduces	O
a	O
new	O
type	O
java	O
.	O
lang	O
.	O
reflect	O
.	O
Executable	O
which	O
is	O
more	O
specialized	O
than	O
the	O
generic	O
Member	O
.	O
Hence	O
with	O
a	O
Java	O
8	O
class	O
library	O
the	O
result	O
type	O
of	O
the	O
ternary	O
expression	O
is	O
Executable	O
rather	O
than	O
Member	O
.	O
Some	O
(	O
pre	O
-	O
release	O
)	O
versions	O
of	O
the	O
Java	O
8	O
compiler	O
seem	O
to	O
have	O
produced	O
an	O
explicit	O
reference	O
to	O
Executable	O
inside	O
generated	O
code	O
when	O
compiling	O
the	O
ternary	O
operator	O
.	O
This	O
would	O
trigger	O
a	O
class	O
load	O
,	O
and	O
thus	O
in	O
turn	O
a	O
ClassNotFoundException	O
at	O
runtime	O
when	O
running	O
with	O
a	O
class	O
library	O
<	O
JDK	O
8	O
,	O
because	O
Executable	O
only	O
exists	O
for	O
JDK	O
≥	O
8	O
.	O
As	O
noted	O
by	O
Tagir	O
Valeev	O
in	O
this	O
answer	O
,	O
this	O
is	O
actually	O
a	O
bug	O
in	O
pre	O
-	O
release	O
versions	O
of	O
JDK	O
8	O
and	O
has	O
since	O
been	O
fixed	O
,	O
so	O
both	O
the	O
if	O
-	O
else	O
workaround	O
and	O
the	O
explanatory	O
comment	O
are	O
now	O
obsolete	O
.	O
Additional	O
note	O
:	O
One	O
might	O
come	O
to	O
the	O
conclusion	O
that	O
this	O
compiler	O
bug	O
was	O
present	O
before	O
Java	O
8	O
.	O
However	O
,	O
the	O
byte	O
code	O
generated	O
for	O
the	O
ternary	O
by	O
OpenJDK	O
7	O
is	O
the	O
same	O
as	O
the	O
byte	O
code	O
generated	O
by	O
OpenJDK	O
8	O
.	O
In	O
fact	O
,	O
the	O
type	O
of	O
the	O
expression	O
goes	O
completely	O
unmentioned	O
at	O
runtime	O
,	O
the	O
code	O
is	O
really	O
only	O
test	O
,	O
branch	O
,	O
load	O
,	O
return	O
without	O
any	O
additional	O
checks	O
going	O
on	O
.	O
So	O
rest	O
assured	O
that	O
this	O
is	O
not	O
a	O
problem	O
(	O
anymore	O
)	O
and	O
indeed	O
seems	O
to	O
have	O
been	O
a	O
temporary	O
problem	O
during	O
development	O
of	O
Java	O
8	O
.	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33147762	O
I	O
found	O
this	O
explanation	O
:	O
#	O
blockquote	O
In	O
Java	O
6	O
,	O
if	O
you	O
use	O
the	O
API	O
as	O
:	O
#	O
pre	O
And	O
newCount	O
overflows	O
(	O
this	O
becomes	O
negative	O
)	O
,	O
if	O
(	O
args	O
)	O
will	O
return	O
false	O
and	O
you	O
may	O
mistakenly	O
assume	O
that	O
the	O
ArrayList	B-api_mention
was	O
increased	O
by	O
len	B-api_mention
.	O
Question	O
-	O
8098953	O
,	O
answer	O
-	O
8103083	O
The	O
first	O
thing	O
to	O
keep	O
in	O
mind	O
is	O
that	O
Java	O
ternary	O
operators	O
have	O
a	O
"	O
type	O
"	O
,	O
and	O
that	O
this	O
is	O
what	O
the	O
compiler	O
will	O
determine	O
and	O
consider	O
no	O
matter	O
what	O
the	O
actual	O
/	O
real	O
types	O
of	O
the	O
second	O
or	O
third	O
parameter	O
are	O
.	O
Depending	O
on	O
several	O
factors	O
the	O
ternary	O
operator	O
type	O
is	O
determined	O
in	O
different	O
ways	O
as	O
illustrated	O
in	O
the	O
Java	O
Language	O
Specification	O
15	O
.	O
26	O
In	O
the	O
question	O
above	O
we	O
should	O
consider	O
the	O
last	O
case	O
:	O
#	O
blockquote	O
This	O
is	O
by	O
far	O
the	O
most	O
complex	O
case	O
once	O
you	O
take	O
a	O
look	O
at	O
applying	O
capture	O
conversion	O
(	O
§	O
5	O
.	O
1	O
.	O
10	O
)	O
and	O
most	O
of	O
all	O
at	O
lub	O
(	O
T1	O
,	O
T2	O
)	O
.	O
In	O
plain	O
English	O
and	O
after	O
an	O
extreme	O
simplification	O
we	O
can	O
describe	O
the	O
process	O
as	O
calculating	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
(	O
yes	O
,	O
think	O
of	O
the	O
LCM	O
)	O
of	O
the	O
second	O
and	O
third	O
parameters	O
.	O
This	O
will	O
give	O
us	O
the	O
ternary	O
operator	O
"	O
type	O
"	O
.	O
Again	O
,	O
what	O
I	O
just	O
said	O
is	O
an	O
extreme	O
simplification	O
(	O
consider	O
classes	O
that	O
implement	O
multiple	O
common	O
interfaces	O
)	O
.	O
For	O
example	O
,	O
if	O
you	O
try	O
the	O
following	O
:	O
#	O
pre	O
You	O
'	O
ll	O
notice	O
that	O
resulting	O
type	O
of	O
the	O
conditional	O
expression	O
is	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
since	O
it	O
'	O
s	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
for	O
the	O
Timestamp	B-api_mention
/	O
Time	B-api_mention
pair	O
.	O
Since	O
null	O
can	O
be	O
autoboxed	O
to	O
anything	O
,	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
is	O
the	O
Integer	O
class	O
and	O
this	O
will	O
be	O
the	O
return	O
type	O
of	O
the	O
conditional	O
expression	O
(	O
ternary	O
operator	O
)	O
above	O
.	O
The	O
return	O
value	O
will	O
then	O
be	O
a	O
null	O
pointer	O
of	O
type	O
Integer	B-api_mention
and	O
that	O
is	O
what	O
will	O
be	O
returned	O
by	O
the	O
ternary	O
operator	O
.	O
At	O
runtime	O
,	O
when	O
the	O
Java	O
Virtual	O
Machine	O
unboxes	O
the	O
Integer	B-api_mention
a	O
NullPointerException	B-api_mention
is	O
thrown	O
.	O
This	O
happens	O
because	O
the	O
JVM	O
attempts	O
to	O
invoke	O
the	O
function	O
null	O
.	B-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
where	O
null	O
is	O
the	O
result	O
of	O
autoboxing	O
.	O
In	O
my	O
opinion	O
(	O
and	O
since	O
my	O
opinion	O
is	O
not	O
in	O
the	O
Java	O
Language	O
Specification	O
many	O
people	O
will	O
find	O
it	O
wrong	O
anyway	O
)	O
the	O
compiler	O
does	O
a	O
poor	O
job	O
in	O
evaluating	O
the	O
expression	O
in	O
your	O
question	O
.	O
Given	O
that	O
you	O
wrote	O
true	O
?	O
param1	O
:	O
param2	O
the	O
compiler	O
should	O
determine	O
right	O
away	O
that	O
the	O
first	O
parameter	O
-	O
null	O
-	O
will	O
be	O
returned	O
and	O
it	O
should	O
generate	O
a	O
compiler	O
error	O
.	O
This	O
is	O
somewhat	O
similar	O
to	O
when	O
you	O
write	O
while	O
(	O
args	O
)	O
{	O
}	O
etc	O
.	O
.	O
.	O
and	O
the	O
compiler	O
complains	O
about	O
the	O
code	O
underneath	O
the	O
loop	O
and	O
flags	O
it	O
with	O
Unreachable	O
Statements	O
.	O
Your	O
second	O
case	O
is	O
pretty	O
straightforward	O
and	O
this	O
answer	O
is	O
already	O
too	O
long	O
.	O
.	O
.	O
;	O
)	O
CORRECTION	O
:	O
After	O
another	O
analysis	O
I	O
believe	O
that	O
I	O
was	O
wrong	O
to	O
say	O
that	O
a	O
null	O
value	O
can	O
be	O
boxed	O
/	O
autoboxed	O
to	O
anything	O
.	O
Talking	O
about	O
the	O
class	O
Integer	O
,	O
explicit	O
boxing	O
consists	O
in	O
invoking	O
the	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
constructor	O
or	O
maybe	O
the	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
(	O
I	O
found	O
this	O
version	O
somewhere	O
)	O
.	O
The	O
former	O
would	O
throw	O
a	O
NumberFormatException	B-api_mention
(	O
and	O
this	O
does	O
not	O
happen	O
)	O
while	O
the	O
second	O
would	O
just	O
not	O
make	O
sense	O
since	O
an	O
int	O
cannot	O
be	O
null	O
.	O
.	O
.	O
Question	O
-	O
14809293	O
,	O
answer	O
-	O
14821488	O
The	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
has	O
already	O
been	O
mentioned	O
-	O
the	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
strangely	O
not	O
!	O
My	O
solution	O
would	O
also	O
be	O
to	O
use	O
the	O
list	O
from	O
the	O
outside	O
and	O
wrap	O
the	O
array	O
as	O
follows	O
:	O
#	O
pre	O
The	O
problem	O
with	O
copying	O
the	O
array	O
is	O
:	O
if	O
you	O
'	O
re	O
doing	O
it	O
every	O
time	O
you	O
access	O
the	O
code	O
and	O
the	O
array	O
is	O
big	O
,	O
you	O
'	O
ll	O
create	O
a	O
lot	O
of	O
work	O
for	O
the	O
garbage	O
collector	O
for	O
sure	O
.	O
So	O
the	O
copy	O
is	O
a	O
simple	O
but	O
really	O
bad	O
approach	O
-	O
I	O
'	O
d	O
say	O
"	O
cheap	O
"	O
,	O
but	O
memory	O
-	O
expensive	O
!	O
Especially	O
when	O
you	O
'	O
re	O
having	O
more	O
than	O
just	O
2	O
elements	O
.	O
If	O
you	O
look	O
at	O
the	O
source	O
code	O
of	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
and	O
Collections	B-api_mention
.	I-api_mention
unmodifiableList	I-api_mention
there	O
is	O
actually	O
not	O
much	O
created	O
.	O
The	O
first	O
just	O
wraps	O
the	O
array	O
without	O
copying	O
it	O
,	O
the	O
second	O
just	O
wraps	O
the	O
list	O
,	O
making	O
changes	O
to	O
it	O
unavailable	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
20358917	O
Very	O
simply	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
12552863	O
,	O
answer	O
-	O
18496449	O
The	O
first	O
style	O
is	O
the	O
one	O
suggested	O
by	O
Oracle	O
.	O
BufferedWriter	B-api_mention
doesn	O
'	O
t	O
throw	O
checked	O
exceptions	O
,	O
so	O
if	O
any	O
exception	O
is	O
thrown	O
,	O
the	O
program	O
is	O
not	O
expected	O
to	O
recover	O
from	O
it	O
,	O
making	O
resource	O
recover	O
mostly	O
moot	O
.	O
Mostly	O
because	O
it	O
could	O
happen	O
in	O
a	O
thread	O
,	O
with	O
the	O
thread	O
dieing	O
but	O
the	O
program	O
still	O
continuing	O
-	O
-	O
say	O
,	O
there	O
was	O
a	O
temporary	O
memory	O
outage	O
that	O
wasn	O
'	O
t	O
long	O
enough	O
to	O
seriously	O
impair	O
the	O
rest	O
of	O
the	O
program	O
.	O
It	O
'	O
s	O
a	O
rather	O
corner	O
case	O
,	O
though	O
,	O
and	O
if	O
it	O
happens	O
often	O
enough	O
to	O
make	O
resource	O
leak	O
a	O
problem	O
,	O
the	O
try	O
-	O
with	O
-	O
resources	O
is	O
the	O
least	O
of	O
your	O
problems	O
.	O
Question	O
-	O
12575990	O
,	O
answer	O
-	O
12576219	O
A	O
Java	O
Date	B-api_mention
is	O
a	O
container	O
for	O
the	O
number	O
of	O
milliseconds	O
since	O
January	O
1	O
,	O
1970	O
,	O
00	O
:	O
00	O
:	O
00	O
GMT	O
.	O
When	O
you	O
use	O
something	O
like	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
Java	O
uses	O
Date	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
print	O
the	O
contents	O
.	O
The	O
only	O
way	O
to	O
change	O
it	O
is	O
to	O
override	O
Date	O
and	O
provide	O
your	O
own	O
implementation	O
of	O
Date	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Now	O
before	O
you	O
fire	O
up	O
your	O
IDE	O
and	O
try	O
this	O
,	O
I	O
wouldn	O
'	O
t	O
;	O
it	O
will	O
only	O
complicate	O
matters	O
.	O
You	O
are	O
better	O
off	O
formatting	O
the	O
date	O
to	O
the	O
format	O
you	O
want	O
to	O
use	O
(	O
or	O
display	O
)	O
.	O
What	O
you	O
can	O
do	O
,	O
is	O
format	O
the	O
date	O
.	O
#	O
pre	O
These	O
are	O
actually	O
the	O
same	O
date	O
,	O
represented	O
differently	O
.	O
Question	O
-	O
18723596	O
String	B-api_mention
x	O
=	O
(	O
String	B-api_mention
)	O
null	O
;	O
Why	O
there	O
is	O
no	O
exception	O
in	O
this	O
statement	O
?	O
#	O
pre	O
It	O
prints	O
null	O
.	O
But	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
should	O
throw	O
a	O
null	O
pointer	O
exception	O
.	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
10827945	O
The	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
overloaded	O
to	O
accept	O
both	O
a	O
primitive	O
char	O
and	O
a	O
CharSequence	O
as	O
arguments	O
.	O
Now	O
as	O
far	O
as	O
the	O
performance	O
is	O
concerned	O
,	O
the	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
a	O
bit	O
faster	O
than	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
the	O
later	O
first	O
compiles	O
the	O
regex	O
pattern	O
and	O
then	O
matches	O
before	O
finally	O
replacing	O
whereas	O
the	O
former	O
simply	O
matches	O
for	O
the	O
provided	O
argument	O
and	O
replaces	O
.	O
Since	O
we	O
know	O
the	O
regex	O
pattern	O
matching	O
is	O
a	O
bit	O
more	O
complex	O
and	O
consequently	O
slower	O
,	O
then	O
preferring	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
over	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
suggested	O
whenever	O
possible	O
.	O
For	O
example	O
,	O
for	O
simple	O
substitutions	O
like	O
you	O
mentioned	O
,	O
it	O
is	O
better	O
to	O
use	O
:	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
instead	O
of	O
:	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
:	O
the	O
above	O
conversion	O
method	O
arguments	O
are	O
system	O
-	O
dependent	O
.	O
Question	O
-	O
22740464	O
,	O
answer	O
-	O
37436520	O
Just	O
do	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
where	O
identity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
static	O
import	O
of	O
Function	B-api_mention
.	I-api_mention
identity	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Concatenating	O
multiple	O
streams	O
into	O
one	O
stream	O
is	O
the	O
same	O
as	O
flattening	O
a	O
stream	O
.	O
However	O
,	O
unfortunately	O
,	O
for	O
some	O
reason	O
there	O
is	O
no	O
flatten	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
Stream	B-api_mention
,	O
so	O
you	O
have	O
to	O
use	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
the	O
identity	O
function	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28465634	O
I	O
think	O
there	O
are	O
very	O
few	O
differences	O
between	O
the	O
two	O
when	O
you	O
look	O
closely	O
enough	O
.	O
At	O
it	O
'	O
s	O
face	O
,	O
an	O
IEnumerable	O
does	O
appear	O
to	O
be	O
a	O
reusable	O
construct	O
:	O
#	O
pre	O
However	O
,	O
the	O
compiler	O
is	O
actually	O
doing	O
a	O
little	O
bit	O
of	O
work	O
to	O
help	O
us	O
out	O
;	O
it	O
generates	O
the	O
following	O
code	O
:	O
#	O
pre	O
Each	O
time	O
you	O
would	O
actually	O
iterate	O
over	O
the	O
enumerable	O
,	O
the	O
compiler	O
creates	O
an	O
enumerator	O
.	O
The	O
enumerator	O
is	O
not	O
reusable	O
;	O
further	O
calls	O
to	O
MoveNext	O
will	O
just	O
return	O
false	O
,	O
and	O
there	O
is	O
no	O
way	O
to	O
reset	O
it	O
to	O
the	O
beginning	O
.	O
If	O
you	O
want	O
to	O
iterate	O
over	O
the	O
numbers	O
again	O
,	O
you	O
will	O
need	O
to	O
create	O
another	O
enumerator	O
instance	O
.	O
To	O
better	O
illustrate	O
that	O
the	O
IEnumerable	O
has	O
(	O
can	O
have	O
)	O
the	O
same	O
'	O
feature	O
'	O
as	O
a	O
Java	O
Stream	B-api_mention
,	O
consider	O
a	O
enumerable	O
whose	O
source	O
of	O
the	O
numbers	O
is	O
not	O
a	O
static	O
collection	O
.	O
For	O
example	O
,	O
we	O
can	O
create	O
an	O
enumerable	O
object	O
which	O
generates	O
a	O
sequence	O
of	O
5	O
random	O
numbers	O
:	O
#	O
pre	O
Now	O
we	O
have	O
very	O
similar	O
code	O
to	O
the	O
previous	O
array	O
-	O
based	O
enumerable	O
,	O
but	O
with	O
a	O
second	O
iteration	O
over	O
numbers	O
:	O
#	O
pre	O
The	O
second	O
time	O
we	O
iterate	O
over	O
numbers	O
we	O
will	O
get	O
a	O
different	O
sequence	O
of	O
numbers	O
,	O
which	O
isn	O
'	O
t	O
reusable	O
in	O
the	O
same	O
sense	O
.	O
Or	O
,	O
we	O
could	O
have	O
written	O
the	O
RandomNumberStream	O
to	O
thrown	O
an	O
exception	O
if	O
you	O
try	O
to	O
iterate	O
over	O
it	O
multiple	O
times	O
,	O
making	O
the	O
enumerable	O
actually	O
unusable	O
(	O
like	O
a	O
Java	O
Stream	B-api_mention
)	O
.	O
Also	O
,	O
what	O
does	O
your	O
enumerable	O
-	O
based	O
quick	O
sort	O
mean	O
when	O
applied	O
to	O
a	O
RandomNumberStream	O
?	O
Conclusion	O
So	O
,	O
the	O
biggest	O
difference	O
is	O
that	O
.	O
NET	O
allows	O
you	O
to	O
reuse	O
an	O
IEnumerable	O
by	O
implicitly	O
creating	O
a	O
new	O
IEnumerator	O
in	O
the	O
background	O
whenever	O
it	O
would	O
need	O
to	O
access	O
elements	O
in	O
the	O
sequence	O
.	O
This	O
implicit	O
behavior	O
is	O
often	O
useful	O
(	O
and	O
'	O
powerful	O
'	O
as	O
you	O
state	O
)	O
,	O
because	O
we	O
can	O
repeatedly	O
iterate	O
over	O
a	O
collection	O
.	O
But	O
sometimes	O
,	O
this	O
implicit	O
behavior	O
can	O
actually	O
cause	O
problems	O
.	O
If	O
your	O
data	O
source	O
is	O
not	O
static	O
,	O
or	O
is	O
costly	O
to	O
access	O
(	O
like	O
a	O
database	O
or	O
web	O
site	O
)	O
,	O
then	O
a	O
lot	O
of	O
assumptions	O
about	O
IEnumerable	O
have	O
to	O
be	O
discarded	O
;	O
reuse	O
is	O
not	O
that	O
straight	O
-	O
forward	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
15962949	O
If	O
you	O
want	O
to	O
make	O
a	O
copy	O
of	O
:	O
int	O
[	O
]	O
a	O
=	O
{	O
1	O
,	O
2	O
,	O
3	O
,	O
4	O
,	O
5	O
}	O
;	O
This	O
is	O
the	O
way	O
to	O
go	O
:	O
int	O
[	O
]	O
b	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
may	O
be	O
faster	O
than	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
small	O
arrays	O
.	O
Both	O
copy	O
elements	O
equally	O
fast	O
but	O
clone	B-api_mention
(	I-api_mention
)	I-api_mention
returns	O
Object	B-api_mention
so	O
the	O
compiler	O
has	O
to	O
insert	O
an	O
implicit	O
cast	O
to	O
int	O
[	O
]	O
.	O
You	O
can	O
see	O
it	O
in	O
the	O
bytecode	O
,	O
something	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
20375176	O
,	O
answer	O
-	O
20375622	O
A	O
parallel	O
stream	O
has	O
a	O
much	O
higher	O
overhead	O
compared	O
to	O
a	O
sequential	O
one	O
.	O
Coordinating	O
the	O
threads	O
takes	O
a	O
significant	O
amount	O
of	O
time	O
.	O
I	O
would	O
use	O
sequential	O
streams	O
by	O
default	O
and	O
only	O
consider	O
parallel	O
ones	O
if	O
#	O
li	O
I	O
have	O
a	O
massive	O
amount	O
of	O
items	O
to	O
process	O
(	O
or	O
the	O
processing	O
of	O
each	O
item	O
takes	O
time	O
and	O
is	O
parallelizable	O
)	O
#	O
li	O
I	O
have	O
a	O
performance	O
problem	O
in	O
the	O
first	O
place	O
#	O
li	O
I	O
don	O
'	O
t	O
already	O
run	O
the	O
process	O
in	O
a	O
multi	O
-	O
thread	O
environment	O
(	O
for	O
example	O
:	O
in	O
a	O
web	O
container	O
,	O
if	O
I	O
already	O
have	O
many	O
requests	O
to	O
process	O
in	O
parallel	O
,	O
adding	O
an	O
additional	O
layer	O
of	O
parallelism	O
inside	O
each	O
request	O
could	O
have	O
more	O
negative	O
than	O
positive	O
effects	O
)	O
In	O
your	O
example	O
,	O
the	O
performance	O
will	O
anyway	O
be	O
driven	O
by	O
the	O
synchronized	O
access	O
to	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
making	O
this	O
process	O
parallel	O
will	O
have	O
no	O
effect	O
,	O
or	O
even	O
a	O
negative	O
one	O
.	O
Moreover	O
,	O
remember	O
that	O
parallel	O
streams	O
don	O
'	O
t	O
magically	O
solve	O
all	O
the	O
synchronization	O
problems	O
.	O
If	O
a	O
shared	O
resource	O
is	O
used	O
by	O
the	O
predicates	O
and	O
functions	O
used	O
in	O
the	O
process	O
,	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
that	O
everything	O
is	O
thread	O
-	O
safe	O
.	O
In	O
particular	O
,	O
side	O
effects	O
are	O
tings	O
you	O
really	O
have	O
to	O
worry	O
about	O
if	O
you	O
go	O
parallel	O
.	O
In	O
any	O
case	O
,	O
measure	O
,	O
don	O
'	O
t	O
guess	O
!	O
Only	O
a	O
measurement	O
will	O
tell	O
you	O
if	O
the	O
parallelism	O
is	O
worth	O
it	O
or	O
not	O
.	O
Question	O
-	O
27482579	O
How	O
is	O
the	O
compiler	O
not	O
complaining	O
when	O
I	O
write	O
the	O
following	O
code	O
?	O
#	O
pre	O
Even	O
though	O
it	O
is	O
an	O
instance	O
of	O
the	O
same	O
class	O
in	O
which	O
testPrivate	O
is	O
written	O
,	O
shouldn	O
'	O
t	O
it	O
give	O
a	O
compilation	O
error	O
at	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
After	O
all	O
,	O
I	O
am	O
trying	O
to	O
access	O
a	O
private	O
variable	O
directly	O
.	O
The	O
code	O
even	O
runs	O
fine	O
.	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
36771568	O
In	O
Eclipse	O
,	O
Go	O
to	O
your	O
class	O
,	O
Right	O
click	O
-	O
>	O
source	O
-	O
>	O
Generate	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
;	O
It	O
will	O
override	O
the	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
and	O
print	O
the	O
object	O
of	O
that	O
class	O
.	O
Question	O
-	O
19757300	O
,	O
answer	O
-	O
19759653	O
You	O
can	O
also	O
propagate	O
your	O
static	O
pain	O
with	O
lambdas	O
,	O
so	O
the	O
whole	O
thing	O
looks	O
readable	O
:	O
s	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
propagate	O
here	O
receives	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
concurrent	I-api_mention
.	I-api_mention
Callable	I-api_mention
as	O
a	O
parameter	O
and	O
converts	O
any	O
exception	O
caught	O
during	O
the	O
call	O
into	O
RuntimeException	B-api_mention
.	O
There	O
is	O
a	O
similar	O
conversion	O
method	O
Throwables	B-api_mention
#	I-api_mention
propagate	I-api_mention
(	I-api_mention
Throwable	I-api_mention
)	I-api_mention
in	O
Guava	O
.	O
This	O
method	O
seems	O
being	O
essential	O
for	O
lambda	O
method	O
chaining	O
,	O
so	O
I	O
hope	O
one	O
day	O
it	O
will	O
be	O
added	O
to	O
one	O
of	O
the	O
popular	O
libs	O
or	O
this	O
propagating	O
behavior	O
would	O
be	O
by	O
default	O
.	O
#	O
pre	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
30270403	O
There	O
is	O
a	O
function	O
called	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
that	O
can	O
remove	O
all	O
whitespaces	O
by	O
replacing	O
them	O
with	O
whatever	O
you	O
want	O
.	O
As	O
an	O
example	O
#	O
pre	O
will	O
give	O
you	O
:	O
First	O
:	O
15	O
.	O
94	O
,	O
Second	O
:	O
16	O
.	O
01	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
35931153	O
If	O
you	O
directly	O
call	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
not	O
using	O
multi	O
-	O
threading	O
feature	O
since	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
executed	O
as	O
part	O
of	O
caller	O
thread	O
.	O
If	O
you	O
call	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
Thread	B-api_mention
,	O
the	O
Java	O
Virtual	O
Machine	O
will	O
call	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
and	O
two	O
threads	O
will	O
run	O
concurrently	O
-	O
Current	O
Thread	B-api_mention
(	O
main	O
(	O
args	O
)	O
in	O
your	O
example	O
)	O
and	O
Other	O
Thread	B-api_mention
(	O
Runnable	B-api_mention
r1	O
in	O
your	O
example	O
)	O
.	O
Have	O
a	O
look	O
at	O
source	O
code	O
of	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
Thread	B-api_mention
class	O
#	O
pre	O
In	O
above	O
code	O
,	O
you	O
can	O
'	O
t	O
see	O
invocation	O
to	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
private	O
native	O
void	O
start0	O
(	O
args	O
)	O
is	O
responsible	O
for	O
calling	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
JVM	O
executes	O
this	O
native	O
method	O
.	O
Question	O
-	O
8189466	O
Note	O
:	O
I	O
am	O
aware	O
of	O
the	O
Iterator	B-api_mention
#	I-api_mention
remove	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
In	O
the	O
following	O
code	O
sample	O
,	O
I	O
don	O
'	O
t	O
understand	O
why	O
the	O
List	B-api_mention
.	I-api_mention
remove	I-api_mention
in	O
main	O
method	O
throws	O
ConcurrentModificationException	B-api_mention
but	O
not	O
in	O
the	O
remove	B-api_mention
method	O
.	O
#	O
pre	O
Question	O
-	O
30217236	O
,	O
answer	O
-	O
30217518	O
Presumably	O
,	O
you	O
are	O
not	O
calling	O
your	O
generic	O
method	O
in	O
a	O
generic	O
fashion	O
,	O
so	O
it	O
'	O
s	O
treated	O
like	O
a	O
call	O
to	O
x	O
(	O
args	O
)	O
.	O
In	O
this	O
example	O
:	O
#	O
pre	O
The	O
first	O
call	O
to	O
x	O
is	O
not	O
made	O
generically	O
so	O
it	O
compiles	O
.	O
The	O
second	O
call	O
equates	O
T	O
to	O
String	B-api_mention
,	O
so	O
it	O
fails	O
because	O
1	O
and	O
2	O
are	O
not	O
Strings	O
.	O
The	O
third	O
call	O
compiles	O
because	O
it	O
properly	O
passes	O
in	O
Strings	O
.	O
Question	O
-	O
31696485	O
,	O
answer	O
-	O
31696584	O
Your	O
question	O
is	O
based	O
on	O
assumption	O
that	O
the	O
code	O
which	O
may	O
throw	O
NullPointerException	B-api_mention
is	O
worse	O
than	O
the	O
code	O
which	O
may	O
not	O
.	O
This	O
assumption	O
is	O
wrong	O
.	O
If	O
you	O
expect	O
that	O
your	O
foobar	O
is	O
never	O
null	O
due	O
to	O
the	O
program	O
logic	O
,	O
it	O
'	O
s	O
much	O
better	O
to	O
use	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
you	O
will	O
see	O
a	O
NullPointerException	B-api_mention
which	O
will	O
indicate	O
that	O
your	O
program	O
has	O
a	O
bug	O
.	O
If	O
you	O
use	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
the	O
foobar	O
happens	O
to	O
be	O
null	O
due	O
to	O
the	O
bug	O
,	O
then	O
your	O
program	O
will	O
silently	O
continue	O
working	O
incorrectly	O
,	O
which	O
may	O
be	O
a	O
bigger	O
disaster	O
.	O
This	O
way	O
an	O
error	O
may	O
occur	O
much	O
later	O
and	O
it	O
would	O
be	O
much	O
harder	O
to	O
understand	O
at	O
which	O
point	O
it	O
went	O
wrong	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
16229988	O
My	O
solution	O
is	O
to	O
do	O
a	O
"	O
extract	O
method	O
"	O
refactoring	O
,	O
as	O
following	O
:	O
#	O
pre	O
printToFile	B-api_mention
can	O
be	O
written	O
either	O
#	O
pre	O
or	O
#	O
pre	O
For	O
class	O
lib	O
designers	O
,	O
I	O
will	O
suggest	O
them	O
extend	O
the	O
AutoClosable	B-api_mention
interface	O
with	O
an	O
additional	O
method	O
to	O
suppress	O
the	O
close	O
.	O
In	O
this	O
case	O
we	O
can	O
then	O
manually	O
control	O
the	O
close	O
behavior	O
.	O
For	O
language	O
designers	O
,	O
the	O
lesson	O
is	O
that	O
adding	O
a	O
new	O
feature	O
could	O
mean	O
adding	O
a	O
lot	O
others	O
.	O
In	O
this	O
Java	O
case	O
,	O
obviously	O
ARM	O
feature	O
will	O
work	O
better	O
with	O
a	O
resource	O
ownership	O
transfer	O
mechanism	O
.	O
UPDATE	O
Originally	O
the	O
code	O
above	O
requires	O
@	O
SuppressWarning	O
since	O
the	O
BufferedWriter	B-api_mention
inside	O
the	O
function	O
requires	O
close	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
As	O
suggested	O
by	O
a	O
comment	O
,	O
if	O
flush	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
be	O
called	O
before	O
close	O
the	O
writer	O
,	O
we	O
need	O
to	O
do	O
so	O
before	O
any	O
return	B-api_mention
(	O
implicit	O
or	O
explicit	O
)	O
statements	O
inside	O
the	O
try	O
block	O
.	O
There	O
is	O
currently	O
no	O
way	O
to	O
ensure	O
the	O
caller	O
doing	O
this	O
I	O
think	O
,	O
so	O
this	O
must	O
be	O
documented	O
for	O
writeFileWriter	B-api_mention
.	O
UPDATE	O
AGAIN	O
The	O
above	O
update	O
makes	O
@	O
SuppressWarning	O
unnecessary	O
since	O
it	O
require	O
the	O
function	O
to	O
return	O
the	O
resource	O
to	O
the	O
caller	O
,	O
so	O
itself	O
does	O
not	O
necessary	O
being	O
closed	O
.	O
Unfortunately	O
,	O
this	O
pull	O
us	O
back	O
to	O
the	O
beginning	O
of	O
the	O
situation	O
:	O
the	O
warning	O
is	O
now	O
moved	O
back	O
to	O
the	O
caller	O
side	O
.	O
So	O
to	O
properly	O
solve	O
this	O
,	O
we	O
need	O
a	O
customised	O
AutoClosable	B-api_mention
that	O
whenever	O
it	O
closes	O
,	O
the	O
underline	O
BufferedWriter	B-api_mention
shall	O
be	O
flush	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
ed	O
.	O
Actually	O
,	O
this	O
shows	O
us	O
another	O
way	O
to	O
bypass	O
the	O
warning	O
,	O
since	O
the	O
BufferWriter	B-api_mention
is	O
never	O
closed	O
in	O
either	O
way	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
32302353	O
To	O
concur	O
with	O
earlier	O
comments	O
:	O
simplest	O
is	O
(	O
2	O
)	O
to	O
use	O
Closeable	B-api_mention
resources	O
and	O
declare	O
them	O
in	O
order	O
in	O
the	O
try	O
-	O
with	O
-	O
resources	O
clause	O
.	O
If	O
you	O
only	O
have	O
AutoCloseable	B-api_mention
,	O
you	O
can	O
wrap	O
them	O
in	O
another	O
(	O
nested	O
)	O
class	O
that	O
just	O
checks	O
that	O
close	B-api_mention
is	O
only	O
called	O
once	O
(	O
Facade	O
Pattern	O
)	O
,	O
e	O
.	O
g	O
.	O
by	O
having	O
private	O
bool	O
isClosed	O
;	O
.	O
In	O
practice	O
even	O
Oracle	O
just	O
(	O
1	O
)	O
chains	O
the	O
constructors	O
and	O
doesn	O
'	O
t	O
correctly	O
handle	O
exceptions	O
partway	O
through	O
the	O
chain	O
.	O
Alternatively	O
,	O
you	O
can	O
manually	O
create	O
a	O
chained	O
resource	O
,	O
using	O
a	O
static	O
factory	O
method	O
;	O
this	O
encapsulates	O
the	O
chain	O
,	O
and	O
handle	O
cleanup	O
if	O
it	O
fails	O
part	O
-	O
way	O
:	O
#	O
pre	O
The	O
complexity	O
comes	O
from	O
handling	O
multiple	O
exceptions	O
;	O
otherwise	O
it	O
'	O
s	O
just	O
"	O
close	O
resources	O
that	O
you	O
'	O
ve	O
acquired	O
so	O
far	O
"	O
.	O
A	O
common	O
practice	O
seems	O
to	O
be	O
to	O
first	O
initialize	O
the	O
variable	O
that	O
holds	O
the	O
object	O
that	O
holds	O
the	O
resource	O
to	O
null	O
(	O
here	O
fileWriter	B-api_mention
)	O
,	O
and	O
then	O
include	O
a	O
null	O
check	O
in	O
the	O
cleanup	O
,	O
but	O
that	O
seems	O
unnecessary	O
:	O
if	O
the	O
constructor	O
fails	O
,	O
there	O
'	O
s	O
nothing	O
to	O
clean	O
up	O
,	O
so	O
we	O
can	O
just	O
let	O
that	O
exception	O
propagate	O
,	O
which	O
simplifies	O
the	O
code	O
a	O
little	O
.	O
You	O
could	O
probably	O
do	O
this	O
generically	O
:	O
#	O
pre	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
22269778	O
There	O
actually	O
is	O
a	O
trick	O
how	O
to	O
execute	O
a	O
parallel	O
operation	O
in	O
a	O
specific	O
fork	O
-	O
join	O
pool	O
.	O
If	O
you	O
execute	O
it	O
as	O
a	O
task	O
in	O
a	O
fork	O
-	O
join	O
pool	O
,	O
it	O
stays	O
there	O
and	O
does	O
not	O
use	O
the	O
common	O
one	O
.	O
#	O
pre	O
The	O
trick	O
is	O
based	O
on	O
ForkJoinTask	B-api_mention
.	I-api_mention
fork	I-api_mention
which	O
specifies	O
:	O
"	O
Arranges	O
to	O
asynchronously	O
execute	O
this	O
task	O
in	O
the	O
pool	O
the	O
current	O
task	O
is	O
running	O
in	O
,	O
if	O
applicable	O
,	O
or	O
using	O
the	O
ForkJoinPool	B-api_mention
.	I-api_mention
commonPool	I-api_mention
(	I-api_mention
)	I-api_mention
if	O
not	O
inForkJoinPool	B-api_mention
(	I-api_mention
)	I-api_mention
"	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
15656208	O
This	O
is	O
favorite	O
interview	O
question	O
.	O
Interviewer	O
tries	O
to	O
find	O
out	O
here	O
,	O
how	O
much	O
you	O
understand	O
about	O
behavior	O
of	O
objects	O
with	O
respect	O
to	O
constructors	O
,	O
methods	O
,	O
class	O
variables	O
(	O
static	O
variables	O
)	O
,	O
instance	O
variables	O
.	O
#	O
pre	O
In	O
above	O
case	O
we	O
have	O
defined	O
Test	O
constructor	O
and	O
setFoo	O
method	O
.	O
About	O
constructor	O
:	O
Constructor	O
can	O
be	O
invoked	O
only	O
one	O
time	O
per	O
object	O
creation	O
by	O
using	O
new	O
keyword	O
.	O
Programmer	O
cannot	O
invoke	O
constructor	O
many	O
times	O
because	O
constructor	O
are	O
designed	O
so	O
.	O
About	O
method	O
:	O
Method	O
can	O
be	O
invoked	O
as	O
many	O
time	O
as	O
programmer	O
wants	O
and	O
compiler	O
knows	O
it	O
programmer	O
may	O
invoke	O
method	O
zero	O
or	O
multiple	O
time	O
.	O
Scenario	O
1	O
private	O
final	O
List	B-api_mention
foo	O
;	O
/	O
/	O
1	O
foo	O
is	O
an	O
instance	O
variable	O
.	O
When	O
we	O
create	O
Test	O
class	O
'	O
object	O
then	O
instance	O
variable	O
foo	O
will	O
be	O
copied	O
inside	O
object	O
of	O
Test	O
class	O
.	O
If	O
we	O
assign	O
foo	O
inside	O
constructor	O
then	O
compiler	O
know	O
that	O
Constructor	O
will	O
be	O
invoked	O
only	O
one	O
time	O
.	O
so	O
there	O
is	O
no	O
problem	O
to	O
assign	O
it	O
inside	O
constructor	O
.	O
If	O
we	O
assign	O
foo	O
inside	O
method	O
then	O
compiler	O
knows	O
that	O
method	O
may	O
be	O
invoked	O
multiple	O
time	O
.	O
So	O
value	O
will	O
have	O
to	O
be	O
changed	O
multiple	O
time	O
which	O
is	O
not	O
allowed	O
for	O
final	O
variable	O
.	O
You	O
can	O
assign	O
value	O
to	O
the	O
final	O
variable	O
only	O
one	O
time	O
.	O
So	O
compiler	O
decides	O
constructor	O
is	O
good	O
choice	O
!	O
Scenario	O
2	O
private	O
static	O
final	O
List	B-api_mention
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
foo	O
is	O
now	O
static	O
variable	O
.	O
When	O
we	O
create	O
object	O
of	O
Test	O
class	O
then	O
foo	O
will	O
not	O
be	O
copied	O
to	O
the	O
object	O
of	O
Test	O
class	O
because	O
foo	O
is	O
static	O
.	O
Now	O
foo	O
is	O
not	O
the	O
property	O
of	O
each	O
object	O
.	O
This	O
is	O
the	O
property	O
of	O
Test	O
class	O
.	O
But	O
foo	O
can	O
be	O
seen	O
by	O
many	O
objects	O
and	O
if	O
every	O
object	O
which	O
is	O
created	O
by	O
using	O
new	O
keyword	O
which	O
ultimately	O
invoke	O
Test	O
constructor	O
then	O
value	O
will	O
be	O
changed	O
at	O
the	O
time	O
of	O
multiple	O
object	O
creation	O
(	O
Remember	O
static	O
foo	O
is	O
not	O
copied	O
in	O
every	O
object	O
now	O
but	O
is	O
shared	O
between	O
multiple	O
objects	O
.	O
)	O
Scenario	O
3	O
t	O
.	O
foo	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
Modification	O
-	O
2	O
Above	O
Modification	O
-	O
2	O
is	O
from	O
your	O
question	O
.	O
In	O
above	O
case	O
you	O
are	O
not	O
changing	O
first	O
referenced	O
object	O
but	O
you	O
are	O
adding	O
contents	O
inside	O
foo	O
which	O
is	O
allowed	O
.	O
Compiler	O
complains	O
if	O
you	O
try	O
to	O
assign	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
object	O
to	O
the	O
foo	O
reference	O
variable	O
.	O
Rule	O
is	O
that	O
if	O
you	O
have	O
initialized	O
object	O
to	O
final	O
reference	O
variable	O
then	O
you	O
cannot	O
change	O
it	O
to	O
refer	O
different	O
ArrayList	B-api_mention
object	O
.	O
(	O
in	O
this	O
case	O
ArrayList	B-api_mention
)	O
final	O
class	O
cannot	O
be	O
subclassed	O
final	O
methods	O
cannot	O
be	O
overridden	O
.	O
(	O
This	O
method	O
is	O
in	O
superclass	O
)	O
final	O
methods	O
can	O
override	O
.	O
(	O
Read	O
this	O
in	O
grammatical	O
way	O
.	O
This	O
method	O
is	O
in	O
subclass	O
)	O
Question	O
-	O
27747562	O
,	O
answer	O
-	O
27747702	O
A	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
could	O
very	O
well	O
be	O
an	O
Item	O
.	O
See	O
for	O
example	O
:	O
#	O
pre	O
A	O
cast	O
tells	O
the	O
compiler	O
:	O
"	O
I	O
know	O
you	O
can	O
'	O
t	O
be	O
sure	O
that	O
this	O
is	O
a	O
object	O
of	O
type	O
Item	O
,	O
but	O
I	O
know	O
better	O
than	O
you	O
,	O
so	O
please	O
compile	O
"	O
.	O
The	O
compiler	O
will	O
only	O
refuse	O
to	O
compile	O
that	O
if	O
it	O
'	O
s	O
impossible	O
for	O
the	O
returned	O
object	O
to	O
be	O
an	O
instance	O
of	O
Item	B-api_mention
(	O
like	O
,	O
for	O
example	O
,	O
Integer	B-api_mention
can	O
'	O
t	O
ever	O
be	O
a	O
String	B-api_mention
)	O
At	O
runtime	O
,	O
the	O
type	O
of	O
the	O
actual	O
object	O
returned	O
by	O
the	O
method	O
will	O
be	O
checked	O
,	O
and	O
if	O
it	O
'	O
s	O
not	O
actually	O
an	O
object	O
of	O
type	O
Item	O
,	O
you	O
'	O
ll	O
get	O
a	O
ClassCastException	O
.	O
Question	O
-	O
30522698	O
The	O
problem	O
I	O
would	O
like	O
to	O
be	O
able	O
to	O
override	O
my	O
apps	O
resources	O
such	O
as	O
R	O
.	O
colour	O
.	O
brand	O
_	O
colour	O
or	O
R	O
.	O
drawable	O
.	O
ic	O
_	O
action	O
_	O
start	O
at	O
runtime	O
.	O
My	O
application	O
connects	O
to	O
a	O
CMS	O
system	O
that	O
will	O
provide	O
branding	O
colours	O
and	O
images	O
.	O
Once	O
the	O
app	O
has	O
downloaded	O
the	O
CMS	O
data	O
it	O
needs	O
to	O
be	O
able	O
to	O
re	O
-	O
skin	O
itself	O
.	O
I	O
know	O
what	O
you	O
are	O
about	O
to	O
say	O
-	O
overriding	O
resources	O
at	O
runtime	O
is	O
not	O
possible	O
.	O
Except	O
that	O
it	O
kinda	O
is	O
.	O
In	O
particular	O
I	O
have	O
found	O
this	O
Bachelor	O
Thesis	O
from	O
2012	O
which	O
explains	O
the	O
basic	O
concept	O
-	O
The	O
Activity	O
class	O
in	O
android	O
extends	O
ContextWrapper	O
,	O
which	O
contains	O
the	O
attachBaseContext	O
method	O
.	O
You	O
can	O
override	O
attachBaseContext	O
to	O
wrap	O
the	O
Context	O
with	O
your	O
own	O
custom	O
class	O
which	O
overrides	O
methods	O
such	O
as	O
getColor	O
and	O
getDrawable	O
.	O
Your	O
own	O
implementation	O
of	O
getColor	O
could	O
look	O
the	O
colour	O
up	O
however	O
it	O
wanted	O
.	O
The	O
Calligraphy	O
library	O
uses	O
a	O
similar	O
approach	O
to	O
inject	O
a	O
custom	O
LayoutInflator	O
which	O
can	O
deal	O
with	O
loading	O
custom	O
fonts	O
.	O
The	O
code	O
I	O
have	O
created	O
a	O
simple	O
Activity	O
which	O
uses	O
this	O
approach	O
to	O
override	O
the	O
loading	O
of	O
a	O
colour	O
.	O
#	O
pre	O
The	O
problem	O
is	O
,	O
it	O
doesn	O
'	O
t	O
work	O
!	O
The	O
logging	O
shows	O
calls	O
to	O
load	O
resources	O
such	O
as	O
layout	O
/	O
activity	O
_	O
main	O
and	O
mipmap	O
/	O
ic	O
_	O
launcher	O
however	O
color	O
/	O
theme	O
_	O
colour	O
is	O
never	O
loaded	O
.	O
It	O
seems	O
that	O
the	O
context	O
is	O
being	O
used	O
to	O
create	O
the	O
window	O
and	O
action	O
bar	O
,	O
but	O
not	O
the	O
activity	O
'	O
s	O
content	O
view	O
.	O
My	O
questions	O
is	O
-	O
Where	O
does	O
the	O
layout	O
inflator	O
load	O
resources	O
from	O
,	O
if	O
not	O
the	O
activities	O
context	O
?	O
I	O
would	O
also	O
like	O
to	O
know	O
-	O
Is	O
there	O
a	O
workable	O
way	O
to	O
override	O
the	O
loading	O
of	O
colours	O
and	O
drawables	O
at	O
runtime	O
?	O
A	O
word	O
about	O
alternative	O
approaches	O
I	O
know	O
its	O
possible	O
to	O
theme	O
an	O
app	O
from	O
CMS	O
data	O
other	O
ways	O
-	O
for	O
example	O
we	O
could	O
create	O
a	O
method	O
getCMSColour	O
(	O
args	O
)	O
then	O
inside	O
our	O
onCreate	O
(	O
args	O
)	O
we	O
have	O
a	O
bunch	O
of	O
code	O
along	O
the	O
lines	O
of	O
:	O
myTextView	O
.	O
setTextColour	O
(	O
args	O
)	O
A	O
similar	O
approach	O
could	O
be	O
taken	O
for	O
drawables	O
,	O
strings	O
,	O
etc	O
.	O
However	O
this	O
would	O
result	O
in	O
a	O
large	O
amount	O
of	O
boilerplate	O
code	O
-	O
all	O
of	O
which	O
needs	O
maintaining	O
.	O
When	O
modifying	O
the	O
UI	O
it	O
would	O
be	O
easy	O
to	O
forget	O
to	O
set	O
the	O
colour	O
on	O
a	O
particular	O
view	O
.	O
Wrapping	O
the	O
Context	O
to	O
return	O
our	O
own	O
custom	O
values	O
is	O
'	O
cleaner	O
'	O
and	O
less	O
prone	O
to	O
breakage	O
.	O
I	O
would	O
like	O
to	O
understand	O
why	O
it	O
doesn	O
'	O
t	O
work	O
,	O
before	O
exploring	O
alternative	O
approaches	O
.	O
Question	O
-	O
4772425	O
,	O
answer	O
-	O
4772461	O
Use	O
LocalDateTime	B-api_mention
#	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
or	O
ZonedDateTime	B-api_mention
#	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
if	O
the	O
string	O
happens	O
to	O
contain	O
a	O
time	O
zone	O
part	O
)	O
to	O
parse	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
into	O
a	O
LocalDateTime	B-api_mention
.	O
#	O
pre	O
Use	O
LocalDateTime	B-api_mention
#	I-api_mention
format	I-api_mention
(	I-api_mention
)	I-api_mention
(	O
or	O
ZonedDateTime	B-api_mention
#	I-api_mention
format	I-api_mention
(	I-api_mention
)	I-api_mention
)	O
to	O
format	O
a	O
LocalDateTime	B-api_mention
into	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
.	O
#	O
pre	O
Or	O
,	O
when	O
you	O
'	O
re	O
not	O
on	O
Java	O
8	O
yet	O
,	O
use	O
SimpleDateFormat	B-api_mention
#	I-api_mention
parse	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
parse	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
into	O
a	O
Date	B-api_mention
.	O
#	O
pre	O
Use	O
SimpleDateFormat	B-api_mention
#	I-api_mention
format	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
format	O
a	O
Date	B-api_mention
into	O
a	O
String	B-api_mention
in	O
a	O
certain	O
pattern	O
.	O
#	O
pre	O
See	O
also	O
:	O
#	O
li	O
Java	O
string	O
to	O
date	O
conversion	O
Update	O
:	O
as	O
per	O
your	O
failed	O
attempt	O
:	O
the	O
patterns	O
are	O
case	O
sensitive	O
.	O
Read	O
the	O
java	B-api_mention
.	I-api_mention
text	I-api_mention
.	I-api_mention
SimpleDateFormat	I-api_mention
javadoc	O
what	O
the	O
individual	O
parts	O
stands	O
for	O
.	O
So	O
stands	O
for	O
example	O
M	O
for	O
months	O
and	O
m	O
for	O
minutes	O
.	O
Also	O
,	O
years	O
exist	O
of	O
four	O
digits	O
yyyy	O
,	O
not	O
five	O
yyyyy	O
.	O
Look	O
closer	O
at	O
the	O
code	O
snippets	O
I	O
posted	O
here	O
above	O
.	O
Question	O
-	O
5455794	O
I	O
have	O
a	O
string	O
like	O
this	O
:	O
mysz	O
=	O
StringLiteral	O
;	O
I	O
want	O
to	O
remove	O
the	O
whitespaces	O
in	O
the	O
string	O
.	O
I	O
tried	O
trim	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
this	O
removes	O
only	O
whitespaces	O
before	O
and	O
after	O
the	O
whole	O
string	O
.	O
I	O
also	O
tried	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
then	O
the	O
=	O
also	O
gets	O
removed	O
.	O
How	O
can	O
I	O
achieve	O
a	O
string	O
with	O
:	O
mysz2	O
=	O
StringLiteral	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
30548433	O
I	O
would	O
like	O
to	O
point	O
out	O
that	O
StreamEx	O
does	O
implement	O
Iterable	B-api_mention
(	O
and	O
Stream	B-api_mention
)	O
,	O
as	O
well	O
as	O
a	O
host	O
of	O
other	O
immensely	O
awesome	O
functionality	O
missing	O
from	O
Stream	B-api_mention
.	O
Question	O
-	O
27683759	O
,	O
answer	O
-	O
27684040	O
That	O
line	O
creates	O
an	O
empty	O
list	O
of	O
strings	O
by	O
calling	O
a	O
static	O
method	O
with	O
a	O
generic	O
type	O
parameter	O
.	O
Inside	O
the	O
Collections	B-api_mention
class	O
,	O
there	O
is	O
a	O
static	O
method	O
emptyList	O
declared	O
like	O
:	O
#	O
pre	O
This	O
has	O
a	O
generic	O
type	O
parameter	O
T	B-api_mention
.	O
We	O
call	O
call	O
this	O
method	O
by	O
using	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
T	O
is	O
infered	O
to	O
be	O
a	O
String	B-api_mention
because	O
of	O
the	O
type	O
of	O
list	O
.	O
We	O
can	O
also	O
specify	O
the	O
type	O
of	O
T	O
by	O
putting	O
it	O
in	O
angle	O
brackets	O
when	O
calling	O
emptyList	B-api_mention
.	O
This	O
may	O
be	O
needed	O
if	O
we	O
want	O
a	O
more	O
specific	O
type	O
than	O
is	O
inferred	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
emptyList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
not	O
correct	O
because	O
that	O
placement	O
is	O
only	O
valid	O
when	O
creating	O
instances	O
of	O
generic	O
classes	O
,	O
not	O
calling	O
methods	O
.	O
When	O
using	O
new	O
there	O
are	O
two	O
possible	O
type	O
parameters	O
,	O
the	O
ones	O
before	O
the	O
class	O
name	O
are	O
for	O
the	O
constructor	O
only	O
,	O
and	O
the	O
ones	O
after	O
the	O
class	O
name	O
are	O
for	O
the	O
whole	O
instance	O
,	O
so	O
with	O
the	O
class	O
:	O
#	O
pre	O
We	O
can	O
call	O
its	O
constructor	O
where	O
A	O
is	O
String	O
and	O
B	O
is	O
Integer	O
like	O
:	O
MyClass	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
a	O
=	O
new	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
MyClass	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	O
;	O
or	O
by	O
using	O
type	O
inference	O
:	O
MyClass	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
a	O
=	O
new	O
MyClass	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
See	O
also	O
:	O
#	O
li	O
Generic	O
Methods	O
#	O
li	O
Type	O
Inference	O
Question	O
-	O
23114015	O
,	O
answer	O
-	O
23177907	O
This	O
was	O
not	O
an	O
omission	O
;	O
there	O
was	O
detailed	O
discussion	O
on	O
the	O
EG	O
list	O
in	O
June	O
of	O
2013	O
.	O
The	O
definitive	O
discussion	O
of	O
the	O
Expert	O
Group	O
is	O
rooted	O
at	O
this	O
thread	O
.	O
While	O
it	O
seemed	O
"	O
obvious	O
"	O
(	O
even	O
to	O
the	O
Expert	O
Group	O
,	O
initially	O
)	O
that	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
seemed	O
to	O
make	O
sense	O
on	O
Iterable	B-api_mention
,	O
the	O
fact	O
that	O
Iterable	B-api_mention
was	O
so	O
general	O
became	O
a	O
problem	O
,	O
because	O
the	O
obvious	O
signature	O
:	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
not	O
always	O
what	O
you	O
were	O
going	O
to	O
want	O
.	O
Some	O
things	O
that	O
were	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
would	O
rather	O
have	O
their	O
stream	O
method	O
return	O
an	O
IntStream	B-api_mention
,	O
for	O
example	O
.	O
But	O
putting	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
this	O
high	O
up	O
in	O
the	O
hierarchy	O
would	O
make	O
that	O
impossible	O
.	O
So	O
instead	O
,	O
we	O
made	O
it	O
really	O
easy	O
to	O
make	O
a	O
Stream	B-api_mention
from	O
an	O
Iterable	B-api_mention
,	O
by	O
providing	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
implementation	O
of	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
Collection	B-api_mention
is	O
just	O
:	O
#	O
pre	O
Any	O
client	O
can	O
get	O
the	O
stream	O
they	O
want	O
from	O
an	O
Iterable	O
with	O
:	O
Stream	B-api_mention
s	O
=	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
In	O
the	O
end	O
we	O
concluded	O
that	O
adding	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
Iterable	O
would	O
be	O
a	O
mistake	O
.	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276493	O
You	O
can	O
close	O
the	O
outer	O
most	O
stream	O
,	O
in	O
fact	O
you	O
don	O
'	O
t	O
need	O
to	O
retain	O
all	O
the	O
streams	O
wrapped	O
and	O
you	O
can	O
use	O
Java	O
7	O
try	O
-	O
with	O
-	O
resources	O
.	O
#	O
pre	O
If	O
you	O
subscribe	O
to	O
YAGNI	O
,	O
or	O
you	O
-	O
aint	O
-	O
gonna	O
-	O
need	O
-	O
it	O
,	O
you	O
should	O
be	O
only	O
adding	O
code	O
you	O
actually	O
need	O
.	O
You	O
shouldn	O
'	O
t	O
be	O
adding	O
code	O
you	O
imagine	O
you	O
might	O
need	O
but	O
in	O
reality	O
doesn	O
'	O
t	O
do	O
anything	O
useful	O
.	O
Take	O
this	O
example	O
and	O
imagine	O
what	O
could	O
possibly	O
go	O
wrong	O
if	O
you	O
didn	O
'	O
t	O
do	O
this	O
and	O
what	O
the	O
impact	O
would	O
be	O
?	O
#	O
pre	O
Lets	O
start	O
with	O
FileOutputStream	B-api_mention
which	O
calls	O
open	O
to	O
do	O
all	O
the	O
real	O
work	O
.	O
/	O
*	O
*	O
*	O
Opens	O
a	O
file	O
,	O
with	O
the	O
specified	O
name	O
,	O
for	O
overwriting	O
or	O
appending	O
.	O
*	O
@	O
param	O
name	O
name	O
of	O
file	O
to	O
be	O
opened	O
*	O
@	O
param	O
append	O
whether	O
the	O
file	O
is	O
to	O
be	O
opened	O
in	O
append	O
mode	O
*	O
/	O
private	O
native	O
void	O
open	O
(	O
args	O
)	O
throws	O
FileNotFoundException	B-api_mention
;	O
If	O
the	O
file	O
is	O
not	O
found	O
,	O
there	O
is	O
no	O
underlying	O
resource	O
to	O
close	O
,	O
so	O
closing	O
it	O
won	O
'	O
t	O
make	O
any	O
difference	O
.	O
If	O
The	O
file	O
exists	O
,	O
it	O
should	O
be	O
throwing	O
a	O
FileNotFoundException	B-api_mention
.	O
So	O
there	O
is	O
nothing	O
to	O
be	O
gained	O
by	O
trying	O
to	O
close	O
the	O
resource	O
from	O
this	O
line	O
alone	O
.	O
The	O
reason	O
you	O
need	O
to	O
close	O
the	O
file	O
is	O
when	O
the	O
file	O
is	O
opened	O
successfully	O
,	O
but	O
you	O
later	O
get	O
an	O
error	O
.	O
Lets	O
look	O
at	O
the	O
next	O
stream	O
GZIPOutputStream	O
There	O
is	O
code	O
which	O
can	O
throw	O
an	O
exception	O
#	O
pre	O
This	O
writes	O
the	O
header	O
of	O
the	O
file	O
.	O
Now	O
it	O
would	O
be	O
very	O
unusual	O
for	O
you	O
to	O
be	O
able	O
to	O
open	O
a	O
file	O
for	O
writing	O
but	O
not	O
be	O
able	O
to	O
write	O
even	O
8	O
bytes	O
to	O
it	O
,	O
but	O
lets	O
imagine	O
this	O
could	O
happen	O
and	O
we	O
don	O
'	O
t	O
close	O
the	O
file	O
afterwards	O
.	O
What	O
does	O
happen	O
to	O
a	O
file	O
if	O
it	O
is	O
not	O
closed	O
?	O
You	O
don	O
'	O
t	O
get	O
any	O
unflushed	O
writes	O
,	O
they	O
are	O
discarded	O
and	O
in	O
this	O
case	O
,	O
there	O
is	O
no	O
successfully	O
written	O
bytes	O
to	O
the	O
stream	O
which	O
isn	O
'	O
t	O
buffered	O
at	O
this	O
point	O
anyway	O
.	O
But	O
a	O
file	O
which	O
is	O
not	O
closed	O
doesn	O
'	O
t	O
live	O
forever	O
,	O
instead	O
FileOutputStream	B-api_mention
has	O
#	O
pre	O
If	O
you	O
don	O
'	O
t	O
close	O
a	O
file	O
at	O
all	O
,	O
it	O
gets	O
closed	O
anyway	O
,	O
just	O
not	O
immediately	O
(	O
and	O
like	O
I	O
said	O
,	O
data	O
which	O
is	O
left	O
in	O
a	O
buffer	O
will	O
be	O
lost	O
this	O
way	O
,	O
but	O
there	O
is	O
none	O
at	O
this	O
point	O
)	O
What	O
is	O
the	O
consequence	O
of	O
not	O
closing	O
the	O
file	O
immediately	O
?	O
Under	O
normal	O
conditions	O
,	O
you	O
potentially	O
lose	O
some	O
data	O
,	O
and	O
you	O
potentially	O
run	O
out	O
of	O
file	O
descriptors	O
.	O
But	O
if	O
you	O
have	O
a	O
system	O
where	O
you	O
can	O
create	O
files	O
but	O
you	O
can	O
'	O
t	O
write	O
anything	O
to	O
them	O
,	O
you	O
have	O
a	O
bigger	O
problem	O
.	O
i	O
.	O
e	O
.	O
it	O
hard	O
to	O
imagine	O
why	O
you	O
are	O
repeatedly	O
trying	O
to	O
create	O
this	O
file	O
despite	O
the	O
fact	O
you	O
are	O
failing	O
.	O
Both	O
OutputStreamWriter	O
and	O
BufferedWriter	O
don	O
'	O
t	O
throw	O
IOException	B-api_mention
in	O
their	O
constructors	O
,	O
so	O
it	O
not	O
clear	O
what	O
problem	O
they	O
would	O
cause	O
.	O
In	O
The	O
case	O
of	O
BufferedWriter	O
,	O
you	O
could	O
get	O
an	O
OutOfMemoryError	O
.	O
In	O
this	O
case	O
it	O
will	O
immediately	O
trigger	O
a	O
GC	O
,	O
which	O
as	O
we	O
have	O
seen	O
will	O
close	O
the	O
file	O
anyway	O
.	O
Question	O
-	O
13744450	O
,	O
answer	O
-	O
13744816	O
In	O
very	O
simple	O
terms	O
(	O
because	O
the	O
other	O
answers	O
are	O
referring	O
you	O
to	O
all	O
the	O
official	O
design	O
patterns	O
anyway	O
,	O
so	O
look	O
at	O
them	O
for	O
further	O
details	O
)	O
:	O
If	O
you	O
want	O
to	O
have	O
a	O
class	O
which	O
is	O
monitored	O
by	O
other	O
classes	O
in	O
the	O
ecosystem	O
of	O
your	O
program	O
you	O
say	O
that	O
you	O
want	O
the	O
class	O
to	O
be	O
observable	O
.	O
I	O
.	O
e	O
.	O
there	O
might	O
be	O
some	O
changes	O
in	O
its	O
state	O
which	O
you	O
would	O
want	O
to	O
broadcast	O
to	O
the	O
rest	O
of	O
the	O
program	O
.	O
Now	O
,	O
to	O
do	O
this	O
we	O
have	O
to	O
call	O
some	O
kind	O
of	O
method	O
.	O
We	O
don	O
'	O
t	O
want	O
the	O
Observable	B-api_mention
class	O
to	O
be	O
tightly	O
coupled	O
with	O
the	O
classes	O
that	O
are	O
interested	O
in	O
observing	O
it	O
.	O
It	O
doesn	O
'	O
t	O
care	O
who	O
it	O
is	O
as	O
long	O
as	O
it	O
fulfils	O
certain	O
criteria	O
.	O
(	O
Imagine	O
it	O
is	O
a	O
radio	O
station	O
,	O
it	O
doesn	O
'	O
t	O
care	O
who	O
is	O
listening	O
as	O
long	O
as	O
they	O
have	O
an	O
FM	O
radio	O
tuned	O
on	O
their	O
frequency	O
)	O
.	O
To	O
achieve	O
that	O
we	O
use	O
an	O
interface	O
,	O
referred	O
to	O
as	O
the	O
Observer	B-api_mention
.	O
Therefore	O
,	O
the	O
Observable	B-api_mention
class	O
will	O
have	O
a	O
list	O
of	O
Observers	O
(	O
i	O
.	O
e	O
.	O
instances	O
implementing	O
the	O
Observer	B-api_mention
interface	O
methods	O
you	O
might	O
have	O
)	O
.	O
Whenever	O
it	O
wants	O
to	O
broadcast	O
something	O
,	O
it	O
just	O
calls	O
the	O
method	O
on	O
all	O
the	O
observers	O
,	O
one	O
after	O
the	O
other	O
.	O
The	O
last	O
thing	O
to	O
close	O
the	O
puzzle	O
is	O
how	O
will	O
the	O
Observable	B-api_mention
class	O
know	O
who	O
is	O
interested	O
?	O
So	O
the	O
Observable	B-api_mention
class	O
must	O
offer	O
some	O
mechanism	O
to	O
allow	O
Observers	O
to	O
register	O
their	O
interest	O
.	O
A	O
method	O
such	O
as	O
addObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
internally	O
adds	O
the	O
Observer	O
to	O
the	O
list	O
of	O
observers	O
,	O
so	O
that	O
when	O
something	O
important	O
happens	O
,	O
it	O
loops	O
through	O
the	O
list	O
and	O
calls	O
the	O
respective	O
notification	O
method	O
of	O
the	O
Observer	B-api_mention
interface	O
of	O
each	O
instance	O
in	O
the	O
list	O
.	O
It	O
might	O
be	O
that	O
in	O
the	O
interview	O
they	O
did	O
not	O
ask	O
you	O
explicitly	O
about	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observer	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observable	I-api_mention
but	O
about	O
the	O
generic	O
concept	O
.	O
The	O
concept	O
is	O
a	O
design	O
pattern	O
,	O
which	O
Java	O
happens	O
to	O
provide	O
support	O
for	O
directly	O
out	O
of	O
the	O
box	O
to	O
help	O
you	O
implement	O
it	O
quickly	O
when	O
you	O
need	O
it	O
.	O
So	O
I	O
would	O
suggest	O
that	O
you	O
understand	O
the	O
concept	O
rather	O
than	O
the	O
actual	O
methods	O
/	O
classes	O
(	O
which	O
you	O
can	O
look	O
up	O
when	O
you	O
need	O
them	O
)	O
.	O
UPDATE	O
In	O
response	O
to	O
your	O
comment	O
,	O
the	O
actual	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observable	I-api_mention
class	O
offers	O
the	O
following	O
facilities	O
:	O
#	O
li	O
Maintaining	O
a	O
list	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Observer	I-api_mention
instances	O
.	O
New	O
instances	O
interested	O
in	O
being	O
notified	O
can	O
be	O
added	O
through	O
addObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
removed	O
through	O
deleteObserver	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Maintaining	O
an	O
internal	O
state	O
,	O
specifying	O
whether	O
the	O
object	O
has	O
changed	O
since	O
the	O
last	O
notification	O
to	O
the	O
observers	O
.	O
This	O
is	O
useful	O
because	O
it	O
separates	O
the	O
part	O
where	O
you	O
say	O
that	O
the	O
Observable	B-api_mention
has	O
changed	O
,	O
from	O
the	O
part	O
where	O
you	O
notify	O
the	O
changes	O
.	O
(	O
E	O
.	O
g	O
.	O
Its	O
useful	O
if	O
you	O
have	O
multiple	O
changes	O
happening	O
and	O
you	O
only	O
want	O
to	O
notify	O
at	O
the	O
end	O
of	O
the	O
process	O
rather	O
than	O
at	O
each	O
small	O
step	O
)	O
.	O
This	O
is	O
done	O
through	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
So	O
you	O
just	O
call	O
it	O
when	O
you	O
changed	O
something	O
to	O
the	O
Observable	B-api_mention
and	O
you	O
want	O
the	O
rest	O
of	O
the	O
Observers	B-api_mention
to	O
eventually	O
know	O
about	O
it	O
.	O
#	O
li	O
Notifying	O
all	O
observers	O
that	O
the	O
specific	O
Observable	B-api_mention
has	O
changed	O
state	O
.	O
This	O
is	O
done	O
through	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
checks	O
if	O
the	O
object	O
has	O
actually	O
changed	O
(	O
i	O
.	O
e	O
.	O
a	O
call	O
to	O
setChanged	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
made	O
)	O
before	O
proceeding	O
with	O
the	O
notification	O
.	O
There	O
are	O
2	O
versions	O
,	O
one	O
with	O
no	O
arguments	O
and	O
one	O
with	O
an	O
Object	O
argument	O
,	O
in	O
case	O
you	O
want	O
to	O
pass	O
some	O
extra	O
information	O
with	O
the	O
notification	O
.	O
Internally	O
what	O
happens	O
is	O
that	O
it	O
just	O
iterates	O
through	O
the	O
list	O
of	O
Observer	B-api_mention
instances	O
and	O
calls	O
the	O
update	B-api_mention
(	I-api_mention
Observable	I-api_mention
o	I-api_mention
,	I-api_mention
Object	I-api_mention
arg	I-api_mention
)	I-api_mention
method	O
for	O
each	O
of	O
them	O
.	O
This	O
tells	O
the	O
Observer	B-api_mention
which	O
was	O
the	O
Observable	B-api_mention
object	O
that	O
changed	O
(	O
you	O
could	O
be	O
observing	O
more	O
than	O
one	O
)	O
,	O
and	O
the	O
extra	O
Object	O
arg	O
to	O
potentially	O
carry	O
some	O
extra	O
information	O
(	O
passed	O
through	O
notifyObservers	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
18666710	O
,	O
answer	O
-	O
18792306	O
An	O
important	O
feature	O
of	O
parametric	O
types	O
is	O
the	O
ability	O
to	O
write	O
polymorphic	O
algorithms	O
,	O
i	O
.	O
e	O
.	O
algorithms	O
that	O
operate	O
on	O
a	O
data	O
structure	O
regardless	O
of	O
its	O
parameter	O
value	O
,	O
such	O
as	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
With	O
generics	O
,	O
that	O
'	O
s	O
done	O
with	O
wildcard	O
types	O
:	O
<	O
E	O
extends	O
Comparable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
>	O
void	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
To	O
be	O
truly	O
useful	O
,	O
wildcard	O
types	O
require	O
wildcard	O
capture	O
,	O
and	O
that	O
requires	O
the	O
notion	O
of	O
a	O
type	O
parameter	O
.	O
None	O
of	O
that	O
was	O
available	O
at	O
the	O
time	O
arrays	O
were	O
added	O
to	O
Java	O
,	O
and	O
makings	O
arrays	O
of	O
reference	O
type	O
covariant	O
permitted	O
a	O
far	O
simpler	O
way	O
to	O
permit	O
polymorphic	O
algorithms	O
:	O
void	O
sort	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
However	O
,	O
that	O
simplicity	O
opened	O
a	O
loophole	O
in	O
the	O
static	O
type	O
system	O
:	O
#	O
pre	O
requiring	O
a	O
runtime	O
check	O
of	O
every	O
write	O
access	O
to	O
an	O
array	O
of	O
reference	O
type	O
.	O
In	O
a	O
nutshell	O
,	O
the	O
newer	O
approach	O
embodied	O
by	O
generics	O
makes	O
the	O
type	O
system	O
more	O
complex	O
,	O
but	O
also	O
more	O
statically	O
type	O
safe	O
,	O
while	O
the	O
older	O
approach	O
was	O
simpler	O
,	O
and	O
less	O
statically	O
type	O
safe	O
.	O
The	O
designers	O
of	O
the	O
language	O
opted	O
for	O
the	O
simpler	O
approach	O
,	O
having	O
more	O
important	O
things	O
to	O
do	O
than	O
closing	O
a	O
small	O
loophole	O
in	O
the	O
type	O
system	O
that	O
rarely	O
causes	O
problems	O
.	O
Later	O
,	O
when	O
Java	O
was	O
established	O
,	O
and	O
the	O
pressing	O
needs	O
taken	O
care	O
of	O
,	O
they	O
had	O
the	O
resources	O
to	O
do	O
it	O
right	O
for	O
generics	O
(	O
but	O
changing	O
it	O
for	O
arrays	O
would	O
have	O
broken	O
existing	O
Java	O
programs	O
)	O
.	O
Question	O
-	O
32623834	O
,	O
answer	O
-	O
32624143	O
You	O
just	O
changed	O
the	O
String	B-api_mention
of	O
String	B-api_mention
constant	O
pool	O
Mario	O
to	O
Luigi	O
which	O
was	O
referenced	O
by	O
multiple	O
String	B-api_mention
s	O
,	O
so	O
every	O
referencing	O
literal	O
Mario	O
is	O
now	O
Luigi	O
.	O
Field	B-api_mention
stringValue	O
=	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
.	I-api_mention
getDeclaredField	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
have	O
fetched	O
the	O
char	O
[	O
]	O
named	O
value	O
field	O
from	O
class	O
String	B-api_mention
stringValue	O
.	B-api_mention
setAccessible	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Make	O
it	O
accessible	O
.	O
stringValue	O
.	B-api_mention
set	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
changed	O
original	O
String	B-api_mention
field	O
to	O
Luigi	O
.	O
But	O
original	O
is	O
Mario	O
the	O
String	B-api_mention
literal	O
and	O
literal	O
belongs	O
to	O
the	O
String	B-api_mention
pool	O
and	O
all	O
are	O
interned	O
.	O
Which	O
means	O
all	O
the	O
literals	O
which	O
has	O
same	O
content	O
refers	O
to	O
the	O
same	O
memory	O
address	O
.	O
#	O
pre	O
Basically	O
you	O
have	O
changed	O
the	O
Mario	O
of	O
String	B-api_mention
pool	O
which	O
got	O
reflected	O
in	O
all	O
the	O
referencing	O
fields	O
.	O
If	O
you	O
create	O
String	B-api_mention
Object	O
(	O
i	O
.	O
e	O
.	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
instead	O
of	O
literal	O
you	O
will	O
not	O
face	O
this	O
behavior	O
because	O
than	O
you	O
will	O
have	O
two	O
different	O
Mario	O
s	O
.	O
Question	O
-	O
9749746	O
,	O
answer	O
-	O
9749864	O
You	O
are	O
specifically	O
asking	O
about	O
how	O
they	O
internally	O
work	O
,	O
so	O
here	O
you	O
are	O
:	O
No	O
synchronization	O
#	O
pre	O
It	O
basically	O
reads	O
value	O
from	O
memory	O
,	O
increments	O
it	O
and	O
puts	O
back	O
to	O
memory	O
.	O
This	O
works	O
in	O
single	O
thread	O
but	O
nowadays	O
,	O
in	O
the	O
era	O
of	O
multi	O
-	O
core	O
,	O
multi	O
-	O
CPU	O
,	O
multi	O
-	O
level	O
caches	O
it	O
won	O
'	O
t	O
work	O
correctly	O
.	O
First	O
of	O
all	O
it	O
introduces	O
race	O
condition	O
(	O
several	O
threads	O
can	O
read	O
the	O
value	O
at	O
the	O
same	O
time	O
)	O
,	O
but	O
also	O
visibility	O
problems	O
.	O
The	O
value	O
might	O
only	O
be	O
stored	O
in	O
"	O
local	O
"	O
CPU	O
memory	O
(	O
some	O
cache	O
)	O
and	O
not	O
be	O
visible	O
for	O
other	O
CPUs	O
/	O
cores	O
(	O
and	O
thus	O
-	O
threads	O
)	O
.	O
This	O
is	O
why	O
many	O
refer	O
to	O
local	O
copy	O
of	O
a	O
variable	O
in	O
a	O
thread	O
.	O
It	O
is	O
very	O
unsafe	O
.	O
Consider	O
this	O
popular	O
but	O
broken	O
thread	O
-	O
stopping	O
code	O
:	O
#	O
pre	O
Add	O
volatile	O
to	O
stopped	O
variable	O
and	O
it	O
works	O
fine	O
-	O
if	O
any	O
other	O
thread	O
modifies	O
stopped	O
variable	O
via	O
pleaseStop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
that	O
change	O
immediately	O
in	O
working	O
thread	O
'	O
s	O
while	O
(	O
args	O
)	O
loop	O
.	O
BTW	O
this	O
is	O
not	O
a	O
good	O
way	O
to	O
interrupt	O
a	O
thread	O
either	O
,	O
see	O
:	O
How	O
to	O
stop	O
a	O
thread	O
that	O
is	O
running	O
forever	O
without	O
any	O
use	O
and	O
Stopping	O
a	O
specific	O
java	O
thread	O
.	O
AtomicInteger	O
#	O
pre	O
The	O
AtomicInteger	B-api_mention
class	O
uses	O
CAS	O
(	O
compare	O
-	O
and	O
-	O
swap	O
)	O
low	O
-	O
level	O
CPU	O
operations	O
(	O
no	O
synchronization	O
needed	O
!	O
)	O
They	O
allow	O
you	O
to	O
modify	O
a	O
particular	O
variable	O
only	O
if	O
the	O
present	O
value	O
is	O
equal	O
to	O
something	O
else	O
(	O
and	O
is	O
returned	O
successfully	O
)	O
.	O
So	O
when	O
you	O
execute	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
actually	O
runs	O
in	O
a	O
loop	O
(	O
simplified	O
real	O
implementation	O
)	O
:	O
#	O
pre	O
So	O
basically	O
:	O
read	O
;	O
try	O
to	O
store	O
incremented	O
value	O
;	O
if	O
not	O
successful	O
(	O
the	O
value	O
is	O
no	O
longer	O
equal	O
to	O
current	O
)	O
,	O
read	O
and	O
try	O
again	O
.	O
The	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
implemented	O
in	O
native	O
code	O
(	O
assembly	O
)	O
.	O
volatile	O
without	O
synchronization	O
#	O
pre	O
This	O
code	O
is	O
not	O
correct	O
.	O
It	O
fixes	O
the	O
visibility	O
issue	O
(	O
volatile	O
makes	O
sure	O
other	O
threads	O
can	O
see	O
change	O
made	O
to	O
counter	O
)	O
but	O
still	O
has	O
a	O
race	O
condition	O
.	O
This	O
has	O
been	O
explained	O
multiple	O
times	O
:	O
pre	O
/	O
post	O
-	O
incrementation	O
is	O
not	O
atomic	B-api_mention
.	O
The	O
only	O
side	O
effect	O
of	O
volatile	O
is	O
"	O
flushing	O
"	O
caches	O
so	O
that	O
all	O
other	O
parties	O
see	O
the	O
freshest	O
version	O
of	O
the	O
data	O
.	O
This	O
is	O
too	O
strict	O
in	O
most	O
situations	O
;	O
that	O
is	O
why	O
volatile	O
is	O
not	O
default	O
.	O
volatile	O
without	O
synchronization	O
(	O
2	O
)	O
#	O
pre	O
The	O
same	O
problem	O
as	O
above	O
,	O
but	O
even	O
worse	O
because	O
i	O
is	O
not	O
private	O
.	O
The	O
race	O
condition	O
is	O
still	O
present	O
.	O
Why	O
is	O
it	O
a	O
problem	O
?	O
If	O
,	O
say	O
,	O
two	O
threads	O
run	O
this	O
code	O
simultaneously	O
,	O
the	O
output	O
might	O
be	O
+	O
5	O
or	O
+	O
10	O
.	O
However	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
the	O
change	O
.	O
Multiple	O
independent	O
synchronized	O
#	O
pre	O
Surprise	O
,	O
this	O
code	O
is	O
incorrect	O
as	O
well	O
.	O
In	O
fact	O
,	O
it	O
is	O
completely	O
wrong	O
.	O
First	O
of	O
all	O
you	O
are	O
synchronizing	O
on	O
i	O
,	O
which	O
is	O
about	O
to	O
be	O
changed	O
(	O
moreover	O
,	O
i	O
is	O
a	O
primitive	O
,	O
so	O
I	O
guess	O
you	O
are	O
synchronizing	O
on	O
a	O
temporary	O
Integer	O
created	O
via	O
autoboxing	O
.	O
.	O
.	O
)	O
Completely	O
flawed	O
.	O
You	O
could	O
also	O
write	O
:	O
#	O
pre	O
No	O
two	O
threads	O
can	O
enter	O
the	O
same	O
synchronized	O
block	O
with	O
the	O
same	O
lock	O
.	O
In	O
this	O
case	O
(	O
and	O
similarly	O
in	O
your	O
code	O
)	O
the	O
lock	O
object	O
changes	O
upon	O
every	O
execution	O
,	O
so	O
synchronized	O
effectively	O
has	O
no	O
effect	O
.	O
Even	O
if	O
you	O
have	O
used	O
a	O
final	O
variable	O
(	O
or	O
this	O
)	O
for	O
synchronization	O
,	O
the	O
code	O
is	O
still	O
incorrect	O
.	O
Two	O
threads	O
can	O
first	O
read	O
i	O
to	O
temp	O
synchronously	O
(	O
having	O
the	O
same	O
value	O
locally	O
in	O
temp	O
)	O
,	O
then	O
the	O
first	O
assigns	O
a	O
new	O
value	O
to	O
i	O
(	O
say	O
,	O
from	O
1	O
to	O
6	O
)	O
and	O
the	O
other	O
one	O
does	O
the	O
same	O
thing	O
(	O
from	O
1	O
to	O
6	O
)	O
.	O
The	O
synchronization	O
must	O
span	O
from	O
reading	O
to	O
assigning	O
a	O
value	O
.	O
Your	O
first	O
synchronization	O
has	O
no	O
effect	O
(	O
reading	O
an	O
int	O
is	O
atomic	O
)	O
and	O
the	O
second	O
as	O
well	O
.	O
In	O
my	O
opinion	O
,	O
these	O
are	O
the	O
correct	O
forms	O
:	O
#	O
pre	O
Question	O
-	O
14526260	O
,	O
answer	O
-	O
14526289	O
just	O
use	O
File	B-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
)	I-api_mention
#	O
pre	O
using	O
String	O
methods	O
:	O
#	O
pre	O
Question	O
-	O
23114015	O
,	O
answer	O
-	O
32874755	O
If	O
you	O
know	O
the	O
size	O
you	O
could	O
use	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collection	I-api_mention
which	O
provides	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
And	O
then	O
:	O
new	O
Hand	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
I	O
faced	O
the	O
same	O
problem	O
and	O
was	O
surprised	O
that	O
my	O
Iterable	B-api_mention
implementation	O
could	O
be	O
very	O
easily	O
extended	O
to	O
an	O
AbstractCollection	B-api_mention
implementation	O
by	O
simply	O
adding	O
the	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
luckily	O
I	O
had	O
the	O
size	O
of	O
the	O
collection	O
:	O
-	O
)	O
You	O
should	O
also	O
consider	O
to	O
override	O
Spliterator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
spliterator	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
12317668	O
,	O
answer	O
-	O
12375312	O
Here	O
we	O
are	O
faced	O
with	O
a	O
bug	O
in	O
the	O
JIT	O
-	O
compiler	O
.	O
Compiler	O
determines	O
that	O
the	O
allocated	O
array	O
is	O
filled	O
after	O
allocation	O
in	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
the	O
check	O
for	O
uses	O
between	O
the	O
allocation	O
and	O
the	O
fill	O
is	O
faulty	O
.	O
So	O
,	O
compiler	O
performs	O
an	O
illegal	O
optimization	O
-	O
it	O
skips	O
zeroing	O
of	O
allocated	O
array	O
.	O
This	O
bug	O
is	O
placed	O
in	O
Oracle	O
bug	O
tracker	O
(	O
bug	O
id	O
7196857	O
)	O
.	O
Unfortunately	O
,	O
I	O
did	O
not	O
wait	O
for	O
any	O
clarifications	O
from	O
Oracle	O
about	O
the	O
following	O
points	O
.	O
As	O
I	O
see	O
,	O
this	O
bug	O
is	O
OS	O
-	O
specific	O
:	O
it	O
absolutely	O
reproducible	O
on	O
64	O
-	O
bit	O
Linux	O
and	O
Mac	O
,	O
but	O
,	O
as	O
I	O
see	O
from	O
comments	O
,	O
it	O
reproduces	O
not	O
regularly	O
on	O
Windows	O
(	O
for	O
similar	O
versions	O
of	O
JDK	O
)	O
.	O
Additionally	O
it	O
would	O
be	O
nice	O
to	O
know	O
when	O
this	O
bug	O
will	O
be	O
fixed	O
.	O
There	O
is	O
only	O
advice	O
at	O
the	O
moment	O
:	O
do	O
not	O
use	O
JDK1	O
.	O
7	O
.	O
0	O
_	O
04	O
or	O
later	O
if	O
you	O
depend	O
on	O
JLS	O
for	O
newly	O
declared	O
arrays	O
.	O
Update	O
at	O
October	O
5	O
:	O
In	O
the	O
new	O
Build	O
10	O
of	O
the	O
JDK	O
7u10	O
(	O
early	O
access	O
)	O
released	O
at	O
October	O
04	O
,	O
2012	O
,	O
this	O
bug	O
was	O
fixed	O
at	O
least	O
for	O
Linux	O
OS	O
(	O
I	O
did	O
not	O
test	O
for	O
other	O
)	O
.	O
Thanks	O
to	O
@	O
Makoto	O
,	O
who	O
found	O
that	O
this	O
bug	O
is	O
no	O
longer	O
available	O
for	O
public	O
access	O
in	O
Oracle	O
bug	O
database	O
.	O
Unfortunately	O
,	O
I	O
do	O
not	O
know	O
for	O
the	O
reasons	O
Oracle	O
removed	O
it	O
from	O
public	O
access	O
,	O
but	O
it	O
is	O
available	O
in	O
Google	O
cache	O
.	O
Also	O
,	O
this	O
bug	O
has	O
caught	O
the	O
attention	O
of	O
Redhat	O
:	O
the	O
CVE	O
identifiers	O
CVE	O
-	O
2012	O
-	O
4420	O
(	O
bugzilla	O
)	O
and	O
CVE	O
-	O
2012	O
-	O
4416	O
(	O
bugzilla	O
)	O
were	O
assigned	O
to	O
this	O
flaw	O
.	O
Question	O
-	O
32859038	O
I	O
have	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
collection	O
.	O
I	O
need	O
to	O
convert	O
it	O
into	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
The	O
key	O
of	O
the	O
map	O
must	O
be	O
the	O
index	O
of	O
the	O
item	O
in	O
the	O
collection	O
.	O
I	O
can	O
not	O
figure	O
it	O
out	O
how	O
to	O
do	O
this	O
with	O
streams	O
.	O
Something	O
like	O
:	O
items	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Any	O
help	O
?	O
As	O
this	O
question	O
is	O
identified	O
as	O
possible	O
duplicate	O
I	O
need	O
to	O
add	O
that	O
my	O
concrete	O
problem	O
was	O
-	O
how	O
to	O
get	O
the	O
position	O
of	O
the	O
item	O
in	O
the	O
list	O
and	O
put	O
it	O
as	O
a	O
key	O
value	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32918035	O
Eran	O
'	O
s	O
answer	O
is	O
usually	O
the	O
best	O
approach	O
for	O
random	O
-	O
access	O
lists	O
.	O
If	O
your	O
List	B-api_mention
isn	O
'	O
t	O
random	O
access	O
,	O
or	O
if	O
you	O
have	O
a	O
Stream	B-api_mention
instead	O
of	O
a	O
List	B-api_mention
,	O
you	O
can	O
use	O
forEachOrdered	O
:	O
#	O
pre	O
This	O
is	O
safe	O
,	O
if	O
the	O
stream	O
is	O
parallel	O
,	O
even	O
though	O
the	O
destination	O
map	O
is	O
thread	O
-	O
unsafe	O
and	O
is	O
operated	O
upon	O
as	O
a	O
side	O
effect	O
.	O
The	O
forEachOrdered	O
guarantees	O
that	O
items	O
are	O
processed	O
one	O
-	O
at	O
-	O
a	O
-	O
time	O
,	O
in	O
order	O
.	O
For	O
this	O
reason	O
it	O
'	O
s	O
unlikely	O
that	O
any	O
speedup	O
will	O
result	O
from	O
running	O
in	O
parallel	O
.	O
(	O
There	O
might	O
be	O
some	O
speedup	O
if	O
there	O
are	O
expensive	O
operations	O
in	O
the	O
pipeline	O
before	O
the	O
forEachOrdered	O
.	O
)	O
Question	O
-	O
15336477	O
All	O
I	O
'	O
m	O
trying	O
to	O
do	O
is	O
download	O
some	O
JSON	O
and	O
deserialize	O
it	O
into	O
an	O
object	O
.	O
I	O
haven	O
'	O
t	O
got	O
as	O
far	O
as	O
downloading	O
the	O
JSON	O
yet	O
.	O
Almost	O
every	O
single	O
HttpClient	B-api_mention
example	O
I	O
can	O
find	O
,	O
including	O
those	O
on	O
the	O
apache	O
site	O
looks	O
something	O
like	O
.	O
.	O
.	O
#	O
pre	O
However	O
,	O
Netbeans	O
tells	O
me	O
that	O
DefaultHttpClient	B-api_mention
is	O
deprecated	O
.	O
I	O
'	O
ve	O
tried	O
googling	O
for	O
DefaultHttpClient	B-api_mention
deprecated	O
and	O
as	O
many	O
other	O
variations	O
as	O
I	O
can	O
think	O
of	O
and	O
can	O
'	O
t	O
find	O
any	O
useful	O
results	O
,	O
so	O
I	O
'	O
m	O
obviously	O
missing	O
something	O
.	O
What	O
is	O
the	O
correct	O
Java7	O
way	O
to	O
download	O
the	O
contents	O
of	O
a	O
webpage	O
?	O
Is	O
there	O
really	O
no	O
decent	O
Http	O
Client	O
as	O
part	O
of	O
the	O
language	O
?	O
I	O
find	O
that	O
hard	O
to	O
believe	O
.	O
My	O
Maven	O
dependency	O
for	O
this	O
is	O
.	O
.	O
.	O
#	O
pre	O
Question	O
-	O
19416644	O
,	O
answer	O
-	O
19775881	O
Create	O
your	O
own	O
class	O
System	O
in	O
tha	O
same	O
package	O
with	O
Condition	O
.	O
In	O
this	O
case	O
your	O
System	O
class	O
will	O
hide	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
System	I-api_mention
class	O
#	O
pre	O
Ideone	O
DEMO	O
Question	O
-	O
4645020	O
It	O
is	O
supposed	O
to	O
be	O
generally	O
preferable	O
to	O
use	O
a	O
StringBuilder	B-api_mention
for	O
string	O
concatenation	O
in	O
Java	O
.	O
Is	O
this	O
always	O
the	O
case	O
?	O
What	O
I	O
mean	O
is	O
this	O
:	O
Is	O
the	O
overhead	O
of	O
creating	O
a	O
StringBuilder	B-api_mention
object	O
,	O
calling	O
the	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
and	O
finally	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
already	O
smaller	O
then	O
concatenating	O
existing	O
strings	O
with	O
the	O
+	O
operator	O
for	O
two	O
strings	O
,	O
or	O
is	O
it	O
only	O
advisable	O
for	O
more	O
(	O
than	O
two	O
)	O
strings	O
?	O
If	O
there	O
is	O
such	O
a	O
threshold	O
,	O
what	O
does	O
it	O
depend	O
on	O
(	O
perhaps	O
the	O
string	O
length	O
,	O
but	O
in	O
which	O
way	O
)	O
?	O
And	O
finally	O
,	O
would	O
you	O
trade	O
the	O
readability	O
and	O
conciseness	O
of	O
the	O
+	O
concatenation	O
for	O
the	O
performance	O
of	O
the	O
StringBuilder	B-api_mention
in	O
smaller	O
cases	O
like	O
two	O
,	O
three	O
or	O
four	O
strings	O
?	O
EDIT	O
Explicit	O
use	O
of	O
StringBuilder	B-api_mention
for	O
regular	O
concatenations	O
is	O
being	O
mentioned	O
as	O
obsolete	O
at	O
obsolete	O
java	O
optimization	O
tips	O
as	O
well	O
as	O
at	O
java	O
urban	O
myths	O
.	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561690	O
Comparator	O
is	O
a	O
functional	O
interface	O
,	O
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
max	I-api_mention
complies	O
with	O
that	O
interface	O
(	O
after	O
autoboxing	O
/	O
unboxing	O
is	O
taken	O
into	O
consideration	O
)	O
.	O
It	O
takes	O
two	O
int	O
values	O
and	O
returns	O
an	O
int	O
-	O
just	O
as	O
you	O
'	O
d	O
expect	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
(	O
again	O
,	O
squinting	O
to	O
ignore	O
the	O
Integer	B-api_mention
/	O
int	O
difference	O
)	O
.	O
However	O
,	O
I	O
wouldn	O
'	O
t	O
expect	O
it	O
to	O
do	O
the	O
right	O
thing	O
,	O
given	O
that	O
Integer	B-api_mention
.	I-api_mention
max	I-api_mention
doesn	O
'	O
t	O
comply	O
with	O
the	O
semantics	O
of	O
Comparator	B-api_mention
.	I-api_mention
compare	I-api_mention
.	O
And	O
indeed	O
it	O
doesn	O
'	O
t	O
really	O
work	O
in	O
general	O
.	O
For	O
example	O
,	O
make	O
one	O
small	O
change	O
:	O
#	O
pre	O
.	O
.	O
.	O
and	O
now	O
the	O
max	O
value	O
is	O
-	O
20	O
and	O
the	O
min	O
value	O
is	O
-	O
1	O
.	O
Instead	O
,	O
both	O
calls	O
should	O
use	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
compare	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571352	O
You	O
can	O
use	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
returns	O
the	O
byte	O
[	O
]	O
array	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
38560612	O
This	O
is	O
part	O
of	O
JDK	O
9	O
in	O
the	O
form	O
of	O
or	O
,	O
which	O
takes	O
a	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Your	O
example	O
would	O
then	O
be	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
;	O
For	O
details	O
see	O
the	O
(	O
preliminary	O
)	O
Javadoc	O
or	O
this	O
post	O
I	O
wrote	O
.	O
Question	O
-	O
28818506	O
I	O
'	O
ve	O
been	O
working	O
with	O
the	O
new	O
Optional	B-api_mention
type	O
in	O
Java	O
8	O
,	O
and	O
I	O
'	O
ve	O
come	O
across	O
what	O
seems	O
like	O
a	O
common	O
operation	O
that	O
isn	O
'	O
t	O
supported	O
functionally	O
:	O
an	O
"	O
orElseOptional	O
"	O
Consider	O
the	O
following	O
pattern	O
:	O
#	O
pre	O
There	O
are	O
many	O
forms	O
of	O
this	O
pattern	O
,	O
but	O
it	O
boils	O
down	O
to	O
wanting	O
an	O
"	O
orElse	O
"	O
on	O
an	O
optional	O
that	O
takes	O
a	O
function	O
producing	O
a	O
new	O
optional	O
,	O
called	O
only	O
if	O
the	O
current	O
one	O
does	O
not	O
exist	O
.	O
It	O
'	O
s	O
implementation	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
'	O
m	O
curious	O
if	O
there	O
'	O
s	O
a	O
reason	O
such	O
a	O
method	O
doesn	O
'	O
t	O
exist	O
,	O
if	O
I	O
'	O
m	O
just	O
using	O
Optional	B-api_mention
in	O
an	O
unintended	O
way	O
,	O
and	O
what	O
other	O
ways	O
people	O
have	O
come	O
up	O
with	O
to	O
deal	O
with	O
this	O
case	O
.	O
I	O
should	O
say	O
that	O
I	O
think	O
that	O
solutions	O
involving	O
custom	O
utility	O
classes	O
/	O
methods	O
aren	O
'	O
t	O
elegant	O
because	O
people	O
working	O
with	O
my	O
code	O
won	O
'	O
t	O
necessarily	O
know	O
they	O
exist	O
.	O
Also	O
,	O
if	O
anyone	O
knows	O
,	O
will	O
such	O
a	O
method	O
be	O
included	O
in	O
JDK	O
9	O
,	O
and	O
where	O
might	O
I	O
propose	O
such	O
a	O
method	O
?	O
This	O
seems	O
like	O
a	O
pretty	O
glaring	O
omission	O
to	O
the	O
API	O
to	O
me	O
.	O
Question	O
-	O
18410035	O
,	O
answer	O
-	O
37409771	O
In	O
Java	O
8	O
collection	O
classes	O
that	O
implement	O
Iterable	B-api_mention
(	O
for	O
example	O
all	O
lists	O
)	O
now	O
have	O
forEach	B-api_mention
method	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
above	O
example	O
makes	O
use	O
of	O
method	O
-	O
reference	O
introduced	O
in	O
Java	O
8	O
.	O
We	O
can	O
also	O
iterate	O
over	O
a	O
list	O
using	O
Stream	B-api_mention
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
advantage	O
with	O
later	O
option	O
is	O
that	O
we	O
can	O
also	O
make	O
use	O
of	O
parallel	O
streams	O
wherever	O
appropriate	O
.	O
If	O
the	O
objective	O
is	O
only	O
to	O
print	O
the	O
items	O
irrespective	O
of	O
the	O
order	O
then	O
we	O
can	O
use	O
parallel	O
stream	O
as	O
:	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684935	O
If	O
you	O
want	O
to	O
convert	O
the	O
string	O
back	O
into	O
a	O
byte	O
array	O
you	O
will	O
need	O
to	O
use	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
or	O
equivalent	O
Python	O
function	O
)	O
and	O
this	O
will	O
allow	O
you	O
print	O
out	O
the	O
original	O
byte	O
array	O
.	O
Question	O
-	O
31170459	O
I	O
was	O
testing	O
boundary	O
conditions	O
on	O
some	O
code	O
involving	O
a	O
BigDecimal	B-api_mention
,	O
and	O
I	O
noticed	O
that	O
when	O
a	O
BigDecimal	B-api_mention
is	O
initialized	O
with	O
the	O
String	B-api_mention
StringLiteral	O
it	O
behaves	O
unexpectedly	O
.	O
It	O
seems	O
to	O
have	O
a	O
value	O
between	O
0	O
and	O
1e	O
-	O
2147483647	O
.	O
When	O
I	O
try	O
calling	O
intValue	O
(	O
args	O
)	O
,	O
I	O
get	O
a	O
NegativeArraySizeException	O
.	O
I	O
should	O
note	O
that	O
2147483647	O
is	O
the	O
max	O
value	O
of	O
an	O
integer	O
on	O
my	O
system	O
.	O
Am	O
I	O
doing	O
something	O
wrong	O
,	O
or	O
is	O
this	O
a	O
problem	O
with	O
BigDecimal	B-api_mention
?	O
#	O
pre	O
Question	O
-	O
5263187	O
,	O
answer	O
-	O
5263201	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
9510125	O
Swing	O
components	O
have	O
multiple	O
methods	O
related	O
to	O
updates	O
of	O
screen	O
layout	O
,	O
in	O
particular	O
:	O
#	O
li	O
validate	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
invalidate	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
li	O
revalidate	B-api_mention
(	I-api_mention
)	I-api_mention
The	O
Java	O
documentation	O
defines	O
these	O
somewhat	O
from	O
a	O
technical	O
perspective	O
,	O
but	O
it	O
'	O
s	O
not	O
particularly	O
clear	O
how	O
they	O
are	O
meant	O
to	O
be	O
used	O
.	O
What	O
is	O
the	O
difference	O
between	O
these	O
,	O
and	O
in	O
what	O
circumstances	O
should	O
you	O
use	O
one	O
rather	O
than	O
the	O
others	O
?	O
Question	O
-	O
15182496	O
,	O
answer	O
-	O
15182578	O
The	O
other	O
answers	O
explain	O
why	O
,	O
but	O
here	O
is	O
how	O
:	O
new	O
Random	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
The	O
first	O
6	O
numbers	O
that	O
the	O
above	O
random	O
generates	O
are	O
:	O
#	O
pre	O
and	O
the	O
first	O
6	O
numbers	O
that	O
new	O
Random	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
generates	O
are	O
:	O
#	O
pre	O
Then	O
just	O
add	O
those	O
numbers	O
to	O
the	O
integer	O
representation	O
of	O
the	O
character	O
`	O
(	O
which	O
is	O
96	O
)	O
:	O
#	O
pre	O
Question	O
-	O
32312876	O
,	O
answer	O
-	O
32313069	O
This	O
is	O
possible	O
using	O
the	O
mergeFunction	O
parameter	O
of	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
keyMapper	I-api_mention
,	I-api_mention
valueMapper	I-api_mention
,	I-api_mention
mergeFunction	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
mergeFunction	O
is	O
a	O
function	O
that	O
operates	O
on	O
two	O
values	O
associated	O
with	O
the	O
same	O
key	O
.	O
adress1	O
corresponds	O
to	O
the	O
first	O
address	O
that	O
was	O
encountered	O
when	O
collecting	O
elements	O
and	O
adress2	O
corresponds	O
to	O
the	O
second	O
address	O
encountered	O
:	O
this	O
lambda	O
just	O
tells	O
to	O
keep	O
the	O
first	O
address	O
and	O
ignores	O
the	O
second	O
.	O
Question	O
-	O
8275499	O
,	O
answer	O
-	O
8275508	O
Just	O
use	O
TheClassName	O
.	O
class	O
instead	O
of	O
getClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
15336477	O
,	O
answer	O
-	O
15336606	O
It	O
got	O
deprecated	O
in	O
version	O
4	O
.	O
3	O
-	O
alpha1	O
which	O
you	O
use	O
because	O
of	O
the	O
LATEST	O
version	O
specification	O
.	O
If	O
you	O
take	O
a	O
look	O
at	O
the	O
javadoc	O
of	O
the	O
class	O
,	O
it	O
tells	O
you	O
what	O
to	O
use	O
instead	O
:	O
HttpClientBuilder	B-api_mention
.	O
In	O
the	O
latest	O
stable	O
version	O
(	O
4	O
.	O
2	O
.	O
3	O
)	O
the	O
DefaultHttpClient	B-api_mention
is	O
not	O
deprecated	O
yet	O
.	O
Question	O
-	O
15430247	O
The	O
usual	O
constructor	O
of	O
ArrayList	B-api_mention
is	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
there	O
is	O
also	O
an	O
overloaded	O
constructor	O
with	O
a	O
parameter	O
for	O
its	O
initial	O
capacity	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Why	O
is	O
it	O
useful	O
to	O
create	O
an	O
ArrayList	B-api_mention
with	O
an	O
initial	O
capacity	O
when	O
we	O
can	O
append	O
to	O
it	O
as	O
we	O
please	O
?	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
32866218	O
The	O
main	O
reason	O
with	O
HashMap	B-api_mention
not	O
allowing	O
primitive	O
as	O
keys	O
is	O
that	O
HashMap	B-api_mention
is	O
designed	O
in	O
such	O
a	O
way	O
that	O
for	O
comparing	O
the	O
keys	O
,	O
it	O
makes	O
use	O
of	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
,	O
and	O
a	O
method	O
can	O
be	O
called	O
only	O
on	O
an	O
object	O
not	O
on	O
a	O
primitive	O
.	O
Thus	O
when	O
int	O
is	O
autoboxed	O
to	O
Integer	B-api_mention
,	O
Hashmap	O
can	O
call	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
on	O
Integer	B-api_mention
object	O
.	O
That	O
is	O
why	O
,	O
you	O
should	O
use	O
Integer	B-api_mention
instead	O
of	O
int	O
.	O
I	O
mean	O
hashmap	O
throws	O
an	O
error	O
while	O
putting	O
int	O
as	O
a	O
key	O
(	O
Don	O
'	O
t	O
know	O
the	O
meaning	O
of	O
the	O
error	O
that	O
is	O
thrown	O
)	O
And	O
if	O
you	O
think	O
that	O
,	O
you	O
can	O
make	O
Map	B-api_mention
performance	O
faster	O
by	O
making	O
a	O
primitive	O
as	O
a	O
key	O
,	O
there	O
is	O
a	O
library	O
called	O
FastUtil	B-api_mention
which	O
contains	O
a	O
Map	B-api_mention
implementation	O
with	O
int	O
type	O
as	O
a	O
key	O
.	O
Because	O
of	O
this	O
,	O
it	O
is	O
much	O
faster	O
than	O
Hashmap	O
Question	O
-	O
6416706	O
,	O
answer	O
-	O
6416800	O
With	O
Guava	O
you	O
can	O
use	O
Lists	B-api_mention
.	I-api_mention
newArrayList	I-api_mention
(	I-api_mention
Iterable	I-api_mention
)	I-api_mention
or	O
Sets	B-api_mention
.	I-api_mention
newHashSet	I-api_mention
(	I-api_mention
Iterable	I-api_mention
)	I-api_mention
,	O
among	O
other	O
similar	O
methods	O
.	O
This	O
will	O
of	O
course	O
copy	O
all	O
the	O
elements	O
in	O
to	O
memory	O
.	O
If	O
that	O
isn	O
'	O
t	O
acceptable	O
,	O
I	O
think	O
your	O
code	O
that	O
works	O
with	O
these	O
ought	O
to	O
take	O
Iterable	B-api_mention
rather	O
than	O
Collection	B-api_mention
.	O
Guava	O
also	O
happens	O
to	O
provide	O
convenient	O
methods	O
for	O
doing	O
things	O
you	O
can	O
do	O
on	O
a	O
Collection	B-api_mention
using	O
an	O
Iterable	B-api_mention
(	O
such	O
as	O
Iterables	B-api_mention
.	I-api_mention
isEmpty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Iterables	B-api_mention
.	I-api_mention
contains	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
,	O
but	O
the	O
performance	O
implications	O
are	O
more	O
obvious	O
.	O
Question	O
-	O
23218874	O
I	O
understand	O
that	O
with	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
can	O
use	O
chain	O
operations	O
like	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
use	O
parallel	O
stream	O
.	O
But	O
what	O
is	O
difference	O
between	O
them	O
if	O
I	O
need	O
to	O
execute	O
small	O
operations	O
(	O
for	O
example	O
,	O
printing	O
the	O
elements	O
of	O
the	O
list	O
)	O
?	O
#	O
pre	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
33375616	O
Most	O
of	O
these	O
answers	O
miss	O
the	O
big	O
picture	O
,	O
which	O
is	O
that	O
,	O
as	O
far	O
as	O
the	O
Java	O
language	O
is	O
concerned	O
,	O
there	O
is	O
no	O
more	O
difference	O
between	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
than	O
there	O
is	O
between	O
any	O
other	O
two	O
methods	O
.	O
They	O
'	O
re	O
both	O
just	O
methods	O
.	O
They	O
both	O
run	O
in	O
the	O
thread	O
that	O
called	O
them	O
.	O
They	O
both	O
do	O
whatever	O
they	O
were	O
coded	O
to	O
do	O
,	O
and	O
then	O
they	O
both	O
return	O
,	O
still	O
in	O
the	O
same	O
thread	O
,	O
to	O
their	O
callers	O
.	O
The	O
biggest	O
difference	O
is	O
that	O
most	O
of	O
the	O
code	O
for	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
native	O
code	O
while	O
,	O
in	O
most	O
cases	O
,	O
the	O
code	O
for	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
going	O
to	O
be	O
pure	O
Java	O
.	O
But	O
that	O
'	O
s	O
not	O
much	O
of	O
a	O
difference	O
.	O
Code	O
is	O
code	O
.	O
Native	O
code	O
is	O
harder	O
to	O
find	O
,	O
and	O
harder	O
to	O
understand	O
when	O
you	O
find	O
it	O
,	O
but	O
it	O
'	O
s	O
still	O
just	O
code	O
that	O
tells	O
the	O
computer	O
what	O
to	O
do	O
.	O
So	O
,	O
what	O
does	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
do	O
?	O
It	O
creates	O
a	O
new	O
native	O
thread	O
,	O
it	O
arranges	O
for	O
that	O
thread	O
to	O
call	O
t	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
it	O
tells	O
the	O
OS	O
to	O
let	O
the	O
new	O
thread	O
run	O
.	O
Then	O
it	O
returns	O
.	O
And	O
what	O
does	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
do	O
?	O
The	O
funny	O
thing	O
is	O
,	O
the	O
person	O
asking	O
this	O
question	O
is	O
the	O
person	O
who	O
wrote	O
it	O
.	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
whatever	O
you	O
(	O
i	O
.	O
e	O
.	O
,	O
the	O
developer	O
who	O
wrote	O
it	O
)	O
designed	O
it	O
to	O
do	O
.	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
method	O
that	O
the	O
library	O
provides	O
for	O
your	O
code	O
to	O
call	O
when	O
you	O
want	O
a	O
new	O
thread	O
.	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
method	O
that	O
you	O
provide	O
for	O
the	O
library	O
to	O
call	O
in	O
the	O
new	O
thread	O
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
7521675	O
Just	O
remember	O
that	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
to	O
be	O
implemented	O
by	O
the	O
class	O
you	O
are	O
trying	O
to	O
compare	O
.	O
Otherwise	O
,	O
there	O
isn	O
'	O
t	O
much	O
of	O
a	O
point	O
;	O
the	O
version	O
of	O
the	O
method	O
for	O
the	O
Object	B-api_mention
class	O
does	O
the	O
same	O
thing	O
as	O
the	O
comparison	O
operation	O
:	O
Object	B-api_mention
#	I-api_mention
equals	I-api_mention
.	O
The	O
only	O
time	O
you	O
really	O
want	O
to	O
use	O
the	O
comparison	O
operator	O
for	O
objects	O
is	O
wen	O
you	O
are	O
comparing	O
Enums	O
.	O
This	O
is	O
because	O
there	O
is	O
only	O
one	O
instance	O
of	O
an	O
Enum	O
value	O
at	O
a	O
time	O
.	O
For	O
instance	O
,	O
given	O
the	O
enum	O
enum	O
FooEnum	O
{	O
A	O
,	O
B	O
,	O
C	O
}	O
You	O
will	O
never	O
have	O
more	O
than	O
one	O
instance	O
of	O
A	O
at	O
a	O
time	O
,	O
and	O
the	O
same	O
for	O
B	O
and	O
C	O
.	O
This	O
means	O
that	O
you	O
can	O
actually	O
write	O
a	O
method	O
like	O
so	O
:	O
#	O
pre	O
And	O
you	O
will	O
have	O
no	O
problems	O
whatsoever	O
.	O
Question	O
-	O
5071040	O
,	O
answer	O
-	O
5071064	O
There	O
are	O
multiple	O
ways	O
:	O
#	O
li	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
my	O
preference	O
)	O
#	O
li	O
StringLiteral	O
+	O
number	O
(	O
I	O
don	O
'	O
t	O
know	O
how	O
the	O
compiler	O
handles	O
it	O
,	O
perhaps	O
it	O
is	O
as	O
efficient	O
as	O
the	O
above	O
)	O
#	O
li	O
Integer	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
16324831	O
,	O
answer	O
-	O
16324963	O
Note	O
:	O
everything	O
in	O
this	O
post	O
is	O
in	O
the	O
source	O
of	O
Java7	O
-	O
b147	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
goes	O
into	O
a	O
Sun	O
library	O
(	O
in	O
sun	B-api_mention
.	I-api_mention
misc	I-api_mention
.	I-api_mention
FloatingDecimal	I-api_mention
)	O
the	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
done	O
manually	O
in	O
the	O
Integer	B-api_mention
class	O
.	O
The	O
first	O
important	O
thing	O
that	O
happens	O
is	O
:	O
#	O
pre	O
I	O
would	O
guess	O
there	O
are	O
two	O
different	O
authors	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32749756	O
I	O
'	O
m	O
going	O
to	O
shoot	O
in	O
the	O
dark	O
here	O
.	O
.	O
.	O
My	O
guess	O
is	O
that	O
it	O
might	O
have	O
been	O
changed	O
in	O
order	O
to	O
prepare	O
the	O
ground	O
for	O
Specialization	O
(	O
aka	O
generics	O
over	O
primitive	O
types	O
)	O
.	O
Maybe	O
(	O
and	O
I	O
insist	O
on	O
maybe	O
)	O
,	O
this	O
change	O
is	O
meant	O
to	O
make	O
transition	O
to	O
Java	O
10	O
easier	O
,	O
in	O
the	O
event	O
of	O
specialization	O
being	O
part	O
of	O
the	O
JDK	O
.	O
If	O
you	O
look	O
at	O
the	O
State	O
of	O
the	O
Specialization	O
document	O
,	O
Language	O
restrictions	O
section	O
,	O
it	O
says	O
the	O
following	O
:	O
#	O
blockquote	O
(	O
Emphasis	O
is	O
mine	O
)	O
.	O
And	O
ahead	O
in	O
the	O
Specializer	O
transformations	O
section	O
,	O
it	O
says	O
:	O
#	O
blockquote	O
Later	O
on	O
,	O
near	O
the	O
end	O
of	O
the	O
document	O
,	O
in	O
the	O
Further	O
investigation	O
section	O
,	O
it	O
says	O
:	O
#	O
blockquote	O
Now	O
,	O
regarding	O
the	O
change	O
.	O
.	O
.	O
If	O
the	O
Arrays	O
.	O
fill	O
(	O
args	O
)	O
method	O
is	O
going	O
to	O
be	O
specialized	O
,	O
then	O
its	O
signature	O
should	O
change	O
to	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
However	O
this	O
case	O
is	O
specifically	O
listed	O
in	O
the	O
(	O
already	O
mentioned	O
)	O
Language	O
restrictions	O
section	O
(	O
it	O
would	O
violate	O
the	O
emphasized	O
items	O
)	O
.	O
So	O
maybe	O
someone	O
decided	O
that	O
it	O
would	O
be	O
better	O
to	O
not	O
use	O
it	O
from	O
the	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
especially	O
if	O
value	O
is	O
null	O
.	O
Question	O
-	O
5769669	O
,	O
answer	O
-	O
5769679	O
You	O
can	O
use	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
convert	O
a	O
String	B-api_mention
to	O
a	O
double	O
:	O
#	O
pre	O
For	O
your	O
case	O
it	O
looks	O
like	O
you	O
want	O
:	O
#	O
pre	O
Question	O
-	O
9297899	O
We	O
can	O
determine	O
the	O
length	O
of	O
an	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
using	O
its	O
public	O
method	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
like	O
#	O
pre	O
Similarly	O
we	O
can	O
determine	O
the	O
length	O
of	O
an	O
Array	O
object	O
using	O
the	O
length	O
property	O
#	O
pre	O
Whereas	O
the	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
ArrayList	B-api_mention
is	O
defined	O
inside	O
the	O
ArrayList	B-api_mention
class	O
,	O
where	O
is	O
this	O
length	O
property	O
of	O
Array	O
defined	O
?	O
Question	O
-	O
22694884	O
,	O
answer	O
-	O
39385411	O
As	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
a	O
throwing	O
merger	O
to	O
handle	O
multiple	O
entries	O
with	O
the	O
same	O
key	O
it	O
is	O
easy	O
:	O
#	O
pre	O
You	O
will	O
get	O
a	O
IllegalStateException	B-api_mention
for	O
duplicate	O
keys	O
.	O
But	O
at	O
the	O
end	O
I	O
am	O
not	O
sure	O
if	O
the	O
code	O
would	O
not	O
be	O
even	O
more	O
readable	O
using	O
an	O
if	O
.	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17836189	O
I	O
think	O
the	O
others	O
have	O
done	O
a	O
good	O
job	O
at	O
explaining	O
why	O
cnt	O
>	O
0	O
,	O
but	O
there	O
'	O
s	O
not	O
enough	O
details	O
regarding	O
why	O
cnt	O
=	O
4	O
,	O
and	O
why	O
cnt	O
varies	O
so	O
widely	O
among	O
different	O
settings	O
.	O
I	O
will	O
attempt	O
to	O
fill	O
that	O
void	O
here	O
.	O
Let	O
#	O
li	O
X	O
be	O
the	O
total	O
stack	O
size	O
#	O
li	O
M	O
be	O
the	O
stack	O
space	O
used	O
when	O
we	O
enter	O
main	O
the	O
first	O
time	O
#	O
li	O
R	O
be	O
the	O
stack	O
space	O
increase	O
each	O
time	O
we	O
enter	O
into	O
main	O
#	O
li	O
P	O
be	O
the	O
stack	O
space	O
necessary	O
to	O
run	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
When	O
we	O
first	O
get	O
into	O
main	O
,	O
the	O
space	O
left	O
over	O
is	O
X	O
-	O
M	O
.	O
Each	O
recursive	O
call	O
takes	O
up	O
R	O
more	O
memory	O
.	O
So	O
for	O
1	O
recursive	O
call	O
(	O
1	O
more	O
than	O
original	O
)	O
,	O
the	O
memory	O
use	O
is	O
M	O
+	O
R	O
.	O
Suppose	O
that	O
StackOverflowError	B-api_mention
is	O
thrown	O
after	O
C	O
successful	O
recursive	O
calls	O
,	O
that	O
is	O
,	O
M	O
+	O
C	O
*	O
R	O
<	O
=	O
X	O
and	O
M	O
+	O
C	O
*	O
(	O
R	O
+	O
1	O
)	O
>	O
X	O
.	O
At	O
the	O
time	O
of	O
the	O
first	O
StackOverflowError	B-api_mention
,	O
there	O
'	O
s	O
X	O
-	O
M	O
-	O
C	O
*	O
R	O
memory	O
left	O
.	O
To	O
be	O
able	O
to	O
run	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
prinln	I-api_mention
,	O
we	O
need	O
P	O
amount	O
of	O
space	O
left	O
on	O
the	O
stack	O
.	O
If	O
it	O
so	O
happens	O
that	O
X	O
-	O
M	O
-	O
C	O
*	O
R	O
>	O
=	O
P	O
,	O
then	O
0	O
will	O
be	O
printed	O
.	O
If	O
P	O
requires	O
more	O
space	O
,	O
then	O
we	O
remove	O
frames	O
from	O
the	O
stack	O
,	O
gaining	O
R	O
memory	O
at	O
the	O
cost	O
of	O
cnt	O
+	O
+	O
.	O
When	O
println	B-api_mention
is	O
finally	O
able	O
to	O
run	O
,	O
X	O
-	O
M	O
-	O
(	O
C	O
-	O
cnt	O
)	O
*	O
R	O
>	O
=	O
P	O
.	O
So	O
if	O
P	O
is	O
large	O
for	O
a	O
particular	O
system	O
,	O
then	O
cnt	O
will	O
be	O
large	O
.	O
Let	O
'	O
s	O
look	O
at	O
this	O
with	O
some	O
examples	O
.	O
Example	O
1	O
:	O
Suppose	O
#	O
li	O
X	O
=	O
100	O
#	O
li	O
M	O
=	O
1	O
#	O
li	O
R	O
=	O
2	O
#	O
li	O
P	O
=	O
1	O
Then	O
C	O
=	O
floor	O
(	O
(	O
X	O
-	O
M	O
)	O
/	O
R	O
)	O
=	O
49	O
,	O
and	O
cnt	O
=	O
ceiling	O
(	O
(	O
P	O
-	O
(	O
X	O
-	O
M	O
-	O
C	O
*	O
R	O
)	O
)	O
/	O
R	O
)	O
=	O
0	O
.	O
Example	O
2	O
:	O
Suppose	O
that	O
#	O
li	O
X	O
=	O
100	O
#	O
li	O
M	O
=	O
1	O
#	O
li	O
R	O
=	O
5	O
#	O
li	O
P	O
=	O
12	O
Then	O
C	O
=	O
19	O
,	O
and	O
cnt	O
=	O
2	O
.	O
Example	O
3	O
:	O
Suppose	O
that	O
#	O
li	O
X	O
=	O
101	O
#	O
li	O
M	O
=	O
1	O
#	O
li	O
R	O
=	O
5	O
#	O
li	O
P	O
=	O
12	O
Then	O
C	O
=	O
20	O
,	O
and	O
cnt	O
=	O
3	O
.	O
Example	O
4	O
:	O
Suppose	O
that	O
#	O
li	O
X	O
=	O
101	O
#	O
li	O
M	O
=	O
2	O
#	O
li	O
R	O
=	O
5	O
#	O
li	O
P	O
=	O
12	O
Then	O
C	O
=	O
19	O
,	O
and	O
cnt	O
=	O
2	O
.	O
Thus	O
,	O
we	O
see	O
that	O
both	O
the	O
system	O
(	O
M	O
,	O
R	O
,	O
and	O
P	O
)	O
and	O
the	O
stack	O
size	O
(	O
X	O
)	O
affects	O
cnt	O
.	O
As	O
a	O
side	O
note	O
,	O
it	O
does	O
not	O
matter	O
how	O
much	O
space	O
catch	O
requires	O
to	O
start	O
.	O
As	O
long	O
as	O
there	O
is	O
not	O
enough	O
space	O
for	O
catch	O
,	O
then	O
cnt	O
will	O
not	O
increase	O
,	O
so	O
there	O
are	O
no	O
external	O
effects	O
.	O
EDIT	O
I	O
take	O
back	O
what	O
I	O
said	O
about	O
catch	O
.	O
It	O
does	O
play	O
a	O
role	O
.	O
Suppose	O
it	O
requires	O
T	O
amount	O
of	O
space	O
to	O
start	O
.	O
cnt	O
starts	O
to	O
increment	O
when	O
the	O
leftover	O
space	O
is	O
greater	O
than	O
T	O
,	O
and	O
println	B-api_mention
runs	O
when	O
the	O
leftover	O
space	O
is	O
greater	O
than	O
T	O
+	O
P	O
.	O
This	O
adds	O
an	O
extra	O
step	O
to	O
the	O
calculations	O
and	O
further	O
muddies	O
up	O
the	O
already	O
muddy	O
analysis	O
.	O
EDIT	O
I	O
finally	O
found	O
time	O
to	O
run	O
some	O
experiments	O
to	O
back	O
up	O
my	O
theory	O
.	O
Unfortunately	O
,	O
the	O
theory	O
doesn	O
'	O
t	O
seem	O
to	O
match	O
up	O
with	O
the	O
experiments	O
.	O
What	O
actually	O
happens	O
is	O
very	O
different	O
.	O
Experiment	O
setup	O
:	O
Ubuntu	O
12	O
.	O
04	O
server	O
with	O
default	O
java	O
and	O
default	O
-	O
jdk	O
.	O
Xss	O
starting	O
at	O
70	O
,	O
000	O
at	O
1	O
byte	O
increments	O
to	O
460	O
,	O
000	O
.	O
The	O
results	O
are	O
available	O
at	O
:	O
#	O
a	O
I	O
'	O
ve	O
created	O
another	O
version	O
where	O
every	O
repeated	O
data	O
point	O
is	O
removed	O
.	O
In	O
other	O
words	O
,	O
only	O
points	O
that	O
are	O
different	O
from	O
the	O
previous	O
are	O
shown	O
.	O
This	O
makes	O
it	O
easier	O
to	O
see	O
anomalies	O
.	O
#	O
a	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20945268	O
In	O
Java	O
,	O
if	O
two	O
string	O
primitive	O
variables	O
are	O
initialized	O
to	O
the	O
same	O
literal	O
,	O
it	O
assigns	O
the	O
same	O
reference	O
to	O
both	O
variables	O
:	O
#	O
pre	O
#	O
blockquote	O
That	O
is	O
the	O
reason	O
the	O
comparison	O
returns	O
true	O
.	O
The	O
third	O
string	O
is	O
created	O
using	O
substring	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
makes	O
a	O
new	O
string	O
instead	O
of	O
pointing	O
to	O
the	O
same	O
.	O
#	O
blockquote	O
When	O
you	O
access	O
a	O
string	O
using	O
reflection	O
,	O
you	O
get	O
the	O
actual	O
pointer	O
:	O
#	O
pre	O
So	O
change	O
to	O
this	O
will	O
change	O
the	O
string	O
holding	O
a	O
pointer	O
to	O
it	O
,	O
but	O
as	O
s3	O
is	O
created	O
with	O
a	O
new	O
string	O
due	O
to	O
substring	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
would	O
not	O
change	O
.	O
#	O
blockquote	O
Question	O
-	O
5455794	O
,	O
answer	O
-	O
5455820	O
How	O
about	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Refer	O
here	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
26159918	O
invoke	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
executing	O
on	O
the	O
calling	O
thread	O
,	O
like	O
any	O
other	O
method	O
call	O
.	O
whereas	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
new	O
thread	O
.	O
invoking	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
programmatic	O
bug	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32745612	O
For	O
me	O
,	O
the	O
reason	O
is	O
a	O
likely	O
performance	O
inprovement	O
,	O
at	O
a	O
negligible	O
cost	O
in	O
terms	O
of	O
code	O
clarity	O
.	O
Note	O
that	O
the	O
implementation	O
of	O
the	O
fill	O
method	O
is	O
trivial	O
,	O
a	O
simple	O
for	O
-	O
loop	O
setting	O
each	O
array	O
element	O
to	O
null	O
.	O
So	O
,	O
replacing	O
a	O
call	O
to	O
it	O
with	O
the	O
actual	O
implementation	O
does	O
not	O
cause	O
any	O
significant	O
degradation	O
in	O
the	O
clarity	O
/	O
conciseness	O
of	O
the	O
caller	O
method	O
.	O
The	O
potential	O
performance	O
benefits	O
are	O
not	O
so	O
insignificant	O
,	O
if	O
you	O
consider	O
everything	O
that	O
is	O
involved	O
:	O
#	O
li	O
There	O
will	O
be	O
no	O
need	O
for	O
the	O
JVM	O
to	O
resolve	O
the	O
Arrays	B-api_mention
class	O
,	O
plus	O
loading	O
and	O
initializing	O
it	O
if	O
needed	O
.	O
This	O
is	O
a	O
non	O
-	O
trivial	O
process	O
where	O
the	O
JVM	O
performs	O
several	O
steps	O
.	O
Firstly	O
,	O
it	O
checks	O
the	O
class	O
loader	O
to	O
see	O
if	O
the	O
class	O
is	O
already	O
loaded	O
,	O
and	O
this	O
happens	O
every	O
time	O
a	O
method	O
is	O
called	O
;	O
there	O
are	O
optimizations	O
involved	O
here	O
,	O
of	O
course	O
,	O
but	O
it	O
still	O
takes	O
some	O
effort	O
.	O
If	O
the	O
class	O
is	O
not	O
loaded	O
,	O
the	O
JVM	O
will	O
need	O
to	O
go	O
through	O
the	O
expensive	O
process	O
of	O
loading	O
it	O
,	O
verifying	O
the	O
bytecode	O
,	O
resolving	O
other	O
necessary	O
dependencies	O
,	O
and	O
finally	O
performing	O
static	O
initialization	O
of	O
the	O
class	O
(	O
which	O
can	O
be	O
arbitrarily	O
expensive	O
)	O
.	O
Given	O
that	O
HashMap	B-api_mention
is	O
such	O
a	O
core	O
class	O
,	O
and	O
that	O
Arrays	B-api_mention
is	O
such	O
a	O
huge	O
class	O
(	O
3600	O
+	O
lines	O
)	O
,	O
avoiding	O
these	O
costs	O
may	O
add	O
up	O
to	O
noticeable	O
savings	O
.	O
#	O
li	O
Since	O
there	O
is	O
no	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
call	O
,	O
the	O
JVM	O
won	O
'	O
t	O
have	O
to	O
decide	O
whether	O
/	O
when	O
to	O
inline	O
the	O
method	O
into	O
the	O
caller	O
'	O
s	O
body	O
.	O
Since	O
HashMap	B-api_mention
#	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
tends	O
to	O
get	O
called	O
a	O
lot	O
,	O
the	O
JVM	O
will	O
eventually	O
perform	O
the	O
inlining	O
,	O
which	O
requires	O
JIT	O
recompilation	O
of	O
the	O
clear	O
method	O
.	O
With	O
no	O
method	O
calls	O
,	O
clear	O
will	O
always	O
run	O
at	O
top	O
-	O
speed	O
(	O
once	O
initially	O
JITed	O
)	O
.	O
Another	O
benefit	O
of	O
no	O
longer	O
calling	O
methods	O
in	O
Arrays	B-api_mention
is	O
that	O
it	O
simplifies	O
the	O
dependency	O
graph	O
inside	O
the	O
java	O
.	O
util	O
package	O
,	O
since	O
one	O
dependency	O
is	O
removed	O
.	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32820984	O
Let	O
'	O
s	O
rewrite	O
that	O
lambda	O
expression	O
with	O
parentheses	O
to	O
make	O
it	O
more	O
clear	O
:	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
curriedAdd	O
=	O
a	O
-	O
>	O
(	O
b	O
-	O
>	O
(	O
a	O
+	O
b	O
)	O
)	O
;	O
So	O
we	O
are	O
declaring	O
a	O
function	O
taking	O
an	O
int	O
which	O
returns	O
a	O
Function	B-api_mention
.	O
More	O
specifically	O
,	O
the	O
function	O
returned	O
takes	O
an	O
int	O
and	O
returns	O
an	O
int	O
(	O
the	O
sum	O
of	O
the	O
two	O
elements	O
)	O
:	O
this	O
can	O
be	O
represented	O
as	O
an	O
IntUnaryOperator	O
.	O
Therefore	O
,	O
curriedAdd	O
is	O
a	O
function	O
taking	O
an	O
int	O
and	O
returning	O
an	O
IntUnaryOperator	O
,	O
so	O
it	O
can	O
be	O
represented	O
as	O
IntFunction	B-api_mention
<	I-api_mention
IntUnaryOperator	I-api_mention
>	I-api_mention
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7353473	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
better	O
(	O
as	O
explained	O
by	O
Nick	O
)	O
,	O
but	O
still	O
not	O
very	O
good	O
One	O
host	O
can	O
be	O
known	O
under	O
many	O
different	O
hostnames	O
.	O
Usually	O
you	O
'	O
ll	O
be	O
looking	O
for	O
the	O
hostname	O
your	O
host	O
has	O
in	O
a	O
specific	O
context	O
.	O
For	O
example	O
,	O
in	O
a	O
web	O
application	O
,	O
you	O
might	O
be	O
looking	O
for	O
the	O
hostname	O
used	O
by	O
whoever	O
issued	O
the	O
request	O
you	O
'	O
re	O
currently	O
handling	O
.	O
How	O
to	O
best	O
find	O
that	O
one	O
depends	O
on	O
which	O
framework	O
you	O
'	O
re	O
using	O
for	O
your	O
web	O
application	O
.	O
In	O
some	O
kind	O
of	O
other	O
internet	O
-	O
facing	O
service	O
,	O
you	O
'	O
ll	O
want	O
the	O
hostname	O
your	O
service	O
is	O
available	O
through	O
from	O
the	O
'	O
outside	O
'	O
.	O
Due	O
to	O
proxies	O
,	O
firewalls	O
etc	O
this	O
might	O
not	O
even	O
be	O
a	O
hostname	O
on	O
the	O
machine	O
your	O
service	O
is	O
installed	O
on	O
-	O
you	O
might	O
try	O
to	O
come	O
up	O
with	O
a	O
reasonable	O
default	O
,	O
but	O
you	O
should	O
definitely	O
make	O
this	O
configurable	O
for	O
whoever	O
installs	O
this	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
25757711	O
ArrayList	B-api_mention
shrinks	O
or	O
expands	O
dynamically	O
.	O
This	O
is	O
a	O
effective	O
but	O
costly	O
operation	O
,	O
if	O
you	O
know	O
size	O
of	O
your	O
array	O
will	O
be	O
fixed	O
then	O
its	O
better	O
to	O
mention	O
the	O
size	O
of	O
the	O
array	O
,	O
If	O
you	O
don	O
'	O
t	O
,	O
new	O
array	O
will	O
be	O
created	O
at	O
each	O
insertion	O
and	O
reallocation	O
will	O
be	O
done	O
for	O
each	O
element	O
.	O
this	O
will	O
cost	O
you	O
.	O
ensureCapacity	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
this	O
method	O
help	O
to	O
avoid	O
reallocations	O
and	O
helps	O
increase	O
size	O
of	O
arraylist	O
.	O
trimToSize	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
this	O
is	O
reverse	O
used	O
to	O
shrink	O
size	O
Arraylist	B-api_mention
has	O
3	O
constructors	O
:	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
)	I-api_mention
-	O
builds	O
empty	O
ArrayList	B-api_mention
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
Collection	I-api_mention
c	I-api_mention
)	I-api_mention
-	O
builds	O
a	O
ArrayList	B-api_mention
initialized	O
with	O
elements	O
of	O
collection	O
c	O
.	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
int	I-api_mention
capacity	I-api_mention
)	I-api_mention
-	O
builds	O
an	O
ArrayList	B-api_mention
with	O
specified	O
initial	O
capacity	O
.	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29495065	O
#	O
li	O
It	O
is	O
checking	O
if	O
newType	O
is	O
array	O
of	O
Objects	O
or	O
not	O
:	O
#	O
pre	O
Why	O
to	O
do	O
that	O
?	O
Because	O
new	O
Object	B-api_mention
[	O
n	O
]	O
is	O
faster	O
than	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
an	O
array	O
of	O
types	O
defined	O
by	O
the	O
first	O
argument	O
,	O
eg	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
-	O
>	O
String	B-api_mention
[	O
]	O
.	O
Note	O
that	O
String	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
.	I-api_mention
getComponentType	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
String	B-api_mention
.	I-api_mention
class	I-api_mention
#	O
li	O
You	O
cannot	O
use	O
it	O
like	O
that	O
,	O
but	O
it	O
can	O
be	O
like	O
this	O
Integer	B-api_mention
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
in	O
this	O
case	O
it	O
depends	O
only	O
on	O
actual	O
type	O
of	O
elements	O
,	O
eg	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
will	O
fail	O
,	O
you	O
cannot	O
write	O
in	O
Integer	B-api_mention
[	O
]	O
anything	O
but	O
Integer	B-api_mention
Question	O
-	O
7348711	O
,	O
answer	O
-	O
28043703	O
As	O
others	O
have	O
noted	O
,	O
getting	O
the	O
hostname	O
based	O
on	O
DNS	O
resolution	O
is	O
unreliable	O
.	O
Since	O
this	O
question	O
is	O
unfortunately	O
still	O
relevant	O
in	O
2016	O
,	O
I	O
'	O
d	O
like	O
to	O
share	O
with	O
you	O
my	O
network	O
-	O
independent	O
solution	O
,	O
with	O
some	O
test	O
runs	O
on	O
different	O
systems	O
.	O
The	O
following	O
code	O
tries	O
to	O
do	O
the	O
following	O
:	O
#	O
li	O
On	O
Windows	O
#	O
li	O
Read	O
the	O
COMPUTERNAME	O
environment	O
variable	O
through	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Execute	O
hostname	O
.	O
exe	O
and	O
read	O
the	O
response	O
#	O
li	O
On	O
Linux	O
#	O
li	O
Read	O
the	O
HOSTNAME	O
environment	O
variable	O
through	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
Execute	O
hostname	O
and	O
read	O
the	O
response	O
#	O
li	O
Read	O
/	O
etc	O
/	O
hostname	O
(	O
to	O
do	O
this	O
I	O
'	O
m	O
executing	O
cat	O
since	O
the	O
snippet	O
already	O
contains	O
code	O
to	O
execute	O
and	O
read	O
.	O
Simply	O
reading	O
the	O
file	O
would	O
be	O
better	O
,	O
though	O
)	O
.	O
The	O
code	O
:	O
#	O
pre	O
Results	O
for	O
different	O
operating	O
systems	O
:	O
OpenSuse	O
13	O
.	O
1	O
#	O
pre	O
Ubuntu	O
14	O
.	O
04	O
LTS	O
This	O
one	O
is	O
kinda	O
strange	O
since	O
echo	O
$	O
HOSTNAME	O
returns	O
the	O
correct	O
hostname	O
,	O
but	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
:	O
#	O
pre	O
EDIT	O
:	O
According	O
to	O
legolas108	O
,	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
works	O
on	O
Ubuntu	O
14	O
.	O
04	O
if	O
you	O
run	O
export	O
HOSTNAME	O
before	O
executing	O
the	O
Java	O
code	O
.	O
Windows	O
7	O
#	O
pre	O
The	O
machine	O
names	O
have	O
been	O
replaced	O
but	O
I	O
kept	O
the	O
capitalization	O
and	O
structure	O
.	O
Note	O
the	O
extra	O
newline	O
when	O
executing	O
hostname	O
,	O
you	O
might	O
have	O
to	O
take	O
it	O
into	O
account	O
in	O
some	O
cases	O
.	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173040	O
Since	O
there	O
are	O
only	O
4	O
elements	O
that	O
pass	O
the	O
filter	O
,	O
limit	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
never	O
reaches	O
10	O
elements	O
,	O
so	O
the	O
Stream	B-api_mention
pipeline	O
keeps	O
generating	O
new	O
elements	O
and	O
feeding	O
them	O
to	O
the	O
filter	O
,	O
trying	O
to	O
reach	O
10	O
elements	O
that	O
pass	O
the	O
filter	O
,	O
but	O
since	O
only	O
the	O
first	O
4	O
elements	O
pass	O
the	O
filter	O
,	O
the	O
processing	O
never	O
ends	O
(	O
at	O
least	O
until	O
i	O
overflows	O
)	O
.	O
The	O
Stream	B-api_mention
pipeline	O
is	O
not	O
smart	O
enough	O
to	O
know	O
that	O
no	O
more	O
elements	O
can	O
pass	O
the	O
filter	O
,	O
so	O
it	O
keeps	O
processing	O
new	O
elements	O
.	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
15357940	O
Or	O
simply	O
mystring	O
.	B-api_mention
matches	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
it	O
would	O
return	O
true	O
for	O
numbers	O
larger	O
than	O
an	O
int	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31190722	O
We	O
can	O
draw	O
a	O
parallel	O
with	O
abstract	O
class	O
.	O
An	O
abstract	O
class	O
is	O
intended	O
to	O
be	O
subclassed	O
so	O
that	O
the	O
abstract	O
methods	O
can	O
be	O
implemented	O
.	O
The	O
abstract	O
class	O
itself	O
contains	O
concrete	O
methods	O
that	O
invoke	O
the	O
abstract	O
methods	O
.	O
The	O
abstract	O
class	O
is	O
free	O
to	O
evolve	O
by	O
adding	O
more	O
concrete	O
methods	O
;	O
and	O
this	O
practice	O
may	O
break	O
subclasses	O
.	O
Therefore	O
the	O
exact	O
problem	O
you	O
described	O
existed	O
even	O
before	O
Java8	O
.	O
The	O
problem	O
is	O
much	O
more	O
manifested	O
on	O
Collection	B-api_mention
APIs	O
because	O
there	O
are	O
a	O
lot	O
of	O
subclasses	O
out	O
in	O
the	O
wild	O
.	O
While	O
the	O
leading	O
motivation	O
of	O
default	O
method	O
was	O
to	O
add	O
some	O
useful	O
methods	O
to	O
existing	O
Collection	B-api_mention
APIs	O
without	O
breaking	O
subclasses	O
,	O
they	O
had	O
to	O
exercise	O
great	O
self	O
-	O
control	O
of	O
doing	O
it	O
too	O
much	O
,	O
for	O
fear	O
of	O
breaking	O
subclasses	O
.	O
A	O
default	O
method	O
is	O
added	O
only	O
if	O
it	O
'	O
s	O
absolutely	O
necessary	O
.	O
The	O
real	O
question	O
here	O
is	O
,	O
why	O
List	B-api_mention
.	I-api_mention
sort	I-api_mention
is	O
considered	O
absolutely	O
necessary	O
.	O
I	O
think	O
that	O
is	O
debatable	O
.	O
Regardless	O
of	O
why	O
default	O
method	O
was	O
introduced	O
in	O
the	O
1st	O
place	O
,	O
it	O
is	O
now	O
a	O
great	O
tool	O
for	O
API	O
designers	O
,	O
and	O
we	O
ought	O
to	O
treat	O
it	O
the	O
same	O
as	O
concrete	O
methods	O
in	O
abstract	O
classes	O
-	O
they	O
need	O
to	O
be	O
designed	O
carefully	O
up	O
front	O
;	O
and	O
new	O
ones	O
must	O
be	O
introduced	O
with	O
great	O
caution	O
.	O
Question	O
-	O
12146298	O
I	O
would	O
like	O
to	O
know	O
what	O
is	O
the	O
cleanest	O
and	O
best	O
way	O
to	O
perform	O
form	O
validation	O
of	O
user	O
inputs	O
.	O
I	O
have	O
seen	O
some	O
developers	O
implement	O
org	B-api_mention
.	I-api_mention
springframework	I-api_mention
.	I-api_mention
validation	I-api_mention
.	I-api_mention
Validator	I-api_mention
.	O
A	O
question	O
about	O
that	O
:	O
I	O
saw	O
it	O
validates	O
a	O
class	O
.	O
Does	O
the	O
class	O
have	O
to	O
be	O
filled	O
manually	O
with	O
the	O
values	O
from	O
the	O
user	O
input	O
,	O
and	O
then	O
passed	O
to	O
the	O
validator	O
?	O
I	O
am	O
confused	O
about	O
the	O
cleanest	O
and	O
best	O
way	O
to	O
validate	O
the	O
user	O
input	O
.	O
I	O
know	O
about	O
the	O
traditional	O
method	O
of	O
using	O
request	B-api_mention
.	I-api_mention
getParameter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
then	O
manually	O
checking	O
for	O
nulls	O
,	O
but	O
I	O
don	O
'	O
t	O
want	O
to	O
do	O
all	O
the	O
validation	O
in	O
my	O
Controller	O
.	O
Some	O
good	O
advice	O
on	O
this	O
area	O
will	O
be	O
greatly	O
appreciated	O
.	O
I	O
am	O
not	O
using	O
Hibernate	O
in	O
this	O
application	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16636899	O
I	O
feel	O
that	O
I	O
need	O
to	O
extend	O
my	O
comment	O
a	O
bit	O
.	O
.	O
.	O
About	O
paradigm	O
\	O
style	O
That	O
'	O
s	O
probably	O
the	O
most	O
notable	O
aspect	O
.	O
FP	O
became	O
popular	O
due	O
to	O
what	O
you	O
can	O
get	O
avoiding	O
side	O
-	O
effects	O
.	O
I	O
won	O
'	O
t	O
delve	O
deep	O
into	O
what	O
pros	O
\	O
cons	O
you	O
can	O
get	O
from	O
this	O
,	O
since	O
this	O
is	O
not	O
related	O
to	O
the	O
question	O
.	O
However	O
,	O
I	O
will	O
say	O
that	O
the	O
iteration	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
inspired	O
by	O
FP	O
and	O
rather	O
result	O
of	O
bringing	O
more	O
FP	O
to	O
Java	O
(	O
ironically	O
,	O
I	O
'	O
d	O
say	O
that	O
there	O
is	O
no	O
much	O
use	O
for	O
forEach	B-api_mention
in	O
pure	O
FP	O
,	O
since	O
it	O
does	O
nothing	O
except	O
introducing	O
side	O
-	O
effects	O
)	O
.	O
In	O
the	O
end	O
I	O
would	O
say	O
that	O
it	O
is	O
rather	O
a	O
matter	O
of	O
taste	O
\	O
style	O
\	O
paradigm	O
you	O
are	O
currently	O
writing	O
in	O
.	O
About	O
parallelism	O
.	O
From	O
performance	O
point	O
of	O
view	O
there	O
is	O
no	O
promised	O
notable	O
benefits	O
from	O
using	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
over	O
foreach	O
(	O
.	O
.	O
.	O
)	O
.	O
According	O
to	O
official	O
docs	O
on	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
:	O
#	O
blockquote	O
.	O
.	O
.	O
i	O
.	O
e	O
.	O
docs	O
pretty	O
much	O
clear	O
that	O
there	O
will	O
be	O
no	O
implicit	O
parallelism	O
.	O
Adding	O
one	O
would	O
be	O
LSP	O
violation	O
.	O
Now	O
,	O
there	O
are	O
"	O
parallell	O
collections	O
"	O
that	O
are	O
promised	O
in	O
Java	O
8	O
,	O
but	O
to	O
work	O
with	O
those	O
you	O
need	O
to	O
me	O
more	O
explicit	O
and	O
put	O
some	O
extra	O
care	O
to	O
use	O
them	O
(	O
see	O
mschenk74	O
'	O
s	O
answer	O
for	O
example	O
)	O
.	O
BTW	O
:	O
in	O
this	O
case	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
be	O
used	O
,	O
and	O
it	O
doesn	O
'	O
t	O
guarantee	O
that	O
actual	O
work	O
will	O
be	O
done	O
in	O
parallell	O
(	O
depends	O
on	O
underlying	O
collection	O
)	O
.	O
UPDATE	O
:	O
might	O
be	O
not	O
that	O
obvious	O
and	O
a	O
little	O
stretched	O
at	O
a	O
glance	O
but	O
there	O
is	O
another	O
facet	O
of	O
style	O
and	O
readability	O
perspective	O
.	O
First	O
of	O
all	O
-	O
plain	O
old	O
forloops	O
are	O
plain	O
and	O
old	O
.	O
Everybody	O
already	O
knows	O
them	O
.	O
Second	O
,	O
and	O
more	O
important	O
-	O
you	O
probably	O
want	O
to	O
use	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
only	O
with	O
one	O
-	O
liner	O
lambdas	O
.	O
If	O
"	O
body	O
"	O
gets	O
heavier	O
-	O
they	O
tend	O
to	O
be	O
not	O
-	O
that	O
readable	O
.	O
You	O
have	O
2	O
options	O
from	O
here	O
-	O
use	O
inner	O
classes	O
(	O
yuck	O
)	O
or	O
use	O
plain	O
old	O
forloop	O
.	O
People	O
often	O
gets	O
annoyed	O
when	O
they	O
see	O
the	O
same	O
things	O
(	O
iteratins	O
over	O
collections	O
)	O
being	O
done	O
various	O
vays	O
/	O
styles	O
in	O
the	O
same	O
codebase	O
,	O
and	O
this	O
seems	O
to	O
be	O
the	O
case	O
.	O
Again	O
,	O
this	O
might	O
or	O
might	O
not	O
be	O
an	O
issue	O
.	O
Depends	O
on	O
people	O
working	O
on	O
code	O
.	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20945113	O
String	B-api_mention
is	O
immutable	O
*	O
but	O
this	O
only	O
means	O
you	O
cannot	O
change	O
it	O
using	O
its	O
public	O
API	O
.	O
What	O
you	O
are	O
doing	O
here	O
is	O
circumventing	O
the	O
normal	O
API	O
,	O
using	O
reflection	O
.	O
The	O
same	O
way	O
,	O
you	O
can	O
change	O
the	O
values	O
of	O
enums	O
,	O
change	O
the	O
lookup	O
table	O
used	O
in	O
Integer	B-api_mention
autoboxing	O
etc	O
.	O
Now	O
,	O
the	O
reason	O
s1	O
and	O
s2	O
change	O
value	O
,	O
is	O
that	O
they	O
both	O
refer	O
to	O
the	O
same	O
interned	O
string	O
.	O
The	O
compiler	O
does	O
this	O
(	O
as	O
mentioned	O
by	O
other	O
answers	O
)	O
.	O
The	O
reason	O
s3	O
does	O
not	O
was	O
actually	O
a	O
bit	O
surprising	O
to	O
me	O
,	O
as	O
I	O
thought	O
it	O
would	O
share	O
the	O
value	O
array	O
(	O
it	O
did	O
in	O
earlier	O
version	O
of	O
Java	O
,	O
before	O
Java	O
7u6	O
)	O
.	O
However	O
,	O
looking	O
at	O
the	O
source	O
code	O
of	O
String	B-api_mention
,	O
we	O
can	O
see	O
that	O
the	O
value	O
character	O
array	O
for	O
a	O
substring	O
is	O
actually	O
copied	O
(	O
using	O
Arrays	B-api_mention
.	I-api_mention
copyOfRange	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
This	O
is	O
why	O
it	O
goes	O
unchanged	O
.	O
You	O
can	O
install	O
a	O
SecurityManager	B-api_mention
,	O
to	O
avoid	O
malicious	O
code	O
to	O
do	O
such	O
things	O
.	O
But	O
keep	O
in	O
mind	O
that	O
some	O
libraries	O
depend	O
on	O
using	O
these	O
kind	O
of	O
reflection	O
tricks	O
(	O
typically	O
ORM	O
tools	O
,	O
AOP	O
libraries	O
etc	O
)	O
.	O
*	O
)	O
I	O
initially	O
wrote	O
that	O
String	B-api_mention
s	O
aren	O
'	O
t	O
really	O
immutable	O
,	O
just	O
"	O
effective	O
immutable	O
"	O
.	O
This	O
might	O
be	O
misleading	O
in	O
the	O
current	O
implementation	O
of	O
String	B-api_mention
,	O
where	O
the	O
value	O
array	O
is	O
indeed	O
marked	O
private	O
final	O
.	O
It	O
'	O
s	O
still	O
worth	O
noting	O
,	O
though	O
,	O
that	O
there	O
is	O
no	O
way	O
to	O
declare	O
an	O
array	O
in	O
Java	O
as	O
immutable	O
,	O
so	O
care	O
must	O
be	O
taken	O
not	O
to	O
expose	O
it	O
outside	O
its	O
class	O
,	O
even	O
with	O
the	O
proper	O
access	O
modifiers	O
.	O
As	O
this	O
topic	O
seems	O
overwhelmingly	O
popular	O
,	O
here	O
'	O
s	O
some	O
suggested	O
further	O
reading	O
:	O
Heinz	O
Kabutz	O
'	O
s	O
Reflection	O
Madness	O
talk	O
from	O
JavaZone	O
2009	O
,	O
which	O
covers	O
a	O
lot	O
of	O
the	O
issues	O
in	O
the	O
OP	O
,	O
along	O
with	O
other	O
reflection	O
.	O
.	O
.	O
well	O
.	O
.	O
.	O
madness	O
.	O
It	O
covers	O
why	O
this	O
is	O
sometimes	O
useful	O
.	O
And	O
why	O
,	O
most	O
of	O
the	O
time	O
,	O
you	O
should	O
avoid	O
it	O
.	O
:	O
-	O
)	O
Question	O
-	O
21105403	O
I	O
'	O
ve	O
written	O
a	O
factory	O
to	O
produce	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Connection	I-api_mention
objects	O
:	O
#	O
pre	O
I	O
'	O
d	O
like	O
to	O
validate	O
the	O
parameters	O
passed	O
to	O
DriverManager	B-api_mention
.	I-api_mention
getConnection	I-api_mention
,	O
but	O
I	O
don	O
'	O
t	O
know	O
how	O
to	O
mock	O
a	O
static	O
method	O
.	O
I	O
'	O
m	O
using	O
JUnit	O
4	O
and	O
Mockito	B-api_mention
for	O
my	O
test	O
cases	O
.	O
Is	O
there	O
a	O
good	O
way	O
to	O
mock	O
/	O
verify	O
this	O
specific	O
use	O
-	O
case	O
?	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489437	O
Java	O
.	O
lang	O
.	O
String	B-api_mention
is	O
not	O
just	O
a	O
class	O
.	O
It	O
'	O
s	O
an	O
integral	O
part	O
of	O
the	O
core	O
language	O
.	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
it	O
.	O
For	O
example	O
,	O
StringLiteral	O
is	O
like	O
an	O
abbreviation	O
for	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
When	O
written	O
StringLiteral	O
the	O
compiler	O
optimizes	O
identical	O
strings	O
to	O
the	O
same	O
instance	O
to	O
save	O
space	O
.	O
StringLiteral	O
+	O
5	O
=	O
=	O
StringLiteral	O
=	O
=	O
>	O
true	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
a	O
lot	O
of	O
stuff	O
,	O
including	O
not	O
having	O
to	O
box	O
/	O
unbox	O
between	O
object	O
versions	O
and	O
their	O
native	O
types	O
,	O
no	O
parent	O
means	O
Object	B-api_mention
,	O
default	O
constructor	O
,	O
.	O
.	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777266	O
It	O
'	O
s	O
a	O
famous	O
problem	O
:	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
arrays	O
is	O
badly	O
broken	O
,	O
just	O
don	O
'	O
t	O
use	O
it	O
,	O
ever	O
.	O
That	O
said	O
,	O
it	O
'	O
s	O
not	O
"	O
broken	O
"	O
as	O
in	O
"	O
someone	O
has	O
done	O
it	O
in	O
a	O
really	O
wrong	O
way	O
"	O
—	O
it	O
'	O
s	O
just	O
doing	O
what	O
'	O
s	O
defined	O
and	O
not	O
what	O
'	O
s	O
usually	O
expected	O
.	O
So	O
for	O
purists	O
:	O
it	O
'	O
s	O
perfectly	O
fine	O
,	O
and	O
that	O
also	O
means	O
,	O
don	O
'	O
t	O
use	O
it	O
,	O
ever	O
.	O
Now	O
the	O
expected	O
behaviour	O
for	O
equals	B-api_mention
is	O
to	O
compare	O
data	O
.	O
The	O
default	O
behaviour	O
is	O
to	O
compare	O
the	O
identity	O
,	O
as	O
Object	B-api_mention
does	O
not	O
have	O
any	O
data	O
(	O
for	O
purists	O
:	O
yes	O
it	O
has	O
,	O
but	O
it	O
'	O
s	O
not	O
the	O
point	O
)	O
;	O
assumption	O
is	O
,	O
if	O
you	O
need	O
equals	B-api_mention
in	O
subclasses	O
,	O
you	O
'	O
ll	O
implement	O
it	O
.	O
In	O
arrays	O
,	O
there	O
'	O
s	O
no	O
implementation	O
for	O
you	O
,	O
so	O
you	O
'	O
re	O
not	O
supposed	O
to	O
use	O
it	O
.	O
So	O
the	O
difference	O
is	O
,	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
works	O
as	O
you	O
would	O
expect	O
(	O
i	O
.	O
e	O
.	O
compares	O
content	O
)	O
,	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
falls	O
back	O
to	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
implementation	O
,	O
which	O
in	O
turn	O
compares	O
identity	O
,	O
and	O
thus	O
better	O
replaced	O
by	O
=	O
=	O
(	O
for	O
purists	O
:	O
yes	O
I	O
know	O
about	O
null	O
)	O
.	O
Problem	O
is	O
,	O
even	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
bite	O
you	O
hard	O
if	O
elements	O
of	O
array	O
do	O
not	O
implement	O
equals	B-api_mention
properly	O
.	O
It	O
'	O
s	O
a	O
very	O
naive	O
statement	O
,	O
I	O
know	O
,	O
but	O
there	O
'	O
s	O
a	O
very	O
important	O
less	O
-	O
than	O
-	O
obvious	O
case	O
:	O
consider	O
a	O
2D	O
array	O
.	O
2D	O
array	O
in	O
Java	O
is	O
an	O
array	O
of	O
arrays	O
,	O
and	O
arrays	O
'	O
equals	B-api_mention
is	O
broken	O
(	O
or	O
useless	O
if	O
you	O
prefer	O
)	O
,	O
so	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
work	O
as	O
you	O
expect	O
on	O
2D	O
arrays	O
.	O
Hope	O
that	O
helps	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14563808	O
It	O
is	O
very	O
unlikely	O
that	O
random	O
number	O
generation	O
performance	O
would	O
be	O
an	O
issue	O
for	O
any	O
use	O
-	O
case	O
you	O
came	O
up	O
with	O
unless	O
accessing	O
a	O
single	O
Random	B-api_mention
instance	O
from	O
multiple	O
threads	O
(	O
because	O
Random	B-api_mention
is	O
synchronized	O
)	O
.	O
However	O
,	O
if	O
that	O
really	O
is	O
the	O
case	O
and	O
you	O
need	O
lots	O
of	O
random	O
numbers	O
fast	O
,	O
your	O
solution	O
is	O
far	O
too	O
unreliable	O
.	O
Sometimes	O
it	O
gives	O
good	O
results	O
,	O
sometimes	O
it	O
gives	O
horrible	O
results	O
(	O
based	O
on	O
the	O
initial	O
settings	O
)	O
.	O
If	O
you	O
want	O
the	O
same	O
numbers	O
that	O
the	O
Random	B-api_mention
class	O
gives	O
you	O
,	O
only	O
faster	O
,	O
you	O
could	O
get	O
rid	O
of	O
the	O
synchronization	O
in	O
there	O
:	O
#	O
pre	O
I	O
simply	O
took	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
code	O
and	O
removed	O
the	O
synchronization	O
which	O
results	O
in	O
twice	O
the	O
performance	O
compared	O
to	O
the	O
original	O
on	O
my	O
Oracle	O
HotSpot	O
JVM	O
7u9	O
.	O
It	O
is	O
still	O
slower	O
than	O
your	O
QuickRandom	B-api_mention
,	O
but	O
it	O
gives	O
much	O
more	O
consistent	O
results	O
.	O
To	O
be	O
precise	O
,	O
for	O
the	O
same	O
seed	O
values	O
and	O
single	O
threaded	O
applications	O
,	O
it	O
gives	O
the	O
same	O
pseudo	O
-	O
random	O
numbers	O
as	O
the	O
original	O
Random	B-api_mention
class	O
would	O
.	O
This	O
code	O
is	O
based	O
on	O
the	O
current	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
in	O
OpenJDK	O
7u	O
which	O
is	O
licensed	O
under	O
GNU	O
GPL	O
v2	O
.	O
EDIT	O
10	O
months	O
later	O
:	O
I	O
just	O
discovered	O
that	O
you	O
don	O
'	O
t	O
even	O
have	O
to	O
use	O
my	O
code	O
above	O
to	O
get	O
an	O
unsynchronized	O
Random	B-api_mention
instance	O
.	O
There	O
'	O
s	O
one	O
in	O
the	O
JDK	O
,	O
too	O
!	O
Look	O
at	O
Java	O
7	O
'	O
s	O
ThreadLocalRandom	B-api_mention
class	O
.	O
The	O
code	O
inside	O
it	O
is	O
almost	O
identical	O
to	O
my	O
code	O
above	O
.	O
The	O
class	O
is	O
simply	O
a	O
local	O
-	O
thread	O
-	O
isolated	O
Random	B-api_mention
version	O
suitable	O
for	O
generating	O
random	O
numbers	O
quickly	O
.	O
The	O
only	O
downside	O
I	O
can	O
think	O
of	O
is	O
that	O
you	O
can	O
'	O
t	O
set	O
its	O
seed	O
manually	O
.	O
Example	O
usage	O
:	O
Random	B-api_mention
random	O
=	O
ThreadLocalRandom	B-api_mention
.	I-api_mention
current	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489394	O
It	O
'	O
s	O
a	O
feature	O
of	O
the	O
Java	O
language	O
.	O
String	B-api_mention
literals	O
in	O
the	O
source	O
code	O
is	O
given	O
special	O
treatment	O
.	O
The	O
language	O
spec	O
,	O
here	O
,	O
simply	O
says	O
that	O
a	O
string	O
literal	O
is	O
of	O
String	B-api_mention
type	O
Question	O
-	O
7935858	O
,	O
answer	O
-	O
7935873	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
.	I-api_mention
split	I-api_mention
splits	O
on	O
regular	O
expressions	O
,	O
and	O
.	O
in	O
a	O
regular	O
expression	O
means	O
"	O
any	O
character	O
"	O
.	O
Try	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32852619	O
Because	O
it	O
'	O
s	O
much	O
faster	O
!	O
I	O
ran	O
some	O
thorough	O
benchmarking	O
tests	O
on	O
cut	O
down	O
versions	O
of	O
the	O
two	O
methods	O
:	O
#	O
pre	O
operating	O
on	O
arrays	O
of	O
various	O
sizes	O
containing	O
random	O
values	O
.	O
Here	O
are	O
the	O
(	O
typical	O
)	O
results	O
:	O
#	O
pre	O
And	O
here	O
are	O
the	O
results	O
when	O
operating	O
over	O
an	O
array	O
filled	O
with	O
nulls	O
(	O
so	O
garbage	O
collection	O
issues	O
are	O
eradicated	O
)	O
:	O
#	O
pre	O
The	O
numbers	O
are	O
in	O
nanoseconds	O
,	O
(	O
sd	O
)	O
is	O
1	O
standard	O
deviation	O
expressed	O
as	O
a	O
percentage	O
of	O
the	O
result	O
(	O
fyi	O
,	O
a	O
"	O
normally	O
distributed	O
"	O
population	O
has	O
an	O
SD	O
of	O
68	O
)	O
,	O
vs	O
is	O
the	O
JDK	O
8	O
timing	O
relative	O
to	O
JDK	O
7	O
.	O
It	O
is	O
interesting	O
that	O
not	O
only	O
is	O
it	O
significantly	O
faster	O
,	O
but	O
the	O
deviation	O
is	O
also	O
slightly	O
narrower	O
,	O
which	O
means	O
that	O
the	O
JDK	O
8	O
implementation	O
gives	O
slightly	O
more	O
consistent	O
performance	O
.	O
The	O
tests	O
were	O
run	O
on	O
jdk	O
1	O
.	O
8	O
.	O
0	O
_	O
45	O
over	O
a	O
large	O
(	O
millions	O
)	O
number	O
of	O
times	O
on	O
arrays	O
populated	O
with	O
random	O
Integer	B-api_mention
objects	O
.	O
To	O
remove	O
out	O
-	O
lying	O
numbers	O
,	O
on	O
each	O
set	O
of	O
results	O
the	O
fastest	O
and	O
slowest	O
3	O
%	O
of	O
timings	O
were	O
discarded	O
.	O
Garbage	O
collection	O
was	O
requested	O
and	O
the	O
thread	O
yielded	O
and	O
slept	O
just	O
prior	O
to	O
running	O
each	O
invocation	O
of	O
the	O
method	O
.	O
JVM	O
warm	O
up	O
was	O
done	O
on	O
the	O
first	O
20	O
%	O
of	O
work	O
and	O
those	O
results	O
were	O
discarded	O
.	O
Question	O
-	O
13659217	O
,	O
answer	O
-	O
13659231	O
You	O
can	O
'	O
t	O
see	O
this	O
method	O
in	O
javadoc	O
because	O
it	O
'	O
s	O
added	O
by	O
the	O
compiler	O
.	O
Documented	O
in	O
three	O
places	O
:	O
#	O
li	O
Enum	O
Types	O
,	O
The	O
Java	O
Tutorials	O
#	O
blockquote	O
#	O
li	O
Enum	B-api_mention
.	I-api_mention
valueOf	I-api_mention
class	O
(	O
The	O
special	O
implicit	O
values	B-api_mention
method	O
is	O
mentioned	O
in	O
description	O
of	O
valueOf	B-api_mention
method	O
)	O
#	O
blockquote	O
#	O
li	O
Enum	O
Types	O
,	O
Section	O
8	O
.	O
9	O
,	O
Java	O
Language	O
Specification	O
The	O
values	B-api_mention
function	O
simply	O
list	O
all	O
values	O
of	O
the	O
enumeration	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
34405789	O
Set	B-api_mention
and	O
Map	B-api_mention
are	O
non	O
-	O
linear	O
data	O
structure	O
.	O
List	B-api_mention
is	O
linear	O
data	O
structure	O
.	O
The	O
tree	O
data	O
structure	O
SortedSet	B-api_mention
and	O
SortedMap	B-api_mention
interfaces	O
implements	O
TreeSet	B-api_mention
and	O
TreeMap	B-api_mention
respectively	O
using	O
used	O
Red	O
-	O
Black	O
tree	O
implementation	O
algorithm	O
.	O
So	O
it	O
ensure	O
that	O
there	O
are	O
no	O
duplicated	O
items	O
(	O
or	O
keys	O
in	O
case	O
of	O
Map	O
)	O
.	O
#	O
li	O
Tree	O
by	O
definition	O
cannot	O
contain	O
duplicates	O
.	O
#	O
li	O
In	O
List	B-api_mention
we	O
can	O
have	O
duplicates	O
,	O
so	O
there	O
is	O
no	O
TreeList	B-api_mention
.	O
So	O
if	O
we	O
want	O
to	O
sort	O
the	O
list	O
we	O
have	O
to	O
use	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
19418427	O
,	O
answer	O
-	O
19418553	O
If	O
you	O
take	O
a	O
look	O
at	O
this	O
methods	O
#	O
pre	O
and	O
its	O
decompiled	O
with	O
javap	O
-	O
c	O
ClassWithTheseMethods	O
versions	O
you	O
will	O
see	O
#	O
pre	O
and	O
#	O
pre	O
So	O
if	O
Strings	O
are	O
not	O
final	O
compiler	O
will	O
have	O
to	O
use	O
StringBuilder	B-api_mention
to	O
concatenate	O
str1	O
and	O
str2	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
will	O
be	O
compiled	O
to	O
String	B-api_mention
concat	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
means	O
that	O
concat	O
will	O
be	O
created	O
at	O
runtime	O
so	O
will	O
not	O
come	O
from	O
String	B-api_mention
pool	O
.	O
Also	O
if	O
Strings	O
are	O
final	O
then	O
compiler	O
can	O
assume	O
that	O
they	O
will	O
never	O
change	O
so	O
instead	O
of	O
using	O
StringBuilder	B-api_mention
it	O
can	O
safely	O
concatenate	O
its	O
values	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
can	O
be	O
changed	O
to	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
+	O
StringLiteral	O
;	O
and	O
concatenated	O
into	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
;	O
which	O
means	O
that	O
concate	O
will	O
become	O
sting	O
literal	O
which	O
will	O
be	O
interned	O
in	O
string	O
pool	O
and	O
then	O
compared	O
with	O
same	O
string	O
literal	O
from	O
that	O
pool	O
in	O
if	O
statement	O
.	O
Question	O
-	O
19418427	O
,	O
answer	O
-	O
19418548	O
As	O
per	O
my	O
research	O
,	O
all	O
the	O
final	O
String	B-api_mention
are	O
interned	O
in	O
Java	O
.	O
From	O
one	O
of	O
the	O
blog	O
post	O
:	O
#	O
blockquote	O
So	O
it	O
means	O
if	O
you	O
call	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
can	O
compare	O
two	O
strings	O
using	O
=	O
=	O
operator	O
.	O
But	O
here	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
not	O
necessary	O
because	O
in	O
Java	O
final	O
String	B-api_mention
are	O
internally	O
interned	O
.	O
You	O
can	O
find	O
more	O
information	O
String	B-api_mention
comparision	O
using	O
=	O
=	O
operator	O
and	O
Javadoc	O
for	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
Also	O
refer	O
this	O
Stackoverflow	O
post	O
for	O
more	O
information	O
.	O
Question	O
-	O
32323081	O
,	O
answer	O
-	O
32323641	O
First	O
of	O
all	O
,	O
you	O
don	O
'	O
have	O
to	O
overload	O
:	O
D	O
-	O
overloading	O
is	O
never	O
a	O
necessity	O
;	O
use	O
2	O
different	O
method	O
names	O
,	O
e	O
.	O
g	O
.	O
foo	O
and	O
fooX	O
Secondly	O
,	O
I	O
don	O
'	O
t	O
see	O
why	O
you	O
need	O
2	O
methods	O
here	O
.	O
If	O
you	O
want	O
to	O
handle	O
checked	O
and	O
unchecked	O
exceptions	O
differently	O
,	O
it	O
can	O
be	O
done	O
at	O
runtime	O
.	O
To	O
achieve	O
"	O
exception	O
transparency	O
"	O
,	O
you	O
can	O
do	O
#	O
pre	O
Finally	O
,	O
disambiguity	O
can	O
be	O
achieved	O
throw	O
lambda	O
return	O
type	O
;	O
the	O
compiler	O
uses	O
the	O
return	O
type	O
as	O
if	O
using	O
an	O
argument	O
type	O
for	O
choosing	O
the	O
most	O
specific	O
method	O
.	O
This	O
gives	O
us	O
the	O
idea	O
to	O
wrap	O
the	O
value	O
together	O
with	O
the	O
exception	O
type	O
,	O
as	O
Result	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
a	O
"	O
monad	O
"	O
as	O
they	O
say	O
.	O
#	O
pre	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725470	O
List	B-api_mention
iterators	O
guarantee	O
first	O
and	O
foremost	O
that	O
you	O
get	O
the	O
list	O
'	O
s	O
elements	O
in	O
the	O
internal	O
order	O
of	O
the	O
list	O
(	O
aka	O
.	O
insertion	O
order	O
)	O
.	O
More	O
specifically	O
it	O
is	O
in	O
the	O
order	O
you	O
'	O
ve	O
inserted	O
the	O
elements	O
or	O
on	O
how	O
you	O
'	O
ve	O
manipulated	O
the	O
list	O
.	O
Sorting	O
can	O
be	O
seen	O
as	O
a	O
manipulation	O
of	O
the	O
data	O
structure	O
,	O
and	O
there	O
are	O
several	O
ways	O
to	O
sort	O
the	O
list	O
.	O
I	O
'	O
ll	O
order	O
the	O
ways	O
in	O
the	O
order	O
of	O
usefulness	O
as	O
I	O
personally	O
see	O
it	O
:	O
1	O
.	O
Consider	O
using	O
Set	B-api_mention
or	O
Bag	B-api_mention
collections	O
instead	O
NOTE	O
:	O
I	O
put	O
this	O
option	O
at	O
the	O
top	O
because	O
this	O
is	O
what	O
you	O
normally	O
want	O
to	O
do	O
anyway	O
.	O
A	O
sorted	O
set	O
automatically	O
sorts	O
the	O
collection	O
at	O
insertion	O
,	O
meaning	O
that	O
it	O
does	O
the	O
sorting	O
while	O
you	O
add	O
elements	O
into	O
the	O
collection	O
.	O
It	O
also	O
means	O
you	O
don	O
'	O
t	O
need	O
to	O
manually	O
sort	O
it	O
.	O
Furthermore	O
if	O
you	O
are	O
sure	O
that	O
you	O
don	O
'	O
t	O
need	O
to	O
worry	O
about	O
(	O
or	O
have	O
)	O
duplicate	O
elements	O
then	O
you	O
can	O
use	O
the	O
TreeSet	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
instead	O
.	O
It	O
implements	O
SortedSet	B-api_mention
and	O
NavigableSet	B-api_mention
interfaces	O
and	O
works	O
as	O
you	O
'	O
d	O
probably	O
expect	O
from	O
a	O
list	O
:	O
#	O
pre	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
natural	O
ordering	O
you	O
can	O
use	O
the	O
constructor	O
parameter	O
that	O
takes	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Alternatively	O
you	O
can	O
use	O
Multisets	B-api_mention
(	O
also	O
known	O
as	O
Bags	B-api_mention
)	O
,	O
that	O
is	O
a	O
Set	B-api_mention
that	O
allows	O
duplicate	O
elements	O
,	O
instead	O
and	O
there	O
are	O
third	O
party	O
implementations	O
of	O
them	O
.	O
Most	O
notably	O
from	O
the	O
Guava	O
libraries	O
there	O
is	O
a	O
TreeMultiset	B-api_mention
,	O
that	O
works	O
a	O
lot	O
like	O
the	O
TreeSet	B-api_mention
.	O
2	O
.	O
Sort	O
your	O
list	O
with	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
As	O
mentioned	O
above	O
,	O
sorting	O
of	O
List	B-api_mention
s	O
is	O
an	O
manipulation	O
of	O
the	O
data	O
structure	O
.	O
So	O
for	O
situations	O
where	O
you	O
need	O
"	O
one	O
source	O
of	O
truth	O
"	O
that	O
will	O
be	O
sorted	O
in	O
a	O
variety	O
of	O
ways	O
then	O
sorting	O
it	O
manually	O
is	O
the	O
way	O
to	O
go	O
.	O
You	O
can	O
sort	O
your	O
list	O
with	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
is	O
a	O
code	O
sample	O
on	O
how	O
:	O
#	O
pre	O
Using	O
comparators	O
One	O
clear	O
benefit	O
is	O
that	O
you	O
may	O
use	O
Comparator	B-api_mention
in	O
the	O
sort	B-api_mention
method	O
.	O
Java	O
also	O
provides	O
some	O
implementations	O
for	O
the	O
Comparator	B-api_mention
such	O
as	O
the	O
Collator	B-api_mention
which	O
is	O
useful	O
for	O
locale	O
sensitive	O
sorting	O
strings	O
.	O
Here	O
is	O
one	O
example	O
:	O
#	O
pre	O
Sorting	O
in	O
concurrent	O
environments	O
Do	O
note	O
though	O
that	O
using	O
the	O
sort	B-api_mention
method	O
is	O
not	O
friendly	O
in	O
concurrent	O
environments	O
,	O
since	O
the	O
collection	O
instance	O
will	O
be	O
manipulated	O
,	O
and	O
you	O
should	O
consider	O
using	O
immutable	O
collections	O
instead	O
.	O
This	O
is	O
something	O
Guava	O
provides	O
in	O
the	O
Ordering	B-api_mention
class	O
and	O
is	O
a	O
simple	O
one	O
-	O
liner	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
sorted	O
=	O
Ordering	B-api_mention
.	I-api_mention
natural	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sortedCopy	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
3	O
.	O
Wrap	O
your	O
list	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
PriorityQueue	I-api_mention
Though	O
there	O
is	O
no	O
sorted	O
list	O
in	O
Java	O
there	O
is	O
however	O
a	O
sorted	O
queue	O
which	O
would	O
probably	O
work	O
just	O
as	O
well	O
for	O
you	O
.	O
It	O
is	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
PriorityQueue	I-api_mention
class	O
.	O
Nico	O
Haase	O
linked	O
in	O
the	O
comments	O
to	O
a	O
related	O
question	O
that	O
also	O
answers	O
this	O
.	O
In	O
a	O
sorted	O
collection	O
you	O
most	O
likely	O
don	O
'	O
t	O
want	O
to	O
manipulate	O
the	O
internal	O
data	O
structure	O
which	O
is	O
why	O
PriorityQueue	B-api_mention
doesn	O
'	O
t	O
implement	O
the	O
List	B-api_mention
interface	O
(	O
because	O
that	O
would	O
give	O
you	O
direct	O
access	O
to	O
it	O
'	O
s	O
elements	O
)	O
.	O
Caveat	O
on	O
the	O
PriorityQueue	B-api_mention
iterator	O
The	O
PriorityQueue	B-api_mention
class	O
implements	O
the	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
and	O
Collection	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interfaces	O
so	O
it	O
can	O
be	O
iterated	O
as	O
usual	O
.	O
However	O
the	O
iterator	O
is	O
not	O
guaranteed	O
to	O
return	O
elements	O
in	O
the	O
sorted	O
order	O
.	O
Instead	O
(	O
as	O
Alderath	O
points	O
out	O
in	O
the	O
comments	O
)	O
you	O
need	O
to	O
poll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
the	O
queue	O
until	O
empty	O
.	O
Note	O
that	O
you	O
can	O
convert	O
a	O
list	O
to	O
a	O
priority	O
queue	O
via	O
the	O
constructor	O
that	O
takes	O
any	O
collection	O
:	O
#	O
pre	O
4	O
.	O
Write	O
your	O
own	O
SortedList	B-api_mention
class	O
NOTE	O
:	O
You	O
shouldn	O
'	O
t	O
have	O
to	O
do	O
this	O
.	O
You	O
can	O
write	O
your	O
own	O
List	B-api_mention
class	O
that	O
sorts	O
each	O
time	O
you	O
add	O
a	O
new	O
element	O
.	O
This	O
can	O
get	O
rather	O
computation	O
heavy	O
depending	O
on	O
your	O
implementation	O
and	O
is	O
pointless	O
,	O
unless	O
you	O
want	O
to	O
do	O
it	O
as	O
an	O
exercise	O
,	O
because	O
of	O
two	O
main	O
reasons	O
:	O
#	O
li	O
It	O
breaks	O
the	O
contract	O
that	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
has	O
,	O
because	O
the	O
add	B-api_mention
methods	O
should	O
ensure	O
that	O
the	O
element	O
will	O
reside	O
in	O
the	O
index	O
that	O
the	O
user	O
specifies	O
.	O
#	O
li	O
Why	O
reinvent	O
the	O
wheel	O
?	O
You	O
should	O
be	O
using	O
the	O
TreeSet	B-api_mention
or	O
Multisets	B-api_mention
instead	O
as	O
pointed	O
out	O
in	O
the	O
first	O
point	O
above	O
.	O
However	O
if	O
you	O
want	O
to	O
do	O
it	O
as	O
an	O
exercise	O
here	O
is	O
a	O
code	O
sample	O
to	O
get	O
you	O
started	O
,	O
it	O
uses	O
the	O
AbstractList	B-api_mention
abstract	O
class	O
:	O
#	O
pre	O
Note	O
that	O
if	O
you	O
haven	O
'	O
t	O
overridden	O
the	O
methods	O
you	O
need	O
,	O
then	O
the	O
default	O
implementations	O
from	O
AbstractList	B-api_mention
will	O
throw	O
UnsupportedOperationException	B-api_mention
s	O
.	O
Question	O
-	O
18777989	O
,	O
answer	O
-	O
18778228	O
You	O
made	O
a	O
good	O
summery	O
of	O
the	O
practical	O
differences	O
in	O
use	O
and	O
implementation	O
but	O
did	O
not	O
say	O
anything	O
about	O
the	O
difference	O
in	O
meaning	O
.	O
An	O
interface	O
is	O
a	O
description	O
of	O
the	O
behaviour	O
an	O
implementing	O
class	O
will	O
have	O
.	O
The	O
implementing	O
class	O
ensures	O
,	O
that	O
it	O
will	O
have	O
these	O
methods	O
that	O
can	O
be	O
used	O
on	O
it	O
.	O
It	O
is	O
basically	O
a	O
contract	O
or	O
a	O
promise	O
the	O
class	O
has	O
to	O
make	O
.	O
An	O
abstract	O
class	O
is	O
a	O
basis	O
for	O
different	O
subclasses	O
that	O
share	O
behaviour	O
which	O
does	O
not	O
need	O
to	O
be	O
repeatedly	O
be	O
created	O
.	O
Subclasses	O
must	O
complete	O
the	O
behaviour	O
and	O
have	O
the	O
option	O
to	O
override	O
predefine	O
behaviour	O
(	O
as	O
long	O
as	O
it	O
is	O
not	O
defined	O
as	O
final	O
or	O
private	O
)	O
.	O
You	O
will	O
find	O
good	O
examples	O
in	O
the	O
java	O
.	O
util	O
package	O
which	O
includes	O
interfaces	O
like	O
List	B-api_mention
and	O
abstract	O
classes	O
like	O
AbstractList	B-api_mention
which	O
already	O
implements	O
the	O
interface	O
.	O
The	O
official	O
documentation	O
describes	O
the	O
AbstractList	B-api_mention
as	O
follows	O
:	O
#	O
blockquote	O
Question	O
-	O
31922866	O
I	O
'	O
ve	O
read	O
on	O
many	O
Web	O
sites	O
Optional	B-api_mention
should	O
be	O
used	O
as	O
a	O
return	O
type	O
only	O
,	O
and	O
not	O
used	O
in	O
method	O
arguments	O
.	O
I	O
'	O
m	O
struggling	O
to	O
find	O
a	O
logical	O
reason	O
why	O
.	O
For	O
example	O
I	O
have	O
a	O
piece	O
of	O
logic	O
which	O
has	O
2	O
optional	O
parameters	O
.	O
Therefore	O
I	O
think	O
it	O
would	O
make	O
sense	O
to	O
write	O
my	O
method	O
signature	O
like	O
this	O
(	O
solution	O
1	O
)	O
:	O
#	O
pre	O
Many	O
web	O
pages	O
specify	O
Optional	B-api_mention
should	O
not	O
be	O
used	O
as	O
method	O
arguments	O
.	O
With	O
this	O
in	O
mind	O
I	O
could	O
use	O
the	O
following	O
method	O
signature	O
and	O
add	O
a	O
clear	O
Javadoc	O
comment	O
specifying	O
the	O
arguments	O
maybe	O
null	O
hoping	O
future	O
future	O
maintainers	O
will	O
read	O
the	O
javadoc	O
and	O
therefore	O
always	O
carry	O
out	O
null	O
checks	O
prior	O
to	O
using	O
the	O
arguments	O
(	O
solution	O
2	O
)	O
:	O
#	O
pre	O
Alternatively	O
I	O
could	O
replace	O
my	O
method	O
with	O
4	O
public	O
methods	O
to	O
provide	O
a	O
nicer	O
interface	O
and	O
make	O
it	O
more	O
obvious	O
p1	O
and	O
p2	O
are	O
optional	O
(	O
solution	O
3	O
)	O
:	O
#	O
pre	O
Now	O
I	O
try	O
writing	O
the	O
code	O
of	O
the	O
class	O
which	O
invokes	O
this	O
piece	O
of	O
logic	O
for	O
each	O
approach	O
.	O
I	O
first	O
retrieve	O
the	O
2	O
input	O
parameters	O
from	O
another	O
object	O
which	O
returns	O
optionals	O
and	O
then	O
I	O
invoke	O
calculateSomething	O
.	O
Therefore	O
if	O
solution	O
1	O
is	O
used	O
the	O
calling	O
code	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
if	O
solution	O
2	O
is	O
used	O
the	O
calling	O
code	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
if	O
solution	O
3	O
is	O
used	O
I	O
could	O
use	O
the	O
code	O
above	O
or	O
I	O
could	O
use	O
the	O
following	O
(	O
but	O
its	O
a	O
significant	O
amount	O
more	O
code	O
)	O
:	O
#	O
pre	O
So	O
my	O
question	O
is	O
why	O
is	O
it	O
considered	O
bad	O
practice	O
to	O
use	O
Optionals	O
as	O
method	O
arguments	O
as	O
in	O
solution	O
1	O
?	O
It	O
looks	O
like	O
the	O
most	O
readable	O
solution	O
to	O
me	O
and	O
makes	O
it	O
most	O
obvious	O
that	O
the	O
parameters	O
could	O
be	O
empty	O
/	O
null	O
to	O
future	O
maintainers	O
.	O
(	O
I	O
'	O
m	O
aware	O
the	O
designers	O
of	O
Optional	B-api_mention
intended	O
it	O
to	O
only	O
be	O
used	O
as	O
a	O
return	O
type	O
,	O
but	O
I	O
can	O
'	O
t	O
find	O
any	O
logical	O
reasons	O
not	O
to	O
use	O
it	O
in	O
this	O
scenario	O
)	O
Question	O
-	O
12576156	O
,	O
answer	O
-	O
12576394	O
By	O
specifying	O
the	O
the	O
my	O
.	O
list	O
.	O
of	O
.	O
strings	O
=	O
ABC	O
,	O
CDE	O
,	O
EFG	O
in	O
.	O
properties	O
file	O
and	O
using	O
@	O
Value	O
(	O
args	O
)	O
private	O
String	O
[	O
]	O
myString	O
;	O
You	O
can	O
get	O
the	O
arrays	O
of	O
strings	O
.	O
And	O
using	O
CollectionUtils	B-api_mention
.	I-api_mention
addAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
get	O
the	O
list	O
of	O
strings	O
.	O
Question	O
-	O
5243754	O
What	O
is	O
the	O
difference	O
between	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
within	O
HttpServletRequest	B-api_mention
class	O
?	O
Question	O
-	O
14376807	O
,	O
answer	O
-	O
22092971	O
For	O
those	O
looking	O
for	O
a	O
general	O
strategy	O
for	O
reading	O
and	O
writing	O
a	O
string	O
to	O
file	O
:	O
First	O
,	O
get	O
a	O
file	O
object	O
You	O
'	O
ll	O
need	O
the	O
storage	O
path	O
.	O
For	O
the	O
internal	O
storage	O
,	O
use	O
:	O
File	B-api_mention
path	O
=	O
context	O
.	B-api_mention
getFilesDir	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
the	O
external	O
storage	O
(	O
SD	O
card	O
)	O
,	O
use	O
:	O
File	B-api_mention
path	O
=	O
context	O
.	B-api_mention
getExternalFilesDir	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Then	O
create	O
your	O
file	O
object	O
:	O
File	B-api_mention
file	O
=	O
new	O
File	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Write	O
a	O
string	O
to	O
the	O
file	O
#	O
pre	O
Or	O
with	O
Google	O
Guava	O
Files	B-api_mention
.	I-api_mention
write	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Read	O
the	O
file	O
to	O
a	O
string	O
#	O
pre	O
Or	O
if	O
you	O
are	O
using	O
Google	O
Guava	O
String	B-api_mention
contents	O
=	O
Files	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
completeness	O
I	O
'	O
ll	O
mention	O
String	B-api_mention
contents	O
=	O
new	O
Scanner	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
useDelimiter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
next	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
requires	O
no	O
libraries	O
,	O
but	O
benchmarks	O
50	O
%	O
-	O
400	O
%	O
slower	O
than	O
the	O
other	O
options	O
(	O
in	O
various	O
tests	O
on	O
my	O
Nexus	O
5	O
)	O
.	O
Notes	O
For	O
each	O
of	O
these	O
strategies	O
,	O
you	O
'	O
ll	O
be	O
asked	O
to	O
catch	O
an	O
IOException	B-api_mention
.	O
The	O
default	O
character	O
encoding	O
on	O
Android	O
is	O
UTF	O
-	O
8	O
.	O
If	O
you	O
are	O
using	O
external	O
storage	O
,	O
you	O
'	O
ll	O
need	O
to	O
add	O
to	O
your	O
manifest	O
either	O
:	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
or	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
Write	O
permission	O
implies	O
read	O
permission	O
,	O
so	O
you	O
don	O
'	O
t	O
need	O
both	O
.	O
Question	O
-	O
22847105	O
,	O
answer	O
-	O
37354549	O
The	O
way	O
I	O
think	O
about	O
it	O
is	O
that	O
you	O
use	O
flatMap	B-api_mention
when	O
the	O
function	O
you	O
wanted	O
to	O
put	O
inside	O
of	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
Observable	B-api_mention
.	O
In	O
which	O
case	O
you	O
might	O
still	O
try	O
to	O
use	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
it	O
would	O
be	O
unpractical	O
.	O
Let	O
me	O
try	O
to	O
explain	O
why	O
.	O
If	O
in	O
such	O
case	O
you	O
decided	O
to	O
stick	O
with	O
map	O
,	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
For	O
example	O
in	O
your	O
case	O
,	O
if	O
we	O
used	O
an	O
imaginary	O
RxGson	O
library	O
,	O
that	O
returned	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
from	O
it	O
'	O
s	O
toJson	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
instead	O
of	O
simply	O
returning	O
a	O
String	B-api_mention
)	O
it	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
At	O
this	O
point	O
it	O
would	O
be	O
pretty	O
tricky	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
such	O
an	O
observable	O
.	O
Inside	O
of	O
it	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
which	O
you	O
would	O
again	O
need	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
the	O
value	O
.	O
Which	O
is	O
not	O
practical	O
or	O
nice	O
to	O
look	O
at	O
.	O
So	O
to	O
make	O
it	O
useful	O
one	O
idea	O
is	O
to	O
"	O
flatten	O
"	O
this	O
observable	O
of	O
observables	O
(	O
you	O
might	O
start	O
to	O
see	O
where	O
the	O
name	O
_	O
flat	O
_	O
Map	O
comes	O
from	O
)	O
.	O
RxJava	O
provides	O
a	O
few	O
ways	O
to	O
flatten	O
observables	O
and	O
for	O
sake	O
of	O
simplicity	O
lets	O
assume	O
merge	O
is	O
what	O
we	O
want	O
.	O
Merge	O
basically	O
takes	O
a	O
bunch	O
of	O
observables	O
and	O
emits	O
whenever	O
any	O
of	O
them	O
emits	O
.	O
(	O
Lots	O
of	O
people	O
would	O
argue	O
switch	O
would	O
be	O
a	O
better	O
default	O
.	O
But	O
if	O
you	O
'	O
re	O
emitting	O
just	O
one	O
value	O
,	O
it	O
doesn	O
'	O
t	O
matter	O
anyway	O
.	O
)	O
So	O
amending	O
our	O
previous	O
snippet	O
we	O
would	O
get	O
:	O
#	O
pre	O
This	O
is	O
a	O
lot	O
more	O
useful	O
,	O
because	O
subscribing	O
to	O
that	O
(	O
or	O
mapping	O
,	O
or	O
filtering	O
,	O
or	O
.	O
.	O
.	O
)	O
you	O
just	O
get	O
the	O
String	B-api_mention
value	O
.	O
(	O
Also	O
,	O
mind	O
you	O
,	O
such	O
variant	O
of	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
exist	O
in	O
RxJava	O
,	O
but	O
if	O
you	O
understand	O
the	O
idea	O
of	O
merge	O
then	O
I	O
hope	O
you	O
also	O
understand	O
how	O
that	O
would	O
work	O
.	O
)	O
So	O
basically	O
because	O
such	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
probably	O
only	O
ever	O
be	O
useful	O
when	O
it	O
succeeds	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
returning	O
an	O
observable	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
type	O
this	O
over	O
and	O
over	O
again	O
,	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
created	O
as	O
a	O
shorthand	O
.	O
It	O
applies	O
the	O
mapping	O
function	O
just	O
as	O
a	O
normal	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
,	O
but	O
later	O
instead	O
of	O
emitting	O
the	O
returned	O
values	O
it	O
also	O
"	O
flattens	O
"	O
(	O
or	O
merges	O
)	O
them	O
.	O
That	O
'	O
s	O
the	O
general	O
use	O
case	O
.	O
It	O
is	O
most	O
useful	O
in	O
a	O
codebase	O
that	O
uses	O
Rx	O
allover	O
the	O
place	O
and	O
you	O
'	O
ve	O
got	O
many	O
methods	O
returning	O
observables	O
,	O
which	O
you	O
want	O
to	O
chain	O
with	O
other	O
methods	O
returning	O
observables	O
.	O
In	O
your	O
use	O
case	O
it	O
happens	O
to	O
be	O
useful	O
as	O
well	O
,	O
because	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
only	O
transform	O
one	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
into	O
another	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
it	O
cannot	O
transform	O
it	O
into	O
multiple	O
values	O
,	O
no	O
value	O
at	O
all	O
or	O
an	O
error	O
.	O
And	O
as	O
akarnokd	O
wrote	O
in	O
his	O
answer	O
(	O
and	O
mind	O
you	O
he	O
'	O
s	O
much	O
smarter	O
than	O
me	O
,	O
probably	O
in	O
general	O
,	O
but	O
at	O
least	O
when	O
it	O
comes	O
to	O
RxJava	O
)	O
you	O
shouldn	O
'	O
t	O
throw	O
exceptions	O
from	O
your	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
So	O
instead	O
you	O
can	O
use	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
return	O
Observable	B-api_mention
.	I-api_mention
just	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
all	O
goes	O
well	O
,	O
but	O
return	O
Observable	B-api_mention
.	I-api_mention
error	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
something	O
fails	O
.	O
See	O
his	O
answer	O
for	O
a	O
complete	O
snippet	O
:	O
#	O
a	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032208	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
underlying	O
Array	B-api_mention
and	O
set	O
each	O
entry	O
to	O
null	O
;	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
go	O
through	O
the	O
ArrayList	B-api_mention
checking	O
for	O
collection	O
and	O
remove	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
if	O
it	O
exists	O
.	O
I	O
would	O
imagine	O
that	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
way	O
faster	O
then	O
removeAll	B-api_mention
because	O
it	O
'	O
s	O
not	O
comparing	O
,	O
etc	O
.	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
36978943	O
I	O
'	O
ve	O
been	O
confused	O
by	O
the	O
wide	O
range	O
of	O
different	O
naming	O
schemes	O
as	O
well	O
,	O
and	O
was	O
just	O
about	O
to	O
ask	O
and	O
answer	O
my	O
own	O
question	O
on	O
this	O
when	O
I	O
found	O
this	O
question	O
here	O
.	O
I	O
think	O
my	O
findings	O
fit	O
it	O
well	O
enough	O
,	O
and	O
complement	O
what	O
'	O
s	O
already	O
here	O
.	O
My	O
focus	O
is	O
looking	O
for	O
documentation	O
on	O
the	O
various	O
terms	O
,	O
and	O
adding	O
some	O
more	O
related	O
terms	O
that	O
might	O
crop	O
up	O
in	O
other	O
places	O
.	O
Consider	O
the	O
following	O
example	O
:	O
#	O
pre	O
#	O
li	O
The	O
simple	O
name	O
of	O
D	O
is	O
D	O
.	O
That	O
'	O
s	O
just	O
the	O
part	O
you	O
wrote	O
when	O
declaring	O
the	O
class	O
.	O
Anonymous	O
classes	O
have	O
no	O
simple	O
name	O
.	O
Class	B-api_mention
.	I-api_mention
getSimpleName	I-api_mention
(	I-api_mention
)	I-api_mention
returns	O
this	O
name	O
or	O
the	O
empty	O
string	O
.	O
It	O
is	O
possible	O
for	O
the	O
simple	O
name	O
to	O
contain	O
a	O
$	O
if	O
you	O
write	O
it	O
like	O
this	O
,	O
since	O
$	O
is	O
a	O
valid	O
part	O
of	O
an	O
identifier	O
.	O
#	O
li	O
According	O
to	O
the	O
JLS	O
section	O
6	O
.	O
7	O
,	O
both	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
and	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
.	O
D	O
.	O
D	O
would	O
be	O
fully	O
qualified	O
names	O
,	O
but	O
only	O
a	O
.	O
b	O
.	O
C	O
.	O
D	O
would	O
be	O
the	O
canonical	O
name	O
of	O
D	O
.	O
So	O
every	O
canonical	O
name	O
is	O
a	O
fully	O
qualified	O
name	O
,	O
but	O
the	O
converes	O
is	O
not	O
always	O
true	O
.	O
Class	B-api_mention
.	I-api_mention
getCanonicalName	I-api_mention
(	I-api_mention
)	I-api_mention
will	O
return	O
the	O
canonical	O
name	O
or	O
null	O
.	O
#	O
li	O
Class	B-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
documented	O
to	O
return	O
the	O
binary	O
name	O
,	O
as	O
specified	O
in	O
JLS	O
section	O
13	O
.	O
1	O
.	O
In	O
this	O
case	O
it	O
returns	O
a	O
.	O
b	O
.	O
C	O
$	O
D	O
for	O
D	O
and	O
[	O
La	O
.	O
b	O
.	O
C	O
$	O
D	O
;	O
for	O
D	O
[	O
]	O
.	O
#	O
li	O
This	O
answer	O
demonstrates	O
that	O
it	O
is	O
possible	O
for	O
two	O
classes	O
loaded	O
by	O
the	O
same	O
class	O
loader	O
to	O
have	O
the	O
same	O
canonical	O
name	O
but	O
distinct	O
binary	O
names	O
.	O
Neither	O
name	O
is	O
sufficient	O
to	O
reliably	O
deduce	O
the	O
other	O
:	O
if	O
you	O
have	O
the	O
canonical	O
name	O
,	O
you	O
don	O
'	O
t	O
know	O
which	O
parts	O
of	O
the	O
name	O
are	O
packages	O
and	O
which	O
are	O
containing	O
classes	O
.	O
If	O
you	O
have	O
the	O
binary	O
name	O
,	O
you	O
don	O
'	O
t	O
know	O
which	O
$	O
were	O
introduced	O
as	O
separators	O
and	O
which	O
were	O
part	O
of	O
some	O
simple	O
name	O
.	O
#	O
li	O
Anonymous	O
classes	O
and	O
local	O
classes	O
have	O
no	O
fully	O
qualified	O
names	O
but	O
still	O
have	O
a	O
binary	O
name	O
.	O
The	O
same	O
holds	O
for	O
classes	O
nested	O
inside	O
such	O
classes	O
.	O
Every	O
class	O
has	O
a	O
binary	O
name	O
.	O
#	O
li	O
Running	O
javap	O
-	O
v	O
-	O
private	O
on	O
a	O
/	O
b	O
/	O
C	O
.	O
class	O
shows	O
that	O
the	O
bytecode	O
refers	O
to	O
the	O
type	O
of	O
d	O
as	O
La	O
/	O
b	O
/	O
C	O
$	O
D	O
;	O
and	O
that	O
of	O
the	O
array	O
ds	O
as	O
[	O
La	O
/	O
b	O
/	O
C	O
$	O
D	O
;	O
.	O
These	O
are	O
called	O
descriptors	O
,	O
and	O
they	O
are	O
specified	O
in	O
JVMS	O
section	O
4	O
.	O
3	O
.	O
#	O
li	O
The	O
class	O
name	O
a	O
/	O
b	O
/	O
C	O
$	O
D	O
used	O
in	O
both	O
of	O
these	O
descriptors	O
is	O
what	O
you	O
get	O
by	O
replacing	O
.	O
by	O
/	O
in	O
the	O
binary	O
name	O
.	O
The	O
JVM	O
spec	O
apparently	O
calls	O
this	O
the	O
internal	O
form	O
of	O
the	O
binary	O
name	O
.	O
JVMS	O
section	O
4	O
.	O
2	O
.	O
1	O
describes	O
it	O
,	O
and	O
states	O
that	O
the	O
difference	O
from	O
the	O
binary	O
name	O
were	O
for	O
historical	O
reasons	O
.	O
#	O
li	O
The	O
file	O
name	O
of	O
a	O
class	O
in	O
one	O
of	O
the	O
typical	O
filename	O
-	O
based	O
class	O
loaders	O
is	O
what	O
you	O
get	O
if	O
you	O
interpret	O
the	O
/	O
in	O
the	O
internal	O
form	O
of	O
the	O
binary	O
name	O
as	O
a	O
directory	O
separator	O
,	O
and	O
append	O
the	O
file	O
name	O
extension	O
.	O
class	O
to	O
it	O
.	O
It	O
'	O
s	O
resolved	O
relative	O
to	O
the	O
class	O
path	O
used	O
by	O
the	O
class	O
loader	O
in	O
question	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
39005452	O
The	O
best	O
post	O
I	O
'	O
ve	O
seen	O
on	O
the	O
topic	O
was	O
written	O
by	O
Daniel	O
Olszewski	O
and	O
can	O
be	O
found	O
at	O
#	O
a	O
.	O
While	O
others	O
mention	O
when	O
you	O
should	O
or	O
should	O
not	O
use	O
Optional	B-api_mention
,	O
this	O
post	O
actually	O
explains	O
why	O
.	O
Cross	O
-	O
posting	O
here	O
in	O
case	O
the	O
link	O
goes	O
down	O
:	O
#	O
blockquote	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
9482369	O
This	O
could	O
be	O
a	O
bit	O
tricky	O
in	O
the	O
most	O
general	O
case	O
.	O
On	O
the	O
face	O
of	O
it	O
,	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
give	O
you	O
the	O
IP	O
address	O
of	O
this	O
host	O
.	O
The	O
problem	O
is	O
that	O
a	O
host	O
could	O
have	O
lots	O
of	O
network	O
interfaces	O
,	O
and	O
an	O
interface	O
could	O
be	O
bound	O
to	O
more	O
than	O
one	O
IP	O
address	O
.	O
And	O
to	O
top	O
that	O
,	O
not	O
all	O
IP	O
addresses	O
will	O
be	O
reachable	O
outside	O
of	O
your	O
machine	O
or	O
your	O
LAN	O
.	O
For	O
example	O
,	O
they	O
could	O
be	O
IP	O
addresses	O
for	O
virtual	O
network	O
devices	O
,	O
private	O
network	O
IP	O
addresses	O
,	O
and	O
so	O
on	O
.	O
What	O
this	O
means	O
is	O
that	O
the	O
IP	O
address	O
returned	O
by	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
might	O
not	O
be	O
the	O
right	O
one	O
to	O
use	O
.	O
How	O
can	O
you	O
deal	O
with	O
this	O
?	O
#	O
li	O
One	O
approach	O
is	O
to	O
use	O
NetworkInterface	B-api_mention
.	I-api_mention
getNetworkInterfaces	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
all	O
of	O
the	O
known	O
network	O
interfaces	O
on	O
the	O
host	O
,	O
and	O
then	O
iterate	O
over	O
each	O
NI	O
'	O
s	O
addresses	O
.	O
#	O
li	O
Another	O
approach	O
is	O
to	O
(	O
somehow	O
)	O
get	O
the	O
externally	O
advertized	O
FQDN	O
for	O
the	O
host	O
,	O
and	O
use	O
InetAddress	B-api_mention
.	I-api_mention
getByName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
look	O
up	O
the	O
primary	O
IP	O
address	O
.	O
(	O
But	O
how	O
do	O
you	O
get	O
it	O
,	O
and	O
how	O
do	O
you	O
deal	O
with	O
a	O
DNS	O
-	O
based	O
load	O
balancer	O
?	O
)	O
#	O
li	O
A	O
variation	O
of	O
the	O
previous	O
is	O
to	O
get	O
the	O
preferred	O
FQDN	O
from	O
a	O
config	O
file	O
or	O
a	O
command	O
line	O
parameter	O
.	O
#	O
li	O
Another	O
variation	O
is	O
to	O
get	O
the	O
preferred	O
IP	O
address	O
from	O
a	O
config	O
file	O
or	O
a	O
command	O
line	O
parameter	O
.	O
In	O
summary	O
,	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
typically	O
work	O
,	O
but	O
you	O
may	O
need	O
to	O
provide	O
an	O
alternative	O
method	O
for	O
the	O
cases	O
where	O
your	O
code	O
is	O
run	O
in	O
an	O
environment	O
with	O
"	O
complicated	O
"	O
networking	O
.	O
#	O
blockquote	O
#	O
li	O
Any	O
address	O
in	O
the	O
range	O
127	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
is	O
a	O
"	O
loopback	O
"	O
address	O
.	O
It	O
is	O
only	O
visible	O
to	O
"	O
this	O
"	O
host	O
.	O
#	O
li	O
Any	O
address	O
in	O
the	O
range	O
192	O
.	O
168	O
.	O
xxx	O
.	O
xxx	O
is	O
a	O
private	O
(	O
aka	O
site	O
local	O
)	O
IP	O
address	O
.	O
These	O
are	O
reserved	O
for	O
use	O
within	O
an	O
organization	O
.	O
The	O
same	O
applies	O
to	O
10	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
addresses	O
,	O
and	O
172	O
.	O
16	O
.	O
xxx	O
.	O
xxx	O
through	O
172	O
.	O
31	O
.	O
xxx	O
.	O
xxx	O
.	O
#	O
li	O
Addresses	O
in	O
the	O
range	O
169	O
.	O
254	O
.	O
xxx	O
.	O
xxx	O
are	O
link	O
local	O
IP	O
addresses	O
.	O
These	O
are	O
reserved	O
for	O
use	O
on	O
a	O
single	O
network	O
segment	O
.	O
#	O
li	O
Addresses	O
in	O
the	O
range	O
224	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
through	O
239	O
.	O
xxx	O
.	O
xxx	O
.	O
xxx	O
are	O
multicast	O
addresses	O
.	O
#	O
li	O
The	O
address	O
255	O
.	O
255	O
.	O
255	O
.	O
255	O
is	O
the	O
broadcast	O
address	O
.	O
#	O
li	O
Anything	O
else	O
should	O
be	O
a	O
valid	O
public	O
point	O
-	O
to	O
-	O
point	O
IPv4	O
address	O
.	O
In	O
fact	O
,	O
the	O
InetAddress	B-api_mention
API	O
provides	O
methods	O
for	O
testing	O
for	O
loopback	O
,	O
link	O
local	O
,	O
site	O
local	O
,	O
multicast	O
and	O
broadcast	O
addresses	O
.	O
You	O
can	O
use	O
these	O
to	O
sort	O
out	O
which	O
of	O
the	O
IP	O
addresses	O
you	O
get	O
back	O
is	O
most	O
appropriate	O
.	O
Question	O
-	O
5175728	O
,	O
answer	O
-	O
5175771	O
Have	O
a	O
look	O
at	O
the	O
Date	B-api_mention
class	O
.	O
There	O
'	O
s	O
also	O
the	O
newer	O
Calendar	O
class	O
which	O
is	O
the	O
preferred	O
method	O
of	O
doing	O
many	O
date	O
/	O
time	O
operations	O
(	O
a	O
lot	O
of	O
the	O
methods	O
on	O
Date	B-api_mention
have	O
been	O
deprecated	O
.	O
)	O
If	O
you	O
just	O
want	O
the	O
current	O
date	O
,	O
then	O
either	O
create	O
a	O
new	O
Date	B-api_mention
object	O
or	O
call	O
Calendar	B-api_mention
.	I-api_mention
getInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
20358928	O
You	O
can	O
use	O
the	O
utility	O
method	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
and	O
feed	O
that	O
result	O
into	O
a	O
new	O
ArrayList	B-api_mention
.	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Other	O
options	O
:	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
li	O
ArrayList	B-api_mention
(	I-api_mention
Collection	I-api_mention
)	I-api_mention
constructor	O
.	O
#	O
li	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
method	O
.	O
#	O
li	O
Collections	B-api_mention
.	I-api_mention
nCopies	I-api_mention
method	O
.	O
#	O
li	O
Collections	B-api_mention
.	I-api_mention
singletonList	I-api_mention
method	O
.	O
Question	O
-	O
6608795	O
,	O
answer	O
-	O
20069798	O
All	O
these	O
answers	O
around	O
here	O
,	O
as	O
well	O
as	O
the	O
answers	O
in	O
this	O
question	O
,	O
suggest	O
that	O
loading	O
absolute	O
URLs	O
,	O
like	O
"	O
/	O
foo	O
/	O
bar	O
.	O
properties	O
"	O
treated	O
the	O
same	O
by	O
class	O
.	B-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
class	O
.	B-api_mention
getClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
NOT	O
the	O
case	O
,	O
at	O
least	O
not	O
in	O
my	O
Tomcat	O
configuration	O
/	O
version	O
(	O
currently	O
7	O
.	O
0	O
.	O
40	O
)	O
.	O
#	O
pre	O
Sorry	O
,	O
I	O
have	O
absolutely	O
no	O
satisfying	O
explanation	O
,	O
but	O
I	O
guess	O
that	O
tomcat	O
does	O
dirty	O
tricks	O
and	O
his	O
black	O
magic	O
with	O
the	O
classloaders	O
and	O
cause	O
the	O
difference	O
.	O
I	O
always	O
used	O
class	O
.	B-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
past	O
and	O
haven	O
'	O
t	O
had	O
any	O
problems	O
.	O
PS	O
:	O
I	O
also	O
posted	O
this	O
over	O
here	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894348	O
The	O
first	O
one	O
using	O
str	B-api_mention
.	I-api_mention
charAt	I-api_mention
should	O
be	O
faster	O
.	O
If	O
you	O
dig	O
inside	O
the	O
source	O
code	O
of	O
String	O
class	O
,	O
we	O
can	O
see	O
that	O
charAt	O
is	O
implemented	O
as	O
follows	O
:	O
#	O
pre	O
Here	O
,	O
all	O
it	O
does	O
is	O
index	O
an	O
array	O
and	O
return	O
the	O
value	O
.	O
Now	O
,	O
if	O
we	O
see	O
the	O
implementation	O
of	O
toCharArray	B-api_mention
,	O
we	O
will	O
find	O
the	O
below	O
:	O
#	O
pre	O
As	O
you	O
see	O
,	O
it	O
is	O
doing	O
a	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
which	O
is	O
definitely	O
going	O
to	O
be	O
a	O
tad	O
slower	O
than	O
not	O
doing	O
it	O
.	O
Question	O
-	O
23218874	O
,	O
answer	O
-	O
23232560	O
For	O
simple	O
cases	O
such	O
as	O
the	O
one	O
illustrated	O
,	O
they	O
are	O
mostly	O
the	O
same	O
.	O
However	O
,	O
there	O
are	O
a	O
number	O
of	O
subtle	O
differences	O
that	O
might	O
be	O
significant	O
.	O
One	O
issue	O
is	O
with	O
ordering	O
.	O
With	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
the	O
order	O
is	O
undefined	O
.	O
It	O
'	O
s	O
unlikely	O
to	O
occur	O
with	O
sequential	O
streams	O
,	O
still	O
,	O
it	O
'	O
s	O
within	O
the	O
specification	O
for	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
to	O
execute	O
in	O
some	O
arbitrary	O
order	O
.	O
This	O
does	O
occur	O
frequently	O
in	O
parallel	O
streams	O
.	O
By	O
contrast	O
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
always	O
executed	O
in	O
the	O
iteration	O
order	O
of	O
the	O
Iterable	B-api_mention
,	O
if	O
one	O
is	O
specified	O
.	O
Another	O
issue	O
is	O
with	O
side	O
effects	O
.	O
The	O
action	O
specified	O
in	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
required	O
to	O
be	O
non	O
-	O
interfering	O
.	O
(	O
See	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
stream	I-api_mention
package	O
doc	O
.	O
)	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
potentially	O
has	O
fewer	O
restrictions	O
.	O
For	O
the	O
collections	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
generally	O
use	O
that	O
collection	O
'	O
s	O
Iterator	B-api_mention
,	O
most	O
of	O
which	O
are	O
designed	O
to	O
be	O
fail	O
-	O
fast	O
and	O
which	O
will	O
throw	O
ConcurrentModificationException	B-api_mention
if	O
the	O
collection	O
is	O
structurally	O
modified	O
during	O
the	O
iteration	O
.	O
However	O
,	O
modifications	O
that	O
aren	O
'	O
t	O
structural	O
are	O
allowed	O
during	O
iteration	O
.	O
For	O
example	O
,	O
the	O
ArrayList	B-api_mention
class	O
documentation	O
says	O
"	O
merely	O
setting	O
the	O
value	O
of	O
an	O
element	O
is	O
not	O
a	O
structural	O
modification	O
.	O
"	O
Thus	O
,	O
the	O
action	O
for	O
ArrayList	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
allowed	O
to	O
set	O
values	O
in	O
the	O
underlying	O
ArrayList	B-api_mention
without	O
problems	O
.	O
The	O
concurrent	O
collections	O
are	O
yet	O
again	O
different	O
.	O
Instead	O
of	O
fail	O
-	O
fast	O
,	O
they	O
are	O
designed	O
to	O
be	O
weakly	O
consistent	O
.	O
The	O
full	O
definition	O
is	O
at	O
that	O
link	O
.	O
Briefly	O
,	O
though	O
,	O
consider	O
ConcurrentLinkedDeque	B-api_mention
.	O
The	O
action	O
passed	O
to	O
its	O
forEach	B-api_mention
method	O
is	O
allowed	O
to	O
modify	O
the	O
underlying	O
deque	O
,	O
even	O
structurally	O
,	O
and	O
ConcurrentModificationException	B-api_mention
is	O
never	O
thrown	O
.	O
However	O
,	O
the	O
modification	O
that	O
occurs	O
might	O
or	O
might	O
not	O
be	O
visible	O
in	O
this	O
iteration	O
.	O
(	O
Hence	O
the	O
"	O
weak	O
"	O
consistency	O
.	O
)	O
Still	O
another	O
difference	O
is	O
visible	O
if	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
iterating	O
over	O
a	O
synchronized	O
collection	O
.	O
On	O
such	O
a	O
collection	O
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
takes	O
the	O
collection	O
'	O
s	O
lock	O
once	O
and	O
holds	O
it	O
across	O
all	O
the	O
calls	O
to	O
the	O
action	O
method	O
.	O
The	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
call	O
uses	O
the	O
collection	O
'	O
s	O
spliterator	O
,	O
which	O
does	O
not	O
lock	O
,	O
and	O
which	O
relies	O
on	O
the	O
prevailing	O
rule	O
of	O
non	O
-	O
interference	O
.	O
The	O
collection	O
backing	O
the	O
stream	O
could	O
be	O
modified	O
during	O
iteration	O
,	O
and	O
if	O
it	O
is	O
,	O
a	O
ConcurrentModificationException	B-api_mention
or	O
inconsistent	O
behavior	O
could	O
result	O
.	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
21025279	O
Use	O
proper	O
escaping	O
:	O
string	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
the	O
helper	O
Regexp	B-api_mention
.	I-api_mention
quote	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
has	O
been	O
created	O
for	O
exactly	O
this	O
purpose	O
:	O
string	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
works	O
with	O
arbitrary	O
input	O
strings	O
.	O
Very	O
useful	O
when	O
you	O
need	O
to	O
quote	O
/	O
escape	O
user	O
input	O
.	O
Question	O
-	O
23308193	O
,	O
answer	O
-	O
32566745	O
This	O
is	O
possible	O
for	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
solution	O
is	O
not	O
nice	O
,	O
but	O
it	O
is	O
possible	O
.	O
WARNING	O
:	O
You	O
should	O
not	O
use	O
it	O
for	O
controlling	O
business	O
logic	O
,	O
but	O
purely	O
for	O
handling	O
an	O
exceptional	O
situation	O
which	O
occurs	O
during	O
the	O
execution	O
of	O
the	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Such	O
as	O
a	O
resource	O
suddenly	O
stops	O
being	O
accessible	O
,	O
one	O
of	O
the	O
processed	O
objects	O
is	O
violating	O
a	O
contract	O
(	O
e	O
.	O
g	O
.	O
contract	O
says	O
that	O
all	O
the	O
elements	O
in	O
the	O
stream	O
must	O
not	O
be	O
null	O
but	O
suddenly	O
and	O
unexpectedly	O
one	O
of	O
them	O
is	O
null	O
)	O
etc	O
.	O
According	O
to	O
the	O
documentation	O
for	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
So	O
you	O
throw	O
an	O
exception	O
which	O
will	O
immediately	O
break	O
the	O
internal	O
loop	O
.	O
The	O
code	O
will	O
be	O
something	O
like	O
this	O
-	O
I	O
cannot	O
say	O
I	O
like	O
it	O
but	O
it	O
works	O
.	O
You	O
create	O
your	O
own	O
class	O
BreakException	B-api_mention
which	O
extends	O
RuntimeException	B-api_mention
.	O
#	O
pre	O
Notice	O
that	O
the	O
try	O
.	O
.	O
.	O
catch	O
is	O
not	O
around	O
the	O
lambda	O
expression	O
,	O
but	O
rather	O
around	O
the	O
whole	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
To	O
make	O
it	O
more	O
visible	O
,	O
see	O
the	O
following	O
transcription	O
of	O
the	O
code	O
which	O
shows	O
it	O
more	O
clearly	O
:	O
#	O
pre	O
