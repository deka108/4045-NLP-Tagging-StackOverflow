Question	O
-	O
6667243	O
What	O
is	O
the	O
best	O
way	O
to	O
use	O
the	O
values	O
stored	O
in	O
an	O
Enum	B-api_mention
as	O
String	B-api_mention
literals	O
?	O
For	O
example	O
:	O
#	O
pre	O
Then	O
later	O
I	O
could	O
use	O
Mode	O
.	O
mode1	O
to	O
return	O
its	O
string	O
representation	O
as	O
mode1	O
.	O
Without	O
having	O
to	O
keep	O
calling	O
Mode	O
.	O
model	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
27908213	O
,	O
answer	O
-	O
27908302	O
With	O
strings	O
you	O
'	O
re	O
going	O
to	O
want	O
to	O
use	O
the	O
equals	O
method	O
of	O
Strings	O
.	O
That	O
aside	O
,	O
you	O
already	O
have	O
the	O
enum	O
that	O
you	O
could	O
compare	O
with	O
the	O
equality	O
operator	O
.	O
Under	O
what	O
scenario	O
would	O
this	O
arise	O
?	O
That	O
being	O
said	O
,	O
yes	O
,	O
the	O
.	O
equals	O
method	O
will	O
return	O
true	O
if	O
they	O
are	O
the	O
same	O
.	O
I	O
'	O
m	O
not	O
sure	O
about	O
equality	O
operator	O
,	O
and	O
without	O
looking	O
it	O
up	O
,	O
I	O
can	O
tell	O
you	O
that	O
it	O
'	O
s	O
poor	O
programming	O
to	O
use	O
it	O
if	O
it	O
is	O
.	O
Question	O
-	O
6802483	O
,	O
answer	O
-	O
6802523	O
There	O
is	O
no	O
direct	O
way	O
to	O
do	O
this	O
-	O
Java	O
has	O
no	O
Map	B-api_mention
literals	O
(	O
yet	O
-	O
I	O
think	O
they	O
were	O
proposed	O
for	O
Java	O
8	O
)	O
.	O
Some	O
people	O
like	O
this	O
:	O
#	O
pre	O
This	O
creates	O
an	O
anonymous	O
subclass	O
of	O
HashMap	B-api_mention
,	O
whose	O
instance	O
initializer	O
puts	O
these	O
values	O
.	O
(	O
By	O
the	O
way	O
,	O
a	O
map	O
can	O
'	O
t	O
contain	O
twice	O
the	O
same	O
value	O
,	O
your	O
second	O
put	O
will	O
overwrite	O
the	O
first	O
one	O
.	O
I	O
'	O
ll	O
use	O
different	O
values	O
for	O
the	O
next	O
examples	O
.	O
)	O
The	O
normal	O
way	O
would	O
be	O
this	O
(	O
for	O
a	O
local	O
variable	O
)	O
:	O
#	O
pre	O
If	O
your	O
test	O
map	O
is	O
an	O
instance	O
variable	O
,	O
put	O
the	O
initialization	O
in	O
a	O
constructor	O
or	O
instance	O
initializer	O
:	O
#	O
pre	O
If	O
your	O
test	O
map	O
is	O
a	O
class	O
variable	O
,	O
put	O
the	O
initialization	O
in	O
a	O
static	O
initializer	O
:	O
#	O
pre	O
If	O
you	O
want	O
your	O
map	O
to	O
never	O
change	O
,	O
you	O
should	O
after	O
the	O
initialization	O
wrap	O
your	O
map	O
by	O
Collections	B-api_mention
.	I-api_mention
unmodifiableMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
can	O
do	O
this	O
in	O
a	O
static	O
initializer	O
too	O
:	O
#	O
pre	O
(	O
I	O
'	O
m	O
not	O
sure	O
if	O
you	O
can	O
now	O
make	O
test	O
final	O
.	O
.	O
.	O
try	O
it	O
out	O
and	O
report	O
here	O
.	O
)	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29922469	O
My	O
guess	O
is	O
that	O
enums	O
are	O
limited	O
in	O
size	O
(	O
i	O
.	O
e	O
the	O
size	O
is	O
not	O
limited	O
by	O
language	O
but	O
limited	O
by	O
usage	O
)	O
and	O
thus	O
they	O
don	O
'	O
t	O
need	O
a	O
native	O
stream	O
api	O
.	O
Streams	O
are	O
very	O
good	O
when	O
you	O
have	O
to	O
manipulate	O
transform	O
and	O
recollect	O
the	O
elements	O
in	O
a	O
stream	O
;	O
these	O
are	O
not	O
common	O
uses	O
case	O
for	O
Enum	O
(	O
usually	O
you	O
iterate	O
over	O
enum	O
values	O
,	O
but	O
rarely	O
you	O
need	O
to	O
transform	O
,	O
map	O
and	O
collect	O
them	O
)	O
.	O
If	O
you	O
need	O
only	O
to	O
do	O
an	O
action	O
over	O
each	O
elements	O
perhaps	O
you	O
should	O
expose	O
only	O
a	O
forEach	B-api_mention
method	O
#	O
pre	O
Question	O
-	O
23699371	O
,	O
answer	O
-	O
34731808	O
You	O
can	O
use	O
the	O
distinct	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
Eclipse	O
Collections	B-api_mention
.	O
#	O
pre	O
If	O
you	O
can	O
refactor	O
persons	O
to	O
implement	O
an	O
Eclipse	O
Collections	B-api_mention
interface	O
,	O
you	O
can	O
call	O
the	O
method	O
directly	O
on	O
the	O
list	O
.	O
#	O
pre	O
HashingStrategy	O
is	O
simply	O
a	O
strategy	O
interface	O
that	O
allows	O
you	O
to	O
define	O
custom	O
implementations	O
of	O
equals	O
and	O
hashcode	O
.	O
#	O
pre	O
Note	O
:	O
I	O
am	O
a	O
committer	O
for	O
Eclipse	O
Collections	O
.	O
Question	O
-	O
12544479	O
I	O
am	O
looking	O
for	O
the	O
easiest	O
and	O
simplest	O
way	O
to	O
bind	O
and	O
convert	O
data	O
in	O
Spring	O
MVC	O
.	O
If	O
possible	O
,	O
without	O
doing	O
any	O
xml	O
configuration	O
.	O
So	O
far	O
I	O
'	O
ve	O
been	O
using	O
PropertyEditors	B-api_mention
like	O
so	O
:	O
#	O
pre	O
and	O
#	O
pre	O
It	O
is	O
simple	O
:	O
both	O
conversion	O
are	O
defined	O
in	O
the	O
same	O
class	O
,	O
and	O
the	O
binding	O
is	O
straightforward	O
.	O
If	O
I	O
wanted	O
to	O
do	O
a	O
general	O
binding	O
across	O
all	O
my	O
controllers	O
,	O
I	O
could	O
still	O
add	O
3	O
lines	O
in	O
my	O
xml	O
config	O
.	O
But	O
Spring	O
3	O
.	O
x	O
introduced	O
a	O
new	O
way	O
to	O
do	O
it	O
,	O
using	O
Converters	B-api_mention
:	O
#	O
blockquote	O
So	O
let	O
'	O
s	O
say	O
I	O
want	O
to	O
use	O
Converters	B-api_mention
because	O
it	O
is	O
"	O
the	O
latest	O
alternative	O
"	O
.	O
I	O
would	O
have	O
to	O
create	O
two	O
converters	O
:	O
#	O
pre	O
First	O
drawback	O
:	O
I	O
have	O
to	O
make	O
two	O
classes	O
.	O
Benefit	O
:	O
no	O
need	O
to	O
cast	O
thanks	O
to	O
genericity	O
.	O
Then	O
,	O
how	O
do	O
I	O
simply	O
data	O
bind	O
the	O
converters	B-api_mention
?	O
Second	O
drawback	O
:	O
I	O
haven	O
'	O
t	O
found	O
any	O
simple	O
way	O
(	O
annotations	O
or	O
other	O
programmatic	O
facilities	O
)	O
to	O
do	O
it	O
in	O
a	O
controller	O
:	O
nothing	O
like	O
someSpringObject	O
.	O
registerCustomConverter	O
(	O
args	O
)	O
;	O
.	O
The	O
only	O
ways	O
I	O
'	O
ve	O
found	O
would	O
be	O
tedious	O
,	O
not	O
simple	O
,	O
and	O
only	O
about	O
general	O
cross	O
-	O
controller	O
binding	O
:	O
#	O
li	O
XML	O
config	O
:	O
#	O
pre	O
#	O
li	O
Java	O
config	O
(	O
only	O
in	O
Spring	O
3	O
.	O
1	O
+	O
)	O
:	O
#	O
pre	O
With	O
all	O
these	O
drawbacks	O
,	O
why	O
using	O
Converters	B-api_mention
?	O
Am	O
I	O
missing	O
something	O
?	O
Are	O
there	O
other	O
tricks	O
that	O
I	O
am	O
not	O
aware	O
of	O
?	O
I	O
am	O
tempted	O
to	O
go	O
on	O
using	O
PropertyEditors	B-api_mention
.	O
.	O
.	O
Binding	O
is	O
much	O
easier	O
and	O
quicker	O
.	O
Question	O
-	O
24885223	O
,	O
answer	O
-	O
29841832	O
Thanks	O
to	O
@	O
marmor	O
,	O
I	O
updated	O
my	O
answer	O
.	O
I	O
think	O
it	O
'	O
s	O
a	O
good	O
solution	O
to	O
handle	O
the	O
onClick	B-api_mention
(	I-api_mention
)	I-api_mention
in	O
the	O
ViewHolder	B-api_mention
class	O
constructor	O
and	O
pass	O
it	O
to	O
the	O
parent	O
class	O
via	O
OnItemClickListener	B-api_mention
interface	O
.	O
MyAdapter	O
.	O
java	O
#	O
pre	O
Usage	O
of	O
adapter	O
in	O
other	O
classes	O
:	O
MyFragment	O
.	O
java	O
#	O
pre	O
Question	O
-	O
8157755	O
,	O
answer	O
-	O
8157791	O
If	O
you	O
want	O
the	O
value	O
you	O
are	O
assigning	O
in	O
the	O
constructor	O
,	O
you	O
need	O
to	O
add	O
a	O
method	O
in	O
the	O
enum	O
definition	O
to	O
return	O
that	O
value	O
.	O
If	O
you	O
want	O
a	O
unique	O
number	O
that	O
represent	O
the	O
enum	O
value	O
,	O
you	O
can	O
use	O
ordinal	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489334	O
Text	O
inside	O
double	O
quotes	O
creates	O
a	O
literal	O
String	B-api_mention
object	O
.	O
String	B-api_mention
myString	O
=	O
StringLiteral	O
;	O
The	O
code	O
above	O
creates	O
a	O
String	B-api_mention
object	O
,	O
using	O
double	O
quotes	O
.	O
Question	O
-	O
12317668	O
,	O
answer	O
-	O
12375312	O
Here	O
we	O
are	O
faced	O
with	O
a	O
bug	O
in	O
the	O
JIT	O
-	O
compiler	O
.	O
Compiler	O
determines	O
that	O
the	O
allocated	O
array	O
is	O
filled	O
after	O
allocation	O
in	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
the	O
check	O
for	O
uses	O
between	O
the	O
allocation	O
and	O
the	O
fill	O
is	O
faulty	O
.	O
So	O
,	O
compiler	O
performs	O
an	O
illegal	O
optimization	O
-	O
it	O
skips	O
zeroing	O
of	O
allocated	O
array	O
.	O
This	O
bug	O
is	O
placed	O
in	O
Oracle	O
bug	O
tracker	O
(	O
bug	O
id	O
7196857	O
)	O
.	O
Unfortunately	O
,	O
I	O
did	O
not	O
wait	O
for	O
any	O
clarifications	O
from	O
Oracle	O
about	O
the	O
following	O
points	O
.	O
As	O
I	O
see	O
,	O
this	O
bug	O
is	O
OS	O
-	O
specific	O
:	O
it	O
absolutely	O
reproducible	O
on	O
64	O
-	O
bit	O
Linux	O
and	O
Mac	O
,	O
but	O
,	O
as	O
I	O
see	O
from	O
comments	O
,	O
it	O
reproduces	O
not	O
regularly	O
on	O
Windows	O
(	O
for	O
similar	O
versions	O
of	O
JDK	O
)	O
.	O
Additionally	O
it	O
would	O
be	O
nice	O
to	O
know	O
when	O
this	O
bug	O
will	O
be	O
fixed	O
.	O
There	O
is	O
only	O
advice	O
at	O
the	O
moment	O
:	O
do	O
not	O
use	O
JDK1	O
.	O
7	O
.	O
0	O
_	O
04	O
or	O
later	O
if	O
you	O
depend	O
on	O
JLS	O
for	O
newly	O
declared	O
arrays	O
.	O
Update	O
at	O
October	O
5	O
:	O
In	O
the	O
new	O
Build	O
10	O
of	O
the	O
JDK	O
7u10	O
(	O
early	O
access	O
)	O
released	O
at	O
October	O
04	O
,	O
2012	O
,	O
this	O
bug	O
was	O
fixed	O
at	O
least	O
for	O
Linux	O
OS	O
(	O
I	O
did	O
not	O
test	O
for	O
other	O
)	O
.	O
Thanks	O
to	O
@	O
Makoto	O
,	O
who	O
found	O
that	O
this	O
bug	O
is	O
no	O
longer	O
available	O
for	O
public	O
access	O
in	O
Oracle	O
bug	O
database	O
.	O
Unfortunately	O
,	O
I	O
do	O
not	O
know	O
for	O
the	O
reasons	O
Oracle	O
removed	O
it	O
from	O
public	O
access	O
,	O
but	O
it	O
is	O
available	O
in	O
Google	O
cache	O
.	O
Also	O
,	O
this	O
bug	O
has	O
caught	O
the	O
attention	O
of	O
Redhat	O
:	O
the	O
CVE	O
identifiers	O
CVE	O
-	O
2012	O
-	O
4420	O
(	O
bugzilla	O
)	O
and	O
CVE	O
-	O
2012	O
-	O
4416	O
(	O
bugzilla	O
)	O
were	O
assigned	O
to	O
this	O
flaw	O
.	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684852	O
What	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
is	O
create	O
a	O
string	O
representation	O
of	O
each	O
individual	O
byte	O
in	O
your	O
byteArray	B-api_mention
.	O
Please	O
check	O
the	O
API	O
documentation	O
Arrays	B-api_mention
API	O
To	O
convert	O
your	O
response	O
string	O
back	O
to	O
the	O
original	O
byte	O
array	O
,	O
you	O
have	O
to	O
use	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
something	O
and	O
convert	O
it	O
into	O
a	O
collection	O
and	O
then	O
convert	O
each	O
individual	O
item	O
in	O
there	O
to	O
a	O
byte	O
to	O
recreate	O
your	O
byte	O
array	O
.	O
Question	O
-	O
23699371	O
,	O
answer	O
-	O
23733628	O
The	O
easiest	O
way	O
to	O
implement	O
this	O
is	O
to	O
jump	O
on	O
the	O
sort	O
feature	O
as	O
it	O
already	O
provides	O
an	O
optional	O
Comparator	B-api_mention
which	O
can	O
be	O
created	O
using	O
an	O
element	O
’	O
s	O
property	O
.	O
Then	O
you	O
have	O
to	O
filter	O
duplicates	O
out	O
which	O
can	O
be	O
done	O
using	O
a	O
statefull	O
Predicate	B-api_mention
which	O
uses	O
the	O
fact	O
that	O
for	O
a	O
sorted	O
stream	O
all	O
equal	O
elements	O
are	O
adjacent	O
:	O
#	O
pre	O
Of	O
course	O
,	O
a	O
statefull	O
Predicate	B-api_mention
is	O
not	O
thread	O
-	O
safe	O
,	O
however	O
if	O
that	O
’	O
s	O
your	O
need	O
you	O
can	O
move	O
this	O
logic	O
into	O
a	O
Collector	B-api_mention
and	O
let	O
the	O
stream	O
take	O
care	O
of	O
the	O
thread	O
-	O
safety	O
when	O
using	O
your	O
Collector	B-api_mention
.	O
This	O
depends	O
on	O
what	O
you	O
want	O
to	O
do	O
with	O
the	O
stream	O
of	O
distinct	O
elements	O
which	O
you	O
didn	O
’	O
t	O
tell	O
us	O
in	O
your	O
question	O
.	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271668	O
I	O
'	O
m	O
assuming	O
this	O
is	O
happening	O
for	O
an	O
anonymous	O
class	O
.	O
When	O
you	O
create	O
an	O
anonymous	O
class	O
you	O
actually	O
create	O
a	O
class	O
that	O
extends	O
the	O
class	O
whose	O
name	O
you	O
got	O
.	O
The	O
"	O
cleaner	O
"	O
way	O
to	O
get	O
the	O
name	O
you	O
want	O
is	O
:	O
If	O
your	O
class	O
is	O
an	O
anonymous	O
inner	O
class	O
,	O
getSuperClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
give	O
you	O
the	O
class	O
that	O
it	O
was	O
created	O
from	O
.	O
If	O
you	O
created	O
it	O
from	O
an	O
interface	O
than	O
you	O
'	O
re	O
sort	O
of	O
SOL	O
because	O
the	O
best	O
you	O
can	O
do	O
is	O
getInterfaces	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
might	O
give	O
you	O
more	O
than	O
one	O
interface	O
.	O
The	O
"	O
hacky	O
"	O
way	O
is	O
to	O
just	O
get	O
the	O
name	O
with	O
getClassName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
use	O
a	O
regex	O
to	O
drop	O
the	O
$	O
1	O
.	O
Question	O
-	O
33804394	O
,	O
answer	O
-	O
33814549	O
In	O
this	O
sort	O
of	O
situation	O
I	O
would	O
write	O
#	O
pre	O
Interestingly	O
you	O
say	O
that	O
the	O
"	O
try	O
statement	O
will	O
never	O
fail	O
"	O
,	O
but	O
you	O
still	O
took	O
the	O
trouble	O
to	O
write	O
a	O
statement	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
that	O
you	O
claim	O
will	O
never	O
be	O
executed	O
.	O
Why	O
?	O
Perhaps	O
your	O
belief	O
is	O
not	O
that	O
firmly	O
held	O
.	O
That	O
is	O
good	O
(	O
in	O
my	O
opinion	O
)	O
,	O
since	O
your	O
belief	O
is	O
not	O
based	O
on	O
the	O
code	O
you	O
wrote	O
,	O
but	O
rather	O
on	O
the	O
expectation	O
that	O
your	O
client	O
will	O
not	O
violate	O
the	O
precondition	O
.	O
Better	O
to	O
program	O
public	O
methods	O
defensively	O
.	O
By	O
the	O
way	O
,	O
your	O
code	O
won	O
'	O
t	O
compile	O
for	O
me	O
.	O
You	O
can	O
'	O
t	O
call	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
even	O
if	O
the	O
type	O
of	O
a	O
is	O
Cloneable	B-api_mention
.	O
At	O
least	O
Eclipse	O
'	O
s	O
compiler	O
says	O
so	O
.	O
Expression	O
a	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
error	O
#	O
blockquote	O
What	O
I	O
would	O
do	O
for	O
your	O
specific	O
case	O
is	O
#	O
pre	O
Where	O
PubliclyCloneable	O
is	O
defined	O
by	O
#	O
pre	O
Or	O
,	O
if	O
you	O
absolutely	O
need	O
the	O
parameter	O
type	O
to	O
be	O
Cloneable	B-api_mention
,	O
the	O
following	O
at	O
least	O
compiles	O
.	O
#	O
pre	O
Question	O
-	O
7935858	O
,	O
answer	O
-	O
7935873	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
.	I-api_mention
split	I-api_mention
splits	O
on	O
regular	O
expressions	O
,	O
and	O
.	O
in	O
a	O
regular	O
expression	O
means	O
"	O
any	O
character	O
"	O
.	O
Try	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
32164385	O
,	O
answer	O
-	O
32167166	O
#	O
blockquote	O
I	O
must	O
agree	O
with	O
other	O
answers	O
that	O
there	O
is	O
no	O
direct	O
way	O
to	O
determine	O
that	O
method	O
will	O
modify	O
your	O
object	O
or	O
not	O
and	O
yes	O
to	O
make	O
sure	O
that	O
method	O
can	O
not	O
modify	O
your	O
Object	B-api_mention
you	O
all	O
have	O
to	O
do	O
it	O
is	O
from	O
your	O
side	O
.	O
#	O
blockquote	O
Here	O
the	O
method	O
name	O
comes	O
to	O
the	O
scene	O
.	O
Moving	O
ahead	O
with	O
the	O
naming	O
convention	O
of	O
method	O
we	O
have	O
to	O
take	O
a	O
look	O
at	O
some	O
method	O
declarations	O
which	O
clearly	O
convince	O
you	O
that	O
your	O
Object	B-api_mention
will	O
not	O
be	O
changed	O
at	O
all	O
.	O
For	O
example	O
,	O
You	O
know	O
that	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
will	O
not	O
change	O
your	O
actual	O
array	O
,	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
change	O
your	O
boo	O
Method	O
names	O
are	O
real	O
weapons	O
to	O
provide	O
as	O
much	O
information	O
as	O
possible	O
to	O
the	O
method	O
user	O
.	O
(	O
Yes	O
!	O
it	O
'	O
s	O
always	O
not	O
possible	O
but	O
quite	O
a	O
good	O
practice	O
to	O
follow	O
.	O
)	O
Let	O
'	O
s	O
consider	O
it	O
in	O
your	O
case	O
that	O
say	O
printBoo	O
will	O
only	O
print	O
,	O
copyBoo	O
will	O
only	O
copy	O
,	O
clearBoo	O
will	O
reset	O
all	O
attributes	O
,	O
checkAndCreateNewBoo	O
will	O
check	O
your	O
boo	O
Object	B-api_mention
and	O
create	O
new	O
if	O
required	O
.	O
So	O
,	O
ultimately	O
if	O
we	O
can	O
use	O
them	O
in	O
a	O
proper	O
way	O
caller	O
can	O
be	O
assured	O
with	O
the	O
fact	O
that	O
Object	B-api_mention
will	O
remain	O
the	O
same	O
after	O
calling	O
the	O
method	O
.	O
Question	O
-	O
5175728	O
,	O
answer	O
-	O
5175900	O
It	O
depends	O
on	O
what	O
form	O
of	O
date	O
/	O
time	O
you	O
want	O
:	O
#	O
li	O
If	O
you	O
want	O
the	O
date	O
/	O
time	O
as	O
a	O
single	O
numeric	O
value	O
,	O
then	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
that	O
,	O
expressed	O
as	O
the	O
number	O
of	O
milliseconds	O
after	O
the	O
UNIX	O
epoch	O
(	O
as	O
a	O
Java	O
long	O
)	O
.	O
This	O
value	O
is	O
a	O
delta	O
from	O
a	O
UTC	O
time	O
-	O
point	O
,	O
and	O
is	O
independent	O
of	O
the	O
local	O
time	O
-	O
zone	O
.	O
.	O
.	O
assuming	O
that	O
the	O
system	O
clock	O
has	O
been	O
set	O
correctly	O
.	O
#	O
li	O
If	O
you	O
want	O
the	O
date	O
/	O
time	O
in	O
a	O
form	O
that	O
allows	O
you	O
to	O
access	O
the	O
components	O
(	O
year	O
,	O
month	O
,	O
etc	O
)	O
numerically	O
,	O
you	O
could	O
use	O
one	O
of	O
the	O
following	O
:	O
#	O
li	O
new	O
Date	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
a	O
Date	B-api_mention
object	O
initialized	O
with	O
the	O
current	O
date	O
/	O
time	O
.	O
The	O
problem	O
is	O
that	O
the	O
Date	B-api_mention
API	O
methods	O
are	O
mostly	O
flawed	O
.	O
.	O
.	O
and	O
deprecated	O
.	O
#	O
li	O
Calendar	B-api_mention
.	I-api_mention
getInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
a	O
Calendar	B-api_mention
object	O
initialized	O
with	O
the	O
current	O
date	O
/	O
time	O
,	O
using	O
the	O
default	O
Locale	B-api_mention
and	O
TimeZone	B-api_mention
.	O
Other	O
overloads	O
allow	O
you	O
to	O
use	O
a	O
specific	O
Locale	B-api_mention
and	O
/	O
or	O
TimeZone	B-api_mention
.	O
Calendar	B-api_mention
works	O
.	O
.	O
.	O
but	O
the	O
APIs	O
are	O
still	O
cumbersome	O
.	O
#	O
li	O
new	O
org	B-api_mention
.	I-api_mention
joda	I-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
DateTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
a	O
Joda	O
-	O
time	O
object	O
initialized	O
with	O
the	O
current	O
date	O
/	O
time	O
,	O
using	O
the	O
default	O
time	O
zone	O
and	O
chronology	O
.	O
There	O
are	O
lots	O
of	O
other	O
Joda	O
alternatives	O
.	O
.	O
.	O
too	O
many	O
to	O
describe	O
here	O
.	O
#	O
li	O
in	O
Java	O
8	O
,	O
calling	O
LocalDateTime	B-api_mention
.	I-api_mention
now	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
ZonedDateTime	B-api_mention
.	I-api_mention
now	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
give	O
you	O
representations	O
for	O
the	O
current	O
date	O
/	O
time	O
.	O
Prior	O
to	O
Java	O
8	O
,	O
most	O
people	O
who	O
know	O
about	O
these	O
things	O
recommended	O
Joda	O
-	O
time	O
as	O
having	O
(	O
by	O
far	O
)	O
the	O
best	O
Java	O
APIs	O
for	O
doing	O
things	O
involving	O
time	O
point	O
and	O
duration	O
calculations	O
.	O
With	O
Java	O
8	O
,	O
this	O
is	O
no	O
longer	O
true	O
.	O
However	O
,	O
if	O
you	O
are	O
already	O
using	O
Joda	O
time	O
in	O
your	O
codebase	O
,	O
there	O
is	O
no	O
strong	O
reason	O
to	O
migrate	O
.	O
Question	O
-	O
21242110	O
,	O
answer	O
-	O
27378709	O
Better	O
way	O
is	O
:	O
#	O
pre	O
Advantages	O
of	O
this	O
version	O
:	O
#	O
li	O
works	O
regardless	O
the	O
input	O
is	O
an	O
instance	O
of	O
java	O
.	O
util	O
.	O
Date	O
or	O
it	O
'	O
s	O
subclass	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
(	O
unlike	O
@	O
JodaStephen	O
'	O
s	O
way	O
)	O
.	O
This	O
is	O
common	O
with	O
JDBC	O
originated	O
data	O
.	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
.	I-api_mention
toInstant	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
always	O
throws	O
an	O
exception	O
.	O
#	O
li	O
it	O
'	O
s	O
the	O
same	O
for	O
JDK8	O
and	O
JDK7	O
with	O
JSR	O
-	O
310	O
backport	O
I	O
personally	O
use	O
an	O
utility	O
class	O
(	O
but	O
this	O
is	O
not	O
backport	O
-	O
compatible	O
)	O
:	O
#	O
pre	O
The	O
asLocalDate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
here	O
is	O
null	O
-	O
safe	O
,	O
uses	O
toLocalDate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
if	O
input	O
is	O
java	B-api_mention
.	I-api_mention
sql	I-api_mention
.	I-api_mention
Date	I-api_mention
(	O
it	O
may	O
be	O
overriden	O
by	O
the	O
JDBC	O
driver	O
to	O
avoid	O
timezone	O
problems	O
or	O
unnecessary	O
calculations	O
)	O
,	O
otherwise	O
uses	O
the	O
abovementioned	O
method	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725470	O
List	B-api_mention
iterators	O
guarantee	O
first	O
and	O
foremost	O
that	O
you	O
get	O
the	O
list	O
'	O
s	O
elements	O
in	O
the	O
internal	O
order	O
of	O
the	O
list	O
(	O
aka	O
.	O
insertion	O
order	O
)	O
.	O
More	O
specifically	O
it	O
is	O
in	O
the	O
order	O
you	O
'	O
ve	O
inserted	O
the	O
elements	O
or	O
on	O
how	O
you	O
'	O
ve	O
manipulated	O
the	O
list	O
.	O
Sorting	O
can	O
be	O
seen	O
as	O
a	O
manipulation	O
of	O
the	O
data	O
structure	O
,	O
and	O
there	O
are	O
several	O
ways	O
to	O
sort	O
the	O
list	O
.	O
I	O
'	O
ll	O
order	O
the	O
ways	O
in	O
the	O
order	O
of	O
usefulness	O
as	O
I	O
personally	O
see	O
it	O
:	O
1	O
.	O
Consider	O
using	O
Set	B-api_mention
or	O
Bag	B-api_mention
collections	O
instead	O
NOTE	O
:	O
I	O
put	O
this	O
option	O
at	O
the	O
top	O
because	O
this	O
is	O
what	O
you	O
normally	O
want	O
to	O
do	O
anyway	O
.	O
A	O
sorted	O
set	O
automatically	O
sorts	O
the	O
collection	O
at	O
insertion	O
,	O
meaning	O
that	O
it	O
does	O
the	O
sorting	O
while	O
you	O
add	O
elements	O
into	O
the	O
collection	O
.	O
It	O
also	O
means	O
you	O
don	O
'	O
t	O
need	O
to	O
manually	O
sort	O
it	O
.	O
Furthermore	O
if	O
you	O
are	O
sure	O
that	O
you	O
don	O
'	O
t	O
need	O
to	O
worry	O
about	O
(	O
or	O
have	O
)	O
duplicate	O
elements	O
then	O
you	O
can	O
use	O
the	O
TreeSet	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
instead	O
.	O
It	O
implements	O
SortedSet	B-api_mention
and	O
NavigableSet	B-api_mention
interfaces	O
and	O
works	O
as	O
you	O
'	O
d	O
probably	O
expect	O
from	O
a	O
list	O
:	O
#	O
pre	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
natural	O
ordering	O
you	O
can	O
use	O
the	O
constructor	O
parameter	O
that	O
takes	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Alternatively	O
you	O
can	O
use	O
Multisets	B-api_mention
(	O
also	O
known	O
as	O
Bags	B-api_mention
)	O
,	O
that	O
is	O
a	O
Set	B-api_mention
that	O
allows	O
duplicate	O
elements	O
,	O
instead	O
and	O
there	O
are	O
third	O
party	O
implementations	O
of	O
them	O
.	O
Most	O
notably	O
from	O
the	O
Guava	O
libraries	O
there	O
is	O
a	O
TreeMultiset	B-api_mention
,	O
that	O
works	O
a	O
lot	O
like	O
the	O
TreeSet	B-api_mention
.	O
2	O
.	O
Sort	O
your	O
list	O
with	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
As	O
mentioned	O
above	O
,	O
sorting	O
of	O
List	B-api_mention
s	O
is	O
an	O
manipulation	O
of	O
the	O
data	O
structure	O
.	O
So	O
for	O
situations	O
where	O
you	O
need	O
"	O
one	O
source	O
of	O
truth	O
"	O
that	O
will	O
be	O
sorted	O
in	O
a	O
variety	O
of	O
ways	O
then	O
sorting	O
it	O
manually	O
is	O
the	O
way	O
to	O
go	O
.	O
You	O
can	O
sort	O
your	O
list	O
with	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
is	O
a	O
code	O
sample	O
on	O
how	O
:	O
#	O
pre	O
Using	O
comparators	O
One	O
clear	O
benefit	O
is	O
that	O
you	O
may	O
use	O
Comparator	B-api_mention
in	O
the	O
sort	B-api_mention
method	O
.	O
Java	O
also	O
provides	O
some	O
implementations	O
for	O
the	O
Comparator	B-api_mention
such	O
as	O
the	O
Collator	B-api_mention
which	O
is	O
useful	O
for	O
locale	O
sensitive	O
sorting	O
strings	O
.	O
Here	O
is	O
one	O
example	O
:	O
#	O
pre	O
Sorting	O
in	O
concurrent	O
environments	O
Do	O
note	O
though	O
that	O
using	O
the	O
sort	B-api_mention
method	O
is	O
not	O
friendly	O
in	O
concurrent	O
environments	O
,	O
since	O
the	O
collection	O
instance	O
will	O
be	O
manipulated	O
,	O
and	O
you	O
should	O
consider	O
using	O
immutable	O
collections	O
instead	O
.	O
This	O
is	O
something	O
Guava	O
provides	O
in	O
the	O
Ordering	B-api_mention
class	O
and	O
is	O
a	O
simple	O
one	O
-	O
liner	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
sorted	O
=	O
Ordering	B-api_mention
.	I-api_mention
natural	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sortedCopy	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
3	O
.	O
Wrap	O
your	O
list	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
PriorityQueue	I-api_mention
Though	O
there	O
is	O
no	O
sorted	O
list	O
in	O
Java	O
there	O
is	O
however	O
a	O
sorted	O
queue	O
which	O
would	O
probably	O
work	O
just	O
as	O
well	O
for	O
you	O
.	O
It	O
is	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
PriorityQueue	I-api_mention
class	O
.	O
Nico	O
Haase	O
linked	O
in	O
the	O
comments	O
to	O
a	O
related	O
question	O
that	O
also	O
answers	O
this	O
.	O
In	O
a	O
sorted	O
collection	O
you	O
most	O
likely	O
don	O
'	O
t	O
want	O
to	O
manipulate	O
the	O
internal	O
data	O
structure	O
which	O
is	O
why	O
PriorityQueue	B-api_mention
doesn	O
'	O
t	O
implement	O
the	O
List	B-api_mention
interface	O
(	O
because	O
that	O
would	O
give	O
you	O
direct	O
access	O
to	O
it	O
'	O
s	O
elements	O
)	O
.	O
Caveat	O
on	O
the	O
PriorityQueue	B-api_mention
iterator	O
The	O
PriorityQueue	B-api_mention
class	O
implements	O
the	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
and	O
Collection	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interfaces	O
so	O
it	O
can	O
be	O
iterated	O
as	O
usual	O
.	O
However	O
the	O
iterator	O
is	O
not	O
guaranteed	O
to	O
return	O
elements	O
in	O
the	O
sorted	O
order	O
.	O
Instead	O
(	O
as	O
Alderath	O
points	O
out	O
in	O
the	O
comments	O
)	O
you	O
need	O
to	O
poll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
the	O
queue	O
until	O
empty	O
.	O
Note	O
that	O
you	O
can	O
convert	O
a	O
list	O
to	O
a	O
priority	O
queue	O
via	O
the	O
constructor	O
that	O
takes	O
any	O
collection	O
:	O
#	O
pre	O
4	O
.	O
Write	O
your	O
own	O
SortedList	B-api_mention
class	O
NOTE	O
:	O
You	O
shouldn	O
'	O
t	O
have	O
to	O
do	O
this	O
.	O
You	O
can	O
write	O
your	O
own	O
List	B-api_mention
class	O
that	O
sorts	O
each	O
time	O
you	O
add	O
a	O
new	O
element	O
.	O
This	O
can	O
get	O
rather	O
computation	O
heavy	O
depending	O
on	O
your	O
implementation	O
and	O
is	O
pointless	O
,	O
unless	O
you	O
want	O
to	O
do	O
it	O
as	O
an	O
exercise	O
,	O
because	O
of	O
two	O
main	O
reasons	O
:	O
#	O
li	O
It	O
breaks	O
the	O
contract	O
that	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
interface	O
has	O
,	O
because	O
the	O
add	B-api_mention
methods	O
should	O
ensure	O
that	O
the	O
element	O
will	O
reside	O
in	O
the	O
index	O
that	O
the	O
user	O
specifies	O
.	O
#	O
li	O
Why	O
reinvent	O
the	O
wheel	O
?	O
You	O
should	O
be	O
using	O
the	O
TreeSet	B-api_mention
or	O
Multisets	B-api_mention
instead	O
as	O
pointed	O
out	O
in	O
the	O
first	O
point	O
above	O
.	O
However	O
if	O
you	O
want	O
to	O
do	O
it	O
as	O
an	O
exercise	O
here	O
is	O
a	O
code	O
sample	O
to	O
get	O
you	O
started	O
,	O
it	O
uses	O
the	O
AbstractList	B-api_mention
abstract	O
class	O
:	O
#	O
pre	O
Note	O
that	O
if	O
you	O
haven	O
'	O
t	O
overridden	O
the	O
methods	O
you	O
need	O
,	O
then	O
the	O
default	O
implementations	O
from	O
AbstractList	B-api_mention
will	O
throw	O
UnsupportedOperationException	B-api_mention
s	O
.	O
Question	O
-	O
32323081	O
,	O
answer	O
-	O
32323641	O
First	O
of	O
all	O
,	O
you	O
don	O
'	O
have	O
to	O
overload	O
:	O
D	O
-	O
overloading	O
is	O
never	O
a	O
necessity	O
;	O
use	O
2	O
different	O
method	O
names	O
,	O
e	O
.	O
g	O
.	O
foo	O
and	O
fooX	O
Secondly	O
,	O
I	O
don	O
'	O
t	O
see	O
why	O
you	O
need	O
2	O
methods	O
here	O
.	O
If	O
you	O
want	O
to	O
handle	O
checked	O
and	O
unchecked	O
exceptions	O
differently	O
,	O
it	O
can	O
be	O
done	O
at	O
runtime	O
.	O
To	O
achieve	O
"	O
exception	O
transparency	O
"	O
,	O
you	O
can	O
do	O
#	O
pre	O
Finally	O
,	O
disambiguity	O
can	O
be	O
achieved	O
throw	O
lambda	O
return	O
type	O
;	O
the	O
compiler	O
uses	O
the	O
return	O
type	O
as	O
if	O
using	O
an	O
argument	O
type	O
for	O
choosing	O
the	O
most	O
specific	O
method	O
.	O
This	O
gives	O
us	O
the	O
idea	O
to	O
wrap	O
the	O
value	O
together	O
with	O
the	O
exception	O
type	O
,	O
as	O
Result	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
a	O
"	O
monad	O
"	O
as	O
they	O
say	O
.	O
#	O
pre	O
Question	O
-	O
5778658	O
,	O
answer	O
-	O
5778863	O
An	O
OutputStream	B-api_mention
is	O
one	O
where	O
you	O
write	O
data	O
to	O
.	O
If	O
some	O
module	O
exposes	O
an	O
OutputStream	B-api_mention
,	O
the	O
expectation	O
is	O
that	O
there	O
is	O
something	O
at	O
the	O
other	O
end	O
that	O
is	O
reading	O
.	O
Something	O
that	O
exposes	O
an	O
InputStream	B-api_mention
on	O
the	O
other	O
hand	O
is	O
indicating	O
that	O
you	O
will	O
need	O
to	O
listen	O
to	O
this	O
stream	O
,	O
and	O
there	O
will	O
be	O
data	O
that	O
you	O
can	O
read	O
.	O
So	O
it	O
is	O
possible	O
to	O
connect	O
an	O
InputStream	B-api_mention
to	O
an	O
OutputStream	B-api_mention
InputStream	I-api_mention
-	O
-	O
-	O
-	O
read	O
-	O
-	O
-	O
>	O
intermediateBytes	O
[	O
n	O
]	O
-	O
-	O
-	O
-	O
write	O
-	O
-	O
-	O
-	O
>	O
OutputStream	B-api_mention
As	O
someone	O
metioned	O
,	O
this	O
is	O
what	O
the	O
copy	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
from	O
IOUtils	B-api_mention
lets	O
you	O
do	O
.	O
It	O
does	O
not	O
make	O
sense	O
to	O
go	O
the	O
other	O
way	O
.	O
.	O
.	O
hopefully	O
this	O
makes	O
some	O
sense	O
UPDATE	O
:	O
Of	O
course	O
the	O
more	O
I	O
think	O
of	O
this	O
,	O
the	O
more	O
I	O
can	O
see	O
how	O
this	O
actually	O
would	O
be	O
a	O
requirement	O
.	O
I	O
know	O
some	O
of	O
the	O
comments	O
mentioned	O
Piped	O
input	O
/	O
ouput	O
streams	O
,	O
but	O
there	O
is	O
another	O
possibility	O
.	O
If	O
the	O
output	O
stream	O
that	O
is	O
exposed	O
is	O
a	O
ByteArrayOutputStream	B-api_mention
,	O
then	O
you	O
can	O
always	O
get	O
the	O
full	O
contents	O
by	O
calling	O
the	O
toByteArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Then	O
you	O
can	O
create	O
an	O
input	O
stream	O
wrapper	O
by	O
using	O
the	O
ByteArrayInputStream	B-api_mention
sub	O
-	O
class	O
.	O
These	O
two	O
are	O
pseudo	O
-	O
streams	O
,	O
they	O
both	O
basically	O
just	O
wrap	O
an	O
array	O
of	O
bytes	O
.	O
Using	O
the	O
streams	O
this	O
way	O
,	O
therefore	O
,	O
is	O
technically	O
possible	O
,	O
but	O
to	O
me	O
it	O
is	O
still	O
very	O
strange	O
.	O
.	O
.	O
Question	O
-	O
22740464	O
I	O
can	O
add	O
streams	O
or	O
extra	O
elements	O
,	O
like	O
this	O
:	O
Stream	B-api_mention
stream	O
=	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	O
stream1	O
,	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
I	O
can	O
add	O
new	O
stuff	O
as	O
I	O
go	O
,	O
like	O
this	O
:	O
Stream	B-api_mention
stream	O
=	O
Stream	B-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
But	O
this	O
is	O
ugly	O
,	O
because	O
concat	B-api_mention
is	O
static	O
.	O
If	O
concat	O
were	O
an	O
instance	O
method	O
,	O
the	O
above	O
examples	O
would	O
be	O
much	O
easier	O
to	O
read	O
:	O
Stream	B-api_mention
stream	O
=	O
stream1	O
.	B-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
Stream	B-api_mention
stream	O
=	O
stream1	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
concat	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
My	O
question	O
is	O
:	O
1	O
)	O
Is	O
there	O
any	O
good	O
reason	O
why	O
concat	B-api_mention
is	O
static	O
?	O
Or	O
is	O
there	O
some	O
equivalent	O
instance	O
method	O
I	O
'	O
m	O
missing	O
?	O
2	O
)	O
In	O
any	O
case	O
,	O
is	O
there	O
a	O
better	O
way	O
of	O
doing	O
this	O
?	O
Question	O
-	O
25903137	O
,	O
answer	O
-	O
25903190	O
#	O
pre	O
It	O
'	O
s	O
not	O
quite	O
as	O
nice	O
as	O
the	O
list	O
code	O
.	O
You	O
can	O
'	O
t	O
construct	O
new	O
Map	B-api_mention
.	I-api_mention
Entry	I-api_mention
s	O
in	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
so	O
the	O
work	O
is	O
mixed	O
into	O
the	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
.	O
Question	O
-	O
16159203	O
,	O
answer	O
-	O
16323196	O
#	O
blockquote	O
currentPos	O
=	O
new	O
Point	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
does	O
a	O
few	O
things	O
,	O
including	O
writing	O
default	O
values	O
to	O
x	O
and	O
y	O
(	O
0	O
)	O
and	O
then	O
writing	O
their	O
initial	O
values	O
in	O
the	O
constructor	O
.	O
Since	O
your	O
object	O
is	O
not	O
safely	O
published	O
those	O
4	O
write	O
operations	O
can	O
be	O
freely	O
reordered	O
by	O
the	O
compiler	O
/	O
JVM	O
.	O
So	O
from	O
the	O
perspective	O
of	O
the	O
reading	O
thread	O
,	O
it	O
is	O
a	O
legal	O
execution	O
to	O
read	O
x	O
with	O
its	O
new	O
value	O
but	O
y	O
with	O
its	O
default	O
value	O
of	O
0	O
for	O
example	O
.	O
By	O
the	O
time	O
you	O
reach	O
the	O
println	O
statement	O
(	O
which	O
by	O
the	O
way	O
is	O
synchronized	O
and	O
therefore	O
does	O
influence	O
the	O
read	O
operations	O
)	O
,	O
the	O
variables	O
have	O
their	O
initial	O
values	O
and	O
the	O
program	O
prints	O
the	O
expected	O
values	O
.	O
Marking	O
currentPos	O
as	O
volatile	O
will	O
ensure	O
safe	O
publication	O
since	O
your	O
object	O
is	O
effectively	O
immutable	O
-	O
if	O
in	O
your	O
real	O
use	O
case	O
the	O
object	O
is	O
mutated	O
after	O
construction	O
,	O
volatile	O
guarantees	O
won	O
'	O
t	O
be	O
enough	O
and	O
you	O
could	O
see	O
an	O
inconsistent	O
object	O
again	O
.	O
Alternatively	O
,	O
you	O
can	O
make	O
the	O
Point	B-api_mention
immutable	O
which	O
will	O
also	O
ensure	O
safe	O
publication	O
,	O
even	O
without	O
using	O
volatile	O
.	O
To	O
achieve	O
immutability	O
,	O
you	O
simply	O
need	O
to	O
mark	O
x	O
and	O
y	O
final	O
.	O
As	O
a	O
side	O
note	O
and	O
as	O
already	O
mentioned	O
,	O
synchronized	O
(	O
args	O
)	O
{	O
}	O
can	O
be	O
treated	O
as	O
a	O
no	O
-	O
op	O
by	O
the	O
JVM	O
(	O
I	O
understand	O
you	O
included	O
it	O
to	O
reproduce	O
the	O
behaviour	O
)	O
.	O
Question	O
-	O
5374311	O
,	O
answer	O
-	O
17909839	O
The	O
correct	O
way	O
to	O
do	O
this	O
is	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
I	O
'	O
d	O
like	O
to	O
add	O
to	O
the	O
other	O
great	O
answers	O
here	O
and	O
explain	O
how	O
you	O
could	O
have	O
used	O
the	O
Javadocs	O
to	O
answer	O
your	O
question	O
.	O
The	O
Javadoc	O
for	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
no	O
arguments	O
)	O
is	O
here	O
.	O
As	O
you	O
can	O
see	O
,	O
this	O
method	O
returns	O
an	O
Object	B-api_mention
[	O
]	O
and	O
not	O
String	B-api_mention
[	O
]	O
which	O
is	O
an	O
array	O
of	O
the	O
runtime	O
type	O
of	O
your	O
list	O
:	O
#	O
blockquote	O
Right	O
below	O
that	O
method	O
,	O
though	O
,	O
is	O
the	O
Javadoc	O
for	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
As	O
you	O
can	O
see	O
,	O
this	O
method	O
returns	O
a	O
T	O
[	O
]	O
where	O
T	O
is	O
the	O
type	O
of	O
the	O
array	O
you	O
pass	O
in	O
.	O
At	O
first	O
this	O
seems	O
like	O
what	O
you	O
'	O
re	O
looking	O
for	O
,	O
but	O
it	O
'	O
s	O
unclear	O
exactly	O
why	O
you	O
'	O
re	O
passing	O
in	O
an	O
array	O
(	O
are	O
you	O
adding	O
to	O
it	O
,	O
using	O
it	O
for	O
just	O
the	O
type	O
,	O
etc	O
)	O
.	O
The	O
documentation	O
makes	O
it	O
clear	O
that	O
the	O
purpose	O
of	O
the	O
passed	O
array	O
is	O
essentially	O
to	O
define	O
the	O
type	O
of	O
array	O
to	O
return	O
(	O
which	O
is	O
exactly	O
your	O
use	O
case	O
)	O
:	O
#	O
blockquote	O
Of	O
course	O
,	O
an	O
understanding	O
of	O
generics	O
(	O
as	O
described	O
in	O
the	O
other	O
answers	O
)	O
is	O
required	O
to	O
really	O
understand	O
the	O
difference	O
between	O
these	O
two	O
methods	O
.	O
Nevertheless	O
,	O
if	O
you	O
first	O
go	O
to	O
the	O
Javadocs	O
,	O
you	O
will	O
usually	O
find	O
your	O
answer	O
and	O
then	O
see	O
for	O
yourself	O
what	O
else	O
you	O
need	O
to	O
learn	O
(	O
if	O
you	O
really	O
do	O
)	O
.	O
Also	O
note	O
that	O
reading	O
the	O
Javadocs	O
here	O
helps	O
you	O
to	O
understand	O
what	O
the	O
structure	O
of	O
the	O
array	O
you	O
pass	O
in	O
should	O
be	O
.	O
Though	O
it	O
may	O
not	O
really	O
practically	O
matter	O
,	O
you	O
should	O
not	O
pass	O
in	O
an	O
empty	O
array	O
like	O
this	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Because	O
,	O
from	O
the	O
doc	O
,	O
this	O
implementation	O
checks	O
if	O
the	O
array	O
is	O
large	O
enough	O
to	O
contain	O
the	O
collection	O
;	O
if	O
not	O
,	O
it	O
allocates	O
a	O
new	O
array	O
of	O
the	O
correct	O
size	O
and	O
type	O
(	O
using	O
reflection	O
)	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
the	O
extra	O
overhead	O
in	O
creating	O
a	O
new	O
array	O
when	O
you	O
could	O
easily	O
pass	O
in	O
the	O
size	O
.	O
As	O
is	O
usually	O
the	O
case	O
,	O
the	O
Javadocs	O
provide	O
you	O
with	O
a	O
wealth	O
of	O
information	O
and	O
direction	O
.	O
Hey	O
wait	O
a	O
minute	O
,	O
what	O
'	O
s	O
reflection	O
?	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923105	O
Oh	O
,	O
those	O
coding	O
styles	O
are	O
to	O
be	O
taken	O
with	O
a	O
bit	O
of	O
salt	O
.	O
#	O
li	O
(	O
+	O
)	O
Passing	O
an	O
Option	O
result	O
to	O
another	O
method	O
,	O
without	O
any	O
semantic	O
analysis	O
;	O
leaving	O
that	O
to	O
the	O
method	O
,	O
is	O
quite	O
alright	O
.	O
#	O
li	O
(	O
-	O
)	O
Using	O
Optional	O
parameters	O
causing	O
conditional	O
logic	O
inside	O
the	O
methods	O
is	O
literally	O
contra	O
-	O
productive	O
.	O
#	O
li	O
(	O
-	O
)	O
Needing	O
to	O
pack	O
an	O
argument	O
in	O
an	O
Optional	B-api_mention
,	O
is	O
suboptimal	O
for	O
the	O
compiler	O
,	O
and	O
does	O
an	O
unnecessary	O
wrapping	O
.	O
#	O
li	O
(	O
-	O
)	O
In	O
comparison	O
to	O
nullable	O
parameters	O
Optional	B-api_mention
is	O
more	O
costly	O
.	O
In	O
general	O
:	O
Optional	B-api_mention
unifies	O
two	O
states	O
,	O
which	O
have	O
to	O
be	O
unraveled	O
.	O
Hence	O
better	O
suited	O
for	O
result	O
than	O
input	O
,	O
for	O
the	O
complexity	O
of	O
the	O
data	O
flow	O
.	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877161	O
Integer	B-api_mention
objects	O
caches	O
between	O
-	O
128	O
and	O
127	O
of	O
256	O
Integer	B-api_mention
You	O
should	O
not	O
compare	O
object	O
references	O
with	O
=	O
=	O
or	O
!	O
=	O
.	O
You	O
should	O
use	O
.	O
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
instead	O
,	O
or	O
better	O
-	O
use	O
the	O
primitive	O
int	O
rather	O
than	O
Integer	B-api_mention
.	O
parseInt	B-api_mention
:	O
Parses	O
the	O
string	O
argument	O
as	O
a	O
signed	O
decimal	O
integer	O
.	O
The	O
characters	O
in	O
the	O
string	O
must	O
all	O
be	O
decimal	O
digits	O
,	O
except	O
that	O
the	O
first	O
character	O
may	O
be	O
an	O
ASCII	O
minus	O
sign	O
'	O
-	O
'	O
(	O
'	O
\	O
u002D	O
'	O
)	O
to	O
indicate	O
a	O
negative	O
value	O
.	O
The	O
resulting	O
integer	O
value	O
is	O
returned	O
,	O
exactly	O
as	O
if	O
the	O
argument	O
and	O
the	O
radix	O
10	O
were	O
given	O
as	O
arguments	O
to	O
the	O
parseInt	B-api_mention
(	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
int	O
)	O
method	O
.	O
valueOf	B-api_mention
Returns	O
an	O
Integer	B-api_mention
object	O
holding	O
the	O
value	O
extracted	O
from	O
the	O
specified	O
String	B-api_mention
when	O
parsed	O
with	O
the	O
radix	O
given	O
by	O
the	O
second	O
argument	O
.	O
The	O
first	O
argument	O
is	O
interpreted	O
as	O
representing	O
a	O
signed	O
integer	O
in	O
the	O
radix	O
specified	O
by	O
the	O
second	O
argument	O
,	O
exactly	O
as	O
if	O
the	O
arguments	O
were	O
given	O
to	O
the	O
parseInt	B-api_mention
(	I-api_mention
java	I-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
method	O
.	O
The	O
result	O
is	O
an	O
Integer	B-api_mention
object	O
that	O
represents	O
the	O
integer	O
value	O
specified	O
by	O
the	O
string	O
.	O
equivalent	O
to	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
radix	O
-	O
the	O
radix	O
to	O
be	O
used	O
in	O
interpreting	O
s	O
so	O
if	O
you	O
equal	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
integer	O
inbetween	O
-	O
128	O
to	O
127	O
it	O
returns	O
true	O
in	O
your	O
condition	O
for	O
lesser	O
than	O
-	O
128	O
and	O
greater	O
than	O
127	O
it	O
gives	O
false	O
Question	O
-	O
29140402	O
I	O
have	O
a	O
class	O
defined	O
as	O
follows	O
:	O
#	O
pre	O
I	O
tried	O
to	O
print	O
an	O
instance	O
of	O
my	O
class	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
but	O
I	O
got	O
the	O
following	O
output	O
:	O
com	O
.	O
foo	O
.	O
Person	O
@	O
2f92e0f4	O
.	O
A	O
similar	O
thing	O
happened	O
when	O
I	O
tried	O
to	O
print	O
an	O
array	O
of	O
Person	O
objects	O
:	O
#	O
pre	O
I	O
got	O
the	O
output	O
:	O
[	O
Lcom	O
.	O
foo	O
.	O
Person	O
;	O
@	O
28a418fc	O
What	O
does	O
this	O
output	O
mean	O
?	O
How	O
do	O
I	O
change	O
this	O
output	O
so	O
it	O
contains	O
the	O
name	O
of	O
my	O
person	O
?	O
And	O
how	O
do	O
I	O
print	O
collections	O
of	O
my	O
objects	O
?	O
Note	O
:	O
this	O
is	O
intended	O
as	O
a	O
canonical	O
Q	O
&	O
A	O
about	O
this	O
subject	O
.	O
Question	O
-	O
24547673	O
,	O
answer	O
-	O
24547831	O
It	O
'	O
s	O
a	O
curious	O
omission	O
.	O
You	O
would	O
have	O
to	O
mark	O
the	O
field	O
as	O
transient	O
and	O
provide	O
your	O
own	O
custom	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
wrote	O
the	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
result	O
itself	O
,	O
and	O
a	O
readObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
restored	O
the	O
Optional	B-api_mention
by	O
reading	O
that	O
result	O
from	O
the	O
stream	O
.	O
Not	O
forgetting	O
to	O
call	O
defaultWriteObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
defaultReadObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
respectively	O
.	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
25575077	O
You	O
could	O
override	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
each	O
enum	O
value	O
.	O
Example	O
:	O
#	O
pre	O
Usage	O
:	O
#	O
pre	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26791826	O
Search	O
for	O
the	O
first	O
word	O
to	O
be	O
replaced	O
.	O
If	O
it	O
'	O
s	O
in	O
the	O
string	O
,	O
recurse	O
on	O
the	O
the	O
part	O
of	O
the	O
string	O
before	O
the	O
occurrence	O
,	O
and	O
on	O
the	O
part	O
of	O
the	O
string	O
after	O
the	O
occurrence	O
.	O
Otherwise	O
,	O
continue	O
with	O
the	O
next	O
word	O
to	O
be	O
replaced	O
.	O
A	O
naive	O
implementation	O
might	O
look	O
like	O
this	O
#	O
pre	O
Sample	O
usage	O
:	O
#	O
pre	O
Output	O
:	O
Once	O
upon	O
a	O
foo	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
baz	O
.	O
A	O
less	O
-	O
naive	O
version	O
:	O
#	O
pre	O
Unfortunately	O
,	O
Java	O
'	O
s	O
String	B-api_mention
has	O
no	O
indexOf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
I	O
'	O
ve	O
omitted	O
the	O
implementation	O
of	O
indexOf	B-api_mention
here	O
as	O
I	O
'	O
m	O
not	O
certain	O
it	O
'	O
s	O
correct	O
,	O
but	O
it	O
can	O
be	O
found	O
on	O
ideone	O
,	O
along	O
with	O
some	O
rough	O
timings	O
of	O
various	O
solutions	O
posted	O
here	O
.	O
Question	O
-	O
15336477	O
All	O
I	O
'	O
m	O
trying	O
to	O
do	O
is	O
download	O
some	O
JSON	O
and	O
deserialize	O
it	O
into	O
an	O
object	O
.	O
I	O
haven	O
'	O
t	O
got	O
as	O
far	O
as	O
downloading	O
the	O
JSON	O
yet	O
.	O
Almost	O
every	O
single	O
HttpClient	B-api_mention
example	O
I	O
can	O
find	O
,	O
including	O
those	O
on	O
the	O
apache	O
site	O
looks	O
something	O
like	O
.	O
.	O
.	O
#	O
pre	O
However	O
,	O
Netbeans	O
tells	O
me	O
that	O
DefaultHttpClient	B-api_mention
is	O
deprecated	O
.	O
I	O
'	O
ve	O
tried	O
googling	O
for	O
DefaultHttpClient	B-api_mention
deprecated	O
and	O
as	O
many	O
other	O
variations	O
as	O
I	O
can	O
think	O
of	O
and	O
can	O
'	O
t	O
find	O
any	O
useful	O
results	O
,	O
so	O
I	O
'	O
m	O
obviously	O
missing	O
something	O
.	O
What	O
is	O
the	O
correct	O
Java7	O
way	O
to	O
download	O
the	O
contents	O
of	O
a	O
webpage	O
?	O
Is	O
there	O
really	O
no	O
decent	O
Http	O
Client	O
as	O
part	O
of	O
the	O
language	O
?	O
I	O
find	O
that	O
hard	O
to	O
believe	O
.	O
My	O
Maven	O
dependency	O
for	O
this	O
is	O
.	O
.	O
.	O
#	O
pre	O
Question	O
-	O
5554217	O
,	O
answer	O
-	O
17300003	O
Another	O
way	O
is	O
to	O
use	O
an	O
array	O
as	O
a	O
type	O
,	O
e	O
.	O
g	O
.	O
:	O
MyClass	O
[	O
]	O
mcArray	O
=	O
gson	O
.	B-api_mention
fromJson	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
way	O
you	O
avoid	O
all	O
the	O
hassle	O
with	O
the	O
Type	B-api_mention
object	O
,	O
and	O
if	O
you	O
really	O
need	O
a	O
list	O
you	O
can	O
always	O
convert	O
the	O
array	O
to	O
a	O
list	O
by	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
mcList	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
IMHO	O
this	O
is	O
much	O
more	O
readable	O
.	O
And	O
to	O
make	O
it	O
be	O
an	O
actual	O
list	O
(	O
that	O
can	O
be	O
modified	O
,	O
see	O
limitations	O
of	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
then	O
just	O
do	O
the	O
following	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
mcList	O
=	O
new	O
ArrayList	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
10796174	O
You	O
need	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
split	B-api_mention
uses	O
regular	O
expression	O
and	O
in	O
regex	O
|	O
is	O
metacharacter	O
representing	O
OR	O
operator	O
.	O
You	O
need	O
to	O
escape	O
that	O
character	O
using	O
\	O
(	O
written	O
in	O
String	B-api_mention
as	O
StringLiteral	O
since	O
\	O
is	O
also	O
metacharacter	O
in	O
String	O
literals	O
and	O
require	O
another	O
\	O
to	O
escape	O
it	O
)	O
.	O
You	O
can	O
also	O
use	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
let	O
Pattern	B-api_mention
.	I-api_mention
quote	I-api_mention
create	O
escaped	O
version	O
of	O
regex	O
representing	O
|	O
.	O
Question	O
-	O
11821801	O
,	O
answer	O
-	O
36827191	O
From	O
oracle	O
documentation	O
page	O
about	O
ReentrantLock	B-api_mention
:	O
#	O
blockquote	O
#	O
li	O
A	O
ReentrantLock	B-api_mention
is	O
owned	O
by	O
the	O
thread	O
last	O
successfully	O
locking	O
,	O
but	O
not	O
yet	O
unlocking	O
it	O
.	O
A	O
thread	O
invoking	O
lock	O
will	O
return	O
,	O
successfully	O
acquiring	O
the	O
lock	O
,	O
when	O
the	O
lock	O
is	O
not	O
owned	O
by	O
another	O
thread	O
.	O
The	O
method	O
will	O
return	O
immediately	O
if	O
the	O
current	O
thread	O
already	O
owns	O
the	O
lock	O
.	O
#	O
li	O
The	O
constructor	O
for	O
this	O
class	O
accepts	O
an	O
optional	O
fairness	O
parameter	O
.	O
When	O
set	O
true	O
,	O
under	O
contention	O
,	O
locks	O
favor	O
granting	O
access	O
to	O
the	O
longest	O
-	O
waiting	O
thread	O
.	O
Otherwise	O
this	O
lock	O
does	O
not	O
guarantee	O
any	O
particular	O
access	O
order	O
.	O
ReentrantLock	B-api_mention
key	O
features	O
as	O
per	O
this	O
article	O
#	O
li	O
Ability	O
to	O
lock	O
interruptibly	O
.	O
#	O
li	O
Ability	O
to	O
timeout	O
while	O
waiting	O
for	O
lock	O
.	O
#	O
li	O
Power	O
to	O
create	O
fair	O
lock	O
.	O
#	O
li	O
API	O
to	O
get	O
list	O
of	O
waiting	O
thread	O
for	O
lock	O
.	O
#	O
li	O
Flexibility	O
to	O
try	O
for	O
lock	O
without	O
blocking	O
.	O
You	O
can	O
use	O
ReentrantReadWriteLock	B-api_mention
.	I-api_mention
ReadLock	I-api_mention
,	O
ReentrantReadWriteLock	B-api_mention
.	I-api_mention
WriteLock	I-api_mention
to	O
further	O
acquire	O
control	O
on	O
granular	O
locking	O
on	O
read	O
and	O
write	O
operations	O
.	O
Have	O
a	O
look	O
at	O
this	O
article	O
by	O
Benjamen	O
on	O
usage	O
of	O
different	O
type	O
of	O
ReentrantLocks	B-api_mention
Question	O
-	O
16148575	O
,	O
answer	O
-	O
32866218	O
The	O
main	O
reason	O
with	O
HashMap	B-api_mention
not	O
allowing	O
primitive	O
as	O
keys	O
is	O
that	O
HashMap	B-api_mention
is	O
designed	O
in	O
such	O
a	O
way	O
that	O
for	O
comparing	O
the	O
keys	O
,	O
it	O
makes	O
use	O
of	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
,	O
and	O
a	O
method	O
can	O
be	O
called	O
only	O
on	O
an	O
object	O
not	O
on	O
a	O
primitive	O
.	O
Thus	O
when	O
int	O
is	O
autoboxed	O
to	O
Integer	B-api_mention
,	O
Hashmap	O
can	O
call	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
on	O
Integer	B-api_mention
object	O
.	O
That	O
is	O
why	O
,	O
you	O
should	O
use	O
Integer	B-api_mention
instead	O
of	O
int	O
.	O
I	O
mean	O
hashmap	O
throws	O
an	O
error	O
while	O
putting	O
int	O
as	O
a	O
key	O
(	O
Don	O
'	O
t	O
know	O
the	O
meaning	O
of	O
the	O
error	O
that	O
is	O
thrown	O
)	O
And	O
if	O
you	O
think	O
that	O
,	O
you	O
can	O
make	O
Map	B-api_mention
performance	O
faster	O
by	O
making	O
a	O
primitive	O
as	O
a	O
key	O
,	O
there	O
is	O
a	O
library	O
called	O
FastUtil	B-api_mention
which	O
contains	O
a	O
Map	B-api_mention
implementation	O
with	O
int	O
type	O
as	O
a	O
key	O
.	O
Because	O
of	O
this	O
,	O
it	O
is	O
much	O
faster	O
than	O
Hashmap	O
Question	O
-	O
24676877	O
,	O
answer	O
-	O
24679745	O
The	O
answer	O
is	O
,	O
as	O
always	O
,	O
"	O
it	O
depends	O
"	O
.	O
It	O
depends	O
on	O
how	O
big	O
the	O
returned	O
collection	O
will	O
be	O
.	O
It	O
depends	O
on	O
whether	O
the	O
result	O
changes	O
over	O
time	O
,	O
and	O
how	O
important	O
consistency	O
of	O
the	O
returned	O
result	O
is	O
.	O
And	O
it	O
depends	O
very	O
much	O
on	O
how	O
the	O
user	O
is	O
likely	O
to	O
use	O
the	O
answer	O
.	O
First	O
,	O
note	O
that	O
you	O
can	O
always	O
get	O
a	O
Collection	B-api_mention
from	O
a	O
Stream	B-api_mention
,	O
and	O
vice	O
versa	O
:	O
/	O
/	O
If	O
API	O
returns	O
Collection	B-api_mention
,	O
convert	O
with	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
getFoo	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
.	O
.	O
/	O
/	O
If	O
API	O
returns	O
Stream	B-api_mention
,	O
use	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Collection	I-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
c	O
=	O
getFooStream	O
(	O
args	O
)	O
.	B-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
So	O
the	O
question	O
is	O
,	O
which	O
is	O
more	O
useful	O
to	O
your	O
callers	O
.	O
If	O
your	O
result	O
might	O
be	O
infinite	O
,	O
there	O
'	O
s	O
only	O
one	O
choice	O
:	O
Stream	B-api_mention
.	O
If	O
your	O
result	O
might	O
be	O
very	O
large	O
,	O
you	O
probably	O
prefer	O
Stream	B-api_mention
,	O
since	O
there	O
may	O
not	O
be	O
any	O
value	O
in	O
materializing	O
it	O
all	O
at	O
once	O
,	O
and	O
doing	O
so	O
could	O
create	O
significant	O
heap	O
pressure	O
.	O
If	O
all	O
the	O
caller	O
is	O
going	O
to	O
do	O
is	O
iterate	O
through	O
it	O
(	O
search	O
,	O
filter	O
,	O
aggregate	O
)	O
,	O
you	O
should	O
prefer	O
Stream	B-api_mention
,	O
since	O
Stream	B-api_mention
has	O
these	O
built	O
-	O
in	O
already	O
and	O
there	O
'	O
s	O
no	O
need	O
to	O
materialize	O
a	O
collection	O
(	O
especially	O
if	O
the	O
user	O
might	O
not	O
process	O
the	O
whole	O
result	O
.	O
)	O
This	O
is	O
a	O
very	O
common	O
case	O
.	O
Even	O
if	O
you	O
know	O
that	O
the	O
user	O
will	O
iterate	O
it	O
multiple	O
times	O
or	O
otherwise	O
keep	O
it	O
around	O
,	O
you	O
still	O
may	O
want	O
to	O
return	O
a	O
Stream	B-api_mention
instead	O
,	O
for	O
the	O
simple	O
fact	O
that	O
whatever	O
Collection	B-api_mention
you	O
choose	O
to	O
put	O
it	O
in	O
(	O
e	O
.	O
g	O
.	O
,	O
ArrayList	B-api_mention
)	O
may	O
not	O
be	O
the	O
form	O
they	O
want	O
,	O
and	O
then	O
the	O
caller	O
has	O
to	O
copy	O
it	O
anyway	O
.	O
if	O
you	O
return	O
a	O
stream	O
,	O
they	O
can	O
do	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
get	O
it	O
in	O
exactly	O
the	O
form	O
they	O
want	O
.	O
The	O
above	O
"	O
prefer	O
Stream	O
"	O
cases	O
mostly	O
derive	O
from	O
the	O
fact	O
that	O
Stream	B-api_mention
is	O
more	O
flexible	O
;	O
you	O
can	O
late	O
-	O
bind	O
to	O
how	O
you	O
use	O
it	O
without	O
incurring	O
the	O
costs	O
and	O
constraints	O
of	O
materializing	O
it	O
to	O
a	O
Collection	B-api_mention
.	O
The	O
one	O
case	O
where	O
you	O
must	O
return	O
a	O
Collection	B-api_mention
is	O
when	O
there	O
are	O
strong	O
consistency	O
requirements	O
,	O
and	O
you	O
have	O
to	O
produce	O
a	O
consistent	O
snapshot	O
of	O
a	O
moving	O
target	O
.	O
Then	O
,	O
you	O
will	O
want	O
put	O
the	O
elements	O
into	O
a	O
collection	O
that	O
will	O
not	O
change	O
.	O
So	O
I	O
would	O
say	O
that	O
most	O
of	O
the	O
time	O
,	O
Stream	B-api_mention
is	O
the	O
right	O
answer	O
-	O
-	O
it	O
is	O
more	O
flexible	O
,	O
it	O
doesn	O
'	O
t	O
impose	O
usually	O
-	O
unnecessary	O
materialization	O
costs	O
,	O
and	O
can	O
be	O
easily	O
turned	O
into	O
the	O
Collection	B-api_mention
of	O
your	O
choice	O
if	O
needed	O
.	O
But	O
sometimes	O
,	O
you	O
may	O
have	O
to	O
return	O
a	O
Collection	B-api_mention
(	O
say	O
,	O
due	O
to	O
strong	O
consistency	O
requirements	O
)	O
,	O
or	O
you	O
may	O
want	O
to	O
return	O
Collection	B-api_mention
because	O
you	O
know	O
how	O
the	O
user	O
will	O
be	O
using	O
it	O
and	O
know	O
this	O
is	O
the	O
most	O
convenient	O
thing	O
for	O
them	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26826286	O
It	O
'	O
s	O
easy	O
to	O
write	O
a	O
method	O
to	O
do	O
this	O
using	O
String	B-api_mention
.	I-api_mention
regionMatches	I-api_mention
:	O
#	O
pre	O
Testing	O
:	O
#	O
pre	O
Output	O
:	O
#	O
blockquote	O
It	O
is	O
not	O
immediately	O
obvious	O
,	O
but	O
a	O
function	O
like	O
this	O
can	O
still	O
be	O
dependent	O
on	O
the	O
order	O
in	O
which	O
the	O
replacements	O
are	O
specified	O
.	O
Consider	O
:	O
#	O
pre	O
Output	O
:	O
#	O
blockquote	O
But	O
reverse	O
the	O
replacements	O
:	O
truth	O
+	O
=	O
StringLiteral	O
+	O
simultaneousReplace	O
(	O
args	O
)	O
;	O
Output	O
:	O
#	O
blockquote	O
Oops	O
!	O
:	O
)	O
Therefore	O
it	O
is	O
sometimes	O
useful	O
to	O
make	O
sure	O
to	O
look	O
for	O
the	O
longest	O
match	O
(	O
as	O
PHP	O
'	O
s	O
strtr	O
function	O
does	O
,	O
for	O
example	O
)	O
.	O
This	O
version	O
of	O
the	O
method	O
will	O
do	O
that	O
:	O
#	O
pre	O
Note	O
that	O
the	O
above	O
methods	O
are	O
case	O
-	O
sensitive	O
.	O
If	O
you	O
need	O
a	O
case	O
-	O
insensitive	O
version	O
it	O
is	O
easy	O
to	O
modify	O
the	O
above	O
because	O
String	B-api_mention
.	I-api_mention
regionMatches	I-api_mention
can	O
take	O
an	O
ignoreCase	B-api_mention
parameter	O
.	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
30210459	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
allows	O
you	O
to	O
pass	O
an	O
instance	O
of	O
a	O
Comparator	B-api_mention
which	O
defines	O
the	O
sorting	O
logic	O
.	O
So	O
instead	O
of	O
sorting	O
the	O
list	O
in	O
natural	O
order	O
and	O
then	O
reversing	O
it	O
,	O
one	O
can	O
simply	O
pass	O
Collections	B-api_mention
.	I-api_mention
reverseOrder	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
in	O
order	O
to	O
sort	O
the	O
list	O
in	O
reverse	O
order	O
:	O
#	O
pre	O
As	O
mentioned	O
by	O
@	O
Marco13	O
,	O
apart	O
from	O
being	O
more	O
idiomatic	O
(	O
and	O
possibly	O
more	O
efficient	O
)	O
,	O
using	O
the	O
reverse	O
order	O
comparator	O
makes	O
sure	O
that	O
the	O
sort	O
is	O
stable	O
(	O
meaning	O
that	O
the	O
order	O
of	O
elements	O
will	O
not	O
be	O
changed	O
when	O
they	O
are	O
equal	O
according	O
to	O
the	O
comparator	O
,	O
whereas	O
reversing	O
will	O
change	O
the	O
order	O
)	O
Question	O
-	O
27482579	O
,	O
answer	O
-	O
27483288	O
#	O
blockquote	O
No	O
.	O
It	O
will	O
never	O
throw	O
a	O
compilation	O
error	O
.	O
This	O
is	O
much	O
similar	O
to	O
what	O
a	O
simple	O
getter	B-api_mention
and	O
setter	B-api_mention
does	O
or	O
a	O
copy	B-api_mention
constructor	O
does	O
.	O
Remember	O
we	O
can	O
access	O
private	O
members	O
using	O
this	O
.	O
#	O
pre	O
Your	O
testPrivate	B-api_mention
method	O
accepts	O
an	O
instance	O
of	O
MyClass	B-api_mention
.	O
Since	O
testPrivate	B-api_mention
is	O
a	O
method	O
inside	O
MyClass	B-api_mention
,	O
it	O
will	O
have	O
access	O
to	O
private	O
properties	O
.	O
#	O
pre	O
Methods	O
defined	O
inside	O
the	O
class	O
will	O
always	O
have	O
access	O
to	O
it	O
'	O
s	O
private	O
members	O
,	O
through	O
this	O
.	O
and	O
instance	O
variable	O
.	O
But	O
if	O
you	O
define	O
testPrivate	B-api_mention
outside	O
of	O
MyClass	B-api_mention
then	O
,	O
you	O
won	O
'	O
t	O
have	O
access	O
to	O
private	O
members	O
.	O
There	O
you	O
will	O
have	O
to	O
use	O
a	O
method	O
or	O
a	O
setter	O
or	O
a	O
getter	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148593	O
Use	O
Integer	B-api_mention
instead	O
.	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Java	O
will	O
automatically	O
autobox	O
your	O
int	O
primitive	O
values	O
to	O
Integer	B-api_mention
objects	O
.	O
Read	O
more	O
about	O
autoboxing	O
from	O
Oracle	O
Java	O
documentations	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777292	O
The	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
arrays	O
is	O
inherited	O
from	O
Object	O
,	O
so	O
it	O
does	O
not	O
look	O
at	O
the	O
contents	O
of	O
the	O
arrrays	O
,	O
it	O
only	O
considers	O
each	O
array	O
equal	O
to	O
itself	O
.	O
The	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
do	O
compare	O
the	O
arrays	O
'	O
contents	O
.	O
There	O
'	O
s	O
overloads	O
for	O
all	O
primitive	O
types	O
,	O
and	O
the	O
one	O
for	O
objects	O
uses	O
the	O
objects	O
'	O
own	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
.	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
38560612	O
This	O
is	O
part	O
of	O
JDK	O
9	O
in	O
the	O
form	O
of	O
or	O
,	O
which	O
takes	O
a	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
Your	O
example	O
would	O
then	O
be	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
.	O
or	O
(	O
args	O
)	O
;	O
For	O
details	O
see	O
the	O
(	O
preliminary	O
)	O
Javadoc	O
or	O
this	O
post	O
I	O
wrote	O
.	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
21172732	O
The	O
parallel	O
streams	O
use	O
the	O
default	O
ForkJoinPool	B-api_mention
which	O
by	O
default	O
has	O
one	O
less	O
threads	O
as	O
you	O
have	O
processors	O
,	O
as	O
returned	O
by	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
availableProcessors	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
so	O
parallel	O
streams	O
use	O
all	O
your	O
processors	O
because	O
they	O
also	O
use	O
the	O
main	O
thread	O
)	O
:	O
#	O
blockquote	O
To	O
change	O
the	O
way	O
parallel	O
streams	O
are	O
executed	O
,	O
you	O
can	O
either	O
#	O
li	O
submit	O
the	O
parallel	O
stream	O
execution	O
to	O
your	O
own	O
ForkJoinPool	B-api_mention
:	O
yourFJP	O
.	B-api_mention
submit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
#	O
li	O
you	O
can	O
change	O
the	O
size	O
of	O
the	O
common	O
pool	O
using	O
system	O
properties	O
:	O
System	B-api_mention
.	I-api_mention
setProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
a	O
target	O
parallelism	O
of	O
20	O
threads	O
.	O
Example	O
of	O
the	O
latter	O
on	O
my	O
machine	O
which	O
has	O
8	O
processors	O
.	O
If	O
I	O
run	O
the	O
following	O
program	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
#	O
blockquote	O
So	O
you	O
can	O
see	O
that	O
the	O
parallel	O
stream	O
processes	O
8	O
items	O
at	O
a	O
time	O
,	O
i	O
.	O
e	O
.	O
it	O
uses	O
8	O
threads	O
.	O
However	O
if	O
I	O
uncomment	O
the	O
commented	O
line	O
,	O
the	O
output	O
is	O
:	O
#	O
blockquote	O
This	O
time	O
the	O
parallel	O
stream	O
has	O
used	O
20	O
threads	O
and	O
all	O
20	O
elements	O
in	O
the	O
stream	O
have	O
been	O
processed	O
comcurrently	O
.	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
31886637	O
name	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
literally	O
the	O
textual	O
name	O
in	O
the	O
java	O
code	O
of	O
the	O
enum	O
.	O
That	O
means	O
it	O
is	O
limited	O
to	O
strings	O
that	O
can	O
actually	O
appear	O
in	O
your	O
java	O
code	O
,	O
but	O
not	O
all	O
desirable	O
strings	O
are	O
expressible	O
in	O
code	O
.	O
For	O
example	O
,	O
you	O
may	O
need	O
a	O
string	O
that	O
begins	O
with	O
a	O
number	O
.	O
name	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
never	O
be	O
able	O
to	O
obtain	O
that	O
string	O
for	O
you	O
.	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17842210	O
After	O
digging	O
around	O
for	O
a	O
while	O
,	O
I	O
can	O
'	O
t	O
say	O
that	O
I	O
find	O
the	O
answer	O
,	O
but	O
I	O
think	O
it	O
'	O
s	O
quite	O
close	O
now	O
.	O
First	O
,	O
we	O
need	O
to	O
know	O
when	O
a	O
StackOverflowError	B-api_mention
will	O
be	O
thrown	O
.	O
In	O
fact	O
,	O
the	O
stack	O
for	O
a	O
java	O
thread	O
stores	O
frames	O
,	O
which	O
containing	O
all	O
the	O
data	O
needed	O
for	O
invoking	O
a	O
method	O
and	O
resume	O
.	O
According	O
to	O
Java	O
Language	O
Specifications	O
for	O
JAVA	O
6	O
,	O
when	O
invoking	O
a	O
method	O
,	O
#	O
blockquote	O
Second	O
,	O
we	O
should	O
make	O
it	O
clear	O
what	O
is	O
"	O
there	O
is	O
not	O
sufficient	O
memory	O
available	O
to	O
create	O
such	O
an	O
activation	O
frame	O
"	O
.	O
According	O
to	O
Java	O
Virtual	O
Machine	O
Specifications	O
for	O
JAVA	O
6	O
,	O
#	O
blockquote	O
So	O
,	O
when	O
a	O
frame	O
is	O
created	O
,	O
there	O
should	O
be	O
enough	O
heap	O
space	O
to	O
create	O
a	O
stack	O
frame	O
and	O
enough	O
stack	O
space	O
to	O
store	O
the	O
new	O
reference	O
which	O
point	O
to	O
the	O
new	O
stack	O
frame	O
if	O
the	O
frame	O
is	O
heap	O
allocated	O
.	O
Now	O
let	O
'	O
s	O
go	O
back	O
to	O
the	O
question	O
.	O
From	O
the	O
above	O
,	O
we	O
can	O
know	O
that	O
when	O
a	O
method	O
is	O
execute	O
,	O
it	O
may	O
just	O
costs	O
the	O
same	O
amount	O
of	O
stack	O
space	O
.	O
And	O
invoking	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	O
may	O
)	O
needs	O
5	O
level	O
of	O
method	O
invocation	O
,	O
so	O
5	O
frames	O
need	O
to	O
be	O
created	O
.	O
Then	O
when	O
StackOverflowError	B-api_mention
is	O
thrown	O
out	O
,	O
it	O
has	O
to	O
go	O
back	O
5	O
times	O
to	O
get	O
enough	O
stack	O
space	O
to	O
store	O
5	O
frames	O
'	O
references	O
.	O
Hence	O
4	O
is	O
print	O
out	O
.	O
Why	O
not	O
5	O
?	O
Because	O
you	O
use	O
cnt	O
+	O
+	O
.	O
Change	O
it	O
to	O
+	O
+	O
cnt	O
,	O
and	O
then	O
you	O
will	O
get	O
5	O
.	O
And	O
you	O
will	O
notice	O
that	O
when	O
the	O
size	O
of	O
stack	O
go	O
to	O
a	O
high	O
level	O
,	O
you	O
will	O
get	O
50	O
sometimes	O
.	O
That	O
is	O
because	O
the	O
amount	O
of	O
available	O
heap	O
space	O
need	O
to	O
be	O
taken	O
into	O
consideration	O
then	O
.	O
When	O
the	O
stack	O
'	O
s	O
size	O
is	O
too	O
large	O
,	O
maybe	O
heap	O
space	O
will	O
run	O
out	O
before	O
stack	O
.	O
And	O
(	O
maybe	O
)	O
the	O
actual	O
size	O
of	O
stack	O
frames	O
of	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
is	O
about	O
51	O
times	O
of	O
main	O
,	O
therefore	O
it	O
goes	O
back	O
51	O
times	O
and	O
print	O
50	O
.	O
Question	O
-	O
31316581	O
,	O
answer	O
-	O
31327420	O
If	O
type	O
inference	O
produces	O
a	O
single	O
upper	O
bound	O
for	O
a	O
type	O
variable	O
,	O
typically	O
the	O
upper	O
bound	O
is	O
chosen	O
as	O
the	O
solution	O
.	O
For	O
example	O
,	O
if	O
T	O
<	O
<	O
Number	O
,	O
the	O
solution	O
is	O
T	O
=	O
Number	O
.	O
Although	O
Integer	B-api_mention
,	O
Float	B-api_mention
etc	O
.	O
could	O
also	O
satisfy	O
the	O
constraint	O
,	O
there	O
'	O
s	O
no	O
good	O
reason	O
to	O
choose	O
them	O
over	O
Number	B-api_mention
.	O
That	O
was	O
also	O
the	O
case	O
for	O
throws	O
T	O
in	O
java	O
5	O
-	O
7	O
:	O
T	O
<	O
<	O
Throwable	O
=	O
>	O
T	O
=	O
Throwable	O
.	O
(	O
Sneaky	O
throw	O
solutions	O
all	O
had	O
explicit	O
<	O
RuntimeException	O
>	O
type	O
arguments	O
,	O
otherwise	O
<	O
Throwable	O
>	O
is	O
inferred	O
.	O
)	O
In	O
java8	O
,	O
with	O
the	O
introduction	O
of	O
lambda	O
,	O
this	O
becomes	O
problematic	O
.	O
Consider	O
this	O
case	O
#	O
pre	O
If	O
we	O
invoke	O
with	O
an	O
empty	O
lambda	O
,	O
what	O
would	O
T	O
be	O
inferred	O
as	O
?	O
invoke	O
(	O
args	O
)	O
;	O
The	O
only	O
constraint	O
on	O
T	O
is	O
an	O
upper	O
bound	O
Throwable	B-api_mention
.	O
In	O
earlier	O
stage	O
of	O
java8	O
,	O
T	O
=	O
Throwable	B-api_mention
would	O
be	O
inferred	O
.	O
See	O
this	O
report	O
I	O
filed	O
.	O
But	O
that	O
is	O
pretty	O
silly	O
,	O
to	O
infer	O
Throwable	B-api_mention
,	O
a	O
checked	O
exception	O
,	O
out	O
of	O
an	O
empty	O
block	O
.	O
A	O
solution	O
was	O
proposed	O
in	O
the	O
report	O
(	O
which	O
is	O
apparently	O
adopted	O
by	O
JLS	O
)	O
-	O
#	O
pre	O
i	O
.	O
e	O
.	O
if	O
the	O
upper	O
bound	O
is	O
Exception	B-api_mention
or	O
Throwable	B-api_mention
,	O
choose	O
RuntimeException	B-api_mention
as	O
the	O
solution	O
.	O
In	O
this	O
case	O
,	O
there	O
is	O
a	O
good	O
reason	O
to	O
choose	O
a	O
particular	O
subtype	O
of	O
the	O
upper	O
bound	O
.	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
5439543	O
You	O
can	O
use	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
the	O
integer	O
from	O
the	O
string	O
,	O
and	O
catch	O
the	O
exception	O
if	O
it	O
is	O
not	O
a	O
parsable	O
int	O
.	O
You	O
want	O
to	O
be	O
sure	O
to	O
catch	O
the	O
NumberFormatException	B-api_mention
it	O
can	O
throw	O
.	O
It	O
may	O
be	O
helpful	O
to	O
note	O
that	O
valueOf	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
return	O
an	O
Integer	B-api_mention
object	O
,	O
not	O
the	O
primitive	O
int	O
.	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32370677	O
There	O
is	O
a	O
small	O
overhead	O
in	O
calling	O
methods	O
var	O
an	O
interface	O
rather	O
than	O
directly	O
on	O
an	O
object	O
.	O
This	O
overhead	O
is	O
often	O
no	O
more	O
than	O
1	O
or	O
2	O
processor	O
instructions	O
.	O
The	O
overhead	O
of	O
calling	O
a	O
method	O
is	O
even	O
lower	O
if	O
the	O
JIT	O
knows	O
that	O
the	O
method	O
is	O
final	O
.	O
This	O
is	O
not	O
measurable	O
for	O
most	O
code	O
you	O
and	O
me	O
right	O
,	O
but	O
for	O
the	O
low	O
level	O
methods	O
in	O
java	O
.	O
utils	O
may	O
be	O
used	O
in	O
some	O
code	O
where	O
it	O
is	O
an	O
issue	O
.	O
Also	O
as	O
has	O
been	O
pointed	O
out	O
in	O
other	O
answers	O
,	O
the	O
concrete	O
type	O
of	O
the	O
object	O
that	O
is	O
return	O
(	O
even	O
when	O
hidden	O
behind	O
an	O
interface	O
)	O
effects	O
the	O
performance	O
of	O
code	O
that	O
uses	O
it	O
.	O
This	O
change	O
in	O
performance	O
can	O
be	O
very	O
great	O
,	O
so	O
such	O
an	O
extent	O
that	O
the	O
calling	O
software	O
fails	O
to	O
work	O
.	O
Clearly	O
the	O
authors	O
of	O
java	O
.	O
utils	O
have	O
no	O
way	O
to	O
know	O
what	O
all	O
the	O
software	O
that	O
calls	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
does	O
with	O
the	O
result	O
and	O
no	O
way	O
to	O
re	O
-	O
test	O
this	O
software	O
if	O
they	O
change	O
the	O
implantation	O
of	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Therefore	O
they	O
are	O
not	O
going	O
to	O
change	O
the	O
implantation	O
of	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
return	O
a	O
different	O
type	O
of	O
List	B-api_mention
,	O
even	O
if	O
the	O
type	O
system	O
allowed	O
it	O
!	O
When	O
writing	O
your	O
own	O
software	O
,	O
you	O
(	O
hopefully	O
)	O
have	O
automated	O
test	O
that	O
cover	O
all	O
your	O
code	O
and	O
a	O
good	O
understand	O
of	O
how	O
your	O
code	O
interrelates	O
include	O
know	O
where	O
performance	O
is	O
an	O
issue	O
.	O
Being	O
able	O
to	O
make	O
a	O
change	O
to	O
a	O
method	O
,	O
without	O
having	O
to	O
change	O
the	O
callers	O
is	O
of	O
great	O
value	O
while	O
the	O
design	O
of	O
the	O
software	O
is	O
changing	O
.	O
Therefore	O
the	O
two	O
set	O
of	O
trade	O
offs	O
are	O
very	O
different	O
.	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
25855691	O
TL	O
;	O
DR	O
:	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
the	O
fastest	O
.	O
I	O
felt	O
I	O
should	O
add	O
my	O
results	O
from	O
benchmarking	O
iteration	O
.	O
I	O
took	O
a	O
very	O
simple	O
approach	O
(	O
no	O
benchmarking	O
frameworks	O
)	O
and	O
benchmarked	O
5	O
different	O
methods	O
:	O
#	O
li	O
classic	O
for	O
#	O
li	O
classic	O
foreach	O
#	O
li	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
the	O
testing	O
procedure	O
and	O
parameters	O
#	O
pre	O
The	O
list	O
in	O
this	O
class	O
shall	O
be	O
iterated	O
over	O
and	O
have	O
some	O
doIt	O
(	O
args	O
)	O
applied	O
to	O
all	O
it	O
'	O
s	O
members	O
,	O
each	O
time	O
via	O
a	O
different	O
method	O
.	O
in	O
the	O
Main	O
class	O
I	O
run	O
the	O
tested	O
method	O
three	O
times	O
to	O
warm	O
up	O
the	O
JVM	O
.	O
I	O
then	O
run	O
the	O
test	O
method	O
1000	O
times	O
summing	O
the	O
time	O
it	O
takes	O
for	O
each	O
iteration	O
method	O
(	O
using	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
After	O
that	O
'	O
s	O
done	O
i	O
divide	O
that	O
sum	O
by	O
1000	O
and	O
that	O
'	O
s	O
the	O
result	O
,	O
average	O
time	O
.	O
example	O
:	O
#	O
pre	O
I	O
ran	O
this	O
on	O
a	O
i5	O
4	O
core	O
CPU	O
,	O
with	O
java	O
version	O
1	O
.	O
8	O
.	O
0	O
_	O
05	O
classic	O
for	O
#	O
pre	O
execution	O
time	O
:	O
4	O
.	O
21	O
ms	O
classic	O
foreach	O
#	O
pre	O
execution	O
time	O
:	O
5	O
.	O
95	O
ms	O
List	B-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
11	O
ms	O
List	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
2	O
.	O
79	O
ms	O
List	B-api_mention
.	I-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
list	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
execution	O
time	O
:	O
3	O
.	O
6	O
ms	O
Question	O
-	O
14846920	O
What	O
are	O
some	O
of	O
the	O
situations	O
where	O
I	O
can	O
use	O
Collections	B-api_mention
.	I-api_mention
emptyMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
The	O
Documentation	O
says	O
I	O
can	O
use	O
this	O
method	O
if	O
I	O
want	O
my	O
collection	O
to	O
be	O
immutable	O
.	O
Why	O
would	O
I	O
want	O
an	O
immutable	O
empty	O
collection	O
?	O
What	O
is	O
the	O
point	O
?	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32177563	O
The	O
other	O
answers	O
have	O
already	O
answered	O
your	O
question	O
-	O
no	O
,	O
this	O
is	O
not	O
possible	O
with	O
the	O
Java	O
'	O
s	O
primitive	O
wrapper	O
classes	O
.	O
I	O
'	O
ll	O
try	O
to	O
address	O
the	O
"	O
question	O
behind	O
the	O
question	O
"	O
:	O
Is	O
this	O
possible	O
with	O
other	O
classes	O
?	O
#	O
blockquote	O
This	O
is	O
actually	O
a	O
good	O
question	O
,	O
and	O
the	O
answer	O
is	O
:	O
Yes	O
,	O
it	O
is	O
possible	O
to	O
create	O
such	O
a	O
situation	O
,	O
and	O
yes	O
,	O
it	O
would	O
make	O
Aristotle	O
angry	O
.	O
Actually	O
,	O
I	O
don	O
'	O
t	O
know	O
if	O
it	O
would	O
make	O
Aristotle	O
angry	O
,	O
not	O
having	O
known	O
him	O
,	O
but	O
it	O
will	O
certainly	O
cause	O
a	O
lot	O
of	O
grief	O
for	O
whoever	O
has	O
to	O
work	O
with	O
the	O
code	O
.	O
The	O
thing	O
is	O
:	O
There	O
is	O
a	O
contract	O
associated	O
with	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
Javadocs	O
for	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
Yes	O
,	O
when	O
creating	O
your	O
own	O
class	O
,	O
you	O
can	O
violate	O
this	O
contract	O
.	O
There	O
is	O
(	O
unfortunately	O
)	O
nothing	O
in	O
the	O
compiler	O
or	O
runtime	O
stopping	O
you	O
.	O
However	O
,	O
a	O
lot	O
of	O
code	O
relies	O
on	O
this	O
contract	O
,	O
so	O
if	O
you	O
violate	O
it	O
,	O
any	O
code	O
that	O
uses	O
equals	O
will	O
probably	O
fail	O
in	O
mysterious	O
ways	O
.	O
One	O
example	O
:	O
Java	O
'	O
s	O
own	O
Collection	O
classes	O
(	O
java	O
.	O
util	O
.	O
Collection	O
and	O
friends	O
)	O
rely	O
on	O
equals	O
.	O
If	O
an	O
instance	O
of	O
a	O
class	O
that	O
does	O
not	O
correctly	O
implement	O
equals	O
is	O
put	O
into	O
a	O
collection	O
,	O
weird	O
things	O
happen	O
,	O
such	O
as	O
the	O
collection	O
sometimes	O
containing	O
the	O
instance	O
and	O
sometimes	O
not	O
.	O
Question	O
-	O
28681737	O
,	O
answer	O
-	O
28684917	O
The	O
short	O
answer	O
is	O
:	O
it	O
'	O
s	O
safe	O
if	O
you	O
use	O
them	O
safely	O
:	O
)	O
The	O
snarky	O
answer	O
:	O
tell	O
me	O
what	O
you	O
mean	O
by	O
traits	O
,	O
and	O
maybe	O
I	O
'	O
ll	O
give	O
you	O
a	O
better	O
answer	O
:	O
)	O
In	O
all	O
seriousness	O
,	O
the	O
term	O
"	O
trait	O
"	O
is	O
not	O
well	O
-	O
defined	O
.	O
Many	O
Java	O
developers	O
are	O
most	O
familiar	O
with	O
traits	O
as	O
they	O
are	O
expressed	O
in	O
Scala	O
,	O
but	O
Scala	O
is	O
far	O
from	O
the	O
first	O
language	O
to	O
have	O
traits	O
,	O
either	O
in	O
name	O
or	O
in	O
effect	O
.	O
For	O
example	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
stateful	O
(	O
can	O
have	O
var	O
variables	O
)	O
;	O
in	O
Fortress	O
they	O
are	O
pure	O
behavior	O
.	O
Java	O
'	O
s	O
interfaces	O
with	O
default	O
methods	O
are	O
stateless	O
;	O
does	O
this	O
mean	O
they	O
are	O
not	O
traits	O
?	O
(	O
Hint	O
:	O
that	O
was	O
a	O
trick	O
question	O
.	O
)	O
Again	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
composed	O
through	O
linearization	O
;	O
if	O
class	O
A	O
extends	O
traits	O
X	O
and	O
Y	O
,	O
then	O
the	O
order	O
in	O
which	O
X	O
and	O
Y	O
are	O
mixed	O
in	O
determines	O
how	O
conflicts	O
between	O
X	O
and	O
Y	O
are	O
resolved	O
.	O
In	O
Java	O
,	O
this	O
linearization	O
mechanism	O
is	O
not	O
present	O
(	O
it	O
was	O
rejected	O
,	O
in	O
part	O
,	O
because	O
it	O
was	O
too	O
"	O
un	O
-	O
Java	O
-	O
like	O
"	O
.	O
)	O
The	O
proximate	O
reason	O
for	O
adding	O
default	O
methods	O
to	O
interfaces	O
was	O
to	O
support	O
interface	O
evolution	O
,	O
but	O
we	O
were	O
well	O
aware	O
that	O
we	O
were	O
going	O
beyond	O
that	O
.	O
Whether	O
you	O
consider	O
that	O
to	O
be	O
"	O
interface	O
evolution	O
+	O
+	O
"	O
or	O
"	O
traits	O
-	O
-	O
"	O
is	O
a	O
matter	O
of	O
personal	O
interpretation	O
.	O
So	O
,	O
to	O
answer	O
your	O
question	O
about	O
safety	O
.	O
.	O
.	O
so	O
long	O
as	O
you	O
stick	O
to	O
what	O
the	O
mechanism	O
actually	O
supports	O
,	O
rather	O
than	O
trying	O
to	O
wishfully	O
stretch	O
it	O
to	O
something	O
it	O
does	O
not	O
support	O
,	O
you	O
should	O
be	O
fine	O
.	O
A	O
key	O
design	O
goal	O
was	O
that	O
,	O
from	O
the	O
perspective	O
of	O
the	O
client	O
of	O
an	O
interface	O
,	O
default	O
methods	O
should	O
be	O
indistinguishable	O
from	O
"	O
regular	O
"	O
interface	O
methods	O
.	O
The	O
default	O
-	O
ness	O
of	O
a	O
method	O
,	O
therefore	O
,	O
is	O
only	O
interesting	O
to	O
the	O
designer	O
and	O
implementor	O
of	O
the	O
interface	O
.	O
Here	O
are	O
some	O
use	O
cases	O
that	O
are	O
well	O
within	O
the	O
design	O
goals	O
:	O
#	O
li	O
Interface	O
evolution	O
.	O
Here	O
,	O
we	O
are	O
adding	O
a	O
new	O
method	O
to	O
an	O
existing	O
interface	O
,	O
which	O
has	O
a	O
sensible	O
default	O
implementation	O
in	O
terms	O
of	O
existing	O
methods	O
on	O
that	O
interface	O
.	O
An	O
example	O
would	O
be	O
adding	O
the	O
forEach	O
method	O
to	O
Collection	B-api_mention
,	O
where	O
the	O
default	O
implementation	O
is	O
written	O
in	O
terms	O
of	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
li	O
"	O
Optional	O
"	O
methods	O
.	O
Here	O
,	O
the	O
designer	O
of	O
an	O
interface	O
is	O
saying	O
"	O
Implementors	O
need	O
not	O
implement	O
this	O
method	O
if	O
they	O
are	O
willing	O
to	O
live	O
with	O
the	O
limitations	O
in	O
functionality	O
that	O
entails	O
"	O
.	O
For	O
example	O
,	O
Iterator	B-api_mention
.	I-api_mention
remove	I-api_mention
was	O
given	O
a	O
default	O
which	O
throws	O
UnsupportedOperationException	O
;	O
since	O
the	O
vast	O
majority	O
of	O
implementations	O
of	O
Iterator	O
have	O
this	O
behavior	O
anyway	O
,	O
the	O
default	O
makes	O
this	O
method	O
essentially	O
optional	O
.	O
(	O
If	O
the	O
behavior	O
from	O
AbstractCollection	B-api_mention
were	O
expressed	O
as	O
defaults	O
on	O
Collection	B-api_mention
,	O
we	O
might	O
do	O
the	O
same	O
for	O
the	O
mutative	O
methods	O
.	O
)	O
#	O
li	O
Convenience	O
methods	O
.	O
These	O
are	O
methods	O
that	O
are	O
strictly	O
for	O
convenience	O
,	O
again	O
generally	O
implemented	O
in	O
terms	O
of	O
non	O
-	O
default	O
methods	O
on	O
the	O
class	O
.	O
The	O
logger	O
(	O
args	O
)	O
method	O
in	O
your	O
first	O
example	O
is	O
a	O
reasonable	O
illustration	O
of	O
this	O
.	O
#	O
li	O
Combinators	O
.	O
These	O
are	O
compositional	O
methods	O
that	O
instantiate	O
new	O
instances	O
of	O
the	O
interface	O
based	O
on	O
the	O
current	O
instance	O
.	O
For	O
example	O
,	O
the	O
methods	O
Predicate	B-api_mention
.	I-api_mention
and	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Comparator	B-api_mention
.	I-api_mention
thenComparing	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
examples	O
of	O
combinators	O
.	O
If	O
you	O
provide	O
a	O
default	O
implementation	O
,	O
you	O
should	O
also	O
provide	O
some	O
specification	O
for	O
the	O
default	O
(	O
in	O
the	O
JDK	O
,	O
we	O
use	O
the	O
@	O
implSpec	O
javadoc	O
tag	O
for	O
this	O
)	O
to	O
aid	O
implementors	O
in	O
understanding	O
whether	O
they	O
want	O
to	O
override	O
the	O
method	O
or	O
not	O
.	O
Some	O
defaults	O
,	O
like	O
convenience	O
methods	O
and	O
combinators	O
,	O
are	O
almost	O
never	O
overridden	O
;	O
others	O
,	O
like	O
optional	O
methods	O
,	O
are	O
often	O
overridden	O
.	O
You	O
need	O
to	O
provide	O
enough	O
specification	O
(	O
not	O
just	O
documentation	O
)	O
about	O
what	O
the	O
default	O
promises	O
to	O
do	O
,	O
so	O
the	O
implementor	O
can	O
make	O
a	O
sensible	O
decision	O
about	O
whether	O
they	O
need	O
to	O
override	O
it	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28513908	O
I	O
have	O
some	O
recollections	O
from	O
the	O
early	O
design	O
of	O
the	O
Streams	O
API	O
that	O
might	O
shed	O
some	O
light	O
on	O
the	O
design	O
rationale	O
.	O
Back	O
in	O
2012	O
,	O
we	O
were	O
adding	O
lambdas	O
to	O
the	O
language	O
,	O
and	O
we	O
wanted	O
a	O
collections	O
-	O
oriented	O
or	O
"	O
bulk	O
data	O
"	O
set	O
of	O
operations	O
,	O
programmed	O
using	O
lambdas	O
,	O
that	O
would	O
facilitate	O
parallelism	O
.	O
The	O
idea	O
of	O
lazily	O
chaining	O
operations	O
together	O
was	O
well	O
established	O
by	O
this	O
point	O
.	O
We	O
also	O
didn	O
'	O
t	O
want	O
the	O
intermediate	O
operations	O
to	O
store	O
results	O
.	O
The	O
main	O
issues	O
we	O
needed	O
to	O
decide	O
were	O
what	O
the	O
objects	O
in	O
the	O
chain	O
looked	O
like	O
in	O
the	O
API	O
and	O
how	O
they	O
hooked	O
up	O
to	O
data	O
sources	O
.	O
The	O
sources	O
were	O
often	O
collections	O
,	O
but	O
we	O
also	O
wanted	O
to	O
support	O
data	O
coming	O
from	O
a	O
file	O
or	O
the	O
network	O
,	O
or	O
data	O
generated	O
on	O
-	O
the	O
-	O
fly	O
,	O
e	O
.	O
g	O
.	O
,	O
from	O
a	O
random	O
number	O
generator	O
.	O
There	O
were	O
many	O
influences	O
of	O
existing	O
work	O
on	O
the	O
design	O
.	O
Among	O
the	O
more	O
influential	O
were	O
Google	O
'	O
s	O
Guava	O
library	O
and	O
the	O
Scala	O
collections	O
library	O
.	O
(	O
If	O
anybody	O
is	O
surprised	O
about	O
the	O
influence	O
from	O
Guava	O
,	O
note	O
that	O
Kevin	O
Bourrillion	O
,	O
Guava	O
lead	O
developer	O
,	O
was	O
on	O
the	O
JSR	O
-	O
335	O
Lambda	O
expert	O
group	O
.	O
)	O
On	O
Scala	O
collections	O
,	O
we	O
found	O
this	O
talk	O
by	O
Martin	O
Odersky	O
to	O
be	O
of	O
particular	O
interest	O
:	O
Future	O
-	O
Proofing	O
Scala	O
Collections	O
:	O
from	O
Mutable	O
to	O
Persistent	O
to	O
Parallel	O
.	O
(	O
Stanford	O
EE380	O
,	O
2011	O
June	O
1	O
.	O
)	O
Our	O
prototype	O
design	O
at	O
the	O
time	O
was	O
based	O
around	O
Iterable	B-api_mention
.	O
The	O
familiar	O
operations	O
filter	O
,	O
map	O
,	O
and	O
so	O
forth	O
were	O
extension	O
(	O
default	O
)	O
methods	O
on	O
Iterable	B-api_mention
.	O
Calling	O
one	O
added	O
an	O
operation	O
to	O
the	O
chain	O
and	O
returned	O
another	O
Iterable	O
.	O
A	O
terminal	O
operation	O
like	O
count	O
would	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
up	O
the	O
chain	O
to	O
the	O
source	O
,	O
and	O
the	O
operations	O
were	O
implemented	O
within	O
each	O
stage	O
'	O
s	O
Iterator	B-api_mention
.	O
Since	O
these	O
are	O
Iterables	O
,	O
you	O
can	O
call	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
more	O
than	O
once	O
.	O
What	O
should	O
happen	O
then	O
?	O
If	O
the	O
source	O
is	O
a	O
collection	O
,	O
this	O
mostly	O
works	O
fine	O
.	O
Collections	O
are	O
Iterable	B-api_mention
,	O
and	O
each	O
call	O
to	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
produces	O
a	O
distinct	O
Iterator	B-api_mention
instance	O
that	O
is	O
independent	O
of	O
any	O
other	O
active	O
instances	O
,	O
and	O
each	O
traverses	O
the	O
collection	O
independently	O
.	O
Great	O
.	O
Now	O
what	O
if	O
the	O
source	O
is	O
one	O
-	O
shot	O
,	O
like	O
reading	O
lines	O
from	O
a	O
file	O
?	O
Maybe	O
the	O
first	O
Iterator	O
should	O
get	O
all	O
the	O
values	O
but	O
the	O
second	O
and	O
subsequent	O
ones	O
should	O
be	O
empty	O
.	O
Maybe	O
the	O
values	O
should	O
be	O
interleaved	O
among	O
the	O
Iterators	O
.	O
Or	O
maybe	O
each	O
Iterator	B-api_mention
should	O
get	O
all	O
the	O
same	O
values	O
.	O
Then	O
,	O
what	O
if	O
you	O
have	O
two	O
iterators	O
and	O
one	O
gets	O
farther	O
ahead	O
of	O
the	O
other	O
?	O
Somebody	O
will	O
have	O
to	O
buffer	O
up	O
the	O
values	O
in	O
the	O
second	O
Iterator	O
until	O
they	O
'	O
re	O
read	O
.	O
Worse	O
,	O
what	O
if	O
you	O
get	O
one	O
Iterator	B-api_mention
and	O
read	O
all	O
the	O
values	O
,	O
and	O
only	O
then	O
get	O
a	O
second	O
Iterator	B-api_mention
.	O
Where	O
do	O
the	O
values	O
come	O
from	O
now	O
?	O
Is	O
there	O
a	O
requirement	O
for	O
them	O
all	O
to	O
be	O
buffered	O
up	O
just	O
in	O
case	O
somebody	O
wants	O
a	O
second	O
Iterator	B-api_mention
?	O
Clearly	O
,	O
allowing	O
multiple	O
Iterators	O
over	O
a	O
one	O
-	O
shot	O
source	O
raises	O
a	O
lot	O
of	O
questions	O
.	O
We	O
didn	O
'	O
t	O
have	O
good	O
answers	O
for	O
them	O
.	O
We	O
wanted	O
consistent	O
,	O
predictable	O
behavior	O
for	O
what	O
happens	O
if	O
you	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
twice	O
.	O
This	O
pushed	O
us	O
toward	O
disallowing	O
multiple	O
traversals	O
,	O
making	O
the	O
pipelines	O
one	O
-	O
shot	O
.	O
We	O
also	O
observed	O
others	O
bumping	O
into	O
these	O
issues	O
.	O
In	O
the	O
JDK	O
,	O
most	O
Iterables	O
are	O
collections	O
or	O
collection	O
-	O
like	O
objects	O
,	O
which	O
allow	O
multiple	O
traversal	O
.	O
It	O
isn	O
'	O
t	O
specified	O
anywhere	O
,	O
but	O
there	O
seemed	O
to	O
be	O
an	O
unwritten	O
expectation	O
that	O
Iterables	O
allow	O
multiple	O
traversal	O
.	O
A	O
notable	O
exception	O
is	O
the	O
NIO	O
DirectoryStream	O
interface	O
.	O
Its	O
specification	O
includes	O
this	O
interesting	O
warning	O
:	O
#	O
blockquote	O
[	O
bold	O
in	O
original	O
]	O
This	O
seemed	O
unusual	O
and	O
unpleasant	O
enough	O
that	O
we	O
didn	O
'	O
t	O
want	O
to	O
create	O
a	O
whole	O
bunch	O
of	O
new	O
Iterables	O
that	O
might	O
be	O
once	O
-	O
only	O
.	O
This	O
pushed	O
us	O
away	O
from	O
using	O
Iterable	B-api_mention
.	O
About	O
this	O
time	O
,	O
an	O
article	O
by	O
Bruce	O
Eckel	O
appeared	O
that	O
described	O
a	O
spot	O
of	O
trouble	O
he	O
'	O
d	O
had	O
with	O
Scala	O
.	O
He	O
'	O
d	O
written	O
this	O
code	O
:	O
#	O
pre	O
It	O
'	O
s	O
pretty	O
straightforward	O
.	O
It	O
parses	O
lines	O
of	O
text	O
into	O
Registrant	O
objects	O
and	O
prints	O
them	O
out	O
twice	O
.	O
Except	O
that	O
it	O
actually	O
only	O
prints	O
them	O
out	O
once	O
.	O
It	O
turns	O
out	O
that	O
he	O
thought	O
that	O
registrants	O
was	O
a	O
collection	O
,	O
when	O
in	O
fact	O
it	O
'	O
s	O
an	O
iterator	O
.	O
The	O
second	O
call	O
to	O
foreach	O
encounters	O
an	O
empty	O
iterator	O
,	O
from	O
which	O
all	O
values	O
have	O
been	O
exhausted	O
,	O
so	O
it	O
prints	O
nothing	O
.	O
This	O
kind	O
of	O
experience	O
convinced	O
us	O
that	O
it	O
was	O
very	O
important	O
to	O
have	O
clearly	O
predictable	O
results	O
if	O
multiple	O
traversal	O
is	O
attempted	O
.	O
It	O
also	O
highlighted	O
the	O
importance	O
of	O
distinguishing	O
between	O
lazy	O
pipeline	O
-	O
like	O
structures	O
from	O
actual	O
collections	O
that	O
store	O
data	O
.	O
This	O
in	O
turn	O
drove	O
the	O
separation	O
of	O
the	O
lazy	O
pipeline	O
operations	O
into	O
the	O
new	O
Stream	B-api_mention
interface	O
and	O
keeping	O
only	O
eager	O
,	O
mutative	O
operations	O
directly	O
on	O
Collections	B-api_mention
.	O
Brian	O
Goetz	O
has	O
explained	O
the	O
rationale	O
for	O
that	O
.	O
What	O
about	O
allowing	O
multiple	O
traversal	O
for	O
collection	O
-	O
based	O
pipelines	O
but	O
disallowing	O
it	O
for	O
non	O
-	O
collection	O
-	O
based	O
pipelines	O
?	O
It	O
'	O
s	O
inconsistent	O
,	O
but	O
it	O
'	O
s	O
sensible	O
.	O
If	O
you	O
'	O
re	O
reading	O
values	O
from	O
the	O
network	O
,	O
of	O
course	O
you	O
can	O
'	O
t	O
traverse	O
them	O
again	O
.	O
If	O
you	O
want	O
to	O
traverse	O
them	O
multiple	O
times	O
,	O
you	O
have	O
to	O
pull	O
them	O
into	O
a	O
collection	O
explicitly	O
.	O
But	O
let	O
'	O
s	O
explore	O
allowing	O
multiple	O
traversal	O
from	O
collections	O
-	O
based	O
pipelines	O
.	O
Let	O
'	O
s	O
say	O
you	O
did	O
this	O
:	O
#	O
pre	O
(	O
The	O
into	O
operation	O
is	O
now	O
spelled	O
collect	O
(	O
args	O
)	O
.	O
)	O
If	O
source	O
is	O
a	O
collection	O
,	O
then	O
the	O
first	O
into	O
(	O
args	O
)	O
call	O
will	O
create	O
a	O
chain	O
of	O
Iterators	O
back	O
to	O
the	O
source	O
,	O
execute	O
the	O
pipeline	O
operations	O
,	O
and	O
send	O
the	O
results	O
into	O
the	O
destination	O
.	O
The	O
second	O
call	O
to	O
into	O
(	O
args	O
)	O
will	O
create	O
another	O
chain	O
of	O
Iterators	O
,	O
and	O
execute	O
the	O
pipeline	O
operations	O
again	O
.	O
This	O
isn	O
'	O
t	O
obviously	O
wrong	O
but	O
it	O
does	O
have	O
the	O
effect	O
of	O
performing	O
all	O
the	O
filter	O
and	O
map	O
operations	O
a	O
second	O
time	O
for	O
each	O
element	O
.	O
I	O
think	O
many	O
programmers	O
would	O
have	O
been	O
surprised	O
by	O
this	O
behavior	O
.	O
As	O
I	O
mentioned	O
above	O
,	O
we	O
had	O
been	O
talking	O
to	O
the	O
Guava	O
developers	O
.	O
One	O
of	O
the	O
cool	O
things	O
they	O
have	O
is	O
an	O
Idea	O
Graveyard	O
where	O
they	O
describe	O
features	O
that	O
they	O
decided	O
not	O
to	O
implement	O
along	O
with	O
the	O
reasons	O
.	O
The	O
idea	O
of	O
lazy	O
collections	O
sounds	O
pretty	O
cool	O
,	O
but	O
here	O
'	O
s	O
what	O
they	O
have	O
to	O
say	O
about	O
it	O
.	O
Consider	O
a	O
List	B-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
operation	O
that	O
returns	O
a	O
List	B-api_mention
:	O
#	O
blockquote	O
To	O
take	O
a	O
specific	O
example	O
,	O
what	O
'	O
s	O
the	O
cost	O
of	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
List	B-api_mention
?	O
For	O
commonly	O
used	O
classes	O
like	O
ArrayList	B-api_mention
,	O
they	O
'	O
re	O
O	O
(	O
1	O
)	O
.	O
But	O
if	O
you	O
call	O
one	O
of	O
these	O
on	O
a	O
lazily	O
-	O
filtered	O
list	O
,	O
it	O
has	O
to	O
run	O
the	O
filter	O
over	O
the	O
backing	O
list	O
,	O
and	O
all	O
of	O
a	O
sudden	O
these	O
operations	O
are	O
O	O
(	O
n	O
)	O
.	O
Worse	O
,	O
it	O
has	O
to	O
traverse	O
the	O
backing	O
list	O
on	O
every	O
operation	O
.	O
This	O
seemed	O
to	O
us	O
to	O
be	O
too	O
much	O
laziness	O
.	O
It	O
'	O
s	O
one	O
thing	O
to	O
set	O
up	O
some	O
operations	O
and	O
defer	O
actual	O
execution	O
until	O
you	O
so	O
"	O
Go	O
"	O
.	O
It	O
'	O
s	O
another	O
to	O
set	O
things	O
up	O
in	O
such	O
a	O
way	O
that	O
hides	O
a	O
potentially	O
large	O
amount	O
of	O
recomputation	O
.	O
In	O
proposing	O
to	O
disallow	O
non	O
-	O
linear	O
or	O
"	O
no	O
-	O
reuse	O
"	O
streams	O
,	O
Paul	O
Sandoz	O
described	O
the	O
potential	O
consequences	O
of	O
allowing	O
them	O
as	O
giving	O
rise	O
to	O
"	O
unexpected	O
or	O
confusing	O
results	O
.	O
"	O
He	O
also	O
mentioned	O
that	O
parallel	O
execution	O
would	O
make	O
things	O
even	O
trickier	O
.	O
Finally	O
,	O
I	O
'	O
d	O
add	O
that	O
a	O
pipeline	O
operation	O
with	O
side	O
effects	O
would	O
lead	O
to	O
difficult	O
and	O
obscure	O
bugs	O
if	O
the	O
operation	O
were	O
unexpectedly	O
executed	O
multiple	O
times	O
,	O
or	O
at	O
least	O
a	O
different	O
number	O
of	O
times	O
than	O
the	O
programmer	O
expected	O
.	O
(	O
But	O
Java	O
programmers	O
don	O
'	O
t	O
write	O
lambda	O
expressions	O
with	O
side	O
effects	O
,	O
do	O
they	O
?	O
DO	O
THEY	O
?	O
?	O
)	O
So	O
that	O
'	O
s	O
the	O
basic	O
rationale	O
for	O
the	O
Java	O
8	O
Streams	O
API	O
design	O
that	O
allows	O
one	O
-	O
shot	O
traversal	O
and	O
that	O
requires	O
a	O
strictly	O
linear	O
(	O
no	O
branching	O
)	O
pipeline	O
.	O
It	O
provides	O
consistent	O
behavior	O
across	O
multiple	O
different	O
stream	O
sources	O
,	O
it	O
clearly	O
separates	O
lazy	O
from	O
eager	O
operations	O
,	O
and	O
it	O
provides	O
a	O
straightforward	O
execution	O
model	O
.	O
With	O
regard	O
to	O
IEnumerable	O
,	O
I	O
am	O
far	O
from	O
an	O
expert	O
on	O
C	O
#	O
and	O
.	O
NET	O
,	O
so	O
I	O
would	O
appreciate	O
being	O
corrected	O
(	O
gently	O
)	O
if	O
I	O
draw	O
any	O
incorrect	O
conclusions	O
.	O
It	O
does	O
appear	O
,	O
however	O
,	O
that	O
IEnumerable	O
permits	O
multiple	O
traversal	O
to	O
behave	O
differently	O
with	O
different	O
sources	O
;	O
and	O
it	O
permits	O
a	O
branching	O
structure	O
of	O
nested	O
IEnumerable	O
operations	O
,	O
which	O
may	O
result	O
in	O
some	O
significant	O
recomputation	O
.	O
While	O
I	O
appreciate	O
that	O
different	O
systems	O
make	O
different	O
tradeoffs	O
,	O
these	O
are	O
two	O
characteristics	O
that	O
we	O
sought	O
to	O
avoid	O
in	O
the	O
design	O
of	O
the	O
Java	O
8	O
Streams	O
API	O
.	O
The	O
quicksort	O
example	O
given	O
by	O
the	O
OP	O
is	O
interesting	O
,	O
puzzling	O
,	O
and	O
I	O
'	O
m	O
sorry	O
to	O
say	O
,	O
somewhat	O
horrifying	O
.	O
Calling	O
QuickSort	O
takes	O
an	O
IEnumerable	O
and	O
returns	O
an	O
IEnumerable	O
,	O
so	O
no	O
sorting	O
is	O
actually	O
done	O
until	O
the	O
final	O
IEnumerable	O
is	O
traversed	O
.	O
What	O
the	O
call	O
seems	O
to	O
do	O
,	O
though	O
,	O
is	O
build	O
up	O
a	O
tree	O
structure	O
of	O
IEnumerables	O
that	O
reflects	O
the	O
partitioning	O
that	O
quicksort	O
would	O
do	O
,	O
without	O
actually	O
doing	O
it	O
.	O
(	O
This	O
is	O
lazy	O
computation	O
,	O
after	O
all	O
.	O
)	O
If	O
the	O
source	O
has	O
N	O
elements	O
,	O
the	O
tree	O
will	O
be	O
N	O
elements	O
wide	O
at	O
its	O
widest	O
,	O
and	O
it	O
will	O
be	O
lg	O
(	O
N	O
)	O
levels	O
deep	O
.	O
It	O
seems	O
to	O
me	O
-	O
-	O
and	O
once	O
again	O
,	O
I	O
'	O
m	O
not	O
a	O
C	O
#	O
or	O
.	O
NET	O
expert	O
-	O
-	O
that	O
this	O
will	O
cause	O
certain	O
innocuous	O
-	O
looking	O
calls	O
,	O
such	O
as	O
pivot	O
selection	O
via	O
ints	O
.	O
First	O
(	O
args	O
)	O
,	O
to	O
be	O
more	O
expensive	O
than	O
they	O
look	O
.	O
At	O
the	O
first	O
level	O
,	O
of	O
course	O
,	O
it	O
'	O
s	O
O	O
(	O
1	O
)	O
.	O
But	O
consider	O
a	O
partition	O
deep	O
in	O
the	O
tree	O
,	O
at	O
the	O
right	O
-	O
hand	O
edge	O
.	O
To	O
compute	O
the	O
first	O
element	O
of	O
this	O
partition	O
,	O
the	O
entire	O
source	O
has	O
to	O
be	O
traversed	O
,	O
an	O
O	O
(	O
N	O
)	O
operation	O
.	O
But	O
since	O
the	O
partitions	O
above	O
are	O
lazy	O
,	O
they	O
must	O
be	O
recomputed	O
,	O
requiring	O
O	O
(	O
lg	O
N	O
)	O
comparisons	O
.	O
So	O
selecting	O
the	O
pivot	O
would	O
be	O
an	O
O	O
(	O
N	O
lg	O
N	O
)	O
operation	O
,	O
which	O
is	O
as	O
expensive	O
as	O
an	O
entire	O
sort	O
.	O
But	O
we	O
don	O
'	O
t	O
actually	O
sort	O
until	O
we	O
traverse	O
the	O
returned	O
IEnumerable	O
.	O
In	O
the	O
standard	O
quicksort	O
algorithm	O
,	O
each	O
level	O
of	O
partitioning	O
doubles	O
the	O
number	O
of	O
partitions	O
.	O
Each	O
partition	O
is	O
only	O
half	O
the	O
size	O
,	O
so	O
each	O
level	O
remains	O
at	O
O	O
(	O
N	O
)	O
complexity	O
.	O
The	O
tree	O
of	O
partitions	O
is	O
O	O
(	O
lg	O
N	O
)	O
high	O
,	O
so	O
the	O
total	O
work	O
is	O
O	O
(	O
N	O
lg	O
N	O
)	O
.	O
With	O
the	O
tree	O
of	O
lazy	O
IEnumerables	O
,	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
there	O
are	O
N	O
partitions	O
.	O
Computing	O
each	O
partition	O
requires	O
a	O
traversal	O
of	O
N	O
elements	O
,	O
each	O
of	O
which	O
requires	O
lg	O
(	O
N	O
)	O
comparisons	O
up	O
the	O
tree	O
.	O
To	O
compute	O
all	O
the	O
partitions	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
,	O
then	O
,	O
requires	O
O	O
(	O
N	O
^	O
2	O
lg	O
N	O
)	O
comparisons	O
.	O
(	O
Is	O
this	O
right	O
?	O
I	O
can	O
hardly	O
believe	O
this	O
.	O
Somebody	O
please	O
check	O
this	O
for	O
me	O
.	O
)	O
In	O
any	O
case	O
,	O
it	O
is	O
indeed	O
cool	O
that	O
IEnumerable	O
can	O
be	O
used	O
this	O
way	O
to	O
build	O
up	O
complicated	O
structures	O
of	O
computation	O
.	O
But	O
if	O
it	O
does	O
increase	O
the	O
computational	O
complexity	O
as	O
much	O
as	O
I	O
think	O
it	O
does	O
,	O
it	O
would	O
seem	O
that	O
programming	O
this	O
way	O
is	O
something	O
that	O
should	O
be	O
avoided	O
unless	O
one	O
is	O
extremely	O
careful	O
.	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
30749407	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
doesn	O
'	O
t	O
uses	O
regex	O
pattern	O
whereas	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
uses	O
regex	O
pattern	O
.	O
So	O
replace	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
performs	O
faster	O
than	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
29140402	O
,	O
answer	O
-	O
29141638	O
Every	O
class	O
in	O
java	O
has	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
it	O
by	O
default	O
,	O
which	O
is	O
called	O
by	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
you	O
pass	O
some	O
object	O
of	O
a	O
class	O
to	O
it	O
.	O
When	O
you	O
try	O
to	O
print	O
object	O
of	O
a	O
class	O
,	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
will	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
the	O
class	O
which	O
returns	O
the	O
className	O
@	O
hashcode	O
of	O
that	O
object	O
.	O
#	O
pre	O
You	O
can	O
override	O
the	O
toString	B-api_mention
method	O
of	O
a	O
class	O
to	O
get	O
different	O
output	O
.	O
See	O
this	O
example	O
#	O
pre	O
Question	O
-	O
10786042	O
,	O
answer	O
-	O
16226168	O
I	O
would	O
not	O
use	O
URLEncoder	B-api_mention
.	O
Besides	O
being	O
incorrectly	O
named	O
(	O
URLEncoder	B-api_mention
has	O
nothing	O
to	O
do	O
with	O
URLs	O
)	O
,	O
inefficient	O
(	O
it	O
uses	O
a	O
StringBuffer	B-api_mention
instead	O
of	O
Builder	B-api_mention
and	O
does	O
a	O
couple	O
of	O
other	O
things	O
that	O
are	O
slow	O
)	O
Its	O
also	O
way	O
too	O
easy	O
to	O
screw	O
it	O
up	O
.	O
Instead	O
I	O
would	O
use	O
URIBuilder	B-api_mention
or	O
Spring	O
'	O
s	O
URIUtils	B-api_mention
or	O
Commons	O
Apache	O
HttpClient	B-api_mention
.	O
The	O
reason	O
being	O
you	O
have	O
to	O
escape	O
the	O
query	O
parameters	O
name	O
(	O
ie	O
BalusC	O
'	O
s	O
answer	O
q	O
)	O
differently	O
than	O
the	O
parameter	O
value	O
.	O
The	O
only	O
downside	O
to	O
the	O
above	O
(	O
that	O
I	O
found	O
out	O
painfully	O
)	O
is	O
that	O
URL	O
'	O
s	O
are	O
not	O
a	O
true	O
subset	O
of	O
URI	O
'	O
s	O
.	O
Since	O
I	O
'	O
m	O
just	O
linking	O
to	O
other	O
answers	O
I	O
marked	O
this	O
as	O
a	O
community	O
wiki	O
.	O
Feel	O
free	O
to	O
edit	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7800008	O
Strictly	O
speaking	O
-	O
you	O
have	O
no	O
choice	O
but	O
calling	O
either	O
hostname	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
-	O
on	O
Unix	O
gethostname	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
the	O
name	O
of	O
your	O
computer	O
.	O
Any	O
attempt	O
to	O
determine	O
the	O
hostname	O
by	O
an	O
IP	O
address	O
like	O
this	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
bound	O
to	O
fail	O
in	O
some	O
circumstances	O
:	O
#	O
li	O
The	O
IP	O
address	O
might	O
not	O
resolve	O
into	O
any	O
name	O
.	O
Bad	O
DNS	O
setup	O
,	O
bad	O
system	O
setup	O
or	O
bad	O
provider	O
setup	O
may	O
be	O
the	O
reason	O
for	O
this	O
.	O
#	O
li	O
A	O
name	O
in	O
DNS	O
can	O
have	O
many	O
aliases	O
called	O
CNAMEs	O
.	O
These	O
can	O
only	O
be	O
resolved	O
in	O
one	O
direction	O
properly	O
:	O
name	O
to	O
address	O
.	O
The	O
reverse	O
direction	O
is	O
ambiguous	O
.	O
Which	O
one	O
is	O
the	O
"	O
official	O
"	O
name	O
?	O
#	O
li	O
A	O
host	O
can	O
have	O
many	O
different	O
IP	O
addresses	O
-	O
and	O
each	O
address	O
can	O
have	O
many	O
different	O
names	O
.	O
Two	O
common	O
cases	O
are	O
:	O
One	O
ethernet	O
port	O
has	O
several	O
"	O
logical	O
"	O
IP	O
addresses	O
or	O
the	O
computer	O
has	O
several	O
ethernet	O
ports	O
.	O
It	O
is	O
configurable	O
whether	O
they	O
share	O
an	O
IP	O
or	O
have	O
different	O
IPs	O
.	O
This	O
is	O
called	O
"	O
multihomed	O
"	O
.	O
#	O
li	O
One	O
Name	O
in	O
DNS	O
can	O
resolve	O
to	O
several	O
IP	O
Addresses	O
.	O
And	O
not	O
all	O
of	O
those	O
addresses	O
must	O
be	O
located	O
on	O
the	O
same	O
computer	O
!	O
(	O
Usecase	O
:	O
A	O
simple	O
form	O
of	O
load	O
-	O
balancing	O
)	O
#	O
li	O
Let	O
'	O
s	O
not	O
even	O
start	O
talking	O
about	O
dynamic	O
IP	O
addresses	O
.	O
Also	O
don	O
'	O
t	O
confuse	O
the	O
name	O
of	O
an	O
IP	O
-	O
address	O
with	O
the	O
name	O
of	O
the	O
host	O
(	O
hostname	O
)	O
.	O
A	O
metaphor	O
might	O
make	O
it	O
clearer	O
:	O
#	O
blockquote	O
This	O
illustrates	O
it	O
pretty	O
much	O
I	O
think	O
.	O
The	O
good	O
news	O
is	O
:	O
The	O
real	O
hostname	O
is	O
usually	O
not	O
necessary	O
.	O
In	O
most	O
cases	O
any	O
name	O
which	O
resolves	O
into	O
an	O
IP	O
address	O
on	O
this	O
host	O
will	O
do	O
.	O
(	O
The	O
stranger	O
might	O
enter	O
the	O
city	O
by	O
Northgate	O
,	O
but	O
helpful	O
locals	O
translate	O
the	O
"	O
2nd	O
left	O
"	O
part	O
.	O
)	O
If	O
the	O
remaining	O
corner	O
cases	O
you	O
must	O
use	O
the	O
definitive	O
source	O
of	O
this	O
configuration	O
setting	O
-	O
which	O
is	O
the	O
C	O
function	O
gethostname	O
(	O
args	O
)	O
.	O
That	O
function	O
is	O
also	O
called	O
by	O
the	O
program	O
hostname	O
.	O
Question	O
-	O
23674624	O
,	O
answer	O
-	O
23674719	O
IntStream	B-api_mention
.	I-api_mention
boxed	I-api_mention
turns	O
an	O
IntStream	B-api_mention
into	O
a	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
you	O
can	O
then	O
collect	O
into	O
a	O
list	O
:	O
theIntStream	O
.	B-api_mention
boxed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375818	O
This	O
isn	O
'	O
t	O
strictly	O
an	O
answer	O
to	O
your	O
question	O
,	O
but	O
if	O
behind	O
your	O
question	O
is	O
a	O
wish	O
to	O
have	O
mutable	O
strings	O
that	O
you	O
can	O
manipulate	O
,	O
you	O
should	O
check	O
out	O
the	O
StringBuilder	B-api_mention
class	O
,	O
which	O
implements	O
many	O
of	O
the	O
exact	O
same	O
methods	O
that	O
String	B-api_mention
has	O
but	O
also	O
adds	O
methods	O
to	O
change	O
the	O
current	O
contents	O
.	O
Once	O
you	O
'	O
ve	O
built	O
your	O
string	O
in	O
such	O
a	O
way	O
that	O
you	O
'	O
re	O
content	O
with	O
it	O
,	O
you	O
simply	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
it	O
in	O
order	O
to	O
convert	O
it	O
to	O
an	O
ordinary	O
String	B-api_mention
that	O
you	O
can	O
pass	O
to	O
library	O
routines	O
and	O
other	O
functions	O
that	O
only	O
take	O
String	B-api_mention
s	O
.	O
Also	O
,	O
both	O
StringBuilder	B-api_mention
and	O
String	B-api_mention
implements	O
the	O
CharSequence	B-api_mention
interface	O
,	O
so	O
if	O
you	O
want	O
to	O
write	O
functions	O
in	O
your	O
own	O
code	O
that	O
can	O
use	O
both	O
mutable	O
and	O
immutable	O
strings	O
,	O
you	O
can	O
declare	O
them	O
to	O
take	O
any	O
CharSequence	B-api_mention
object	O
.	O
Question	O
-	O
22694884	O
,	O
answer	O
-	O
22695031	O
Technically	O
there	O
'	O
s	O
an	O
ugly	O
'	O
workaround	O
'	O
that	O
involves	O
peek	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
an	O
AtomicInteger	B-api_mention
,	O
but	O
really	O
you	O
shouldn	O
'	O
t	O
be	O
using	O
that	O
.	O
What	O
I	O
do	O
in	O
these	O
cases	O
is	O
just	O
collecting	O
it	O
in	O
a	O
list	O
,	O
like	O
this	O
:	O
#	O
pre	O
I	O
am	O
not	O
aware	O
of	O
a	O
way	O
to	O
do	O
this	O
in	O
the	O
API	O
,	O
meanwhile	O
I	O
will	O
work	O
on	O
another	O
example	O
involving	O
a	O
custom	O
element	O
.	O
Update	O
,	O
You	O
should	O
create	O
your	O
own	O
Collector	B-api_mention
for	O
this	O
:	O
#	O
pre	O
What	O
it	O
does	O
is	O
:	O
#	O
li	O
It	O
mimicks	O
the	O
Collectors	B-api_mention
.	I-api_mention
toList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
collector	O
.	O
#	O
li	O
It	O
applies	O
an	O
extra	O
finisher	O
at	O
the	O
end	O
,	O
that	O
throws	O
an	O
exception	O
,	O
or	O
if	O
no	O
exception	O
,	O
returns	O
the	O
first	O
element	O
of	O
the	O
list	O
.	O
Used	O
as	O
:	O
User	B-api_mention
resultUser	O
=	O
users	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
can	O
then	O
customize	O
this	O
singletonCollector	B-api_mention
as	O
much	O
as	O
you	O
want	O
,	O
for	O
example	O
give	O
the	O
exception	O
as	O
argument	O
in	O
the	O
constructor	O
,	O
tweak	O
it	O
to	O
allow	O
two	O
values	O
,	O
and	O
more	O
.	O
New	O
update	O
,	O
I	O
revised	O
my	O
old	O
answer	O
once	O
more	O
for	O
singletonCollector	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
it	O
can	O
actually	O
be	O
obtained	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
35074360	O
I	O
have	O
written	O
a	O
complete	O
utility	O
class	O
(	O
inspired	O
by	O
Askar	O
'	O
s	O
proposal	O
)	O
that	O
can	O
take	O
Java	O
8	O
lambda	O
expression	O
and	O
turn	O
them	O
(	O
if	O
applicable	O
)	O
into	O
any	O
typed	O
standard	O
Java	O
8	O
lambda	O
defined	O
in	O
the	O
package	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	O
You	O
can	O
for	O
example	O
do	O
:	O
#	O
li	O
asPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
asBiPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Because	O
there	O
would	O
be	O
numerous	O
ambiguities	O
if	O
all	O
the	O
static	O
methods	O
would	O
be	O
named	O
just	O
as	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
opted	O
to	O
call	O
the	O
method	O
"	O
as	O
"	O
followed	O
by	O
the	O
returned	O
type	O
.	O
This	O
gives	O
us	O
full	O
control	O
of	O
the	O
lambda	O
interpretation	O
.	O
Below	O
is	O
the	O
first	O
part	O
of	O
the	O
(	O
somewhat	O
large	O
)	O
utility	O
class	O
revealing	O
the	O
pattern	O
used	O
.	O
Have	O
a	O
look	O
at	O
the	O
complete	O
class	O
here	O
(	O
at	O
gist	O
)	O
.	O
#	O
pre	O
Question	O
-	O
12576156	O
,	O
answer	O
-	O
12576394	O
By	O
specifying	O
the	O
the	O
my	O
.	O
list	O
.	O
of	O
.	O
strings	O
=	O
ABC	O
,	O
CDE	O
,	O
EFG	O
in	O
.	O
properties	O
file	O
and	O
using	O
@	O
Value	O
(	O
args	O
)	O
private	O
String	O
[	O
]	O
myString	O
;	O
You	O
can	O
get	O
the	O
arrays	O
of	O
strings	O
.	O
And	O
using	O
CollectionUtils	B-api_mention
.	I-api_mention
addAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
get	O
the	O
list	O
of	O
strings	O
.	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14492320	O
Your	O
QuickRandom	B-api_mention
implementation	O
hasn	O
'	O
t	O
really	O
an	O
uniform	O
distribution	O
.	O
The	O
frequencies	O
are	O
generally	O
higher	O
at	O
the	O
lower	O
values	O
while	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
a	O
more	O
uniform	O
distribution	O
.	O
Here	O
'	O
s	O
a	O
SSCCE	O
which	O
shows	O
that	O
:	O
#	O
pre	O
The	O
average	O
result	O
looks	O
like	O
this	O
:	O
#	O
pre	O
If	O
you	O
repeat	O
the	O
test	O
,	O
you	O
'	O
ll	O
see	O
that	O
the	O
QR	O
distribution	O
varies	O
heavily	O
,	O
depending	O
on	O
the	O
initial	O
seeds	O
,	O
while	O
the	O
MR	O
distribution	O
is	O
stable	O
.	O
Sometimes	O
it	O
reaches	O
the	O
desired	O
uniform	O
distribution	O
,	O
but	O
more	O
than	O
often	O
it	O
doesn	O
'	O
t	O
.	O
Here	O
'	O
s	O
one	O
of	O
the	O
more	O
extreme	O
examples	O
,	O
it	O
'	O
s	O
even	O
beyond	O
the	O
borders	O
of	O
the	O
graph	O
:	O
#	O
pre	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32821016	O
If	O
you	O
look	O
at	O
IntFunction	B-api_mention
it	O
might	O
become	O
clearer	O
:	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
is	O
a	O
FunctionalInterface	O
.	O
It	O
represents	O
a	O
function	O
that	O
takes	O
an	O
int	O
and	O
returns	O
a	O
value	O
of	O
type	O
R	O
.	O
In	O
this	O
case	O
,	O
the	O
return	O
type	O
R	O
is	O
also	O
a	O
FunctionalInterface	O
,	O
namely	O
an	O
IntUnaryOperator	O
.	O
So	O
the	O
first	O
(	O
outer	O
)	O
function	O
itself	O
returns	O
a	O
function	O
.	O
In	O
this	O
case	O
:	O
When	O
applied	O
to	O
an	O
int	O
,	O
curriedAdd	O
is	O
supposed	O
to	O
return	O
a	O
function	O
that	O
again	O
takes	O
an	O
int	O
(	O
and	O
returns	O
again	O
int	O
,	O
because	O
that	O
'	O
s	O
what	O
IntUnaryOperator	O
does	O
)	O
.	O
In	O
functional	O
programming	O
it	O
is	O
common	O
to	O
write	O
the	O
type	O
of	O
a	O
function	O
as	O
param	O
-	O
>	O
return	O
_	O
value	O
and	O
you	O
see	O
exactly	O
that	O
here	O
.	O
So	O
the	O
type	O
of	O
curriedAdd	O
is	O
int	O
-	O
>	O
int	O
-	O
>	O
int	O
(	O
or	O
int	O
-	O
>	O
(	O
int	O
-	O
>	O
int	O
)	O
if	O
you	O
like	O
that	O
better	O
)	O
.	O
Java	O
8	O
'	O
s	O
lambda	O
syntax	O
goes	O
along	O
with	O
this	O
.	O
To	O
define	O
such	O
a	O
function	O
,	O
you	O
write	O
a	O
-	O
>	O
b	O
-	O
>	O
a	O
+	O
b	O
which	O
is	O
very	O
much	O
similar	O
to	O
actual	O
lambda	O
calculus	O
:	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
λ	O
b	O
a	O
+	O
b	O
is	O
a	O
function	O
that	O
takes	O
a	O
single	O
parameter	O
b	O
and	O
returns	O
a	O
value	O
(	O
the	O
sum	O
)	O
.	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
is	O
a	O
function	O
that	O
accepts	O
a	O
single	O
parameter	O
a	O
and	O
returns	O
another	O
function	O
of	O
a	O
single	O
parameter	O
.	O
λ	O
a	O
λ	O
b	O
a	O
+	O
b	O
returns	O
λ	O
b	O
a	O
+	O
b	O
with	O
a	O
set	O
to	O
the	O
parameter	O
value	O
.	O
Question	O
-	O
7438612	O
,	O
answer	O
-	O
7438613	O
Replace	O
will	O
replace	O
all	O
instances	O
of	O
a	O
letter	O
.	O
All	O
you	O
need	O
to	O
do	O
is	O
use	O
substring	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
29494800	O
,	O
answer	O
-	O
29502668	O
#	O
blockquote	O
It	O
'	O
s	O
checking	O
simple	O
equality	O
(	O
likely	O
for	O
the	O
purpose	O
of	O
a	O
micro	O
-	O
optimization	O
,	O
but	O
more	O
on	O
that	O
later	O
)	O
.	O
The	O
unusual	O
casting	O
is	O
necessary	O
because	O
Class	O
<	O
T	O
>	O
(	O
the	O
type	O
of	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
and	O
Class	O
<	O
T	O
>	O
are	O
incomparable	O
types	O
.	O
Basically	O
,	O
for	O
an	O
equality	O
comparison	O
with	O
=	O
=	O
to	O
compile	O
,	O
one	O
of	O
the	O
sides	O
has	O
to	O
be	O
a	O
subtype	O
or	O
supertype	O
of	O
the	O
other	O
.	O
I	O
.	O
e	O
.	O
we	O
can	O
'	O
t	O
do	O
:	O
#	O
pre	O
The	O
rules	O
for	O
generic	O
types	O
are	O
a	O
bit	O
more	O
complicated	O
and	O
there	O
are	O
a	O
few	O
cases	O
where	O
a	O
comparison	O
doesn	O
'	O
t	O
compile	O
,	O
but	O
it	O
may	O
still	O
evaluate	O
to	O
true	O
.	O
The	O
reason	O
Class	O
<	O
T	O
>	O
is	O
not	O
a	O
supertype	O
of	O
Class	O
<	O
T	O
>	O
,	O
despite	O
Object	B-api_mention
[	O
]	O
being	O
a	O
supertype	O
of	O
all	O
object	O
array	O
types	O
,	O
is	O
that	O
Java	O
generics	O
are	O
invariant	O
without	O
the	O
presence	O
of	O
a	O
wildcard	O
.	O
Another	O
way	O
to	O
do	O
the	O
comparison	O
would	O
be	O
:	O
(	O
newType	O
=	O
=	O
(	O
Class	O
<	O
T	O
>	O
)	O
Object	B-api_mention
[	O
]	O
.	B-api_mention
class	I-api_mention
)	O
#	O
blockquote	O
#	O
li	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
creates	O
an	O
array	O
the	O
normal	O
way	O
,	O
of	O
a	O
type	O
that	O
is	O
statically	O
known	O
.	O
Remember	O
,	O
the	O
code	O
has	O
just	O
checked	O
that	O
T	O
[	O
]	O
is	O
Object	B-api_mention
[	O
]	O
.	O
#	O
li	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
reflection	O
to	O
dynamically	O
create	O
an	O
array	O
of	O
the	O
Class	O
type	O
passed	O
in	O
.	O
#	O
blockquote	O
An	O
operation	O
using	O
reflection	O
is	O
generally	O
slower	O
than	O
its	O
non	O
-	O
reflective	O
counterpart	O
.	O
The	O
reflection	O
tutorial	O
says	O
:	O
#	O
blockquote	O
Java	O
SE	O
is	O
filled	O
with	O
micro	O
-	O
optimization	O
like	O
this	O
.	O
The	O
writers	O
of	O
SE	O
try	O
to	O
squeeze	O
everything	O
they	O
can	O
out	O
of	O
it	O
.	O
But	O
I	O
wouldn	O
'	O
t	O
be	O
worried	O
about	O
a	O
performance	O
hit	O
in	O
this	O
case	O
:	O
newInstance	O
and	O
copyOf	B-api_mention
are	O
HotSpot	O
intrinsics	O
.	O
This	O
means	O
that	O
ideally	O
calls	O
to	O
these	O
methods	O
get	O
replaced	O
with	O
machine	O
-	O
specific	O
assembly	O
.	O
Anecdotally	O
,	O
I	O
ran	O
some	O
tests	O
and	O
found	O
the	O
difference	O
between	O
new	O
Object	B-api_mention
[	O
.	O
.	O
.	O
]	O
and	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
be	O
negligible	O
.	O
The	O
code	O
in	O
the	O
question	O
is	O
probably	O
a	O
relic	O
,	O
although	O
it	O
may	O
still	O
be	O
useful	O
on	O
less	O
well	O
-	O
equipped	O
JVMs	O
.	O
Reflection	O
can	O
also	O
be	O
disabled	O
in	O
certain	O
contexts	O
with	O
strict	O
security	O
(	O
such	O
as	O
an	O
applet	O
)	O
,	O
but	O
not	O
typically	O
for	O
a	O
normal	O
desktop	O
application	O
.	O
#	O
blockquote	O
In	O
general	O
,	O
you	O
will	O
probably	O
never	O
use	O
this	O
overload	O
.	O
This	O
overload	O
is	O
only	O
useful	O
if	O
you	O
want	O
to	O
change	O
the	O
type	O
of	O
the	O
array	O
.	O
#	O
li	O
Widening	O
:	O
#	O
pre	O
#	O
li	O
Narrowing	O
:	O
#	O
pre	O
It	O
'	O
s	O
more	O
typical	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
T	I-api_mention
[	I-api_mention
]	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31924845	O
There	O
are	O
almost	O
no	O
good	O
reasons	O
for	O
not	O
using	O
Optional	B-api_mention
as	O
parameters	O
.	O
The	O
arguments	O
against	O
this	O
rely	O
on	O
arguments	O
from	O
authority	O
(	O
see	O
Brian	O
Goetz	O
-	O
his	O
argument	O
is	O
we	O
can	O
'	O
t	O
enforce	O
non	O
null	O
optionals	O
)	O
or	O
that	O
the	O
Optional	B-api_mention
arguments	O
may	O
be	O
null	O
(	O
essentially	O
the	O
same	O
argument	O
)	O
.	O
Of	O
course	O
,	O
any	O
reference	O
in	O
Java	O
can	O
be	O
null	O
,	O
we	O
need	O
to	O
encourage	O
rules	O
being	O
enforced	O
by	O
the	O
compiler	O
,	O
not	O
programmers	O
memory	O
(	O
which	O
is	O
problematic	O
and	O
does	O
not	O
scale	O
)	O
.	O
Functional	O
programming	O
languages	O
encourage	O
Optional	B-api_mention
parameters	O
.	O
One	O
of	O
the	O
best	O
ways	O
of	O
using	O
this	O
is	O
to	O
have	O
multiple	O
optional	O
parameters	O
and	O
using	O
liftM2	O
to	O
use	O
a	O
function	O
assuming	O
the	O
parameters	O
are	O
not	O
empty	O
and	O
returning	O
an	O
optional	O
(	O
see	O
#	O
a	O
)	O
.	O
Java	O
8	O
has	O
unfortunately	O
implemented	O
a	O
very	O
limited	O
library	O
supporting	O
optional	O
.	O
As	O
Java	O
programmers	O
we	O
should	O
only	O
be	O
using	O
null	O
to	O
interact	O
with	O
legacy	O
libraries	O
.	O
Question	O
-	O
21524642	O
,	O
answer	O
-	O
21524694	O
Or	O
.	O
.	O
Pattern	B-api_mention
#	I-api_mention
quote	I-api_mention
:	O
String	B-api_mention
[	O
]	O
value	O
_	O
split	O
=	O
rat	O
_	O
values	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
happening	O
because	O
String	B-api_mention
#	I-api_mention
split	I-api_mention
accepts	O
a	O
regex	O
:	O
|	O
has	O
a	O
special	O
meaning	O
in	O
regex	O
.	O
quote	B-api_mention
will	O
return	O
a	O
String	B-api_mention
representation	O
for	O
the	O
regex	O
.	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25850622	O
a	O
.	O
I	O
have	O
always	O
seen	O
them	O
as	O
a	O
design	O
pattern	O
and	O
nothing	O
JVM	O
-	O
Special	O
I	O
have	O
used	O
that	O
pattern	O
in	O
several	O
situations	O
.	O
c	O
.	O
I	O
beleive	O
that	O
using	O
Annotations	B-api_mention
to	O
mark	O
something	O
is	O
a	O
better	O
solution	O
then	O
using	O
marker	O
interfaces	O
.	O
Simply	O
because	O
Interfaces	B-api_mention
are	O
in	O
the	O
first	O
place	O
aimed	O
to	O
define	O
common	O
interfaces	O
of	O
Types	O
/	O
Classes	O
.	O
They	O
are	O
part	O
of	O
the	O
class	O
-	O
hierachy	O
.	O
Annotations	O
are	O
aimed	O
to	O
provide	O
Meta	O
-	O
Informations	O
to	O
Code	O
,	O
and	O
I	O
think	O
that	O
marker	O
are	O
meta	O
-	O
informations	O
.	O
So	O
they	O
are	O
exactly	O
for	O
that	O
use	O
-	O
case	O
.	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32749756	O
I	O
'	O
m	O
going	O
to	O
shoot	O
in	O
the	O
dark	O
here	O
.	O
.	O
.	O
My	O
guess	O
is	O
that	O
it	O
might	O
have	O
been	O
changed	O
in	O
order	O
to	O
prepare	O
the	O
ground	O
for	O
Specialization	O
(	O
aka	O
generics	O
over	O
primitive	O
types	O
)	O
.	O
Maybe	O
(	O
and	O
I	O
insist	O
on	O
maybe	O
)	O
,	O
this	O
change	O
is	O
meant	O
to	O
make	O
transition	O
to	O
Java	O
10	O
easier	O
,	O
in	O
the	O
event	O
of	O
specialization	O
being	O
part	O
of	O
the	O
JDK	O
.	O
If	O
you	O
look	O
at	O
the	O
State	O
of	O
the	O
Specialization	O
document	O
,	O
Language	O
restrictions	O
section	O
,	O
it	O
says	O
the	O
following	O
:	O
#	O
blockquote	O
(	O
Emphasis	O
is	O
mine	O
)	O
.	O
And	O
ahead	O
in	O
the	O
Specializer	O
transformations	O
section	O
,	O
it	O
says	O
:	O
#	O
blockquote	O
Later	O
on	O
,	O
near	O
the	O
end	O
of	O
the	O
document	O
,	O
in	O
the	O
Further	O
investigation	O
section	O
,	O
it	O
says	O
:	O
#	O
blockquote	O
Now	O
,	O
regarding	O
the	O
change	O
.	O
.	O
.	O
If	O
the	O
Arrays	O
.	O
fill	O
(	O
args	O
)	O
method	O
is	O
going	O
to	O
be	O
specialized	O
,	O
then	O
its	O
signature	O
should	O
change	O
to	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
However	O
this	O
case	O
is	O
specifically	O
listed	O
in	O
the	O
(	O
already	O
mentioned	O
)	O
Language	O
restrictions	O
section	O
(	O
it	O
would	O
violate	O
the	O
emphasized	O
items	O
)	O
.	O
So	O
maybe	O
someone	O
decided	O
that	O
it	O
would	O
be	O
better	O
to	O
not	O
use	O
it	O
from	O
the	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
especially	O
if	O
value	O
is	O
null	O
.	O
Question	O
-	O
29333689	O
,	O
answer	O
-	O
29341981	O
The	O
best	O
answer	O
is	O
already	O
given	O
(	O
XOR	O
-	O
ing	O
the	O
elements	O
)	O
,	O
this	O
is	O
to	O
provide	O
an	O
alternative	O
,	O
more	O
general	O
way	O
.	O
If	O
the	O
input	O
array	O
would	O
be	O
sorted	O
(	O
we	O
can	O
make	O
it	O
sorted	O
)	O
,	O
we	O
could	O
simply	O
iterate	O
over	O
the	O
elements	O
in	O
pairs	O
(	O
stepping	O
by	O
2	O
)	O
and	O
if	O
the	O
elements	O
of	O
the	O
"	O
pair	O
"	O
are	O
different	O
,	O
we	O
'	O
re	O
done	O
:	O
#	O
pre	O
Note	O
:	O
This	O
solution	O
sorts	O
the	O
input	O
array	O
;	O
if	O
this	O
is	O
unwanted	O
or	O
not	O
allowed	O
,	O
it	O
can	O
be	O
cloned	O
first	O
:	O
arr	O
=	O
arr	O
.	B-api_mention
clone	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
input	O
array	O
is	O
sorted	O
,	O
the	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
can	O
be	O
left	O
out	O
of	O
course	O
.	O
Generalization	O
The	O
advantage	O
of	O
this	O
solution	O
is	O
that	O
it	O
can	O
be	O
applied	O
to	O
all	O
types	O
which	O
are	O
comparable	O
and	O
therefore	O
can	O
be	O
sorted	O
(	O
types	O
which	O
implement	O
Comparable	B-api_mention
)	O
,	O
for	O
example	O
String	B-api_mention
or	O
Date	B-api_mention
.	O
The	O
XOR	O
solution	O
is	O
limited	O
to	O
numbers	O
only	O
.	O
Here	O
is	O
a	O
slightly	O
modified	O
version	O
which	O
takes	O
an	O
input	O
array	O
of	O
any	O
element	O
type	O
which	O
is	O
comparable	O
:	O
#	O
pre	O
Note	O
:	O
In	O
most	O
cases	O
you	O
could	O
also	O
use	O
arr	O
[	O
i	O
]	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
compare	O
elements	O
instead	O
of	O
using	O
Comparable	B-api_mention
.	I-api_mention
compareTo	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
For	O
details	O
read	O
the	O
linked	O
javadoc	O
.	O
Quoting	O
the	O
relevant	O
part	O
:	O
#	O
blockquote	O
Now	O
you	O
can	O
call	O
this	O
with	O
a	O
String	B-api_mention
[	O
]	O
for	O
example	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Output	O
:	O
2	O
Final	O
notes	O
:	O
Starting	O
from	O
the	O
problem	O
statement	O
it	O
is	O
not	O
checked	O
whether	O
there	O
are	O
more	O
than	O
2	O
occurrences	O
of	O
the	O
elements	O
,	O
and	O
neither	O
is	O
whether	O
the	O
array	O
length	O
is	O
odd	O
.	O
Also	O
the	O
second	O
example	O
doesn	O
'	O
t	O
check	O
for	O
null	O
values	O
,	O
these	O
are	O
to	O
be	O
added	O
if	O
necessary	O
.	O
Question	O
-	O
23932061	O
,	O
answer	O
-	O
23936723	O
There	O
'	O
s	O
a	O
much	O
better	O
answer	O
than	O
using	O
spliteratorUnknownSize	B-api_mention
directly	O
,	O
which	O
is	O
both	O
easier	O
and	O
gets	O
a	O
better	O
result	O
.	O
Iterable	O
has	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
so	O
you	O
should	O
just	O
use	O
that	O
to	O
get	O
your	O
spliterator	O
.	O
In	O
the	O
worst	O
case	O
,	O
its	O
the	O
same	O
code	O
(	O
the	O
default	O
implementation	O
uses	O
spliteratorUnknownSize	B-api_mention
)	O
,	O
but	O
in	O
the	O
more	O
common	O
case	O
,	O
where	O
your	O
Iterable	O
is	O
already	O
a	O
collection	O
,	O
you	O
'	O
ll	O
get	O
a	O
better	O
spliterator	O
,	O
and	O
therefore	O
better	O
stream	O
performance	O
(	O
maybe	O
even	O
good	O
parallelism	O
.	O
)	O
Its	O
also	O
less	O
code	O
:	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
moreStreamOps	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
As	O
you	O
can	O
see	O
,	O
getting	O
a	O
stream	O
from	O
an	O
Iterable	B-api_mention
(	O
see	O
Why	O
does	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
not	O
provide	O
stream	B-api_mention
(	I-api_mention
)	I-api_mention
and	O
parallelStream	B-api_mention
(	I-api_mention
)	I-api_mention
methods	O
?	O
)	O
is	O
not	O
very	O
painful	O
.	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29926133	O
I	O
'	O
d	O
go	O
for	O
EnumSet	B-api_mention
.	O
Because	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
also	O
defined	O
on	O
Iterable	B-api_mention
,	O
you	O
can	O
avoid	O
creating	O
the	O
stream	O
altogether	O
:	O
EnumSet	B-api_mention
.	I-api_mention
allOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
with	O
a	O
method	O
reference	O
:	O
EnumSet	B-api_mention
.	I-api_mention
allOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Still	O
,	O
the	O
oldschool	O
for	O
-	O
loop	O
feels	O
a	O
bit	O
simpler	O
:	O
#	O
pre	O
Question	O
-	O
28671903	O
,	O
answer	O
-	O
28672583	O
The	O
behaviour	O
is	O
(	O
somewhat	O
)	O
documented	O
in	O
the	O
javadoc	O
:	O
#	O
blockquote	O
What	O
this	O
means	O
in	O
practice	O
,	O
when	O
you	O
call	O
source	O
.	B-api_mention
removeAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
:	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
a	O
smaller	O
size	O
than	O
source	O
,	O
the	O
remove	O
method	O
of	O
HashSet	B-api_mention
is	O
called	O
,	O
which	O
is	O
fast	O
.	O
#	O
li	O
if	O
the	O
removals	O
collection	O
is	O
of	O
equal	O
or	O
larger	O
size	O
than	O
the	O
source	O
,	O
then	O
removals	O
.	O
contains	O
is	O
called	O
,	O
which	O
is	O
slow	O
for	O
an	O
ArrayList	B-api_mention
.	O
Quick	O
fix	O
:	O
Collection	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
removals	O
=	O
new	O
HashSet	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
that	O
there	O
is	O
an	O
open	O
bug	O
that	O
is	O
very	O
similar	O
to	O
what	O
you	O
describe	O
.	O
The	O
bottom	O
line	O
seems	O
to	O
be	O
that	O
it	O
is	O
probably	O
a	O
poor	O
choice	O
but	O
can	O
'	O
t	O
be	O
changed	O
because	O
it	O
is	O
documented	O
in	O
the	O
javadoc	O
.	O
For	O
reference	O
,	O
this	O
is	O
the	O
code	O
of	O
removeAll	B-api_mention
(	O
in	O
Java	O
8	O
-	O
haven	O
'	O
t	O
checked	O
other	O
versions	O
)	O
:	O
#	O
pre	O
Question	O
-	O
28671903	O
I	O
have	O
a	O
set	O
–	O
a	O
HashSet	B-api_mention
I	O
want	O
to	O
remove	O
some	O
items	O
from	O
it	O
…	O
none	O
of	O
the	O
items	O
in	O
the	O
"	O
removals	O
"	O
collection	O
will	O
be	O
in	O
the	O
original	O
set	O
.	O
I	O
specify	O
the	O
size	O
of	O
the	O
"	O
source	O
"	O
set	O
and	O
the	O
size	O
of	O
the	O
"	O
removals	O
"	O
collection	O
on	O
the	O
command	O
line	O
,	O
and	O
build	O
both	O
of	O
them	O
.	O
The	O
source	O
set	O
contains	O
only	O
non	O
-	O
negative	O
integers	O
;	O
the	O
removals	O
set	O
contains	O
only	O
negative	O
integers	O
.	O
I	O
measure	O
how	O
long	O
it	O
takes	O
to	O
remove	O
all	O
the	O
elements	O
using	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
which	O
isn	O
’	O
t	O
the	O
world	O
most	O
accurate	O
stopwatch	O
but	O
is	O
more	O
than	O
adequate	O
in	O
this	O
case	O
,	O
as	O
you	O
’	O
ll	O
see	O
.	O
Here	O
’	O
s	O
the	O
code	O
:	O
#	O
pre	O
Let	O
’	O
s	O
start	O
off	O
by	O
giving	O
it	O
an	O
easy	O
job	O
:	O
a	O
source	O
set	O
of	O
100	O
items	O
,	O
and	O
100	O
to	O
remove	O
:	O
#	O
pre	O
Okay	O
,	O
That	O
'	O
s	O
fast	O
as	O
I	O
expected	O
.	O
Next	O
i	O
tried	O
source	O
of	O
one	O
million	O
items	O
and	O
300	O
,	O
000	O
items	O
to	O
remove	O
?	O
#	O
pre	O
That	O
still	O
seems	O
pretty	O
speedy	O
.	O
Now	O
make	O
it	O
a	O
bit	O
easier	O
–	O
300	O
,	O
000	O
source	O
items	O
and	O
300	O
,	O
000	O
removals	O
:	O
#	O
pre	O
Nearly	O
three	O
minutes	O
?	O
Really	O
confused	O
!	O
!	O
can	O
some	O
one	O
explain	O
why	O
this	O
is	O
happening	O
.	O
Question	O
-	O
19418427	O
,	O
answer	O
-	O
19418548	O
As	O
per	O
my	O
research	O
,	O
all	O
the	O
final	O
String	B-api_mention
are	O
interned	O
in	O
Java	O
.	O
From	O
one	O
of	O
the	O
blog	O
post	O
:	O
#	O
blockquote	O
So	O
it	O
means	O
if	O
you	O
call	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
can	O
compare	O
two	O
strings	O
using	O
=	O
=	O
operator	O
.	O
But	O
here	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
not	O
necessary	O
because	O
in	O
Java	O
final	O
String	B-api_mention
are	O
internally	O
interned	O
.	O
You	O
can	O
find	O
more	O
information	O
String	B-api_mention
comparision	O
using	O
=	O
=	O
operator	O
and	O
Javadoc	O
for	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
Also	O
refer	O
this	O
Stackoverflow	O
post	O
for	O
more	O
information	O
.	O
Question	O
-	O
16232833	O
,	O
answer	O
-	O
16250729	O
change	O
your	O
return	O
type	O
to	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
then	O
you	O
can	O
use	O
below	O
for	O
400	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
for	O
correct	O
request	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
UPDATE	O
1	O
after	O
spring	O
4	O
.	O
1	O
there	O
are	O
helper	O
methods	O
in	O
ResponseEntity	B-api_mention
could	O
be	O
used	O
as	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
status	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
body	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
ok	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34509659	O
Four	O
things	O
are	O
going	O
on	O
:	O
#	O
li	O
(	O
You	O
clearly	O
know	O
this	O
,	O
but	O
for	O
lurkers	O
)	O
=	O
=	O
tests	O
to	O
see	O
if	O
the	O
variables	O
point	O
to	O
the	O
same	O
String	B-api_mention
object	O
,	O
not	O
equivalent	O
strings	O
.	O
So	O
even	O
if	O
x	O
is	O
StringLiteral	O
and	O
y	O
is	O
also	O
StringLiteral	O
,	O
x	O
=	O
=	O
y	O
may	O
be	O
true	O
or	O
false	O
,	O
depending	O
on	O
whether	O
x	O
and	O
y	O
refer	O
to	O
the	O
same	O
String	B-api_mention
object	O
or	O
different	O
ones	O
.	O
That	O
'	O
s	O
why	O
we	O
use	O
equals	O
,	O
not	O
=	O
=	O
,	O
to	O
compare	O
strings	O
for	O
equivalence	O
.	O
All	O
of	O
the	O
following	O
is	O
just	O
meant	O
to	O
explain	O
why	O
=	O
=	O
is	O
sometimes	O
true	O
,	O
it	O
'	O
s	O
not	O
a	O
suggestion	O
to	O
use	O
=	O
=	O
to	O
compare	O
strings	O
.	O
:	O
-	O
)	O
#	O
li	O
Equivalent	O
string	O
constants	O
(	O
strings	O
the	O
compiler	O
knows	O
are	O
constants	O
according	O
to	O
various	O
rules	O
in	O
the	O
JLS	O
)	O
within	O
the	O
same	O
class	O
are	O
made	O
to	O
refer	O
to	O
the	O
same	O
string	O
by	O
the	O
compiler	O
(	O
which	O
also	O
lists	O
them	O
in	O
the	O
class	O
'	O
s	O
"	O
constant	O
pool	O
"	O
)	O
.	O
That	O
'	O
s	O
why	O
a	O
=	O
=	O
b	O
is	O
true	O
.	O
#	O
li	O
When	O
the	O
class	O
is	O
loaded	O
,	O
each	O
of	O
its	O
string	O
constants	O
is	O
automatically	O
interned	O
—	O
the	O
JVM	O
'	O
s	O
string	O
pool	O
is	O
checked	O
for	O
an	O
equivalent	O
string	O
and	O
if	O
one	O
is	O
found	O
,	O
that	O
String	B-api_mention
object	O
is	O
used	O
(	O
if	O
not	O
,	O
the	O
new	O
String	B-api_mention
object	O
for	O
the	O
new	O
constant	O
is	O
added	O
to	O
the	O
pool	O
)	O
.	O
So	O
even	O
if	O
x	O
is	O
a	O
string	O
constant	O
initialized	O
in	O
class	O
Foo	O
and	O
y	O
is	O
a	O
string	O
constant	O
initialized	O
in	O
class	O
Bar	O
,	O
they	O
'	O
ll	O
be	O
=	O
=	O
each	O
other	O
.	O
Points	O
2	O
and	O
3	O
above	O
are	O
covered	O
in	O
part	O
by	O
JLS	O
§	O
3	O
.	O
10	O
.	O
5	O
.	O
(	O
The	O
bit	O
about	O
the	O
class	O
constant	O
pool	O
is	O
a	O
bit	O
of	O
an	O
implementation	O
detail	O
,	O
hence	O
the	O
link	O
to	O
the	O
JVM	O
spec	O
earlier	O
;	O
the	O
JLS	O
just	O
speaks	O
of	O
interning	O
.	O
)	O
#	O
li	O
The	O
compiler	O
does	O
string	O
concatenation	O
if	O
it	O
'	O
s	O
dealing	O
with	O
constant	O
values	O
,	O
so	O
String	B-api_mention
d	O
=	O
StringLiteral	O
+	O
StringLiteral	O
;	O
is	O
compiled	O
to	O
String	B-api_mention
d	O
=	O
StringLiteral	O
;	O
and	O
StringLiteral	O
is	O
a	O
string	O
constant	O
the	O
compiler	O
and	O
JVM	O
apply	O
points	O
2	O
and	O
3	O
above	O
to	O
.	O
E	O
.	O
g	O
.	O
,	O
no	O
StringBuilder	B-api_mention
is	O
used	O
,	O
the	O
concatenation	O
happens	O
at	O
compile	O
-	O
time	O
,	O
not	O
runtime	O
.	O
This	O
is	O
covered	O
in	O
JLS	O
§	O
15	O
.	O
28	O
-	O
Constant	O
Expressions	O
.	O
So	O
a	O
=	O
=	O
d	O
is	O
true	O
for	O
the	O
same	O
reason	O
a	O
=	O
=	O
b	O
is	O
true	O
:	O
They	O
refer	O
to	O
the	O
same	O
constant	O
string	O
,	O
so	O
the	O
compiler	O
ensured	O
they	O
were	O
referring	O
to	O
the	O
same	O
string	O
in	O
the	O
class	O
'	O
s	O
constant	O
pool	O
.	O
The	O
compiler	O
can	O
'	O
t	O
do	O
that	O
when	O
any	O
of	O
the	O
operands	O
is	O
not	O
a	O
constant	O
,	O
so	O
it	O
can	O
'	O
t	O
do	O
that	O
with	O
:	O
String	B-api_mention
e	O
=	O
c	O
+	O
StringLiteral	O
;	O
.	O
.	O
.	O
even	O
though	O
code	O
analysis	O
could	O
easily	O
show	O
that	O
the	O
value	O
of	O
c	O
will	O
definitely	O
be	O
StringLiteral	O
and	O
thus	O
e	O
will	O
definitely	O
be	O
StringLiteral	O
.	O
The	O
specification	O
only	O
has	O
the	O
compiler	O
do	O
the	O
concatenation	O
with	O
constant	O
values	O
,	O
specifically	O
.	O
So	O
since	O
the	O
compiler	O
can	O
'	O
t	O
do	O
it	O
,	O
it	O
outputs	O
the	O
StringBuilder	B-api_mention
code	O
you	O
referred	O
to	O
and	O
that	O
work	O
is	O
done	O
at	O
runtime	O
,	O
creating	O
a	O
new	O
String	B-api_mention
object	O
.	O
That	O
string	O
isn	O
'	O
t	O
automatically	O
interned	O
,	O
so	O
e	O
ends	O
up	O
referring	O
to	O
a	O
different	O
String	B-api_mention
object	O
than	O
a	O
does	O
,	O
and	O
so	O
a	O
=	O
=	O
e	O
is	O
false	O
.	O
Note	O
that	O
as	O
Vinod	O
said	O
,	O
if	O
you	O
declared	O
c	O
as	O
final	O
:	O
final	O
String	B-api_mention
c	O
=	O
StringLiteral	O
;	O
Then	O
it	O
would	O
be	O
a	O
constant	O
variable	O
(	O
yes	O
,	O
they	O
'	O
re	O
really	O
called	O
that	O
)	O
and	O
so	O
§	O
15	O
.	O
28	O
would	O
apply	O
and	O
the	O
compiler	O
would	O
turn	O
String	B-api_mention
e	O
=	O
c	O
+	O
StringLiteral	O
;	O
into	O
String	B-api_mention
e	O
=	O
StringLiteral	O
;	O
and	O
a	O
=	O
=	O
e	O
would	O
also	O
be	O
true	O
.	O
Just	O
to	O
reiterate	O
:	O
None	O
of	O
which	O
means	O
we	O
should	O
use	O
=	O
=	O
to	O
compare	O
strings	O
for	O
equivalence	O
.	O
:	O
-	O
)	O
That	O
'	O
s	O
what	O
equals	O
is	O
for	O
.	O
Question	O
-	O
4759570	O
,	O
answer	O
-	O
19459145	O
This	O
works	O
on	O
Windows	O
with	O
Cygwin	O
installed	O
:	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
14833008	O
,	O
answer	O
-	O
14833048	O
You	O
need	O
to	O
escape	O
the	O
dot	O
if	O
you	O
want	O
to	O
split	O
on	O
a	O
literal	O
dot	O
:	O
String	B-api_mention
extensionRemoved	O
=	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
Otherwise	O
you	O
are	O
splitting	O
on	O
the	O
regex	O
.	O
,	O
which	O
means	O
"	O
any	O
character	O
"	O
.	O
Note	O
the	O
double	O
backslash	O
needed	O
to	O
create	O
a	O
single	O
backslash	O
in	O
the	O
regex	O
.	O
You	O
'	O
re	O
getting	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
because	O
your	O
input	O
string	O
is	O
just	O
a	O
dot	O
,	O
ie	O
StringLiteral	O
,	O
which	O
is	O
an	O
edge	O
case	O
that	O
produces	O
an	O
empty	O
array	O
when	O
split	O
on	O
dot	O
;	O
split	B-api_mention
(	I-api_mention
regex	I-api_mention
)	I-api_mention
removes	O
all	O
trailing	O
blanks	O
from	O
the	O
result	O
,	O
but	O
since	O
splitting	O
a	O
dot	O
on	O
a	O
dot	O
leaves	O
only	O
two	O
blanks	O
,	O
after	O
trailing	O
blanks	O
are	O
removed	O
you	O
'	O
re	O
left	O
with	O
an	O
empty	O
array	O
.	O
To	O
avoid	O
getting	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
for	O
this	O
edge	O
case	O
,	O
use	O
the	O
overloaded	O
version	O
of	O
split	B-api_mention
(	I-api_mention
regex	I-api_mention
,	I-api_mention
limit	I-api_mention
)	I-api_mention
,	O
which	O
has	O
a	O
second	O
parameter	O
that	O
is	O
the	O
size	O
limit	O
for	O
the	O
resulting	O
array	O
.	O
When	O
limit	O
is	O
negative	O
,	O
the	O
behaviour	O
of	O
removing	O
trailing	O
blanks	O
from	O
the	O
resulting	O
array	O
is	O
disabled	O
:	O
StringLiteral	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
returns	O
an	O
array	O
of	O
two	O
blanks	O
,	O
ie	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
ie	O
,	O
when	O
filename	O
is	O
just	O
a	O
dot	O
StringLiteral	O
,	O
calling	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
will	O
return	O
a	O
blank	O
,	O
but	O
calling	O
filename	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
will	O
throw	O
an	O
ArrayIndexOutOfBoundsException	B-api_mention
.	O
Question	O
-	O
24631909	O
,	O
answer	O
-	O
24635657	O
Common	O
features	O
a	O
)	O
Both	O
libraries	O
use	O
immutable	O
types	O
.	O
Joda	O
-	O
Time	O
also	O
offers	O
additional	O
mutable	O
types	O
like	O
MutableDateTime	B-api_mention
.	O
b	O
)	O
Furthermore	O
:	O
Both	O
libraries	O
are	O
inspired	O
by	O
the	O
design	O
study	O
"	O
TimeAndMoney	O
"	O
from	O
Eric	O
Evans	O
or	O
ideas	O
from	O
Martin	O
Fowler	O
about	O
domain	O
driven	O
style	O
so	O
they	O
strive	O
more	O
or	O
less	O
for	O
a	O
fluent	O
programming	O
style	O
(	O
although	O
not	O
always	O
perfect	O
;	O
-	O
)	O
)	O
.	O
c	O
)	O
With	O
both	O
libraries	O
we	O
get	O
a	O
real	O
calendar	O
date	O
type	O
(	O
called	O
LocalDate	B-api_mention
)	O
,	O
a	O
real	O
wall	O
time	O
type	O
(	O
called	O
LocalTime	B-api_mention
)	O
and	O
the	O
composition	O
(	O
called	O
LocalDateTime	B-api_mention
)	O
.	O
That	O
is	O
a	O
very	O
big	O
win	O
compared	O
with	O
old	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Calendar	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
.	O
d	O
)	O
Both	O
libraries	O
use	O
a	O
method	O
-	O
centric	O
approach	O
meaning	O
they	O
encourage	O
the	O
user	O
to	O
use	O
getDayOfYear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
causes	O
a	O
lot	O
of	O
extra	O
methods	O
compared	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Calendar	I-api_mention
(	O
although	O
latter	O
is	O
not	O
type	O
-	O
safe	O
at	O
all	O
due	O
to	O
excessive	O
use	O
of	O
ints	O
)	O
.	O
Performance	O
See	O
the	O
other	O
answer	O
by	O
@	O
OO7	O
pointing	O
to	O
the	O
analysis	O
of	O
Mikhail	O
Vorontsov	O
although	O
point	O
3	O
(	O
exception	O
catching	O
)	O
is	O
probably	O
obsolete	O
-	O
see	O
this	O
JDK	O
-	O
bug	O
.	O
The	O
different	O
performance	O
(	O
which	O
is	O
in	O
general	O
favour	O
of	O
JSR	O
-	O
310	O
)	O
is	O
mainly	O
due	O
to	O
the	O
fact	O
that	O
the	O
internal	O
implementation	O
of	O
Joda	O
-	O
Time	O
always	O
use	O
a	O
machine	O
-	O
time	O
-	O
like	O
long	O
-	O
primitive	O
(	O
in	O
milliseconds	O
)	O
.	O
Null	O
Joda	O
-	O
Time	O
often	O
use	O
NULL	O
as	O
default	O
for	O
system	O
timezone	O
,	O
default	O
locale	O
,	O
current	O
timestamp	O
etc	O
.	O
while	O
JSR	O
-	O
310	O
almost	O
always	O
rejects	O
NULL	O
values	O
.	O
Precision	O
JSR	O
-	O
310	O
handles	O
nanosecond	O
precision	O
while	O
Joda	O
-	O
Time	O
is	O
limited	O
to	O
millisecond	O
precision	O
.	O
Supported	O
fields	O
:	O
An	O
overview	O
about	O
supported	O
fields	O
in	O
Java	O
-	O
8	O
(	O
JSR	O
-	O
310	O
)	O
is	O
given	O
by	O
some	O
classes	O
in	O
the	O
temporal	O
-	O
package	O
(	O
for	O
example	O
ChronoField	B-api_mention
and	O
WeekFields	B-api_mention
)	O
while	O
Joda	O
-	O
Time	O
is	O
rather	O
weak	O
on	O
this	O
area	O
-	O
see	O
DateTimeFieldType	O
.	O
The	O
biggest	O
lack	O
of	O
Joda	O
-	O
Time	O
is	O
here	O
the	O
absence	O
of	O
localized	O
week	O
-	O
related	O
fields	O
.	O
A	O
common	O
feature	O
of	O
both	O
field	O
implementation	O
design	O
is	O
that	O
both	O
are	O
based	O
on	O
values	O
of	O
type	O
long	O
(	O
no	O
other	O
types	O
,	O
not	O
even	O
enums	O
)	O
.	O
Enum	O
JSR	O
-	O
310	O
offers	O
enums	O
like	O
DayOfWeek	O
or	O
Month	O
while	O
Joda	O
-	O
Time	O
does	O
not	O
offer	O
this	O
because	O
it	O
was	O
mainly	O
developed	O
in	O
years	O
2002	O
-	O
2004	O
before	O
Java	O
5	O
.	O
Zone	O
API	O
a	O
)	O
JSR	O
-	O
310	O
offers	O
more	O
timezone	O
features	O
than	O
Joda	O
-	O
Time	O
.	O
Latter	O
is	O
not	O
able	O
to	O
yield	O
a	O
programmatical	O
access	O
to	O
the	O
history	O
of	O
timezone	O
offset	O
transitions	O
while	O
JSR	O
-	O
310	O
is	O
capable	O
to	O
do	O
this	O
.	O
b	O
)	O
For	O
your	O
information	O
:	O
JSR	O
-	O
310	O
has	O
moved	O
its	O
internal	O
timezone	O
repository	O
to	O
a	O
new	O
location	O
and	O
a	O
different	O
format	O
.	O
The	O
old	O
library	O
folder	O
lib	O
/	O
zi	O
does	O
not	O
exist	O
any	O
more	O
.	O
Adjuster	O
vs	O
.	O
Property	O
JSR	O
-	O
310	O
has	O
introduced	O
the	O
TemporalAdjuster	B-api_mention
-	O
interface	O
as	O
a	O
formalized	O
way	O
to	O
externalize	O
temporal	O
calculations	O
and	O
manipulations	O
,	O
especially	O
for	O
library	O
or	O
framework	O
-	O
writers	O
this	O
is	O
a	O
nice	O
and	O
relative	O
easy	O
way	O
to	O
embed	O
new	O
extensions	O
of	O
JSR	O
-	O
310	O
(	O
a	O
kind	O
of	O
equivalent	O
to	O
static	O
helper	O
classes	O
for	O
former	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
)	O
.	O
For	O
most	O
users	O
however	O
,	O
this	O
feature	O
has	O
very	O
limited	O
value	O
because	O
the	O
burden	O
to	O
write	O
code	O
is	O
still	O
with	O
the	O
user	O
.	O
Built	O
-	O
in	O
solutions	O
based	O
on	O
the	O
new	O
TemporalAdjuster	B-api_mention
-	O
concept	O
are	O
not	O
so	O
many	O
,	O
there	O
is	O
currently	O
only	O
the	O
helper	O
class	O
TemporalAdjusters	B-api_mention
with	O
a	O
limited	O
set	O
of	O
manipulations	O
(	O
and	O
the	O
enums	O
Month	O
or	O
other	O
temporal	O
types	O
)	O
.	O
Joda	O
-	O
Time	O
offers	O
a	O
field	O
-	O
package	O
but	O
practice	O
has	O
shown	O
evidence	O
that	O
new	O
field	O
implementations	O
are	O
very	O
hard	O
to	O
code	O
.	O
On	O
the	O
other	O
side	O
Joda	O
-	O
Time	O
offers	O
so	O
-	O
called	O
properties	O
which	O
make	O
some	O
manipulations	O
much	O
easier	O
and	O
more	O
elegant	O
than	O
in	O
JSR	O
-	O
310	O
,	O
for	O
example	O
property	O
.	O
withMaximumValue	O
(	O
)	O
.	O
Calendar	O
systems	O
JSR	O
-	O
310	O
offers	O
4	O
extra	O
calendar	O
systems	O
.	O
The	O
most	O
interesting	O
one	O
is	O
Umalqura	O
(	O
used	O
in	O
Saudi	O
Arabia	O
)	O
.	O
The	O
other	O
3	O
are	O
:	O
Minguo	O
(	O
Taiwan	O
)	O
,	O
Japanese	O
(	O
only	O
the	O
modern	O
calendar	O
since	O
1871	O
!	O
)	O
and	O
ThaiBuddhist	O
(	O
only	O
correct	O
after	O
1940	O
)	O
.	O
Joda	O
-	O
Time	O
offers	O
an	O
Islamic	O
calendar	O
based	O
on	O
calculatory	O
base	O
-	O
not	O
a	O
sighting	O
-	O
based	O
calendar	O
like	O
Umalqura	O
.	O
Thai	O
-	O
Buddhist	O
is	O
also	O
offered	O
by	O
Joda	O
-	O
Time	O
in	O
a	O
similar	O
form	O
,	O
Minguo	O
and	O
the	O
japanese	O
one	O
not	O
.	O
Otherwise	O
Joda	O
-	O
Time	O
offers	O
coptic	O
and	O
ethiopic	O
calendar	O
,	O
too	O
(	O
but	O
without	O
any	O
support	O
for	O
internationalization	O
)	O
.	O
More	O
interesting	O
for	O
Europeans	O
:	O
Joda	O
-	O
Time	O
also	O
offers	O
a	O
Gregorian	O
,	O
Julian	O
and	O
mixed	O
-	O
gregorian	O
-	O
julian	O
calendar	O
.	O
However	O
,	O
the	O
practical	O
value	O
for	O
real	O
historical	O
calculations	O
is	O
limited	O
because	O
important	O
features	O
like	O
different	O
year	O
starts	O
in	O
date	O
history	O
are	O
not	O
supported	O
at	O
all	O
(	O
the	O
same	O
criticism	O
is	O
valid	O
for	O
old	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
GregorianCalendar	I-api_mention
)	O
.	O
Other	O
calendars	O
like	O
Hebrew	O
or	O
Persian	O
or	O
Hindu	O
are	O
completely	O
missing	O
in	O
both	O
libraries	O
.	O
Epoch	O
days	O
JSR	O
-	O
310	O
has	O
the	O
class	O
JulianFields	B-api_mention
while	O
Joda	O
-	O
Time	O
(	O
version	O
2	O
.	O
0	O
)	O
offers	O
some	O
helper	O
methods	O
in	O
the	O
class	O
DateTimeUtils	B-api_mention
.	O
Clocks	O
JSR	O
-	O
310	O
has	O
no	O
interface	O
(	O
a	O
design	O
mistake	O
)	O
but	O
an	O
abstract	O
class	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
Clock	I-api_mention
which	O
can	O
be	O
used	O
for	O
any	O
clock	O
dependency	O
injection	O
.	O
Joda	O
-	O
Time	O
offers	O
the	O
interface	O
MillisProvider	B-api_mention
and	O
some	O
helper	O
methods	O
in	O
DateTimeUtils	B-api_mention
instead	O
.	O
So	O
this	O
way	O
Joda	O
-	O
Time	O
is	O
also	O
capable	O
of	O
supporting	O
test	O
-	O
driven	O
models	O
with	O
different	O
clocks	O
(	O
mocking	O
etc	O
.	O
)	O
.	O
Duration	O
arithmetic	O
Both	O
libraries	O
support	O
the	O
calculation	O
of	O
time	O
distances	O
in	O
one	O
or	O
more	O
temporal	O
units	O
.	O
However	O
,	O
when	O
handling	O
single	O
-	O
unit	O
-	O
durations	O
the	O
JSR	O
-	O
310	O
-	O
style	O
is	O
obviously	O
nicer	O
(	O
and	O
long	O
-	O
based	O
instead	O
of	O
using	O
int	O
)	O
:	O
JSR	O
-	O
310	O
=	O
>	O
long	O
days	O
=	O
ChronoUnit	B-api_mention
.	I-api_mention
DAYS	I-api_mention
.	I-api_mention
between	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Joda	O
-	O
Time	O
=	O
>	O
int	O
days	O
=	O
DAYS	B-api_mention
.	I-api_mention
daysBetween	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getDays	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Handling	O
of	O
multiple	O
-	O
unit	O
-	O
durations	O
are	O
also	O
different	O
.	O
Even	O
the	O
calculation	O
results	O
can	O
differ	O
-	O
see	O
this	O
closed	O
Joda	O
-	O
Time	O
issue	O
.	O
While	O
JSR	O
-	O
310	O
use	O
a	O
very	O
simple	O
and	O
limited	O
approach	O
to	O
use	O
just	O
the	O
classes	O
Period	B-api_mention
(	O
duration	O
based	O
on	O
years	O
,	O
months	O
and	O
days	O
)	O
and	O
Duration	B-api_mention
(	O
based	O
on	O
seconds	O
and	O
nanoseconds	O
)	O
,	O
Joda	O
-	O
Time	O
uses	O
a	O
more	O
sophisticated	O
way	O
using	O
the	O
class	O
PeriodType	O
in	O
order	O
to	O
control	O
in	O
which	O
units	O
a	O
duration	O
(	O
Joda	O
-	O
Time	O
call	O
it	O
"	O
Period	O
"	O
)	O
shall	O
be	O
expressed	O
.	O
While	O
the	O
PeriodType	O
-	O
API	O
is	O
somehow	O
awkward	O
to	O
use	O
a	O
similar	O
way	O
is	O
not	O
offered	O
by	O
JSR	O
-	O
310	O
at	O
all	O
.	O
Especially	O
it	O
is	O
not	O
yet	O
possible	O
in	O
JSR	O
-	O
310	O
to	O
define	O
mixed	O
date	O
and	O
time	O
durations	O
(	O
based	O
on	O
days	O
and	O
hours	O
for	O
example	O
)	O
.	O
So	O
be	O
warned	O
if	O
it	O
comes	O
to	O
migration	O
from	O
one	O
library	O
to	O
another	O
.	O
The	O
libraries	O
in	O
discussion	O
are	O
incompatible	O
-	O
despite	O
of	O
partially	O
same	O
class	O
names	O
.	O
Intervals	O
JSR	O
-	O
310	O
does	O
not	O
support	O
this	O
feature	O
while	O
Joda	O
-	O
Time	O
has	O
limited	O
support	O
.	O
See	O
also	O
this	O
SO	O
-	O
answer	O
.	O
Formatting	O
and	O
Parsing	O
Best	O
way	O
to	O
compare	O
both	O
libraries	O
is	O
to	O
view	O
the	O
equal	O
-	O
named	O
classes	O
DateTimeFormatterBuilder	B-api_mention
(	O
JSR	O
-	O
310	O
)	O
and	O
DateTimeFormatterBuilder	B-api_mention
(	O
Joda	O
-	O
Time	O
)	O
.	O
The	O
JSR	O
-	O
310	O
-	O
variant	O
is	O
a	O
little	O
bit	O
more	O
powerful	O
(	O
can	O
also	O
handle	O
any	O
kind	O
of	O
TemporalField	O
provided	O
the	O
field	O
implementor	O
has	O
managed	O
to	O
code	O
some	O
extension	O
points	O
like	O
resolve	B-api_mention
(	I-api_mention
)	I-api_mention
)	O
.	O
Most	O
important	O
difference	O
is	O
however	O
-	O
in	O
my	O
opinion	O
:	O
JSR	O
-	O
310	O
can	O
much	O
better	O
parse	O
timezone	O
names	O
(	O
format	O
pattern	O
symbol	O
z	O
)	O
while	O
Joda	O
-	O
Time	O
could	O
not	O
do	O
this	O
at	O
all	O
in	O
its	O
earlier	O
versions	O
and	O
now	O
only	O
in	O
a	O
very	O
limited	O
way	O
.	O
Another	O
advantage	O
of	O
JSR	O
-	O
310	O
is	O
support	O
for	O
standalone	O
month	O
names	O
which	O
is	O
important	O
in	O
languages	O
like	O
Russian	O
or	O
Polish	O
etc	O
.	O
Joda	O
-	O
Time	O
has	O
no	O
access	O
to	O
such	O
resources	O
-	O
not	O
even	O
on	O
Java	O
-	O
8	O
platforms	O
.	O
The	O
pattern	O
syntax	O
in	O
JSR	O
-	O
310	O
is	O
also	O
more	O
flexible	O
than	O
in	O
Joda	O
-	O
Time	O
,	O
allows	O
for	O
optional	O
sections	O
(	O
using	O
square	O
brackets	O
)	O
,	O
is	O
more	O
orientated	O
towards	O
CLDR	O
-	O
standard	O
and	O
offers	O
padding	O
(	O
letter	O
symbol	O
p	O
)	O
and	O
more	O
fields	O
.	O
Otherwise	O
it	O
should	O
be	O
noted	O
that	O
Joda	O
-	O
Time	O
can	O
format	O
durations	O
using	O
PeriodFormatter	B-api_mention
.	O
JSR	O
-	O
310	O
cannot	O
do	O
this	O
.	O
Hope	O
this	O
overview	O
helps	O
.	O
All	O
the	O
gathered	O
information	O
is	O
mainly	O
there	O
due	O
to	O
my	O
efforts	O
and	O
investigations	O
how	O
to	O
design	O
and	O
implement	O
a	O
better	O
date	O
-	O
and	O
-	O
time	O
library	O
(	O
nothing	O
is	O
perfect	O
)	O
.	O
Update	O
from	O
2015	O
-	O
06	O
-	O
24	O
:	O
Meanwhile	O
I	O
have	O
found	O
the	O
time	O
to	O
write	O
and	O
publish	O
a	O
tabular	O
overview	O
for	O
different	O
time	O
libraries	O
in	O
Java	O
.	O
The	O
tables	O
also	O
contain	O
a	O
comparison	O
between	O
Joda	O
-	O
Time	O
v2	O
.	O
8	O
.	O
1	O
and	O
Java	O
-	O
8	O
(	O
JSR	O
-	O
310	O
)	O
.	O
It	O
is	O
more	O
detailed	O
than	O
this	O
post	O
.	O
Question	O
-	O
29494800	O
I	O
have	O
trouble	O
understanding	O
the	O
source	O
code	O
of	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
.	O
#	O
pre	O
#	O
li	O
what	O
is	O
this	O
line	O
checking	O
?	O
(	O
Object	B-api_mention
)	O
newType	O
=	O
=	O
(	O
Object	B-api_mention
)	O
Object	B-api_mention
[	O
]	O
.	O
class	O
#	O
li	O
What	O
are	O
the	O
differences	O
between	O
(	O
T	O
[	O
]	O
)	O
new	O
Object	B-api_mention
[	O
newLength	O
]	O
and	O
(	O
T	O
[	O
]	O
)	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
why	O
Array	B-api_mention
.	I-api_mention
newInstance	I-api_mention
not	O
good	O
enough	O
for	O
both	O
cases	O
?	O
#	O
li	O
This	O
following	O
line	O
compiles	O
,	O
but	O
crashes	O
at	O
run	O
time	O
(	O
as	O
expected	O
)	O
.	O
When	O
should	O
I	O
use	O
this	O
method	O
?	O
Integer	O
[	O
]	O
nums	O
=	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7353205	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
more	O
portable	O
way	O
.	O
exec	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
actually	O
calls	O
out	O
to	O
the	O
operating	O
system	O
to	O
execute	O
the	O
hostname	O
command	O
.	O
Here	O
are	O
a	O
couple	O
other	O
related	O
answers	O
on	O
SO	O
:	O
#	O
li	O
Java	O
current	O
machine	O
name	O
and	O
logged	O
in	O
user	O
?	O
#	O
li	O
Get	O
DNS	O
name	O
of	O
local	O
machine	O
as	O
seen	O
by	O
a	O
remote	O
machine	O
EDIT	O
:	O
You	O
should	O
take	O
a	O
look	O
at	O
A	O
.	O
H	O
.	O
'	O
s	O
answer	O
or	O
Arnout	O
Engelen	O
'	O
s	O
answer	O
for	O
details	O
on	O
why	O
this	O
might	O
not	O
work	O
as	O
expected	O
,	O
depending	O
on	O
your	O
situation	O
.	O
As	O
an	O
answer	O
for	O
this	O
person	O
who	O
specifically	O
requested	O
portable	O
,	O
I	O
still	O
think	O
getHostName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
fine	O
,	O
but	O
they	O
bring	O
up	O
some	O
good	O
points	O
that	O
should	O
be	O
considered	O
.	O
Question	O
-	O
31188231	O
,	O
answer	O
-	O
31190722	O
We	O
can	O
draw	O
a	O
parallel	O
with	O
abstract	O
class	O
.	O
An	O
abstract	O
class	O
is	O
intended	O
to	O
be	O
subclassed	O
so	O
that	O
the	O
abstract	O
methods	O
can	O
be	O
implemented	O
.	O
The	O
abstract	O
class	O
itself	O
contains	O
concrete	O
methods	O
that	O
invoke	O
the	O
abstract	O
methods	O
.	O
The	O
abstract	O
class	O
is	O
free	O
to	O
evolve	O
by	O
adding	O
more	O
concrete	O
methods	O
;	O
and	O
this	O
practice	O
may	O
break	O
subclasses	O
.	O
Therefore	O
the	O
exact	O
problem	O
you	O
described	O
existed	O
even	O
before	O
Java8	O
.	O
The	O
problem	O
is	O
much	O
more	O
manifested	O
on	O
Collection	B-api_mention
APIs	O
because	O
there	O
are	O
a	O
lot	O
of	O
subclasses	O
out	O
in	O
the	O
wild	O
.	O
While	O
the	O
leading	O
motivation	O
of	O
default	O
method	O
was	O
to	O
add	O
some	O
useful	O
methods	O
to	O
existing	O
Collection	B-api_mention
APIs	O
without	O
breaking	O
subclasses	O
,	O
they	O
had	O
to	O
exercise	O
great	O
self	O
-	O
control	O
of	O
doing	O
it	O
too	O
much	O
,	O
for	O
fear	O
of	O
breaking	O
subclasses	O
.	O
A	O
default	O
method	O
is	O
added	O
only	O
if	O
it	O
'	O
s	O
absolutely	O
necessary	O
.	O
The	O
real	O
question	O
here	O
is	O
,	O
why	O
List	B-api_mention
.	I-api_mention
sort	I-api_mention
is	O
considered	O
absolutely	O
necessary	O
.	O
I	O
think	O
that	O
is	O
debatable	O
.	O
Regardless	O
of	O
why	O
default	O
method	O
was	O
introduced	O
in	O
the	O
1st	O
place	O
,	O
it	O
is	O
now	O
a	O
great	O
tool	O
for	O
API	O
designers	O
,	O
and	O
we	O
ought	O
to	O
treat	O
it	O
the	O
same	O
as	O
concrete	O
methods	O
in	O
abstract	O
classes	O
-	O
they	O
need	O
to	O
be	O
designed	O
carefully	O
up	O
front	O
;	O
and	O
new	O
ones	O
must	O
be	O
introduced	O
with	O
great	O
caution	O
.	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
29938300	O
Use	O
this	O
method	O
,	O
but	O
be	O
careful	O
to	O
make	O
an	O
object	O
in	O
your	O
main	O
.	O
public	O
static	O
void	O
setName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
Class	B-api_mention
setClass	O
=	O
obj	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
String	B-api_mention
className	O
=	O
setClass	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
}	O
Question	O
-	O
13102045	O
,	O
answer	O
-	O
15046253	O
It	O
does	O
that	O
because	O
input	O
.	B-api_mention
nextInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
doesn	O
'	O
t	O
capture	O
the	O
newline	O
.	O
you	O
could	O
do	O
like	O
the	O
others	O
proposed	O
by	O
adding	O
an	O
input	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
underneath	O
.	O
Alternatively	O
you	O
can	O
do	O
it	O
C	O
#	O
style	O
and	O
parse	O
a	O
nextLine	B-api_mention
to	O
an	O
integer	O
like	O
so	O
:	O
int	O
number	O
=	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Doing	O
this	O
works	O
just	O
as	O
well	O
,	O
and	O
it	O
saves	O
you	O
a	O
line	O
of	O
code	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
5868454	O
You	O
need	O
to	O
use	O
the	O
readLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
class	O
BufferedReader	B-api_mention
.	O
Create	O
a	O
new	O
object	O
from	O
that	O
class	O
and	O
operate	O
this	O
method	O
on	O
him	O
and	O
save	O
it	O
to	O
a	O
string	O
.	O
BufferReader	B-api_mention
API	O
Question	O
-	O
13291076	O
If	O
you	O
look	O
in	O
the	O
enum	O
api	O
at	O
the	O
method	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
says	O
that	O
:	O
#	O
blockquote	O
Why	O
is	O
better	O
to	O
use	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
I	O
mean	O
toString	B-api_mention
may	O
be	O
overridden	O
when	O
name	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
already	O
final	O
.	O
So	O
if	O
you	O
use	O
toString	B-api_mention
and	O
someone	O
overrides	O
it	O
to	O
return	O
a	O
hard	O
-	O
coded	O
value	O
your	O
whole	O
application	O
is	O
down	O
.	O
.	O
.	O
Also	O
if	O
you	O
look	O
in	O
the	O
sources	O
the	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
returns	O
exactly	O
and	O
just	O
the	O
name	O
.	O
It	O
'	O
s	O
the	O
same	O
thing	O
.	O
Question	O
-	O
32334319	O
,	O
answer	O
-	O
32334651	O
The	O
API	O
guarantees	O
a	O
stable	O
sorting	O
which	O
Quicksort	O
doesn	O
’	O
t	O
offer	O
.	O
However	O
,	O
when	O
sorting	O
primitive	O
values	O
by	O
their	O
natural	O
order	O
you	O
won	O
’	O
t	O
notice	O
a	O
difference	O
as	O
primitive	O
values	O
have	O
no	O
identity	O
.	O
Therefore	O
,	O
Quicksort	O
is	O
used	O
for	O
primitive	O
arrays	O
as	O
it	O
is	O
slightly	O
more	O
efficient	O
.	O
For	O
objects	O
you	O
may	O
notice	O
,	O
when	O
objects	O
which	O
are	O
deemed	O
equal	O
according	O
to	O
their	O
equals	O
implementation	O
or	O
the	O
provided	O
Comparator	O
change	O
their	O
order	O
.	O
Therefore	O
,	O
Quicksort	O
is	O
not	O
an	O
option	O
.	O
So	O
a	O
variant	O
of	O
MergeSort	O
is	O
used	O
,	O
the	O
current	O
Java	O
versions	O
use	O
TimSort	O
.	O
This	O
applies	O
to	O
both	O
,	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
and	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
,	O
though	O
with	O
Java	O
8	O
,	O
the	O
List	B-api_mention
itself	O
may	O
override	O
the	O
sort	O
algorithms	O
.	O
Question	O
-	O
4772425	O
,	O
answer	O
-	O
18953213	O
remove	O
one	O
y	O
form	O
SimpleDateFormat	B-api_mention
dt1	O
=	O
new	O
SimpleDateFormat	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
should	O
be	O
SimpleDateFormat	B-api_mention
dt1	O
=	O
new	O
SimpleDateFormat	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
18448671	O
,	O
answer	O
-	O
18448699	O
Use	O
an	O
Iterator	B-api_mention
and	O
call	O
remove	B-api_mention
(	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
36875991	O
Basically	O
,	O
=	O
=	O
compares	O
if	O
two	O
objects	O
have	O
the	O
same	O
reference	O
on	O
the	O
heap	O
,	O
so	O
unless	O
two	O
references	O
are	O
linked	O
to	O
the	O
same	O
object	O
,	O
this	O
comparison	O
will	O
be	O
false	O
.	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
method	O
inherited	O
from	O
Object	B-api_mention
class	O
.	O
This	O
method	O
by	O
default	O
compares	O
if	O
two	O
objects	O
have	O
the	O
same	O
referece	O
.	O
It	O
means	O
:	O
object1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
<	O
=	O
>	O
object1	O
=	O
=	O
object2	O
However	O
,	O
if	O
you	O
want	O
to	O
establish	O
equality	O
between	O
two	O
objects	O
of	O
the	O
same	O
class	O
you	O
should	O
override	O
this	O
method	O
.	O
It	O
is	O
also	O
very	O
important	O
to	O
override	O
the	O
method	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
if	O
you	O
have	O
overriden	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Implement	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
establishing	O
equality	O
is	O
part	O
of	O
the	O
Java	O
Object	B-api_mention
Contract	O
.	O
If	O
you	O
are	O
working	O
with	O
collections	O
,	O
and	O
you	O
haven	O
'	O
t	O
implemented	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
Strange	O
Bad	O
Things	O
could	O
happen	O
:	O
#	O
pre	O
null	O
will	O
be	O
printed	O
after	O
executing	O
the	O
previous	O
code	O
if	O
you	O
haven	O
'	O
t	O
implemented	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
20001427	O
,	O
answer	O
-	O
22245383	O
:	O
:	O
is	O
called	O
Method	O
Reference	O
.	O
It	O
is	O
basically	O
a	O
reference	O
to	O
a	O
single	O
method	O
.	O
i	O
.	O
e	O
.	O
it	O
refers	O
to	O
an	O
existing	O
method	O
by	O
name	O
.	O
Short	O
Explanation	O
:	O
Below	O
is	O
an	O
example	O
of	O
a	O
reference	O
to	O
a	O
static	O
method	O
:	O
#	O
pre	O
square	O
can	O
be	O
passed	O
around	O
just	O
like	O
object	O
reference	O
'	O
s	O
and	O
trigger	O
when	O
at	O
need	O
.	O
In	O
fact	O
,	O
it	O
can	O
be	O
perfectly	O
used	O
as	O
a	O
reference	O
to	O
a	O
normal	O
method	O
of	O
an	O
object	O
and	O
not	O
just	O
static	O
ones	O
.	O
#	O
pre	O
Function	B-api_mention
above	O
is	O
a	O
functional	O
interface	O
.	O
Well	O
to	O
fully	O
explain	O
:	O
:	O
,	O
it	O
is	O
important	O
to	O
understand	O
Functional	O
Interface	O
.	O
Plainly	O
,	O
Function	O
interface	O
is	O
an	O
interface	O
with	O
just	O
one	O
abstract	O
method	O
.	O
For	O
example	O
:	O
Runnable	B-api_mention
,	O
Callable	B-api_mention
,	O
ActionListener	B-api_mention
and	O
so	O
.	O
Function	B-api_mention
above	O
is	O
a	O
functional	O
interface	O
with	O
just	O
one	O
method	O
apply	O
.	O
It	O
takes	O
one	O
argument	O
and	O
produces	O
a	O
result	O
.	O
The	O
reason	O
why	O
:	O
:	O
are	O
awesome	O
is	O
because	O
:	O
#	O
blockquote	O
i	O
.	O
e	O
.	O
Just	O
like	O
writing	O
lambda	O
body	O
:	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
square	O
=	O
(	O
Double	B-api_mention
x	O
)	O
-	O
>	O
x	O
*	O
x	O
;	O
You	O
can	O
simply	O
do	O
:	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
square	O
=	O
Hey	O
:	O
:	O
square	O
;	O
At	O
runtime	O
they	O
behave	O
exactly	O
the	O
same	O
.	O
The	O
bytecode	O
may	O
/	O
not	O
be	O
the	O
same	O
(	O
For	O
above	O
case	O
,	O
it	O
generates	O
the	O
same	O
bytecode	O
(	O
compile	O
above	O
and	O
check	O
javap	O
-	O
c	O
)	O
)	O
The	O
only	O
major	O
criteria	O
to	O
satisfy	O
is	O
:	O
the	O
method	O
you	O
provide	O
should	O
have	O
a	O
similar	O
signature	O
to	O
method	O
of	O
the	O
FunctionalInterface	B-api_mention
you	O
use	O
as	O
object	O
reference	O
.	O
Below	O
is	O
illegal	O
Supplier	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
p	O
=	O
Hey	O
:	O
:	O
square	O
;	O
/	O
/	O
illegal	O
square	O
expects	O
an	O
argument	O
and	O
returns	O
a	O
double	O
.	O
get	O
method	O
in	O
Supplier	B-api_mention
expects	O
an	O
argument	O
but	O
doesn	O
'	O
t	O
return	O
anything	O
.	O
So	O
it	O
is	O
an	O
error	O
.	O
Method	O
Reference	O
refers	O
to	O
a	O
method	O
of	O
the	O
functional	O
interface	O
(	O
As	O
mentioned	O
,	O
functional	O
interface	O
can	O
only	O
have	O
one	O
method	O
)	O
.	O
Some	O
more	O
examples	O
:	O
accept	O
method	O
in	O
Consumer	B-api_mention
takes	O
an	O
input	O
but	O
doesnt	O
return	O
anything	O
.	O
#	O
pre	O
Above	O
getRandom	O
takes	O
no	O
argument	O
and	O
returns	O
a	O
double	O
.	O
So	O
any	O
functional	O
interface	O
that	O
satisfies	O
the	O
criteria	O
of	O
:	O
take	O
no	O
argument	O
and	O
return	O
double	O
can	O
be	O
used	O
.	O
Another	O
example	O
:	O
#	O
pre	O
In	O
case	O
of	O
Parametrized	O
Types	O
:	O
#	O
pre	O
Method	O
Reference	O
can	O
be	O
obtained	O
in	O
different	O
styles	O
,	O
but	O
fundamentally	O
they	O
all	O
mean	O
the	O
same	O
and	O
can	O
simply	O
be	O
visualized	O
as	O
a	O
lambda	O
:	O
#	O
li	O
A	O
static	O
method	O
(	O
ClassName	O
:	O
:	O
methName	O
)	O
#	O
li	O
An	O
instance	O
method	O
of	O
a	O
particular	O
object	O
(	O
instanceRef	O
:	O
:	O
methName	O
)	O
#	O
li	O
A	O
super	O
method	O
of	O
a	O
particular	O
object	O
(	O
super	O
:	O
:	O
methName	O
)	O
#	O
li	O
An	O
instance	O
method	O
of	O
an	O
arbitrary	O
object	O
of	O
a	O
particular	O
type	O
(	O
ClassName	O
:	O
:	O
methName	O
)	O
#	O
li	O
A	O
class	O
constructor	O
reference	O
(	O
ClassName	O
:	O
:	O
new	O
)	O
#	O
li	O
An	O
array	O
constructor	O
reference	O
(	O
TypeName	O
[	O
]	O
:	O
:	O
new	O
)	O
For	O
further	O
reference	O
:	O
#	O
a	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846943	O
It	O
is	O
,	O
in	O
my	O
personal	O
experience	O
admittedly	O
,	O
very	O
useful	O
in	O
cases	O
where	O
an	O
API	O
requires	O
a	O
collection	O
of	O
parameters	O
,	O
but	O
you	O
have	O
nothing	O
to	O
provide	O
.	O
For	O
example	O
you	O
may	O
have	O
an	O
API	O
that	O
looks	O
something	O
like	O
this	O
,	O
and	O
does	O
not	O
allow	O
null	O
references	O
:	O
public	O
ResultSet	B-api_mention
executeQuery	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
have	O
a	O
query	O
that	O
doesn	O
'	O
t	O
take	O
any	O
parameters	O
,	O
it	O
'	O
s	O
certainly	O
a	O
bit	O
wasteful	O
to	O
create	O
a	O
HashMap	B-api_mention
,	O
which	O
involves	O
allocating	O
an	O
array	O
,	O
when	O
you	O
could	O
just	O
pass	O
in	O
the	O
'	O
Empty	O
Map	O
'	O
which	O
is	O
effectively	O
a	O
constant	O
,	O
the	O
way	O
it	O
'	O
s	O
implemented	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collections	I-api_mention
.	O
Question	O
-	O
16324831	O
Why	O
do	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
null	I-api_mention
)	I-api_mention
and	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
null	I-api_mention
)	I-api_mention
throw	O
different	O
exceptions	O
?	O
Is	O
this	O
a	O
historical	O
accident	O
or	O
intentional	O
?	O
The	O
documentation	O
clearly	O
states	O
two	O
types	O
of	O
exceptions	O
for	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
and	O
one	O
for	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
but	O
it	O
seems	O
inconsistent	O
:	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
throws	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
NumberFormatException	I-api_mention
:	O
null	O
However	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
throws	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
NullPointerException	I-api_mention
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20945268	O
In	O
Java	O
,	O
if	O
two	O
string	O
primitive	O
variables	O
are	O
initialized	O
to	O
the	O
same	O
literal	O
,	O
it	O
assigns	O
the	O
same	O
reference	O
to	O
both	O
variables	O
:	O
#	O
pre	O
#	O
blockquote	O
That	O
is	O
the	O
reason	O
the	O
comparison	O
returns	O
true	O
.	O
The	O
third	O
string	O
is	O
created	O
using	O
substring	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
makes	O
a	O
new	O
string	O
instead	O
of	O
pointing	O
to	O
the	O
same	O
.	O
#	O
blockquote	O
When	O
you	O
access	O
a	O
string	O
using	O
reflection	O
,	O
you	O
get	O
the	O
actual	O
pointer	O
:	O
#	O
pre	O
So	O
change	O
to	O
this	O
will	O
change	O
the	O
string	O
holding	O
a	O
pointer	O
to	O
it	O
,	O
but	O
as	O
s3	O
is	O
created	O
with	O
a	O
new	O
string	O
due	O
to	O
substring	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
would	O
not	O
change	O
.	O
#	O
blockquote	O
Question	O
-	O
32714194	O
,	O
answer	O
-	O
32714537	O
While	O
currently	O
most	O
of	O
Java	O
compilers	O
using	O
StringBuilder	B-api_mention
chain	O
,	O
it	O
'	O
s	O
not	O
specified	O
that	O
it	O
should	O
be	O
always	O
in	O
this	O
way	O
.	O
In	O
particular	O
there	O
'	O
s	O
a	O
proposal	O
to	O
change	O
this	O
drastically	O
in	O
Java	O
-	O
9	O
replacing	O
with	O
single	O
invokedynamic	O
call	O
and	O
introduce	O
new	O
metafactory	O
which	O
will	O
generate	O
an	O
appropriate	O
MethodHandle	O
in	O
runtime	O
to	O
perform	O
concatenation	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
33375616	O
Most	O
of	O
these	O
answers	O
miss	O
the	O
big	O
picture	O
,	O
which	O
is	O
that	O
,	O
as	O
far	O
as	O
the	O
Java	O
language	O
is	O
concerned	O
,	O
there	O
is	O
no	O
more	O
difference	O
between	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
than	O
there	O
is	O
between	O
any	O
other	O
two	O
methods	O
.	O
They	O
'	O
re	O
both	O
just	O
methods	O
.	O
They	O
both	O
run	O
in	O
the	O
thread	O
that	O
called	O
them	O
.	O
They	O
both	O
do	O
whatever	O
they	O
were	O
coded	O
to	O
do	O
,	O
and	O
then	O
they	O
both	O
return	O
,	O
still	O
in	O
the	O
same	O
thread	O
,	O
to	O
their	O
callers	O
.	O
The	O
biggest	O
difference	O
is	O
that	O
most	O
of	O
the	O
code	O
for	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
native	O
code	O
while	O
,	O
in	O
most	O
cases	O
,	O
the	O
code	O
for	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
going	O
to	O
be	O
pure	O
Java	O
.	O
But	O
that	O
'	O
s	O
not	O
much	O
of	O
a	O
difference	O
.	O
Code	O
is	O
code	O
.	O
Native	O
code	O
is	O
harder	O
to	O
find	O
,	O
and	O
harder	O
to	O
understand	O
when	O
you	O
find	O
it	O
,	O
but	O
it	O
'	O
s	O
still	O
just	O
code	O
that	O
tells	O
the	O
computer	O
what	O
to	O
do	O
.	O
So	O
,	O
what	O
does	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
do	O
?	O
It	O
creates	O
a	O
new	O
native	O
thread	O
,	O
it	O
arranges	O
for	O
that	O
thread	O
to	O
call	O
t	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
then	O
it	O
tells	O
the	O
OS	O
to	O
let	O
the	O
new	O
thread	O
run	O
.	O
Then	O
it	O
returns	O
.	O
And	O
what	O
does	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
do	O
?	O
The	O
funny	O
thing	O
is	O
,	O
the	O
person	O
asking	O
this	O
question	O
is	O
the	O
person	O
who	O
wrote	O
it	O
.	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
whatever	O
you	O
(	O
i	O
.	O
e	O
.	O
,	O
the	O
developer	O
who	O
wrote	O
it	O
)	O
designed	O
it	O
to	O
do	O
.	O
t	O
.	B-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
method	O
that	O
the	O
library	O
provides	O
for	O
your	O
code	O
to	O
call	O
when	O
you	O
want	O
a	O
new	O
thread	O
.	O
r	O
.	B-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
method	O
that	O
you	O
provide	O
for	O
the	O
library	O
to	O
call	O
in	O
the	O
new	O
thread	O
.	O
Question	O
-	O
6094575	O
,	O
answer	O
-	O
6094602	O
Yes	O
,	O
something	O
like	O
:	O
#	O
pre	O
That	O
will	O
only	O
work	O
for	O
a	O
single	O
string	O
parameter	O
of	O
course	O
,	O
but	O
you	O
can	O
modify	O
it	O
pretty	O
easily	O
.	O
Note	O
that	O
the	O
class	O
name	O
has	O
to	O
be	O
a	O
fully	O
-	O
qualified	O
one	O
,	O
i	O
.	O
e	O
.	O
including	O
the	O
namespace	O
.	O
For	O
nested	O
classes	O
,	O
you	O
need	O
to	O
use	O
a	O
dollar	O
(	O
as	O
that	O
'	O
s	O
what	O
the	O
compiler	O
uses	O
)	O
.	O
For	O
example	O
:	O
#	O
pre	O
To	O
obtain	O
the	O
Class	B-api_mention
object	O
for	O
that	O
,	O
you	O
'	O
d	O
need	O
Class	B-api_mention
.	I-api_mention
forName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
22694884	O
,	O
answer	O
-	O
39385411	O
As	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
uses	O
a	O
throwing	O
merger	O
to	O
handle	O
multiple	O
entries	O
with	O
the	O
same	O
key	O
it	O
is	O
easy	O
:	O
#	O
pre	O
You	O
will	O
get	O
a	O
IllegalStateException	B-api_mention
for	O
duplicate	O
keys	O
.	O
But	O
at	O
the	O
end	O
I	O
am	O
not	O
sure	O
if	O
the	O
code	O
would	O
not	O
be	O
even	O
more	O
readable	O
using	O
an	O
if	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26886202	O
You	O
are	O
performing	O
multiple	O
search	O
-	O
replace	O
operations	O
on	O
the	O
input	O
.	O
This	O
will	O
produce	O
undesired	O
results	O
when	O
the	O
replacement	O
strings	O
contain	O
search	O
strings	O
.	O
Consider	O
the	O
foo	O
-	O
>	O
bar	O
,	O
bar	O
-	O
foo	O
example	O
,	O
here	O
are	O
the	O
results	O
for	O
each	O
iteration	O
:	O
#	O
li	O
Once	O
upon	O
a	O
time	O
,	O
there	O
was	O
a	O
foo	O
and	O
a	O
bar	O
.	O
(	O
input	O
)	O
#	O
li	O
Once	O
upon	O
a	O
time	O
,	O
there	O
was	O
a	O
bar	O
and	O
a	O
bar	O
.	O
(	O
foo	O
-	O
>	O
bar	O
)	O
#	O
li	O
Once	O
upon	O
a	O
time	O
,	O
there	O
was	O
a	O
foo	O
and	O
a	O
foo	O
.	O
(	O
bar	O
-	O
>	O
foo	O
,	O
output	O
)	O
You	O
need	O
to	O
perform	O
the	O
replacement	O
in	O
one	O
iteration	O
without	O
going	O
back	O
.	O
A	O
brute	O
-	O
force	O
solution	O
is	O
as	O
follows	O
:	O
#	O
li	O
Search	O
the	O
input	O
from	O
current	O
position	O
to	O
end	O
for	O
multiple	O
search	O
strings	O
until	O
a	O
match	O
is	O
found	O
#	O
li	O
Replace	O
the	O
matched	O
search	O
string	O
with	O
corresponding	O
replace	O
string	O
#	O
li	O
Set	O
current	O
position	O
to	O
the	O
next	O
character	O
after	O
the	O
replaced	O
string	O
#	O
li	O
Repeat	O
A	O
function	O
such	O
as	O
String	B-api_mention
.	I-api_mention
indexOfAny	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
>	O
int	O
[	O
]	O
{	O
index	O
,	O
whichString	O
}	O
would	O
be	O
useful	O
.	O
Here	O
is	O
an	O
example	O
(	O
not	O
the	O
most	O
efficient	O
one	O
)	O
:	O
#	O
pre	O
Some	O
tests	O
:	O
#	O
pre	O
Demo	O
on	O
IDEONE	O
Demo	O
on	O
IDEONE	O
,	O
alternate	O
code	O
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056821	O
Documentation	O
:	O
For	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
It	O
will	O
simply	O
return	O
the	O
entire	O
string	O
that	O
'	O
s	O
why	O
it	O
returns	O
1	O
.	O
For	O
the	O
second	O
case	O
,	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
will	O
discard	O
the	O
,	O
so	O
the	O
result	O
will	O
be	O
empty	O
.	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
silently	O
discards	O
trailing	O
separators	O
see	O
guava	O
StringsExplained	B-api_mention
too	O
Question	O
-	O
20746429	O
,	O
answer	O
-	O
20765715	O
Such	O
an	O
operation	O
ought	O
to	O
be	O
possible	O
with	O
a	O
Java	O
8	O
Stream	B-api_mention
,	O
but	O
it	O
can	O
'	O
t	O
necessarily	O
be	O
done	O
efficiently	O
-	O
-	O
for	O
example	O
,	O
you	O
can	O
'	O
t	O
necessarily	O
parallelize	O
such	O
an	O
operation	O
,	O
as	O
you	O
have	O
to	O
look	O
at	O
elements	O
in	O
order	O
.	O
The	O
API	O
doesn	O
'	O
t	O
provide	O
an	O
easy	O
way	O
to	O
do	O
it	O
,	O
but	O
what	O
'	O
s	O
probably	O
the	O
simplest	O
way	O
is	O
to	O
take	O
Stream	B-api_mention
.	I-api_mention
iterator	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
wrap	O
the	O
Iterator	O
to	O
have	O
a	O
"	O
take	O
-	O
while	O
"	O
implementation	O
,	O
and	O
then	O
go	O
back	O
to	O
a	O
Spliterator	B-api_mention
and	O
then	O
a	O
Stream	B-api_mention
.	O
Or	O
-	O
-	O
maybe	O
-	O
-	O
wrap	O
the	O
Spliterator	B-api_mention
,	O
though	O
it	O
can	O
'	O
t	O
really	O
be	O
split	O
anymore	O
in	O
this	O
implementation	O
.	O
Here	O
'	O
s	O
an	O
untested	O
implementation	O
of	O
takeWhile	O
on	O
a	O
Spliterator	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
31419029	O
,	O
answer	O
-	O
31419077	O
If	O
you	O
look	O
at	O
the	O
implementation	O
of	O
HashMap	B-api_mention
,	O
the	O
constructor	O
looks	O
like	O
:	O
#	O
pre	O
And	O
init	O
(	O
args	O
)	O
looks	O
like	O
:	O
#	O
pre	O
So	O
initialCapacity	O
doesn	O
'	O
t	O
actually	O
get	O
used	O
to	O
create	O
an	O
array	O
.	O
Where	O
does	O
it	O
get	O
used	O
?	O
Look	O
at	O
the	O
put	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
pre	O
When	O
doing	O
a	O
put	O
,	O
the	O
array	O
is	O
actually	O
created	O
.	O
I	O
didn	O
'	O
t	O
show	O
inflateTable	O
(	O
args	O
)	O
but	O
it	O
does	O
some	O
math	O
and	O
initializes	O
the	O
array	O
.	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
8172444	O
Try	O
this	O
:	O
Character	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
just	O
this	O
:	O
aChar	O
+	O
StringLiteral	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29099896	O
This	O
is	O
a	O
very	O
interesting	O
problem	O
.	O
I	O
came	O
up	O
with	O
a	O
one	O
line	O
solution	O
.	O
It	O
might	O
not	O
very	O
performant	O
but	O
it	O
works	O
.	O
#	O
pre	O
It	O
is	O
a	O
similar	O
idea	O
that	O
@	O
Rohit	O
Jain	O
came	O
up	O
with	O
.	O
I	O
'	O
m	O
grouping	O
the	O
space	O
between	O
the	O
null	O
values	O
.	O
If	O
you	O
really	O
want	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
you	O
may	O
append	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ll	O
=	O
cl	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
27482579	O
How	O
is	O
the	O
compiler	O
not	O
complaining	O
when	O
I	O
write	O
the	O
following	O
code	O
?	O
#	O
pre	O
Even	O
though	O
it	O
is	O
an	O
instance	O
of	O
the	O
same	O
class	O
in	O
which	O
testPrivate	O
is	O
written	O
,	O
shouldn	O
'	O
t	O
it	O
give	O
a	O
compilation	O
error	O
at	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
After	O
all	O
,	O
I	O
am	O
trying	O
to	O
access	O
a	O
private	O
variable	O
directly	O
.	O
The	O
code	O
even	O
runs	O
fine	O
.	O
Question	O
-	O
22182669	O
,	O
answer	O
-	O
22223113	O
The	O
most	O
common	O
cause	O
of	O
StackOverFlowError	B-api_mention
is	O
excessively	O
deep	O
or	O
infinite	O
recursion	O
.	O
For	O
instance	O
:	O
#	O
pre	O
In	O
Java	O
:	O
There	O
are	O
two	O
areas	O
in	O
memory	O
the	O
heap	O
and	O
stack	O
.	O
The	O
stack	O
memory	O
is	O
used	O
to	O
store	O
local	O
variables	O
and	O
function	O
call	O
,	O
while	O
heap	O
memory	O
is	O
used	O
to	O
store	O
objects	O
in	O
Java	O
.	O
If	O
there	O
is	O
no	O
memory	O
left	O
in	O
stack	O
for	O
storing	O
function	O
call	O
or	O
local	O
variable	O
,	O
JVM	O
will	O
throw	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
StackOverFlowError	I-api_mention
while	O
if	O
there	O
is	O
no	O
more	O
heap	O
space	O
for	O
creating	O
object	O
,	O
JVM	O
will	O
throw	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
OutOfMemoryError	I-api_mention
Question	O
-	O
5455794	O
I	O
have	O
a	O
string	O
like	O
this	O
:	O
mysz	O
=	O
StringLiteral	O
;	O
I	O
want	O
to	O
remove	O
the	O
whitespaces	O
in	O
the	O
string	O
.	O
I	O
tried	O
trim	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
this	O
removes	O
only	O
whitespaces	O
before	O
and	O
after	O
the	O
whole	O
string	O
.	O
I	O
also	O
tried	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
then	O
the	O
=	O
also	O
gets	O
removed	O
.	O
How	O
can	O
I	O
achieve	O
a	O
string	O
with	O
:	O
mysz2	O
=	O
StringLiteral	O
Question	O
-	O
22561614	O
,	O
answer	O
-	O
22561690	O
Comparator	O
is	O
a	O
functional	O
interface	O
,	O
and	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
max	I-api_mention
complies	O
with	O
that	O
interface	O
(	O
after	O
autoboxing	O
/	O
unboxing	O
is	O
taken	O
into	O
consideration	O
)	O
.	O
It	O
takes	O
two	O
int	O
values	O
and	O
returns	O
an	O
int	O
-	O
just	O
as	O
you	O
'	O
d	O
expect	O
a	O
Comparator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
(	O
again	O
,	O
squinting	O
to	O
ignore	O
the	O
Integer	B-api_mention
/	O
int	O
difference	O
)	O
.	O
However	O
,	O
I	O
wouldn	O
'	O
t	O
expect	O
it	O
to	O
do	O
the	O
right	O
thing	O
,	O
given	O
that	O
Integer	B-api_mention
.	I-api_mention
max	I-api_mention
doesn	O
'	O
t	O
comply	O
with	O
the	O
semantics	O
of	O
Comparator	B-api_mention
.	I-api_mention
compare	I-api_mention
.	O
And	O
indeed	O
it	O
doesn	O
'	O
t	O
really	O
work	O
in	O
general	O
.	O
For	O
example	O
,	O
make	O
one	O
small	O
change	O
:	O
#	O
pre	O
.	O
.	O
.	O
and	O
now	O
the	O
max	O
value	O
is	O
-	O
20	O
and	O
the	O
min	O
value	O
is	O
-	O
1	O
.	O
Instead	O
,	O
both	O
calls	O
should	O
use	O
Integer	B-api_mention
:	I-api_mention
:	I-api_mention
compare	I-api_mention
:	O
#	O
pre	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14513598	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
is	O
not	O
much	O
different	O
,	O
a	O
basic	O
LCG	O
described	O
by	O
Knuth	O
.	O
However	O
it	O
has	O
main	O
2	O
main	O
advantages	O
/	O
differences	O
:	O
#	O
li	O
thread	O
safe	O
-	O
each	O
update	O
is	O
a	O
CAS	O
which	O
is	O
more	O
expensive	O
than	O
a	O
simple	O
write	O
and	O
needs	O
a	O
branch	O
(	O
even	O
if	O
perfectly	O
predicted	O
single	O
threaded	O
)	O
.	O
Depending	O
on	O
the	O
CPU	O
it	O
could	O
be	O
significant	O
difference	O
.	O
#	O
li	O
undisclosed	O
internal	O
state	O
-	O
this	O
is	O
very	O
important	O
for	O
anything	O
non	O
-	O
trivial	O
.	O
You	O
wish	O
the	O
random	O
numbers	O
not	O
to	O
be	O
predictable	O
.	O
Below	O
it	O
'	O
s	O
the	O
main	O
routine	O
generating	O
'	O
random	O
'	O
integers	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Random	I-api_mention
.	O
#	O
pre	O
If	O
you	O
remove	O
the	O
AtomicLong	B-api_mention
and	O
the	O
undisclosed	O
sate	O
(	O
i	O
.	O
e	O
.	O
using	O
all	O
bits	O
of	O
the	O
long	O
)	O
,	O
you	O
'	O
d	O
get	O
more	O
performance	O
than	O
the	O
double	O
multiplication	O
/	O
modulo	O
.	O
Last	O
note	O
:	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
should	O
not	O
be	O
used	O
for	O
anything	O
but	O
simple	O
tests	O
,	O
it	O
'	O
s	O
prone	O
to	O
contention	O
and	O
if	O
you	O
have	O
even	O
a	O
couple	O
of	O
threads	O
calling	O
it	O
concurrently	O
the	O
performance	O
degrades	O
.	O
One	O
little	O
known	O
historical	O
feature	O
of	O
it	O
is	O
the	O
introduction	O
of	O
CAS	O
in	O
java	O
-	O
to	O
beat	O
an	O
infamous	O
benchmark	O
(	O
first	O
by	O
IBM	O
via	O
intrinsics	O
and	O
then	O
Sun	O
made	O
"	O
CAS	O
from	O
Java	O
"	O
)	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
30270403	O
There	O
is	O
a	O
function	O
called	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
that	O
can	O
remove	O
all	O
whitespaces	O
by	O
replacing	O
them	O
with	O
whatever	O
you	O
want	O
.	O
As	O
an	O
example	O
#	O
pre	O
will	O
give	O
you	O
:	O
First	O
:	O
15	O
.	O
94	O
,	O
Second	O
:	O
16	O
.	O
01	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818753	O
There	O
are	O
two	O
main	O
uses	O
of	O
AtomicInteger	B-api_mention
:	O
#	O
li	O
As	O
an	O
atomic	O
counter	O
(	O
incrementAndGet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
etc	O
)	O
that	O
can	O
be	O
used	O
by	O
many	O
threads	O
concurrently	O
#	O
li	O
As	O
a	O
primitive	O
that	O
supports	O
compare	O
-	O
and	O
-	O
swap	O
instruction	O
(	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
to	O
implement	O
non	O
-	O
blocking	O
algorithms	O
.	O
Here	O
is	O
an	O
example	O
of	O
non	O
-	O
blocking	O
random	O
number	O
generator	O
from	O
Brian	O
G	O
ö	O
etz	O
'	O
s	O
Java	O
Concurrency	O
In	O
Practice	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
it	O
basically	O
works	O
almost	O
the	O
same	O
way	O
as	O
incrementAndGet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
performs	O
arbitrary	O
calculation	O
(	O
calculateNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
instead	O
of	O
increment	O
(	O
and	O
processes	O
the	O
result	O
before	O
return	O
)	O
.	O
Question	O
-	O
8881291	O
In	O
Swing	O
,	O
the	O
password	O
field	O
has	O
a	O
getPassword	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
returns	O
char	O
[	O
]	O
)	O
method	O
instead	O
of	O
the	O
usual	O
getText	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
returns	O
String	B-api_mention
)	O
method	O
.	O
Similarly	O
,	O
I	O
have	O
come	O
across	O
a	O
suggestion	O
not	O
to	O
use	O
String	B-api_mention
to	O
handle	O
passwords	O
.	O
Why	O
does	O
String	B-api_mention
pose	O
a	O
threat	O
to	O
security	O
when	O
it	O
comes	O
to	O
passwords	O
?	O
It	O
feels	O
inconvenient	O
to	O
use	O
char	O
[	O
]	O
.	O
Question	O
-	O
32820722	O
,	O
answer	O
-	O
32820984	O
Let	O
'	O
s	O
rewrite	O
that	O
lambda	O
expression	O
with	O
parentheses	O
to	O
make	O
it	O
more	O
clear	O
:	O
IntFunction	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
curriedAdd	O
=	O
a	O
-	O
>	O
(	O
b	O
-	O
>	O
(	O
a	O
+	O
b	O
)	O
)	O
;	O
So	O
we	O
are	O
declaring	O
a	O
function	O
taking	O
an	O
int	O
which	O
returns	O
a	O
Function	B-api_mention
.	O
More	O
specifically	O
,	O
the	O
function	O
returned	O
takes	O
an	O
int	O
and	O
returns	O
an	O
int	O
(	O
the	O
sum	O
of	O
the	O
two	O
elements	O
)	O
:	O
this	O
can	O
be	O
represented	O
as	O
an	O
IntUnaryOperator	O
.	O
Therefore	O
,	O
curriedAdd	O
is	O
a	O
function	O
taking	O
an	O
int	O
and	O
returning	O
an	O
IntUnaryOperator	O
,	O
so	O
it	O
can	O
be	O
represented	O
as	O
IntFunction	B-api_mention
<	I-api_mention
IntUnaryOperator	I-api_mention
>	I-api_mention
.	O
Question	O
-	O
6608795	O
,	O
answer	O
-	O
20069798	O
All	O
these	O
answers	O
around	O
here	O
,	O
as	O
well	O
as	O
the	O
answers	O
in	O
this	O
question	O
,	O
suggest	O
that	O
loading	O
absolute	O
URLs	O
,	O
like	O
"	O
/	O
foo	O
/	O
bar	O
.	O
properties	O
"	O
treated	O
the	O
same	O
by	O
class	O
.	B-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
class	O
.	B-api_mention
getClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
NOT	O
the	O
case	O
,	O
at	O
least	O
not	O
in	O
my	O
Tomcat	O
configuration	O
/	O
version	O
(	O
currently	O
7	O
.	O
0	O
.	O
40	O
)	O
.	O
#	O
pre	O
Sorry	O
,	O
I	O
have	O
absolutely	O
no	O
satisfying	O
explanation	O
,	O
but	O
I	O
guess	O
that	O
tomcat	O
does	O
dirty	O
tricks	O
and	O
his	O
black	O
magic	O
with	O
the	O
classloaders	O
and	O
cause	O
the	O
difference	O
.	O
I	O
always	O
used	O
class	O
.	B-api_mention
getResourceAsStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
the	O
past	O
and	O
haven	O
'	O
t	O
had	O
any	O
problems	O
.	O
PS	O
:	O
I	O
also	O
posted	O
this	O
over	O
here	O
Question	O
-	O
20375176	O
,	O
answer	O
-	O
20375622	O
A	O
parallel	O
stream	O
has	O
a	O
much	O
higher	O
overhead	O
compared	O
to	O
a	O
sequential	O
one	O
.	O
Coordinating	O
the	O
threads	O
takes	O
a	O
significant	O
amount	O
of	O
time	O
.	O
I	O
would	O
use	O
sequential	O
streams	O
by	O
default	O
and	O
only	O
consider	O
parallel	O
ones	O
if	O
#	O
li	O
I	O
have	O
a	O
massive	O
amount	O
of	O
items	O
to	O
process	O
(	O
or	O
the	O
processing	O
of	O
each	O
item	O
takes	O
time	O
and	O
is	O
parallelizable	O
)	O
#	O
li	O
I	O
have	O
a	O
performance	O
problem	O
in	O
the	O
first	O
place	O
#	O
li	O
I	O
don	O
'	O
t	O
already	O
run	O
the	O
process	O
in	O
a	O
multi	O
-	O
thread	O
environment	O
(	O
for	O
example	O
:	O
in	O
a	O
web	O
container	O
,	O
if	O
I	O
already	O
have	O
many	O
requests	O
to	O
process	O
in	O
parallel	O
,	O
adding	O
an	O
additional	O
layer	O
of	O
parallelism	O
inside	O
each	O
request	O
could	O
have	O
more	O
negative	O
than	O
positive	O
effects	O
)	O
In	O
your	O
example	O
,	O
the	O
performance	O
will	O
anyway	O
be	O
driven	O
by	O
the	O
synchronized	O
access	O
to	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
and	O
making	O
this	O
process	O
parallel	O
will	O
have	O
no	O
effect	O
,	O
or	O
even	O
a	O
negative	O
one	O
.	O
Moreover	O
,	O
remember	O
that	O
parallel	O
streams	O
don	O
'	O
t	O
magically	O
solve	O
all	O
the	O
synchronization	O
problems	O
.	O
If	O
a	O
shared	O
resource	O
is	O
used	O
by	O
the	O
predicates	O
and	O
functions	O
used	O
in	O
the	O
process	O
,	O
you	O
'	O
ll	O
have	O
to	O
make	O
sure	O
that	O
everything	O
is	O
thread	O
-	O
safe	O
.	O
In	O
particular	O
,	O
side	O
effects	O
are	O
tings	O
you	O
really	O
have	O
to	O
worry	O
about	O
if	O
you	O
go	O
parallel	O
.	O
In	O
any	O
case	O
,	O
measure	O
,	O
don	O
'	O
t	O
guess	O
!	O
Only	O
a	O
measurement	O
will	O
tell	O
you	O
if	O
the	O
parallelism	O
is	O
worth	O
it	O
or	O
not	O
.	O
Question	O
-	O
24649842	O
,	O
answer	O
-	O
24649939	O
Try	O
adding	O
a	O
Thread	B-api_mention
.	I-api_mention
sleep	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
within	O
your	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
.	O
.	O
Basically	O
it	O
'	O
s	O
the	O
difference	O
between	O
scheduling	O
something	O
based	O
on	O
when	O
the	O
previous	O
execution	O
ends	O
and	O
when	O
it	O
(	O
logically	O
)	O
starts	O
.	O
For	O
example	O
,	O
suppose	O
I	O
schedule	O
an	O
alarm	O
to	O
go	O
off	O
with	O
a	O
fixed	O
rate	O
of	O
once	O
an	O
hour	O
,	O
and	O
every	O
time	O
it	O
goes	O
off	O
,	O
I	O
have	O
a	O
cup	O
of	O
coffee	O
,	O
which	O
takes	O
10	O
minutes	O
.	O
Suppose	O
that	O
starts	O
at	O
midnight	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
If	O
I	O
schedule	O
with	O
a	O
fixed	O
delay	O
of	O
one	O
hour	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
Which	O
one	O
you	O
want	O
depends	O
on	O
your	O
task	O
.	O
Question	O
-	O
27625611	O
,	O
answer	O
-	O
27625722	O
Because	O
nextDouble	B-api_mention
works	O
like	O
this	O
:	O
(	O
source	O
)	O
#	O
pre	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
makes	O
x	O
random	O
bits	O
.	O
Now	O
why	O
does	O
this	O
matter	O
?	O
Because	O
about	O
half	O
the	O
numbers	O
generated	O
by	O
the	O
first	O
part	O
(	O
before	O
the	O
division	O
)	O
are	O
less	O
than	O
1L	O
<	O
<	O
52	O
,	O
and	O
therefore	O
their	O
significand	O
doesn	O
'	O
t	O
entirely	O
fill	O
the	O
53	O
bits	O
that	O
it	O
could	O
fill	O
,	O
meaning	O
the	O
least	O
significant	O
bit	O
of	O
the	O
significand	O
is	O
always	O
zero	O
for	O
those	O
.	O
Because	O
of	O
the	O
amount	O
of	O
attention	O
this	O
is	O
receiving	O
,	O
here	O
'	O
s	O
some	O
extra	O
explanation	O
of	O
what	O
a	O
double	O
in	O
Java	O
(	O
and	O
many	O
other	O
languages	O
)	O
really	O
looks	O
like	O
and	O
why	O
it	O
mattered	O
in	O
this	O
question	O
.	O
Basically	O
,	O
a	O
double	O
looks	O
like	O
this	O
:	O
(	O
source	O
)	O
#	O
img	O
A	O
very	O
important	O
detail	O
not	O
visible	O
in	O
this	O
picture	O
is	O
that	O
numbers	O
are	O
"	O
normalized	O
"	O
1	O
such	O
that	O
the	O
53	O
bit	O
fraction	O
starts	O
with	O
a	O
1	O
(	O
by	O
choosing	O
the	O
exponent	O
such	O
that	O
it	O
is	O
so	O
)	O
,	O
that	O
1	O
is	O
then	O
omitted	O
.	O
That	O
is	O
why	O
the	O
picture	O
shows	O
52	O
bits	O
for	O
the	O
fraction	O
(	O
significand	O
)	O
but	O
there	O
are	O
effectively	O
53	O
bits	O
in	O
it	O
.	O
The	O
normalization	O
means	O
that	O
if	O
in	O
the	O
code	O
for	O
nextDouble	B-api_mention
the	O
53rd	O
bit	O
is	O
set	O
,	O
that	O
bit	O
is	O
the	O
implicit	O
leading	O
1	O
and	O
it	O
goes	O
away	O
,	O
and	O
the	O
other	O
52	O
bits	O
are	O
copied	O
literally	O
to	O
the	O
significand	O
of	O
the	O
resulting	O
double	O
.	O
If	O
that	O
bit	O
is	O
not	O
set	O
however	O
,	O
the	O
remaining	O
bits	O
must	O
be	O
shifted	O
left	O
until	O
it	O
becomes	O
set	O
.	O
On	O
average	O
,	O
half	O
the	O
generated	O
numbers	O
fall	O
into	O
the	O
case	O
where	O
the	O
significand	O
was	O
not	O
shifted	O
left	O
at	O
all	O
(	O
and	O
about	O
half	O
those	O
have	O
a	O
0	O
as	O
their	O
least	O
significant	O
bit	O
)	O
,	O
and	O
the	O
other	O
half	O
is	O
shifted	O
by	O
at	O
least	O
1	O
(	O
or	O
is	O
just	O
completely	O
zero	O
)	O
so	O
their	O
least	O
significant	O
bit	O
is	O
always	O
0	O
.	O
1	O
:	O
not	O
always	O
,	O
clearly	O
it	O
cannot	O
be	O
done	O
for	O
zero	O
,	O
which	O
has	O
no	O
highest	O
1	O
.	O
These	O
numbers	O
are	O
called	O
denormal	O
or	O
subnormal	O
numbers	O
,	O
see	O
wikipedia	O
:	O
denormal	O
number	O
.	O
Question	O
-	O
24651403	O
,	O
answer	O
-	O
24651855	O
OK	O
,	O
first	O
of	O
all	O
,	O
your	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
will	O
not	O
work	O
as	O
intended	O
,	O
chained	O
if	O
-	O
elseif	O
will	O
maximally	O
execute	O
1	O
branch	O
of	O
code	O
,	O
for	O
example	O
:	O
#	O
pre	O
Even	O
if	O
e	O
contains	O
both	O
N	O
and	O
W	O
,	O
only	O
bexits	O
[	O
0	O
]	O
will	O
be	O
set	O
.	O
Also	O
this	O
method	O
will	O
only	O
add	O
exits	O
(	O
for	O
example	O
calling	O
setExits	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
not	O
delete	O
any	O
existing	O
exits	O
.	O
I	O
would	O
change	O
that	O
method	O
to	O
:	O
#	O
pre	O
Also	O
,	O
i	O
definetly	O
wouldn	O
'	O
t	O
remember	O
that	O
north	O
is	O
on	O
index	O
0	O
,	O
west	O
in	O
on	O
1	O
,	O
.	O
.	O
.	O
so	O
a	O
common	O
practice	O
is	O
to	O
name	O
your	O
indexes	O
using	O
final	O
static	O
constants	O
:	O
#	O
pre	O
Then	O
you	O
can	O
write	O
in	O
your	O
setExits	B-api_mention
method	O
:	O
#	O
pre	O
(	O
much	O
more	O
readible	O
)	O
Finally	O
,	O
if	O
you	O
want	O
your	O
code	O
even	O
more	O
well	O
-	O
arranged	O
,	O
you	O
can	O
make	O
a	O
Exits	B-api_mention
class	O
representing	O
avaliable	O
exits	O
,	O
and	O
backed	O
by	O
boolean	O
array	O
.	O
Then	O
on	O
place	O
where	O
you	O
create	O
your	O
String	B-api_mention
,	O
you	O
could	O
create	O
this	O
class	O
instead	O
and	O
save	O
yourself	O
work	O
with	O
generating	O
and	O
then	O
parsing	O
a	O
string	O
.	O
EDIT	O
:	O
as	O
@	O
gexicide	O
answers	O
,	O
there	O
is	O
a	O
really	O
handy	O
class	O
EnumSet	B-api_mention
which	O
would	O
be	O
probably	O
better	O
for	O
representing	O
the	O
exits	O
than	O
bollean	O
array	O
.	O
Question	O
-	O
19757300	O
,	O
answer	O
-	O
19759653	O
You	O
can	O
also	O
propagate	O
your	O
static	O
pain	O
with	O
lambdas	O
,	O
so	O
the	O
whole	O
thing	O
looks	O
readable	O
:	O
s	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
propagate	O
here	O
receives	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
concurrent	I-api_mention
.	I-api_mention
Callable	I-api_mention
as	O
a	O
parameter	O
and	O
converts	O
any	O
exception	O
caught	O
during	O
the	O
call	O
into	O
RuntimeException	B-api_mention
.	O
There	O
is	O
a	O
similar	O
conversion	O
method	O
Throwables	B-api_mention
#	I-api_mention
propagate	I-api_mention
(	I-api_mention
Throwable	I-api_mention
)	I-api_mention
in	O
Guava	O
.	O
This	O
method	O
seems	O
being	O
essential	O
for	O
lambda	O
method	O
chaining	O
,	O
so	O
I	O
hope	O
one	O
day	O
it	O
will	O
be	O
added	O
to	O
one	O
of	O
the	O
popular	O
libs	O
or	O
this	O
propagating	O
behavior	O
would	O
be	O
by	O
default	O
.	O
#	O
pre	O
Question	O
-	O
11821801	O
,	O
answer	O
-	O
11821900	O
A	O
ReentrantLock	B-api_mention
is	O
unstructured	O
,	O
unlike	O
synchronized	O
constructs	O
-	O
-	O
i	O
.	O
e	O
.	O
you	O
don	O
'	O
t	O
need	O
to	O
use	O
a	O
block	O
structure	O
for	O
locking	O
and	O
can	O
even	O
hold	O
a	O
lock	O
across	O
methods	O
.	O
An	O
example	O
:	O
#	O
pre	O
Such	O
flow	O
is	O
impossible	O
to	O
represent	O
via	O
a	O
single	O
monitor	O
in	O
a	O
synchronized	B-api_mention
construct	O
.	O
Aside	O
from	O
that	O
,	O
ReentrantLock	B-api_mention
supports	O
lock	O
polling	O
and	O
interruptible	O
lock	O
waits	O
that	O
support	O
time	O
-	O
out	O
.	O
ReentrantLock	B-api_mention
also	O
has	O
support	O
for	O
configurable	O
fairness	O
policy	O
,	O
allowing	O
more	O
flexible	O
thread	O
scheduling	O
.	O
#	O
blockquote	O
ReentrantLock	B-api_mention
may	O
also	O
be	O
more	O
scalable	O
,	O
performing	O
much	O
better	O
under	O
higher	O
contention	O
.	O
You	O
can	O
read	O
more	O
about	O
this	O
here	O
.	O
This	O
claim	O
has	O
been	O
contested	O
,	O
however	O
;	O
see	O
the	O
following	O
comment	O
:	O
#	O
blockquote	O
When	O
should	O
you	O
use	O
ReentrantLock	B-api_mention
s	O
?	O
According	O
to	O
that	O
developerWorks	O
article	O
.	O
.	O
.	O
#	O
blockquote	O
Question	O
-	O
15336477	O
,	O
answer	O
-	O
32364785	O
Examples	O
from	O
Apache	O
(	O
link	O
)	O
use	O
this	O
:	O
HttpClient	B-api_mention
httpclient	O
=	O
HttpClients	B-api_mention
.	I-api_mention
createDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
class	O
org	B-api_mention
.	I-api_mention
apache	I-api_mention
.	I-api_mention
http	I-api_mention
.	I-api_mention
impl	I-api_mention
.	I-api_mention
client	I-api_mention
.	I-api_mention
HttpClients	I-api_mention
is	O
there	O
since	O
version	O
4	O
.	O
3	O
.	O
The	O
code	O
for	O
HttpClients	B-api_mention
.	I-api_mention
createDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
same	O
as	O
the	O
accepted	O
answer	O
in	O
here	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
20593147	O
In	O
Java	O
8	O
,	O
you	O
could	O
do	O
:	O
#	O
pre	O
Some	O
notes	O
:	O
The	O
stream	O
returned	O
by	O
Files	B-api_mention
.	I-api_mention
lines	I-api_mention
(	O
unlike	O
most	O
streams	O
)	O
needs	O
to	O
be	O
closed	O
.	O
For	O
the	O
reasons	O
mentioned	O
here	O
I	O
avoid	O
using	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
strange	O
code	O
(	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
lines	B-api_mention
:	I-api_mention
:	I-api_mention
iterator	I-api_mention
casts	O
a	O
Stream	B-api_mention
to	O
an	O
Iterable	B-api_mention
.	O
Question	O
-	O
31202946	O
Why	O
was	O
the	O
Thread	B-api_mention
class	O
implemented	O
as	O
a	O
regular	O
class	O
and	O
not	O
an	O
abstract	O
class	O
with	O
run	O
(	O
args	O
)	O
method	O
being	O
abstract	O
.	O
Will	O
it	O
possibly	O
introduce	O
any	O
problems	O
?	O
Or	O
does	O
it	O
have	O
any	O
use	O
in	O
being	O
this	O
way	O
?	O
Also	O
,	O
the	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
supposed	O
to	O
be	O
a	O
very	O
specific	O
method	O
whose	O
functionality	O
cannot	O
be	O
implemented	O
by	O
any	O
other	O
class	O
(	O
If	O
I	O
am	O
not	O
wrong	O
)	O
.	O
And	O
hence	O
I	O
guess	O
the	O
final	O
keyword	O
would	O
be	O
apt	O
for	O
this	O
more	O
than	O
any	O
other	O
method	O
.	O
But	O
I	O
am	O
able	O
to	O
override	O
this	O
method	O
and	O
use	O
it	O
as	O
I	O
like	O
,	O
#	O
pre	O
It	O
obviously	O
only	O
printed	O
,	O
#	O
blockquote	O
Is	O
there	O
any	O
use	O
in	O
overriding	O
other	O
than	O
confusing	O
the	O
engineer	O
replacing	O
you	O
?	O
If	O
not	O
,	O
why	O
was	O
the	O
method	O
not	O
declared	O
final	O
in	O
Thread	B-api_mention
class	O
?	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
6684935	O
If	O
you	O
want	O
to	O
convert	O
the	O
string	O
back	O
into	O
a	O
byte	O
array	O
you	O
will	O
need	O
to	O
use	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
or	O
equivalent	O
Python	O
function	O
)	O
and	O
this	O
will	O
allow	O
you	O
print	O
out	O
the	O
original	O
byte	O
array	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
18481387	O
If	O
you	O
code	O
in	O
Android	O
,	O
there	O
is	O
SparseArray	B-api_mention
,	O
mapping	O
integer	O
to	O
object	O
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723651	O
Println	O
(	O
args	O
)	O
uses	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
Print	O
(	O
args	O
)	O
does	O
null	O
check	O
.	O
#	O
pre	O
Question	O
-	O
5243754	O
,	O
answer	O
-	O
5243798	O
#	O
li	O
getParameter	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
http	O
request	O
parameters	O
.	O
Those	O
passed	O
from	O
the	O
client	O
to	O
the	O
server	O
.	O
For	O
example	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
servlet	O
?	O
parameter	O
=	O
1	O
.	O
Can	O
only	O
return	O
String	B-api_mention
#	O
li	O
getAttribute	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
for	O
server	O
-	O
side	O
usage	O
only	O
-	O
you	O
fill	O
the	O
request	O
with	O
attributes	O
that	O
you	O
can	O
use	O
within	O
the	O
same	O
request	O
.	O
For	O
example	O
-	O
you	O
set	O
an	O
attribute	O
in	O
a	O
servlet	O
,	O
and	O
read	O
it	O
from	O
a	O
JSP	O
.	O
Can	O
be	O
used	O
for	O
any	O
object	O
,	O
not	O
just	O
string	O
.	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23885950	O
Short	O
answer	O
:	O
#	O
pre	O
Explanation	O
:	O
(	O
based	O
on	O
this	O
question	O
about	O
LocalDate	B-api_mention
)	O
Despite	O
its	O
name	O
,	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
represents	O
an	O
instant	O
on	O
the	O
time	O
-	O
line	O
,	O
not	O
a	O
"	O
date	O
"	O
.	O
The	O
actual	O
data	O
stored	O
within	O
the	O
object	O
is	O
a	O
long	O
count	O
of	O
milliseconds	O
since	O
1970	O
-	O
01	O
-	O
01T00	O
:	O
00Z	O
(	O
midnight	O
at	O
the	O
start	O
of	O
1970	O
GMT	O
/	O
UTC	O
)	O
.	O
The	O
equivalent	O
class	O
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
in	O
JSR	O
-	O
310	O
is	O
Instant	B-api_mention
,	O
thus	O
there	O
are	O
convenient	O
methods	O
to	O
provide	O
the	O
conversion	O
to	O
and	O
fro	O
:	O
#	O
pre	O
A	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
instance	O
has	O
no	O
concept	O
of	O
time	O
-	O
zone	O
.	O
This	O
might	O
seem	O
strange	O
if	O
you	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
,	O
because	O
the	O
toString	B-api_mention
is	O
relative	O
to	O
a	O
time	O
-	O
zone	O
.	O
However	O
that	O
method	O
actually	O
uses	O
Java	O
'	O
s	O
default	O
time	O
-	O
zone	O
on	O
the	O
fly	O
to	O
provide	O
the	O
string	O
.	O
The	O
time	O
-	O
zone	O
is	O
not	O
part	O
of	O
the	O
actual	O
state	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
.	O
An	O
Instant	O
also	O
does	O
not	O
contain	O
any	O
information	O
about	O
the	O
time	O
-	O
zone	O
.	O
Thus	O
,	O
to	O
convert	O
from	O
an	O
Instant	O
to	O
a	O
local	O
date	O
-	O
time	O
it	O
is	O
necessary	O
to	O
specify	O
a	O
time	O
-	O
zone	O
.	O
This	O
might	O
be	O
the	O
default	O
zone	O
-	O
ZoneId	B-api_mention
.	I-api_mention
systemDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
or	O
it	O
might	O
be	O
a	O
time	O
-	O
zone	O
that	O
your	O
application	O
controls	O
,	O
such	O
as	O
a	O
time	O
-	O
zone	O
from	O
user	O
preferences	O
.	O
LocalDateTime	B-api_mention
has	O
a	O
convenient	O
factory	O
method	O
that	O
takes	O
both	O
the	O
instant	O
and	O
time	O
-	O
zone	O
:	O
#	O
pre	O
In	O
reverse	O
,	O
the	O
LocalDateTime	B-api_mention
the	O
time	O
-	O
zone	O
is	O
specified	O
by	O
calling	O
the	O
atZone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
ZonedDateTime	B-api_mention
can	O
then	O
be	O
converted	O
directly	O
to	O
an	O
Instant	B-api_mention
:	O
#	O
pre	O
Note	O
that	O
the	O
conversion	O
from	O
LocalDateTime	B-api_mention
to	O
ZonedDateTime	B-api_mention
has	O
the	O
potential	O
to	O
introduce	O
unexpected	O
behaviour	O
.	O
This	O
is	O
because	O
not	O
every	O
local	O
date	O
-	O
time	O
exists	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
In	O
autumn	O
/	O
fall	O
,	O
there	O
is	O
an	O
overlap	O
in	O
the	O
local	O
time	O
-	O
line	O
where	O
the	O
same	O
local	O
date	O
-	O
time	O
occurs	O
twice	O
.	O
In	O
spring	O
,	O
there	O
is	O
a	O
gap	O
,	O
where	O
an	O
hour	O
disappears	O
.	O
See	O
the	O
Javadoc	O
of	O
atZone	B-api_mention
(	I-api_mention
ZoneId	I-api_mention
)	I-api_mention
for	O
more	O
the	O
definition	O
of	O
what	O
the	O
conversion	O
will	O
do	O
.	O
Summary	O
,	O
if	O
you	O
round	O
-	O
trip	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
to	O
a	O
LocalDateTime	B-api_mention
and	O
back	O
to	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
you	O
may	O
end	O
up	O
with	O
a	O
different	O
instant	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28323553	O
One	O
of	O
the	O
main	O
benefits	O
of	O
using	O
streams	O
is	O
that	O
it	O
gives	O
the	O
ability	O
to	O
process	O
data	O
in	O
a	O
declarative	O
way	O
,	O
that	O
is	O
,	O
using	O
a	O
functional	O
style	O
of	O
programming	O
.	O
It	O
also	O
gives	O
multi	O
-	O
threading	O
capability	O
for	O
free	O
meaning	O
there	O
is	O
no	O
need	O
to	O
write	O
any	O
extra	O
multi	O
-	O
threaded	O
code	O
to	O
make	O
your	O
stream	O
concurrent	O
.	O
Assuming	O
the	O
reason	O
you	O
are	O
exploring	O
this	O
style	O
of	O
programming	O
is	O
that	O
you	O
want	O
to	O
exploit	O
these	O
benefits	O
then	O
your	O
first	O
code	O
sample	O
is	O
potentially	O
not	O
functional	O
since	O
the	O
foreach	O
method	O
is	O
classed	O
as	O
being	O
terminal	O
(	O
meaning	O
that	O
it	O
can	O
produce	O
side	O
-	O
effects	O
)	O
.	O
The	O
second	O
way	O
is	O
preferred	O
from	O
functional	O
programming	O
point	O
of	O
view	O
since	O
the	O
map	O
function	O
can	O
accept	O
stateless	O
lambda	O
functions	O
.	O
More	O
explicitly	O
,	O
the	O
lambda	O
passed	O
to	O
the	O
map	O
function	O
should	O
be	O
#	O
li	O
Non	O
-	O
interfering	O
,	O
meaning	O
that	O
the	O
function	O
should	O
not	O
alter	O
the	O
source	O
of	O
the	O
stream	O
if	O
it	O
is	O
non	O
-	O
concurrent	O
(	O
e	O
.	O
g	O
.	O
ArrayList	B-api_mention
)	O
.	O
#	O
li	O
Stateless	O
to	O
avoid	O
unexpected	O
results	O
when	O
doing	O
parallel	O
processing	O
(	O
caused	O
by	O
thread	O
scheduling	O
differences	O
)	O
.	O
Another	O
benefit	O
with	O
the	O
second	O
approach	O
is	O
if	O
the	O
stream	O
is	O
parallel	O
and	O
the	O
collector	O
is	O
concurrent	O
and	O
unordered	O
then	O
these	O
characteristics	O
can	O
provide	O
useful	O
hints	O
to	O
the	O
reduction	O
operation	O
to	O
do	O
the	O
collecting	O
concurrently	O
.	O
Question	O
-	O
18532488	O
In	O
many	O
other	O
languages	O
,	O
eg	O
.	O
Haskell	O
,	O
it	O
is	O
easy	O
to	O
repeat	O
a	O
value	O
or	O
function	O
multiple	O
times	O
,	O
eg	O
.	O
to	O
get	O
a	O
list	O
of	O
8	O
copies	O
of	O
the	O
value	O
1	O
:	O
take	O
8	O
(	O
args	O
)	O
but	O
I	O
haven	O
'	O
t	O
found	O
this	O
yet	O
in	O
Java	O
8	O
.	O
Is	O
there	O
such	O
a	O
function	O
in	O
Java	O
8	O
'	O
s	O
JDK	O
?	O
Or	O
alternatively	O
something	O
equivalent	O
to	O
a	O
range	O
like	O
[	O
1	O
.	O
.	O
8	O
]	O
It	O
would	O
seem	O
an	O
obvious	O
replacement	O
for	O
a	O
verbose	O
statement	O
in	O
Java	O
like	O
#	O
pre	O
to	O
have	O
something	O
like	O
Range	B-api_mention
.	I-api_mention
from	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
this	O
particular	O
example	O
doesn	O
'	O
t	O
look	O
much	O
more	O
concise	O
actually	O
.	O
.	O
.	O
but	O
hopefully	O
it	O
'	O
s	O
more	O
readable	O
.	O
Question	O
-	O
24630963	O
The	O
Java	O
8	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
throws	O
a	O
NullPointerException	B-api_mention
if	O
one	O
of	O
the	O
values	O
is	O
'	O
null	O
'	O
.	O
I	O
don	O
'	O
t	O
understand	O
this	O
behaviour	O
,	O
maps	O
can	O
contain	O
null	O
pointers	O
as	O
value	O
without	O
any	O
problems	O
.	O
Is	O
there	O
a	O
good	O
reason	O
why	O
values	O
cannot	O
be	O
null	O
for	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
?	O
Also	O
,	O
is	O
there	O
a	O
nice	O
Java	O
8	O
way	O
of	O
fixing	O
this	O
,	O
or	O
should	O
I	O
revert	O
to	O
plain	O
old	O
for	O
loop	O
?	O
An	O
example	O
of	O
my	O
problem	O
:	O
#	O
pre	O
Stacktrace	O
:	O
#	O
pre	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33148103	O
Looking	O
at	O
the	O
code	O
:	O
int	O
newCapacity	O
=	O
oldCapacity	O
+	O
(	O
oldCapacity	O
>	O
>	O
1	O
)	O
;	O
If	O
oldCapacity	O
is	O
quite	O
large	O
,	O
this	O
will	O
overflow	O
,	O
and	O
newCapacity	O
will	O
be	O
a	O
negative	O
number	O
.	O
A	O
comparison	O
like	O
newCapacity	O
<	O
oldCapacity	O
will	O
incorrectly	O
evaluate	O
true	O
and	O
the	O
ArrayList	B-api_mention
will	O
fail	O
to	O
grow	O
.	O
Instead	O
,	O
the	O
code	O
as	O
written	O
(	O
newCapacity	O
-	O
minCapacity	O
<	O
0	O
returns	O
false	O
)	O
will	O
allow	O
the	O
negative	O
value	O
of	O
newCapacity	O
to	O
be	O
further	O
evaluated	O
in	O
the	O
next	O
line	O
,	O
resulting	O
in	O
recalculating	O
newCapacity	O
by	O
invoking	O
hugeCapacity	O
(	O
newCapacity	O
=	O
hugeCapacity	O
(	O
args	O
)	O
;	O
)	O
to	O
allow	O
for	O
the	O
ArrayList	B-api_mention
to	O
grow	O
up	O
to	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
.	O
This	O
is	O
what	O
the	O
/	O
/	O
overflow	O
-	O
conscious	O
code	O
comment	O
is	O
trying	O
to	O
communicate	O
,	O
though	O
rather	O
obliquely	O
.	O
So	O
,	O
bottom	O
line	O
,	O
the	O
new	O
comparison	O
protects	O
against	O
allocating	O
an	O
ArrayList	B-api_mention
larger	O
than	O
the	O
predefined	O
MAX	O
_	O
ARRAY	O
_	O
SIZE	O
while	O
allowing	O
it	O
to	O
grow	O
right	O
up	O
to	O
that	O
limit	O
if	O
needed	O
.	O
Question	O
-	O
22435833	O
,	O
answer	O
-	O
22497858	O
The	O
answer	O
from	O
skiwi	O
covered	O
many	O
of	O
the	O
major	O
points	O
already	O
.	O
I	O
'	O
ll	O
fill	O
in	O
a	O
bit	O
more	O
background	O
.	O
The	O
design	O
of	O
any	O
API	O
is	O
a	O
series	O
of	O
tradeoffs	O
.	O
In	O
Java	O
,	O
one	O
of	O
the	O
difficult	O
issues	O
is	O
dealing	O
with	O
design	O
decisions	O
that	O
were	O
made	O
long	O
ago	O
.	O
Primitives	O
have	O
been	O
in	O
Java	O
since	O
1	O
.	O
0	O
.	O
They	O
make	O
Java	O
an	O
"	O
impure	O
"	O
object	O
-	O
oriented	O
language	O
,	O
since	O
the	O
primitives	O
are	O
not	O
objects	O
.	O
The	O
addition	O
of	O
primitives	O
was	O
,	O
I	O
believe	O
,	O
a	O
pragmatic	O
decision	O
to	O
improve	O
performance	O
at	O
the	O
expense	O
of	O
object	O
-	O
oriented	O
purity	O
.	O
This	O
is	O
a	O
tradeoff	O
we	O
'	O
re	O
still	O
living	O
with	O
today	O
,	O
nearly	O
20	O
years	O
later	O
.	O
The	O
autoboxing	O
feature	O
added	O
in	O
Java	O
5	O
mostly	O
eliminated	O
the	O
need	O
to	O
clutter	O
source	O
code	O
with	O
boxing	O
and	O
unboxing	O
method	O
calls	O
,	O
but	O
the	O
overhead	O
is	O
still	O
there	O
.	O
In	O
many	O
cases	O
it	O
'	O
s	O
not	O
noticeable	O
.	O
However	O
,	O
if	O
you	O
were	O
to	O
perform	O
boxing	O
or	O
unboxing	O
within	O
an	O
inner	O
loop	O
,	O
you	O
'	O
d	O
see	O
that	O
it	O
can	O
impose	O
significant	O
CPU	O
and	O
garbage	O
collection	O
overhead	O
.	O
When	O
designing	O
the	O
Streams	B-api_mention
API	O
,	O
it	O
was	O
clear	O
that	O
we	O
had	O
to	O
support	O
primitives	O
.	O
The	O
boxing	O
/	O
unboxing	O
overhead	O
would	O
kill	O
any	O
performance	O
benefit	O
from	O
parallelism	O
.	O
We	O
didn	O
'	O
t	O
want	O
to	O
support	O
all	O
of	O
the	O
primitives	O
,	O
though	O
,	O
since	O
that	O
would	O
have	O
added	O
a	O
huge	O
amount	O
of	O
clutter	O
to	O
the	O
API	O
.	O
(	O
Can	O
you	O
really	O
see	O
a	O
use	O
for	O
a	O
ShortStream	B-api_mention
?	O
)	O
"	O
All	O
"	O
or	O
"	O
none	O
"	O
are	O
comfortable	O
places	O
for	O
a	O
design	O
to	O
be	O
,	O
yet	O
neither	O
was	O
acceptable	O
.	O
So	O
we	O
had	O
to	O
find	O
a	O
reasonable	O
value	O
of	O
"	O
some	O
"	O
.	O
We	O
ended	O
up	O
with	O
primitive	O
specializations	O
for	O
int	O
,	O
long	O
,	O
and	O
double	O
.	O
(	O
Personally	O
I	O
would	O
have	O
left	O
out	O
int	O
but	O
that	O
'	O
s	O
just	O
me	O
.	O
)	O
For	O
CharSequence	B-api_mention
.	I-api_mention
chars	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
we	O
considered	O
returning	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	O
an	O
early	O
prototype	O
might	O
have	O
implemented	O
this	O
)	O
but	O
it	O
was	O
rejected	O
because	O
of	O
boxing	O
overhead	O
.	O
Considering	O
that	O
a	O
String	B-api_mention
has	O
char	O
values	O
as	O
primitives	O
,	O
it	O
would	O
seem	O
to	O
be	O
a	O
mistake	O
to	O
impose	O
boxing	O
unconditionally	O
when	O
the	O
caller	O
would	O
probably	O
just	O
do	O
a	O
bit	O
of	O
processing	O
on	O
the	O
value	O
and	O
unbox	O
it	O
right	O
back	O
into	O
a	O
string	O
.	O
We	O
also	O
considered	O
a	O
CharStream	B-api_mention
primitive	O
specialization	O
,	O
but	O
its	O
use	O
would	O
seem	O
to	O
be	O
quite	O
narrow	O
compared	O
to	O
the	O
amount	O
of	O
bulk	O
it	O
would	O
add	O
to	O
the	O
API	O
.	O
It	O
didn	O
'	O
t	O
seem	O
worthwhile	O
to	O
add	O
it	O
.	O
The	O
penalty	O
this	O
imposes	O
on	O
callers	O
is	O
that	O
they	O
have	O
to	O
know	O
that	O
the	O
IntStream	B-api_mention
contains	O
char	O
values	O
represented	O
as	O
ints	O
and	O
that	O
casting	O
must	O
be	O
done	O
at	O
the	O
proper	O
place	O
.	O
This	O
is	O
doubly	O
confusing	O
because	O
there	O
are	O
overloaded	O
API	O
calls	O
like	O
PrintStream	B-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
PrintStream	B-api_mention
.	I-api_mention
print	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
that	O
differ	O
markedly	O
in	O
their	O
behavior	O
.	O
An	O
additional	O
point	O
of	O
confusion	O
possibly	O
arises	O
because	O
the	O
codePoints	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
also	O
returns	O
an	O
IntStream	B-api_mention
but	O
the	O
values	O
it	O
contains	O
are	O
quite	O
different	O
.	O
So	O
,	O
this	O
boils	O
down	O
to	O
choosing	O
pragmatically	O
among	O
several	O
alternatives	O
:	O
#	O
li	O
We	O
could	O
provide	O
no	O
primitive	O
specializations	O
,	O
resulting	O
in	O
a	O
simple	O
,	O
elegant	O
,	O
consistent	O
API	O
,	O
but	O
which	O
imposes	O
a	O
high	O
performance	O
and	O
GC	O
overhead	O
;	O
#	O
li	O
we	O
could	O
provide	O
a	O
complete	O
set	O
of	O
primitive	O
specializations	O
,	O
at	O
the	O
cost	O
of	O
cluttering	O
up	O
the	O
API	O
and	O
imposing	O
a	O
maintenance	O
burden	O
on	O
JDK	O
developers	O
;	O
or	O
#	O
li	O
we	O
could	O
provide	O
a	O
subset	O
of	O
primitive	O
specializations	O
,	O
giving	O
a	O
moderately	O
sized	O
,	O
high	O
performing	O
API	O
that	O
imposes	O
a	O
relatively	O
small	O
burden	O
on	O
callers	O
in	O
a	O
fairly	O
narrow	O
range	O
of	O
use	O
cases	O
(	O
char	O
processing	O
)	O
.	O
We	O
chose	O
the	O
last	O
one	O
.	O
Question	O
-	O
10827872	O
,	O
answer	O
-	O
10827900	O
In	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
the	O
replace	O
method	O
either	O
takes	O
a	O
pair	O
of	O
char	O
'	O
s	O
or	O
a	O
pair	O
of	O
CharSequence	B-api_mention
'	O
s	O
(	O
of	O
which	O
String	O
is	O
a	O
subclass	O
,	O
so	O
it	O
'	O
ll	O
happily	O
take	O
a	O
pair	O
of	O
String	O
'	O
s	O
)	O
.	O
The	O
replace	O
method	O
will	O
replace	O
all	O
occurrences	O
of	O
a	O
char	O
or	O
CharSequence	B-api_mention
.	O
On	O
the	O
other	O
hand	O
,	O
both	O
String	O
arguments	O
to	O
replaceFirst	B-api_mention
and	O
replaceAll	B-api_mention
are	O
regular	O
expressions	O
(	O
regex	O
)	O
.	O
Using	O
the	O
wrong	O
function	O
can	O
lead	O
to	O
subtle	O
bugs	O
.	O
Question	O
-	O
6840803	O
,	O
answer	O
-	O
6840856	O
SimpleDateFormat	B-api_mention
stores	O
intermediate	O
results	O
in	O
instance	O
fields	O
.	O
So	O
if	O
one	O
instance	O
is	O
used	O
by	O
two	O
threads	O
they	O
can	O
mess	O
each	O
other	O
'	O
s	O
results	O
.	O
Looking	O
at	O
the	O
source	O
code	O
reveals	O
that	O
there	O
is	O
a	O
Calendar	B-api_mention
instance	O
field	O
,	O
which	O
is	O
used	O
by	O
operations	O
on	O
DateFormat	B-api_mention
/	O
SimpleDateFormat	B-api_mention
For	O
example	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
calls	O
calendar	O
.	B-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
initially	O
and	O
then	O
calendar	O
.	B-api_mention
add	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
another	O
thread	O
invokes	O
parse	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
before	O
the	O
completion	O
of	O
the	O
first	O
invocation	O
,	O
it	O
will	O
clear	O
the	O
calendar	O
,	O
but	O
the	O
other	O
invocation	O
will	O
expect	O
it	O
to	O
be	O
populated	O
with	O
intermediate	O
results	O
of	O
the	O
calculation	O
.	O
One	O
way	O
to	O
reuse	O
date	O
formats	O
without	O
trading	O
thread	O
-	O
safety	O
is	O
to	O
put	O
them	O
in	O
a	O
ThreadLocal	B-api_mention
-	O
some	O
libraries	O
do	O
that	O
.	O
That	O
'	O
s	O
if	O
you	O
need	O
to	O
use	O
the	O
same	O
format	O
multiple	O
times	O
within	O
one	O
thread	O
.	O
But	O
in	O
case	O
you	O
are	O
using	O
a	O
servlet	O
container	O
(	O
that	O
has	O
a	O
thread	O
pool	O
)	O
,	O
remember	O
to	O
clean	O
the	O
thread	O
-	O
local	O
after	O
you	O
finish	O
.	O
To	O
be	O
honest	O
,	O
I	O
don	O
'	O
t	O
understand	O
why	O
they	O
need	O
the	O
instance	O
field	O
,	O
but	O
that	O
'	O
s	O
the	O
way	O
it	O
is	O
.	O
You	O
can	O
also	O
use	O
joda	O
-	O
time	O
DateTimeFormat	B-api_mention
which	O
is	O
threadsafe	O
.	O
Question	O
-	O
23114015	O
,	O
answer	O
-	O
23177907	O
This	O
was	O
not	O
an	O
omission	O
;	O
there	O
was	O
detailed	O
discussion	O
on	O
the	O
EG	O
list	O
in	O
June	O
of	O
2013	O
.	O
The	O
definitive	O
discussion	O
of	O
the	O
Expert	O
Group	O
is	O
rooted	O
at	O
this	O
thread	O
.	O
While	O
it	O
seemed	O
"	O
obvious	O
"	O
(	O
even	O
to	O
the	O
Expert	O
Group	O
,	O
initially	O
)	O
that	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
seemed	O
to	O
make	O
sense	O
on	O
Iterable	B-api_mention
,	O
the	O
fact	O
that	O
Iterable	B-api_mention
was	O
so	O
general	O
became	O
a	O
problem	O
,	O
because	O
the	O
obvious	O
signature	O
:	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
not	O
always	O
what	O
you	O
were	O
going	O
to	O
want	O
.	O
Some	O
things	O
that	O
were	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
would	O
rather	O
have	O
their	O
stream	O
method	O
return	O
an	O
IntStream	B-api_mention
,	O
for	O
example	O
.	O
But	O
putting	O
the	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
this	O
high	O
up	O
in	O
the	O
hierarchy	O
would	O
make	O
that	O
impossible	O
.	O
So	O
instead	O
,	O
we	O
made	O
it	O
really	O
easy	O
to	O
make	O
a	O
Stream	B-api_mention
from	O
an	O
Iterable	B-api_mention
,	O
by	O
providing	O
a	O
spliterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
implementation	O
of	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
Collection	B-api_mention
is	O
just	O
:	O
#	O
pre	O
Any	O
client	O
can	O
get	O
the	O
stream	O
they	O
want	O
from	O
an	O
Iterable	O
with	O
:	O
Stream	B-api_mention
s	O
=	O
StreamSupport	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
In	O
the	O
end	O
we	O
concluded	O
that	O
adding	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
Iterable	O
would	O
be	O
a	O
mistake	O
.	O
Question	O
-	O
15156857	O
,	O
answer	O
-	O
15157021	O
You	O
must	O
use	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
methodReturningVoid	O
(	O
args	O
)	O
;	O
and	O
not	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
explained	O
in	O
the	O
documentation	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888447	O
You	O
can	O
use	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
E	O
.	O
g	O
.	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
can	O
also	O
use	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
as	O
mentioned	O
by	O
@	O
fge	O
,	O
which	O
looks	O
like	O
#	O
pre	O
But	O
note	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
whereas	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
return	O
IntStream	B-api_mention
providing	O
you	O
pass	O
an	O
array	O
of	O
type	O
int	O
[	O
]	O
.	O
So	O
in	O
a	O
nutshell	O
for	O
primitives	O
type	O
you	O
can	O
observe	O
the	O
difference	O
between	O
2	O
methods	O
E	O
.	O
g	O
.	O
#	O
pre	O
When	O
you	O
pass	O
primitive	O
array	O
to	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
,	O
the	O
following	O
code	O
is	O
invoked	O
#	O
pre	O
and	O
when	O
you	O
pass	O
primitive	O
array	O
to	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
the	O
following	O
code	O
is	O
invoked	O
#	O
pre	O
Hence	O
you	O
get	O
different	O
results	O
.	O
Updated	O
:	O
As	O
mentioned	O
by	O
Stuart	O
Marks	O
comment	O
The	O
subrange	O
overload	O
of	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
is	O
preferable	O
to	O
using	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
because	O
the	O
former	O
results	O
in	O
a	O
SIZED	O
stream	O
whereas	O
the	O
latter	O
does	O
not	O
.	O
The	O
reason	O
is	O
that	O
limit	O
(	O
args	O
)	O
doesn	O
'	O
t	O
know	O
whether	O
the	O
size	O
is	O
m	O
or	O
less	O
than	O
m	O
,	O
whereas	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
does	O
range	O
checks	O
and	O
knows	O
the	O
exact	O
size	O
of	O
the	O
stream	O
You	O
can	O
read	O
the	O
source	O
code	O
for	O
stream	O
implementation	O
returned	O
by	O
Arrays	B-api_mention
.	I-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
here	O
,	O
whereas	O
for	O
stream	O
implementation	O
returned	O
by	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
skip	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
within	O
this	O
method	O
.	O
Question	O
-	O
32859038	O
,	O
answer	O
-	O
32859065	O
You	O
can	O
create	O
a	O
Stream	B-api_mention
of	O
the	O
indices	O
using	O
an	O
IntStream	B-api_mention
and	O
then	O
convert	O
them	O
to	O
a	O
Map	O
:	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
map	O
=	O
IntStream	B-api_mention
.	I-api_mention
range	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
boxed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
35931153	O
If	O
you	O
directly	O
call	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
not	O
using	O
multi	O
-	O
threading	O
feature	O
since	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
executed	O
as	O
part	O
of	O
caller	O
thread	O
.	O
If	O
you	O
call	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
Thread	B-api_mention
,	O
the	O
Java	O
Virtual	O
Machine	O
will	O
call	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
and	O
two	O
threads	O
will	O
run	O
concurrently	O
-	O
Current	O
Thread	B-api_mention
(	O
main	O
(	O
args	O
)	O
in	O
your	O
example	O
)	O
and	O
Other	O
Thread	B-api_mention
(	O
Runnable	B-api_mention
r1	O
in	O
your	O
example	O
)	O
.	O
Have	O
a	O
look	O
at	O
source	O
code	O
of	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
Thread	B-api_mention
class	O
#	O
pre	O
In	O
above	O
code	O
,	O
you	O
can	O
'	O
t	O
see	O
invocation	O
to	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
private	O
native	O
void	O
start0	O
(	O
args	O
)	O
is	O
responsible	O
for	O
calling	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
JVM	O
executes	O
this	O
native	O
method	O
.	O
Question	O
-	O
23932061	O
,	O
answer	O
-	O
23932216	O
You	O
can	O
easily	O
create	O
a	O
Stream	B-api_mention
out	O
of	O
an	O
Iterable	B-api_mention
or	O
Iterator	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
19629304	O
If	O
you	O
do	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
main	O
method	O
,	O
the	O
thread	O
of	O
main	O
method	O
will	O
invoke	O
the	O
run	O
method	O
instead	O
of	O
the	O
thread	O
you	O
require	O
to	O
run	O
.	O
The	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
creates	O
new	O
thread	O
and	O
for	O
which	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
has	O
to	O
be	O
done	O
Question	O
-	O
5785745	O
,	O
answer	O
-	O
34845194	O
You	O
can	O
also	O
use	O
Arrays	B-api_mention
.	I-api_mention
copyOfRange	I-api_mention
.	O
Example	O
:	O
#	O
pre	O
This	O
method	O
is	O
similar	O
to	O
Arrays	B-api_mention
.	I-api_mention
copyOf	I-api_mention
,	O
but	O
it	O
'	O
s	O
more	O
flexible	O
.	O
Both	O
of	O
them	O
use	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
under	O
the	O
hood	O
.	O
See	O
:	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
#	O
li	O
#	O
a	O
Question	O
-	O
27747562	O
In	O
the	O
following	O
code	O
,	O
a	O
dowcast	O
to	O
an	O
apparently	O
incompatible	O
type	O
passes	O
compilation	O
:	O
#	O
pre	O
Item	B-api_mention
and	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
are	O
disparate	O
types	O
so	O
the	O
cast	O
can	O
never	O
succeed	O
.	O
Why	O
did	O
the	O
compiler	O
allow	O
this	O
?	O
Question	O
-	O
32632364	O
,	O
answer	O
-	O
32633199	O
It	O
shouldn	O
'	O
t	O
have	O
compiled	O
,	O
according	O
to	O
JLS	O
7	O
.	O
int	O
can	O
be	O
compared	O
to	O
boxed	O
numeric	O
types	O
,	O
i	O
.	O
e	O
.	O
Byte	B-api_mention
,	O
Short	B-api_mention
,	O
Character	B-api_mention
,	O
Integer	B-api_mention
,	O
Long	B-api_mention
,	O
Float	B-api_mention
,	O
Double	B-api_mention
.	O
But	O
that	O
is	O
all	O
.	O
And	O
if	O
comparison	O
is	O
between	O
int	O
and	O
say	O
Float	B-api_mention
,	O
Float	B-api_mention
will	O
be	O
unboxed	O
first	O
,	O
so	O
that	O
the	O
comparison	O
is	O
between	O
float	O
and	O
int	O
.	O
It	O
'	O
ll	O
make	O
no	O
sense	O
to	O
do	O
the	O
other	O
way	O
around	O
-	O
box	O
int	O
then	O
examine	O
the	O
identity	O
of	O
the	O
Integer	B-api_mention
(	O
with	O
a	O
Float	B-api_mention
no	O
less	O
)	O
.	O
Question	O
-	O
31993377	O
,	O
answer	O
-	O
31993478	O
You	O
are	O
consuming	O
the	O
value	O
of	O
next	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
asking	O
for	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
next	O
(	O
args	O
)	O
,	O
per	O
default	O
,	O
returns	O
everything	O
to	O
the	O
next	O
whitespace	O
(	O
args	O
)	O
.	O
So	O
you	O
are	O
iterating	O
through	O
all	O
whitespace	O
seperated	O
strings	O
,	O
and	O
after	O
each	O
of	O
them	O
you	O
are	O
asking	O
about	O
the	O
nextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
i	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
.	O
1	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
.	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Also	O
true	O
(	O
still	O
a	O
whitespace	O
left	O
)	O
1	O
-	O
>	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
True	O
(	O
Line	O
Seperator	O
,	O
probably	O
)	O
.	O
haxNext	B-api_mention
?	O
False	O
,	O
no	O
whitespace	O
anymore	O
.	O
Question	O
-	O
31270759	O
,	O
answer	O
-	O
31273726	O
What	O
if	O
every	O
functional	O
interface	O
provided	O
by	O
java	O
.	O
util	O
.	O
function	O
was	O
allowed	O
to	O
throw	O
an	O
exception	O
?	O
#	O
pre	O
We	O
could	O
use	O
some	O
default	O
methods	O
to	O
provide	O
the	O
behavior	O
you	O
want	O
.	O
#	O
li	O
You	O
could	O
fallback	O
to	O
some	O
default	O
value	O
or	O
action	O
#	O
li	O
Or	O
you	O
could	O
try	O
to	O
perform	O
another	O
action	O
which	O
may	O
throw	O
an	O
exception	O
I	O
'	O
ve	O
written	O
a	O
library	O
which	O
redefines	O
most	O
of	O
the	O
interfaces	O
in	O
java	O
.	O
util	O
.	O
function	O
this	O
way	O
.	O
I	O
even	O
provide	O
a	O
ThrowingStream	O
which	O
let	O
'	O
s	O
you	O
use	O
these	O
new	O
interfaces	O
with	O
the	O
same	O
API	O
as	O
a	O
regular	O
Stream	B-api_mention
.	O
#	O
pre	O
(	O
Nothing	O
is	O
a	O
RuntimeException	B-api_mention
that	O
can	O
never	O
be	O
thrown	O
.	O
)	O
Your	O
original	O
example	O
would	O
become	O
#	O
pre	O
Question	O
-	O
5439529	O
I	O
'	O
m	O
trying	O
to	O
determine	O
if	O
a	O
particular	O
item	O
in	O
an	O
Array	B-api_mention
of	O
strings	O
is	O
an	O
integer	O
or	O
not	O
.	O
I	O
am	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
'	O
ing	O
an	O
infix	O
expression	O
in	O
String	B-api_mention
form	O
,	O
and	O
then	O
trying	O
to	O
split	O
the	O
resultant	O
array	O
into	O
two	O
arrays	O
;	O
one	O
for	O
integers	O
,	O
one	O
for	O
operators	O
,	O
whilst	O
discarding	O
parentheses	O
,	O
and	O
other	O
miscellaneous	O
items	O
.	O
What	O
would	O
be	O
the	O
best	O
way	O
to	O
accomplish	O
this	O
?	O
I	O
thought	O
I	O
might	O
be	O
able	O
to	O
find	O
a	O
Integer	B-api_mention
.	I-api_mention
isInteger	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
or	O
something	O
,	O
but	O
no	O
such	O
luck	O
.	O
Question	O
-	O
16098046	O
,	O
answer	O
-	O
16098086	O
You	O
could	O
use	O
printf	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
with	O
%	O
f	O
:	O
#	O
pre	O
This	O
will	O
print	O
dexp	O
:	O
12345678	O
.	O
000000	O
.	O
If	O
you	O
don	O
'	O
t	O
want	O
the	O
fractional	O
part	O
,	O
use	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
printf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
uses	O
the	O
format	O
specifier	O
language	O
explained	O
in	O
the	O
documentation	O
.	O
The	O
default	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
format	O
used	O
in	O
your	O
original	O
code	O
is	O
spelled	O
out	O
here	O
.	O
Question	O
-	O
9510125	O
,	O
answer	O
-	O
9511880	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
In	O
Swing	O
when	O
you	O
create	O
Component	O
,	O
it	O
is	O
not	O
valid	O
i	O
.	O
e	O
.	O
it	O
'	O
s	O
valid	O
property	O
is	O
false	O
.	O
A	O
component	O
is	O
said	O
to	O
be	O
valid	O
,	O
when	O
it	O
'	O
s	O
width	O
,	O
height	O
,	O
location	O
and	O
stuff	O
has	O
been	O
determined	O
.	O
This	O
is	O
usually	O
done	O
by	O
calling	O
their	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
directly	O
or	O
indirectly	O
.	O
When	O
we	O
call	O
validate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
containers	O
,	O
it	O
will	O
validate	O
the	O
container	O
(	O
if	O
it	O
is	O
invalid	O
)	O
by	O
calling	O
its	O
doLayout	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
which	O
typically	O
will	O
invoke	O
the	O
LayoutManager	B-api_mention
.	O
Now	O
each	O
child	O
placed	O
on	O
this	O
container	O
will	O
be	O
validated	O
recursively	O
,	O
so	O
that	O
the	O
entire	O
tree	O
will	O
be	O
laid	O
out	O
and	O
will	O
become	O
valid	O
.	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
to	O
be	O
called	O
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
width	O
/	O
height	O
and	O
call	O
repaint	O
(	O
)	O
when	O
you	O
change	O
an	O
attribute	O
that	O
would	O
affect	O
their	O
appearance	O
.	O
For	O
Example	O
,	O
If	O
your	O
JFrame	O
contains	O
a	O
JPanel	O
,	O
now	O
at	O
certain	O
point	O
of	O
time	O
you	O
removed	O
that	O
JPanel	O
and	O
inserted	O
a	O
new	O
one	O
in	O
it	O
'	O
s	O
place	O
,	O
depending	O
on	O
the	O
contents	O
of	O
the	O
newly	O
placed	O
JPanel	O
,	O
the	O
size	O
of	O
the	O
components	O
inside	O
the	O
JPanel	O
as	O
well	O
as	O
The	O
CONTAINER	O
itself	O
(	O
by	O
virtue	O
of	O
the	O
layout	O
manager	O
used	O
by	O
it	O
)	O
,	O
changes	O
.	O
Which	O
pushes	O
it	O
to	O
the	O
invalidate	O
state	O
.	O
So	O
in	O
order	O
to	O
validate	O
this	O
change	O
,	O
you	O
have	O
to	O
explicitly	O
call	O
revalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
This	O
thing	O
is	O
something	O
,	O
I	O
had	O
never	O
used	O
,	O
so	O
might	O
be	O
not	O
much	O
of	O
the	O
info	O
I	O
can	O
give	O
.	O
But	O
seems	O
like	O
the	O
scenario	O
presented	O
above	O
,	O
can	O
give	O
a	O
bit	O
of	O
hint	O
,	O
as	O
to	O
what	O
happens	O
in	O
invalidate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
32714194	O
,	O
answer	O
-	O
32714222	O
+	O
is	O
implemented	O
in	O
java	O
compilers	O
.	O
The	O
compiler	O
replaces	O
String	B-api_mention
+	O
String	B-api_mention
with	O
either	O
compile	O
time	O
constants	O
or	O
StringBuilder	B-api_mention
code	O
.	O
Note	O
that	O
this	O
applies	O
to	O
primitives	O
too	O
.	O
i	O
.	O
e	O
,	O
int	O
i	O
=	O
1	O
+	O
2	O
could	O
get	O
directly	O
replaced	O
to	O
int	O
i	O
=	O
3	O
during	O
compilation	O
itself	O
.	O
Question	O
-	O
23653778	O
,	O
answer	O
-	O
25564062	O
Try	O
OnStart	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
and	O
just	O
use	O
View	B-api_mention
view	O
=	O
getView	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findViewById	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
Declare	O
any	O
View	B-api_mention
using	O
getView	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
findViewById	I-api_mention
method	O
in	O
onStart	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Declare	O
click	O
listener	O
on	O
view	O
by	O
anyView	B-api_mention
.	I-api_mention
setOnClickListener	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
19416644	O
,	O
answer	O
-	O
19775881	O
Create	O
your	O
own	O
class	O
System	O
in	O
tha	O
same	O
package	O
with	O
Condition	O
.	O
In	O
this	O
case	O
your	O
System	O
class	O
will	O
hide	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
System	I-api_mention
class	O
#	O
pre	O
Ideone	O
DEMO	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
21274808	O
Use	O
CodeSource	B-api_mention
#	I-api_mention
getLocation	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
This	O
works	O
fine	O
in	O
JAR	O
files	O
as	O
well	O
.	O
You	O
can	O
obtain	O
CodeSource	B-api_mention
by	O
ProtectionDomain	B-api_mention
#	I-api_mention
getCodeSource	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
the	O
ProtectionDomain	B-api_mention
in	O
turn	O
can	O
be	O
obtained	O
by	O
Class	B-api_mention
#	I-api_mention
getProtectionDomain	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
#	O
pre	O
Question	O
-	O
27888429	O
,	O
answer	O
-	O
27888481	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
,	O
if	O
you	O
are	O
already	O
have	O
an	O
array	O
,	O
you	O
can	O
also	O
do	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
For	O
primitive	O
types	O
use	O
IntStream	B-api_mention
.	I-api_mention
of	I-api_mention
or	O
LongStream	B-api_mention
.	I-api_mention
of	I-api_mention
etc	O
.	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
18571358	O
Try	O
using	O
String	B-api_mention
.	I-api_mention
getBytes	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
It	O
returns	O
a	O
byte	O
[	O
]	O
representing	O
string	O
data	O
.	O
Example	O
:	O
#	O
pre	O
Question	O
-	O
7348711	O
Which	O
of	O
the	O
following	O
is	O
the	O
best	O
and	O
most	O
portable	O
way	O
to	O
get	O
the	O
hostname	O
of	O
the	O
current	O
computer	O
in	O
Java	O
?	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
vs	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23526153	O
Everything	O
is	O
here	O
:	O
#	O
a	O
The	O
answer	O
with	O
"	O
round	O
-	O
tripping	O
"	O
is	O
not	O
exact	O
:	O
when	O
you	O
do	O
LocalDateTime	B-api_mention
ldt	O
=	O
LocalDateTime	B-api_mention
.	I-api_mention
ofInstant	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
if	O
your	O
system	O
timezone	O
is	O
not	O
UTC	O
/	O
GMT	O
,	O
you	O
change	O
the	O
time	O
!	O
Question	O
-	O
14846920	O
,	O
answer	O
-	O
14846963	O
#	O
blockquote	O
For	O
the	O
same	O
reason	O
you	O
'	O
d	O
use	O
Collections	B-api_mention
.	I-api_mention
unmodifiableMap	I-api_mention
(	I-api_mention
)	I-api_mention
at	O
some	O
point	O
.	O
You	O
want	O
to	O
return	O
a	O
Map	B-api_mention
instance	O
that	O
throws	O
an	O
exception	O
if	O
the	O
user	O
attempts	O
to	O
modify	O
it	O
.	O
It	O
'	O
s	O
just	O
a	O
special	O
case	O
:	O
the	O
empty	O
Map	B-api_mention
.	O
Question	O
-	O
34172978	O
,	O
answer	O
-	O
34173040	O
Since	O
there	O
are	O
only	O
4	O
elements	O
that	O
pass	O
the	O
filter	O
,	O
limit	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
never	O
reaches	O
10	O
elements	O
,	O
so	O
the	O
Stream	B-api_mention
pipeline	O
keeps	O
generating	O
new	O
elements	O
and	O
feeding	O
them	O
to	O
the	O
filter	O
,	O
trying	O
to	O
reach	O
10	O
elements	O
that	O
pass	O
the	O
filter	O
,	O
but	O
since	O
only	O
the	O
first	O
4	O
elements	O
pass	O
the	O
filter	O
,	O
the	O
processing	O
never	O
ends	O
(	O
at	O
least	O
until	O
i	O
overflows	O
)	O
.	O
The	O
Stream	B-api_mention
pipeline	O
is	O
not	O
smart	O
enough	O
to	O
know	O
that	O
no	O
more	O
elements	O
can	O
pass	O
the	O
filter	O
,	O
so	O
it	O
keeps	O
processing	O
new	O
elements	O
.	O
Question	O
-	O
19235606	O
,	O
answer	O
-	O
19235863	O
You	O
should	O
almost	O
certainly	O
never	O
have	O
to	O
deal	O
with	O
Spliterator	B-api_mention
as	O
a	O
user	O
;	O
it	O
should	O
only	O
be	O
necessary	O
if	O
you	O
'	O
re	O
writing	O
Collection	B-api_mention
types	O
yourself	O
and	O
also	O
intending	O
to	O
optimize	O
parallelized	O
operations	O
on	O
them	O
.	O
For	O
what	O
it	O
'	O
s	O
worth	O
,	O
a	O
Spliterator	B-api_mention
is	O
a	O
way	O
of	O
operating	O
over	O
the	O
elements	O
of	O
a	O
collection	O
in	O
a	O
way	O
that	O
it	O
'	O
s	O
easy	O
to	O
split	O
off	O
part	O
of	O
the	O
collection	O
,	O
e	O
.	O
g	O
.	O
because	O
you	O
'	O
re	O
parallelizing	O
and	O
want	O
one	O
thread	O
to	O
work	O
on	O
one	O
part	O
of	O
the	O
collection	O
,	O
one	O
thread	O
to	O
work	O
on	O
another	O
part	O
,	O
etc	O
.	O
You	O
should	O
essentially	O
never	O
be	O
saving	O
values	O
of	O
type	O
Stream	B-api_mention
to	O
a	O
variable	O
,	O
either	O
.	O
Stream	B-api_mention
is	O
sort	O
of	O
like	O
an	O
Iterator	B-api_mention
,	O
in	O
that	O
it	O
'	O
s	O
a	O
one	O
-	O
time	O
-	O
use	O
object	O
that	O
you	O
'	O
ll	O
almost	O
always	O
use	O
in	O
a	O
fluent	O
chain	O
,	O
as	O
in	O
the	O
Javadoc	O
example	O
:	O
int	O
sum	O
=	O
widgets	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
mapToInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
sum	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Collector	B-api_mention
is	O
the	O
most	O
generalized	O
,	O
abstract	O
possible	O
version	O
of	O
a	O
"	O
reduce	O
"	O
operation	O
a	O
la	O
map	O
/	O
reduce	O
;	O
in	O
particular	O
,	O
it	O
needs	O
to	O
support	O
parallelization	O
and	O
finalization	O
steps	O
.	O
Examples	O
of	O
Collector	B-api_mention
s	O
include	O
:	O
#	O
li	O
summing	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
reducing	I-api_mention
(	O
args	O
)	O
#	O
li	O
StringBuilder	B-api_mention
appending	O
,	O
e	O
.	O
g	O
.	O
Collectors	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
32294367	O
,	O
answer	O
-	O
32378895	O
#	O
blockquote	O
Yes	O
and	O
No	O
.	O
I	O
explain	O
:	O
#	O
li	O
Referring	O
to	O
shared	O
memory	O
:	O
Different	O
threads	O
in	O
a	O
Java	O
process	O
share	O
the	O
whole	O
heap	O
,	O
therefore	O
threads	O
can	O
interact	O
in	O
a	O
huge	O
number	O
of	O
planned	O
and	O
unplanned	O
ways	O
.	O
However	O
objects	O
in	O
the	O
stack	O
(	O
e	O
.	O
g	O
.	O
a	O
context	O
you	O
pass	O
down	O
to	O
called	O
method	O
)	O
or	O
a	O
ThreadLocal	O
are	O
their	O
own	O
thread	O
'	O
s	O
(	O
unless	O
they	O
start	O
sharing	O
references	O
)	O
.	O
#	O
li	O
Crashing	O
:	O
If	O
a	O
thread	O
crashes	O
in	O
Java	O
(	O
a	O
Throwable	B-api_mention
is	O
propagated	O
into	O
Thread	B-api_mention
.	I-api_mention
run	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
or	O
something	O
gets	O
looped	O
or	O
blocked	O
)	O
,	O
that	O
mishap	O
might	O
not	O
affect	O
other	O
threads	O
(	O
e	O
.	O
g	O
.	O
a	O
pool	O
of	O
connections	O
in	O
a	O
server	O
will	O
continue	O
to	O
operate	O
)	O
.	O
However	O
as	O
different	O
threads	O
interact	O
.	O
Other	O
threads	O
will	O
easily	O
get	O
stranded	O
if	O
one	O
of	O
them	O
ends	O
abnormally	O
(	O
e	O
.	O
g	O
.	O
one	O
thread	O
trying	O
to	O
read	O
from	O
an	O
empty	O
pipe	O
from	O
another	O
thread	O
which	O
did	O
not	O
close	O
its	O
end	O
)	O
.	O
So	O
unless	O
the	O
developers	O
are	O
highly	O
paranoid	O
careful	O
,	O
it	O
is	O
very	O
likely	O
that	O
side	O
effects	O
will	O
occur	O
.	O
I	O
doubt	O
that	O
any	O
other	O
paradigm	O
intends	O
threads	O
to	O
operate	O
as	O
totally	O
independent	O
islands	O
.	O
They	O
must	O
share	O
information	O
and	O
coordinate	O
somehow	O
.	O
And	O
then	O
there	O
will	O
be	O
the	O
chance	O
to	O
mess	O
things	O
up	O
.	O
It	O
is	O
just	O
they	O
will	O
take	O
a	O
more	O
defensive	O
approach	O
that	O
"	O
gives	O
you	O
less	O
rope	O
to	O
hang	O
yourself	O
"	O
(	O
same	O
idiom	O
as	O
with	O
pointers	O
)	O
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
7521675	O
Just	O
remember	O
that	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
to	O
be	O
implemented	O
by	O
the	O
class	O
you	O
are	O
trying	O
to	O
compare	O
.	O
Otherwise	O
,	O
there	O
isn	O
'	O
t	O
much	O
of	O
a	O
point	O
;	O
the	O
version	O
of	O
the	O
method	O
for	O
the	O
Object	B-api_mention
class	O
does	O
the	O
same	O
thing	O
as	O
the	O
comparison	O
operation	O
:	O
Object	B-api_mention
#	I-api_mention
equals	I-api_mention
.	O
The	O
only	O
time	O
you	O
really	O
want	O
to	O
use	O
the	O
comparison	O
operator	O
for	O
objects	O
is	O
wen	O
you	O
are	O
comparing	O
Enums	O
.	O
This	O
is	O
because	O
there	O
is	O
only	O
one	O
instance	O
of	O
an	O
Enum	O
value	O
at	O
a	O
time	O
.	O
For	O
instance	O
,	O
given	O
the	O
enum	O
enum	O
FooEnum	O
{	O
A	O
,	O
B	O
,	O
C	O
}	O
You	O
will	O
never	O
have	O
more	O
than	O
one	O
instance	O
of	O
A	O
at	O
a	O
time	O
,	O
and	O
the	O
same	O
for	O
B	O
and	O
C	O
.	O
This	O
means	O
that	O
you	O
can	O
actually	O
write	O
a	O
method	O
like	O
so	O
:	O
#	O
pre	O
And	O
you	O
will	O
have	O
no	O
problems	O
whatsoever	O
.	O
Question	O
-	O
19998454	O
,	O
answer	O
-	O
19998652	O
This	O
is	O
being	O
described	O
in	O
this	O
article	O
.	O
Think	O
about	O
forEach	B-api_mention
of	O
Collections	O
.	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
…	O
list	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
Question	O
-	O
29095967	O
I	O
have	O
this	O
list	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
:	O
[	O
StringLiteral	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
StringLiteral	O
]	O
And	O
I	O
'	O
d	O
like	O
something	O
like	O
this	O
:	O
[	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
]	O
In	O
other	O
words	O
I	O
want	O
to	O
split	O
my	O
list	O
in	O
sublists	O
using	O
the	O
null	O
value	O
as	O
separator	O
,	O
in	O
order	O
to	O
obtain	O
a	O
list	O
of	O
lists	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
.	O
I	O
'	O
m	O
looking	O
for	O
a	O
Java	O
8	O
solution	O
.	O
I	O
'	O
ve	O
tried	O
with	O
Collectors	B-api_mention
.	I-api_mention
partitioningBy	I-api_mention
but	O
I	O
'	O
m	O
not	O
sure	O
it	O
is	O
what	O
I	O
'	O
m	O
looking	O
for	O
.	O
Thanks	O
!	O
Question	O
-	O
32623834	O
,	O
answer	O
-	O
32652449	O
Another	O
related	O
point	O
:	O
you	O
can	O
make	O
use	O
of	O
the	O
constant	O
pool	O
to	O
improve	O
the	O
performance	O
of	O
string	O
comparisons	O
in	O
some	O
circumstances	O
,	O
by	O
using	O
the	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
That	O
method	O
returns	O
the	O
instance	O
of	O
String	B-api_mention
with	O
the	O
same	O
contents	O
as	O
the	O
String	B-api_mention
on	O
which	O
it	O
is	O
invoked	O
from	O
the	O
String	B-api_mention
constants	O
pool	O
,	O
adding	O
it	O
it	O
if	O
is	O
not	O
yet	O
present	O
.	O
In	O
other	O
words	O
,	O
after	O
using	O
intern	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
all	O
Strings	O
with	O
the	O
same	O
contents	O
are	O
guaranteed	O
to	O
be	O
the	O
same	O
String	B-api_mention
instance	O
as	O
each	O
other	O
and	O
as	O
any	O
String	B-api_mention
constants	O
with	O
those	O
contents	O
,	O
meaning	O
you	O
can	O
then	O
use	O
the	O
equals	O
operator	O
(	O
=	O
=	O
)	O
on	O
them	O
.	O
This	O
is	O
just	O
an	O
example	O
which	O
is	O
not	O
very	O
useful	O
on	O
its	O
own	O
,	O
but	O
it	O
illustrates	O
the	O
point	O
:	O
#	O
pre	O
This	O
little	O
trick	O
isn	O
'	O
t	O
worth	O
designing	O
your	O
code	O
around	O
,	O
but	O
it	O
is	O
worth	O
keeping	O
in	O
mind	O
for	O
the	O
day	O
when	O
you	O
notice	O
a	O
little	O
more	O
speed	O
could	O
be	O
eked	O
out	O
of	O
some	O
bit	O
of	O
performance	O
sensitive	O
code	O
by	O
using	O
the	O
=	O
=	O
operator	O
on	O
a	O
string	O
with	O
judicious	O
use	O
of	O
intern	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
27949213	O
,	O
answer	O
-	O
27949581	O
Imagine	O
you	O
have	O
a	O
phone	O
book	O
,	O
which	O
contains	O
people	O
,	O
which	O
have	O
a	O
String	B-api_mention
firstName	O
and	O
a	O
String	O
lastName	O
.	O
And	O
it	O
happens	O
that	O
in	O
your	O
phone	O
book	O
,	O
100	O
,	O
000	O
people	O
have	O
the	O
same	O
firstName	O
=	O
StringLiteral	O
.	O
Because	O
you	O
get	O
the	O
data	O
from	O
a	O
database	O
or	O
a	O
file	O
those	O
strings	O
are	O
not	O
interned	O
so	O
your	O
JVM	O
memory	O
contains	O
the	O
char	O
array	O
{	O
CharLiteral	O
,	O
CharLiteral	O
,	O
CharLiteral	O
,	O
CharLiteral	O
}	O
100	O
thousand	O
times	O
,	O
one	O
per	O
John	O
string	O
.	O
Each	O
of	O
these	O
arrays	O
takes	O
,	O
say	O
,	O
20	O
bytes	O
of	O
memory	O
so	O
those	O
100k	O
Johns	O
take	O
up	O
2	O
MB	O
of	O
memory	O
.	O
With	O
deduplication	O
,	O
the	O
JVM	O
will	O
realise	O
that	O
"	O
John	O
"	O
is	O
duplicated	O
many	O
times	O
and	O
make	O
all	O
those	O
John	O
strings	O
point	O
to	O
the	O
same	O
underlying	O
char	O
array	O
,	O
decreasing	O
the	O
memory	O
usage	O
from	O
2MB	O
to	O
20	O
bytes	O
.	O
You	O
can	O
find	O
a	O
more	O
detailed	O
explanation	O
in	O
the	O
JEP	O
.	O
In	O
particular	O
:	O
#	O
blockquote	O
Question	O
-	O
22435833	O
In	O
Java	O
8	O
,	O
there	O
is	O
a	O
new	O
method	O
String	B-api_mention
.	I-api_mention
chars	I-api_mention
(	I-api_mention
)	I-api_mention
which	O
returns	O
a	O
stream	O
of	O
int	O
s	O
(	O
IntStream	B-api_mention
)	O
that	O
represent	O
the	O
character	O
codes	O
.	O
I	O
guess	O
many	O
people	O
would	O
expect	O
a	O
stream	O
of	O
char	O
s	O
here	O
instead	O
.	O
What	O
was	O
the	O
motivation	O
to	O
design	O
the	O
API	O
this	O
way	O
?	O
Question	O
-	O
18571223	O
,	O
answer	O
-	O
20262456	O
You	O
might	O
wanna	O
try	O
return	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
25850328	O
,	O
answer	O
-	O
25853827	O
I	O
would	O
argue	O
first	O
-	O
off	O
that	O
Serializable	B-api_mention
and	O
Cloneable	B-api_mention
are	O
bad	O
examples	O
of	O
marker	O
interfaces	O
.	O
Sure	O
,	O
they	O
'	O
re	O
interfaces	O
with	O
methods	O
,	O
but	O
they	O
imply	O
methods	O
,	O
such	O
as	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
(	O
The	O
compiler	O
will	O
create	O
a	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
for	O
you	O
if	O
you	O
don	O
'	O
t	O
override	O
it	O
,	O
and	O
all	O
objects	O
already	O
have	O
clone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
the	O
compiler	O
will	O
again	O
create	O
a	O
real	O
clone	O
(	O
args	O
)	O
method	O
for	O
you	O
but	O
with	O
caveats	O
.	O
Both	O
of	O
these	O
are	O
weird	O
edge	O
cases	O
that	O
really	O
aren	O
'	O
t	O
good	O
design	O
examples	O
.	O
)	O
Marker	O
interfaces	O
are	O
generally	O
used	O
for	O
one	O
of	O
two	O
purposes	O
:	O
1	O
)	O
As	O
a	O
shortcut	O
to	O
avoid	O
an	O
excessively	O
long	O
type	O
,	O
which	O
can	O
happen	O
with	O
lots	O
of	O
generics	O
.	O
For	O
instance	O
,	O
say	O
you	O
have	O
this	O
method	O
signature	O
:	O
public	O
void	O
doSomething	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
.	O
.	O
.	O
}	O
That	O
'	O
s	O
messy	O
and	O
annoying	O
to	O
type	O
,	O
and	O
more	O
importantly	O
,	O
difficult	O
to	O
understand	O
.	O
Consider	O
this	O
instead	O
:	O
public	O
interface	O
Widget	O
extends	O
Foobar	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
{	O
}	O
Then	O
your	O
method	O
looks	O
like	O
this	O
:	O
public	O
void	O
doSomething	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
.	O
.	O
.	O
}	O
Not	O
only	O
is	O
it	O
clearer	O
,	O
but	O
you	O
can	O
now	O
Javadoc	O
the	O
Widget	B-api_mention
interface	O
,	O
and	O
it	O
'	O
s	O
also	O
easier	O
to	O
search	O
for	O
all	O
occurrences	O
in	O
your	O
code	O
of	O
Widget	B-api_mention
.	O
2	O
)	O
Marker	B-api_mention
interfaces	O
can	O
also	O
be	O
used	O
as	O
a	O
way	O
around	O
Java	O
'	O
s	O
lack	O
of	O
intersection	O
types	O
.	O
With	O
a	O
marker	B-api_mention
interface	O
,	O
you	O
can	O
require	O
something	O
to	O
be	O
of	O
two	O
different	O
types	O
,	O
such	O
as	O
in	O
a	O
method	O
signature	O
.	O
Say	O
you	O
have	O
some	O
interface	O
Widget	B-api_mention
in	O
your	O
application	O
,	O
like	O
we	O
described	O
above	O
.	O
If	O
you	O
have	O
a	O
method	O
that	O
requires	O
a	O
Widget	B-api_mention
that	O
also	O
happens	O
to	O
let	O
you	O
iterate	O
over	O
it	O
(	O
it	O
'	O
s	O
contrived	O
,	O
but	O
work	O
with	O
me	O
here	O
)	O
,	O
your	O
only	O
good	O
solution	O
is	O
to	O
create	O
a	O
marker	O
interface	O
that	O
extends	O
both	O
interfaces	O
:	O
public	O
interface	O
IterableWidget	B-api_mention
extends	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
Widget	B-api_mention
{	O
}	O
And	O
in	O
your	O
code	O
:	O
#	O
pre	O
Question	O
-	O
18647214	O
,	O
answer	O
-	O
18647232	O
I	O
would	O
just	O
do	O
this	O
.	O
It	O
basically	O
takes	O
the	O
minimum	O
between	O
100	O
(	O
the	O
max	O
health	O
)	O
and	O
what	O
the	O
health	O
would	O
be	O
with	O
15	O
extra	O
points	O
.	O
It	O
ensures	O
that	O
the	O
user	O
'	O
s	O
health	O
does	O
not	O
exceed	O
100	O
.	O
#	O
pre	O
To	O
ensure	O
that	O
hitpoints	O
do	O
not	O
drop	O
below	O
zero	O
,	O
you	O
can	O
use	O
a	O
similar	O
function	O
:	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
.	O
#	O
pre	O
Question	O
-	O
29095967	O
,	O
answer	O
-	O
29096777	O
The	O
only	O
solution	O
I	O
come	O
up	O
with	O
for	O
the	O
moment	O
is	O
by	O
implementing	O
your	O
own	O
custom	O
collector	O
.	O
Before	O
reading	O
the	O
solution	O
,	O
I	O
want	O
to	O
add	O
a	O
few	O
notes	O
about	O
this	O
.	O
I	O
took	O
this	O
question	O
more	O
as	O
a	O
programming	O
exercise	O
,	O
I	O
'	O
m	O
not	O
sure	O
if	O
it	O
can	O
be	O
done	O
with	O
a	O
parallel	O
stream	O
.	O
So	O
you	O
have	O
to	O
be	O
aware	O
that	O
it	O
'	O
ll	O
silently	O
break	O
if	O
the	O
pipeline	O
is	O
run	O
in	O
parallel	O
.	O
This	O
is	O
not	O
a	O
desirable	O
behavior	O
and	O
should	O
be	O
avoided	O
.	O
This	O
is	O
why	O
I	O
throw	O
an	O
exception	O
in	O
the	O
combiner	O
part	O
(	O
instead	O
of	O
(	O
l1	O
,	O
l2	O
)	O
-	O
>	O
{	O
l1	O
.	O
addAll	O
(	O
args	O
)	O
;	O
return	O
l1	O
;	O
}	O
)	O
,	O
as	O
it	O
'	O
s	O
used	O
in	O
parallel	O
when	O
combining	O
the	O
two	O
lists	O
,	O
so	O
that	O
you	O
have	O
an	O
exception	O
instead	O
of	O
a	O
wrong	O
result	O
.	O
Also	O
this	O
is	O
not	O
very	O
efficient	O
due	O
to	O
list	O
copying	O
(	O
although	O
it	O
uses	O
a	O
native	O
method	O
to	O
copy	O
the	O
underlying	O
array	O
)	O
.	O
So	O
here	O
'	O
s	O
the	O
collector	O
implementation	O
:	O
#	O
pre	O
and	O
how	O
to	O
use	O
it	O
:	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
ll	O
=	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Output	O
:	O
[	O
[	O
a	O
,	O
b	O
]	O
,	O
[	O
c	O
]	O
,	O
[	O
d	O
,	O
e	O
]	O
]	O
As	O
the	O
answer	O
of	O
Joop	O
Eggen	O
is	O
out	O
,	O
it	O
appears	O
that	O
it	O
can	O
be	O
done	O
in	O
parallel	O
(	O
give	O
him	O
credit	O
for	O
that	O
!	O
)	O
.	O
With	O
that	O
it	O
reduces	O
the	O
custom	O
collector	O
implementation	O
to	O
:	O
#	O
pre	O
which	O
let	O
the	O
paragraph	O
about	O
parallelism	O
a	O
bit	O
obsolete	O
,	O
however	O
I	O
let	O
it	O
as	O
it	O
can	O
be	O
a	O
good	O
reminder	O
.	O
Note	O
that	O
the	O
Stream	B-api_mention
API	O
is	O
not	O
always	O
a	O
substitute	O
.	O
There	O
are	O
tasks	O
that	O
are	O
easier	O
and	O
more	O
suitable	O
using	O
the	O
streams	O
and	O
there	O
are	O
tasks	O
that	O
are	O
not	O
.	O
In	O
your	O
case	O
,	O
you	O
could	O
also	O
create	O
a	O
utility	O
method	O
for	O
that	O
:	O
#	O
pre	O
and	O
call	O
it	O
like	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
=	O
splitBySeparator	O
(	O
args	O
)	O
;	O
.	O
It	O
can	O
be	O
improved	O
for	O
checking	O
edge	O
-	O
cases	O
.	O
Question	O
-	O
11774099	O
,	O
answer	O
-	O
11774137	O
iterate	O
through	O
the	O
whole	O
65k	O
chars	O
and	O
ask	O
Character	B-api_mention
.	I-api_mention
isJavaIdentifierStart	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
answer	O
is	O
:	O
"	O
undertie	O
"	O
decimal	O
8255	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31922994	O
I	O
think	O
that	O
is	O
because	O
you	O
usually	O
write	O
your	O
functions	O
to	O
manipulate	O
data	O
,	O
and	O
then	O
lift	O
it	O
to	O
Optional	B-api_mention
using	O
map	O
and	O
similar	O
functions	O
.	O
This	O
adds	O
the	O
default	O
Optional	B-api_mention
behavior	O
to	O
it	O
.	O
Of	O
course	O
,	O
there	O
might	O
be	O
cases	O
,	O
when	O
it	O
is	O
necessary	O
to	O
write	O
your	O
own	O
auxilary	O
function	O
that	O
works	O
on	O
Optional	B-api_mention
.	O
Question	O
-	O
20001427	O
,	O
answer	O
-	O
20001866	O
Usually	O
,	O
one	O
would	O
call	O
the	O
reduce	O
method	O
using	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
follows	O
:	O
#	O
pre	O
That	O
requires	O
a	O
lot	O
of	O
syntax	O
for	O
just	O
calling	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
.	O
That	O
'	O
s	O
where	O
lambda	O
expressions	O
come	O
into	O
play	O
.	O
Since	O
Java	O
8	O
it	O
is	O
allowed	O
to	O
do	O
the	O
same	O
thing	O
in	O
a	O
much	O
shorter	O
way	O
:	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
How	O
does	O
this	O
work	O
?	O
The	O
java	O
compiler	O
"	O
detects	O
"	O
,	O
that	O
you	O
want	O
to	O
implement	O
a	O
method	O
that	O
accepts	O
two	O
int	O
s	O
and	O
returns	O
one	O
int	O
.	O
This	O
is	O
equivalent	O
to	O
the	O
formal	O
parameters	O
of	O
the	O
one	O
and	O
only	O
method	O
of	O
interface	O
IntBinaryOperator	B-api_mention
(	O
the	O
parameter	O
of	O
method	O
reduce	O
you	O
want	O
to	O
call	O
)	O
.	O
So	O
the	O
compiler	O
does	O
the	O
rest	O
for	O
you	O
-	O
it	O
just	O
assumes	O
you	O
want	O
to	O
implement	O
IntBinaryOperator	B-api_mention
.	O
But	O
as	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
itself	O
fulfills	O
the	O
formal	O
requirements	O
of	O
IntBinaryOperator	B-api_mention
,	O
it	O
can	O
be	O
used	O
directly	O
.	O
Because	O
Java	O
7	O
does	O
not	O
have	O
any	O
syntax	O
that	O
allows	O
a	O
method	O
itself	O
to	O
be	O
passed	O
as	O
an	O
argument	O
(	O
you	O
can	O
only	O
pass	O
method	O
results	O
,	O
but	O
never	O
method	O
references	O
)	O
,	O
the	O
:	O
:	O
syntax	O
was	O
introduced	O
in	O
Java	O
8	O
to	O
reference	O
methods	O
:	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
that	O
this	O
will	O
be	O
interpreted	O
by	O
the	O
compiler	O
,	O
not	O
by	O
the	O
JVM	O
at	O
runtime	O
!	O
Although	O
it	O
produces	O
different	O
bytecodes	O
for	O
all	O
three	O
code	O
snippets	O
,	O
they	O
are	O
semantically	O
equal	O
,	O
so	O
the	O
last	O
two	O
can	O
be	O
considered	O
to	O
be	O
short	O
(	O
and	O
probably	O
more	O
efficient	O
)	O
versions	O
of	O
the	O
IntBinaryOperator	B-api_mention
implementation	O
above	O
!	O
(	O
See	O
also	O
Translation	O
of	O
Lambda	O
Expressions	O
)	O
Question	O
-	O
21947452	O
,	O
answer	O
-	O
29434641	O
I	O
performed	O
tests	O
on	O
Eclipse	O
vs	O
Netbeans	O
8	O
.	O
0	O
.	O
2	O
,	O
both	O
with	O
Java	O
version	O
1	O
.	O
8	O
;	O
I	O
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
measurements	O
.	O
Eclipse	O
:	O
I	O
got	O
the	O
same	O
time	O
on	O
both	O
cases	O
-	O
around	O
1	O
.	O
564	O
seconds	O
.	O
Netbeans	O
:	O
#	O
li	O
Using	O
"	O
#	O
"	O
:	O
1	O
.	O
536	O
seconds	O
#	O
li	O
Using	O
"	O
B	O
"	O
:	O
44	O
.	O
164	O
seconds	O
So	O
,	O
it	O
looks	O
like	O
Netbeans	O
has	O
bad	O
performance	O
on	O
print	O
to	O
console	O
.	O
After	O
more	O
research	O
I	O
realized	O
that	O
the	O
problem	O
is	O
line	O
-	O
wrapping	O
of	O
the	O
max	O
buffer	O
of	O
Netbeans	O
(	O
it	O
'	O
s	O
not	O
restricted	O
to	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
command	O
)	O
,	O
demonstrated	O
by	O
this	O
code	O
:	O
#	O
pre	O
The	O
time	O
results	O
are	O
less	O
then	O
1	O
millisecond	O
every	O
iteration	O
except	O
every	O
fifth	O
iteration	O
,	O
when	O
the	O
time	O
result	O
is	O
around	O
225	O
millisecond	O
.	O
Something	O
like	O
(	O
in	O
nanoseconds	O
)	O
:	O
#	O
pre	O
And	O
so	O
on	O
.	O
.	O
Summary	O
:	O
#	O
li	O
Eclipse	O
works	O
perfectly	O
with	O
"	O
B	O
"	O
#	O
li	O
Netbeans	O
has	O
a	O
line	O
-	O
wrapping	O
problem	O
that	O
can	O
be	O
solved	O
(	O
because	O
the	O
problem	O
does	O
not	O
occur	O
in	O
eclipse	O
)	O
(	O
without	O
adding	O
space	O
after	O
B	O
(	O
"	O
B	O
"	O
)	O
)	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7353473	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
better	O
(	O
as	O
explained	O
by	O
Nick	O
)	O
,	O
but	O
still	O
not	O
very	O
good	O
One	O
host	O
can	O
be	O
known	O
under	O
many	O
different	O
hostnames	O
.	O
Usually	O
you	O
'	O
ll	O
be	O
looking	O
for	O
the	O
hostname	O
your	O
host	O
has	O
in	O
a	O
specific	O
context	O
.	O
For	O
example	O
,	O
in	O
a	O
web	O
application	O
,	O
you	O
might	O
be	O
looking	O
for	O
the	O
hostname	O
used	O
by	O
whoever	O
issued	O
the	O
request	O
you	O
'	O
re	O
currently	O
handling	O
.	O
How	O
to	O
best	O
find	O
that	O
one	O
depends	O
on	O
which	O
framework	O
you	O
'	O
re	O
using	O
for	O
your	O
web	O
application	O
.	O
In	O
some	O
kind	O
of	O
other	O
internet	O
-	O
facing	O
service	O
,	O
you	O
'	O
ll	O
want	O
the	O
hostname	O
your	O
service	O
is	O
available	O
through	O
from	O
the	O
'	O
outside	O
'	O
.	O
Due	O
to	O
proxies	O
,	O
firewalls	O
etc	O
this	O
might	O
not	O
even	O
be	O
a	O
hostname	O
on	O
the	O
machine	O
your	O
service	O
is	O
installed	O
on	O
-	O
you	O
might	O
try	O
to	O
come	O
up	O
with	O
a	O
reasonable	O
default	O
,	O
but	O
you	O
should	O
definitely	O
make	O
this	O
configurable	O
for	O
whoever	O
installs	O
this	O
.	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777279	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
the	O
same	O
as	O
array1	O
=	O
=	O
array2	O
,	O
i	O
.	O
e	O
.	O
is	O
it	O
the	O
same	O
array	O
.	O
As	O
@	O
alf	O
points	O
out	O
it	O
'	O
s	O
not	O
what	O
most	O
people	O
expect	O
.	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
compares	O
the	O
contents	O
of	O
the	O
arrays	O
.	O
Similarly	O
array	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
not	O
be	O
very	O
useful	O
and	O
you	O
need	O
to	O
use	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
23218874	O
I	O
understand	O
that	O
with	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
can	O
use	O
chain	O
operations	O
like	O
.	B-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
use	O
parallel	O
stream	O
.	O
But	O
what	O
is	O
difference	O
between	O
them	O
if	O
I	O
need	O
to	O
execute	O
small	O
operations	O
(	O
for	O
example	O
,	O
printing	O
the	O
elements	O
of	O
the	O
list	O
)	O
?	O
#	O
pre	O
Question	O
-	O
30217236	O
,	O
answer	O
-	O
30217518	O
Presumably	O
,	O
you	O
are	O
not	O
calling	O
your	O
generic	O
method	O
in	O
a	O
generic	O
fashion	O
,	O
so	O
it	O
'	O
s	O
treated	O
like	O
a	O
call	O
to	O
x	O
(	O
args	O
)	O
.	O
In	O
this	O
example	O
:	O
#	O
pre	O
The	O
first	O
call	O
to	O
x	O
is	O
not	O
made	O
generically	O
so	O
it	O
compiles	O
.	O
The	O
second	O
call	O
equates	O
T	O
to	O
String	B-api_mention
,	O
so	O
it	O
fails	O
because	O
1	O
and	O
2	O
are	O
not	O
Strings	O
.	O
The	O
third	O
call	O
compiles	O
because	O
it	O
properly	O
passes	O
in	O
Strings	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923214	O
This	O
seems	O
a	O
bit	O
silly	O
to	O
me	O
,	O
but	O
the	O
only	O
reason	O
I	O
can	O
think	O
of	O
is	O
that	O
object	O
arguments	O
in	O
method	O
parameters	O
already	O
are	O
optional	O
in	O
a	O
way	O
-	O
they	O
can	O
be	O
null	O
.	O
Therefore	O
forcing	O
someone	O
to	O
take	O
an	O
existing	O
object	O
and	O
wrap	O
it	O
in	O
an	O
optional	O
is	O
sort	O
of	O
pointless	O
.	O
That	O
being	O
said	O
,	O
chaining	O
methods	O
together	O
that	O
take	O
/	O
return	O
optionals	O
is	O
a	O
reasonable	O
thing	O
to	O
do	O
,	O
e	O
.	O
g	O
.	O
Maybe	O
monad	O
.	O
