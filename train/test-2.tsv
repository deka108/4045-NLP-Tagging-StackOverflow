Question	O
-	O
16148575	O
,	O
answer	O
-	O
20454885	O
For	O
everybody	O
who	O
codes	O
Java	O
for	O
Android	O
devices	O
and	O
ends	O
up	O
here	O
:	O
use	O
SparseArray	B-api_mention
for	O
better	O
performance	O
private	O
final	O
SparseArray	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
SparseArray	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
with	O
this	O
you	O
can	O
use	O
int	O
instead	O
of	O
Integer	B-api_mention
like	O
#	O
pre	O
Question	O
-	O
16252269	O
,	O
answer	O
-	O
30210459	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
allows	O
you	O
to	O
pass	O
an	O
instance	O
of	O
a	O
Comparator	B-api_mention
which	O
defines	O
the	O
sorting	O
logic	O
.	O
So	O
instead	O
of	O
sorting	O
the	O
list	O
in	O
natural	O
order	O
and	O
then	O
reversing	O
it	O
,	O
one	O
can	O
simply	O
pass	O
Collections	B-api_mention
.	I-api_mention
reverseOrder	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
sort	O
in	O
order	O
to	O
sort	O
the	O
list	O
in	O
reverse	O
order	O
:	O
#	O
pre	O
As	O
mentioned	O
by	O
@	O
Marco13	O
,	O
apart	O
from	O
being	O
more	O
idiomatic	O
(	O
and	O
possibly	O
more	O
efficient	O
)	O
,	O
using	O
the	O
reverse	O
order	O
comparator	O
makes	O
sure	O
that	O
the	O
sort	O
is	O
stable	O
(	O
meaning	O
that	O
the	O
order	O
of	O
elements	O
will	O
not	O
be	O
changed	O
when	O
they	O
are	O
equal	O
according	O
to	O
the	O
comparator	O
,	O
whereas	O
reversing	O
will	O
change	O
the	O
order	O
)	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
35931153	O
If	O
you	O
directly	O
call	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
not	O
using	O
multi	O
-	O
threading	O
feature	O
since	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
executed	O
as	O
part	O
of	O
caller	O
thread	O
.	O
If	O
you	O
call	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
Thread	B-api_mention
,	O
the	O
Java	O
Virtual	O
Machine	O
will	O
call	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
and	O
two	O
threads	O
will	O
run	O
concurrently	O
-	O
Current	O
Thread	B-api_mention
(	O
main	O
(	O
args	O
)	O
in	O
your	O
example	O
)	O
and	O
Other	O
Thread	B-api_mention
(	O
Runnable	B-api_mention
r1	O
in	O
your	O
example	O
)	O
.	O
Have	O
a	O
look	O
at	O
source	O
code	O
of	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
Thread	B-api_mention
class	O
#	O
pre	O
In	O
above	O
code	O
,	O
you	O
can	O
'	O
t	O
see	O
invocation	O
to	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
private	O
native	O
void	O
start0	O
(	O
args	O
)	O
is	O
responsible	O
for	O
calling	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
JVM	O
executes	O
this	O
native	O
method	O
.	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23526153	O
Everything	O
is	O
here	O
:	O
#	O
a	O
The	O
answer	O
with	O
"	O
round	O
-	O
tripping	O
"	O
is	O
not	O
exact	O
:	O
when	O
you	O
do	O
LocalDateTime	B-api_mention
ldt	O
=	O
LocalDateTime	B-api_mention
.	I-api_mention
ofInstant	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
if	O
your	O
system	O
timezone	O
is	O
not	O
UTC	O
/	O
GMT	O
,	O
you	O
change	O
the	O
time	O
!	O
Question	O
-	O
16635398	O
,	O
answer	O
-	O
16635489	O
The	O
advantage	O
comes	O
into	O
account	O
when	O
the	O
operations	O
can	O
be	O
executed	O
in	O
parallel	O
.	O
(	O
See	O
#	O
a	O
-	O
the	O
section	O
about	O
internal	O
and	O
external	O
iteration	O
)	O
#	O
li	O
The	O
main	O
advantage	O
from	O
my	O
point	O
of	O
view	O
is	O
that	O
the	O
implementation	O
of	O
what	O
is	O
to	O
be	O
done	O
within	O
the	O
loop	O
can	O
be	O
defined	O
without	O
having	O
to	O
decide	O
if	O
it	O
will	O
be	O
executed	O
in	O
parallel	O
or	O
sequential	O
#	O
li	O
If	O
you	O
want	O
your	O
loop	O
to	O
be	O
executed	O
in	O
parallel	O
you	O
could	O
simply	O
write	O
joins	O
.	B-api_mention
parallelStream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
will	O
have	O
to	O
write	O
some	O
extra	O
code	O
for	O
thread	O
handling	O
etc	O
.	O
Note	O
:	O
for	O
my	O
answer	O
I	O
assumed	O
joins	O
implementing	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Stream	I-api_mention
interface	O
.	O
If	O
joins	O
implements	O
only	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Iterable	I-api_mention
interface	O
this	O
is	O
no	O
longer	O
true	O
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28590286	O
Since	O
Double	B-api_mention
.	I-api_mention
Nan	I-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
Double	I-api_mention
.	I-api_mention
NaN	I-api_mention
)	I-api_mention
was	O
mentioned	O
:	O
It	O
'	O
s	O
one	O
thing	O
what	O
should	O
happen	O
when	O
you	O
perform	O
arithmetic	O
and	O
compare	O
numbers	O
,	O
it	O
'	O
s	O
a	O
totally	O
different	O
thing	O
when	O
you	O
consider	O
how	O
objects	O
should	O
behave	O
.	O
Two	O
typical	O
problem	O
cases	O
are	O
:	O
Sorting	O
an	O
array	O
of	O
numbers	O
,	O
and	O
using	O
hash	O
values	O
to	O
implement	O
dictionaries	O
,	O
sets	O
,	O
and	O
so	O
on	O
.	O
There	O
are	O
two	O
exceptional	O
cases	O
where	O
the	O
normal	O
ordering	O
with	O
<	O
,	O
=	O
and	O
>	O
doesn	O
'	O
t	O
apply	O
:	O
One	O
case	O
is	O
that	O
+	O
0	O
=	O
-	O
0	O
and	O
the	O
other	O
is	O
that	O
NaN	O
â‰ 	O
NaN	O
,	O
and	O
x	O
<	O
NaN	O
,	O
x	O
>	O
NaN	O
,	O
x	O
=	O
NaN	O
will	O
always	O
be	O
false	O
whatever	O
x	O
is	O
.	O
Sorting	O
algorithms	O
can	O
get	O
into	O
trouble	O
with	O
this	O
.	O
A	O
sorting	O
algorithm	O
may	O
assume	O
that	O
x	O
=	O
x	O
is	O
always	O
true	O
.	O
So	O
if	O
I	O
know	O
that	O
x	O
is	O
stored	O
in	O
an	O
array	O
and	O
look	O
for	O
it	O
,	O
I	O
might	O
not	O
do	O
any	O
bounds	O
check	O
because	O
the	O
search	O
for	O
it	O
must	O
find	O
something	O
.	O
Not	O
if	O
x	O
is	O
NaN	O
.	O
A	O
sorting	O
algorithm	O
may	O
assume	O
that	O
exactly	O
one	O
of	O
a	O
<	O
b	O
and	O
a	O
>	O
=	O
b	O
must	O
be	O
true	O
.	O
Not	O
if	O
one	O
is	O
NaN	O
.	O
So	O
a	O
naive	O
sorting	O
algorithm	O
may	O
crash	O
when	O
NaNs	O
are	O
present	O
.	O
You	O
'	O
d	O
have	O
to	O
decide	O
where	O
you	O
want	O
NaNs	O
to	O
end	O
up	O
when	O
sorting	O
the	O
array	O
,	O
and	O
then	O
change	O
your	O
comparison	O
code	O
so	O
that	O
it	O
works	O
.	O
Now	O
dictionaries	O
and	O
sets	O
and	O
generally	O
hashing	O
:	O
What	O
if	O
I	O
use	O
an	O
NaN	O
as	O
the	O
key	O
?	O
A	O
set	O
contains	O
unique	O
objects	O
.	O
If	O
the	O
set	O
contains	O
an	O
NaN	O
and	O
I	O
try	O
to	O
add	O
another	O
one	O
,	O
is	O
it	O
unique	O
because	O
it	O
is	O
not	O
equal	O
to	O
the	O
one	O
that	O
is	O
already	O
there	O
?	O
What	O
about	O
+	O
0	O
and	O
-	O
0	O
,	O
should	O
they	O
be	O
considered	O
equal	O
or	O
different	O
?	O
There	O
'	O
s	O
the	O
rule	O
that	O
any	O
two	O
items	O
considered	O
equal	O
must	O
have	O
the	O
same	O
hash	O
value	O
.	O
So	O
the	O
sensible	O
thing	O
is	O
(	O
probably	O
)	O
that	O
a	O
hash	O
function	O
returns	O
one	O
unique	O
value	O
for	O
all	O
NaNs	O
,	O
and	O
one	O
unique	O
value	O
for	O
+	O
0	O
and	O
-	O
0	O
.	O
And	O
after	O
the	O
hash	O
lookup	O
when	O
you	O
need	O
to	O
find	O
an	O
element	O
with	O
the	O
same	O
hash	O
value	O
that	O
is	O
actually	O
equal	O
,	O
two	O
NaNs	O
should	O
be	O
considered	O
equal	O
(	O
but	O
different	O
from	O
anything	O
else	O
)	O
.	O
That	O
'	O
s	O
probably	O
why	O
Double	B-api_mention
.	I-api_mention
Nan	I-api_mention
.	I-api_mention
equal	I-api_mention
(	I-api_mention
)	I-api_mention
behaves	O
different	O
from	O
=	O
=	O
.	O
Question	O
-	O
22409102	O
,	O
answer	O
-	O
22501695	O
The	O
approach	O
used	O
by	O
Math	B-api_mention
.	I-api_mention
min	I-api_mention
is	O
similar	O
to	O
what	O
Jesper	O
proposes	O
but	O
a	O
little	O
clearer	O
:	O
#	O
pre	O
Question	O
-	O
6684665	O
,	O
answer	O
-	O
12685471	O
The	O
kind	O
of	O
output	O
you	O
are	O
seeing	O
from	O
your	O
byte	O
array	O
(	O
[	O
B	O
@	O
405217f8	O
)	O
is	O
also	O
an	O
output	O
for	O
a	O
zero	O
length	O
byte	O
array	O
(	O
ie	O
new	O
byte	O
[	O
0	O
]	O
)	O
.	O
It	O
looks	O
like	O
this	O
string	O
is	O
a	O
reference	O
to	O
the	O
array	O
rather	O
than	O
a	O
description	O
of	O
the	O
contents	O
of	O
the	O
array	O
like	O
we	O
might	O
expect	O
from	O
a	O
regular	O
collection	O
'	O
s	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
As	O
with	O
other	O
respondents	O
,	O
I	O
would	O
point	O
you	O
to	O
the	O
String	B-api_mention
constructors	O
that	O
accept	O
a	O
byte	O
[	O
]	O
parameter	O
to	O
construct	O
a	O
string	O
from	O
the	O
contents	O
of	O
a	O
byte	O
array	O
.	O
You	O
should	O
be	O
able	O
to	O
read	O
raw	O
bytes	O
from	O
a	O
socket	O
'	O
s	O
InputStream	B-api_mention
if	O
you	O
want	O
to	O
obtain	O
bytes	O
from	O
a	O
TCP	O
connection	O
.	O
If	O
you	O
have	O
already	O
read	O
those	O
bytes	O
as	O
a	O
String	B-api_mention
(	O
using	O
an	O
InputStreamReader	B-api_mention
)	O
,	O
then	O
,	O
the	O
string	O
can	O
be	O
converted	O
to	O
bytes	O
using	O
the	O
getBytes	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
.	O
Be	O
sure	O
to	O
pass	O
in	O
your	O
desired	O
character	O
set	O
to	O
both	O
the	O
String	B-api_mention
constructor	O
and	O
getBytes	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
functions	O
,	O
and	O
this	O
will	O
only	O
work	O
if	O
the	O
byte	O
data	O
can	O
be	O
converted	O
to	O
characters	O
by	O
the	O
InputStreamReader	B-api_mention
.	O
If	O
you	O
want	O
to	O
deal	O
with	O
raw	O
bytes	O
you	O
should	O
really	O
avoid	O
using	O
this	O
stream	O
reader	O
layer	O
.	O
Question	O
-	O
8725387	O
,	O
answer	O
-	O
8725550	O
Think	O
of	O
it	O
like	O
this	O
:	O
the	O
List	B-api_mention
interface	O
has	O
methods	O
like	O
add	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
set	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
contract	O
is	O
that	O
once	O
you	O
added	O
an	O
element	O
at	O
position	O
X	O
you	O
will	O
find	O
it	O
there	O
unless	O
you	O
add	O
or	O
remove	O
elements	O
before	O
it	O
.	O
If	O
any	O
list	O
implementation	O
would	O
store	O
elements	O
in	O
some	O
order	O
other	O
than	O
based	O
on	O
the	O
index	O
,	O
the	O
above	O
list	O
methods	O
would	O
make	O
no	O
sense	O
.	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667307	O
mode1	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
It	O
doesn	O
'	O
t	O
get	O
better	O
than	O
that	O
,	O
I	O
'	O
m	O
afraid	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20945113	O
String	B-api_mention
is	O
immutable	O
*	O
but	O
this	O
only	O
means	O
you	O
cannot	O
change	O
it	O
using	O
its	O
public	O
API	O
.	O
What	O
you	O
are	O
doing	O
here	O
is	O
circumventing	O
the	O
normal	O
API	O
,	O
using	O
reflection	O
.	O
The	O
same	O
way	O
,	O
you	O
can	O
change	O
the	O
values	O
of	O
enums	O
,	O
change	O
the	O
lookup	O
table	O
used	O
in	O
Integer	B-api_mention
autoboxing	O
etc	O
.	O
Now	O
,	O
the	O
reason	O
s1	O
and	O
s2	O
change	O
value	O
,	O
is	O
that	O
they	O
both	O
refer	O
to	O
the	O
same	O
interned	O
string	O
.	O
The	O
compiler	O
does	O
this	O
(	O
as	O
mentioned	O
by	O
other	O
answers	O
)	O
.	O
The	O
reason	O
s3	O
does	O
not	O
was	O
actually	O
a	O
bit	O
surprising	O
to	O
me	O
,	O
as	O
I	O
thought	O
it	O
would	O
share	O
the	O
value	O
array	O
(	O
it	O
did	O
in	O
earlier	O
version	O
of	O
Java	O
,	O
before	O
Java	O
7u6	O
)	O
.	O
However	O
,	O
looking	O
at	O
the	O
source	O
code	O
of	O
String	B-api_mention
,	O
we	O
can	O
see	O
that	O
the	O
value	O
character	O
array	O
for	O
a	O
substring	O
is	O
actually	O
copied	O
(	O
using	O
Arrays	B-api_mention
.	I-api_mention
copyOfRange	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
.	O
This	O
is	O
why	O
it	O
goes	O
unchanged	O
.	O
You	O
can	O
install	O
a	O
SecurityManager	B-api_mention
,	O
to	O
avoid	O
malicious	O
code	O
to	O
do	O
such	O
things	O
.	O
But	O
keep	O
in	O
mind	O
that	O
some	O
libraries	O
depend	O
on	O
using	O
these	O
kind	O
of	O
reflection	O
tricks	O
(	O
typically	O
ORM	O
tools	O
,	O
AOP	O
libraries	O
etc	O
)	O
.	O
*	O
)	O
I	O
initially	O
wrote	O
that	O
String	B-api_mention
s	O
aren	O
'	O
t	O
really	O
immutable	O
,	O
just	O
"	O
effective	O
immutable	O
"	O
.	O
This	O
might	O
be	O
misleading	O
in	O
the	O
current	O
implementation	O
of	O
String	B-api_mention
,	O
where	O
the	O
value	O
array	O
is	O
indeed	O
marked	O
private	O
final	O
.	O
It	O
'	O
s	O
still	O
worth	O
noting	O
,	O
though	O
,	O
that	O
there	O
is	O
no	O
way	O
to	O
declare	O
an	O
array	O
in	O
Java	O
as	O
immutable	O
,	O
so	O
care	O
must	O
be	O
taken	O
not	O
to	O
expose	O
it	O
outside	O
its	O
class	O
,	O
even	O
with	O
the	O
proper	O
access	O
modifiers	O
.	O
As	O
this	O
topic	O
seems	O
overwhelmingly	O
popular	O
,	O
here	O
'	O
s	O
some	O
suggested	O
further	O
reading	O
:	O
Heinz	O
Kabutz	O
'	O
s	O
Reflection	O
Madness	O
talk	O
from	O
JavaZone	O
2009	O
,	O
which	O
covers	O
a	O
lot	O
of	O
the	O
issues	O
in	O
the	O
OP	O
,	O
along	O
with	O
other	O
reflection	O
.	O
.	O
.	O
well	O
.	O
.	O
.	O
madness	O
.	O
It	O
covers	O
why	O
this	O
is	O
sometimes	O
useful	O
.	O
And	O
why	O
,	O
most	O
of	O
the	O
time	O
,	O
you	O
should	O
avoid	O
it	O
.	O
:	O
-	O
)	O
Question	O
-	O
8894258	O
,	O
answer	O
-	O
8894348	O
The	O
first	O
one	O
using	O
str	O
.	B-api_mention
charAt	I-api_mention
should	O
be	O
faster	O
.	O
If	O
you	O
dig	O
inside	O
the	O
source	O
code	O
of	O
String	O
class	O
,	O
we	O
can	O
see	O
that	O
charAt	O
is	O
implemented	O
as	O
follows	O
:	O
#	O
pre	O
Here	O
,	O
all	O
it	O
does	O
is	O
index	O
an	O
array	O
and	O
return	O
the	O
value	O
.	O
Now	O
,	O
if	O
we	O
see	O
the	O
implementation	O
of	O
toCharArray	B-api_mention
,	O
we	O
will	O
find	O
the	O
below	O
:	O
#	O
pre	O
As	O
you	O
see	O
,	O
it	O
is	O
doing	O
a	O
System	B-api_mention
.	I-api_mention
arraycopy	I-api_mention
which	O
is	O
definitely	O
going	O
to	O
be	O
a	O
tad	O
slower	O
than	O
not	O
doing	O
it	O
.	O
Question	O
-	O
18723596	O
,	O
answer	O
-	O
18723666	O
You	O
can	O
cast	O
null	O
to	O
any	O
reference	O
type	O
without	O
getting	O
any	O
exception	O
.	O
println	B-api_mention
method	O
does	O
not	O
throw	O
null	O
pointer	O
because	O
it	O
first	O
checks	O
whether	O
the	O
object	O
is	O
null	O
or	O
not	O
.	O
If	O
null	O
then	O
it	O
simply	O
prints	O
the	O
string	O
StringLiteral	O
.	O
Otherwise	O
it	O
will	O
call	O
the	O
toString	B-api_mention
method	O
of	O
that	O
object	O
.	O
Adding	O
more	O
details	O
:	O
Internally	O
print	O
methods	O
call	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
on	O
the	O
input	O
object	O
.	O
And	O
in	O
valueOf	B-api_mention
method	O
,	O
this	O
check	O
helps	O
to	O
avoid	O
null	O
pointer	O
excpeiton	O
:	O
return	O
(	O
args	O
)	O
?	O
StringLiteral	O
:	O
obj	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
For	O
rest	O
of	O
your	O
confusion	O
,	O
calling	O
any	O
method	O
on	O
a	O
null	O
object	O
should	O
throw	O
a	O
null	O
pointer	O
exception	O
,	O
if	O
not	O
a	O
special	O
case	O
.	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331241	O
I	O
have	O
a	O
very	O
dumb	O
but	O
working	O
option	O
.	O
if	O
you	O
have	O
the	O
String	B-api_mention
fullDate	O
=	O
"	O
11	O
/	O
15	O
/	O
2013	O
08	O
:	O
00	O
:	O
00	O
"	O
;	O
String	B-api_mention
finalDate	O
=	O
fullDate	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
[	O
0	O
]	O
;	O
That	O
should	O
work	O
easy	O
and	O
fast	O
.	O
:	O
)	O
Question	O
-	O
15182496	O
The	O
following	O
print	O
statement	O
would	O
print	O
"	O
hello	O
world	O
"	O
.	O
Could	O
anyone	O
explain	O
this	O
?	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
And	O
randomString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
looks	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923227	O
Optionals	O
aren	O
'	O
t	O
designed	O
for	O
this	O
purpose	O
,	O
as	O
explained	O
nicely	O
by	O
Brian	O
Goetz	O
.	O
You	O
can	O
always	O
use	O
@	O
Nullable	O
to	O
denote	O
that	O
a	O
method	O
argument	O
can	O
be	O
null	O
.	O
Using	O
an	O
optional	O
does	O
not	O
really	O
enable	O
you	O
to	O
write	O
your	O
method	O
logic	O
more	O
neatly	O
.	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
29527145	O
Adding	O
local	O
classes	O
,	O
lambdas	O
and	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
complete	O
the	O
previous	O
two	O
answers	O
.	O
Further	O
,	O
I	O
add	O
arrays	O
of	O
lambdas	O
and	O
arrays	O
of	O
anonymous	O
classes	O
(	O
which	O
do	O
not	O
make	O
any	O
sense	O
in	O
practice	O
though	O
)	O
:	O
#	O
pre	O
This	O
is	O
the	O
full	O
output	O
:	O
#	O
pre	O
So	O
,	O
here	O
are	O
the	O
rules	O
.	O
First	O
,	O
lets	O
start	O
with	O
primitive	O
types	O
and	O
void	O
:	O
#	O
li	O
If	O
the	O
class	O
object	O
represents	O
a	O
primitive	O
type	O
or	O
void	O
,	O
all	O
the	O
four	O
methods	O
simply	O
returns	O
its	O
name	O
.	O
Now	O
the	O
rules	O
for	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
Every	O
non	O
-	O
lambda	O
and	O
non	O
-	O
array	O
class	O
or	O
interface	O
(	O
i	O
.	O
e	O
,	O
top	O
-	O
level	O
,	O
nested	O
,	O
inner	O
,	O
local	O
and	O
anonymous	O
)	O
has	O
a	O
name	O
(	O
which	O
is	O
returned	O
by	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
that	O
is	O
the	O
package	O
name	O
followed	O
by	O
a	O
dot	O
(	O
if	O
there	O
is	O
a	O
package	O
)	O
,	O
followed	O
by	O
the	O
name	O
of	O
its	O
class	O
-	O
file	O
as	O
generated	O
by	O
the	O
compiler	O
(	O
whithout	O
the	O
suffix	O
.	O
class	O
)	O
.	O
If	O
there	O
is	O
no	O
package	O
,	O
it	O
is	O
simply	O
the	O
name	O
of	O
the	O
class	O
-	O
file	O
.	O
If	O
the	O
class	O
is	O
an	O
inner	O
,	O
nested	O
,	O
local	O
or	O
anonymous	O
class	O
,	O
the	O
compiler	O
should	O
generate	O
at	O
least	O
one	O
$	O
in	O
its	O
class	O
-	O
file	O
name	O
.	O
Note	O
that	O
for	O
anonymous	O
classes	O
,	O
the	O
class	O
name	O
would	O
end	O
with	O
a	O
dollar	O
-	O
sign	O
followed	O
by	O
a	O
number	O
.	O
#	O
li	O
Lambda	O
class	O
names	O
are	O
generally	O
unpredictable	O
,	O
and	O
you	O
shouldn	O
'	O
t	O
care	O
about	O
they	O
anyway	O
.	O
Exactly	O
,	O
their	O
name	O
is	O
the	O
name	O
of	O
the	O
enclosing	O
class	O
,	O
followed	O
by	O
$	O
$	O
Lambda	O
$	O
,	O
followed	O
by	O
a	O
number	O
,	O
followed	O
by	O
a	O
slash	O
,	O
followed	O
by	O
another	O
number	O
.	O
#	O
li	O
The	O
class	O
descriptor	O
of	O
the	O
primitives	O
are	O
Z	O
for	O
boolean	O
,	O
B	O
for	O
byte	O
,	O
S	O
for	O
short	O
,	O
C	O
for	O
char	O
,	O
I	O
for	O
int	O
,	O
J	O
for	O
long	O
,	O
F	O
for	O
float	O
and	O
D	O
for	O
double	O
.	O
For	O
non	O
-	O
array	O
classes	O
and	O
interfaces	O
the	O
class	O
descriptor	O
is	O
L	O
followed	O
by	O
what	O
is	O
given	O
by	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
followed	O
by	O
;	O
.	O
For	O
array	O
classes	O
,	O
the	O
class	O
descriptor	O
is	O
[	O
followed	O
by	O
the	O
class	O
descriptor	O
of	O
the	O
component	O
type	O
(	O
which	O
may	O
be	O
itself	O
another	O
array	O
class	O
)	O
.	O
#	O
li	O
For	O
array	O
classes	O
,	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
its	O
class	O
descriptor	O
.	O
This	O
rule	O
seems	O
to	O
fail	O
only	O
for	O
array	O
classes	O
whose	O
the	O
component	O
type	O
is	O
a	O
lambda	O
(	O
which	O
possibly	O
is	O
a	O
bug	O
)	O
,	O
but	O
hopefully	O
this	O
should	O
not	O
matter	O
anyway	O
because	O
there	O
is	O
no	O
point	O
even	O
on	O
the	O
existence	O
of	O
array	O
classes	O
whose	O
component	O
type	O
is	O
a	O
lambda	O
.	O
Now	O
,	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
If	O
the	O
class	O
instance	O
represents	O
an	O
interface	O
(	O
or	O
an	O
annotation	O
,	O
which	O
is	O
a	O
special	O
type	O
of	O
interface	O
)	O
,	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
StringLiteral	O
+	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
is	O
a	O
primitive	O
,	O
it	O
returns	O
simply	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
is	O
something	O
else	O
(	O
a	O
class	O
type	O
,	O
even	O
if	O
it	O
is	O
a	O
pretty	O
weird	O
one	O
)	O
,	O
it	O
returns	O
StringLiteral	O
+	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
For	O
top	O
-	O
level	O
classes	O
and	O
interfaces	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
just	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
.	O
#	O
li	O
The	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
null	O
for	O
anonymous	O
or	O
local	O
classes	O
and	O
for	O
array	O
classes	O
of	O
those	O
.	O
#	O
li	O
For	O
inner	O
and	O
nested	O
classes	O
and	O
interfaces	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
would	O
replacing	O
the	O
compiler	O
-	O
introduced	O
dollar	O
-	O
signs	O
by	O
dots	O
.	O
#	O
li	O
For	O
array	O
classes	O
,	O
the	O
getCanonicalName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
null	O
if	O
the	O
canonical	O
name	O
of	O
the	O
component	O
type	O
is	O
null	O
.	O
Otherwise	O
,	O
it	O
returns	O
the	O
canonical	O
name	O
of	O
the	O
component	O
type	O
followed	O
by	O
[	O
]	O
.	O
The	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
li	O
For	O
top	O
-	O
level	O
,	O
nested	O
,	O
inner	O
and	O
local	O
classes	O
,	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
the	O
name	O
of	O
the	O
class	O
as	O
written	O
in	O
the	O
source	O
file	O
.	O
#	O
li	O
For	O
anonymous	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
empty	O
String	B-api_mention
.	O
#	O
li	O
For	O
lambda	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
just	O
returns	O
what	O
the	O
getName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
return	O
without	O
the	O
package	O
name	O
.	O
This	O
do	O
not	O
makes	O
much	O
sense	O
and	O
looks	O
like	O
a	O
bug	O
for	O
me	O
,	O
but	O
there	O
is	O
no	O
point	O
in	O
calling	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
lambda	O
class	O
to	O
start	O
with	O
.	O
#	O
li	O
For	O
array	O
classes	O
the	O
getSimpleName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
the	O
simple	O
name	O
of	O
the	O
component	O
class	O
followed	O
by	O
[	O
]	O
.	O
This	O
have	O
the	O
funny	O
/	O
weird	O
side	O
-	O
effect	O
that	O
array	O
classes	O
whose	O
component	O
type	O
is	O
an	O
anonymous	O
class	O
have	O
just	O
[	O
]	O
as	O
their	O
simple	O
names	O
.	O
Question	O
-	O
20358883	O
,	O
answer	O
-	O
31931870	O
Collections	B-api_mention
.	I-api_mention
singletonList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
6252678	O
,	O
answer	O
-	O
6252802	O
You	O
need	O
a	O
DateTimeFormatter	B-api_mention
appropriate	O
to	O
the	O
format	O
you	O
'	O
re	O
using	O
.	O
Take	O
a	O
look	O
at	O
the	O
docs	O
for	O
instructions	O
on	O
how	O
to	O
build	O
one	O
.	O
Off	O
the	O
cuff	O
,	O
I	O
think	O
you	O
need	O
format	O
=	O
DateTimeFormat	B-api_mention
.	I-api_mention
forPattern	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
16159203	O
,	O
answer	O
-	O
16323196	O
#	O
blockquote	O
currentPos	O
=	O
new	O
Point	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
does	O
a	O
few	O
things	O
,	O
including	O
writing	O
default	O
values	O
to	O
x	O
and	O
y	O
(	O
0	O
)	O
and	O
then	O
writing	O
their	O
initial	O
values	O
in	O
the	O
constructor	O
.	O
Since	O
your	O
object	O
is	O
not	O
safely	O
published	O
those	O
4	O
write	O
operations	O
can	O
be	O
freely	O
reordered	O
by	O
the	O
compiler	O
/	O
JVM	O
.	O
So	O
from	O
the	O
perspective	O
of	O
the	O
reading	O
thread	O
,	O
it	O
is	O
a	O
legal	O
execution	O
to	O
read	O
x	O
with	O
its	O
new	O
value	O
but	O
y	O
with	O
its	O
default	O
value	O
of	O
0	O
for	O
example	O
.	O
By	O
the	O
time	O
you	O
reach	O
the	O
println	O
statement	O
(	O
which	O
by	O
the	O
way	O
is	O
synchronized	O
and	O
therefore	O
does	O
influence	O
the	O
read	O
operations	O
)	O
,	O
the	O
variables	O
have	O
their	O
initial	O
values	O
and	O
the	O
program	O
prints	O
the	O
expected	O
values	O
.	O
Marking	O
currentPos	O
as	O
volatile	O
will	O
ensure	O
safe	O
publication	O
since	O
your	O
object	O
is	O
effectively	O
immutable	O
-	O
if	O
in	O
your	O
real	O
use	O
case	O
the	O
object	O
is	O
mutated	O
after	O
construction	O
,	O
volatile	O
guarantees	O
won	O
'	O
t	O
be	O
enough	O
and	O
you	O
could	O
see	O
an	O
inconsistent	O
object	O
again	O
.	O
Alternatively	O
,	O
you	O
can	O
make	O
the	O
Point	B-api_mention
immutable	O
which	O
will	O
also	O
ensure	O
safe	O
publication	O
,	O
even	O
without	O
using	O
volatile	O
.	O
To	O
achieve	O
immutability	O
,	O
you	O
simply	O
need	O
to	O
mark	O
x	O
and	O
y	O
final	O
.	O
As	O
a	O
side	O
note	O
and	O
as	O
already	O
mentioned	O
,	O
synchronized	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
}	O
can	O
be	O
treated	O
as	O
a	O
no	O
-	O
op	O
by	O
the	O
JVM	O
(	O
I	O
understand	O
you	O
included	O
it	O
to	O
reproduce	O
the	O
behaviour	O
)	O
.	O
Question	O
-	O
14602062	O
,	O
answer	O
-	O
14602092	O
From	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
)	I-api_mention
API	O
Doc	O
:	O
#	O
blockquote	O
Overloaded	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
(	I-api_mention
regex	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
is	O
more	O
appropriate	O
for	O
your	O
case	O
.	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
28323553	O
One	O
of	O
the	O
main	O
benefits	O
of	O
using	O
streams	O
is	O
that	O
it	O
gives	O
the	O
ability	O
to	O
process	O
data	O
in	O
a	O
declarative	O
way	O
,	O
that	O
is	O
,	O
using	O
a	O
functional	O
style	O
of	O
programming	O
.	O
It	O
also	O
gives	O
multi	O
-	O
threading	O
capability	O
for	O
free	O
meaning	O
there	O
is	O
no	O
need	O
to	O
write	O
any	O
extra	O
multi	O
-	O
threaded	O
code	O
to	O
make	O
your	O
stream	O
concurrent	O
.	O
Assuming	O
the	O
reason	O
you	O
are	O
exploring	O
this	O
style	O
of	O
programming	O
is	O
that	O
you	O
want	O
to	O
exploit	O
these	O
benefits	O
then	O
your	O
first	O
code	O
sample	O
is	O
potentially	O
not	O
functional	O
since	O
the	O
foreach	O
method	O
is	O
classed	O
as	O
being	O
terminal	O
(	O
meaning	O
that	O
it	O
can	O
produce	O
side	O
-	O
effects	O
)	O
.	O
The	O
second	O
way	O
is	O
preferred	O
from	O
functional	O
programming	O
point	O
of	O
view	O
since	O
the	O
map	O
function	O
can	O
accept	O
stateless	O
lambda	O
functions	O
.	O
More	O
explicitly	O
,	O
the	O
lambda	O
passed	O
to	O
the	O
map	O
function	O
should	O
be	O
#	O
li	O
Non	O
-	O
interfering	O
,	O
meaning	O
that	O
the	O
function	O
should	O
not	O
alter	O
the	O
source	O
of	O
the	O
stream	O
if	O
it	O
is	O
non	O
-	O
concurrent	O
(	O
e	O
.	O
g	O
.	O
ArrayList	B-api_mention
)	O
.	O
#	O
li	O
Stateless	O
to	O
avoid	O
unexpected	O
results	O
when	O
doing	O
parallel	O
processing	O
(	O
caused	O
by	O
thread	O
scheduling	O
differences	O
)	O
.	O
Another	O
benefit	O
with	O
the	O
second	O
approach	O
is	O
if	O
the	O
stream	O
is	O
parallel	O
and	O
the	O
collector	O
is	O
concurrent	O
and	O
unordered	O
then	O
these	O
characteristics	O
can	O
provide	O
useful	O
hints	O
to	O
the	O
reduction	O
operation	O
to	O
do	O
the	O
collecting	O
concurrently	O
.	O
Question	O
-	O
5011932	O
I	O
am	O
storing	O
a	O
SQL	O
query	O
in	O
my	O
strings	O
.	O
xml	O
file	O
and	O
I	O
want	O
to	O
use	O
String	B-api_mention
.	I-api_mention
Format	I-api_mention
to	O
build	O
the	O
final	O
string	O
in	O
code	O
.	O
The	O
SELECT	O
statement	O
uses	O
a	O
like	O
,	O
something	O
like	O
this	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
'	O
%	O
something	O
%	O
'	O
In	O
order	O
to	O
format	O
that	O
I	O
replace	O
'	O
something	O
'	O
with	O
%	O
1	O
$	O
s	O
so	O
it	O
becomes	O
:	O
SELECT	O
Field1	O
,	O
Field2	O
FROM	O
mytable	O
WHERE	O
Field1	O
LIKE	O
\	O
'	O
%	O
%	O
1	O
$	O
s	O
%	O
\	O
'	O
I	O
escape	O
the	O
single	O
quotes	O
with	O
the	O
backslash	O
.	O
However	O
I	O
am	O
not	O
able	O
to	O
escape	O
the	O
%	O
sign	O
.	O
How	O
can	O
I	O
include	O
a	O
like	O
statement	O
in	O
my	O
strings	O
.	O
xml	O
file	O
?	O
Question	O
-	O
5455794	O
,	O
answer	O
-	O
5455820	O
How	O
about	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Refer	O
here	O
.	O
Question	O
-	O
20746429	O
,	O
answer	O
-	O
24531394	O
Here	O
is	O
a	O
version	O
done	O
on	O
ints	O
-	O
as	O
asked	O
in	O
the	O
question	O
.	O
Usage	O
:	O
StreamUtil	B-api_mention
.	I-api_mention
takeWhile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Here	O
'	O
s	O
code	O
for	O
StreamUtil	B-api_mention
:	O
#	O
pre	O
Question	O
-	O
18532488	O
,	O
answer	O
-	O
33142346	O
Once	O
a	O
repeat	O
function	O
is	O
somewhere	O
defined	O
as	O
#	O
pre	O
You	O
can	O
use	O
it	O
now	O
and	O
then	O
this	O
way	O
,	O
e	O
.	O
g	O
.	O
:	O
repeat	O
.	B-api_mention
accept	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
To	O
get	O
and	O
equivalent	O
to	O
Haskell	O
'	O
s	O
take	O
8	O
(	O
args	O
)	O
You	O
could	O
write	O
#	O
pre	O
Question	O
-	O
28671903	O
I	O
have	O
a	O
set	O
â€“	O
a	O
HashSet	B-api_mention
I	O
want	O
to	O
remove	O
some	O
items	O
from	O
it	O
â€¦	O
none	O
of	O
the	O
items	O
in	O
the	O
"	O
removals	O
"	O
collection	O
will	O
be	O
in	O
the	O
original	O
set	O
.	O
I	O
specify	O
the	O
size	O
of	O
the	O
"	O
source	O
"	O
set	O
and	O
the	O
size	O
of	O
the	O
"	O
removals	O
"	O
collection	O
on	O
the	O
command	O
line	O
,	O
and	O
build	O
both	O
of	O
them	O
.	O
The	O
source	O
set	O
contains	O
only	O
non	O
-	O
negative	O
integers	O
;	O
the	O
removals	O
set	O
contains	O
only	O
negative	O
integers	O
.	O
I	O
measure	O
how	O
long	O
it	O
takes	O
to	O
remove	O
all	O
the	O
elements	O
using	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
which	O
isn	O
â€™	O
t	O
the	O
world	O
most	O
accurate	O
stopwatch	O
but	O
is	O
more	O
than	O
adequate	O
in	O
this	O
case	O
,	O
as	O
you	O
â€™	O
ll	O
see	O
.	O
Here	O
â€™	O
s	O
the	O
code	O
:	O
#	O
pre	O
Let	O
â€™	O
s	O
start	O
off	O
by	O
giving	O
it	O
an	O
easy	O
job	O
:	O
a	O
source	O
set	O
of	O
100	O
items	O
,	O
and	O
100	O
to	O
remove	O
:	O
#	O
pre	O
Okay	O
,	O
That	O
'	O
s	O
fast	O
as	O
I	O
expected	O
.	O
Next	O
i	O
tried	O
source	O
of	O
one	O
million	O
items	O
and	O
300	O
,	O
000	O
items	O
to	O
remove	O
?	O
#	O
pre	O
That	O
still	O
seems	O
pretty	O
speedy	O
.	O
Now	O
make	O
it	O
a	O
bit	O
easier	O
â€“	O
300	O
,	O
000	O
source	O
items	O
and	O
300	O
,	O
000	O
removals	O
:	O
#	O
pre	O
Nearly	O
three	O
minutes	O
?	O
Really	O
confused	O
!	O
!	O
can	O
some	O
one	O
explain	O
why	O
this	O
is	O
happening	O
.	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
35264580	O
Main	O
difference	O
is	O
that	O
when	O
program	O
calls	O
start	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
a	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
is	O
executed	O
in	O
new	O
Thread	B-api_mention
while	O
if	O
you	O
call	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
directly	O
no	O
new	O
Thread	B-api_mention
is	O
created	O
and	O
code	O
inside	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
execute	O
on	O
current	O
Thread	B-api_mention
.	O
Another	O
difference	O
between	O
start	O
vs	O
run	O
in	O
Java	O
thread	O
is	O
that	O
you	O
can	O
not	O
call	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
on	O
thread	O
object	O
.	O
once	O
started	O
,	O
second	O
call	O
of	O
start	B-api_mention
(	I-api_mention
)	I-api_mention
will	O
throw	O
IllegalStateException	B-api_mention
in	O
Java	O
while	O
you	O
can	O
call	O
run	B-api_mention
(	I-api_mention
)	I-api_mention
method	O
twice	O
.	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
16148647	O
Please	O
use	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myMap	O
=	O
new	O
HashMap	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
18723596	O
String	B-api_mention
x	O
=	O
(	O
String	B-api_mention
)	O
null	O
;	O
Why	O
there	O
is	O
no	O
exception	O
in	O
this	O
statement	O
?	O
#	O
pre	O
It	O
prints	O
null	O
.	O
But	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
should	O
throw	O
a	O
null	O
pointer	O
exception	O
.	O
Question	O
-	O
31202946	O
Why	O
was	O
the	O
Thread	B-api_mention
class	O
implemented	O
as	O
a	O
regular	O
class	O
and	O
not	O
an	O
abstract	O
class	O
with	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
being	O
abstract	O
.	O
Will	O
it	O
possibly	O
introduce	O
any	O
problems	O
?	O
Or	O
does	O
it	O
have	O
any	O
use	O
in	O
being	O
this	O
way	O
?	O
Also	O
,	O
the	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
supposed	O
to	O
be	O
a	O
very	O
specific	O
method	O
whose	O
functionality	O
cannot	O
be	O
implemented	O
by	O
any	O
other	O
class	O
(	O
If	O
I	O
am	O
not	O
wrong	O
)	O
.	O
And	O
hence	O
I	O
guess	O
the	O
final	O
keyword	O
would	O
be	O
apt	O
for	O
this	O
more	O
than	O
any	O
other	O
method	O
.	O
But	O
I	O
am	O
able	O
to	O
override	O
this	O
method	O
and	O
use	O
it	O
as	O
I	O
like	O
,	O
#	O
pre	O
It	O
obviously	O
only	O
printed	O
,	O
#	O
blockquote	O
Is	O
there	O
any	O
use	O
in	O
overriding	O
other	O
than	O
confusing	O
the	O
engineer	O
replacing	O
you	O
?	O
If	O
not	O
,	O
why	O
was	O
the	O
method	O
not	O
declared	O
final	O
in	O
Thread	B-api_mention
class	O
?	O
Question	O
-	O
9481865	O
,	O
answer	O
-	O
33093380	O
You	O
may	O
try	O
isReachable	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
of	O
InetAddress	B-api_mention
class	O
to	O
figure	O
out	O
which	O
IP	O
address	O
is	O
your	O
real	O
publicly	O
available	O
IP	O
address	O
.	O
I	O
think	O
other	O
type	O
of	O
addresses	O
(	O
site	O
local	O
,	O
link	O
local	O
)	O
are	O
not	O
reachable	O
from	O
outside	O
.	O
#	O
pre	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
30506585	O
Predicate	B-api_mention
has	O
methods	O
and	O
,	O
or	O
and	O
negate	O
.	O
However	O
,	O
String	B-api_mention
:	I-api_mention
:	I-api_mention
isEmpty	I-api_mention
is	O
not	O
a	O
Predicate	B-api_mention
.	O
It	O
could	O
as	O
well	O
be	O
Function	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
or	O
MyProprietaryClass	B-api_mention
.	O
The	O
type	O
information	O
is	O
inferred	O
from	O
the	O
variable	O
or	O
the	O
call	O
.	O
So	O
,	O
you	O
need	O
to	O
cast	O
a	O
method	O
reference	O
explicitly	O
(	O
as	O
@	O
axtavt	O
mentioned	O
)	O
:	O
(	O
(	O
Predicate	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
String	B-api_mention
:	I-api_mention
:	I-api_mention
isEmpty	I-api_mention
)	O
.	B-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
But	O
it	O
'	O
s	O
absolutely	O
ugly	O
and	O
Predicate	B-api_mention
seems	O
to	O
use	O
lambdas	O
under	O
the	O
hood	O
anyway	O
.	O
So	O
I	O
think	O
you	O
are	O
better	O
off	O
writing	O
a	O
lambda	O
or	O
even	O
your	O
own	O
not	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
e	O
.	O
g	O
.	O
in	O
utility	O
,	O
static	O
import	O
)	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
28043703	O
As	O
others	O
have	O
noted	O
,	O
getting	O
the	O
hostname	O
based	O
on	O
DNS	O
resolution	O
is	O
unreliable	O
.	O
Since	O
this	O
question	O
is	O
unfortunately	O
still	O
relevant	O
in	O
2016	O
,	O
I	O
'	O
d	O
like	O
to	O
share	O
with	O
you	O
my	O
network	O
-	O
independent	O
solution	O
,	O
with	O
some	O
test	O
runs	O
on	O
different	O
systems	O
.	O
The	O
following	O
code	O
tries	O
to	O
do	O
the	O
following	O
:	O
#	O
li	O
On	O
Windows	O
#	O
li	O
Read	O
the	O
COMPUTERNAME	O
environment	O
variable	O
through	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
#	O
li	O
Execute	O
hostname	O
.	O
exe	O
and	O
read	O
the	O
response	O
#	O
li	O
On	O
Linux	O
#	O
li	O
Read	O
the	O
HOSTNAME	O
environment	O
variable	O
through	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
Execute	O
hostname	O
and	O
read	O
the	O
response	O
#	O
li	O
Read	O
/	O
etc	O
/	O
hostname	O
(	O
to	O
do	O
this	O
I	O
'	O
m	O
executing	O
cat	O
since	O
the	O
snippet	O
already	O
contains	O
code	O
to	O
execute	O
and	O
read	O
.	O
Simply	O
reading	O
the	O
file	O
would	O
be	O
better	O
,	O
though	O
)	O
.	O
The	O
code	O
:	O
#	O
pre	O
Results	O
for	O
different	O
operating	O
systems	O
:	O
OpenSuse	O
13	O
.	O
1	O
#	O
pre	O
Ubuntu	O
14	O
.	O
04	O
LTS	O
This	O
one	O
is	O
kinda	O
strange	O
since	O
echo	O
$	O
HOSTNAME	O
returns	O
the	O
correct	O
hostname	O
,	O
but	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
:	O
#	O
pre	O
EDIT	O
:	O
According	O
to	O
legolas108	O
,	O
System	B-api_mention
.	I-api_mention
getenv	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
works	O
on	O
Ubuntu	O
14	O
.	O
04	O
if	O
you	O
run	O
export	O
HOSTNAME	O
before	O
executing	O
the	O
Java	O
code	O
.	O
Windows	O
7	O
#	O
pre	O
The	O
machine	O
names	O
have	O
been	O
replaced	O
but	O
I	O
kept	O
the	O
capitalization	O
and	O
structure	O
.	O
Note	O
the	O
extra	O
newline	O
when	O
executing	O
hostname	O
,	O
you	O
might	O
have	O
to	O
take	O
it	O
into	O
account	O
in	O
some	O
cases	O
.	O
Question	O
-	O
25850328	O
I	O
was	O
being	O
taught	O
that	O
Marker	B-api_mention
interface	O
in	O
Java	O
is	O
an	O
empty	O
interface	O
and	O
is	O
used	O
to	O
signal	O
to	O
compiler	O
or	O
JVM	O
that	O
the	O
objects	O
of	O
the	O
class	O
implementing	O
this	O
interface	O
must	O
be	O
treated	O
in	O
a	O
special	O
way	O
,	O
like	O
serializing	O
,	O
cloning	O
,	O
etc	O
.	O
But	O
lately	O
I	O
have	O
learned	O
that	O
it	O
actually	O
has	O
nothing	O
to	O
do	O
with	O
the	O
compiler	O
or	O
the	O
JVM	O
.	O
For	O
example	O
,	O
in	O
case	O
of	O
Serializable	B-api_mention
interface	O
the	O
method	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
of	O
ObjectOutputStream	B-api_mention
does	O
something	O
like	O
instanceOf	B-api_mention
Serializable	I-api_mention
to	O
detect	O
whether	O
the	O
class	O
implements	O
Serializable	B-api_mention
&	O
throws	O
NotSerializableException	B-api_mention
accordingly	O
.	O
Everything	O
is	O
handled	O
in	O
the	O
code	O
and	O
this	O
seems	O
to	O
be	O
a	O
design	O
-	O
pattern	O
so	O
I	O
think	O
we	O
can	O
define	O
our	O
own	O
marker	O
interfaces	O
.	O
Now	O
my	O
doubts	O
:	O
#	O
li	O
Is	O
the	O
definition	O
of	O
a	O
marker	O
interface	O
mentioned	O
above	O
in	O
1st	O
point	O
wrong	O
?	O
How	O
can	O
we	O
define	O
a	O
Marker	B-api_mention
interface	O
then	O
?	O
#	O
li	O
And	O
instead	O
of	O
using	O
the	O
instanceOf	B-api_mention
operator	O
why	O
can	O
'	O
t	O
the	O
method	O
be	O
something	O
like	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
so	O
that	O
there	O
is	O
a	O
compile	O
-	O
time	O
type	O
checking	O
rather	O
than	O
runtime	O
?	O
#	O
li	O
How	O
are	O
Annotations	B-api_mention
better	O
than	O
Marker	B-api_mention
Interfaces	O
?	O
Question	O
-	O
20129762	O
,	O
answer	O
-	O
30548433	O
I	O
would	O
like	O
to	O
point	O
out	O
that	O
StreamEx	O
does	O
implement	O
Iterable	B-api_mention
(	O
and	O
Stream	B-api_mention
)	O
,	O
as	O
well	O
as	O
a	O
host	O
of	O
other	O
immensely	O
awesome	O
functionality	O
missing	O
from	O
Stream	B-api_mention
.	O
Question	O
-	O
19235606	O
I	O
am	O
having	O
trouble	O
understanding	O
the	O
Stream	B-api_mention
interface	O
in	O
Java	O
8	O
,	O
especially	O
where	O
it	O
has	O
to	O
do	O
with	O
the	O
Spliterator	B-api_mention
and	O
Collector	B-api_mention
interfaces	O
.	O
My	O
problem	O
is	O
that	O
I	O
simply	O
can	O
'	O
t	O
understand	O
yet	O
the	O
Spliterator	B-api_mention
and	O
the	O
Collector	B-api_mention
interfaces	O
,	O
and	O
as	O
a	O
result	O
the	O
Stream	B-api_mention
interface	O
is	O
still	O
somewhat	O
obscure	O
to	O
me	O
.	O
What	O
exactly	O
is	O
a	O
Spliterator	B-api_mention
and	O
a	O
Collector	B-api_mention
,	O
and	O
how	O
can	O
I	O
use	O
them	O
?	O
If	O
I	O
am	O
willing	O
to	O
write	O
my	O
own	O
Spliterator	B-api_mention
or	O
Collector	B-api_mention
(	O
and	O
probably	O
my	O
own	O
Stream	B-api_mention
in	O
that	O
process	O
)	O
,	O
what	O
should	O
I	O
do	O
and	O
not	O
do	O
?	O
I	O
read	O
some	O
examples	O
scattered	O
around	O
the	O
web	O
,	O
but	O
since	O
everything	O
here	O
is	O
stil	O
new	O
and	O
subject	O
to	O
changes	O
,	O
examples	O
and	O
tutorials	O
are	O
still	O
very	O
sparse	O
.	O
Question	O
-	O
31202946	O
,	O
answer	O
-	O
31203252	O
#	O
blockquote	O
This	O
question	O
actually	O
boils	O
down	O
to	O
the	O
fact	O
that	O
you	O
should	O
always	O
prefer	O
composition	O
over	O
inheritance	O
.	O
If	O
the	O
Thread	B-api_mention
class	O
was	O
declared	O
as	O
abstract	O
,	O
the	O
language	O
would	O
have	O
to	O
provide	O
another	O
class	O
that	O
extended	O
from	O
it	O
which	O
programmers	O
could	O
use	O
to	O
create	O
a	O
Thread	B-api_mention
.	O
Your	O
question	O
would	O
then	O
be	O
about	O
why	O
this	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
is	O
not	O
abstract	O
.	O
If	O
the	O
language	O
did	O
not	O
provide	O
another	O
class	O
that	O
extends	O
from	O
Thread	B-api_mention
,	O
programmers	O
would	O
have	O
to	O
create	O
their	O
own	O
class	O
that	O
extend	O
s	O
from	O
Thread	B-api_mention
and	O
override	O
the	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
blockquote	O
The	O
only	O
possible	O
explanation	O
I	O
can	O
give	O
is	O
that	O
the	O
developers	O
of	O
the	O
language	O
saw	O
some	O
use	O
-	O
cases	O
for	O
overriding	O
start	O
when	O
the	O
class	O
was	O
introduced	O
to	O
the	O
JDK	O
.	O
The	O
first	O
version	O
of	O
Java	O
that	O
I	O
used	O
was	O
1	O
.	O
5	O
and	O
I	O
personally	O
have	O
not	O
come	O
across	O
a	O
use	O
-	O
case	O
where	O
I	O
found	O
the	O
need	O
to	O
override	O
start	O
.	O
As	O
JB	O
Nizet	O
stated	O
in	O
his	O
answer	O
#	O
blockquote	O
Question	O
-	O
8189466	O
,	O
answer	O
-	O
23592535	O
I	O
had	O
that	O
same	O
problem	O
but	O
in	O
case	O
that	O
I	O
was	O
adding	O
en	O
element	O
into	O
iterated	O
list	O
.	O
I	O
made	O
it	O
this	O
way	O
#	O
pre	O
Now	O
everything	O
goes	O
fine	O
because	O
you	O
don	O
'	O
t	O
create	O
any	O
iterator	O
over	O
your	O
list	O
,	O
you	O
iterate	O
over	O
it	O
"	O
manually	O
"	O
.	O
And	O
condition	O
i	O
<	O
integerList	O
.	B-api_mention
size	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
never	O
fool	O
you	O
because	O
when	O
you	O
remove	O
/	O
add	O
something	O
into	O
List	B-api_mention
size	O
of	O
the	O
List	B-api_mention
decrement	O
/	O
increment	O
.	O
.	O
Hope	O
it	O
helps	O
,	O
for	O
me	O
that	O
was	O
solution	O
.	O
Question	O
-	O
28681737	O
,	O
answer	O
-	O
28684917	O
The	O
short	O
answer	O
is	O
:	O
it	O
'	O
s	O
safe	O
if	O
you	O
use	O
them	O
safely	O
:	O
)	O
The	O
snarky	O
answer	O
:	O
tell	O
me	O
what	O
you	O
mean	O
by	O
traits	O
,	O
and	O
maybe	O
I	O
'	O
ll	O
give	O
you	O
a	O
better	O
answer	O
:	O
)	O
In	O
all	O
seriousness	O
,	O
the	O
term	O
"	O
trait	O
"	O
is	O
not	O
well	O
-	O
defined	O
.	O
Many	O
Java	O
developers	O
are	O
most	O
familiar	O
with	O
traits	O
as	O
they	O
are	O
expressed	O
in	O
Scala	O
,	O
but	O
Scala	O
is	O
far	O
from	O
the	O
first	O
language	O
to	O
have	O
traits	O
,	O
either	O
in	O
name	O
or	O
in	O
effect	O
.	O
For	O
example	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
stateful	O
(	O
can	O
have	O
var	O
variables	O
)	O
;	O
in	O
Fortress	O
they	O
are	O
pure	O
behavior	O
.	O
Java	O
'	O
s	O
interfaces	O
with	O
default	O
methods	O
are	O
stateless	O
;	O
does	O
this	O
mean	O
they	O
are	O
not	O
traits	O
?	O
(	O
Hint	O
:	O
that	O
was	O
a	O
trick	O
question	O
.	O
)	O
Again	O
,	O
in	O
Scala	O
,	O
traits	O
are	O
composed	O
through	O
linearization	O
;	O
if	O
class	O
A	O
extends	O
traits	O
X	O
and	O
Y	O
,	O
then	O
the	O
order	O
in	O
which	O
X	O
and	O
Y	O
are	O
mixed	O
in	O
determines	O
how	O
conflicts	O
between	O
X	O
and	O
Y	O
are	O
resolved	O
.	O
In	O
Java	O
,	O
this	O
linearization	O
mechanism	O
is	O
not	O
present	O
(	O
it	O
was	O
rejected	O
,	O
in	O
part	O
,	O
because	O
it	O
was	O
too	O
"	O
un	O
-	O
Java	O
-	O
like	O
"	O
.	O
)	O
The	O
proximate	O
reason	O
for	O
adding	O
default	O
methods	O
to	O
interfaces	O
was	O
to	O
support	O
interface	O
evolution	O
,	O
but	O
we	O
were	O
well	O
aware	O
that	O
we	O
were	O
going	O
beyond	O
that	O
.	O
Whether	O
you	O
consider	O
that	O
to	O
be	O
"	O
interface	O
evolution	O
+	O
+	O
"	O
or	O
"	O
traits	O
-	O
-	O
"	O
is	O
a	O
matter	O
of	O
personal	O
interpretation	O
.	O
So	O
,	O
to	O
answer	O
your	O
question	O
about	O
safety	O
.	O
.	O
.	O
so	O
long	O
as	O
you	O
stick	O
to	O
what	O
the	O
mechanism	O
actually	O
supports	O
,	O
rather	O
than	O
trying	O
to	O
wishfully	O
stretch	O
it	O
to	O
something	O
it	O
does	O
not	O
support	O
,	O
you	O
should	O
be	O
fine	O
.	O
A	O
key	O
design	O
goal	O
was	O
that	O
,	O
from	O
the	O
perspective	O
of	O
the	O
client	O
of	O
an	O
interface	O
,	O
default	O
methods	O
should	O
be	O
indistinguishable	O
from	O
"	O
regular	O
"	O
interface	O
methods	O
.	O
The	O
default	O
-	O
ness	O
of	O
a	O
method	O
,	O
therefore	O
,	O
is	O
only	O
interesting	O
to	O
the	O
designer	O
and	O
implementor	O
of	O
the	O
interface	O
.	O
Here	O
are	O
some	O
use	O
cases	O
that	O
are	O
well	O
within	O
the	O
design	O
goals	O
:	O
#	O
li	O
Interface	O
evolution	O
.	O
Here	O
,	O
we	O
are	O
adding	O
a	O
new	O
method	O
to	O
an	O
existing	O
interface	O
,	O
which	O
has	O
a	O
sensible	O
default	O
implementation	O
in	O
terms	O
of	O
existing	O
methods	O
on	O
that	O
interface	O
.	O
An	O
example	O
would	O
be	O
adding	O
the	O
forEach	B-api_mention
method	O
to	O
Collection	B-api_mention
,	O
where	O
the	O
default	O
implementation	O
is	O
written	O
in	O
terms	O
of	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
#	O
li	O
"	O
Optional	O
"	O
methods	O
.	O
Here	O
,	O
the	O
designer	O
of	O
an	O
interface	O
is	O
saying	O
"	O
Implementors	O
need	O
not	O
implement	O
this	O
method	O
if	O
they	O
are	O
willing	O
to	O
live	O
with	O
the	O
limitations	O
in	O
functionality	O
that	O
entails	O
"	O
.	O
For	O
example	O
,	O
Iterator	B-api_mention
.	I-api_mention
remove	I-api_mention
was	O
given	O
a	O
default	O
which	O
throws	O
UnsupportedOperationException	B-api_mention
;	O
since	O
the	O
vast	O
majority	O
of	O
implementations	O
of	O
Iterator	O
have	O
this	O
behavior	O
anyway	O
,	O
the	O
default	O
makes	O
this	O
method	O
essentially	O
optional	O
.	O
(	O
If	O
the	O
behavior	O
from	O
AbstractCollection	B-api_mention
were	O
expressed	O
as	O
defaults	O
on	O
Collection	B-api_mention
,	O
we	O
might	O
do	O
the	O
same	O
for	O
the	O
mutative	O
methods	O
.	O
)	O
#	O
li	O
Convenience	O
methods	O
.	O
These	O
are	O
methods	O
that	O
are	O
strictly	O
for	O
convenience	O
,	O
again	O
generally	O
implemented	O
in	O
terms	O
of	O
non	O
-	O
default	O
methods	O
on	O
the	O
class	O
.	O
The	O
logger	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
your	O
first	O
example	O
is	O
a	O
reasonable	O
illustration	O
of	O
this	O
.	O
#	O
li	O
Combinators	O
.	O
These	O
are	O
compositional	O
methods	O
that	O
instantiate	O
new	O
instances	O
of	O
the	O
interface	O
based	O
on	O
the	O
current	O
instance	O
.	O
For	O
example	O
,	O
the	O
methods	O
Predicate	B-api_mention
.	I-api_mention
and	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Comparator	B-api_mention
.	I-api_mention
thenComparing	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
are	O
examples	O
of	O
combinators	O
.	O
If	O
you	O
provide	O
a	O
default	O
implementation	O
,	O
you	O
should	O
also	O
provide	O
some	O
specification	O
for	O
the	O
default	O
(	O
in	O
the	O
JDK	O
,	O
we	O
use	O
the	O
@	O
implSpec	O
javadoc	O
tag	O
for	O
this	O
)	O
to	O
aid	O
implementors	O
in	O
understanding	O
whether	O
they	O
want	O
to	O
override	O
the	O
method	O
or	O
not	O
.	O
Some	O
defaults	O
,	O
like	O
convenience	O
methods	O
and	O
combinators	O
,	O
are	O
almost	O
never	O
overridden	O
;	O
others	O
,	O
like	O
optional	O
methods	O
,	O
are	O
often	O
overridden	O
.	O
You	O
need	O
to	O
provide	O
enough	O
specification	O
(	O
not	O
just	O
documentation	O
)	O
about	O
what	O
the	O
default	O
promises	O
to	O
do	O
,	O
so	O
the	O
implementor	O
can	O
make	O
a	O
sensible	O
decision	O
about	O
whether	O
they	O
need	O
to	O
override	O
it	O
.	O
Question	O
-	O
14846920	O
What	O
are	O
some	O
of	O
the	O
situations	O
where	O
I	O
can	O
use	O
Collections	B-api_mention
.	I-api_mention
emptyMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
The	O
Documentation	O
says	O
I	O
can	O
use	O
this	O
method	O
if	O
I	O
want	O
my	O
collection	O
to	O
be	O
immutable	O
.	O
Why	O
would	O
I	O
want	O
an	O
immutable	O
empty	O
collection	O
?	O
What	O
is	O
the	O
point	O
?	O
Question	O
-	O
16159203	O
,	O
answer	O
-	O
18258659	O
You	O
have	O
ordinary	O
memory	O
,	O
the	O
'	O
currentpos	O
'	O
reference	O
and	O
the	O
Point	B-api_mention
object	O
and	O
its	O
fields	O
behind	O
it	O
,	O
shared	O
between	O
2	O
threads	O
,	O
without	O
synchronisation	O
.	O
Thus	O
,	O
there	O
is	O
no	O
defined	O
ordering	O
between	O
the	O
writes	O
that	O
happen	O
to	O
this	O
memory	O
in	O
the	O
main	O
thread	O
and	O
the	O
reads	O
in	O
the	O
created	O
thread	O
(	O
call	O
it	O
T	O
)	O
.	O
Main	O
thread	O
is	O
doing	O
the	O
following	O
writes	O
(	O
ignoring	O
the	O
initial	O
setup	O
of	O
point	O
,	O
will	O
result	O
in	O
p	O
.	O
x	O
and	O
p	O
.	O
y	O
having	O
default	O
values	O
)	O
:	O
#	O
li	O
to	O
p	O
.	O
x	O
#	O
li	O
to	O
p	O
.	O
y	O
#	O
li	O
to	O
currentpos	O
Because	O
there	O
is	O
nothing	O
special	O
about	O
these	O
writes	O
in	O
terms	O
of	O
synchronisation	O
/	O
barriers	O
,	O
the	O
runtime	O
is	O
free	O
to	O
allow	O
the	O
T	O
thread	O
see	O
them	O
occur	O
in	O
any	O
order	O
(	O
the	O
main	O
thread	O
of	O
course	O
always	O
sees	O
writes	O
and	O
reads	O
ordered	O
according	O
to	O
programme	O
order	O
)	O
,	O
and	O
occur	O
at	O
any	O
point	O
between	O
the	O
reads	O
in	O
T	O
.	O
So	O
T	O
is	O
doing	O
:	O
#	O
li	O
reads	O
currentpos	O
to	O
p	O
#	O
li	O
read	O
p	O
.	O
x	O
and	O
p	O
.	O
y	O
(	O
in	O
either	O
order	O
)	O
#	O
li	O
compare	O
,	O
and	O
take	O
the	O
branch	O
#	O
li	O
read	O
p	O
.	O
x	O
and	O
p	O
.	O
y	O
(	O
either	O
order	O
)	O
and	O
call	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
Given	O
there	O
'	O
s	O
no	O
ordering	O
relationships	O
between	O
the	O
writes	O
in	O
main	O
,	O
and	O
the	O
reads	O
in	O
T	O
,	O
there	O
are	O
clearly	O
several	O
ways	O
this	O
can	O
produce	O
your	O
result	O
,	O
as	O
T	O
may	O
see	O
main	O
'	O
s	O
write	O
to	O
currentpos	O
before	O
the	O
writes	O
to	O
currentpos	O
.	O
y	O
or	O
currentpos	O
.	O
x	O
:	O
#	O
li	O
It	O
reads	O
currentpos	O
.	O
x	O
first	O
,	O
before	O
the	O
x	O
write	O
has	O
occurred	O
-	O
gets	O
0	O
,	O
then	O
reads	O
currentpos	O
.	O
y	O
before	O
the	O
y	O
write	O
has	O
occurred	O
-	O
gets	O
0	O
.	O
Compare	O
evals	O
to	O
true	O
.	O
The	O
writes	O
become	O
visible	O
to	O
T	O
.	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
is	O
called	O
.	O
#	O
li	O
It	O
reads	O
currentpos	O
.	O
x	O
first	O
,	O
after	O
the	O
x	O
write	O
has	O
occurred	O
,	O
then	O
reads	O
currentpos	O
.	O
y	O
before	O
the	O
y	O
write	O
has	O
occurred	O
-	O
gets	O
0	O
.	O
Compare	O
evals	O
to	O
true	O
.	O
Writes	O
become	O
visible	O
to	O
T	O
.	O
.	O
.	O
etc	O
.	O
#	O
li	O
It	O
reads	O
currentpos	O
.	O
y	O
first	O
,	O
before	O
the	O
y	O
write	O
has	O
occurred	O
(	O
0	O
)	O
,	O
then	O
reads	O
currentpos	O
.	O
x	O
after	O
the	O
x	O
write	O
,	O
evals	O
to	O
true	O
.	O
etc	O
.	O
and	O
so	O
on	O
.	O
.	O
.	O
There	O
are	O
a	O
number	O
of	O
data	O
races	O
here	O
.	O
I	O
suspect	O
the	O
flawed	O
assumption	O
here	O
is	O
thinking	O
that	O
the	O
writes	O
that	O
result	O
from	O
this	O
line	O
are	O
made	O
visible	O
across	O
all	O
the	O
threads	O
in	O
the	O
programme	O
order	O
of	O
the	O
thread	O
executing	O
it	O
:	O
currentPos	O
=	O
new	O
Point	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Java	O
makes	O
no	O
such	O
guarantee	O
(	O
it	O
'	O
d	O
be	O
terrible	O
for	O
performance	O
)	O
.	O
Something	O
more	O
must	O
be	O
added	O
if	O
your	O
programme	O
needs	O
a	O
guaranteed	O
ordering	O
of	O
the	O
writes	O
relative	O
to	O
reads	O
in	O
other	O
threads	O
.	O
Others	O
have	O
suggested	O
making	O
the	O
x	O
,	O
y	O
fields	O
final	O
,	O
or	O
alternatively	O
making	O
currentpos	O
volatile	O
.	O
#	O
li	O
If	O
you	O
make	O
the	O
x	O
,	O
y	O
fields	O
final	O
,	O
then	O
Java	O
guarantees	O
that	O
the	O
writes	O
of	O
their	O
values	O
will	O
be	O
seen	O
to	O
occur	O
before	O
the	O
constructor	O
returns	O
,	O
in	O
all	O
threads	O
.	O
Thus	O
,	O
as	O
the	O
assignment	O
to	O
currentpos	O
is	O
after	O
the	O
constructor	O
,	O
the	O
T	O
thread	O
is	O
guaranteed	O
to	O
see	O
the	O
writes	O
in	O
the	O
correct	O
order	O
.	O
#	O
li	O
If	O
you	O
make	O
currentpos	O
volatile	O
,	O
then	O
Java	O
guarantees	O
that	O
that	O
this	O
is	O
a	O
synchronisation	O
point	O
which	O
will	O
be	O
total	O
-	O
ordered	O
wrt	O
other	O
synchronisation	O
points	O
.	O
As	O
in	O
main	O
the	O
writes	O
to	O
x	O
and	O
y	O
must	O
happen	O
before	O
the	O
write	O
to	O
currentpos	O
,	O
then	O
any	O
read	O
of	O
currentpos	O
in	O
another	O
thread	O
must	O
see	O
also	O
the	O
writes	O
of	O
x	O
,	O
y	O
that	O
happened	O
before	O
.	O
Using	O
final	O
has	O
the	O
advantage	O
that	O
it	O
makes	O
the	O
fields	O
immutable	O
,	O
and	O
thus	O
allows	O
the	O
values	O
to	O
be	O
cached	O
.	O
Using	O
volatile	O
leads	O
to	O
synchronisation	O
on	O
every	O
write	O
and	O
read	O
of	O
currentpos	O
,	O
which	O
might	O
hurt	O
performance	O
.	O
See	O
chapter	O
17	O
of	O
the	O
Java	O
Language	O
Spec	O
for	O
the	O
gory	O
details	O
:	O
#	O
a	O
(	O
Initial	O
answer	O
assumed	O
a	O
weaker	O
memory	O
model	O
,	O
as	O
I	O
was	O
not	O
sure	O
the	O
JLS	O
guaranteed	O
volatile	O
was	O
sufficient	O
.	O
Answer	O
edited	O
to	O
reflect	O
comment	O
from	O
assylias	O
,	O
pointing	O
out	O
the	O
Java	O
model	O
is	O
stronger	O
-	O
happens	O
-	O
before	O
is	O
transitive	O
-	O
and	O
so	O
volatile	O
on	O
currentpos	O
also	O
suffices	O
)	O
.	O
Question	O
-	O
15156857	O
,	O
answer	O
-	O
15157021	O
You	O
must	O
use	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
methodReturningVoid	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
not	O
doThrow	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
explained	O
in	O
the	O
documentation	O
Question	O
-	O
18410035	O
Being	O
somewhat	O
new	O
to	O
the	O
Java	O
language	O
I	O
'	O
m	O
trying	O
to	O
familiarize	O
myself	O
with	O
all	O
the	O
ways	O
(	O
or	O
at	O
least	O
the	O
non	O
-	O
pathological	O
ones	O
)	O
that	O
one	O
might	O
iterate	O
through	O
a	O
list	O
(	O
or	O
perhaps	O
other	O
collections	O
)	O
and	O
the	O
advantages	O
or	O
disadvantages	O
of	O
each	O
.	O
Given	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
list	O
object	O
,	O
I	O
know	O
of	O
the	O
following	O
ways	O
to	O
loop	O
through	O
all	O
elements	O
:	O
Basic	O
for	O
loop	O
(	O
of	O
course	O
,	O
there	O
'	O
re	O
equivalent	O
while	O
/	O
do	O
while	O
loops	O
as	O
well	O
)	O
#	O
pre	O
Note	O
:	O
As	O
@	O
amarseillan	O
pointed	O
out	O
,	O
this	O
form	O
is	O
a	O
poor	O
choice	O
for	O
iterating	O
over	O
List	B-api_mention
s	O
because	O
the	O
actual	O
implementation	O
of	O
the	O
get	O
method	O
may	O
not	O
be	O
as	O
efficient	O
as	O
when	O
using	O
an	O
Iterator	B-api_mention
.	O
For	O
example	O
,	O
LinkedList	B-api_mention
implementations	O
must	O
traverse	O
all	O
of	O
the	O
elements	O
preceding	O
i	O
to	O
get	O
the	O
i	O
-	O
th	O
element	O
.	O
In	O
the	O
above	O
example	O
there	O
'	O
s	O
no	O
way	O
for	O
the	O
List	B-api_mention
implementation	O
to	O
"	O
save	O
its	O
place	O
"	O
to	O
make	O
future	O
iterations	O
more	O
efficient	O
.	O
For	O
an	O
ArrayList	B-api_mention
it	O
doesn	O
'	O
t	O
really	O
matter	O
because	O
the	O
complexity	O
/	O
cost	O
of	O
get	O
is	O
constant	O
time	O
(	O
O	O
(	O
1	O
)	O
)	O
whereas	O
for	O
a	O
LinkedList	B-api_mention
is	O
it	O
proportional	O
to	O
the	O
size	O
of	O
the	O
list	O
(	O
O	O
(	O
n	O
)	O
)	O
.	O
For	O
more	O
information	O
about	O
the	O
computational	O
complexity	O
of	O
the	O
built	O
-	O
in	O
Collections	B-api_mention
implementations	O
,	O
check	O
out	O
this	O
question	O
.	O
Enhanced	O
for	O
loop	O
(	O
nicely	O
explained	O
in	O
this	O
question	O
)	O
#	O
pre	O
Iterator	B-api_mention
#	O
pre	O
EDIT	O
:	O
Added	O
ListIterator	B-api_mention
ListIterator	I-api_mention
#	O
pre	O
EDIT	O
:	O
Added	O
"	O
functional	O
-	O
style	O
"	O
solution	O
(	O
thanks	O
Dave	O
Newton	O
)	O
Functional	O
Java	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
/	O
/	O
can	O
apply	O
a	O
transformation	O
function	O
for	O
e	O
EDIT	O
:	O
Added	O
map	O
method	O
from	O
Java	O
8	O
'	O
s	O
Stream	O
API	O
(	O
see	O
@	O
i	O
_	O
am	O
_	O
zero	O
'	O
s	O
answer	O
)	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
.	O
.	O
.	O
In	O
Java	O
8	O
collection	O
classes	O
that	O
implement	O
Iterable	B-api_mention
(	O
for	O
example	O
all	O
List	B-api_mention
s	O
)	O
now	O
have	O
a	O
forEach	B-api_mention
method	O
,	O
which	O
can	O
be	O
used	O
instead	O
of	O
the	O
for	O
loop	O
statement	O
demonstrated	O
above	O
.	O
(	O
Here	O
is	O
another	O
question	O
that	O
provides	O
a	O
good	O
comparison	O
.	O
)	O
#	O
pre	O
What	O
other	O
ways	O
are	O
there	O
,	O
if	O
any	O
?	O
I	O
feel	O
like	O
this	O
has	O
got	O
to	O
be	O
a	O
duplicate	O
,	O
but	O
I	O
haven	O
'	O
t	O
been	O
able	O
to	O
find	O
what	O
I	O
'	O
m	O
looking	O
for	O
,	O
so	O
I	O
apologize	O
for	O
this	O
question	O
potentially	O
being	O
redundant	O
.	O
(	O
BTW	O
,	O
my	O
interest	O
does	O
not	O
stem	O
at	O
all	O
from	O
a	O
desire	O
to	O
optimize	O
performance	O
;	O
I	O
just	O
want	O
to	O
know	O
what	O
forms	O
are	O
available	O
to	O
me	O
as	O
a	O
developer	O
.	O
)	O
EDIT	O
:	O
Moved	O
ListIterationExample	O
.	O
java	O
to	O
a	O
suggested	O
answer	O
Question	O
-	O
32323081	O
,	O
answer	O
-	O
32323641	O
First	O
of	O
all	O
,	O
you	O
don	O
'	O
have	O
to	O
overload	O
:	O
D	O
-	O
overloading	O
is	O
never	O
a	O
necessity	O
;	O
use	O
2	O
different	O
method	O
names	O
,	O
e	O
.	O
g	O
.	O
foo	O
and	O
fooX	O
Secondly	O
,	O
I	O
don	O
'	O
t	O
see	O
why	O
you	O
need	O
2	O
methods	O
here	O
.	O
If	O
you	O
want	O
to	O
handle	O
checked	O
and	O
unchecked	O
exceptions	O
differently	O
,	O
it	O
can	O
be	O
done	O
at	O
runtime	O
.	O
To	O
achieve	O
"	O
exception	O
transparency	O
"	O
,	O
you	O
can	O
do	O
#	O
pre	O
Finally	O
,	O
disambiguity	O
can	O
be	O
achieved	O
throw	O
lambda	O
return	O
type	O
;	O
the	O
compiler	O
uses	O
the	O
return	O
type	O
as	O
if	O
using	O
an	O
argument	O
type	O
for	O
choosing	O
the	O
most	O
specific	O
method	O
.	O
This	O
gives	O
us	O
the	O
idea	O
to	O
wrap	O
the	O
value	O
together	O
with	O
the	O
exception	O
type	O
,	O
as	O
Result	O
<	O
T	O
>	O
,	O
a	O
"	O
monad	O
"	O
as	O
they	O
say	O
.	O
#	O
pre	O
Question	O
-	O
24885223	O
I	O
don	O
'	O
t	O
know	O
whether	O
I	O
am	O
asking	O
the	O
right	O
question	O
.	O
I	O
was	O
exploring	O
RecyclerView	B-api_mention
and	O
I	O
was	O
surprised	O
to	O
see	O
that	O
RecyclerView	B-api_mention
does	O
not	O
have	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Because	O
RecyclerView	B-api_mention
extends	O
#	O
blockquote	O
and	O
ListView	B-api_mention
extends	O
#	O
blockquote	O
.	O
However	O
I	O
solved	O
my	O
problem	O
by	O
writing	O
onClick	B-api_mention
in	O
my	O
RecyclerView	B-api_mention
.	I-api_mention
Adapter	I-api_mention
:	O
#	O
pre	O
But	O
still	O
I	O
want	O
to	O
know	O
why	O
Google	O
removed	O
onItemClickListener	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
Is	O
there	O
a	O
performance	O
issue	O
or	O
something	O
else	O
?	O
Question	O
-	O
14534767	O
,	O
answer	O
-	O
34073047	O
Another	O
option	O
is	O
to	O
use	O
Apache	O
Commons	O
StrBuilder	B-api_mention
,	O
which	O
has	O
the	O
functionality	O
that	O
'	O
s	O
lacking	O
in	O
StringBuilder	B-api_mention
.	O
StrBuilder	B-api_mention
.	I-api_mention
appendLn	I-api_mention
(	I-api_mention
)	I-api_mention
Question	O
-	O
5374311	O
,	O
answer	O
-	O
17909839	O
The	O
correct	O
way	O
to	O
do	O
this	O
is	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stock	O
_	O
list	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
I	O
'	O
d	O
like	O
to	O
add	O
to	O
the	O
other	O
great	O
answers	O
here	O
and	O
explain	O
how	O
you	O
could	O
have	O
used	O
the	O
Javadocs	O
to	O
answer	O
your	O
question	O
.	O
The	O
Javadoc	O
for	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
no	O
arguments	O
)	O
is	O
here	O
.	O
As	O
you	O
can	O
see	O
,	O
this	O
method	O
returns	O
an	O
Object	B-api_mention
[	O
]	O
and	O
not	O
String	B-api_mention
[	O
]	O
which	O
is	O
an	O
array	O
of	O
the	O
runtime	O
type	O
of	O
your	O
list	O
:	O
#	O
blockquote	O
Right	O
below	O
that	O
method	O
,	O
though	O
,	O
is	O
the	O
Javadoc	O
for	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
As	O
you	O
can	O
see	O
,	O
this	O
method	O
returns	O
a	O
T	O
[	O
]	O
where	O
T	O
is	O
the	O
type	O
of	O
the	O
array	O
you	O
pass	O
in	O
.	O
At	O
first	O
this	O
seems	O
like	O
what	O
you	O
'	O
re	O
looking	O
for	O
,	O
but	O
it	O
'	O
s	O
unclear	O
exactly	O
why	O
you	O
'	O
re	O
passing	O
in	O
an	O
array	O
(	O
are	O
you	O
adding	O
to	O
it	O
,	O
using	O
it	O
for	O
just	O
the	O
type	O
,	O
etc	O
)	O
.	O
The	O
documentation	O
makes	O
it	O
clear	O
that	O
the	O
purpose	O
of	O
the	O
passed	O
array	O
is	O
essentially	O
to	O
define	O
the	O
type	O
of	O
array	O
to	O
return	O
(	O
which	O
is	O
exactly	O
your	O
use	O
case	O
)	O
:	O
#	O
blockquote	O
Of	O
course	O
,	O
an	O
understanding	O
of	O
generics	O
(	O
as	O
described	O
in	O
the	O
other	O
answers	O
)	O
is	O
required	O
to	O
really	O
understand	O
the	O
difference	O
between	O
these	O
two	O
methods	O
.	O
Nevertheless	O
,	O
if	O
you	O
first	O
go	O
to	O
the	O
Javadocs	O
,	O
you	O
will	O
usually	O
find	O
your	O
answer	O
and	O
then	O
see	O
for	O
yourself	O
what	O
else	O
you	O
need	O
to	O
learn	O
(	O
if	O
you	O
really	O
do	O
)	O
.	O
Also	O
note	O
that	O
reading	O
the	O
Javadocs	O
here	O
helps	O
you	O
to	O
understand	O
what	O
the	O
structure	O
of	O
the	O
array	O
you	O
pass	O
in	O
should	O
be	O
.	O
Though	O
it	O
may	O
not	O
really	O
practically	O
matter	O
,	O
you	O
should	O
not	O
pass	O
in	O
an	O
empty	O
array	O
like	O
this	O
:	O
String	B-api_mention
[	O
]	O
stockArr	O
=	O
stockList	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Because	O
,	O
from	O
the	O
doc	O
,	O
this	O
implementation	O
checks	O
if	O
the	O
array	O
is	O
large	O
enough	O
to	O
contain	O
the	O
collection	O
;	O
if	O
not	O
,	O
it	O
allocates	O
a	O
new	O
array	O
of	O
the	O
correct	O
size	O
and	O
type	O
(	O
using	O
reflection	O
)	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
the	O
extra	O
overhead	O
in	O
creating	O
a	O
new	O
array	O
when	O
you	O
could	O
easily	O
pass	O
in	O
the	O
size	O
.	O
As	O
is	O
usually	O
the	O
case	O
,	O
the	O
Javadocs	O
provide	O
you	O
with	O
a	O
wealth	O
of	O
information	O
and	O
direction	O
.	O
Hey	O
wait	O
a	O
minute	O
,	O
what	O
'	O
s	O
reflection	O
?	O
Question	O
-	O
21947452	O
,	O
answer	O
-	O
29434641	O
I	O
performed	O
tests	O
on	O
Eclipse	O
vs	O
Netbeans	O
8	O
.	O
0	O
.	O
2	O
,	O
both	O
with	O
Java	O
version	O
1	O
.	O
8	O
;	O
I	O
used	O
System	B-api_mention
.	I-api_mention
nanoTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
measurements	O
.	O
Eclipse	O
:	O
I	O
got	O
the	O
same	O
time	O
on	O
both	O
cases	O
-	O
around	O
1	O
.	O
564	O
seconds	O
.	O
Netbeans	O
:	O
#	O
li	O
Using	O
"	O
#	O
"	O
:	O
1	O
.	O
536	O
seconds	O
#	O
li	O
Using	O
"	O
B	O
"	O
:	O
44	O
.	O
164	O
seconds	O
So	O
,	O
it	O
looks	O
like	O
Netbeans	O
has	O
bad	O
performance	O
on	O
print	O
to	O
console	O
.	O
After	O
more	O
research	O
I	O
realized	O
that	O
the	O
problem	O
is	O
line	O
-	O
wrapping	O
of	O
the	O
max	O
buffer	O
of	O
Netbeans	O
(	O
it	O
'	O
s	O
not	O
restricted	O
to	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
command	O
)	O
,	O
demonstrated	O
by	O
this	O
code	O
:	O
#	O
pre	O
The	O
time	O
results	O
are	O
less	O
then	O
1	O
millisecond	O
every	O
iteration	O
except	O
every	O
fifth	O
iteration	O
,	O
when	O
the	O
time	O
result	O
is	O
around	O
225	O
millisecond	O
.	O
Something	O
like	O
(	O
in	O
nanoseconds	O
)	O
:	O
#	O
pre	O
And	O
so	O
on	O
.	O
.	O
Summary	O
:	O
#	O
li	O
Eclipse	O
works	O
perfectly	O
with	O
"	O
B	O
"	O
#	O
li	O
Netbeans	O
has	O
a	O
line	O
-	O
wrapping	O
problem	O
that	O
can	O
be	O
solved	O
(	O
because	O
the	O
problem	O
does	O
not	O
occur	O
in	O
eclipse	O
)	O
(	O
without	O
adding	O
space	O
after	O
B	O
(	O
"	O
B	O
"	O
)	O
)	O
.	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20889556	O
To	O
complement	O
the	O
given	O
answers	O
,	O
also	O
take	O
note	O
of	O
the	O
following	O
:	O
#	O
pre	O
This	O
code	O
will	O
also	O
print	O
:	O
false	O
As	O
user	O
Jay	O
has	O
claimed	O
in	O
a	O
comment	O
for	O
the	O
accepted	O
answer	O
,	O
care	O
must	O
be	O
taken	O
when	O
using	O
operator	O
=	O
=	O
on	O
objects	O
,	O
here	O
you	O
'	O
re	O
checking	O
if	O
both	O
references	O
are	O
the	O
same	O
,	O
which	O
is	O
not	O
,	O
because	O
they	O
are	O
different	O
objets	O
,	O
although	O
they	O
represent	O
the	O
very	O
same	O
value	O
.	O
To	O
compare	O
objects	O
,	O
you	O
should	O
use	O
the	O
equals	O
method	O
instead	O
:	O
#	O
pre	O
This	O
will	O
print	O
:	O
true	O
You	O
may	O
ask	O
,	O
But	O
then	O
why	O
the	O
first	O
line	O
printed	O
true	O
?	O
.	O
Checking	O
the	O
source	O
code	O
for	O
the	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
method	O
,	O
you	O
can	O
see	O
the	O
following	O
:	O
#	O
pre	O
If	O
the	O
param	O
is	O
an	O
integer	O
between	O
IntegerCache	B-api_mention
.	I-api_mention
low	I-api_mention
(	O
defaulted	O
to	O
-	O
128	O
)	O
and	O
IntegerCache	B-api_mention
.	I-api_mention
high	I-api_mention
(	O
calculated	O
at	O
runtime	O
with	O
minimum	O
value	O
127	O
)	O
then	O
a	O
pre	O
-	O
allocated	O
(	O
cached	O
)	O
object	O
is	O
returned	O
.	O
So	O
when	O
you	O
use	O
127	O
as	O
parameter	O
,	O
you	O
'	O
re	O
getting	O
two	O
references	O
to	O
same	O
cached	O
object	O
and	O
getting	O
true	O
in	O
the	O
comparison	O
of	O
the	O
references	O
.	O
Question	O
-	O
6667243	O
,	O
answer	O
-	O
6667310	O
You	O
can	O
use	O
Mode	O
.	O
mode1	O
.	B-api_mention
name	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
however	O
you	O
often	O
don	O
'	O
t	O
need	O
to	O
do	O
this	O
.	O
Mode	O
mode	O
=	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
14491966	O
,	O
answer	O
-	O
14492320	O
Your	O
QuickRandom	B-api_mention
implementation	O
hasn	O
'	O
t	O
really	O
an	O
uniform	O
distribution	O
.	O
The	O
frequencies	O
are	O
generally	O
higher	O
at	O
the	O
lower	O
values	O
while	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
a	O
more	O
uniform	O
distribution	O
.	O
Here	O
'	O
s	O
a	O
SSCCE	O
which	O
shows	O
that	O
:	O
#	O
pre	O
The	O
average	O
result	O
looks	O
like	O
this	O
:	O
#	O
pre	O
If	O
you	O
repeat	O
the	O
test	O
,	O
you	O
'	O
ll	O
see	O
that	O
the	O
QR	O
distribution	O
varies	O
heavily	O
,	O
depending	O
on	O
the	O
initial	O
seeds	O
,	O
while	O
the	O
MR	O
distribution	O
is	O
stable	O
.	O
Sometimes	O
it	O
reaches	O
the	O
desired	O
uniform	O
distribution	O
,	O
but	O
more	O
than	O
often	O
it	O
doesn	O
'	O
t	O
.	O
Here	O
'	O
s	O
one	O
of	O
the	O
more	O
extreme	O
examples	O
,	O
it	O
'	O
s	O
even	O
beyond	O
the	O
borders	O
of	O
the	O
graph	O
:	O
#	O
pre	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271668	O
I	O
'	O
m	O
assuming	O
this	O
is	O
happening	O
for	O
an	O
anonymous	O
class	O
.	O
When	O
you	O
create	O
an	O
anonymous	O
class	O
you	O
actually	O
create	O
a	O
class	O
that	O
extends	O
the	O
class	O
whose	O
name	O
you	O
got	O
.	O
The	O
"	O
cleaner	O
"	O
way	O
to	O
get	O
the	O
name	O
you	O
want	O
is	O
:	O
If	O
your	O
class	O
is	O
an	O
anonymous	O
inner	O
class	O
,	O
getSuperClass	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
give	O
you	O
the	O
class	O
that	O
it	O
was	O
created	O
from	O
.	O
If	O
you	O
created	O
it	O
from	O
an	O
interface	O
than	O
you	O
'	O
re	O
sort	O
of	O
SOL	O
because	O
the	O
best	O
you	O
can	O
do	O
is	O
getInterfaces	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
might	O
give	O
you	O
more	O
than	O
one	O
interface	O
.	O
The	O
"	O
hacky	O
"	O
way	O
is	O
to	O
just	O
get	O
the	O
name	O
with	O
getClassName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
use	O
a	O
regex	O
to	O
drop	O
the	O
$	O
1	O
.	O
Question	O
-	O
27504925	O
,	O
answer	O
-	O
27505121	O
I	O
'	O
d	O
like	O
to	O
point	O
out	O
this	O
article	O
.	O
It	O
seems	O
as	O
though	O
arrays	O
and	O
objects	O
follow	O
different	O
opcodes	O
.	O
I	O
can	O
'	O
t	O
honestly	O
summarize	O
it	O
more	O
than	O
that	O
however	O
it	O
seems	O
,	O
arrays	O
are	O
simply	O
not	O
treated	O
as	O
Objects	B-api_mention
like	O
we	O
'	O
re	O
normally	O
used	O
to	O
so	O
they	O
don	O
'	O
t	O
inherit	O
Object	B-api_mention
methods	O
.	O
Full	O
credits	O
to	O
the	O
author	O
of	O
that	O
post	O
as	O
it	O
'	O
s	O
a	O
very	O
interesting	O
read	O
,	O
both	O
short	O
&	O
detailed	O
.	O
Upon	O
further	O
digging	O
into	O
the	O
topic	O
via	O
multiple	O
sources	O
I	O
'	O
ve	O
decided	O
to	O
give	O
a	O
more	O
elaborate	O
version	O
of	O
my	O
previous	O
answer	O
.	O
The	O
first	O
thing	O
to	O
note	O
that	O
instantiation	O
of	O
Objects	B-api_mention
and	O
Arrays	B-api_mention
are	O
very	O
different	O
within	O
the	O
JVM	O
,	O
their	O
follow	O
their	O
respective	O
bytecode	O
.	O
Object	B-api_mention
:	O
Object	B-api_mention
instantiation	O
follows	O
a	O
simple	O
Opcode	O
new	O
which	O
is	O
a	O
combination	O
of	O
two	O
operands	O
-	O
indexbyte1	O
&	O
indexbyte2	O
.	O
Once	O
instantiated	O
the	O
JVM	O
pushes	O
the	O
reference	O
to	O
this	O
object	O
onto	O
the	O
stack	O
.	O
This	O
occurs	O
for	O
all	O
objects	O
irrespective	O
of	O
their	O
types	O
.	O
Arrays	B-api_mention
:	O
Array	B-api_mention
Opcodes	O
(	O
regarding	O
instantiation	O
of	O
an	O
array	O
)	O
however	O
are	O
divided	O
into	O
three	O
different	O
codes	O
.	O
#	O
blockquote	O
newarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
that	O
involve	O
primitive	O
datatypes	O
(	O
byte	O
short	O
char	O
int	O
long	O
float	O
double	O
boolean	O
)	O
rather	O
than	O
object	O
references	O
.	O
#	O
blockquote	O
anewarray	O
opcode	O
is	O
used	O
when	O
creating	O
arrays	O
of	O
object	O
references	O
#	O
blockquote	O
multianewarray	O
instruction	O
is	O
used	O
when	O
allocating	O
multi	O
-	O
dimensional	O
arrays	O
Object	B-api_mention
can	O
be	O
a	O
class	O
instance	O
or	O
an	O
array	O
.	O
Take	O
from	O
Oracle	O
Docs	O
#	O
blockquote	O
BUT	O
#	O
blockquote	O
This	O
goes	O
hand	O
in	O
hand	O
with	O
the	O
information	O
regarding	O
the	O
opcodes	O
.	O
Arrays	O
are	O
simply	O
not	O
developed	O
to	O
be	O
class	O
interfaces	O
but	O
are	O
instead	O
explicitly	O
created	O
by	O
array	O
creation	O
expression	O
thus	O
naturally	O
wouldn	O
'	O
t	O
implicitly	O
be	O
able	O
to	O
inherit	O
and	O
/	O
or	O
override	O
Object	B-api_mention
.	O
As	O
we	O
have	O
seen	O
,	O
it	O
has	O
nothing	O
to	O
do	O
with	O
the	O
fact	O
that	O
arrays	O
may	O
hold	O
primitive	O
datatypes	O
.	O
After	O
giving	O
it	O
some	O
thought	O
though	O
,	O
it	O
isn	O
'	O
t	O
very	O
common	O
to	O
come	O
across	O
situations	O
where	O
one	O
might	O
want	O
to	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
however	O
was	O
still	O
a	O
very	O
interesting	O
question	O
to	O
try	O
and	O
answer	O
.	O
Resources	O
:	O
Oracle	O
-	O
Docs	O
chapter	O
4	O
.	O
3	O
.	O
1	O
Oracle	O
-	O
Docs	O
chapter	O
15	O
.	O
10	O
.	O
1	O
Artima	O
-	O
UnderTheHood	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
7800008	O
Strictly	O
speaking	O
-	O
you	O
have	O
no	O
choice	O
but	O
calling	O
either	O
hostname	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
-	O
on	O
Unix	O
gethostname	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
is	O
the	O
name	O
of	O
your	O
computer	O
.	O
Any	O
attempt	O
to	O
determine	O
the	O
hostname	O
by	O
an	O
IP	O
address	O
like	O
this	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
bound	O
to	O
fail	O
in	O
some	O
circumstances	O
:	O
#	O
li	O
The	O
IP	O
address	O
might	O
not	O
resolve	O
into	O
any	O
name	O
.	O
Bad	O
DNS	O
setup	O
,	O
bad	O
system	O
setup	O
or	O
bad	O
provider	O
setup	O
may	O
be	O
the	O
reason	O
for	O
this	O
.	O
#	O
li	O
A	O
name	O
in	O
DNS	O
can	O
have	O
many	O
aliases	O
called	O
CNAMEs	O
.	O
These	O
can	O
only	O
be	O
resolved	O
in	O
one	O
direction	O
properly	O
:	O
name	O
to	O
address	O
.	O
The	O
reverse	O
direction	O
is	O
ambiguous	O
.	O
Which	O
one	O
is	O
the	O
"	O
official	O
"	O
name	O
?	O
#	O
li	O
A	O
host	O
can	O
have	O
many	O
different	O
IP	O
addresses	O
-	O
and	O
each	O
address	O
can	O
have	O
many	O
different	O
names	O
.	O
Two	O
common	O
cases	O
are	O
:	O
One	O
ethernet	O
port	O
has	O
several	O
"	O
logical	O
"	O
IP	O
addresses	O
or	O
the	O
computer	O
has	O
several	O
ethernet	O
ports	O
.	O
It	O
is	O
configurable	O
whether	O
they	O
share	O
an	O
IP	O
or	O
have	O
different	O
IPs	O
.	O
This	O
is	O
called	O
"	O
multihomed	O
"	O
.	O
#	O
li	O
One	O
Name	O
in	O
DNS	O
can	O
resolve	O
to	O
several	O
IP	O
Addresses	O
.	O
And	O
not	O
all	O
of	O
those	O
addresses	O
must	O
be	O
located	O
on	O
the	O
same	O
computer	O
!	O
(	O
Usecase	O
:	O
A	O
simple	O
form	O
of	O
load	O
-	O
balancing	O
)	O
#	O
li	O
Let	O
'	O
s	O
not	O
even	O
start	O
talking	O
about	O
dynamic	O
IP	O
addresses	O
.	O
Also	O
don	O
'	O
t	O
confuse	O
the	O
name	O
of	O
an	O
IP	O
-	O
address	O
with	O
the	O
name	O
of	O
the	O
host	O
(	O
hostname	O
)	O
.	O
A	O
metaphor	O
might	O
make	O
it	O
clearer	O
:	O
#	O
blockquote	O
This	O
illustrates	O
it	O
pretty	O
much	O
I	O
think	O
.	O
The	O
good	O
news	O
is	O
:	O
The	O
real	O
hostname	O
is	O
usually	O
not	O
necessary	O
.	O
In	O
most	O
cases	O
any	O
name	O
which	O
resolves	O
into	O
an	O
IP	O
address	O
on	O
this	O
host	O
will	O
do	O
.	O
(	O
The	O
stranger	O
might	O
enter	O
the	O
city	O
by	O
Northgate	O
,	O
but	O
helpful	O
locals	O
translate	O
the	O
"	O
2nd	O
left	O
"	O
part	O
.	O
)	O
If	O
the	O
remaining	O
corner	O
cases	O
you	O
must	O
use	O
the	O
definitive	O
source	O
of	O
this	O
configuration	O
setting	O
-	O
which	O
is	O
the	O
C	O
function	O
gethostname	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
That	O
function	O
is	O
also	O
called	O
by	O
the	O
program	O
hostname	O
.	O
Question	O
-	O
18532488	O
In	O
many	O
other	O
languages	O
,	O
eg	O
.	O
Haskell	O
,	O
it	O
is	O
easy	O
to	O
repeat	O
a	O
value	O
or	O
function	O
multiple	O
times	O
,	O
eg	O
.	O
to	O
get	O
a	O
list	O
of	O
8	O
copies	O
of	O
the	O
value	O
1	O
:	O
take	O
8	O
(	O
args	O
)	O
but	O
I	O
haven	O
'	O
t	O
found	O
this	O
yet	O
in	O
Java	O
8	O
.	O
Is	O
there	O
such	O
a	O
function	O
in	O
Java	O
8	O
'	O
s	O
JDK	O
?	O
Or	O
alternatively	O
something	O
equivalent	O
to	O
a	O
range	O
like	O
[	O
1	O
.	O
.	O
8	O
]	O
It	O
would	O
seem	O
an	O
obvious	O
replacement	O
for	O
a	O
verbose	O
statement	O
in	O
Java	O
like	O
#	O
pre	O
to	O
have	O
something	O
like	O
Range	B-api_mention
.	I-api_mention
from	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
this	O
particular	O
example	O
doesn	O
'	O
t	O
look	O
much	O
more	O
concise	O
actually	O
.	O
.	O
.	O
but	O
hopefully	O
it	O
'	O
s	O
more	O
readable	O
.	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
32542424	O
What	O
you	O
can	O
do	O
is	O
scan	O
the	O
entire	O
text	O
using	O
Scanner	B-api_mention
and	O
go	O
through	O
the	O
text	O
line	O
by	O
line	O
.	O
Of	O
course	O
you	O
should	O
import	O
the	O
following	O
:	O
#	O
pre	O
Scanner	B-api_mention
basically	O
scans	O
all	O
the	O
text	O
.	O
The	O
while	O
loop	O
is	O
used	O
to	O
traverse	O
through	O
the	O
entire	O
text	O
.	O
The	O
.	B-api_mention
hasNextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
is	O
a	O
boolean	O
that	O
returns	O
true	O
if	O
there	O
are	O
still	O
more	O
lines	O
in	O
the	O
text	O
.	O
The	O
.	B-api_mention
nextLine	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
function	O
gives	O
you	O
an	O
entire	O
line	O
as	O
a	O
String	B-api_mention
which	O
you	O
can	O
then	O
use	O
the	O
way	O
you	O
want	O
.	O
Try	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
print	O
the	O
text	O
.	O
Side	O
Note	O
:	O
.	O
txt	O
is	O
the	O
file	O
type	O
text	O
.	O
Question	O
-	O
15430247	O
,	O
answer	O
-	O
15446006	O
I	O
actually	O
wrote	O
a	O
blog	O
post	O
on	O
the	O
topic	O
2	O
months	O
ago	O
.	O
The	O
article	O
is	O
for	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
but	O
Java	O
'	O
s	O
ArrayList	B-api_mention
has	O
a	O
very	O
similar	O
implementation	O
.	O
Since	O
ArrayList	B-api_mention
is	O
implemented	O
using	O
a	O
dynamic	O
array	O
,	O
it	O
increases	O
in	O
size	O
on	O
demand	O
.	O
So	O
the	O
reason	O
for	O
the	O
capacity	O
constructor	O
is	O
for	O
optimisation	O
purposes	O
.	O
When	O
one	O
of	O
these	O
resizings	O
operation	O
occurs	O
,	O
the	O
ArrayList	B-api_mention
copies	O
the	O
contents	O
of	O
the	O
array	O
into	O
a	O
new	O
array	O
that	O
is	O
twice	O
the	O
capacity	O
of	O
the	O
old	O
one	O
.	O
This	O
operation	O
runs	O
in	O
O	O
(	O
n	O
)	O
time	O
.	O
Example	O
Here	O
is	O
an	O
example	O
of	O
how	O
the	O
ArrayList	B-api_mention
would	O
increase	O
in	O
size	O
:	O
#	O
pre	O
So	O
the	O
list	O
starts	O
with	O
a	O
capacity	O
of	O
10	O
,	O
when	O
the	O
11th	O
item	O
is	O
added	O
it	O
is	O
increase	O
by	O
50	O
%	O
+	O
1	O
to	O
16	O
.	O
On	O
the	O
17th	O
item	O
the	O
ArrayList	B-api_mention
is	O
increased	O
again	O
to	O
25	O
and	O
so	O
on	O
.	O
Now	O
consider	O
the	O
example	O
where	O
we	O
'	O
re	O
creating	O
a	O
list	O
where	O
the	O
desired	O
capacity	O
is	O
already	O
known	O
as	O
1000000	O
.	O
Creating	O
the	O
ArrayList	B-api_mention
without	O
the	O
size	O
constructor	O
will	O
call	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
1000000	O
times	O
which	O
takes	O
O	O
(	O
1	O
)	O
normally	O
or	O
O	O
(	O
n	O
)	O
on	O
resize	O
.	O
#	O
blockquote	O
Compare	O
this	O
using	O
the	O
constructor	O
and	O
then	O
calling	O
ArrayList	B-api_mention
.	I-api_mention
add	I-api_mention
which	O
is	O
guaranteed	O
to	O
run	O
in	O
O	O
(	O
1	O
)	O
.	O
#	O
blockquote	O
Java	O
vs	O
C	O
#	O
Java	O
is	O
as	O
above	O
,	O
starting	O
at	O
10	O
and	O
increasing	O
each	O
resize	O
at	O
50	O
%	O
+	O
1	O
.	O
C	O
#	O
starts	O
at	O
4	O
and	O
increases	O
much	O
more	O
aggressively	O
,	O
doubling	O
at	O
each	O
resize	O
.	O
The	O
1000000	O
adds	O
example	O
from	O
above	O
for	O
C	O
#	O
uses	O
3097084	O
operations	O
.	O
References	O
#	O
li	O
My	O
blog	O
post	O
on	O
C	O
#	O
'	O
s	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
#	O
li	O
Java	O
'	O
s	O
ArrayList	B-api_mention
source	O
code	O
Question	O
-	O
5982447	O
,	O
answer	O
-	O
5982478	O
Use	O
the	O
Set	B-api_mention
#	I-api_mention
toArray	I-api_mention
(	I-api_mention
T	I-api_mention
[	I-api_mention
]	I-api_mention
)	I-api_mention
method	O
taking	O
a	O
typed	O
array	O
argument	O
of	O
the	O
same	O
size	O
.	O
String	B-api_mention
[	O
]	O
GPXFILES1	O
=	O
myset	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
A	O
different	O
size	O
can	O
also	O
,	O
but	O
that	O
would	O
force	O
the	O
toArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
create	O
a	O
new	O
array	O
to	O
return	O
instead	O
of	O
reusing	O
the	O
provided	O
argument	O
,	O
which	O
may	O
end	O
up	O
to	O
be	O
less	O
efficient	O
.	O
See	O
also	O
the	O
source	O
code	O
of	O
AbstractCollection	B-api_mention
#	I-api_mention
toArray	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
34509566	O
,	O
answer	O
-	O
34529067	O
Keep	O
in	O
mind	O
that	O
Java	O
holds	O
a	O
pool	O
of	O
all	O
string	O
literals	O
found	O
in	O
program	O
,	O
used	O
for	O
matching	O
purposes	O
among	O
others	O
,	O
so	O
any	O
different	O
string	O
literal	O
concatenation	O
above	O
will	O
lead	O
to	O
the	O
same	O
object	O
,	O
to	O
the	O
same	O
string	O
literal	O
.	O
You	O
can	O
check	O
out	O
this	O
useful	O
article	O
for	O
more	O
.	O
On	O
the	O
other	O
hand	O
,	O
the	O
concatenation	O
of	O
a	O
String	B-api_mention
object	O
and	O
a	O
literal	O
(	O
case	O
c	O
+	O
StringLiteral	O
)	O
will	O
lead	O
to	O
the	O
creation	O
of	O
a	O
as	O
StringBuilder	B-api_mention
object	O
at	O
runtime	O
,	O
different	O
to	O
the	O
literals	O
found	O
in	O
pool	O
.	O
Question	O
-	O
5192512	O
,	O
answer	O
-	O
22694891	O
I	O
think	O
many	O
of	O
the	O
answers	O
here	O
may	O
be	O
missing	O
a	O
quality	O
method	O
included	O
in	O
StringBuilder	B-api_mention
:	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
know	O
this	O
is	O
a	O
late	O
reply	O
;	O
however	O
,	O
this	O
should	O
be	O
made	O
known	O
(	O
and	O
explained	O
a	O
bit	O
more	O
thoroughly	O
)	O
.	O
Let	O
'	O
s	O
say	O
you	O
have	O
a	O
StringBuilder	B-api_mention
table	O
-	O
which	O
you	O
wish	O
to	O
modify	O
,	O
dynamically	O
,	O
throughout	O
your	O
program	O
(	O
one	O
I	O
am	O
working	O
on	O
right	O
now	O
does	O
this	O
)	O
,	O
e	O
.	O
g	O
.	O
StringBuilder	B-api_mention
table	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
If	O
you	O
are	O
looping	O
through	O
the	O
method	O
and	O
alter	O
the	O
content	O
,	O
use	O
the	O
content	O
,	O
then	O
wish	O
to	O
discard	O
the	O
content	O
to	O
"	O
clean	O
up	O
"	O
the	O
StringBuilder	B-api_mention
for	O
the	O
next	O
iteration	O
,	O
you	O
can	O
delete	O
it	O
'	O
s	O
contents	O
,	O
e	O
.	O
g	O
.	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
start	O
and	O
end	O
being	O
the	O
indices	O
of	O
the	O
chars	O
you	O
wish	O
to	O
remove	O
.	O
Don	O
'	O
t	O
know	O
the	O
length	O
in	O
chars	O
and	O
want	O
to	O
delete	O
the	O
whole	O
thing	O
?	O
table	O
.	B-api_mention
delete	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
NOW	O
,	O
for	O
the	O
kicker	O
.	O
StringBuilders	B-api_mention
,	O
as	O
mentioned	O
previously	O
,	O
take	O
a	O
lot	O
of	O
overhead	O
when	O
altered	O
frequently	O
(	O
and	O
can	O
cause	O
safety	O
issues	O
with	O
regard	O
to	O
threading	O
)	O
;	O
therefore	O
,	O
use	O
StringBuffer	B-api_mention
-	O
same	O
as	O
StringBuilder	B-api_mention
(	O
with	O
a	O
few	O
exceptions	O
)	O
-	O
if	O
your	O
StringBuilder	B-api_mention
is	O
used	O
for	O
the	O
purpose	O
of	O
interfacing	O
with	O
the	O
user	O
.	O
Question	O
-	O
15621083	O
I	O
am	O
working	O
on	O
some	O
Java	O
code	O
which	O
needs	O
to	O
be	O
highly	O
optimized	O
as	O
it	O
will	O
run	O
in	O
hot	O
functions	O
that	O
are	O
invoked	O
at	O
many	O
points	O
in	O
my	O
main	O
program	O
logic	O
.	O
Part	O
of	O
this	O
code	O
involves	O
multiplying	O
double	O
variables	O
by	O
10	O
raised	O
to	O
arbitrary	O
non	O
-	O
negative	O
int	O
exponent	O
s	O
.	O
One	O
fast	O
way	O
(	O
edit	O
:	O
but	O
not	O
the	O
fastest	O
possible	O
,	O
see	O
Update	O
2	O
below	O
)	O
to	O
get	O
the	O
multiplied	O
value	O
is	O
to	O
switch	O
on	O
the	O
exponent	O
:	O
#	O
pre	O
The	O
commented	O
ellipses	O
above	O
indicate	O
that	O
the	O
case	O
int	O
constants	O
continue	O
incrementing	O
by	O
1	O
,	O
so	O
there	O
are	O
really	O
19	O
case	O
s	O
in	O
the	O
above	O
code	O
snippet	O
.	O
Since	O
I	O
wasn	O
'	O
t	O
sure	O
whether	O
I	O
would	O
actually	O
need	O
all	O
the	O
powers	O
of	O
10	O
in	O
case	O
statements	O
10	O
thru	O
18	O
,	O
I	O
ran	O
some	O
microbenchmarks	O
comparing	O
the	O
time	O
to	O
complete	O
10	O
million	O
operations	O
with	O
this	O
switch	O
statement	O
versus	O
a	O
switch	O
with	O
only	O
case	O
s	O
0	O
thru	O
9	O
(	O
with	O
the	O
exponent	O
limited	O
to	O
9	O
or	O
less	O
to	O
avoid	O
breaking	O
the	O
pared	O
-	O
down	O
switch	O
)	O
.	O
I	O
got	O
the	O
rather	O
surprising	O
(	O
to	O
me	O
,	O
at	O
least	O
!	O
)	O
result	O
that	O
the	O
longer	O
switch	O
with	O
more	O
case	O
statements	O
actually	O
ran	O
faster	O
.	O
On	O
a	O
lark	O
,	O
I	O
tried	O
adding	O
even	O
more	O
case	O
s	O
which	O
just	O
returned	O
dummy	O
values	O
,	O
and	O
found	O
that	O
I	O
could	O
get	O
the	O
switch	O
to	O
run	O
even	O
faster	O
with	O
around	O
22	O
-	O
27	O
declared	O
case	O
s	O
(	O
even	O
though	O
those	O
dummy	O
cases	O
are	O
never	O
actually	O
hit	O
while	O
the	O
code	O
is	O
running	O
)	O
.	O
(	O
Again	O
,	O
case	O
s	O
were	O
added	O
in	O
a	O
contiguous	O
fashion	O
by	O
incrementing	O
the	O
prior	O
case	O
constant	O
by	O
1	O
.	O
)	O
These	O
execution	O
time	O
differences	O
are	O
not	O
very	O
significant	O
:	O
for	O
a	O
random	O
exponent	O
between	O
0	O
and	O
10	O
,	O
the	O
dummy	O
padded	O
switch	O
statement	O
finishes	O
10	O
million	O
executions	O
in	O
1	O
.	O
49	O
secs	O
versus	O
1	O
.	O
54	O
secs	O
for	O
the	O
unpadded	O
version	O
,	O
for	O
a	O
grand	O
total	O
savings	O
of	O
5ns	O
per	O
execution	O
.	O
So	O
,	O
not	O
the	O
kind	O
of	O
thing	O
that	O
makes	O
obsessing	O
over	O
padding	O
out	O
a	O
switch	O
statement	O
worth	O
the	O
effort	O
from	O
an	O
optimization	O
standpoint	O
.	O
But	O
I	O
still	O
just	O
find	O
it	O
curious	O
and	O
counter	O
-	O
intuitive	O
that	O
a	O
switch	O
doesn	O
'	O
t	O
become	O
slower	O
(	O
or	O
perhaps	O
at	O
best	O
maintain	O
constant	O
O	O
(	O
1	O
)	O
time	O
)	O
to	O
execute	O
as	O
more	O
case	O
s	O
are	O
added	O
to	O
it	O
.	O
#	O
img	O
These	O
are	O
the	O
results	O
I	O
obtained	O
from	O
running	O
with	O
various	O
limits	O
on	O
the	O
randomly	O
-	O
generated	O
exponent	O
values	O
.	O
I	O
didn	O
'	O
t	O
include	O
the	O
results	O
all	O
the	O
way	O
down	O
to	O
1	O
for	O
the	O
exponent	O
limit	O
,	O
but	O
the	O
general	O
shape	O
of	O
the	O
curve	O
remains	O
the	O
same	O
,	O
with	O
a	O
ridge	O
around	O
the	O
12	O
-	O
17	O
case	O
mark	O
,	O
and	O
a	O
valley	O
between	O
18	O
-	O
28	O
.	O
All	O
tests	O
were	O
run	O
in	O
JUnitBenchmarks	O
using	O
shared	O
containers	O
for	O
the	O
random	O
values	O
to	O
ensure	O
identical	O
testing	O
inputs	O
.	O
I	O
also	O
ran	O
the	O
tests	O
both	O
in	O
order	O
from	O
longest	O
switch	O
statement	O
to	O
shortest	O
,	O
and	O
vice	O
-	O
versa	O
,	O
to	O
try	O
and	O
eliminate	O
the	O
possibility	O
of	O
ordering	O
-	O
related	O
test	O
problems	O
.	O
I	O
'	O
ve	O
put	O
my	O
testing	O
code	O
up	O
on	O
a	O
github	O
repo	O
if	O
anyone	O
wants	O
to	O
try	O
to	O
reproduce	O
these	O
results	O
.	O
So	O
,	O
what	O
'	O
s	O
going	O
on	O
here	O
?	O
Some	O
vagaries	O
of	O
my	O
architecture	O
or	O
micro	O
-	O
benchmark	O
construction	O
?	O
Or	O
is	O
the	O
Java	O
switch	O
really	O
a	O
little	O
faster	O
to	O
execute	O
in	O
the	O
18	O
to	O
28	O
case	O
range	O
than	O
it	O
is	O
from	O
11	O
up	O
to	O
17	O
?	O
github	O
test	O
repo	O
"	O
switch	O
-	O
experiment	O
"	O
UPDATE	O
:	O
I	O
cleaned	O
up	O
the	O
benchmarking	O
library	O
quite	O
a	O
bit	O
and	O
added	O
a	O
text	O
file	O
in	O
/	O
results	O
with	O
some	O
output	O
across	O
a	O
wider	O
range	O
of	O
possible	O
exponent	O
values	O
.	O
I	O
also	O
added	O
an	O
option	O
in	O
the	O
testing	O
code	O
not	O
to	O
throw	O
an	O
Exception	B-api_mention
from	O
default	O
,	O
but	O
this	O
doesn	O
'	O
t	O
appear	O
to	O
affect	O
the	O
results	O
.	O
UPDATE	O
2	O
:	O
Found	O
some	O
pretty	O
good	O
discussion	O
of	O
this	O
issue	O
from	O
back	O
in	O
2009	O
on	O
the	O
xkcd	O
forum	O
here	O
:	O
#	O
a	O
.	O
The	O
OP	O
'	O
s	O
discussion	O
of	O
using	O
Array	B-api_mention
.	I-api_mention
binarySearch	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gave	O
me	O
the	O
idea	O
for	O
a	O
simple	O
array	O
-	O
based	O
implementation	O
of	O
the	O
exponentiation	O
pattern	O
above	O
.	O
There	O
'	O
s	O
no	O
need	O
for	O
the	O
binary	O
search	O
since	O
I	O
know	O
what	O
the	O
entries	O
in	O
the	O
array	O
are	O
.	O
It	O
appears	O
to	O
run	O
about	O
3	O
times	O
faster	O
than	O
using	O
switch	O
,	O
obviously	O
at	O
the	O
expense	O
of	O
some	O
of	O
the	O
control	O
flow	O
that	O
switch	O
affords	O
.	O
That	O
code	O
has	O
been	O
added	O
to	O
the	O
github	O
repo	O
also	O
.	O
Question	O
-	O
23453287	O
,	O
answer	O
-	O
23456085	O
It	O
will	O
be	O
hard	O
to	O
find	O
and	O
identify	O
"	O
THE	O
"	O
answer	O
,	O
for	O
the	O
resons	O
mentioned	O
in	O
the	O
comments	O
from	O
@	O
EJP	O
:	O
There	O
are	O
roughly	O
2	O
(	O
+	O
/	O
-	O
2	O
)	O
people	O
in	O
the	O
world	O
who	O
can	O
give	O
the	O
definite	O
answer	O
at	O
all	O
.	O
And	O
in	O
doubt	O
,	O
the	O
answer	O
might	O
just	O
be	O
something	O
like	O
"	O
Supporting	O
final	O
default	O
methods	O
did	O
not	O
seem	O
to	O
be	O
worth	O
the	O
effort	O
of	O
restructuring	O
the	O
internal	O
call	O
resolution	O
mechanisms	O
"	O
.	O
This	O
is	O
speculation	O
,	O
of	O
course	O
,	O
but	O
it	O
is	O
at	O
least	O
backed	O
by	O
subtle	O
evidences	O
,	O
like	O
this	O
Statement	O
(	O
by	O
one	O
of	O
the	O
two	O
persons	O
)	O
in	O
the	O
OpenJDK	O
mailing	O
list	O
:	O
#	O
blockquote	O
and	O
trivial	O
facts	O
like	O
that	O
a	O
method	O
is	O
simply	O
not	O
considered	O
to	O
be	O
a	O
(	O
really	O
)	O
final	O
method	O
when	O
it	O
is	O
a	O
default	O
method	O
,	O
as	O
currently	O
implemented	O
in	O
the	O
Method	B-api_mention
:	I-api_mention
:	I-api_mention
is	I-api_mention
_	I-api_mention
final	I-api_mention
_	I-api_mention
method	I-api_mention
method	O
in	O
the	O
OpenJDK	O
.	O
Further	O
really	O
"	O
authorative	O
"	O
information	O
is	O
indeed	O
hard	O
to	O
find	O
,	O
even	O
with	O
excessive	O
websearches	O
and	O
by	O
reading	O
commit	O
logs	O
.	O
I	O
thought	O
that	O
it	O
might	O
be	O
related	O
to	O
potential	O
ambiguities	O
during	O
the	O
resolution	O
of	O
interface	O
method	O
calls	O
with	O
the	O
invokeinterface	B-api_mention
instruction	O
and	O
and	O
class	O
method	O
calls	O
,	O
corresponding	O
to	O
the	O
invokevirtual	B-api_mention
instruction	O
:	O
For	O
the	O
invokevirtual	B-api_mention
instruction	O
,	O
there	O
may	O
be	O
a	O
simple	O
vtable	O
lookup	O
,	O
because	O
the	O
method	O
must	O
either	O
be	O
inherited	O
from	O
a	O
superclass	O
,	O
or	O
implemented	O
by	O
the	O
class	O
directly	O
.	O
In	O
contrast	O
to	O
that	O
,	O
an	O
invokeinterface	B-api_mention
call	O
must	O
examine	O
the	O
respective	O
call	O
site	O
to	O
find	O
out	O
which	O
interface	O
this	O
call	O
actually	O
refers	O
to	O
(	O
this	O
is	O
explained	O
in	O
more	O
detail	O
in	O
the	O
InterfaceCalls	O
page	O
of	O
the	O
HotSpot	O
Wiki	O
)	O
.	O
However	O
,	O
final	O
methods	O
do	O
either	O
not	O
get	O
inserted	O
into	O
the	O
vtable	O
at	O
all	O
,	O
or	O
replace	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
.	O
Line	O
333	O
)	O
,	O
and	O
similarly	O
,	O
default	O
methods	O
are	O
replacing	O
existing	O
entries	O
in	O
the	O
vtable	O
(	O
see	O
klassVtable	O
.	O
cpp	O
,	O
Line	O
202	O
)	O
.	O
So	O
the	O
actual	O
reason	O
(	O
and	O
thus	O
,	O
the	O
answer	O
)	O
must	O
be	O
hidden	O
deeper	O
inside	O
the	O
(	O
rather	O
complex	O
)	O
method	O
call	O
resolution	O
mechanisms	O
,	O
but	O
maybe	O
these	O
references	O
will	O
nevertheless	O
be	O
considered	O
as	O
being	O
helpful	O
,	O
be	O
it	O
only	O
for	O
others	O
that	O
manage	O
to	O
derive	O
the	O
actual	O
answer	O
from	O
that	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28465634	O
I	O
think	O
there	O
are	O
very	O
few	O
differences	O
between	O
the	O
two	O
when	O
you	O
look	O
closely	O
enough	O
.	O
At	O
it	O
'	O
s	O
face	O
,	O
an	O
IEnumerable	O
does	O
appear	O
to	O
be	O
a	O
reusable	O
construct	O
:	O
#	O
pre	O
However	O
,	O
the	O
compiler	O
is	O
actually	O
doing	O
a	O
little	O
bit	O
of	O
work	O
to	O
help	O
us	O
out	O
;	O
it	O
generates	O
the	O
following	O
code	O
:	O
#	O
pre	O
Each	O
time	O
you	O
would	O
actually	O
iterate	O
over	O
the	O
enumerable	O
,	O
the	O
compiler	O
creates	O
an	O
enumerator	O
.	O
The	O
enumerator	O
is	O
not	O
reusable	O
;	O
further	O
calls	O
to	O
MoveNext	B-api_mention
will	O
just	O
return	O
false	O
,	O
and	O
there	O
is	O
no	O
way	O
to	O
reset	O
it	O
to	O
the	O
beginning	O
.	O
If	O
you	O
want	O
to	O
iterate	O
over	O
the	O
numbers	O
again	O
,	O
you	O
will	O
need	O
to	O
create	O
another	O
enumerator	O
instance	O
.	O
To	O
better	O
illustrate	O
that	O
the	O
IEnumerable	O
has	O
(	O
can	O
have	O
)	O
the	O
same	O
'	O
feature	O
'	O
as	O
a	O
Java	O
Stream	B-api_mention
,	O
consider	O
a	O
enumerable	O
whose	O
source	O
of	O
the	O
numbers	O
is	O
not	O
a	O
static	O
collection	O
.	O
For	O
example	O
,	O
we	O
can	O
create	O
an	O
enumerable	O
object	O
which	O
generates	O
a	O
sequence	O
of	O
5	O
random	O
numbers	O
:	O
#	O
pre	O
Now	O
we	O
have	O
very	O
similar	O
code	O
to	O
the	O
previous	O
array	O
-	O
based	O
enumerable	O
,	O
but	O
with	O
a	O
second	O
iteration	O
over	O
numbers	O
:	O
#	O
pre	O
The	O
second	O
time	O
we	O
iterate	O
over	O
numbers	O
we	O
will	O
get	O
a	O
different	O
sequence	O
of	O
numbers	O
,	O
which	O
isn	O
'	O
t	O
reusable	O
in	O
the	O
same	O
sense	O
.	O
Or	O
,	O
we	O
could	O
have	O
written	O
the	O
RandomNumberStream	B-api_mention
to	O
thrown	O
an	O
exception	O
if	O
you	O
try	O
to	O
iterate	O
over	O
it	O
multiple	O
times	O
,	O
making	O
the	O
enumerable	O
actually	O
unusable	O
(	O
like	O
a	O
Java	O
Stream	B-api_mention
)	O
.	O
Also	O
,	O
what	O
does	O
your	O
enumerable	O
-	O
based	O
quick	O
sort	O
mean	O
when	O
applied	O
to	O
a	O
RandomNumberStream	B-api_mention
?	O
Conclusion	O
So	O
,	O
the	O
biggest	O
difference	O
is	O
that	O
.	O
NET	O
allows	O
you	O
to	O
reuse	O
an	O
IEnumerable	O
by	O
implicitly	O
creating	O
a	O
new	O
IEnumerator	O
in	O
the	O
background	O
whenever	O
it	O
would	O
need	O
to	O
access	O
elements	O
in	O
the	O
sequence	O
.	O
This	O
implicit	O
behavior	O
is	O
often	O
useful	O
(	O
and	O
'	O
powerful	O
'	O
as	O
you	O
state	O
)	O
,	O
because	O
we	O
can	O
repeatedly	O
iterate	O
over	O
a	O
collection	O
.	O
But	O
sometimes	O
,	O
this	O
implicit	O
behavior	O
can	O
actually	O
cause	O
problems	O
.	O
If	O
your	O
data	O
source	O
is	O
not	O
static	O
,	O
or	O
is	O
costly	O
to	O
access	O
(	O
like	O
a	O
database	O
or	O
web	O
site	O
)	O
,	O
then	O
a	O
lot	O
of	O
assumptions	O
about	O
IEnumerable	O
have	O
to	O
be	O
discarded	O
;	O
reuse	O
is	O
not	O
that	O
straight	O
-	O
forward	O
Question	O
-	O
28818506	O
,	O
answer	O
-	O
28821352	O
It	O
'	O
s	O
not	O
pretty	O
,	O
but	O
this	O
will	O
work	O
:	O
return	O
serviceA	O
(	O
args	O
)	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
fairly	O
handy	O
pattern	O
for	O
use	O
with	O
Optional	B-api_mention
.	O
It	O
means	O
"	O
If	O
this	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
give	O
me	O
func	O
(	O
args	O
)	O
,	O
otherwise	O
give	O
me	O
sup	O
.	B-api_mention
get	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
"	O
.	O
In	O
this	O
case	O
,	O
we	O
call	O
serviceA	O
(	O
args	O
)	O
and	O
get	O
an	O
Optional	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
If	O
that	O
Optional	B-api_mention
contains	O
value	O
v	O
,	O
we	O
want	O
to	O
get	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
if	O
it	O
is	O
empty	O
,	O
we	O
want	O
to	O
get	O
serviceB	O
(	O
args	O
)	O
.	O
Rinse	O
-	O
repeat	O
with	O
more	O
alternatives	O
.	O
Other	O
uses	O
of	O
this	O
pattern	O
are	O
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
.	B-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
orElseGet	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
31270759	O
,	O
answer	O
-	O
31273726	O
What	O
if	O
every	O
functional	O
interface	O
provided	O
by	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
was	O
allowed	O
to	O
throw	O
an	O
exception	O
?	O
#	O
pre	O
We	O
could	O
use	O
some	O
default	O
methods	O
to	O
provide	O
the	O
behavior	O
you	O
want	O
.	O
#	O
li	O
You	O
could	O
fallback	O
to	O
some	O
default	O
value	O
or	O
action	O
#	O
li	O
Or	O
you	O
could	O
try	O
to	O
perform	O
another	O
action	O
which	O
may	O
throw	O
an	O
exception	O
I	O
'	O
ve	O
written	O
a	O
library	O
which	O
redefines	O
most	O
of	O
the	O
interfaces	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
this	O
way	O
.	O
I	O
even	O
provide	O
a	O
ThrowingStream	B-api_mention
which	O
let	O
'	O
s	O
you	O
use	O
these	O
new	O
interfaces	O
with	O
the	O
same	O
API	O
as	O
a	O
regular	O
Stream	B-api_mention
.	O
#	O
pre	O
(	O
Nothing	O
is	O
a	O
RuntimeException	B-api_mention
that	O
can	O
never	O
be	O
thrown	O
.	O
)	O
Your	O
original	O
example	O
would	O
become	O
#	O
pre	O
Question	O
-	O
11411022	O
,	O
answer	O
-	O
34052602	O
The	O
best	O
way	O
is	O
the	O
clearest	O
way	O
:	O
*	O
Thread	B-api_mention
.	I-api_mention
currentThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Or	O
,	O
if	O
the	O
runtime	O
platform	O
is	O
API	O
level	O
23	O
(	O
Marshmallow	O
6	O
.	O
0	O
)	O
or	O
higher	O
:	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
isCurrentThread	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
See	O
the	O
Looper	B-api_mention
API	O
.	O
Note	O
that	O
calling	O
Looper	B-api_mention
.	I-api_mention
getMainLooper	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
involves	O
synchonization	O
(	O
see	O
the	O
source	O
)	O
.	O
You	O
might	O
want	O
to	O
avoid	O
the	O
overhead	O
by	O
storing	O
the	O
return	O
value	O
and	O
reusing	O
it	O
.	O
*	O
credit	O
greg7gkb	O
Question	O
-	O
16232833	O
,	O
answer	O
-	O
16250729	O
change	O
your	O
return	O
type	O
to	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
then	O
you	O
can	O
use	O
below	O
for	O
400	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
for	O
correct	O
request	O
return	O
new	O
ResponseEntity	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
UPDATE	O
1	O
after	O
spring	O
4	O
.	O
1	O
there	O
are	O
helper	O
methods	O
in	O
ResponseEntity	B-api_mention
could	O
be	O
used	O
as	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
status	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
body	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
return	O
ResponseEntity	B-api_mention
.	I-api_mention
ok	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
25850328	O
,	O
answer	O
-	O
31838310	O
The	O
main	O
purpose	O
of	O
marker	B-api_mention
interfaces	O
is	O
to	O
create	O
special	O
types	O
where	O
types	O
themselves	O
have	O
no	O
behavior	O
of	O
their	O
own	O
.	O
#	O
pre	O
Here	O
save	O
method	O
makes	O
sure	O
that	O
only	O
the	O
objects	O
of	O
classes	O
that	O
implement	O
the	O
MarkerEntity	B-api_mention
interface	O
are	O
saved	O
,	O
for	O
other	O
types	O
InvalidEntityFoundException	B-api_mention
is	O
thrown	O
.	O
So	O
here	O
MarkerEntity	B-api_mention
marker	O
interface	O
is	O
defining	O
a	O
type	O
that	O
adds	O
special	O
behavior	O
to	O
the	O
classes	O
implementing	O
it	O
.	O
Though	O
annotations	O
can	O
also	O
used	O
now	O
to	O
mark	O
classes	O
for	O
some	O
special	O
treatments	O
but	O
marker	O
annotations	O
are	O
replacement	O
for	O
naming	O
pattern	O
not	O
for	O
Marker	B-api_mention
interfaces	O
.	O
But	O
marker	O
annotations	O
can	O
'	O
t	O
fully	O
replace	O
the	O
marker	O
interfaces	O
because	O
;	O
marker	O
interfaces	O
are	O
used	O
to	O
define	O
type	O
(	O
as	O
already	O
explained	O
above	O
)	O
where	O
as	O
marker	B-api_mention
annotations	O
do	O
not	O
.	O
Source	O
for	O
marker	B-api_mention
interface	O
comment	O
Question	O
-	O
21163108	O
,	O
answer	O
-	O
21172732	O
The	O
parallel	O
streams	O
use	O
the	O
default	O
ForkJoinPool	B-api_mention
which	O
by	O
default	O
has	O
one	O
less	O
threads	O
as	O
you	O
have	O
processors	O
,	O
as	O
returned	O
by	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
availableProcessors	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
so	O
parallel	O
streams	O
use	O
all	O
your	O
processors	O
because	O
they	O
also	O
use	O
the	O
main	O
thread	O
)	O
:	O
#	O
blockquote	O
To	O
change	O
the	O
way	O
parallel	O
streams	O
are	O
executed	O
,	O
you	O
can	O
either	O
#	O
li	O
submit	O
the	O
parallel	O
stream	O
execution	O
to	O
your	O
own	O
ForkJoinPool	B-api_mention
:	O
yourFJP	O
.	B-api_mention
submit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
or	O
#	O
li	O
you	O
can	O
change	O
the	O
size	O
of	O
the	O
common	O
pool	O
using	O
system	O
properties	O
:	O
System	B-api_mention
.	I-api_mention
setProperty	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
a	O
target	O
parallelism	O
of	O
20	O
threads	O
.	O
Example	O
of	O
the	O
latter	O
on	O
my	O
machine	O
which	O
has	O
8	O
processors	O
.	O
If	O
I	O
run	O
the	O
following	O
program	O
:	O
#	O
pre	O
The	O
output	O
is	O
:	O
#	O
blockquote	O
So	O
you	O
can	O
see	O
that	O
the	O
parallel	O
stream	O
processes	O
8	O
items	O
at	O
a	O
time	O
,	O
i	O
.	O
e	O
.	O
it	O
uses	O
8	O
threads	O
.	O
However	O
if	O
I	O
uncomment	O
the	O
commented	O
line	O
,	O
the	O
output	O
is	O
:	O
#	O
blockquote	O
This	O
time	O
the	O
parallel	O
stream	O
has	O
used	O
20	O
threads	O
and	O
all	O
20	O
elements	O
in	O
the	O
stream	O
have	O
been	O
processed	O
comcurrently	O
.	O
Question	O
-	O
10786042	O
Say	O
I	O
have	O
a	O
URL	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
query	O
?	O
q	O
=	O
and	O
I	O
have	O
a	O
query	O
entered	O
by	O
the	O
user	O
such	O
as	O
:	O
#	O
blockquote	O
I	O
want	O
the	O
result	O
to	O
be	O
a	O
properly	O
encoded	O
URL	O
:	O
http	O
:	O
/	O
/	O
example	O
.	O
com	O
/	O
query	O
?	O
q	O
=	O
random	O
%	O
20word	O
%	O
20	O
%	O
A3500	O
%	O
20bank	O
%	O
20	O
%	O
24	O
What	O
'	O
s	O
the	O
best	O
way	O
to	O
achieve	O
this	O
?	O
I	O
tried	O
URLEncoder	B-api_mention
and	O
creating	O
URI	O
/	O
URL	O
objects	O
but	O
none	O
of	O
them	O
come	O
out	O
quite	O
right	O
.	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29922469	O
My	O
guess	O
is	O
that	O
enums	O
are	O
limited	O
in	O
size	O
(	O
i	O
.	O
e	O
the	O
size	O
is	O
not	O
limited	O
by	O
language	O
but	O
limited	O
by	O
usage	O
)	O
and	O
thus	O
they	O
don	O
'	O
t	O
need	O
a	O
native	O
stream	O
api	O
.	O
Streams	O
are	O
very	O
good	O
when	O
you	O
have	O
to	O
manipulate	O
transform	O
and	O
recollect	O
the	O
elements	O
in	O
a	O
stream	O
;	O
these	O
are	O
not	O
common	O
uses	O
case	O
for	O
Enum	O
(	O
usually	O
you	O
iterate	O
over	O
enum	O
values	O
,	O
but	O
rarely	O
you	O
need	O
to	O
transform	O
,	O
map	O
and	O
collect	O
them	O
)	O
.	O
If	O
you	O
need	O
only	O
to	O
do	O
an	O
action	O
over	O
each	O
elements	O
perhaps	O
you	O
should	O
expose	O
only	O
a	O
forEach	B-api_mention
method	O
#	O
pre	O
Question	O
-	O
5868369	O
,	O
answer	O
-	O
5868454	O
You	O
need	O
to	O
use	O
the	O
readLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
class	O
BufferedReader	B-api_mention
.	O
Create	O
a	O
new	O
object	O
from	O
that	O
class	O
and	O
operate	O
this	O
method	O
on	O
him	O
and	O
save	O
it	O
to	O
a	O
string	O
.	O
BufferReader	B-api_mention
API	O
Question	O
-	O
15202997	O
,	O
answer	O
-	O
37603567	O
this	O
is	O
best	O
document	O
I	O
found	O
describing	O
getName	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
getSimpleName	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
getCanonicalName	B-api_mention
(	I-api_mention
)	I-api_mention
#	O
a	O
#	O
pre	O
Question	O
-	O
17828584	O
,	O
answer	O
-	O
17832168	O
I	O
think	O
the	O
number	O
displayed	O
is	O
the	O
number	O
of	O
time	O
the	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
call	O
throws	O
the	O
Stackoverflow	B-api_mention
exception	O
.	O
It	O
probably	O
depend	O
on	O
the	O
implementation	O
of	O
the	O
println	B-api_mention
and	O
the	O
number	O
of	O
stacking	O
call	O
it	O
is	O
made	O
in	O
it	O
.	O
As	O
an	O
illustration	O
:	O
The	O
main	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
trigger	O
the	O
Stackoverflow	B-api_mention
exception	O
at	O
call	O
i	O
.	O
The	O
i	O
-	O
1	O
call	O
of	O
main	O
catch	O
the	O
exception	O
and	O
call	O
println	B-api_mention
which	O
trigger	O
a	O
second	O
Stackoverflow	B-api_mention
.	O
cnt	O
get	O
increment	O
to	O
1	O
.	O
The	O
i	O
-	O
2	O
call	O
of	O
main	O
catch	O
now	O
the	O
exception	O
and	O
call	O
println	B-api_mention
.	O
In	O
println	B-api_mention
a	O
method	O
is	O
called	O
triggering	O
a	O
3rd	O
exception	O
.	O
cnt	O
get	O
increment	O
to	O
2	O
.	O
this	O
continue	O
until	O
println	B-api_mention
can	O
make	O
all	O
its	O
needed	O
call	O
and	O
finally	O
display	O
the	O
value	O
of	O
cnt	O
.	O
This	O
is	O
then	O
dependent	O
of	O
the	O
actual	O
implementation	O
of	O
println	B-api_mention
.	O
For	O
the	O
JDK7	O
either	O
it	O
detect	O
cycling	O
call	O
and	O
throws	O
the	O
exception	O
earlier	O
either	O
it	O
keep	O
some	O
stack	O
resource	O
and	O
throw	O
the	O
exception	O
before	O
reaching	O
the	O
limit	O
to	O
give	O
some	O
room	O
for	O
remediation	O
logic	O
either	O
the	O
println	O
implementation	O
doesn	O
'	O
t	O
make	O
calls	O
either	O
the	O
+	O
+	O
operation	O
is	O
done	O
after	O
the	O
println	B-api_mention
call	O
thus	O
is	O
by	O
pass	O
by	O
the	O
exception	O
.	O
Question	O
-	O
32175145	O
,	O
answer	O
-	O
32177563	O
The	O
other	O
answers	O
have	O
already	O
answered	O
your	O
question	O
-	O
no	O
,	O
this	O
is	O
not	O
possible	O
with	O
the	O
Java	O
'	O
s	O
primitive	O
wrapper	O
classes	O
.	O
I	O
'	O
ll	O
try	O
to	O
address	O
the	O
"	O
question	O
behind	O
the	O
question	O
"	O
:	O
Is	O
this	O
possible	O
with	O
other	O
classes	O
?	O
#	O
blockquote	O
This	O
is	O
actually	O
a	O
good	O
question	O
,	O
and	O
the	O
answer	O
is	O
:	O
Yes	O
,	O
it	O
is	O
possible	O
to	O
create	O
such	O
a	O
situation	O
,	O
and	O
yes	O
,	O
it	O
would	O
make	O
Aristotle	O
angry	O
.	O
Actually	O
,	O
I	O
don	O
'	O
t	O
know	O
if	O
it	O
would	O
make	O
Aristotle	O
angry	O
,	O
not	O
having	O
known	O
him	O
,	O
but	O
it	O
will	O
certainly	O
cause	O
a	O
lot	O
of	O
grief	O
for	O
whoever	O
has	O
to	O
work	O
with	O
the	O
code	O
.	O
The	O
thing	O
is	O
:	O
There	O
is	O
a	O
contract	O
associated	O
with	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
blockquote	O
Javadocs	O
for	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
Yes	O
,	O
when	O
creating	O
your	O
own	O
class	O
,	O
you	O
can	O
violate	O
this	O
contract	O
.	O
There	O
is	O
(	O
unfortunately	O
)	O
nothing	O
in	O
the	O
compiler	O
or	O
runtime	O
stopping	O
you	O
.	O
However	O
,	O
a	O
lot	O
of	O
code	O
relies	O
on	O
this	O
contract	O
,	O
so	O
if	O
you	O
violate	O
it	O
,	O
any	O
code	O
that	O
uses	O
equals	B-api_mention
will	O
probably	O
fail	O
in	O
mysterious	O
ways	O
.	O
One	O
example	O
:	O
Java	O
'	O
s	O
own	O
Collection	B-api_mention
classes	O
(	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Collection	I-api_mention
and	O
friends	O
)	O
rely	O
on	O
equals	B-api_mention
.	O
If	O
an	O
instance	O
of	O
a	O
class	O
that	O
does	O
not	O
correctly	O
implement	O
equals	B-api_mention
is	O
put	O
into	O
a	O
collection	O
,	O
weird	O
things	O
happen	O
,	O
such	O
as	O
the	O
collection	O
sometimes	O
containing	O
the	O
instance	O
and	O
sometimes	O
not	O
.	O
Question	O
-	O
4871051	O
,	O
answer	O
-	O
21274808	O
Use	O
CodeSource	B-api_mention
#	I-api_mention
getLocation	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
This	O
works	O
fine	O
in	O
JAR	O
files	O
as	O
well	O
.	O
You	O
can	O
obtain	O
CodeSource	B-api_mention
by	O
ProtectionDomain	B-api_mention
#	I-api_mention
getCodeSource	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
the	O
ProtectionDomain	B-api_mention
in	O
turn	O
can	O
be	O
obtained	O
by	O
Class	B-api_mention
#	I-api_mention
getProtectionDomain	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
#	O
pre	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
35399386	O
The	O
String	B-api_mention
pool	O
(	O
aka	O
interning	O
)	O
and	O
Integer	B-api_mention
pool	O
blur	O
the	O
difference	O
further	O
,	O
and	O
may	O
allow	O
you	O
to	O
use	O
=	O
=	O
for	O
objects	O
in	O
some	O
cases	O
instead	O
of	O
.	B-api_mention
equals	I-api_mention
This	O
can	O
give	O
you	O
greater	O
performance	O
(	O
?	O
)	O
,	O
at	O
the	O
cost	O
of	O
greater	O
complexity	O
.	O
E	O
.	O
g	O
.	O
:	O
#	O
pre	O
Complexity	O
tradeoff	O
:	O
the	O
following	O
may	O
surprise	O
you	O
:	O
#	O
pre	O
I	O
advise	O
you	O
to	O
stay	O
away	O
from	O
such	O
micro	O
-	O
optimization	O
,	O
and	O
always	O
use	O
.	O
equals	O
for	O
objects	O
,	O
and	O
=	O
=	O
for	O
primitives	O
:	O
#	O
pre	O
Question	O
-	O
8579657	O
,	O
answer	O
-	O
26159918	O
invoke	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
executing	O
on	O
the	O
calling	O
thread	O
,	O
like	O
any	O
other	O
method	O
call	O
.	O
whereas	O
Thread	B-api_mention
.	I-api_mention
start	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
new	O
thread	O
.	O
invoking	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
programmatic	O
bug	O
.	O
Question	O
-	O
24631909	O
,	O
answer	O
-	O
24635657	O
Common	O
features	O
a	O
)	O
Both	O
libraries	O
use	O
immutable	O
types	O
.	O
Joda	O
-	O
Time	O
also	O
offers	O
additional	O
mutable	O
types	O
like	O
MutableDateTime	B-api_mention
.	O
b	O
)	O
Furthermore	O
:	O
Both	O
libraries	O
are	O
inspired	O
by	O
the	O
design	O
study	O
"	O
TimeAndMoney	O
"	O
from	O
Eric	O
Evans	O
or	O
ideas	O
from	O
Martin	O
Fowler	O
about	O
domain	O
driven	O
style	O
so	O
they	O
strive	O
more	O
or	O
less	O
for	O
a	O
fluent	O
programming	O
style	O
(	O
although	O
not	O
always	O
perfect	O
;	O
-	O
)	O
)	O
.	O
c	O
)	O
With	O
both	O
libraries	O
we	O
get	O
a	O
real	O
calendar	O
date	O
type	O
(	O
called	O
LocalDate	B-api_mention
)	O
,	O
a	O
real	O
wall	O
time	O
type	O
(	O
called	O
LocalTime	B-api_mention
)	O
and	O
the	O
composition	O
(	O
called	O
LocalDateTime	B-api_mention
)	O
.	O
That	O
is	O
a	O
very	O
big	O
win	O
compared	O
with	O
old	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Calendar	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
.	O
d	O
)	O
Both	O
libraries	O
use	O
a	O
method	O
-	O
centric	O
approach	O
meaning	O
they	O
encourage	O
the	O
user	O
to	O
use	O
getDayOfYear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
instead	O
of	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
This	O
causes	O
a	O
lot	O
of	O
extra	O
methods	O
compared	O
with	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Calendar	I-api_mention
(	O
although	O
latter	O
is	O
not	O
type	O
-	O
safe	O
at	O
all	O
due	O
to	O
excessive	O
use	O
of	O
ints	O
)	O
.	O
Performance	O
See	O
the	O
other	O
answer	O
by	O
@	O
OO7	O
pointing	O
to	O
the	O
analysis	O
of	O
Mikhail	O
Vorontsov	O
although	O
point	O
3	O
(	O
exception	O
catching	O
)	O
is	O
probably	O
obsolete	O
-	O
see	O
this	O
JDK	O
-	O
bug	O
.	O
The	O
different	O
performance	O
(	O
which	O
is	O
in	O
general	O
favour	O
of	O
JSR	O
-	O
310	O
)	O
is	O
mainly	O
due	O
to	O
the	O
fact	O
that	O
the	O
internal	O
implementation	O
of	O
Joda	O
-	O
Time	O
always	O
use	O
a	O
machine	O
-	O
time	O
-	O
like	O
long	O
-	O
primitive	O
(	O
in	O
milliseconds	O
)	O
.	O
Null	O
Joda	O
-	O
Time	O
often	O
use	O
NULL	O
as	O
default	O
for	O
system	O
timezone	O
,	O
default	O
locale	O
,	O
current	O
timestamp	O
etc	O
.	O
while	O
JSR	O
-	O
310	O
almost	O
always	O
rejects	O
NULL	O
values	O
.	O
Precision	O
JSR	O
-	O
310	O
handles	O
nanosecond	O
precision	O
while	O
Joda	O
-	O
Time	O
is	O
limited	O
to	O
millisecond	O
precision	O
.	O
Supported	O
fields	O
:	O
An	O
overview	O
about	O
supported	O
fields	O
in	O
Java	O
-	O
8	O
(	O
JSR	O
-	O
310	O
)	O
is	O
given	O
by	O
some	O
classes	O
in	O
the	O
temporal	O
-	O
package	O
(	O
for	O
example	O
ChronoField	B-api_mention
and	O
WeekFields	B-api_mention
)	O
while	O
Joda	O
-	O
Time	O
is	O
rather	O
weak	O
on	O
this	O
area	O
-	O
see	O
DateTimeFieldType	B-api_mention
.	O
The	O
biggest	O
lack	O
of	O
Joda	O
-	O
Time	O
is	O
here	O
the	O
absence	O
of	O
localized	O
week	O
-	O
related	O
fields	O
.	O
A	O
common	O
feature	O
of	O
both	O
field	O
implementation	O
design	O
is	O
that	O
both	O
are	O
based	O
on	O
values	O
of	O
type	O
long	O
(	O
no	O
other	O
types	O
,	O
not	O
even	O
enums	O
)	O
.	O
Enum	O
JSR	O
-	O
310	O
offers	O
enums	O
like	O
DayOfWeek	B-api_mention
or	O
Month	B-api_mention
while	O
Joda	O
-	O
Time	O
does	O
not	O
offer	O
this	O
because	O
it	O
was	O
mainly	O
developed	O
in	O
years	O
2002	O
-	O
2004	O
before	O
Java	O
5	O
.	O
Zone	O
API	O
a	O
)	O
JSR	O
-	O
310	O
offers	O
more	O
timezone	O
features	O
than	O
Joda	O
-	O
Time	O
.	O
Latter	O
is	O
not	O
able	O
to	O
yield	O
a	O
programmatical	O
access	O
to	O
the	O
history	O
of	O
timezone	O
offset	O
transitions	O
while	O
JSR	O
-	O
310	O
is	O
capable	O
to	O
do	O
this	O
.	O
b	O
)	O
For	O
your	O
information	O
:	O
JSR	O
-	O
310	O
has	O
moved	O
its	O
internal	O
timezone	O
repository	O
to	O
a	O
new	O
location	O
and	O
a	O
different	O
format	O
.	O
The	O
old	O
library	O
folder	O
lib	O
/	O
zi	O
does	O
not	O
exist	O
any	O
more	O
.	O
Adjuster	O
vs	O
.	O
Property	O
JSR	O
-	O
310	O
has	O
introduced	O
the	O
TemporalAdjuster	B-api_mention
-	O
interface	O
as	O
a	O
formalized	O
way	O
to	O
externalize	O
temporal	O
calculations	O
and	O
manipulations	O
,	O
especially	O
for	O
library	O
or	O
framework	O
-	O
writers	O
this	O
is	O
a	O
nice	O
and	O
relative	O
easy	O
way	O
to	O
embed	O
new	O
extensions	O
of	O
JSR	O
-	O
310	O
(	O
a	O
kind	O
of	O
equivalent	O
to	O
static	O
helper	O
classes	O
for	O
former	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
)	O
.	O
For	O
most	O
users	O
however	O
,	O
this	O
feature	O
has	O
very	O
limited	O
value	O
because	O
the	O
burden	O
to	O
write	O
code	O
is	O
still	O
with	O
the	O
user	O
.	O
Built	O
-	O
in	O
solutions	O
based	O
on	O
the	O
new	O
TemporalAdjuster	B-api_mention
-	O
concept	O
are	O
not	O
so	O
many	O
,	O
there	O
is	O
currently	O
only	O
the	O
helper	O
class	O
TemporalAdjusters	B-api_mention
with	O
a	O
limited	O
set	O
of	O
manipulations	O
(	O
and	O
the	O
enums	O
Month	O
or	O
other	O
temporal	O
types	O
)	O
.	O
Joda	O
-	O
Time	O
offers	O
a	O
field	O
-	O
package	O
but	O
practice	O
has	O
shown	O
evidence	O
that	O
new	O
field	O
implementations	O
are	O
very	O
hard	O
to	O
code	O
.	O
On	O
the	O
other	O
side	O
Joda	O
-	O
Time	O
offers	O
so	O
-	O
called	O
properties	O
which	O
make	O
some	O
manipulations	O
much	O
easier	O
and	O
more	O
elegant	O
than	O
in	O
JSR	O
-	O
310	O
,	O
for	O
example	O
property	O
.	B-api_mention
withMaximumValue	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Calendar	O
systems	O
JSR	O
-	O
310	O
offers	O
4	O
extra	O
calendar	O
systems	O
.	O
The	O
most	O
interesting	O
one	O
is	O
Umalqura	O
(	O
used	O
in	O
Saudi	O
Arabia	O
)	O
.	O
The	O
other	O
3	O
are	O
:	O
Minguo	O
(	O
Taiwan	O
)	O
,	O
Japanese	O
(	O
only	O
the	O
modern	O
calendar	O
since	O
1871	O
!	O
)	O
and	O
ThaiBuddhist	O
(	O
only	O
correct	O
after	O
1940	O
)	O
.	O
Joda	O
-	O
Time	O
offers	O
an	O
Islamic	O
calendar	O
based	O
on	O
calculatory	O
base	O
-	O
not	O
a	O
sighting	O
-	O
based	O
calendar	O
like	O
Umalqura	O
.	O
Thai	O
-	O
Buddhist	O
is	O
also	O
offered	O
by	O
Joda	O
-	O
Time	O
in	O
a	O
similar	O
form	O
,	O
Minguo	O
and	O
the	O
japanese	O
one	O
not	O
.	O
Otherwise	O
Joda	O
-	O
Time	O
offers	O
coptic	O
and	O
ethiopic	O
calendar	O
,	O
too	O
(	O
but	O
without	O
any	O
support	O
for	O
internationalization	O
)	O
.	O
More	O
interesting	O
for	O
Europeans	O
:	O
Joda	O
-	O
Time	O
also	O
offers	O
a	O
Gregorian	O
,	O
Julian	O
and	O
mixed	O
-	O
gregorian	O
-	O
julian	O
calendar	O
.	O
However	O
,	O
the	O
practical	O
value	O
for	O
real	O
historical	O
calculations	O
is	O
limited	O
because	O
important	O
features	O
like	O
different	O
year	O
starts	O
in	O
date	O
history	O
are	O
not	O
supported	O
at	O
all	O
(	O
the	O
same	O
criticism	O
is	O
valid	O
for	O
old	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
GregorianCalendar	I-api_mention
)	O
.	O
Other	O
calendars	O
like	O
Hebrew	O
or	O
Persian	O
or	O
Hindu	O
are	O
completely	O
missing	O
in	O
both	O
libraries	O
.	O
Epoch	O
days	O
JSR	O
-	O
310	O
has	O
the	O
class	O
JulianFields	B-api_mention
while	O
Joda	O
-	O
Time	O
(	O
version	O
2	O
.	O
0	O
)	O
offers	O
some	O
helper	O
methods	O
in	O
the	O
class	O
DateTimeUtils	B-api_mention
.	O
Clocks	O
JSR	O
-	O
310	O
has	O
no	O
interface	O
(	O
a	O
design	O
mistake	O
)	O
but	O
an	O
abstract	O
class	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
Clock	I-api_mention
which	O
can	O
be	O
used	O
for	O
any	O
clock	O
dependency	O
injection	O
.	O
Joda	O
-	O
Time	O
offers	O
the	O
interface	O
MillisProvider	B-api_mention
and	O
some	O
helper	O
methods	O
in	O
DateTimeUtils	B-api_mention
instead	O
.	O
So	O
this	O
way	O
Joda	O
-	O
Time	O
is	O
also	O
capable	O
of	O
supporting	O
test	O
-	O
driven	O
models	O
with	O
different	O
clocks	O
(	O
mocking	O
etc	O
.	O
)	O
.	O
Duration	O
arithmetic	O
Both	O
libraries	O
support	O
the	O
calculation	O
of	O
time	O
distances	O
in	O
one	O
or	O
more	O
temporal	O
units	O
.	O
However	O
,	O
when	O
handling	O
single	O
-	O
unit	O
-	O
durations	O
the	O
JSR	O
-	O
310	O
-	O
style	O
is	O
obviously	O
nicer	O
(	O
and	O
long	O
-	O
based	O
instead	O
of	O
using	O
int	O
)	O
:	O
JSR	O
-	O
310	O
=	O
>	O
long	O
days	O
=	O
ChronoUnit	B-api_mention
.	I-api_mention
DAYS	I-api_mention
.	I-api_mention
between	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Joda	O
-	O
Time	O
=	O
>	O
int	O
days	O
=	O
DAYS	B-api_mention
.	I-api_mention
daysBetween	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getDays	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Handling	O
of	O
multiple	O
-	O
unit	O
-	O
durations	O
are	O
also	O
different	O
.	O
Even	O
the	O
calculation	O
results	O
can	O
differ	O
-	O
see	O
this	O
closed	O
Joda	O
-	O
Time	O
issue	O
.	O
While	O
JSR	O
-	O
310	O
use	O
a	O
very	O
simple	O
and	O
limited	O
approach	O
to	O
use	O
just	O
the	O
classes	O
Period	B-api_mention
(	O
duration	O
based	O
on	O
years	O
,	O
months	O
and	O
days	O
)	O
and	O
Duration	B-api_mention
(	O
based	O
on	O
seconds	O
and	O
nanoseconds	O
)	O
,	O
Joda	O
-	O
Time	O
uses	O
a	O
more	O
sophisticated	O
way	O
using	O
the	O
class	O
PeriodType	O
in	O
order	O
to	O
control	O
in	O
which	O
units	O
a	O
duration	O
(	O
Joda	O
-	O
Time	O
call	O
it	O
"	O
Period	O
"	O
)	O
shall	O
be	O
expressed	O
.	O
While	O
the	O
PeriodType	B-api_mention
-	O
API	O
is	O
somehow	O
awkward	O
to	O
use	O
a	O
similar	O
way	O
is	O
not	O
offered	O
by	O
JSR	O
-	O
310	O
at	O
all	O
.	O
Especially	O
it	O
is	O
not	O
yet	O
possible	O
in	O
JSR	O
-	O
310	O
to	O
define	O
mixed	O
date	O
and	O
time	O
durations	O
(	O
based	O
on	O
days	O
and	O
hours	O
for	O
example	O
)	O
.	O
So	O
be	O
warned	O
if	O
it	O
comes	O
to	O
migration	O
from	O
one	O
library	O
to	O
another	O
.	O
The	O
libraries	O
in	O
discussion	O
are	O
incompatible	O
-	O
despite	O
of	O
partially	O
same	O
class	O
names	O
.	O
Intervals	O
JSR	O
-	O
310	O
does	O
not	O
support	O
this	O
feature	O
while	O
Joda	O
-	O
Time	O
has	O
limited	O
support	O
.	O
See	O
also	O
this	O
SO	O
-	O
answer	O
.	O
Formatting	O
and	O
Parsing	O
Best	O
way	O
to	O
compare	O
both	O
libraries	O
is	O
to	O
view	O
the	O
equal	O
-	O
named	O
classes	O
DateTimeFormatterBuilder	B-api_mention
(	O
JSR	O
-	O
310	O
)	O
and	O
DateTimeFormatterBuilder	B-api_mention
(	O
Joda	O
-	O
Time	O
)	O
.	O
The	O
JSR	O
-	O
310	O
-	O
variant	O
is	O
a	O
little	O
bit	O
more	O
powerful	O
(	O
can	O
also	O
handle	O
any	O
kind	O
of	O
TemporalField	B-api_mention
provided	O
the	O
field	O
implementor	O
has	O
managed	O
to	O
code	O
some	O
extension	O
points	O
like	O
resolve	B-api_mention
(	I-api_mention
)	I-api_mention
)	O
.	O
Most	O
important	O
difference	O
is	O
however	O
-	O
in	O
my	O
opinion	O
:	O
JSR	O
-	O
310	O
can	O
much	O
better	O
parse	O
timezone	O
names	O
(	O
format	O
pattern	O
symbol	O
z	O
)	O
while	O
Joda	O
-	O
Time	O
could	O
not	O
do	O
this	O
at	O
all	O
in	O
its	O
earlier	O
versions	O
and	O
now	O
only	O
in	O
a	O
very	O
limited	O
way	O
.	O
Another	O
advantage	O
of	O
JSR	O
-	O
310	O
is	O
support	O
for	O
standalone	O
month	O
names	O
which	O
is	O
important	O
in	O
languages	O
like	O
Russian	O
or	O
Polish	O
etc	O
.	O
Joda	O
-	O
Time	O
has	O
no	O
access	O
to	O
such	O
resources	O
-	O
not	O
even	O
on	O
Java	O
-	O
8	O
platforms	O
.	O
The	O
pattern	O
syntax	O
in	O
JSR	O
-	O
310	O
is	O
also	O
more	O
flexible	O
than	O
in	O
Joda	O
-	O
Time	O
,	O
allows	O
for	O
optional	O
sections	O
(	O
using	O
square	O
brackets	O
)	O
,	O
is	O
more	O
orientated	O
towards	O
CLDR	O
-	O
standard	O
and	O
offers	O
padding	O
(	O
letter	O
symbol	O
p	O
)	O
and	O
more	O
fields	O
.	O
Otherwise	O
it	O
should	O
be	O
noted	O
that	O
Joda	O
-	O
Time	O
can	O
format	O
durations	O
using	O
PeriodFormatter	B-api_mention
.	O
JSR	O
-	O
310	O
cannot	O
do	O
this	O
.	O
Hope	O
this	O
overview	O
helps	O
.	O
All	O
the	O
gathered	O
information	O
is	O
mainly	O
there	O
due	O
to	O
my	O
efforts	O
and	O
investigations	O
how	O
to	O
design	O
and	O
implement	O
a	O
better	O
date	O
-	O
and	O
-	O
time	O
library	O
(	O
nothing	O
is	O
perfect	O
)	O
.	O
Update	O
from	O
2015	O
-	O
06	O
-	O
24	O
:	O
Meanwhile	O
I	O
have	O
found	O
the	O
time	O
to	O
write	O
and	O
publish	O
a	O
tabular	O
overview	O
for	O
different	O
time	O
libraries	O
in	O
Java	O
.	O
The	O
tables	O
also	O
contain	O
a	O
comparison	O
between	O
Joda	O
-	O
Time	O
v2	O
.	O
8	O
.	O
1	O
and	O
Java	O
-	O
8	O
(	O
JSR	O
-	O
310	O
)	O
.	O
It	O
is	O
more	O
detailed	O
than	O
this	O
post	O
.	O
Question	O
-	O
5694385	O
,	O
answer	O
-	O
5694464	O
Rather	O
than	O
spoon	O
-	O
feed	O
you	O
code	O
,	O
here	O
'	O
s	O
how	O
to	O
look	O
in	O
the	O
documentation	O
.	O
First	O
,	O
you	O
'	O
re	O
dealing	O
with	O
IO	O
,	O
so	O
look	O
in	O
the	O
java	O
.	O
io	O
package	O
.	O
There	O
are	O
two	O
classes	O
that	O
look	O
interesting	O
:	O
FileFilter	B-api_mention
and	O
FileNameFilter	B-api_mention
.	O
When	O
I	O
clicked	O
on	O
the	O
first	O
,	O
it	O
showed	O
me	O
that	O
there	O
was	O
a	O
a	O
listFiles	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
in	O
the	O
File	B-api_mention
class	O
.	O
And	O
the	O
documentation	O
for	O
that	O
method	O
says	O
:	O
#	O
blockquote	O
Scrolling	O
up	O
in	O
the	O
File	O
JavaDoc	O
,	O
I	O
see	O
the	O
constructors	O
.	O
And	O
that	O
'	O
s	O
really	O
all	O
I	O
need	O
to	O
be	O
able	O
to	O
create	O
a	O
File	B-api_mention
instance	O
and	O
call	O
listFiles	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
it	O
.	O
Scrolling	O
still	O
further	O
,	O
I	O
can	O
see	O
some	O
information	O
about	O
how	O
files	O
are	O
named	O
in	O
different	O
operating	O
systems	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
32302353	O
To	O
concur	O
with	O
earlier	O
comments	O
:	O
simplest	O
is	O
(	O
2	O
)	O
to	O
use	O
Closeable	B-api_mention
resources	O
and	O
declare	O
them	O
in	O
order	O
in	O
the	O
try	O
-	O
with	O
-	O
resources	O
clause	O
.	O
If	O
you	O
only	O
have	O
AutoCloseable	B-api_mention
,	O
you	O
can	O
wrap	O
them	O
in	O
another	O
(	O
nested	O
)	O
class	O
that	O
just	O
checks	O
that	O
close	B-api_mention
is	O
only	O
called	O
once	O
(	O
Facade	O
Pattern	O
)	O
,	O
e	O
.	O
g	O
.	O
by	O
having	O
private	O
bool	O
isClosed	O
;	O
.	O
In	O
practice	O
even	O
Oracle	O
just	O
(	O
1	O
)	O
chains	O
the	O
constructors	O
and	O
doesn	O
'	O
t	O
correctly	O
handle	O
exceptions	O
partway	O
through	O
the	O
chain	O
.	O
Alternatively	O
,	O
you	O
can	O
manually	O
create	O
a	O
chained	O
resource	O
,	O
using	O
a	O
static	O
factory	O
method	O
;	O
this	O
encapsulates	O
the	O
chain	O
,	O
and	O
handle	O
cleanup	O
if	O
it	O
fails	O
part	O
-	O
way	O
:	O
#	O
pre	O
The	O
complexity	O
comes	O
from	O
handling	O
multiple	O
exceptions	O
;	O
otherwise	O
it	O
'	O
s	O
just	O
"	O
close	O
resources	O
that	O
you	O
'	O
ve	O
acquired	O
so	O
far	O
"	O
.	O
A	O
common	O
practice	O
seems	O
to	O
be	O
to	O
first	O
initialize	O
the	O
variable	O
that	O
holds	O
the	O
object	O
that	O
holds	O
the	O
resource	O
to	O
null	O
(	O
here	O
fileWriter	B-api_mention
)	O
,	O
and	O
then	O
include	O
a	O
null	O
check	O
in	O
the	O
cleanup	O
,	O
but	O
that	O
seems	O
unnecessary	O
:	O
if	O
the	O
constructor	O
fails	O
,	O
there	O
'	O
s	O
nothing	O
to	O
clean	O
up	O
,	O
so	O
we	O
can	O
just	O
let	O
that	O
exception	O
propagate	O
,	O
which	O
simplifies	O
the	O
code	O
a	O
little	O
.	O
You	O
could	O
probably	O
do	O
this	O
generically	O
:	O
#	O
pre	O
Question	O
-	O
32294367	O
,	O
answer	O
-	O
32294898	O
#	O
blockquote	O
Let	O
me	O
ask	O
a	O
counterquestion	O
:	O
why	O
do	O
you	O
think	O
Thread	B-api_mention
.	I-api_mention
stop	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
has	O
been	O
deprecated	O
for	O
more	O
than	O
a	O
decade	O
?	O
The	O
reason	O
why	O
is	O
precisely	O
the	O
negation	O
of	O
your	O
statement	O
above	O
.	O
To	O
give	O
two	O
specific	O
examples	O
:	O
you	O
stop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
a	O
thread	O
while	O
it	O
'	O
s	O
executing	O
something	O
as	O
innocuous	O
-	O
sounding	O
as	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
Math	B-api_mention
.	I-api_mention
random	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Result	O
:	O
those	O
two	O
features	O
are	O
now	O
broken	O
for	O
the	O
entire	O
JVM	O
.	O
The	O
same	O
pertains	O
to	O
any	O
other	O
synchronized	O
code	O
your	O
application	O
may	O
execute	O
.	O
#	O
blockquote	O
The	O
application	O
may	O
theoretically	O
be	O
coded	O
such	O
that	O
absolutely	O
no	O
shared	O
resource	O
protected	O
by	O
locks	O
is	O
ever	O
used	O
;	O
however	O
that	O
will	O
only	O
help	O
to	O
point	O
out	O
the	O
exact	O
extent	O
to	O
which	O
Java	O
threads	O
are	O
codependent	O
.	O
And	O
the	O
"	O
independence	O
"	O
achieved	O
will	O
only	O
pertain	O
to	O
the	O
request	O
-	O
processing	O
threads	O
,	O
not	O
to	O
all	O
threads	O
in	O
such	O
an	O
application	O
.	O
Question	O
-	O
24649842	O
,	O
answer	O
-	O
24649939	O
Try	O
adding	O
a	O
Thread	B-api_mention
.	I-api_mention
sleep	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
call	O
within	O
your	O
run	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
.	O
.	O
Basically	O
it	O
'	O
s	O
the	O
difference	O
between	O
scheduling	O
something	O
based	O
on	O
when	O
the	O
previous	O
execution	O
ends	O
and	O
when	O
it	O
(	O
logically	O
)	O
starts	O
.	O
For	O
example	O
,	O
suppose	O
I	O
schedule	O
an	O
alarm	O
to	O
go	O
off	O
with	O
a	O
fixed	O
rate	O
of	O
once	O
an	O
hour	O
,	O
and	O
every	O
time	O
it	O
goes	O
off	O
,	O
I	O
have	O
a	O
cup	O
of	O
coffee	O
,	O
which	O
takes	O
10	O
minutes	O
.	O
Suppose	O
that	O
starts	O
at	O
midnight	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
If	O
I	O
schedule	O
with	O
a	O
fixed	O
delay	O
of	O
one	O
hour	O
,	O
I	O
'	O
d	O
have	O
:	O
#	O
pre	O
Which	O
one	O
you	O
want	O
depends	O
on	O
your	O
task	O
.	O
Question	O
-	O
31965179	O
,	O
answer	O
-	O
35427268	O
There	O
'	O
s	O
a	O
long	O
list	O
of	O
things	O
that	O
have	O
been	O
changed	O
in	O
Hibernate	O
5	O
:	O
#	O
li	O
New	O
bootstrap	O
API	O
so	O
we	O
can	O
bootstrap	O
a	O
JPA	O
environment	O
programmatically	O
without	O
the	O
need	O
of	O
a	O
persistence	O
.	O
xml	O
file	O
.	O
#	O
li	O
Starting	O
in	O
5	O
.	O
0	O
Hibernate	O
Spatial	O
is	O
part	O
of	O
the	O
Hibernate	O
project	O
so	O
we	O
can	O
handle	O
GIS	O
data	O
too	O
.	O
#	O
li	O
The	O
Java	O
8	O
Date	B-api_mention
and	O
Time	B-api_mention
types	O
are	O
supported	O
in	O
domain	O
model	O
mappings	O
.	O
The	O
mapping	O
between	O
the	O
standard	O
SQL	O
Date	O
/	O
Time	O
types	O
and	O
the	O
supported	O
Java	O
8	O
Date	B-api_mention
/	O
Time	B-api_mention
class	O
types	O
looks	O
as	O
follows	O
;	O
#	O
li	O
DATE	O
:	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalDate	I-api_mention
#	O
li	O
TIME	O
:	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalTime	I-api_mention
,	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
OffsetTime	I-api_mention
#	O
li	O
TIMESTAMP	O
:	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
Instant	I-api_mention
,	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalDateTime	I-api_mention
,	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
OffsetDateTime	I-api_mention
and	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
ZonedDateTime	I-api_mention
#	O
li	O
The	O
bytecode	O
enhancement	O
mechanism	O
was	O
redesigned	O
from	O
scratch	O
,	O
and	O
Hibernate	O
features	O
both	O
a	O
Maven	O
and	O
a	O
Gradle	O
plugin	O
.	O
There	O
are	O
three	O
main	O
aspects	O
which	O
we	O
can	O
enhance	O
with	O
bytecode	O
instrumentation	O
:	O
#	O
li	O
Lazy	O
initialization	O
:	O
Fields	O
can	O
be	O
declared	O
as	O
LAZY	O
and	O
they	O
will	O
be	O
fetched	O
only	O
when	O
being	O
accessed	O
for	O
the	O
first	O
time	O
.	O
#	O
li	O
Dirty	O
checking	O
:	O
Entities	O
are	O
enhanced	O
so	O
that	O
they	O
can	O
keep	O
track	O
of	O
all	O
the	O
properties	O
that	O
get	O
changed	O
after	O
being	O
loaded	O
in	O
a	O
Persistence	O
Context	O
.	O
#	O
li	O
Bidirectional	O
associations	O
:	O
It	O
'	O
s	O
possible	O
to	O
synchronize	O
both	O
sides	O
of	O
a	O
bidirectional	O
association	O
automatically	O
,	O
even	O
if	O
the	O
developer	O
only	O
updates	O
a	O
single	O
side	O
.	O
#	O
li	O
Hibernate	O
'	O
s	O
native	O
APIs	O
(	O
Session	O
,	O
etc	O
)	O
have	O
been	O
updated	O
to	O
use	O
generic	O
typed	O
.	O
No	O
need	O
to	O
cast	O
when	O
fetching	O
entities	O
.	O
#	O
li	O
Hibernate	O
5	O
.	O
0	O
expends	O
this	O
to	O
a	O
broader	O
set	O
of	O
types	O
(	O
e	O
.	O
g	O
.	O
UUID	O
)	O
.	O
#	O
li	O
Second	O
-	O
level	O
cache	O
by	O
reference	O
.	O
This	O
feature	O
enables	O
direct	O
storage	O
of	O
entity	O
references	O
into	O
the	O
second	O
level	O
cache	O
for	O
immutable	O
entities	O
.	O
#	O
li	O
Starting	O
with	O
Hibernate	O
5	O
.	O
0	O
,	O
we	O
have	O
a	O
completely	O
new	O
User	O
Guide	O
that	O
was	O
written	O
from	O
scratch	O
.	O
Question	O
-	O
33477695	O
,	O
answer	O
-	O
33477803	O
The	O
java	O
.	O
time	O
API	O
in	O
general	O
does	O
have	O
nanosecond	O
precision	O
.	O
For	O
example	O
:	O
#	O
pre	O
Output	O
:	O
2015	O
-	O
11	O
-	O
02T12	O
:	O
38	O
:	O
00	O
,	O
123456789	O
+	O
0000	O
However	O
,	O
it	O
'	O
s	O
the	O
clock	O
value	O
returned	O
by	O
OffsetDateTime	B-api_mention
.	I-api_mention
now	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
which	O
is	O
returning	O
a	O
value	O
which	O
only	O
has	O
milliseconds	O
.	O
From	O
Clock	B-api_mention
implementation	O
in	O
Java	O
8	O
:	O
#	O
blockquote	O
So	O
there	O
'	O
s	O
nothing	O
inherently	O
imprecise	O
here	O
-	O
just	O
the	O
default	O
implementation	O
of	O
Clock	B-api_mention
using	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
You	O
could	O
potentially	O
create	O
your	O
own	O
more	O
precise	O
subclass	O
.	O
However	O
,	O
you	O
should	O
note	O
that	O
adding	O
more	O
precision	O
without	O
adding	O
more	O
accuracy	O
probably	O
isn	O
'	O
t	O
terribly	O
useful	O
.	O
(	O
There	O
are	O
times	O
when	O
it	O
might	O
be	O
,	O
admittedly	O
.	O
.	O
.	O
)	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489437	O
Java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
is	O
not	O
just	O
a	O
class	O
.	O
It	O
'	O
s	O
an	O
integral	O
part	O
of	O
the	O
core	O
language	O
.	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
it	O
.	O
For	O
example	O
,	O
StringLiteral	O
is	O
like	O
an	O
abbreviation	O
for	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
When	O
written	O
StringLiteral	O
the	O
compiler	O
optimizes	O
identical	O
strings	O
to	O
the	O
same	O
instance	O
to	O
save	O
space	O
.	O
StringLiteral	O
+	O
5	O
=	O
=	O
StringLiteral	O
=	O
=	O
>	O
true	O
The	O
compiler	O
has	O
syntactic	O
sugar	O
for	O
a	O
lot	O
of	O
stuff	O
,	O
including	O
not	O
having	O
to	O
box	O
/	O
unbox	O
between	O
object	O
versions	O
and	O
their	O
native	O
types	O
,	O
no	O
parent	O
means	O
Object	B-api_mention
,	O
default	O
constructor	O
,	O
.	O
.	O
.	O
Question	O
-	O
19418427	O
,	O
answer	O
-	O
19418553	O
If	O
you	O
take	O
a	O
look	O
at	O
this	O
methods	O
#	O
pre	O
and	O
its	O
decompiled	O
with	O
javap	O
-	O
c	O
ClassWithTheseMethods	O
versions	O
you	O
will	O
see	O
#	O
pre	O
and	O
#	O
pre	O
So	O
if	O
Strings	O
are	O
not	O
final	O
compiler	O
will	O
have	O
to	O
use	O
StringBuilder	B-api_mention
to	O
concatenate	O
str1	O
and	O
str2	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
will	O
be	O
compiled	O
to	O
String	B-api_mention
concat	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
means	O
that	O
concat	O
will	O
be	O
created	O
at	O
runtime	O
so	O
will	O
not	O
come	O
from	O
String	B-api_mention
pool	O
.	O
Also	O
if	O
Strings	O
are	O
final	O
then	O
compiler	O
can	O
assume	O
that	O
they	O
will	O
never	O
change	O
so	O
instead	O
of	O
using	O
StringBuilder	B-api_mention
it	O
can	O
safely	O
concatenate	O
its	O
values	O
so	O
String	B-api_mention
concat	O
=	O
str1	O
+	O
str2	O
;	O
can	O
be	O
changed	O
to	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
+	O
StringLiteral	O
;	O
and	O
concatenated	O
into	O
String	B-api_mention
concat	O
=	O
StringLiteral	O
;	O
which	O
means	O
that	O
concate	O
will	O
become	O
sting	O
literal	O
which	O
will	O
be	O
interned	O
in	O
string	O
pool	O
and	O
then	O
compared	O
with	O
same	O
string	O
literal	O
from	O
that	O
pool	O
in	O
if	O
statement	O
.	O
Question	O
-	O
26791441	O
,	O
answer	O
-	O
26819171	O
This	O
is	O
not	O
an	O
easy	O
problem	O
.	O
And	O
the	O
more	O
search	O
-	O
replacement	O
parameters	O
you	O
have	O
,	O
the	O
trickier	O
it	O
gets	O
.	O
You	O
have	O
several	O
options	O
,	O
scattered	O
on	O
the	O
palette	O
of	O
ugly	O
-	O
elegant	O
,	O
efficient	O
-	O
wasteful	O
:	O
#	O
li	O
Use	O
StringUtils	B-api_mention
.	I-api_mention
replaceEach	I-api_mention
from	O
Apache	O
Commons	O
as	O
@	O
AlanHay	O
recommended	O
.	O
This	O
is	O
a	O
good	O
option	O
if	O
you	O
'	O
re	O
free	O
to	O
add	O
new	O
dependencies	O
in	O
your	O
project	O
.	O
You	O
might	O
get	O
lucky	O
:	O
the	O
dependency	O
might	O
be	O
included	O
already	O
in	O
your	O
project	O
#	O
li	O
Use	O
a	O
temporary	O
placeholder	O
as	O
@	O
Jeroen	O
suggested	O
,	O
and	O
perform	O
the	O
replacement	O
in	O
2	O
steps	O
:	O
#	O
li	O
Replace	O
all	O
search	O
patterns	O
with	O
a	O
unique	O
tag	O
that	O
doesn	O
'	O
t	O
exist	O
in	O
the	O
original	O
text	O
#	O
li	O
Replace	O
the	O
placeholders	O
with	O
the	O
real	O
target	O
replacement	O
This	O
is	O
not	O
a	O
great	O
approach	O
,	O
for	O
several	O
reasons	O
:	O
it	O
needs	O
to	O
ensure	O
that	O
the	O
tags	O
used	O
in	O
the	O
first	O
step	O
are	O
really	O
unique	O
;	O
it	O
performs	O
more	O
string	O
replacement	O
operations	O
than	O
really	O
necessary	O
#	O
li	O
Build	O
a	O
regex	O
from	O
all	O
the	O
patterns	O
and	O
use	O
the	O
method	O
with	O
Matcher	B-api_mention
and	O
StringBuffer	B-api_mention
as	O
suggested	O
by	O
@	O
arshajii	O
.	O
This	O
is	O
not	O
terrible	O
,	O
but	O
not	O
that	O
great	O
either	O
,	O
as	O
building	O
the	O
regex	O
is	O
kind	O
of	O
hackish	O
,	O
and	O
it	O
involves	O
StringBuffer	B-api_mention
which	O
went	O
out	O
of	O
fashion	O
a	O
while	O
ago	O
in	O
favor	O
of	O
StringBuilder	B-api_mention
.	O
#	O
li	O
Use	O
a	O
recursive	O
solution	O
proposed	O
by	O
@	O
mjolka	O
,	O
by	O
splitting	O
the	O
string	O
at	O
the	O
matched	O
patterns	O
,	O
and	O
recursing	O
on	O
the	O
remaining	O
segments	O
.	O
This	O
is	O
a	O
fine	O
solution	O
,	O
compact	O
and	O
quite	O
elegant	O
.	O
Its	O
weakness	O
is	O
the	O
potentially	O
many	O
substring	O
and	O
concatenation	O
operations	O
,	O
and	O
the	O
stack	O
size	O
limits	O
that	O
apply	O
to	O
all	O
recursive	O
solutions	O
#	O
li	O
Split	O
the	O
text	O
to	O
words	O
and	O
use	O
Java	O
8	O
streams	O
to	O
perform	O
the	O
replacements	O
elegantly	O
as	O
@	O
msandiford	O
suggested	O
,	O
but	O
of	O
course	O
that	O
only	O
works	O
if	O
you	O
are	O
ok	O
with	O
splitting	O
at	O
word	O
boundaries	O
,	O
which	O
makes	O
it	O
not	O
suitable	O
as	O
a	O
general	O
solution	O
Here	O
'	O
s	O
my	O
version	O
,	O
based	O
on	O
ideas	O
borrowed	O
from	O
Apache	O
'	O
s	O
implementation	O
.	O
It	O
'	O
s	O
neither	O
simple	O
nor	O
elegant	O
,	O
but	O
it	O
works	O
,	O
and	O
should	O
be	O
relatively	O
efficient	O
,	O
without	O
unnecessary	O
steps	O
.	O
In	O
a	O
nutshell	O
,	O
it	O
works	O
like	O
this	O
:	O
repeatedly	O
find	O
the	O
next	O
matching	O
search	O
pattern	O
in	O
the	O
text	O
,	O
and	O
use	O
a	O
StringBuilder	B-api_mention
to	O
accumulate	O
the	O
unmatched	O
segments	O
and	O
the	O
replacements	O
.	O
#	O
pre	O
Unit	O
tests	O
:	O
#	O
pre	O
Question	O
-	O
30125296	O
,	O
answer	O
-	O
35035659	O
You	O
can	O
use	O
reduce	O
method	O
:	O
long	O
creditAmountSum	O
=	O
result	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
reduce	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
13291166	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
a	O
"	O
built	O
-	O
in	O
"	O
method	O
of	O
enum	O
.	O
It	O
is	O
final	O
and	O
you	O
cannot	O
change	O
its	O
implementation	O
.	O
It	O
returns	O
the	O
name	O
of	O
enum	O
constant	O
as	O
it	O
is	O
written	O
,	O
e	O
.	O
g	O
.	O
in	O
upper	O
case	O
,	O
without	O
spaces	O
etc	O
.	O
Compare	O
MOBILE	O
_	O
PHONE	O
_	O
NUMBER	O
and	O
Mobile	O
phone	O
number	O
.	O
Which	O
version	O
is	O
more	O
readable	O
?	O
I	O
believe	O
the	O
second	O
one	O
.	O
This	O
is	O
the	O
difference	O
:	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
always	O
returns	O
MOBILE	O
_	O
PHONE	O
_	O
NUMBER	O
,	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
may	O
be	O
overriden	O
to	O
return	O
Mobile	O
phone	O
number	O
.	O
Question	O
-	O
22463062	O
,	O
answer	O
-	O
28324294	O
You	O
can	O
also	O
use	O
LocalDate	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
LocalDateTime	B-api_mention
.	I-api_mention
parse	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
String	B-api_mention
without	O
providing	O
it	O
with	O
a	O
pattern	O
,	O
if	O
the	O
String	B-api_mention
is	O
in	O
ISO	O
-	O
8601	O
format	O
.	O
for	O
example	O
,	O
#	O
pre	O
Output	O
,	O
#	O
pre	O
and	O
use	O
DateTimeFormatter	B-api_mention
only	O
if	O
you	O
have	O
to	O
deal	O
with	O
other	O
date	O
patterns	O
,	O
For	O
example	O
,	O
dd	O
MMM	O
uuuu	O
represents	O
the	O
day	O
of	O
the	O
month	O
(	O
two	O
digits	O
)	O
,	O
three	O
letters	O
of	O
the	O
name	O
of	O
the	O
month	O
(	O
Jan	O
,	O
Feb	O
,	O
Mar	O
,	O
.	O
.	O
.	O
)	O
,	O
and	O
a	O
four	O
-	O
digit	O
year	O
:	O
#	O
pre	O
Output	O
04	O
Aug	O
2015	O
parses	O
to	O
2015	O
-	O
08	O
-	O
04	O
also	O
remember	O
that	O
the	O
DateTimeFormatter	B-api_mention
object	O
is	O
bidirectional	O
;	O
it	O
can	O
both	O
parse	O
input	O
and	O
format	O
output	O
.	O
#	O
pre	O
Output	O
2015	O
-	O
08	O
-	O
04	O
formats	O
as	O
04	O
Aug	O
2015	O
(	O
see	O
complete	O
list	O
of	O
Patterns	B-api_mention
for	O
Formatting	O
and	O
Parsing	O
DateFormatter	B-api_mention
)	O
#	O
pre	O
Question	O
-	O
20331163	O
,	O
answer	O
-	O
20331243	O
Create	O
a	O
DateTimeFormatter	B-api_mention
using	O
DateTimeFormat	B-api_mention
.	I-api_mention
forPattern	I-api_mention
(	O
String	B-api_mention
)	O
Using	O
Joda	O
time	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
Also	O
,	O
if	O
you	O
wanted	O
to	O
use	O
standard	O
Java	O
,	O
you	O
would	O
do	O
it	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
26318569	O
,	O
answer	O
-	O
26319364	O
You	O
'	O
re	O
nesting	O
mocking	O
inside	O
of	O
mocking	O
.	O
You	O
'	O
re	O
calling	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
does	O
some	O
mocking	O
,	O
before	O
you	O
'	O
ve	O
finished	O
the	O
mocking	O
for	O
MyMainModel	O
.	O
Mockito	B-api_mention
doesn	O
'	O
t	O
like	O
it	O
when	O
you	O
do	O
this	O
.	O
Replace	O
#	O
pre	O
with	O
#	O
pre	O
To	O
understand	O
why	O
this	O
causes	O
a	O
problem	O
,	O
you	O
need	O
to	O
know	O
a	O
little	O
about	O
how	O
Mockito	B-api_mention
works	O
,	O
and	O
also	O
be	O
aware	O
in	O
what	O
order	O
expressions	O
and	O
statements	O
are	O
evaluated	O
in	O
Java	O
.	O
Mockito	B-api_mention
can	O
'	O
t	O
read	O
your	O
source	O
code	O
,	O
so	O
in	O
order	O
to	O
figure	O
out	O
what	O
you	O
are	O
asking	O
it	O
to	O
do	O
,	O
it	O
relies	O
a	O
lot	O
on	O
static	O
state	O
.	O
When	O
you	O
call	O
a	O
method	O
on	O
a	O
mock	O
object	O
,	O
Mockito	B-api_mention
records	O
the	O
details	O
of	O
the	O
call	O
in	O
an	O
internal	O
list	O
of	O
invocations	O
.	O
The	O
when	O
method	O
reads	O
the	O
last	O
of	O
these	O
invocations	O
off	O
the	O
list	O
and	O
records	O
this	O
invocation	O
in	O
the	O
OngoingStubbing	B-api_mention
object	O
it	O
returns	O
.	O
The	O
line	O
Mockito	B-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
thenReturn	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
causes	O
the	O
following	O
interactions	O
with	O
Mockito	B-api_mention
:	O
#	O
li	O
Mock	B-api_mention
method	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
#	O
li	O
Static	O
method	O
when	O
is	O
called	O
,	O
#	O
li	O
Method	O
thenReturn	O
is	O
called	O
on	O
the	O
OngoingStubbing	B-api_mention
object	O
returned	O
by	O
the	O
when	O
method	O
.	O
The	O
thenReturn	B-api_mention
method	O
can	O
then	O
instruct	O
the	O
mock	O
it	O
received	O
via	O
the	O
OngoingStubbing	B-api_mention
method	O
to	O
handle	O
any	O
suitable	O
call	O
to	O
the	O
getList	O
method	O
to	O
return	O
someModelList	O
.	O
In	O
fact	O
,	O
as	O
Mockito	B-api_mention
can	O
'	O
t	O
see	O
your	O
code	O
,	O
you	O
can	O
also	O
write	O
your	O
mocking	O
as	O
follows	O
:	O
#	O
pre	O
This	O
style	O
is	O
somewhat	O
less	O
clear	O
to	O
read	O
,	O
especially	O
since	O
in	O
this	O
case	O
the	O
null	O
has	O
to	O
be	O
casted	O
,	O
but	O
it	O
generates	O
the	O
same	O
sequence	O
of	O
interactions	O
with	O
Mockito	B-api_mention
and	O
will	O
achieve	O
the	O
same	O
result	O
as	O
the	O
line	O
above	O
.	O
However	O
,	O
the	O
line	O
Mockito	B-api_mention
.	I-api_mention
when	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
thenReturn	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
causes	O
the	O
following	O
interactions	O
with	O
Mockito	B-api_mention
:	O
#	O
li	O
Mock	B-api_mention
method	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
#	O
li	O
Static	O
method	O
when	O
is	O
called	O
,	O
#	O
li	O
A	O
new	O
mock	O
of	O
SomeModel	O
is	O
created	O
(	O
inside	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
,	O
#	O
li	O
Mock	B-api_mention
method	O
model	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
called	O
,	O
At	O
this	O
point	O
Mockito	B-api_mention
gets	O
confused	O
.	O
It	O
thought	O
you	O
were	O
mocking	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
but	O
now	O
you	O
'	O
re	O
telling	O
it	O
you	O
want	O
to	O
mock	O
the	O
model	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
To	O
Mockito	B-api_mention
,	O
it	O
looks	O
like	O
you	O
'	O
re	O
doing	O
the	O
following	O
:	O
#	O
pre	O
This	O
looks	O
silly	O
to	O
Mockito	B-api_mention
as	O
it	O
can	O
'	O
t	O
be	O
sure	O
what	O
you	O
'	O
re	O
doing	O
with	O
mainModel	O
.	B-api_mention
getList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Note	O
that	O
we	O
did	O
not	O
get	O
to	O
the	O
thenReturn	O
method	O
call	O
,	O
as	O
the	O
JVM	O
needs	O
to	O
evaluate	O
the	O
parameters	O
to	O
this	O
method	O
before	O
it	O
can	O
call	O
the	O
method	O
.	O
In	O
this	O
case	O
,	O
this	O
means	O
calling	O
the	O
getSomeList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Generally	O
it	O
is	O
a	O
bad	O
design	O
decision	O
to	O
rely	O
on	O
static	O
state	O
,	O
as	O
Mockito	B-api_mention
does	O
,	O
because	O
it	O
can	O
lead	O
to	O
cases	O
where	O
the	O
Principle	O
of	O
Least	O
Astonishment	O
is	O
violated	O
.	O
However	O
,	O
Mockito	B-api_mention
'	I-api_mention
s	I-api_mention
design	O
does	O
make	O
for	O
clear	O
and	O
expressive	O
mocking	O
,	O
even	O
if	O
it	O
leads	O
to	O
astonishment	O
sometimes	O
.	O
Finally	O
,	O
recent	O
versions	O
of	O
Mockito	B-api_mention
add	O
an	O
extra	O
line	O
to	O
the	O
error	O
message	O
above	O
.	O
This	O
extra	O
line	O
indicates	O
you	O
may	O
be	O
in	O
the	O
same	O
situation	O
as	O
this	O
question	O
:	O
#	O
blockquote	O
Question	O
-	O
10904911	O
,	O
answer	O
-	O
10904956	O
What	O
you	O
want	O
is	O
the	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
There	O
is	O
a	O
static	O
Arrays	B-api_mention
.	I-api_mention
toString	I-api_mention
helper	O
method	O
for	O
every	O
different	O
primitive	O
java	O
type	O
;	O
the	O
one	O
for	O
int	O
[	O
]	O
says	O
this	O
:	O
#	O
blockquote	O
Question	O
-	O
4645020	O
It	O
is	O
supposed	O
to	O
be	O
generally	O
preferable	O
to	O
use	O
a	O
StringBuilder	B-api_mention
for	O
string	O
concatenation	O
in	O
Java	O
.	O
Is	O
this	O
always	O
the	O
case	O
?	O
What	O
I	O
mean	O
is	O
this	O
:	O
Is	O
the	O
overhead	O
of	O
creating	O
a	O
StringBuilder	B-api_mention
object	O
,	O
calling	O
the	O
append	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
and	O
finally	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
already	O
smaller	O
then	O
concatenating	O
existing	O
strings	O
with	O
the	O
+	O
operator	O
for	O
two	O
strings	O
,	O
or	O
is	O
it	O
only	O
advisable	O
for	O
more	O
(	O
than	O
two	O
)	O
strings	O
?	O
If	O
there	O
is	O
such	O
a	O
threshold	O
,	O
what	O
does	O
it	O
depend	O
on	O
(	O
perhaps	O
the	O
string	O
length	O
,	O
but	O
in	O
which	O
way	O
)	O
?	O
And	O
finally	O
,	O
would	O
you	O
trade	O
the	O
readability	O
and	O
conciseness	O
of	O
the	O
+	O
concatenation	O
for	O
the	O
performance	O
of	O
the	O
StringBuilder	B-api_mention
in	O
smaller	O
cases	O
like	O
two	O
,	O
three	O
or	O
four	O
strings	O
?	O
EDIT	O
Explicit	O
use	O
of	O
StringBuilder	B-api_mention
for	O
regular	O
concatenations	O
is	O
being	O
mentioned	O
as	O
obsolete	O
at	O
obsolete	O
java	O
optimization	O
tips	O
as	O
well	O
as	O
at	O
java	O
urban	O
myths	O
.	O
Question	O
-	O
28584669	O
,	O
answer	O
-	O
28584954	O
Because	O
thats	O
the	O
standard	O
.	O
Infinity	O
represents	O
a	O
number	O
greater	O
than	O
or	O
less	O
than	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
/	O
-	O
Double	B-api_mention
.	I-api_mention
MAX	I-api_mention
_	I-api_mention
VALUE	I-api_mention
.	O
NaN	O
represents	O
the	O
outcome	O
of	O
an	O
operation	O
that	O
didn	O
'	O
t	O
make	O
sense	O
.	O
That	O
is	O
,	O
the	O
operation	O
didn	O
'	O
t	O
possibly	O
come	O
out	O
with	O
a	O
number	O
.	O
I	O
would	O
guess	O
the	O
logic	O
is	O
once	O
a	O
number	O
gets	O
big	O
enough	O
(	O
infinity	O
)	O
and	O
because	O
of	O
the	O
limitation	O
of	O
floating	O
point	O
numbers	O
,	O
adding	O
numbers	O
to	O
it	O
won	O
'	O
t	O
change	O
the	O
outcome	O
,	O
so	O
its	O
'	O
like	O
'	O
infinity	O
.	O
So	O
if	O
you	O
want	O
to	O
compare	O
to	O
really	O
big	O
numbers	O
,	O
at	O
some	O
point	O
you	O
might	O
just	O
say	O
those	O
two	O
big	O
numbers	O
are	O
close	O
enough	O
for	O
all	O
intents	O
and	O
purposes	O
.	O
But	O
if	O
you	O
want	O
to	O
compare	O
two	O
things	O
that	O
both	O
aren	O
'	O
t	O
numbers	O
,	O
you	O
can	O
'	O
t	O
compare	O
them	O
so	O
its	O
false	O
.	O
At	O
least	O
you	O
couldn	O
'	O
t	O
compare	O
them	O
as	O
a	O
primitive	O
.	O
Question	O
-	O
5439529	O
,	O
answer	O
-	O
15357940	O
Or	O
simply	O
mystring	O
.	B-api_mention
matches	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
though	O
it	O
would	O
return	O
true	O
for	O
numbers	O
larger	O
than	O
an	O
int	O
Question	O
-	O
32334319	O
,	O
answer	O
-	O
32334651	O
The	O
API	O
guarantees	O
a	O
stable	O
sorting	O
which	O
Quicksort	O
doesn	O
â€™	O
t	O
offer	O
.	O
However	O
,	O
when	O
sorting	O
primitive	O
values	O
by	O
their	O
natural	O
order	O
you	O
won	O
â€™	O
t	O
notice	O
a	O
difference	O
as	O
primitive	O
values	O
have	O
no	O
identity	O
.	O
Therefore	O
,	O
Quicksort	O
is	O
used	O
for	O
primitive	O
arrays	O
as	O
it	O
is	O
slightly	O
more	O
efficient	O
.	O
For	O
objects	O
you	O
may	O
notice	O
,	O
when	O
objects	O
which	O
are	O
deemed	O
equal	O
according	O
to	O
their	O
equals	O
implementation	O
or	O
the	O
provided	O
Comparator	B-api_mention
change	O
their	O
order	O
.	O
Therefore	O
,	O
Quicksort	O
is	O
not	O
an	O
option	O
.	O
So	O
a	O
variant	O
of	O
MergeSort	O
is	O
used	O
,	O
the	O
current	O
Java	O
versions	O
use	O
TimSort	O
.	O
This	O
applies	O
to	O
both	O
,	O
Arrays	B-api_mention
.	I-api_mention
sort	I-api_mention
and	O
Collections	B-api_mention
.	I-api_mention
sort	I-api_mention
,	O
though	O
with	O
Java	O
8	O
,	O
the	O
List	B-api_mention
itself	O
may	O
override	O
the	O
sort	O
algorithms	O
.	O
Question	O
-	O
28818506	O
I	O
'	O
ve	O
been	O
working	O
with	O
the	O
new	O
Optional	B-api_mention
type	O
in	O
Java	O
8	O
,	O
and	O
I	O
'	O
ve	O
come	O
across	O
what	O
seems	O
like	O
a	O
common	O
operation	O
that	O
isn	O
'	O
t	O
supported	O
functionally	O
:	O
an	O
"	O
orElseOptional	O
"	O
Consider	O
the	O
following	O
pattern	O
:	O
#	O
pre	O
There	O
are	O
many	O
forms	O
of	O
this	O
pattern	O
,	O
but	O
it	O
boils	O
down	O
to	O
wanting	O
an	O
"	O
orElse	O
"	O
on	O
an	O
optional	O
that	O
takes	O
a	O
function	O
producing	O
a	O
new	O
optional	O
,	O
called	O
only	O
if	O
the	O
current	O
one	O
does	O
not	O
exist	O
.	O
It	O
'	O
s	O
implementation	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
'	O
m	O
curious	O
if	O
there	O
'	O
s	O
a	O
reason	O
such	O
a	O
method	O
doesn	O
'	O
t	O
exist	O
,	O
if	O
I	O
'	O
m	O
just	O
using	O
Optional	B-api_mention
in	O
an	O
unintended	O
way	O
,	O
and	O
what	O
other	O
ways	O
people	O
have	O
come	O
up	O
with	O
to	O
deal	O
with	O
this	O
case	O
.	O
I	O
should	O
say	O
that	O
I	O
think	O
that	O
solutions	O
involving	O
custom	O
utility	O
classes	O
/	O
methods	O
aren	O
'	O
t	O
elegant	O
because	O
people	O
working	O
with	O
my	O
code	O
won	O
'	O
t	O
necessarily	O
know	O
they	O
exist	O
.	O
Also	O
,	O
if	O
anyone	O
knows	O
,	O
will	O
such	O
a	O
method	O
be	O
included	O
in	O
JDK	O
9	O
,	O
and	O
where	O
might	O
I	O
propose	O
such	O
a	O
method	O
?	O
This	O
seems	O
like	O
a	O
pretty	O
glaring	O
omission	O
to	O
the	O
API	O
to	O
me	O
.	O
Question	O
-	O
29095967	O
I	O
have	O
this	O
list	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
:	O
[	O
StringLiteral	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
null	O
,	O
StringLiteral	O
,	O
StringLiteral	O
]	O
And	O
I	O
'	O
d	O
like	O
something	O
like	O
this	O
:	O
[	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
]	O
,	O
[	O
StringLiteral	O
,	O
StringLiteral	O
]	O
]	O
In	O
other	O
words	O
I	O
want	O
to	O
split	O
my	O
list	O
in	O
sublists	O
using	O
the	O
null	O
value	O
as	O
separator	O
,	O
in	O
order	O
to	O
obtain	O
a	O
list	O
of	O
lists	O
(	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
)	O
.	O
I	O
'	O
m	O
looking	O
for	O
a	O
Java	O
8	O
solution	O
.	O
I	O
'	O
ve	O
tried	O
with	O
Collectors	B-api_mention
.	I-api_mention
partitioningBy	I-api_mention
but	O
I	O
'	O
m	O
not	O
sure	O
it	O
is	O
what	O
I	O
'	O
m	O
looking	O
for	O
.	O
Thanks	O
!	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877283	O
The	O
Integer	B-api_mention
class	O
has	O
a	O
static	O
cache	O
,	O
that	O
stores	O
256	O
special	O
Integer	B-api_mention
objects	O
-	O
one	O
for	O
every	O
value	O
between	O
-	O
128	O
and	O
127	O
.	O
With	O
that	O
in	O
mind	O
,	O
consider	O
the	O
difference	O
between	O
these	O
three	O
.	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
(	O
obviously	O
)	O
makes	O
a	O
brand	O
new	O
Integer	B-api_mention
object	O
.	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
an	O
int	O
primitive	O
value	O
after	O
parsing	O
the	O
String	B-api_mention
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
more	O
complex	O
than	O
the	O
others	O
.	O
It	O
starts	O
off	O
by	O
parsing	O
the	O
String	B-api_mention
.	O
Then	O
,	O
if	O
the	O
value	O
is	O
between	O
-	O
128	O
and	O
127	O
,	O
it	O
returns	O
the	O
corresponding	O
object	O
from	O
the	O
static	O
cache	O
.	O
If	O
the	O
value	O
is	O
outside	O
of	O
this	O
range	O
,	O
then	O
it	O
invokes	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
passes	O
in	O
the	O
value	O
,	O
so	O
that	O
you	O
get	O
a	O
new	O
object	O
.	O
Now	O
,	O
consider	O
the	O
three	O
expressions	O
in	O
the	O
question	O
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
true	O
,	O
because	O
the	O
Integer	B-api_mention
whose	O
value	O
is	O
127	O
is	O
retrieved	O
twice	O
from	O
the	O
static	O
cache	O
,	O
and	O
compared	O
to	O
itself	O
.	O
There	O
'	O
s	O
only	O
one	O
Integer	B-api_mention
object	O
involved	O
,	O
so	O
this	O
returns	O
true	O
.	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
returns	O
false	O
,	O
because	O
128	O
is	O
not	O
in	O
the	O
static	O
cache	O
.	O
So	O
a	O
new	O
Integer	B-api_mention
is	O
created	O
for	O
each	O
side	O
of	O
the	O
equality	O
.	O
Since	O
there	O
are	O
two	O
different	O
Integer	B-api_mention
objects	O
,	O
and	O
=	O
=	O
for	O
objects	O
only	O
returns	O
true	O
if	O
both	O
sides	O
are	O
the	O
exact	O
same	O
object	O
,	O
this	O
is	O
going	O
to	O
be	O
false	O
.	O
Integer	B-api_mention
.	I-api_mention
parseInt	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
=	O
=	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
This	O
is	O
comparing	O
the	O
primitive	O
int	O
value	O
128	O
on	O
the	O
left	O
,	O
with	O
a	O
newly	O
created	O
Integer	B-api_mention
object	O
on	O
the	O
right	O
.	O
But	O
because	O
it	O
doesn	O
'	O
t	O
make	O
sense	O
to	O
compare	O
an	O
int	O
to	O
an	O
Integer	B-api_mention
,	O
Java	O
will	O
auto	O
-	O
unbox	O
the	O
Integer	B-api_mention
before	O
doing	O
the	O
comparison	O
;	O
so	O
you	O
end	O
up	O
comparing	O
an	O
int	O
to	O
an	O
int	O
.	O
Since	O
the	O
primitive	O
128	O
is	O
equal	O
to	O
itself	O
,	O
this	O
returns	O
true	O
.	O
Question	O
-	O
7520432	O
,	O
answer	O
-	O
27478241	O
=	O
=	O
can	O
be	O
used	O
in	O
many	O
object	O
types	O
but	O
you	O
can	O
use	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
for	O
any	O
type	O
,	O
especially	O
Strings	O
and	O
Google	O
Map	O
Markers	O
.	O
Question	O
-	O
28459498	O
,	O
answer	O
-	O
28513908	O
I	O
have	O
some	O
recollections	O
from	O
the	O
early	O
design	O
of	O
the	O
Streams	B-api_mention
API	O
that	O
might	O
shed	O
some	O
light	O
on	O
the	O
design	O
rationale	O
.	O
Back	O
in	O
2012	O
,	O
we	O
were	O
adding	O
lambdas	O
to	O
the	O
language	O
,	O
and	O
we	O
wanted	O
a	O
collections	O
-	O
oriented	O
or	O
"	O
bulk	O
data	O
"	O
set	O
of	O
operations	O
,	O
programmed	O
using	O
lambdas	O
,	O
that	O
would	O
facilitate	O
parallelism	O
.	O
The	O
idea	O
of	O
lazily	O
chaining	O
operations	O
together	O
was	O
well	O
established	O
by	O
this	O
point	O
.	O
We	O
also	O
didn	O
'	O
t	O
want	O
the	O
intermediate	O
operations	O
to	O
store	O
results	O
.	O
The	O
main	O
issues	O
we	O
needed	O
to	O
decide	O
were	O
what	O
the	O
objects	O
in	O
the	O
chain	O
looked	O
like	O
in	O
the	O
API	O
and	O
how	O
they	O
hooked	O
up	O
to	O
data	O
sources	O
.	O
The	O
sources	O
were	O
often	O
collections	O
,	O
but	O
we	O
also	O
wanted	O
to	O
support	O
data	O
coming	O
from	O
a	O
file	O
or	O
the	O
network	O
,	O
or	O
data	O
generated	O
on	O
-	O
the	O
-	O
fly	O
,	O
e	O
.	O
g	O
.	O
,	O
from	O
a	O
random	O
number	O
generator	O
.	O
There	O
were	O
many	O
influences	O
of	O
existing	O
work	O
on	O
the	O
design	O
.	O
Among	O
the	O
more	O
influential	O
were	O
Google	O
'	O
s	O
Guava	O
library	O
and	O
the	O
Scala	O
collections	O
library	O
.	O
(	O
If	O
anybody	O
is	O
surprised	O
about	O
the	O
influence	O
from	O
Guava	O
,	O
note	O
that	O
Kevin	O
Bourrillion	O
,	O
Guava	O
lead	O
developer	O
,	O
was	O
on	O
the	O
JSR	O
-	O
335	O
Lambda	O
expert	O
group	O
.	O
)	O
On	O
Scala	O
collections	O
,	O
we	O
found	O
this	O
talk	O
by	O
Martin	O
Odersky	O
to	O
be	O
of	O
particular	O
interest	O
:	O
Future	O
-	O
Proofing	O
Scala	O
Collections	O
:	O
from	O
Mutable	O
to	O
Persistent	O
to	O
Parallel	O
.	O
(	O
Stanford	O
EE380	O
,	O
2011	O
June	O
1	O
.	O
)	O
Our	O
prototype	O
design	O
at	O
the	O
time	O
was	O
based	O
around	O
Iterable	B-api_mention
.	O
The	O
familiar	O
operations	O
filter	B-api_mention
,	O
map	B-api_mention
,	O
and	O
so	O
forth	O
were	O
extension	O
(	O
default	O
)	O
methods	O
on	O
Iterable	B-api_mention
.	O
Calling	O
one	O
added	O
an	O
operation	O
to	O
the	O
chain	O
and	O
returned	O
another	O
Iterable	B-api_mention
.	O
A	O
terminal	O
operation	O
like	O
count	O
would	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
up	O
the	O
chain	O
to	O
the	O
source	O
,	O
and	O
the	O
operations	O
were	O
implemented	O
within	O
each	O
stage	O
'	O
s	O
Iterator	B-api_mention
.	O
Since	O
these	O
are	O
Iterables	O
,	O
you	O
can	O
call	O
the	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
more	O
than	O
once	O
.	O
What	O
should	O
happen	O
then	O
?	O
If	O
the	O
source	O
is	O
a	O
collection	O
,	O
this	O
mostly	O
works	O
fine	O
.	O
Collections	B-api_mention
are	O
Iterable	B-api_mention
,	O
and	O
each	O
call	O
to	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
produces	O
a	O
distinct	O
Iterator	B-api_mention
instance	O
that	O
is	O
independent	O
of	O
any	O
other	O
active	O
instances	O
,	O
and	O
each	O
traverses	O
the	O
collection	O
independently	O
.	O
Great	O
.	O
Now	O
what	O
if	O
the	O
source	O
is	O
one	O
-	O
shot	O
,	O
like	O
reading	O
lines	O
from	O
a	O
file	O
?	O
Maybe	O
the	O
first	O
Iterator	O
should	O
get	O
all	O
the	O
values	O
but	O
the	O
second	O
and	O
subsequent	O
ones	O
should	O
be	O
empty	O
.	O
Maybe	O
the	O
values	O
should	O
be	O
interleaved	O
among	O
the	O
Iterators	O
.	O
Or	O
maybe	O
each	O
Iterator	B-api_mention
should	O
get	O
all	O
the	O
same	O
values	O
.	O
Then	O
,	O
what	O
if	O
you	O
have	O
two	O
iterators	O
and	O
one	O
gets	O
farther	O
ahead	O
of	O
the	O
other	O
?	O
Somebody	O
will	O
have	O
to	O
buffer	O
up	O
the	O
values	O
in	O
the	O
second	O
Iterator	O
until	O
they	O
'	O
re	O
read	O
.	O
Worse	O
,	O
what	O
if	O
you	O
get	O
one	O
Iterator	B-api_mention
and	O
read	O
all	O
the	O
values	O
,	O
and	O
only	O
then	O
get	O
a	O
second	O
Iterator	B-api_mention
.	O
Where	O
do	O
the	O
values	O
come	O
from	O
now	O
?	O
Is	O
there	O
a	O
requirement	O
for	O
them	O
all	O
to	O
be	O
buffered	O
up	O
just	O
in	O
case	O
somebody	O
wants	O
a	O
second	O
Iterator	B-api_mention
?	O
Clearly	O
,	O
allowing	O
multiple	O
Iterators	O
over	O
a	O
one	O
-	O
shot	O
source	O
raises	O
a	O
lot	O
of	O
questions	O
.	O
We	O
didn	O
'	O
t	O
have	O
good	O
answers	O
for	O
them	O
.	O
We	O
wanted	O
consistent	O
,	O
predictable	O
behavior	O
for	O
what	O
happens	O
if	O
you	O
call	O
iterator	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
twice	O
.	O
This	O
pushed	O
us	O
toward	O
disallowing	O
multiple	O
traversals	O
,	O
making	O
the	O
pipelines	O
one	O
-	O
shot	O
.	O
We	O
also	O
observed	O
others	O
bumping	O
into	O
these	O
issues	O
.	O
In	O
the	O
JDK	O
,	O
most	O
Iterables	O
are	O
collections	O
or	O
collection	O
-	O
like	O
objects	O
,	O
which	O
allow	O
multiple	O
traversal	O
.	O
It	O
isn	O
'	O
t	O
specified	O
anywhere	O
,	O
but	O
there	O
seemed	O
to	O
be	O
an	O
unwritten	O
expectation	O
that	O
Iterables	O
allow	O
multiple	O
traversal	O
.	O
A	O
notable	O
exception	O
is	O
the	O
NIO	O
DirectoryStream	B-api_mention
interface	O
.	O
Its	O
specification	O
includes	O
this	O
interesting	O
warning	O
:	O
#	O
blockquote	O
[	O
bold	O
in	O
original	O
]	O
This	O
seemed	O
unusual	O
and	O
unpleasant	O
enough	O
that	O
we	O
didn	O
'	O
t	O
want	O
to	O
create	O
a	O
whole	O
bunch	O
of	O
new	O
Iterables	O
that	O
might	O
be	O
once	O
-	O
only	O
.	O
This	O
pushed	O
us	O
away	O
from	O
using	O
Iterable	B-api_mention
.	O
About	O
this	O
time	O
,	O
an	O
article	O
by	O
Bruce	O
Eckel	O
appeared	O
that	O
described	O
a	O
spot	O
of	O
trouble	O
he	O
'	O
d	O
had	O
with	O
Scala	O
.	O
He	O
'	O
d	O
written	O
this	O
code	O
:	O
#	O
pre	O
It	O
'	O
s	O
pretty	O
straightforward	O
.	O
It	O
parses	O
lines	O
of	O
text	O
into	O
Registrant	O
objects	O
and	O
prints	O
them	O
out	O
twice	O
.	O
Except	O
that	O
it	O
actually	O
only	O
prints	O
them	O
out	O
once	O
.	O
It	O
turns	O
out	O
that	O
he	O
thought	O
that	O
registrants	O
was	O
a	O
collection	O
,	O
when	O
in	O
fact	O
it	O
'	O
s	O
an	O
iterator	O
.	O
The	O
second	O
call	O
to	O
foreach	O
encounters	O
an	O
empty	O
iterator	O
,	O
from	O
which	O
all	O
values	O
have	O
been	O
exhausted	O
,	O
so	O
it	O
prints	O
nothing	O
.	O
This	O
kind	O
of	O
experience	O
convinced	O
us	O
that	O
it	O
was	O
very	O
important	O
to	O
have	O
clearly	O
predictable	O
results	O
if	O
multiple	O
traversal	O
is	O
attempted	O
.	O
It	O
also	O
highlighted	O
the	O
importance	O
of	O
distinguishing	O
between	O
lazy	O
pipeline	O
-	O
like	O
structures	O
from	O
actual	O
collections	O
that	O
store	O
data	O
.	O
This	O
in	O
turn	O
drove	O
the	O
separation	O
of	O
the	O
lazy	O
pipeline	O
operations	O
into	O
the	O
new	O
Stream	B-api_mention
interface	O
and	O
keeping	O
only	O
eager	O
,	O
mutative	O
operations	O
directly	O
on	O
Collections	B-api_mention
.	O
Brian	O
Goetz	O
has	O
explained	O
the	O
rationale	O
for	O
that	O
.	O
What	O
about	O
allowing	O
multiple	O
traversal	O
for	O
collection	O
-	O
based	O
pipelines	O
but	O
disallowing	O
it	O
for	O
non	O
-	O
collection	O
-	O
based	O
pipelines	O
?	O
It	O
'	O
s	O
inconsistent	O
,	O
but	O
it	O
'	O
s	O
sensible	O
.	O
If	O
you	O
'	O
re	O
reading	O
values	O
from	O
the	O
network	O
,	O
of	O
course	O
you	O
can	O
'	O
t	O
traverse	O
them	O
again	O
.	O
If	O
you	O
want	O
to	O
traverse	O
them	O
multiple	O
times	O
,	O
you	O
have	O
to	O
pull	O
them	O
into	O
a	O
collection	O
explicitly	O
.	O
But	O
let	O
'	O
s	O
explore	O
allowing	O
multiple	O
traversal	O
from	O
collections	O
-	O
based	O
pipelines	O
.	O
Let	O
'	O
s	O
say	O
you	O
did	O
this	O
:	O
#	O
pre	O
(	O
The	O
into	O
operation	O
is	O
now	O
spelled	O
collect	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
)	O
If	O
source	O
is	O
a	O
collection	O
,	O
then	O
the	O
first	O
into	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
will	O
create	O
a	O
chain	O
of	O
Iterators	B-api_mention
back	O
to	O
the	O
source	O
,	O
execute	O
the	O
pipeline	O
operations	O
,	O
and	O
send	O
the	O
results	O
into	O
the	O
destination	O
.	O
The	O
second	O
call	O
to	O
into	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
create	O
another	O
chain	O
of	O
Iterators	O
,	O
and	O
execute	O
the	O
pipeline	O
operations	O
again	O
.	O
This	O
isn	O
'	O
t	O
obviously	O
wrong	O
but	O
it	O
does	O
have	O
the	O
effect	O
of	O
performing	O
all	O
the	O
filter	O
and	O
map	O
operations	O
a	O
second	O
time	O
for	O
each	O
element	O
.	O
I	O
think	O
many	O
programmers	O
would	O
have	O
been	O
surprised	O
by	O
this	O
behavior	O
.	O
As	O
I	O
mentioned	O
above	O
,	O
we	O
had	O
been	O
talking	O
to	O
the	O
Guava	O
developers	O
.	O
One	O
of	O
the	O
cool	O
things	O
they	O
have	O
is	O
an	O
Idea	O
Graveyard	O
where	O
they	O
describe	O
features	O
that	O
they	O
decided	O
not	O
to	O
implement	O
along	O
with	O
the	O
reasons	O
.	O
The	O
idea	O
of	O
lazy	O
collections	O
sounds	O
pretty	O
cool	O
,	O
but	O
here	O
'	O
s	O
what	O
they	O
have	O
to	O
say	O
about	O
it	O
.	O
Consider	O
a	O
List	B-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
operation	O
that	O
returns	O
a	O
List	B-api_mention
:	O
#	O
blockquote	O
To	O
take	O
a	O
specific	O
example	O
,	O
what	O
'	O
s	O
the	O
cost	O
of	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
size	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
List	B-api_mention
?	O
For	O
commonly	O
used	O
classes	O
like	O
ArrayList	B-api_mention
,	O
they	O
'	O
re	O
O	O
(	O
1	O
)	O
.	O
But	O
if	O
you	O
call	O
one	O
of	O
these	O
on	O
a	O
lazily	O
-	O
filtered	O
list	O
,	O
it	O
has	O
to	O
run	O
the	O
filter	O
over	O
the	O
backing	O
list	O
,	O
and	O
all	O
of	O
a	O
sudden	O
these	O
operations	O
are	O
O	O
(	O
n	O
)	O
.	O
Worse	O
,	O
it	O
has	O
to	O
traverse	O
the	O
backing	O
list	O
on	O
every	O
operation	O
.	O
This	O
seemed	O
to	O
us	O
to	O
be	O
too	O
much	O
laziness	O
.	O
It	O
'	O
s	O
one	O
thing	O
to	O
set	O
up	O
some	O
operations	O
and	O
defer	O
actual	O
execution	O
until	O
you	O
so	O
"	O
Go	O
"	O
.	O
It	O
'	O
s	O
another	O
to	O
set	O
things	O
up	O
in	O
such	O
a	O
way	O
that	O
hides	O
a	O
potentially	O
large	O
amount	O
of	O
recomputation	O
.	O
In	O
proposing	O
to	O
disallow	O
non	O
-	O
linear	O
or	O
"	O
no	O
-	O
reuse	O
"	O
streams	O
,	O
Paul	O
Sandoz	O
described	O
the	O
potential	O
consequences	O
of	O
allowing	O
them	O
as	O
giving	O
rise	O
to	O
"	O
unexpected	O
or	O
confusing	O
results	O
.	O
"	O
He	O
also	O
mentioned	O
that	O
parallel	O
execution	O
would	O
make	O
things	O
even	O
trickier	O
.	O
Finally	O
,	O
I	O
'	O
d	O
add	O
that	O
a	O
pipeline	O
operation	O
with	O
side	O
effects	O
would	O
lead	O
to	O
difficult	O
and	O
obscure	O
bugs	O
if	O
the	O
operation	O
were	O
unexpectedly	O
executed	O
multiple	O
times	O
,	O
or	O
at	O
least	O
a	O
different	O
number	O
of	O
times	O
than	O
the	O
programmer	O
expected	O
.	O
(	O
But	O
Java	O
programmers	O
don	O
'	O
t	O
write	O
lambda	O
expressions	O
with	O
side	O
effects	O
,	O
do	O
they	O
?	O
DO	O
THEY	O
?	O
?	O
)	O
So	O
that	O
'	O
s	O
the	O
basic	O
rationale	O
for	O
the	O
Java	O
8	O
Streams	O
API	O
design	O
that	O
allows	O
one	O
-	O
shot	O
traversal	O
and	O
that	O
requires	O
a	O
strictly	O
linear	O
(	O
no	O
branching	O
)	O
pipeline	O
.	O
It	O
provides	O
consistent	O
behavior	O
across	O
multiple	O
different	O
stream	O
sources	O
,	O
it	O
clearly	O
separates	O
lazy	O
from	O
eager	O
operations	O
,	O
and	O
it	O
provides	O
a	O
straightforward	O
execution	O
model	O
.	O
With	O
regard	O
to	O
IEnumerable	O
,	O
I	O
am	O
far	O
from	O
an	O
expert	O
on	O
C	O
#	O
and	O
.	O
NET	O
,	O
so	O
I	O
would	O
appreciate	O
being	O
corrected	O
(	O
gently	O
)	O
if	O
I	O
draw	O
any	O
incorrect	O
conclusions	O
.	O
It	O
does	O
appear	O
,	O
however	O
,	O
that	O
IEnumerable	O
permits	O
multiple	O
traversal	O
to	O
behave	O
differently	O
with	O
different	O
sources	O
;	O
and	O
it	O
permits	O
a	O
branching	O
structure	O
of	O
nested	O
IEnumerable	O
operations	O
,	O
which	O
may	O
result	O
in	O
some	O
significant	O
recomputation	O
.	O
While	O
I	O
appreciate	O
that	O
different	O
systems	O
make	O
different	O
tradeoffs	O
,	O
these	O
are	O
two	O
characteristics	O
that	O
we	O
sought	O
to	O
avoid	O
in	O
the	O
design	O
of	O
the	O
Java	O
8	O
Streams	O
API	O
.	O
The	O
quicksort	O
example	O
given	O
by	O
the	O
OP	O
is	O
interesting	O
,	O
puzzling	O
,	O
and	O
I	O
'	O
m	O
sorry	O
to	O
say	O
,	O
somewhat	O
horrifying	O
.	O
Calling	O
QuickSort	O
takes	O
an	O
IEnumerable	O
and	O
returns	O
an	O
IEnumerable	O
,	O
so	O
no	O
sorting	O
is	O
actually	O
done	O
until	O
the	O
final	O
IEnumerable	O
is	O
traversed	O
.	O
What	O
the	O
call	O
seems	O
to	O
do	O
,	O
though	O
,	O
is	O
build	O
up	O
a	O
tree	O
structure	O
of	O
IEnumerables	O
that	O
reflects	O
the	O
partitioning	O
that	O
quicksort	O
would	O
do	O
,	O
without	O
actually	O
doing	O
it	O
.	O
(	O
This	O
is	O
lazy	O
computation	O
,	O
after	O
all	O
.	O
)	O
If	O
the	O
source	O
has	O
N	O
elements	O
,	O
the	O
tree	O
will	O
be	O
N	O
elements	O
wide	O
at	O
its	O
widest	O
,	O
and	O
it	O
will	O
be	O
lg	O
(	O
N	O
)	O
levels	O
deep	O
.	O
It	O
seems	O
to	O
me	O
-	O
-	O
and	O
once	O
again	O
,	O
I	O
'	O
m	O
not	O
a	O
C	O
#	O
or	O
.	O
NET	O
expert	O
-	O
-	O
that	O
this	O
will	O
cause	O
certain	O
innocuous	O
-	O
looking	O
calls	O
,	O
such	O
as	O
pivot	O
selection	O
via	O
ints	O
.	B-api_mention
First	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
to	O
be	O
more	O
expensive	O
than	O
they	O
look	O
.	O
At	O
the	O
first	O
level	O
,	O
of	O
course	O
,	O
it	O
'	O
s	O
O	O
(	O
1	O
)	O
.	O
But	O
consider	O
a	O
partition	O
deep	O
in	O
the	O
tree	O
,	O
at	O
the	O
right	O
-	O
hand	O
edge	O
.	O
To	O
compute	O
the	O
first	O
element	O
of	O
this	O
partition	O
,	O
the	O
entire	O
source	O
has	O
to	O
be	O
traversed	O
,	O
an	O
O	O
(	O
N	O
)	O
operation	O
.	O
But	O
since	O
the	O
partitions	O
above	O
are	O
lazy	O
,	O
they	O
must	O
be	O
recomputed	O
,	O
requiring	O
O	O
(	O
lg	O
N	O
)	O
comparisons	O
.	O
So	O
selecting	O
the	O
pivot	O
would	O
be	O
an	O
O	O
(	O
N	O
lg	O
N	O
)	O
operation	O
,	O
which	O
is	O
as	O
expensive	O
as	O
an	O
entire	O
sort	O
.	O
But	O
we	O
don	O
'	O
t	O
actually	O
sort	O
until	O
we	O
traverse	O
the	O
returned	O
IEnumerable	O
.	O
In	O
the	O
standard	O
quicksort	O
algorithm	O
,	O
each	O
level	O
of	O
partitioning	O
doubles	O
the	O
number	O
of	O
partitions	O
.	O
Each	O
partition	O
is	O
only	O
half	O
the	O
size	O
,	O
so	O
each	O
level	O
remains	O
at	O
O	O
(	O
N	O
)	O
complexity	O
.	O
The	O
tree	O
of	O
partitions	O
is	O
O	O
(	O
lg	O
N	O
)	O
high	O
,	O
so	O
the	O
total	O
work	O
is	O
O	O
(	O
N	O
lg	O
N	O
)	O
.	O
With	O
the	O
tree	O
of	O
lazy	O
IEnumerables	O
,	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
there	O
are	O
N	O
partitions	O
.	O
Computing	O
each	O
partition	O
requires	O
a	O
traversal	O
of	O
N	O
elements	O
,	O
each	O
of	O
which	O
requires	O
lg	O
(	O
N	O
)	O
comparisons	O
up	O
the	O
tree	O
.	O
To	O
compute	O
all	O
the	O
partitions	O
at	O
the	O
bottom	O
of	O
the	O
tree	O
,	O
then	O
,	O
requires	O
O	O
(	O
N	O
^	O
2	O
lg	O
N	O
)	O
comparisons	O
.	O
(	O
Is	O
this	O
right	O
?	O
I	O
can	O
hardly	O
believe	O
this	O
.	O
Somebody	O
please	O
check	O
this	O
for	O
me	O
.	O
)	O
In	O
any	O
case	O
,	O
it	O
is	O
indeed	O
cool	O
that	O
IEnumerable	O
can	O
be	O
used	O
this	O
way	O
to	O
build	O
up	O
complicated	O
structures	O
of	O
computation	O
.	O
But	O
if	O
it	O
does	O
increase	O
the	O
computational	O
complexity	O
as	O
much	O
as	O
I	O
think	O
it	O
does	O
,	O
it	O
would	O
seem	O
that	O
programming	O
this	O
way	O
is	O
something	O
that	O
should	O
be	O
avoided	O
unless	O
one	O
is	O
extremely	O
careful	O
.	O
Question	O
-	O
25606833	O
,	O
answer	O
-	O
25757572	O
There	O
are	O
several	O
issues	O
here	O
.	O
#	O
li	O
Any	O
solution	O
based	O
on	O
reading	O
lines	O
is	O
going	O
to	O
process	O
each	O
character	O
twice	O
.	O
Compilers	O
for	O
example	O
don	O
'	O
t	O
do	O
this	O
,	O
they	O
read	O
one	O
character	O
at	O
a	O
time	O
and	O
despatch	O
on	O
it	O
directly	O
.	O
#	O
li	O
Any	O
solution	O
based	O
on	O
readLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
going	O
to	O
create	O
Strings	B-api_mention
.	O
#	O
li	O
You	O
are	O
using	O
different	O
buffer	O
sizes	O
.	O
#	O
li	O
You	O
are	O
using	O
different	O
I	O
/	O
O	O
technologies	O
.	O
#	O
li	O
In	O
some	O
cases	O
you	O
are	O
using	O
character	O
conversion	O
,	O
while	O
in	O
others	O
you	O
aren	O
'	O
t	O
.	O
#	O
li	O
You	O
'	O
re	O
over	O
-	O
analyzing	O
the	O
file	O
.	O
You	O
don	O
'	O
t	O
really	O
care	O
where	O
the	O
white	O
space	O
is	O
,	O
or	O
how	O
much	O
of	O
it	O
there	O
is	O
,	O
as	O
long	O
as	O
it	O
separates	O
the	O
numbers	O
from	O
each	O
other	O
.	O
My	O
solution	O
:	O
#	O
pre	O
Question	O
-	O
9749746	O
,	O
answer	O
-	O
9749864	O
You	O
are	O
specifically	O
asking	O
about	O
how	O
they	O
internally	O
work	O
,	O
so	O
here	O
you	O
are	O
:	O
No	O
synchronization	O
#	O
pre	O
It	O
basically	O
reads	O
value	O
from	O
memory	O
,	O
increments	O
it	O
and	O
puts	O
back	O
to	O
memory	O
.	O
This	O
works	O
in	O
single	O
thread	O
but	O
nowadays	O
,	O
in	O
the	O
era	O
of	O
multi	O
-	O
core	O
,	O
multi	O
-	O
CPU	O
,	O
multi	O
-	O
level	O
caches	O
it	O
won	O
'	O
t	O
work	O
correctly	O
.	O
First	O
of	O
all	O
it	O
introduces	O
race	O
condition	O
(	O
several	O
threads	O
can	O
read	O
the	O
value	O
at	O
the	O
same	O
time	O
)	O
,	O
but	O
also	O
visibility	O
problems	O
.	O
The	O
value	O
might	O
only	O
be	O
stored	O
in	O
"	O
local	O
"	O
CPU	O
memory	O
(	O
some	O
cache	O
)	O
and	O
not	O
be	O
visible	O
for	O
other	O
CPUs	O
/	O
cores	O
(	O
and	O
thus	O
-	O
threads	O
)	O
.	O
This	O
is	O
why	O
many	O
refer	O
to	O
local	O
copy	O
of	O
a	O
variable	O
in	O
a	O
thread	O
.	O
It	O
is	O
very	O
unsafe	O
.	O
Consider	O
this	O
popular	O
but	O
broken	O
thread	O
-	O
stopping	O
code	O
:	O
#	O
pre	O
Add	O
volatile	O
to	O
stopped	O
variable	O
and	O
it	O
works	O
fine	O
-	O
if	O
any	O
other	O
thread	O
modifies	O
stopped	O
variable	O
via	O
pleaseStop	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
that	O
change	O
immediately	O
in	O
working	O
thread	O
'	O
s	O
while	O
(	O
args	O
)	O
loop	O
.	O
BTW	O
this	O
is	O
not	O
a	O
good	O
way	O
to	O
interrupt	O
a	O
thread	O
either	O
,	O
see	O
:	O
How	O
to	O
stop	O
a	O
thread	O
that	O
is	O
running	O
forever	O
without	O
any	O
use	O
and	O
Stopping	O
a	O
specific	O
java	O
thread	O
.	O
AtomicInteger	B-api_mention
#	O
pre	O
The	O
AtomicInteger	B-api_mention
class	O
uses	O
CAS	O
(	O
compare	O
-	O
and	O
-	O
swap	O
)	O
low	O
-	O
level	O
CPU	O
operations	O
(	O
no	O
synchronization	O
needed	O
!	O
)	O
They	O
allow	O
you	O
to	O
modify	O
a	O
particular	O
variable	O
only	O
if	O
the	O
present	O
value	O
is	O
equal	O
to	O
something	O
else	O
(	O
and	O
is	O
returned	O
successfully	O
)	O
.	O
So	O
when	O
you	O
execute	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
it	O
actually	O
runs	O
in	O
a	O
loop	O
(	O
simplified	O
real	O
implementation	O
)	O
:	O
#	O
pre	O
So	O
basically	O
:	O
read	O
;	O
try	O
to	O
store	O
incremented	O
value	O
;	O
if	O
not	O
successful	O
(	O
the	O
value	O
is	O
no	O
longer	O
equal	O
to	O
current	O
)	O
,	O
read	O
and	O
try	O
again	O
.	O
The	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
implemented	O
in	O
native	O
code	O
(	O
assembly	O
)	O
.	O
volatile	O
without	O
synchronization	O
#	O
pre	O
This	O
code	O
is	O
not	O
correct	O
.	O
It	O
fixes	O
the	O
visibility	O
issue	O
(	O
volatile	O
makes	O
sure	O
other	O
threads	O
can	O
see	O
change	O
made	O
to	O
counter	O
)	O
but	O
still	O
has	O
a	O
race	O
condition	O
.	O
This	O
has	O
been	O
explained	O
multiple	O
times	O
:	O
pre	O
/	O
post	O
-	O
incrementation	O
is	O
not	O
atomic	O
.	O
The	O
only	O
side	O
effect	O
of	O
volatile	O
is	O
"	O
flushing	O
"	O
caches	O
so	O
that	O
all	O
other	O
parties	O
see	O
the	O
freshest	O
version	O
of	O
the	O
data	O
.	O
This	O
is	O
too	O
strict	O
in	O
most	O
situations	O
;	O
that	O
is	O
why	O
volatile	O
is	O
not	O
default	O
.	O
volatile	O
without	O
synchronization	O
(	O
2	O
)	O
#	O
pre	O
The	O
same	O
problem	O
as	O
above	O
,	O
but	O
even	O
worse	O
because	O
i	O
is	O
not	O
private	O
.	O
The	O
race	O
condition	O
is	O
still	O
present	O
.	O
Why	O
is	O
it	O
a	O
problem	O
?	O
If	O
,	O
say	O
,	O
two	O
threads	O
run	O
this	O
code	O
simultaneously	O
,	O
the	O
output	O
might	O
be	O
+	O
5	O
or	O
+	O
10	O
.	O
However	O
,	O
you	O
are	O
guaranteed	O
to	O
see	O
the	O
change	O
.	O
Multiple	O
independent	O
synchronized	O
#	O
pre	O
Surprise	O
,	O
this	O
code	O
is	O
incorrect	O
as	O
well	O
.	O
In	O
fact	O
,	O
it	O
is	O
completely	O
wrong	O
.	O
First	O
of	O
all	O
you	O
are	O
synchronizing	O
on	O
i	O
,	O
which	O
is	O
about	O
to	O
be	O
changed	O
(	O
moreover	O
,	O
i	O
is	O
a	O
primitive	O
,	O
so	O
I	O
guess	O
you	O
are	O
synchronizing	O
on	O
a	O
temporary	O
Integer	O
created	O
via	O
autoboxing	O
.	O
.	O
.	O
)	O
Completely	O
flawed	O
.	O
You	O
could	O
also	O
write	O
:	O
#	O
pre	O
No	O
two	O
threads	O
can	O
enter	O
the	O
same	O
synchronized	O
block	O
with	O
the	O
same	O
lock	O
.	O
In	O
this	O
case	O
(	O
and	O
similarly	O
in	O
your	O
code	O
)	O
the	O
lock	O
object	O
changes	O
upon	O
every	O
execution	O
,	O
so	O
synchronized	O
effectively	O
has	O
no	O
effect	O
.	O
Even	O
if	O
you	O
have	O
used	O
a	O
final	O
variable	O
(	O
or	O
this	O
)	O
for	O
synchronization	O
,	O
the	O
code	O
is	O
still	O
incorrect	O
.	O
Two	O
threads	O
can	O
first	O
read	O
i	O
to	O
temp	O
synchronously	O
(	O
having	O
the	O
same	O
value	O
locally	O
in	O
temp	O
)	O
,	O
then	O
the	O
first	O
assigns	O
a	O
new	O
value	O
to	O
i	O
(	O
say	O
,	O
from	O
1	O
to	O
6	O
)	O
and	O
the	O
other	O
one	O
does	O
the	O
same	O
thing	O
(	O
from	O
1	O
to	O
6	O
)	O
.	O
The	O
synchronization	O
must	O
span	O
from	O
reading	O
to	O
assigning	O
a	O
value	O
.	O
Your	O
first	O
synchronization	O
has	O
no	O
effect	O
(	O
reading	O
an	O
int	O
is	O
atomic	O
)	O
and	O
the	O
second	O
as	O
well	O
.	O
In	O
my	O
opinion	O
,	O
these	O
are	O
the	O
correct	O
forms	O
:	O
#	O
pre	O
Question	O
-	O
6416706	O
,	O
answer	O
-	O
6416788	O
As	O
soon	O
as	O
you	O
call	O
contains	B-api_mention
,	O
containsAll	B-api_mention
,	O
equals	B-api_mention
,	O
hashCode	B-api_mention
,	O
remove	B-api_mention
,	O
retainAll	B-api_mention
,	O
size	B-api_mention
or	O
toArray	B-api_mention
,	O
you	O
'	O
d	O
have	O
to	O
traverse	O
the	O
elements	O
anyway	O
.	O
If	O
you	O
'	O
re	O
occasionally	O
only	O
calling	O
methods	O
such	O
as	O
isEmpty	B-api_mention
or	O
clear	O
I	O
suppose	O
you	O
'	O
d	O
be	O
better	O
of	O
by	O
creating	O
the	O
collection	O
lazily	O
.	O
You	O
could	O
for	O
instance	O
have	O
a	O
backing	O
ArrayList	B-api_mention
for	O
storing	O
previously	O
iterated	O
elements	O
.	O
I	O
don	O
'	O
t	O
know	O
of	O
any	O
such	O
class	O
in	O
any	O
library	O
,	O
but	O
it	O
should	O
be	O
a	O
fairly	O
simple	O
exercise	O
to	O
write	O
up	O
.	O
Question	O
-	O
7348711	O
,	O
answer	O
-	O
20793241	O
Environment	O
variables	O
may	O
also	O
provide	O
a	O
useful	O
means	O
-	O
-	O
COMPUTERNAME	O
on	O
Windows	O
,	O
HOSTNAME	O
on	O
most	O
modern	O
Unix	O
/	O
Linux	O
shells	O
.	O
See	O
:	O
#	O
a	O
I	O
'	O
m	O
using	O
these	O
as	O
"	O
supplementary	O
"	O
methods	O
to	O
InetAddress	B-api_mention
.	I-api_mention
getLocalHost	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getHostName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
since	O
as	O
several	O
people	O
point	O
out	O
,	O
that	O
function	O
doesn	O
'	O
t	O
work	O
in	O
all	O
environments	O
.	O
Runtime	B-api_mention
.	I-api_mention
getRuntime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
exec	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
another	O
possible	O
supplement	O
.	O
At	O
this	O
stage	O
,	O
I	O
haven	O
'	O
t	O
used	O
it	O
.	O
#	O
pre	O
Question	O
-	O
22847105	O
,	O
answer	O
-	O
37354549	O
The	O
way	O
I	O
think	O
about	O
it	O
is	O
that	O
you	O
use	O
flatMap	B-api_mention
when	O
the	O
function	O
you	O
wanted	O
to	O
put	O
inside	O
of	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
returns	O
an	O
Observable	B-api_mention
.	O
In	O
which	O
case	O
you	O
might	O
still	O
try	O
to	O
use	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
but	O
it	O
would	O
be	O
unpractical	O
.	O
Let	O
me	O
try	O
to	O
explain	O
why	O
.	O
If	O
in	O
such	O
case	O
you	O
decided	O
to	O
stick	O
with	O
map	O
,	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
For	O
example	O
in	O
your	O
case	O
,	O
if	O
we	O
used	O
an	O
imaginary	O
RxGson	O
library	O
,	O
that	O
returned	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
from	O
it	O
'	O
s	O
toJson	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
(	O
instead	O
of	O
simply	O
returning	O
a	O
String	B-api_mention
)	O
it	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
At	O
this	O
point	O
it	O
would	O
be	O
pretty	O
tricky	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
such	O
an	O
observable	O
.	O
Inside	O
of	O
it	O
you	O
would	O
get	O
an	O
Observable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
to	O
which	O
you	O
would	O
again	O
need	O
to	O
subscribe	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
to	O
get	O
the	O
value	O
.	O
Which	O
is	O
not	O
practical	O
or	O
nice	O
to	O
look	O
at	O
.	O
So	O
to	O
make	O
it	O
useful	O
one	O
idea	O
is	O
to	O
"	O
flatten	O
"	O
this	O
observable	O
of	O
observables	O
(	O
you	O
might	O
start	O
to	O
see	O
where	O
the	O
name	O
_	O
flat	O
_	O
Map	O
comes	O
from	O
)	O
.	O
RxJava	O
provides	O
a	O
few	O
ways	O
to	O
flatten	O
observables	O
and	O
for	O
sake	O
of	O
simplicity	O
lets	O
assume	O
merge	O
is	O
what	O
we	O
want	O
.	O
Merge	O
basically	O
takes	O
a	O
bunch	O
of	O
observables	O
and	O
emits	O
whenever	O
any	O
of	O
them	O
emits	O
.	O
(	O
Lots	O
of	O
people	O
would	O
argue	O
switch	O
would	O
be	O
a	O
better	O
default	O
.	O
But	O
if	O
you	O
'	O
re	O
emitting	O
just	O
one	O
value	O
,	O
it	O
doesn	O
'	O
t	O
matter	O
anyway	O
.	O
)	O
So	O
amending	O
our	O
previous	O
snippet	O
we	O
would	O
get	O
:	O
#	O
pre	O
This	O
is	O
a	O
lot	O
more	O
useful	O
,	O
because	O
subscribing	O
to	O
that	O
(	O
or	O
mapping	O
,	O
or	O
filtering	O
,	O
or	O
.	O
.	O
.	O
)	O
you	O
just	O
get	O
the	O
String	B-api_mention
value	O
.	O
(	O
Also	O
,	O
mind	O
you	O
,	O
such	O
variant	O
of	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
exist	O
in	O
RxJava	B-api_mention
,	O
but	O
if	O
you	O
understand	O
the	O
idea	O
of	O
merge	O
then	O
I	O
hope	O
you	O
also	O
understand	O
how	O
that	O
would	O
work	O
.	O
)	O
So	O
basically	O
because	O
such	O
merge	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
should	O
probably	O
only	O
ever	O
be	O
useful	O
when	O
it	O
succeeds	O
a	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	O
returning	O
an	O
observable	O
and	O
so	O
you	O
don	O
'	O
t	O
have	O
to	O
type	O
this	O
over	O
and	O
over	O
again	O
,	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
was	O
created	O
as	O
a	O
shorthand	O
.	O
It	O
applies	O
the	O
mapping	O
function	O
just	O
as	O
a	O
normal	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
,	O
but	O
later	O
instead	O
of	O
emitting	O
the	O
returned	O
values	O
it	O
also	O
"	O
flattens	O
"	O
(	O
or	O
merges	O
)	O
them	O
.	O
That	O
'	O
s	O
the	O
general	O
use	O
case	O
.	O
It	O
is	O
most	O
useful	O
in	O
a	O
codebase	O
that	O
uses	O
Rx	O
allover	O
the	O
place	O
and	O
you	O
'	O
ve	O
got	O
many	O
methods	O
returning	O
observables	O
,	O
which	O
you	O
want	O
to	O
chain	O
with	O
other	O
methods	O
returning	O
observables	O
.	O
In	O
your	O
use	O
case	O
it	O
happens	O
to	O
be	O
useful	O
as	O
well	O
,	O
because	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
can	O
only	O
transform	O
one	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
into	O
another	O
value	O
emitted	O
in	O
onNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
But	O
it	O
cannot	O
transform	O
it	O
into	O
multiple	O
values	O
,	O
no	O
value	O
at	O
all	O
or	O
an	O
error	O
.	O
And	O
as	O
akarnokd	O
wrote	O
in	O
his	O
answer	O
(	O
and	O
mind	O
you	O
he	O
'	O
s	O
much	O
smarter	O
than	O
me	O
,	O
probably	O
in	O
general	O
,	O
but	O
at	O
least	O
when	O
it	O
comes	O
to	O
RxJava	O
)	O
you	O
shouldn	O
'	O
t	O
throw	O
exceptions	O
from	O
your	O
map	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
So	O
instead	O
you	O
can	O
use	O
flatMap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
return	O
Observable	B-api_mention
.	I-api_mention
just	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
all	O
goes	O
well	O
,	O
but	O
return	O
Observable	B-api_mention
.	I-api_mention
error	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
when	O
something	O
fails	O
.	O
See	O
his	O
answer	O
for	O
a	O
complete	O
snippet	O
:	O
#	O
a	O
Question	O
-	O
19416644	O
,	O
answer	O
-	O
19416665	O
One	O
simple	O
way	O
is	O
to	O
use	O
Float	B-api_mention
.	I-api_mention
NaN	I-api_mention
:	O
#	O
pre	O
#	O
pre	O
You	O
can	O
do	O
the	O
same	O
with	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
.	O
From	O
JLS	O
Â§	O
15	O
.	O
21	O
.	O
1	O
.	O
Numerical	O
Equality	O
Operators	O
=	O
=	O
and	O
!	O
=	O
:	O
#	O
blockquote	O
Question	O
-	O
22718744	O
,	O
answer	O
-	O
22718904	O
This	O
has	O
been	O
specified	O
in	O
the	O
documentation	O
of	O
split	B-api_mention
(	I-api_mention
String	I-api_mention
regex	I-api_mention
,	I-api_mention
limit	I-api_mention
)	I-api_mention
.	O
#	O
blockquote	O
In	O
StringLiteral	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
you	O
got	O
a	O
zero	O
-	O
width	O
match	O
at	O
the	O
beginning	O
so	O
the	O
leading	O
empty	O
substring	O
is	O
not	O
included	O
in	O
the	O
resulting	O
array	O
.	O
However	O
in	O
your	O
second	O
snippet	O
when	O
you	O
split	O
on	O
StringLiteral	O
you	O
got	O
a	O
positive	O
width	O
match	O
(	O
1	O
in	O
this	O
case	O
)	O
,	O
so	O
the	O
empty	O
leading	O
substring	O
is	O
included	O
as	O
expected	O
.	O
(	O
Removed	O
irrelevant	O
source	O
code	O
)	O
Question	O
-	O
5175728	O
,	O
answer	O
-	O
5175900	O
It	O
depends	O
on	O
what	O
form	O
of	O
date	O
/	O
time	O
you	O
want	O
:	O
#	O
li	O
If	O
you	O
want	O
the	O
date	O
/	O
time	O
as	O
a	O
single	O
numeric	O
value	O
,	O
then	O
System	B-api_mention
.	I-api_mention
currentTimeMillis	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
that	O
,	O
expressed	O
as	O
the	O
number	O
of	O
milliseconds	O
after	O
the	O
UNIX	O
epoch	O
(	O
as	O
a	O
Java	O
long	O
)	O
.	O
This	O
value	O
is	O
a	O
delta	O
from	O
a	O
UTC	O
time	O
-	O
point	O
,	O
and	O
is	O
independent	O
of	O
the	O
local	O
time	O
-	O
zone	O
.	O
.	O
.	O
assuming	O
that	O
the	O
system	O
clock	O
has	O
been	O
set	O
correctly	O
.	O
#	O
li	O
If	O
you	O
want	O
the	O
date	O
/	O
time	O
in	O
a	O
form	O
that	O
allows	O
you	O
to	O
access	O
the	O
components	O
(	O
year	O
,	O
month	O
,	O
etc	O
)	O
numerically	O
,	O
you	O
could	O
use	O
one	O
of	O
the	O
following	O
:	O
#	O
li	O
new	O
Date	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
a	O
Date	B-api_mention
object	O
initialized	O
with	O
the	O
current	O
date	O
/	O
time	O
.	O
The	O
problem	O
is	O
that	O
the	O
Date	B-api_mention
API	O
methods	O
are	O
mostly	O
flawed	O
.	O
.	O
.	O
and	O
deprecated	O
.	O
#	O
li	O
Calendar	B-api_mention
.	I-api_mention
getInstance	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
a	O
Calendar	B-api_mention
object	O
initialized	O
with	O
the	O
current	O
date	O
/	O
time	O
,	O
using	O
the	O
default	O
Locale	B-api_mention
and	O
TimeZone	B-api_mention
.	O
Other	O
overloads	O
allow	O
you	O
to	O
use	O
a	O
specific	O
Locale	B-api_mention
and	O
/	O
or	O
TimeZone	B-api_mention
.	O
Calendar	B-api_mention
works	O
.	O
.	O
.	O
but	O
the	O
APIs	O
are	O
still	O
cumbersome	O
.	O
#	O
li	O
new	O
org	B-api_mention
.	I-api_mention
joda	I-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
DateTime	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
gives	O
you	O
a	O
Joda	O
-	O
time	O
object	O
initialized	O
with	O
the	O
current	O
date	O
/	O
time	O
,	O
using	O
the	O
default	O
time	O
zone	O
and	O
chronology	O
.	O
There	O
are	O
lots	O
of	O
other	O
Joda	O
alternatives	O
.	O
.	O
.	O
too	O
many	O
to	O
describe	O
here	O
.	O
#	O
li	O
in	O
Java	O
8	O
,	O
calling	O
LocalDateTime	B-api_mention
.	I-api_mention
now	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
ZonedDateTime	B-api_mention
.	I-api_mention
now	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
give	O
you	O
representations	O
for	O
the	O
current	O
date	O
/	O
time	O
.	O
Prior	O
to	O
Java	O
8	O
,	O
most	O
people	O
who	O
know	O
about	O
these	O
things	O
recommended	O
Joda	O
-	O
time	O
as	O
having	O
(	O
by	O
far	O
)	O
the	O
best	O
Java	O
APIs	O
for	O
doing	O
things	O
involving	O
time	O
point	O
and	O
duration	O
calculations	O
.	O
With	O
Java	O
8	O
,	O
this	O
is	O
no	O
longer	O
true	O
.	O
However	O
,	O
if	O
you	O
are	O
already	O
using	O
Joda	O
time	O
in	O
your	O
codebase	O
,	O
there	O
is	O
no	O
strong	O
reason	O
to	O
migrate	O
.	O
Question	O
-	O
28584669	O
Why	O
doesn	O
'	O
t	O
infinity	O
comparison	O
follow	O
the	O
logic	O
applied	O
to	O
NaNs	O
?	O
This	O
code	O
prints	O
out	O
false	O
three	O
times	O
:	O
#	O
pre	O
However	O
,	O
if	O
I	O
change	O
Double	B-api_mention
.	I-api_mention
NaN	I-api_mention
to	O
Double	B-api_mention
.	I-api_mention
POSITIVE	I-api_mention
_	I-api_mention
INFINITY	I-api_mention
,	O
I	O
get	O
true	O
for	O
equality	O
,	O
but	O
false	O
for	O
the	O
greater	O
-	O
than	O
and	O
less	O
-	O
than	O
comparisons	O
:	O
#	O
pre	O
This	O
seems	O
dangerous	O
.	O
Assuming	O
that	O
infinite	O
values	O
result	O
from	O
overflows	O
,	O
I	O
imagine	O
it	O
'	O
s	O
more	O
likely	O
that	O
two	O
variables	O
that	O
ended	O
up	O
as	O
infinities	O
wouldn	O
'	O
t	O
actually	O
be	O
equal	O
in	O
perfect	O
arithmetic	O
.	O
Question	O
-	O
20945049	O
,	O
answer	O
-	O
20959594	O
String	B-api_mention
is	O
immutable	O
,	O
but	O
through	O
reflection	O
you	O
'	O
re	O
allowed	O
to	O
change	O
the	O
String	B-api_mention
class	O
.	O
You	O
'	O
ve	O
just	O
redefined	O
the	O
String	B-api_mention
class	O
as	O
mutable	O
in	O
real	O
-	O
time	O
.	O
You	O
could	O
redefine	O
methods	O
to	O
be	O
public	O
or	O
private	O
or	O
static	O
if	O
you	O
wanted	O
.	O
Question	O
-	O
31696485	O
When	O
using	O
the	O
Java	O
8	O
Optional	B-api_mention
class	O
,	O
there	O
are	O
two	O
ways	O
in	O
which	O
a	O
value	O
can	O
be	O
wrapped	O
in	O
an	O
optional	O
.	O
#	O
pre	O
I	O
understand	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
is	O
the	O
only	O
safe	O
way	O
of	O
using	O
Optional	B-api_mention
,	O
but	O
why	O
does	O
Optional	B-api_mention
.	I-api_mention
of	I-api_mention
exist	O
at	O
all	O
?	O
Why	O
not	O
just	O
use	O
Optional	B-api_mention
.	I-api_mention
ofNullable	I-api_mention
and	O
be	O
on	O
the	O
safe	O
side	O
at	O
all	O
times	O
?	O
Question	O
-	O
16148575	O
,	O
answer	O
-	O
18481387	O
If	O
you	O
code	O
in	O
Android	O
,	O
there	O
is	O
SparseArray	B-api_mention
,	O
mapping	O
integer	O
to	O
object	O
.	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31760309	O
Until	O
the	O
language	O
specification	O
mentions	O
it	O
,	O
it	O
is	O
not	O
guaranteed	O
that	O
autoboxing	O
is	O
equivalent	O
to	O
a	O
call	O
to	O
the	O
static	O
valueOf	B-api_mention
methods	O
.	O
It	O
is	O
an	O
implementation	O
aspect	O
,	O
not	O
part	O
of	O
the	O
boxing	O
conversion	O
specification	O
.	O
An	O
implementation	O
is	O
theoretically	O
free	O
to	O
use	O
another	O
mechanism	O
as	O
long	O
as	O
it	O
conforms	O
to	O
the	O
rule	O
you	O
mentioned	O
from	O
the	O
JLS	O
.	O
In	O
practice	O
,	O
there	O
are	O
many	O
Sun	O
JDK	O
bug	O
reports	O
(	O
e	O
.	O
g	O
.	O
JDK	O
-	O
4990346	O
and	O
JDK	O
-	O
6628737	O
)	O
that	O
clearly	O
imply	O
that	O
when	O
autoboxing	O
was	O
introduced	O
in	O
Java	O
5	O
,	O
the	O
intention	O
was	O
having	O
the	O
compiler	O
to	O
rely	O
on	O
valueOf	B-api_mention
as	O
stated	O
in	O
JDK	O
-	O
6628737	O
:	O
#	O
blockquote	O
But	O
that	O
'	O
s	O
only	O
for	O
javac	O
,	O
not	O
necessarily	O
all	O
compilers	O
.	O
Question	O
-	O
5839359	O
,	O
answer	O
-	O
5839392	O
You	O
'	O
re	O
essentially	O
running	O
out	O
of	O
memory	O
to	O
run	O
the	O
process	O
smoothly	O
.	O
Options	O
that	O
come	O
to	O
mind	O
:	O
#	O
li	O
Specify	O
more	O
memory	O
like	O
you	O
mentioned	O
,	O
try	O
something	O
in	O
between	O
like	O
-	O
Xmx512m	O
first	O
#	O
li	O
Work	O
with	O
smaller	O
batches	O
of	O
HashMap	B-api_mention
objects	O
to	O
process	O
at	O
once	O
if	O
possible	O
#	O
li	O
If	O
you	O
have	O
a	O
lot	O
of	O
duplicate	O
strings	O
,	O
use	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
on	O
them	O
before	O
putting	O
them	O
into	O
the	O
HashMap	B-api_mention
#	O
li	O
Use	O
the	O
HashMap	B-api_mention
(	O
int	O
initialCapacity	O
,	O
float	O
loadFactor	O
)	O
constructor	O
to	O
tune	O
for	O
your	O
case	O
Question	O
-	O
31445024	O
,	O
answer	O
-	O
31445150	O
I	O
first	O
tought	O
your	O
question	O
was	O
a	O
dupe	O
of	O
What	O
code	O
does	O
the	O
compiler	O
generate	O
for	O
autoboxing	O
?	O
However	O
,	O
after	O
your	O
comment	O
on	O
@	O
ElliottFrisch	O
I	O
realized	O
it	O
was	O
different	O
:	O
#	O
blockquote	O
For	O
other	O
readers	O
,	O
assume	O
that	O
"	O
behaves	O
that	O
way	O
"	O
means	O
using	O
valueOf	B-api_mention
.	O
Remember	O
that	O
there	O
are	O
multiples	O
compilers	O
for	O
Java	O
.	O
To	O
be	O
"	O
legal	O
"	O
they	O
must	O
follow	O
the	O
contract	O
given	O
in	O
the	O
JLS	O
.	O
Therefore	O
,	O
as	O
long	O
as	O
all	O
the	O
rules	O
here	O
are	O
respected	O
,	O
there	O
is	O
no	O
guarantee	O
of	O
how	O
autoboxing	O
is	O
internally	O
implemented	O
.	O
But	O
I	O
don	O
'	O
t	O
see	O
any	O
reason	O
to	O
not	O
use	O
valueOf	B-api_mention
,	O
specially	O
that	O
it	O
uses	O
the	O
cached	O
values	O
and	O
is	O
the	O
recommended	O
way	O
as	O
per	O
this	O
article	O
by	O
Joseph	O
D	O
.	O
Darcy	O
.	O
Question	O
-	O
33147339	O
,	O
answer	O
-	O
33147762	O
I	O
found	O
this	O
explanation	O
:	O
#	O
blockquote	O
In	O
Java	O
6	O
,	O
if	O
you	O
use	O
the	O
API	O
as	O
:	O
#	O
pre	O
And	O
newCount	O
overflows	O
(	O
this	O
becomes	O
negative	O
)	O
,	O
if	O
(	O
args	O
)	O
will	O
return	O
false	O
and	O
you	O
may	O
mistakenly	O
assume	O
that	O
the	O
ArrayList	B-api_mention
was	O
increased	O
by	O
len	B-api_mention
.	O
Question	O
-	O
27430092	O
,	O
answer	O
-	O
27430172	O
A	O
possible	O
use	O
case	O
is	O
in	O
testing	O
primality	O
of	O
a	O
given	O
number	O
(	O
at	O
test	O
which	O
in	O
itself	O
has	O
many	O
uses	O
)	O
.	O
The	O
isProbablePrime	B-api_mention
algorithm	O
will	O
run	O
much	O
faster	O
than	O
an	O
exact	O
algorithm	O
,	O
so	O
if	O
the	O
number	O
fails	O
isProbablePrime	B-api_mention
,	O
then	O
one	O
need	O
not	O
go	O
to	O
the	O
expense	O
of	O
running	O
the	O
more	O
expensive	O
algorithm	O
.	O
Question	O
-	O
21242110	O
What	O
is	O
the	O
best	O
way	O
to	O
convert	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
object	O
to	O
the	O
new	O
JDK	O
8	O
/	O
JSR	O
-	O
310	O
java	B-api_mention
.	I-api_mention
time	I-api_mention
.	I-api_mention
LocalDate	I-api_mention
?	O
#	O
pre	O
Question	O
-	O
11408427	O
,	O
answer	O
-	O
11408477	O
The	O
+	O
operator	O
is	O
usually	O
replaced	O
by	O
a	O
StringBuilder	B-api_mention
at	O
compile	O
time	O
.	O
Check	O
this	O
answer	O
for	O
more	O
details	O
on	O
that	O
matter	O
.	O
Question	O
-	O
5769669	O
,	O
answer	O
-	O
5769679	O
You	O
can	O
use	O
Double	B-api_mention
.	I-api_mention
parseDouble	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
convert	O
a	O
String	B-api_mention
to	O
a	O
double	O
:	O
#	O
pre	O
For	O
your	O
case	O
it	O
looks	O
like	O
you	O
want	O
:	O
#	O
pre	O
Question	O
-	O
23218874	O
,	O
answer	O
-	O
23232560	O
For	O
simple	O
cases	O
such	O
as	O
the	O
one	O
illustrated	O
,	O
they	O
are	O
mostly	O
the	O
same	O
.	O
However	O
,	O
there	O
are	O
a	O
number	O
of	O
subtle	O
differences	O
that	O
might	O
be	O
significant	O
.	O
One	O
issue	O
is	O
with	O
ordering	O
.	O
With	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
,	O
the	O
order	O
is	O
undefined	O
.	O
It	O
'	O
s	O
unlikely	O
to	O
occur	O
with	O
sequential	O
streams	O
,	O
still	O
,	O
it	O
'	O
s	O
within	O
the	O
specification	O
for	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
to	O
execute	O
in	O
some	O
arbitrary	O
order	O
.	O
This	O
does	O
occur	O
frequently	O
in	O
parallel	O
streams	O
.	O
By	O
contrast	O
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
always	O
executed	O
in	O
the	O
iteration	O
order	O
of	O
the	O
Iterable	B-api_mention
,	O
if	O
one	O
is	O
specified	O
.	O
Another	O
issue	O
is	O
with	O
side	O
effects	O
.	O
The	O
action	O
specified	O
in	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
required	O
to	O
be	O
non	O
-	O
interfering	O
.	O
(	O
See	O
the	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
stream	I-api_mention
package	O
doc	O
.	O
)	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
potentially	O
has	O
fewer	O
restrictions	O
.	O
For	O
the	O
collections	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
will	O
generally	O
use	O
that	O
collection	O
'	O
s	O
Iterator	B-api_mention
,	O
most	O
of	O
which	O
are	O
designed	O
to	O
be	O
fail	O
-	O
fast	O
and	O
which	O
will	O
throw	O
ConcurrentModificationException	B-api_mention
if	O
the	O
collection	O
is	O
structurally	O
modified	O
during	O
the	O
iteration	O
.	O
However	O
,	O
modifications	O
that	O
aren	O
'	O
t	O
structural	O
are	O
allowed	O
during	O
iteration	O
.	O
For	O
example	O
,	O
the	O
ArrayList	B-api_mention
class	O
documentation	O
says	O
"	O
merely	O
setting	O
the	O
value	O
of	O
an	O
element	O
is	O
not	O
a	O
structural	O
modification	O
.	O
"	O
Thus	O
,	O
the	O
action	O
for	O
ArrayList	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
allowed	O
to	O
set	O
values	O
in	O
the	O
underlying	O
ArrayList	B-api_mention
without	O
problems	O
.	O
The	O
concurrent	O
collections	O
are	O
yet	O
again	O
different	O
.	O
Instead	O
of	O
fail	O
-	O
fast	O
,	O
they	O
are	O
designed	O
to	O
be	O
weakly	O
consistent	O
.	O
The	O
full	O
definition	O
is	O
at	O
that	O
link	O
.	O
Briefly	O
,	O
though	O
,	O
consider	O
ConcurrentLinkedDeque	B-api_mention
.	O
The	O
action	O
passed	O
to	O
its	O
forEach	B-api_mention
method	O
is	O
allowed	O
to	O
modify	O
the	O
underlying	O
deque	O
,	O
even	O
structurally	O
,	O
and	O
ConcurrentModificationException	B-api_mention
is	O
never	O
thrown	O
.	O
However	O
,	O
the	O
modification	O
that	O
occurs	O
might	O
or	O
might	O
not	O
be	O
visible	O
in	O
this	O
iteration	O
.	O
(	O
Hence	O
the	O
"	O
weak	O
"	O
consistency	O
.	O
)	O
Still	O
another	O
difference	O
is	O
visible	O
if	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
is	O
iterating	O
over	O
a	O
synchronized	O
collection	O
.	O
On	O
such	O
a	O
collection	O
,	O
Iterable	B-api_mention
.	I-api_mention
forEach	I-api_mention
takes	O
the	O
collection	O
'	O
s	O
lock	O
once	O
and	O
holds	O
it	O
across	O
all	O
the	O
calls	O
to	O
the	O
action	O
method	O
.	O
The	O
Stream	B-api_mention
.	I-api_mention
forEach	I-api_mention
call	O
uses	O
the	O
collection	O
'	O
s	O
spliterator	O
,	O
which	O
does	O
not	O
lock	O
,	O
and	O
which	O
relies	O
on	O
the	O
prevailing	O
rule	O
of	O
non	O
-	O
interference	O
.	O
The	O
collection	O
backing	O
the	O
stream	O
could	O
be	O
modified	O
during	O
iteration	O
,	O
and	O
if	O
it	O
is	O
,	O
a	O
ConcurrentModificationException	B-api_mention
or	O
inconsistent	O
behavior	O
could	O
result	O
.	O
Question	O
-	O
22382453	O
,	O
answer	O
-	O
22384113	O
Made	O
up	O
example	O
Imagine	O
that	O
you	O
want	O
to	O
create	O
the	O
following	O
sequence	O
:	O
1	O
,	O
2	O
,	O
2	O
,	O
3	O
,	O
3	O
,	O
3	O
,	O
4	O
,	O
4	O
,	O
4	O
,	O
4	O
etc	O
.	O
(	O
in	O
other	O
words	O
:	O
1x1	O
,	O
2x2	O
,	O
3x3	O
etc	O
.	O
)	O
With	O
flatMap	B-api_mention
it	O
could	O
look	O
like	O
:	O
#	O
pre	O
where	O
:	O
#	O
li	O
IntStream	B-api_mention
.	I-api_mention
rangeClosed	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
stream	O
of	O
int	O
from	O
1	O
to	O
4	O
,	O
inclusive	O
#	O
li	O
IntStream	B-api_mention
.	I-api_mention
iterate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
limit	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
creates	O
a	O
stream	O
of	O
length	O
i	O
of	O
int	O
i	O
-	O
so	O
applied	O
to	O
i	O
=	O
4	O
it	O
creates	O
a	O
stream	O
:	O
4	O
,	O
4	O
,	O
4	O
,	O
4	O
#	O
li	O
flatMap	B-api_mention
"	O
flattens	O
"	O
the	O
stream	O
and	O
"	O
concatenates	O
"	O
it	O
to	O
the	O
original	O
stream	O
With	O
Java	O
<	O
8	O
you	O
would	O
need	O
two	O
nested	O
loops	O
:	O
#	O
pre	O
Real	O
world	O
example	O
Let	O
'	O
s	O
say	O
I	O
have	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
where	O
each	O
TimeSeries	B-api_mention
is	O
essentially	O
a	O
Map	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
.	O
I	O
want	O
to	O
get	O
a	O
list	O
of	O
all	O
dates	O
for	O
which	O
at	O
least	O
one	O
of	O
the	O
time	O
series	O
has	O
a	O
value	O
.	O
flatMap	B-api_mention
to	O
the	O
rescue	O
:	O
list	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
parallel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
flatMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
for	O
each	O
TS	O
,	O
stream	O
dates	O
and	O
flatmap	O
.	B-api_mention
distinct	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
remove	O
duplicates	O
.	B-api_mention
sorted	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
sort	O
ascending	O
.	B-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Not	O
only	O
is	O
it	O
readable	O
,	O
but	O
if	O
you	O
suddenly	O
need	O
to	O
process	O
100k	O
elements	O
,	O
simply	O
adding	O
parallel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
improve	O
performance	O
without	O
you	O
writing	O
any	O
concurrent	O
code	O
.	O
Question	O
-	O
26375932	O
,	O
answer	O
-	O
26407637	O
It	O
is	O
an	O
integer	O
overflow	O
.	O
The	O
int	O
data	O
type	O
is	O
4	O
bytes	O
,	O
or	O
32	O
bits	O
.	O
Therefore	O
,	O
numbers	O
larger	O
than	O
2	O
^	O
(	O
32	O
-	O
1	O
)	O
-	O
1	O
(	O
2	O
,	O
147	O
,	O
483	O
,	O
647	O
)	O
cannot	O
be	O
stored	O
in	O
this	O
data	O
type	O
.	O
Your	O
numerical	O
values	O
will	O
be	O
incorrect	O
.	O
For	O
very	O
large	O
numbers	O
,	O
you	O
will	O
want	O
to	O
import	O
and	O
use	O
the	O
class	O
java	B-api_mention
.	I-api_mention
math	I-api_mention
.	I-api_mention
BigInteger	I-api_mention
:	O
#	O
pre	O
NOTE	O
:	O
For	O
numerical	O
values	O
that	O
are	O
still	O
too	O
large	O
for	O
the	O
int	O
data	O
type	O
,	O
but	O
small	O
enough	O
to	O
fit	O
within	O
8	O
bytes	O
(	O
absolute	O
value	O
less	O
than	O
or	O
equal	O
to	O
2	O
^	O
(	O
64	O
-	O
1	O
)	O
-	O
1	O
)	O
,	O
you	O
should	O
probably	O
use	O
the	O
long	O
primitive	O
.	O
HackerRank	O
'	O
s	O
practice	O
problems	O
(	O
www	O
.	O
hackerrank	O
.	O
com	O
)	O
,	O
such	O
as	O
the	O
Algorithms	O
practice	O
section	O
,	O
(	O
#	O
a	O
)	O
include	O
some	O
very	O
good	O
large	O
-	O
number	O
questions	O
that	O
give	O
good	O
practice	O
about	O
how	O
to	O
think	O
about	O
the	O
appropriate	O
data	O
type	O
to	O
use	O
.	O
Question	O
-	O
12539365	O
,	O
answer	O
-	O
12562433	O
This	O
is	O
great	O
question	O
!	O
I	O
think	O
the	O
root	O
cause	O
of	O
it	O
is	O
the	O
following	O
,	O
we	O
are	O
using	O
JUnit	O
not	O
only	O
for	O
unit	O
testing	O
.	O
So	O
the	O
question	O
should	O
be	O
splited	O
up	O
:	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
black	O
-	O
box	O
unit	O
-	O
testing	O
?	O
#	O
li	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
white	O
-	O
box	O
unit	O
-	O
testing	O
?	O
so	O
if	O
we	O
will	O
ignore	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
,	O
the	O
question	O
can	O
be	O
rephrased	O
"	O
Using	O
white	O
-	O
box	O
unit	O
-	O
testing	O
with	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
creates	O
great	O
couple	O
between	O
unit	O
test	O
and	O
my	O
could	O
implementation	O
,	O
can	O
I	O
make	O
some	O
"	O
grey	O
-	O
box	O
"	O
unit	O
-	O
testing	O
and	O
what	O
rules	O
of	O
thumb	O
I	O
should	O
use	O
for	O
this	O
"	O
.	O
Now	O
,	O
let	O
'	O
s	O
go	O
through	O
all	O
of	O
this	O
step	O
-	O
by	O
-	O
step	O
.	O
*	O
-	O
Should	O
I	O
use	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
in	O
my	O
integration	O
(	O
or	O
any	O
other	O
higher	O
-	O
than	O
-	O
unit	O
testing	O
)	O
testing	O
?	O
*	O
I	O
think	O
the	O
answer	O
is	O
clearly	O
no	O
,	O
moreover	O
you	O
shouldn	O
'	O
t	O
use	O
mocks	O
for	O
this	O
.	O
Your	O
test	O
should	O
be	O
as	O
close	O
to	O
real	O
application	O
as	O
possible	O
.	O
You	O
are	O
testing	O
complete	O
use	O
case	O
,	O
not	O
isolated	O
part	O
of	O
the	O
application	O
.	O
*	O
black	O
-	O
box	O
vs	O
white	O
-	O
box	O
unit	O
-	O
testing	O
black	O
-	O
box	O
state	O
If	O
you	O
are	O
using	O
white	O
-	O
box	O
approach	O
what	O
is	O
you	O
really	O
doing	O
,	O
you	O
'	O
re	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
.	O
In	O
this	O
approach	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
should	O
verify	O
that	O
your	O
unit	O
behaves	O
as	O
you	O
'	O
re	O
expecting	O
to	O
.	O
rules	O
of	O
thumbs	O
for	O
grey	O
-	O
box	O
-	O
testing	O
The	O
problem	O
with	O
white	O
-	O
box	O
testing	O
is	O
it	O
creates	O
a	O
high	O
coupling	O
.	O
One	O
possible	O
solution	O
is	O
to	O
do	O
grey	O
-	O
box	O
-	O
testing	O
,	O
not	O
white	O
-	O
box	O
-	O
testing	O
.	O
This	O
is	O
sort	O
of	O
combination	O
of	O
black	O
&	O
white	O
box	O
testing	O
.	O
You	O
are	O
really	O
testing	O
the	O
behaviour	O
of	O
your	O
unit	O
like	O
in	O
white	O
-	O
box	O
testing	O
,	O
but	O
in	O
general	O
you	O
make	O
it	O
implementation	O
-	O
agnostic	O
when	O
possible	O
.	O
When	O
it	O
is	O
possible	O
,	O
you	O
will	O
just	O
make	O
a	O
check	O
like	O
in	O
black	O
-	O
box	O
case	O
,	O
just	O
asserts	O
that	O
output	O
is	O
what	O
is	O
your	O
expected	O
to	O
be	O
.	O
So	O
,	O
the	O
essence	O
of	O
your	O
question	O
is	O
when	O
it	O
is	O
possible	O
.	O
This	O
is	O
really	O
hard	O
.	O
I	O
don	O
'	O
t	O
have	O
a	O
good	O
example	O
,	O
but	O
I	O
can	O
give	O
you	O
to	O
examples	O
.	O
In	O
the	O
case	O
that	O
was	O
mentioned	O
above	O
with	O
equals	B-api_mention
(	I-api_mention
)	I-api_mention
vs	O
equalsIgnoreCase	B-api_mention
(	I-api_mention
)	I-api_mention
you	O
shouldn	O
'	O
t	O
call	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
,	O
just	O
assert	O
the	O
output	O
.	O
If	O
you	O
couldn	O
'	O
t	O
do	O
it	O
,	O
break	O
down	O
your	O
code	O
to	O
the	O
smaller	O
unit	O
,	O
until	O
you	O
can	O
do	O
it	O
.	O
On	O
the	O
other	O
hand	O
,	O
suppose	O
you	O
have	O
some	O
@	O
Service	O
and	O
you	O
are	O
writting	O
@	O
Web	O
-	O
Service	O
that	O
is	O
essentially	O
wrapper	O
upon	O
your	O
@	O
Service	O
-	O
it	O
delegates	O
all	O
calls	O
to	O
the	O
@	O
Service	O
(	O
and	O
making	O
some	O
extra	O
error	O
handling	O
)	O
.	O
In	O
this	O
case	O
calling	O
to	O
Mockito	B-api_mention
.	I-api_mention
verify	I-api_mention
(	I-api_mention
)	I-api_mention
is	O
essential	O
,	O
you	O
shouldn	O
'	O
t	O
duplicate	O
all	O
of	O
your	O
checks	O
that	O
you	O
did	O
for	O
the	O
@	O
Serive	O
,	O
verifying	O
that	O
you	O
'	O
re	O
calling	O
to	O
@	O
Service	O
with	O
correct	O
parammeter	O
list	O
is	O
sufficient	O
.	O
Question	O
-	O
29922296	O
,	O
answer	O
-	O
29926133	O
I	O
'	O
d	O
go	O
for	O
EnumSet	B-api_mention
.	O
Because	O
forEach	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
also	O
defined	O
on	O
Iterable	B-api_mention
,	O
you	O
can	O
avoid	O
creating	O
the	O
stream	O
altogether	O
:	O
EnumSet	B-api_mention
.	I-api_mention
allOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Or	O
with	O
a	O
method	O
reference	O
:	O
EnumSet	B-api_mention
.	I-api_mention
allOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Still	O
,	O
the	O
oldschool	O
for	O
-	O
loop	O
feels	O
a	O
bit	O
simpler	O
:	O
#	O
pre	O
Question	O
-	O
30081520	O
,	O
answer	O
-	O
30081600	O
From	O
Objects	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
)	I-api_mention
:	O
return	O
(	O
args	O
)	O
|	O
|	O
(	O
a	O
!	O
=	O
null	O
&	O
&	O
a	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
)	O
;	O
Very	O
simple	O
,	O
self	O
-	O
explaining	O
and	O
elegant	O
.	O
Question	O
-	O
27747562	O
,	O
answer	O
-	O
27747702	O
A	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
could	O
very	O
well	O
be	O
an	O
Item	B-api_mention
.	O
See	O
for	O
example	O
:	O
#	O
pre	O
A	O
cast	O
tells	O
the	O
compiler	O
:	O
"	O
I	O
know	O
you	O
can	O
'	O
t	O
be	O
sure	O
that	O
this	O
is	O
a	O
object	O
of	O
type	O
Item	O
,	O
but	O
I	O
know	O
better	O
than	O
you	O
,	O
so	O
please	O
compile	O
"	O
.	O
The	O
compiler	O
will	O
only	O
refuse	O
to	O
compile	O
that	O
if	O
it	O
'	O
s	O
impossible	O
for	O
the	O
returned	O
object	O
to	O
be	O
an	O
instance	O
of	O
Item	B-api_mention
(	O
like	O
,	O
for	O
example	O
,	O
Integer	B-api_mention
can	O
'	O
t	O
ever	O
be	O
a	O
String	B-api_mention
)	O
At	O
runtime	O
,	O
the	O
type	O
of	O
the	O
actual	O
object	O
returned	O
by	O
the	O
method	O
will	O
be	O
checked	O
,	O
and	O
if	O
it	O
'	O
s	O
not	O
actually	O
an	O
object	O
of	O
type	O
Item	O
,	O
you	O
'	O
ll	O
get	O
a	O
ClassCastException	B-api_mention
.	O
Question	O
-	O
32623834	O
,	O
answer	O
-	O
32652449	O
Another	O
related	O
point	O
:	O
you	O
can	O
make	O
use	O
of	O
the	O
constant	O
pool	O
to	O
improve	O
the	O
performance	O
of	O
string	O
comparisons	O
in	O
some	O
circumstances	O
,	O
by	O
using	O
the	O
String	B-api_mention
.	I-api_mention
intern	I-api_mention
(	I-api_mention
)	I-api_mention
method	O
.	O
That	O
method	O
returns	O
the	O
instance	O
of	O
String	B-api_mention
with	O
the	O
same	O
contents	O
as	O
the	O
String	B-api_mention
on	O
which	O
it	O
is	O
invoked	O
from	O
the	O
String	B-api_mention
constants	O
pool	O
,	O
adding	O
it	O
it	O
if	O
is	O
not	O
yet	O
present	O
.	O
In	O
other	O
words	O
,	O
after	O
using	O
intern	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
all	O
Strings	O
with	O
the	O
same	O
contents	O
are	O
guaranteed	O
to	O
be	O
the	O
same	O
String	B-api_mention
instance	O
as	O
each	O
other	O
and	O
as	O
any	O
String	B-api_mention
constants	O
with	O
those	O
contents	O
,	O
meaning	O
you	O
can	O
then	O
use	O
the	O
equals	O
operator	O
(	O
=	O
=	O
)	O
on	O
them	O
.	O
This	O
is	O
just	O
an	O
example	O
which	O
is	O
not	O
very	O
useful	O
on	O
its	O
own	O
,	O
but	O
it	O
illustrates	O
the	O
point	O
:	O
#	O
pre	O
This	O
little	O
trick	O
isn	O
'	O
t	O
worth	O
designing	O
your	O
code	O
around	O
,	O
but	O
it	O
is	O
worth	O
keeping	O
in	O
mind	O
for	O
the	O
day	O
when	O
you	O
notice	O
a	O
little	O
more	O
speed	O
could	O
be	O
eked	O
out	O
of	O
some	O
bit	O
of	O
performance	O
sensitive	O
code	O
by	O
using	O
the	O
=	O
=	O
operator	O
on	O
a	O
string	O
with	O
judicious	O
use	O
of	O
intern	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
Question	O
-	O
13950338	O
,	O
answer	O
-	O
17066803	O
Grant	O
Vibration	O
Permission	O
Before	O
you	O
start	O
implementing	O
any	O
vibration	O
code	O
,	O
you	O
have	O
to	O
give	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
:	O
<	O
uses	O
-	O
permission	O
android	O
:	O
name	O
=	O
StringLiteral	O
/	O
>	O
Make	O
sure	O
to	O
include	O
this	O
line	O
in	O
your	O
AndroidManifest	O
.	O
xml	O
file	O
.	O
Import	O
the	O
Vibration	O
Library	O
Most	O
IDEs	O
will	O
do	O
this	O
for	O
you	O
,	O
but	O
here	O
is	O
the	O
import	O
statement	O
if	O
yours	O
doesn	O
'	O
t	O
:	O
import	O
android	B-api_mention
.	I-api_mention
os	I-api_mention
.	I-api_mention
Vibrator	I-api_mention
;	O
Make	O
sure	O
this	O
in	O
the	O
activity	O
where	O
you	O
want	O
the	O
vibration	O
to	O
occur	O
.	O
How	O
to	O
Vibrate	B-api_mention
for	O
a	O
Given	O
Time	O
In	O
most	O
circumstances	O
,	O
you	O
'	O
ll	O
be	O
wanting	O
to	O
vibrate	O
the	O
device	O
for	O
a	O
short	O
,	O
predetermined	O
amount	O
of	O
time	O
.	O
You	O
can	O
achieve	O
this	O
by	O
using	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
is	O
a	O
quick	O
example	O
:	O
#	O
pre	O
That	O
'	O
s	O
it	O
,	O
simple	O
!	O
How	O
to	O
Vibrate	O
Indefinitely	O
It	O
may	O
be	O
the	O
case	O
that	O
you	O
want	O
the	O
device	O
to	O
continue	O
vibrating	O
indefinitely	O
.	O
For	O
this	O
,	O
we	O
use	O
the	O
vibrate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
#	O
pre	O
When	O
you	O
'	O
re	O
ready	O
to	O
stop	O
the	O
vibration	O
,	O
just	O
call	O
the	O
cancel	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
:	O
v	O
.	B-api_mention
cancel	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
How	O
to	O
use	O
Vibration	O
Patterns	O
If	O
you	O
want	O
a	O
more	O
bespoke	O
vibration	O
,	O
you	O
can	O
attempt	O
to	O
create	O
your	O
own	O
vibration	O
patterns	O
:	O
#	O
pre	O
More	O
Complex	O
Vibrations	O
There	O
are	O
multiple	O
SDKs	O
that	O
offer	O
a	O
more	O
comprehensive	O
range	O
of	O
haptic	O
feedback	O
.	O
One	O
that	O
I	O
use	O
for	O
special	O
effects	O
is	O
Immersion	O
'	O
s	O
Haptic	O
Development	O
Platform	O
for	O
Android	O
.	O
Troubleshooting	O
If	O
your	O
device	O
won	O
'	O
t	O
vibrate	O
,	O
first	O
make	O
sure	O
that	O
it	O
can	O
vibrate	O
:	O
#	O
pre	O
Secondly	O
,	O
please	O
ensure	O
that	O
you	O
'	O
ve	O
given	O
your	O
application	O
the	O
permission	O
to	O
vibrate	O
!	O
Refer	O
back	O
to	O
the	O
first	O
point	O
.	O
Question	O
-	O
31993377	O
Question	O
How	O
is	O
it	O
that	O
for	O
a	O
scanner	O
object	O
the	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
true	O
while	O
the	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
returns	O
false	O
?	O
Note	O
:	O
Based	O
on	O
the	O
input	O
file	O
,	O
the	O
hasNext	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
is	O
returning	O
the	O
result	O
as	O
expected	O
;	O
the	O
hasNextLine	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
seem	O
to	O
be	O
returning	O
the	O
correct	O
result	O
.	O
Code	O
Here	O
'	O
s	O
the	O
code	O
I	O
'	O
m	O
running	O
that	O
'	O
s	O
creating	O
the	O
results	O
below	O
:	O
#	O
pre	O
Input	O
File	O
The	O
following	O
is	O
the	O
actual	O
content	O
of	O
the	O
file	O
that	O
I	O
'	O
m	O
passing	O
to	O
this	O
scanner	O
:	O
#	O
pre	O
Result	O
The	O
following	O
is	O
the	O
end	O
of	O
what	O
'	O
s	O
printed	O
in	O
the	O
console	O
when	O
I	O
run	O
my	O
code	O
,	O
and	O
includes	O
the	O
portion	O
I	O
can	O
'	O
t	O
make	O
sense	O
of	O
:	O
#	O
pre	O
Question	O
-	O
6841333	O
,	O
answer	O
-	O
20906129	O
As	O
explained	O
by	O
others	O
,	O
there	O
'	O
s	O
a	O
time	O
discontinuity	O
there	O
.	O
There	O
are	O
two	O
possible	O
timezone	O
offsets	O
for	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
54	O
:	O
08	O
at	O
Asia	O
/	O
Shanghai	O
,	O
but	O
only	O
one	O
offset	O
for	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
54	O
:	O
07	O
.	O
So	O
,	O
depending	O
on	O
which	O
offset	O
is	O
used	O
,	O
there	O
'	O
s	O
either	O
a	O
one	O
second	O
difference	O
or	O
a	O
5	O
minutes	O
and	O
53	O
seconds	O
difference	O
.	O
This	O
slight	O
shift	O
of	O
offsets	O
,	O
instead	O
of	O
the	O
usual	O
one	O
-	O
hour	O
daylight	O
savings	O
(	O
summer	O
time	O
)	O
we	O
are	O
used	O
to	O
,	O
obscures	O
the	O
problem	O
a	O
bit	O
.	O
Note	O
that	O
the	O
2013a	O
update	O
of	O
the	O
timezone	O
database	O
moved	O
this	O
discontinuity	O
a	O
few	O
seconds	O
earlier	O
,	O
but	O
the	O
effect	O
would	O
still	O
be	O
observable	O
.	O
The	O
new	O
java	O
.	O
time	O
package	O
on	O
Java	O
8	O
let	O
use	O
see	O
this	O
more	O
clearly	O
,	O
and	O
provide	O
tools	O
to	O
handle	O
it	O
.	O
Given	O
:	O
#	O
pre	O
Then	O
durationAtEarlierOffset	B-api_mention
will	O
be	O
one	O
second	O
,	O
while	O
durationAtLaterOffset	B-api_mention
will	O
be	O
five	O
minutes	O
and	O
53	O
seconds	O
.	O
Also	O
,	O
these	O
two	O
offsets	O
are	O
the	O
same	O
:	O
#	O
pre	O
But	O
these	O
two	O
are	O
different	O
:	O
#	O
pre	O
You	O
can	O
see	O
the	O
same	O
problem	O
comparing	O
1927	O
-	O
12	O
-	O
31	O
23	O
:	O
59	O
:	O
59	O
with	O
1928	O
-	O
01	O
-	O
01	O
00	O
:	O
00	O
:	O
00	O
,	O
though	O
,	O
in	O
this	O
case	O
,	O
it	O
is	O
the	O
earlier	O
offset	O
that	O
produce	O
the	O
longer	O
divergence	O
,	O
and	O
it	O
is	O
the	O
earlier	O
date	O
that	O
has	O
two	O
possible	O
offsets	O
.	O
Another	O
way	O
to	O
approach	O
this	O
is	O
to	O
check	O
whether	O
there	O
'	O
s	O
a	O
transition	O
going	O
on	O
.	O
We	O
can	O
do	O
this	O
like	O
this	O
:	O
#	O
pre	O
You	O
can	O
check	O
whether	O
the	O
transition	O
is	O
an	O
overlap	O
-	O
in	O
which	O
case	O
there	O
'	O
s	O
more	O
than	O
one	O
valid	O
offset	O
for	O
that	O
date	O
/	O
time	O
-	O
or	O
a	O
gap	O
-	O
in	O
which	O
case	O
that	O
date	O
/	O
time	O
is	O
not	O
valid	O
for	O
that	O
zone	O
id	O
-	O
by	O
using	O
the	O
isOverlap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
isGap	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
methods	O
on	O
zot4	O
.	O
I	O
hope	O
this	O
helps	O
people	O
handle	O
this	O
sort	O
of	O
issue	O
once	O
Java	O
8	O
becomes	O
widely	O
available	O
,	O
or	O
to	O
those	O
using	O
Java	O
7	O
who	O
adopt	O
the	O
JSR	O
310	O
backport	O
.	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
8172439	O
You	O
can	O
use	O
Character	B-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
char	I-api_mention
)	I-api_mention
.	O
Note	O
that	O
this	O
method	O
simply	O
returns	O
a	O
call	O
to	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
char	I-api_mention
)	I-api_mention
,	O
which	O
also	O
works	O
.	O
As	O
others	O
have	O
noted	O
,	O
string	O
concatenation	O
works	O
as	O
a	O
shortcut	O
as	O
well	O
:	O
String	B-api_mention
s	O
=	O
StringLiteral	O
+	O
CharLiteral	O
;	O
But	O
this	O
compiles	O
down	O
to	O
:	O
String	B-api_mention
s	O
=	O
new	O
StringBuilder	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
append	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
which	O
is	O
less	O
efficient	O
because	O
the	O
StringBuilder	B-api_mention
is	O
backed	O
by	O
a	O
char	O
[	O
]	O
(	O
over	O
-	O
allocated	O
by	O
StringBuilder	B-api_mention
(	I-api_mention
)	I-api_mention
to	O
16	O
)	O
,	O
only	O
for	O
that	O
array	O
to	O
be	O
defensively	O
copied	O
by	O
the	O
resulting	O
String	B-api_mention
.	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
"	O
gets	O
in	O
the	O
back	O
door	O
"	O
by	O
wrapping	O
the	O
char	O
in	O
a	O
single	O
-	O
element	O
array	O
and	O
passing	O
it	O
to	O
the	O
package	O
private	O
constructor	O
String	B-api_mention
(	O
char	O
[	O
]	O
,	O
boolean	O
)	O
,	O
which	O
avoids	O
the	O
array	O
copy	O
.	O
Question	O
-	O
31922866	O
,	O
answer	O
-	O
31923211	O
This	O
advice	O
is	O
a	O
variant	O
of	O
the	O
"	O
be	O
as	O
unspecific	O
as	O
possible	O
regarding	O
inputs	O
and	O
as	O
specific	O
as	O
possible	O
regarding	O
outputs	O
"	O
rule	O
of	O
thumb	O
.	O
Usually	O
if	O
you	O
have	O
a	O
method	O
that	O
takes	O
a	O
plain	O
non	O
-	O
null	O
value	O
,	O
you	O
can	O
map	O
it	O
over	O
the	O
Optional	B-api_mention
,	O
so	O
the	O
plain	O
version	O
is	O
strictly	O
more	O
unspecific	O
regarding	O
inputs	O
.	O
However	O
there	O
are	O
a	O
bunch	O
of	O
possible	O
reasons	O
why	O
you	O
would	O
want	O
to	O
require	O
an	O
Optional	B-api_mention
argument	O
nonetheless	O
:	O
#	O
li	O
you	O
want	O
your	O
function	O
to	O
be	O
used	O
in	O
conjunction	O
with	O
another	O
API	O
that	O
returns	O
an	O
Optional	B-api_mention
#	O
li	O
Your	O
function	O
should	O
return	O
something	O
other	O
than	O
an	O
empty	O
Optional	B-api_mention
if	O
the	O
given	O
value	O
is	O
empty	O
#	O
li	O
You	O
think	O
Optional	B-api_mention
is	O
so	O
awesome	O
that	O
whoever	O
uses	O
your	O
API	O
should	O
be	O
required	O
to	O
learn	O
about	O
it	O
;	O
-	O
)	O
Question	O
-	O
27683759	O
,	O
answer	O
-	O
27684042	O
In	O
a	O
nutshell	O
,	O
this	O
creates	O
an	O
empty	O
,	O
immutable	O
list	O
of	O
strings	O
.	O
Let	O
'	O
s	O
look	O
at	O
the	O
expression	O
bit	O
by	O
bit	O
.	O
Collections	B-api_mention
is	O
the	O
name	O
of	O
a	O
class	O
.	O
From	O
the	O
Javadoc	O
:	O
#	O
blockquote	O
emptyList	B-api_mention
(	I-api_mention
)	I-api_mention
is	O
the	O
name	O
of	O
a	O
static	O
method	O
defined	O
in	O
the	O
Collections	B-api_mention
class	O
(	O
Javadoc	O
)	O
.	O
It	O
is	O
a	O
generic	O
method	O
,	O
and	O
the	O
<	O
String	B-api_mention
>	O
in	O
Collections	B-api_mention
.	I-api_mention
<	I-api_mention
String	I-api_mention
>	I-api_mention
emptyList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
specifies	O
the	O
generic	O
type	O
argument	O
.	O
The	O
method	O
returns	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
in	O
this	O
case	O
is	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
:	O
a	O
list	O
of	O
strings	O
.	O
More	O
specifically	O
,	O
it	O
returns	O
an	O
empty	O
,	O
immutable	O
list	O
of	O
strings	O
.	O
Question	O
-	O
25056607	O
,	O
answer	O
-	O
25056821	O
Documentation	O
:	O
For	O
:	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
#	O
blockquote	O
It	O
will	O
simply	O
return	O
the	O
entire	O
string	O
that	O
'	O
s	O
why	O
it	O
returns	O
1	O
.	O
For	O
the	O
second	O
case	O
,	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
will	O
discard	O
the	O
,	O
so	O
the	O
result	O
will	O
be	O
empty	O
.	O
String	B-api_mention
.	I-api_mention
split	I-api_mention
silently	O
discards	O
trailing	O
separators	O
see	O
guava	O
StringsExplained	B-api_mention
too	O
Question	O
-	O
19757300	O
,	O
answer	O
-	O
35512247	O
Keeping	O
this	O
issue	O
in	O
mind	O
I	O
developed	O
a	O
small	O
library	O
for	O
dealing	O
with	O
checked	O
exceptions	O
and	O
lambdas	O
.	O
Custom	O
adapters	O
allow	O
you	O
to	O
integrate	O
with	O
existing	O
functional	O
types	O
:	O
stream	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
map	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
/	O
/	O
with	O
a	O
static	O
import	O
#	O
a	O
Question	O
-	O
10796160	O
,	O
answer	O
-	O
10796174	O
You	O
need	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
split	B-api_mention
uses	O
regular	O
expression	O
and	O
in	O
regex	O
|	O
is	O
metacharacter	O
representing	O
OR	O
operator	O
.	O
You	O
need	O
to	O
escape	O
that	O
character	O
using	O
\	O
(	O
written	O
in	O
String	B-api_mention
as	O
StringLiteral	O
since	O
\	O
is	O
also	O
metacharacter	O
in	O
String	B-api_mention
literals	O
and	O
require	O
another	O
\	O
to	O
escape	O
it	O
)	O
.	O
You	O
can	O
also	O
use	O
test	O
.	O
split	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
let	O
Pattern	B-api_mention
.	I-api_mention
quote	I-api_mention
create	O
escaped	O
version	O
of	O
regex	O
representing	O
|	O
.	O
Question	O
-	O
17489250	O
,	O
answer	O
-	O
17489394	O
It	O
'	O
s	O
a	O
feature	O
of	O
the	O
Java	O
language	O
.	O
String	B-api_mention
literals	O
in	O
the	O
source	O
code	O
is	O
given	O
special	O
treatment	O
.	O
The	O
language	O
spec	O
,	O
here	O
,	O
simply	O
says	O
that	O
a	O
string	O
literal	O
is	O
of	O
String	B-api_mention
type	O
Question	O
-	O
8777257	O
,	O
answer	O
-	O
8777311	O
The	O
Arrays	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
check	O
if	O
both	O
arrays	O
contain	O
the	O
same	O
number	O
of	O
elements	O
,	O
and	O
all	O
corresponding	O
pairs	O
of	O
elements	O
in	O
the	O
two	O
arrays	O
are	O
equal	O
.	O
The	O
array1	O
.	B-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
compare	O
the	O
object	O
to	O
another	O
object	O
and	O
return	O
true	O
only	O
if	O
the	O
reference	O
of	O
the	O
two	O
object	O
are	O
equal	O
as	O
in	O
the	O
Object	B-api_mention
.	I-api_mention
equals	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
6271417	O
,	O
answer	O
-	O
29938300	O
Use	O
this	O
method	O
,	O
but	O
be	O
careful	O
to	O
make	O
an	O
object	O
in	O
your	O
main	O
.	O
public	O
static	O
void	O
setName	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
{	O
Class	B-api_mention
setClass	O
=	O
obj	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
String	B-api_mention
className	O
=	O
setClass	O
.	B-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
}	O
Question	O
-	O
8172420	O
,	O
answer	O
-	O
15633542	O
Nice	O
question	O
.	O
I	O
'	O
ve	O
got	O
of	O
the	O
following	O
five	O
6	O
methods	O
to	O
do	O
it	O
.	O
#	O
pre	O
#	O
blockquote	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
new	O
String	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
which	O
in	O
turn	O
sets	O
the	O
value	O
char	O
array	O
.	O
#	O
pre	O
On	O
the	O
other	O
hand	O
String	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
invokes	O
the	O
following	O
package	O
private	O
constructor	O
.	O
#	O
pre	O
Source	O
code	O
from	O
String	B-api_mention
.	O
java	O
in	O
Java	O
8	O
source	O
code	O
#	O
blockquote	O
#	O
li	O
Java	O
:	O
:	O
How	O
to	O
convert	O
primitive	O
char	O
to	O
String	B-api_mention
in	O
Java	O
#	O
li	O
How	O
to	O
convert	O
Char	B-api_mention
to	O
String	B-api_mention
in	O
Java	O
with	O
Example	O
Question	O
-	O
4818699	O
,	O
answer	O
-	O
4818783	O
The	O
absolute	O
simplest	O
example	O
I	O
can	O
think	O
of	O
is	O
to	O
make	O
incrementing	O
an	O
atomic	O
operation	O
.	O
With	O
standard	O
ints	O
:	O
#	O
pre	O
With	O
AtomicInteger	B-api_mention
:	O
#	O
pre	O
The	O
latter	O
is	O
a	O
very	O
simple	O
way	O
to	O
perform	O
simple	O
mutations	O
effects	O
(	O
especially	O
counting	O
,	O
or	O
unique	O
-	O
indexing	O
)	O
,	O
without	O
having	O
to	O
resort	O
to	O
synchronizing	O
all	O
access	O
.	O
More	O
complex	O
synchronization	O
-	O
free	O
logic	O
can	O
be	O
employed	O
by	O
using	O
compareAndSet	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
a	O
type	O
of	O
optimistic	O
locking	O
-	O
get	O
the	O
current	O
value	O
,	O
compute	O
result	O
based	O
on	O
this	O
,	O
set	O
this	O
result	O
iff	O
value	O
is	O
still	O
the	O
input	O
used	O
to	O
do	O
the	O
calculation	O
,	O
else	O
start	O
again	O
-	O
but	O
the	O
counting	O
examples	O
are	O
very	O
useful	O
,	O
and	O
I	O
'	O
ll	O
often	O
use	O
AtomicIntegers	B-api_mention
for	O
counting	O
and	O
VM	O
-	O
wide	O
unique	O
generators	O
if	O
there	O
'	O
s	O
any	O
hint	O
of	O
multiple	O
threads	O
being	O
involved	O
,	O
because	O
they	O
'	O
re	O
so	O
easy	O
to	O
work	O
with	O
I	O
'	O
d	O
almost	O
consider	O
it	O
premature	O
optimisation	O
to	O
use	O
plain	O
ints	O
.	O
While	O
you	O
can	O
almost	O
always	O
achieve	O
the	O
same	O
synchronization	O
guarantees	O
with	O
ints	O
and	O
appropriate	O
synchronized	O
declarations	O
,	O
the	O
beauty	O
of	O
AtomicInteger	B-api_mention
is	O
that	O
the	O
thread	O
-	O
safety	O
is	O
built	O
into	O
the	O
actual	O
object	O
itself	O
,	O
rather	O
than	O
you	O
needing	O
to	O
worry	O
about	O
the	O
possible	O
interleavings	O
,	O
and	O
monitors	O
held	O
,	O
of	O
every	O
method	O
that	O
happens	O
to	O
access	O
the	O
int	O
value	O
.	O
It	O
'	O
s	O
much	O
harder	O
to	O
accidentally	O
violate	O
threadsafety	O
when	O
calling	O
getAndIncrement	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
than	O
when	O
returning	O
i	O
+	O
+	O
and	O
remembering	O
(	O
or	O
not	O
)	O
to	O
acquire	O
the	O
correct	O
set	O
of	O
monitors	O
beforehand	O
.	O
Question	O
-	O
21375659	O
,	O
answer	O
-	O
21375818	O
This	O
isn	O
'	O
t	O
strictly	O
an	O
answer	O
to	O
your	O
question	O
,	O
but	O
if	O
behind	O
your	O
question	O
is	O
a	O
wish	O
to	O
have	O
mutable	O
strings	O
that	O
you	O
can	O
manipulate	O
,	O
you	O
should	O
check	O
out	O
the	O
StringBuilder	B-api_mention
class	O
,	O
which	O
implements	O
many	O
of	O
the	O
exact	O
same	O
methods	O
that	O
String	B-api_mention
has	O
but	O
also	O
adds	O
methods	O
to	O
change	O
the	O
current	O
contents	O
.	O
Once	O
you	O
'	O
ve	O
built	O
your	O
string	O
in	O
such	O
a	O
way	O
that	O
you	O
'	O
re	O
content	O
with	O
it	O
,	O
you	O
simply	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
it	O
in	O
order	O
to	O
convert	O
it	O
to	O
an	O
ordinary	O
String	B-api_mention
that	O
you	O
can	O
pass	O
to	O
library	O
routines	O
and	O
other	O
functions	O
that	O
only	O
take	O
String	B-api_mention
s	O
.	O
Also	O
,	O
both	O
StringBuilder	B-api_mention
and	O
String	B-api_mention
implements	O
the	O
CharSequence	B-api_mention
interface	O
,	O
so	O
if	O
you	O
want	O
to	O
write	O
functions	O
in	O
your	O
own	O
code	O
that	O
can	O
use	O
both	O
mutable	O
and	O
immutable	O
strings	O
,	O
you	O
can	O
declare	O
them	O
to	O
take	O
any	O
CharSequence	B-api_mention
object	O
.	O
Question	O
-	O
23674624	O
I	O
'	O
m	O
looking	O
at	O
the	O
docs	O
for	O
the	O
IntStream	B-api_mention
,	O
and	O
I	O
see	O
an	O
toArray	B-api_mention
method	O
,	O
but	O
no	O
way	O
to	O
go	O
directly	O
to	O
a	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
Surely	O
there	O
is	O
a	O
way	O
to	O
convert	O
a	O
Stream	B-api_mention
to	O
a	O
List	B-api_mention
?	O
Question	O
-	O
29183904	O
,	O
answer	O
-	O
29972028	O
Use	O
enum	O
when	O
you	O
need	O
its	O
features	O
.	O
Don	O
'	O
t	O
avoid	O
it	O
strictly	O
.	O
Java	O
enum	O
is	O
more	O
powerful	O
,	O
but	O
if	O
you	O
don	O
'	O
t	O
need	O
its	O
features	O
,	O
use	O
constants	O
,	O
they	O
occupy	O
less	O
space	O
and	O
they	O
can	O
be	O
primitive	O
itself	O
.	O
When	O
to	O
use	O
enum	O
:	O
#	O
li	O
type	O
checking	O
-	O
you	O
can	O
accept	O
only	O
listed	O
values	O
,	O
and	O
they	O
are	O
not	O
continuous	O
(	O
see	O
below	O
what	O
I	O
call	O
continuous	O
here	O
)	O
#	O
li	O
method	O
overloading	O
-	O
every	O
enum	O
constant	O
has	O
its	O
own	O
implementation	O
of	O
a	O
method	O
#	O
pre	O
#	O
li	O
more	O
data	O
-	O
your	O
one	O
constant	O
contains	O
more	O
than	O
one	O
information	O
that	O
cannot	O
be	O
put	O
in	O
one	O
variable	O
#	O
li	O
complicated	O
data	O
-	O
your	O
constant	O
need	O
methods	O
to	O
operate	O
on	O
the	O
data	O
When	O
not	O
to	O
use	O
enum	O
:	O
#	O
li	O
you	O
can	O
accept	O
all	O
values	O
of	O
one	O
type	O
,	O
and	O
your	O
constants	O
contain	O
only	O
these	O
most	O
used	O
#	O
li	O
you	O
can	O
accept	O
continuous	O
data	O
#	O
pre	O
#	O
li	O
for	O
names	O
(	O
like	O
in	O
your	O
example	O
)	O
#	O
li	O
for	O
everything	O
other	O
that	O
really	O
doesn	O
'	O
t	O
need	O
an	O
enum	O
Enum	O
occupies	O
more	O
space	O
#	O
li	O
a	O
single	O
reference	O
to	O
an	O
enum	O
constant	O
occupy	O
4	O
bytes	O
#	O
li	O
every	O
enum	O
constant	O
occupy	O
space	O
that	O
is	O
a	O
sum	O
of	O
its	O
fields	O
'	O
sizes	O
aligned	O
to	O
8	O
bytes	O
+	O
overhead	O
of	O
the	O
object	O
#	O
li	O
the	O
enum	O
class	O
itself	O
occupy	O
some	O
space	O
Constant	O
occupies	O
less	O
space	O
#	O
li	O
a	O
constant	O
doesn	O
'	O
t	O
have	O
a	O
reference	O
so	O
it	O
'	O
s	O
a	O
pure	O
data	O
(	O
even	O
if	O
it	O
'	O
s	O
a	O
reference	O
,	O
then	O
enum	O
instance	O
would	O
be	O
a	O
reference	O
to	O
another	O
reference	O
)	O
#	O
li	O
constants	O
may	O
be	O
added	O
to	O
existing	O
class	O
-	O
it	O
'	O
s	O
not	O
necessary	O
to	O
add	O
another	O
class	O
#	O
li	O
constants	O
may	O
be	O
inlined	O
;	O
it	O
brings	O
extended	O
compile	O
-	O
time	O
features	O
(	O
such	O
as	O
null	O
checking	O
,	O
finding	O
dead	O
code	O
etc	O
.	O
)	O
Question	O
-	O
19431234	O
,	O
answer	O
-	O
23885950	O
Short	O
answer	O
:	O
#	O
pre	O
Explanation	O
:	O
(	O
based	O
on	O
this	O
question	O
about	O
LocalDate	B-api_mention
)	O
Despite	O
its	O
name	O
,	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
represents	O
an	O
instant	O
on	O
the	O
time	O
-	O
line	O
,	O
not	O
a	O
"	O
date	O
"	O
.	O
The	O
actual	O
data	O
stored	O
within	O
the	O
object	O
is	O
a	O
long	O
count	O
of	O
milliseconds	O
since	O
1970	O
-	O
01	O
-	O
01T00	O
:	O
00Z	O
(	O
midnight	O
at	O
the	O
start	O
of	O
1970	O
GMT	O
/	O
UTC	O
)	O
.	O
The	O
equivalent	O
class	O
to	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
in	O
JSR	O
-	O
310	O
is	O
Instant	B-api_mention
,	O
thus	O
there	O
are	O
convenient	O
methods	O
to	O
provide	O
the	O
conversion	O
to	O
and	O
fro	O
:	O
#	O
pre	O
A	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
instance	O
has	O
no	O
concept	O
of	O
time	O
-	O
zone	O
.	O
This	O
might	O
seem	O
strange	O
if	O
you	O
call	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
on	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
,	O
because	O
the	O
toString	B-api_mention
is	O
relative	O
to	O
a	O
time	O
-	O
zone	O
.	O
However	O
that	O
method	O
actually	O
uses	O
Java	O
'	O
s	O
default	O
time	O
-	O
zone	O
on	O
the	O
fly	O
to	O
provide	O
the	O
string	O
.	O
The	O
time	O
-	O
zone	O
is	O
not	O
part	O
of	O
the	O
actual	O
state	O
of	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
.	O
An	O
Instant	B-api_mention
also	O
does	O
not	O
contain	O
any	O
information	O
about	O
the	O
time	O
-	O
zone	O
.	O
Thus	O
,	O
to	O
convert	O
from	O
an	O
Instant	O
to	O
a	O
local	O
date	O
-	O
time	O
it	O
is	O
necessary	O
to	O
specify	O
a	O
time	O
-	O
zone	O
.	O
This	O
might	O
be	O
the	O
default	O
zone	O
-	O
ZoneId	B-api_mention
.	I-api_mention
systemDefault	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
or	O
it	O
might	O
be	O
a	O
time	O
-	O
zone	O
that	O
your	O
application	O
controls	O
,	O
such	O
as	O
a	O
time	O
-	O
zone	O
from	O
user	O
preferences	O
.	O
LocalDateTime	B-api_mention
has	O
a	O
convenient	O
factory	O
method	O
that	O
takes	O
both	O
the	O
instant	O
and	O
time	O
-	O
zone	O
:	O
#	O
pre	O
In	O
reverse	O
,	O
the	O
LocalDateTime	B-api_mention
the	O
time	O
-	O
zone	O
is	O
specified	O
by	O
calling	O
the	O
atZone	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
ZonedDateTime	B-api_mention
can	O
then	O
be	O
converted	O
directly	O
to	O
an	O
Instant	B-api_mention
:	O
#	O
pre	O
Note	O
that	O
the	O
conversion	O
from	O
LocalDateTime	B-api_mention
to	O
ZonedDateTime	B-api_mention
has	O
the	O
potential	O
to	O
introduce	O
unexpected	O
behaviour	O
.	O
This	O
is	O
because	O
not	O
every	O
local	O
date	O
-	O
time	O
exists	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
In	O
autumn	O
/	O
fall	O
,	O
there	O
is	O
an	O
overlap	O
in	O
the	O
local	O
time	O
-	O
line	O
where	O
the	O
same	O
local	O
date	O
-	O
time	O
occurs	O
twice	O
.	O
In	O
spring	O
,	O
there	O
is	O
a	O
gap	O
,	O
where	O
an	O
hour	O
disappears	O
.	O
See	O
the	O
Javadoc	O
of	O
atZone	B-api_mention
(	I-api_mention
ZoneId	I-api_mention
)	I-api_mention
for	O
more	O
the	O
definition	O
of	O
what	O
the	O
conversion	O
will	O
do	O
.	O
Summary	O
,	O
if	O
you	O
round	O
-	O
trip	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
to	O
a	O
LocalDateTime	B-api_mention
and	O
back	O
to	O
a	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
you	O
may	O
end	O
up	O
with	O
a	O
different	O
instant	O
due	O
to	O
Daylight	O
Saving	O
Time	O
.	O
Question	O
-	O
20877086	O
,	O
answer	O
-	O
20877161	O
Integer	B-api_mention
objects	O
caches	O
between	O
-	O
128	O
and	O
127	O
of	O
256	O
Integer	B-api_mention
You	O
should	O
not	O
compare	O
object	O
references	O
with	O
=	O
=	O
or	O
!	O
=	O
.	O
You	O
should	O
use	O
.	B-api_mention
equals	B-api_mention
(	I-api_mention
.	I-api_mention
.	I-api_mention
)	I-api_mention
instead	O
,	O
or	O
better	O
-	O
use	O
the	O
primitive	O
int	O
rather	O
than	O
Integer	B-api_mention
.	I-api_mention
parseInt	B-api_mention
:	O
Parses	O
the	O
string	O
argument	O
as	O
a	O
signed	O
decimal	O
integer	O
.	O
The	O
characters	O
in	O
the	O
string	O
must	O
all	O
be	O
decimal	O
digits	O
,	O
except	O
that	O
the	O
first	O
character	O
may	O
be	O
an	O
ASCII	O
minus	O
sign	O
'	O
-	O
'	O
(	O
'	O
\	O
u002D	O
'	O
)	O
to	O
indicate	O
a	O
negative	O
value	O
.	O
The	O
resulting	O
integer	O
value	O
is	O
returned	O
,	O
exactly	O
as	O
if	O
the	O
argument	O
and	O
the	O
radix	O
10	O
were	O
given	O
as	O
arguments	O
to	O
the	O
parseInt	B-api_mention
(	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	O
int	O
)	O
method	O
.	O
valueOf	B-api_mention
Returns	O
an	O
Integer	B-api_mention
object	O
holding	O
the	O
value	O
extracted	O
from	O
the	O
specified	O
String	B-api_mention
when	O
parsed	O
with	O
the	O
radix	O
given	O
by	O
the	O
second	O
argument	O
.	O
The	O
first	O
argument	O
is	O
interpreted	O
as	O
representing	O
a	O
signed	O
integer	O
in	O
the	O
radix	O
specified	O
by	O
the	O
second	O
argument	O
,	O
exactly	O
as	O
if	O
the	O
arguments	O
were	O
given	O
to	O
the	O
parseInt	B-api_mention
(	I-api_mention
java	I-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
String	I-api_mention
,	I-api_mention
int	I-api_mention
)	I-api_mention
method	O
.	O
The	O
result	O
is	O
an	O
Integer	B-api_mention
object	O
that	O
represents	O
the	O
integer	O
value	O
specified	O
by	O
the	O
string	O
.	O
equivalent	O
to	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
radix	O
-	O
the	O
radix	O
to	O
be	O
used	O
in	O
interpreting	O
s	O
so	O
if	O
you	O
equal	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
for	O
the	O
integer	O
inbetween	O
-	O
128	O
to	O
127	O
it	O
returns	O
true	O
in	O
your	O
condition	O
for	O
lesser	O
than	O
-	O
128	O
and	O
greater	O
than	O
127	O
it	O
gives	O
false	O
Question	O
-	O
32693704	O
,	O
answer	O
-	O
32752970	O
I	O
will	O
try	O
to	O
summarize	O
three	O
moreless	O
reasonable	O
versions	O
which	O
were	O
proposed	O
in	O
comments	O
.	O
@	O
Holger	O
says	O
:	O
#	O
blockquote	O
This	O
is	O
the	O
most	O
easy	O
thing	O
to	O
test	O
.	O
Let	O
'	O
s	O
compile	O
such	O
program	O
:	O
#	O
pre	O
Run	O
it	O
with	O
java	O
-	O
verbose	O
:	O
class	O
HashMapTest	O
.	O
This	O
will	O
print	O
the	O
class	O
loading	O
events	O
as	O
they	O
occur	O
.	O
With	O
JDK	O
1	O
.	O
8	O
.	O
0	O
_	O
60	O
I	O
see	O
more	O
than	O
400	O
classes	O
loaded	O
:	O
#	O
pre	O
As	O
you	O
can	O
see	O
,	O
HashMap	B-api_mention
is	O
loaded	O
long	O
before	O
application	O
code	O
and	O
Arrays	B-api_mention
is	O
loaded	O
only	O
14	O
classes	O
after	O
HashMap	B-api_mention
.	O
The	O
HashMap	B-api_mention
load	O
is	O
triggered	O
by	O
sun	B-api_mention
.	I-api_mention
reflect	I-api_mention
.	I-api_mention
Reflection	I-api_mention
initialization	O
as	O
it	O
has	O
HashMap	B-api_mention
static	O
fields	O
.	O
The	O
Arrays	B-api_mention
load	O
is	O
likely	O
to	O
be	O
triggered	O
by	O
WeakHashMap	O
load	O
which	O
actually	O
has	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
in	O
the	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
The	O
WeakHashMap	B-api_mention
load	O
is	O
triggered	O
by	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
ClassValue	I-api_mention
$	I-api_mention
ClassValueMap	I-api_mention
which	O
extends	O
WeakHashMap	B-api_mention
.	O
The	O
ClassValueMap	B-api_mention
is	O
present	O
in	O
every	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Class	I-api_mention
instance	O
.	O
So	O
to	O
me	O
seems	O
that	O
without	O
Arrays	B-api_mention
class	O
the	O
JDK	O
cannot	O
be	O
initialized	O
at	O
all	O
.	O
Also	O
the	O
Arrays	B-api_mention
static	O
initializer	O
is	O
very	O
short	O
,	O
it	O
only	O
initializes	O
the	O
assertion	O
mechanism	O
.	O
This	O
mechanism	O
is	O
used	O
in	O
many	O
other	O
classes	O
(	O
including	O
,	O
for	O
example	O
,	O
java	B-api_mention
.	I-api_mention
lang	I-api_mention
.	I-api_mention
Throwable	I-api_mention
which	O
is	O
loaded	O
very	O
early	O
)	O
.	O
No	O
other	O
static	O
initialization	O
steps	O
are	O
performed	O
in	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Arrays	I-api_mention
.	O
Thus	O
@	O
Holger	O
version	O
seems	O
incorrect	O
to	O
me	O
.	O
Here	O
we	O
also	O
found	O
very	O
interesting	O
thing	O
.	O
The	O
WeakHashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
still	O
uses	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
.	O
It	O
'	O
s	O
interesting	O
when	O
it	O
appeared	O
there	O
,	O
but	O
unfortunately	O
this	O
goes	O
to	O
prehistoric	O
times	O
(	O
it	O
was	O
already	O
there	O
in	O
the	O
very	O
first	O
public	O
OpenJDK	O
repository	O
)	O
.	O
Next	O
,	O
@	O
MarcoTopolnik	O
says	O
:	O
#	O
blockquote	O
It	O
was	O
actually	O
surprising	O
for	O
me	O
that	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
is	O
not	O
directly	O
intrinsified	O
(	O
see	O
intrinsic	O
list	O
generated	O
by	O
@	O
apangin	O
)	O
.	O
Seems	O
that	O
such	O
loop	O
can	O
be	O
recognized	O
and	O
vectorized	O
by	O
JVM	O
without	O
explicit	O
intrinsic	O
handling	O
.	O
So	O
it	O
'	O
s	O
true	O
that	O
extra	O
call	O
can	O
be	O
not	O
inlined	O
in	O
very	O
specific	O
cases	O
(	O
for	O
example	O
if	O
MaxInlineLevel	O
limit	O
is	O
reached	O
)	O
.	O
On	O
the	O
other	O
hand	O
it	O
'	O
s	O
very	O
rare	O
situation	O
and	O
it	O
'	O
s	O
only	O
a	O
single	O
call	O
,	O
it	O
'	O
s	O
not	O
a	O
call	O
inside	O
loop	O
,	O
and	O
it	O
'	O
s	O
a	O
static	O
,	O
not	O
virtual	O
/	O
interface	O
call	O
,	O
thus	O
the	O
performance	O
improvement	O
could	O
be	O
only	O
marginal	O
and	O
only	O
in	O
some	O
specific	O
scenarios	O
.	O
Not	O
the	O
thing	O
the	O
JVM	O
developers	O
usually	O
care	O
.	O
Also	O
it	O
should	O
be	O
noted	O
that	O
even	O
C1	O
'	O
client	O
'	O
compiler	O
(	O
tier	O
1	O
-	O
3	O
)	O
is	O
capable	O
to	O
inline	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
called	O
,	O
for	O
example	O
,	O
in	O
WeakHashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
as	O
inlining	O
log	O
(	O
-	O
XX	O
:	O
+	O
UnlockDiagnosticVMOptions	O
-	O
XX	O
:	O
+	O
PrintCompilation	O
-	O
XX	O
:	O
+	O
PrintInlining	O
)	O
says	O
:	O
#	O
pre	O
Of	O
course	O
,	O
it	O
'	O
s	O
also	O
easily	O
inlined	O
by	O
smart	O
and	O
powerful	O
C2	O
'	O
server	O
'	O
compiler	O
.	O
Thus	O
I	O
see	O
no	O
problems	O
here	O
.	O
Seems	O
that	O
@	O
Marco	O
version	O
is	O
incorrect	O
either	O
.	O
Finally	O
we	O
have	O
a	O
couple	O
of	O
comments	O
from	O
@	O
StuartMarks	O
(	O
who	O
is	O
JDK	O
developer	O
,	O
thus	O
some	O
official	O
voice	O
)	O
:	O
#	O
blockquote	O
Indeed	O
the	O
HashMap	B-api_mention
.	I-api_mention
clear	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
contained	O
the	O
loop	O
many	O
years	O
,	O
was	O
replaced	O
with	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
on	O
Apr	O
10th	O
,	O
2013	O
and	O
stayed	O
less	O
one	O
half	O
-	O
a	O
-	O
year	O
until	O
Sept	O
4th	O
when	O
the	O
discussed	O
commit	O
was	O
introduced	O
.	O
The	O
discussed	O
commit	O
was	O
actually	O
a	O
major	O
rewrite	O
of	O
the	O
HashMap	B-api_mention
internals	O
to	O
fix	O
JDK	O
-	O
8023463	O
issue	O
.	O
It	O
was	O
a	O
long	O
story	O
about	O
possibility	O
to	O
poison	O
the	O
HashMap	B-api_mention
with	O
keys	O
having	O
duplicating	O
hashcodes	O
reducing	O
HashMap	B-api_mention
search	O
speed	O
to	O
linear	O
making	O
it	O
vulnerable	O
to	O
DoS	O
-	O
attacks	O
.	O
The	O
attempts	O
to	O
solve	O
this	O
were	O
performed	O
in	O
JDK	O
-	O
7	O
including	O
some	O
randomization	O
of	O
String	B-api_mention
hashCode	O
.	O
So	O
seems	O
that	O
the	O
HashMap	B-api_mention
implementation	O
was	O
forked	O
from	O
the	O
earlier	O
commit	O
,	O
developed	O
independently	O
,	O
then	O
merged	O
into	O
the	O
master	O
branch	O
overwriting	O
several	O
changes	O
introduced	O
in	O
-	O
between	O
.	O
We	O
may	O
support	O
this	O
hypothesis	O
performing	O
a	O
diff	O
.	O
Take	O
the	O
version	O
where	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
was	O
removed	O
(	O
2013	O
-	O
09	O
-	O
04	O
)	O
and	O
compare	O
it	O
with	O
previous	O
version	O
(	O
2013	O
-	O
07	O
-	O
30	O
)	O
.	O
The	O
diff	O
-	O
U0	O
output	O
has	O
4341	O
lines	O
.	O
Now	O
let	O
'	O
s	O
diff	O
against	O
the	O
version	O
prior	O
to	O
one	O
when	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
was	O
added	O
(	O
2013	O
-	O
04	O
-	O
01	O
)	O
.	O
Now	O
diff	O
-	O
U0	O
contains	O
only	O
2680	O
lines	O
.	O
Thus	O
the	O
newer	O
version	O
actually	O
more	O
similar	O
to	O
the	O
older	O
than	O
to	O
immediate	O
parent	O
.	O
Conclusion	O
So	O
to	O
conclude	O
I	O
would	O
agree	O
with	O
Stuart	O
Marks	O
.	O
There	O
were	O
no	O
concrete	O
reason	O
to	O
remove	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
,	O
it	O
'	O
s	O
just	O
because	O
the	O
in	O
-	O
between	O
change	O
was	O
overwritten	O
by	O
mistake	O
.	O
Using	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
is	O
perfectly	O
fine	O
both	O
in	O
JDK	O
code	O
and	O
in	O
user	O
applications	O
and	O
used	O
,	O
for	O
example	O
,	O
in	O
WeakHashMap	B-api_mention
.	O
The	O
Arrays	B-api_mention
class	O
is	O
loaded	O
anyways	O
pretty	O
early	O
during	O
the	O
JDK	O
initialization	O
,	O
has	O
very	O
simple	O
static	O
initializer	O
and	O
Arrays	B-api_mention
.	I-api_mention
fill	I-api_mention
method	O
can	O
be	O
easily	O
inlined	O
even	O
by	O
client	O
compiler	O
,	O
so	O
no	O
performance	O
drawback	O
should	O
be	O
noted	O
.	O
Question	O
-	O
7935858	O
I	O
have	O
prepared	O
a	O
simple	O
code	O
snippet	O
in	O
order	O
to	O
separate	O
the	O
erroneous	O
portion	O
from	O
my	O
web	O
application	O
.	O
#	O
pre	O
I	O
have	O
tested	O
it	O
while	O
building	O
a	O
web	O
application	O
JSF	O
.	O
I	O
just	O
want	O
to	O
know	O
why	O
in	O
the	O
above	O
code	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
does	O
not	O
work	O
.	O
The	O
statement	O
,	O
System	B-api_mention
.	I-api_mention
out	I-api_mention
.	I-api_mention
println	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
displays	O
nothing	O
on	O
the	O
console	O
means	O
that	O
it	O
doesn	O
'	O
t	O
go	O
through	O
the	O
loop	O
.	O
When	O
I	O
change	O
the	O
argument	O
of	O
the	O
temp	O
.	B-api_mention
split	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
to	O
other	O
characters	O
,	O
It	O
works	O
just	O
fine	O
as	O
usual	O
.	O
What	O
might	O
be	O
the	O
problem	O
?	O
Question	O
-	O
10631715	O
,	O
answer	O
-	O
30270403	O
There	O
is	O
a	O
function	O
called	O
replaceAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
that	O
can	O
remove	O
all	O
whitespaces	O
by	O
replacing	O
them	O
with	O
whatever	O
you	O
want	O
.	O
As	O
an	O
example	O
#	O
pre	O
will	O
give	O
you	O
:	O
First	O
:	O
15	O
.	O
94	O
,	O
Second	O
:	O
16	O
.	O
01	O
Question	O
-	O
22463062	O
Java	O
8	O
added	O
a	O
new	O
API	O
for	O
working	O
with	O
dates	O
and	O
times	O
(	O
JSR	O
310	O
)	O
.	O
I	O
have	O
date	O
and	O
time	O
as	O
string	O
(	O
e	O
.	O
g	O
.	O
StringLiteral	O
)	O
.	O
How	O
can	O
I	O
obtain	O
a	O
LocalDateTime	B-api_mention
instance	O
from	O
the	O
given	O
string	O
?	O
After	O
I	O
finished	O
working	O
with	O
the	O
LocalDateTime	B-api_mention
object	O
:	O
How	O
can	O
I	O
then	O
convert	O
the	O
LocalDateTime	B-api_mention
instance	O
back	O
to	O
a	O
string	O
with	O
the	O
same	O
format	O
as	O
shown	O
above	O
?	O
Question	O
-	O
24547673	O
,	O
answer	O
-	O
24547831	O
It	O
'	O
s	O
a	O
curious	O
omission	O
.	O
You	O
would	O
have	O
to	O
mark	O
the	O
field	O
as	O
transient	O
and	O
provide	O
your	O
own	O
custom	O
writeObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
wrote	O
the	O
get	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
result	O
itself	O
,	O
and	O
a	O
readObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
that	O
restored	O
the	O
Optional	B-api_mention
by	O
reading	O
that	O
result	O
from	O
the	O
stream	O
.	O
Not	O
forgetting	O
to	O
call	O
defaultWriteObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
defaultReadObject	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
respectively	O
.	O
Question	O
-	O
12552863	O
,	O
answer	O
-	O
18496449	O
The	O
first	O
style	O
is	O
the	O
one	O
suggested	O
by	O
Oracle	O
.	O
BufferedWriter	B-api_mention
doesn	O
'	O
t	O
throw	O
checked	O
exceptions	O
,	O
so	O
if	O
any	O
exception	O
is	O
thrown	O
,	O
the	O
program	O
is	O
not	O
expected	O
to	O
recover	O
from	O
it	O
,	O
making	O
resource	O
recover	O
mostly	O
moot	O
.	O
Mostly	O
because	O
it	O
could	O
happen	O
in	O
a	O
thread	O
,	O
with	O
the	O
thread	O
dieing	O
but	O
the	O
program	O
still	O
continuing	O
-	O
-	O
say	O
,	O
there	O
was	O
a	O
temporary	O
memory	O
outage	O
that	O
wasn	O
'	O
t	O
long	O
enough	O
to	O
seriously	O
impair	O
the	O
rest	O
of	O
the	O
program	O
.	O
It	O
'	O
s	O
a	O
rather	O
corner	O
case	O
,	O
though	O
,	O
and	O
if	O
it	O
happens	O
often	O
enough	O
to	O
make	O
resource	O
leak	O
a	O
problem	O
,	O
the	O
try	O
-	O
with	O
-	O
resources	O
is	O
the	O
least	O
of	O
your	O
problems	O
.	O
Question	O
-	O
27504925	O
The	O
Java	O
language	O
specification	O
specifies	O
that	O
#	O
blockquote	O
So	O
,	O
considering	O
arrays	O
are	O
objects	O
â€”	O
why	O
did	O
the	O
Java	O
designers	O
make	O
the	O
decision	O
not	O
to	O
allow	O
inherit	O
and	O
override	O
from	O
it	O
,	O
for	O
example	O
,	O
toString	B-api_mention
(	I-api_mention
)	I-api_mention
or	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
?	O
The	O
current	O
syntax	O
wouldn	O
'	O
t	O
allow	O
creating	O
anonymous	O
classes	O
with	O
an	O
array	O
as	O
the	O
base	O
class	O
,	O
but	O
I	O
don	O
'	O
t	O
think	O
that	O
was	O
the	O
reason	O
for	O
their	O
decision	O
.	O
Question	O
-	O
7032070	O
,	O
answer	O
-	O
7032144	O
The	O
source	O
code	O
for	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
:	O
#	O
pre	O
The	O
source	O
code	O
for	O
removeAll	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
(	O
As	O
defined	O
in	O
AbstractCollection	B-api_mention
)	O
:	O
#	O
pre	O
clear	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
much	O
faster	O
since	O
it	O
doesn	O
'	O
t	O
have	O
to	O
deal	O
with	O
all	O
those	O
extra	O
method	O
calls	O
.	O
And	O
as	O
Atrey	O
points	O
out	O
,	O
c	O
.	B-api_mention
contains	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
increases	O
the	O
time	O
complexity	O
of	O
removeAll	B-api_mention
to	O
O	O
(	O
n	O
^	O
2	O
)	O
as	O
opposed	O
to	O
clear	O
'	O
s	O
O	O
(	O
n	O
)	O
.	O
Question	O
-	O
12732422	O
I	O
'	O
m	O
trying	O
to	O
add	O
header	O
for	O
my	O
request	O
using	O
HttpUrlConnection	B-api_mention
but	O
the	O
method	O
setRequestProperty	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
doesn	O
'	O
t	O
seem	O
working	O
.	O
The	O
server	O
side	O
doesn	O
'	O
t	O
receive	O
any	O
request	O
with	O
my	O
header	O
.	O
Can	O
anyone	O
help	O
me	O
?	O
Thanks	O
in	O
advance	O
.	O
#	O
pre	O
Question	O
-	O
32632364	O
,	O
answer	O
-	O
32633199	O
It	O
shouldn	O
'	O
t	O
have	O
compiled	O
,	O
according	O
to	O
JLS	O
7	O
.	O
int	O
can	O
be	O
compared	O
to	O
boxed	O
numeric	O
types	O
,	O
i	O
.	O
e	O
.	O
Byte	B-api_mention
,	O
Short	B-api_mention
,	O
Character	B-api_mention
,	O
Integer	B-api_mention
,	O
Long	B-api_mention
,	O
Float	B-api_mention
,	O
Double	B-api_mention
.	O
But	O
that	O
is	O
all	O
.	O
And	O
if	O
comparison	O
is	O
between	O
int	O
and	O
say	O
Float	B-api_mention
,	O
Float	B-api_mention
will	O
be	O
unboxed	O
first	O
,	O
so	O
that	O
the	O
comparison	O
is	O
between	O
float	O
and	O
int	O
.	O
It	O
'	O
ll	O
make	O
no	O
sense	O
to	O
do	O
the	O
other	O
way	O
around	O
-	O
box	O
int	O
then	O
examine	O
the	O
identity	O
of	O
the	O
Integer	B-api_mention
(	O
with	O
a	O
Float	B-api_mention
no	O
less	O
)	O
.	O
Question	O
-	O
15655012	O
,	O
answer	O
-	O
15655071	O
If	O
you	O
make	O
foo	O
static	O
,	O
you	O
must	O
initialize	O
it	O
in	O
the	O
class	O
constructor	O
(	O
or	O
inline	O
where	O
you	O
define	O
it	O
)	O
like	O
the	O
following	O
examples	O
.	O
Class	O
constructor	O
(	O
not	O
instance	O
)	O
:	O
#	O
pre	O
Inline	O
:	O
private	O
static	O
final	O
List	B-api_mention
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
problem	O
here	O
is	O
not	O
how	O
the	O
final	O
modifier	O
works	O
,	O
but	O
rather	O
how	O
the	O
static	O
modifier	O
works	O
.	O
The	O
final	O
modifier	O
enforces	O
an	O
initialization	O
of	O
your	O
reference	O
by	O
the	O
time	O
the	O
call	O
to	O
your	O
constructor	O
completes	O
(	O
i	O
.	O
e	O
.	O
you	O
must	O
initialize	O
it	O
in	O
the	O
constructor	O
)	O
.	O
When	O
you	O
initialize	O
an	O
attribute	O
in	O
-	O
line	O
,	O
it	O
gets	O
initialized	O
before	O
the	O
code	O
you	O
have	O
defined	O
for	O
the	O
constructor	O
is	O
run	O
,	O
so	O
you	O
get	O
the	O
following	O
outcomes	O
:	O
#	O
li	O
if	O
foo	O
is	O
static	O
,	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
executed	O
before	O
the	O
static	O
{	O
}	O
constructor	O
you	O
have	O
defined	O
for	O
your	O
class	O
is	O
executed	O
#	O
li	O
if	O
foo	O
is	O
not	O
static	O
,	O
foo	O
=	O
new	O
ArrayList	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
be	O
executed	O
before	O
your	O
constructor	O
is	O
run	O
When	O
you	O
do	O
not	O
initilize	O
an	O
attribute	O
in	O
-	O
line	O
,	O
the	O
final	O
modifier	O
enforces	O
that	O
you	O
initialize	O
it	O
and	O
that	O
you	O
must	O
do	O
so	O
in	O
the	O
constructor	O
.	O
If	O
you	O
also	O
have	O
a	O
static	O
modifier	O
,	O
the	O
constructor	O
you	O
will	O
have	O
to	O
initialize	O
the	O
attribute	O
in	O
is	O
the	O
class	O
'	O
initialization	O
block	O
:	O
static	O
{	O
}	O
.	O
The	O
error	O
you	O
get	O
in	O
your	O
code	O
is	O
from	O
the	O
fact	O
that	O
static	O
{	O
}	O
is	O
run	O
when	O
the	O
class	O
is	O
loaded	O
,	O
before	O
the	O
time	O
you	O
instantiate	O
an	O
object	O
of	O
that	O
class	O
.	O
Thus	O
,	O
you	O
will	O
have	O
not	O
initialized	O
foo	O
when	O
the	O
class	O
is	O
created	O
.	O
Think	O
of	O
the	O
static	O
{	O
}	O
block	O
as	O
a	O
constructor	O
for	O
an	O
object	O
of	O
type	O
Class	B-api_mention
.	O
This	O
is	O
where	O
you	O
must	O
do	O
the	O
initialization	O
of	O
your	O
static	O
final	O
class	O
attributes	O
(	O
if	O
not	O
done	O
inline	O
)	O
.	O
Side	O
note	O
:	O
The	O
final	O
modifier	O
assures	O
const	O
-	O
ness	O
only	O
for	O
primitive	O
types	O
and	O
references	O
.	O
When	O
you	O
declare	O
a	O
final	O
object	O
,	O
what	O
you	O
get	O
is	O
a	O
final	O
reference	O
to	O
that	O
object	O
,	O
but	O
the	O
object	O
itself	O
is	O
not	O
constant	O
.	O
What	O
you	O
are	O
really	O
achieving	O
when	O
declaring	O
a	O
final	O
attribute	O
is	O
that	O
,	O
once	O
you	O
declare	O
an	O
object	O
for	O
your	O
specific	O
purpose	O
(	O
like	O
the	O
final	O
List	B-api_mention
that	O
you	O
have	O
declared	O
)	O
,	O
that	O
and	O
only	O
that	O
object	O
will	O
be	O
used	O
for	O
that	O
purpose	O
:	O
you	O
will	O
not	O
be	O
able	O
to	O
change	O
List	B-api_mention
foo	O
to	O
another	O
List	B-api_mention
,	O
but	O
you	O
can	O
still	O
alter	O
your	O
List	B-api_mention
by	O
adding	O
/	O
removing	O
items	O
(	O
the	O
List	B-api_mention
you	O
are	O
using	O
will	O
be	O
the	O
same	O
,	O
only	O
with	O
its	O
contents	O
altered	O
)	O
.	O
Question	O
-	O
11774099	O
,	O
answer	O
-	O
11774137	O
iterate	O
through	O
the	O
whole	O
65k	O
chars	O
and	O
ask	O
Character	B-api_mention
.	I-api_mention
isJavaIdentifierStart	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
The	O
answer	O
is	O
:	O
"	O
undertie	O
"	O
decimal	O
8255	O
Question	O
-	O
24630963	O
,	O
answer	O
-	O
32648397	O
I	O
wrote	O
a	O
Collector	B-api_mention
which	O
,	O
unlike	O
the	O
default	O
java	O
one	O
,	O
does	O
not	O
crash	O
when	O
you	O
have	O
null	O
values	O
:	O
#	O
pre	O
Just	O
replace	O
your	O
Collectors	B-api_mention
.	I-api_mention
toMap	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
call	O
to	O
a	O
call	O
to	O
this	O
function	O
and	O
it	O
'	O
ll	O
fix	O
the	O
problem	O
.	O
Question	O
-	O
27845223	O
I	O
'	O
m	O
looking	O
at	O
a	O
piece	O
of	O
Java	O
code	O
right	O
now	O
,	O
and	O
it	O
takes	O
a	O
path	O
as	O
a	O
String	B-api_mention
and	O
gets	O
its	O
URL	O
using	O
URL	B-api_mention
resource	O
=	O
ClassLoader	B-api_mention
.	I-api_mention
getSystemClassLoader	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getResource	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
,	O
then	O
calls	O
String	B-api_mention
path	O
=	O
resource	O
.	B-api_mention
getPath	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
finally	O
executes	O
new	O
File	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
.	O
Oh	O
,	O
and	O
there	O
are	O
also	O
calls	O
to	O
URL	B-api_mention
url	O
=	O
resource	O
.	B-api_mention
toURI	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
and	O
String	B-api_mention
file	O
=	O
resource	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
I	O
'	O
m	O
totally	O
confused	O
right	O
now	O
-	O
mostly	O
because	O
of	O
the	O
terminology	O
,	O
I	O
guess	O
.	O
Can	O
someone	O
please	O
walk	O
me	O
through	O
the	O
differences	O
,	O
or	O
provide	O
a	O
few	O
links	O
to	O
Dummy	O
-	O
proof	O
material	O
?	O
Especially	O
URI	B-api_mention
to	O
URL	B-api_mention
and	O
Resource	B-api_mention
to	O
File	B-api_mention
?	O
To	O
me	O
,	O
it	O
feels	O
like	O
they	O
should	O
be	O
the	O
same	O
thing	O
,	O
respectively	O
.	O
.	O
.	O
The	O
difference	O
between	O
getFile	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
getPath	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
is	O
explained	O
here	O
:	O
What	O
'	O
s	O
the	O
difference	O
between	O
url	O
.	B-api_mention
getFile	I-api_mention
(	I-api_mention
)	I-api_mention
and	O
getpath	B-api_mention
(	I-api_mention
)	I-api_mention
?	O
(	O
Interestingly	O
they	O
both	O
seem	O
to	O
return	O
Strings	O
,	O
which	O
probably	O
adds	O
a	O
whole	O
lot	O
to	O
my	O
state	O
of	O
mind	O
.	O
.	O
.	O
)	O
Now	O
,	O
if	O
I	O
have	O
a	O
locator	O
that	O
references	O
a	O
class	O
or	O
package	O
in	O
a	O
jar	O
file	O
,	O
will	O
those	O
two	O
(	O
i	O
.	O
e	O
.	O
path	O
an	O
file	O
strings	O
)	O
differ	O
?	O
resource	O
.	B-api_mention
toString	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
would	O
give	O
you	O
jar	O
:	O
file	O
:	O
/	O
C	O
:	O
/	O
path	O
/	O
to	O
/	O
my	O
.	O
jar	O
!	O
/	O
com	O
/	O
example	O
/	O
,	O
after	O
all	O
(	O
note	O
the	O
exclamation	O
mark	O
)	O
.	O
Is	O
the	O
difference	O
between	O
URI	B-api_mention
and	O
URL	B-api_mention
in	O
Java	O
that	O
the	O
former	O
doesn	O
'	O
t	O
encode	O
spaces	O
?	O
Cf	O
.	O
Files	O
,	O
URIs	O
,	O
and	O
URLs	O
conflicting	O
in	O
Java	O
(	O
This	O
answer	O
explains	O
the	O
general	O
,	O
conceptual	O
difference	O
between	O
the	O
two	O
terms	O
fairly	O
well	O
:	O
URIs	O
identify	O
and	O
URLs	O
locate	O
;	O
)	O
Lastly	O
-	O
and	O
most	O
importantly	O
-	O
why	O
do	O
I	O
need	O
File	B-api_mention
object	O
;	O
why	O
isn	O
'	O
t	O
a	O
Resource	B-api_mention
(	O
URL	B-api_mention
)	O
enough	O
?	O
(	O
And	O
is	O
there	O
a	O
Resource	B-api_mention
object	O
?	O
)	O
Sorry	O
if	O
this	O
question	O
is	O
a	O
bit	O
unorganized	O
;	O
it	O
just	O
reflects	O
the	O
confusion	O
I	O
have	O
.	O
.	O
.	O
:	O
)	O
Question	O
-	O
20129762	O
In	O
Java	O
8	O
we	O
have	O
the	O
class	O
Stream	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
curiously	O
have	O
a	O
method	O
Iterator	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
iterator	O
(	O
args	O
)	O
So	O
you	O
would	O
expect	O
it	O
to	O
implement	O
interface	O
Iterable	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
,	O
which	O
requires	O
exactly	O
this	O
method	O
,	O
but	O
that	O
'	O
s	O
not	O
the	O
case	O
.	O
When	O
I	O
want	O
to	O
iterate	O
over	O
a	O
Stream	B-api_mention
using	O
a	O
foreach	O
loop	O
,	O
I	O
have	O
to	O
do	O
something	O
like	O
#	O
pre	O
Am	O
I	O
missing	O
something	O
here	O
?	O
Question	O
-	O
32356762	O
,	O
answer	O
-	O
32370677	O
There	O
is	O
a	O
small	O
overhead	O
in	O
calling	O
methods	O
var	O
an	O
interface	O
rather	O
than	O
directly	O
on	O
an	O
object	O
.	O
This	O
overhead	O
is	O
often	O
no	O
more	O
than	O
1	O
or	O
2	O
processor	O
instructions	O
.	O
The	O
overhead	O
of	O
calling	O
a	O
method	O
is	O
even	O
lower	O
if	O
the	O
JIT	O
knows	O
that	O
the	O
method	O
is	O
final	O
.	O
This	O
is	O
not	O
measurable	O
for	O
most	O
code	O
you	O
and	O
me	O
right	O
,	O
but	O
for	O
the	O
low	O
level	O
methods	O
in	O
java	O
.	O
utils	O
may	O
be	O
used	O
in	O
some	O
code	O
where	O
it	O
is	O
an	O
issue	O
.	O
Also	O
as	O
has	O
been	O
pointed	O
out	O
in	O
other	O
answers	O
,	O
the	O
concrete	O
type	O
of	O
the	O
object	O
that	O
is	O
return	O
(	O
even	O
when	O
hidden	O
behind	O
an	O
interface	O
)	O
effects	O
the	O
performance	O
of	O
code	O
that	O
uses	O
it	O
.	O
This	O
change	O
in	O
performance	O
can	O
be	O
very	O
great	O
,	O
so	O
such	O
an	O
extent	O
that	O
the	O
calling	O
software	O
fails	O
to	O
work	O
.	O
Clearly	O
the	O
authors	O
of	O
java	O
.	O
utils	O
have	O
no	O
way	O
to	O
know	O
what	O
all	O
the	O
software	O
that	O
calls	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
does	O
with	O
the	O
result	O
and	O
no	O
way	O
to	O
re	O
-	O
test	O
this	O
software	O
if	O
they	O
change	O
the	O
implantation	O
of	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
.	O
Therefore	O
they	O
are	O
not	O
going	O
to	O
change	O
the	O
implantation	O
of	O
Collections	B-api_mention
.	I-api_mention
list	I-api_mention
(	I-api_mention
)	I-api_mention
to	O
return	O
a	O
different	O
type	O
of	O
List	B-api_mention
,	O
even	O
if	O
the	O
type	O
system	O
allowed	O
it	O
!	O
When	O
writing	O
your	O
own	O
software	O
,	O
you	O
(	O
hopefully	O
)	O
have	O
automated	O
test	O
that	O
cover	O
all	O
your	O
code	O
and	O
a	O
good	O
understand	O
of	O
how	O
your	O
code	O
interrelates	O
include	O
know	O
where	O
performance	O
is	O
an	O
issue	O
.	O
Being	O
able	O
to	O
make	O
a	O
change	O
to	O
a	O
method	O
,	O
without	O
having	O
to	O
change	O
the	O
callers	O
is	O
of	O
great	O
value	O
while	O
the	O
design	O
of	O
the	O
software	O
is	O
changing	O
.	O
Therefore	O
the	O
two	O
set	O
of	O
trade	O
offs	O
are	O
very	O
different	O
.	O
Question	O
-	O
4576352	O
,	O
answer	O
-	O
4576367	O
using	O
public	O
String	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
will	O
work	O
usage	O
would	O
be	O
str	O
.	B-api_mention
replace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
executing	O
StringLiteral	O
.	B-api_mention
replaceAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
returns	O
:	O
lakjsdf	O
xx	O
Question	O
-	O
31270759	O
Exceptions	O
,	O
especially	O
checked	O
ones	O
,	O
can	O
severely	O
interrupt	O
the	O
flow	O
of	O
program	O
logic	O
when	O
the	O
FP	O
idiom	O
is	O
used	O
in	O
Java	O
8	O
.	O
Here	O
is	O
an	O
arbitrary	O
example	O
:	O
#	O
pre	O
The	O
above	O
code	O
breaks	O
when	O
there	O
'	O
s	O
an	O
exception	O
for	O
an	O
unparseable	O
string	O
.	O
But	O
say	O
I	O
just	O
want	O
to	O
replace	O
that	O
with	O
a	O
default	O
value	O
,	O
much	O
like	O
I	O
can	O
with	O
Optional	B-api_mention
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Of	O
course	O
,	O
this	O
still	O
fails	O
because	O
Optional	B-api_mention
only	O
handles	O
null	O
s	O
.	O
I	O
would	O
like	O
something	O
as	O
follows	O
:	O
Stream	B-api_mention
.	I-api_mention
of	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
:	O
this	O
is	O
a	O
self	O
-	O
answered	O
question	O
.	O
Question	O
-	O
6271417	O
,	O
answer	O
-	O
6271520	O
Try	O
using	O
this	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getCanonicalName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
or	O
this	O
.	B-api_mention
getClass	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
getSimpleName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	O
If	O
it	O
'	O
s	O
an	O
anonymous	O
class	O
,	O
use	O
this	O
.	B-api_mention
getClass	I-api_mention
.	I-api_mention
getSuperclass	I-api_mention
.	I-api_mention
getName	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Question	O
-	O
5031614	O
,	O
answer	O
-	O
5103360	O
We	O
usually	O
have	O
two	O
IDs	O
in	O
our	O
entities	O
:	O
#	O
li	O
Is	O
for	O
persistence	O
layer	O
only	O
(	O
so	O
that	O
persistence	O
provider	O
and	O
database	O
can	O
figure	O
out	O
relationships	O
between	O
objects	O
)	O
.	O
#	O
li	O
Is	O
for	O
our	O
application	O
needs	O
(	O
equals	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
hashCode	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
in	O
particular	O
)	O
Take	O
a	O
look	O
:	O
#	O
pre	O
EDIT	O
:	O
to	O
clarify	O
my	O
point	O
regarding	O
calls	O
to	O
setUuid	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Here	O
'	O
s	O
a	O
typical	O
scenario	O
:	O
#	O
pre	O
When	O
I	O
run	O
my	O
tests	O
and	O
see	O
the	O
log	O
output	O
I	O
fix	O
the	O
problem	O
:	O
#	O
pre	O
Alternatively	O
,	O
one	O
can	O
provide	O
a	O
separate	O
constructor	O
:	O
#	O
pre	O
So	O
my	O
example	O
would	O
look	O
like	O
this	O
:	O
#	O
pre	O
I	O
use	O
a	O
default	O
constructor	O
and	O
a	O
setter	O
,	O
but	O
you	O
may	O
find	O
two	O
-	O
constructors	O
approach	O
more	O
suitable	O
for	O
you	O
.	O
Question	O
-	O
4812570	O
How	O
can	O
I	O
get	O
the	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
store	O
it	O
into	O
a	O
String	B-api_mention
variable	O
?	O
I	O
want	O
to	O
use	O
the	O
string	O
generated	O
by	O
e	O
.	B-api_mention
printStackTrace	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
later	O
in	O
my	O
program	O
.	O
I	O
'	O
m	O
still	O
new	O
to	O
Java	O
so	O
I	O
'	O
m	O
not	O
too	O
familiar	O
with	O
StringWriter	B-api_mention
that	O
I	O
think	O
will	O
be	O
the	O
solution	O
.	O
Or	O
if	O
you	O
have	O
any	O
other	O
ideas	O
please	O
let	O
me	O
know	O
.	O
Thanks	O
Question	O
-	O
31316581	O
,	O
answer	O
-	O
31327420	O
If	O
type	O
inference	O
produces	O
a	O
single	O
upper	O
bound	O
for	O
a	O
type	O
variable	O
,	O
typically	O
the	O
upper	O
bound	O
is	O
chosen	O
as	O
the	O
solution	O
.	O
For	O
example	O
,	O
if	O
T	O
<	O
<	O
Number	O
,	O
the	O
solution	O
is	O
T	O
=	O
Number	O
.	O
Although	O
Integer	B-api_mention
,	O
Float	B-api_mention
etc	O
.	O
could	O
also	O
satisfy	O
the	O
constraint	O
,	O
there	O
'	O
s	O
no	O
good	O
reason	O
to	O
choose	O
them	O
over	O
Number	B-api_mention
.	O
That	O
was	O
also	O
the	O
case	O
for	O
throws	O
T	O
in	O
java	O
5	O
-	O
7	O
:	O
T	O
<	O
<	O
Throwable	B-api_mention
=	O
>	O
T	O
=	O
Throwable	B-api_mention
.	O
(	O
Sneaky	O
throw	O
solutions	O
all	O
had	O
explicit	O
<	O
RuntimeException	B-api_mention
>	O
type	O
arguments	O
,	O
otherwise	O
<	O
Throwable	O
>	O
is	O
inferred	O
.	O
)	O
In	O
java8	O
,	O
with	O
the	O
introduction	O
of	O
lambda	O
,	O
this	O
becomes	O
problematic	O
.	O
Consider	O
this	O
case	O
#	O
pre	O
If	O
we	O
invoke	O
with	O
an	O
empty	O
lambda	O
,	O
what	O
would	O
T	O
be	O
inferred	O
as	O
?	O
invoke	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
The	O
only	O
constraint	O
on	O
T	O
is	O
an	O
upper	O
bound	O
Throwable	B-api_mention
.	O
In	O
earlier	O
stage	O
of	O
java8	O
,	O
T	O
=	O
Throwable	B-api_mention
would	O
be	O
inferred	O
.	O
See	O
this	O
report	O
I	O
filed	O
.	O
But	O
that	O
is	O
pretty	O
silly	O
,	O
to	O
infer	O
Throwable	B-api_mention
,	O
a	O
checked	O
exception	O
,	O
out	O
of	O
an	O
empty	O
block	O
.	O
A	O
solution	O
was	O
proposed	O
in	O
the	O
report	O
(	O
which	O
is	O
apparently	O
adopted	O
by	O
JLS	O
)	O
-	O
#	O
pre	O
i	O
.	O
e	O
.	O
if	O
the	O
upper	O
bound	O
is	O
Exception	B-api_mention
or	O
Throwable	B-api_mention
,	O
choose	O
RuntimeException	B-api_mention
as	O
the	O
solution	O
.	O
In	O
this	O
case	O
,	O
there	O
is	O
a	O
good	O
reason	O
to	O
choose	O
a	O
particular	O
subtype	O
of	O
the	O
upper	O
bound	O
.	O
Question	O
-	O
12576156	O
,	O
answer	O
-	O
12576394	O
By	O
specifying	O
the	O
the	O
my	O
.	O
list	O
.	O
of	O
.	O
strings	O
=	O
ABC	O
,	O
CDE	O
,	O
EFG	O
in	O
.	O
properties	O
file	O
and	O
using	O
@	O
Value	O
(	O
args	O
)	O
private	O
String	O
[	O
]	O
myString	O
;	O
You	O
can	O
get	O
the	O
arrays	O
of	O
strings	O
.	O
And	O
using	O
CollectionUtils	B-api_mention
.	I-api_mention
addAll	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
you	O
can	O
get	O
the	O
list	O
of	O
strings	O
.	O
Question	O
-	O
5778658	O
,	O
answer	O
-	O
5778863	O
An	O
OutputStream	B-api_mention
is	O
one	O
where	O
you	O
write	O
data	O
to	O
.	O
If	O
some	O
module	O
exposes	O
an	O
OutputStream	B-api_mention
,	O
the	O
expectation	O
is	O
that	O
there	O
is	O
something	O
at	O
the	O
other	O
end	O
that	O
is	O
reading	O
.	O
Something	O
that	O
exposes	O
an	O
InputStream	B-api_mention
on	O
the	O
other	O
hand	O
is	O
indicating	O
that	O
you	O
will	O
need	O
to	O
listen	O
to	O
this	O
stream	O
,	O
and	O
there	O
will	O
be	O
data	O
that	O
you	O
can	O
read	O
.	O
So	O
it	O
is	O
possible	O
to	O
connect	O
an	O
InputStream	B-api_mention
to	O
an	O
OutputStream	B-api_mention
InputStream	I-api_mention
-	O
-	O
-	O
-	O
read	O
-	O
-	O
-	O
>	O
intermediateBytes	O
[	O
n	O
]	O
-	O
-	O
-	O
-	O
write	O
-	O
-	O
-	O
-	O
>	O
OutputStream	B-api_mention
As	O
someone	O
metioned	O
,	O
this	O
is	O
what	O
the	O
copy	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
from	O
IOUtils	B-api_mention
lets	O
you	O
do	O
.	O
It	O
does	O
not	O
make	O
sense	O
to	O
go	O
the	O
other	O
way	O
.	O
.	O
.	O
hopefully	O
this	O
makes	O
some	O
sense	O
UPDATE	O
:	O
Of	O
course	O
the	O
more	O
I	O
think	O
of	O
this	O
,	O
the	O
more	O
I	O
can	O
see	O
how	O
this	O
actually	O
would	O
be	O
a	O
requirement	O
.	O
I	O
know	O
some	O
of	O
the	O
comments	O
mentioned	O
Piped	O
input	O
/	O
ouput	O
streams	O
,	O
but	O
there	O
is	O
another	O
possibility	O
.	O
If	O
the	O
output	O
stream	O
that	O
is	O
exposed	O
is	O
a	O
ByteArrayOutputStream	B-api_mention
,	O
then	O
you	O
can	O
always	O
get	O
the	O
full	O
contents	O
by	O
calling	O
the	O
toByteArray	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
method	O
.	O
Then	O
you	O
can	O
create	O
an	O
input	O
stream	O
wrapper	O
by	O
using	O
the	O
ByteArrayInputStream	B-api_mention
sub	O
-	O
class	O
.	O
These	O
two	O
are	O
pseudo	O
-	O
streams	O
,	O
they	O
both	O
basically	O
just	O
wrap	O
an	O
array	O
of	O
bytes	O
.	O
Using	O
the	O
streams	O
this	O
way	O
,	O
therefore	O
,	O
is	O
technically	O
possible	O
,	O
but	O
to	O
me	O
it	O
is	O
still	O
very	O
strange	O
.	O
.	O
.	O
Question	O
-	O
20001427	O
,	O
answer	O
-	O
20001866	O
Usually	O
,	O
one	O
would	O
call	O
the	O
reduce	O
method	O
using	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
as	O
follows	O
:	O
#	O
pre	O
That	O
requires	O
a	O
lot	O
of	O
syntax	O
for	O
just	O
calling	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
.	O
That	O
'	O
s	O
where	O
lambda	O
expressions	O
come	O
into	O
play	O
.	O
Since	O
Java	O
8	O
it	O
is	O
allowed	O
to	O
do	O
the	O
same	O
thing	O
in	O
a	O
much	O
shorter	O
way	O
:	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
How	O
does	O
this	O
work	O
?	O
The	O
java	O
compiler	O
"	O
detects	O
"	O
,	O
that	O
you	O
want	O
to	O
implement	O
a	O
method	O
that	O
accepts	O
two	O
int	O
s	O
and	O
returns	O
one	O
int	O
.	O
This	O
is	O
equivalent	O
to	O
the	O
formal	O
parameters	O
of	O
the	O
one	O
and	O
only	O
method	O
of	O
interface	O
IntBinaryOperator	B-api_mention
(	O
the	O
parameter	O
of	O
method	O
reduce	O
you	O
want	O
to	O
call	O
)	O
.	O
So	O
the	O
compiler	O
does	O
the	O
rest	O
for	O
you	O
-	O
it	O
just	O
assumes	O
you	O
want	O
to	O
implement	O
IntBinaryOperator	B-api_mention
.	O
But	O
as	O
Math	B-api_mention
.	I-api_mention
max	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
itself	O
fulfills	O
the	O
formal	O
requirements	O
of	O
IntBinaryOperator	B-api_mention
,	O
it	O
can	O
be	O
used	O
directly	O
.	O
Because	O
Java	O
7	O
does	O
not	O
have	O
any	O
syntax	O
that	O
allows	O
a	O
method	O
itself	O
to	O
be	O
passed	O
as	O
an	O
argument	O
(	O
you	O
can	O
only	O
pass	O
method	O
results	O
,	O
but	O
never	O
method	O
references	O
)	O
,	O
the	O
:	O
:	O
syntax	O
was	O
introduced	O
in	O
Java	O
8	O
to	O
reference	O
methods	O
:	O
reduce	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Note	O
that	O
this	O
will	O
be	O
interpreted	O
by	O
the	O
compiler	O
,	O
not	O
by	O
the	O
JVM	O
at	O
runtime	O
!	O
Although	O
it	O
produces	O
different	O
bytecodes	O
for	O
all	O
three	O
code	O
snippets	O
,	O
they	O
are	O
semantically	O
equal	O
,	O
so	O
the	O
last	O
two	O
can	O
be	O
considered	O
to	O
be	O
short	O
(	O
and	O
probably	O
more	O
efficient	O
)	O
versions	O
of	O
the	O
IntBinaryOperator	B-api_mention
implementation	O
above	O
!	O
(	O
See	O
also	O
Translation	O
of	O
Lambda	O
Expressions	O
)	O
Question	O
-	O
28319064	O
,	O
answer	O
-	O
29000802	O
There	O
is	O
a	O
third	O
option	O
-	O
using	O
stream	O
(	O
args	O
)	O
.	B-api_mention
toArray	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
-	O
see	O
comments	O
under	O
why	O
didn	O
'	O
t	O
stream	O
have	O
a	O
toList	B-api_mention
method	O
.	O
It	O
turns	O
out	O
to	O
be	O
slower	O
than	O
forEach	B-api_mention
(	I-api_mention
)	I-api_mention
or	O
collect	B-api_mention
(	I-api_mention
)	I-api_mention
,	O
and	O
less	O
expressive	O
.	O
It	O
might	O
be	O
optimised	O
in	O
later	O
JDK	O
builds	O
,	O
so	O
adding	O
it	O
here	O
just	O
in	O
case	O
.	O
assuming	O
List	B-api_mention
<	I-api_mention
T	I-api_mention
>	I-api_mention
myFinalList	O
=	O
Arrays	B-api_mention
.	I-api_mention
asList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
with	O
a	O
micro	O
-	O
micro	O
benchmark	O
,	O
1M	O
entries	O
,	O
20	O
%	O
nulls	O
and	O
simple	O
transform	O
in	O
doSomething	O
(	O
)	O
#	O
pre	O
the	O
results	O
are	O
parallel	O
:	O
#	O
pre	O
sequential	O
:	O
#	O
pre	O
parallel	O
without	O
nulls	O
and	O
filter	O
(	O
so	O
the	O
stream	O
is	O
SIZED	O
)	O
:	O
toArrays	B-api_mention
has	O
the	O
best	O
performance	O
in	O
such	O
case	O
,	O
and	O
.	B-api_mention
forEach	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
fails	O
with	O
"	O
indexOutOfBounds	O
"	O
on	O
the	O
recepient	O
ArrayList	B-api_mention
,	O
had	O
to	O
replace	O
with	O
.	B-api_mention
forEachOrdered	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
pre	O
Question	O
-	O
13291076	O
,	O
answer	O
-	O
13291108	O
Use	O
name	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
you	O
want	O
to	O
make	O
a	O
comparison	O
or	O
use	O
the	O
hardcoded	O
value	O
for	O
some	O
internal	O
use	O
in	O
your	O
code	O
.	O
Use	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
when	O
you	O
want	O
to	O
present	O
information	O
to	O
a	O
user	O
(	O
including	O
a	O
developper	O
looking	O
at	O
a	O
log	O
)	O
.	O
Never	O
rely	O
in	O
your	O
code	O
on	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
giving	O
a	O
specific	O
value	O
.	O
Never	O
test	O
it	O
against	O
a	O
specific	O
string	O
.	O
If	O
your	O
code	O
breaks	O
when	O
someone	O
correctly	O
changes	O
the	O
toString	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
return	O
,	O
then	O
it	O
was	O
already	O
broken	O
.	O
From	O
the	O
javadoc	O
(	O
emphasis	O
mine	O
)	O
:	O
#	O
blockquote	O
Question	O
-	O
11821801	O
,	O
answer	O
-	O
36827191	O
From	O
oracle	O
documentation	O
page	O
about	O
ReentrantLock	B-api_mention
:	O
#	O
blockquote	O
#	O
li	O
A	O
ReentrantLock	B-api_mention
is	O
owned	O
by	O
the	O
thread	O
last	O
successfully	O
locking	O
,	O
but	O
not	O
yet	O
unlocking	O
it	O
.	O
A	O
thread	O
invoking	O
lock	O
will	O
return	O
,	O
successfully	O
acquiring	O
the	O
lock	O
,	O
when	O
the	O
lock	O
is	O
not	O
owned	O
by	O
another	O
thread	O
.	O
The	O
method	O
will	O
return	O
immediately	O
if	O
the	O
current	O
thread	O
already	O
owns	O
the	O
lock	O
.	O
#	O
li	O
The	O
constructor	O
for	O
this	O
class	O
accepts	O
an	O
optional	O
fairness	O
parameter	O
.	O
When	O
set	O
true	O
,	O
under	O
contention	O
,	O
locks	O
favor	O
granting	O
access	O
to	O
the	O
longest	O
-	O
waiting	O
thread	O
.	O
Otherwise	O
this	O
lock	O
does	O
not	O
guarantee	O
any	O
particular	O
access	O
order	O
.	O
ReentrantLock	B-api_mention
key	O
features	O
as	O
per	O
this	O
article	O
#	O
li	O
Ability	O
to	O
lock	O
interruptibly	O
.	O
#	O
li	O
Ability	O
to	O
timeout	O
while	O
waiting	O
for	O
lock	O
.	O
#	O
li	O
Power	O
to	O
create	O
fair	O
lock	O
.	O
#	O
li	O
API	O
to	O
get	O
list	O
of	O
waiting	O
thread	O
for	O
lock	O
.	O
#	O
li	O
Flexibility	O
to	O
try	O
for	O
lock	O
without	O
blocking	O
.	O
You	O
can	O
use	O
ReentrantReadWriteLock	B-api_mention
.	I-api_mention
ReadLock	I-api_mention
,	O
ReentrantReadWriteLock	B-api_mention
.	I-api_mention
WriteLock	I-api_mention
to	O
further	O
acquire	O
control	O
on	O
granular	O
locking	O
on	O
read	O
and	O
write	O
operations	O
.	O
Have	O
a	O
look	O
at	O
this	O
article	O
by	O
Benjamen	O
on	O
usage	O
of	O
different	O
type	O
of	O
ReentrantLocks	B-api_mention
Question	O
-	O
8098953	O
,	O
answer	O
-	O
8103083	O
The	O
first	O
thing	O
to	O
keep	O
in	O
mind	O
is	O
that	O
Java	O
ternary	O
operators	O
have	O
a	O
"	O
type	O
"	O
,	O
and	O
that	O
this	O
is	O
what	O
the	O
compiler	O
will	O
determine	O
and	O
consider	O
no	O
matter	O
what	O
the	O
actual	O
/	O
real	O
types	O
of	O
the	O
second	O
or	O
third	O
parameter	O
are	O
.	O
Depending	O
on	O
several	O
factors	O
the	O
ternary	O
operator	O
type	O
is	O
determined	O
in	O
different	O
ways	O
as	O
illustrated	O
in	O
the	O
Java	O
Language	O
Specification	O
15	O
.	O
26	O
In	O
the	O
question	O
above	O
we	O
should	O
consider	O
the	O
last	O
case	O
:	O
#	O
blockquote	O
This	O
is	O
by	O
far	O
the	O
most	O
complex	O
case	O
once	O
you	O
take	O
a	O
look	O
at	O
applying	O
capture	O
conversion	O
(	O
Â§	O
5	O
.	O
1	O
.	O
10	O
)	O
and	O
most	O
of	O
all	O
at	O
lub	O
(	O
T1	O
,	O
T2	O
)	O
.	O
In	O
plain	O
English	O
and	O
after	O
an	O
extreme	O
simplification	O
we	O
can	O
describe	O
the	O
process	O
as	O
calculating	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
(	O
yes	O
,	O
think	O
of	O
the	O
LCM	O
)	O
of	O
the	O
second	O
and	O
third	O
parameters	O
.	O
This	O
will	O
give	O
us	O
the	O
ternary	O
operator	O
"	O
type	O
"	O
.	O
Again	O
,	O
what	O
I	O
just	O
said	O
is	O
an	O
extreme	O
simplification	O
(	O
consider	O
classes	O
that	O
implement	O
multiple	O
common	O
interfaces	O
)	O
.	O
For	O
example	O
,	O
if	O
you	O
try	O
the	O
following	O
:	O
#	O
pre	O
You	O
'	O
ll	O
notice	O
that	O
resulting	O
type	O
of	O
the	O
conditional	O
expression	O
is	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
Date	I-api_mention
since	O
it	O
'	O
s	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
for	O
the	O
Timestamp	B-api_mention
/	O
Time	B-api_mention
pair	O
.	O
Since	O
null	O
can	O
be	O
autoboxed	O
to	O
anything	O
,	O
the	O
"	O
Least	O
Common	O
Superclass	O
"	O
is	O
the	O
Integer	O
class	O
and	O
this	O
will	O
be	O
the	O
return	O
type	O
of	O
the	O
conditional	O
expression	O
(	O
ternary	O
operator	O
)	O
above	O
.	O
The	O
return	O
value	O
will	O
then	O
be	O
a	O
null	O
pointer	O
of	O
type	O
Integer	B-api_mention
and	O
that	O
is	O
what	O
will	O
be	O
returned	O
by	O
the	O
ternary	O
operator	O
.	O
At	O
runtime	O
,	O
when	O
the	O
Java	O
Virtual	O
Machine	O
unboxes	O
the	O
Integer	B-api_mention
a	O
NullPointerException	B-api_mention
is	O
thrown	O
.	O
This	O
happens	O
because	O
the	O
JVM	O
attempts	O
to	O
invoke	O
the	O
function	O
null	O
.	B-api_mention
intValue	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
where	O
null	O
is	O
the	O
result	O
of	O
autoboxing	O
.	O
In	O
my	O
opinion	O
(	O
and	O
since	O
my	O
opinion	O
is	O
not	O
in	O
the	O
Java	O
Language	O
Specification	O
many	O
people	O
will	O
find	O
it	O
wrong	O
anyway	O
)	O
the	O
compiler	O
does	O
a	O
poor	O
job	O
in	O
evaluating	O
the	O
expression	O
in	O
your	O
question	O
.	O
Given	O
that	O
you	O
wrote	O
true	O
?	O
param1	O
:	O
param2	O
the	O
compiler	O
should	O
determine	O
right	O
away	O
that	O
the	O
first	O
parameter	O
-	O
null	O
-	O
will	O
be	O
returned	O
and	O
it	O
should	O
generate	O
a	O
compiler	O
error	O
.	O
This	O
is	O
somewhat	O
similar	O
to	O
when	O
you	O
write	O
while	O
(	O
args	O
)	O
{	O
}	O
etc	O
.	O
.	O
.	O
and	O
the	O
compiler	O
complains	O
about	O
the	O
code	O
underneath	O
the	O
loop	O
and	O
flags	O
it	O
with	O
Unreachable	O
Statements	O
.	O
Your	O
second	O
case	O
is	O
pretty	O
straightforward	O
and	O
this	O
answer	O
is	O
already	O
too	O
long	O
.	O
.	O
.	O
;	O
)	O
CORRECTION	O
:	O
After	O
another	O
analysis	O
I	O
believe	O
that	O
I	O
was	O
wrong	O
to	O
say	O
that	O
a	O
null	O
value	O
can	O
be	O
boxed	O
/	O
autoboxed	O
to	O
anything	O
.	O
Talking	O
about	O
the	O
class	O
Integer	O
,	O
explicit	O
boxing	O
consists	O
in	O
invoking	O
the	O
new	O
Integer	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
constructor	O
or	O
maybe	O
the	O
Integer	B-api_mention
.	I-api_mention
valueOf	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
(	O
I	O
found	O
this	O
version	O
somewhere	O
)	O
.	O
The	O
former	O
would	O
throw	O
a	O
NumberFormatException	B-api_mention
(	O
and	O
this	O
does	O
not	O
happen	O
)	O
while	O
the	O
second	O
would	O
just	O
not	O
make	O
sense	O
since	O
an	O
int	O
cannot	O
be	O
null	O
.	O
.	O
.	O
Question	O
-	O
21488056	O
,	O
answer	O
-	O
35074360	O
I	O
have	O
written	O
a	O
complete	O
utility	O
class	O
(	O
inspired	O
by	O
Askar	O
'	O
s	O
proposal	O
)	O
that	O
can	O
take	O
Java	O
8	O
lambda	O
expression	O
and	O
turn	O
them	O
(	O
if	O
applicable	O
)	O
into	O
any	O
typed	O
standard	O
Java	O
8	O
lambda	O
defined	O
in	O
the	O
package	O
java	B-api_mention
.	I-api_mention
util	I-api_mention
.	I-api_mention
function	I-api_mention
.	O
You	O
can	O
for	O
example	O
do	O
:	O
#	O
li	O
asPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
#	O
li	O
asBiPredicate	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
negate	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
Because	O
there	O
would	O
be	O
numerous	O
ambiguities	O
if	O
all	O
the	O
static	O
methods	O
would	O
be	O
named	O
just	O
as	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
I	O
opted	O
to	O
call	O
the	O
method	O
"	O
as	O
"	O
followed	O
by	O
the	O
returned	O
type	O
.	O
This	O
gives	O
us	O
full	O
control	O
of	O
the	O
lambda	O
interpretation	O
.	O
Below	O
is	O
the	O
first	O
part	O
of	O
the	O
(	O
somewhat	O
large	O
)	O
utility	O
class	O
revealing	O
the	O
pattern	O
used	O
.	O
Have	O
a	O
look	O
at	O
the	O
complete	O
class	O
here	O
(	O
at	O
gist	O
)	O
.	O
#	O
pre	O
Question	O
-	O
26548660	O
,	O
answer	O
-	O
26548894	O
You	O
can	O
use	O
a	O
Callback	B-api_mention
to	O
get	O
onSuccess	B-api_mention
and	O
onError	B-api_mention
events	O
.	O
Just	O
add	O
a	O
new	O
Callback	B-api_mention
to	O
your	O
request	O
like	O
so	O
:	O
Picasso	B-api_mention
.	I-api_mention
with	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
load	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
into	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
Then	O
you	O
can	O
perform	O
any	O
alterations	O
and	O
modifications	O
in	O
the	O
onSuccess	B-api_mention
callback	O
.	O
Question	O
-	O
22694884	O
,	O
answer	O
-	O
22695031	O
Technically	O
there	O
'	O
s	O
an	O
ugly	O
'	O
workaround	O
'	O
that	O
involves	O
peek	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
and	O
an	O
AtomicInteger	B-api_mention
,	O
but	O
really	O
you	O
shouldn	O
'	O
t	O
be	O
using	O
that	O
.	O
What	O
I	O
do	O
in	O
these	O
cases	O
is	O
just	O
collecting	O
it	O
in	O
a	O
list	O
,	O
like	O
this	O
:	O
#	O
pre	O
I	O
am	O
not	O
aware	O
of	O
a	O
way	O
to	O
do	O
this	O
in	O
the	O
API	O
,	O
meanwhile	O
I	O
will	O
work	O
on	O
another	O
example	O
involving	O
a	O
custom	O
element	O
.	O
Update	O
,	O
You	O
should	O
create	O
your	O
own	O
Collector	B-api_mention
for	O
this	O
:	O
#	O
pre	O
What	O
it	O
does	O
is	O
:	O
#	O
li	O
It	O
mimicks	O
the	O
Collectors	B-api_mention
.	I-api_mention
toList	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
collector	O
.	O
#	O
li	O
It	O
applies	O
an	O
extra	O
finisher	O
at	O
the	O
end	O
,	O
that	O
throws	O
an	O
exception	O
,	O
or	O
if	O
no	O
exception	O
,	O
returns	O
the	O
first	O
element	O
of	O
the	O
list	O
.	O
Used	O
as	O
:	O
User	B-api_mention
resultUser	O
=	O
users	O
.	B-api_mention
stream	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
filter	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
.	I-api_mention
collect	I-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
;	O
You	O
can	O
then	O
customize	O
this	O
singletonCollector	B-api_mention
as	O
much	O
as	O
you	O
want	O
,	O
for	O
example	O
give	O
the	O
exception	O
as	O
argument	O
in	O
the	O
constructor	O
,	O
tweak	O
it	O
to	O
allow	O
two	O
values	O
,	O
and	O
more	O
.	O
New	O
update	O
,	O
I	O
revised	O
my	O
old	O
answer	O
once	O
more	O
for	O
singletonCollector	B-api_mention
(	I-api_mention
args	I-api_mention
)	I-api_mention
,	O
it	O
can	O
actually	O
be	O
obtained	O
like	O
this	O
:	O
#	O
pre	O
Question	O
-	O
28276423	O
,	O
answer	O
-	O
28276469	O
It	O
will	O
be	O
fine	O
if	O
you	O
only	O
close	O
the	O
last	O
stream	O
-	O
the	O
close	O
call	O
will	O
be	O
send	O
to	O
the	O
underlying	O
streams	O
,	O
too	O
.	O
