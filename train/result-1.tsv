Question	O	O
-	O	O
5192512	O	O
,	O	O
answer	O	O
-	O	O
22694891	O	O
I	O	O
think	O	O
many	O	O
of	O	O
the	O	O
answers	O	O
here	O	O
may	O	O
be	O	O
missing	O	O
a	O	O
quality	O	O
method	O	O
included	O	O
in	O	O
StringBuilder	B-api_mention	B-api_mention
:	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
know	O	O
this	O	O
is	O	O
a	O	O
late	O	O
reply	O	O
;	O	O
however	O	O
,	O	O
this	O	O
should	O	O
be	O	O
made	O	O
known	O	O
(	O	O
and	O	O
explained	O	O
a	O	O
bit	O	O
more	O	O
thoroughly	O	O
)	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
say	O	O
you	O	O
have	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
table	O	O
-	O	O
which	O	O
you	O	O
wish	O	O
to	O	O
modify	O	O
,	O	O
dynamically	O	O
,	O	O
throughout	O	O
your	O	O
program	O	O
(	O	O
one	O	O
I	O	O
am	O	O
working	O	O
on	O	O
right	O	O
now	O	O
does	O	O
this	O	O
)	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
StringBuilder	B-api_mention	B-api_mention
table	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
If	O	O
you	O	O
are	O	O
looping	O	O
through	O	O
the	O	O
method	O	O
and	O	O
alter	O	O
the	O	O
content	O	O
,	O	O
use	O	O
the	O	O
content	O	O
,	O	O
then	O	O
wish	O	O
to	O	O
discard	O	O
the	O	O
content	O	O
to	O	O
"	O	O
clean	O	O
up	O	O
"	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
for	O	O
the	O	O
next	O	O
iteration	O	O
,	O	O
you	O	O
can	O	O
delete	O	O
it	O	O
'	O	O
s	O	O
contents	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
table	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
start	O	O
and	O	O
end	O	O
being	O	O
the	O	O
indices	O	O
of	O	O
the	O	O
chars	O	O
you	O	O
wish	O	O
to	O	O
remove	O	O
.	O	O
Don	O	O
'	O	O
t	O	O
know	O	O
the	O	O
length	O	O
in	O	O
chars	O	O
and	O	O
want	O	O
to	O	O
delete	O	O
the	O	O
whole	O	O
thing	O	O
?	O	O
table	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
NOW	O	O
,	O	O
for	O	O
the	O	O
kicker	O	O
.	O	O
StringBuilders	B-api_mention	B-api_mention
,	O	O
as	O	O
mentioned	O	O
previously	O	O
,	O	O
take	O	O
a	O	O
lot	O	O
of	O	O
overhead	O	O
when	O	O
altered	O	O
frequently	O	O
(	O	O
and	O	O
can	O	O
cause	O	O
safety	O	O
issues	O	O
with	O	O
regard	O	O
to	O	O
threading	O	O
)	O	O
;	O	O
therefore	O	O
,	O	O
use	O	O
StringBuffer	B-api_mention	B-api_mention
-	O	O
same	O	O
as	O	O
StringBuilder	B-api_mention	B-api_mention
(	O	O
with	O	O
a	O	O
few	O	O
exceptions	O	O
)	O	O
-	O	O
if	O	O
your	O	O
StringBuilder	B-api_mention	B-api_mention
is	O	O
used	O	O
for	O	O
the	O	O
purpose	O	O
of	O	O
interfacing	O	O
with	O	O
the	O	O
user	O	O
.	O	O
Question	O	O
-	O	O
6416706	O	O
,	O	O
answer	O	O
-	O	O
6416800	O	O
With	O	O
Guava	O	O
you	O	O
can	O	O
use	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
Iterable	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Sets	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newHashSet	I-api_mention	I-api_mention
(	I-api_mention	O
Iterable	I-api_mention	B-api_mention
)	I-api_mention	O
,	O	O
among	O	O
other	O	O
similar	O	O
methods	O	O
.	O	O
This	O	O
will	O	O
of	O	O
course	O	O
copy	O	O
all	O	O
the	O	O
elements	O	O
in	O	O
to	O	O
memory	O	O
.	O	O
If	O	O
that	O	O
isn	O	O
'	O	O
t	O	O
acceptable	O	O
,	O	O
I	O	O
think	O	O
your	O	O
code	O	O
that	O	O
works	O	O
with	O	O
these	O	O
ought	O	O
to	O	O
take	O	O
Iterable	B-api_mention	B-api_mention
rather	O	O
than	O	O
Collection	B-api_mention	B-api_mention
.	O	O
Guava	O	O
also	O	O
happens	O	O
to	O	O
provide	O	O
convenient	O	O
methods	O	O
for	O	O
doing	O	O
things	O	O
you	O	O
can	O	O
do	O	O
on	O	O
a	O	O
Collection	B-api_mention	B-api_mention
using	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
such	O	O
as	O	O
Iterables	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Iterables	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
contains	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
,	O	O
but	O	O
the	O	O
performance	O	O
implications	O	O
are	O	O
more	O	O
obvious	O	O
.	O	O
Question	O	O
-	O	O
7488643	O	O
,	O	O
answer	O	O
-	O	O
7488710	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
returns	O	O
a	O	O
fixed	O	O
-	O	O
size	O	O
List	B-api_mention	B-api_mention
backed	O	O
by	O	O
the	O	O
array	O	O
.	O	O
If	O	O
you	O	O
want	O	O
a	O	O
normal	O	O
mutable	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
ArrayList	I-api_mention	I-api_mention
you	O	O
need	O	O
to	O	O
do	O	O
this	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Or	O	O
,	O	O
using	O	O
Guava	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Using	O	O
a	O	O
Splitter	B-api_mention	B-api_mention
gives	O	O
you	O	O
more	O	O
flexibility	O	O
in	O	O
how	O	O
you	O	O
split	O	O
the	O	O
string	O	O
and	O	O
gives	O	O
you	O	O
the	O	O
ability	O	O
to	O	O
,	O	O
for	O	O
example	O	O
,	O	O
skip	O	O
empty	O	O
strings	O	O
in	O	O
the	O	O
results	O	O
and	O	O
trim	O	O
results	O	O
.	O	O
It	O	O
also	O	O
has	O	O
less	O	O
weird	O	O
behavior	O	O
than	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
as	O	O
well	O	O
as	O	O
not	O	O
requiring	O	O
you	O	O
to	O	O
split	O	O
by	O	O
regex	O	O
(	O	O
that	O	O
'	O	O
s	O	O
just	O	O
one	O	O
option	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
22182669	O	O
,	O	O
answer	O	O
-	O	O
22222274	O	O
StackOverflowError	B-api_mention	B-api_mention
occurs	O	O
due	O	O
to	O	O
an	O	O
application	O	O
recurses	O	O
too	O	O
deeply	O	O
(	O	O
This	O	O
is	O	O
not	O	O
an	O	O
answer	O	O
you	O	O
are	O	O
expecting	O	O
)	O	O
.	O	O
Now	O	O
other	O	O
things	O	O
to	O	O
happen	O	O
to	O	O
StackOverflowError	B-api_mention	B-api_mention
is	O	O
keep	O	O
calling	O	O
methods	O	O
from	O	O
methods	O	O
till	O	O
you	O	O
get	O	O
StackOverflowError	B-api_mention	B-api_mention
,	O	O
but	O	O
nobody	O	O
can	O	O
program	O	O
to	O	O
get	O	O
StackOverflowError	B-api_mention	B-api_mention
and	O	O
even	O	O
if	O	O
those	O	O
programmer	O	O
are	O	O
doing	O	O
so	O	O
then	O	O
they	O	O
are	O	O
not	O	O
following	O	O
coding	O	O
standards	O	O
for	O	O
cyclomatic	O	O
complixity	O	O
that	O	O
every	O	O
programmer	O	O
has	O	O
to	O	O
understand	O	O
while	O	O
programming	O	O
.	O	O
Such	O	O
reason	O	O
for	O	O
'	B-api_mention	O
StackOverflowError	I-api_mention	B-api_mention
'	I-api_mention	O
will	O	O
require	O	O
much	O	O
time	O	O
to	O	O
rectify	O	O
it	O	O
.	O	O
But	O	O
unknowingly	O	O
coding	O	O
one	O	O
line	O	O
or	O	O
two	O	O
line	O	O
which	O	O
causes	O	O
StackOverflowError	B-api_mention	B-api_mention
is	O	O
understandable	O	O
and	O	O
JVM	O	O
throws	O	O
that	O	O
and	O	O
we	O	O
can	O	O
rectify	O	O
it	O	O
instantly	O	O
.	O	O
Here	O	O
is	O	O
my	O	O
answer	O	O
with	O	O
picture	O	O
for	O	O
some	O	O
other	O	O
question	O	O
.	O	O
Question	O	O
-	O	O
15202997	O	O
,	O	O
answer	O	O
-	O	O
29527145	O	O
Adding	O	O
local	O	O
classes	O	O
,	O	O
lambdas	O	O
and	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
complete	O	O
the	O	O
previous	O	O
two	O	O
answers	O	O
.	O	O
Further	O	O
,	O	O
I	O	O
add	O	O
arrays	O	O
of	O	O
lambdas	O	O
and	O	O
arrays	O	O
of	O	O
anonymous	O	O
classes	O	O
(	O	O
which	O	O
do	O	O
not	O	O
make	O	O
any	O	O
sense	O	O
in	O	O
practice	O	O
though	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
the	O	O
full	O	O
output	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
,	O	O
here	O	O
are	O	O
the	O	O
rules	O	O
.	O	O
First	O	O
,	O	O
lets	O	O
start	O	O
with	O	O
primitive	O	O
types	O	O
and	O	O
void	O	O
:	O	O
#	O	O
li	O	O
If	O	O
the	O	O
class	O	O
object	O	O
represents	O	O
a	O	O
primitive	O	O
type	O	O
or	O	O
void	O	O
,	O	O
all	O	O
the	O	O
four	O	O
methods	O	O
simply	O	O
returns	O	O
its	O	O
name	O	O
.	O	O
Now	O	O
the	O	O
rules	O	O
for	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
li	O	O
Every	O	O
non	O	O
-	O	O
lambda	O	O
and	O	O
non	O	O
-	O	O
array	O	O
class	O	O
or	O	O
interface	O	O
(	O	O
i	O	O
.	O	O
e	O	O
,	O	O
top	O	O
-	O	O
level	O	O
,	O	O
nested	O	O
,	O	O
inner	O	O
,	O	O
local	O	O
and	O	O
anonymous	O	O
)	O	O
has	O	O
a	O	O
name	O	O
(	O	O
which	O	O
is	O	O
returned	O	O
by	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
that	O	O
is	O	O
the	O	O
package	O	O
name	O	O
followed	O	O
by	O	O
a	O	O
dot	O	O
(	O	O
if	O	O
there	O	O
is	O	O
a	O	O
package	O	O
)	O	O
,	O	O
followed	O	O
by	O	O
the	O	O
name	O	O
of	O	O
its	O	O
class	O	O
-	O	O
file	O	O
as	O	O
generated	O	O
by	O	O
the	O	O
compiler	O	O
(	O	O
whithout	O	O
the	O	O
suffix	O	O
.	O	B-api_mention
class	O	I-api_mention
)	O	O
.	O	O
If	O	O
there	O	O
is	O	O
no	O	O
package	O	O
,	O	O
it	O	O
is	O	O
simply	O	O
the	O	O
name	O	O
of	O	O
the	O	O
class	O	O
-	O	O
file	O	O
.	O	O
If	O	O
the	O	O
class	O	O
is	O	O
an	O	O
inner	O	O
,	O	O
nested	O	O
,	O	O
local	O	O
or	O	O
anonymous	O	O
class	O	O
,	O	O
the	O	O
compiler	O	O
should	O	O
generate	O	O
at	O	O
least	O	O
one	O	O
$	O	O
in	O	O
its	O	O
class	O	O
-	O	O
file	O	O
name	O	O
.	O	O
Note	O	O
that	O	O
for	O	O
anonymous	O	O
classes	O	O
,	O	O
the	O	O
class	O	O
name	O	O
would	O	O
end	O	O
with	O	O
a	O	O
dollar	O	O
-	O	O
sign	O	O
followed	O	O
by	O	O
a	O	O
number	O	O
.	O	O
#	O	O
li	O	O
Lambda	O	O
class	O	O
names	O	O
are	O	O
generally	O	O
unpredictable	O	O
,	O	O
and	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
care	O	O
about	O	O
they	O	O
anyway	O	O
.	O	O
Exactly	O	O
,	O	O
their	O	O
name	O	O
is	O	O
the	O	O
name	O	O
of	O	O
the	O	O
enclosing	O	O
class	O	O
,	O	O
followed	O	O
by	O	O
$	O	O
$	O	O
Lambda	O	O
$	O	O
,	O	O
followed	O	O
by	O	O
a	O	O
number	O	O
,	O	O
followed	O	O
by	O	O
a	O	O
slash	O	O
,	O	O
followed	O	O
by	O	O
another	O	O
number	O	O
.	O	O
#	O	O
li	O	O
The	O	O
class	O	O
descriptor	O	O
of	O	O
the	O	O
primitives	O	O
are	O	O
Z	O	O
for	O	O
boolean	O	O
,	O	O
B	O	O
for	O	O
byte	O	O
,	O	O
S	O	O
for	O	O
short	O	O
,	O	O
C	O	O
for	O	O
char	O	O
,	O	O
I	O	O
for	O	O
int	O	O
,	O	O
J	O	O
for	O	O
long	O	O
,	O	O
F	O	O
for	O	O
float	O	O
and	O	O
D	O	O
for	O	O
double	O	O
.	O	O
For	O	O
non	O	O
-	O	O
array	O	O
classes	O	O
and	O	O
interfaces	O	O
the	O	O
class	O	O
descriptor	O	O
is	O	O
L	O	O
followed	O	O
by	O	O
what	O	O
is	O	O
given	O	O
by	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
followed	O	O
by	O	O
;	O	O
.	O	O
For	O	O
array	O	O
classes	O	O
,	O	O
the	O	O
class	O	O
descriptor	O	O
is	O	O
[	O	O
followed	O	O
by	O	O
the	O	O
class	O	O
descriptor	O	O
of	O	O
the	O	O
component	O	O
type	O	O
(	O	O
which	O	O
may	O	O
be	O	O
itself	O	O
another	O	O
array	O	O
class	O	O
)	O	O
.	O	O
#	O	O
li	O	O
For	O	O
array	O	O
classes	O	O
,	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
its	O	O
class	O	O
descriptor	O	O
.	O	O
This	O	O
rule	O	O
seems	O	O
to	O	O
fail	O	O
only	O	O
for	O	O
array	O	O
classes	O	O
whose	O	O
the	O	O
component	O	O
type	O	O
is	O	O
a	O	O
lambda	O	O
(	O	O
which	O	O
possibly	O	O
is	O	O
a	O	O
bug	O	O
)	O	O
,	O	O
but	O	O
hopefully	O	O
this	O	O
should	O	O
not	O	O
matter	O	O
anyway	O	O
because	O	O
there	O	O
is	O	O
no	O	O
point	O	O
even	O	O
on	O	O
the	O	O
existence	O	O
of	O	O
array	O	O
classes	O	O
whose	O	O
component	O	O
type	O	O
is	O	O
a	O	O
lambda	O	O
.	O	O
Now	O	O
,	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
li	O	O
If	O	O
the	O	O
class	O	O
instance	O	O
represents	O	O
an	O	O
interface	O	O
(	O	O
or	O	O
an	O	O
annotation	O	O
,	O	O
which	O	O
is	O	O
a	O	O
special	O	O
type	O	O
of	O	O
interface	O	O
)	O	O
,	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
StringLiteral	O	O
+	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
it	O	O
is	O	O
a	O	O
primitive	O	O
,	O	O
it	O	O
returns	O	O
simply	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
it	O	O
is	O	O
something	O	O
else	O	O
(	O	O
a	O	O
class	O	O
type	O	O
,	O	O
even	O	O
if	O	O
it	O	O
is	O	O
a	O	O
pretty	O	O
weird	O	O
one	O	O
)	O	O
,	O	O
it	O	O
returns	O	O
StringLiteral	O	O
+	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
li	O	O
For	O	O
top	O	O
-	O	O
level	O	O
classes	O	O
and	O	O
interfaces	O	O
,	O	O
the	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
just	O	O
what	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
.	O	O
#	O	O
li	O	O
The	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
null	O	O
for	O	O
anonymous	O	O
or	O	O
local	O	O
classes	O	O
and	O	O
for	O	O
array	O	O
classes	O	O
of	O	O
those	O	O
.	O	O
#	O	O
li	O	O
For	O	O
inner	O	O
and	O	O
nested	O	O
classes	O	O
and	O	O
interfaces	O	O
,	O	O
the	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
what	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
would	O	O
replacing	O	O
the	O	O
compiler	O	O
-	O	O
introduced	O	O
dollar	O	O
-	O	O
signs	O	O
by	O	O
dots	O	O
.	O	O
#	O	O
li	O	O
For	O	O
array	O	O
classes	O	O
,	O	O
the	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
null	O	O
if	O	O
the	O	O
canonical	O	O
name	O	O
of	O	O
the	O	O
component	O	O
type	O	O
is	O	O
null	O	O
.	O	O
Otherwise	O	O
,	O	O
it	O	O
returns	O	O
the	O	O
canonical	O	O
name	O	O
of	O	O
the	O	O
component	O	O
type	O	O
followed	O	O
by	O	O
[	O	O
]	O	O
.	O	O
The	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
li	O	O
For	O	O
top	O	O
-	O	O
level	O	O
,	O	O
nested	O	O
,	O	O
inner	O	O
and	O	O
local	O	O
classes	O	O
,	O	O
the	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
the	O	O
name	O	O
of	O	O
the	O	O
class	O	O
as	O	O
written	O	O
in	O	O
the	O	O
source	O	O
file	O	O
.	O	O
#	O	O
li	O	O
For	O	O
anonymous	O	O
classes	O	O
the	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
an	O	O
empty	O	O
String	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
For	O	O
lambda	O	O
classes	O	O
the	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
just	O	O
returns	O	O
what	O	O
the	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
return	O	O
without	O	O
the	O	O
package	O	O
name	O	O
.	O	O
This	O	O
do	O	O
not	O	O
makes	O	O
much	O	O
sense	O	O
and	O	O
looks	O	O
like	O	O
a	O	O
bug	O	O
for	O	O
me	O	O
,	O	O
but	O	O
there	O	O
is	O	O
no	O	O
point	O	O
in	O	O
calling	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
lambda	O	O
class	O	O
to	O	O
start	O	O
with	O	O
.	O	O
#	O	O
li	O	O
For	O	O
array	O	O
classes	O	O
the	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
the	O	O
simple	O	O
name	O	O
of	O	O
the	O	O
component	O	O
class	O	O
followed	O	O
by	O	O
[	O	O
]	O	O
.	O	O
This	O	O
have	O	O
the	O	O
funny	O	O
/	O	O
weird	O	O
side	O	O
-	O	O
effect	O	O
that	O	O
array	O	O
classes	O	O
whose	O	O
component	O	O
type	O	O
is	O	O
an	O	O
anonymous	O	O
class	O	O
have	O	O
just	O	O
[	O	O
]	O	O
as	O	O
their	O	O
simple	O	O
names	O	O
.	O	O
Question	O	O
-	O	O
10796160	O	O
,	O	O
answer	O	O
-	O	O
10796174	O	O
You	O	O
need	O	O
test	O	O
.	O	B-api_mention
split	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
split	B-api_mention	O
uses	O	O
regular	O	O
expression	O	O
and	O	O
in	O	O
regex	O	O
|	O	O
is	O	O
metacharacter	O	O
representing	O	O
OR	O	O
operator	O	O
.	O	O
You	O	O
need	O	O
to	O	O
escape	O	O
that	O	O
character	O	O
using	O	O
\	O	O
(	O	O
written	O	O
in	O	O
String	B-api_mention	B-api_mention
as	O	O
StringLiteral	O	O
since	O	O
\	O	O
is	O	O
also	O	O
metacharacter	O	O
in	O	O
String	B-api_mention	B-api_mention
literals	O	O
and	O	O
require	O	O
another	O	O
\	O	O
to	O	O
escape	O	O
it	O	O
)	O	O
.	O	O
You	O	O
can	O	O
also	O	O
use	O	O
test	O	O
.	O	B-api_mention
split	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
let	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
quote	I-api_mention	I-api_mention
create	O	O
escaped	O	O
version	O	O
of	O	O
regex	O	O
representing	O	O
|	O	O
.	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
33687544	O	O
For	O	O
HTML	O	O
response	O	O
below	O	O
code	O	O
can	O	O
be	O	O
used	O	O
bufString	O	O
.	O	B-api_mention
append	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
20001427	O	O
,	O	O
answer	O	O
-	O	O
22245383	O	O
:	O	O
:	O	O
is	O	O
called	O	O
Method	O	O
Reference	O	O
.	O	O
It	O	O
is	O	O
basically	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
single	O	O
method	O	O
.	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
refers	O	O
to	O	O
an	O	O
existing	O	O
method	O	O
by	O	O
name	O	O
.	O	O
Short	O	O
Explanation	O	O
:	O	O
Below	O	O
is	O	O
an	O	O
example	O	O
of	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
static	O	O
method	O	O
:	O	O
#	O	O
pre	O	O
square	O	O
can	O	O
be	O	O
passed	O	O
around	O	O
just	O	O
like	O	O
object	O	O
reference	O	O
'	O	O
s	O	O
and	O	O
trigger	O	O
when	O	O
at	O	O
need	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
it	O	O
can	O	O
be	O	O
perfectly	O	O
used	O	O
as	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
normal	O	O
method	O	O
of	O	O
an	O	O
object	O	O
and	O	O
not	O	O
just	O	O
static	O	O
ones	O	O
.	O	O
#	O	O
pre	O	O
Function	B-api_mention	O
above	O	O
is	O	O
a	O	O
functional	O	O
interface	O	O
.	O	O
Well	O	O
to	O	O
fully	O	O
explain	O	O
:	O	O
:	O	O
,	O	O
it	O	O
is	O	O
important	O	O
to	O	O
understand	O	O
Functional	O	O
Interface	O	O
.	O	O
Plainly	O	O
,	O	O
Function	O	B-api_mention
interface	O	O
is	O	O
an	O	O
interface	O	O
with	O	O
just	O	O
one	O	O
abstract	O	O
method	O	O
.	O	O
For	O	O
example	O	O
:	O	O
Runnable	B-api_mention	B-api_mention
,	O	O
Callable	B-api_mention	B-api_mention
,	O	O
ActionListener	B-api_mention	B-api_mention
and	O	O
so	O	O
.	O	O
Function	B-api_mention	O
above	O	O
is	O	O
a	O	O
functional	O	O
interface	O	O
with	O	O
just	O	O
one	O	O
method	O	O
apply	O	O
.	O	O
It	O	O
takes	O	O
one	O	O
argument	O	O
and	O	O
produces	O	O
a	O	O
result	O	O
.	O	O
The	O	O
reason	O	O
why	O	O
:	O	O
:	O	O
are	O	O
awesome	O	O
is	O	O
because	O	O
:	O	O
#	O	O
blockquote	O	O
i	O	O
.	O	O
e	O	O
.	O	O
Just	O	O
like	O	O
writing	O	O
lambda	O	O
body	O	O
:	O	O
Function	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
square	O	O
=	O	O
(	O	O
Double	B-api_mention	B-api_mention
x	O	O
)	O	O
-	O	O
>	O	O
x	O	O
*	O	O
x	O	O
;	O	O
You	O	O
can	O	O
simply	O	O
do	O	O
:	O	O
Function	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
square	O	O
=	O	O
Hey	O	O
:	O	O
:	O	O
square	O	O
;	O	O
At	O	O
runtime	O	O
they	O	O
behave	O	O
exactly	O	O
the	O	O
same	O	O
.	O	O
The	O	O
bytecode	O	O
may	O	O
/	O	O
not	O	O
be	O	O
the	O	O
same	O	O
(	O	O
For	O	O
above	O	O
case	O	O
,	O	O
it	O	O
generates	O	O
the	O	O
same	O	O
bytecode	O	O
(	O	O
compile	O	O
above	O	O
and	O	O
check	O	O
javap	O	O
-	O	O
c	O	O
)	O	O
)	O	O
The	O	O
only	O	O
major	O	O
criteria	O	O
to	O	O
satisfy	O	O
is	O	O
:	O	O
the	O	O
method	O	O
you	O	O
provide	O	O
should	O	O
have	O	O
a	O	O
similar	O	O
signature	O	O
to	O	O
method	O	O
of	O	O
the	O	O
FunctionalInterface	B-api_mention	B-api_mention
you	O	O
use	O	O
as	O	O
object	O	O
reference	O	O
.	O	O
Below	O	O
is	O	O
illegal	O	O
Supplier	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
p	O	O
=	O	O
Hey	O	O
:	O	O
:	O	O
square	O	O
;	O	O
/	O	O
/	O	O
illegal	O	O
square	O	O
expects	O	O
an	O	O
argument	O	O
and	O	O
returns	O	O
a	O	O
double	O	O
.	O	O
get	O	O
method	O	O
in	O	O
Supplier	B-api_mention	O
expects	O	O
an	O	O
argument	O	O
but	O	O
doesn	O	O
'	O	O
t	O	O
return	O	O
anything	O	O
.	O	O
So	O	O
it	O	O
is	O	O
an	O	O
error	O	O
.	O	O
Method	O	O
Reference	O	O
refers	O	O
to	O	O
a	O	O
method	O	O
of	O	O
the	O	O
functional	O	O
interface	O	O
(	O	O
As	O	O
mentioned	O	O
,	O	O
functional	O	O
interface	O	O
can	O	O
only	O	O
have	O	O
one	O	O
method	O	O
)	O	O
.	O	O
Some	O	O
more	O	O
examples	O	O
:	O	O
accept	O	O
method	O	O
in	O	O
Consumer	B-api_mention	O
takes	O	O
an	O	O
input	O	O
but	O	O
doesnt	O	O
return	O	O
anything	O	O
.	O	O
#	O	O
pre	O	O
Above	O	O
getRandom	O	B-api_mention
takes	O	O
no	O	O
argument	O	O
and	O	O
returns	O	O
a	O	O
double	O	O
.	O	O
So	O	O
any	O	O
functional	O	O
interface	O	O
that	O	O
satisfies	O	O
the	O	O
criteria	O	O
of	O	O
:	O	O
take	O	O
no	O	O
argument	O	O
and	O	O
return	O	O
double	O	O
can	O	O
be	O	O
used	O	O
.	O	O
Another	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
case	O	O
of	O	O
Parametrized	O	O
Types	O	O
:	O	O
#	O	O
pre	O	O
Method	O	O
Reference	O	O
can	O	O
be	O	O
obtained	O	O
in	O	O
different	O	O
styles	O	O
,	O	O
but	O	O
fundamentally	O	O
they	O	O
all	O	O
mean	O	O
the	O	O
same	O	O
and	O	O
can	O	O
simply	O	O
be	O	O
visualized	O	O
as	O	O
a	O	O
lambda	O	O
:	O	O
#	O	O
li	O	O
A	O	O
static	O	O
method	O	O
(	O	O
ClassName	O	B-api_mention
:	O	I-api_mention
:	O	I-api_mention
methName	O	I-api_mention
)	O	O
#	O	O
li	O	O
An	O	O
instance	O	O
method	O	O
of	O	O
a	O	O
particular	O	O
object	O	O
(	O	O
instanceRef	O	B-api_mention
:	O	I-api_mention
:	O	I-api_mention
methName	O	I-api_mention
)	O	O
#	O	O
li	O	O
A	O	O
super	O	O
method	O	O
of	O	O
a	O	O
particular	O	O
object	O	O
(	O	O
super	O	O
:	O	O
:	O	O
methName	O	O
)	O	O
#	O	O
li	O	O
An	O	O
instance	O	O
method	O	O
of	O	O
an	O	O
arbitrary	O	O
object	O	O
of	O	O
a	O	O
particular	O	O
type	O	O
(	O	O
ClassName	O	B-api_mention
:	O	I-api_mention
:	O	I-api_mention
methName	O	I-api_mention
)	O	O
#	O	O
li	O	O
A	O	O
class	O	O
constructor	O	O
reference	O	O
(	O	O
ClassName	O	B-api_mention
:	O	I-api_mention
:	O	I-api_mention
new	O	I-api_mention
)	O	I-api_mention
#	O	O
li	O	O
An	O	O
array	O	O
constructor	O	O
reference	O	O
(	O	O
TypeName	O	O
[	O	O
]	O	O
:	O	O
:	O	O
new	O	O
)	O	O
For	O	O
further	O	O
reference	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
22725537	O	O
,	O	O
answer	O	O
-	O	O
27215810	O	O
A	O	O
slightly	O	O
shorter	O	O
version	O	O
using	O	O
reduce	B-api_mention	O
:	O	O
things	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reduce	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
could	O	O
also	O	O
move	O	O
the	O	O
reduce	B-api_mention	O
function	O	O
to	O	O
a	O	O
static	O	O
utility	O	O
method	O	O
and	O	O
then	O	O
it	O	O
becomes	O	O
:	O	O
.	B-api_mention	B-api_mention
reduce	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
4812570	O	O
,	O	O
answer	O	O
-	O	O
21765043	O	O
You	O	O
can	O	O
use	O	O
the	O	O
ExceptionUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getStackTrace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
from	O	O
Apache	O	O
Commons	O	O
3	O	O
class	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
apache	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
commons	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
lang3	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
exception	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
ExceptionUtils	I-api_mention	I-api_mention
.	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
29226136	O	O
Also	O	O
note	O	O
that	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
normally	O	O
contains	O	O
=	O	O
=	O	O
for	O	O
testing	O	O
as	O	O
this	O	O
is	O	O
the	O	O
first	O	O
thing	O	O
you	O	O
would	O	O
wish	O	O
to	O	O
test	O	O
for	O	O
if	O	O
you	O	O
wanted	O	O
to	O	O
test	O	O
if	O	O
two	O	O
objects	O	O
are	O	O
equal	O	O
.	O	O
And	O	O
=	O	O
=	O	O
actually	O	O
does	O	O
look	O	O
at	O	O
values	O	O
for	O	O
primitive	O	O
types	O	O
,	O	O
for	O	O
objects	O	O
it	O	O
checks	O	O
the	O	O
reference	O	O
.	O	O
Question	O	O
-	O	O
32714194	O	O
String	B-api_mention	B-api_mention
is	O	O
a	O	O
special	O	O
case	O	O
in	O	O
Java	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
class	O	O
,	O	O
which	O	O
I	O	O
can	O	O
examine	O	O
in	O	O
the	O	O
source	O	O
code	O	O
,	O	O
but	O	O
it	O	O
also	O	O
has	O	O
its	O	O
own	O	O
infix	O	O
operator	O	O
+	O	O
,	O	O
which	O	O
seems	O	O
to	O	O
be	O	O
syntactic	O	O
sugar	O	O
for	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
For	O	O
example	O	O
,	O	O
StringLiteral	O	O
+	O	O
yourName	O	O
;	O	O
could	O	O
become	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
There	O	O
are	O	O
no	O	O
user	O	O
-	O	O
defined	O	O
operators	O	O
in	O	O
Java	O	O
,	O	O
so	O	O
where	O	O
is	O	O
+	O	O
specified	O	O
for	O	O
String	B-api_mention	B-api_mention
?	O	O
Could	O	O
the	O	O
same	O	O
mechanism	O	O
be	O	O
used	O	O
to	O	O
make	O	O
additional	O	O
operators	O	O
,	O	O
such	O	O
as	O	O
for	O	O
vectors	O	O
?	O	O
Question	O	O
-	O	O
13102045	O	O
I	O	O
am	O	O
using	O	O
Scanner	B-api_mention	B-api_mention
methods	O	O
nextInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
nextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
reading	O	O
input	O	O
.	O	O
Basically	O	O
,	O	O
it	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
problem	O	O
is	O	O
that	O	O
after	O	O
entering	O	O
the	O	O
numerical	O	O
value	O	O
,	O	O
the	O	O
first	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
skipped	O	O
and	O	O
the	O	O
second	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
executed	O	O
,	O	O
so	O	O
that	O	O
my	O	O
output	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
tested	O	O
my	O	O
application	O	O
and	O	O
it	O	O
looks	O	O
like	O	O
the	O	O
problem	O	O
lies	O	O
in	O	O
using	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
I	O	O
delete	O	O
it	O	O
,	O	O
then	O	O
both	O	O
string1	O	O
=	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
string2	O	O
=	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
executed	O	O
as	O	O
I	O	O
want	O	O
them	O	O
to	O	O
be	O	O
.	O	O
Question	O	O
-	O	O
9481865	O	O
,	O	O
answer	O	O
-	O	O
9482369	O	O
This	O	O
could	O	O
be	O	O
a	O	O
bit	O	O
tricky	O	O
in	O	O
the	O	O
most	O	O
general	O	O
case	O	O
.	O	O
On	O	O
the	O	O
face	O	O
of	O	O
it	O	O
,	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
give	O	O
you	O	O
the	O	O
IP	O	O
address	O	O
of	O	O
this	O	O
host	O	O
.	O	O
The	O	O
problem	O	O
is	O	O
that	O	O
a	O	O
host	O	O
could	O	O
have	O	O
lots	O	O
of	O	O
network	O	O
interfaces	O	O
,	O	O
and	O	O
an	O	O
interface	O	O
could	O	O
be	O	O
bound	O	O
to	O	O
more	O	O
than	O	O
one	O	O
IP	O	O
address	O	O
.	O	O
And	O	O
to	O	O
top	O	O
that	O	O
,	O	O
not	O	O
all	O	O
IP	O	O
addresses	O	O
will	O	O
be	O	O
reachable	O	O
outside	O	O
of	O	O
your	O	O
machine	O	O
or	O	O
your	O	O
LAN	O	O
.	O	O
For	O	O
example	O	O
,	O	O
they	O	O
could	O	O
be	O	O
IP	O	O
addresses	O	O
for	O	O
virtual	O	O
network	O	O
devices	O	O
,	O	O
private	O	O
network	O	O
IP	O	O
addresses	O	O
,	O	O
and	O	O
so	O	O
on	O	O
.	O	O
What	O	O
this	O	O
means	O	O
is	O	O
that	O	O
the	O	O
IP	O	O
address	O	O
returned	O	O
by	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
might	O	O
not	O	O
be	O	O
the	O	O
right	O	O
one	O	O
to	O	O
use	O	O
.	O	O
How	O	O
can	O	O
you	O	O
deal	O	O
with	O	O
this	O	O
?	O	O
#	O	O
li	O	O
One	O	O
approach	O	O
is	O	O
to	O	O
use	O	O
NetworkInterface	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getNetworkInterfaces	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
all	O	O
of	O	O
the	O	O
known	O	O
network	O	O
interfaces	O	O
on	O	O
the	O	O
host	O	O
,	O	O
and	O	O
then	O	O
iterate	O	O
over	O	O
each	O	O
NI	O	O
'	O	O
s	O	O
addresses	O	O
.	O	O
#	O	O
li	O	O
Another	O	O
approach	O	O
is	O	O
to	O	O
(	O	O
somehow	O	O
)	O	O
get	O	O
the	O	O
externally	O	O
advertized	O	O
FQDN	O	O
for	O	O
the	O	O
host	O	O
,	O	O
and	O	O
use	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getByName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
look	O	O
up	O	O
the	O	O
primary	O	O
IP	O	O
address	O	O
.	O	O
(	O	O
But	O	O
how	O	O
do	O	O
you	O	O
get	O	O
it	O	O
,	O	O
and	O	O
how	O	O
do	O	O
you	O	O
deal	O	O
with	O	O
a	O	O
DNS	O	O
-	O	O
based	O	O
load	O	O
balancer	O	O
?	O	O
)	O	O
#	O	O
li	O	O
A	O	O
variation	O	O
of	O	O
the	O	O
previous	O	O
is	O	O
to	O	O
get	O	O
the	O	O
preferred	O	O
FQDN	O	O
from	O	O
a	O	O
config	O	O
file	O	O
or	O	O
a	O	O
command	O	O
line	O	O
parameter	O	O
.	O	O
#	O	O
li	O	O
Another	O	O
variation	O	O
is	O	O
to	O	O
get	O	O
the	O	O
preferred	O	O
IP	O	O
address	O	O
from	O	O
a	O	O
config	O	O
file	O	O
or	O	O
a	O	O
command	O	O
line	O	O
parameter	O	O
.	O	O
In	O	O
summary	O	O
,	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
typically	O	O
work	O	O
,	O	O
but	O	O
you	O	O
may	O	O
need	O	O
to	O	O
provide	O	O
an	O	O
alternative	O	O
method	O	O
for	O	O
the	O	O
cases	O	O
where	O	O
your	O	O
code	O	O
is	O	O
run	O	O
in	O	O
an	O	O
environment	O	O
with	O	O
"	O	O
complicated	O	O
"	O	O
networking	O	O
.	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Any	O	O
address	O	O
in	O	O
the	O	O
range	O	O
127	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
is	O	O
a	O	O
"	O	O
loopback	O	O
"	O	O
address	O	O
.	O	O
It	O	O
is	O	O
only	O	O
visible	O	O
to	O	O
"	O	O
this	O	O
"	O	O
host	O	O
.	O	O
#	O	O
li	O	O
Any	O	O
address	O	O
in	O	O
the	O	O
range	O	O
192	O	O
.	O	O
168	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
is	O	O
a	O	O
private	O	O
(	O	O
aka	O	O
site	O	O
local	O	O
)	O	O
IP	O	O
address	O	O
.	O	O
These	O	O
are	O	O
reserved	O	O
for	O	O
use	O	O
within	O	O
an	O	O
organization	O	O
.	O	O
The	O	O
same	O	O
applies	O	O
to	O	O
10	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
addresses	O	O
,	O	O
and	O	O
172	O	O
.	O	O
16	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
through	O	O
172	O	O
.	O	O
31	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
#	O	O
li	O	O
Addresses	O	O
in	O	O
the	O	O
range	O	O
169	O	O
.	O	O
254	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
are	O	O
link	O	O
local	O	O
IP	O	O
addresses	O	O
.	O	O
These	O	O
are	O	O
reserved	O	O
for	O	O
use	O	O
on	O	O
a	O	O
single	O	O
network	O	O
segment	O	O
.	O	O
#	O	O
li	O	O
Addresses	O	O
in	O	O
the	O	O
range	O	O
224	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
through	O	O
239	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
.	O	O
xxx	O	O
are	O	O
multicast	O	O
addresses	O	O
.	O	O
#	O	O
li	O	O
The	O	O
address	O	O
255	O	O
.	O	O
255	O	O
.	O	O
255	O	O
.	O	O
255	O	O
is	O	O
the	O	O
broadcast	O	O
address	O	O
.	O	O
#	O	O
li	O	O
Anything	O	O
else	O	O
should	O	O
be	O	O
a	O	O
valid	O	O
public	O	O
point	O	O
-	O	O
to	O	O
-	O	O
point	O	O
IPv4	O	O
address	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
the	O	O
InetAddress	B-api_mention	B-api_mention
API	O	O
provides	O	O
methods	O	O
for	O	O
testing	O	O
for	O	O
loopback	O	O
,	O	O
link	O	O
local	O	O
,	O	O
site	O	O
local	O	O
,	O	O
multicast	O	O
and	O	O
broadcast	O	O
addresses	O	O
.	O	O
You	O	O
can	O	O
use	O	O
these	O	O
to	O	O
sort	O	O
out	O	O
which	O	O
of	O	O
the	O	O
IP	O	O
addresses	O	O
you	O	O
get	O	O
back	O	O
is	O	O
most	O	O
appropriate	O	O
.	O	O
Question	O	O
-	O	O
5192512	O	O
,	O	O
answer	O	O
-	O	O
30190425	O	O
I	O	O
'	O	O
ll	O	O
vote	O	O
for	O	O
sb	O	O
.	B-api_mention	B-api_mention
setLength	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
not	O	O
only	O	O
because	O	O
it	O	O
'	O	O
s	O	O
one	O	O
function	O	O
call	O	O
but	O	O
because	O	O
it	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
copy	O	O
the	O	O
array	O	O
into	O	O
another	O	O
array	O	O
like	O	O
sb	O	O
.	B-api_mention	B-api_mention
delete	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
,	O	O
It	O	O
just	O	O
fill	O	O
the	O	O
remaining	O	O
characters	O	O
to	O	O
be	O	O
0	O	O
and	O	O
set	O	O
the	O	O
length	O	O
variable	O	O
to	O	O
the	O	O
new	O	O
length	O	O
.	O	O
You	O	O
can	O	O
take	O	O
a	O	O
look	O	O
into	O	O
their	O	O
implementation	O	O
to	O	O
validate	O	O
my	O	O
point	O	O
from	O	O
here	O	O
at	O	O
setLength	B-api_mention	B-api_mention
function	O	O
and	O	O
delete0	O	O
function	O	O
.	O	O
Question	O	O
-	O	O
29262002	O	O
,	O	O
answer	O	O
-	O	O
29262511	O	O
The	O	O
first	O	O
case	O	O
is	O	O
ok	O	O
because	O	O
you	O	O
are	O	O
invoking	O	O
a	O	O
"	O	O
special	O	O
"	O	O
method	O	O
(	O	O
a	O	O
constructor	O	O
)	O	O
and	O	O
you	O	O
are	O	O
no	O	O
actually	O	O
taking	O	O
the	O	O
created	O	O
object	O	O
.	O	O
Just	O	O
to	O	O
make	O	O
it	O	O
more	O	O
clear	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
put	O	O
the	O	O
optional	O	O
braces	O	O
in	O	O
your	O	O
lambdas	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
more	O	O
clear	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
translate	O	O
that	O	O
to	O	O
the	O	O
older	O	O
notation	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
the	O	O
first	O	O
case	O	O
you	O	O
are	O	O
executing	O	O
a	O	O
constructor	O	O
,	O	O
but	O	O
you	O	O
are	O	O
NOT	O	O
returning	O	O
the	O	O
created	O	O
object	O	O
,	O	O
in	O	O
the	O	O
second	O	O
case	O	O
you	O	O
are	O	O
attempting	O	O
to	O	O
return	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
,	O	O
but	O	O
your	O	O
method	O	O
in	O	O
your	O	O
interface	O	O
BiConsumer	O	B-api_mention
returns	O	O
void	O	O
,	O	O
hence	O	O
the	O	O
compiler	O	O
error	O	O
.	O	O
Question	O	O
-	O	O
24630963	O	O
The	O	O
Java	O	O
8	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
throws	O	O
a	O	O
NullPointerException	B-api_mention	B-api_mention
if	O	O
one	O	O
of	O	O
the	O	O
values	O	O
is	O	O
'	O	O
null	O	O
'	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
this	O	O
behaviour	O	O
,	O	O
maps	O	O
can	O	O
contain	O	O
null	O	O
pointers	O	O
as	O	O
value	O	O
without	O	O
any	O	O
problems	O	O
.	O	O
Is	O	O
there	O	O
a	O	O
good	O	O
reason	O	O
why	O	O
values	O	O
cannot	O	O
be	O	O
null	O	O
for	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
?	O	O
Also	O	O
,	O	O
is	O	O
there	O	O
a	O	O
nice	O	O
Java	O	O
8	O	O
way	O	O
of	O	O
fixing	O	O
this	O	O
,	O	O
or	O	O
should	O	O
I	O	O
revert	O	O
to	O	O
plain	O	O
old	O	O
for	O	O
loop	O	O
?	O	O
An	O	O
example	O	O
of	O	O
my	O	O
problem	O	O
:	O	O
#	O	O
pre	O	O
Stacktrace	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28584954	O	O
Because	O	O
thats	O	O
the	O	O
standard	O	O
.	O	O
Infinity	O	O
represents	O	O
a	O	O
number	O	O
greater	O	O
than	O	O
or	O	O
less	O	O
than	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
/	O	O
-	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
NaN	O	O
represents	O	O
the	O	O
outcome	O	O
of	O	O
an	O	O
operation	O	O
that	O	O
didn	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
.	O	O
That	O	O
is	O	O
,	O	O
the	O	O
operation	O	O
didn	O	O
'	O	O
t	O	O
possibly	O	O
come	O	O
out	O	O
with	O	O
a	O	O
number	O	O
.	O	O
I	O	O
would	O	O
guess	O	O
the	O	O
logic	O	O
is	O	O
once	O	O
a	O	O
number	O	O
gets	O	O
big	O	O
enough	O	O
(	O	O
infinity	O	O
)	O	O
and	O	O
because	O	O
of	O	O
the	O	O
limitation	O	O
of	O	O
floating	O	O
point	O	O
numbers	O	O
,	O	O
adding	O	O
numbers	O	O
to	O	O
it	O	O
won	O	O
'	O	O
t	O	O
change	O	O
the	O	O
outcome	O	O
,	O	O
so	O	O
its	O	O
'	O	O
like	O	O
'	O	O
infinity	O	O
.	O	O
So	O	O
if	O	O
you	O	O
want	O	O
to	O	O
compare	O	O
to	O	O
really	O	O
big	O	O
numbers	O	O
,	O	O
at	O	O
some	O	O
point	O	O
you	O	O
might	O	O
just	O	O
say	O	O
those	O	O
two	O	O
big	O	O
numbers	O	O
are	O	O
close	O	O
enough	O	O
for	O	O
all	O	O
intents	O	O
and	O	O
purposes	O	O
.	O	O
But	O	O
if	O	O
you	O	O
want	O	O
to	O	O
compare	O	O
two	O	O
things	O	O
that	O	O
both	O	O
aren	O	O
'	O	O
t	O	O
numbers	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
compare	O	O
them	O	O
so	O	O
its	O	O
false	O	O
.	O	O
At	O	O
least	O	O
you	O	O
couldn	O	O
'	O	O
t	O	O
compare	O	O
them	O	O
as	O	O
a	O	O
primitive	O	O
.	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29098447	O	O
The	O	O
solution	O	O
is	O	O
to	O	O
use	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
.	O	O
To	O	O
create	O	O
a	O	O
Collector	B-api_mention	B-api_mention
using	O	O
its	O	O
builder	O	O
pattern	O	O
is	O	O
already	O	O
given	O	O
as	O	O
solution	O	O
.	O	O
The	O	O
alternative	O	O
is	O	O
the	O	O
other	O	O
overloaded	O	O
collect	O	O
being	O	O
a	O	O
tiny	O	O
bit	O	O
more	O	O
primitive	O	O
.	O	O
#	O	O
pre	O	O
As	O	O
one	O	O
sees	O	O
,	O	O
I	O	O
make	O	O
a	O	O
list	O	O
of	O	O
string	O	O
lists	O	O
,	O	O
where	O	O
there	O	O
always	O	O
is	O	O
at	O	O
least	O	O
one	O	O
last	O	O
(	O	O
empty	O	O
)	O	O
string	O	O
list	O	O
.	O	O
#	O	O
li	O	O
The	O	O
first	O	O
function	O	O
creates	O	O
a	O	O
starting	O	O
list	O	O
of	O	O
string	O	O
lists	O	O
.	O	O
It	O	O
specifies	O	O
the	O	O
result	O	O
(	O	O
typed	O	O
)	O	O
object	O	O
.	O	O
#	O	O
li	O	O
The	O	O
second	O	O
function	O	O
is	O	O
called	O	O
to	O	O
process	O	O
each	O	O
element	O	O
.	O	O
It	O	O
is	O	O
an	O	O
action	O	O
on	O	O
the	O	O
partial	O	O
result	O	O
and	O	O
an	O	O
element	O	O
.	O	O
#	O	O
li	O	O
The	O	O
third	O	O
is	O	O
not	O	O
really	O	O
used	O	O
,	O	O
it	O	O
comes	O	O
into	O	O
play	O	O
on	O	O
parallelising	O	O
the	O	O
processing	O	O
,	O	O
when	O	O
partial	O	O
results	O	O
must	O	O
be	O	O
combined	O	O
.	O	O
A	O	O
solution	O	O
with	O	O
an	O	O
accumulator	O	O
:	O	O
As	O	O
@	O	O
StuartMarks	O	O
points	O	O
out	O	O
,	O	O
the	O	O
combiner	O	O
does	O	O
not	O	O
fullfill	O	O
the	O	O
contract	O	O
for	O	O
parallelism	O	O
.	O	O
Due	O	O
to	O	O
the	O	O
comment	O	O
of	O	O
@	O	O
ArnaudDenoyelle	O	O
a	O	O
version	O	O
using	O	O
reduce	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
The	O	O
first	O	O
parameter	O	O
is	O	O
the	O	O
accumulated	O	O
object	O	O
.	O	O
#	O	O
li	O	O
The	O	O
second	O	O
function	O	O
accumulates	O	O
.	O	O
#	O	O
li	O	O
The	O	O
third	O	O
is	O	O
the	O	O
aforementioned	O	O
combiner	O	O
.	O	O
Question	O	O
-	O	O
5263187	O	O
,	O	O
answer	O	O
-	O	O
5263201	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
18571223	O	O
,	O	O
answer	O	O
-	O	O
18571348	O	O
The	O	O
object	O	O
your	O	O
method	O	O
decompressGZIP	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
needs	O	O
is	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
.	O	O
So	O	O
the	O	O
basic	O	O
,	O	O
technical	O	O
answer	O	O
to	O	O
the	O	O
question	O	O
you	O	O
have	O	O
asked	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
the	O	O
problem	O	O
you	O	O
appear	O	O
to	O	O
be	O	O
wrestling	O	O
with	O	O
is	O	O
that	O	O
this	O	O
doesn	O	O
'	O	O
t	O	O
display	O	O
very	O	O
well	O	O
.	O	O
Calling	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
just	O	O
give	O	O
you	O	O
the	O	O
default	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
is	O	O
the	O	O
class	O	O
name	O	O
+	O	O
memory	O	O
address	O	O
.	O	O
In	O	O
your	O	O
result	O	O
[	O	O
B	O	O
@	O	O
38ee9f13	O	O
,	O	O
the	O	O
[	O	O
B	O	O
means	O	O
byte	O	O
[	O	O
]	O	O
and	O	O
38ee9f13	O	O
is	O	O
the	O	O
memory	O	O
address	O	O
,	O	O
separated	O	O
by	O	O
an	O	O
@	O	O
.	O	O
For	O	O
display	O	O
purposes	O	O
you	O	O
can	O	O
use	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
this	O	O
will	O	O
just	O	O
display	O	O
as	O	O
a	O	O
sequence	O	O
of	O	O
comma	O	O
-	O	O
separated	O	O
integers	O	O
,	O	O
which	O	O
may	O	O
or	O	O
may	O	O
not	O	O
be	O	O
what	O	O
you	O	O
want	O	O
.	O	O
To	O	O
get	O	O
a	O	O
readable	O	O
String	B-api_mention	B-api_mention
back	O	O
from	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
,	O	O
use	O	O
:	O	O
String	B-api_mention	B-api_mention
string	O	O
=	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
reason	O	O
the	O	O
Charset	B-api_mention	B-api_mention
version	O	O
is	O	O
favoured	O	O
,	O	O
is	O	O
that	O	O
all	O	O
String	B-api_mention	B-api_mention
objects	O	O
in	O	O
Java	O	O
are	O	O
stored	O	O
internally	O	O
as	O	O
UTF	O	O
-	O	O
16	O	O
.	O	O
When	O	O
converting	O	O
to	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
you	O	O
will	O	O
get	O	O
a	O	O
different	O	O
breakdown	O	O
of	O	O
bytes	O	O
for	O	O
the	O	O
given	O	O
glyphs	O	O
of	O	O
that	O	O
String	B-api_mention	B-api_mention
,	O	O
depending	O	O
upon	O	O
the	O	O
chosen	O	O
charset	O	O
.	O	O
Question	O	O
-	O	O
28584669	O	O
Why	O	O
doesn	O	O
'	O	O
t	O	O
infinity	O	O
comparison	O	O
follow	O	O
the	O	O
logic	O	O
applied	O	O
to	O	O
NaNs	O	O
?	O	O
This	O	O
code	O	O
prints	O	O
out	O	O
false	O	O
three	O	O
times	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
if	O	O
I	O	O
change	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
NaN	I-api_mention	I-api_mention
to	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
,	O	O
I	O	O
get	O	O
true	O	O
for	O	O
equality	O	O
,	O	O
but	O	O
false	O	O
for	O	O
the	O	O
greater	O	O
-	O	O
than	O	O
and	O	O
less	O	O
-	O	O
than	O	O
comparisons	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
seems	O	O
dangerous	O	O
.	O	O
Assuming	O	O
that	O	O
infinite	O	O
values	O	O
result	O	O
from	O	O
overflows	O	O
,	O	O
I	O	O
imagine	O	O
it	O	O
'	O	O
s	O	O
more	O	O
likely	O	O
that	O	O
two	O	O
variables	O	O
that	O	O
ended	O	O
up	O	O
as	O	O
infinities	O	O
wouldn	O	O
'	O	O
t	O	O
actually	O	O
be	O	O
equal	O	O
in	O	O
perfect	O	O
arithmetic	O	O
.	O	O
Question	O	O
-	O	O
19431234	O	O
,	O	O
answer	O	O
-	O	O
30133063	O	O
Much	O	O
more	O	O
convenient	O	O
way	O	O
if	O	O
you	O	O
are	O	O
sure	O	O
you	O	O
need	O	O
a	O	O
default	O	O
timezone	O	O
:	O	O
Date	B-api_mention	B-api_mention
d	O	O
=	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Timestamp	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
23932061	O	O
,	O	O
answer	O	O
-	O	O
23932216	O	O
You	O	O
can	O	O
easily	O	O
create	O	O
a	O	O
Stream	B-api_mention	B-api_mention
out	O	O
of	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
or	O	O
Iterator	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
14809293	O	O
,	O	O
answer	O	O
-	O	O
14821488	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableList	I-api_mention	I-api_mention
has	O	O
already	O	O
been	O	O
mentioned	O	O
-	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
strangely	O	O
not	O	O
!	O	O
My	O	O
solution	O	O
would	O	O
also	O	O
be	O	O
to	O	O
use	O	O
the	O	O
list	O	O
from	O	O
the	O	O
outside	O	O
and	O	O
wrap	O	O
the	O	O
array	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
problem	O	O
with	O	O
copying	O	O
the	O	O
array	O	O
is	O	O
:	O	O
if	O	O
you	O	O
'	O	O
re	O	O
doing	O	O
it	O	O
every	O	O
time	O	O
you	O	O
access	O	O
the	O	O
code	O	O
and	O	O
the	O	O
array	O	O
is	O	O
big	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
create	O	O
a	O	O
lot	O	O
of	O	O
work	O	O
for	O	O
the	O	O
garbage	O	O
collector	O	O
for	O	O
sure	O	O
.	O	O
So	O	O
the	O	O
copy	O	O
is	O	O
a	O	O
simple	O	O
but	O	O
really	O	O
bad	O	O
approach	O	O
-	O	O
I	O	O
'	O	O
d	O	O
say	O	O
"	O	O
cheap	O	O
"	O	O
,	O	O
but	O	O
memory	O	O
-	O	O
expensive	O	O
!	O	O
Especially	O	O
when	O	O
you	O	O
'	O	O
re	O	O
having	O	O
more	O	O
than	O	O
just	O	O
2	O	O
elements	O	O
.	O	O
If	O	O
you	O	O
look	O	O
at	O	O
the	O	O
source	O	O
code	O	O
of	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
and	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableList	I-api_mention	I-api_mention
there	O	O
is	O	O
actually	O	O
not	O	O
much	O	O
created	O	O
.	O	O
The	O	O
first	O	O
just	O	O
wraps	O	O
the	O	O
array	O	O
without	O	O
copying	O	O
it	O	O
,	O	O
the	O	O
second	O	O
just	O	O
wraps	O	O
the	O	O
list	O	O
,	O	O
making	O	O
changes	O	O
to	O	O
it	O	O
unavailable	O	O
.	O	O
Question	O	O
-	O	O
30727515	O	O
,	O	O
answer	O	O
-	O	O
30739477	O	O
Since	O	O
this	O	O
hasn	O	O
’	O	O
t	O	O
addressed	O	O
yet	O	O
,	O	O
here	O	O
an	O	O
explanation	O	O
,	O	O
why	O	O
the	O	O
translation	O	O
of	O	O
Unicode	O	O
escapes	O	O
happens	O	O
before	O	O
any	O	O
other	O	O
source	O	O
code	O	O
processing	O	O
:	O	O
The	O	O
idea	O	O
behind	O	O
it	O	O
was	O	O
that	O	O
it	O	O
allows	O	O
lossless	O	O
translations	O	O
of	O	O
Java	O	O
source	O	O
code	O	O
between	O	O
different	O	O
character	O	O
encodings	O	O
.	O	O
Today	O	O
,	O	O
there	O	O
is	O	O
widespread	O	O
Unicode	O	O
support	O	O
,	O	O
and	O	O
this	O	O
doesn	O	O
’	O	O
t	O	O
look	O	O
like	O	O
a	O	O
problem	O	O
,	O	O
but	O	O
back	O	O
then	O	O
it	O	O
wasn	O	O
’	O	O
t	O	O
easy	O	O
for	O	O
a	O	O
developer	O	O
from	O	O
a	O	O
western	O	O
country	O	O
to	O	O
receive	O	O
some	O	O
source	O	O
code	O	O
from	O	O
his	O	O
Asian	O	O
colleague	O	O
containing	O	O
Asian	O	O
characters	O	O
,	O	O
make	O	O
some	O	O
changes	O	O
(	O	O
including	O	O
compiling	O	O
and	O	O
testing	O	O
it	O	O
)	O	O
and	O	O
sending	O	O
the	O	O
result	O	O
back	O	O
,	O	O
all	O	O
without	O	O
damaging	O	O
something	O	O
.	O	O
So	O	O
,	O	O
Java	O	O
source	O	O
code	O	O
can	O	O
be	O	O
written	O	O
in	O	O
any	O	O
encoding	O	O
and	O	O
allows	O	O
a	O	O
wide	O	O
range	O	O
of	O	O
characters	O	O
within	O	O
identifiers	O	O
,	O	O
character	O	O
and	O	O
String	B-api_mention	B-api_mention
literals	O	O
and	O	O
comments	O	O
.	O	O
Then	O	O
,	O	O
in	O	O
order	O	O
to	O	O
transfer	O	O
it	O	O
losslessly	O	O
,	O	O
all	O	O
characters	O	O
not	O	O
supported	O	O
by	O	O
the	O	O
target	O	O
encoding	O	O
are	O	O
replaced	O	O
by	O	O
their	O	O
Unicode	O	O
escapes	O	O
.	O	O
This	O	O
is	O	O
a	O	O
reversible	O	O
process	O	O
and	O	O
the	O	O
interesting	O	O
point	O	O
is	O	O
that	O	O
the	O	O
translation	O	O
can	O	O
be	O	O
done	O	O
by	O	O
a	O	O
tool	O	O
which	O	O
doesn	O	O
’	O	O
t	O	O
need	O	O
to	O	O
know	O	O
anything	O	O
about	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
syntax	O	O
as	O	O
the	O	O
translation	O	O
rule	O	O
is	O	O
not	O	O
dependent	O	O
on	O	O
it	O	O
.	O	O
This	O	O
works	O	O
as	O	O
the	O	O
translation	O	O
to	O	O
their	O	O
actual	O	O
Unicode	O	O
characters	O	O
inside	O	O
the	O	O
compiler	O	O
happens	O	O
independently	O	O
to	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
syntax	O	O
as	O	O
well	O	O
.	O	O
It	O	O
implies	O	O
that	O	O
you	O	O
can	O	O
perform	O	O
an	O	O
arbitrary	O	O
number	O	O
of	O	O
translation	O	O
steps	O	O
in	O	O
both	O	O
directions	O	O
without	O	O
ever	O	O
changing	O	O
the	O	O
meaning	O	O
of	O	O
the	O	O
source	O	O
code	O	O
.	O	O
This	O	O
is	O	O
the	O	O
reason	O	O
for	O	O
another	O	O
weird	O	O
feature	O	O
which	O	O
hasn	O	O
’	O	O
t	O	O
even	O	O
mentioned	O	O
:	O	O
the	O	O
\	O	O
uuuuuuxxxx	O	O
syntax	O	O
:	O	O
When	O	O
a	O	O
translation	O	O
tool	O	O
is	O	O
escaping	O	O
characters	O	O
and	O	O
encounters	O	O
a	O	O
sequence	O	O
that	O	O
is	O	O
already	O	O
an	O	O
escaped	O	O
sequence	O	O
,	O	O
it	O	O
should	O	O
insert	O	O
an	O	O
additional	O	O
u	O	O
into	O	O
the	O	O
sequence	O	O
,	O	O
converting	O	O
\	O	O
ucafe	O	O
to	O	O
\	O	O
uucafe	O	O
.	O	O
The	O	O
meaning	O	O
doesn	O	O
’	O	O
t	O	O
change	O	O
,	O	O
but	O	O
when	O	O
converting	O	O
into	O	O
the	O	O
other	O	O
direction	O	O
,	O	O
the	O	O
tool	O	O
should	O	O
just	O	O
remove	O	O
one	O	O
u	O	O
and	O	O
replace	O	O
only	O	O
sequences	O	O
containing	O	O
a	O	O
single	O	O
u	O	O
by	O	O
their	O	O
Unicode	O	O
characters	O	O
.	O	O
That	O	O
way	O	O
,	O	O
even	O	O
Unicode	O	O
escapes	O	O
are	O	O
retained	O	O
in	O	O
their	O	O
original	O	O
form	O	O
when	O	O
converting	O	O
back	O	O
and	O	O
forth	O	O
.	O	O
I	O	O
guess	O	O
,	O	O
no	O	O
-	O	O
one	O	O
ever	O	O
used	O	O
that	O	O
feature	O	O
…	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276463	O	O
If	O	O
all	O	O
of	O	O
the	O	O
streams	O	O
have	O	O
been	O	O
instantiated	O	O
then	O	O
closing	O	O
only	O	O
the	O	O
outermost	O	O
is	O	O
just	O	O
fine	O	O
.	O	O
The	O	O
documentation	O	O
on	O	O
Closeable	B-api_mention	B-api_mention
interface	O	O
states	O	O
that	O	O
close	O	O
method	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
releasing	O	O
system	O	O
resources	O	O
includes	O	O
closing	O	O
streams	O	O
.	O	O
It	O	O
also	O	O
states	O	O
that	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
if	O	O
you	O	O
close	O	O
them	O	O
explicitly	O	O
afterwards	O	O
,	O	O
nothing	O	O
wrong	O	O
will	O	O
happen	O	O
.	O	O
Question	O	O
-	O	O
9510125	O	O
Swing	O	O
components	O	O
have	O	O
multiple	O	O
methods	O	O
related	O	O
to	O	O
updates	O	O
of	O	O
screen	O	O
layout	O	O
,	O	O
in	O	O
particular	O	O
:	O	O
#	O	O
li	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
invalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
The	O	O
Java	O	O
documentation	O	O
defines	O	O
these	O	O
somewhat	O	O
from	O	O
a	O	O
technical	O	O
perspective	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
not	O	O
particularly	O	O
clear	O	O
how	O	O
they	O	O
are	O	O
meant	O	O
to	O	O
be	O	O
used	O	O
.	O	O
What	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
these	O	O
,	O	O
and	O	O
in	O	O
what	O	O
circumstances	O	O
should	O	O
you	O	O
use	O	O
one	O	O
rather	O	O
than	O	O
the	O	O
others	O	O
?	O	O
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
28821352	O	O
It	O	O
'	O	O
s	O	O
not	O	O
pretty	O	O
,	O	O
but	O	O
this	O	O
will	O	O
work	O	O
:	O	O
return	O	O
serviceA	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	B-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
fairly	O	O
handy	O	O
pattern	O	O
for	O	O
use	O	O
with	O	O
Optional	B-api_mention	B-api_mention
.	O	O
It	O	O
means	O	O
"	O	O
If	O	O
this	O	O
Optional	B-api_mention	B-api_mention
contains	O	O
value	O	O
v	O	O
,	O	O
give	O	O
me	O	O
func	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
otherwise	O	O
give	O	O
me	O	O
sup	O	O
.	B-api_mention	B-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
we	O	O
call	O	O
serviceA	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
and	O	O
get	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
If	O	O
that	O	O
Optional	B-api_mention	B-api_mention
contains	O	O
value	O	O
v	O	O
,	O	O
we	O	O
want	O	O
to	O	O
get	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
if	O	O
it	O	O
is	O	O
empty	O	O
,	O	O
we	O	O
want	O	O
to	O	O
get	O	O
serviceB	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	O
Rinse	O	O
-	O	O
repeat	O	O
with	O	O
more	O	O
alternatives	O	O
.	O	O
Other	O	O
uses	O	O
of	O	O
this	O	O
pattern	O	O
are	O	O
#	O	O
li	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
14316487	O	O
,	O	O
answer	O	O
-	O	O
14316543	O	O
A	O	O
very	O	O
simple	O	O
implementation	O	O
with	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
19416644	O	O
,	O	O
answer	O	O
-	O	O
19775881	O	O
Create	O	O
your	O	O
own	O	O
class	O	O
System	B-api_mention	O
in	O	O
tha	O	O
same	O	O
package	O	O
with	O	O
Condition	O	O
.	O	O
In	O	O
this	O	O
case	O	O
your	O	O
System	B-api_mention	O
class	O	O
will	O	O
hide	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
System	I-api_mention	I-api_mention
class	O	O
#	O	O
pre	O	O
Ideone	O	O
DEMO	O	O
Question	O	O
-	O	O
16098046	O	O
,	O	O
answer	O	O
-	O	O
25307973	O	O
In	O	O
short	O	O
:	O	O
If	O	O
you	O	O
want	O	O
to	O	O
get	O	O
rid	O	O
of	O	O
trailing	O	O
zeros	O	O
and	O	O
Locale	B-api_mention	B-api_mention
problems	O	O
,	O	O
then	O	O
you	O	O
should	O	O
use	O	O
:	O	O
#	O	O
pre	O	O
Explanation	O	O
:	O	O
Why	O	O
other	O	O
answers	O	O
did	O	O
not	O	O
suit	O	O
me	O	O
:	O	O
#	O	O
li	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
or	O	O
FloatingDecimal	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toJavaFormatString	I-api_mention	I-api_mention
uses	O	O
scientific	O	O
notations	O	O
if	O	O
double	O	O
is	O	O
less	O	O
than	O	O
10	O	O
^	O	O
-	O	O
3	O	O
or	O	O
greater	O	O
than	O	O
or	O	O
equal	O	O
to	O	O
10	O	O
^	O	O
7	O	O
#	O	O
li	O	O
by	O	O
using	O	O
%	O	O
f	O	O
,	O	O
the	O	O
default	O	O
decimal	O	O
precision	O	O
is	O	O
6	O	O
,	O	O
otherwise	O	O
you	O	O
can	O	O
hardcode	O	O
it	O	O
but	O	O
it	O	O
results	O	O
in	O	O
extra	O	O
zeros	O	O
added	O	O
if	O	O
you	O	O
have	O	O
less	O	O
decimals	O	O
.	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
by	O	O
using	O	O
setMaximumFractionDigits	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
%	O	O
.	O	O
0f	O	O
you	O	O
remove	O	O
any	O	O
decimal	O	O
precision	O	O
,	O	O
which	O	O
is	O	O
fine	O	O
for	O	O
integers	O	O
/	O	O
longs	O	O
but	O	O
not	O	O
for	O	O
double	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
by	O	O
using	O	O
DecimalFormat	B-api_mention	B-api_mention
,	O	O
you	O	O
are	O	O
local	O	O
dependent	O	O
.	O	O
In	O	O
French	O	O
locale	O	O
,	O	O
the	O	O
decimal	O	O
separator	O	O
is	O	O
a	O	O
comma	O	O
,	O	O
not	O	O
a	O	O
point	O	O
:	O	O
#	O	O
pre	O	O
Using	O	O
the	O	O
ENGLISH	O	O
locale	O	O
makes	O	O
sure	O	O
you	O	O
get	O	O
a	O	O
point	O	O
for	O	O
decimal	O	O
separator	O	O
,	O	O
wherever	O	O
your	O	O
program	O	O
will	O	O
run	O	O
Why	O	O
using	O	O
340	O	O
then	O	O
for	O	O
setMaximumFractionDigits	B-api_mention	B-api_mention
?	O	O
Two	O	O
reasons	O	O
:	O	O
#	O	O
li	O	O
setMaximumFractionDigits	B-api_mention	B-api_mention
accepts	O	O
an	O	O
integer	O	O
but	O	O
its	O	O
implementation	O	O
has	O	O
a	O	O
maximum	O	O
digits	O	O
allowed	O	O
of	O	O
DecimalFormat	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
DOUBLE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
FRACTION	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
DIGITS	I-api_mention	I-api_mention
which	O	O
equals	O	O
340	O	O
#	O	O
li	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
=	O	O
4	O	O
.	O	O
9E	O	O
-	O	O
324	O	O
so	O	O
with	O	O
340	O	O
digits	O	O
you	O	O
are	O	O
sure	O	O
not	O	O
to	O	O
round	O	O
your	O	O
double	O	O
and	O	O
loose	O	O
precision	O	O
Question	O	O
-	O	O
24676877	O	O
,	O	O
answer	O	O
-	O	O
24679745	O	O
The	O	O
answer	O	O
is	O	O
,	O	O
as	O	O
always	O	O
,	O	O
"	O	O
it	O	O
depends	O	O
"	O	O
.	O	O
It	O	O
depends	O	O
on	O	O
how	O	O
big	O	O
the	O	O
returned	O	O
collection	O	O
will	O	O
be	O	O
.	O	O
It	O	O
depends	O	O
on	O	O
whether	O	O
the	O	O
result	O	O
changes	O	O
over	O	O
time	O	O
,	O	O
and	O	O
how	O	O
important	O	O
consistency	O	O
of	O	O
the	O	O
returned	O	O
result	O	O
is	O	O
.	O	O
And	O	O
it	O	O
depends	O	O
very	O	O
much	O	O
on	O	O
how	O	O
the	O	O
user	O	O
is	O	O
likely	O	O
to	O	O
use	O	O
the	O	O
answer	O	O
.	O	O
First	O	O
,	O	O
note	O	O
that	O	O
you	O	O
can	O	O
always	O	O
get	O	O
a	O	O
Collection	B-api_mention	B-api_mention
from	O	O
a	O	O
Stream	B-api_mention	B-api_mention
,	O	O
and	O	O
vice	O	O
versa	O	O
:	O	O
/	O	O
/	O	O
If	O	O
API	O	O
returns	O	O
Collection	B-api_mention	B-api_mention
,	O	O
convert	O	O
with	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
getFoo	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
.	O	O
.	O	O
/	O	O
/	O	O
If	O	O
API	O	O
returns	O	O
Stream	B-api_mention	B-api_mention
,	O	O
use	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Collection	I-api_mention	O
<	I-api_mention	O
T	I-api_mention	O
>	I-api_mention	O
c	O	O
=	O	O
getFooStream	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	B-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
So	O	O
the	O	O
question	O	O
is	O	O
,	O	O
which	O	O
is	O	O
more	O	O
useful	O	O
to	O	O
your	O	O
callers	O	O
.	O	O
If	O	O
your	O	O
result	O	O
might	O	O
be	O	O
infinite	O	O
,	O	O
there	O	O
'	O	O
s	O	O
only	O	O
one	O	O
choice	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	O	O
If	O	O
your	O	O
result	O	O
might	O	O
be	O	O
very	O	O
large	O	O
,	O	O
you	O	O
probably	O	O
prefer	O	O
Stream	B-api_mention	B-api_mention
,	O	O
since	O	O
there	O	O
may	O	O
not	O	O
be	O	O
any	O	O
value	O	O
in	O	O
materializing	O	O
it	O	O
all	O	O
at	O	O
once	O	O
,	O	O
and	O	O
doing	O	O
so	O	O
could	O	O
create	O	O
significant	O	O
heap	O	O
pressure	O	O
.	O	O
If	O	O
all	O	O
the	O	O
caller	O	O
is	O	O
going	O	O
to	O	O
do	O	O
is	O	O
iterate	O	O
through	O	O
it	O	O
(	O	O
search	O	O
,	O	O
filter	O	O
,	O	O
aggregate	O	O
)	O	O
,	O	O
you	O	O
should	O	O
prefer	O	O
Stream	B-api_mention	B-api_mention
,	O	O
since	O	O
Stream	B-api_mention	B-api_mention
has	O	O
these	O	O
built	O	O
-	O	O
in	O	O
already	O	O
and	O	O
there	O	O
'	O	O
s	O	O
no	O	O
need	O	O
to	O	O
materialize	O	O
a	O	O
collection	O	O
(	O	O
especially	O	O
if	O	O
the	O	O
user	O	O
might	O	O
not	O	O
process	O	O
the	O	O
whole	O	O
result	O	O
.	O	O
)	O	O
This	O	O
is	O	O
a	O	O
very	O	O
common	O	O
case	O	O
.	O	O
Even	O	O
if	O	O
you	O	O
know	O	O
that	O	O
the	O	O
user	O	O
will	O	O
iterate	O	O
it	O	O
multiple	O	O
times	O	O
or	O	O
otherwise	O	O
keep	O	O
it	O	O
around	O	O
,	O	O
you	O	O
still	O	O
may	O	O
want	O	O
to	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
instead	O	O
,	O	O
for	O	O
the	O	O
simple	O	O
fact	O	O
that	O	O
whatever	O	O
Collection	B-api_mention	B-api_mention
you	O	O
choose	O	O
to	O	O
put	O	O
it	O	O
in	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
ArrayList	B-api_mention	B-api_mention
)	O	O
may	O	O
not	O	O
be	O	O
the	O	O
form	O	O
they	O	O
want	O	O
,	O	O
and	O	O
then	O	O
the	O	O
caller	O	O
has	O	O
to	O	O
copy	O	O
it	O	O
anyway	O	O
.	O	O
if	O	O
you	O	O
return	O	O
a	O	O
stream	O	O
,	O	O
they	O	O
can	O	O
do	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
get	O	O
it	O	O
in	O	O
exactly	O	O
the	O	O
form	O	O
they	O	O
want	O	O
.	O	O
The	O	O
above	O	O
"	O	O
prefer	O	O
Stream	O	B-api_mention
"	O	O
cases	O	O
mostly	O	O
derive	O	O
from	O	O
the	O	O
fact	O	O
that	O	O
Stream	B-api_mention	B-api_mention
is	O	O
more	O	O
flexible	O	O
;	O	O
you	O	O
can	O	O
late	O	O
-	O	O
bind	O	O
to	O	O
how	O	O
you	O	O
use	O	O
it	O	O
without	O	O
incurring	O	O
the	O	O
costs	O	O
and	O	O
constraints	O	O
of	O	O
materializing	O	O
it	O	O
to	O	O
a	O	O
Collection	B-api_mention	B-api_mention
.	O	O
The	O	O
one	O	O
case	O	O
where	O	O
you	O	O
must	O	O
return	O	O
a	O	O
Collection	B-api_mention	B-api_mention
is	O	O
when	O	O
there	O	O
are	O	O
strong	O	O
consistency	O	O
requirements	O	O
,	O	O
and	O	O
you	O	O
have	O	O
to	O	O
produce	O	O
a	O	O
consistent	O	O
snapshot	O	O
of	O	O
a	O	O
moving	O	O
target	O	O
.	O	O
Then	O	O
,	O	O
you	O	O
will	O	O
want	O	O
put	O	O
the	O	O
elements	O	O
into	O	O
a	O	O
collection	O	O
that	O	O
will	O	O
not	O	O
change	O	O
.	O	O
So	O	O
I	O	O
would	O	O
say	O	O
that	O	O
most	O	O
of	O	O
the	O	O
time	O	O
,	O	O
Stream	B-api_mention	B-api_mention
is	O	O
the	O	O
right	O	O
answer	O	O
-	O	O
-	O	O
it	O	O
is	O	O
more	O	O
flexible	O	O
,	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
impose	O	O
usually	O	O
-	O	O
unnecessary	O	O
materialization	O	O
costs	O	O
,	O	O
and	O	O
can	O	O
be	O	O
easily	O	O
turned	O	O
into	O	O
the	O	O
Collection	B-api_mention	B-api_mention
of	O	O
your	O	O
choice	O	O
if	O	O
needed	O	O
.	O	O
But	O	O
sometimes	O	O
,	O	O
you	O	O
may	O	O
have	O	O
to	O	O
return	O	O
a	O	O
Collection	B-api_mention	B-api_mention
(	O	O
say	O	O
,	O	O
due	O	O
to	O	O
strong	O	O
consistency	O	O
requirements	O	O
)	O	O
,	O	O
or	O	O
you	O	O
may	O	O
want	O	O
to	O	O
return	O	O
Collection	B-api_mention	B-api_mention
because	O	O
you	O	O
know	O	O
how	O	O
the	O	O
user	O	O
will	O	O
be	O	O
using	O	O
it	O	O
and	O	O
know	O	O
this	O	O
is	O	O
the	O	O
most	O	O
convenient	O	O
thing	O	O
for	O	O
them	O	O
.	O	O
Question	O	O
-	O	O
20363719	O	O
,	O	O
answer	O	O
-	O	O
34675066	O	O
I	O	O
was	O	O
trying	O	O
to	O	O
do	O	O
this	O	O
and	O	O
found	O	O
that	O	O
,	O	O
using	O	O
the	O	O
answers	O	O
above	O	O
,	O	O
when	O	O
using	O	O
Functions	O	B-api_mention
.	B-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
the	O	O
key	O	O
to	O	O
the	O	O
Map	B-api_mention	B-api_mention
,	O	O
then	O	O
I	O	O
had	O	O
issues	O	O
with	O	O
using	O	O
a	O	O
local	O	O
method	O	O
like	O	O
this	O	O
:	O	O
:	O	O
localMethodName	O	O
to	O	O
actually	O	O
work	O	O
because	O	O
of	O	O
typing	O	O
issues	O	O
.	O	O
Functions	O	B-api_mention
.	B-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
actually	O	O
does	O	O
something	O	O
to	O	O
the	O	O
typing	O	O
in	O	O
this	O	O
case	O	O
so	O	O
the	O	O
method	O	O
would	O	O
only	O	O
work	O	O
by	O	O
returning	O	O
Object	B-api_mention	B-api_mention
and	O	O
accepting	O	O
a	O	O
param	O	O
of	O	O
Object	B-api_mention	B-api_mention
To	O	O
solve	O	O
this	O	O
,	O	O
I	O	O
ended	O	O
up	O	O
ditching	O	O
Functions	O	B-api_mention
.	B-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
using	O	O
s	O	O
-	O	O
>	O	O
s	O	O
instead	O	O
.	O	O
So	O	O
my	O	O
code	O	O
,	O	O
in	O	O
my	O	O
case	O	O
to	O	O
list	O	O
all	O	O
directories	O	O
inside	O	O
a	O	O
directory	O	O
,	O	O
and	O	O
for	O	O
each	O	O
one	O	O
use	O	O
the	O	O
name	O	O
of	O	O
the	O	O
directory	O	O
as	O	O
the	O	O
key	O	O
to	O	O
the	O	O
map	O	O
and	O	O
then	O	O
call	O	O
a	O	O
method	O	O
with	O	O
the	O	O
directory	O	O
name	O	O
and	O	O
return	O	O
a	O	O
collection	O	O
of	O	O
items	O	O
,	O	O
looks	O	O
like	O	O
:	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
items	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
6416706	O	O
,	O	O
answer	O	O
-	O	O
6416788	O	O
As	O	O
soon	O	O
as	O	O
you	O	O
call	O	O
contains	B-api_mention	O
,	O	O
containsAll	B-api_mention	B-api_mention
,	O	O
equals	B-api_mention	O
,	O	O
hashCode	B-api_mention	O
,	O	O
remove	B-api_mention	O
,	O	O
retainAll	B-api_mention	B-api_mention
,	O	O
size	B-api_mention	O
or	O	O
toArray	B-api_mention	B-api_mention
,	O	O
you	O	O
'	O	O
d	O	O
have	O	O
to	O	O
traverse	O	O
the	O	O
elements	O	O
anyway	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
occasionally	O	O
only	O	O
calling	O	O
methods	O	O
such	O	O
as	O	O
isEmpty	B-api_mention	B-api_mention
or	O	O
clear	O	O
I	O	O
suppose	O	O
you	O	O
'	O	O
d	O	O
be	O	O
better	O	O
of	O	O
by	O	O
creating	O	O
the	O	O
collection	O	O
lazily	O	O
.	O	O
You	O	O
could	O	O
for	O	O
instance	O	O
have	O	O
a	O	O
backing	O	O
ArrayList	B-api_mention	B-api_mention
for	O	O
storing	O	O
previously	O	O
iterated	O	O
elements	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
of	O	O
any	O	O
such	O	O
class	O	O
in	O	O
any	O	O
library	O	O
,	O	O
but	O	O
it	O	O
should	O	O
be	O	O
a	O	O
fairly	O	O
simple	O	O
exercise	O	O
to	O	O
write	O	O
up	O	O
.	O	O
Question	O	O
-	O	O
22740464	O	O
,	O	O
answer	O	O
-	O	O
22741520	O	O
Unfortunately	O	O
this	O	O
answer	O	O
is	O	O
probably	O	O
of	O	O
little	O	O
or	O	O
no	O	O
help	O	O
whatsoever	O	O
,	O	O
but	O	O
I	O	O
did	O	O
a	O	O
forensics	O	O
analysis	O	O
of	O	O
the	O	O
Java	O	O
Lambda	B-api_mention	O
Mailing	O	O
list	O	O
to	O	O
see	O	O
if	O	O
I	O	O
could	O	O
find	O	O
the	O	O
cause	O	O
of	O	O
this	O	O
design	O	O
.	O	O
This	O	O
is	O	O
what	O	O
I	O	O
found	O	O
out	O	O
.	O	O
In	O	O
the	O	O
beginning	O	O
there	O	O
was	O	O
an	O	O
instance	O	O
method	O	O
for	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
Stream	I-api_mention	I-api_mention
)	I-api_mention	O
In	O	O
the	O	O
mailing	O	O
list	O	O
I	O	O
can	O	O
clearly	O	O
see	O	O
the	O	O
method	O	O
was	O	O
originally	O	O
implemented	O	O
as	O	O
an	O	O
instance	O	O
method	O	O
,	O	O
as	O	O
you	O	O
can	O	O
read	O	O
in	O	O
this	O	O
thread	O	O
by	O	O
Paul	O	O
Sandoz	O	O
,	O	O
about	O	O
the	O	O
concat	B-api_mention	O
operation	O	O
.	O	O
In	O	O
it	O	O
they	O	O
discuss	O	O
the	O	O
issues	O	O
that	O	O
could	O	O
arise	O	O
from	O	O
those	O	O
cases	O	O
in	O	O
which	O	O
the	O	O
stream	O	O
could	O	O
be	O	O
infinite	O	O
and	O	O
what	O	O
concatenation	O	O
would	O	O
mean	O	O
in	O	O
those	O	O
cases	O	O
,	O	O
but	O	O
I	O	O
do	O	O
not	O	O
think	O	O
that	O	O
was	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
modification	O	O
.	O	O
You	O	O
see	O	O
in	O	O
this	O	O
other	O	O
thread	O	O
that	O	O
some	O	O
early	O	O
users	O	O
of	O	O
the	O	O
JDK	O	O
8	O	O
questioned	O	O
about	O	O
the	O	O
behavior	O	O
of	O	O
the	O	O
concat	O	O
instance	O	O
method	O	O
when	O	O
used	O	O
with	O	O
null	O	O
arguments	O	O
.	O	O
This	O	O
other	O	O
thread	O	O
reveals	O	O
,	O	O
though	O	O
,	O	O
that	O	O
the	O	O
design	O	O
of	O	O
the	O	O
concat	O	O
method	O	O
was	O	O
under	O	O
discussion	O	O
.	O	O
Refactored	O	O
to	O	O
Streams	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	O	I-api_mention
Stream	B-api_mention	I-api_mention
,	O	O
Stream	B-api_mention	B-api_mention
)	O	O
But	O	O
without	O	O
any	O	O
explanation	O	O
,	O	O
suddenly	O	O
,	O	O
the	O	O
methods	O	O
were	O	O
changed	O	O
to	O	O
static	O	O
methods	O	O
,	O	O
as	O	O
you	O	O
can	O	O
see	O	O
in	O	O
this	O	O
thread	O	O
about	O	O
combining	O	O
streams	O	O
.	O	O
This	O	O
is	O	O
perhaps	O	O
the	O	O
only	O	O
mail	O	O
thread	O	O
that	O	O
sheds	O	O
a	O	O
bit	O	O
of	O	O
light	O	O
about	O	O
this	O	O
change	O	O
,	O	O
but	O	O
it	O	O
was	O	O
not	O	O
clear	O	O
enough	O	O
for	O	O
me	O	O
to	O	O
determine	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
refactoring	O	O
.	O	O
But	O	O
we	O	O
can	O	O
see	O	O
they	O	O
did	O	O
a	O	O
commit	O	O
in	O	O
which	O	O
they	O	O
suggested	O	O
to	O	O
move	O	O
the	O	O
concat	O	O
method	O	O
out	O	O
of	O	O
Stream	B-api_mention	B-api_mention
and	O	O
into	O	O
the	O	O
helper	O	O
class	O	O
Streams	B-api_mention	B-api_mention
.	O	O
Refactored	O	O
to	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	O	I-api_mention
Stream	B-api_mention	I-api_mention
,	O	O
Stream	B-api_mention	B-api_mention
)	O	O
Later	O	O
,	O	O
it	O	O
was	O	O
moved	O	O
again	O	O
from	O	O
Streams	B-api_mention	B-api_mention
to	O	O
Stream	B-api_mention	B-api_mention
,	O	O
but	O	O
yet	O	O
again	O	O
,	O	O
no	O	O
explanation	O	O
for	O	O
that	O	O
.	O	O
So	O	O
,	O	O
bottom	O	O
line	O	O
,	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
design	O	O
is	O	O
not	O	O
entirely	O	O
clear	O	O
for	O	O
me	O	O
and	O	O
I	O	O
could	O	O
not	O	O
find	O	O
a	O	O
good	O	O
explanation	O	O
.	O	O
I	O	O
guess	O	O
you	O	O
could	O	O
still	O	O
ask	O	O
the	O	O
question	O	O
in	O	O
the	O	O
mailing	O	O
list	O	O
.	O	O
Some	O	O
Alternatives	O	O
for	O	O
Stream	B-api_mention	B-api_mention
Concatenation	O	O
This	O	O
other	O	O
thread	O	O
by	O	O
Michael	O	O
Hixson	O	O
discusses	O	O
/	O	O
asks	O	O
about	O	O
other	O	O
ways	O	O
to	O	O
combine	O	O
/	O	O
concat	O	O
streams	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
5554217	O	O
,	O	O
answer	O	O
-	O	O
17300003	O	O
Another	O	O
way	O	O
is	O	O
to	O	O
use	O	O
an	O	O
array	O	O
as	O	O
a	O	O
type	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
:	O	O
MyClass	O	O
[	O	O
]	O	O
mcArray	O	O
=	O	O
gson	O	O
.	B-api_mention	B-api_mention
fromJson	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
way	O	O
you	O	O
avoid	O	O
all	O	O
the	O	O
hassle	O	O
with	O	O
the	O	O
Type	B-api_mention	O
object	O	O
,	O	O
and	O	O
if	O	O
you	O	O
really	O	O
need	O	O
a	O	O
list	O	O
you	O	O
can	O	O
always	O	O
convert	O	O
the	O	O
array	O	O
to	O	O
a	O	O
list	O	O
by	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
mcList	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
IMHO	O	O
this	O	O
is	O	O
much	O	O
more	O	O
readable	O	O
.	O	O
And	O	O
to	O	O
make	O	O
it	O	O
be	O	O
an	O	O
actual	O	O
list	O	O
(	O	O
that	O	O
can	O	O
be	O	O
modified	O	O
,	O	O
see	O	O
limitations	O	O
of	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
then	O	O
just	O	O
do	O	O
the	O	O
following	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
mcList	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
17828584	O	O
I	O	O
was	O	O
wondering	O	O
what	O	O
happens	O	O
when	O	O
you	O	O
try	O	O
to	O	O
catch	O	O
an	O	O
StackOverflowError	B-api_mention	B-api_mention
and	O	O
came	O	O
up	O	O
with	O	O
the	O	O
following	O	O
method	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
my	O	O
question	O	O
:	O	O
Why	O	O
does	O	O
this	O	O
method	O	O
print	O	O
'	O	O
4	O	O
'	O	O
?	O	O
I	O	O
thought	O	O
maybe	O	O
it	O	O
was	O	O
because	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
needs	O	O
3	O	O
segments	O	O
on	O	O
the	O	O
call	O	O
stack	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
where	O	O
the	O	O
number	O	O
3	O	O
comes	O	O
from	O	O
.	O	O
When	O	O
you	O	O
look	O	O
at	O	O
the	O	O
source	O	O
code	O	O
(	O	O
and	O	O
bytecode	O	O
)	O	O
of	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
it	O	O
normally	O	O
would	O	O
lead	O	O
to	O	O
far	O	O
more	O	O
method	O	O
invocations	O	O
than	O	O
3	O	O
(	O	O
so	O	O
3	O	O
segments	O	O
on	O	O
the	O	O
call	O	O
stack	O	O
would	O	O
not	O	O
be	O	O
sufficient	O	O
)	O	O
.	O	O
If	O	O
it	O	O
'	O	O
s	O	O
because	O	O
of	O	O
optimizations	O	O
the	O	O
Hotspot	O	O
VM	O	O
applies	O	O
(	O	O
method	O	O
inlining	O	O
)	O	O
,	O	O
I	O	O
wonder	O	O
if	O	O
the	O	O
result	O	O
would	O	O
be	O	O
different	O	O
on	O	O
another	O	O
VM	O	O
.	O	O
Edit	O	O
:	O	O
As	O	O
the	O	O
output	O	O
seems	O	O
to	O	O
be	O	O
highly	O	O
JVM	O	O
specific	O	O
,	O	O
I	O	O
get	O	O
the	O	O
result	O	O
4	O	O
using	O	O
Java	O	O
(	O	O
TM	O	O
)	O	O
SE	O	O
Runtime	O	O
Environment	O	O
(	O	O
build	O	O
1	O	O
.	O	O
6	O	O
.	O	O
0	O	O
_	O	O
41	O	O
-	O	O
b02	O	O
)	O	O
Java	O	O
HotSpot	O	O
(	O	O
TM	O	O
)	O	O
64	O	O
-	O	O
Bit	O	O
Server	O	O
VM	O	O
(	O	O
build	O	O
20	O	O
.	O	O
14	O	O
-	O	O
b01	O	O
,	O	O
mixed	O	O
mode	O	O
)	O	O
Explanation	O	O
why	O	O
I	O	O
think	O	O
this	O	O
question	O	O
is	O	O
different	O	O
from	O	O
Understanding	O	O
java	O	O
stack	O	O
:	O	O
My	O	O
question	O	O
is	O	O
not	O	O
about	O	O
why	O	O
there	O	O
is	O	O
a	O	O
cnt	O	O
>	O	O
0	O	O
(	O	O
obviously	O	O
because	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
requires	O	O
stack	O	O
size	O	O
and	O	O
throws	O	O
another	O	O
StackOverflowError	B-api_mention	B-api_mention
before	O	O
something	O	O
gets	O	O
printed	O	O
)	O	O
,	O	O
but	O	O
why	O	O
it	O	O
has	O	O
the	O	O
particular	O	O
value	O	O
of	O	O
4	O	O
,	O	O
respectively	O	O
0	O	O
,	O	O
3	O	O
,	O	O
8	O	O
,	O	O
55	O	O
or	O	O
something	O	O
else	O	O
on	O	O
other	O	O
systems	O	O
.	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
20177092	O	O
The	O	O
better	O	O
practice	O	O
is	O	O
to	O	O
use	O	O
for	O	O
-	O	O
each	O	O
.	O	O
Besides	O	O
violating	O	O
the	O	O
Keep	O	O
It	O	O
Simple	O	O
,	O	O
Stupid	O	O
principle	O	O
,	O	O
the	O	O
new	O	O
-	O	O
fangled	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
has	O	O
at	O	O
least	O	O
the	O	O
following	O	O
deficiencies	O	O
:	O	O
#	O	O
li	O	O
Can	O	O
'	O	O
t	O	O
use	O	O
non	O	O
-	O	O
final	O	O
variables	O	O
.	O	O
So	O	O
,	O	O
code	O	O
like	O	O
the	O	O
following	O	O
can	O	O
'	O	O
t	O	O
be	O	O
turned	O	O
into	O	O
a	O	O
forEach	B-api_mention	O
lambda	O	O
:	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Can	O	O
'	O	O
t	O	O
handle	O	O
checked	O	O
exceptions	O	O
.	O	O
Lambdas	B-api_mention	O
aren	O	O
'	O	O
t	O	O
actually	O	O
forbidden	O	O
from	O	O
throwing	O	O
checked	O	O
exceptions	O	O
,	O	O
but	O	O
common	O	O
functional	O	O
interfaces	O	O
like	O	O
Consumer	B-api_mention	O
don	O	O
'	O	O
t	O	O
declare	O	O
any	O	O
.	O	O
Therefore	O	O
,	O	O
any	O	O
code	O	O
that	O	O
throws	O	O
checked	O	O
exceptions	O	O
must	O	O
wrap	O	O
them	O	O
in	O	O
try	O	O
-	O	O
catch	O	O
or	O	O
Throwables	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
propagate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
even	O	O
if	O	O
you	O	O
do	O	O
that	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
always	O	O
clear	O	O
what	O	O
happens	O	O
to	O	O
the	O	O
thrown	O	O
exception	O	O
.	O	O
It	O	O
could	O	O
get	O	O
swallowed	O	O
somewhere	O	O
in	O	O
the	O	O
guts	O	O
of	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Limited	O	O
flow	O	O
-	O	O
control	O	O
.	O	O
A	O	O
return	O	O
in	O	O
a	O	O
lambda	O	O
equals	O	O
a	O	O
continue	O	O
in	O	O
a	O	O
for	O	O
-	O	O
each	O	O
,	O	O
but	O	O
there	O	O
is	O	O
no	O	O
equivalent	O	O
to	O	O
a	O	O
break	O	O
.	O	O
It	O	O
'	O	O
s	O	O
also	O	O
difficult	O	O
to	O	O
do	O	O
things	O	O
like	O	O
return	O	O
values	O	O
,	O	O
short	O	O
circuit	O	O
,	O	O
or	O	O
set	O	O
flags	O	O
(	O	O
which	O	O
would	O	O
have	O	O
alleviated	O	O
things	O	O
a	O	O
bit	O	O
,	O	O
if	O	O
it	O	O
wasn	O	O
'	O	O
t	O	O
a	O	O
violation	O	O
of	O	O
the	O	O
no	O	O
non	O	O
-	O	O
final	O	O
variables	O	O
rule	O	O
)	O	O
.	O	O
"	O	O
This	O	O
is	O	O
not	O	O
just	O	O
an	O	O
optimization	O	O
,	O	O
but	O	O
critical	O	O
when	O	O
you	O	O
consider	O	O
that	O	O
some	O	O
sequences	O	O
(	O	O
like	O	O
reading	O	O
the	O	O
lines	O	O
in	O	O
a	O	O
file	O	O
)	O	O
may	O	O
have	O	O
side	O	O
-	O	O
effects	O	O
,	O	O
or	O	O
you	O	O
may	O	O
have	O	O
an	O	O
infinite	O	O
sequence	O	O
.	O	O
"	O	O
#	O	O
li	O	O
Might	O	O
execute	O	O
in	O	O
parallel	O	O
,	O	O
which	O	O
is	O	O
a	O	O
horrible	O	O
,	O	O
horrible	O	O
thing	O	O
for	O	O
all	O	O
but	O	O
the	O	O
0	O	O
.	O	O
1	O	O
%	O	O
of	O	O
your	O	O
code	O	O
that	O	O
needs	O	O
to	O	O
be	O	O
optimized	O	O
.	O	O
Any	O	O
parallel	O	O
code	O	O
has	O	O
to	O	O
be	O	O
thought	O	O
through	O	O
(	O	O
even	O	O
if	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
use	O	O
locks	O	O
,	O	O
volatiles	O	O
,	O	O
and	O	O
other	O	O
particularly	O	O
nasty	O	O
aspects	O	O
of	O	O
traditional	O	O
multi	O	O
-	O	O
threaded	O	O
execution	O	O
)	O	O
.	O	O
Any	O	O
bug	O	O
will	O	O
be	O	O
tough	O	O
to	O	O
find	O	O
.	O	O
#	O	O
li	O	O
Might	O	O
hurt	O	O
performance	O	O
,	O	O
because	O	O
the	O	O
JIT	O	O
can	O	O
'	O	O
t	O	O
optimize	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
+	O	O
lambda	O	O
to	O	O
the	O	O
same	O	O
extent	O	O
as	O	O
plain	O	O
loops	O	O
,	O	O
especially	O	O
now	O	O
that	O	O
lambdas	O	O
are	O	O
new	O	O
.	O	O
By	O	O
"	O	O
optimization	O	O
"	O	O
I	O	O
do	O	O
not	O	O
mean	O	O
the	O	O
overhead	O	O
of	O	O
calling	O	O
lambdas	O	O
(	O	O
which	O	O
is	O	O
small	O	O
)	O	O
,	O	O
but	O	O
to	O	O
the	O	O
sophisticated	O	O
analysis	O	O
and	O	O
transformation	O	O
that	O	O
the	O	O
modern	O	O
JIT	O	O
compiler	O	O
performs	O	O
on	O	O
running	O	O
code	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
do	O	O
need	O	O
parallelism	O	O
,	O	O
it	O	O
is	O	O
probably	O	O
much	O	O
faster	O	O
and	O	O
not	O	O
much	O	O
more	O	O
difficult	O	O
to	O	O
use	O	O
an	O	O
ExecutorService	B-api_mention	B-api_mention
.	O	O
Streams	B-api_mention	B-api_mention
are	O	O
both	O	O
automagical	O	O
(	O	O
read	O	O
:	O	O
don	O	O
'	O	O
t	O	O
know	O	O
much	O	O
about	O	O
your	O	O
problem	O	O
)	O	O
and	O	O
use	O	O
a	O	O
specialized	O	O
(	O	O
read	O	O
:	O	O
inefficient	O	O
for	O	O
the	O	O
general	O	O
case	O	O
)	O	O
parallelization	O	O
strategy	O	O
(	O	O
fork	O	O
-	O	O
join	O	O
recursive	O	O
decomposition	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Makes	O	O
debugging	O	O
more	O	O
confusing	O	O
,	O	O
because	O	O
of	O	O
the	O	O
nested	O	O
call	O	O
hierarchy	O	O
and	O	O
,	O	O
god	O	O
forbid	O	O
,	O	O
parallel	O	O
execution	O	O
.	O	O
The	O	O
debugger	O	O
may	O	O
have	O	O
issues	O	O
displaying	O	O
variables	O	O
from	O	O
the	O	O
surrounding	O	O
code	O	O
,	O	O
and	O	O
things	O	O
like	O	O
step	O	O
-	O	O
through	O	O
may	O	O
not	O	O
work	O	O
as	O	O
expected	O	O
.	O	O
#	O	O
li	O	O
Streams	B-api_mention	B-api_mention
in	O	O
general	O	O
are	O	O
more	O	O
difficult	O	O
to	O	O
code	O	O
,	O	O
read	O	O
,	O	O
and	O	O
debug	O	O
.	O	O
Actually	O	O
,	O	O
this	O	O
is	O	O
true	O	O
of	O	O
complex	O	O
"	O	O
fluent	O	O
"	O	O
APIs	O	O
in	O	O
general	O	O
.	O	O
The	O	O
combination	O	O
of	O	O
complex	O	O
single	O	O
statements	O	O
,	O	O
heavy	O	O
use	O	O
of	O	O
generics	O	O
,	O	O
and	O	O
lack	O	O
of	O	O
intermediate	O	O
variables	O	O
conspire	O	O
to	O	O
produce	O	O
confusing	O	O
error	O	O
messages	O	O
and	O	O
frustrate	O	O
debugging	O	O
.	O	O
Instead	O	O
of	O	O
"	O	O
this	O	O
method	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
an	O	O
overload	O	O
for	O	O
type	O	O
X	O	O
"	O	O
you	O	O
get	O	O
an	O	O
error	O	O
message	O	O
closer	O	O
to	O	O
"	O	O
somewhere	O	O
you	O	O
messed	O	O
up	O	O
the	O	O
types	O	O
,	O	O
but	O	O
we	O	O
don	O	O
'	O	O
t	O	O
know	O	O
where	O	O
or	O	O
how	O	O
.	O	O
"	O	O
Similarly	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
step	O	O
through	O	O
and	O	O
examine	O	O
things	O	O
in	O	O
a	O	O
debugger	O	O
as	O	O
easily	O	O
as	O	O
when	O	O
the	O	O
code	O	O
is	O	O
broken	O	O
into	O	O
multiple	O	O
statements	O	O
,	O	O
and	O	O
intermediate	O	O
values	O	O
are	O	O
saved	O	O
to	O	O
variables	O	O
.	O	O
Finally	O	O
,	O	O
reading	O	O
the	O	O
code	O	O
and	O	O
understanding	O	O
the	O	O
types	O	O
and	O	O
behavior	O	O
at	O	O
each	O	O
stage	O	O
of	O	O
execution	O	O
may	O	O
be	O	O
non	O	O
-	O	O
trivial	O	O
.	O	O
#	O	O
li	O	O
Sticks	O	O
out	O	O
like	O	O
a	O	O
sore	O	O
thumb	O	O
.	O	O
The	O	O
Java	O	O
language	O	O
already	O	O
has	O	O
the	O	O
for	O	O
-	O	O
each	O	O
statement	O	O
.	O	O
Why	O	O
replace	O	O
it	O	O
with	O	O
a	O	O
function	O	O
call	O	O
?	O	O
Why	O	O
encourage	O	O
hiding	O	O
side	O	O
-	O	O
effects	O	O
somewhere	O	O
in	O	O
expressions	O	O
?	O	O
Why	O	O
encourage	O	O
unwieldy	O	O
one	O	O
-	O	O
liners	O	O
?	O	O
Mixing	O	O
regular	O	O
for	O	O
-	O	O
each	O	O
and	O	O
new	O	O
forEach	B-api_mention	B-api_mention
willy	O	O
-	O	O
nilly	O	O
is	O	O
bad	O	O
style	O	O
.	O	O
Code	O	O
should	O	O
speak	O	O
in	O	O
idioms	O	O
(	O	O
patterns	O	O
that	O	O
are	O	O
quick	O	O
to	O	O
comprehend	O	O
due	O	O
to	O	O
their	O	O
repetition	O	O
)	O	O
,	O	O
and	O	O
the	O	O
fewer	O	O
idioms	O	O
are	O	O
used	O	O
the	O	O
clearer	O	O
the	O	O
code	O	O
is	O	O
and	O	O
less	O	O
time	O	O
is	O	O
spent	O	O
deciding	O	O
which	O	O
idiom	O	O
to	O	O
use	O	O
(	O	O
a	O	O
big	O	O
time	O	O
-	O	O
drain	O	O
for	O	O
perfectionists	O	O
like	O	O
myself	O	O
!	O	O
)	O	O
.	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
I	O	O
'	O	O
m	O	O
not	O	O
a	O	O
big	O	O
fan	O	O
of	O	O
the	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
except	O	O
in	O	O
cases	O	O
when	O	O
it	O	O
makes	O	O
sense	O	O
.	O	O
Particularly	O	O
offensive	O	O
to	O	O
me	O	O
is	O	O
the	O	O
fact	O	O
that	O	O
Stream	B-api_mention	B-api_mention
does	O	O
not	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
despite	O	O
actually	O	O
having	O	O
method	O	O
iterator	O	O
)	O	O
and	O	O
cannot	O	O
be	O	O
used	O	O
in	O	O
a	O	O
for	O	O
-	O	O
each	O	O
,	O	O
only	O	O
with	O	O
a	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
recommend	O	O
casting	O	O
Streams	B-api_mention	B-api_mention
into	O	O
Iterables	B-api_mention	O
with	O	O
(	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
stream	O	O
:	O	O
:	O	O
iterator	O	O
.	O	O
A	O	O
better	O	O
alternative	O	O
is	O	O
to	O	O
use	O	O
StreamEx	O	O
which	O	O
fixes	O	O
a	O	O
number	O	O
of	O	O
Stream	B-api_mention	B-api_mention
API	O	O
problems	O	O
,	O	O
including	O	O
implementing	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
That	O	O
said	O	O
,	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
useful	O	O
for	O	O
the	O	O
following	O	O
:	O	O
#	O	O
li	O	O
Atomically	O	O
iterating	O	O
over	O	O
a	O	O
synchronized	O	O
list	O	O
.	O	O
Prior	O	O
to	O	O
this	O	O
,	O	O
a	O	O
list	O	O
generated	O	O
with	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
synchronizedList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
atomic	O	O
with	O	O
respect	O	O
to	O	O
things	O	O
like	O	O
get	O	O
or	O	O
set	O	O
,	O	O
but	O	O
was	O	O
not	O	O
thread	O	O
-	O	O
safe	O	O
when	O	O
iterating	O	O
.	O	O
#	O	O
li	O	O
Parallel	O	O
execution	O	O
(	O	O
using	O	O
an	O	O
appropriate	O	O
parallel	O	O
stream	O	O
)	O	O
.	O	O
This	O	O
saves	O	O
you	O	O
a	O	O
few	O	O
lines	O	O
of	O	O
code	O	O
vs	O	O
using	O	O
an	O	O
ExecutorService	B-api_mention	B-api_mention
,	O	O
if	O	O
your	O	O
problem	O	O
matches	O	O
the	O	O
performance	O	O
assumptions	O	O
built	O	O
into	O	O
Streams	B-api_mention	B-api_mention
and	O	O
Spliterators	B-api_mention	O
.	O	O
#	O	O
li	O	O
Specific	O	O
containers	O	O
which	O	O
,	O	O
like	O	O
the	O	O
synchronized	O	O
list	O	O
,	O	O
benefit	O	O
from	O	O
being	O	O
in	O	O
control	O	O
of	O	O
iteration	O	O
(	O	O
although	O	O
this	O	O
is	O	O
largely	O	O
theoretical	O	O
unless	O	O
people	O	O
can	O	O
bring	O	O
up	O	O
more	O	O
examples	O	O
)	O	O
#	O	O
li	O	O
Calling	O	O
a	O	O
single	O	O
function	O	O
more	O	O
cleanly	O	O
by	O	O
using	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
a	O	O
method	O	O
reference	O	O
argument	O	O
(	O	O
ie	O	O
,	O	O
list	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
However	O	O
,	O	O
keep	O	O
in	O	O
mind	O	O
the	O	O
points	O	O
on	O	O
checked	O	O
exceptions	O	O
,	O	O
more	O	O
difficult	O	O
debugging	O	O
,	O	O
and	O	O
reducing	O	O
the	O	O
number	O	O
of	O	O
idioms	O	O
you	O	O
use	O	O
when	O	O
writing	O	O
code	O	O
.	O	O
Articles	O	O
I	O	O
used	O	O
for	O	O
reference	O	O
:	O	O
#	O	O
li	O	O
Everything	O	O
about	O	O
Java	O	O
8	O	O
#	O	O
li	O	O
Iteration	O	O
Inside	O	O
and	O	O
Out	O	O
(	O	O
as	O	O
pointed	O	O
out	O	O
by	O	O
another	O	O
poster	O	O
)	O	O
EDIT	O	O
:	O	O
Looks	O	O
like	O	O
some	O	O
of	O	O
the	O	O
original	O	O
proposals	O	O
for	O	O
lambdas	O	O
(	O	O
such	O	O
as	O	O
#	O	O
a	O	O
)	O	O
solved	O	O
some	O	O
of	O	O
the	O	O
issues	O	O
I	O	O
mentioned	O	O
(	O	O
while	O	O
adding	O	O
their	O	O
own	O	O
complications	O	O
,	O	O
of	O	O
course	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846960	O	O
From	O	O
Effective	O	O
Java	O	O
,	O	O
Item	O	B-api_mention
#	O	O
43	O	O
-	O	O
StringLiteral	O	O
demonstrates	O	O
returning	O	O
an	O	O
empty	O	O
collection	O	O
and	O	O
perhaps	O	O
even	O	O
demonstrates	O	O
using	O	O
these	O	O
emptyList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
emptySet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
emptyMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
on	O	O
the	O	O
Collections	B-api_mention	B-api_mention
class	O	O
to	O	O
get	O	O
an	O	O
empty	O	O
collection	O	O
that	O	O
also	O	O
has	O	O
the	O	O
additional	O	O
benefit	O	O
of	O	O
being	O	O
immutable	O	O
.	O	O
From	O	O
Item	O	B-api_mention
#	O	O
15	O	O
StringLiteral	O	O
.	O	O
From	O	O
Collections	B-api_mention	B-api_mention
-	O	O
emptySet	B-api_mention	O
-	O	O
Collections	B-api_mention	O
-	O	O
emptyList	B-api_mention	O
-	O	O
Collections	B-api_mention	B-api_mention
#	O	O
blockquote	O	O
Note	O	O
:	O	O
Below	O	O
code	O	O
is	O	O
just	O	O
an	O	O
example	O	O
(	O	O
change	O	O
it	O	O
according	O	O
to	O	O
your	O	O
use	O	O
case	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
These	O	O
methods	O	O
offer	O	O
a	O	O
couple	O	O
of	O	O
advantages	O	O
:	O	O
#	O	O
li	O	O
They	O	O
'	O	O
re	O	O
more	O	O
concise	O	O
because	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
explicitly	O	O
type	O	O
out	O	O
the	O	O
generic	O	O
type	O	O
of	O	O
the	O	O
collection	O	O
-	O	O
it	O	O
'	O	O
s	O	O
generally	O	O
just	O	O
inferred	O	O
from	O	O
the	O	O
context	O	O
of	O	O
the	O	O
method	O	O
call	O	O
.	O	O
#	O	O
li	O	O
They	O	O
'	O	O
re	O	O
more	O	O
efficient	O	O
because	O	O
they	O	O
don	O	O
'	O	O
t	O	O
bother	O	O
creating	O	O
new	O	O
objects	O	O
;	O	O
they	O	O
just	O	O
re	O	O
-	O	O
use	O	O
an	O	O
existing	O	O
empty	O	O
and	O	O
immutable	O	O
object	O	O
.	O	O
This	O	O
effect	O	O
is	O	O
generally	O	O
very	O	O
minor	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
occasionally	O	O
(	O	O
well	O	O
,	O	O
rarely	O	O
)	O	O
important	O	O
.	O	O
Question	O	O
-	O	O
5673260	O	O
,	O	O
answer	O	O
-	O	O
5673375	O	O
You	O	O
should	O	O
be	O	O
able	O	O
to	O	O
write	O	O
the	O	O
file	O	O
on	O	O
the	O	O
response	O	O
directly	O	O
.	O	O
Something	O	O
like	O	O
#	O	O
pre	O	O
and	O	O
then	O	O
write	O	O
the	O	O
file	O	O
as	O	O
a	O	O
binary	O	O
stream	O	O
on	O	O
response	O	O
.	B-api_mention	B-api_mention
getOutputStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Remember	O	O
to	O	O
do	O	O
response	O	O
.	B-api_mention	B-api_mention
flush	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
at	O	O
the	O	O
end	O	O
and	O	O
that	O	O
should	O	O
do	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
29095967	O	O
I	O	O
have	O	O
this	O	O
list	O	O
(	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
:	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
,	O	O
null	O	O
,	O	O
StringLiteral	O	O
,	O	O
null	O	O
,	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
And	O	O
I	O	O
'	O	O
d	O	O
like	O	O
something	O	O
like	O	O
this	O	O
:	O	O
[	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
,	O	O
[	O	O
StringLiteral	O	O
]	O	O
,	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
]	O	O
In	O	O
other	O	O
words	O	O
I	O	O
want	O	O
to	O	O
split	O	O
my	O	O
list	O	O
in	O	O
sublists	O	O
using	O	O
the	O	O
null	O	O
value	O	O
as	O	O
separator	O	O
,	O	O
in	O	O
order	O	O
to	O	O
obtain	O	O
a	O	O
list	O	O
of	O	O
lists	O	O
(	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
.	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
a	O	O
Java	O	O
8	O	O
solution	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
tried	O	O
with	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
partitioningBy	I-api_mention	I-api_mention
but	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
it	O	O
is	O	O
what	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
.	O	O
Thanks	O	O
!	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923015	O	O
I	O	O
believe	O	O
the	O	O
reson	O	O
of	O	O
being	O	O
is	O	O
you	O	O
have	O	O
to	O	O
first	O	O
check	O	O
whether	O	O
or	O	O
not	O	O
Optional	B-api_mention	B-api_mention
is	O	O
null	O	O
itself	O	O
and	O	O
then	O	O
try	O	O
to	O	O
evaluate	O	O
value	O	O
it	O	O
wraps	O	O
.	O	O
Too	O	O
many	O	O
unnecessary	O	O
validations	O	O
.	O	O
Question	O	O
-	O	O
8894258	O	O
In	O	O
Java	O	O
,	O	O
what	O	O
would	O	O
the	O	O
fastest	O	O
way	O	O
to	O	O
iterate	O	O
over	O	O
all	O	O
the	O	O
chars	O	O
in	O	O
a	O	O
String	B-api_mention	B-api_mention
,	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Or	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
What	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
know	O	O
is	O	O
if	O	O
the	O	O
cost	O	O
of	O	O
repeatedly	O	O
calling	O	O
the	O	O
charAt	B-api_mention	B-api_mention
method	O	O
during	O	O
a	O	O
long	O	O
iteration	O	O
ends	O	O
up	O	O
being	O	O
either	O	O
less	O	O
than	O	O
or	O	O
greater	O	O
than	O	O
the	O	O
cost	O	O
of	O	O
performing	O	O
a	O	O
single	O	O
call	O	O
to	O	O
toCharArray	B-api_mention	B-api_mention
at	O	O
the	O	O
beginning	O	O
and	O	O
then	O	O
directly	O	O
accessing	O	O
the	O	O
array	O	O
during	O	O
the	O	O
iteration	O	O
.	O	O
It	O	O
'	O	O
d	O	O
be	O	O
great	O	O
if	O	O
someone	O	O
could	O	O
provide	O	O
a	O	O
robust	O	O
benchmark	O	O
for	O	O
different	O	O
string	O	O
lengths	O	O
,	O	O
having	O	O
in	O	O
mind	O	O
JIT	O	O
warm	O	O
-	O	O
up	O	O
time	O	O
,	O	O
JVM	O	O
start	O	O
-	O	O
up	O	O
time	O	O
,	O	O
etc	O	O
.	O	O
and	O	O
not	O	O
just	O	O
the	O	O
difference	O	O
between	O	O
two	O	O
calls	O	O
to	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
currentTimeMillis	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
27888429	O	O
,	O	O
answer	O	O
-	O	O
27888452	O	O
Alternative	O	O
to	O	O
@	O	O
sol4me	O	O
'	O	O
s	O	O
solution	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Of	O	O
the	O	O
difference	O	O
between	O	O
this	O	O
and	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
it	O	O
does	O	O
make	O	O
a	O	O
difference	O	O
if	O	O
your	O	O
array	O	O
is	O	O
of	O	O
a	O	O
primitive	O	O
type	O	O
.	O	O
For	O	O
instance	O	O
,	O	O
if	O	O
you	O	O
do	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
where	O	O
someArray	O	O
is	O	O
a	O	O
long	O	O
[	O	O
]	O	O
,	O	O
it	O	O
will	O	O
return	O	O
a	O	O
LongStream	B-api_mention	B-api_mention
.	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
on	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
will	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
with	O	O
a	O	O
single	O	O
element	O	O
.	O	O
Question	O	O
-	O	O
11821801	O	O
,	O	O
answer	O	O
-	O	O
11821900	O	O
A	O	O
ReentrantLock	B-api_mention	B-api_mention
is	O	O
unstructured	O	O
,	O	O
unlike	O	O
synchronized	O	O
constructs	O	O
-	O	O
-	O	O
i	O	O
.	O	O
e	O	O
.	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
use	O	O
a	O	O
block	O	O
structure	O	O
for	O	O
locking	O	O
and	O	O
can	O	O
even	O	O
hold	O	O
a	O	O
lock	O	O
across	O	O
methods	O	O
.	O	O
An	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Such	O	O
flow	O	O
is	O	O
impossible	O	O
to	O	O
represent	O	O
via	O	O
a	O	O
single	O	O
monitor	O	O
in	O	O
a	O	O
synchronized	B-api_mention	O
construct	O	O
.	O	O
Aside	O	O
from	O	O
that	O	O
,	O	O
ReentrantLock	B-api_mention	B-api_mention
supports	O	O
lock	O	O
polling	O	O
and	O	O
interruptible	O	O
lock	O	O
waits	O	O
that	O	O
support	O	O
time	O	O
-	O	O
out	O	O
.	O	O
ReentrantLock	B-api_mention	B-api_mention
also	O	O
has	O	O
support	O	O
for	O	O
configurable	O	O
fairness	O	O
policy	O	O
,	O	O
allowing	O	O
more	O	O
flexible	O	O
thread	O	O
scheduling	O	O
.	O	O
#	O	O
blockquote	O	O
ReentrantLock	B-api_mention	B-api_mention
may	O	O
also	O	O
be	O	O
more	O	O
scalable	O	O
,	O	O
performing	O	O
much	O	O
better	O	O
under	O	O
higher	O	O
contention	O	O
.	O	O
You	O	O
can	O	O
read	O	O
more	O	O
about	O	O
this	O	O
here	O	O
.	O	O
This	O	O
claim	O	O
has	O	O
been	O	O
contested	O	O
,	O	O
however	O	O
;	O	O
see	O	O
the	O	O
following	O	O
comment	O	O
:	O	O
#	O	O
blockquote	O	O
When	O	O
should	O	O
you	O	O
use	O	O
ReentrantLock	B-api_mention	B-api_mention
s	O	O
?	O	O
According	O	O
to	O	O
that	O	O
developerWorks	O	O
article	O	O
.	O	O
.	O	O
.	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
13744450	O	O
,	O	O
answer	O	O
-	O	O
13744816	O	O
In	O	O
very	O	O
simple	O	O
terms	O	O
(	O	O
because	O	O
the	O	O
other	O	O
answers	O	O
are	O	O
referring	O	O
you	O	O
to	O	O
all	O	O
the	O	O
official	O	O
design	O	O
patterns	O	O
anyway	O	O
,	O	O
so	O	O
look	O	O
at	O	O
them	O	O
for	O	O
further	O	O
details	O	O
)	O	O
:	O	O
If	O	O
you	O	O
want	O	O
to	O	O
have	O	O
a	O	O
class	O	O
which	O	O
is	O	O
monitored	O	O
by	O	O
other	O	O
classes	O	O
in	O	O
the	O	O
ecosystem	O	O
of	O	O
your	O	O
program	O	O
you	O	O
say	O	O
that	O	O
you	O	O
want	O	O
the	O	O
class	O	O
to	O	O
be	O	O
observable	O	O
.	O	O
I	O	O
.	O	O
e	O	O
.	O	O
there	O	O
might	O	O
be	O	O
some	O	O
changes	O	O
in	O	O
its	O	O
state	O	O
which	O	O
you	O	O
would	O	O
want	O	O
to	O	O
broadcast	O	O
to	O	O
the	O	O
rest	O	O
of	O	O
the	O	O
program	O	O
.	O	O
Now	O	O
,	O	O
to	O	O
do	O	O
this	O	O
we	O	O
have	O	O
to	O	O
call	O	O
some	O	O
kind	O	O
of	O	O
method	O	O
.	O	O
We	O	O
don	O	O
'	O	O
t	O	O
want	O	O
the	O	O
Observable	B-api_mention	B-api_mention
class	O	O
to	O	O
be	O	O
tightly	O	O
coupled	O	O
with	O	O
the	O	O
classes	O	O
that	O	O
are	O	O
interested	O	O
in	O	O
observing	O	O
it	O	O
.	O	O
It	O	O
doesn	O	O
'	O	O
t	O	O
care	O	O
who	O	O
it	O	O
is	O	O
as	O	O
long	O	O
as	O	O
it	O	O
fulfils	O	O
certain	O	O
criteria	O	O
.	O	O
(	O	O
Imagine	O	O
it	O	O
is	O	O
a	O	O
radio	O	O
station	O	O
,	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
care	O	O
who	O	O
is	O	O
listening	O	O
as	O	O
long	O	O
as	O	O
they	O	O
have	O	O
an	O	O
FM	O	O
radio	O	O
tuned	O	O
on	O	O
their	O	O
frequency	O	O
)	O	O
.	O	O
To	O	O
achieve	O	O
that	O	O
we	O	O
use	O	O
an	O	O
interface	O	O
,	O	O
referred	O	O
to	O	O
as	O	O
the	O	O
Observer	B-api_mention	B-api_mention
.	O	O
Therefore	O	O
,	O	O
the	O	O
Observable	B-api_mention	B-api_mention
class	O	O
will	O	O
have	O	O
a	O	O
list	O	O
of	O	O
Observers	B-api_mention	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
instances	O	O
implementing	O	O
the	O	O
Observer	B-api_mention	B-api_mention
interface	O	O
methods	O	O
you	O	O
might	O	O
have	O	O
)	O	O
.	O	O
Whenever	O	O
it	O	O
wants	O	O
to	O	O
broadcast	O	O
something	O	O
,	O	O
it	O	O
just	O	O
calls	O	O
the	O	O
method	O	O
on	O	O
all	O	O
the	O	O
observers	O	O
,	O	O
one	O	O
after	O	O
the	O	O
other	O	O
.	O	O
The	O	O
last	O	O
thing	O	O
to	O	O
close	O	O
the	O	O
puzzle	O	O
is	O	O
how	O	O
will	O	O
the	O	O
Observable	B-api_mention	B-api_mention
class	O	O
know	O	O
who	O	O
is	O	O
interested	O	O
?	O	O
So	O	O
the	O	O
Observable	B-api_mention	B-api_mention
class	O	O
must	O	O
offer	O	O
some	O	O
mechanism	O	O
to	O	O
allow	O	O
Observers	B-api_mention	O
to	O	O
register	O	O
their	O	O
interest	O	O
.	O	O
A	O	O
method	O	O
such	O	O
as	O	O
addObserver	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
internally	O	O
adds	O	O
the	O	O
Observer	B-api_mention	B-api_mention
to	O	O
the	O	O
list	O	O
of	O	O
observers	O	O
,	O	O
so	O	O
that	O	O
when	O	O
something	O	O
important	O	O
happens	O	O
,	O	O
it	O	O
loops	O	O
through	O	O
the	O	O
list	O	O
and	O	O
calls	O	O
the	O	O
respective	O	O
notification	O	O
method	O	O
of	O	O
the	O	O
Observer	B-api_mention	B-api_mention
interface	O	O
of	O	O
each	O	O
instance	O	O
in	O	O
the	O	O
list	O	O
.	O	O
It	O	O
might	O	O
be	O	O
that	O	O
in	O	O
the	O	O
interview	O	O
they	O	O
did	O	O
not	O	O
ask	O	O
you	O	O
explicitly	O	O
about	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Observer	I-api_mention	I-api_mention
and	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Observable	I-api_mention	I-api_mention
but	O	O
about	O	O
the	O	O
generic	O	O
concept	O	O
.	O	O
The	O	O
concept	O	O
is	O	O
a	O	O
design	O	O
pattern	O	O
,	O	O
which	O	O
Java	O	O
happens	O	O
to	O	O
provide	O	O
support	O	O
for	O	O
directly	O	O
out	O	O
of	O	O
the	O	O
box	O	O
to	O	O
help	O	O
you	O	O
implement	O	O
it	O	O
quickly	O	O
when	O	O
you	O	O
need	O	O
it	O	O
.	O	O
So	O	O
I	O	O
would	O	O
suggest	O	O
that	O	O
you	O	O
understand	O	O
the	O	O
concept	O	O
rather	O	O
than	O	O
the	O	O
actual	O	O
methods	O	O
/	O	O
classes	O	O
(	O	O
which	O	O
you	O	O
can	O	O
look	O	O
up	O	O
when	O	O
you	O	O
need	O	O
them	O	O
)	O	O
.	O	O
UPDATE	O	O
In	O	O
response	O	O
to	O	O
your	O	O
comment	O	O
,	O	O
the	O	O
actual	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Observable	I-api_mention	I-api_mention
class	O	O
offers	O	O
the	O	O
following	O	O
facilities	O	O
:	O	O
#	O	O
li	O	O
Maintaining	O	O
a	O	O
list	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Observer	I-api_mention	I-api_mention
instances	O	O
.	O	O
New	O	O
instances	O	O
interested	O	O
in	O	O
being	O	O
notified	O	O
can	O	O
be	O	O
added	O	O
through	O	O
addObserver	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
removed	O	O
through	O	O
deleteObserver	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
li	O	O
Maintaining	O	O
an	O	O
internal	O	O
state	O	O
,	O	O
specifying	O	O
whether	O	O
the	O	O
object	O	O
has	O	O
changed	O	O
since	O	O
the	O	O
last	O	O
notification	O	O
to	O	O
the	O	O
observers	O	O
.	O	O
This	O	O
is	O	O
useful	O	O
because	O	O
it	O	O
separates	O	O
the	O	O
part	O	O
where	O	O
you	O	O
say	O	O
that	O	O
the	O	O
Observable	B-api_mention	B-api_mention
has	O	O
changed	O	O
,	O	O
from	O	O
the	O	O
part	O	O
where	O	O
you	O	O
notify	O	O
the	O	O
changes	O	O
.	O	O
(	O	O
E	O	O
.	O	O
g	O	O
.	O	O
Its	O	O
useful	O	O
if	O	O
you	O	O
have	O	O
multiple	O	O
changes	O	O
happening	O	O
and	O	O
you	O	O
only	O	O
want	O	O
to	O	O
notify	O	O
at	O	O
the	O	O
end	O	O
of	O	O
the	O	O
process	O	O
rather	O	O
than	O	O
at	O	O
each	O	O
small	O	O
step	O	O
)	O	O
.	O	O
This	O	O
is	O	O
done	O	O
through	O	O
setChanged	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
So	O	O
you	O	O
just	O	O
call	O	O
it	O	O
when	O	O
you	O	O
changed	O	O
something	O	O
to	O	O
the	O	O
Observable	B-api_mention	B-api_mention
and	O	O
you	O	O
want	O	O
the	O	O
rest	O	O
of	O	O
the	O	O
Observers	B-api_mention	O
to	O	O
eventually	O	O
know	O	O
about	O	O
it	O	O
.	O	O
#	O	O
li	O	O
Notifying	O	O
all	O	O
observers	O	O
that	O	O
the	O	O
specific	O	O
Observable	B-api_mention	B-api_mention
has	O	O
changed	O	O
state	O	O
.	O	O
This	O	O
is	O	O
done	O	O
through	O	O
notifyObservers	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
checks	O	O
if	O	O
the	O	O
object	O	O
has	O	O
actually	O	O
changed	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
a	O	O
call	O	O
to	O	O
setChanged	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
made	O	O
)	O	O
before	O	O
proceeding	O	O
with	O	O
the	O	O
notification	O	O
.	O	O
There	O	O
are	O	O
2	O	O
versions	O	O
,	O	O
one	O	O
with	O	O
no	O	O
arguments	O	O
and	O	O
one	O	O
with	O	O
an	O	O
Object	B-api_mention	B-api_mention
argument	O	O
,	O	O
in	O	O
case	O	O
you	O	O
want	O	O
to	O	O
pass	O	O
some	O	O
extra	O	O
information	O	O
with	O	O
the	O	O
notification	O	O
.	O	O
Internally	O	O
what	O	O
happens	O	O
is	O	O
that	O	O
it	O	O
just	O	O
iterates	O	O
through	O	O
the	O	O
list	O	O
of	O	O
Observer	B-api_mention	B-api_mention
instances	O	O
and	O	O
calls	O	O
the	O	O
update	B-api_mention	O
(	O	O
Observable	B-api_mention	B-api_mention
o	O	O
,	O	O
Object	B-api_mention	B-api_mention
arg	O	I-api_mention
)	O	I-api_mention
method	O	O
for	O	O
each	O	O
of	O	O
them	O	O
.	O	O
This	O	O
tells	O	O
the	O	O
Observer	B-api_mention	B-api_mention
which	O	O
was	O	O
the	O	O
Observable	B-api_mention	B-api_mention
object	O	O
that	O	O
changed	O	O
(	O	O
you	O	O
could	O	O
be	O	O
observing	O	O
more	O	O
than	O	O
one	O	O
)	O	O
,	O	O
and	O	O
the	O	O
extra	O	O
Object	B-api_mention	B-api_mention
arg	O	O
to	O	O
potentially	O	O
carry	O	O
some	O	O
extra	O	O
information	O	O
(	O	O
passed	O	O
through	O	O
notifyObservers	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
12544479	O	O
I	O	O
am	O	O
looking	O	O
for	O	O
the	O	O
easiest	O	O
and	O	O
simplest	O	O
way	O	O
to	O	O
bind	O	O
and	O	O
convert	O	O
data	O	O
in	O	O
Spring	B-api_mention	O
MVC	O	O
.	O	O
If	O	O
possible	O	O
,	O	O
without	O	O
doing	O	O
any	O	O
xml	O	O
configuration	O	O
.	O	O
So	O	O
far	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
using	O	O
PropertyEditors	B-api_mention	O
like	O	O
so	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
simple	O	O
:	O	O
both	O	O
conversion	O	O
are	O	O
defined	O	O
in	O	O
the	O	O
same	O	O
class	O	O
,	O	O
and	O	O
the	O	O
binding	O	O
is	O	O
straightforward	O	O
.	O	O
If	O	O
I	O	O
wanted	O	O
to	O	O
do	O	O
a	O	O
general	O	O
binding	O	O
across	O	O
all	O	O
my	O	O
controllers	O	O
,	O	O
I	O	O
could	O	O
still	O	O
add	O	O
3	O	O
lines	O	O
in	O	O
my	O	O
xml	O	O
config	O	O
.	O	O
But	O	O
Spring	O	O
3	O	O
.	O	O
x	O	O
introduced	O	O
a	O	O
new	O	O
way	O	O
to	O	O
do	O	O
it	O	O
,	O	O
using	O	O
Converters	B-api_mention	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
let	O	O
'	O	O
s	O	O
say	O	O
I	O	O
want	O	O
to	O	O
use	O	O
Converters	B-api_mention	O
because	O	O
it	O	O
is	O	O
"	O	O
the	O	O
latest	O	O
alternative	O	O
"	O	O
.	O	O
I	O	O
would	O	O
have	O	O
to	O	O
create	O	O
two	O	O
converters	O	O
:	O	O
#	O	O
pre	O	O
First	O	O
drawback	O	O
:	O	O
I	O	O
have	O	O
to	O	O
make	O	O
two	O	O
classes	O	O
.	O	O
Benefit	O	O
:	O	O
no	O	O
need	O	O
to	O	O
cast	O	O
thanks	O	O
to	O	O
genericity	O	O
.	O	O
Then	O	O
,	O	O
how	O	O
do	O	O
I	O	O
simply	O	O
data	O	O
bind	O	O
the	O	O
converters	B-api_mention	O
?	O	O
Second	O	O
drawback	O	O
:	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
found	O	O
any	O	O
simple	O	O
way	O	O
(	O	O
annotations	O	O
or	O	O
other	O	O
programmatic	O	O
facilities	O	O
)	O	O
to	O	O
do	O	O
it	O	O
in	O	O
a	O	O
controller	O	O
:	O	O
nothing	O	O
like	O	O
someSpringObject	O	O
.	B-api_mention	B-api_mention
registerCustomConverter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
The	O	O
only	O	O
ways	O	O
I	O	O
'	O	O
ve	O	O
found	O	O
would	O	O
be	O	O
tedious	O	O
,	O	O
not	O	O
simple	O	O
,	O	O
and	O	O
only	O	O
about	O	O
general	O	O
cross	O	O
-	O	O
controller	O	O
binding	O	O
:	O	O
#	O	O
li	O	O
XML	O	O
config	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
Java	O	O
config	O	O
(	O	O
only	O	O
in	O	O
Spring	O	O
3	O	O
.	O	O
1	O	O
+	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
With	O	O
all	O	O
these	O	O
drawbacks	O	O
,	O	O
why	O	O
using	O	O
Converters	B-api_mention	O
?	O	O
Am	O	O
I	O	O
missing	O	O
something	O	O
?	O	O
Are	O	O
there	O	O
other	O	O
tricks	O	O
that	O	O
I	O	O
am	O	O
not	O	O
aware	O	O
of	O	O
?	O	O
I	O	O
am	O	O
tempted	O	O
to	O	O
go	O	O
on	O	O
using	O	O
PropertyEditors	B-api_mention	B-api_mention
.	O	O
.	O	O
.	O	O
Binding	O	O
is	O	O
much	O	O
easier	O	O
and	O	O
quicker	O	O
.	O	O
Question	O	O
-	O	O
21242110	O	O
What	O	O
is	O	O
the	O	O
best	O	O
way	O	O
to	O	O
convert	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
object	O	O
to	O	O
the	O	O
new	O	O
JDK	O	O
8	O	O
/	O	O
JSR	O	O
-	O	O
310	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
time	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
LocalDate	I-api_mention	I-api_mention
?	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
13291076	O	O
,	O	O
answer	O	O
-	O	O
13291109	O	O
It	O	O
really	O	O
depends	O	O
on	O	O
what	O	O
you	O	O
want	O	O
to	O	O
do	O	O
with	O	O
the	O	O
returned	O	O
value	O	O
:	O	O
#	O	O
li	O	O
If	O	O
you	O	O
need	O	O
to	O	O
get	O	O
the	O	O
exact	O	O
name	O	O
used	O	O
to	O	O
declare	O	O
the	O	O
enum	O	O
constant	O	O
,	O	O
you	O	O
should	O	O
use	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
toString	B-api_mention	B-api_mention
may	O	O
have	O	O
been	O	O
overriden	O	O
#	O	O
li	O	O
If	O	O
you	O	O
want	O	O
to	O	O
print	O	O
the	O	O
enum	O	O
constant	O	O
in	O	O
a	O	O
user	O	O
friendly	O	O
way	O	O
,	O	O
you	O	O
should	O	O
use	O	O
toString	B-api_mention	B-api_mention
which	O	O
may	O	O
have	O	O
been	O	O
overriden	O	O
(	O	O
or	O	O
not	O	O
!	O	O
)	O	O
.	O	O
When	O	O
I	O	O
feel	O	O
that	O	O
it	O	O
might	O	O
be	O	O
confusing	O	O
,	O	O
I	O	O
provide	O	O
a	O	O
more	O	O
specific	O	O
getXXX	O	O
method	O	O
,	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31419029	O	O
,	O	O
answer	O	O
-	O	O
31419047	O	O
An	O	O
empty	O	O
HashMap	B-api_mention	B-api_mention
object	O	O
is	O	O
much	O	O
smaller	O	O
than	O	O
an	O	O
array	O	O
of	O	O
2000	O	O
Object	B-api_mention	B-api_mention
references	O	O
.	O	O
Even	O	O
though	O	O
you	O	O
pass	O	O
2000	O	O
to	O	O
the	O	O
initialCapacity	O	O
parameter	O	O
of	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
constructor	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
actually	O	O
creating	O	O
2000	O	O
spaces	O	O
for	O	O
objects	O	O
yet	O	O
.	O	O
Question	O	O
-	O	O
15655012	O	O
,	O	O
answer	O	O
-	O	O
15655071	O	O
If	O	O
you	O	O
make	O	O
foo	O	O
static	O	O
,	O	O
you	O	O
must	O	O
initialize	O	O
it	O	O
in	O	O
the	O	O
class	O	O
constructor	O	O
(	O	O
or	O	O
inline	O	O
where	O	O
you	O	O
define	O	O
it	O	O
)	O	O
like	O	O
the	O	O
following	O	O
examples	O	O
.	O	O
Class	O	O
constructor	O	O
(	O	O
not	O	O
instance	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Inline	O	O
:	O	O
private	O	O
static	O	O
final	O	O
List	B-api_mention	B-api_mention
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
problem	O	O
here	O	O
is	O	O
not	O	O
how	O	O
the	O	O
final	O	O
modifier	O	O
works	O	O
,	O	O
but	O	O
rather	O	O
how	O	O
the	O	O
static	O	O
modifier	O	O
works	O	O
.	O	O
The	O	O
final	O	O
modifier	O	O
enforces	O	O
an	O	O
initialization	O	O
of	O	O
your	O	O
reference	O	O
by	O	O
the	O	O
time	O	O
the	O	O
call	O	O
to	O	O
your	O	O
constructor	O	O
completes	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
you	O	O
must	O	O
initialize	O	O
it	O	O
in	O	O
the	O	O
constructor	O	O
)	O	O
.	O	O
When	O	O
you	O	O
initialize	O	O
an	O	O
attribute	O	O
in	O	O
-	O	O
line	O	O
,	O	O
it	O	O
gets	O	O
initialized	O	O
before	O	O
the	O	O
code	O	O
you	O	O
have	O	O
defined	O	O
for	O	O
the	O	O
constructor	O	O
is	O	O
run	O	O
,	O	O
so	O	O
you	O	O
get	O	O
the	O	O
following	O	O
outcomes	O	O
:	O	O
#	O	O
li	O	O
if	O	O
foo	O	O
is	O	O
static	O	O
,	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
executed	O	O
before	O	O
the	O	O
static	O	O
{	O	O
}	O	O
constructor	O	O
you	O	O
have	O	O
defined	O	O
for	O	O
your	O	O
class	O	O
is	O	O
executed	O	O
#	O	O
li	O	O
if	O	O
foo	O	O
is	O	O
not	O	O
static	O	O
,	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
executed	O	O
before	O	O
your	O	O
constructor	O	O
is	O	O
run	O	O
When	O	O
you	O	O
do	O	O
not	O	O
initilize	O	O
an	O	O
attribute	O	O
in	O	O
-	O	O
line	O	O
,	O	O
the	O	O
final	O	O
modifier	O	O
enforces	O	O
that	O	O
you	O	O
initialize	O	O
it	O	O
and	O	O
that	O	O
you	O	O
must	O	O
do	O	O
so	O	O
in	O	O
the	O	O
constructor	O	O
.	O	O
If	O	O
you	O	O
also	O	O
have	O	O
a	O	O
static	O	O
modifier	O	O
,	O	O
the	O	O
constructor	O	O
you	O	O
will	O	O
have	O	O
to	O	O
initialize	O	O
the	O	O
attribute	O	O
in	O	O
is	O	O
the	O	O
class	O	O
'	O	O
initialization	O	O
block	O	O
:	O	O
static	O	O
{	O	O
}	O	O
.	O	O
The	O	O
error	O	O
you	O	O
get	O	O
in	O	O
your	O	O
code	O	O
is	O	O
from	O	O
the	O	O
fact	O	O
that	O	O
static	O	O
{	O	O
}	O	O
is	O	O
run	O	O
when	O	O
the	O	O
class	O	O
is	O	O
loaded	O	O
,	O	O
before	O	O
the	O	O
time	O	O
you	O	O
instantiate	O	O
an	O	O
object	O	O
of	O	O
that	O	O
class	O	O
.	O	O
Thus	O	O
,	O	O
you	O	O
will	O	O
have	O	O
not	O	O
initialized	O	O
foo	O	O
when	O	O
the	O	O
class	O	O
is	O	O
created	O	O
.	O	O
Think	O	O
of	O	O
the	O	O
static	O	O
{	O	O
}	O	O
block	O	O
as	O	O
a	O	O
constructor	O	O
for	O	O
an	O	O
object	O	O
of	O	O
type	O	O
Class	B-api_mention	B-api_mention
.	O	O
This	O	O
is	O	O
where	O	O
you	O	O
must	O	O
do	O	O
the	O	O
initialization	O	O
of	O	O
your	O	O
static	O	O
final	O	O
class	O	O
attributes	O	O
(	O	O
if	O	O
not	O	O
done	O	O
inline	O	O
)	O	O
.	O	O
Side	O	O
note	O	O
:	O	O
The	O	O
final	O	O
modifier	O	O
assures	O	O
const	O	O
-	O	O
ness	O	O
only	O	O
for	O	O
primitive	O	O
types	O	O
and	O	O
references	O	O
.	O	O
When	O	O
you	O	O
declare	O	O
a	O	O
final	O	O
object	O	O
,	O	O
what	O	O
you	O	O
get	O	O
is	O	O
a	O	O
final	O	O
reference	O	O
to	O	O
that	O	O
object	O	O
,	O	O
but	O	O
the	O	O
object	O	O
itself	O	O
is	O	O
not	O	O
constant	O	O
.	O	O
What	O	O
you	O	O
are	O	O
really	O	O
achieving	O	O
when	O	O
declaring	O	O
a	O	O
final	O	O
attribute	O	O
is	O	O
that	O	O
,	O	O
once	O	O
you	O	O
declare	O	O
an	O	O
object	O	O
for	O	O
your	O	O
specific	O	O
purpose	O	O
(	O	O
like	O	O
the	O	O
final	O	O
List	B-api_mention	B-api_mention
that	O	O
you	O	O
have	O	O
declared	O	O
)	O	O
,	O	O
that	O	O
and	O	O
only	O	O
that	O	O
object	O	O
will	O	O
be	O	O
used	O	O
for	O	O
that	O	O
purpose	O	O
:	O	O
you	O	O
will	O	O
not	O	O
be	O	O
able	O	O
to	O	O
change	O	O
List	B-api_mention	B-api_mention
foo	O	O
to	O	O
another	O	O
List	B-api_mention	B-api_mention
,	O	O
but	O	O
you	O	O
can	O	O
still	O	O
alter	O	O
your	O	O
List	B-api_mention	B-api_mention
by	O	O
adding	O	O
/	O	O
removing	O	O
items	O	O
(	O	O
the	O	O
List	B-api_mention	B-api_mention
you	O	O
are	O	O
using	O	O
will	O	O
be	O	O
the	O	O
same	O	O
,	O	O
only	O	O
with	O	O
its	O	O
contents	O	O
altered	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
5778658	O	O
,	O	O
answer	O	O
-	O	O
10768914	O	O
You	O	O
will	O	O
need	O	O
an	O	O
intermediate	O	O
class	O	O
which	O	O
will	O	O
buffer	O	O
between	O	O
.	O	O
Each	O	O
time	O	O
InputStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
read	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
the	O	O
buffering	O	O
class	O	O
will	O	O
fill	O	O
the	O	O
passed	O	O
in	O	O
byte	O	O
array	O	O
with	O	O
the	O	O
next	O	O
chunk	O	O
passed	O	O
in	O	O
from	O	O
OutputStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
write	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Since	O	O
the	O	O
sizes	O	O
of	O	O
the	O	O
chunks	O	O
may	O	O
not	O	O
be	O	O
the	O	O
same	O	O
,	O	O
the	O	O
adapter	O	O
class	O	O
will	O	O
need	O	O
to	O	O
store	O	O
a	O	O
certain	O	O
amount	O	O
until	O	O
it	O	O
has	O	O
enough	O	O
to	O	O
fill	O	O
the	O	O
read	O	O
buffer	O	O
and	O	O
/	O	O
or	O	O
be	O	O
able	O	O
to	O	O
store	O	O
up	O	O
any	O	O
buffer	O	O
overflow	O	O
.	O	O
This	O	O
article	O	O
has	O	O
a	O	O
nice	O	O
breakdown	O	O
of	O	O
a	O	O
few	O	O
different	O	O
approaches	O	O
to	O	O
this	O	O
problem	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
15655012	O	O
,	O	O
answer	O	O
-	O	O
24895623	O	O
First	O	O
of	O	O
all	O	O
,	O	O
the	O	O
place	O	O
in	O	O
your	O	O
code	O	O
where	O	O
you	O	O
are	O	O
initializing	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
assigning	O	O
for	O	O
the	O	O
first	O	O
time	O	O
)	O	O
foo	O	O
is	O	O
here	O	O
:	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
foo	O	O
is	O	O
an	O	O
object	O	O
(	O	O
with	O	O
type	O	O
List	O	B-api_mention
)	O	O
so	O	O
it	O	O
is	O	O
a	O	O
reference	O	O
type	O	O
,	O	O
not	O	O
a	O	O
value	O	O
type	O	O
(	O	O
like	O	O
int	O	O
)	O	O
.	O	O
As	O	O
such	O	O
,	O	O
it	O	O
holds	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
memory	O	O
location	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
0xA7D2A834	O	O
)	O	O
where	O	O
your	O	O
List	B-api_mention	B-api_mention
elements	O	O
are	O	O
stored	O	O
.	O	O
Lines	O	O
like	O	O
this	O	O
foo	O	O
.	O	B-api_mention
add	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
Modification	O	O
-	O	O
1	O	O
do	O	O
not	O	O
change	O	O
the	O	O
value	O	O
of	O	O
foo	O	O
(	O	O
which	O	O
,	O	O
again	O	O
,	O	O
is	O	O
just	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
memory	O	O
location	O	O
)	O	O
.	O	O
Instead	O	O
,	O	O
they	O	O
just	O	O
add	O	O
elements	O	O
into	O	O
that	O	O
referenced	O	O
memory	O	O
location	O	O
.	O	O
To	O	O
violate	O	O
the	O	O
final	O	O
keyword	O	O
,	O	O
you	O	O
would	O	O
have	O	O
to	O	O
try	O	O
to	O	O
re	O	O
-	O	O
assign	O	O
foo	O	O
as	O	O
follows	O	O
again	O	O
:	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
That	O	O
would	O	O
give	O	O
you	O	O
a	O	O
compilation	O	O
error	O	O
.	O	O
Now	O	O
,	O	O
with	O	O
that	O	O
out	O	O
of	O	O
the	O	O
way	O	O
,	O	O
think	O	O
about	O	O
what	O	O
happens	O	O
when	O	O
you	O	O
add	O	O
the	O	O
static	O	O
keyword	O	O
.	O	O
When	O	O
you	O	O
do	O	O
NOT	O	O
have	O	O
the	O	O
static	O	O
keyword	O	O
,	O	O
each	O	O
object	O	O
that	O	O
instantiates	O	O
the	O	O
class	O	O
has	O	O
its	O	O
own	O	O
copy	O	O
of	O	O
foo	O	O
.	O	O
Therefore	O	O
,	O	O
the	O	O
constructor	O	O
assigns	O	O
a	O	O
value	O	O
to	O	O
a	O	O
blank	O	O
,	O	O
fresh	O	O
copy	O	O
of	O	O
the	O	O
foo	O	O
variable	O	O
,	O	O
which	O	O
is	O	O
perfectly	O	O
fine	O	O
.	O	O
However	O	O
,	O	O
when	O	O
you	O	O
DO	O	O
have	O	O
the	O	O
static	O	O
keyword	O	O
,	O	O
only	O	O
one	O	O
foo	O	O
exists	O	O
in	O	O
memory	O	O
that	O	O
is	O	O
associated	O	O
with	O	O
the	O	O
class	O	O
.	O	O
If	O	O
you	O	O
were	O	O
to	O	O
create	O	O
two	O	O
or	O	O
more	O	O
objects	O	O
,	O	O
the	O	O
constructor	O	O
would	O	O
be	O	O
attempting	O	O
to	O	O
re	O	O
-	O	O
assign	O	O
that	O	O
one	O	O
foo	O	O
each	O	O
time	O	O
,	O	O
violating	O	O
the	O	O
final	O	O
keyword	O	O
.	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
25757711	O	O
ArrayList	B-api_mention	B-api_mention
shrinks	O	O
or	O	O
expands	O	O
dynamically	O	O
.	O	O
This	O	O
is	O	O
a	O	O
effective	O	O
but	O	O
costly	O	O
operation	O	O
,	O	O
if	O	O
you	O	O
know	O	O
size	O	O
of	O	O
your	O	O
array	O	O
will	O	O
be	O	O
fixed	O	O
then	O	O
its	O	O
better	O	O
to	O	O
mention	O	O
the	O	O
size	O	O
of	O	O
the	O	O
array	O	O
,	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
,	O	O
new	O	O
array	O	O
will	O	O
be	O	O
created	O	O
at	O	O
each	O	O
insertion	O	O
and	O	O
reallocation	O	O
will	O	O
be	O	O
done	O	O
for	O	O
each	O	O
element	O	O
.	O	O
this	O	O
will	O	O
cost	O	O
you	O	O
.	O	B-api_mention
ensureCapacity	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
this	O	O
method	O	O
help	O	O
to	O	O
avoid	O	O
reallocations	O	O
and	O	O
helps	O	O
increase	O	O
size	O	O
of	O	O
arraylist	O	O
.	O	B-api_mention
trimToSize	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
this	O	O
is	O	O
reverse	O	O
used	O	O
to	O	O
shrink	O	O
size	O	O
Arraylist	B-api_mention	B-api_mention
has	O	O
3	O	O
constructors	O	O
:	O	O
#	O	O
li	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
builds	O	O
empty	O	O
ArrayList	B-api_mention	B-api_mention
#	O	O
li	O	O
ArrayList	B-api_mention	B-api_mention
(	O	O
Collection	B-api_mention	B-api_mention
c	O	O
)	O	O
-	O	O
builds	O	O
a	O	O
ArrayList	B-api_mention	B-api_mention
initialized	O	O
with	O	O
elements	O	O
of	O	O
collection	B-api_mention	O
c	O	O
.	O	O
#	O	O
li	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	O
int	I-api_mention	O
capacity	I-api_mention	O
)	I-api_mention	O
-	O	O
builds	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
with	O	O
specified	O	O
initial	O	O
capacity	O	O
.	O	O
Question	O	O
-	O	O
30522698	O	O
The	O	O
problem	O	O
I	O	O
would	O	O
like	O	O
to	O	O
be	O	O
able	O	O
to	O	O
override	O	O
my	O	O
apps	O	O
resources	O	O
such	O	O
as	O	O
R	O	O
.	O	O
colour	O	O
.	O	O
brand	O	O
_	O	O
colour	O	O
or	O	O
R	O	O
.	O	O
drawable	O	O
.	O	O
ic	O	O
_	O	O
action	O	O
_	O	O
start	O	O
at	O	O
runtime	O	O
.	O	O
My	O	O
application	O	O
connects	O	O
to	O	O
a	O	O
CMS	O	O
system	O	O
that	O	O
will	O	O
provide	O	O
branding	O	O
colours	O	O
and	O	O
images	O	O
.	O	O
Once	O	O
the	O	O
app	O	O
has	O	O
downloaded	O	O
the	O	O
CMS	O	O
data	O	O
it	O	O
needs	O	O
to	O	O
be	O	O
able	O	O
to	O	O
re	O	O
-	O	O
skin	O	O
itself	O	O
.	O	O
I	O	O
know	O	O
what	O	O
you	O	O
are	O	O
about	O	O
to	O	O
say	O	O
-	O	O
overriding	O	O
resources	O	O
at	O	O
runtime	O	O
is	O	O
not	O	O
possible	O	O
.	O	O
Except	O	O
that	O	O
it	O	O
kinda	O	O
is	O	O
.	O	O
In	O	O
particular	O	O
I	O	O
have	O	O
found	O	O
this	O	O
Bachelor	O	O
Thesis	O	O
from	O	O
2012	O	O
which	O	O
explains	O	O
the	O	O
basic	O	O
concept	O	O
-	O	O
The	O	O
Activity	B-api_mention	O
class	O	O
in	O	O
android	O	O
extends	O	O
ContextWrapper	B-api_mention	B-api_mention
,	O	O
which	O	O
contains	O	O
the	O	O
attachBaseContext	B-api_mention	B-api_mention
method	O	O
.	O	O
You	O	O
can	O	O
override	O	O
attachBaseContext	B-api_mention	B-api_mention
to	O	O
wrap	O	O
the	O	O
Context	B-api_mention	O
with	O	O
your	O	O
own	O	O
custom	O	O
class	O	O
which	O	O
overrides	O	O
methods	O	O
such	O	O
as	O	O
getColor	B-api_mention	B-api_mention
and	O	O
getDrawable	B-api_mention	B-api_mention
.	O	O
Your	O	O
own	O	O
implementation	O	O
of	O	O
getColor	B-api_mention	B-api_mention
could	O	O
look	O	O
the	O	O
colour	O	O
up	O	O
however	O	O
it	O	O
wanted	O	O
.	O	O
The	O	O
Calligraphy	O	O
library	O	O
uses	O	O
a	O	O
similar	O	O
approach	O	O
to	O	O
inject	O	O
a	O	O
custom	O	O
LayoutInflator	B-api_mention	B-api_mention
which	O	O
can	O	O
deal	O	O
with	O	O
loading	O	O
custom	O	O
fonts	O	O
.	O	O
The	O	O
code	O	O
I	O	O
have	O	O
created	O	O
a	O	O
simple	O	O
Activity	B-api_mention	O
which	O	O
uses	O	O
this	O	O
approach	O	O
to	O	O
override	O	O
the	O	O
loading	O	O
of	O	O
a	O	O
colour	O	O
.	O	O
#	O	O
pre	O	O
The	O	O
problem	O	O
is	O	O
,	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
work	O	O
!	O	O
The	O	O
logging	O	O
shows	O	O
calls	O	O
to	O	O
load	O	O
resources	O	O
such	O	O
as	O	O
layout	O	O
/	O	O
activity	O	O
_	O	O
main	O	O
and	O	O
mipmap	O	O
/	O	O
ic	O	O
_	O	O
launcher	O	O
however	O	O
color	O	O
/	O	O
theme	O	O
_	O	O
colour	O	O
is	O	O
never	O	O
loaded	O	O
.	O	O
It	O	O
seems	O	O
that	O	O
the	O	O
context	O	O
is	O	O
being	O	O
used	O	O
to	O	O
create	O	O
the	O	O
window	O	O
and	O	O
action	O	O
bar	O	O
,	O	O
but	O	O
not	O	O
the	O	O
activity	O	O
'	O	O
s	O	O
content	O	O
view	O	O
.	O	O
My	O	O
questions	O	O
is	O	O
-	O	O
Where	O	O
does	O	O
the	O	O
layout	O	O
inflator	O	O
load	O	O
resources	O	O
from	O	O
,	O	O
if	O	O
not	O	O
the	O	O
activities	O	O
context	O	O
?	O	O
I	O	O
would	O	O
also	O	O
like	O	O
to	O	O
know	O	O
-	O	O
Is	O	O
there	O	O
a	O	O
workable	O	O
way	O	O
to	O	O
override	O	O
the	O	O
loading	O	O
of	O	O
colours	O	O
and	O	O
drawables	O	O
at	O	O
runtime	O	O
?	O	O
A	O	O
word	O	O
about	O	O
alternative	O	O
approaches	O	O
I	O	O
know	O	O
its	O	O
possible	O	O
to	O	O
theme	O	O
an	O	O
app	O	O
from	O	O
CMS	O	O
data	O	O
other	O	O
ways	O	O
-	O	O
for	O	O
example	O	O
we	O	O
could	O	O
create	O	O
a	O	O
method	O	O
getCMSColour	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
then	O	O
inside	O	O
our	O	O
onCreate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
we	O	O
have	O	O
a	O	O
bunch	O	O
of	O	O
code	O	O
along	O	O
the	O	O
lines	O	O
of	O	O
:	O	O
myTextView	O	O
.	B-api_mention	B-api_mention
setTextColour	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
A	O	O
similar	O	O
approach	O	O
could	O	O
be	O	O
taken	O	O
for	O	O
drawables	O	O
,	O	O
strings	O	O
,	O	O
etc	O	O
.	O	O
However	O	O
this	O	O
would	O	O
result	O	O
in	O	O
a	O	O
large	O	O
amount	O	O
of	O	O
boilerplate	O	O
code	O	O
-	O	O
all	O	O
of	O	O
which	O	O
needs	O	O
maintaining	O	O
.	O	O
When	O	O
modifying	O	O
the	O	O
UI	O	O
it	O	O
would	O	O
be	O	O
easy	O	O
to	O	O
forget	O	O
to	O	O
set	O	O
the	O	O
colour	O	O
on	O	O
a	O	O
particular	O	O
view	O	O
.	O	O
Wrapping	O	O
the	O	O
Context	B-api_mention	O
to	O	O
return	O	O
our	O	O
own	O	O
custom	O	O
values	O	O
is	O	O
'	O	O
cleaner	O	O
'	O	O
and	O	O
less	O	O
prone	O	O
to	O	O
breakage	O	O
.	O	O
I	O	O
would	O	O
like	O	O
to	O	O
understand	O	O
why	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
work	O	O
,	O	O
before	O	O
exploring	O	O
alternative	O	O
approaches	O	O
.	O	O
Question	O	O
-	O	O
5071040	O	O
,	O	O
answer	O	O
-	O	O
5071064	O	O
There	O	O
are	O	O
multiple	O	O
ways	O	O
:	O	O
#	O	O
li	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
my	O	O
preference	O	O
)	O	O
#	O	O
li	O	O
StringLiteral	O	O
+	O	O
number	O	O
(	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
how	O	O
the	O	O
compiler	O	O
handles	O	O
it	O	O
,	O	O
perhaps	O	O
it	O	O
is	O	O
as	O	O
efficient	O	O
as	O	O
the	O	O
above	O	O
)	O	O
#	O	O
li	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
15202997	O	O
,	O	O
answer	O	O
-	O	O
37603567	O	O
this	O	O
is	O	O
best	O	O
document	O	O
I	O	O
found	O	O
describing	O	O
getName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
getSimpleName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
getCanonicalName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
a	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
20746429	O	O
,	O	O
answer	O	O
-	O	O
24531394	O	O
Here	O	O
is	O	O
a	O	O
version	O	O
done	O	O
on	O	O
ints	O	O
-	O	O
as	O	O
asked	O	O
in	O	O
the	O	O
question	O	O
.	O	O
Usage	O	O
:	O	O
StreamUtil	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
takeWhile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Here	O	O
'	O	O
s	O	O
code	O	O
for	O	O
StreamUtil	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5031614	O	O
There	O	O
have	O	O
been	O	O
some	O	O
discussions	O	O
here	O	O
about	O	O
JPA	O	O
entities	O	O
and	O	O
which	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
implementation	O	O
should	O	O
be	O	O
used	O	O
for	O	O
JPA	O	O
entity	O	O
classes	O	O
.	O	O
Most	O	O
(	O	O
if	O	O
not	O	O
all	O	O
)	O	O
of	O	O
them	O	O
depend	O	O
on	O	O
Hibernate	O	O
,	O	O
but	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
discuss	O	O
them	O	O
JPA	O	O
-	O	O
implementation	O	O
-	O	O
neutrally	O	O
(	O	O
I	O	O
am	O	O
using	O	O
EclipseLink	O	B-api_mention
,	O	O
by	O	O
the	O	O
way	O	O
)	O	O
.	O	O
All	O	O
possible	O	O
implementations	O	O
are	O	O
having	O	O
their	O	O
own	O	O
advantages	O	O
and	O	O
disadvantages	O	O
regarding	O	O
:	O	O
#	O	O
li	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
contract	O	O
conformity	O	O
(	O	O
immutability	O	O
)	O	O
for	O	O
List	B-api_mention	B-api_mention
/	O	O
Set	B-api_mention	B-api_mention
operations	O	O
#	O	O
li	O	O
Whether	O	O
identical	O	O
objects	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
from	O	O
different	O	O
sessions	O	O
,	O	O
dynamic	O	O
proxies	O	O
from	O	O
lazily	O	O
-	O	O
loaded	O	O
data	O	O
structures	O	O
)	O	O
can	O	O
be	O	O
detected	O	O
#	O	O
li	O	O
Whether	O	O
entities	O	O
behave	O	O
correctly	O	O
in	O	O
detached	O	O
(	O	O
or	O	O
non	O	O
-	O	O
persisted	O	O
)	O	O
state	O	O
As	O	O
far	O	O
I	O	O
can	O	O
see	O	O
,	O	O
there	O	O
are	O	O
three	O	O
options	O	O
:	O	O
#	O	O
li	O	O
Do	O	O
not	O	O
override	O	O
them	O	O
;	O	O
rely	O	O
on	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
hashCode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
work	O	O
#	O	O
li	O	O
cannot	O	O
identify	O	O
identical	O	O
objects	O	O
,	O	O
problems	O	O
with	O	O
dynamic	O	O
proxies	O	O
#	O	O
li	O	O
no	O	O
problems	O	O
with	O	O
detached	O	O
entities	O	O
#	O	O
li	O	O
Override	O	O
them	O	O
,	O	O
based	O	O
on	O	O
the	O	O
primary	O	O
key	O	O
#	O	O
li	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
broken	O	O
#	O	O
li	O	O
correct	O	O
identity	O	O
(	O	O
for	O	O
all	O	O
managed	O	O
entities	O	O
)	O	O
#	O	O
li	O	O
problems	O	O
with	O	O
detached	O	O
entities	O	O
#	O	O
li	O	O
Override	O	O
them	O	O
,	O	O
based	O	O
on	O	O
the	O	O
Business	O	O
-	O	O
Id	O	O
(	O	O
non	O	O
-	O	O
primary	O	O
key	O	O
fields	O	O
;	O	O
what	O	O
about	O	O
foreign	O	O
keys	O	O
?	O	O
)	O	O
#	O	O
li	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
broken	O	O
#	O	O
li	O	O
correct	O	O
identity	O	O
(	O	O
for	O	O
all	O	O
managed	O	O
entities	O	O
)	O	O
#	O	O
li	O	O
no	O	O
problems	O	O
with	O	O
detached	O	O
entities	O	O
My	O	O
questions	O	O
are	O	O
:	O	O
#	O	O
li	O	O
Did	O	O
I	O	O
miss	O	O
an	O	O
option	O	O
and	O	O
/	O	O
or	O	O
pro	O	O
/	O	O
con	O	O
point	O	O
?	O	O
#	O	O
li	O	O
What	O	O
option	O	O
did	O	O
you	O	O
choose	O	O
and	O	O
why	O	O
?	O	O
UPDATE	O	O
1	O	O
:	O	O
By	O	O
"	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
broken	O	O
"	O	O
,	O	O
I	O	O
mean	O	O
that	O	O
successive	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
invocations	O	O
may	O	O
return	O	O
differing	O	O
values	O	O
,	O	O
which	O	O
is	O	O
(	O	O
when	O	O
correctly	O	O
implemented	O	O
)	O	O
not	O	O
broken	O	O
in	O	O
the	O	O
sense	O	O
of	O	O
the	O	O
Object	O	B-api_mention
API	O	O
documentation	O	O
,	O	O
but	O	O
which	O	O
causes	O	O
problems	O	O
when	O	O
trying	O	O
to	O	O
retrieve	O	O
a	O	O
changed	O	O
entity	O	O
from	O	O
a	O	O
Map	O	B-api_mention
,	O	O
Set	O	B-api_mention
or	O	O
other	O	O
hash	O	O
-	O	O
based	O	O
Collection	B-api_mention	B-api_mention
.	O	O
Consequently	O	O
,	O	O
JPA	O	O
implementations	O	O
(	O	O
at	O	O
least	O	O
EclipseLink	O	O
)	O	O
will	O	O
not	O	O
work	O	O
correctly	O	O
in	O	O
some	O	O
cases	O	O
.	O	O
UPDATE	O	O
2	O	O
:	O	O
Thank	O	O
you	O	O
for	O	O
your	O	O
answers	O	O
-	O	O
-	O	O
most	O	O
of	O	O
them	O	O
have	O	O
remarkable	O	O
quality	O	O
.	O	O
Unfortunately	O	O
,	O	O
I	O	O
am	O	O
still	O	O
unsure	O	O
which	O	O
approach	O	O
will	O	O
be	O	O
the	O	O
best	O	O
for	O	O
a	O	O
real	O	O
-	O	O
life	O	O
application	O	O
,	O	O
or	O	O
how	O	O
to	O	O
determine	O	O
the	O	O
best	O	O
approach	O	O
for	O	O
my	O	O
application	O	O
.	O	O
So	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
keep	O	O
the	O	O
question	O	O
open	O	O
and	O	O
hope	O	O
for	O	O
some	O	O
more	O	O
discussions	O	O
and	O	O
/	O	O
or	O	O
opinions	O	O
.	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
22676782	O	O
Despite	O	O
@	O	O
Saint	O	O
Hill	O	O
'	O	O
s	O	O
answer	O	O
if	O	O
you	O	O
consider	O	O
the	O	O
time	O	O
complexity	O	O
of	O	O
str	O	O
.	B-api_mention	B-api_mention
toCharArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
the	O	O
first	O	O
one	O	O
is	O	O
faster	O	O
even	O	O
for	O	O
very	O	O
large	O	O
strings	O	O
.	O	O
You	O	O
can	O	O
run	O	O
the	O	O
code	O	O
below	O	O
to	O	O
see	O	O
it	O	O
for	O	O
yourself	O	O
.	O	O
#	O	O
pre	O	O
output	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
21947452	O	O
,	O	O
answer	O	O
-	O	O
29434641	O	O
I	O	O
performed	O	O
tests	O	O
on	O	O
Eclipse	O	O
vs	O	O
Netbeans	O	O
8	O	O
.	O	O
0	O	O
.	O	O
2	O	O
,	O	O
both	O	O
with	O	O
Java	O	O
version	O	O
1	O	O
.	O	O
8	O	O
;	O	O
I	O	O
used	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
measurements	O	O
.	O	O
Eclipse	O	O
:	O	O
I	O	O
got	O	O
the	O	O
same	O	O
time	O	O
on	O	O
both	O	O
cases	O	O
-	O	O
around	O	O
1	O	O
.	O	O
564	O	O
seconds	O	O
.	O	O
Netbeans	O	O
:	O	O
#	O	O
li	O	O
Using	O	O
"	O	O
#	O	O
"	O	O
:	O	O
1	O	O
.	O	O
536	O	O
seconds	O	O
#	O	O
li	O	O
Using	O	O
"	O	O
B	O	O
"	O	O
:	O	O
44	O	O
.	O	O
164	O	O
seconds	O	O
So	O	O
,	O	O
it	O	O
looks	O	O
like	O	O
Netbeans	O	O
has	O	O
bad	O	O
performance	O	O
on	O	O
print	O	O
to	O	O
console	O	O
.	O	O
After	O	O
more	O	O
research	O	O
I	O	O
realized	O	O
that	O	O
the	O	O
problem	O	O
is	O	O
line	O	O
-	O	O
wrapping	O	O
of	O	O
the	O	O
max	O	O
buffer	O	O
of	O	O
Netbeans	O	O
(	O	O
it	O	O
'	O	O
s	O	O
not	O	O
restricted	O	O
to	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
command	O	O
)	O	O
,	O	O
demonstrated	O	O
by	O	O
this	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
time	O	O
results	O	O
are	O	O
less	O	O
then	O	O
1	O	O
millisecond	O	O
every	O	O
iteration	O	O
except	O	O
every	O	O
fifth	O	O
iteration	O	O
,	O	O
when	O	O
the	O	O
time	O	O
result	O	O
is	O	O
around	O	O
225	O	O
millisecond	O	O
.	O	O
Something	O	O
like	O	O
(	O	O
in	O	O
nanoseconds	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
so	O	O
on	O	O
.	O	O
.	O	O
Summary	O	O
:	O	O
#	O	O
li	O	O
Eclipse	O	O
works	O	O
perfectly	O	O
with	O	O
"	O	O
B	O	O
"	O	O
#	O	O
li	O	O
Netbeans	O	O
has	O	O
a	O	O
line	O	O
-	O	O
wrapping	O	O
problem	O	O
that	O	O
can	O	O
be	O	O
solved	O	O
(	O	O
because	O	O
the	O	O
problem	O	O
does	O	O
not	O	O
occur	O	O
in	O	O
eclipse	O	O
)	O	O
(	O	O
without	O	O
adding	O	O
space	O	O
after	O	O
B	O	O
(	O	O
"	O	O
B	O	O
"	O	O
)	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
I	O	O
'	O	O
ve	O	O
read	O	O
on	O	O
many	O	O
Web	O	O
sites	O	O
Optional	B-api_mention	B-api_mention
should	O	O
be	O	O
used	O	O
as	O	O
a	O	O
return	O	O
type	O	O
only	O	O
,	O	O
and	O	O
not	O	O
used	O	O
in	O	O
method	O	O
arguments	O	O
.	O	O
I	O	O
'	O	O
m	O	O
struggling	O	O
to	O	O
find	O	O
a	O	O
logical	O	O
reason	O	O
why	O	O
.	O	O
For	O	O
example	O	O
I	O	O
have	O	O
a	O	O
piece	O	O
of	O	O
logic	O	O
which	O	O
has	O	O
2	O	O
optional	O	O
parameters	O	O
.	O	O
Therefore	O	O
I	O	O
think	O	O
it	O	O
would	O	O
make	O	O
sense	O	O
to	O	O
write	O	O
my	O	O
method	O	O
signature	O	O
like	O	O
this	O	O
(	O	O
solution	O	O
1	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Many	O	O
web	O	O
pages	O	O
specify	O	O
Optional	B-api_mention	B-api_mention
should	O	O
not	O	O
be	O	O
used	O	O
as	O	O
method	O	O
arguments	O	O
.	O	O
With	O	O
this	O	O
in	O	O
mind	O	O
I	O	O
could	O	O
use	O	O
the	O	O
following	O	O
method	O	O
signature	O	O
and	O	O
add	O	O
a	O	O
clear	O	O
Javadoc	O	O
comment	O	O
specifying	O	O
the	O	O
arguments	O	O
maybe	O	O
null	O	O
hoping	O	O
future	O	O
future	O	O
maintainers	O	O
will	O	O
read	O	O
the	O	O
javadoc	O	O
and	O	O
therefore	O	O
always	O	O
carry	O	O
out	O	O
null	O	O
checks	O	O
prior	O	O
to	O	O
using	O	O
the	O	O
arguments	O	O
(	O	O
solution	O	O
2	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Alternatively	O	O
I	O	O
could	O	O
replace	O	O
my	O	O
method	O	O
with	O	O
4	O	O
public	O	O
methods	O	O
to	O	O
provide	O	O
a	O	O
nicer	O	O
interface	O	O
and	O	O
make	O	O
it	O	O
more	O	O
obvious	O	O
p1	O	O
and	O	O
p2	O	O
are	O	O
optional	O	O
(	O	O
solution	O	O
3	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
I	O	O
try	O	O
writing	O	O
the	O	O
code	O	O
of	O	O
the	O	O
class	O	O
which	O	O
invokes	O	O
this	O	O
piece	O	O
of	O	O
logic	O	O
for	O	O
each	O	O
approach	O	O
.	O	O
I	O	O
first	O	O
retrieve	O	O
the	O	O
2	O	O
input	O	O
parameters	O	O
from	O	O
another	O	O
object	O	O
which	O	O
returns	O	O
optionals	O	O
and	O	O
then	O	O
I	O	O
invoke	O	O
calculateSomething	O	O
.	O	O
Therefore	O	O
if	O	O
solution	O	O
1	O	O
is	O	O
used	O	O
the	O	O
calling	O	O
code	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
if	O	O
solution	O	O
2	O	O
is	O	O
used	O	O
the	O	O
calling	O	O
code	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
if	O	O
solution	O	O
3	O	O
is	O	O
used	O	O
I	O	O
could	O	O
use	O	O
the	O	O
code	O	O
above	O	O
or	O	O
I	O	O
could	O	O
use	O	O
the	O	O
following	O	O
(	O	O
but	O	O
its	O	O
a	O	O
significant	O	O
amount	O	O
more	O	O
code	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
my	O	O
question	O	O
is	O	O
why	O	O
is	O	O
it	O	O
considered	O	O
bad	O	O
practice	O	O
to	O	O
use	O	O
Optionals	O	O
as	O	O
method	O	O
arguments	O	O
as	O	O
in	O	O
solution	O	O
1	O	O
?	O	O
It	O	O
looks	O	O
like	O	O
the	O	O
most	O	O
readable	O	O
solution	O	O
to	O	O
me	O	O
and	O	O
makes	O	O
it	O	O
most	O	O
obvious	O	O
that	O	O
the	O	O
parameters	O	O
could	O	O
be	O	O
empty	O	O
/	O	O
null	O	O
to	O	O
future	O	O
maintainers	O	O
.	O	O
(	O	O
I	O	O
'	O	O
m	O	O
aware	O	O
the	O	O
designers	O	O
of	O	O
Optional	B-api_mention	B-api_mention
intended	O	O
it	O	O
to	O	O
only	O	O
be	O	O
used	O	O
as	O	O
a	O	O
return	O	O
type	O	O
,	O	O
but	O	O
I	O	O
can	O	O
'	O	O
t	O	O
find	O	O
any	O	O
logical	O	O
reasons	O	O
not	O	O
to	O	O
use	O	O
it	O	O
in	O	O
this	O	O
scenario	O	O
)	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923105	O	O
Oh	O	O
,	O	O
those	O	O
coding	O	O
styles	O	O
are	O	O
to	O	O
be	O	O
taken	O	O
with	O	O
a	O	O
bit	O	O
of	O	O
salt	O	O
.	O	O
#	O	O
li	O	O
(	O	O
+	O	O
)	O	O
Passing	O	O
an	O	O
Option	O	O
result	O	O
to	O	O
another	O	O
method	O	O
,	O	O
without	O	O
any	O	O
semantic	O	O
analysis	O	O
;	O	O
leaving	O	O
that	O	O
to	O	O
the	O	O
method	O	O
,	O	O
is	O	O
quite	O	O
alright	O	O
.	O	O
#	O	O
li	O	O
(	O	O
-	O	O
)	O	O
Using	O	O
Optional	B-api_mention	B-api_mention
parameters	O	O
causing	O	O
conditional	O	O
logic	O	O
inside	O	O
the	O	O
methods	O	O
is	O	O
literally	O	O
contra	O	O
-	O	O
productive	O	O
.	O	O
#	O	O
li	O	O
(	O	O
-	O	O
)	O	O
Needing	O	O
to	O	O
pack	O	O
an	O	O
argument	O	O
in	O	O
an	O	O
Optional	B-api_mention	B-api_mention
,	O	O
is	O	O
suboptimal	O	O
for	O	O
the	O	O
compiler	O	O
,	O	O
and	O	O
does	O	O
an	O	O
unnecessary	O	O
wrapping	O	O
.	O	O
#	O	O
li	O	O
(	O	O
-	O	O
)	O	O
In	O	O
comparison	O	O
to	O	O
nullable	O	O
parameters	O	O
Optional	B-api_mention	B-api_mention
is	O	O
more	O	O
costly	O	O
.	O	O
In	O	O
general	O	O
:	O	O
Optional	B-api_mention	B-api_mention
unifies	O	O
two	O	O
states	O	O
,	O	O
which	O	O
have	O	O
to	O	O
be	O	O
unraveled	O	O
.	O	O
Hence	O	O
better	O	O
suited	O	O
for	O	O
result	O	O
than	O	O
input	O	O
,	O	O
for	O	O
the	O	O
complexity	O	O
of	O	O
the	O	O
data	O	O
flow	O	O
.	O	O
Question	O	O
-	O	O
29262002	O	O
,	O	O
answer	O	O
-	O	O
29262126	O	O
The	O	O
JLS	O	O
specify	O	O
that	O	O
#	O	O
blockquote	O	O
Now	O	O
let	O	O
'	O	O
s	O	O
see	O	O
that	O	O
in	O	O
detail	O	O
,	O	O
Since	O	O
your	O	O
takeBiConsumer	O	B-api_mention
method	O	O
is	O	O
of	O	O
void	O	O
type	O	O
,	O	O
the	O	O
lambda	O	O
receiving	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
interpret	O	O
it	O	O
as	O	O
a	O	O
block	O	O
like	O	O
#	O	O
pre	O	O
which	O	O
is	O	O
valid	O	O
in	O	O
a	O	O
void	O	O
,	O	O
hence	O	O
the	O	O
first	O	O
case	O	O
compile	O	O
.	O	O
However	O	O
,	O	O
in	O	O
the	O	O
case	O	O
where	O	O
the	O	O
lambda	O	O
is	O	O
-	O	O
>	O	O
StringLiteral	O	O
,	O	O
a	O	O
block	O	O
such	O	O
as	O	O
#	O	O
pre	O	O
is	O	O
not	O	O
valid	O	O
syntax	O	O
in	O	O
java	O	O
.	O	O
Therefore	O	O
the	O	O
only	O	O
thing	O	O
to	O	O
do	O	O
with	O	O
"	O	O
hi	O	O
"	O	O
is	O	O
to	O	O
try	O	O
and	O	O
return	O	O
it	O	O
.	O	O
#	O	O
pre	O	O
which	O	O
is	O	O
not	O	O
valid	O	O
in	O	O
a	O	O
void	O	O
and	O	O
explain	O	O
the	O	O
error	O	O
message	O	O
#	O	O
pre	O	O
For	O	O
a	O	O
better	O	O
understanding	O	O
,	O	O
note	O	O
that	O	O
if	O	O
you	O	O
change	O	O
the	O	O
type	O	O
of	O	O
takeBiConsumer	O	B-api_mention
to	O	O
a	O	O
String	B-api_mention	B-api_mention
,	O	O
-	O	O
>	O	O
StringLiteral	O	O
will	O	O
be	O	O
valid	O	O
as	O	O
it	O	O
will	O	O
simply	O	O
try	O	O
to	O	O
directly	O	O
return	O	O
the	O	O
string	O	O
.	O	O
Note	O	O
that	O	O
at	O	O
first	O	O
I	O	O
tought	O	O
the	O	O
error	O	O
was	O	O
caused	O	O
by	O	O
the	O	O
lambda	O	O
being	O	O
in	O	O
a	O	O
wrong	O	O
invocation	O	O
context	O	O
,	O	O
so	O	O
I	O	O
'	O	O
ll	O	O
share	O	O
this	O	O
possibility	O	O
with	O	O
the	O	O
community	O	O
:	O	O
JLS	O	O
15	O	O
.	O	O
27	O	O
#	O	O
blockquote	O	O
However	O	O
in	O	O
our	O	O
case	O	O
,	O	O
we	O	O
are	O	O
in	O	O
an	O	O
invocation	O	O
context	O	O
which	O	O
is	O	O
correct	O	O
.	O	O
Question	O	O
-	O	O
5673260	O	O
,	O	O
answer	O	O
-	O	O
5673356	O	O
#	O	O
pre	O	O
Generally	O	O
speaking	O	O
,	O	O
when	O	O
you	O	O
have	O	O
response	O	O
.	B-api_mention	B-api_mention
getOutputStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
can	O	O
write	O	O
anything	O	O
there	O	O
.	O	O
You	O	O
can	O	O
pass	O	O
this	O	O
output	O	O
stream	O	O
as	O	O
a	O	O
place	O	O
to	O	O
put	O	O
generated	O	O
PDF	O	O
to	O	O
your	O	O
generator	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
you	O	O
know	O	O
what	O	O
file	O	O
type	O	O
you	O	O
are	O	O
sending	O	O
,	O	O
you	O	O
can	O	O
set	O	O
response	O	O
.	B-api_mention	B-api_mention
setContentType	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
7707556	O	O
,	O	O
answer	O	O
-	O	O
15870428	O	O
There	O	O
is	O	O
a	O	O
subtle	O	O
issue	O	O
here	O	O
that	O	O
is	O	O
a	O	O
bit	O	O
of	O	O
a	O	O
gotcha	O	O
.	O	O
The	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
a	O	O
base	O	O
implementation	O	O
in	O	O
Object	B-api_mention	B-api_mention
.	O	I-api_mention
CharSequence	B-api_mention	I-api_mention
is	O	O
an	O	O
interface	O	O
;	O	O
and	O	O
although	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
appears	O	O
as	O	O
part	O	O
of	O	O
that	O	O
interface	O	O
,	O	O
there	O	O
is	O	O
nothing	O	O
at	O	O
compile	O	O
-	O	O
time	O	O
that	O	O
will	O	O
force	O	O
you	O	O
to	O	O
override	O	O
it	O	O
and	O	O
honor	O	O
the	O	O
additional	O	O
constraints	O	O
that	O	O
the	O	O
CharSequence	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
'	O	O
s	O	O
javadoc	O	O
puts	O	O
on	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
;	O	O
ie	O	O
that	O	O
it	O	O
should	O	O
return	O	O
a	O	O
string	O	O
containing	O	O
the	O	O
characters	O	O
in	O	O
the	O	O
order	O	O
returned	O	O
by	O	O
charAt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Your	O	O
IDE	O	O
won	O	O
'	O	O
t	O	O
even	O	O
help	O	O
you	O	O
out	O	O
by	O	O
reminding	O	O
that	O	O
you	O	O
that	O	O
you	O	O
probably	O	O
should	O	O
override	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
For	O	O
example	O	O
,	O	O
in	O	O
intellij	O	O
,	O	O
this	O	O
is	O	O
what	O	O
you	O	O
'	O	O
ll	O	O
see	O	O
if	O	O
you	O	O
create	O	O
a	O	O
new	O	O
CharSequence	B-api_mention	B-api_mention
implementation	O	O
:	O	O
#	O	O
a	O	O
.	O	O
Note	O	O
the	O	O
absence	O	O
of	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
.	O	O
If	O	O
you	O	O
rely	O	O
on	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
on	O	O
an	O	O
arbitrary	O	O
CharSequence	B-api_mention	B-api_mention
,	O	O
it	O	O
should	O	O
work	O	O
provided	O	O
the	O	O
CharSequence	B-api_mention	B-api_mention
implementer	O	O
did	O	O
their	O	O
job	O	O
properly	O	O
.	O	O
But	O	O
if	O	O
you	O	O
want	O	O
to	O	O
avoid	O	O
any	O	O
uncertainty	O	O
altogether	O	O
,	O	O
you	O	O
should	O	O
use	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
and	O	O
append	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
like	O	O
so	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
10786042	O	O
,	O	O
answer	O	O
-	O	O
16226168	O	O
I	O	O
would	O	O
not	O	O
use	O	O
URLEncoder	B-api_mention	B-api_mention
.	O	O
Besides	O	O
being	O	O
incorrectly	O	O
named	O	O
(	O	O
URLEncoder	B-api_mention	B-api_mention
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
URLs	O	O
)	O	O
,	O	O
inefficient	O	O
(	O	O
it	O	O
uses	O	O
a	O	O
StringBuffer	B-api_mention	B-api_mention
instead	O	O
of	O	O
Builder	B-api_mention	B-api_mention
and	O	O
does	O	O
a	O	O
couple	O	O
of	O	O
other	O	O
things	O	O
that	O	O
are	O	O
slow	O	O
)	O	O
Its	O	O
also	O	O
way	O	O
too	O	O
easy	O	O
to	O	O
screw	O	O
it	O	O
up	O	O
.	O	O
Instead	O	O
I	O	O
would	O	O
use	O	O
URIBuilder	B-api_mention	B-api_mention
or	O	O
Spring	O	O
'	O	O
s	O	O
URIUtils	B-api_mention	B-api_mention
or	O	O
Commons	O	O
Apache	O	O
HttpClient	B-api_mention	O
.	O	O
The	O	O
reason	O	O
being	O	O
you	O	O
have	O	O
to	O	O
escape	O	O
the	O	O
query	O	O
parameters	O	O
name	O	O
(	O	O
ie	O	O
BalusC	O	O
'	O	O
s	O	O
answer	O	O
q	O	O
)	O	O
differently	O	O
than	O	O
the	O	O
parameter	O	O
value	O	O
.	O	O
The	O	O
only	O	O
downside	O	O
to	O	O
the	O	O
above	O	O
(	O	O
that	O	O
I	O	O
found	O	O
out	O	O
painfully	O	O
)	O	O
is	O	O
that	O	O
URL	O	B-api_mention
'	O	O
s	O	O
are	O	O
not	O	O
a	O	O
true	O	O
subset	O	O
of	O	O
URI	O	O
'	O	O
s	O	O
.	O	O
Since	O	O
I	O	O
'	O	O
m	O	O
just	O	O
linking	O	O
to	O	O
other	O	O
answers	O	O
I	O	O
marked	O	O
this	O	O
as	O	O
a	O	O
community	O	O
wiki	O	O
.	O	O
Feel	O	O
free	O	O
to	O	O
edit	O	O
.	O	O
Question	O	O
-	O	O
25850328	O	O
,	O	O
answer	O	O
-	O	O
25850576	O	O
#	O	O
li	O	O
Is	O	O
the	O	O
definition	O	O
of	O	O
a	O	O
marker	B-api_mention	O
interface	O	O
mentioned	O	O
above	O	O
in	O	O
1st	O	O
point	O	O
wrong	O	O
?	O	O
-	O	O
It	O	O
is	O	O
correct	O	O
in	O	O
the	O	O
parts	O	O
that	O	O
(	O	O
1	O	O
)	O	O
a	O	O
marker	B-api_mention	O
interface	O	O
must	O	O
be	O	O
empty	O	O
,	O	O
and	O	O
(	O	O
2	O	O
)	O	O
implementing	O	O
it	O	O
is	O	O
meant	O	O
to	O	O
imply	O	O
some	O	O
special	O	O
treatment	O	O
of	O	O
the	O	O
implementing	O	O
class	O	O
.	O	O
The	O	O
part	O	O
that	O	O
is	O	O
incorrect	O	O
is	O	O
that	O	O
it	O	O
implies	O	O
that	O	O
JVM	O	O
or	O	O
the	O	O
compiler	O	O
would	O	O
treat	O	O
the	O	O
objects	O	O
of	O	O
that	O	O
class	O	O
differently	O	O
:	O	O
you	O	O
are	O	O
correct	O	O
in	O	O
observing	O	O
that	O	O
it	O	O
is	O	O
the	O	O
code	O	O
of	O	O
Java	O	O
class	O	O
library	O	O
that	O	O
treats	O	O
these	O	O
objects	O	O
as	O	O
cloneable	O	O
,	O	O
serializable	O	O
,	O	O
etc	O	O
.	O	O
It	O	O
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
the	O	O
compiler	O	O
or	O	O
the	O	O
JVM	O	O
.	O	O
#	O	O
li	O	O
instead	O	O
of	O	O
using	O	O
the	O	O
instanceOf	B-api_mention	B-api_mention
operator	O	O
why	O	O
can	O	O
'	O	O
t	O	O
the	O	O
method	O	O
be	O	O
something	O	O
like	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
so	O	O
that	O	O
there	O	O
is	O	O
a	O	O
compile	O	O
-	O	O
time	O	O
type	O	O
checking	O	O
-	O	O
This	O	O
lets	O	O
you	O	O
avoid	O	O
polluting	O	O
your	O	O
code	O	O
with	O	O
the	O	O
name	O	O
of	O	O
the	O	O
marker	O	O
interface	O	O
when	O	O
a	O	O
"	O	O
plain	O	O
Object	O	B-api_mention
"	O	O
is	O	O
needed	O	O
.	O	O
For	O	O
example	O	O
,	O	O
if	O	O
you	O	O
make	O	O
a	O	O
class	O	O
that	O	O
needs	O	O
to	O	O
be	O	O
serializable	O	O
,	O	O
and	O	O
has	O	O
object	O	O
members	O	O
,	O	O
you	O	O
would	O	O
be	O	O
forced	O	O
to	O	O
either	O	O
do	O	O
casting	O	O
or	O	O
make	O	O
your	O	O
objects	O	O
Serializable	B-api_mention	B-api_mention
at	O	O
compile	O	O
time	O	O
.	O	O
This	O	O
is	O	O
inconvenient	O	O
,	O	O
because	O	O
the	O	O
interface	O	O
is	O	O
devoid	O	O
of	O	O
any	O	O
functionality	O	O
.	O	O
#	O	O
li	O	O
How	O	O
Annotations	B-api_mention	B-api_mention
are	O	O
better	O	O
than	O	O
Marker	B-api_mention	B-api_mention
Interfaces	O	O
?	O	O
-	O	O
They	O	O
let	O	O
you	O	O
achieve	O	O
the	O	O
same	O	O
purpose	O	O
of	O	O
conveying	O	O
metadata	O	O
about	O	O
the	O	O
class	O	O
to	O	O
its	O	O
consumers	O	O
without	O	O
creating	O	O
a	O	O
separate	O	O
type	O	O
for	O	O
it	O	O
.	O	O
Annotations	B-api_mention	O
are	O	O
more	O	O
powerful	O	O
,	O	O
too	O	O
,	O	O
letting	O	O
programmers	O	O
pass	O	O
more	O	O
sophisticated	O	O
information	O	O
to	O	O
classes	O	O
that	O	O
"	O	O
consume	O	O
"	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
13950338	O	O
,	O	O
answer	O	O
-	O	O
17066803	O	O
Grant	O	O
Vibration	O	O
Permission	O	O
Before	O	O
you	O	O
start	O	O
implementing	O	O
any	O	O
vibration	O	O
code	O	O
,	O	O
you	O	O
have	O	O
to	O	O
give	O	O
your	O	O
application	O	O
the	O	O
permission	O	O
to	O	O
vibrate	O	O
:	O	O
<	O	O
uses	O	O
-	O	O
permission	O	O
android	O	O
:	O	O
name	O	O
=	O	O
StringLiteral	O	O
/	O	O
>	O	O
Make	O	O
sure	O	O
to	O	O
include	O	O
this	O	O
line	O	O
in	O	O
your	O	O
AndroidManifest	O	O
.	O	O
xml	O	O
file	O	O
.	O	O
Import	O	O
the	O	O
Vibration	O	O
Library	O	O
Most	O	O
IDEs	O	O
will	O	O
do	O	O
this	O	O
for	O	O
you	O	O
,	O	O
but	O	O
here	O	O
is	O	O
the	O	O
import	O	O
statement	O	O
if	O	O
yours	O	O
doesn	O	O
'	O	O
t	O	O
:	O	O
import	O	O
android	B-api_mention	O
.	I-api_mention	O
os	I-api_mention	O
.	I-api_mention	O
Vibrator	I-api_mention	O
;	O	O
Make	O	O
sure	O	O
this	O	O
in	O	O
the	O	O
activity	O	O
where	O	O
you	O	O
want	O	O
the	O	O
vibration	O	O
to	O	O
occur	O	O
.	O	O
How	O	O
to	O	O
Vibrate	B-api_mention	O
for	O	O
a	O	O
Given	O	O
Time	O	O
In	O	O
most	O	O
circumstances	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
be	O	O
wanting	O	O
to	O	O
vibrate	O	O
the	O	O
device	O	O
for	O	O
a	O	O
short	O	O
,	O	O
predetermined	O	O
amount	O	O
of	O	O
time	O	O
.	O	O
You	O	O
can	O	O
achieve	O	O
this	O	O
by	O	O
using	O	O
the	O	O
vibrate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Here	O	O
is	O	O
a	O	O
quick	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
'	O	O
s	O	O
it	O	O
,	O	O
simple	O	O
!	O	O
How	O	O
to	O	O
Vibrate	O	O
Indefinitely	O	O
It	O	O
may	O	O
be	O	O
the	O	O
case	O	O
that	O	O
you	O	O
want	O	O
the	O	O
device	O	O
to	O	O
continue	O	O
vibrating	O	O
indefinitely	O	O
.	O	O
For	O	O
this	O	O
,	O	O
we	O	O
use	O	O
the	O	O
vibrate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
When	O	O
you	O	O
'	O	O
re	O	O
ready	O	O
to	O	O
stop	O	O
the	O	O
vibration	O	O
,	O	O
just	O	O
call	O	O
the	O	O
cancel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
v	O	O
.	B-api_mention	B-api_mention
cancel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
How	O	O
to	O	O
use	O	O
Vibration	O	O
Patterns	O	O
If	O	O
you	O	O
want	O	O
a	O	O
more	O	O
bespoke	O	O
vibration	O	O
,	O	O
you	O	O
can	O	O
attempt	O	O
to	O	O
create	O	O
your	O	O
own	O	O
vibration	O	O
patterns	O	O
:	O	O
#	O	O
pre	O	O
More	O	O
Complex	O	O
Vibrations	O	O
There	O	O
are	O	O
multiple	O	O
SDKs	O	O
that	O	O
offer	O	O
a	O	O
more	O	O
comprehensive	O	O
range	O	O
of	O	O
haptic	O	O
feedback	O	O
.	O	O
One	O	O
that	O	O
I	O	O
use	O	O
for	O	O
special	O	O
effects	O	O
is	O	O
Immersion	O	O
'	O	O
s	O	O
Haptic	O	O
Development	O	O
Platform	O	O
for	O	O
Android	O	O
.	O	O
Troubleshooting	O	O
If	O	O
your	O	O
device	O	O
won	O	O
'	O	O
t	O	O
vibrate	O	O
,	O	O
first	O	O
make	O	O
sure	O	O
that	O	O
it	O	O
can	O	O
vibrate	O	O
:	O	O
#	O	O
pre	O	O
Secondly	O	O
,	O	O
please	O	O
ensure	O	O
that	O	O
you	O	O
'	O	O
ve	O	O
given	O	O
your	O	O
application	O	O
the	O	O
permission	O	O
to	O	O
vibrate	O	O
!	O	O
Refer	O	O
back	O	O
to	O	O
the	O	O
first	O	O
point	O	O
.	O	O
Question	O	O
-	O	O
8725387	O	O
In	O	O
Java	O	O
there	O	O
are	O	O
the	O	O
SortedSet	B-api_mention	B-api_mention
and	O	O
SortedMap	B-api_mention	B-api_mention
interfaces	O	O
.	O	O
Both	O	O
belong	O	O
to	O	O
Java	O	O
'	O	O
s	O	O
standard	O	O
Collections	B-api_mention	B-api_mention
framework	O	O
and	O	O
provide	O	O
a	O	O
sorted	O	O
way	O	O
to	O	O
access	O	O
the	O	O
elements	O	O
.	O	O
However	O	O
,	O	O
in	O	O
my	O	O
understanding	O	O
there	O	O
is	O	O
no	O	O
SortedList	O	B-api_mention
in	O	O
Java	O	O
.	O	O
You	O	O
can	O	O
use	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
sort	O	O
a	O	O
list	O	O
.	O	O
Any	O	O
idea	O	O
why	O	O
it	O	O
is	O	O
designed	O	O
like	O	O
that	O	O
?	O	O
Question	O	O
-	O	O
27430092	O	O
,	O	O
answer	O	O
-	O	O
27449187	O	O
The	O	O
standard	O	O
use	O	O
case	O	O
for	O	O
BigInteger	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
in	O	O
cryptography	O	O
.	O	O
Specifically	O	O
,	O	O
certain	O	O
cryptographic	O	O
algorithms	O	O
,	O	O
such	O	O
as	O	O
RSA	O	O
,	O	O
require	O	O
randomly	O	O
chosen	O	O
large	O	O
primes	O	O
.	O	O
Importantly	O	O
,	O	O
however	O	O
,	O	O
these	O	O
algorithms	O	O
don	O	O
'	O	O
t	O	O
really	O	O
require	O	O
these	O	O
numbers	O	O
to	O	O
be	O	O
guaranteed	O	O
to	O	O
be	O	O
prime	O	O
—	O	O
they	O	O
just	O	O
need	O	O
to	O	O
be	O	O
prime	O	O
with	O	O
a	O	O
very	O	O
high	O	O
probability	O	O
.	O	O
How	O	O
high	O	O
is	O	O
very	O	O
high	O	O
?	O	O
Well	O	O
,	O	O
in	O	O
a	O	O
crypto	O	O
application	O	O
,	O	O
one	O	O
would	O	O
typically	O	O
call	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
with	O	O
an	O	O
argument	O	O
somewhere	O	O
between	O	O
128	O	O
and	O	O
256	O	O
.	O	O
Thus	O	O
,	O	O
the	O	O
probability	O	O
of	O	O
a	O	O
non	O	O
-	O	O
prime	O	O
number	O	O
passing	O	O
such	O	O
a	O	O
test	O	O
is	O	O
less	O	O
than	O	O
one	O	O
in	O	O
2	O	O
128	O	O
or	O	O
2	O	O
256	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
put	O	O
that	O	O
in	O	O
perspective	O	O
:	O	O
if	O	O
you	O	O
had	O	O
10	O	O
billion	O	O
computers	O	O
,	O	O
each	O	O
generating	O	O
10	O	O
billion	O	O
probable	O	O
prime	O	O
numbers	O	O
per	O	O
second	O	O
(	O	O
which	O	O
would	O	O
mean	O	O
less	O	O
than	O	O
one	O	O
clock	O	O
cycle	O	O
per	O	O
number	O	O
on	O	O
any	O	O
modern	O	O
CPU	O	O
)	O	O
,	O	O
and	O	O
the	O	O
primality	O	O
of	O	O
those	O	O
numbers	O	O
was	O	O
tested	O	O
with	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
would	O	O
,	O	O
on	O	O
average	O	O
,	O	O
expect	O	O
one	O	O
non	O	O
-	O	O
prime	O	O
number	O	O
to	O	O
slip	O	O
in	O	O
once	O	O
in	O	O
every	O	O
100	O	O
billion	O	O
years	O	O
.	O	O
That	O	O
is	O	O
,	O	O
that	O	O
would	O	O
be	O	O
the	O	O
case	O	O
,	O	O
if	O	O
those	O	O
10	O	O
billion	O	O
computers	O	O
could	O	O
somehow	O	O
all	O	O
run	O	O
for	O	O
hundreds	O	O
of	O	O
billions	O	O
of	O	O
years	O	O
without	O	O
experiencing	O	O
any	O	O
hardware	O	O
failures	O	O
.	O	O
In	O	O
practice	O	O
,	O	O
though	O	O
,	O	O
it	O	O
'	O	O
s	O	O
a	O	O
lot	O	O
more	O	O
likely	O	O
for	O	O
a	O	O
random	O	O
cosmic	O	O
ray	O	O
to	O	O
strike	O	O
your	O	O
computer	O	O
at	O	O
just	O	O
the	O	O
right	O	O
time	O	O
and	O	O
place	O	O
to	O	O
flip	O	O
the	O	O
return	O	O
value	O	O
of	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
from	O	O
false	O	O
to	O	O
true	O	O
,	O	O
without	O	O
causing	O	O
any	O	O
other	O	O
detectable	O	O
effects	O	O
,	O	O
than	O	O
it	O	O
is	O	O
for	O	O
a	O	O
non	O	O
-	O	O
prime	O	O
number	O	O
to	O	O
actually	O	O
pass	O	O
the	O	O
probabilistic	O	O
primality	O	O
test	O	O
at	O	O
that	O	O
certainty	O	O
level	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
the	O	O
same	O	O
risk	O	O
of	O	O
random	O	O
cosmic	O	O
rays	O	O
and	O	O
other	O	O
hardware	O	O
faults	O	O
also	O	O
applies	O	O
to	O	O
deterministic	O	O
primality	O	O
tests	O	O
like	O	O
AKS	O	O
.	O	O
Thus	O	O
,	O	O
in	O	O
practice	O	O
,	O	O
even	O	O
these	O	O
tests	O	O
have	O	O
a	O	O
(	O	O
very	O	O
small	O	O
)	O	O
baseline	O	O
false	O	O
positive	O	O
rate	O	O
due	O	O
to	O	O
random	O	O
hardware	O	O
failures	O	O
(	O	O
not	O	O
to	O	O
mention	O	O
all	O	O
other	O	O
possible	O	O
sources	O	O
of	O	O
errors	O	O
,	O	O
such	O	O
as	O	O
implementation	O	O
bugs	O	O
)	O	O
.	O	O
Since	O	O
it	O	O
'	O	O
s	O	O
easy	O	O
to	O	O
push	O	O
the	O	O
intrinsic	O	O
false	O	O
positive	O	O
rate	O	O
of	O	O
the	O	O
Miller	O	O
–	O	O
Rabin	O	O
primality	O	O
test	O	O
used	O	O
by	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
far	O	O
below	O	O
this	O	O
baseline	O	O
rate	O	O
,	O	O
simply	O	O
by	O	O
repeating	O	O
the	O	O
test	O	O
sufficiently	O	O
many	O	O
times	O	O
,	O	O
and	O	O
since	O	O
,	O	O
even	O	O
repeated	O	O
so	O	O
many	O	O
times	O	O
,	O	O
the	O	O
Miller	O	O
–	O	O
Rabin	O	O
test	O	O
is	O	O
still	O	O
much	O	O
faster	O	O
in	O	O
practice	O	O
than	O	O
the	O	O
best	O	O
known	O	O
deterministic	O	O
primality	O	O
tests	O	O
like	O	O
AKS	O	O
,	O	O
it	O	O
remains	O	O
the	O	O
standard	O	O
primality	O	O
test	O	O
for	O	O
cryptographic	O	O
applications	O	O
.	O	O
(	O	O
Besides	O	O
,	O	O
even	O	O
if	O	O
you	O	O
happened	O	O
to	O	O
accidentally	O	O
select	O	O
a	O	O
strong	O	O
pseudoprime	O	O
as	O	O
one	O	O
of	O	O
the	O	O
factors	O	O
of	O	O
your	O	O
RSA	O	O
modulus	O	O
,	O	O
it	O	O
would	O	O
not	O	O
generally	O	O
lead	O	O
to	O	O
a	O	O
catastrophic	O	O
failure	O	O
.	O	O
Typically	O	O
,	O	O
such	O	O
pseudoprimes	O	O
would	O	O
be	O	O
products	O	O
of	O	O
two	O	O
(	O	O
or	O	O
rarely	O	O
more	O	O
)	O	O
primes	O	O
of	O	O
approximately	O	O
half	O	O
the	O	O
length	O	O
,	O	O
which	O	O
means	O	O
that	O	O
you	O	O
'	O	O
d	O	O
end	O	O
up	O	O
with	O	O
a	O	O
multi	O	O
-	O	O
prime	O	O
RSA	O	O
key	O	O
.	O	O
As	O	O
long	O	O
as	O	O
none	O	O
of	O	O
the	O	O
factors	O	O
were	O	O
too	O	O
small	O	O
(	O	O
and	O	O
if	O	O
they	O	O
were	O	O
,	O	O
the	O	O
primality	O	O
test	O	O
should	O	O
'	O	O
ve	O	O
caught	O	O
them	O	O
)	O	O
,	O	O
the	O	O
RSA	O	O
algorithm	O	O
will	O	O
still	O	O
work	O	O
just	O	O
fine	O	O
,	O	O
and	O	O
the	O	O
key	O	O
,	O	O
although	O	O
somewhat	O	O
weaker	O	O
against	O	O
certain	O	O
types	O	O
of	O	O
attacks	O	O
than	O	O
normal	O	O
RSA	O	O
keys	O	O
of	O	O
the	O	O
same	O	O
length	O	O
,	O	O
should	O	O
still	O	O
be	O	O
reasonably	O	O
secure	O	O
if	O	O
you	O	O
didn	O	O
'	O	O
t	O	O
needlessly	O	O
skimp	O	O
on	O	O
the	O	O
key	O	O
length	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
9481865	O	O
,	O	O
answer	O	O
-	O	O
33093380	O	O
You	O	O
may	O	O
try	O	O
isReachable	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
InetAddress	B-api_mention	B-api_mention
class	O	O
to	O	O
figure	O	O
out	O	O
which	O	O
IP	O	O
address	O	O
is	O	O
your	O	O
real	O	O
publicly	O	O
available	O	O
IP	O	O
address	O	O
.	O	O
I	O	O
think	O	O
other	O	O
type	O	O
of	O	O
addresses	O	O
(	O	O
site	O	O
local	O	O
,	O	O
link	O	O
local	O	O
)	O	O
are	O	O
not	O	O
reachable	O	O
from	O	O
outside	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
34509566	O	O
,	O	O
answer	O	O
-	O	O
34529067	O	O
Keep	O	O
in	O	O
mind	O	O
that	O	O
Java	O	O
holds	O	O
a	O	O
pool	O	O
of	O	O
all	O	O
string	O	O
literals	O	O
found	O	O
in	O	O
program	O	O
,	O	O
used	O	O
for	O	O
matching	O	O
purposes	O	O
among	O	O
others	O	O
,	O	O
so	O	O
any	O	O
different	O	O
string	O	O
literal	O	O
concatenation	O	O
above	O	O
will	O	O
lead	O	O
to	O	O
the	O	O
same	O	O
object	O	O
,	O	O
to	O	O
the	O	O
same	O	O
string	O	O
literal	O	O
.	O	O
You	O	O
can	O	O
check	O	O
out	O	O
this	O	O
useful	O	O
article	O	O
for	O	O
more	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
the	O	O
concatenation	O	O
of	O	O
a	O	O
String	B-api_mention	B-api_mention
object	O	O
and	O	O
a	O	O
literal	O	O
(	O	O
case	O	O
c	O	O
+	O	O
StringLiteral	O	O
)	O	O
will	O	O
lead	O	O
to	O	O
the	O	O
creation	O	O
of	O	O
a	O	O
as	O	O
StringBuilder	B-api_mention	B-api_mention
object	O	O
at	O	O
runtime	O	O
,	O	O
different	O	O
to	O	O
the	O	O
literals	O	O
found	O	O
in	O	O
pool	O	O
.	O	O
Question	O	O
-	O	O
16159203	O	O
,	O	O
answer	O	O
-	O	O
18258659	O	O
You	O	O
have	O	O
ordinary	O	O
memory	O	O
,	O	O
the	O	O
'	O	O
currentpos	O	O
'	O	O
reference	O	O
and	O	O
the	O	O
Point	B-api_mention	B-api_mention
object	O	O
and	O	O
its	O	O
fields	O	O
behind	O	O
it	O	O
,	O	O
shared	O	O
between	O	O
2	O	O
threads	O	O
,	O	O
without	O	O
synchronisation	O	O
.	O	O
Thus	O	O
,	O	O
there	O	O
is	O	O
no	O	O
defined	O	O
ordering	O	O
between	O	O
the	O	O
writes	O	O
that	O	O
happen	O	O
to	O	O
this	O	O
memory	O	O
in	O	O
the	O	O
main	O	O
thread	O	O
and	O	O
the	O	O
reads	O	O
in	O	O
the	O	O
created	O	O
thread	O	O
(	O	O
call	O	O
it	O	O
T	O	O
)	O	O
.	O	O
Main	O	O
thread	O	O
is	O	O
doing	O	O
the	O	O
following	O	O
writes	O	O
(	O	O
ignoring	O	O
the	O	O
initial	O	O
setup	O	O
of	O	O
point	O	O
,	O	O
will	O	O
result	O	O
in	O	O
p	O	O
.	O	O
x	O	O
and	O	O
p	O	O
.	O	O
y	O	O
having	O	O
default	O	O
values	O	O
)	O	O
:	O	O
#	O	O
li	O	O
to	O	O
p	O	O
.	O	O
x	O	O
#	O	O
li	O	O
to	O	O
p	O	O
.	O	O
y	O	O
#	O	O
li	O	O
to	O	O
currentpos	O	O
Because	O	O
there	O	O
is	O	O
nothing	O	O
special	O	O
about	O	O
these	O	O
writes	O	O
in	O	O
terms	O	O
of	O	O
synchronisation	O	O
/	O	O
barriers	O	O
,	O	O
the	O	O
runtime	O	O
is	O	O
free	O	O
to	O	O
allow	O	O
the	O	O
T	O	O
thread	O	O
see	O	O
them	O	O
occur	O	O
in	O	O
any	O	O
order	O	O
(	O	O
the	O	O
main	O	O
thread	O	O
of	O	O
course	O	O
always	O	O
sees	O	O
writes	O	O
and	O	O
reads	O	O
ordered	O	O
according	O	O
to	O	O
programme	O	O
order	O	O
)	O	O
,	O	O
and	O	O
occur	O	O
at	O	O
any	O	O
point	O	O
between	O	O
the	O	O
reads	O	O
in	O	O
T	O	O
.	O	O
So	O	O
T	O	O
is	O	O
doing	O	O
:	O	O
#	O	O
li	O	O
reads	O	O
currentpos	O	O
to	O	O
p	O	O
#	O	O
li	O	O
read	O	O
p	O	O
.	O	O
x	O	O
and	O	O
p	O	O
.	O	O
y	O	O
(	O	O
in	O	O
either	O	O
order	O	O
)	O	O
#	O	O
li	O	O
compare	O	O
,	O	O
and	O	O
take	O	O
the	O	O
branch	O	O
#	O	O
li	O	O
read	O	O
p	O	O
.	O	O
x	O	O
and	O	O
p	O	O
.	O	O
y	O	O
(	O	O
either	O	O
order	O	O
)	O	O
and	O	O
call	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
Given	O	O
there	O	O
'	O	O
s	O	O
no	O	O
ordering	O	O
relationships	O	O
between	O	O
the	O	O
writes	O	O
in	O	O
main	O	O
,	O	O
and	O	O
the	O	O
reads	O	O
in	O	O
T	O	O
,	O	O
there	O	O
are	O	O
clearly	O	O
several	O	O
ways	O	O
this	O	O
can	O	O
produce	O	O
your	O	O
result	O	O
,	O	O
as	O	O
T	O	O
may	O	O
see	O	O
main	O	O
'	O	O
s	O	O
write	O	O
to	O	O
currentpos	O	O
before	O	O
the	O	O
writes	O	O
to	O	O
currentpos	O	O
.	O	O
y	O	O
or	O	O
currentpos	O	O
.	O	O
x	O	O
:	O	O
#	O	O
li	O	O
It	O	O
reads	O	O
currentpos	O	O
.	O	O
x	O	O
first	O	O
,	O	O
before	O	O
the	O	O
x	O	O
write	O	O
has	O	O
occurred	O	O
-	O	O
gets	O	O
0	O	O
,	O	O
then	O	O
reads	O	O
currentpos	O	O
.	O	O
y	O	O
before	O	O
the	O	O
y	O	O
write	O	O
has	O	O
occurred	O	O
-	O	O
gets	O	O
0	O	O
.	O	O
Compare	O	O
evals	O	O
to	O	O
true	O	O
.	O	O
The	O	O
writes	O	O
become	O	O
visible	O	O
to	O	O
T	O	O
.	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
is	O	O
called	O	O
.	O	O
#	O	O
li	O	O
It	O	O
reads	O	O
currentpos	O	O
.	O	O
x	O	O
first	O	O
,	O	O
after	O	O
the	O	O
x	O	O
write	O	O
has	O	O
occurred	O	O
,	O	O
then	O	O
reads	O	O
currentpos	O	O
.	O	O
y	O	O
before	O	O
the	O	O
y	O	O
write	O	O
has	O	O
occurred	O	O
-	O	O
gets	O	O
0	O	O
.	O	O
Compare	O	O
evals	O	O
to	O	O
true	O	O
.	O	O
Writes	O	O
become	O	O
visible	O	O
to	O	O
T	O	O
.	O	O
.	O	O
.	O	O
etc	O	O
.	O	O
#	O	O
li	O	O
It	O	O
reads	O	O
currentpos	O	O
.	O	O
y	O	O
first	O	O
,	O	O
before	O	O
the	O	O
y	O	O
write	O	O
has	O	O
occurred	O	O
(	O	O
0	O	O
)	O	O
,	O	O
then	O	O
reads	O	O
currentpos	O	O
.	O	O
x	O	O
after	O	O
the	O	O
x	O	O
write	O	O
,	O	O
evals	O	O
to	O	O
true	O	O
.	O	O
etc	O	O
.	O	O
and	O	O
so	O	O
on	O	O
.	O	O
.	O	O
.	O	O
There	O	O
are	O	O
a	O	O
number	O	O
of	O	O
data	O	O
races	O	O
here	O	O
.	O	O
I	O	O
suspect	O	O
the	O	O
flawed	O	O
assumption	O	O
here	O	O
is	O	O
thinking	O	O
that	O	O
the	O	O
writes	O	O
that	O	O
result	O	O
from	O	O
this	O	O
line	O	O
are	O	O
made	O	O
visible	O	O
across	O	O
all	O	O
the	O	O
threads	O	O
in	O	O
the	O	O
programme	O	O
order	O	O
of	O	O
the	O	O
thread	O	O
executing	O	O
it	O	O
:	O	O
currentPos	O	O
=	O	O
new	O	O
Point	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Java	O	O
makes	O	O
no	O	O
such	O	O
guarantee	O	O
(	O	O
it	O	O
'	O	O
d	O	O
be	O	O
terrible	O	O
for	O	O
performance	O	O
)	O	O
.	O	O
Something	O	O
more	O	O
must	O	O
be	O	O
added	O	O
if	O	O
your	O	O
programme	O	O
needs	O	O
a	O	O
guaranteed	O	O
ordering	O	O
of	O	O
the	O	O
writes	O	O
relative	O	O
to	O	O
reads	O	O
in	O	O
other	O	O
threads	O	O
.	O	O
Others	O	O
have	O	O
suggested	O	O
making	O	O
the	O	O
x	O	O
,	O	O
y	O	O
fields	O	O
final	O	O
,	O	O
or	O	O
alternatively	O	O
making	O	O
currentpos	O	O
volatile	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
make	O	O
the	O	O
x	O	O
,	O	O
y	O	O
fields	O	O
final	O	O
,	O	O
then	O	O
Java	O	O
guarantees	O	O
that	O	O
the	O	O
writes	O	O
of	O	O
their	O	O
values	O	O
will	O	O
be	O	O
seen	O	O
to	O	O
occur	O	O
before	O	O
the	O	O
constructor	O	O
returns	O	O
,	O	O
in	O	O
all	O	O
threads	O	O
.	O	O
Thus	O	O
,	O	O
as	O	O
the	O	O
assignment	O	O
to	O	O
currentpos	O	O
is	O	O
after	O	O
the	O	O
constructor	O	O
,	O	O
the	O	O
T	O	O
thread	O	O
is	O	O
guaranteed	O	O
to	O	O
see	O	O
the	O	O
writes	O	O
in	O	O
the	O	O
correct	O	O
order	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
make	O	O
currentpos	O	O
volatile	O	O
,	O	O
then	O	O
Java	O	O
guarantees	O	O
that	O	O
that	O	O
this	O	O
is	O	O
a	O	O
synchronisation	O	O
point	O	O
which	O	O
will	O	O
be	O	O
total	O	O
-	O	O
ordered	O	O
wrt	O	O
other	O	O
synchronisation	O	O
points	O	O
.	O	O
As	O	O
in	O	O
main	O	O
the	O	O
writes	O	O
to	O	O
x	O	O
and	O	O
y	O	O
must	O	O
happen	O	O
before	O	O
the	O	O
write	O	O
to	O	O
currentpos	O	O
,	O	O
then	O	O
any	O	O
read	O	O
of	O	O
currentpos	O	O
in	O	O
another	O	O
thread	O	O
must	O	O
see	O	O
also	O	O
the	O	O
writes	O	O
of	O	O
x	O	O
,	O	O
y	O	O
that	O	O
happened	O	O
before	O	O
.	O	O
Using	O	O
final	O	O
has	O	O
the	O	O
advantage	O	O
that	O	O
it	O	O
makes	O	O
the	O	O
fields	O	O
immutable	O	O
,	O	O
and	O	O
thus	O	O
allows	O	O
the	O	O
values	O	O
to	O	O
be	O	O
cached	O	O
.	O	O
Using	O	O
volatile	O	O
leads	O	O
to	O	O
synchronisation	O	O
on	O	O
every	O	O
write	O	O
and	O	O
read	O	O
of	O	O
currentpos	O	O
,	O	O
which	O	O
might	O	O
hurt	O	O
performance	O	O
.	O	O
See	O	O
chapter	O	O
17	O	O
of	O	O
the	O	O
Java	O	O
Language	O	O
Spec	O	O
for	O	O
the	O	O
gory	O	O
details	O	O
:	O	O
#	O	O
a	O	O
(	O	O
Initial	O	O
answer	O	O
assumed	O	O
a	O	O
weaker	O	O
memory	O	O
model	O	O
,	O	O
as	O	O
I	O	O
was	O	O
not	O	O
sure	O	O
the	O	O
JLS	O	O
guaranteed	O	O
volatile	O	O
was	O	O
sufficient	O	O
.	O	O
Answer	O	O
edited	O	O
to	O	O
reflect	O	O
comment	O	O
from	O	O
assylias	O	O
,	O	O
pointing	O	O
out	O	O
the	O	O
Java	O	O
model	O	O
is	O	O
stronger	O	O
-	O	O
happens	O	O
-	O	O
before	O	O
is	O	O
transitive	O	O
-	O	O
and	O	O
so	O	O
volatile	O	O
on	O	O
currentpos	O	O
also	O	O
suffices	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
10631715	O	O
,	O	O
answer	O	O
-	O	O
10631738	O	O
You	O	O
could	O	O
do	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Basically	O	O
the	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
will	O	O
split	O	O
the	O	O
string	O	O
according	O	O
to	O	O
(	O	O
in	O	O
this	O	O
case	O	O
)	O	O
delimiter	O	O
you	O	O
are	O	O
passing	O	O
and	O	O
will	O	O
return	O	O
an	O	O
array	O	O
of	O	O
strings	O	O
.	O	O
However	O	O
,	O	O
you	O	O
seem	O	O
to	O	O
be	O	O
after	O	O
a	O	O
List	B-api_mention	B-api_mention
of	O	O
Strings	B-api_mention	O
rather	O	O
than	O	O
an	O	O
array	O	O
,	O	O
so	O	O
the	O	O
array	O	O
must	O	O
be	O	O
turned	O	O
into	O	O
a	O	O
list	O	O
by	O	O
using	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
utility	O	O
.	O	O
Just	O	O
as	O	O
an	O	O
FYI	O	O
you	O	O
could	O	O
also	O	O
do	O	O
something	O	O
like	O	O
so	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
it	O	O
is	O	O
usually	O	O
better	O	O
practice	O	O
to	O	O
program	O	O
to	O	O
an	O	O
interface	O	O
rather	O	O
than	O	O
to	O	O
an	O	O
actual	O	O
concrete	O	O
implementation	O	O
,	O	O
so	O	O
I	O	O
would	O	O
recommend	O	O
the	O	O
1st	O	O
option	O	O
.	O	O
Question	O	O
-	O	O
22718744	O	O
,	O	O
answer	O	O
-	O	O
27477312	O	O
The	O	O
behavior	O	O
of	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	O	O
which	O	O
calls	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
)	O	I-api_mention
changes	O	O
between	O	O
Java	O	O
7	O	O
and	O	O
Java	O	O
8	O	O
.	O	O
Documentation	O	O
Comparing	O	O
between	O	O
the	O	O
documentation	O	O
of	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
in	O	O
Java	O	O
7	O	O
and	O	O
Java	O	O
8	O	O
,	O	O
we	O	O
observe	O	O
the	O	O
following	O	O
clause	O	O
being	O	O
added	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
same	O	O
clause	O	O
is	O	O
also	O	O
added	O	O
to	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
in	O	O
Java	O	O
8	O	O
,	O	O
compared	O	O
to	O	O
Java	O	O
7	O	O
.	O	O
Reference	O	O
implementation	O	O
Let	O	O
us	O	O
compare	O	O
the	O	O
code	O	O
of	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
of	O	O
the	O	O
reference	O	O
implemetation	O	O
in	O	O
Java	O	O
7	O	O
and	O	O
Java	O	O
8	O	O
.	O	O
The	O	O
code	O	O
is	O	O
retrieved	O	O
from	O	O
grepcode	O	O
,	O	O
for	O	O
version	O	O
7u40	O	O
-	O	O
b43	O	O
and	O	O
8	O	O
-	O	O
b132	O	O
.	O	O
Java	O	O
7	O	O
#	O	O
pre	O	O
Java	O	O
8	O	O
#	O	O
pre	O	O
The	O	O
addition	O	O
of	O	O
the	O	O
following	O	O
code	O	O
in	O	O
Java	O	O
8	O	O
excludes	O	O
the	O	O
zero	O	O
-	O	O
length	O	O
match	O	O
at	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
input	O	O
string	O	O
,	O	O
which	O	O
explains	O	O
the	O	O
behavior	O	O
above	O	O
.	O	O
#	O	O
pre	O	O
Maintaining	O	O
compatibility	O	O
Following	O	O
behavior	O	O
in	O	O
Java	O	O
8	O	O
and	O	O
above	O	O
To	O	O
make	O	O
split	B-api_mention	O
behaves	O	O
consistently	O	O
across	O	O
versions	O	O
and	O	O
compatible	O	O
with	O	O
the	O	O
behavior	O	O
in	O	O
Java	O	O
8	O	O
:	O	O
#	O	O
li	O	O
If	O	O
your	O	O
regex	O	O
can	O	O
match	O	O
zero	O	O
-	O	O
length	O	O
string	O	O
,	O	O
just	O	O
add	O	O
(	O	O
?	O	O
!	O	O
\	O	O
A	O	O
)	O	O
at	O	O
the	O	O
end	O	O
of	O	O
the	O	O
regex	O	O
and	O	O
wrap	O	O
the	O	O
original	O	O
regex	O	O
in	O	O
non	O	O
-	O	O
capturing	O	O
group	O	O
(	O	O
?	O	O
:	O	O
.	O	O
.	O	O
.	O	O
)	O	O
(	O	O
if	O	O
necessary	O	O
)	O	O
.	O	O
#	O	O
li	O	O
If	O	O
your	O	O
regex	O	O
can	O	O
'	O	O
t	O	O
match	O	O
zero	O	O
-	O	O
length	O	O
string	O	O
,	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
do	O	O
anything	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
the	O	O
regex	O	O
can	O	O
match	O	O
zero	O	O
-	O	O
length	O	O
string	O	O
or	O	O
not	O	O
,	O	O
do	O	O
both	O	O
the	O	O
actions	O	O
in	O	O
step	O	O
1	O	O
.	O	O
(	O	O
?	O	O
!	O	O
\	O	O
A	O	O
)	O	O
checks	O	O
that	O	O
the	O	O
string	O	O
does	O	O
not	O	O
end	O	O
at	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
string	O	O
,	O	O
which	O	O
implies	O	O
that	O	O
the	O	O
match	O	O
is	O	O
an	O	O
empty	O	O
match	O	O
at	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
string	O	O
.	O	O
Following	O	O
behavior	O	O
in	O	O
Java	O	O
7	O	O
and	O	O
prior	O	O
There	O	O
is	O	O
no	O	O
general	O	O
solution	O	O
to	O	O
make	O	O
split	B-api_mention	O
backward	O	O
-	O	O
compatible	O	O
with	O	O
Java	O	O
7	O	O
and	O	O
prior	O	O
,	O	O
short	O	O
of	O	O
replacing	O	O
all	O	O
instance	O	O
of	O	O
split	B-api_mention	O
to	O	O
point	O	O
to	O	O
your	O	O
own	O	O
custom	O	O
implementation	O	O
.	O	O
Question	O	O
-	O	O
23699371	O	O
,	O	O
answer	O	O
-	O	O
23733628	O	O
The	O	O
easiest	O	O
way	O	O
to	O	O
implement	O	O
this	O	O
is	O	O
to	O	O
jump	O	O
on	O	O
the	O	O
sort	O	O
feature	O	O
as	O	O
it	O	O
already	O	O
provides	O	O
an	O	O
optional	O	O
Comparator	B-api_mention	B-api_mention
which	O	O
can	O	O
be	O	O
created	O	O
using	O	O
an	O	O
element	O	O
’	O	O
s	O	O
property	O	O
.	O	O
Then	O	O
you	O	O
have	O	O
to	O	O
filter	O	O
duplicates	O	O
out	O	O
which	O	O
can	O	O
be	O	O
done	O	O
using	O	O
a	O	O
statefull	O	O
Predicate	B-api_mention	O
which	O	O
uses	O	O
the	O	O
fact	O	O
that	O	O
for	O	O
a	O	O
sorted	O	O
stream	O	O
all	O	O
equal	O	O
elements	O	O
are	O	O
adjacent	O	O
:	O	O
#	O	O
pre	O	O
Of	O	O
course	O	O
,	O	O
a	O	O
statefull	O	O
Predicate	B-api_mention	O
is	O	O
not	O	O
thread	O	O
-	O	O
safe	O	O
,	O	O
however	O	O
if	O	O
that	O	O
’	O	O
s	O	O
your	O	O
need	O	O
you	O	O
can	O	O
move	O	O
this	O	O
logic	O	O
into	O	O
a	O	O
Collector	B-api_mention	B-api_mention
and	O	O
let	O	O
the	O	O
stream	O	O
take	O	O
care	O	O
of	O	O
the	O	O
thread	O	O
-	O	O
safety	O	O
when	O	O
using	O	O
your	O	O
Collector	B-api_mention	B-api_mention
.	O	O
This	O	O
depends	O	O
on	O	O
what	O	O
you	O	O
want	O	O
to	O	O
do	O	O
with	O	O
the	O	O
stream	O	O
of	O	O
distinct	O	O
elements	O	O
which	O	O
you	O	O
didn	O	O
’	O	O
t	O	O
tell	O	O
us	O	O
in	O	O
your	O	O
question	O	O
.	O	O
Question	O	O
-	O	O
31370403	O	O
I	O	O
'	O	O
m	O	O
currently	O	O
in	O	O
the	O	O
process	O	O
of	O	O
writing	O	O
a	O	O
paint	O	O
program	O	O
in	O	O
java	O	O
,	O	O
designed	O	O
to	O	O
have	O	O
flexible	O	O
and	O	O
comprehensive	O	O
functionalities	O	O
.	O	O
It	O	O
stemmed	O	O
from	O	O
my	O	O
final	O	O
project	O	O
,	O	O
that	O	O
I	O	O
wrote	O	O
overnight	O	O
the	O	O
day	O	O
before	O	O
.	O	O
Because	O	O
of	O	O
that	O	O
,	O	O
it	O	O
'	O	O
s	O	O
got	O	O
tons	O	O
and	O	O
tons	O	O
of	O	O
bugs	O	O
,	O	O
which	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
tackling	O	O
one	O	O
by	O	O
one	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
I	O	O
can	O	O
only	O	O
save	O	O
files	O	O
that	O	O
will	O	O
be	O	O
empty	O	O
,	O	O
my	O	O
rectangles	O	O
don	O	O
'	O	O
t	O	O
draw	O	O
right	O	O
but	O	O
my	O	O
circles	O	O
do	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
This	O	O
time	O	O
,	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
trying	O	O
to	O	O
add	O	O
undo	O	O
/	O	O
redo	O	O
functionality	O	O
to	O	O
my	O	O
program	O	O
.	O	O
However	O	O
,	O	O
I	O	O
can	O	O
'	O	O
t	O	O
"	O	O
undo	O	O
"	O	O
something	O	O
that	O	O
I	O	O
have	O	O
done	O	O
.	O	O
Therefore	O	O
,	O	O
I	O	O
got	O	O
an	O	O
idea	O	O
to	O	O
save	O	O
copies	O	O
of	O	O
my	O	O
BufferedImage	B-api_mention	O
each	O	O
time	O	O
a	O	O
mouseReleased	B-api_mention	O
event	O	O
was	O	O
fired	O	O
.	O	O
However	O	O
,	O	O
with	O	O
some	O	O
of	O	O
the	O	O
images	O	O
going	O	O
to	O	O
1920x1080	O	O
resolution	O	O
,	O	O
I	O	O
figured	O	O
that	O	O
this	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
efficient	O	O
:	O	O
storing	O	O
them	O	O
would	O	O
probably	O	O
take	O	O
gigabytes	O	O
of	O	O
memory	O	O
.	O	O
The	O	O
reason	O	O
for	O	O
why	O	O
I	O	O
can	O	O
'	O	O
t	O	O
simply	O	O
paint	O	O
the	O	O
same	O	O
thing	O	O
with	O	O
the	O	O
background	O	O
colour	O	O
to	O	O
undo	O	O
is	O	O
because	O	O
I	O	O
have	O	O
many	O	O
different	O	O
brushes	O	O
,	O	O
which	O	O
paint	O	O
based	O	O
on	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
because	O	O
there	O	O
are	O	O
many	O	O
different	O	O
layers	O	O
(	O	O
in	O	O
a	O	O
single	O	O
layer	O	O
)	O	O
.	O	O
Then	O	O
,	O	O
I	O	O
'	O	O
ve	O	O
considered	O	O
cloning	O	O
the	O	O
Graphics	B-api_mention	B-api_mention
objects	O	O
that	O	O
I	O	O
use	O	O
to	O	O
paint	O	O
to	O	O
the	O	O
BufferedImage	B-api_mention	B-api_mention
.	O	O
Like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
done	O	O
this	O	O
before	O	O
,	O	O
so	O	O
I	O	O
have	O	O
a	O	O
couple	O	O
questions	O	O
:	O	O
#	O	O
li	O	O
Would	O	O
I	O	O
still	O	O
be	O	O
wasting	O	O
pointless	O	O
memory	O	O
by	O	O
doing	O	O
this	O	O
,	O	O
like	O	O
cloning	O	O
my	O	O
BufferedImages	B-api_mention	B-api_mention
?	O	O
#	O	O
li	O	O
Is	O	O
there	O	O
necessarily	O	O
a	O	O
different	O	O
way	O	O
I	O	O
can	O	O
do	O	O
this	O	O
?	O	O
Question	O	O
-	O	O
32323081	O	O
I	O	O
have	O	O
a	O	O
question	O	O
regarding	O	O
Java	O	O
8	O	O
inference	O	O
with	O	O
respect	O	O
to	O	O
lambdas	O	O
and	O	O
their	O	O
related	O	O
exception	O	O
signatures	O	O
.	O	O
If	O	O
I	O	O
define	O	O
some	O	O
method	O	O
foo	O	O
:	O	O
#	O	O
pre	O	O
then	O	O
I	O	O
get	O	O
the	O	O
nice	O	O
and	O	O
concise	O	O
semantic	O	O
of	O	O
being	O	O
able	O	O
to	O	O
write	O	O
foo	O	O
(	O	O
args	O	O
)	O	O
;	O	O
in	O	O
most	O	O
cases	O	O
for	O	O
a	O	O
given	O	O
T	O	O
.	O	O
However	O	O
,	O	O
in	O	O
this	O	O
example	O	O
,	O	O
if	O	O
my	O	O
getTheT	O	O
operation	O	O
declares	O	O
that	O	O
it	O	O
throws	O	O
Exception	B-api_mention	B-api_mention
,	O	O
my	O	O
foo	O	O
method	O	O
which	O	O
takes	O	O
a	O	O
Supplier	B-api_mention	B-api_mention
no	O	O
longer	O	O
compiles	O	O
:	O	O
the	O	O
Supplier	B-api_mention	B-api_mention
method	O	O
signature	O	O
for	O	O
get	O	O
doesn	O	O
'	O	O
t	O	O
throw	O	O
exceptions	O	O
.	O	O
It	O	O
seems	O	O
like	O	O
a	O	O
decent	O	O
way	O	O
to	O	O
get	O	O
around	O	O
this	O	O
would	O	O
be	O	O
to	O	O
overload	O	O
foo	O	O
to	O	O
accept	O	O
either	O	O
option	O	O
,	O	O
with	O	O
the	O	O
overloaded	O	O
definition	O	O
being	O	O
:	O	O
#	O	O
pre	O	O
where	O	O
ThrowingSupplier	B-api_mention	B-api_mention
is	O	O
defined	O	O
as	O	O
#	O	O
pre	O	O
In	O	O
this	O	O
way	O	O
,	O	O
we	O	O
have	O	O
one	O	O
Supplier	B-api_mention	O
type	O	O
which	O	O
throws	O	O
exceptions	O	O
and	O	O
one	O	O
which	O	O
doesn	O	O
'	O	O
t	O	O
.	O	O
The	O	O
desired	O	O
syntax	O	O
would	O	O
be	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
this	O	O
causes	O	O
issues	O	O
due	O	O
to	O	O
the	O	O
lambda	O	O
type	O	O
being	O	O
ambiguous	O	O
(	O	O
presumably	O	O
unable	O	O
to	O	O
resolve	O	O
between	O	O
Supplier	B-api_mention	O
and	O	O
ThrowingSupplier	B-api_mention	B-api_mention
)	O	O
.	O	O
Doing	O	O
an	O	O
explicit	O	O
cast	O	O
a	O	O
la	O	O
foo	O	O
(	O	O
args	O	O
)	O	O
;	O	O
would	O	O
work	O	O
,	O	O
but	O	O
it	O	O
gets	O	O
rid	O	O
of	O	O
most	O	O
of	O	O
the	O	O
conciseness	O	O
of	O	O
the	O	O
desired	O	O
syntax	O	O
.	O	O
I	O	O
guess	O	O
the	O	O
underlying	O	O
question	O	O
is	O	O
:	O	O
if	O	O
the	O	O
Java	O	O
compiler	O	O
is	O	O
able	O	O
to	O	O
resolve	O	O
the	O	O
fact	O	O
that	O	O
one	O	O
of	O	O
my	O	O
lambdas	O	O
is	O	O
incompatible	O	O
due	O	O
to	O	O
it	O	O
throwing	O	O
an	O	O
exception	O	O
in	O	O
the	O	O
Supplier	B-api_mention	O
-	O	O
only	O	O
case	O	O
,	O	O
why	O	O
isn	O	O
'	O	O
t	O	O
it	O	O
able	O	O
to	O	O
use	O	O
that	O	O
same	O	O
information	O	O
to	O	O
derive	O	O
the	O	O
type	O	O
of	O	O
the	O	O
lambda	O	O
in	O	O
the	O	O
secondary	O	O
,	O	O
type	O	O
-	O	O
inference	O	O
case	O	O
?	O	O
Any	O	O
information	O	O
or	O	O
resources	O	O
which	O	O
anyone	O	O
could	O	O
point	O	O
me	O	O
to	O	O
would	O	O
likewise	O	O
be	O	O
much	O	O
appreciated	O	O
,	O	O
as	O	O
I	O	O
'	O	O
m	O	O
just	O	O
not	O	O
too	O	O
sure	O	O
where	O	O
to	O	O
look	O	O
for	O	O
more	O	O
information	O	O
on	O	O
the	O	O
matter	O	O
.	O	O
Thanks	O	O
!	O	O
Question	O	O
-	O	O
18571223	O	O
,	O	O
answer	O	O
-	O	O
20262456	O	O
You	O	O
might	O	O
wanna	O	O
try	O	O
return	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
33147339	O	O
,	O	O
answer	O	O
-	O	O
33148103	O	O
Looking	O	O
at	O	O
the	O	O
code	O	O
:	O	O
int	O	O
newCapacity	O	O
=	O	O
oldCapacity	O	O
+	O	O
(	O	O
oldCapacity	O	O
>	O	O
>	O	O
1	O	O
)	O	O
;	O	O
If	O	O
oldCapacity	O	O
is	O	O
quite	O	O
large	O	O
,	O	O
this	O	O
will	O	O
overflow	O	O
,	O	O
and	O	O
newCapacity	O	O
will	O	O
be	O	O
a	O	O
negative	O	O
number	O	O
.	O	O
A	O	O
comparison	O	O
like	O	O
newCapacity	O	O
<	O	O
oldCapacity	O	O
will	O	O
incorrectly	O	O
evaluate	O	O
true	O	O
and	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
will	O	O
fail	O	O
to	O	O
grow	O	O
.	O	O
Instead	O	O
,	O	O
the	O	O
code	O	O
as	O	O
written	O	O
(	O	O
newCapacity	O	O
-	O	O
minCapacity	O	O
<	O	O
0	O	O
returns	O	O
false	O	O
)	O	O
will	O	O
allow	O	O
the	O	O
negative	O	O
value	O	O
of	O	O
newCapacity	O	O
to	O	O
be	O	O
further	O	O
evaluated	O	O
in	O	O
the	O	O
next	O	O
line	O	O
,	O	O
resulting	O	O
in	O	O
recalculating	O	O
newCapacity	O	O
by	O	O
invoking	O	O
hugeCapacity	O	O
(	O	O
newCapacity	O	O
=	O	O
hugeCapacity	O	O
(	O	O
args	O	O
)	O	O
;	O	O
)	O	O
to	O	O
allow	O	O
for	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
to	O	O
grow	O	O
up	O	O
to	O	O
MAX	O	O
_	O	O
ARRAY	O	O
_	O	O
SIZE	O	O
.	O	O
This	O	O
is	O	O
what	O	O
the	O	O
/	O	O
/	O	O
overflow	O	O
-	O	O
conscious	O	O
code	O	O
comment	O	O
is	O	O
trying	O	O
to	O	O
communicate	O	O
,	O	O
though	O	O
rather	O	O
obliquely	O	O
.	O	O
So	O	O
,	O	O
bottom	O	O
line	O	O
,	O	O
the	O	O
new	O	O
comparison	O	O
protects	O	O
against	O	O
allocating	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
larger	O	O
than	O	O
the	O	O
predefined	O	O
MAX	O	O
_	O	O
ARRAY	O	O
_	O	O
SIZE	O	O
while	O	O
allowing	O	O
it	O	O
to	O	O
grow	O	O
right	O	O
up	O	O
to	O	O
that	O	O
limit	O	O
if	O	O
needed	O	O
.	O	O
Question	O	O
-	O	O
18263489	O	O
,	O	O
answer	O	O
-	O	O
29873100	O	O
It	O	O
isn	O	O
'	O	O
t	O	O
pretty	O	O
,	O	O
but	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
allows	O	O
you	O	O
to	O	O
use	O	O
a	O	O
null	O	O
String	B-api_mention	B-api_mention
in	O	O
a	O	O
switch	O	O
.	O	O
If	O	O
it	O	O
finds	O	O
null	O	O
,	O	O
it	O	O
converts	O	O
it	O	O
to	O	O
StringLiteral	O	O
,	O	O
otherwise	O	O
it	O	O
just	O	O
returns	O	O
the	O	O
same	O	O
String	B-api_mention	B-api_mention
you	O	O
passed	O	O
it	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
handle	O	O
StringLiteral	O	O
explicitly	O	O
,	O	O
then	O	O
it	O	O
will	O	O
go	O	O
to	O	O
default	O	O
.	O	O
The	O	O
only	O	O
caveat	O	O
is	O	O
that	O	O
there	O	O
is	O	O
no	O	O
way	O	O
of	O	O
distinguishing	O	O
between	O	O
the	O	O
String	B-api_mention	B-api_mention
StringLiteral	O	O
and	O	O
an	O	O
actual	O	O
null	O	O
String	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5243754	O	O
What	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getParameter	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
within	O	O
HttpServletRequest	B-api_mention	B-api_mention
class	O	O
?	O	O
Question	O	O
-	O	O
5455794	O	O
,	O	O
answer	O	O
-	O	O
5455809	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
removes	O	O
all	O	O
whitespaces	O	O
and	O	O
non	O	O
-	O	O
visible	O	O
characters	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
tab	O	O
,	O	O
\	O	O
n	O	O
)	O	O
.	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
produce	O	O
the	O	O
same	O	O
result	O	O
.	O	O
The	O	O
second	O	O
regex	O	O
is	O	O
20	O	O
%	O	O
faster	O	O
than	O	O
the	O	O
first	O	O
one	O	O
,	O	O
but	O	O
as	O	O
the	O	O
number	O	O
consecutive	O	O
spaces	O	O
increases	O	O
,	O	O
the	O	O
first	O	O
one	O	O
performs	O	O
better	O	O
than	O	O
the	O	O
second	O	O
one	O	O
.	O	O
Assign	O	O
the	O	O
value	O	O
to	O	O
a	O	O
variable	O	O
,	O	O
if	O	O
not	O	O
used	O	O
directly	O	O
:	O	O
st	O	O
=	O	O
st	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
31993377	O	O
,	O	O
answer	O	O
-	O	O
31993478	O	O
You	O	O
are	O	O
consuming	O	O
the	O	O
value	O	O
of	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
asking	O	O
for	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
next	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
per	O	O
default	O	O
,	O	O
returns	O	O
everything	O	O
to	O	O
the	O	O
next	O	O
whitespace	O	O
(	O	O
args	O	O
)	O	O
.	O	O
So	O	O
you	O	O
are	O	O
iterating	O	O
through	O	O
all	O	O
whitespace	O	O
seperated	O	O
strings	O	O
,	O	O
and	O	O
after	O	O
each	O	O
of	O	O
them	O	O
you	O	O
are	O	O
asking	O	O
about	O	O
the	O	O
nextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
i	O	O
1	O	O
1	O	O
-	O	O
>	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
True	O	O
.	O	B-api_mention
hasNext	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Also	O	O
true	O	O
.	O	O
1	O	O
1	O	O
-	O	O
>	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
True	O	O
.	O	B-api_mention
hasNext	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Also	O	O
true	O	O
(	O	O
still	O	O
a	O	O
whitespace	O	O
left	O	O
)	O	O
1	O	O
-	O	O
>	O	O
hasNextLine	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
?	O	O
True	O	O
(	O	O
Line	O	O
Seperator	O	O
,	O	O
probably	O	O
)	O	O
.	O	O
haxNext	B-api_mention	O
?	O	O
False	O	O
,	O	O
no	O	O
whitespace	O	O
anymore	O	O
.	O	O
Question	O	O
-	O	O
31993377	O	O
,	O	O
answer	O	O
-	O	O
31993534	O	O
You	O	O
have	O	O
a	O	O
single	O	O
extra	O	O
newline	O	O
at	O	O
the	O	O
end	O	O
of	O	O
your	O	O
file	O	O
.	O	O
#	O	O
li	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
to	O	O
see	O	O
if	O	O
there	O	O
is	O	O
another	O	O
linePattern	B-api_mention	B-api_mention
in	O	O
the	O	O
buffer	O	O
.	O	O
#	O	O
li	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
to	O	O
see	O	O
if	O	O
there	O	O
is	O	O
a	O	O
parseable	O	O
token	O	O
in	O	O
the	O	O
buffer	O	O
,	O	O
as	O	O
separated	O	O
by	O	O
the	O	O
scanner	O	O
'	O	O
s	O	O
delimiter	O	O
.	O	O
Since	O	O
the	O	O
scanner	O	O
'	O	O
s	O	O
delimiter	O	O
is	O	O
whitespace	O	O
,	O	O
and	O	O
the	O	O
linePattern	B-api_mention	B-api_mention
is	O	O
also	O	O
white	O	O
space	O	O
,	O	O
it	O	O
is	O	O
possible	O	O
for	O	O
there	O	O
to	O	O
be	O	O
a	O	O
linePattern	B-api_mention	B-api_mention
in	O	O
the	O	O
buffer	O	O
but	O	O
no	O	O
parseable	O	O
tokens	O	O
.	O	O
Typically	O	O
,	O	O
the	O	O
most	O	O
common	O	O
way	O	O
to	O	O
deal	O	O
with	O	O
this	O	O
issue	O	O
by	O	O
always	O	O
calling	O	O
nextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
after	O	O
parsing	O	O
all	O	O
the	O	O
tokens	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
numbers	O	O
)	O	O
in	O	O
each	O	O
line	O	O
of	O	O
your	O	O
text	O	O
.	O	O
You	O	O
need	O	O
to	O	O
do	O	O
this	O	O
when	O	O
using	O	O
Scanner	B-api_mention	B-api_mention
when	O	O
reading	O	O
a	O	O
user	O	O
'	O	O
s	O	O
input	O	O
too	O	O
from	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
in	I-api_mention	I-api_mention
.	O	O
To	O	O
advance	O	O
the	O	O
scanner	O	O
past	O	O
this	O	O
whitespace	O	O
delimiter	O	O
,	O	O
you	O	O
must	O	O
use	O	O
scanner	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
clear	O	O
the	O	O
line	O	O
delimiter	O	O
.	O	O
See	O	O
:	O	O
Using	O	O
scanner	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Appendix	O	O
:	O	O
LinePattern	B-api_mention	B-api_mention
is	O	O
defined	O	O
to	O	O
be	O	O
a	O	O
Pattern	B-api_mention	O
that	O	O
matches	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
default	O	O
token	O	O
delimiter	O	O
is	O	O
this	O	O
Pattern	B-api_mention	O
:	O	O
private	O	O
static	O	O
Pattern	B-api_mention	O
WHITESPACE	O	O
_	O	O
PATTERN	O	O
=	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
compile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
29328785	O	O
#	O	O
pre	O	O
Compile	O	O
>	O	O
javac	O	O
BigDecimalTest	O	O
.	O	O
java	O	O
Execute	O	O
>	O	O
java	O	O
BigDecimalTest	O	B-api_mention
Output	O	O
#	O	O
pre	O	O
The	O	O
value	O	O
of	O	O
z	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
output	O	O
is	O	O
correct	O	O
4	O	O
.	O	O
883242e	O	O
+	O	O
888	O	O
/	O	O
7	O	O
.	O	O
115109e	O	O
+	O	O
302	O	O
=	O	O
6	O	O
.	O	O
863200e	O	O
+	O	O
585	O	O
as	O	O
is	O	O
the	O	O
value	O	O
of	O	O
y	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
notice	O	O
that	O	O
the	O	O
value	O	O
given	O	O
for	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
completely	O	O
wrong	O	O
.	O	O
Why	O	O
is	O	O
this	O	O
?	O	O
Strangely	O	O
,	O	O
if	O	O
the	O	O
scale	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
desired	O	O
decimal	O	O
places	O	O
)	O	O
of	O	O
the	O	O
result	O	O
of	O	O
the	O	O
division	O	O
is	O	O
changed	O	O
BigDecimal	B-api_mention	B-api_mention
z	O	O
=	O	O
x	O	O
.	B-api_mention	B-api_mention
divide	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
then	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
produce	O	O
the	O	O
correct	O	O
value	O	O
for	O	O
x	O	O
.	O	O
Or	O	O
,	O	O
if	O	O
the	O	O
operands	O	O
are	O	O
swapped	O	O
BigDecimal	B-api_mention	B-api_mention
z	O	O
=	O	O
y	O	O
.	B-api_mention	B-api_mention
divide	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
then	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
also	O	O
then	O	O
produce	O	O
the	O	O
correct	O	O
value	O	O
.	O	O
Or	O	O
,	O	O
if	O	O
the	O	O
exponent	O	O
of	O	O
x	O	O
is	O	O
changed	O	O
from	O	O
e	O	O
+	O	O
888	O	O
to	O	O
e	O	O
.	O	O
g	O	O
.	O	O
e	O	O
+	O	O
878	O	O
then	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
correct	O	O
.	O	O
Or	O	O
,	O	O
if	O	O
another	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
is	O	O
added	O	O
above	O	O
the	O	O
divide	O	O
operation	O	O
,	O	O
then	O	O
both	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
calls	O	O
will	O	O
produce	O	O
the	O	O
correct	O	O
value	O	O
!	O	O
On	O	O
the	O	O
machine	O	O
I	O	O
'	O	O
m	O	O
testing	O	O
this	O	O
,	O	O
Windows	O	O
7	O	O
64	O	O
bit	O	O
,	O	O
the	O	O
behaviour	O	O
is	O	O
the	O	O
same	O	O
using	O	O
java	O	O
7	O	O
and	O	O
8	O	O
,	O	O
both	O	O
32bit	O	O
and	O	O
64	O	O
bit	O	O
versions	O	O
,	O	O
but	O	O
testing	O	O
online	O	O
at	O	O
#	O	O
a	O	O
produces	O	O
different	O	O
results	O	O
for	O	O
java	O	O
7	O	O
and	O	O
java	O	O
8	O	O
.	O	O
Using	O	O
java	O	O
7	O	O
,	O	O
the	O	O
value	O	O
of	O	O
x	O	O
is	O	O
given	O	O
correctly	O	O
:	O	O
#	O	O
a	O	O
,	O	O
but	O	O
using	O	O
java	O	O
8	O	O
its	O	O
value	O	O
is	O	O
incorrect	O	O
:	O	O
#	O	O
a	O	O
.	O	O
Also	O	O
,	O	O
this	O	O
behaviour	O	O
is	O	O
not	O	O
unique	O	O
to	O	O
this	O	O
particular	O	O
value	O	O
of	O	O
x	O	O
,	O	O
as	O	O
calling	O	O
toString	B-api_mention	B-api_mention
on	O	O
other	O	O
BigDecimals	B-api_mention	B-api_mention
with	O	O
more	O	O
than	O	O
about	O	O
1500	O	O
digits	O	O
after	O	O
passing	O	O
them	O	O
as	O	O
the	O	O
first	O	O
operand	O	O
to	O	O
a	O	O
divide	O	O
operation	O	O
will	O	O
also	O	O
produce	O	O
incorrect	O	O
values	O	O
.	O	O
What	O	O
is	O	O
the	O	O
explanation	O	O
for	O	O
this	O	O
?	O	O
The	O	O
divide	O	O
operation	O	O
seems	O	O
to	O	O
be	O	O
mutating	O	O
the	O	O
value	O	O
produced	O	O
by	O	O
subsequent	O	O
toString	B-api_mention	B-api_mention
calls	O	O
on	O	O
its	O	O
operands	O	O
.	O	O
Does	O	O
this	O	O
happen	O	O
on	O	O
your	O	O
platform	O	O
?	O	O
Edit	O	O
:	O	O
The	O	O
issue	O	O
seems	O	O
to	O	O
be	O	O
with	O	O
the	O	O
java	O	O
8	O	O
runtime	O	O
only	O	O
,	O	O
as	O	O
the	O	O
above	O	O
program	O	O
compiled	O	O
with	O	O
java	O	O
7	O	O
produces	O	O
correct	O	O
output	O	O
when	O	O
executed	O	O
with	O	O
the	O	O
java	O	O
7	O	O
runtime	O	O
,	O	O
but	O	O
incorrect	O	O
output	O	O
when	O	O
executed	O	O
with	O	O
the	O	O
java	O	O
8	O	O
runtime	O	O
.	O	O
Edit	O	O
:	O	O
I	O	O
'	O	O
ve	O	O
tested	O	O
with	O	O
the	O	O
early	O	O
access	O	O
jre1	O	O
.	O	O
8	O	O
.	O	O
0	O	O
_	O	O
60	O	O
and	O	O
the	O	O
bug	O	O
does	O	O
not	O	O
appear	O	O
,	O	O
and	O	O
according	O	O
to	O	O
Marco13	O	O
'	O	O
s	O	O
answer	O	O
it	O	O
was	O	O
fixed	O	O
in	O	O
build	O	O
51	O	O
.	O	O
The	O	O
Oracle	O	O
JDK	O	O
8	O	O
product	O	O
binaries	O	O
are	O	O
only	O	O
at	O	O
update	O	O
40	O	O
though	O	O
so	O	O
it	O	O
may	O	O
be	O	O
some	O	O
time	O	O
before	O	O
the	O	O
fixed	O	O
versions	O	O
are	O	O
widely	O	O
used	O	O
.	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
20593147	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
you	O	O
could	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
Some	O	O
notes	O	O
:	O	O
The	O	O
stream	O	O
returned	O	O
by	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	O	O
unlike	O	O
most	O	O
streams	O	O
)	O	O
needs	O	O
to	O	O
be	O	O
closed	O	O
.	O	O
For	O	O
the	O	O
reasons	O	O
mentioned	O	O
here	O	O
I	O	O
avoid	O	O
using	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
strange	O	O
code	O	O
(	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
lines	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
iterator	I-api_mention	O
casts	O	O
a	O	O
Stream	B-api_mention	B-api_mention
to	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
22463062	O	O
,	O	O
answer	O	O
-	O	O
28324294	O	O
You	O	O
can	O	O
also	O	O
use	O	O
LocalDate	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
LocalDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
String	B-api_mention	B-api_mention
without	O	O
providing	O	O
it	O	O
with	O	O
a	O	O
pattern	O	O
,	O	O
if	O	O
the	O	O
String	B-api_mention	B-api_mention
is	O	O
in	O	O
ISO	O	O
-	O	O
8601	O	O
format	O	O
.	O	O
for	O	O
example	O	O
,	O	O
#	O	O
pre	O	O
Output	O	O
,	O	O
#	O	O
pre	O	O
and	O	O
use	O	O
DateTimeFormatter	B-api_mention	B-api_mention
only	O	O
if	O	O
you	O	O
have	O	O
to	O	O
deal	O	O
with	O	O
other	O	O
date	O	O
patterns	O	O
,	O	O
For	O	O
example	O	O
,	O	O
dd	O	O
MMM	O	O
uuuu	O	O
represents	O	O
the	O	O
day	O	O
of	O	O
the	O	O
month	O	O
(	O	O
two	O	O
digits	O	O
)	O	O
,	O	O
three	O	O
letters	O	O
of	O	O
the	O	O
name	O	O
of	O	O
the	O	O
month	O	O
(	O	O
Jan	O	O
,	O	O
Feb	O	O
,	O	O
Mar	O	O
,	O	O
.	O	O
.	O	O
.	O	O
)	O	O
,	O	O
and	O	O
a	O	O
four	O	O
-	O	O
digit	O	O
year	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
04	O	O
Aug	O	O
2015	O	O
parses	O	O
to	O	O
2015	O	O
-	O	O
08	O	O
-	O	O
04	O	O
also	O	O
remember	O	O
that	O	O
the	O	O
DateTimeFormatter	B-api_mention	B-api_mention
object	O	O
is	O	O
bidirectional	O	O
;	O	O
it	O	O
can	O	O
both	O	O
parse	O	O
input	O	O
and	O	O
format	O	O
output	O	O
.	O	O
#	O	O
pre	O	O
Output	O	O
2015	O	O
-	O	O
08	O	O
-	O	O
04	O	O
formats	O	O
as	O	O
04	O	O
Aug	O	O
2015	O	O
(	O	O
see	O	O
complete	O	O
list	O	O
of	O	O
Patterns	B-api_mention	O
for	O	O
Formatting	O	O
and	O	O
Parsing	O	O
DateFormatter	B-api_mention	B-api_mention
)	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29096777	O	O
The	O	O
only	O	O
solution	O	O
I	O	O
come	O	O
up	O	O
with	O	O
for	O	O
the	O	O
moment	O	O
is	O	O
by	O	O
implementing	O	O
your	O	O
own	O	O
custom	O	O
collector	O	O
.	O	O
Before	O	O
reading	O	O
the	O	O
solution	O	O
,	O	O
I	O	O
want	O	O
to	O	O
add	O	O
a	O	O
few	O	O
notes	O	O
about	O	O
this	O	O
.	O	O
I	O	O
took	O	O
this	O	O
question	O	O
more	O	O
as	O	O
a	O	O
programming	O	O
exercise	O	O
,	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
if	O	O
it	O	O
can	O	O
be	O	O
done	O	O
with	O	O
a	O	O
parallel	O	O
stream	O	O
.	O	O
So	O	O
you	O	O
have	O	O
to	O	O
be	O	O
aware	O	O
that	O	O
it	O	O
'	O	O
ll	O	O
silently	O	O
break	O	O
if	O	O
the	O	O
pipeline	O	O
is	O	O
run	O	O
in	O	O
parallel	O	O
.	O	O
This	O	O
is	O	O
not	O	O
a	O	O
desirable	O	O
behavior	O	O
and	O	O
should	O	O
be	O	O
avoided	O	O
.	O	O
This	O	O
is	O	O
why	O	O
I	O	O
throw	O	O
an	O	O
exception	O	O
in	O	O
the	O	O
combiner	O	O
part	O	O
(	O	O
instead	O	O
of	O	O
(	O	O
l1	O	O
,	O	O
l2	O	O
)	O	O
-	O	O
>	O	O
{	O	O
l1	O	O
.	B-api_mention	B-api_mention
addAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
return	O	O
l1	O	O
;	O	O
}	O	O
)	O	O
,	O	O
as	O	O
it	O	O
'	O	O
s	O	O
used	O	O
in	O	O
parallel	O	O
when	O	O
combining	O	O
the	O	O
two	O	O
lists	O	O
,	O	O
so	O	O
that	O	O
you	O	O
have	O	O
an	O	O
exception	O	O
instead	O	O
of	O	O
a	O	O
wrong	O	O
result	O	O
.	O	O
Also	O	O
this	O	O
is	O	O
not	O	O
very	O	O
efficient	O	O
due	O	O
to	O	O
list	O	O
copying	O	O
(	O	O
although	O	O
it	O	O
uses	O	O
a	O	O
native	O	O
method	O	O
to	O	O
copy	O	O
the	O	O
underlying	O	O
array	O	O
)	O	O
.	O	O
So	O	O
here	O	O
'	O	O
s	O	O
the	O	O
collector	O	O
implementation	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
how	O	O
to	O	O
use	O	O
it	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
ll	O	O
=	O	O
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Output	O	O
:	O	O
[	O	O
[	O	O
a	O	O
,	O	O
b	O	O
]	O	O
,	O	O
[	O	O
c	O	O
]	O	O
,	O	O
[	O	O
d	O	O
,	O	O
e	O	O
]	O	O
]	O	O
As	O	O
the	O	O
answer	O	O
of	O	O
Joop	O	O
Eggen	O	O
is	O	O
out	O	O
,	O	O
it	O	O
appears	O	O
that	O	O
it	O	O
can	O	O
be	O	O
done	O	O
in	O	O
parallel	O	O
(	O	O
give	O	O
him	O	O
credit	O	O
for	O	O
that	O	O
!	O	O
)	O	O
.	O	O
With	O	O
that	O	O
it	O	O
reduces	O	O
the	O	O
custom	O	O
collector	O	O
implementation	O	O
to	O	O
:	O	O
#	O	O
pre	O	O
which	O	O
let	O	O
the	O	O
paragraph	O	O
about	O	O
parallelism	O	O
a	O	O
bit	O	O
obsolete	O	O
,	O	O
however	O	O
I	O	O
let	O	O
it	O	O
as	O	O
it	O	O
can	O	O
be	O	O
a	O	O
good	O	O
reminder	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
is	O	O
not	O	O
always	O	O
a	O	O
substitute	O	O
.	O	O
There	O	O
are	O	O
tasks	O	O
that	O	O
are	O	O
easier	O	O
and	O	O
more	O	O
suitable	O	O
using	O	O
the	O	O
streams	O	O
and	O	O
there	O	O
are	O	O
tasks	O	O
that	O	O
are	O	O
not	O	O
.	O	O
In	O	O
your	O	O
case	O	O
,	O	O
you	O	O
could	O	O
also	O	O
create	O	O
a	O	O
utility	O	O
method	O	O
for	O	O
that	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
call	O	O
it	O	O
like	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
splitBySeparator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
It	O	O
can	O	O
be	O	O
improved	O	O
for	O	O
checking	O	O
edge	O	O
-	O	O
cases	O	O
.	O	O
Question	O	O
-	O	O
32046078	O	O
I	O	O
have	O	O
a	O	O
server	O	O
side	O	O
implemented	O	O
in	O	O
Scala	O	O
and	O	O
React	O	O
/	O	O
Flux	O	O
based	O	O
front	O	O
end	O	O
.	O	O
My	O	O
services	O	O
return	O	O
Futures	O	O
and	O	O
they	O	O
are	O	O
handled	O	O
within	O	O
Scalatra	O	O
'	O	O
s	O	O
AsyncResult	O	O
for	O	O
JSON	O	O
responses	O	O
.	O	O
For	O	O
isomorphic	O	O
/	O	O
server	O	O
side	O	O
rendering	O	O
setup	O	O
I	O	O
did	O	O
not	O	O
want	O	O
to	O	O
change	O	O
services	O	O
to	O	O
be	O	O
blocking	O	O
so	O	O
I	O	O
started	O	O
with	O	O
Scala	O	O
Future	O	O
-	O	O
>	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Function	I-api_mention	I-api_mention
conversion	O	O
shown	O	O
here	O	O
.	O	O
But	O	O
the	O	O
dispatcher	O	O
in	O	O
Flux	O	O
would	O	O
like	O	O
to	O	O
have	O	O
JS	O	O
Promise	O	O
.	O	O
So	O	O
far	O	O
I	O	O
found	O	O
only	O	O
rather	O	O
complicated	O	O
sounding	O	O
way	O	O
around	O	O
this	O	O
Slides	O	O
68	O	O
-	O	O
81	O	O
Is	O	O
there	O	O
any	O	O
recommended	O	O
way	O	O
to	O	O
deal	O	O
with	O	O
this	O	O
Scala	O	O
Future	O	O
-	O	O
>	O	O
JS	O	O
Promise	O	O
conversion	O	O
?	O	O
Question	O	O
-	O	O
12468764	O	O
,	O	O
answer	O	O
-	O	O
13368831	O	O
Actual	O	O
Answer	O	O
:	O	O
The	O	O
default	O	O
deserializer	O	O
for	O	O
enums	O	O
uses	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
deserialize	O	O
,	O	O
so	O	O
it	O	O
'	O	O
s	O	O
not	O	O
using	O	O
the	O	O
@	O	O
JsonValue	O	O
.	O	O
So	O	O
as	O	O
@	O	O
OldCurmudgeon	O	O
pointed	O	O
out	O	O
,	O	O
you	O	O
'	O	O
d	O	O
need	O	O
to	O	O
pass	O	O
in	O	O
{	O	O
StringLiteral	O	O
:	O	O
StringLiteral	O	O
}	O	O
to	O	O
match	O	O
the	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
value	O	O
.	O	O
An	O	O
other	O	O
option	O	O
(	O	O
assuming	O	O
you	O	O
want	O	O
the	O	O
write	O	O
and	O	O
read	O	O
json	O	O
values	O	O
to	O	O
be	O	O
the	O	O
same	O	O
)	O	O
.	O	O
.	O	O
.	O	O
More	O	O
Info	O	O
:	O	O
There	O	O
is	O	O
(	O	O
yet	O	O
)	O	O
another	O	O
way	O	O
to	O	O
manage	O	O
the	O	O
serialization	O	O
and	O	O
deserialization	O	O
process	O	O
with	O	O
Jackson	O	O
.	O	O
You	O	O
can	O	O
specify	O	O
these	O	O
annotations	O	O
to	O	O
use	O	O
your	O	O
own	O	O
custom	O	O
serializer	O	O
and	O	O
deserializer	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
you	O	O
have	O	O
to	O	O
write	O	O
MySerializer	O	B-api_mention
and	O	O
MyDeserializer	O	B-api_mention
which	O	O
look	O	O
like	O	O
this	O	O
:	O	O
MySerializer	O	O
#	O	O
pre	O	O
MyDeserializer	O	O
#	O	O
pre	O	O
Last	O	O
little	O	O
bit	O	O
,	O	O
particularly	O	O
for	O	O
doing	O	O
this	O	O
to	O	O
an	O	O
enum	O	O
JsonEnum	O	O
that	O	O
serializes	O	O
with	O	O
the	O	O
method	O	O
getYourValue	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
your	O	O
serializer	O	O
and	O	O
deserializer	O	O
might	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7569335	O	O
,	O	O
answer	O	O
-	O	O
39329245	O	O
As	O	O
others	O	O
have	O	O
pointed	O	O
out	O	O
the	O	O
preferred	O	O
way	O	O
is	O	O
to	O	O
use	O	O
:	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reverse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
if	O	O
you	O	O
want	O	O
to	O	O
implement	O	O
this	O	O
by	O	O
youself	O	O
,	O	O
i	O	O
'	O	O
am	O	O
afraid	O	O
that	O	O
the	O	O
rest	O	O
of	O	O
responses	O	O
have	O	O
flaws	O	O
.	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
String	B-api_mention	B-api_mention
represent	O	O
a	O	O
list	O	O
of	O	O
Unicode	O	O
points	O	O
,	O	O
encoded	O	O
in	O	O
a	O	O
char	O	O
[	O	O
]	O	O
array	O	O
according	O	O
to	O	O
the	O	O
variable	O	O
-	O	O
length	O	O
encoding	O	O
:	O	O
UTF	O	O
-	O	O
16	O	O
.	O	O
This	O	O
means	O	O
some	O	O
code	O	O
points	O	O
use	O	O
a	O	O
single	O	O
element	O	O
of	O	O
the	O	O
array	O	O
(	O	O
one	O	O
code	O	O
unit	O	O
)	O	O
but	O	O
others	O	O
use	O	O
two	O	O
of	O	O
them	O	O
,	O	O
so	O	O
there	O	O
might	O	O
be	O	O
pairs	O	O
of	O	O
characters	O	O
that	O	O
must	O	O
be	O	O
treated	O	O
as	O	O
a	O	O
single	O	O
unit	O	O
(	O	O
consecutive	O	O
"	O	O
high	O	O
"	O	O
and	O	O
"	O	O
low	O	O
"	O	O
surrogates	O	O
)	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
22593693	O	O
There	O	O
seem	O	O
to	O	O
be	O	O
many	O	O
questions	O	O
about	O	O
this	O	O
issue	O	O
with	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Scanner	I-api_mention	I-api_mention
.	O	O
I	O	O
think	O	O
a	O	O
more	O	O
readable	O	O
/	O	O
idiomatic	O	O
solution	O	O
would	O	O
be	O	O
to	O	O
call	O	O
scanner	O	O
.	B-api_mention	B-api_mention
skip	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
drop	O	O
any	O	O
newline	O	O
characters	O	O
after	O	O
calling	O	O
nextInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
6271460	O	O
The	O	O
"	O	O
$	O	O
1	O	O
"	O	O
is	O	O
not	O	O
"	O	O
useless	O	O
non	O	O
-	O	O
sense	O	O
"	O	O
.	O	O
If	O	O
your	O	O
class	O	O
is	O	O
anonymous	O	O
,	O	O
a	O	O
number	O	O
is	O	O
appended	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
want	O	O
the	O	O
class	O	O
itself	O	O
,	O	O
but	O	O
its	O	O
declaring	O	O
class	O	O
,	O	O
then	O	O
you	O	O
can	O	O
use	O	O
getEnclosingClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
move	O	O
that	O	O
in	O	O
some	O	O
static	O	O
utility	O	O
method	O	O
.	O	O
But	O	O
note	O	O
that	O	O
this	O	O
is	O	O
not	O	O
the	O	O
current	O	O
class	O	O
name	O	O
.	O	O
The	O	O
anonymous	O	O
class	O	O
is	O	O
different	O	O
class	O	O
than	O	O
its	O	O
enclosing	O	O
class	O	O
.	O	O
The	O	O
case	O	O
is	O	O
similar	O	O
for	O	O
inner	O	O
classes	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
19629304	O	O
If	O	O
you	O	O
do	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
main	O	O
method	O	O
,	O	O
the	O	O
thread	O	O
of	O	O
main	O	O
method	O	O
will	O	O
invoke	O	O
the	O	O
run	O	O
method	O	O
instead	O	O
of	O	O
the	O	O
thread	O	O
you	O	O
require	O	O
to	O	O
run	O	O
.	O	O
The	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
creates	O	O
new	O	O
thread	O	O
and	O	O
for	O	O
which	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
to	O	O
be	O	O
done	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
29938300	O	O
Use	O	O
this	O	O
method	O	O
,	O	O
but	O	O
be	O	O
careful	O	O
to	O	O
make	O	O
an	O	O
object	O	O
in	O	O
your	O	O
main	O	O
.	O	O
public	O	O
static	O	O
void	O	O
setName	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
{	O	O
Class	B-api_mention	B-api_mention
setClass	O	O
=	O	O
obj	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
String	B-api_mention	B-api_mention
className	O	O
=	O	O
setClass	O	O
.	B-api_mention	B-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
}	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276497	O	O
No	O	O
,	O	O
the	O	O
topmost	O	O
level	O	O
Stream	B-api_mention	B-api_mention
or	O	O
reader	O	O
will	O	O
ensure	O	O
that	O	O
all	O	O
underlying	O	O
streams	O	O
/	O	O
readers	O	O
are	O	O
closed	O	O
.	O	O
Check	O	O
the	O	O
close	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
implementation	O	O
of	O	O
your	O	O
topmost	O	O
level	O	O
stream	O	O
.	O	O
Question	O	O
-	O	O
27908213	O	O
Are	O	O
enum	O	O
names	O	O
interned	O	O
in	O	O
Java	O	O
?	O	O
I	O	O
.	O	O
e	O	O
.	O	O
is	O	O
it	O	O
guaranteed	O	O
that	O	O
enum1	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
=	O	O
=	O	O
enum2	O	O
.	B-api_mention	B-api_mention
name	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
case	O	O
of	O	O
the	O	O
same	O	O
name	O	O
?	O	O
And	O	O
is	O	O
it	O	O
safe	O	O
to	O	O
compare	O	O
enum	O	O
.	B-api_mention	O
name	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
a	O	O
String	B-api_mention	B-api_mention
that	O	O
is	O	O
guaranteed	O	O
to	O	O
be	O	O
interned	O	O
.	O	O
Question	O	O
-	O	O
25903137	O	O
,	O	O
answer	O	O
-	O	O
25903190	O	O
#	O	O
pre	O	O
It	O	O
'	O	O
s	O	O
not	O	O
quite	O	O
as	O	O
nice	O	O
as	O	O
the	O	O
list	O	O
code	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
construct	O	O
new	O	O
Map	B-api_mention	B-api_mention
.	I-api_mention	O
Entry	I-api_mention	O
s	O	O
in	O	O
a	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
so	O	O
the	O	O
work	O	O
is	O	O
mixed	O	O
into	O	O
the	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
.	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
8894348	O	O
The	O	O
first	O	O
one	O	O
using	O	O
str	O	O
.	B-api_mention	O
charAt	I-api_mention	O
should	O	O
be	O	O
faster	O	O
.	O	O
If	O	O
you	O	O
dig	O	O
inside	O	O
the	O	O
source	O	O
code	O	O
of	O	O
String	O	B-api_mention
class	O	O
,	O	O
we	O	O
can	O	O
see	O	O
that	O	O
charAt	O	O
is	O	O
implemented	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
Here	O	O
,	O	O
all	O	O
it	O	O
does	O	O
is	O	O
index	O	O
an	O	O
array	O	O
and	O	O
return	O	O
the	O	O
value	O	O
.	O	O
Now	O	O
,	O	O
if	O	O
we	O	O
see	O	O
the	O	O
implementation	O	O
of	O	O
toCharArray	B-api_mention	B-api_mention
,	O	O
we	O	O
will	O	O
find	O	O
the	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
see	O	O
,	O	O
it	O	O
is	O	O
doing	O	O
a	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
arraycopy	I-api_mention	I-api_mention
which	O	O
is	O	O
definitely	O	O
going	O	O
to	O	O
be	O	O
a	O	O
tad	O	O
slower	O	O
than	O	O
not	O	O
doing	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
16637740	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
can	O	O
be	O	O
implemented	O	O
to	O	O
be	O	O
faster	O	O
than	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
,	O	O
because	O	O
the	O	O
iterable	O	O
knows	O	O
the	O	O
best	O	O
way	O	O
to	O	O
iterate	O	O
its	O	O
elements	O	O
,	O	O
as	O	O
opposed	O	O
to	O	O
the	O	O
standard	O	O
iterator	O	O
way	O	O
.	O	O
So	O	O
the	O	O
difference	O	O
is	O	O
loop	O	O
internally	O	O
or	O	O
loop	O	O
externally	O	O
.	O	O
For	O	O
example	O	O
ArrayList	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
be	O	O
simply	O	O
implemented	O	O
as	O	O
#	O	O
pre	O	O
as	O	O
opposed	O	O
to	O	O
the	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
which	O	O
requires	O	O
a	O	O
lot	O	O
of	O	O
scaffolding	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
we	O	O
also	O	O
need	O	O
to	O	O
account	O	O
for	O	O
two	O	O
overhead	O	O
costs	O	O
by	O	O
using	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
one	O	O
is	O	O
making	O	O
the	O	O
lambda	O	O
object	O	O
,	O	O
the	O	O
other	O	O
is	O	O
invoking	O	O
the	O	O
lambda	O	O
method	O	O
.	O	O
They	O	O
are	O	O
probably	O	O
not	O	O
significant	O	O
.	O	O
see	O	O
also	O	O
#	O	O
a	O	O
for	O	O
comparing	O	O
internal	O	O
/	O	O
external	O	O
iterations	O	O
for	O	O
different	O	O
use	O	O
cases	O	O
.	O	O
Question	O	O
-	O	O
20129762	O	O
,	O	O
answer	O	O
-	O	O
30548433	O	O
I	O	O
would	O	O
like	O	O
to	O	O
point	O	O
out	O	O
that	O	O
StreamEx	O	O
does	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
and	O	O
Stream	B-api_mention	B-api_mention
)	O	O
,	O	O
as	O	O
well	O	O
as	O	O
a	O	O
host	O	O
of	O	O
other	O	O
immensely	O	O
awesome	O	O
functionality	O	O
missing	O	O
from	O	O
Stream	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
32859038	O	O
I	O	O
have	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
collection	O	O
.	O	O
I	O	O
need	O	O
to	O	O
convert	O	O
it	O	O
into	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
The	O	O
key	O	O
of	O	O
the	O	O
map	O	O
must	O	O
be	O	O
the	O	O
index	O	O
of	O	O
the	O	O
item	O	O
in	O	O
the	O	O
collection	O	O
.	O	O
I	O	O
can	O	O
not	O	O
figure	O	O
it	O	O
out	O	O
how	O	O
to	O	O
do	O	O
this	O	O
with	O	O
streams	O	O
.	O	O
Something	O	O
like	O	O
:	O	O
items	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Any	O	O
help	O	O
?	O	O
As	O	O
this	O	O
question	O	O
is	O	O
identified	O	O
as	O	O
possible	O	O
duplicate	O	O
I	O	O
need	O	O
to	O	O
add	O	O
that	O	O
my	O	O
concrete	O	O
problem	O	O
was	O	O
-	O	O
how	O	O
to	O	O
get	O	O
the	O	O
position	O	O
of	O	O
the	O	O
item	O	O
in	O	O
the	O	O
list	O	O
and	O	O
put	O	O
it	O	O
as	O	O
a	O	O
key	O	O
value	O	O
Question	O	O
-	O	O
20945049	O	O
We	O	O
all	O	O
know	O	O
that	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
in	O	O
Java	O	O
,	O	O
but	O	O
check	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Why	O	O
does	O	O
this	O	O
program	O	O
operate	O	O
like	O	O
this	O	O
?	O	O
And	O	O
why	O	O
is	O	O
the	O	O
value	O	O
of	O	O
s1	O	O
and	O	O
s2	O	O
changed	O	O
,	O	O
but	O	O
not	O	O
s3	O	O
?	O	O
Question	O	O
-	O	O
10904911	O	O
I	O	O
am	O	O
using	O	O
trying	O	O
to	O	O
use	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
but	O	O
I	O	O
think	O	O
I	O	O
am	O	O
doing	O	O
it	O	O
wrong	O	O
:	O	O
#	O	O
a	O	O
My	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
output	O	O
is	O	O
:	O	O
[	O	O
I	O	O
@	O	O
23fc4bec	O	O
Also	O	O
I	O	O
tried	O	O
printing	O	O
like	O	O
this	O	O
,	O	O
but	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
took	O	O
this	O	O
code	O	O
out	O	O
of	O	O
bigger	O	O
and	O	O
more	O	O
complex	O	O
code	O	O
,	O	O
but	O	O
I	O	O
can	O	O
add	O	O
it	O	O
if	O	O
needed	O	O
.	O	O
But	O	O
this	O	O
should	O	O
give	O	O
general	O	O
information	O	O
.	O	O
I	O	O
am	O	O
looking	O	O
for	O	O
output	O	O
,	O	O
like	O	O
in	O	O
Oracle	O	O
'	O	O
s	O	O
documentation	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
20129762	O	O
,	O	O
answer	O	O
-	O	O
20130475	O	O
To	O	O
convert	O	O
a	O	O
Stream	B-api_mention	B-api_mention
to	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
do	O	O
#	O	O
pre	O	O
To	O	O
pass	O	O
a	O	O
Stream	B-api_mention	B-api_mention
to	O	O
a	O	O
method	O	O
that	O	O
expects	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
void	O	O
foo	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
simply	O	O
foo	O	O
(	O	O
args	O	O
)	O	O
however	O	O
it	O	O
probably	O	O
looks	O	O
funny	O	O
;	O	O
it	O	O
might	O	O
be	O	O
better	O	O
to	O	O
be	O	O
a	O	O
little	O	O
bit	O	O
more	O	O
explicit	O	O
foo	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
Question	O	O
-	O	O
14833008	O	O
,	O	O
answer	O	O
-	O	O
14833048	O	O
You	O	O
need	O	O
to	O	O
escape	O	O
the	O	O
dot	O	O
if	O	O
you	O	O
want	O	O
to	O	O
split	O	O
on	O	O
a	O	O
literal	O	O
dot	O	O
:	O	O
String	B-api_mention	B-api_mention
extensionRemoved	O	O
=	O	O
filename	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
[	O	O
0	O	O
]	O	O
;	O	O
Otherwise	O	O
you	O	O
are	O	O
splitting	O	O
on	O	O
the	O	O
regex	O	O
.	O	O
,	O	O
which	O	O
means	O	O
"	O	O
any	O	O
character	O	O
"	O	O
.	O	O
Note	O	O
the	O	O
double	O	O
backslash	O	O
needed	O	O
to	O	O
create	O	O
a	O	O
single	O	O
backslash	O	O
in	O	O
the	O	O
regex	O	O
.	O	O
You	O	O
'	O	O
re	O	O
getting	O	O
an	O	O
ArrayIndexOutOfBoundsException	B-api_mention	B-api_mention
because	O	O
your	O	O
input	O	O
string	O	O
is	O	O
just	O	O
a	O	O
dot	O	O
,	O	O
ie	O	O
StringLiteral	O	O
,	O	O
which	O	O
is	O	O
an	O	O
edge	O	O
case	O	O
that	O	O
produces	O	O
an	O	O
empty	O	O
array	O	O
when	O	O
split	O	O
on	O	O
dot	O	O
;	O	O
split	B-api_mention	O
(	I-api_mention	O
regex	I-api_mention	O
)	I-api_mention	O
removes	O	O
all	O	O
trailing	O	O
blanks	O	O
from	O	O
the	O	O
result	O	O
,	O	O
but	O	O
since	O	O
splitting	O	O
a	O	O
dot	O	O
on	O	O
a	O	O
dot	O	O
leaves	O	O
only	O	O
two	O	O
blanks	O	O
,	O	O
after	O	O
trailing	O	O
blanks	O	O
are	O	O
removed	O	O
you	O	O
'	O	O
re	O	O
left	O	O
with	O	O
an	O	O
empty	O	O
array	O	O
.	O	O
To	O	O
avoid	O	O
getting	O	O
an	O	O
ArrayIndexOutOfBoundsException	B-api_mention	B-api_mention
for	O	O
this	O	O
edge	O	O
case	O	O
,	O	O
use	O	O
the	O	O
overloaded	O	O
version	O	O
of	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
has	O	O
a	O	O
second	O	O
parameter	O	O
that	O	O
is	O	O
the	O	O
size	O	O
limit	O	O
for	O	O
the	O	O
resulting	O	O
array	O	O
.	O	O
When	O	O
limit	O	O
is	O	O
negative	O	O
,	O	O
the	O	O
behaviour	O	O
of	O	O
removing	O	O
trailing	O	O
blanks	O	O
from	O	O
the	O	O
resulting	O	O
array	O	O
is	O	O
disabled	O	O
:	O	O
StringLiteral	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
/	O	O
returns	O	O
an	O	O
array	O	O
of	O	O
two	O	O
blanks	O	O
,	O	O
ie	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
ie	O	O
,	O	O
when	O	O
filename	O	O
is	O	O
just	O	O
a	O	O
dot	O	O
StringLiteral	O	O
,	O	O
calling	O	O
filename	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
[	O	O
0	O	O
]	O	O
will	O	O
return	O	O
a	O	O
blank	O	O
,	O	O
but	O	O
calling	O	O
filename	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
[	O	O
0	O	O
]	O	O
will	O	O
throw	O	O
an	O	O
ArrayIndexOutOfBoundsException	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
31471444	O	O
,	O	O
answer	O	O
-	O	O
31476657	O	O
From	O	O
Class	O	O
NumberUtils	B-api_mention	B-api_mention
you	O	O
'	O	O
ll	O	O
see	O	O
it	O	O
'	O	O
s	O	O
defined	O	O
as	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
see	O	O
that	O	O
INTEGER	O	O
_	O	O
ONE	O	O
is	O	O
not	O	O
the	O	O
same	O	O
as	O	O
1	O	O
.	O	O
It	O	O
'	O	O
s	O	O
an	O	O
object	O	O
that	O	O
'	O	O
s	O	O
already	O	O
been	O	O
constructed	O	O
for	O	O
you	O	O
.	O	O
So	O	O
,	O	O
if	O	O
we	O	O
'	O	O
re	O	O
needing	O	O
an	O	O
instance	O	O
of	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
rather	O	O
than	O	O
create	O	O
your	O	O
own	O	O
,	O	O
you	O	O
can	O	O
reuse	O	O
the	O	O
one	O	O
from	O	O
the	O	O
library	O	O
saving	O	O
time	O	O
and	O	O
memory	O	O
.	O	O
It	O	O
really	O	O
depends	O	O
on	O	O
your	O	O
application	O	O
,	O	O
if	O	O
you	O	O
indeed	O	O
what	O	O
the	O	O
int	O	O
version	O	O
of	O	O
1	O	O
,	O	O
then	O	O
,	O	O
you	O	O
'	O	O
d	O	O
probably	O	O
be	O	O
better	O	O
of	O	O
using	O	O
that	O	O
instead	O	O
of	O	O
this	O	O
Integer	B-api_mention	B-api_mention
class	O	O
.	O	O
Question	O	O
-	O	O
27888429	O	O
,	O	O
answer	O	O
-	O	O
27888481	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Or	O	O
,	O	O
if	O	O
you	O	O
are	O	O
already	O	O
have	O	O
an	O	O
array	O	O
,	O	O
you	O	O
can	O	O
also	O	O
do	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
For	O	O
primitive	O	O
types	O	O
use	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
or	O	O
LongStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
etc	O	O
.	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29099896	O	O
This	O	O
is	O	O
a	O	O
very	O	O
interesting	O	O
problem	O	O
.	O	O
I	O	O
came	O	O
up	O	O
with	O	O
a	O	O
one	O	O
line	O	O
solution	O	O
.	O	O
It	O	O
might	O	O
not	O	O
very	O	O
performant	O	O
but	O	O
it	O	O
works	O	O
.	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
a	O	O
similar	O	O
idea	O	O
that	O	O
@	O	O
Rohit	O	O
Jain	O	O
came	O	O
up	O	O
with	O	O
.	O	O
I	O	O
'	O	O
m	O	O
grouping	O	O
the	O	O
space	O	O
between	O	O
the	O	O
null	O	O
values	O	O
.	O	O
If	O	O
you	O	O
really	O	O
want	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
you	O	O
may	O	O
append	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
ll	O	O
=	O	O
cl	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
34250207	O	O
As	O	O
I	O	O
recall	O	O
,	O	O
before	O	O
Java	O	O
8	O	O
,	O	O
the	O	O
default	O	O
capacity	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
was	O	O
10	O	O
.	O	O
Surprisingly	O	O
,	O	O
the	O	O
comment	O	O
on	O	O
the	O	O
default	O	O
(	O	O
void	O	O
)	O	O
constructor	O	O
still	O	O
says	O	O
:	O	O
Constructs	O	O
an	O	O
empty	O	O
list	O	O
with	O	O
an	O	O
initial	O	O
capacity	O	O
of	O	O
ten	O	O
.	O	O
From	O	O
ArrayList	O	B-api_mention
.	O	O
java	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29922296	O	O
,	O	O
answer	O	O
-	O	O
29922469	O	O
My	O	O
guess	O	O
is	O	O
that	O	O
enums	O	O
are	O	O
limited	O	O
in	O	O
size	O	O
(	O	O
i	O	O
.	O	O
e	O	O
the	O	O
size	O	O
is	O	O
not	O	O
limited	O	O
by	O	O
language	O	O
but	O	O
limited	O	O
by	O	O
usage	O	O
)	O	O
and	O	O
thus	O	O
they	O	O
don	O	O
'	O	O
t	O	O
need	O	O
a	O	O
native	O	O
stream	O	O
api	O	O
.	O	O
Streams	O	B-api_mention
are	O	O
very	O	O
good	O	O
when	O	O
you	O	O
have	O	O
to	O	O
manipulate	O	O
transform	O	O
and	O	O
recollect	O	O
the	O	O
elements	O	O
in	O	O
a	O	O
stream	O	O
;	O	O
these	O	O
are	O	O
not	O	O
common	O	O
uses	O	O
case	O	O
for	O	O
Enum	O	B-api_mention
(	O	O
usually	O	O
you	O	O
iterate	O	O
over	O	O
enum	O	O
values	O	O
,	O	O
but	O	O
rarely	O	O
you	O	O
need	O	O
to	O	O
transform	O	O
,	O	O
map	O	O
and	O	O
collect	O	O
them	O	O
)	O	O
.	O	O
If	O	O
you	O	O
need	O	O
only	O	O
to	O	O
do	O	O
an	O	O
action	O	O
over	O	O
each	O	O
elements	O	O
perhaps	O	O
you	O	O
should	O	O
expose	O	O
only	O	O
a	O	O
forEach	B-api_mention	B-api_mention
method	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
32866218	O	O
The	O	O
main	O	O
reason	O	O
with	O	O
HashMap	B-api_mention	B-api_mention
not	O	O
allowing	O	O
primitive	O	O
as	O	O
keys	O	O
is	O	O
that	O	O
HashMap	B-api_mention	B-api_mention
is	O	O
designed	O	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
for	O	O
comparing	O	O
the	O	O
keys	O	O
,	O	O
it	O	O
makes	O	O
use	O	O
of	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
and	O	O
a	O	O
method	O	O
can	O	O
be	O	O
called	O	O
only	O	O
on	O	O
an	O	O
object	O	O
not	O	O
on	O	O
a	O	O
primitive	O	O
.	O	O
Thus	O	O
when	O	O
int	O	O
is	O	O
autoboxed	O	O
to	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Hashmap	O	B-api_mention
can	O	O
call	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
on	O	O
Integer	B-api_mention	B-api_mention
object	O	O
.	O	O
That	O	O
is	O	O
why	O	O
,	O	O
you	O	O
should	O	O
use	O	O
Integer	B-api_mention	B-api_mention
instead	O	O
of	O	O
int	O	O
.	O	O
I	O	O
mean	O	O
hashmap	O	O
throws	O	O
an	O	O
error	O	O
while	O	O
putting	O	O
int	O	O
as	O	O
a	O	O
key	O	O
(	O	O
Don	O	O
'	O	O
t	O	O
know	O	O
the	O	O
meaning	O	O
of	O	O
the	O	O
error	O	O
that	O	O
is	O	O
thrown	O	O
)	O	O
And	O	O
if	O	O
you	O	O
think	O	O
that	O	O
,	O	O
you	O	O
can	O	O
make	O	O
Map	B-api_mention	O
performance	O	O
faster	O	O
by	O	O
making	O	O
a	O	O
primitive	O	O
as	O	O
a	O	O
key	O	O
,	O	O
there	O	O
is	O	O
a	O	O
library	O	O
called	O	O
FastUtil	B-api_mention	B-api_mention
which	O	O
contains	O	O
a	O	O
Map	B-api_mention	B-api_mention
implementation	O	O
with	O	O
int	O	O
type	O	O
as	O	O
a	O	O
key	O	O
.	O	O
Because	O	O
of	O	O
this	O	O
,	O	O
it	O	O
is	O	O
much	O	O
faster	O	O
than	O	O
Hashmap	B-api_mention	O
Question	O	O
-	O	O
18571223	O	O
,	O	O
answer	O	O
-	O	O
18571358	O	O
Try	O	O
using	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getBytes	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
It	O	O
returns	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
representing	O	O
string	O	O
data	O	O
.	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29229373	O	O
I	O	O
have	O	O
the	O	O
following	O	O
sample	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
output	O	O
is	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
From	O	O
here	O	O
I	O	O
see	O	O
that	O	O
in	O	O
first	O	O
case	O	O
stream	O	O
really	O	O
behaves	O	O
lazily	O	O
-	O	O
we	O	O
use	O	O
findFirst	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
so	O	O
once	O	O
we	O	O
have	O	O
first	O	O
element	O	O
our	O	O
filtering	O	O
lambda	O	O
is	O	O
not	O	O
invoked	O	O
.	O	O
However	O	O
,	O	O
in	O	O
second	O	O
case	O	O
which	O	O
uses	O	O
flatMaps	O	B-api_mention
we	O	O
see	O	O
that	O	O
despite	O	O
first	O	O
element	O	O
which	O	O
fulfils	O	O
the	O	O
filter	O	O
condition	O	O
is	O	O
found	O	O
(	O	O
it	O	O
'	O	O
s	O	O
just	O	O
any	O	O
first	O	O
element	O	O
as	O	O
lambda	O	O
always	O	O
returns	O	O
true	O	O
)	O	O
further	O	O
contents	O	O
of	O	O
the	O	O
stream	O	O
are	O	O
still	O	O
being	O	O
fed	O	O
through	O	O
filtering	O	O
function	O	O
.	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
understand	O	O
why	O	O
it	O	O
behaves	O	O
like	O	O
this	O	O
rather	O	O
than	O	O
giving	O	O
up	O	O
after	O	O
first	O	O
element	O	O
is	O	O
calculated	O	O
as	O	O
in	O	O
the	O	O
first	O	O
case	O	O
.	O	O
Any	O	O
helpful	O	O
information	O	O
would	O	O
be	O	O
appreciated	O	O
.	O	O
Question	O	O
-	O	O
10796160	O	O
,	O	O
answer	O	O
-	O	O
21025279	O	O
Use	O	O
proper	O	O
escaping	O	O
:	O	O
string	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Or	O	O
the	O	O
helper	O	O
Regexp	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
quote	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
has	O	O
been	O	O
created	O	O
for	O	O
exactly	O	O
this	O	O
purpose	O	O
:	O	O
string	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
works	O	O
with	O	O
arbitrary	O	O
input	O	O
strings	O	O
.	O	O
Very	O	O
useful	O	O
when	O	O
you	O	O
need	O	O
to	O	O
quote	O	O
/	O	O
escape	O	O
user	O	O
input	O	O
.	O	O
Question	O	O
-	O	O
34509566	O	O
,	O	O
answer	O	O
-	O	O
34509669	O	O
The	O	O
difference	O	O
between	O	O
d	O	O
and	O	O
e	O	O
is	O	O
that	O	O
when	O	O
you	O	O
concatenate	O	O
string	O	O
literals	O	O
,	O	O
the	O	O
concatenation	O	O
is	O	O
performed	O	O
at	O	O
compile	O	O
time	O	O
.	O	O
Java	O	O
compiler	O	O
treats	O	O
StringLiteral	O	O
+	O	O
StringLiteral	O	O
expression	O	O
in	O	O
the	O	O
same	O	O
way	O	O
as	O	O
StringLiteral	O	O
expression	O	O
,	O	O
producing	O	O
the	O	O
same	O	O
literal	O	O
at	O	O
compile	O	O
time	O	O
.	O	O
Since	O	O
all	O	O
String	B-api_mention	B-api_mention
literals	O	O
get	O	O
interned	O	O
,	O	O
d	O	O
,	O	O
which	O	O
is	O	O
a	O	O
result	O	O
of	O	O
StringLiteral	O	O
+	O	O
StringLiteral	O	O
,	O	O
also	O	O
ends	O	O
up	O	O
referencing	O	O
the	O	O
same	O	O
object	O	O
as	O	O
a	O	O
and	O	O
b	O	O
'	O	O
s	O	O
StringLiteral	O	O
.	O	O
The	O	O
expression	O	O
for	O	O
e	O	O
,	O	O
which	O	O
is	O	O
c	O	O
+	O	O
StringLiteral	O	O
,	O	O
is	O	O
evaluated	O	O
at	O	O
runtime	O	O
.	O	O
Even	O	O
though	O	O
it	O	O
produces	O	O
the	O	O
same	O	O
string	O	O
,	O	O
this	O	O
fact	O	O
is	O	O
not	O	O
used	O	O
by	O	O
the	O	O
compiler	O	O
.	O	O
That	O	O
'	O	O
s	O	O
why	O	O
a	O	O
different	O	O
String	B-api_mention	B-api_mention
object	O	O
is	O	O
produced	O	O
,	O	O
resulting	O	O
in	O	O
failed	O	O
comparison	O	O
on	O	O
=	O	O
=	O	O
.	O	O
Question	O	O
-	O	O
18987692	O	O
,	O	O
answer	O	O
-	O	O
18987738	O	O
You	O	O
can	O	O
use	O	O
IsNull	O	B-api_mention
.	O	I-api_mention
nullValue	O	I-api_mention
(	O	I-api_mention
)	O	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28459498	O	O
,	O	O
answer	O	O
-	O	O
28465634	O	O
I	O	O
think	O	O
there	O	O
are	O	O
very	O	O
few	O	O
differences	O	O
between	O	O
the	O	O
two	O	O
when	O	O
you	O	O
look	O	O
closely	O	O
enough	O	O
.	O	O
At	O	O
it	O	O
'	O	O
s	O	O
face	O	O
,	O	O
an	O	O
IEnumerable	O	O
does	O	O
appear	O	O
to	O	O
be	O	O
a	O	O
reusable	O	O
construct	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
the	O	O
compiler	O	O
is	O	O
actually	O	O
doing	O	O
a	O	O
little	O	O
bit	O	O
of	O	O
work	O	O
to	O	O
help	O	O
us	O	O
out	O	O
;	O	O
it	O	O
generates	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Each	O	O
time	O	O
you	O	O
would	O	O
actually	O	O
iterate	O	O
over	O	O
the	O	O
enumerable	O	O
,	O	O
the	O	O
compiler	O	O
creates	O	O
an	O	O
enumerator	O	O
.	O	O
The	O	O
enumerator	O	O
is	O	O
not	O	O
reusable	O	O
;	O	O
further	O	O
calls	O	O
to	O	O
MoveNext	B-api_mention	B-api_mention
will	O	O
just	O	O
return	O	O
false	O	O
,	O	O
and	O	O
there	O	O
is	O	O
no	O	O
way	O	O
to	O	O
reset	O	O
it	O	O
to	O	O
the	O	O
beginning	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
iterate	O	O
over	O	O
the	O	O
numbers	O	O
again	O	O
,	O	O
you	O	O
will	O	O
need	O	O
to	O	O
create	O	O
another	O	O
enumerator	O	O
instance	O	O
.	O	O
To	O	O
better	O	O
illustrate	O	O
that	O	O
the	O	O
IEnumerable	O	O
has	O	O
(	O	O
can	O	O
have	O	O
)	O	O
the	O	O
same	O	O
'	O	O
feature	O	O
'	O	O
as	O	O
a	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
,	O	O
consider	O	O
a	O	O
enumerable	O	O
whose	O	O
source	O	O
of	O	O
the	O	O
numbers	O	O
is	O	O
not	O	O
a	O	O
static	O	O
collection	O	O
.	O	O
For	O	O
example	O	O
,	O	O
we	O	O
can	O	O
create	O	O
an	O	O
enumerable	O	O
object	O	O
which	O	O
generates	O	O
a	O	O
sequence	O	O
of	O	O
5	O	O
random	O	O
numbers	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
we	O	O
have	O	O
very	O	O
similar	O	O
code	O	O
to	O	O
the	O	O
previous	O	O
array	O	O
-	O	O
based	O	O
enumerable	O	O
,	O	O
but	O	O
with	O	O
a	O	O
second	O	O
iteration	O	O
over	O	O
numbers	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
second	O	O
time	O	O
we	O	O
iterate	O	O
over	O	O
numbers	O	O
we	O	O
will	O	O
get	O	O
a	O	O
different	O	O
sequence	O	O
of	O	O
numbers	O	O
,	O	O
which	O	O
isn	O	O
'	O	O
t	O	O
reusable	O	O
in	O	O
the	O	O
same	O	O
sense	O	O
.	O	O
Or	O	O
,	O	O
we	O	O
could	O	O
have	O	O
written	O	O
the	O	O
RandomNumberStream	B-api_mention	B-api_mention
to	O	O
thrown	O	O
an	O	O
exception	O	O
if	O	O
you	O	O
try	O	O
to	O	O
iterate	O	O
over	O	O
it	O	O
multiple	O	O
times	O	O
,	O	O
making	O	O
the	O	O
enumerable	O	O
actually	O	O
unusable	O	O
(	O	O
like	O	O
a	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
)	O	O
.	O	O
Also	O	O
,	O	O
what	O	O
does	O	O
your	O	O
enumerable	O	O
-	O	O
based	O	O
quick	O	O
sort	O	O
mean	O	O
when	O	O
applied	O	O
to	O	O
a	O	O
RandomNumberStream	B-api_mention	B-api_mention
?	O	O
Conclusion	O	O
So	O	O
,	O	O
the	O	O
biggest	O	O
difference	O	O
is	O	O
that	O	O
.	O	O
NET	O	O
allows	O	O
you	O	O
to	O	O
reuse	O	O
an	O	O
IEnumerable	O	O
by	O	O
implicitly	O	O
creating	O	O
a	O	O
new	O	O
IEnumerator	O	O
in	O	O
the	O	O
background	O	O
whenever	O	O
it	O	O
would	O	O
need	O	O
to	O	O
access	O	O
elements	O	O
in	O	O
the	O	O
sequence	O	O
.	O	O
This	O	O
implicit	O	O
behavior	O	O
is	O	O
often	O	O
useful	O	O
(	O	O
and	O	O
'	O	O
powerful	O	O
'	O	O
as	O	O
you	O	O
state	O	O
)	O	O
,	O	O
because	O	O
we	O	O
can	O	O
repeatedly	O	O
iterate	O	O
over	O	O
a	O	O
collection	O	O
.	O	O
But	O	O
sometimes	O	O
,	O	O
this	O	O
implicit	O	O
behavior	O	O
can	O	O
actually	O	O
cause	O	O
problems	O	O
.	O	O
If	O	O
your	O	O
data	O	O
source	O	O
is	O	O
not	O	O
static	O	O
,	O	O
or	O	O
is	O	O
costly	O	O
to	O	O
access	O	O
(	O	O
like	O	O
a	O	O
database	O	O
or	O	O
web	O	O
site	O	O
)	O	O
,	O	O
then	O	O
a	O	O
lot	O	O
of	O	O
assumptions	O	O
about	O	O
IEnumerable	O	O
have	O	O
to	O	O
be	O	O
discarded	O	O
;	O	O
reuse	O	O
is	O	O
not	O	O
that	O	O
straight	O	O
-	O	O
forward	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923214	O	O
This	O	O
seems	O	O
a	O	O
bit	O	O
silly	O	O
to	O	O
me	O	O
,	O	O
but	O	O
the	O	O
only	O	O
reason	O	O
I	O	O
can	O	O
think	O	O
of	O	O
is	O	O
that	O	O
object	O	O
arguments	O	O
in	O	O
method	O	O
parameters	O	O
already	O	O
are	O	O
optional	O	O
in	O	O
a	O	O
way	O	O
-	O	O
they	O	O
can	O	O
be	O	O
null	O	O
.	O	O
Therefore	O	O
forcing	O	O
someone	O	O
to	O	O
take	O	O
an	O	O
existing	O	O
object	O	O
and	O	O
wrap	O	O
it	O	O
in	O	O
an	O	O
optional	O	O
is	O	O
sort	O	O
of	O	O
pointless	O	O
.	O	O
That	O	O
being	O	O
said	O	O
,	O	O
chaining	O	O
methods	O	O
together	O	O
that	O	O
take	O	O
/	O	O
return	O	O
optionals	O	O
is	O	O
a	O	O
reasonable	O	O
thing	O	O
to	O	O
do	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Maybe	O	O
monad	O	O
.	O	O
Question	O	O
-	O	O
4576352	O	O
I	O	O
can	O	O
use	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Is	O	O
there	O	O
a	O	O
way	O	O
to	O	O
remove	O	O
all	O	O
occurrences	O	O
of	O	O
character	O	O
X	O	O
from	O	O
a	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
?	O	O
I	O	O
tried	O	O
this	O	O
and	O	O
is	O	O
not	O	O
what	O	O
I	O	O
want	O	O
:	O	O
str	O	O
.	B-api_mention	B-api_mention
replace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
replace	O	O
with	O	O
space	O	O
Question	O	O
-	O	O
12539365	O	O
,	O	O
answer	O	O
-	O	O
29349910	O	O
I	O	O
must	O	O
say	O	O
,	O	O
that	O	O
you	O	O
are	O	O
absolutely	O	O
right	O	O
from	O	O
a	O	O
classical	O	O
approach	O	O
'	O	O
s	O	O
point	O	O
of	O	O
view	O	O
:	O	O
#	O	O
li	O	O
If	O	O
you	O	O
first	O	O
create	O	O
(	O	O
or	O	O
change	O	O
)	O	O
business	O	O
logic	O	O
of	O	O
your	O	O
application	O	O
and	O	O
then	O	O
cover	O	O
it	O	O
with	O	O
(	O	O
adopt	O	O
)	O	O
tests	O	O
(	O	O
Test	O	O
-	O	O
Last	O	O
approach	O	O
)	O	O
,	O	O
then	O	O
it	O	O
will	O	O
be	O	O
very	O	O
painful	O	O
and	O	O
dangerous	O	O
to	O	O
let	O	O
tests	O	O
know	O	O
anything	O	O
about	O	O
how	O	O
your	O	O
software	O	O
works	O	O
,	O	O
other	O	O
than	O	O
checking	O	O
inputs	O	O
and	O	O
outputs	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
are	O	O
practicing	O	O
a	O	O
Test	O	O
-	O	O
Driven	O	O
approach	O	O
,	O	O
then	O	O
your	O	O
tests	O	O
are	O	O
the	O	O
first	O	O
to	O	O
be	O	O
written	O	O
,	O	O
to	O	O
be	O	O
changed	O	O
and	O	O
to	O	O
reflect	O	O
the	O	O
use	O	O
cases	O	O
of	O	O
your	O	O
software	O	O
'	O	O
s	O	O
functionality	O	O
.	O	O
The	O	O
implementation	O	O
depends	O	O
on	O	O
tests	O	O
.	O	O
That	O	O
sometimes	O	O
mean	O	O
,	O	O
that	O	O
you	O	O
want	O	O
your	O	O
software	O	O
to	O	O
be	O	O
implemented	O	O
in	O	O
some	O	O
particular	O	O
way	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
rely	O	O
on	O	O
some	O	O
other	O	O
component	O	O
'	O	O
s	O	O
method	O	O
or	O	O
even	O	O
call	O	O
it	O	O
a	O	O
particular	O	O
amount	O	O
of	O	O
times	O	O
.	O	O
That	O	O
is	O	O
where	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
comes	O	O
in	O	O
handy	O	O
!	O	O
It	O	O
is	O	O
important	O	O
to	O	O
remember	O	O
,	O	O
that	O	O
there	O	O
are	O	O
no	O	O
universal	O	O
tools	O	O
.	O	O
The	O	O
type	O	O
of	O	O
software	O	O
,	O	O
it	O	O
'	O	O
s	O	O
size	O	O
,	O	O
company	O	O
goals	O	O
and	O	O
market	O	O
situation	O	O
,	O	O
team	O	O
skills	O	O
and	O	O
many	O	O
other	O	O
things	O	O
influence	O	O
the	O	O
decision	O	O
on	O	O
which	O	O
approach	O	O
to	O	O
use	O	O
at	O	O
your	O	O
particular	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
16252269	O	O
,	O	O
answer	O	O
-	O	O
29652714	O	O
You	O	O
can	O	O
use	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
sort	O	O
list	O	O
if	O	O
your	O	O
list	O	O
contains	O	O
Comparable	B-api_mention	B-api_mention
elements	O	O
.	O	O
Otherwise	O	O
I	O	O
would	O	O
recommend	O	O
you	O	O
to	O	O
implement	O	O
that	O	O
interface	O	O
like	O	O
here	O	O
:	O	O
public	O	O
class	O	O
Circle	O	O
implements	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
{	O	O
}	O	O
and	O	O
of	O	O
course	O	O
provide	O	O
your	O	O
own	O	O
realization	O	O
of	O	O
compareTo	B-api_mention	B-api_mention
method	O	O
like	O	O
here	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
then	O	O
you	O	O
can	O	O
again	O	O
use	O	O
Colection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
now	O	O
list	O	O
contains	O	O
objects	O	O
of	O	O
Comparable	B-api_mention	B-api_mention
type	O	O
and	O	O
can	O	O
be	O	O
sorted	O	O
.	O	O
Order	O	O
depends	O	O
on	O	O
compareTo	B-api_mention	B-api_mention
method	O	O
.	O	O
Check	O	O
this	O	O
#	O	O
a	O	O
for	O	O
more	O	O
detailed	O	O
information	O	O
.	O	O
Question	O	O
-	O	O
5982447	O	O
,	O	O
answer	O	O
-	O	O
5982478	O	O
Use	O	O
the	O	O
Set	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
[	I-api_mention	I-api_mention
]	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
taking	O	O
a	O	O
typed	O	O
array	O	O
argument	O	O
of	O	O
the	O	O
same	O	O
size	O	O
.	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
GPXFILES1	O	O
=	O	O
myset	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
A	O	O
different	O	O
size	O	O
can	O	O
also	O	O
,	O	O
but	O	O
that	O	O
would	O	O
force	O	O
the	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
create	O	O
a	O	O
new	O	O
array	O	O
to	O	O
return	O	O
instead	O	O
of	O	O
reusing	O	O
the	O	O
provided	O	O
argument	O	O
,	O	O
which	O	O
may	O	O
end	O	O
up	O	O
to	O	O
be	O	O
less	O	O
efficient	O	O
.	O	O
See	O	O
also	O	O
the	O	O
source	O	O
code	O	O
of	O	O
AbstractCollection	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
29922296	O	O
,	O	O
answer	O	O
-	O	O
29926133	O	O
I	O	O
'	O	O
d	O	O
go	O	O
for	O	O
EnumSet	B-api_mention	B-api_mention
.	O	O
Because	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
also	O	O
defined	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
avoid	O	O
creating	O	O
the	O	O
stream	O	O
altogether	O	O
:	O	O
EnumSet	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
allOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Or	O	O
with	O	O
a	O	O
method	O	O
reference	O	O
:	O	O
EnumSet	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
allOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Still	O	O
,	O	O
the	O	O
oldschool	O	O
for	O	O
-	O	O
loop	O	O
feels	O	O
a	O	O
bit	O	O
simpler	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
22561614	O	O
,	O	O
answer	O	O
-	O	O
22561853	O	O
Let	O	O
me	O	O
explain	O	O
what	O	O
is	O	O
happening	O	O
here	O	O
,	O	O
because	O	O
it	O	O
isn	O	O
'	O	O
t	O	O
obvious	O	O
!	O	O
First	O	O
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
accepts	O	O
an	O	O
instance	O	O
of	O	O
Comparator	B-api_mention	B-api_mention
so	O	O
that	O	O
items	O	O
in	O	O
the	O	O
stream	O	O
can	O	O
be	O	O
compared	O	O
against	O	O
each	O	O
other	O	O
to	O	O
find	O	O
the	O	O
minimum	O	O
or	O	O
maximum	O	O
,	O	O
in	O	O
some	O	O
optimal	O	O
order	O	O
that	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
worry	O	O
too	O	O
much	O	O
about	O	O
.	O	O
So	O	O
the	O	O
question	O	O
is	O	O
,	O	O
of	O	O
course	O	O
,	O	O
why	O	O
is	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
accepted	O	O
?	O	O
After	O	O
all	O	O
it	O	O
'	O	O
s	O	O
not	O	O
a	O	O
comparator	O	O
!	O	O
The	O	O
answer	O	O
is	O	O
in	O	O
the	O	O
way	O	O
that	O	O
the	O	O
new	O	O
lambda	O	O
functionality	O	O
works	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
It	O	O
relies	O	O
on	O	O
a	O	O
concept	O	O
which	O	O
is	O	O
informally	O	O
known	O	O
as	O	O
"	O	O
single	O	O
abstract	O	O
method	O	O
"	O	O
interfaces	O	O
,	O	O
or	O	O
"	O	O
SAM	O	O
"	O	O
interfaces	O	O
.	O	O
The	O	O
idea	O	O
is	O	O
that	O	O
any	O	O
interface	O	O
with	O	O
one	O	O
abstract	O	O
method	O	O
can	O	O
be	O	O
automatically	O	O
implemented	O	O
by	O	O
any	O	O
lambda	O	O
-	O	O
or	O	O
method	O	O
reference	O	O
-	O	O
whose	O	O
method	O	O
signature	O	O
is	O	O
a	O	O
match	O	O
for	O	O
the	O	O
one	O	O
method	O	O
on	O	O
the	O	O
interface	O	O
.	O	O
So	O	O
examining	O	O
the	O	O
Comparator	B-api_mention	B-api_mention
interface	O	O
(	O	O
simple	O	O
version	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
a	O	O
method	O	O
is	O	O
looking	O	O
for	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
then	O	O
it	O	O
'	O	O
s	O	O
essentially	O	O
looking	O	O
for	O	O
this	O	O
signature	O	O
:	O	O
int	O	O
xxx	O	O
(	O	O
args	O	O
)	O	O
;	O	O
I	O	O
use	O	O
"	O	O
xxx	O	O
"	O	O
because	O	O
the	O	O
method	O	O
name	O	O
is	O	O
not	O	O
used	O	O
for	O	O
matching	O	O
purposes	O	O
.	O	O
Therefore	O	O
,	O	O
both	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
close	O	O
enough	O	O
that	O	O
autoboxing	O	O
will	O	O
allow	O	O
this	O	O
to	O	O
appear	O	O
as	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
in	O	O
a	O	O
method	O	O
context	O	O
.	O	O
Question	O	O
-	O	O
6684665	O	O
,	O	O
answer	O	O
-	O	O
6684822	O	O
You	O	O
can	O	O
'	O	O
t	O	O
just	O	O
take	O	O
the	O	O
returned	O	O
string	O	O
and	O	O
construct	O	O
a	O	O
string	O	O
from	O	O
it	O	O
.	O	O
.	O	O
.	O	O
it	O	O
'	O	O
s	O	O
not	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
data	O	O
type	O	O
anymore	O	O
,	O	O
it	O	O
'	O	O
s	O	O
already	O	O
a	O	O
string	O	O
;	O	O
you	O	O
need	O	O
to	O	O
parse	O	O
it	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
*	O	O
*	O	O
EDIT	O	O
*	O	O
*	O	O
You	O	O
get	O	O
an	O	O
hint	O	O
of	O	O
your	O	O
problem	O	O
in	O	O
your	O	O
question	O	O
,	O	O
where	O	O
you	O	O
say	O	O
"	O	O
Whatever	O	O
I	O	O
seem	O	O
to	O	O
try	O	O
I	O	O
end	O	O
up	O	O
getting	O	O
a	O	O
byte	O	O
array	O	O
which	O	O
looks	O	O
as	O	O
follows	O	O
.	O	O
.	O	O
.	O	O
[	O	O
91	O	O
,	O	O
45	O	O
,	O	O
.	O	O
.	O	O
.	O	O
"	O	O
,	O	O
because	O	O
91	O	O
is	O	O
the	O	O
byte	O	O
value	O	O
for	O	O
[	O	O
,	O	O
so	O	O
[	O	O
91	O	O
,	O	O
45	O	O
,	O	O
.	O	O
.	O	O
.	O	O
is	O	O
the	O	O
byte	O	O
array	O	O
of	O	O
the	O	O
string	O	O
"	O	O
[	O	O
-	O	O
45	O	O
,	O	O
1	O	O
,	O	O
16	O	O
,	O	O
.	O	O
.	O	O
.	O	O
"	O	O
string	O	O
.	O	O
The	O	O
method	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
a	O	O
String	B-api_mention	B-api_mention
representation	O	O
of	O	O
the	O	O
specified	O	O
array	O	O
;	O	O
meaning	O	O
that	O	O
the	O	O
returned	O	O
value	O	O
will	O	O
not	O	O
be	O	O
a	O	O
array	O	O
anymore	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
s1	O	O
holds	O	O
the	O	O
string	O	O
representation	O	O
of	O	O
the	O	O
array	O	O
b1	O	O
,	O	O
while	O	O
s2	O	O
holds	O	O
the	O	O
string	O	O
representation	O	O
of	O	O
the	O	O
bytes	O	O
contained	O	O
in	O	O
b1	O	O
.	O	O
Now	O	O
,	O	O
in	O	O
your	O	O
problem	O	O
,	O	O
your	O	O
server	O	O
returns	O	O
a	O	O
string	O	O
similar	O	O
to	O	O
s1	O	O
,	O	O
therefore	O	O
to	O	O
get	O	O
the	O	O
array	O	O
representation	O	O
back	O	O
,	O	O
you	O	O
need	O	O
the	O	O
opposite	O	O
constructor	O	O
method	O	O
.	O	O
If	O	O
s2	O	O
.	B-api_mention	B-api_mention
getBytes	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
opposite	O	O
of	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
need	O	O
to	O	O
find	O	O
the	O	O
opposite	O	O
of	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
thus	O	O
the	O	O
code	O	O
I	O	O
pasted	O	O
in	O	O
the	O	O
first	O	O
snippet	O	O
of	O	O
this	O	O
answer	O	O
.	O	O
Question	O	O
-	O	O
17781150	O	O
,	O	O
answer	O	O
-	O	O
17781168	O	O
The	O	O
value	O	O
you	O	O
are	O	O
looking	O	O
for	O	O
is	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
#	O	O
blockquote	O	O
That	O	O
'	O	O
s	O	O
off	O	O
-	O	O
topic	O	O
for	O	O
Stack	O	O
Exchange	O	O
.	O	O
But	O	O
you	O	O
could	O	O
do	O	O
it	O	O
starting	O	O
from	O	O
the	O	O
definition	O	O
of	O	O
Java	O	O
integers	O	O
(	O	O
JLS	O	O
4	O	O
.	O	O
2	O	O
)	O	O
#	O	O
blockquote	O	O
and	O	O
#	O	O
blockquote	O	O
and	O	O
the	O	O
definition	O	O
of	O	O
the	O	O
Java	O	O
unary	O	O
'	O	O
-	O	O
'	O	O
operator	O	O
(	O	O
JLS	O	O
15	O	O
.	O	O
15	O	O
.	O	O
4	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
24603186	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
the	O	O
Collection	B-api_mention	B-api_mention
interface	O	O
was	O	O
extended	O	O
with	O	O
two	O	O
methods	O	O
that	O	O
return	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
:	O	I-api_mention
stream	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
returns	O	O
a	O	O
sequential	O	O
stream	O	O
,	O	O
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
returns	O	O
a	O	O
possibly	O	O
-	O	O
parallel	O	O
stream	O	O
.	O	O
Stream	B-api_mention	B-api_mention
itself	O	O
also	O	O
has	O	O
a	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
that	O	O
returns	O	O
an	O	O
equivalent	O	O
parallel	O	O
stream	O	O
(	O	O
either	O	O
mutating	O	O
the	O	O
current	O	O
stream	O	O
to	O	O
be	O	O
parallel	O	O
or	O	O
creating	O	O
a	O	O
new	O	O
stream	O	O
)	O	O
.	O	O
The	O	O
duplication	O	O
has	O	O
obvious	O	O
disadvantages	O	O
:	O	O
#	O	O
li	O	O
It	O	O
'	O	O
s	O	O
confusing	O	O
.	O	O
A	O	O
question	O	O
asks	O	O
whether	O	O
calling	O	O
both	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
necessary	O	O
to	O	O
be	O	O
sure	O	O
the	O	O
stream	O	O
is	O	O
parallel	O	O
,	O	O
given	O	O
that	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
return	O	O
a	O	O
sequential	O	O
stream	O	O
.	O	O
Why	O	O
does	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
exist	O	O
if	O	O
it	O	O
can	O	O
'	O	O
t	O	O
make	O	O
a	O	O
guarantee	O	O
?	O	O
The	O	O
other	O	O
way	O	O
around	O	O
is	O	O
also	O	O
confusing	O	O
-	O	O
-	O	O
if	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
a	O	O
sequential	O	O
stream	O	O
,	O	O
there	O	O
'	O	O
s	O	O
probably	O	O
a	O	O
reason	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
an	O	O
inherently	O	O
sequential	O	O
data	O	O
structure	O	O
for	O	O
which	O	O
parallel	O	O
streams	O	O
are	O	O
a	O	O
performance	O	O
trap	O	O
)	O	O
;	O	O
what	O	O
should	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
do	O	O
for	O	O
such	O	O
a	O	O
stream	O	O
?	O	O
(	O	O
UnsupportedOperationException	B-api_mention	B-api_mention
is	O	O
not	O	O
allowed	O	O
by	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
'	O	O
s	O	O
specification	O	O
.	O	O
)	O	O
#	O	O
li	O	O
Adding	O	O
methods	O	O
to	O	O
an	O	O
interface	O	O
risks	O	O
conflicts	O	O
if	O	O
an	O	O
existing	O	O
implementation	O	O
has	O	O
a	O	O
similarly	O	O
-	O	O
named	O	O
method	O	O
with	O	O
an	O	O
incompatible	O	O
return	O	O
type	O	O
.	O	O
Adding	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
addition	O	O
to	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
doubles	O	O
the	O	O
risk	O	O
for	O	O
little	O	O
gain	O	O
.	O	O
(	O	O
Note	O	O
that	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
at	O	O
one	O	O
point	O	O
just	O	O
named	O	O
parallel	B-api_mention	O
(	I-api_mention	O
)	I-api_mention	O
,	O	O
though	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
if	O	O
it	O	O
was	O	O
renamed	O	O
to	O	O
avoid	O	O
name	O	O
clashes	O	O
or	O	O
for	O	O
another	O	O
reason	O	O
.	O	O
)	O	O
Why	O	O
does	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
exist	O	O
when	O	O
calling	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
the	O	O
same	O	O
thing	O	O
?	O	O
Question	O	O
-	O	O
22463062	O	O
,	O	O
answer	O	O
-	O	O
22463063	O	O
Parsing	O	O
date	O	O
and	O	O
time	O	O
To	O	O
create	O	O
a	O	O
LocalDateTime	B-api_mention	B-api_mention
object	O	O
from	O	O
a	O	O
string	O	O
you	O	O
can	O	O
use	O	O
the	O	O
static	O	O
LocalDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
It	O	O
takes	O	O
a	O	O
string	O	O
and	O	O
a	O	O
DateTimeFormatter	B-api_mention	B-api_mention
as	O	O
parameter	O	O
.	O	O
The	O	O
DateTimeFormatter	B-api_mention	B-api_mention
is	O	O
used	O	O
to	O	O
specify	O	O
the	O	O
date	O	O
/	O	O
time	O	O
pattern	O	O
.	O	O
#	O	O
pre	O	O
Formatting	O	O
date	O	O
and	O	O
time	O	O
To	O	O
create	O	O
a	O	O
formatted	O	O
string	O	O
out	O	O
a	O	O
LocalDateTime	B-api_mention	B-api_mention
object	O	O
you	O	O
can	O	O
use	O	O
the	O	O
format	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
there	O	O
are	O	O
some	O	O
commonly	O	O
used	O	O
date	O	O
/	O	O
time	O	O
formats	O	O
predefined	O	O
as	O	O
constants	O	O
in	O	O
DateTimeFormatter	B-api_mention	B-api_mention
.	O	O
For	O	O
example	O	O
:	O	O
Using	O	O
DateTimeFormatter	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ISO	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
DATE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
TIME	I-api_mention	I-api_mention
to	O	O
format	O	O
the	O	O
LocalDateTime	B-api_mention	B-api_mention
instance	O	O
from	O	O
above	O	O
would	O	O
result	O	O
in	O	O
the	O	O
string	O	O
StringLiteral	O	O
.	O	O
The	O	O
parse	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
format	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
are	O	O
available	O	O
for	O	O
all	O	O
date	O	O
/	O	O
time	O	O
related	O	O
objects	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
LocalDate	B-api_mention	B-api_mention
or	O	O
ZonedDateTime	B-api_mention	B-api_mention
)	O	O
Question	O	O
-	O	O
32820722	O	O
,	O	O
answer	O	O
-	O	O
32821016	O	O
If	O	O
you	O	O
look	O	O
at	O	O
IntFunction	B-api_mention	B-api_mention
it	O	O
might	O	O
become	O	O
clearer	O	O
:	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
a	O	O
FunctionalInterface	O	B-api_mention
.	O	O
It	O	O
represents	O	O
a	O	O
function	O	O
that	O	O
takes	O	O
an	O	O
int	O	O
and	O	O
returns	O	O
a	O	O
value	O	O
of	O	O
type	O	O
R	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
the	O	O
return	O	O
type	O	O
R	O	O
is	O	O
also	O	O
a	O	O
FunctionalInterface	O	B-api_mention
,	O	O
namely	O	O
an	O	O
IntUnaryOperator	O	B-api_mention
.	O	O
So	O	O
the	O	O
first	O	O
(	O	O
outer	O	O
)	O	O
function	O	O
itself	O	O
returns	O	O
a	O	O
function	O	O
.	O	O
In	O	O
this	O	O
case	O	O
:	O	O
When	O	O
applied	O	O
to	O	O
an	O	O
int	O	O
,	O	O
curriedAdd	O	O
is	O	O
supposed	O	O
to	O	O
return	O	O
a	O	O
function	O	O
that	O	O
again	O	O
takes	O	O
an	O	O
int	O	O
(	O	O
and	O	O
returns	O	O
again	O	O
int	O	O
,	O	O
because	O	O
that	O	O
'	O	O
s	O	O
what	O	O
IntUnaryOperator	O	B-api_mention
does	O	O
)	O	O
.	O	O
In	O	O
functional	O	O
programming	O	O
it	O	O
is	O	O
common	O	O
to	O	O
write	O	O
the	O	O
type	O	O
of	O	O
a	O	O
function	O	O
as	O	O
param	O	O
-	O	O
>	O	O
return	O	O
_	O	O
value	O	O
and	O	O
you	O	O
see	O	O
exactly	O	O
that	O	O
here	O	O
.	O	O
So	O	O
the	O	O
type	O	O
of	O	O
curriedAdd	O	O
is	O	O
int	O	O
-	O	O
>	O	O
int	O	O
-	O	O
>	O	O
int	O	O
(	O	O
or	O	O
int	O	O
-	O	O
>	O	O
(	O	O
int	O	O
-	O	O
>	O	O
int	O	O
)	O	O
if	O	O
you	O	O
like	O	O
that	O	O
better	O	O
)	O	O
.	O	O
Java	O	O
8	O	O
'	O	O
s	O	O
lambda	O	O
syntax	O	O
goes	O	O
along	O	O
with	O	O
this	O	O
.	O	O
To	O	O
define	O	O
such	O	O
a	O	O
function	O	O
,	O	O
you	O	O
write	O	O
a	O	O
-	O	O
>	O	O
b	O	O
-	O	O
>	O	O
a	O	O
+	O	O
b	O	O
which	O	O
is	O	O
very	O	O
much	O	O
similar	O	O
to	O	O
actual	O	O
lambda	O	O
calculus	O	O
:	O	O
λ	O	O
a	O	O
λ	O	O
b	O	O
a	O	O
+	O	O
b	O	O
λ	O	O
b	O	O
a	O	O
+	O	O
b	O	O
is	O	O
a	O	O
function	O	O
that	O	O
takes	O	O
a	O	O
single	O	O
parameter	O	O
b	O	O
and	O	O
returns	O	O
a	O	O
value	O	O
(	O	O
the	O	O
sum	O	O
)	O	O
.	O	O
λ	O	O
a	O	O
λ	O	O
b	O	O
a	O	O
+	O	O
b	O	O
is	O	O
a	O	O
function	O	O
that	O	O
accepts	O	O
a	O	O
single	O	O
parameter	O	O
a	O	O
and	O	O
returns	O	O
another	O	O
function	O	O
of	O	O
a	O	O
single	O	O
parameter	O	O
.	O	O
λ	O	O
a	O	O
λ	O	O
b	O	O
a	O	O
+	O	O
b	O	O
returns	O	O
λ	O	O
b	O	O
a	O	O
+	O	O
b	O	O
with	O	O
a	O	O
set	O	O
to	O	O
the	O	O
parameter	O	O
value	O	O
.	O	O
Question	O	O
-	O	O
9749746	O	O
How	O	O
do	O	O
atomic	B-api_mention	O
/	O	O
volatile	O	O
/	O	O
synchronized	O	O
work	O	O
internally	O	O
?	O	O
What	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
the	O	O
following	O	O
code	O	O
blocks	O	O
?	O	O
Code	O	O
1	O	O
#	O	O
pre	O	O
Code	O	O
2	O	O
#	O	O
pre	O	O
Code	O	O
3	O	O
#	O	O
pre	O	O
Does	O	O
volatile	O	O
work	O	O
in	O	O
the	O	O
following	O	O
way	O	O
?	O	O
Is	O	O
#	O	O
pre	O	O
equivalent	O	O
to	O	O
#	O	O
pre	O	O
I	O	O
think	O	O
that	O	O
two	O	O
threads	O	O
cannot	O	O
enter	O	O
a	O	O
synchronized	O	O
block	O	O
at	O	O
the	O	O
same	O	O
time	O	O
.	O	O
.	O	O
.	O	O
am	O	O
I	O	O
right	O	O
?	O	O
If	O	O
this	O	O
is	O	O
true	O	O
then	O	O
how	O	O
does	O	O
atomic	B-api_mention	O
.	I-api_mention	B-api_mention
incrementAndGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
work	O	O
without	O	O
synchronized	O	O
?	O	O
And	O	O
is	O	O
it	O	O
thread	O	O
-	O	O
safe	O	O
?	O	O
And	O	O
what	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
internal	O	O
reading	O	O
and	O	O
writing	O	O
to	O	O
volatile	O	O
variables	O	O
/	O	O
atomic	B-api_mention	O
variables	O	O
?	O	O
I	O	O
read	O	O
in	O	O
some	O	O
article	O	O
that	O	O
the	O	O
thread	O	O
has	O	O
a	O	O
local	O	O
copy	O	O
of	O	O
the	O	O
variables	O	O
-	O	O
what	O	O
is	O	O
that	O	O
?	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26886202	O	O
You	O	O
are	O	O
performing	O	O
multiple	O	O
search	O	O
-	O	O
replace	O	O
operations	O	O
on	O	O
the	O	O
input	O	O
.	O	O
This	O	O
will	O	O
produce	O	O
undesired	O	O
results	O	O
when	O	O
the	O	O
replacement	O	O
strings	O	O
contain	O	O
search	O	O
strings	O	O
.	O	O
Consider	O	O
the	O	O
foo	O	O
-	O	O
>	O	O
bar	O	O
,	O	O
bar	O	O
-	O	O
foo	O	O
example	O	O
,	O	O
here	O	O
are	O	O
the	O	O
results	O	O
for	O	O
each	O	O
iteration	O	O
:	O	O
#	O	O
li	O	O
Once	O	O
upon	O	O
a	O	O
time	O	O
,	O	O
there	O	O
was	O	O
a	O	O
foo	O	O
and	O	O
a	O	O
bar	O	O
.	O	O
(	O	O
input	O	O
)	O	O
#	O	O
li	O	O
Once	O	O
upon	O	O
a	O	O
time	O	O
,	O	O
there	O	O
was	O	O
a	O	O
bar	O	O
and	O	O
a	O	O
bar	O	O
.	O	O
(	O	O
foo	O	O
-	O	O
>	O	O
bar	O	O
)	O	O
#	O	O
li	O	O
Once	O	O
upon	O	O
a	O	O
time	O	O
,	O	O
there	O	O
was	O	O
a	O	O
foo	O	O
and	O	O
a	O	O
foo	O	O
.	O	O
(	O	O
bar	O	O
-	O	O
>	O	O
foo	O	O
,	O	O
output	O	O
)	O	O
You	O	O
need	O	O
to	O	O
perform	O	O
the	O	O
replacement	O	O
in	O	O
one	O	O
iteration	O	O
without	O	O
going	O	O
back	O	O
.	O	O
A	O	O
brute	O	O
-	O	O
force	O	O
solution	O	O
is	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
li	O	O
Search	O	O
the	O	O
input	O	O
from	O	O
current	O	O
position	O	O
to	O	O
end	O	O
for	O	O
multiple	O	O
search	O	O
strings	O	O
until	O	O
a	O	O
match	O	O
is	O	O
found	O	O
#	O	O
li	O	O
Replace	O	O
the	O	O
matched	O	O
search	O	O
string	O	O
with	O	O
corresponding	O	O
replace	O	O
string	O	O
#	O	O
li	O	O
Set	O	O
current	O	O
position	O	O
to	O	O
the	O	O
next	O	O
character	O	O
after	O	O
the	O	O
replaced	O	O
string	O	O
#	O	O
li	O	O
Repeat	O	O
A	O	O
function	O	O
such	O	O
as	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
indexOfAny	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
>	O	O
int	O	O
[	O	O
]	O	O
{	O	O
index	O	O
,	O	O
whichString	O	O
}	O	O
would	O	O
be	O	O
useful	O	O
.	O	O
Here	O	O
is	O	O
an	O	O
example	O	O
(	O	O
not	O	O
the	O	O
most	O	O
efficient	O	O
one	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Some	O	O
tests	O	O
:	O	O
#	O	O
pre	O	O
Demo	O	O
on	O	O
IDEONE	O	O
Demo	O	O
on	O	O
IDEONE	O	O
,	O	O
alternate	O	O
code	O	O
Question	O	O
-	O	O
33358248	O	O
Currently	O	O
the	O	O
BlendModes	O	B-api_mention
(	O	O
Subtract	O	O
,	O	O
Exclusion	O	O
etc	O	O
)	O	O
use	O	O
the	O	O
LauncherImage	O	B-api_mention
as	O	O
the	O	O
mask	O	O
.	O	O
Can	O	O
I	O	O
apply	O	O
these	O	O
BlendModes	O	B-api_mention
to	O	O
a	O	O
ColorMatrix	O	B-api_mention
?	O	O
I	O	O
'	O	O
m	O	O
using	O	O
the	O	O
GPUImageLibrary	O	O
colorMatrix	O	O
[	O	O
0	O	O
.	O	O
393	O	O
,	O	O
0	O	O
.	O	O
7689999	O	O
,	O	O
0	O	O
.	O	O
18899999	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
.	O	O
349	O	O
,	O	O
0	O	O
.	O	O
6859999	O	O
,	O	O
0	O	O
.	O	O
16799999	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
.	O	O
272	O	O
,	O	O
0	O	O
.	O	O
5339999	O	O
,	O	O
0	O	O
.	O	O
13099999	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
1	O	O
,	O	O
0	O	O
]	O	O
;	O	O
SubtractBlendFilter	O	B-api_mention
.	O	O
java	O	O
#	O	O
pre	O	O
GPUIMageTwoInputFilter	O	O
.	O	O
java	O	O
#	O	O
pre	O	O
My	O	O
guess	O	O
it	O	O
involves	O	O
changing	O	O
something	O	O
with	O	O
String	B-api_mention	B-api_mention
SUBTRACT	O	O
_	O	O
BLEND	O	O
_	O	O
GRAGMENT	O	O
_	O	O
SHADER	O	O
&	O	O
String	B-api_mention	B-api_mention
VERTEX	O	O
_	O	O
SHADER	O	O
.	O	O
Question	O	O
-	O	O
27504925	O	O
,	O	O
answer	O	O
-	O	O
27505121	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
point	O	O
out	O	O
this	O	O
article	O	O
.	O	O
It	O	O
seems	O	O
as	O	O
though	O	O
arrays	O	O
and	O	O
objects	O	O
follow	O	O
different	O	O
opcodes	O	O
.	O	O
I	O	O
can	O	O
'	O	O
t	O	O
honestly	O	O
summarize	O	O
it	O	O
more	O	O
than	O	O
that	O	O
however	O	O
it	O	O
seems	O	O
,	O	O
arrays	O	O
are	O	O
simply	O	O
not	O	O
treated	O	O
as	O	O
Objects	B-api_mention	B-api_mention
like	O	O
we	O	O
'	O	O
re	O	O
normally	O	O
used	O	O
to	O	O
so	O	O
they	O	O
don	O	O
'	O	O
t	O	O
inherit	O	O
Object	B-api_mention	B-api_mention
methods	O	O
.	O	O
Full	O	O
credits	O	O
to	O	O
the	O	O
author	O	O
of	O	O
that	O	O
post	O	O
as	O	O
it	O	O
'	O	O
s	O	O
a	O	O
very	O	O
interesting	O	O
read	O	O
,	O	O
both	O	O
short	O	O
&	O	O
detailed	O	O
.	O	O
Upon	O	O
further	O	O
digging	O	O
into	O	O
the	O	O
topic	O	O
via	O	O
multiple	O	O
sources	O	O
I	O	O
'	O	O
ve	O	O
decided	O	O
to	O	O
give	O	O
a	O	O
more	O	O
elaborate	O	O
version	O	O
of	O	O
my	O	O
previous	O	O
answer	O	O
.	O	O
The	O	O
first	O	O
thing	O	O
to	O	O
note	O	O
that	O	O
instantiation	O	O
of	O	O
Objects	B-api_mention	B-api_mention
and	O	O
Arrays	B-api_mention	B-api_mention
are	O	O
very	O	O
different	O	O
within	O	O
the	O	O
JVM	O	O
,	O	O
their	O	O
follow	O	O
their	O	O
respective	O	O
bytecode	O	O
.	O	O
Object	B-api_mention	B-api_mention
:	O	O
Object	B-api_mention	B-api_mention
instantiation	O	O
follows	O	O
a	O	O
simple	O	O
Opcode	O	O
new	O	O
which	O	O
is	O	O
a	O	O
combination	O	O
of	O	O
two	O	O
operands	O	O
-	O	O
indexbyte1	O	O
&	O	O
indexbyte2	O	O
.	O	O
Once	O	O
instantiated	O	O
the	O	O
JVM	O	O
pushes	O	O
the	O	O
reference	O	O
to	O	O
this	O	O
object	O	O
onto	O	O
the	O	O
stack	O	O
.	O	O
This	O	O
occurs	O	O
for	O	O
all	O	O
objects	O	O
irrespective	O	O
of	O	O
their	O	O
types	O	O
.	O	O
Arrays	B-api_mention	B-api_mention
:	O	O
Array	B-api_mention	O
Opcodes	O	O
(	O	O
regarding	O	O
instantiation	O	O
of	O	O
an	O	O
array	O	O
)	O	O
however	O	O
are	O	O
divided	O	O
into	O	O
three	O	O
different	O	O
codes	O	O
.	O	O
#	O	O
blockquote	O	O
newarray	O	O
opcode	O	O
is	O	O
used	O	O
when	O	O
creating	O	O
arrays	O	O
that	O	O
involve	O	O
primitive	O	O
datatypes	O	O
(	O	O
byte	O	O
short	O	O
char	O	O
int	O	O
long	O	O
float	O	O
double	O	O
boolean	O	O
)	O	O
rather	O	O
than	O	O
object	O	O
references	O	O
.	O	O
#	O	O
blockquote	O	O
anewarray	O	O
opcode	O	O
is	O	O
used	O	O
when	O	O
creating	O	O
arrays	O	O
of	O	O
object	O	O
references	O	O
#	O	O
blockquote	O	O
multianewarray	O	O
instruction	O	O
is	O	O
used	O	O
when	O	O
allocating	O	O
multi	O	O
-	O	O
dimensional	O	O
arrays	O	O
Object	B-api_mention	B-api_mention
can	O	O
be	O	O
a	O	O
class	O	O
instance	O	O
or	O	O
an	O	O
array	O	O
.	O	O
Take	O	O
from	O	O
Oracle	O	O
Docs	O	O
#	O	O
blockquote	O	O
BUT	O	O
#	O	O
blockquote	O	O
This	O	O
goes	O	O
hand	O	O
in	O	O
hand	O	O
with	O	O
the	O	O
information	O	O
regarding	O	O
the	O	O
opcodes	O	O
.	O	O
Arrays	O	B-api_mention
are	O	O
simply	O	O
not	O	O
developed	O	O
to	O	O
be	O	O
class	O	O
interfaces	O	O
but	O	O
are	O	O
instead	O	O
explicitly	O	O
created	O	O
by	O	O
array	O	O
creation	O	O
expression	O	O
thus	O	O
naturally	O	O
wouldn	O	O
'	O	O
t	O	O
implicitly	O	O
be	O	O
able	O	O
to	O	O
inherit	O	O
and	O	O
/	O	O
or	O	O
override	O	O
Object	B-api_mention	B-api_mention
.	O	O
As	O	O
we	O	O
have	O	O
seen	O	O
,	O	O
it	O	O
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
the	O	O
fact	O	O
that	O	O
arrays	O	O
may	O	O
hold	O	O
primitive	O	O
datatypes	O	O
.	O	O
After	O	O
giving	O	O
it	O	O
some	O	O
thought	O	O
though	O	O
,	O	O
it	O	O
isn	O	O
'	O	O
t	O	O
very	O	O
common	O	O
to	O	O
come	O	O
across	O	O
situations	O	O
where	O	O
one	O	O
might	O	O
want	O	O
to	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
however	O	O
was	O	O
still	O	O
a	O	O
very	O	O
interesting	O	O
question	O	O
to	O	O
try	O	O
and	O	O
answer	O	O
.	O	O
Resources	O	O
:	O	O
Oracle	O	O
-	O	O
Docs	O	O
chapter	O	O
4	O	O
.	O	O
3	O	O
.	O	O
1	O	O
Oracle	O	O
-	O	O
Docs	O	O
chapter	O	O
15	O	O
.	O	O
10	O	O
.	O	O
1	O	O
Artima	O	O
-	O	O
UnderTheHood	O	O
Question	O	O
-	O	O
4576352	O	O
,	O	O
answer	O	O
-	O	O
11325546	O	O
You	O	O
can	O	O
use	O	O
str	O	O
=	O	O
str	O	O
.	B-api_mention	B-api_mention
replace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
as	O	O
mentioned	O	O
before	O	O
and	O	O
you	O	O
will	O	O
be	O	O
fine	O	O
.	O	O
For	O	O
your	O	O
information	O	O
CharLiteral	O	O
is	O	O
not	O	O
an	O	O
empty	O	O
(	O	O
or	O	O
a	O	O
valid	O	O
)	O	O
character	O	O
but	O	O
CharLiteral	O	O
is	O	O
.	O	O
So	O	O
you	O	O
could	O	O
use	O	O
str	O	O
=	O	O
str	O	O
.	B-api_mention	B-api_mention
replace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
.	O	O
Question	O	O
-	O	O
32676771	O	O
,	O	O
answer	O	O
-	O	O
32677400	O	O
Despite	O	O
of	O	O
the	O	O
fact	O	O
that	O	O
there	O	O
is	O	O
no	O	O
AtomicDouble	B-api_mention	B-api_mention
or	O	O
AtomicDoubleArray	B-api_mention	B-api_mention
in	O	O
java	O	O
,	O	O
you	O	O
can	O	O
easily	O	O
create	O	O
your	O	O
own	O	O
based	O	O
on	O	O
AtomicLongArray	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
I	O	O
use	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
doubleToLongBits	I-api_mention	I-api_mention
and	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
longBitsToDouble	I-api_mention	I-api_mention
to	O	O
store	O	O
Doubles	B-api_mention	O
as	O	O
Longs	B-api_mention	O
in	O	O
AtomicLongArray	B-api_mention	B-api_mention
.	O	O
They	O	O
both	O	O
have	O	O
the	O	O
same	O	O
size	O	O
in	O	O
bits	O	O
,	O	O
so	O	O
precision	O	O
is	O	O
not	O	O
lost	O	O
(	O	O
except	O	O
for	O	O
-	O	O
NaN	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
it	O	O
is	O	O
important	O	O
)	O	O
.	O	O
In	O	O
Java	O	O
8	O	O
the	O	O
implementation	O	O
of	O	O
add	O	O
can	O	O
be	O	O
even	O	O
easier	O	O
,	O	O
as	O	O
you	O	O
can	O	O
use	O	O
accumulateAndGet	B-api_mention	B-api_mention
method	O	O
of	O	O
AtomicLongArray	B-api_mention	B-api_mention
that	O	O
was	O	O
added	O	O
in	O	O
java	O	O
1	O	O
.	O	O
8	O	O
.	O	O
Upd	O	O
:	O	O
It	O	O
appears	O	O
that	O	O
I	O	O
virtually	O	O
re	O	O
-	O	O
implemented	O	O
guava	O	O
'	O	O
s	O	O
AtomicDoubleArray	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
27949213	O	O
,	O	O
answer	O	O
-	O	O
27949367	O	O
The	O	O
strategy	O	O
they	O	O
describe	O	O
is	O	O
to	O	O
simply	O	O
reuse	O	O
the	O	O
internal	O	O
character	O	O
array	O	O
of	O	O
one	O	O
String	B-api_mention	B-api_mention
in	O	O
possibly	O	O
many	O	O
equal	O	O
Strings	O	B-api_mention
.	O	O
There	O	O
'	O	O
s	O	O
no	O	O
need	O	O
for	O	O
each	O	O
String	B-api_mention	B-api_mention
to	O	O
have	O	O
its	O	O
own	O	O
copy	O	O
if	O	O
they	O	O
are	O	O
equal	O	O
.	O	O
In	O	O
order	O	O
to	O	O
more	O	O
quickly	O	O
determine	O	O
if	O	O
2	O	O
strings	O	O
are	O	O
equal	O	O
,	O	O
the	O	O
hash	O	O
code	O	O
is	O	O
used	O	O
as	O	O
a	O	O
first	O	O
step	O	O
,	O	O
as	O	O
it	O	O
is	O	O
a	O	O
fast	O	O
way	O	O
to	O	O
determine	O	O
if	O	O
Strings	O	O
may	O	O
be	O	O
equal	O	O
.	O	O
Hence	O	O
their	O	O
statement	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
to	O	O
make	O	O
a	O	O
certain	O	O
(	O	O
but	O	O
slower	O	O
)	O	O
comparison	O	O
for	O	O
equality	O	O
once	O	O
possible	O	O
equality	O	O
has	O	O
been	O	O
determined	O	O
using	O	O
the	O	O
hash	O	O
code	O	O
.	O	O
In	O	O
the	O	O
end	O	O
,	O	O
equal	O	O
Strings	O	O
will	O	O
share	O	O
a	O	O
single	O	O
underlying	O	O
char	O	O
array	O	O
.	O	O
Java	O	O
has	O	O
had	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
a	O	O
long	O	O
time	O	O
,	O	O
to	O	O
do	O	O
more	O	O
or	O	O
less	O	O
the	O	O
same	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
save	O	O
memory	O	O
by	O	O
deduplicating	O	O
equal	O	O
Strings	O	O
)	O	O
.	O	O
What	O	O
'	O	O
s	O	O
novel	O	O
about	O	O
this	O	O
is	O	O
that	O	O
it	O	O
happens	O	O
during	O	O
garbage	O	O
collection	O	O
time	O	O
and	O	O
can	O	O
be	O	O
externally	O	O
controlled	O	O
.	O	O
Question	O	O
-	O	O
18448671	O	O
,	O	O
answer	O	O
-	O	O
18448685	O	O
If	O	O
you	O	O
want	O	O
to	O	O
modify	O	O
your	O	O
List	B-api_mention	B-api_mention
during	O	O
traversal	O	O
,	O	O
then	O	O
you	O	O
need	O	O
to	O	O
use	O	O
the	O	O
Iterator	B-api_mention	B-api_mention
.	O	O
And	O	O
then	O	O
you	O	O
can	O	O
use	O	O
iterator	O	O
.	B-api_mention	B-api_mention
remove	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
remove	O	O
the	O	O
elements	O	O
during	O	O
traversal	O	O
.	O	O
Question	O	O
-	O	O
4818699	O	O
,	O	O
answer	O	O
-	O	O
4818916	O	O
The	O	O
primary	O	O
use	O	O
of	O	O
AtomicInteger	B-api_mention	B-api_mention
is	O	O
when	O	O
you	O	O
are	O	O
in	O	O
a	O	O
multithreaded	O	O
context	O	O
and	O	O
you	O	O
need	O	O
to	O	O
perform	O	O
thread	O	O
safe	O	O
operations	O	O
on	O	O
an	O	O
integer	O	O
without	O	O
using	O	O
synchronized	O	O
.	O	O
The	O	O
assignation	O	O
and	O	O
retrieval	O	O
on	O	O
the	O	O
primitive	O	O
type	O	O
int	O	O
are	O	O
already	O	O
atomic	O	O
but	O	O
AtomicInteger	B-api_mention	B-api_mention
comes	O	O
with	O	O
many	O	O
operations	O	O
which	O	O
are	O	O
not	O	O
atomic	O	O
on	O	O
int	O	O
.	O	O
The	O	O
simplest	O	O
are	O	O
the	O	O
getAndXXX	O	O
or	O	O
xXXAndGet	O	O
.	O	O
For	O	O
instance	O	O
getAndIncrement	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
an	O	O
atomic	O	O
equivalent	O	O
to	O	O
i	O	O
+	O	O
+	O	O
which	O	O
is	O	O
not	O	O
atomic	O	O
because	O	O
it	O	O
is	O	O
actually	O	O
a	O	O
short	O	O
cut	O	O
for	O	O
three	O	O
operations	O	O
:	O	O
retrieval	O	O
,	O	O
addition	O	O
and	O	O
assignation	O	B-api_mention
.	O	I-api_mention
compareAndSet	B-api_mention	I-api_mention
is	O	O
very	O	O
useful	O	O
to	O	O
implements	O	O
semaphores	O	O
,	O	O
locks	O	O
,	O	O
latches	O	O
,	O	O
etc	O	O
.	O	O
Using	O	O
the	O	O
AtomicInteger	B-api_mention	B-api_mention
is	O	O
faster	O	O
and	O	O
more	O	O
readable	O	O
than	O	O
performing	O	O
the	O	O
same	O	O
using	O	O
synchronization	O	O
.	O	O
A	O	O
simple	O	O
test	O	O
:	O	O
#	O	O
pre	O	O
On	O	O
my	O	O
PC	O	O
with	O	O
Java	O	O
1	O	O
.	O	O
6	O	O
the	O	O
atomic	O	O
test	O	O
runs	O	O
in	O	O
3	O	O
seconds	O	O
while	O	O
the	O	O
synchronized	O	O
one	O	O
runs	O	O
in	O	O
about	O	O
5	O	O
.	O	O
5	O	O
seconds	O	O
.	O	O
The	O	O
problem	O	O
here	O	O
is	O	O
that	O	O
the	O	O
operation	O	O
to	O	O
synchronize	O	O
(	O	O
notAtomic	O	O
+	O	O
+	O	O
)	O	O
is	O	O
really	O	O
short	O	O
.	O	O
So	O	O
the	O	O
cost	O	O
of	O	O
the	O	O
synchronization	O	O
is	O	O
really	O	O
important	O	O
compared	O	O
to	O	O
the	O	O
operation	O	O
.	O	O
Beside	O	O
atomicity	O	O
AtomicInteger	B-api_mention	B-api_mention
can	O	O
be	O	O
use	O	O
as	O	O
a	O	O
mutable	O	O
version	O	O
of	O	O
Integer	B-api_mention	B-api_mention
for	O	O
instance	O	O
in	O	O
Map	B-api_mention	O
s	O	O
as	O	O
values	O	O
.	O	O
Question	O	O
-	O	O
22740464	O	O
I	O	O
can	O	O
add	O	O
streams	O	O
or	O	O
extra	O	O
elements	O	O
,	O	O
like	O	O
this	O	O
:	O	O
Stream	B-api_mention	B-api_mention
stream	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	O	I-api_mention
stream1	O	I-api_mention
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
And	O	O
I	O	O
can	O	O
add	O	O
new	O	O
stuff	O	O
as	O	O
I	O	O
go	O	O
,	O	O
like	O	O
this	O	O
:	O	O
Stream	B-api_mention	B-api_mention
stream	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
this	O	O
is	O	O
ugly	O	O
,	O	O
because	O	O
concat	B-api_mention	O
is	O	O
static	O	O
.	O	O
If	O	O
concat	B-api_mention	O
were	O	O
an	O	O
instance	O	O
method	O	O
,	O	O
the	O	O
above	O	O
examples	O	O
would	O	O
be	O	O
much	O	O
easier	O	O
to	O	O
read	O	O
:	O	O
Stream	B-api_mention	B-api_mention
stream	O	O
=	O	O
stream1	O	O
.	B-api_mention	B-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
And	O	O
Stream	B-api_mention	B-api_mention
stream	O	O
=	O	O
stream1	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
concat	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
My	O	O
question	O	O
is	O	O
:	O	O
1	O	O
)	O	O
Is	O	O
there	O	O
any	O	O
good	O	O
reason	O	O
why	O	O
concat	B-api_mention	O
is	O	O
static	O	O
?	O	O
Or	O	O
is	O	O
there	O	O
some	O	O
equivalent	O	O
instance	O	O
method	O	O
I	O	O
'	O	O
m	O	O
missing	O	O
?	O	O
2	O	O
)	O	O
In	O	O
any	O	O
case	O	O
,	O	O
is	O	O
there	O	O
a	O	O
better	O	O
way	O	O
of	O	O
doing	O	O
this	O	O
?	O	O
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
38560612	O	O
This	O	O
is	O	O
part	O	O
of	O	O
JDK	O	O
9	O	O
in	O	O
the	O	O
form	O	O
of	O	O
or	O	O
,	O	O
which	O	O
takes	O	O
a	O	O
Supplier	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Your	O	O
example	O	O
would	O	O
then	O	O
be	O	O
:	O	O
return	O	O
serviceA	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
or	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
or	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
For	O	O
details	O	O
see	O	O
the	O	O
(	O	O
preliminary	O	O
)	O	O
Javadoc	O	O
or	O	O
this	O	O
post	O	O
I	O	O
wrote	O	O
.	O	O
Question	O	O
-	O	O
6652687	O	O
,	O	O
answer	O	O
-	O	O
6652772	O	O
Use	O	O
String	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
trim	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
or	O	O
String	B-api_mention	B-api_mention
allRemoved	O	O
=	O	O
myString	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
trim	O	O
both	O	O
the	O	O
end	O	O
.	O	O
For	O	O
left	O	O
trim	O	O
:	O	O
String	B-api_mention	B-api_mention
leftRemoved	O	O
=	O	O
myString	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
right	O	O
trim	O	O
:	O	O
String	B-api_mention	B-api_mention
rightRemoved	O	O
=	O	O
myString	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
11408427	O	O
,	O	O
answer	O	O
-	O	O
11408482	O	O
The	O	O
Java	O	O
language	O	O
provides	O	O
special	O	O
support	O	O
for	O	O
the	O	O
string	O	O
concatenation	O	O
operator	O	O
(	O	O
+	O	O
)	O	O
and	O	O
for	O	O
conversion	O	O
of	O	O
other	O	O
objects	O	O
to	O	O
strings	O	O
.	O	O
String	B-api_mention	B-api_mention
concatenation	O	O
is	O	O
implemented	O	O
through	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
(	O	O
or	O	O
StringBuffer	B-api_mention	B-api_mention
)	O	O
class	O	O
and	O	O
its	O	O
append	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29097694	O	O
Please	O	O
do	O	O
not	O	O
vote	O	O
.	O	O
I	O	O
do	O	O
not	O	O
have	O	O
enough	O	O
place	O	O
to	O	O
explain	O	O
this	O	O
in	O	O
comments	O	O
.	O	O
This	O	O
is	O	O
a	O	O
solution	O	O
with	O	O
a	O	O
Stream	B-api_mention	B-api_mention
and	O	O
a	O	O
foreach	O	O
but	O	O
this	O	O
is	O	O
strictly	O	O
equivalent	O	O
to	O	O
Alexis	O	O
'	O	O
s	O	O
solution	O	O
or	O	O
a	O	O
foreach	O	O
loop	O	O
(	O	O
and	O	O
less	O	O
clear	O	O
,	O	O
and	O	O
I	O	O
could	O	O
not	O	O
get	O	O
rid	O	O
of	O	O
the	O	O
copy	O	O
constructor	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
understand	O	O
that	O	O
you	O	O
want	O	O
to	O	O
find	O	O
a	O	O
more	O	O
elegant	O	O
solution	O	O
with	O	O
Java	O	O
8	O	O
but	O	O
I	O	O
truly	O	O
think	O	O
that	O	O
it	O	O
has	O	O
not	O	O
been	O	O
designed	O	O
for	O	O
this	O	O
case	O	O
.	O	O
And	O	O
as	O	O
said	O	O
by	O	O
Mr	O	O
spoon	O	O
,	O	O
highly	O	O
prefer	O	O
the	O	O
naive	O	O
way	O	O
in	O	O
this	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
22409102	O	O
,	O	O
answer	O	O
-	O	O
22501695	O	O
The	O	O
approach	O	O
used	O	O
by	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
is	O	O
similar	O	O
to	O	O
what	O	O
Jesper	O	O
proposes	O	O
but	O	O
a	O	O
little	O	O
clearer	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
30384955	O	O
,	O	O
answer	O	O
-	O	O
30385298	O	O
Replacing	O	O
the	O	O
definition	O	O
of	O	O
TbinList	O	O
with	O	O
class	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
extends	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
{	O	O
}	O	O
and	O	O
defining	O	O
test2	O	O
with	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
test2	O	O
=	O	O
new	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
(	O	O
args	O	O
)	O	O
;	O	O
instead	O	O
would	O	O
solve	O	O
the	O	O
issue	O	O
.	O	O
With	O	O
your	O	O
definition	O	O
you	O	O
'	O	O
re	O	O
ending	O	O
up	O	O
with	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
where	O	O
T	O	O
is	O	O
any	O	O
fixed	O	O
class	O	O
extending	O	O
Base	O	O
.	O	O
Question	O	O
-	O	O
27949213	O	O
Since	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
(	O	O
like	O	O
other	O	O
languages	O	O
)	O	O
consumes	O	O
a	O	O
lot	O	O
of	O	O
memory	O	O
because	O	O
each	O	O
character	O	O
consumes	O	O
two	O	O
bytes	O	O
,	O	O
Java	O	O
8	O	O
has	O	O
introduced	O	O
a	O	O
new	O	O
feature	O	O
called	O	O
String	B-api_mention	B-api_mention
Deduplication	O	O
which	O	O
takes	O	O
advantage	O	O
of	O	O
the	O	O
fact	O	O
that	O	O
the	O	O
char	O	O
arrays	O	O
are	O	O
internal	O	O
to	O	O
strings	O	O
and	O	O
final	O	O
,	O	O
so	O	O
the	O	O
JVM	O	O
can	O	O
mess	O	O
around	O	O
with	O	O
them	O	O
.	O	O
I	O	O
have	O	O
read	O	O
this	O	O
example	O	O
so	O	O
far	O	O
but	O	O
since	O	O
I	O	O
am	O	O
not	O	O
a	O	O
pro	O	O
java	O	O
coder	O	O
,	O	O
I	O	O
am	O	O
having	O	O
a	O	O
hard	O	O
time	O	O
grasping	O	O
the	O	O
concept	O	O
.	O	O
Here	O	O
is	O	O
what	O	O
it	O	O
says	O	O
,	O	O
#	O	O
blockquote	O	O
My	O	O
First	O	O
question	O	O
,	O	O
There	O	O
is	O	O
still	O	O
a	O	O
lack	O	O
of	O	O
resources	O	O
on	O	O
this	O	O
topic	O	O
since	O	O
it	O	O
is	O	O
recently	O	O
added	O	O
in	O	O
Java	O	O
8	O	O
update	O	O
20	O	O
,	O	O
could	O	O
anyone	O	O
here	O	O
share	O	O
some	O	O
practical	O	O
examples	O	O
on	O	O
how	O	O
it	O	O
help	O	O
in	O	O
reducing	O	O
the	O	O
memory	O	O
consumed	O	O
by	O	O
String	B-api_mention	B-api_mention
in	O	O
Java	O	O
?	O	O
Edit	O	O
:	O	O
The	O	O
above	O	O
link	O	O
says	O	O
,	O	O
#	O	O
blockquote	O	O
My	O	O
2nd	O	O
question	O	O
,	O	O
If	O	O
hash	O	O
code	O	O
of	O	O
two	O	O
String	B-api_mention	B-api_mention
are	O	O
same	O	O
then	O	O
the	O	O
Strings	B-api_mention	O
are	O	O
already	O	O
the	O	O
same	O	O
,	O	O
then	O	O
why	O	O
compare	O	O
them	O	O
char	O	O
by	O	O
char	O	O
once	O	O
it	O	O
is	O	O
found	O	O
that	O	O
the	O	O
two	O	O
String	B-api_mention	B-api_mention
have	O	O
same	O	O
hash	O	O
code	O	O
?	O	O
Question	O	O
-	O	O
4818699	O	O
,	O	O
answer	O	O
-	O	O
4818753	O	O
There	O	O
are	O	O
two	O	O
main	O	O
uses	O	O
of	O	O
AtomicInteger	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
As	O	O
an	O	O
atomic	O	O
counter	O	O
(	O	O
incrementAndGet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
etc	O	O
)	O	O
that	O	O
can	O	O
be	O	O
used	O	O
by	O	O
many	O	O
threads	O	O
concurrently	O	O
#	O	O
li	O	O
As	O	O
a	O	O
primitive	O	O
that	O	O
supports	O	O
compare	O	O
-	O	O
and	O	O
-	O	O
swap	O	O
instruction	O	O
(	O	O
compareAndSet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
to	O	O
implement	O	O
non	O	O
-	O	O
blocking	O	O
algorithms	O	O
.	O	O
Here	O	O
is	O	O
an	O	O
example	O	O
of	O	O
non	O	O
-	O	O
blocking	O	O
random	O	O
number	O	O
generator	O	O
from	O	O
Brian	O	O
G	O	O
ö	O	O
etz	O	O
'	O	O
s	O	O
Java	O	O
Concurrency	O	O
In	O	O
Practice	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
it	O	O
basically	O	O
works	O	O
almost	O	O
the	O	O
same	O	O
way	O	O
as	O	O
incrementAndGet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
performs	O	O
arbitrary	O	O
calculation	O	O
(	O	O
calculateNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
instead	O	O
of	O	O
increment	O	O
(	O	O
and	O	O
processes	O	O
the	O	O
result	O	O
before	O	O
return	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
16636899	O	O
I	O	O
feel	O	O
that	O	O
I	O	O
need	O	O
to	O	O
extend	O	O
my	O	O
comment	O	O
a	O	O
bit	O	O
.	O	O
.	O	O
.	O	O
About	O	O
paradigm	O	O
\	O	O
style	O	O
That	O	O
'	O	O
s	O	O
probably	O	O
the	O	O
most	O	O
notable	O	O
aspect	O	O
.	O	O
FP	O	O
became	O	O
popular	O	O
due	O	O
to	O	O
what	O	O
you	O	O
can	O	O
get	O	O
avoiding	O	O
side	O	O
-	O	O
effects	O	O
.	O	O
I	O	O
won	O	O
'	O	O
t	O	O
delve	O	O
deep	O	O
into	O	O
what	O	O
pros	O	O
\	O	O
cons	O	O
you	O	O
can	O	O
get	O	O
from	O	O
this	O	O
,	O	O
since	O	O
this	O	O
is	O	O
not	O	O
related	O	O
to	O	O
the	O	O
question	O	O
.	O	O
However	O	O
,	O	O
I	O	O
will	O	O
say	O	O
that	O	O
the	O	O
iteration	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
inspired	O	O
by	O	O
FP	O	O
and	O	O
rather	O	O
result	O	O
of	O	O
bringing	O	O
more	O	O
FP	O	O
to	O	O
Java	O	O
(	O	O
ironically	O	O
,	O	O
I	O	O
'	O	O
d	O	O
say	O	O
that	O	O
there	O	O
is	O	O
no	O	O
much	O	O
use	O	O
for	O	O
forEach	B-api_mention	B-api_mention
in	O	O
pure	O	O
FP	O	O
,	O	O
since	O	O
it	O	O
does	O	O
nothing	O	O
except	O	O
introducing	O	O
side	O	O
-	O	O
effects	O	O
)	O	O
.	O	O
In	O	O
the	O	O
end	O	O
I	O	O
would	O	O
say	O	O
that	O	O
it	O	O
is	O	O
rather	O	O
a	O	O
matter	O	O
of	O	O
taste	O	O
\	O	O
style	O	O
\	O	O
paradigm	O	O
you	O	O
are	O	O
currently	O	O
writing	O	O
in	O	O
.	O	O
About	O	O
parallelism	O	O
.	O	O
From	O	O
performance	O	O
point	O	O
of	O	O
view	O	O
there	O	O
is	O	O
no	O	O
promised	O	O
notable	O	O
benefits	O	O
from	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
over	O	O
foreach	O	O
(	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
According	O	O
to	O	O
official	O	O
docs	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
.	O	O
.	O	O
.	O	O
i	O	O
.	O	O
e	O	O
.	O	O
docs	O	O
pretty	O	O
much	O	O
clear	O	O
that	O	O
there	O	O
will	O	O
be	O	O
no	O	O
implicit	O	O
parallelism	O	O
.	O	O
Adding	O	O
one	O	O
would	O	O
be	O	O
LSP	O	O
violation	O	O
.	O	O
Now	O	O
,	O	O
there	O	O
are	O	O
"	O	O
parallell	O	O
collections	O	O
"	O	O
that	O	O
are	O	O
promised	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
but	O	O
to	O	O
work	O	O
with	O	O
those	O	O
you	O	O
need	O	O
to	O	O
me	O	O
more	O	O
explicit	O	O
and	O	O
put	O	O
some	O	O
extra	O	O
care	O	O
to	O	O
use	O	O
them	O	O
(	O	O
see	O	O
mschenk74	O	O
'	O	O
s	O	O
answer	O	O
for	O	O
example	O	O
)	O	O
.	O	O
BTW	O	O
:	O	O
in	O	O
this	O	O
case	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
will	O	O
be	O	O
used	O	O
,	O	O
and	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
guarantee	O	O
that	O	O
actual	O	O
work	O	O
will	O	O
be	O	O
done	O	O
in	O	O
parallell	O	O
(	O	O
depends	O	O
on	O	O
underlying	O	O
collection	O	O
)	O	O
.	O	O
UPDATE	O	O
:	O	O
might	O	O
be	O	O
not	O	O
that	O	O
obvious	O	O
and	O	O
a	O	O
little	O	O
stretched	O	O
at	O	O
a	O	O
glance	O	O
but	O	O
there	O	O
is	O	O
another	O	O
facet	O	O
of	O	O
style	O	O
and	O	O
readability	O	O
perspective	O	O
.	O	O
First	O	O
of	O	O
all	O	O
-	O	O
plain	O	O
old	O	O
forloops	O	O
are	O	O
plain	O	O
and	O	O
old	O	O
.	O	O
Everybody	O	O
already	O	O
knows	O	O
them	O	O
.	O	O
Second	O	O
,	O	O
and	O	O
more	O	O
important	O	O
-	O	O
you	O	O
probably	O	O
want	O	O
to	O	O
use	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
only	O	O
with	O	O
one	O	O
-	O	O
liner	O	O
lambdas	O	O
.	O	O
If	O	O
"	O	O
body	O	O
"	O	O
gets	O	O
heavier	O	O
-	O	O
they	O	O
tend	O	O
to	O	O
be	O	O
not	O	O
-	O	O
that	O	O
readable	O	O
.	O	O
You	O	O
have	O	O
2	O	O
options	O	O
from	O	O
here	O	O
-	O	O
use	O	O
inner	O	O
classes	O	O
(	O	O
yuck	O	O
)	O	O
or	O	O
use	O	O
plain	O	O
old	O	O
forloop	O	O
.	O	O
People	O	O
often	O	O
gets	O	O
annoyed	O	O
when	O	O
they	O	O
see	O	O
the	O	O
same	O	O
things	O	O
(	O	O
iteratins	O	O
over	O	O
collections	O	O
)	O	O
being	O	O
done	O	O
various	O	O
vays	O	O
/	O	O
styles	O	O
in	O	O
the	O	O
same	O	O
codebase	O	O
,	O	O
and	O	O
this	O	O
seems	O	O
to	O	O
be	O	O
the	O	O
case	O	O
.	O	O
Again	O	O
,	O	O
this	O	O
might	O	O
or	O	O
might	O	O
not	O	O
be	O	O
an	O	O
issue	O	O
.	O	O
Depends	O	O
on	O	O
people	O	O
working	O	O
on	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
17828584	O	O
,	O	O
answer	O	O
-	O	O
17832168	O	O
I	O	O
think	O	O
the	O	O
number	O	O
displayed	O	O
is	O	O
the	O	O
number	O	O
of	O	O
time	O	O
the	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
call	O	O
throws	O	O
the	O	O
Stackoverflow	B-api_mention	O
exception	O	O
.	O	O
It	O	O
probably	O	O
depend	O	O
on	O	O
the	O	O
implementation	O	O
of	O	O
the	O	O
println	B-api_mention	O
and	O	O
the	O	O
number	O	O
of	O	O
stacking	O	O
call	O	O
it	O	O
is	O	O
made	O	O
in	O	O
it	O	O
.	O	O
As	O	O
an	O	O
illustration	O	O
:	O	O
The	O	O
main	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
trigger	O	O
the	O	O
Stackoverflow	B-api_mention	O
exception	O	O
at	O	O
call	O	O
i	O	O
.	O	O
The	O	O
i	O	O
-	O	O
1	O	O
call	O	O
of	O	O
main	O	O
catch	O	O
the	O	O
exception	O	O
and	O	O
call	O	O
println	B-api_mention	O
which	O	O
trigger	O	O
a	O	O
second	O	O
Stackoverflow	B-api_mention	O
.	O	O
cnt	O	O
get	O	O
increment	O	O
to	O	O
1	O	O
.	O	O
The	O	O
i	O	O
-	O	O
2	O	O
call	O	O
of	O	O
main	O	O
catch	O	O
now	O	O
the	O	O
exception	O	O
and	O	O
call	O	O
println	B-api_mention	O
.	O	O
In	O	O
println	B-api_mention	O
a	O	O
method	O	O
is	O	O
called	O	O
triggering	O	O
a	O	O
3rd	O	O
exception	O	O
.	O	O
cnt	O	O
get	O	O
increment	O	O
to	O	O
2	O	O
.	O	O
this	O	O
continue	O	O
until	O	O
println	B-api_mention	O
can	O	O
make	O	O
all	O	O
its	O	O
needed	O	O
call	O	O
and	O	O
finally	O	O
display	O	O
the	O	O
value	O	O
of	O	O
cnt	O	O
.	O	O
This	O	O
is	O	O
then	O	O
dependent	O	O
of	O	O
the	O	O
actual	O	O
implementation	O	O
of	O	O
println	B-api_mention	O
.	O	O
For	O	O
the	O	O
JDK7	O	O
either	O	O
it	O	O
detect	O	O
cycling	O	O
call	O	O
and	O	O
throws	O	O
the	O	O
exception	O	O
earlier	O	O
either	O	O
it	O	O
keep	O	O
some	O	O
stack	O	O
resource	O	O
and	O	O
throw	O	O
the	O	O
exception	O	O
before	O	O
reaching	O	O
the	O	O
limit	O	O
to	O	O
give	O	O
some	O	O
room	O	O
for	O	O
remediation	O	O
logic	O	O
either	O	O
the	O	O
println	O	O
implementation	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
calls	O	O
either	O	O
the	O	O
+	O	O
+	O	O
operation	O	O
is	O	O
done	O	O
after	O	O
the	O	O
println	B-api_mention	O
call	O	O
thus	O	O
is	O	O
by	O	O
pass	O	O
by	O	O
the	O	O
exception	O	O
.	O	O
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
13612866	O	O
It	O	O
is	O	O
crucial	O	O
to	O	O
know	O	O
that	O	O
attributes	O	O
are	O	O
not	O	O
parameters	O	O
.	O	O
The	O	O
return	O	O
type	O	O
for	O	O
attributes	O	O
is	O	O
an	O	O
Object	B-api_mention	B-api_mention
,	O	O
whereas	O	O
the	O	O
return	O	O
type	O	O
for	O	O
a	O	O
parameter	O	O
is	O	O
a	O	O
String	B-api_mention	B-api_mention
.	O	O
When	O	O
calling	O	O
the	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
bear	O	O
in	O	O
mind	O	O
that	O	O
the	O	O
attributes	O	O
must	O	O
be	O	O
cast	O	O
.	O	O
Additionally	O	O
,	O	O
there	O	O
is	O	O
no	O	O
servlet	O	O
specific	O	O
attributes	O	O
,	O	O
and	O	O
there	O	O
are	O	O
no	O	O
session	O	O
parameters	O	O
.	O	O
This	O	O
post	O	O
is	O	O
written	O	O
with	O	O
the	O	O
purpose	O	O
to	O	O
connect	O	O
on	O	O
@	O	O
Bozho	O	O
'	O	O
s	O	O
response	O	O
,	O	O
as	O	O
additional	O	O
information	O	O
that	O	O
can	O	O
be	O	O
useful	O	O
for	O	O
other	O	O
people	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14563808	O	O
It	O	O
is	O	O
very	O	O
unlikely	O	O
that	O	O
random	O	O
number	O	O
generation	O	O
performance	O	O
would	O	O
be	O	O
an	O	O
issue	O	O
for	O	O
any	O	O
use	O	O
-	O	O
case	O	O
you	O	O
came	O	O
up	O	O
with	O	O
unless	O	O
accessing	O	O
a	O	O
single	O	O
Random	B-api_mention	O
instance	O	O
from	O	O
multiple	O	O
threads	O	O
(	O	O
because	O	O
Random	B-api_mention	O
is	O	O
synchronized	O	O
)	O	O
.	O	O
However	O	O
,	O	O
if	O	O
that	O	O
really	O	O
is	O	O
the	O	O
case	O	O
and	O	O
you	O	O
need	O	O
lots	O	O
of	O	O
random	O	O
numbers	O	O
fast	O	O
,	O	O
your	O	O
solution	O	O
is	O	O
far	O	O
too	O	O
unreliable	O	O
.	O	O
Sometimes	O	O
it	O	O
gives	O	O
good	O	O
results	O	O
,	O	O
sometimes	O	O
it	O	O
gives	O	O
horrible	O	O
results	O	O
(	O	O
based	O	O
on	O	O
the	O	O
initial	O	O
settings	O	O
)	O	O
.	O	O
If	O	O
you	O	O
want	O	O
the	O	O
same	O	O
numbers	O	O
that	O	O
the	O	O
Random	B-api_mention	B-api_mention
class	O	O
gives	O	O
you	O	O
,	O	O
only	O	O
faster	O	O
,	O	O
you	O	O
could	O	O
get	O	O
rid	O	O
of	O	O
the	O	O
synchronization	O	O
in	O	O
there	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
simply	O	O
took	O	O
the	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
code	O	O
and	O	O
removed	O	O
the	O	O
synchronization	O	O
which	O	O
results	O	O
in	O	O
twice	O	O
the	O	O
performance	O	O
compared	O	O
to	O	O
the	O	O
original	O	O
on	O	O
my	O	O
Oracle	O	O
HotSpot	O	O
JVM	O	O
7u9	O	O
.	O	O
It	O	O
is	O	O
still	O	O
slower	O	O
than	O	O
your	O	O
QuickRandom	B-api_mention	B-api_mention
,	O	O
but	O	O
it	O	O
gives	O	O
much	O	O
more	O	O
consistent	O	O
results	O	O
.	O	O
To	O	O
be	O	O
precise	O	O
,	O	O
for	O	O
the	O	O
same	O	O
seed	O	O
values	O	O
and	O	O
single	O	O
threaded	O	O
applications	O	O
,	O	O
it	O	O
gives	O	O
the	O	O
same	O	O
pseudo	O	O
-	O	O
random	O	O
numbers	O	O
as	O	O
the	O	O
original	O	O
Random	B-api_mention	O
class	O	O
would	O	O
.	O	O
This	O	O
code	O	O
is	O	O
based	O	O
on	O	O
the	O	O
current	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
in	O	O
OpenJDK	O	O
7u	O	O
which	O	O
is	O	O
licensed	O	O
under	O	O
GNU	O	O
GPL	O	O
v2	O	O
.	O	O
EDIT	O	O
10	O	O
months	O	O
later	O	O
:	O	O
I	O	O
just	O	O
discovered	O	O
that	O	O
you	O	O
don	O	O
'	O	O
t	O	O
even	O	O
have	O	O
to	O	O
use	O	O
my	O	O
code	O	O
above	O	O
to	O	O
get	O	O
an	O	O
unsynchronized	O	O
Random	B-api_mention	O
instance	O	O
.	O	O
There	O	O
'	O	O
s	O	O
one	O	O
in	O	O
the	O	O
JDK	O	O
,	O	O
too	O	O
!	O	O
Look	O	O
at	O	O
Java	O	O
7	O	O
'	O	O
s	O	O
ThreadLocalRandom	B-api_mention	B-api_mention
class	O	O
.	O	O
The	O	O
code	O	O
inside	O	O
it	O	O
is	O	O
almost	O	O
identical	O	O
to	O	O
my	O	O
code	O	O
above	O	O
.	O	O
The	O	O
class	O	O
is	O	O
simply	O	O
a	O	O
local	O	O
-	O	O
thread	O	O
-	O	O
isolated	O	O
Random	B-api_mention	O
version	O	O
suitable	O	O
for	O	O
generating	O	O
random	O	O
numbers	O	O
quickly	O	O
.	O	O
The	O	O
only	O	O
downside	O	O
I	O	O
can	O	O
think	O	O
of	O	O
is	O	O
that	O	O
you	O	O
can	O	O
'	O	O
t	O	O
set	O	O
its	O	O
seed	O	O
manually	O	O
.	O	O
Example	O	O
usage	O	O
:	O	O
Random	B-api_mention	O
random	O	O
=	O	O
ThreadLocalRandom	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
current	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
18481387	O	O
If	O	O
you	O	O
code	O	O
in	O	O
Android	O	O
,	O	O
there	O	O
is	O	O
SparseArray	B-api_mention	B-api_mention
,	O	O
mapping	O	O
integer	O	O
to	O	O
object	O	O
.	O	O
Question	O	O
-	O	O
18666710	O	O
,	O	O
answer	O	O
-	O	O
18792306	O	O
An	O	O
important	O	O
feature	O	O
of	O	O
parametric	O	O
types	O	O
is	O	O
the	O	O
ability	O	O
to	O	O
write	O	O
polymorphic	O	O
algorithms	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
algorithms	O	O
that	O	O
operate	O	O
on	O	O
a	O	O
data	O	O
structure	O	O
regardless	O	O
of	O	O
its	O	O
parameter	O	O
value	O	O
,	O	O
such	O	O
as	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
With	O	O
generics	O	O
,	O	O
that	O	O
'	O	O
s	O	O
done	O	O
with	O	O
wildcard	O	O
types	O	O
:	O	O
<	O	O
E	O	O
extends	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
>	O	O
void	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
To	O	O
be	O	O
truly	O	O
useful	O	O
,	O	O
wildcard	O	O
types	O	O
require	O	O
wildcard	O	O
capture	O	O
,	O	O
and	O	O
that	O	O
requires	O	O
the	O	O
notion	O	O
of	O	O
a	O	O
type	O	O
parameter	O	O
.	O	O
None	O	O
of	O	O
that	O	O
was	O	O
available	O	O
at	O	O
the	O	O
time	O	O
arrays	O	O
were	O	O
added	O	O
to	O	O
Java	O	O
,	O	O
and	O	O
makings	O	O
arrays	O	O
of	O	O
reference	O	O
type	O	O
covariant	O	O
permitted	O	O
a	O	O
far	O	O
simpler	O	O
way	O	O
to	O	O
permit	O	O
polymorphic	O	O
algorithms	O	O
:	O	O
void	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
However	O	O
,	O	O
that	O	O
simplicity	O	O
opened	O	O
a	O	O
loophole	O	O
in	O	O
the	O	O
static	O	O
type	O	O
system	O	O
:	O	O
#	O	O
pre	O	O
requiring	O	O
a	O	O
runtime	O	O
check	O	O
of	O	O
every	O	O
write	O	O
access	O	O
to	O	O
an	O	O
array	O	O
of	O	O
reference	O	O
type	O	O
.	O	O
In	O	O
a	O	O
nutshell	O	O
,	O	O
the	O	O
newer	O	O
approach	O	O
embodied	O	O
by	O	O
generics	O	O
makes	O	O
the	O	O
type	O	O
system	O	O
more	O	O
complex	O	O
,	O	O
but	O	O
also	O	O
more	O	O
statically	O	O
type	O	O
safe	O	O
,	O	O
while	O	O
the	O	O
older	O	O
approach	O	O
was	O	O
simpler	O	O
,	O	O
and	O	O
less	O	O
statically	O	O
type	O	O
safe	O	O
.	O	O
The	O	O
designers	O	O
of	O	O
the	O	O
language	O	O
opted	O	O
for	O	O
the	O	O
simpler	O	O
approach	O	O
,	O	O
having	O	O
more	O	O
important	O	O
things	O	O
to	O	O
do	O	O
than	O	O
closing	O	O
a	O	O
small	O	O
loophole	O	O
in	O	O
the	O	O
type	O	O
system	O	O
that	O	O
rarely	O	O
causes	O	O
problems	O	O
.	O	O
Later	O	O
,	O	O
when	O	O
Java	O	O
was	O	O
established	O	O
,	O	O
and	O	O
the	O	O
pressing	O	O
needs	O	O
taken	O	O
care	O	O
of	O	O
,	O	O
they	O	O
had	O	O
the	O	O
resources	O	O
to	O	O
do	O	O
it	O	O
right	O	O
for	O	O
generics	O	O
(	O	O
but	O	O
changing	O	O
it	O	O
for	O	O
arrays	O	O
would	O	O
have	O	O
broken	O	O
existing	O	O
Java	O	O
programs	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
10786042	O	O
Say	O	O
I	O	O
have	O	O
a	O	O
URL	O	O
http	O	O
:	O	O
/	O	O
/	O	O
example	O	O
.	O	O
com	O	O
/	O	O
query	O	O
?	O	O
q	O	O
=	O	O
and	O	O
I	O	O
have	O	O
a	O	O
query	O	O
entered	O	O
by	O	O
the	O	O
user	O	O
such	O	O
as	O	O
:	O	O
#	O	O
blockquote	O	O
I	O	O
want	O	O
the	O	O
result	O	O
to	O	O
be	O	O
a	O	O
properly	O	O
encoded	O	O
URL	O	O
:	O	O
http	O	O
:	O	O
/	O	O
/	O	O
example	O	O
.	O	O
com	O	O
/	O	O
query	O	O
?	O	O
q	O	O
=	O	O
random	O	O
%	O	O
20word	O	O
%	O	O
20	O	O
%	O	O
A3500	O	O
%	O	O
20bank	O	O
%	O	O
20	O	O
%	O	O
24	O	O
What	O	O
'	O	O
s	O	O
the	O	O
best	O	O
way	O	O
to	O	O
achieve	O	O
this	O	O
?	O	O
I	O	O
tried	O	O
URLEncoder	B-api_mention	B-api_mention
and	O	O
creating	O	O
URI	O	O
/	O	O
URL	O	B-api_mention
objects	O	O
but	O	O
none	O	O
of	O	O
them	O	O
come	O	O
out	O	O
quite	O	O
right	O	O
.	O	O
Question	O	O
-	O	O
32334319	O	O
,	O	O
answer	O	O
-	O	O
39380442	O	O
As	O	O
stated	O	O
across	O	O
many	O	O
of	O	O
the	O	O
answers	O	O
.	O	O
The	O	O
Quicksort	O	O
is	O	O
used	O	O
by	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
for	O	O
sorting	O	O
primitive	O	O
collections	O	O
because	O	O
stability	O	O
isn	O	O
'	O	O
t	O	O
required	O	O
(	O	O
you	O	O
won	O	O
'	O	O
t	O	O
know	O	O
or	O	O
care	O	O
if	O	O
two	O	O
identical	O	O
ints	O	O
were	O	O
swapped	O	O
in	O	O
the	O	O
sort	O	O
)	O	O
MergeSort	O	O
or	O	O
more	O	O
specifically	O	O
Timsort	O	O
is	O	O
used	O	O
by	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
for	O	O
sorting	O	O
collections	O	O
of	O	O
objects	O	O
.	O	O
Stability	O	O
is	O	O
required	O	O
.	O	O
Quicksort	O	O
does	O	O
not	O	O
provide	O	O
for	O	O
stability	O	O
,	O	O
Timsort	O	O
does	O	O
.	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
delegates	O	O
to	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
which	O	O
is	O	O
why	O	O
you	O	O
see	O	O
the	O	O
javadoc	O	O
referencing	O	O
the	O	O
MergeSort	O	O
.	O	O
Question	O	O
-	O	O
6470651	O	O
,	O	O
answer	O	O
-	O	O
6548647	O	O
Static	O	O
field	O	O
holding	O	O
object	O	O
reference	O	O
[	O	O
esp	O	O
final	O	O
field	O	O
]	O	O
#	O	O
pre	O	O
Calling	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
lengthy	O	O
String	B-api_mention	B-api_mention
#	O	O
pre	O	O
(	O	O
Unclosed	O	O
)	O	O
open	O	O
streams	O	O
(	O	O
file	O	O
,	O	O
network	O	O
etc	O	O
.	O	O
.	O	O
.	O	O
)	O	O
#	O	O
pre	O	O
Unclosed	O	O
connections	O	O
#	O	O
pre	O	O
Areas	O	O
that	O	O
are	O	O
unreachable	O	O
from	O	O
JVM	O	O
'	O	O
s	O	O
garbage	O	O
collector	O	O
,	O	O
such	O	O
as	O	O
memory	O	O
allocated	O	O
through	O	O
native	O	O
methods	O	O
In	O	O
web	O	O
applications	O	O
,	O	O
some	O	O
objects	O	O
are	O	O
stored	O	O
in	O	O
application	O	O
scope	O	O
until	O	O
the	O	O
application	O	O
is	O	O
explicitly	O	O
stopped	O	O
or	O	O
removed	O	O
.	O	B-api_mention
getServletContext	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Incorrect	O	O
or	O	O
inappropriate	O	O
JVM	O	O
options	O	O
,	O	O
such	O	O
as	O	O
the	O	O
noclassgc	O	O
option	O	O
on	O	O
IBM	O	O
JDK	O	O
that	O	O
prevents	O	O
unused	O	O
class	O	O
garbage	O	O
collection	O	O
See	O	O
IBM	O	O
jdk	O	O
settings	O	O
.	O	O
Question	O	O
-	O	O
33635717	O	O
I	O	O
'	O	O
m	O	O
reading	O	O
up	O	O
about	O	O
Java	O	O
streams	O	O
and	O	O
discovering	O	O
new	O	O
things	O	O
as	O	O
I	O	O
go	O	O
along	O	O
.	O	O
One	O	O
of	O	O
the	O	O
new	O	O
things	O	O
I	O	O
found	O	O
was	O	O
the	O	O
peek	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
.	O	O
Almost	O	O
everything	O	O
I	O	O
'	O	O
ve	O	O
read	O	O
on	O	O
peek	O	O
says	O	O
it	O	O
should	O	O
be	O	O
used	O	O
to	O	O
debug	O	O
your	O	O
Streams	O	B-api_mention
.	O	O
What	O	O
if	O	O
I	O	O
had	O	O
a	O	O
Stream	B-api_mention	B-api_mention
where	O	O
each	O	O
Account	O	O
has	O	O
a	O	O
username	O	O
,	O	O
password	O	O
field	O	O
and	O	O
a	O	O
login	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
and	O	O
loggedIn	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
method	O	O
.	O	O
I	O	O
also	O	O
have	O	O
Consumer	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
login	O	O
=	O	O
account	O	O
-	O	O
>	O	O
account	O	O
.	O	O
login	O	O
(	O	O
args	O	O
)	O	O
;	O	O
and	O	O
Predicate	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
loggedIn	O	O
=	O	O
account	O	O
-	O	O
>	O	O
account	O	O
.	O	B-api_mention
loggedIn	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
Why	O	O
would	O	O
this	O	O
be	O	O
so	O	O
bad	O	O
?	O	O
#	O	O
pre	O	O
Now	O	O
as	O	O
far	O	O
as	O	O
I	O	O
can	O	O
tell	O	O
this	O	O
does	O	O
exactly	O	O
what	O	O
it	O	O
'	O	O
s	O	O
intended	O	O
to	O	O
do	O	O
.	O	O
It	O	O
;	O	O
#	O	O
li	O	O
Takes	O	O
a	O	O
list	O	O
of	O	O
accounts	O	O
#	O	O
li	O	O
Tries	O	O
to	O	O
log	O	O
in	O	O
to	O	O
each	O	O
account	O	O
#	O	O
li	O	O
Filters	O	O
out	O	O
any	O	O
account	O	O
which	O	O
aren	O	O
'	O	O
t	O	O
logged	O	O
in	O	O
#	O	O
li	O	O
Collects	O	O
the	O	O
logged	O	O
in	O	O
accounts	O	O
into	O	O
a	O	O
new	O	O
list	O	O
What	O	O
is	O	O
the	O	O
downside	O	O
of	O	O
doing	O	O
something	O	O
like	O	O
this	O	O
?	O	O
Any	O	O
reason	O	O
I	O	O
shouldn	O	O
'	O	O
t	O	O
proceed	O	O
?	O	O
Lastly	O	O
,	O	O
if	O	O
not	O	O
this	O	O
solution	O	O
then	O	O
what	O	O
?	O	O
The	O	O
original	O	O
version	O	O
of	O	O
this	O	O
used	O	O
the	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
as	O	O
follows	O	O
;	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
25222811	O	O
,	O	O
answer	O	O
-	O	O
26676046	O	O
To	O	O
begin	O	O
with	O	O
(	O	O
and	O	O
unrelated	O	O
)	O	O
,	O	O
instantiating	O	O
the	O	O
Application	B-api_mention	O
class	O	O
by	O	O
yourself	O	O
does	O	O
not	O	O
seem	O	O
to	O	O
be	O	O
its	O	O
intended	O	O
use	O	O
.	O	O
From	O	O
what	O	O
one	O	O
can	O	O
read	O	O
from	O	O
its	O	O
source	O	O
,	O	O
you	O	O
are	O	O
rather	O	O
expected	O	O
to	O	O
use	O	O
the	O	O
static	O	O
instance	O	O
returned	O	O
by	O	O
getApplication	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Now	O	O
let	O	O
'	O	O
s	O	O
get	O	O
to	O	O
the	O	O
error	O	O
Eclipse	O	O
reports	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
ran	O	O
into	O	O
a	O	O
similar	O	O
issue	O	O
recently	O	O
:	O	O
Access	O	O
restriction	O	O
:	O	O
The	O	O
method	O	O
.	O	O
.	O	O
.	O	O
is	O	O
not	O	O
API	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	O
I	O	O
called	O	O
the	O	O
method	O	O
in	O	O
question	O	O
as	O	O
a	O	O
method	O	O
of	O	O
an	O	O
object	O	O
which	O	O
inherited	O	O
that	O	O
method	O	O
from	O	O
a	O	O
super	O	O
class	O	O
.	O	O
All	O	O
I	O	O
had	O	O
to	O	O
do	O	O
was	O	O
to	O	O
add	O	O
the	O	O
package	O	O
the	O	O
super	O	O
class	O	O
was	O	O
in	O	O
to	O	O
the	O	O
packages	O	O
imported	O	O
by	O	O
my	O	O
plugin	O	O
.	O	O
However	O	O
,	O	O
there	O	O
is	O	O
a	O	O
lot	O	O
of	O	O
different	O	O
causes	O	O
for	O	O
errors	O	O
based	O	O
on	O	O
"	O	O
restriction	O	O
on	O	O
required	O	O
project	O	O
/	O	O
library	O	O
"	O	O
.	O	O
Similar	O	O
to	O	O
the	O	O
problem	O	O
described	O	O
above	O	O
,	O	O
the	O	O
type	O	O
you	O	O
are	O	O
using	O	O
might	O	O
have	O	O
dependencies	O	O
to	O	O
packages	O	O
that	O	O
are	O	O
not	O	O
exported	O	O
by	O	O
the	O	O
library	O	O
or	O	O
might	O	O
not	O	O
be	O	O
exported	O	O
itself	O	O
.	O	O
In	O	O
that	O	O
case	O	O
you	O	O
can	O	O
try	O	O
to	O	O
track	O	O
down	O	O
the	O	O
missing	O	O
packages	O	O
and	O	O
export	O	O
them	O	O
my	O	O
yourself	O	O
,	O	O
as	O	O
suggested	O	O
here	O	O
,	O	O
or	O	O
try	O	O
Access	O	O
Rules	O	O
.	O	O
Other	O	O
possible	O	O
scenarios	O	O
include	O	O
:	O	O
#	O	O
li	O	O
Eclipse	O	O
wants	O	O
to	O	O
keep	O	O
you	O	O
from	O	O
using	O	O
available	O	O
packages	O	O
that	O	O
are	O	O
not	O	O
part	O	O
of	O	O
the	O	O
public	O	O
Java	O	O
API	O	O
(	O	O
solution	O	O
1	O	O
,	O	O
2	O	O
)	O	O
#	O	O
li	O	O
Dependencies	O	O
are	O	O
satisfied	O	O
by	O	O
multiple	O	O
sources	O	O
,	O	O
versions	O	O
are	O	O
conflicting	O	O
etc	O	O
.	O	O
(	O	O
solution	O	O
1	O	O
,	O	O
2	O	O
,	O	O
3	O	O
)	O	O
#	O	O
li	O	O
Eclipse	O	O
is	O	O
using	O	O
a	O	O
JRE	O	O
where	O	O
a	O	O
JDK	O	O
is	O	O
necessary	O	O
(	O	O
which	O	O
might	O	O
be	O	O
the	O	O
case	O	O
here	O	O
,	O	O
from	O	O
what	O	O
your	O	O
errors	O	O
say	O	O
;	O	O
solution	O	O
)	O	O
or	O	O
JRE	O	O
/	O	O
JDK	O	O
version	O	O
in	O	O
project	O	O
build	O	O
path	O	O
is	O	O
not	O	O
the	O	O
right	O	O
one	O	O
This	O	O
ended	O	O
up	O	O
as	O	O
more	O	O
like	O	O
a	O	O
medley	O	O
of	O	O
restriction	O	O
-	O	O
related	O	O
issues	O	O
than	O	O
an	O	O
actual	O	O
answer	O	O
.	O	O
But	O	O
since	O	O
restriction	O	O
on	O	O
required	O	O
projects	O	O
is	O	O
such	O	O
a	O	O
versatile	O	O
error	O	O
to	O	O
be	O	O
reported	O	O
,	O	O
the	O	O
perfect	O	O
recipe	O	O
is	O	O
probably	O	O
still	O	O
to	O	O
be	O	O
found	O	O
.	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
28323553	O	O
One	O	O
of	O	O
the	O	O
main	O	O
benefits	O	O
of	O	O
using	O	O
streams	O	O
is	O	O
that	O	O
it	O	O
gives	O	O
the	O	O
ability	O	O
to	O	O
process	O	O
data	O	O
in	O	O
a	O	O
declarative	O	O
way	O	O
,	O	O
that	O	O
is	O	O
,	O	O
using	O	O
a	O	O
functional	O	O
style	O	O
of	O	O
programming	O	O
.	O	O
It	O	O
also	O	O
gives	O	O
multi	O	O
-	O	O
threading	O	O
capability	O	O
for	O	O
free	O	O
meaning	O	O
there	O	O
is	O	O
no	O	O
need	O	O
to	O	O
write	O	O
any	O	O
extra	O	O
multi	O	O
-	O	O
threaded	O	O
code	O	O
to	O	O
make	O	O
your	O	O
stream	O	O
concurrent	O	O
.	O	O
Assuming	O	O
the	O	O
reason	O	O
you	O	O
are	O	O
exploring	O	O
this	O	O
style	O	O
of	O	O
programming	O	O
is	O	O
that	O	O
you	O	O
want	O	O
to	O	O
exploit	O	O
these	O	O
benefits	O	O
then	O	O
your	O	O
first	O	O
code	O	O
sample	O	O
is	O	O
potentially	O	O
not	O	O
functional	O	O
since	O	O
the	O	O
foreach	O	O
method	O	O
is	O	O
classed	O	O
as	O	O
being	O	O
terminal	O	O
(	O	O
meaning	O	O
that	O	O
it	O	O
can	O	O
produce	O	O
side	O	O
-	O	O
effects	O	O
)	O	O
.	O	O
The	O	O
second	O	O
way	O	O
is	O	O
preferred	O	O
from	O	O
functional	O	O
programming	O	O
point	O	O
of	O	O
view	O	O
since	O	O
the	O	O
map	O	O
function	O	O
can	O	O
accept	O	O
stateless	O	O
lambda	O	O
functions	O	O
.	O	O
More	O	O
explicitly	O	O
,	O	O
the	O	O
lambda	O	O
passed	O	O
to	O	O
the	O	O
map	O	O
function	O	O
should	O	O
be	O	O
#	O	O
li	O	O
Non	O	O
-	O	O
interfering	O	O
,	O	O
meaning	O	O
that	O	O
the	O	O
function	O	O
should	O	O
not	O	O
alter	O	O
the	O	O
source	O	O
of	O	O
the	O	O
stream	O	O
if	O	O
it	O	O
is	O	O
non	O	O
-	O	O
concurrent	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
ArrayList	B-api_mention	B-api_mention
)	O	O
.	O	O
#	O	O
li	O	O
Stateless	O	O
to	O	O
avoid	O	O
unexpected	O	O
results	O	O
when	O	O
doing	O	O
parallel	O	O
processing	O	O
(	O	O
caused	O	O
by	O	O
thread	O	O
scheduling	O	O
differences	O	O
)	O	O
.	O	O
Another	O	O
benefit	O	O
with	O	O
the	O	O
second	O	O
approach	O	O
is	O	O
if	O	O
the	O	O
stream	O	O
is	O	O
parallel	O	O
and	O	O
the	O	O
collector	O	O
is	O	O
concurrent	O	O
and	O	O
unordered	O	O
then	O	O
these	O	O
characteristics	O	O
can	O	O
provide	O	O
useful	O	O
hints	O	O
to	O	O
the	O	O
reduction	O	O
operation	O	O
to	O	O
do	O	O
the	O	O
collecting	O	O
concurrently	O	O
.	O	O
Question	O	O
-	O	O
16635398	O	O
Which	O	O
of	O	O
the	O	O
following	O	O
is	O	O
better	O	O
practice	O	O
in	O	O
Java	O	O
8	O	O
?	O	O
Java	O	O
8	O	O
:	O	O
joins	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Java	O	O
7	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
have	O	O
lots	O	O
of	O	O
for	O	O
loops	O	O
that	O	O
could	O	O
be	O	O
"	O	O
simplified	O	O
"	O	O
with	O	O
lambdas	O	O
,	O	O
but	O	O
is	O	O
there	O	O
really	O	O
any	O	O
advantage	O	O
of	O	O
using	O	O
them	O	O
including	O	O
performance	O	O
and	O	O
readability	O	O
?	O	O
EDIT	O	O
I	O	O
'	O	O
ll	O	O
also	O	O
extend	O	O
this	O	O
question	O	O
to	O	O
longer	O	O
methods	O	O
-	O	O
I	O	O
know	O	O
that	O	O
you	O	O
cant	O	O
return	O	O
or	O	O
break	O	O
the	O	O
parent	O	O
function	O	O
from	O	O
a	O	O
lambda	O	O
and	O	O
this	O	O
should	O	O
be	O	O
mentioned	O	O
to	O	O
if	O	O
they	O	O
are	O	O
compared	O	O
,	O	O
but	O	O
is	O	O
there	O	O
anything	O	O
else	O	O
to	O	O
be	O	O
considered	O	O
?	O	O
Question	O	O
-	O	O
24511052	O	O
I	O	O
am	O	O
looking	O	O
for	O	O
a	O	O
concise	O	O
way	O	O
to	O	O
convert	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
to	O	O
a	O	O
Stream	B-api_mention	B-api_mention
or	O	O
more	O	O
specifically	O	O
to	O	O
"	O	O
view	O	O
"	O	O
the	O	O
iterator	O	O
as	O	O
a	O	O
stream	O	O
.	O	O
For	O	O
performance	O	O
reason	O	O
,	O	O
I	O	O
would	O	O
like	O	O
to	O	O
avoid	O	O
a	O	O
copy	O	O
of	O	O
the	O	O
iterator	O	O
in	O	O
a	O	O
new	O	O
list	O	O
:	O	O
#	O	O
pre	O	O
Based	O	O
on	O	O
the	O	O
some	O	O
suggestions	O	O
in	O	O
the	O	O
comments	O	O
,	O	O
I	O	O
have	O	O
also	O	O
tried	O	O
to	O	O
use	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
generate	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
I	O	O
get	O	O
a	O	O
NoSuchElementException	B-api_mention	B-api_mention
(	O	O
since	O	O
there	O	O
is	O	O
no	O	O
invocation	O	O
of	O	O
hasNext	B-api_mention	B-api_mention
)	O	O
#	O	O
pre	O	O
I	O	O
have	O	O
looked	O	O
at	O	O
StreamSupport	B-api_mention	B-api_mention
and	O	O
Collections	B-api_mention	B-api_mention
but	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
find	O	O
anything	O	O
.	O	O
Question	O	O
-	O	O
20375176	O	O
,	O	O
answer	O	O
-	O	O
20375622	O	O
A	O	O
parallel	O	O
stream	O	O
has	O	O
a	O	O
much	O	O
higher	O	O
overhead	O	O
compared	O	O
to	O	O
a	O	O
sequential	O	O
one	O	O
.	O	O
Coordinating	O	O
the	O	O
threads	O	O
takes	O	O
a	O	O
significant	O	O
amount	O	O
of	O	O
time	O	O
.	O	O
I	O	O
would	O	O
use	O	O
sequential	O	O
streams	O	O
by	O	O
default	O	O
and	O	O
only	O	O
consider	O	O
parallel	O	O
ones	O	O
if	O	O
#	O	O
li	O	O
I	O	O
have	O	O
a	O	O
massive	O	O
amount	O	O
of	O	O
items	O	O
to	O	O
process	O	O
(	O	O
or	O	O
the	O	O
processing	O	O
of	O	O
each	O	O
item	O	O
takes	O	O
time	O	O
and	O	O
is	O	O
parallelizable	O	O
)	O	O
#	O	O
li	O	O
I	O	O
have	O	O
a	O	O
performance	O	O
problem	O	O
in	O	O
the	O	O
first	O	O
place	O	O
#	O	O
li	O	O
I	O	O
don	O	O
'	O	O
t	O	O
already	O	O
run	O	O
the	O	O
process	O	O
in	O	O
a	O	O
multi	O	O
-	O	O
thread	O	O
environment	O	O
(	O	O
for	O	O
example	O	O
:	O	O
in	O	O
a	O	O
web	O	O
container	O	O
,	O	O
if	O	O
I	O	O
already	O	O
have	O	O
many	O	O
requests	O	O
to	O	O
process	O	O
in	O	O
parallel	O	O
,	O	O
adding	O	O
an	O	O
additional	O	O
layer	O	O
of	O	O
parallelism	O	O
inside	O	O
each	O	O
request	O	O
could	O	O
have	O	O
more	O	O
negative	O	O
than	O	O
positive	O	O
effects	O	O
)	O	O
In	O	O
your	O	O
example	O	O
,	O	O
the	O	O
performance	O	O
will	O	O
anyway	O	O
be	O	O
driven	O	O
by	O	O
the	O	O
synchronized	O	O
access	O	O
to	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
making	O	O
this	O	O
process	O	O
parallel	O	O
will	O	O
have	O	O
no	O	O
effect	O	O
,	O	O
or	O	O
even	O	O
a	O	O
negative	O	O
one	O	O
.	O	O
Moreover	O	O
,	O	O
remember	O	O
that	O	O
parallel	O	O
streams	O	O
don	O	O
'	O	O
t	O	O
magically	O	O
solve	O	O
all	O	O
the	O	O
synchronization	O	O
problems	O	O
.	O	O
If	O	O
a	O	O
shared	O	O
resource	O	O
is	O	O
used	O	O
by	O	O
the	O	O
predicates	O	O
and	O	O
functions	O	O
used	O	O
in	O	O
the	O	O
process	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
make	O	O
sure	O	O
that	O	O
everything	O	O
is	O	O
thread	O	O
-	O	O
safe	O	O
.	O	O
In	O	O
particular	O	O
,	O	O
side	O	O
effects	O	O
are	O	O
tings	O	O
you	O	O
really	O	O
have	O	O
to	O	O
worry	O	O
about	O	O
if	O	O
you	O	O
go	O	O
parallel	O	O
.	O	O
In	O	O
any	O	O
case	O	O
,	O	O
measure	O	O
,	O	O
don	O	O
'	O	O
t	O	O
guess	O	O
!	O	O
Only	O	O
a	O	O
measurement	O	O
will	O	O
tell	O	O
you	O	O
if	O	O
the	O	O
parallelism	O	O
is	O	O
worth	O	O
it	O	O
or	O	O
not	O	O
.	O	O
Question	O	O
-	O	O
4871051	O	O
,	O	O
answer	O	O
-	O	O
27760556	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getProperty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28590286	O	O
Since	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Nan	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
Double	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
NaN	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
mentioned	O	O
:	O	O
It	O	O
'	O	O
s	O	O
one	O	O
thing	O	O
what	O	O
should	O	O
happen	O	O
when	O	O
you	O	O
perform	O	O
arithmetic	O	O
and	O	O
compare	O	O
numbers	O	O
,	O	O
it	O	O
'	O	O
s	O	O
a	O	O
totally	O	O
different	O	O
thing	O	O
when	O	O
you	O	O
consider	O	O
how	O	O
objects	O	O
should	O	O
behave	O	O
.	O	O
Two	O	O
typical	O	O
problem	O	O
cases	O	O
are	O	O
:	O	O
Sorting	O	O
an	O	O
array	O	O
of	O	O
numbers	O	O
,	O	O
and	O	O
using	O	O
hash	O	O
values	O	O
to	O	O
implement	O	O
dictionaries	O	O
,	O	O
sets	O	O
,	O	O
and	O	O
so	O	O
on	O	O
.	O	O
There	O	O
are	O	O
two	O	O
exceptional	O	O
cases	O	O
where	O	O
the	O	O
normal	O	O
ordering	O	O
with	O	O
<	O	O
,	O	O
=	O	O
and	O	O
>	O	O
doesn	O	O
'	O	O
t	O	O
apply	O	O
:	O	O
One	O	O
case	O	O
is	O	O
that	O	O
+	O	O
0	O	O
=	O	O
-	O	O
0	O	O
and	O	O
the	O	O
other	O	O
is	O	O
that	O	O
NaN	O	O
≠	O	O
NaN	O	O
,	O	O
and	O	O
x	O	O
<	O	O
NaN	O	O
,	O	O
x	O	O
>	O	O
NaN	O	O
,	O	O
x	O	O
=	O	O
NaN	O	O
will	O	O
always	O	O
be	O	O
false	O	O
whatever	O	O
x	O	O
is	O	O
.	O	O
Sorting	O	O
algorithms	O	O
can	O	O
get	O	O
into	O	O
trouble	O	O
with	O	O
this	O	O
.	O	O
A	O	O
sorting	O	O
algorithm	O	O
may	O	O
assume	O	O
that	O	O
x	O	O
=	O	O
x	O	O
is	O	O
always	O	O
true	O	O
.	O	O
So	O	O
if	O	O
I	O	O
know	O	O
that	O	O
x	O	O
is	O	O
stored	O	O
in	O	O
an	O	O
array	O	O
and	O	O
look	O	O
for	O	O
it	O	O
,	O	O
I	O	O
might	O	O
not	O	O
do	O	O
any	O	O
bounds	O	O
check	O	O
because	O	O
the	O	O
search	O	O
for	O	O
it	O	O
must	O	O
find	O	O
something	O	O
.	O	O
Not	O	O
if	O	O
x	O	O
is	O	O
NaN	O	O
.	O	O
A	O	O
sorting	O	O
algorithm	O	O
may	O	O
assume	O	O
that	O	O
exactly	O	O
one	O	O
of	O	O
a	O	O
<	O	O
b	O	O
and	O	O
a	O	O
>	O	O
=	O	O
b	O	O
must	O	O
be	O	O
true	O	O
.	O	O
Not	O	O
if	O	O
one	O	O
is	O	O
NaN	O	O
.	O	O
So	O	O
a	O	O
naive	O	O
sorting	O	O
algorithm	O	O
may	O	O
crash	O	O
when	O	O
NaNs	O	O
are	O	O
present	O	O
.	O	O
You	O	O
'	O	O
d	O	O
have	O	O
to	O	O
decide	O	O
where	O	O
you	O	O
want	O	O
NaNs	O	O
to	O	O
end	O	O
up	O	O
when	O	O
sorting	O	O
the	O	O
array	O	O
,	O	O
and	O	O
then	O	O
change	O	O
your	O	O
comparison	O	O
code	O	O
so	O	O
that	O	O
it	O	O
works	O	O
.	O	O
Now	O	O
dictionaries	O	O
and	O	O
sets	O	O
and	O	O
generally	O	O
hashing	O	O
:	O	O
What	O	O
if	O	O
I	O	O
use	O	O
an	O	O
NaN	O	O
as	O	O
the	O	O
key	O	O
?	O	O
A	O	O
set	O	O
contains	O	O
unique	O	O
objects	O	O
.	O	O
If	O	O
the	O	O
set	O	O
contains	O	O
an	O	O
NaN	O	O
and	O	O
I	O	O
try	O	O
to	O	O
add	O	O
another	O	O
one	O	O
,	O	O
is	O	O
it	O	O
unique	O	O
because	O	O
it	O	O
is	O	O
not	O	O
equal	O	O
to	O	O
the	O	O
one	O	O
that	O	O
is	O	O
already	O	O
there	O	O
?	O	O
What	O	O
about	O	O
+	O	O
0	O	O
and	O	O
-	O	O
0	O	O
,	O	O
should	O	O
they	O	O
be	O	O
considered	O	O
equal	O	O
or	O	O
different	O	O
?	O	O
There	O	O
'	O	O
s	O	O
the	O	O
rule	O	O
that	O	O
any	O	O
two	O	O
items	O	O
considered	O	O
equal	O	O
must	O	O
have	O	O
the	O	O
same	O	O
hash	O	O
value	O	O
.	O	O
So	O	O
the	O	O
sensible	O	O
thing	O	O
is	O	O
(	O	O
probably	O	O
)	O	O
that	O	O
a	O	O
hash	O	O
function	O	O
returns	O	O
one	O	O
unique	O	O
value	O	O
for	O	O
all	O	O
NaNs	O	O
,	O	O
and	O	O
one	O	O
unique	O	O
value	O	O
for	O	O
+	O	O
0	O	O
and	O	O
-	O	O
0	O	O
.	O	O
And	O	O
after	O	O
the	O	O
hash	O	O
lookup	O	O
when	O	O
you	O	O
need	O	O
to	O	O
find	O	O
an	O	O
element	O	O
with	O	O
the	O	O
same	O	O
hash	O	O
value	O	O
that	O	O
is	O	O
actually	O	O
equal	O	O
,	O	O
two	O	O
NaNs	O	O
should	O	O
be	O	O
considered	O	O
equal	O	O
(	O	O
but	O	O
different	O	O
from	O	O
anything	O	O
else	O	O
)	O	O
.	O	O
That	O	O
'	O	O
s	O	O
probably	O	O
why	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Nan	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
equal	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
behaves	O	O
different	O	O
from	O	O
=	O	O
=	O	O
.	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16148647	O	O
Please	O	O
use	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
27888429	O	O
,	O	O
answer	O	O
-	O	O
27888447	O	O
You	O	O
can	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
E	O	O
.	O	O
g	O	O
.	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
can	O	O
also	O	O
use	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
as	O	O
mentioned	O	O
by	O	O
@	O	O
fge	O	O
,	O	O
which	O	O
looks	O	O
like	O	O
#	O	O
pre	O	O
But	O	O
note	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
whereas	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
IntStream	B-api_mention	B-api_mention
providing	O	O
you	O	O
pass	O	O
an	O	O
array	O	O
of	O	O
type	O	O
int	O	O
[	O	O
]	O	O
.	O	O
So	O	O
in	O	O
a	O	O
nutshell	O	O
for	O	O
primitives	O	O
type	O	O
you	O	O
can	O	O
observe	O	O
the	O	O
difference	O	O
between	O	O
2	O	O
methods	O	O
E	O	O
.	O	O
g	O	O
.	O	O
#	O	O
pre	O	O
When	O	O
you	O	O
pass	O	O
primitive	O	O
array	O	O
to	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
,	O	O
the	O	O
following	O	O
code	O	O
is	O	O
invoked	O	O
#	O	O
pre	O	O
and	O	O
when	O	O
you	O	O
pass	O	O
primitive	O	O
array	O	O
to	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	O
of	I-api_mention	O
the	O	O
following	O	O
code	O	O
is	O	O
invoked	O	O
#	O	O
pre	O	O
Hence	O	O
you	O	O
get	O	O
different	O	O
results	O	O
.	O	O
Updated	O	O
:	O	O
As	O	O
mentioned	O	O
by	O	O
Stuart	O	O
Marks	O	O
comment	O	O
The	O	O
subrange	O	O
overload	O	O
of	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
is	O	O
preferable	O	O
to	O	O
using	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
skip	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
because	O	O
the	O	O
former	O	O
results	O	O
in	O	O
a	O	O
SIZED	O	O
stream	O	O
whereas	O	O
the	O	O
latter	O	O
does	O	O
not	O	O
.	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
limit	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
doesn	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
the	O	O
size	O	O
is	O	O
m	O	O
or	O	O
less	O	O
than	O	O
m	O	O
,	O	O
whereas	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
does	O	O
range	O	O
checks	O	O
and	O	O
knows	O	O
the	O	O
exact	O	O
size	O	O
of	O	O
the	O	O
stream	O	O
You	O	O
can	O	O
read	O	O
the	O	O
source	O	O
code	O	O
for	O	O
stream	O	O
implementation	O	O
returned	O	O
by	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
here	O	O
,	O	O
whereas	O	O
for	O	O
stream	O	O
implementation	O	O
returned	O	O
by	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
skip	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
within	O	O
this	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
21488056	O	O
,	O	O
answer	O	O
-	O	O
35074360	O	O
I	O	O
have	O	O
written	O	O
a	O	O
complete	O	O
utility	O	O
class	O	O
(	O	O
inspired	O	O
by	O	O
Askar	O	O
'	O	O
s	O	O
proposal	O	O
)	O	O
that	O	O
can	O	O
take	O	O
Java	O	O
8	O	O
lambda	O	O
expression	O	O
and	O	O
turn	O	O
them	O	O
(	O	O
if	O	O
applicable	O	O
)	O	O
into	O	O
any	O	O
typed	O	O
standard	O	O
Java	O	O
8	O	O
lambda	O	O
defined	O	O
in	O	O
the	O	O
package	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
.	O	O
You	O	O
can	O	O
for	O	O
example	O	O
do	O	O
:	O	O
#	O	O
li	O	O
asPredicate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
negate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
asBiPredicate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
negate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Because	O	O
there	O	O
would	O	O
be	O	O
numerous	O	O
ambiguities	O	O
if	O	O
all	O	O
the	O	O
static	O	O
methods	O	O
would	O	O
be	O	O
named	O	O
just	O	O
as	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
,	O	O
I	O	O
opted	O	O
to	O	O
call	O	O
the	O	O
method	O	O
"	O	O
as	O	O
"	O	O
followed	O	O
by	O	O
the	O	O
returned	O	O
type	O	O
.	O	O
This	O	O
gives	O	O
us	O	O
full	O	O
control	O	O
of	O	O
the	O	O
lambda	O	O
interpretation	O	O
.	O	O
Below	O	O
is	O	O
the	O	O
first	O	O
part	O	O
of	O	O
the	O	O
(	O	O
somewhat	O	O
large	O	O
)	O	O
utility	O	O
class	O	O
revealing	O	O
the	O	O
pattern	O	O
used	O	O
.	O	O
Have	O	O
a	O	O
look	O	O
at	O	O
the	O	O
complete	O	O
class	O	O
here	O	O
(	O	O
at	O	O
gist	O	O
)	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
25855691	O	O
TL	O	O
;	O	O
DR	O	O
:	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
the	O	O
fastest	O	O
.	O	O
I	O	O
felt	O	O
I	O	O
should	O	O
add	O	O
my	O	O
results	O	O
from	O	O
benchmarking	O	O
iteration	O	O
.	O	O
I	O	O
took	O	O
a	O	O
very	O	O
simple	O	O
approach	O	O
(	O	O
no	O	O
benchmarking	O	O
frameworks	O	O
)	O	O
and	O	O
benchmarked	O	O
5	O	O
different	O	O
methods	O	O
:	O	O
#	O	O
li	O	O
classic	O	O
for	O	O
#	O	O
li	O	O
classic	O	O
foreach	O	O
#	O	O
li	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
forEach	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
the	O	O
testing	O	O
procedure	O	O
and	O	O
parameters	O	O
#	O	O
pre	O	O
The	O	O
list	O	O
in	O	O
this	O	O
class	O	O
shall	O	O
be	O	O
iterated	O	O
over	O	O
and	O	O
have	O	O
some	O	O
doIt	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
applied	O	O
to	O	O
all	O	O
it	O	O
'	O	O
s	O	O
members	O	O
,	O	O
each	O	O
time	O	O
via	O	O
a	O	O
different	O	O
method	O	O
.	O	O
in	O	O
the	O	O
Main	O	O
class	O	O
I	O	O
run	O	O
the	O	O
tested	O	O
method	O	O
three	O	O
times	O	O
to	O	O
warm	O	O
up	O	O
the	O	O
JVM	O	O
.	O	O
I	O	O
then	O	O
run	O	O
the	O	O
test	O	O
method	O	O
1000	O	O
times	O	O
summing	O	O
the	O	O
time	O	O
it	O	O
takes	O	O
for	O	O
each	O	O
iteration	O	O
method	O	O
(	O	O
using	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
After	O	O
that	O	O
'	O	O
s	O	O
done	O	O
i	O	O
divide	O	O
that	O	O
sum	O	O
by	O	O
1000	O	O
and	O	O
that	O	O
'	O	O
s	O	O
the	O	O
result	O	O
,	O	O
average	O	O
time	O	O
.	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
ran	O	O
this	O	O
on	O	O
a	O	O
i5	O	O
4	O	O
core	O	O
CPU	O	O
,	O	O
with	O	O
java	O	O
version	O	O
1	O	O
.	O	O
8	O	O
.	O	O
0	O	O
_	O	O
05	O	O
classic	O	O
for	O	O
#	O	O
pre	O	O
execution	O	O
time	O	O
:	O	O
4	O	O
.	O	O
21	O	O
ms	O	O
classic	O	O
foreach	O	O
#	O	O
pre	O	O
execution	O	O
time	O	O
:	O	O
5	O	O
.	O	O
95	O	O
ms	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
list	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
execution	O	O
time	O	O
:	O	O
3	O	O
.	O	O
11	O	O
ms	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
execution	O	O
time	O	O
:	O	O
2	O	O
.	O	O
79	O	O
ms	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
list	O	I-api_mention
.	B-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
execution	O	O
time	O	O
:	O	O
3	O	O
.	O	O
6	O	O
ms	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489376	O	O
String	B-api_mention	B-api_mention
gets	O	O
special	O	O
treatment	O	O
in	O	O
the	O	O
JLS	O	O
:	O	O
it	O	O
'	O	O
s	O	O
one	O	O
of	O	O
the	O	O
two	O	O
non	O	O
-	O	O
primitive	O	O
types	O	O
for	O	O
which	O	O
literals	O	O
exist	O	O
(	O	O
the	O	O
other	O	O
is	O	O
Class	B-api_mention	B-api_mention
)	O	O
*	O	O
.	O	O
From	O	O
the	O	O
JLS	O	O
:	O	O
#	O	O
blockquote	O	O
*	O	O
well	O	O
,	O	O
there	O	O
'	O	O
s	O	O
also	O	O
the	O	O
"	O	O
null	O	O
type	O	O
"	O	O
with	O	O
it	O	O
'	O	O
s	O	O
"	O	O
null	O	O
literal	O	O
"	O	O
null	O	O
,	O	O
but	O	O
most	O	O
people	O	O
don	O	O
'	O	O
t	O	O
think	O	O
of	O	O
the	O	O
"	O	O
null	O	O
type	O	O
"	O	O
as	O	O
a	O	O
proper	O	O
type	O	O
.	O	O
Question	O	O
-	O	O
13604703	O	O
,	O	O
answer	O	O
-	O	O
13604748	O	O
Lambdas	O	O
are	O	O
purely	O	O
a	O	O
call	O	O
-	O	O
site	O	O
construct	O	O
:	O	O
the	O	O
recipient	O	O
of	O	O
the	O	O
lambda	O	O
does	O	O
not	O	O
need	O	O
to	O	O
know	O	O
that	O	O
a	O	O
Lambda	O	B-api_mention
is	O	O
involved	O	O
,	O	O
instead	O	O
it	O	O
accepts	O	O
an	O	O
Interface	O	O
with	O	O
the	O	O
appropriate	O	O
method	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
you	O	O
define	O	O
or	O	O
use	O	O
a	O	O
functional	O	O
interface	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
an	O	O
interface	O	O
with	O	O
a	O	O
single	O	O
method	O	O
)	O	O
that	O	O
accepts	O	O
and	O	O
returns	O	O
exactly	O	O
what	O	O
you	O	O
want	O	O
.	O	O
For	O	O
this	O	O
Java	O	O
8	O	O
comes	O	O
with	O	O
a	O	O
set	O	O
of	O	O
commonly	O	O
-	O	O
used	O	O
interface	O	O
types	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
(	O	O
thanks	O	O
to	O	O
Maurice	O	O
Naftalin	O	O
for	O	O
the	O	O
hint	O	O
about	O	O
the	O	O
JavaDoc	O	O
)	O	O
.	O	O
For	O	O
this	O	O
specific	O	O
use	O	O
case	O	O
there	O	O
'	O	O
s	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
IntBinaryOperator	I-api_mention	I-api_mention
with	O	O
a	O	O
single	O	O
int	O	O
applyAsInt	B-api_mention	O
(	I-api_mention	O
int	I-api_mention	O
left	I-api_mention	O
,	I-api_mention	O
int	I-api_mention	O
right	I-api_mention	O
)	I-api_mention	O
method	O	O
,	O	O
so	O	O
you	O	O
could	O	O
write	O	O
your	O	O
method	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
you	O	O
can	O	O
just	O	O
as	O	O
well	O	O
define	O	O
your	O	O
own	O	O
interface	O	O
and	O	O
use	O	O
it	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Using	O	O
your	O	O
own	O	O
interface	O	O
has	O	O
the	O	O
advantage	O	O
that	O	O
you	O	O
can	O	O
have	O	O
names	O	O
that	O	O
more	O	O
clearly	O	O
indicate	O	O
the	O	O
intent	O	O
.	O	O
Question	O	O
-	O	O
5778658	O	O
,	O	O
answer	O	O
-	O	O
5778863	O	O
An	O	O
OutputStream	B-api_mention	B-api_mention
is	O	O
one	O	O
where	O	O
you	O	O
write	O	O
data	O	O
to	O	O
.	O	O
If	O	O
some	O	O
module	O	O
exposes	O	O
an	O	O
OutputStream	B-api_mention	B-api_mention
,	O	O
the	O	O
expectation	O	O
is	O	O
that	O	O
there	O	O
is	O	O
something	O	O
at	O	O
the	O	O
other	O	O
end	O	O
that	O	O
is	O	O
reading	O	O
.	O	O
Something	O	O
that	O	O
exposes	O	O
an	O	O
InputStream	B-api_mention	B-api_mention
on	O	O
the	O	O
other	O	O
hand	O	O
is	O	O
indicating	O	O
that	O	O
you	O	O
will	O	O
need	O	O
to	O	O
listen	O	O
to	O	O
this	O	O
stream	O	O
,	O	O
and	O	O
there	O	O
will	O	O
be	O	O
data	O	O
that	O	O
you	O	O
can	O	O
read	O	O
.	O	O
So	O	O
it	O	O
is	O	O
possible	O	O
to	O	O
connect	O	O
an	O	O
InputStream	B-api_mention	B-api_mention
to	O	O
an	O	O
OutputStream	B-api_mention	B-api_mention
InputStream	I-api_mention	O
-	O	O
-	O	O
-	O	O
-	O	O
read	O	O
-	O	O
-	O	O
-	O	O
>	O	O
intermediateBytes	O	O
[	O	O
n	O	O
]	O	O
-	O	O
-	O	O
-	O	O
-	O	O
write	O	O
-	O	O
-	O	O
-	O	O
-	O	O
>	O	O
OutputStream	B-api_mention	O
As	O	O
someone	O	O
metioned	O	O
,	O	O
this	O	O
is	O	O
what	O	O
the	O	O
copy	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
from	O	O
IOUtils	B-api_mention	O
lets	O	O
you	O	O
do	O	O
.	O	O
It	O	O
does	O	O
not	O	O
make	O	O
sense	O	O
to	O	O
go	O	O
the	O	O
other	O	O
way	O	O
.	O	O
.	O	O
.	O	O
hopefully	O	O
this	O	O
makes	O	O
some	O	O
sense	O	O
UPDATE	O	O
:	O	O
Of	O	O
course	O	O
the	O	O
more	O	O
I	O	O
think	O	O
of	O	O
this	O	O
,	O	O
the	O	O
more	O	O
I	O	O
can	O	O
see	O	O
how	O	O
this	O	O
actually	O	O
would	O	O
be	O	O
a	O	O
requirement	O	O
.	O	O
I	O	O
know	O	O
some	O	O
of	O	O
the	O	O
comments	O	O
mentioned	O	O
Piped	O	O
input	O	O
/	O	O
ouput	O	O
streams	O	O
,	O	O
but	O	O
there	O	O
is	O	O
another	O	O
possibility	O	O
.	O	O
If	O	O
the	O	O
output	O	O
stream	O	O
that	O	O
is	O	O
exposed	O	O
is	O	O
a	O	O
ByteArrayOutputStream	B-api_mention	B-api_mention
,	O	O
then	O	O
you	O	O
can	O	O
always	O	O
get	O	O
the	O	O
full	O	O
contents	O	O
by	O	O
calling	O	O
the	O	O
toByteArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Then	O	O
you	O	O
can	O	O
create	O	O
an	O	O
input	O	O
stream	O	O
wrapper	O	O
by	O	O
using	O	O
the	O	O
ByteArrayInputStream	B-api_mention	B-api_mention
sub	O	O
-	O	O
class	O	O
.	O	O
These	O	O
two	O	O
are	O	O
pseudo	O	O
-	O	O
streams	O	O
,	O	O
they	O	O
both	O	O
basically	O	O
just	O	O
wrap	O	O
an	O	O
array	O	O
of	O	O
bytes	O	O
.	O	O
Using	O	O
the	O	O
streams	O	O
this	O	O
way	O	O
,	O	O
therefore	O	O
,	O	O
is	O	O
technically	O	O
possible	O	O
,	O	O
but	O	O
to	O	O
me	O	O
it	O	O
is	O	O
still	O	O
very	O	O
strange	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
35834484	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	O
decode	I-api_mention	O
You	O	O
can	O	O
also	O	O
use	O	O
public	O	O
static	O	O
Integer	B-api_mention	B-api_mention
decode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
throws	O	O
NumberFormatException	B-api_mention	B-api_mention
.	O	O
It	O	O
also	O	O
works	O	O
for	O	O
base	O	O
8	O	O
and	O	O
16	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
want	O	O
to	O	O
get	O	O
int	O	O
instead	O	O
of	O	O
Integer	B-api_mention	B-api_mention
you	O	O
can	O	O
use	O	O
:	O	O
#	O	O
li	O	O
Unboxing	O	O
:	O	O
int	O	O
val	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
decode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
intValue	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
decode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
intValue	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
26549659	O	O
Google	O	O
Guava	B-api_mention	O
has	O	O
a	O	O
predicate	O	O
that	O	O
always	O	O
returns	O	O
true	O	O
.	O	O
Does	O	O
Java	O	O
8	O	O
have	O	O
something	O	O
similar	O	O
for	O	O
its	O	O
Predicate	B-api_mention	B-api_mention
?	O	O
I	O	O
know	O	O
I	O	O
could	O	O
use	O	O
(	O	O
foo	O	O
)	O	O
-	O	O
>	O	O
{	O	O
return	O	O
true	O	O
;	O	O
}	O	O
,	O	O
but	O	O
I	O	O
want	O	O
something	O	O
pre	O	O
-	O	O
made	O	O
,	O	O
analogous	O	O
to	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
emptySet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
19235606	O	O
,	O	O
answer	O	O
-	O	O
19235863	O	O
You	O	O
should	O	O
almost	O	O
certainly	O	O
never	O	O
have	O	O
to	O	O
deal	O	O
with	O	O
Spliterator	B-api_mention	B-api_mention
as	O	O
a	O	O
user	O	O
;	O	O
it	O	O
should	O	O
only	O	O
be	O	O
necessary	O	O
if	O	O
you	O	O
'	O	O
re	O	O
writing	O	O
Collection	B-api_mention	B-api_mention
types	O	O
yourself	O	O
and	O	O
also	O	O
intending	O	O
to	O	O
optimize	O	O
parallelized	O	O
operations	O	O
on	O	O
them	O	O
.	O	O
For	O	O
what	O	O
it	O	O
'	O	O
s	O	O
worth	O	O
,	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
is	O	O
a	O	O
way	O	O
of	O	O
operating	O	O
over	O	O
the	O	O
elements	O	O
of	O	O
a	O	O
collection	O	O
in	O	O
a	O	O
way	O	O
that	O	O
it	O	O
'	O	O
s	O	O
easy	O	O
to	O	O
split	O	O
off	O	O
part	O	O
of	O	O
the	O	O
collection	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
because	O	O
you	O	O
'	O	O
re	O	O
parallelizing	O	O
and	O	O
want	O	O
one	O	O
thread	O	O
to	O	O
work	O	O
on	O	O
one	O	O
part	O	O
of	O	O
the	O	O
collection	O	O
,	O	O
one	O	O
thread	O	O
to	O	O
work	O	O
on	O	O
another	O	O
part	O	O
,	O	O
etc	O	O
.	O	O
You	O	O
should	O	O
essentially	O	O
never	O	O
be	O	O
saving	O	O
values	O	O
of	O	O
type	O	O
Stream	B-api_mention	B-api_mention
to	O	O
a	O	O
variable	O	O
,	O	O
either	O	O
.	O	O
Stream	B-api_mention	B-api_mention
is	O	O
sort	O	O
of	O	O
like	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
,	O	O
in	O	O
that	O	O
it	O	O
'	O	O
s	O	O
a	O	O
one	O	O
-	O	O
time	O	O
-	O	O
use	O	O
object	O	O
that	O	O
you	O	O
'	O	O
ll	O	O
almost	O	O
always	O	O
use	O	O
in	O	O
a	O	O
fluent	O	O
chain	O	O
,	O	O
as	O	O
in	O	O
the	O	O
Javadoc	O	O
example	O	O
:	O	O
int	O	O
sum	O	O
=	O	O
widgets	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
mapToInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sum	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Collector	B-api_mention	B-api_mention
is	O	O
the	O	O
most	O	O
generalized	O	O
,	O	O
abstract	O	O
possible	O	O
version	O	O
of	O	O
a	O	O
"	O	O
reduce	O	O
"	O	O
operation	O	O
a	O	O
la	O	O
map	O	O
/	O	O
reduce	O	O
;	O	O
in	O	O
particular	O	O
,	O	O
it	O	O
needs	O	O
to	O	O
support	O	O
parallelization	O	O
and	O	O
finalization	O	O
steps	O	O
.	O	O
Examples	O	O
of	O	O
Collector	B-api_mention	B-api_mention
s	O	O
include	O	O
:	O	O
#	O	O
li	O	O
summing	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
reducing	I-api_mention	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
#	O	O
li	O	O
StringBuilder	B-api_mention	B-api_mention
appending	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
13291076	O	O
,	O	O
answer	O	O
-	O	O
13291166	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
"	O	O
built	O	O
-	O	O
in	O	O
"	O	O
method	O	O
of	O	O
enum	O	O
.	O	O
It	O	O
is	O	O
final	O	O
and	O	O
you	O	O
cannot	O	O
change	O	O
its	O	O
implementation	O	O
.	O	O
It	O	O
returns	O	O
the	O	O
name	O	O
of	O	O
enum	O	O
constant	O	O
as	O	O
it	O	O
is	O	O
written	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
in	O	O
upper	O	O
case	O	O
,	O	O
without	O	O
spaces	O	O
etc	O	O
.	O	O
Compare	O	O
MOBILE	O	O
_	O	O
PHONE	O	O
_	O	O
NUMBER	O	O
and	O	O
Mobile	O	O
phone	O	O
number	O	O
.	O	O
Which	O	O
version	O	O
is	O	O
more	O	O
readable	O	O
?	O	O
I	O	O
believe	O	O
the	O	O
second	O	O
one	O	O
.	O	O
This	O	O
is	O	O
the	O	O
difference	O	O
:	O	O
name	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
always	O	O
returns	O	O
MOBILE	O	O
_	O	O
PHONE	O	O
_	O	O
NUMBER	O	O
,	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
be	O	O
overriden	O	O
to	O	O
return	O	O
Mobile	O	O
phone	O	O
number	O	O
.	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
14534791	O	O
Escape	O	O
should	O	O
be	O	O
done	O	O
with	O	O
\	O	O
,	O	O
not	O	O
/	O	O
.	O	O
So	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
will	O	O
work	O	O
(	O	O
StringBuilder	B-api_mention	B-api_mention
has	O	O
overloaded	O	O
methods	O	O
for	O	O
char	O	O
and	O	O
String	B-api_mention	B-api_mention
type	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
30217236	O	O
,	O	O
answer	O	O
-	O	O
30217518	O	O
Presumably	O	O
,	O	O
you	O	O
are	O	O
not	O	O
calling	O	O
your	O	O
generic	O	O
method	O	O
in	O	O
a	O	O
generic	O	O
fashion	O	O
,	O	O
so	O	O
it	O	O
'	O	O
s	O	O
treated	O	O
like	O	O
a	O	O
call	O	O
to	O	O
x	O	O
(	O	O
args	O	O
)	O	O
.	O	O
In	O	O
this	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
first	O	O
call	O	O
to	O	O
x	O	O
is	O	O
not	O	O
made	O	O
generically	O	O
so	O	O
it	O	O
compiles	O	O
.	O	O
The	O	O
second	O	O
call	O	O
equates	O	O
T	O	O
to	O	O
String	B-api_mention	B-api_mention
,	O	O
so	O	O
it	O	O
fails	O	O
because	O	O
1	O	O
and	O	O
2	O	O
are	O	O
not	O	O
Strings	O	B-api_mention
.	O	O
The	O	O
third	O	O
call	O	O
compiles	O	O
because	O	O
it	O	O
properly	O	O
passes	O	O
in	O	O
Strings	O	B-api_mention
.	O	O
Question	O	O
-	O	O
6840803	O	O
,	O	O
answer	O	O
-	O	O
6840856	O	O
SimpleDateFormat	B-api_mention	B-api_mention
stores	O	O
intermediate	O	O
results	O	O
in	O	O
instance	O	O
fields	O	O
.	O	O
So	O	O
if	O	O
one	O	O
instance	O	O
is	O	O
used	O	O
by	O	O
two	O	O
threads	O	O
they	O	O
can	O	O
mess	O	O
each	O	O
other	O	O
'	O	O
s	O	O
results	O	O
.	O	O
Looking	O	O
at	O	O
the	O	O
source	O	O
code	O	O
reveals	O	O
that	O	O
there	O	O
is	O	O
a	O	O
Calendar	B-api_mention	B-api_mention
instance	O	O
field	O	O
,	O	O
which	O	O
is	O	O
used	O	O
by	O	O
operations	O	O
on	O	O
DateFormat	B-api_mention	B-api_mention
/	O	O
SimpleDateFormat	B-api_mention	B-api_mention
For	O	O
example	O	O
parse	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
calls	O	O
calendar	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
initially	O	O
and	O	O
then	O	O
calendar	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
another	O	O
thread	O	O
invokes	O	O
parse	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
before	O	O
the	O	O
completion	O	O
of	O	O
the	O	O
first	O	O
invocation	O	O
,	O	O
it	O	O
will	O	O
clear	O	O
the	O	O
calendar	O	O
,	O	O
but	O	O
the	O	O
other	O	O
invocation	O	O
will	O	O
expect	O	O
it	O	O
to	O	O
be	O	O
populated	O	O
with	O	O
intermediate	O	O
results	O	O
of	O	O
the	O	O
calculation	O	O
.	O	O
One	O	O
way	O	O
to	O	O
reuse	O	O
date	O	O
formats	O	O
without	O	O
trading	O	O
thread	O	O
-	O	O
safety	O	O
is	O	O
to	O	O
put	O	O
them	O	O
in	O	O
a	O	O
ThreadLocal	B-api_mention	B-api_mention
-	O	O
some	O	O
libraries	O	O
do	O	O
that	O	O
.	O	O
That	O	O
'	O	O
s	O	O
if	O	O
you	O	O
need	O	O
to	O	O
use	O	O
the	O	O
same	O	O
format	O	O
multiple	O	O
times	O	O
within	O	O
one	O	O
thread	O	O
.	O	O
But	O	O
in	O	O
case	O	O
you	O	O
are	O	O
using	O	O
a	O	O
servlet	O	O
container	O	O
(	O	O
that	O	O
has	O	O
a	O	O
thread	O	O
pool	O	O
)	O	O
,	O	O
remember	O	O
to	O	O
clean	O	O
the	O	O
thread	O	O
-	O	O
local	O	O
after	O	O
you	O	O
finish	O	O
.	O	O
To	O	O
be	O	O
honest	O	O
,	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
why	O	O
they	O	O
need	O	O
the	O	O
instance	O	O
field	O	O
,	O	O
but	O	O
that	O	O
'	O	O
s	O	O
the	O	O
way	O	O
it	O	O
is	O	O
.	O	O
You	O	O
can	O	O
also	O	O
use	O	O
joda	O	O
-	O	O
time	O	O
DateTimeFormat	B-api_mention	B-api_mention
which	O	O
is	O	O
threadsafe	O	O
.	O	O
Question	O	O
-	O	O
25056607	O	O
,	O	O
answer	O	O
-	O	O
25056821	O	O
Documentation	O	O
:	O	O
For	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
blockquote	O	O
It	O	O
will	O	O
simply	O	O
return	O	O
the	O	O
entire	O	O
string	O	O
that	O	O
'	O	O
s	O	O
why	O	O
it	O	O
returns	O	O
1	O	O
.	O	O
For	O	O
the	O	O
second	O	O
case	O	O
,	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
will	O	O
discard	O	O
the	O	O
,	O	O
so	O	O
the	O	O
result	O	O
will	O	O
be	O	O
empty	O	O
.	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
silently	O	O
discards	O	O
trailing	O	O
separators	O	O
see	O	O
guava	O	O
StringsExplained	B-api_mention	B-api_mention
too	O	O
Question	O	O
-	O	O
22435833	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
there	O	O
is	O	O
a	O	O
new	O	O
method	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
chars	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
returns	O	O
a	O	O
stream	O	O
of	O	O
int	O	O
s	O	O
(	O	O
IntStream	B-api_mention	B-api_mention
)	O	O
that	O	O
represent	O	O
the	O	O
character	O	O
codes	O	O
.	O	O
I	O	O
guess	O	O
many	O	O
people	O	O
would	O	O
expect	O	O
a	O	O
stream	O	O
of	O	O
char	O	O
s	O	O
here	O	O
instead	O	O
.	O	O
What	O	O
was	O	O
the	O	O
motivation	O	O
to	O	O
design	O	O
the	O	O
API	O	O
this	O	O
way	O	O
?	O	O

