Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
38560612	O	O
This	O	O
is	O	O
part	O	O
of	O	O
JDK	O	O
9	O	O
in	O	O
the	O	O
form	O	O
of	O	O
or	O	O
,	O	O
which	O	O
takes	O	O
a	O	O
Supplier	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Your	O	O
example	O	O
would	O	O
then	O	O
be	O	O
:	O	O
return	O	O
serviceA	O	O
(	O	O
args	O	O
)	O	O
.	O	B-api_mention
or	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
or	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
For	O	O
details	O	O
see	O	O
the	O	O
(	O	O
preliminary	O	O
)	O	O
Javadoc	O	O
or	O	O
this	O	O
post	O	O
I	O	O
wrote	O	O
.	O	O
Question	O	O
-	O	O
24603186	O	O
,	O	O
answer	O	O
-	O	O
24603187	O	O
The	O	O
Javadocs	O	O
for	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	O
(	I-api_mention	O
parallelS	I-api_mention	O
|	I-api_mention	O
s	I-api_mention	O
)	I-api_mention	O
tream	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
Stream	B-api_mention	B-api_mention
itself	O	O
don	O	O
'	O	O
t	O	O
answer	O	O
the	O	O
question	O	O
,	O	O
so	O	O
it	O	O
'	O	O
s	O	O
off	O	O
to	O	O
the	O	O
mailing	O	O
lists	O	O
for	O	O
the	O	O
rationale	O	O
.	O	O
I	O	O
went	O	O
through	O	O
the	O	O
lambda	O	O
-	O	O
libs	O	O
-	O	O
spec	O	O
-	O	O
observers	O	O
archives	O	O
and	O	O
found	O	O
one	O	O
thread	O	O
specifically	O	O
about	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
another	O	O
thread	O	O
that	O	O
touched	O	O
on	O	O
whether	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Arrays	I-api_mention	I-api_mention
should	O	O
provide	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
match	O	O
(	O	O
or	O	O
actually	O	O
,	O	O
whether	O	O
it	O	O
should	O	O
be	O	O
removed	O	O
)	O	O
.	O	O
There	O	O
was	O	O
no	O	O
once	O	O
-	O	O
and	O	O
-	O	O
for	O	O
-	O	O
all	O	O
conclusion	O	O
,	O	O
so	O	O
perhaps	O	O
I	O	O
'	O	O
ve	O	O
missed	O	O
something	O	O
from	O	O
another	O	O
list	O	O
or	O	O
the	O	O
matter	O	O
was	O	O
settled	O	O
in	O	O
private	O	O
discussion	O	O
.	O	O
(	O	O
Perhaps	O	O
Brian	O	O
Goetz	O	O
,	O	O
one	O	O
of	O	O
the	O	O
principals	O	O
of	O	O
this	O	O
discussion	O	O
,	O	O
can	O	O
fill	O	O
in	O	O
anything	O	O
missing	O	O
.	O	O
)	O	O
The	O	O
participants	O	O
made	O	O
their	O	O
points	O	O
well	O	O
,	O	O
so	O	O
this	O	O
answer	O	O
is	O	O
mostly	O	O
just	O	O
an	O	O
organization	O	O
of	O	O
the	O	O
relevant	O	O
quotes	O	O
,	O	O
with	O	O
a	O	O
few	O	O
clarifications	O	O
in	O	O
[	O	O
brackets	O	O
]	O	O
,	O	O
presented	O	O
in	O	O
order	O	O
of	O	O
importance	O	O
(	O	O
as	O	O
I	O	O
interpret	O	O
it	O	O
)	O	O
.	O	B-api_mention
parallelStream	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
covers	O	O
a	O	O
very	O	O
common	O	O
case	O	O
Brian	O	O
Goetz	O	O
in	O	O
the	O	O
first	O	O
thread	O	O
,	O	O
explaining	O	O
why	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
valuable	O	O
enough	O	O
to	O	O
keep	O	O
even	O	O
after	O	O
other	O	O
parallel	O	O
stream	O	O
factory	O	O
methods	O	O
have	O	O
been	O	O
removed	O	O
:	O	O
#	O	O
blockquote	O	O
Brian	O	O
Goetz	O	O
stands	O	O
by	O	O
this	O	O
position	O	O
in	O	O
the	O	O
later	O	O
discussion	O	O
about	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
more	O	O
performant	O	O
Brian	O	O
Goetz	O	O
:	O	O
#	O	O
blockquote	O	O
In	O	O
response	O	O
to	O	O
Kevin	O	O
Bourrillion	O	O
'	O	O
s	O	O
skepticism	O	O
about	O	O
whether	O	O
the	O	O
effect	O	O
is	O	O
significant	O	O
,	O	O
Brian	O	O
again	O	O
:	O	O
#	O	O
blockquote	O	O
Doug	O	O
Lea	O	O
follows	O	O
up	O	O
,	O	O
but	O	O
hedges	O	O
his	O	O
position	O	O
:	O	O
#	O	O
blockquote	O	O
Indeed	O	O
,	O	O
the	O	O
later	O	O
discussion	O	O
about	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
takes	O	O
notice	O	O
of	O	O
lower	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
cost	O	O
.	O	B-api_mention
stream	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
statefulness	O	O
complicates	O	O
the	O	O
future	O	O
At	O	O
the	O	O
time	O	O
of	O	O
the	O	O
discussion	O	O
,	O	O
switching	O	O
a	O	O
stream	O	O
from	O	O
sequential	O	O
to	O	O
parallel	O	O
and	O	O
back	O	O
could	O	O
be	O	O
interleaved	O	O
with	O	O
other	O	O
stream	O	O
operations	O	O
.	O	O
Brian	O	O
Goetz	O	O
,	O	O
on	O	O
behalf	O	O
of	O	O
Doug	O	O
Lea	O	O
,	O	O
explains	O	O
why	O	O
sequential	O	O
/	O	O
parallel	O	O
mode	O	O
switching	O	O
may	O	O
complicate	O	O
future	O	O
development	O	O
of	O	O
the	O	O
Java	O	O
platform	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
mode	O	O
switching	O	O
was	O	O
removed	O	O
after	O	O
further	O	O
discussion	O	O
.	O	O
In	O	O
the	O	O
current	O	O
version	O	O
of	O	O
the	O	O
library	O	O
,	O	O
a	O	O
stream	O	O
pipeline	O	O
is	O	O
either	O	O
sequential	O	O
or	O	O
parallel	O	O
;	O	O
last	O	O
call	O	O
to	O	O
sequential	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
wins	O	O
.	O	O
Besides	O	O
side	O	O
-	O	O
stepping	O	O
the	O	O
statefulness	O	O
problem	O	O
,	O	O
this	O	O
change	O	O
also	O	O
improved	O	O
the	O	O
performance	O	O
of	O	O
using	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
set	O	O
up	O	O
a	O	O
parallel	O	O
pipeline	O	O
from	O	O
a	O	O
sequential	O	O
stream	O	O
factory	O	O
.	O	O
exposing	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
a	O	O
first	O	O
-	O	O
class	O	O
citizen	O	O
improves	O	O
programmer	O	O
perception	O	O
of	O	O
the	O	O
library	O	O
,	O	O
leading	O	O
them	O	O
to	O	O
write	O	O
better	O	O
code	O	O
Brian	O	O
Goetz	O	O
again	O	O
,	O	O
in	O	O
response	O	O
to	O	O
Tim	O	O
Peierls	O	O
'	O	O
s	O	O
argument	O	O
that	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
allows	O	O
programmers	O	O
to	O	O
understand	O	O
streams	O	O
sequentially	O	O
before	O	O
going	O	O
parallel	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
14534798	O	O
It	O	O
should	O	O
be	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
I	O	O
recommend	O	O
you	O	O
to	O	O
do	O	O
as	O	O
below	O	O
,	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getProperty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
system	O	O
-	O	O
dependent	O	O
newline	O	O
in	O	O
java	O	O
.	O	O
Also	O	O
from	O	O
Java	O	O
7	O	O
there	O	O
'	O	O
s	O	O
a	O	O
method	O	O
that	O	O
returns	O	O
the	O	O
value	O	O
directly	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lineSeparator	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
24609564	O	O
,	O	O
answer	O	O
-	O	O
24609841	O	O
If	O	O
you	O	O
will	O	O
read	O	O
comment	O	O
above	O	O
the	O	O
code	O	O
,	O	O
It	O	O
is	O	O
mentioned	O	O
that	O	O
.	O	O
.	O	O
.	O	O
If	O	O
the	O	O
caller	O	O
is	O	O
not	O	O
a	O	O
ForkJoinTask	B-api_mention	B-api_mention
,	O	O
this	O	O
method	O	O
is	O	O
behaviorally	O	O
equivalent	O	O
to	O	O
#	O	O
pre	O	O
So	O	O
it	O	O
is	O	O
just	O	O
another	O	O
form	O	O
to	O	O
implement	O	O
above	O	O
code	O	O
in	O	O
else	O	O
part	O	O
.	O	O
.	O	O
.	O	O
!	O	O
!	O	O
In	O	O
Style	O	O
notes	O	O
it	O	O
is	O	O
mentioned	O	O
that	O	O
,	O	O
#	O	O
blockquote	O	O
And	O	O
if	O	O
you	O	O
will	O	O
see	O	O
implementation	O	O
of	O	O
ManagedLocker	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
isReleasable	I-api_mention	I-api_mention
,	O	O
It	O	O
is	O	O
updating	O	O
the	O	O
lock	O	O
and	O	O
returns	O	O
true	O	O
if	O	O
blocking	O	O
is	O	O
unnecessary	O	O
.	O	O
Interpretation	O	O
:	O	O
Blank	O	O
while	O	O
loops	O	O
are	O	O
used	O	O
to	O	O
provide	O	O
an	O	O
interrupt	O	O
until	O	O
some	O	O
condition	O	O
reset	O	O
to	O	O
true	O	O
/	O	O
false	O	O
.	O	O
Here	O	O
,	O	O
do	O	O
{	O	O
}	O	O
while	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
is	O	O
a	O	O
blocker	O	O
/	O	O
interrupt	O	O
until	O	O
blocker	O	O
.	B-api_mention	B-api_mention
block	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
true	O	O
when	O	O
blocker	O	O
.	B-api_mention	B-api_mention
isReleasable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
false	O	O
.	O	O
Loop	O	O
will	O	O
continue	O	O
execution	O	O
while	O	O
blocker	O	O
is	O	O
not	O	O
releasable	O	O
(	O	O
!	O	O
blocker	O	O
.	B-api_mention	B-api_mention
isReleasable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
and	O	O
blocker	O	O
is	O	O
not	O	O
blocked	O	O
!	O	O
!	O	O
Execution	O	O
will	O	O
be	O	O
out	O	O
of	O	O
loop	O	O
as	O	O
soon	O	O
as	O	O
blocker	O	O
.	B-api_mention	B-api_mention
block	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
set	O	O
to	O	O
true	O	O
.	O	O
Note	O	O
that	O	O
,	O	O
do	O	O
{	O	O
}	O	O
while	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
does	O	O
not	O	O
update	O	O
CAS	O	O
variable	O	O
,	O	O
but	O	O
it	O	O
guarantee	O	O
that	O	O
program	O	O
will	O	O
wait	O	O
until	O	O
variable	O	O
gets	O	O
updated	O	O
(	O	O
force	O	O
to	O	O
wait	O	O
until	O	O
variable	O	O
gets	O	O
updated	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
6094575	O	O
,	O	O
answer	O	O
-	O	O
6094600	O	O
You	O	O
can	O	O
use	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
a	O	O
Class	B-api_mention	B-api_mention
object	O	O
of	O	O
the	O	O
desired	O	O
class	O	O
.	O	O
Then	O	O
use	O	O
getConstructor	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
find	O	O
the	O	O
desired	O	O
Constructor	B-api_mention	O
object	O	O
.	O	O
Finally	O	O
,	O	O
call	O	O
newInstance	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
that	O	O
object	O	O
to	O	O
get	O	O
your	O	O
new	O	O
instance	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
27482579	O	O
,	O	O
answer	O	O
-	O	O
27483288	O	O
#	O	O
blockquote	O	O
No	O	O
.	O	O
It	O	O
will	O	O
never	O	O
throw	O	O
a	O	O
compilation	O	O
error	O	O
.	O	O
This	O	O
is	O	O
much	O	O
similar	O	O
to	O	O
what	O	O
a	O	O
simple	O	O
getter	B-api_mention	O
and	O	O
setter	B-api_mention	O
does	O	O
or	O	O
a	O	O
copy	B-api_mention	O
constructor	O	O
does	O	O
.	O	O
Remember	O	O
we	O	O
can	O	O
access	O	O
private	O	O
members	O	O
using	O	O
this	O	O
.	O	O
#	O	O
pre	O	O
Your	O	O
testPrivate	O	B-api_mention
method	O	O
accepts	O	O
an	O	O
instance	O	O
of	O	O
MyClass	O	B-api_mention
.	O	O
Since	O	O
testPrivate	O	O
is	O	O
a	O	O
method	O	O
inside	O	O
MyClass	O	O
,	O	O
it	O	O
will	O	O
have	O	O
access	O	O
to	O	O
private	O	O
properties	O	O
.	O	O
#	O	O
pre	O	O
Methods	O	O
defined	O	O
inside	O	O
the	O	O
class	O	O
will	O	O
always	O	O
have	O	O
access	O	O
to	O	O
it	O	O
'	O	O
s	O	O
private	O	O
members	O	O
,	O	O
through	O	O
this	O	O
.	O	O
and	O	O
instance	O	O
variable	O	O
.	O	O
But	O	O
if	O	O
you	O	O
define	O	O
testPrivate	O	O
outside	O	O
of	O	O
MyClass	O	O
then	O	O
,	O	O
you	O	O
won	O	O
'	O	O
t	O	O
have	O	O
access	O	O
to	O	O
private	O	O
members	O	O
.	O	O
There	O	O
you	O	O
will	O	O
have	O	O
to	O	O
use	O	O
a	O	O
method	O	O
or	O	O
a	O	O
setter	B-api_mention	O
or	O	O
a	O	O
getter	B-api_mention	O
.	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
15432106	O	O
This	O	O
is	O	O
to	O	O
avoid	O	O
possible	O	O
efforts	O	O
for	O	O
reallocation	O	O
for	O	O
every	O	O
single	O	O
object	O	O
.	O	O
int	O	O
newCapacity	O	O
=	O	O
(	O	O
oldCapacity	O	O
*	O	O
3	O	O
)	O	O
/	O	O
2	O	O
+	O	O
1	O	O
;	O	O
internally	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
is	O	O
created	O	O
.	O	O
JVM	O	O
needs	O	O
effort	O	O
to	O	O
create	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
when	O	O
you	O	O
add	O	O
element	O	O
in	O	O
the	O	O
arraylist	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
above	O	O
code	O	O
(	O	O
any	O	O
algo	O	O
you	O	O
think	O	O
)	O	O
for	O	O
reallocation	O	O
then	O	O
every	O	O
time	O	O
when	O	O
you	O	O
invoke	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
then	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
has	O	O
to	O	O
be	O	O
created	O	O
which	O	O
is	O	O
pointless	O	O
and	O	O
we	O	O
are	O	O
loosing	O	O
time	O	O
for	O	O
increasing	O	O
size	O	O
by	O	O
1	O	O
for	O	O
each	O	O
and	O	O
every	O	O
objects	O	O
to	O	O
be	O	O
added	O	O
.	O	O
So	O	O
it	O	O
is	O	O
better	O	O
to	O	O
increase	O	O
size	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
with	O	O
following	O	O
formula	O	O
.	O	O
(	O	O
JSL	O	O
has	O	O
used	O	O
forcasting	O	O
formula	O	O
given	O	O
below	O	O
for	O	O
dynamically	O	O
growing	O	O
arraylist	O	O
instead	O	O
of	O	O
growing	O	O
by	O	O
1	O	O
every	O	O
time	O	O
.	O	O
Because	O	O
to	O	O
grow	O	O
it	O	O
takes	O	O
effort	O	O
by	O	O
JVM	O	O
)	O	O
int	O	O
newCapacity	O	O
=	O	O
(	O	O
oldCapacity	O	O
*	O	O
3	O	O
)	O	O
/	O	O
2	O	O
+	O	O
1	O	O
;	O	O
Question	O	O
-	O	O
12468764	O	O
,	O	O
answer	O	O
-	O	O
24537575	O	O
I	O	O
'	O	O
ve	O	O
found	O	O
a	O	O
very	O	O
nice	O	O
and	O	O
concise	O	O
solution	O	O
,	O	O
especially	O	O
useful	O	O
when	O	O
you	O	O
cannot	O	O
modify	O	O
enum	O	O
classes	O	O
as	O	O
it	O	O
was	O	O
in	O	O
my	O	O
case	O	O
.	O	O
Then	O	O
you	O	O
should	O	O
provide	O	O
a	O	O
custom	O	O
ObjectMapper	B-api_mention	B-api_mention
with	O	O
a	O	O
certain	O	O
feature	O	O
enabled	O	O
.	O	O
Those	O	O
features	O	O
are	O	O
available	O	O
since	O	O
Jackson	O	O
1	O	O
.	O	O
6	O	O
.	O	O
So	O	O
you	O	O
only	O	O
need	O	O
to	O	O
write	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
your	O	O
enum	O	O
.	O	O
#	O	O
pre	O	O
There	O	O
are	O	O
more	O	O
enum	O	O
-	O	O
related	O	O
features	O	O
available	O	O
,	O	O
see	O	O
here	O	O
:	O	O
#	O	O
a	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
18777989	O	O
,	O	O
answer	O	O
-	O	O
18778228	O	O
You	O	O
made	O	O
a	O	O
good	O	O
summery	O	O
of	O	O
the	O	O
practical	O	O
differences	O	O
in	O	O
use	O	O
and	O	O
implementation	O	O
but	O	O
did	O	O
not	O	O
say	O	O
anything	O	O
about	O	O
the	O	O
difference	O	O
in	O	O
meaning	O	O
.	O	O
An	O	O
interface	O	O
is	O	O
a	O	O
description	O	O
of	O	O
the	O	O
behaviour	O	O
an	O	O
implementing	O	O
class	O	O
will	O	O
have	O	O
.	O	O
The	O	O
implementing	O	O
class	O	O
ensures	O	O
,	O	O
that	O	O
it	O	O
will	O	O
have	O	O
these	O	O
methods	O	O
that	O	O
can	O	O
be	O	O
used	O	O
on	O	O
it	O	O
.	O	O
It	O	O
is	O	O
basically	O	O
a	O	O
contract	O	O
or	O	O
a	O	O
promise	O	O
the	O	O
class	O	O
has	O	O
to	O	O
make	O	O
.	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
a	O	O
basis	O	O
for	O	O
different	O	O
subclasses	O	O
that	O	O
share	O	O
behaviour	O	O
which	O	O
does	O	O
not	O	O
need	O	O
to	O	O
be	O	O
repeatedly	O	O
be	O	O
created	O	O
.	O	O
Subclasses	O	O
must	O	O
complete	O	O
the	O	O
behaviour	O	O
and	O	O
have	O	O
the	O	O
option	O	O
to	O	O
override	O	O
predefine	O	O
behaviour	O	O
(	O	O
as	O	O
long	O	O
as	O	O
it	O	O
is	O	O
not	O	O
defined	O	O
as	O	O
final	O	O
or	O	O
private	O	O
)	O	O
.	O	O
You	O	O
will	O	O
find	O	O
good	O	O
examples	O	O
in	O	O
the	O	O
java	O	O
.	O	O
util	O	O
package	O	O
which	O	O
includes	O	O
interfaces	O	O
like	O	O
List	B-api_mention	B-api_mention
and	O	O
abstract	O	O
classes	O	O
like	O	O
AbstractList	B-api_mention	B-api_mention
which	O	O
already	O	O
implements	O	O
the	O	O
interface	O	O
.	O	O
The	O	O
official	O	O
documentation	O	O
describes	O	O
the	O	O
AbstractList	B-api_mention	B-api_mention
as	O	O
follows	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
8881291	O	O
,	O	O
answer	O	O
-	O	O
14060804	O	O
#	O	O
li	O	O
Strings	B-api_mention	O
are	O	O
immutable	O	O
in	O	O
Java	O	O
if	O	O
you	O	O
store	O	O
password	O	O
as	O	O
plain	O	O
text	O	O
it	O	O
will	O	O
be	O	O
available	O	O
in	O	O
memory	O	O
until	O	O
Garbage	O	O
collector	O	O
clears	O	O
it	O	O
and	O	O
since	O	O
Strings	B-api_mention	B-api_mention
are	O	O
used	O	O
in	O	O
String	B-api_mention	B-api_mention
pool	O	O
for	O	O
re	O	O
-	O	O
usability	O	O
there	O	O
is	O	O
pretty	O	O
high	O	O
chance	O	O
that	O	O
it	O	O
will	O	O
be	O	O
remain	O	O
in	O	O
memory	O	O
for	O	O
long	O	O
duration	O	O
,	O	O
which	O	O
pose	O	O
a	O	O
security	O	O
threat	O	O
.	O	O
Since	O	O
any	O	O
one	O	O
who	O	O
has	O	O
access	O	O
to	O	O
memory	O	O
dump	O	O
can	O	O
find	O	O
the	O	O
password	O	O
in	O	O
clear	O	O
text	O	O
#	O	O
li	O	O
Java	O	O
recommendation	O	O
using	O	O
getPassword	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
JPasswordField	O	O
which	O	O
returns	O	O
a	O	O
char	O	O
[	O	O
]	O	O
and	O	O
deprecated	O	O
getText	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
which	O	O
returns	O	O
password	O	O
in	O	O
clear	O	O
text	O	O
stating	O	O
security	O	O
reason	O	O
.	O	O
#	O	O
li	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
there	O	O
is	O	O
always	O	O
a	O	O
risk	O	O
of	O	O
printing	O	O
plain	O	O
text	O	O
in	O	O
log	O	O
file	O	O
or	O	O
console	O	O
but	O	O
if	O	O
use	O	O
Array	B-api_mention	B-api_mention
you	O	O
won	O	O
'	O	O
t	O	O
print	O	O
contents	O	O
of	O	O
array	O	O
instead	O	O
its	O	O
memory	O	O
location	O	O
get	O	O
printed	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
Final	O	O
thoughts	O	O
:	O	O
Though	O	O
using	O	O
char	O	O
[	O	O
]	O	O
is	O	O
not	O	O
just	O	O
enough	O	O
you	O	O
need	O	O
to	O	O
erase	O	O
content	O	O
to	O	O
be	O	O
more	O	O
secure	O	O
.	O	O
I	O	O
also	O	O
suggest	O	O
working	O	O
with	O	O
hash	O	O
'	O	O
d	O	O
or	O	O
encrypted	O	O
password	O	O
instead	O	O
of	O	O
plaintext	O	O
and	O	O
clearing	O	O
it	O	O
from	O	O
memory	O	O
as	O	O
soon	O	O
as	O	O
authentication	O	O
is	O	O
completed	O	O
.	O	O
Question	O	O
-	O	O
21105403	O	O
I	O	O
'	O	O
ve	O	O
written	O	O
a	O	O
factory	O	O
to	O	O
produce	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Connection	I-api_mention	I-api_mention
objects	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
validate	O	O
the	O	O
parameters	O	O
passed	O	O
to	O	O
DriverManager	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getConnection	I-api_mention	I-api_mention
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
how	O	O
to	O	O
mock	O	O
a	O	O
static	O	O
method	O	O
.	O	O
I	O	O
'	O	O
m	O	O
using	O	O
JUnit	O	O
4	O	O
and	O	O
Mockito	B-api_mention	B-api_mention
for	O	O
my	O	O
test	O	O
cases	O	O
.	O	O
Is	O	O
there	O	O
a	O	O
good	O	O
way	O	O
to	O	O
mock	O	O
/	O	O
verify	O	O
this	O	O
specific	O	O
use	O	O
-	O	O
case	O	O
?	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923105	O	O
Oh	O	O
,	O	O
those	O	O
coding	O	O
styles	O	O
are	O	O
to	O	O
be	O	O
taken	O	O
with	O	O
a	O	O
bit	O	O
of	O	O
salt	O	O
.	O	O
#	O	O
li	O	O
(	O	O
+	O	O
)	O	O
Passing	O	O
an	O	O
Option	O	O
result	O	O
to	O	O
another	O	O
method	O	O
,	O	O
without	O	O
any	O	O
semantic	O	O
analysis	O	O
;	O	O
leaving	O	O
that	O	O
to	O	O
the	O	O
method	O	O
,	O	O
is	O	O
quite	O	O
alright	O	O
.	O	O
#	O	O
li	O	O
(	O	O
-	O	O
)	O	O
Using	O	O
Optional	B-api_mention	B-api_mention
parameters	O	O
causing	O	O
conditional	O	O
logic	O	O
inside	O	O
the	O	O
methods	O	O
is	O	O
literally	O	O
contra	O	O
-	O	O
productive	O	O
.	O	O
#	O	O
li	O	O
(	O	O
-	O	O
)	O	O
Needing	O	O
to	O	O
pack	O	O
an	O	O
argument	O	O
in	O	O
an	O	O
Optional	B-api_mention	B-api_mention
,	O	O
is	O	O
suboptimal	O	O
for	O	O
the	O	O
compiler	O	O
,	O	O
and	O	O
does	O	O
an	O	O
unnecessary	O	O
wrapping	O	O
.	O	O
#	O	O
li	O	O
(	O	O
-	O	O
)	O	O
In	O	O
comparison	O	O
to	O	O
nullable	O	O
parameters	O	O
Optional	B-api_mention	B-api_mention
is	O	O
more	O	O
costly	O	O
.	O	O
In	O	O
general	O	O
:	O	O
Optional	B-api_mention	B-api_mention
unifies	O	O
two	O	O
states	O	O
,	O	O
which	O	O
have	O	O
to	O	O
be	O	O
unraveled	O	O
.	O	O
Hence	O	O
better	O	O
suited	O	O
for	O	O
result	O	O
than	O	O
input	O	O
,	O	O
for	O	O
the	O	O
complexity	O	O
of	O	O
the	O	O
data	O	O
flow	O	O
.	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
7353473	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
better	O	O
(	O	O
as	O	O
explained	O	O
by	O	O
Nick	O	O
)	O	O
,	O	O
but	O	O
still	O	O
not	O	O
very	O	O
good	O	O
One	O	O
host	O	O
can	O	O
be	O	O
known	O	O
under	O	O
many	O	O
different	O	O
hostnames	O	O
.	O	O
Usually	O	O
you	O	O
'	O	O
ll	O	O
be	O	O
looking	O	O
for	O	O
the	O	O
hostname	O	O
your	O	O
host	O	O
has	O	O
in	O	O
a	O	O
specific	O	O
context	O	O
.	O	O
For	O	O
example	O	O
,	O	O
in	O	O
a	O	O
web	O	O
application	O	O
,	O	O
you	O	O
might	O	O
be	O	O
looking	O	O
for	O	O
the	O	O
hostname	O	O
used	O	O
by	O	O
whoever	O	O
issued	O	O
the	O	O
request	O	O
you	O	O
'	O	O
re	O	O
currently	O	O
handling	O	O
.	O	O
How	O	O
to	O	O
best	O	O
find	O	O
that	O	O
one	O	O
depends	O	O
on	O	O
which	O	O
framework	O	O
you	O	O
'	O	O
re	O	O
using	O	O
for	O	O
your	O	O
web	O	O
application	O	O
.	O	O
In	O	O
some	O	O
kind	O	O
of	O	O
other	O	O
internet	O	O
-	O	O
facing	O	O
service	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
want	O	O
the	O	O
hostname	O	O
your	O	O
service	O	O
is	O	O
available	O	O
through	O	O
from	O	O
the	O	O
'	O	O
outside	O	O
'	O	O
.	O	O
Due	O	O
to	O	O
proxies	O	O
,	O	O
firewalls	O	O
etc	O	O
this	O	O
might	O	O
not	O	O
even	O	O
be	O	O
a	O	O
hostname	O	O
on	O	O
the	O	O
machine	O	O
your	O	O
service	O	O
is	O	O
installed	O	O
on	O	O
-	O	O
you	O	O
might	O	O
try	O	O
to	O	O
come	O	O
up	O	O
with	O	O
a	O	O
reasonable	O	O
default	O	O
,	O	O
but	O	O
you	O	O
should	O	O
definitely	O	O
make	O	O
this	O	O
configurable	O	O
for	O	O
whoever	O	O
installs	O	O
this	O	O
.	O	O
Question	O	O
-	O	O
31370403	O	O
I	O	O
'	O	O
m	O	O
currently	O	O
in	O	O
the	O	O
process	O	O
of	O	O
writing	O	O
a	O	O
paint	O	O
program	O	O
in	O	O
java	O	O
,	O	O
designed	O	O
to	O	O
have	O	O
flexible	O	O
and	O	O
comprehensive	O	O
functionalities	O	O
.	O	O
It	O	O
stemmed	O	O
from	O	O
my	O	O
final	O	O
project	O	O
,	O	O
that	O	O
I	O	O
wrote	O	O
overnight	O	O
the	O	O
day	O	O
before	O	O
.	O	O
Because	O	O
of	O	O
that	O	O
,	O	O
it	O	O
'	O	O
s	O	O
got	O	O
tons	O	O
and	O	O
tons	O	O
of	O	O
bugs	O	O
,	O	O
which	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
tackling	O	O
one	O	O
by	O	O
one	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
I	O	O
can	O	O
only	O	O
save	O	O
files	O	O
that	O	O
will	O	O
be	O	O
empty	O	O
,	O	O
my	O	O
rectangles	O	O
don	O	O
'	O	O
t	O	O
draw	O	O
right	O	O
but	O	O
my	O	O
circles	O	O
do	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
This	O	O
time	O	O
,	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
trying	O	O
to	O	O
add	O	O
undo	O	O
/	O	O
redo	O	O
functionality	O	O
to	O	O
my	O	O
program	O	O
.	O	O
However	O	O
,	O	O
I	O	O
can	O	O
'	O	O
t	O	O
"	O	O
undo	O	O
"	O	O
something	O	O
that	O	O
I	O	O
have	O	O
done	O	O
.	O	O
Therefore	O	O
,	O	O
I	O	O
got	O	O
an	O	O
idea	O	O
to	O	O
save	O	O
copies	O	O
of	O	O
my	O	O
BufferedImage	B-api_mention	O
each	O	O
time	O	O
a	O	O
mouseReleased	B-api_mention	O
event	O	O
was	O	O
fired	O	O
.	O	O
However	O	O
,	O	O
with	O	O
some	O	O
of	O	O
the	O	O
images	O	O
going	O	O
to	O	O
1920x1080	O	O
resolution	O	O
,	O	O
I	O	O
figured	O	O
that	O	O
this	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
efficient	O	O
:	O	O
storing	O	O
them	O	O
would	O	O
probably	O	O
take	O	O
gigabytes	O	O
of	O	O
memory	O	O
.	O	O
The	O	O
reason	O	O
for	O	O
why	O	O
I	O	O
can	O	O
'	O	O
t	O	O
simply	O	O
paint	O	O
the	O	O
same	O	O
thing	O	O
with	O	O
the	O	O
background	O	O
colour	O	O
to	O	O
undo	O	O
is	O	O
because	O	O
I	O	O
have	O	O
many	O	O
different	O	O
brushes	O	O
,	O	O
which	O	O
paint	O	O
based	O	O
on	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
because	O	O
there	O	O
are	O	O
many	O	O
different	O	O
layers	O	O
(	O	O
in	O	O
a	O	O
single	O	O
layer	O	O
)	O	O
.	O	O
Then	O	O
,	O	O
I	O	O
'	O	O
ve	O	O
considered	O	O
cloning	O	O
the	O	O
Graphics	B-api_mention	B-api_mention
objects	O	O
that	O	O
I	O	O
use	O	O
to	O	O
paint	O	O
to	O	O
the	O	O
BufferedImage	B-api_mention	B-api_mention
.	O	O
Like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
done	O	O
this	O	O
before	O	O
,	O	O
so	O	O
I	O	O
have	O	O
a	O	O
couple	O	O
questions	O	O
:	O	O
#	O	O
li	O	O
Would	O	O
I	O	O
still	O	O
be	O	O
wasting	O	O
pointless	O	O
memory	O	O
by	O	O
doing	O	O
this	O	O
,	O	O
like	O	O
cloning	O	O
my	O	O
BufferedImages	B-api_mention	B-api_mention
?	O	O
#	O	O
li	O	O
Is	O	O
there	O	O
necessarily	O	O
a	O	O
different	O	O
way	O	O
I	O	O
can	O	O
do	O	O
this	O	O
?	O	O
Question	O	O
-	O	O
33358248	O	O
Currently	O	O
the	O	O
BlendModes	O	B-api_mention
(	O	O
Subtract	O	O
,	O	O
Exclusion	O	O
etc	O	O
)	O	O
use	O	O
the	O	O
LauncherImage	O	B-api_mention
as	O	O
the	O	O
mask	O	O
.	O	O
Can	O	O
I	O	O
apply	O	O
these	O	O
BlendModes	O	B-api_mention
to	O	O
a	O	O
ColorMatrix	O	B-api_mention
?	O	O
I	O	O
'	O	O
m	O	O
using	O	O
the	O	O
GPUImageLibrary	O	O
colorMatrix	O	O
[	O	O
0	O	O
.	O	O
393	O	O
,	O	O
0	O	O
.	O	O
7689999	O	O
,	O	O
0	O	O
.	O	O
18899999	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
.	O	O
349	O	O
,	O	O
0	O	O
.	O	O
6859999	O	O
,	O	O
0	O	O
.	O	O
16799999	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
.	O	O
272	O	O
,	O	O
0	O	O
.	O	O
5339999	O	O
,	O	O
0	O	O
.	O	O
13099999	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
0	O	O
,	O	O
1	O	O
,	O	O
0	O	O
]	O	O
;	O	O
SubtractBlendFilter	O	B-api_mention
.	O	O
java	O	O
#	O	O
pre	O	O
GPUIMageTwoInputFilter	O	O
.	O	O
java	O	O
#	O	O
pre	O	O
My	O	O
guess	O	O
it	O	O
involves	O	O
changing	O	O
something	O	O
with	O	O
String	B-api_mention	B-api_mention
SUBTRACT	O	O
_	O	O
BLEND	O	O
_	O	O
GRAGMENT	O	O
_	O	O
SHADER	O	O
&	O	O
String	B-api_mention	B-api_mention
VERTEX	O	O
_	O	O
SHADER	O	O
.	O	O
Question	O	O
-	O	O
6608795	O	O
,	O	O
answer	O	O
-	O	O
20069798	O	O
All	O	O
these	O	O
answers	O	O
around	O	O
here	O	O
,	O	O
as	O	O
well	O	O
as	O	O
the	O	O
answers	O	O
in	O	O
this	O	O
question	O	O
,	O	O
suggest	O	O
that	O	O
loading	O	O
absolute	O	O
URLs	O	O
,	O	O
like	O	O
"	O	O
/	O	O
foo	O	O
/	O	O
bar	O	O
.	O	O
properties	O	O
"	O	O
treated	O	O
the	O	O
same	O	O
by	O	O
class	O	O
.	B-api_mention	B-api_mention
getResourceAsStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
class	O	O
.	B-api_mention	B-api_mention
getClassLoader	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResourceAsStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
is	O	O
NOT	O	O
the	O	O
case	O	O
,	O	O
at	O	O
least	O	O
not	O	O
in	O	O
my	O	O
Tomcat	O	O
configuration	O	O
/	O	O
version	O	O
(	O	O
currently	O	O
7	O	O
.	O	O
0	O	O
.	O	O
40	O	O
)	O	O
.	O	O
#	O	O
pre	O	O
Sorry	O	O
,	O	O
I	O	O
have	O	O
absolutely	O	O
no	O	O
satisfying	O	O
explanation	O	O
,	O	O
but	O	O
I	O	O
guess	O	O
that	O	O
tomcat	O	O
does	O	O
dirty	O	O
tricks	O	O
and	O	O
his	O	O
black	O	O
magic	O	O
with	O	O
the	O	O
classloaders	O	O
and	O	O
cause	O	O
the	O	O
difference	O	O
.	O	O
I	O	O
always	O	O
used	O	O
class	O	O
.	B-api_mention	B-api_mention
getResourceAsStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
past	O	O
and	O	O
haven	O	O
'	O	O
t	O	O
had	O	O
any	O	O
problems	O	O
.	O	O
PS	O	O
:	O	O
I	O	O
also	O	O
posted	O	O
this	O	O
over	O	O
here	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
8641412	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
code	O	O
registers	O	O
the	O	O
Thread	B-api_mention	B-api_mention
with	O	O
scheduler	O	O
and	O	O
the	O	O
scheduler	O	O
calls	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Also	O	O
,	O	O
Thread	B-api_mention	B-api_mention
is	O	O
class	O	O
while	O	O
Runnable	B-api_mention	B-api_mention
is	O	O
an	O	O
interface	O	O
.	O	O
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
7056786	O	O
It	O	O
'	O	O
s	O	O
because	O	O
when	O	O
you	O	O
enter	O	O
a	O	O
number	O	O
then	O	O
press	O	O
Enter	O	O
,	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
consumes	O	O
only	O	O
the	O	O
number	O	O
,	O	O
not	O	O
the	O	O
"	O	O
end	O	O
of	O	O
line	O	O
"	O	O
.	O	O
When	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
executes	O	O
,	O	O
it	O	O
consumes	O	O
the	O	O
"	O	O
end	O	O
of	O	O
line	O	O
"	O	O
still	O	O
in	O	O
the	O	O
buffer	O	O
from	O	O
the	O	O
first	O	O
input	O	O
.	O	O
Instead	O	O
,	O	O
use	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
immediately	O	O
after	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
19431234	O	O
,	O	O
answer	O	O
-	O	O
23884116	O	O
the	O	O
following	O	O
seems	O	O
to	O	O
work	O	O
when	O	O
converting	O	O
from	O	O
new	O	O
API	O	O
LocalDateTime	B-api_mention	B-api_mention
into	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
date	I-api_mention	I-api_mention
:	O	O
Date	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
from	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
the	O	O
reverse	O	O
conversion	O	O
can	O	O
be	O	O
(	O	O
hopefully	O	O
)	O	O
achieved	O	O
similar	O	O
way	O	O
.	O	O
.	O	O
.	O	O
hope	O	O
it	O	O
helps	O	O
.	O	O
.	O	O
.	O	O
Question	O	O
-	O	O
33147339	O	O
,	O	O
answer	O	O
-	O	O
33148103	O	O
Looking	O	O
at	O	O
the	O	O
code	O	O
:	O	O
int	O	O
newCapacity	O	O
=	O	O
oldCapacity	O	O
+	O	O
(	O	O
oldCapacity	O	O
>	O	O
>	O	O
1	O	O
)	O	O
;	O	O
If	O	O
oldCapacity	O	O
is	O	O
quite	O	O
large	O	O
,	O	O
this	O	O
will	O	O
overflow	O	O
,	O	O
and	O	O
newCapacity	O	O
will	O	O
be	O	O
a	O	O
negative	O	O
number	O	O
.	O	O
A	O	O
comparison	O	O
like	O	O
newCapacity	O	O
<	O	O
oldCapacity	O	O
will	O	O
incorrectly	O	O
evaluate	O	O
true	O	O
and	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
will	O	O
fail	O	O
to	O	O
grow	O	O
.	O	O
Instead	O	O
,	O	O
the	O	O
code	O	O
as	O	O
written	O	O
(	O	O
newCapacity	O	O
-	O	O
minCapacity	O	O
<	O	O
0	O	O
returns	O	O
false	O	O
)	O	O
will	O	O
allow	O	O
the	O	O
negative	O	O
value	O	O
of	O	O
newCapacity	O	O
to	O	O
be	O	O
further	O	O
evaluated	O	O
in	O	O
the	O	O
next	O	O
line	O	O
,	O	O
resulting	O	O
in	O	O
recalculating	O	O
newCapacity	O	O
by	O	O
invoking	O	O
hugeCapacity	O	O
(	O	O
newCapacity	O	O
=	O	O
hugeCapacity	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
)	O	O
to	O	O
allow	O	O
for	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
to	O	O
grow	O	O
up	O	O
to	O	O
MAX	O	O
_	O	O
ARRAY	O	O
_	O	O
SIZE	O	O
.	O	O
This	O	O
is	O	O
what	O	O
the	O	O
/	O	O
/	O	O
overflow	O	O
-	O	O
conscious	O	O
code	O	O
comment	O	O
is	O	O
trying	O	O
to	O	O
communicate	O	O
,	O	O
though	O	O
rather	O	O
obliquely	O	O
.	O	O
So	O	O
,	O	O
bottom	O	O
line	O	O
,	O	O
the	O	O
new	O	O
comparison	O	O
protects	O	O
against	O	O
allocating	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
larger	O	O
than	O	O
the	O	O
predefined	O	O
MAX	O	O
_	O	O
ARRAY	O	O
_	O	O
SIZE	O	O
while	O	O
allowing	O	O
it	O	O
to	O	O
grow	O	O
right	O	O
up	O	O
to	O	O
that	O	O
limit	O	O
if	O	O
needed	O	O
.	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29495065	O	O
#	O	O
li	O	O
It	O	O
is	O	O
checking	O	O
if	O	O
newType	O	O
is	O	O
array	O	O
of	O	O
Objects	O	B-api_mention
or	O	O
not	O	O
:	O	O
#	O	O
pre	O	O
Why	O	O
to	O	O
do	O	O
that	O	O
?	O	O
Because	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
n	O	O
]	O	O
is	O	O
faster	O	O
than	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
#	O	O
li	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
an	O	O
array	O	O
of	O	O
types	O	O
defined	O	O
by	O	O
the	O	O
first	O	O
argument	O	O
,	O	O
eg	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
class	I-api_mention	I-api_mention
-	O	O
>	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
Note	O	O
that	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	B-api_mention
class	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getComponentType	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
class	I-api_mention	I-api_mention
#	O	O
li	O	O
You	O	O
cannot	O	O
use	O	O
it	O	O
like	O	O
that	O	O
,	O	O
but	O	O
it	O	O
can	O	O
be	O	O
like	O	O
this	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
nums	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
in	O	O
this	O	O
case	O	O
it	O	O
depends	O	O
only	O	O
on	O	O
actual	O	O
type	O	O
of	O	O
elements	O	O
,	O	O
eg	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
will	O	O
fail	O	O
,	O	O
you	O	O
cannot	O	O
write	O	O
in	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
anything	O	O
but	O	O
Integer	B-api_mention	B-api_mention
Question	O	O
-	O	O
29922296	O	O
,	O	O
answer	O	O
-	O	O
29923793	O	O
I	O	O
think	O	O
the	O	O
shortest	O	O
code	O	O
to	O	O
get	O	O
a	O	O
Stream	B-api_mention	B-api_mention
of	O	O
enum	O	O
constants	O	O
is	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
It	O	O
'	O	O
s	O	O
not	O	O
as	O	O
nice	O	O
as	O	O
Letter	O	B-api_mention
.	B-api_mention	I-api_mention
values	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
that	O	O
'	O	O
s	O	O
an	O	O
issue	O	O
with	O	O
arrays	O	O
,	O	O
not	O	O
specifically	O	O
enums	O	O
.	O	O
#	O	O
blockquote	O	O
You	O	O
are	O	O
right	O	O
that	O	O
the	O	O
nicest	O	O
possible	O	O
call	O	O
would	O	O
be	O	O
Letter	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Unfortunately	O	O
a	O	O
class	O	O
cannot	O	O
have	O	O
two	O	O
methods	O	O
with	O	O
the	O	O
same	O	O
signature	O	O
,	O	O
so	O	O
it	O	O
would	O	O
not	O	O
be	O	O
possible	O	O
to	O	O
implicitly	O	O
add	O	O
a	O	O
static	O	O
method	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
every	O	O
enum	O	O
(	O	O
in	O	O
the	O	O
same	O	O
way	O	O
that	O	O
every	O	O
enum	O	O
has	O	O
an	O	O
implicitly	O	O
added	O	O
static	O	O
method	O	O
values	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
as	O	O
this	O	O
would	O	O
break	O	O
every	O	O
existing	O	O
enum	O	O
that	O	O
already	O	O
has	O	O
a	O	O
static	O	O
or	O	O
instance	O	O
method	O	O
without	O	O
parameters	O	O
called	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
#	O	O
blockquote	O	O
I	O	O
think	O	O
so	O	O
.	O	O
The	O	O
drawback	O	O
is	O	O
that	O	O
stream	O	O
is	O	O
a	O	O
static	O	O
method	O	O
,	O	O
so	O	O
there	O	O
is	O	O
no	O	O
way	O	O
to	O	O
avoid	O	O
code	O	O
duplication	O	O
;	O	O
it	O	O
would	O	O
have	O	O
to	O	O
be	O	O
added	O	O
to	O	O
every	O	O
enum	O	O
separately	O	O
.	O	O
Question	O	O
-	O	O
7283338	O	O
,	O	O
answer	O	O
-	O	O
7283475	O	O
Because	O	O
any	O	O
particular	O	O
implementation	O	O
of	O	O
Set	O	B-api_mention
may	O	O
or	O	O
may	O	O
not	O	O
be	O	O
random	O	O
access	O	O
.	O	O
You	O	O
can	O	O
always	O	O
get	O	O
an	O	O
iterator	O	O
and	O	O
step	O	O
through	O	O
the	O	O
Set	B-api_mention	O
,	O	O
using	O	O
the	O	O
iterators	O	O
'	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
return	O	O
the	O	O
result	O	O
you	O	O
want	O	O
once	O	O
you	O	O
find	O	O
the	O	O
equal	O	O
element	O	O
.	O	O
This	O	O
works	O	O
regardless	O	O
of	O	O
the	O	O
implementation	O	O
.	O	O
If	O	O
the	O	O
implementation	O	O
is	O	O
NOT	O	O
random	O	O
access	O	O
(	O	O
picture	O	O
a	O	O
linked	O	O
-	O	O
list	O	O
backed	O	O
Set	B-api_mention	B-api_mention
)	O	O
,	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
the	O	O
interface	O	O
would	O	O
be	O	O
deceptive	O	O
,	O	O
since	O	O
it	O	O
would	O	O
have	O	O
to	O	O
iterate	O	O
the	O	O
collection	O	O
to	O	O
find	O	O
the	O	O
element	O	O
to	O	O
return	O	O
,	O	O
and	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
seem	O	O
to	O	O
imply	O	O
this	O	O
would	O	O
be	O	O
necessary	O	O
,	O	O
that	O	O
the	O	O
Set	B-api_mention	B-api_mention
could	O	O
jump	O	O
directly	O	O
to	O	O
the	O	O
element	O	O
to	O	O
get	O	O
.	O	B-api_mention
contains	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
or	O	O
may	O	O
not	O	O
have	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
of	O	O
course	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
implementation	O	O
,	O	O
but	O	O
the	O	O
name	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
lend	O	O
itself	O	O
to	O	O
the	O	O
same	O	O
sort	O	O
of	O	O
misunderstandings	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
I	O	O
made	O	O
a	O	O
class	O	O
called	O	O
QuickRandom	B-api_mention	B-api_mention
,	O	O
and	O	O
its	O	O
job	O	O
is	O	O
to	O	O
produce	O	O
random	O	O
numbers	O	O
quickly	O	O
.	O	O
It	O	O
'	O	O
s	O	O
really	O	O
simple	O	O
:	O	O
just	O	O
take	O	O
the	O	O
old	O	O
value	O	O
,	O	O
multiply	O	O
by	O	O
a	O	O
double	O	O
,	O	O
and	O	O
take	O	O
the	O	O
decimal	O	O
part	O	O
.	O	O
Here	O	O
is	O	O
my	O	O
QuickRandom	B-api_mention	B-api_mention
class	O	O
in	O	O
its	O	O
entirety	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
is	O	O
the	O	O
code	O	O
I	O	O
wrote	O	O
to	O	O
test	O	O
it	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
a	O	O
very	O	O
simple	O	O
algorithm	O	O
that	O	O
simply	O	O
multiplies	O	O
the	O	O
previous	O	O
double	O	O
by	O	O
a	O	O
"	O	O
magic	O	O
number	O	O
"	O	O
double	O	O
.	O	O
I	O	O
threw	O	O
it	O	O
together	O	O
pretty	O	O
quickly	O	O
,	O	O
so	O	O
I	O	O
could	O	O
probably	O	O
make	O	O
it	O	O
better	O	O
,	O	O
but	O	O
strangely	O	O
,	O	O
it	O	O
seems	O	O
to	O	O
be	O	O
working	O	O
fine	O	O
.	O	O
This	O	O
is	O	O
sample	O	O
output	O	O
of	O	O
the	O	O
commented	O	O
-	O	O
out	O	O
lines	O	O
in	O	O
the	O	O
main	O	O
method	O	O
:	O	O
#	O	O
pre	O	O
Hm	O	O
.	O	O
Pretty	O	O
random	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
that	O	O
would	O	O
work	O	O
for	O	O
a	O	O
random	O	O
number	O	O
generator	O	O
in	O	O
a	O	O
game	O	O
.	O	O
Here	O	O
is	O	O
sample	O	O
output	O	O
of	O	O
the	O	O
non	O	O
-	O	O
commented	O	O
out	O	O
part	O	O
:	O	O
#	O	O
pre	O	O
Wow	O	O
!	O	O
It	O	O
performs	O	O
almost	O	O
4	O	O
times	O	O
faster	O	O
than	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
.	O	O
I	O	O
remember	O	O
reading	O	O
somewhere	O	O
that	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
used	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
tons	O	O
of	O	O
crazy	O	O
modulus	O	O
and	O	O
division	O	O
stuff	O	O
.	O	O
Is	O	O
that	O	O
really	O	O
necessary	O	O
?	O	O
My	O	O
algorithm	O	O
performs	O	O
a	O	O
lot	O	O
faster	O	O
and	O	O
it	O	O
seems	O	O
pretty	O	O
random	O	O
.	O	O
I	O	O
have	O	O
two	O	O
questions	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
my	O	O
algorithm	O	O
"	O	O
good	O	O
enough	O	O
"	O	O
(	O	O
for	O	O
,	O	O
say	O	O
,	O	O
a	O	O
game	O	O
,	O	O
where	O	O
really	O	O
random	O	O
numbers	O	O
aren	O	O
'	O	O
t	O	O
too	O	O
important	O	O
)	O	O
?	O	O
#	O	O
li	O	O
Why	O	O
does	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
do	O	O
so	O	O
much	O	O
when	O	O
it	O	O
seems	O	O
just	O	O
simple	O	O
multiplication	O	O
and	O	O
cutting	O	O
out	O	O
the	O	O
decimal	O	O
will	O	O
suffice	O	O
?	O	O
Question	O	O
-	O	O
5785745	O	O
,	O	O
answer	O	O
-	O	O
15962949	O	O
If	O	O
you	O	O
want	O	O
to	O	O
make	O	O
a	O	O
copy	O	O
of	O	O
:	O	O
int	O	O
[	O	O
]	O	O
a	O	O
=	O	O
{	O	O
1	O	O
,	O	O
2	O	O
,	O	O
3	O	O
,	O	O
4	O	O
,	O	O
5	O	O
}	O	O
;	O	O
This	O	O
is	O	O
the	O	O
way	O	O
to	O	O
go	O	O
:	O	O
int	O	O
[	O	O
]	O	O
b	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
may	O	O
be	O	O
faster	O	O
than	O	O
a	O	O
.	B-api_mention	B-api_mention
clone	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
small	O	O
arrays	O	O
.	O	O
Both	O	O
copy	O	O
elements	O	O
equally	O	O
fast	O	O
but	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
Object	B-api_mention	B-api_mention
so	O	O
the	O	O
compiler	O	O
has	O	O
to	O	O
insert	O	O
an	O	O
implicit	O	O
cast	O	O
to	O	O
int	O	O
[	O	O
]	O	O
.	O	O
You	O	O
can	O	O
see	O	O
it	O	O
in	O	O
the	O	O
bytecode	O	O
,	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489453	O	O
Java	O	O
treats	O	O
String	B-api_mention	B-api_mention
as	O	O
a	O	O
special	O	O
class	O	O
,	O	O
you	O	O
can	O	O
initialize	O	O
in	O	O
both	O	O
ways	O	O
#	O	O
li	O	O
Directly	O	O
assigning	O	O
literal	O	O
String	B-api_mention	B-api_mention
a	O	O
=	O	O
StringLiteral	O	O
;	O	O
#	O	O
li	O	O
As	O	O
other	O	O
Objects	B-api_mention	B-api_mention
using	O	O
new	O	O
keyword	O	O
String	B-api_mention	B-api_mention
a	O	O
=	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
need	O	O
to	O	O
take	O	O
special	O	O
care	O	O
when	O	O
you	O	O
wants	O	O
to	O	O
compare	O	O
with	O	O
=	O	O
=	O	O
sign	O	O
:	O	O
#	O	O
pre	O	O
That	O	O
is	O	O
because	O	O
in	O	O
first	O	O
case	O	O
the	O	O
objects	O	O
a	O	O
and	O	O
b	O	O
are	O	O
kept	O	O
in	O	O
something	O	O
called	O	O
literal	O	O
pool	O	O
and	O	O
they	O	O
both	O	O
are	O	O
referencing	O	O
same	O	O
object	O	O
so	O	O
they	O	O
are	O	O
equal	O	O
in	O	O
both	O	O
ways	O	O
.	O	O
But	O	O
in	O	O
second	O	O
case	O	O
a	O	O
and	O	O
b	O	O
references	O	O
different	O	O
objects	O	O
like	O	O
when	O	O
we	O	O
initialize	O	O
any	O	O
other	O	O
objects	O	O
.	O	O
so	O	O
they	O	O
are	O	O
unequal	O	O
when	O	O
compared	O	O
with	O	O
=	O	O
=	O	O
operator	O	O
whereas	O	O
they	O	O
are	O	O
equal	O	O
in	O	O
values	O	O
.	O	O
Question	O	O
-	O	O
29815636	O	O
,	O	O
answer	O	O
-	O	O
29815698	O	O
The	O	O
first	O	O
form	O	O
is	O	O
called	O	O
Javadoc	O	O
.	O	O
You	O	O
use	O	O
this	O	O
when	O	O
you	O	O
'	O	O
re	O	O
writing	O	O
formal	O	O
APIs	O	O
for	O	O
your	O	O
code	O	O
,	O	O
which	O	O
are	O	O
generated	O	O
by	O	O
the	O	O
javadoc	O	O
tool	O	O
.	O	O
For	O	O
an	O	O
example	O	O
,	O	O
the	O	O
Java	O	O
7	O	O
API	O	O
page	O	O
uses	O	O
Javadoc	O	O
and	O	O
was	O	O
generated	O	O
by	O	O
that	O	O
tool	O	O
.	O	O
Some	O	O
common	O	O
elements	O	O
you	O	O
'	O	O
d	O	O
see	O	O
in	O	O
Javadoc	O	O
include	O	O
:	O	O
#	O	O
li	O	O
@	O	O
param	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
what	O	O
parameters	O	O
are	O	O
being	O	O
passed	O	O
to	O	O
a	O	O
method	O	O
,	O	O
and	O	O
what	O	O
value	O	O
they	O	O
'	O	O
re	O	O
expected	O	O
to	O	O
have	O	O
#	O	O
li	O	O
@	O	O
return	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
what	O	O
result	O	O
the	O	O
method	O	O
is	O	O
going	O	O
to	O	O
give	O	O
back	O	O
#	O	O
li	O	O
@	O	O
throws	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
that	O	O
a	O	O
method	O	O
throws	O	O
an	O	O
exception	O	O
or	O	O
error	O	O
in	O	O
case	O	O
of	O	O
certain	O	O
input	O	O
#	O	O
li	O	O
@	O	O
since	O	O
:	O	O
this	O	O
is	O	O
used	O	O
to	O	O
indicate	O	O
the	O	O
earliest	O	O
Java	O	O
version	O	O
this	O	O
class	O	O
or	O	O
function	O	O
was	O	O
available	O	O
in	O	O
As	O	O
an	O	O
example	O	O
,	O	O
here	O	O
'	O	O
s	O	O
Javadoc	O	O
for	O	O
the	O	O
compare	O	O
method	O	O
of	O	O
Integer	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
The	O	O
second	O	O
form	O	O
is	O	O
a	O	O
block	O	O
(	O	O
multi	O	O
-	O	O
line	O	O
)	O	O
comment	O	O
.	O	O
You	O	O
use	O	O
this	O	O
if	O	O
you	O	O
want	O	O
to	O	O
have	O	O
multiple	O	O
lines	O	O
in	O	O
a	O	O
comment	O	O
.	O	O
I	O	O
will	O	O
say	O	O
that	O	O
you	O	O
'	O	O
d	O	O
only	O	O
want	O	O
to	O	O
use	O	O
the	O	O
latter	O	O
form	O	O
sparingly	O	O
;	O	O
that	O	O
is	O	O
,	O	O
you	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
overburden	O	O
your	O	O
code	O	O
with	O	O
block	O	O
comments	O	O
that	O	O
don	O	O
'	O	O
t	O	O
describe	O	O
what	O	O
behaviors	O	O
the	O	O
method	O	O
/	O	O
complex	O	O
function	O	O
is	O	O
supposed	O	O
to	O	O
have	O	O
.	O	O
Since	O	O
Javadoc	O	O
is	O	O
the	O	O
more	O	O
descriptive	O	O
of	O	O
the	O	O
two	O	O
,	O	O
and	O	O
you	O	O
can	O	O
generate	O	O
actual	O	O
documentation	O	O
as	O	O
a	O	O
result	O	O
of	O	O
using	O	O
it	O	O
,	O	O
using	O	O
Javadoc	O	O
would	O	O
be	O	O
more	O	O
preferable	O	O
to	O	O
simple	O	O
block	O	O
comments	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31924845	O	O
There	O	O
are	O	O
almost	O	O
no	O	O
good	O	O
reasons	O	O
for	O	O
not	O	O
using	O	O
Optional	B-api_mention	B-api_mention
as	O	O
parameters	O	O
.	O	O
The	O	O
arguments	O	O
against	O	O
this	O	O
rely	O	O
on	O	O
arguments	O	O
from	O	O
authority	O	O
(	O	O
see	O	O
Brian	O	O
Goetz	O	O
-	O	O
his	O	O
argument	O	O
is	O	O
we	O	O
can	O	O
'	O	O
t	O	O
enforce	O	O
non	O	O
null	O	O
optionals	O	O
)	O	O
or	O	O
that	O	O
the	O	O
Optional	B-api_mention	B-api_mention
arguments	O	O
may	O	O
be	O	O
null	O	O
(	O	O
essentially	O	O
the	O	O
same	O	O
argument	O	O
)	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
any	O	O
reference	O	O
in	O	O
Java	O	O
can	O	O
be	O	O
null	O	O
,	O	O
we	O	O
need	O	O
to	O	O
encourage	O	O
rules	O	O
being	O	O
enforced	O	O
by	O	O
the	O	O
compiler	O	O
,	O	O
not	O	O
programmers	O	O
memory	O	O
(	O	O
which	O	O
is	O	O
problematic	O	O
and	O	O
does	O	O
not	O	O
scale	O	O
)	O	O
.	O	O
Functional	O	O
programming	O	O
languages	O	O
encourage	O	O
Optional	B-api_mention	B-api_mention
parameters	O	O
.	O	O
One	O	O
of	O	O
the	O	O
best	O	O
ways	O	O
of	O	O
using	O	O
this	O	O
is	O	O
to	O	O
have	O	O
multiple	O	O
optional	O	O
parameters	O	O
and	O	O
using	O	O
liftM2	O	O
to	O	O
use	O	O
a	O	O
function	O	O
assuming	O	O
the	O	O
parameters	O	O
are	O	O
not	O	O
empty	O	O
and	O	O
returning	O	O
an	O	O
optional	O	O
(	O	O
see	O	O
#	O	O
a	O	O
)	O	O
.	O	O
Java	O	O
8	O	O
has	O	O
unfortunately	O	O
implemented	O	O
a	O	O
very	O	O
limited	O	O
library	O	O
supporting	O	O
optional	O	O
.	O	O
As	O	O
Java	O	O
programmers	O	O
we	O	O
should	O	O
only	O	O
be	O	O
using	O	O
null	O	O
to	O	O
interact	O	O
with	O	O
legacy	O	O
libraries	O	O
.	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
34405789	O	O
Set	B-api_mention	O
and	O	O
Map	B-api_mention	B-api_mention
are	O	O
non	O	O
-	O	O
linear	O	O
data	O	O
structure	O	O
.	O	O
List	B-api_mention	B-api_mention
is	O	O
linear	O	O
data	O	O
structure	O	O
.	O	O
The	O	O
tree	O	O
data	O	O
structure	O	O
SortedSet	B-api_mention	B-api_mention
and	O	O
SortedMap	B-api_mention	B-api_mention
interfaces	O	O
implements	O	O
TreeSet	B-api_mention	B-api_mention
and	O	O
TreeMap	B-api_mention	B-api_mention
respectively	O	O
using	O	O
used	O	O
Red	O	O
-	O	O
Black	O	O
tree	O	O
implementation	O	O
algorithm	O	O
.	O	O
So	O	O
it	O	O
ensure	O	O
that	O	O
there	O	O
are	O	O
no	O	O
duplicated	O	O
items	O	O
(	O	O
or	O	O
keys	O	O
in	O	O
case	O	O
of	O	O
Map	O	B-api_mention
)	O	O
.	O	O
#	O	O
li	O	O
Tree	O	O
by	O	O
definition	O	O
cannot	O	O
contain	O	O
duplicates	O	O
.	O	O
#	O	O
li	O	O
In	O	O
List	B-api_mention	O
we	O	O
can	O	O
have	O	O
duplicates	O	O
,	O	O
so	O	O
there	O	O
is	O	O
no	O	O
TreeList	B-api_mention	B-api_mention
.	O	O
So	O	O
if	O	O
we	O	O
want	O	O
to	O	O
sort	O	O
the	O	O
list	O	O
we	O	O
have	O	O
to	O	O
use	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
24651403	O	O
,	O	O
answer	O	O
-	O	O
24651855	O	O
OK	O	O
,	O	O
first	O	O
of	O	O
all	O	O
,	O	O
your	O	O
setExits	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
will	O	O
not	O	O
work	O	O
as	O	O
intended	O	O
,	O	O
chained	O	O
if	O	O
-	O	O
elseif	O	O
will	O	O
maximally	O	O
execute	O	O
1	O	O
branch	O	O
of	O	O
code	O	O
,	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Even	O	O
if	O	O
e	O	O
contains	O	O
both	O	O
N	O	O
and	O	O
W	O	O
,	O	O
only	O	O
bexits	O	O
[	O	O
0	O	O
]	O	O
will	O	O
be	O	O
set	O	O
.	O	O
Also	O	O
this	O	O
method	O	O
will	O	O
only	O	O
add	O	O
exits	O	O
(	O	O
for	O	O
example	O	O
calling	O	O
setExits	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
not	O	O
delete	O	O
any	O	O
existing	O	O
exits	O	O
.	O	O
I	O	O
would	O	O
change	O	O
that	O	O
method	O	O
to	O	O
:	O	O
#	O	O
pre	O	O
Also	O	O
,	O	O
i	O	O
definetly	O	O
wouldn	O	O
'	O	O
t	O	O
remember	O	O
that	O	O
north	O	O
is	O	O
on	O	O
index	O	O
0	O	O
,	O	O
west	O	O
in	O	O
on	O	O
1	O	O
,	O	O
.	O	O
.	O	O
.	O	O
so	O	O
a	O	O
common	O	O
practice	O	O
is	O	O
to	O	O
name	O	O
your	O	O
indexes	O	O
using	O	O
final	O	O
static	O	O
constants	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
you	O	O
can	O	O
write	O	O
in	O	O
your	O	O
setExits	B-api_mention	O
method	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
much	O	O
more	O	O
readible	O	O
)	O	O
Finally	O	O
,	O	O
if	O	O
you	O	O
want	O	O
your	O	O
code	O	O
even	O	O
more	O	O
well	O	O
-	O	O
arranged	O	O
,	O	O
you	O	O
can	O	O
make	O	O
a	O	O
Exits	B-api_mention	O
class	O	O
representing	O	O
avaliable	O	O
exits	O	O
,	O	O
and	O	O
backed	O	O
by	O	O
boolean	O	O
array	O	O
.	O	O
Then	O	O
on	O	O
place	O	O
where	O	O
you	O	O
create	O	O
your	O	O
String	B-api_mention	B-api_mention
,	O	O
you	O	O
could	O	O
create	O	O
this	O	O
class	O	O
instead	O	O
and	O	O
save	O	O
yourself	O	O
work	O	O
with	O	O
generating	O	O
and	O	O
then	O	O
parsing	O	O
a	O	O
string	O	O
.	O	O
EDIT	O	O
:	O	O
as	O	O
@	O	O
gexicide	O	O
answers	O	O
,	O	O
there	O	O
is	O	O
a	O	O
really	O	O
handy	O	O
class	O	O
EnumSet	B-api_mention	B-api_mention
which	O	O
would	O	O
be	O	O
probably	O	O
better	O	O
for	O	O
representing	O	O
the	O	O
exits	O	O
than	O	O
bollean	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
25903137	O	O
,	O	O
answer	O	O
-	O	O
25903190	O	O
#	O	O
pre	O	O
It	O	O
'	O	O
s	O	O
not	O	O
quite	O	O
as	O	O
nice	O	O
as	O	O
the	O	O
list	O	O
code	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
construct	O	O
new	O	O
Map	B-api_mention	B-api_mention
.	I-api_mention	O
Entry	I-api_mention	O
s	O	O
in	O	O
a	O	O
map	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
so	O	O
the	O	O
work	O	O
is	O	O
mixed	O	O
into	O	O
the	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
.	O	O
Question	O	O
-	O	O
31993377	O	O
,	O	O
answer	O	O
-	O	O
31993533	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
if	O	O
there	O	O
are	O	O
any	O	O
more	O	O
non	O	O
-	O	O
whitespace	O	O
characters	O	O
available	O	O
.	O	B-api_mention
hasNextLine	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
to	O	O
see	O	O
if	O	O
there	O	O
is	O	O
another	O	O
line	O	O
of	O	O
text	O	O
available	O	O
.	O	O
Your	O	O
text	O	O
file	O	O
probably	O	O
has	O	O
a	O	O
newline	O	O
at	O	O
the	O	O
end	O	O
of	O	O
it	O	O
so	O	O
it	O	O
has	O	O
another	O	O
line	O	O
but	O	O
no	O	O
more	O	O
characters	O	O
that	O	O
are	O	O
not	O	O
whitespace	O	O
.	O	O
Many	O	O
text	O	O
editors	O	O
automatically	O	O
add	O	O
a	O	O
newline	O	O
to	O	O
the	O	O
end	O	O
of	O	O
a	O	O
file	O	O
if	O	O
there	O	O
isn	O	O
'	O	O
t	O	O
one	O	O
already	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
your	O	O
input	O	O
file	O	O
is	O	O
not	O	O
this	O	O
(	O	O
the	O	O
numbers	O	O
are	O	O
line	O	O
numbers	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
actually	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14847046	O	O
Most	O	O
of	O	O
the	O	O
time	O	O
we	O	O
use	O	O
a	O	O
constructor	O	O
to	O	O
create	O	O
a	O	O
new	O	O
empty	O	O
map	O	O
.	O	O
But	O	O
the	O	O
Collections	B-api_mention	B-api_mention
methods	O	O
offer	O	O
a	O	O
couple	O	O
of	O	O
advantages	O	O
to	O	O
create	O	O
an	O	O
empty	O	O
map	O	O
using	O	O
static	O	O
method	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
emptyMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
blockquote	O	O
Question	O	O
-	O	O
4772425	O	O
,	O	O
answer	O	O
-	O	O
18953213	O	O
remove	O	O
one	O	O
y	O	O
form	O	O
SimpleDateFormat	B-api_mention	B-api_mention
dt1	O	O
=	O	O
new	O	O
SimpleDateFormat	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
should	O	O
be	O	O
SimpleDateFormat	B-api_mention	B-api_mention
dt1	O	O
=	O	O
new	O	O
SimpleDateFormat	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
30581531	O	O
What	O	O
is	O	O
the	O	O
maximum	O	O
number	O	O
of	O	O
parameters	O	O
that	O	O
a	O	O
method	O	O
in	O	O
Java	O	O
can	O	O
have	O	O
and	O	O
why	O	O
?	O	O
I	O	O
am	O	O
using	O	O
Java	O	O
1	O	O
.	O	O
8	O	O
on	O	O
a	O	O
64	O	O
-	O	O
bit	O	O
Windows	O	O
system	O	O
.	O	O
All	O	O
the	O	O
answers	O	O
on	O	O
StackOverflow	O	B-api_mention
about	O	O
this	O	O
say	O	O
that	O	O
the	O	O
technical	O	O
limit	O	O
is	O	O
255	O	O
parameters	O	O
without	O	O
specifying	O	O
why	O	O
.	O	O
To	O	O
be	O	O
precise	O	O
,	O	O
255	O	O
for	O	O
static	O	O
and	O	O
254	O	O
for	O	O
non	O	O
-	O	O
static	O	O
(	O	O
this	O	O
will	O	O
be	O	O
the	O	O
255th	O	O
in	O	O
this	O	O
case	O	O
)	O	O
methods	O	O
.	O	O
I	O	O
thought	O	O
this	O	O
could	O	O
be	O	O
specified	O	O
in	O	O
some	O	O
sort	O	O
of	O	O
specification	O	O
and	O	O
that	O	O
this	O	O
was	O	O
simply	O	O
a	O	O
statically	O	O
defined	O	O
maximum	O	O
number	O	O
of	O	O
parameters	O	O
allowed	O	O
.	O	O
But	O	O
this	O	O
was	O	O
only	O	O
valid	O	O
for	O	O
int	O	O
and	O	O
all	O	O
4	O	O
-	O	O
bytes	O	O
types	O	O
.	O	O
I	O	O
did	O	O
some	O	O
tests	O	O
with	O	O
long	O	O
parameters	O	O
,	O	O
and	O	O
I	O	O
was	O	O
only	O	O
able	O	O
to	O	O
declare	O	O
127	O	O
parameters	O	O
in	O	O
that	O	O
case	O	O
.	O	O
With	O	O
String	B-api_mention	B-api_mention
parameters	O	O
,	O	O
the	O	O
allowed	O	O
number	O	O
i	O	O
deduced	O	O
from	O	O
testing	O	O
is	O	O
255	O	O
(	O	O
it	O	O
may	O	O
be	O	O
because	O	O
the	O	O
reference	O	O
size	O	O
is	O	O
4	O	O
bytes	O	O
in	O	O
Java	O	O
?	O	O
)	O	O
.	O	O
But	O	O
since	O	O
I	O	O
am	O	O
using	O	O
a	O	O
64	O	O
-	O	O
bit	O	O
system	O	O
,	O	O
references	O	O
size	O	O
should	O	O
be	O	O
8	O	O
bytes	O	O
wide	O	O
and	O	O
so	O	O
with	O	O
String	B-api_mention	B-api_mention
parameters	O	O
the	O	O
maximum	O	O
allowed	O	O
number	O	O
should	O	O
be	O	O
127	O	O
,	O	O
similar	O	O
to	O	O
long	O	O
types	O	O
.	O	O
How	O	O
does	O	O
this	O	O
limit	O	O
is	O	O
exactly	O	O
applied	O	O
?	O	O
Does	O	O
the	O	O
limit	O	O
have	O	O
anything	O	O
to	O	O
do	O	O
with	O	O
the	O	O
stack	O	O
size	O	O
of	O	O
the	O	O
method	O	O
?	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
not	O	O
really	O	O
going	O	O
to	O	O
use	O	O
these	O	O
many	O	O
parameters	O	O
in	O	O
any	O	O
method	O	O
,	O	O
but	O	O
this	O	O
question	O	O
is	O	O
only	O	O
to	O	O
clarify	O	O
the	O	O
exact	O	O
behavior	O	O
.	O	O
Question	O	O
-	O	O
34509566	O	O
,	O	O
answer	O	O
-	O	O
34509655	O	O
As	O	O
you	O	O
said	O	O
internally	O	O
the	O	O
last	O	O
concatenation	O	O
is	O	O
done	O	O
to	O	O
something	O	O
similar	O	O
to	O	O
String	B-api_mention	B-api_mention
e	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
the	O	O
implementation	O	O
of	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
StringBuilder	B-api_mention	B-api_mention
creates	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
.	O	O
Here	O	O
is	O	O
the	O	O
implementation	O	O
.	O	O
#	O	O
pre	O	O
Comparing	O	O
strings	O	O
using	O	O
=	O	O
=	O	O
instead	O	O
of	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
true	O	O
only	O	O
if	O	O
both	O	O
strings	O	O
are	O	O
the	O	O
same	O	O
.	O	O
In	O	O
this	O	O
case	O	O
they	O	O
are	O	O
not	O	O
the	O	O
same	O	O
because	O	O
the	O	O
second	O	O
string	O	O
is	O	O
created	O	O
as	O	O
a	O	O
new	O	O
object	O	O
of	O	O
type	O	O
String	B-api_mention	B-api_mention
.	O	O
The	O	O
other	O	O
concatenations	O	O
are	O	O
performed	O	O
directly	O	O
by	O	O
the	O	O
compiler	O	O
so	O	O
no	O	O
new	O	O
String	B-api_mention	B-api_mention
is	O	O
created	O	O
.	O	O
Question	O	O
-	O	O
33147339	O	O
,	O	O
answer	O	O
-	O	O
33147610	O	O
a	O	O
<	O	O
b	O	O
and	O	O
a	O	O
-	O	O
b	O	O
<	O	O
0	O	O
can	O	O
mean	O	O
two	O	O
different	O	O
things	O	O
.	O	O
Consider	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
When	O	O
run	O	O
,	O	O
this	O	O
will	O	O
only	O	O
print	O	O
a	O	O
-	O	O
b	O	O
<	O	O
0	O	O
.	O	O
What	O	O
happens	O	O
is	O	O
that	O	O
a	O	O
<	O	O
b	O	O
is	O	O
clearly	O	O
false	O	O
,	O	O
but	O	O
a	O	O
-	O	O
b	O	O
overflows	O	O
and	O	O
becomes	O	O
-	O	O
1	O	O
,	O	O
which	O	O
is	O	O
negative	O	O
.	O	O
Now	O	O
,	O	O
having	O	O
said	O	O
that	O	O
,	O	O
consider	O	O
that	O	O
the	O	O
array	O	O
has	O	O
a	O	O
length	O	O
that	O	O
is	O	O
really	O	O
close	O	O
to	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
The	O	O
code	O	O
in	O	O
ArrayList	B-api_mention	B-api_mention
goes	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
oldCapacity	O	O
is	O	O
really	O	O
close	O	O
to	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
so	O	O
newCapacity	O	O
(	O	O
which	O	O
is	O	O
oldCapacity	O	O
+	O	O
0	O	O
.	O	O
5	O	O
*	O	O
oldCapacity	O	O
)	O	O
might	O	O
overflow	O	O
and	O	O
become	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
negative	O	O
)	O	O
.	O	O
Then	O	O
,	O	O
subtracting	O	O
minCapacity	O	O
underflows	O	O
back	O	O
into	O	O
a	O	O
positive	O	O
number	O	O
.	O	O
This	O	O
check	O	O
ensures	O	O
that	O	O
the	O	O
if	O	O
is	O	O
not	O	O
executed	O	O
.	O	O
If	O	O
the	O	O
code	O	O
were	O	O
written	O	O
as	O	O
if	O	O
(	O	O
args	O	O
)	O	O
,	O	O
it	O	O
would	O	O
be	O	O
true	O	O
in	O	O
this	O	O
case	O	O
(	O	O
since	O	O
newCapacity	O	O
is	O	O
negative	O	O
)	O	O
so	O	O
the	O	O
newCapacity	O	O
would	O	O
be	O	O
forced	O	O
to	O	O
minCapacity	O	O
regardless	O	O
of	O	O
the	O	O
oldCapacity	O	O
.	O	O
This	O	O
overflow	O	O
case	O	O
is	O	O
handled	O	O
by	O	O
the	O	O
next	O	O
if	O	O
.	O	O
When	O	O
newCapacity	O	O
has	O	O
overflowed	O	O
,	O	O
this	O	O
will	O	O
be	O	O
true	O	O
:	O	O
MAX	O	O
_	O	O
ARRAY	O	O
_	O	O
SIZE	O	O
is	O	O
defined	O	O
as	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
-	O	O
8	O	O
and	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
-	O	O
(	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
-	O	O
8	O	O
)	O	O
>	O	O
0	O	O
is	O	O
true	O	O
.	O	O
The	O	O
newCapacity	O	O
is	O	O
therefore	O	O
rightly	O	O
handled	O	O
:	O	O
hugeCapacity	O	O
method	O	O
returns	O	O
MAX	O	O
_	O	O
ARRAY	O	O
_	O	O
SIZE	O	O
or	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
NB	O	O
:	O	O
this	O	O
is	O	O
what	O	O
the	O	O
/	O	O
/	O	O
overflow	O	O
-	O	O
conscious	O	O
code	O	O
comment	O	O
in	O	O
this	O	O
method	O	O
is	O	O
saying	O	O
.	O	O
Question	O	O
-	O	O
32475166	O	O
,	O	O
answer	O	O
-	O	O
32476850	O	O
When	O	O
you	O	O
think	O	O
about	O	O
the	O	O
type	O	O
of	O	O
the	O	O
operands	O	O
,	O	O
the	O	O
problem	O	O
becomes	O	O
more	O	O
apparent	O	O
:	O	O
this	O	O
.	O	O
method	O	O
!	O	O
=	O	O
null	O	O
?	O	O
this	O	O
.	O	O
method	O	O
:	O	O
this	O	O
.	O	O
constructor	O	O
has	O	O
as	O	O
type	O	O
the	O	O
most	O	O
specialized	O	O
common	O	O
type	O	O
of	O	O
both	O	O
the	O	O
operands	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
the	O	O
most	O	O
specialized	O	O
type	O	O
common	O	O
to	O	O
both	O	O
this	O	O
.	O	O
method	O	O
and	O	O
this	O	O
.	O	O
constructor	O	O
.	O	O
In	O	O
Java	O	O
7	O	O
this	O	O
is	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reflect	I-api_mention	I-api_mention
.	I-api_mention	O
Member	I-api_mention	O
,	O	O
however	O	O
the	O	O
Java	O	O
8	O	O
class	O	O
library	O	O
introduces	O	O
a	O	O
new	O	O
type	O	O
java	O	O
.	O	O
lang	O	O
.	O	O
reflect	O	O
.	O	O
Executable	O	O
which	O	O
is	O	O
more	O	O
specialized	O	O
than	O	O
the	O	O
generic	O	O
Member	O	B-api_mention
.	O	O
Hence	O	O
with	O	O
a	O	O
Java	O	O
8	O	O
class	O	O
library	O	O
the	O	O
result	O	O
type	O	O
of	O	O
the	O	O
ternary	O	O
expression	O	O
is	O	O
Executable	O	O
rather	O	O
than	O	O
Member	O	B-api_mention
.	O	O
Some	O	O
(	O	O
pre	O	O
-	O	O
release	O	O
)	O	O
versions	O	O
of	O	O
the	O	O
Java	O	O
8	O	O
compiler	O	O
seem	O	O
to	O	O
have	O	O
produced	O	O
an	O	O
explicit	O	O
reference	O	O
to	O	O
Executable	O	O
inside	O	O
generated	O	O
code	O	O
when	O	O
compiling	O	O
the	O	O
ternary	O	O
operator	O	O
.	O	O
This	O	O
would	O	O
trigger	O	O
a	O	O
class	O	O
load	O	O
,	O	O
and	O	O
thus	O	O
in	O	O
turn	O	O
a	O	O
ClassNotFoundException	B-api_mention	B-api_mention
at	O	O
runtime	O	O
when	O	O
running	O	O
with	O	O
a	O	O
class	O	O
library	O	O
<	O	O
JDK	O	O
8	O	O
,	O	O
because	O	O
Executable	O	B-api_mention
only	O	O
exists	O	O
for	O	O
JDK	O	O
≥	O	O
8	O	O
.	O	O
As	O	O
noted	O	O
by	O	O
Tagir	O	O
Valeev	O	O
in	O	O
this	O	O
answer	O	O
,	O	O
this	O	O
is	O	O
actually	O	O
a	O	O
bug	O	O
in	O	O
pre	O	O
-	O	O
release	O	O
versions	O	O
of	O	O
JDK	O	O
8	O	O
and	O	O
has	O	O
since	O	O
been	O	O
fixed	O	O
,	O	O
so	O	O
both	O	O
the	O	O
if	O	O
-	O	O
else	O	O
workaround	O	O
and	O	O
the	O	O
explanatory	O	O
comment	O	O
are	O	O
now	O	O
obsolete	O	O
.	O	O
Additional	O	O
note	O	O
:	O	O
One	O	O
might	O	O
come	O	O
to	O	O
the	O	O
conclusion	O	O
that	O	O
this	O	O
compiler	O	O
bug	O	O
was	O	O
present	O	O
before	O	O
Java	O	O
8	O	O
.	O	O
However	O	O
,	O	O
the	O	O
byte	O	O
code	O	O
generated	O	O
for	O	O
the	O	O
ternary	O	O
by	O	O
OpenJDK	O	O
7	O	O
is	O	O
the	O	O
same	O	O
as	O	O
the	O	O
byte	O	O
code	O	O
generated	O	O
by	O	O
OpenJDK	O	O
8	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
the	O	O
type	O	O
of	O	O
the	O	O
expression	O	O
goes	O	O
completely	O	O
unmentioned	O	O
at	O	O
runtime	O	O
,	O	O
the	O	O
code	O	O
is	O	O
really	O	O
only	O	O
test	O	O
,	O	O
branch	O	O
,	O	O
load	O	O
,	O	O
return	O	O
without	O	O
any	O	O
additional	O	O
checks	O	O
going	O	O
on	O	O
.	O	O
So	O	O
rest	O	O
assured	O	O
that	O	O
this	O	O
is	O	O
not	O	O
a	O	O
problem	O	O
(	O	O
anymore	O	O
)	O	O
and	O	O
indeed	O	O
seems	O	O
to	O	O
have	O	O
been	O	O
a	O	O
temporary	O	O
problem	O	O
during	O	O
development	O	O
of	O	O
Java	O	O
8	O	O
.	O	O
Question	O	O
-	O	O
32714194	O	O
,	O	O
answer	O	O
-	O	O
32714537	O	O
While	O	O
currently	O	O
most	O	O
of	O	O
Java	O	O
compilers	O	O
using	O	O
StringBuilder	B-api_mention	B-api_mention
chain	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
specified	O	O
that	O	O
it	O	O
should	O	O
be	O	O
always	O	O
in	O	O
this	O	O
way	O	O
.	O	O
In	O	O
particular	O	O
there	O	O
'	O	O
s	O	O
a	O	O
proposal	O	O
to	O	O
change	O	O
this	O	O
drastically	O	O
in	O	O
Java	O	O
-	O	O
9	O	O
replacing	O	O
with	O	O
single	O	O
invokedynamic	O	O
call	O	O
and	O	O
introduce	O	O
new	O	O
metafactory	O	O
which	O	O
will	O	O
generate	O	O
an	O	O
appropriate	O	O
MethodHandle	O	B-api_mention
in	O	O
runtime	O	O
to	O	O
perform	O	O
concatenation	O	O
.	O	O
Question	O	O
-	O	O
15430247	O	O
,	O	O
answer	O	O
-	O	O
15430259	O	O
If	O	O
you	O	O
know	O	O
in	O	O
advance	O	O
what	O	O
the	O	O
size	O	O
of	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
going	O	O
to	O	O
be	O	O
,	O	O
it	O	O
is	O	O
more	O	O
efficient	O	O
to	O	O
specify	O	O
the	O	O
initial	O	O
capacity	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
,	O	O
the	O	O
internal	O	O
array	O	O
will	O	O
have	O	O
to	O	O
be	O	O
repeatedly	O	O
reallocated	O	O
as	O	O
the	O	O
list	O	O
grows	O	O
.	O	O
The	O	O
larger	O	O
the	O	O
final	O	O
list	O	O
,	O	O
the	O	O
more	O	O
time	O	O
you	O	O
save	O	O
by	O	O
avoiding	O	O
the	O	O
reallocations	O	O
.	O	O
That	O	O
said	O	O
,	O	O
even	O	O
without	O	O
pre	O	O
-	O	O
allocation	O	O
,	O	O
inserting	O	O
n	O	O
elements	O	O
at	O	O
the	O	O
back	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
guaranteed	O	O
to	O	O
take	O	O
total	O	O
O	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
time	O	O
.	O	O
In	O	O
other	O	O
words	O	O
,	O	O
appending	O	O
an	O	O
element	O	O
is	O	O
an	O	O
amortized	O	O
constant	O	O
-	O	O
time	O	O
operation	O	O
.	O	O
This	O	O
is	O	O
achieved	O	O
by	O	O
having	O	O
each	O	O
reallocation	O	O
increase	O	O
the	O	O
size	O	O
of	O	O
the	O	O
array	O	O
exponentially	O	O
,	O	O
typically	O	O
by	O	O
a	O	O
factor	O	O
of	O	O
1	O	O
.	O	O
5	O	O
.	O	O
With	O	O
this	O	O
approach	O	O
,	O	O
the	O	O
total	O	O
number	O	O
of	O	O
operations	O	O
can	O	O
be	O	O
shown	O	O
to	O	O
be	O	O
O	O	O
(	O	O
n	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
20363719	O	O
,	O	O
answer	O	O
-	O	O
34675066	O	O
I	O	O
was	O	O
trying	O	O
to	O	O
do	O	O
this	O	O
and	O	O
found	O	O
that	O	O
,	O	O
using	O	O
the	O	O
answers	O	O
above	O	O
,	O	O
when	O	O
using	O	O
Functions	O	B-api_mention
.	B-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
the	O	O
key	O	O
to	O	O
the	O	O
Map	B-api_mention	O
,	O	O
then	O	O
I	O	O
had	O	O
issues	O	O
with	O	O
using	O	O
a	O	O
local	O	O
method	O	O
like	O	O
this	O	O
:	O	O
:	O	O
localMethodName	O	O
to	O	O
actually	O	O
work	O	O
because	O	O
of	O	O
typing	O	O
issues	O	O
.	O	O
Functions	O	O
.	B-api_mention	B-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
actually	O	O
does	O	O
something	O	O
to	O	O
the	O	O
typing	O	O
in	O	O
this	O	O
case	O	O
so	O	O
the	O	O
method	O	O
would	O	O
only	O	O
work	O	O
by	O	O
returning	O	O
Object	B-api_mention	B-api_mention
and	O	O
accepting	O	O
a	O	O
param	O	O
of	O	O
Object	B-api_mention	B-api_mention
To	O	O
solve	O	O
this	O	O
,	O	O
I	O	O
ended	O	O
up	O	O
ditching	O	O
Functions	O	B-api_mention
.	B-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
using	O	O
s	O	O
-	O	O
>	O	O
s	O	O
instead	O	O
.	O	O
So	O	O
my	O	O
code	O	O
,	O	O
in	O	O
my	O	O
case	O	O
to	O	O
list	O	O
all	O	O
directories	O	O
inside	O	O
a	O	O
directory	O	O
,	O	O
and	O	O
for	O	O
each	O	O
one	O	O
use	O	O
the	O	O
name	O	O
of	O	O
the	O	O
directory	O	O
as	O	O
the	O	O
key	O	O
to	O	O
the	O	O
map	O	O
and	O	O
then	O	O
call	O	O
a	O	O
method	O	O
with	O	O
the	O	O
directory	O	O
name	O	O
and	O	O
return	O	O
a	O	O
collection	O	O
of	O	O
items	O	O
,	O	O
looks	O	O
like	O	O
:	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
items	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
12539365	O	O
,	O	O
answer	O	O
-	O	O
29349910	O	O
I	O	O
must	O	O
say	O	O
,	O	O
that	O	O
you	O	O
are	O	O
absolutely	O	O
right	O	O
from	O	O
a	O	O
classical	O	O
approach	O	O
'	O	O
s	O	O
point	O	O
of	O	O
view	O	O
:	O	O
#	O	O
li	O	O
If	O	O
you	O	O
first	O	O
create	O	O
(	O	O
or	O	O
change	O	O
)	O	O
business	O	O
logic	O	O
of	O	O
your	O	O
application	O	O
and	O	O
then	O	O
cover	O	O
it	O	O
with	O	O
(	O	O
adopt	O	O
)	O	O
tests	O	O
(	O	O
Test	O	O
-	O	O
Last	O	O
approach	O	O
)	O	O
,	O	O
then	O	O
it	O	O
will	O	O
be	O	O
very	O	O
painful	O	O
and	O	O
dangerous	O	O
to	O	O
let	O	O
tests	O	O
know	O	O
anything	O	O
about	O	O
how	O	O
your	O	O
software	O	O
works	O	O
,	O	O
other	O	O
than	O	O
checking	O	O
inputs	O	O
and	O	O
outputs	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
are	O	O
practicing	O	O
a	O	O
Test	O	O
-	O	O
Driven	O	O
approach	O	O
,	O	O
then	O	O
your	O	O
tests	O	O
are	O	O
the	O	O
first	O	O
to	O	O
be	O	O
written	O	O
,	O	O
to	O	O
be	O	O
changed	O	O
and	O	O
to	O	O
reflect	O	O
the	O	O
use	O	O
cases	O	O
of	O	O
your	O	O
software	O	O
'	O	O
s	O	O
functionality	O	O
.	O	O
The	O	O
implementation	O	O
depends	O	O
on	O	O
tests	O	O
.	O	O
That	O	O
sometimes	O	O
mean	O	O
,	O	O
that	O	O
you	O	O
want	O	O
your	O	O
software	O	O
to	O	O
be	O	O
implemented	O	O
in	O	O
some	O	O
particular	O	O
way	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
rely	O	O
on	O	O
some	O	O
other	O	O
component	O	O
'	O	O
s	O	O
method	O	O
or	O	O
even	O	O
call	O	O
it	O	O
a	O	O
particular	O	O
amount	O	O
of	O	O
times	O	O
.	O	O
That	O	O
is	O	O
where	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
comes	O	O
in	O	O
handy	O	O
!	O	O
It	O	O
is	O	O
important	O	O
to	O	O
remember	O	O
,	O	O
that	O	O
there	O	O
are	O	O
no	O	O
universal	O	O
tools	O	O
.	O	O
The	O	O
type	O	O
of	O	O
software	O	O
,	O	O
it	O	O
'	O	O
s	O	O
size	O	O
,	O	O
company	O	O
goals	O	O
and	O	O
market	O	O
situation	O	O
,	O	O
team	O	O
skills	O	O
and	O	O
many	O	O
other	O	O
things	O	O
influence	O	O
the	O	O
decision	O	O
on	O	O
which	O	O
approach	O	O
to	O	O
use	O	O
at	O	O
your	O	O
particular	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
25850328	O	O
,	O	O
answer	O	O
-	O	O
25853827	O	O
I	O	O
would	O	O
argue	O	O
first	O	O
-	O	O
off	O	O
that	O	O
Serializable	B-api_mention	B-api_mention
and	O	O
Cloneable	B-api_mention	B-api_mention
are	O	O
bad	O	O
examples	O	O
of	O	O
marker	O	O
interfaces	O	O
.	O	O
Sure	O	O
,	O	O
they	O	O
'	O	O
re	O	O
interfaces	O	O
with	O	O
methods	O	O
,	O	O
but	O	O
they	O	O
imply	O	O
methods	O	O
,	O	O
such	O	O
as	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
(	O	O
The	O	O
compiler	O	O
will	O	O
create	O	O
a	O	O
writeObject	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
for	O	O
you	O	O
if	O	O
you	O	O
don	O	O
'	O	O
t	O	O
override	O	O
it	O	O
,	O	O
and	O	O
all	O	O
objects	O	O
already	O	O
have	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
the	O	O
compiler	O	O
will	O	O
again	O	O
create	O	O
a	O	O
real	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
for	O	O
you	O	O
but	O	O
with	O	O
caveats	O	O
.	O	O
Both	O	O
of	O	O
these	O	O
are	O	O
weird	O	O
edge	O	O
cases	O	O
that	O	O
really	O	O
aren	O	O
'	O	O
t	O	O
good	O	O
design	O	O
examples	O	O
.	O	O
)	O	O
Marker	O	O
interfaces	O	O
are	O	O
generally	O	O
used	O	O
for	O	O
one	O	O
of	O	O
two	O	O
purposes	O	O
:	O	O
1	O	O
)	O	O
As	O	O
a	O	O
shortcut	O	O
to	O	O
avoid	O	O
an	O	O
excessively	O	O
long	O	O
type	O	O
,	O	O
which	O	O
can	O	O
happen	O	O
with	O	O
lots	O	O
of	O	O
generics	O	O
.	O	O
For	O	O
instance	O	O
,	O	O
say	O	O
you	O	O
have	O	O
this	O	O
method	O	O
signature	O	O
:	O	O
public	O	O
void	O	O
doSomething	O	O
(	O	O
args	O	O
)	O	O
{	O	O
.	O	O
.	O	O
.	O	O
}	O	O
That	O	O
'	O	O
s	O	O
messy	O	O
and	O	O
annoying	O	O
to	O	O
type	O	O
,	O	O
and	O	O
more	O	O
importantly	O	O
,	O	O
difficult	O	O
to	O	O
understand	O	O
.	O	O
Consider	O	O
this	O	O
instead	O	O
:	O	O
public	O	O
interface	O	O
Widget	O	O
extends	O	O
Foobar	O	O
<	O	O
T	O	O
>	O	O
{	O	O
}	O	O
Then	O	O
your	O	O
method	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
public	O	O
void	O	O
doSomething	O	O
(	O	O
args	O	O
)	O	O
{	O	O
.	O	O
.	O	O
.	O	O
}	O	O
Not	O	O
only	O	O
is	O	O
it	O	O
clearer	O	O
,	O	O
but	O	O
you	O	O
can	O	O
now	O	O
Javadoc	O	O
the	O	O
Widget	B-api_mention	O
interface	O	O
,	O	O
and	O	O
it	O	O
'	O	O
s	O	O
also	O	O
easier	O	O
to	O	O
search	O	O
for	O	O
all	O	O
occurrences	O	O
in	O	O
your	O	O
code	O	O
of	O	O
Widget	B-api_mention	O
.	O	O
2	O	O
)	O	O
Marker	B-api_mention	B-api_mention
interfaces	O	O
can	O	O
also	O	O
be	O	O
used	O	O
as	O	O
a	O	O
way	O	O
around	O	O
Java	O	O
'	O	O
s	O	O
lack	O	O
of	O	O
intersection	O	O
types	O	O
.	O	O
With	O	O
a	O	O
marker	B-api_mention	B-api_mention
interface	O	O
,	O	O
you	O	O
can	O	O
require	O	O
something	O	O
to	O	O
be	O	O
of	O	O
two	O	O
different	O	O
types	O	O
,	O	O
such	O	O
as	O	O
in	O	O
a	O	O
method	O	O
signature	O	O
.	O	O
Say	O	O
you	O	O
have	O	O
some	O	O
interface	O	O
Widget	B-api_mention	O
in	O	O
your	O	O
application	O	O
,	O	O
like	O	O
we	O	O
described	O	O
above	O	O
.	O	O
If	O	O
you	O	O
have	O	O
a	O	O
method	O	O
that	O	O
requires	O	O
a	O	O
Widget	B-api_mention	O
that	O	O
also	O	O
happens	O	O
to	O	O
let	O	O
you	O	O
iterate	O	O
over	O	O
it	O	O
(	O	O
it	O	O
'	O	O
s	O	O
contrived	O	O
,	O	O
but	O	O
work	O	O
with	O	O
me	O	O
here	O	O
)	O	O
,	O	O
your	O	O
only	O	O
good	O	O
solution	O	O
is	O	O
to	O	O
create	O	O
a	O	O
marker	O	B-api_mention
interface	O	O
that	O	O
extends	O	O
both	O	O
interfaces	O	O
:	O	O
public	O	O
interface	O	O
IterableWidget	B-api_mention	B-api_mention
extends	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
Widget	B-api_mention	O
{	O	O
}	O	O
And	O	O
in	O	O
your	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8275499	O	O
,	O	O
answer	O	O
-	O	O
8275508	O	O
Just	O	O
use	O	O
TheClassName	O	B-api_mention
.	O	I-api_mention
class	O	I-api_mention
instead	O	O
of	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
20129762	O	O
,	O	O
answer	O	O
-	O	O
20130475	O	O
To	O	O
convert	O	O
a	O	O
Stream	B-api_mention	B-api_mention
to	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
do	O	O
#	O	O
pre	O	O
To	O	O
pass	O	O
a	O	O
Stream	B-api_mention	B-api_mention
to	O	O
a	O	O
method	O	O
that	O	O
expects	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
void	O	O
foo	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
simply	O	O
foo	O	O
(	O	O
args	O	O
)	O	O
however	O	O
it	O	O
probably	O	O
looks	O	O
funny	O	O
;	O	O
it	O	O
might	O	O
be	O	O
better	O	O
to	O	O
be	O	O
a	O	O
little	O	O
bit	O	O
more	O	O
explicit	O	O
foo	O	O
(	O	O
args	O	O
)	O	O
;	O	O
Question	O	O
-	O	O
22929237	O	O
,	O	O
answer	O	O
-	O	O
28564046	O	O
You	O	O
can	O	O
use	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
as	O	O
:	O	O
Date	B-api_mention	B-api_mention
date	O	O
=	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
No	O	O
need	O	O
to	O	O
add	O	O
time	O	O
and	O	O
time	O	O
zone	O	O
info	O	O
here	O	O
because	O	O
they	O	O
are	O	O
taken	O	O
implicitly	O	O
.	O	O
See	O	O
Simpliest	O	O
java8	O	O
LocalDate	B-api_mention	B-api_mention
to	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
conversion	O	O
and	O	O
vice	O	O
versa	O	O
?	O	O
Question	O	O
-	O	O
22036885	O	O
,	O	O
answer	O	O
-	O	O
22037068	O	O
As	O	O
said	O	O
in	O	O
API	O	O
#	O	O
blockquote	O	O
It	O	O
'	O	O
s	O	O
because	O	O
of	O	O
cannot	O	O
represent	O	O
double	O	O
value	O	O
exactly	O	O
.	O	O
So	O	O
you	O	O
have	O	O
to	O	O
use	O	O
BigDecimal	B-api_mention	B-api_mention
bigDecimal	O	O
=	O	O
BigDecimal	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
of	O	O
BigDecimal	B-api_mention	B-api_mention
bigDecimal	O	O
=	O	O
new	O	O
BigDecimal	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
31170459	O	O
I	O	O
was	O	O
testing	O	O
boundary	O	O
conditions	O	O
on	O	O
some	O	O
code	O	O
involving	O	O
a	O	O
BigDecimal	B-api_mention	B-api_mention
,	O	O
and	O	O
I	O	O
noticed	O	O
that	O	O
when	O	O
a	O	O
BigDecimal	B-api_mention	B-api_mention
is	O	O
initialized	O	O
with	O	O
the	O	O
String	B-api_mention	B-api_mention
StringLiteral	O	O
it	O	O
behaves	O	O
unexpectedly	O	O
.	O	O
It	O	O
seems	O	O
to	O	O
have	O	O
a	O	O
value	O	O
between	O	O
0	O	O
and	O	O
1e	O	O
-	O	O
2147483647	O	O
.	O	O
When	O	O
I	O	O
try	O	O
calling	O	O
intValue	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
I	O	O
get	O	O
a	O	O
NegativeArraySizeException	B-api_mention	B-api_mention
.	O	O
I	O	O
should	O	O
note	O	O
that	O	O
2147483647	O	O
is	O	O
the	O	O
max	O	O
value	O	O
of	O	O
an	O	O
integer	O	O
on	O	O
my	O	O
system	O	O
.	O	O
Am	O	O
I	O	O
doing	O	O
something	O	O
wrong	O	O
,	O	O
or	O	O
is	O	O
this	O	O
a	O	O
problem	O	O
with	O	O
BigDecimal	B-api_mention	B-api_mention
?	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
30888581	O	O
,	O	O
answer	O	O
-	O	O
30897102	O	O
Once	O	O
given	O	O
more	O	O
thought	O	O
In	O	O
hindsight	O	O
it	O	O
sounds	O	O
like	O	O
they	O	O
were	O	O
looking	O	O
for	O	O
the	O	O
execute	O	O
around	O	O
pattern	O	O
.	O	O
They	O	O
'	O	O
re	O	O
usually	O	O
used	O	O
to	O	O
do	O	O
things	O	O
like	O	O
enforce	O	O
closing	O	O
of	O	O
streams	O	O
.	O	O
This	O	O
is	O	O
also	O	O
more	O	O
relevant	O	O
due	O	O
to	O	O
this	O	O
line	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
idea	O	O
is	O	O
you	O	O
give	O	O
the	O	O
thing	O	O
that	O	O
does	O	O
the	O	O
"	O	O
executing	O	O
around	O	O
"	O	O
some	O	O
class	O	O
to	O	O
do	O	O
somethings	O	O
with	O	O
.	O	O
You	O	O
'	O	O
ll	O	O
probably	O	O
use	O	O
Runnable	B-api_mention	B-api_mention
but	O	O
it	O	O
'	O	O
s	O	O
not	O	O
necessary	O	O
.	O	O
(	O	O
Runnable	B-api_mention	B-api_mention
makes	O	O
the	O	O
most	O	O
sense	O	O
and	O	O
you	O	O
'	O	O
ll	O	O
see	O	O
why	O	O
soon	O	O
.	O	O
)	O	O
In	O	O
your	O	O
StopWatch	B-api_mention	O
class	O	O
add	O	O
some	O	O
method	O	O
like	O	O
this	O	O
#	O	O
pre	O	O
You	O	O
would	O	O
then	O	O
call	O	O
it	O	O
like	O	O
this	O	O
#	O	O
pre	O	O
This	O	O
makes	O	O
it	O	O
fool	O	O
proof	O	O
.	O	O
You	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
worry	O	O
about	O	O
handling	O	O
stop	O	O
before	O	O
start	O	O
or	O	O
people	O	O
forgetting	O	O
to	O	O
call	O	O
one	O	O
and	O	O
not	O	O
the	O	O
other	O	O
,	O	O
etc	O	O
.	O	O
The	O	O
reason	O	O
Runnable	B-api_mention	B-api_mention
is	O	O
nice	O	O
is	O	O
because	O	O
#	O	O
li	O	O
Standard	O	O
java	O	O
class	O	O
,	O	O
not	O	O
your	O	O
own	O	O
or	O	O
third	O	O
party	O	O
#	O	O
li	O	O
End	O	O
users	O	O
can	O	O
put	O	O
whatever	O	O
they	O	O
need	O	O
in	O	O
the	O	O
Runnable	B-api_mention	B-api_mention
to	O	O
be	O	O
done	O	O
.	O	O
(	O	O
If	O	O
you	O	O
were	O	O
using	O	O
it	O	O
to	O	O
enforce	O	O
stream	O	O
closing	O	O
then	O	O
you	O	O
could	O	O
put	O	O
the	O	O
actions	O	O
that	O	O
need	O	O
to	O	O
be	O	O
done	O	O
with	O	O
a	O	O
database	O	O
connection	O	O
inside	O	O
so	O	O
the	O	O
end	O	O
user	O	O
doesn	O	O
'	O	O
t	O	O
need	O	O
to	O	O
worry	O	O
about	O	O
how	O	O
to	O	O
open	O	O
and	O	O
close	O	O
it	O	O
and	O	O
you	O	O
simultaneously	O	O
force	O	O
them	O	O
to	O	O
close	O	O
it	O	O
properly	O	O
.	O	O
)	O	O
If	O	O
you	O	O
wanted	O	O
,	O	O
you	O	O
could	O	O
make	O	O
some	O	O
StopWatchWrapper	B-api_mention	B-api_mention
instead	O	O
leave	O	O
StopWatch	B-api_mention	O
unmodified	O	O
.	O	O
You	O	O
could	O	O
also	O	O
make	O	O
measureAction	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
not	O	O
return	O	O
a	O	O
time	O	O
and	O	O
make	O	O
getTime	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
public	O	O
instead	O	O
.	O	O
The	O	O
Java	O	O
8	O	O
way	O	O
to	O	O
calling	O	O
it	O	O
is	O	O
even	O	O
simpler	O	O
#	O	O
pre	O	O
#	O	O
blockquote	O	O
Original	O	O
answer	O	O
#	O	O
blockquote	O	O
To	O	O
me	O	O
something	O	O
like	O	O
this	O	O
seems	O	O
to	O	O
be	O	O
good	O	O
.	O	O
#	O	O
pre	O	O
The	O	O
reason	O	O
I	O	O
believe	O	O
this	O	O
to	O	O
be	O	O
good	O	O
is	O	O
the	O	O
recording	O	O
is	O	O
during	O	O
object	O	O
creation	O	O
so	O	O
it	O	O
can	O	O
'	O	O
t	O	O
be	O	O
forgotten	O	O
or	O	O
done	O	O
out	O	O
of	O	O
order	O	O
(	O	O
can	O	O
'	O	O
t	O	O
call	O	O
stop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
if	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
)	O	O
.	O	O
One	O	O
flaw	O	O
is	O	O
probably	O	O
the	O	O
naming	O	O
of	O	O
stop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
At	O	O
first	O	O
I	O	O
thought	O	O
maybe	O	O
lap	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
but	O	O
that	O	O
usually	O	O
implies	O	O
a	O	O
restarting	O	O
or	O	O
some	O	O
sort	O	O
(	O	O
or	O	O
at	O	O
least	O	O
recording	O	O
since	O	O
last	O	O
lap	O	O
/	O	O
start	O	O
)	O	O
.	O	O
Perhaps	O	O
read	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
would	O	O
be	O	O
better	O	O
?	O	O
This	O	O
mimics	O	O
the	O	O
action	O	O
of	O	O
looking	O	O
at	O	O
the	O	O
time	O	O
on	O	O
a	O	O
stop	O	O
watch	O	O
.	O	O
I	O	O
chose	O	O
stop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
keep	O	O
it	O	O
similar	O	O
to	O	O
the	O	O
original	O	O
class	O	O
.	O	O
The	O	O
only	O	O
thing	O	O
I	O	O
'	O	O
m	O	O
not	O	O
100	O	O
%	O	O
sure	O	O
about	O	O
is	O	O
how	O	O
to	O	O
get	O	O
the	O	O
time	O	O
.	O	O
To	O	O
be	O	O
honest	O	O
that	O	O
seems	O	O
to	O	O
be	O	O
a	O	O
more	O	O
minor	O	O
detail	O	O
.	O	O
As	O	O
long	O	O
as	O	O
both	O	O
.	O	O
.	O	O
.	O	O
in	O	O
the	O	O
above	O	O
code	O	O
obtain	O	O
current	O	O
time	O	O
the	O	O
same	O	O
way	O	O
it	O	O
should	O	O
be	O	O
fine	O	O
.	O	O
Question	O	O
-	O	O
22561614	O	O
,	O	O
answer	O	O
-	O	O
22561690	O	O
Comparator	B-api_mention	B-api_mention
is	O	O
a	O	O
functional	O	O
interface	O	O
,	O	O
and	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
complies	O	O
with	O	O
that	O	O
interface	O	O
(	O	O
after	O	O
autoboxing	O	O
/	O	O
unboxing	O	O
is	O	O
taken	O	O
into	O	O
consideration	O	O
)	O	O
.	O	O
It	O	O
takes	O	O
two	O	O
int	O	O
values	O	O
and	O	O
returns	O	O
an	O	O
int	O	O
-	O	O
just	O	O
as	O	O
you	O	O
'	O	O
d	O	O
expect	O	O
a	O	O
Comparator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
to	O	O
(	O	O
again	O	O
,	O	O
squinting	O	O
to	O	O
ignore	O	O
the	O	O
Integer	B-api_mention	B-api_mention
/	O	O
int	O	O
difference	O	O
)	O	O
.	O	O
However	O	O
,	O	O
I	O	O
wouldn	O	O
'	O	O
t	O	O
expect	O	O
it	O	O
to	O	O
do	O	O
the	O	O
right	O	O
thing	O	O
,	O	O
given	O	O
that	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
doesn	O	O
'	O	O
t	O	O
comply	O	O
with	O	O
the	O	O
semantics	O	O
of	O	O
Comparator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
compare	I-api_mention	I-api_mention
.	O	O
And	O	O
indeed	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
really	O	O
work	O	O
in	O	O
general	O	O
.	O	O
For	O	O
example	O	O
,	O	O
make	O	O
one	O	O
small	O	O
change	O	O
:	O	O
#	O	O
pre	O	O
.	O	O
.	O	O
.	O	O
and	O	O
now	O	O
the	O	O
max	O	O
value	O	O
is	O	O
-	O	O
20	O	O
and	O	O
the	O	O
min	O	O
value	O	O
is	O	O
-	O	O
1	O	O
.	O	O
Instead	O	O
,	O	O
both	O	O
calls	O	O
should	O	O
use	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
compare	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
34172978	O	O
,	O	O
answer	O	O
-	O	O
34173658	O	O
If	O	O
you	O	O
want	O	O
to	O	O
stop	O	O
either	O	O
if	O	O
number	O	O
5	O	O
is	O	O
reached	O	O
or	O	O
10	O	O
elements	O	O
are	O	O
collected	O	O
,	O	O
there	O	O
'	O	O
s	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
takeWhile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
added	O	O
in	O	O
Java	O	O
-	O	O
9	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
23699371	O	O
,	O	O
answer	O	O
-	O	O
34731808	O	O
You	O	O
can	O	O
use	O	O
the	O	O
distinct	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
can	O	O
refactor	O	O
persons	O	O
to	O	O
implement	O	O
an	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
interface	O	O
,	O	O
you	O	O
can	O	O
call	O	O
the	O	O
method	O	O
directly	O	O
on	O	O
the	O	O
list	O	O
.	O	O
#	O	O
pre	O	O
HashingStrategy	O	B-api_mention
is	O	O
simply	O	O
a	O	O
strategy	O	O
interface	O	O
that	O	O
allows	O	O
you	O	O
to	O	O
define	O	O
custom	O	O
implementations	O	O
of	O	O
equals	O	O
and	O	O
hashcode	O	O
.	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
a	O	O
committer	O	O
for	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846943	O	O
It	O	O
is	O	O
,	O	O
in	O	O
my	O	O
personal	O	O
experience	O	O
admittedly	O	O
,	O	O
very	O	O
useful	O	O
in	O	O
cases	O	O
where	O	O
an	O	O
API	O	O
requires	O	O
a	O	O
collection	O	O
of	O	O
parameters	O	O
,	O	O
but	O	O
you	O	O
have	O	O
nothing	O	O
to	O	O
provide	O	O
.	O	O
For	O	O
example	O	O
you	O	O
may	O	O
have	O	O
an	O	O
API	O	O
that	O	O
looks	O	O
something	O	O
like	O	O
this	O	O
,	O	O
and	O	O
does	O	O
not	O	O
allow	O	O
null	O	O
references	O	O
:	O	O
public	O	O
ResultSet	B-api_mention	B-api_mention
executeQuery	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
;	O	O
If	O	O
you	O	O
have	O	O
a	O	O
query	O	O
that	O	O
doesn	O	O
'	O	O
t	O	O
take	O	O
any	O	O
parameters	O	O
,	O	O
it	O	O
'	O	O
s	O	O
certainly	O	O
a	O	O
bit	O	O
wasteful	O	O
to	O	O
create	O	O
a	O	O
HashMap	B-api_mention	B-api_mention
,	O	O
which	O	O
involves	O	O
allocating	O	O
an	O	O
array	O	O
,	O	O
when	O	O
you	O	O
could	O	O
just	O	O
pass	O	O
in	O	O
the	O	O
'	O	O
Empty	O	O
Map	O	O
'	O	O
which	O	O
is	O	O
effectively	O	O
a	O	O
constant	O	O
,	O	O
the	O	O
way	O	O
it	O	O
'	O	O
s	O	O
implemented	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
14809293	O	O
,	O	O
answer	O	O
-	O	O
14821488	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableList	I-api_mention	I-api_mention
has	O	O
already	O	O
been	O	O
mentioned	O	O
-	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
strangely	O	O
not	O	O
!	O	O
My	O	O
solution	O	O
would	O	O
also	O	O
be	O	O
to	O	O
use	O	O
the	O	O
list	O	O
from	O	O
the	O	O
outside	O	O
and	O	O
wrap	O	O
the	O	O
array	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
problem	O	O
with	O	O
copying	O	O
the	O	O
array	O	O
is	O	O
:	O	O
if	O	O
you	O	O
'	O	O
re	O	O
doing	O	O
it	O	O
every	O	O
time	O	O
you	O	O
access	O	O
the	O	O
code	O	O
and	O	O
the	O	O
array	O	O
is	O	O
big	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
create	O	O
a	O	O
lot	O	O
of	O	O
work	O	O
for	O	O
the	O	O
garbage	O	O
collector	O	O
for	O	O
sure	O	O
.	O	O
So	O	O
the	O	O
copy	O	O
is	O	O
a	O	O
simple	O	O
but	O	O
really	O	O
bad	O	O
approach	O	O
-	O	O
I	O	O
'	O	O
d	O	O
say	O	O
"	O	O
cheap	O	O
"	O	O
,	O	O
but	O	O
memory	O	O
-	O	O
expensive	O	O
!	O	O
Especially	O	O
when	O	O
you	O	O
'	O	O
re	O	O
having	O	O
more	O	O
than	O	O
just	O	O
2	O	O
elements	O	O
.	O	O
If	O	O
you	O	O
look	O	O
at	O	O
the	O	O
source	O	O
code	O	O
of	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
and	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableList	I-api_mention	I-api_mention
there	O	O
is	O	O
actually	O	O
not	O	O
much	O	O
created	O	O
.	O	O
The	O	O
first	O	O
just	O	O
wraps	O	O
the	O	O
array	O	O
without	O	O
copying	O	O
it	O	O
,	O	O
the	O	O
second	O	O
just	O	O
wraps	O	O
the	O	O
list	O	O
,	O	O
making	O	O
changes	O	O
to	O	O
it	O	O
unavailable	O	O
.	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
36394016	O	O
Whenever	O	O
there	O	O
is	O	O
the	O	O
slightest	O	O
possibility	O	O
that	O	O
the	O	O
given	O	O
String	B-api_mention	B-api_mention
does	O	O
not	O	O
contain	O	O
an	O	O
Integer	B-api_mention	B-api_mention
,	O	O
you	O	O
have	O	O
to	O	O
handle	O	O
this	O	O
special	O	O
case	O	O
.	O	O
Sadly	O	O
,	O	O
the	O	O
standard	O	O
Java	O	O
methods	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
parseInt	I-api_mention	B-api_mention
and	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
throw	O	O
a	O	O
NumberFormatException	B-api_mention	B-api_mention
to	O	O
signal	O	O
this	O	O
special	O	O
case	O	O
.	O	O
Thus	O	O
,	O	O
you	O	O
have	O	O
to	O	O
use	O	O
exceptions	O	O
for	O	O
flow	O	O
control	O	O
,	O	O
which	O	O
is	O	O
generally	O	O
considered	O	O
bad	O	O
coding	O	O
style	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
,	O	O
this	O	O
special	O	O
case	O	O
should	O	O
be	O	O
handled	O	O
by	O	O
returning	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Since	O	O
Java	O	O
does	O	O
not	O	O
offer	O	O
such	O	O
a	O	O
method	O	O
,	O	O
I	O	O
use	O	O
the	O	O
following	O	O
wrapper	O	O
:	O	O
#	O	O
pre	O	O
Usage	O	O
:	O	O
#	O	O
pre	O	O
While	O	O
this	O	O
is	O	O
still	O	O
using	O	O
exceptions	O	O
for	O	O
flow	O	O
control	O	O
internally	O	O
,	O	O
the	O	O
usage	O	O
code	O	O
becomes	O	O
very	O	O
clean	O	O
.	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
29226136	O	O
Also	O	O
note	O	O
that	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
normally	O	O
contains	O	O
=	O	O
=	O	O
for	O	O
testing	O	O
as	O	O
this	O	O
is	O	O
the	O	O
first	O	O
thing	O	O
you	O	O
would	O	O
wish	O	O
to	O	O
test	O	O
for	O	O
if	O	O
you	O	O
wanted	O	O
to	O	O
test	O	O
if	O	O
two	O	O
objects	O	O
are	O	O
equal	O	O
.	O	O
And	O	O
=	O	O
=	O	O
actually	O	O
does	O	O
look	O	O
at	O	O
values	O	O
for	O	O
primitive	O	O
types	O	O
,	O	O
for	O	O
objects	O	O
it	O	O
checks	O	O
the	O	O
reference	O	O
.	O	O
Question	O	O
-	O	O
25222811	O	O
,	O	O
answer	O	O
-	O	O
26676046	O	O
To	O	O
begin	O	O
with	O	O
(	O	O
and	O	O
unrelated	O	O
)	O	O
,	O	O
instantiating	O	O
the	O	O
Application	B-api_mention	O
class	O	O
by	O	O
yourself	O	O
does	O	O
not	O	O
seem	O	O
to	O	O
be	O	O
its	O	O
intended	O	O
use	O	O
.	O	O
From	O	O
what	O	O
one	O	O
can	O	O
read	O	O
from	O	O
its	O	O
source	O	O
,	O	O
you	O	O
are	O	O
rather	O	O
expected	O	O
to	O	O
use	O	O
the	O	O
static	O	O
instance	O	O
returned	O	O
by	O	O
getApplication	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Now	O	O
let	O	O
'	O	O
s	O	O
get	O	O
to	O	O
the	O	O
error	O	O
Eclipse	O	O
reports	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
ran	O	O
into	O	O
a	O	O
similar	O	O
issue	O	O
recently	O	O
:	O	O
Access	O	O
restriction	O	O
:	O	O
The	O	O
method	O	O
.	O	O
.	O	O
.	O	O
is	O	O
not	O	O
API	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	O
I	O	O
called	O	O
the	O	O
method	O	O
in	O	O
question	O	O
as	O	O
a	O	O
method	O	O
of	O	O
an	O	O
object	O	O
which	O	O
inherited	O	O
that	O	O
method	O	O
from	O	O
a	O	O
super	O	O
class	O	O
.	O	O
All	O	O
I	O	O
had	O	O
to	O	O
do	O	O
was	O	O
to	O	O
add	O	O
the	O	O
package	O	O
the	O	O
super	O	O
class	O	O
was	O	O
in	O	O
to	O	O
the	O	O
packages	O	O
imported	O	O
by	O	O
my	O	O
plugin	O	O
.	O	O
However	O	O
,	O	O
there	O	O
is	O	O
a	O	O
lot	O	O
of	O	O
different	O	O
causes	O	O
for	O	O
errors	O	O
based	O	O
on	O	O
"	O	O
restriction	O	O
on	O	O
required	O	O
project	O	O
/	O	O
library	O	O
"	O	O
.	O	O
Similar	O	O
to	O	O
the	O	O
problem	O	O
described	O	O
above	O	O
,	O	O
the	O	O
type	O	O
you	O	O
are	O	O
using	O	O
might	O	O
have	O	O
dependencies	O	O
to	O	O
packages	O	O
that	O	O
are	O	O
not	O	O
exported	O	O
by	O	O
the	O	O
library	O	O
or	O	O
might	O	O
not	O	O
be	O	O
exported	O	O
itself	O	O
.	O	O
In	O	O
that	O	O
case	O	O
you	O	O
can	O	O
try	O	O
to	O	O
track	O	O
down	O	O
the	O	O
missing	O	O
packages	O	O
and	O	O
export	O	O
them	O	O
my	O	O
yourself	O	O
,	O	O
as	O	O
suggested	O	O
here	O	O
,	O	O
or	O	O
try	O	O
Access	O	O
Rules	O	O
.	O	O
Other	O	O
possible	O	O
scenarios	O	O
include	O	O
:	O	O
#	O	O
li	O	O
Eclipse	O	O
wants	O	O
to	O	O
keep	O	O
you	O	O
from	O	O
using	O	O
available	O	O
packages	O	O
that	O	O
are	O	O
not	O	O
part	O	O
of	O	O
the	O	O
public	O	O
Java	O	O
API	O	O
(	O	O
solution	O	O
1	O	O
,	O	O
2	O	O
)	O	O
#	O	O
li	O	O
Dependencies	O	O
are	O	O
satisfied	O	O
by	O	O
multiple	O	O
sources	O	O
,	O	O
versions	O	O
are	O	O
conflicting	O	O
etc	O	O
.	O	O
(	O	O
solution	O	O
1	O	O
,	O	O
2	O	O
,	O	O
3	O	O
)	O	O
#	O	O
li	O	O
Eclipse	O	O
is	O	O
using	O	O
a	O	O
JRE	O	O
where	O	O
a	O	O
JDK	O	O
is	O	O
necessary	O	O
(	O	O
which	O	O
might	O	O
be	O	O
the	O	O
case	O	O
here	O	O
,	O	O
from	O	O
what	O	O
your	O	O
errors	O	O
say	O	O
;	O	O
solution	O	O
)	O	O
or	O	O
JRE	O	O
/	O	O
JDK	O	O
version	O	O
in	O	O
project	O	O
build	O	O
path	O	O
is	O	O
not	O	O
the	O	O
right	O	O
one	O	O
This	O	O
ended	O	O
up	O	O
as	O	O
more	O	O
like	O	O
a	O	O
medley	O	O
of	O	O
restriction	O	O
-	O	O
related	O	O
issues	O	O
than	O	O
an	O	O
actual	O	O
answer	O	O
.	O	O
But	O	O
since	O	O
restriction	O	O
on	O	O
required	O	O
projects	O	O
is	O	O
such	O	O
a	O	O
versatile	O	O
error	O	O
to	O	O
be	O	O
reported	O	O
,	O	O
the	O	O
perfect	O	O
recipe	O	O
is	O	O
probably	O	O
still	O	O
to	O	O
be	O	O
found	O	O
.	O	O
Question	O	O
-	O	O
27683759	O	O
I	O	O
just	O	O
studied	O	O
about	O	O
generic	O	O
programming	O	O
,	O	O
the	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
,	O	O
and	O	O
ArrayList	B-api_mention	B-api_mention
,	O	O
so	O	O
I	O	O
can	O	O
understand	O	O
the	O	O
statement	O	O
below	O	O
.	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
the	O	O
next	O	O
statement	O	O
which	O	O
I	O	O
saw	O	O
while	O	O
surfing	O	O
the	O	O
web	O	O
.	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list2	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
emptyList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
What	O	O
is	O	O
Collections	B-api_mention	B-api_mention
?	O	O
Why	O	O
isn	O	O
'	O	O
t	O	O
it	O	O
Collections	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
or	O	O
Collections	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
?	O	O
#	O	O
li	O	O
Why	O	O
is	O	O
<	O	O
String	O	B-api_mention
>	O	O
placed	O	O
before	O	O
the	O	O
method	O	O
name	O	O
emptyList	B-api_mention	B-api_mention
?	O	O
(	O	O
Isn	O	O
'	O	O
t	O	O
emptyList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
correct	O	O
for	O	O
Generic	O	O
?	O	O
)	O	O
#	O	O
li	O	O
What	O	O
does	O	O
the	O	O
statement	O	O
mean	O	O
?	O	O
Question	O	O
-	O	O
10977992	O	O
#	O	O
pre	O	O
We	O	O
can	O	O
use	O	O
Iterator	B-api_mention	B-api_mention
to	O	O
traverse	O	O
a	O	O
Set	B-api_mention	B-api_mention
or	O	O
a	O	O
List	B-api_mention	B-api_mention
or	O	O
a	O	O
Map	B-api_mention	B-api_mention
.	O	O
But	O	O
ListIterator	B-api_mention	B-api_mention
can	O	O
only	O	O
be	O	O
used	O	O
to	O	O
traverse	O	O
a	O	O
List	B-api_mention	B-api_mention
,	O	O
it	O	O
can	O	O
'	O	O
t	O	O
traverse	O	O
a	O	O
Set	B-api_mention	B-api_mention
.	O	O
Why	O	O
?	O	O
I	O	O
know	O	O
that	O	O
the	O	O
main	O	O
difference	O	O
is	O	O
that	O	O
with	O	O
iterator	B-api_mention	O
we	O	O
can	O	O
travel	O	O
in	O	O
only	O	O
one	O	O
direction	O	O
but	O	O
with	O	O
ListIterator	B-api_mention	B-api_mention
we	O	O
can	O	O
travel	O	O
both	O	O
directions	O	O
.	O	O
Are	O	O
there	O	O
any	O	O
other	O	O
differences	O	O
?	O	O
And	O	O
any	O	O
advantages	O	O
of	O	O
ListIterator	B-api_mention	B-api_mention
over	O	O
Iterator	B-api_mention	B-api_mention
?	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725518	O	O
Because	O	O
the	O	O
concept	O	O
of	O	O
a	O	O
List	B-api_mention	B-api_mention
is	O	O
incompatible	O	O
with	O	O
the	O	O
concept	O	O
of	O	O
an	O	O
automatically	O	O
sorted	O	O
collection	O	O
.	O	O
The	O	O
point	O	O
of	O	O
a	O	O
List	B-api_mention	B-api_mention
is	O	O
that	O	O
after	O	O
calling	O	O
list	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
a	O	O
call	O	O
to	O	O
list	O	O
.	B-api_mention	B-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
elem	O	O
.	O	O
With	O	O
an	O	O
auto	O	O
-	O	O
sorted	O	O
list	O	O
,	O	O
the	O	O
element	O	O
could	O	O
end	O	O
up	O	O
in	O	O
an	O	O
arbitrary	O	O
position	O	O
.	O	O
Question	O	O
-	O	O
15336477	O	O
,	O	O
answer	O	O
-	O	O
32364785	O	O
Examples	O	O
from	O	O
Apache	O	O
(	O	O
link	O	O
)	O	O
use	O	O
this	O	O
:	O	O
HttpClient	B-api_mention	B-api_mention
httpclient	O	O
=	O	O
HttpClients	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
createDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
class	O	O
org	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
apache	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
http	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
impl	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
client	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
HttpClients	I-api_mention	I-api_mention
is	O	O
there	O	O
since	O	O
version	O	O
4	O	O
.	O	O
3	O	O
.	O	O
The	O	O
code	O	O
for	O	O
HttpClients	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
createDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
same	O	O
as	O	O
the	O	O
accepted	O	O
answer	O	O
in	O	O
here	O	O
.	O	O
Question	O	O
-	O	O
27430092	O	O
,	O	O
answer	O	O
-	O	O
27449187	O	O
The	O	O
standard	O	O
use	O	O
case	O	O
for	O	O
BigInteger	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
in	O	O
cryptography	O	O
.	O	O
Specifically	O	O
,	O	O
certain	O	O
cryptographic	O	O
algorithms	O	O
,	O	O
such	O	O
as	O	O
RSA	O	O
,	O	O
require	O	O
randomly	O	O
chosen	O	O
large	O	O
primes	O	O
.	O	O
Importantly	O	O
,	O	O
however	O	O
,	O	O
these	O	O
algorithms	O	O
don	O	O
'	O	O
t	O	O
really	O	O
require	O	O
these	O	O
numbers	O	O
to	O	O
be	O	O
guaranteed	O	O
to	O	O
be	O	O
prime	O	O
—	O	O
they	O	O
just	O	O
need	O	O
to	O	O
be	O	O
prime	O	O
with	O	O
a	O	O
very	O	O
high	O	O
probability	O	O
.	O	O
How	O	O
high	O	O
is	O	O
very	O	O
high	O	O
?	O	O
Well	O	O
,	O	O
in	O	O
a	O	O
crypto	O	O
application	O	O
,	O	O
one	O	O
would	O	O
typically	O	O
call	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
with	O	O
an	O	O
argument	O	O
somewhere	O	O
between	O	O
128	O	O
and	O	O
256	O	O
.	O	O
Thus	O	O
,	O	O
the	O	O
probability	O	O
of	O	O
a	O	O
non	O	O
-	O	O
prime	O	O
number	O	O
passing	O	O
such	O	O
a	O	O
test	O	O
is	O	O
less	O	O
than	O	O
one	O	O
in	O	O
2	O	O
128	O	O
or	O	O
2	O	O
256	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
put	O	O
that	O	O
in	O	O
perspective	O	O
:	O	O
if	O	O
you	O	O
had	O	O
10	O	O
billion	O	O
computers	O	O
,	O	O
each	O	O
generating	O	O
10	O	O
billion	O	O
probable	O	O
prime	O	O
numbers	O	O
per	O	O
second	O	O
(	O	O
which	O	O
would	O	O
mean	O	O
less	O	O
than	O	O
one	O	O
clock	O	O
cycle	O	O
per	O	O
number	O	O
on	O	O
any	O	O
modern	O	O
CPU	O	O
)	O	O
,	O	O
and	O	O
the	O	O
primality	O	O
of	O	O
those	O	O
numbers	O	O
was	O	O
tested	O	O
with	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
would	O	O
,	O	O
on	O	O
average	O	O
,	O	O
expect	O	O
one	O	O
non	O	O
-	O	O
prime	O	O
number	O	O
to	O	O
slip	O	O
in	O	O
once	O	O
in	O	O
every	O	O
100	O	O
billion	O	O
years	O	O
.	O	O
That	O	O
is	O	O
,	O	O
that	O	O
would	O	O
be	O	O
the	O	O
case	O	O
,	O	O
if	O	O
those	O	O
10	O	O
billion	O	O
computers	O	O
could	O	O
somehow	O	O
all	O	O
run	O	O
for	O	O
hundreds	O	O
of	O	O
billions	O	O
of	O	O
years	O	O
without	O	O
experiencing	O	O
any	O	O
hardware	O	O
failures	O	O
.	O	O
In	O	O
practice	O	O
,	O	O
though	O	O
,	O	O
it	O	O
'	O	O
s	O	O
a	O	O
lot	O	O
more	O	O
likely	O	O
for	O	O
a	O	O
random	O	O
cosmic	O	O
ray	O	O
to	O	O
strike	O	O
your	O	O
computer	O	O
at	O	O
just	O	O
the	O	O
right	O	O
time	O	O
and	O	O
place	O	O
to	O	O
flip	O	O
the	O	O
return	O	O
value	O	O
of	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
from	O	O
false	O	O
to	O	O
true	O	O
,	O	O
without	O	O
causing	O	O
any	O	O
other	O	O
detectable	O	O
effects	O	O
,	O	O
than	O	O
it	O	O
is	O	O
for	O	O
a	O	O
non	O	O
-	O	O
prime	O	O
number	O	O
to	O	O
actually	O	O
pass	O	O
the	O	O
probabilistic	O	O
primality	O	O
test	O	O
at	O	O
that	O	O
certainty	O	O
level	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
the	O	O
same	O	O
risk	O	O
of	O	O
random	O	O
cosmic	O	O
rays	O	O
and	O	O
other	O	O
hardware	O	O
faults	O	O
also	O	O
applies	O	O
to	O	O
deterministic	O	O
primality	O	O
tests	O	O
like	O	O
AKS	O	O
.	O	O
Thus	O	O
,	O	O
in	O	O
practice	O	O
,	O	O
even	O	O
these	O	O
tests	O	O
have	O	O
a	O	O
(	O	O
very	O	O
small	O	O
)	O	O
baseline	O	O
false	O	O
positive	O	O
rate	O	O
due	O	O
to	O	O
random	O	O
hardware	O	O
failures	O	O
(	O	O
not	O	O
to	O	O
mention	O	O
all	O	O
other	O	O
possible	O	O
sources	O	O
of	O	O
errors	O	O
,	O	O
such	O	O
as	O	O
implementation	O	O
bugs	O	O
)	O	O
.	O	O
Since	O	O
it	O	O
'	O	O
s	O	O
easy	O	O
to	O	O
push	O	O
the	O	O
intrinsic	O	O
false	O	O
positive	O	O
rate	O	O
of	O	O
the	O	O
Miller	O	O
–	O	O
Rabin	O	O
primality	O	O
test	O	O
used	O	O
by	O	O
.	B-api_mention	B-api_mention
isProbablePrime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
far	O	O
below	O	O
this	O	O
baseline	O	O
rate	O	O
,	O	O
simply	O	O
by	O	O
repeating	O	O
the	O	O
test	O	O
sufficiently	O	O
many	O	O
times	O	O
,	O	O
and	O	O
since	O	O
,	O	O
even	O	O
repeated	O	O
so	O	O
many	O	O
times	O	O
,	O	O
the	O	O
Miller	O	O
–	O	O
Rabin	O	O
test	O	O
is	O	O
still	O	O
much	O	O
faster	O	O
in	O	O
practice	O	O
than	O	O
the	O	O
best	O	O
known	O	O
deterministic	O	O
primality	O	O
tests	O	O
like	O	O
AKS	O	O
,	O	O
it	O	O
remains	O	O
the	O	O
standard	O	O
primality	O	O
test	O	O
for	O	O
cryptographic	O	O
applications	O	O
.	O	O
(	O	O
Besides	O	O
,	O	O
even	O	O
if	O	O
you	O	O
happened	O	O
to	O	O
accidentally	O	O
select	O	O
a	O	O
strong	O	O
pseudoprime	O	O
as	O	O
one	O	O
of	O	O
the	O	O
factors	O	O
of	O	O
your	O	O
RSA	O	O
modulus	O	O
,	O	O
it	O	O
would	O	O
not	O	O
generally	O	O
lead	O	O
to	O	O
a	O	O
catastrophic	O	O
failure	O	O
.	O	O
Typically	O	O
,	O	O
such	O	O
pseudoprimes	O	O
would	O	O
be	O	O
products	O	O
of	O	O
two	O	O
(	O	O
or	O	O
rarely	O	O
more	O	O
)	O	O
primes	O	O
of	O	O
approximately	O	O
half	O	O
the	O	O
length	O	O
,	O	O
which	O	O
means	O	O
that	O	O
you	O	O
'	O	O
d	O	O
end	O	O
up	O	O
with	O	O
a	O	O
multi	O	O
-	O	O
prime	O	O
RSA	O	O
key	O	O
.	O	O
As	O	O
long	O	O
as	O	O
none	O	O
of	O	O
the	O	O
factors	O	O
were	O	O
too	O	O
small	O	O
(	O	O
and	O	O
if	O	O
they	O	O
were	O	O
,	O	O
the	O	O
primality	O	O
test	O	O
should	O	O
'	O	O
ve	O	O
caught	O	O
them	O	O
)	O	O
,	O	O
the	O	O
RSA	O	O
algorithm	O	O
will	O	O
still	O	O
work	O	O
just	O	O
fine	O	O
,	O	O
and	O	O
the	O	O
key	O	O
,	O	O
although	O	O
somewhat	O	O
weaker	O	O
against	O	O
certain	O	O
types	O	O
of	O	O
attacks	O	O
than	O	O
normal	O	O
RSA	O	O
keys	O	O
of	O	O
the	O	O
same	O	O
length	O	O
,	O	O
should	O	O
still	O	O
be	O	O
reasonably	O	O
secure	O	O
if	O	O
you	O	O
didn	O	O
'	O	O
t	O	O
needlessly	O	O
skimp	O	O
on	O	O
the	O	O
key	O	O
length	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
10827872	O	O
,	O	O
answer	O	O
-	O	O
22578124	O	O
Old	O	O
thread	O	O
I	O	O
know	O	O
but	O	O
I	O	O
am	O	O
sort	O	O
of	O	O
new	O	O
to	O	O
Java	O	O
and	O	O
discover	O	O
one	O	O
of	O	O
it	O	O
'	O	O
s	O	O
strange	O	O
things	O	O
.	O	O
I	O	O
have	O	O
used	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
get	O	O
unpredictable	O	O
results	O	O
.	O	O
Something	O	O
like	O	O
this	O	O
mess	O	O
up	O	O
the	O	O
string	O	O
:	O	O
sUrl	O	O
=	O	O
sUrl	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
So	O	O
I	O	O
designed	O	O
this	O	O
function	O	O
to	O	O
get	O	O
around	O	O
the	O	O
weird	O	O
problem	O	O
:	O	O
#	O	O
pre	O	O
Which	O	O
make	O	O
you	O	O
able	O	O
to	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
18571223	O	O
,	O	O
answer	O	O
-	O	O
18571348	O	O
The	O	O
object	O	O
your	O	O
method	O	O
decompressGZIP	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
needs	O	O
is	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
.	O	O
So	O	O
the	O	O
basic	O	O
,	O	O
technical	O	O
answer	O	O
to	O	O
the	O	O
question	O	O
you	O	O
have	O	O
asked	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
the	O	O
problem	O	O
you	O	O
appear	O	O
to	O	O
be	O	O
wrestling	O	O
with	O	O
is	O	O
that	O	O
this	O	O
doesn	O	O
'	O	O
t	O	O
display	O	O
very	O	O
well	O	O
.	O	O
Calling	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
just	O	O
give	O	O
you	O	O
the	O	O
default	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
is	O	O
the	O	O
class	O	O
name	O	O
+	O	O
memory	O	O
address	O	O
.	O	O
In	O	O
your	O	O
result	O	O
[	O	O
B	O	O
@	O	O
38ee9f13	O	O
,	O	O
the	O	O
[	O	O
B	O	O
means	O	O
byte	O	O
[	O	O
]	O	O
and	O	O
38ee9f13	O	O
is	O	O
the	O	O
memory	O	O
address	O	O
,	O	O
separated	O	O
by	O	O
an	O	O
@	O	O
.	O	O
For	O	O
display	O	O
purposes	O	O
you	O	O
can	O	O
use	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
this	O	O
will	O	O
just	O	O
display	O	O
as	O	O
a	O	O
sequence	O	O
of	O	O
comma	O	O
-	O	O
separated	O	O
integers	O	O
,	O	O
which	O	O
may	O	O
or	O	O
may	O	O
not	O	O
be	O	O
what	O	O
you	O	O
want	O	O
.	O	O
To	O	O
get	O	O
a	O	O
readable	O	O
String	B-api_mention	B-api_mention
back	O	O
from	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
,	O	O
use	O	O
:	O	O
String	B-api_mention	B-api_mention
string	O	O
=	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
reason	O	O
the	O	O
Charset	B-api_mention	B-api_mention
version	O	O
is	O	O
favoured	O	O
,	O	O
is	O	O
that	O	O
all	O	O
String	B-api_mention	B-api_mention
objects	O	O
in	O	O
Java	O	O
are	O	O
stored	O	O
internally	O	O
as	O	O
UTF	O	O
-	O	O
16	O	O
.	O	O
When	O	O
converting	O	O
to	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
you	O	O
will	O	O
get	O	O
a	O	O
different	O	O
breakdown	O	O
of	O	O
bytes	O	O
for	O	O
the	O	O
given	O	O
glyphs	O	O
of	O	O
that	O	O
String	B-api_mention	B-api_mention
,	O	O
depending	O	O
upon	O	O
the	O	O
chosen	O	O
charset	O	O
.	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032208	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
go	O	O
through	O	O
the	O	O
underlying	O	O
Array	B-api_mention	B-api_mention
and	O	O
set	O	O
each	O	O
entry	O	O
to	O	O
null	O	O
;	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
go	O	O
through	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
checking	O	O
for	O	O
collection	O	O
and	O	O
remove	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
if	O	O
it	O	O
exists	O	O
.	O	O
I	O	O
would	O	O
imagine	O	O
that	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
way	O	O
faster	O	O
then	O	O
removeAll	B-api_mention	B-api_mention
because	O	O
it	O	O
'	O	O
s	O	O
not	O	O
comparing	O	O
,	O	O
etc	O	O
.	O	O
Question	O	O
-	O	O
23218874	O	O
I	O	O
understand	O	O
that	O	O
with	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
I	O	O
can	O	O
use	O	O
chain	O	O
operations	O	O
like	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
use	O	O
parallel	O	O
stream	O	O
.	O	O
But	O	O
what	O	O
is	O	O
difference	O	O
between	O	O
them	O	O
if	O	O
I	O	O
need	O	O
to	O	O
execute	O	O
small	O	O
operations	O	O
(	O	O
for	O	O
example	O	O
,	O	O
printing	O	O
the	O	O
elements	O	O
of	O	O
the	O	O
list	O	O
)	O	O
?	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26791724	O	O
Use	O	O
the	O	O
replaceEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
from	O	O
Apache	O	O
Commons	O	O
StringUtils	B-api_mention	B-api_mention
:	O	O
StringUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replaceEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
14534767	O	O
I	O	O
have	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
object	O	O
,	O	O
#	O	O
pre	O	O
Now	O	O
I	O	O
want	O	O
to	O	O
append	O	O
a	O	O
newline	O	O
character	O	O
to	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
How	O	O
can	O	O
I	O	O
do	O	O
it	O	O
?	O	O
result	O	O
.	O	B-api_mention
append	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Does	O	O
not	O	O
work	O	O
.	O	O
So	O	O
,	O	O
I	O	O
was	O	O
thinking	O	O
about	O	O
writing	O	O
a	O	O
newline	O	O
using	O	O
Unicode	O	O
.	O	O
Will	O	O
this	O	O
help	O	O
?	O	O
If	O	O
so	O	O
,	O	O
how	O	O
can	O	O
I	O	O
add	O	O
one	O	O
?	O	O
Question	O	O
-	O	O
27949213	O	O
,	O	O
answer	O	O
-	O	O
27949367	O	O
The	O	O
strategy	O	O
they	O	O
describe	O	O
is	O	O
to	O	O
simply	O	O
reuse	O	O
the	O	O
internal	O	O
character	O	O
array	O	O
of	O	O
one	O	O
String	B-api_mention	B-api_mention
in	O	O
possibly	O	O
many	O	O
equal	O	O
Strings	O	O
.	O	O
There	O	O
'	O	O
s	O	O
no	O	O
need	O	O
for	O	O
each	O	O
String	B-api_mention	B-api_mention
to	O	O
have	O	O
its	O	O
own	O	O
copy	O	O
if	O	O
they	O	O
are	O	O
equal	O	O
.	O	O
In	O	O
order	O	O
to	O	O
more	O	O
quickly	O	O
determine	O	O
if	O	O
2	O	O
strings	O	O
are	O	O
equal	O	O
,	O	O
the	O	O
hash	O	O
code	O	O
is	O	O
used	O	O
as	O	O
a	O	O
first	O	O
step	O	O
,	O	O
as	O	O
it	O	O
is	O	O
a	O	O
fast	O	O
way	O	O
to	O	O
determine	O	O
if	O	O
Strings	O	O
may	O	O
be	O	O
equal	O	O
.	O	O
Hence	O	O
their	O	O
statement	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
to	O	O
make	O	O
a	O	O
certain	O	O
(	O	O
but	O	O
slower	O	O
)	O	O
comparison	O	O
for	O	O
equality	O	O
once	O	O
possible	O	O
equality	O	O
has	O	O
been	O	O
determined	O	O
using	O	O
the	O	O
hash	O	O
code	O	O
.	O	O
In	O	O
the	O	O
end	O	O
,	O	O
equal	O	O
Strings	O	O
will	O	O
share	O	O
a	O	O
single	O	O
underlying	O	O
char	O	O
array	O	O
.	O	O
Java	O	O
has	O	O
had	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
a	O	O
long	O	O
time	O	O
,	O	O
to	O	O
do	O	O
more	O	O
or	O	O
less	O	O
the	O	O
same	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
save	O	O
memory	O	O
by	O	O
deduplicating	O	O
equal	O	O
Strings	O	O
)	O	O
.	O	O
What	O	O
'	O	O
s	O	O
novel	O	O
about	O	O
this	O	O
is	O	O
that	O	O
it	O	O
happens	O	O
during	O	O
garbage	O	O
collection	O	O
time	O	O
and	O	O
can	O	O
be	O	O
externally	O	O
controlled	O	O
.	O	O
Question	O	O
-	O	O
27888429	O	O
,	O	O
answer	O	O
-	O	O
27888447	O	O
You	O	O
can	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
E	O	O
.	O	O
g	O	O
.	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
You	O	O
can	O	O
also	O	O
use	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
as	O	O
mentioned	O	O
by	O	O
@	O	O
fge	O	O
,	O	O
which	O	O
looks	O	O
like	O	O
#	O	O
pre	O	O
But	O	O
note	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
whereas	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
IntStream	B-api_mention	B-api_mention
providing	O	O
you	O	O
pass	O	O
an	O	O
array	O	O
of	O	O
type	O	O
int	O	O
[	O	O
]	O	O
.	O	O
So	O	O
in	O	O
a	O	O
nutshell	O	O
for	O	O
primitives	O	O
type	O	O
you	O	O
can	O	O
observe	O	O
the	O	O
difference	O	O
between	O	O
2	O	O
methods	O	O
E	O	O
.	O	O
g	O	O
.	O	O
#	O	O
pre	O	O
When	O	O
you	O	O
pass	O	O
primitive	O	O
array	O	O
to	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
,	O	O
the	O	O
following	O	O
code	O	O
is	O	O
invoked	O	O
#	O	O
pre	O	O
and	O	O
when	O	O
you	O	O
pass	O	O
primitive	O	O
array	O	O
to	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	O
of	I-api_mention	O
the	O	O
following	O	O
code	O	O
is	O	O
invoked	O	O
#	O	O
pre	O	O
Hence	O	O
you	O	O
get	O	O
different	O	O
results	O	O
.	O	O
Updated	O	O
:	O	O
As	O	O
mentioned	O	O
by	O	O
Stuart	O	O
Marks	O	O
comment	O	O
The	O	O
subrange	O	O
overload	O	O
of	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
is	O	O
preferable	O	O
to	O	O
using	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
skip	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
because	O	O
the	O	O
former	O	O
results	O	O
in	O	O
a	O	O
SIZED	O	O
stream	O	O
whereas	O	O
the	O	O
latter	O	O
does	O	O
not	O	O
.	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
limit	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
doesn	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
the	O	O
size	O	O
is	O	O
m	O	O
or	O	O
less	O	O
than	O	O
m	O	O
,	O	O
whereas	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
does	O	O
range	O	O
checks	O	O
and	O	O
knows	O	O
the	O	O
exact	O	O
size	O	O
of	O	O
the	O	O
stream	O	O
You	O	O
can	O	O
read	O	O
the	O	O
source	O	O
code	O	O
for	O	O
stream	O	O
implementation	O	O
returned	O	O
by	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
here	O	O
,	O	O
whereas	O	O
for	O	O
stream	O	O
implementation	O	O
returned	O	O
by	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
skip	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
within	O	O
this	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846960	O	O
From	O	O
Effective	O	O
Java	O	O
,	O	O
Item	O	B-api_mention
#	O	O
43	O	O
-	O	O
StringLiteral	O	O
demonstrates	O	O
returning	O	O
an	O	O
empty	O	O
collection	O	O
and	O	O
perhaps	O	O
even	O	O
demonstrates	O	O
using	O	O
these	O	O
emptyList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
emptySet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
emptyMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
on	O	O
the	O	O
Collections	B-api_mention	B-api_mention
class	O	O
to	O	O
get	O	O
an	O	O
empty	O	O
collection	O	O
that	O	O
also	O	O
has	O	O
the	O	O
additional	O	O
benefit	O	O
of	O	O
being	O	O
immutable	O	O
.	O	O
From	O	O
Item	O	O
#	O	O
15	O	O
StringLiteral	O	O
.	O	O
From	O	O
Collections	B-api_mention	B-api_mention
-	O	O
emptySet	B-api_mention	O
-	O	O
Collections	B-api_mention	B-api_mention
-	O	O
emptyList	B-api_mention	O
-	O	O
Collections	B-api_mention	B-api_mention
#	O	O
blockquote	O	O
Note	O	O
:	O	O
Below	O	O
code	O	O
is	O	O
just	O	O
an	O	O
example	O	O
(	O	O
change	O	O
it	O	O
according	O	O
to	O	O
your	O	O
use	O	O
case	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
These	O	O
methods	O	O
offer	O	O
a	O	O
couple	O	O
of	O	O
advantages	O	O
:	O	O
#	O	O
li	O	O
They	O	O
'	O	O
re	O	O
more	O	O
concise	O	O
because	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
explicitly	O	O
type	O	O
out	O	O
the	O	O
generic	O	O
type	O	O
of	O	O
the	O	O
collection	O	O
-	O	O
it	O	O
'	O	O
s	O	O
generally	O	O
just	O	O
inferred	O	O
from	O	O
the	O	O
context	O	O
of	O	O
the	O	O
method	O	O
call	O	O
.	O	O
#	O	O
li	O	O
They	O	O
'	O	O
re	O	O
more	O	O
efficient	O	O
because	O	O
they	O	O
don	O	O
'	O	O
t	O	O
bother	O	O
creating	O	O
new	O	O
objects	O	O
;	O	O
they	O	O
just	O	O
re	O	O
-	O	O
use	O	O
an	O	O
existing	O	O
empty	O	O
and	O	O
immutable	O	O
object	O	O
.	O	O
This	O	O
effect	O	O
is	O	O
generally	O	O
very	O	O
minor	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
occasionally	O	O
(	O	O
well	O	O
,	O	O
rarely	O	O
)	O	O
important	O	O
.	O	O
Question	O	O
-	O	O
23932061	O	O
,	O	O
answer	O	O
-	O	O
23936723	O	O
There	O	O
'	O	O
s	O	O
a	O	O
much	O	O
better	O	O
answer	O	O
than	O	O
using	O	O
spliteratorUnknownSize	B-api_mention	B-api_mention
directly	O	O
,	O	O
which	O	O
is	O	O
both	O	O
easier	O	O
and	O	O
gets	O	O
a	O	O
better	O	O
result	O	O
.	O	O
Iterable	B-api_mention	B-api_mention
has	O	O
a	O	O
spliterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
so	O	O
you	O	O
should	O	O
just	O	O
use	O	O
that	O	O
to	O	O
get	O	O
your	O	O
spliterator	O	O
.	O	O
In	O	O
the	O	O
worst	O	O
case	O	O
,	O	O
its	O	O
the	O	O
same	O	O
code	O	O
(	O	O
the	O	O
default	O	O
implementation	O	O
uses	O	O
spliteratorUnknownSize	B-api_mention	B-api_mention
)	O	O
,	O	O
but	O	O
in	O	O
the	O	O
more	O	O
common	O	O
case	O	O
,	O	O
where	O	O
your	O	O
Iterable	O	B-api_mention
is	O	O
already	O	O
a	O	O
collection	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
get	O	O
a	O	O
better	O	O
spliterator	O	O
,	O	O
and	O	O
therefore	O	O
better	O	O
stream	O	O
performance	O	O
(	O	O
maybe	O	O
even	O	O
good	O	O
parallelism	O	O
.	O	O
)	O	O
Its	O	O
also	O	O
less	O	O
code	O	O
:	O	O
StreamSupport	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
moreStreamOps	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
getting	O	O
a	O	O
stream	O	O
from	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
see	O	O
Why	O	O
does	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
not	O	O
provide	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
?	O	O
)	O	O
is	O	O
not	O	O
very	O	O
painful	O	O
.	O	O
Question	O	O
-	O	O
8275499	O	O
,	O	O
answer	O	O
-	O	O
8275761	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
defined	O	O
in	O	O
Object	B-api_mention	B-api_mention
class	O	O
with	O	O
the	O	O
following	O	O
signature	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
it	O	O
is	O	O
not	O	O
defined	O	O
as	O	O
static	O	O
,	O	O
you	O	O
can	O	O
not	O	O
call	O	O
it	O	O
within	O	O
a	O	O
static	O	O
code	O	O
block	O	O
.	O	O
See	O	O
these	O	O
answers	O	O
for	O	O
more	O	O
information	O	O
:	O	O
Q1	O	O
,	O	O
Q2	O	O
,	O	O
Q3	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
in	O	O
a	O	O
static	O	O
context	O	O
,	O	O
then	O	O
you	O	O
have	O	O
to	O	O
use	O	O
the	O	O
class	O	O
literal	O	O
expression	O	O
to	O	O
get	O	O
the	O	O
Class	B-api_mention	B-api_mention
,	O	O
so	O	O
you	O	O
basically	O	O
have	O	O
to	O	O
do	O	O
like	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
type	O	O
of	O	O
expression	O	O
is	O	O
called	O	O
Class	B-api_mention	O
Literals	O	O
and	O	O
they	O	O
are	O	O
explained	O	O
in	O	O
Java	O	O
Language	O	O
Specification	O	O
Book	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
blockquote	O	O
You	O	O
can	O	O
also	O	O
find	O	O
information	O	O
about	O	O
this	O	O
subject	O	O
on	O	O
API	O	O
documentation	O	O
for	O	O
Class	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
24649842	O	O
What	O	O
'	O	O
s	O	O
the	O	O
main	O	O
difference	O	O
between	O	O
scheduleAtFixedRate	B-api_mention	B-api_mention
and	O	O
scheduleWithFixedDelay	B-api_mention	B-api_mention
methods	O	O
of	O	O
ScheduledExecutorService	B-api_mention	B-api_mention
?	O	O
#	O	O
pre	O	O
they	O	O
print	O	O
exact	O	O
the	O	O
same	O	O
time	O	O
,	O	O
seems	O	O
they	O	O
are	O	O
executed	O	O
at	O	O
exact	O	O
the	O	O
same	O	O
interval	O	O
.	O	O
Question	O	O
-	O	O
9510125	O	O
,	O	O
answer	O	O
-	O	O
9511578	O	O
Just	O	O
IMHO	O	O
.	O	O
Not	O	O
sure	O	O
it	O	O
'	O	O
s	O	O
100	O	O
%	O	O
correct	O	O
.	O	O
invalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
marks	O	O
the	O	O
container	O	O
as	O	O
invalid	O	O
.	O	O
Means	O	O
the	O	O
content	O	O
is	O	O
somehow	O	O
wrong	O	O
and	O	O
must	O	O
be	O	O
relayed	O	O
out	O	O
.	O	O
But	O	O
it	O	O
'	O	O
s	O	O
just	O	O
a	O	O
kind	O	O
of	O	O
mark	O	O
/	O	O
flag	O	O
.	O	O
It	O	O
'	O	O
s	O	O
possible	O	O
that	O	O
multiple	O	O
invalid	O	O
containers	O	O
must	O	O
be	O	O
refreshed	O	O
later	O	O
.	O	B-api_mention
validate	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
performs	O	O
relayout	O	O
.	O	O
It	O	O
means	O	O
invalid	O	O
content	O	O
is	O	O
asked	O	O
for	O	O
all	O	O
the	O	O
sizes	O	O
and	O	O
all	O	O
the	O	O
subcomponents	O	O
'	O	O
sizes	O	O
are	O	O
set	O	O
to	O	O
proper	O	O
values	O	O
by	O	O
LayoutManager	B-api_mention	B-api_mention
.	O	I-api_mention
revalidate	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
just	O	O
sum	O	O
of	O	O
both	O	O
.	O	O
It	O	O
marks	O	O
the	O	O
container	O	O
as	O	O
invalid	O	O
and	O	O
performs	O	O
layout	O	O
of	O	O
the	O	O
container	O	O
.	O	O
Question	O	O
-	O	O
33804394	O	O
,	O	O
answer	O	O
-	O	O
33814549	O	O
In	O	O
this	O	O
sort	O	O
of	O	O
situation	O	O
I	O	O
would	O	O
write	O	O
#	O	O
pre	O	O
Interestingly	O	O
you	O	O
say	O	O
that	O	O
the	O	O
"	O	O
try	O	O
statement	O	O
will	O	O
never	O	O
fail	O	O
"	O	O
,	O	O
but	O	O
you	O	O
still	O	O
took	O	O
the	O	O
trouble	O	O
to	O	O
write	O	O
a	O	O
statement	O	O
e	O	O
.	B-api_mention	B-api_mention
printStackTrace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
that	O	O
you	O	O
claim	O	O
will	O	O
never	O	O
be	O	O
executed	O	O
.	O	O
Why	O	O
?	O	O
Perhaps	O	O
your	O	O
belief	O	O
is	O	O
not	O	O
that	O	O
firmly	O	O
held	O	O
.	O	O
That	O	O
is	O	O
good	O	O
(	O	O
in	O	O
my	O	O
opinion	O	O
)	O	O
,	O	O
since	O	O
your	O	O
belief	O	O
is	O	O
not	O	O
based	O	O
on	O	O
the	O	O
code	O	O
you	O	O
wrote	O	O
,	O	O
but	O	O
rather	O	O
on	O	O
the	O	O
expectation	O	O
that	O	O
your	O	O
client	O	O
will	O	O
not	O	O
violate	O	O
the	O	O
precondition	O	O
.	O	O
Better	O	O
to	O	O
program	O	O
public	O	O
methods	O	O
defensively	O	O
.	O	O
By	O	O
the	O	O
way	O	O
,	O	O
your	O	O
code	O	O
won	O	O
'	O	O
t	O	O
compile	O	O
for	O	O
me	O	O
.	O	O
You	O	O
can	O	O
'	O	O
t	O	O
call	O	O
a	O	O
.	B-api_mention	B-api_mention
clone	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
even	O	O
if	O	O
the	O	O
type	O	O
of	O	O
a	O	O
is	O	O
Cloneable	B-api_mention	B-api_mention
.	O	O
At	O	O
least	O	O
Eclipse	O	O
'	O	O
s	O	O
compiler	O	O
says	O	O
so	O	O
.	O	O
Expression	O	O
a	O	O
.	B-api_mention	B-api_mention
clone	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
error	O	O
#	O	O
blockquote	O	O
What	O	O
I	O	O
would	O	O
do	O	O
for	O	O
your	O	O
specific	O	O
case	O	O
is	O	O
#	O	O
pre	O	O
Where	O	O
PubliclyCloneable	O	B-api_mention
is	O	O
defined	O	O
by	O	O
#	O	O
pre	O	O
Or	O	O
,	O	O
if	O	O
you	O	O
absolutely	O	O
need	O	O
the	O	O
parameter	O	O
type	O	O
to	O	O
be	O	O
Cloneable	B-api_mention	B-api_mention
,	O	O
the	O	O
following	O	O
at	O	O
least	O	O
compiles	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
34509566	O	O
,	O	O
answer	O	O
-	O	O
34509669	O	O
The	O	O
difference	O	O
between	O	O
d	O	O
and	O	O
e	O	O
is	O	O
that	O	O
when	O	O
you	O	O
concatenate	O	O
string	O	O
literals	O	O
,	O	O
the	O	O
concatenation	O	O
is	O	O
performed	O	O
at	O	O
compile	O	O
time	O	O
.	O	O
Java	O	O
compiler	O	O
treats	O	O
StringLiteral	O	O
+	O	O
StringLiteral	O	O
expression	O	O
in	O	O
the	O	O
same	O	O
way	O	O
as	O	O
StringLiteral	O	O
expression	O	O
,	O	O
producing	O	O
the	O	O
same	O	O
literal	O	O
at	O	O
compile	O	O
time	O	O
.	O	O
Since	O	O
all	O	O
String	B-api_mention	B-api_mention
literals	O	O
get	O	O
interned	O	O
,	O	O
d	O	O
,	O	O
which	O	O
is	O	O
a	O	O
result	O	O
of	O	O
StringLiteral	O	O
+	O	O
StringLiteral	O	O
,	O	O
also	O	O
ends	O	O
up	O	O
referencing	O	O
the	O	O
same	O	O
object	O	O
as	O	O
a	O	O
and	O	O
b	O	O
'	O	O
s	O	O
StringLiteral	O	O
.	O	O
The	O	O
expression	O	O
for	O	O
e	O	O
,	O	O
which	O	O
is	O	O
c	O	O
+	O	O
StringLiteral	O	O
,	O	O
is	O	O
evaluated	O	O
at	O	O
runtime	O	O
.	O	O
Even	O	O
though	O	O
it	O	O
produces	O	O
the	O	O
same	O	O
string	O	O
,	O	O
this	O	O
fact	O	O
is	O	O
not	O	O
used	O	O
by	O	O
the	O	O
compiler	O	O
.	O	O
That	O	O
'	O	O
s	O	O
why	O	O
a	O	O
different	O	O
String	B-api_mention	B-api_mention
object	O	O
is	O	O
produced	O	O
,	O	O
resulting	O	O
in	O	O
failed	O	O
comparison	O	O
on	O	O
=	O	O
=	O	O
.	O	O
Question	O	O
-	O	O
20331163	O	O
,	O	O
answer	O	O
-	O	O
20331323	O	O
Another	O	O
way	O	O
of	O	O
doing	O	O
that	O	O
is	O	O
:	O	O
String	B-api_mention	B-api_mention
date	O	O
=	O	O
dateAndTime	O	O
.	B-api_mention	B-api_mention
substring	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
I	O	O
'	O	O
m	O	O
not	O	O
exactly	O	O
certain	O	O
,	O	O
but	O	O
I	O	O
think	O	O
this	O	O
might	O	O
be	O	O
faster	O	O
/	O	O
use	O	O
less	O	O
memory	O	O
than	O	O
using	O	O
the	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Question	O	O
-	O	O
10786042	O	O
,	O	O
answer	O	O
-	O	O
16226168	O	O
I	O	O
would	O	O
not	O	O
use	O	O
URLEncoder	B-api_mention	B-api_mention
.	O	O
Besides	O	O
being	O	O
incorrectly	O	O
named	O	O
(	O	O
URLEncoder	B-api_mention	B-api_mention
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
URLs	O	O
)	O	O
,	O	O
inefficient	O	O
(	O	O
it	O	O
uses	O	O
a	O	O
StringBuffer	B-api_mention	B-api_mention
instead	O	O
of	O	O
Builder	B-api_mention	B-api_mention
and	O	O
does	O	O
a	O	O
couple	O	O
of	O	O
other	O	O
things	O	O
that	O	O
are	O	O
slow	O	O
)	O	O
Its	O	O
also	O	O
way	O	O
too	O	O
easy	O	O
to	O	O
screw	O	O
it	O	O
up	O	O
.	O	O
Instead	O	O
I	O	O
would	O	O
use	O	O
URIBuilder	B-api_mention	B-api_mention
or	O	O
Spring	O	B-api_mention
'	O	O
s	O	O
URIUtils	B-api_mention	B-api_mention
or	O	O
Commons	O	O
Apache	O	O
HttpClient	B-api_mention	O
.	O	O
The	O	O
reason	O	O
being	O	O
you	O	O
have	O	O
to	O	O
escape	O	O
the	O	O
query	O	O
parameters	O	O
name	O	O
(	O	O
ie	O	O
BalusC	O	O
'	O	O
s	O	O
answer	O	O
q	O	O
)	O	O
differently	O	O
than	O	O
the	O	O
parameter	O	O
value	O	O
.	O	O
The	O	O
only	O	O
downside	O	O
to	O	O
the	O	O
above	O	O
(	O	O
that	O	O
I	O	O
found	O	O
out	O	O
painfully	O	O
)	O	O
is	O	O
that	O	O
URL	O	O
'	O	O
s	O	O
are	O	O
not	O	O
a	O	O
true	O	O
subset	O	O
of	O	O
URI	O	O
'	O	O
s	O	O
.	O	O
Since	O	O
I	O	O
'	O	O
m	O	O
just	O	O
linking	O	O
to	O	O
other	O	O
answers	O	O
I	O	O
marked	O	O
this	O	O
as	O	O
a	O	O
community	O	O
wiki	O	O
.	O	O
Feel	O	O
free	O	O
to	O	O
edit	O	O
.	O	O
Question	O	O
-	O	O
14014086	O	O
,	O	O
answer	O	O
-	O	O
20784007	O	O
Ken	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
basically	O	O
right	O	O
but	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
chime	O	O
in	O	O
on	O	O
the	O	O
"	O	O
why	O	O
would	O	O
you	O	O
want	O	O
to	O	O
use	O	O
one	O	O
over	O	O
the	O	O
other	O	O
?	O	O
"	O	O
part	O	O
of	O	O
your	O	O
question	O	O
.	O	O
Basics	O	O
The	O	O
base	O	O
interface	O	O
you	O	O
choose	O	O
for	O	O
your	O	O
repository	O	O
has	O	O
two	O	O
main	O	O
purposes	O	O
.	O	O
First	O	O
,	O	O
you	O	O
allow	O	O
the	O	O
Spring	O	O
Data	O	O
repository	O	O
infrastructure	O	O
to	O	O
find	O	O
your	O	O
interface	O	O
and	O	O
trigger	O	O
the	O	O
proxy	O	O
creation	O	O
so	O	O
that	O	O
you	O	O
inject	O	O
instances	O	O
of	O	O
the	O	O
interface	O	O
into	O	O
clients	O	O
.	O	O
The	O	O
second	O	O
purpose	O	O
is	O	O
to	O	O
pull	O	O
in	O	O
as	O	O
much	O	O
functionality	O	O
as	O	O
needed	O	O
into	O	O
the	O	O
interface	O	O
without	O	O
having	O	O
to	O	O
declare	O	O
extra	O	O
methods	O	O
.	O	O
The	O	O
common	O	O
interfaces	O	O
The	O	O
Spring	O	O
Data	O	O
core	O	O
library	O	O
ships	O	O
with	O	O
two	O	O
base	O	O
interfaces	O	O
that	O	O
expose	O	O
a	O	O
dedicated	O	O
set	O	O
of	O	O
functionalities	O	O
:	O	O
#	O	O
li	O	O
CrudRepository	B-api_mention	O
-	O	O
CRUD	O	O
methods	O	O
#	O	O
li	O	O
PagingAndSortingRepository	B-api_mention	O
-	O	O
methods	O	O
for	O	O
pagination	O	O
and	O	O
sorting	O	O
(	O	O
extends	O	O
CrudRepository	B-api_mention	B-api_mention
)	O	O
Store	O	O
-	O	O
specific	O	O
interfaces	O	O
The	O	O
individual	O	O
store	O	O
modules	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
for	O	O
JPA	O	O
or	O	O
MongoDB	O	O
)	O	O
expose	O	O
store	O	O
-	O	O
specific	O	O
extensions	O	O
of	O	O
these	O	O
base	O	O
interfaces	O	O
to	O	O
allow	O	O
access	O	O
to	O	O
store	O	O
-	O	O
specific	O	O
functionality	O	O
like	O	O
flushing	O	O
or	O	O
dedicated	O	O
batching	O	O
that	O	O
take	O	O
some	O	O
store	O	O
specifics	O	O
into	O	O
account	O	O
.	O	O
An	O	O
example	O	O
for	O	O
this	O	O
is	O	O
deleteInBatch	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
JpaRepository	B-api_mention	B-api_mention
which	O	O
is	O	O
different	O	O
from	O	O
delete	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
it	O	O
uses	O	O
a	O	O
query	O	O
to	O	O
delete	O	O
the	O	O
given	O	O
entities	O	O
which	O	O
is	O	O
more	O	O
performant	O	O
but	O	O
comes	O	O
with	O	O
the	O	O
side	O	O
effect	O	O
of	O	O
not	O	O
triggering	O	O
the	O	O
JPA	O	O
-	O	O
defined	O	O
cascades	O	O
(	O	O
as	O	O
the	O	O
spec	O	O
defines	O	O
it	O	O
)	O	O
.	O	O
We	O	O
generally	O	O
recommend	O	O
not	O	O
to	O	O
use	O	O
these	O	O
base	O	O
interfaces	O	O
as	O	O
they	O	O
expose	O	O
the	O	O
underlying	O	O
persistence	O	O
technology	O	O
to	O	O
the	O	O
clients	O	O
and	O	O
thus	O	O
tighten	O	O
the	O	O
coupling	O	O
between	O	O
them	O	O
and	O	O
the	O	O
repository	O	O
.	O	O
Plus	O	O
,	O	O
you	O	O
get	O	O
a	O	O
bit	O	O
away	O	O
from	O	O
the	O	O
original	O	O
definition	O	O
of	O	O
a	O	O
repository	O	O
which	O	O
is	O	O
basically	O	O
"	O	O
a	O	O
collection	O	O
of	O	O
entities	O	O
"	O	O
.	O	O
So	O	O
if	O	O
you	O	O
can	O	O
,	O	O
stay	O	O
with	O	O
PagingAndSortingRepository	B-api_mention	B-api_mention
.	O	O
Custom	O	O
repository	O	O
base	O	O
interfaces	O	O
The	O	O
downside	O	O
of	O	O
directly	O	O
depending	O	O
on	O	O
one	O	O
of	O	O
the	O	O
provided	O	O
base	O	O
interfaces	O	O
is	O	O
two	O	O
-	O	O
fold	O	O
.	O	O
Both	O	O
of	O	O
them	O	O
might	O	O
be	O	O
considered	O	O
as	O	O
theoretical	O	O
but	O	O
I	O	O
think	O	O
they	O	O
'	O	O
re	O	O
important	O	O
to	O	O
be	O	O
aware	O	O
of	O	O
:	O	O
#	O	O
li	O	O
Depending	O	O
on	O	O
a	O	O
a	O	O
Spring	O	O
Data	O	O
repository	O	O
interface	O	O
couples	O	O
your	O	O
repository	O	O
interface	O	O
to	O	O
the	O	O
library	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
this	O	O
is	O	O
a	O	O
particular	O	O
issue	O	O
as	O	O
you	O	O
'	O	O
ll	O	O
probably	O	O
use	O	O
abstractions	O	O
like	O	O
Page	B-api_mention	O
or	O	O
Pageable	B-api_mention	B-api_mention
in	O	O
your	O	O
code	O	O
anyway	O	O
.	O	O
Spring	O	O
Data	O	O
is	O	O
not	O	O
any	O	O
different	O	O
from	O	O
any	O	O
other	O	O
general	O	O
purpose	O	O
library	O	O
like	O	O
commons	O	O
-	O	O
lang	O	O
or	O	O
Guava	O	O
.	O	O
As	O	O
long	O	O
as	O	O
it	O	O
provides	O	O
reasonable	O	O
benefit	O	O
,	O	O
it	O	O
'	O	O
s	O	O
just	O	O
fine	O	O
.	O	O
#	O	O
li	O	O
By	O	O
extending	O	O
e	O	O
.	O	O
g	O	O
.	O	O
CrudRepository	B-api_mention	O
,	O	O
you	O	O
expose	O	O
a	O	O
complete	O	O
set	O	O
of	O	O
persistence	O	O
method	O	O
at	O	O
once	O	O
.	O	O
This	O	O
is	O	O
probably	O	O
fine	O	O
in	O	O
most	O	O
circumstances	O	O
as	O	O
well	O	O
but	O	O
you	O	O
might	O	O
run	O	O
into	O	O
situations	O	O
where	O	O
you	O	O
'	O	O
d	O	O
like	O	O
to	O	O
gain	O	O
more	O	O
fine	O	O
-	O	O
grained	O	O
control	O	O
over	O	O
the	O	O
methods	O	O
expose	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
to	O	O
create	O	O
a	O	O
ReadOnlyRepository	B-api_mention	O
that	O	O
doesn	O	O
'	O	O
t	O	O
include	O	O
the	O	O
save	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
delete	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
of	O	O
CrudRepository	B-api_mention	B-api_mention
.	O	O
The	O	O
solution	O	O
to	O	O
both	O	O
of	O	O
these	O	O
downsides	O	O
is	O	O
to	O	O
craft	O	O
your	O	O
own	O	O
base	O	O
repository	O	O
interface	O	O
or	O	O
even	O	O
a	O	O
set	O	O
of	O	O
them	O	O
.	O	O
In	O	O
a	O	O
lot	O	O
of	O	O
applications	O	O
we	O	O
'	O	O
ve	O	O
seen	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
first	O	O
repository	O	O
interface	O	O
is	O	O
some	O	O
general	O	O
purpose	O	O
base	O	O
interface	O	O
that	O	O
actually	O	O
only	O	O
fixes	O	O
point	O	O
1	O	O
but	O	O
also	O	O
ties	O	O
the	O	O
ID	O	O
type	O	O
to	O	O
be	O	O
Long	B-api_mention	B-api_mention
for	O	O
consistency	O	O
.	O	O
The	O	O
second	O	O
interface	O	O
usually	O	O
has	O	O
all	O	O
the	O	O
find	O	O
…	O	O
(	O	O
…	O	O
)	O	O
methods	O	O
copied	O	O
from	O	O
CrudRepository	B-api_mention	B-api_mention
and	O	O
PagingAndSortingRepository	B-api_mention	B-api_mention
but	O	O
does	O	O
not	O	O
expose	O	O
the	O	O
manipulating	O	O
ones	O	O
.	O	O
Read	O	O
more	O	O
on	O	O
that	O	O
approach	O	O
in	O	O
the	O	O
reference	O	O
documentation	O	O
.	O	O
Summary	O	O
-	O	O
tl	O	O
;	O	O
dr	O	O
The	O	O
repository	O	O
abstraction	O	O
allows	O	O
you	O	O
to	O	O
pickt	O	O
the	O	O
base	O	O
repository	O	O
totally	O	O
driven	O	O
by	O	O
you	O	O
architectural	O	O
and	O	O
functional	O	O
needs	O	O
.	O	O
Use	O	O
the	O	O
ones	O	O
provided	O	O
out	O	O
of	O	O
the	O	O
box	O	O
if	O	O
they	O	O
suit	O	O
,	O	O
craft	O	O
your	O	O
own	O	O
repository	O	O
base	O	O
interfaces	O	O
if	O	O
necessary	O	O
.	O	O
Stay	O	O
away	O	O
from	O	O
the	O	O
store	O	O
specific	O	O
repository	O	O
interfaces	O	O
unless	O	O
unavoidable	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14495128	O	O
If	O	O
the	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
calls	O	O
the	O	O
operating	O	O
system	O	O
to	O	O
get	O	O
the	O	O
time	O	O
of	O	O
day	O	O
,	O	O
then	O	O
you	O	O
cannot	O	O
compare	O	O
it	O	O
to	O	O
your	O	O
function	O	O
.	O	O
Your	O	O
function	O	O
is	O	O
a	O	O
PRNG	O	O
,	O	O
whereas	O	O
that	O	O
function	O	O
is	O	O
striving	O	O
for	O	O
real	O	O
random	O	O
numbers	O	O
.	O	O
Apples	O	O
and	O	O
oranges	O	O
.	O	O
Your	O	O
PRNG	O	O
may	O	O
be	O	O
fast	O	O
,	O	O
but	O	O
it	O	O
does	O	O
not	O	O
have	O	O
enough	O	O
state	O	O
information	O	O
to	O	O
achieve	O	O
a	O	O
long	O	O
period	O	O
before	O	O
it	O	O
repeats	O	O
(	O	O
and	O	O
its	O	O
logic	O	O
is	O	O
not	O	O
sophisticated	O	O
enough	O	O
to	O	O
even	O	O
achieve	O	O
the	O	O
periods	O	O
that	O	O
are	O	O
possible	O	O
with	O	O
that	O	O
much	O	O
state	O	O
information	O	O
)	O	O
.	O	O
Period	O	O
is	O	O
the	O	O
length	O	O
of	O	O
the	O	O
sequence	O	O
before	O	O
your	O	O
PRNG	O	O
begins	O	O
to	O	O
repeat	O	O
itself	O	O
.	O	O
This	O	O
happens	O	O
as	O	O
soon	O	O
as	O	O
the	O	O
PRNG	O	O
machine	O	O
makes	O	O
a	O	O
state	O	O
transition	O	O
to	O	O
a	O	O
state	O	O
which	O	O
is	O	O
identical	O	O
to	O	O
some	O	O
past	O	O
state	O	O
.	O	O
From	O	O
there	O	O
,	O	O
it	O	O
will	O	O
repeat	O	O
the	O	O
transitions	O	O
which	O	O
began	O	O
in	O	O
that	O	O
state	O	O
.	O	O
Another	O	O
problem	O	O
with	O	O
PRNG	O	O
'	O	O
s	O	O
can	O	O
be	O	O
a	O	O
low	O	O
number	O	O
of	O	O
unique	O	O
sequences	O	O
,	O	O
as	O	O
well	O	O
as	O	O
degenerate	O	O
convergence	O	O
on	O	O
a	O	O
particular	O	O
sequence	O	O
which	O	O
repeats	O	O
.	O	O
There	O	O
can	O	O
also	O	O
be	O	O
undesirable	O	O
patterns	O	O
.	O	O
For	O	O
instance	O	O
,	O	O
suppose	O	O
that	O	O
a	O	O
PRNG	O	O
looks	O	O
fairly	O	O
random	O	O
when	O	O
the	O	O
numbers	O	O
are	O	O
printed	O	O
in	O	O
decimal	O	O
,	O	O
but	O	O
an	O	O
inspection	O	O
of	O	O
the	O	O
values	O	O
in	O	O
binary	O	O
shows	O	O
that	O	O
bit	O	O
4	O	O
is	O	O
simply	O	O
toggling	O	O
between	O	O
0	O	O
and	O	O
1	O	O
on	O	O
each	O	O
call	O	O
.	O	O
Oops	O	O
!	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
the	O	O
Mersenne	O	O
Twister	O	O
and	O	O
other	O	O
algorithms	O	O
.	O	O
There	O	O
are	O	O
ways	O	O
to	O	O
strike	O	O
a	O	O
balance	O	O
between	O	O
the	O	O
period	O	O
length	O	O
and	O	O
CPU	O	O
cycles	O	O
.	O	O
One	O	O
basic	O	O
approach	O	O
(	O	O
used	O	O
in	O	O
the	O	O
Mersenne	O	O
Twister	O	O
)	O	O
is	O	O
to	O	O
cycle	O	O
around	O	O
in	O	O
the	O	O
state	O	O
vector	O	O
.	O	O
That	O	O
is	O	O
to	O	O
say	O	O
,	O	O
when	O	O
a	O	O
number	O	O
is	O	O
being	O	O
generated	O	O
,	O	O
it	O	O
is	O	O
not	O	O
based	O	O
on	O	O
the	O	O
entire	O	O
state	O	O
,	O	O
just	O	O
on	O	O
a	O	O
few	O	O
words	O	O
from	O	O
the	O	O
state	O	O
array	O	O
subject	O	O
to	O	O
a	O	O
few	O	O
bit	O	O
operations	O	O
.	O	O
But	O	O
at	O	O
each	O	O
step	O	O
,	O	O
the	O	O
algorithm	O	O
also	O	O
moves	O	O
around	O	O
in	O	O
the	O	O
array	O	O
,	O	O
scrambling	O	O
the	O	O
contents	O	O
a	O	O
little	O	O
bit	O	O
at	O	O
a	O	O
time	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14492043	O	O
'	O	O
Random	O	B-api_mention
'	O	O
is	O	O
more	O	O
than	O	O
just	O	O
about	O	O
getting	O	O
numbers	O	O
.	O	O
.	O	O
.	O	O
.	O	O
what	O	O
you	O	O
have	O	O
is	O	O
pseudo	O	O
-	O	O
random	O	O
If	O	O
pseudo	O	O
-	O	O
random	O	O
is	O	O
good	O	O
enough	O	O
for	O	O
your	O	O
purposes	O	O
,	O	O
then	O	O
sure	O	O
,	O	O
it	O	O
'	O	O
s	O	O
way	O	O
faster	O	O
(	O	O
and	O	O
XOR	O	O
+	O	O
Bitshift	O	O
will	O	O
be	O	O
faster	O	O
than	O	O
what	O	O
you	O	O
have	O	O
)	O	O
Rolf	O	O
Edit	O	O
:	O	O
OK	O	O
,	O	O
after	O	O
being	O	O
too	O	O
hasty	O	O
in	O	O
this	O	O
answer	O	O
,	O	O
let	O	O
me	O	O
answer	O	O
the	O	O
real	O	O
reason	O	O
why	O	O
your	O	O
code	O	O
is	O	O
faster	O	O
:	O	O
From	O	O
the	O	O
JavaDoc	O	O
for	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
blockquote	O	O
This	O	O
is	O	O
likely	O	O
why	O	O
your	O	O
code	O	O
is	O	O
faster	O	O
.	O	O
Question	O	O
-	O	O
20001427	O	O
,	O	O
answer	O	O
-	O	O
22245383	O	O
:	O	O
:	O	O
is	O	O
called	O	O
Method	O	O
Reference	O	O
.	O	O
It	O	O
is	O	O
basically	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
single	O	O
method	O	O
.	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
refers	O	O
to	O	O
an	O	O
existing	O	O
method	O	O
by	O	O
name	O	O
.	O	O
Short	O	O
Explanation	O	O
:	O	O
Below	O	O
is	O	O
an	O	O
example	O	O
of	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
static	O	O
method	O	O
:	O	O
#	O	O
pre	O	O
square	O	O
can	O	O
be	O	O
passed	O	O
around	O	O
just	O	O
like	O	O
object	O	O
reference	O	O
'	O	O
s	O	O
and	O	O
trigger	O	O
when	O	O
at	O	O
need	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
it	O	O
can	O	O
be	O	O
perfectly	O	O
used	O	O
as	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
normal	O	O
method	O	O
of	O	O
an	O	O
object	O	O
and	O	O
not	O	O
just	O	O
static	O	O
ones	O	O
.	O	O
#	O	O
pre	O	O
Function	B-api_mention	O
above	O	O
is	O	O
a	O	O
functional	O	O
interface	O	O
.	O	O
Well	O	O
to	O	O
fully	O	O
explain	O	O
:	O	O
:	O	O
,	O	O
it	O	O
is	O	O
important	O	O
to	O	O
understand	O	O
Functional	O	O
Interface	O	O
.	O	O
Plainly	O	O
,	O	O
Function	O	B-api_mention
interface	O	O
is	O	O
an	O	O
interface	O	O
with	O	O
just	O	O
one	O	O
abstract	O	O
method	O	O
.	O	O
For	O	O
example	O	O
:	O	O
Runnable	B-api_mention	B-api_mention
,	O	O
Callable	B-api_mention	B-api_mention
,	O	O
ActionListener	B-api_mention	B-api_mention
and	O	O
so	O	O
.	O	O
Function	B-api_mention	O
above	O	O
is	O	O
a	O	O
functional	O	O
interface	O	O
with	O	O
just	O	O
one	O	O
method	O	O
apply	O	O
.	O	O
It	O	O
takes	O	O
one	O	O
argument	O	O
and	O	O
produces	O	O
a	O	O
result	O	O
.	O	O
The	O	O
reason	O	O
why	O	O
:	O	O
:	O	O
are	O	O
awesome	O	O
is	O	O
because	O	O
:	O	O
#	O	O
blockquote	O	O
i	O	O
.	O	O
e	O	O
.	O	O
Just	O	O
like	O	O
writing	O	O
lambda	O	O
body	O	O
:	O	O
Function	B-api_mention	O
<	I-api_mention	O
T	I-api_mention	O
>	I-api_mention	O
square	O	O
=	O	O
(	O	O
Double	B-api_mention	B-api_mention
x	O	O
)	O	O
-	O	O
>	O	O
x	O	O
*	O	O
x	O	O
;	O	O
You	O	O
can	O	O
simply	O	O
do	O	O
:	O	O
Function	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
square	O	O
=	O	O
Hey	O	O
:	O	O
:	O	O
square	O	O
;	O	O
At	O	O
runtime	O	O
they	O	O
behave	O	O
exactly	O	O
the	O	O
same	O	O
.	O	O
The	O	O
bytecode	O	O
may	O	O
/	O	O
not	O	O
be	O	O
the	O	O
same	O	O
(	O	O
For	O	O
above	O	O
case	O	O
,	O	O
it	O	O
generates	O	O
the	O	O
same	O	O
bytecode	O	O
(	O	O
compile	O	O
above	O	O
and	O	O
check	O	O
javap	O	O
-	O	O
c	O	O
)	O	O
)	O	O
The	O	O
only	O	O
major	O	O
criteria	O	O
to	O	O
satisfy	O	O
is	O	O
:	O	O
the	O	O
method	O	O
you	O	O
provide	O	O
should	O	O
have	O	O
a	O	O
similar	O	O
signature	O	O
to	O	O
method	O	O
of	O	O
the	O	O
FunctionalInterface	B-api_mention	B-api_mention
you	O	O
use	O	O
as	O	O
object	O	O
reference	O	O
.	O	O
Below	O	O
is	O	O
illegal	O	O
Supplier	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
p	O	O
=	O	O
Hey	O	O
:	O	O
:	O	O
square	O	O
;	O	O
/	O	O
/	O	O
illegal	O	O
square	O	O
expects	O	O
an	O	O
argument	O	O
and	O	O
returns	O	O
a	O	O
double	O	O
.	O	O
get	O	O
method	O	O
in	O	O
Supplier	B-api_mention	B-api_mention
expects	O	O
an	O	O
argument	O	O
but	O	O
doesn	O	O
'	O	O
t	O	O
return	O	O
anything	O	O
.	O	O
So	O	O
it	O	O
is	O	O
an	O	O
error	O	O
.	O	O
Method	O	O
Reference	O	O
refers	O	O
to	O	O
a	O	O
method	O	O
of	O	O
the	O	O
functional	O	O
interface	O	O
(	O	O
As	O	O
mentioned	O	O
,	O	O
functional	O	O
interface	O	O
can	O	O
only	O	O
have	O	O
one	O	O
method	O	O
)	O	O
.	O	O
Some	O	O
more	O	O
examples	O	O
:	O	O
accept	O	O
method	O	O
in	O	O
Consumer	B-api_mention	O
takes	O	O
an	O	O
input	O	O
but	O	O
doesnt	O	O
return	O	O
anything	O	O
.	O	O
#	O	O
pre	O	O
Above	O	O
getRandom	O	B-api_mention
takes	O	O
no	O	O
argument	O	O
and	O	O
returns	O	O
a	O	O
double	O	O
.	O	O
So	O	O
any	O	O
functional	O	O
interface	O	O
that	O	O
satisfies	O	O
the	O	O
criteria	O	O
of	O	O
:	O	O
take	O	O
no	O	O
argument	O	O
and	O	O
return	O	O
double	O	O
can	O	O
be	O	O
used	O	O
.	O	O
Another	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
case	O	O
of	O	O
Parametrized	O	O
Types	O	O
:	O	O
#	O	O
pre	O	O
Method	O	O
Reference	O	O
can	O	O
be	O	O
obtained	O	O
in	O	O
different	O	O
styles	O	O
,	O	O
but	O	O
fundamentally	O	O
they	O	O
all	O	O
mean	O	O
the	O	O
same	O	O
and	O	O
can	O	O
simply	O	O
be	O	O
visualized	O	O
as	O	O
a	O	O
lambda	O	O
:	O	O
#	O	O
li	O	O
A	O	O
static	O	O
method	O	O
(	O	O
ClassName	O	B-api_mention
:	O	I-api_mention
:	O	I-api_mention
methName	O	I-api_mention
)	O	O
#	O	O
li	O	O
An	O	O
instance	O	O
method	O	O
of	O	O
a	O	O
particular	O	O
object	O	O
(	O	O
instanceRef	O	B-api_mention
:	O	I-api_mention
:	O	I-api_mention
methName	O	I-api_mention
)	O	O
#	O	O
li	O	O
A	O	O
super	O	O
method	O	O
of	O	O
a	O	O
particular	O	O
object	O	O
(	O	O
super	O	B-api_mention
:	O	I-api_mention
:	O	I-api_mention
methName	O	I-api_mention
)	O	O
#	O	O
li	O	O
An	O	O
instance	O	O
method	O	O
of	O	O
an	O	O
arbitrary	O	O
object	O	O
of	O	O
a	O	O
particular	O	O
type	O	O
(	O	O
ClassName	O	B-api_mention
:	O	I-api_mention
:	O	I-api_mention
methName	O	I-api_mention
)	O	O
#	O	O
li	O	O
A	O	O
class	O	O
constructor	O	O
reference	O	O
(	O	O
ClassName	O	B-api_mention
:	O	I-api_mention
:	O	I-api_mention
new	O	I-api_mention
)	O	I-api_mention
#	O	O
li	O	O
An	O	O
array	O	O
constructor	O	O
reference	O	O
(	O	O
TypeName	O	B-api_mention
[	O	O
]	O	O
:	O	O
:	O	O
new	O	O
)	O	O
For	O	O
further	O	O
reference	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
15336477	O	O
,	O	O
answer	O	O
-	O	O
15336606	O	O
It	O	O
got	O	O
deprecated	O	O
in	O	O
version	O	O
4	O	O
.	O	O
3	O	O
-	O	O
alpha1	O	O
which	O	O
you	O	O
use	O	O
because	O	O
of	O	O
the	O	O
LATEST	O	O
version	O	O
specification	O	O
.	O	O
If	O	O
you	O	O
take	O	O
a	O	O
look	O	O
at	O	O
the	O	O
javadoc	O	O
of	O	O
the	O	O
class	O	O
,	O	O
it	O	O
tells	O	O
you	O	O
what	O	O
to	O	O
use	O	O
instead	O	O
:	O	O
HttpClientBuilder	B-api_mention	B-api_mention
.	O	O
In	O	O
the	O	O
latest	O	O
stable	O	O
version	O	O
(	O	O
4	O	O
.	O	O
2	O	O
.	O	O
3	O	O
)	O	O
the	O	O
DefaultHttpClient	B-api_mention	B-api_mention
is	O	O
not	O	O
deprecated	O	O
yet	O	O
.	O	O
Question	O	O
-	O	O
18532488	O	O
,	O	O
answer	O	O
-	O	O
24296741	O	O
Here	O	O
'	O	O
s	O	O
another	O	O
technique	O	O
I	O	O
ran	O	O
across	O	O
the	O	O
other	O	O
day	O	O
:	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
call	O	O
creates	O	O
a	O	O
List	B-api_mention	B-api_mention
containing	O	O
n	O	O
copies	O	O
of	O	O
whatever	O	O
value	O	O
you	O	O
provide	O	O
.	O	O
In	O	O
this	O	O
case	O	O
it	O	O
'	O	O
s	O	O
the	O	O
boxed	O	O
Integer	O	B-api_mention
value	O	O
1	O	O
.	O	O
Of	O	O
course	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
actually	O	O
create	O	O
a	O	O
list	O	O
with	O	O
n	O	O
elements	O	O
;	O	O
it	O	O
creates	O	O
a	O	O
"	O	O
virtualized	O	O
"	O	O
list	O	O
that	O	O
contains	O	O
only	O	O
the	O	O
value	O	O
and	O	O
the	O	O
length	O	O
,	O	O
and	O	O
any	O	O
call	O	O
to	O	O
get	O	O
within	O	O
range	O	O
just	O	O
returns	O	O
the	O	O
value	O	O
.	O	O
The	O	O
nCopies	B-api_mention	O
method	O	O
has	O	O
been	O	O
around	O	O
since	O	O
the	O	O
Collections	B-api_mention	B-api_mention
Framework	O	O
was	O	O
introduced	O	O
way	O	O
back	O	O
in	O	O
JDK	O	O
1	O	O
.	O	O
2	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
the	O	O
ability	O	O
to	O	O
create	O	O
a	O	O
stream	O	O
from	O	O
its	O	O
result	O	O
was	O	O
added	O	O
in	O	O
Java	O	O
SE	O	O
8	O	O
.	O	O
Big	O	O
deal	O	O
,	O	O
another	O	O
way	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
in	O	O
about	O	O
the	O	O
same	O	O
number	O	O
of	O	O
lines	O	O
.	O	O
However	O	O
,	O	O
this	O	O
technique	O	O
is	O	O
faster	O	O
than	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
generate	I-api_mention	I-api_mention
and	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
iterate	I-api_mention	I-api_mention
approaches	O	O
,	O	O
and	O	O
surprisingly	O	O
,	O	O
it	O	O
'	O	O
s	O	O
also	O	O
faster	O	O
than	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
approach	O	O
.	O	O
For	O	O
iterate	O	O
and	O	O
generate	O	O
the	O	O
result	O	O
is	O	O
perhaps	O	O
not	O	O
too	O	O
surprising	O	O
.	O	O
The	O	O
streams	O	O
framework	O	O
(	O	O
really	O	O
,	O	O
the	O	O
Spliterators	O	B-api_mention
for	O	O
these	O	O
streams	O	O
)	O	O
is	O	O
built	O	O
on	O	O
the	O	O
assumption	O	O
that	O	O
the	O	O
lambdas	O	O
will	O	O
potentially	O	O
generate	O	O
different	O	O
values	O	O
each	O	O
time	O	O
,	O	O
and	O	O
that	O	O
they	O	O
will	O	O
generate	O	O
an	O	O
unbounded	O	O
number	O	O
of	O	O
results	O	O
.	O	O
This	O	O
makes	O	O
parallel	O	O
splitting	O	O
particularly	O	O
difficult	O	O
.	O	O
The	O	O
iterate	O	O
method	O	O
is	O	O
also	O	O
problematic	O	O
for	O	O
this	O	O
case	O	O
because	O	O
each	O	O
call	O	O
requires	O	O
the	O	O
result	O	O
of	O	O
the	O	O
previous	O	O
one	O	O
.	O	O
So	O	O
the	O	O
streams	O	O
using	O	O
generate	O	O
and	O	O
iterate	O	O
don	O	O
'	O	O
t	O	O
do	O	O
very	O	O
well	O	O
for	O	O
generating	O	O
repeated	O	O
constants	O	O
.	O	O
The	O	O
relatively	O	O
poor	O	O
performance	O	O
of	O	O
range	O	O
is	O	O
surprising	O	O
.	O	O
This	O	O
too	O	O
is	O	O
virtualized	O	O
,	O	O
so	O	O
the	O	O
elements	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
all	O	O
exist	O	O
in	O	O
memory	O	O
,	O	O
and	O	O
the	O	O
size	O	O
is	O	O
known	O	O
up	O	O
front	O	O
.	O	O
This	O	O
should	O	O
make	O	O
for	O	O
a	O	O
fast	O	O
and	O	O
easily	O	O
parallelizable	O	O
spliterator	O	O
.	O	O
But	O	O
it	O	O
surprisingly	O	O
didn	O	O
'	O	O
t	O	O
do	O	O
very	O	O
well	O	O
.	O	O
Perhaps	O	O
the	O	O
reason	O	O
is	O	O
that	O	O
range	O	O
has	O	O
to	O	O
compute	O	O
a	O	O
value	O	O
for	O	O
each	O	O
element	O	O
of	O	O
the	O	O
range	O	O
and	O	O
then	O	O
call	O	O
a	O	O
function	O	O
on	O	O
it	O	O
.	O	O
But	O	O
this	O	O
function	O	O
just	O	O
ignores	O	O
its	O	O
input	O	O
and	O	O
returns	O	O
a	O	O
constant	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
surprised	O	O
this	O	O
isn	O	O
'	O	O
t	O	O
inlined	O	O
and	O	O
killed	O	O
.	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
technique	O	O
has	O	O
to	O	O
do	O	O
boxing	O	O
/	O	O
unboxing	O	O
in	O	O
order	O	O
to	O	O
handle	O	O
the	O	O
values	O	O
,	O	O
since	O	O
there	O	O
are	O	O
no	O	O
primitive	O	O
specializations	O	O
of	O	O
List	B-api_mention	B-api_mention
.	O	O
Since	O	O
the	O	O
value	O	O
is	O	O
the	O	O
same	O	O
every	O	O
time	O	O
,	O	O
it	O	O
'	O	O
s	O	O
basically	O	O
boxed	O	O
once	O	O
and	O	O
that	O	O
box	O	O
is	O	O
shared	O	O
by	O	O
all	O	O
n	O	O
copies	O	O
.	O	O
I	O	O
suspect	O	O
boxing	O	O
/	O	O
unboxing	O	O
is	O	O
highly	O	O
optimized	O	O
,	O	O
even	O	O
intrinsified	O	O
,	O	O
and	O	O
it	O	O
can	O	O
be	O	O
inlined	O	O
well	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
are	O	O
the	O	O
JMH	O	O
results	O	O
:	O	O
(	O	O
2	O	O
.	O	O
8GHz	O	O
Core2Duo	O	O
)	O	O
#	O	O
pre	O	O
There	O	O
is	O	O
a	O	O
fair	O	O
amount	O	O
of	O	O
variance	O	O
in	O	O
the	O	O
ncopies	O	O
version	O	O
,	O	O
but	O	O
overall	O	O
it	O	O
seems	O	O
comfortably	O	O
20x	O	O
faster	O	O
than	O	O
the	O	O
range	O	O
version	O	O
.	O	O
(	O	O
I	O	O
'	O	O
d	O	O
be	O	O
quite	O	O
willing	O	O
to	O	O
believe	O	O
that	O	O
I	O	O
'	O	O
ve	O	O
done	O	O
something	O	O
wrong	O	O
,	O	O
though	O	O
.	O	O
)	O	O
I	O	O
'	O	O
m	O	O
surprised	O	O
at	O	O
how	O	O
well	O	O
the	O	O
nCopies	B-api_mention	O
technique	O	O
works	O	O
.	O	O
Internally	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
do	O	O
very	O	O
much	O	O
special	O	O
,	O	O
with	O	O
the	O	O
stream	O	O
of	O	O
the	O	O
virtualized	O	O
list	O	O
simply	O	O
being	O	O
implemented	O	O
using	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
!	O	O
I	O	O
had	O	O
expected	O	O
that	O	O
it	O	O
would	O	O
be	O	O
necessary	O	O
to	O	O
create	O	O
a	O	O
specialized	O	O
spliterator	O	O
to	O	O
get	O	O
this	O	O
to	O	O
go	O	O
fast	O	O
,	O	O
but	O	O
it	O	O
already	O	O
seems	O	O
to	O	O
be	O	O
pretty	O	O
good	O	O
.	O	O
Question	O	O
-	O	O
18777989	O	O
,	O	O
answer	O	O
-	O	O
37905386	O	O
Many	O	O
junior	O	O
developers	O	O
make	O	O
the	O	O
mistake	O	O
of	O	O
thinking	O	O
of	O	O
interfaces	O	O
,	O	O
abstract	O	O
and	O	O
concrete	O	O
classes	O	O
as	O	O
slight	O	O
variations	O	O
of	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
and	O	O
choose	O	O
one	O	O
of	O	O
them	O	O
purely	O	O
on	O	O
technical	O	O
grounds	O	O
:	O	O
Do	O	O
I	O	O
need	O	O
multiple	O	O
inheritance	O	O
?	O	O
Do	O	O
I	O	O
need	O	O
some	O	O
place	O	O
to	O	O
put	O	O
common	O	O
methods	O	O
?	O	O
Do	O	O
I	O	O
need	O	O
to	O	O
bother	O	O
with	O	O
something	O	O
other	O	O
than	O	O
just	O	O
a	O	O
concrete	O	O
class	O	O
?	O	O
This	O	O
is	O	O
wrong	O	O
,	O	O
and	O	O
hidden	O	O
in	O	O
these	O	O
questions	O	O
is	O	O
the	O	O
main	O	O
problem	O	O
:	O	O
"	O	O
I	O	O
"	O	O
.	O	O
When	O	O
you	O	O
write	O	O
code	O	O
for	O	O
yourself	O	O
,	O	O
by	O	O
yourself	O	O
,	O	O
you	O	O
rarely	O	O
think	O	O
of	O	O
other	O	O
present	O	O
or	O	O
future	O	O
developers	O	O
working	O	O
on	O	O
or	O	O
with	O	O
your	O	O
code	O	O
.	O	O
Interfaces	O	O
and	O	O
abstract	O	O
classes	O	O
,	O	O
although	O	O
apparently	O	O
similar	O	O
from	O	O
a	O	O
technical	O	O
point	O	O
of	O	O
view	O	O
,	O	O
have	O	O
completely	O	O
different	O	O
meanings	O	O
and	O	O
purposes	O	O
.	O	O
Summary	O	O
#	O	O
li	O	O
An	O	O
interface	O	O
defines	O	O
a	O	O
contract	O	O
that	O	O
some	O	O
implementation	O	O
will	O	O
fulfill	O	O
for	O	O
you	O	O
.	O	O
#	O	O
li	O	O
An	O	O
abstract	O	O
class	O	O
provides	O	O
a	O	O
default	O	O
behavior	O	O
that	O	O
your	O	O
implementation	O	O
can	O	O
reuse	O	O
.	O	O
These	O	O
two	O	O
points	O	O
above	O	O
is	O	O
what	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
when	O	O
interviewing	O	O
,	O	O
and	O	O
is	O	O
a	O	O
compact	O	O
enough	O	O
summary	O	O
.	O	O
Read	O	O
on	O	O
for	O	O
more	O	O
details	O	O
.	O	O
Alternative	O	O
summary	O	O
#	O	O
li	O	O
An	O	O
interface	O	O
is	O	O
for	O	O
defining	O	O
public	O	O
APIs	O	O
#	O	O
li	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
for	O	O
internal	O	O
use	O	O
,	O	O
and	O	O
for	O	O
defining	O	O
SPIs	O	O
By	O	O
example	O	O
To	O	O
put	O	O
it	O	O
differently	O	O
:	O	O
A	O	O
concrete	O	O
class	O	O
does	O	O
the	O	O
actual	O	O
work	O	O
,	O	O
in	O	O
a	O	O
very	O	O
specific	O	O
way	O	O
.	O	O
For	O	O
example	O	O
,	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
uses	O	O
a	O	O
contiguous	O	O
area	O	O
of	O	O
memory	O	O
to	O	O
store	O	O
a	O	O
list	O	O
of	O	O
objects	O	O
in	O	O
a	O	O
compact	O	O
manner	O	O
which	O	O
offers	O	O
fast	O	O
random	O	O
access	O	O
,	O	O
iteration	O	O
,	O	O
and	O	O
in	O	O
-	O	O
place	O	O
changes	O	O
,	O	O
but	O	O
is	O	O
terrible	O	O
at	O	O
insertions	O	O
,	O	O
deletions	O	O
,	O	O
and	O	O
occasionally	O	O
even	O	O
additions	O	O
;	O	O
meanwhile	O	O
,	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
uses	O	O
double	O	O
-	O	O
linked	O	O
nodes	O	O
to	O	O
store	O	O
a	O	O
list	O	O
of	O	O
objects	O	O
,	O	O
which	O	O
instead	O	O
offers	O	O
fast	O	O
iteration	O	O
,	O	O
in	O	O
-	O	O
place	O	O
changes	O	O
,	O	O
and	O	O
insertion	O	O
/	O	O
deletion	O	O
/	O	O
addition	O	O
,	O	O
but	O	O
is	O	O
terrible	O	O
at	O	O
random	O	O
access	O	O
.	O	O
These	O	O
two	O	O
types	O	O
of	O	O
lists	O	O
are	O	O
optimized	O	O
for	O	O
different	O	O
use	O	O
cases	O	O
,	O	O
and	O	O
it	O	O
matters	O	O
a	O	O
lot	O	O
how	O	O
you	O	O
'	O	O
re	O	O
going	O	O
to	O	O
use	O	O
them	O	O
.	O	O
When	O	O
you	O	O
'	O	O
re	O	O
trying	O	O
to	O	O
squeeze	O	O
performance	O	O
out	O	O
of	O	O
a	O	O
list	O	O
that	O	O
you	O	O
'	O	O
re	O	O
heavily	O	O
interacting	O	O
with	O	O
,	O	O
and	O	O
when	O	O
picking	O	O
the	O	O
type	O	O
of	O	O
list	O	O
is	O	O
up	O	O
to	O	O
you	O	O
,	O	O
you	O	O
should	O	O
carefully	O	O
pick	O	O
which	O	O
one	O	O
you	O	O
'	O	O
re	O	O
instantiating	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
high	O	O
level	O	O
users	O	O
of	O	O
a	O	O
list	O	O
don	O	O
'	O	O
t	O	O
really	O	O
care	O	O
how	O	O
it	O	O
is	O	O
actually	O	O
implemented	O	O
,	O	O
and	O	O
they	O	O
should	O	O
be	O	O
insulated	O	O
from	O	O
these	O	O
details	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
imagine	O	O
that	O	O
Java	O	O
didn	O	O
'	O	O
t	O	O
expose	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
,	O	O
but	O	O
only	O	O
had	O	O
a	O	O
concrete	O	O
List	B-api_mention	B-api_mention
class	O	O
that	O	O
'	O	O
s	O	O
actually	O	O
what	O	O
LinkedList	B-api_mention	B-api_mention
is	O	O
right	O	O
now	O	O
.	O	O
All	O	O
Java	O	O
developers	O	O
would	O	O
have	O	O
tailored	O	O
their	O	O
code	O	O
to	O	O
fit	O	O
the	O	O
implementation	O	O
details	O	O
:	O	O
avoid	O	O
random	O	O
access	O	O
,	O	O
add	O	O
a	O	O
cache	O	O
to	O	O
speed	O	O
up	O	O
access	O	O
,	O	O
or	O	O
just	O	O
reimplement	O	O
ArrayList	B-api_mention	B-api_mention
on	O	O
their	O	O
own	O	O
,	O	O
although	O	O
it	O	O
would	O	O
be	O	O
incompatible	O	O
with	O	O
all	O	O
the	O	O
other	O	O
code	O	O
that	O	O
actually	O	O
works	O	O
with	O	O
List	B-api_mention	B-api_mention
only	O	O
.	O	O
That	O	O
would	O	O
be	O	O
terrible	O	O
.	O	O
.	O	O
.	O	O
But	O	O
now	O	O
imagine	O	O
that	O	O
the	O	O
Java	O	O
masters	O	O
actually	O	O
realize	O	O
that	O	O
a	O	O
linked	O	O
list	O	O
is	O	O
terrible	O	O
for	O	O
most	O	O
actual	O	O
use	O	O
cases	O	O
,	O	O
and	O	O
decided	O	O
to	O	O
switch	O	O
over	O	O
to	O	O
an	O	O
array	O	O
list	O	O
for	O	O
their	O	O
only	O	O
List	B-api_mention	B-api_mention
class	O	O
available	O	O
.	O	O
This	O	O
would	O	O
affect	O	O
the	O	O
performance	O	O
of	O	O
every	O	O
Java	O	O
program	O	O
in	O	O
the	O	O
world	O	O
,	O	O
and	O	O
people	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
happy	O	O
about	O	O
it	O	O
.	O	O
And	O	O
the	O	O
main	O	O
culprit	O	O
is	O	O
that	O	O
implementation	O	O
details	O	O
were	O	O
available	O	O
,	O	O
and	O	O
the	O	O
developers	O	O
assumed	O	O
that	O	O
those	O	O
details	O	O
are	O	O
a	O	O
permanent	O	O
contract	O	O
that	O	O
they	O	O
can	O	O
rely	O	O
on	O	O
.	O	O
This	O	O
is	O	O
why	O	O
it	O	O
'	O	O
s	O	O
important	O	O
to	O	O
hide	O	O
implementation	O	O
details	O	O
,	O	O
and	O	O
only	O	O
define	O	O
an	O	O
abstract	O	O
contract	O	O
.	O	O
This	O	O
is	O	O
the	O	O
purpose	O	O
of	O	O
an	O	O
interface	O	O
:	O	O
define	O	O
what	O	O
kind	O	O
of	O	O
input	O	O
a	O	O
method	O	O
accepts	O	O
,	O	O
and	O	O
what	O	O
kind	O	O
of	O	O
output	O	O
is	O	O
expected	O	O
,	O	O
without	O	O
exposing	O	O
all	O	O
the	O	O
guts	O	O
that	O	O
would	O	O
tempt	O	O
programmers	O	O
to	O	O
tweak	O	O
their	O	O
code	O	O
to	O	O
fit	O	O
the	O	O
internal	O	O
details	O	O
that	O	O
might	O	O
change	O	O
with	O	O
any	O	O
future	O	O
update	O	O
.	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
in	O	O
the	O	O
middle	O	O
between	O	O
interfaces	O	O
and	O	O
concrete	O	O
classes	O	O
.	O	O
It	O	O
is	O	O
supposed	O	O
to	O	O
help	O	O
implementations	O	O
share	O	O
common	O	O
or	O	O
boring	O	O
code	O	O
.	O	O
For	O	O
example	O	O
,	O	O
AbstractCollection	B-api_mention	B-api_mention
provides	O	O
basic	O	O
implementations	O	O
for	O	O
isEmpty	B-api_mention	B-api_mention
based	O	O
on	O	O
size	O	O
is	O	O
0	O	O
,	O	O
contains	B-api_mention	O
as	O	O
iterate	O	O
and	O	O
compare	O	O
,	O	O
addAll	B-api_mention	O
as	O	O
repeated	O	O
add	B-api_mention	O
,	O	O
and	O	O
so	O	O
on	O	O
.	O	O
This	O	O
lets	O	O
implementations	O	O
focus	O	O
on	O	O
the	O	O
crucial	O	O
parts	O	O
that	O	O
differentiate	O	O
between	O	O
them	O	O
:	O	O
how	O	O
to	O	O
actually	O	O
store	O	O
and	O	O
retrieve	O	O
data	O	O
.	O	O
Another	O	O
perspective	O	O
:	O	O
APIs	O	O
versus	O	O
SPIs	O	O
Interfaces	O	O
are	O	O
low	O	O
-	O	O
cohesion	O	O
gateways	O	O
between	O	O
different	O	O
parts	O	O
of	O	O
code	O	O
.	O	O
They	O	O
allow	O	O
libraries	O	O
to	O	O
exist	O	O
and	O	O
evolve	O	O
without	O	O
breaking	O	O
every	O	O
library	O	O
user	O	O
when	O	O
something	O	O
changes	O	O
internally	O	O
.	O	O
It	O	O
'	O	O
s	O	O
called	O	O
Application	O	O
Programming	O	O
Interface	O	O
Abstract	O	O
classes	O	O
are	O	O
high	O	O
-	O	O
cohesion	O	O
helpers	O	O
to	O	O
be	O	O
used	O	O
when	O	O
implementing	O	O
an	O	O
interface	O	O
,	O	O
assuming	O	O
some	O	O
level	O	O
of	O	O
implementation	O	O
details	O	O
.	O	O
Alternatively	O	O
,	O	O
abstract	O	O
classes	O	O
are	O	O
used	O	O
for	O	O
defining	O	O
SPIs	O	O
,	O	O
Service	O	O
Provider	O	O
Interfaces	O	O
.	O	O
The	O	O
difference	O	O
between	O	O
an	O	O
API	O	O
and	O	O
an	O	O
SPI	O	O
is	O	O
subtle	O	O
,	O	O
but	O	O
important	O	O
:	O	O
for	O	O
an	O	O
API	O	O
,	O	O
the	O	O
focus	O	O
is	O	O
on	O	O
who	O	O
uses	O	O
it	O	O
,	O	O
and	O	O
for	O	O
an	O	O
SPI	O	O
the	O	O
focus	O	O
is	O	O
on	O	O
who	O	O
implements	O	O
it	O	O
.	O	O
Adding	O	O
methods	O	O
to	O	O
an	O	O
API	O	O
is	O	O
easy	O	O
,	O	O
all	O	O
existing	O	O
users	O	O
of	O	O
the	O	O
API	O	O
will	O	O
still	O	O
compile	O	O
.	O	O
Adding	O	O
methods	O	O
to	O	O
an	O	O
SPI	O	O
is	O	O
hard	O	O
,	O	O
since	O	O
every	O	O
service	O	O
provider	O	O
(	O	O
concrete	O	O
implementation	O	O
)	O	O
will	O	O
have	O	O
to	O	O
implement	O	O
the	O	O
new	O	O
methods	O	O
.	O	O
If	O	O
interfaces	O	O
are	O	O
used	O	O
to	O	O
define	O	O
an	O	O
SPI	O	O
,	O	O
a	O	O
provider	O	O
will	O	O
have	O	O
to	O	O
release	O	O
a	O	O
new	O	O
version	O	O
whenever	O	O
the	O	O
SPI	O	O
contract	O	O
changes	O	O
.	O	O
If	O	O
abstract	O	O
classes	O	O
are	O	O
used	O	O
instead	O	O
,	O	O
new	O	O
methods	O	O
could	O	O
either	O	O
be	O	O
defined	O	O
in	O	O
terms	O	O
of	O	O
existing	O	O
abstract	O	O
methods	O	O
,	O	O
or	O	O
as	O	O
empty	O	O
throw	O	O
not	O	O
implemented	O	O
exception	O	O
stubs	O	O
,	O	O
which	O	O
will	O	O
at	O	O
least	O	O
allow	O	O
an	O	O
older	O	O
version	O	O
of	O	O
a	O	O
service	O	O
implementation	O	O
to	O	O
still	O	O
compile	O	O
and	O	O
run	O	O
.	O	O
A	O	O
note	O	O
on	O	O
Java	O	O
8	O	O
and	O	O
default	O	O
methods	O	O
Although	O	O
Java	O	O
8	O	O
introduced	O	O
default	O	O
methods	O	O
for	O	O
interfaces	O	O
,	O	O
which	O	O
makes	O	O
the	O	O
line	O	O
between	O	O
interfaces	O	O
and	O	O
abstract	O	O
classes	O	O
even	O	O
blurrier	O	O
,	O	O
this	O	O
wasn	O	O
'	O	O
t	O	O
so	O	O
that	O	O
implementations	O	O
can	O	O
reuse	O	O
code	O	O
,	O	O
but	O	O
to	O	O
make	O	O
it	O	O
easier	O	O
to	O	O
change	O	O
interfaces	O	O
that	O	O
serve	O	O
both	O	O
as	O	O
an	O	O
API	O	O
and	O	O
as	O	O
an	O	O
SPI	O	O
(	O	O
or	O	O
are	O	O
wrongly	O	O
used	O	O
for	O	O
defining	O	O
SPIs	O	O
instead	O	O
of	O	O
abstract	O	O
classes	O	O
)	O	O
.	O	O
"	O	O
Book	O	O
knowledge	O	O
"	O	O
The	O	O
technical	O	O
details	O	O
provided	O	O
in	O	O
the	O	O
OP	O	O
'	O	O
s	O	O
answer	O	O
are	O	O
considered	O	O
"	O	O
book	O	O
knowledge	O	O
"	O	O
because	O	O
this	O	O
is	O	O
usually	O	O
the	O	O
approach	O	O
used	O	O
in	O	O
school	O	O
and	O	O
in	O	O
most	O	O
technology	O	O
books	O	O
about	O	O
a	O	O
language	O	O
:	O	O
what	O	O
a	O	O
thing	O	O
is	O	O
,	O	O
not	O	O
how	O	O
to	O	O
use	O	O
it	O	O
in	O	O
practice	O	O
,	O	O
especially	O	O
in	O	O
large	O	O
scale	O	O
applications	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
an	O	O
analogy	O	O
:	O	O
supposed	O	O
the	O	O
question	O	O
was	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
technical	O	O
answer	O	O
sounds	O	O
like	O	O
:	O	O
#	O	O
blockquote	O	O
That	O	O
is	O	O
all	O	O
true	O	O
,	O	O
but	O	O
completely	O	O
misses	O	O
the	O	O
points	O	O
that	O	O
they	O	O
are	O	O
two	O	O
completely	O	O
different	O	O
things	O	O
,	O	O
and	O	O
both	O	O
can	O	O
be	O	O
used	O	O
at	O	O
the	O	O
same	O	O
time	O	O
for	O	O
different	O	O
purposes	O	O
,	O	O
and	O	O
the	O	O
"	O	O
doing	O	O
it	O	O
"	O	O
aspect	O	O
is	O	O
not	O	O
the	O	O
most	O	O
important	O	O
thing	O	O
about	O	O
either	O	O
of	O	O
the	O	O
two	O	O
options	O	O
.	O	O
The	O	O
answer	O	O
lacks	O	O
perspective	O	O
,	O	O
it	O	O
shows	O	O
an	O	O
immature	O	O
way	O	O
of	O	O
thinking	O	O
,	O	O
while	O	O
correctly	O	O
presenting	O	O
true	O	O
"	O	O
facts	O	O
"	O	O
.	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
5585876	O	O
For	O	O
example	O	O
,	O	O
here	O	O
are	O	O
two	O	O
ways	O	O
:	O	O
#	O	O
pre	O	O
There	O	O
is	O	O
a	O	O
slight	O	O
difference	O	O
between	O	O
these	O	O
methods	O	O
:	O	O
#	O	O
li	O	O
valueOf	B-api_mention	B-api_mention
returns	O	O
a	O	O
new	O	O
or	O	O
cached	O	O
instance	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Integer	I-api_mention	I-api_mention
#	O	O
li	O	O
parseInt	B-api_mention	B-api_mention
returns	O	O
primitive	O	O
int	O	O
.	O	O
The	O	O
same	O	O
is	O	O
for	O	O
all	O	O
cases	O	O
:	O	O
Short	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
/	O	O
parseShort	B-api_mention	B-api_mention
,	O	O
Long	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
/	O	O
parseLong	B-api_mention	B-api_mention
,	O	O
etc	O	O
.	O	O
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
28833677	O	O
The	O	O
cleanest	O	O
“	O	O
try	O	O
services	O	O
”	O	O
approach	O	O
given	O	O
the	O	O
current	O	O
API	O	O
would	O	O
be	O	O
:	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
o	O	O
=	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
Supplier	I-api_mention	I-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
findFirst	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
important	O	O
aspect	O	O
is	O	O
not	O	O
the	O	O
(	O	O
constant	O	O
)	O	O
chain	O	O
of	O	O
operations	O	O
you	O	O
have	O	O
to	O	O
write	O	O
once	O	O
but	O	O
how	O	O
easy	O	O
it	O	O
is	O	O
to	O	O
add	O	O
another	O	O
service	O	O
(	O	O
or	O	O
modify	O	O
the	O	O
list	O	O
of	O	O
services	O	O
is	O	O
general	O	O
)	O	O
.	O	O
Here	O	O
,	O	O
adding	O	O
or	O	O
removing	O	O
a	O	O
single	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
-	O	O
>	O	O
serviceX	O	O
(	O	O
args	O	O
)	O	O
is	O	O
enough	O	O
.	O	O
Due	O	O
to	O	O
the	O	O
lazy	O	O
evaluation	O	O
of	O	O
streams	O	O
,	O	O
no	O	O
service	O	O
will	O	O
be	O	O
invoked	O	O
if	O	O
a	O	O
preceding	O	O
service	O	O
returned	O	O
a	O	O
non	O	O
-	O	O
empty	O	O
Optional	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
31188231	O	O
It	O	O
has	O	O
generally	O	O
been	O	O
the	O	O
case	O	O
the	O	O
Java	O	O
source	O	O
code	O	O
has	O	O
been	O	O
forward	O	O
compatible	O	O
.	O	O
Until	O	O
Java	O	O
8	O	O
,	O	O
as	O	O
far	O	O
as	O	O
I	O	O
know	O	O
,	O	O
both	O	O
compiled	O	O
classes	O	O
and	O	O
source	O	O
have	O	O
been	O	O
forward	O	O
compatible	O	O
with	O	O
later	O	O
JDK	O	O
/	O	O
JVM	O	O
releases	O	O
.	O	O
[	O	O
Update	O	O
:	O	O
this	O	O
is	O	O
not	O	O
correct	O	O
,	O	O
see	O	O
comments	O	O
re	O	O
'	O	O
enum	O	O
'	O	O
,	O	O
etc	O	O
,	O	O
below	O	O
.	O	O
]	O	O
However	O	O
,	O	O
with	O	O
the	O	O
addition	O	O
of	O	O
default	O	O
methods	O	O
in	O	O
Java	O	O
8	O	O
this	O	O
appears	O	O
to	O	O
no	O	O
longer	O	O
be	O	O
the	O	O
case	O	O
.	O	O
For	O	O
example	O	O
,	O	O
a	O	O
library	O	O
I	O	O
have	O	O
been	O	O
using	O	O
has	O	O
an	O	O
implementation	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
List	I-api_mention	I-api_mention
which	O	O
includes	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
method	O	O
returns	O	O
a	O	O
copy	O	O
of	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
list	O	O
sorted	O	O
.	O	O
This	O	O
library	O	O
,	O	O
deployed	O	O
as	O	O
a	O	O
jar	O	O
file	O	O
dependency	O	O
,	O	O
worked	O	O
fine	O	O
in	O	O
a	O	O
project	O	O
being	O	O
built	O	O
using	O	O
JDK	O	O
1	O	O
.	O	O
8	O	O
.	O	O
However	O	O
,	O	O
later	O	O
I	O	O
had	O	O
occasion	O	O
to	O	O
recompile	O	O
the	O	O
library	O	O
itself	O	O
using	O	O
JDK	O	O
1	O	O
.	O	O
8	O	O
and	O	O
I	O	O
found	O	O
the	O	O
library	O	O
no	O	O
longer	O	O
compiles	O	O
:	O	O
the	O	O
List	B-api_mention	B-api_mention
-	O	O
implementing	O	O
class	O	O
with	O	O
its	O	O
own	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
now	O	O
conflicts	O	O
with	O	O
the	O	O
Java	O	O
8	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
List	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
default	O	O
method	O	O
.	O	O
The	O	O
Java	O	O
8	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
default	O	O
method	O	O
sorts	O	O
the	O	O
list	O	O
in	O	O
place	O	O
(	O	O
returns	O	O
void	O	O
)	O	O
;	O	O
my	O	O
library	O	O
'	O	O
s	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
-	O	O
since	O	O
it	O	O
returns	O	O
a	O	O
new	O	O
sorted	O	O
list	O	O
-	O	O
has	O	O
an	O	O
incompatible	O	O
signature	O	O
.	O	O
So	O	O
my	O	O
basic	O	O
question	O	O
is	O	O
:	O	O
#	O	O
li	O	O
Doesn	O	O
'	O	O
t	O	O
JDK	O	O
1	O	O
.	O	O
8	O	O
introduce	O	O
a	O	O
forward	O	O
incompatibility	O	O
for	O	O
Java	O	O
source	O	O
code	O	O
due	O	O
to	O	O
default	O	O
methods	O	O
?	O	O
Also	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
this	O	O
the	O	O
first	O	O
such	O	O
forward	O	O
incompatible	O	O
change	O	O
?	O	O
#	O	O
li	O	O
Was	O	O
this	O	O
considered	O	O
or	O	O
discussed	O	O
when	O	O
default	O	O
methods	O	O
where	O	O
designed	O	O
and	O	O
implemented	O	O
?	O	O
Is	O	O
it	O	O
documented	O	O
anywhere	O	O
?	O	O
#	O	O
li	O	O
Was	O	O
the	O	O
(	O	O
admittedly	O	O
small	O	O
)	O	O
inconvenience	O	O
discounted	O	O
versus	O	O
the	O	O
benefits	O	O
?	O	O
The	O	O
following	O	O
is	O	O
an	O	O
example	O	O
of	O	O
some	O	O
code	O	O
that	O	O
compiles	O	O
and	O	O
runs	O	O
under	O	O
1	O	O
.	O	O
7	O	O
and	O	O
runs	O	O
under	O	O
1	O	O
.	O	O
8	O	O
-	O	O
but	O	O
does	O	O
not	O	O
compile	O	O
under	O	O
1	O	O
.	O	O
8	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
following	O	O
shows	O	O
this	O	O
code	O	O
being	O	O
compiled	O	O
(	O	O
or	O	O
failing	O	O
to	O	O
)	O	O
and	O	O
being	O	O
run	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31993377	O	O
,	O	O
answer	O	O
-	O	O
31993478	O	O
You	O	O
are	O	O
consuming	O	O
the	O	O
value	O	O
of	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
asking	O	O
for	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
next	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
per	O	O
default	O	O
,	O	O
returns	O	O
everything	O	O
to	O	O
the	O	O
next	O	O
whitespace	O	O
(	O	O
args	O	O
)	O	O
.	O	O
So	O	O
you	O	O
are	O	O
iterating	O	O
through	O	O
all	O	O
whitespace	O	O
seperated	O	O
strings	O	O
,	O	O
and	O	O
after	O	O
each	O	O
of	O	O
them	O	O
you	O	O
are	O	O
asking	O	O
about	O	O
the	O	O
nextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
i	O	O
1	O	O
1	O	O
-	O	O
>	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
True	O	O
.	O	B-api_mention
hasNext	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Also	O	O
true	O	O
.	O	O
1	O	O
1	O	O
-	O	O
>	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
True	O	O
.	O	B-api_mention
hasNext	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Also	O	O
true	O	O
(	O	O
still	O	O
a	O	O
whitespace	O	O
left	O	O
)	O	O
1	O	O
-	O	O
>	O	O
hasNextLine	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
?	O	O
True	O	O
(	O	O
Line	O	O
Seperator	O	O
,	O	O
probably	O	O
)	O	O
.	O	O
haxNext	B-api_mention	O
?	O	O
False	O	O
,	O	O
no	O	O
whitespace	O	O
anymore	O	O
.	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29096777	O	O
The	O	O
only	O	O
solution	O	O
I	O	O
come	O	O
up	O	O
with	O	O
for	O	O
the	O	O
moment	O	O
is	O	O
by	O	O
implementing	O	O
your	O	O
own	O	O
custom	O	O
collector	O	O
.	O	O
Before	O	O
reading	O	O
the	O	O
solution	O	O
,	O	O
I	O	O
want	O	O
to	O	O
add	O	O
a	O	O
few	O	O
notes	O	O
about	O	O
this	O	O
.	O	O
I	O	O
took	O	O
this	O	O
question	O	O
more	O	O
as	O	O
a	O	O
programming	O	O
exercise	O	O
,	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
if	O	O
it	O	O
can	O	O
be	O	O
done	O	O
with	O	O
a	O	O
parallel	O	O
stream	O	O
.	O	O
So	O	O
you	O	O
have	O	O
to	O	O
be	O	O
aware	O	O
that	O	O
it	O	O
'	O	O
ll	O	O
silently	O	O
break	O	O
if	O	O
the	O	O
pipeline	O	O
is	O	O
run	O	O
in	O	O
parallel	O	O
.	O	O
This	O	O
is	O	O
not	O	O
a	O	O
desirable	O	O
behavior	O	O
and	O	O
should	O	O
be	O	O
avoided	O	O
.	O	O
This	O	O
is	O	O
why	O	O
I	O	O
throw	O	O
an	O	O
exception	O	O
in	O	O
the	O	O
combiner	O	O
part	O	O
(	O	O
instead	O	O
of	O	O
(	O	O
l1	O	O
,	O	O
l2	O	O
)	O	O
-	O	O
>	O	O
{	O	O
l1	O	O
.	B-api_mention	B-api_mention
addAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
return	O	O
l1	O	O
;	O	O
}	O	O
)	O	O
,	O	O
as	O	O
it	O	O
'	O	O
s	O	O
used	O	O
in	O	O
parallel	O	O
when	O	O
combining	O	O
the	O	O
two	O	O
lists	O	O
,	O	O
so	O	O
that	O	O
you	O	O
have	O	O
an	O	O
exception	O	O
instead	O	O
of	O	O
a	O	O
wrong	O	O
result	O	O
.	O	O
Also	O	O
this	O	O
is	O	O
not	O	O
very	O	O
efficient	O	O
due	O	O
to	O	O
list	O	O
copying	O	O
(	O	O
although	O	O
it	O	O
uses	O	O
a	O	O
native	O	O
method	O	O
to	O	O
copy	O	O
the	O	O
underlying	O	O
array	O	O
)	O	O
.	O	O
So	O	O
here	O	O
'	O	O
s	O	O
the	O	O
collector	O	O
implementation	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
how	O	O
to	O	O
use	O	O
it	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
ll	O	O
=	O	O
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Output	O	O
:	O	O
[	O	O
[	O	O
a	O	O
,	O	O
b	O	O
]	O	O
,	O	O
[	O	O
c	O	O
]	O	O
,	O	O
[	O	O
d	O	O
,	O	O
e	O	O
]	O	O
]	O	O
As	O	O
the	O	O
answer	O	O
of	O	O
Joop	O	O
Eggen	O	O
is	O	O
out	O	O
,	O	O
it	O	O
appears	O	O
that	O	O
it	O	O
can	O	O
be	O	O
done	O	O
in	O	O
parallel	O	O
(	O	O
give	O	O
him	O	O
credit	O	O
for	O	O
that	O	O
!	O	O
)	O	O
.	O	O
With	O	O
that	O	O
it	O	O
reduces	O	O
the	O	O
custom	O	O
collector	O	O
implementation	O	O
to	O	O
:	O	O
#	O	O
pre	O	O
which	O	O
let	O	O
the	O	O
paragraph	O	O
about	O	O
parallelism	O	O
a	O	O
bit	O	O
obsolete	O	O
,	O	O
however	O	O
I	O	O
let	O	O
it	O	O
as	O	O
it	O	O
can	O	O
be	O	O
a	O	O
good	O	O
reminder	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
is	O	O
not	O	O
always	O	O
a	O	O
substitute	O	O
.	O	O
There	O	O
are	O	O
tasks	O	O
that	O	O
are	O	O
easier	O	O
and	O	O
more	O	O
suitable	O	O
using	O	O
the	O	O
streams	O	O
and	O	O
there	O	O
are	O	O
tasks	O	O
that	O	O
are	O	O
not	O	O
.	O	O
In	O	O
your	O	O
case	O	O
,	O	O
you	O	O
could	O	O
also	O	O
create	O	O
a	O	O
utility	O	O
method	O	O
for	O	O
that	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
call	O	O
it	O	O
like	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
splitBySeparator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
It	O	O
can	O	O
be	O	O
improved	O	O
for	O	O
checking	O	O
edge	O	O
-	O	O
cases	O	O
.	O	O
Question	O	O
-	O	O
24630963	O	O
The	O	O
Java	O	O
8	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
throws	O	O
a	O	O
NullPointerException	B-api_mention	B-api_mention
if	O	O
one	O	O
of	O	O
the	O	O
values	O	O
is	O	O
'	O	O
null	O	O
'	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
this	O	O
behaviour	O	O
,	O	O
maps	O	O
can	O	O
contain	O	O
null	O	O
pointers	O	O
as	O	O
value	O	O
without	O	O
any	O	O
problems	O	O
.	O	O
Is	O	O
there	O	O
a	O	O
good	O	O
reason	O	O
why	O	O
values	O	O
cannot	O	O
be	O	O
null	O	O
for	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
?	O	O
Also	O	O
,	O	O
is	O	O
there	O	O
a	O	O
nice	O	O
Java	O	O
8	O	O
way	O	O
of	O	O
fixing	O	O
this	O	O
,	O	O
or	O	O
should	O	O
I	O	O
revert	O	O
to	O	O
plain	O	O
old	O	O
for	O	O
loop	O	O
?	O	O
An	O	O
example	O	O
of	O	O
my	O	O
problem	O	O
:	O	O
#	O	O
pre	O	O
Stacktrace	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
17828584	O	O
,	O	O
answer	O	O
-	O	O
17842210	O	O
After	O	O
digging	O	O
around	O	O
for	O	O
a	O	O
while	O	O
,	O	O
I	O	O
can	O	O
'	O	O
t	O	O
say	O	O
that	O	O
I	O	O
find	O	O
the	O	O
answer	O	O
,	O	O
but	O	O
I	O	O
think	O	O
it	O	O
'	O	O
s	O	O
quite	O	O
close	O	O
now	O	O
.	O	O
First	O	O
,	O	O
we	O	O
need	O	O
to	O	O
know	O	O
when	O	O
a	O	O
StackOverflowError	B-api_mention	B-api_mention
will	O	O
be	O	O
thrown	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
the	O	O
stack	O	O
for	O	O
a	O	O
java	O	O
thread	O	O
stores	O	O
frames	O	O
,	O	O
which	O	O
containing	O	O
all	O	O
the	O	O
data	O	O
needed	O	O
for	O	O
invoking	O	O
a	O	O
method	O	O
and	O	O
resume	O	O
.	O	O
According	O	O
to	O	O
Java	O	O
Language	O	O
Specifications	O	O
for	O	O
JAVA	O	O
6	O	O
,	O	O
when	O	O
invoking	O	O
a	O	O
method	O	O
,	O	O
#	O	O
blockquote	O	O
Second	O	O
,	O	O
we	O	O
should	O	O
make	O	O
it	O	O
clear	O	O
what	O	O
is	O	O
"	O	O
there	O	O
is	O	O
not	O	O
sufficient	O	O
memory	O	O
available	O	O
to	O	O
create	O	O
such	O	O
an	O	O
activation	O	O
frame	O	O
"	O	O
.	O	O
According	O	O
to	O	O
Java	O	O
Virtual	O	O
Machine	O	O
Specifications	O	O
for	O	O
JAVA	O	O
6	O	O
,	O	O
#	O	O
blockquote	O	O
So	O	O
,	O	O
when	O	O
a	O	O
frame	O	O
is	O	O
created	O	O
,	O	O
there	O	O
should	O	O
be	O	O
enough	O	O
heap	O	O
space	O	O
to	O	O
create	O	O
a	O	O
stack	O	O
frame	O	O
and	O	O
enough	O	O
stack	O	O
space	O	O
to	O	O
store	O	O
the	O	O
new	O	O
reference	O	O
which	O	O
point	O	O
to	O	O
the	O	O
new	O	O
stack	O	O
frame	O	O
if	O	O
the	O	O
frame	O	O
is	O	O
heap	O	O
allocated	O	O
.	O	O
Now	O	O
let	O	O
'	O	O
s	O	O
go	O	O
back	O	O
to	O	O
the	O	O
question	O	O
.	O	O
From	O	O
the	O	O
above	O	O
,	O	O
we	O	O
can	O	O
know	O	O
that	O	O
when	O	O
a	O	O
method	O	O
is	O	O
execute	O	O
,	O	O
it	O	O
may	O	O
just	O	O
costs	O	O
the	O	O
same	O	O
amount	O	O
of	O	O
stack	O	O
space	O	O
.	O	O
And	O	O
invoking	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	O
may	I-api_mention	O
)	I-api_mention	O
needs	O	O
5	O	O
level	O	O
of	O	O
method	O	O
invocation	O	O
,	O	O
so	O	O
5	O	O
frames	O	O
need	O	O
to	O	O
be	O	O
created	O	O
.	O	O
Then	O	O
when	O	O
StackOverflowError	B-api_mention	B-api_mention
is	O	O
thrown	O	O
out	O	O
,	O	O
it	O	O
has	O	O
to	O	O
go	O	O
back	O	O
5	O	O
times	O	O
to	O	O
get	O	O
enough	O	O
stack	O	O
space	O	O
to	O	O
store	O	O
5	O	O
frames	O	O
'	O	O
references	O	O
.	O	O
Hence	O	O
4	O	O
is	O	O
print	O	O
out	O	O
.	O	O
Why	O	O
not	O	O
5	O	O
?	O	O
Because	O	O
you	O	O
use	O	O
cnt	O	O
+	O	O
+	O	O
.	O	O
Change	O	O
it	O	O
to	O	O
+	O	O
+	O	O
cnt	O	O
,	O	O
and	O	O
then	O	O
you	O	O
will	O	O
get	O	O
5	O	O
.	O	O
And	O	O
you	O	O
will	O	O
notice	O	O
that	O	O
when	O	O
the	O	O
size	O	O
of	O	O
stack	O	O
go	O	O
to	O	O
a	O	O
high	O	O
level	O	O
,	O	O
you	O	O
will	O	O
get	O	O
50	O	O
sometimes	O	O
.	O	O
That	O	O
is	O	O
because	O	O
the	O	O
amount	O	O
of	O	O
available	O	O
heap	O	O
space	O	O
need	O	O
to	O	O
be	O	O
taken	O	O
into	O	O
consideration	O	O
then	O	O
.	O	O
When	O	O
the	O	O
stack	O	O
'	O	O
s	O	O
size	O	O
is	O	O
too	O	O
large	O	O
,	O	O
maybe	O	O
heap	O	O
space	O	O
will	O	O
run	O	O
out	O	O
before	O	O
stack	O	O
.	O	O
And	O	O
(	O	O
maybe	O	O
)	O	O
the	O	O
actual	O	O
size	O	O
of	O	O
stack	O	O
frames	O	O
of	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
is	O	O
about	O	O
51	O	O
times	O	O
of	O	O
main	O	O
,	O	O
therefore	O	O
it	O	O
goes	O	O
back	O	O
51	O	O
times	O	O
and	O	O
print	O	O
50	O	O
.	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26791826	O	O
Search	O	O
for	O	O
the	O	O
first	O	O
word	O	O
to	O	O
be	O	O
replaced	O	O
.	O	O
If	O	O
it	O	O
'	O	O
s	O	O
in	O	O
the	O	O
string	O	O
,	O	O
recurse	O	O
on	O	O
the	O	O
the	O	O
part	O	O
of	O	O
the	O	O
string	O	O
before	O	O
the	O	O
occurrence	O	O
,	O	O
and	O	O
on	O	O
the	O	O
part	O	O
of	O	O
the	O	O
string	O	O
after	O	O
the	O	O
occurrence	O	O
.	O	O
Otherwise	O	O
,	O	O
continue	O	O
with	O	O
the	O	O
next	O	O
word	O	O
to	O	O
be	O	O
replaced	O	O
.	O	O
A	O	O
naive	O	O
implementation	O	O
might	O	O
look	O	O
like	O	O
this	O	O
#	O	O
pre	O	O
Sample	O	O
usage	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
Once	O	O
upon	O	O
a	O	O
foo	O	O
,	O	O
there	O	O
was	O	O
a	O	O
bar	O	O
and	O	O
a	O	O
baz	O	O
.	O	O
A	O	O
less	O	O
-	O	O
naive	O	O
version	O	O
:	O	O
#	O	O
pre	O	O
Unfortunately	O	O
,	O	O
Java	O	O
'	O	O
s	O	O
String	B-api_mention	B-api_mention
has	O	O
no	O	O
indexOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
omitted	O	O
the	O	O
implementation	O	O
of	O	O
indexOf	B-api_mention	O
here	O	O
as	O	O
I	O	O
'	O	O
m	O	O
not	O	O
certain	O	O
it	O	O
'	O	O
s	O	O
correct	O	O
,	O	O
but	O	O
it	O	O
can	O	O
be	O	O
found	O	O
on	O	O
ideone	O	O
,	O	O
along	O	O
with	O	O
some	O	O
rough	O	O
timings	O	O
of	O	O
various	O	O
solutions	O	O
posted	O	O
here	O	O
.	O	O
Question	O	O
-	O	O
10827872	O	O
What	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
'	O	O
s	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
,	O	O
other	O	O
than	O	O
later	O	O
uses	O	O
regex	O	O
?	O	O
For	O	O
simple	O	O
substitutions	O	O
like	O	O
,	O	O
replace	O	O
.	O	O
with	O	O
/	O	O
,	O	O
is	O	O
there	O	O
any	O	O
difference	O	O
?	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777279	O	O
array1	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
same	O	O
as	O	O
array1	O	O
=	O	O
=	O	O
array2	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
is	O	O
it	O	O
the	O	O
same	O	O
array	O	O
.	O	O
As	O	O
@	O	O
alf	O	O
points	O	O
out	O	O
it	O	O
'	O	O
s	O	O
not	O	O
what	O	O
most	O	O
people	O	O
expect	O	O
.	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
compares	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
arrays	O	O
.	O	O
Similarly	O	O
array	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
not	O	O
be	O	O
very	O	O
useful	O	O
and	O	O
you	O	O
need	O	O
to	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
27625611	O	O
,	O	O
answer	O	O
-	O	O
27625722	O	O
Because	O	O
nextDouble	B-api_mention	O
works	O	O
like	O	O
this	O	O
:	O	O
(	O	O
source	O	O
)	O	O
#	O	O
pre	O	O
next	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
makes	O	O
x	O	O
random	O	O
bits	O	O
.	O	O
Now	O	O
why	O	O
does	O	O
this	O	O
matter	O	O
?	O	O
Because	O	O
about	O	O
half	O	O
the	O	O
numbers	O	O
generated	O	O
by	O	O
the	O	O
first	O	O
part	O	O
(	O	O
before	O	O
the	O	O
division	O	O
)	O	O
are	O	O
less	O	O
than	O	O
1L	O	O
<	O	O
<	O	O
52	O	O
,	O	O
and	O	O
therefore	O	O
their	O	O
significand	O	O
doesn	O	O
'	O	O
t	O	O
entirely	O	O
fill	O	O
the	O	O
53	O	O
bits	O	O
that	O	O
it	O	O
could	O	O
fill	O	O
,	O	O
meaning	O	O
the	O	O
least	O	O
significant	O	O
bit	O	O
of	O	O
the	O	O
significand	O	O
is	O	O
always	O	O
zero	O	O
for	O	O
those	O	O
.	O	O
Because	O	O
of	O	O
the	O	O
amount	O	O
of	O	O
attention	O	O
this	O	O
is	O	O
receiving	O	O
,	O	O
here	O	O
'	O	O
s	O	O
some	O	O
extra	O	O
explanation	O	O
of	O	O
what	O	O
a	O	O
double	O	O
in	O	O
Java	O	O
(	O	O
and	O	O
many	O	O
other	O	O
languages	O	O
)	O	O
really	O	O
looks	O	O
like	O	O
and	O	O
why	O	O
it	O	O
mattered	O	O
in	O	O
this	O	O
question	O	O
.	O	O
Basically	O	O
,	O	O
a	O	O
double	O	O
looks	O	O
like	O	O
this	O	O
:	O	O
(	O	O
source	O	O
)	O	O
#	O	O
img	O	O
A	O	O
very	O	O
important	O	O
detail	O	O
not	O	O
visible	O	O
in	O	O
this	O	O
picture	O	O
is	O	O
that	O	O
numbers	O	O
are	O	O
"	O	O
normalized	O	O
"	O	O
1	O	O
such	O	O
that	O	O
the	O	O
53	O	O
bit	O	O
fraction	O	O
starts	O	O
with	O	O
a	O	O
1	O	O
(	O	O
by	O	O
choosing	O	O
the	O	O
exponent	O	O
such	O	O
that	O	O
it	O	O
is	O	O
so	O	O
)	O	O
,	O	O
that	O	O
1	O	O
is	O	O
then	O	O
omitted	O	O
.	O	O
That	O	O
is	O	O
why	O	O
the	O	O
picture	O	O
shows	O	O
52	O	O
bits	O	O
for	O	O
the	O	O
fraction	O	O
(	O	O
significand	O	O
)	O	O
but	O	O
there	O	O
are	O	O
effectively	O	O
53	O	O
bits	O	O
in	O	O
it	O	O
.	O	O
The	O	O
normalization	O	O
means	O	O
that	O	O
if	O	O
in	O	O
the	O	O
code	O	O
for	O	O
nextDouble	B-api_mention	O
the	O	O
53rd	O	O
bit	O	O
is	O	O
set	O	O
,	O	O
that	O	O
bit	O	O
is	O	O
the	O	O
implicit	O	O
leading	O	O
1	O	O
and	O	O
it	O	O
goes	O	O
away	O	O
,	O	O
and	O	O
the	O	O
other	O	O
52	O	O
bits	O	O
are	O	O
copied	O	O
literally	O	O
to	O	O
the	O	O
significand	O	O
of	O	O
the	O	O
resulting	O	O
double	O	O
.	O	O
If	O	O
that	O	O
bit	O	O
is	O	O
not	O	O
set	O	O
however	O	O
,	O	O
the	O	O
remaining	O	O
bits	O	O
must	O	O
be	O	O
shifted	O	O
left	O	O
until	O	O
it	O	O
becomes	O	O
set	O	O
.	O	O
On	O	O
average	O	O
,	O	O
half	O	O
the	O	O
generated	O	O
numbers	O	O
fall	O	O
into	O	O
the	O	O
case	O	O
where	O	O
the	O	O
significand	O	O
was	O	O
not	O	O
shifted	O	O
left	O	O
at	O	O
all	O	O
(	O	O
and	O	O
about	O	O
half	O	O
those	O	O
have	O	O
a	O	O
0	O	O
as	O	O
their	O	O
least	O	O
significant	O	O
bit	O	O
)	O	O
,	O	O
and	O	O
the	O	O
other	O	O
half	O	O
is	O	O
shifted	O	O
by	O	O
at	O	O
least	O	O
1	O	O
(	O	O
or	O	O
is	O	O
just	O	O
completely	O	O
zero	O	O
)	O	O
so	O	O
their	O	O
least	O	O
significant	O	O
bit	O	O
is	O	O
always	O	O
0	O	O
.	O	O
1	O	O
:	O	O
not	O	O
always	O	O
,	O	O
clearly	O	O
it	O	O
cannot	O	O
be	O	O
done	O	O
for	O	O
zero	O	O
,	O	O
which	O	O
has	O	O
no	O	O
highest	O	O
1	O	O
.	O	O
These	O	O
numbers	O	O
are	O	O
called	O	O
denormal	O	O
or	O	O
subnormal	O	O
numbers	O	O
,	O	O
see	O	O
wikipedia	O	O
:	O	O
denormal	O	O
number	O	O
.	O	O
Question	O	O
-	O	O
22182669	O	O
,	O	O
answer	O	O
-	O	O
22222274	O	O
StackOverflowError	B-api_mention	B-api_mention
occurs	O	O
due	O	O
to	O	O
an	O	O
application	O	O
recurses	O	O
too	O	O
deeply	O	O
(	O	O
This	O	O
is	O	O
not	O	O
an	O	O
answer	O	O
you	O	O
are	O	O
expecting	O	O
)	O	O
.	O	O
Now	O	O
other	O	O
things	O	O
to	O	O
happen	O	O
to	O	O
StackOverflowError	B-api_mention	B-api_mention
is	O	O
keep	O	O
calling	O	O
methods	O	O
from	O	O
methods	O	O
till	O	O
you	O	O
get	O	O
StackOverflowError	B-api_mention	B-api_mention
,	O	O
but	O	O
nobody	O	O
can	O	O
program	O	O
to	O	O
get	O	O
StackOverflowError	B-api_mention	B-api_mention
and	O	O
even	O	O
if	O	O
those	O	O
programmer	O	O
are	O	O
doing	O	O
so	O	O
then	O	O
they	O	O
are	O	O
not	O	O
following	O	O
coding	O	O
standards	O	O
for	O	O
cyclomatic	O	O
complixity	O	O
that	O	O
every	O	O
programmer	O	O
has	O	O
to	O	O
understand	O	O
while	O	O
programming	O	O
.	O	O
Such	O	O
reason	O	O
for	O	O
'	B-api_mention	O
StackOverflowError	I-api_mention	B-api_mention
'	I-api_mention	O
will	O	O
require	O	O
much	O	O
time	O	O
to	O	O
rectify	O	O
it	O	O
.	O	O
But	O	O
unknowingly	O	O
coding	O	O
one	O	O
line	O	O
or	O	O
two	O	O
line	O	O
which	O	O
causes	O	O
StackOverflowError	B-api_mention	B-api_mention
is	O	O
understandable	O	O
and	O	O
JVM	O	O
throws	O	O
that	O	O
and	O	O
we	O	O
can	O	O
rectify	O	O
it	O	O
instantly	O	O
.	O	O
Here	O	O
is	O	O
my	O	O
answer	O	O
with	O	O
picture	O	O
for	O	O
some	O	O
other	O	O
question	O	O
.	O	O
Question	O	O
-	O	O
29922296	O	O
,	O	O
answer	O	O
-	O	O
29922831	O	O
Three	O	O
questions	O	O
:	O	O
three	O	O
-	O	O
part	O	O
answer	O	O
:	O	O
Is	O	O
it	O	O
okay	O	O
from	O	O
a	O	O
design	O	O
point	O	O
of	O	O
view	O	O
?	O	O
Absolutely	O	O
.	O	O
Nothing	O	O
wrong	O	O
with	O	O
it	O	O
.	O	O
If	O	O
you	O	O
need	O	O
to	O	O
do	O	O
lots	O	O
of	O	O
iterating	O	O
over	O	O
your	O	O
enum	O	O
,	O	O
the	O	O
stream	O	O
API	O	O
is	O	O
the	O	O
clean	O	O
way	O	O
to	O	O
go	O	O
and	O	O
hiding	O	O
the	O	O
boiler	O	O
plate	O	O
behind	O	O
a	O	O
little	O	O
method	O	O
is	O	O
fine	O	O
.	O	O
Although	O	O
I	O	O
’	O	O
d	O	O
consider	O	O
OldCumudgeon	O	O
’	O	O
s	O	O
version	O	O
even	O	O
better	O	O
.	O	O
Is	O	O
it	O	O
okay	O	O
from	O	O
a	O	O
performance	O	O
point	O	O
of	O	O
view	O	O
?	O	O
It	O	O
most	O	O
likely	O	O
doesn	O	O
’	O	O
t	O	O
matter	O	O
.	O	O
Most	O	O
of	O	O
the	O	O
time	O	O
,	O	O
enums	O	O
are	O	O
not	O	O
that	O	O
big	O	O
.	O	O
Therefore	O	O
,	O	O
whatever	O	O
overhead	O	O
there	O	O
is	O	O
for	O	O
one	O	O
method	O	O
or	O	O
the	O	O
other	O	O
probably	O	O
doesn	O	O
’	O	O
t	O	O
matter	O	O
in	O	O
99	O	O
.	O	O
9	O	O
%	O	O
of	O	O
the	O	O
cases	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
there	O	O
are	O	O
the	O	O
0	O	O
.	O	O
1	O	O
%	O	O
where	O	O
it	O	O
does	O	O
.	O	O
In	O	O
that	O	O
case	O	O
:	O	O
measure	O	O
properly	O	O
,	O	O
with	O	O
your	O	O
real	O	O
-	O	O
world	O	O
data	O	O
and	O	O
consumers	O	O
.	O	O
If	O	O
I	O	O
had	O	O
to	O	O
bet	O	O
,	O	O
I	O	O
’	O	O
d	O	O
expect	O	O
the	O	O
for	O	O
each	O	O
loop	O	O
to	O	O
be	O	O
faster	O	O
,	O	O
since	O	O
it	O	O
maps	O	O
more	O	O
directly	O	O
to	O	O
the	O	O
memory	O	O
model	O	O
,	O	O
but	O	O
don	O	O
’	O	O
t	O	O
guess	O	O
when	O	O
talking	O	O
performance	O	O
,	O	O
and	O	O
don	O	O
’	O	O
t	O	O
tune	O	O
before	O	O
there	O	O
is	O	O
actual	O	O
need	O	O
for	O	O
tuning	O	O
.	O	O
Write	O	O
your	O	O
code	O	O
in	O	O
a	O	O
way	O	O
that	O	O
is	O	O
correct	O	O
first	O	O
,	O	O
easy	O	O
to	O	O
read	O	O
second	O	O
and	O	O
only	O	O
then	O	O
worry	O	O
about	O	O
performance	O	O
of	O	O
code	O	O
style	O	O
.	O	O
Why	O	O
aren	O	O
’	O	O
t	O	O
Enums	O	O
properly	O	O
integrated	O	O
into	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
?	O	O
If	O	O
you	O	O
compare	O	O
Java	O	O
’	O	O
s	O	O
Stream	B-api_mention	B-api_mention
API	O	O
to	O	O
the	O	O
equivalent	O	O
in	O	O
many	O	O
other	O	O
languages	O	O
,	O	O
it	O	O
appears	O	O
seriously	O	O
limited	O	O
.	O	O
There	O	O
are	O	O
various	O	O
pieces	O	O
that	O	O
are	O	O
missing	O	O
(	O	O
reusable	O	O
Streams	O	B-api_mention
and	O	O
Optionals	O	B-api_mention
as	O	O
Streams	O	B-api_mention
,	O	O
for	O	O
example	O	O
)	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
implementing	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
was	O	O
certainly	O	O
a	O	O
huge	O	O
change	O	O
for	O	O
the	O	O
API	O	O
.	O	O
It	O	O
was	O	O
postponed	O	O
multiple	O	O
times	O	O
for	O	O
a	O	O
reason	O	O
.	O	O
So	O	O
I	O	O
guess	O	O
Oracle	O	O
wanted	O	O
to	O	O
limit	O	O
the	O	O
changes	O	O
to	O	O
the	O	O
most	O	O
important	O	O
use	O	O
cases	O	O
.	O	O
Enums	O	O
aren	O	O
’	O	O
t	O	O
used	O	O
that	O	O
much	O	O
anyway	O	O
.	O	O
Sure	O	O
,	O	O
every	O	O
project	O	O
has	O	O
a	O	O
couple	O	O
of	O	O
them	O	O
,	O	O
but	O	O
they	O	O
’	O	O
re	O	O
nothing	O	O
compared	O	O
to	O	O
the	O	O
number	O	O
of	O	O
Lists	O	B-api_mention
and	O	O
other	O	O
Collections	B-api_mention	B-api_mention
.	O	O
Even	O	O
when	O	O
you	O	O
have	O	O
an	O	O
Enum	O	O
,	O	O
in	O	O
many	O	O
cases	O	O
you	O	O
won	O	O
’	O	O
t	O	O
ever	O	O
iterate	O	O
over	O	O
it	O	O
.	O	O
Lists	O	O
and	O	O
Sets	O	O
,	O	O
on	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
are	O	O
probably	O	O
iterated	O	O
over	O	O
almost	O	O
every	O	O
time	O	O
.	O	O
I	O	O
assume	O	O
that	O	O
these	O	O
were	O	O
the	O	O
reasons	O	O
why	O	O
the	O	O
Enums	O	O
didn	O	O
’	O	O
t	O	O
get	O	O
their	O	O
own	O	O
adapter	O	O
to	O	O
the	O	O
Stream	B-api_mention	B-api_mention
world	O	O
.	O	O
We	O	O
’	O	O
ll	O	O
see	O	O
whether	O	O
more	O	O
of	O	O
this	O	O
gets	O	O
added	O	O
in	O	O
future	O	O
versions	O	O
.	O	O
And	O	O
until	O	O
then	O	O
you	O	O
always	O	O
can	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
7569335	O	O
,	O	O
answer	O	O
-	O	O
39329245	O	O
As	O	O
others	O	O
have	O	O
pointed	O	O
out	O	O
the	O	O
preferred	O	O
way	O	O
is	O	O
to	O	O
use	O	O
:	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reverse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
but	O	O
if	O	O
you	O	O
want	O	O
to	O	O
implement	O	O
this	O	O
by	O	O
youself	O	O
,	O	O
i	O	O
'	O	O
am	O	O
afraid	O	O
that	O	O
the	O	O
rest	O	O
of	O	O
responses	O	O
have	O	O
flaws	O	O
.	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
String	B-api_mention	B-api_mention
represent	O	O
a	O	O
list	O	O
of	O	O
Unicode	O	O
points	O	O
,	O	O
encoded	O	O
in	O	O
a	O	O
char	O	O
[	O	O
]	O	O
array	O	O
according	O	O
to	O	O
the	O	O
variable	O	O
-	O	O
length	O	O
encoding	O	O
:	O	O
UTF	O	O
-	O	O
16	O	O
.	O	O
This	O	O
means	O	O
some	O	O
code	O	O
points	O	O
use	O	O
a	O	O
single	O	O
element	O	O
of	O	O
the	O	O
array	O	O
(	O	O
one	O	O
code	O	O
unit	O	O
)	O	O
but	O	O
others	O	O
use	O	O
two	O	O
of	O	O
them	O	O
,	O	O
so	O	O
there	O	O
might	O	O
be	O	O
pairs	O	O
of	O	O
characters	O	O
that	O	O
must	O	O
be	O	O
treated	O	O
as	O	O
a	O	O
single	O	O
unit	O	O
(	O	O
consecutive	O	O
"	O	O
high	O	O
"	O	O
and	O	O
"	O	O
low	O	O
"	O	O
surrogates	O	O
)	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276493	O	O
You	O	O
can	O	O
close	O	O
the	O	O
outer	O	O
most	O	O
stream	O	O
,	O	O
in	O	O
fact	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
retain	O	O
all	O	O
the	O	O
streams	O	O
wrapped	O	O
and	O	O
you	O	O
can	O	O
use	O	O
Java	O	O
7	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
.	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
subscribe	O	O
to	O	O
YAGNI	O	O
,	O	O
or	O	O
you	O	O
-	O	O
aint	O	O
-	O	O
gonna	O	O
-	O	O
need	O	O
-	O	O
it	O	O
,	O	O
you	O	O
should	O	O
be	O	O
only	O	O
adding	O	O
code	O	O
you	O	O
actually	O	O
need	O	O
.	O	O
You	O	O
shouldn	O	O
'	O	O
t	O	O
be	O	O
adding	O	O
code	O	O
you	O	O
imagine	O	O
you	O	O
might	O	O
need	O	O
but	O	O
in	O	O
reality	O	O
doesn	O	O
'	O	O
t	O	O
do	O	O
anything	O	O
useful	O	O
.	O	O
Take	O	O
this	O	O
example	O	O
and	O	O
imagine	O	O
what	O	O
could	O	O
possibly	O	O
go	O	O
wrong	O	O
if	O	O
you	O	O
didn	O	O
'	O	O
t	O	O
do	O	O
this	O	O
and	O	O
what	O	O
the	O	O
impact	O	O
would	O	O
be	O	O
?	O	O
#	O	O
pre	O	O
Lets	O	O
start	O	O
with	O	O
FileOutputStream	B-api_mention	B-api_mention
which	O	O
calls	O	O
open	O	O
to	O	O
do	O	O
all	O	O
the	O	O
real	O	O
work	O	O
.	O	O
/	O	O
*	O	O
*	O	O
*	O	O
Opens	O	O
a	O	O
file	O	O
,	O	O
with	O	O
the	O	O
specified	O	O
name	O	O
,	O	O
for	O	O
overwriting	O	O
or	O	O
appending	O	O
.	O	O
*	O	O
@	O	O
param	O	O
name	O	O
name	O	O
of	O	O
file	O	O
to	O	O
be	O	O
opened	O	O
*	O	O
@	O	O
param	O	O
append	O	O
whether	O	O
the	O	O
file	O	O
is	O	O
to	O	O
be	O	O
opened	O	O
in	O	O
append	O	O
mode	O	O
*	O	O
/	O	O
private	O	O
native	O	O
void	O	O
open	O	O
(	O	O
args	O	O
)	O	O
throws	O	O
FileNotFoundException	B-api_mention	B-api_mention
;	O	O
If	O	O
the	O	O
file	O	O
is	O	O
not	O	O
found	O	O
,	O	O
there	O	O
is	O	O
no	O	O
underlying	O	O
resource	O	O
to	O	O
close	O	O
,	O	O
so	O	O
closing	O	O
it	O	O
won	O	O
'	O	O
t	O	O
make	O	O
any	O	O
difference	O	O
.	O	O
If	O	O
The	O	O
file	O	O
exists	O	O
,	O	O
it	O	O
should	O	O
be	O	O
throwing	O	O
a	O	O
FileNotFoundException	B-api_mention	B-api_mention
.	O	O
So	O	O
there	O	O
is	O	O
nothing	O	O
to	O	O
be	O	O
gained	O	O
by	O	O
trying	O	O
to	O	O
close	O	O
the	O	O
resource	O	O
from	O	O
this	O	O
line	O	O
alone	O	O
.	O	O
The	O	O
reason	O	O
you	O	O
need	O	O
to	O	O
close	O	O
the	O	O
file	O	O
is	O	O
when	O	O
the	O	O
file	O	O
is	O	O
opened	O	O
successfully	O	O
,	O	O
but	O	O
you	O	O
later	O	O
get	O	O
an	O	O
error	O	O
.	O	O
Lets	O	O
look	O	O
at	O	O
the	O	O
next	O	O
stream	O	O
GZIPOutputStream	B-api_mention	O
There	O	O
is	O	O
code	O	O
which	O	O
can	O	O
throw	O	O
an	O	O
exception	O	O
#	O	O
pre	O	O
This	O	O
writes	O	O
the	O	O
header	O	O
of	O	O
the	O	O
file	O	O
.	O	O
Now	O	O
it	O	O
would	O	O
be	O	O
very	O	O
unusual	O	O
for	O	O
you	O	O
to	O	O
be	O	O
able	O	O
to	O	O
open	O	O
a	O	O
file	O	O
for	O	O
writing	O	O
but	O	O
not	O	O
be	O	O
able	O	O
to	O	O
write	O	O
even	O	O
8	O	O
bytes	O	O
to	O	O
it	O	O
,	O	O
but	O	O
lets	O	O
imagine	O	O
this	O	O
could	O	O
happen	O	O
and	O	O
we	O	O
don	O	O
'	O	O
t	O	O
close	O	O
the	O	O
file	O	O
afterwards	O	O
.	O	O
What	O	O
does	O	O
happen	O	O
to	O	O
a	O	O
file	O	O
if	O	O
it	O	O
is	O	O
not	O	O
closed	O	O
?	O	O
You	O	O
don	O	O
'	O	O
t	O	O
get	O	O
any	O	O
unflushed	O	O
writes	O	O
,	O	O
they	O	O
are	O	O
discarded	O	O
and	O	O
in	O	O
this	O	O
case	O	O
,	O	O
there	O	O
is	O	O
no	O	O
successfully	O	O
written	O	O
bytes	O	O
to	O	O
the	O	O
stream	O	O
which	O	O
isn	O	O
'	O	O
t	O	O
buffered	O	O
at	O	O
this	O	O
point	O	O
anyway	O	O
.	O	O
But	O	O
a	O	O
file	O	O
which	O	O
is	O	O
not	O	O
closed	O	O
doesn	O	O
'	O	O
t	O	O
live	O	O
forever	O	O
,	O	O
instead	O	O
FileOutputStream	B-api_mention	B-api_mention
has	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
close	O	O
a	O	O
file	O	O
at	O	O
all	O	O
,	O	O
it	O	O
gets	O	O
closed	O	O
anyway	O	O
,	O	O
just	O	O
not	O	O
immediately	O	O
(	O	O
and	O	O
like	O	O
I	O	O
said	O	O
,	O	O
data	O	O
which	O	O
is	O	O
left	O	O
in	O	O
a	O	O
buffer	O	O
will	O	O
be	O	O
lost	O	O
this	O	O
way	O	O
,	O	O
but	O	O
there	O	O
is	O	O
none	O	O
at	O	O
this	O	O
point	O	O
)	O	O
What	O	O
is	O	O
the	O	O
consequence	O	O
of	O	O
not	O	O
closing	O	O
the	O	O
file	O	O
immediately	O	O
?	O	O
Under	O	O
normal	O	O
conditions	O	O
,	O	O
you	O	O
potentially	O	O
lose	O	O
some	O	O
data	O	O
,	O	O
and	O	O
you	O	O
potentially	O	O
run	O	O
out	O	O
of	O	O
file	O	O
descriptors	O	O
.	O	O
But	O	O
if	O	O
you	O	O
have	O	O
a	O	O
system	O	O
where	O	O
you	O	O
can	O	O
create	O	O
files	O	O
but	O	O
you	O	O
can	O	O
'	O	O
t	O	O
write	O	O
anything	O	O
to	O	O
them	O	O
,	O	O
you	O	O
have	O	O
a	O	O
bigger	O	O
problem	O	O
.	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
hard	O	O
to	O	O
imagine	O	O
why	O	O
you	O	O
are	O	O
repeatedly	O	O
trying	O	O
to	O	O
create	O	O
this	O	O
file	O	O
despite	O	O
the	O	O
fact	O	O
you	O	O
are	O	O
failing	O	O
.	O	O
Both	O	O
OutputStreamWriter	B-api_mention	B-api_mention
and	O	O
BufferedWriter	B-api_mention	B-api_mention
don	O	O
'	O	O
t	O	O
throw	O	O
IOException	B-api_mention	B-api_mention
in	O	O
their	O	O
constructors	O	O
,	O	O
so	O	O
it	O	O
not	O	O
clear	O	O
what	O	O
problem	O	O
they	O	O
would	O	O
cause	O	O
.	O	O
In	O	O
The	O	O
case	O	O
of	O	O
BufferedWriter	B-api_mention	B-api_mention
,	O	O
you	O	O
could	O	O
get	O	O
an	O	O
OutOfMemoryError	B-api_mention	B-api_mention
.	O	O
In	O	O
this	O	O
case	O	O
it	O	O
will	O	O
immediately	O	O
trigger	O	O
a	O	O
GC	O	O
,	O	O
which	O	O
as	O	O
we	O	O
have	O	O
seen	O	O
will	O	O
close	O	O
the	O	O
file	O	O
anyway	O	O
.	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
8894356	O	O
Looks	O	O
like	O	O
niether	O	O
is	O	O
faster	O	O
or	O	O
slower	O	O
#	O	O
pre	O	O
For	O	O
long	O	O
strings	O	O
I	O	O
'	O	O
ll	O	O
chose	O	O
the	O	O
first	O	O
one	O	O
.	O	O
Why	O	O
copy	O	O
around	O	O
long	O	O
strings	O	O
?	O	O
Documentations	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
/	O	O
/	O	O
Edit	O	O
1	O	O
I	O	O
'	O	O
ve	O	O
changed	O	O
the	O	O
test	O	O
to	O	O
trick	O	O
JIT	O	O
optimisation	O	O
.	O	O
/	O	O
/	O	O
Edit	O	O
2	O	O
Repeat	O	O
test	O	O
10	O	O
times	O	O
to	O	O
let	O	O
JVM	O	O
warm	O	O
up	O	O
.	O	O
/	O	O
/	O	O
Edit	O	O
3	O	O
Conclusions	O	O
:	O	O
First	O	O
of	O	O
all	O	O
str	O	O
.	B-api_mention	B-api_mention
toCharArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
copies	O	O
entire	O	O
string	O	O
in	O	O
memory	O	O
.	O	O
It	O	O
can	O	O
be	O	O
memory	O	O
consuming	O	O
for	O	O
long	O	O
strings	O	O
.	O	O
Method	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
charAt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
looks	O	O
up	O	O
char	O	O
in	O	O
char	O	O
array	O	O
inside	O	O
String	B-api_mention	B-api_mention
class	O	O
checking	O	O
index	O	O
before	O	O
.	O	O
It	O	O
looks	O	O
like	O	O
for	O	O
short	O	O
enough	O	O
Strings	B-api_mention	O
first	O	O
method	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
chatAt	B-api_mention	O
method	O	O
)	O	O
is	O	O
a	O	O
bit	O	O
slower	O	O
due	O	O
to	O	O
this	O	O
index	O	O
check	O	O
.	O	O
But	O	O
if	O	O
the	O	O
String	B-api_mention	B-api_mention
is	O	O
long	O	O
enough	O	O
,	O	O
copying	O	O
whole	O	O
char	O	O
array	O	O
gets	O	O
slower	O	O
,	O	O
and	O	O
the	O	O
first	O	O
method	O	O
is	O	O
faster	O	O
.	O	O
The	O	O
longer	O	O
the	O	O
string	O	O
is	O	O
,	O	O
the	O	O
slower	O	O
toCharArray	B-api_mention	B-api_mention
performs	O	O
.	O	O
Try	O	O
to	O	O
change	O	O
limit	O	O
in	O	O
for	O	O
(	O	O
args	O	O
)	O	O
loop	O	O
to	O	O
see	O	O
it	O	O
.	O	O
If	O	O
we	O	O
let	O	O
JVM	O	O
warm	O	O
up	O	O
code	O	O
runs	O	O
faster	O	O
,	O	O
but	O	O
proportions	O	O
are	O	O
the	O	O
same	O	O
.	O	O
After	O	O
all	O	O
it	O	O
'	O	O
s	O	O
just	O	O
micro	O	O
-	O	O
optimisation	O	O
.	O	O
Question	O	O
-	O	O
28671903	O	O
,	O	O
answer	O	O
-	O	O
28672583	O	O
The	O	O
behaviour	O	O
is	O	O
(	O	O
somewhat	O	O
)	O	O
documented	O	O
in	O	O
the	O	O
javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
What	O	O
this	O	O
means	O	O
in	O	O
practice	O	O
,	O	O
when	O	O
you	O	O
call	O	O
source	O	O
.	B-api_mention	B-api_mention
removeAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
:	O	O
#	O	O
li	O	O
if	O	O
the	O	O
removals	O	O
collection	O	O
is	O	O
of	O	O
a	O	O
smaller	O	O
size	O	O
than	O	O
source	O	O
,	O	O
the	O	O
remove	O	O
method	O	O
of	O	O
HashSet	B-api_mention	B-api_mention
is	O	O
called	O	O
,	O	O
which	O	O
is	O	O
fast	O	O
.	O	O
#	O	O
li	O	O
if	O	O
the	O	O
removals	O	O
collection	O	O
is	O	O
of	O	O
equal	O	O
or	O	O
larger	O	O
size	O	O
than	O	O
the	O	O
source	O	O
,	O	O
then	O	O
removals	O	O
.	B-api_mention	O
contains	I-api_mention	O
is	O	O
called	O	O
,	O	O
which	O	O
is	O	O
slow	O	O
for	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
.	O	O
Quick	O	O
fix	O	O
:	O	O
Collection	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
removals	O	O
=	O	O
new	O	O
HashSet	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
that	O	O
there	O	O
is	O	O
an	O	O
open	O	O
bug	O	O
that	O	O
is	O	O
very	O	O
similar	O	O
to	O	O
what	O	O
you	O	O
describe	O	O
.	O	O
The	O	O
bottom	O	O
line	O	O
seems	O	O
to	O	O
be	O	O
that	O	O
it	O	O
is	O	O
probably	O	O
a	O	O
poor	O	O
choice	O	O
but	O	O
can	O	O
'	O	O
t	O	O
be	O	O
changed	O	O
because	O	O
it	O	O
is	O	O
documented	O	O
in	O	O
the	O	O
javadoc	O	O
.	O	O
For	O	O
reference	O	O
,	O	O
this	O	O
is	O	O
the	O	O
code	O	O
of	O	O
removeAll	B-api_mention	B-api_mention
(	O	O
in	O	O
Java	O	O
8	O	O
-	O	O
haven	O	O
'	O	O
t	O	O
checked	O	O
other	O	O
versions	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6802483	O	O
,	O	O
answer	O	O
-	O	O
6802523	O	O
There	O	O
is	O	O
no	O	O
direct	O	O
way	O	O
to	O	O
do	O	O
this	O	O
-	O	O
Java	O	O
has	O	O
no	O	O
Map	B-api_mention	B-api_mention
literals	O	O
(	O	O
yet	O	O
-	O	O
I	O	O
think	O	O
they	O	O
were	O	O
proposed	O	O
for	O	O
Java	O	O
8	O	O
)	O	O
.	O	O
Some	O	O
people	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
creates	O	O
an	O	O
anonymous	O	O
subclass	O	O
of	O	O
HashMap	B-api_mention	B-api_mention
,	O	O
whose	O	O
instance	O	O
initializer	O	O
puts	O	O
these	O	O
values	O	O
.	O	O
(	O	O
By	O	O
the	O	O
way	O	O
,	O	O
a	O	O
map	O	O
can	O	O
'	O	O
t	O	O
contain	O	O
twice	O	O
the	O	O
same	O	O
value	O	O
,	O	O
your	O	O
second	O	O
put	O	O
will	O	O
overwrite	O	O
the	O	O
first	O	O
one	O	O
.	O	O
I	O	O
'	O	O
ll	O	O
use	O	O
different	O	O
values	O	O
for	O	O
the	O	O
next	O	O
examples	O	O
.	O	O
)	O	O
The	O	O
normal	O	O
way	O	O
would	O	O
be	O	O
this	O	O
(	O	O
for	O	O
a	O	O
local	O	O
variable	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
your	O	O
test	O	O
map	O	O
is	O	O
an	O	O
instance	O	O
variable	O	O
,	O	O
put	O	O
the	O	O
initialization	O	O
in	O	O
a	O	O
constructor	O	O
or	O	O
instance	O	O
initializer	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
your	O	O
test	O	O
map	O	O
is	O	O
a	O	O
class	O	O
variable	O	O
,	O	O
put	O	O
the	O	O
initialization	O	O
in	O	O
a	O	O
static	O	O
initializer	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
want	O	O
your	O	O
map	O	O
to	O	O
never	O	O
change	O	O
,	O	O
you	O	O
should	O	O
after	O	O
the	O	O
initialization	O	O
wrap	O	O
your	O	O
map	O	O
by	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
You	O	O
can	O	O
do	O	O
this	O	O
in	O	O
a	O	O
static	O	O
initializer	O	O
too	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
if	O	O
you	O	O
can	O	O
now	O	O
make	O	O
test	O	O
final	O	O
.	O	O
.	O	O
.	O	O
try	O	O
it	O	O
out	O	O
and	O	O
report	O	O
here	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
6992608	O	O
,	O	O
answer	O	O
-	O	O
6992643	O	O
There	O	O
'	O	O
s	O	O
no	O	O
built	O	O
in	O	O
type	O	O
for	O	O
ConcurrentHashSet	B-api_mention	B-api_mention
because	O	O
you	O	O
can	O	O
always	O	O
derive	O	O
a	O	O
set	O	O
from	O	O
a	O	O
map	O	O
.	O	O
Since	O	O
there	O	O
are	O	O
many	O	O
types	O	O
of	O	O
maps	O	O
,	O	O
you	O	O
use	O	O
a	O	O
method	O	O
to	O	O
produce	O	O
a	O	O
set	O	O
from	O	O
a	O	O
given	O	O
map	O	O
(	O	O
or	O	O
map	O	O
class	O	O
)	O	O
.	O	O
Prior	O	O
to	O	O
Java	O	O
8	O	O
,	O	O
you	O	O
produce	O	O
a	O	O
concurrent	O	O
hash	O	O
set	O	O
backed	O	O
by	O	O
a	O	O
concurrent	O	O
hash	O	O
map	O	O
,	O	O
by	O	O
using	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newSetFromMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
In	O	O
Java	O	O
8	O	O
(	O	O
pointed	O	O
out	O	O
by	O	O
@	O	O
Matt	O	O
)	O	O
,	O	O
you	O	O
can	O	O
get	O	O
a	O	O
concurrent	O	O
hash	O	O
set	O	O
view	O	O
via	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newKeySet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
is	O	O
a	O	O
bit	O	O
simpler	O	O
than	O	O
the	O	O
old	O	O
newSetFromMap	B-api_mention	B-api_mention
which	O	O
required	O	O
you	O	O
to	O	O
pass	O	O
in	O	O
an	O	O
empty	O	O
map	O	O
object	O	O
.	O	O
But	O	O
it	O	O
is	O	O
specific	O	O
to	O	O
ConcurrentHashMap	B-api_mention	B-api_mention
.	O	O
Anyway	O	O
,	O	O
the	O	O
Java	O	O
designers	O	O
could	O	O
have	O	O
created	O	O
a	O	O
new	O	O
set	O	O
interface	O	O
every	O	O
time	O	O
a	O	O
new	O	O
map	O	O
interface	O	O
was	O	O
created	O	O
,	O	O
but	O	O
that	O	O
pattern	O	O
would	O	O
be	O	O
impossible	O	O
to	O	O
enforce	O	O
when	O	O
third	O	O
parties	O	O
create	O	O
their	O	O
own	O	O
maps	O	O
.	O	O
It	O	O
is	O	O
better	O	O
to	O	O
have	O	O
the	O	O
static	O	O
methods	O	O
that	O	O
derive	O	O
new	O	O
sets	O	O
;	O	O
that	O	O
approach	O	O
always	O	O
works	O	O
,	O	O
even	O	O
when	O	O
you	O	O
create	O	O
your	O	O
own	O	O
map	O	O
implementations	O	O
.	O	O
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
15046253	O	O
It	O	O
does	O	O
that	O	O
because	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
doesn	O	O
'	O	O
t	O	O
capture	O	O
the	O	O
newline	O	O
.	O	O
you	O	O
could	O	O
do	O	O
like	O	O
the	O	O
others	O	O
proposed	O	O
by	O	O
adding	O	O
an	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
underneath	O	O
.	O	O
Alternatively	O	O
you	O	O
can	O	O
do	O	O
it	O	O
C	O	O
#	O	O
style	O	O
and	O	O
parse	O	O
a	O	O
nextLine	B-api_mention	B-api_mention
to	O	O
an	O	O
integer	O	O
like	O	O
so	O	O
:	O	O
int	O	O
number	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Doing	O	O
this	O	O
works	O	O
just	O	O
as	O	O
well	O	O
,	O	O
and	O	O
it	O	O
saves	O	O
you	O	O
a	O	O
line	O	O
of	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
29140402	O	O
,	O	O
answer	O	O
-	O	O
38628203	O	O
In	O	O
intellij	O	O
you	O	O
can	O	O
auto	O	O
generate	O	O
toString	B-api_mention	B-api_mention
method	O	O
by	O	O
pressing	O	O
alt	O	O
+	O	O
inset	O	O
and	O	O
then	O	O
selecting	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
here	O	O
is	O	O
an	O	O
out	O	O
put	O	O
for	O	O
a	O	O
test	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
it	O	O
generates	O	O
a	O	O
String	B-api_mention	B-api_mention
by	O	O
concatenating	O	O
,	O	O
several	O	O
attributes	O	O
of	O	O
the	O	O
class	O	O
,	O	O
for	O	O
primitives	O	O
it	O	O
will	O	O
print	O	O
their	O	O
values	O	O
and	O	O
for	O	O
reference	O	O
types	O	O
it	O	O
will	O	O
use	O	O
their	O	O
class	O	O
type	O	O
(	O	O
in	O	O
this	O	O
case	O	O
to	O	O
string	O	O
method	O	O
of	O	O
Test2	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
10631715	O	O
,	O	O
answer	O	O
-	O	O
32362691	O	O
For	O	O
completeness	O	O
,	O	O
using	O	O
the	O	O
Guava	O	O
library	O	O
,	O	O
you	O	O
'	O	O
d	O	O
do	O	O
:	O	O
Splitter	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
on	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Another	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Splitter	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
an	O	O
Iterable	O	B-api_mention
,	O	O
so	O	O
if	O	O
you	O	O
need	O	O
a	O	O
List	B-api_mention	B-api_mention
,	O	O
wrap	O	O
it	O	O
in	O	O
Lists	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newArrayList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
above	O	O
.	O	O
Otherwise	O	O
just	O	O
go	O	O
with	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
how	O	O
trimResults	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
handles	O	O
all	O	O
your	O	O
trimming	O	O
needs	O	O
without	O	O
having	O	O
to	O	O
tweak	O	O
regexes	O	O
for	O	O
corner	O	O
cases	O	O
,	O	O
as	O	O
with	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
your	O	O
project	O	O
uses	O	O
Guava	O	O
already	O	O
,	O	O
this	O	O
should	O	O
be	O	O
your	O	O
preferred	O	O
solution	O	O
.	O	O
See	O	O
Splitter	B-api_mention	O
documentation	O	O
in	O	O
Guava	O	O
User	O	O
Guide	O	O
or	O	O
the	O	O
javadocs	O	O
for	O	O
more	O	O
configuration	O	O
options	O	O
.	O	O
Question	O	O
-	O	O
31188231	O	O
,	O	O
answer	O	O
-	O	O
31190722	O	O
We	O	O
can	O	O
draw	O	O
a	O	O
parallel	O	O
with	O	O
abstract	O	O
class	O	O
.	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
intended	O	O
to	O	O
be	O	O
subclassed	O	O
so	O	O
that	O	O
the	O	O
abstract	O	O
methods	O	O
can	O	O
be	O	O
implemented	O	O
.	O	O
The	O	O
abstract	O	O
class	O	O
itself	O	O
contains	O	O
concrete	O	O
methods	O	O
that	O	O
invoke	O	O
the	O	O
abstract	O	O
methods	O	O
.	O	O
The	O	O
abstract	O	O
class	O	O
is	O	O
free	O	O
to	O	O
evolve	O	O
by	O	O
adding	O	O
more	O	O
concrete	O	O
methods	O	O
;	O	O
and	O	O
this	O	O
practice	O	O
may	O	O
break	O	O
subclasses	O	O
.	O	O
Therefore	O	O
the	O	O
exact	O	O
problem	O	O
you	O	O
described	O	O
existed	O	O
even	O	O
before	O	O
Java8	O	O
.	O	O
The	O	O
problem	O	O
is	O	O
much	O	O
more	O	O
manifested	O	O
on	O	O
Collection	B-api_mention	B-api_mention
APIs	O	O
because	O	O
there	O	O
are	O	O
a	O	O
lot	O	O
of	O	O
subclasses	O	O
out	O	O
in	O	O
the	O	O
wild	O	O
.	O	O
While	O	O
the	O	O
leading	O	O
motivation	O	O
of	O	O
default	O	O
method	O	O
was	O	O
to	O	O
add	O	O
some	O	O
useful	O	O
methods	O	O
to	O	O
existing	O	O
Collection	B-api_mention	B-api_mention
APIs	O	O
without	O	O
breaking	O	O
subclasses	O	O
,	O	O
they	O	O
had	O	O
to	O	O
exercise	O	O
great	O	O
self	O	O
-	O	O
control	O	O
of	O	O
doing	O	O
it	O	O
too	O	O
much	O	O
,	O	O
for	O	O
fear	O	O
of	O	O
breaking	O	O
subclasses	O	O
.	O	O
A	O	O
default	O	O
method	O	O
is	O	O
added	O	O
only	O	O
if	O	O
it	O	O
'	O	O
s	O	O
absolutely	O	O
necessary	O	O
.	O	O
The	O	O
real	O	O
question	O	O
here	O	O
is	O	O
,	O	O
why	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
is	O	O
considered	O	O
absolutely	O	O
necessary	O	O
.	O	O
I	O	O
think	O	O
that	O	O
is	O	O
debatable	O	O
.	O	O
Regardless	O	O
of	O	O
why	O	O
default	O	O
method	O	O
was	O	O
introduced	O	O
in	O	O
the	O	O
1st	O	O
place	O	O
,	O	O
it	O	O
is	O	O
now	O	O
a	O	O
great	O	O
tool	O	O
for	O	O
API	O	O
designers	O	O
,	O	O
and	O	O
we	O	O
ought	O	O
to	O	O
treat	O	O
it	O	O
the	O	O
same	O	O
as	O	O
concrete	O	O
methods	O	O
in	O	O
abstract	O	O
classes	O	O
-	O	O
they	O	O
need	O	O
to	O	O
be	O	O
designed	O	O
carefully	O	O
up	O	O
front	O	O
;	O	O
and	O	O
new	O	O
ones	O	O
must	O	O
be	O	O
introduced	O	O
with	O	O
great	O	O
caution	O	O
.	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32175224	O	O
Since	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
not	O	O
a	O	O
final	O	O
method	O	O
of	O	O
Object	B-api_mention	B-api_mention
,	O	O
yes	O	O
,	O	O
it	O	O
is	O	O
very	O	O
well	O	O
be	O	O
possible	O	O
in	O	O
a	O	O
different	O	O
situation	O	O
.	O	O
#	O	O
pre	O	O
This	O	O
question	O	O
,	O	O
however	O	O
,	O	O
specifically	O	O
says	O	O
that	O	O
these	O	O
are	O	O
primitive	O	O
wrappers	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Boolean	B-api_mention	B-api_mention
,	O	O
etc	O	O
.	O	O
)	O	O
and	O	O
since	O	O
these	O	O
classes	O	O
are	O	O
final	O	O
,	O	O
you	O	O
cannot	O	O
extend	O	O
them	O	O
,	O	O
thus	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
always	O	O
return	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032180	O	O
The	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
removes	O	O
all	O	O
the	O	O
elements	O	O
of	O	O
a	O	O
single	O	O
ArrayList	B-api_mention	B-api_mention
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
fast	O	O
operation	O	O
,	O	O
as	O	O
it	O	O
just	O	O
sets	O	O
some	O	O
array	O	O
elements	O	O
to	O	O
null	O	O
.	O	O
The	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
is	O	O
inherited	O	O
from	O	O
AbstractCollection	B-api_mention	B-api_mention
,	O	O
removes	O	O
all	O	O
the	O	O
elements	O	O
that	O	O
are	O	O
in	O	O
the	O	O
argument	O	O
collection	O	O
from	O	O
the	O	O
collection	O	O
you	O	O
call	O	O
the	O	O
method	O	O
on	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
relatively	O	O
slow	O	O
operation	O	O
,	O	O
as	O	O
it	O	O
has	O	O
to	O	O
search	O	O
through	O	O
one	O	O
of	O	O
the	O	O
collections	O	O
involved	O	O
.	O	O
Question	O	O
-	O	O
32693704	O	O
,	O	O
answer	O	O
-	O	O
32745612	O	O
For	O	O
me	O	O
,	O	O
the	O	O
reason	O	O
is	O	O
a	O	O
likely	O	O
performance	O	O
inprovement	O	O
,	O	O
at	O	O
a	O	O
negligible	O	O
cost	O	O
in	O	O
terms	O	O
of	O	O
code	O	O
clarity	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
implementation	O	O
of	O	O
the	O	O
fill	O	O
method	O	O
is	O	O
trivial	O	O
,	O	O
a	O	O
simple	O	O
for	O	O
-	O	O
loop	O	O
setting	O	O
each	O	O
array	O	O
element	O	O
to	O	O
null	O	O
.	O	O
So	O	O
,	O	O
replacing	O	O
a	O	O
call	O	O
to	O	O
it	O	O
with	O	O
the	O	O
actual	O	O
implementation	O	O
does	O	O
not	O	O
cause	O	O
any	O	O
significant	O	O
degradation	O	O
in	O	O
the	O	O
clarity	O	O
/	O	O
conciseness	O	O
of	O	O
the	O	O
caller	O	O
method	O	O
.	O	O
The	O	O
potential	O	O
performance	O	O
benefits	O	O
are	O	O
not	O	O
so	O	O
insignificant	O	O
,	O	O
if	O	O
you	O	O
consider	O	O
everything	O	O
that	O	O
is	O	O
involved	O	O
:	O	O
#	O	O
li	O	O
There	O	O
will	O	O
be	O	O
no	O	O
need	O	O
for	O	O
the	O	O
JVM	O	O
to	O	O
resolve	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
,	O	O
plus	O	O
loading	O	O
and	O	O
initializing	O	O
it	O	O
if	O	O
needed	O	O
.	O	O
This	O	O
is	O	O
a	O	O
non	O	O
-	O	O
trivial	O	O
process	O	O
where	O	O
the	O	O
JVM	O	O
performs	O	O
several	O	O
steps	O	O
.	O	O
Firstly	O	O
,	O	O
it	O	O
checks	O	O
the	O	O
class	O	O
loader	O	O
to	O	O
see	O	O
if	O	O
the	O	O
class	O	O
is	O	O
already	O	O
loaded	O	O
,	O	O
and	O	O
this	O	O
happens	O	O
every	O	O
time	O	O
a	O	O
method	O	O
is	O	O
called	O	O
;	O	O
there	O	O
are	O	O
optimizations	O	O
involved	O	O
here	O	O
,	O	O
of	O	O
course	O	O
,	O	O
but	O	O
it	O	O
still	O	O
takes	O	O
some	O	O
effort	O	O
.	O	O
If	O	O
the	O	O
class	O	O
is	O	O
not	O	O
loaded	O	O
,	O	O
the	O	O
JVM	O	O
will	O	O
need	O	O
to	O	O
go	O	O
through	O	O
the	O	O
expensive	O	O
process	O	O
of	O	O
loading	O	O
it	O	O
,	O	O
verifying	O	O
the	O	O
bytecode	O	O
,	O	O
resolving	O	O
other	O	O
necessary	O	O
dependencies	O	O
,	O	O
and	O	O
finally	O	O
performing	O	O
static	O	O
initialization	O	O
of	O	O
the	O	O
class	O	O
(	O	O
which	O	O
can	O	O
be	O	O
arbitrarily	O	O
expensive	O	O
)	O	O
.	O	O
Given	O	O
that	O	O
HashMap	B-api_mention	B-api_mention
is	O	O
such	O	O
a	O	O
core	O	O
class	O	O
,	O	O
and	O	O
that	O	O
Arrays	B-api_mention	B-api_mention
is	O	O
such	O	O
a	O	O
huge	O	O
class	O	O
(	O	O
3600	O	O
+	O	O
lines	O	O
)	O	O
,	O	O
avoiding	O	O
these	O	O
costs	O	O
may	O	O
add	O	O
up	O	O
to	O	O
noticeable	O	O
savings	O	O
.	O	O
#	O	O
li	O	O
Since	O	O
there	O	O
is	O	O
no	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
call	O	O
,	O	O
the	O	O
JVM	O	O
won	O	O
'	O	O
t	O	O
have	O	O
to	O	O
decide	O	O
whether	O	O
/	O	O
when	O	O
to	O	O
inline	O	O
the	O	O
method	O	O
into	O	O
the	O	O
caller	O	O
'	O	O
s	O	O
body	O	O
.	O	O
Since	O	O
HashMap	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
tends	O	O
to	O	O
get	O	O
called	O	O
a	O	O
lot	O	O
,	O	O
the	O	O
JVM	O	O
will	O	O
eventually	O	O
perform	O	O
the	O	O
inlining	O	O
,	O	O
which	O	O
requires	O	O
JIT	O	O
recompilation	O	O
of	O	O
the	O	O
clear	O	O
method	O	O
.	O	O
With	O	O
no	O	O
method	O	O
calls	O	O
,	O	O
clear	O	O
will	O	O
always	O	O
run	O	O
at	O	O
top	O	O
-	O	O
speed	O	O
(	O	O
once	O	O
initially	O	O
JITed	O	O
)	O	O
.	O	O
Another	O	O
benefit	O	O
of	O	O
no	O	O
longer	O	O
calling	O	O
methods	O	O
in	O	O
Arrays	B-api_mention	B-api_mention
is	O	O
that	O	O
it	O	O
simplifies	O	O
the	O	O
dependency	O	O
graph	O	O
inside	O	O
the	O	O
java	O	B-api_mention
.	O	I-api_mention
util	O	I-api_mention
package	O	O
,	O	O
since	O	O
one	O	O
dependency	O	O
is	O	O
removed	O	O
.	O	O
Question	O	O
-	O	O
11359187	O	O
For	O	O
the	O	O
first	O	O
time	O	O
in	O	O
my	O	O
life	O	O
I	O	O
find	O	O
myself	O	O
in	O	O
a	O	O
position	O	O
where	O	O
I	O	O
'	O	O
m	O	O
writing	O	O
a	O	O
Java	O	O
API	O	O
that	O	O
will	O	O
be	O	O
open	O	O
sourced	O	O
.	O	O
Hopefully	O	O
to	O	O
be	O	O
included	O	O
in	O	O
many	O	O
other	O	O
projects	O	O
.	O	O
For	O	O
logging	O	O
I	O	O
(	O	O
and	O	O
indeed	O	O
the	O	O
people	O	O
I	O	O
work	O	O
with	O	O
)	O	O
have	O	O
always	O	O
used	O	O
JUL	B-api_mention	B-api_mention
(	O	I-api_mention
java	B-api_mention	I-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
logging	I-api_mention	I-api_mention
)	O	O
and	O	O
never	O	O
had	O	O
any	O	O
issues	O	O
with	O	O
it	O	O
.	O	O
However	O	O
now	O	O
I	O	O
need	O	O
to	O	O
understand	O	O
in	O	O
more	O	O
detail	O	O
what	O	O
I	O	O
should	O	O
do	O	O
for	O	O
my	O	O
API	O	O
development	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
done	O	O
some	O	O
research	O	O
on	O	O
this	O	O
and	O	O
with	O	O
the	O	O
information	O	O
I	O	O
'	O	O
ve	O	O
got	O	O
I	O	O
just	O	O
get	O	O
more	O	O
confused	O	O
.	O	O
Hence	O	O
this	O	O
post	O	O
.	O	O
Since	O	O
I	O	O
come	O	O
from	O	O
JUL	B-api_mention	O
I	O	O
'	O	O
m	O	O
biased	O	O
on	O	O
that	O	O
.	O	O
My	O	O
knowledge	O	O
of	O	O
the	O	O
rest	O	O
is	O	O
not	O	O
that	O	O
big	O	O
.	O	O
From	O	O
the	O	O
research	O	O
I	O	O
'	O	O
ve	O	O
done	O	O
I	O	O
'	O	O
ve	O	O
come	O	O
up	O	O
with	O	O
these	O	O
reasons	O	O
why	O	O
people	O	O
do	O	O
not	O	O
like	O	O
JUL	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
"	O	O
I	O	O
started	O	O
developing	O	O
in	O	O
Java	O	O
long	O	O
before	O	O
Sun	O	O
released	O	O
JUL	O	B-api_mention
and	O	O
it	O	O
was	O	O
just	O	O
easier	O	O
for	O	O
me	O	O
to	O	O
continue	O	O
with	O	O
logging	O	O
-	O	O
framework	O	O
-	O	O
X	O	O
rather	O	O
than	O	O
to	O	O
learn	O	O
something	O	O
new	O	O
"	O	O
.	O	O
Hmm	O	O
.	O	O
I	O	O
'	O	O
m	O	O
not	O	O
kidding	O	O
,	O	O
this	O	O
is	O	O
actually	O	O
what	O	O
people	O	O
say	O	O
.	O	O
With	O	O
this	O	O
argument	O	O
we	O	O
could	O	O
all	O	O
be	O	O
doing	O	O
COBOL	O	O
.	O	O
(	O	O
however	O	O
I	O	O
can	O	O
certainly	O	O
relate	O	O
to	O	O
this	O	O
being	O	O
a	O	O
lazy	O	O
dude	O	O
myself	O	O
)	O	O
#	O	O
li	O	O
"	O	O
I	O	O
don	O	O
'	O	O
t	O	O
like	O	O
the	O	O
names	O	O
of	O	O
the	O	O
logging	O	O
levels	O	O
in	O	O
JUL	O	O
"	O	O
.	O	O
Ok	O	O
,	O	O
seriously	O	O
,	O	O
this	O	O
is	O	O
just	O	O
not	O	O
enough	O	O
of	O	O
a	O	O
reason	O	O
to	O	O
introduce	O	O
a	O	O
new	O	O
dependency	O	O
.	O	O
#	O	O
li	O	O
"	O	O
I	O	O
don	O	O
'	O	O
t	O	O
like	O	O
the	O	O
standard	O	O
format	O	O
of	O	O
the	O	O
output	O	O
from	O	O
JUL	B-api_mention	O
"	O	O
.	O	O
Hmm	O	O
.	O	O
This	O	O
is	O	O
just	O	O
configuration	O	O
.	O	O
You	O	O
do	O	O
not	O	O
even	O	O
have	O	O
to	O	O
do	O	O
anything	O	O
code	O	O
-	O	O
wise	O	O
.	O	O
(	O	O
true	O	O
,	O	O
back	O	O
in	O	O
old	O	O
days	O	O
you	O	O
may	O	O
have	O	O
had	O	O
to	O	O
create	O	O
your	O	O
own	O	O
Formatter	O	O
class	O	O
to	O	O
get	O	O
it	O	O
right	O	O
)	O	O
.	O	O
#	O	O
li	O	O
"	O	O
I	O	O
use	O	O
other	O	O
libraries	O	O
that	O	O
also	O	O
use	O	O
logging	O	O
-	O	O
framework	O	O
-	O	O
X	O	O
so	O	O
I	O	O
thought	O	O
it	O	O
easier	O	O
just	O	O
to	O	O
use	O	O
that	O	O
one	O	O
"	O	O
.	O	O
This	O	O
is	O	O
a	O	O
cyclic	O	O
argument	O	O
,	O	O
isn	O	O
'	O	O
t	O	O
?	O	O
Why	O	O
does	O	O
'	O	O
everybody	O	O
'	O	O
use	O	O
logging	O	O
-	O	O
framework	O	O
-	O	O
X	O	O
and	O	O
not	O	O
JUL	B-api_mention	B-api_mention
?	O	O
#	O	O
li	O	O
"	O	O
Everybody	O	O
else	O	O
is	O	O
using	O	O
logging	O	O
-	O	O
framework	O	O
-	O	O
X	O	O
"	O	O
.	O	O
This	O	O
to	O	O
me	O	O
is	O	O
just	O	O
a	O	O
special	O	O
case	O	O
of	O	O
the	O	O
above	O	O
.	O	O
Majority	O	O
is	O	O
not	O	O
always	O	O
right	O	O
.	O	O
So	O	O
the	O	O
real	O	O
big	O	O
question	O	O
is	O	O
why	O	O
not	O	O
JUL	B-api_mention	B-api_mention
?	O	O
.	O	O
What	O	O
is	O	O
it	O	O
I	O	O
have	O	O
missed	O	O
?	O	O
The	O	O
raison	O	O
d	O	O
'	O	O
ê	O	O
tre	O	O
for	O	O
logging	O	O
facades	O	O
(	O	O
SLF4J	B-api_mention	O
,	O	O
JCL	B-api_mention	O
)	O	O
is	O	O
that	O	O
multiple	O	O
logging	O	O
implementations	O	O
have	O	O
existed	O	O
historically	O	O
and	O	O
the	O	O
reason	O	O
for	O	O
that	O	O
really	O	O
goes	O	O
back	O	O
to	O	O
the	O	O
era	O	O
before	O	O
JUL	B-api_mention	B-api_mention
as	O	O
I	O	O
see	O	O
it	O	O
.	O	O
If	O	O
JUL	B-api_mention	B-api_mention
was	O	O
perfect	O	O
then	O	O
logging	O	O
facades	O	O
wouldn	O	O
'	O	O
t	O	O
exist	O	O
,	O	O
or	O	O
what	O	O
?	O	O
Rather	O	O
than	O	O
embracing	O	O
them	O	O
shouldn	O	O
'	O	O
t	O	O
we	O	O
question	O	O
why	O	O
they	O	O
were	O	O
necessary	O	O
in	O	O
the	O	O
first	O	O
place	O	O
?	O	O
(	O	O
and	O	O
see	O	O
if	O	O
those	O	O
reasons	O	O
still	O	O
exist	O	O
)	O	O
Ok	O	O
,	O	O
my	O	O
research	O	O
so	O	O
far	O	O
has	O	O
led	O	O
to	O	O
a	O	O
couple	O	O
of	O	O
things	O	O
that	O	O
I	O	O
can	O	O
see	O	O
may	O	O
be	O	O
real	O	O
issues	O	O
with	O	O
JUL	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
Performance	O	O
.	O	O
Some	O	O
say	O	O
that	O	O
performance	O	O
in	O	O
SLF4J	B-api_mention	O
is	O	O
superior	O	O
to	O	O
the	O	O
rest	O	O
.	O	O
This	O	O
seems	O	O
to	O	O
me	O	O
to	O	O
be	O	O
a	O	O
case	O	O
of	O	O
premature	O	O
optimization	O	O
.	O	O
If	O	O
you	O	O
need	O	O
to	O	O
log	O	O
hundreds	O	O
of	O	O
megabytes	O	O
per	O	O
second	O	O
then	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
you	O	O
are	O	O
on	O	O
the	O	O
right	O	O
path	O	O
anyway	O	O
.	O	O
JUL	B-api_mention	O
has	O	O
also	O	O
evolved	O	O
and	O	O
the	O	O
tests	O	O
you	O	O
did	O	O
on	O	O
Java	O	O
1	O	O
.	O	O
4	O	O
may	O	O
no	O	O
longer	O	O
be	O	O
true	O	O
.	O	O
You	O	O
can	O	O
read	O	O
about	O	O
it	O	O
here	O	O
and	O	O
this	O	O
fix	O	O
has	O	O
made	O	O
it	O	O
into	O	O
Java	O	O
7	O	O
.	O	O
Many	O	O
also	O	O
talk	O	O
about	O	O
the	O	O
overhead	O	O
of	O	O
string	O	O
concatenation	O	O
in	O	O
logging	O	O
methods	O	O
.	O	O
However	O	O
template	O	O
based	O	O
logging	O	O
avoids	O	O
this	O	O
cost	O	O
and	O	O
it	O	O
exist	O	O
also	O	O
in	O	O
JUL	B-api_mention	B-api_mention
.	O	O
Personally	O	O
I	O	O
never	O	O
really	O	O
write	O	O
template	O	O
based	O	O
logging	O	O
.	O	O
Too	O	O
lazy	O	O
for	O	O
that	O	O
.	O	O
For	O	O
example	O	O
if	O	O
I	O	O
do	O	O
this	O	O
with	O	O
JUL	B-api_mention	B-api_mention
:	O	I-api_mention
log	B-api_mention	I-api_mention
.	I-api_mention	I-api_mention
finest	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
;	O	O
my	O	O
IDE	O	O
will	O	O
warn	O	O
me	O	O
and	O	O
ask	O	O
permission	O	O
that	O	O
it	O	O
should	O	O
change	O	O
it	O	O
to	O	O
:	O	O
log	B-api_mention	O
.	I-api_mention	B-api_mention
log	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
.	O	O
which	O	O
I	O	O
will	O	O
of	O	O
course	O	O
accept	O	O
.	O	O
Permission	O	O
granted	O	O
!	O	O
Thank	O	O
you	O	O
for	O	O
your	O	O
help	O	O
.	O	O
So	O	O
I	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
write	O	O
such	O	O
statements	O	O
myself	O	O
,	O	O
that	O	O
is	O	O
done	O	O
by	O	O
the	O	O
IDE	O	O
.	O	O
In	O	O
conclusion	O	O
on	O	O
the	O	O
issue	O	O
of	O	O
performance	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
found	O	O
anything	O	O
that	O	O
would	O	O
suggest	O	O
that	O	O
JUL	B-api_mention	B-api_mention
'	O	O
s	O	O
performance	O	O
is	O	O
not	O	O
ok	O	O
compared	O	O
to	O	O
the	O	O
competition	O	O
.	O	O
#	O	O
li	O	O
Configuration	O	O
from	O	O
classpath	O	O
.	O	O
Out	O	O
-	O	O
of	O	O
-	O	O
the	O	O
-	O	O
box	O	O
JUL	B-api_mention	O
cannot	O	O
load	O	O
a	O	O
configuration	O	O
file	O	O
from	O	O
the	O	O
classpath	O	O
.	O	O
It	O	O
is	O	O
a	O	O
few	O	O
lines	O	O
of	O	O
code	O	O
to	O	O
make	O	O
it	O	O
do	O	O
so	O	O
.	O	O
I	O	O
can	O	O
see	O	O
why	O	O
this	O	O
may	O	O
be	O	O
annoying	O	O
but	O	O
the	O	O
solution	O	O
is	O	O
short	O	O
and	O	O
simple	O	O
.	O	O
#	O	O
li	O	O
Availability	O	O
of	O	O
output	O	O
handlers	O	O
.	O	O
JUL	B-api_mention	O
comes	O	O
with	O	O
5	O	O
output	O	O
handlers	O	O
out	O	O
-	O	O
of	O	O
-	O	O
the	O	O
-	O	O
box	O	O
:	O	O
console	O	O
,	O	O
file	O	O
stream	O	O
,	O	O
socket	O	O
and	O	O
memory	O	O
.	O	O
These	O	O
can	O	O
be	O	O
extended	O	O
or	O	O
new	O	O
ones	O	O
can	O	O
be	O	O
written	O	O
.	O	O
This	O	O
may	O	O
for	O	O
example	O	O
be	O	O
writing	O	O
to	O	O
UNIX	O	O
/	O	O
Linux	O	O
Syslog	O	O
and	O	O
Windows	O	O
Event	O	O
Log	O	O
.	O	O
I	O	O
have	O	O
personally	O	O
never	O	O
had	O	O
this	O	O
requirement	O	O
nor	O	O
have	O	O
I	O	O
seen	O	O
it	O	O
used	O	O
but	O	O
I	O	O
can	O	O
certainly	O	O
relate	O	O
to	O	O
why	O	O
it	O	O
may	O	O
be	O	O
a	O	O
useful	O	O
feature	O	O
.	O	O
Logback	B-api_mention	O
comes	O	O
with	O	O
an	O	O
appender	O	O
for	O	O
Syslog	O	O
for	O	O
example	O	O
.	O	O
Still	O	O
I	O	O
would	O	O
argue	O	O
that	O	O
#	O	O
li	O	O
99	O	O
.	O	O
5	O	O
%	O	O
of	O	O
the	O	O
needs	O	O
for	O	O
output	O	O
destinations	O	O
are	O	O
covered	O	O
by	O	O
what	O	O
is	O	O
in	O	O
JUL	B-api_mention	O
out	O	O
-	O	O
of	O	O
-	O	O
the	O	O
-	O	O
box	O	O
.	O	O
#	O	O
li	O	O
Special	O	O
needs	O	O
could	O	O
be	O	O
catered	O	O
for	O	O
by	O	O
custom	O	O
handlers	O	O
on	O	O
top	O	O
of	O	O
JUL	B-api_mention	B-api_mention
rather	O	O
than	O	O
on	O	O
top	O	O
of	O	O
something	O	O
else	O	O
.	O	O
There	O	O
'	O	O
s	O	O
nothing	O	O
to	O	O
me	O	O
that	O	O
suggests	O	O
that	O	O
it	O	O
takes	O	O
more	O	O
time	O	O
to	O	O
write	O	O
a	O	O
Syslog	O	O
output	O	O
handler	O	O
for	O	O
JUL	B-api_mention	O
than	O	O
it	O	O
does	O	O
for	O	O
another	O	O
logging	O	O
framework	O	O
.	O	O
I	O	O
'	O	O
m	O	O
really	O	O
concerned	O	O
that	O	O
there	O	O
'	O	O
s	O	O
something	O	O
I	O	O
'	O	O
ve	O	O
overlooked	O	O
.	O	O
The	O	O
use	O	O
of	O	O
logging	O	O
facades	O	O
and	O	O
logging	O	O
implementations	O	O
other	O	O
than	O	O
JUL	B-api_mention	B-api_mention
is	O	O
so	O	O
widespread	O	O
that	O	O
I	O	O
have	O	O
to	O	O
come	O	O
to	O	O
the	O	O
conclusion	O	O
that	O	O
it	O	O
'	O	O
s	O	O
me	O	O
who	O	O
just	O	O
doesn	O	O
'	O	O
t	O	O
understand	O	O
.	O	O
That	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
the	O	O
first	O	O
time	O	O
,	O	O
I	O	O
'	O	O
m	O	O
afraid	O	O
.	O	O
:	O	O
-	O	O
)	O	O
So	O	O
what	O	O
should	O	O
I	O	O
do	O	O
with	O	O
my	O	O
API	O	O
?	O	O
I	O	O
want	O	O
it	O	O
to	O	O
become	O	O
successful	O	O
.	O	O
I	O	O
can	O	O
of	O	O
course	O	O
just	O	O
"	O	O
go	O	O
with	O	O
the	O	O
flow	O	O
"	O	O
and	O	O
implement	O	O
SLF4J	B-api_mention	O
(	O	O
which	O	O
seems	O	O
the	O	O
most	O	O
popular	O	O
these	O	O
days	O	O
)	O	O
but	O	O
for	O	O
my	O	O
own	O	O
sake	O	O
I	O	O
still	O	O
need	O	O
to	O	O
understand	O	O
exactly	O	O
what	O	O
is	O	O
wrong	O	O
with	O	O
the	O	O
JUL	B-api_mention	O
of	O	O
today	O	O
that	O	O
warrants	O	O
all	O	O
the	O	O
fuzz	O	O
?	O	O
Will	O	O
I	O	O
sabotage	O	O
myself	O	O
by	O	O
choosing	O	O
JUL	B-api_mention	B-api_mention
for	O	O
my	O	O
library	O	O
?	O	O
Testing	O	O
performance	O	O
(	O	O
section	O	O
added	O	O
by	O	O
nolan600	O	O
on	O	O
07	O	O
-	O	O
JUL	O	O
-	O	O
2012	O	O
)	O	O
There	O	O
'	O	O
s	O	O
a	O	O
reference	O	O
below	O	O
from	O	O
Ceki	O	O
about	O	O
SLF4J	B-api_mention	O
'	O	O
s	O	O
parametrization	O	O
being	O	O
10	O	O
times	O	O
or	O	O
more	O	O
faster	O	O
than	O	O
JUL	B-api_mention	O
'	O	O
s	O	O
.	O	O
So	O	O
I	O	O
'	O	O
ve	O	O
started	O	O
doing	O	O
some	O	O
simple	O	O
tests	O	O
.	O	O
At	O	O
first	O	O
glance	O	O
the	O	O
claim	O	O
is	O	O
certainly	O	O
correct	O	O
.	O	O
Here	O	O
are	O	O
the	O	O
preliminary	O	O
results	O	O
(	O	O
but	O	O
read	O	O
on	O	O
!	O	O
)	O	O
:	O	O
#	O	O
li	O	O
Execution	O	O
time	O	O
SLF4J	B-api_mention	O
,	O	O
backend	O	O
Logback	O	O
:	O	O
1515	O	O
#	O	O
li	O	O
Execution	O	O
time	O	O
SLF4J	B-api_mention	O
,	O	O
backend	O	O
JUL	B-api_mention	O
:	O	O
12938	O	O
#	O	O
li	O	O
Execution	O	O
time	O	O
JUL	B-api_mention	O
:	O	O
16911	O	O
The	O	O
numbers	O	O
above	O	O
are	O	O
msecs	O	O
so	O	O
less	O	O
is	O	O
better	O	O
.	O	O
So	O	O
10	O	O
times	O	O
performance	O	O
difference	O	O
is	O	O
by	O	O
first	O	O
actually	O	O
pretty	O	O
close	O	O
.	O	O
My	O	O
initial	O	O
reaction	O	O
:	O	O
That	O	O
is	O	O
a	O	O
lot	O	O
!	O	O
Here	O	O
is	O	O
the	O	O
core	O	O
of	O	O
the	O	O
test	O	O
.	O	O
As	O	O
can	O	O
be	O	O
seen	O	O
an	O	O
integer	O	O
and	O	O
a	O	O
string	O	O
is	O	O
construted	O	O
in	O	O
a	O	O
loop	O	O
which	O	O
is	O	O
then	O	O
used	O	O
in	O	O
the	O	O
log	O	O
statement	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
I	O	O
wanted	O	O
the	O	O
log	O	O
statement	O	O
to	O	O
have	O	O
both	O	O
a	O	O
primitive	O	O
data	O	O
type	O	O
(	O	O
in	O	O
this	O	O
case	O	O
an	O	O
int	O	O
)	O	O
and	O	O
a	O	O
more	O	O
complex	O	O
data	O	O
type	O	O
(	O	O
in	O	O
this	O	O
case	O	O
a	O	O
String	B-api_mention	B-api_mention
)	O	O
.	O	O
Not	O	O
sure	O	O
it	O	O
matters	O	O
but	O	O
there	O	O
you	O	O
have	O	O
it	O	O
.	O	O
)	O	O
The	O	O
log	O	O
statement	O	O
for	O	O
SLF4J	B-api_mention	O
:	O	O
logger	B-api_mention	O
.	I-api_mention	B-api_mention
info	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
log	O	O
statement	O	O
for	O	O
JUL	B-api_mention	B-api_mention
:	O	O
logger	B-api_mention	O
.	I-api_mention	B-api_mention
log	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
JVM	O	O
was	O	O
'	O	O
warmed	O	O
up	O	O
'	O	O
with	O	O
the	O	O
same	O	O
test	O	O
executed	O	O
once	O	O
before	O	O
the	O	O
actual	O	O
measurement	O	O
was	O	O
done	O	O
.	O	O
Java	O	O
1	O	O
.	O	O
7	O	O
.	O	O
03	O	O
was	O	O
used	O	O
on	O	O
Windows	O	O
7	O	O
.	O	O
Latest	O	O
versions	O	O
of	O	O
SLF4J	B-api_mention	O
(	O	O
v1	O	O
.	O	O
6	O	O
.	O	O
6	O	O
)	O	O
and	O	O
Logback	B-api_mention	B-api_mention
(	O	O
v1	O	O
.	O	O
0	O	O
.	O	O
6	O	O
)	O	O
was	O	O
used	O	O
.	O	O
Stdout	O	O
and	O	O
stderr	O	O
was	O	O
redirected	O	O
to	O	O
null	O	O
device	O	O
.	O	O
However	O	O
,	O	O
careful	O	O
now	O	O
,	O	O
it	O	O
turns	O	O
out	O	O
JUL	O	B-api_mention
is	O	O
spending	O	O
most	O	O
of	O	O
its	O	O
time	O	O
in	O	O
getSourceClassName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
because	O	O
JUL	B-api_mention	B-api_mention
by	O	O
default	O	O
prints	O	O
the	O	O
source	O	O
class	O	O
name	O	O
in	O	O
the	O	O
output	O	O
,	O	O
while	O	O
Logback	B-api_mention	B-api_mention
doesn	O	O
'	O	O
t	O	O
.	O	O
So	O	O
we	O	O
are	O	O
comparing	O	O
apples	O	O
and	O	O
oranges	O	O
.	O	O
I	O	O
have	O	O
to	O	O
do	O	O
the	O	O
test	O	O
again	O	O
and	O	O
configure	O	O
the	O	O
logging	O	O
implementations	O	O
in	O	O
a	O	O
similar	O	O
manner	O	O
so	O	O
that	O	O
they	O	O
actually	O	O
output	O	O
the	O	O
same	O	O
stuff	O	O
.	O	O
I	O	O
do	O	O
however	O	O
suspect	O	O
that	O	O
SLF4J	B-api_mention	O
+	O	O
Logback	B-api_mention	O
will	O	O
still	O	O
come	O	O
out	O	O
on	O	O
top	O	O
but	O	O
far	O	O
from	O	O
the	O	O
initial	O	O
numbers	O	O
as	O	O
given	O	O
above	O	O
.	O	O
Stay	O	O
tuned	O	O
.	O	O
Btw	O	O
:	O	O
The	O	O
test	O	O
was	O	O
first	O	O
time	O	O
I	O	O
'	O	O
ve	O	O
actually	O	O
worked	O	O
with	O	O
SLF4J	B-api_mention	O
or	O	O
Logback	B-api_mention	B-api_mention
.	O	O
A	O	O
pleasant	O	O
experience	O	O
.	O	O
JUL	B-api_mention	O
is	O	O
certainly	O	O
a	O	O
lot	O	O
less	O	O
welcoming	O	O
when	O	O
you	O	O
are	O	O
starting	O	O
out	O	O
.	O	O
Testing	O	O
performance	O	O
(	O	O
part	O	O
2	O	O
)	O	O
(	O	O
section	O	O
added	O	O
by	O	O
nolan600	O	O
on	O	O
08	O	O
-	O	O
JUL	O	O
-	O	O
2012	O	O
)	O	O
As	O	O
it	O	O
turns	O	O
out	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
really	O	O
matter	O	O
for	O	O
performance	O	O
how	O	O
you	O	O
configure	O	O
your	O	O
pattern	O	O
in	O	O
JUL	B-api_mention	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
whether	O	O
or	O	O
not	O	O
it	O	O
includes	O	O
the	O	O
source	O	O
name	O	O
or	O	O
not	O	O
.	O	O
I	O	O
tried	O	O
with	O	O
a	O	O
very	O	O
simple	O	O
pattern	O	O
:	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
logging	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
SimpleFormatter	I-api_mention	I-api_mention
.	I-api_mention	O
format	I-api_mention	O
=	O	O
StringLiteral	O	O
and	O	O
that	O	O
did	O	O
not	O	O
change	O	O
the	O	O
above	O	O
timings	O	O
at	O	O
all	O	O
.	O	O
My	O	O
profiler	O	O
revealed	O	O
that	O	O
the	O	O
logger	O	O
still	O	O
spent	O	O
a	O	O
lot	O	O
of	O	O
time	O	O
in	O	O
calls	O	O
to	O	O
getSourceClassName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
even	O	O
if	O	O
this	O	O
was	O	O
not	O	O
part	O	O
of	O	O
my	O	O
pattern	O	O
.	O	O
The	O	O
pattern	O	O
doesn	O	O
'	O	O
t	O	O
matter	O	O
.	O	O
I	O	O
'	O	O
m	O	O
therefore	O	O
concluding	O	O
on	O	O
the	O	O
issue	O	O
of	O	O
performance	O	O
that	O	O
at	O	O
least	O	O
for	O	O
the	O	O
tested	O	O
template	O	O
based	O	O
log	O	O
statement	O	O
there	O	O
seems	O	O
to	O	O
be	O	O
roughly	O	O
a	O	O
factor	O	O
of	O	O
10	O	O
in	O	O
real	O	O
performance	O	O
difference	O	O
between	O	O
JUL	B-api_mention	B-api_mention
(	O	I-api_mention
slow	O	I-api_mention
)	O	I-api_mention
and	O	O
SLF4J	B-api_mention	O
+	O	O
Logback	B-api_mention	O
(	O	O
quick	O	O
)	O	O
.	O	O
Just	O	O
like	O	O
Ceki	O	O
said	O	O
.	O	O
I	O	O
can	O	O
also	O	O
see	O	O
another	O	O
thing	O	O
namely	O	O
that	O	O
SLF4J	B-api_mention	O
'	O	O
s	O	O
getLogger	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
is	O	O
a	O	O
lot	O	O
more	O	O
expensive	O	O
than	O	O
JUL	B-api_mention	O
'	O	O
s	O	O
ditto	O	O
.	O	O
(	O	O
95	O	O
ms	O	O
vs	O	O
0	O	O
.	O	O
3	O	O
ms	O	O
if	O	O
my	O	O
profiler	O	O
is	O	O
accurate	O	O
)	O	O
.	O	O
This	O	O
makes	O	O
sense	O	O
.	O	O
SLF4J	B-api_mention	O
has	O	O
to	O	O
do	O	O
some	O	O
time	O	O
on	O	O
the	O	O
binding	O	O
of	O	O
the	O	O
underlying	O	O
logging	O	O
implementation	O	O
.	O	O
This	O	O
doesn	O	O
'	O	O
t	O	O
scare	O	O
me	O	O
.	O	O
These	O	O
calls	O	O
should	O	O
be	O	O
somewhat	O	O
rare	O	O
in	O	O
the	O	O
lifetime	O	O
of	O	O
an	O	O
application	O	O
.	O	O
The	O	O
fastness	O	O
should	O	O
be	O	O
in	O	O
the	O	O
actual	O	O
log	O	O
calls	O	O
.	O	O
Final	O	O
conclusion	O	O
(	O	O
section	O	O
added	O	O
by	O	O
nolan600	O	O
on	O	O
08	O	O
-	O	O
JUL	O	O
-	O	O
2012	O	O
)	O	O
Thank	O	O
you	O	O
for	O	O
all	O	O
your	O	O
answers	O	O
.	O	O
Contrary	O	O
to	O	O
what	O	O
I	O	O
initially	O	O
thought	O	O
I	O	O
'	O	O
ve	O	O
ended	O	O
up	O	O
deciding	O	O
to	O	O
use	O	O
SLF4J	B-api_mention	O
for	O	O
my	O	O
API	O	O
.	O	O
This	O	O
is	O	O
based	O	O
on	O	O
a	O	O
number	O	O
of	O	O
things	O	O
and	O	O
your	O	O
input	O	O
:	O	O
#	O	O
li	O	O
It	O	O
gives	O	O
flexibility	O	O
to	O	O
choose	O	O
log	O	O
implementation	O	O
at	O	O
deployment	O	O
time	O	O
.	O	O
#	O	O
li	O	O
Issues	O	O
with	O	O
lack	O	O
of	O	O
flexibility	O	O
of	O	O
JUL	B-api_mention	B-api_mention
'	O	O
s	O	O
configuration	O	O
when	O	O
run	O	O
inside	O	O
an	O	O
application	O	O
server	O	O
.	O	O
#	O	O
li	O	O
SLF4J	B-api_mention	O
is	O	O
certainly	O	O
a	O	O
lot	O	O
faster	O	O
as	O	O
detailed	O	O
above	O	O
in	O	O
particular	O	O
if	O	O
you	O	O
couple	O	O
it	O	O
with	O	O
Logback	B-api_mention	B-api_mention
.	O	O
Even	O	O
if	O	O
this	O	O
was	O	O
just	O	O
a	O	O
rough	O	O
test	O	O
I	O	O
have	O	O
reason	O	O
to	O	O
believe	O	O
that	O	O
a	O	O
lot	O	O
more	O	O
effort	O	O
has	O	O
gone	O	O
into	O	O
optimization	O	O
on	O	O
SLF4J	B-api_mention	O
+	O	O
Logback	B-api_mention	O
than	O	O
on	O	O
JUL	B-api_mention	B-api_mention
.	O	O
#	O	O
li	O	O
Documentation	O	O
.	O	O
The	O	O
documentation	O	O
for	O	O
SLF4J	B-api_mention	O
is	O	O
simply	O	O
a	O	O
lot	O	O
more	O	O
comprehensive	O	O
and	O	O
precise	O	O
.	O	O
#	O	O
li	O	O
Pattern	O	B-api_mention
flexibility	O	O
.	O	O
As	O	O
I	O	O
did	O	O
the	O	O
tests	O	O
I	O	O
set	O	O
out	O	O
to	O	O
have	O	O
JUL	B-api_mention	O
mimic	O	O
the	O	O
default	O	O
pattern	O	O
from	O	O
Logback	B-api_mention	B-api_mention
.	O	O
This	O	O
pattern	O	O
includes	O	O
the	O	O
name	O	O
of	O	O
the	O	O
thread	O	O
.	O	O
It	O	O
turns	O	O
out	O	O
JUL	B-api_mention	O
cannot	O	O
do	O	O
this	O	O
out	O	O
of	O	O
the	O	O
box	O	O
.	O	O
Ok	O	O
,	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
missed	O	O
it	O	O
until	O	O
now	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
it	O	O
is	O	O
a	O	O
thing	O	O
that	O	O
should	O	O
be	O	O
missing	O	O
from	O	O
a	O	O
log	O	O
framework	O	O
.	O	O
Period	O	O
!	O	O
#	O	O
li	O	O
Most	O	O
(	O	O
or	O	O
many	O	O
)	O	O
Java	O	O
projects	O	O
today	O	O
use	O	O
Maven	O	O
so	O	O
adding	O	O
a	O	O
dependency	O	O
is	O	O
not	O	O
that	O	O
big	O	O
a	O	O
thing	O	O
especially	O	O
if	O	O
that	O	O
dependency	O	O
is	O	O
rather	O	O
stable	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
doesn	O	O
'	O	O
t	O	O
constantly	O	O
change	O	O
its	O	O
API	O	O
.	O	O
This	O	O
seems	O	O
to	O	O
be	O	O
true	O	O
for	O	O
SLF4J	B-api_mention	O
.	O	O
Also	O	O
the	O	O
SLF4J	B-api_mention	O
jar	O	O
and	O	O
friends	O	O
are	O	O
small	O	O
in	O	O
size	O	O
.	O	O
So	O	O
the	O	O
strange	O	O
thing	O	O
that	O	O
happened	O	O
was	O	O
that	O	O
I	O	O
actually	O	O
got	O	O
quite	O	O
upset	O	O
with	O	O
JUL	B-api_mention	O
after	O	O
having	O	O
worked	O	O
a	O	O
bit	O	O
with	O	O
SLF4J	B-api_mention	O
.	O	O
I	O	O
still	O	O
regret	O	O
that	O	O
it	O	O
has	O	O
to	O	O
be	O	O
this	O	O
way	O	O
with	O	O
JUL	B-api_mention	B-api_mention
.	O	I-api_mention
JUL	B-api_mention	I-api_mention
is	O	O
far	O	O
from	O	O
perfect	O	O
but	O	O
kind	O	O
of	O	O
does	O	O
the	O	O
job	O	O
.	O	O
Just	O	O
not	O	O
quite	O	O
well	O	O
enough	O	O
.	O	O
The	O	O
same	O	O
can	O	O
be	O	O
said	O	O
about	O	O
Properties	O	O
as	O	O
an	O	O
example	O	O
but	O	O
we	O	O
do	O	O
not	O	O
think	O	O
about	O	O
abstracting	O	O
that	O	O
so	O	O
people	O	O
can	O	O
plug	O	O
in	O	O
their	O	O
own	O	O
configuration	O	O
library	O	O
and	O	O
what	O	O
have	O	O
you	O	O
.	O	O
I	O	O
think	O	O
the	O	O
reason	O	O
is	O	O
that	O	O
Properties	O	O
comes	O	O
in	O	O
just	O	O
above	O	O
the	O	O
bar	O	O
while	O	O
the	O	O
opposite	O	O
is	O	O
true	O	O
for	O	O
JUL	B-api_mention	O
of	O	O
today	O	O
.	O	O
.	O	O
.	O	O
and	O	O
in	O	O
the	O	O
past	O	O
it	O	O
came	O	O
in	O	O
at	O	O
zero	O	O
because	O	O
it	O	O
didn	O	O
'	O	O
t	O	O
exist	O	O
.	O	O
Question	O	O
-	O	O
20945049	O	O
We	O	O
all	O	O
know	O	O
that	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
in	O	O
Java	O	O
,	O	O
but	O	O
check	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Why	O	O
does	O	O
this	O	O
program	O	O
operate	O	O
like	O	O
this	O	O
?	O	O
And	O	O
why	O	O
is	O	O
the	O	O
value	O	O
of	O	O
s1	O	O
and	O	O
s2	O	O
changed	O	O
,	O	O
but	O	O
not	O	O
s3	O	O
?	O	O
Question	O	O
-	O	O
6667243	O	O
What	O	O
is	O	O
the	O	O
best	O	O
way	O	O
to	O	O
use	O	O
the	O	O
values	O	O
stored	O	O
in	O	O
an	O	O
Enum	B-api_mention	B-api_mention
as	O	O
String	B-api_mention	B-api_mention
literals	O	O
?	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
later	O	O
I	O	O
could	O	O
use	O	O
Mode	O	O
.	O	O
mode1	O	O
to	O	O
return	O	O
its	O	O
string	O	O
representation	O	O
as	O	O
mode1	O	O
.	O	O
Without	O	O
having	O	O
to	O	O
keep	O	O
calling	O	O
Mode	O	B-api_mention
.	O	I-api_mention
model	O	I-api_mention
.	B-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
6470651	O	O
,	O	O
answer	O	O
-	O	O
18544736	O	O
Threads	O	O
are	O	O
not	O	O
collected	O	O
until	O	O
they	O	O
terminate	O	O
.	O	O
They	O	O
serve	O	O
as	O	O
roots	O	O
of	O	O
garbage	O	O
collection	O	O
.	O	O
They	O	O
are	O	O
one	O	O
of	O	O
the	O	O
few	O	O
objects	O	O
that	O	O
won	O	O
'	O	O
t	O	O
be	O	O
reclaimed	O	O
simply	O	O
by	O	O
forgetting	O	O
about	O	O
them	O	O
or	O	O
clearing	O	O
references	O	O
to	O	O
them	O	O
.	O	O
Consider	O	O
:	O	O
the	O	O
basic	O	O
pattern	O	O
to	O	O
terminate	O	O
a	O	O
worker	O	O
thread	O	O
is	O	O
to	O	O
set	O	O
some	O	O
condition	O	O
variable	O	O
seen	O	O
by	O	O
the	O	O
thread	O	O
.	O	O
The	O	O
thread	O	O
can	O	O
check	O	O
the	O	O
variable	O	O
periodically	O	O
and	O	O
use	O	O
that	O	O
as	O	O
a	O	O
signal	O	O
to	O	O
terminate	O	O
.	O	O
If	O	O
the	O	O
variable	O	O
is	O	O
not	O	O
declared	O	O
volatile	O	O
,	O	O
then	O	O
the	O	O
change	O	O
to	O	O
the	O	O
variable	O	O
might	O	O
not	O	O
be	O	O
seen	O	O
by	O	O
the	O	O
thread	O	O
,	O	O
so	O	O
it	O	O
won	O	O
'	O	O
t	O	O
know	O	O
to	O	O
terminate	O	O
.	O	O
Or	O	O
imagine	O	O
if	O	O
some	O	O
threads	O	O
want	O	O
to	O	O
update	O	O
a	O	O
shared	O	O
object	O	O
,	O	O
but	O	O
deadlock	O	O
while	O	O
trying	O	O
to	O	O
lock	O	O
on	O	O
it	O	O
.	O	O
If	O	O
you	O	O
only	O	O
have	O	O
a	O	O
handful	O	O
of	O	O
threads	O	O
these	O	O
bugs	O	O
will	O	O
probably	O	O
be	O	O
obvious	O	O
because	O	O
your	O	O
program	O	O
will	O	O
stop	O	O
working	O	O
properly	O	O
.	O	O
If	O	O
you	O	O
have	O	O
a	O	O
thread	O	O
pool	O	O
that	O	O
creates	O	O
more	O	O
threads	O	O
as	O	O
needed	O	O
,	O	O
then	O	O
the	O	O
obsolete	O	O
/	O	O
stuck	O	O
threads	O	O
might	O	O
not	O	O
be	O	O
noticed	O	O
,	O	O
and	O	O
will	O	O
accumulate	O	O
indefinitely	O	O
,	O	O
causing	O	O
a	O	O
memory	O	O
leak	O	O
.	O	O
Threads	O	O
are	O	O
likely	O	O
to	O	O
use	O	O
other	O	O
data	O	O
in	O	O
your	O	O
application	O	O
,	O	O
so	O	O
will	O	O
also	O	O
prevent	O	O
anything	O	O
they	O	O
directly	O	O
reference	O	O
from	O	O
ever	O	O
being	O	O
collected	O	O
.	O	O
As	O	O
a	O	O
toy	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Call	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
gc	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
all	O	O
you	O	O
like	O	O
,	O	O
but	O	O
the	O	O
object	O	O
passed	O	O
to	O	O
leakMe	O	O
will	O	O
never	O	O
die	O	O
.	O	O
(	O	O
*	O	O
edited	O	O
*	O	O
)	O	O
Question	O	O
-	O	O
12317668	O	O
According	O	O
to	O	O
the	O	O
JLS	O	O
,	O	O
an	O	O
int	O	O
array	O	O
should	O	O
be	O	O
filled	O	O
by	O	O
zeros	O	O
just	O	O
after	O	O
initialization	O	O
.	O	O
However	O	O
,	O	O
I	O	O
am	O	O
faced	O	O
with	O	O
a	O	O
situation	O	O
where	O	O
it	O	O
is	O	O
not	O	O
.	O	O
Such	O	O
a	O	O
behavior	O	O
occurs	O	O
first	O	O
in	O	O
JDK	O	O
7u4	O	O
and	O	O
also	O	O
occurs	O	O
in	O	O
all	O	O
later	O	O
updates	O	O
(	O	O
I	O	O
use	O	O
64	O	O
-	O	O
bit	O	O
implementation	O	O
)	O	O
.	O	O
The	O	O
following	O	O
code	O	O
throws	O	O
exception	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
exception	O	O
occurs	O	O
after	O	O
the	O	O
JVM	O	O
performs	O	O
compilation	O	O
of	O	O
the	O	O
code	O	O
block	O	O
and	O	O
does	O	O
not	O	O
arise	O	O
with	O	O
-	O	O
Xint	O	O
flag	O	O
.	O	O
Additionally	O	O
,	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
statement	O	O
(	O	O
as	O	O
all	O	O
other	O	O
statements	O	O
in	O	O
this	O	O
code	O	O
)	O	O
is	O	O
necessary	O	O
,	O	O
and	O	O
the	O	O
exception	O	O
does	O	O
not	O	O
occurs	O	O
if	O	O
it	O	O
is	O	O
absent	O	O
.	O	O
It	O	O
is	O	O
clear	O	O
that	O	O
this	O	O
possible	O	O
bug	O	O
is	O	O
bounded	O	O
with	O	O
some	O	O
JVM	O	O
optimization	O	O
.	O	O
Any	O	O
ideas	O	O
for	O	O
the	O	O
reason	O	O
of	O	O
such	O	O
a	O	O
behavior	O	O
?	O	O
Update	O	O
:	O	O
I	O	O
see	O	O
this	O	O
behavior	O	O
on	O	O
HotSpot	O	O
64	O	O
-	O	O
bit	O	O
server	O	O
VM	O	O
,	O	O
Java	O	O
version	O	O
from	O	O
1	O	O
.	O	O
7	O	O
.	O	O
0	O	O
_	O	O
04	O	O
to	O	O
1	O	O
.	O	O
7	O	O
.	O	O
0	O	O
_	O	O
10	O	O
on	O	O
Gentoo	O	O
Linux	O	O
,	O	O
Debian	O	O
Linux	O	O
(	O	O
both	O	O
kernel	O	O
3	O	O
.	O	O
0	O	O
version	O	O
)	O	O
and	O	O
MacOS	O	O
Lion	O	O
.	O	O
This	O	O
error	O	O
can	O	O
always	O	O
be	O	O
reproduced	O	O
with	O	O
the	O	O
code	O	O
above	O	O
.	O	O
I	O	O
did	O	O
not	O	O
test	O	O
this	O	O
problem	O	O
with	O	O
a	O	O
32	O	O
-	O	O
bit	O	O
JDK	O	O
or	O	O
on	O	O
Windows	O	O
.	O	O
I	O	O
already	O	O
sent	O	O
a	O	O
bug	O	O
report	O	O
to	O	O
the	O	O
Oracle	O	O
(	O	O
bug	O	O
id	O	O
7196857	O	O
)	O	O
and	O	O
it	O	O
will	O	O
appear	O	O
in	O	O
public	O	O
Oracle	O	O
bug	O	O
database	O	O
in	O	O
few	O	O
days	O	O
.	O	O
Update	O	O
:	O	O
Oracle	O	O
published	O	O
this	O	O
bug	O	O
at	O	O
their	O	O
public	O	O
bug	O	O
database	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
7348711	O	O
Which	O	O
of	O	O
the	O	O
following	O	O
is	O	O
the	O	O
best	O	O
and	O	O
most	O	O
portable	O	O
way	O	O
to	O	O
get	O	O
the	O	O
hostname	O	O
of	O	O
the	O	O
current	O	O
computer	O	O
in	O	O
Java	O	O
?	O	O
Runtime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getRuntime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
exec	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
vs	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
5439529	O	O
,	O	O
answer	O	O
-	O	O
9991624	O	O
You	O	O
can	O	O
use	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
catch	O	O
the	O	O
NumberFormatException	B-api_mention	B-api_mention
if	O	O
the	O	O
string	O	O
is	O	O
not	O	O
a	O	O
valid	O	O
integer	O	O
,	O	O
in	O	O
the	O	O
following	O	O
fashion	O	O
(	O	O
as	O	O
pointed	O	O
out	O	O
by	O	O
all	O	O
answers	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
note	O	O
here	O	O
that	O	O
if	O	O
the	O	O
evaluated	O	O
integer	O	O
overflows	O	O
,	O	O
the	O	O
same	O	O
exception	O	O
will	O	O
be	O	O
thrown	O	O
.	O	O
Your	O	O
purpose	O	O
was	O	O
to	O	O
find	O	O
out	O	O
whether	O	O
or	O	O
not	O	O
,	O	O
it	O	O
was	O	O
a	O	O
valid	O	O
integer	O	O
.	O	O
So	O	O
its	O	O
safer	O	O
to	O	O
make	O	O
your	O	O
own	O	O
method	O	O
to	O	O
check	O	O
for	O	O
validity	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
22718744	O	O
,	O	O
answer	O	O
-	O	O
27477312	O	O
The	O	O
behavior	O	O
of	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	O	O
which	O	O
calls	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
)	O	I-api_mention
changes	O	O
between	O	O
Java	O	O
7	O	O
and	O	O
Java	O	O
8	O	O
.	O	O
Documentation	O	O
Comparing	O	O
between	O	O
the	O	O
documentation	O	O
of	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
in	O	O
Java	O	O
7	O	O
and	O	O
Java	O	O
8	O	O
,	O	O
we	O	O
observe	O	O
the	O	O
following	O	O
clause	O	O
being	O	O
added	O	O
:	O	O
#	O	O
blockquote	O	O
The	O	O
same	O	O
clause	O	O
is	O	O
also	O	O
added	O	O
to	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
in	O	O
Java	O	O
8	O	O
,	O	O
compared	O	O
to	O	O
Java	O	O
7	O	O
.	O	O
Reference	O	O
implementation	O	O
Let	O	O
us	O	O
compare	O	O
the	O	O
code	O	O
of	O	O
Pattern	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
of	O	O
the	O	O
reference	O	O
implemetation	O	O
in	O	O
Java	O	O
7	O	O
and	O	O
Java	O	O
8	O	O
.	O	O
The	O	O
code	O	O
is	O	O
retrieved	O	O
from	O	O
grepcode	O	O
,	O	O
for	O	O
version	O	O
7u40	O	O
-	O	O
b43	O	O
and	O	O
8	O	O
-	O	O
b132	O	O
.	O	O
Java	O	O
7	O	O
#	O	O
pre	O	O
Java	O	O
8	O	O
#	O	O
pre	O	O
The	O	O
addition	O	O
of	O	O
the	O	O
following	O	O
code	O	O
in	O	O
Java	O	O
8	O	O
excludes	O	O
the	O	O
zero	O	O
-	O	O
length	O	O
match	O	O
at	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
input	O	O
string	O	O
,	O	O
which	O	O
explains	O	O
the	O	O
behavior	O	O
above	O	O
.	O	O
#	O	O
pre	O	O
Maintaining	O	O
compatibility	O	O
Following	O	O
behavior	O	O
in	O	O
Java	O	O
8	O	O
and	O	O
above	O	O
To	O	O
make	O	O
split	B-api_mention	O
behaves	O	O
consistently	O	O
across	O	O
versions	O	O
and	O	O
compatible	O	O
with	O	O
the	O	O
behavior	O	O
in	O	O
Java	O	O
8	O	O
:	O	O
#	O	O
li	O	O
If	O	O
your	O	O
regex	O	O
can	O	O
match	O	O
zero	O	O
-	O	O
length	O	O
string	O	O
,	O	O
just	O	O
add	O	O
(	O	O
?	O	O
!	O	O
\	O	O
A	O	O
)	O	O
at	O	O
the	O	O
end	O	O
of	O	O
the	O	O
regex	O	O
and	O	O
wrap	O	O
the	O	O
original	O	O
regex	O	O
in	O	O
non	O	O
-	O	O
capturing	O	O
group	O	O
(	O	O
?	O	O
:	O	O
.	O	O
.	O	O
.	O	O
)	O	O
(	O	O
if	O	O
necessary	O	O
)	O	O
.	O	O
#	O	O
li	O	O
If	O	O
your	O	O
regex	O	O
can	O	O
'	O	O
t	O	O
match	O	O
zero	O	O
-	O	O
length	O	O
string	O	O
,	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
do	O	O
anything	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
the	O	O
regex	O	O
can	O	O
match	O	O
zero	O	O
-	O	O
length	O	O
string	O	O
or	O	O
not	O	O
,	O	O
do	O	O
both	O	O
the	O	O
actions	O	O
in	O	O
step	O	O
1	O	O
.	O	O
(	O	O
?	O	O
!	O	O
\	O	O
A	O	O
)	O	O
checks	O	O
that	O	O
the	O	O
string	O	O
does	O	O
not	O	O
end	O	O
at	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
string	O	O
,	O	O
which	O	O
implies	O	O
that	O	O
the	O	O
match	O	O
is	O	O
an	O	O
empty	O	O
match	O	O
at	O	O
the	O	O
beginning	O	O
of	O	O
the	O	O
string	O	O
.	O	O
Following	O	O
behavior	O	O
in	O	O
Java	O	O
7	O	O
and	O	O
prior	O	O
There	O	O
is	O	O
no	O	O
general	O	O
solution	O	O
to	O	O
make	O	O
split	B-api_mention	O
backward	O	O
-	O	O
compatible	O	O
with	O	O
Java	O	O
7	O	O
and	O	O
prior	O	O
,	O	O
short	O	O
of	O	O
replacing	O	O
all	O	O
instance	O	O
of	O	O
split	B-api_mention	O
to	O	O
point	O	O
to	O	O
your	O	O
own	O	O
custom	O	O
implementation	O	O
.	O	O
Question	O	O
-	O	O
19418427	O	O
,	O	O
answer	O	O
-	O	O
19418548	O	O
As	O	O
per	O	O
my	O	O
research	O	O
,	O	O
all	O	O
the	O	O
final	O	O
String	B-api_mention	B-api_mention
are	O	O
interned	O	O
in	O	O
Java	O	O
.	O	O
From	O	O
one	O	O
of	O	O
the	O	O
blog	O	O
post	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
it	O	O
means	O	O
if	O	O
you	O	O
call	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
can	O	O
compare	O	O
two	O	O
strings	O	O
using	O	O
=	O	O
=	O	O
operator	O	O
.	O	O
But	O	O
here	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
not	O	O
necessary	O	O
because	O	O
in	O	O
Java	O	O
final	O	O
String	B-api_mention	B-api_mention
are	O	O
internally	O	O
interned	O	O
.	O	O
You	O	O
can	O	O
find	O	O
more	O	O
information	O	O
String	B-api_mention	B-api_mention
comparision	O	O
using	O	O
=	O	O
=	O	O
operator	O	O
and	O	O
Javadoc	O	O
for	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Also	O	O
refer	O	O
this	O	O
Stackoverflow	O	B-api_mention
post	O	O
for	O	O
more	O	O
information	O	O
.	O	O
Question	O	O
-	O	O
32714194	O	O
String	B-api_mention	B-api_mention
is	O	O
a	O	O
special	O	O
case	O	O
in	O	O
Java	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
class	O	O
,	O	O
which	O	O
I	O	O
can	O	O
examine	O	O
in	O	O
the	O	O
source	O	O
code	O	O
,	O	O
but	O	O
it	O	O
also	O	O
has	O	O
its	O	O
own	O	O
infix	O	O
operator	O	O
+	O	O
,	O	O
which	O	O
seems	O	O
to	O	O
be	O	O
syntactic	O	O
sugar	O	O
for	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
For	O	O
example	O	O
,	O	O
StringLiteral	O	O
+	O	O
yourName	O	O
;	O	O
could	O	O
become	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
There	O	O
are	O	O
no	O	O
user	O	O
-	O	O
defined	O	O
operators	O	O
in	O	O
Java	O	O
,	O	O
so	O	O
where	O	O
is	O	O
+	O	O
specified	O	O
for	O	O
String	B-api_mention	B-api_mention
?	O	O
Could	O	O
the	O	O
same	O	O
mechanism	O	O
be	O	O
used	O	O
to	O	O
make	O	O
additional	O	O
operators	O	O
,	O	O
such	O	O
as	O	O
for	O	O
vectors	O	O
?	O	O
Question	O	O
-	O	O
15655012	O	O
,	O	O
answer	O	O
-	O	O
15656208	O	O
This	O	O
is	O	O
favorite	O	O
interview	O	O
question	O	O
.	O	O
Interviewer	O	O
tries	O	O
to	O	O
find	O	O
out	O	O
here	O	O
,	O	O
how	O	O
much	O	O
you	O	O
understand	O	O
about	O	O
behavior	O	O
of	O	O
objects	O	O
with	O	O
respect	O	O
to	O	O
constructors	O	O
,	O	O
methods	O	O
,	O	O
class	O	O
variables	O	O
(	O	O
static	O	O
variables	O	O
)	O	O
,	O	O
instance	O	O
variables	O	O
.	O	O
#	O	O
pre	O	O
In	O	O
above	O	O
case	O	O
we	O	O
have	O	O
defined	O	O
Test	O	O
constructor	O	O
and	O	O
setFoo	O	B-api_mention
method	O	O
.	O	O
About	O	O
constructor	O	O
:	O	O
Constructor	O	O
can	O	O
be	O	O
invoked	O	O
only	O	O
one	O	O
time	O	O
per	O	O
object	O	O
creation	O	O
by	O	O
using	O	O
new	O	O
keyword	O	O
.	O	O
Programmer	O	O
cannot	O	O
invoke	O	O
constructor	O	O
many	O	O
times	O	O
because	O	O
constructor	O	O
are	O	O
designed	O	O
so	O	O
.	O	O
About	O	O
method	O	O
:	O	O
Method	O	O
can	O	O
be	O	O
invoked	O	O
as	O	O
many	O	O
time	O	O
as	O	O
programmer	O	O
wants	O	O
and	O	O
compiler	O	O
knows	O	O
it	O	O
programmer	O	O
may	O	O
invoke	O	O
method	O	O
zero	O	O
or	O	O
multiple	O	O
time	O	O
.	O	O
Scenario	O	O
1	O	O
private	O	O
final	O	O
List	B-api_mention	B-api_mention
foo	O	O
;	O	O
/	O	O
/	O	O
1	O	O
foo	O	O
is	O	O
an	O	O
instance	O	O
variable	O	O
.	O	O
When	O	O
we	O	O
create	O	O
Test	O	B-api_mention
class	O	O
'	O	O
object	O	O
then	O	O
instance	O	O
variable	O	O
foo	O	O
will	O	O
be	O	O
copied	O	O
inside	O	O
object	O	O
of	O	O
Test	O	O
class	O	O
.	O	O
If	O	O
we	O	O
assign	O	O
foo	O	O
inside	O	O
constructor	O	O
then	O	O
compiler	O	O
know	O	O
that	O	O
Constructor	O	B-api_mention
will	O	O
be	O	O
invoked	O	O
only	O	O
one	O	O
time	O	O
.	O	O
so	O	O
there	O	O
is	O	O
no	O	O
problem	O	O
to	O	O
assign	O	O
it	O	O
inside	O	O
constructor	O	O
.	O	O
If	O	O
we	O	O
assign	O	O
foo	O	O
inside	O	O
method	O	O
then	O	O
compiler	O	O
knows	O	O
that	O	O
method	O	O
may	O	O
be	O	O
invoked	O	O
multiple	O	O
time	O	O
.	O	O
So	O	O
value	O	O
will	O	O
have	O	O
to	O	O
be	O	O
changed	O	O
multiple	O	O
time	O	O
which	O	O
is	O	O
not	O	O
allowed	O	O
for	O	O
final	O	O
variable	O	O
.	O	O
You	O	O
can	O	O
assign	O	O
value	O	O
to	O	O
the	O	O
final	O	O
variable	O	O
only	O	O
one	O	O
time	O	O
.	O	O
So	O	O
compiler	O	O
decides	O	O
constructor	O	O
is	O	O
good	O	O
choice	O	O
!	O	O
Scenario	O	O
2	O	O
private	O	O
static	O	O
final	O	O
List	B-api_mention	B-api_mention
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
foo	O	O
is	O	O
now	O	O
static	O	O
variable	O	O
.	O	O
When	O	O
we	O	O
create	O	O
object	O	O
of	O	O
Test	O	O
class	O	O
then	O	O
foo	O	O
will	O	O
not	O	O
be	O	O
copied	O	O
to	O	O
the	O	O
object	O	O
of	O	O
Test	O	O
class	O	O
because	O	O
foo	O	O
is	O	O
static	O	O
.	O	O
Now	O	O
foo	O	O
is	O	O
not	O	O
the	O	O
property	O	O
of	O	O
each	O	O
object	O	O
.	O	O
This	O	O
is	O	O
the	O	O
property	O	O
of	O	O
Test	O	O
class	O	O
.	O	O
But	O	O
foo	O	O
can	O	O
be	O	O
seen	O	O
by	O	O
many	O	O
objects	O	O
and	O	O
if	O	O
every	O	O
object	O	O
which	O	O
is	O	O
created	O	O
by	O	O
using	O	O
new	O	O
keyword	O	O
which	O	O
ultimately	O	O
invoke	O	O
Test	O	O
constructor	O	O
then	O	O
value	O	O
will	O	O
be	O	O
changed	O	O
at	O	O
the	O	O
time	O	O
of	O	O
multiple	O	O
object	O	O
creation	O	O
(	O	O
Remember	O	O
static	O	O
foo	O	O
is	O	O
not	O	O
copied	O	O
in	O	O
every	O	O
object	O	O
now	O	O
but	O	O
is	O	O
shared	O	O
between	O	O
multiple	O	O
objects	O	O
.	O	O
)	O	O
Scenario	O	O
3	O	O
t	O	O
.	O	O
foo	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
Modification	O	O
-	O	O
2	O	O
Above	O	O
Modification	O	O
-	O	O
2	O	O
is	O	O
from	O	O
your	O	O
question	O	O
.	O	O
In	O	O
above	O	O
case	O	O
you	O	O
are	O	O
not	O	O
changing	O	O
first	O	O
referenced	O	O
object	O	O
but	O	O
you	O	O
are	O	O
adding	O	O
contents	O	O
inside	O	O
foo	O	O
which	O	O
is	O	O
allowed	O	O
.	O	O
Compiler	O	O
complains	O	O
if	O	O
you	O	O
try	O	O
to	O	O
assign	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
object	O	O
to	O	O
the	O	O
foo	O	O
reference	O	O
variable	O	O
.	O	O
Rule	O	O
is	O	O
that	O	O
if	O	O
you	O	O
have	O	O
initialized	O	O
object	O	O
to	O	O
final	O	O
reference	O	O
variable	O	O
then	O	O
you	O	O
cannot	O	O
change	O	O
it	O	O
to	O	O
refer	O	O
different	O	O
ArrayList	B-api_mention	B-api_mention
object	O	O
.	O	O
(	O	O
in	O	O
this	O	O
case	O	O
ArrayList	B-api_mention	B-api_mention
)	O	O
final	O	O
class	O	O
cannot	O	O
be	O	O
subclassed	O	O
final	O	O
methods	O	O
cannot	O	O
be	O	O
overridden	O	O
.	O	O
(	O	O
This	O	O
method	O	O
is	O	O
in	O	O
superclass	O	O
)	O	O
final	O	O
methods	O	O
can	O	O
override	O	O
.	O	O
(	O	O
Read	O	O
this	O	O
in	O	O
grammatical	O	O
way	O	O
.	O	O
This	O	O
method	O	O
is	O	O
in	O	O
subclass	O	O
)	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
22676782	O	O
Despite	O	O
@	O	O
Saint	O	O
Hill	O	O
'	O	O
s	O	O
answer	O	O
if	O	O
you	O	O
consider	O	O
the	O	O
time	O	O
complexity	O	O
of	O	O
str	O	O
.	B-api_mention	B-api_mention
toCharArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
the	O	O
first	O	O
one	O	O
is	O	O
faster	O	O
even	O	O
for	O	O
very	O	O
large	O	O
strings	O	O
.	O	O
You	O	O
can	O	O
run	O	O
the	O	O
code	O	O
below	O	O
to	O	O
see	O	O
it	O	O
for	O	O
yourself	O	O
.	O	O
#	O	O
pre	O	O
output	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
4709175	O	O
,	O	O
answer	O	O
-	O	O
4709284	O	O
#	O	O
blockquote	O	O
You	O	O
can	O	O
use	O	O
an	O	O
Enum	B-api_mention	O
to	O	O
represent	O	O
a	O	O
smallish	O	O
fixed	O	O
set	O	O
of	O	O
constants	O	O
or	O	O
an	O	O
internal	O	O
class	O	O
mode	O	O
while	O	O
increasing	O	O
readability	O	O
.	O	O
Also	O	O
,	O	O
Enums	O	O
can	O	O
enforce	O	O
a	O	O
certain	O	O
rigidity	O	O
when	O	O
used	O	O
in	O	O
method	O	O
parameters	O	O
.	O	O
They	O	O
offer	O	O
the	O	O
interesting	O	O
possibility	O	O
of	O	O
passing	O	O
information	O	O
to	O	O
a	O	O
constructor	O	O
like	O	O
in	O	O
the	O	O
Planets	O	O
example	O	O
on	O	O
Oracle	O	O
'	O	O
s	O	O
site	O	O
and	O	O
,	O	O
as	O	O
you	O	O
'	O	O
ve	O	O
discovered	O	O
,	O	O
also	O	O
allow	O	O
a	O	O
simple	O	O
way	O	O
to	O	O
create	O	O
a	O	O
singleton	O	O
pattern	O	O
.	O	O
ex	O	O
:	O	O
Locale	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
reads	O	O
better	O	O
than	O	O
Locale	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
enforces	O	O
the	O	O
use	O	O
of	O	O
fixed	O	O
set	O	O
of	O	O
values	O	O
shown	O	O
in	O	O
an	O	O
IDE	O	O
when	O	O
you	O	O
add	O	O
the	O	O
.	O	O
separator	O	O
instead	O	O
of	O	O
all	O	O
integers	O	O
.	O	O
Question	O	O
-	O	O
24885223	O	O
,	O	O
answer	O	O
-	O	O
29841832	O	O
Thanks	O	O
to	O	O
@	O	O
marmor	O	O
,	O	O
I	O	O
updated	O	O
my	O	O
answer	O	O
.	O	O
I	O	O
think	O	O
it	O	O
'	O	O
s	O	O
a	O	O
good	O	O
solution	O	O
to	O	O
handle	O	O
the	O	O
onClick	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
ViewHolder	B-api_mention	B-api_mention
class	O	O
constructor	O	O
and	O	O
pass	O	O
it	O	O
to	O	O
the	O	O
parent	O	O
class	O	O
via	O	O
OnItemClickListener	B-api_mention	B-api_mention
interface	O	O
.	O	O
MyAdapter	O	O
.	O	O
java	O	O
#	O	O
pre	O	O
Usage	O	O
of	O	O
adapter	O	O
in	O	O
other	O	O
classes	O	O
:	O	O
MyFragment	O	O
.	O	O
java	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
18571223	O	O
,	O	O
answer	O	O
-	O	O
18571352	O	O
You	O	O
can	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getBytes	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
returns	O	O
the	O	O
byte	O	O
[	O	O
]	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
10827872	O	O
,	O	O
answer	O	O
-	O	O
10827945	O	O
The	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
overloaded	O	O
to	O	O
accept	O	O
both	O	O
a	O	O
primitive	O	O
char	O	O
and	O	O
a	O	O
CharSequence	B-api_mention	B-api_mention
as	O	O
arguments	O	O
.	O	O
Now	O	O
as	O	O
far	O	O
as	O	O
the	O	O
performance	O	O
is	O	O
concerned	O	O
,	O	O
the	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
a	O	O
bit	O	O
faster	O	O
than	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
because	O	O
the	O	O
later	O	O
first	O	O
compiles	O	O
the	O	O
regex	O	O
pattern	O	O
and	O	O
then	O	O
matches	O	O
before	O	O
finally	O	O
replacing	O	O
whereas	O	O
the	O	O
former	O	O
simply	O	O
matches	O	O
for	O	O
the	O	O
provided	O	O
argument	O	O
and	O	O
replaces	O	O
.	O	O
Since	O	O
we	O	O
know	O	O
the	O	O
regex	O	O
pattern	O	O
matching	O	O
is	O	O
a	O	O
bit	O	O
more	O	O
complex	O	O
and	O	O
consequently	O	O
slower	O	O
,	O	O
then	O	O
preferring	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
over	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
suggested	O	O
whenever	O	O
possible	O	O
.	O	O
For	O	O
example	O	O
,	O	O
for	O	O
simple	O	O
substitutions	O	O
like	O	O
you	O	O
mentioned	O	O
,	O	O
it	O	O
is	O	O
better	O	O
to	O	O
use	O	O
:	O	O
replace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
of	O	O
:	O	O
replaceAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
:	O	O
the	O	O
above	O	O
conversion	O	O
method	O	O
arguments	O	O
are	O	O
system	O	O
-	O	O
dependent	O	O
.	O	O
Question	O	O
-	O	O
23114015	O	O
I	O	O
am	O	O
wondering	O	O
why	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
interface	O	O
does	O	O
not	O	O
provide	O	O
the	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
.	O	O
Consider	O	O
the	O	O
following	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
an	O	O
implementation	O	O
of	O	O
a	O	O
Hand	O	O
as	O	O
you	O	O
can	O	O
have	O	O
cards	O	O
in	O	O
your	O	O
hand	O	O
while	O	O
playing	O	O
a	O	O
Trading	O	O
Card	O	O
Game	O	O
.	O	O
Essentially	O	O
it	O	O
wraps	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
ensures	O	O
a	O	O
maximum	O	O
capacity	O	O
and	O	O
offers	O	O
some	O	O
other	O	O
useful	O	O
features	O	O
.	O	O
It	O	O
is	O	O
better	O	O
as	O	O
implementing	O	O
it	O	O
directly	O	O
as	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Now	O	O
,	O	O
for	O	O
convienience	O	O
I	O	O
thought	O	O
it	O	O
would	O	O
be	O	O
nice	O	O
to	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
such	O	O
that	O	O
you	O	O
can	O	O
use	O	O
enhanced	O	O
for	O	O
-	O	O
loops	O	O
if	O	O
you	O	O
want	O	O
to	O	O
loop	O	O
over	O	O
it	O	O
.	O	O
(	O	O
My	O	O
Hand	O	O
class	O	O
also	O	O
provides	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
hence	O	O
the	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
is	O	O
justified	O	O
in	O	O
my	O	O
opinion	O	O
.	O	O
)	O	O
The	O	O
Iterable	O	B-api_mention
interface	O	O
provides	O	O
the	O	O
following	O	O
(	O	O
left	O	O
out	O	O
javadoc	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
can	O	O
you	O	O
obtain	O	O
a	O	O
stream	O	O
with	O	O
:	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
stream	O	O
=	O	O
StreamSupport	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
So	O	O
onto	O	O
the	O	O
real	O	O
question	O	O
:	O	O
#	O	O
li	O	O
Why	O	O
does	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
not	O	O
provide	O	O
a	O	O
default	O	O
methods	O	O
that	O	O
implement	B-api_mention	O
stream	I-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
I	O	O
see	O	O
nothing	O	O
that	O	O
would	O	O
make	O	O
this	O	O
impossible	O	O
or	O	O
unwanted	O	O
?	O	O
A	O	O
related	O	O
question	O	O
I	O	O
found	O	O
is	O	O
the	O	O
following	O	O
though	O	O
:	O	O
Why	O	O
does	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
not	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
?	O	O
Which	O	O
is	O	O
oddly	O	O
enough	O	O
suggesting	O	O
it	O	O
to	O	O
do	O	O
it	O	O
somewhat	O	O
the	O	O
other	O	O
way	O	O
around	O	O
.	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725453	O	O
Since	O	O
all	O	O
lists	O	O
are	O	O
already	O	O
"	O	O
sorted	O	O
"	O	O
by	O	O
the	O	O
order	O	O
the	O	O
items	O	O
were	O	O
added	O	O
(	O	O
FIFO	O	O
ordering	O	O
)	O	O
,	O	O
you	O	O
can	O	O
"	O	O
resort	O	O
"	O	O
them	O	O
with	O	O
another	O	O
ordering	O	O
,	O	O
including	O	O
the	O	O
natural	O	O
ordering	O	O
of	O	O
elements	O	O
,	O	O
using	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
EDIT	O	O
:	O	O
Lists	B-api_mention	O
as	O	O
data	O	O
structures	O	O
are	O	O
based	O	O
in	O	O
what	O	O
is	O	O
interesting	O	O
is	O	O
the	O	O
ordering	O	O
in	O	O
which	O	O
the	O	O
items	O	O
where	O	O
inserted	O	O
.	O	O
Sets	O	O
do	O	O
not	O	O
have	O	O
that	O	O
information	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
order	O	O
by	O	O
addition	O	O
time	O	O
,	O	O
use	O	O
List	B-api_mention	B-api_mention
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
order	O	O
by	O	O
other	O	O
criteria	O	O
,	O	O
use	O	O
SortedSet	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
7935858	O	O
,	O	O
answer	O	O
-	O	O
7935873	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
splits	O	O
on	O	O
regular	O	O
expressions	O	O
,	O	O
and	O	O
.	O	O
in	O	O
a	O	O
regular	O	O
expression	O	O
means	O	O
"	O	O
any	O	O
character	O	O
"	O	O
.	O	O
Try	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
28724850	O	O
Running	O	O
the	O	O
following	O	O
stream	O	O
example	O	O
in	O	O
Java8	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
yields	O	O
:	O	O
/	O	O
a	O	O
/	O	O
b	O	O
/	O	O
c	O	O
/	O	O
d	O	O
/	O	O
e	O	O
/	O	O
f	O	O
Which	O	O
is	O	O
-	O	O
of	O	O
course	O	O
-	O	O
no	O	O
surprise	O	O
.	O	O
Due	O	O
to	O	O
#	O	O
a	O	O
it	O	O
shouldn	O	O
'	O	O
t	O	O
matter	O	O
whether	O	O
the	O	O
stream	O	O
is	O	O
executed	O	O
sequentially	O	O
or	O	O
parallel	O	O
:	O	O
#	O	O
blockquote	O	O
AFAIK	O	O
reduce	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
is	O	O
deterministic	O	O
and	O	O
(	O	O
s1	O	O
,	O	O
s2	O	O
)	O	O
-	O	O
>	O	O
s1	O	O
+	O	O
StringLiteral	O	O
+	O	O
s2	O	O
is	O	O
associative	O	O
,	O	O
so	O	O
that	O	O
adding	O	O
parallel	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
should	O	O
yield	O	O
the	O	O
same	O	O
result	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
However	O	O
the	O	O
result	O	O
on	O	O
my	O	O
machine	O	O
is	O	O
:	O	O
/	O	O
a	O	O
/	O	O
/	O	O
b	O	O
/	O	O
/	O	O
c	O	O
/	O	O
/	O	O
d	O	O
/	O	O
/	O	O
e	O	O
/	O	O
/	O	O
f	O	O
What	O	O
'	O	O
s	O	O
wrong	O	O
here	O	O
?	O	O
BTW	O	O
:	O	O
using	O	O
(	O	O
the	O	O
preferred	O	O
)	O	O
.	O	B-api_mention
collect	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
of	O	O
reduce	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
yields	O	O
the	O	O
same	O	O
result	O	O
a	O	O
/	O	O
b	O	O
/	O	O
c	O	O
/	O	O
d	O	O
/	O	O
e	O	O
/	O	O
f	O	O
for	O	O
sequential	O	O
and	O	O
parallel	O	O
execution	O	O
.	O	O
JVM	O	O
details	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29333689	O	O
The	O	O
following	O	O
is	O	O
taken	O	O
from	O	O
a	O	O
job	O	O
interview	O	O
:	O	O
#	O	O
blockquote	O	O
I	O	O
thought	O	O
about	O	O
using	O	O
an	O	O
HashSet	B-api_mention	B-api_mention
,	O	O
but	O	O
it	O	O
might	O	O
complicate	O	O
everything	O	O
.	O	O
.	O	O
.	O	O
Any	O	O
ideas	O	O
of	O	O
a	O	O
simple	O	O
solution	O	O
?	O	O
Question	O	O
-	O	O
34172978	O	O
,	O	O
answer	O	O
-	O	O
34173110	O	O
Flipping	O	O
the	O	O
limit	O	O
and	O	O
the	O	O
filter	O	O
clauses	O	O
has	O	O
different	O	O
behaviors	O	O
.	O	O
If	O	O
you	O	O
put	O	O
the	O	O
limit	O	O
first	O	O
,	O	O
the	O	O
stream	O	O
will	O	O
first	O	O
generate	O	O
10	O	O
integers	O	O
[	O	O
1	O	O
.	O	O
.	O	O
10	O	O
]	O	O
,	O	O
and	O	O
then	O	O
filter	O	O
them	O	O
leaving	O	O
only	O	O
those	O	O
smaller	O	O
than	O	O
5	O	O
.	O	O
In	O	O
the	O	O
original	O	O
ordering	O	O
,	O	O
with	O	O
the	O	O
filter	O	O
applied	O	O
first	O	O
,	O	O
integers	O	O
are	O	O
generated	O	O
and	O	O
filtered	O	O
until	O	O
you	O	O
reach	O	O
10	O	O
elements	O	O
.	O	O
This	O	O
isn	O	O
'	O	O
t	O	O
an	O	O
infinite	O	O
operator	O	O
,	O	O
as	O	O
i	O	O
in	O	O
the	O	O
supplier	O	O
will	O	O
eventually	O	O
overflow	O	O
,	O	O
but	O	O
it	O	O
will	O	O
take	O	O
a	O	O
while	O	O
,	O	O
especially	O	O
on	O	O
a	O	O
slow	O	O
computer	O	O
,	O	O
to	O	O
reach	O	O
MAX	O	O
_	O	O
INT	O	O
.	O	O
Question	O	O
-	O	O
5673260	O	O
,	O	O
answer	O	O
-	O	O
5673356	O	O
#	O	O
pre	O	O
Generally	O	O
speaking	O	O
,	O	O
when	O	O
you	O	O
have	O	O
response	O	O
.	B-api_mention	B-api_mention
getOutputStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
can	O	O
write	O	O
anything	O	O
there	O	O
.	O	O
You	O	O
can	O	O
pass	O	O
this	O	O
output	O	O
stream	O	O
as	O	O
a	O	O
place	O	O
to	O	O
put	O	O
generated	O	O
PDF	O	O
to	O	O
your	O	O
generator	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
you	O	O
know	O	O
what	O	O
file	O	O
type	O	O
you	O	O
are	O	O
sending	O	O
,	O	O
you	O	O
can	O	O
set	O	O
response	O	O
.	B-api_mention	B-api_mention
setContentType	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
18647214	O	O
,	O	O
answer	O	O
-	O	O
18647232	O	O
I	O	O
would	O	O
just	O	O
do	O	O
this	O	O
.	O	O
It	O	O
basically	O	O
takes	O	O
the	O	O
minimum	O	O
between	O	O
100	O	O
(	O	O
the	O	O
max	O	O
health	O	O
)	O	O
and	O	O
what	O	O
the	O	O
health	O	O
would	O	O
be	O	O
with	O	O
15	O	O
extra	O	O
points	O	O
.	O	O
It	O	O
ensures	O	O
that	O	O
the	O	O
user	O	O
'	O	O
s	O	O
health	O	O
does	O	O
not	O	O
exceed	O	O
100	O	O
.	O	O
#	O	O
pre	O	O
To	O	O
ensure	O	O
that	O	O
hitpoints	O	O
do	O	O
not	O	O
drop	O	O
below	O	O
zero	O	O
,	O	O
you	O	O
can	O	O
use	O	O
a	O	O
similar	O	O
function	O	O
:	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
max	I-api_mention	I-api_mention
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
34250207	O	O
As	O	O
I	O	O
recall	O	O
,	O	O
before	O	O
Java	O	O
8	O	O
,	O	O
the	O	O
default	O	O
capacity	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
was	O	O
10	O	O
.	O	O
Surprisingly	O	O
,	O	O
the	O	O
comment	O	O
on	O	O
the	O	O
default	O	O
(	O	O
void	O	O
)	O	O
constructor	O	O
still	O	O
says	O	O
:	O	O
Constructs	O	O
an	O	O
empty	O	O
list	O	O
with	O	O
an	O	O
initial	O	O
capacity	O	O
of	O	O
ten	O	O
.	O	O
From	O	O
ArrayList	O	B-api_mention
.	O	O
java	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29333689	O	O
,	O	O
answer	O	O
-	O	O
29337734	O	O
My	O	O
intuition	O	O
in	O	O
Python	O	O
is	O	O
to	O	O
use	O	O
the	O	O
collections	O	O
.	O	O
Counter	O	O
as	O	O
a	O	O
multiset	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
we	O	O
have	O	O
a	O	O
list	O	O
of	O	O
integers	O	O
from	O	O
0	O	O
-	O	O
99	O	O
twice	O	O
except	O	O
for	O	O
66	O	O
.	O	O
#	O	O
pre	O	O
Which	O	O
gets	O	O
the	O	O
least	O	O
common	O	O
(	O	O
last	O	O
item	O	O
)	O	O
from	O	O
a	O	O
list	O	O
sorted	O	O
by	O	O
frequency	O	O
.	O	O
Such	O	O
a	O	O
function	O	O
would	O	O
be	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
usage	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
a	O	O
generalized	O	O
solution	O	O
that	O	O
works	O	O
for	O	O
any	O	O
number	O	O
of	O	O
items	O	O
.	O	O
Question	O	O
-	O	O
5374311	O	O
,	O	O
answer	O	O
-	O	O
5374346	O	O
What	O	O
is	O	O
happening	O	O
is	O	O
that	O	O
stock	O	O
_	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
creating	O	O
an	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
rather	O	O
than	O	O
a	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
and	O	O
hence	O	O
the	O	O
typecast	O	O
is	O	O
failing	O	O
.	O	O
The	O	O
correct	O	O
code	O	O
would	O	O
be	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
even	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
more	O	O
details	O	O
,	O	O
refer	O	O
to	O	O
the	O	O
javadocs	O	O
for	O	O
the	O	O
two	O	O
overloads	O	O
of	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
.	O	O
(	O	O
From	O	O
a	O	O
technical	O	O
perspective	O	O
,	O	O
the	O	O
reason	O	O
for	O	O
this	O	O
API	O	O
behaviour	O	O
/	O	O
design	O	O
is	O	O
that	O	O
an	O	O
implementation	O	O
of	O	O
the	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
no	O	O
information	O	O
of	O	O
what	O	O
the	O	O
<	O	O
T	O	O
>	O	O
is	O	O
at	O	O
runtime	O	O
.	O	O
All	O	O
it	O	O
knows	O	O
is	O	O
that	O	O
the	O	O
raw	O	O
element	O	O
type	O	O
is	O	O
Object	B-api_mention	B-api_mention
.	O	O
By	O	O
contrast	O	O
,	O	O
in	O	O
the	O	O
other	O	O
case	O	O
,	O	O
the	O	O
array	O	O
parameter	O	O
gives	O	O
the	O	O
base	O	O
type	O	O
of	O	O
the	O	O
array	O	O
.	O	O
(	O	O
If	O	O
the	O	O
supplied	O	O
array	O	O
is	O	O
big	O	O
enough	O	O
,	O	O
it	O	O
is	O	O
used	O	O
.	O	O
Otherwise	O	O
a	O	O
new	O	O
array	O	O
of	O	O
the	O	O
same	O	O
type	O	O
and	O	O
a	O	O
larger	O	O
size	O	O
will	O	O
be	O	O
allocated	O	O
and	O	O
returned	O	O
as	O	O
the	O	O
result	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
16636899	O	O
I	O	O
feel	O	O
that	O	O
I	O	O
need	O	O
to	O	O
extend	O	O
my	O	O
comment	O	O
a	O	O
bit	O	O
.	O	O
.	O	O
.	O	O
About	O	O
paradigm	O	O
\	O	O
style	O	O
That	O	O
'	O	O
s	O	O
probably	O	O
the	O	O
most	O	O
notable	O	O
aspect	O	O
.	O	O
FP	O	O
became	O	O
popular	O	O
due	O	O
to	O	O
what	O	O
you	O	O
can	O	O
get	O	O
avoiding	O	O
side	O	O
-	O	O
effects	O	O
.	O	O
I	O	O
won	O	O
'	O	O
t	O	O
delve	O	O
deep	O	O
into	O	O
what	O	O
pros	O	O
\	O	O
cons	O	O
you	O	O
can	O	O
get	O	O
from	O	O
this	O	O
,	O	O
since	O	O
this	O	O
is	O	O
not	O	O
related	O	O
to	O	O
the	O	O
question	O	O
.	O	O
However	O	O
,	O	O
I	O	O
will	O	O
say	O	O
that	O	O
the	O	O
iteration	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
inspired	O	O
by	O	O
FP	O	O
and	O	O
rather	O	O
result	O	O
of	O	O
bringing	O	O
more	O	O
FP	O	O
to	O	O
Java	O	O
(	O	O
ironically	O	O
,	O	O
I	O	O
'	O	O
d	O	O
say	O	O
that	O	O
there	O	O
is	O	O
no	O	O
much	O	O
use	O	O
for	O	O
forEach	B-api_mention	B-api_mention
in	O	O
pure	O	O
FP	O	O
,	O	O
since	O	O
it	O	O
does	O	O
nothing	O	O
except	O	O
introducing	O	O
side	O	O
-	O	O
effects	O	O
)	O	O
.	O	O
In	O	O
the	O	O
end	O	O
I	O	O
would	O	O
say	O	O
that	O	O
it	O	O
is	O	O
rather	O	O
a	O	O
matter	O	O
of	O	O
taste	O	O
\	O	O
style	O	O
\	O	O
paradigm	O	O
you	O	O
are	O	O
currently	O	O
writing	O	O
in	O	O
.	O	O
About	O	O
parallelism	O	O
.	O	O
From	O	O
performance	O	O
point	O	O
of	O	O
view	O	O
there	O	O
is	O	O
no	O	O
promised	O	O
notable	O	O
benefits	O	O
from	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
over	O	O
foreach	O	O
(	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
According	O	O
to	O	O
official	O	O
docs	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
.	O	O
.	O	O
.	O	O
i	O	O
.	O	O
e	O	O
.	O	O
docs	O	O
pretty	O	O
much	O	O
clear	O	O
that	O	O
there	O	O
will	O	O
be	O	O
no	O	O
implicit	O	O
parallelism	O	O
.	O	O
Adding	O	O
one	O	O
would	O	O
be	O	O
LSP	O	O
violation	O	O
.	O	O
Now	O	O
,	O	O
there	O	O
are	O	O
"	O	O
parallell	O	O
collections	O	O
"	O	O
that	O	O
are	O	O
promised	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
but	O	O
to	O	O
work	O	O
with	O	O
those	O	O
you	O	O
need	O	O
to	O	O
me	O	O
more	O	O
explicit	O	O
and	O	O
put	O	O
some	O	O
extra	O	O
care	O	O
to	O	O
use	O	O
them	O	O
(	O	O
see	O	O
mschenk74	O	O
'	O	O
s	O	O
answer	O	O
for	O	O
example	O	O
)	O	O
.	O	O
BTW	O	O
:	O	O
in	O	O
this	O	O
case	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
will	O	O
be	O	O
used	O	O
,	O	O
and	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
guarantee	O	O
that	O	O
actual	O	O
work	O	O
will	O	O
be	O	O
done	O	O
in	O	O
parallell	O	O
(	O	O
depends	O	O
on	O	O
underlying	O	O
collection	O	O
)	O	O
.	O	O
UPDATE	O	O
:	O	O
might	O	O
be	O	O
not	O	O
that	O	O
obvious	O	O
and	O	O
a	O	O
little	O	O
stretched	O	O
at	O	O
a	O	O
glance	O	O
but	O	O
there	O	O
is	O	O
another	O	O
facet	O	O
of	O	O
style	O	O
and	O	O
readability	O	O
perspective	O	O
.	O	O
First	O	O
of	O	O
all	O	O
-	O	O
plain	O	O
old	O	O
forloops	O	O
are	O	O
plain	O	O
and	O	O
old	O	O
.	O	O
Everybody	O	O
already	O	O
knows	O	O
them	O	O
.	O	O
Second	O	O
,	O	O
and	O	O
more	O	O
important	O	O
-	O	O
you	O	O
probably	O	O
want	O	O
to	O	O
use	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
only	O	O
with	O	O
one	O	O
-	O	O
liner	O	O
lambdas	O	O
.	O	O
If	O	O
"	O	O
body	O	O
"	O	O
gets	O	O
heavier	O	O
-	O	O
they	O	O
tend	O	O
to	O	O
be	O	O
not	O	O
-	O	O
that	O	O
readable	O	O
.	O	O
You	O	O
have	O	O
2	O	O
options	O	O
from	O	O
here	O	O
-	O	O
use	O	O
inner	O	O
classes	O	O
(	O	O
yuck	O	O
)	O	O
or	O	O
use	O	O
plain	O	O
old	O	O
forloop	O	O
.	O	O
People	O	O
often	O	O
gets	O	O
annoyed	O	O
when	O	O
they	O	O
see	O	O
the	O	O
same	O	O
things	O	O
(	O	O
iteratins	O	O
over	O	O
collections	O	O
)	O	O
being	O	O
done	O	O
various	O	O
vays	O	O
/	O	O
styles	O	O
in	O	O
the	O	O
same	O	O
codebase	O	O
,	O	O
and	O	O
this	O	O
seems	O	O
to	O	O
be	O	O
the	O	O
case	O	O
.	O	O
Again	O	O
,	O	O
this	O	O
might	O	O
or	O	O
might	O	O
not	O	O
be	O	O
an	O	O
issue	O	O
.	O	O
Depends	O	O
on	O	O
people	O	O
working	O	O
on	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
5673260	O	O
,	O	O
answer	O	O
-	O	O
5673375	O	O
You	O	O
should	O	O
be	O	O
able	O	O
to	O	O
write	O	O
the	O	O
file	O	O
on	O	O
the	O	O
response	O	O
directly	O	O
.	O	O
Something	O	O
like	O	O
#	O	O
pre	O	O
and	O	O
then	O	O
write	O	O
the	O	O
file	O	O
as	O	O
a	O	O
binary	O	O
stream	O	O
on	O	O
response	O	O
.	B-api_mention	B-api_mention
getOutputStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Remember	O	O
to	O	O
do	O	O
response	O	O
.	B-api_mention	B-api_mention
flush	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
at	O	O
the	O	O
end	O	O
and	O	O
that	O	O
should	O	O
do	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
26318569	O	O
I	O	O
am	O	O
getting	O	O
following	O	O
exception	O	O
while	O	O
running	O	O
the	O	O
tests	O	O
.	O	O
I	O	O
am	O	O
using	O	O
Mockito	B-api_mention	B-api_mention
for	O	O
mocking	O	O
.	O	O
The	O	O
hints	O	O
mentioned	O	O
by	O	O
Mockito	B-api_mention	B-api_mention
library	O	O
are	O	O
not	O	O
helping	O	O
.	O	O
#	O	O
pre	O	O
Test	O	O
Code	O	O
from	O	O
DomainTestFactory	O	B-api_mention
.	O	O
When	O	O
I	O	O
run	O	O
the	O	O
following	O	O
test	O	O
,	O	O
I	O	O
see	O	O
the	O	O
exception	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
31419029	O	O
I	O	O
'	O	O
ve	O	O
tried	O	O
to	O	O
build	O	O
my	O	O
own	O	O
Map	B-api_mention	B-api_mention
to	O	O
increase	O	O
the	O	O
performance	O	O
for	O	O
a	O	O
special	O	O
environment	O	O
,	O	O
and	O	O
I	O	O
realized	O	O
something	O	O
pretty	O	O
interesting	O	O
:	O	O
Creating	O	O
a	O	O
new	O	O
Hashmap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
faster	O	O
than	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	I-api_mention	O
2000	I-api_mention	O
]	I-api_mention	O
-	O	O
no	O	O
matter	O	O
in	O	O
which	O	O
order	O	O
I	O	O
execute	O	O
these	O	O
commands	O	O
.	O	O
That	O	O
'	O	O
s	O	O
pretty	O	O
confusing	O	O
to	O	O
me	O	O
,	O	O
esp	O	O
.	O	O
because	O	O
the	O	O
Hashmap	B-api_mention	B-api_mention
constructor	O	O
contains	O	O
a	O	O
table	O	O
=	O	O
new	O	O
Entry	O	O
[	O	O
capacity	O	O
]	O	O
,	O	O
according	O	O
to	O	O
this	O	O
.	O	O
Is	O	O
there	O	O
something	O	O
wrong	O	O
with	O	O
my	O	O
testbench	O	O
?	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
d	O	O
love	O	O
to	O	O
see	O	O
the	O	O
results	O	O
of	O	O
testing	O	O
on	O	O
another	O	O
computer	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
got	O	O
no	O	O
clue	O	O
why	O	O
creating	O	O
a	O	O
HashMap	B-api_mention	B-api_mention
is	O	O
10	O	O
times	O	O
faster	O	O
than	O	O
creating	O	O
a	O	O
Object	B-api_mention	B-api_mention
[	I-api_mention	O
]	I-api_mention	O
.	O	O
Question	O	O
-	O	O
18666710	O	O
,	O	O
answer	O	O
-	O	O
18792306	O	O
An	O	O
important	O	O
feature	O	O
of	O	O
parametric	O	O
types	O	O
is	O	O
the	O	O
ability	O	O
to	O	O
write	O	O
polymorphic	O	O
algorithms	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
algorithms	O	O
that	O	O
operate	O	O
on	O	O
a	O	O
data	O	O
structure	O	O
regardless	O	O
of	O	O
its	O	O
parameter	O	O
value	O	O
,	O	O
such	O	O
as	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
With	O	O
generics	O	O
,	O	O
that	O	O
'	O	O
s	O	O
done	O	O
with	O	O
wildcard	O	O
types	O	O
:	O	O
<	O	O
E	O	O
extends	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
>	O	O
void	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
To	O	O
be	O	O
truly	O	O
useful	O	O
,	O	O
wildcard	O	O
types	O	O
require	O	O
wildcard	O	O
capture	O	O
,	O	O
and	O	O
that	O	O
requires	O	O
the	O	O
notion	O	O
of	O	O
a	O	O
type	O	O
parameter	O	O
.	O	O
None	O	O
of	O	O
that	O	O
was	O	O
available	O	O
at	O	O
the	O	O
time	O	O
arrays	O	O
were	O	O
added	O	O
to	O	O
Java	O	O
,	O	O
and	O	O
makings	O	O
arrays	O	O
of	O	O
reference	O	O
type	O	O
covariant	O	O
permitted	O	O
a	O	O
far	O	O
simpler	O	O
way	O	O
to	O	O
permit	O	O
polymorphic	O	O
algorithms	O	O
:	O	O
void	O	O
sort	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
However	O	O
,	O	O
that	O	O
simplicity	O	O
opened	O	O
a	O	O
loophole	O	O
in	O	O
the	O	O
static	O	O
type	O	O
system	O	O
:	O	O
#	O	O
pre	O	O
requiring	O	O
a	O	O
runtime	O	O
check	O	O
of	O	O
every	O	O
write	O	O
access	O	O
to	O	O
an	O	O
array	O	O
of	O	O
reference	O	O
type	O	O
.	O	O
In	O	O
a	O	O
nutshell	O	O
,	O	O
the	O	O
newer	O	O
approach	O	O
embodied	O	O
by	O	O
generics	O	O
makes	O	O
the	O	O
type	O	O
system	O	O
more	O	O
complex	O	O
,	O	O
but	O	O
also	O	O
more	O	O
statically	O	O
type	O	O
safe	O	O
,	O	O
while	O	O
the	O	O
older	O	O
approach	O	O
was	O	O
simpler	O	O
,	O	O
and	O	O
less	O	O
statically	O	O
type	O	O
safe	O	O
.	O	O
The	O	O
designers	O	O
of	O	O
the	O	O
language	O	O
opted	O	O
for	O	O
the	O	O
simpler	O	O
approach	O	O
,	O	O
having	O	O
more	O	O
important	O	O
things	O	O
to	O	O
do	O	O
than	O	O
closing	O	O
a	O	O
small	O	O
loophole	O	O
in	O	O
the	O	O
type	O	O
system	O	O
that	O	O
rarely	O	O
causes	O	O
problems	O	O
.	O	O
Later	O	O
,	O	O
when	O	O
Java	O	O
was	O	O
established	O	O
,	O	O
and	O	O
the	O	O
pressing	O	O
needs	O	O
taken	O	O
care	O	O
of	O	O
,	O	O
they	O	O
had	O	O
the	O	O
resources	O	O
to	O	O
do	O	O
it	O	O
right	O	O
for	O	O
generics	O	O
(	O	O
but	O	O
changing	O	O
it	O	O
for	O	O
arrays	O	O
would	O	O
have	O	O
broken	O	O
existing	O	O
Java	O	O
programs	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
15655012	O	O
,	O	O
answer	O	O
-	O	O
24895623	O	O
First	O	O
of	O	O
all	O	O
,	O	O
the	O	O
place	O	O
in	O	O
your	O	O
code	O	O
where	O	O
you	O	O
are	O	O
initializing	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
assigning	O	O
for	O	O
the	O	O
first	O	O
time	O	O
)	O	O
foo	O	O
is	O	O
here	O	O
:	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
foo	O	O
is	O	O
an	O	O
object	O	O
(	O	O
with	O	O
type	O	O
List	O	B-api_mention
)	O	O
so	O	O
it	O	O
is	O	O
a	O	O
reference	O	O
type	O	O
,	O	O
not	O	O
a	O	O
value	O	O
type	O	O
(	O	O
like	O	O
int	O	O
)	O	O
.	O	O
As	O	O
such	O	O
,	O	O
it	O	O
holds	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
memory	O	O
location	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
0xA7D2A834	O	O
)	O	O
where	O	O
your	O	O
List	B-api_mention	B-api_mention
elements	O	O
are	O	O
stored	O	O
.	O	O
Lines	O	O
like	O	O
this	O	O
foo	O	O
.	O	B-api_mention
add	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
Modification	O	O
-	O	O
1	O	O
do	O	O
not	O	O
change	O	O
the	O	O
value	O	O
of	O	O
foo	O	O
(	O	O
which	O	O
,	O	O
again	O	O
,	O	O
is	O	O
just	O	O
a	O	O
reference	O	O
to	O	O
a	O	O
memory	O	O
location	O	O
)	O	O
.	O	O
Instead	O	O
,	O	O
they	O	O
just	O	O
add	O	O
elements	O	O
into	O	O
that	O	O
referenced	O	O
memory	O	O
location	O	O
.	O	O
To	O	O
violate	O	O
the	O	O
final	O	O
keyword	O	O
,	O	O
you	O	O
would	O	O
have	O	O
to	O	O
try	O	O
to	O	O
re	O	O
-	O	O
assign	O	O
foo	O	O
as	O	O
follows	O	O
again	O	O
:	O	O
foo	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
That	O	O
would	O	O
give	O	O
you	O	O
a	O	O
compilation	O	O
error	O	O
.	O	O
Now	O	O
,	O	O
with	O	O
that	O	O
out	O	O
of	O	O
the	O	O
way	O	O
,	O	O
think	O	O
about	O	O
what	O	O
happens	O	O
when	O	O
you	O	O
add	O	O
the	O	O
static	O	O
keyword	O	O
.	O	O
When	O	O
you	O	O
do	O	O
NOT	O	O
have	O	O
the	O	O
static	O	O
keyword	O	O
,	O	O
each	O	O
object	O	O
that	O	O
instantiates	O	O
the	O	O
class	O	O
has	O	O
its	O	O
own	O	O
copy	O	O
of	O	O
foo	O	O
.	O	O
Therefore	O	O
,	O	O
the	O	O
constructor	O	O
assigns	O	O
a	O	O
value	O	O
to	O	O
a	O	O
blank	O	O
,	O	O
fresh	O	O
copy	O	O
of	O	O
the	O	O
foo	O	O
variable	O	O
,	O	O
which	O	O
is	O	O
perfectly	O	O
fine	O	O
.	O	O
However	O	O
,	O	O
when	O	O
you	O	O
DO	O	O
have	O	O
the	O	O
static	O	O
keyword	O	O
,	O	O
only	O	O
one	O	O
foo	O	O
exists	O	O
in	O	O
memory	O	O
that	O	O
is	O	O
associated	O	O
with	O	O
the	O	O
class	O	O
.	O	O
If	O	O
you	O	O
were	O	O
to	O	O
create	O	O
two	O	O
or	O	O
more	O	O
objects	O	O
,	O	O
the	O	O
constructor	O	O
would	O	O
be	O	O
attempting	O	O
to	O	O
re	O	O
-	O	O
assign	O	O
that	O	O
one	O	O
foo	O	O
each	O	O
time	O	O
,	O	O
violating	O	O
the	O	O
final	O	O
keyword	O	O
.	O	O
Question	O	O
-	O	O
13744450	O	O
The	O	O
interviewer	O	O
asked	O	O
me	O	O
:	O	O
#	O	O
blockquote	O	O
I	O	O
wasn	O	O
'	O	O
t	O	O
aware	O	O
of	O	O
these	O	O
terms	O	O
.	O	O
So	O	O
,	O	O
when	O	O
I	O	O
came	O	O
back	O	O
to	O	O
home	O	O
,	O	O
then	O	O
I	O	O
started	O	O
looking	O	O
into	O	O
Google	O	O
about	O	O
Observer	B-api_mention	B-api_mention
and	O	O
Observable	B-api_mention	B-api_mention
and	O	O
found	O	O
some	O	O
point	O	O
from	O	O
different	O	O
resources	O	O
:	O	O
#	O	O
blockquote	O	O
I	O	O
found	O	O
this	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
I	O	O
'	O	O
m	O	O
still	O	O
unable	O	O
to	O	O
figure	O	O
out	O	O
why	O	O
do	O	O
we	O	O
need	O	O
Observer	B-api_mention	B-api_mention
and	O	O
Observable	B-api_mention	B-api_mention
?	O	O
What	O	O
are	O	O
the	O	O
setChanged	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
notifyObservers	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
for	O	O
?	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
22502206	O	O
When	O	O
reading	O	O
this	O	O
question	O	O
one	O	O
can	O	O
get	O	O
the	O	O
impression	O	O
,	O	O
that	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
in	O	O
combination	O	O
with	O	O
lambda	O	O
expressions	O	O
is	O	O
a	O	O
shortcut	O	O
/	O	O
replacement	O	O
for	O	O
writing	O	O
a	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
.	O	O
This	O	O
is	O	O
simply	O	O
not	O	O
true	O	O
.	O	O
This	O	O
code	O	O
from	O	O
the	O	O
OP	O	O
:	O	O
joins	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
is	O	O
not	O	O
intended	O	O
as	O	O
a	O	O
shortcut	O	O
for	O	O
writing	O	O
#	O	O
pre	O	O
and	O	O
should	O	O
certainly	O	O
not	O	O
be	O	O
used	O	O
in	O	O
this	O	O
way	O	O
.	O	O
Instead	O	O
it	O	O
is	O	O
intended	O	O
as	O	O
a	O	O
shortcut	O	O
(	O	O
although	O	O
it	O	O
is	O	O
not	O	O
exactly	O	O
the	O	O
same	O	O
)	O	O
for	O	O
writing	O	O
#	O	O
pre	O	O
And	O	O
it	O	O
is	O	O
as	O	O
a	O	O
replacement	O	O
for	O	O
the	O	O
following	O	O
Java	O	O
7	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Replacing	O	O
the	O	O
body	O	O
of	O	O
a	O	O
loop	O	O
with	O	O
a	O	O
functional	O	O
interface	O	O
,	O	O
as	O	O
in	O	O
the	O	O
examples	O	O
above	O	O
,	O	O
makes	O	O
your	O	O
code	O	O
more	O	O
explicit	O	O
:	O	O
You	O	O
are	O	O
saying	O	O
that	O	O
(	O	O
1	O	O
)	O	O
the	O	O
body	O	O
of	O	O
the	O	O
loop	O	O
does	O	O
not	O	O
affect	O	O
the	O	O
surrounding	O	O
code	O	O
and	O	O
control	O	O
flow	O	O
,	O	O
and	O	O
(	O	O
2	O	O
)	O	O
the	O	O
body	O	O
of	O	O
the	O	O
loop	O	O
may	O	O
be	O	O
replaced	O	O
with	O	O
a	O	O
different	O	O
implementation	O	O
of	O	O
the	O	O
function	O	O
,	O	O
without	O	O
affecting	O	O
the	O	O
surrounding	O	O
code	O	O
.	O	O
Not	O	O
being	O	O
able	O	O
to	O	O
access	O	O
non	O	O
final	O	O
variables	O	O
of	O	O
the	O	O
outer	O	O
scope	O	O
is	O	O
not	O	O
a	O	O
deficit	O	O
of	O	O
functions	O	O
/	O	O
lambdas	O	O
,	O	O
it	O	O
is	O	O
a	O	O
feature	O	O
that	O	O
distinguishes	O	O
the	O	O
semantics	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
from	O	O
the	O	O
semantics	O	O
of	O	O
a	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
.	O	O
Once	O	O
one	O	O
gets	O	O
used	O	O
to	O	O
the	O	O
syntax	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
it	O	O
makes	O	O
the	O	O
code	O	O
more	O	O
readable	O	O
,	O	O
because	O	O
you	O	O
immediately	O	O
get	O	O
this	O	O
additional	O	O
information	O	O
about	O	O
the	O	O
code	O	O
.	O	O
Traditional	O	O
for	O	O
-	O	O
each	O	O
loops	O	O
will	O	O
certainly	O	O
stay	O	O
good	O	O
practice	O	O
(	O	O
to	O	O
avoid	O	O
the	O	O
overused	O	O
term	O	O
"	O	O
best	O	O
practice	O	O
"	O	O
)	O	O
in	O	O
Java	O	O
.	O	O
But	O	O
this	O	O
doesn	O	O
'	O	O
t	O	O
mean	O	O
,	O	O
that	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
should	O	O
be	O	O
considered	O	O
bad	O	O
practice	O	O
or	O	O
bad	O	O
style	O	O
.	O	O
It	O	O
is	O	O
always	O	O
good	O	O
practice	O	O
,	O	O
to	O	O
use	O	O
the	O	O
right	O	O
tool	O	O
for	O	O
doing	O	O
the	O	O
job	O	O
,	O	O
and	O	O
this	O	O
includes	O	O
mixing	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loops	O	O
with	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
where	O	O
it	O	O
makes	O	O
sense	O	O
.	O	O
Since	O	O
the	O	O
downsides	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
have	O	O
already	O	O
been	O	O
discussed	O	O
in	O	O
this	O	O
thread	O	O
,	O	O
here	O	O
are	O	O
some	O	O
reasons	O	O
,	O	O
why	O	O
you	O	O
might	O	O
probably	O	O
want	O	O
to	O	O
use	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
:	O	O
#	O	O
li	O	O
To	O	O
make	O	O
your	O	O
code	O	O
more	O	O
explicit	O	O
:	O	O
As	O	O
described	O	O
above	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
can	O	O
make	O	O
your	O	O
code	O	O
more	O	O
explicit	O	O
and	O	O
readable	O	O
in	O	O
some	O	O
situations	O	O
.	O	O
#	O	O
li	O	O
To	O	O
make	O	O
your	O	O
code	O	O
more	O	O
extensible	O	O
and	O	O
maintainable	O	O
:	O	O
Using	O	O
a	O	O
function	O	O
as	O	O
the	O	O
body	O	O
of	O	O
a	O	O
loop	O	O
allows	O	O
you	O	O
to	O	O
replace	O	O
this	O	O
function	O	O
with	O	O
different	O	O
implementations	O	O
(	O	O
see	O	O
Strategy	O	O
Pattern	O	B-api_mention
)	O	O
.	O	O
You	O	O
could	O	O
e	O	O
.	O	O
g	O	O
.	O	O
easily	O	O
replace	O	O
the	O	O
lambda	O	O
expression	O	O
with	O	O
a	O	O
method	O	O
call	O	O
,	O	O
that	O	O
may	O	O
be	O	O
overwritten	O	O
by	O	O
sub	O	O
-	O	O
classes	O	O
:	O	O
joins	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Then	O	O
you	O	O
could	O	O
provide	O	O
default	O	O
strategies	O	O
using	O	O
an	O	O
enum	O	O
,	O	O
that	O	O
implements	O	O
the	O	O
functional	O	O
interface	O	O
.	O	O
This	O	O
not	O	O
only	O	O
makes	O	O
your	O	O
code	O	O
more	O	O
extensible	O	O
,	O	O
it	O	O
also	O	O
increases	O	O
maintainability	O	O
because	O	O
it	O	O
decouples	O	O
the	O	O
loop	O	O
implementation	O	O
from	O	O
the	O	O
loop	O	O
declaration	O	O
.	O	O
#	O	O
li	O	O
To	O	O
make	O	O
your	O	O
code	O	O
more	O	O
debuggable	O	O
:	O	O
Seperating	O	O
the	O	O
loop	O	O
implementation	O	O
from	O	O
the	O	O
declaration	O	O
can	O	O
also	O	O
make	O	O
debugging	O	O
more	O	O
easy	O	O
,	O	O
because	O	O
you	O	O
could	O	O
have	O	O
a	O	O
specialized	O	O
debug	O	O
implementation	O	O
,	O	O
that	O	O
prints	O	O
out	O	O
debug	O	O
messages	O	O
,	O	O
without	O	O
the	O	O
need	O	O
to	O	O
clutter	O	O
your	O	O
main	O	O
code	O	O
with	O	O
if	O	O
(	O	O
args	O	O
)	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
debug	O	O
implementation	O	O
could	O	O
e	O	O
.	O	O
g	O	O
.	O	O
be	O	O
a	O	O
delegate	O	O
,	O	O
that	O	O
decorates	O	O
the	O	O
actual	O	O
function	O	O
implementation	O	O
.	O	O
#	O	O
li	O	O
To	O	O
optimize	O	O
performance	O	O
-	O	O
critical	O	O
code	O	O
:	O	O
Contrary	O	O
to	O	O
some	O	O
of	O	O
the	O	O
assertions	O	O
in	O	O
this	O	O
thread	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
does	O	O
already	O	O
provide	O	O
better	O	O
performance	O	O
than	O	O
a	O	O
traditional	O	O
for	O	O
-	O	O
each	O	O
loop	O	O
,	O	O
at	O	O
least	O	O
when	O	O
using	O	O
ArrayList	B-api_mention	B-api_mention
and	O	O
running	O	O
Hotspot	O	O
in	O	O
"	O	O
-	O	O
client	O	O
"	O	O
mode	O	O
.	O	O
While	O	O
this	O	O
performance	O	O
boost	O	O
is	O	O
small	O	O
and	O	O
negligible	O	O
for	O	O
most	O	O
use	O	O
cases	O	O
,	O	O
there	O	O
are	O	O
situations	O	O
,	O	O
where	O	O
this	O	O
extra	O	O
performance	O	O
can	O	O
make	O	O
a	O	O
difference	O	O
.	O	O
E	O	O
.	O	O
g	O	O
.	O	O
library	O	O
maintainers	O	O
will	O	O
certainly	O	O
want	O	O
to	O	O
evaluate	O	O
,	O	O
if	O	O
some	O	O
of	O	O
their	O	O
existing	O	O
loop	O	O
implementations	O	O
should	O	O
be	O	O
replaced	O	O
with	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
.	O	O
To	O	O
back	O	O
this	O	O
statement	O	O
up	O	O
with	O	O
facts	O	O
,	O	O
I	O	O
have	O	O
done	O	O
some	O	O
micro	O	O
-	O	O
benchmarks	O	O
with	O	O
Caliper	O	B-api_mention
.	O	O
Here	O	O
is	O	O
the	O	O
test	O	O
code	O	O
(	O	O
latest	O	O
Caliper	O	O
from	O	O
git	O	O
is	O	O
needed	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
are	O	O
the	O	O
results	O	O
:	O	O
#	O	O
li	O	O
Results	O	O
for	O	O
-	O	O
client	O	O
#	O	O
li	O	O
Results	O	O
for	O	O
-	O	O
server	O	O
When	O	O
running	O	O
with	O	O
"	O	O
-	O	O
client	O	O
"	O	O
,	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
outperforms	O	O
the	O	O
traditional	O	O
for	O	O
loop	O	O
over	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
,	O	O
but	O	O
is	O	O
still	O	O
slower	O	O
than	O	O
directly	O	O
iterating	O	O
over	O	O
an	O	O
array	O	O
.	O	O
When	O	O
running	O	O
with	O	O
"	O	O
-	O	O
server	O	O
"	O	O
,	O	O
the	O	O
performance	O	O
of	O	O
all	O	O
approaches	O	O
is	O	O
about	O	O
the	O	O
same	O	O
.	O	O
#	O	O
li	O	O
To	O	O
provide	O	O
optional	O	O
support	O	O
for	O	O
parallel	O	O
execution	O	O
:	O	O
It	O	O
has	O	O
already	O	O
been	O	O
said	O	O
here	O	O
,	O	O
that	O	O
the	O	O
possibility	O	O
to	O	O
execute	O	O
the	O	O
functional	O	O
interface	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
in	O	O
parallel	O	O
using	O	O
streams	O	O
,	O	O
is	O	O
certainly	O	O
an	O	O
important	O	O
aspect	O	O
.	O	O
Since	O	O
Collection	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
guarantee	O	O
,	O	O
that	O	O
the	O	O
loop	O	O
is	O	O
actually	O	O
executed	O	O
in	O	O
parallel	O	O
,	O	O
one	O	O
must	O	O
consider	O	O
this	O	O
an	O	O
optional	O	O
feature	O	O
.	O	O
By	O	O
iterating	O	O
over	O	O
your	O	O
list	O	O
with	O	O
list	O	O
.	B-api_mention	B-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
,	O	O
you	O	O
explicitly	O	O
say	O	O
:	O	O
This	O	O
loop	O	O
supports	O	O
parallel	O	O
execution	O	O
,	O	O
but	O	O
it	O	O
does	O	O
not	O	O
depend	O	O
on	O	O
it	O	O
.	O	O
Again	O	O
,	O	O
this	O	O
is	O	O
a	O	O
feature	O	O
and	O	O
not	O	O
a	O	O
deficit	O	O
!	O	O
By	O	O
moving	O	O
the	O	O
decision	O	O
for	O	O
parallel	O	O
execution	O	O
away	O	O
from	O	O
your	O	O
actual	O	O
loop	O	O
implementation	O	O
,	O	O
you	O	O
allow	O	O
optional	O	O
optimization	O	O
of	O	O
your	O	O
code	O	O
,	O	O
without	O	O
affecting	O	O
the	O	O
code	O	O
itself	O	O
,	O	O
which	O	O
is	O	O
a	O	O
good	O	O
thing	O	O
.	O	O
Also	O	O
,	O	O
if	O	O
the	O	O
default	O	O
parallel	O	O
stream	O	O
implementation	O	O
does	O	O
not	O	O
fit	O	O
your	O	O
needs	O	O
,	O	O
no	O	O
one	O	O
is	O	O
preventing	O	O
you	O	O
from	O	O
providing	O	O
your	O	O
own	O	O
implementation	O	O
.	O	O
You	O	O
could	O	O
e	O	O
.	O	O
g	O	O
.	O	O
provide	O	O
an	O	O
optimized	O	O
collection	O	O
depending	O	O
on	O	O
the	O	O
underlying	O	O
operating	O	O
system	O	O
,	O	O
on	O	O
the	O	O
size	O	O
of	O	O
the	O	O
collection	O	O
,	O	O
on	O	O
the	O	O
number	O	O
of	O	O
cores	O	O
,	O	O
and	O	O
on	O	O
some	O	O
preference	O	O
settings	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
nice	O	O
thing	O	O
here	O	O
is	O	O
,	O	O
that	O	O
your	O	O
loop	O	O
implementation	O	O
doesn	O	O
'	O	O
t	O	O
need	O	O
to	O	O
know	O	O
or	O	O
care	O	O
about	O	O
these	O	O
details	O	O
.	O	O
Question	O	O
-	O	O
26549659	O	O
Google	O	O
Guava	B-api_mention	O
has	O	O
a	O	O
predicate	O	O
that	O	O
always	O	O
returns	O	O
true	O	O
.	O	O
Does	O	O
Java	O	O
8	O	O
have	O	O
something	O	O
similar	O	O
for	O	O
its	O	O
Predicate	B-api_mention	B-api_mention
?	O	O
I	O	O
know	O	O
I	O	O
could	O	O
use	O	O
(	O	O
foo	O	O
)	O	O
-	O	O
>	O	O
{	O	O
return	O	O
true	O	O
;	O	O
}	O	O
,	O	O
but	O	O
I	O	O
want	O	O
something	O	O
pre	O	O
-	O	O
made	O	O
,	O	O
analogous	O	O
to	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
emptySet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
5439529	O	O
,	O	O
answer	O	O
-	O	O
5439600	O	O
As	O	O
an	O	O
alternative	O	O
to	O	O
trying	O	O
to	O	O
parse	O	O
the	O	O
string	O	O
and	O	O
catching	O	O
NumberFormatException	B-api_mention	B-api_mention
,	O	O
you	O	O
could	O	O
use	O	O
a	O	O
regex	O	O
;	O	O
e	O	O
.	O	O
g	O	O
.	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
likely	O	O
to	O	O
be	O	O
faster	O	O
,	O	O
especially	O	O
if	O	O
you	O	O
precompile	O	O
and	O	O
reuse	O	O
the	O	O
regex	O	O
.	O	O
However	O	O
,	O	O
the	O	O
catch	O	O
is	O	O
that	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
still	O	O
fail	O	O
if	O	O
str	O	O
represents	O	O
a	O	O
number	O	O
that	O	O
is	O	O
outside	O	O
range	O	O
of	O	O
legal	O	O
int	O	O
values	O	O
.	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032137	O	O
Unless	O	O
there	O	O
is	O	O
a	O	O
specific	O	O
optimization	O	O
that	O	O
checks	O	O
if	O	O
the	O	O
argument	O	O
passed	O	O
to	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
collection	O	O
itself	O	O
(	O	O
and	O	O
I	O	O
highly	O	O
doubt	O	O
that	O	O
such	O	O
an	O	O
optimization	O	O
is	O	O
there	O	O
)	O	O
it	O	O
will	O	O
be	O	O
significantly	O	O
slower	O	O
than	O	O
a	O	O
simple	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Apart	O	O
from	O	O
that	O	O
(	O	O
and	O	O
at	O	O
least	O	O
equally	O	O
important	O	O
)	O	O
:	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
removeAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
just	O	O
obtuse	O	O
,	O	O
confusing	O	O
code	O	O
.	O	O
It	O	O
is	O	O
a	O	O
very	O	O
backwards	O	O
way	O	O
of	O	O
saying	O	O
"	O	O
clear	O	O
this	O	O
collection	O	O
"	O	O
.	O	O
What	O	O
advantage	O	O
would	O	O
it	O	O
have	O	O
over	O	O
the	O	O
very	O	O
understandable	O	O
arraylist	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Question	O	O
-	O	O
16324831	O	O
,	O	O
answer	O	O
-	O	O
16324963	O	O
Note	O	O
:	O	O
everything	O	O
in	O	O
this	O	O
post	O	O
is	O	O
in	O	O
the	O	O
source	O	O
of	O	O
Java7	O	O
-	O	O
b147	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseDouble	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
goes	O	O
into	O	O
a	O	O
Sun	O	O
library	O	O
(	O	O
in	O	O
sun	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
misc	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
FloatingDecimal	I-api_mention	I-api_mention
)	O	O
the	O	O
first	O	O
important	O	O
thing	O	O
that	O	O
happens	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
done	O	O
manually	O	O
in	O	O
the	O	O
Integer	B-api_mention	B-api_mention
class	O	O
.	O	O
The	O	O
first	O	O
important	O	O
thing	O	O
that	O	O
happens	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
would	O	O
guess	O	O
there	O	O
are	O	O
two	O	O
different	O	O
authors	O	O
.	O	O
Question	O	O
-	O	O
4812570	O	O
,	O	O
answer	O	O
-	O	O
21765043	O	O
You	O	O
can	O	O
use	O	O
the	O	O
ExceptionUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getStackTrace	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
from	O	O
Apache	O	O
Commons	O	O
3	O	O
class	O	O
org	B-api_mention	O
.	I-api_mention	O
apache	I-api_mention	O
.	I-api_mention	O
commons	I-api_mention	O
.	I-api_mention	O
lang3	I-api_mention	O
.	I-api_mention	O
exception	I-api_mention	O
.	I-api_mention	O
ExceptionUtils	I-api_mention	B-api_mention
.	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
10904911	O	O
I	O	O
am	O	O
using	O	O
trying	O	O
to	O	O
use	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
but	O	O
I	O	O
think	O	O
I	O	O
am	O	O
doing	O	O
it	O	O
wrong	O	O
:	O	O
#	O	O
a	O	O
My	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
output	O	O
is	O	O
:	O	O
[	O	O
I	O	O
@	O	O
23fc4bec	O	O
Also	O	O
I	O	O
tried	O	O
printing	O	O
like	O	O
this	O	O
,	O	O
but	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
took	O	O
this	O	O
code	O	O
out	O	O
of	O	O
bigger	O	O
and	O	O
more	O	O
complex	O	O
code	O	O
,	O	O
but	O	O
I	O	O
can	O	O
add	O	O
it	O	O
if	O	O
needed	O	O
.	O	O
But	O	O
this	O	O
should	O	O
give	O	O
general	O	O
information	O	O
.	O	O
I	O	O
am	O	O
looking	O	O
for	O	O
output	O	O
,	O	O
like	O	O
in	O	O
Oracle	O	O
'	O	O
s	O	O
documentation	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
21488056	O	O
,	O	O
answer	O	O
-	O	O
36242382	O	O
You	O	O
can	O	O
use	O	O
Predicates	O	B-api_mention
from	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
#	O	O
pre	O	O
If	O	O
you	O	O
can	O	O
'	O	O
t	O	O
change	O	O
the	O	O
strings	O	O
from	O	O
List	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
only	O	O
need	O	O
a	O	O
negation	O	O
of	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
can	O	O
also	O	O
use	O	O
StringPredicates	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
notEmpty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
a	O	O
contributor	O	O
to	O	O
Eclipse	O	O
Collections	O	B-api_mention
.	O	O
Question	O	O
-	O	O
5778658	O	O
,	O	O
answer	O	O
-	O	O
10768914	O	O
You	O	O
will	O	O
need	O	O
an	O	O
intermediate	O	O
class	O	O
which	O	O
will	O	O
buffer	O	O
between	O	O
.	O	O
Each	O	O
time	O	O
InputStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
read	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
called	O	O
,	O	O
the	O	O
buffering	O	O
class	O	O
will	O	O
fill	O	O
the	O	O
passed	O	O
in	O	O
byte	O	O
array	O	O
with	O	O
the	O	O
next	O	O
chunk	O	O
passed	O	O
in	O	O
from	O	O
OutputStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
write	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Since	O	O
the	O	O
sizes	O	O
of	O	O
the	O	O
chunks	O	O
may	O	O
not	O	O
be	O	O
the	O	O
same	O	O
,	O	O
the	O	O
adapter	O	O
class	O	O
will	O	O
need	O	O
to	O	O
store	O	O
a	O	O
certain	O	O
amount	O	O
until	O	O
it	O	O
has	O	O
enough	O	O
to	O	O
fill	O	O
the	O	O
read	O	O
buffer	O	O
and	O	O
/	O	O
or	O	O
be	O	O
able	O	O
to	O	O
store	O	O
up	O	O
any	O	O
buffer	O	O
overflow	O	O
.	O	O
This	O	O
article	O	O
has	O	O
a	O	O
nice	O	O
breakdown	O	O
of	O	O
a	O	O
few	O	O
different	O	O
approaches	O	O
to	O	O
this	O	O
problem	O	O
:	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
32693704	O	O
,	O	O
answer	O	O
-	O	O
32744190	O	O
There	O	O
is	O	O
no	O	O
actual	O	O
difference	O	O
in	O	O
the	O	O
functionality	O	O
between	O	O
the	O	O
2	O	O
version	O	O
'	O	O
s	O	O
loop	O	O
.	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
does	O	O
the	O	O
exact	O	O
same	O	O
thing	O	O
.	O	O
So	O	O
the	O	O
choice	O	O
to	O	O
use	O	O
it	O	O
or	O	O
not	O	O
may	O	O
not	O	O
necessarily	O	O
be	O	O
considered	O	O
a	O	O
mistake	O	O
.	O	O
It	O	O
is	O	O
left	O	O
up	O	O
to	O	O
the	O	O
developer	O	O
to	O	O
decide	O	O
when	O	O
it	O	O
comes	O	O
to	O	O
this	O	O
kind	O	O
of	O	O
micromanagement	O	O
.	O	O
There	O	O
are	O	O
2	O	O
separate	O	O
concerns	O	O
for	O	O
each	O	O
approach	O	O
:	O	O
#	O	O
li	O	O
using	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
makes	O	O
the	O	O
code	O	O
less	O	O
verbose	O	O
and	O	O
more	O	O
readable	O	O
.	O	O
#	O	O
li	O	O
looping	O	O
directly	O	O
in	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
code	O	O
(	O	O
like	O	O
version	O	O
8	O	O
)	O	O
peformance	O	O
wise	O	O
is	O	O
actually	O	O
a	O	O
better	O	O
option	O	O
.	O	O
While	O	O
the	O	O
overhead	O	O
that	O	O
inserting	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
is	O	O
negligible	O	O
it	O	O
may	O	O
become	O	O
less	O	O
so	O	O
when	O	O
it	O	O
comes	O	O
to	O	O
something	O	O
as	O	O
widespread	O	O
as	O	O
HashMap	B-api_mention	B-api_mention
where	O	O
every	O	O
bit	O	O
of	O	O
performance	O	O
enhancement	O	O
has	O	O
a	O	O
large	O	O
effect	O	O
(	O	O
imagine	O	O
the	O	O
tiniest	O	O
footprint	O	O
reduce	O	O
of	O	O
a	O	O
HashMap	B-api_mention	B-api_mention
in	O	O
fullblown	O	O
webapp	O	O
)	O	O
.	O	O
Take	O	O
into	O	O
consideration	O	O
the	O	O
fact	O	O
that	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
class	O	O
was	O	O
used	O	O
only	O	O
for	O	O
this	O	O
one	O	O
loop	O	O
.	O	O
The	O	O
change	O	O
is	O	O
small	O	O
enough	O	O
that	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
the	O	O
clear	O	O
method	O	O
less	O	O
readable	O	O
.	O	O
The	O	O
precise	O	O
reason	O	O
can	O	O
'	O	O
t	O	O
be	O	O
found	O	O
out	O	O
without	O	O
asking	O	O
the	O	O
developer	O	O
who	O	O
actually	O	O
did	O	O
this	O	O
,	O	O
however	O	O
i	O	O
suspect	O	O
it	O	O
'	O	O
s	O	O
either	O	O
a	O	O
mistake	O	O
or	O	O
a	O	O
small	O	O
enhancement	O	O
.	O	O
better	O	O
option	O	O
.	O	O
My	O	O
opinion	O	O
is	O	O
it	O	O
can	O	O
be	O	O
considered	O	O
an	O	O
enhancement	O	O
,	O	O
even	O	O
if	O	O
only	O	O
by	O	O
accident	O	O
.	O	O
Question	O	O
-	O	O
23114015	O	O
,	O	O
answer	O	O
-	O	O
23177907	O	O
This	O	O
was	O	O
not	O	O
an	O	O
omission	O	O
;	O	O
there	O	O
was	O	O
detailed	O	O
discussion	O	O
on	O	O
the	O	O
EG	O	O
list	O	O
in	O	O
June	O	O
of	O	O
2013	O	O
.	O	O
The	O	O
definitive	O	O
discussion	O	O
of	O	O
the	O	O
Expert	O	O
Group	O	O
is	O	O
rooted	O	O
at	O	O
this	O	O
thread	O	O
.	O	O
While	O	O
it	O	O
seemed	O	O
"	O	O
obvious	O	O
"	O	O
(	O	O
even	O	O
to	O	O
the	O	O
Expert	O	O
Group	O	O
,	O	O
initially	O	O
)	O	O
that	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
seemed	O	O
to	O	O
make	O	O
sense	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
the	O	O
fact	O	O
that	O	O
Iterable	B-api_mention	B-api_mention
was	O	O
so	O	O
general	O	O
became	O	O
a	O	O
problem	O	O
,	O	O
because	O	O
the	O	O
obvious	O	O
signature	O	O
:	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
not	O	O
always	O	O
what	O	O
you	O	O
were	O	O
going	O	O
to	O	O
want	O	O
.	O	O
Some	O	O
things	O	O
that	O	O
were	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
would	O	O
rather	O	O
have	O	O
their	O	O
stream	O	O
method	O	O
return	O	O
an	O	O
IntStream	B-api_mention	B-api_mention
,	O	O
for	O	O
example	O	O
.	O	O
But	O	O
putting	O	O
the	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
this	O	O
high	O	O
up	O	O
in	O	O
the	O	O
hierarchy	O	O
would	O	O
make	O	O
that	O	O
impossible	O	O
.	O	O
So	O	O
instead	O	O
,	O	O
we	O	O
made	O	O
it	O	O
really	O	O
easy	O	O
to	O	O
make	O	O
a	O	O
Stream	B-api_mention	B-api_mention
from	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
by	O	O
providing	O	O
a	O	O
spliterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
implementation	O	O
of	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
Collection	B-api_mention	B-api_mention
is	O	O
just	O	O
:	O	O
#	O	O
pre	O	O
Any	O	O
client	O	O
can	O	O
get	O	O
the	O	O
stream	O	O
they	O	O
want	O	O
from	O	O
an	O	O
Iterable	O	B-api_mention
with	O	O
:	O	O
Stream	B-api_mention	B-api_mention
s	O	O
=	O	O
StreamSupport	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
In	O	O
the	O	O
end	O	O
we	O	O
concluded	O	O
that	O	O
adding	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
Iterable	O	B-api_mention
would	O	O
be	O	O
a	O	O
mistake	O	O
.	O	O
Question	O	O
-	O	O
30384955	O	O
,	O	O
answer	O	O
-	O	O
30385343	O	O
This	O	O
happens	O	O
because	O	O
of	O	O
the	O	O
way	O	O
capture	O	O
conversion	O	O
works	O	O
:	O	O
#	O	O
blockquote	O	O
Note	O	O
the	O	O
end	O	O
bit	O	O
.	O	O
So	O	O
,	O	O
what	O	O
this	O	O
means	O	O
is	O	O
that	O	O
,	O	O
given	O	O
a	O	O
type	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Only	O	O
"	O	O
outside	O	O
"	O	O
wildcards	O	O
are	O	O
captured	O	O
.	O	O
The	O	O
Map	O	B-api_mention
key	O	O
wildcard	O	O
is	O	O
captured	O	O
,	O	O
but	O	O
the	O	O
List	O	B-api_mention
element	O	O
wildcard	O	O
is	O	O
not	O	O
.	O	O
This	O	O
is	O	O
why	O	O
,	O	O
for	O	O
example	O	O
,	O	O
we	O	O
can	O	O
add	O	O
to	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
but	O	O
not	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
The	O	O
placement	O	O
of	O	O
the	O	O
wildcard	O	O
is	O	O
what	O	O
matters	O	O
.	O	O
Carrying	O	O
this	O	O
over	O	O
to	O	O
TbinList	O	O
,	O	O
if	O	O
we	O	O
have	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
the	O	O
wildcard	O	O
is	O	O
in	O	O
a	O	O
place	O	O
where	O	O
it	O	O
does	O	O
not	O	O
get	O	O
captured	O	O
,	O	O
but	O	O
if	O	O
we	O	O
have	O	O
a	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
,	O	O
the	O	O
wildcard	O	O
is	O	O
in	O	O
a	O	O
place	O	O
where	O	O
it	O	O
gets	O	O
captured	O	O
.	O	O
As	O	O
I	O	O
alluded	O	O
to	O	O
in	O	O
the	O	O
comments	O	O
,	O	O
one	O	O
very	O	O
interesting	O	O
test	O	O
is	O	O
this	O	O
:	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
test3	O	O
=	O	O
new	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
(	O	O
args	O	O
)	O	O
;	O	O
We	O	O
get	O	O
this	O	O
error	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
there	O	O
'	O	O
s	O	O
no	O	O
way	O	O
to	O	O
make	O	O
it	O	O
work	O	O
as	O	O
-	O	O
is	O	O
.	O	O
One	O	O
of	O	O
the	O	O
class	O	O
declarations	O	O
needs	O	O
to	O	O
be	O	O
changed	O	O
.	O	O
Additionally	O	O
,	O	O
think	O	O
about	O	O
it	O	O
this	O	O
way	O	O
.	O	O
Suppose	O	O
we	O	O
had	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
since	O	O
a	O	O
wildcard	O	O
allows	O	O
subtyping	O	O
,	O	O
we	O	O
can	O	O
do	O	O
this	O	O
:	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
test4	O	O
=	O	O
new	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
(	O	O
args	O	O
)	O	O
;	O	O
Should	O	O
we	O	O
be	O	O
able	O	O
to	O	O
add	O	O
a	O	O
Tbin	O	O
<	O	O
T	O	O
>	O	O
to	O	O
test4	O	O
?	O	O
No	O	O
,	O	O
this	O	O
would	O	O
be	O	O
heap	O	O
pollution	O	O
.	O	O
We	O	O
might	O	O
end	O	O
up	O	O
with	O	O
Derived2	O	O
s	O	O
floating	O	O
around	O	O
in	O	O
a	O	O
TbinList	O	O
<	O	O
T	O	O
>	O	O
.	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
28319148	O	O
I	O	O
prefer	O	O
the	O	O
second	O	O
way	O	O
.	O	O
When	O	O
you	O	O
use	O	O
the	O	O
first	O	O
way	O	O
,	O	O
if	O	O
you	O	O
decide	O	O
to	O	O
use	O	O
a	O	O
parallel	O	O
stream	O	O
to	O	O
improve	O	O
performance	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
no	O	O
control	O	O
over	O	O
the	O	O
order	O	O
in	O	O
which	O	O
the	O	O
elements	O	O
will	O	O
be	O	O
added	O	O
to	O	O
the	O	O
output	O	O
list	O	O
by	O	O
forEach	B-api_mention	B-api_mention
.	O	O
When	O	O
you	O	O
use	O	O
toList	B-api_mention	B-api_mention
,	O	O
the	O	O
Streams	O	B-api_mention
API	O	O
will	O	O
preserve	O	O
the	O	O
order	O	O
even	O	O
if	O	O
you	O	O
use	O	O
a	O	O
parallel	O	O
stream	O	O
.	O	O
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
34295445	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
We	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
extract	O	O
request	O	O
parameters	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
data	O	O
sent	O	O
by	O	O
posting	O	O
a	O	O
html	O	O
form	O	O
)	O	O
.	O	O
The	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
always	O	O
returns	O	O
String	B-api_mention	B-api_mention
value	O	O
and	O	O
the	O	O
data	O	O
come	O	O
from	O	O
client	O	O
.	O	O
request	O	O
.	B-api_mention	B-api_mention
getAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
We	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
getAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
an	O	O
object	O	O
added	O	O
to	O	O
the	O	O
request	O	O
scope	O	O
on	O	O
the	O	O
server	O	O
side	O	O
i	O	O
.	O	O
e	O	O
.	O	O
using	O	O
request	O	O
.	B-api_mention	B-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
You	O	O
can	O	O
add	O	O
any	O	O
type	O	O
of	O	O
object	O	O
you	O	O
like	O	O
here	O	O
,	O	O
Strings	O	B-api_mention
,	O	O
Custom	O	B-api_mention
objects	O	O
,	O	O
in	O	O
fact	O	O
any	O	O
object	O	O
.	O	O
You	O	O
add	O	O
the	O	O
attribute	O	O
to	O	O
the	O	O
request	O	O
and	O	O
forward	O	O
the	O	O
request	O	O
to	O	O
another	O	O
resource	O	O
,	O	O
the	O	O
client	O	O
does	O	O
not	O	O
know	O	O
about	O	O
this	O	O
.	O	O
So	O	O
all	O	O
the	O	O
code	O	O
handling	O	O
this	O	O
would	O	O
typically	O	O
be	O	O
in	O	O
JSP	O	O
/	O	O
servlets	O	O
.	O	O
You	O	O
can	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
add	O	O
extra	O	O
-	O	O
information	O	O
and	O	O
forward	O	O
/	O	O
redirect	O	O
the	O	O
current	O	O
request	O	O
to	O	O
another	O	O
resource	O	O
.	O	O
For	O	O
example	O	O
,	O	O
consider	O	O
about	O	O
first	O	O
.	O	O
jsp	O	O
,	O	O
#	O	O
pre	O	O
and	O	O
second	O	O
.	O	O
jsp	O	O
:	O	O
#	O	O
pre	O	O
From	O	O
your	O	O
browser	O	O
,	O	O
run	O	O
first	O	O
.	O	O
jsp	O	O
?	O	O
CLIENT	O	O
=	O	O
you	O	O
and	O	O
the	O	O
output	O	O
on	O	O
your	O	O
browser	O	O
is	O	O
#	O	O
pre	O	O
The	O	O
basic	O	O
difference	O	O
between	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getParameter	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
that	O	O
the	O	O
first	O	O
method	O	O
extracts	O	O
a	O	O
(	O	O
serialized	O	O
)	O	O
Java	O	O
object	O	O
and	O	O
the	O	O
other	O	O
provides	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
.	O	O
For	O	O
both	O	O
cases	O	O
a	O	O
name	O	O
is	O	O
given	O	O
so	O	O
that	O	O
its	O	O
value	O	O
(	O	O
be	O	O
it	O	O
string	O	O
or	O	O
a	O	O
java	O	O
bean	O	O
)	O	O
can	O	O
be	O	O
looked	O	O
up	O	O
and	O	O
extracted	O	O
.	O	O
Question	O	O
-	O	O
29328785	O	O
,	O	O
answer	O	O
-	O	O
29330741	O	O
It	O	O
'	O	O
s	O	O
not	O	O
so	O	O
hard	O	O
to	O	O
track	O	O
down	O	O
the	O	O
reason	O	O
for	O	O
the	O	O
odd	O	O
behavior	O	O
.	O	O
The	O	O
divide	O	O
call	O	O
goes	O	O
to	O	O
#	O	O
pre	O	O
This	O	O
,	O	O
internally	O	O
,	O	O
delegates	O	O
to	O	O
another	O	O
divide	O	O
method	O	O
,	O	O
based	O	O
on	O	O
the	O	O
rounding	O	O
mode	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
this	O	O
case	O	O
,	O	O
the	O	O
last	O	O
call	O	O
applies	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
intVal	O	O
(	O	O
which	O	O
is	O	O
a	O	O
BigInteger	B-api_mention	B-api_mention
that	O	O
is	O	O
stored	O	O
in	O	O
the	O	O
BigDecimal	B-api_mention	B-api_mention
)	O	O
is	O	O
passed	O	O
directly	O	O
to	O	O
this	O	O
method	O	O
as	O	O
the	O	O
first	O	O
argument	O	O
:	O	O
#	O	O
pre	O	O
Finally	O	O
,	O	O
the	O	O
path	O	O
to	O	O
the	O	O
second	O	O
divideAndRound	O	O
is	O	O
taken	O	O
here	O	O
,	O	O
again	O	O
passing	O	O
the	O	O
dividend	O	O
on	O	O
(	O	O
which	O	O
was	O	O
the	O	O
intVal	O	O
of	O	O
the	O	O
original	O	O
BigDecimal	B-api_mention	B-api_mention
)	O	O
,	O	O
ending	O	O
up	O	O
with	O	O
this	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
this	O	O
is	O	O
where	O	O
the	O	O
error	O	O
is	O	O
introduced	O	O
:	O	O
The	O	O
mdivididend	O	O
is	O	O
a	O	O
mutable	O	O
BigInteger	B-api_mention	B-api_mention
,	O	O
that	O	O
was	O	O
created	O	O
as	O	O
a	O	O
mutable	O	O
view	O	O
on	O	O
the	O	O
mag	O	O
array	O	O
of	O	O
the	O	O
BigInteger	B-api_mention	B-api_mention
that	O	O
is	O	O
stored	O	O
in	O	O
the	O	O
BigDecimal	B-api_mention	B-api_mention
x	O	O
from	O	O
the	O	O
original	O	O
call	O	O
.	O	O
The	O	O
division	O	O
modifies	O	O
the	O	O
mag	O	O
field	O	O
,	O	O
and	O	O
thus	O	O
,	O	O
the	O	O
state	O	O
of	O	O
the	O	O
(	O	O
now	O	O
not	O	O
-	O	O
so	O	O
-	O	O
immutable	O	O
)	O	O
BigDecimal	B-api_mention	B-api_mention
.	O	O
This	O	O
is	O	O
clearly	O	O
a	O	O
bug	O	O
in	O	O
the	O	O
implementation	O	O
of	O	O
one	O	O
of	O	O
the	O	O
divide	O	O
methods	O	O
.	O	O
I	O	O
already	O	O
started	O	O
tracking	O	O
the	O	O
change	O	O
sets	O	O
of	O	O
the	O	O
OpenJDK	O	O
,	O	O
but	O	O
have	O	O
not	O	O
yet	O	O
spotted	O	O
the	O	O
definite	O	O
culprit	O	O
.	O	O
(	O	O
Edit	O	O
:	O	O
See	O	O
updates	O	O
below	O	O
)	O	O
(	O	O
A	O	O
side	O	O
note	O	O
:	O	O
Calling	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
before	O	O
doing	O	O
the	O	O
division	O	O
does	O	O
not	O	O
really	O	O
avoid	O	O
,	O	O
but	O	O
only	O	O
hide	O	O
the	O	O
bug	O	O
:	O	O
It	O	O
causes	O	O
a	O	O
string	O	O
cache	O	O
of	O	O
the	O	O
correct	O	O
state	O	O
to	O	O
be	O	O
created	O	O
internally	O	O
.	O	O
The	O	O
right	O	O
value	O	O
is	O	O
printed	O	O
,	O	O
but	O	O
the	O	O
internal	O	O
state	O	O
is	O	O
still	O	O
wrong	O	O
-	O	O
which	O	O
is	O	O
concerning	O	O
,	O	O
to	O	O
say	O	O
the	O	O
least	O	O
.	O	O
.	O	O
.	O	O
)	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
34172978	O	O
#	O	O
pre	O	O
Counter	O	O
to	O	O
my	O	O
expectation	O	O
,	O	O
the	O	O
collect	O	O
call	O	O
never	O	O
returns	O	O
.	O	O
Setting	O	O
limit	O	O
before	O	O
filter	O	O
produces	O	O
the	O	O
expected	O	O
result	O	O
.	O	O
Why	O	O
?	O	O
Question	O	O
-	O	O
12575990	O	O
,	O	O
answer	O	O
-	O	O
12576219	O	O
A	O	O
Java	O	O
Date	B-api_mention	B-api_mention
is	O	O
a	O	O
container	O	O
for	O	O
the	O	O
number	O	O
of	O	O
milliseconds	O	O
since	O	O
January	O	O
1	O	O
,	O	O
1970	O	O
,	O	O
00	O	O
:	O	O
00	O	O
:	O	O
00	O	O
GMT	O	O
.	O	O
When	O	O
you	O	O
use	O	O
something	O	O
like	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
Java	O	O
uses	O	O
Date	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
print	O	O
the	O	O
contents	O	O
.	O	O
The	O	O
only	O	O
way	O	O
to	O	O
change	O	O
it	O	O
is	O	O
to	O	O
override	O	O
Date	O	B-api_mention
and	O	O
provide	O	O
your	O	O
own	O	O
implementation	O	O
of	O	O
Date	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Now	O	O
before	O	O
you	O	O
fire	O	O
up	O	O
your	O	O
IDE	O	O
and	O	O
try	O	O
this	O	O
,	O	O
I	O	O
wouldn	O	O
'	O	O
t	O	O
;	O	O
it	O	O
will	O	O
only	O	O
complicate	O	O
matters	O	O
.	O	O
You	O	O
are	O	O
better	O	O
off	O	O
formatting	O	O
the	O	O
date	O	O
to	O	O
the	O	O
format	O	O
you	O	O
want	O	O
to	O	O
use	O	O
(	O	O
or	O	O
display	O	O
)	O	O
.	O	O
What	O	O
you	O	O
can	O	O
do	O	O
,	O	O
is	O	O
format	O	O
the	O	O
date	O	O
.	O	O
#	O	O
pre	O	O
These	O	O
are	O	O
actually	O	O
the	O	O
same	O	O
date	O	O
,	O	O
represented	O	O
differently	O	O
.	O	O
Question	O	O
-	O	O
19998454	O	O
,	O	O
answer	O	O
-	O	O
19998652	O	O
This	O	O
is	O	O
being	O	O
described	O	O
in	O	O
this	O	O
article	O	O
.	O	O
Think	O	O
about	O	O
forEach	B-api_mention	B-api_mention
of	O	O
Collections	O	B-api_mention
.	O	I-api_mention
List	B-api_mention	I-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
…	O	O
list	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
14526260	O	O
,	O	O
answer	O	O
-	O	O
14526289	O	O
just	O	O
use	O	O
File	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
pre	O	O
using	O	O
String	O	B-api_mention
methods	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32356762	O	O
,	O	O
answer	O	O
-	O	O
32357149	O	O
Disclaimer	O	O
:	O	O
I	O	O
am	O	O
not	O	O
a	O	O
JDK	O	O
author	O	O
.	O	O
I	O	O
agree	O	O
that	O	O
it	O	O
'	O	O
s	O	O
correct	O	O
to	O	O
write	O	O
your	O	O
own	O	O
code	O	O
to	O	O
interfaces	O	O
,	O	O
but	O	O
if	O	O
you	O	O
'	O	O
re	O	O
going	O	O
return	O	O
a	O	O
mutable	O	O
collection	O	O
to	O	O
a	O	O
third	O	O
party	O	O
,	O	O
it	O	O
'	O	O
s	O	O
important	O	O
to	O	O
let	O	O
the	O	O
third	O	O
party	O	O
know	O	O
what	O	O
sort	O	O
of	O	O
List	B-api_mention	B-api_mention
they	O	O
'	O	O
re	O	O
getting	O	O
back	O	O
.	O	O
LinkedList	B-api_mention	B-api_mention
and	O	O
ArrayList	B-api_mention	B-api_mention
are	O	O
very	O	O
different	O	O
,	O	O
performance	O	O
wise	O	O
,	O	O
for	O	O
various	O	O
operations	O	O
.	O	O
For	O	O
example	O	O
,	O	O
removing	O	O
the	O	O
first	O	O
element	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
O	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
but	O	O
removing	O	O
the	O	O
first	O	O
element	O	O
of	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
is	O	O
O	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	O
By	O	O
fully	O	O
specifying	O	O
the	O	O
return	O	O
type	O	O
,	O	O
the	O	O
JDK	O	O
authors	O	O
are	O	O
communicating	O	O
extra	O	O
information	O	O
,	O	O
in	O	O
unambiguous	O	O
code	O	O
,	O	O
about	O	O
what	O	O
sort	O	O
of	O	O
object	O	O
they	O	O
'	O	O
re	O	O
giving	O	O
back	O	O
to	O	O
you	O	O
,	O	O
so	O	O
you	O	O
can	O	O
write	O	O
your	O	O
code	O	O
to	O	O
use	O	O
this	O	O
method	O	O
properly	O	O
.	O	O
If	O	O
you	O	O
really	O	O
need	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
,	O	O
you	O	O
know	O	O
that	O	O
you	O	O
have	O	O
to	O	O
specify	O	O
one	O	O
here	O	O
.	O	O
Finally	O	O
,	O	O
the	O	O
main	O	O
reason	O	O
to	O	O
code	O	O
to	O	O
an	O	O
interface	O	O
over	O	O
an	O	O
implementation	O	O
is	O	O
if	O	O
you	O	O
think	O	O
that	O	O
the	O	O
implementation	O	O
will	O	O
change	O	O
.	O	O
The	O	O
JDK	O	O
authors	O	O
probably	O	O
figure	O	O
they	O	O
are	O	O
never	O	O
going	O	O
to	O	O
change	O	O
this	O	O
method	O	O
;	O	O
it	O	O
'	O	O
s	O	O
never	O	O
going	O	O
to	O	O
return	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
or	O	O
a	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
UnmodifiableList	I-api_mention	I-api_mention
.	O	O
However	O	O
,	O	O
in	O	O
most	O	O
cases	O	O
,	O	O
you	O	O
would	O	O
probably	O	O
still	O	O
do	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
33635717	O	O
I	O	O
'	O	O
m	O	O
reading	O	O
up	O	O
about	O	O
Java	O	O
streams	O	O
and	O	O
discovering	O	O
new	O	O
things	O	O
as	O	O
I	O	O
go	O	O
along	O	O
.	O	O
One	O	O
of	O	O
the	O	O
new	O	O
things	O	O
I	O	O
found	O	O
was	O	O
the	O	O
peek	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
function	O	O
.	O	O
Almost	O	O
everything	O	O
I	O	O
'	O	O
ve	O	O
read	O	O
on	O	O
peek	O	O
says	O	O
it	O	O
should	O	O
be	O	O
used	O	O
to	O	O
debug	O	O
your	O	O
Streams	O	B-api_mention
.	O	O
What	O	O
if	O	O
I	O	O
had	O	O
a	O	O
Stream	B-api_mention	B-api_mention
where	O	O
each	O	O
Account	O	O
has	O	O
a	O	O
username	O	O
,	O	O
password	O	O
field	O	O
and	O	O
a	O	O
login	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
and	O	O
loggedIn	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
method	O	O
.	O	O
I	O	O
also	O	O
have	O	O
Consumer	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
login	O	O
=	O	O
account	O	O
-	O	O
>	O	O
account	O	O
.	O	O
login	O	O
(	O	O
args	O	O
)	O	O
;	O	O
and	O	O
Predicate	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
loggedIn	O	O
=	O	O
account	O	O
-	O	O
>	O	O
account	O	O
.	O	B-api_mention
loggedIn	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
Why	O	O
would	O	O
this	O	O
be	O	O
so	O	O
bad	O	O
?	O	O
#	O	O
pre	O	O
Now	O	O
as	O	O
far	O	O
as	O	O
I	O	O
can	O	O
tell	O	O
this	O	O
does	O	O
exactly	O	O
what	O	O
it	O	O
'	O	O
s	O	O
intended	O	O
to	O	O
do	O	O
.	O	O
It	O	O
;	O	O
#	O	O
li	O	O
Takes	O	O
a	O	O
list	O	O
of	O	O
accounts	O	O
#	O	O
li	O	O
Tries	O	O
to	O	O
log	O	O
in	O	O
to	O	O
each	O	O
account	O	O
#	O	O
li	O	O
Filters	O	O
out	O	O
any	O	O
account	O	O
which	O	O
aren	O	O
'	O	O
t	O	O
logged	O	O
in	O	O
#	O	O
li	O	O
Collects	O	O
the	O	O
logged	O	O
in	O	O
accounts	O	O
into	O	O
a	O	O
new	O	O
list	O	O
What	O	O
is	O	O
the	O	O
downside	O	O
of	O	O
doing	O	O
something	O	O
like	O	O
this	O	O
?	O	O
Any	O	O
reason	O	O
I	O	O
shouldn	O	O
'	O	O
t	O	O
proceed	O	O
?	O	O
Lastly	O	O
,	O	O
if	O	O
not	O	O
this	O	O
solution	O	O
then	O	O
what	O	O
?	O	O
The	O	O
original	O	O
version	O	O
of	O	O
this	O	O
used	O	O
the	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
as	O	O
follows	O	O
;	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
7520464	O	O
In	O	O
general	O	O
,	O	O
the	O	O
answer	O	O
to	O	O
your	O	O
question	O	O
is	O	O
"	O	O
yes	O	O
"	O	O
,	O	O
but	O	O
.	O	O
.	O	O
.	O	O
#	O	O
li	O	O
equals	B-api_mention	O
will	O	O
only	O	O
compare	O	O
what	O	O
it	O	O
is	O	O
written	O	O
to	O	O
compare	O	O
,	O	O
no	O	O
more	O	O
,	O	O
no	O	O
less	O	O
.	O	O
#	O	O
li	O	O
if	O	O
a	O	O
class	O	O
does	O	O
not	O	O
override	O	O
the	O	O
equals	O	B-api_mention
method	O	O
,	O	O
then	O	O
it	O	O
defaults	O	O
to	O	O
the	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
the	O	O
closest	O	O
parent	O	O
class	O	O
that	O	O
has	O	O
overridden	O	O
this	O	O
method	O	O
.	O	O
#	O	O
li	O	O
If	O	O
no	O	O
parent	O	O
classes	O	O
have	O	O
provided	O	O
an	O	O
override	O	O
,	O	O
then	O	O
it	O	O
defaults	O	O
to	O	O
the	O	O
method	O	O
from	O	O
the	O	O
ultimate	O	O
parent	O	O
class	O	O
,	O	O
Object	B-api_mention	B-api_mention
,	O	O
and	O	O
so	O	O
you	O	O
'	O	O
re	O	O
left	O	O
with	O	O
the	O	O
Object	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
Per	O	O
the	O	O
Object	O	B-api_mention
API	O	O
this	O	O
is	O	O
the	O	O
same	O	O
as	O	O
=	O	O
=	O	O
;	O	O
that	O	O
is	O	O
,	O	O
it	O	O
returns	O	O
true	O	O
if	O	O
and	O	O
only	O	O
if	O	O
both	O	O
variables	O	O
refer	O	O
to	O	O
the	O	O
same	O	O
object	O	O
,	O	O
if	O	O
their	O	O
references	O	O
are	O	O
one	O	O
and	O	O
the	O	O
same	O	O
.	O	O
Thus	O	O
you	O	O
will	O	O
be	O	O
testing	O	O
for	O	O
object	O	O
equality	O	O
and	O	O
not	O	O
functional	O	O
equality	O	O
.	O	O
#	O	O
li	O	O
Always	O	O
remember	O	O
to	O	O
override	O	O
hashCode	B-api_mention	B-api_mention
if	O	O
you	O	O
override	O	O
equals	O	O
so	O	O
as	O	O
not	O	O
to	O	O
"	O	O
break	O	O
the	O	O
contract	O	O
"	O	O
.	O	O
As	O	O
per	O	O
the	O	O
API	O	O
,	O	O
the	O	O
result	O	O
returned	O	O
from	O	O
the	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
for	O	O
two	O	O
objects	O	O
must	O	O
be	O	O
the	O	O
same	O	O
if	O	O
their	O	O
equals	O	O
methods	O	O
shows	O	O
that	O	O
they	O	O
are	O	O
equivalent	O	O
.	O	O
The	O	O
converse	O	O
is	O	O
not	O	O
necessarily	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846964	O	O
For	O	O
one	O	O
,	O	O
you	O	O
can	O	O
get	O	O
away	O	O
with	O	O
reference	O	O
sharing	O	O
.	O	O
A	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
etc	O	O
will	O	O
require	O	O
an	O	O
allocated	O	O
object	O	O
,	O	O
and	O	O
possibly	O	O
some	O	O
extra	O	O
elements	O	O
to	O	O
hold	O	O
the	O	O
data	O	O
,	O	O
but	O	O
you	O	O
only	O	O
need	O	O
one	O	O
copy	O	O
of	O	O
an	O	O
immutable	O	O
empty	O	O
collection	O	O
(	O	O
list	O	O
,	O	O
set	O	O
,	O	O
map	O	O
,	O	O
or	O	O
any	O	O
other	O	O
such	O	O
)	O	O
.	O	O
This	O	O
makes	O	O
it	O	O
an	O	O
obvious	O	O
choice	O	O
when	O	O
a	O	O
method	O	O
you	O	O
'	O	O
re	O	O
calling	O	O
needs	O	O
to	O	O
accept	O	O
a	O	O
Map	B-api_mention	B-api_mention
but	O	O
does	O	O
not	O	O
need	O	O
to	O	O
edit	O	O
it	O	O
.	O	O
I	O	O
suggest	O	O
checking	O	O
out	O	O
Josh	O	O
Bloch	O	O
'	O	O
s	O	O
Effective	O	O
Java	O	O
,	O	O
which	O	O
lists	O	O
some	O	O
very	O	O
nice	O	O
attributes	O	O
of	O	O
immutable	O	O
objects	O	O
(	O	O
including	O	O
thread	O	O
safety	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
6684665	O	O
,	O	O
answer	O	O
-	O	O
6684935	O	O
If	O	O
you	O	O
want	O	O
to	O	O
convert	O	O
the	O	O
string	O	O
back	O	O
into	O	O
a	O	O
byte	O	O
array	O	O
you	O	O
will	O	O
need	O	O
to	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getBytes	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
or	O	O
equivalent	O	O
Python	O	O
function	O	O
)	O	O
and	O	O
this	O	O
will	O	O
allow	O	O
you	O	O
print	O	O
out	O	O
the	O	O
original	O	O
byte	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
6652687	O	O
,	O	O
answer	O	O
-	O	O
6652772	O	O
Use	O	O
String	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
trim	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
or	O	O
String	B-api_mention	B-api_mention
allRemoved	O	O
=	O	O
myString	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
trim	O	O
both	O	O
the	O	O
end	O	O
.	O	O
For	O	O
left	O	O
trim	O	O
:	O	O
String	B-api_mention	B-api_mention
leftRemoved	O	O
=	O	O
myString	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
right	O	O
trim	O	O
:	O	O
String	B-api_mention	B-api_mention
rightRemoved	O	O
=	O	O
myString	O	O
.	B-api_mention	B-api_mention
replaceAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
30081520	O	O
I	O	O
am	O	O
aware	O	O
that	O	O
it	O	O
is	O	O
better	O	O
to	O	O
call	O	O
the	O	O
equals	O	O
method	O	O
over	O	O
using	O	O
the	O	O
=	O	O
=	O	O
operator	O	O
(	O	O
see	O	O
this	O	O
question	O	O
)	O	O
.	O	O
I	O	O
want	O	O
two	O	O
strings	O	O
to	O	O
compare	O	O
as	O	O
equal	O	O
if	O	O
they	O	O
are	O	O
both	O	O
null	O	O
or	O	O
if	O	O
they	O	O
represent	O	O
the	O	O
same	O	O
string	O	O
.	O	O
Unfortunately	O	O
the	O	O
equals	B-api_mention	B-api_mention
method	O	O
will	O	O
throw	O	O
an	O	O
NPE	O	O
if	O	O
the	O	O
strings	O	O
are	O	O
null	O	O
.	O	O
My	O	O
code	O	O
is	O	O
currently	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
inelegant	O	O
.	O	O
What	O	O
is	O	O
the	O	O
correct	O	O
way	O	O
to	O	O
perform	O	O
this	O	O
test	O	O
?	O	O
Question	O	O
-	O	O
20129762	O	O
,	O	O
answer	O	O
-	O	O
20130131	O	O
There	O	O
are	O	O
already	O	O
people	O	O
asked	O	O
the	O	O
same	O	O
on	O	O
the	O	O
mailing	O	O
list	O	O
☺	O	O
.	O	O
The	O	O
main	O	O
reason	O	O
is	O	O
Iterable	B-api_mention	B-api_mention
also	O	O
has	O	O
a	O	O
re	O	O
-	O	O
iterable	O	O
semantic	O	O
,	O	O
while	O	O
Stream	B-api_mention	B-api_mention
is	O	O
not	O	O
.	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
4818699	O	O
,	O	O
answer	O	O
-	O	O
4818753	O	O
There	O	O
are	O	O
two	O	O
main	O	O
uses	O	O
of	O	O
AtomicInteger	B-api_mention	B-api_mention
:	O	O
#	O	O
li	O	O
As	O	O
an	O	O
atomic	O	O
counter	O	O
(	O	O
incrementAndGet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
etc	O	O
)	O	O
that	O	O
can	O	O
be	O	O
used	O	O
by	O	O
many	O	O
threads	O	O
concurrently	O	O
#	O	O
li	O	O
As	O	O
a	O	O
primitive	O	O
that	O	O
supports	O	O
compare	O	O
-	O	O
and	O	O
-	O	O
swap	O	O
instruction	O	O
(	O	O
compareAndSet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
to	O	O
implement	O	O
non	O	O
-	O	O
blocking	O	O
algorithms	O	O
.	O	O
Here	O	O
is	O	O
an	O	O
example	O	O
of	O	O
non	O	O
-	O	O
blocking	O	O
random	O	O
number	O	O
generator	O	O
from	O	O
Brian	O	O
G	O	O
ö	O	O
etz	O	O
'	O	O
s	O	O
Java	O	O
Concurrency	O	O
In	O	O
Practice	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
it	O	O
basically	O	O
works	O	O
almost	O	O
the	O	O
same	O	O
way	O	O
as	O	O
incrementAndGet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
performs	O	O
arbitrary	O	O
calculation	O	O
(	O	O
calculateNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
instead	O	O
of	O	O
increment	O	O
(	O	O
and	O	O
processes	O	O
the	O	O
result	O	O
before	O	O
return	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
32046078	O	O
I	O	O
have	O	O
a	O	O
server	O	O
side	O	O
implemented	O	O
in	O	O
Scala	O	O
and	O	O
React	O	O
/	O	O
Flux	O	O
based	O	O
front	O	O
end	O	O
.	O	O
My	O	O
services	O	O
return	O	O
Futures	O	O
and	O	O
they	O	O
are	O	O
handled	O	O
within	O	O
Scalatra	O	O
'	O	O
s	O	O
AsyncResult	O	O
for	O	O
JSON	O	O
responses	O	O
.	O	O
For	O	O
isomorphic	O	O
/	O	O
server	O	O
side	O	O
rendering	O	O
setup	O	O
I	O	O
did	O	O
not	O	O
want	O	O
to	O	O
change	O	O
services	O	O
to	O	O
be	O	O
blocking	O	O
so	O	O
I	O	O
started	O	O
with	O	O
Scala	O	O
Future	O	O
-	O	O
>	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
function	I-api_mention	I-api_mention
.	I-api_mention	O
Function	I-api_mention	O
conversion	O	O
shown	O	O
here	O	O
.	O	O
But	O	O
the	O	O
dispatcher	O	O
in	O	O
Flux	O	O
would	O	O
like	O	O
to	O	O
have	O	O
JS	O	O
Promise	O	O
.	O	O
So	O	O
far	O	O
I	O	O
found	O	O
only	O	O
rather	O	O
complicated	O	O
sounding	O	O
way	O	O
around	O	O
this	O	O
Slides	O	O
68	O	O
-	O	O
81	O	O
Is	O	O
there	O	O
any	O	O
recommended	O	O
way	O	O
to	O	O
deal	O	O
with	O	O
this	O	O
Scala	O	O
Future	O	O
-	O	O
>	O	O
JS	O	O
Promise	O	O
conversion	O	O
?	O	O
Question	O	O
-	O	O
17781150	O	O
,	O	O
answer	O	O
-	O	O
17781189	O	O
The	O	O
only	O	O
int	O	O
value	O	O
for	O	O
which	O	O
it	O	O
works	O	O
is	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
It	O	O
'	O	O
s	O	O
because	O	O
integers	O	O
are	O	O
negated	O	O
using	O	O
the	O	O
two	O	O
'	O	O
s	O	O
complement	O	O
way	O	O
.	O	O
Using	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
you	O	O
see	O	O
that	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
is	O	O
10000000000000000000000000000000	O	O
Taking	O	O
the	O	O
negative	O	O
value	O	O
is	O	O
done	O	O
by	O	O
first	O	O
swapping	O	O
0	O	O
and	O	O
1	O	O
,	O	O
which	O	O
gives	O	O
01111111111111111111111111111111	O	O
and	O	O
by	O	O
adding	O	O
1	O	O
,	O	O
which	O	O
gives	O	O
10000000000000000000000000000000	O	O
As	O	O
you	O	O
can	O	O
see	O	O
in	O	O
the	O	O
link	O	O
I	O	O
gave	O	O
,	O	O
Wikipedia	O	O
mentions	O	O
the	O	O
problem	O	O
with	O	O
the	O	O
most	O	O
negative	O	O
numbers	O	O
and	O	O
specifies	O	O
it	O	O
'	O	O
s	O	O
the	O	O
sole	O	O
exception	O	O
:	O	O
#	O	O
blockquote	O	O
Of	O	O
course	O	O
you	O	O
have	O	O
the	O	O
same	O	O
phenomenon	O	O
for	O	O
Long	B-api_mention	B-api_mention
.	I-api_mention	O
Min	I-api_mention	O
_	I-api_mention	O
Value	I-api_mention	O
if	O	O
you	O	O
store	O	O
it	O	O
in	O	O
a	O	O
long	O	O
variable	O	O
.	O	O
Note	O	O
that	O	O
this	O	O
is	O	O
only	O	O
due	O	O
to	O	O
choices	O	O
that	O	O
were	O	O
made	O	O
regarding	O	O
the	O	O
binary	O	O
storage	O	O
of	O	O
ints	O	O
in	O	O
Java	O	O
.	O	O
Another	O	O
(	O	O
bad	O	O
)	O	O
solution	O	O
could	O	O
for	O	O
example	O	O
have	O	O
been	O	O
to	O	O
negate	O	O
by	O	O
simply	O	O
changing	O	O
the	O	O
most	O	O
significant	O	O
bit	O	O
and	O	O
letting	O	O
the	O	O
other	O	O
bits	O	O
unchanged	O	O
,	O	O
this	O	O
would	O	O
have	O	O
avoided	O	O
this	O	O
problem	O	O
with	O	O
MIN	B-api_mention	O
_	I-api_mention	O
VALUE	I-api_mention	O
but	O	O
would	O	O
have	O	O
made	O	O
2	O	O
different	O	O
0	O	O
values	O	O
and	O	O
complicated	O	O
binary	O	O
arithmetic	O	O
(	O	O
how	O	O
would	O	O
you	O	O
have	O	O
incremented	O	O
for	O	O
example	O	O
?	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
5071040	O	O
,	O	O
answer	O	O
-	O	O
22547954	O	O
Always	O	O
use	O	O
either	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Using	O	O
"	O	O
"	O	O
+	O	O
number	O	O
is	O	O
an	O	O
overhead	O	O
and	O	O
does	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
4709175	O	O
,	O	O
answer	O	O
-	O	O
4709892	O	O
Something	O	O
none	O	O
of	O	O
the	O	O
other	O	O
answers	O	O
have	O	O
covered	O	O
that	O	O
make	O	O
enums	O	O
particularly	O	O
powerful	O	O
are	O	O
the	O	O
ability	O	O
to	O	O
have	O	O
template	O	O
methods	O	O
.	O	O
Methods	O	O
can	O	O
be	O	O
part	O	O
of	O	O
the	O	O
base	O	O
enum	O	O
and	O	O
overridden	O	O
by	O	O
each	O	O
type	O	O
.	O	O
And	O	O
,	O	O
with	O	O
the	O	O
behavior	O	O
attached	O	O
to	O	O
the	O	O
enum	O	O
,	O	O
it	O	O
often	O	O
eliminates	O	O
the	O	O
need	O	O
for	O	O
if	O	O
-	O	O
else	O	O
constructs	O	O
or	O	O
switch	O	O
statements	O	O
as	O	O
this	O	O
blog	O	O
post	O	O
demonstrates	O	O
-	O	O
where	O	O
enum	O	O
.	O	B-api_mention
method	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
does	O	O
what	O	O
originally	O	O
would	O	O
be	O	O
executed	O	O
inside	O	O
the	O	O
conditional	O	O
.	O	O
The	O	O
same	O	O
example	O	O
also	O	O
shows	O	O
the	O	O
use	O	O
of	O	O
static	O	O
imports	O	O
with	O	O
enums	O	O
as	O	O
well	O	O
producing	O	O
much	O	O
cleaner	O	O
DSL	O	O
like	O	O
code	O	O
.	O	O
Some	O	O
other	O	O
interesting	O	O
qualities	O	O
include	O	O
the	O	O
fact	O	O
that	O	O
enums	O	O
provide	O	O
implementation	O	O
for	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
implement	O	O
Serializable	B-api_mention	B-api_mention
and	O	O
Comparable	B-api_mention	B-api_mention
.	O	O
For	O	O
a	O	O
complete	O	O
rundown	O	O
of	O	O
all	O	O
that	O	O
enums	O	O
have	O	O
to	O	O
offer	O	O
I	O	O
highly	O	O
recommend	O	O
Bruce	O	O
Eckel	O	O
'	O	O
s	O	O
Thinking	O	O
in	O	O
Java	O	O
4th	O	O
edition	O	O
which	O	O
devotes	O	O
an	O	O
entire	O	O
chapter	O	O
to	O	O
the	O	O
topic	O	O
.	O	O
Particularly	O	O
illuminating	O	O
are	O	O
the	O	O
examples	O	O
involving	O	O
a	O	O
Rock	O	O
,	O	O
Paper	O	O
,	O	O
Scissors	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
RoShamBo	O	O
)	O	O
game	O	O
as	O	O
enums	O	O
.	O	O
Question	O	O
-	O	O
17828584	O	O
I	O	O
was	O	O
wondering	O	O
what	O	O
happens	O	O
when	O	O
you	O	O
try	O	O
to	O	O
catch	O	O
an	O	O
StackOverflowError	B-api_mention	B-api_mention
and	O	O
came	O	O
up	O	O
with	O	O
the	O	O
following	O	O
method	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
my	O	O
question	O	O
:	O	O
Why	O	O
does	O	O
this	O	O
method	O	O
print	O	O
'	O	O
4	O	O
'	O	O
?	O	O
I	O	O
thought	O	O
maybe	O	O
it	O	O
was	O	O
because	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
needs	O	O
3	O	O
segments	O	O
on	O	O
the	O	O
call	O	O
stack	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
where	O	O
the	O	O
number	O	O
3	O	O
comes	O	O
from	O	O
.	O	O
When	O	O
you	O	O
look	O	O
at	O	O
the	O	O
source	O	O
code	O	O
(	O	O
and	O	O
bytecode	O	O
)	O	O
of	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
it	O	O
normally	O	O
would	O	O
lead	O	O
to	O	O
far	O	O
more	O	O
method	O	O
invocations	O	O
than	O	O
3	O	O
(	O	O
so	O	O
3	O	O
segments	O	O
on	O	O
the	O	O
call	O	O
stack	O	O
would	O	O
not	O	O
be	O	O
sufficient	O	O
)	O	O
.	O	O
If	O	O
it	O	O
'	O	O
s	O	O
because	O	O
of	O	O
optimizations	O	O
the	O	O
Hotspot	O	O
VM	O	O
applies	O	O
(	O	O
method	O	O
inlining	O	O
)	O	O
,	O	O
I	O	O
wonder	O	O
if	O	O
the	O	O
result	O	O
would	O	O
be	O	O
different	O	O
on	O	O
another	O	O
VM	O	O
.	O	O
Edit	O	O
:	O	O
As	O	O
the	O	O
output	O	O
seems	O	O
to	O	O
be	O	O
highly	O	O
JVM	O	O
specific	O	O
,	O	O
I	O	O
get	O	O
the	O	O
result	O	O
4	O	O
using	O	O
Java	O	O
(	O	O
TM	O	O
)	O	O
SE	O	O
Runtime	O	O
Environment	O	O
(	O	O
build	O	O
1	O	O
.	O	O
6	O	O
.	O	O
0	O	O
_	O	O
41	O	O
-	O	O
b02	O	O
)	O	O
Java	O	O
HotSpot	O	O
(	O	O
TM	O	O
)	O	O
64	O	O
-	O	O
Bit	O	O
Server	O	O
VM	O	O
(	O	O
build	O	O
20	O	O
.	O	O
14	O	O
-	O	O
b01	O	O
,	O	O
mixed	O	O
mode	O	O
)	O	O
Explanation	O	O
why	O	O
I	O	O
think	O	O
this	O	O
question	O	O
is	O	O
different	O	O
from	O	O
Understanding	O	O
java	O	O
stack	O	O
:	O	O
My	O	O
question	O	O
is	O	O
not	O	O
about	O	O
why	O	O
there	O	O
is	O	O
a	O	O
cnt	O	O
>	O	O
0	O	O
(	O	O
obviously	O	O
because	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
requires	O	O
stack	O	O
size	O	O
and	O	O
throws	O	O
another	O	O
StackOverflowError	B-api_mention	B-api_mention
before	O	O
something	O	O
gets	O	O
printed	O	O
)	O	O
,	O	O
but	O	O
why	O	O
it	O	O
has	O	O
the	O	O
particular	O	O
value	O	O
of	O	O
4	O	O
,	O	O
respectively	O	O
0	O	O
,	O	O
3	O	O
,	O	O
8	O	O
,	O	O
55	O	O
or	O	O
something	O	O
else	O	O
on	O	O
other	O	O
systems	O	O
.	O	O
Question	O	O
-	O	O
19235606	O	O
,	O	O
answer	O	O
-	O	O
19235863	O	O
You	O	O
should	O	O
almost	O	O
certainly	O	O
never	O	O
have	O	O
to	O	O
deal	O	O
with	O	O
Spliterator	B-api_mention	B-api_mention
as	O	O
a	O	O
user	O	O
;	O	O
it	O	O
should	O	O
only	O	O
be	O	O
necessary	O	O
if	O	O
you	O	O
'	O	O
re	O	O
writing	O	O
Collection	B-api_mention	B-api_mention
types	O	O
yourself	O	O
and	O	O
also	O	O
intending	O	O
to	O	O
optimize	O	O
parallelized	O	O
operations	O	O
on	O	O
them	O	O
.	O	O
For	O	O
what	O	O
it	O	O
'	O	O
s	O	O
worth	O	O
,	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
is	O	O
a	O	O
way	O	O
of	O	O
operating	O	O
over	O	O
the	O	O
elements	O	O
of	O	O
a	O	O
collection	O	O
in	O	O
a	O	O
way	O	O
that	O	O
it	O	O
'	O	O
s	O	O
easy	O	O
to	O	O
split	O	O
off	O	O
part	O	O
of	O	O
the	O	O
collection	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
because	O	O
you	O	O
'	O	O
re	O	O
parallelizing	O	O
and	O	O
want	O	O
one	O	O
thread	O	O
to	O	O
work	O	O
on	O	O
one	O	O
part	O	O
of	O	O
the	O	O
collection	O	O
,	O	O
one	O	O
thread	O	O
to	O	O
work	O	O
on	O	O
another	O	O
part	O	O
,	O	O
etc	O	O
.	O	O
You	O	O
should	O	O
essentially	O	O
never	O	O
be	O	O
saving	O	O
values	O	O
of	O	O
type	O	O
Stream	B-api_mention	B-api_mention
to	O	O
a	O	O
variable	O	O
,	O	O
either	O	O
.	O	O
Stream	B-api_mention	B-api_mention
is	O	O
sort	O	O
of	O	O
like	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
,	O	O
in	O	O
that	O	O
it	O	O
'	O	O
s	O	O
a	O	O
one	O	O
-	O	O
time	O	O
-	O	O
use	O	O
object	O	O
that	O	O
you	O	O
'	O	O
ll	O	O
almost	O	O
always	O	O
use	O	O
in	O	O
a	O	O
fluent	O	O
chain	O	O
,	O	O
as	O	O
in	O	O
the	O	O
Javadoc	O	O
example	O	O
:	O	O
int	O	O
sum	O	O
=	O	O
widgets	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
mapToInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sum	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Collector	B-api_mention	B-api_mention
is	O	O
the	O	O
most	O	O
generalized	O	O
,	O	O
abstract	O	O
possible	O	O
version	O	O
of	O	O
a	O	O
"	O	O
reduce	O	O
"	O	O
operation	O	O
a	O	O
la	O	O
map	O	O
/	O	O
reduce	O	O
;	O	O
in	O	O
particular	O	O
,	O	O
it	O	O
needs	O	O
to	O	O
support	O	O
parallelization	O	O
and	O	O
finalization	O	O
steps	O	O
.	O	O
Examples	O	O
of	O	O
Collector	B-api_mention	B-api_mention
s	O	O
include	O	O
:	O	O
#	O	O
li	O	O
summing	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
reducing	I-api_mention	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
#	O	O
li	O	O
StringBuilder	B-api_mention	B-api_mention
appending	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
25855691	O	O
TL	O	O
;	O	O
DR	O	O
:	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
the	O	O
fastest	O	O
.	O	O
I	O	O
felt	O	O
I	O	O
should	O	O
add	O	O
my	O	O
results	O	O
from	O	O
benchmarking	O	O
iteration	O	O
.	O	O
I	O	O
took	O	O
a	O	O
very	O	O
simple	O	O
approach	O	O
(	O	O
no	O	O
benchmarking	O	O
frameworks	O	O
)	O	O
and	O	O
benchmarked	O	O
5	O	O
different	O	O
methods	O	O
:	O	O
#	O	O
li	O	O
classic	O	O
for	O	O
#	O	O
li	O	O
classic	O	O
foreach	O	O
#	O	O
li	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
forEach	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
the	O	O
testing	O	O
procedure	O	O
and	O	O
parameters	O	O
#	O	O
pre	O	O
The	O	O
list	O	O
in	O	O
this	O	O
class	O	O
shall	O	O
be	O	O
iterated	O	O
over	O	O
and	O	O
have	O	O
some	O	O
doIt	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
applied	O	O
to	O	O
all	O	O
it	O	O
'	O	O
s	O	O
members	O	O
,	O	O
each	O	O
time	O	O
via	O	O
a	O	O
different	O	O
method	O	O
.	O	O
in	O	O
the	O	O
Main	O	O
class	O	O
I	O	O
run	O	O
the	O	O
tested	O	O
method	O	O
three	O	O
times	O	O
to	O	O
warm	O	O
up	O	O
the	O	O
JVM	O	O
.	O	O
I	O	O
then	O	O
run	O	O
the	O	O
test	O	O
method	O	O
1000	O	O
times	O	O
summing	O	O
the	O	O
time	O	O
it	O	O
takes	O	O
for	O	O
each	O	O
iteration	O	O
method	O	O
(	O	O
using	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
After	O	O
that	O	O
'	O	O
s	O	O
done	O	O
i	O	O
divide	O	O
that	O	O
sum	O	O
by	O	O
1000	O	O
and	O	O
that	O	O
'	O	O
s	O	O
the	O	O
result	O	O
,	O	O
average	O	O
time	O	O
.	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
ran	O	O
this	O	O
on	O	O
a	O	O
i5	O	O
4	O	O
core	O	O
CPU	O	O
,	O	O
with	O	O
java	O	O
version	O	O
1	O	O
.	O	O
8	O	O
.	O	O
0	O	O
_	O	O
05	O	O
classic	O	O
for	O	O
#	O	O
pre	O	O
execution	O	O
time	O	O
:	O	O
4	O	O
.	O	O
21	O	O
ms	O	O
classic	O	O
foreach	O	O
#	O	O
pre	O	O
execution	O	O
time	O	O
:	O	O
5	O	O
.	O	O
95	O	O
ms	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
list	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
execution	O	O
time	O	O
:	O	O
3	O	O
.	O	O
11	O	O
ms	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
execution	O	O
time	O	O
:	O	O
2	O	O
.	O	O
79	O	O
ms	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
list	O	I-api_mention
.	B-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
execution	O	O
time	O	O
:	O	O
3	O	O
.	O	O
6	O	O
ms	O	O
Question	O	O
-	O	O
20358883	O	O
Is	O	O
there	O	O
a	O	O
Utility	B-api_mention	B-api_mention
method	O	O
somewhere	O	O
that	O	O
can	O	O
do	O	O
this	O	O
in	O	O
1	O	O
line	O	O
?	O	O
I	O	O
can	O	O
'	O	O
t	O	O
find	O	O
it	O	O
anywhere	O	O
in	O	O
Collections	B-api_mention	B-api_mention
,	O	O
or	O	O
List	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
I	O	O
don	O	O
'	O	O
t	O	O
want	O	O
to	O	O
re	O	O
-	O	O
invent	O	O
the	O	O
wheel	O	O
unless	O	O
I	O	O
plan	O	O
on	O	O
putting	O	O
fancy	O	O
rims	O	O
on	O	O
it	O	O
.	O	O
Well	O	O
.	O	O
.	O	O
.	O	O
the	O	O
type	O	O
can	O	O
be	O	O
T	O	O
,	O	O
and	O	O
not	O	O
String	B-api_mention	B-api_mention
.	O	O
but	O	O
you	O	O
get	O	O
the	O	O
point	O	O
.	O	O
(	O	O
with	O	O
all	O	O
the	O	O
null	O	O
checking	O	O
,	O	O
safety	O	O
checks	O	O
.	O	O
.	O	O
.	O	O
etc	O	O
)	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
28319221	O	O
Don	O	O
'	O	O
t	O	O
worry	O	O
about	O	O
any	O	O
performance	O	O
differences	O	O
,	O	O
they	O	O
'	O	O
re	O	O
going	O	O
to	O	O
be	O	O
minimal	O	O
in	O	O
this	O	O
case	O	O
normally	O	O
.	O	O
Method	O	O
2	O	O
is	O	O
preferable	O	O
because	O	O
#	O	O
li	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
require	O	O
mutating	O	O
a	O	O
collection	O	O
that	O	O
exists	O	O
outside	O	O
the	O	O
lambda	O	O
expression	O	O
,	O	O
#	O	O
li	O	O
it	O	O
'	O	O
s	O	O
more	O	O
readable	O	O
because	O	O
the	O	O
different	O	O
steps	O	O
that	O	O
are	O	O
performed	O	O
in	O	O
the	O	O
collection	O	O
pipeline	O	O
are	O	O
written	O	O
sequentially	O	O
(	O	O
first	O	O
a	O	O
filter	O	O
operation	O	O
,	O	O
then	O	O
a	O	O
map	O	O
operation	O	O
,	O	O
then	O	O
collecting	O	O
the	O	O
result	O	O
)	O	O
,	O	O
(	O	O
for	O	O
more	O	O
info	O	O
on	O	O
the	O	O
benefits	O	O
of	O	O
collection	O	O
pipelines	O	O
,	O	O
see	O	O
Martin	O	O
Fowler	O	O
'	O	O
s	O	O
excellent	O	O
article	O	O
)	O	O
#	O	O
li	O	O
you	O	O
can	O	O
easily	O	O
change	O	O
the	O	O
way	O	O
values	O	O
are	O	O
collected	O	O
by	O	O
replacing	O	O
the	O	O
Collector	B-api_mention	B-api_mention
that	O	O
is	O	O
used	O	O
.	O	O
In	O	O
some	O	O
cases	O	O
you	O	O
may	O	O
need	O	O
to	O	O
write	O	O
your	O	O
own	O	O
Collector	B-api_mention	B-api_mention
,	O	O
but	O	O
then	O	O
the	O	O
benefit	O	O
is	O	O
that	O	O
you	O	O
can	O	O
easily	O	O
reuse	O	O
that	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
39005452	O	O
The	O	O
best	O	O
post	O	O
I	O	O
'	O	O
ve	O	O
seen	O	O
on	O	O
the	O	O
topic	O	O
was	O	O
written	O	O
by	O	O
Daniel	O	O
Olszewski	O	O
and	O	O
can	O	O
be	O	O
found	O	O
at	O	O
#	O	O
a	O	O
.	O	O
While	O	O
others	O	O
mention	O	O
when	O	O
you	O	O
should	O	O
or	O	O
should	O	O
not	O	O
use	O	O
Optional	B-api_mention	B-api_mention
,	O	O
this	O	O
post	O	O
actually	O	O
explains	O	O
why	O	O
.	O	O
Cross	O	O
-	O	O
posting	O	O
here	O	O
in	O	O
case	O	O
the	O	O
link	O	O
goes	O	O
down	O	O
:	O	O
#	O	O
blockquote	O	O

