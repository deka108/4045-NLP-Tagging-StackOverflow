{"items": [{"body": "<p>I am using <code>Scanner</code> methods <code>nextInt()</code> and <code>nextLine()</code> for reading input. Basically, it looks like this:</p>\n\n<pre><code>System.out.println(\"enter numerical value\");    \nint option;\noption = input.nextInt();//read numerical value from input\nSystem.out.println(\"enter 1st string\"); \nString string1 = input.nextLine();//read 1st string (this is skipped)\nSystem.out.println(\"enter 2nd string\");\nString string2 = input.nextLine();//read 2nd string (this appears right after reading numerical value)\n</code></pre>\n\n<p>The problem is that after entering the numerical value, the first <code>input.nextLine()</code> is skipped and the second <code>input.nextLine()</code> is executed, so that my output looks like this:</p>\n\n<pre><code>Enter numerical value\n3//this is my input\nenter 1st string//the program is supposed to stop here and wait for my input, but is skipped\nenter 2nd string//and this line is executed and waits for my input\n</code></pre>\n\n<p>I tested my application and it looks like the problem lies in using <code>input.nextInt()</code>. If I delete it, then both <code>string1 = input.nextLine()</code> and <code>string2 = input.nextLine()</code> are executed as I want them to be.</p>\n", "title": "Scanner is skipping nextLine() after using next(), nextInt() or other nextFoo() methods", "tags": ["java", "java.util.scanner"], "link": "http://stackoverflow.com/questions/13102045/scanner-is-skipping-nextline-after-using-next-nextint-or-other-nextfoo", "post_type": "question", "question_id": 13102045}, {"body": "<p>For the first time in my life I find myself in a position where I'm writing a Java API that will be open sourced. Hopefully to be included in many other projects.</p>\n\n<p>For logging I (and indeed the people I work with) have always used JUL (java.util.logging) and never had any issues with it. However now I need to understand in more detail what I should do for my API development. I've done some research on this and with the information I've got I just get more confused. Hence this post.</p>\n\n<p>Since I come from JUL I'm biased on that. My knowledge of the rest is not that big.</p>\n\n<p>From the research I've done I've come up with these reasons why people do not like JUL:</p>\n\n<ol>\n<li><p><em>\"I started developing in Java long before Sun released JUL and it was just easier for me to continue with logging-framework-X rather than to learn something new\"</em>. Hmm. I'm not kidding, this is actually what people say. With this argument we could all be doing COBOL. (however I can certainly relate to this being a lazy dude myself)</p></li>\n<li><p><em>\"I don't like the names of the logging levels in JUL\"</em>. Ok, seriously, this is just not enough of a reason to introduce a new dependency.</p></li>\n<li><p><em>\"I don't like the standard format of the output from JUL\"</em>. Hmm. This is just configuration. You do not even have to do anything code-wise. (true, back in old days you may have had to create your own Formatter class to get it right).</p></li>\n<li><p><em>\"I use other libraries that also use logging-framework-X so I thought it easier just to use that one\"</em>. This is a cyclic argument, isn't ? Why does 'everybody' use logging-framework-X and not JUL?</p></li>\n<li><p><em>\"Everybody else is using logging-framework-X\"</em>. This to me is just a special case of the above. Majority is not always right.</p></li>\n</ol>\n\n<p>So the real big question is <strong>why not JUL?</strong>. What is it I have missed ? The raison d'\u00eatre for logging facades (SLF4J, JCL) is that multiple logging implementations have existed historically and the reason for that really goes back to the era before JUL as I see it. If JUL was perfect then logging facades wouldn't exist, or what? Rather than embracing them shouldn't we question why they were necessary in the first place? (and see if those reasons still exist)</p>\n\n<p>Ok, my research so far has led to a couple of things that I can see may be <strong>real issues</strong> with JUL:</p>\n\n<ol>\n<li><p><strong>Performance</strong>. Some say that performance in SLF4J is superior to the rest. This seems to me to be a case of premature optimization. If you need to log hundreds of megabytes per second then I'm not sure you are on the right path anyway. JUL has also evolved and the tests you did on Java 1.4 may no longer be true. You can read about it <a href=\"http://jeremymanson.blogspot.dk/2009/04/faster-logging-with-faster-logger.html\">here</a> and this fix has made it into Java 7. Many also talk about the overhead of string concatenation in logging methods. However template based logging avoids this cost and it exist also in JUL. Personally I never really write template based logging. Too lazy for that. For example if I do this with JUL:</p>\n\n<pre><code>log.finest(\"Lookup request from username=\" + username \n   + \", valueX=\" + valueX\n   + \", valueY=\" + valueY));\n</code></pre>\n\n<p>my IDE will warn me and ask permission that it should change it to:</p>\n\n<pre><code>log.log(Level.FINEST, \"Lookup request from username={0}, valueX={1}, valueY={2}\", \n   new Object[]{username, valueX, valueY});\n</code></pre>\n\n<p>.. which I will of course accept. Permission granted ! Thank you for your help.</p>\n\n<p>So I don't actually write such statements myself, that is done by the IDE.</p>\n\n<p>In conclusion on the issue of performance I haven't found anything that would suggest that JUL's performance is not ok compared to the competition.</p></li>\n<li><p><strong>Configuration from classpath</strong>. Out-of-the-box JUL cannot load a configuration file from the classpath. It is a <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4958543\">few lines of code</a> to make it do so. I can see why this may be annoying but the solution is short and simple.</p></li>\n<li><p><strong>Availability of output handlers</strong>. JUL comes with 5 output handlers out-of-the-box: console, file stream, socket and memory. These can be extended or new ones can be written. This may for example be writing to UNIX/Linux Syslog and Windows Event Log. I have personally never had this requirement nor have I seen it used but I can certainly relate to why it may be a useful feature. Logback comes with an appender for Syslog for example. Still I would argue that</p>\n\n<ol>\n<li>99.5% of the needs for output destinations are covered by what is in JUL out-of-the-box.</li>\n<li>Special needs could be catered for by custom handlers on top of JUL rather than on top of something else. There's nothing to me that suggests that it takes more time to write a Syslog output handler for JUL than it does for another logging framework.</li>\n</ol></li>\n</ol>\n\n<p>I'm really concerned that there's something I've overlooked. The use of logging facades  and logging implementations other than JUL is so widespread that I have to come to the conclusion that it's me who just doesn't understand. That wouldn't be the first time, I'm afraid. :-)</p>\n\n<p>So what should I do with my API?  I want it to become successful.  I can of course just \"go with the flow\" and implement SLF4J (which seems the most popular these days) but for my own sake I still need to understand exactly what is wrong with the JUL of today that warrants all the fuzz?  Will I sabotage myself by choosing JUL for my library ?</p>\n\n<h2>Testing performance</h2>\n\n<p>(section added by nolan600 on 07-JUL-2012)</p>\n\n<p>There's a reference below from Ceki about SLF4J's parametrization being 10 times or more faster than JUL's. So I've started doing some simple tests. At first glance the claim is certainly correct. Here are the preliminary results (but read on!):</p>\n\n<ul>\n<li>Execution time SLF4J, backend Logback: 1515</li>\n<li>Execution time SLF4J, backend JUL: 12938</li>\n<li>Execution time JUL: 16911</li>\n</ul>\n\n<p>The numbers above are msecs so less is better. So 10 times performance difference is by first actually pretty close. My initial reaction: That is a lot !</p>\n\n<p>Here is the core of the test. As can be seen an integer and a string is construted in a loop which is then used in the log statement:</p>\n\n<pre><code>    for (int i = 0; i &lt; noOfExecutions; i++) {\n        for (char x=32; x&lt;88; x++) {\n            String someString = Character.toString(x);\n            // here we log \n        }\n    }\n</code></pre>\n\n<p>(I wanted the log statement to have both a primitive data type (in this case an int) and a more complex data type (in this case a String). Not sure it matters but there you have it.)</p>\n\n<p>The log statement for SLF4J:</p>\n\n<pre><code>logger.info(\"Logging {} and {} \", i, someString);\n</code></pre>\n\n<p>The log statement for JUL:</p>\n\n<pre><code>logger.log(Level.INFO, \"Logging {0} and {1}\", new Object[]{i, someString});\n</code></pre>\n\n<p>The JVM was 'warmed up' with the same test executed once before the actual measurement was done. Java 1.7.03 was used on Windows 7. Latest versions of SLF4J (v1.6.6) and Logback (v1.0.6) was used. Stdout and stderr was redirected to null device.</p>\n\n<p>However, careful now, it turns out JUL is spending most of its time in <code>getSourceClassName()</code> because JUL by default prints the source class name in the output, while Logback doesn't. So we are comparing apples and oranges. I have to do the test again and configure the logging implementations in a similar manner so that they actually output the same stuff. I do however suspect that SLF4J+Logback will still come out on top but far from the initial numbers as given above. Stay tuned.</p>\n\n<p>Btw: The test was first time I've actually worked with SLF4J or Logback. A pleasant experience. JUL is certainly a lot less welcoming when you are starting out.</p>\n\n<h2>Testing performance (part 2)</h2>\n\n<p>(section added by nolan600 on 08-JUL-2012)</p>\n\n<p>As it turns out it doesn't really matter for performance how you configure your pattern in JUL, i.e. whether or not it includes the source name or not. I tried with a very simple pattern:</p>\n\n<pre><code>java.util.logging.SimpleFormatter.format=\"%4$s: %5$s [%1$tc]%n\"\n</code></pre>\n\n<p>and that did not change the above timings at all. My profiler revealed that the logger still spent a lot of time in calls to <code>getSourceClassName()</code> even if this was not part of my pattern. The pattern doesn't matter.</p>\n\n<p>I'm therefore concluding on the issue of performance that at least for the tested template based log statement there seems to be roughly a factor of 10 in real performance difference between JUL (slow) and SLF4J+Logback (quick). Just like Ceki said.</p>\n\n<p>I can also see another thing namely that SLF4J's <code>getLogger()</code> call is a lot more expensive than JUL's ditto. (95 ms vs 0.3 ms if my profiler is accurate). This makes sense. SLF4J has to do some time on the binding of the underlying logging implementation. This doesn't scare me. These calls should be somewhat rare in the lifetime of an application. The fastness should be in the actual log calls.</p>\n\n<h1>Final conclusion</h1>\n\n<p>(section added by nolan600 on 08-JUL-2012)</p>\n\n<p>Thank you for all your answers. Contrary to what I initially thought I've ended up deciding to use SLF4J for my API. This is based on a number of things and your input:</p>\n\n<ol>\n<li><p>It gives flexibility to choose log implementation at deployment time.</p></li>\n<li><p>Issues with lack of flexibility of JUL's configuration when run inside an application server.</p></li>\n<li><p>SLF4J is certainly a lot faster as detailed above in particular if you couple it with Logback. Even if this was just a rough test I have reason to believe that a lot more effort has gone into optimization on SLF4J+Logback than on JUL.</p></li>\n<li><p>Documentation. The documentation for SLF4J is simply a lot more comprehensive and precise.</p></li>\n<li><p>Pattern flexibility. As I did the tests I set out to have JUL mimic the default pattern from Logback. This pattern includes the name of the thread. It turns out JUL cannot do this out of the box. Ok, I haven't missed it until now, but I don't think it is a thing that should be missing from a log framework. Period! </p></li>\n<li><p>Most (or many) Java projects today use Maven so adding a dependency is not that big a thing especially if that dependency is rather stable, i.e. doesn't constantly change its API. This seems to be true for SLF4J. Also the SLF4J jar and friends are small in size.</p></li>\n</ol>\n\n<p>So the strange thing that happened was that I actually got quite upset with JUL after having worked a bit with SLF4J. I still regret that it has to be this way with JUL. JUL is far from perfect but kind of does the job. Just not quite well enough. The same can be said about <code>Properties</code> as an example but we do not think about abstracting that so people can plug in their own configuration library and what have you. I think the reason is that <code>Properties</code> comes in just above the bar while the opposite is true for JUL of today ... and in the past it came in at zero because it didn't exist.</p>\n", "title": "Why not use java.util.logging?", "tags": ["java", "logging", "slf4j", "logback"], "link": "http://stackoverflow.com/questions/11359187/why-not-use-java-util-logging", "post_type": "question", "question_id": 11359187}, {"body": "<p>According to the JLS, an <code>int</code> array should be filled by zeros just after initialization. However, I am faced with a situation where it is not. Such a behavior occurs first in JDK 7u4 and also occurs in all later updates (I use 64-bit implementation). The following code throws exception:</p>\n\n<pre><code>public static void main(String[] args) {\n        int[] a;\n        int n = 0;\n        for (int i = 0; i &lt; 100000000; ++i) {\n            a = new int[10];\n            for (int f : a)\n                if (f != 0)\n                  throw new RuntimeException(\"Array just after allocation: \"+ Arrays.toString(a));\n            Arrays.fill(a, 0);\n            for (int j = 0; j &lt; a.length; ++j)\n                a[j] = (n - j)*i;\n            for (int f : a)\n                n += f;\n        }\n        System.out.println(n);\n    }\n</code></pre>\n\n<p>The exception occurs after the JVM performs compilation of the code block and does not arise with <code>-Xint</code> flag. Additionally, the <code>Arrays.fill(...)</code> statement (as all other statements in this code) is necessary, and the exception does not occurs if it is absent. It is clear that this possible bug is bounded with some JVM optimization. Any ideas for the reason of such a behavior?</p>\n\n<p><em>Update:</em><br>\nI see this behavior on HotSpot 64-bit server VM, Java version from 1.7.0_04 to 1.7.0_10 on Gentoo Linux, Debian Linux (both kernel 3.0 version) and MacOS Lion. This error can always be reproduced with the code above. I did not test this problem with a 32-bit JDK or on Windows. I already sent a bug report to the Oracle (bug id 7196857) and it will appear in public Oracle bug database in few days.</p>\n\n<p><em>Update:</em><br>\nOracle published this bug at their public bug database: <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7196857\">http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7196857</a> </p>\n", "title": "Java: int array initializes with nonzero elements", "tags": ["java", "arrays", "jvm", "initialization", "java-7"], "link": "http://stackoverflow.com/questions/12317668/java-int-array-initializes-with-nonzero-elements", "post_type": "question", "question_id": 12317668}, {"body": "<p>I would like to know what is the cleanest and best way to perform form validation of user inputs. I have seen some developers implement <a href=\"http://docs.spring.io/spring-framework/docs/4.2.x/javadoc-api/org/springframework/validation/Validator.html\"><code>org.springframework.validation.Validator</code></a>. A question about that: I saw it validates a class. Does the class have to be filled manually with the values from the user input, and then passed to the validator?</p>\n\n<p>I am confused about the cleanest and best way to validate the user input. I know about the traditional method of using <code>request.getParameter()</code> and then manually checking for <code>nulls</code>, but I don't want to do all the validation in my <code>Controller</code>. Some good advice on this area will be greatly appreciated. I am not using Hibernate in this application.</p>\n", "title": "Spring MVC: How to perform validation?", "tags": ["java", "spring-mvc", "validation", "user-input"], "link": "http://stackoverflow.com/questions/12146298/spring-mvc-how-to-perform-validation", "post_type": "question", "question_id": 12146298}, {"body": "<p>I write jUnit test cases for 3 purposes:</p>\n\n<ol>\n<li>To ensure that my code satisfies all of the required functionality, under all (or most of) the input combinations/values.</li>\n<li>To ensure that I can change the implementation, and rely on JUnit test cases to tell me that all my functionality is still satisfied.</li>\n<li>As a documentation of all the use cases my code handles, and act as a spec for refactoring - should the code ever need to be rewritten. (Refactor the code, and if my jUnit tests fail - you probably missed some use case).</li>\n</ol>\n\n<p>I do not understand why or when <code>Mockito.verify()</code> should be used. When I see <code>verify()</code> being called, it is telling me that my jUnit is becoming aware of the implementation. (Thus changing my implementation would break my jUnits, even though my functionality was unaffected). </p>\n\n<p>I'm looking for:</p>\n\n<ol>\n<li><p>What should be the guidelines for appropriate usage of <code>Mockito.verify()</code>?</p></li>\n<li><p>Is it fundamentally correct for jUnits to be aware of, or tightly coupled to, the implementation of the class under test?</p></li>\n</ol>\n", "title": "When to use Mockito.verify()?", "tags": ["java", "unit-testing", "junit", "mockito"], "link": "http://stackoverflow.com/questions/12539365/when-to-use-mockito-verify", "post_type": "question", "question_id": 12539365}, {"body": "<p>The Java 7 <em>try-with-resources</em> syntax (also known as ARM block (<em>Automatic Resource Management</em>)) is nice, short and straightforward when using only one <code>AutoCloseable</code> resource. However, I am not sure what is the correct idiom when I need to declare multiple resources that are dependent on each other, for example a <code>FileWriter</code> and a <code>BufferedWriter</code> that wraps it. Of course, this question concerns any case when some <code>AutoCloseable</code> resources are wrapped, not only these two specific classes.</p>\n\n<p>I came up with the three following alternatives:</p>\n\n<h2>1)</h2>\n\n<p>The naive idiom I have seen is to declare only the top-level wrapper in the ARM-managed variable:</p>\n\n<pre><code>static void printToFile1(String text, File file) {\n    try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {\n        bw.write(text);\n    } catch (IOException ex) {\n        // handle ex\n    }\n}\n</code></pre>\n\n<p>This is nice and short, but it is broken. Because the underlying <code>FileWriter</code> is not declared in a variable, it will never be closed directly in the generated <code>finally</code> block. It will be closed only through the <code>close</code> method of the wrapping <code>BufferedWriter</code>. The problem is, that if an exception is thrown from the <code>bw</code>'s constructor, it's <code>close</code> will not be called and therefore the underlying <code>FileWriter</code> <strong>will not be closed</strong>.</p>\n\n<h2>2)</h2>\n\n<pre><code>static void printToFile2(String text, File file) {\n    try (FileWriter fw = new FileWriter(file);\n            BufferedWriter bw = new BufferedWriter(fw)) {\n        bw.write(text);\n    } catch (IOException ex) {\n        // handle ex\n    }\n}\n</code></pre>\n\n<p>Here, both the underlying and the wrapping resource are declared in the ARM-managed variables, so both of them will be certainly closed, so certainly that the underlying <code>fw.close()</code> <strong>will be called twice</strong>, first directly and for the second time through the wrapping <code>bw.close()</code>.</p>\n\n<p>This should not be a problem for these two specific classes that both implement <code>Closeable</code> (which is a subtype of <code>AutoCloseable</code>), whose contract states that multiple calls to <code>close</code> are permitted:</p>\n\n<blockquote>\n  <p>Closes this stream and releases any system resources associated with it. If the stream is already closed then invoking this method has no effect.</p>\n</blockquote>\n\n<p>However, in a general case, I can have resources that do implement only <code>AutoCloseable</code> (and not <code>Closeable</code>), which doesn't guarantee that the <code>close</code> can be called multiple times:</p>\n\n<blockquote>\n  <p>Note that unlike the close method of java.io.Closeable, this close method is not required to be idempotent. In other words, calling this close method more than once may have some visible side effect, unlike Closeable.close which is required to have no effect if called more than once. However, implementers of this interface are strongly encouraged to make their close methods idempotent.</p>\n</blockquote>\n\n<h2>3)</h2>\n\n<pre><code>static void printToFile3(String text, File file) {\n    try (FileWriter fw = new FileWriter(file)) {\n        BufferedWriter bw = new BufferedWriter(fw);\n        bw.write(text);\n    } catch (IOException ex) {\n        // handle ex\n    }\n}\n</code></pre>\n\n<p>This version should be theoretically correct, because only the <code>fw</code> represents a real resource that needs to be cleaned up. The <code>bw</code> does't itself hold any resource, it only delegates to the <code>fw</code>, so it should be sufficient to only close the underlying <code>fw</code>.</p>\n\n<p>On the other hand, the syntax is a bit irregular and also, Eclipse issues a warning, which I believe is a false alarm, but it is still a warning that one has to deal with:</p>\n\n<blockquote>\n  <p>Resource leak: 'bw' is never closed</p>\n</blockquote>\n\n<hr>\n\n<p>So, which approach to go for? Or have I missed some other idiom that is <em>the correct</em> one?</p>\n", "title": "Correct idiom for managing multiple chained resources in try-with-resources block?", "tags": ["java", "try-with-resources"], "link": "http://stackoverflow.com/questions/12552863/correct-idiom-for-managing-multiple-chained-resources-in-try-with-resources-bloc", "post_type": "question", "question_id": 12552863}, {"body": "<p>I want to delete all files inside ABC directory.</p>\n\n<p>When I tried with <code>FileUtils.deleteDirectory(new File(\"C:/test/ABC/\"));</code> it also deletes folder ABC.</p>\n\n<p>Is there a one liner solution where I can delete files inside directory but not directory?</p>\n", "title": "Delete all files in directory (but not directory) - one liner solution", "tags": ["java", "file-io", "apache-commons-io"], "link": "http://stackoverflow.com/questions/13195797/delete-all-files-in-directory-but-not-directory-one-liner-solution", "post_type": "question", "question_id": 13195797}, {"body": "<p>I am looking for the easiest and simplest way to bind and convert data in Spring MVC. If possible, without doing any xml configuration. </p>\n\n<p>So far I've been using <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html#beans-beans-conversion-customeditor-registration\">PropertyEditors</a> like so :</p>\n\n<pre><code>public class CategoryEditor extends PropertyEditorSupport {\n\n    // Converts a String to a Category (when submitting form)\n    @Override\n    public void setAsText(String text) {\n        Category c = new Category(text);\n        this.setValue(c);\n    }\n\n    // Converts a Category to a String (when displaying form)\n    @Override\n    public String getAsText() {\n        Category c = (Category) this.getValue();\n        return c.getName();\n    }\n\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>...\npublic class MyController {\n\n    @InitBinder\n    public void initBinder(WebDataBinder binder) {\n        binder.registerCustomEditor(Category.class, new CategoryEditor());\n    }\n\n    ...\n\n}\n</code></pre>\n\n<p>It is simple : both conversion are defined in the same class, and the binding is straightforward. If I wanted to do a general binding across all my controllers, I could still add <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-ann-webdatabinder\">3 lines in my xml config</a>.</p>\n\n<hr>\n\n<p>But Spring 3.x introduced a new way to do it, using <a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html#core-convert\">Converters</a> :</p>\n\n<blockquote>\n  <p>Within a Spring container, this system can be used as an alternative\n  to PropertyEditors</p>\n</blockquote>\n\n<p>So let's say I want to use Converters because it is \"the latest alternative\". I would have to create <strong>two</strong> converters :</p>\n\n<pre><code>public class StringToCategory implements Converter&lt;String, Category&gt; {\n\n    @Override\n    public Category convert(String source) {\n        Category c = new Category(source);\n        return c;\n    }\n\n}\n\npublic class CategoryToString implements Converter&lt;Category, String&gt; {\n\n    @Override\n    public String convert(Category source) {\n        return source.getName();\n    }\n\n}\n</code></pre>\n\n<p><strong>First drawback :</strong> I have to make two classes. Benefit : no need to cast thanks to genericity.</p>\n\n<p>Then, how do I simply data bind the converters ?  </p>\n\n<p><strong>Second drawback :</strong> I haven't found any simple way (annotations or other programmatic facilities) to do it in a controller : nothing like <code>someSpringObject.registerCustomConverter(...);</code>.</p>\n\n<p>The only ways I've found would be tedious, not simple, and only about general cross-controller binding :</p>\n\n<ul>\n<li><p><a href=\"http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html#core-convert-Spring-config\">XML config</a> :</p>\n\n<pre><code>&lt;bean id=\"conversionService\"\n  class=\"org.springframework.context.support.ConversionServiceFactoryBean\"&gt;\n    &lt;property name=\"converters\"&gt;\n        &lt;set&gt;\n            &lt;bean class=\"somepackage.StringToCategory\"/&gt;\n            &lt;bean class=\"somepackage.CategoryToString\"/&gt;\n        &lt;/set&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre></li>\n<li><p><a href=\"http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-config-customize\">Java config</a> (<strong>only in Spring 3.1+</strong>) :</p>\n\n<pre><code>@EnableWebMvc\n@Configuration\npublic class WebConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    protected void addFormatters(FormatterRegistry registry) {\n        registry.addConverter(new StringToCategory());\n        registry.addConverter(new CategoryToString());\n    }\n\n}\n</code></pre></li>\n</ul>\n\n<p>With all these drawbacks, why using Converters ? Am I missing something ? Are there other tricks that I am not aware of ?</p>\n\n<p>I am tempted to go on using PropertyEditors... Binding is much easier and quicker.</p>\n", "title": "Spring MVC type conversion : PropertyEditor or Converter?", "tags": ["java", "spring", "data-binding", "spring-mvc", "type-conversion"], "link": "http://stackoverflow.com/questions/12544479/spring-mvc-type-conversion-propertyeditor-or-converter", "post_type": "question", "question_id": 12544479}, {"body": "<p>If you look in the enum api at the method <code>name()</code> it says that:</p>\n\n<blockquote>\n  <p>Returns the name of this enum constant, exactly as declared in its enum declaration. \n          Most programmers should use the toString method in preference to this one, \n          as the toString method may return a more user-friendly name.\n          This method is designed primarily for use in specialized situations where correctness depends on getting the exact name, which will not vary from release to release.</p>\n</blockquote>\n\n<p>Why is better to use <code>toString()</code>? I mean toString may be overridden when name() is already final. So if you use toString and someone overrides it to return a hard-coded value your whole application is down... Also if you look in the sources the toString() method returns exactly and just the name. It's the same thing.</p>\n", "title": "Java enum - why use toString instead of name", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/13291076/java-enum-why-use-tostring-instead-of-name", "post_type": "question", "question_id": 13291076}, {"body": "<p>The interviewer asked me:</p>\n\n<blockquote>\n  <p>What is <code>Observer</code> and <code>Observable</code> and when should we use them?</p>\n</blockquote>\n\n<p>I wasn't aware of these terms. So, when I came back to home, then I started looking into Google about <code>Observer</code> and <code>Observable</code> and found some point from different resources :</p>\n\n<blockquote>\n  <p>1) <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Observable.html\"><code>Observable</code></a> is a class and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Observer.html\"><code>Observer</code></a> is an interface.</p>\n  \n  <p>2) <code>Observable</code> class maintain a list of Observers.</p>\n  \n  <p>3) When an Observable object is updated, it invokes the <code>update()</code> method of each of its Observers to notify that, it is changed.</p>\n</blockquote>\n\n<p>I found this example:</p>\n\n<pre><code>import java.util.Observable;\nimport java.util.Observer;\n\nclass MessageBoard extends Observable {\n  private String message;\n\n  public String getMessage() {\n    return message;\n  }\n\n  public void changeMessage(String message) {\n    this.message = message;\n    setChanged();\n    notifyObservers(message);\n  }\n\n  public static void main(String[] args) {\n    MessageBoard board = new MessageBoard();\n    Student bob = new Student();\n    Student joe = new Student();\n    board.addObserver(bob);\n    board.addObserver(joe);\n    board.changeMessage(\"More Homework!\");\n  }\n}\n\nclass Student implements Observer {\n  public void update(Observable o, Object arg) {\n    System.out.println(\"Message board changed: \" + arg);\n  }\n}\n</code></pre>\n\n<p>But I'm still unable to figure out why do we need <code>Observer</code> and <code>Observable</code>? What are the <code>setChanged()</code> and <code>notifyObservers(message)</code> methods for?</p>\n", "title": "When should we use Observer and Observable", "tags": ["java", "observer-pattern", "observable", "observers"], "link": "http://stackoverflow.com/questions/13744450/when-should-we-use-observer-and-observable", "post_type": "question", "question_id": 13744450}, {"body": "<p>I'm trying to add header for my request using <code>HttpUrlConnection</code> but the method <code>setRequestProperty()</code> doesn't seem working. The server side doesn't receive any request with my header. Can anyone help me? Thanks in advance.</p>\n\n<pre><code>HttpURLConnection hc;\n    try {\n        String authorization = \"\";\n        URL address = new URL(url);\n        hc = (HttpURLConnection) address.openConnection();\n\n\n        hc.setDoOutput(true);\n        hc.setDoInput(true);\n        hc.setUseCaches(false);\n\n        if (username != null &amp;&amp; password != null) {\n            authorization = username + \":\" + password;\n        }\n\n        if (authorization != null) {\n            byte[] encodedBytes;\n            encodedBytes = Base64.encode(authorization.getBytes(), 0);\n            authorization = \"Basic \" + encodedBytes;\n            hc.setRequestProperty(\"Authorization\", authorization);\n        }\n</code></pre>\n", "title": "Adding header for HttpURLConnection", "tags": ["java", "http"], "link": "http://stackoverflow.com/questions/12732422/adding-header-for-httpurlconnection", "post_type": "question", "question_id": 12732422}, {"body": "<p>I'm trying to understand what makes the lock in concurrency so important if one can use <code>synchronized (this)</code>. In the dummy code below, I can do either:</p>\n\n<ol>\n<li>synchronized the entire method or synchronize the vulnerable area (synchronized(this){...})</li>\n<li>OR lock the vulnerable code area with a ReentrantLock .</li>\n</ol>\n\n<p>Code:</p>\n\n<pre><code>private final ReentrantLock lock =  new ReentrantLock(); \n    private static List&lt;Integer&gt; ints;\n\n    public Integer getResult(String name) { \n        .\n        .\n        .\n        lock.lock();\n        try{\n            if (ints.size()==3) {\n                ints=null;\n                return -9;\n            }   \n\n            for (int x=0; x&lt;ints.size(); x++) {\n                System.out.println(\"[\"+name+\"] \"+x+\"/\"+ints.size()+\". values &gt;&gt;&gt;&gt;\"+ints.get(x));\n            }\n\n        }finally {\n            lock.unlock();\n        } \n        return random;\n}\n</code></pre>\n", "title": "Why use a ReentrantLock if one can use synchronized(this)?", "tags": ["java", "multithreading", "concurrency", "synchronize", "reentrantlock"], "link": "http://stackoverflow.com/questions/11821801/why-use-a-reentrantlock-if-one-can-use-synchronizedthis", "post_type": "question", "question_id": 11821801}, {"body": "<p>I declare an enum as : </p>\n\n<pre><code>     enum Sex {MALE,FEMALE};\n</code></pre>\n\n<p>And then, iterate enum as shown below :</p>\n\n<pre><code>    for(Sex v : Sex.values()){\n        System.out.println(\" values :\"+ v);\n    }\n</code></pre>\n\n<p>I checked the Java API but can't find the values() method? I'm curious as to where this method comes from? </p>\n\n<p>API link : \n<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html\">https://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html</a></p>\n", "title": "Where is the documentation for the values() method of Enum?", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/13659217/where-is-the-documentation-for-the-values-method-of-enum", "post_type": "question", "question_id": 13659217}, {"body": "<p>Ken's answer is basically right but I'd like to chime in on the \"why would you want to use one over the other?\" part of your question.</p>\n\n<h2>Basics</h2>\n\n<p>The base interface you choose for your repository has two main purposes. First, you allow the Spring Data repository infrastructure to find your interface and trigger the proxy creation so that you inject instances of the interface into clients. The second purpose is to pull in as much functionality as needed into the interface without having to declare extra methods.</p>\n\n<h2>The common interfaces</h2>\n\n<p>The Spring Data core library ships with two base interfaces that expose a dedicated set of functionalities:</p>\n\n<ul>\n<li><code>CrudRepository</code> - CRUD methods</li>\n<li><code>PagingAndSortingRepository</code> - methods for pagination and sorting (extends <code>CrudRepository</code>)</li>\n</ul>\n\n<h2>Store-specific interfaces</h2>\n\n<p>The individual store modules (e.g. for JPA or MongoDB) expose store-specific extensions of these base interfaces to allow access to store-specific functionality like flushing or dedicated batching that take some store specifics into account. An example for this is <code>deleteInBatch(\u2026)</code> of <code>JpaRepository</code> which is different from <code>delete(\u2026)</code> as it uses a query to delete the given entities which is more performant but comes with the side effect of not triggering the JPA-defined cascades (as the spec defines it).</p>\n\n<p>We generally recommend <em>not</em> to use these base interfaces as they expose the underlying persistence technology to the clients and thus tighten the coupling between them and the repository. Plus, you get a bit away from the original definition of a repository which is basically \"a collection of entities\". So if you can, stay with <code>PagingAndSortingRepository</code>.</p>\n\n<h2>Custom repository base interfaces</h2>\n\n<p>The downside of directly depending on one of the provided base interfaces is two-fold. Both of them might be considered as theoretical but I think they're important to be aware of:</p>\n\n<ol>\n<li><strong>Depending on a a Spring Data repository interface couples your repository interface to the library.</strong> I don't think this is a particular issue as you'll probably use abstractions like <code>Page</code> or <code>Pageable</code> in your code anyway. Spring Data is not any different from any other general purpose library like commons-lang or Guava. As long as it provides reasonable benefit, it's just fine.</li>\n<li><strong>By extending e.g. <code>CrudRepository</code>, you expose a complete set of persistence method at once.</strong> This is probably fine in most circumstances as well but you might run into situations where you'd like to gain more fine-grained control over the methods expose, e.g. to create a <code>ReadOnlyRepository</code> that doesn't include the <code>save(\u2026)</code> and <code>delete(\u2026)</code> methods of <code>CrudRepository</code>.</li>\n</ol>\n\n<p>The solution to both of these downsides is to craft your own base repository interface or even a set of them. In a lot of applications we've seen something like this:</p>\n\n<pre><code>interface ApplicationRepository&lt;T&gt; extends PagingAndSortingRepository&lt;T, Long&gt; { }\n\ninterface ReadOnlyRepository&lt;T&gt; extends Repository&lt;T, Long&gt; {\n\n  // Al finder methods go here\n}\n</code></pre>\n\n<p>The first repository interface is some general purpose base interface that actually only fixes point 1 but also ties the ID type to be <code>Long</code> for consistency. The second interface usually has all the <code>find\u2026(\u2026)</code> methods copied from <code>CrudRepository</code> and <code>PagingAndSortingRepository</code> but does not expose the manipulating ones. Read more on that approach in the <a href=\"http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.definition-tuning\">reference documentation</a>.</p>\n\n<h2>Summary - tl;dr</h2>\n\n<p>The repository abstraction allows you to pickt the base repository totally driven by you architectural and functional needs. Use the ones provided out of the box if they suit, craft your own repository base interfaces if necessary. Stay away from the store specific repository interfaces unless unavoidable.</p>\n", "title": "What is difference between CrudRepository and JpaRepository interfaces in Spring Data JPA", "tags": ["java", "spring", "jpa", "spring-data", "spring-data-jpa"], "link": "http://stackoverflow.com/questions/14014086/what-is-difference-between-crudrepository-and-jparepository-interfaces-in-spring/20784007#20784007", "post_type": "answer", "question_id": 14014086, "answer_id": 20784007}, {"body": "<p>Here we are faced with a bug in the JIT-compiler. Compiler determines that the allocated array is filled after allocation in <code>Arrays.fill(...)</code>, but the check for uses between the allocation and the fill is faulty. So, compiler performs an illegal optimization - it skips zeroing of allocated array.</p>\n\n<p>This bug is placed in Oracle bug tracker (<a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7196857\">bug id 7196857</a>). Unfortunately, I did not wait for any clarifications from Oracle about the following points. As I see, this bug is OS-specific: it absolutely reproducible on 64-bit Linux and Mac, but, as I see from comments, it reproduces not regularly on Windows (for similar versions of JDK). Additionally it would be nice to know when this bug will be fixed.</p>\n\n<p>There is only advice at the moment: do not use JDK1.7.0_04 or later if you depend on JLS for newly declared arrays.</p>\n\n<p><em>Update at October 5:</em></p>\n\n<p>In the new <a href=\"http://jdk7.java.net/download.html\">Build 10</a> of the JDK 7u10 (early access) released at October 04, 2012, this bug was fixed at least for Linux OS (I did not test for other). Thanks to @Makoto, who found that this bug is no longer available for public access in Oracle bug database. Unfortunately, I do not know for the reasons Oracle removed it from public access, but it is available in Google <a href=\"http://webcache.googleusercontent.com/search?q=cache%3aQ0V_rKQNw5sJ%3abugs.sun.com/bugdatabase/view_bug.do?bug_id=7196857%20&amp;cd=5&amp;hl=en&amp;ct=clnk\">cache</a>. Also, this bug has caught the attention of Redhat: the CVE identifiers <a href=\"https://access.redhat.com/security/cve/CVE-2012-4420\">CVE-2012-4420</a>  (<a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=856588\">bugzilla</a>) and <a href=\"https://access.redhat.com/security/cve/CVE-2012-4416\">CVE-2012-4416</a> (<a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=856124\">bugzilla</a>) were assigned to this flaw.</p>\n", "title": "Java: int array initializes with nonzero elements", "tags": ["java", "arrays", "jvm", "initialization", "java-7"], "link": "http://stackoverflow.com/questions/12317668/java-int-array-initializes-with-nonzero-elements/12375312#12375312", "post_type": "answer", "question_id": 12317668, "answer_id": 12375312}, {"body": "<p>Lambdas are purely a call-site construct: the recipient of the lambda does not need to know that a Lambda is involved, instead it accepts an Interface with the appropriate method.</p>\n\n<p>In other words, you define or use a functional interface (i.e. an interface with a single method) that accepts and returns exactly what you want.</p>\n\n<p>For this Java 8 comes with a set of commonly-used interface types in <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html\"><code>java.util.function</code></a> (thanks to <a href=\"http://stackoverflow.com/users/1859863/maurice-naftalin\">Maurice Naftalin</a> for the hint about the JavaDoc).</p>\n\n<p>For this specific use case there's <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/function/IntBinaryOperator.html\"><code>java.util.function.IntBinaryOperator</code></a> with <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/function/IntBinaryOperator.html#applyAsInt-int-int-\">a single <code>int applyAsInt(int left, int right)</code> method</a>, so you could write your <code>method</code> like this:</p>\n\n<pre><code>static int method(IntBinaryOperator op){\n    return op.applyAsInt(5, 10);\n}\n</code></pre>\n\n<p>But you can just as well define your own interface and use it like this:</p>\n\n<pre><code>public interface TwoArgIntOperator {\n    public int op(int a, int b);\n}\n\n//elsewhere:\nstatic int method(TwoArgIntOperator operator) {\n    return operator.op(5, 10);\n}\n</code></pre>\n\n<p>Using your own interface has the advantage that you can have names that more clearly indicate the intent.</p>\n", "title": "How do I define a method which takes a lambda as a parameter in Java 8?", "tags": ["java", "lambda", "java-8"], "link": "http://stackoverflow.com/questions/13604703/how-do-i-define-a-method-which-takes-a-lambda-as-a-parameter-in-java-8/13604748#13604748", "post_type": "answer", "question_id": 13604703, "answer_id": 13604748}, {"body": "<p>In very simple terms (because the other answers are referring you to all the official design patterns anyway, so look at them for further details):</p>\n\n<p>If you want to have a class which is monitored by other classes in the ecosystem of your program you say that you want the class to be observable. I.e. there might be some changes in its state which you would want to broadcast to the rest of the program.</p>\n\n<p>Now, to do this we have to call some kind of method. We don't want the Observable class to be tightly coupled with the classes that are interested in observing it. It doesn't care who it is as long as it fulfils certain criteria. (Imagine it is a radio station, it doesn't care who is listening as long as they have an FM radio tuned on their frequency). To achieve that we use an interface, referred to as the Observer. </p>\n\n<p>Therefore, the Observable class will have a list of Observers (i.e. instances implementing the Observer interface methods you might have). Whenever it wants to broadcast something, it just calls the method on all the observers, one after the other.</p>\n\n<p>The last thing to close the puzzle is how will the Observable class know who is interested?\nSo the Observable class must offer some mechanism to allow Observers to register their interest. A method such as <code>addObserver(Observer o)</code> internally adds the Observer to the list of observers, so that when something important happens, it loops through the list and calls the respective notification method of the Observer interface of each instance in the list.</p>\n\n<p>It might be that in the interview they did not ask you explicitly about the <code>java.util.Observer</code> and <code>java.util.Observable</code> but about the generic concept. The concept is a design pattern, which Java happens to provide support for directly out of the box to help you implement it quickly when you need it. So I would suggest that you understand the concept rather than the actual methods/classes (which you can look up when you need them).</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>In response to your comment, the actual <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Observable.html\"><code>java.util.Observable</code></a> class offers the following facilities:</p>\n\n<ol>\n<li><p>Maintaining a list of <code>java.util.Observer</code> instances. New instances interested in being notified can be added through <code>addObserver(Observer o)</code>, and removed through <code>deleteObserver(Observer o)</code>.</p></li>\n<li><p>Maintaining an internal state, specifying whether the object has changed since the last notification to the observers. This is useful because it separates the part where you say  that the <code>Observable</code> has changed, from the part where you notify the changes. (E.g. Its useful if you have multiple changes happening and you only want to notify at the end of the process rather than at each small step). This is done through <code>setChanged()</code>. So you just call it when you changed something to the <code>Observable</code> and you want the rest of the <code>Observers</code> to eventually know about it.</p></li>\n<li><p>Notifying all observers that the specific <code>Observable</code> has changed state. This is done through <code>notifyObservers()</code>. This checks if the object has actually changed (i.e. a call to <code>setChanged()</code> was made) before proceeding with the notification. There are 2 versions, one with no arguments and one with an <code>Object</code> argument, in case you want to pass some extra information with the notification. Internally what happens is that it just iterates through the list of <code>Observer</code> instances and calls the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Observer.html#update%28java.util.Observable,%20java.lang.Object%29\"><code>update(Observable o, Object arg)</code></a> method for each of them. This tells the <code>Observer</code> which was the Observable object that changed (you could be observing more than one), and the extra <code>Object arg</code> to potentially carry some extra information (passed through <code>notifyObservers()</code>.</p></li>\n</ol>\n", "title": "When should we use Observer and Observable", "tags": ["java", "observer-pattern", "observable", "observers"], "link": "http://stackoverflow.com/questions/13744450/when-should-we-use-observer-and-observable/13744816#13744816", "post_type": "answer", "question_id": 13744450, "answer_id": 13744816}, {"body": "<p>The <code>+</code> operator is usually replaced by a <code>StringBuilder</code> at compile time. Check this <a href=\"http://stackoverflow.com/questions/4648607/stringbuilder-stringbuffer-vs-operator\">answer</a> for more details on that matter.</p>\n", "title": "How does the String class override the + operator?", "tags": ["java", "string", "object"], "link": "http://stackoverflow.com/questions/11408427/how-does-the-string-class-override-the-operator/11408477#11408477", "post_type": "answer", "question_id": 11408427, "answer_id": 11408477}, {"body": "<p>The Java language provides special support for the string concatenation operator (+) and for conversion of other objects to strings. String concatenation is implemented through the <code>StringBuilder</code>(or <code>StringBuffer</code>) class and its <code>append</code> method.</p>\n", "title": "How does the String class override the + operator?", "tags": ["java", "string", "object"], "link": "http://stackoverflow.com/questions/11408427/how-does-the-string-class-override-the-operator/11408482#11408482", "post_type": "answer", "question_id": 11408427, "answer_id": 11408482}, {"body": "<p>Let's look at the following simple expressions in Java</p>\n\n<pre><code>int x=15;\nString temp=\"x = \"+x;\n</code></pre>\n\n<p>The compiler converts <code>\"x = \"+x;</code> into a <code>StringBuilder</code> internally and uses <code>.append(int)</code> to \"add\" the integer to the string. </p>\n\n<p><strong><a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.11\">5.1.11. String Conversion</a></strong></p>\n\n<blockquote>\n  <p>Any type may be converted to type String by string conversion.</p>\n  \n  <p>A value x of primitive type T is first converted to a reference value\n  as if by giving it as an argument to an appropriate class instance\n  creation expression (\u00a715.9):</p>\n  \n  <ul>\n  <li>If T is boolean, then use new Boolean(x).</li>\n  <li>If T is char, then use new Character(x).</li>\n  <li>If T is byte, short, or int, then use new Integer(x).</li>\n  <li>If T is long, then use new Long(x).</li>\n  <li>If T is float, then use new Float(x).</li>\n  <li>If T is double, then use new Double(x).</li>\n  </ul>\n  \n  <p>This reference value is then converted to type String by string\n  conversion.</p>\n  \n  <p>Now only reference values need to be considered:</p>\n  \n  <ul>\n  <li>If the reference is null, it is converted to the string \"null\" (four    ASCII characters n, u, l, l).</li>\n  <li>Otherwise, the conversion is performed as if by an invocation of the    toString method of the referenced object with no arguments; but\n  if    the result of invoking the toString method is null, then the\n  string    \"null\" is used instead.</li>\n  </ul>\n  \n  <p><sup>The toString method is defined by the primordial class Object\n  (\u00a74.3.2). Many classes override it, notably Boolean, Character,\n  Integer, Long, Float, Double, and String.</p>\n  \n  <p>See \u00a75.4 for details of the string conversion context.</sup></p>\n</blockquote>\n\n<p><strong><a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.18.1\">15.18.1.</a></strong></p>\n\n<blockquote>\n  <p><strong>Optimization of String Concatenation :</strong>\n  An implementation may choose to perform conversion and concatenation\n  in one step to avoid creating and then discarding an intermediate\n  String object. To increase the performance of repeated string\n  concatenation, a Java compiler may use the StringBuffer class or a\n  similar technique to reduce the number of intermediate String objects\n  that are created by evaluation of an expression.</p>\n  \n  <p>For primitive types, an implementation may also optimize away the\n  creation of a wrapper object by converting directly from a primitive\n  type to a string.</p>\n</blockquote>\n\n<p>The optimized version will not actually do a full wrapped String conversion first.</p>\n\n<p>This is a good illustration of an optimized version used by the compiler, albeit without the conversion of a primitive, where you can see the compiler changing things into a StringBuilder in the background:</p>\n\n<p><a href=\"http://caprazzi.net/posts/java-bytecode-string-concatenation-and-stringbuilder/\">http://caprazzi.net/posts/java-bytecode-string-concatenation-and-stringbuilder/</a></p>\n\n<hr>\n\n<p>This java code:</p>\n\n<pre><code>public static void main(String[] args) {\n    String cip = \"cip\";\n    String ciop = \"ciop\";\n    String plus = cip + ciop;\n    String build = new StringBuilder(cip).append(ciop).toString();\n}\n</code></pre>\n\n<p>Generates this - see how the two concatenation styles lead to the very same bytecode:</p>\n\n<pre><code> L0\n    LINENUMBER 23 L0\n    LDC \"cip\"\n    ASTORE 1\n   L1\n    LINENUMBER 24 L1\n    LDC \"ciop\"\n    ASTORE 2\n\n   // cip + ciop\n\n   L2\n    LINENUMBER 25 L2\n\n    NEW java/lang/StringBuilder\n    DUP\n    ALOAD 1\n    INVOKESTATIC java/lang/String.valueOf(Ljava/lang/Object;)Ljava/lang/String;\n    INVOKESPECIAL java/lang/StringBuilder.&lt;init&gt;(Ljava/lang/String;)V\n    ALOAD 2\n    INVOKEVIRTUAL java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    INVOKEVIRTUAL java/lang/StringBuilder.toString()Ljava/lang/String;\n\n    ASTORE 3\n\n    // new StringBuilder(cip).append(ciop).toString()\n\n   L3\n    LINENUMBER 26 L3\n\n    NEW java/lang/StringBuilder\n    DUP\n    ALOAD 1\n    INVOKESPECIAL java/lang/StringBuilder.&lt;init&gt;(Ljava/lang/String;)V\n    ALOAD 2\n    INVOKEVIRTUAL java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;\n    INVOKEVIRTUAL java/lang/StringBuilder.toString()Ljava/lang/String;\n\n    ASTORE 4\n   L4\n    LINENUMBER 27 L4\n    RETURN\n</code></pre>\n\n<p>Looking at the example above and how the byte code based on the source code in the given example is generated, you will be able to notice that the compiler has internally transformed the following statement</p>\n\n<pre><code>cip+ciop; \n</code></pre>\n\n<p>into </p>\n\n<pre><code>new StringBuilder(cip).append(ciop).toString();\n</code></pre>\n\n<p>In other words, the operator <code>+</code> in string concatenation is effectively a shorthand for the more verbose <code>StringBuilder</code> idiom.</p>\n", "title": "How does the String class override the + operator?", "tags": ["java", "string", "object"], "link": "http://stackoverflow.com/questions/11408427/how-does-the-string-class-override-the-operator/11408526#11408526", "post_type": "answer", "question_id": 11408427, "answer_id": 11408526}, {"body": "<h1>Grant Vibration Permission</h1>\n\n<p>Before you start implementing any vibration code, you have to give your application the permission to vibrate:</p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.VIBRATE\"/&gt;\n</code></pre>\n\n<p>Make sure to include this line in your AndroidManifest.xml file.</p>\n\n<h1>Import the Vibration Library</h1>\n\n<p>Most IDEs will do this for you, but here is the import statement if yours doesn't:</p>\n\n<pre><code> import android.os.Vibrator;\n</code></pre>\n\n<p>Make sure this in the activity where you want the vibration to occur.</p>\n\n<h1>How to Vibrate for a Given Time</h1>\n\n<p>In most circumstances, you'll be wanting to vibrate the device for a short, predetermined amount of time. You can achieve this by using the <code>vibrate(long milliseconds)</code> method. Here is a quick example:</p>\n\n<pre><code>// Get instance of Vibrator from current Context\nVibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);\n\n// Vibrate for 400 milliseconds\nv.vibrate(400);\n</code></pre>\n\n<p>That's it, simple!</p>\n\n<h1>How to Vibrate Indefinitely</h1>\n\n<p>It may be the case that you want the device to continue vibrating indefinitely. For this, we use the <code>vibrate(long[] pattern, int repeat)</code> method:</p>\n\n<pre><code>// Get instance of Vibrator from current Context\nVibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);\n\n// Start without a delay\n// Vibrate for 100 milliseconds\n// Sleep for 1000 milliseconds\nlong[] pattern = {0, 100, 1000};\n\n// The '0' here means to repeat indefinitely\n// '0' is actually the index at which the pattern keeps repeating from (the start)\n// To repeat the pattern from any other point, you could increase the index, e.g. '1'\nv.vibrate(pattern, 0);\n</code></pre>\n\n<p>When you're ready to stop the vibration, just call the <code>cancel()</code> method:</p>\n\n<pre><code>v.cancel();\n</code></pre>\n\n<h1>How to use Vibration Patterns</h1>\n\n<p>If you want a more bespoke vibration, you can attempt to create your own vibration patterns:</p>\n\n<pre><code>// Get instance of Vibrator from current Context\nVibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);\n\n// Start without a delay\n// Each element then alternates between vibrate, sleep, vibrate, sleep...\nlong[] pattern = {0, 100, 1000, 300, 200, 100, 500, 200, 100};\n\n// The '-1' here means to vibrate once, as '-1' is out of bounds in the pattern array\nv.vibrate(pattern, -1);\n</code></pre>\n\n<h1>More Complex Vibrations</h1>\n\n<p>There are multiple SDKs that offer a more comprehensive range of haptic feedback. One that I use for special effects is <a href=\"http://www2.immersion.com/developers/index.php?option=com_content&amp;view=category&amp;layout=blog&amp;id=119&amp;Itemid=592\">Immersion's Haptic Development Platform for Android</a>.</p>\n\n<h1>Troubleshooting</h1>\n\n<p>If your device won't vibrate, first make sure that it can vibrate:</p>\n\n<pre><code>// Get instance of Vibrator from current Context\nVibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);\n\n// Output yes if can vibrate, no otherwise\nif (v.hasVibrator()) {\n    Log.v(\"Can Vibrate\", \"YES\");\n} else {\n    Log.v(\"Can Vibrate\", \"NO\");\n}\n</code></pre>\n\n<p>Secondly, please ensure that you've given your application the permission to vibrate! Refer back to the first point.</p>\n", "title": "How to make an Android device vibrate?", "tags": ["java", "android", "vibrate", "android-vibration"], "link": "http://stackoverflow.com/questions/13950338/how-to-make-an-android-device-vibrate/17066803#17066803", "post_type": "answer", "question_id": 13950338, "answer_id": 17066803}, {"body": "<p>Use <code>name()</code> when you want to make a comparison or use the hardcoded value for some internal  use in your code.</p>\n\n<p>Use <code>toString()</code> when you want to present information to a user (including a developper looking at a log). Never rely in your code on <code>toString()</code> giving a specific value. Never test it against a specific string. If your code breaks when someone correctly changes the <code>toString()</code> return, then it was already broken.</p>\n\n<p>From the javadoc (emphasis mine) :</p>\n\n<blockquote>\n  <p>Returns a string representation of the object. In general, the\n  toString method returns a string that <strong>\"textually represents\"</strong> this\n  object. The result should be a concise but informative representation\n  that is easy for <strong>a person to read</strong>. <strong>It is recommended that all\n  subclasses override this method.</strong></p>\n</blockquote>\n", "title": "Java enum - why use toString instead of name", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/13291076/java-enum-why-use-tostring-instead-of-name/13291108#13291108", "post_type": "answer", "question_id": 13291076, "answer_id": 13291108}, {"body": "<p>It really depends on what you want to do with the returned value:</p>\n\n<ul>\n<li>If you need to get the exact name used to declare the enum constant, you should use <code>name()</code> as <code>toString</code> may have been overriden</li>\n<li>If you want to print the enum constant in a user friendly way, you should use <code>toString</code> which may have been overriden (or not!).</li>\n</ul>\n\n<p>When I feel that it might be confusing, I provide a more specific <code>getXXX</code> method, for example:</p>\n\n<pre><code>public enum Fields {\n    LAST_NAME(\"Last Name\"), FIRST_NAME(\"First Name\");\n\n    private final String fieldDescription;\n\n    private Fields(String value) {\n        fieldDescription = value;\n    }\n\n    public String getFieldDescription() {\n        return fieldDescription;\n    }\n}\n</code></pre>\n", "title": "Java enum - why use toString instead of name", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/13291076/java-enum-why-use-tostring-instead-of-name/13291109#13291109", "post_type": "answer", "question_id": 13291076, "answer_id": 13291109}, {"body": "<p><code>name()</code> is a \"built-in\" method of <code>enum</code>. It is final and you cannot change its implementation. It returns the name of enum constant as it is written, e.g. in upper case, without spaces etc. </p>\n\n<p>Compare <code>MOBILE_PHONE_NUMBER</code> and <code>Mobile phone number</code>. Which version is more readable? I believe the second one. This is the difference: <code>name()</code> always returns <code>MOBILE_PHONE_NUMBER</code>, <code>toString()</code> may be overriden to return <code>Mobile phone number</code>.</p>\n", "title": "Java enum - why use toString instead of name", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/13291076/java-enum-why-use-tostring-instead-of-name/13291166#13291166", "post_type": "answer", "question_id": 13291076, "answer_id": 13291166}, {"body": "<p>name() is literally the textual name in the java code of the enum. That means it is limited to strings that can actually appear in your java code, but not all desirable strings are expressible in code. For example, you may need a string that begins with a number. name() will never be able to obtain that string for you.</p>\n", "title": "Java enum - why use toString instead of name", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/13291076/java-enum-why-use-tostring-instead-of-name/31886637#31886637", "post_type": "answer", "question_id": 13291076, "answer_id": 31886637}, {"body": "<p>Have you considered <code>@Autowired</code>ing the constructor or a setter and <code>String.split()</code>ing in the body?</p>\n\n<pre><code>class MyClass {\n    private List&lt;String&gt; myList;\n\n    @Autowired\n    public MyClass(@Value(\"${my.list.of.strings}\") final String strs) {\n        myList = Arrays.asList(strs.split(\",\"));\n    }\n\n    //or\n\n    @Autowired\n    public void setMyList(@Value(\"${my.list.of.strings}\") final String strs) {\n        myList = Arrays.asList(strs.split(\",\"));\n    }\n}\n</code></pre>\n\n<p>I tend to prefer doing my autowiring in one of these ways to enhance the testability of my code.</p>\n", "title": "Reading a List from properties file and load with spring annotation @Value", "tags": ["java", "spring", "spring-properties"], "link": "http://stackoverflow.com/questions/12576156/reading-a-list-from-properties-file-and-load-with-spring-annotation-value/12576308#12576308", "post_type": "answer", "question_id": 12576156, "answer_id": 12576308}, {"body": "<p>By specifying the the <code>my.list.of.strings=ABC,CDE,EFG</code> in .properties file and using </p>\n\n<p><code>@Value(\"${my.list.of.strings}\")</code>\n<code>private String[] myString;</code></p>\n\n<p>You can get the arrays of strings. And using <code>CollectionUtils.addAll(myList, myString)</code>, you can get the list of strings.</p>\n", "title": "Reading a List from properties file and load with spring annotation @Value", "tags": ["java", "spring", "spring-properties"], "link": "http://stackoverflow.com/questions/12576156/reading-a-list-from-properties-file-and-load-with-spring-annotation-value/12576394#12576394", "post_type": "answer", "question_id": 12576156, "answer_id": 12576394}, {"body": "<p>This is great question!\nI think the root cause of it is the following, we are using JUnit not only for unit testing. So the question should be splited up:</p>\n\n<ul>\n<li>Should I use Mockito.verify() in my <em>integration</em> (or any other higher-than-unit testing) testing?</li>\n<li>Should I use Mockito.verify() in my <strong>black-box</strong> unit-testing?</li>\n<li>Should I use Mockito.verify() in my <strong>white-box</strong> unit-testing?</li>\n</ul>\n\n<p>so if we will ignore higher-than-unit testing, the question can be rephrased \"<em>Using <strong>white-box</strong> unit-testing with Mockito.verify() creates great couple between unit test and my could implementation, can I make some <strong>\"grey-box\"</strong> unit-testing and what rules of thumb I should use for this</em>\".</p>\n\n<p>Now, let's go through all of this step-by-step.</p>\n\n<p>*- Should I use Mockito.verify() in my <em>integration</em> (or any other higher-than-unit testing) testing?*\nI think the answer is clearly no, moreover you shouldn't use mocks for this. Your test should be as close to real application as possible. You are testing complete use case, not isolated part of the application. </p>\n\n<p>*<strong><em>black-box</strong> vs <strong>white-box</strong> unit-testing</em>*\nIf you are using <strong>black-box</strong> approach what is you really doing, you supply (all equivalence classes) input, a <em>state</em>, and tests that you will receive expected output. In this approach using of mocks in general is justifies (you just mimic that they are doing the right thing; you don't want to test them), but calling Mockito.verify() is superfluous.</p>\n\n<p>If you are using <strong>white-box</strong> approach what is you really doing, you're testing the <em>behaviour</em> of your unit. In this approach calling to Mockito.verify() is essential, you should verify that your unit behaves as you're expecting to.</p>\n\n<p><strong>rules of thumbs for grey-box-testing</strong> \nThe problem with white-box testing is it creates a high coupling. One possible solution is to do grey-box-testing, not white-box-testing. This is sort of combination of black&amp;white box testing. You are really testing the <em>behaviour</em> of your unit like in white-box testing, but in general you make it implementation-agnostic <em>when possible</em>. When it is possible, you will just make a check like in black-box case, just asserts that output is what is your expected to be.  So, the essence of your question is when it is possible. </p>\n\n<p>This is really hard. I don't have a good example, but I can give you to examples. In the case that was mentioned above with equals() vs equalsIgnoreCase() you shouldn't call Mockito.verify(), just assert the output. If you couldn't do it, break down your code to the smaller unit, until you can do it. On the other hand, suppose you have some @Service and you are writting @Web-Service that is essentially wrapper upon your @Service - it delegates all calls to the @Service (and making some extra error handling). In this case calling to Mockito.verify() is essential, you shouldn't duplicate all of your checks that you did for the @Serive, verifying that you're calling to @Service with correct parammeter list is sufficient.</p>\n", "title": "When to use Mockito.verify()?", "tags": ["java", "unit-testing", "junit", "mockito"], "link": "http://stackoverflow.com/questions/12539365/when-to-use-mockito-verify/12562433#12562433", "post_type": "answer", "question_id": 12539365, "answer_id": 12562433}, {"body": "<p>I must say, that you are absolutely right from a classical approach's point of view:</p>\n\n<ul>\n<li>If you first <em>create (or change) business logic</em> of your application and then <em>cover it with (adopt) tests</em> (<em>Test-Last approach</em>), then it will be very painful and dangerous to let tests know anything about how your software works, other than checking inputs and outputs.</li>\n<li>If you are practicing a <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\" rel=\"nofollow\"><em>Test-Driven approach</em></a>, then your tests are the <a href=\"http://www.jamesshore.com/Blog/Red-Green-Refactor.html\" rel=\"nofollow\">first to be written, to be changed and to reflect the use cases</a> of your software's functionality. <strong>The implementation depends on tests.</strong> That sometimes mean, that you want your software to be implemented in some particular way, e.g. rely on some other component's method or even call it a particular amount of times. That is where <a href=\"http://www.baeldung.com/mockito-verify\" rel=\"nofollow\">Mockito.verify()</a> comes in handy!</li>\n</ul>\n\n<p>It is important to remember, that there are no universal tools. The type of software, it's size, company goals and market situation, team skills and many other things influence the decision on which approach to use at your particular case.</p>\n", "title": "When to use Mockito.verify()?", "tags": ["java", "unit-testing", "junit", "mockito"], "link": "http://stackoverflow.com/questions/12539365/when-to-use-mockito-verify/29349910#29349910", "post_type": "answer", "question_id": 12539365, "answer_id": 29349910}, {"body": "<p>use the second argument on the <code>Mockito.verify</code> method, as in:</p>\n\n<p><code>verify(dependency, <strong>Mockito.times(0)</strong>).someMethod()</code></p>\n", "title": "How to verify that a specific method was not called using Mockito?", "tags": ["java", "tdd", "mockito"], "link": "http://stackoverflow.com/questions/12862659/how-to-verify-that-a-specific-method-was-not-called-using-mockito/12862662#12862662", "post_type": "answer", "question_id": 12862659, "answer_id": 12862662}, {"body": "<p>It's because when you enter a number then press <kbd>Enter</kbd>, <code>input.nextInt()</code> consumes only the number, not the \"end of line\". When <code>input.nextLine()</code> executes, it consumes the \"end of line\" still in the buffer from the first input.</p>\n\n<p>Instead, use <code>input.nextLine()</code> immediately after <code>input.nextInt()</code></p>\n", "title": "Scanner is skipping nextLine() after using next(), nextInt() or other nextFoo() methods", "tags": ["java", "java.util.scanner"], "link": "http://stackoverflow.com/questions/13102045/scanner-is-skipping-nextline-after-using-next-nextint-or-other-nextfoo/7056786#7056786", "post_type": "answer", "question_id": 13102045, "answer_id": 7056786}, {"body": "<p>It does that because <code>input.nextInt();</code> doesn't capture the newline. you could do like the others proposed by adding an <code>input.nextLine();</code> underneath.<br>\nAlternatively you can do it C# style and parse a nextLine to an integer like so:  </p>\n\n<pre><code>int number = Integer.parseInt(input.nextLine()); \n</code></pre>\n\n<p>Doing this works just as well, and it saves you a line of code.</p>\n", "title": "Scanner is skipping nextLine() after using next(), nextInt() or other nextFoo() methods", "tags": ["java", "java.util.scanner"], "link": "http://stackoverflow.com/questions/13102045/scanner-is-skipping-nextline-after-using-next-nextint-or-other-nextfoo/15046253#15046253", "post_type": "answer", "question_id": 13102045, "answer_id": 15046253}, {"body": "<p>There seem to be many questions about this issue with <code>java.util.Scanner</code>. I think a more readable/idiomatic solution would be to call <code>scanner.skip(\"[\\r\\n]+\")</code> to drop any newline characters after calling <code>nextInt()</code>.</p>\n", "title": "Scanner is skipping nextLine() after using next(), nextInt() or other nextFoo() methods", "tags": ["java", "java.util.scanner"], "link": "http://stackoverflow.com/questions/13102045/scanner-is-skipping-nextline-after-using-next-nextint-or-other-nextfoo/22593693#22593693", "post_type": "answer", "question_id": 13102045, "answer_id": 22593693}, {"body": "<p>Instead of <code>input.nextLine()</code> use <code>input.next()</code>, that should solve the problem.</p>\n\n<p>Modified code:</p>\n\n<pre><code>public static Scanner input = new Scanner(System.in);\n\npublic static void main(String[] args)\n{\n    System.out.print(\"Insert a number: \");\n    int number = input.nextInt();\n    System.out.print(\"Text1: \");\n    String text1 = input.next();\n    System.out.print(\"Text2: \");\n    String text2 = input.next();\n}\n</code></pre>\n", "title": "Scanner is skipping nextLine() after using next(), nextInt() or other nextFoo() methods", "tags": ["java", "java.util.scanner"], "link": "http://stackoverflow.com/questions/13102045/scanner-is-skipping-nextline-after-using-next-nextint-or-other-nextfoo/24907860#24907860", "post_type": "answer", "question_id": 13102045, "answer_id": 24907860}, {"body": "<p>iterate through the whole 65k chars and ask <code>Character.isJavaIdentifierStart(c)</code>.\nThe answer is : \"undertie\" decimal 8255</p>\n", "title": "Legal identifiers in Java", "tags": ["java", "identifier", "scjp"], "link": "http://stackoverflow.com/questions/11774099/legal-identifiers-in-java/11774137#11774137", "post_type": "answer", "question_id": 11774099, "answer_id": 11774137}, {"body": "<p>The best way is the clearest way: *</p>\n\n<pre><code>Thread.currentThread() == Looper.getMainLooper().getThread()\n</code></pre>\n\n<p>Or, if the runtime platform is API level 23 (Marshmallow 6.0) or higher:</p>\n\n<pre><code>Looper.getMainLooper().isCurrentThread()\n</code></pre>\n\n<p>See the <a href=\"http://developer.android.com/reference/android/os/Looper.html\">Looper API</a>.  Note that calling <code>Looper.getMainLooper()</code> involves synchonization (see the <a href=\"https://android.googlesource.com/platform/frameworks/base.git/+/android-6.0.0_r1/core/java/android/os/Looper.java#112\">source</a>).  You might want to avoid the overhead by storing the return value and reusing it.</p>\n\n<p>&nbsp;&nbsp;&nbsp;* <em>credit <a href=\"http://stackoverflow.com/a/3273018/2402790\">greg7gkb</a></em></p>\n", "title": "How to check if current thread is not main thread", "tags": ["java", "android", "multithreading"], "link": "http://stackoverflow.com/questions/11411022/how-to-check-if-current-thread-is-not-main-thread/34052602#34052602", "post_type": "answer", "question_id": 11411022, "answer_id": 34052602}, {"body": "<p>I would say don't use ARM and go on with Closeable. Use method like,</p>\n\n<pre><code>public void close(Closeable... closeables) {\n    for (Closeable closeable: closeables) {\n       try {\n           closeable.close();\n         } catch (IOException e) {\n           // you can't much for this\n          }\n    }\n\n}\n</code></pre>\n\n<p>Also you should consider calling close of <code>BufferedWriter</code> as it is not just delegating the close to <code>FileWriter</code> , but it does some cleanup like <code>flushBuffer</code>.</p>\n", "title": "Correct idiom for managing multiple chained resources in try-with-resources block?", "tags": ["java", "try-with-resources"], "link": "http://stackoverflow.com/questions/12552863/correct-idiom-for-managing-multiple-chained-resources-in-try-with-resources-bloc/12619799#12619799", "post_type": "answer", "question_id": 12552863, "answer_id": 12619799}, {"body": "<p>Here's my take on the alternatives:</p>\n\n<h2>1)</h2>\n\n<pre><code>try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {\n    bw.write(text);\n}\n</code></pre>\n\n<p>For me, the best thing coming to Java from traditional C++ 15 years ago was that you could trust your program. Even if things are in the muck and going wrong, which they often do, I want the rest of the code to be on best behaviour and smelling of roses. Indeed, the <code>BufferedWriter</code> might throw an exception here. Running out of memory wouldn't be unusual, for instance. For other decorators, do you know which of the <code>java.io</code> wrapper classes throw a checked exception from their constructors? I don't. Doesn't do code understandability much good if you rely upon that sort of obscure knowledge.</p>\n\n<p>Also there's the \"destruction\". If there is an error condition, then you probably don't want to be flushing rubbish to a file that needs deleting (code for that not shown). Although, of course, deleting the file is also another interesting operation to do as error handling.</p>\n\n<p>Generally you want <code>finally</code> blocks to be as short and reliable as possible. Adding flushes does not help this goal. For many releases some of the buffering classes in the JDK had a bug where an exception from <code>flush</code> within <code>close</code> caused <code>close</code> on the decorated object not be called. Whilst that has been fixed for some time, expect it from other implementations.</p>\n\n<h2>2)</h2>\n\n<pre><code>try (\n    FileWriter fw = new FileWriter(file);\n    BufferedWriter bw = new BufferedWriter(fw)\n) {\n    bw.write(text);\n}\n</code></pre>\n\n<p>We're still flushing in the implicit finally block (now with repeated <code>close</code> - this gets worse as you add more decorators), but the construction is safe and we have to implicit finally blocks so even a failed <code>flush</code> doesn't prevent resource release.</p>\n\n<h2>3)</h2>\n\n<pre><code>try (FileWriter fw = new FileWriter(file)) {\n    BufferedWriter bw = new BufferedWriter(fw);\n    bw.write(text);\n}\n</code></pre>\n\n<p>There's a bug here. Should be:</p>\n\n<pre><code>try (FileWriter fw = new FileWriter(file)) {\n    BufferedWriter bw = new BufferedWriter(fw);\n    bw.write(text);\n    bw.flush();\n}\n</code></pre>\n\n<p>Some poorly implemented decorators are in fact resource and will need to be closed reliably. Also some streams may need to be closed in a particular way (perhaps they are doing compression and need to write bits to finish off, and can't just flush everything.</p>\n\n<h2>Verdict</h2>\n\n<p>Although 3 is a technically superior solution, software development reasons make 2 the better choice. However, try-with-resource is still an inadequate fix and you should stick with the Execute Around idiom, which should have a clearer syntax with closures in Java SE 8.</p>\n", "title": "Correct idiom for managing multiple chained resources in try-with-resources block?", "tags": ["java", "try-with-resources"], "link": "http://stackoverflow.com/questions/12552863/correct-idiom-for-managing-multiple-chained-resources-in-try-with-resources-bloc/12665271#12665271", "post_type": "answer", "question_id": 12552863, "answer_id": 12665271}, {"body": "<p>My solution is to do a \"extract method\" refactoring, as following:</p>\n\n<pre><code>static AutoCloseable writeFileWriter(FileWriter fw, String txt) throws IOException{\n    final BufferedWriter bw  = new BufferedWriter(fw);\n    bw.write(txt);\n    return new AutoCloseable(){\n\n        @Override\n        public void close() throws IOException {\n            bw.flush();\n        }\n\n    };\n}\n</code></pre>\n\n<p><code>printToFile</code> can be written either</p>\n\n<pre><code>static void printToFile(String text, File file) {\n    try (FileWriter fw = new FileWriter(file)) {\n        AutoCloseable w = writeFileWriter(fw, text);\n        w.close();\n    } catch (Exception ex) {\n        // handle ex\n    }\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>static void printToFile(String text, File file) {\n    try (FileWriter fw = new FileWriter(file);\n        AutoCloseable w = writeFileWriter(fw, text)){\n\n    } catch (Exception ex) {\n        // handle ex\n    }\n}\n</code></pre>\n\n<p>For class lib designers, I will suggest them extend the <code>AutoClosable</code> interface with an additional method to suppress the close. In this case we can then manually control the close behavior.</p>\n\n<p>For language designers, the lesson is that adding a new feature could mean adding a lot others. In this Java case, obviously ARM feature will work better with a resource ownership transfer mechanism. </p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Originally the code above requires <code>@SuppressWarning</code> since the <code>BufferedWriter</code> inside the function requires <code>close()</code>.</p>\n\n<p>As suggested by a comment, if <code>flush()</code> to be called before close the writer, we need to do so before any <code>return</code> (implicit or explicit) statements inside the try block. There is currently no way to ensure the caller doing this I think, so this must be documented for <code>writeFileWriter</code>.</p>\n\n<p><strong>UPDATE AGAIN</strong></p>\n\n<p>The above update makes <code>@SuppressWarning</code> unnecessary since it require the function to return the resource to the caller, so itself does not necessary being closed. Unfortunately, this pull us back to the beginning of the situation: the warning is now moved back to the caller side.</p>\n\n<p>So to properly solve this, we need a customised <code>AutoClosable</code> that whenever it closes, the underline <code>BufferedWriter</code> shall be <code>flush()</code>ed. Actually, this shows us another way to bypass the warning, since the <code>BufferWriter</code> is never closed in either way.</p>\n", "title": "Correct idiom for managing multiple chained resources in try-with-resources block?", "tags": ["java", "try-with-resources"], "link": "http://stackoverflow.com/questions/12552863/correct-idiom-for-managing-multiple-chained-resources-in-try-with-resources-bloc/16229988#16229988", "post_type": "answer", "question_id": 12552863, "answer_id": 16229988}, {"body": "<p>The first style is the one <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/language/try-with-resources.html\">suggested by Oracle</a>. <code>BufferedWriter</code> doesn't throw checked exceptions, so if any exception is thrown, the program is not expected to recover from it, making resource recover mostly moot.</p>\n\n<p>Mostly because it could happen in a thread, with the thread dieing but the program still continuing -- say, there was a temporary memory outage that wasn't long enough to seriously impair the rest of the program. It's a rather corner case, though, and if it happens often enough to make resource leak a problem, the try-with-resources is the least of your problems.</p>\n", "title": "Correct idiom for managing multiple chained resources in try-with-resources block?", "tags": ["java", "try-with-resources"], "link": "http://stackoverflow.com/questions/12552863/correct-idiom-for-managing-multiple-chained-resources-in-try-with-resources-bloc/18496449#18496449", "post_type": "answer", "question_id": 12552863, "answer_id": 18496449}, {"body": "<p>To concur with earlier comments: simplest is <strong>(2)</strong> to use <code>Closeable</code> resources and declare them in order in the try-with-resources clause. If you only have AutoCloseable, you can wrap them in another (nested) class that just checks that <code>close</code> is only called once (Facade Pattern), e.g. by having <code>private bool isClosed;</code>. In practice even Oracle just <strong>(1)</strong> chains the constructors and doesn't correctly handle exceptions partway through the chain.</p>\n\n<p>Alternatively, you can manually create a chained resource, using a static factory method; this encapsulates the chain, and handle cleanup if it fails part-way:</p>\n\n<pre><code>static BufferedWriter createBufferedWriterFromFile(File file)\n  throws IOException {\n  // If constructor throws an exception, no resource acquired, so no release required.\n  FileWriter fileWriter = new FileWriter(file);\n  try {\n    return new BufferedWriter(fileWriter);  \n  } catch (IOException newBufferedWriterException) {\n    try {\n      fileWriter.close();\n    } catch (IOException closeException) {\n      // Exceptions in cleanup code are secondary to exceptions in primary code (body of try),\n      // as in try-with-resources.\n      newBufferedWriterException.addSuppressed(closeException);\n    }\n    throw newBufferedWriterException;\n  }\n}\n</code></pre>\n\n<p>The complexity comes from handling multiple exceptions; otherwise it's just \"close resources that you've acquired so far\". A common practice seems to be to first initialize the variable that holds the object that holds the resource to <code>null</code> (here <code>fileWriter</code>), and then include a null check in the cleanup, but that seems unnecessary: if the constructor fails, there's nothing to clean up, so we can just let that exception propagate, which simplifies the code a little.</p>\n\n<p>You could probably do this generically:</p>\n\n<pre><code>static &lt;T extends AutoCloseable, U extends AutoCloseable, V&gt;\n    T createChainedResource(V v) throws Exception {\n  // If constructor throws an exception, no resource acquired, so no release required.\n  U u = new U(v);\n  try {\n    return new T(u);  \n  } catch (Exception newTException) {\n    try {\n      u.close();\n    } catch (Exception closeException) {\n      // Exceptions in cleanup code are secondary to exceptions in primary code (body of try),\n      // as in try-with-resources.\n      newTException.addSuppressed(closeException);\n    }\n    throw newTException;\n  }\n}\n</code></pre>\n", "title": "Correct idiom for managing multiple chained resources in try-with-resources block?", "tags": ["java", "try-with-resources"], "link": "http://stackoverflow.com/questions/12552863/correct-idiom-for-managing-multiple-chained-resources-in-try-with-resources-bloc/32302353#32302353", "post_type": "answer", "question_id": 12552863, "answer_id": 32302353}, {"body": "<pre><code>FileUtils.cleanDirectory(directory); \n</code></pre>\n\n<p>There is this method available in the same file. This will also recursively deletes all sub-folders and files under them.</p>\n\n<p>Docs: <a href=\"http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html#cleanDirectory%28java.io.File%29\"><code>org.apache.commons.io.FileUtils.cleanDirectory</code></a></p>\n", "title": "Delete all files in directory (but not directory) - one liner solution", "tags": ["java", "file-io", "apache-commons-io"], "link": "http://stackoverflow.com/questions/13195797/delete-all-files-in-directory-but-not-directory-one-liner-solution/13195890#13195890", "post_type": "answer", "question_id": 13195797, "answer_id": 13195890}, {"body": "<p>Peter Lawrey's answer is great because it is simple and not depending on anything special, and it's the way you should do it. If you need something that removes subdirectories and their contents as well, use recursion:</p>\n\n<pre><code>void purgeDirectory(File dir) {\n    for (File file: dir.listFiles()) {\n        if (file.isDirectory()) purgeDirectory(file);\n        file.delete();\n    }\n}\n</code></pre>\n\n<p>To spare subdirectories and their contents (part of your question), modify as follows:</p>\n\n<pre><code>void purgeDirectoryButKeepSubDirectories(File dir) {\n    for (File file: dir.listFiles()) {\n        if (!file.isDirectory()) file.delete();\n    }\n}\n</code></pre>\n\n<p>Or, since you wanted a one-line solution:</p>\n\n<pre><code>    for (File file: dir.listFiles()) if (!file.isDirectory()) file.delete();\n</code></pre>\n\n<p>Using an external library for such a trivial task is not a good idea unless you need this library for something else anyway, in which case it is preferrable to use existing code. You appear to be using the Apache library anyway so use its <code>FileUtils.cleanDirectory()</code> method.</p>\n", "title": "Delete all files in directory (but not directory) - one liner solution", "tags": ["java", "file-io", "apache-commons-io"], "link": "http://stackoverflow.com/questions/13195797/delete-all-files-in-directory-but-not-directory-one-liner-solution/20043507#20043507", "post_type": "answer", "question_id": 13195797, "answer_id": 20043507}, {"body": "<p>A <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantLock.html\">ReentrantLock</a> is <em>unstructured</em>, unlike <code>synchronized</code> constructs -- i.e.  you don't need to use a block structure for locking and can even hold a lock across methods. An example:</p>\n\n<pre><code>private ReentrantLock lock;\n\npublic void foo() {\n  ...\n  lock.lock();\n  ...\n}\n\npublic void bar() {\n  ...\n  lock.unlock();\n  ...\n}\n</code></pre>\n\n<p>Such flow is impossible to represent via a single monitor in a <code>synchronized</code> construct.</p>\n\n<hr>\n\n<p>Aside from that, <code>ReentrantLock</code> supports <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html#tryLock()\">lock polling</a> and <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html#tryLock(long,%20java.util.concurrent.TimeUnit)\">interruptible lock waits that support time-out</a>. <code>ReentrantLock</code> also has support for <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html#ReentrantLock(boolean)\">configurable <em>fairness</em> policy</a>, allowing more flexible thread scheduling.</p>\n\n<blockquote>\n  <p>The constructor for this class accepts an optional <em>fairness</em> parameter. When set <code>true</code>, under contention, locks favor granting access to the longest-waiting thread. Otherwise this lock does not guarantee any particular access order. Programs using fair locks accessed by many threads may display lower overall throughput (i.e., are slower; often much slower) than those using the default setting, but have smaller variances in times to obtain locks and guarantee lack of starvation. Note however, that fairness of locks does not guarantee fairness of thread scheduling. Thus, one of many threads using a fair lock may obtain it multiple times in succession while other active threads are not progressing and not currently holding the lock. Also note that the untimed <code>tryLock</code> method does not honor the fairness setting. It will succeed if the lock is available even if other threads are waiting.</p>\n</blockquote>\n\n<hr>\n\n<p><code>ReentrantLock</code> <strong>may</strong> also be <a href=\"http://lycog.com/concurency/performance-reentrantlock-synchronized/\"><strong>more scalable</strong></a>, performing much better under higher contention. You can read more about this <a href=\"http://www.ibm.com/developerworks/java/library/j-jtp10264/\">here</a>.</p>\n\n<p>This claim has been contested, however; see the following comment:</p>\n\n<blockquote>\n  <p>In the reentrant lock test, a new lock is created each time, thus there is no exclusive locking and the resulting data is invalid. Also, the IBM link offers no source code for the underlying benchmark so its impossible to characterize whether the test was even conducted correctly. </p>\n</blockquote>\n\n<hr>\n\n<p>When should you use <code>ReentrantLock</code>s? According to that developerWorks article...</p>\n\n<blockquote>\n  <p>The answer is pretty simple -- use it when you actually need something it provides that <code>synchronized</code> doesn't, like timed lock waits, interruptible lock waits, non-block-structured locks, multiple condition variables, or lock polling. <code>ReentrantLock</code> also has scalability benefits, and you should use it if you actually have a situation that exhibits high contention, but remember that the vast majority of <code>synchronized</code> blocks hardly ever exhibit any contention, let alone high contention. I would advise developing with synchronization until synchronization has proven to be inadequate, rather than simply assuming \"the performance will be better\" if you use <code>ReentrantLock</code>. Remember, these are advanced tools for advanced users. (And truly advanced users tend to prefer the simplest tools they can find until they're convinced the simple tools are inadequate.) As always, make it right first, and then worry about whether or not you have to make it faster.</p>\n</blockquote>\n", "title": "Why use a ReentrantLock if one can use synchronized(this)?", "tags": ["java", "multithreading", "concurrency", "synchronize", "reentrantlock"], "link": "http://stackoverflow.com/questions/11821801/why-use-a-reentrantlock-if-one-can-use-synchronizedthis/11821900#11821900", "post_type": "answer", "question_id": 11821801, "answer_id": 11821900}, {"body": "<p>From oracle documentation page about <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantLock.html\" rel=\"nofollow\">ReentrantLock</a>:</p>\n\n<blockquote>\n  <p>A reentrant mutual exclusion Lock with the same basic behaviour and semantics as the implicit monitor lock accessed using synchronized methods and statements, but with extended capabilities.</p>\n</blockquote>\n\n<ol>\n<li><p>A <code>ReentrantLock</code> is owned by the thread last successfully locking, but not yet unlocking it.  A thread invoking lock will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock.</p></li>\n<li><p>The constructor for this class accepts an optional <code>fairness</code> parameter. When set true, under contention, <code>locks favor granting access to the longest-waiting thread</code>. Otherwise this lock does not guarantee any particular access order.</p></li>\n</ol>\n\n<p><code>ReentrantLock</code> key features as per this <a href=\"http://javarevisited.blogspot.com/2013/03/reentrantlock-example-in-java-synchronized-difference-vs-lock.html#ixzz3uIbhr77e\" rel=\"nofollow\">article</a></p>\n\n<ol>\n<li>Ability to lock interruptibly.</li>\n<li>Ability to timeout while waiting for lock.</li>\n<li>Power to create fair lock.</li>\n<li>API to get list of waiting thread for lock.</li>\n<li>Flexibility to try for lock without blocking.</li>\n</ol>\n\n<p>You can use  <code>ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock</code> to further acquire control on granular locking on read and write operations.</p>\n\n<p>Have a look at this <a href=\"http://winterbe.com/posts/2015/04/30/java8-concurrency-tutorial-synchronized-locks-examples/\" rel=\"nofollow\">article</a> by Benjamen on usage of different type of <code>ReentrantLocks</code> </p>\n", "title": "Why use a ReentrantLock if one can use synchronized(this)?", "tags": ["java", "multithreading", "concurrency", "synchronize", "reentrantlock"], "link": "http://stackoverflow.com/questions/11821801/why-use-a-reentrantlock-if-one-can-use-synchronizedthis/36827191#36827191", "post_type": "answer", "question_id": 11821801, "answer_id": 36827191}, {"body": "<ol>\n<li><p><code>java.util.logging</code> was introduced in Java 1.4. There were uses for logging before that, that's why many other logging APIs exist. Those APIs where used heavily before Java 1.4 and thus had a great marketshare that didn't just drop to 0 when 1.4 was release.</p></li>\n<li><p>JUL didn't start out all that great, many of the things you mentioned where a lot worse in 1.4 and only got better in 1.5 (and I guess in 6 as well, but I'm not too sure).</p></li>\n<li><p>JUL isn't well suited for multiple applications with different configurations in the same JVM (think multiple web applications that should not interact). Tomcat needs to jump through some hoops to get that working (effectively re-implementing JUL if I understood that correctly).</p></li>\n<li><p>You can't always influence what logging framework your libraries use. Therefore using SLF4J (which is actually just a very thin API layer above other libraries) helps keeping a somewhat consistent picture of the entire logging world (so you can decide the underlying logging framework while still having library logging in the same system).</p></li>\n<li><p>Libraries can't easily change. If a previous version of a library used to use logging-library-X it can't easily switch to logging-library-Y (for example JUL), even if the latter is clearly superious: any user of that library would need to learn the new logging framework and (at least) reconfigure their logging. That's a big no-no, especially when it brings no apparent gain to most people.</p></li>\n</ol>\n\n<p>Having said all that I think JUL is <em>at least</em> a valid alternative to other logging frameworks these days.</p>\n", "title": "Why not use java.util.logging?", "tags": ["java", "logging", "slf4j", "logback"], "link": "http://stackoverflow.com/questions/11359187/why-not-use-java-util-logging/11359320#11359320", "post_type": "answer", "question_id": 11359187, "answer_id": 11359320}, {"body": "<p><strong>Actual Answer:</strong></p>\n\n<p>The default deserializer for enums uses <code>.name()</code> to deserialize, so it's not using the <code>@JsonValue</code>.  So as @OldCurmudgeon pointed out, you'd need to pass in <code>{\"event\": \"FORGOT_PASSWORD\"}</code> to match the <code>.name()</code> value.</p>\n\n<p>An other option (assuming you want the write and read json values to be the same)...</p>\n\n<p><strong>More Info:</strong></p>\n\n<p>There is (yet) another way to manage the serialization and deserialization process with Jackson.  You can specify these annotations to use your own custom serializer and deserializer:</p>\n\n<pre><code>@JsonSerialize(using = MySerializer.class)\n@JsonDeserialize(using = MyDeserializer.class)\npublic final class MyClass {\n    ...\n}\n</code></pre>\n\n<p>Then you have to write <code>MySerializer</code> and <code>MyDeserializer</code> which look like this:</p>\n\n<p><strong>MySerializer</strong></p>\n\n<pre><code>public final class MySerializer extends JsonSerializer&lt;MyClass&gt;\n{\n    @Override\n    public void serialize(final MyClass yourClassHere, final JsonGenerator gen, final SerializerProvider serializer) throws IOException, JsonProcessingException\n    {\n        // here you'd write data to the stream with gen.write...() methods\n    }\n\n}\n</code></pre>\n\n<p><strong>MyDeserializer</strong></p>\n\n<pre><code>public final class MyDeserializer extends org.codehaus.jackson.map.JsonDeserializer&lt;MyClass&gt;\n{\n    @Override\n    public MyClass deserialize(final JsonParser parser, final DeserializationContext context) throws IOException, JsonProcessingException\n    {\n        // then you'd do something like parser.getInt() or whatever to pull data off the parser\n        return null;\n    }\n\n}\n</code></pre>\n\n<p>Last little bit, particularly for doing this to an enum <code>JsonEnum</code> that serializes with the method <code>getYourValue()</code>, your serializer and deserializer might look like this:</p>\n\n<pre><code>public void serialize(final JsonEnum enumValue, final JsonGenerator gen, final SerializerProvider serializer) throws IOException, JsonProcessingException\n{\n    gen.writeString(enumValue.getYourValue());\n}\n\npublic JsonEnum deserialize(final JsonParser parser, final DeserializationContext context) throws IOException, JsonProcessingException\n{\n    final String jsonValue = parser.getText();\n    for (final JsonEnum enumValue : JsonEnum.values())\n    {\n        if (enumValue.getYourValue().equals(jsonValue))\n        {\n            return enumValue;\n        }\n    }\n    return null;\n}\n</code></pre>\n", "title": "Jackson enum Serializing and DeSerializer", "tags": ["java", "enums", "jackson", "jsonserializer"], "link": "http://stackoverflow.com/questions/12468764/jackson-enum-serializing-and-deserializer/13368831#13368831", "post_type": "answer", "question_id": 12468764, "answer_id": 13368831}, {"body": "<p>I've found a very nice and concise solution, especially useful when you cannot modify enum classes as it was in my case. Then you should provide a custom ObjectMapper with a certain feature enabled. Those features are available since Jackson 1.6. So you only need to write <code>toString()</code> method in your enum.</p>\n\n<pre><code>public class CustomObjectMapper extends ObjectMapper {\n    @PostConstruct\n    public void customConfiguration() {\n        // Uses Enum.toString() for serialization of an Enum\n        this.enable(WRITE_ENUMS_USING_TO_STRING);\n        // Uses Enum.toString() for deserialization of an Enum\n        this.enable(READ_ENUMS_USING_TO_STRING);\n    }\n}\n</code></pre>\n\n<p>There are more enum-related features available, see here:\n<a href=\"http://wiki.fasterxml.com/JacksonFeaturesSerialization\">http://wiki.fasterxml.com/JacksonFeaturesSerialization</a>\n<a href=\"http://wiki.fasterxml.com/JacksonFeaturesDeserialization\">http://wiki.fasterxml.com/JacksonFeaturesDeserialization</a></p>\n", "title": "Jackson enum Serializing and DeSerializer", "tags": ["java", "enums", "jackson", "jsonserializer"], "link": "http://stackoverflow.com/questions/12468764/jackson-enum-serializing-and-deserializer/24537575#24537575", "post_type": "answer", "question_id": 12468764, "answer_id": 24537575}, {"body": "<p>You can't see this method in javadoc because it's added by the compiler.</p>\n\n<p>Documented in three places : </p>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">Enum Types</a>, <a href=\"http://docs.oracle.com/javase/tutorial/\">The Java Tutorials</a></li>\n</ul>\n\n<blockquote>\n  <p>The compiler automatically adds some special methods when it creates\n  an enum. For example, they have a static values method that returns an\n  array containing all of the values of the enum in the order they are\n  declared. This method is commonly used in combination with the\n  for-each construct to iterate over the values of an enum type.</p>\n</blockquote>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html#valueOf(java.lang.Class,%20java.lang.String)\"><code>Enum.valueOf</code></a> class<br />(The special implicit <code>values</code> method is mentioned in description of <code>valueOf</code> method)</li>\n</ul>\n\n<blockquote>\n  <p>All the constants of an enum type can be obtained by calling the implicit public static T[] values() method of that type.</p>\n</blockquote>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.9\">Enum Types, Section 8.9</a>, <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/index.html\">Java Language Specification</a></li>\n</ul>\n\n<p>The <code>values</code> function simply list all values of the enumeration.</p>\n", "title": "Where is the documentation for the values() method of Enum?", "tags": ["java", "enums"], "link": "http://stackoverflow.com/questions/13659217/where-is-the-documentation-for-the-values-method-of-enum/13659231#13659231", "post_type": "answer", "question_id": 13659217, "answer_id": 13659231}, {"body": "<p>A Java <code>Date</code> is a container for the number of milliseconds since January 1, 1970, 00:00:00 GMT.</p>\n\n<p>When you use something like <code>System.out.println(date)</code>, Java uses <code>Date.toString()</code> to print the contents.</p>\n\n<p>The only way to change it is to override <code>Date</code> and provide your own implementation of <code>Date.toString()</code>.  Now before you fire up your IDE and try this, I wouldn't; it will only complicate matters. You are better off formatting the date to the format you want to use (or display).</p>\n\n<p>What you can do, is format the date.</p>\n\n<pre><code>Calendar cal = Calendar.getInstance();\ncal.add(Calendar.DATE, 1);\nSimpleDateFormat format1 = new SimpleDateFormat(\"yyyy-MM-dd\");\nSystem.out.println(cal.getTime());\n// Output \"Wed Sep 26 14:23:28 EST 2012\"\n\nString formatted = format1.format(cal.getTime());\nSystem.out.println(formatted);\n// Output \"2012-09-26\"\n\nSystem.out.println(format1.parse(formatted));\n// Output \"Wed Sep 26 00:00:00 EST 2012\"\n</code></pre>\n\n<p>These are actually the same date, represented differently.</p>\n", "title": "Calendar date to yyyy-MM-dd format in java", "tags": ["java", "date", "calendar", "converter"], "link": "http://stackoverflow.com/questions/12575990/calendar-date-to-yyyy-mm-dd-format-in-java/12576219#12576219", "post_type": "answer", "question_id": 12575990, "answer_id": 12576219}]}