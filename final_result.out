
(python34) C:\Users\Peter\Documents\GitHub\4045-NLP>SETLOCAL

(python34) C:\Users\Peter\Documents\GitHub\4045-NLP>CALL stanford-ner\init.bat 

(python34) C:\Users\Peter\Documents\GitHub\4045-NLP>set CLASSPATH=C:\Users\Peter\Documents\GitHub\4045-NLP\stanford-ner\stanford-ner.jar;C:\Users\Peter\Documents\GitHub\4045-NLP\stanford-ner\lib\joda-time.jar;C:\Users\Peter\Documents\GitHub\4045-NLP\stanford-ner\lib\jollyday-0.4.7.jar;C:\Users\Peter\Documents\GitHub\4045-NLP\stanford-ner\lib\slf4j-api.jar;C:\Users\Peter\Documents\GitHub\4045-NLP\stanford-ner\lib\slf4j-simple.jar;C:\Users\Peter\Documents\GitHub\4045-NLP\stanford-ner\lib\stanford-ner-resources.jar; 

(python34) C:\Users\Peter\Documents\GitHub\4045-NLP>java edu.stanford.nlp.ie.crf.CRFClassifier -loadClassifier api_mention.ser.gz -testFile test.tsv 
CRFClassifier invoked on Mon Oct 17 20:26:35 SGT 2016 with arguments:
   -loadClassifier api_mention.ser.gz -testFile test.tsv
testFile=test.tsv
loadClassifier=api_mention.ser.gz
Loading classifier from api_mention.ser.gz ... done [1.0 sec].
Question	O	O
-	O	O
32859038	O	O
,	O	O
answer	O	O
-	O	O
32918035	O	O
Eran	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
usually	O	O
the	O	O
best	O	O
approach	O	O
for	O	O
random	O	O
-	O	O
access	O	O
lists	O	O
.	O	O
If	O	O
your	O	O
List	B-api_mention	B-api_mention
isn	O	O
'	O	O
t	O	O
random	O	O
access	O	O
,	O	O
or	O	O
if	O	O
you	O	O
have	O	O
a	O	O
Stream	B-api_mention	B-api_mention
instead	O	O
of	O	O
a	O	O
List	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
use	O	O
forEachOrdered	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
safe	O	O
,	O	O
if	O	O
the	O	O
stream	O	O
is	O	O
parallel	O	O
,	O	O
even	O	O
though	O	O
the	O	O
destination	O	O
map	O	O
is	O	O
thread	O	O
-	O	O
unsafe	O	O
and	O	O
is	O	O
operated	O	O
upon	O	O
as	O	O
a	O	O
side	O	O
effect	O	O
.	O	O
The	O	O
forEachOrdered	O	O
guarantees	O	O
that	O	O
items	O	O
are	O	O
processed	O	O
one	O	O
-	O	O
at	O	O
-	O	O
a	O	O
-	O	O
time	O	O
,	O	O
in	O	O
order	O	O
.	O	O
For	O	O
this	O	O
reason	O	O
it	O	O
'	O	O
s	O	O
unlikely	O	O
that	O	O
any	O	O
speedup	O	O
will	O	O
result	O	O
from	O	O
running	O	O
in	O	O
parallel	O	O
.	O	O
(	O	O
There	O	O
might	O	O
be	O	O
some	O	O
speedup	O	O
if	O	O
there	O	O
are	O	O
expensive	O	O
operations	O	O
in	O	O
the	O	O
pipeline	O	O
before	O	O
the	O	O
forEachOrdered	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
8579702	O	O
If	O	O
you	O	O
just	O	O
invoke	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
directly	O	O
,	O	O
it	O	O
'	O	O
s	O	O
executed	O	O
on	O	O
the	O	O
calling	O	O
thread	O	O
,	O	O
just	O	O
like	O	O
any	O	O
other	O	O
method	O	O
call	O	O
.	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
required	O	O
to	O	O
actually	O	O
create	O	O
a	O	O
new	O	O
thread	O	O
so	O	O
that	O	O
the	O	O
runnable	O	O
'	O	O
s	O	O
run	O	O
method	O	O
is	O	O
executed	O	O
in	O	O
parallel	O	O
.	O	O
Question	O	O
-	O	O
19418427	O	O
,	O	O
answer	O	O
-	O	O
19418553	O	O
If	O	O
you	O	O
take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
methods	O	O
#	O	O
pre	O	O
and	O	O
its	O	O
decompiled	O	O
with	O	O
javap	O	O
-	O	O
c	O	O
ClassWithTheseMethods	O	O
versions	O	O
you	O	O
will	O	O
see	O	O
#	O	O
pre	O	O
and	O	O
#	O	O
pre	O	O
So	O	O
if	O	O
Strings	O	O
are	O	O
not	O	O
final	O	O
compiler	O	O
will	O	O
have	O	O
to	O	O
use	O	O
StringBuilder	B-api_mention	B-api_mention
to	O	O
concatenate	O	O
str1	O	O
and	O	O
str2	O	O
so	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
str1	O	O
+	O	O
str2	O	O
;	O	O
will	O	O
be	O	O
compiled	O	O
to	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
means	O	O
that	O	O
concat	O	O
will	O	O
be	O	O
created	O	O
at	O	O
runtime	O	O
so	O	O
will	O	O
not	O	O
come	O	O
from	O	O
String	B-api_mention	B-api_mention
pool	O	O
.	O	O
Also	O	O
if	O	O
Strings	O	O
are	O	O
final	O	O
then	O	O
compiler	O	O
can	O	O
assume	O	O
that	O	O
they	O	O
will	O	O
never	O	O
change	O	O
so	O	O
instead	O	O
of	O	O
using	O	O
StringBuilder	B-api_mention	B-api_mention
it	O	O
can	O	O
safely	O	O
concatenate	O	O
its	O	O
values	O	O
so	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
str1	O	O
+	O	O
str2	O	O
;	O	O
can	O	O
be	O	O
changed	O	O
to	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
StringLiteral	O	O
+	O	O
StringLiteral	O	O
;	O	O
and	O	O
concatenated	O	O
into	O	O
String	B-api_mention	B-api_mention
concat	O	O
=	O	O
StringLiteral	O	O
;	O	O
which	O	O
means	O	O
that	O	O
concate	O	O
will	O	O
become	O	O
sting	O	O
literal	O	O
which	O	O
will	O	O
be	O	O
interned	O	O
in	O	O
string	O	O
pool	O	O
and	O	O
then	O	O
compared	O	O
with	O	O
same	O	O
string	O	O
literal	O	O
from	O	O
that	O	O
pool	O	O
in	O	O
if	O	O
statement	O	O
.	O	O
Question	O	O
-	O	O
28276423	O	O
,	O	O
answer	O	O
-	O	O
28276498	O	O
Assuming	O	O
all	O	O
the	O	O
streams	O	O
get	O	O
created	O	O
okay	O	O
,	O	O
yes	O	O
,	O	O
just	O	O
closing	O	O
bw	O	O
is	O	O
fine	O	O
with	O	O
those	O	O
stream	O	O
implementations	O	O
;	O	O
but	O	O
that	O	O
'	O	O
s	O	O
a	O	O
big	O	O
assumption	O	O
.	O	O
I	O	O
'	O	O
d	O	O
use	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
(	O	O
tutorial	O	O
)	O	O
so	O	O
that	O	O
any	O	O
issues	O	O
constructing	O	O
the	O	O
subsequent	O	O
streams	O	O
that	O	O
throw	O	O
exceptions	O	O
don	O	O
'	O	O
t	O	O
leave	O	O
the	O	O
previous	O	O
streams	O	O
hanging	O	O
,	O	O
and	O	O
so	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
rely	O	O
on	O	O
the	O	O
stream	O	O
implementation	O	O
having	O	O
the	O	O
call	O	O
to	O	O
close	O	O
the	O	O
underlying	O	O
stream	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
you	O	O
no	O	O
longer	O	O
call	O	O
close	O	B-api_mention
at	O	O
all	O	O
.	O	O
Important	O	O
note	O	O
:	O	O
To	O	O
have	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
close	O	O
them	O	O
,	O	O
you	O	O
must	O	O
assign	O	O
the	O	O
streams	O	O
to	O	O
variables	O	O
as	O	O
you	O	O
open	O	O
them	O	O
,	O	O
you	O	O
cannot	O	O
use	O	O
nesting	O	O
.	O	O
If	O	O
you	O	O
use	O	O
nesting	O	O
,	O	O
an	O	O
exception	O	O
during	O	O
construction	O	O
of	O	O
one	O	O
of	O	O
the	O	O
later	O	O
streams	O	O
(	O	O
say	O	O
,	O	O
GZIPOutputStream	O	O
)	O	O
will	O	O
leave	O	O
any	O	O
stream	O	O
constructed	O	O
by	O	O
the	O	O
nested	O	O
calls	O	O
inside	O	O
it	O	O
open	O	O
.	O	O
From	O	O
JLS	O	O
§	O	O
14	O	O
.	O	O
20	O	O
.	O	O
3	O	O
:	O	O
#	O	O
blockquote	O	O
Note	O	O
the	O	O
word	O	O
"	O	O
variables	O	O
"	O	O
(	O	O
my	O	O
emphasis	O	O
)	O	O
.	O	O
E	O	O
.	O	O
g	O	O
.	O	O
,	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
.	O	O
.	O	O
.	O	O
because	O	O
an	O	O
exception	O	O
from	O	O
the	O	O
GZIPOutputStream	O	B-api_mention
(	O	I-api_mention
OutputStream	O	I-api_mention
)	O	I-api_mention
constructor	O	O
(	O	O
which	O	O
says	O	O
it	O	O
may	O	O
throw	O	O
IOException	O	B-api_mention
,	O	O
and	O	O
writes	O	O
a	O	O
header	O	O
to	O	O
the	O	O
underlying	O	O
stream	O	O
)	O	O
would	O	O
leave	O	O
the	O	O
FileOutputStream	B-api_mention	B-api_mention
open	O	O
.	O	O
Since	O	O
some	O	O
resources	O	O
have	O	O
constructors	O	O
that	O	O
may	O	O
throw	O	O
and	O	O
others	O	O
don	O	O
'	O	O
t	O	O
,	O	O
it	O	O
'	O	O
s	O	O
a	O	O
good	O	O
habit	O	O
to	O	O
just	O	O
list	O	O
them	O	O
separately	O	O
.	O	O
We	O	O
can	O	O
double	O	O
-	O	O
check	O	O
our	O	O
interpretation	O	O
of	O	O
that	O	O
JLS	O	O
section	O	O
with	O	O
this	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
.	O	O
.	O	O
.	O	O
which	O	O
has	O	O
the	O	O
output	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
there	O	O
are	O	O
no	O	O
calls	O	O
to	O	O
close	O	O
there	O	O
.	O	O
If	O	O
we	O	O
fix	O	O
main	O	O
:	O	O
#	O	O
pre	O	O
then	O	O
we	O	O
get	O	O
the	O	O
appropriate	O	O
close	O	O
calls	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
Yes	O	O
,	O	O
two	O	O
calls	O	O
to	O	O
InnerMost	O	O
#	O	O
close	O	O
is	O	O
correct	O	O
;	O	O
one	O	O
is	O	O
from	O	O
Middle	O	O
,	O	O
the	O	O
other	O	O
from	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
20593147	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
you	O	O
could	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
Some	O	O
notes	O	O
:	O	O
The	O	O
stream	O	O
returned	O	O
by	O	O
Files	B-api_mention	O
.	I-api_mention	O
lines	I-api_mention	O
(	O	O
unlike	O	O
most	O	O
streams	O	O
)	O	O
needs	O	O
to	O	O
be	O	O
closed	O	O
.	O	O
For	O	O
the	O	O
reasons	O	O
mentioned	O	O
here	O	O
I	O	O
avoid	O	O
using	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
strange	O	O
code	O	O
(	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
lines	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
iterator	I-api_mention	O
casts	O	O
a	O	O
Stream	B-api_mention	B-api_mention
to	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
24649842	O	O
,	O	O
answer	O	O
-	O	O
24649939	O	O
Try	O	O
adding	O	O
a	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sleep	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
call	O	O
within	O	O
your	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
.	O	O
.	O	O
Basically	O	O
it	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
scheduling	O	O
something	O	O
based	O	O
on	O	O
when	O	O
the	O	O
previous	O	O
execution	O	O
ends	O	O
and	O	O
when	O	O
it	O	O
(	O	O
logically	O	O
)	O	O
starts	O	O
.	O	O
For	O	O
example	O	O
,	O	O
suppose	O	O
I	O	O
schedule	O	O
an	O	O
alarm	O	O
to	O	O
go	O	O
off	O	O
with	O	O
a	O	O
fixed	O	O
rate	O	O
of	O	O
once	O	O
an	O	O
hour	O	O
,	O	O
and	O	O
every	O	O
time	O	O
it	O	O
goes	O	O
off	O	O
,	O	O
I	O	O
have	O	O
a	O	O
cup	O	O
of	O	O
coffee	O	O
,	O	O
which	O	O
takes	O	O
10	O	O
minutes	O	O
.	O	O
Suppose	O	O
that	O	O
starts	O	O
at	O	O
midnight	O	O
,	O	O
I	O	O
'	O	O
d	O	O
have	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
I	O	O
schedule	O	O
with	O	O
a	O	O
fixed	O	O
delay	O	O
of	O	O
one	O	O
hour	O	O
,	O	O
I	O	O
'	O	O
d	O	O
have	O	O
:	O	O
#	O	O
pre	O	O
Which	O	O
one	O	O
you	O	O
want	O	O
depends	O	O
on	O	O
your	O	O
task	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
I	O	O
made	O	O
a	O	O
class	O	O
called	O	O
QuickRandom	B-api_mention	B-api_mention
,	O	O
and	O	O
its	O	O
job	O	O
is	O	O
to	O	O
produce	O	O
random	O	O
numbers	O	O
quickly	O	O
.	O	O
It	O	O
'	O	O
s	O	O
really	O	O
simple	O	O
:	O	O
just	O	O
take	O	O
the	O	O
old	O	O
value	O	O
,	O	O
multiply	O	O
by	O	O
a	O	O
double	O	O
,	O	O
and	O	O
take	O	O
the	O	O
decimal	O	O
part	O	O
.	O	O
Here	O	O
is	O	O
my	O	O
QuickRandom	B-api_mention	B-api_mention
class	O	O
in	O	O
its	O	O
entirety	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
is	O	O
the	O	O
code	O	O
I	O	O
wrote	O	O
to	O	O
test	O	O
it	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
a	O	O
very	O	O
simple	O	O
algorithm	O	O
that	O	O
simply	O	O
multiplies	O	O
the	O	O
previous	O	O
double	O	O
by	O	O
a	O	O
"	O	O
magic	O	O
number	O	O
"	O	O
double	O	O
.	O	O
I	O	O
threw	O	O
it	O	O
together	O	O
pretty	O	O
quickly	O	O
,	O	O
so	O	O
I	O	O
could	O	O
probably	O	O
make	O	O
it	O	O
better	O	O
,	O	O
but	O	O
strangely	O	O
,	O	O
it	O	O
seems	O	O
to	O	O
be	O	O
working	O	O
fine	O	O
.	O	O
This	O	O
is	O	O
sample	O	O
output	O	O
of	O	O
the	O	O
commented	O	O
-	O	O
out	O	O
lines	O	O
in	O	O
the	O	O
main	O	O
method	O	O
:	O	O
#	O	O
pre	O	O
Hm	O	O
.	O	O
Pretty	O	O
random	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
that	O	O
would	O	O
work	O	O
for	O	O
a	O	O
random	O	O
number	O	O
generator	O	O
in	O	O
a	O	O
game	O	O
.	O	O
Here	O	O
is	O	O
sample	O	O
output	O	O
of	O	O
the	O	O
non	O	O
-	O	O
commented	O	O
out	O	O
part	O	O
:	O	O
#	O	O
pre	O	O
Wow	O	O
!	O	O
It	O	O
performs	O	O
almost	O	O
4	O	O
times	O	O
faster	O	O
than	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
.	O	O
I	O	O
remember	O	O
reading	O	O
somewhere	O	O
that	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
used	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
tons	O	O
of	O	O
crazy	O	O
modulus	O	O
and	O	O
division	O	O
stuff	O	O
.	O	O
Is	O	O
that	O	O
really	O	O
necessary	O	O
?	O	O
My	O	O
algorithm	O	O
performs	O	O
a	O	O
lot	O	O
faster	O	O
and	O	O
it	O	O
seems	O	O
pretty	O	O
random	O	O
.	O	O
I	O	O
have	O	O
two	O	O
questions	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
my	O	O
algorithm	O	O
"	O	O
good	O	O
enough	O	O
"	O	O
(	O	O
for	O	O
,	O	O
say	O	O
,	O	O
a	O	O
game	O	O
,	O	O
where	O	O
really	O	O
random	O	O
numbers	O	O
aren	O	O
'	O	O
t	O	O
too	O	O
important	O	O
)	O	O
?	O	O
#	O	O
li	O	O
Why	O	O
does	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
do	O	O
so	O	O
much	O	O
when	O	O
it	O	O
seems	O	O
just	O	O
simple	O	O
multiplication	O	O
and	O	O
cutting	O	O
out	O	O
the	O	O
decimal	O	O
will	O	O
suffice	O	O
?	O	O
Question	O	O
-	O	O
19431234	O	O
,	O	O
answer	O	O
-	O	O
23885950	O	O
Short	O	O
answer	O	O
:	O	O
#	O	O
pre	O	O
Explanation	O	O
:	O	O
(	O	O
based	O	O
on	O	O
this	O	O
question	O	O
about	O	O
LocalDate	B-api_mention	B-api_mention
)	O	O
Despite	O	O
its	O	O
name	O	O
,	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
represents	O	O
an	O	O
instant	O	O
on	O	O
the	O	O
time	O	O
-	O	O
line	O	O
,	O	O
not	O	O
a	O	O
"	O	O
date	O	O
"	O	O
.	O	O
The	O	O
actual	O	O
data	O	O
stored	O	O
within	O	O
the	O	O
object	O	O
is	O	O
a	O	O
long	O	O
count	O	O
of	O	O
milliseconds	O	O
since	O	O
1970	O	O
-	O	O
01	O	O
-	O	O
01T00	O	O
:	O	O
00Z	O	O
(	O	O
midnight	O	O
at	O	O
the	O	O
start	O	O
of	O	O
1970	O	O
GMT	O	O
/	O	O
UTC	O	O
)	O	O
.	O	O
The	O	O
equivalent	O	O
class	O	O
to	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
in	O	O
JSR	O	O
-	O	O
310	O	O
is	O	O
Instant	B-api_mention	O
,	O	O
thus	O	O
there	O	O
are	O	O
convenient	O	O
methods	O	O
to	O	O
provide	O	O
the	O	O
conversion	O	O
to	O	O
and	O	O
fro	O	O
:	O	O
#	O	O
pre	O	O
A	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
instance	O	O
has	O	O
no	O	O
concept	O	O
of	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
This	O	O
might	O	O
seem	O	O
strange	O	O
if	O	O
you	O	O
call	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
,	O	O
because	O	O
the	O	O
toString	B-api_mention	B-api_mention
is	O	O
relative	O	O
to	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
However	O	O
that	O	O
method	O	O
actually	O	O
uses	O	O
Java	O	O
'	O	O
s	O	O
default	O	O
time	O	O
-	O	O
zone	O	O
on	O	O
the	O	O
fly	O	O
to	O	O
provide	O	O
the	O	O
string	O	O
.	O	O
The	O	O
time	O	O
-	O	O
zone	O	O
is	O	O
not	O	O
part	O	O
of	O	O
the	O	O
actual	O	O
state	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	O	O
An	O	O
Instant	O	O
also	O	O
does	O	O
not	O	O
contain	O	O
any	O	O
information	O	O
about	O	O
the	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
Thus	O	O
,	O	O
to	O	O
convert	O	O
from	O	O
an	O	O
Instant	O	O
to	O	O
a	O	O
local	O	O
date	O	O
-	O	O
time	O	O
it	O	O
is	O	O
necessary	O	O
to	O	O
specify	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
.	O	O
This	O	O
might	O	O
be	O	O
the	O	O
default	O	O
zone	O	O
-	O	O
ZoneId	B-api_mention	O
.	I-api_mention	B-api_mention
systemDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
or	O	O
it	O	O
might	O	O
be	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
that	O	O
your	O	O
application	O	O
controls	O	O
,	O	O
such	O	O
as	O	O
a	O	O
time	O	O
-	O	O
zone	O	O
from	O	O
user	O	O
preferences	O	O
.	O	O
LocalDateTime	B-api_mention	B-api_mention
has	O	O
a	O	O
convenient	O	O
factory	O	O
method	O	O
that	O	O
takes	O	O
both	O	O
the	O	O
instant	O	O
and	O	O
time	O	O
-	O	O
zone	O	O
:	O	O
#	O	O
pre	O	O
In	O	O
reverse	O	O
,	O	O
the	O	O
LocalDateTime	B-api_mention	B-api_mention
the	O	O
time	O	O
-	O	O
zone	O	O
is	O	O
specified	O	O
by	O	O
calling	O	O
the	O	O
atZone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
ZonedDateTime	B-api_mention	B-api_mention
can	O	O
then	O	O
be	O	O
converted	O	O
directly	O	O
to	O	O
an	O	O
Instant	B-api_mention	O
:	O	O
#	O	O
pre	O	O
Note	O	O
that	O	O
the	O	O
conversion	O	O
from	O	O
LocalDateTime	B-api_mention	B-api_mention
to	O	O
ZonedDateTime	B-api_mention	O
has	O	O
the	O	O
potential	O	O
to	O	O
introduce	O	O
unexpected	O	O
behaviour	O	O
.	O	O
This	O	O
is	O	O
because	O	O
not	O	O
every	O	O
local	O	O
date	O	O
-	O	O
time	O	O
exists	O	O
due	O	O
to	O	O
Daylight	O	O
Saving	O	O
Time	O	O
.	O	O
In	O	O
autumn	O	O
/	O	O
fall	O	O
,	O	O
there	O	O
is	O	O
an	O	O
overlap	O	O
in	O	O
the	O	O
local	O	O
time	O	O
-	O	O
line	O	O
where	O	O
the	O	O
same	O	O
local	O	O
date	O	O
-	O	O
time	O	O
occurs	O	O
twice	O	O
.	O	O
In	O	O
spring	O	O
,	O	O
there	O	O
is	O	O
a	O	O
gap	O	O
,	O	O
where	O	O
an	O	O
hour	O	O
disappears	O	O
.	O	O
See	O	O
the	O	O
Javadoc	O	O
of	O	O
atZone	B-api_mention	O
(	I-api_mention	O
ZoneId	I-api_mention	O
)	I-api_mention	O
for	O	O
more	O	O
the	O	O
definition	O	O
of	O	O
what	O	O
the	O	O
conversion	O	O
will	O	O
do	O	O
.	O	O
Summary	O	O
,	O	O
if	O	O
you	O	O
round	O	O
-	O	O
trip	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
to	O	O
a	O	O
LocalDateTime	B-api_mention	B-api_mention
and	O	O
back	O	O
to	O	O
a	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
you	O	O
may	O	O
end	O	O
up	O	O
with	O	O
a	O	O
different	O	O
instant	O	O
due	O	O
to	O	O
Daylight	O	O
Saving	O	O
Time	O	O
.	O	O
Question	O	O
-	O	O
21524642	O	O
,	O	O
answer	O	O
-	O	O
21524694	O	O
Or	O	O
.	O	O
.	O	O
Pattern	B-api_mention	O
#	I-api_mention	O
quote	I-api_mention	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
value	O	O
_	O	O
split	O	O
=	O	O
rat	O	O
_	O	O
values	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
happening	O	O
because	O	O
String	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
accepts	O	O
a	O	O
regex	O	O
:	O	O
|	O	O
has	O	O
a	O	O
special	O	O
meaning	O	O
in	O	O
regex	O	O
.	O	O
quote	B-api_mention	O
will	O	O
return	O	O
a	O	O
String	B-api_mention	B-api_mention
representation	O	O
for	O	O
the	O	O
regex	O	O
.	O	O
Question	O	O
-	O	O
24609564	O	O
,	O	O
answer	O	O
-	O	O
24609841	O	O
If	O	O
you	O	O
will	O	O
read	O	O
comment	O	O
above	O	O
the	O	O
code	O	O
,	O	O
It	O	O
is	O	O
mentioned	O	O
that	O	O
.	O	O
.	O	O
.	O	O
If	O	O
the	O	O
caller	O	O
is	O	O
not	O	O
a	O	O
ForkJoinTask	B-api_mention	O
,	O	O
this	O	O
method	O	O
is	O	O
behaviorally	O	O
equivalent	O	O
to	O	O
#	O	O
pre	O	O
So	O	O
it	O	O
is	O	O
just	O	O
another	O	O
form	O	O
to	O	O
implement	O	O
above	O	O
code	O	O
in	O	O
else	O	O
part	O	O
.	O	O
.	O	O
.	O	O
!	O	O
!	O	O
In	O	O
Style	O	O
notes	O	O
it	O	O
is	O	O
mentioned	O	O
that	O	O
,	O	O
#	O	O
blockquote	O	O
And	O	O
if	O	O
you	O	O
will	O	O
see	O	O
implementation	O	O
of	O	O
ManagedLocker	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
isReleasable	I-api_mention	I-api_mention
,	O	O
It	O	O
is	O	O
updating	O	O
the	O	O
lock	O	O
and	O	O
returns	O	O
true	O	O
if	O	O
blocking	O	O
is	O	O
unnecessary	O	O
.	O	O
Interpretation	O	O
:	O	O
Blank	O	O
while	O	O
loops	O	O
are	O	O
used	O	O
to	O	O
provide	O	O
an	O	O
interrupt	O	O
until	O	O
some	O	O
condition	O	O
reset	O	O
to	O	O
true	O	O
/	O	O
false	O	O
.	O	O
Here	O	O
,	O	O
do	O	O
{	O	O
}	O	O
while	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
is	O	O
a	O	O
blocker	O	O
/	O	O
interrupt	O	O
until	O	O
blocker	O	O
.	B-api_mention	B-api_mention
block	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
true	O	O
when	O	O
blocker	O	O
.	B-api_mention	B-api_mention
isReleasable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
false	O	O
.	O	O
Loop	O	O
will	O	O
continue	O	O
execution	O	O
while	O	O
blocker	O	O
is	O	O
not	O	O
releasable	O	O
(	O	O
!	O	O
blocker	O	O
.	B-api_mention	B-api_mention
isReleasable	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
and	O	O
blocker	O	O
is	O	O
not	O	O
blocked	O	O
!	O	O
!	O	O
Execution	O	O
will	O	O
be	O	O
out	O	O
of	O	O
loop	O	O
as	O	O
soon	O	O
as	O	O
blocker	O	O
.	B-api_mention	B-api_mention
block	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
set	O	O
to	O	O
true	O	O
.	O	O
Note	O	O
that	O	O
,	O	O
do	O	O
{	O	O
}	O	O
while	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
does	O	O
not	O	O
update	O	O
CAS	O	O
variable	O	O
,	O	O
but	O	O
it	O	O
guarantee	O	O
that	O	O
program	O	O
will	O	O
wait	O	O
until	O	O
variable	O	O
gets	O	O
updated	O	O
(	O	O
force	O	O
to	O	O
wait	O	O
until	O	O
variable	O	O
gets	O	O
updated	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
33375616	O	O
Most	O	O
of	O	O
these	O	O
answers	O	O
miss	O	O
the	O	O
big	O	O
picture	O	O
,	O	O
which	O	O
is	O	O
that	O	O
,	O	O
as	O	O
far	O	O
as	O	O
the	O	O
Java	O	O
language	O	O
is	O	O
concerned	O	O
,	O	O
there	O	O
is	O	O
no	O	O
more	O	O
difference	O	O
between	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
than	O	O
there	O	O
is	O	O
between	O	O
any	O	O
other	O	O
two	O	O
methods	O	O
.	O	O
They	O	O
'	O	O
re	O	O
both	O	O
just	O	O
methods	O	O
.	O	O
They	O	O
both	O	O
run	O	O
in	O	O
the	O	O
thread	O	O
that	O	O
called	O	O
them	O	O
.	O	O
They	O	O
both	O	O
do	O	O
whatever	O	O
they	O	O
were	O	O
coded	O	O
to	O	O
do	O	O
,	O	O
and	O	O
then	O	O
they	O	O
both	O	O
return	O	O
,	O	O
still	O	O
in	O	O
the	O	O
same	O	O
thread	O	O
,	O	O
to	O	O
their	O	O
callers	O	O
.	O	O
The	O	O
biggest	O	O
difference	O	O
is	O	O
that	O	O
most	O	O
of	O	O
the	O	O
code	O	O
for	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
native	O	O
code	O	O
while	O	O
,	O	O
in	O	O
most	O	O
cases	O	O
,	O	O
the	O	O
code	O	O
for	O	O
r	O	O
.	B-api_mention	O
run	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
is	O	O
going	O	O
to	O	O
be	O	O
pure	O	O
Java	O	O
.	O	O
But	O	O
that	O	O
'	O	O
s	O	O
not	O	O
much	O	O
of	O	O
a	O	O
difference	O	O
.	O	O
Code	O	O
is	O	O
code	O	O
.	O	O
Native	O	O
code	O	O
is	O	O
harder	O	O
to	O	O
find	O	O
,	O	O
and	O	O
harder	O	O
to	O	O
understand	O	O
when	O	O
you	O	O
find	O	O
it	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
still	O	O
just	O	O
code	O	O
that	O	O
tells	O	O
the	O	O
computer	O	O
what	O	O
to	O	O
do	O	O
.	O	O
So	O	O
,	O	O
what	O	O
does	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
do	O	O
?	O	O
It	O	O
creates	O	O
a	O	O
new	O	O
native	O	O
thread	O	O
,	O	O
it	O	O
arranges	O	O
for	O	O
that	O	O
thread	O	O
to	O	O
call	O	O
t	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
then	O	O
it	O	O
tells	O	O
the	O	O
OS	O	O
to	O	O
let	O	O
the	O	O
new	O	O
thread	O	O
run	O	O
.	O	O
Then	O	O
it	O	O
returns	O	O
.	O	O
And	O	O
what	O	O
does	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
do	O	O
?	O	O
The	O	O
funny	O	O
thing	O	O
is	O	O
,	O	O
the	O	O
person	O	O
asking	O	O
this	O	O
question	O	O
is	O	O
the	O	O
person	O	O
who	O	O
wrote	O	O
it	O	O
.	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
whatever	O	O
you	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
,	O	O
the	O	O
developer	O	O
who	O	O
wrote	O	O
it	O	O
)	O	O
designed	O	O
it	O	O
to	O	O
do	O	O
.	O	O
t	O	O
.	B-api_mention	B-api_mention
start	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
method	O	O
that	O	O
the	O	O
library	O	O
provides	O	O
for	O	O
your	O	O
code	O	O
to	O	O
call	O	O
when	O	O
you	O	O
want	O	O
a	O	O
new	O	O
thread	O	O
.	O	O
r	O	O
.	B-api_mention	B-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
method	O	O
that	O	O
you	O	O
provide	O	O
for	O	O
the	O	O
library	O	O
to	O	O
call	O	O
in	O	O
the	O	O
new	O	O
thread	O	O
.	O	O
Question	O	O
-	O	O
4709175	O	O
,	O	O
answer	O	O
-	O	O
4709284	O	O
#	O	O
blockquote	O	O
You	O	O
can	O	O
use	O	O
an	O	O
Enum	B-api_mention	O
to	O	O
represent	O	O
a	O	O
smallish	O	O
fixed	O	O
set	O	O
of	O	O
constants	O	O
or	O	O
an	O	O
internal	O	O
class	O	O
mode	O	O
while	O	O
increasing	O	O
readability	O	O
.	O	O
Also	O	O
,	O	O
Enums	O	O
can	O	O
enforce	O	O
a	O	O
certain	O	O
rigidity	O	O
when	O	O
used	O	O
in	O	O
method	O	O
parameters	O	O
.	O	O
They	O	O
offer	O	O
the	O	O
interesting	O	O
possibility	O	O
of	O	O
passing	O	O
information	O	O
to	O	O
a	O	O
constructor	O	O
like	O	O
in	O	O
the	O	O
Planets	O	O
example	O	O
on	O	O
Oracle	O	O
'	O	O
s	O	O
site	O	O
and	O	O
,	O	O
as	O	O
you	O	O
'	O	O
ve	O	O
discovered	O	O
,	O	O
also	O	O
allow	O	O
a	O	O
simple	O	O
way	O	O
to	O	O
create	O	O
a	O	O
singleton	O	O
pattern	O	O
.	O	O
ex	O	O
:	O	O
Locale	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
reads	O	O
better	O	O
than	O	O
Locale	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setDefault	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
enforces	O	O
the	O	O
use	O	O
of	O	O
fixed	O	O
set	O	O
of	O	O
values	O	O
shown	O	O
in	O	O
an	O	O
IDE	O	O
when	O	O
you	O	O
add	O	O
the	O	O
.	O	O
separator	O	O
instead	O	O
of	O	O
all	O	O
integers	O	O
.	O	O
Question	O	O
-	O	O
20877086	O	O
,	O	O
answer	O	O
-	O	O
20889556	O	O
To	O	O
complement	O	O
the	O	O
given	O	O
answers	O	O
,	O	O
also	O	O
take	O	O
note	O	O
of	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
code	O	O
will	O	O
also	O	O
print	O	O
:	O	O
false	O	O
As	O	O
user	O	O
Jay	O	O
has	O	O
claimed	O	O
in	O	O
a	O	O
comment	O	O
for	O	O
the	O	O
accepted	O	O
answer	O	O
,	O	O
care	O	O
must	O	O
be	O	O
taken	O	O
when	O	O
using	O	O
operator	O	O
=	O	O
=	O	O
on	O	O
objects	O	O
,	O	O
here	O	O
you	O	O
'	O	O
re	O	O
checking	O	O
if	O	O
both	O	O
references	O	O
are	O	O
the	O	O
same	O	O
,	O	O
which	O	O
is	O	O
not	O	O
,	O	O
because	O	O
they	O	O
are	O	O
different	O	O
objets	O	O
,	O	O
although	O	O
they	O	O
represent	O	O
the	O	O
very	O	O
same	O	O
value	O	O
.	O	O
To	O	O
compare	O	O
objects	O	O
,	O	O
you	O	O
should	O	O
use	O	O
the	O	O
equals	O	O
method	O	O
instead	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
will	O	O
print	O	O
:	O	O
true	O	O
You	O	O
may	O	O
ask	O	O
,	O	O
But	O	O
then	O	O
why	O	O
the	O	O
first	O	O
line	O	O
printed	O	O
true	O	O
?	O	O
.	O	O
Checking	O	O
the	O	O
source	O	O
code	O	O
for	O	O
the	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
method	O	O
,	O	O
you	O	O
can	O	O
see	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
If	O	O
the	O	O
param	O	O
is	O	O
an	O	O
integer	O	O
between	O	O
IntegerCache	B-api_mention	B-api_mention
.	I-api_mention	O
low	I-api_mention	O
(	O	O
defaulted	O	O
to	O	O
-	O	O
128	O	O
)	O	O
and	O	O
IntegerCache	B-api_mention	O
.	I-api_mention	O
high	I-api_mention	O
(	O	O
calculated	O	O
at	O	O
runtime	O	O
with	O	O
minimum	O	O
value	O	O
127	O	O
)	O	O
then	O	O
a	O	O
pre	O	O
-	O	O
allocated	O	O
(	O	O
cached	O	O
)	O	O
object	O	O
is	O	O
returned	O	O
.	O	O
So	O	O
when	O	O
you	O	O
use	O	O
127	O	O
as	O	O
parameter	O	O
,	O	O
you	O	O
'	O	O
re	O	O
getting	O	O
two	O	O
references	O	O
to	O	O
same	O	O
cached	O	O
object	O	O
and	O	O
getting	O	O
true	O	O
in	O	O
the	O	O
comparison	O	O
of	O	O
the	O	O
references	O	O
.	O	O
Question	O	O
-	O	O
21488056	O	O
,	O	O
answer	O	O
-	O	O
36242382	O	O
You	O	O
can	O	O
use	O	O
Predicates	O	O
from	O	O
Eclipse	O	O
Collections	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
can	O	O
'	O	O
t	O	O
change	O	O
the	O	O
strings	O	O
from	O	O
List	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
only	O	O
need	O	O
a	O	O
negation	O	O
of	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
you	O	O
can	O	O
also	O	O
use	O	O
StringPredicates	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
notEmpty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
a	O	O
contributor	O	O
to	O	O
Eclipse	O	O
Collections	O	B-api_mention
.	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26791724	O	O
Use	O	O
the	O	O
replaceEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
from	O	O
Apache	O	O
Commons	O	O
StringUtils	B-api_mention	O
:	O	O
StringUtils	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
replaceEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
28770822	O	O
,	O	O
answer	O	O
-	O	O
28853754	O	O
TLDR	O	O
:	O	O
Jump	O	O
to	O	O
the	O	O
conclusion	O	O
#	O	O
blockquote	O	O
A	O	O
brief	O	O
history	O	O
of	O	O
@	O	O
Native	O	O
I	O	O
made	O	O
some	O	O
search	O	O
on	O	O
the	O	O
mailing	O	O
lists	O	O
.	O	O
I	O	O
found	O	O
some	O	O
interesting	O	O
things	O	O
.	O	O
At	O	O
first	O	O
an	O	O
annotation	O	O
(	O	O
1	O	O
2	O	O
)	O	O
javax	O	O
.	O	O
tools	O	O
.	O	O
annotation	O	O
.	O	O
ForceNativeHeader	O	O
was	O	O
introduced	O	O
to	O	O
#	O	O
blockquote	O	O
It	O	O
is	O	O
used	O	O
by	O	O
com	O	B-api_mention
.	O	I-api_mention
sun	O	I-api_mention
.	O	I-api_mention
tools	O	I-api_mention
.	O	I-api_mention
javac	O	I-api_mention
.	O	I-api_mention
processing	O	I-api_mention
.	O	I-api_mention
NativeapiVisitor	O	I-api_mention
.	O	O
By	O	O
looking	O	O
at	O	O
the	O	O
code	O	O
we	O	O
can	O	O
see	O	O
that	O	O
the	O	O
native	O	O
header	O	O
is	O	O
generated	O	O
if	O	O
the	O	O
class	O	O
declare	O	O
some	O	O
native	O	O
methods	O	O
or	O	O
if	O	O
the	O	O
class	O	O
is	O	O
annotated	O	O
@	O	O
ForceNativeHeader	O	O
.	O	O
Later	O	O
this	O	O
annotation	O	O
was	O	O
renamed	O	O
to	O	O
GenerateNativeHeader	O	O
(	O	O
1	O	O
2	O	O
)	O	O
.	O	O
Then	O	O
this	O	O
annotation	O	O
was	O	O
added	O	O
to	O	O
several	O	O
types	O	O
(	O	O
especially	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
)	O	O
with	O	O
an	O	O
interresting	O	O
comment	O	O
:	O	O
#	O	O
pre	O	O
But	O	O
by	O	O
adding	O	O
this	O	O
annotation	O	O
it	O	O
add	O	O
a	O	O
problematic	O	O
dependency	O	O
from	O	O
base	O	O
module	O	O
to	O	O
the	O	O
module	O	O
containing	O	O
javax	O	O
.	O	O
tools	O	O
.	O	O
So	O	O
the	O	O
annotation	O	O
were	O	O
removed	O	O
from	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
and	O	O
these	O	O
files	O	O
were	O	O
explicitly	O	O
added	O	O
to	O	O
the	O	O
build	O	O
process	O	O
since	O	O
the	O	O
header	O	O
were	O	O
no	O	O
more	O	O
automatically	O	O
generated	O	O
.	O	O
.	O	O
.	O	O
a	O	O
"	O	O
(	O	O
hopefully	O	O
temporary	O	O
)	O	O
hack	O	O
"	O	O
.	O	O
So	O	O
a	O	O
new	O	O
annotation	O	O
java	O	O
.	O	O
lang	O	O
.	O	O
annotation	O	O
.	O	O
Native	O	O
was	O	O
created	O	O
and	O	O
used	O	O
in	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
.	O	O
The	O	O
annotation	O	O
was	O	O
set	O	O
a	O	O
TargetType	O	O
FIELD	O	O
.	O	O
#	O	O
blockquote	O	O
All	O	O
the	O	O
purpose	O	O
of	O	O
this	O	O
stuff	O	O
is	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
is	O	O
the	O	O
case	O	O
of	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
this	O	O
was	O	O
a	O	O
part	O	O
of	O	O
the	O	O
JEP	O	O
139	O	O
:	O	O
Enhance	O	O
javac	O	O
to	O	O
Improve	O	O
Build	O	O
Speed	O	O
:	O	O
#	O	O
blockquote	O	O
A	O	O
basic	O	O
experimentation	O	O
I	O	O
made	O	O
a	O	O
basic	O	O
experimentation	O	O
on	O	O
the	O	O
JDK	O	O
.	O	O
I	O	O
clone	O	O
the	O	O
open	O	O
-	O	O
jdk	O	O
forest	O	O
and	O	O
i	O	O
successfully	O	O
build	O	O
it	O	O
.	O	O
As	O	O
expected	O	O
the	O	O
header	O	O
files	O	O
where	O	O
generated	O	O
for	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
(	O	O
thanks	O	O
to	O	O
@	O	O
Native	O	O
)	O	O
and	O	O
for	O	O
Float	B-api_mention	B-api_mention
and	O	O
Double	B-api_mention	B-api_mention
(	O	O
thanks	O	O
to	O	O
their	O	O
native	O	O
methods	O	O
)	O	O
but	O	O
not	O	O
for	O	O
Byte	B-api_mention	B-api_mention
,	O	O
Short	B-api_mention	B-api_mention
.	O	O
.	O	O
.	O	O
#	O	O
pre	O	O
Then	O	O
i	O	O
tried	O	O
to	O	O
remove	O	O
the	O	O
@	O	O
Native	O	O
from	O	O
the	O	O
Integer	B-api_mention	B-api_mention
fields	O	O
and	O	O
i	O	O
tried	O	O
to	O	O
build	O	O
again	O	O
the	O	O
jdk	O	O
but	O	O
i	O	O
get	O	O
an	O	O
error	O	O
:	O	O
#	O	O
pre	O	O
logically	O	O
since	O	O
the	O	O
header	O	O
have	O	O
not	O	O
been	O	O
generated	O	O
.	O	O
I	O	O
have	O	O
also	O	O
confirmed	O	O
that	O	O
java	O	O
_	O	O
lang	O	O
_	O	O
Integer	O	B-api_mention
.	O	I-api_mention
h	O	I-api_mention
is	O	O
included	O	O
in	O	O
several	O	O
c	O	O
and	O	O
cpp	O	O
files	O	O
:	O	O
#	O	O
pre	O	O
like	O	O
Long	B-api_mention	O
#	O	O
pre	O	O
like	O	O
Float	B-api_mention	B-api_mention
#	O	O
pre	O	O
and	O	O
like	O	O
Double	B-api_mention	B-api_mention
#	O	O
pre	O	O
but	O	O
neither	O	O
Short	B-api_mention	O
find	O	O
.	O	O
\	O	O
(	O	O
-	O	O
name	O	O
StringLiteral	O	O
-	O	O
o	O	O
-	O	O
name	O	O
StringLiteral	O	O
\	O	O
)	O	O
-	O	O
exec	O	O
grep	O	O
StringLiteral	O	O
{	O	O
}	O	O
\	O	O
;	O	O
-	O	O
print	O	O
nor	O	O
Byte	B-api_mention	B-api_mention
,	O	O
nor	O	O
Character	B-api_mention	B-api_mention
.	O	O
Conclusion	O	O
Among	O	O
all	O	O
these	O	O
types	O	O
,	O	O
only	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Long	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
are	O	O
used	O	O
in	O	O
the	O	O
native	O	O
source	O	O
code	O	O
of	O	O
the	O	O
jdk	O	O
.	O	O
And	O	O
only	O	O
the	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
fields	O	O
are	O	O
annotated	O	O
with	O	O
@	O	O
Native	O	O
because	O	O
they	O	O
have	O	O
no	O	O
native	O	O
methods	O	O
(	O	O
as	O	O
opposed	O	O
to	O	O
Float	B-api_mention	B-api_mention
and	O	O
Double	B-api_mention	B-api_mention
)	O	O
Question	O	O
-	O	O
23674624	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
at	O	O
the	O	O
docs	O	O
for	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
,	O	O
and	O	O
I	O	O
see	O	O
an	O	O
toArray	B-api_mention	B-api_mention
method	O	O
,	O	O
but	O	O
no	O	O
way	O	O
to	O	O
go	O	O
directly	O	O
to	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
Surely	O	O
there	O	O
is	O	O
a	O	O
way	O	O
to	O	O
convert	O	O
a	O	O
Stream	B-api_mention	B-api_mention
to	O	O
a	O	O
List	B-api_mention	B-api_mention
?	O	O
Question	O	O
-	O	O
20945049	O	O
,	O	O
answer	O	O
-	O	O
21008747	O	O
[	O	O
Disclaimer	O	O
this	O	O
is	O	O
a	O	O
deliberately	O	O
opinionated	O	O
style	O	O
of	O	O
answer	O	O
as	O	O
I	O	O
feel	O	O
a	O	O
more	O	O
"	O	O
don	O	O
'	O	O
t	O	O
do	O	O
this	O	O
at	O	O
home	O	O
kids	O	O
"	O	O
answer	O	O
is	O	O
warranted	O	O
]	O	O
The	O	O
sin	O	O
is	O	O
the	O	O
line	O	O
field	O	O
.	B-api_mention	B-api_mention
setAccessible	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
says	O	O
to	O	O
violate	O	O
the	O	O
public	O	O
api	O	O
by	O	O
allowing	O	O
access	O	O
to	O	O
a	O	O
private	O	O
field	O	O
.	O	O
Thats	O	O
a	O	O
giant	O	O
security	O	O
hole	O	O
which	O	O
can	O	O
be	O	O
locked	O	O
down	O	O
by	O	O
configuring	O	O
a	O	O
security	O	O
manager	O	O
.	O	O
The	O	O
phenomenon	O	O
in	O	O
the	O	O
question	O	O
are	O	O
implementation	O	O
details	O	O
which	O	O
you	O	O
would	O	O
never	O	O
see	O	O
when	O	O
not	O	O
using	O	O
that	O	O
dangerous	O	O
line	O	O
of	O	O
code	O	O
to	O	O
violate	O	O
the	O	O
access	O	O
modifiers	O	O
via	O	O
reflection	O	O
.	O	O
Clearly	O	O
two	O	O
(	O	O
normally	O	O
)	O	O
immutable	O	O
strings	O	O
can	O	O
share	O	O
the	O	O
same	O	O
char	O	O
array	O	O
.	O	O
Whether	O	O
a	O	O
substring	O	O
shares	O	O
the	O	O
same	O	O
array	O	O
depends	O	O
on	O	O
whether	O	O
it	O	O
can	O	O
and	O	O
whether	O	O
the	O	O
developer	O	O
thought	O	O
to	O	O
share	O	O
it	O	O
.	O	O
Normally	O	O
these	O	O
are	O	O
invisible	O	O
implementation	O	O
details	O	O
which	O	O
you	O	O
should	O	O
not	O	O
have	O	O
to	O	O
know	O	O
unless	O	O
you	O	O
shoot	O	O
the	O	O
access	O	O
modifier	O	O
through	O	O
the	O	O
head	O	O
with	O	O
that	O	O
line	O	O
of	O	O
code	O	O
.	O	O
It	O	O
is	O	O
simply	O	O
not	O	O
a	O	O
good	O	O
idea	O	O
to	O	O
rely	O	O
upon	O	O
such	O	O
details	O	O
which	O	O
cannot	O	O
be	O	O
experienced	O	O
without	O	O
violating	O	O
the	O	O
access	O	O
modifiers	O	O
using	O	O
reflection	O	O
.	O	O
The	O	O
owner	O	O
of	O	O
that	O	O
class	O	O
only	O	O
supports	O	O
the	O	O
normal	O	O
public	O	O
API	O	O
and	O	O
is	O	O
free	O	O
to	O	O
make	O	O
implementation	O	O
changes	O	O
in	O	O
the	O	O
future	O	O
.	O	O
Having	O	O
said	O	O
all	O	O
that	O	O
the	O	O
line	O	O
of	O	O
code	O	O
is	O	O
really	O	O
very	O	O
useful	O	O
when	O	O
you	O	O
have	O	O
a	O	O
gun	O	O
held	O	O
you	O	O
your	O	O
head	O	O
forcing	O	O
you	O	O
to	O	O
do	O	O
such	O	O
dangerous	O	O
things	O	O
.	O	O
Using	O	O
that	O	O
back	O	O
door	O	O
is	O	O
usually	O	O
a	O	O
code	O	O
smell	O	O
that	O	O
you	O	O
need	O	O
to	O	O
upgrade	O	O
to	O	O
better	O	O
library	O	O
code	O	O
where	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
sin	O	O
.	O	O
Another	O	O
common	O	O
use	O	O
of	O	O
that	O	O
dangerous	O	O
line	O	O
of	O	O
code	O	O
is	O	O
to	O	O
write	O	O
a	O	O
"	O	O
voodoo	O	O
framework	O	O
"	O	O
(	O	O
orm	O	O
,	O	O
injection	O	O
container	O	O
,	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
Many	O	O
folks	O	O
get	O	O
religious	O	O
about	O	O
such	O	O
frameworks	O	O
(	O	O
both	O	O
for	O	O
and	O	O
against	O	O
them	O	O
)	O	O
so	O	O
I	O	O
will	O	O
avoid	O	O
inviting	O	O
a	O	O
flame	O	O
war	O	O
by	O	O
saying	O	O
nothing	O	O
other	O	O
than	O	O
the	O	O
vast	O	O
majority	O	O
of	O	O
programmers	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
go	O	O
there	O	O
.	O	O
Question	O	O
-	O	O
19431234	O	O
Java	O	O
8	O	O
has	O	O
a	O	O
completely	O	O
new	O	O
API	O	O
for	O	O
date	O	O
and	O	O
time	O	O
.	O	O
One	O	O
of	O	O
the	O	O
most	O	O
useful	O	O
classes	O	O
in	O	O
this	O	O
API	O	O
is	O	O
LocalDateTime	B-api_mention	B-api_mention
,	O	O
for	O	O
holding	O	O
a	O	O
timezone	O	O
-	O	O
independent	O	O
date	O	O
-	O	O
with	O	O
-	O	O
time	O	O
value	O	O
.	O	O
There	O	O
are	O	O
probably	O	O
millions	O	O
of	O	O
lines	O	O
of	O	O
code	O	O
using	O	O
the	O	O
legacy	O	O
class	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
for	O	O
this	O	O
purpose	O	O
.	O	O
As	O	O
such	O	O
,	O	O
when	O	O
interfacing	O	O
old	O	O
and	O	O
new	O	O
code	O	O
there	O	O
will	O	O
be	O	O
a	O	O
need	O	O
for	O	O
converting	O	O
between	O	O
the	O	O
two	O	O
.	O	O
As	O	O
there	O	O
seems	O	O
to	O	O
be	O	O
no	O	O
direct	O	O
methods	O	O
for	O	O
accomplishing	O	O
this	O	O
,	O	O
how	O	O
can	O	O
it	O	O
be	O	O
done	O	O
?	O	O
Question	O	O
-	O	O
23932061	O	O
,	O	O
answer	O	O
-	O	O
23932216	O	O
You	O	O
can	O	O
easily	O	O
create	O	O
a	O	O
Stream	B-api_mention	B-api_mention
out	O	O
of	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
or	O	O
Iterator	B-api_mention	B-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
26791441	O	O
,	O	O
answer	O	O
-	O	O
26877910	O	O
What	O	O
I	O	O
can	O	O
only	O	O
share	O	O
is	O	O
my	O	O
own	O	O
method	O	O
.	O	O
You	O	O
can	O	O
use	O	O
a	O	O
temporary	O	O
String	B-api_mention	B-api_mention
temp	O	O
=	O	O
StringLiteral	O	O
;	O	O
or	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Format	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
This	O	O
is	O	O
my	O	O
example	O	O
code	O	O
created	O	O
in	O	O
console	O	O
application	O	O
via	O	O
c	O	O
#	O	O
-	O	O
"	O	O
Idea	O	O
Only	O	O
,	O	O
Not	O	O
Exact	O	O
Answer	O	O
"	O	O
.	O	O
#	O	O
pre	O	O
Or	O	O
you	O	O
can	O	O
also	O	O
use	O	O
the	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Format	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
pre	O	O
Output	O	O
:	O	O
time	O	O
upon	O	O
a	O	O
Once	O	O
,	O	O
there	O	O
was	O	O
a	O	O
bar	O	O
and	O	O
a	O	O
foo	O	O
.	O	O
Question	O	O
-	O	O
22501230	O	O
,	O	O
answer	O	O
-	O	O
22511214	O	O
I	O	O
don	O	O
'	O	O
t	O	O
like	O	O
any	O	O
of	O	O
the	O	O
solutions	O	O
presented	O	O
except	O	O
for	O	O
JAB	O	O
'	O	O
s	O	O
.	O	O
None	O	O
of	O	O
the	O	O
others	O	O
make	O	O
it	O	O
easy	O	O
to	O	O
read	O	O
the	O	O
code	O	O
and	O	O
understand	O	O
what	O	O
is	O	O
being	O	O
computed	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
how	O	O
I	O	O
would	O	O
write	O	O
this	O	O
code	O	O
-	O	O
-	O	O
I	O	O
only	O	O
know	O	O
C	O	O
#	O	O
,	O	O
not	O	O
Java	O	O
,	O	O
but	O	O
you	O	O
get	O	O
the	O	O
picture	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
it	O	O
is	O	O
much	O	O
more	O	O
clear	O	O
what	O	O
is	O	O
being	O	O
computed	O	O
here	O	O
:	O	O
this	O	O
emphasizes	O	O
that	O	O
we	O	O
are	O	O
computing	O	O
who	O	O
gets	O	O
hit	O	O
by	O	O
what	O	O
attack	O	O
,	O	O
and	O	O
returning	O	O
both	O	O
results	O	O
.	O	O
However	O	O
this	O	O
could	O	O
be	O	O
even	O	O
better	O	O
;	O	O
that	O	O
Boolean	B-api_mention	O
array	O	O
is	O	O
somewhat	O	O
opaque	O	O
.	O	O
I	O	O
like	O	O
the	O	O
table	O	O
lookup	O	O
approach	O	O
but	O	O
I	O	O
would	O	O
be	O	O
inclined	O	O
to	O	O
write	O	O
it	O	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
made	O	O
it	O	O
clear	O	O
what	O	O
the	O	O
intended	O	O
game	O	O
semantics	O	O
were	O	O
.	O	O
That	O	O
is	O	O
,	O	O
rather	O	O
than	O	O
"	O	O
an	O	O
attack	O	O
of	O	O
zero	O	O
and	O	O
a	O	O
defense	O	O
of	O	O
one	O	O
results	O	O
in	O	O
no	O	O
hit	O	O
"	O	O
,	O	O
instead	O	O
find	O	O
a	O	O
way	O	O
to	O	O
make	O	O
the	O	O
code	O	O
more	O	O
clearly	O	O
imply	O	O
"	O	O
a	O	O
low	O	O
kick	O	O
attack	O	O
and	O	O
a	O	O
low	O	O
block	O	O
defense	O	O
results	O	O
in	O	O
no	O	O
hit	O	O
"	O	O
.	O	O
Make	O	O
the	O	O
code	O	O
reflect	O	O
the	O	O
business	O	O
logic	O	O
of	O	O
the	O	O
game	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31922994	O	O
I	O	O
think	O	O
that	O	O
is	O	O
because	O	O
you	O	O
usually	O	O
write	O	O
your	O	O
functions	O	O
to	O	O
manipulate	O	O
data	O	O
,	O	O
and	O	O
then	O	O
lift	O	O
it	O	O
to	O	O
Optional	B-api_mention	B-api_mention
using	O	O
map	O	O
and	O	O
similar	O	O
functions	O	O
.	O	O
This	O	O
adds	O	O
the	O	O
default	O	O
Optional	B-api_mention	B-api_mention
behavior	O	O
to	O	O
it	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
there	O	O
might	O	O
be	O	O
cases	O	O
,	O	O
when	O	O
it	O	O
is	O	O
necessary	O	O
to	O	O
write	O	O
your	O	O
own	O	O
auxilary	O	O
function	O	O
that	O	O
works	O	O
on	O	O
Optional	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
31445024	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
determine	O	O
whether	O	O
the	O	O
following	O	O
statements	O	O
are	O	O
guaranteed	O	O
to	O	O
be	O	O
true	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
'	O	O
ve	O	O
always	O	O
assumed	O	O
that	O	O
autoboxing	O	O
was	O	O
equivalent	O	O
to	O	O
calling	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
corresponding	O	O
type	O	O
.	O	O
Every	O	O
discussion	O	O
that	O	O
I	O	O
'	O	O
ve	O	O
seen	O	O
on	O	O
the	O	O
topic	O	O
seems	O	O
to	O	O
support	O	O
my	O	O
assumption	O	O
.	O	O
But	O	O
all	O	O
I	O	O
could	O	O
find	O	O
in	O	O
the	O	O
JLS	O	O
was	O	O
the	O	O
following	O	O
(	O	O
§	O	O
5	O	O
.	O	O
1	O	O
.	O	O
7	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
That	O	O
describes	O	O
behavior	O	O
identical	O	O
to	O	O
that	O	O
of	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
there	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
be	O	O
any	O	O
guarantee	O	O
that	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
actually	O	O
invoked	O	O
,	O	O
meaning	O	O
there	O	O
could	O	O
theoretically	O	O
be	O	O
an	O	O
implementation	O	O
that	O	O
keeps	O	O
a	O	O
separate	O	O
,	O	O
dedicated	O	O
cache	O	O
for	O	O
autoboxed	O	O
values	O	O
.	O	O
In	O	O
such	O	O
a	O	O
case	O	O
,	O	O
there	O	O
might	O	O
not	O	O
be	O	O
identity	O	O
equality	O	O
between	O	O
cached	O	O
autoboxed	O	O
values	O	O
and	O	O
regular	O	O
cached	O	O
boxed	O	O
values	O	O
.	O	O
Oracle	O	O
'	O	O
s	O	O
autoboxing	O	O
tutorial	O	O
states	O	O
matter	O	O
-	O	O
of	O	O
-	O	O
factly	O	O
that	O	O
li	O	O
.	O	B-api_mention
add	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
is	O	O
compiled	O	O
to	O	O
li	O	O
.	O	B-api_mention
add	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
where	O	O
i	O	O
is	O	O
an	O	O
int	O	O
.	O	O
But	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
the	O	O
tutorial	O	O
should	O	O
be	O	O
considered	O	O
an	O	O
authoritative	O	O
source	O	O
.	O	O
Question	O	O
-	O	O
18532488	O	O
,	O	O
answer	O	O
-	O	O
24296741	O	O
Here	O	O
'	O	O
s	O	O
another	O	O
technique	O	O
I	O	O
ran	O	O
across	O	O
the	O	O
other	O	O
day	O	O
:	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
call	O	O
creates	O	O
a	O	O
List	B-api_mention	B-api_mention
containing	O	O
n	O	O
copies	O	O
of	O	O
whatever	O	O
value	O	O
you	O	O
provide	O	O
.	O	O
In	O	O
this	O	O
case	O	O
it	O	O
'	O	O
s	O	O
the	O	O
boxed	O	O
Integer	O	B-api_mention
value	O	O
1	O	O
.	O	O
Of	O	O
course	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
actually	O	O
create	O	O
a	O	O
list	O	O
with	O	O
n	O	O
elements	O	O
;	O	O
it	O	O
creates	O	O
a	O	O
"	O	O
virtualized	O	O
"	O	O
list	O	O
that	O	O
contains	O	O
only	O	O
the	O	O
value	O	O
and	O	O
the	O	O
length	O	O
,	O	O
and	O	O
any	O	O
call	O	O
to	O	O
get	O	O
within	O	O
range	O	O
just	O	O
returns	O	O
the	O	O
value	O	O
.	O	O
The	O	O
nCopies	B-api_mention	O
method	O	O
has	O	O
been	O	O
around	O	O
since	O	O
the	O	O
Collections	B-api_mention	B-api_mention
Framework	O	O
was	O	O
introduced	O	O
way	O	O
back	O	O
in	O	O
JDK	O	O
1	O	O
.	O	O
2	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
the	O	O
ability	O	O
to	O	O
create	O	O
a	O	O
stream	O	O
from	O	O
its	O	O
result	O	O
was	O	O
added	O	O
in	O	O
Java	O	O
SE	O	O
8	O	O
.	O	O
Big	O	O
deal	O	O
,	O	O
another	O	O
way	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
in	O	O
about	O	O
the	O	O
same	O	O
number	O	O
of	O	O
lines	O	O
.	O	O
However	O	O
,	O	O
this	O	O
technique	O	O
is	O	O
faster	O	O
than	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	O
generate	I-api_mention	O
and	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	O
iterate	I-api_mention	O
approaches	O	O
,	O	O
and	O	O
surprisingly	O	O
,	O	O
it	O	O
'	O	O
s	O	O
also	O	O
faster	O	O
than	O	O
the	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
approach	O	O
.	O	O
For	O	O
iterate	O	O
and	O	O
generate	O	O
the	O	O
result	O	O
is	O	O
perhaps	O	O
not	O	O
too	O	O
surprising	O	O
.	O	O
The	O	O
streams	O	O
framework	O	O
(	O	O
really	O	O
,	O	O
the	O	O
Spliterators	O	O
for	O	O
these	O	O
streams	O	O
)	O	O
is	O	O
built	O	O
on	O	O
the	O	O
assumption	O	O
that	O	O
the	O	O
lambdas	O	O
will	O	O
potentially	O	O
generate	O	O
different	O	O
values	O	O
each	O	O
time	O	O
,	O	O
and	O	O
that	O	O
they	O	O
will	O	O
generate	O	O
an	O	O
unbounded	O	O
number	O	O
of	O	O
results	O	O
.	O	O
This	O	O
makes	O	O
parallel	O	O
splitting	O	O
particularly	O	O
difficult	O	O
.	O	O
The	O	O
iterate	O	O
method	O	O
is	O	O
also	O	O
problematic	O	O
for	O	O
this	O	O
case	O	O
because	O	O
each	O	O
call	O	O
requires	O	O
the	O	O
result	O	O
of	O	O
the	O	O
previous	O	O
one	O	O
.	O	O
So	O	O
the	O	O
streams	O	O
using	O	O
generate	O	O
and	O	O
iterate	O	O
don	O	O
'	O	O
t	O	O
do	O	O
very	O	O
well	O	O
for	O	O
generating	O	O
repeated	O	O
constants	O	O
.	O	O
The	O	O
relatively	O	O
poor	O	O
performance	O	O
of	O	O
range	O	O
is	O	O
surprising	O	O
.	O	O
This	O	O
too	O	O
is	O	O
virtualized	O	O
,	O	O
so	O	O
the	O	O
elements	O	O
don	O	O
'	O	O
t	O	O
actually	O	O
all	O	O
exist	O	O
in	O	O
memory	O	O
,	O	O
and	O	O
the	O	O
size	O	O
is	O	O
known	O	O
up	O	O
front	O	O
.	O	O
This	O	O
should	O	O
make	O	O
for	O	O
a	O	O
fast	O	O
and	O	O
easily	O	O
parallelizable	O	O
spliterator	O	O
.	O	O
But	O	O
it	O	O
surprisingly	O	O
didn	O	O
'	O	O
t	O	O
do	O	O
very	O	O
well	O	O
.	O	O
Perhaps	O	O
the	O	O
reason	O	O
is	O	O
that	O	O
range	O	O
has	O	O
to	O	O
compute	O	O
a	O	O
value	O	O
for	O	O
each	O	O
element	O	O
of	O	O
the	O	O
range	O	O
and	O	O
then	O	O
call	O	O
a	O	O
function	O	O
on	O	O
it	O	O
.	O	O
But	O	O
this	O	O
function	O	O
just	O	O
ignores	O	O
its	O	O
input	O	O
and	O	O
returns	O	O
a	O	O
constant	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
surprised	O	O
this	O	O
isn	O	O
'	O	O
t	O	O
inlined	O	O
and	O	O
killed	O	O
.	O	O
The	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nCopies	I-api_mention	I-api_mention
technique	O	O
has	O	O
to	O	O
do	O	O
boxing	O	O
/	O	O
unboxing	O	O
in	O	O
order	O	O
to	O	O
handle	O	O
the	O	O
values	O	O
,	O	O
since	O	O
there	O	O
are	O	O
no	O	O
primitive	O	O
specializations	O	O
of	O	O
List	B-api_mention	B-api_mention
.	O	O
Since	O	O
the	O	O
value	O	O
is	O	O
the	O	O
same	O	O
every	O	O
time	O	O
,	O	O
it	O	O
'	O	O
s	O	O
basically	O	O
boxed	O	O
once	O	O
and	O	O
that	O	O
box	O	O
is	O	O
shared	O	O
by	O	O
all	O	O
n	O	O
copies	O	O
.	O	O
I	O	O
suspect	O	O
boxing	O	O
/	O	O
unboxing	O	O
is	O	O
highly	O	O
optimized	O	O
,	O	O
even	O	O
intrinsified	O	O
,	O	O
and	O	O
it	O	O
can	O	O
be	O	O
inlined	O	O
well	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
here	O	O
are	O	O
the	O	O
JMH	O	O
results	O	O
:	O	O
(	O	O
2	O	O
.	O	O
8GHz	O	O
Core2Duo	O	O
)	O	O
#	O	O
pre	O	O
There	O	O
is	O	O
a	O	O
fair	O	O
amount	O	O
of	O	O
variance	O	O
in	O	O
the	O	O
ncopies	O	O
version	O	O
,	O	O
but	O	O
overall	O	O
it	O	O
seems	O	O
comfortably	O	O
20x	O	O
faster	O	O
than	O	O
the	O	O
range	O	O
version	O	O
.	O	O
(	O	O
I	O	O
'	O	O
d	O	O
be	O	O
quite	O	O
willing	O	O
to	O	O
believe	O	O
that	O	O
I	O	O
'	O	O
ve	O	O
done	O	O
something	O	O
wrong	O	O
,	O	O
though	O	O
.	O	O
)	O	O
I	O	O
'	O	O
m	O	O
surprised	O	O
at	O	O
how	O	O
well	O	O
the	O	O
nCopies	B-api_mention	O
technique	O	O
works	O	O
.	O	O
Internally	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
do	O	O
very	O	O
much	O	O
special	O	O
,	O	O
with	O	O
the	O	O
stream	O	O
of	O	O
the	O	O
virtualized	O	O
list	O	O
simply	O	O
being	O	O
implemented	O	O
using	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	O
range	I-api_mention	O
!	O	O
I	O	O
had	O	O
expected	O	O
that	O	O
it	O	O
would	O	O
be	O	O
necessary	O	O
to	O	O
create	O	O
a	O	O
specialized	O	O
spliterator	O	O
to	O	O
get	O	O
this	O	O
to	O	O
go	O	O
fast	O	O
,	O	O
but	O	O
it	O	O
already	O	O
seems	O	O
to	O	O
be	O	O
pretty	O	O
good	O	O
.	O	O
Question	O	O
-	O	O
28671903	O	O
,	O	O
answer	O	O
-	O	O
28672583	O	O
The	O	O
behaviour	O	O
is	O	O
(	O	O
somewhat	O	O
)	O	O
documented	O	O
in	O	O
the	O	O
javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
What	O	O
this	O	O
means	O	O
in	O	O
practice	O	O
,	O	O
when	O	O
you	O	O
call	O	O
source	O	O
.	B-api_mention	B-api_mention
removeAll	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
:	O	O
#	O	O
li	O	O
if	O	O
the	O	O
removals	O	O
collection	O	O
is	O	O
of	O	O
a	O	O
smaller	O	O
size	O	O
than	O	O
source	O	O
,	O	O
the	O	O
remove	O	B-api_mention
method	O	O
of	O	O
HashSet	B-api_mention	B-api_mention
is	O	O
called	O	O
,	O	O
which	O	O
is	O	O
fast	O	O
.	O	O
#	O	O
li	O	O
if	O	O
the	O	O
removals	O	O
collection	O	O
is	O	O
of	O	O
equal	O	O
or	O	O
larger	O	O
size	O	O
than	O	O
the	O	O
source	O	O
,	O	O
then	O	O
removals	O	B-api_mention
.	O	I-api_mention
contains	O	I-api_mention
is	O	O
called	O	O
,	O	O
which	O	O
is	O	O
slow	O	O
for	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
.	O	O
Quick	O	O
fix	O	O
:	O	O
Collection	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
removals	O	O
=	O	O
new	O	O
HashSet	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Note	O	O
that	O	O
there	O	O
is	O	O
an	O	O
open	O	O
bug	O	O
that	O	O
is	O	O
very	O	O
similar	O	O
to	O	O
what	O	O
you	O	O
describe	O	O
.	O	O
The	O	O
bottom	O	O
line	O	O
seems	O	O
to	O	O
be	O	O
that	O	O
it	O	O
is	O	O
probably	O	O
a	O	O
poor	O	O
choice	O	O
but	O	O
can	O	O
'	O	O
t	O	O
be	O	O
changed	O	O
because	O	O
it	O	O
is	O	O
documented	O	O
in	O	O
the	O	O
javadoc	O	O
.	O	O
For	O	O
reference	O	O
,	O	O
this	O	O
is	O	O
the	O	O
code	O	O
of	O	O
removeAll	B-api_mention	B-api_mention
(	O	O
in	O	O
Java	O	O
8	O	O
-	O	O
haven	O	O
'	O	O
t	O	O
checked	O	O
other	O	O
versions	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7520432	O	O
I	O	O
wanted	O	O
to	O	O
clarify	O	O
if	O	O
I	O	O
understand	O	O
this	O	O
correctly	O	O
:	O	O
#	O	O
li	O	O
=	O	O
=	O	O
-	O	O
>	O	O
is	O	O
a	O	O
reference	O	O
comparison	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
both	O	O
objects	O	O
point	O	O
to	O	O
the	O	O
same	O	O
memory	O	O
location	O	O
#	O	O
li	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
-	O	O
>	O	O
evaluates	O	O
to	O	O
the	O	O
comparison	O	O
of	O	O
values	O	O
in	O	O
the	O	O
objects	O	O
Am	O	O
I	O	O
correct	O	O
in	O	O
my	O	O
understanding	O	O
?	O	O
Question	O	O
-	O	O
18723596	O	O
,	O	O
answer	O	O
-	O	O
18723704	O	O
You	O	O
can	O	O
cast	O	O
null	O	O
to	O	O
any	O	O
reference	O	O
type	O	O
.	O	O
You	O	O
can	O	O
also	O	O
call	O	O
methods	O	O
which	O	O
handle	O	O
a	O	O
null	O	O
as	O	O
an	O	O
argument	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
,	O	O
but	O	O
you	O	O
cannot	O	O
reference	O	O
a	O	O
null	O	O
value	O	O
and	O	O
call	O	O
a	O	O
method	O	O
on	O	O
it	O	O
.	O	O
BTW	O	O
There	O	O
is	O	O
a	O	O
tricky	O	O
situation	O	O
where	O	O
it	O	O
appears	O	O
you	O	O
can	O	O
call	O	O
static	O	O
methods	O	O
on	O	O
null	O	O
values	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6667243	O	O
,	O	O
answer	O	O
-	O	O
6667354	O	O
Enum	O	O
is	O	O
just	O	O
a	O	O
little	O	O
bit	O	O
special	O	O
class	O	O
.	O	O
Enums	O	O
can	O	O
store	O	O
additional	O	O
fields	O	O
,	O	O
implement	O	O
methods	O	O
etc	O	O
.	O	O
For	O	O
example	O	O
#	O	O
pre	O	O
Now	O	O
you	O	O
can	O	O
say	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
see	O	O
output	O	O
:	O	O
a	O	O
Question	O	O
-	O	O
5982447	O	O
,	O	O
answer	O	O
-	O	O
5982478	O	O
Use	O	O
the	O	O
Set	B-api_mention	B-api_mention
#	I-api_mention	O
toArray	I-api_mention	O
(	I-api_mention	O
T	I-api_mention	O
[	I-api_mention	O
]	I-api_mention	O
)	I-api_mention	O
method	O	O
taking	O	O
a	O	O
typed	O	O
array	O	O
argument	O	O
of	O	O
the	O	O
same	O	O
size	O	O
.	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
GPXFILES1	O	O
=	O	O
myset	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
A	O	O
different	O	O
size	O	O
can	O	O
also	O	O
,	O	O
but	O	O
that	O	O
would	O	O
force	O	O
the	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
create	O	O
a	O	O
new	O	O
array	O	O
to	O	O
return	O	O
instead	O	O
of	O	O
reusing	O	O
the	O	O
provided	O	O
argument	O	O
,	O	O
which	O	O
may	O	O
end	O	O
up	O	O
to	O	O
be	O	O
less	O	O
efficient	O	O
.	O	O
See	O	O
also	O	O
the	O	O
source	O	O
code	O	O
of	O	O
AbstractCollection	B-api_mention	B-api_mention
#	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
36875991	O	O
Basically	O	O
,	O	O
=	O	O
=	O	O
compares	O	O
if	O	O
two	O	O
objects	O	O
have	O	O
the	O	O
same	O	O
reference	O	O
on	O	O
the	O	O
heap	O	O
,	O	O
so	O	O
unless	O	O
two	O	O
references	O	O
are	O	O
linked	O	O
to	O	O
the	O	O
same	O	O
object	O	O
,	O	O
this	O	O
comparison	O	O
will	O	O
be	O	O
false	O	O
.	O	B-api_mention
equals	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
method	O	O
inherited	O	O
from	O	O
Object	B-api_mention	B-api_mention
class	O	O
.	O	O
This	O	O
method	O	O
by	O	O
default	O	O
compares	O	O
if	O	O
two	O	O
objects	O	O
have	O	O
the	O	O
same	O	O
referece	O	O
.	O	O
It	O	O
means	O	O
:	O	O
object1	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
<	O	O
=	O	O
>	O	O
object1	O	O
=	O	O
=	O	O
object2	O	O
However	O	O
,	O	O
if	O	O
you	O	O
want	O	O
to	O	O
establish	O	O
equality	O	O
between	O	O
two	O	O
objects	O	O
of	O	O
the	O	O
same	O	O
class	O	O
you	O	O
should	O	O
override	O	O
this	O	O
method	O	O
.	O	O
It	O	O
is	O	O
also	O	O
very	O	O
important	O	O
to	O	O
override	O	O
the	O	O
method	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
you	O	O
have	O	O
overriden	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Implement	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
when	O	O
establishing	O	O
equality	O	O
is	O	O
part	O	O
of	O	O
the	O	O
Java	O	O
Object	B-api_mention	O
Contract	O	O
.	O	O
If	O	O
you	O	O
are	O	O
working	O	O
with	O	O
collections	O	O
,	O	O
and	O	O
you	O	O
haven	O	O
'	O	O
t	O	O
implemented	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
Strange	O	O
Bad	O	O
Things	O	O
could	O	O
happen	O	O
:	O	O
#	O	O
pre	O	O
null	O	O
will	O	O
be	O	O
printed	O	O
after	O	O
executing	O	O
the	O	O
previous	O	O
code	O	O
if	O	O
you	O	O
haven	O	O
'	O	O
t	O	O
implemented	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
32859038	O	O
,	O	O
answer	O	O
-	O	O
32863263	O	O
Don	O	O
'	O	O
t	O	O
feel	O	O
like	O	O
you	O	O
have	O	O
to	O	O
do	O	O
everything	O	O
in	O	O
/	O	O
with	O	O
the	O	O
stream	O	O
.	O	O
I	O	O
would	O	O
just	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
long	O	O
as	O	O
you	O	O
don	O	O
'	O	O
t	O	O
parallelise	O	O
the	O	O
stream	O	O
this	O	O
will	O	O
work	O	O
and	O	O
it	O	O
avoids	O	O
potentially	O	O
expensive	O	O
and	O	O
/	O	O
or	O	O
problematic	O	O
(	O	O
in	O	O
the	O	O
case	O	O
of	O	O
duplicates	O	O
)	O	O
get	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
and	O	O
indexOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
operations	O	O
.	O	O
(	O	O
You	O	O
cannot	O	O
use	O	O
a	O	O
regular	O	O
int	O	O
variable	O	O
in	O	O
place	O	O
of	O	O
the	O	O
AtomicInteger	O	B-api_mention
because	O	O
variables	O	O
used	O	O
from	O	O
outside	O	O
a	O	O
lambda	O	O
expression	O	O
must	O	O
be	O	O
effectively	O	O
final	O	O
.	O	O
Note	O	O
that	O	O
when	O	O
uncontested	O	O
(	O	O
as	O	O
in	O	O
this	O	O
case	O	O
)	O	O
,	O	O
AtomicInteger	O	B-api_mention
is	O	O
very	O	O
fast	O	O
and	O	O
won	O	O
'	O	O
t	O	O
pose	O	O
a	O	O
performance	O	O
problem	O	O
.	O	O
But	O	O
if	O	O
it	O	O
worries	O	O
you	O	O
you	O	O
can	O	O
use	O	O
a	O	O
non	O	O
-	O	O
thread	O	O
-	O	O
safe	O	O
counter	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32175175	O	O
Note	O	O
that	O	O
a	O	O
.	O	O
b	O	O
and	O	O
c	O	O
are	O	O
instances	O	O
of	O	O
primitive	O	O
wrapper	O	O
classes	O	O
(	O	O
such	O	O
as	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
,	O	O
etc	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
These	O	O
classes	O	O
are	O	O
final	O	O
and	O	O
cannot	O	O
be	O	O
extended	O	O
,	O	O
so	O	O
you	O	O
can	O	O
'	O	O
t	O	O
override	O	O
their	O	O
equals	O	O
implementation	O	O
.	O	O
Therefore	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
always	O	O
return	O	O
true	O	O
,	O	O
since	O	O
those	O	O
classes	O	O
implement	O	O
equals	O	B-api_mention
properly	O	O
.	O	O
Question	O	O
-	O	O
18410035	O	O
Being	O	O
somewhat	O	O
new	O	O
to	O	O
the	O	O
Java	O	O
language	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
familiarize	O	O
myself	O	O
with	O	O
all	O	O
the	O	O
ways	O	O
(	O	O
or	O	O
at	O	O
least	O	O
the	O	O
non	O	O
-	O	O
pathological	O	O
ones	O	O
)	O	O
that	O	O
one	O	O
might	O	O
iterate	O	O
through	O	O
a	O	O
list	O	O
(	O	O
or	O	O
perhaps	O	O
other	O	O
collections	O	O
)	O	O
and	O	O
the	O	O
advantages	O	O
or	O	O
disadvantages	O	O
of	O	O
each	O	O
.	O	O
Given	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
object	O	O
,	O	O
I	O	O
know	O	O
of	O	O
the	O	O
following	O	O
ways	O	O
to	O	O
loop	O	O
through	O	O
all	O	O
elements	O	O
:	O	O
Basic	O	O
for	O	O
loop	O	O
(	O	O
of	O	O
course	O	O
,	O	O
there	O	O
'	O	O
re	O	O
equivalent	O	O
while	O	O
/	O	O
do	O	O
while	O	O
loops	O	O
as	O	O
well	O	O
)	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
As	O	O
@	O	O
amarseillan	O	O
pointed	O	O
out	O	O
,	O	O
this	O	O
form	O	O
is	O	O
a	O	O
poor	O	O
choice	O	O
for	O	O
iterating	O	O
over	O	O
List	B-api_mention	B-api_mention
s	O	O
because	O	O
the	O	O
actual	O	O
implementation	O	O
of	O	O
the	O	O
get	O	O
method	O	O
may	O	O
not	O	O
be	O	O
as	O	O
efficient	O	O
as	O	O
when	O	O
using	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
.	O	O
For	O	O
example	O	O
,	O	O
LinkedList	B-api_mention	B-api_mention
implementations	O	O
must	O	O
traverse	O	O
all	O	O
of	O	O
the	O	O
elements	O	O
preceding	O	O
i	O	O
to	O	O
get	O	O
the	O	O
i	O	O
-	O	O
th	O	O
element	O	O
.	O	O
In	O	O
the	O	O
above	O	O
example	O	O
there	O	O
'	O	O
s	O	O
no	O	O
way	O	O
for	O	O
the	O	O
List	B-api_mention	B-api_mention
implementation	O	O
to	O	O
"	O	O
save	O	O
its	O	O
place	O	O
"	O	O
to	O	O
make	O	O
future	O	O
iterations	O	O
more	O	O
efficient	O	O
.	O	O
For	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
it	O	O
doesn	O	O
'	O	O
t	O	O
really	O	O
matter	O	O
because	O	O
the	O	O
complexity	O	O
/	O	O
cost	O	O
of	O	O
get	O	O
is	O	O
constant	O	O
time	O	O
(	O	O
O	O	O
(	O	O
1	O	O
)	O	O
)	O	O
whereas	O	O
for	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
is	O	O
it	O	O
proportional	O	O
to	O	O
the	O	O
size	O	O
of	O	O
the	O	O
list	O	O
(	O	O
O	O	O
(	O	O
n	O	O
)	O	O
)	O	O
.	O	O
For	O	O
more	O	O
information	O	O
about	O	O
the	O	O
computational	O	O
complexity	O	O
of	O	O
the	O	O
built	O	O
-	O	O
in	O	O
Collections	B-api_mention	B-api_mention
implementations	O	O
,	O	O
check	O	O
out	O	O
this	O	O
question	O	O
.	O	O
Enhanced	O	O
for	O	O
loop	O	O
(	O	O
nicely	O	O
explained	O	O
in	O	O
this	O	O
question	O	O
)	O	O
#	O	O
pre	O	O
Iterator	B-api_mention	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
Added	O	O
ListIterator	B-api_mention	B-api_mention
ListIterator	I-api_mention	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
Added	O	O
"	O	O
functional	O	O
-	O	O
style	O	O
"	O	O
solution	O	O
(	O	O
thanks	O	O
Dave	O	O
Newton	O	O
)	O	O
Functional	O	O
Java	O	O
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
can	O	O
apply	O	O
a	O	O
transformation	O	O
function	O	O
for	O	O
e	O	O
EDIT	O	O
:	O	O
Added	O	O
map	O	O
method	O	O
from	O	O
Java	O	O
8	O	O
'	O	O
s	O	O
Stream	O	B-api_mention
API	O	O
(	O	O
see	O	O
@	O	O
i	O	O
_	O	O
am	O	O
_	O	O
zero	O	O
'	O	O
s	O	O
answer	O	O
)	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
,	O	O
.	O	O
.	O	O
.	O	O
In	O	O
Java	O	O
8	O	O
collection	O	O
classes	O	O
that	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
for	O	O
example	O	O
all	O	O
List	B-api_mention	B-api_mention
s	O	O
)	O	O
now	O	O
have	O	O
a	O	O
forEach	B-api_mention	B-api_mention
method	O	O
,	O	O
which	O	O
can	O	O
be	O	O
used	O	O
instead	O	O
of	O	O
the	O	O
for	O	O
loop	O	O
statement	O	O
demonstrated	O	O
above	O	O
.	O	O
(	O	O
Here	O	O
is	O	O
another	O	O
question	O	O
that	O	O
provides	O	O
a	O	O
good	O	O
comparison	O	O
.	O	O
)	O	O
#	O	O
pre	O	O
What	O	O
other	O	O
ways	O	O
are	O	O
there	O	O
,	O	O
if	O	O
any	O	O
?	O	O
I	O	O
feel	O	O
like	O	O
this	O	O
has	O	O
got	O	O
to	O	O
be	O	O
a	O	O
duplicate	O	O
,	O	O
but	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
been	O	O
able	O	O
to	O	O
find	O	O
what	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
,	O	O
so	O	O
I	O	O
apologize	O	O
for	O	O
this	O	O
question	O	O
potentially	O	O
being	O	O
redundant	O	O
.	O	O
(	O	O
BTW	O	O
,	O	O
my	O	O
interest	O	O
does	O	O
not	O	O
stem	O	O
at	O	O
all	O	O
from	O	O
a	O	O
desire	O	O
to	O	O
optimize	O	O
performance	O	O
;	O	O
I	O	O
just	O	O
want	O	O
to	O	O
know	O	O
what	O	O
forms	O	O
are	O	O
available	O	O
to	O	O
me	O	O
as	O	O
a	O	O
developer	O	O
.	O	O
)	O	O
EDIT	O	O
:	O	O
Moved	O	O
ListIterationExample	O	O
.	O	O
java	O	O
to	O	O
a	O	O
suggested	O	O
answer	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032180	O	O
The	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
removes	O	O
all	O	O
the	O	O
elements	O	O
of	O	O
a	O	O
single	O	O
ArrayList	B-api_mention	B-api_mention
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
fast	O	O
operation	O	O
,	O	O
as	O	O
it	O	O
just	O	O
sets	O	O
some	O	O
array	O	O
elements	O	O
to	O	O
null	O	O
.	O	O
The	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
is	O	O
inherited	O	O
from	O	O
AbstractCollection	B-api_mention	B-api_mention
,	O	O
removes	O	O
all	O	O
the	O	O
elements	O	O
that	O	O
are	O	O
in	O	O
the	O	O
argument	O	O
collection	O	O
from	O	O
the	O	O
collection	O	O
you	O	O
call	O	O
the	O	O
method	O	O
on	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
relatively	O	O
slow	O	O
operation	O	O
,	O	O
as	O	O
it	O	O
has	O	O
to	O	O
search	O	O
through	O	O
one	O	O
of	O	O
the	O	O
collections	O	O
involved	O	O
.	O	O
Question	O	O
-	O	O
23699371	O	O
,	O	O
answer	O	O
-	O	O
23733628	O	O
The	O	O
easiest	O	O
way	O	O
to	O	O
implement	O	O
this	O	O
is	O	O
to	O	O
jump	O	O
on	O	O
the	O	O
sort	O	O
feature	O	O
as	O	O
it	O	O
already	O	O
provides	O	O
an	O	O
optional	O	O
Comparator	B-api_mention	B-api_mention
which	O	O
can	O	O
be	O	O
created	O	O
using	O	O
an	O	O
element	O	O
	O	O
s	O	O
property	O	O
.	O	O
Then	O	O
you	O	O
have	O	O
to	O	O
filter	O	O
duplicates	O	O
out	O	O
which	O	O
can	O	O
be	O	O
done	O	O
using	O	O
a	O	O
statefull	O	O
Predicate	B-api_mention	O
which	O	O
uses	O	O
the	O	O
fact	O	O
that	O	O
for	O	O
a	O	O
sorted	O	O
stream	O	O
all	O	O
equal	O	O
elements	O	O
are	O	O
adjacent	O	O
:	O	O
#	O	O
pre	O	O
Of	O	O
course	O	O
,	O	O
a	O	O
statefull	O	O
Predicate	B-api_mention	O
is	O	O
not	O	O
thread	O	O
-	O	O
safe	O	O
,	O	O
however	O	O
if	O	O
that	O	O
	O	O
s	O	O
your	O	O
need	O	O
you	O	O
can	O	O
move	O	O
this	O	O
logic	O	O
into	O	O
a	O	O
Collector	B-api_mention	B-api_mention
and	O	O
let	O	O
the	O	O
stream	O	O
take	O	O
care	O	O
of	O	O
the	O	O
thread	O	O
-	O	O
safety	O	O
when	O	O
using	O	O
your	O	O
Collector	B-api_mention	B-api_mention
.	O	O
This	O	O
depends	O	O
on	O	O
what	O	O
you	O	O
want	O	O
to	O	O
do	O	O
with	O	O
the	O	O
stream	O	O
of	O	O
distinct	O	O
elements	O	O
which	O	O
you	O	O
didn	O	O
	O	O
t	O	O
tell	O	O
us	O	O
in	O	O
your	O	O
question	O	O
.	O	O
Question	O	O
-	O	O
29328785	O	O
#	O	O
pre	O	O
Compile	O	O
>	O	O
javac	O	O
BigDecimalTest	O	O
.	O	O
java	O	O
Execute	O	O
>	O	O
java	O	O
BigDecimalTest	O	O
Output	O	O
#	O	O
pre	O	O
The	O	O
value	O	O
of	O	O
z	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
output	O	O
is	O	O
correct	O	O
4	O	O
.	O	O
883242e	O	O
+	O	O
888	O	O
/	O	O
7	O	O
.	O	O
115109e	O	O
+	O	O
302	O	O
=	O	O
6	O	O
.	O	O
863200e	O	O
+	O	O
585	O	O
as	O	O
is	O	O
the	O	O
value	O	O
of	O	O
y	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
notice	O	O
that	O	O
the	O	O
value	O	O
given	O	O
for	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
completely	O	O
wrong	O	O
.	O	O
Why	O	O
is	O	O
this	O	O
?	O	O
Strangely	O	O
,	O	O
if	O	O
the	O	O
scale	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
desired	O	O
decimal	O	O
places	O	O
)	O	O
of	O	O
the	O	O
result	O	O
of	O	O
the	O	O
division	O	O
is	O	O
changed	O	O
BigDecimal	B-api_mention	B-api_mention
z	O	O
=	O	O
x	O	O
.	B-api_mention	B-api_mention
divide	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
then	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
produce	O	O
the	O	O
correct	O	O
value	O	O
for	O	O
x	O	O
.	O	O
Or	O	O
,	O	O
if	O	O
the	O	O
operands	O	O
are	O	O
swapped	O	O
BigDecimal	B-api_mention	B-api_mention
z	O	O
=	O	O
y	O	O
.	B-api_mention	B-api_mention
divide	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
then	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
also	O	O
then	O	O
produce	O	O
the	O	O
correct	O	O
value	O	O
.	O	O
Or	O	O
,	O	O
if	O	O
the	O	O
exponent	O	O
of	O	O
x	O	O
is	O	O
changed	O	O
from	O	O
e	O	O
+	O	O
888	O	O
to	O	O
e	O	O
.	O	O
g	O	O
.	O	O
e	O	O
+	O	O
878	O	O
then	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
correct	O	O
.	O	O
Or	O	O
,	O	O
if	O	O
another	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
is	O	O
added	O	O
above	O	O
the	O	O
divide	O	O
operation	O	O
,	O	O
then	O	O
both	O	O
x	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
calls	O	O
will	O	O
produce	O	O
the	O	O
correct	O	O
value	O	O
!	O	O
On	O	O
the	O	O
machine	O	O
I	O	O
'	O	O
m	O	O
testing	O	O
this	O	O
,	O	O
Windows	O	O
7	O	O
64	O	O
bit	O	O
,	O	O
the	O	O
behaviour	O	O
is	O	O
the	O	O
same	O	O
using	O	O
java	O	O
7	O	O
and	O	O
8	O	O
,	O	O
both	O	O
32bit	O	O
and	O	O
64	O	O
bit	O	O
versions	O	O
,	O	O
but	O	O
testing	O	O
online	O	O
at	O	O
#	O	O
a	O	O
produces	O	O
different	O	O
results	O	O
for	O	O
java	O	O
7	O	O
and	O	O
java	O	O
8	O	O
.	O	O
Using	O	O
java	O	O
7	O	O
,	O	O
the	O	O
value	O	O
of	O	O
x	O	O
is	O	O
given	O	O
correctly	O	O
:	O	O
#	O	O
a	O	O
,	O	O
but	O	O
using	O	O
java	O	O
8	O	O
its	O	O
value	O	O
is	O	O
incorrect	O	O
:	O	O
#	O	O
a	O	O
.	O	O
Also	O	O
,	O	O
this	O	O
behaviour	O	O
is	O	O
not	O	O
unique	O	O
to	O	O
this	O	O
particular	O	O
value	O	O
of	O	O
x	O	O
,	O	O
as	O	O
calling	O	O
toString	B-api_mention	B-api_mention
on	O	O
other	O	O
BigDecimals	O	B-api_mention
with	O	O
more	O	O
than	O	O
about	O	O
1500	O	O
digits	O	O
after	O	O
passing	O	O
them	O	O
as	O	O
the	O	O
first	O	O
operand	O	O
to	O	O
a	O	O
divide	O	O
operation	O	O
will	O	O
also	O	O
produce	O	O
incorrect	O	O
values	O	O
.	O	O
What	O	O
is	O	O
the	O	O
explanation	O	O
for	O	O
this	O	O
?	O	O
The	O	O
divide	O	O
operation	O	O
seems	O	O
to	O	O
be	O	O
mutating	O	O
the	O	O
value	O	O
produced	O	O
by	O	O
subsequent	O	O
toString	B-api_mention	B-api_mention
calls	O	O
on	O	O
its	O	O
operands	O	O
.	O	O
Does	O	O
this	O	O
happen	O	O
on	O	O
your	O	O
platform	O	O
?	O	O
Edit	O	O
:	O	O
The	O	O
issue	O	O
seems	O	O
to	O	O
be	O	O
with	O	O
the	O	O
java	O	O
8	O	O
runtime	O	O
only	O	O
,	O	O
as	O	O
the	O	O
above	O	O
program	O	O
compiled	O	O
with	O	O
java	O	O
7	O	O
produces	O	O
correct	O	O
output	O	O
when	O	O
executed	O	O
with	O	O
the	O	O
java	O	O
7	O	O
runtime	O	O
,	O	O
but	O	O
incorrect	O	O
output	O	O
when	O	O
executed	O	O
with	O	O
the	O	O
java	O	O
8	O	O
runtime	O	O
.	O	O
Edit	O	O
:	O	O
I	O	O
'	O	O
ve	O	O
tested	O	O
with	O	O
the	O	O
early	O	O
access	O	O
jre1	O	O
.	O	O
8	O	O
.	O	O
0	O	O
_	O	O
60	O	O
and	O	O
the	O	O
bug	O	O
does	O	O
not	O	O
appear	O	O
,	O	O
and	O	O
according	O	O
to	O	O
Marco13	O	O
'	O	O
s	O	O
answer	O	O
it	O	O
was	O	O
fixed	O	O
in	O	O
build	O	O
51	O	O
.	O	O
The	O	O
Oracle	O	O
JDK	O	O
8	O	O
product	O	O
binaries	O	O
are	O	O
only	O	O
at	O	O
update	O	O
40	O	O
though	O	O
so	O	O
it	O	O
may	O	O
be	O	O
some	O	O
time	O	O
before	O	O
the	O	O
fixed	O	O
versions	O	O
are	O	O
widely	O	O
used	O	O
.	O	O
Question	O	O
-	O	O
16232833	O	O
,	O	O
answer	O	O
-	O	O
16250729	O	O
change	O	O
your	O	O
return	O	O
type	O	O
to	O	O
ResponseEntity	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
then	O	O
you	O	O
can	O	O
use	O	O
below	O	O
for	O	O
400	O	O
return	O	O
new	O	O
ResponseEntity	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
for	O	O
correct	O	O
request	O	O
return	O	O
new	O	O
ResponseEntity	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
UPDATE	O	O
1	O	O
after	O	O
spring	O	O
4	O	O
.	O	O
1	O	O
there	O	O
are	O	O
helper	O	O
methods	O	O
in	O	O
ResponseEntity	B-api_mention	O
could	O	O
be	O	O
used	O	O
as	O	O
return	O	O
ResponseEntity	B-api_mention	B-api_mention
.	I-api_mention	O
status	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
.	I-api_mention	O
body	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
;	O	O
and	O	O
return	O	O
ResponseEntity	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ok	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489376	O	O
String	B-api_mention	B-api_mention
gets	O	O
special	O	O
treatment	O	O
in	O	O
the	O	O
JLS	O	O
:	O	O
it	O	O
'	O	O
s	O	O
one	O	O
of	O	O
the	O	O
two	O	O
non	O	O
-	O	O
primitive	O	O
types	O	O
for	O	O
which	O	O
literals	O	O
exist	O	O
(	O	O
the	O	O
other	O	O
is	O	O
Class	B-api_mention	O
)	O	O
*	O	O
.	O	O
From	O	O
the	O	O
JLS	O	O
:	O	O
#	O	O
blockquote	O	O
*	O	O
well	O	O
,	O	O
there	O	O
'	O	O
s	O	O
also	O	O
the	O	O
"	O	O
null	O	O
type	O	O
"	O	O
with	O	O
it	O	O
'	O	O
s	O	O
"	O	O
null	O	O
literal	O	O
"	O	O
null	O	O
,	O	O
but	O	O
most	O	O
people	O	O
don	O	O
'	O	O
t	O	O
think	O	O
of	O	O
the	O	O
"	O	O
null	O	O
type	O	O
"	O	O
as	O	O
a	O	O
proper	O	O
type	O	O
.	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
18481387	O	O
If	O	O
you	O	O
code	O	O
in	O	O
Android	O	O
,	O	O
there	O	O
is	O	O
SparseArray	B-api_mention	O
,	O	O
mapping	O	O
integer	O	O
to	O	O
object	O	O
.	O	O
Question	O	O
-	O	O
32294367	O	O
,	O	O
answer	O	O
-	O	O
32294898	O	O
#	O	O
blockquote	O	O
Let	O	O
me	O	O
ask	O	O
a	O	O
counterquestion	O	O
:	O	O
why	O	O
do	O	O
you	O	O
think	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stop	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
has	O	O
been	O	O
deprecated	O	O
for	O	O
more	O	O
than	O	O
a	O	O
decade	O	O
?	O	O
The	O	O
reason	O	O
why	O	O
is	O	O
precisely	O	O
the	O	O
negation	O	O
of	O	O
your	O	O
statement	O	O
above	O	O
.	O	O
To	O	O
give	O	O
two	O	O
specific	O	O
examples	O	O
:	O	O
you	O	O
stop	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
a	O	O
thread	O	O
while	O	O
it	O	O
'	O	O
s	O	O
executing	O	O
something	O	O
as	O	O
innocuous	O	O
-	O	O
sounding	O	O
as	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Result	O	O
:	O	O
those	O	O
two	O	O
features	O	O
are	O	O
now	O	O
broken	O	O
for	O	O
the	O	O
entire	O	O
JVM	O	O
.	O	O
The	O	O
same	O	O
pertains	O	O
to	O	O
any	O	O
other	O	O
synchronized	O	O
code	O	O
your	O	O
application	O	O
may	O	O
execute	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
application	O	O
may	O	O
theoretically	O	O
be	O	O
coded	O	O
such	O	O
that	O	O
absolutely	O	O
no	O	O
shared	O	O
resource	O	O
protected	O	O
by	O	O
locks	O	O
is	O	O
ever	O	O
used	O	O
;	O	O
however	O	O
that	O	O
will	O	O
only	O	O
help	O	O
to	O	O
point	O	O
out	O	O
the	O	O
exact	O	O
extent	O	O
to	O	O
which	O	O
Java	O	O
threads	O	O
are	O	O
codependent	O	O
.	O	O
And	O	O
the	O	O
"	O	O
independence	O	O
"	O	O
achieved	O	O
will	O	O
only	O	O
pertain	O	O
to	O	O
the	O	O
request	O	O
-	O	O
processing	O	O
threads	O	O
,	O	O
not	O	O
to	O	O
all	O	O
threads	O	O
in	O	O
such	O	O
an	O	O
application	O	O
.	O	O
Question	O	O
-	O	O
24651403	O	O
,	O	O
answer	O	O
-	O	O
24651855	O	O
OK	O	O
,	O	O
first	O	O
of	O	O
all	O	O
,	O	O
your	O	O
setExits	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
will	O	O
not	O	O
work	O	O
as	O	O
intended	O	O
,	O	O
chained	O	O
if	O	O
-	O	O
elseif	O	O
will	O	O
maximally	O	O
execute	O	O
1	O	O
branch	O	O
of	O	O
code	O	O
,	O	O
for	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Even	O	O
if	O	O
e	O	O
contains	O	O
both	O	O
N	O	O
and	O	O
W	O	O
,	O	O
only	O	O
bexits	O	O
[	O	O
0	O	O
]	O	O
will	O	O
be	O	O
set	O	O
.	O	O
Also	O	O
this	O	O
method	O	O
will	O	O
only	O	O
add	O	O
exits	O	O
(	O	O
for	O	O
example	O	O
calling	O	O
setExits	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
not	O	O
delete	O	O
any	O	O
existing	O	O
exits	O	O
.	O	O
I	O	O
would	O	O
change	O	O
that	O	O
method	O	O
to	O	O
:	O	O
#	O	O
pre	O	O
Also	O	O
,	O	O
i	O	O
definetly	O	O
wouldn	O	O
'	O	O
t	O	O
remember	O	O
that	O	O
north	O	O
is	O	O
on	O	O
index	O	O
0	O	O
,	O	O
west	O	O
in	O	O
on	O	O
1	O	O
,	O	O
.	O	O
.	O	O
.	O	O
so	O	O
a	O	O
common	O	O
practice	O	O
is	O	O
to	O	O
name	O	O
your	O	O
indexes	O	O
using	O	O
final	O	O
static	O	O
constants	O	O
:	O	O
#	O	O
pre	O	O
Then	O	O
you	O	O
can	O	O
write	O	O
in	O	O
your	O	O
setExits	B-api_mention	O
method	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
much	O	O
more	O	O
readible	O	O
)	O	O
Finally	O	O
,	O	O
if	O	O
you	O	O
want	O	O
your	O	O
code	O	O
even	O	O
more	O	O
well	O	O
-	O	O
arranged	O	O
,	O	O
you	O	O
can	O	O
make	O	O
a	O	O
Exits	B-api_mention	O
class	O	O
representing	O	O
avaliable	O	O
exits	O	O
,	O	O
and	O	O
backed	O	O
by	O	O
boolean	O	O
array	O	O
.	O	O
Then	O	O
on	O	O
place	O	O
where	O	O
you	O	O
create	O	O
your	O	O
String	B-api_mention	B-api_mention
,	O	O
you	O	O
could	O	O
create	O	O
this	O	O
class	O	O
instead	O	O
and	O	O
save	O	O
yourself	O	O
work	O	O
with	O	O
generating	O	O
and	O	O
then	O	O
parsing	O	O
a	O	O
string	O	O
.	O	O
EDIT	O	O
:	O	O
as	O	O
@	O	O
gexicide	O	O
answers	O	O
,	O	O
there	O	O
is	O	O
a	O	O
really	O	O
handy	O	O
class	O	O
EnumSet	B-api_mention	B-api_mention
which	O	O
would	O	O
be	O	O
probably	O	O
better	O	O
for	O	O
representing	O	O
the	O	O
exits	O	O
than	O	O
bollean	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
5694385	O	O
,	O	O
answer	O	O
-	O	O
5694464	O	O
Rather	O	O
than	O	O
spoon	O	O
-	O	O
feed	O	O
you	O	O
code	O	O
,	O	O
here	O	O
'	O	O
s	O	O
how	O	O
to	O	O
look	O	O
in	O	O
the	O	O
documentation	O	O
.	O	O
First	O	O
,	O	O
you	O	O
'	O	O
re	O	O
dealing	O	O
with	O	O
IO	O	O
,	O	O
so	O	O
look	O	O
in	O	O
the	O	O
java	O	O
.	O	O
io	O	O
package	O	O
.	O	O
There	O	O
are	O	O
two	O	O
classes	O	O
that	O	O
look	O	O
interesting	O	O
:	O	O
FileFilter	B-api_mention	B-api_mention
and	O	O
FileNameFilter	B-api_mention	B-api_mention
.	O	O
When	O	O
I	O	O
clicked	O	O
on	O	O
the	O	O
first	O	O
,	O	O
it	O	O
showed	O	O
me	O	O
that	O	O
there	O	O
was	O	O
a	O	O
a	O	O
listFiles	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
the	O	O
File	B-api_mention	B-api_mention
class	O	O
.	O	O
And	O	O
the	O	O
documentation	O	O
for	O	O
that	O	O
method	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
Scrolling	O	O
up	O	O
in	O	O
the	O	O
File	O	B-api_mention
JavaDoc	O	O
,	O	O
I	O	O
see	O	O
the	O	O
constructors	O	O
.	O	O
And	O	O
that	O	O
'	O	O
s	O	O
really	O	O
all	O	O
I	O	O
need	O	O
to	O	O
be	O	O
able	O	O
to	O	O
create	O	O
a	O	O
File	O	B-api_mention
instance	O	O
and	O	O
call	O	O
listFiles	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
it	O	O
.	O	O
Scrolling	O	O
still	O	O
further	O	O
,	O	O
I	O	O
can	O	O
see	O	O
some	O	O
information	O	O
about	O	O
how	O	O
files	O	O
are	O	O
named	O	O
in	O	O
different	O	O
operating	O	O
systems	O	O
.	O	O
Question	O	O
-	O	O
27504925	O	O
,	O	O
answer	O	O
-	O	O
27505121	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
point	O	O
out	O	O
this	O	O
article	O	O
.	O	O
It	O	O
seems	O	O
as	O	O
though	O	O
arrays	O	O
and	O	O
objects	O	O
follow	O	O
different	O	O
opcodes	O	O
.	O	O
I	O	O
can	O	O
'	O	O
t	O	O
honestly	O	O
summarize	O	O
it	O	O
more	O	O
than	O	O
that	O	O
however	O	O
it	O	O
seems	O	O
,	O	O
arrays	O	O
are	O	O
simply	O	O
not	O	O
treated	O	O
as	O	O
Objects	B-api_mention	O
like	O	O
we	O	O
'	O	O
re	O	O
normally	O	O
used	O	O
to	O	O
so	O	O
they	O	O
don	O	O
'	O	O
t	O	O
inherit	O	O
Object	B-api_mention	B-api_mention
methods	O	O
.	O	O
Full	O	O
credits	O	O
to	O	O
the	O	O
author	O	O
of	O	O
that	O	O
post	O	O
as	O	O
it	O	O
'	O	O
s	O	O
a	O	O
very	O	O
interesting	O	O
read	O	O
,	O	O
both	O	O
short	O	O
&	O	O
detailed	O	O
.	O	O
Upon	O	O
further	O	O
digging	O	O
into	O	O
the	O	O
topic	O	O
via	O	O
multiple	O	O
sources	O	O
I	O	O
'	O	O
ve	O	O
decided	O	O
to	O	O
give	O	O
a	O	O
more	O	O
elaborate	O	O
version	O	O
of	O	O
my	O	O
previous	O	O
answer	O	O
.	O	O
The	O	O
first	O	O
thing	O	O
to	O	O
note	O	O
that	O	O
instantiation	O	O
of	O	O
Objects	B-api_mention	O
and	O	O
Arrays	B-api_mention	B-api_mention
are	O	O
very	O	O
different	O	O
within	O	O
the	O	O
JVM	O	O
,	O	O
their	O	O
follow	O	O
their	O	O
respective	O	O
bytecode	O	O
.	O	O
Object	O	O
:	O	O
Object	B-api_mention	B-api_mention
instantiation	O	O
follows	O	O
a	O	O
simple	O	O
Opcode	O	O
new	O	O
which	O	O
is	O	O
a	O	O
combination	O	O
of	O	O
two	O	O
operands	O	O
-	O	O
indexbyte1	O	O
&	O	O
indexbyte2	O	O
.	O	O
Once	O	O
instantiated	O	O
the	O	O
JVM	O	O
pushes	O	O
the	O	O
reference	O	O
to	O	O
this	O	O
object	O	O
onto	O	O
the	O	O
stack	O	O
.	O	O
This	O	O
occurs	O	O
for	O	O
all	O	O
objects	O	O
irrespective	O	O
of	O	O
their	O	O
types	O	O
.	O	O
Arrays	O	O
:	O	O
Array	B-api_mention	O
Opcodes	O	O
(	O	O
regarding	O	O
instantiation	O	O
of	O	O
an	O	O
array	O	O
)	O	O
however	O	O
are	O	O
divided	O	O
into	O	O
three	O	O
different	O	O
codes	O	O
.	O	O
#	O	O
blockquote	O	O
newarray	O	O
opcode	O	O
is	O	O
used	O	O
when	O	O
creating	O	O
arrays	O	O
that	O	O
involve	O	O
primitive	O	O
datatypes	O	O
(	O	O
byte	O	O
short	O	O
char	O	O
int	O	O
long	O	O
float	O	O
double	O	O
boolean	O	O
)	O	O
rather	O	O
than	O	O
object	O	O
references	O	O
.	O	O
#	O	O
blockquote	O	O
anewarray	O	O
opcode	O	O
is	O	O
used	O	O
when	O	O
creating	O	O
arrays	O	O
of	O	O
object	O	O
references	O	O
#	O	O
blockquote	O	O
multianewarray	O	O
instruction	O	O
is	O	O
used	O	O
when	O	O
allocating	O	O
multi	O	O
-	O	O
dimensional	O	O
arrays	O	O
Object	B-api_mention	B-api_mention
can	O	O
be	O	O
a	O	O
class	O	O
instance	O	O
or	O	O
an	O	O
array	O	O
.	O	O
Take	O	O
from	O	O
Oracle	O	O
Docs	O	O
#	O	O
blockquote	O	O
BUT	O	O
#	O	O
blockquote	O	O
This	O	O
goes	O	O
hand	O	O
in	O	O
hand	O	O
with	O	O
the	O	O
information	O	O
regarding	O	O
the	O	O
opcodes	O	O
.	O	O
Arrays	O	O
are	O	O
simply	O	O
not	O	O
developed	O	O
to	O	O
be	O	O
class	O	O
interfaces	O	O
but	O	O
are	O	O
instead	O	O
explicitly	O	O
created	O	O
by	O	O
array	O	O
creation	O	O
expression	O	O
thus	O	O
naturally	O	O
wouldn	O	O
'	O	O
t	O	O
implicitly	O	O
be	O	O
able	O	O
to	O	O
inherit	O	O
and	O	O
/	O	O
or	O	O
override	O	O
Object	B-api_mention	B-api_mention
.	O	O
As	O	O
we	O	O
have	O	O
seen	O	O
,	O	O
it	O	O
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
the	O	O
fact	O	O
that	O	O
arrays	O	O
may	O	O
hold	O	O
primitive	O	O
datatypes	O	O
.	O	O
After	O	O
giving	O	O
it	O	O
some	O	O
thought	O	O
though	O	O
,	O	O
it	O	O
isn	O	O
'	O	O
t	O	O
very	O	O
common	O	O
to	O	O
come	O	O
across	O	O
situations	O	O
where	O	O
one	O	O
might	O	O
want	O	O
to	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
however	O	O
was	O	O
still	O	O
a	O	O
very	O	O
interesting	O	O
question	O	O
to	O	O
try	O	O
and	O	O
answer	O	O
.	O	O
Resources	O	O
:	O	O
Oracle	O	O
-	O	O
Docs	O	O
chapter	O	O
4	O	O
.	O	O
3	O	O
.	O	O
1	O	O
Oracle	O	O
-	O	O
Docs	O	O
chapter	O	O
15	O	O
.	O	O
10	O	O
.	O	O
1	O	O
Artima	O	O
-	O	O
UnderTheHood	O	O
Question	O	O
-	O	O
27845223	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
at	O	O
a	O	O
piece	O	O
of	O	O
Java	O	O
code	O	O
right	O	O
now	O	O
,	O	O
and	O	O
it	O	O
takes	O	O
a	O	O
path	O	O
as	O	O
a	O	O
String	B-api_mention	B-api_mention
and	O	O
gets	O	O
its	O	O
URL	O	O
using	O	O
URL	B-api_mention	O
resource	O	O
=	O	O
ClassLoader	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getSystemClassLoader	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
,	O	O
then	O	O
calls	O	O
String	B-api_mention	B-api_mention
path	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
getPath	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
finally	O	O
executes	O	O
new	O	O
File	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
Oh	O	O
,	O	O
and	O	O
there	O	O
are	O	O
also	O	O
calls	O	O
to	O	O
URL	B-api_mention	O
url	O	O
=	O	O
resource	O	O
.	B-api_mention	O
toURI	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
;	O	O
and	O	O
String	B-api_mention	B-api_mention
file	O	O
=	O	O
resource	O	O
.	B-api_mention	B-api_mention
getFile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
'	O	O
m	O	O
totally	O	O
confused	O	O
right	O	O
now	O	O
-	O	O
mostly	O	O
because	O	O
of	O	O
the	O	O
terminology	O	O
,	O	O
I	O	O
guess	O	O
.	O	O
Can	O	O
someone	O	O
please	O	O
walk	O	O
me	O	O
through	O	O
the	O	O
differences	O	O
,	O	O
or	O	O
provide	O	O
a	O	O
few	O	O
links	O	O
to	O	O
Dummy	O	O
-	O	O
proof	O	O
material	O	O
?	O	O
Especially	O	O
URI	B-api_mention	O
to	O	O
URL	B-api_mention	O
and	O	O
Resource	B-api_mention	B-api_mention
to	O	O
File	B-api_mention	B-api_mention
?	O	O
To	O	O
me	O	O
,	O	O
it	O	O
feels	O	O
like	O	O
they	O	O
should	O	O
be	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
respectively	O	O
.	O	O
.	O	O
.	O	O
The	O	O
difference	O	O
between	O	O
getFile	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getPath	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
explained	O	O
here	O	O
:	O	O
What	O	O
'	O	O
s	O	O
the	O	O
difference	O	O
between	O	O
url	O	O
.	B-api_mention	B-api_mention
getFile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getpath	B-api_mention	O
(	I-api_mention	O
)	I-api_mention	O
?	O	O
(	O	O
Interestingly	O	O
they	O	O
both	O	O
seem	O	O
to	O	O
return	O	O
Strings	O	O
,	O	O
which	O	O
probably	O	O
adds	O	O
a	O	O
whole	O	O
lot	O	O
to	O	O
my	O	O
state	O	O
of	O	O
mind	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Now	O	O
,	O	O
if	O	O
I	O	O
have	O	O
a	O	O
locator	O	O
that	O	O
references	O	O
a	O	O
class	O	O
or	O	O
package	O	O
in	O	O
a	O	O
jar	O	O
file	O	O
,	O	O
will	O	O
those	O	O
two	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
path	O	O
an	O	O
file	O	O
strings	O	O
)	O	O
differ	O	O
?	O	O
resource	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
give	O	O
you	O	O
jar	O	O
:	O	O
file	O	O
:	O	O
/	O	O
C	O	O
:	O	O
/	O	O
path	O	O
/	O	O
to	O	O
/	O	O
my	O	O
.	O	O
jar	O	O
!	O	O
/	O	O
com	O	O
/	O	O
example	O	O
/	O	O
,	O	O
after	O	O
all	O	O
(	O	O
note	O	O
the	O	O
exclamation	O	O
mark	O	O
)	O	O
.	O	O
Is	O	O
the	O	O
difference	O	O
between	O	O
URI	B-api_mention	O
and	O	O
URL	B-api_mention	O
in	O	O
Java	O	O
that	O	O
the	O	O
former	O	O
doesn	O	O
'	O	O
t	O	O
encode	O	O
spaces	O	O
?	O	O
Cf	O	O
.	O	O
Files	O	O
,	O	O
URIs	O	O
,	O	O
and	O	O
URLs	O	O
conflicting	O	O
in	O	O
Java	O	O
(	O	O
This	O	O
answer	O	O
explains	O	O
the	O	O
general	O	O
,	O	O
conceptual	O	O
difference	O	O
between	O	O
the	O	O
two	O	O
terms	O	O
fairly	O	O
well	O	O
:	O	O
URIs	O	O
identify	O	O
and	O	O
URLs	O	O
locate	O	O
;	O	O
)	O	O
Lastly	O	O
-	O	O
and	O	O
most	O	O
importantly	O	O
-	O	O
why	O	O
do	O	O
I	O	O
need	O	O
File	B-api_mention	B-api_mention
object	O	O
;	O	O
why	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
Resource	B-api_mention	B-api_mention
(	O	O
URL	B-api_mention	O
)	O	O
enough	O	O
?	O	O
(	O	O
And	O	O
is	O	O
there	O	O
a	O	O
Resource	B-api_mention	B-api_mention
object	O	O
?	O	O
)	O	O
Sorry	O	O
if	O	O
this	O	O
question	O	O
is	O	O
a	O	O
bit	O	O
unorganized	O	O
;	O	O
it	O	O
just	O	O
reflects	O	O
the	O	O
confusion	O	O
I	O	O
have	O	O
.	O	O
.	O	O
.	O	O
:	O	O
)	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14847046	O	O
Most	O	O
of	O	O
the	O	O
time	O	O
we	O	O
use	O	O
a	O	O
constructor	O	O
to	O	O
create	O	O
a	O	O
new	O	O
empty	O	O
map	O	O
.	O	O
But	O	O
the	O	O
Collections	B-api_mention	B-api_mention
methods	O	O
offer	O	O
a	O	O
couple	O	O
of	O	O
advantages	O	O
to	O	O
create	O	O
an	O	O
empty	O	O
map	O	O
using	O	O
static	O	O
method	O	O
java	B-api_mention	O
.	I-api_mention	O
util	I-api_mention	O
.	I-api_mention	O
Collections	I-api_mention	B-api_mention
.	I-api_mention	I-api_mention
emptyMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
blockquote	O	O
Question	O	O
-	O	O
20918650	O	O
,	O	O
answer	O	O
-	O	O
20918709	O	O
A	O	O
subsequent	O	O
post	O	O
by	O	O
the	O	O
same	O	O
user	O	O
in	O	O
the	O	O
same	O	O
conversation	O	O
:	O	O
#	O	O
blockquote	O	O
(	O	O
This	O	O
was	O	O
in	O	O
response	O	O
to	O	O
a	O	O
statement	O	O
by	O	O
another	O	O
user	O	O
,	O	O
namely	O	O
that	O	O
"	O	O
it	O	O
seems	O	O
in	O	O
some	O	O
situations	O	O
'	O	O
new	O	O
T	B-api_mention	O
'	O	O
would	O	O
be	O	O
better	O	O
"	O	O
,	O	O
the	O	O
idea	O	O
being	O	O
that	O	O
new	O	O
T	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
impossible	O	O
due	O	O
to	O	O
type	O	O
erasure	O	O
.	O	O
(	O	O
This	O	O
is	O	O
debatable	O	O
	O	O
even	O	O
if	O	O
T	B-api_mention	O
were	O	O
available	O	O
at	O	O
runtime	O	O
,	O	O
it	O	O
could	O	O
be	O	O
an	O	O
abstract	O	O
class	O	O
or	O	O
interface	O	O
,	O	O
or	O	O
it	O	O
could	O	O
be	O	O
Void	O	O
,	O	O
or	O	O
it	O	O
could	O	O
lack	O	O
a	O	O
no	O	O
-	O	O
arg	O	O
constructor	O	O
,	O	O
or	O	O
its	O	O
no	O	O
-	O	O
arg	O	O
constructor	O	O
could	O	O
be	O	O
private	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
because	O	O
it	O	O
'	O	O
s	O	O
supposed	O	O
to	O	O
be	O	O
a	O	O
singleton	O	O
class	O	O
)	O	O
,	O	O
or	O	O
its	O	O
no	O	O
-	O	O
arg	O	O
constructor	O	O
could	O	O
specify	O	O
a	O	O
checked	O	O
exception	O	O
that	O	O
the	O	O
generic	O	O
method	O	O
does	O	O
not	O	O
catch	O	O
or	O	O
specify	O	O
	O	O
but	O	O
that	O	O
was	O	O
the	O	O
premise	O	O
.	O	O
Regardless	O	O
,	O	O
it	O	O
'	O	O
s	O	O
true	O	O
that	O	O
without	O	O
erasure	O	O
you	O	O
could	O	O
at	O	O
least	O	O
write	O	O
T	B-api_mention	O
.	I-api_mention	O
class	I-api_mention	O
.	I-api_mention	B-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
handles	O	O
those	O	O
issues	O	O
.	O	O
)	O	O
)	O	O
This	O	O
view	O	O
,	O	O
that	O	O
types	O	O
are	O	O
isomorphic	O	O
to	O	O
propositions	O	O
,	O	O
suggests	O	O
that	O	O
the	O	O
user	O	O
has	O	O
a	O	O
background	O	O
in	O	O
formal	O	O
type	O	O
theory	O	O
.	O	O
(	O	O
S	O	O
)	O	O
he	O	O
very	O	O
likely	O	O
does	O	O
not	O	O
like	O	O
"	O	O
dynamic	O	O
types	O	O
"	O	O
or	O	O
"	O	O
runtime	O	O
-	O	O
types	O	O
"	O	O
and	O	O
would	O	O
prefer	O	O
a	O	O
Java	O	O
without	O	O
downcasts	O	O
and	O	O
instanceof	B-api_mention	O
and	O	O
reflection	O	O
and	O	O
so	O	O
on	O	O
.	O	O
(	O	O
Think	O	O
of	O	O
a	O	O
language	O	O
like	O	O
Standard	O	O
ML	O	O
,	O	O
which	O	O
has	O	O
a	O	O
very	O	O
rich	O	O
(	O	O
static	O	O
)	O	O
type	O	O
system	O	O
and	O	O
whose	O	O
dynamic	O	O
semantics	O	O
do	O	O
not	O	O
depend	O	O
on	O	O
any	O	O
type	O	O
information	O	O
whatsoever	O	O
.	O	O
)	O	O
It	O	O
'	O	O
s	O	O
worth	O	O
keeping	O	O
in	O	O
mind	O	O
,	O	O
by	O	O
the	O	O
way	O	O
,	O	O
that	O	O
the	O	O
user	O	O
is	O	O
trolling	O	O
:	O	O
while	O	O
(	O	O
s	O	O
)	O	O
he	O	O
likely	O	O
sincerely	O	O
prefers	O	O
(	O	O
statically	O	O
)	O	O
typed	O	O
languages	O	O
,	O	O
(	O	O
s	O	O
)	O	O
he	O	O
is	O	O
not	O	O
sincerely	O	O
trying	O	O
to	O	O
persuade	O	O
others	O	O
of	O	O
that	O	O
view	O	O
.	O	O
Rather	O	O
,	O	O
the	O	O
main	O	O
purpose	O	O
of	O	O
the	O	O
original	O	O
tweet	O	O
was	O	O
to	O	O
mock	O	O
those	O	O
who	O	O
disagree	O	O
,	O	O
and	O	O
after	O	O
some	O	O
of	O	O
those	O	O
disagree	O	O
-	O	O
ers	O	O
chimed	O	O
in	O	O
,	O	O
the	O	O
user	O	O
posted	O	O
follow	O	O
-	O	O
up	O	O
tweets	O	O
such	O	O
as	O	O
"	O	O
the	O	O
reason	O	O
java	O	O
has	O	O
type	O	O
erasure	O	O
is	O	O
that	O	O
Wadler	O	O
et	O	O
al	O	O
know	O	O
what	O	O
they	O	O
are	O	O
doing	O	O
,	O	O
unlike	O	O
users	O	O
of	O	O
java	O	O
"	O	O
.	O	O
Unfortunately	O	O
,	O	O
this	O	O
makes	O	O
it	O	O
hard	O	O
to	O	O
find	O	O
out	O	O
what	O	O
(	O	O
s	O	O
)	O	O
he	O	O
'	O	O
s	O	O
actually	O	O
thinking	O	O
;	O	O
but	O	O
fortunately	O	O
,	O	O
it	O	O
also	O	O
likely	O	O
means	O	O
that	O	O
it	O	O
'	O	O
s	O	O
not	O	O
very	O	O
important	O	O
to	O	O
do	O	O
so	O	O
.	O	O
People	O	O
with	O	O
actual	O	O
depth	O	O
to	O	O
their	O	O
views	O	O
don	O	O
'	O	O
t	O	O
generally	O	O
resort	O	O
to	O	O
trolls	O	O
that	O	O
are	O	O
quite	O	O
this	O	O
content	O	O
-	O	O
free	O	O
.	O	O
Question	O	O
-	O	O
16232833	O	O
I	O	O
'	O	O
m	O	O
using	O	O
Spring	O	O
MVC	O	O
for	O	O
a	O	O
simple	O	O
JSON	O	O
API	O	O
,	O	O
with	O	O
@	O	O
ResponseBody	O	O
based	O	O
approach	O	O
like	O	O
the	O	O
following	O	O
.	O	O
(	O	O
I	O	O
already	O	O
have	O	O
a	O	O
service	O	O
layer	O	O
producing	O	O
JSON	O	O
directly	O	O
.	O	O
)	O	O
#	O	O
pre	O	O
Question	O	O
is	O	O
,	O	O
in	O	O
the	O	O
given	O	O
scenario	O	O
,	O	O
what	O	O
is	O	O
the	O	O
simplest	O	O
,	O	O
cleanest	O	O
way	O	O
to	O	O
respond	O	O
with	O	O
a	O	O
HTTP	O	O
400	O	O
error	O	O
?	O	O
I	O	O
did	O	O
come	O	O
across	O	O
approaches	O	O
like	O	O
:	O	O
return	O	O
new	O	O
ResponseEntity	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
.	O	O
.	O	O
.	O	O
but	O	O
I	O	O
can	O	O
'	O	O
t	O	O
use	O	O
it	O	O
here	O	O
since	O	O
my	O	O
method	O	O
'	O	O
s	O	O
return	O	O
type	O	O
is	O	O
String	B-api_mention	B-api_mention
,	O	O
not	O	O
ResponseEntity	B-api_mention	O
.	O	O
Question	O	O
-	O	O
22694884	O	O
,	O	O
answer	O	O
-	O	O
39385411	O	O
As	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
uses	O	O
a	O	O
throwing	O	O
merger	O	O
to	O	O
handle	O	O
multiple	O	O
entries	O	O
with	O	O
the	O	O
same	O	O
key	O	O
it	O	O
is	O	O
easy	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
will	O	O
get	O	O
a	O	O
IllegalStateException	B-api_mention	B-api_mention
for	O	O
duplicate	O	O
keys	O	O
.	O	O
But	O	O
at	O	O
the	O	O
end	O	O
I	O	O
am	O	O
not	O	O
sure	O	O
if	O	O
the	O	O
code	O	O
would	O	O
not	O	O
be	O	O
even	O	O
more	O	O
readable	O	O
using	O	O
an	O	O
if	O	O
.	O	O
Question	O	O
-	O	O
21163108	O	O
,	O	O
answer	O	O
-	O	O
21172732	O	O
The	O	O
parallel	O	O
streams	O	O
use	O	O
the	O	O
default	O	O
ForkJoinPool	B-api_mention	B-api_mention
which	O	O
by	O	O
default	O	O
has	O	O
one	O	O
less	O	O
threads	O	O
as	O	O
you	O	O
have	O	O
processors	O	O
,	O	O
as	O	O
returned	O	O
by	O	O
Runtime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getRuntime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
availableProcessors	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
so	O	O
parallel	O	O
streams	O	O
use	O	O
all	O	O
your	O	O
processors	O	O
because	O	O
they	O	O
also	O	O
use	O	O
the	O	O
main	O	O
thread	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
To	O	O
change	O	O
the	O	O
way	O	O
parallel	O	O
streams	O	O
are	O	O
executed	O	O
,	O	O
you	O	O
can	O	O
either	O	O
#	O	O
li	O	O
submit	O	O
the	O	O
parallel	O	O
stream	O	O
execution	O	O
to	O	O
your	O	O
own	O	O
ForkJoinPool	B-api_mention	O
:	O	O
yourFJP	O	O
.	B-api_mention	B-api_mention
submit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
#	O	O
li	O	O
you	O	O
can	O	O
change	O	O
the	O	O
size	O	O
of	O	O
the	O	O
common	O	O
pool	O	O
using	O	O
system	O	O
properties	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
setProperty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
a	O	O
target	O	O
parallelism	O	O
of	O	O
20	O	O
threads	O	O
.	O	O
Example	O	O
of	O	O
the	O	O
latter	O	O
on	O	O
my	O	O
machine	O	O
which	O	O
has	O	O
8	O	O
processors	O	O
.	O	O
If	O	O
I	O	O
run	O	O
the	O	O
following	O	O
program	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
output	O	O
is	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
you	O	O
can	O	O
see	O	O
that	O	O
the	O	O
parallel	O	O
stream	O	O
processes	O	O
8	O	O
items	O	O
at	O	O
a	O	O
time	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
uses	O	O
8	O	O
threads	O	O
.	O	O
However	O	O
if	O	O
I	O	O
uncomment	O	O
the	O	O
commented	O	O
line	O	O
,	O	O
the	O	O
output	O	O
is	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
time	O	O
the	O	O
parallel	O	O
stream	O	O
has	O	O
used	O	O
20	O	O
threads	O	O
and	O	O
all	O	O
20	O	O
elements	O	O
in	O	O
the	O	O
stream	O	O
have	O	O
been	O	O
processed	O	O
comcurrently	O	O
.	O	O
Question	O	O
-	O	O
27504925	O	O
The	O	O
Java	O	O
language	O	O
specification	O	O
specifies	O	O
that	O	O
#	O	O
blockquote	O	O
So	O	O
,	O	O
considering	O	O
arrays	O	O
are	O	O
objects	O	O
	O	O
why	O	O
did	O	O
the	O	O
Java	O	O
designers	O	O
make	O	O
the	O	O
decision	O	O
not	O	O
to	O	O
allow	O	O
inherit	O	O
and	O	O
override	O	O
from	O	O
it	O	O
,	O	O
for	O	O
example	O	O
,	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
The	O	O
current	O	O
syntax	O	O
wouldn	O	O
'	O	O
t	O	O
allow	O	O
creating	O	O
anonymous	O	O
classes	O	O
with	O	O
an	O	O
array	O	O
as	O	O
the	O	O
base	O	O
class	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
that	O	O
was	O	O
the	O	O
reason	O	O
for	O	O
their	O	O
decision	O	O
.	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29495065	O	O
#	O	O
li	O	O
It	O	O
is	O	O
checking	O	O
if	O	O
newType	O	O
is	O	O
array	O	O
of	O	O
Objects	O	O
or	O	O
not	O	O
:	O	O
#	O	O
pre	O	O
Why	O	O
to	O	O
do	O	O
that	O	O
?	O	O
Because	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
n	O	O
]	O	O
is	O	O
faster	O	O
than	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
#	O	O
li	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
creates	O	O
an	O	O
array	O	O
of	O	O
types	O	O
defined	O	O
by	O	O
the	O	O
first	O	O
argument	O	O
,	O	O
eg	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
class	I-api_mention	I-api_mention
-	O	O
>	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
Note	O	O
that	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	B-api_mention
class	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getComponentType	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	O
class	I-api_mention	O
#	O	O
li	O	O
You	O	O
cannot	O	O
use	O	O
it	O	O
like	O	O
that	O	O
,	O	O
but	O	O
it	O	O
can	O	O
be	O	O
like	O	O
this	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
nums	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
in	O	O
this	O	O
case	O	O
it	O	O
depends	O	O
only	O	O
on	O	O
actual	O	O
type	O	O
of	O	O
elements	O	O
,	O	O
eg	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
will	O	O
fail	O	O
,	O	O
you	O	O
cannot	O	O
write	O	O
in	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
anything	O	O
but	O	O
Integer	B-api_mention	O
Question	O	O
-	O	O
23699371	O	O
,	O	O
answer	O	O
-	O	O
34731808	O	O
You	O	O
can	O	O
use	O	O
the	O	O
distinct	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
can	O	O
refactor	O	O
persons	O	O
to	O	O
implement	O	O
an	O	O
Eclipse	O	O
Collections	B-api_mention	B-api_mention
interface	O	O
,	O	O
you	O	O
can	O	O
call	O	O
the	O	O
method	O	O
directly	O	O
on	O	O
the	O	O
list	O	O
.	O	O
#	O	O
pre	O	O
HashingStrategy	O	O
is	O	O
simply	O	O
a	O	O
strategy	O	O
interface	O	O
that	O	O
allows	O	O
you	O	O
to	O	O
define	O	O
custom	O	O
implementations	O	O
of	O	O
equals	O	O
and	O	O
hashcode	O	O
.	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
a	O	O
committer	O	O
for	O	O
Eclipse	O	O
Collections	O	B-api_mention
.	O	O
Question	O	O
-	O	O
34172978	O	O
,	O	O
answer	O	O
-	O	O
34173110	O	O
Flipping	O	O
the	O	O
limit	O	O
and	O	O
the	O	O
filter	O	O
clauses	O	O
has	O	O
different	O	O
behaviors	O	O
.	O	O
If	O	O
you	O	O
put	O	O
the	O	O
limit	O	O
first	O	O
,	O	O
the	O	O
stream	O	O
will	O	O
first	O	O
generate	O	O
10	O	O
integers	O	O
[	O	O
1	O	O
.	O	O
.	O	O
10	O	O
]	O	O
,	O	O
and	O	O
then	O	O
filter	O	O
them	O	O
leaving	O	O
only	O	O
those	O	O
smaller	O	O
than	O	O
5	O	O
.	O	O
In	O	O
the	O	O
original	O	O
ordering	O	O
,	O	O
with	O	O
the	O	O
filter	O	O
applied	O	O
first	O	O
,	O	O
integers	O	O
are	O	O
generated	O	O
and	O	O
filtered	O	O
until	O	O
you	O	O
reach	O	O
10	O	O
elements	O	O
.	O	O
This	O	O
isn	O	O
'	O	O
t	O	O
an	O	O
infinite	O	O
operator	O	O
,	O	O
as	O	O
i	O	O
in	O	O
the	O	O
supplier	O	O
will	O	O
eventually	O	O
overflow	O	O
,	O	O
but	O	O
it	O	O
will	O	O
take	O	O
a	O	O
while	O	O
,	O	O
especially	O	O
on	O	O
a	O	O
slow	O	O
computer	O	O
,	O	O
to	O	O
reach	O	O
MAX	O	O
_	O	O
INT	O	O
.	O	O
Question	O	O
-	O	O
14014086	O	O
,	O	O
answer	O	O
-	O	O
20784007	O	O
Ken	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
basically	O	O
right	O	O
but	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
chime	O	O
in	O	O
on	O	O
the	O	O
"	O	O
why	O	O
would	O	O
you	O	O
want	O	O
to	O	O
use	O	O
one	O	O
over	O	O
the	O	O
other	O	O
?	O	O
"	O	O
part	O	O
of	O	O
your	O	O
question	O	O
.	O	O
Basics	O	O
The	O	O
base	O	O
interface	O	O
you	O	O
choose	O	O
for	O	O
your	O	O
repository	O	O
has	O	O
two	O	O
main	O	O
purposes	O	O
.	O	O
First	O	O
,	O	O
you	O	O
allow	O	O
the	O	O
Spring	O	O
Data	O	O
repository	O	O
infrastructure	O	O
to	O	O
find	O	O
your	O	O
interface	O	O
and	O	O
trigger	O	O
the	O	O
proxy	O	O
creation	O	O
so	O	O
that	O	O
you	O	O
inject	O	O
instances	O	O
of	O	O
the	O	O
interface	O	O
into	O	O
clients	O	O
.	O	O
The	O	O
second	O	O
purpose	O	O
is	O	O
to	O	O
pull	O	O
in	O	O
as	O	O
much	O	O
functionality	O	O
as	O	O
needed	O	O
into	O	O
the	O	O
interface	O	O
without	O	O
having	O	O
to	O	O
declare	O	O
extra	O	O
methods	O	O
.	O	O
The	O	O
common	O	O
interfaces	O	O
The	O	O
Spring	O	O
Data	O	O
core	O	O
library	O	O
ships	O	O
with	O	O
two	O	O
base	O	O
interfaces	O	O
that	O	O
expose	O	O
a	O	O
dedicated	O	O
set	O	O
of	O	O
functionalities	O	O
:	O	O
#	O	O
li	O	O
CrudRepository	B-api_mention	O
-	O	O
CRUD	O	O
methods	O	O
#	O	O
li	O	O
PagingAndSortingRepository	B-api_mention	O
-	O	O
methods	O	O
for	O	O
pagination	O	O
and	O	O
sorting	O	O
(	O	O
extends	O	O
CrudRepository	B-api_mention	B-api_mention
)	O	O
Store	O	O
-	O	O
specific	O	O
interfaces	O	O
The	O	O
individual	O	O
store	O	O
modules	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
for	O	O
JPA	O	O
or	O	O
MongoDB	O	O
)	O	O
expose	O	O
store	O	O
-	O	O
specific	O	O
extensions	O	O
of	O	O
these	O	O
base	O	O
interfaces	O	O
to	O	O
allow	O	O
access	O	O
to	O	O
store	O	O
-	O	O
specific	O	O
functionality	O	O
like	O	O
flushing	O	O
or	O	O
dedicated	O	O
batching	O	O
that	O	O
take	O	O
some	O	O
store	O	O
specifics	O	O
into	O	O
account	O	O
.	O	O
An	O	O
example	O	O
for	O	O
this	O	O
is	O	O
deleteInBatch	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
of	O	O
JpaRepository	B-api_mention	O
which	O	O
is	O	O
different	O	O
from	O	O
delete	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
it	O	O
uses	O	O
a	O	O
query	O	O
to	O	O
delete	O	O
the	O	O
given	O	O
entities	O	O
which	O	O
is	O	O
more	O	O
performant	O	O
but	O	O
comes	O	O
with	O	O
the	O	O
side	O	O
effect	O	O
of	O	O
not	O	O
triggering	O	O
the	O	O
JPA	O	O
-	O	O
defined	O	O
cascades	O	O
(	O	O
as	O	O
the	O	O
spec	O	O
defines	O	O
it	O	O
)	O	O
.	O	O
We	O	O
generally	O	O
recommend	O	O
not	O	O
to	O	O
use	O	O
these	O	O
base	O	O
interfaces	O	O
as	O	O
they	O	O
expose	O	O
the	O	O
underlying	O	O
persistence	O	O
technology	O	O
to	O	O
the	O	O
clients	O	O
and	O	O
thus	O	O
tighten	O	O
the	O	O
coupling	O	O
between	O	O
them	O	O
and	O	O
the	O	O
repository	O	O
.	O	O
Plus	O	O
,	O	O
you	O	O
get	O	O
a	O	O
bit	O	O
away	O	O
from	O	O
the	O	O
original	O	O
definition	O	O
of	O	O
a	O	O
repository	O	O
which	O	O
is	O	O
basically	O	O
"	O	O
a	O	O
collection	O	O
of	O	O
entities	O	O
"	O	O
.	O	O
So	O	O
if	O	O
you	O	O
can	O	O
,	O	O
stay	O	O
with	O	O
PagingAndSortingRepository	B-api_mention	B-api_mention
.	O	O
Custom	O	O
repository	O	O
base	O	O
interfaces	O	O
The	O	O
downside	O	O
of	O	O
directly	O	O
depending	O	O
on	O	O
one	O	O
of	O	O
the	O	O
provided	O	O
base	O	O
interfaces	O	O
is	O	O
two	O	O
-	O	O
fold	O	O
.	O	O
Both	O	O
of	O	O
them	O	O
might	O	O
be	O	O
considered	O	O
as	O	O
theoretical	O	O
but	O	O
I	O	O
think	O	O
they	O	O
'	O	O
re	O	O
important	O	O
to	O	O
be	O	O
aware	O	O
of	O	O
:	O	O
#	O	O
li	O	O
Depending	O	O
on	O	O
a	O	O
a	O	O
Spring	O	O
Data	O	O
repository	O	O
interface	O	O
couples	O	O
your	O	O
repository	O	O
interface	O	O
to	O	O
the	O	O
library	O	O
.	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
this	O	O
is	O	O
a	O	O
particular	O	O
issue	O	O
as	O	O
you	O	O
'	O	O
ll	O	O
probably	O	O
use	O	O
abstractions	O	O
like	O	O
Page	B-api_mention	O
or	O	O
Pageable	B-api_mention	O
in	O	O
your	O	O
code	O	O
anyway	O	O
.	O	O
Spring	O	O
Data	O	O
is	O	O
not	O	O
any	O	O
different	O	O
from	O	O
any	O	O
other	O	O
general	O	O
purpose	O	O
library	O	O
like	O	O
commons	O	O
-	O	O
lang	O	O
or	O	O
Guava	O	O
.	O	O
As	O	O
long	O	O
as	O	O
it	O	O
provides	O	O
reasonable	O	O
benefit	O	O
,	O	O
it	O	O
'	O	O
s	O	O
just	O	O
fine	O	O
.	O	O
#	O	O
li	O	O
By	O	O
extending	O	O
e	O	O
.	O	O
g	O	O
.	O	O
CrudRepository	B-api_mention	O
,	O	O
you	O	O
expose	O	O
a	O	O
complete	O	O
set	O	O
of	O	O
persistence	O	O
method	O	O
at	O	O
once	O	O
.	O	O
This	O	O
is	O	O
probably	O	O
fine	O	O
in	O	O
most	O	O
circumstances	O	O
as	O	O
well	O	O
but	O	O
you	O	O
might	O	O
run	O	O
into	O	O
situations	O	O
where	O	O
you	O	O
'	O	O
d	O	O
like	O	O
to	O	O
gain	O	O
more	O	O
fine	O	O
-	O	O
grained	O	O
control	O	O
over	O	O
the	O	O
methods	O	O
expose	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
to	O	O
create	O	O
a	O	O
ReadOnlyRepository	B-api_mention	O
that	O	O
doesn	O	O
'	O	O
t	O	O
include	O	O
the	O	O
save	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
and	O	O
delete	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
of	O	O
CrudRepository	B-api_mention	O
.	O	O
The	O	O
solution	O	O
to	O	O
both	O	O
of	O	O
these	O	O
downsides	O	O
is	O	O
to	O	O
craft	O	O
your	O	O
own	O	O
base	O	O
repository	O	O
interface	O	O
or	O	O
even	O	O
a	O	O
set	O	O
of	O	O
them	O	O
.	O	O
In	O	O
a	O	O
lot	O	O
of	O	O
applications	O	O
we	O	O
'	O	O
ve	O	O
seen	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
first	O	O
repository	O	O
interface	O	O
is	O	O
some	O	O
general	O	O
purpose	O	O
base	O	O
interface	O	O
that	O	O
actually	O	O
only	O	O
fixes	O	O
point	O	O
1	O	O
but	O	O
also	O	O
ties	O	O
the	O	O
ID	O	O
type	O	O
to	O	O
be	O	O
Long	O	B-api_mention
for	O	O
consistency	O	O
.	O	O
The	O	O
second	O	O
interface	O	O
usually	O	O
has	O	O
all	O	O
the	O	O
find	O	O
	O	O
(	O	O
	O	O
)	O	O
methods	O	O
copied	O	O
from	O	O
CrudRepository	B-api_mention	B-api_mention
and	O	O
PagingAndSortingRepository	B-api_mention	B-api_mention
but	O	O
does	O	O
not	O	O
expose	O	O
the	O	O
manipulating	O	O
ones	O	O
.	O	O
Read	O	O
more	O	O
on	O	O
that	O	O
approach	O	O
in	O	O
the	O	O
reference	O	O
documentation	O	O
.	O	O
Summary	O	O
-	O	O
tl	O	O
;	O	O
dr	O	O
The	O	O
repository	O	O
abstraction	O	O
allows	O	O
you	O	O
to	O	O
pickt	O	O
the	O	O
base	O	O
repository	O	O
totally	O	O
driven	O	O
by	O	O
you	O	O
architectural	O	O
and	O	O
functional	O	O
needs	O	O
.	O	O
Use	O	O
the	O	O
ones	O	O
provided	O	O
out	O	O
of	O	O
the	O	O
box	O	O
if	O	O
they	O	O
suit	O	O
,	O	O
craft	O	O
your	O	O
own	O	O
repository	O	O
base	O	O
interfaces	O	O
if	O	O
necessary	O	O
.	O	O
Stay	O	O
away	O	O
from	O	O
the	O	O
store	O	O
specific	O	O
repository	O	O
interfaces	O	O
unless	O	O
unavoidable	O	O
.	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29099896	O	O
This	O	O
is	O	O
a	O	O
very	O	O
interesting	O	O
problem	O	O
.	O	O
I	O	O
came	O	O
up	O	O
with	O	O
a	O	O
one	O	O
line	O	O
solution	O	O
.	O	O
It	O	O
might	O	O
not	O	O
very	O	O
performant	O	O
but	O	O
it	O	O
works	O	O
.	O	O
#	O	O
pre	O	O
It	O	O
is	O	O
a	O	O
similar	O	O
idea	O	O
that	O	O
@	O	O
Rohit	O	O
Jain	O	O
came	O	O
up	O	O
with	O	O
.	O	O
I	O	O
'	O	O
m	O	O
grouping	O	O
the	O	O
space	O	O
between	O	O
the	O	O
null	O	O
values	O	O
.	O	O
If	O	O
you	O	O
really	O	O
want	O	O
a	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
you	O	O
may	O	O
append	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
ll	O	O
=	O	O
cl	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725550	O	O
Think	O	O
of	O	O
it	O	O
like	O	O
this	O	O
:	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
has	O	O
methods	O	O
like	O	O
add	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
set	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
contract	O	O
is	O	O
that	O	O
once	O	O
you	O	O
added	O	O
an	O	O
element	O	O
at	O	O
position	O	O
X	O	O
you	O	O
will	O	O
find	O	O
it	O	O
there	O	O
unless	O	O
you	O	O
add	O	O
or	O	O
remove	O	O
elements	O	O
before	O	O
it	O	O
.	O	O
If	O	O
any	O	O
list	O	O
implementation	O	O
would	O	O
store	O	O
elements	O	O
in	O	O
some	O	O
order	O	O
other	O	O
than	O	O
based	O	O
on	O	O
the	O	O
index	O	O
,	O	O
the	O	O
above	O	O
list	O	O
methods	O	O
would	O	O
make	O	O
no	O	O
sense	O	O
.	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28584954	O	O
Because	O	O
thats	O	O
the	O	O
standard	O	O
.	O	O
Infinity	O	O
represents	O	O
a	O	O
number	O	O
greater	O	O
than	O	O
or	O	O
less	O	O
than	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
/	O	O
-	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MAX	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
NaN	O	O
represents	O	O
the	O	O
outcome	O	O
of	O	O
an	O	O
operation	O	O
that	O	O
didn	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
.	O	O
That	O	O
is	O	O
,	O	O
the	O	O
operation	O	O
didn	O	O
'	O	O
t	O	O
possibly	O	O
come	O	O
out	O	O
with	O	O
a	O	O
number	O	O
.	O	O
I	O	O
would	O	O
guess	O	O
the	O	O
logic	O	O
is	O	O
once	O	O
a	O	O
number	O	O
gets	O	O
big	O	O
enough	O	O
(	O	O
infinity	O	O
)	O	O
and	O	O
because	O	O
of	O	O
the	O	O
limitation	O	O
of	O	O
floating	O	O
point	O	O
numbers	O	O
,	O	O
adding	O	O
numbers	O	O
to	O	O
it	O	O
won	O	O
'	O	O
t	O	O
change	O	O
the	O	O
outcome	O	O
,	O	O
so	O	O
its	O	O
'	O	O
like	O	O
'	O	O
infinity	O	O
.	O	O
So	O	O
if	O	O
you	O	O
want	O	O
to	O	O
compare	O	O
to	O	O
really	O	O
big	O	O
numbers	O	O
,	O	O
at	O	O
some	O	O
point	O	O
you	O	O
might	O	O
just	O	O
say	O	O
those	O	O
two	O	O
big	O	O
numbers	O	O
are	O	O
close	O	O
enough	O	O
for	O	O
all	O	O
intents	O	O
and	O	O
purposes	O	O
.	O	O
But	O	O
if	O	O
you	O	O
want	O	O
to	O	O
compare	O	O
two	O	O
things	O	O
that	O	O
both	O	O
aren	O	O
'	O	O
t	O	O
numbers	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
compare	O	O
them	O	O
so	O	O
its	O	O
false	O	O
.	O	O
At	O	O
least	O	O
you	O	O
couldn	O	O
'	O	O
t	O	O
compare	O	O
them	O	O
as	O	O
a	O	O
primitive	O	O
.	O	O
Question	O	O
-	O	O
31471444	O	O
,	O	O
answer	O	O
-	O	O
31471530	O	O
You	O	O
should	O	O
not	O	O
.	O	O
The	O	O
INTEGER	O	O
_	O	O
ONE	O	O
name	O	O
is	O	O
no	O	O
more	O	O
meaningful	O	O
than	O	O
1	O	O
.	O	O
If	O	O
however	O	O
this	O	O
value	O	O
has	O	O
some	O	O
other	O	O
meaning	O	O
(	O	O
for	O	O
example	O	O
,	O	O
month	O	O
in	O	O
the	O	O
year	O	O
)	O	O
,	O	O
then	O	O
using	O	O
a	O	O
constant	O	O
(	O	O
like	O	O
Calendar	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
FEBRUARY	I-api_mention	I-api_mention
)	O	I-api_mention
will	O	O
make	O	O
your	O	O
code	O	O
clearer	O	O
.	O	O
I	O	O
can	O	O
guess	O	O
that	O	O
this	O	O
constant	O	O
in	O	O
Commons	O	O
Math	O	O
library	O	O
was	O	O
created	O	O
in	O	O
Java	O	O
1	O	O
.	O	O
4	O	O
when	O	O
there	O	O
were	O	O
no	O	O
Integer	B-api_mention	B-api_mention
cache	O	O
and	O	O
autoboxing	O	O
,	O	O
so	O	O
it	O	O
had	O	O
sense	O	O
in	O	O
terms	O	O
that	O	O
you	O	O
may	O	O
reuse	O	O
the	O	O
same	O	O
Integer	B-api_mention	B-api_mention
object	O	O
(	O	O
not	O	O
primitive	O	O
int	O	O
)	O	O
in	O	O
different	O	O
places	O	O
to	O	O
save	O	O
memory	O	O
.	O	O
So	O	O
it	O	O
was	O	O
added	O	O
for	O	O
performance	O	O
reasons	O	O
,	O	O
not	O	O
for	O	O
code	O	O
clarity	O	O
.	O	O
Now	O	O
it	O	O
'	O	O
s	O	O
obsolete	O	O
:	O	O
even	O	O
if	O	O
you	O	O
need	O	O
an	O	O
Integer	B-api_mention	B-api_mention
object	O	O
,	O	O
you	O	O
can	O	O
use	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
implicit	O	O
autoboxing	O	O
and	O	O
get	O	O
the	O	O
cached	O	O
one	O	O
.	O	O
Question	O	O
-	O	O
32294367	O	O
,	O	O
answer	O	O
-	O	O
32378895	O	O
#	O	O
blockquote	O	O
Yes	O	O
and	O	O
No	O	O
.	O	O
I	O	O
explain	O	O
:	O	O
#	O	O
li	O	O
Referring	O	O
to	O	O
shared	O	O
memory	O	O
:	O	O
Different	O	O
threads	O	O
in	O	O
a	O	O
Java	O	O
process	O	O
share	O	O
the	O	O
whole	O	O
heap	O	O
,	O	O
therefore	O	O
threads	O	O
can	O	O
interact	O	O
in	O	O
a	O	O
huge	O	O
number	O	O
of	O	O
planned	O	O
and	O	O
unplanned	O	O
ways	O	O
.	O	O
However	O	O
objects	O	O
in	O	O
the	O	O
stack	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
a	O	O
context	O	O
you	O	O
pass	O	O
down	O	O
to	O	O
called	O	O
method	O	O
)	O	O
or	O	O
a	O	O
ThreadLocal	O	B-api_mention
are	O	O
their	O	O
own	O	O
thread	O	O
'	O	O
s	O	O
(	O	O
unless	O	O
they	O	O
start	O	O
sharing	O	O
references	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Crashing	O	O
:	O	O
If	O	O
a	O	O
thread	O	O
crashes	O	O
in	O	O
Java	O	O
(	O	O
a	O	O
Throwable	B-api_mention	B-api_mention
is	O	O
propagated	O	O
into	O	O
Thread	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
run	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
or	O	O
something	O	O
gets	O	O
looped	O	O
or	O	O
blocked	O	O
)	O	O
,	O	O
that	O	O
mishap	O	O
might	O	O
not	O	O
affect	O	O
other	O	O
threads	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
a	O	O
pool	O	O
of	O	O
connections	O	O
in	O	O
a	O	O
server	O	O
will	O	O
continue	O	O
to	O	O
operate	O	O
)	O	O
.	O	O
However	O	O
as	O	O
different	O	O
threads	O	O
interact	O	O
.	O	O
Other	O	O
threads	O	O
will	O	O
easily	O	O
get	O	O
stranded	O	O
if	O	O
one	O	O
of	O	O
them	O	O
ends	O	O
abnormally	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
one	O	O
thread	O	O
trying	O	O
to	O	O
read	O	O
from	O	O
an	O	O
empty	O	O
pipe	O	O
from	O	O
another	O	O
thread	O	O
which	O	O
did	O	O
not	O	O
close	O	O
its	O	O
end	O	O
)	O	O
.	O	O
So	O	O
unless	O	O
the	O	O
developers	O	O
are	O	O
highly	O	O
paranoid	O	O
careful	O	O
,	O	O
it	O	O
is	O	O
very	O	O
likely	O	O
that	O	O
side	O	O
effects	O	O
will	O	O
occur	O	O
.	O	O
I	O	O
doubt	O	O
that	O	O
any	O	O
other	O	O
paradigm	O	O
intends	O	O
threads	O	O
to	O	O
operate	O	O
as	O	O
totally	O	O
independent	O	O
islands	O	O
.	O	O
They	O	O
must	O	O
share	O	O
information	O	O
and	O	O
coordinate	O	O
somehow	O	O
.	O	O
And	O	O
then	O	O
there	O	O
will	O	O
be	O	O
the	O	O
chance	O	O
to	O	O
mess	O	O
things	O	O
up	O	O
.	O	O
It	O	O
is	O	O
just	O	O
they	O	O
will	O	O
take	O	O
a	O	O
more	O	O
defensive	O	O
approach	O	O
that	O	O
"	O	O
gives	O	O
you	O	O
less	O	O
rope	O	O
to	O	O
hang	O	O
yourself	O	O
"	O	O
(	O	O
same	O	O
idiom	O	O
as	O	O
with	O	O
pointers	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
23932061	O	O
,	O	O
answer	O	O
-	O	O
23936723	O	O
There	O	O
'	O	O
s	O	O
a	O	O
much	O	O
better	O	O
answer	O	O
than	O	O
using	O	O
spliteratorUnknownSize	B-api_mention	B-api_mention
directly	O	O
,	O	O
which	O	O
is	O	O
both	O	O
easier	O	O
and	O	O
gets	O	O
a	O	O
better	O	O
result	O	O
.	O	O
Iterable	O	B-api_mention
has	O	O
a	O	O
spliterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
so	O	O
you	O	O
should	O	O
just	O	O
use	O	O
that	O	O
to	O	O
get	O	O
your	O	O
spliterator	O	O
.	O	O
In	O	O
the	O	O
worst	O	O
case	O	O
,	O	O
its	O	O
the	O	O
same	O	O
code	O	O
(	O	O
the	O	O
default	O	O
implementation	O	O
uses	O	O
spliteratorUnknownSize	B-api_mention	B-api_mention
)	O	O
,	O	O
but	O	O
in	O	O
the	O	O
more	O	O
common	O	O
case	O	O
,	O	O
where	O	O
your	O	O
Iterable	O	B-api_mention
is	O	O
already	O	O
a	O	O
collection	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
get	O	O
a	O	O
better	O	O
spliterator	O	O
,	O	O
and	O	O
therefore	O	O
better	O	O
stream	O	O
performance	O	O
(	O	O
maybe	O	O
even	O	O
good	O	O
parallelism	O	O
.	O	O
)	O	O
Its	O	O
also	O	O
less	O	O
code	O	O
:	O	O
StreamSupport	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
moreStreamOps	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
getting	O	O
a	O	O
stream	O	O
from	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
see	O	O
Why	O	O
does	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
not	O	O
provide	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
?	O	O
)	O	O
is	O	O
not	O	O
very	O	O
painful	O	O
.	O	O
Question	O	O
-	O	O
31370403	O	O
,	O	O
answer	O	O
-	O	O
31466466	O	O
Idea	O	O
#	O	O
1	O	O
,	O	O
storing	O	O
the	O	O
Graphics	B-api_mention	O
objects	O	O
simply	O	O
wouldn	O	O
'	O	O
t	O	O
work	O	O
.	O	O
The	O	O
Graphics	B-api_mention	O
should	O	O
not	O	O
be	O	O
considered	O	O
as	O	O
"	O	O
holding	O	O
"	O	O
some	O	O
display	O	O
memory	O	O
,	O	O
but	O	O
rather	O	O
as	O	O
a	O	O
handle	O	O
to	O	O
access	O	O
an	O	O
area	O	O
of	O	O
display	O	O
memory	O	O
.	O	O
In	O	O
the	O	O
case	O	O
of	O	O
BufferedImage	O	O
,	O	O
each	O	O
Graphics	B-api_mention	O
object	O	O
will	O	O
be	O	O
always	O	O
the	O	O
handle	O	O
to	O	O
the	O	O
same	O	O
given	O	O
image	O	O
memory	O	O
buffer	O	O
,	O	O
so	O	O
they	O	O
all	O	O
will	O	O
represent	O	O
the	O	O
same	O	O
image	O	O
.	O	O
Even	O	O
more	O	O
importantly	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
actually	O	O
do	O	O
anything	O	O
with	O	O
the	O	O
stored	O	O
Graphics	B-api_mention	O
:	O	O
As	O	O
they	O	O
do	O	O
not	O	O
store	O	O
anything	O	O
,	O	O
there	O	O
is	O	O
no	O	O
way	O	O
whatsoever	O	O
they	O	O
could	O	O
"	O	O
re	O	O
-	O	O
store	O	O
"	O	O
anything	O	O
.	O	O
Idea	O	O
#	O	O
2	O	O
,	O	O
cloning	O	O
the	O	O
BufferedImage	O	B-api_mention
s	O	O
is	O	O
a	O	O
much	O	O
better	O	O
idea	O	O
,	O	O
but	O	O
you	O	O
'	O	O
ll	O	O
indeed	O	O
be	O	O
wasting	O	O
memory	O	O
,	O	O
and	O	O
quickly	O	O
run	O	O
out	O	O
of	O	O
it	O	O
.	O	O
It	O	O
helps	O	O
only	O	O
to	O	O
store	O	O
those	O	O
parts	O	O
of	O	O
the	O	O
image	O	O
affected	O	O
by	O	O
the	O	O
draw	O	O
,	O	O
for	O	O
example	O	O
using	O	O
rectangular	O	O
areas	O	O
,	O	O
but	O	O
it	O	O
still	O	O
costs	O	O
a	O	O
lot	O	O
of	O	O
memory	O	O
.	O	O
Buffering	O	O
those	O	O
undo	O	O
images	O	O
to	O	O
disk	O	O
could	O	O
help	O	O
,	O	O
but	O	O
it	O	O
will	O	O
make	O	O
your	O	O
UI	O	O
slow	O	O
and	O	O
unresponsive	O	O
,	O	O
and	O	O
that	O	O
'	O	O
s	O	O
bad	O	O
;	O	O
furthermore	O	O
,	O	O
it	O	O
makes	O	O
you	O	O
application	O	O
more	O	O
complex	O	O
and	O	O
error	O	O
-	O	O
prone	O	O
.	O	O
My	O	O
alternative	O	O
would	O	O
be	O	O
to	O	O
store	O	O
store	O	O
the	O	O
image	O	O
modifications	O	O
in	O	O
a	O	O
list	O	O
,	O	O
rendered	O	O
from	O	O
first	O	O
to	O	O
last	O	O
on	O	O
top	O	O
of	O	O
the	O	O
image	O	O
.	O	O
An	O	O
undo	O	O
operation	O	O
then	O	O
simply	O	O
consists	O	O
of	O	O
removing	O	O
the	O	O
modification	O	O
from	O	O
the	O	O
list	O	O
.	O	O
This	O	O
requires	O	O
you	O	O
to	O	O
"	O	O
reify	O	O
"	O	O
the	O	O
image	O	O
modifications	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
create	O	O
a	O	O
class	O	O
that	O	O
implements	O	O
a	O	O
single	O	O
modification	O	O
,	O	O
by	O	O
providing	O	O
a	O	O
void	O	O
draw	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
which	O	O
performs	O	O
the	O	O
actual	O	O
drawing	O	O
.	O	O
As	O	O
you	O	O
said	O	O
,	O	O
random	O	O
modifications	O	O
pose	O	O
an	O	O
additional	O	O
problem	O	O
.	O	O
However	O	O
,	O	O
the	O	O
key	O	O
problem	O	O
is	O	O
your	O	O
use	O	O
of	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
create	O	O
random	O	O
numbers	O	O
.	O	O
Instead	O	O
,	O	O
perform	O	O
each	O	O
random	O	O
modification	O	O
with	O	O
a	O	O
Random	B-api_mention	B-api_mention
created	O	O
from	O	O
a	O	O
fixed	O	O
seed	O	O
value	O	O
,	O	O
so	O	O
that	O	O
the	O	O
(	O	O
pseudo	O	O
-	O	O
)	O	O
random	O	O
number	O	O
sequences	O	O
are	O	O
the	O	O
same	O	O
on	O	O
each	O	O
invocation	O	O
of	O	O
draw	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
,	O	O
each	O	O
draw	O	O
has	O	O
exactly	O	O
the	O	O
same	O	O
effects	O	O
.	O	O
(	O	O
That	O	O
'	O	O
s	O	O
why	O	O
they	O	O
are	O	O
called	O	O
"	O	O
pseudo	O	O
-	O	O
random	O	O
"	O	O
-	O	O
-	O	O
the	O	O
generated	O	O
numbers	O	O
look	O	O
random	O	O
,	O	O
but	O	O
they	O	O
are	O	O
just	O	O
as	O	O
deterministic	O	O
as	O	O
any	O	O
other	O	O
function	O	O
.	O	O
)	O	O
In	O	O
contrast	O	O
to	O	O
the	O	O
image	O	O
storing	O	O
technique	O	O
,	O	O
which	O	O
has	O	O
memory	O	O
problems	O	O
,	O	O
the	O	O
problem	O	O
with	O	O
this	O	O
technique	O	O
is	O	O
that	O	O
many	O	O
modifications	O	O
may	O	O
make	O	O
the	O	O
GUI	O	O
slow	O	O
,	O	O
especially	O	O
if	O	O
the	O	O
modifications	O	O
are	O	O
computationally	O	O
intensive	O	O
.	O	O
To	O	O
prevent	O	O
this	O	O
,	O	O
the	O	O
simplest	O	O
way	O	O
would	O	O
be	O	O
to	O	O
fix	O	O
an	O	O
appropriate	O	O
maximum	O	O
size	O	O
of	O	O
the	O	O
list	O	O
of	O	O
undoable	O	O
modifications	O	O
.	O	O
If	O	O
this	O	O
limit	O	O
would	O	O
be	O	O
exceeded	O	O
by	O	O
adding	O	O
a	O	O
new	O	O
modification	O	O
,	O	O
remove	O	O
the	O	O
oldest	O	O
modification	O	O
the	O	O
list	O	O
and	O	O
apply	O	O
it	O	O
to	O	O
the	O	O
backing	O	O
BufferedImage	O	O
itself	O	O
.	O	O
The	O	O
following	O	O
simple	O	O
demo	O	O
application	O	O
shows	O	O
that	O	O
(	O	O
and	O	O
how	O	O
)	O	O
this	O	O
all	O	O
works	O	O
together	O	O
.	O	O
It	O	O
also	O	O
includes	O	O
a	O	O
nice	O	O
"	O	O
redo	O	O
"	O	O
feature	O	O
for	O	O
redoing	O	O
undone	O	O
actions	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
24885223	O	O
I	O	O
don	O	O
'	O	O
t	O	O
know	O	O
whether	O	O
I	O	O
am	O	O
asking	O	O
the	O	O
right	O	O
question	O	O
.	O	O
I	O	O
was	O	O
exploring	O	O
RecyclerView	B-api_mention	B-api_mention
and	O	O
I	O	O
was	O	O
surprised	O	O
to	O	O
see	O	O
that	O	O
RecyclerView	B-api_mention	B-api_mention
does	O	O
not	O	O
have	O	O
onItemClickListener	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Because	O	O
RecyclerView	B-api_mention	O
extends	O	O
#	O	O
blockquote	O	O
and	O	O
ListView	B-api_mention	B-api_mention
extends	O	O
#	O	O
blockquote	O	O
.	O	O
However	O	O
I	O	O
solved	O	O
my	O	O
problem	O	O
by	O	O
writing	O	O
onClick	B-api_mention	O
in	O	O
my	O	O
RecyclerView	B-api_mention	O
.	I-api_mention	O
Adapter	I-api_mention	O
:	O	O
#	O	O
pre	O	O
But	O	O
still	O	O
I	O	O
want	O	O
to	O	O
know	O	O
why	O	O
Google	O	O
removed	O	O
onItemClickListener	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
Is	O	O
there	O	O
a	O	O
performance	O	O
issue	O	O
or	O	O
something	O	O
else	O	O
?	O	O
Question	O	O
-	O	O
25056607	O	O
,	O	O
answer	O	O
-	O	O
25056878	O	O
We	O	O
can	O	O
take	O	O
a	O	O
look	O	O
into	O	O
the	O	O
source	O	O
code	O	O
of	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
regex	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Pattern	I-api_mention	I-api_mention
which	O	O
is	O	O
behind	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
.	O	O
Way	O	O
down	O	O
the	O	O
rabbit	O	O
hole	O	O
the	O	O
method	O	O
public	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
invoked	O	O
.	O	O
Input	O	O
StringLiteral	O	O
For	O	O
input	O	O
StringLiteral	O	O
this	O	O
method	O	O
is	O	O
called	O	O
as	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
parts	O	O
=	O	O
split	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
intersting	O	O
part	O	O
of	O	O
this	O	O
method	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
that	O	O
is	O	O
what	O	O
happens	O	O
:	O	O
new	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
{	O	O
input	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
}	O	O
is	O	O
returned	O	O
.	O	O
Input	O	O
StringLiteral	O	O
For	O	O
input	O	O
StringLiteral	O	O
the	O	O
intersting	O	O
part	O	O
is	O	O
#	O	O
pre	O	O
Here	O	O
resultSize	O	O
=	O	O
=	O	O
0	O	O
and	O	O
limit	O	O
=	O	O
=	O	O
0	O	O
so	O	O
new	O	O
String	B-api_mention	B-api_mention
[	O	O
0	O	O
]	O	O
is	O	O
returned	O	O
.	O	O
Question	O	O
-	O	O
30081520	O	O
I	O	O
am	O	O
aware	O	O
that	O	O
it	O	O
is	O	O
better	O	O
to	O	O
call	O	O
the	O	O
equals	O	O
method	O	O
over	O	O
using	O	O
the	O	O
=	O	O
=	O	O
operator	O	O
(	O	O
see	O	O
this	O	O
question	O	O
)	O	O
.	O	O
I	O	O
want	O	O
two	O	O
strings	O	O
to	O	O
compare	O	O
as	O	O
equal	O	O
if	O	O
they	O	O
are	O	O
both	O	O
null	O	O
or	O	O
if	O	O
they	O	O
represent	O	O
the	O	O
same	O	O
string	O	O
.	O	O
Unfortunately	O	O
the	O	O
equals	B-api_mention	O
method	O	O
will	O	O
throw	O	O
an	O	O
NPE	O	O
if	O	O
the	O	O
strings	O	O
are	O	O
null	O	O
.	O	O
My	O	O
code	O	O
is	O	O
currently	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
inelegant	O	O
.	O	O
What	O	O
is	O	O
the	O	O
correct	O	O
way	O	O
to	O	O
perform	O	O
this	O	O
test	O	O
?	O	O
Question	O	O
-	O	O
5031614	O	O
,	O	O
answer	O	O
-	O	O
5032837	O	O
If	O	O
you	O	O
want	O	O
to	O	O
use	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
your	O	O
Sets	O	O
,	O	O
in	O	O
the	O	O
sense	O	O
that	O	O
the	O	O
same	O	O
entity	O	O
can	O	O
only	O	O
be	O	O
in	O	O
there	O	O
once	O	O
,	O	O
then	O	O
there	O	O
is	O	O
only	O	O
one	O	O
option	O	O
:	O	O
Option	O	O
2	O	O
.	O	O
That	O	O
'	O	O
s	O	O
because	O	O
a	O	O
primary	O	O
key	O	O
for	O	O
an	O	O
entity	O	O
by	O	O
definition	O	O
never	O	O
changes	O	O
(	O	O
if	O	O
somebody	O	O
indeed	O	O
updates	O	O
it	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
the	O	O
same	O	O
entity	O	O
anymore	O	O
)	O	O
You	O	O
should	O	O
take	O	O
that	O	O
literally	O	O
:	O	O
Since	O	O
your	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
based	O	O
on	O	O
the	O	O
primary	O	O
key	O	O
,	O	O
you	O	O
must	O	O
not	O	O
use	O	O
these	O	O
methods	O	O
,	O	O
until	O	O
the	O	O
primary	O	O
key	O	O
is	O	O
set	O	O
.	O	O
So	O	O
you	O	O
shouldn	O	O
'	O	O
t	O	O
put	O	O
entities	O	O
in	O	O
the	O	O
set	O	O
,	O	O
until	O	O
they	O	O
'	O	O
re	O	O
assigned	O	O
a	O	O
primary	O	O
key	O	O
.	O	O
(	O	O
Yes	O	O
,	O	O
UUIDs	O	O
and	O	O
similar	O	O
concepts	O	O
may	O	O
help	O	O
to	O	O
assign	O	O
primary	O	O
keys	O	O
early	O	O
.	O	O
)	O	O
Now	O	O
,	O	O
it	O	O
'	O	O
s	O	O
theoretically	O	O
also	O	O
possible	O	O
to	O	O
achieve	O	O
that	O	O
with	O	O
Option	O	B-api_mention
3	O	O
,	O	O
even	O	O
though	O	O
so	O	O
-	O	O
called	O	O
"	O	O
business	O	O
-	O	O
keys	O	O
"	O	O
have	O	O
the	O	O
nasty	O	O
drawback	O	O
that	O	O
they	O	O
can	O	O
change	O	O
:	O	O
"	O	O
All	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
do	O	O
is	O	O
delete	O	O
the	O	O
already	O	O
inserted	O	O
entities	O	O
from	O	O
the	O	O
set	O	O
(	O	O
s	O	O
)	O	O
,	O	O
and	O	O
re	O	O
-	O	O
insert	O	O
them	O	O
.	O	O
"	O	O
That	O	O
is	O	O
true	O	O
-	O	O
but	O	O
it	O	O
also	O	O
means	O	O
,	O	O
that	O	O
in	O	O
a	O	O
distributed	O	O
system	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
make	O	O
sure	O	O
,	O	O
that	O	O
this	O	O
is	O	O
done	O	O
absolutely	O	O
everywhere	O	O
the	O	O
data	O	O
has	O	O
been	O	O
inserted	O	O
to	O	O
(	O	O
and	O	O
you	O	O
'	O	O
ll	O	O
have	O	O
to	O	O
make	O	O
sure	O	O
,	O	O
that	O	O
the	O	O
update	O	O
is	O	O
performed	O	O
,	O	O
before	O	O
other	O	O
things	O	O
occur	O	O
)	O	O
.	O	O
You	O	O
'	O	O
ll	O	O
need	O	O
a	O	O
sophisticated	O	O
update	O	O
mechanism	O	O
,	O	O
especially	O	O
if	O	O
some	O	O
remote	O	O
systems	O	O
aren	O	O
'	O	O
t	O	O
currently	O	O
reachable	O	O
.	O	O
.	O	O
.	O	O
Option	O	O
1	O	O
can	O	O
only	O	O
be	O	O
used	O	O
,	O	O
if	O	O
all	O	O
the	O	O
objects	O	O
in	O	O
your	O	O
sets	O	O
are	O	O
from	O	O
the	O	O
same	O	O
Hibernate	O	O
session	O	O
.	O	O
The	O	O
Hibernate	O	O
documentation	O	O
makes	O	O
this	O	O
very	O	O
clear	O	O
in	O	O
chapter	O	O
13	O	O
.	O	O
1	O	O
.	O	O
3	O	O
.	O	O
Considering	O	O
object	O	O
identity	O	O
:	O	O
#	O	O
blockquote	O	O
It	O	O
continues	O	O
to	O	O
argue	O	O
in	O	O
favor	O	O
of	O	O
Option	O	O
3	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
true	O	O
,	O	O
if	O	O
you	O	O
#	O	O
li	O	O
cannot	O	O
assign	O	O
the	O	O
id	O	O
early	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
by	O	O
using	O	O
UUIDs	O	O
)	O	O
#	O	O
li	O	O
and	O	O
yet	O	O
you	O	O
absolutely	O	O
want	O	O
to	O	O
put	O	O
your	O	O
objects	O	O
in	O	O
sets	O	O
while	O	O
they	O	O
'	O	O
re	O	O
in	O	O
transient	O	O
state	O	O
.	O	O
Otherwise	O	O
,	O	O
you	O	O
'	O	O
re	O	O
free	O	O
to	O	O
choose	O	O
Option	O	O
2	O	O
.	O	O
Then	O	O
it	O	O
mentions	O	O
the	O	O
need	O	O
for	O	O
a	O	O
relative	O	O
stability	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
correct	O	O
.	O	O
The	O	O
practical	O	O
problem	O	O
I	O	O
see	O	O
with	O	O
this	O	O
is	O	O
:	O	O
If	O	O
you	O	O
can	O	O
'	O	O
t	O	O
guarantee	O	O
absolute	O	O
stability	O	O
,	O	O
how	O	O
will	O	O
you	O	O
be	O	O
able	O	O
to	O	O
guarantee	O	O
stability	O	O
"	O	O
as	O	O
long	O	O
as	O	O
the	O	O
objects	O	O
are	O	O
in	O	O
the	O	O
same	O	O
Set	O	O
"	O	O
.	O	O
I	O	O
can	O	O
imagine	O	O
some	O	O
special	O	O
cases	O	O
(	O	O
like	O	O
using	O	O
sets	O	O
only	O	O
for	O	O
a	O	O
conversation	O	O
and	O	O
then	O	O
throwing	O	O
it	O	O
away	O	O
)	O	O
,	O	O
but	O	O
I	O	O
would	O	O
question	O	O
the	O	O
general	O	O
practicability	O	O
of	O	O
this	O	O
.	O	O
Short	O	O
version	O	O
:	O	O
#	O	O
li	O	O
Option	O	O
1	O	O
can	O	O
only	O	O
be	O	O
used	O	O
with	O	O
objects	O	O
within	O	O
a	O	O
single	O	O
session	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
can	O	O
,	O	O
use	O	O
Option	O	B-api_mention
2	O	O
.	O	O
(	O	O
Assign	O	O
PK	O	O
as	O	O
early	O	O
as	O	O
possible	O	O
,	O	O
because	O	O
you	O	O
can	O	O
'	O	O
t	O	O
use	O	O
the	O	O
objects	O	O
in	O	O
sets	O	O
until	O	O
the	O	O
PK	O	O
is	O	O
assigned	O	O
.	O	O
)	O	O
#	O	O
li	O	O
If	O	O
you	O	O
can	O	O
guarantee	O	O
relative	O	O
stability	O	O
,	O	O
you	O	O
can	O	O
use	O	O
Option	O	B-api_mention
3	O	O
.	O	O
But	O	O
be	O	O
careful	O	O
with	O	O
this	O	O
.	O	O
Question	O	O
-	O	O
4818699	O	O
,	O	O
answer	O	O
-	O	O
4818916	O	O
The	O	O
primary	O	O
use	O	O
of	O	O
AtomicInteger	B-api_mention	B-api_mention
is	O	O
when	O	O
you	O	O
are	O	O
in	O	O
a	O	O
multithreaded	O	O
context	O	O
and	O	O
you	O	O
need	O	O
to	O	O
perform	O	O
thread	O	O
safe	O	O
operations	O	O
on	O	O
an	O	O
integer	O	O
without	O	O
using	O	O
synchronized	O	O
.	O	O
The	O	O
assignation	O	O
and	O	O
retrieval	O	O
on	O	O
the	O	O
primitive	O	O
type	O	O
int	O	O
are	O	O
already	O	O
atomic	O	O
but	O	O
AtomicInteger	B-api_mention	B-api_mention
comes	O	O
with	O	O
many	O	O
operations	O	O
which	O	O
are	O	O
not	O	O
atomic	O	O
on	O	O
int	O	O
.	O	O
The	O	O
simplest	O	O
are	O	O
the	O	O
getAndXXX	O	O
or	O	O
xXXAndGet	O	O
.	O	O
For	O	O
instance	O	O
getAndIncrement	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
an	O	O
atomic	O	O
equivalent	O	O
to	O	O
i	O	O
+	O	O
+	O	O
which	O	O
is	O	O
not	O	O
atomic	O	O
because	O	O
it	O	O
is	O	O
actually	O	O
a	O	O
short	O	O
cut	O	O
for	O	O
three	O	O
operations	O	O
:	O	O
retrieval	O	O
,	O	O
addition	O	O
and	O	O
assignation	O	B-api_mention
.	O	I-api_mention
compareAndSet	B-api_mention	I-api_mention
is	O	O
very	O	O
useful	O	O
to	O	O
implements	O	O
semaphores	O	O
,	O	O
locks	O	O
,	O	O
latches	O	O
,	O	O
etc	O	O
.	O	O
Using	O	O
the	O	O
AtomicInteger	B-api_mention	B-api_mention
is	O	O
faster	O	O
and	O	O
more	O	O
readable	O	O
than	O	O
performing	O	O
the	O	O
same	O	O
using	O	O
synchronization	O	O
.	O	O
A	O	O
simple	O	O
test	O	O
:	O	O
#	O	O
pre	O	O
On	O	O
my	O	O
PC	O	O
with	O	O
Java	O	O
1	O	O
.	O	O
6	O	O
the	O	O
atomic	O	O
test	O	O
runs	O	O
in	O	O
3	O	O
seconds	O	O
while	O	O
the	O	O
synchronized	O	O
one	O	O
runs	O	O
in	O	O
about	O	O
5	O	O
.	O	O
5	O	O
seconds	O	O
.	O	O
The	O	O
problem	O	O
here	O	O
is	O	O
that	O	O
the	O	O
operation	O	O
to	O	O
synchronize	O	O
(	O	O
notAtomic	O	O
+	O	O
+	O	O
)	O	O
is	O	O
really	O	O
short	O	O
.	O	O
So	O	O
the	O	O
cost	O	O
of	O	O
the	O	O
synchronization	O	O
is	O	O
really	O	O
important	O	O
compared	O	O
to	O	O
the	O	O
operation	O	O
.	O	O
Beside	O	O
atomicity	O	O
AtomicInteger	B-api_mention	B-api_mention
can	O	O
be	O	O
use	O	O
as	O	O
a	O	O
mutable	O	O
version	O	O
of	O	O
Integer	B-api_mention	B-api_mention
for	O	O
instance	O	O
in	O	O
Map	B-api_mention	B-api_mention
s	O	O
as	O	O
values	O	O
.	O	O
Question	O	O
-	O	O
17781150	O	O
,	O	O
answer	O	O
-	O	O
17781168	O	O
The	O	O
value	O	O
you	O	O
are	O	O
looking	O	O
for	O	O
is	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
MIN	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
VALUE	I-api_mention	I-api_mention
.	O	O
#	O	O
blockquote	O	O
That	O	O
'	O	O
s	O	O
off	O	O
-	O	O
topic	O	O
for	O	O
Stack	O	O
Exchange	O	O
.	O	O
But	O	O
you	O	O
could	O	O
do	O	O
it	O	O
starting	O	O
from	O	O
the	O	O
definition	O	O
of	O	O
Java	O	O
integers	O	O
(	O	O
JLS	O	O
4	O	O
.	O	O
2	O	O
)	O	O
#	O	O
blockquote	O	O
and	O	O
#	O	O
blockquote	O	O
and	O	O
the	O	O
definition	O	O
of	O	O
the	O	O
Java	O	O
unary	O	O
'	O	O
-	O	O
'	O	O
operator	O	O
(	O	O
JLS	O	O
15	O	O
.	O	O
15	O	O
.	O	O
4	O	O
)	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
5839359	O	O
,	O	O
answer	O	O
-	O	O
5839392	O	O
You	O	O
'	O	O
re	O	O
essentially	O	O
running	O	O
out	O	O
of	O	O
memory	O	O
to	O	O
run	O	O
the	O	O
process	O	O
smoothly	O	O
.	O	O
Options	O	O
that	O	O
come	O	O
to	O	O
mind	O	O
:	O	O
#	O	O
li	O	O
Specify	O	O
more	O	O
memory	O	O
like	O	O
you	O	O
mentioned	O	O
,	O	O
try	O	O
something	O	O
in	O	O
between	O	O
like	O	O
-	O	O
Xmx512m	O	O
first	O	O
#	O	O
li	O	O
Work	O	O
with	O	O
smaller	O	O
batches	O	O
of	O	O
HashMap	B-api_mention	B-api_mention
objects	O	O
to	O	O
process	O	O
at	O	O
once	O	O
if	O	O
possible	O	O
#	O	O
li	O	O
If	O	O
you	O	O
have	O	O
a	O	O
lot	O	O
of	O	O
duplicate	O	O
strings	O	O
,	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
them	O	O
before	O	O
putting	O	O
them	O	O
into	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
#	O	O
li	O	O
Use	O	O
the	O	O
HashMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
initialCapacity	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
float	I-api_mention	I-api_mention
loadFactor	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
constructor	O	O
to	O	O
tune	O	O
for	O	O
your	O	O
case	O	O
Question	O	O
-	O	O
7520432	O	O
,	O	O
answer	O	O
-	O	O
29226136	O	O
Also	O	O
note	O	O
that	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
normally	O	O
contains	O	O
=	O	O
=	O	O
for	O	O
testing	O	O
as	O	O
this	O	O
is	O	O
the	O	O
first	O	O
thing	O	O
you	O	O
would	O	O
wish	O	O
to	O	O
test	O	O
for	O	O
if	O	O
you	O	O
wanted	O	O
to	O	O
test	O	O
if	O	O
two	O	O
objects	O	O
are	O	O
equal	O	O
.	O	O
And	O	O
=	O	O
=	O	O
actually	O	O
does	O	O
look	O	O
at	O	O
values	O	O
for	O	O
primitive	O	O
types	O	O
,	O	O
for	O	O
objects	O	O
it	O	O
checks	O	O
the	O	O
reference	O	O
.	O	O
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
38560612	O	O
This	O	O
is	O	O
part	O	O
of	O	O
JDK	O	O
9	O	O
in	O	O
the	O	O
form	O	O
of	O	O
or	O	O
,	O	O
which	O	O
takes	O	O
a	O	O
Supplier	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Your	O	O
example	O	O
would	O	O
then	O	O
be	O	O
:	O	O
return	O	O
serviceA	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
or	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
or	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
For	O	O
details	O	O
see	O	O
the	O	O
(	O	O
preliminary	O	O
)	O	O
Javadoc	O	O
or	O	O
this	O	O
post	O	O
I	O	O
wrote	O	O
.	O	O
Question	O	O
-	O	O
28681737	O	O
,	O	O
answer	O	O
-	O	O
28684917	O	O
The	O	O
short	O	O
answer	O	O
is	O	O
:	O	O
it	O	O
'	O	O
s	O	O
safe	O	O
if	O	O
you	O	O
use	O	O
them	O	O
safely	O	O
:	O	O
)	O	O
The	O	O
snarky	O	O
answer	O	O
:	O	O
tell	O	O
me	O	O
what	O	O
you	O	O
mean	O	O
by	O	O
traits	O	O
,	O	O
and	O	O
maybe	O	O
I	O	O
'	O	O
ll	O	O
give	O	O
you	O	O
a	O	O
better	O	O
answer	O	O
:	O	O
)	O	O
In	O	O
all	O	O
seriousness	O	O
,	O	O
the	O	O
term	O	O
"	O	O
trait	O	O
"	O	O
is	O	O
not	O	O
well	O	O
-	O	O
defined	O	O
.	O	O
Many	O	O
Java	O	O
developers	O	O
are	O	O
most	O	O
familiar	O	O
with	O	O
traits	O	O
as	O	O
they	O	O
are	O	O
expressed	O	O
in	O	O
Scala	O	O
,	O	O
but	O	O
Scala	O	O
is	O	O
far	O	O
from	O	O
the	O	O
first	O	O
language	O	O
to	O	O
have	O	O
traits	O	O
,	O	O
either	O	O
in	O	O
name	O	O
or	O	O
in	O	O
effect	O	O
.	O	O
For	O	O
example	O	O
,	O	O
in	O	O
Scala	O	O
,	O	O
traits	O	O
are	O	O
stateful	O	O
(	O	O
can	O	O
have	O	O
var	O	O
variables	O	O
)	O	O
;	O	O
in	O	O
Fortress	O	O
they	O	O
are	O	O
pure	O	O
behavior	O	O
.	O	O
Java	O	O
'	O	O
s	O	O
interfaces	O	O
with	O	O
default	O	O
methods	O	O
are	O	O
stateless	O	O
;	O	O
does	O	O
this	O	O
mean	O	O
they	O	O
are	O	O
not	O	O
traits	O	O
?	O	O
(	O	O
Hint	O	O
:	O	O
that	O	O
was	O	O
a	O	O
trick	O	O
question	O	O
.	O	O
)	O	O
Again	O	O
,	O	O
in	O	O
Scala	O	O
,	O	O
traits	O	O
are	O	O
composed	O	O
through	O	O
linearization	O	O
;	O	O
if	O	O
class	O	O
A	O	O
extends	O	O
traits	O	O
X	O	O
and	O	O
Y	O	O
,	O	O
then	O	O
the	O	O
order	O	O
in	O	O
which	O	O
X	O	O
and	O	O
Y	O	O
are	O	O
mixed	O	O
in	O	O
determines	O	O
how	O	O
conflicts	O	O
between	O	O
X	O	O
and	O	O
Y	O	O
are	O	O
resolved	O	O
.	O	O
In	O	O
Java	O	O
,	O	O
this	O	O
linearization	O	O
mechanism	O	O
is	O	O
not	O	O
present	O	O
(	O	O
it	O	O
was	O	O
rejected	O	O
,	O	O
in	O	O
part	O	O
,	O	O
because	O	O
it	O	O
was	O	O
too	O	O
"	O	O
un	O	O
-	O	O
Java	O	O
-	O	O
like	O	O
"	O	O
.	O	O
)	O	O
The	O	O
proximate	O	O
reason	O	O
for	O	O
adding	O	O
default	O	O
methods	O	O
to	O	O
interfaces	O	O
was	O	O
to	O	O
support	O	O
interface	O	O
evolution	O	O
,	O	O
but	O	O
we	O	O
were	O	O
well	O	O
aware	O	O
that	O	O
we	O	O
were	O	O
going	O	O
beyond	O	O
that	O	O
.	O	O
Whether	O	O
you	O	O
consider	O	O
that	O	O
to	O	O
be	O	O
"	O	O
interface	O	O
evolution	O	O
+	O	O
+	O	O
"	O	O
or	O	O
"	O	O
traits	O	O
-	O	O
-	O	O
"	O	O
is	O	O
a	O	O
matter	O	O
of	O	O
personal	O	O
interpretation	O	O
.	O	O
So	O	O
,	O	O
to	O	O
answer	O	O
your	O	O
question	O	O
about	O	O
safety	O	O
.	O	O
.	O	O
.	O	O
so	O	O
long	O	O
as	O	O
you	O	O
stick	O	O
to	O	O
what	O	O
the	O	O
mechanism	O	O
actually	O	O
supports	O	O
,	O	O
rather	O	O
than	O	O
trying	O	O
to	O	O
wishfully	O	O
stretch	O	O
it	O	O
to	O	O
something	O	O
it	O	O
does	O	O
not	O	O
support	O	O
,	O	O
you	O	O
should	O	O
be	O	O
fine	O	O
.	O	O
A	O	O
key	O	O
design	O	O
goal	O	O
was	O	O
that	O	O
,	O	O
from	O	O
the	O	O
perspective	O	O
of	O	O
the	O	O
client	O	O
of	O	O
an	O	O
interface	O	O
,	O	O
default	O	O
methods	O	O
should	O	O
be	O	O
indistinguishable	O	O
from	O	O
"	O	O
regular	O	O
"	O	O
interface	O	O
methods	O	O
.	O	O
The	O	O
default	O	O
-	O	O
ness	O	O
of	O	O
a	O	O
method	O	O
,	O	O
therefore	O	O
,	O	O
is	O	O
only	O	O
interesting	O	O
to	O	O
the	O	O
designer	O	O
and	O	O
implementor	O	O
of	O	O
the	O	O
interface	O	O
.	O	O
Here	O	O
are	O	O
some	O	O
use	O	O
cases	O	O
that	O	O
are	O	O
well	O	O
within	O	O
the	O	O
design	O	O
goals	O	O
:	O	O
#	O	O
li	O	O
Interface	O	O
evolution	O	O
.	O	O
Here	O	O
,	O	O
we	O	O
are	O	O
adding	O	O
a	O	O
new	O	O
method	O	O
to	O	O
an	O	O
existing	O	O
interface	O	O
,	O	O
which	O	O
has	O	O
a	O	O
sensible	O	O
default	O	O
implementation	O	O
in	O	O
terms	O	O
of	O	O
existing	O	O
methods	O	O
on	O	O
that	O	O
interface	O	O
.	O	O
An	O	O
example	O	O
would	O	O
be	O	O
adding	O	O
the	O	O
forEach	O	B-api_mention
method	O	O
to	O	O
Collection	B-api_mention	B-api_mention
,	O	O
where	O	O
the	O	O
default	O	O
implementation	O	O
is	O	O
written	O	O
in	O	O
terms	O	O
of	O	O
the	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
li	O	O
"	O	O
Optional	O	O
"	O	O
methods	O	O
.	O	O
Here	O	O
,	O	O
the	O	O
designer	O	O
of	O	O
an	O	O
interface	O	O
is	O	O
saying	O	O
"	O	O
Implementors	O	O
need	O	O
not	O	O
implement	O	O
this	O	O
method	O	O
if	O	O
they	O	O
are	O	O
willing	O	O
to	O	O
live	O	O
with	O	O
the	O	O
limitations	O	O
in	O	O
functionality	O	O
that	O	O
entails	O	O
"	O	O
.	O	O
For	O	O
example	O	O
,	O	O
Iterator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
was	O	O
given	O	O
a	O	O
default	O	O
which	O	O
throws	O	O
UnsupportedOperationException	O	B-api_mention
;	O	O
since	O	O
the	O	O
vast	O	O
majority	O	O
of	O	O
implementations	O	O
of	O	O
Iterator	O	O
have	O	O
this	O	O
behavior	O	O
anyway	O	O
,	O	O
the	O	O
default	O	O
makes	O	O
this	O	O
method	O	O
essentially	O	O
optional	O	O
.	O	O
(	O	O
If	O	O
the	O	O
behavior	O	O
from	O	O
AbstractCollection	B-api_mention	B-api_mention
were	O	O
expressed	O	O
as	O	O
defaults	O	O
on	O	O
Collection	B-api_mention	B-api_mention
,	O	O
we	O	O
might	O	O
do	O	O
the	O	O
same	O	O
for	O	O
the	O	O
mutative	O	O
methods	O	O
.	O	O
)	O	O
#	O	O
li	O	O
Convenience	O	O
methods	O	O
.	O	O
These	O	O
are	O	O
methods	O	O
that	O	O
are	O	O
strictly	O	O
for	O	O
convenience	O	O
,	O	O
again	O	O
generally	O	O
implemented	O	O
in	O	O
terms	O	O
of	O	O
non	O	O
-	O	O
default	O	O
methods	O	O
on	O	O
the	O	O
class	O	O
.	O	O
The	O	O
logger	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
in	O	O
your	O	O
first	O	O
example	O	O
is	O	O
a	O	O
reasonable	O	O
illustration	O	O
of	O	O
this	O	O
.	O	O
#	O	O
li	O	O
Combinators	O	O
.	O	O
These	O	O
are	O	O
compositional	O	O
methods	O	O
that	O	O
instantiate	O	O
new	O	O
instances	O	O
of	O	O
the	O	O
interface	O	O
based	O	O
on	O	O
the	O	O
current	O	O
instance	O	O
.	O	O
For	O	O
example	O	O
,	O	O
the	O	O
methods	O	O
Predicate	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
and	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Comparator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
thenComparing	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
examples	O	O
of	O	O
combinators	O	O
.	O	O
If	O	O
you	O	O
provide	O	O
a	O	O
default	O	O
implementation	O	O
,	O	O
you	O	O
should	O	O
also	O	O
provide	O	O
some	O	O
specification	O	O
for	O	O
the	O	O
default	O	O
(	O	O
in	O	O
the	O	O
JDK	O	O
,	O	O
we	O	O
use	O	O
the	O	O
@	O	O
implSpec	O	O
javadoc	O	O
tag	O	O
for	O	O
this	O	O
)	O	O
to	O	O
aid	O	O
implementors	O	O
in	O	O
understanding	O	O
whether	O	O
they	O	O
want	O	O
to	O	O
override	O	O
the	O	O
method	O	O
or	O	O
not	O	O
.	O	O
Some	O	O
defaults	O	O
,	O	O
like	O	O
convenience	O	O
methods	O	O
and	O	O
combinators	O	O
,	O	O
are	O	O
almost	O	O
never	O	O
overridden	O	O
;	O	O
others	O	O
,	O	O
like	O	O
optional	O	O
methods	O	O
,	O	O
are	O	O
often	O	O
overridden	O	O
.	O	O
You	O	O
need	O	O
to	O	O
provide	O	O
enough	O	O
specification	O	O
(	O	O
not	O	O
just	O	O
documentation	O	O
)	O	O
about	O	O
what	O	O
the	O	O
default	O	O
promises	O	O
to	O	O
do	O	O
,	O	O
so	O	O
the	O	O
implementor	O	O
can	O	O
make	O	O
a	O	O
sensible	O	O
decision	O	O
about	O	O
whether	O	O
they	O	O
need	O	O
to	O	O
override	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29502668	O	O
#	O	O
blockquote	O	O
It	O	O
'	O	O
s	O	O
checking	O	O
simple	O	O
equality	O	O
(	O	O
likely	O	O
for	O	O
the	O	O
purpose	O	O
of	O	O
a	O	O
micro	O	O
-	O	O
optimization	O	O
,	O	O
but	O	O
more	O	O
on	O	O
that	O	O
later	O	O
)	O	O
.	O	O
The	O	O
unusual	O	O
casting	O	O
is	O	O
necessary	O	O
because	O	O
Class	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
(	O	O
the	O	O
type	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	O
class	I-api_mention	O
)	O	O
and	O	O
Class	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
are	O	O
incomparable	O	O
types	O	O
.	O	O
Basically	O	O
,	O	O
for	O	O
an	O	O
equality	O	O
comparison	O	O
with	O	O
=	O	O
=	O	O
to	O	O
compile	O	O
,	O	O
one	O	O
of	O	O
the	O	O
sides	O	O
has	O	O
to	O	O
be	O	O
a	O	O
subtype	O	O
or	O	O
supertype	O	O
of	O	O
the	O	O
other	O	O
.	O	O
I	O	O
.	O	O
e	O	O
.	O	O
we	O	O
can	O	O
'	O	O
t	O	O
do	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
rules	O	O
for	O	O
generic	O	O
types	O	O
are	O	O
a	O	O
bit	O	O
more	O	O
complicated	O	O
and	O	O
there	O	O
are	O	O
a	O	O
few	O	O
cases	O	O
where	O	O
a	O	O
comparison	O	O
doesn	O	O
'	O	O
t	O	O
compile	O	O
,	O	O
but	O	O
it	O	O
may	O	O
still	O	O
evaluate	O	O
to	O	O
true	O	O
.	O	O
The	O	O
reason	O	O
Class	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
is	O	O
not	O	O
a	O	O
supertype	O	O
of	O	O
Class	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
,	O	O
despite	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
being	O	O
a	O	O
supertype	O	O
of	O	O
all	O	O
object	O	O
array	O	O
types	O	O
,	O	O
is	O	O
that	O	O
Java	O	O
generics	O	O
are	O	O
invariant	O	O
without	O	O
the	O	O
presence	O	O
of	O	O
a	O	O
wildcard	O	O
.	O	O
Another	O	O
way	O	O
to	O	O
do	O	O
the	O	O
comparison	O	O
would	O	O
be	O	O
:	O	O
(	O	O
newType	O	O
=	O	O
=	O	O
(	O	O
Class	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
)	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	O
class	I-api_mention	O
)	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
.	O	O
.	O	O
.	O	O
]	O	O
creates	O	O
an	O	O
array	O	O
the	O	O
normal	O	O
way	O	O
,	O	O
of	O	O
a	O	O
type	O	O
that	O	O
is	O	O
statically	O	O
known	O	O
.	O	O
Remember	O	O
,	O	O
the	O	O
code	O	O
has	O	O
just	O	O
checked	O	O
that	O	O
T	O	O
[	O	O
]	O	O
is	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
#	O	O
li	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
uses	O	O
reflection	O	O
to	O	O
dynamically	O	O
create	O	O
an	O	O
array	O	O
of	O	O
the	O	O
Class	O	O
type	O	O
passed	O	O
in	O	O
.	O	O
#	O	O
blockquote	O	O
An	O	O
operation	O	O
using	O	O
reflection	O	O
is	O	O
generally	O	O
slower	O	O
than	O	O
its	O	O
non	O	O
-	O	O
reflective	O	O
counterpart	O	O
.	O	O
The	O	O
reflection	O	O
tutorial	O	O
says	O	O
:	O	O
#	O	O
blockquote	O	O
Java	O	O
SE	O	O
is	O	O
filled	O	O
with	O	O
micro	O	O
-	O	O
optimization	O	O
like	O	O
this	O	O
.	O	O
The	O	O
writers	O	O
of	O	O
SE	O	O
try	O	O
to	O	O
squeeze	O	O
everything	O	O
they	O	O
can	O	O
out	O	O
of	O	O
it	O	O
.	O	O
But	O	O
I	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
worried	O	O
about	O	O
a	O	O
performance	O	O
hit	O	O
in	O	O
this	O	O
case	O	O
:	O	O
newInstance	O	O
and	O	O
copyOf	B-api_mention	O
are	O	O
HotSpot	O	O
intrinsics	O	O
.	O	O
This	O	O
means	O	O
that	O	O
ideally	O	O
calls	O	O
to	O	O
these	O	O
methods	O	O
get	O	O
replaced	O	O
with	O	O
machine	O	O
-	O	O
specific	O	O
assembly	O	O
.	O	O
Anecdotally	O	O
,	O	O
I	O	O
ran	O	O
some	O	O
tests	O	O
and	O	O
found	O	O
the	O	O
difference	O	O
between	O	O
new	O	O
Object	B-api_mention	B-api_mention
[	O	O
.	O	O
.	O	O
.	O	O
]	O	O
and	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
be	O	O
negligible	O	O
.	O	O
The	O	O
code	O	O
in	O	O
the	O	O
question	O	O
is	O	O
probably	O	O
a	O	O
relic	O	O
,	O	O
although	O	O
it	O	O
may	O	O
still	O	O
be	O	O
useful	O	O
on	O	O
less	O	O
well	O	O
-	O	O
equipped	O	O
JVMs	O	O
.	O	O
Reflection	O	O
can	O	O
also	O	O
be	O	O
disabled	O	O
in	O	O
certain	O	O
contexts	O	O
with	O	O
strict	O	O
security	O	O
(	O	O
such	O	O
as	O	O
an	O	O
applet	O	O
)	O	O
,	O	O
but	O	O
not	O	O
typically	O	O
for	O	O
a	O	O
normal	O	O
desktop	O	O
application	O	O
.	O	O
#	O	O
blockquote	O	O
In	O	O
general	O	O
,	O	O
you	O	O
will	O	O
probably	O	O
never	O	O
use	O	O
this	O	O
overload	O	O
.	O	O
This	O	O
overload	O	O
is	O	O
only	O	O
useful	O	O
if	O	O
you	O	O
want	O	O
to	O	O
change	O	O
the	O	O
type	O	O
of	O	O
the	O	O
array	O	O
.	O	O
#	O	O
li	O	O
Widening	O	O
:	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
Narrowing	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
'	O	O
s	O	O
more	O	O
typical	O	O
to	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	O
T	I-api_mention	O
[	I-api_mention	O
]	I-api_mention	O
,	I-api_mention	O
int	I-api_mention	O
)	I-api_mention	O
.	O	O
Question	O	O
-	O	O
29333689	O	O
,	O	O
answer	O	O
-	O	O
29341981	O	O
The	O	O
best	O	O
answer	O	O
is	O	O
already	O	O
given	O	O
(	O	O
XOR	O	O
-	O	O
ing	O	O
the	O	O
elements	O	O
)	O	O
,	O	O
this	O	O
is	O	O
to	O	O
provide	O	O
an	O	O
alternative	O	O
,	O	O
more	O	O
general	O	O
way	O	O
.	O	O
If	O	O
the	O	O
input	O	O
array	O	O
would	O	O
be	O	O
sorted	O	O
(	O	O
we	O	O
can	O	O
make	O	O
it	O	O
sorted	O	O
)	O	O
,	O	O
we	O	O
could	O	O
simply	O	O
iterate	O	O
over	O	O
the	O	O
elements	O	O
in	O	O
pairs	O	O
(	O	O
stepping	O	O
by	O	O
2	O	O
)	O	O
and	O	O
if	O	O
the	O	O
elements	O	O
of	O	O
the	O	O
"	O	O
pair	O	O
"	O	O
are	O	O
different	O	O
,	O	O
we	O	O
'	O	O
re	O	O
done	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
This	O	O
solution	O	O
sorts	O	O
the	O	O
input	O	O
array	O	O
;	O	O
if	O	O
this	O	O
is	O	O
unwanted	O	O
or	O	O
not	O	O
allowed	O	O
,	O	O
it	O	O
can	O	O
be	O	O
cloned	O	O
first	O	O
:	O	O
arr	O	O
=	O	O
arr	O	O
.	B-api_mention	B-api_mention
clone	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
If	O	O
input	O	O
array	O	O
is	O	O
sorted	O	O
,	O	O
the	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
call	O	O
can	O	O
be	O	O
left	O	O
out	O	O
of	O	O
course	O	O
.	O	O
Generalization	O	O
The	O	O
advantage	O	O
of	O	O
this	O	O
solution	O	O
is	O	O
that	O	O
it	O	O
can	O	O
be	O	O
applied	O	O
to	O	O
all	O	O
types	O	O
which	O	O
are	O	O
comparable	O	O
and	O	O
therefore	O	O
can	O	O
be	O	O
sorted	O	O
(	O	O
types	O	O
which	O	O
implement	O	O
Comparable	B-api_mention	B-api_mention
)	O	O
,	O	O
for	O	O
example	O	O
String	B-api_mention	B-api_mention
or	O	O
Date	B-api_mention	B-api_mention
.	O	O
The	O	O
XOR	O	O
solution	O	O
is	O	O
limited	O	O
to	O	O
numbers	O	O
only	O	O
.	O	O
Here	O	O
is	O	O
a	O	O
slightly	O	O
modified	O	O
version	O	O
which	O	O
takes	O	O
an	O	O
input	O	O
array	O	O
of	O	O
any	O	O
element	O	O
type	O	O
which	O	O
is	O	O
comparable	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
:	O	O
In	O	O
most	O	O
cases	O	O
you	O	O
could	O	O
also	O	O
use	O	O
arr	O	O
[	O	O
i	O	O
]	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
compare	O	O
elements	O	O
instead	O	O
of	O	O
using	O	O
Comparable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
compareTo	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
For	O	O
details	O	O
read	O	O
the	O	O
linked	O	O
javadoc	O	O
.	O	O
Quoting	O	O
the	O	O
relevant	O	O
part	O	O
:	O	O
#	O	O
blockquote	O	O
Now	O	O
you	O	O
can	O	O
call	O	O
this	O	O
with	O	O
a	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
for	O	O
example	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Output	O	O
:	O	O
2	O	O
Final	O	O
notes	O	O
:	O	O
Starting	O	O
from	O	O
the	O	O
problem	O	O
statement	O	O
it	O	O
is	O	O
not	O	O
checked	O	O
whether	O	O
there	O	O
are	O	O
more	O	O
than	O	O
2	O	O
occurrences	O	O
of	O	O
the	O	O
elements	O	O
,	O	O
and	O	O
neither	O	O
is	O	O
whether	O	O
the	O	O
array	O	O
length	O	O
is	O	O
odd	O	O
.	O	O
Also	O	O
the	O	O
second	O	O
example	O	O
doesn	O	O
'	O	O
t	O	O
check	O	O
for	O	O
null	O	O
values	O	O
,	O	O
these	O	O
are	O	O
to	O	O
be	O	O
added	O	O
if	O	O
necessary	O	O
.	O	O
Question	O	O
-	O	O
7488643	O	O
,	O	O
answer	O	O
-	O	O
7488669	O	O
Two	O	O
steps	O	O
:	O	O
#	O	O
li	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
items	O	O
=	O	O
commaSeparated	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
container	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725453	O	O
Since	O	O
all	O	O
lists	O	O
are	O	O
already	O	O
"	O	O
sorted	O	O
"	O	O
by	O	O
the	O	O
order	O	O
the	O	O
items	O	O
were	O	O
added	O	O
(	O	O
FIFO	O	O
ordering	O	O
)	O	O
,	O	O
you	O	O
can	O	O
"	O	O
resort	O	O
"	O	O
them	O	O
with	O	O
another	O	O
ordering	O	O
,	O	O
including	O	O
the	O	O
natural	O	O
ordering	O	O
of	O	O
elements	O	O
,	O	O
using	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Collections	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
EDIT	O	O
:	O	O
Lists	B-api_mention	O
as	O	O
data	O	O
structures	O	O
are	O	O
based	O	O
in	O	O
what	O	O
is	O	O
interesting	O	O
is	O	O
the	O	O
ordering	O	O
in	O	O
which	O	O
the	O	O
items	O	O
where	O	O
inserted	O	O
.	O	O
Sets	O	O
do	O	O
not	O	O
have	O	O
that	O	O
information	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
order	O	O
by	O	O
addition	O	O
time	O	O
,	O	O
use	O	O
List	B-api_mention	B-api_mention
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
order	O	O
by	O	O
other	O	O
criteria	O	O
,	O	O
use	O	O
SortedSet	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
30581531	O	O
What	O	O
is	O	O
the	O	O
maximum	O	O
number	O	O
of	O	O
parameters	O	O
that	O	O
a	O	O
method	O	O
in	O	O
Java	O	O
can	O	O
have	O	O
and	O	O
why	O	O
?	O	O
I	O	O
am	O	O
using	O	O
Java	O	O
1	O	O
.	O	O
8	O	O
on	O	O
a	O	O
64	O	O
-	O	O
bit	O	O
Windows	O	O
system	O	O
.	O	O
All	O	O
the	O	O
answers	O	O
on	O	O
StackOverflow	O	B-api_mention
about	O	O
this	O	O
say	O	O
that	O	O
the	O	O
technical	O	O
limit	O	O
is	O	O
255	O	O
parameters	O	O
without	O	O
specifying	O	O
why	O	O
.	O	O
To	O	O
be	O	O
precise	O	O
,	O	O
255	O	O
for	O	O
static	O	O
and	O	O
254	O	O
for	O	O
non	O	O
-	O	O
static	O	O
(	O	O
this	O	O
will	O	O
be	O	O
the	O	O
255th	O	O
in	O	O
this	O	O
case	O	O
)	O	O
methods	O	O
.	O	O
I	O	O
thought	O	O
this	O	O
could	O	O
be	O	O
specified	O	O
in	O	O
some	O	O
sort	O	O
of	O	O
specification	O	O
and	O	O
that	O	O
this	O	O
was	O	O
simply	O	O
a	O	O
statically	O	O
defined	O	O
maximum	O	O
number	O	O
of	O	O
parameters	O	O
allowed	O	O
.	O	O
But	O	O
this	O	O
was	O	O
only	O	O
valid	O	O
for	O	O
int	O	O
and	O	O
all	O	O
4	O	O
-	O	O
bytes	O	O
types	O	O
.	O	O
I	O	O
did	O	O
some	O	O
tests	O	O
with	O	O
long	O	O
parameters	O	O
,	O	O
and	O	O
I	O	O
was	O	O
only	O	O
able	O	O
to	O	O
declare	O	O
127	O	O
parameters	O	O
in	O	O
that	O	O
case	O	O
.	O	O
With	O	O
String	B-api_mention	B-api_mention
parameters	O	O
,	O	O
the	O	O
allowed	O	O
number	O	O
i	O	O
deduced	O	O
from	O	O
testing	O	O
is	O	O
255	O	O
(	O	O
it	O	O
may	O	O
be	O	O
because	O	O
the	O	O
reference	O	O
size	O	O
is	O	O
4	O	O
bytes	O	O
in	O	O
Java	O	O
?	O	O
)	O	O
.	O	O
But	O	O
since	O	O
I	O	O
am	O	O
using	O	O
a	O	O
64	O	O
-	O	O
bit	O	O
system	O	O
,	O	O
references	O	O
size	O	O
should	O	O
be	O	O
8	O	O
bytes	O	O
wide	O	O
and	O	O
so	O	O
with	O	O
String	B-api_mention	B-api_mention
parameters	O	O
the	O	O
maximum	O	O
allowed	O	O
number	O	O
should	O	O
be	O	O
127	O	O
,	O	O
similar	O	O
to	O	O
long	O	O
types	O	O
.	O	O
How	O	O
does	O	O
this	O	O
limit	O	O
is	O	O
exactly	O	O
applied	O	O
?	O	O
Does	O	O
the	O	O
limit	O	O
have	O	O
anything	O	O
to	O	O
do	O	O
with	O	O
the	O	O
stack	O	O
size	O	O
of	O	O
the	O	O
method	O	O
?	O	O
Note	O	O
:	O	O
I	O	O
am	O	O
not	O	O
really	O	O
going	O	O
to	O	O
use	O	O
these	O	O
many	O	O
parameters	O	O
in	O	O
any	O	O
method	O	O
,	O	O
but	O	O
this	O	O
question	O	O
is	O	O
only	O	O
to	O	O
clarify	O	O
the	O	O
exact	O	O
behavior	O	O
.	O	O
Question	O	O
-	O	O
27949213	O	O
,	O	O
answer	O	O
-	O	O
27949581	O	O
Imagine	O	O
you	O	O
have	O	O
a	O	O
phone	O	O
book	O	O
,	O	O
which	O	O
contains	O	O
people	O	O
,	O	O
which	O	O
have	O	O
a	O	O
String	B-api_mention	B-api_mention
firstName	O	O
and	O	O
a	O	O
String	O	B-api_mention
lastName	O	O
.	O	O
And	O	O
it	O	O
happens	O	O
that	O	O
in	O	O
your	O	O
phone	O	O
book	O	O
,	O	O
100	O	O
,	O	O
000	O	O
people	O	O
have	O	O
the	O	O
same	O	O
firstName	O	O
=	O	O
StringLiteral	O	O
.	O	O
Because	O	O
you	O	O
get	O	O
the	O	O
data	O	O
from	O	O
a	O	O
database	O	O
or	O	O
a	O	O
file	O	O
those	O	O
strings	O	O
are	O	O
not	O	O
interned	O	O
so	O	O
your	O	O
JVM	O	O
memory	O	O
contains	O	O
the	O	O
char	O	O
array	O	O
{	O	O
CharLiteral	O	O
,	O	O
CharLiteral	O	O
,	O	O
CharLiteral	O	O
,	O	O
CharLiteral	O	O
}	O	O
100	O	O
thousand	O	O
times	O	O
,	O	O
one	O	O
per	O	O
John	O	O
string	O	O
.	O	O
Each	O	O
of	O	O
these	O	O
arrays	O	O
takes	O	O
,	O	O
say	O	O
,	O	O
20	O	O
bytes	O	O
of	O	O
memory	O	O
so	O	O
those	O	O
100k	O	O
Johns	O	O
take	O	O
up	O	O
2	O	O
MB	O	O
of	O	O
memory	O	O
.	O	O
With	O	O
deduplication	O	O
,	O	O
the	O	O
JVM	O	O
will	O	O
realise	O	O
that	O	O
"	O	O
John	O	O
"	O	O
is	O	O
duplicated	O	O
many	O	O
times	O	O
and	O	O
make	O	O
all	O	O
those	O	O
John	O	O
strings	O	O
point	O	O
to	O	O
the	O	O
same	O	O
underlying	O	O
char	O	O
array	O	O
,	O	O
decreasing	O	O
the	O	O
memory	O	O
usage	O	O
from	O	O
2MB	O	O
to	O	O
20	O	O
bytes	O	O
.	O	O
You	O	O
can	O	O
find	O	O
a	O	O
more	O	O
detailed	O	O
explanation	O	O
in	O	O
the	O	O
JEP	O	O
.	O	O
In	O	O
particular	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
7935858	O	O
I	O	O
have	O	O
prepared	O	O
a	O	O
simple	O	O
code	O	O
snippet	O	O
in	O	O
order	O	O
to	O	O
separate	O	O
the	O	O
erroneous	O	O
portion	O	O
from	O	O
my	O	O
web	O	O
application	O	O
.	O	O
#	O	O
pre	O	O
I	O	O
have	O	O
tested	O	O
it	O	O
while	O	O
building	O	O
a	O	O
web	O	O
application	O	O
JSF	O	O
.	O	O
I	O	O
just	O	O
want	O	O
to	O	O
know	O	O
why	O	O
in	O	O
the	O	O
above	O	O
code	O	O
temp	O	O
.	O	B-api_mention
split	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
does	O	O
not	O	O
work	O	O
.	O	O
The	O	O
statement	O	O
,	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
displays	O	O
nothing	O	O
on	O	O
the	O	O
console	O	O
means	O	O
that	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
go	O	O
through	O	O
the	O	O
loop	O	O
.	O	O
When	O	O
I	O	O
change	O	O
the	O	O
argument	O	O
of	O	O
the	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
other	O	O
characters	O	O
,	O	O
It	O	O
works	O	O
just	O	O
fine	O	O
as	O	O
usual	O	O
.	O	O
What	O	O
might	O	O
be	O	O
the	O	O
problem	O	O
?	O	O
Question	O	O
-	O	O
12862659	O	O
,	O	O
answer	O	O
-	O	O
12862662	O	O
use	O	O
the	O	O
second	O	O
argument	O	O
on	O	O
the	O	O
Mockito	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
verify	I-api_mention	I-api_mention
method	O	O
,	O	O
as	O	O
in	O	O
:	O	O
verify	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
someMethod	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
Question	O	O
-	O	O
13102045	O	O
,	O	O
answer	O	O
-	O	O
7056786	O	O
It	O	O
'	O	O
s	O	O
because	O	O
when	O	O
you	O	O
enter	O	O
a	O	O
number	O	O
then	O	O
press	O	O
Enter	O	O
,	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
consumes	O	O
only	O	O
the	O	O
number	O	O
,	O	O
not	O	O
the	O	O
"	O	O
end	O	O
of	O	O
line	O	O
"	O	O
.	O	O
When	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
executes	O	O
,	O	O
it	O	O
consumes	O	O
the	O	O
"	O	O
end	O	O
of	O	O
line	O	O
"	O	O
still	O	O
in	O	O
the	O	O
buffer	O	O
from	O	O
the	O	O
first	O	O
input	O	O
.	O	O
Instead	O	O
,	O	O
use	O	O
input	O	O
.	B-api_mention	B-api_mention
nextLine	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
immediately	O	O
after	O	O
input	O	O
.	B-api_mention	B-api_mention
nextInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
31202946	O	O
,	O	O
answer	O	O
-	O	O
31203252	O	O
#	O	O
blockquote	O	O
This	O	O
question	O	O
actually	O	O
boils	O	O
down	O	O
to	O	O
the	O	O
fact	O	O
that	O	O
you	O	O
should	O	O
always	O	O
prefer	O	O
composition	O	O
over	O	O
inheritance	O	O
.	O	O
If	O	O
the	O	O
Thread	B-api_mention	B-api_mention
class	O	O
was	O	O
declared	O	O
as	O	O
abstract	O	O
,	O	O
the	O	O
language	O	O
would	O	O
have	O	O
to	O	O
provide	O	O
another	O	O
class	O	O
that	O	O
extended	O	O
from	O	O
it	O	O
which	O	O
programmers	O	O
could	O	O
use	O	O
to	O	O
create	O	O
a	O	O
Thread	B-api_mention	B-api_mention
.	O	O
Your	O	O
question	O	O
would	O	O
then	O	O
be	O	O
about	O	O
why	O	O
this	O	O
class	O	O
that	O	O
extends	O	O
from	O	O
Thread	B-api_mention	B-api_mention
is	O	O
not	O	O
abstract	O	O
.	O	O
If	O	O
the	O	O
language	O	O
did	O	O
not	O	O
provide	O	O
another	O	O
class	O	O
that	O	O
extends	O	O
from	O	O
Thread	B-api_mention	B-api_mention
,	O	O
programmers	O	O
would	O	O
have	O	O
to	O	O
create	O	O
their	O	O
own	O	O
class	O	O
that	O	O
extend	O	O
s	O	O
from	O	O
Thread	B-api_mention	B-api_mention
and	O	O
override	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
#	O	O
blockquote	O	O
The	O	O
only	O	O
possible	O	O
explanation	O	O
I	O	O
can	O	O
give	O	O
is	O	O
that	O	O
the	O	O
developers	O	O
of	O	O
the	O	O
language	O	O
saw	O	O
some	O	O
use	O	O
-	O	O
cases	O	O
for	O	O
overriding	O	O
start	O	O
when	O	O
the	O	O
class	O	O
was	O	O
introduced	O	O
to	O	O
the	O	O
JDK	O	O
.	O	O
The	O	O
first	O	O
version	O	O
of	O	O
Java	O	O
that	O	O
I	O	O
used	O	O
was	O	O
1	O	O
.	O	O
5	O	O
and	O	O
I	O	O
personally	O	O
have	O	O
not	O	O
come	O	O
across	O	O
a	O	O
use	O	O
-	O	O
case	O	O
where	O	O
I	O	O
found	O	O
the	O	O
need	O	O
to	O	O
override	O	O
start	O	O
.	O	O
As	O	O
JB	O	O
Nizet	O	O
stated	O	O
in	O	O
his	O	O
answer	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
19431234	O	O
,	O	O
answer	O	O
-	O	O
23526153	O	O
Everything	O	O
is	O	O
here	O	O
:	O	O
#	O	O
a	O	O
The	O	O
answer	O	O
with	O	O
"	O	O
round	O	O
-	O	O
tripping	O	O
"	O	O
is	O	O
not	O	O
exact	O	O
:	O	O
when	O	O
you	O	O
do	O	O
LocalDateTime	B-api_mention	B-api_mention
ldt	O	O
=	O	O
LocalDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
ofInstant	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
if	O	O
your	O	O
system	O	O
timezone	O	O
is	O	O
not	O	O
UTC	O	O
/	O	O
GMT	O	O
,	O	O
you	O	O
change	O	O
the	O	O
time	O	O
!	O	O
Question	O	O
-	O	O
8275499	O	O
,	O	O
answer	O	O
-	O	O
8275761	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
defined	O	O
in	O	O
Object	B-api_mention	B-api_mention
class	O	O
with	O	O
the	O	O
following	O	O
signature	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
it	O	O
is	O	O
not	O	O
defined	O	O
as	O	O
static	O	O
,	O	O
you	O	O
can	O	O
not	O	O
call	O	O
it	O	O
within	O	O
a	O	O
static	O	O
code	O	O
block	O	O
.	O	O
See	O	O
these	O	O
answers	O	O
for	O	O
more	O	O
information	O	O
:	O	O
Q1	O	O
,	O	O
Q2	O	O
,	O	O
Q3	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
in	O	O
a	O	O
static	O	O
context	O	O
,	O	O
then	O	O
you	O	O
have	O	O
to	O	O
use	O	O
the	O	O
class	O	O
literal	O	O
expression	O	O
to	O	O
get	O	O
the	O	O
Class	B-api_mention	B-api_mention
,	O	O
so	O	O
you	O	O
basically	O	O
have	O	O
to	O	O
do	O	O
like	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
type	O	O
of	O	O
expression	O	O
is	O	O
called	O	O
Class	B-api_mention	O
Literals	O	O
and	O	O
they	O	O
are	O	O
explained	O	O
in	O	O
Java	O	O
Language	O	O
Specification	O	O
Book	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
blockquote	O	O
You	O	O
can	O	O
also	O	O
find	O	O
information	O	O
about	O	O
this	O	O
subject	O	O
on	O	O
API	O	O
documentation	O	O
for	O	O
Class	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
31707746	O	O
One	O	O
of	O	O
most	O	O
upleasing	O	O
functional	O	O
forEach	B-api_mention	O
'	O	O
s	O	O
limitations	O	O
is	O	O
lack	O	O
of	O	O
checked	O	O
exceptions	O	O
support	O	O
.	O	O
One	O	O
possible	O	O
workaround	O	O
is	O	O
to	O	O
replace	O	O
terminal	O	O
forEach	B-api_mention	O
with	O	O
plain	O	O
old	O	O
foreach	O	O
loop	O	O
:	O	O
#	O	O
pre	O	O
Here	O	O
is	O	O
list	O	O
of	O	O
most	O	O
popular	O	O
questions	O	O
with	O	O
other	O	O
workarounds	O	O
on	O	O
checked	O	O
exception	O	O
handling	O	O
within	O	O
lambdas	O	O
and	O	O
streams	O	O
:	O	O
Java	O	O
8	O	O
Lambda	O	O
function	O	O
that	O	O
throws	O	O
exception	O	O
?	O	O
Java	O	O
8	O	O
:	O	O
Lambda	O	O
-	O	O
Streams	O	O
,	O	O
Filter	O	O
by	O	O
Method	O	O
with	O	O
Exception	B-api_mention	B-api_mention
How	O	O
can	O	O
I	O	O
throw	O	O
CHECKED	O	O
exceptions	O	O
from	O	O
inside	O	O
Java	O	O
8	O	O
streams	O	O
?	O	O
Java	O	O
8	O	O
:	O	O
Mandatory	O	O
checked	O	O
exceptions	O	O
handling	O	O
in	O	O
lambda	O	O
expressions	O	O
.	O	O
Why	O	O
mandatory	O	O
,	O	O
not	O	O
optional	O	O
?	O	O
Question	O	O
-	O	O
21242110	O	O
,	O	O
answer	O	O
-	O	O
27378709	O	O
Better	O	O
way	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
Advantages	O	O
of	O	O
this	O	O
version	O	O
:	O	O
#	O	O
li	O	O
works	O	O
regardless	O	O
the	O	O
input	O	O
is	O	O
an	O	O
instance	O	O
of	O	O
java	O	B-api_mention
.	O	I-api_mention
util	O	I-api_mention
.	O	I-api_mention
Date	O	I-api_mention
or	O	O
it	O	O
'	O	O
s	O	O
subclass	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
(	O	O
unlike	O	O
@	O	O
JodaStephen	O	O
'	O	O
s	O	O
way	O	O
)	O	O
.	O	O
This	O	O
is	O	O
common	O	O
with	O	O
JDBC	O	O
originated	O	O
data	O	O
.	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sql	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Date	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toInstant	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
always	O	O
throws	O	O
an	O	O
exception	O	O
.	O	O
#	O	O
li	O	O
it	O	O
'	O	O
s	O	O
the	O	O
same	O	O
for	O	O
JDK8	O	O
and	O	O
JDK7	O	O
with	O	O
JSR	O	O
-	O	O
310	O	O
backport	O	O
I	O	O
personally	O	O
use	O	O
an	O	O
utility	O	O
class	O	O
(	O	O
but	O	O
this	O	O
is	O	O
not	O	O
backport	O	O
-	O	O
compatible	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
asLocalDate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
here	O	O
is	O	O
null	O	O
-	O	O
safe	O	O
,	O	O
uses	O	O
toLocalDate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
if	O	O
input	O	O
is	O	O
java	B-api_mention	O
.	I-api_mention	O
sql	I-api_mention	O
.	I-api_mention	O
Date	I-api_mention	O
(	O	O
it	O	O
may	O	O
be	O	O
overriden	O	O
by	O	O
the	O	O
JDBC	O	O
driver	O	O
to	O	O
avoid	O	O
timezone	O	O
problems	O	O
or	O	O
unnecessary	O	O
calculations	O	O
)	O	O
,	O	O
otherwise	O	O
uses	O	O
the	O	O
abovementioned	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
I	O	O
'	O	O
ve	O	O
read	O	O
on	O	O
many	O	O
Web	O	O
sites	O	O
Optional	B-api_mention	B-api_mention
should	O	O
be	O	O
used	O	O
as	O	O
a	O	O
return	O	O
type	O	O
only	O	O
,	O	O
and	O	O
not	O	O
used	O	O
in	O	O
method	O	O
arguments	O	O
.	O	O
I	O	O
'	O	O
m	O	O
struggling	O	O
to	O	O
find	O	O
a	O	O
logical	O	O
reason	O	O
why	O	O
.	O	O
For	O	O
example	O	O
I	O	O
have	O	O
a	O	O
piece	O	O
of	O	O
logic	O	O
which	O	O
has	O	O
2	O	O
optional	O	O
parameters	O	O
.	O	O
Therefore	O	O
I	O	O
think	O	O
it	O	O
would	O	O
make	O	O
sense	O	O
to	O	O
write	O	O
my	O	O
method	O	O
signature	O	O
like	O	O
this	O	O
(	O	O
solution	O	O
1	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Many	O	O
web	O	O
pages	O	O
specify	O	O
Optional	B-api_mention	B-api_mention
should	O	O
not	O	O
be	O	O
used	O	O
as	O	O
method	O	O
arguments	O	O
.	O	O
With	O	O
this	O	O
in	O	O
mind	O	O
I	O	O
could	O	O
use	O	O
the	O	O
following	O	O
method	O	O
signature	O	O
and	O	O
add	O	O
a	O	O
clear	O	O
Javadoc	O	O
comment	O	O
specifying	O	O
the	O	O
arguments	O	O
maybe	O	O
null	O	O
hoping	O	O
future	O	O
future	O	O
maintainers	O	O
will	O	O
read	O	O
the	O	O
javadoc	O	O
and	O	O
therefore	O	O
always	O	O
carry	O	O
out	O	O
null	O	O
checks	O	O
prior	O	O
to	O	O
using	O	O
the	O	O
arguments	O	O
(	O	O
solution	O	O
2	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Alternatively	O	O
I	O	O
could	O	O
replace	O	O
my	O	O
method	O	O
with	O	O
4	O	O
public	O	O
methods	O	O
to	O	O
provide	O	O
a	O	O
nicer	O	O
interface	O	O
and	O	O
make	O	O
it	O	O
more	O	O
obvious	O	O
p1	O	O
and	O	O
p2	O	O
are	O	O
optional	O	O
(	O	O
solution	O	O
3	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
I	O	O
try	O	O
writing	O	O
the	O	O
code	O	O
of	O	O
the	O	O
class	O	O
which	O	O
invokes	O	O
this	O	O
piece	O	O
of	O	O
logic	O	O
for	O	O
each	O	O
approach	O	O
.	O	O
I	O	O
first	O	O
retrieve	O	O
the	O	O
2	O	O
input	O	O
parameters	O	O
from	O	O
another	O	O
object	O	O
which	O	O
returns	O	O
optionals	O	O
and	O	O
then	O	O
I	O	O
invoke	O	O
calculateSomething	O	O
.	O	O
Therefore	O	O
if	O	O
solution	O	O
1	O	O
is	O	O
used	O	O
the	O	O
calling	O	O
code	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
if	O	O
solution	O	O
2	O	O
is	O	O
used	O	O
the	O	O
calling	O	O
code	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
if	O	O
solution	O	O
3	O	O
is	O	O
used	O	O
I	O	O
could	O	O
use	O	O
the	O	O
code	O	O
above	O	O
or	O	O
I	O	O
could	O	O
use	O	O
the	O	O
following	O	O
(	O	O
but	O	O
its	O	O
a	O	O
significant	O	O
amount	O	O
more	O	O
code	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
my	O	O
question	O	O
is	O	O
why	O	O
is	O	O
it	O	O
considered	O	O
bad	O	O
practice	O	O
to	O	O
use	O	O
Optionals	O	B-api_mention
as	O	O
method	O	O
arguments	O	O
as	O	O
in	O	O
solution	O	O
1	O	O
?	O	O
It	O	O
looks	O	O
like	O	O
the	O	O
most	O	O
readable	O	O
solution	O	O
to	O	O
me	O	O
and	O	O
makes	O	O
it	O	O
most	O	O
obvious	O	O
that	O	O
the	O	O
parameters	O	O
could	O	O
be	O	O
empty	O	O
/	O	O
null	O	O
to	O	O
future	O	O
maintainers	O	O
.	O	O
(	O	O
I	O	O
'	O	O
m	O	O
aware	O	O
the	O	O
designers	O	O
of	O	O
Optional	B-api_mention	B-api_mention
intended	O	O
it	O	O
to	O	O
only	O	O
be	O	O
used	O	O
as	O	O
a	O	O
return	O	O
type	O	O
,	O	O
but	O	O
I	O	O
can	O	O
'	O	O
t	O	O
find	O	O
any	O	O
logical	O	O
reasons	O	O
not	O	O
to	O	O
use	O	O
it	O	O
in	O	O
this	O	O
scenario	O	O
)	O	O
Question	O	O
-	O	O
31188231	O	O
,	O	O
answer	O	O
-	O	O
31190722	O	O
We	O	O
can	O	O
draw	O	O
a	O	O
parallel	O	O
with	O	O
abstract	O	O
class	O	O
.	O	O
An	O	O
abstract	O	O
class	O	O
is	O	O
intended	O	O
to	O	O
be	O	O
subclassed	O	O
so	O	O
that	O	O
the	O	O
abstract	O	O
methods	O	O
can	O	O
be	O	O
implemented	O	O
.	O	O
The	O	O
abstract	O	O
class	O	O
itself	O	O
contains	O	O
concrete	O	O
methods	O	O
that	O	O
invoke	O	O
the	O	O
abstract	O	O
methods	O	O
.	O	O
The	O	O
abstract	O	O
class	O	O
is	O	O
free	O	O
to	O	O
evolve	O	O
by	O	O
adding	O	O
more	O	O
concrete	O	O
methods	O	O
;	O	O
and	O	O
this	O	O
practice	O	O
may	O	O
break	O	O
subclasses	O	O
.	O	O
Therefore	O	O
the	O	O
exact	O	O
problem	O	O
you	O	O
described	O	O
existed	O	O
even	O	O
before	O	O
Java8	O	O
.	O	O
The	O	O
problem	O	O
is	O	O
much	O	O
more	O	O
manifested	O	O
on	O	O
Collection	B-api_mention	B-api_mention
APIs	O	O
because	O	O
there	O	O
are	O	O
a	O	O
lot	O	O
of	O	O
subclasses	O	O
out	O	O
in	O	O
the	O	O
wild	O	O
.	O	O
While	O	O
the	O	O
leading	O	O
motivation	O	O
of	O	O
default	O	O
method	O	O
was	O	O
to	O	O
add	O	O
some	O	O
useful	O	O
methods	O	O
to	O	O
existing	O	O
Collection	B-api_mention	B-api_mention
APIs	O	O
without	O	O
breaking	O	O
subclasses	O	O
,	O	O
they	O	O
had	O	O
to	O	O
exercise	O	O
great	O	O
self	O	O
-	O	O
control	O	O
of	O	O
doing	O	O
it	O	O
too	O	O
much	O	O
,	O	O
for	O	O
fear	O	O
of	O	O
breaking	O	O
subclasses	O	O
.	O	O
A	O	O
default	O	O
method	O	O
is	O	O
added	O	O
only	O	O
if	O	O
it	O	O
'	O	O
s	O	O
absolutely	O	O
necessary	O	O
.	O	O
The	O	O
real	O	O
question	O	O
here	O	O
is	O	O
,	O	O
why	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
sort	I-api_mention	I-api_mention
is	O	O
considered	O	O
absolutely	O	O
necessary	O	O
.	O	O
I	O	O
think	O	O
that	O	O
is	O	O
debatable	O	O
.	O	O
Regardless	O	O
of	O	O
why	O	O
default	O	O
method	O	O
was	O	O
introduced	O	O
in	O	O
the	O	O
1st	O	O
place	O	O
,	O	O
it	O	O
is	O	O
now	O	O
a	O	O
great	O	O
tool	O	O
for	O	O
API	O	O
designers	O	O
,	O	O
and	O	O
we	O	O
ought	O	O
to	O	O
treat	O	O
it	O	O
the	O	O
same	O	O
as	O	O
concrete	O	O
methods	O	O
in	O	O
abstract	O	O
classes	O	O
-	O	O
they	O	O
need	O	O
to	O	O
be	O	O
designed	O	O
carefully	O	O
up	O	O
front	O	O
;	O	O
and	O	O
new	O	O
ones	O	O
must	O	O
be	O	O
introduced	O	O
with	O	O
great	O	O
caution	O	O
.	O	O
Question	O	O
-	O	O
7707556	O	O
,	O	O
answer	O	O
-	O	O
15870428	O	O
There	O	O
is	O	O
a	O	O
subtle	O	O
issue	O	O
here	O	O
that	O	O
is	O	O
a	O	O
bit	O	O
of	O	O
a	O	O
gotcha	O	O
.	O	O
The	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
a	O	O
base	O	O
implementation	O	O
in	O	O
Object	B-api_mention	B-api_mention
.	O	I-api_mention
CharSequence	B-api_mention	I-api_mention
is	O	O
an	O	O
interface	O	O
;	O	O
and	O	O
although	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
appears	O	O
as	O	O
part	O	O
of	O	O
that	O	O
interface	O	O
,	O	O
there	O	O
is	O	O
nothing	O	O
at	O	O
compile	O	O
-	O	O
time	O	O
that	O	O
will	O	O
force	O	O
you	O	O
to	O	O
override	O	O
it	O	O
and	O	O
honor	O	O
the	O	O
additional	O	O
constraints	O	O
that	O	O
the	O	O
CharSequence	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
'	O	O
s	O	O
javadoc	O	O
puts	O	O
on	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
;	O	O
ie	O	O
that	O	O
it	O	O
should	O	O
return	O	O
a	O	O
string	O	O
containing	O	O
the	O	O
characters	O	O
in	O	O
the	O	O
order	O	O
returned	O	O
by	O	O
charAt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Your	O	O
IDE	O	O
won	O	O
'	O	O
t	O	O
even	O	O
help	O	O
you	O	O
out	O	O
by	O	O
reminding	O	O
that	O	O
you	O	O
that	O	O
you	O	O
probably	O	O
should	O	O
override	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
For	O	O
example	O	O
,	O	O
in	O	O
intellij	O	O
,	O	O
this	O	O
is	O	O
what	O	O
you	O	O
'	O	O
ll	O	O
see	O	O
if	O	O
you	O	O
create	O	O
a	O	O
new	O	O
CharSequence	B-api_mention	B-api_mention
implementation	O	O
:	O	O
#	O	O
a	O	O
.	O	O
Note	O	O
the	O	O
absence	O	O
of	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
.	O	O
If	O	O
you	O	O
rely	O	O
on	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
on	O	O
an	O	O
arbitrary	O	O
CharSequence	B-api_mention	B-api_mention
,	O	O
it	O	O
should	O	O
work	O	O
provided	O	O
the	O	O
CharSequence	B-api_mention	B-api_mention
implementer	O	O
did	O	O
their	O	O
job	O	O
properly	O	O
.	O	O
But	O	O
if	O	O
you	O	O
want	O	O
to	O	O
avoid	O	O
any	O	O
uncertainty	O	O
altogether	O	O
,	O	O
you	O	O
should	O	O
use	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
and	O	O
append	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
like	O	O
so	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
12552863	O	O
The	O	O
Java	O	O
7	O	O
try	O	O
-	O	O
with	O	O
-	O	O
resources	O	O
syntax	O	O
(	O	O
also	O	O
known	O	O
as	O	O
ARM	O	O
block	O	O
(	O	O
Automatic	O	O
Resource	O	O
Management	O	O
)	O	O
)	O	O
is	O	O
nice	O	O
,	O	O
short	O	O
and	O	O
straightforward	O	O
when	O	O
using	O	O
only	O	O
one	O	O
AutoCloseable	B-api_mention	B-api_mention
resource	O	O
.	O	O
However	O	O
,	O	O
I	O	O
am	O	O
not	O	O
sure	O	O
what	O	O
is	O	O
the	O	O
correct	O	O
idiom	O	O
when	O	O
I	O	O
need	O	O
to	O	O
declare	O	O
multiple	O	O
resources	O	O
that	O	O
are	O	O
dependent	O	O
on	O	O
each	O	O
other	O	O
,	O	O
for	O	O
example	O	O
a	O	O
FileWriter	B-api_mention	B-api_mention
and	O	O
a	O	O
BufferedWriter	B-api_mention	O
that	O	O
wraps	O	O
it	O	O
.	O	O
Of	O	O
course	O	O
,	O	O
this	O	O
question	O	O
concerns	O	O
any	O	O
case	O	O
when	O	O
some	O	O
AutoCloseable	B-api_mention	B-api_mention
resources	O	O
are	O	O
wrapped	O	O
,	O	O
not	O	O
only	O	O
these	O	O
two	O	O
specific	O	O
classes	O	O
.	O	O
I	O	O
came	O	O
up	O	O
with	O	O
the	O	O
three	O	O
following	O	O
alternatives	O	O
:	O	O
1	O	O
)	O	O
The	O	O
naive	O	O
idiom	O	O
I	O	O
have	O	O
seen	O	O
is	O	O
to	O	O
declare	O	O
only	O	O
the	O	O
top	O	O
-	O	O
level	O	O
wrapper	O	O
in	O	O
the	O	O
ARM	O	O
-	O	O
managed	O	O
variable	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
is	O	O
nice	O	O
and	O	O
short	O	O
,	O	O
but	O	O
it	O	O
is	O	O
broken	O	O
.	O	O
Because	O	O
the	O	O
underlying	O	O
FileWriter	B-api_mention	B-api_mention
is	O	O
not	O	O
declared	O	O
in	O	O
a	O	O
variable	O	O
,	O	O
it	O	O
will	O	O
never	O	O
be	O	O
closed	O	O
directly	O	O
in	O	O
the	O	O
generated	O	O
finally	O	O
block	O	O
.	O	O
It	O	O
will	O	O
be	O	O
closed	O	O
only	O	O
through	O	O
the	O	O
close	O	O
method	O	O
of	O	O
the	O	O
wrapping	O	O
BufferedWriter	B-api_mention	B-api_mention
.	O	O
The	O	O
problem	O	O
is	O	O
,	O	O
that	O	O
if	O	O
an	O	O
exception	O	O
is	O	O
thrown	O	O
from	O	O
the	O	O
bw	O	O
'	O	O
s	O	O
constructor	O	O
,	O	O
it	O	O
'	O	O
s	O	O
close	B-api_mention	O
will	O	O
not	O	O
be	O	O
called	O	O
and	O	O
therefore	O	O
the	O	O
underlying	O	O
FileWriter	B-api_mention	B-api_mention
will	O	O
not	O	O
be	O	O
closed	O	O
.	O	O
2	O	O
)	O	O
#	O	O
pre	O	O
Here	O	O
,	O	O
both	O	O
the	O	O
underlying	O	O
and	O	O
the	O	O
wrapping	O	O
resource	O	O
are	O	O
declared	O	O
in	O	O
the	O	O
ARM	O	O
-	O	O
managed	O	O
variables	O	O
,	O	O
so	O	O
both	O	O
of	O	O
them	O	O
will	O	O
be	O	O
certainly	O	O
closed	O	O
,	O	O
so	O	O
certainly	O	O
that	O	O
the	O	O
underlying	O	O
fw	O	O
.	B-api_mention	B-api_mention
close	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
be	O	O
called	O	O
twice	O	O
,	O	O
first	O	O
directly	O	O
and	O	O
for	O	O
the	O	O
second	O	O
time	O	O
through	O	O
the	O	O
wrapping	O	O
bw	O	O
.	B-api_mention	B-api_mention
close	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
should	O	O
not	O	O
be	O	O
a	O	O
problem	O	O
for	O	O
these	O	O
two	O	O
specific	O	O
classes	O	O
that	O	O
both	O	O
implement	O	O
Closeable	B-api_mention	B-api_mention
(	O	O
which	O	O
is	O	O
a	O	O
subtype	O	O
of	O	O
AutoCloseable	B-api_mention	B-api_mention
)	O	O
,	O	O
whose	O	O
contract	O	O
states	O	O
that	O	O
multiple	O	O
calls	O	O
to	O	O
close	O	O
are	O	O
permitted	O	O
:	O	O
#	O	O
blockquote	O	O
However	O	O
,	O	O
in	O	O
a	O	O
general	O	O
case	O	O
,	O	O
I	O	O
can	O	O
have	O	O
resources	O	O
that	O	O
do	O	O
implement	O	O
only	O	O
AutoCloseable	B-api_mention	B-api_mention
(	O	O
and	O	O
not	O	O
Closeable	B-api_mention	B-api_mention
)	O	O
,	O	O
which	O	O
doesn	O	O
'	O	O
t	O	O
guarantee	O	O
that	O	O
the	O	O
close	B-api_mention	O
can	O	O
be	O	O
called	O	O
multiple	O	O
times	O	O
:	O	O
#	O	O
blockquote	O	O
3	O	O
)	O	O
#	O	O
pre	O	O
This	O	O
version	O	O
should	O	O
be	O	O
theoretically	O	O
correct	O	O
,	O	O
because	O	O
only	O	O
the	O	O
fw	O	O
represents	O	O
a	O	O
real	O	O
resource	O	O
that	O	O
needs	O	O
to	O	O
be	O	O
cleaned	O	O
up	O	O
.	O	O
The	O	O
bw	O	O
does	O	O
'	O	O
t	O	O
itself	O	O
hold	O	O
any	O	O
resource	O	O
,	O	O
it	O	O
only	O	O
delegates	O	O
to	O	O
the	O	O
fw	O	O
,	O	O
so	O	O
it	O	O
should	O	O
be	O	O
sufficient	O	O
to	O	O
only	O	O
close	O	O
the	O	O
underlying	O	O
fw	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
the	O	O
syntax	O	O
is	O	O
a	O	O
bit	O	O
irregular	O	O
and	O	O
also	O	O
,	O	O
Eclipse	O	O
issues	O	O
a	O	O
warning	O	O
,	O	O
which	O	O
I	O	O
believe	O	O
is	O	O
a	O	O
false	O	O
alarm	O	O
,	O	O
but	O	O
it	O	O
is	O	O
still	O	O
a	O	O
warning	O	O
that	O	O
one	O	O
has	O	O
to	O	O
deal	O	O
with	O	O
:	O	O
#	O	O
blockquote	O	O
So	O	O
,	O	O
which	O	O
approach	O	O
to	O	O
go	O	O
for	O	O
?	O	O
Or	O	O
have	O	O
I	O	O
missed	O	O
some	O	O
other	O	O
idiom	O	O
that	O	O
is	O	O
the	O	O
correct	O	O
one	O	O
?	O	O
Question	O	O
-	O	O
5031614	O	O
There	O	O
have	O	O
been	O	O
some	O	O
discussions	O	O
here	O	O
about	O	O
JPA	O	O
entities	O	O
and	O	O
which	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
implementation	O	O
should	O	O
be	O	O
used	O	O
for	O	O
JPA	O	O
entity	O	O
classes	O	O
.	O	O
Most	O	O
(	O	O
if	O	O
not	O	O
all	O	O
)	O	O
of	O	O
them	O	O
depend	O	O
on	O	O
Hibernate	O	O
,	O	O
but	O	O
I	O	O
'	O	O
d	O	O
like	O	O
to	O	O
discuss	O	O
them	O	O
JPA	O	O
-	O	O
implementation	O	O
-	O	O
neutrally	O	O
(	O	O
I	O	O
am	O	O
using	O	O
EclipseLink	O	B-api_mention
,	O	O
by	O	O
the	O	O
way	O	O
)	O	O
.	O	O
All	O	O
possible	O	O
implementations	O	O
are	O	O
having	O	O
their	O	O
own	O	O
advantages	O	O
and	O	O
disadvantages	O	O
regarding	O	O
:	O	O
#	O	O
li	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
contract	O	O
conformity	O	O
(	O	O
immutability	O	O
)	O	O
for	O	O
List	O	B-api_mention
/	O	O
Set	O	B-api_mention
operations	O	O
#	O	O
li	O	O
Whether	O	O
identical	O	O
objects	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
from	O	O
different	O	O
sessions	O	O
,	O	O
dynamic	O	O
proxies	O	O
from	O	O
lazily	O	O
-	O	O
loaded	O	O
data	O	O
structures	O	O
)	O	O
can	O	O
be	O	O
detected	O	O
#	O	O
li	O	O
Whether	O	O
entities	O	O
behave	O	O
correctly	O	O
in	O	O
detached	O	O
(	O	O
or	O	O
non	O	O
-	O	O
persisted	O	O
)	O	O
state	O	O
As	O	O
far	O	O
I	O	O
can	O	O
see	O	O
,	O	O
there	O	O
are	O	O
three	O	O
options	O	O
:	O	O
#	O	O
li	O	O
Do	O	O
not	O	O
override	O	O
them	O	O
;	O	O
rely	O	O
on	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
Object	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
hashCode	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
work	O	O
#	O	O
li	O	O
cannot	O	O
identify	O	O
identical	O	O
objects	O	O
,	O	O
problems	O	O
with	O	O
dynamic	O	O
proxies	O	O
#	O	O
li	O	O
no	O	O
problems	O	O
with	O	O
detached	O	O
entities	O	O
#	O	O
li	O	O
Override	O	O
them	O	O
,	O	O
based	O	O
on	O	O
the	O	O
primary	O	O
key	O	O
#	O	O
li	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
broken	O	O
#	O	O
li	O	O
correct	O	O
identity	O	O
(	O	O
for	O	O
all	O	O
managed	O	O
entities	O	O
)	O	O
#	O	O
li	O	O
problems	O	O
with	O	O
detached	O	O
entities	O	O
#	O	O
li	O	O
Override	O	O
them	O	O
,	O	O
based	O	O
on	O	O
the	O	O
Business	O	O
-	O	O
Id	O	O
(	O	O
non	O	O
-	O	O
primary	O	O
key	O	O
fields	O	O
;	O	O
what	O	O
about	O	O
foreign	O	O
keys	O	O
?	O	O
)	O	O
#	O	O
li	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
broken	O	O
#	O	O
li	O	O
correct	O	O
identity	O	O
(	O	O
for	O	O
all	O	O
managed	O	O
entities	O	O
)	O	O
#	O	O
li	O	O
no	O	O
problems	O	O
with	O	O
detached	O	O
entities	O	O
My	O	O
questions	O	O
are	O	O
:	O	O
#	O	O
li	O	O
Did	O	O
I	O	O
miss	O	O
an	O	O
option	O	O
and	O	O
/	O	O
or	O	O
pro	O	O
/	O	O
con	O	O
point	O	O
?	O	O
#	O	O
li	O	O
What	O	O
option	O	O
did	O	O
you	O	O
choose	O	O
and	O	O
why	O	O
?	O	O
UPDATE	O	O
1	O	O
:	O	O
By	O	O
"	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
are	O	O
broken	O	O
"	O	O
,	O	O
I	O	O
mean	O	O
that	O	O
successive	O	O
hashCode	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
invocations	O	O
may	O	O
return	O	O
differing	O	O
values	O	O
,	O	O
which	O	O
is	O	O
(	O	O
when	O	O
correctly	O	O
implemented	O	O
)	O	O
not	O	O
broken	O	O
in	O	O
the	O	O
sense	O	O
of	O	O
the	O	O
Object	O	B-api_mention
API	O	O
documentation	O	O
,	O	O
but	O	O
which	O	O
causes	O	O
problems	O	O
when	O	O
trying	O	O
to	O	O
retrieve	O	O
a	O	O
changed	O	O
entity	O	O
from	O	O
a	O	O
Map	O	B-api_mention
,	O	O
Set	O	B-api_mention
or	O	O
other	O	O
hash	O	O
-	O	O
based	O	O
Collection	O	B-api_mention
.	O	O
Consequently	O	O
,	O	O
JPA	O	O
implementations	O	O
(	O	O
at	O	O
least	O	O
EclipseLink	O	B-api_mention
)	O	O
will	O	O
not	O	O
work	O	O
correctly	O	O
in	O	O
some	O	O
cases	O	O
.	O	O
UPDATE	O	O
2	O	O
:	O	O
Thank	O	O
you	O	O
for	O	O
your	O	O
answers	O	O
-	O	O
-	O	O
most	O	O
of	O	O
them	O	O
have	O	O
remarkable	O	O
quality	O	O
.	O	O
Unfortunately	O	O
,	O	O
I	O	O
am	O	O
still	O	O
unsure	O	O
which	O	O
approach	O	O
will	O	O
be	O	O
the	O	O
best	O	O
for	O	O
a	O	O
real	O	O
-	O	O
life	O	O
application	O	O
,	O	O
or	O	O
how	O	O
to	O	O
determine	O	O
the	O	O
best	O	O
approach	O	O
for	O	O
my	O	O
application	O	O
.	O	O
So	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
keep	O	O
the	O	O
question	O	O
open	O	O
and	O	O
hope	O	O
for	O	O
some	O	O
more	O	O
discussions	O	O
and	O	O
/	O	O
or	O	O
opinions	O	O
.	O	O
Question	O	O
-	O	O
32693704	O	O
I	O	O
noticed	O	O
something	O	O
strange	O	O
in	O	O
the	O	O
implementation	O	O
of	O	O
HashMap	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
is	O	O
how	O	O
it	O	O
looked	O	O
in	O	O
OpenJDK	O	O
7u40	O	O
:	O	O
#	O	O
pre	O	O
And	O	O
this	O	O
is	O	O
how	O	O
it	O	O
looks	O	O
as	O	O
of	O	O
OpenJDK	O	O
8u40	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
understand	O	O
that	O	O
now	O	O
the	O	O
table	O	O
can	O	O
be	O	O
null	O	O
for	O	O
empty	O	O
an	O	O
map	O	O
,	O	O
thus	O	O
the	O	O
additional	O	O
check	O	O
and	O	O
caching	O	O
in	O	O
a	O	O
local	O	O
variable	O	O
is	O	O
required	O	O
.	O	O
But	O	O
why	O	O
was	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
replaced	O	O
with	O	O
a	O	O
for	O	O
-	O	O
loop	O	O
?	O	O
It	O	O
seems	O	O
that	O	O
the	O	O
change	O	O
was	O	O
introduced	O	O
in	O	O
this	O	O
commit	O	O
.	O	O
Unfortunately	O	O
I	O	O
found	O	O
no	O	O
explanation	O	O
for	O	O
why	O	O
a	O	O
plain	O	O
for	O	O
loop	O	O
might	O	O
be	O	O
better	O	O
than	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
fill	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Is	O	O
it	O	O
faster	O	O
?	O	O
Or	O	O
safer	O	O
?	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
5585800	O	O
int	O	O
foo	O	O
=	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
See	O	O
the	O	O
Java	O	O
Documentation	O	O
for	O	O
more	O	O
information	O	O
.	O	O
(	O	O
If	O	O
you	O	O
have	O	O
it	O	O
in	O	O
a	O	O
StringBuilder	B-api_mention	B-api_mention
(	O	O
or	O	O
the	O	O
ancient	O	O
StringBuffer	B-api_mention	B-api_mention
)	O	O
,	O	O
you	O	O
'	O	O
ll	O	O
need	O	O
to	O	O
do	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
33233407	O	O
We	O	O
can	O	O
use	O	O
the	O	O
parseInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
the	O	O
Integer	B-api_mention	B-api_mention
wrapper	O	O
class	O	O
for	O	O
converting	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
to	O	O
an	O	O
integer	O	O
value	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
Integer	B-api_mention	B-api_mention
class	O	O
also	O	O
provides	O	O
the	O	O
valueOf	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
:	O	O
#	O	O
pre	O	O
We	O	O
can	O	O
also	O	O
use	O	O
toInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	O	I-api_mention
of	O	O
NumberUtils	B-api_mention	O
Utility	O	O
Class	O	O
for	O	O
the	O	O
conversion	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32323081	O	O
I	O	O
have	O	O
a	O	O
question	O	O
regarding	O	O
Java	O	O
8	O	O
inference	O	O
with	O	O
respect	O	O
to	O	O
lambdas	O	O
and	O	O
their	O	O
related	O	O
exception	O	O
signatures	O	O
.	O	O
If	O	O
I	O	O
define	O	O
some	O	O
method	O	O
foo	O	O
:	O	O
#	O	O
pre	O	O
then	O	O
I	O	O
get	O	O
the	O	O
nice	O	O
and	O	O
concise	O	O
semantic	O	O
of	O	O
being	O	O
able	O	O
to	O	O
write	O	O
foo	O	O
(	O	O
args	O	O
)	O	O
;	O	O
in	O	O
most	O	O
cases	O	O
for	O	O
a	O	O
given	O	O
T	O	O
.	O	O
However	O	O
,	O	O
in	O	O
this	O	O
example	O	O
,	O	O
if	O	O
my	O	O
getTheT	O	O
operation	O	O
declares	O	O
that	O	O
it	O	O
throws	O	O
Exception	O	B-api_mention
,	O	O
my	O	O
foo	O	O
method	O	O
which	O	O
takes	O	O
a	O	O
Supplier	B-api_mention	O
no	O	O
longer	O	O
compiles	O	O
:	O	O
the	O	O
Supplier	B-api_mention	B-api_mention
method	O	O
signature	O	O
for	O	O
get	O	O
doesn	O	O
'	O	O
t	O	O
throw	O	O
exceptions	O	O
.	O	O
It	O	O
seems	O	O
like	O	O
a	O	O
decent	O	O
way	O	O
to	O	O
get	O	O
around	O	O
this	O	O
would	O	O
be	O	O
to	O	O
overload	O	O
foo	O	O
to	O	O
accept	O	O
either	O	O
option	O	O
,	O	O
with	O	O
the	O	O
overloaded	O	O
definition	O	O
being	O	O
:	O	O
#	O	O
pre	O	O
where	O	O
ThrowingSupplier	O	O
is	O	O
defined	O	O
as	O	O
#	O	O
pre	O	O
In	O	O
this	O	O
way	O	O
,	O	O
we	O	O
have	O	O
one	O	O
Supplier	B-api_mention	O
type	O	O
which	O	O
throws	O	O
exceptions	O	O
and	O	O
one	O	O
which	O	O
doesn	O	O
'	O	O
t	O	O
.	O	O
The	O	O
desired	O	O
syntax	O	O
would	O	O
be	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
this	O	O
causes	O	O
issues	O	O
due	O	O
to	O	O
the	O	O
lambda	O	O
type	O	O
being	O	O
ambiguous	O	O
(	O	O
presumably	O	O
unable	O	O
to	O	O
resolve	O	O
between	O	O
Supplier	B-api_mention	O
and	O	O
ThrowingSupplier	O	B-api_mention
)	O	O
.	O	O
Doing	O	O
an	O	O
explicit	O	O
cast	O	O
a	O	O
la	O	O
foo	O	O
(	O	O
args	O	O
)	O	O
;	O	O
would	O	O
work	O	O
,	O	O
but	O	O
it	O	O
gets	O	O
rid	O	O
of	O	O
most	O	O
of	O	O
the	O	O
conciseness	O	O
of	O	O
the	O	O
desired	O	O
syntax	O	O
.	O	O
I	O	O
guess	O	O
the	O	O
underlying	O	O
question	O	O
is	O	O
:	O	O
if	O	O
the	O	O
Java	O	O
compiler	O	O
is	O	O
able	O	O
to	O	O
resolve	O	O
the	O	O
fact	O	O
that	O	O
one	O	O
of	O	O
my	O	O
lambdas	O	O
is	O	O
incompatible	O	O
due	O	O
to	O	O
it	O	O
throwing	O	O
an	O	O
exception	O	O
in	O	O
the	O	O
Supplier	O	O
-	O	O
only	O	O
case	O	O
,	O	O
why	O	O
isn	O	O
'	O	O
t	O	O
it	O	O
able	O	O
to	O	O
use	O	O
that	O	O
same	O	O
information	O	O
to	O	O
derive	O	O
the	O	O
type	O	O
of	O	O
the	O	O
lambda	O	O
in	O	O
the	O	O
secondary	O	O
,	O	O
type	O	O
-	O	O
inference	O	O
case	O	O
?	O	O
Any	O	O
information	O	O
or	O	O
resources	O	O
which	O	O
anyone	O	O
could	O	O
point	O	O
me	O	O
to	O	O
would	O	O
likewise	O	O
be	O	O
much	O	O
appreciated	O	O
,	O	O
as	O	O
I	O	O
'	O	O
m	O	O
just	O	O
not	O	O
too	O	O
sure	O	O
where	O	O
to	O	O
look	O	O
for	O	O
more	O	O
information	O	O
on	O	O
the	O	O
matter	O	O
.	O	O
Thanks	O	O
!	O	O
Question	O	O
-	O	O
30125296	O	O
,	O	O
answer	O	O
-	O	O
35035659	O	O
You	O	O
can	O	O
use	O	O
reduce	O	O
method	O	O
:	O	O
long	O	O
creditAmountSum	O	O
=	O	O
result	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
reduce	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
34172978	O	O
,	O	O
answer	O	O
-	O	O
34173658	O	O
If	O	O
you	O	O
want	O	O
to	O	O
stop	O	O
either	O	O
if	O	O
number	O	O
5	O	O
is	O	O
reached	O	O
or	O	O
10	O	O
elements	O	O
are	O	O
collected	O	O
,	O	O
there	O	O
'	O	O
s	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
takeWhile	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
added	O	O
in	O	O
Java	O	O
-	O	O
9	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8189466	O	O
,	O	O
answer	O	O
-	O	O
8189786	O	O
Here	O	O
'	O	O
s	O	O
why	O	O
:	O	O
As	O	O
it	O	O
is	O	O
says	O	O
in	O	O
the	O	O
Javadoc	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
check	O	O
is	O	O
done	O	O
in	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
the	O	O
iterator	O	O
(	O	O
as	O	O
you	O	O
can	O	O
see	O	O
by	O	O
the	O	O
stacktrace	O	O
)	O	O
.	O	O
But	O	O
we	O	O
will	O	O
reach	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
only	O	O
if	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
delivered	O	O
true	O	O
,	O	O
which	O	O
is	O	O
what	O	O
is	O	O
called	O	O
by	O	O
the	O	O
for	O	O
each	O	O
to	O	O
check	O	O
if	O	O
the	O	O
boundary	O	O
is	O	O
met	O	O
.	O	O
In	O	O
your	O	O
remove	O	O
method	O	O
,	O	O
when	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
checks	O	O
if	O	O
it	O	O
needs	O	O
to	O	O
return	O	O
another	O	O
element	O	O
,	O	O
it	O	O
will	O	O
see	O	O
that	O	O
it	O	O
returned	O	O
two	O	O
elements	O	O
,	O	O
and	O	O
now	O	O
after	O	O
one	O	O
element	O	O
was	O	O
removed	O	O
the	O	O
list	O	O
only	O	O
contains	O	O
two	O	O
elements	O	O
.	O	O
So	O	O
all	O	O
is	O	O
peachy	O	O
and	O	O
we	O	O
are	O	O
done	O	O
with	O	O
iterating	O	O
.	O	O
The	O	O
check	O	O
for	O	O
concurrent	O	O
modifications	O	O
does	O	O
not	O	O
occur	O	O
,	O	O
as	O	O
this	O	O
is	O	O
done	O	O
in	O	O
the	O	O
next	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
which	O	O
is	O	O
never	O	O
called	O	O
.	O	O
Next	O	O
we	O	O
get	O	O
to	O	O
the	O	O
second	O	O
loop	O	O
.	O	O
After	O	O
we	O	O
remove	O	O
the	O	O
second	O	O
number	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
method	O	O
will	O	O
check	O	O
again	O	O
if	O	O
can	O	O
return	O	O
more	O	O
values	O	O
.	O	O
It	O	O
has	O	O
returned	O	O
two	O	O
values	O	O
already	O	O
,	O	O
but	O	O
the	O	O
list	O	O
now	O	O
only	O	O
contains	O	O
one	O	O
.	O	O
But	O	O
the	O	O
code	O	O
here	O	O
is	O	O
:	O	O
#	O	O
pre	O	O
1	O	O
!	O	O
=	O	O
2	O	O
,	O	O
so	O	O
we	O	O
continue	O	O
to	O	O
the	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
now	O	O
realizes	O	O
that	O	O
someone	O	O
has	O	O
been	O	O
messing	O	O
with	O	O
the	O	O
list	O	O
and	O	O
fires	O	O
the	O	O
exception	O	O
.	O	O
Hope	O	O
that	O	O
clears	O	O
your	O	O
question	O	O
up	O	O
.	O	O
Question	O	O
-	O	O
19757300	O	O
,	O	O
answer	O	O
-	O	O
19759653	O	O
You	O	O
can	O	O
also	O	O
propagate	O	O
your	O	O
static	O	O
pain	O	O
with	O	O
lambdas	O	O
,	O	O
so	O	O
the	O	O
whole	O	O
thing	O	O
looks	O	O
readable	O	O
:	O	O
s	O	O
.	B-api_mention	B-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
propagate	O	O
here	O	O
receives	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
concurrent	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Callable	I-api_mention	I-api_mention
as	O	O
a	O	O
parameter	O	O
and	O	O
converts	O	O
any	O	O
exception	O	O
caught	O	O
during	O	O
the	O	O
call	O	O
into	O	O
RuntimeException	B-api_mention	B-api_mention
.	O	O
There	O	O
is	O	O
a	O	O
similar	O	O
conversion	O	O
method	O	O
Throwables	B-api_mention	O
#	I-api_mention	O
propagate	I-api_mention	O
(	I-api_mention	O
Throwable	I-api_mention	O
)	I-api_mention	O
in	O	O
Guava	O	O
.	O	O
This	O	O
method	O	O
seems	O	O
being	O	O
essential	O	O
for	O	O
lambda	O	O
method	O	O
chaining	O	O
,	O	O
so	O	O
I	O	O
hope	O	O
one	O	O
day	O	O
it	O	O
will	O	O
be	O	O
added	O	O
to	O	O
one	O	O
of	O	O
the	O	O
popular	O	O
libs	O	O
or	O	O
this	O	O
propagating	O	O
behavior	O	O
would	O	O
be	O	O
by	O	O
default	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
10066590	O	O
With	O	O
Mockito	O	B-api_mention
,	O	O
I	O	O
want	O	O
to	O	O
verify	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
a	O	O
method	O	O
call	O	O
with	O	O
byte	O	O
[	O	O
]	O	O
in	O	O
its	O	O
argument	O	O
list	O	O
,	O	O
but	O	O
I	O	O
didn	O	O
'	O	O
t	O	O
find	O	O
how	O	O
to	O	O
write	O	O
this	O	O
.	O	B-api_mention
myMethod	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
I	O	O
just	O	O
want	O	O
something	O	O
like	O	O
anyByteArray	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
how	O	O
to	O	O
do	O	O
that	O	O
with	O	O
Mockito	O	B-api_mention
?	O	O
Question	O	O
-	O	O
6684665	O	O
,	O	O
answer	O	O
-	O	O
6684822	O	O
You	O	O
can	O	O
'	O	O
t	O	O
just	O	O
take	O	O
the	O	O
returned	O	O
string	O	O
and	O	O
construct	O	O
a	O	O
string	O	O
from	O	O
it	O	O
.	O	O
.	O	O
.	O	O
it	O	O
'	O	O
s	O	O
not	O	O
a	O	O
byte	O	O
[	O	O
]	O	O
data	O	O
type	O	O
anymore	O	O
,	O	O
it	O	O
'	O	O
s	O	O
already	O	O
a	O	O
string	O	O
;	O	O
you	O	O
need	O	O
to	O	O
parse	O	O
it	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
*	O	O
*	O	O
EDIT	O	O
*	O	O
*	O	O
You	O	O
get	O	O
an	O	O
hint	O	O
of	O	O
your	O	O
problem	O	O
in	O	O
your	O	O
question	O	O
,	O	O
where	O	O
you	O	O
say	O	O
"	O	O
Whatever	O	O
I	O	O
seem	O	O
to	O	O
try	O	O
I	O	O
end	O	O
up	O	O
getting	O	O
a	O	O
byte	O	O
array	O	O
which	O	O
looks	O	O
as	O	O
follows	O	O
.	O	O
.	O	O
.	O	O
[	O	O
91	O	O
,	O	O
45	O	O
,	O	O
.	O	O
.	O	O
.	O	O
"	O	O
,	O	O
because	O	O
91	O	O
is	O	O
the	O	O
byte	O	O
value	O	O
for	O	O
[	O	O
,	O	O
so	O	O
[	O	O
91	O	O
,	O	O
45	O	O
,	O	O
.	O	O
.	O	O
.	O	O
is	O	O
the	O	O
byte	O	O
array	O	O
of	O	O
the	O	O
string	O	O
"	O	O
[	O	O
-	O	O
45	O	O
,	O	O
1	O	O
,	O	O
16	O	O
,	O	O
.	O	O
.	O	O
.	O	O
"	O	O
string	O	O
.	O	O
The	O	O
method	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
a	O	O
String	B-api_mention	B-api_mention
representation	O	O
of	O	O
the	O	O
specified	O	O
array	O	O
;	O	O
meaning	O	O
that	O	O
the	O	O
returned	O	O
value	O	O
will	O	O
not	O	O
be	O	O
a	O	O
array	O	O
anymore	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
s1	O	O
holds	O	O
the	O	O
string	O	O
representation	O	O
of	O	O
the	O	O
array	O	O
b1	O	O
,	O	O
while	O	O
s2	O	O
holds	O	O
the	O	O
string	O	O
representation	O	O
of	O	O
the	O	O
bytes	O	O
contained	O	O
in	O	O
b1	O	O
.	O	O
Now	O	O
,	O	O
in	O	O
your	O	O
problem	O	O
,	O	O
your	O	O
server	O	O
returns	O	O
a	O	O
string	O	O
similar	O	O
to	O	O
s1	O	O
,	O	O
therefore	O	O
to	O	O
get	O	O
the	O	O
array	O	O
representation	O	O
back	O	O
,	O	O
you	O	O
need	O	O
the	O	O
opposite	O	O
constructor	O	O
method	O	O
.	O	O
If	O	O
s2	O	O
.	B-api_mention	B-api_mention
getBytes	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
opposite	O	O
of	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
you	O	O
need	O	O
to	O	O
find	O	O
the	O	O
opposite	O	O
of	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
thus	O	O
the	O	O
code	O	O
I	O	O
pasted	O	O
in	O	O
the	O	O
first	O	O
snippet	O	O
of	O	O
this	O	O
answer	O	O
.	O	O
Question	O	O
-	O	O
32356762	O	O
,	O	O
answer	O	O
-	O	O
32357149	O	O
Disclaimer	O	O
:	O	O
I	O	O
am	O	O
not	O	O
a	O	O
JDK	O	O
author	O	O
.	O	O
I	O	O
agree	O	O
that	O	O
it	O	O
'	O	O
s	O	O
correct	O	O
to	O	O
write	O	O
your	O	O
own	O	O
code	O	O
to	O	O
interfaces	O	O
,	O	O
but	O	O
if	O	O
you	O	O
'	O	O
re	O	O
going	O	O
return	O	O
a	O	O
mutable	O	O
collection	O	O
to	O	O
a	O	O
third	O	O
party	O	O
,	O	O
it	O	O
'	O	O
s	O	O
important	O	O
to	O	O
let	O	O
the	O	O
third	O	O
party	O	O
know	O	O
what	O	O
sort	O	O
of	O	O
List	B-api_mention	B-api_mention
they	O	O
'	O	O
re	O	O
getting	O	O
back	O	O
.	O	O
LinkedList	B-api_mention	B-api_mention
and	O	O
ArrayList	B-api_mention	B-api_mention
are	O	O
very	O	O
different	O	O
,	O	O
performance	O	O
wise	O	O
,	O	O
for	O	O
various	O	O
operations	O	O
.	O	O
For	O	O
example	O	O
,	O	O
removing	O	O
the	O	O
first	O	O
element	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
is	O	I-api_mention
O	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
but	O	O
removing	O	O
the	O	O
first	O	O
element	O	O
of	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
is	O	O
O	O	O
(	O	O
args	O	O
)	O	O
.	O	O
By	O	O
fully	O	O
specifying	O	O
the	O	O
return	O	O
type	O	O
,	O	O
the	O	O
JDK	O	O
authors	O	O
are	O	O
communicating	O	O
extra	O	O
information	O	O
,	O	O
in	O	O
unambiguous	O	O
code	O	O
,	O	O
about	O	O
what	O	O
sort	O	O
of	O	O
object	O	O
they	O	O
'	O	O
re	O	O
giving	O	O
back	O	O
to	O	O
you	O	O
,	O	O
so	O	O
you	O	O
can	O	O
write	O	O
your	O	O
code	O	O
to	O	O
use	O	O
this	O	O
method	O	O
properly	O	O
.	O	O
If	O	O
you	O	O
really	O	O
need	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
,	O	O
you	O	O
know	O	O
that	O	O
you	O	O
have	O	O
to	O	O
specify	O	O
one	O	O
here	O	O
.	O	O
Finally	O	O
,	O	O
the	O	O
main	O	O
reason	O	O
to	O	O
code	O	O
to	O	O
an	O	O
interface	O	O
over	O	O
an	O	O
implementation	O	O
is	O	O
if	O	O
you	O	O
think	O	O
that	O	O
the	O	O
implementation	O	O
will	O	O
change	O	O
.	O	O
The	O	O
JDK	O	O
authors	O	O
probably	O	O
figure	O	O
they	O	O
are	O	O
never	O	O
going	O	O
to	O	O
change	O	O
this	O	O
method	O	O
;	O	O
it	O	O
'	O	O
s	O	O
never	O	O
going	O	O
to	O	O
return	O	O
a	O	O
LinkedList	B-api_mention	B-api_mention
or	O	O
a	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
UnmodifiableList	I-api_mention	I-api_mention
.	O	O
However	O	O
,	O	O
in	O	O
most	O	O
cases	O	O
,	O	O
you	O	O
would	O	O
probably	O	O
still	O	O
do	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
29095967	O	O
I	O	O
have	O	O
this	O	O
list	O	O
(	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
:	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
,	O	O
null	O	O
,	O	O
StringLiteral	O	O
,	O	O
null	O	O
,	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
And	O	O
I	O	O
'	O	O
d	O	O
like	O	O
something	O	O
like	O	O
this	O	O
:	O	O
[	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
,	O	O
[	O	O
StringLiteral	O	O
]	O	O
,	O	O
[	O	O
StringLiteral	O	O
,	O	O
StringLiteral	O	O
]	O	O
]	O	O
In	O	O
other	O	O
words	O	O
I	O	O
want	O	O
to	O	O
split	O	O
my	O	O
list	O	O
in	O	O
sublists	O	O
using	O	O
the	O	O
null	O	O
value	O	O
as	O	O
separator	O	O
,	O	O
in	O	O
order	O	O
to	O	O
obtain	O	O
a	O	O
list	O	O
of	O	O
lists	O	O
(	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
.	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
a	O	O
Java	O	O
8	O	O
solution	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
tried	O	O
with	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
partitioningBy	I-api_mention	I-api_mention
but	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
it	O	O
is	O	O
what	O	O
I	O	O
'	O	O
m	O	O
looking	O	O
for	O	O
.	O	O
Thanks	O	O
!	O	O
Question	O	O
-	O	O
12468764	O	O
,	O	O
answer	O	O
-	O	O
24537575	O	O
I	O	O
'	O	O
ve	O	O
found	O	O
a	O	O
very	O	O
nice	O	O
and	O	O
concise	O	O
solution	O	O
,	O	O
especially	O	O
useful	O	O
when	O	O
you	O	O
cannot	O	O
modify	O	O
enum	O	O
classes	O	O
as	O	O
it	O	O
was	O	O
in	O	O
my	O	O
case	O	O
.	O	O
Then	O	O
you	O	O
should	O	O
provide	O	O
a	O	O
custom	O	O
ObjectMapper	B-api_mention	B-api_mention
with	O	O
a	O	O
certain	O	O
feature	O	O
enabled	O	O
.	O	O
Those	O	O
features	O	O
are	O	O
available	O	O
since	O	O
Jackson	O	O
1	O	O
.	O	O
6	O	O
.	O	O
So	O	O
you	O	O
only	O	O
need	O	O
to	O	O
write	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
your	O	O
enum	O	O
.	O	O
#	O	O
pre	O	O
There	O	O
are	O	O
more	O	O
enum	O	O
-	O	O
related	O	O
features	O	O
available	O	O
,	O	O
see	O	O
here	O	O
:	O	O
#	O	O
a	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
31370403	O	O
I	O	O
'	O	O
m	O	O
currently	O	O
in	O	O
the	O	O
process	O	O
of	O	O
writing	O	O
a	O	O
paint	O	O
program	O	O
in	O	O
java	O	O
,	O	O
designed	O	O
to	O	O
have	O	O
flexible	O	O
and	O	O
comprehensive	O	O
functionalities	O	O
.	O	O
It	O	O
stemmed	O	O
from	O	O
my	O	O
final	O	O
project	O	O
,	O	O
that	O	O
I	O	O
wrote	O	O
overnight	O	O
the	O	O
day	O	O
before	O	O
.	O	O
Because	O	O
of	O	O
that	O	O
,	O	O
it	O	O
'	O	O
s	O	O
got	O	O
tons	O	O
and	O	O
tons	O	O
of	O	O
bugs	O	O
,	O	O
which	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
tackling	O	O
one	O	O
by	O	O
one	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
I	O	O
can	O	O
only	O	O
save	O	O
files	O	O
that	O	O
will	O	O
be	O	O
empty	O	O
,	O	O
my	O	O
rectangles	O	O
don	O	O
'	O	O
t	O	O
draw	O	O
right	O	O
but	O	O
my	O	O
circles	O	O
do	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
This	O	O
time	O	O
,	O	O
I	O	O
'	O	O
ve	O	O
been	O	O
trying	O	O
to	O	O
add	O	O
undo	O	O
/	O	O
redo	O	O
functionality	O	O
to	O	O
my	O	O
program	O	O
.	O	O
However	O	O
,	O	O
I	O	O
can	O	O
'	O	O
t	O	O
"	O	O
undo	O	O
"	O	O
something	O	O
that	O	O
I	O	O
have	O	O
done	O	O
.	O	O
Therefore	O	O
,	O	O
I	O	O
got	O	O
an	O	O
idea	O	O
to	O	O
save	O	O
copies	O	O
of	O	O
my	O	O
BufferedImage	O	O
each	O	O
time	O	O
a	O	O
mouseReleased	O	O
event	O	O
was	O	O
fired	O	O
.	O	O
However	O	O
,	O	O
with	O	O
some	O	O
of	O	O
the	O	O
images	O	O
going	O	O
to	O	O
1920x1080	O	O
resolution	O	O
,	O	O
I	O	O
figured	O	O
that	O	O
this	O	O
wouldn	O	O
'	O	O
t	O	O
be	O	O
efficient	O	O
:	O	O
storing	O	O
them	O	O
would	O	O
probably	O	O
take	O	O
gigabytes	O	O
of	O	O
memory	O	O
.	O	O
The	O	O
reason	O	O
for	O	O
why	O	O
I	O	O
can	O	O
'	O	O
t	O	O
simply	O	O
paint	O	O
the	O	O
same	O	O
thing	O	O
with	O	O
the	O	O
background	O	O
colour	O	O
to	O	O
undo	O	O
is	O	O
because	O	O
I	O	O
have	O	O
many	O	O
different	O	O
brushes	O	O
,	O	O
which	O	O
paint	O	O
based	O	O
on	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
because	O	O
there	O	O
are	O	O
many	O	O
different	O	O
layers	O	O
(	O	O
in	O	O
a	O	O
single	O	O
layer	O	O
)	O	O
.	O	O
Then	O	O
,	O	O
I	O	O
'	O	O
ve	O	O
considered	O	O
cloning	O	O
the	O	O
Graphics	O	O
objects	O	O
that	O	O
I	O	O
use	O	O
to	O	O
paint	O	O
to	O	O
the	O	O
BufferedImage	O	O
.	O	O
Like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
done	O	O
this	O	O
before	O	O
,	O	O
so	O	O
I	O	O
have	O	O
a	O	O
couple	O	O
questions	O	O
:	O	O
#	O	O
li	O	O
Would	O	O
I	O	O
still	O	O
be	O	O
wasting	O	O
pointless	O	O
memory	O	O
by	O	O
doing	O	O
this	O	O
,	O	O
like	O	O
cloning	O	O
my	O	O
BufferedImages	O	O
?	O	O
#	O	O
li	O	O
Is	O	O
there	O	O
necessarily	O	O
a	O	O
different	O	O
way	O	O
I	O	O
can	O	O
do	O	O
this	O	O
?	O	O
Question	O	O
-	O	O
7032070	O	O
,	O	O
answer	O	O
-	O	O
7032144	O	O
The	O	O
source	O	O
code	O	O
for	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
The	O	O
source	O	O
code	O	O
for	O	O
removeAll	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
(	O	O
As	O	O
defined	O	O
in	O	O
AbstractCollection	B-api_mention	B-api_mention
)	O	O
:	O	O
#	O	O
pre	O	O
clear	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
much	O	O
faster	O	O
since	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
to	O	O
deal	O	O
with	O	O
all	O	O
those	O	O
extra	O	O
method	O	O
calls	O	O
.	O	O
And	O	O
as	O	O
Atrey	O	O
points	O	O
out	O	O
,	O	O
c	O	O
.	B-api_mention	B-api_mention
contains	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
increases	O	O
the	O	O
time	O	O
complexity	O	O
of	O	O
removeAll	B-api_mention	B-api_mention
to	O	O
O	O	O
(	O	O
n	O	O
^	O	O
2	O	O
)	O	O
as	O	O
opposed	O	O
to	O	O
clear	O	O
'	O	O
s	O	O
O	O	O
(	O	O
n	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777312	O	O
Arrays	O	O
inherit	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
from	O	O
Object	O	B-api_mention
and	O	O
hence	O	O
compare	O	O
only	O	O
returns	O	O
true	O	O
if	O	O
comparing	O	O
an	O	O
array	O	O
against	O	O
itself	O	O
.	O	O
On	O	O
the	O	O
other	O	O
hand	O	O
,	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
compares	O	O
the	O	O
elements	O	O
of	O	O
the	O	O
arrays	O	O
.	O	O
This	O	O
snippet	O	O
elucidates	O	O
the	O	O
difference	O	O
:	O	O
#	O	O
pre	O	O
See	O	O
also	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Another	O	O
static	O	O
method	O	O
there	O	O
may	O	O
also	O	O
be	O	O
of	O	O
interest	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
deepEquals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
6667243	O	O
,	O	O
answer	O	O
-	O	O
25575077	O	O
You	O	O
could	O	O
override	O	O
the	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
for	O	O
each	O	O
enum	O	O
value	O	O
.	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
Usage	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32046078	O	O
I	O	O
have	O	O
a	O	O
server	O	O
side	O	O
implemented	O	O
in	O	O
Scala	O	O
and	O	O
React	O	O
/	O	O
Flux	O	O
based	O	O
front	O	O
end	O	O
.	O	O
My	O	O
services	O	O
return	O	O
Futures	O	O
and	O	O
they	O	O
are	O	O
handled	O	O
within	O	O
Scalatra	O	O
'	O	O
s	O	O
AsyncResult	O	B-api_mention
for	O	O
JSON	O	O
responses	O	O
.	O	O
For	O	O
isomorphic	O	O
/	O	O
server	O	O
side	O	O
rendering	O	O
setup	O	O
I	O	O
did	O	O
not	O	O
want	O	O
to	O	O
change	O	O
services	O	O
to	O	O
be	O	O
blocking	O	O
so	O	O
I	O	O
started	O	O
with	O	O
Scala	O	O
Future	O	O
-	O	O
>	O	O
java	B-api_mention	O
.	I-api_mention	O
util	I-api_mention	O
.	I-api_mention	O
function	I-api_mention	O
.	I-api_mention	O
Function	I-api_mention	O
conversion	O	O
shown	O	O
here	O	O
.	O	O
But	O	O
the	O	O
dispatcher	O	O
in	O	O
Flux	O	O
would	O	O
like	O	O
to	O	O
have	O	O
JS	O	O
Promise	O	O
.	O	O
So	O	O
far	O	O
I	O	O
found	O	O
only	O	O
rather	O	O
complicated	O	O
sounding	O	O
way	O	O
around	O	O
this	O	O
Slides	O	O
68	O	O
-	O	O
81	O	O
Is	O	O
there	O	O
any	O	O
recommended	O	O
way	O	O
to	O	O
deal	O	O
with	O	O
this	O	O
Scala	O	O
Future	O	O
-	O	O
>	O	O
JS	O	O
Promise	O	O
conversion	O	O
?	O	O
Question	O	O
-	O	O
20129762	O	O
,	O	O
answer	O	O
-	O	O
20130131	O	O
There	O	O
are	O	O
already	O	O
people	O	O
asked	O	O
the	O	O
same	O	O
on	O	O
the	O	O
mailing	O	O
list	O	O
?	O	O
.	O	O
The	O	O
main	O	O
reason	O	O
is	O	O
Iterable	B-api_mention	B-api_mention
also	O	O
has	O	O
a	O	O
re	O	O
-	O	O
iterable	O	O
semantic	O	O
,	O	O
while	O	O
Stream	B-api_mention	B-api_mention
is	O	O
not	O	O
.	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
22676782	O	O
Despite	O	O
@	O	O
Saint	O	O
Hill	O	O
'	O	O
s	O	O
answer	O	O
if	O	O
you	O	O
consider	O	O
the	O	O
time	O	O
complexity	O	O
of	O	O
str	O	B-api_mention
.	B-api_mention	I-api_mention
toCharArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
the	O	O
first	O	O
one	O	O
is	O	O
faster	O	O
even	O	O
for	O	O
very	O	O
large	O	O
strings	O	O
.	O	O
You	O	O
can	O	O
run	O	O
the	O	O
code	O	O
below	O	O
to	O	O
see	O	O
it	O	O
for	O	O
yourself	O	O
.	O	O
#	O	O
pre	O	O
output	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29096777	O	O
The	O	O
only	O	O
solution	O	O
I	O	O
come	O	O
up	O	O
with	O	O
for	O	O
the	O	O
moment	O	O
is	O	O
by	O	O
implementing	O	O
your	O	O
own	O	O
custom	O	O
collector	O	O
.	O	O
Before	O	O
reading	O	O
the	O	O
solution	O	O
,	O	O
I	O	O
want	O	O
to	O	O
add	O	O
a	O	O
few	O	O
notes	O	O
about	O	O
this	O	O
.	O	O
I	O	O
took	O	O
this	O	O
question	O	O
more	O	O
as	O	O
a	O	O
programming	O	O
exercise	O	O
,	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
if	O	O
it	O	O
can	O	O
be	O	O
done	O	O
with	O	O
a	O	O
parallel	O	O
stream	O	O
.	O	O
So	O	O
you	O	O
have	O	O
to	O	O
be	O	O
aware	O	O
that	O	O
it	O	O
'	O	O
ll	O	O
silently	O	O
break	O	O
if	O	O
the	O	O
pipeline	O	O
is	O	O
run	O	O
in	O	O
parallel	O	O
.	O	O
This	O	O
is	O	O
not	O	O
a	O	O
desirable	O	O
behavior	O	O
and	O	O
should	O	O
be	O	O
avoided	O	O
.	O	O
This	O	O
is	O	O
why	O	O
I	O	O
throw	O	O
an	O	O
exception	O	O
in	O	O
the	O	O
combiner	O	O
part	O	O
(	O	O
instead	O	O
of	O	O
(	O	O
l1	O	O
,	O	O
l2	O	O
)	O	O
-	O	O
>	O	O
{	O	O
l1	O	O
.	O	B-api_mention
addAll	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
return	O	O
l1	O	O
;	O	O
}	O	O
)	O	O
,	O	O
as	O	O
it	O	O
'	O	O
s	O	O
used	O	O
in	O	O
parallel	O	O
when	O	O
combining	O	O
the	O	O
two	O	O
lists	O	O
,	O	O
so	O	O
that	O	O
you	O	O
have	O	O
an	O	O
exception	O	O
instead	O	O
of	O	O
a	O	O
wrong	O	O
result	O	O
.	O	O
Also	O	O
this	O	O
is	O	O
not	O	O
very	O	O
efficient	O	O
due	O	O
to	O	O
list	O	O
copying	O	O
(	O	O
although	O	O
it	O	O
uses	O	O
a	O	O
native	O	O
method	O	O
to	O	O
copy	O	O
the	O	O
underlying	O	O
array	O	O
)	O	O
.	O	O
So	O	O
here	O	O
'	O	O
s	O	O
the	O	O
collector	O	O
implementation	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
how	O	O
to	O	O
use	O	O
it	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
ll	O	O
=	O	O
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Output	O	O
:	O	O
[	O	O
[	O	O
a	O	O
,	O	O
b	O	O
]	O	O
,	O	O
[	O	O
c	O	O
]	O	O
,	O	O
[	O	O
d	O	O
,	O	O
e	O	O
]	O	O
]	O	O
As	O	O
the	O	O
answer	O	O
of	O	O
Joop	O	O
Eggen	O	O
is	O	O
out	O	O
,	O	O
it	O	O
appears	O	O
that	O	O
it	O	O
can	O	O
be	O	O
done	O	O
in	O	O
parallel	O	O
(	O	O
give	O	O
him	O	O
credit	O	O
for	O	O
that	O	O
!	O	O
)	O	O
.	O	O
With	O	O
that	O	O
it	O	O
reduces	O	O
the	O	O
custom	O	O
collector	O	O
implementation	O	O
to	O	O
:	O	O
#	O	O
pre	O	O
which	O	O
let	O	O
the	O	O
paragraph	O	O
about	O	O
parallelism	O	O
a	O	O
bit	O	O
obsolete	O	O
,	O	O
however	O	O
I	O	O
let	O	O
it	O	O
as	O	O
it	O	O
can	O	O
be	O	O
a	O	O
good	O	O
reminder	O	O
.	O	O
Note	O	O
that	O	O
the	O	O
Stream	B-api_mention	B-api_mention
API	O	O
is	O	O
not	O	O
always	O	O
a	O	O
substitute	O	O
.	O	O
There	O	O
are	O	O
tasks	O	O
that	O	O
are	O	O
easier	O	O
and	O	O
more	O	O
suitable	O	O
using	O	O
the	O	O
streams	O	O
and	O	O
there	O	O
are	O	O
tasks	O	O
that	O	O
are	O	O
not	O	O
.	O	O
In	O	O
your	O	O
case	O	O
,	O	O
you	O	O
could	O	O
also	O	O
create	O	O
a	O	O
utility	O	O
method	O	O
for	O	O
that	O	O
:	O	O
#	O	O
pre	O	O
and	O	O
call	O	O
it	O	O
like	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
splitBySeparator	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
.	O	O
It	O	O
can	O	O
be	O	O
improved	O	O
for	O	O
checking	O	O
edge	O	O
-	O	O
cases	O	O
.	O	O
Question	O	O
-	O	O
8725387	O	O
,	O	O
answer	O	O
-	O	O
8725518	O	O
Because	O	O
the	O	O
concept	O	O
of	O	O
a	O	O
List	B-api_mention	B-api_mention
is	O	O
incompatible	O	O
with	O	O
the	O	O
concept	O	O
of	O	O
an	O	O
automatically	O	O
sorted	O	O
collection	O	O
.	O	O
The	O	O
point	O	O
of	O	O
a	O	O
List	B-api_mention	B-api_mention
is	O	O
that	O	O
after	O	O
calling	O	O
list	B-api_mention	O
.	I-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
a	O	O
call	O	O
to	O	O
list	B-api_mention	O
.	I-api_mention	B-api_mention
get	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
return	O	O
elem	O	O
.	O	O
With	O	O
an	O	O
auto	O	O
-	O	O
sorted	O	O
list	O	O
,	O	O
the	O	O
element	O	O
could	O	O
end	O	O
up	O	O
in	O	O
an	O	O
arbitrary	O	O
position	O	O
.	O	O
Question	O	O
-	O	O
7283338	O	O
,	O	O
answer	O	O
-	O	O
7283475	O	O
Because	O	O
any	O	O
particular	O	O
implementation	O	O
of	O	O
Set	O	B-api_mention
may	O	O
or	O	O
may	O	O
not	O	O
be	O	O
random	O	O
access	O	O
.	O	O
You	O	O
can	O	O
always	O	O
get	O	O
an	O	O
iterator	O	O
and	O	O
step	O	O
through	O	O
the	O	O
Set	B-api_mention	O
,	O	O
using	O	O
the	O	O
iterators	O	O
'	O	O
next	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
to	O	O
return	O	O
the	O	O
result	O	O
you	O	O
want	O	O
once	O	O
you	O	O
find	O	O
the	O	O
equal	O	O
element	O	O
.	O	O
This	O	O
works	O	O
regardless	O	O
of	O	O
the	O	O
implementation	O	O
.	O	O
If	O	O
the	O	O
implementation	O	O
is	O	O
NOT	O	O
random	O	O
access	O	O
(	O	O
picture	O	O
a	O	O
linked	O	O
-	O	O
list	O	O
backed	O	O
Set	B-api_mention	O
)	O	O
,	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
in	O	O
the	O	O
interface	O	O
would	O	O
be	O	O
deceptive	O	O
,	O	O
since	O	O
it	O	O
would	O	O
have	O	O
to	O	O
iterate	O	O
the	O	O
collection	O	O
to	O	O
find	O	O
the	O	O
element	O	O
to	O	O
return	O	O
,	O	O
and	O	O
a	O	O
get	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
would	O	O
seem	O	O
to	O	O
imply	O	O
this	O	O
would	O	O
be	O	O
necessary	O	O
,	O	O
that	O	O
the	O	O
Set	B-api_mention	B-api_mention
could	O	O
jump	O	O
directly	O	O
to	O	O
the	O	O
element	O	O
to	O	O
get	O	B-api_mention
.	O	I-api_mention
contains	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
or	O	O
may	O	O
not	O	O
have	O	O
to	O	O
do	O	O
the	O	O
same	O	O
thing	O	O
,	O	O
of	O	O
course	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
implementation	O	O
,	O	O
but	O	O
the	O	O
name	O	O
doesn	O	O
'	O	O
t	O	O
seem	O	O
to	O	O
lend	O	O
itself	O	O
to	O	O
the	O	O
same	O	O
sort	O	O
of	O	O
misunderstandings	O	O
.	O	O
Question	O	O
-	O	O
12576156	O	O
,	O	O
answer	O	O
-	O	O
12576308	O	O
Have	O	O
you	O	O
considered	O	O
@	O	O
Autowired	O	O
ing	O	O
the	O	O
constructor	O	O
or	O	O
a	O	O
setter	O	O
and	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
ing	O	O
in	O	O
the	O	O
body	O	O
?	O	O
#	O	O
pre	O	O
I	O	O
tend	O	O
to	O	O
prefer	O	O
doing	O	O
my	O	O
autowiring	O	O
in	O	O
one	O	O
of	O	O
these	O	O
ways	O	O
to	O	O
enhance	O	O
the	O	O
testability	O	O
of	O	O
my	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
14491966	O	O
,	O	O
answer	O	O
-	O	O
14513598	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
is	O	O
not	O	O
much	O	O
different	O	O
,	O	O
a	O	O
basic	O	O
LCG	O	O
described	O	O
by	O	O
Knuth	O	O
.	O	O
However	O	O
it	O	O
has	O	O
main	O	O
2	O	O
main	O	O
advantages	O	O
/	O	O
differences	O	O
:	O	O
#	O	O
li	O	O
thread	O	O
safe	O	O
-	O	O
each	O	O
update	O	O
is	O	O
a	O	O
CAS	O	O
which	O	O
is	O	O
more	O	O
expensive	O	O
than	O	O
a	O	O
simple	O	O
write	O	O
and	O	O
needs	O	O
a	O	O
branch	O	O
(	O	O
even	O	O
if	O	O
perfectly	O	O
predicted	O	O
single	O	O
threaded	O	O
)	O	O
.	O	O
Depending	O	O
on	O	O
the	O	O
CPU	O	O
it	O	O
could	O	O
be	O	O
significant	O	O
difference	O	O
.	O	O
#	O	O
li	O	O
undisclosed	O	O
internal	O	O
state	O	O
-	O	O
this	O	O
is	O	O
very	O	O
important	O	O
for	O	O
anything	O	O
non	O	O
-	O	O
trivial	O	O
.	O	O
You	O	O
wish	O	O
the	O	O
random	O	O
numbers	O	O
not	O	O
to	O	O
be	O	O
predictable	O	O
.	O	O
Below	O	O
it	O	O
'	O	O
s	O	O
the	O	O
main	O	O
routine	O	O
generating	O	O
'	O	O
random	O	O
'	O	O
integers	O	O
in	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Random	I-api_mention	I-api_mention
.	O	O
#	O	O
pre	O	O
If	O	O
you	O	O
remove	O	O
the	O	O
AtomicLong	B-api_mention	B-api_mention
and	O	O
the	O	O
undisclosed	O	O
sate	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
using	O	O
all	O	O
bits	O	O
of	O	O
the	O	O
long	O	O
)	O	O
,	O	O
you	O	O
'	O	O
d	O	O
get	O	O
more	O	O
performance	O	O
than	O	O
the	O	O
double	O	O
multiplication	O	O
/	O	O
modulo	O	O
.	O	O
Last	O	O
note	O	O
:	O	O
Math	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
random	I-api_mention	I-api_mention
should	O	O
not	O	O
be	O	O
used	O	O
for	O	O
anything	O	O
but	O	O
simple	O	O
tests	O	O
,	O	O
it	O	O
'	O	O
s	O	O
prone	O	O
to	O	O
contention	O	O
and	O	O
if	O	O
you	O	O
have	O	O
even	O	O
a	O	O
couple	O	O
of	O	O
threads	O	O
calling	O	O
it	O	O
concurrently	O	O
the	O	O
performance	O	O
degrades	O	O
.	O	O
One	O	O
little	O	O
known	O	O
historical	O	O
feature	O	O
of	O	O
it	O	O
is	O	O
the	O	O
introduction	O	O
of	O	O
CAS	O	O
in	O	O
java	O	O
-	O	O
to	O	O
beat	O	O
an	O	O
infamous	O	O
benchmark	O	O
(	O	O
first	O	O
by	O	O
IBM	O	O
via	O	O
intrinsics	O	O
and	O	O
then	O	O
Sun	O	O
made	O	O
"	O	O
CAS	O	O
from	O	O
Java	O	O
"	O	O
)	O	O
Question	O	O
-	O	O
24885223	O	O
,	O	O
answer	O	O
-	O	O
29841832	O	O
Thanks	O	O
to	O	O
@	O	O
marmor	O	O
,	O	O
I	O	O
updated	O	O
my	O	O
answer	O	O
.	O	O
I	O	O
think	O	O
it	O	O
'	O	O
s	O	O
a	O	O
good	O	O
solution	O	O
to	O	O
handle	O	O
the	O	O
onClick	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
the	O	O
ViewHolder	B-api_mention	B-api_mention
class	O	O
constructor	O	O
and	O	O
pass	O	O
it	O	O
to	O	O
the	O	O
parent	O	O
class	O	O
via	O	O
OnItemClickListener	B-api_mention	B-api_mention
interface	O	O
.	O	O
MyAdapter	O	O
.	O	O
java	O	O
#	O	O
pre	O	O
Usage	O	O
of	O	O
adapter	O	O
in	O	O
other	O	O
classes	O	O
:	O	O
MyFragment	O	O
.	O	O
java	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
6094575	O	O
,	O	O
answer	O	O
-	O	O
26159586	O	O
when	O	O
using	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
)	O	O
getConstructor	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
the	O	O
constructor	O	O
has	O	O
to	O	O
be	O	O
declared	O	O
public	O	O
.	O	O
Otherwise	O	O
a	O	O
NoSuchMethodException	B-api_mention	B-api_mention
is	O	O
thrown	O	O
.	O	O
if	O	O
you	O	O
want	O	O
to	O	O
access	O	O
a	O	O
non	O	O
-	O	O
public	O	O
constructor	O	O
you	O	O
have	O	O
to	O	O
use	O	O
instead	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
)	O	O
getDeclaredConstructor	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
27908213	O	O
,	O	O
answer	O	O
-	O	O
27908402	O	O
Although	O	O
there	O	O
is	O	O
no	O	O
explicit	O	O
guarantee	O	O
of	O	O
this	O	O
,	O	O
the	O	O
end	O	O
result	O	O
is	O	O
bound	O	O
to	O	O
be	O	O
such	O	O
that	O	O
the	O	O
comparison	O	O
always	O	O
succeeds	O	O
for	O	O
enum	O	O
constants	O	O
with	O	O
identical	O	O
names	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
reason	O	O
for	O	O
this	O	O
is	O	O
that	O	O
Java	O	O
compiler	O	O
constructs	O	O
subclasses	O	O
of	O	O
Enum	O	O
in	O	O
such	O	O
a	O	O
way	O	O
that	O	O
they	O	O
end	O	O
up	O	O
calling	O	O
Enum	O	O
'	O	O
s	O	O
sole	O	O
protected	O	O
constructor	O	O
,	O	O
passing	O	O
it	O	O
the	O	O
name	O	O
of	O	O
enum	O	O
value	O	O
:	O	O
protected	O	O
Enum	O	O
(	O	O
args	O	O
)	O	O
;	O	O
The	O	O
name	O	O
is	O	O
embedded	O	O
into	O	O
the	O	O
generated	O	O
code	O	O
in	O	O
the	O	O
form	O	O
of	O	O
a	O	O
string	O	O
literal	O	O
.	O	O
According	O	O
to	O	O
String	B-api_mention	B-api_mention
documentation	O	O
,	O	O
#	O	O
blockquote	O	O
This	O	O
amounts	O	O
to	O	O
an	O	O
implicit	O	O
guarantee	O	O
of	O	O
your	O	O
expression	O	O
succeeding	O	O
when	O	O
names	O	O
of	O	O
enum	O	O
constants	O	O
are	O	O
identical	O	O
.	O	O
However	O	O
,	O	O
I	O	O
would	O	O
not	O	O
rely	O	O
on	O	O
this	O	O
behavior	O	O
,	O	O
and	O	O
use	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
,	O	O
because	O	O
anyone	O	O
reading	O	O
my	O	O
code	O	O
would	O	O
be	O	O
scratching	O	O
his	O	O
head	O	O
,	O	O
thinking	O	O
that	O	O
I	O	O
made	O	O
a	O	O
mistake	O	O
.	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
20177092	O	O
The	O	O
better	O	O
practice	O	O
is	O	O
to	O	O
use	O	O
for	O	O
-	O	O
each	O	O
.	O	O
Besides	O	O
violating	O	O
the	O	O
Keep	O	O
It	O	O
Simple	O	O
,	O	O
Stupid	O	O
principle	O	O
,	O	O
the	O	O
new	O	O
-	O	O
fangled	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
has	O	O
at	O	O
least	O	O
the	O	O
following	O	O
deficiencies	O	O
:	O	O
#	O	O
li	O	O
Can	O	O
'	O	O
t	O	O
use	O	O
non	O	O
-	O	O
final	O	O
variables	O	O
.	O	O
So	O	O
,	O	O
code	O	O
like	O	O
the	O	O
following	O	O
can	O	O
'	O	O
t	O	O
be	O	O
turned	O	O
into	O	O
a	O	O
forEach	B-api_mention	O
lambda	O	O
:	O	O
#	O	O
blockquote	O	O
#	O	O
li	O	O
Can	O	O
'	O	O
t	O	O
handle	O	O
checked	O	O
exceptions	O	O
.	O	O
Lambdas	O	O
aren	O	O
'	O	O
t	O	O
actually	O	O
forbidden	O	O
from	O	O
throwing	O	O
checked	O	O
exceptions	O	O
,	O	O
but	O	O
common	O	O
functional	O	O
interfaces	O	O
like	O	O
Consumer	B-api_mention	O
don	O	O
'	O	O
t	O	O
declare	O	O
any	O	O
.	O	O
Therefore	O	O
,	O	O
any	O	O
code	O	O
that	O	O
throws	O	O
checked	O	O
exceptions	O	O
must	O	O
wrap	O	O
them	O	O
in	O	O
try	O	O
-	O	O
catch	O	O
or	O	O
Throwables	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
propagate	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
even	O	O
if	O	O
you	O	O
do	O	O
that	O	O
,	O	O
it	O	O
'	O	O
s	O	O
not	O	O
always	O	O
clear	O	O
what	O	O
happens	O	O
to	O	O
the	O	O
thrown	O	O
exception	O	O
.	O	O
It	O	O
could	O	O
get	O	O
swallowed	O	O
somewhere	O	O
in	O	O
the	O	O
guts	O	O
of	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Limited	O	O
flow	O	O
-	O	O
control	O	O
.	O	O
A	O	O
return	O	O
in	O	O
a	O	O
lambda	O	O
equals	O	O
a	O	O
continue	O	O
in	O	O
a	O	O
for	O	O
-	O	O
each	O	O
,	O	O
but	O	O
there	O	O
is	O	O
no	O	O
equivalent	O	O
to	O	O
a	O	O
break	O	O
.	O	O
It	O	O
'	O	O
s	O	O
also	O	O
difficult	O	O
to	O	O
do	O	O
things	O	O
like	O	O
return	O	O
values	O	O
,	O	O
short	O	O
circuit	O	O
,	O	O
or	O	O
set	O	O
flags	O	O
(	O	O
which	O	O
would	O	O
have	O	O
alleviated	O	O
things	O	O
a	O	O
bit	O	O
,	O	O
if	O	O
it	O	O
wasn	O	O
'	O	O
t	O	O
a	O	O
violation	O	O
of	O	O
the	O	O
no	O	O
non	O	O
-	O	O
final	O	O
variables	O	O
rule	O	O
)	O	O
.	O	O
"	O	O
This	O	O
is	O	O
not	O	O
just	O	O
an	O	O
optimization	O	O
,	O	O
but	O	O
critical	O	O
when	O	O
you	O	O
consider	O	O
that	O	O
some	O	O
sequences	O	O
(	O	O
like	O	O
reading	O	O
the	O	O
lines	O	O
in	O	O
a	O	O
file	O	O
)	O	O
may	O	O
have	O	O
side	O	O
-	O	O
effects	O	O
,	O	O
or	O	O
you	O	O
may	O	O
have	O	O
an	O	O
infinite	O	O
sequence	O	O
.	O	O
"	O	O
#	O	O
li	O	O
Might	O	O
execute	O	O
in	O	O
parallel	O	O
,	O	O
which	O	O
is	O	O
a	O	O
horrible	O	O
,	O	O
horrible	O	O
thing	O	O
for	O	O
all	O	O
but	O	O
the	O	O
0	O	O
.	O	O
1	O	O
%	O	O
of	O	O
your	O	O
code	O	O
that	O	O
needs	O	O
to	O	O
be	O	O
optimized	O	O
.	O	O
Any	O	O
parallel	O	O
code	O	O
has	O	O
to	O	O
be	O	O
thought	O	O
through	O	O
(	O	O
even	O	O
if	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
use	O	O
locks	O	O
,	O	O
volatiles	O	O
,	O	O
and	O	O
other	O	O
particularly	O	O
nasty	O	O
aspects	O	O
of	O	O
traditional	O	O
multi	O	O
-	O	O
threaded	O	O
execution	O	O
)	O	O
.	O	O
Any	O	O
bug	O	O
will	O	O
be	O	O
tough	O	O
to	O	O
find	O	O
.	O	O
#	O	O
li	O	O
Might	O	O
hurt	O	O
performance	O	O
,	O	O
because	O	O
the	O	O
JIT	O	O
can	O	O
'	O	O
t	O	O
optimize	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
+	O	O
lambda	O	O
to	O	O
the	O	O
same	O	O
extent	O	O
as	O	O
plain	O	O
loops	O	O
,	O	O
especially	O	O
now	O	O
that	O	O
lambdas	O	O
are	O	O
new	O	O
.	O	O
By	O	O
"	O	O
optimization	O	O
"	O	O
I	O	O
do	O	O
not	O	O
mean	O	O
the	O	O
overhead	O	O
of	O	O
calling	O	O
lambdas	O	O
(	O	O
which	O	O
is	O	O
small	O	O
)	O	O
,	O	O
but	O	O
to	O	O
the	O	O
sophisticated	O	O
analysis	O	O
and	O	O
transformation	O	O
that	O	O
the	O	O
modern	O	O
JIT	O	O
compiler	O	O
performs	O	O
on	O	O
running	O	O
code	O	O
.	O	O
#	O	O
li	O	O
If	O	O
you	O	O
do	O	O
need	O	O
parallelism	O	O
,	O	O
it	O	O
is	O	O
probably	O	O
much	O	O
faster	O	O
and	O	O
not	O	O
much	O	O
more	O	O
difficult	O	O
to	O	O
use	O	O
an	O	O
ExecutorService	B-api_mention	O
.	O	O
Streams	O	O
are	O	O
both	O	O
automagical	O	O
(	O	O
read	O	O
:	O	O
don	O	O
'	O	O
t	O	O
know	O	O
much	O	O
about	O	O
your	O	O
problem	O	O
)	O	O
and	O	O
use	O	O
a	O	O
specialized	O	O
(	O	O
read	O	O
:	O	O
inefficient	O	O
for	O	O
the	O	O
general	O	O
case	O	O
)	O	O
parallelization	O	O
strategy	O	O
(	O	O
fork	O	O
-	O	O
join	O	O
recursive	O	O
decomposition	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Makes	O	O
debugging	O	O
more	O	O
confusing	O	O
,	O	O
because	O	O
of	O	O
the	O	O
nested	O	O
call	O	O
hierarchy	O	O
and	O	O
,	O	O
god	O	O
forbid	O	O
,	O	O
parallel	O	O
execution	O	O
.	O	O
The	O	O
debugger	O	O
may	O	O
have	O	O
issues	O	O
displaying	O	O
variables	O	O
from	O	O
the	O	O
surrounding	O	O
code	O	O
,	O	O
and	O	O
things	O	O
like	O	O
step	O	O
-	O	O
through	O	O
may	O	O
not	O	O
work	O	O
as	O	O
expected	O	O
.	O	O
#	O	O
li	O	O
Streams	O	O
in	O	O
general	O	O
are	O	O
more	O	O
difficult	O	O
to	O	O
code	O	O
,	O	O
read	O	O
,	O	O
and	O	O
debug	O	O
.	O	O
Actually	O	O
,	O	O
this	O	O
is	O	O
true	O	O
of	O	O
complex	O	O
"	O	O
fluent	O	O
"	O	O
APIs	O	O
in	O	O
general	O	O
.	O	O
The	O	O
combination	O	O
of	O	O
complex	O	O
single	O	O
statements	O	O
,	O	O
heavy	O	O
use	O	O
of	O	O
generics	O	O
,	O	O
and	O	O
lack	O	O
of	O	O
intermediate	O	O
variables	O	O
conspire	O	O
to	O	O
produce	O	O
confusing	O	O
error	O	O
messages	O	O
and	O	O
frustrate	O	O
debugging	O	O
.	O	O
Instead	O	O
of	O	O
"	O	O
this	O	O
method	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
an	O	O
overload	O	O
for	O	O
type	O	O
X	O	O
"	O	O
you	O	O
get	O	O
an	O	O
error	O	O
message	O	O
closer	O	O
to	O	O
"	O	O
somewhere	O	O
you	O	O
messed	O	O
up	O	O
the	O	O
types	O	O
,	O	O
but	O	O
we	O	O
don	O	O
'	O	O
t	O	O
know	O	O
where	O	O
or	O	O
how	O	O
.	O	O
"	O	O
Similarly	O	O
,	O	O
you	O	O
can	O	O
'	O	O
t	O	O
step	O	O
through	O	O
and	O	O
examine	O	O
things	O	O
in	O	O
a	O	O
debugger	O	O
as	O	O
easily	O	O
as	O	O
when	O	O
the	O	O
code	O	O
is	O	O
broken	O	O
into	O	O
multiple	O	O
statements	O	O
,	O	O
and	O	O
intermediate	O	O
values	O	O
are	O	O
saved	O	O
to	O	O
variables	O	O
.	O	O
Finally	O	O
,	O	O
reading	O	O
the	O	O
code	O	O
and	O	O
understanding	O	O
the	O	O
types	O	O
and	O	O
behavior	O	O
at	O	O
each	O	O
stage	O	O
of	O	O
execution	O	O
may	O	O
be	O	O
non	O	O
-	O	O
trivial	O	O
.	O	O
#	O	O
li	O	O
Sticks	O	O
out	O	O
like	O	O
a	O	O
sore	O	O
thumb	O	O
.	O	O
The	O	O
Java	O	O
language	O	O
already	O	O
has	O	O
the	O	O
for	O	O
-	O	O
each	O	O
statement	O	O
.	O	O
Why	O	O
replace	O	O
it	O	O
with	O	O
a	O	O
function	O	O
call	O	O
?	O	O
Why	O	O
encourage	O	O
hiding	O	O
side	O	O
-	O	O
effects	O	O
somewhere	O	O
in	O	O
expressions	O	O
?	O	O
Why	O	O
encourage	O	O
unwieldy	O	O
one	O	O
-	O	O
liners	O	O
?	O	O
Mixing	O	O
regular	O	O
for	O	O
-	O	O
each	O	O
and	O	O
new	O	O
forEach	B-api_mention	B-api_mention
willy	O	O
-	O	O
nilly	O	O
is	O	O
bad	O	O
style	O	O
.	O	O
Code	O	O
should	O	O
speak	O	O
in	O	O
idioms	O	O
(	O	O
patterns	O	O
that	O	O
are	O	O
quick	O	O
to	O	O
comprehend	O	O
due	O	O
to	O	O
their	O	O
repetition	O	O
)	O	O
,	O	O
and	O	O
the	O	O
fewer	O	O
idioms	O	O
are	O	O
used	O	O
the	O	O
clearer	O	O
the	O	O
code	O	O
is	O	O
and	O	O
less	O	O
time	O	O
is	O	O
spent	O	O
deciding	O	O
which	O	O
idiom	O	O
to	O	O
use	O	O
(	O	O
a	O	O
big	O	O
time	O	O
-	O	O
drain	O	O
for	O	O
perfectionists	O	O
like	O	O
myself	O	O
!	O	O
)	O	O
.	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
I	O	O
'	O	O
m	O	O
not	O	O
a	O	O
big	O	O
fan	O	O
of	O	O
the	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
except	O	O
in	O	O
cases	O	O
when	O	O
it	O	O
makes	O	O
sense	O	O
.	O	O
Particularly	O	O
offensive	O	O
to	O	O
me	O	O
is	O	O
the	O	O
fact	O	O
that	O	O
Stream	B-api_mention	B-api_mention
does	O	O
not	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
despite	O	O
actually	O	O
having	O	O
method	O	O
iterator	O	O
)	O	O
and	O	O
cannot	O	O
be	O	O
used	O	O
in	O	O
a	O	O
for	O	O
-	O	O
each	O	O
,	O	O
only	O	O
with	O	O
a	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
I	O	O
recommend	O	O
casting	O	O
Streams	O	O
into	O	O
Iterables	O	O
with	O	O
(	O	O
Iterable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
stream	O	O
:	O	O
:	O	O
iterator	O	O
.	O	O
A	O	O
better	O	O
alternative	O	O
is	O	O
to	O	O
use	O	O
StreamEx	O	O
which	O	O
fixes	O	O
a	O	O
number	O	O
of	O	O
Stream	B-api_mention	B-api_mention
API	O	O
problems	O	O
,	O	O
including	O	O
implementing	O	O
Iterable	B-api_mention	B-api_mention
.	O	O
That	O	O
said	O	O
,	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
useful	O	O
for	O	O
the	O	O
following	O	O
:	O	O
#	O	O
li	O	O
Atomically	O	O
iterating	O	O
over	O	O
a	O	O
synchronized	O	O
list	O	O
.	O	O
Prior	O	O
to	O	O
this	O	O
,	O	O
a	O	O
list	O	O
generated	O	O
with	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
synchronizedList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
atomic	O	O
with	O	O
respect	O	O
to	O	O
things	O	O
like	O	O
get	O	O
or	O	O
set	O	O
,	O	O
but	O	O
was	O	O
not	O	O
thread	O	O
-	O	O
safe	O	O
when	O	O
iterating	O	O
.	O	O
#	O	O
li	O	O
Parallel	O	O
execution	O	O
(	O	O
using	O	O
an	O	O
appropriate	O	O
parallel	O	O
stream	O	O
)	O	O
.	O	O
This	O	O
saves	O	O
you	O	O
a	O	O
few	O	O
lines	O	O
of	O	O
code	O	O
vs	O	O
using	O	O
an	O	O
ExecutorService	B-api_mention	O
,	O	O
if	O	O
your	O	O
problem	O	O
matches	O	O
the	O	O
performance	O	O
assumptions	O	O
built	O	O
into	O	O
Streams	O	O
and	O	O
Spliterators	O	O
.	O	O
#	O	O
li	O	O
Specific	O	O
containers	O	O
which	O	O
,	O	O
like	O	O
the	O	O
synchronized	O	O
list	O	O
,	O	O
benefit	O	O
from	O	O
being	O	O
in	O	O
control	O	O
of	O	O
iteration	O	O
(	O	O
although	O	O
this	O	O
is	O	O
largely	O	O
theoretical	O	O
unless	O	O
people	O	O
can	O	O
bring	O	O
up	O	O
more	O	O
examples	O	O
)	O	O
#	O	O
li	O	O
Calling	O	O
a	O	O
single	O	O
function	O	O
more	O	O
cleanly	O	O
by	O	O
using	O	O
forEach	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
a	O	O
method	O	O
reference	O	O
argument	O	O
(	O	O
ie	O	O
,	O	O
list	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
However	O	O
,	O	O
keep	O	O
in	O	O
mind	O	O
the	O	O
points	O	O
on	O	O
checked	O	O
exceptions	O	O
,	O	O
more	O	O
difficult	O	O
debugging	O	O
,	O	O
and	O	O
reducing	O	O
the	O	O
number	O	O
of	O	O
idioms	O	O
you	O	O
use	O	O
when	O	O
writing	O	O
code	O	O
.	O	O
Articles	O	O
I	O	O
used	O	O
for	O	O
reference	O	O
:	O	O
#	O	O
li	O	O
Everything	O	O
about	O	O
Java	O	O
8	O	O
#	O	O
li	O	O
Iteration	O	O
Inside	O	O
and	O	O
Out	O	O
(	O	O
as	O	O
pointed	O	O
out	O	O
by	O	O
another	O	O
poster	O	O
)	O	O
EDIT	O	O
:	O	O
Looks	O	O
like	O	O
some	O	O
of	O	O
the	O	O
original	O	O
proposals	O	O
for	O	O
lambdas	O	O
(	O	O
such	O	O
as	O	O
#	O	O
a	O	O
)	O	O
solved	O	O
some	O	O
of	O	O
the	O	O
issues	O	O
I	O	O
mentioned	O	O
(	O	O
while	O	O
adding	O	O
their	O	O
own	O	O
complications	O	O
,	O	O
of	O	O
course	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
5785745	O	O
,	O	O
answer	O	O
-	O	O
15962949	O	O
If	O	O
you	O	O
want	O	O
to	O	O
make	O	O
a	O	O
copy	O	O
of	O	O
:	O	O
int	O	O
[	O	O
]	O	O
a	O	O
=	O	O
{	O	O
1	O	O
,	O	O
2	O	O
,	O	O
3	O	O
,	O	O
4	O	O
,	O	O
5	O	O
}	O	O
;	O	O
This	O	O
is	O	O
the	O	O
way	O	O
to	O	O
go	O	O
:	O	O
int	O	O
[	O	O
]	O	O
b	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
may	O	O
be	O	O
faster	O	O
than	O	O
a	O	O
.	B-api_mention	B-api_mention
clone	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
small	O	O
arrays	O	O
.	O	O
Both	O	O
copy	O	O
elements	O	O
equally	O	O
fast	O	O
but	O	O
clone	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
returns	O	O
Object	B-api_mention	O
so	O	O
the	O	O
compiler	O	O
has	O	O
to	O	O
insert	O	O
an	O	O
implicit	O	O
cast	O	O
to	O	O
int	O	O
[	O	O
]	O	O
.	O	O
You	O	O
can	O	O
see	O	O
it	O	O
in	O	O
the	O	O
bytecode	O	O
,	O	O
something	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
25056607	O	O
,	O	O
answer	O	O
-	O	O
25056821	O	O
Documentation	O	O
:	O	O
For	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
blockquote	O	O
It	O	O
will	O	O
simply	O	O
return	O	O
the	O	O
entire	O	O
string	O	O
that	O	O
'	O	O
s	O	O
why	O	O
it	O	O
returns	O	O
1	O	O
.	O	O
For	O	O
the	O	O
second	O	O
case	O	O
,	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
will	O	O
discard	O	O
the	O	O
,	O	O
so	O	O
the	O	O
result	O	O
will	O	O
be	O	O
empty	O	O
.	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
silently	O	O
discards	O	O
trailing	O	O
separators	O	O
see	O	O
guava	O	O
StringsExplained	B-api_mention	B-api_mention
too	O	O
Question	O	O
-	O	O
11774099	O	O
,	O	O
answer	O	O
-	O	O
11774137	O	O
iterate	O	O
through	O	O
the	O	O
whole	O	O
65k	O	O
chars	O	O
and	O	O
ask	O	O
Character	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
isJavaIdentifierStart	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
The	O	O
answer	O	O
is	O	O
:	O	O
"	O	O
undertie	O	O
"	O	O
decimal	O	O
8255	O	O
Question	O	O
-	O	O
5585779	O	O
,	O	O
answer	O	O
-	O	O
36394016	O	O
Whenever	O	O
there	O	O
is	O	O
the	O	O
slightest	O	O
possibility	O	O
that	O	O
the	O	O
given	O	O
String	B-api_mention	B-api_mention
does	O	O
not	O	O
contain	O	O
an	O	O
Integer	O	B-api_mention
,	O	O
you	O	O
have	O	O
to	O	O
handle	O	O
this	O	O
special	O	O
case	O	O
.	O	O
Sadly	O	O
,	O	O
the	O	O
standard	O	O
Java	O	O
methods	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
parseInt	I-api_mention	I-api_mention
and	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
throw	O	O
a	O	O
NumberFormatException	B-api_mention	B-api_mention
to	O	O
signal	O	O
this	O	O
special	O	O
case	O	O
.	O	O
Thus	O	O
,	O	O
you	O	O
have	O	O
to	O	O
use	O	O
exceptions	O	O
for	O	O
flow	O	O
control	O	O
,	O	O
which	O	O
is	O	O
generally	O	O
considered	O	O
bad	O	O
coding	O	O
style	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
,	O	O
this	O	O
special	O	O
case	O	O
should	O	O
be	O	O
handled	O	O
by	O	O
returning	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Since	O	O
Java	O	O
does	O	O
not	O	O
offer	O	O
such	O	O
a	O	O
method	O	O
,	O	O
I	O	O
use	O	O
the	O	O
following	O	O
wrapper	O	O
:	O	O
#	O	O
pre	O	O
Usage	O	O
:	O	O
#	O	O
pre	O	O
While	O	O
this	O	O
is	O	O
still	O	O
using	O	O
exceptions	O	O
for	O	O
flow	O	O
control	O	O
internally	O	O
,	O	O
the	O	O
usage	O	O
code	O	O
becomes	O	O
very	O	O
clean	O	O
.	O	O
Question	O	O
-	O	O
32820722	O	O
,	O	O
answer	O	O
-	O	O
32820984	O	O
Let	O	O
'	O	O
s	O	O
rewrite	O	O
that	O	O
lambda	O	O
expression	O	O
with	O	O
parentheses	O	O
to	O	O
make	O	O
it	O	O
more	O	O
clear	O	O
:	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
curriedAdd	O	O
=	O	O
a	O	O
-	O	O
>	O	O
(	O	O
b	O	O
-	O	O
>	O	O
(	O	O
a	O	O
+	O	O
b	O	O
)	O	O
)	O	O
;	O	O
So	O	O
we	O	O
are	O	O
declaring	O	O
a	O	O
function	O	O
taking	O	O
an	O	O
int	O	O
which	O	O
returns	O	O
a	O	O
Function	B-api_mention	O
.	O	O
More	O	O
specifically	O	O
,	O	O
the	O	O
function	O	O
returned	O	O
takes	O	O
an	O	O
int	O	O
and	O	O
returns	O	O
an	O	O
int	O	O
(	O	O
the	O	O
sum	O	O
of	O	O
the	O	O
two	O	O
elements	O	O
)	O	O
:	O	O
this	O	O
can	O	O
be	O	O
represented	O	O
as	O	O
an	O	O
IntUnaryOperator	O	O
.	O	O
Therefore	O	O
,	O	O
curriedAdd	O	O
is	O	O
a	O	O
function	O	O
taking	O	O
an	O	O
int	O	O
and	O	O
returning	O	O
an	O	O
IntUnaryOperator	O	O
,	O	O
so	O	O
it	O	O
can	O	O
be	O	O
represented	O	O
as	O	O
IntFunction	B-api_mention	B-api_mention
<	I-api_mention	O
IntUnaryOperator	I-api_mention	O
>	I-api_mention	O
.	O	O
Question	O	O
-	O	O
29183904	O	O
I	O	O
used	O	O
to	O	O
define	O	O
a	O	O
set	O	O
of	O	O
related	O	O
constants	O	O
like	O	O
Bundle	O	O
keys	O	O
together	O	O
in	O	O
an	O	O
interface	O	O
like	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
provides	O	O
me	O	O
a	O	O
nicer	O	O
way	O	O
to	O	O
group	O	O
related	O	O
constants	O	O
together	O	O
and	O	O
used	O	O
them	O	O
by	O	O
making	O	O
a	O	O
static	O	O
import	O	O
(	O	O
not	O	O
implements	O	O
)	O	O
.	O	O
I	O	O
know	O	O
Android	O	O
framework	O	O
also	O	O
uses	O	O
the	O	O
constants	O	O
in	O	O
same	O	O
way	O	O
like	O	O
Toast	O	O
.	O	O
LENTH	O	O
_	O	O
LONG	O	O
,	O	O
View	O	B-api_mention
.	O	I-api_mention
GONE	O	I-api_mention
.	O	O
However	O	O
,	O	O
I	O	O
often	O	O
feel	O	O
that	O	O
the	O	O
Java	O	O
Enums	O	O
provide	O	O
much	O	O
better	O	O
and	O	O
powerful	O	O
way	O	O
to	O	O
represent	O	O
the	O	O
constant	O	O
.	O	O
But	O	O
is	O	O
there	O	O
a	O	O
performence	O	O
issue	O	O
in	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
?	O	O
With	O	O
a	O	O
bit	O	O
of	O	O
research	O	O
I	O	O
ended	O	O
up	O	O
in	O	O
confusion	O	O
.	O	O
From	O	O
this	O	O
question	O	O
"	O	O
Avoid	O	O
Enums	O	O
Where	O	O
You	O	O
Only	O	O
Need	O	O
Ints	O	O
	O	O
removed	O	O
from	O	O
Android	O	O
'	O	O
s	O	O
performance	O	O
tips	O	O
?	O	O
it	O	O
'	O	O
s	O	O
clear	O	O
that	O	O
Google	O	O
has	O	O
removed	O	O
"	O	O
Avoid	O	O
enums	O	O
"	O	O
from	O	O
its	O	O
performance	O	O
tips	O	O
,	O	O
but	O	O
from	O	O
it	O	O
'	O	O
s	O	O
official	O	O
training	O	O
docs	O	O
Be	O	O
aware	O	O
of	O	O
memory	O	O
overhead	O	O
section	O	O
it	O	O
clearly	O	O
says	O	O
:	O	O
"	O	O
Enums	O	O
often	O	O
require	O	O
more	O	O
than	O	O
twice	O	O
as	O	O
much	O	O
memory	O	O
as	O	O
static	O	O
constants	O	O
.	O	O
You	O	O
should	O	O
strictly	O	O
avoid	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
.	O	O
"	O	O
Is	O	O
this	O	O
still	O	O
holds	O	O
good	O	O
?	O	O
(	O	O
say	O	O
in	O	O
Java	O	O
versions	O	O
after	O	O
1	O	O
.	O	O
6	O	O
)	O	O
One	O	O
more	O	O
issue	O	O
that	O	O
I	O	O
observed	O	O
is	O	O
to	O	O
send	O	O
enums	O	O
across	O	O
intents	O	O
using	O	O
Bundle	O	O
I	O	O
should	O	O
send	O	O
them	O	O
by	O	O
serializing	O	O
(	O	O
i	O	O
.	O	O
e	O	O
putSerializable	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
that	O	O
I	O	O
think	O	O
an	O	O
expensive	O	O
operation	O	O
compared	O	O
to	O	O
primitive	O	O
putString	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
,	O	O
eventhough	O	O
enums	O	O
provides	O	O
it	O	O
for	O	O
free	O	O
)	O	O
.	O	O
Can	O	O
someone	O	O
please	O	O
clarify	O	O
which	O	O
one	O	O
is	O	O
the	O	O
best	O	O
way	O	O
to	O	O
represent	O	O
the	O	O
same	O	O
in	O	O
Android	O	O
?	O	O
Should	O	O
I	O	O
strictly	O	O
avoid	O	O
using	O	O
enums	O	O
on	O	O
Android	O	O
?	O	O
Question	O	O
-	O	O
5011932	O	O
I	O	O
am	O	O
storing	O	O
a	O	O
SQL	O	O
query	O	O
in	O	O
my	O	O
strings	O	O
.	O	O
xml	O	O
file	O	O
and	O	O
I	O	O
want	O	O
to	O	O
use	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
Format	I-api_mention	I-api_mention
to	O	O
build	O	O
the	O	O
final	O	O
string	O	O
in	O	O
code	O	O
.	O	O
The	O	O
SELECT	O	O
statement	O	O
uses	O	O
a	O	O
like	O	O
,	O	O
something	O	O
like	O	O
this	O	O
:	O	O
SELECT	O	O
Field1	O	O
,	O	O
Field2	O	O
FROM	O	O
mytable	O	O
WHERE	O	O
Field1	O	O
LIKE	O	O
'	O	O
%	O	O
something	O	O
%	O	O
'	O	O
In	O	O
order	O	O
to	O	O
format	O	O
that	O	O
I	O	O
replace	O	O
'	O	O
something	O	O
'	O	O
with	O	O
%	O	O
1	O	O
$	O	O
s	O	O
so	O	O
it	O	O
becomes	O	O
:	O	O
SELECT	O	O
Field1	O	O
,	O	O
Field2	O	O
FROM	O	O
mytable	O	O
WHERE	O	O
Field1	O	O
LIKE	O	O
\	O	O
'	O	O
%	O	O
%	O	O
1	O	O
$	O	O
s	O	O
%	O	O
\	O	O
'	O	O
I	O	O
escape	O	O
the	O	O
single	O	O
quotes	O	O
with	O	O
the	O	O
backslash	O	O
.	O	O
However	O	O
I	O	O
am	O	O
not	O	O
able	O	O
to	O	O
escape	O	O
the	O	O
%	O	O
sign	O	O
.	O	O
How	O	O
can	O	O
I	O	O
include	O	O
a	O	O
like	O	O
statement	O	O
in	O	O
my	O	O
strings	O	O
.	O	O
xml	O	O
file	O	O
?	O	O
Question	O	O
-	O	O
20945049	O	O
We	O	O
all	O	O
know	O	O
that	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
in	O	O
Java	O	O
,	O	O
but	O	O
check	O	O
the	O	O
following	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Why	O	O
does	O	O
this	O	O
program	O	O
operate	O	O
like	O	O
this	O	O
?	O	O
And	O	O
why	O	O
is	O	O
the	O	O
value	O	O
of	O	O
s1	O	O
and	O	O
s2	O	O
changed	O	O
,	O	O
but	O	O
not	O	O
s3	O	O
?	O	O
Question	O	O
-	O	O
4812570	O	O
,	O	O
answer	O	O
-	O	O
4812585	O	O
You	O	O
have	O	O
to	O	O
use	O	O
getStackTrace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
instead	O	O
of	O	O
printStackTrace	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Here	O	O
is	O	O
a	O	O
good	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
9749746	O	O
,	O	O
answer	O	O
-	O	O
9749864	O	O
You	O	O
are	O	O
specifically	O	O
asking	O	O
about	O	O
how	O	O
they	O	O
internally	O	O
work	O	O
,	O	O
so	O	O
here	O	O
you	O	O
are	O	O
:	O	O
No	O	O
synchronization	O	O
#	O	O
pre	O	O
It	O	O
basically	O	O
reads	O	O
value	O	O
from	O	O
memory	O	O
,	O	O
increments	O	O
it	O	O
and	O	O
puts	O	O
back	O	O
to	O	O
memory	O	O
.	O	O
This	O	O
works	O	O
in	O	O
single	O	O
thread	O	O
but	O	O
nowadays	O	O
,	O	O
in	O	O
the	O	O
era	O	O
of	O	O
multi	O	O
-	O	O
core	O	O
,	O	O
multi	O	O
-	O	O
CPU	O	O
,	O	O
multi	O	O
-	O	O
level	O	O
caches	O	O
it	O	O
won	O	O
'	O	O
t	O	O
work	O	O
correctly	O	O
.	O	O
First	O	O
of	O	O
all	O	O
it	O	O
introduces	O	O
race	O	O
condition	O	O
(	O	O
several	O	O
threads	O	O
can	O	O
read	O	O
the	O	O
value	O	O
at	O	O
the	O	O
same	O	O
time	O	O
)	O	O
,	O	O
but	O	O
also	O	O
visibility	O	O
problems	O	O
.	O	O
The	O	O
value	O	O
might	O	O
only	O	O
be	O	O
stored	O	O
in	O	O
"	O	O
local	O	O
"	O	O
CPU	O	O
memory	O	O
(	O	O
some	O	O
cache	O	O
)	O	O
and	O	O
not	O	O
be	O	O
visible	O	O
for	O	O
other	O	O
CPUs	O	O
/	O	O
cores	O	O
(	O	O
and	O	O
thus	O	O
-	O	O
threads	O	O
)	O	O
.	O	O
This	O	O
is	O	O
why	O	O
many	O	O
refer	O	O
to	O	O
local	O	O
copy	O	O
of	O	O
a	O	O
variable	O	O
in	O	O
a	O	O
thread	O	O
.	O	O
It	O	O
is	O	O
very	O	O
unsafe	O	O
.	O	O
Consider	O	O
this	O	O
popular	O	O
but	O	O
broken	O	O
thread	O	O
-	O	O
stopping	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Add	O	O
volatile	O	O
to	O	O
stopped	O	O
variable	O	O
and	O	O
it	O	O
works	O	O
fine	O	O
-	O	O
if	O	O
any	O	O
other	O	O
thread	O	O
modifies	O	O
stopped	O	O
variable	O	O
via	O	O
pleaseStop	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
you	O	O
are	O	O
guaranteed	O	O
to	O	O
see	O	O
that	O	O
change	O	O
immediately	O	O
in	O	O
working	O	O
thread	O	O
'	O	O
s	O	O
while	O	O
(	O	O
args	O	O
)	O	O
loop	O	O
.	O	O
BTW	O	O
this	O	O
is	O	O
not	O	O
a	O	O
good	O	O
way	O	O
to	O	O
interrupt	O	O
a	O	O
thread	O	O
either	O	O
,	O	O
see	O	O
:	O	O
How	O	O
to	O	O
stop	O	O
a	O	O
thread	O	O
that	O	O
is	O	O
running	O	O
forever	O	O
without	O	O
any	O	O
use	O	O
and	O	O
Stopping	O	O
a	O	O
specific	O	O
java	O	O
thread	O	O
.	O	O
AtomicInteger	O	B-api_mention
#	O	O
pre	O	O
The	O	O
AtomicInteger	B-api_mention	B-api_mention
class	O	O
uses	O	O
CAS	O	O
(	O	O
compare	O	O
-	O	O
and	O	O
-	O	O
swap	O	O
)	O	O
low	O	O
-	O	O
level	O	O
CPU	O	O
operations	O	O
(	O	O
no	O	O
synchronization	O	O
needed	O	O
!	O	O
)	O	O
They	O	O
allow	O	O
you	O	O
to	O	O
modify	O	O
a	O	O
particular	O	O
variable	O	O
only	O	O
if	O	O
the	O	O
present	O	O
value	O	O
is	O	O
equal	O	O
to	O	O
something	O	O
else	O	O
(	O	O
and	O	O
is	O	O
returned	O	O
successfully	O	O
)	O	O
.	O	O
So	O	O
when	O	O
you	O	O
execute	O	O
getAndIncrement	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
it	O	O
actually	O	O
runs	O	O
in	O	O
a	O	O
loop	O	O
(	O	O
simplified	O	O
real	O	O
implementation	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
basically	O	O
:	O	O
read	O	O
;	O	O
try	O	O
to	O	O
store	O	O
incremented	O	O
value	O	O
;	O	O
if	O	O
not	O	O
successful	O	O
(	O	O
the	O	O
value	O	O
is	O	O
no	O	O
longer	O	O
equal	O	O
to	O	O
current	O	O
)	O	O
,	O	O
read	O	O
and	O	O
try	O	O
again	O	O
.	O	O
The	O	O
compareAndSet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
implemented	O	O
in	O	O
native	O	O
code	O	O
(	O	O
assembly	O	O
)	O	O
.	O	O
volatile	O	O
without	O	O
synchronization	O	O
#	O	O
pre	O	O
This	O	O
code	O	O
is	O	O
not	O	O
correct	O	O
.	O	O
It	O	O
fixes	O	O
the	O	O
visibility	O	O
issue	O	O
(	O	O
volatile	O	O
makes	O	O
sure	O	O
other	O	O
threads	O	O
can	O	O
see	O	O
change	O	O
made	O	O
to	O	O
counter	O	O
)	O	O
but	O	O
still	O	O
has	O	O
a	O	O
race	O	O
condition	O	O
.	O	O
This	O	O
has	O	O
been	O	O
explained	O	O
multiple	O	O
times	O	O
:	O	O
pre	O	O
/	O	O
post	O	O
-	O	O
incrementation	O	O
is	O	O
not	O	O
atomic	B-api_mention	O
.	O	O
The	O	O
only	O	O
side	O	O
effect	O	O
of	O	O
volatile	O	O
is	O	O
"	O	O
flushing	O	O
"	O	O
caches	O	O
so	O	O
that	O	O
all	O	O
other	O	O
parties	O	O
see	O	O
the	O	O
freshest	O	O
version	O	O
of	O	O
the	O	O
data	O	O
.	O	O
This	O	O
is	O	O
too	O	O
strict	O	O
in	O	O
most	O	O
situations	O	O
;	O	O
that	O	O
is	O	O
why	O	O
volatile	O	O
is	O	O
not	O	O
default	O	O
.	O	O
volatile	O	O
without	O	O
synchronization	O	O
(	O	O
2	O	O
)	O	O
#	O	O
pre	O	O
The	O	O
same	O	O
problem	O	O
as	O	O
above	O	O
,	O	O
but	O	O
even	O	O
worse	O	O
because	O	O
i	O	O
is	O	O
not	O	O
private	O	O
.	O	O
The	O	O
race	O	O
condition	O	O
is	O	O
still	O	O
present	O	O
.	O	O
Why	O	O
is	O	O
it	O	O
a	O	O
problem	O	O
?	O	O
If	O	O
,	O	O
say	O	O
,	O	O
two	O	O
threads	O	O
run	O	O
this	O	O
code	O	O
simultaneously	O	O
,	O	O
the	O	O
output	O	O
might	O	O
be	O	O
+	O	O
5	O	O
or	O	O
+	O	O
10	O	O
.	O	O
However	O	O
,	O	O
you	O	O
are	O	O
guaranteed	O	O
to	O	O
see	O	O
the	O	O
change	O	O
.	O	O
Multiple	O	O
independent	O	O
synchronized	O	O
#	O	O
pre	O	O
Surprise	O	O
,	O	O
this	O	O
code	O	O
is	O	O
incorrect	O	O
as	O	O
well	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
it	O	O
is	O	O
completely	O	O
wrong	O	O
.	O	O
First	O	O
of	O	O
all	O	O
you	O	O
are	O	O
synchronizing	O	O
on	O	O
i	O	O
,	O	O
which	O	O
is	O	O
about	O	O
to	O	O
be	O	O
changed	O	O
(	O	O
moreover	O	O
,	O	O
i	O	O
is	O	O
a	O	O
primitive	O	O
,	O	O
so	O	O
I	O	O
guess	O	O
you	O	O
are	O	O
synchronizing	O	O
on	O	O
a	O	O
temporary	O	O
Integer	O	B-api_mention
created	O	O
via	O	O
autoboxing	O	O
.	O	O
.	O	O
.	O	O
)	O	O
Completely	O	O
flawed	O	O
.	O	O
You	O	O
could	O	O
also	O	O
write	O	O
:	O	O
#	O	O
pre	O	O
No	O	O
two	O	O
threads	O	O
can	O	O
enter	O	O
the	O	O
same	O	O
synchronized	O	O
block	O	O
with	O	O
the	O	O
same	O	O
lock	O	O
.	O	O
In	O	O
this	O	O
case	O	O
(	O	O
and	O	O
similarly	O	O
in	O	O
your	O	O
code	O	O
)	O	O
the	O	O
lock	O	O
object	O	O
changes	O	O
upon	O	O
every	O	O
execution	O	O
,	O	O
so	O	O
synchronized	O	O
effectively	O	O
has	O	O
no	O	O
effect	O	O
.	O	O
Even	O	O
if	O	O
you	O	O
have	O	O
used	O	O
a	O	O
final	O	O
variable	O	O
(	O	O
or	O	O
this	O	O
)	O	O
for	O	O
synchronization	O	O
,	O	O
the	O	O
code	O	O
is	O	O
still	O	O
incorrect	O	O
.	O	O
Two	O	O
threads	O	O
can	O	O
first	O	O
read	O	O
i	O	O
to	O	O
temp	O	O
synchronously	O	O
(	O	O
having	O	O
the	O	O
same	O	O
value	O	O
locally	O	O
in	O	O
temp	O	O
)	O	O
,	O	O
then	O	O
the	O	O
first	O	O
assigns	O	O
a	O	O
new	O	O
value	O	O
to	O	O
i	O	O
(	O	O
say	O	O
,	O	O
from	O	O
1	O	O
to	O	O
6	O	O
)	O	O
and	O	O
the	O	O
other	O	O
one	O	O
does	O	O
the	O	O
same	O	O
thing	O	O
(	O	O
from	O	O
1	O	O
to	O	O
6	O	O
)	O	O
.	O	O
The	O	O
synchronization	O	O
must	O	O
span	O	O
from	O	O
reading	O	O
to	O	O
assigning	O	O
a	O	O
value	O	O
.	O	O
Your	O	O
first	O	O
synchronization	O	O
has	O	O
no	O	O
effect	O	O
(	O	O
reading	O	O
an	O	O
int	O	O
is	O	O
atomic	O	O
)	O	O
and	O	O
the	O	O
second	O	O
as	O	O
well	O	O
.	O	O
In	O	O
my	O	O
opinion	O	O
,	O	O
these	O	O
are	O	O
the	O	O
correct	O	O
forms	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
5785745	O	O
,	O	O
answer	O	O
-	O	O
34845194	O	O
You	O	O
can	O	O
also	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOfRange	I-api_mention	I-api_mention
.	O	O
Example	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
method	O	O
is	O	O
similar	O	O
to	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
more	O	O
flexible	O	O
.	O	O
Both	O	O
of	O	O
them	O	O
use	O	O
System	B-api_mention	O
.	I-api_mention	O
arraycopy	I-api_mention	O
under	O	O
the	O	O
hood	O	O
.	O	O
See	O	O
:	O	O
#	O	O
li	O	O
#	O	O
a	O	O
#	O	O
li	O	O
#	O	O
a	O	O
#	O	O
li	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
31170459	O	O
I	O	O
was	O	O
testing	O	O
boundary	O	O
conditions	O	O
on	O	O
some	O	O
code	O	O
involving	O	O
a	O	O
BigDecimal	B-api_mention	B-api_mention
,	O	O
and	O	O
I	O	O
noticed	O	O
that	O	O
when	O	O
a	O	O
BigDecimal	B-api_mention	B-api_mention
is	O	O
initialized	O	O
with	O	O
the	O	O
String	B-api_mention	B-api_mention
StringLiteral	O	O
it	O	O
behaves	O	O
unexpectedly	O	O
.	O	O
It	O	O
seems	O	O
to	O	O
have	O	O
a	O	O
value	O	O
between	O	O
0	O	O
and	O	O
1e	O	O
-	O	O
2147483647	O	O
.	O	O
When	O	O
I	O	O
try	O	O
calling	O	O
intValue	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
I	O	O
get	O	O
a	O	O
NegativeArraySizeException	O	O
.	O	O
I	O	O
should	O	O
note	O	O
that	O	O
2147483647	O	O
is	O	O
the	O	O
max	O	O
value	O	O
of	O	O
an	O	O
integer	O	O
on	O	O
my	O	O
system	O	O
.	O	O
Am	O	O
I	O	O
doing	O	O
something	O	O
wrong	O	O
,	O	O
or	O	O
is	O	O
this	O	O
a	O	O
problem	O	O
with	O	O
BigDecimal	B-api_mention	B-api_mention
?	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
32356762	O	O
,	O	O
answer	O	O
-	O	O
32357142	O	O
When	O	O
returning	O	O
List	B-api_mention	B-api_mention
,	O	O
you	O	O
'	O	O
ll	O	O
be	O	O
promoting	O	O
program	O	O
to	O	O
an	O	O
interface	O	O
,	O	O
which	O	O
is	O	O
a	O	O
very	O	O
good	O	O
practice	O	O
.	O	O
However	O	O
,	O	O
this	O	O
approach	O	O
has	O	O
its	O	O
limitation	O	O
.	O	O
For	O	O
example	O	O
,	O	O
you	O	O
cannot	O	O
use	O	O
some	O	O
methods	O	O
that	O	O
are	O	O
defined	O	O
for	O	O
ArrayList	B-api_mention	B-api_mention
and	O	O
don	O	O
'	O	O
t	O	O
exist	O	O
in	O	O
the	O	O
List	B-api_mention	B-api_mention
interface	O	O
-	O	O
See	O	O
this	O	O
answer	O	O
for	O	O
details	O	O
.	O	O
I	O	O
'	O	O
m	O	O
quoting	O	O
the	O	O
API	O	O
Design	O	O
from	O	O
the	O	O
The	O	O
Java	O	O
	O	O
Tutorials	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
essentially	O	O
an	O	O
array	O	O
,	O	O
they	O	O
are	O	O
my	O	O
first	O	O
choice	O	O
when	O	O
I	O	O
need	O	O
to	O	O
have	O	O
a	O	O
"	O	O
collection	O	O
-	O	O
array	O	O
"	O	O
.	O	O
So	O	O
if	O	O
I	O	O
want	O	O
to	O	O
convert	O	O
enumeration	O	O
to	O	O
a	O	O
list	O	O
,	O	O
my	O	O
choice	O	O
would	O	O
be	O	O
an	O	O
array	O	O
list	O	O
.	O	O
In	O	O
any	O	O
other	O	O
cases	O	O
,	O	O
it	O	O
'	O	O
s	O	O
still	O	O
valid	O	O
to	O	O
write	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
list	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
5374311	O	O
,	O	O
answer	O	O
-	O	O
5374346	O	O
What	O	O
is	O	O
happening	O	O
is	O	O
that	O	O
stock	O	O
_	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
creating	O	O
an	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
rather	O	O
than	O	O
a	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
and	O	O
hence	O	O
the	O	O
typecast	O	O
is	O	O
failing	O	O
.	O	O
The	O	O
correct	O	O
code	O	O
would	O	O
be	O	O
:	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
even	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
stockList	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
For	O	O
more	O	O
details	O	O
,	O	O
refer	O	O
to	O	O
the	O	O
javadocs	O	O
for	O	O
the	O	O
two	O	O
overloads	O	O
of	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
.	O	O
(	O	O
From	O	O
a	O	O
technical	O	O
perspective	O	O
,	O	O
the	O	O
reason	O	O
for	O	O
this	O	O
API	O	O
behaviour	O	O
/	O	O
design	O	O
is	O	O
that	O	O
an	O	O
implementation	O	O
of	O	O
the	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
no	O	O
information	O	O
of	O	O
what	O	O
the	O	O
<	O	O
T	O	O
>	O	O
is	O	O
at	O	O
runtime	O	O
.	O	O
All	O	O
it	O	O
knows	O	O
is	O	O
that	O	O
the	O	O
raw	O	O
element	O	O
type	O	O
is	O	O
Object	B-api_mention	B-api_mention
.	O	O
By	O	O
contrast	O	O
,	O	O
in	O	O
the	O	O
other	O	O
case	O	O
,	O	O
the	O	O
array	O	O
parameter	O	O
gives	O	O
the	O	O
base	O	O
type	O	O
of	O	O
the	O	O
array	O	O
.	O	O
(	O	O
If	O	O
the	O	O
supplied	O	O
array	O	O
is	O	O
big	O	O
enough	O	O
,	O	O
it	O	O
is	O	O
used	O	O
.	O	O
Otherwise	O	O
a	O	O
new	O	O
array	O	O
of	O	O
the	O	O
same	O	O
type	O	O
and	O	O
a	O	O
larger	O	O
size	O	O
will	O	O
be	O	O
allocated	O	O
and	O	O
returned	O	O
as	O	O
the	O	O
result	O	O
.	O	O
)	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923211	O	O
This	O	O
advice	O	O
is	O	O
a	O	O
variant	O	O
of	O	O
the	O	O
"	O	O
be	O	O
as	O	O
unspecific	O	O
as	O	O
possible	O	O
regarding	O	O
inputs	O	O
and	O	O
as	O	O
specific	O	O
as	O	O
possible	O	O
regarding	O	O
outputs	O	O
"	O	O
rule	O	O
of	O	O
thumb	O	O
.	O	O
Usually	O	O
if	O	O
you	O	O
have	O	O
a	O	O
method	O	O
that	O	O
takes	O	O
a	O	O
plain	O	O
non	O	O
-	O	O
null	O	O
value	O	O
,	O	O
you	O	O
can	O	O
map	O	O
it	O	O
over	O	O
the	O	O
Optional	B-api_mention	B-api_mention
,	O	O
so	O	O
the	O	O
plain	O	O
version	O	O
is	O	O
strictly	O	O
more	O	O
unspecific	O	O
regarding	O	O
inputs	O	O
.	O	O
However	O	O
there	O	O
are	O	O
a	O	O
bunch	O	O
of	O	O
possible	O	O
reasons	O	O
why	O	O
you	O	O
would	O	O
want	O	O
to	O	O
require	O	O
an	O	O
Optional	B-api_mention	B-api_mention
argument	O	O
nonetheless	O	O
:	O	O
#	O	O
li	O	O
you	O	O
want	O	O
your	O	O
function	O	O
to	O	O
be	O	O
used	O	O
in	O	O
conjunction	O	O
with	O	O
another	O	O
API	O	O
that	O	O
returns	O	O
an	O	O
Optional	B-api_mention	B-api_mention
#	O	O
li	O	O
Your	O	O
function	O	O
should	O	O
return	O	O
something	O	O
other	O	O
than	O	O
an	O	O
empty	O	O
Optional	B-api_mention	B-api_mention
if	O	O
the	O	O
given	O	O
value	O	O
is	O	O
empty	O	O
#	O	O
li	O	O
You	O	O
think	O	O
Optional	B-api_mention	B-api_mention
is	O	O
so	O	O
awesome	O	O
that	O	O
whoever	O	O
uses	O	O
your	O	O
API	O	O
should	O	O
be	O	O
required	O	O
to	O	O
learn	O	O
about	O	O
it	O	O
;	O	O
-	O	O
)	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
6271520	O	O
Try	O	O
using	O	O
this	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getCanonicalName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
this	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getSimpleName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
it	O	O
'	O	O
s	O	O
an	O	O
anonymous	O	O
class	O	O
,	O	O
use	O	O
this	O	O
.	B-api_mention	B-api_mention
getClass	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getSuperclass	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
8777257	O	O
,	O	O
answer	O	O
-	O	O
8777279	O	O
array1	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
the	O	O
same	O	O
as	O	O
array1	O	O
=	O	O
=	O	O
array2	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
is	O	O
it	O	O
the	O	O
same	O	O
array	O	O
.	O	O
As	O	O
@	O	O
alf	O	O
points	O	O
out	O	O
it	O	O
'	O	O
s	O	O
not	O	O
what	O	O
most	O	O
people	O	O
expect	O	O
.	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
compares	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
arrays	O	O
.	O	O
Similarly	O	O
array	O	O
.	B-api_mention	B-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
may	O	O
not	O	O
be	O	O
very	O	O
useful	O	O
and	O	O
you	O	O
need	O	O
to	O	O
use	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
32859038	O	O
,	O	O
answer	O	O
-	O	O
32859065	O	O
You	O	O
can	O	O
create	O	O
a	O	O
Stream	B-api_mention	B-api_mention
of	O	O
the	O	O
indices	O	O
using	O	O
an	O	O
IntStream	B-api_mention	B-api_mention
and	O	O
then	O	O
convert	O	O
them	O	O
to	O	O
a	O	O
Map	O	B-api_mention
:	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
map	O	O
=	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
range	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
boxed	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
29095967	O	O
,	O	O
answer	O	O
-	O	O
29098447	O	O
The	O	O
solution	O	O
is	O	O
to	O	O
use	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
.	O	O
To	O	O
create	O	O
a	O	O
Collector	B-api_mention	B-api_mention
using	O	O
its	O	O
builder	O	O
pattern	O	O
is	O	O
already	O	O
given	O	O
as	O	O
solution	O	O
.	O	O
The	O	O
alternative	O	O
is	O	O
the	O	O
other	O	O
overloaded	O	O
collect	O	O
being	O	O
a	O	O
tiny	O	O
bit	O	O
more	O	O
primitive	O	O
.	O	O
#	O	O
pre	O	O
As	O	O
one	O	O
sees	O	O
,	O	O
I	O	O
make	O	O
a	O	O
list	O	O
of	O	O
string	O	O
lists	O	O
,	O	O
where	O	O
there	O	O
always	O	O
is	O	O
at	O	O
least	O	O
one	O	O
last	O	O
(	O	O
empty	O	O
)	O	O
string	O	O
list	O	O
.	O	O
#	O	O
li	O	O
The	O	O
first	O	O
function	O	O
creates	O	O
a	O	O
starting	O	O
list	O	O
of	O	O
string	O	O
lists	O	O
.	O	O
It	O	O
specifies	O	O
the	O	O
result	O	O
(	O	O
typed	O	O
)	O	O
object	O	O
.	O	O
#	O	O
li	O	O
The	O	O
second	O	O
function	O	O
is	O	O
called	O	O
to	O	O
process	O	O
each	O	O
element	O	O
.	O	O
It	O	O
is	O	O
an	O	O
action	O	O
on	O	O
the	O	O
partial	O	O
result	O	O
and	O	O
an	O	O
element	O	O
.	O	O
#	O	O
li	O	O
The	O	O
third	O	O
is	O	O
not	O	O
really	O	O
used	O	O
,	O	O
it	O	O
comes	O	O
into	O	O
play	O	O
on	O	O
parallelising	O	O
the	O	O
processing	O	O
,	O	O
when	O	O
partial	O	O
results	O	O
must	O	O
be	O	O
combined	O	O
.	O	O
A	O	O
solution	O	O
with	O	O
an	O	O
accumulator	O	O
:	O	O
As	O	O
@	O	O
StuartMarks	O	O
points	O	O
out	O	O
,	O	O
the	O	O
combiner	O	O
does	O	O
not	O	O
fullfill	O	O
the	O	O
contract	O	O
for	O	O
parallelism	O	O
.	O	O
Due	O	O
to	O	O
the	O	O
comment	O	O
of	O	O
@	O	O
ArnaudDenoyelle	O	O
a	O	O
version	O	O
using	O	O
reduce	O	O
.	O	O
#	O	O
pre	O	O
#	O	O
li	O	O
The	O	O
first	O	O
parameter	O	O
is	O	O
the	O	O
accumulated	O	O
object	O	O
.	O	O
#	O	O
li	O	O
The	O	O
second	O	O
function	O	O
accumulates	O	O
.	O	O
#	O	O
li	O	O
The	O	O
third	O	O
is	O	O
the	O	O
aforementioned	O	O
combiner	O	O
.	O	O
Question	O	O
-	O	O
9297899	O	O
We	O	O
can	O	O
determine	O	O
the	O	O
length	O	O
of	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
using	O	O
its	O	O
public	O	O
method	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
like	O	O
#	O	O
pre	O	O
Similarly	O	O
we	O	O
can	O	O
determine	O	O
the	O	O
length	O	O
of	O	O
an	O	O
Array	O	B-api_mention
object	O	O
using	O	O
the	O	O
length	O	O
property	O	O
#	O	O
pre	O	O
Whereas	O	O
the	O	O
size	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
defined	O	O
inside	O	O
the	O	O
ArrayList	B-api_mention	B-api_mention
class	O	O
,	O	O
where	O	O
is	O	O
this	O	O
length	O	O
property	O	O
of	O	O
Array	O	B-api_mention
defined	O	O
?	O	O
Question	O	O
-	O	O
27908213	O	O
,	O	O
answer	O	O
-	O	O
27908302	O	O
With	O	O
strings	O	O
you	O	O
'	O	O
re	O	O
going	O	O
to	O	O
want	O	O
to	O	O
use	O	O
the	O	O
equals	O	O
method	O	O
of	O	O
Strings	O	O
.	O	O
That	O	O
aside	O	O
,	O	O
you	O	O
already	O	O
have	O	O
the	O	O
enum	O	O
that	O	O
you	O	O
could	O	O
compare	O	O
with	O	O
the	O	O
equality	O	O
operator	O	O
.	O	O
Under	O	O
what	O	O
scenario	O	O
would	O	O
this	O	O
arise	O	O
?	O	O
That	O	O
being	O	O
said	O	O
,	O	O
yes	O	O
,	O	O
the	O	O
.	O	B-api_mention
equals	O	I-api_mention
method	O	O
will	O	O
return	O	O
true	O	O
if	O	O
they	O	O
are	O	O
the	O	O
same	O	O
.	O	O
I	O	O
'	O	O
m	O	O
not	O	O
sure	O	O
about	O	O
equality	O	O
operator	O	O
,	O	O
and	O	O
without	O	O
looking	O	O
it	O	O
up	O	O
,	O	O
I	O	O
can	O	O
tell	O	O
you	O	O
that	O	O
it	O	O
'	O	O
s	O	O
poor	O	O
programming	O	O
to	O	O
use	O	O
it	O	O
if	O	O
it	O	O
is	O	O
.	O	O
Question	O	O
-	O	O
10786042	O	O
,	O	O
answer	O	O
-	O	O
16226168	O	O
I	O	O
would	O	O
not	O	O
use	O	O
URLEncoder	B-api_mention	B-api_mention
.	O	O
Besides	O	O
being	O	O
incorrectly	O	O
named	O	O
(	O	O
URLEncoder	B-api_mention	B-api_mention
has	O	O
nothing	O	O
to	O	O
do	O	O
with	O	O
URLs	O	O
)	O	O
,	O	O
inefficient	O	O
(	O	O
it	O	O
uses	O	O
a	O	O
StringBuffer	B-api_mention	B-api_mention
instead	O	O
of	O	O
Builder	B-api_mention	B-api_mention
and	O	O
does	O	O
a	O	O
couple	O	O
of	O	O
other	O	O
things	O	O
that	O	O
are	O	O
slow	O	O
)	O	O
Its	O	O
also	O	O
way	O	O
too	O	O
easy	O	O
to	O	O
screw	O	O
it	O	O
up	O	O
.	O	O
Instead	O	O
I	O	O
would	O	O
use	O	O
URIBuilder	B-api_mention	B-api_mention
or	O	O
Spring	O	O
'	O	O
s	O	O
URIUtils	B-api_mention	B-api_mention
or	O	O
Commons	O	O
Apache	O	O
HttpClient	B-api_mention	O
.	O	O
The	O	O
reason	O	O
being	O	O
you	O	O
have	O	O
to	O	O
escape	O	O
the	O	O
query	O	O
parameters	O	O
name	O	O
(	O	O
ie	O	O
BalusC	O	O
'	O	O
s	O	O
answer	O	O
q	O	O
)	O	O
differently	O	O
than	O	O
the	O	O
parameter	O	O
value	O	O
.	O	O
The	O	O
only	O	O
downside	O	O
to	O	O
the	O	O
above	O	O
(	O	O
that	O	O
I	O	O
found	O	O
out	O	O
painfully	O	O
)	O	O
is	O	O
that	O	O
URL	O	O
'	O	O
s	O	O
are	O	O
not	O	O
a	O	O
true	O	O
subset	O	O
of	O	O
URI	O	O
'	O	O
s	O	O
.	O	O
Since	O	O
I	O	O
'	O	O
m	O	O
just	O	O
linking	O	O
to	O	O
other	O	O
answers	O	O
I	O	O
marked	O	O
this	O	O
as	O	O
a	O	O
community	O	O
wiki	O	O
.	O	O
Feel	O	O
free	O	O
to	O	O
edit	O	O
.	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846960	O	O
From	O	O
Effective	O	O
Java	O	O
,	O	O
Item	O	O
#	O	O
43	O	O
-	O	O
StringLiteral	O	O
demonstrates	O	O
returning	O	O
an	O	O
empty	O	O
collection	O	O
and	O	O
perhaps	O	O
even	O	O
demonstrates	O	O
using	O	O
these	O	O
emptyList	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
emptySet	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
and	O	O
emptyMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
on	O	O
the	O	O
Collections	B-api_mention	B-api_mention
class	O	O
to	O	O
get	O	O
an	O	O
empty	O	O
collection	O	O
that	O	O
also	O	O
has	O	O
the	O	O
additional	O	O
benefit	O	O
of	O	O
being	O	O
immutable	O	O
.	O	O
From	O	O
Item	O	O
#	O	O
15	O	O
StringLiteral	O	O
.	O	O
From	O	O
Collections	B-api_mention	O
-	O	O
emptySet	B-api_mention	O
-	O	O
Collections	B-api_mention	O
-	O	O
emptyList	B-api_mention	O
-	O	O
Collections	B-api_mention	O
#	O	O
blockquote	O	O
Note	O	O
:	O	O
Below	O	O
code	O	O
is	O	O
just	O	O
an	O	O
example	O	O
(	O	O
change	O	O
it	O	O
according	O	O
to	O	O
your	O	O
use	O	O
case	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
These	O	O
methods	O	O
offer	O	O
a	O	O
couple	O	O
of	O	O
advantages	O	O
:	O	O
#	O	O
li	O	O
They	O	O
'	O	O
re	O	O
more	O	O
concise	O	O
because	O	O
you	O	O
don	O	O
'	O	O
t	O	O
need	O	O
to	O	O
explicitly	O	O
type	O	O
out	O	O
the	O	O
generic	O	O
type	O	O
of	O	O
the	O	O
collection	O	O
-	O	O
it	O	O
'	O	O
s	O	O
generally	O	O
just	O	O
inferred	O	O
from	O	O
the	O	O
context	O	O
of	O	O
the	O	O
method	O	O
call	O	O
.	O	O
#	O	O
li	O	O
They	O	O
'	O	O
re	O	O
more	O	O
efficient	O	O
because	O	O
they	O	O
don	O	O
'	O	O
t	O	O
bother	O	O
creating	O	O
new	O	O
objects	O	O
;	O	O
they	O	O
just	O	O
re	O	O
-	O	O
use	O	O
an	O	O
existing	O	O
empty	O	O
and	O	O
immutable	O	O
object	O	O
.	O	O
This	O	O
effect	O	O
is	O	O
generally	O	O
very	O	O
minor	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
occasionally	O	O
(	O	O
well	O	O
,	O	O
rarely	O	O
)	O	O
important	O	O
.	O	O
Question	O	O
-	O	O
34250207	O	O
As	O	O
I	O	O
recall	O	O
,	O	O
before	O	O
Java	O	O
8	O	O
,	O	O
the	O	O
default	O	O
capacity	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
was	O	O
10	O	O
.	O	O
Surprisingly	O	O
,	O	O
the	O	O
comment	O	O
on	O	O
the	O	O
default	O	O
(	O	O
void	O	O
)	O	O
constructor	O	O
still	O	O
says	O	O
:	O	O
Constructs	O	O
an	O	O
empty	O	O
list	O	O
with	O	O
an	O	O
initial	O	O
capacity	O	O
of	O	O
ten	O	O
.	O	O
From	O	O
ArrayList	O	B-api_mention
.	O	O
java	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28319064	O	O
,	O	O
answer	O	O
-	O	O
28319221	O	O
Don	O	O
'	O	O
t	O	O
worry	O	O
about	O	O
any	O	O
performance	O	O
differences	O	O
,	O	O
they	O	O
'	O	O
re	O	O
going	O	O
to	O	O
be	O	O
minimal	O	O
in	O	O
this	O	O
case	O	O
normally	O	O
.	O	O
Method	O	O
2	O	O
is	O	O
preferable	O	O
because	O	O
#	O	O
li	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
require	O	O
mutating	O	O
a	O	O
collection	O	O
that	O	O
exists	O	O
outside	O	O
the	O	O
lambda	O	O
expression	O	O
,	O	O
#	O	O
li	O	O
it	O	O
'	O	O
s	O	O
more	O	O
readable	O	O
because	O	O
the	O	O
different	O	O
steps	O	O
that	O	O
are	O	O
performed	O	O
in	O	O
the	O	O
collection	O	O
pipeline	O	O
are	O	O
written	O	O
sequentially	O	O
(	O	O
first	O	O
a	O	O
filter	O	O
operation	O	O
,	O	O
then	O	O
a	O	O
map	O	O
operation	O	O
,	O	O
then	O	O
collecting	O	O
the	O	O
result	O	O
)	O	O
,	O	O
(	O	O
for	O	O
more	O	O
info	O	O
on	O	O
the	O	O
benefits	O	O
of	O	O
collection	O	O
pipelines	O	O
,	O	O
see	O	O
Martin	O	O
Fowler	O	O
'	O	O
s	O	O
excellent	O	O
article	O	O
)	O	O
#	O	O
li	O	O
you	O	O
can	O	O
easily	O	O
change	O	O
the	O	O
way	O	O
values	O	O
are	O	O
collected	O	O
by	O	O
replacing	O	O
the	O	O
Collector	B-api_mention	B-api_mention
that	O	O
is	O	O
used	O	O
.	O	O
In	O	O
some	O	O
cases	O	O
you	O	O
may	O	O
need	O	O
to	O	O
write	O	O
your	O	O
own	O	O
Collector	B-api_mention	B-api_mention
,	O	O
but	O	O
then	O	O
the	O	O
benefit	O	O
is	O	O
that	O	O
you	O	O
can	O	O
easily	O	O
reuse	O	O
that	O	O
.	O	O
Question	O	O
-	O	O
7935858	O	O
,	O	O
answer	O	O
-	O	O
7935873	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
split	I-api_mention	I-api_mention
splits	O	O
on	O	O
regular	O	O
expressions	O	O
,	O	O
and	O	O
.	O	O
in	O	O
a	O	O
regular	O	O
expression	O	O
means	O	O
"	O	O
any	O	O
character	O	O
"	O	O
.	O	O
Try	O	O
temp	O	O
.	B-api_mention	B-api_mention
split	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
29140402	O	O
,	O	O
answer	O	O
-	O	O
38628203	O	O
In	O	O
intellij	O	O
you	O	O
can	O	O
auto	O	O
generate	O	O
toString	B-api_mention	B-api_mention
method	O	O
by	O	O
pressing	O	O
alt	O	O
+	O	O
inset	O	O
and	O	O
then	O	O
selecting	O	O
toString	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
here	O	O
is	O	O
an	O	O
out	O	O
put	O	O
for	O	O
a	O	O
test	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
it	O	O
generates	O	O
a	O	O
String	B-api_mention	B-api_mention
by	O	O
concatenating	O	O
,	O	O
several	O	O
attributes	O	O
of	O	O
the	O	O
class	O	O
,	O	O
for	O	O
primitives	O	O
it	O	O
will	O	O
print	O	O
their	O	O
values	O	O
and	O	O
for	O	O
reference	O	O
types	O	O
it	O	O
will	O	O
use	O	O
their	O	O
class	O	O
type	O	O
(	O	O
in	O	O
this	O	O
case	O	O
to	O	O
string	O	O
method	O	O
of	O	O
Test2	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
6271668	O	O
I	O	O
'	O	O
m	O	O
assuming	O	O
this	O	O
is	O	O
happening	O	O
for	O	O
an	O	O
anonymous	O	O
class	O	O
.	O	O
When	O	O
you	O	O
create	O	O
an	O	O
anonymous	O	O
class	O	O
you	O	O
actually	O	O
create	O	O
a	O	O
class	O	O
that	O	O
extends	O	O
the	O	O
class	O	O
whose	O	O
name	O	O
you	O	O
got	O	O
.	O	O
The	O	O
"	O	O
cleaner	O	O
"	O	O
way	O	O
to	O	O
get	O	O
the	O	O
name	O	O
you	O	O
want	O	O
is	O	O
:	O	O
If	O	O
your	O	O
class	O	O
is	O	O
an	O	O
anonymous	O	O
inner	O	O
class	O	O
,	O	O
getSuperClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
give	O	O
you	O	O
the	O	O
class	O	O
that	O	O
it	O	O
was	O	O
created	O	O
from	O	O
.	O	O
If	O	O
you	O	O
created	O	O
it	O	O
from	O	O
an	O	O
interface	O	O
than	O	O
you	O	O
'	O	O
re	O	O
sort	O	O
of	O	O
SOL	O	O
because	O	O
the	O	O
best	O	O
you	O	O
can	O	O
do	O	O
is	O	O
getInterfaces	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
which	O	O
might	O	O
give	O	O
you	O	O
more	O	O
than	O	O
one	O	O
interface	O	O
.	O	O
The	O	O
"	O	O
hacky	O	O
"	O	O
way	O	O
is	O	O
to	O	O
just	O	O
get	O	O
the	O	O
name	O	O
with	O	O
getClassName	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
use	O	O
a	O	O
regex	O	O
to	O	O
drop	O	O
the	O	O
$	O	O
1	O	O
.	O	O
Question	O	O
-	O	O
24676877	O	O
,	O	O
answer	O	O
-	O	O
24681959	O	O
I	O	O
have	O	O
a	O	O
few	O	O
points	O	O
to	O	O
add	O	O
to	O	O
Brian	O	O
Goetz	O	O
'	O	O
excellent	O	O
answer	O	O
.	O	O
It	O	O
'	O	O
s	O	O
quite	O	O
common	O	O
to	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
from	O	O
a	O	O
"	O	O
getter	O	O
"	O	O
style	O	O
method	O	O
call	O	O
.	O	O
See	O	O
the	O	O
Stream	B-api_mention	B-api_mention
usage	O	O
page	O	O
in	O	O
the	O	O
Java	O	O
8	O	O
javadoc	O	O
and	O	O
look	O	O
for	O	O
"	O	O
methods	O	O
.	O	O
.	O	O
.	O	O
that	O	O
return	O	O
Stream	B-api_mention	B-api_mention
"	O	O
for	O	O
the	O	O
packages	O	O
other	O	O
than	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Stream	I-api_mention	I-api_mention
.	O	O
These	O	O
methods	O	O
are	O	O
usually	O	O
on	O	O
classes	O	O
that	O	O
represent	O	O
or	O	O
can	O	O
contain	O	O
multiple	O	O
values	O	O
or	O	O
aggregations	O	O
of	O	O
something	O	O
.	O	O
In	O	O
such	O	O
cases	O	O
,	O	O
APIs	O	O
typically	O	O
have	O	O
returned	O	O
collections	O	O
or	O	O
arrays	O	O
of	O	O
them	O	O
.	O	O
For	O	O
all	O	O
the	O	O
reasons	O	O
that	O	O
Brian	O	O
noted	O	O
in	O	O
his	O	O
answer	O	O
,	O	O
it	O	O
'	O	O
s	O	O
very	O	O
flexible	O	O
to	O	O
add	O	O
Stream	O	B-api_mention
-	O	O
returning	O	O
methods	O	O
here	O	O
.	O	O
Many	O	O
of	O	O
these	O	O
classes	O	O
have	O	O
collections	O	O
-	O	O
or	O	O
array	O	O
-	O	O
returning	O	O
methods	O	O
already	O	O
,	O	O
because	O	O
the	O	O
classes	O	O
predate	O	O
the	O	O
Streams	B-api_mention	O
API	O	O
.	O	O
If	O	O
you	O	O
'	O	O
re	O	O
designing	O	O
a	O	O
new	O	O
API	O	O
,	O	O
and	O	O
it	O	O
makes	O	O
sense	O	O
to	O	O
provide	O	O
Stream	O	B-api_mention
-	O	O
returning	O	O
methods	O	O
,	O	O
it	O	O
might	O	O
not	O	O
be	O	O
necessary	O	O
to	O	O
add	O	O
collection	O	O
-	O	O
returning	O	O
methods	O	O
as	O	O
well	O	O
.	O	O
Brian	O	O
mentioned	O	O
the	O	O
cost	O	O
of	O	O
"	O	O
materializing	O	O
"	O	O
the	O	O
values	O	O
into	O	O
a	O	O
collection	O	O
.	O	O
To	O	O
amplify	O	O
this	O	O
point	O	O
,	O	O
there	O	O
are	O	O
actually	O	O
two	O	O
costs	O	O
here	O	O
:	O	O
the	O	O
cost	O	O
of	O	O
storing	O	O
values	O	O
in	O	O
the	O	O
collection	O	O
(	O	O
memory	O	O
allocation	O	O
and	O	O
copying	O	O
)	O	O
and	O	O
also	O	O
the	O	O
cost	O	O
of	O	O
creating	O	O
the	O	O
values	O	O
in	O	O
the	O	O
first	O	O
place	O	O
.	O	O
The	O	O
latter	O	O
cost	O	O
can	O	O
often	O	O
be	O	O
reduced	O	O
or	O	O
avoided	O	O
by	O	O
taking	O	O
advantage	O	O
of	O	O
a	O	O
Stream	O	B-api_mention
'	O	O
s	O	O
laziness	O	O
-	O	O
seeking	O	O
behavior	O	O
.	O	O
A	O	O
good	O	O
example	O	O
of	O	O
this	O	O
are	O	O
the	O	O
APIs	O	O
in	O	O
java	B-api_mention	O
.	I-api_mention	O
nio	I-api_mention	O
.	I-api_mention	O
file	I-api_mention	O
.	I-api_mention	O
Files	I-api_mention	O
:	O	O
#	O	O
pre	O	O
Not	O	O
only	O	O
does	O	O
readAllLines	B-api_mention	O
have	O	O
to	O	O
hold	O	O
the	O	O
entire	O	O
file	O	O
contents	O	O
in	O	O
memory	O	O
in	O	O
order	O	O
to	O	O
store	O	O
it	O	O
into	O	O
the	O	O
result	O	O
list	O	O
,	O	O
it	O	O
also	O	O
has	O	O
to	O	O
read	O	O
the	O	O
file	O	O
to	O	O
the	O	O
very	O	O
end	O	O
before	O	O
it	O	O
returns	O	O
the	O	O
list	O	O
.	O	O
The	O	O
lines	B-api_mention	O
method	O	O
can	O	O
return	O	O
almost	O	O
immediately	O	O
after	O	O
it	O	O
has	O	O
performed	O	O
some	O	O
setup	O	O
,	O	O
leaving	O	O
file	O	O
reading	O	O
and	O	O
line	O	O
breaking	O	O
until	O	O
later	O	O
when	O	O
it	O	O
'	O	O
s	O	O
necessary	O	O
-	O	O
-	O	O
or	O	O
not	O	O
at	O	O
all	O	O
.	O	O
This	O	O
is	O	O
a	O	O
huge	O	O
benefit	O	O
,	O	O
if	O	O
for	O	O
example	O	O
,	O	O
the	O	O
caller	O	O
is	O	O
interested	O	O
only	O	O
in	O	O
the	O	O
first	O	O
ten	O	O
lines	O	O
:	O	O
List	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
firstTen	O	O
=	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
limit	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Of	O	O
course	O	O
considerable	O	O
memory	O	O
space	O	O
can	O	O
be	O	O
saved	O	O
if	O	O
the	O	O
caller	O	O
filters	O	O
the	O	O
stream	O	O
to	O	O
return	O	O
only	O	O
lines	O	O
matching	O	O
a	O	O
pattern	O	O
,	O	O
etc	O	O
.	O	O
An	O	O
idiom	O	O
that	O	O
seems	O	O
to	O	O
be	O	O
emerging	O	O
is	O	O
to	O	O
name	O	O
stream	O	O
-	O	O
returning	O	O
methods	O	O
after	O	O
the	O	O
plural	O	O
of	O	O
the	O	O
name	O	O
of	O	O
the	O	O
things	O	O
that	O	O
it	O	O
represents	O	O
or	O	O
contains	O	O
,	O	O
without	O	O
a	O	O
get	O	O
prefix	O	O
.	O	O
Also	O	O
,	O	O
while	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
a	O	O
reasonable	O	O
name	O	O
for	O	O
a	O	O
stream	O	O
-	O	O
returning	O	O
method	O	O
when	O	O
there	O	O
is	O	O
only	O	O
one	O	O
possible	O	O
set	O	O
of	O	O
values	O	O
to	O	O
be	O	O
returned	O	O
,	O	O
sometimes	O	O
there	O	O
are	O	O
classes	O	O
that	O	O
have	O	O
aggregations	O	O
of	O	O
multiple	O	O
types	O	O
of	O	O
values	O	O
.	O	O
For	O	O
example	O	O
,	O	O
suppose	O	O
you	O	O
have	O	O
some	O	O
object	O	O
that	O	O
contains	O	O
both	O	O
attributes	O	O
and	O	O
elements	O	O
.	O	O
You	O	O
might	O	O
provide	O	O
two	O	O
stream	O	O
-	O	O
returning	O	O
APIs	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
19235606	O	O
,	O	O
answer	O	O
-	O	O
19235863	O	O
You	O	O
should	O	O
almost	O	O
certainly	O	O
never	O	O
have	O	O
to	O	O
deal	O	O
with	O	O
Spliterator	B-api_mention	B-api_mention
as	O	O
a	O	O
user	O	O
;	O	O
it	O	O
should	O	O
only	O	O
be	O	O
necessary	O	O
if	O	O
you	O	O
'	O	O
re	O	O
writing	O	O
Collection	B-api_mention	B-api_mention
types	O	O
yourself	O	O
and	O	O
also	O	O
intending	O	O
to	O	O
optimize	O	O
parallelized	O	O
operations	O	O
on	O	O
them	O	O
.	O	O
For	O	O
what	O	O
it	O	O
'	O	O
s	O	O
worth	O	O
,	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
is	O	O
a	O	O
way	O	O
of	O	O
operating	O	O
over	O	O
the	O	O
elements	O	O
of	O	O
a	O	O
collection	O	O
in	O	O
a	O	O
way	O	O
that	O	O
it	O	O
'	O	O
s	O	O
easy	O	O
to	O	O
split	O	O
off	O	O
part	O	O
of	O	O
the	O	O
collection	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
because	O	O
you	O	O
'	O	O
re	O	O
parallelizing	O	O
and	O	O
want	O	O
one	O	O
thread	O	O
to	O	O
work	O	O
on	O	O
one	O	O
part	O	O
of	O	O
the	O	O
collection	O	O
,	O	O
one	O	O
thread	O	O
to	O	O
work	O	O
on	O	O
another	O	O
part	O	O
,	O	O
etc	O	O
.	O	O
You	O	O
should	O	O
essentially	O	O
never	O	O
be	O	O
saving	O	O
values	O	O
of	O	O
type	O	O
Stream	B-api_mention	B-api_mention
to	O	O
a	O	O
variable	O	O
,	O	O
either	O	O
.	O	O
Stream	B-api_mention	B-api_mention
is	O	O
sort	O	O
of	O	O
like	O	O
an	O	O
Iterator	B-api_mention	O
,	O	O
in	O	O
that	O	O
it	O	O
'	O	O
s	O	O
a	O	O
one	O	O
-	O	O
time	O	O
-	O	O
use	O	O
object	O	O
that	O	O
you	O	O
'	O	O
ll	O	O
almost	O	O
always	O	O
use	O	O
in	O	O
a	O	O
fluent	O	O
chain	O	O
,	O	O
as	O	O
in	O	O
the	O	O
Javadoc	O	O
example	O	O
:	O	O
int	O	O
sum	O	O
=	O	O
widgets	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
filter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
mapToInt	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
sum	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Collector	B-api_mention	B-api_mention
is	O	O
the	O	O
most	O	O
generalized	O	O
,	O	O
abstract	O	O
possible	O	O
version	O	O
of	O	O
a	O	O
"	O	O
reduce	O	O
"	O	O
operation	O	O
a	O	O
la	O	O
map	O	O
/	O	O
reduce	O	O
;	O	O
in	O	O
particular	O	O
,	O	O
it	O	O
needs	O	O
to	O	O
support	O	O
parallelization	O	O
and	O	O
finalization	O	O
steps	O	O
.	O	O
Examples	O	O
of	O	O
Collector	B-api_mention	B-api_mention
s	O	O
include	O	O
:	O	O
#	O	O
li	O	O
summing	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
reducing	I-api_mention	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
#	O	O
li	O	O
StringBuilder	B-api_mention	B-api_mention
appending	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Collectors	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
18448671	O	O
,	O	O
answer	O	O
-	O	O
18448699	O	O
Use	O	O
an	O	O
Iterator	B-api_mention	B-api_mention
and	O	O
call	O	O
remove	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
21375659	O	O
,	O	O
answer	O	O
-	O	O
21375716	O	O
String	B-api_mention	B-api_mention
is	O	O
immutable	O	O
irrespective	O	O
of	O	O
how	O	O
it	O	O
is	O	O
instantiated	O	O
1	O	O
)	O	O
Short	O	O
answer	O	O
is	O	O
yes	O	O
,	O	O
new	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
immutable	O	O
too	O	O
.	O	O
Because	O	O
every	O	O
possible	O	O
mutable	O	O
operation	O	O
(	O	O
like	O	O
replace	O	O
,	O	O
toLowerCase	B-api_mention	O
etcetra	O	O
)	O	O
that	O	O
you	O	O
perform	O	O
on	O	O
String	B-api_mention	B-api_mention
does	O	O
not	O	O
affect	O	O
the	O	O
original	O	O
String	B-api_mention	B-api_mention
instance	O	O
and	O	O
returns	O	O
you	O	O
a	O	O
new	O	O
instance	O	O
.	O	O
You	O	O
may	O	O
check	O	O
this	O	O
in	O	O
Javadoc	O	O
for	O	O
String	B-api_mention	B-api_mention
.	O	O
Each	O	O
public	O	O
method	O	O
of	O	O
String	B-api_mention	B-api_mention
that	O	O
is	O	O
exposed	O	O
returns	O	O
a	O	O
new	O	O
String	B-api_mention	B-api_mention
instance	O	O
and	O	O
does	O	O
not	O	O
alter	O	O
the	O	O
present	O	O
instance	O	O
on	O	O
which	O	O
you	O	O
called	O	O
the	O	O
method	O	O
.	O	O
This	O	O
is	O	O
very	O	O
helpful	O	O
in	O	O
Multi	O	O
-	O	O
threaded	O	O
environment	O	O
as	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
to	O	O
think	O	O
about	O	O
mutability	O	O
(	O	O
someone	O	O
will	O	O
change	O	O
the	O	O
value	O	O
)	O	O
every	O	O
time	O	O
you	O	O
pass	O	O
or	O	O
share	O	O
the	O	O
String	B-api_mention	B-api_mention
around	O	O
.	O	O
String	B-api_mention	B-api_mention
can	O	O
easily	O	O
be	O	O
the	O	O
most	O	O
used	O	O
data	O	O
type	O	O
,	O	O
so	O	O
the	O	O
designers	O	O
have	O	O
blessed	O	O
us	O	O
all	O	O
to	O	O
not	O	O
think	O	O
about	O	O
mutability	O	O
everytime	O	O
and	O	O
saved	O	O
us	O	O
a	O	O
lot	O	O
of	O	O
pain	O	O
.	O	O
Immutability	O	O
allowed	O	O
String	B-api_mention	B-api_mention
pool	O	O
or	O	O
caching	O	O
It	O	O
is	O	O
because	O	O
of	O	O
immutability	O	O
property	O	O
that	O	O
the	O	O
internal	O	O
pool	O	O
of	O	O
string	O	O
was	O	O
possible	O	O
,	O	O
as	O	O
when	O	O
same	O	O
String	B-api_mention	B-api_mention
value	O	O
is	O	O
required	O	O
at	O	O
some	O	O
other	O	O
place	O	O
then	O	O
that	O	O
immutable	O	O
reference	O	O
is	O	O
returned	O	O
.	O	O
If	O	O
String	B-api_mention	O
would	O	O
have	O	O
been	O	O
mutable	O	O
then	O	O
it	O	O
would	O	O
not	O	O
have	O	O
been	O	O
possible	O	O
to	O	O
share	O	O
String	B-api_mention	B-api_mention
s	O	O
like	O	O
this	O	O
to	O	O
save	O	O
memory	O	O
.	O	O
String	B-api_mention	B-api_mention
immutablity	O	O
was	O	O
not	O	O
because	O	O
of	O	O
pooling	O	O
,	O	O
but	O	O
immutability	O	O
has	O	O
more	O	O
benefits	O	O
attached	O	O
to	O	O
it	O	O
.	O	O
String	B-api_mention	B-api_mention
interning	O	O
or	O	O
pooling	O	O
is	O	O
an	O	O
example	O	O
of	O	O
Flyweight	O	O
Design	O	O
pattern	O	O
2	O	O
)	O	O
Yes	O	O
it	O	O
will	O	O
be	O	O
interned	O	O
like	O	O
any	O	O
other	O	O
String	B-api_mention	B-api_mention
as	O	O
a	O	O
blank	O	O
String	B-api_mention	B-api_mention
is	O	O
also	O	O
as	O	O
much	O	O
a	O	O
String	B-api_mention	B-api_mention
as	O	O
other	O	O
String	B-api_mention	B-api_mention
instances	O	O
.	O	O
References	O	O
:	O	O
#	O	O
li	O	O
Immutability	O	O
benefits	O	O
of	O	O
String	B-api_mention	B-api_mention
Question	O	O
-	O	O
17489250	O	O
,	O	O
answer	O	O
-	O	O
17489410	O	O
Java	O	O
String	B-api_mention	B-api_mention
is	O	O
Special	O	O
#	O	O
blockquote	O	O
For	O	O
example	O	O
#	O	O
pre	O	O
#	O	O
img	O	O
Note	O	O
:	O	O
String	B-api_mention	B-api_mention
literals	O	O
are	O	O
stored	O	O
in	O	O
a	O	O
common	O	O
pool	O	O
.	O	O
This	O	O
facilitates	O	O
sharing	O	O
of	O	O
storage	O	O
for	O	O
strings	O	O
with	O	O
the	O	O
same	O	O
contents	O	O
to	O	O
conserve	O	O
storage	O	O
.	O	O
String	B-api_mention	B-api_mention
objects	O	O
allocated	O	O
via	O	O
new	O	O
operator	O	O
are	O	O
stored	O	O
in	O	O
the	O	O
heap	O	O
,	O	O
and	O	O
there	O	O
is	O	O
no	O	O
sharing	O	O
of	O	O
storage	O	O
for	O	O
the	O	O
same	O	O
contents	O	O
.	O	O
Question	O	O
-	O	O
5031614	O	O
,	O	O
answer	O	O
-	O	O
5103360	O	O
We	O	O
usually	O	O
have	O	O
two	O	O
IDs	O	O
in	O	O
our	O	O
entities	O	O
:	O	O
#	O	O
li	O	O
Is	O	O
for	O	O
persistence	O	O
layer	O	O
only	O	O
(	O	O
so	O	O
that	O	O
persistence	O	O
provider	O	O
and	O	O
database	O	O
can	O	O
figure	O	O
out	O	O
relationships	O	O
between	O	O
objects	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Is	O	O
for	O	O
our	O	O
application	O	O
needs	O	O
(	O	O
equals	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
and	O	O
hashCode	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
in	O	O
particular	O	O
)	O	O
Take	O	O
a	O	O
look	O	O
:	O	O
#	O	O
pre	O	O
EDIT	O	O
:	O	O
to	O	O
clarify	O	O
my	O	O
point	O	O
regarding	O	O
calls	O	O
to	O	O
setUuid	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
method	O	O
.	O	O
Here	O	O
'	O	O
s	O	O
a	O	O
typical	O	O
scenario	O	O
:	O	O
#	O	O
pre	O	O
When	O	O
I	O	O
run	O	O
my	O	O
tests	O	O
and	O	O
see	O	O
the	O	O
log	O	O
output	O	O
I	O	O
fix	O	O
the	O	O
problem	O	O
:	O	O
#	O	O
pre	O	O
Alternatively	O	O
,	O	O
one	O	O
can	O	O
provide	O	O
a	O	O
separate	O	O
constructor	O	O
:	O	O
#	O	O
pre	O	O
So	O	O
my	O	O
example	O	O
would	O	O
look	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
use	O	O
a	O	O
default	O	O
constructor	O	O
and	O	O
a	O	O
setter	O	O
,	O	O
but	O	O
you	O	O
may	O	O
find	O	O
two	O	O
-	O	O
constructors	O	O
approach	O	O
more	O	O
suitable	O	O
for	O	O
you	O	O
.	O	O
Question	O	O
-	O	O
25903137	O	O
,	O	O
answer	O	O
-	O	O
25905196	O	O
Here	O	O
are	O	O
some	O	O
variations	O	O
on	O	O
Sotirios	O	O
Delimanolis	O	O
'	O	O
answer	O	O
,	O	O
which	O	O
was	O	O
pretty	O	O
good	O	O
to	O	O
begin	O	O
with	O	O
(	O	O
+	O	O
1	O	O
)	O	O
.	O	O
Consider	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
A	O	O
couple	O	O
points	O	O
here	O	O
.	O	O
First	O	O
is	O	O
the	O	O
use	O	O
of	O	O
wildcards	O	O
in	O	O
the	O	O
generics	O	O
;	O	O
this	O	O
makes	O	O
the	O	O
function	O	O
somewhat	O	O
more	O	O
flexible	O	O
.	O	O
A	O	O
wildcard	O	O
would	O	O
be	O	O
necessary	O	O
if	O	O
,	O	O
for	O	O
example	O	O
,	O	O
you	O	O
wanted	O	O
the	O	O
output	O	O
map	O	O
to	O	O
have	O	O
a	O	O
key	O	O
that	O	O
'	O	O
s	O	O
a	O	O
superclass	O	O
of	O	O
the	O	O
input	O	O
map	O	O
'	O	O
s	O	O
key	O	O
:	O	O
#	O	O
pre	O	O
(	O	O
There	O	O
is	O	O
also	O	O
an	O	O
example	O	O
for	O	O
the	O	O
map	O	O
'	O	O
s	O	O
values	O	O
,	O	O
but	O	O
it	O	O
'	O	O
s	O	O
really	O	O
contrived	O	O
,	O	O
and	O	O
I	O	O
admit	O	O
that	O	O
having	O	O
the	O	O
bounded	O	O
wildcard	O	O
for	O	O
Y	O	O
only	O	O
helps	O	O
in	O	O
edge	O	O
cases	O	O
.	O	O
)	O	O
A	O	O
second	O	O
point	O	O
is	O	O
that	O	O
instead	O	O
of	O	O
running	O	O
the	O	O
stream	O	O
over	O	O
the	O	O
input	O	O
map	O	O
'	O	O
s	O	O
entrySet	B-api_mention	B-api_mention
,	O	O
I	O	O
ran	O	O
it	O	O
over	O	O
the	O	O
keySet	B-api_mention	O
.	O	O
This	O	O
makes	O	O
the	O	O
code	O	O
a	O	O
little	O	O
cleaner	O	O
,	O	O
I	O	O
think	O	O
,	O	O
at	O	O
the	O	O
cost	O	O
of	O	O
having	O	O
to	O	O
fetch	O	O
values	O	O
out	O	O
of	O	O
the	O	O
map	O	O
instead	O	O
of	O	O
from	O	O
the	O	O
map	O	O
entry	O	O
.	O	O
Incidentally	O	O
,	O	O
I	O	O
initially	O	O
had	O	O
key	O	O
-	O	O
>	O	O
key	O	O
as	O	O
the	O	O
first	O	O
argument	O	O
to	O	O
toMap	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
this	O	O
failed	O	O
with	O	O
a	O	O
type	O	O
inference	O	O
error	O	O
for	O	O
some	O	O
reason	O	O
.	O	O
Changing	O	O
it	O	O
to	O	O
(	O	O
X	O	O
key	O	O
)	O	O
-	O	O
>	O	O
key	O	O
worked	O	O
,	O	O
as	O	O
did	O	O
Function	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Still	O	O
another	O	O
variation	O	O
is	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
This	O	O
uses	O	O
Map	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
of	O	O
streams	O	O
.	O	O
This	O	O
is	O	O
even	O	O
simpler	O	O
,	O	O
I	O	O
think	O	O
,	O	O
because	O	O
it	O	O
dispenses	O	O
with	O	O
the	O	O
collectors	O	O
,	O	O
which	O	O
are	O	O
somewhat	O	O
clumsy	O	O
to	O	O
use	O	O
with	O	O
maps	O	O
.	O	O
The	O	O
reason	O	O
is	O	O
that	O	O
Map	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
the	O	O
key	O	O
and	O	O
value	O	O
as	O	O
separate	O	O
parameters	O	O
,	O	O
whereas	O	O
the	O	O
stream	O	O
has	O	O
only	O	O
one	O	O
value	O	O
-	O	O
-	O	O
and	O	O
you	O	O
have	O	O
to	O	O
choose	O	O
whether	O	O
to	O	O
use	O	O
the	O	O
key	O	O
or	O	O
the	O	O
map	O	O
entry	O	O
as	O	O
that	O	O
value	O	O
.	O	O
On	O	O
the	O	O
minus	O	O
side	O	O
,	O	O
this	O	O
lacks	O	O
the	O	O
rich	O	O
,	O	O
streamy	O	O
goodness	O	O
of	O	O
the	O	O
other	O	O
approaches	O	O
.	O	O
:	O	O
-	O	O
)	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28588854	O	O
The	O	O
correct	O	O
answer	O	O
is	O	O
a	O	O
simple	O	O
"	O	O
because	O	O
the	O	O
standard	O	O
(	O	O
and	O	O
the	O	O
docs	O	O
)	O	O
say	O	O
so	O	O
"	O	O
.	O	O
But	O	O
I	O	O
'	O	O
m	O	O
not	O	O
gonna	O	O
be	O	O
cynical	O	O
because	O	O
it	O	O
'	O	O
s	O	O
obvious	O	O
that	O	O
'	O	O
s	O	O
not	O	O
what	O	O
you	O	O
are	O	O
after	O	O
.	O	O
In	O	O
addition	O	O
to	O	O
the	O	O
other	O	O
answers	O	O
here	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
try	O	O
to	O	O
relate	O	O
the	O	O
infinities	O	O
to	O	O
saturating	O	O
arithmetic	O	O
.	O	O
Other	O	O
answers	O	O
have	O	O
already	O	O
stated	O	O
that	O	O
the	O	O
reason	O	O
the	O	O
comparisons	O	O
on	O	O
NaNs	O	O
result	O	O
in	O	O
true	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
not	O	O
gonna	O	O
beat	O	O
a	O	O
dead	O	O
horse	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
say	O	O
I	O	O
have	O	O
a	O	O
saturating	O	O
integer	O	O
that	O	O
represents	O	O
grayscale	O	O
colors	O	O
.	O	O
Why	O	O
am	O	O
I	O	O
using	O	O
saturating	O	O
arithmetic	O	O
?	O	O
Because	O	O
anything	O	O
brighter	O	O
than	O	O
white	O	O
is	O	O
still	O	O
white	O	O
,	O	O
and	O	O
anything	O	O
darker	O	O
than	O	O
black	O	O
is	O	O
still	O	O
black	O	O
(	O	O
except	O	O
orange	O	O
)	O	O
.	O	O
That	O	O
means	O	O
BLACK	O	O
-	O	O
x	O	O
=	O	O
=	O	O
BLACK	O	O
and	O	O
WHITE	O	O
+	O	O
x	O	O
=	O	O
=	O	O
WHITE	O	O
.	O	O
Makes	O	O
sense	O	O
?	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
say	O	O
we	O	O
want	O	O
to	O	O
represent	O	O
those	O	O
grayscale	O	O
colors	O	O
with	O	O
a	O	O
(	O	O
signed	O	O
)	O	O
1s	O	O
complement	O	O
8	O	O
-	O	O
bit	O	O
integer	O	O
where	O	O
BLACK	O	O
=	O	O
=	O	O
-	O	O
127	O	O
and	O	O
WHITE	O	O
=	O	O
=	O	O
127	O	O
.	O	O
Why	O	O
1s	O	O
complement	O	O
?	O	O
Because	O	O
it	O	O
gives	O	O
us	O	O
a	O	O
signed	O	O
zero	O	O
like	O	O
IEEE	O	O
754	O	O
floating	O	O
point	O	O
.	O	O
And	O	O
,	O	O
because	O	O
we	O	O
are	O	O
using	O	O
saturating	O	O
arithmetic	O	O
,	O	O
-	O	O
127	O	O
-	O	O
x	O	O
=	O	O
=	O	O
-	O	O
127	O	O
and	O	O
127	O	O
+	O	O
x	O	O
=	O	O
=	O	O
127	O	O
.	O	O
How	O	O
does	O	O
this	O	O
relate	O	O
to	O	O
floating	O	O
point	O	O
infinities	O	O
?	O	O
Replace	O	O
the	O	O
integer	O	O
with	O	O
floating	O	O
point	O	O
,	O	O
BLACK	O	O
with	O	O
NEGATIVE	O	O
_	O	O
INFINITY	O	O
,	O	O
and	O	O
WHITE	O	O
with	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
and	O	O
what	O	O
do	O	O
you	O	O
get	O	O
?	O	O
NEGATIVE	O	O
_	O	O
INFINITY	O	O
-	O	O
x	O	O
=	O	O
=	O	O
NEGATIVE	O	O
_	O	O
INFINITY	O	O
and	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
+	O	O
x	O	O
=	O	O
=	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
.	O	O
Since	O	O
you	O	O
used	O	O
POSITIVE	O	O
_	O	O
INFINITY	O	O
,	O	O
I	O	O
'	O	O
ll	O	O
use	O	O
it	O	O
also	O	O
.	O	O
First	O	O
we	O	O
need	O	O
a	O	O
class	O	O
to	O	O
represent	O	O
our	O	O
saturating	O	O
integer	O	O
-	O	O
based	O	O
color	O	O
;	O	O
let	O	O
'	O	O
s	O	O
call	O	O
it	O	O
SaturatedColor	O	O
and	O	O
assume	O	O
it	O	O
works	O	O
like	O	O
any	O	O
other	O	O
integer	O	O
in	O	O
Java	O	O
.	O	O
Now	O	O
,	O	O
let	O	O
'	O	O
s	O	O
take	O	O
your	O	O
code	O	O
and	O	O
replace	O	O
double	O	O
with	O	O
our	O	O
own	O	O
SaturatedColor	O	B-api_mention
and	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
with	O	O
SaturatedColor	O	O
.	O	O
WHITE	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
we	O	O
established	O	O
above	O	O
,	O	O
SaturatedColor	O	O
.	O	O
WHITE	O	O
(	O	O
just	O	O
WHITE	O	O
above	O	O
)	O	O
is	O	O
127	O	O
,	O	O
so	O	O
let	O	O
'	O	O
s	O	O
do	O	O
that	O	O
here	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
we	O	O
take	O	O
the	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
statements	O	O
you	O	O
used	O	O
and	O	O
replace	O	O
a	O	O
and	O	O
b	O	O
with	O	O
their	O	O
value	O	O
(	O	O
values	O	O
?	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
It	O	O
should	O	O
be	O	O
obvious	O	O
what	O	O
this	O	O
will	O	O
print	O	O
.	O	O
Question	O	O
-	O	O
5243754	O	O
,	O	O
answer	O	O
-	O	O
34295445	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
We	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
extract	O	O
request	O	O
parameters	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
data	O	O
sent	O	O
by	O	O
posting	O	O
a	O	O
html	O	O
form	O	O
)	O	O
.	O	O
The	O	O
request	O	O
.	B-api_mention	B-api_mention
getParameter	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
always	O	O
returns	O	O
String	B-api_mention	B-api_mention
value	O	O
and	O	O
the	O	O
data	O	O
come	O	O
from	O	O
client	O	O
.	O	O
request	O	O
.	B-api_mention	B-api_mention
getAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
We	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
getAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
get	O	O
an	O	O
object	O	O
added	O	O
to	O	O
the	O	O
request	O	O
scope	O	O
on	O	O
the	O	O
server	O	O
side	O	O
i	O	O
.	O	O
e	O	O
.	O	O
using	O	O
request	O	O
.	B-api_mention	B-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
You	O	O
can	O	O
add	O	O
any	O	O
type	O	O
of	O	O
object	O	O
you	O	O
like	O	O
here	O	O
,	O	O
Strings	O	O
,	O	O
Custom	O	O
objects	O	O
,	O	O
in	O	O
fact	O	O
any	O	O
object	O	O
.	O	O
You	O	O
add	O	O
the	O	O
attribute	O	O
to	O	O
the	O	O
request	O	O
and	O	O
forward	O	O
the	O	O
request	O	O
to	O	O
another	O	O
resource	O	O
,	O	O
the	O	O
client	O	O
does	O	O
not	O	O
know	O	O
about	O	O
this	O	O
.	O	O
So	O	O
all	O	O
the	O	O
code	O	O
handling	O	O
this	O	O
would	O	O
typically	O	O
be	O	O
in	O	O
JSP	O	O
/	O	O
servlets	O	O
.	O	O
You	O	O
can	O	O
use	O	O
request	O	O
.	B-api_mention	B-api_mention
setAttribute	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
add	O	O
extra	O	O
-	O	O
information	O	O
and	O	O
forward	O	O
/	O	O
redirect	O	O
the	O	O
current	O	O
request	O	O
to	O	O
another	O	O
resource	O	O
.	O	O
For	O	O
example	O	O
,	O	O
consider	O	O
about	O	O
first	O	O
.	O	O
jsp	O	O
,	O	O
#	O	O
pre	O	O
and	O	O
second	O	O
.	O	O
jsp	O	O
:	O	O
#	O	O
pre	O	O
From	O	O
your	O	O
browser	O	O
,	O	O
run	O	O
first	O	O
.	O	O
jsp	O	O
?	O	O
CLIENT	O	O
=	O	O
you	O	O
and	O	O
the	O	O
output	O	O
on	O	O
your	O	O
browser	O	O
is	O	O
#	O	O
pre	O	O
The	O	O
basic	O	O
difference	O	O
between	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getParameter	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
that	O	O
the	O	O
first	O	O
method	O	O
extracts	O	O
a	O	O
(	O	O
serialized	O	O
)	O	O
Java	O	O
object	O	O
and	O	O
the	O	O
other	O	O
provides	O	O
a	O	O
String	B-api_mention	B-api_mention
value	O	O
.	O	O
For	O	O
both	O	O
cases	O	O
a	O	O
name	O	O
is	O	O
given	O	O
so	O	O
that	O	O
its	O	O
value	O	O
(	O	O
be	O	O
it	O	O
string	O	O
or	O	O
a	O	O
java	O	O
bean	O	O
)	O	O
can	O	O
be	O	O
looked	O	O
up	O	O
and	O	O
extracted	O	O
.	O	O
Question	O	O
-	O	O
31993377	O	O
Question	O	O
How	O	O
is	O	O
it	O	O
that	O	O
for	O	O
a	O	O
scanner	O	O
object	O	O
the	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
true	O	O
while	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
returns	O	O
false	O	O
?	O	O
Note	O	O
:	O	O
Based	O	O
on	O	O
the	O	O
input	O	O
file	O	O
,	O	O
the	O	O
hasNext	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
is	O	O
returning	O	O
the	O	O
result	O	O
as	O	O
expected	O	O
;	O	O
the	O	O
hasNextLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
does	O	O
not	O	O
seem	O	O
to	O	O
be	O	O
returning	O	O
the	O	O
correct	O	O
result	O	O
.	O	O
Code	O	O
Here	O	O
'	O	O
s	O	O
the	O	O
code	O	O
I	O	O
'	O	O
m	O	O
running	O	O
that	O	O
'	O	O
s	O	O
creating	O	O
the	O	O
results	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
Input	O	O
File	O	O
The	O	O
following	O	O
is	O	O
the	O	O
actual	O	O
content	O	O
of	O	O
the	O	O
file	O	O
that	O	O
I	O	O
'	O	O
m	O	O
passing	O	O
to	O	O
this	O	O
scanner	O	O
:	O	O
#	O	O
pre	O	O
Result	O	O
The	O	O
following	O	O
is	O	O
the	O	O
end	O	O
of	O	O
what	O	O
'	O	O
s	O	O
printed	O	O
in	O	O
the	O	O
console	O	O
when	O	O
I	O	O
run	O	O
my	O	O
code	O	O
,	O	O
and	O	O
includes	O	O
the	O	O
portion	O	O
I	O	O
can	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
of	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
20331163	O	O
,	O	O
answer	O	O
-	O	O
20331243	O	O
Create	O	O
a	O	O
DateTimeFormatter	B-api_mention	B-api_mention
using	O	O
DateTimeFormat	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forPattern	I-api_mention	I-api_mention
(	O	I-api_mention
String	B-api_mention	I-api_mention
)	O	I-api_mention
Using	O	O
Joda	O	O
time	O	O
you	O	O
would	O	O
do	O	O
it	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Also	O	O
,	O	O
if	O	O
you	O	O
wanted	O	O
to	O	O
use	O	O
standard	O	O
Java	O	O
,	O	O
you	O	O
would	O	O
do	O	O
it	O	O
like	O	O
this	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
11408427	O	O
,	O	O
answer	O	O
-	O	O
11408482	O	O
The	O	O
Java	O	O
language	O	O
provides	O	O
special	O	O
support	O	O
for	O	O
the	O	O
string	O	O
concatenation	O	O
operator	O	O
(	O	O
+	O	O
)	O	O
and	O	O
for	O	O
conversion	O	O
of	O	O
other	O	O
objects	O	O
to	O	O
strings	O	O
.	O	O
String	B-api_mention	B-api_mention
concatenation	O	O
is	O	O
implemented	O	O
through	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
(	O	O
or	O	O
StringBuffer	B-api_mention	B-api_mention
)	O	O
class	O	O
and	O	O
its	O	O
append	O	O
method	O	O
.	O	O
Question	O	O
-	O	O
25850328	O	O
,	O	O
answer	O	O
-	O	O
25850622	O	O
a	O	O
.	O	O
I	O	O
have	O	O
always	O	O
seen	O	O
them	O	O
as	O	O
a	O	O
design	O	O
pattern	O	O
and	O	O
nothing	O	O
JVM	O	O
-	O	O
Special	O	O
I	O	O
have	O	O
used	O	O
that	O	O
pattern	O	O
in	O	O
several	O	O
situations	O	O
.	O	O
c	O	O
.	O	O
I	O	O
beleive	O	O
that	O	O
using	O	O
Annotations	B-api_mention	B-api_mention
to	O	O
mark	O	O
something	O	O
is	O	O
a	O	O
better	O	O
solution	O	O
then	O	O
using	O	O
marker	O	B-api_mention
interfaces	O	O
.	O	O
Simply	O	O
because	O	O
Interfaces	B-api_mention	O
are	O	O
in	O	O
the	O	O
first	O	O
place	O	O
aimed	O	O
to	O	O
define	O	O
common	O	O
interfaces	O	O
of	O	O
Types	O	O
/	O	O
Classes	O	O
.	O	O
They	O	O
are	O	O
part	O	O
of	O	O
the	O	O
class	O	O
-	O	O
hierachy	O	O
.	O	O
Annotations	O	O
are	O	O
aimed	O	O
to	O	O
provide	O	O
Meta	O	O
-	O	O
Informations	O	O
to	O	O
Code	O	O
,	O	O
and	O	O
I	O	O
think	O	O
that	O	O
marker	O	O
are	O	O
meta	O	O
-	O	O
informations	O	O
.	O	O
So	O	O
they	O	O
are	O	O
exactly	O	O
for	O	O
that	O	O
use	O	O
-	O	O
case	O	O
.	O	O
Question	O	O
-	O	O
31922866	O	O
,	O	O
answer	O	O
-	O	O
31923105	O	O
Oh	O	O
,	O	O
those	O	O
coding	O	O
styles	O	O
are	O	O
to	O	O
be	O	O
taken	O	O
with	O	O
a	O	O
bit	O	O
of	O	O
salt	O	O
.	O	O
#	O	O
li	O	O
(	O	O
+	O	O
)	O	O
Passing	O	O
an	O	O
Option	O	O
result	O	O
to	O	O
another	O	O
method	O	O
,	O	O
without	O	O
any	O	O
semantic	O	O
analysis	O	O
;	O	O
leaving	O	O
that	O	O
to	O	O
the	O	O
method	O	O
,	O	O
is	O	O
quite	O	O
alright	O	O
.	O	O
#	O	O
li	O	O
(	O	O
-	O	O
)	O	O
Using	O	O
Optional	O	B-api_mention
parameters	O	O
causing	O	O
conditional	O	O
logic	O	O
inside	O	O
the	O	O
methods	O	O
is	O	O
literally	O	O
contra	O	O
-	O	O
productive	O	O
.	O	O
#	O	O
li	O	O
(	O	O
-	O	O
)	O	O
Needing	O	O
to	O	O
pack	O	O
an	O	O
argument	O	O
in	O	O
an	O	O
Optional	B-api_mention	B-api_mention
,	O	O
is	O	O
suboptimal	O	O
for	O	O
the	O	O
compiler	O	O
,	O	O
and	O	O
does	O	O
an	O	O
unnecessary	O	O
wrapping	O	O
.	O	O
#	O	O
li	O	O
(	O	O
-	O	O
)	O	O
In	O	O
comparison	O	O
to	O	O
nullable	O	O
parameters	O	O
Optional	B-api_mention	B-api_mention
is	O	O
more	O	O
costly	O	O
.	O	O
In	O	O
general	O	O
:	O	O
Optional	B-api_mention	B-api_mention
unifies	O	O
two	O	O
states	O	O
,	O	O
which	O	O
have	O	O
to	O	O
be	O	O
unraveled	O	O
.	O	O
Hence	O	O
better	O	O
suited	O	O
for	O	O
result	O	O
than	O	O
input	O	O
,	O	O
for	O	O
the	O	O
complexity	O	O
of	O	O
the	O	O
data	O	O
flow	O	O
.	O	O
Question	O	O
-	O	O
29229373	O	O
I	O	O
have	O	O
the	O	O
following	O	O
sample	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
output	O	O
is	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
From	O	O
here	O	O
I	O	O
see	O	O
that	O	O
in	O	O
first	O	O
case	O	O
stream	O	O
really	O	O
behaves	O	O
lazily	O	O
-	O	O
we	O	O
use	O	O
findFirst	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
so	O	O
once	O	O
we	O	O
have	O	O
first	O	O
element	O	O
our	O	O
filtering	O	O
lambda	O	O
is	O	O
not	O	O
invoked	O	O
.	O	O
However	O	O
,	O	O
in	O	O
second	O	O
case	O	O
which	O	O
uses	O	O
flatMaps	O	O
we	O	O
see	O	O
that	O	O
despite	O	O
first	O	O
element	O	O
which	O	O
fulfils	O	O
the	O	O
filter	O	O
condition	O	O
is	O	O
found	O	O
(	O	O
it	O	O
'	O	O
s	O	O
just	O	O
any	O	O
first	O	O
element	O	O
as	O	O
lambda	O	O
always	O	O
returns	O	O
true	O	O
)	O	O
further	O	O
contents	O	O
of	O	O
the	O	O
stream	O	O
are	O	O
still	O	O
being	O	O
fed	O	O
through	O	O
filtering	O	O
function	O	O
.	O	O
I	O	O
am	O	O
trying	O	O
to	O	O
understand	O	O
why	O	O
it	O	O
behaves	O	O
like	O	O
this	O	O
rather	O	O
than	O	O
giving	O	O
up	O	O
after	O	O
first	O	O
element	O	O
is	O	O
calculated	O	O
as	O	O
in	O	O
the	O	O
first	O	O
case	O	O
.	O	O
Any	O	O
helpful	O	O
information	O	O
would	O	O
be	O	O
appreciated	O	O
.	O	O
Question	O	O
-	O	O
5868369	O	O
,	O	O
answer	O	O
-	O	O
31265714	O	O
In	O	O
Java	O	O
8	O	O
,	O	O
there	O	O
is	O	O
also	O	O
an	O	O
alternative	O	O
to	O	O
using	O	O
Files	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lines	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
your	O	O
input	O	O
source	O	O
isn	O	O
'	O	O
t	O	O
a	O	O
file	O	O
but	O	O
something	O	O
more	O	O
abstract	O	O
like	O	O
a	O	O
Reader	B-api_mention	B-api_mention
or	O	O
an	O	O
InputStream	B-api_mention	B-api_mention
,	O	O
you	O	O
can	O	O
stream	O	O
the	O	O
lines	O	O
via	O	O
the	O	O
BufferedReader	B-api_mention	B-api_mention
s	O	O
lines	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
method	O	O
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
will	O	O
call	O	O
processLine	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
each	O	O
input	O	O
line	O	O
read	O	O
by	O	O
the	O	O
BufferedReader	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
29945627	O	O
,	O	O
answer	O	O
-	O	O
29945754	O	O
The	O	O
lambda	O	O
:	O	O
(	O	O
)	O	O
-	O	O
>	O	O
{	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
}	O	O
;	O	O
actually	O	O
represents	O	O
an	O	O
implementation	O	O
for	O	O
an	O	O
interface	O	O
like	O	O
:	O	O
#	O	O
pre	O	O
which	O	O
is	O	O
completely	O	O
different	O	O
than	O	O
the	O	O
one	O	O
you	O	O
'	O	O
ve	O	O
defined	O	O
.	O	O
That	O	O
'	O	O
s	O	O
why	O	O
you	O	O
get	O	O
an	O	O
error	O	O
.	O	O
Since	O	O
you	O	O
can	O	O
'	O	O
t	O	O
extend	O	O
your	O	O
@	O	O
FunctionalInterface	O	O
,	O	O
nor	O	O
introduce	O	O
a	O	O
brand	O	O
new	O	O
one	O	O
,	O	O
then	O	O
I	O	O
think	O	O
you	O	O
don	O	O
'	O	O
t	O	O
have	O	O
much	O	O
options	O	O
.	O	O
You	O	O
can	O	O
use	O	O
the	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interfaces	O	O
to	O	O
denote	O	O
that	O	O
some	O	O
of	O	O
the	O	O
values	O	O
(	O	O
return	O	O
type	O	O
or	O	O
method	O	O
parameter	O	O
)	O	O
is	O	O
missing	O	O
,	O	O
though	O	O
.	O	O
However	O	O
,	O	O
this	O	O
won	O	O
'	O	O
t	O	O
make	O	O
the	O	O
lambda	O	O
body	O	O
simpler	O	O
.	O	O
Question	O	O
-	O	O
31188231	O	O
,	O	O
answer	O	O
-	O	O
31188818	O	O
Ironically	O	O
default	O	O
methods	O	O
in	O	O
interfaces	O	O
were	O	O
introduced	O	O
to	O	O
allow	O	O
existing	O	O
libraries	O	O
using	O	O
those	O	O
interfaces	O	O
not	O	O
to	O	O
break	O	O
,	O	O
while	O	O
introducing	O	O
massive	O	O
new	O	O
functionality	O	O
in	O	O
the	O	O
interfaces	O	O
.	O	O
(	O	O
backward	O	O
compatibility	O	O
.	O	O
)	O	O
Conflicts	O	O
like	O	O
that	O	O
sort	O	O
method	O	O
might	O	O
arise	O	O
.	O	O
Something	O	O
to	O	O
pay	O	O
for	O	O
the	O	O
extra	O	O
functionality	O	O
.	O	O
In	O	O
your	O	O
case	O	O
also	O	O
something	O	O
to	O	O
investigate	O	O
(	O	O
should	O	O
new	O	O
functionality	O	O
be	O	O
used	O	O
instead	O	O
?	O	O
)	O	O
.	O	O
Java	O	O
forward	O	O
compatibility	O	O
breaks	O	O
are	O	O
little	O	O
,	O	O
more	O	O
in	O	O
its	O	O
typing	O	O
system	O	O
,	O	O
which	O	O
was	O	O
constantly	O	O
enlarged	O	O
.	O	O
First	O	O
with	O	O
generic	O	O
types	O	O
and	O	O
now	O	O
with	O	O
inferred	O	O
types	O	O
from	O	O
functional	O	O
interfaces	O	O
.	O	O
From	O	O
version	O	O
to	O	O
version	O	O
and	O	O
from	O	O
compiler	O	O
to	O	O
compiler	O	O
there	O	O
were	O	O
slight	O	O
differences	O	O
.	O	O
Question	O	O
-	O	O
20363719	O	O
,	O	O
answer	O	O
-	O	O
34675066	O	O
I	O	O
was	O	O
trying	O	O
to	O	O
do	O	O
this	O	O
and	O	O
found	O	O
that	O	O
,	O	O
using	O	O
the	O	O
answers	O	O
above	O	O
,	O	O
when	O	O
using	O	O
Functions	O	B-api_mention
.	B-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
the	O	O
key	O	O
to	O	O
the	O	O
Map	B-api_mention	B-api_mention
,	O	O
then	O	O
I	O	O
had	O	O
issues	O	O
with	O	O
using	O	O
a	O	O
local	O	O
method	O	O
like	O	O
this	O	O
:	O	O
:	O	O
localMethodName	O	O
to	O	O
actually	O	O
work	O	O
because	O	O
of	O	O
typing	O	O
issues	O	O
.	O	O
Functions	O	B-api_mention
.	B-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
actually	O	O
does	O	O
something	O	O
to	O	O
the	O	O
typing	O	O
in	O	O
this	O	O
case	O	O
so	O	O
the	O	O
method	O	O
would	O	O
only	O	O
work	O	O
by	O	O
returning	O	O
Object	B-api_mention	B-api_mention
and	O	O
accepting	O	O
a	O	O
param	O	O
of	O	O
Object	B-api_mention	B-api_mention
To	O	O
solve	O	O
this	O	O
,	O	O
I	O	O
ended	O	O
up	O	O
ditching	O	O
Functions	O	B-api_mention
.	B-api_mention	I-api_mention
identity	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
using	O	O
s	O	O
-	O	O
>	O	O
s	O	O
instead	O	O
.	O	O
So	O	O
my	O	O
code	O	O
,	O	O
in	O	O
my	O	O
case	O	O
to	O	O
list	O	O
all	O	O
directories	O	O
inside	O	O
a	O	O
directory	O	O
,	O	O
and	O	O
for	O	O
each	O	O
one	O	O
use	O	O
the	O	O
name	O	O
of	O	O
the	O	O
directory	O	O
as	O	O
the	O	O
key	O	O
to	O	O
the	O	O
map	O	O
and	O	O
then	O	O
call	O	O
a	O	O
method	O	O
with	O	O
the	O	O
directory	O	O
name	O	O
and	O	O
return	O	O
a	O	O
collection	O	O
of	O	O
items	O	O
,	O	O
looks	O	O
like	O	O
:	O	O
Map	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
items	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
32676771	O	O
,	O	O
answer	O	O
-	O	O
32677400	O	O
Despite	O	O
of	O	O
the	O	O
fact	O	O
that	O	O
there	O	O
is	O	O
no	O	O
AtomicDouble	O	B-api_mention
or	O	O
AtomicDoubleArray	O	B-api_mention
in	O	O
java	O	O
,	O	O
you	O	O
can	O	O
easily	O	O
create	O	O
your	O	O
own	O	O
based	O	O
on	O	O
AtomicLongArray	O	B-api_mention
.	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
can	O	O
see	O	O
,	O	O
I	O	O
use	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
doubleToLongBits	I-api_mention	I-api_mention
and	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
longBitsToDouble	I-api_mention	I-api_mention
to	O	O
store	O	O
Doubles	O	O
as	O	O
Longs	O	O
in	O	O
AtomicLongArray	O	B-api_mention
.	O	O
They	O	O
both	O	O
have	O	O
the	O	O
same	O	O
size	O	O
in	O	O
bits	O	O
,	O	O
so	O	O
precision	O	O
is	O	O
not	O	O
lost	O	O
(	O	O
except	O	O
for	O	O
-	O	O
NaN	O	O
,	O	O
but	O	O
I	O	O
don	O	O
'	O	O
t	O	O
think	O	O
it	O	O
is	O	O
important	O	O
)	O	O
.	O	O
In	O	O
Java	O	O
8	O	O
the	O	O
implementation	O	O
of	O	O
add	O	O
can	O	O
be	O	O
even	O	O
easier	O	O
,	O	O
as	O	O
you	O	O
can	O	O
use	O	O
accumulateAndGet	O	B-api_mention
method	O	O
of	O	O
AtomicLongArray	O	B-api_mention
that	O	O
was	O	O
added	O	O
in	O	O
java	O	O
1	O	O
.	O	O
8	O	O
.	O	O
Upd	O	O
:	O	O
It	O	O
appears	O	O
that	O	O
I	O	O
virtually	O	O
re	O	O
-	O	O
implemented	O	O
guava	O	O
'	O	O
s	O	O
AtomicDoubleArray	O	B-api_mention
.	O	O
Question	O	O
-	O	O
32175145	O	O
,	O	O
answer	O	O
-	O	O
32175224	O	O
Since	O	O
equals	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
not	O	O
a	O	O
final	O	O
method	O	O
of	O	O
Object	B-api_mention	B-api_mention
,	O	O
yes	O	O
,	O	O
it	O	O
is	O	O
very	O	O
well	O	O
be	O	O
possible	O	O
in	O	O
a	O	O
different	O	O
situation	O	O
.	O	O
#	O	O
pre	O	O
This	O	O
question	O	O
,	O	O
however	O	O
,	O	O
specifically	O	O
says	O	O
that	O	O
these	O	O
are	O	O
primitive	O	O
wrappers	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
Integer	B-api_mention	B-api_mention
,	O	O
Boolean	B-api_mention	O
,	O	O
etc	O	O
.	O	O
)	O	O
and	O	O
since	O	O
these	O	O
classes	O	O
are	O	O
final	O	O
,	O	O
you	O	O
cannot	O	O
extend	O	O
them	O	O
,	O	O
thus	O	O
a	O	O
.	B-api_mention	B-api_mention
equals	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
will	O	O
always	O	O
return	O	O
true	O	O
.	O	O
Question	O	O
-	O	O
27908213	O	O
Are	O	O
enum	O	O
names	O	O
interned	O	O
in	O	O
Java	O	O
?	O	O
I	O	O
.	O	O
e	O	O
.	O	O
is	O	O
it	O	O
guaranteed	O	O
that	O	O
enum1	O	O
.	O	O
name	O	O
(	O	O
args	O	O
)	O	O
=	O	O
=	O	O
enum2	O	O
.	O	B-api_mention
name	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
in	O	O
case	O	O
of	O	O
the	O	O
same	O	O
name	O	O
?	O	O
And	O	O
is	O	O
it	O	O
safe	O	O
to	O	O
compare	O	O
enum	O	O
.	O	B-api_mention
name	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
to	O	O
a	O	O
String	B-api_mention	B-api_mention
that	O	O
is	O	O
guaranteed	O	O
to	O	O
be	O	O
interned	O	O
.	O	O
Question	O	O
-	O	O
25222811	O	O
,	O	O
answer	O	O
-	O	O
26676046	O	O
To	O	O
begin	O	O
with	O	O
(	O	O
and	O	O
unrelated	O	O
)	O	O
,	O	O
instantiating	O	O
the	O	O
Application	B-api_mention	O
class	O	O
by	O	O
yourself	O	O
does	O	O
not	O	O
seem	O	O
to	O	O
be	O	O
its	O	O
intended	O	O
use	O	O
.	O	O
From	O	O
what	O	O
one	O	O
can	O	O
read	O	O
from	O	O
its	O	O
source	O	O
,	O	O
you	O	O
are	O	O
rather	O	O
expected	O	O
to	O	O
use	O	O
the	O	O
static	O	O
instance	O	O
returned	O	O
by	O	O
getApplication	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Now	O	O
let	O	O
'	O	O
s	O	O
get	O	O
to	O	O
the	O	O
error	O	O
Eclipse	O	O
reports	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
ran	O	O
into	O	O
a	O	O
similar	O	O
issue	O	O
recently	O	O
:	O	O
Access	O	O
restriction	O	O
:	O	O
The	O	O
method	O	O
.	O	O
.	O	O
.	O	O
is	O	O
not	O	O
API	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	O
I	O	O
called	O	O
the	O	O
method	O	O
in	O	O
question	O	O
as	O	O
a	O	O
method	O	O
of	O	O
an	O	O
object	O	O
which	O	O
inherited	O	O
that	O	O
method	O	O
from	O	O
a	O	O
super	O	O
class	O	O
.	O	O
All	O	O
I	O	O
had	O	O
to	O	O
do	O	O
was	O	O
to	O	O
add	O	O
the	O	O
package	O	O
the	O	O
super	O	O
class	O	O
was	O	O
in	O	O
to	O	O
the	O	O
packages	O	O
imported	O	O
by	O	O
my	O	O
plugin	O	O
.	O	O
However	O	O
,	O	O
there	O	O
is	O	O
a	O	O
lot	O	O
of	O	O
different	O	O
causes	O	O
for	O	O
errors	O	O
based	O	O
on	O	O
"	O	O
restriction	O	O
on	O	O
required	O	O
project	O	O
/	O	O
library	O	O
"	O	O
.	O	O
Similar	O	O
to	O	O
the	O	O
problem	O	O
described	O	O
above	O	O
,	O	O
the	O	O
type	O	O
you	O	O
are	O	O
using	O	O
might	O	O
have	O	O
dependencies	O	O
to	O	O
packages	O	O
that	O	O
are	O	O
not	O	O
exported	O	O
by	O	O
the	O	O
library	O	O
or	O	O
might	O	O
not	O	O
be	O	O
exported	O	O
itself	O	O
.	O	O
In	O	O
that	O	O
case	O	O
you	O	O
can	O	O
try	O	O
to	O	O
track	O	O
down	O	O
the	O	O
missing	O	O
packages	O	O
and	O	O
export	O	O
them	O	O
my	O	O
yourself	O	O
,	O	O
as	O	O
suggested	O	O
here	O	O
,	O	O
or	O	O
try	O	O
Access	O	O
Rules	O	O
.	O	O
Other	O	O
possible	O	O
scenarios	O	O
include	O	O
:	O	O
#	O	O
li	O	O
Eclipse	O	O
wants	O	O
to	O	O
keep	O	O
you	O	O
from	O	O
using	O	O
available	O	O
packages	O	O
that	O	O
are	O	O
not	O	O
part	O	O
of	O	O
the	O	O
public	O	O
Java	O	O
API	O	O
(	O	O
solution	O	O
1	O	O
,	O	O
2	O	O
)	O	O
#	O	O
li	O	O
Dependencies	O	O
are	O	O
satisfied	O	O
by	O	O
multiple	O	O
sources	O	O
,	O	O
versions	O	O
are	O	O
conflicting	O	O
etc	O	O
.	O	O
(	O	O
solution	O	O
1	O	O
,	O	O
2	O	O
,	O	O
3	O	O
)	O	O
#	O	O
li	O	O
Eclipse	O	O
is	O	O
using	O	O
a	O	O
JRE	O	O
where	O	O
a	O	O
JDK	O	O
is	O	O
necessary	O	O
(	O	O
which	O	O
might	O	O
be	O	O
the	O	O
case	O	O
here	O	O
,	O	O
from	O	O
what	O	O
your	O	O
errors	O	O
say	O	O
;	O	O
solution	O	O
)	O	O
or	O	O
JRE	O	O
/	O	O
JDK	O	O
version	O	O
in	O	O
project	O	O
build	O	O
path	O	O
is	O	O
not	O	O
the	O	O
right	O	O
one	O	O
This	O	O
ended	O	O
up	O	O
as	O	O
more	O	O
like	O	O
a	O	O
medley	O	O
of	O	O
restriction	O	O
-	O	O
related	O	O
issues	O	O
than	O	O
an	O	O
actual	O	O
answer	O	O
.	O	O
But	O	O
since	O	O
restriction	O	O
on	O	O
required	O	O
projects	O	O
is	O	O
such	O	O
a	O	O
versatile	O	O
error	O	O
to	O	O
be	O	O
reported	O	O
,	O	O
the	O	O
perfect	O	O
recipe	O	O
is	O	O
probably	O	O
still	O	O
to	O	O
be	O	O
found	O	O
.	O	O
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16148619	O	O
use	O	O
int	O	O
as	O	O
Object	B-api_mention	B-api_mention
not	O	O
as	O	O
primitive	O	O
type	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
17828584	O	O
,	O	O
answer	O	O
-	O	O
17832168	O	O
I	O	O
think	O	O
the	O	O
number	O	O
displayed	O	O
is	O	O
the	O	O
number	O	O
of	O	O
time	O	O
the	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
call	O	O
throws	O	O
the	O	O
Stackoverflow	O	O
exception	O	O
.	O	O
It	O	O
probably	O	O
depend	O	O
on	O	O
the	O	O
implementation	O	O
of	O	O
the	O	O
println	B-api_mention	O
and	O	O
the	O	O
number	O	O
of	O	O
stacking	O	O
call	O	O
it	O	O
is	O	O
made	O	O
in	O	O
it	O	O
.	O	O
As	O	O
an	O	O
illustration	O	O
:	O	O
The	O	O
main	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
call	O	O
trigger	O	O
the	O	O
Stackoverflow	O	O
exception	O	O
at	O	O
call	O	O
i	O	O
.	O	O
The	O	O
i	O	O
-	O	O
1	O	O
call	O	O
of	O	O
main	O	O
catch	O	O
the	O	O
exception	O	O
and	O	O
call	O	O
println	B-api_mention	B-api_mention
which	O	O
trigger	O	O
a	O	O
second	O	O
Stackoverflow	O	O
.	O	O
cnt	O	O
get	O	O
increment	O	O
to	O	O
1	O	O
.	O	O
The	O	O
i	O	O
-	O	O
2	O	O
call	O	O
of	O	O
main	O	O
catch	O	O
now	O	O
the	O	O
exception	O	O
and	O	O
call	O	O
println	B-api_mention	B-api_mention
.	O	O
In	O	O
println	B-api_mention	O
a	O	O
method	O	O
is	O	O
called	O	O
triggering	O	O
a	O	O
3rd	O	O
exception	O	O
.	O	O
cnt	O	O
get	O	O
increment	O	O
to	O	O
2	O	O
.	O	O
this	O	O
continue	O	O
until	O	O
println	B-api_mention	O
can	O	O
make	O	O
all	O	O
its	O	O
needed	O	O
call	O	O
and	O	O
finally	O	O
display	O	O
the	O	O
value	O	O
of	O	O
cnt	O	O
.	O	O
This	O	O
is	O	O
then	O	O
dependent	O	O
of	O	O
the	O	O
actual	O	O
implementation	O	O
of	O	O
println	B-api_mention	O
.	O	O
For	O	O
the	O	O
JDK7	O	O
either	O	O
it	O	O
detect	O	O
cycling	O	O
call	O	O
and	O	O
throws	O	O
the	O	O
exception	O	O
earlier	O	O
either	O	O
it	O	O
keep	O	O
some	O	O
stack	O	O
resource	O	O
and	O	O
throw	O	O
the	O	O
exception	O	O
before	O	O
reaching	O	O
the	O	O
limit	O	O
to	O	O
give	O	O
some	O	O
room	O	O
for	O	O
remediation	O	O
logic	O	O
either	O	O
the	O	O
println	O	O
implementation	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
calls	O	O
either	O	O
the	O	O
+	O	O
+	O	O
operation	O	O
is	O	O
done	O	O
after	O	O
the	O	O
println	B-api_mention	O
call	O	O
thus	O	O
is	O	O
by	O	O
pass	O	O
by	O	O
the	O	O
exception	O	O
.	O	O
Question	O	O
-	O	O
18263489	O	O
,	O	O
answer	O	O
-	O	O
29873100	O	O
It	O	O
isn	O	O
'	O	O
t	O	O
pretty	O	O
,	O	O
but	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
allows	O	O
you	O	O
to	O	O
use	O	O
a	O	O
null	O	O
String	B-api_mention	B-api_mention
in	O	O
a	O	O
switch	O	O
.	O	O
If	O	O
it	O	O
finds	O	O
null	O	O
,	O	O
it	O	O
converts	O	O
it	O	O
to	O	O
StringLiteral	O	O
,	O	O
otherwise	O	O
it	O	O
just	O	O
returns	O	O
the	O	O
same	O	O
String	B-api_mention	B-api_mention
you	O	O
passed	O	O
it	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
handle	O	O
StringLiteral	O	O
explicitly	O	O
,	O	O
then	O	O
it	O	O
will	O	O
go	O	O
to	O	O
default	O	O
.	O	O
The	O	O
only	O	O
caveat	O	O
is	O	O
that	O	O
there	O	O
is	O	O
no	O	O
way	O	O
of	O	O
distinguishing	O	O
between	O	O
the	O	O
String	B-api_mention	B-api_mention
StringLiteral	O	O
and	O	O
an	O	O
actual	O	O
null	O	O
String	B-api_mention	B-api_mention
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
8894258	O	O
,	O	O
answer	O	O
-	O	O
8894348	O	O
The	O	O
first	O	O
one	O	O
using	O	O
str	B-api_mention	O
.	I-api_mention	O
charAt	I-api_mention	O
should	O	O
be	O	O
faster	O	O
.	O	O
If	O	O
you	O	O
dig	O	O
inside	O	O
the	O	O
source	O	O
code	O	O
of	O	O
String	O	B-api_mention
class	O	O
,	O	O
we	O	O
can	O	O
see	O	O
that	O	O
charAt	O	O
is	O	O
implemented	O	O
as	O	O
follows	O	O
:	O	O
#	O	O
pre	O	O
Here	O	O
,	O	O
all	O	O
it	O	O
does	O	O
is	O	O
index	O	O
an	O	O
array	O	O
and	O	O
return	O	O
the	O	O
value	O	O
.	O	O
Now	O	O
,	O	O
if	O	O
we	O	O
see	O	O
the	O	O
implementation	O	O
of	O	O
toCharArray	B-api_mention	B-api_mention
,	O	O
we	O	O
will	O	O
find	O	O
the	O	O
below	O	O
:	O	O
#	O	O
pre	O	O
As	O	O
you	O	O
see	O	O
,	O	O
it	O	O
is	O	O
doing	O	O
a	O	O
System	B-api_mention	O
.	I-api_mention	O
arraycopy	I-api_mention	O
which	O	O
is	O	O
definitely	O	O
going	O	O
to	O	O
be	O	O
a	O	O
tad	O	O
slower	O	O
than	O	O
not	O	O
doing	O	O
it	O	O
.	O	O
Question	O	O
-	O	O
22561614	O	O
,	O	O
answer	O	O
-	O	O
22561687	O	O
This	O	O
works	O	O
because	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
resolves	O	O
to	O	O
an	O	O
implementation	O	O
of	O	O
the	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
.	O	O
The	O	O
method	O	O
reference	O	O
of	O	O
Integer	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
resolves	O	O
to	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
min	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
resolved	O	O
to	O	O
IntBinaryOperator	B-api_mention	B-api_mention
,	O	O
and	O	O
presumably	O	O
autoboxing	O	O
occurs	O	O
somewhere	O	O
making	O	O
it	O	O
a	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
And	O	O
the	O	O
min	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
resp	O	I-api_mention
max	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
of	O	O
the	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
ask	O	O
the	O	O
Comparable	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
interface	O	O
to	O	O
be	O	O
implemented	O	O
.	O	O
Now	O	O
this	O	O
resolves	O	O
to	O	O
the	O	O
single	O	O
method	O	O
Integer	B-api_mention	B-api_mention
compareTo	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Which	O	O
is	O	O
of	O	O
type	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
And	O	O
thus	O	O
the	O	O
magic	O	O
has	O	O
happened	O	O
as	O	O
both	O	O
methods	O	O
are	O	O
a	O	O
BinaryOperator	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
23674624	O	O
,	O	O
answer	O	O
-	O	O
23674719	O	O
IntStream	B-api_mention	B-api_mention
.	I-api_mention	O
boxed	I-api_mention	O
turns	O	O
an	O	O
IntStream	B-api_mention	B-api_mention
into	O	O
a	O	O
Stream	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
,	O	O
which	O	O
you	O	O
can	O	O
then	O	O
collect	O	O
into	O	O
a	O	O
list	O	O
:	O	O
theIntStream	O	B-api_mention
.	B-api_mention	I-api_mention
boxed	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
16636899	O	O
I	O	O
feel	O	O
that	O	O
I	O	O
need	O	O
to	O	O
extend	O	O
my	O	O
comment	O	O
a	O	O
bit	O	O
.	O	O
.	O	O
.	O	O
About	O	O
paradigm	O	O
\	O	O
style	O	O
That	O	O
'	O	O
s	O	O
probably	O	O
the	O	O
most	O	O
notable	O	O
aspect	O	O
.	O	O
FP	O	O
became	O	O
popular	O	O
due	O	O
to	O	O
what	O	O
you	O	O
can	O	O
get	O	O
avoiding	O	O
side	O	O
-	O	O
effects	O	O
.	O	O
I	O	O
won	O	O
'	O	O
t	O	O
delve	O	O
deep	O	O
into	O	O
what	O	O
pros	O	O
\	O	O
cons	O	O
you	O	O
can	O	O
get	O	O
from	O	O
this	O	O
,	O	O
since	O	O
this	O	O
is	O	O
not	O	O
related	O	O
to	O	O
the	O	O
question	O	O
.	O	O
However	O	O
,	O	O
I	O	O
will	O	O
say	O	O
that	O	O
the	O	O
iteration	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
is	O	O
inspired	O	O
by	O	O
FP	O	O
and	O	O
rather	O	O
result	O	O
of	O	O
bringing	O	O
more	O	O
FP	O	O
to	O	O
Java	O	O
(	O	O
ironically	O	O
,	O	O
I	O	O
'	O	O
d	O	O
say	O	O
that	O	O
there	O	O
is	O	O
no	O	O
much	O	O
use	O	O
for	O	O
forEach	B-api_mention	B-api_mention
in	O	O
pure	O	O
FP	O	O
,	O	O
since	O	O
it	O	O
does	O	O
nothing	O	O
except	O	O
introducing	O	O
side	O	O
-	O	O
effects	O	O
)	O	O
.	O	O
In	O	O
the	O	O
end	O	O
I	O	O
would	O	O
say	O	O
that	O	O
it	O	O
is	O	O
rather	O	O
a	O	O
matter	O	O
of	O	O
taste	O	O
\	O	O
style	O	O
\	O	O
paradigm	O	O
you	O	O
are	O	O
currently	O	O
writing	O	O
in	O	O
.	O	O
About	O	O
parallelism	O	O
.	O	O
From	O	O
performance	O	O
point	O	O
of	O	O
view	O	O
there	O	O
is	O	O
no	O	O
promised	O	O
notable	O	O
benefits	O	O
from	O	O
using	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
over	O	O
foreach	O	O
(	O	O
.	O	O
.	O	O
.	O	O
)	O	O
.	O	O
According	O	O
to	O	O
official	O	O
docs	O	O
on	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
.	O	O
.	O	O
.	O	O
i	O	O
.	O	O
e	O	O
.	O	O
docs	O	O
pretty	O	O
much	O	O
clear	O	O
that	O	O
there	O	O
will	O	O
be	O	O
no	O	O
implicit	O	O
parallelism	O	O
.	O	O
Adding	O	O
one	O	O
would	O	O
be	O	O
LSP	O	O
violation	O	O
.	O	O
Now	O	O
,	O	O
there	O	O
are	O	O
"	O	O
parallell	O	O
collections	O	O
"	O	O
that	O	O
are	O	O
promised	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
but	O	O
to	O	O
work	O	O
with	O	O
those	O	O
you	O	O
need	O	O
to	O	O
me	O	O
more	O	O
explicit	O	O
and	O	O
put	O	O
some	O	O
extra	O	O
care	O	O
to	O	O
use	O	O
them	O	O
(	O	O
see	O	O
mschenk74	O	O
'	O	O
s	O	O
answer	O	O
for	O	O
example	O	O
)	O	O
.	O	O
BTW	O	O
:	O	O
in	O	O
this	O	O
case	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
will	O	O
be	O	O
used	O	O
,	O	O
and	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
guarantee	O	O
that	O	O
actual	O	O
work	O	O
will	O	O
be	O	O
done	O	O
in	O	O
parallell	O	O
(	O	O
depends	O	O
on	O	O
underlying	O	O
collection	O	O
)	O	O
.	O	O
UPDATE	O	O
:	O	O
might	O	O
be	O	O
not	O	O
that	O	O
obvious	O	O
and	O	O
a	O	O
little	O	O
stretched	O	O
at	O	O
a	O	O
glance	O	O
but	O	O
there	O	O
is	O	O
another	O	O
facet	O	O
of	O	O
style	O	O
and	O	O
readability	O	O
perspective	O	O
.	O	O
First	O	O
of	O	O
all	O	O
-	O	O
plain	O	O
old	O	O
forloops	O	O
are	O	O
plain	O	O
and	O	O
old	O	O
.	O	O
Everybody	O	O
already	O	O
knows	O	O
them	O	O
.	O	O
Second	O	O
,	O	O
and	O	O
more	O	O
important	O	O
-	O	O
you	O	O
probably	O	O
want	O	O
to	O	O
use	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
only	O	O
with	O	O
one	O	O
-	O	O
liner	O	O
lambdas	O	O
.	O	O
If	O	O
"	O	O
body	O	O
"	O	O
gets	O	O
heavier	O	O
-	O	O
they	O	O
tend	O	O
to	O	O
be	O	O
not	O	O
-	O	O
that	O	O
readable	O	O
.	O	O
You	O	O
have	O	O
2	O	O
options	O	O
from	O	O
here	O	O
-	O	O
use	O	O
inner	O	O
classes	O	O
(	O	O
yuck	O	O
)	O	O
or	O	O
use	O	O
plain	O	O
old	O	O
forloop	O	O
.	O	O
People	O	O
often	O	O
gets	O	O
annoyed	O	O
when	O	O
they	O	O
see	O	O
the	O	O
same	O	O
things	O	O
(	O	O
iteratins	O	O
over	O	O
collections	O	O
)	O	O
being	O	O
done	O	O
various	O	O
vays	O	O
/	O	O
styles	O	O
in	O	O
the	O	O
same	O	O
codebase	O	O
,	O	O
and	O	O
this	O	O
seems	O	O
to	O	O
be	O	O
the	O	O
case	O	O
.	O	O
Again	O	O
,	O	O
this	O	O
might	O	O
or	O	O
might	O	O
not	O	O
be	O	O
an	O	O
issue	O	O
.	O	O
Depends	O	O
on	O	O
people	O	O
working	O	O
on	O	O
code	O	O
.	O	O
Question	O	O
-	O	O
28584669	O	O
,	O	O
answer	O	O
-	O	O
28584932	O	O
Your	O	O
reasoning	O	O
is	O	O
that	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
should	O	O
not	O	O
be	O	O
equal	O	O
to	O	O
itself	O	O
because	O	O
it	O	O
is	O	O
	O	O
likely	O	O
	O	O
to	O	O
have	O	O
been	O	O
obtained	O	O
as	O	O
the	O	O
result	O	O
of	O	O
a	O	O
loss	O	O
of	O	O
accuracy	O	O
.	O	O
This	O	O
line	O	O
of	O	O
reasoning	O	O
applies	O	O
to	O	O
all	O	O
of	O	O
floating	O	O
-	O	O
point	O	O
.	O	O
Any	O	O
finite	O	O
value	O	O
can	O	O
be	O	O
obtained	O	O
as	O	O
the	O	O
result	O	O
of	O	O
an	O	O
inaccurate	O	O
operation	O	O
.	O	O
That	O	O
did	O	O
not	O	O
push	O	O
the	O	O
IEEE	O	O
754	O	O
standardization	O	O
committee	O	O
to	O	O
define	O	O
=	O	O
=	O	O
as	O	O
always	O	O
evaluating	O	O
to	O	O
false	O	O
for	O	O
finite	O	O
values	O	O
,	O	O
so	O	O
why	O	O
should	O	O
infinities	O	O
be	O	O
different	O	O
?	O	O
As	O	O
defined	O	O
,	O	O
=	O	O
=	O	O
is	O	O
useful	O	O
for	O	O
people	O	O
who	O	O
understand	O	O
what	O	O
it	O	O
does	O	O
(	O	O
that	O	O
is	O	O
,	O	O
test	O	O
the	O	O
floating	O	O
-	O	O
point	O	O
values	O	O
that	O	O
have	O	O
been	O	O
obtained	O	O
,	O	O
and	O	O
certainly	O	O
not	O	O
the	O	O
values	O	O
that	O	O
should	O	O
have	O	O
been	O	O
obtained	O	O
with	O	O
real	O	O
computations	O	O
)	O	O
.	O	O
For	O	O
anyone	O	O
who	O	O
understands	O	O
that	O	O
,	O	O
and	O	O
you	O	O
need	O	O
to	O	O
understand	O	O
it	O	O
to	O	O
use	O	O
floating	O	O
-	O	O
point	O	O
even	O	O
for	O	O
computations	O	O
that	O	O
do	O	O
not	O	O
involve	O	O
infinity	O	O
,	O	O
having	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
=	O	O
=	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
evaluate	O	O
to	O	O
true	O	O
is	O	O
convenient	O	O
,	O	O
if	O	O
only	O	O
to	O	O
test	O	O
if	O	O
the	O	O
floating	O	O
-	O	O
point	O	O
result	O	O
of	O	O
a	O	O
floating	O	O
-	O	O
point	O	O
computation	O	O
is	O	O
Double	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
POSITIVE	I-api_mention	I-api_mention
_	I-api_mention	I-api_mention
INFINITY	I-api_mention	I-api_mention
.	O	O
That	O	O
leaves	O	O
the	O	O
question	O	O
of	O	O
why	O	O
NaN	O	O
can	O	O
afford	O	O
to	O	O
have	O	O
special	O	O
behavior	O	O
,	O	O
and	O	O
infinities	O	O
should	O	O
follow	O	O
the	O	O
same	O	O
general	O	O
principles	O	O
as	O	O
finite	O	O
values	O	O
.	O	O
NaN	O	O
is	O	O
different	O	O
from	O	O
infinities	O	O
:	O	O
the	O	O
underlying	O	O
principle	O	O
of	O	O
the	O	O
IEEE	O	O
754	O	O
standard	O	O
is	O	O
that	O	O
values	O	O
are	O	O
exactly	O	O
what	O	O
they	O	O
are	O	O
,	O	O
but	O	O
the	O	O
result	O	O
of	O	O
an	O	O
operation	O	O
can	O	O
be	O	O
approximated	O	O
with	O	O
respect	O	O
to	O	O
the	O	O
real	O	O
result	O	O
,	O	O
and	O	O
in	O	O
this	O	O
case	O	O
,	O	O
the	O	O
resulting	O	O
floating	O	O
-	O	O
point	O	O
value	O	O
is	O	O
obtained	O	O
according	O	O
to	O	O
the	O	O
rounding	O	O
mode	O	O
.	O	O
Forget	O	O
for	O	O
an	O	O
instant	O	O
that	O	O
1	O	O
.	O	O
0	O	O
/	O	O
0	O	O
.	O	O
0	O	O
is	O	O
defined	O	O
as	O	O
+	O	O
inf	O	O
,	O	O
which	O	O
is	O	O
an	O	O
annoyance	O	O
in	O	O
this	O	O
discussion	O	O
.	O	O
Think	O	O
for	O	O
the	O	O
moment	O	O
of	O	O
Double	O	B-api_mention
.	O	I-api_mention
POSITIVE	O	I-api_mention
_	O	I-api_mention
INFINITY	O	I-api_mention
only	O	O
as	O	O
the	O	O
result	O	O
of	O	O
operations	O	O
such	O	O
as	O	O
1	O	O
.	O	O
0e100	O	O
/	O	O
1	O	O
.	O	O
0e	O	O
-	O	O
300	O	O
or	O	O
Double	O	B-api_mention
.	O	I-api_mention
MAX	O	I-api_mention
_	O	I-api_mention
VALUE	O	I-api_mention
+	O	O
Double	O	B-api_mention
.	O	I-api_mention
MAX	O	I-api_mention
_	O	I-api_mention
VALUE	O	I-api_mention
.	O	O
For	O	O
these	O	O
operations	O	O
,	O	O
+	O	O
inf	O	O
is	O	O
the	O	O
closest	O	O
approximation	O	O
of	O	O
the	O	O
real	O	O
result	O	O
,	O	O
just	O	O
like	O	O
for	O	O
operations	O	O
that	O	O
produce	O	O
a	O	O
finite	O	O
result	O	O
.	O	O
By	O	O
contrast	O	O
,	O	O
NaN	O	O
is	O	O
the	O	O
result	O	O
you	O	O
obtain	O	O
when	O	O
the	O	O
operation	O	O
doesn	O	O
'	O	O
t	O	O
make	O	O
sense	O	O
.	O	O
It	O	O
is	O	O
defensible	O	O
to	O	O
have	O	O
NaN	O	O
behave	O	O
specially	O	O
,	O	O
but	O	O
inf	O	O
is	O	O
just	O	O
an	O	O
approximation	O	O
of	O	O
all	O	O
the	O	O
values	O	O
too	O	O
large	O	O
to	O	O
represent	O	O
.	O	O
In	O	O
reality	O	O
,	O	O
1	O	O
.	O	O
0	O	O
/	O	O
0	O	O
.	O	O
0	O	O
also	O	O
produces	O	O
+	O	O
inf	O	O
,	O	O
but	O	O
that	O	O
should	O	O
be	O	O
considered	O	O
an	O	O
exception	O	O
.	O	O
It	O	O
would	O	O
have	O	O
been	O	O
just	O	O
as	O	O
coherent	O	O
to	O	O
define	O	O
the	O	O
result	O	O
of	O	O
that	O	O
operation	O	O
as	O	O
NaN	O	O
,	O	O
but	O	O
defining	O	O
it	O	O
as	O	O
+	O	O
inf	O	O
was	O	O
more	O	O
convenient	O	O
in	O	O
the	O	O
implementation	O	O
of	O	O
some	O	O
algorithms	O	O
.	O	O
An	O	O
example	O	O
is	O	O
provided	O	O
page	O	O
10	O	O
in	O	O
Kahan	O	O
'	O	O
s	O	O
notes	O	O
.	O	O
More	O	O
details	O	O
than	O	O
most	O	O
will	O	O
wish	O	O
for	O	O
are	O	O
in	O	O
the	O	O
article	O	O
	O	O
Branch	O	O
Cuts	O	O
for	O	O
Complex	O	O
Elementary	O	O
Functions	O	O
,	O	O
or	O	O
Much	O	O
Ado	O	O
About	O	O
Nothing	O	O
'	O	O
s	O	O
Sign	O	O
Bit	O	O
	O	O
.	O	O
I	O	O
would	O	O
also	O	O
interpret	O	O
the	O	O
existence	O	O
in	O	O
IEEE	O	O
754	O	O
of	O	O
a	O	O
	O	O
division	O	O
by	O	O
zero	O	O
	O	O
flag	O	O
separate	O	O
from	O	O
the	O	O
NaN	O	O
flag	O	O
as	O	O
recognition	O	O
that	O	O
the	O	O
user	O	O
may	O	O
want	O	O
to	O	O
treat	O	O
division	O	O
by	O	O
zero	O	O
specially	O	O
although	O	O
it	O	O
is	O	O
not	O	O
defined	O	O
as	O	O
producing	O	O
NaN	O	O
.	O	O
Question	O	O
-	O	O
24676877	O	O
,	O	O
answer	O	O
-	O	O
24679745	O	O
The	O	O
answer	O	O
is	O	O
,	O	O
as	O	O
always	O	O
,	O	O
"	O	O
it	O	O
depends	O	O
"	O	O
.	O	O
It	O	O
depends	O	O
on	O	O
how	O	O
big	O	O
the	O	O
returned	O	O
collection	O	O
will	O	O
be	O	O
.	O	O
It	O	O
depends	O	O
on	O	O
whether	O	O
the	O	O
result	O	O
changes	O	O
over	O	O
time	O	O
,	O	O
and	O	O
how	O	O
important	O	O
consistency	O	O
of	O	O
the	O	O
returned	O	O
result	O	O
is	O	O
.	O	O
And	O	O
it	O	O
depends	O	O
very	O	O
much	O	O
on	O	O
how	O	O
the	O	O
user	O	O
is	O	O
likely	O	O
to	O	O
use	O	O
the	O	O
answer	O	O
.	O	O
First	O	O
,	O	O
note	O	O
that	O	O
you	O	O
can	O	O
always	O	O
get	O	O
a	O	O
Collection	B-api_mention	B-api_mention
from	O	O
a	O	O
Stream	B-api_mention	B-api_mention
,	O	O
and	O	O
vice	O	O
versa	O	O
:	O	O
/	O	O
/	O	O
If	O	O
API	O	O
returns	O	O
Collection	B-api_mention	B-api_mention
,	O	O
convert	O	O
with	O	O
stream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
getFoo	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
.	O	O
.	O	O
/	O	O
/	O	O
If	O	O
API	O	O
returns	O	O
Stream	B-api_mention	B-api_mention
,	O	O
use	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Collection	I-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
c	O	O
=	O	O
getFooStream	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	B-api_mention	I-api_mention
collect	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
So	O	O
the	O	O
question	O	O
is	O	O
,	O	O
which	O	O
is	O	O
more	O	O
useful	O	O
to	O	O
your	O	O
callers	O	O
.	O	O
If	O	O
your	O	O
result	O	O
might	O	O
be	O	O
infinite	O	O
,	O	O
there	O	O
'	O	O
s	O	O
only	O	O
one	O	O
choice	O	O
:	O	O
Stream	B-api_mention	B-api_mention
.	O	O
If	O	O
your	O	O
result	O	O
might	O	O
be	O	O
very	O	O
large	O	O
,	O	O
you	O	O
probably	O	O
prefer	O	O
Stream	B-api_mention	B-api_mention
,	O	O
since	O	O
there	O	O
may	O	O
not	O	O
be	O	O
any	O	O
value	O	O
in	O	O
materializing	O	O
it	O	O
all	O	O
at	O	O
once	O	O
,	O	O
and	O	O
doing	O	O
so	O	O
could	O	O
create	O	O
significant	O	O
heap	O	O
pressure	O	O
.	O	O
If	O	O
all	O	O
the	O	O
caller	O	O
is	O	O
going	O	O
to	O	O
do	O	O
is	O	O
iterate	O	O
through	O	O
it	O	O
(	O	O
search	O	O
,	O	O
filter	O	O
,	O	O
aggregate	O	O
)	O	O
,	O	O
you	O	O
should	O	O
prefer	O	O
Stream	B-api_mention	B-api_mention
,	O	O
since	O	O
Stream	B-api_mention	B-api_mention
has	O	O
these	O	O
built	O	O
-	O	O
in	O	O
already	O	O
and	O	O
there	O	O
'	O	O
s	O	O
no	O	O
need	O	O
to	O	O
materialize	O	O
a	O	O
collection	O	O
(	O	O
especially	O	O
if	O	O
the	O	O
user	O	O
might	O	O
not	O	O
process	O	O
the	O	O
whole	O	O
result	O	O
.	O	O
)	O	O
This	O	O
is	O	O
a	O	O
very	O	O
common	O	O
case	O	O
.	O	O
Even	O	O
if	O	O
you	O	O
know	O	O
that	O	O
the	O	O
user	O	O
will	O	O
iterate	O	O
it	O	O
multiple	O	O
times	O	O
or	O	O
otherwise	O	O
keep	O	O
it	O	O
around	O	O
,	O	O
you	O	O
still	O	O
may	O	O
want	O	O
to	O	O
return	O	O
a	O	O
Stream	B-api_mention	B-api_mention
instead	O	O
,	O	O
for	O	O
the	O	O
simple	O	O
fact	O	O
that	O	O
whatever	O	O
Collection	B-api_mention	B-api_mention
you	O	O
choose	O	O
to	O	O
put	O	O
it	O	O
in	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
,	O	O
ArrayList	B-api_mention	B-api_mention
)	O	O
may	O	O
not	O	O
be	O	O
the	O	O
form	O	O
they	O	O
want	O	O
,	O	O
and	O	O
then	O	O
the	O	O
caller	O	O
has	O	O
to	O	O
copy	O	O
it	O	O
anyway	O	O
.	O	O
if	O	O
you	O	O
return	O	O
a	O	O
stream	O	O
,	O	O
they	O	O
can	O	O
do	O	O
collect	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
get	O	O
it	O	O
in	O	O
exactly	O	O
the	O	O
form	O	O
they	O	O
want	O	O
.	O	O
The	O	O
above	O	O
"	O	O
prefer	O	O
Stream	O	B-api_mention
"	O	O
cases	O	O
mostly	O	O
derive	O	O
from	O	O
the	O	O
fact	O	O
that	O	O
Stream	B-api_mention	B-api_mention
is	O	O
more	O	O
flexible	O	O
;	O	O
you	O	O
can	O	O
late	O	O
-	O	O
bind	O	O
to	O	O
how	O	O
you	O	O
use	O	O
it	O	O
without	O	O
incurring	O	O
the	O	O
costs	O	O
and	O	O
constraints	O	O
of	O	O
materializing	O	O
it	O	O
to	O	O
a	O	O
Collection	B-api_mention	B-api_mention
.	O	O
The	O	O
one	O	O
case	O	O
where	O	O
you	O	O
must	O	O
return	O	O
a	O	O
Collection	B-api_mention	B-api_mention
is	O	O
when	O	O
there	O	O
are	O	O
strong	O	O
consistency	O	O
requirements	O	O
,	O	O
and	O	O
you	O	O
have	O	O
to	O	O
produce	O	O
a	O	O
consistent	O	O
snapshot	O	O
of	O	O
a	O	O
moving	O	O
target	O	O
.	O	O
Then	O	O
,	O	O
you	O	O
will	O	O
want	O	O
put	O	O
the	O	O
elements	O	O
into	O	O
a	O	O
collection	O	O
that	O	O
will	O	O
not	O	O
change	O	O
.	O	O
So	O	O
I	O	O
would	O	O
say	O	O
that	O	O
most	O	O
of	O	O
the	O	O
time	O	O
,	O	O
Stream	B-api_mention	B-api_mention
is	O	O
the	O	O
right	O	O
answer	O	O
-	O	O
-	O	O
it	O	O
is	O	O
more	O	O
flexible	O	O
,	O	O
it	O	O
doesn	O	O
'	O	O
t	O	O
impose	O	O
usually	O	O
-	O	O
unnecessary	O	O
materialization	O	O
costs	O	O
,	O	O
and	O	O
can	O	O
be	O	O
easily	O	O
turned	O	O
into	O	O
the	O	O
Collection	B-api_mention	B-api_mention
of	O	O
your	O	O
choice	O	O
if	O	O
needed	O	O
.	O	O
But	O	O
sometimes	O	O
,	O	O
you	O	O
may	O	O
have	O	O
to	O	O
return	O	O
a	O	O
Collection	B-api_mention	B-api_mention
(	O	O
say	O	O
,	O	O
due	O	O
to	O	O
strong	O	O
consistency	O	O
requirements	O	O
)	O	O
,	O	O
or	O	O
you	O	O
may	O	O
want	O	O
to	O	O
return	O	O
Collection	B-api_mention	B-api_mention
because	O	O
you	O	O
know	O	O
how	O	O
the	O	O
user	O	O
will	O	O
be	O	O
using	O	O
it	O	O
and	O	O
know	O	O
this	O	O
is	O	O
the	O	O
most	O	O
convenient	O	O
thing	O	O
for	O	O
them	O	O
.	O	O
Question	O	O
-	O	O
21163108	O	O
,	O	O
answer	O	O
-	O	O
22269778	O	O
There	O	O
actually	O	O
is	O	O
a	O	O
trick	O	O
how	O	O
to	O	O
execute	O	O
a	O	O
parallel	O	O
operation	O	O
in	O	O
a	O	O
specific	O	O
fork	O	O
-	O	O
join	O	O
pool	O	O
.	O	O
If	O	O
you	O	O
execute	O	O
it	O	O
as	O	O
a	O	O
task	O	O
in	O	O
a	O	O
fork	O	O
-	O	O
join	O	O
pool	O	O
,	O	O
it	O	O
stays	O	O
there	O	O
and	O	O
does	O	O
not	O	O
use	O	O
the	O	O
common	O	O
one	O	O
.	O	O
#	O	O
pre	O	O
The	O	O
trick	O	O
is	O	O
based	O	O
on	O	O
ForkJoinTask	B-api_mention	O
.	I-api_mention	O
fork	I-api_mention	O
which	O	O
specifies	O	O
:	O	O
"	O	O
Arranges	O	O
to	O	O
asynchronously	O	O
execute	O	O
this	O	O
task	O	O
in	O	O
the	O	O
pool	O	O
the	O	O
current	O	O
task	O	O
is	O	O
running	O	O
in	O	O
,	O	O
if	O	O
applicable	O	O
,	O	O
or	O	O
using	O	O
the	O	O
ForkJoinPool	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
commonPool	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
if	O	O
not	O	O
inForkJoinPool	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
Question	O	O
-	O	O
22036885	O	O
,	O	O
answer	O	O
-	O	O
22037068	O	O
As	O	O
said	O	O
in	O	O
API	O	O
#	O	O
blockquote	O	O
It	O	O
'	O	O
s	O	O
because	O	O
of	O	O
cannot	O	O
represent	O	O
double	O	O
value	O	O
exactly	O	O
.	O	O
So	O	O
you	O	O
have	O	O
to	O	O
use	O	O
BigDecimal	B-api_mention	B-api_mention
bigDecimal	O	O
=	O	O
BigDecimal	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
instead	O	O
of	O	O
BigDecimal	B-api_mention	B-api_mention
bigDecimal	O	O
=	O	O
new	O	O
BigDecimal	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
23453287	O	O
One	O	O
of	O	O
the	O	O
most	O	O
useful	O	O
features	O	O
of	O	O
Java	O	O
8	O	O
are	O	O
the	O	O
new	O	O
default	O	O
methods	O	O
on	O	O
interfaces	O	O
.	O	O
There	O	O
are	O	O
essentially	O	O
two	O	O
reasons	O	O
(	O	O
there	O	O
may	O	O
be	O	O
others	O	O
)	O	O
why	O	O
they	O	O
have	O	O
been	O	O
introduced	O	O
:	O	O
#	O	O
li	O	O
Providing	O	O
actual	O	O
default	O	O
implementations	O	O
.	O	O
Example	O	O
:	O	O
Iterator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
remove	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
Allowing	O	O
for	O	O
JDK	O	O
API	O	O
evolution	O	O
.	O	O
Example	O	O
:	O	O
Iterable	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
From	O	O
an	O	O
API	O	O
designer	O	O
'	O	O
s	O	O
perspective	O	O
,	O	O
I	O	O
would	O	O
have	O	O
liked	O	O
to	O	O
be	O	O
able	O	O
to	O	O
use	O	O
other	O	O
modifiers	O	O
on	O	O
interface	O	O
methods	O	O
,	O	O
e	O	O
.	O	O
g	O	O
.	O	O
final	O	O
.	O	O
This	O	O
would	O	O
be	O	O
useful	O	O
when	O	O
adding	O	O
convenience	O	O
methods	O	O
,	O	O
preventing	O	O
"	O	O
accidental	O	O
"	O	O
overrides	O	O
in	O	O
implementing	O	O
classes	O	O
:	O	O
#	O	O
pre	O	O
The	O	O
above	O	O
is	O	O
already	O	O
common	O	O
practice	O	O
if	O	O
Sender	O	O
were	O	O
a	O	O
class	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
,	O	O
default	O	O
and	O	O
final	O	O
are	O	O
obviously	O	O
contradicting	O	O
keywords	O	O
,	O	O
but	O	O
the	O	O
default	O	O
keyword	O	O
itself	O	O
would	O	O
not	O	O
have	O	O
been	O	O
strictly	O	O
required	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
assuming	O	O
that	O	O
this	O	O
contradiction	O	O
is	O	O
deliberate	O	O
,	O	O
to	O	O
reflect	O	O
the	O	O
subtle	O	O
differences	O	O
between	O	O
"	O	O
class	O	O
methods	O	O
with	O	O
body	O	O
"	O	O
(	O	O
just	O	O
methods	O	O
)	O	O
and	O	O
"	O	O
interface	O	O
methods	O	O
with	O	O
body	O	O
"	O	O
(	O	O
default	O	O
methods	O	O
)	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
differences	O	O
which	O	O
I	O	O
have	O	O
not	O	O
yet	O	O
understood	O	O
.	O	O
At	O	O
some	O	O
point	O	O
of	O	O
time	O	O
,	O	O
support	O	O
for	O	O
modifiers	O	O
like	O	O
static	O	O
and	O	O
final	O	O
on	O	O
interface	O	O
methods	O	O
was	O	O
not	O	O
yet	O	O
fully	O	O
explored	O	O
,	O	O
citing	O	O
Brian	O	O
Goetz	O	O
:	O	O
#	O	O
blockquote	O	O
Since	O	O
that	O	O
time	O	O
in	O	O
late	O	O
2011	O	O
,	O	O
obviously	O	O
,	O	O
support	O	O
for	O	O
static	O	O
methods	O	O
in	O	O
interfaces	O	O
was	O	O
added	O	O
.	O	O
Clearly	O	O
,	O	O
this	O	O
added	O	O
a	O	O
lot	O	O
of	O	O
value	O	O
to	O	O
the	O	O
JDK	O	O
libraries	O	O
themselves	O	O
,	O	O
such	O	O
as	O	O
with	O	O
Comparator	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
comparing	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
:	O	O
What	O	O
is	O	O
the	O	O
reason	O	O
final	O	O
(	O	O
and	O	O
also	O	O
static	O	O
final	O	O
)	O	O
never	O	O
made	O	O
it	O	O
to	O	O
Java	O	O
8	O	O
interfaces	O	O
?	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
14534791	O	O
Escape	O	O
should	O	O
be	O	O
done	O	O
with	O	O
\	O	O
,	O	O
not	O	O
/	O	O
.	O	O
So	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
will	O	O
work	O	O
(	O	O
StringBuilder	B-api_mention	B-api_mention
has	O	O
overloaded	O	O
methods	O	O
for	O	O
char	O	O
and	O	O
String	B-api_mention	B-api_mention
type	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
32714194	O	O
String	B-api_mention	B-api_mention
is	O	O
a	O	O
special	O	O
case	O	O
in	O	O
Java	O	O
.	O	O
It	O	O
'	O	O
s	O	O
a	O	O
class	O	O
,	O	O
which	O	O
I	O	O
can	O	O
examine	O	O
in	O	O
the	O	O
source	O	O
code	O	O
,	O	O
but	O	O
it	O	O
also	O	O
has	O	O
its	O	O
own	O	O
infix	O	O
operator	O	O
+	O	O
,	O	O
which	O	O
seems	O	O
to	O	O
be	O	O
syntactic	O	O
sugar	O	O
for	O	O
StringBuilder	B-api_mention	B-api_mention
.	O	O
For	O	O
example	O	O
,	O	O
StringLiteral	O	O
+	O	O
yourName	O	O
;	O	O
could	O	O
become	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
There	O	O
are	O	O
no	O	O
user	O	O
-	O	O
defined	O	O
operators	O	O
in	O	O
Java	O	O
,	O	O
so	O	O
where	O	O
is	O	O
+	O	O
specified	O	O
for	O	O
String	B-api_mention	B-api_mention
?	O	O
Could	O	O
the	O	O
same	O	O
mechanism	O	O
be	O	O
used	O	O
to	O	O
make	O	O
additional	O	O
operators	O	O
,	O	O
such	O	O
as	O	O
for	O	O
vectors	O	O
?	O	O
Question	O	O
-	O	O
18723596	O	O
,	O	O
answer	O	O
-	O	O
18723651	O	O
Println	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
uses	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
pre	O	O
Print	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
does	O	O
null	O	O
check	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
16635398	O	O
,	O	O
answer	O	O
-	O	O
25855691	O	O
TL	O	O
;	O	O
DR	O	O
:	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
was	O	O
the	O	O
fastest	O	O
.	O	O
I	O	O
felt	O	O
I	O	O
should	O	O
add	O	O
my	O	O
results	O	O
from	O	O
benchmarking	O	O
iteration	O	O
.	O	O
I	O	O
took	O	O
a	O	O
very	O	O
simple	O	O
approach	O	O
(	O	O
no	O	O
benchmarking	O	O
frameworks	O	O
)	O	O
and	O	O
benchmarked	O	O
5	O	O
different	O	O
methods	O	O
:	O	O
#	O	O
li	O	O
classic	O	O
for	O	O
#	O	O
li	O	O
classic	O	O
foreach	O	O
#	O	O
li	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
forEach	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
the	O	O
testing	O	O
procedure	O	O
and	O	O
parameters	O	O
#	O	O
pre	O	O
The	O	O
list	O	O
in	O	O
this	O	O
class	O	O
shall	O	O
be	O	O
iterated	O	O
over	O	O
and	O	O
have	O	O
some	O	O
doIt	O	O
(	O	O
args	O	O
)	O	O
applied	O	O
to	O	O
all	O	O
it	O	O
'	O	O
s	O	O
members	O	O
,	O	O
each	O	O
time	O	O
via	O	O
a	O	O
different	O	O
method	O	O
.	O	O
in	O	O
the	O	O
Main	O	O
class	O	O
I	O	O
run	O	O
the	O	O
tested	O	O
method	O	O
three	O	O
times	O	O
to	O	O
warm	O	O
up	O	O
the	O	O
JVM	O	O
.	O	O
I	O	O
then	O	O
run	O	O
the	O	O
test	O	O
method	O	O
1000	O	O
times	O	O
summing	O	O
the	O	O
time	O	O
it	O	O
takes	O	O
for	O	O
each	O	O
iteration	O	O
method	O	O
(	O	O
using	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
nanoTime	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
After	O	O
that	O	O
'	O	O
s	O	O
done	O	O
i	O	O
divide	O	O
that	O	O
sum	O	O
by	O	O
1000	O	O
and	O	O
that	O	O
'	O	O
s	O	O
the	O	O
result	O	O
,	O	O
average	O	O
time	O	O
.	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
ran	O	O
this	O	O
on	O	O
a	O	O
i5	O	O
4	O	O
core	O	O
CPU	O	O
,	O	O
with	O	O
java	O	O
version	O	O
1	O	O
.	O	O
8	O	O
.	O	O
0	O	O
_	O	O
05	O	O
classic	O	O
for	O	O
#	O	O
pre	O	O
execution	O	O
time	O	O
:	O	O
4	O	O
.	O	O
21	O	O
ms	O	O
classic	O	O
foreach	O	O
#	O	O
pre	O	O
execution	O	O
time	O	O
:	O	O
5	O	O
.	O	O
95	O	O
ms	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
list	O	O
.	B-api_mention	B-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
execution	O	O
time	O	O
:	O	O
3	O	O
.	O	O
11	O	O
ms	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
list	O	O
.	B-api_mention	B-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
execution	O	O
time	O	O
:	O	O
2	O	O
.	O	O
79	O	O
ms	O	O
List	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
list	O	O
.	B-api_mention	B-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
execution	O	O
time	O	O
:	O	O
3	O	O
.	O	O
6	O	O
ms	O	O
Question	O	O
-	O	O
5071040	O	O
,	O	O
answer	O	O
-	O	O
22547954	O	O
Always	O	O
use	O	O
either	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Using	O	O
"	O	O
"	O	O
+	O	O
number	O	O
is	O	O
an	O	O
overhead	O	O
and	O	O
does	O	O
the	O	O
following	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
15430247	O	O
The	O	O
usual	O	O
constructor	O	O
of	O	O
ArrayList	B-api_mention	B-api_mention
is	O	O
:	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
there	O	O
is	O	O
also	O	O
an	O	O
overloaded	O	O
constructor	O	O
with	O	O
a	O	O
parameter	O	O
for	O	O
its	O	O
initial	O	O
capacity	O	O
:	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
list	O	O
=	O	O
new	O	O
ArrayList	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Why	O	O
is	O	O
it	O	O
useful	O	O
to	O	O
create	O	O
an	O	O
ArrayList	B-api_mention	B-api_mention
with	O	O
an	O	O
initial	O	O
capacity	O	O
when	O	O
we	O	O
can	O	O
append	O	O
to	O	O
it	O	O
as	O	O
we	O	O
please	O	O
?	O	O
Question	O	O
-	O	O
10796160	O	O
,	O	O
answer	O	O
-	O	O
10796174	O	O
You	O	O
need	O	O
test	O	O
.	O	B-api_mention
split	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
split	B-api_mention	O
uses	O	O
regular	O	O
expression	O	O
and	O	O
in	O	O
regex	O	O
|	O	O
is	O	O
metacharacter	O	O
representing	O	O
OR	O	O
operator	O	O
.	O	O
You	O	O
need	O	O
to	O	O
escape	O	O
that	O	O
character	O	O
using	O	O
\	O	O
(	O	O
written	O	O
in	O	O
String	B-api_mention	B-api_mention
as	O	O
StringLiteral	O	O
since	O	O
\	O	O
is	O	O
also	O	O
metacharacter	O	O
in	O	O
String	O	B-api_mention
literals	O	O
and	O	O
require	O	O
another	O	O
\	O	O
to	O	O
escape	O	O
it	O	O
)	O	O
.	O	O
You	O	O
can	O	O
also	O	O
use	O	O
test	O	O
.	O	B-api_mention
split	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
and	O	O
let	O	O
Pattern	B-api_mention	O
.	I-api_mention	O
quote	I-api_mention	O
create	O	O
escaped	O	O
version	O	O
of	O	O
regex	O	O
representing	O	O
|	O	O
.	O	O
Question	O	O
-	O	O
21488056	O	O
,	O	O
answer	O	O
-	O	O
30506585	O	O
Predicate	B-api_mention	O
has	O	O
methods	O	O
and	O	O
,	O	O
or	O	O
and	O	O
negate	O	O
.	O	O
However	O	O
,	O	O
String	B-api_mention	B-api_mention
:	I-api_mention	I-api_mention
:	I-api_mention	I-api_mention
isEmpty	I-api_mention	I-api_mention
is	O	O
not	O	O
a	O	O
Predicate	B-api_mention	B-api_mention
.	O	O
It	O	O
could	O	O
as	O	O
well	O	O
be	O	O
Function	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
or	O	O
MyProprietaryClass	B-api_mention	B-api_mention
.	O	O
The	O	O
type	O	O
information	O	O
is	O	O
inferred	O	O
from	O	O
the	O	O
variable	O	O
or	O	O
the	O	O
call	O	O
.	O	O
So	O	O
,	O	O
you	O	O
need	O	O
to	O	O
cast	O	O
a	O	O
method	O	O
reference	O	O
explicitly	O	O
(	O	O
as	O	O
@	O	O
axtavt	O	O
mentioned	O	O
)	O	O
:	O	O
(	O	O
(	O	O
Predicate	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
)	O	O
String	B-api_mention	O
:	I-api_mention	O
:	I-api_mention	O
isEmpty	I-api_mention	O
)	O	O
.	B-api_mention	O
negate	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
But	O	O
it	O	O
'	O	O
s	O	O
absolutely	O	O
ugly	O	O
and	O	O
Predicate	B-api_mention	O
seems	O	O
to	O	O
use	O	O
lambdas	O	O
under	O	O
the	O	O
hood	O	O
anyway	O	O
.	O	O
So	O	O
I	O	O
think	O	O
you	O	O
are	O	O
better	O	O
off	O	O
writing	O	O
a	O	O
lambda	O	O
or	O	O
even	O	O
your	O	O
own	O	O
not	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
(	O	O
e	O	O
.	O	O
g	O	O
.	O	O
in	O	O
utility	O	O
,	O	O
static	O	O
import	O	O
)	O	O
.	O	O
Question	O	O
-	O	O
28770822	O	O
I	O	O
understand	O	O
the	O	O
use	O	O
of	O	O
the	O	O
@	O	O
Native	O	O
annotation	O	O
.	O	O
#	O	O
blockquote	O	O
However	O	O
,	O	O
while	O	O
reading	O	O
the	O	O
java	O	O
source	O	O
code	O	O
I	O	O
noticed	O	O
that	O	O
in	O	O
the	O	O
class	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
the	O	O
SIZE	O	O
constant	O	O
is	O	O
@	O	O
Native	O	O
while	O	O
it	O	O
is	O	O
not	O	O
for	O	O
the	O	O
Float	B-api_mention	B-api_mention
,	O	O
Byte	B-api_mention	B-api_mention
,	O	O
Double	B-api_mention	B-api_mention
,	O	O
Short	B-api_mention	B-api_mention
and	O	O
Character	B-api_mention	B-api_mention
.	O	O
Note	O	O
that	O	O
the	O	O
SIZE	O	O
constant	O	O
represents	O	O
the	O	O
number	O	O
of	O	O
bits	O	O
used	O	O
to	O	O
represent	O	O
the	O	O
actual	O	O
value	O	O
.	O	O
#	O	O
pre	O	O
Edit	O	O
:	O	O
I	O	O
just	O	O
noticed	O	O
that	O	O
this	O	O
also	O	O
applies	O	O
for	O	O
MAX	O	B-api_mention
_	O	I-api_mention
VALUE	O	I-api_mention
and	O	O
MIN	O	B-api_mention
_	O	I-api_mention
VALUE	O	I-api_mention
of	O	O
the	O	O
same	O	O
classes	O	O
.	O	O
Edit	O	O
2	O	O
:	O	O
I	O	O
had	O	O
spare	O	O
time	O	O
to	O	O
do	O	O
some	O	O
research	O	O
on	O	O
this	O	O
,	O	O
and	O	O
looking	O	O
at	O	O
the	O	O
header	O	O
files	O	O
of	O	O
the	O	O
Long	B-api_mention	B-api_mention
,	O	O
Float	B-api_mention	B-api_mention
etc	O	O
.	O	O
classes	O	O
I	O	O
had	O	O
hope	O	O
to	O	O
figure	O	O
out	O	O
that	O	O
the	O	O
constants	O	O
were	O	O
not	O	O
present	O	O
in	O	O
the	O	O
other	O	O
headers	O	O
,	O	O
but	O	O
unfortunately	O	O
they	O	O
are	O	O
.	O	O
#	O	O
pre	O	O
Why	O	O
is	O	O
the	O	O
SIZE	O	O
constant	O	O
only	O	O
@	O	O
Native	O	O
for	O	O
Integer	B-api_mention	B-api_mention
and	O	O
Long	B-api_mention	B-api_mention
?	O	O
Question	O	O
-	O	O
14534767	O	O
,	O	O
answer	O	O
-	O	O
14534798	O	O
It	O	O
should	O	O
be	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
But	O	O
I	O	O
recommend	O	O
you	O	O
to	O	O
do	O	O
as	O	O
below	O	O
,	O	O
r	O	O
.	B-api_mention	B-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getProperty	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
gives	O	O
you	O	O
system	O	O
-	O	O
dependent	O	O
newline	O	O
in	O	O
java	O	O
.	O	O
Also	O	O
from	O	O
Java	O	O
7	O	O
there	O	O
'	O	O
s	O	O
a	O	O
method	O	O
that	O	O
returns	O	O
the	O	O
value	O	O
directly	O	O
:	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
lineSeparator	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
5243754	O	O
What	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
getAttribute	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
getParameter	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
methods	O	O
within	O	O
HttpServletRequest	B-api_mention	B-api_mention
class	O	O
?	O	O
Question	O	O
-	O	O
8172420	O	O
,	O	O
answer	O	O
-	O	O
8172439	O	O
You	O	O
can	O	O
use	O	O
Character	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
char	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Note	O	O
that	O	O
this	O	O
method	O	O
simply	O	O
returns	O	O
a	O	O
call	O	O
to	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
char	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
which	O	O
also	O	O
works	O	O
.	O	O
As	O	O
others	O	O
have	O	O
noted	O	O
,	O	O
string	O	O
concatenation	O	O
works	O	O
as	O	O
a	O	O
shortcut	O	O
as	O	O
well	O	O
:	O	O
String	B-api_mention	B-api_mention
s	O	O
=	O	O
StringLiteral	O	O
+	O	O
CharLiteral	O	O
;	O	O
But	O	O
this	O	O
compiles	O	O
down	O	O
to	O	O
:	O	O
String	B-api_mention	B-api_mention
s	O	O
=	O	O
new	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
append	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
toString	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
which	O	O
is	O	O
less	O	O
efficient	O	O
because	O	O
the	O	O
StringBuilder	B-api_mention	B-api_mention
is	O	O
backed	O	O
by	O	O
a	O	O
char	O	O
[	O	O
]	O	O
(	O	O
over	O	O
-	O	O
allocated	O	O
by	O	O
StringBuilder	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
16	O	O
)	O	O
,	O	O
only	O	O
for	O	O
that	O	O
array	O	O
to	O	O
be	O	O
defensively	O	O
copied	O	O
by	O	O
the	O	O
resulting	O	O
String	B-api_mention	B-api_mention
.	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
gets	O	O
in	O	O
the	O	O
back	O	O
door	O	O
"	O	O
by	O	O
wrapping	O	O
the	O	O
char	O	O
in	O	O
a	O	O
single	O	O
-	O	O
element	O	O
array	O	O
and	O	O
passing	O	O
it	O	O
to	O	O
the	O	O
package	O	O
private	O	O
constructor	O	O
String	B-api_mention	B-api_mention
(	I-api_mention	O
char	I-api_mention	O
[	I-api_mention	O
]	I-api_mention	O
,	I-api_mention	O
boolean	I-api_mention	O
)	I-api_mention	O
,	O	O
which	O	O
avoids	O	O
the	O	O
array	O	O
copy	O	O
.	O	O
Question	O	O
-	O	O
28818506	O	O
,	O	O
answer	O	O
-	O	O
28821352	O	O
It	O	O
'	O	O
s	O	O
not	O	O
pretty	O	O
,	O	O
but	O	O
this	O	O
will	O	O
work	O	O
:	O	O
return	O	O
serviceA	O	O
(	O	O
args	O	O
)	O	O
.	O	B-api_mention
map	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
orElseGet	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
map	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
orElseGet	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
map	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
orElseGet	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
;	O	O
.	O	B-api_mention
map	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	I-api_mention
orElseGet	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
is	O	O
a	O	O
fairly	O	O
handy	O	O
pattern	O	O
for	O	O
use	O	O
with	O	O
Optional	B-api_mention	B-api_mention
.	O	O
It	O	O
means	O	O
"	O	O
If	O	O
this	O	O
Optional	B-api_mention	B-api_mention
contains	O	O
value	O	O
v	O	O
,	O	O
give	O	O
me	O	O
func	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
,	O	O
otherwise	O	O
give	O	O
me	O	O
sup	O	B-api_mention
.	O	I-api_mention
get	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
"	O	O
.	O	O
In	O	O
this	O	O
case	O	O
,	O	O
we	O	O
call	O	O
serviceA	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
and	O	O
get	O	O
an	O	O
Optional	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
.	O	O
If	O	O
that	O	O
Optional	B-api_mention	B-api_mention
contains	O	O
value	O	O
v	O	O
,	O	O
we	O	O
want	O	O
to	O	O
get	O	O
Optional	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
of	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
if	O	O
it	O	O
is	O	O
empty	O	O
,	O	O
we	O	O
want	O	O
to	O	O
get	O	O
serviceB	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	O
Rinse	O	O
-	O	O
repeat	O	O
with	O	O
more	O	O
alternatives	O	O
.	O	O
Other	O	O
uses	O	O
of	O	O
this	O	O
pattern	O	O
are	O	O
#	O	O
li	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
li	O	O
.	B-api_mention	B-api_mention
map	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
orElseGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
Question	O	O
-	O	O
16148575	O	O
,	O	O
answer	O	O
-	O	O
16149160	O	O
HashMap	B-api_mention	B-api_mention
does	O	O
not	O	O
allow	O	O
primitive	O	O
data	O	O
types	O	O
as	O	O
arguments	O	O
.	O	O
It	O	O
can	O	O
only	O	O
accept	O	O
objects	O	O
so	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
will	O	O
not	O	O
work	O	O
.	O	O
You	O	O
have	O	O
to	O	O
change	O	O
the	O	O
declaration	O	O
to	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
myMap	O	O
=	O	O
new	O	O
HashMap	B-api_mention	B-api_mention
<	I-api_mention	I-api_mention
T	I-api_mention	I-api_mention
>	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
so	O	O
even	O	O
when	O	O
you	O	O
do	O	O
the	O	O
following	O	O
myMap	O	B-api_mention
.	O	I-api_mention
put	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
primitive	O	O
data	O	O
type	O	O
is	O	O
autoboxed	O	O
to	O	O
an	O	O
Integer	O	B-api_mention
object	O	O
.	O	O
8	O	O
(	O	O
args	O	O
)	O	O
=	O	O
=	O	O
=	O	O
boxing	O	O
=	O	O
=	O	O
=	O	O
>	O	O
8	O	O
(	O	O
args	O	O
)	O	O
You	O	O
can	O	O
read	O	O
more	O	O
on	O	O
autoboxing	O	O
here	O	O
#	O	O
a	O	O
Question	O	O
-	O	O
27949213	O	O
,	O	O
answer	O	O
-	O	O
27949367	O	O
The	O	O
strategy	O	O
they	O	O
describe	O	O
is	O	O
to	O	O
simply	O	O
reuse	O	O
the	O	O
internal	O	O
character	O	O
array	O	O
of	O	O
one	O	O
String	B-api_mention	B-api_mention
in	O	O
possibly	O	O
many	O	O
equal	O	O
Strings	O	O
.	O	O
There	O	O
'	O	O
s	O	O
no	O	O
need	O	O
for	O	O
each	O	O
String	B-api_mention	B-api_mention
to	O	O
have	O	O
its	O	O
own	O	O
copy	O	O
if	O	O
they	O	O
are	O	O
equal	O	O
.	O	O
In	O	O
order	O	O
to	O	O
more	O	O
quickly	O	O
determine	O	O
if	O	O
2	O	O
strings	O	O
are	O	O
equal	O	O
,	O	O
the	O	O
hash	O	O
code	O	O
is	O	O
used	O	O
as	O	O
a	O	O
first	O	O
step	O	O
,	O	O
as	O	O
it	O	O
is	O	O
a	O	O
fast	O	O
way	O	O
to	O	O
determine	O	O
if	O	O
Strings	O	O
may	O	O
be	O	O
equal	O	O
.	O	O
Hence	O	O
their	O	O
statement	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
is	O	O
to	O	O
make	O	O
a	O	O
certain	O	O
(	O	O
but	O	O
slower	O	O
)	O	O
comparison	O	O
for	O	O
equality	O	O
once	O	O
possible	O	O
equality	O	O
has	O	O
been	O	O
determined	O	O
using	O	O
the	O	O
hash	O	O
code	O	O
.	O	O
In	O	O
the	O	O
end	O	O
,	O	O
equal	O	O
Strings	O	O
will	O	O
share	O	O
a	O	O
single	O	O
underlying	O	O
char	O	O
array	O	O
.	O	O
Java	O	O
has	O	O
had	O	O
String	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
intern	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
a	O	O
long	O	O
time	O	O
,	O	O
to	O	O
do	O	O
more	O	O
or	O	O
less	O	O
the	O	O
same	O	O
(	O	O
i	O	O
.	O	O
e	O	O
.	O	O
save	O	O
memory	O	O
by	O	O
deduplicating	O	O
equal	O	O
Strings	O	O
)	O	O
.	O	O
What	O	O
'	O	O
s	O	O
novel	O	O
about	O	O
this	O	O
is	O	O
that	O	O
it	O	O
happens	O	O
during	O	O
garbage	O	O
collection	O	O
time	O	O
and	O	O
can	O	O
be	O	O
externally	O	O
controlled	O	O
.	O	O
Question	O	O
-	O	O
5374311	O	O
,	O	O
answer	O	O
-	O	O
17909134	O	O
I	O	O
can	O	O
see	O	O
many	O	O
answers	O	O
showing	O	O
how	O	O
to	O	O
solve	O	O
problem	O	O
,	O	O
but	O	O
only	O	O
Stephen	O	O
'	O	O
s	O	O
answer	O	O
is	O	O
trying	O	O
to	O	O
explain	O	O
why	O	O
problem	O	O
occurs	O	O
so	O	O
I	O	O
will	O	O
try	O	O
to	O	O
add	O	O
something	O	O
more	O	O
on	O	O
this	O	O
subject	O	O
.	O	O
It	O	O
is	O	O
a	O	O
story	O	O
about	O	O
possible	O	O
reasons	O	O
why	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
toArray	B-api_mention	B-api_mention
wasn	O	O
'	O	O
t	O	O
changed	O	O
to	O	O
T	O	O
[	O	O
]	O	O
toArray	B-api_mention	B-api_mention
where	O	O
generics	O	O
ware	O	O
introduced	O	O
to	O	O
Java	O	O
.	O	O
Why	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
stockArr	O	O
=	O	O
(	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
stock	O	O
_	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
wont	O	O
work	O	O
?	O	O
In	O	O
Java	O	O
,	O	O
generic	O	O
type	O	O
exists	O	O
at	O	O
compile	O	O
-	O	O
time	O	O
only	O	O
.	O	O
At	O	O
runtime	O	O
information	O	O
about	O	O
generic	O	O
type	O	O
(	O	O
like	O	O
in	O	O
your	O	O
case	O	O
<	O	O
String	B-api_mention	O
>	O	O
)	O	O
is	O	O
removed	O	O
and	O	O
replaced	O	O
with	O	O
Object	B-api_mention	B-api_mention
type	O	O
(	O	O
take	O	O
a	O	O
look	O	O
at	O	O
type	O	O
erasure	O	O
)	O	O
.	O	O
That	O	O
is	O	O
why	O	O
at	O	O
runtime	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
have	O	O
no	O	O
idea	O	O
about	O	O
what	O	O
precise	O	O
type	O	O
to	O	O
use	O	O
to	O	O
create	O	O
new	O	O
array	O	O
,	O	O
so	O	O
it	O	O
uses	O	O
Object	B-api_mention	B-api_mention
as	O	O
safest	O	O
type	O	O
,	O	O
because	O	O
each	O	O
class	O	O
extends	O	O
Object	B-api_mention	B-api_mention
so	O	O
it	O	O
can	O	O
safely	O	O
store	O	O
instance	O	O
of	O	O
any	O	O
class	O	O
.	O	O
Now	O	O
the	O	O
problem	O	O
is	O	O
that	O	O
you	O	O
can	O	O
'	O	O
t	O	O
cast	O	O
instance	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
to	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
.	O	O
Why	O	O
?	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
example	O	O
(	O	O
lets	O	O
assume	O	O
that	O	O
class	O	O
B	O	O
extends	O	O
A	O	O
)	O	O
:	O	O
#	O	O
pre	O	O
Although	O	O
such	O	O
code	O	O
will	O	O
compile	O	O
,	O	O
at	O	O
runtime	O	O
we	O	O
will	O	O
see	O	O
thrown	O	O
ClassCastException	B-api_mention	B-api_mention
because	O	O
instance	O	O
held	O	O
by	O	O
reference	O	O
a	O	O
is	O	O
not	O	O
actually	O	O
of	O	O
type	O	O
B	O	O
(	O	O
or	O	O
its	O	O
subtypes	O	O
)	O	O
.	O	O
Why	O	O
is	O	O
this	O	O
problem	O	O
(	O	O
why	O	O
this	O	O
exception	O	O
needs	O	O
to	O	O
be	O	O
cast	O	O
)	O	O
?	O	O
One	O	O
of	O	O
the	O	O
reasons	O	O
is	O	O
that	O	O
B	O	O
could	O	O
have	O	O
new	O	O
methods	O	O
/	O	O
fields	O	O
which	O	O
A	O	O
doesn	O	O
'	O	O
t	O	O
,	O	O
so	O	O
it	O	O
is	O	O
possible	O	O
that	O	O
someone	O	O
will	O	O
try	O	O
to	O	O
use	O	O
these	O	O
new	O	O
members	O	O
via	O	O
b	O	O
reference	O	O
even	O	O
if	O	O
held	O	O
instance	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
(	O	O
doesn	O	O
'	O	O
t	O	O
support	O	O
)	O	O
them	O	O
.	O	O
In	O	O
other	O	O
words	O	O
we	O	O
could	O	O
end	O	O
up	O	O
trying	O	O
to	O	O
use	O	O
data	O	O
which	O	O
doesn	O	O
'	O	O
t	O	O
exist	O	O
,	O	O
which	O	O
could	O	O
lead	O	O
to	O	O
many	O	O
problems	O	O
.	O	O
So	O	O
to	O	O
prevent	O	O
such	O	O
situation	O	O
JVM	O	O
throws	O	O
exception	O	O
,	O	O
and	O	O
stop	O	O
further	O	O
potentially	O	O
dangerous	O	O
code	O	O
.	O	O
You	O	O
could	O	O
ask	O	O
now	O	O
"	O	O
So	O	O
why	O	O
aren	O	O
'	O	O
t	O	O
we	O	O
stopped	O	O
even	O	O
earlier	O	O
?	O	O
Why	O	O
code	O	O
involving	O	O
such	O	O
casting	O	O
is	O	O
even	O	O
compilable	O	O
?	O	O
Shouldn	O	O
'	O	O
t	O	O
compiler	O	O
stop	O	O
it	O	O
?	O	O
"	O	O
.	O	O
Answer	O	O
is	O	O
:	O	O
no	O	O
because	O	O
compiler	O	O
can	O	O
'	O	O
t	O	O
know	O	O
for	O	O
sure	O	O
what	O	O
is	O	O
the	O	O
actual	O	O
type	O	O
of	O	O
instance	O	O
held	O	O
by	O	O
a	O	O
reference	O	O
,	O	O
and	O	O
there	O	O
is	O	O
a	O	O
chance	O	O
that	O	O
it	O	O
will	O	O
hold	O	O
instance	O	O
of	O	O
class	O	O
B	O	O
which	O	O
will	O	O
support	O	O
interface	O	O
of	O	O
b	O	O
reference	O	O
.	O	O
Take	O	O
a	O	O
look	O	O
at	O	O
this	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
lets	O	O
go	O	O
back	O	O
to	O	O
your	O	O
arrays	O	O
.	O	O
As	O	O
you	O	O
see	O	O
in	O	O
question	O	O
,	O	O
we	O	O
can	O	O
'	O	O
t	O	O
cast	O	O
instance	O	O
of	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
array	O	O
to	O	O
more	O	O
precise	O	O
type	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
like	O	O
#	O	O
pre	O	O
Here	O	O
problem	O	O
is	O	O
a	O	O
little	O	O
different	O	O
.	O	O
Now	O	O
we	O	O
are	O	O
sure	O	O
that	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
array	O	O
will	O	O
not	O	O
have	O	O
additional	O	O
fields	O	O
or	O	O
methods	O	O
because	O	O
every	O	O
array	O	O
support	O	O
only	O	O
:	O	O
#	O	O
li	O	O
[	O	O
]	O	O
operator	O	O
,	O	O
#	O	O
li	O	O
length	O	O
filed	O	O
,	O	O
#	O	O
li	O	O
methods	O	O
inherited	O	O
from	O	O
Object	B-api_mention	B-api_mention
supertype	O	O
,	O	O
So	O	O
it	O	O
is	O	O
not	O	O
arrays	O	O
interface	O	O
which	O	O
is	O	O
making	O	O
it	O	O
impossible	O	O
.	O	O
Problem	O	O
is	O	O
that	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
array	O	O
beside	O	O
Strings	O	O
can	O	O
store	O	O
any	O	O
objects	O	O
(	O	O
for	O	O
instance	O	O
Integers	O	O
)	O	O
so	O	O
it	O	O
is	O	O
possible	O	O
that	O	O
one	O	O
beautiful	O	O
day	O	O
we	O	O
will	O	O
end	O	O
up	O	O
with	O	O
trying	O	O
to	O	O
invoke	O	O
method	O	O
like	O	O
strArray	O	O
[	O	O
i	O	O
]	O	O
.	B-api_mention	B-api_mention
substring	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
instance	O	O
of	O	O
Integer	O	B-api_mention
which	O	O
doesn	O	O
'	O	O
t	O	O
have	O	O
such	O	O
method	O	O
.	O	O
So	O	O
to	O	O
make	O	O
sure	O	O
that	O	O
this	O	O
situation	O	O
will	O	O
never	O	O
happen	O	O
,	O	O
in	O	O
Java	O	O
array	O	O
references	O	O
can	O	O
hold	O	O
only	O	O
#	O	O
li	O	O
instances	O	O
of	O	O
array	O	O
of	O	O
same	O	O
type	O	O
as	O	O
reference	O	O
(	O	O
reference	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
strArr	O	O
can	O	O
hold	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
#	O	O
li	O	O
instances	O	O
of	O	O
array	O	O
of	O	O
subtype	O	O
(	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
can	O	O
hold	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
because	O	O
String	B-api_mention	B-api_mention
is	O	O
subtype	O	O
of	O	O
Object	B-api_mention	B-api_mention
)	O	O
,	O	O
but	O	O
can	O	O
'	O	O
t	O	O
hold	O	O
#	O	O
li	O	O
array	O	O
of	O	O
supertype	O	O
of	O	O
type	O	O
of	O	O
array	O	O
from	O	O
reference	O	O
(	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
can	O	O
'	O	O
t	O	O
hold	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
#	O	O
li	O	O
array	O	O
of	O	O
type	O	O
which	O	O
is	O	O
not	O	O
related	O	O
to	O	O
type	O	O
from	O	O
reference	O	O
(	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
can	O	O
'	O	O
t	O	O
hold	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
)	O	O
In	O	O
other	O	O
words	O	O
something	O	O
like	O	O
this	O	O
is	O	O
OK	O	O
#	O	O
pre	O	O
You	O	O
could	O	O
say	O	O
that	O	O
one	O	O
way	O	O
to	O	O
resolve	O	O
this	O	O
problem	O	O
is	O	O
to	O	O
find	O	O
at	O	O
runtime	O	O
most	O	O
common	O	O
type	O	O
between	O	O
all	O	O
list	O	O
elements	O	O
and	O	O
create	O	O
array	O	O
of	O	O
that	O	O
type	O	O
,	O	O
but	O	O
this	O	O
wont	O	O
work	O	O
in	O	O
situations	O	O
where	O	O
all	O	O
elements	O	O
of	O	O
list	O	O
will	O	O
be	O	O
of	O	O
one	O	O
type	O	O
derived	O	O
from	O	O
generic	O	O
one	O	O
.	O	O
Take	O	O
a	O	O
look	O	O
#	O	O
pre	O	O
now	O	O
most	O	O
common	O	O
type	O	O
is	O	O
B	O	O
,	O	O
not	O	O
A	O	O
so	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
A	O	O
[	O	O
]	O	O
arr	O	O
=	O	O
elements	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
would	O	O
return	O	O
array	O	O
of	O	O
B	O	O
class	O	O
new	O	O
B	O	O
[	O	O
]	O	O
.	O	O
Problem	O	O
with	O	O
this	O	O
array	O	O
is	O	O
that	O	O
while	O	O
compiler	O	O
would	O	O
allow	O	O
you	O	O
to	O	O
edit	O	O
its	O	O
content	O	O
by	O	O
adding	O	O
new	O	O
A	O	O
(	O	O
args	O	O
)	O	O
element	O	O
to	O	O
it	O	O
,	O	O
you	O	O
would	O	O
get	O	O
ArrayStoreException	B-api_mention	B-api_mention
because	O	O
B	O	O
[	O	O
]	O	O
array	O	O
can	O	O
hold	O	O
only	O	O
elements	O	O
of	O	O
class	O	O
B	O	O
or	O	O
its	O	O
subclass	O	O
,	O	O
to	O	O
make	O	O
sure	O	O
that	O	O
all	O	O
elements	O	O
will	O	O
support	O	O
interface	O	O
of	O	O
B	O	O
,	O	O
but	O	O
instance	O	O
of	O	O
A	O	O
may	O	O
not	O	O
have	O	O
all	O	O
methods	O	O
/	O	O
fields	O	O
of	O	O
B	O	O
.	O	O
So	O	O
this	O	O
solution	O	O
is	O	O
not	O	O
perfect	O	O
.	O	O
Best	O	O
solution	O	O
to	O	O
this	O	O
problem	O	O
is	O	O
explicitly	O	O
tell	O	O
what	O	O
type	O	O
of	O	O
array	O	O
toArray	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
should	O	O
be	O	O
returned	O	O
by	O	O
passing	O	O
this	O	O
type	O	O
as	O	O
method	O	O
argument	O	O
like	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
arr	O	O
=	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
or	O	O
String	B-api_mention	B-api_mention
[	O	O
]	O	O
arr	O	O
=	O	O
list	O	O
.	B-api_mention	B-api_mention
toArray	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
/	O	O
/	O	O
if	O	O
size	O	O
of	O	O
array	O	O
is	O	O
smaller	O	O
then	O	O
list	O	O
it	O	O
will	O	O
be	O	O
automatically	O	O
adjusted	O	O
.	O	O
Question	O	O
-	O	O
18410035	O	O
,	O	O
answer	O	O
-	O	O
37409771	O	O
In	O	O
Java	O	O
8	O	O
collection	O	O
classes	O	O
that	O	O
implement	O	O
Iterable	B-api_mention	B-api_mention
(	O	O
for	O	O
example	O	O
all	O	O
lists	O	O
)	O	O
now	O	O
have	O	O
forEach	B-api_mention	B-api_mention
method	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
above	O	O
example	O	O
makes	O	O
use	O	O
of	O	O
method	O	O
-	O	O
reference	O	O
introduced	O	O
in	O	O
Java	O	O
8	O	O
.	O	O
We	O	O
can	O	O
also	O	O
iterate	O	O
over	O	O
a	O	O
list	O	O
using	O	O
Stream	B-api_mention	B-api_mention
as	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
stream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
The	O	O
advantage	O	O
with	O	O
later	O	O
option	O	O
is	O	O
that	O	O
we	O	O
can	O	O
also	O	O
make	O	O
use	O	O
of	O	O
parallel	O	O
streams	O	O
wherever	O	O
appropriate	O	O
.	O	O
If	O	O
the	O	O
objective	O	O
is	O	O
only	O	O
to	O	O
print	O	O
the	O	O
items	O	O
irrespective	O	O
of	O	O
the	O	O
order	O	O
then	O	O
we	O	O
can	O	O
use	O	O
parallel	O	O
stream	O	O
as	O	O
:	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
asList	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
forEach	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
29494800	O	O
,	O	O
answer	O	O
-	O	O
29500496	O	O
First	O	O
of	O	O
all	O	O
,	O	O
the	O	O
cast	O	O
in	O	O
that	O	O
line	O	O
(	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
newType	O	O
=	O	O
=	O	O
(	O	O
Object	B-api_mention	B-api_mention
)	O	O
Object	B-api_mention	B-api_mention
[	O	O
]	O	O
.	B-api_mention	O
class	I-api_mention	O
)	O	O
are	O	O
absobuletly	O	O
needed	O	O
.	O	O
Removing	O	O
them	O	O
will	O	O
result	O	O
in	O	O
a	O	O
compilation	O	O
error	O	O
:	O	O
#	O	O
pre	O	O
Now	O	O
to	O	O
answer	O	O
your	O	O
question	O	O
What	O	O
is	O	O
this	O	O
line	O	O
checking	O	O
?	O	O
It	O	O
simply	O	O
verify	O	O
if	O	O
the	O	O
given	O	O
array	O	O
is	O	O
of	O	O
object	O	O
type	O	O
,	O	O
which	O	O
is	O	O
part	O	O
of	O	O
the	O	O
answer	O	O
for	O	O
your	O	O
other	O	O
question	O	O
Why	O	O
Array	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
newInstance	I-api_mention	I-api_mention
not	O	O
good	O	O
enough	O	O
for	O	O
both	O	O
cases	O	O
?	O	O
In	O	O
the	O	O
first	O	O
case	O	O
,	O	O
we	O	O
already	O	O
know	O	O
that	O	O
the	O	O
array	O	O
is	O	O
of	O	O
Object	B-api_mention	B-api_mention
type	O	O
so	O	O
there	O	O
is	O	O
no	O	O
point	O	O
in	O	O
calling	O	O
the	O	O
newInstance	O	O
method	O	O
to	O	O
retrieve	O	O
the	O	O
correct	O	O
type	O	O
,	O	O
this	O	O
would	O	O
only	O	O
result	O	O
in	O	O
performance	O	O
loss	O	O
.	O	O
As	O	O
for	O	O
your	O	O
final	O	O
example	O	O
,	O	O
Integer	B-api_mention	B-api_mention
[	O	O
]	O	O
nums	O	O
=	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
copyOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
That	O	O
it	O	O
does	O	O
compile	O	O
,	O	O
it	O	O
is	O	O
true	O	O
.	O	O
Because	O	O
the	O	O
given	O	O
arguments	O	O
to	O	O
the	O	O
method	O	O
are	O	O
all	O	O
valids	O	O
.	O	O
It	O	O
will	O	O
certainly	O	O
fail	O	O
at	O	O
runtime	O	O
;	O	O
what	O	O
would	O	O
be	O	O
the	O	O
expected	O	O
output	O	O
of	O	O
converting	O	O
"	O	O
a	O	O
"	O	O
to	O	O
Integer	B-api_mention	B-api_mention
type	O	O
?	O	O
Now	O	O
,	O	O
when	O	O
to	O	O
use	O	O
copyOf	B-api_mention	B-api_mention
?	O	O
When	O	O
you	O	O
already	O	O
know	O	O
the	O	O
both	O	O
types	O	O
,	O	O
and	O	O
already	O	O
know	O	O
that	O	O
they	O	O
are	O	O
valid	O	O
together	O	O
.	O	O
It	O	O
main	O	O
usage	O	O
is	O	O
to	O	O
return	O	O
a	O	O
copy	O	O
but	O	O
truncated	O	O
or	O	O
padded	O	O
with	O	O
[	O	O
null	O	O
/	O	O
default	O	O
values	O	O
]	O	O
to	O	O
the	O	O
original	O	O
array	O	O
.	O	O
Question	O	O
-	O	O
20877086	O	O
,	O	O
answer	O	O
-	O	O
20877161	O	O
Integer	B-api_mention	B-api_mention
objects	O	O
caches	O	O
between	O	O
-	O	O
128	O	O
and	O	O
127	O	O
of	O	O
256	O	O
Integer	B-api_mention	B-api_mention
You	O	O
should	O	O
not	O	O
compare	O	O
object	O	O
references	O	O
with	O	O
=	O	O
=	O	O
or	O	O
!	O	O
=	O	O
.	O	O
You	O	O
should	O	O
use	O	O
.	O	B-api_mention
equals	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
instead	O	O
,	O	O
or	O	O
better	O	O
-	O	O
use	O	O
the	O	O
primitive	O	O
int	O	O
rather	O	O
than	O	O
Integer	B-api_mention	B-api_mention
.	O	I-api_mention
parseInt	B-api_mention	I-api_mention
:	O	O
Parses	O	O
the	O	O
string	O	O
argument	O	O
as	O	O
a	O	O
signed	O	O
decimal	O	O
integer	O	O
.	O	O
The	O	O
characters	O	O
in	O	O
the	O	O
string	O	O
must	O	O
all	O	O
be	O	O
decimal	O	O
digits	O	O
,	O	O
except	O	O
that	O	O
the	O	O
first	O	O
character	O	O
may	O	O
be	O	O
an	O	O
ASCII	O	O
minus	O	O
sign	O	O
'	O	O
-	O	O
'	O	O
(	O	O
'	O	O
\	O	O
u002D	O	O
'	O	O
)	O	O
to	O	O
indicate	O	O
a	O	O
negative	O	O
value	O	O
.	O	O
The	O	O
resulting	O	O
integer	O	O
value	O	O
is	O	O
returned	O	O
,	O	O
exactly	O	O
as	O	O
if	O	O
the	O	O
argument	O	O
and	O	O
the	O	O
radix	O	O
10	O	O
were	O	O
given	O	O
as	O	O
arguments	O	O
to	O	O
the	O	O
parseInt	B-api_mention	B-api_mention
(	O	I-api_mention
java	B-api_mention	I-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
,	O	I-api_mention
int	O	I-api_mention
)	O	I-api_mention
method	O	O
.	O	O
valueOf	B-api_mention	O
Returns	O	O
an	O	O
Integer	B-api_mention	B-api_mention
object	O	O
holding	O	O
the	O	O
value	O	O
extracted	O	O
from	O	O
the	O	O
specified	O	O
String	B-api_mention	B-api_mention
when	O	O
parsed	O	O
with	O	O
the	O	O
radix	O	O
given	O	O
by	O	O
the	O	O
second	O	O
argument	O	O
.	O	O
The	O	O
first	O	O
argument	O	O
is	O	O
interpreted	O	O
as	O	O
representing	O	O
a	O	O
signed	O	O
integer	O	O
in	O	O
the	O	O
radix	O	O
specified	O	O
by	O	O
the	O	O
second	O	O
argument	O	O
,	O	O
exactly	O	O
as	O	O
if	O	O
the	O	O
arguments	O	O
were	O	O
given	O	O
to	O	O
the	O	O
parseInt	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
java	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
lang	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
String	I-api_mention	I-api_mention
,	I-api_mention	I-api_mention
int	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
.	O	O
The	O	O
result	O	O
is	O	O
an	O	O
Integer	B-api_mention	B-api_mention
object	O	O
that	O	O
represents	O	O
the	O	O
integer	O	O
value	O	O
specified	O	O
by	O	O
the	O	O
string	O	O
.	O	O
equivalent	O	O
to	O	O
new	O	O
Integer	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
radix	O	O
-	O	O
the	O	O
radix	O	O
to	O	O
be	O	O
used	O	O
in	O	O
interpreting	O	O
s	O	O
so	O	O
if	O	O
you	O	O
equal	O	O
Integer	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
valueOf	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
for	O	O
the	O	O
integer	O	O
inbetween	O	O
-	O	O
128	O	O
to	O	O
127	O	O
it	O	O
returns	O	O
true	O	O
in	O	O
your	O	O
condition	O	O
for	O	O
lesser	O	O
than	O	O
-	O	O
128	O	O
and	O	O
greater	O	O
than	O	O
127	O	O
it	O	O
gives	O	O
false	O	O
Question	O	O
-	O	O
19235606	O	O
I	O	O
am	O	O
having	O	O
trouble	O	O
understanding	O	O
the	O	O
Stream	B-api_mention	B-api_mention
interface	O	O
in	O	O
Java	O	O
8	O	O
,	O	O
especially	O	O
where	O	O
it	O	O
has	O	O
to	O	O
do	O	O
with	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
Collector	B-api_mention	B-api_mention
interfaces	O	O
.	O	O
My	O	O
problem	O	O
is	O	O
that	O	O
I	O	O
simply	O	O
can	O	O
'	O	O
t	O	O
understand	O	O
yet	O	O
the	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
the	O	O
Collector	B-api_mention	B-api_mention
interfaces	O	O
,	O	O
and	O	O
as	O	O
a	O	O
result	O	O
the	O	O
Stream	B-api_mention	B-api_mention
interface	O	O
is	O	O
still	O	O
somewhat	O	O
obscure	O	O
to	O	O
me	O	O
.	O	O
What	O	O
exactly	O	O
is	O	O
a	O	O
Spliterator	B-api_mention	B-api_mention
and	O	O
a	O	O
Collector	B-api_mention	B-api_mention
,	O	O
and	O	O
how	O	O
can	O	O
I	O	O
use	O	O
them	O	O
?	O	O
If	O	O
I	O	O
am	O	O
willing	O	O
to	O	O
write	O	O
my	O	O
own	O	O
Spliterator	B-api_mention	B-api_mention
or	O	O
Collector	B-api_mention	B-api_mention
(	O	O
and	O	O
probably	O	O
my	O	O
own	O	O
Stream	B-api_mention	B-api_mention
in	O	O
that	O	O
process	O	O
)	O	O
,	O	O
what	O	O
should	O	O
I	O	O
do	O	O
and	O	O
not	O	O
do	O	O
?	O	O
I	O	O
read	O	O
some	O	O
examples	O	O
scattered	O	O
around	O	O
the	O	O
web	O	O
,	O	O
but	O	O
since	O	O
everything	O	O
here	O	O
is	O	O
stil	O	O
new	O	O
and	O	O
subject	O	O
to	O	O
changes	O	O
,	O	O
examples	O	O
and	O	O
tutorials	O	O
are	O	O
still	O	O
very	O	O
sparse	O	O
.	O	O
Question	O	O
-	O	O
15336477	O	O
All	O	O
I	O	O
'	O	O
m	O	O
trying	O	O
to	O	O
do	O	O
is	O	O
download	O	O
some	O	O
JSON	O	O
and	O	O
deserialize	O	O
it	O	O
into	O	O
an	O	O
object	O	O
.	O	O
I	O	O
haven	O	O
'	O	O
t	O	O
got	O	O
as	O	O
far	O	O
as	O	O
downloading	O	O
the	O	O
JSON	O	O
yet	O	O
.	O	O
Almost	O	O
every	O	O
single	O	O
HttpClient	B-api_mention	O
example	O	O
I	O	O
can	O	O
find	O	O
,	O	O
including	O	O
those	O	O
on	O	O
the	O	O
apache	O	O
site	O	O
looks	O	O
something	O	O
like	O	O
.	O	O
.	O	O
.	O	O
#	O	O
pre	O	O
However	O	O
,	O	O
Netbeans	O	O
tells	O	O
me	O	O
that	O	O
DefaultHttpClient	B-api_mention	B-api_mention
is	O	O
deprecated	O	O
.	O	O
I	O	O
'	O	O
ve	O	O
tried	O	O
googling	O	O
for	O	O
DefaultHttpClient	B-api_mention	B-api_mention
deprecated	O	O
and	O	O
as	O	O
many	O	O
other	O	O
variations	O	O
as	O	O
I	O	O
can	O	O
think	O	O
of	O	O
and	O	O
can	O	O
'	O	O
t	O	O
find	O	O
any	O	O
useful	O	O
results	O	O
,	O	O
so	O	O
I	O	O
'	O	O
m	O	O
obviously	O	O
missing	O	O
something	O	O
.	O	O
What	O	O
is	O	O
the	O	O
correct	O	O
Java7	O	O
way	O	O
to	O	O
download	O	O
the	O	O
contents	O	O
of	O	O
a	O	O
webpage	O	O
?	O	O
Is	O	O
there	O	O
really	O	O
no	O	O
decent	O	O
Http	O	O
Client	O	O
as	O	O
part	O	O
of	O	O
the	O	O
language	O	O
?	O	O
I	O	O
find	O	O
that	O	O
hard	O	O
to	O	O
believe	O	O
.	O	O
My	O	O
Maven	O	O
dependency	O	O
for	O	O
this	O	O
is	O	O
.	O	O
.	O	O
.	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
28459498	O	O
,	O	O
answer	O	O
-	O	O
28459604	O	O
Background	O	O
While	O	O
the	O	O
question	O	O
appears	O	O
simple	O	O
,	O	O
the	O	O
actual	O	O
answer	O	O
requires	O	O
some	O	O
background	O	O
to	O	O
make	O	O
sense	O	O
.	O	O
If	O	O
you	O	O
want	O	O
to	O	O
skip	O	O
to	O	O
the	O	O
conclusion	O	O
,	O	O
scroll	O	O
down	O	O
.	O	O
.	O	O
.	O	O
Pick	O	O
your	O	O
comparison	O	O
point	O	O
-	O	O
Basic	O	O
functionality	O	O
Using	O	O
basic	O	O
concepts	O	O
,	O	O
C	O	O
#	O	O
'	O	O
s	O	O
IEnumerable	O	O
concept	O	O
is	O	O
more	O	O
closely	O	O
related	O	O
to	O	O
Java	O	O
'	O	O
s	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
which	O	O
is	O	O
able	O	O
to	O	O
create	O	O
as	O	O
many	O	O
Iterators	O	O
as	O	O
you	O	O
want	O	O
.	O	O
IEnumerables	O	O
create	O	O
IEnumerators	O	O
.	O	O
Java	O	O
'	O	O
s	O	O
Iterable	B-api_mention	B-api_mention
create	O	O
Iterators	O	O
The	O	O
history	O	O
of	O	O
each	O	O
concept	O	O
is	O	O
similar	O	O
,	O	O
in	O	O
that	O	O
both	O	O
IEnumerable	O	O
and	O	O
Iterable	B-api_mention	B-api_mention
have	O	O
a	O	O
basic	O	O
motivation	O	O
to	O	O
allow	O	O
'	O	O
for	O	O
-	O	O
each	O	O
'	O	O
style	O	O
looping	O	O
over	O	O
the	O	O
members	O	O
of	O	O
data	O	O
collections	O	O
.	O	O
That	O	O
'	O	O
s	O	O
an	O	O
oversimplification	O	O
as	O	O
they	O	O
both	O	O
allow	O	O
more	O	O
than	O	O
just	O	O
that	O	O
,	O	O
and	O	O
they	O	O
also	O	O
arrived	O	O
at	O	O
that	O	O
stage	O	O
via	O	O
different	O	O
progressions	O	O
,	O	O
but	O	O
it	O	O
is	O	O
a	O	O
significant	O	O
common	O	O
feature	O	O
regardless	O	O
.	O	O
Let	O	O
'	O	O
s	O	O
compare	O	O
that	O	O
feature	O	O
:	O	O
in	O	O
both	O	O
languages	O	O
,	O	O
if	O	O
a	O	O
class	O	O
implements	O	O
the	O	O
IEnumerable	O	O
/	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
then	O	O
that	O	O
class	O	O
must	O	O
implement	O	O
at	O	O
least	O	O
a	O	O
single	O	O
method	O	O
(	O	O
for	O	O
C	O	O
#	O	O
,	O	O
it	O	O
'	O	O
s	O	O
GetEnumerator	O	O
and	O	O
for	O	O
Java	O	O
it	O	O
'	O	O
s	O	O
iterator	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
)	O	O
.	O	O
In	O	O
each	O	O
case	O	O
,	O	O
the	O	O
instance	O	O
returned	O	O
from	O	O
that	O	O
(	O	O
IEnumerator	O	O
/	O	O
Iterator	B-api_mention	B-api_mention
)	O	O
allows	O	O
you	O	O
to	O	O
access	O	O
the	O	O
current	O	O
and	O	O
subsequent	O	O
members	O	O
of	O	O
the	O	O
data	O	O
.	O	O
This	O	O
feature	O	O
is	O	O
used	O	O
in	O	O
the	O	O
for	O	O
-	O	O
each	O	O
language	O	O
syntax	O	O
.	O	O
Pick	O	O
your	O	O
comparison	O	O
point	O	O
-	O	O
Enhanced	O	O
functionality	O	O
IEnumerable	O	O
in	O	O
C	O	O
#	O	O
has	O	O
been	O	O
extended	O	O
to	O	O
allow	O	O
a	O	O
number	O	O
of	O	O
other	O	O
language	O	O
features	O	O
(	O	O
mostly	O	O
related	O	O
to	O	O
Linq	O	O
)	O	O
.	O	O
Features	O	O
added	O	O
include	O	O
selections	O	O
,	O	O
projections	O	O
,	O	O
aggregations	O	O
,	O	O
etc	O	O
.	O	O
These	O	O
extensions	O	O
have	O	O
a	O	O
strong	O	O
motivation	O	O
from	O	O
use	O	O
in	O	O
set	O	O
-	O	O
theory	O	O
,	O	O
similar	O	O
to	O	O
SQL	O	O
and	O	O
Relational	O	O
Database	O	O
concepts	O	O
.	O	O
Java	O	O
8	O	O
has	O	O
also	O	O
had	O	O
functionality	O	O
added	O	O
to	O	O
enable	O	O
a	O	O
degree	O	O
of	O	O
functional	O	O
programming	O	O
using	O	O
Streams	O	B-api_mention
and	O	O
Lambdas	O	O
.	O	O
Note	O	O
that	O	O
Java	O	O
8	O	O
streams	O	O
are	O	O
not	O	O
primarily	O	O
motivated	O	O
by	O	O
set	O	O
theory	O	O
,	O	O
but	O	O
by	O	O
functional	O	O
programming	O	O
.	O	O
Regardless	O	O
,	O	O
there	O	O
are	O	O
a	O	O
lot	O	O
of	O	O
parallels	O	O
.	O	O
So	O	O
,	O	O
this	O	O
is	O	O
the	O	O
second	O	O
point	O	O
.	O	O
The	O	O
enhancements	O	O
made	O	O
to	O	O
C	O	O
#	O	O
were	O	O
implemented	O	O
as	O	O
an	O	O
enhancement	O	O
to	O	O
the	O	O
IEnumerable	O	O
concept	O	O
.	O	O
In	O	O
Java	O	O
,	O	O
though	O	O
,	O	O
the	O	O
enhancements	O	O
made	O	O
were	O	O
implemented	O	O
by	O	O
creating	O	O
new	O	O
base	O	O
concepts	O	O
of	O	O
Lambdas	O	O
and	O	O
Streams	O	O
,	O	O
and	O	O
then	O	O
also	O	O
creating	O	O
a	O	O
relatively	O	O
trivial	O	O
way	O	O
to	O	O
convert	O	O
from	O	O
Iterators	O	O
and	O	O
Iterables	O	O
to	O	O
Streams	O	O
,	O	O
and	O	O
visa	O	O
-	O	O
versa	O	O
.	O	O
So	O	O
,	O	O
comparing	O	O
IEnumerable	O	O
to	O	O
Java	O	O
'	O	O
s	O	O
Stream	B-api_mention	B-api_mention
concept	O	O
is	O	O
incomplete	O	O
.	O	O
You	O	O
need	O	O
to	O	O
compare	O	O
it	O	O
to	O	O
the	O	O
combined	O	O
Streams	O	O
and	O	O
Collections	O	B-api_mention
API	O	O
'	O	O
s	O	O
in	O	O
Java	O	O
.	O	O
In	O	O
Java	O	O
,	O	O
Streams	O	O
are	O	O
not	O	O
the	O	O
same	O	O
as	O	O
Iterables	O	O
,	O	O
or	O	O
Iterators	O	O
Streams	O	O
are	O	O
not	O	O
designed	O	O
to	O	O
solve	O	O
problems	O	O
the	O	O
same	O	O
way	O	O
that	O	O
iterators	O	O
are	O	O
:	O	O
#	O	O
li	O	O
Iterators	O	O
are	O	O
a	O	O
way	O	O
of	O	O
describing	O	O
the	O	O
sequence	O	O
of	O	O
data	O	O
.	O	O
#	O	O
li	O	O
Streams	O	O
are	O	O
a	O	O
way	O	O
of	O	O
describing	O	O
a	O	O
sequence	O	O
of	O	O
data	O	O
transformations	O	O
.	O	O
With	O	O
an	O	O
Iterator	O	B-api_mention
,	O	O
you	O	O
get	O	O
a	O	O
data	O	O
value	O	O
,	O	O
process	O	O
it	O	O
,	O	O
and	O	O
then	O	O
get	O	O
another	O	O
data	O	O
value	O	O
.	O	O
With	O	O
Streams	O	O
,	O	O
you	O	O
chain	O	O
a	O	O
sequence	O	O
of	O	O
functions	O	O
together	O	O
,	O	O
then	O	O
you	O	O
feed	O	O
an	O	O
input	O	O
value	O	O
to	O	O
the	O	O
stream	O	O
,	O	O
and	O	O
get	O	O
the	O	O
output	O	O
value	O	O
from	O	O
the	O	O
combined	O	O
sequence	O	O
.	O	O
Note	O	O
,	O	O
in	O	O
Java	O	O
terms	O	O
,	O	O
each	O	O
function	O	O
is	O	O
encapsulated	O	O
in	O	O
a	O	O
single	O	O
Stream	B-api_mention	B-api_mention
instance	O	O
.	O	O
The	O	O
Streams	O	O
API	O	O
allows	O	O
you	O	O
to	O	O
link	O	O
a	O	O
sequence	O	O
of	O	O
Stream	O	B-api_mention
instances	O	O
in	O	O
a	O	O
way	O	O
that	O	O
chains	O	O
a	O	O
sequence	O	O
of	O	O
transformation	O	O
expressions	O	O
.	O	O
In	O	O
order	O	O
to	O	O
complete	O	O
the	O	O
Stream	B-api_mention	B-api_mention
concept	O	O
,	O	O
you	O	O
need	O	O
a	O	O
source	O	O
of	O	O
data	O	O
to	O	O
feed	O	O
the	O	O
stream	O	O
,	O	O
and	O	O
a	O	O
terminal	O	O
function	O	O
that	O	O
consumes	O	O
the	O	O
stream	O	O
.	O	O
The	O	O
way	O	O
you	O	O
feed	O	O
values	O	O
in	O	O
to	O	O
the	O	O
stream	O	O
may	O	O
in	O	O
fact	O	O
be	O	O
from	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
but	O	O
the	O	O
Stream	O	B-api_mention
sequence	O	O
itself	O	O
is	O	O
not	O	O
an	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
it	O	O
is	O	O
a	O	O
compound	O	O
function	O	O
.	O	O
A	O	O
Stream	B-api_mention	B-api_mention
is	O	O
also	O	O
intended	O	O
to	O	O
be	O	O
lazy	O	O
,	O	O
in	O	O
the	O	O
sense	O	O
that	O	O
it	O	O
only	O	O
does	O	O
work	O	O
when	O	O
you	O	O
request	O	O
a	O	O
value	O	O
from	O	O
it	O	O
.	O	O
Note	O	O
these	O	O
significant	O	O
assumptions	O	O
and	O	O
features	O	O
of	O	O
Streams	O	O
:	O	O
#	O	O
li	O	O
A	O	O
Stream	B-api_mention	B-api_mention
in	O	O
Java	O	O
is	O	O
a	O	O
transformation	O	O
engine	O	O
,	O	O
it	O	O
transforms	O	O
a	O	O
data	O	O
item	O	O
in	O	O
one	O	O
state	O	O
,	O	O
to	O	O
being	O	O
in	O	O
another	O	O
state	O	O
.	O	O
#	O	O
li	O	O
streams	O	O
have	O	O
no	O	O
concept	O	O
of	O	O
the	O	O
data	O	O
order	O	O
or	O	O
position	O	O
,	O	O
the	O	O
simply	O	O
transform	O	O
whatever	O	O
they	O	O
are	O	O
asked	O	O
to	O	O
.	O	O
#	O	O
li	O	O
streams	O	O
can	O	O
be	O	O
supplied	O	O
with	O	O
data	O	O
from	O	O
many	O	O
sources	O	O
,	O	O
including	O	O
other	O	O
streams	O	O
,	O	O
Iterators	O	O
,	O	O
Iterables	O	O
,	O	O
Collections	B-api_mention	B-api_mention
,	O	O
#	O	O
li	O	O
you	O	O
cannot	O	O
"	O	O
reset	O	O
"	O	O
a	O	O
stream	O	O
,	O	O
that	O	O
would	O	O
be	O	O
like	O	O
"	O	O
reprogramming	O	O
the	O	O
transformation	O	O
"	O	O
.	O	O
Resetting	O	O
the	O	O
data	O	O
source	O	O
is	O	O
probably	O	O
what	O	O
you	O	O
want	O	O
.	O	O
#	O	O
li	O	O
there	O	O
is	O	O
logically	O	O
only	O	O
1	O	O
data	O	O
item	O	O
'	O	O
in	O	O
flight	O	O
'	O	O
in	O	O
the	O	O
stream	O	O
at	O	O
any	O	O
time	O	O
(	O	O
unless	O	O
the	O	O
stream	O	O
is	O	O
a	O	O
parallel	O	O
stream	O	O
,	O	O
at	O	O
which	O	O
point	O	O
,	O	O
there	O	O
is	O	O
1	O	O
item	O	O
per	O	O
thread	O	O
)	O	O
.	O	O
This	O	O
is	O	O
independent	O	O
of	O	O
the	O	O
data	O	O
source	O	O
which	O	O
may	O	O
have	O	O
more	O	O
than	O	O
the	O	O
current	O	O
items	O	O
'	O	O
ready	O	O
'	O	O
to	O	O
be	O	O
supplied	O	O
to	O	O
the	O	O
stream	O	O
,	O	O
or	O	O
the	O	O
stream	O	O
collector	O	O
which	O	O
may	O	O
need	O	O
to	O	O
aggregate	O	O
and	O	O
reduce	O	O
multiple	O	O
values	O	O
.	O	O
#	O	O
li	O	O
Streams	O	O
can	O	O
be	O	O
unbound	O	O
(	O	O
infinite	O	O
)	O	O
,	O	O
limited	O	O
only	O	O
by	O	O
the	O	O
data	O	O
source	O	O
,	O	O
or	O	O
collector	O	O
(	O	O
which	O	O
can	O	O
be	O	O
infinite	O	O
too	O	O
)	O	O
.	O	O
#	O	O
li	O	O
Streams	O	O
are	O	O
'	O	O
chainable	O	O
'	O	O
,	O	O
the	O	O
output	O	O
of	O	O
filtering	O	O
one	O	O
stream	O	O
,	O	O
is	O	O
another	O	O
stream	O	O
.	O	O
Values	O	O
input	O	O
to	O	O
and	O	O
transformed	O	O
by	O	O
a	O	O
stream	O	O
can	O	O
in	O	O
turn	O	O
be	O	O
supplied	O	O
to	O	O
another	O	O
stream	O	O
which	O	O
does	O	O
a	O	O
different	O	O
transformation	O	O
.	O	O
The	O	O
data	O	O
,	O	O
in	O	O
its	O	O
transformed	O	O
state	O	O
flows	O	O
from	O	O
one	O	O
stream	O	O
to	O	O
the	O	O
next	O	O
.	O	O
You	O	O
do	O	O
not	O	O
need	O	O
to	O	O
intervene	O	O
and	O	O
pull	O	O
the	O	O
data	O	O
from	O	O
one	O	O
stream	O	O
and	O	O
plug	O	O
it	O	O
in	O	O
to	O	O
the	O	O
next	O	O
.	O	O
C	O	O
#	O	O
Comparison	O	O
When	O	O
you	O	O
consider	O	O
that	O	O
a	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
is	O	O
just	O	O
a	O	O
part	O	O
of	O	O
a	O	O
supply	O	O
,	O	O
stream	O	O
,	O	O
and	O	O
collect	O	O
system	O	O
,	O	O
and	O	O
that	O	O
Streams	O	B-api_mention
and	O	O
Iterators	O	O
are	O	O
often	O	O
used	O	O
together	O	O
with	O	O
Collections	O	B-api_mention
,	O	O
then	O	O
it	O	O
is	O	O
no	O	O
wonder	O	O
that	O	O
it	O	O
is	O	O
hard	O	O
to	O	O
relate	O	O
to	O	O
the	O	O
same	O	O
concepts	O	O
which	O	O
are	O	O
almost	O	O
all	O	O
embedded	O	O
in	O	O
to	O	O
a	O	O
single	O	O
IEnumerable	O	O
concept	O	O
in	O	O
C	O	O
#	O	O
.	O	O
Parts	O	O
of	O	O
IEnumerable	O	O
(	O	O
and	O	O
close	O	O
related	O	O
concepts	O	O
)	O	O
are	O	O
apparent	O	O
in	O	O
all	O	O
of	O	O
the	O	O
Java	O	O
Iterator	B-api_mention	B-api_mention
,	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
Lambda	O	O
,	O	O
and	O	O
Stream	B-api_mention	B-api_mention
concepts	O	O
.	O	O
There	O	O
are	O	O
small	O	O
things	O	O
that	O	O
the	O	O
Java	O	O
concepts	O	O
can	O	O
do	O	O
that	O	O
are	O	O
harder	O	O
in	O	O
IEnumerable	O	O
,	O	O
and	O	O
visa	O	O
-	O	O
versa	O	O
.	O	O
Conclusion	O	O
#	O	O
li	O	O
There	O	O
'	O	O
s	O	O
no	O	O
design	O	O
problem	O	O
here	O	O
,	O	O
just	O	O
a	O	O
problem	O	O
in	O	O
matching	O	O
concepts	O	O
between	O	O
the	O	O
languages	O	O
.	O	O
#	O	O
li	O	O
Streams	O	O
solve	O	O
problems	O	O
in	O	O
a	O	O
different	O	O
way	O	O
#	O	O
li	O	O
Streams	O	O
add	O	O
functionality	O	O
to	O	O
Java	O	O
(	O	O
they	O	O
add	O	O
a	O	O
different	O	O
way	O	O
of	O	O
doing	O	O
things	O	O
,	O	O
they	O	O
do	O	O
not	O	O
take	O	O
functionality	O	O
away	O	O
)	O	O
Adding	O	O
Streams	O	O
gives	O	O
you	O	O
more	O	O
choices	O	O
when	O	O
solving	O	O
problems	O	O
,	O	O
which	O	O
is	O	O
fair	O	O
to	O	O
classify	O	O
as	O	O
'	O	O
enhancing	O	O
power	O	O
'	O	O
,	O	O
not	O	O
'	O	O
reducing	O	O
'	O	O
,	O	O
'	O	O
taking	O	O
away	O	O
'	O	O
,	O	O
or	O	O
'	O	O
restricting	O	O
'	O	O
it	O	O
.	O	O
Why	O	O
are	O	O
Java	O	O
Streams	O	O
once	O	O
-	O	O
off	O	O
?	O	O
This	O	O
question	O	O
is	O	O
misguided	O	O
,	O	O
because	O	O
streams	O	O
are	O	O
function	O	O
sequences	O	O
,	O	O
not	O	O
data	O	O
.	O	O
Depending	O	O
on	O	O
the	O	O
data	O	O
source	O	O
that	O	O
feeds	O	O
the	O	O
stream	O	O
,	O	O
you	O	O
can	O	O
reset	O	O
the	O	O
data	O	O
source	O	O
,	O	O
and	O	O
feed	O	O
the	O	O
same	O	O
,	O	O
or	O	O
different	O	O
stream	O	O
.	O	O
Unlike	O	O
C	O	O
#	O	O
'	O	O
s	O	O
IEnumerable	O	O
,	O	O
where	O	O
an	O	O
execution	O	O
pipeline	O	O
can	O	O
be	O	O
executed	O	O
as	O	O
many	O	O
times	O	O
as	O	O
we	O	O
want	O	O
,	O	O
in	O	O
Java	O	O
a	O	O
stream	O	O
can	O	O
be	O	O
'	O	O
iterated	O	O
'	O	O
only	O	O
once	O	O
.	O	O
Comparing	O	O
an	O	O
IEnumerable	O	O
to	O	O
a	O	O
Stream	B-api_mention	B-api_mention
is	O	O
misguided	O	O
.	O	O
The	O	O
context	O	O
you	O	O
are	O	O
using	O	O
to	O	O
say	O	O
IEnumerable	O	O
can	O	O
be	O	O
executed	O	O
as	O	O
many	O	O
times	O	O
as	O	O
you	O	O
want	O	O
,	O	O
is	O	O
best	O	O
compared	O	O
to	O	O
Java	O	O
Iterables	O	O
,	O	O
which	O	O
can	O	O
be	O	O
iterated	O	O
as	O	O
many	O	O
times	O	O
as	O	O
you	O	O
want	O	O
.	O	O
A	O	O
Java	O	O
Stream	B-api_mention	B-api_mention
represents	O	O
a	O	O
subset	O	O
of	O	O
the	O	O
IEnumerable	O	O
concept	O	O
,	O	O
and	O	O
not	O	O
the	O	O
subset	O	O
that	O	O
supplies	O	O
data	O	O
,	O	O
and	O	O
thus	O	O
cannot	O	O
be	O	O
'	O	O
rerun	O	O
'	O	O
.	O	O
Any	O	O
call	O	O
to	O	O
a	O	O
terminal	O	O
operation	O	O
closes	O	O
the	O	O
stream	O	O
,	O	O
rendering	O	O
it	O	O
unusable	O	O
.	O	O
This	O	O
'	O	O
feature	O	O
'	O	O
takes	O	O
away	O	O
a	O	O
lot	O	O
of	O	O
power	O	O
.	O	O
The	O	O
first	O	O
statement	O	O
is	O	O
true	O	O
,	O	O
in	O	O
a	O	O
sense	O	O
.	O	O
The	O	O
'	O	O
takes	O	O
away	O	O
power	O	O
'	O	O
statement	O	O
is	O	O
not	O	O
.	O	O
You	O	O
are	O	O
still	O	O
comparing	O	O
Streams	O	O
it	O	O
IEnumerables	O	O
.	O	O
The	O	O
terminal	O	O
operation	O	O
in	O	O
the	O	O
stream	O	O
is	O	O
like	O	O
a	O	O
'	O	O
break	O	O
'	O	O
clause	O	O
in	O	O
a	O	O
for	O	O
loop	O	O
.	O	O
You	O	O
are	O	O
always	O	O
free	O	O
to	O	O
have	O	O
another	O	O
stream	O	O
,	O	O
if	O	O
you	O	O
want	O	O
,	O	O
and	O	O
if	O	O
you	O	O
can	O	O
re	O	O
-	O	O
supply	O	O
the	O	O
data	O	O
you	O	O
need	O	O
.	O	O
Again	O	O
,	O	O
if	O	O
you	O	O
consider	O	O
the	O	O
IEnumerable	O	O
to	O	O
be	O	O
more	O	O
like	O	O
an	O	O
Iterable	B-api_mention	O
,	O	O
for	O	O
this	O	O
statement	O	O
,	O	O
Java	O	O
does	O	O
it	O	O
just	O	O
fine	O	O
.	O	O
I	O	O
imagine	O	O
the	O	O
reason	O	O
for	O	O
this	O	O
is	O	O
not	O	O
technical	O	O
.	O	O
What	O	O
were	O	O
the	O	O
design	O	O
considerations	O	O
behind	O	O
this	O	O
strange	O	O
restriction	O	O
?	O	O
The	O	O
reason	O	O
is	O	O
technical	O	O
,	O	O
and	O	O
for	O	O
the	O	O
simple	O	O
reason	O	O
that	O	O
a	O	O
Stream	B-api_mention	B-api_mention
a	O	O
subset	O	O
of	O	O
what	O	O
think	O	O
it	O	O
is	O	O
.	O	O
The	O	O
stream	O	O
subset	O	O
does	O	O
not	O	O
control	O	O
the	O	O
data	O	O
supply	O	O
,	O	O
so	O	O
you	O	O
should	O	O
reset	O	O
the	O	O
supply	O	O
,	O	O
not	O	O
the	O	O
stream	O	O
.	O	O
In	O	O
that	O	O
context	O	O
,	O	O
it	O	O
is	O	O
not	O	O
so	O	O
strange	O	O
.	O	O
QuickSort	O	O
example	O	O
Your	O	O
quicksort	O	O
example	O	O
has	O	O
the	O	O
signature	O	O
:	O	O
IEnumerable	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
QuickSort	O	I-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
You	O	O
are	O	O
treating	O	O
the	O	O
input	O	O
IEnumerable	O	O
as	O	O
a	O	O
data	O	O
source	O	O
:	O	O
IEnumerable	O	B-api_mention
<	O	I-api_mention
T	O	I-api_mention
>	O	I-api_mention
lt	O	O
=	O	O
ints	O	O
.	O	O
Where	O	O
(	O	O
args	O	O
)	O	O
;	O	O
Additionally	O	O
,	O	O
return	O	O
value	O	O
is	O	O
IEnumerable	O	O
too	O	O
,	O	O
which	O	O
is	O	O
a	O	O
supply	O	O
of	O	O
data	O	O
,	O	O
and	O	O
since	O	O
this	O	O
is	O	O
a	O	O
Sort	O	O
operation	O	O
,	O	O
the	O	O
order	O	O
of	O	O
that	O	O
supply	O	O
is	O	O
significant	O	O
.	O	O
If	O	O
you	O	O
consider	O	O
the	O	O
Java	O	O
Iterable	B-api_mention	B-api_mention
class	O	O
to	O	O
be	O	O
the	O	O
appropriate	O	O
match	O	O
for	O	O
this	O	O
,	O	O
specifically	O	O
the	O	O
List	B-api_mention	B-api_mention
specialization	O	O
of	O	O
Iterable	B-api_mention	B-api_mention
,	O	O
since	O	O
List	B-api_mention	B-api_mention
is	O	O
a	O	O
supply	O	O
of	O	O
data	O	O
which	O	O
has	O	O
a	O	O
guaranteed	O	O
order	O	O
or	O	O
iteration	O	O
,	O	O
then	O	O
the	O	O
equivalent	O	O
Java	O	O
code	O	O
to	O	O
your	O	O
code	O	O
would	O	O
be	O	O
:	O	O
#	O	O
pre	O	O
Note	O	O
there	O	O
is	O	O
a	O	O
bug	O	O
(	O	O
which	O	O
I	O	O
have	O	O
reproduced	O	O
)	O	O
,	O	O
in	O	O
that	O	O
the	O	O
sort	O	O
does	O	O
not	O	O
handle	O	O
duplicate	O	O
values	O	O
gracefully	O	O
,	O	O
it	O	O
is	O	O
a	O	O
'	O	O
unique	O	O
value	O	O
'	O	O
sort	O	O
.	O	O
Also	O	O
note	O	O
how	O	O
the	O	O
Java	O	O
code	O	O
uses	O	O
data	O	O
source	O	O
(	O	O
List	O	B-api_mention
)	O	O
,	O	O
and	O	O
stream	O	O
concepts	O	O
at	O	O
different	O	O
point	O	O
,	O	O
and	O	O
that	O	O
in	O	O
C	O	O
#	O	O
those	O	O
two	O	O
'	O	O
personalities	O	O
'	O	O
can	O	O
be	O	O
expressed	O	O
in	O	O
just	O	O
IEnumerable	O	O
.	O	O
Also	O	O
,	O	O
although	O	O
I	O	O
have	O	O
use	O	O
List	B-api_mention	B-api_mention
as	O	O
the	O	O
base	O	O
type	O	O
,	O	O
I	O	O
could	O	O
have	O	O
used	O	O
the	O	O
more	O	O
general	O	O
Collection	B-api_mention	B-api_mention
,	O	O
and	O	O
with	O	O
a	O	O
small	O	O
iterator	O	O
-	O	O
to	O	O
-	O	O
Stream	O	O
conversion	O	O
,	O	O
I	O	O
could	O	O
have	O	O
used	O	O
the	O	O
even	O	O
more	O	O
general	O	O
Iterable	B-api_mention	O
Question	O	O
-	O	O
8157755	O	O
,	O	O
answer	O	O
-	O	O
8157791	O	O
If	O	O
you	O	O
want	O	O
the	O	O
value	O	O
you	O	O
are	O	O
assigning	O	O
in	O	O
the	O	O
constructor	O	O
,	O	O
you	O	O
need	O	O
to	O	O
add	O	O
a	O	O
method	O	O
in	O	O
the	O	O
enum	O	O
definition	O	O
to	O	O
return	O	O
that	O	O
value	O	O
.	O	O
If	O	O
you	O	O
want	O	O
a	O	O
unique	O	O
number	O	O
that	O	O
represent	O	O
the	O	O
enum	O	O
value	O	O
,	O	O
you	O	O
can	O	O
use	O	O
ordinal	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
12552863	O	O
,	O	O
answer	O	O
-	O	O
12619799	O	O
I	O	O
would	O	O
say	O	O
don	O	O
'	O	O
t	O	O
use	O	O
ARM	O	O
and	O	O
go	O	O
on	O	O
with	O	O
Closeable	B-api_mention	B-api_mention
.	O	O
Use	O	O
method	O	O
like	O	O
,	O	O
#	O	O
pre	O	O
Also	O	O
you	O	O
should	O	O
consider	O	O
calling	O	O
close	O	O
of	O	O
BufferedWriter	B-api_mention	B-api_mention
as	O	O
it	O	O
is	O	O
not	O	O
just	O	O
delegating	O	O
the	O	O
close	O	O
to	O	O
FileWriter	B-api_mention	B-api_mention
,	O	O
but	O	O
it	O	O
does	O	O
some	O	O
cleanup	O	O
like	O	O
flushBuffer	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
24603186	O	O
,	O	O
answer	O	O
-	O	O
24603187	O	O
The	O	O
Javadocs	O	O
for	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	O
(	I-api_mention	O
parallelS	I-api_mention	O
|	I-api_mention	O
s	I-api_mention	O
)	I-api_mention	O
tream	I-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
and	O	O
Stream	B-api_mention	B-api_mention
itself	O	O
don	O	O
'	O	O
t	O	O
answer	O	O
the	O	O
question	O	O
,	O	O
so	O	O
it	O	O
'	O	O
s	O	O
off	O	O
to	O	O
the	O	O
mailing	O	O
lists	O	O
for	O	O
the	O	O
rationale	O	O
.	O	O
I	O	O
went	O	O
through	O	O
the	O	O
lambda	O	O
-	O	O
libs	O	O
-	O	O
spec	O	O
-	O	O
observers	O	O
archives	O	O
and	O	O
found	O	O
one	O	O
thread	O	O
specifically	O	O
about	O	O
Collection	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
another	O	O
thread	O	O
that	O	O
touched	O	O
on	O	O
whether	O	O
java	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
util	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
Arrays	I-api_mention	I-api_mention
should	O	O
provide	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
match	O	O
(	O	O
or	O	O
actually	O	O
,	O	O
whether	O	O
it	O	O
should	O	O
be	O	O
removed	O	O
)	O	O
.	O	O
There	O	O
was	O	O
no	O	O
once	O	O
-	O	O
and	O	O
-	O	O
for	O	O
-	O	O
all	O	O
conclusion	O	O
,	O	O
so	O	O
perhaps	O	O
I	O	O
'	O	O
ve	O	O
missed	O	O
something	O	O
from	O	O
another	O	O
list	O	O
or	O	O
the	O	O
matter	O	O
was	O	O
settled	O	O
in	O	O
private	O	O
discussion	O	O
.	O	O
(	O	O
Perhaps	O	O
Brian	O	O
Goetz	O	O
,	O	O
one	O	O
of	O	O
the	O	O
principals	O	O
of	O	O
this	O	O
discussion	O	O
,	O	O
can	O	O
fill	O	O
in	O	O
anything	O	O
missing	O	O
.	O	O
)	O	O
The	O	O
participants	O	O
made	O	O
their	O	O
points	O	O
well	O	O
,	O	O
so	O	O
this	O	O
answer	O	O
is	O	O
mostly	O	O
just	O	O
an	O	O
organization	O	O
of	O	O
the	O	O
relevant	O	O
quotes	O	O
,	O	O
with	O	O
a	O	O
few	O	O
clarifications	O	O
in	O	O
[	O	O
brackets	O	O
]	O	O
,	O	O
presented	O	O
in	O	O
order	O	O
of	O	O
importance	O	O
(	O	O
as	O	O
I	O	O
interpret	O	O
it	O	O
)	O	O
.	O	B-api_mention
parallelStream	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
covers	O	O
a	O	O
very	O	O
common	O	O
case	O	O
Brian	O	O
Goetz	O	O
in	O	O
the	O	O
first	O	O
thread	O	O
,	O	O
explaining	O	O
why	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
valuable	O	O
enough	O	O
to	O	O
keep	O	O
even	O	O
after	O	O
other	O	O
parallel	O	O
stream	O	O
factory	O	O
methods	O	O
have	O	O
been	O	O
removed	O	O
:	O	O
#	O	O
blockquote	O	O
Brian	O	O
Goetz	O	O
stands	O	O
by	O	O
this	O	O
position	O	O
in	O	O
the	O	O
later	O	O
discussion	O	O
about	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
#	O	O
blockquote	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
more	O	O
performant	O	O
Brian	O	O
Goetz	O	O
:	O	O
#	O	O
blockquote	O	O
In	O	O
response	O	O
to	O	O
Kevin	O	O
Bourrillion	O	O
'	O	O
s	O	O
skepticism	O	O
about	O	O
whether	O	O
the	O	O
effect	O	O
is	O	O
significant	O	O
,	O	O
Brian	O	O
again	O	O
:	O	O
#	O	O
blockquote	O	O
Doug	O	O
Lea	O	O
follows	O	O
up	O	O
,	O	O
but	O	O
hedges	O	O
his	O	O
position	O	O
:	O	O
#	O	O
blockquote	O	O
Indeed	O	O
,	O	O
the	O	O
later	O	O
discussion	O	O
about	O	O
Arrays	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallelStream	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
takes	O	O
notice	O	O
of	O	O
lower	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
cost	O	O
.	O	B-api_mention
stream	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
statefulness	O	O
complicates	O	O
the	O	O
future	O	O
At	O	O
the	O	O
time	O	O
of	O	O
the	O	O
discussion	O	O
,	O	O
switching	O	O
a	O	O
stream	O	O
from	O	O
sequential	O	O
to	O	O
parallel	O	O
and	O	O
back	O	O
could	O	O
be	O	O
interleaved	O	O
with	O	O
other	O	O
stream	O	O
operations	O	O
.	O	O
Brian	O	O
Goetz	O	O
,	O	O
on	O	O
behalf	O	O
of	O	O
Doug	O	O
Lea	O	O
,	O	O
explains	O	O
why	O	O
sequential	O	O
/	O	O
parallel	O	O
mode	O	O
switching	O	O
may	O	O
complicate	O	O
future	O	O
development	O	O
of	O	O
the	O	O
Java	O	O
platform	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
mode	O	O
switching	O	O
was	O	O
removed	O	O
after	O	O
further	O	O
discussion	O	O
.	O	O
In	O	O
the	O	O
current	O	O
version	O	O
of	O	O
the	O	O
library	O	O
,	O	O
a	O	O
stream	O	O
pipeline	O	O
is	O	O
either	O	O
sequential	O	O
or	O	O
parallel	O	O
;	O	O
last	O	O
call	O	O
to	O	O
sequential	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
/	O	O
parallel	B-api_mention	O
(	I-api_mention	O
args	I-api_mention	O
)	I-api_mention	O
wins	O	O
.	O	O
Besides	O	O
side	O	O
-	O	O
stepping	O	O
the	O	O
statefulness	O	O
problem	O	O
,	O	O
this	O	O
change	O	O
also	O	O
improved	O	O
the	O	O
performance	O	O
of	O	O
using	O	O
parallel	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
to	O	O
set	O	O
up	O	O
a	O	O
parallel	O	O
pipeline	O	O
from	O	O
a	O	O
sequential	O	O
stream	O	O
factory	O	O
.	O	O
exposing	O	O
parallelStream	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
as	O	O
a	O	O
first	O	O
-	O	O
class	O	O
citizen	O	O
improves	O	O
programmer	O	O
perception	O	O
of	O	O
the	O	O
library	O	O
,	O	O
leading	O	O
them	O	O
to	O	O
write	O	O
better	O	O
code	O	O
Brian	O	O
Goetz	O	O
again	O	O
,	O	O
in	O	O
response	O	O
to	O	O
Tim	O	O
Peierls	O	O
'	O	O
s	O	O
argument	O	O
that	O	O
Stream	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parallel	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
allows	O	O
programmers	O	O
to	O	O
understand	O	O
streams	O	O
sequentially	O	O
before	O	O
going	O	O
parallel	O	O
:	O	O
#	O	O
blockquote	O	O
Question	O	O
-	O	O
32475166	O	O
,	O	O
answer	O	O
-	O	O
32476850	O	O
When	O	O
you	O	O
think	O	O
about	O	O
the	O	O
type	O	O
of	O	O
the	O	O
operands	O	O
,	O	O
the	O	O
problem	O	O
becomes	O	O
more	O	O
apparent	O	O
:	O	O
this	O	O
.	O	O
method	O	O
!	O	O
=	O	O
null	O	O
?	O	O
this	O	O
.	O	O
method	O	O
:	O	O
this	O	O
.	O	O
constructor	O	O
has	O	O
as	O	O
type	O	O
the	O	O
most	O	O
specialized	O	O
common	O	O
type	O	O
of	O	O
both	O	O
the	O	O
operands	O	O
,	O	O
i	O	O
.	O	O
e	O	O
.	O	O
the	O	O
most	O	O
specialized	O	O
type	O	O
common	O	O
to	O	O
both	O	O
this	O	O
.	O	O
method	O	O
and	O	O
this	O	O
.	O	O
constructor	O	O
.	O	O
In	O	O
Java	O	O
7	O	O
this	O	O
is	O	O
java	O	O
.	O	O
lang	O	O
.	O	O
reflect	O	O
.	O	O
Member	O	O
,	O	O
however	O	O
the	O	O
Java	O	O
8	O	O
class	O	O
library	O	O
introduces	O	O
a	O	O
new	O	O
type	O	O
java	O	O
.	O	O
lang	O	O
.	O	O
reflect	O	O
.	O	O
Executable	O	O
which	O	O
is	O	O
more	O	O
specialized	O	O
than	O	O
the	O	O
generic	O	O
Member	O	B-api_mention
.	O	O
Hence	O	O
with	O	O
a	O	O
Java	O	O
8	O	O
class	O	O
library	O	O
the	O	O
result	O	O
type	O	O
of	O	O
the	O	O
ternary	O	O
expression	O	O
is	O	O
Executable	O	O
rather	O	O
than	O	O
Member	O	O
.	O	O
Some	O	O
(	O	O
pre	O	O
-	O	O
release	O	O
)	O	O
versions	O	O
of	O	O
the	O	O
Java	O	O
8	O	O
compiler	O	O
seem	O	O
to	O	O
have	O	O
produced	O	O
an	O	O
explicit	O	O
reference	O	O
to	O	O
Executable	O	O
inside	O	O
generated	O	O
code	O	O
when	O	O
compiling	O	O
the	O	O
ternary	O	O
operator	O	O
.	O	O
This	O	O
would	O	O
trigger	O	O
a	O	O
class	O	O
load	O	O
,	O	O
and	O	O
thus	O	O
in	O	O
turn	O	O
a	O	O
ClassNotFoundException	O	O
at	O	O
runtime	O	O
when	O	O
running	O	O
with	O	O
a	O	O
class	O	O
library	O	O
<	O	O
JDK	O	O
8	O	O
,	O	O
because	O	O
Executable	O	O
only	O	O
exists	O	O
for	O	O
JDK	O	O
?	O	O
8	O	O
.	O	O
As	O	O
noted	O	O
by	O	O
Tagir	O	O
Valeev	O	O
in	O	O
this	O	O
answer	O	O
,	O	O
this	O	O
is	O	O
actually	O	O
a	O	O
bug	O	O
in	O	O
pre	O	O
-	O	O
release	O	O
versions	O	O
of	O	O
JDK	O	O
8	O	O
and	O	O
has	O	O
since	O	O
been	O	O
fixed	O	O
,	O	O
so	O	O
both	O	O
the	O	O
if	O	O
-	O	O
else	O	O
workaround	O	O
and	O	O
the	O	O
explanatory	O	O
comment	O	O
are	O	O
now	O	O
obsolete	O	O
.	O	O
Additional	O	O
note	O	O
:	O	O
One	O	O
might	O	O
come	O	O
to	O	O
the	O	O
conclusion	O	O
that	O	O
this	O	O
compiler	O	O
bug	O	O
was	O	O
present	O	O
before	O	O
Java	O	O
8	O	O
.	O	O
However	O	O
,	O	O
the	O	O
byte	O	O
code	O	O
generated	O	O
for	O	O
the	O	O
ternary	O	O
by	O	O
OpenJDK	O	O
7	O	O
is	O	O
the	O	O
same	O	O
as	O	O
the	O	O
byte	O	O
code	O	O
generated	O	O
by	O	O
OpenJDK	O	O
8	O	O
.	O	O
In	O	O
fact	O	O
,	O	O
the	O	O
type	O	O
of	O	O
the	O	O
expression	O	O
goes	O	O
completely	O	O
unmentioned	O	O
at	O	O
runtime	O	O
,	O	O
the	O	O
code	O	O
is	O	O
really	O	O
only	O	O
test	O	O
,	O	O
branch	O	O
,	O	O
load	O	O
,	O	O
return	O	O
without	O	O
any	O	O
additional	O	O
checks	O	O
going	O	O
on	O	O
.	O	O
So	O	O
rest	O	O
assured	O	O
that	O	O
this	O	O
is	O	O
not	O	O
a	O	O
problem	O	O
(	O	O
anymore	O	O
)	O	O
and	O	O
indeed	O	O
seems	O	O
to	O	O
have	O	O
been	O	O
a	O	O
temporary	O	O
problem	O	O
during	O	O
development	O	O
of	O	O
Java	O	O
8	O	O
.	O	O
Question	O	O
-	O	O
6608795	O	O
I	O	O
wonder	O	O
what	O	O
the	O	O
difference	O	O
is	O	O
between	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
and	O	O
ClassLoader	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
?	O	O
edit	O	O
:	O	O
I	O	O
especially	O	O
want	O	O
to	O	O
know	O	O
if	O	O
any	O	O
caching	O	O
is	O	O
involved	O	O
on	O	O
file	O	O
/	O	O
directory	O	O
level	O	O
.	O	O
As	O	O
in	O	O
"	O	O
are	O	O
directory	O	O
listings	O	O
cached	O	O
in	O	O
the	O	O
Class	B-api_mention	B-api_mention
version	O	O
?	O	O
"	O	O
AFAIK	O	O
the	O	O
following	O	O
should	O	O
essentially	O	O
do	O	O
the	O	O
same	O	O
,	O	O
but	O	O
they	O	O
are	O	O
not	O	O
:	O	O
#	O	O
pre	O	O
I	O	O
discovered	O	O
this	O	O
when	O	O
fiddling	O	O
with	O	O
some	O	O
report	O	O
generation	O	O
code	O	O
that	O	O
creates	O	O
a	O	O
new	O	O
file	O	O
in	O	O
WEB	O	O
-	O	O
INF	O	O
/	O	O
classes	O	O
/	O	O
from	O	O
an	O	O
existing	O	O
file	O	O
in	O	O
that	O	O
directory	O	O
.	O	O
When	O	O
using	O	O
the	O	O
method	O	O
from	O	O
Class	B-api_mention	O
,	O	O
I	O	O
could	O	O
find	O	O
files	O	O
that	O	O
were	O	O
there	O	O
at	O	O
deployment	O	O
using	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
,	O	O
but	O	O
when	O	O
trying	O	O
to	O	O
fetch	O	O
the	O	O
newly	O	O
created	O	O
file	O	O
,	O	O
I	O	O
recieved	O	O
a	O	O
null	O	O
object	O	O
.	O	O
Browsing	O	O
the	O	O
directory	O	O
clearly	O	O
shows	O	O
that	O	O
the	O	O
new	O	O
file	O	O
is	O	O
there	O	O
.	O	O
The	O	O
filenames	O	O
were	O	O
prepended	O	O
with	O	O
a	O	O
forward	O	O
slash	O	O
as	O	O
in	O	O
"	O	O
/	O	O
myFile	O	O
.	O	O
txt	O	O
"	O	O
.	O	O
The	O	O
ClassLoader	B-api_mention	O
version	O	O
of	O	O
getResource	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
the	O	O
other	O	O
hand	O	O
did	O	O
find	O	O
the	O	O
generated	O	O
file	O	O
.	O	O
From	O	O
this	O	O
experience	O	O
it	O	O
seems	O	O
that	O	O
there	O	O
is	O	O
some	O	O
kind	O	O
of	O	O
caching	O	O
of	O	O
the	O	O
directory	O	O
listing	O	O
going	O	O
on	O	O
.	O	O
Am	O	O
I	O	O
right	O	O
,	O	O
and	O	O
if	O	O
so	O	O
,	O	O
where	O	O
is	O	O
this	O	O
documented	O	O
?	O	O
From	O	O
the	O	O
API	O	O
docs	O	O
on	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
#	O	O
blockquote	O	O
To	O	O
me	O	O
,	O	O
this	O	O
reads	O	O
"	O	O
Class	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
is	O	O
really	O	O
calling	O	O
its	O	O
own	O	O
classloader	O	O
'	O	O
s	O	O
getResource	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
"	O	O
.	O	O
Which	O	O
would	O	O
be	O	O
the	O	O
same	O	O
as	O	O
doing	O	O
getClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getClassLoader	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getResource	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
But	O	O
it	O	O
is	O	O
obviously	O	O
not	O	O
.	O	O
Could	O	O
someone	O	O
please	O	O
provide	O	O
me	O	O
with	O	O
some	O	O
illumination	O	O
into	O	O
this	O	O
matter	O	O
?	O	O
Question	O	O
-	O	O
6840803	O	O
,	O	O
answer	O	O
-	O	O
6840856	O	O
SimpleDateFormat	B-api_mention	B-api_mention
stores	O	O
intermediate	O	O
results	O	O
in	O	O
instance	O	O
fields	O	O
.	O	O
So	O	O
if	O	O
one	O	O
instance	O	O
is	O	O
used	O	O
by	O	O
two	O	O
threads	O	O
they	O	O
can	O	O
mess	O	O
each	O	O
other	O	O
'	O	O
s	O	O
results	O	O
.	O	O
Looking	O	O
at	O	O
the	O	O
source	O	O
code	O	O
reveals	O	O
that	O	O
there	O	O
is	O	O
a	O	O
Calendar	B-api_mention	B-api_mention
instance	O	O
field	O	O
,	O	O
which	O	O
is	O	O
used	O	O
by	O	O
operations	O	O
on	O	O
DateFormat	B-api_mention	B-api_mention
/	O	O
SimpleDateFormat	B-api_mention	B-api_mention
For	O	O
example	O	O
parse	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
calls	O	O
calendar	O	O
.	B-api_mention	B-api_mention
clear	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
initially	O	O
and	O	O
then	O	O
calendar	O	O
.	B-api_mention	B-api_mention
add	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
If	O	O
another	O	O
thread	O	O
invokes	O	O
parse	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
before	O	O
the	O	O
completion	O	O
of	O	O
the	O	O
first	O	O
invocation	O	O
,	O	O
it	O	O
will	O	O
clear	O	O
the	O	O
calendar	O	O
,	O	O
but	O	O
the	O	O
other	O	O
invocation	O	O
will	O	O
expect	O	O
it	O	O
to	O	O
be	O	O
populated	O	O
with	O	O
intermediate	O	O
results	O	O
of	O	O
the	O	O
calculation	O	O
.	O	O
One	O	O
way	O	O
to	O	O
reuse	O	O
date	O	O
formats	O	O
without	O	O
trading	O	O
thread	O	O
-	O	O
safety	O	O
is	O	O
to	O	O
put	O	O
them	O	O
in	O	O
a	O	O
ThreadLocal	B-api_mention	O
-	O	O
some	O	O
libraries	O	O
do	O	O
that	O	O
.	O	O
That	O	O
'	O	O
s	O	O
if	O	O
you	O	O
need	O	O
to	O	O
use	O	O
the	O	O
same	O	O
format	O	O
multiple	O	O
times	O	O
within	O	O
one	O	O
thread	O	O
.	O	O
But	O	O
in	O	O
case	O	O
you	O	O
are	O	O
using	O	O
a	O	O
servlet	O	O
container	O	O
(	O	O
that	O	O
has	O	O
a	O	O
thread	O	O
pool	O	O
)	O	O
,	O	O
remember	O	O
to	O	O
clean	O	O
the	O	O
thread	O	O
-	O	O
local	O	O
after	O	O
you	O	O
finish	O	O
.	O	O
To	O	O
be	O	O
honest	O	O
,	O	O
I	O	O
don	O	O
'	O	O
t	O	O
understand	O	O
why	O	O
they	O	O
need	O	O
the	O	O
instance	O	O
field	O	O
,	O	O
but	O	O
that	O	O
'	O	O
s	O	O
the	O	O
way	O	O
it	O	O
is	O	O
.	O	O
You	O	O
can	O	O
also	O	O
use	O	O
joda	O	O
-	O	O
time	O	O
DateTimeFormat	B-api_mention	B-api_mention
which	O	O
is	O	O
threadsafe	O	O
.	O	O
Question	O	O
-	O	O
9749746	O	O
How	O	O
do	O	O
atomic	B-api_mention	O
/	O	O
volatile	O	O
/	O	O
synchronized	O	O
work	O	O
internally	O	O
?	O	O
What	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
the	O	O
following	O	O
code	O	O
blocks	O	O
?	O	O
Code	O	O
1	O	O
#	O	O
pre	O	O
Code	O	O
2	O	O
#	O	O
pre	O	O
Code	O	O
3	O	O
#	O	O
pre	O	O
Does	O	O
volatile	O	O
work	O	O
in	O	O
the	O	O
following	O	O
way	O	O
?	O	O
Is	O	O
#	O	O
pre	O	O
equivalent	O	O
to	O	O
#	O	O
pre	O	O
I	O	O
think	O	O
that	O	O
two	O	O
threads	O	O
cannot	O	O
enter	O	O
a	O	O
synchronized	O	O
block	O	O
at	O	O
the	O	O
same	O	O
time	O	O
.	O	O
.	O	O
.	O	O
am	O	O
I	O	O
right	O	O
?	O	O
If	O	O
this	O	O
is	O	O
true	O	O
then	O	O
how	O	O
does	O	O
atomic	B-api_mention	O
.	I-api_mention	B-api_mention
incrementAndGet	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
work	O	O
without	O	O
synchronized	O	O
?	O	O
And	O	O
is	O	O
it	O	O
thread	O	O
-	O	O
safe	O	O
?	O	O
And	O	O
what	O	O
is	O	O
the	O	O
difference	O	O
between	O	O
internal	O	O
reading	O	O
and	O	O
writing	O	O
to	O	O
volatile	O	O
variables	O	O
/	O	O
atomic	B-api_mention	O
variables	O	O
?	O	O
I	O	O
read	O	O
in	O	O
some	O	O
article	O	O
that	O	O
the	O	O
thread	O	O
has	O	O
a	O	O
local	O	O
copy	O	O
of	O	O
the	O	O
variables	O	O
-	O	O
what	O	O
is	O	O
that	O	O
?	O	O
Question	O	O
-	O	O
8579657	O	O
,	O	O
answer	O	O
-	O	O
19629304	O	O
If	O	O
you	O	O
do	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
in	O	O
main	O	O
method	O	O
,	O	O
the	O	O
thread	O	O
of	O	O
main	O	O
method	O	O
will	O	O
invoke	O	O
the	O	O
run	O	O
method	O	O
instead	O	O
of	O	O
the	O	O
thread	O	O
you	O	O
require	O	O
to	O	O
run	O	O
.	O	O
The	O	O
start	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
creates	O	O
new	O	O
thread	O	O
and	O	O
for	O	O
which	O	O
the	O	O
run	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
has	O	O
to	O	O
be	O	O
done	O	O
Question	O	O
-	O	O
5263187	O	O
,	O	O
answer	O	O
-	O	O
5263201	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
Question	O	O
-	O	O
14846920	O	O
,	O	O
answer	O	O
-	O	O
14846963	O	O
#	O	O
blockquote	O	O
For	O	O
the	O	O
same	O	O
reason	O	O
you	O	O
'	O	O
d	O	O
use	O	O
Collections	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
unmodifiableMap	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
at	O	O
some	O	O
point	O	O
.	O	O
You	O	O
want	O	O
to	O	O
return	O	O
a	O	O
Map	B-api_mention	B-api_mention
instance	O	O
that	O	O
throws	O	O
an	O	O
exception	O	O
if	O	O
the	O	O
user	O	O
attempts	O	O
to	O	O
modify	O	O
it	O	O
.	O	O
It	O	O
'	O	O
s	O	O
just	O	O
a	O	O
special	O	O
case	O	O
:	O	O
the	O	O
empty	O	O
Map	B-api_mention	B-api_mention
.	O	O
Question	O	O
-	O	O
9510125	O	O
,	O	O
answer	O	O
-	O	O
9511880	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
In	O	O
Swing	O	O
when	O	O
you	O	O
create	O	O
Component	O	B-api_mention
,	O	O
it	O	O
is	O	O
not	O	O
valid	O	O
i	O	O
.	O	O
e	O	O
.	O	O
it	O	O
'	O	O
s	O	O
valid	O	O
property	O	O
is	O	O
false	O	O
.	O	O
A	O	O
component	O	O
is	O	O
said	O	O
to	O	O
be	O	O
valid	O	O
,	O	O
when	O	O
it	O	O
'	O	O
s	O	O
width	O	O
,	O	O
height	O	O
,	O	O
location	O	O
and	O	O
stuff	O	O
has	O	O
been	O	O
determined	O	O
.	O	O
This	O	O
is	O	O
usually	O	O
done	O	O
by	O	O
calling	O	O
their	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
directly	O	O
or	O	O
indirectly	O	O
.	O	O
When	O	O
we	O	O
call	O	O
validate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
containers	O	O
,	O	O
it	O	O
will	O	O
validate	O	O
the	O	O
container	O	O
(	O	O
if	O	O
it	O	O
is	O	O
invalid	O	O
)	O	O
by	O	O
calling	O	O
its	O	O
doLayout	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
method	O	O
,	O	O
which	O	O
typically	O	O
will	O	O
invoke	O	O
the	O	O
LayoutManager	B-api_mention	B-api_mention
.	O	O
Now	O	O
each	O	O
child	O	O
placed	O	O
on	O	O
this	O	O
container	O	O
will	O	O
be	O	O
validated	O	O
recursively	O	O
,	O	O
so	O	O
that	O	O
the	O	O
entire	O	O
tree	O	O
will	O	O
be	O	O
laid	O	O
out	O	O
and	O	O
will	O	O
become	O	O
valid	O	O
.	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
to	O	O
be	O	O
called	O	O
when	O	O
you	O	O
change	O	O
an	O	O
attribute	O	O
that	O	O
would	O	O
affect	O	O
their	O	O
width	O	O
/	O	O
height	O	O
and	O	O
call	O	O
repaint	O	B-api_mention
(	O	I-api_mention
)	O	I-api_mention
when	O	O
you	O	O
change	O	O
an	O	O
attribute	O	O
that	O	O
would	O	O
affect	O	O
their	O	O
appearance	O	O
.	O	O
For	O	O
Example	O	O
,	O	O
If	O	O
your	O	O
JFrame	O	O
contains	O	O
a	O	O
JPanel	O	O
,	O	O
now	O	O
at	O	O
certain	O	O
point	O	O
of	O	O
time	O	O
you	O	O
removed	O	O
that	O	O
JPanel	O	O
and	O	O
inserted	O	O
a	O	O
new	O	O
one	O	O
in	O	O
it	O	O
'	O	O
s	O	O
place	O	O
,	O	O
depending	O	O
on	O	O
the	O	O
contents	O	O
of	O	O
the	O	O
newly	O	O
placed	O	O
JPanel	O	O
,	O	O
the	O	O
size	O	O
of	O	O
the	O	O
components	O	O
inside	O	O
the	O	O
JPanel	O	O
as	O	O
well	O	O
as	O	O
The	O	O
CONTAINER	O	O
itself	O	O
(	O	O
by	O	O
virtue	O	O
of	O	O
the	O	O
layout	O	O
manager	O	O
used	O	O
by	O	O
it	O	O
)	O	O
,	O	O
changes	O	O
.	O	O
Which	O	O
pushes	O	O
it	O	O
to	O	O
the	O	O
invalidate	O	O
state	O	O
.	O	O
So	O	O
in	O	O
order	O	O
to	O	O
validate	O	O
this	O	O
change	O	O
,	O	O
you	O	O
have	O	O
to	O	O
explicitly	O	O
call	O	O
revalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	I-api_mention
invalidate	B-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
:	O	O
This	O	O
thing	O	O
is	O	O
something	O	O
,	O	O
I	O	O
had	O	O
never	O	O
used	O	O
,	O	O
so	O	O
might	O	O
be	O	O
not	O	O
much	O	O
of	O	O
the	O	O
info	O	O
I	O	O
can	O	O
give	O	O
.	O	O
But	O	O
seems	O	O
like	O	O
the	O	O
scenario	O	O
presented	O	O
above	O	O
,	O	O
can	O	O
give	O	O
a	O	O
bit	O	O
of	O	O
hint	O	O
,	O	O
as	O	O
to	O	O
what	O	O
happens	O	O
in	O	O
invalidate	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
Question	O	O
-	O	O
6271417	O	O
,	O	O
answer	O	O
-	O	O
6271460	O	O
The	O	O
"	O	O
$	O	O
1	O	O
"	O	O
is	O	O
not	O	O
"	O	O
useless	O	O
non	O	O
-	O	O
sense	O	O
"	O	O
.	O	O
If	O	O
your	O	O
class	O	O
is	O	O
anonymous	O	O
,	O	O
a	O	O
number	O	O
is	O	O
appended	O	O
.	O	O
If	O	O
you	O	O
don	O	O
'	O	O
t	O	O
want	O	O
the	O	O
class	O	O
itself	O	O
,	O	O
but	O	O
its	O	O
declaring	O	O
class	O	O
,	O	O
then	O	O
you	O	O
can	O	O
use	O	O
getEnclosingClass	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
For	O	O
example	O	O
:	O	O
#	O	O
pre	O	O
You	O	O
can	O	O
move	O	O
that	O	O
in	O	O
some	O	O
static	O	O
utility	O	O
method	O	O
.	O	O
But	O	O
note	O	O
that	O	O
this	O	O
is	O	O
not	O	O
the	O	O
current	O	O
class	O	O
name	O	O
.	O	O
The	O	O
anonymous	O	O
class	O	O
is	O	O
different	O	O
class	O	O
than	O	O
its	O	O
enclosing	O	O
class	O	O
.	O	O
The	O	O
case	O	O
is	O	O
similar	O	O
for	O	O
inner	O	O
classes	O	O
.	O	O
Question	O	O
-	O	O
22463062	O	O
,	O	O
answer	O	O
-	O	O
28324294	O	O
You	O	O
can	O	O
also	O	O
use	O	O
LocalDate	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
LocalDateTime	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
parse	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
on	O	O
a	O	O
String	B-api_mention	B-api_mention
without	O	O
providing	O	O
it	O	O
with	O	O
a	O	O
pattern	O	O
,	O	O
if	O	O
the	O	O
String	B-api_mention	B-api_mention
is	O	O
in	O	O
ISO	O	O
-	O	O
8601	O	O
format	O	O
.	O	O
for	O	O
example	O	O
,	O	O
#	O	O
pre	O	O
Output	O	O
,	O	O
#	O	O
pre	O	O
and	O	O
use	O	O
DateTimeFormatter	B-api_mention	B-api_mention
only	O	O
if	O	O
you	O	O
have	O	O
to	O	O
deal	O	O
with	O	O
other	O	O
date	O	O
patterns	O	O
,	O	O
For	O	O
example	O	O
,	O	O
dd	O	O
MMM	O	O
uuuu	O	O
represents	O	O
the	O	O
day	O	O
of	O	O
the	O	O
month	O	O
(	O	O
two	O	O
digits	O	O
)	O	O
,	O	O
three	O	O
letters	O	O
of	O	O
the	O	O
name	O	O
of	O	O
the	O	O
month	O	O
(	O	O
Jan	O	O
,	O	O
Feb	O	O
,	O	O
Mar	O	O
,	O	O
.	O	O
.	O	O
.	O	O
)	O	O
,	O	O
and	O	O
a	O	O
four	O	O
-	O	O
digit	O	O
year	O	O
:	O	O
#	O	O
pre	O	O
Output	O	O
04	O	O
Aug	O	O
2015	O	O
parses	O	O
to	O	O
2015	O	O
-	O	O
08	O	O
-	O	O
04	O	O
also	O	O
remember	O	O
that	O	O
the	O	O
DateTimeFormatter	B-api_mention	B-api_mention
object	O	O
is	O	O
bidirectional	O	O
;	O	O
it	O	O
can	O	O
both	O	O
parse	O	O
input	O	O
and	O	O
format	O	O
output	O	O
.	O	O
#	O	O
pre	O	O
Output	O	O
2015	O	O
-	O	O
08	O	O
-	O	O
04	O	O
formats	O	O
as	O	O
04	O	O
Aug	O	O
2015	O	O
(	O	O
see	O	O
complete	O	O
list	O	O
of	O	O
Patterns	O	O
for	O	O
Formatting	O	O
and	O	O
Parsing	O	O
DateFormatter	B-api_mention	B-api_mention
)	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
25168062	O	O
Why	O	O
is	O	O
i	O	O
+	O	O
+	O	O
not	O	O
atomic	O	O
in	O	O
Java	O	O
?	O	O
To	O	O
get	O	O
a	O	O
bit	O	O
deeper	O	O
in	O	O
Java	O	O
I	O	O
tried	O	O
to	O	O
count	O	O
how	O	O
often	O	O
the	O	O
loop	O	O
in	O	O
threads	O	O
are	O	O
executed	O	O
.	O	O
So	O	O
I	O	O
used	O	O
a	O	O
private	O	O
static	O	O
int	O	O
total	O	O
=	O	O
0	O	O
;	O	O
in	O	O
the	O	O
main	O	O
class	O	O
.	O	O
I	O	O
have	O	O
two	O	O
threads	O	O
.	O	O
#	O	O
li	O	O
Thread	O	O
1	O	O
:	O	O
Prints	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
#	O	O
li	O	O
Thread	O	O
2	O	O
:	O	O
Prints	O	O
System	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
out	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
println	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
;	O	O
And	O	O
I	O	O
count	O	O
the	O	O
lines	O	O
printed	O	O
by	O	O
thread	O	O
1	O	O
and	O	O
thread	O	O
2	O	O
.	O	O
But	O	O
the	O	O
lines	O	O
of	O	O
thread	O	O
1	O	O
+	O	O
lines	O	O
of	O	O
thread	O	O
2	O	O
don	O	O
'	O	O
t	O	O
match	O	O
the	O	O
total	O	O
number	O	O
of	O	O
lines	O	O
printed	O	O
out	O	O
.	O	O
Here	O	O
is	O	O
my	O	O
code	O	O
:	O	O
#	O	O
pre	O	O
Question	O	O
-	O	O
7348711	O	O
,	O	O
answer	O	O
-	O	O
7800008	O	O
Strictly	O	O
speaking	O	O
-	O	O
you	O	O
have	O	O
no	O	O
choice	O	O
but	O	O
calling	O	O
either	O	O
hostname	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
or	O	O
-	O	O
on	O	O
Unix	O	O
gethostname	B-api_mention	B-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	O	O
This	O	O
is	O	O
the	O	O
name	O	O
of	O	O
your	O	O
computer	O	O
.	O	O
Any	O	O
attempt	O	O
to	O	O
determine	O	O
the	O	O
hostname	O	O
by	O	O
an	O	O
IP	O	O
address	O	O
like	O	O
this	O	O
InetAddress	B-api_mention	B-api_mention
.	I-api_mention	I-api_mention
getLocalHost	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
.	I-api_mention	I-api_mention
getHostName	I-api_mention	I-api_mention
(	I-api_mention	I-api_mention
args	I-api_mention	I-api_mention
)	I-api_mention	I-api_mention
is	O	O
bound	O	O
to	O	O
fail	O	O
in	O	O
some	O	O
circumstances	O	O
:	O	O
#	O	O
li	O	O
The	O	O
IP	O	O
address	O	O
might	O	O
not	O	O
resolve	O	O
into	O	O
any	O	O
name	O	O
.	O	O
Bad	O	O
DNS	O	O
setup	O	O
,	O	O
bad	O	O
system	O	O
setup	O	O
or	O	O
bad	O	O
provider	O	O
setup	O	O
may	O	O
be	O	O
the	O	O
reason	O	O
for	O	O
this	O	O
.	O	O
#	O	O
li	O	O
A	O	O
name	O	O
in	O	O
DNS	O	O
can	O	O
have	O	O
many	O	O
aliases	O	O
called	O	O
CNAMEs	O	O
.	O	O
These	O	O
can	O	O
only	O	O
be	O	O
resolved	O	O
in	O	O
one	O	O
direction	O	O
properly	O	O
:	O	O
name	O	O
to	O	O
address	O	O
.	O	O
The	O	O
reverse	O	O
direction	O	O
is	O	O
ambiguous	O	O
.	O	O
Which	O	O
one	O	O
is	O	O
the	O	O
"	O	O
official	O	O
"	O	O
name	O	O
?	O	O
#	O	O
li	O	O
A	O	O
host	O	O
can	O	O
have	O	O
many	O	O
different	O	O
IP	O	O
addresses	O	O
-	O	O
and	O	O
each	O	O
address	O	O
can	O	O
have	O	O
many	O	O
different	O	O
names	O	O
.	O	O
Two	O	O
common	O	O
cases	O	O
are	O	O
:	O	O
One	O	O
ethernet	O	O
port	O	O
has	O	O
several	O	O
"	O	O
logical	O	O
"	O	O
IP	O	O
addresses	O	O
or	O	O
the	O	O
computer	O	O
has	O	O
several	O	O
ethernet	O	O
ports	O	O
.	O	O
It	O	O
is	O	O
configurable	O	O
whether	O	O
they	O	O
share	O	O
an	O	O
IP	O	O
or	O	O
have	O	O
different	O	O
IPs	O	O
.	O	O
This	O	O
is	O	O
called	O	O
"	O	O
multihomed	O	O
"	O	O
.	O	O
#	O	O
li	O	O
One	O	O
Name	O	O
in	O	O
DNS	O	O
can	O	O
resolve	O	O
to	O	O
several	O	O
IP	O	O
Addresses	O	O
.	O	O
And	O	O
not	O	O
all	O	O
of	O	O
those	O	O
addresses	O	O
must	O	O
be	O	O
located	O	O
on	O	O
the	O	O
same	O	O
computer	O	O
!	O	O
(	O	O
Usecase	O	O
:	O	O
A	O	O
simple	O	O
form	O	O
of	O	O
load	O	O
-	O	O
balancing	O	O
)	O	O
#	O	O
li	O	O
Let	O	O
'	O	O
s	O	O
not	O	O
even	O	O
start	O	O
talking	O	O
about	O	O
dynamic	O	O
IP	O	O
addresses	O	O
.	O	O
Also	O	O
don	O	O
'	O	O
t	O	O
confuse	O	O
the	O	O
name	O	O
of	O	O
an	O	O
IP	O	O
-	O	O
address	O	O
with	O	O
the	O	O
name	O	O
of	O	O
the	O	O
host	O	O
(	O	O
hostname	O	O
)	O	O
.	O	O
A	O	O
metaphor	O	O
might	O	O
make	O	O
it	O	O
clearer	O	O
:	O	O
#	O	O
blockquote	O	O
This	O	O
illustrates	O	O
it	O	O
pretty	O	O
much	O	O
I	O	O
think	O	O
.	O	O
The	O	O
good	O	O
news	O	O
is	O	O
:	O	O
The	O	O
real	O	O
hostname	O	O
is	O	O
usually	O	O
not	O	O
necessary	O	O
.	O	O
In	O	O
most	O	O
cases	O	O
any	O	O
name	O	O
which	O	O
resolves	O	O
into	O	O
an	O	O
IP	O	O
address	O	O
on	O	O
this	O	O
host	O	O
will	O	O
do	O	O
.	O	O
(	O	O
The	O	O
stranger	O	O
might	O	O
enter	O	O
the	O	O
city	O	O
by	O	O
Northgate	O	O
,	O	O
but	O	O
helpful	O	O
locals	O	O
translate	O	O
the	O	O
"	O	O
2nd	O	O
left	O	O
"	O	O
part	O	O
.	O	O
)	O	O
If	O	O
the	O	O
remaining	O	O
corner	O	O
cases	O	O
you	O	O
must	O	O
use	O	O
the	O	O
definitive	O	O
source	O	O
of	O	O
this	O	O
configuration	O	O
setting	O	O
-	O	O
which	O	O
is	O	O
the	O	O
C	O	O
function	O	O
gethostname	O	B-api_mention
(	O	I-api_mention
args	O	I-api_mention
)	O	I-api_mention
.	O	O
That	O	O
function	O	O
is	O	O
also	O	O
called	O	O
by	O	O
the	O	O
program	O	O
hostname	O	O
.	O	O

CRFClassifier tagged 41275 words in 1 documents at 13925.44 words per second.
         Entity	P	R	F1	TP	FP	FN
    api_mention	0.8477	0.8391	0.8434	996	179	191
         Totals	0.8477	0.8391	0.8434	996	179	191

(python34) C:\Users\Peter\Documents\GitHub\4045-NLP>ENDLOCAL
